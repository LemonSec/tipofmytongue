1
00:00:08,960 --> 00:00:10,880
thanks for watching this video

2
00:00:10,880 --> 00:00:12,320
in this video i'm going to present my

3
00:00:12,320 --> 00:00:14,719
paper his name is dominic shadowing

4
00:00:14,719 --> 00:00:16,560
leveraging content delivery networks for

5
00:00:16,560 --> 00:00:17,920
robust blocking resistance and

6
00:00:17,920 --> 00:00:19,199
communications

7
00:00:19,199 --> 00:00:21,039
my name is ming wei i'm assistant

8
00:00:21,039 --> 00:00:22,560
professor in cyber security engineering

9
00:00:22,560 --> 00:00:24,560
department in george mason university

10
00:00:24,560 --> 00:00:28,919
and i'm a single author of this paper

11
00:00:35,360 --> 00:00:37,280
here's a layout of my presentation first

12
00:00:37,280 --> 00:00:39,520
i'm going to briefly introduce what is

13
00:00:39,520 --> 00:00:41,040
the main shadowing

14
00:00:41,040 --> 00:00:42,879
and then i'm going to

15
00:00:42,879 --> 00:00:45,039
discuss about how domain sharing works

16
00:00:45,039 --> 00:00:47,039
and after that i'm going to

17
00:00:47,039 --> 00:00:48,719
briefly talk about the domain studying

18
00:00:48,719 --> 00:00:50,320
from the perspective of performance

19
00:00:50,320 --> 00:00:52,320
security and blocking resistance and

20
00:00:52,320 --> 00:00:53,600
lastly i'm going to conclude my

21
00:00:53,600 --> 00:00:56,600
presentation

22
00:00:58,399 --> 00:01:00,800
but first what is domain shadowing

23
00:01:00,800 --> 00:01:03,120
simply put domain shadowing is a noble

24
00:01:03,120 --> 00:01:05,519
censorship erasion technique that uses

25
00:01:05,519 --> 00:01:07,439
content delivery networks

26
00:01:07,439 --> 00:01:09,200
if you work in the field of censorship

27
00:01:09,200 --> 00:01:12,080
erasion you must know domain fronting so

28
00:01:12,080 --> 00:01:14,080
domain setting is similar to but

29
00:01:14,080 --> 00:01:16,000
different from domain fronting in these

30
00:01:16,000 --> 00:01:17,759
two perspectives

31
00:01:17,759 --> 00:01:20,479
first domain setting can use one cdn to

32
00:01:20,479 --> 00:01:22,720
visit any websites it doesn't matter if

33
00:01:22,720 --> 00:01:24,880
these websites are on the same citing or

34
00:01:24,880 --> 00:01:26,560
not and it doesn't matter if this

35
00:01:26,560 --> 00:01:28,880
website is using cdn at all

36
00:01:28,880 --> 00:01:31,439
as a comparison domain fronting it must

37
00:01:31,439 --> 00:01:33,680
it requires the visited website to share

38
00:01:33,680 --> 00:01:36,240
the sim cd at the front domain

39
00:01:36,240 --> 00:01:38,799
for second domain setting exploits a

40
00:01:38,799 --> 00:01:41,360
legitimate cdn feature which makes it

41
00:01:41,360 --> 00:01:44,399
harder to be blocked

42
00:01:45,119 --> 00:01:46,720
then let's look at how domain sharing

43
00:01:46,720 --> 00:01:48,000
works

44
00:01:48,000 --> 00:01:50,079
to understand how domain setting works

45
00:01:50,079 --> 00:01:51,840
you first have to understand how cdn

46
00:01:51,840 --> 00:01:54,000
works so content delivery network

47
00:01:54,000 --> 00:01:56,719
basically a cdn is a shared webcast

48
00:01:56,719 --> 00:01:58,799
here i'll give a very simple example

49
00:01:58,799 --> 00:02:00,719
so let's say here uh i have a content

50
00:02:00,719 --> 00:02:02,320
provider the content provider has this

51
00:02:02,320 --> 00:02:04,479
web server here but the server the

52
00:02:04,479 --> 00:02:06,640
content provider wants to serve all the

53
00:02:06,640 --> 00:02:08,720
users across the world so what the

54
00:02:08,720 --> 00:02:10,800
content provider can do is the provider

55
00:02:10,800 --> 00:02:13,760
can use a cdn service so cdn service has

56
00:02:13,760 --> 00:02:14,800
a lot of

57
00:02:14,800 --> 00:02:16,080
cache servers

58
00:02:16,080 --> 00:02:18,239
distributed across the world which can

59
00:02:18,239 --> 00:02:20,640
cache a web document and use a cached

60
00:02:20,640 --> 00:02:24,080
web document to serve local users

61
00:02:24,080 --> 00:02:27,360
so besides a webcast a cdn also serves

62
00:02:27,360 --> 00:02:29,599
as a name server which handles domain

63
00:02:29,599 --> 00:02:31,200
name transformation

64
00:02:31,200 --> 00:02:33,440
so based on the previous example here is

65
00:02:33,440 --> 00:02:35,760
what happens so let's further assume

66
00:02:35,760 --> 00:02:38,080
this content provider has a domain

67
00:02:38,080 --> 00:02:41,519
it runs this service on aws and it got a

68
00:02:41,519 --> 00:02:44,800
canonical domain which is abc.aws.com

69
00:02:44,800 --> 00:02:46,400
but content provider doesn't want to

70
00:02:46,400 --> 00:02:48,560
advertise this domain it doesn't want

71
00:02:48,560 --> 00:02:50,959
other users to visit this website using

72
00:02:50,959 --> 00:02:53,280
this domain instead the content provider

73
00:02:53,280 --> 00:02:55,599
wants users to use this example document

74
00:02:55,599 --> 00:02:57,040
such that when the user enters

75
00:02:57,040 --> 00:03:00,000
example.com it can be directed to

76
00:03:00,000 --> 00:03:01,920
this website so what the content

77
00:03:01,920 --> 00:03:05,040
provider can do is it can go into the

78
00:03:05,040 --> 00:03:08,800
cdn and configure the example.command

79
00:03:08,800 --> 00:03:12,080
example.com at the front end of the cdn

80
00:03:12,080 --> 00:03:12,920
and

81
00:03:12,920 --> 00:03:15,599
abc.aws.com at the back end of the cdn

82
00:03:15,599 --> 00:03:18,000
service such that when a user visits

83
00:03:18,000 --> 00:03:20,560
example.com the request will be sent to

84
00:03:20,560 --> 00:03:22,159
this cache server and the cache server

85
00:03:22,159 --> 00:03:24,120
is going to access

86
00:03:24,120 --> 00:03:28,560
abc.aws.com on behave of this user

87
00:03:29,120 --> 00:03:31,360
in this and the next slide i'm going to

88
00:03:31,360 --> 00:03:32,879
briefly introduce how the minimum

89
00:03:32,879 --> 00:03:35,200
transformation happens inside the cdn

90
00:03:35,200 --> 00:03:37,040
this shows if that's fastly version

91
00:03:37,040 --> 00:03:39,200
firstly is a cdn provider it's a big cdn

92
00:03:39,200 --> 00:03:40,959
provider in north america so let's

93
00:03:40,959 --> 00:03:43,280
follow these eight steps the server when

94
00:03:43,280 --> 00:03:44,879
this when the user wants to visit

95
00:03:44,879 --> 00:03:46,400
example.com

96
00:03:46,400 --> 00:03:50,159
a dns query will be sent to name server

97
00:03:50,159 --> 00:03:52,400
let's assume it's good added wood id is

98
00:03:52,400 --> 00:03:54,239
going to resolve example.com into

99
00:03:54,239 --> 00:03:57,239
global.ssl.fastly.net

100
00:03:57,360 --> 00:03:59,840
which is a subdomain belongs too fastly

101
00:03:59,840 --> 00:04:02,319
the second dns query will be

102
00:04:02,319 --> 00:04:04,640
sent to a fast listening server which

103
00:04:04,640 --> 00:04:06,959
will be resolved to a ipi address that

104
00:04:06,959 --> 00:04:09,599
belongs to one of fastly's app server or

105
00:04:09,599 --> 00:04:11,120
cache servers

106
00:04:11,120 --> 00:04:13,200
then the user is going to send requests

107
00:04:13,200 --> 00:04:15,439
to this app server and asking the

108
00:04:15,439 --> 00:04:18,079
content of example.com

109
00:04:18,079 --> 00:04:19,759
so when this ad server receives this

110
00:04:19,759 --> 00:04:21,600
request the app server is going to

111
00:04:21,600 --> 00:04:22,759
access

112
00:04:22,759 --> 00:04:24,479
abc.ews.com which has been

113
00:04:24,479 --> 00:04:26,880
pre-configured by the user and when the

114
00:04:26,880 --> 00:04:28,400
response is received

115
00:04:28,400 --> 00:04:30,639
from abc.aws.com

116
00:04:30,639 --> 00:04:32,960
the content will be repackaged

117
00:04:32,960 --> 00:04:35,199
under the name of example.com and sent

118
00:04:35,199 --> 00:04:37,919
back to the user

119
00:04:38,800 --> 00:04:40,880
this slide shows a slightly different

120
00:04:40,880 --> 00:04:43,360
version which is conducted by cloudflare

121
00:04:43,360 --> 00:04:45,280
which is another cdn provider

122
00:04:45,280 --> 00:04:47,520
so cloudflare has its own name server

123
00:04:47,520 --> 00:04:49,440
which will skip two steps actually so

124
00:04:49,440 --> 00:04:51,919
the user will directly send the dns

125
00:04:51,919 --> 00:04:54,800
query about example.com to cloudflare's

126
00:04:54,800 --> 00:04:56,880
name server and this cloudflare's name

127
00:04:56,880 --> 00:04:58,639
server is going to directly respond with

128
00:04:58,639 --> 00:05:01,120
api address that belongs to one of

129
00:05:01,120 --> 00:05:03,199
cloudflare's edge server then the user

130
00:05:03,199 --> 00:05:04,720
is going to again send this request to

131
00:05:04,720 --> 00:05:06,160
example.com

132
00:05:06,160 --> 00:05:07,680
the edge server is going to retrieve

133
00:05:07,680 --> 00:05:10,080
this document and when it's received it

134
00:05:10,080 --> 00:05:12,800
will send it back to the user again

135
00:05:12,800 --> 00:05:15,840
under the name of example.com

136
00:05:15,840 --> 00:05:18,160
so what makes things interesting is

137
00:05:18,160 --> 00:05:19,919
during this whole process

138
00:05:19,919 --> 00:05:22,800
okay so either the user always sensor if

139
00:05:22,800 --> 00:05:24,080
we assume there's a sensor who can

140
00:05:24,080 --> 00:05:26,240
oversee all this traffic either the user

141
00:05:26,240 --> 00:05:28,400
or sensor knows what is happening inside

142
00:05:28,400 --> 00:05:31,120
the cdn so the user and sensor who looks

143
00:05:31,120 --> 00:05:33,120
at this traffic only knows that the user

144
00:05:33,120 --> 00:05:35,520
is communicating with cdn and asking

145
00:05:35,520 --> 00:05:37,600
about example.com so what they don't

146
00:05:37,600 --> 00:05:39,680
know is this example.com is actually

147
00:05:39,680 --> 00:05:42,560
transformed into adc.ews.com

148
00:05:42,560 --> 00:05:44,720
so this transformation is only known to

149
00:05:44,720 --> 00:05:46,960
the cdn and to the domain owner who has

150
00:05:46,960 --> 00:05:49,680
configured this

151
00:05:51,600 --> 00:05:53,759
so based on this a user can evade a

152
00:05:53,759 --> 00:05:55,919
censorship using cdn with these five

153
00:05:55,919 --> 00:05:56,800
steps

154
00:05:56,800 --> 00:05:58,639
so first user is going to register new

155
00:05:58,639 --> 00:06:00,800
domain let's say it's a shadow.com and

156
00:06:00,800 --> 00:06:02,319
we assume that this new domain is not

157
00:06:02,319 --> 00:06:04,240
blocked because it's brand new

158
00:06:04,240 --> 00:06:05,759
and then the user is going to subscribe

159
00:06:05,759 --> 00:06:08,479
to a cdn service that is not censored

160
00:06:08,479 --> 00:06:10,400
then in the cdn the user is going to set

161
00:06:10,400 --> 00:06:12,639
shadow.com at the front end and be

162
00:06:12,639 --> 00:06:14,880
blocked.com as a backend here we assume

163
00:06:14,880 --> 00:06:16,800
block.com is a sensor domain that cannot

164
00:06:16,800 --> 00:06:18,240
be accessed

165
00:06:18,240 --> 00:06:20,400
and after all set the user can visit the

166
00:06:20,400 --> 00:06:22,639
blocked or censored domain by visiting

167
00:06:22,639 --> 00:06:24,479
the shadow domain so basically the user

168
00:06:24,479 --> 00:06:27,120
can enter shadow.com in his browser and

169
00:06:27,120 --> 00:06:29,520
then the block.com content will appear

170
00:06:29,520 --> 00:06:31,120
in the project

171
00:06:31,120 --> 00:06:32,880
and what makes things better is all

172
00:06:32,880 --> 00:06:34,639
about configuration steps can actually

173
00:06:34,639 --> 00:06:37,280
be handled by a browser extension which

174
00:06:37,280 --> 00:06:39,280
we have implemented as a prototype based

175
00:06:39,280 --> 00:06:40,720
on firefox

176
00:06:40,720 --> 00:06:42,319
and of course as you can imagine there

177
00:06:42,319 --> 00:06:43,919
are a lot of details about

178
00:06:43,919 --> 00:06:45,280
configurations

179
00:06:45,280 --> 00:06:47,280
which i skip because because of time

180
00:06:47,280 --> 00:06:48,880
limit and if you're interested you can

181
00:06:48,880 --> 00:06:52,319
find all the details in my paper

182
00:06:53,280 --> 00:06:55,039
and here i will directly jump to the

183
00:06:55,039 --> 00:06:56,720
results

184
00:06:56,720 --> 00:06:58,560
so what we have done we have registered

185
00:06:58,560 --> 00:07:00,639
domain which is domain sharing.net and

186
00:07:00,639 --> 00:07:03,039
we have linked it to facebook.com

187
00:07:03,039 --> 00:07:04,800
and we have tested from a censored

188
00:07:04,800 --> 00:07:06,479
country with sensors which blocks

189
00:07:06,479 --> 00:07:07,840
facebook.com

190
00:07:07,840 --> 00:07:10,160
and in our exam experiment we also use

191
00:07:10,160 --> 00:07:12,160
um the technical from domain frontier

192
00:07:12,160 --> 00:07:14,319
and we have chosen forbids.com as a

193
00:07:14,319 --> 00:07:16,319
front domain so here shows what we have

194
00:07:16,319 --> 00:07:18,400
done basically we have sent the request

195
00:07:18,400 --> 00:07:21,440
to 4bits.com but in the request we have

196
00:07:21,440 --> 00:07:23,039
changed the host header into domain

197
00:07:23,039 --> 00:07:24,319
shading.net

198
00:07:24,319 --> 00:07:26,560
so this request is sent to cdn and in

199
00:07:26,560 --> 00:07:28,960
the cdn we have configured to connect

200
00:07:28,960 --> 00:07:31,599
domainstation.net to facebook.com so

201
00:07:31,599 --> 00:07:33,599
then this app server is going to fetch

202
00:07:33,599 --> 00:07:35,280
the doc the web document from

203
00:07:35,280 --> 00:07:37,680
facebook.com and get response and then

204
00:07:37,680 --> 00:07:40,479
send it back to the user in the name of

205
00:07:40,479 --> 00:07:43,199
phobias.com

206
00:07:43,280 --> 00:07:46,319
here's the result okay so first uh it

207
00:07:46,319 --> 00:07:48,080
shows that we can successfully access

208
00:07:48,080 --> 00:07:49,759
facebook from within the censored

209
00:07:49,759 --> 00:07:52,000
country okay second i want to bring to

210
00:07:52,000 --> 00:07:53,840
your attention is if you look at here so

211
00:07:53,840 --> 00:07:55,280
it actually shows the front domain which

212
00:07:55,280 --> 00:07:57,599
is 3w.4bits.com but the content that you

213
00:07:57,599 --> 00:08:00,960
see is from facebook

214
00:08:01,120 --> 00:08:02,960
so next i'm going to briefly talk about

215
00:08:02,960 --> 00:08:04,400
performance

216
00:08:04,400 --> 00:08:07,199
so in this experiment we

217
00:08:07,199 --> 00:08:09,520
we use different approaches to fetch the

218
00:08:09,520 --> 00:08:11,759
same document 200 times

219
00:08:11,759 --> 00:08:13,440
we basically use four different

220
00:08:13,440 --> 00:08:15,919
approaches so we use domain shadowing

221
00:08:15,919 --> 00:08:18,400
we use siphon which is a

222
00:08:18,400 --> 00:08:20,639
popular free weekend based censorship

223
00:08:20,639 --> 00:08:22,879
tool a censorship efficient tool we also

224
00:08:22,879 --> 00:08:25,360
use two vps based products which

225
00:08:25,360 --> 00:08:27,840
basically we rented a linux instance on

226
00:08:27,840 --> 00:08:30,720
aws and we ran a http proxy based on

227
00:08:30,720 --> 00:08:32,559
that and we also compared with directly

228
00:08:32,559 --> 00:08:33,919
accessing the website

229
00:08:33,919 --> 00:08:36,080
so as we can see here

230
00:08:36,080 --> 00:08:38,640
um so basically all the domain settings

231
00:08:38,640 --> 00:08:41,039
based on five different cpu cdns their

232
00:08:41,039 --> 00:08:43,760
performance is much better than either

233
00:08:43,760 --> 00:08:46,640
iphone or vpn space and even better than

234
00:08:46,640 --> 00:08:50,080
vpn than directly access so this line

235
00:08:50,080 --> 00:08:52,800
shows the cdf of all these 200 document

236
00:08:52,800 --> 00:08:55,680
fetches you see here is a shortest time

237
00:08:55,680 --> 00:08:58,239
consumed

238
00:08:58,640 --> 00:09:00,560
okay so next uh i'm going to briefly

239
00:09:00,560 --> 00:09:03,120
talk about security so domain station

240
00:09:03,120 --> 00:09:05,600
does bring some security concerns and

241
00:09:05,600 --> 00:09:07,279
the root cause of such security concerns

242
00:09:07,279 --> 00:09:09,440
is because the main name transformation

243
00:09:09,440 --> 00:09:11,360
that happens in domain station confuses

244
00:09:11,360 --> 00:09:13,279
the browser which may allow cross-domain

245
00:09:13,279 --> 00:09:16,240
attacks so basically what happens is

246
00:09:16,240 --> 00:09:18,560
as in here the browser thinks it is

247
00:09:18,560 --> 00:09:20,880
visiting four-bits.com but the content

248
00:09:20,880 --> 00:09:22,560
and including all the response headers

249
00:09:22,560 --> 00:09:24,399
are actually from facebook

250
00:09:24,399 --> 00:09:26,480
so because of this the browser can no

251
00:09:26,480 --> 00:09:28,320
longer enforce the sim origin policy

252
00:09:28,320 --> 00:09:30,240
which makes possible of cross site

253
00:09:30,240 --> 00:09:31,839
scripting and cookies and session

254
00:09:31,839 --> 00:09:33,040
hijacking

255
00:09:33,040 --> 00:09:35,120
okay so a solution basically we can

256
00:09:35,120 --> 00:09:36,959
integrate some content measures into the

257
00:09:36,959 --> 00:09:39,200
product extension and we can also do

258
00:09:39,200 --> 00:09:41,200
some user education we can tell the user

259
00:09:41,200 --> 00:09:42,560
what are suggested what are not

260
00:09:42,560 --> 00:09:44,000
suggested to do

261
00:09:44,000 --> 00:09:45,600
but the ultimate solution would be we

262
00:09:45,600 --> 00:09:46,959
have to dive

263
00:09:46,959 --> 00:09:49,839
uh dive deeper in the browser and modify

264
00:09:49,839 --> 00:09:51,040
the browser

265
00:09:51,040 --> 00:09:53,279
which is not impossible but requires a

266
00:09:53,279 --> 00:09:54,959
little bit more labor so one example

267
00:09:54,959 --> 00:09:56,240
would be the top browser which is a

268
00:09:56,240 --> 00:09:57,839
highly customized

269
00:09:57,839 --> 00:10:01,120
browser based on firefighter firefox

270
00:10:01,120 --> 00:10:03,120
okay so lastly i'm going to talk about

271
00:10:03,120 --> 00:10:05,360
blocking resistance

272
00:10:05,360 --> 00:10:07,040
so domain setting is made possible

273
00:10:07,040 --> 00:10:09,600
because the cdn allows a user to set any

274
00:10:09,600 --> 00:10:11,360
domain at the back end

275
00:10:11,360 --> 00:10:12,880
okay but this

276
00:10:12,880 --> 00:10:15,120
is a legitimate feature of cdn so cd

277
00:10:15,120 --> 00:10:17,279
need this to work therefore cdn cannot

278
00:10:17,279 --> 00:10:19,279
easily disallow it because it's gonna

279
00:10:19,279 --> 00:10:20,800
harm cdn

280
00:10:20,800 --> 00:10:22,480
and on the other hand sensor can see

281
00:10:22,480 --> 00:10:24,079
nothing but in normal communication

282
00:10:24,079 --> 00:10:26,079
between the user and the shadow.com as i

283
00:10:26,079 --> 00:10:28,240
have shown before as long as https is

284
00:10:28,240 --> 00:10:29,040
used

285
00:10:29,040 --> 00:10:30,720
and of course sensor can do like a

286
00:10:30,720 --> 00:10:32,160
traffic analysis and website

287
00:10:32,160 --> 00:10:34,000
fingerprinting but this technique is not

288
00:10:34,000 --> 00:10:35,200
mature and

289
00:10:35,200 --> 00:10:37,839
also it is not impossible to comment

290
00:10:37,839 --> 00:10:41,040
and again this also ctn by itself can

291
00:10:41,040 --> 00:10:43,519
identify the user domain sharing but the

292
00:10:43,519 --> 00:10:45,519
identification doesn't come for free the

293
00:10:45,519 --> 00:10:48,720
cdn has to spend uh significant uh

294
00:10:48,720 --> 00:10:51,440
effort and time to identify it so

295
00:10:51,440 --> 00:10:54,000
essentially identification is a kind of

296
00:10:54,000 --> 00:10:56,720
like a endless arm switch so a cdn can

297
00:10:56,720 --> 00:10:58,399
do a contaminator but then we can find

298
00:10:58,399 --> 00:10:59,680
the counter content contaminator and so

299
00:10:59,680 --> 00:11:01,519
on so forth

300
00:11:01,519 --> 00:11:03,200
okay so to wrap up

301
00:11:03,200 --> 00:11:05,040
the miss shadowing is a single user

302
00:11:05,040 --> 00:11:07,279
censorship erasing solution so the user

303
00:11:07,279 --> 00:11:08,880
is going to handle everything as i have

304
00:11:08,880 --> 00:11:09,920
shown before

305
00:11:09,920 --> 00:11:12,399
and this solution doesn't require any

306
00:11:12,399 --> 00:11:14,399
dedicated third party so there's no

307
00:11:14,399 --> 00:11:16,560
other party to support you to evade this

308
00:11:16,560 --> 00:11:18,720
censorship and it doesn't it also

309
00:11:18,720 --> 00:11:20,160
doesn't need a collaboration from the

310
00:11:20,160 --> 00:11:21,600
sensor website

311
00:11:21,600 --> 00:11:23,600
and it is lightweight because it only

312
00:11:23,600 --> 00:11:25,040
relies on a simple white browser

313
00:11:25,040 --> 00:11:27,279
extension and it has better performance

314
00:11:27,279 --> 00:11:28,959
as i'm showing it is faster than most

315
00:11:28,959 --> 00:11:31,760
vps based or even direct access

316
00:11:31,760 --> 00:11:33,600
and it is harder to block

317
00:11:33,600 --> 00:11:35,120
because it utilizes a legitimate feature

318
00:11:35,120 --> 00:11:37,920
of the cdn and without this feature cdn

319
00:11:37,920 --> 00:11:39,600
would work or at least cd is going to

320
00:11:39,600 --> 00:11:41,680
sacrifice a lot to work

321
00:11:41,680 --> 00:11:43,760
and because of time limit i skipped a

322
00:11:43,760 --> 00:11:45,440
lot of details and if you are interested

323
00:11:45,440 --> 00:11:47,040
you can always find all the details in

324
00:11:47,040 --> 00:11:49,040
my paper

325
00:11:49,040 --> 00:11:51,040
so thanks for watching this video and if

326
00:11:51,040 --> 00:11:52,320
any question

327
00:11:52,320 --> 00:11:54,320
feel free to send an email to me here at

328
00:11:54,320 --> 00:11:55,519
my email

329
00:11:55,519 --> 00:11:57,200
and thank you good thank you again for

330
00:11:57,200 --> 00:12:01,160
watching this video bye

