1
00:00:09,280 --> 00:00:11,759
hello my name is reza and welcome to my

2
00:00:11,759 --> 00:00:13,120
presentation

3
00:00:13,120 --> 00:00:15,440
today i'm going to present our work 10

4
00:00:15,440 --> 00:00:17,840
problem with safety via robust points to

5
00:00:17,840 --> 00:00:20,640
authentication

6
00:00:20,880 --> 00:00:22,880
as you know temporal memory corruptions

7
00:00:22,880 --> 00:00:25,199
are pretty common in unsafe programming

8
00:00:25,199 --> 00:00:28,480
languages such as c and c plus plus so

9
00:00:28,480 --> 00:00:30,400
they are attractive i guess for the

10
00:00:30,400 --> 00:00:31,519
attacker

11
00:00:31,519 --> 00:00:34,800
so far many solutions have been proposed

12
00:00:34,800 --> 00:00:37,440
however these flick up approaches rely

13
00:00:37,440 --> 00:00:40,320
on a huge amount of metadata to track

14
00:00:40,320 --> 00:00:42,640
the objects pointers and their lifetime

15
00:00:42,640 --> 00:00:45,520
in the memory which leads to high memory

16
00:00:45,520 --> 00:00:47,600
overhead

17
00:00:47,600 --> 00:00:50,480
also the metadata is left unprotected

18
00:00:50,480 --> 00:00:53,280
technically these approaches assume that

19
00:00:53,280 --> 00:00:55,760
spatial safety is in place or

20
00:00:55,760 --> 00:00:58,079
other techniques such as bound checkers

21
00:00:58,079 --> 00:01:01,600
can protect the metadata

22
00:01:01,840 --> 00:01:04,080
in our work we are going to detect

23
00:01:04,080 --> 00:01:06,080
temporal memory corruptions in the heap

24
00:01:06,080 --> 00:01:08,479
during the runtime however we are going

25
00:01:08,479 --> 00:01:10,240
to answer some important research

26
00:01:10,240 --> 00:01:12,960
questions such as can we design a system

27
00:01:12,960 --> 00:01:15,520
with low memory overhead and reasonable

28
00:01:15,520 --> 00:01:17,200
runtime overhead

29
00:01:17,200 --> 00:01:19,920
and also can we guarantee the integrity

30
00:01:19,920 --> 00:01:22,320
of metadata without relying on other

31
00:01:22,320 --> 00:01:24,080
approaches

32
00:01:24,080 --> 00:01:26,720
to do so we propose ptr

33
00:01:26,720 --> 00:01:29,680
our system checks upon each pointer

34
00:01:29,680 --> 00:01:31,920
difference whether the pointer is

35
00:01:31,920 --> 00:01:34,000
pointing to the original or intended

36
00:01:34,000 --> 00:01:34,960
object

37
00:01:34,960 --> 00:01:36,960
and whether the method data and the

38
00:01:36,960 --> 00:01:40,000
relationship of the pointers and also

39
00:01:40,000 --> 00:01:42,000
the objects are genuine

40
00:01:42,000 --> 00:01:45,439
but how we can achieve these goals

41
00:01:45,439 --> 00:01:47,040
we ux patch

42
00:01:47,040 --> 00:01:49,680
hack stands for pointer authentication

43
00:01:49,680 --> 00:01:53,040
code technically pack is an extension of

44
00:01:53,040 --> 00:01:54,799
arm architecture

45
00:01:54,799 --> 00:01:57,439
and it can provide

46
00:01:57,439 --> 00:02:00,479
value integrity for the pointers it has

47
00:02:00,479 --> 00:02:03,200
already been used in iphones to provide

48
00:02:03,200 --> 00:02:05,920
control flow integrity

49
00:02:05,920 --> 00:02:08,720
the input of pack is just a pointer and

50
00:02:08,720 --> 00:02:12,239
a context and the output is a signature

51
00:02:12,239 --> 00:02:14,480
this signature is stored in unused

52
00:02:14,480 --> 00:02:16,319
widths of a pointer

53
00:02:16,319 --> 00:02:19,920
and it is applicable in 64-bit system

54
00:02:19,920 --> 00:02:22,400
as i mentioned pac has already been used

55
00:02:22,400 --> 00:02:24,560
for providing cfi

56
00:02:24,560 --> 00:02:27,840
for data pointers or code pointers but

57
00:02:27,840 --> 00:02:30,000
in this paper

58
00:02:30,000 --> 00:02:32,480
we're going to use pack for data

59
00:02:32,480 --> 00:02:36,800
pointers and provide temporal safety

60
00:02:36,800 --> 00:02:38,800
we divide memory into two sections

61
00:02:38,800 --> 00:02:41,920
pointers and objects for the objects we

62
00:02:41,920 --> 00:02:45,200
generate a 64-bit random id

63
00:02:45,200 --> 00:02:48,239
and it's located exactly before the

64
00:02:48,239 --> 00:02:50,000
object in memory technically the

65
00:02:50,000 --> 00:02:53,840
metadata is online inline

66
00:02:53,920 --> 00:02:56,480
for the pointer we use the base pointer

67
00:02:56,480 --> 00:02:59,120
of the object and also the id of the

68
00:02:59,120 --> 00:03:00,239
object

69
00:03:00,239 --> 00:03:03,360
as the input of pac-ia instruction

70
00:03:03,360 --> 00:03:05,760
then we generate the signature based on

71
00:03:05,760 --> 00:03:06,640
that

72
00:03:06,640 --> 00:03:09,920
this signature is stored in unused bits

73
00:03:09,920 --> 00:03:11,360
of the pointer

74
00:03:11,360 --> 00:03:14,000
therefore by this technique we are able

75
00:03:14,000 --> 00:03:16,480
to make a connection between the pointer

76
00:03:16,480 --> 00:03:19,840
and the object

77
00:03:20,159 --> 00:03:22,400
this figure shows big picture of our

78
00:03:22,400 --> 00:03:23,680
system

79
00:03:23,680 --> 00:03:26,159
technically during the compile time we

80
00:03:26,159 --> 00:03:28,799
instrument the lvm bit codes at

81
00:03:28,799 --> 00:03:32,000
allocation sites such as malloc

82
00:03:32,000 --> 00:03:35,040
we generate signatures for the pointers

83
00:03:35,040 --> 00:03:37,840
at pre-referencing sites such as load

84
00:03:37,840 --> 00:03:40,720
and store we authenticate the pointers

85
00:03:40,720 --> 00:03:43,920
and in the allocation sites such as free

86
00:03:43,920 --> 00:03:46,720
we invalidate the idea of the objects

87
00:03:46,720 --> 00:03:48,640
therefore

88
00:03:48,640 --> 00:03:51,599
we can detect dangling pointers

89
00:03:51,599 --> 00:03:54,319
as you can see in runtime library we use

90
00:03:54,319 --> 00:03:57,519
pac-ie instructions for generating ac

91
00:03:57,519 --> 00:04:01,319
and we use ia instruction for

92
00:04:01,319 --> 00:04:04,080
authenticating the pointers if you

93
00:04:04,080 --> 00:04:06,159
cannot authenticate the pointers it

94
00:04:06,159 --> 00:04:08,480
means that the pointer is

95
00:04:08,480 --> 00:04:10,400
a dangling pointer

96
00:04:10,400 --> 00:04:13,280
or a special corruption has corrupted

97
00:04:13,280 --> 00:04:15,280
the idea of the object that's why the

98
00:04:15,280 --> 00:04:19,279
pointer cannot be authenticated

99
00:04:20,238 --> 00:04:22,720
in our design we assume that the pointer

100
00:04:22,720 --> 00:04:25,199
always points to the beginning of the

101
00:04:25,199 --> 00:04:28,000
object and id is located before that

102
00:04:28,000 --> 00:04:30,240
technically id is in line

103
00:04:30,240 --> 00:04:32,479
however this assumption is not always

104
00:04:32,479 --> 00:04:34,240
true there are some cases that the

105
00:04:34,240 --> 00:04:36,400
pointer is pointing to the middle of the

106
00:04:36,400 --> 00:04:38,320
object for example in the case of

107
00:04:38,320 --> 00:04:41,199
pointer arithmetic

108
00:04:41,199 --> 00:04:44,000
in order to find the idea of the object

109
00:04:44,000 --> 00:04:46,639
we propose a solution which is called

110
00:04:46,639 --> 00:04:49,919
backward search technically

111
00:04:49,919 --> 00:04:53,040
in this method we go upward until

112
00:04:53,040 --> 00:04:55,680
finding an id that can authenticate this

113
00:04:55,680 --> 00:04:58,240
pointer

114
00:04:58,960 --> 00:05:01,440
we do some alignment

115
00:05:01,440 --> 00:05:03,680
for the objects to

116
00:05:03,680 --> 00:05:04,720
find

117
00:05:04,720 --> 00:05:07,280
the id of the objects faster for example

118
00:05:07,280 --> 00:05:11,840
we align the objects to 16 bytes

119
00:05:12,720 --> 00:05:14,479
in the next round we do some

120
00:05:14,479 --> 00:05:16,960
optimization

121
00:05:16,960 --> 00:05:19,199
to remove some redundant checks

122
00:05:19,199 --> 00:05:21,840
technically this optimization works best

123
00:05:21,840 --> 00:05:25,120
for single reddit applications

124
00:05:25,120 --> 00:05:27,440
there are some cases that the pointer is

125
00:05:27,440 --> 00:05:30,320
passed to a function and then this

126
00:05:30,320 --> 00:05:32,960
pointer is not passed to any other

127
00:05:32,960 --> 00:05:34,960
functions and also it's not passed to

128
00:05:34,960 --> 00:05:36,240
free function

129
00:05:36,240 --> 00:05:38,720
therefore the checks are redundant for

130
00:05:38,720 --> 00:05:40,960
example in this case

131
00:05:40,960 --> 00:05:43,280
the reg pointer is passed to quantum

132
00:05:43,280 --> 00:05:45,039
gate2 function

133
00:05:45,039 --> 00:05:46,240
and then

134
00:05:46,240 --> 00:05:48,080
there are a couple of

135
00:05:48,080 --> 00:05:50,880
authentication however all of them are

136
00:05:50,880 --> 00:05:54,639
redundant until we reach to quantum at

137
00:05:54,639 --> 00:05:56,080
hash function

138
00:05:56,080 --> 00:05:57,840
at this point the pointer is passed to

139
00:05:57,840 --> 00:06:00,319
this function and we cannot track it

140
00:06:00,319 --> 00:06:03,280
because our analysis is intra procedural

141
00:06:03,280 --> 00:06:06,240
analysis and we can only check inside of

142
00:06:06,240 --> 00:06:07,840
the

143
00:06:07,840 --> 00:06:11,199
functions therefore we remove these

144
00:06:11,199 --> 00:06:12,880
checks and after

145
00:06:12,880 --> 00:06:15,759
passing the pointer to quantum as hash

146
00:06:15,759 --> 00:06:20,319
we enable checkings again

147
00:06:20,319 --> 00:06:22,160
at the time of doing this research there

148
00:06:22,160 --> 00:06:24,639
was not any hardware that supported pac

149
00:06:24,639 --> 00:06:27,759
instructions therefore we had to test

150
00:06:27,759 --> 00:06:29,199
our idea

151
00:06:29,199 --> 00:06:31,840
on top of fap simulator

152
00:06:31,840 --> 00:06:35,199
however simulator was not robust enough

153
00:06:35,199 --> 00:06:37,280
to run our benchmarks

154
00:06:37,280 --> 00:06:40,080
after a while iphone

155
00:06:40,080 --> 00:06:42,000
and apple introduced new iphone that

156
00:06:42,000 --> 00:06:44,080
supported pack instructions

157
00:06:44,080 --> 00:06:46,319
but we were not able to run our

158
00:06:46,319 --> 00:06:48,880
benchmark on top of

159
00:06:48,880 --> 00:06:51,840
iphone without jailbreaking so

160
00:06:51,840 --> 00:06:53,280
we chose

161
00:06:53,280 --> 00:06:56,719
another option so

162
00:06:56,800 --> 00:06:58,960
we decided to go with software

163
00:06:58,960 --> 00:07:00,880
implementation of pac instruction to

164
00:07:00,880 --> 00:07:04,319
test our idea and get an estimation of

165
00:07:04,319 --> 00:07:06,000
our

166
00:07:06,000 --> 00:07:07,440
design

167
00:07:07,440 --> 00:07:11,599
so we implemented ia in software it's

168
00:07:11,599 --> 00:07:15,039
not exactly following the spec of pack

169
00:07:15,039 --> 00:07:17,360
instructions but we could get an

170
00:07:17,360 --> 00:07:19,680
estimation

171
00:07:19,680 --> 00:07:21,199
for our work

172
00:07:21,199 --> 00:07:24,960
we used a raspberry pi to run our

173
00:07:24,960 --> 00:07:27,520
benchmarks

174
00:07:27,599 --> 00:07:29,599
we were measuring the overhead we

175
00:07:29,599 --> 00:07:33,759
selected nine benchmarks from spec 2006

176
00:07:33,759 --> 00:07:34,560
so

177
00:07:34,560 --> 00:07:35,919
all of these

178
00:07:35,919 --> 00:07:38,240
related work have been used these nine

179
00:07:38,240 --> 00:07:40,639
benchmarks so we could do some

180
00:07:40,639 --> 00:07:42,800
comparison between our work and other

181
00:07:42,800 --> 00:07:45,680
works as you can see the

182
00:07:45,680 --> 00:07:47,919
the runtime overhead of our system is a

183
00:07:47,919 --> 00:07:50,560
bit higher than other systems

184
00:07:50,560 --> 00:07:52,560
but because we use software

185
00:07:52,560 --> 00:07:54,160
implementation

186
00:07:54,160 --> 00:07:58,400
hopefully these numbers are lower in

187
00:07:58,400 --> 00:08:00,400
real hardware and

188
00:08:00,400 --> 00:08:04,240
with real life instruction

189
00:08:04,240 --> 00:08:06,160
the geometric mean overhead of our

190
00:08:06,160 --> 00:08:08,479
system is 26 percent

191
00:08:08,479 --> 00:08:11,280
in another experiment we

192
00:08:11,280 --> 00:08:14,080
intended to show the practicality of

193
00:08:14,080 --> 00:08:16,479
backward search therefore we measured

194
00:08:16,479 --> 00:08:17,840
the

195
00:08:17,840 --> 00:08:20,160
overhead of backboard search for each

196
00:08:20,160 --> 00:08:22,479
benchmark separately as you can see the

197
00:08:22,479 --> 00:08:25,280
numbers are almost low so it shows that

198
00:08:25,280 --> 00:08:29,758
the backward search is practical

199
00:08:31,199 --> 00:08:33,200
the memory overhead of our system

200
00:08:33,200 --> 00:08:36,320
depends on the number of objects

201
00:08:36,320 --> 00:08:39,599
in the memory because for each object we

202
00:08:39,599 --> 00:08:43,360
add extra id and also sometimes we need

203
00:08:43,360 --> 00:08:45,920
to do some alignment

204
00:08:45,920 --> 00:08:48,959
but in compared to other works we have

205
00:08:48,959 --> 00:08:51,120
low memory overhead because we use

206
00:08:51,120 --> 00:08:54,160
unused bits of the pointers to store the

207
00:08:54,160 --> 00:08:56,800
metadata for the pointers

208
00:08:56,800 --> 00:08:58,800
therefore we do not have that much

209
00:08:58,800 --> 00:09:01,600
overhead the geometric mean overhead of

210
00:09:01,600 --> 00:09:05,680
our system is almost two percent

211
00:09:05,920 --> 00:09:09,200
in this work we presented a resilient

212
00:09:09,200 --> 00:09:11,279
points to authentication technique for

213
00:09:11,279 --> 00:09:13,920
detecting temporal memory corruption

214
00:09:13,920 --> 00:09:17,680
technically we repurposed pike on arm

215
00:09:17,680 --> 00:09:21,040
to detect temporal memory corruption

216
00:09:21,040 --> 00:09:23,200
also our system is able to provide

217
00:09:23,200 --> 00:09:25,519
metadata integrity for objects and

218
00:09:25,519 --> 00:09:28,080
pointers without relying on bound

219
00:09:28,080 --> 00:09:30,720
checkers or without any assumptions such

220
00:09:30,720 --> 00:09:31,519
as

221
00:09:31,519 --> 00:09:34,560
spatial safety

222
00:09:35,040 --> 00:09:36,880
thanks for attending my talk i would be

223
00:09:36,880 --> 00:09:41,320
happy to take any questions

