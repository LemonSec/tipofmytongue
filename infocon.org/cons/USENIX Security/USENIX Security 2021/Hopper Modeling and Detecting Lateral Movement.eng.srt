1
00:00:08,559 --> 00:00:10,639
hi my name is grant and i'm a postdoc at

2
00:00:10,639 --> 00:00:12,719
uc san diego today i'm going to talk to

3
00:00:12,719 --> 00:00:14,000
you about some work that i did with a

4
00:00:14,000 --> 00:00:15,679
number of wonderful colleagues on how he

5
00:00:15,679 --> 00:00:17,279
can better protect enterprises against

6
00:00:17,279 --> 00:00:20,000
sophisticated attacks

7
00:00:20,000 --> 00:00:21,279
we've seen that attackers have

8
00:00:21,279 --> 00:00:23,519
consistently been able to breach

9
00:00:23,519 --> 00:00:24,800
perimeter level defenses that

10
00:00:24,800 --> 00:00:26,480
enterprises deploy

11
00:00:26,480 --> 00:00:28,480
thus our work starts by assuming that we

12
00:00:28,480 --> 00:00:30,000
have an attacker who's already managed

13
00:00:30,000 --> 00:00:31,840
to compromise some internal machine

14
00:00:31,840 --> 00:00:33,840
within an enterprise's network and the

15
00:00:33,840 --> 00:00:34,960
goal of our work is to be able to

16
00:00:34,960 --> 00:00:37,680
mitigate or quickly detect subsequent

17
00:00:37,680 --> 00:00:40,239
attacker activity that occurs even after

18
00:00:40,239 --> 00:00:41,440
they've established

19
00:00:41,440 --> 00:00:42,840
this initial

20
00:00:42,840 --> 00:00:44,719
foothold it turns out this is an

21
00:00:44,719 --> 00:00:46,480
interesting question to explore because

22
00:00:46,480 --> 00:00:48,399
attackers often need to move beyond the

23
00:00:48,399 --> 00:00:50,079
initial point of compromise to achieve

24
00:00:50,079 --> 00:00:51,199
their goal

25
00:00:51,199 --> 00:00:52,800
consider a ransomware attack where

26
00:00:52,800 --> 00:00:54,399
attackers want to compromise many

27
00:00:54,399 --> 00:00:56,399
internal machines

28
00:00:56,399 --> 00:00:58,399
similarly when attackers want to steal

29
00:00:58,399 --> 00:01:00,160
sensitive data they often need to move

30
00:01:00,160 --> 00:01:02,239
to databases or servers that lie deeper

31
00:01:02,239 --> 00:01:04,479
within the enterprise environments

32
00:01:04,479 --> 00:01:06,080
and this is true across many many

33
00:01:06,080 --> 00:01:09,439
attacks that we've seen in practice

34
00:01:09,439 --> 00:01:11,360
so our work studies one kind of

35
00:01:11,360 --> 00:01:13,360
malicious internal movement or malicious

36
00:01:13,360 --> 00:01:15,680
activity known as loud movement and this

37
00:01:15,680 --> 00:01:17,119
is the movement that attackers make

38
00:01:17,119 --> 00:01:19,040
between internal machines within an

39
00:01:19,040 --> 00:01:21,200
organization

40
00:01:21,200 --> 00:01:23,200
arc aims to develop practical detection

41
00:01:23,200 --> 00:01:24,640
for layer movements

42
00:01:24,640 --> 00:01:26,400
we start by assuming that the attacker

43
00:01:26,400 --> 00:01:28,000
has an internal machine which they

44
00:01:28,000 --> 00:01:29,759
launch their attacks from and they want

45
00:01:29,759 --> 00:01:31,920
to be able to eventually move or onto or

46
00:01:31,920 --> 00:01:35,920
acquire access to some target machine z

47
00:01:35,920 --> 00:01:37,680
the goal of our system is to be able is

48
00:01:37,680 --> 00:01:39,280
to be able to detect this kind of motion

49
00:01:39,280 --> 00:01:42,720
movement with very few false positives

50
00:01:42,720 --> 00:01:44,799
now prior work tries to solve this this

51
00:01:44,799 --> 00:01:46,399
problem by applying traditional anomaly

52
00:01:46,399 --> 00:01:49,040
detection because any time their prior

53
00:01:49,040 --> 00:01:51,040
systems identify anomalous activity or

54
00:01:51,040 --> 00:01:53,119
anomalous movements they flag that as an

55
00:01:53,119 --> 00:01:54,799
attack and there are many different

56
00:01:54,799 --> 00:01:57,280
approaches ranging from manual rule sets

57
00:01:57,280 --> 00:01:59,360
to data mining approaches to newer deep

58
00:01:59,360 --> 00:02:01,200
learning methods

59
00:02:01,200 --> 00:02:02,399
now the problem with these anomaly

60
00:02:02,399 --> 00:02:03,920
detection approaches is that they

61
00:02:03,920 --> 00:02:06,079
generate way too many false pauses to be

62
00:02:06,079 --> 00:02:07,840
used in practice on the order of

63
00:02:07,840 --> 00:02:09,119
hundreds per day based on their

64
00:02:09,119 --> 00:02:10,479
evaluation results and when we

65
00:02:10,479 --> 00:02:12,160
re-implemented prior state-of-the-art

66
00:02:12,160 --> 00:02:14,560
systems on our own data set

67
00:02:14,560 --> 00:02:15,760
and these systems generate too many

68
00:02:15,760 --> 00:02:17,280
false positives because modern-day

69
00:02:17,280 --> 00:02:19,040
enterprises are very large complex

70
00:02:19,040 --> 00:02:21,040
environments with tons of anomalous

71
00:02:21,040 --> 00:02:24,959
activity this is ultimately benign

72
00:02:25,040 --> 00:02:27,520
so our work hopper is a system designed

73
00:02:27,520 --> 00:02:29,520
to detect ladder movement with very few

74
00:02:29,520 --> 00:02:31,440
false positives in fact we're able to

75
00:02:31,440 --> 00:02:33,200
detect many different types of attacks

76
00:02:33,200 --> 00:02:35,599
with less than 10 false alarms per day

77
00:02:35,599 --> 00:02:37,519
and this is based on an evaluation using

78
00:02:37,519 --> 00:02:39,440
15 months of real world data from

79
00:02:39,440 --> 00:02:42,239
dropbox's internal corporate network

80
00:02:42,239 --> 00:02:44,080
another nice aspect of hopper is that it

81
00:02:44,080 --> 00:02:46,400
needs no label data to operate because

82
00:02:46,400 --> 00:02:48,720
most organizations don't have many known

83
00:02:48,720 --> 00:02:50,319
incidents of lower movement this is

84
00:02:50,319 --> 00:02:52,879
actually quite helpful in practice

85
00:02:52,879 --> 00:02:54,400
the hopper is able to achieve these good

86
00:02:54,400 --> 00:02:57,280
results by looking for paths of movement

87
00:02:57,280 --> 00:02:59,440
that are suspicious based on structure

88
00:02:59,440 --> 00:03:01,440
that is fundamental to live movement and

89
00:03:01,440 --> 00:03:03,840
not just by applying naively statistical

90
00:03:03,840 --> 00:03:06,560
anomaly detection

91
00:03:06,560 --> 00:03:08,000
so the starting point for how hopper

92
00:03:08,000 --> 00:03:09,200
works and how many of these prior

93
00:03:09,200 --> 00:03:12,080
systems work is to model movement events

94
00:03:12,080 --> 00:03:13,519
in the form of a graph

95
00:03:13,519 --> 00:03:15,840
in particular movement between machines

96
00:03:15,840 --> 00:03:18,400
generates data known as login records

97
00:03:18,400 --> 00:03:20,400
anytime a machine remotely accesses

98
00:03:20,400 --> 00:03:21,519
another one

99
00:03:21,519 --> 00:03:24,159
say through ssh or rdp or one of these

100
00:03:24,159 --> 00:03:25,519
command line protocols that uses

101
00:03:25,519 --> 00:03:27,280
something like kerberos

102
00:03:27,280 --> 00:03:29,920
traditionally in most enterprises

103
00:03:29,920 --> 00:03:31,280
these kinds of login attempts or

104
00:03:31,280 --> 00:03:33,200
movement attempts generate login records

105
00:03:33,200 --> 00:03:34,879
that record fairly standard information

106
00:03:34,879 --> 00:03:36,319
such as the time at which the session

107
00:03:36,319 --> 00:03:37,920
started the username or credentials

108
00:03:37,920 --> 00:03:39,680
involved and the two machines involved

109
00:03:39,680 --> 00:03:41,760
in the connection

110
00:03:41,760 --> 00:03:43,599
so to do detection what we're first

111
00:03:43,599 --> 00:03:44,720
going to do is we're going to aggregate

112
00:03:44,720 --> 00:03:46,799
as if historical logins and build a

113
00:03:46,799 --> 00:03:48,799
graph that characterizes what normal

114
00:03:48,799 --> 00:03:50,400
movement looks like

115
00:03:50,400 --> 00:03:52,879
then at test time or deployment time as

116
00:03:52,879 --> 00:03:54,879
new login events occur our system is

117
00:03:54,879 --> 00:03:56,319
going to analyze them to see if they

118
00:03:56,319 --> 00:03:58,879
form a suspicious path of movement if so

119
00:03:58,879 --> 00:04:00,879
it will flag that movement for the

120
00:04:00,879 --> 00:04:03,439
organization's security team to analyze

121
00:04:03,439 --> 00:04:05,360
so the key technical question here is

122
00:04:05,360 --> 00:04:06,879
what does it mean for a path to be

123
00:04:06,879 --> 00:04:10,239
suspicious in a concrete manner

124
00:04:10,239 --> 00:04:12,159
now for our work we took a step back to

125
00:04:12,159 --> 00:04:14,560
identify this we said why are attackers

126
00:04:14,560 --> 00:04:17,440
making loud movements in the first place

127
00:04:17,440 --> 00:04:19,040
in most scenarios we're concerned with

128
00:04:19,040 --> 00:04:21,120
an external attacker who wants to access

129
00:04:21,120 --> 00:04:23,120
some sensitive data or capabilities from

130
00:04:23,120 --> 00:04:24,479
the organization

131
00:04:24,479 --> 00:04:26,080
now most organizations with least

132
00:04:26,080 --> 00:04:28,400
privilege such sensitive permissions or

133
00:04:28,400 --> 00:04:30,720
data are restricted to a handful of

134
00:04:30,720 --> 00:04:33,520
users say system system administrators

135
00:04:33,520 --> 00:04:35,120
like alice

136
00:04:35,120 --> 00:04:36,240
that means that when an attacker

137
00:04:36,240 --> 00:04:38,720
comprises your average user say bob

138
00:04:38,720 --> 00:04:40,400
while bob has access to some machines

139
00:04:40,400 --> 00:04:42,400
and data within the organization bob

140
00:04:42,400 --> 00:04:44,880
will lack access to the target machine

141
00:04:44,880 --> 00:04:46,160
and this is where loud movement comes

142
00:04:46,160 --> 00:04:48,400
into play the attacker will take bob's

143
00:04:48,400 --> 00:04:50,560
compromise machining credentials and use

144
00:04:50,560 --> 00:04:53,120
them to access shared servers that bob

145
00:04:53,120 --> 00:04:55,360
does have access to they'll then run

146
00:04:55,360 --> 00:04:57,360
local privilege escalation exploits

147
00:04:57,360 --> 00:04:59,440
obtain root permissions on this new

148
00:04:59,440 --> 00:05:01,520
machine and dump credentials that might

149
00:05:01,520 --> 00:05:03,680
be stored in memory or on disk or

150
00:05:03,680 --> 00:05:05,440
install key loggers that steal the

151
00:05:05,440 --> 00:05:07,759
credentials of other users who've also

152
00:05:07,759 --> 00:05:09,520
accessed the shared server

153
00:05:09,520 --> 00:05:10,479
once they've acquired these new

154
00:05:10,479 --> 00:05:12,000
credentials they'll then access

155
00:05:12,000 --> 00:05:14,240
additional servers that their credential

156
00:05:14,240 --> 00:05:16,320
set gives them access to and iteratively

157
00:05:16,320 --> 00:05:18,160
repeat this process by compromising new

158
00:05:18,160 --> 00:05:20,160
machines instilling new credentials that

159
00:05:20,160 --> 00:05:21,759
are found on those machines until they

160
00:05:21,759 --> 00:05:23,919
can eventually access or acquire instead

161
00:05:23,919 --> 00:05:25,919
of privileged capabilities that gives

162
00:05:25,919 --> 00:05:28,320
them the access they want

163
00:05:28,320 --> 00:05:30,000
once the attackers acquire these

164
00:05:30,000 --> 00:05:31,280
privileges of criminals they'll of

165
00:05:31,280 --> 00:05:33,199
course use them to access their target

166
00:05:33,199 --> 00:05:34,639
machine

167
00:05:34,639 --> 00:05:36,639
and so this two-step process highlights

168
00:05:36,639 --> 00:05:38,400
two key properties that loud movement

169
00:05:38,400 --> 00:05:40,160
paths will exhibit

170
00:05:40,160 --> 00:05:42,400
first the path will contain one or more

171
00:05:42,400 --> 00:05:44,560
logins that uses a new or unexpected set

172
00:05:44,560 --> 00:05:45,919
of credentials

173
00:05:45,919 --> 00:05:48,800
by this i mean the attacker started on a

174
00:05:48,800 --> 00:05:51,280
machine using bob's credentials and then

175
00:05:51,280 --> 00:05:53,520
made movements that bob is supposed uh

176
00:05:53,520 --> 00:05:55,520
purportedly making himself

177
00:05:55,520 --> 00:05:57,919
however along the way bob switches to

178
00:05:57,919 --> 00:06:00,080
using al's set of credentials to access

179
00:06:00,080 --> 00:06:02,160
the machine and this is weird because

180
00:06:02,160 --> 00:06:04,319
bob's movement should be under his own

181
00:06:04,319 --> 00:06:06,400
credentials not under a new

182
00:06:06,400 --> 00:06:09,520
not under another users

183
00:06:09,520 --> 00:06:12,479
second suspicious paths or attack paths

184
00:06:12,479 --> 00:06:14,800
will start off on one user's machine

185
00:06:14,800 --> 00:06:17,120
using one set of credentials and asks

186
00:06:17,120 --> 00:06:19,600
the machine or database that the user

187
00:06:19,600 --> 00:06:22,319
did not have legitimate access to that

188
00:06:22,319 --> 00:06:24,400
is the attack path starts off using

189
00:06:24,400 --> 00:06:26,720
bob's credentials but bob eventually

190
00:06:26,720 --> 00:06:29,280
accesses a machine which his credentials

191
00:06:29,280 --> 00:06:30,160
don't

192
00:06:30,160 --> 00:06:32,720
allow him to access

193
00:06:32,720 --> 00:06:34,720
and so these two key properties

194
00:06:34,720 --> 00:06:36,639
characterize many kinds of loud movement

195
00:06:36,639 --> 00:06:38,720
attacks they won't capture all attacks

196
00:06:38,720 --> 00:06:40,160
there are some that won't exist these

197
00:06:40,160 --> 00:06:41,840
two properties but in many many

198
00:06:41,840 --> 00:06:44,080
real-world attacks the attacker's

199
00:06:44,080 --> 00:06:46,160
movement their alignment path does

200
00:06:46,160 --> 00:06:48,639
exhibit these two key properties

201
00:06:48,639 --> 00:06:51,039
and so hopper tries to identify paths

202
00:06:51,039 --> 00:06:52,639
with these two properties and then

203
00:06:52,639 --> 00:06:53,919
alerts on them

204
00:06:53,919 --> 00:06:56,639
for the security team to analyze

205
00:06:56,639 --> 00:06:58,160
now it turns out identifying pads with

206
00:06:58,160 --> 00:06:59,599
those two properties is quite hard to

207
00:06:59,599 --> 00:07:01,599
practice i'm going to highlight just two

208
00:07:01,599 --> 00:07:03,039
of the key sub problems and give you a

209
00:07:03,039 --> 00:07:04,720
high level intuition and you can see our

210
00:07:04,720 --> 00:07:06,720
paper for more details

211
00:07:06,720 --> 00:07:09,280
first i keep talking about paths but it

212
00:07:09,280 --> 00:07:11,199
turns out that actual real world data

213
00:07:11,199 --> 00:07:12,960
doesn't tell us about paths

214
00:07:12,960 --> 00:07:14,720
actual role and data only gives us

215
00:07:14,720 --> 00:07:17,120
pointwise activity of individual logins

216
00:07:17,120 --> 00:07:18,800
between two machines

217
00:07:18,800 --> 00:07:21,840
so for instance given login l4 it's not

218
00:07:21,840 --> 00:07:23,599
clear which of these three inbound

219
00:07:23,599 --> 00:07:26,319
logons is paired with l4 or forms the

220
00:07:26,319 --> 00:07:28,960
conceptual path made by the same user so

221
00:07:28,960 --> 00:07:30,960
there's there's no causality or linkage

222
00:07:30,960 --> 00:07:33,120
information in these login events they

223
00:07:33,120 --> 00:07:35,120
just report pointwise activity and they

224
00:07:35,120 --> 00:07:36,960
don't tell you anything about subsequent

225
00:07:36,960 --> 00:07:39,440
or prior logins that are related to it

226
00:07:39,440 --> 00:07:42,560
so it's not clear whether a user took

227
00:07:42,560 --> 00:07:45,599
made login l1 before making login l4 or

228
00:07:45,599 --> 00:07:47,680
whether they made log in l2 or l3 before

229
00:07:47,680 --> 00:07:50,319
making l4 and establishing this causal

230
00:07:50,319 --> 00:07:52,479
relationship this linkage is key to

231
00:07:52,479 --> 00:07:54,479
identifying what a path is in the first

232
00:07:54,479 --> 00:07:56,240
place

233
00:07:56,240 --> 00:07:57,599
so in our work we've brought some

234
00:07:57,599 --> 00:07:59,120
inference methods that allow us to

235
00:07:59,120 --> 00:08:01,199
establish the relationship earned for it

236
00:08:01,199 --> 00:08:02,720
in part using some enterprise domain

237
00:08:02,720 --> 00:08:05,199
knowledge and this allows us to say when

238
00:08:05,199 --> 00:08:08,240
two logons or when multiple logins forms

239
00:08:08,240 --> 00:08:11,520
a path made by the same user

240
00:08:11,520 --> 00:08:13,039
now these are inference methods so

241
00:08:13,039 --> 00:08:14,479
they're not going to be perfect and that

242
00:08:14,479 --> 00:08:16,319
could lead to false negatives

243
00:08:16,319 --> 00:08:17,919
so in our approach we apply a

244
00:08:17,919 --> 00:08:20,400
conservative inference method we when we

245
00:08:20,400 --> 00:08:22,720
cannot cleanly infer when logins are

246
00:08:22,720 --> 00:08:24,879
related when there's ambiguity we in

247
00:08:24,879 --> 00:08:26,639
fact infer multiple potential paths of

248
00:08:26,639 --> 00:08:29,199
movement that could have been made by a

249
00:08:29,199 --> 00:08:30,639
single user

250
00:08:30,639 --> 00:08:32,640
now this could reduce this could produce

251
00:08:32,640 --> 00:08:34,559
many many false positives

252
00:08:34,559 --> 00:08:36,320
so our approach is to apply a new

253
00:08:36,320 --> 00:08:37,760
approach to anomaly detection which we

254
00:08:37,760 --> 00:08:39,120
call specification based anomaly

255
00:08:39,120 --> 00:08:41,120
detection the idea here is that we're

256
00:08:41,120 --> 00:08:43,039
going to reduce the false positives

257
00:08:43,039 --> 00:08:44,320
generated with this conservative

258
00:08:44,320 --> 00:08:46,399
inference by selectively applying

259
00:08:46,399 --> 00:08:48,320
anomaly detection to find truly

260
00:08:48,320 --> 00:08:49,680
anomalous paths

261
00:08:49,680 --> 00:08:52,240
that could potentially exhibit both

262
00:08:52,240 --> 00:08:54,959
suspicious properties that is we analyze

263
00:08:54,959 --> 00:08:57,600
all the paths that our system infers we

264
00:08:57,600 --> 00:08:59,279
identify ones that could contain both

265
00:08:59,279 --> 00:09:01,040
suspicious properties and then we

266
00:09:01,040 --> 00:09:03,279
selectively apply an l detection to find

267
00:09:03,279 --> 00:09:04,959
ones that are both potentially

268
00:09:04,959 --> 00:09:07,680
suspicious and also highly anomalous

269
00:09:07,680 --> 00:09:09,680
and this combination allows us to

270
00:09:09,680 --> 00:09:11,440
generate very few false positives while

271
00:09:11,440 --> 00:09:13,839
detecting many attacks

272
00:09:13,839 --> 00:09:15,920
concretely we evaluate our approach on

273
00:09:15,920 --> 00:09:17,680
15 months of real world data from

274
00:09:17,680 --> 00:09:19,839
dropbox's internal corporate network and

275
00:09:19,839 --> 00:09:22,160
this is employees or services moving

276
00:09:22,160 --> 00:09:23,920
between machines within their internal

277
00:09:23,920 --> 00:09:25,920
corporate environment it doesn't involve

278
00:09:25,920 --> 00:09:27,360
a user data which is stored in a

279
00:09:27,360 --> 00:09:29,120
separate machine or separate set of

280
00:09:29,120 --> 00:09:31,200
machines on a separate network

281
00:09:31,200 --> 00:09:32,480
now this consists of hundreds of

282
00:09:32,480 --> 00:09:34,880
millions of real world benign logins

283
00:09:34,880 --> 00:09:36,800
and to evaluate our system

284
00:09:36,800 --> 00:09:38,000
we

285
00:09:38,000 --> 00:09:40,959
analyzed how it performed against 327

286
00:09:40,959 --> 00:09:42,240
different attacks including one

287
00:09:42,240 --> 00:09:43,760
professional red team attack and a

288
00:09:43,760 --> 00:09:45,440
variety of simulated attacks spanning

289
00:09:45,440 --> 00:09:48,480
various goals and levels of stealthiness

290
00:09:48,480 --> 00:09:49,839
it tells you that a system can do quite

291
00:09:49,839 --> 00:09:51,839
well hopper is able to detect over 94

292
00:09:51,839 --> 00:09:53,920
percent of attacks under less than 10

293
00:09:53,920 --> 00:09:55,920
false positives per day

294
00:09:55,920 --> 00:09:58,320
in contrast when we re-implemented prior

295
00:09:58,320 --> 00:09:59,920
to the art system that use traditional

296
00:09:59,920 --> 00:10:02,160
nominal detection it turns out to detect

297
00:10:02,160 --> 00:10:04,160
the same number of attacks prior to the

298
00:10:04,160 --> 00:10:05,600
year we need to generate over eight

299
00:10:05,600 --> 00:10:07,040
times or nearly eight times as many

300
00:10:07,040 --> 00:10:09,440
false positives as our work and in

301
00:10:09,440 --> 00:10:10,959
particular these prior state-of-the-art

302
00:10:10,959 --> 00:10:12,640
systems require a variety of hyper

303
00:10:12,640 --> 00:10:14,240
parameter tweeting to achieve optimal

304
00:10:14,240 --> 00:10:16,399
performance for our evaluation purposes

305
00:10:16,399 --> 00:10:18,160
which you can read about in the paper we

306
00:10:18,160 --> 00:10:19,839
i tried a whole range of different

307
00:10:19,839 --> 00:10:22,160
parameter combinations and this is just

308
00:10:22,160 --> 00:10:24,000
a snapshot of the best performing

309
00:10:24,000 --> 00:10:25,839
combination set that detected the same

310
00:10:25,839 --> 00:10:27,760
number of texas hopper with the fewest

311
00:10:27,760 --> 00:10:29,600
false positives and even under this

312
00:10:29,600 --> 00:10:31,519
optical parameter set prior to the art

313
00:10:31,519 --> 00:10:33,120
would need nearly eight times as many

314
00:10:33,120 --> 00:10:35,360
false positives to detect or achieve as

315
00:10:35,360 --> 00:10:37,680
good performance as hopper

316
00:10:37,680 --> 00:10:39,440
and this key improvement is largely

317
00:10:39,440 --> 00:10:41,200
enabled by our idea which is that we're

318
00:10:41,200 --> 00:10:42,959
going to look for suspicious structure

319
00:10:42,959 --> 00:10:44,959
based on key characteristics of lower

320
00:10:44,959 --> 00:10:46,720
movement rather than just naively

321
00:10:46,720 --> 00:10:50,000
applying anomaly detection

322
00:10:50,000 --> 00:10:51,360
so in summary

323
00:10:51,360 --> 00:10:53,440
our argues that we can better protect

324
00:10:53,440 --> 00:10:55,200
enterprises by looking for malicious

325
00:10:55,200 --> 00:10:56,720
movement that attackers will make

326
00:10:56,720 --> 00:10:58,560
between internal machines in an

327
00:10:58,560 --> 00:11:00,880
enterprise's environment now we can't

328
00:11:00,880 --> 00:11:02,640
just naively apply traditional machine

329
00:11:02,640 --> 00:11:04,320
learning or anomaly detection approaches

330
00:11:04,320 --> 00:11:06,240
because modern day enterprises are large

331
00:11:06,240 --> 00:11:07,920
complex networks that contain lots of

332
00:11:07,920 --> 00:11:10,560
anomalous fun activity instead we need

333
00:11:10,560 --> 00:11:12,399
to identify key structural elements that

334
00:11:12,399 --> 00:11:14,240
are truly suspicious and then combine

335
00:11:14,240 --> 00:11:15,760
that with anomaly detection for

336
00:11:15,760 --> 00:11:18,480
practical usage

337
00:11:18,480 --> 00:11:19,920
one of the key challenges here is that

338
00:11:19,920 --> 00:11:22,320
inferring when login events or movement

339
00:11:22,320 --> 00:11:24,560
events are causingly related is quite

340
00:11:24,560 --> 00:11:26,000
challenging inferring these causal

341
00:11:26,000 --> 00:11:28,399
relationships is not easy to do but

342
00:11:28,399 --> 00:11:30,160
being able to link pointwise movement

343
00:11:30,160 --> 00:11:31,920
events in this manner establishing when

344
00:11:31,920 --> 00:11:34,480
a user is making uh consecutive movement

345
00:11:34,480 --> 00:11:37,040
steps um enables truly good performance

346
00:11:37,040 --> 00:11:39,760
and is necessary

347
00:11:39,760 --> 00:11:41,600
combining all these together combining

348
00:11:41,600 --> 00:11:43,120
all these ideas together we built a

349
00:11:43,120 --> 00:11:44,800
system hopper that achieves really good

350
00:11:44,800 --> 00:11:48,000
performance on real-world data

351
00:11:48,000 --> 00:11:49,360
thank you so much for listening to this

352
00:11:49,360 --> 00:11:53,639
talk and i'm happy to take any questions

353
00:12:00,000 --> 00:12:02,079
you

