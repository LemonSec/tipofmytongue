1
00:00:08,559 --> 00:00:10,480
so welcome to the presentation of our

2
00:00:10,480 --> 00:00:12,559
paper why even mallory is still of

3
00:00:12,559 --> 00:00:15,200
android revisiting trs and security in

4
00:00:15,200 --> 00:00:17,359
android applications i'm martin o'toole

5
00:00:17,359 --> 00:00:18,880
from cispa

6
00:00:18,880 --> 00:00:20,240
and i've really enjoyed work with

7
00:00:20,240 --> 00:00:22,640
nicolas huaman sabrina

8
00:00:22,640 --> 00:00:24,400
jasmina

9
00:00:24,400 --> 00:00:26,960
michelle bacchus and sasha far

10
00:00:26,960 --> 00:00:28,960
there's a long history of research on

11
00:00:28,960 --> 00:00:31,039
the urgent state of custom tds in

12
00:00:31,039 --> 00:00:33,360
android apps rendering them vulnerable

13
00:00:33,360 --> 00:00:35,840
to man in the middle attacks

14
00:00:35,840 --> 00:00:38,079
so to address this urgent state new

15
00:00:38,079 --> 00:00:41,520
countermeasures have been introduced

16
00:00:41,520 --> 00:00:44,239
which we want to cover in this work and

17
00:00:44,239 --> 00:00:45,039
test

18
00:00:45,039 --> 00:00:47,520
set their efficiency and impact on

19
00:00:47,520 --> 00:00:48,640
android

20
00:00:48,640 --> 00:00:50,160
these include network security

21
00:00:50,160 --> 00:00:53,280
configurations as well as defaults to

22
00:00:53,280 --> 00:00:55,520
make a mounting of mana environmental

23
00:00:55,520 --> 00:00:58,160
attacks harder as well as safeguards to

24
00:00:58,160 --> 00:01:00,879
introduce google play to block apps

25
00:01:00,879 --> 00:01:03,039
containing one of the certificate

26
00:01:03,039 --> 00:01:04,720
validation code

27
00:01:04,720 --> 00:01:07,040
so first we want to actually introduce

28
00:01:07,040 --> 00:01:09,520
to briefly introduce you network

29
00:01:09,520 --> 00:01:11,840
security configuration these are this

30
00:01:11,840 --> 00:01:13,520
allows to implement

31
00:01:13,520 --> 00:01:14,960
um

32
00:01:14,960 --> 00:01:17,200
implement custom set and network

33
00:01:17,200 --> 00:01:19,920
security behavior without writing code

34
00:01:19,920 --> 00:01:22,159
so developers can allow or disallow

35
00:01:22,159 --> 00:01:24,000
their text traffic

36
00:01:24,000 --> 00:01:26,799
configure trust anchors or even

37
00:01:26,799 --> 00:01:28,960
implement pinning without having to

38
00:01:28,960 --> 00:01:31,600
write code

39
00:01:32,400 --> 00:01:34,240
for a network security configuration we

40
00:01:34,240 --> 00:01:35,920
wanted to

41
00:01:35,920 --> 00:01:38,479
assess the prevalence

42
00:01:38,479 --> 00:01:40,720
of in android apps therefore we

43
00:01:40,720 --> 00:01:42,320
collected one or three million

44
00:01:42,320 --> 00:01:44,240
applications and detected

45
00:01:44,240 --> 00:01:47,600
in a c2b in use in 99

46
00:01:47,600 --> 00:01:50,399
and 212 applications

47
00:01:50,399 --> 00:01:53,439
of these we could analyze 96

48
00:01:53,439 --> 00:01:54,720
hundred

49
00:01:54,720 --> 00:01:57,119
customs nsc fights

50
00:01:57,119 --> 00:01:59,920
as for the adoption we see from the

51
00:01:59,920 --> 00:02:01,840
statistics at the colorado

52
00:02:01,840 --> 00:02:04,079
uh correlates with the enforcement of

53
00:02:04,079 --> 00:02:07,200
android 9 which deactivates predicting

54
00:02:07,200 --> 00:02:10,720
by default in android

55
00:02:11,280 --> 00:02:13,680
and looking at the features that used in

56
00:02:13,680 --> 00:02:15,520
nfc

57
00:02:15,520 --> 00:02:18,720
files we also see why it was up

58
00:02:18,720 --> 00:02:20,560
while it was

59
00:02:20,560 --> 00:02:23,520
adopted since the number one and most

60
00:02:23,520 --> 00:02:26,319
prominent the use case for nfc

61
00:02:26,319 --> 00:02:28,160
is actually allowing cleartext traffic

62
00:02:28,160 --> 00:02:29,360
again

63
00:02:29,360 --> 00:02:31,200
which

64
00:02:31,200 --> 00:02:33,680
and i want the safety force into

65
00:02:33,680 --> 00:02:36,400
introduced with android 9. apart from

66
00:02:36,400 --> 00:02:38,480
this we also conducted in-depth

67
00:02:38,480 --> 00:02:41,440
analyzers on affected domains

68
00:02:41,440 --> 00:02:45,120
for these uh for latex traffic

69
00:02:45,120 --> 00:02:47,680
next we also

70
00:02:47,680 --> 00:02:49,440
cover

71
00:02:49,440 --> 00:02:50,800
also

72
00:02:50,800 --> 00:02:52,879
analyzed custom trust anchor

73
00:02:52,879 --> 00:02:55,040
configuration here also we

74
00:02:55,040 --> 00:02:58,239
uh interestingly found that uh more than

75
00:02:58,239 --> 00:03:00,080
8600

76
00:03:00,080 --> 00:03:02,159
applications actually re-enable trust

77
00:03:02,159 --> 00:03:05,519
for user installed case

78
00:03:05,519 --> 00:03:08,000
this also undermines the new safety ford

79
00:03:08,000 --> 00:03:10,159
introduced with android 7 to better

80
00:03:10,159 --> 00:03:12,159
protect against

81
00:03:12,159 --> 00:03:14,560
a man in the middle attacks

82
00:03:14,560 --> 00:03:16,720
apart from that we also get that data on

83
00:03:16,720 --> 00:03:18,400
the distribution of trust bankers and

84
00:03:18,400 --> 00:03:19,840
also

85
00:03:19,840 --> 00:03:21,599
conducted more in-depth

86
00:03:21,599 --> 00:03:24,799
analyzers on custom trust see the cas in

87
00:03:24,799 --> 00:03:27,040
android apps

88
00:03:27,040 --> 00:03:29,840
next we also

89
00:03:30,000 --> 00:03:31,040
want to

90
00:03:31,040 --> 00:03:33,599
to assess the prevalence of pinning

91
00:03:33,599 --> 00:03:35,120
being used to actually enhance the

92
00:03:35,120 --> 00:03:38,319
security of android application but here

93
00:03:38,319 --> 00:03:40,799
we actually only see a limited

94
00:03:40,799 --> 00:03:43,200
number of applications

95
00:03:43,200 --> 00:03:44,480
using

96
00:03:44,480 --> 00:03:46,319
pinning and point pinning in their

97
00:03:46,319 --> 00:03:48,560
network security configuration still we

98
00:03:48,560 --> 00:03:51,440
conducted in that analysis

99
00:03:51,440 --> 00:03:53,280
of certificate pins

100
00:03:53,280 --> 00:03:55,840
and conducted analyze on backup

101
00:03:55,840 --> 00:03:57,599
pins as well as

102
00:03:57,599 --> 00:03:59,519
pin exploration

103
00:03:59,519 --> 00:04:03,120
so next we actually want to focus uh

104
00:04:03,120 --> 00:04:04,720
focus on another

105
00:04:04,720 --> 00:04:06,319
interesting

106
00:04:06,319 --> 00:04:09,040
property regarding network security

107
00:04:09,040 --> 00:04:12,640
configuration namely that not only

108
00:04:12,640 --> 00:04:14,799
we also uncovered

109
00:04:14,799 --> 00:04:17,279
uh floor floor parameter ways that

110
00:04:17,279 --> 00:04:19,440
actually result in the main

111
00:04:19,440 --> 00:04:21,600
configuration having no effect

112
00:04:21,600 --> 00:04:24,160
as intended as by developers

113
00:04:24,160 --> 00:04:26,160
this is also true for so-called

114
00:04:26,160 --> 00:04:28,639
ambiguous pinning configuration where

115
00:04:28,639 --> 00:04:30,720
pinning is actually specified in a

116
00:04:30,720 --> 00:04:33,040
network security configuration but

117
00:04:33,040 --> 00:04:35,120
has no effect at runtime because of

118
00:04:35,120 --> 00:04:37,199
other settings around

119
00:04:37,199 --> 00:04:39,840
being around

120
00:04:39,919 --> 00:04:43,040
so root causes for these can be found

121
00:04:43,040 --> 00:04:46,400
in attributed to copy and pasting of

122
00:04:46,400 --> 00:04:47,840
code samples as well as limited

123
00:04:47,840 --> 00:04:50,479
documentation and uh

124
00:04:50,479 --> 00:04:53,120
limited to support that does not inform

125
00:04:53,120 --> 00:04:56,720
you what it was that they come uh

126
00:04:56,720 --> 00:05:00,000
the nsc fights are actually

127
00:05:00,000 --> 00:05:01,919
not valid

128
00:05:01,919 --> 00:05:03,199
so

129
00:05:03,199 --> 00:05:05,600
next we want to actually

130
00:05:05,600 --> 00:05:07,440
uh present our evaluation of the

131
00:05:07,440 --> 00:05:09,759
efficiency of google play safeguards

132
00:05:09,759 --> 00:05:12,000
actually for this we actually built

133
00:05:12,000 --> 00:05:14,320
various insecure custom tls

134
00:05:14,320 --> 00:05:17,280
implementation samples and tried to

135
00:05:17,280 --> 00:05:19,600
publish them on google play

136
00:05:19,600 --> 00:05:21,759
actually

137
00:05:21,759 --> 00:05:25,440
violating their policies of course

138
00:05:25,440 --> 00:05:28,400
however in the results we get that

139
00:05:28,400 --> 00:05:30,800
actually only two of these cases

140
00:05:30,800 --> 00:05:33,919
were actually rejected

141
00:05:33,919 --> 00:05:36,720
uh the one being a rapture climb where

142
00:05:36,720 --> 00:05:37,600
only

143
00:05:37,600 --> 00:05:39,440
the prosecutive method is called on the

144
00:05:39,440 --> 00:05:41,520
error handler as well as

145
00:05:41,520 --> 00:05:43,919
uh one insecure version of the accrual

146
00:05:43,919 --> 00:05:46,160
library which is like the fingerprinted

147
00:05:46,160 --> 00:05:48,400
as

148
00:05:48,560 --> 00:05:51,680
and being therefore rejected

149
00:05:51,680 --> 00:05:53,759
however we conclude that there are

150
00:05:53,759 --> 00:05:56,000
limited capabilities for detecting

151
00:05:56,000 --> 00:05:58,080
dangerous implementations in google

152
00:05:58,080 --> 00:06:00,240
play's

153
00:06:00,240 --> 00:06:01,360
safe

154
00:06:01,360 --> 00:06:04,560
guards as we can see only trivial cases

155
00:06:04,560 --> 00:06:08,160
being catched so far

156
00:06:09,919 --> 00:06:12,479
putting these results all together

157
00:06:12,479 --> 00:06:15,759
regarding our bindings from msc

158
00:06:15,759 --> 00:06:16,720
we

159
00:06:16,720 --> 00:06:20,479
analyzed we find that nsc

160
00:06:20,479 --> 00:06:21,919
and

161
00:06:21,919 --> 00:06:24,400
impact security on all levels of

162
00:06:24,400 --> 00:06:27,039
popularity and apps as we can see from

163
00:06:27,039 --> 00:06:29,120
the results on the right here

164
00:06:29,120 --> 00:06:31,039
uh it is not

165
00:06:31,039 --> 00:06:34,039
only

166
00:06:38,160 --> 00:06:40,880
it's not only used by unpopular apps but

167
00:06:40,880 --> 00:06:44,160
also uh my apps with

168
00:06:44,160 --> 00:06:48,680
millions and 100 millions of users

169
00:06:48,720 --> 00:06:50,240
to better assess the

170
00:06:50,240 --> 00:06:51,840
impact of actually

171
00:06:51,840 --> 00:06:54,240
insecure

172
00:06:54,240 --> 00:06:56,960
nfc settings we also conducted a manual

173
00:06:56,960 --> 00:07:00,400
analysis of http air of applications

174
00:07:00,400 --> 00:07:02,720
allowing http again and here we also

175
00:07:02,720 --> 00:07:04,639
uncovered threats of if for each

176
00:07:04,639 --> 00:07:07,759
droppings as sensitive data

177
00:07:07,759 --> 00:07:10,720
via http was found in our analyzers

178
00:07:10,720 --> 00:07:14,319
including login data and credentials

179
00:07:14,319 --> 00:07:16,319
as for assessing

180
00:07:16,319 --> 00:07:19,199
the overall state of the ecosystem in

181
00:07:19,199 --> 00:07:22,800
terms of security of tls code

182
00:07:22,800 --> 00:07:26,400
regarding our analysis of

183
00:07:26,400 --> 00:07:27,840
of study of

184
00:07:27,840 --> 00:07:31,039
we safeguards we replicated study from

185
00:07:31,039 --> 00:07:32,560
2012

186
00:07:32,560 --> 00:07:36,240
on the desert truth state of tis

187
00:07:36,240 --> 00:07:38,240
and actually

188
00:07:38,240 --> 00:07:40,800
got the same

189
00:07:40,800 --> 00:07:43,680
results as having that one third of the

190
00:07:43,680 --> 00:07:45,599
application that we analyzed actually

191
00:07:45,599 --> 00:07:48,720
contained in secure tls code which is in

192
00:07:48,720 --> 00:07:51,280
line with web.2012

193
00:07:51,280 --> 00:07:52,479
as well as

194
00:07:52,479 --> 00:07:55,360
with the results from our

195
00:07:55,360 --> 00:07:59,120
play safeguard study

196
00:07:59,120 --> 00:08:02,000
so finally putting this all together we

197
00:08:02,000 --> 00:08:04,160
can derive that customization is still

198
00:08:04,160 --> 00:08:06,319
harmful while still

199
00:08:06,319 --> 00:08:08,000
and while

200
00:08:08,000 --> 00:08:10,240
you save defaults actually enhance the

201
00:08:10,240 --> 00:08:12,720
security as a whole and reduce the

202
00:08:12,720 --> 00:08:14,400
attack surface for man in the middle

203
00:08:14,400 --> 00:08:17,360
attack on the other hand nst is mostly

204
00:08:17,360 --> 00:08:20,400
used to undermine the safety force

205
00:08:20,400 --> 00:08:22,000
and it is not

206
00:08:22,000 --> 00:08:24,800
only sparsely used to actually enhancing

207
00:08:24,800 --> 00:08:26,720
security of

208
00:08:26,720 --> 00:08:29,240
application as we can only see

209
00:08:29,240 --> 00:08:31,039
6763k is

210
00:08:31,039 --> 00:08:32,880
where our pinning is used actually and

211
00:08:32,880 --> 00:08:35,279
also the safeguards are still in

212
00:08:35,279 --> 00:08:36,640
insufficient

213
00:08:36,640 --> 00:08:39,200
actually they are

214
00:08:39,200 --> 00:08:41,919
insufficient to enforce the new policies

215
00:08:41,919 --> 00:08:43,360
to avoid actually

216
00:08:43,360 --> 00:08:45,760
common pitfalls of insecure certificate

217
00:08:45,760 --> 00:08:47,519
validation in

218
00:08:47,519 --> 00:08:49,120
applications

219
00:08:49,120 --> 00:08:51,279
as we find in our

220
00:08:51,279 --> 00:08:52,839
um

221
00:08:52,839 --> 00:08:56,880
study on insecure code in the wired

222
00:08:56,880 --> 00:08:58,959
also we see easier customization is

223
00:08:58,959 --> 00:09:00,160
error prone

224
00:09:00,160 --> 00:09:03,360
also when using nfc as we see new forms

225
00:09:03,360 --> 00:09:05,920
of misconception and misconfiguration

226
00:09:05,920 --> 00:09:08,560
even if developers intend to enhance

227
00:09:08,560 --> 00:09:11,120
security of applications we find that

228
00:09:11,120 --> 00:09:13,600
they can they can cause the opposite

229
00:09:13,600 --> 00:09:15,600
this can be because of understanding use

230
00:09:15,600 --> 00:09:18,160
of copy and pasting code or

231
00:09:18,160 --> 00:09:20,399
limited to support therefore

232
00:09:20,399 --> 00:09:23,839
we recommend a need for better

233
00:09:23,839 --> 00:09:26,240
code and to documentation as well

234
00:09:26,240 --> 00:09:27,360
enhanced

235
00:09:27,360 --> 00:09:33,160
safeguards for developers thank you

236
00:09:41,200 --> 00:09:43,279
you

