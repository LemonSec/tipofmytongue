1
00:00:08,960 --> 00:00:10,639
hello and welcome to my talk on our

2
00:00:10,639 --> 00:00:12,880
paper why tls is better without start

3
00:00:12,880 --> 00:00:15,120
healers security analysis of starters in

4
00:00:15,120 --> 00:00:17,440
the email context this paper is joint

5
00:00:17,440 --> 00:00:19,600
work with damian podepniak hano book and

6
00:00:19,600 --> 00:00:22,240
sebastian schinsel and my name is fabin

7
00:00:22,240 --> 00:00:24,400
ezek

8
00:00:24,400 --> 00:00:26,080
let's take a quick look at the email

9
00:00:26,080 --> 00:00:27,279
ecosystem

10
00:00:27,279 --> 00:00:29,199
mainly three protocols are relevant for

11
00:00:29,199 --> 00:00:33,120
email smtp pop3 and imap all of which

12
00:00:33,120 --> 00:00:35,280
can be used to start dealers

13
00:00:35,280 --> 00:00:37,520
smtp is used in submitting emails to a

14
00:00:37,520 --> 00:00:39,040
server and transferring them between

15
00:00:39,040 --> 00:00:41,920
servers so called mtas or mail transfer

16
00:00:41,920 --> 00:00:43,280
agents

17
00:00:43,280 --> 00:00:45,200
map and pop3 are used for email

18
00:00:45,200 --> 00:00:47,200
retrieval

19
00:00:47,200 --> 00:00:48,879
our focus in this paper are the

20
00:00:48,879 --> 00:00:50,640
connections between a mail client and a

21
00:00:50,640 --> 00:00:53,280
mail server and will not look at mta to

22
00:00:53,280 --> 00:00:56,719
mta smtp connections today

23
00:00:56,719 --> 00:00:58,559
this is our attacker model

24
00:00:58,559 --> 00:01:00,000
we assume a matter in the middle that

25
00:01:00,000 --> 00:01:01,760
can eavesdrop and manipulate tcp

26
00:01:01,760 --> 00:01:03,359
connections between the victim's male

27
00:01:03,359 --> 00:01:05,360
client and the mail server

28
00:01:05,360 --> 00:01:07,200
the attacker will only manipulate data

29
00:01:07,200 --> 00:01:09,280
set in plain text and at no point will

30
00:01:09,280 --> 00:01:12,159
break tls itself

31
00:01:12,159 --> 00:01:14,000
so what is start healers

32
00:01:14,000 --> 00:01:16,320
in contrast to implicit tls which is

33
00:01:16,320 --> 00:01:19,920
basically smtp imap or pop3 over tls

34
00:01:19,920 --> 00:01:22,000
star tls adds a plain text phase before

35
00:01:22,000 --> 00:01:24,479
the actual tls connection which client

36
00:01:24,479 --> 00:01:27,280
and server negotiate the use of tls

37
00:01:27,280 --> 00:01:30,479
let's look at a sample imap trace

38
00:01:30,479 --> 00:01:31,600
what you see

39
00:01:31,600 --> 00:01:33,600
in the first line is the imf service

40
00:01:33,600 --> 00:01:34,720
greeting

41
00:01:34,720 --> 00:01:37,040
containing its capabilities in this case

42
00:01:37,040 --> 00:01:38,560
imip4rf1

43
00:01:38,560 --> 00:01:41,920
and starters in the second line you see

44
00:01:41,920 --> 00:01:44,000
the first client's command

45
00:01:44,000 --> 00:01:45,439
start here as

46
00:01:45,439 --> 00:01:47,040
tagged a

47
00:01:47,040 --> 00:01:49,840
and in response we get a server response

48
00:01:49,840 --> 00:01:52,560
also tagged a after that the tls

49
00:01:52,560 --> 00:01:54,079
handshake is performed and anything

50
00:01:54,079 --> 00:01:56,399
before it was in plain text and anything

51
00:01:56,399 --> 00:01:57,439
after it

52
00:01:57,439 --> 00:02:00,719
is encrypted

53
00:02:01,759 --> 00:02:03,840
you might ask yourselves who even uses

54
00:02:03,840 --> 00:02:05,439
star tls today

55
00:02:05,439 --> 00:02:07,840
we found that some large providers for

56
00:02:07,840 --> 00:02:10,399
example microsoft and apple exclusively

57
00:02:10,399 --> 00:02:12,959
support starters but not implicit tls

58
00:02:12,959 --> 00:02:14,959
for sntp submission

59
00:02:14,959 --> 00:02:16,720
additionally some clients still

60
00:02:16,720 --> 00:02:19,280
configure start tls by default

61
00:02:19,280 --> 00:02:20,959
and if you look into your own mail

62
00:02:20,959 --> 00:02:22,800
client that you might also have

63
00:02:22,800 --> 00:02:26,080
configured start tiers

64
00:02:26,239 --> 00:02:27,920
during my talk i will consider four

65
00:02:27,920 --> 00:02:30,160
questions regarding star tds

66
00:02:30,160 --> 00:02:32,319
first we wanted to find out if modern

67
00:02:32,319 --> 00:02:34,160
clay clients are opportunistic in their

68
00:02:34,160 --> 00:02:35,760
use of start

69
00:02:35,760 --> 00:02:37,200
start here is often regarded as an

70
00:02:37,200 --> 00:02:39,200
opportunistic protocol that falls back

71
00:02:39,200 --> 00:02:41,920
to plain text if started is unavailable

72
00:02:41,920 --> 00:02:43,519
in this case an attacker could simply

73
00:02:43,519 --> 00:02:45,040
use a well-known star tls stripping

74
00:02:45,040 --> 00:02:46,800
attack to force a client to send

75
00:02:46,800 --> 00:02:49,120
sensitive data in plain text

76
00:02:49,120 --> 00:02:51,120
second we analyzed what potentially

77
00:02:51,120 --> 00:02:52,800
sensitive data is exchanged in plain

78
00:02:52,800 --> 00:02:54,720
text and how clients might be coerced

79
00:02:54,720 --> 00:02:57,440
into exposing additional sensitive data

80
00:02:57,440 --> 00:02:59,440
third we looked at what potentially

81
00:02:59,440 --> 00:03:01,360
malicious data from the plaintext phase

82
00:03:01,360 --> 00:03:03,760
remains when transitioning to tls in

83
00:03:03,760 --> 00:03:05,920
both clients and servers

84
00:03:05,920 --> 00:03:08,239
first we analyzed error handling and

85
00:03:08,239 --> 00:03:10,159
example specific error signals from all

86
00:03:10,159 --> 00:03:12,000
three protocols for behavior and mail

87
00:03:12,000 --> 00:03:15,680
clients for example showing ui alerts

88
00:03:15,680 --> 00:03:17,760
to answer all these questions we built

89
00:03:17,760 --> 00:03:19,360
the east framework that is available on

90
00:03:19,360 --> 00:03:21,360
github the framework consists of three

91
00:03:21,360 --> 00:03:22,480
components

92
00:03:22,480 --> 00:03:24,239
a custom built and configurable mail

93
00:03:24,239 --> 00:03:26,080
server and a set of automatable virtual

94
00:03:26,080 --> 00:03:28,400
machines with installed mail clients to

95
00:03:28,400 --> 00:03:30,640
test them for star tls issues

96
00:03:30,640 --> 00:03:32,480
second scanning scripts for internet

97
00:03:32,480 --> 00:03:34,239
scans of mail servers for specific

98
00:03:34,239 --> 00:03:36,000
vulnerability detailed later in this

99
00:03:36,000 --> 00:03:36,799
talk

100
00:03:36,799 --> 00:03:37,599
third

101
00:03:37,599 --> 00:03:39,200
manual testing scripts for server

102
00:03:39,200 --> 00:03:40,799
installations to verify found

103
00:03:40,799 --> 00:03:43,200
vulnerabilities

104
00:03:43,200 --> 00:03:44,959
first let us look at what we call

105
00:03:44,959 --> 00:03:46,720
negotiation issues

106
00:03:46,720 --> 00:03:48,480
these are client issues that prevent the

107
00:03:48,480 --> 00:03:50,319
client from transitioning to tls in the

108
00:03:50,319 --> 00:03:51,760
first place

109
00:03:51,760 --> 00:03:53,680
the listing shows the two classic

110
00:03:53,680 --> 00:03:55,360
started as dropping

111
00:03:55,360 --> 00:03:56,720
attacks

112
00:03:56,720 --> 00:03:58,959
we can either strip the starters

113
00:03:58,959 --> 00:04:01,840
capability from the server's messages or

114
00:04:01,840 --> 00:04:03,599
inject an error when receiving the star

115
00:04:03,599 --> 00:04:05,120
tls command

116
00:04:05,120 --> 00:04:07,120
in both cases the male client might

117
00:04:07,120 --> 00:04:10,959
continue to log in in plain text

118
00:04:11,439 --> 00:04:13,120
the second negotiation issue we looked

119
00:04:13,120 --> 00:04:15,360
at is the pre-house greeting in imap

120
00:04:15,360 --> 00:04:17,120
this greeting can be sent if the mail

121
00:04:17,120 --> 00:04:18,959
server can identify you without needing

122
00:04:18,959 --> 00:04:20,880
your credentials for example because you

123
00:04:20,880 --> 00:04:23,360
connected from a specific ip address

124
00:04:23,360 --> 00:04:25,520
the catch here is that star.tls is not

125
00:04:25,520 --> 00:04:26,880
allowed when a client is already

126
00:04:26,880 --> 00:04:29,440
authenticated well generally you cannot

127
00:04:29,440 --> 00:04:31,520
see credentials using this attack some

128
00:04:31,520 --> 00:04:33,360
male clients upload sent or drafted

129
00:04:33,360 --> 00:04:36,880
mates on pre-orders connections

130
00:04:37,199 --> 00:04:39,759
in total 15 out of 28 tested male

131
00:04:39,759 --> 00:04:41,360
clients were vulnerable to negotiation

132
00:04:41,360 --> 00:04:43,680
attacks among them ios mail and gmail

133
00:04:43,680 --> 00:04:46,080
for android both of which uploaded send

134
00:04:46,080 --> 00:04:49,599
and drafted emails in plain text

135
00:04:49,840 --> 00:04:51,680
more interesting though when disclosing

136
00:04:51,680 --> 00:04:53,199
this to software windows we found that

137
00:04:53,199 --> 00:04:55,120
only one major client offline imap a

138
00:04:55,120 --> 00:04:56,639
client for offering access to your imap

139
00:04:56,639 --> 00:04:59,120
inboxes is meant to be opportunistic in

140
00:04:59,120 --> 00:05:01,520
star terrors all others recognize

141
00:05:01,520 --> 00:05:04,639
negotiation issues as bugs

142
00:05:04,639 --> 00:05:06,400
the next issue class we looked at were

143
00:05:06,400 --> 00:05:08,479
tampering issues these allowed us to

144
00:05:08,479 --> 00:05:10,880
place bogus data for example folders or

145
00:05:10,880 --> 00:05:13,520
emails into the victims inbox this is

146
00:05:13,520 --> 00:05:15,680
possible in this example because the

147
00:05:15,680 --> 00:05:17,759
untagged list response adding a new

148
00:05:17,759 --> 00:05:19,520
folder is not formally bound to a

149
00:05:19,520 --> 00:05:21,199
specific state in imap and will

150
00:05:21,199 --> 00:05:23,039
sometimes be interpreted even before

151
00:05:23,039 --> 00:05:25,759
start healers allowing us to create

152
00:05:25,759 --> 00:05:28,560
attacker controlled folder

153
00:05:28,560 --> 00:05:30,560
5 out of 28 clients are vulnerable to

154
00:05:30,560 --> 00:05:33,919
this or similar exploits in our tests

155
00:05:33,919 --> 00:05:36,080
next we look at what happens when an

156
00:05:36,080 --> 00:05:38,560
attack attacker uses error signals for

157
00:05:38,560 --> 00:05:40,240
your eye spoofing purposes

158
00:05:40,240 --> 00:05:42,479
here we inject an impala with attacker

159
00:05:42,479 --> 00:05:45,840
control text before start tls

160
00:05:45,840 --> 00:05:48,080
this results in the following popup in

161
00:05:48,080 --> 00:05:49,199
outlook

162
00:05:49,199 --> 00:05:50,880
as you can see

163
00:05:50,880 --> 00:05:53,440
this dialog displays our attacker

164
00:05:53,440 --> 00:05:55,600
control text and even highlights links

165
00:05:55,600 --> 00:05:58,000
for us

166
00:05:58,800 --> 00:06:00,720
11 clients showed attacker control ui

167
00:06:00,720 --> 00:06:04,240
alerts even before star tales

168
00:06:04,240 --> 00:06:05,759
let us move on to a server back from

169
00:06:05,759 --> 00:06:08,160
2011 that was originally found by the

170
00:06:08,160 --> 00:06:10,720
postfix developer vitsa vinima

171
00:06:10,720 --> 00:06:12,720
this is the issue was stopped a command

172
00:06:12,720 --> 00:06:13,919
injection

173
00:06:13,919 --> 00:06:15,360
consider

174
00:06:15,360 --> 00:06:17,840
these two commands sent by a client in

175
00:06:17,840 --> 00:06:21,199
the same tcp segment

176
00:06:21,199 --> 00:06:23,440
upon the next network read both commands

177
00:06:23,440 --> 00:06:24,960
are put into the application buffer you

178
00:06:24,960 --> 00:06:27,600
see on the right

179
00:06:27,600 --> 00:06:29,600
then the server interprets the start tls

180
00:06:29,600 --> 00:06:31,520
command as normal and performs the tls

181
00:06:31,520 --> 00:06:32,720
check

182
00:06:32,720 --> 00:06:34,479
however what happens to the remaining

183
00:06:34,479 --> 00:06:37,680
norb command in the buffer

184
00:06:37,759 --> 00:06:39,520
hostfix for example never cleared this

185
00:06:39,520 --> 00:06:41,600
buffer after transitioning to tls

186
00:06:41,600 --> 00:06:43,280
therefore this command is taken from the

187
00:06:43,280 --> 00:06:45,520
buffer after the tls check even though

188
00:06:45,520 --> 00:06:47,039
it was sent in unauthenticated plain

189
00:06:47,039 --> 00:06:50,319
text and now it is indistinguishable

190
00:06:50,319 --> 00:06:53,520
from a command sent over tls

191
00:06:53,520 --> 00:06:55,360
even though this bug has been known

192
00:06:55,360 --> 00:06:57,759
since 2011 it was still present in 8 out

193
00:06:57,759 --> 00:07:00,319
of 23 mail server products we tested in

194
00:07:00,319 --> 00:07:02,639
total this bug was present either now or

195
00:07:02,639 --> 00:07:05,360
in the past in 16 of these 23 servers

196
00:07:05,360 --> 00:07:07,120
showing that this is a widespread issue

197
00:07:07,120 --> 00:07:08,720
that can only happen with start healers

198
00:07:08,720 --> 00:07:11,759
but not with implicit dealers

199
00:07:11,759 --> 00:07:13,520
we also scan the internet for spark and

200
00:07:13,520 --> 00:07:14,960
found it in two percent of all made

201
00:07:14,960 --> 00:07:17,280
servers

202
00:07:17,280 --> 00:07:18,880
that any old command injection bug

203
00:07:18,880 --> 00:07:20,319
piqued our interest

204
00:07:20,319 --> 00:07:22,000
if it is so common in servers won't

205
00:07:22,000 --> 00:07:25,120
clients make same mistake in star tls

206
00:07:25,120 --> 00:07:26,880
therefore we extended the command

207
00:07:26,880 --> 00:07:28,960
injection to response injection in the

208
00:07:28,960 --> 00:07:31,039
display trace the attacker injects the

209
00:07:31,039 --> 00:07:33,440
response to the command tag b before it

210
00:07:33,440 --> 00:07:35,120
is sent by the client causing a client

211
00:07:35,120 --> 00:07:37,039
to interpret it after the transition to

212
00:07:37,039 --> 00:07:39,440
tls

213
00:07:39,440 --> 00:07:41,599
we found 16 out of 28 tested clients to

214
00:07:41,599 --> 00:07:43,680
be vulnerable to this issue among them

215
00:07:43,680 --> 00:07:46,639
apple mail and thunderbird

216
00:07:46,639 --> 00:07:48,400
finally i want to tell you about the

217
00:07:48,400 --> 00:07:49,680
exploits achievable using these

218
00:07:49,680 --> 00:07:51,199
vulnerabilities

219
00:07:51,199 --> 00:07:52,800
these are only the exploits described in

220
00:07:52,800 --> 00:07:54,240
the paper but there might be more in

221
00:07:54,240 --> 00:07:55,520
practice

222
00:07:55,520 --> 00:07:56,960
roughly we are interested in stealing

223
00:07:56,960 --> 00:07:59,120
credentials and emails putting stuff in

224
00:07:59,120 --> 00:08:01,520
the user's mailbox ui spoofing and as a

225
00:08:01,520 --> 00:08:03,440
special case a cross protocol attack

226
00:08:03,440 --> 00:08:06,639
against ihttps

227
00:08:06,639 --> 00:08:08,319
this is a credential stealing attack in

228
00:08:08,319 --> 00:08:10,080
imap using the server side command

229
00:08:10,080 --> 00:08:11,199
injection

230
00:08:11,199 --> 00:08:12,960
after the start ls command the attacker

231
00:08:12,960 --> 00:08:15,199
injects two commands a login command

232
00:08:15,199 --> 00:08:17,039
into their own account and append

233
00:08:17,039 --> 00:08:18,800
command to upload an email to their own

234
00:08:18,800 --> 00:08:19,919
mailbox

235
00:08:19,919 --> 00:08:21,599
these commands are interpreted after the

236
00:08:21,599 --> 00:08:23,360
tls check

237
00:08:23,360 --> 00:08:25,199
in the victim's first encrypted command

238
00:08:25,199 --> 00:08:27,520
login is interpreted the server is

239
00:08:27,520 --> 00:08:29,199
already waiting for the mailbody to the

240
00:08:29,199 --> 00:08:30,560
append command

241
00:08:30,560 --> 00:08:32,000
the login command including the

242
00:08:32,000 --> 00:08:33,919
credentials is therefore uploaded to the

243
00:08:33,919 --> 00:08:35,839
attacker's inbox where they can retrieve

244
00:08:35,839 --> 00:08:37,360
them at their

245
00:08:37,360 --> 00:08:39,039
convenience

246
00:08:39,039 --> 00:08:40,640
this attack would also work when the

247
00:08:40,640 --> 00:08:43,760
client uses implicit tailors

248
00:08:43,760 --> 00:08:45,760
here we have another credential stealing

249
00:08:45,760 --> 00:08:47,920
attack that uses the priors greeting

250
00:08:47,920 --> 00:08:49,120
client site

251
00:08:49,120 --> 00:08:50,959
since start als is not available after

252
00:08:50,959 --> 00:08:52,800
authentication as i've already told you

253
00:08:52,800 --> 00:08:54,399
the main client proceeds in plain text

254
00:08:54,399 --> 00:08:57,279
trying to select their inbox however in

255
00:08:57,279 --> 00:08:59,360
this case the attacker responds with a

256
00:08:59,360 --> 00:09:02,000
referral response redirecting the client

257
00:09:02,000 --> 00:09:04,399
to an attacker control domain

258
00:09:04,399 --> 00:09:07,680
where the client will log in again and

259
00:09:07,680 --> 00:09:11,680
reveal their credentials to the attacker

260
00:09:12,000 --> 00:09:13,760
the next attack is a cross protocol

261
00:09:13,760 --> 00:09:15,519
attack on https

262
00:09:15,519 --> 00:09:17,680
the exploit uses imap's text tag

263
00:09:17,680 --> 00:09:19,760
reflection to construct the http

264
00:09:19,760 --> 00:09:22,640
response using a command injection

265
00:09:22,640 --> 00:09:24,720
we start by injecting a command with the

266
00:09:24,720 --> 00:09:26,440
tag http

267
00:09:26,440 --> 00:09:30,160
1.120 without spaces and then you stack

268
00:09:30,160 --> 00:09:32,480
the text that look like http address in

269
00:09:32,480 --> 00:09:34,640
this case ignore header colon

270
00:09:34,640 --> 00:09:37,200
for login and select command

271
00:09:37,200 --> 00:09:39,360
and finally we are fetching a mail from

272
00:09:39,360 --> 00:09:42,240
the attacker's inbox using the tag

273
00:09:42,240 --> 00:09:45,839
slash that looks like an html comment

274
00:09:45,839 --> 00:09:47,920
after that the attacker relays the

275
00:09:47,920 --> 00:09:50,320
victim's browser's https connection into

276
00:09:50,320 --> 00:09:53,360
the primed server

277
00:09:54,160 --> 00:09:56,000
this results in the trace on the right

278
00:09:56,000 --> 00:09:56,800
side

279
00:09:56,800 --> 00:09:58,160
the browser will send a normal get

280
00:09:58,160 --> 00:09:59,519
request and will

281
00:09:59,519 --> 00:10:01,440
in response receive the responses to the

282
00:10:01,440 --> 00:10:03,120
injected commands

283
00:10:03,120 --> 00:10:04,560
since the attacker fetches are made from

284
00:10:04,560 --> 00:10:06,480
their own mailbox with the last command

285
00:10:06,480 --> 00:10:09,200
they can present arbitrary https content

286
00:10:09,200 --> 00:10:11,360
in example

287
00:10:11,360 --> 00:10:14,399
an xss script under any names in the

288
00:10:14,399 --> 00:10:16,959
mail server certificate

289
00:10:16,959 --> 00:10:18,640
note that of course

290
00:10:18,640 --> 00:10:19,519
this

291
00:10:19,519 --> 00:10:22,079
is not syntactically correct http but it

292
00:10:22,079 --> 00:10:23,360
will be displayed fine in current

293
00:10:23,360 --> 00:10:26,959
versions of chrome and firefox

294
00:10:27,120 --> 00:10:29,120
so how do we go about mitigating these

295
00:10:29,120 --> 00:10:30,160
issues

296
00:10:30,160 --> 00:10:31,920
the most straightforward thing to do as

297
00:10:31,920 --> 00:10:33,920
an email user is to switch to implicit

298
00:10:33,920 --> 00:10:36,480
tls and disable start healers

299
00:10:36,480 --> 00:10:37,920
server providers on the other hand

300
00:10:37,920 --> 00:10:39,600
should also evaluate if they can cut

301
00:10:39,600 --> 00:10:41,920
star tls support in the future

302
00:10:41,920 --> 00:10:44,000
however we recognize that disabling

303
00:10:44,000 --> 00:10:45,920
starters may not be a workable solution

304
00:10:45,920 --> 00:10:48,480
for everyone therefore if you must use

305
00:10:48,480 --> 00:10:50,640
star ts you should isolate the plaintext

306
00:10:50,640 --> 00:10:52,720
phase completely from the tls phase by

307
00:10:52,720 --> 00:10:54,640
clearing any remaining state

308
00:10:54,640 --> 00:10:55,839
this includes

309
00:10:55,839 --> 00:10:57,600
clearing any application buffers

310
00:10:57,600 --> 00:10:59,279
hopefully also fixing the buffering

311
00:10:59,279 --> 00:11:01,200
issues in the process

312
00:11:01,200 --> 00:11:03,360
finally as a protocol and implementation

313
00:11:03,360 --> 00:11:05,120
measure we recommend streamlining a

314
00:11:05,120 --> 00:11:07,519
start tier as negotiation only sending

315
00:11:07,519 --> 00:11:08,880
and accepting the bare minimum of

316
00:11:08,880 --> 00:11:10,720
plaintext messages before transitioning

317
00:11:10,720 --> 00:11:13,120
to starttlers

318
00:11:13,120 --> 00:11:15,279
in conclusion we found that compared to

319
00:11:15,279 --> 00:11:17,680
implicit healers started as adds attack

320
00:11:17,680 --> 00:11:19,920
surface to male protocols without adding

321
00:11:19,920 --> 00:11:21,200
any benefits

322
00:11:21,200 --> 00:11:22,959
furthermore we found that start-us

323
00:11:22,959 --> 00:11:24,320
implementation on both servers and

324
00:11:24,320 --> 00:11:26,240
clients have widespread issues hinting

325
00:11:26,240 --> 00:11:28,640
at systemic problems with star tds

326
00:11:28,640 --> 00:11:31,200
and as we have shown the effect of these

327
00:11:31,200 --> 00:11:33,120
vulnerabilities is not limited to star

328
00:11:33,120 --> 00:11:35,200
healers but allows cross protocol

329
00:11:35,200 --> 00:11:38,800
attacks against https and implicit ts

330
00:11:38,800 --> 00:11:40,959
we conclude that tls is better without

331
00:11:40,959 --> 00:11:43,680
start tls and star tls should be avoided

332
00:11:43,680 --> 00:11:46,920
where possible

