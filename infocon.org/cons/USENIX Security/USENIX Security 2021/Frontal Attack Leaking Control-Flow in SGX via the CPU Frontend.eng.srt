1
00:00:07,839 --> 00:00:10,240
my name is ivan pudu and i'm on phd in

2
00:00:10,240 --> 00:00:12,400
dth sorek in this video i'm going to

3
00:00:12,400 --> 00:00:14,799
present our paper titled frontal attack

4
00:00:14,799 --> 00:00:16,640
leaking control fluence checks with the

5
00:00:16,640 --> 00:00:18,480
cpu front end

6
00:00:18,480 --> 00:00:20,320
as our attack explodes as checks i'm

7
00:00:20,320 --> 00:00:23,119
going to start off by explaining the sjx

8
00:00:23,119 --> 00:00:24,560
system model

9
00:00:24,560 --> 00:00:26,640
as jx assumes that an attacker has

10
00:00:26,640 --> 00:00:28,640
completely compromised the system and

11
00:00:28,640 --> 00:00:31,199
yet it tries to protect an application

12
00:00:31,199 --> 00:00:33,040
running in such a

13
00:00:33,040 --> 00:00:35,680
compromised environment this application

14
00:00:35,680 --> 00:00:38,239
is protected in terms of integrity and

15
00:00:38,239 --> 00:00:40,399
confidentiality thanks to primitives

16
00:00:40,399 --> 00:00:42,399
provided by the cpu

17
00:00:42,399 --> 00:00:44,640
however there are still ways in which

18
00:00:44,640 --> 00:00:46,800
one can go about extracting secrets from

19
00:00:46,800 --> 00:00:49,120
such a protected environment

20
00:00:49,120 --> 00:00:52,079
and to explain this i'm going to use the

21
00:00:52,079 --> 00:00:55,360
quotient on the slide as a victim code

22
00:00:55,360 --> 00:00:56,640
so

23
00:00:56,640 --> 00:00:58,079
in this code we have a branching

24
00:00:58,079 --> 00:00:59,680
condition on a secret and when the

25
00:00:59,680 --> 00:01:01,920
secret is one we execute on the left

26
00:01:01,920 --> 00:01:03,840
path shown in blue

27
00:01:03,840 --> 00:01:05,760
and when the secret is zero we execute

28
00:01:05,760 --> 00:01:08,960
on the false pattern

29
00:01:09,439 --> 00:01:11,439
what an attacker can do to extract the

30
00:01:11,439 --> 00:01:14,000
secret is to leverage shared resources

31
00:01:14,000 --> 00:01:16,320
in the system one of these resources is

32
00:01:16,320 --> 00:01:17,680
the cache

33
00:01:17,680 --> 00:01:20,479
and the way this works is that

34
00:01:20,479 --> 00:01:22,880
if we are executing on the true path we

35
00:01:22,880 --> 00:01:24,400
might access

36
00:01:24,400 --> 00:01:26,960
one cache line shown here in blue

37
00:01:26,960 --> 00:01:28,640
while when we are executing on the other

38
00:01:28,640 --> 00:01:32,079
part we might access a different one and

39
00:01:32,079 --> 00:01:33,840
through cache attacks the attacker can

40
00:01:33,840 --> 00:01:35,680
see which cache line was accessed and

41
00:01:35,680 --> 00:01:38,960
therefore we cover the secret condition

42
00:01:38,960 --> 00:01:41,040
however this does not work

43
00:01:41,040 --> 00:01:43,280
when both accesses happen within the

44
00:01:43,280 --> 00:01:45,680
same cache line since the attacker

45
00:01:45,680 --> 00:01:48,000
cannot observe a sub cache language

46
00:01:48,000 --> 00:01:50,159
right

47
00:01:50,159 --> 00:01:52,000
another attack that can be done against

48
00:01:52,000 --> 00:01:53,920
this code leverages the branch

49
00:01:53,920 --> 00:01:57,040
prediction units which is used to aid

50
00:01:57,040 --> 00:01:59,040
speculation so for instance when we

51
00:01:59,040 --> 00:02:01,360
execute this code

52
00:02:01,360 --> 00:02:03,200
after the branch condition some

53
00:02:03,200 --> 00:02:05,360
information about the execution of the

54
00:02:05,360 --> 00:02:07,040
branch might be stored in the last

55
00:02:07,040 --> 00:02:09,280
branch record for instance here we store

56
00:02:09,280 --> 00:02:11,120
the fact that it was taken

57
00:02:11,120 --> 00:02:13,599
and attackers can infer the value stored

58
00:02:13,599 --> 00:02:15,280
on this platform

59
00:02:15,280 --> 00:02:18,000
thankfully compiler mitigations exist

60
00:02:18,000 --> 00:02:19,680
that produce

61
00:02:19,680 --> 00:02:23,120
branching codes that doesn't update

62
00:02:23,120 --> 00:02:25,120
the structure of the cpu

63
00:02:25,120 --> 00:02:26,800
nemesis follows a different approach

64
00:02:26,800 --> 00:02:29,040
from the previous two attacks in that it

65
00:02:29,040 --> 00:02:31,440
leverages interrupts that the attacker

66
00:02:31,440 --> 00:02:33,200
can now issue because it controls the

67
00:02:33,200 --> 00:02:35,280
operating system through interrupts the

68
00:02:35,280 --> 00:02:37,519
attacker can time the execution of each

69
00:02:37,519 --> 00:02:39,040
instruction

70
00:02:39,040 --> 00:02:40,879
and if one of the instruction for

71
00:02:40,879 --> 00:02:42,959
instance is a multiplication

72
00:02:42,959 --> 00:02:45,120
in this case then the attacker will see

73
00:02:45,120 --> 00:02:47,200
that this one takes a longer time than

74
00:02:47,200 --> 00:02:49,200
an addition before he knows that the

75
00:02:49,200 --> 00:02:51,599
execution was in the true path

76
00:02:51,599 --> 00:02:53,200
however this doesn't help with the

77
00:02:53,200 --> 00:02:55,200
victim code that i'm using as an example

78
00:02:55,200 --> 00:02:56,560
because the same instructions are

79
00:02:56,560 --> 00:02:58,480
present in both paths

80
00:02:58,480 --> 00:02:59,920
another approach that leverages

81
00:02:59,920 --> 00:03:03,360
interrupts is the pack called copycat

82
00:03:03,360 --> 00:03:05,760
and what copycat does instead it counts

83
00:03:05,760 --> 00:03:08,159
the instructions that were executed

84
00:03:08,159 --> 00:03:09,840
so if we have two instructions on the

85
00:03:09,840 --> 00:03:12,400
pulse pattern three on the true path

86
00:03:12,400 --> 00:03:14,879
then the attacker can recover the secret

87
00:03:14,879 --> 00:03:17,120
however this does not help with the

88
00:03:17,120 --> 00:03:19,840
victim codes here because both paths

89
00:03:19,840 --> 00:03:22,159
have the same number of instructions one

90
00:03:22,159 --> 00:03:24,239
of the reasons why we're looking at this

91
00:03:24,239 --> 00:03:27,360
particular victim code pattern is that

92
00:03:27,360 --> 00:03:30,000
it's found on several cryptographic

93
00:03:30,000 --> 00:03:31,519
libraries

94
00:03:31,519 --> 00:03:32,879
and the reason for that is that they

95
00:03:32,879 --> 00:03:34,480
assume that if you have the same

96
00:03:34,480 --> 00:03:35,760
instructions

97
00:03:35,760 --> 00:03:37,920
it will take the same amount of time for

98
00:03:37,920 --> 00:03:39,519
them to execute it doesn't matter in

99
00:03:39,519 --> 00:03:41,760
which branch they are so an attacker

100
00:03:41,760 --> 00:03:43,920
that is able to time the execution won't

101
00:03:43,920 --> 00:03:47,760
be able to see which branch was executed

102
00:03:47,760 --> 00:03:49,840
we however showed that this assumption

103
00:03:49,840 --> 00:03:52,000
does not always hold and particularly

104
00:03:52,000 --> 00:03:54,080
doesn't hold when the attacker can

105
00:03:54,080 --> 00:03:56,720
interrupt each instruction

106
00:03:56,720 --> 00:03:58,560
so what it looks like is something like

107
00:03:58,560 --> 00:04:00,959
this the attacker will start the effect

108
00:04:00,959 --> 00:04:03,040
in branch and then it will interrupt it

109
00:04:03,040 --> 00:04:05,120
right after the first instruction

110
00:04:05,120 --> 00:04:06,959
and it will do the same for each of the

111
00:04:06,959 --> 00:04:08,560
instructions until

112
00:04:08,560 --> 00:04:10,799
the execution terminates

113
00:04:10,799 --> 00:04:12,400
and with this the attacker is actually

114
00:04:12,400 --> 00:04:14,319
able to see timing differences in the

115
00:04:14,319 --> 00:04:15,840
execution

116
00:04:15,840 --> 00:04:19,279
we use this observation to exploit

117
00:04:19,279 --> 00:04:22,800
two commonly used libraries inside sgx

118
00:04:22,800 --> 00:04:25,360
one of them is intel's ipp cryptography

119
00:04:25,360 --> 00:04:27,280
library which is

120
00:04:27,280 --> 00:04:29,040
which claims to be side channel

121
00:04:29,040 --> 00:04:30,320
resistant

122
00:04:30,320 --> 00:04:32,400
however it still contains a balanced

123
00:04:32,400 --> 00:04:34,400
branch on some of its functions for

124
00:04:34,400 --> 00:04:35,600
instance when

125
00:04:35,600 --> 00:04:37,759
big numbers are compared

126
00:04:37,759 --> 00:04:39,120
and when

127
00:04:39,120 --> 00:04:42,400
we time the execution of that comparison

128
00:04:42,400 --> 00:04:44,720
we see the distribution shown here on

129
00:04:44,720 --> 00:04:47,120
the right where on the x-axis we have

130
00:04:47,120 --> 00:04:49,919
the execution time in cycles and on the

131
00:04:49,919 --> 00:04:52,160
y-axis we have the density of the

132
00:04:52,160 --> 00:04:54,400
distribution so the yellow

133
00:04:54,400 --> 00:04:56,639
curve represent the distribution of a

134
00:04:56,639 --> 00:04:59,600
memory right in the smaller than paths

135
00:04:59,600 --> 00:05:01,600
and the blue curve represents the same

136
00:05:01,600 --> 00:05:04,080
memory right except this time executed

137
00:05:04,080 --> 00:05:06,080
only bigger than but

138
00:05:06,080 --> 00:05:06,880
so

139
00:05:06,880 --> 00:05:08,400
as you can be seen the attacker can

140
00:05:08,400 --> 00:05:10,800
distinguish when these two branches are

141
00:05:10,800 --> 00:05:13,759
executed so it can recover the

142
00:05:13,759 --> 00:05:16,000
result of the computation

143
00:05:16,000 --> 00:05:18,080
and this allowed us to make

144
00:05:18,080 --> 00:05:21,120
25 percent of the secret that was used

145
00:05:21,120 --> 00:05:22,320
on a loop

146
00:05:22,320 --> 00:05:24,800
in this comparison

147
00:05:24,800 --> 00:05:26,800
another library that we exploited is the

148
00:05:26,800 --> 00:05:28,960
arm and bacillus library and in there we

149
00:05:28,960 --> 00:05:30,960
explored two functions the first one is

150
00:05:30,960 --> 00:05:33,600
the one comma multiplication which is

151
00:05:33,600 --> 00:05:35,520
mostly constant time

152
00:05:35,520 --> 00:05:37,600
way of multiplying big numbers except

153
00:05:37,600 --> 00:05:40,000
there is a secret dependent subtraction

154
00:05:40,000 --> 00:05:42,400
at the end of the multiplication

155
00:05:42,400 --> 00:05:44,479
and when we time

156
00:05:44,479 --> 00:05:47,120
the balance branch that is put to

157
00:05:47,120 --> 00:05:51,120
mitigate timing attacks in that

158
00:05:51,120 --> 00:05:53,120
in the competition

159
00:05:53,120 --> 00:05:55,919
we see the distribution shown here which

160
00:05:55,919 --> 00:05:57,759
again it's different despite the fact

161
00:05:57,759 --> 00:05:58,960
that we are mentioning the same

162
00:05:58,960 --> 00:06:01,039
instructions so with that we were able

163
00:06:01,039 --> 00:06:02,639
to leave 83

164
00:06:02,639 --> 00:06:04,479
of these subtractions

165
00:06:04,479 --> 00:06:06,560
which are related to the inputs of the

166
00:06:06,560 --> 00:06:09,199
multiplication which are secrets

167
00:06:09,199 --> 00:06:11,039
so another function that we exploited is

168
00:06:11,039 --> 00:06:13,919
the rsa key generation

169
00:06:13,919 --> 00:06:17,280
and in there at some points uh

170
00:06:17,280 --> 00:06:19,199
gcp computation

171
00:06:19,199 --> 00:06:21,680
on some secrets is performed gcd

172
00:06:21,680 --> 00:06:24,000
computation as a secret branch

173
00:06:24,000 --> 00:06:27,039
and we were able to measure that branch

174
00:06:27,039 --> 00:06:30,639
and with that recovery the key that was

175
00:06:30,639 --> 00:06:32,639
being generated

176
00:06:32,639 --> 00:06:37,120
within seconds of on 65 of the runs

177
00:06:37,120 --> 00:06:38,240
um

178
00:06:38,240 --> 00:06:40,560
and finally i want to mention that this

179
00:06:40,560 --> 00:06:43,199
actually works on all sjx architectures

180
00:06:43,199 --> 00:06:45,600
that we tested up to 10th gen

181
00:06:45,600 --> 00:06:46,800
um

182
00:06:46,800 --> 00:06:48,639
with some differences depending on the

183
00:06:48,639 --> 00:06:50,400
architecture and the microcode but this

184
00:06:50,400 --> 00:06:53,520
is discussed more in the paper

185
00:06:53,520 --> 00:06:55,199
and finally the attack worked better

186
00:06:55,199 --> 00:06:57,280
with something disabled

187
00:06:57,280 --> 00:06:59,520
um despite the fact that it's usually a

188
00:06:59,520 --> 00:07:02,000
good security practice to have it

189
00:07:02,000 --> 00:07:04,720
disabled because it prevents other

190
00:07:04,720 --> 00:07:07,120
attacks to give an idea about which

191
00:07:07,120 --> 00:07:08,800
parts of addicting binary might be

192
00:07:08,800 --> 00:07:10,720
vulnerable to our attack i'm going to

193
00:07:10,720 --> 00:07:12,720
show how detect performs with the

194
00:07:12,720 --> 00:07:14,720
condition on this slide

195
00:07:14,720 --> 00:07:16,479
this code consists of

196
00:07:16,479 --> 00:07:19,759
25 repeating additions and memory rights

197
00:07:19,759 --> 00:07:21,759
and there are two identical branches

198
00:07:21,759 --> 00:07:23,039
like before

199
00:07:23,039 --> 00:07:24,960
and which branch is executed depends on

200
00:07:24,960 --> 00:07:26,000
a secret

201
00:07:26,000 --> 00:07:28,479
now what we are gonna change with this

202
00:07:28,479 --> 00:07:31,520
code and check the results of the attack

203
00:07:31,520 --> 00:07:33,199
with these changes is

204
00:07:33,199 --> 00:07:35,520
the alignment of the branches and with

205
00:07:35,520 --> 00:07:38,400
alignment x for the branch i mean that

206
00:07:38,400 --> 00:07:39,360
the

207
00:07:39,360 --> 00:07:41,759
first instruction the addition will

208
00:07:41,759 --> 00:07:45,199
start with an address that ends with x

209
00:07:45,199 --> 00:07:48,000
so if x is five the valid starting

210
00:07:48,000 --> 00:07:49,680
addresses could be

211
00:07:49,680 --> 00:07:53,199
15 or 25 but not 26.

212
00:07:53,199 --> 00:07:56,000
now with this in mind i'm gonna show the

213
00:07:56,000 --> 00:07:58,319
results of the attack where we have the

214
00:07:58,319 --> 00:08:00,879
various alignments of the branch on the

215
00:08:00,879 --> 00:08:03,039
x-axis and elements for the else branch

216
00:08:03,039 --> 00:08:05,440
on the y-axis and darker chords

217
00:08:05,440 --> 00:08:08,160
represent higher success rates in this

218
00:08:08,160 --> 00:08:11,120
in this hitman so as you can be seen

219
00:08:11,120 --> 00:08:12,800
there are differences based on the

220
00:08:12,800 --> 00:08:14,240
alignment so this is one of the

221
00:08:14,240 --> 00:08:15,759
determining factors on whether the

222
00:08:15,759 --> 00:08:18,160
attack will succeed or not and

223
00:08:18,160 --> 00:08:20,080
perhaps more interestingly

224
00:08:20,080 --> 00:08:22,319
the the attack success

225
00:08:22,319 --> 00:08:25,039
rates repeat every 16 bytes so we can

226
00:08:25,039 --> 00:08:27,120
essentially split the sigma into four

227
00:08:27,120 --> 00:08:29,680
quadrants of length 16

228
00:08:29,680 --> 00:08:32,240
and the success rates inside these

229
00:08:32,240 --> 00:08:34,559
quadrants are essentially the same

230
00:08:34,559 --> 00:08:36,240
another thing to notice here is that

231
00:08:36,240 --> 00:08:38,880
along the diagonal the success rate is

232
00:08:38,880 --> 00:08:39,760
50

233
00:08:39,760 --> 00:08:40,958
meaning it's

234
00:08:40,958 --> 00:08:43,039
uh as good as a random guess but not

235
00:08:43,039 --> 00:08:44,800
better so when the alignment of the two

236
00:08:44,800 --> 00:08:46,560
branches is the same

237
00:08:46,560 --> 00:08:48,640
the attack is not successful in the

238
00:08:48,640 --> 00:08:51,440
paper we provide a more comprehensive

239
00:08:51,440 --> 00:08:53,200
list of requirements and limitations for

240
00:08:53,200 --> 00:08:55,200
the attack but for now i'm going to

241
00:08:55,200 --> 00:08:58,800
discuss why we are seeing these 16 bytes

242
00:08:58,800 --> 00:09:01,440
repetition for the attack success rate

243
00:09:01,440 --> 00:09:02,959
and to do that i'm going to show what

244
00:09:02,959 --> 00:09:05,519
happens to the cpu pipeline as we are

245
00:09:05,519 --> 00:09:07,839
interrupting each instruction in this

246
00:09:07,839 --> 00:09:09,600
code snippet shown on the left the

247
00:09:09,600 --> 00:09:11,360
binary of this code is shown inside this

248
00:09:11,360 --> 00:09:14,160
red rectangle which represents the l1

249
00:09:14,160 --> 00:09:15,680
instruction cache

250
00:09:15,680 --> 00:09:18,240
the first stage of the pipeline is the

251
00:09:18,240 --> 00:09:20,880
instruction patching pd code what this

252
00:09:20,880 --> 00:09:25,040
model does it is it fetches 16 bytes

253
00:09:25,040 --> 00:09:27,760
from the l1 cache it is gonna try to

254
00:09:27,760 --> 00:09:30,640
pre-decode and importantly the 16 bytes

255
00:09:30,640 --> 00:09:33,279
that are fetched can only start at a

256
00:09:33,279 --> 00:09:35,519
multiple of 16.

257
00:09:35,519 --> 00:09:37,760
so the critical then will try to

258
00:09:37,760 --> 00:09:40,560
recognize where instructions start and

259
00:09:40,560 --> 00:09:41,920
where they end

260
00:09:41,920 --> 00:09:43,920
and in this case it does recognize three

261
00:09:43,920 --> 00:09:45,519
instructions and we know that there is

262
00:09:45,519 --> 00:09:47,920
one instruction that is incomplete these

263
00:09:47,920 --> 00:09:49,920
three instructions are then going to be

264
00:09:49,920 --> 00:09:52,080
forwarded to the next stages and

265
00:09:52,080 --> 00:09:54,080
eventually they are going to reach the

266
00:09:54,080 --> 00:09:55,680
back end

267
00:09:55,680 --> 00:09:57,920
now note that the first instructions to

268
00:09:57,920 --> 00:09:59,440
reach the back end

269
00:09:59,440 --> 00:10:01,519
are actually the ones that were present

270
00:10:01,519 --> 00:10:02,880
in the

271
00:10:02,880 --> 00:10:05,839
first 16 byte block that was pre-decoded

272
00:10:05,839 --> 00:10:08,079
in the front end now these instructions

273
00:10:08,079 --> 00:10:10,240
are also going to be the first ones

274
00:10:10,240 --> 00:10:11,760
that are going to be sent to the

275
00:10:11,760 --> 00:10:13,760
execution units

276
00:10:13,760 --> 00:10:16,560
and maybe one of them will complete and

277
00:10:16,560 --> 00:10:18,240
then as we are interrupting after each

278
00:10:18,240 --> 00:10:20,000
instructions

279
00:10:20,000 --> 00:10:22,160
when the interrupt arrives they are

280
00:10:22,160 --> 00:10:23,839
gonna be flushed

281
00:10:23,839 --> 00:10:26,800
however the cpu still needs to retire in

282
00:10:26,800 --> 00:10:29,519
order and to provide some consistency to

283
00:10:29,519 --> 00:10:31,120
the developers

284
00:10:31,120 --> 00:10:33,120
so the first instruction is still going

285
00:10:33,120 --> 00:10:36,320
to be retired and after it completes we

286
00:10:36,320 --> 00:10:38,399
can advance the program counter and

287
00:10:38,399 --> 00:10:40,560
serve the interrupt if we look at what

288
00:10:40,560 --> 00:10:42,959
happens in the else branch now this

289
00:10:42,959 --> 00:10:45,680
branch is differently aligned from the

290
00:10:45,680 --> 00:10:48,079
branch so the first 16 byte block that

291
00:10:48,079 --> 00:10:50,079
reaches the front end

292
00:10:50,079 --> 00:10:52,160
actually only contains one usable

293
00:10:52,160 --> 00:10:53,519
instruction

294
00:10:53,519 --> 00:10:55,680
and this instruction again travels

295
00:10:55,680 --> 00:10:57,360
through the front end

296
00:10:57,360 --> 00:11:00,000
and is the first one to reach the

297
00:11:00,000 --> 00:11:02,000
reorder buffer if we look at which

298
00:11:02,000 --> 00:11:04,399
instructions reach the back end first

299
00:11:04,399 --> 00:11:06,480
after each interrupt we will obtain

300
00:11:06,480 --> 00:11:08,320
something like shown in the table in

301
00:11:08,320 --> 00:11:10,079
this slide this after the first

302
00:11:10,079 --> 00:11:11,920
instruction we get

303
00:11:11,920 --> 00:11:14,800
these micro operations in the back end

304
00:11:14,800 --> 00:11:16,640
and then after the second one we get the

305
00:11:16,640 --> 00:11:19,040
ones in the second row and so on and so

306
00:11:19,040 --> 00:11:20,000
forth

307
00:11:20,000 --> 00:11:21,920
so the interesting thing here is that

308
00:11:21,920 --> 00:11:24,240
these differences emerge because the

309
00:11:24,240 --> 00:11:26,800
first 16 byte block that we're getting

310
00:11:26,800 --> 00:11:29,440
in the fashion preview code module

311
00:11:29,440 --> 00:11:32,000
has to be statically aligned at 16 bytes

312
00:11:32,000 --> 00:11:34,320
and out of these four instructions that

313
00:11:34,320 --> 00:11:35,920
we interrupted

314
00:11:35,920 --> 00:11:38,320
three of them had different instructions

315
00:11:38,320 --> 00:11:40,399
switching the back end

316
00:11:40,399 --> 00:11:42,640
for the first time after the interrupt

317
00:11:42,640 --> 00:11:44,640
and this might cause the interrupt

318
00:11:44,640 --> 00:11:46,880
handling to actually be faster or slower

319
00:11:46,880 --> 00:11:48,640
depending on which instructions need to

320
00:11:48,640 --> 00:11:51,600
be retired and what things need to be

321
00:11:51,600 --> 00:11:52,800
reverted

322
00:11:52,800 --> 00:11:55,440
i'm going to conclude by showing

323
00:11:55,440 --> 00:11:58,000
some of the ways that one can go about

324
00:11:58,000 --> 00:12:00,639
defending against our attack and the

325
00:12:00,639 --> 00:12:02,800
first one to mention is a principal

326
00:12:02,800 --> 00:12:04,639
approach that completely avoids any

327
00:12:04,639 --> 00:12:07,120
secret dependent branches altogether and

328
00:12:07,120 --> 00:12:09,360
the reason why this is good is that it

329
00:12:09,360 --> 00:12:11,279
also protect against other recessional

330
00:12:11,279 --> 00:12:12,240
attacks

331
00:12:12,240 --> 00:12:14,720
we also evaluated uh some haddock

332
00:12:14,720 --> 00:12:16,480
solutions because these are simple to

333
00:12:16,480 --> 00:12:19,200
implement and don't require rewriting

334
00:12:19,200 --> 00:12:20,320
your code

335
00:12:20,320 --> 00:12:22,480
so the simplest one is to just align the

336
00:12:22,480 --> 00:12:24,800
codes to the same offset

337
00:12:24,800 --> 00:12:27,279
model of 16 because as we have seen the

338
00:12:27,279 --> 00:12:29,200
attack success rates for this particular

339
00:12:29,200 --> 00:12:31,519
code are very low we have evaluated the

340
00:12:31,519 --> 00:12:32,959
space of our head and the performance

341
00:12:32,959 --> 00:12:35,839
overhead of this defense and we have

342
00:12:35,839 --> 00:12:37,360
noticed that the space of our head is

343
00:12:37,360 --> 00:12:38,720
very small

344
00:12:38,720 --> 00:12:40,320
and interestingly with this defense

345
00:12:40,320 --> 00:12:42,160
enabled sometimes the code was actually

346
00:12:42,160 --> 00:12:45,040
faster than without the defense

347
00:12:45,040 --> 00:12:46,639
so with that i would like to thank you

348
00:12:46,639 --> 00:12:50,360
for your attention

349
00:12:55,519 --> 00:12:57,600
you

