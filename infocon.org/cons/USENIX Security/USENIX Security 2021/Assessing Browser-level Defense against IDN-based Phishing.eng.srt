1
00:00:08,559 --> 00:00:11,360
hello everyone my name is gong wang and

2
00:00:11,360 --> 00:00:13,519
i'm assistant professor at university of

3
00:00:13,519 --> 00:00:14,639
illinois

4
00:00:14,639 --> 00:00:16,640
today i'm going to talk about browser

5
00:00:16,640 --> 00:00:18,800
level defense against idm based

6
00:00:18,800 --> 00:00:21,600
efficient attack

7
00:00:22,320 --> 00:00:24,800
so imagine you were led to visiting this

8
00:00:24,800 --> 00:00:27,039
website and everything looks like

9
00:00:27,039 --> 00:00:29,760
apple.com even the domain names

10
00:00:29,760 --> 00:00:32,159
however it turns out this is a highly

11
00:00:32,159 --> 00:00:34,880
deceptive phishing website

12
00:00:34,880 --> 00:00:36,880
if you take a closer look at the domain

13
00:00:36,880 --> 00:00:38,079
name and check

14
00:00:38,079 --> 00:00:39,600
its encoding

15
00:00:39,600 --> 00:00:41,440
you can see that it is actually an

16
00:00:41,440 --> 00:00:44,559
internationalized domain name or idn

17
00:00:44,559 --> 00:00:47,520
so the character a in apple.com is

18
00:00:47,520 --> 00:00:50,559
actually a cyrillic small letter a

19
00:00:50,559 --> 00:00:52,680
the unicode code is

20
00:00:52,680 --> 00:00:54,399
0430

21
00:00:54,399 --> 00:00:56,320
however the real

22
00:00:56,320 --> 00:00:59,280
apple's website has only latin small

23
00:00:59,280 --> 00:01:02,399
letter a with a different encoding

24
00:01:02,399 --> 00:01:05,040
now these two characters look like each

25
00:01:05,040 --> 00:01:07,439
other but with the different codes

26
00:01:07,439 --> 00:01:09,520
so these allow the attacker to create a

27
00:01:09,520 --> 00:01:12,560
highly deceptive fission domain name

28
00:01:12,560 --> 00:01:14,720
so a little bit background

29
00:01:14,720 --> 00:01:18,640
idn was introduced around 2013

30
00:01:18,640 --> 00:01:21,280
it allows people around the world to use

31
00:01:21,280 --> 00:01:23,680
their own languages for creating domain

32
00:01:23,680 --> 00:01:24,640
names

33
00:01:24,640 --> 00:01:28,880
so for example busia is a german term

34
00:01:28,880 --> 00:01:31,119
means books in english

35
00:01:31,119 --> 00:01:34,079
so a bookstore website can use booster.e

36
00:01:34,079 --> 00:01:36,720
as its domain name and it will shows

37
00:01:36,720 --> 00:01:39,920
booster.e on the browser address bar

38
00:01:39,920 --> 00:01:42,159
in the backend there's corresponding

39
00:01:42,159 --> 00:01:44,720
puny code which which is the ascii

40
00:01:44,720 --> 00:01:47,600
version of the domain name starts with

41
00:01:47,600 --> 00:01:49,360
accent

42
00:01:49,360 --> 00:01:51,600
can use to work with electricity systems

43
00:01:51,600 --> 00:01:54,399
such as dns

44
00:01:54,399 --> 00:01:56,799
and the problem is that many different

45
00:01:56,799 --> 00:01:58,640
characters from different unicode

46
00:01:58,640 --> 00:02:00,960
scripts different languages may look

47
00:02:00,960 --> 00:02:02,240
like each other

48
00:02:02,240 --> 00:02:04,079
and this creates an opportunity for

49
00:02:04,079 --> 00:02:07,200
attackers to create a highly similar

50
00:02:07,200 --> 00:02:09,199
looking domain names to do phishing

51
00:02:09,199 --> 00:02:11,599
attacks

52
00:02:11,599 --> 00:02:13,680
so browser vendors have realized this

53
00:02:13,680 --> 00:02:16,160
problem and deployed defense a common

54
00:02:16,160 --> 00:02:19,680
defense idea is to display a puny code

55
00:02:19,680 --> 00:02:21,280
when the browser detects an

56
00:02:21,280 --> 00:02:23,760
impersonation attempt for example this

57
00:02:23,760 --> 00:02:26,599
apple.com is idn it looks like the

58
00:02:26,599 --> 00:02:29,040
realapple.com and the browser can just

59
00:02:29,040 --> 00:02:31,519
display its puny code version

60
00:02:31,519 --> 00:02:34,720
and even through a warning message

61
00:02:34,720 --> 00:02:35,680
however

62
00:02:35,680 --> 00:02:37,360
we found that this

63
00:02:37,360 --> 00:02:39,599
defense policy is triggered

64
00:02:39,599 --> 00:02:42,879
inconsistently sometimes so for example

65
00:02:42,879 --> 00:02:45,360
sometimes when there's a website

66
00:02:45,360 --> 00:02:47,760
has a domain name that is clearly

67
00:02:47,760 --> 00:02:50,720
impersonating other popular domain names

68
00:02:50,720 --> 00:02:53,680
and those policies will not be triggered

69
00:02:53,680 --> 00:02:55,920
so this makes us wonder

70
00:02:55,920 --> 00:02:57,760
what kind of policies

71
00:02:57,760 --> 00:03:00,080
do broad major browser vendors

72
00:03:00,080 --> 00:03:02,840
adopt and how effectively they are

73
00:03:02,840 --> 00:03:05,920
enforced also we want to understand if

74
00:03:05,920 --> 00:03:08,159
there are ways to systematically bypass

75
00:03:08,159 --> 00:03:10,400
these existing defense policies to

76
00:03:10,400 --> 00:03:12,480
create a homograph idn

77
00:03:12,480 --> 00:03:15,280
and finally how well can end users

78
00:03:15,280 --> 00:03:20,080
recognize those id and homograph domains

79
00:03:20,080 --> 00:03:22,159
so we answer the first two questions

80
00:03:22,159 --> 00:03:24,959
using blackbox testing framework

81
00:03:24,959 --> 00:03:27,440
to examine different browser vendors and

82
00:03:27,440 --> 00:03:28,879
different versions

83
00:03:28,879 --> 00:03:32,560
all the way from 2015 to 2020.

84
00:03:32,560 --> 00:03:34,319
we answer the third question through a

85
00:03:34,319 --> 00:03:36,400
user study

86
00:03:36,400 --> 00:03:38,080
so let's take a look at the black box

87
00:03:38,080 --> 00:03:39,360
testing first

88
00:03:39,360 --> 00:03:41,599
the first part of the test is to try to

89
00:03:41,599 --> 00:03:43,519
understand the claimed policies of

90
00:03:43,519 --> 00:03:45,519
different browsers and how well they're

91
00:03:45,519 --> 00:03:46,799
enforced

92
00:03:46,799 --> 00:03:49,599
so we take a bunch of browsers and

93
00:03:49,599 --> 00:03:52,480
find their popular public documentations

94
00:03:52,480 --> 00:03:54,959
and we found that many browsers adopt

95
00:03:54,959 --> 00:03:56,799
very similar policies

96
00:03:56,799 --> 00:03:59,040
so for example many browsers will

97
00:03:59,040 --> 00:04:02,159
prevent the mixing of different unicode

98
00:04:02,159 --> 00:04:05,599
scripts so for example this apple.com is

99
00:04:05,599 --> 00:04:08,239
a mixture of latin characters and

100
00:04:08,239 --> 00:04:10,480
cyrillic characters and this is no

101
00:04:10,480 --> 00:04:14,080
longer allowed in many browsers

102
00:04:14,080 --> 00:04:16,160
other browsers might

103
00:04:16,160 --> 00:04:18,639
only allow certain unicoded blocks or

104
00:04:18,639 --> 00:04:20,320
scripts to be mixed

105
00:04:20,320 --> 00:04:23,600
for example typically chinese japanese

106
00:04:23,600 --> 00:04:26,840
and korean characters can be mixed

107
00:04:26,840 --> 00:04:28,960
together there's a rule called a

108
00:04:28,960 --> 00:04:30,479
skeleton rule

109
00:04:30,479 --> 00:04:31,919
which is to

110
00:04:31,919 --> 00:04:35,840
match a given idn with the skeleton

111
00:04:35,840 --> 00:04:38,960
of a short list of top domain names so

112
00:04:38,960 --> 00:04:41,840
for example this google.com match the

113
00:04:41,840 --> 00:04:43,680
skeleton of

114
00:04:43,680 --> 00:04:46,000
google.com the real google.com and

115
00:04:46,000 --> 00:04:50,000
therefore this domain will be flagged

116
00:04:50,160 --> 00:04:52,320
another rule is called host script

117
00:04:52,320 --> 00:04:54,880
confusible meaning that sometimes the

118
00:04:54,880 --> 00:04:58,320
attacker can craft a domain name with

119
00:04:58,320 --> 00:04:59,440
only

120
00:04:59,440 --> 00:05:02,639
characters from a single unicode block

121
00:05:02,639 --> 00:05:05,039
for example this apple.com

122
00:05:05,039 --> 00:05:05,919
is

123
00:05:05,919 --> 00:05:09,039
is every single letter

124
00:05:09,039 --> 00:05:12,320
is cyrillic letters so therefore there's

125
00:05:12,320 --> 00:05:13,600
no mixing

126
00:05:13,600 --> 00:05:15,360
so the browser has to look for

127
00:05:15,360 --> 00:05:18,080
additional evidence of impersonation by

128
00:05:18,080 --> 00:05:21,120
checking the tlds

129
00:05:21,120 --> 00:05:23,440
other policies and rules are quite

130
00:05:23,440 --> 00:05:25,280
self-explanatory

131
00:05:25,280 --> 00:05:28,400
so through this kind of policy mining

132
00:05:28,400 --> 00:05:31,759
we crafted 5000 testing cases testing

133
00:05:31,759 --> 00:05:34,479
idns to test if these policies are well

134
00:05:34,479 --> 00:05:36,960
enforced

135
00:05:37,199 --> 00:05:39,520
the second part of the testing focus on

136
00:05:39,520 --> 00:05:40,639
evasion

137
00:05:40,639 --> 00:05:43,680
we construct potentially evasive testing

138
00:05:43,680 --> 00:05:47,039
ideas to see how browsers react to them

139
00:05:47,039 --> 00:05:49,440
so for example we observed that the

140
00:05:49,440 --> 00:05:52,400
browsers are using a list of confusible

141
00:05:52,400 --> 00:05:55,280
characters from the unicode standard to

142
00:05:55,280 --> 00:05:56,960
support their policies

143
00:05:56,960 --> 00:05:59,840
however this list is largely incomplete

144
00:05:59,840 --> 00:06:03,520
so we basically craft evasive idn's

145
00:06:03,520 --> 00:06:05,440
through a more extensive list of

146
00:06:05,440 --> 00:06:08,560
confusible characters

147
00:06:08,560 --> 00:06:10,720
another idea is that the browser are

148
00:06:10,720 --> 00:06:14,160
maintaining a small list of 5000 domains

149
00:06:14,160 --> 00:06:16,080
as the popular domains

150
00:06:16,080 --> 00:06:18,080
however there are many important target

151
00:06:18,080 --> 00:06:20,720
domains that are not on the list

152
00:06:20,720 --> 00:06:23,199
for example regional hospitals may be a

153
00:06:23,199 --> 00:06:24,800
good efficient target

154
00:06:24,800 --> 00:06:29,199
but there is not on the popular list

155
00:06:29,600 --> 00:06:33,199
host script confusible has also

156
00:06:33,199 --> 00:06:35,919
weaknesses because we can find the right

157
00:06:35,919 --> 00:06:37,199
tlds

158
00:06:37,199 --> 00:06:40,960
to craft a evasive idm

159
00:06:40,960 --> 00:06:43,520
and finally we then the prohibited

160
00:06:43,520 --> 00:06:46,400
script we found certain unicode blocks

161
00:06:46,400 --> 00:06:48,720
can still be mixed

162
00:06:48,720 --> 00:06:51,120
through these ideas we crafted 3 000

163
00:06:51,120 --> 00:06:53,360
testing idns to test division

164
00:06:53,360 --> 00:06:57,199
feasibility and together we got 9 000

165
00:06:57,199 --> 00:07:00,000
testing cases

166
00:07:00,240 --> 00:07:02,319
so in order to automatically run those

167
00:07:02,319 --> 00:07:04,400
tests across different browsers

168
00:07:04,400 --> 00:07:05,840
different versions and different

169
00:07:05,840 --> 00:07:08,319
operating systems uh we built a testing

170
00:07:08,319 --> 00:07:10,639
framework to do this automatically

171
00:07:10,639 --> 00:07:13,280
so the idea is that we instru instrument

172
00:07:13,280 --> 00:07:16,080
the browsers to load the testing id ends

173
00:07:16,080 --> 00:07:18,800
and at the same time perform screen

174
00:07:18,800 --> 00:07:21,280
recording to record how the browsers

175
00:07:21,280 --> 00:07:24,000
react to those domains

176
00:07:24,000 --> 00:07:27,039
so as you can see our testing covers a

177
00:07:27,039 --> 00:07:28,960
large set of browsers and different

178
00:07:28,960 --> 00:07:31,360
versions including uh

179
00:07:31,360 --> 00:07:32,880
you know both their

180
00:07:32,880 --> 00:07:34,960
desktop versions and mobile versions as

181
00:07:34,960 --> 00:07:36,560
well

182
00:07:36,560 --> 00:07:39,680
so after capture the video recording we

183
00:07:39,680 --> 00:07:42,479
devel we developed a image analysis

184
00:07:42,479 --> 00:07:45,280
framework to classify if the browser has

185
00:07:45,280 --> 00:07:49,520
displayed the puny code or the unicode

186
00:07:49,599 --> 00:07:51,360
so here is the quick

187
00:07:51,360 --> 00:07:53,440
look at some of the results

188
00:07:53,440 --> 00:07:54,240
so

189
00:07:54,240 --> 00:07:55,919
we look at the latest versions of the

190
00:07:55,919 --> 00:07:59,440
browsers and and and show that out of

191
00:07:59,440 --> 00:08:02,560
the 9000 testing cases how many cases

192
00:08:02,560 --> 00:08:06,560
are shown are discipline the unicode

193
00:08:06,560 --> 00:08:08,479
showing the unicode means that the

194
00:08:08,479 --> 00:08:10,479
defense policy was not successfully

195
00:08:10,479 --> 00:08:13,680
triggered therefore the defense failed

196
00:08:13,680 --> 00:08:15,840
we found that all the browsers have

197
00:08:15,840 --> 00:08:18,560
failed on certain testing cases and in

198
00:08:18,560 --> 00:08:21,280
comparison chrome is the relatively

199
00:08:21,280 --> 00:08:22,800
stricter one

200
00:08:22,800 --> 00:08:26,960
that has the lower failure rate

201
00:08:26,960 --> 00:08:28,800
so we then plot their

202
00:08:28,800 --> 00:08:31,280
policy changes over time

203
00:08:31,280 --> 00:08:33,200
by checking the different browsers and

204
00:08:33,200 --> 00:08:36,240
their versions along the time axis so

205
00:08:36,240 --> 00:08:39,679
here in this plot the x-axis is the time

206
00:08:39,679 --> 00:08:43,120
and the y-axis is the failure rate

207
00:08:43,120 --> 00:08:45,279
so i wanted to point out this is only

208
00:08:45,279 --> 00:08:47,200
for the evasion test

209
00:08:47,200 --> 00:08:48,640
and i wanted to point out a few

210
00:08:48,640 --> 00:08:50,320
interesting points

211
00:08:50,320 --> 00:08:52,800
so the flat curve at zero failure rates

212
00:08:52,800 --> 00:08:55,200
means that the browser has not yet

213
00:08:55,200 --> 00:08:58,080
supported supported idm

214
00:08:58,080 --> 00:09:01,040
so chrome as you can see is the first

215
00:09:01,040 --> 00:09:03,680
browser that supported idn

216
00:09:03,680 --> 00:09:06,480
and they become immediately vulnerable

217
00:09:06,480 --> 00:09:10,160
after uh you know supporting idm

218
00:09:10,160 --> 00:09:13,839
over time browser like chrome has major

219
00:09:13,839 --> 00:09:16,480
updates on their idn policies to reduce

220
00:09:16,480 --> 00:09:18,480
the attack surface

221
00:09:18,480 --> 00:09:22,560
very interestingly uh in early 2019

222
00:09:22,560 --> 00:09:25,200
we found that chrome have revoked some

223
00:09:25,200 --> 00:09:28,640
of their idn policies to re-allow

224
00:09:28,640 --> 00:09:30,800
certain unicode blocks such as latin

225
00:09:30,800 --> 00:09:32,160
extended a

226
00:09:32,160 --> 00:09:34,800
so the reason we suspect is that those

227
00:09:34,800 --> 00:09:36,640
rules are too aggressive and it might

228
00:09:36,640 --> 00:09:39,040
have hurt uh

229
00:09:39,040 --> 00:09:41,680
legitimate domains

230
00:09:41,680 --> 00:09:43,680
also we observed that a firefox and

231
00:09:43,680 --> 00:09:47,279
safari policy have not had major updates

232
00:09:47,279 --> 00:09:50,399
for more than two years

233
00:09:50,399 --> 00:09:52,399
so overall we showed that browser

234
00:09:52,399 --> 00:09:54,720
policies are improving but there's still

235
00:09:54,720 --> 00:09:56,800
a lot a large room to do further

236
00:09:56,800 --> 00:09:59,359
improvements

237
00:09:59,519 --> 00:10:01,360
so the question is are there real world

238
00:10:01,360 --> 00:10:03,519
idn's that impersonate real world

239
00:10:03,519 --> 00:10:04,560
websites

240
00:10:04,560 --> 00:10:06,720
uh so the short answer is yes right so

241
00:10:06,720 --> 00:10:09,680
we did a quick analysis uh over the com

242
00:10:09,680 --> 00:10:13,440
zoom file uh and analyzed 500 400

243
00:10:13,440 --> 00:10:16,640
million domain names we found 900 000

244
00:10:16,640 --> 00:10:20,480
idns and about 1 800 of them are

245
00:10:20,480 --> 00:10:23,440
impersonating the top 10k websites

246
00:10:23,440 --> 00:10:25,519
so here are some examples

247
00:10:25,519 --> 00:10:28,240
so we threw those domains into

248
00:10:28,240 --> 00:10:30,240
the latest version of different browsers

249
00:10:30,240 --> 00:10:32,800
and found that they were very successful

250
00:10:32,800 --> 00:10:34,480
by passing their existing defense

251
00:10:34,480 --> 00:10:35,839
policies

252
00:10:35,839 --> 00:10:39,519
so the results confirms our concerns

253
00:10:39,519 --> 00:10:42,399
so we also had a user study to study

254
00:10:42,399 --> 00:10:44,399
whether users can

255
00:10:44,399 --> 00:10:47,680
effectively recognize homograph idn's

256
00:10:47,680 --> 00:10:50,320
so we found that homograph idn's kind

257
00:10:50,320 --> 00:10:52,880
that already bypass the chrome defense

258
00:10:52,880 --> 00:10:55,279
are still deceptive to users

259
00:10:55,279 --> 00:10:57,120
so further details can be found in the

260
00:10:57,120 --> 00:10:58,800
paper

261
00:10:58,800 --> 00:11:01,360
so in terms of color measures we have a

262
00:11:01,360 --> 00:11:04,160
few ideas so for example you can

263
00:11:04,160 --> 00:11:07,440
specifically fail adding new policies to

264
00:11:07,440 --> 00:11:10,560
to fix or to patch the failed cases

265
00:11:10,560 --> 00:11:12,480
however it is difficult to guarantee

266
00:11:12,480 --> 00:11:15,839
completeness using this ad-hoc approach

267
00:11:15,839 --> 00:11:18,560
another idea is to use visual similarity

268
00:11:18,560 --> 00:11:21,040
metrics like perceptual hashing to

269
00:11:21,040 --> 00:11:23,519
systematically detect impersonation

270
00:11:23,519 --> 00:11:26,399
against a wider range of domain name

271
00:11:26,399 --> 00:11:29,360
the problem is scalability and it's hard

272
00:11:29,360 --> 00:11:31,200
to do this in real time

273
00:11:31,200 --> 00:11:34,000
if you wanted to cover a large range of

274
00:11:34,000 --> 00:11:36,800
legitimate domain names

275
00:11:36,800 --> 00:11:38,320
so there might be a trade-off we can

276
00:11:38,320 --> 00:11:41,440
make so for example we can disable idns

277
00:11:41,440 --> 00:11:42,480
by default

278
00:11:42,480 --> 00:11:45,839
and only show the unicode of the idn

279
00:11:45,839 --> 00:11:48,079
when the languages matches user

280
00:11:48,079 --> 00:11:50,399
specified language in the browser so for

281
00:11:50,399 --> 00:11:51,440
example

282
00:11:51,440 --> 00:11:54,560
i speak english and chinese and i can be

283
00:11:54,560 --> 00:11:57,040
more permissive on idn's with those

284
00:11:57,040 --> 00:12:00,720
languages and more aggressively detect

285
00:12:00,720 --> 00:12:05,120
uh homograph idn's from other languages

286
00:12:05,120 --> 00:12:07,120
so in conclusion

287
00:12:07,120 --> 00:12:09,200
we did an empirical test on major

288
00:12:09,200 --> 00:12:11,920
browser renders and their idn homograph

289
00:12:11,920 --> 00:12:14,560
policies and we found their wares or

290
00:12:14,560 --> 00:12:15,920
weaknesses

291
00:12:15,920 --> 00:12:18,000
we have reported the results to do to

292
00:12:18,000 --> 00:12:21,279
the corresponding browser vendors

293
00:12:21,279 --> 00:12:23,040
so thank you for your time and i'm glad

294
00:12:23,040 --> 00:12:27,160
to take questions from the audience

