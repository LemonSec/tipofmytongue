1
00:00:08,240 --> 00:00:10,480
hello everyone i'm yue doji assistant

2
00:00:10,480 --> 00:00:12,160
professor at the university of north

3
00:00:12,160 --> 00:00:13,440
texas

4
00:00:13,440 --> 00:00:15,200
in this presentation i'm going to share

5
00:00:15,200 --> 00:00:16,800
our work definite

6
00:00:16,800 --> 00:00:18,640
automated system with development to

7
00:00:18,640 --> 00:00:21,119
study the security poster of the android

8
00:00:21,119 --> 00:00:23,600
init subsystem it identified the more

9
00:00:23,600 --> 00:00:26,400
than 80 0d high impact vulnerabilities

10
00:00:26,400 --> 00:00:28,560
in commodity android devices

11
00:00:28,560 --> 00:00:30,480
this work was done while i'm interning

12
00:00:30,480 --> 00:00:32,719
at group wire in collaboration with

13
00:00:32,719 --> 00:00:35,440
mohamed elspin brian johnson and angela

14
00:00:35,440 --> 00:00:37,920
styleroo

15
00:00:37,920 --> 00:00:40,239
here in the booting process of android

16
00:00:40,239 --> 00:00:42,399
there are six major steps starting from

17
00:00:42,399 --> 00:00:44,399
booting the rom to starting the system

18
00:00:44,399 --> 00:00:46,160
server

19
00:00:46,160 --> 00:00:47,920
among them the initial process is a

20
00:00:47,920 --> 00:00:50,320
common process in linux systems and is

21
00:00:50,320 --> 00:00:52,640
the first user space process launched by

22
00:00:52,640 --> 00:00:55,360
the corner and has high privileges

23
00:00:55,360 --> 00:00:57,840
different from linux the android init

24
00:00:57,840 --> 00:01:00,160
acts as the system property store and

25
00:01:00,160 --> 00:01:03,920
supports any in its routines

26
00:01:03,920 --> 00:01:06,640
dna routines include action and service

27
00:01:06,640 --> 00:01:08,640
they are defined in resource files with

28
00:01:08,640 --> 00:01:11,280
extension rc following the documented

29
00:01:11,280 --> 00:01:13,360
android nail language

30
00:01:13,360 --> 00:01:16,240
this is an action example

31
00:01:16,240 --> 00:01:17,920
it has a trigger with two system

32
00:01:17,920 --> 00:01:19,840
properties

33
00:01:19,840 --> 00:01:21,680
the commands in the action body will be

34
00:01:21,680 --> 00:01:24,640
executed when property a equals 1 and

35
00:01:24,640 --> 00:01:27,119
property b equals 2.

36
00:01:27,119 --> 00:01:29,520
and this is a service example it calls

37
00:01:29,520 --> 00:01:32,000
executable with optional modifiers

38
00:01:32,000 --> 00:01:34,159
android any routines can be customized

39
00:01:34,159 --> 00:01:36,640
by windows and only the system apps or

40
00:01:36,640 --> 00:01:41,360
processes can set system properties

41
00:01:41,360 --> 00:01:43,280
let's look at how android networks in

42
00:01:43,280 --> 00:01:45,439
more detail android init and the

43
00:01:45,439 --> 00:01:47,040
routines are running with high

44
00:01:47,040 --> 00:01:49,520
privileges

45
00:01:49,520 --> 00:01:51,840
android allows system apps and a need to

46
00:01:51,840 --> 00:01:54,479
extend information by reading or writing

47
00:01:54,479 --> 00:01:56,799
system properties

48
00:01:56,799 --> 00:01:58,719
once the properties are written and the

49
00:01:58,719 --> 00:02:00,479
corresponding trigger condition is

50
00:02:00,479 --> 00:02:03,280
matched android init can execute in this

51
00:02:03,280 --> 00:02:05,840
routine at any point while the system is

52
00:02:05,840 --> 00:02:06,799
running

53
00:02:06,799 --> 00:02:09,119
this allows a system app to easily

54
00:02:09,119 --> 00:02:12,879
perform high privileged operations

55
00:02:13,040 --> 00:02:15,200
the device winders can configure and

56
00:02:15,200 --> 00:02:17,840
extend the behaviors of android needs by

57
00:02:17,840 --> 00:02:20,239
defining custom initial routines

58
00:02:20,239 --> 00:02:22,400
this would benefit vendors as they can

59
00:02:22,400 --> 00:02:24,800
leverage the needs routines to easily

60
00:02:24,800 --> 00:02:27,200
adapt to the unique hardware features

61
00:02:27,200 --> 00:02:30,319
diagnostics docking and mounting that

62
00:02:30,319 --> 00:02:32,560
cannot be done directly in a privileged

63
00:02:32,560 --> 00:02:34,800
app

64
00:02:35,120 --> 00:02:37,920
however if the system apps have improper

65
00:02:37,920 --> 00:02:40,239
access control this can expose any

66
00:02:40,239 --> 00:02:43,120
routines to unprivileged apps resulting

67
00:02:43,120 --> 00:02:45,680
in crossing security boundaries as

68
00:02:45,680 --> 00:02:47,920
android init is highly privileged this

69
00:02:47,920 --> 00:02:49,760
will usually cause serious security

70
00:02:49,760 --> 00:02:51,920
issues

71
00:02:51,920 --> 00:02:53,680
we have found numerous stereotype

72
00:02:53,680 --> 00:02:56,400
privilege as collision vulnerabilities

73
00:02:56,400 --> 00:02:58,640
due to customary routines that are

74
00:02:58,640 --> 00:03:02,159
exposed to unprivileged apps

75
00:03:02,159 --> 00:03:04,239
let me show you a real example detected

76
00:03:04,239 --> 00:03:06,159
by our system we assume

77
00:03:06,159 --> 00:03:08,400
attacker-controlled third-party app has

78
00:03:08,400 --> 00:03:10,959
been installed on android device this

79
00:03:10,959 --> 00:03:13,920
attack app would broadcast a message

80
00:03:13,920 --> 00:03:16,239
this message is received by a privileged

81
00:03:16,239 --> 00:03:18,400
system app they're registered to receive

82
00:03:18,400 --> 00:03:21,200
that once received the privilege app

83
00:03:21,200 --> 00:03:24,480
sets the system properties a 2 1 and a b

84
00:03:24,480 --> 00:03:26,080
to 2.

85
00:03:26,080 --> 00:03:27,840
these two system properties trigger the

86
00:03:27,840 --> 00:03:30,000
monitor in each action

87
00:03:30,000 --> 00:03:32,480
later this action will start a service

88
00:03:32,480 --> 00:03:34,480
named wi-fi test

89
00:03:34,480 --> 00:03:37,040
this service will execute the referred

90
00:03:37,040 --> 00:03:38,159
script

91
00:03:38,159 --> 00:03:40,319
finally the script would execute the

92
00:03:40,319 --> 00:03:42,560
setting for zero command

93
00:03:42,560 --> 00:03:45,440
this command disables selinux which

94
00:03:45,440 --> 00:03:47,920
disables primary system defenses

95
00:03:47,920 --> 00:03:50,000
including access control enforcement

96
00:03:50,000 --> 00:03:53,840
between processes on the system

97
00:03:54,159 --> 00:03:56,480
to find these vulnerabilities we design

98
00:03:56,480 --> 00:03:58,799
a definite and automated system to

99
00:03:58,799 --> 00:04:00,879
identify exposed security sensitive

100
00:04:00,879 --> 00:04:03,519
inner routines their behaviors and the

101
00:04:03,519 --> 00:04:05,280
apps exposing them

102
00:04:05,280 --> 00:04:07,280
we made the first study on the security

103
00:04:07,280 --> 00:04:10,799
impact for customized android routines

104
00:04:10,799 --> 00:04:13,280
to this end we have confirmed 89 high

105
00:04:13,280 --> 00:04:15,360
impact durative vulnerabilities

106
00:04:15,360 --> 00:04:17,918
including disabling acid linux

107
00:04:17,918 --> 00:04:19,918
sniffing network traffic

108
00:04:19,918 --> 00:04:22,240
reading system logs recording screen and

109
00:04:22,240 --> 00:04:23,440
others

110
00:04:23,440 --> 00:04:24,960
in the following i will discuss the

111
00:04:24,960 --> 00:04:27,280
details of the five steps showing this

112
00:04:27,280 --> 00:04:29,840
figure

113
00:04:30,000 --> 00:04:32,479
given android firmware we first unpack

114
00:04:32,479 --> 00:04:35,520
it and extract any routine definitions

115
00:04:35,520 --> 00:04:37,840
there are various challenges to do that

116
00:04:37,840 --> 00:04:40,639
the firmware has multiple file formats

117
00:04:40,639 --> 00:04:43,040
in its dynamically loads and processes

118
00:04:43,040 --> 00:04:46,080
rc files in the presence in the presence

119
00:04:46,080 --> 00:04:48,479
of extra sources of information

120
00:04:48,479 --> 00:04:50,639
such as system properties preloaded at

121
00:04:50,639 --> 00:04:51,840
boot time

122
00:04:51,840 --> 00:04:54,960
nrc files can also import in in sections

123
00:04:54,960 --> 00:04:56,960
defined in other files

124
00:04:56,960 --> 00:04:58,960
the service and action definitions are

125
00:04:58,960 --> 00:05:02,000
polymorphic for example a service can

126
00:05:02,000 --> 00:05:04,639
override its parent definition by using

127
00:05:04,639 --> 00:05:07,759
an over override a modifier

128
00:05:07,759 --> 00:05:10,000
to solve these changes we integrate

129
00:05:10,000 --> 00:05:12,080
diverse still firmware file format and

130
00:05:12,080 --> 00:05:13,120
packers

131
00:05:13,120 --> 00:05:15,520
we start parsing at the root init rc

132
00:05:15,520 --> 00:05:18,240
file then we nest into the imported

133
00:05:18,240 --> 00:05:20,800
files in depth first order to mimic the

134
00:05:20,800 --> 00:05:23,199
dynamic behaviors of innate

135
00:05:23,199 --> 00:05:25,199
we also keep track of the merge or

136
00:05:25,199 --> 00:05:27,199
override options to handle the

137
00:05:27,199 --> 00:05:30,479
polymorphic definitions

138
00:05:31,120 --> 00:05:32,639
the next step is

139
00:05:32,639 --> 00:05:34,479
collecting traces and estimating

140
00:05:34,479 --> 00:05:36,639
behaviors or immediate routines

141
00:05:36,639 --> 00:05:38,400
there are two major challenges

142
00:05:38,400 --> 00:05:41,039
the first one is how to ask how to

143
00:05:41,039 --> 00:05:43,440
estimate security relevant behavior of

144
00:05:43,440 --> 00:05:46,400
arbitrary programs

145
00:05:46,400 --> 00:05:47,840
the second challenge is from the

146
00:05:47,840 --> 00:05:50,160
multiple formats of the program executed

147
00:05:50,160 --> 00:05:52,639
by any routines including innate

148
00:05:52,639 --> 00:05:55,680
commands ef by elf binaries

149
00:05:55,680 --> 00:05:57,919
and shell scripts

150
00:05:57,919 --> 00:06:00,240
to solve these changes we first extract

151
00:06:00,240 --> 00:06:02,479
the program scroll choices including

152
00:06:02,479 --> 00:06:04,800
hard-coded parameter values

153
00:06:04,800 --> 00:06:07,120
for elf binaries we collect static

154
00:06:07,120 --> 00:06:09,280
choices or called apis on the control

155
00:06:09,280 --> 00:06:12,000
flow graph in adapt's first order

156
00:06:12,000 --> 00:06:14,400
for shell scripts we developed a custom

157
00:06:14,400 --> 00:06:16,960
shell tweezer to draw random collectible

158
00:06:16,960 --> 00:06:18,240
pieces

159
00:06:18,240 --> 00:06:20,160
and this figure shows a simplified

160
00:06:20,160 --> 00:06:22,000
control flow graph

161
00:06:22,000 --> 00:06:24,240
and we could and we could collect the

162
00:06:24,240 --> 00:06:27,199
highlighted nodes as the code choices

163
00:06:27,199 --> 00:06:29,600
following a group of predefined security

164
00:06:29,600 --> 00:06:32,960
sensitive commands and apis

165
00:06:32,960 --> 00:06:35,039
then we would match the interesting

166
00:06:35,039 --> 00:06:37,680
trade sequences using static rules for

167
00:06:37,680 --> 00:06:40,080
this example it will match the rule of

168
00:06:40,080 --> 00:06:42,800
reading logcat logs it tells us this

169
00:06:42,800 --> 00:06:45,360
program is highly likely to move system

170
00:06:45,360 --> 00:06:48,080
logs to sd card that can be further read

171
00:06:48,080 --> 00:06:51,120
by a third-party app

172
00:06:52,639 --> 00:06:54,639
next we model the trigger conditions or

173
00:06:54,639 --> 00:06:57,120
a new routines the challenge here is the

174
00:06:57,120 --> 00:06:59,840
multiple inter dependencies between

175
00:06:59,840 --> 00:07:02,400
actions services android commands and

176
00:07:02,400 --> 00:07:03,759
apis

177
00:07:03,759 --> 00:07:06,319
for this example the action requires two

178
00:07:06,319 --> 00:07:08,720
properties to be triggered it will start

179
00:07:08,720 --> 00:07:11,520
service wi-fi test following arrow 3

180
00:07:11,520 --> 00:07:12,720
which will

181
00:07:12,720 --> 00:07:16,319
execute the shell script afterwards

182
00:07:16,319 --> 00:07:19,120
to capture these dependencies we design

183
00:07:19,120 --> 00:07:21,360
a novel graph structure called a new

184
00:07:21,360 --> 00:07:24,800
dependency graph idg it is a directed

185
00:07:24,800 --> 00:07:28,000
heterogeneous graph in idg nodes

186
00:07:28,000 --> 00:07:30,400
represent any triggers services and

187
00:07:30,400 --> 00:07:32,639
programs called by routines

188
00:07:32,639 --> 00:07:35,199
edges denotes core edges between them

189
00:07:35,199 --> 00:07:36,560
and the conjunction relationships

190
00:07:36,560 --> 00:07:38,880
between contracts and composite

191
00:07:38,880 --> 00:07:41,039
encompassing property trigger

192
00:07:41,039 --> 00:07:43,199
the previous example will be modeled

193
00:07:43,199 --> 00:07:46,240
like this using ibg we can efficiently

194
00:07:46,240 --> 00:07:48,000
model the relationships between

195
00:07:48,000 --> 00:07:50,960
different objects

196
00:07:51,680 --> 00:07:53,919
in the last step we identify the exposed

197
00:07:53,919 --> 00:07:57,360
routines and their behaviors

198
00:07:57,360 --> 00:07:59,759
this requires identifying app call sites

199
00:07:59,759 --> 00:08:02,240
that involve api's citing system

200
00:08:02,240 --> 00:08:04,000
properties and resolving the

201
00:08:04,000 --> 00:08:06,639
corresponding argument values

202
00:08:06,639 --> 00:08:08,960
we also need to detect if a call site is

203
00:08:08,960 --> 00:08:11,680
exposed to unprivileged apps

204
00:08:11,680 --> 00:08:13,599
to solve these challenges we developed a

205
00:08:13,599 --> 00:08:15,599
context and a flow sensitive appropriate

206
00:08:15,599 --> 00:08:18,400
key and a value extraction technique it

207
00:08:18,400 --> 00:08:20,560
can accurately identify the read or

208
00:08:20,560 --> 00:08:22,800
written property keys and the mapping

209
00:08:22,800 --> 00:08:24,319
between each property key and its

210
00:08:24,319 --> 00:08:27,680
corresponding value we then identify the

211
00:08:27,680 --> 00:08:29,440
exposed routines by querying the

212
00:08:29,440 --> 00:08:32,479
reachability from ipc aging points to

213
00:08:32,479 --> 00:08:36,159
call size and control flow graphs

214
00:08:36,240 --> 00:08:39,839
we performed a large scale study on 259

215
00:08:39,839 --> 00:08:42,479
stock android firmware images from 8 to

216
00:08:42,479 --> 00:08:46,640
11 covering 21 top windows worldwide

217
00:08:46,640 --> 00:08:49,600
these images contained a total of 65 000

218
00:08:49,600 --> 00:08:55,360
system apps with an average of 262 there

219
00:08:55,360 --> 00:08:57,120
now let's look at the identified indian

220
00:08:57,120 --> 00:08:59,519
routines this chart should be identified

221
00:08:59,519 --> 00:09:02,080
in routines performance based on android

222
00:09:02,080 --> 00:09:03,120
wardens

223
00:09:03,120 --> 00:09:06,080
in summary there are 223 new routines

224
00:09:06,080 --> 00:09:07,560
performed where

225
00:09:07,560 --> 00:09:10,480
66 percent of them are custom

226
00:09:10,480 --> 00:09:12,720
this shows a great extent to which

227
00:09:12,720 --> 00:09:15,760
vendors customize the initial teams to

228
00:09:15,760 --> 00:09:18,240
introduce new functionalities

229
00:09:18,240 --> 00:09:20,240
the chart on the right shows the exposed

230
00:09:20,240 --> 00:09:22,320
new routines perform there on the

231
00:09:22,320 --> 00:09:24,640
average each firmware exposed each

232
00:09:24,640 --> 00:09:25,839
routines

233
00:09:25,839 --> 00:09:28,000
two of them are security sensitive and

234
00:09:28,000 --> 00:09:31,920
all of them are custom by the wonders

235
00:09:31,920 --> 00:09:33,920
this chart shows the breakdown of the

236
00:09:33,920 --> 00:09:36,720
identified exposed behaviors group

237
00:09:36,720 --> 00:09:39,080
grouped by behavior category there are

238
00:09:39,080 --> 00:09:42,240
515 exposed sensitive functionalities

239
00:09:42,240 --> 00:09:43,440
which are from

240
00:09:43,440 --> 00:09:47,680
430 unique routines they cover 173

241
00:09:47,680 --> 00:09:51,120
unique apps spanning 101 firmware from

242
00:09:51,120 --> 00:09:53,920
13 windows

243
00:09:56,000 --> 00:09:58,080
we further manually inspected the

244
00:09:58,080 --> 00:09:59,839
routines to verify their potential

245
00:09:59,839 --> 00:10:01,600
security impact

246
00:10:01,600 --> 00:10:04,720
this chart summarizes the outcome so far

247
00:10:04,720 --> 00:10:07,279
we have verified 89 vulnerabilities in

248
00:10:07,279 --> 00:10:10,320
34 unique apps from 30 firmware or 6

249
00:10:10,320 --> 00:10:11,279
windows

250
00:10:11,279 --> 00:10:13,839
we have developed and tested 59 proof of

251
00:10:13,839 --> 00:10:14,959
concepts

252
00:10:14,959 --> 00:10:16,640
three vendors have confirmed our

253
00:10:16,640 --> 00:10:19,360
findings covering 49 vulnerabilities in

254
00:10:19,360 --> 00:10:21,120
11 firmware

255
00:10:21,120 --> 00:10:25,519
our disclosure process is still ongoing

256
00:10:25,600 --> 00:10:27,519
the discovery vulnerabilities have high

257
00:10:27,519 --> 00:10:30,560
impact he released some of the impacts

258
00:10:30,560 --> 00:10:32,480
including disabling system-wide

259
00:10:32,480 --> 00:10:34,320
mandatory access control

260
00:10:34,320 --> 00:10:36,240
executing arbitrary code with high

261
00:10:36,240 --> 00:10:37,519
priorities

262
00:10:37,519 --> 00:10:39,519
spying on screen content and user

263
00:10:39,519 --> 00:10:42,640
activity and others

264
00:10:42,640 --> 00:10:44,720
so in conclusion we systematically

265
00:10:44,720 --> 00:10:47,519
studied the security impact of android

266
00:10:47,519 --> 00:10:48,720
routines

267
00:10:48,720 --> 00:10:51,120
we performed an automated and practical

268
00:10:51,120 --> 00:10:52,320
analysis

269
00:10:52,320 --> 00:10:54,560
we have identified our rise high impact

270
00:10:54,560 --> 00:10:58,399
0ds in android 8 to 11 devices

271
00:10:58,399 --> 00:11:00,240
more details can be found in our paper

272
00:11:00,240 --> 00:11:02,959
regarding the routines exposed via the

273
00:11:02,959 --> 00:11:06,160
gui raw samples vulnerability details

274
00:11:06,160 --> 00:11:07,519
and others

275
00:11:07,519 --> 00:11:09,600
please feel free to contact us thank you

276
00:11:09,600 --> 00:11:12,760
for listening

277
00:11:20,160 --> 00:11:22,240
you

