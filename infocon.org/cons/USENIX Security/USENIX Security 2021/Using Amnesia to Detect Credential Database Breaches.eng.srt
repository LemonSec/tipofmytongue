1
00:00:08,800 --> 00:00:11,519
hello my name is kobi one i'm a phd

2
00:00:11,519 --> 00:00:13,200
student in the department of computer

3
00:00:13,200 --> 00:00:15,759
science at unc chapel hill

4
00:00:15,759 --> 00:00:18,160
today i'm going to introduce amnesia a

5
00:00:18,160 --> 00:00:19,920
framework to detect produce database

6
00:00:19,920 --> 00:00:21,039
breaches

7
00:00:21,039 --> 00:00:23,039
this is joint work with my advisor

8
00:00:23,039 --> 00:00:25,119
michael rider

9
00:00:25,119 --> 00:00:27,119
passwords leaked from data breaches have

10
00:00:27,119 --> 00:00:29,519
been a major threat to web security

11
00:00:29,519 --> 00:00:31,599
according to a recent verizon report

12
00:00:31,599 --> 00:00:34,000
nearly 4 000 database breaches happened

13
00:00:34,000 --> 00:00:36,480
globally between november 2018 and

14
00:00:36,480 --> 00:00:38,399
october 2019

15
00:00:38,399 --> 00:00:41,040
and 60 of those database breaches leaked

16
00:00:41,040 --> 00:00:42,800
credentials

17
00:00:42,800 --> 00:00:45,440
recent reports by ibm show that an

18
00:00:45,440 --> 00:00:47,520
organization will experience a data

19
00:00:47,520 --> 00:00:49,440
breach in the next two years with

20
00:00:49,440 --> 00:00:52,079
likelihood about 30 percent

21
00:00:52,079 --> 00:00:54,960
and it takes on average 207 days to

22
00:00:54,960 --> 00:00:56,640
identify a breach

23
00:00:56,640 --> 00:00:59,440
in 2013 jewels and arrivals proposed the

24
00:00:59,440 --> 00:01:01,199
honeyworth scheme to detect the breach

25
00:01:01,199 --> 00:01:02,879
of password databases

26
00:01:02,879 --> 00:01:04,400
the general idea of the honeyworth

27
00:01:04,400 --> 00:01:06,560
scheme is to hide the user's password

28
00:01:06,560 --> 00:01:08,880
with a set of decoy passwords called

29
00:01:08,880 --> 00:01:10,240
honeyworth

30
00:01:10,240 --> 00:01:12,560
these honeyworks are generated in a way

31
00:01:12,560 --> 00:01:14,320
that if the passwords are linked from

32
00:01:14,320 --> 00:01:16,320
the database breach it should be

33
00:01:16,320 --> 00:01:17,920
difficult for the attacker to figure out

34
00:01:17,920 --> 00:01:20,560
which is the real user password

35
00:01:20,560 --> 00:01:22,799
to tell if a submit password is real or

36
00:01:22,799 --> 00:01:25,360
to call it during authentication the

37
00:01:25,360 --> 00:01:27,520
website is to store the index of the

38
00:01:27,520 --> 00:01:29,439
real password somewhere at the web

39
00:01:29,439 --> 00:01:30,640
server

40
00:01:30,640 --> 00:01:32,320
during each logging attempt if the

41
00:01:32,320 --> 00:01:34,159
submit password is one of the passwords

42
00:01:34,159 --> 00:01:36,400
stored in the database the website could

43
00:01:36,400 --> 00:01:38,560
compare its index with a real password

44
00:01:38,560 --> 00:01:40,479
index to determine if the submit

45
00:01:40,479 --> 00:01:43,040
password is honey word or not

46
00:01:43,040 --> 00:01:45,200
however if the index is stored along

47
00:01:45,200 --> 00:01:46,720
with the user's passwords in the

48
00:01:46,720 --> 00:01:49,280
database the database bridge would also

49
00:01:49,280 --> 00:01:50,640
link the index

50
00:01:50,640 --> 00:01:52,079
so the attacker could learn which

51
00:01:52,079 --> 00:01:53,759
password is real

52
00:01:53,759 --> 00:01:56,560
to deal with this problem jose rivas

53
00:01:56,560 --> 00:01:58,560
honeywell proposal uses a second

54
00:01:58,560 --> 00:02:00,880
component called honeychecker to store

55
00:02:00,880 --> 00:02:02,560
the index of their real password for

56
00:02:02,560 --> 00:02:04,479
that user and assumes that the

57
00:02:04,479 --> 00:02:06,320
honeychecker remains secure even if the

58
00:02:06,320 --> 00:02:08,800
passwords are linked since the real

59
00:02:08,800 --> 00:02:11,038
password index is well protected at the

60
00:02:11,038 --> 00:02:13,840
secure honeychoker the breach attacker

61
00:02:13,840 --> 00:02:16,000
is unable to figure out which password

62
00:02:16,000 --> 00:02:18,720
is real without access to the index

63
00:02:18,720 --> 00:02:20,720
and a submitted password with a wrong

64
00:02:20,720 --> 00:02:23,040
index would trigger a rich alert

65
00:02:23,040 --> 00:02:25,200
it's not hard to see that the detection

66
00:02:25,200 --> 00:02:27,440
power of the honeywood scheme relies on

67
00:02:27,440 --> 00:02:29,520
the assumption that the honey checker is

68
00:02:29,520 --> 00:02:30,959
secure

69
00:02:30,959 --> 00:02:32,800
this strong assumption limits the

70
00:02:32,800 --> 00:02:35,280
original honeywell to be practical in

71
00:02:35,280 --> 00:02:37,120
the sense that if the website could

72
00:02:37,120 --> 00:02:39,200
deploy such a secure component why

73
00:02:39,200 --> 00:02:40,560
wouldn't the website directly store

74
00:02:40,560 --> 00:02:42,640
user's password at the secure component

75
00:02:42,640 --> 00:02:44,000
in the first place

76
00:02:44,000 --> 00:02:46,239
against possible breaches without the

77
00:02:46,239 --> 00:02:48,800
necessity of using any decoy password at

78
00:02:48,800 --> 00:02:52,400
all in other words the idea of using a

79
00:02:52,400 --> 00:02:54,879
secure component of the web server to

80
00:02:54,879 --> 00:02:56,959
protect secrets about user password to

81
00:02:56,959 --> 00:02:58,959
defend or detect password breaches

82
00:02:58,959 --> 00:03:00,720
already assumed away the original

83
00:03:00,720 --> 00:03:02,000
problem

84
00:03:02,000 --> 00:03:04,720
so now the question is can we use decoy

85
00:03:04,720 --> 00:03:06,959
passwords to detect credence database

86
00:03:06,959 --> 00:03:08,959
breaches without relying on any

87
00:03:08,959 --> 00:03:11,200
persistently stored secrets

88
00:03:11,200 --> 00:03:13,440
the answer is yes the first major

89
00:03:13,440 --> 00:03:16,000
contribution of our paper is a new

90
00:03:16,000 --> 00:03:18,640
honeyworth scheme to achieve this

91
00:03:18,640 --> 00:03:20,159
the second major contribution of our

92
00:03:20,159 --> 00:03:23,280
paper is related to accruing stuffing

93
00:03:23,280 --> 00:03:25,280
credential stuffing has become one of

94
00:03:25,280 --> 00:03:27,760
the effective attacks to steal user

95
00:03:27,760 --> 00:03:28,799
accounts

96
00:03:28,799 --> 00:03:30,640
during the attack an attacker tries to

97
00:03:30,640 --> 00:03:32,400
log in with a breach of credentials at

98
00:03:32,400 --> 00:03:34,400
other sites and it would get access to

99
00:03:34,400 --> 00:03:36,319
the user's accounts if the user reuses

100
00:03:36,319 --> 00:03:38,959
their passwords across those sites

101
00:03:38,959 --> 00:03:41,040
what's worse credential stuffing could

102
00:03:41,040 --> 00:03:43,120
be very helpful to avoid detection by

103
00:03:43,120 --> 00:03:44,720
the honeywell system

104
00:03:44,720 --> 00:03:46,319
for example if the attacker tries to

105
00:03:46,319 --> 00:03:48,080
lock in at site b with the password

106
00:03:48,080 --> 00:03:50,879
delete from site a and if the user alice

107
00:03:50,879 --> 00:03:53,680
reuses their passwords then a successful

108
00:03:53,680 --> 00:03:55,840
login ad site b would indicate that the

109
00:03:55,840 --> 00:03:57,920
submitted password is the real password

110
00:03:57,920 --> 00:04:00,560
for alice's account at site a

111
00:04:00,560 --> 00:04:02,319
the attacker can then submit real

112
00:04:02,319 --> 00:04:04,799
passwords to a site a without risk of

113
00:04:04,799 --> 00:04:07,840
being detected by its honeywell scheme

114
00:04:07,840 --> 00:04:09,920
in our paper we propose a framework to

115
00:04:09,920 --> 00:04:12,159
deal with the two obstacles the existing

116
00:04:12,159 --> 00:04:14,959
honeyworks game is facing today

117
00:04:14,959 --> 00:04:16,639
first our framework can detect

118
00:04:16,639 --> 00:04:18,399
credential database breaches without

119
00:04:18,399 --> 00:04:21,519
relying on any persistent secret state

120
00:04:21,519 --> 00:04:23,440
our framework can also detect credential

121
00:04:23,440 --> 00:04:25,759
database bridges even if the attacker

122
00:04:25,759 --> 00:04:27,600
attempts to avoid detection by stuffing

123
00:04:27,600 --> 00:04:30,479
the bridge passwords at other websites

124
00:04:30,479 --> 00:04:33,360
here we introduce our framework amnesia

125
00:04:33,360 --> 00:04:36,000
the reason we name it amnesia is that it

126
00:04:36,000 --> 00:04:38,080
can help websites to detect password

127
00:04:38,080 --> 00:04:40,400
database breaches without relying on any

128
00:04:40,400 --> 00:04:42,479
persistently stored secrets in other

129
00:04:42,479 --> 00:04:44,720
words amnesia allows the attacker to

130
00:04:44,720 --> 00:04:46,720
learn all persistently stored secrets at

131
00:04:46,720 --> 00:04:48,800
the website but they still can detect

132
00:04:48,800 --> 00:04:50,320
the breach

133
00:04:50,320 --> 00:04:52,160
like the original honeywell scheme

134
00:04:52,160 --> 00:04:54,479
amnesia requires the website to store

135
00:04:54,479 --> 00:04:56,400
the real user password along with these

136
00:04:56,400 --> 00:04:58,000
decal passwords

137
00:04:58,000 --> 00:05:00,320
but instead of storing the index of the

138
00:05:00,320 --> 00:05:02,800
real password somewhere at the server

139
00:05:02,800 --> 00:05:04,800
the website executes the following

140
00:05:04,800 --> 00:05:06,160
marking process

141
00:05:06,160 --> 00:05:08,800
after each successful login

142
00:05:08,800 --> 00:05:11,600
it marks the last submitted password and

143
00:05:11,600 --> 00:05:13,840
marks each of the other passwords with a

144
00:05:13,840 --> 00:05:15,600
preset probability

145
00:05:15,600 --> 00:05:17,759
here you can think marking as a fully

146
00:05:17,759 --> 00:05:21,120
associated bit to one for that password

147
00:05:21,120 --> 00:05:23,759
during a login if the submit password is

148
00:05:23,759 --> 00:05:25,280
one of the marked passwords in the

149
00:05:25,280 --> 00:05:27,680
database then the login is successful

150
00:05:27,680 --> 00:05:29,520
with no bridge alert

151
00:05:29,520 --> 00:05:32,000
however if the submit password is one of

152
00:05:32,000 --> 00:05:34,720
the unmarked passwords amnesia will

153
00:05:34,720 --> 00:05:36,880
report a bridge alert

154
00:05:36,880 --> 00:05:39,440
so the core idea of amnesia is that

155
00:05:39,440 --> 00:05:42,080
normally the user is expected to submit

156
00:05:42,080 --> 00:05:44,160
the real password so the real password

157
00:05:44,160 --> 00:05:46,479
should remain marked most of the time

158
00:05:46,479 --> 00:05:48,320
but a marked honey word submitted by

159
00:05:48,320 --> 00:05:50,560
attacker which is a password for in this

160
00:05:50,560 --> 00:05:51,600
example

161
00:05:51,600 --> 00:05:52,880
would affect the probability

162
00:05:52,880 --> 00:05:55,120
distribution of the real password being

163
00:05:55,120 --> 00:05:57,919
marked after this login

164
00:05:57,919 --> 00:06:00,639
so after this tag the honeyword password

165
00:06:00,639 --> 00:06:02,880
4 will remain marked but with some

166
00:06:02,880 --> 00:06:05,680
probability the real password password 2

167
00:06:05,680 --> 00:06:07,600
will left unmarked

168
00:06:07,600 --> 00:06:09,440
then the user's next login with a real

169
00:06:09,440 --> 00:06:12,000
user password will set the alarm off

170
00:06:12,000 --> 00:06:14,160
because it's unmarked

171
00:06:14,160 --> 00:06:16,240
in our paper we use probabilistic model

172
00:06:16,240 --> 00:06:19,280
checking to evaluate how amnesia would

173
00:06:19,280 --> 00:06:21,199
accelerate discovery of a credential

174
00:06:21,199 --> 00:06:22,960
database breach

175
00:06:22,960 --> 00:06:24,560
this has occurred from our model

176
00:06:24,560 --> 00:06:26,160
checking experience

177
00:06:26,160 --> 00:06:29,919
the y-axis is benefit brought by amnesia

178
00:06:29,919 --> 00:06:32,479
informally benefit is the expected

179
00:06:32,479 --> 00:06:34,880
fraction of time that amnesia deprives

180
00:06:34,880 --> 00:06:37,120
the attacker from accessing user

181
00:06:37,120 --> 00:06:40,240
accounts before discovery of the breach

182
00:06:40,240 --> 00:06:41,919
the x-axis is the number of the

183
00:06:41,919 --> 00:06:45,759
honeywoods deployed for a user count

184
00:06:45,759 --> 00:06:47,840
the curve shows the benefit as a

185
00:06:47,840 --> 00:06:49,919
function of number of honey words for

186
00:06:49,919 --> 00:06:51,440
user counts

187
00:06:51,440 --> 00:06:53,360
we can see from the graph that the

188
00:06:53,360 --> 00:06:56,160
benefit can reach up to 0.5 under

189
00:06:56,160 --> 00:06:58,319
certain parameterization if the number

190
00:06:58,319 --> 00:07:01,440
of honeywoods is about 200. this means

191
00:07:01,440 --> 00:07:03,440
that amnesia can deprive half of the

192
00:07:03,440 --> 00:07:05,759
attacker's time to access user's

193
00:07:05,759 --> 00:07:07,280
accounts with the leaked passwords

194
00:07:07,280 --> 00:07:08,880
before detected

195
00:07:08,880 --> 00:07:10,560
please refer to our paper for more

196
00:07:10,560 --> 00:07:13,759
detail about the experience

197
00:07:13,759 --> 00:07:15,440
what needs to be mentioned here is that

198
00:07:15,440 --> 00:07:17,680
our model checking experience is

199
00:07:17,680 --> 00:07:20,479
inconservative in the sense that first

200
00:07:20,479 --> 00:07:23,120
the evaluation in our paper is for one

201
00:07:23,120 --> 00:07:24,639
account only

202
00:07:24,639 --> 00:07:26,400
but in practice the attacker would

203
00:07:26,400 --> 00:07:28,800
attack more accounts and one mistake at

204
00:07:28,800 --> 00:07:31,120
any of them will trigger a bridge alert

205
00:07:31,120 --> 00:07:33,120
also the multi-checking experiment

206
00:07:33,120 --> 00:07:35,360
computes benefit for the best possible

207
00:07:35,360 --> 00:07:37,280
attack strategy

208
00:07:37,280 --> 00:07:39,520
the second major part of our work is to

209
00:07:39,520 --> 00:07:41,360
extend amnesia to detect password

210
00:07:41,360 --> 00:07:43,840
database breaches against attackers who

211
00:07:43,840 --> 00:07:45,680
attempt to stuff the british honeywoods

212
00:07:45,680 --> 00:07:48,240
at other sites

213
00:07:48,240 --> 00:07:50,720
to deal with stuffing of honeywoods we

214
00:07:50,720 --> 00:07:52,800
propose a framework that can convert

215
00:07:52,800 --> 00:07:55,680
remote stuffing to local online gassing

216
00:07:55,680 --> 00:07:57,599
in other words while proper

217
00:07:57,599 --> 00:07:59,919
communication between site a and b the

218
00:07:59,919 --> 00:08:01,680
attackers logging on tamp set site b

219
00:08:01,680 --> 00:08:03,759
with the leaked password from site a can

220
00:08:03,759 --> 00:08:05,360
be seen as if the attacker directly

221
00:08:05,360 --> 00:08:09,199
tried those passwords locally sia

222
00:08:09,199 --> 00:08:11,759
in our paper we call site a the target

223
00:08:11,759 --> 00:08:14,720
and site b the monitor sysa is the

224
00:08:14,720 --> 00:08:16,879
attacker's bridge target while site b is

225
00:08:16,879 --> 00:08:19,120
monitoring for site a about its

226
00:08:19,120 --> 00:08:21,039
honeyworth submissions

227
00:08:21,039 --> 00:08:23,199
to protect account security at both

228
00:08:23,199 --> 00:08:26,000
parties and avoid false alerts we also

229
00:08:26,000 --> 00:08:27,840
specify the following security goals of

230
00:08:27,840 --> 00:08:29,120
our framework

231
00:08:29,120 --> 00:08:30,879
first of all the framework should not

232
00:08:30,879 --> 00:08:32,479
leak any of the target's stored

233
00:08:32,479 --> 00:08:34,399
passwords to the monitor

234
00:08:34,399 --> 00:08:36,559
secondly the framework should not leak

235
00:08:36,559 --> 00:08:39,039
the submit password as monitor to target

236
00:08:39,039 --> 00:08:41,120
if the password is not one of the target

237
00:08:41,120 --> 00:08:43,039
stored passwords

238
00:08:43,039 --> 00:08:45,120
also the framework should not allow the

239
00:08:45,120 --> 00:08:48,399
monitor to trigger a false detection if

240
00:08:48,399 --> 00:08:51,279
no breach has happened to target

241
00:08:51,279 --> 00:08:53,360
in our framework we use a two-party

242
00:08:53,360 --> 00:08:55,440
secure computation protocol named

243
00:08:55,440 --> 00:08:57,600
private containment retrieval protocol

244
00:08:57,600 --> 00:08:59,760
or pcr protocol to achieve the

245
00:08:59,760 --> 00:09:02,480
functionality and security goals

246
00:09:02,480 --> 00:09:05,120
during execution of a pcr protocol

247
00:09:05,120 --> 00:09:07,040
target inputs a set of passwords where

248
00:09:07,040 --> 00:09:09,360
monitor inputs a password

249
00:09:09,360 --> 00:09:11,120
if the target's input set contains

250
00:09:11,120 --> 00:09:13,360
monitors in password then the target

251
00:09:13,360 --> 00:09:15,040
could retrieve the monitor symbol

252
00:09:15,040 --> 00:09:16,959
otherwise it learns nothing

253
00:09:16,959 --> 00:09:19,680
monitor learns nothing in either case

254
00:09:19,680 --> 00:09:22,240
in our paper we propose a pcr protocol

255
00:09:22,240 --> 00:09:24,000
construction that is tailored for our

256
00:09:24,000 --> 00:09:25,040
framework

257
00:09:25,040 --> 00:09:26,959
it's based on partially homomorphic

258
00:09:26,959 --> 00:09:29,200
encryption and a cocoa filters and

259
00:09:29,200 --> 00:09:32,080
requires only one round of interaction

260
00:09:32,080 --> 00:09:33,920
this pcr protocol meets all three

261
00:09:33,920 --> 00:09:35,839
security requirements and have some

262
00:09:35,839 --> 00:09:37,120
performance benefits that i will

263
00:09:37,120 --> 00:09:39,279
introduce later

264
00:09:39,279 --> 00:09:40,959
to convert remote stuffing to local

265
00:09:40,959 --> 00:09:43,519
online gassing target first generates a

266
00:09:43,519 --> 00:09:46,800
pcr query on all the store passwords and

267
00:09:46,800 --> 00:09:48,880
send the code to the monitor after

268
00:09:48,880 --> 00:09:51,120
receiving the pcr request the monitor

269
00:09:51,120 --> 00:09:52,959
generates a pcl response for each

270
00:09:52,959 --> 00:09:54,560
password submitted in the field logging

271
00:09:54,560 --> 00:09:56,880
attempt at monitor then the monitor

272
00:09:56,880 --> 00:09:59,279
sends the pcr response back to target

273
00:09:59,279 --> 00:10:01,920
upon receiving a pcr response target

274
00:10:01,920 --> 00:10:03,839
tries to retrieve the submitted password

275
00:10:03,839 --> 00:10:06,000
in the response if the submit password

276
00:10:06,000 --> 00:10:07,920
is in target's password set

277
00:10:07,920 --> 00:10:09,519
then the target will be able to retrieve

278
00:10:09,519 --> 00:10:10,320
it

279
00:10:10,320 --> 00:10:12,560
then the target just treats the password

280
00:10:12,560 --> 00:10:14,480
as a submit password received from a

281
00:10:14,480 --> 00:10:17,120
local login and run the marking process

282
00:10:17,120 --> 00:10:18,480
accordingly

283
00:10:18,480 --> 00:10:21,200
in our paper we empirically evaluated

284
00:10:21,200 --> 00:10:24,079
the performance of our pcr protocol

285
00:10:24,079 --> 00:10:26,240
considering that the pcr query message

286
00:10:26,240 --> 00:10:28,160
is a one-time message during monitored

287
00:10:28,160 --> 00:10:29,120
setup

288
00:10:29,120 --> 00:10:31,360
while the pcr response is generated in

289
00:10:31,360 --> 00:10:33,519
per locking level so it would become the

290
00:10:33,519 --> 00:10:35,839
bottleneck more easily in this talk i

291
00:10:35,839 --> 00:10:37,200
will mainly introduce performance

292
00:10:37,200 --> 00:10:39,440
evaluation results related to response

293
00:10:39,440 --> 00:10:41,200
messages

294
00:10:41,200 --> 00:10:42,959
the pcr response generation time for

295
00:10:42,959 --> 00:10:44,959
monitor is constant in the number of

296
00:10:44,959 --> 00:10:46,399
targets input password

297
00:10:46,399 --> 00:10:48,399
which is the number hundred words plus

298
00:10:48,399 --> 00:10:49,200
one

299
00:10:49,200 --> 00:10:51,519
for example in our experiment it only

300
00:10:51,519 --> 00:10:53,200
takes about nine milliseconds for a

301
00:10:53,200 --> 00:10:55,680
single core cpu monitor to generate a

302
00:10:55,680 --> 00:10:58,640
pcr response with equivalently 128-bit

303
00:10:58,640 --> 00:11:00,880
symmetric security pcr response

304
00:11:00,880 --> 00:11:02,800
revealing time for target is also

305
00:11:02,800 --> 00:11:04,560
constant in the number of target stored

306
00:11:04,560 --> 00:11:06,720
passwords if the response does not

307
00:11:06,720 --> 00:11:08,959
include a honeywell which is expected to

308
00:11:08,959 --> 00:11:10,640
be the zero case

309
00:11:10,640 --> 00:11:13,279
in our experiment it only takes about

310
00:11:13,279 --> 00:11:15,839
3.5 milliseconds for a single core cpu

311
00:11:15,839 --> 00:11:18,079
target to determine that a pc response

312
00:11:18,079 --> 00:11:19,680
doesn't include any of its stored

313
00:11:19,680 --> 00:11:21,279
passwords

314
00:11:21,279 --> 00:11:23,680
in terms of communication cost the pcr

315
00:11:23,680 --> 00:11:25,920
response message size is constant in the

316
00:11:25,920 --> 00:11:28,320
number of targets stored passwords for

317
00:11:28,320 --> 00:11:31,120
example the pcr response message size

318
00:11:31,120 --> 00:11:33,200
with the equivalent of 128 bits to

319
00:11:33,200 --> 00:11:36,560
measure security is about 1 kilobytes

320
00:11:36,560 --> 00:11:38,079
please refer to our paper for more

321
00:11:38,079 --> 00:11:39,920
detail about our empirical performance

322
00:11:39,920 --> 00:11:41,360
experience

323
00:11:41,360 --> 00:11:43,040
to summarize this talk

324
00:11:43,040 --> 00:11:45,360
we propose a new honeywell framework

325
00:11:45,360 --> 00:11:47,440
named amnesia which can detect password

326
00:11:47,440 --> 00:11:49,440
database breaches without relying on any

327
00:11:49,440 --> 00:11:51,279
persistent secret state

328
00:11:51,279 --> 00:11:54,000
we also extend amnesia's ability to

329
00:11:54,000 --> 00:11:55,920
detect password database bridges if the

330
00:11:55,920 --> 00:11:58,240
attacker tries to bypass detection by

331
00:11:58,240 --> 00:12:00,000
stuffing bridge honeywoods at other

332
00:12:00,000 --> 00:12:01,120
sites

333
00:12:01,120 --> 00:12:02,959
to achieve this we proposed a new

334
00:12:02,959 --> 00:12:04,880
two-party private containment retrieval

335
00:12:04,880 --> 00:12:07,040
protocol and used the protocol to

336
00:12:07,040 --> 00:12:09,440
convert remote stuffing of honeywell to

337
00:12:09,440 --> 00:12:11,200
local online gassing

338
00:12:11,200 --> 00:12:13,680
our evaluation results showed that

339
00:12:13,680 --> 00:12:15,760
amnesia would substantially shorten the

340
00:12:15,760 --> 00:12:17,360
time between credential database

341
00:12:17,360 --> 00:12:20,320
breaches and their discovery and our pcr

342
00:12:20,320 --> 00:12:22,880
protocol is practical and well suited

343
00:12:22,880 --> 00:12:24,480
for amnesia

344
00:12:24,480 --> 00:12:27,720
thank you

