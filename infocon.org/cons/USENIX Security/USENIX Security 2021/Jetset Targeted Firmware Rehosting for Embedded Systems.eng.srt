1
00:00:12,000 --> 00:00:14,480
hello my name is evan johnson and i'm

2
00:00:14,480 --> 00:00:16,000
presenting the work that me and my

3
00:00:16,000 --> 00:00:17,840
co-authors have done on developing a

4
00:00:17,840 --> 00:00:21,600
targeted approach to firmware re-hosting

5
00:00:21,600 --> 00:00:23,519
many of the standard tools researchers

6
00:00:23,519 --> 00:00:25,039
use to improve the security and

7
00:00:25,039 --> 00:00:27,039
reliability of software systems do not

8
00:00:27,039 --> 00:00:28,640
work out of the box when applied to

9
00:00:28,640 --> 00:00:30,640
embedded systems

10
00:00:30,640 --> 00:00:32,719
platforms like linux and windows have

11
00:00:32,719 --> 00:00:35,120
standard well-documented interfaces for

12
00:00:35,120 --> 00:00:37,200
interacting with hardware

13
00:00:37,200 --> 00:00:39,600
this means that tools just work all you

14
00:00:39,600 --> 00:00:41,200
have to do is obtain the code you want

15
00:00:41,200 --> 00:00:43,440
to test run it within an emulator like

16
00:00:43,440 --> 00:00:45,360
kimu and you can immediately apply

17
00:00:45,360 --> 00:00:46,960
techniques like fuzzing and dynamic

18
00:00:46,960 --> 00:00:48,960
reverse engineering

19
00:00:48,960 --> 00:00:50,640
but the same is not true for embedded

20
00:00:50,640 --> 00:00:52,960
systems when attempting to test embedded

21
00:00:52,960 --> 00:00:54,800
systems obtaining the firmware and

22
00:00:54,800 --> 00:00:56,480
running it inside an emulator is the

23
00:00:56,480 --> 00:00:57,600
easy part

24
00:00:57,600 --> 00:00:59,359
the problems come when that firmware

25
00:00:59,359 --> 00:01:01,440
attempts to perform i o to hardware that

26
00:01:01,440 --> 00:01:04,080
may or may not really be present

27
00:01:04,080 --> 00:01:06,159
this is because unlike platforms like

28
00:01:06,159 --> 00:01:08,320
linux and windows embedded systems often

29
00:01:08,320 --> 00:01:10,479
have non-standard or unique interfaces

30
00:01:10,479 --> 00:01:12,960
to their hardware this makes testing in

31
00:01:12,960 --> 00:01:15,119
an emulation environment more difficult

32
00:01:15,119 --> 00:01:16,960
as it is unlikely that the environment

33
00:01:16,960 --> 00:01:21,040
supports these non-standard interfaces

34
00:01:21,040 --> 00:01:22,479
when we have the firmware running in an

35
00:01:22,479 --> 00:01:24,320
emulator without the hardware the code

36
00:01:24,320 --> 00:01:26,400
will not run properly this is because

37
00:01:26,400 --> 00:01:28,400
the firmware is going to expect to

38
00:01:28,400 --> 00:01:30,479
interact with the peripherals

39
00:01:30,479 --> 00:01:31,759
for example

40
00:01:31,759 --> 00:01:33,439
by reading from the peripherals device

41
00:01:33,439 --> 00:01:34,640
registers

42
00:01:34,640 --> 00:01:36,799
but the emulator will not understand how

43
00:01:36,799 --> 00:01:39,600
to respond in these interactions

44
00:01:39,600 --> 00:01:41,520
this will cause the firmware's execution

45
00:01:41,520 --> 00:01:43,360
to grind to a halt as it waits for

46
00:01:43,360 --> 00:01:45,759
expected behavior inhibiting any attempt

47
00:01:45,759 --> 00:01:48,079
to further analyze the firmware

48
00:01:48,079 --> 00:01:49,680
one solution to this problem is to

49
00:01:49,680 --> 00:01:51,680
handwrite device emulators for each

50
00:01:51,680 --> 00:01:53,040
hardware device that the firmware

51
00:01:53,040 --> 00:01:54,399
interacts with

52
00:01:54,399 --> 00:01:56,159
the primary downside of this approach is

53
00:01:56,159 --> 00:01:57,840
that creating hardware models for each

54
00:01:57,840 --> 00:01:59,360
system you want to test is time

55
00:01:59,360 --> 00:02:01,520
consuming we would like to automate this

56
00:02:01,520 --> 00:02:03,360
process

57
00:02:03,360 --> 00:02:05,200
this is the goal of a new technique

58
00:02:05,200 --> 00:02:07,920
called firmware re-hosting the key idea

59
00:02:07,920 --> 00:02:09,280
of firmware rehosting is to

60
00:02:09,280 --> 00:02:11,520
automatically model the peripherals so

61
00:02:11,520 --> 00:02:13,360
that with only the firmware and perhaps

62
00:02:13,360 --> 00:02:15,360
a bit of auxiliary information you can

63
00:02:15,360 --> 00:02:18,640
successfully emulate the system

64
00:02:18,640 --> 00:02:20,959
so when the firmware attempts to perform

65
00:02:20,959 --> 00:02:24,480
i o the emulator responds correctly even

66
00:02:24,480 --> 00:02:26,560
when no handwritten hardware model is

67
00:02:26,560 --> 00:02:27,840
present

68
00:02:27,840 --> 00:02:30,319
and we can once again test the firmware

69
00:02:30,319 --> 00:02:32,560
the challenge is then how to generate

70
00:02:32,560 --> 00:02:35,360
these synthetic devices

71
00:02:35,360 --> 00:02:37,280
our key insight is that the firmware

72
00:02:37,280 --> 00:02:39,280
implicitly encodes the expected hardware

73
00:02:39,280 --> 00:02:40,959
behavior of the system

74
00:02:40,959 --> 00:02:42,800
when the firmware reads data from a

75
00:02:42,800 --> 00:02:44,000
device

76
00:02:44,000 --> 00:02:45,920
it will perform checks on the values it

77
00:02:45,920 --> 00:02:47,040
receives

78
00:02:47,040 --> 00:02:49,120
if it receives erroneous data it can

79
00:02:49,120 --> 00:02:51,599
trigger a system reset it can hang in an

80
00:02:51,599 --> 00:02:52,879
infinite loop

81
00:02:52,879 --> 00:02:54,400
or it may have to read again from the

82
00:02:54,400 --> 00:02:55,599
device

83
00:02:55,599 --> 00:02:57,680
the expected hardware behavior is then

84
00:02:57,680 --> 00:03:00,159
encoded in what behavior is needed to

85
00:03:00,159 --> 00:03:03,280
make progress within the firmware

86
00:03:03,280 --> 00:03:05,360
specifically progress towards some

87
00:03:05,360 --> 00:03:07,120
particular point within the firmware

88
00:03:07,120 --> 00:03:08,800
that denotes that the firmware has

89
00:03:08,800 --> 00:03:10,640
sufficiently booted

90
00:03:10,640 --> 00:03:12,400
and we often only care about booting to

91
00:03:12,400 --> 00:03:14,560
a particular point within the firmware

92
00:03:14,560 --> 00:03:16,800
for example perhaps we want to fuzz the

93
00:03:16,800 --> 00:03:18,480
firmware's file system

94
00:03:18,480 --> 00:03:20,080
we probably don't need to perfectly

95
00:03:20,080 --> 00:03:22,640
emulate every device to do this we only

96
00:03:22,640 --> 00:03:24,400
need to make sure that they initialize

97
00:03:24,400 --> 00:03:26,239
enough so that we can boot past the file

98
00:03:26,239 --> 00:03:28,480
system initialization

99
00:03:28,480 --> 00:03:31,440
the challenge then becomes how to find a

100
00:03:31,440 --> 00:03:33,920
hardware trace that reaches our point of

101
00:03:33,920 --> 00:03:35,680
interest

102
00:03:35,680 --> 00:03:38,159
to this end we built jet set a tool for

103
00:03:38,159 --> 00:03:40,640
targeted firmware re-hosting jet set

104
00:03:40,640 --> 00:03:42,959
takes as input a firmware binary the

105
00:03:42,959 --> 00:03:45,200
memory map for this binary and its entry

106
00:03:45,200 --> 00:03:46,560
point

107
00:03:46,560 --> 00:03:48,640
in the device inference stage it uses

108
00:03:48,640 --> 00:03:50,959
directed symbolic execution to reach the

109
00:03:50,959 --> 00:03:53,040
analyst's point of interest within the

110
00:03:53,040 --> 00:03:54,239
firmware

111
00:03:54,239 --> 00:03:56,640
then in the device synthesis stage it

112
00:03:56,640 --> 00:03:58,159
takes the constraints inferred during

113
00:03:58,159 --> 00:03:59,760
the inference stage and uses it to

114
00:03:59,760 --> 00:04:02,400
construct a concrete device model

115
00:04:02,400 --> 00:04:04,480
finally this model can be used in an

116
00:04:04,480 --> 00:04:06,879
unmodified emulator like kimu to emulate

117
00:04:06,879 --> 00:04:08,959
the firmware for testing

118
00:04:08,959 --> 00:04:11,040
first i'll explain how jetset infers the

119
00:04:11,040 --> 00:04:12,879
device constraints needed to reach the

120
00:04:12,879 --> 00:04:16,079
point of interest within the firmware

121
00:04:16,079 --> 00:04:18,000
in the device inference stage jet site

122
00:04:18,000 --> 00:04:20,720
uses guided uses a guided depth first

123
00:04:20,720 --> 00:04:22,880
search symbolic execution strategy to

124
00:04:22,880 --> 00:04:24,960
find a path to the boot point within the

125
00:04:24,960 --> 00:04:26,560
firmware

126
00:04:26,560 --> 00:04:28,160
guided depth first search does not

127
00:04:28,160 --> 00:04:29,600
explore all possible device

128
00:04:29,600 --> 00:04:31,919
initialization paths but this is fine

129
00:04:31,919 --> 00:04:33,360
because jesset's goal is not to

130
00:04:33,360 --> 00:04:35,759
construct a complete emulator we just

131
00:04:35,759 --> 00:04:37,600
want to get to the boot point as fast as

132
00:04:37,600 --> 00:04:39,759
possible

133
00:04:39,759 --> 00:04:41,199
this search is guided by a

134
00:04:41,199 --> 00:04:43,040
context-sensitive distance function

135
00:04:43,040 --> 00:04:44,720
based on graph distance within the

136
00:04:44,720 --> 00:04:46,880
firmware's control flow graph

137
00:04:46,880 --> 00:04:48,560
since the distance metric is context

138
00:04:48,560 --> 00:04:50,720
sensitive this means that besides

139
00:04:50,720 --> 00:04:52,479
computing the graph distance within a

140
00:04:52,479 --> 00:04:53,759
single function

141
00:04:53,759 --> 00:04:55,520
jet set can reason about the distance

142
00:04:55,520 --> 00:04:57,280
that it would take to traverse function

143
00:04:57,280 --> 00:04:58,720
calls as well

144
00:04:58,720 --> 00:05:00,400
you can find more discussion about how

145
00:05:00,400 --> 00:05:02,240
jetset calculates this distance function

146
00:05:02,240 --> 00:05:04,400
in our paper

147
00:05:04,400 --> 00:05:06,479
the distance function helps jet set find

148
00:05:06,479 --> 00:05:08,400
the shortest path to the boot point but

149
00:05:08,400 --> 00:05:10,000
the shortest path is not always the

150
00:05:10,000 --> 00:05:11,199
correct one

151
00:05:11,199 --> 00:05:13,360
when jet set reaches a failure to boot

152
00:05:13,360 --> 00:05:15,680
for example if it causes a system reboot

153
00:05:15,680 --> 00:05:17,680
or hangs inside of an infinite loop it

154
00:05:17,680 --> 00:05:19,199
backtracks to the last point that is

155
00:05:19,199 --> 00:05:21,199
closest to the boot point

156
00:05:21,199 --> 00:05:22,800
i don't have time to explain each of

157
00:05:22,800 --> 00:05:24,800
these techniques in detail but i can

158
00:05:24,800 --> 00:05:26,160
provide an example that should give you

159
00:05:26,160 --> 00:05:28,400
an intuition as to how jet set works in

160
00:05:28,400 --> 00:05:30,880
practice

161
00:05:31,199 --> 00:05:33,039
here's a small piece of firmware whose

162
00:05:33,039 --> 00:05:35,199
initialization process consists of

163
00:05:35,199 --> 00:05:37,680
initializing a usb device and a uart

164
00:05:37,680 --> 00:05:38,800
device

165
00:05:38,800 --> 00:05:40,720
a sensible boot point to target with jet

166
00:05:40,720 --> 00:05:42,479
set would be the call to the print boot

167
00:05:42,479 --> 00:05:44,960
message function on the final line

168
00:05:44,960 --> 00:05:46,560
let me start by walking you through the

169
00:05:46,560 --> 00:05:49,120
initialization process

170
00:05:49,120 --> 00:05:50,800
first the firmware is going to check

171
00:05:50,800 --> 00:05:52,800
that the usb device is present by

172
00:05:52,800 --> 00:05:54,960
reading from one of its device registers

173
00:05:54,960 --> 00:05:57,840
and if it is it calls the init usb

174
00:05:57,840 --> 00:05:59,440
function

175
00:05:59,440 --> 00:06:01,120
then it's going to repeat the process

176
00:06:01,120 --> 00:06:02,960
for the uart

177
00:06:02,960 --> 00:06:04,960
finally it will check the all ok

178
00:06:04,960 --> 00:06:06,800
variable in ram to make sure the boot

179
00:06:06,800 --> 00:06:09,680
succeeded and if it did it will call

180
00:06:09,680 --> 00:06:11,759
print boot message otherwise it will

181
00:06:11,759 --> 00:06:14,639
jump to the failure case

182
00:06:14,639 --> 00:06:17,440
jet set starts at the entry point

183
00:06:17,440 --> 00:06:19,840
first it reads the usb present variable

184
00:06:19,840 --> 00:06:21,199
from the device

185
00:06:21,199 --> 00:06:23,039
this variable is made symbolic because

186
00:06:23,039 --> 00:06:26,000
it originates in the peripherals

187
00:06:26,000 --> 00:06:27,919
the next instruction compares this value

188
00:06:27,919 --> 00:06:29,600
to 0.

189
00:06:29,600 --> 00:06:31,600
then it's time to branch on the usb

190
00:06:31,600 --> 00:06:33,759
present variable

191
00:06:33,759 --> 00:06:35,840
set checks the distances between the two

192
00:06:35,840 --> 00:06:37,680
branch targets and the call to print

193
00:06:37,680 --> 00:06:40,240
boot message which are 11 and 16

194
00:06:40,240 --> 00:06:41,759
respectively

195
00:06:41,759 --> 00:06:44,240
the call init usb path is longer since

196
00:06:44,240 --> 00:06:46,160
jet set would have to call into the usb

197
00:06:46,160 --> 00:06:48,160
device initialization function in this

198
00:06:48,160 --> 00:06:49,759
path

199
00:06:49,759 --> 00:06:51,919
so jet set decides to try the shorter

200
00:06:51,919 --> 00:06:53,759
path that attempts to skip the usb

201
00:06:53,759 --> 00:06:55,599
initialization

202
00:06:55,599 --> 00:06:57,280
it goes through a very similar process

203
00:06:57,280 --> 00:06:59,759
for the uart device branching on the

204
00:06:59,759 --> 00:07:02,960
uart present variable again it attempts

205
00:07:02,960 --> 00:07:05,360
to skip the initialization

206
00:07:05,360 --> 00:07:07,440
now it reaches the final branch which

207
00:07:07,440 --> 00:07:10,240
branches on the all ok variable in ram

208
00:07:10,240 --> 00:07:12,479
now suppose the all ok variable is only

209
00:07:12,479 --> 00:07:14,840
set if one or the other device has been

210
00:07:14,840 --> 00:07:17,039
initialized jet set would branch to the

211
00:07:17,039 --> 00:07:19,280
fail since the all ok variable was not

212
00:07:19,280 --> 00:07:23,919
set in either init usb or init uart

213
00:07:23,919 --> 00:07:25,919
and if jet set fails to boot the

214
00:07:25,919 --> 00:07:27,840
firmware it has to backtrack and try

215
00:07:27,840 --> 00:07:29,039
again

216
00:07:29,039 --> 00:07:31,759
so it backtracks to the last node branch

217
00:07:31,759 --> 00:07:33,599
this time it will take the longer

218
00:07:33,599 --> 00:07:35,520
unexplored path that initializes the

219
00:07:35,520 --> 00:07:37,520
uart device

220
00:07:37,520 --> 00:07:39,599
when jet set enters the function call it

221
00:07:39,599 --> 00:07:41,599
will find a path from the entry of init

222
00:07:41,599 --> 00:07:43,440
uart to a return

223
00:07:43,440 --> 00:07:45,120
then come back to the top level

224
00:07:45,120 --> 00:07:47,599
initialization procedure

225
00:07:47,599 --> 00:07:49,520
after returning from this call we again

226
00:07:49,520 --> 00:07:52,000
reach the end of the boot process

227
00:07:52,000 --> 00:07:54,240
we check all okay but this time we

228
00:07:54,240 --> 00:07:55,520
succeed

229
00:07:55,520 --> 00:07:56,960
and all is well

230
00:07:56,960 --> 00:07:58,639
we found a path to the firmware's boot

231
00:07:58,639 --> 00:08:00,879
point

232
00:08:00,879 --> 00:08:02,879
so i've demonstrated how jet set

233
00:08:02,879 --> 00:08:04,720
searches for a path to the boot point in

234
00:08:04,720 --> 00:08:06,400
the firmware but how does it actually

235
00:08:06,400 --> 00:08:08,319
use this path to construct a peripheral

236
00:08:08,319 --> 00:08:10,560
model

237
00:08:10,560 --> 00:08:12,479
to generate a synthetic hardware device

238
00:08:12,479 --> 00:08:14,720
from a successful path jetset uses an

239
00:08:14,720 --> 00:08:17,680
smt solver to generate concrete device

240
00:08:17,680 --> 00:08:19,599
read return values that satisfy the

241
00:08:19,599 --> 00:08:23,039
constraints to reach the boot point

242
00:08:23,039 --> 00:08:24,960
on a device read after the boot point

243
00:08:24,960 --> 00:08:26,720
the device plays back the last

244
00:08:26,720 --> 00:08:29,280
satisfying value read from the address

245
00:08:29,280 --> 00:08:30,560
of the read

246
00:08:30,560 --> 00:08:32,240
this allows the device to continue

247
00:08:32,240 --> 00:08:33,919
functioning after the boot point

248
00:08:33,919 --> 00:08:36,719
although in a relatively simple way

249
00:08:36,719 --> 00:08:38,799
the model jet set creates can be used in

250
00:08:38,799 --> 00:08:41,039
an emulator like kimu which needs no

251
00:08:41,039 --> 00:08:42,799
further intervention by the symbolic

252
00:08:42,799 --> 00:08:44,880
execution engine let me show you how

253
00:08:44,880 --> 00:08:48,000
this would work on our previous example

254
00:08:48,000 --> 00:08:49,920
so we return to our simple piece of

255
00:08:49,920 --> 00:08:52,160
firmware that initializes a usb and a

256
00:08:52,160 --> 00:08:55,200
uart device an emulator for this

257
00:08:55,200 --> 00:08:57,040
firmware needs to respond to the reads

258
00:08:57,040 --> 00:08:59,519
to usb present and you are present as

259
00:08:59,519 --> 00:09:01,760
well as any reads inside the init uart

260
00:09:01,760 --> 00:09:03,680
function

261
00:09:03,680 --> 00:09:05,279
in the path to print boot message we

262
00:09:05,279 --> 00:09:07,600
found earlier jet set chose a path that

263
00:09:07,600 --> 00:09:09,920
skipped init usb which imposes the

264
00:09:09,920 --> 00:09:12,959
constraint that usb present equals zero

265
00:09:12,959 --> 00:09:15,040
jet set therefore concretizes this read

266
00:09:15,040 --> 00:09:16,880
to a zero

267
00:09:16,880 --> 00:09:18,480
the path that jet set found did

268
00:09:18,480 --> 00:09:20,560
initialize the uart device so the

269
00:09:20,560 --> 00:09:22,800
constraint imposed is that uart present

270
00:09:22,800 --> 00:09:24,959
does not equal zero and jet set

271
00:09:24,959 --> 00:09:27,680
initializes it to a nonzero value namely

272
00:09:27,680 --> 00:09:29,519
one

273
00:09:29,519 --> 00:09:31,600
similarly jet set will initialize any

274
00:09:31,600 --> 00:09:33,920
reads that occur inside the init uart

275
00:09:33,920 --> 00:09:34,959
function

276
00:09:34,959 --> 00:09:36,800
we can now use this set of device read

277
00:09:36,800 --> 00:09:38,720
constraints to create an emulator by

278
00:09:38,720 --> 00:09:42,000
replaying these traces

279
00:09:42,480 --> 00:09:44,320
i've explained how jet searches for a

280
00:09:44,320 --> 00:09:46,320
path to the boot point in the firmware

281
00:09:46,320 --> 00:09:48,080
and how it uses the constraints inferred

282
00:09:48,080 --> 00:09:49,279
during the search to construct a

283
00:09:49,279 --> 00:09:51,279
peripheral model

284
00:09:51,279 --> 00:09:54,640
but how does it do on real firmware

285
00:09:54,640 --> 00:09:56,720
to answer this question we use jet set

286
00:09:56,720 --> 00:09:59,120
to model the peripherals of 13 pieces of

287
00:09:59,120 --> 00:10:00,320
firmware

288
00:10:00,320 --> 00:10:02,000
this firmware spanned three

289
00:10:02,000 --> 00:10:04,640
architectures four operating systems and

290
00:10:04,640 --> 00:10:07,120
multiple different application domains

291
00:10:07,120 --> 00:10:09,120
for example we analyzed consumer

292
00:10:09,120 --> 00:10:11,760
electronics like the raspberry pi 2 a

293
00:10:11,760 --> 00:10:13,360
feeder protection relay used in the

294
00:10:13,360 --> 00:10:17,839
power grid the sel 751 and a cmu-900 a

295
00:10:17,839 --> 00:10:19,680
communications management unit used in

296
00:10:19,680 --> 00:10:22,000
the boeing 737

297
00:10:22,000 --> 00:10:24,160
on average it took about 14 minutes to

298
00:10:24,160 --> 00:10:25,680
create peripheral models for each of

299
00:10:25,680 --> 00:10:27,120
these devices

300
00:10:27,120 --> 00:10:29,760
the sel 751 took over two hours to

301
00:10:29,760 --> 00:10:31,680
construct a model for since it performed

302
00:10:31,680 --> 00:10:33,839
complicated arithmetic that tends to

303
00:10:33,839 --> 00:10:36,880
make smt solvers quite unhappy

304
00:10:36,880 --> 00:10:38,399
jet set successfully generated

305
00:10:38,399 --> 00:10:40,480
peripheral models for all these devices

306
00:10:40,480 --> 00:10:41,680
but this still doesn't answer the

307
00:10:41,680 --> 00:10:43,519
question of whether these models

308
00:10:43,519 --> 00:10:46,000
correctly model the underlying hardware

309
00:10:46,000 --> 00:10:47,680
and more importantly whether they help

310
00:10:47,680 --> 00:10:50,079
us find bugs in otherwise unemulatable

311
00:10:50,079 --> 00:10:51,519
firmware

312
00:10:51,519 --> 00:10:53,839
we use jetset's generated models to fuzz

313
00:10:53,839 --> 00:10:56,640
test the cmu-900 and the raspberry pi 2

314
00:10:56,640 --> 00:10:58,959
which are the two systems shown below

315
00:10:58,959 --> 00:11:01,600
in the process of fuzzing the cmu 900 we

316
00:11:01,600 --> 00:11:03,839
found a privilege escalation bug

317
00:11:03,839 --> 00:11:05,920
this bug is not remotely exploitable and

318
00:11:05,920 --> 00:11:08,000
we've taken the proper steps to notify

319
00:11:08,000 --> 00:11:09,600
boeing and rockwell collins of the

320
00:11:09,600 --> 00:11:10,720
problem

321
00:11:10,720 --> 00:11:12,160
we would not have been able to fuzz the

322
00:11:12,160 --> 00:11:14,480
cmu-900 without jet set since no

323
00:11:14,480 --> 00:11:16,240
emulators for its hardware devices are

324
00:11:16,240 --> 00:11:18,160
publicly available

325
00:11:18,160 --> 00:11:20,640
besides the cmu 900 we also fuzzed the

326
00:11:20,640 --> 00:11:22,399
system call interface of the raspberry

327
00:11:22,399 --> 00:11:23,360
pi

328
00:11:23,360 --> 00:11:25,360
while we didn't find any new exploits we

329
00:11:25,360 --> 00:11:26,959
found that in over a million distinct

330
00:11:26,959 --> 00:11:28,880
system calls we saw the exact same

331
00:11:28,880 --> 00:11:31,360
behavior on the raspberry pi hardware as

332
00:11:31,360 --> 00:11:33,279
on our emulated device

333
00:11:33,279 --> 00:11:34,800
this shows that the device model

334
00:11:34,800 --> 00:11:36,800
generated by jet set did not fail during

335
00:11:36,800 --> 00:11:38,560
the fuzzing process

336
00:11:38,560 --> 00:11:40,320
even if we weren't able to find any new

337
00:11:40,320 --> 00:11:42,079
exploits

338
00:11:42,079 --> 00:11:44,320
in summary jet set uses directed

339
00:11:44,320 --> 00:11:46,640
symbolic execution to generate emulators

340
00:11:46,640 --> 00:11:47,920
for firmware

341
00:11:47,920 --> 00:11:49,600
we tested jet set against several

342
00:11:49,600 --> 00:11:51,600
architectures and operating systems and

343
00:11:51,600 --> 00:11:53,279
it helped us find bugs in otherwise

344
00:11:53,279 --> 00:11:55,519
untestable firmware you can find the

345
00:11:55,519 --> 00:11:57,279
open source implementation at the link

346
00:11:57,279 --> 00:12:01,880
below i will now be taking questions

