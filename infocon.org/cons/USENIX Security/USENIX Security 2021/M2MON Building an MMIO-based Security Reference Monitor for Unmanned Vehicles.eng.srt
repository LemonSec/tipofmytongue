1
00:00:08,880 --> 00:00:09,760
hi

2
00:00:09,760 --> 00:00:11,599
my name is arslan khan and today i'm

3
00:00:11,599 --> 00:00:13,360
going to present empty month building an

4
00:00:13,360 --> 00:00:15,360
mmi based security reference monitor for

5
00:00:15,360 --> 00:00:17,920
unmanned vehicles

6
00:00:17,920 --> 00:00:19,920
a typical unmanned vehicle has a main

7
00:00:19,920 --> 00:00:21,760
microcontroller that is interfaced with

8
00:00:21,760 --> 00:00:23,519
multiple devices

9
00:00:23,519 --> 00:00:25,279
now these devices could be interfaced

10
00:00:25,279 --> 00:00:27,039
directly through mmi or they could be

11
00:00:27,039 --> 00:00:29,039
sitting behind an external bus such as

12
00:00:29,039 --> 00:00:32,719
spi i2c or can which again in turn is

13
00:00:32,719 --> 00:00:34,880
interfaced through mmi

14
00:00:34,880 --> 00:00:37,760
unlike traditional systems in uv system

15
00:00:37,760 --> 00:00:40,960
there can be multiple vectors of threats

16
00:00:40,960 --> 00:00:42,559
there could be cyber attacks there could

17
00:00:42,559 --> 00:00:45,039
be physical attacks and because of this

18
00:00:45,039 --> 00:00:47,200
there could be multiple malicious agents

19
00:00:47,200 --> 00:00:50,000
in the system

20
00:00:50,000 --> 00:00:51,520
here we notice

21
00:00:51,520 --> 00:00:53,360
that all of the communication in this

22
00:00:53,360 --> 00:00:56,399
system must go through mmio

23
00:00:56,399 --> 00:00:58,719
furthermore since these systems have to

24
00:00:58,719 --> 00:01:01,760
interface with physical systems

25
00:01:01,760 --> 00:01:03,920
these systems have to be real-time in

26
00:01:03,920 --> 00:01:06,640
nature here real-time doesn't mean real

27
00:01:06,640 --> 00:01:09,520
fast it actually means deterministic

28
00:01:09,520 --> 00:01:11,760
and because of this determinism we

29
00:01:11,760 --> 00:01:14,960
conjecture that any malicious activities

30
00:01:14,960 --> 00:01:19,759
may cause anomalies at the mmio level

31
00:01:20,479 --> 00:01:23,439
however this was just a hypothesis to

32
00:01:23,439 --> 00:01:25,680
further our hypothesis we conducted

33
00:01:25,680 --> 00:01:28,400
various attacks on uvs

34
00:01:28,400 --> 00:01:30,960
for example we conducted gps spoofing on

35
00:01:30,960 --> 00:01:33,040
a drone system

36
00:01:33,040 --> 00:01:36,479
gps has multiple type of packets

37
00:01:36,479 --> 00:01:40,640
one such packet is the ephemeris message

38
00:01:40,640 --> 00:01:43,119
the ephemeris message tells you about

39
00:01:43,119 --> 00:01:46,240
the orbital position of the satellites

40
00:01:46,240 --> 00:01:49,680
we noticed that during gps proofing we

41
00:01:49,680 --> 00:01:52,159
observe a higher count of ephemeris

42
00:01:52,159 --> 00:01:53,360
messages

43
00:01:53,360 --> 00:01:55,119
for the sake of property you can think

44
00:01:55,119 --> 00:01:57,200
of this higher coin as higher io

45
00:01:57,200 --> 00:01:58,960
activity

46
00:01:58,960 --> 00:02:01,759
similarly we conducted several other

47
00:02:01,759 --> 00:02:03,280
attacks

48
00:02:03,280 --> 00:02:05,360
for uvs

49
00:02:05,360 --> 00:02:08,800
and for most of the attacks we observed

50
00:02:08,800 --> 00:02:11,120
an i o level anomaly

51
00:02:11,120 --> 00:02:13,280
the key thing to note here is that there

52
00:02:13,280 --> 00:02:15,440
might be existing defenses for some of

53
00:02:15,440 --> 00:02:16,959
those attacks

54
00:02:16,959 --> 00:02:19,520
however none of these defenses actually

55
00:02:19,520 --> 00:02:23,440
cover all of these attacks

56
00:02:23,440 --> 00:02:25,920
this survey although not a complete

57
00:02:25,920 --> 00:02:28,160
survey of uv attacks

58
00:02:28,160 --> 00:02:31,280
it was enough to convince us

59
00:02:31,280 --> 00:02:33,519
that we need to build an aero reference

60
00:02:33,519 --> 00:02:35,599
monitor for uvs

61
00:02:35,599 --> 00:02:36,800
and that

62
00:02:36,800 --> 00:02:38,800
led to empty mode

63
00:02:38,800 --> 00:02:40,879
and one is an mmo based security

64
00:02:40,879 --> 00:02:43,519
reference monitor so to explain what m21

65
00:02:43,519 --> 00:02:45,280
really is i have to explain what a

66
00:02:45,280 --> 00:02:47,920
security reference monitor is

67
00:02:47,920 --> 00:02:49,680
a security reference monitor is an

68
00:02:49,680 --> 00:02:51,760
interpretable non-bypassable always

69
00:02:51,760 --> 00:02:53,519
invoked and available module that

70
00:02:53,519 --> 00:02:55,519
controls all accesses to data objects or

71
00:02:55,519 --> 00:02:56,640
devices

72
00:02:56,640 --> 00:02:58,720
informally you can think of it as a

73
00:02:58,720 --> 00:03:00,720
gatekeeper to a particular object or a

74
00:03:00,720 --> 00:03:03,599
device for m21 that particular object is

75
00:03:03,599 --> 00:03:06,000
mmi

76
00:03:08,080 --> 00:03:10,959
m2mon had various design challenges

77
00:03:10,959 --> 00:03:13,280
most uov systems have real-time

78
00:03:13,280 --> 00:03:15,360
constraints and low power constraints

79
00:03:15,360 --> 00:03:17,120
because of this developers do not

80
00:03:17,120 --> 00:03:19,360
provide previous separation

81
00:03:19,360 --> 00:03:22,800
furthermore vendors do not provide mmus

82
00:03:22,800 --> 00:03:25,120
and they also provide fewer execution

83
00:03:25,120 --> 00:03:27,280
modes so there's no monitor mode or

84
00:03:27,280 --> 00:03:30,720
hypervisor modes for uv systems

85
00:03:30,720 --> 00:03:33,120
due to these things

86
00:03:33,120 --> 00:03:35,280
everything inside a uv runs in the same

87
00:03:35,280 --> 00:03:36,879
private mode

88
00:03:36,879 --> 00:03:38,480
there's no well-defined isolation

89
00:03:38,480 --> 00:03:40,720
between different components in the

90
00:03:40,720 --> 00:03:42,720
system

91
00:03:42,720 --> 00:03:44,400
for the same reason there's a

92
00:03:44,400 --> 00:03:48,799
well-defined device and driver isolation

93
00:03:48,799 --> 00:03:50,959
anything is able to access anything in

94
00:03:50,959 --> 00:03:52,560
the system

95
00:03:52,560 --> 00:03:55,280
to top it all off all of these devices

96
00:03:55,280 --> 00:03:57,200
could be smart as well

97
00:03:57,200 --> 00:03:59,680
as a matter of fact these devices could

98
00:03:59,680 --> 00:04:01,200
be as powerful as the main

99
00:04:01,200 --> 00:04:03,519
microcontroller

100
00:04:03,519 --> 00:04:05,439
where to fit the reference monitor by

101
00:04:05,439 --> 00:04:07,760
providing a microgram this micro kernel

102
00:04:07,760 --> 00:04:09,920
does the reference monitoring for us

103
00:04:09,920 --> 00:04:12,000
now a naive approach could be to

104
00:04:12,000 --> 00:04:13,920
implement this microkernel beside rest

105
00:04:13,920 --> 00:04:15,360
of the components in the system in the

106
00:04:15,360 --> 00:04:16,560
privilege mode

107
00:04:16,560 --> 00:04:18,639
however clearly this does and does not

108
00:04:18,639 --> 00:04:21,519
provide any isolation at all

109
00:04:21,519 --> 00:04:23,040
one can use

110
00:04:23,040 --> 00:04:24,960
techniques such as software fault

111
00:04:24,960 --> 00:04:27,520
isolation to isolate the microkernel

112
00:04:27,520 --> 00:04:29,120
from rest of the system

113
00:04:29,120 --> 00:04:31,360
however existing work has already shown

114
00:04:31,360 --> 00:04:33,199
that this kind of design does not work

115
00:04:33,199 --> 00:04:35,360
for real-time system as it incurs high

116
00:04:35,360 --> 00:04:37,600
overhead

117
00:04:37,600 --> 00:04:39,840
instead for empty mode we push

118
00:04:39,840 --> 00:04:41,520
everything from the privilege mode into

119
00:04:41,520 --> 00:04:43,360
the unprivileged mode leaving the

120
00:04:43,360 --> 00:04:45,040
privilege mod as a safe haven for the

121
00:04:45,040 --> 00:04:47,040
m21 micro kernel

122
00:04:47,040 --> 00:04:49,040
in this design we can use the memory

123
00:04:49,040 --> 00:04:51,759
protection unit to restrict access to i

124
00:04:51,759 --> 00:04:54,000
o from the unprivileged mode a memory

125
00:04:54,000 --> 00:04:56,000
protection unit is just like a memory

126
00:04:56,000 --> 00:04:58,639
management unit however it does not

127
00:04:58,639 --> 00:05:01,039
provide any address translation

128
00:05:01,039 --> 00:05:03,440
now this kind of design should work

129
00:05:03,440 --> 00:05:05,199
however there's an architectural quirk

130
00:05:05,199 --> 00:05:06,960
that we need to talk about and that is

131
00:05:06,960 --> 00:05:09,520
interrupt friendly

132
00:05:09,520 --> 00:05:11,759
by default in most architectures

133
00:05:11,759 --> 00:05:13,360
interrupts are taken to the privileged

134
00:05:13,360 --> 00:05:15,520
mode

135
00:05:15,520 --> 00:05:17,600
what we can do here is that we can patch

136
00:05:17,600 --> 00:05:19,600
the interrupt handler so as soon as the

137
00:05:19,600 --> 00:05:21,440
interrupt is triggered the first thing

138
00:05:21,440 --> 00:05:23,199
these interpreters do is that they

139
00:05:23,199 --> 00:05:25,440
transition back to the unprivileged mode

140
00:05:25,440 --> 00:05:27,600
however during our implementation we

141
00:05:27,600 --> 00:05:29,840
found that most of the io excesses

142
00:05:29,840 --> 00:05:31,120
actually come from these interrupt

143
00:05:31,120 --> 00:05:33,360
sensors so moving them to the

144
00:05:33,360 --> 00:05:35,759
unprivileged mode incurs high overhead

145
00:05:35,759 --> 00:05:37,759
so instead we decided to keep these

146
00:05:37,759 --> 00:05:40,400
interrupt handlers in the privilege mode

147
00:05:40,400 --> 00:05:43,199
however this poses an other challenge

148
00:05:43,199 --> 00:05:45,199
these interrupt trenders that we just

149
00:05:45,199 --> 00:05:47,120
moved in the in privilege mode are

150
00:05:47,120 --> 00:05:49,759
outside the tcb of m2 mode and running

151
00:05:49,759 --> 00:05:51,120
them beside

152
00:05:51,120 --> 00:05:53,759
the kernel in the provision mode poses a

153
00:05:53,759 --> 00:05:56,240
thread to the m21 kernel itself

154
00:05:56,240 --> 00:05:59,199
so to contain these i contain these

155
00:05:59,199 --> 00:06:01,120
interrupt handler routines in the

156
00:06:01,120 --> 00:06:03,199
privilege mode we use software fault

157
00:06:03,199 --> 00:06:05,440
isolation techniques such as controls

158
00:06:05,440 --> 00:06:08,240
for integrity and data for integrity

159
00:06:08,240 --> 00:06:10,240
using these techniques we ensure three

160
00:06:10,240 --> 00:06:11,199
things

161
00:06:11,199 --> 00:06:13,600
first these interpreters are not able to

162
00:06:13,600 --> 00:06:16,800
access m21 data or code

163
00:06:16,800 --> 00:06:19,600
second they are not able to jump outside

164
00:06:19,600 --> 00:06:22,400
the interrupt handler or outside the

165
00:06:22,400 --> 00:06:24,960
sandbox

166
00:06:25,199 --> 00:06:28,160
and lastly we ensure that they do not

167
00:06:28,160 --> 00:06:31,520
access io directly

168
00:06:31,840 --> 00:06:35,039
using this kind of design we ensure that

169
00:06:35,039 --> 00:06:39,680
the mem21 microkernel is non bypassable

170
00:06:39,680 --> 00:06:42,080
furthermore we ensure that no one in the

171
00:06:42,080 --> 00:06:46,880
system can modify the microkernel logic

172
00:06:46,880 --> 00:06:50,800
lastly although we do not formally prove

173
00:06:50,800 --> 00:06:53,199
the microkernel

174
00:06:53,199 --> 00:06:55,599
we do keep the tcb of microkernel really

175
00:06:55,599 --> 00:07:00,080
small so that it is easily available

176
00:07:01,759 --> 00:07:05,039
we instantiated the m21 microkernel to

177
00:07:05,039 --> 00:07:07,039
implement multiple applications so that

178
00:07:07,039 --> 00:07:09,120
we can detect different type of attacks

179
00:07:09,120 --> 00:07:11,840
against drones

180
00:07:11,919 --> 00:07:13,199
the first application that we

181
00:07:13,199 --> 00:07:15,520
implemented was a kalman filter column

182
00:07:15,520 --> 00:07:17,520
filter is used to model the physical

183
00:07:17,520 --> 00:07:20,000
world now this kelvin filter is similar

184
00:07:20,000 --> 00:07:21,919
to the kelvin filter that is implemented

185
00:07:21,919 --> 00:07:23,680
inside the flight control software

186
00:07:23,680 --> 00:07:26,400
itself however this kalman filter enjoys

187
00:07:26,400 --> 00:07:28,639
all the isolation guarantees of m21

188
00:07:28,639 --> 00:07:30,639
itself

189
00:07:30,639 --> 00:07:32,639
next we implemented an excess pattern

190
00:07:32,639 --> 00:07:34,240
based filter

191
00:07:34,240 --> 00:07:36,560
this excess pattern based filter track i

192
00:07:36,560 --> 00:07:39,599
o access frequency it can track i o

193
00:07:39,599 --> 00:07:42,160
access sequences and it can also block

194
00:07:42,160 --> 00:07:45,840
accesses to different io regions

195
00:07:47,199 --> 00:07:52,000
to evaluate our system we use 3dr iris

196
00:07:52,000 --> 00:07:54,319
plus uav platform

197
00:07:54,319 --> 00:07:56,400
which was running autopilot control

198
00:07:56,400 --> 00:07:58,160
software

199
00:07:58,160 --> 00:08:00,479
using this platform we conducted two

200
00:08:00,479 --> 00:08:02,479
types of evaluation performance

201
00:08:02,479 --> 00:08:05,199
evaluation and security evaluation

202
00:08:05,199 --> 00:08:06,879
in performance evaluation we tried to

203
00:08:06,879 --> 00:08:09,120
figure out how much of an overhead m21

204
00:08:09,120 --> 00:08:12,240
incurs here on the x-axis you see

205
00:08:12,240 --> 00:08:14,240
different autopilot tasks

206
00:08:14,240 --> 00:08:17,360
and on the y-axis you see log based time

207
00:08:17,360 --> 00:08:18,319
scale

208
00:08:18,319 --> 00:08:22,400
the bars here are the execution times

209
00:08:22,720 --> 00:08:25,680
here the thing to note is that if a task

210
00:08:25,680 --> 00:08:28,319
was not missing its deadline before m21

211
00:08:28,319 --> 00:08:30,400
it does not miss its deadline even after

212
00:08:30,400 --> 00:08:34,319
m21 microkernel is implemented

213
00:08:35,760 --> 00:08:38,159
overall we incurred an average overhead

214
00:08:38,159 --> 00:08:41,039
of 8.85 percent so roughly around nine

215
00:08:41,039 --> 00:08:43,439
percent

216
00:08:43,679 --> 00:08:45,920
next in security evaluation we try to

217
00:08:45,920 --> 00:08:48,240
find the efficacy of m2 moon and its

218
00:08:48,240 --> 00:08:50,720
applications

219
00:08:50,720 --> 00:08:52,480
if you remember the small survey that i

220
00:08:52,480 --> 00:08:54,560
presented in the beginning of the slides

221
00:08:54,560 --> 00:08:57,040
using m21 and its application we were

222
00:08:57,040 --> 00:09:00,560
able to detect all of these attacks

223
00:09:00,560 --> 00:09:03,279
using one of the detection feature or

224
00:09:03,279 --> 00:09:04,880
one of the applications that we

225
00:09:04,880 --> 00:09:06,640
implemented

226
00:09:06,640 --> 00:09:09,200
as a case study let's consider the first

227
00:09:09,200 --> 00:09:12,399
attack that is the timer attack

228
00:09:12,399 --> 00:09:14,000
the timer attack is actually borrowed

229
00:09:14,000 --> 00:09:16,320
from an existing paper called minion in

230
00:09:16,320 --> 00:09:18,800
this attack an attacker tries to modify

231
00:09:18,800 --> 00:09:21,600
the tick value of our system since that

232
00:09:21,600 --> 00:09:24,000
is how a system keep tracks of time a

233
00:09:24,000 --> 00:09:26,000
modified tech value results in an

234
00:09:26,000 --> 00:09:28,480
unstabilized system or even a crash

235
00:09:28,480 --> 00:09:30,880
system

236
00:09:31,440 --> 00:09:33,360
while profiling the timer attack we

237
00:09:33,360 --> 00:09:36,640
notice that the system only modifies the

238
00:09:36,640 --> 00:09:38,480
configuration registers

239
00:09:38,480 --> 00:09:40,480
during the system boot up and after

240
00:09:40,480 --> 00:09:42,959
system boot up it never modifies or even

241
00:09:42,959 --> 00:09:46,000
accesses these configuration registers

242
00:09:46,000 --> 00:09:48,399
however under attack circumstances we

243
00:09:48,399 --> 00:09:50,080
noticed that there are multiple io

244
00:09:50,080 --> 00:09:51,680
accesses to these configuration

245
00:09:51,680 --> 00:09:53,760
registers

246
00:09:53,760 --> 00:09:56,560
when using m21 a user can register a

247
00:09:56,560 --> 00:09:59,120
rule with m21 that disallow any

248
00:09:59,120 --> 00:10:01,920
configuration changes to the system

249
00:10:01,920 --> 00:10:05,040
timer or the timer registers hence

250
00:10:05,040 --> 00:10:08,719
avoiding this timer attack

251
00:10:11,440 --> 00:10:13,120
empty one comes with its own set of

252
00:10:13,120 --> 00:10:15,120
limitations most of them stem from the

253
00:10:15,120 --> 00:10:17,760
fact that m21 is deployed on systems

254
00:10:17,760 --> 00:10:20,480
with low compute power or low resources

255
00:10:20,480 --> 00:10:22,800
due to this reason m21 cannot really run

256
00:10:22,800 --> 00:10:24,560
complex applications such as machine

257
00:10:24,560 --> 00:10:26,240
learning applications

258
00:10:26,240 --> 00:10:29,440
as a rule of thumb m21 is limited by the

259
00:10:29,440 --> 00:10:32,320
slack time available in the system here

260
00:10:32,320 --> 00:10:34,240
we have three different tasks from

261
00:10:34,240 --> 00:10:35,920
autopilot

262
00:10:35,920 --> 00:10:38,640
on the x axis you see increased number

263
00:10:38,640 --> 00:10:41,519
of rules which can be construed as the

264
00:10:41,519 --> 00:10:43,760
increased complexity of the applications

265
00:10:43,760 --> 00:10:45,120
running on top of

266
00:10:45,120 --> 00:10:47,680
m2 mode on the y-axis you see the

267
00:10:47,680 --> 00:10:50,320
execution runtime and these flat lines

268
00:10:50,320 --> 00:10:52,640
are the deadlines for this test

269
00:10:52,640 --> 00:10:54,720
as you can see here that for the actual

270
00:10:54,720 --> 00:10:56,240
auto trim task

271
00:10:56,240 --> 00:10:59,120
even at higher complexity of task

272
00:10:59,120 --> 00:11:01,680
of the applications running on top of

273
00:11:01,680 --> 00:11:02,959
m21

274
00:11:02,959 --> 00:11:05,839
the test never misses a deadline however

275
00:11:05,839 --> 00:11:08,959
for update to bad compass task

276
00:11:08,959 --> 00:11:10,399
the task

277
00:11:10,399 --> 00:11:13,120
misses is deadline really quickly

278
00:11:13,120 --> 00:11:14,880
this highlights the difference between

279
00:11:14,880 --> 00:11:16,720
the available slack time

280
00:11:16,720 --> 00:11:18,959
in the two tests

281
00:11:18,959 --> 00:11:20,800
for the same reason

282
00:11:20,800 --> 00:11:22,800
in the access pattern based filter

283
00:11:22,800 --> 00:11:25,760
application we do block listing a lot

284
00:11:25,760 --> 00:11:29,279
instead of allow listing

285
00:11:29,279 --> 00:11:31,760
to conclude this talk in this

286
00:11:31,760 --> 00:11:34,320
paper we showed that uv attacks against

287
00:11:34,320 --> 00:11:36,399
drones usually exhibit mmo level

288
00:11:36,399 --> 00:11:37,839
anomalies

289
00:11:37,839 --> 00:11:40,480
to detect this anomalies we implemented

290
00:11:40,480 --> 00:11:43,120
the m21 microkernel and we implemented

291
00:11:43,120 --> 00:11:45,440
multiple applications on top of that m21

292
00:11:45,440 --> 00:11:47,279
microkernel

293
00:11:47,279 --> 00:11:49,519
we showed that on a rear drone

294
00:11:49,519 --> 00:11:51,839
controller m21 microkernel incurs a

295
00:11:51,839 --> 00:11:53,839
reasonable overhead and using the

296
00:11:53,839 --> 00:11:55,680
applications and the microkernel we are

297
00:11:55,680 --> 00:11:59,680
able to detect a wide range of attacks

298
00:11:59,839 --> 00:12:01,120
with this

299
00:12:01,120 --> 00:12:03,040
i would like to thank you all for

300
00:12:03,040 --> 00:12:05,120
listening to me and i'll be happy to

301
00:12:05,120 --> 00:12:07,120
take any questions you guys have thank

302
00:12:07,120 --> 00:12:10,120
you

303
00:12:15,120 --> 00:12:17,200
you

