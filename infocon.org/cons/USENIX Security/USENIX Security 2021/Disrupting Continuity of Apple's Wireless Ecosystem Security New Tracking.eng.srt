1
00:00:09,040 --> 00:00:11,519
hello and welcome everyone my name is

2
00:00:11,519 --> 00:00:13,840
alexander heinrich i am a phd student at

3
00:00:13,840 --> 00:00:15,519
a secure mobile networking lab at the

4
00:00:15,519 --> 00:00:18,000
technical university of darmstadt today

5
00:00:18,000 --> 00:00:19,840
i am going to present you the work of me

6
00:00:19,840 --> 00:00:21,279
and my colleagues

7
00:00:21,279 --> 00:00:23,199
disrupting continuity of apple's

8
00:00:23,199 --> 00:00:25,439
wireless ecosystem security with new

9
00:00:25,439 --> 00:00:27,359
tracking denial of service and machine

10
00:00:27,359 --> 00:00:30,480
in the middle attacks on ios and mac os

11
00:00:30,480 --> 00:00:33,520
our work focuses on protocols running

12
00:00:33,520 --> 00:00:35,840
over beautiful energy apple wireless

13
00:00:35,840 --> 00:00:39,360
direct link and wi-fi

14
00:00:39,760 --> 00:00:42,079
we start this presentation by defining

15
00:00:42,079 --> 00:00:44,160
what is the actual problem that we want

16
00:00:44,160 --> 00:00:46,718
to address

17
00:00:47,600 --> 00:00:50,320
how secure are wireless protocols

18
00:00:50,320 --> 00:00:52,640
we start with two short examples

19
00:00:52,640 --> 00:00:54,559
first airdrop

20
00:00:54,559 --> 00:00:56,960
a service to share files between devices

21
00:00:56,960 --> 00:00:59,359
without using an internet connection

22
00:00:59,359 --> 00:01:02,000
in 2019 a machine in the middle attack

23
00:01:02,000 --> 00:01:03,840
has been discovered that allowed an

24
00:01:03,840 --> 00:01:06,640
attacker to receive and modify all files

25
00:01:06,640 --> 00:01:09,520
transmitted between devices over airdrop

26
00:01:09,520 --> 00:01:11,680
in the same year it was first disclosed

27
00:01:11,680 --> 00:01:13,600
that airdrop leaks the phone numbers and

28
00:01:13,600 --> 00:01:15,840
email addresses of the sender

29
00:01:15,840 --> 00:01:17,840
an issue that has not been fixed until

30
00:01:17,840 --> 00:01:19,280
today

31
00:01:19,280 --> 00:01:22,479
next apple wireless direct link

32
00:01:22,479 --> 00:01:23,280
this

33
00:01:23,280 --> 00:01:25,280
is apple's wi-fi based link layer

34
00:01:25,280 --> 00:01:28,080
protocol that is utilized for airdrop

35
00:01:28,080 --> 00:01:30,320
the attack on airdrop was only possible

36
00:01:30,320 --> 00:01:32,799
because of a desynchronization issue in

37
00:01:32,799 --> 00:01:34,960
the protocol that would allow any party

38
00:01:34,960 --> 00:01:36,720
to position itself as a machine in the

39
00:01:36,720 --> 00:01:37,680
middle

40
00:01:37,680 --> 00:01:39,840
furthermore new attack was discovered

41
00:01:39,840 --> 00:01:41,920
that exploited a complete ios system

42
00:01:41,920 --> 00:01:44,880
wirelessly allowing to access files

43
00:01:44,880 --> 00:01:49,600
without any user extra user interaction

44
00:01:50,159 --> 00:01:52,240
most of these protocols are integrated

45
00:01:52,240 --> 00:01:54,560
into very large ecosystems that share

46
00:01:54,560 --> 00:01:56,560
homogeneous code base

47
00:01:56,560 --> 00:01:58,560
this means that this vulnerability in

48
00:01:58,560 --> 00:02:01,200
awdl has already affected a billion

49
00:02:01,200 --> 00:02:03,920
devices and different product lines

50
00:02:03,920 --> 00:02:05,920
our goals in this work have been to

51
00:02:05,920 --> 00:02:07,920
define a structured approach on how we

52
00:02:07,920 --> 00:02:10,318
can reverse engineer such protocols to

53
00:02:10,318 --> 00:02:12,319
further analyze them for security and

54
00:02:12,319 --> 00:02:14,560
privacy vulnerabilities

55
00:02:14,560 --> 00:02:16,400
to apply our method on multiple

56
00:02:16,400 --> 00:02:20,720
protocols and uncover new issues

57
00:02:20,800 --> 00:02:22,800
airdrop is not the only proprietary

58
00:02:22,800 --> 00:02:24,400
wireless protocol that apple has

59
00:02:24,400 --> 00:02:25,599
designed

60
00:02:25,599 --> 00:02:27,920
in the last years apple has built

61
00:02:27,920 --> 00:02:30,239
a complex ecosystem around several

62
00:02:30,239 --> 00:02:31,920
wireless protocols

63
00:02:31,920 --> 00:02:33,840
this includes a universally shared

64
00:02:33,840 --> 00:02:36,560
clipboard between all apple devices

65
00:02:36,560 --> 00:02:38,400
handoff that allows you to continue

66
00:02:38,400 --> 00:02:40,400
tasks you started on one device on

67
00:02:40,400 --> 00:02:42,239
another device

68
00:02:42,239 --> 00:02:44,239
and wifi password training which allows

69
00:02:44,239 --> 00:02:46,239
you to send wifi passwords to a friend

70
00:02:46,239 --> 00:02:48,800
when they try to connect to it

71
00:02:48,800 --> 00:02:51,200
apple summarizes them under the umbrella

72
00:02:51,200 --> 00:02:54,480
term continuity

73
00:02:54,480 --> 00:02:57,680
in 2021 continuity contains already more

74
00:02:57,680 --> 00:02:59,599
than 10 unique services

75
00:02:59,599 --> 00:03:01,360
those are deeply integrated into the

76
00:03:01,360 --> 00:03:03,040
operating system

77
00:03:03,040 --> 00:03:05,040
and potential exploits would allow

78
00:03:05,040 --> 00:03:07,360
access to private user data and as shown

79
00:03:07,360 --> 00:03:09,280
in the past can even compromise the

80
00:03:09,280 --> 00:03:12,000
whole system

81
00:03:12,239 --> 00:03:13,680
now we are going to present you our

82
00:03:13,680 --> 00:03:15,680
structured approach on how to reverse

83
00:03:15,680 --> 00:03:18,000
engineer a proprietary wireless protocol

84
00:03:18,000 --> 00:03:21,200
in the apple ecosystem

85
00:03:21,519 --> 00:03:23,200
on this slide you can see a rather

86
00:03:23,200 --> 00:03:25,200
complex interaction between several

87
00:03:25,200 --> 00:03:27,120
processes to implement just one of those

88
00:03:27,120 --> 00:03:28,319
protocols

89
00:03:28,319 --> 00:03:30,640
the universal clipboard how can we

90
00:03:30,640 --> 00:03:32,959
analyze such systems

91
00:03:32,959 --> 00:03:35,040
based on our experience we found that it

92
00:03:35,040 --> 00:03:37,200
helps to approach such protocols from

93
00:03:37,200 --> 00:03:40,399
different vantage points

94
00:03:40,720 --> 00:03:43,280
the first vantage point is the idea is

95
00:03:43,280 --> 00:03:47,360
the system as a whole all wireless

96
00:03:47,360 --> 00:03:50,000
services consist of daemons frameworks

97
00:03:50,000 --> 00:03:52,799
drivers and wireless interfaces

98
00:03:52,799 --> 00:03:54,640
daemons are headless processes running

99
00:03:54,640 --> 00:03:56,959
in the background the link frameworks as

100
00:03:56,959 --> 00:03:59,439
dynamic libraries and in many cases

101
00:03:59,439 --> 00:04:02,080
processes communicate with each other

102
00:04:02,080 --> 00:04:04,560
all of those parts can store access and

103
00:04:04,560 --> 00:04:07,040
process relevant user data

104
00:04:07,040 --> 00:04:09,120
at first we try to identify the

105
00:04:09,120 --> 00:04:10,959
underlying processes and delinquent

106
00:04:10,959 --> 00:04:13,280
works

107
00:04:13,280 --> 00:04:15,200
after filling the blanks we can see

108
00:04:15,200 --> 00:04:17,120
which processes are involved when using

109
00:04:17,120 --> 00:04:19,680
the universal clipboard we can use this

110
00:04:19,680 --> 00:04:21,759
information gathered in this step to get

111
00:04:21,759 --> 00:04:23,280
a first understanding of underlying

112
00:04:23,280 --> 00:04:25,758
tasks

113
00:04:26,160 --> 00:04:28,240
to dive deeper into the protocols we

114
00:04:28,240 --> 00:04:29,759
need to take a look at the binaries

115
00:04:29,759 --> 00:04:30,800
involved

116
00:04:30,800 --> 00:04:32,639
in the binaries we are looking for code

117
00:04:32,639 --> 00:04:35,280
sections that construct messages encode

118
00:04:35,280 --> 00:04:37,280
the content of a message identify

119
00:04:37,280 --> 00:04:39,520
encryption algorithms and discover

120
00:04:39,520 --> 00:04:41,280
secrets involved

121
00:04:41,280 --> 00:04:43,680
after we identified those we can go

122
00:04:43,680 --> 00:04:46,080
forward and dynamically analyze them

123
00:04:46,080 --> 00:04:48,479
by using a debugger or tools like frida

124
00:04:48,479 --> 00:04:50,320
it is possible to print messages before

125
00:04:50,320 --> 00:04:52,960
they are encrypted and modify entire

126
00:04:52,960 --> 00:04:54,800
method implementations to change the

127
00:04:54,800 --> 00:04:57,840
behavior of a protocol

128
00:04:58,400 --> 00:05:00,880
what the hr is actually sent wirelessly

129
00:05:00,880 --> 00:05:02,320
in our third vantage point we are

130
00:05:02,320 --> 00:05:04,720
looking at the network interfaces

131
00:05:04,720 --> 00:05:06,479
in most cases the devices would use

132
00:05:06,479 --> 00:05:08,240
bluetooth advertisements to inform a

133
00:05:08,240 --> 00:05:10,320
nearby device about an upcoming service

134
00:05:10,320 --> 00:05:11,440
request

135
00:05:11,440 --> 00:05:13,120
then they use wi-fi or apple's

136
00:05:13,120 --> 00:05:16,400
proprietary awdl to transfer data

137
00:05:16,400 --> 00:05:18,160
we try to understand

138
00:05:18,160 --> 00:05:20,320
how devices are communicating and what

139
00:05:20,320 --> 00:05:21,919
they are sending

140
00:05:21,919 --> 00:05:23,840
this is likely that the parts of the

141
00:05:23,840 --> 00:05:25,919
communication will be encrypted

142
00:05:25,919 --> 00:05:28,320
and we need our binary analysis or a

143
00:05:28,320 --> 00:05:30,400
machine in the middle proxy to break the

144
00:05:30,400 --> 00:05:32,960
encryption

145
00:05:33,919 --> 00:05:36,240
every wireless protocol needs to access

146
00:05:36,240 --> 00:05:38,560
some sort of secrets to protect the

147
00:05:38,560 --> 00:05:40,960
communication with the other peer all

148
00:05:40,960 --> 00:05:43,360
secrets keys certificates and more are

149
00:05:43,360 --> 00:05:45,199
stored in the keychain

150
00:05:45,199 --> 00:05:47,440
the keychain is a secure storage

151
00:05:47,440 --> 00:05:49,680
which protects all items from access by

152
00:05:49,680 --> 00:05:50,840
a malicious

153
00:05:50,840 --> 00:05:53,039
process gaining full access to the

154
00:05:53,039 --> 00:05:55,039
keychain requires to disable system

155
00:05:55,039 --> 00:05:57,120
integrity protection on a mac or to

156
00:05:57,120 --> 00:05:59,759
jailbreak an iphone after this all keys

157
00:05:59,759 --> 00:06:02,400
can be accessed and exported for further

158
00:06:02,400 --> 00:06:04,638
use

159
00:06:05,520 --> 00:06:07,680
all these steps shown require a lot of

160
00:06:07,680 --> 00:06:09,199
manual work

161
00:06:09,199 --> 00:06:11,039
we wanted to automate parts of this

162
00:06:11,039 --> 00:06:12,639
process and therefore developed a

163
00:06:12,639 --> 00:06:14,479
toolkit that helps us with common

164
00:06:14,479 --> 00:06:16,880
reverse engineering tasks

165
00:06:16,880 --> 00:06:18,800
in the toolkit we include three tools

166
00:06:18,800 --> 00:06:20,400
for now

167
00:06:20,400 --> 00:06:22,080
the first one helps with identifying

168
00:06:22,080 --> 00:06:24,240
relevant processes frameworks and code

169
00:06:24,240 --> 00:06:26,080
sections by analyzing the system as a

170
00:06:26,080 --> 00:06:28,319
whole

171
00:06:28,319 --> 00:06:30,240
the second hooks into methods that

172
00:06:30,240 --> 00:06:32,400
encrypt or decrypt continuity messages

173
00:06:32,400 --> 00:06:35,840
and prints them in plain text

174
00:06:36,160 --> 00:06:38,479
and the third injects methods that

175
00:06:38,479 --> 00:06:40,319
access the keychain and export all

176
00:06:40,319 --> 00:06:42,720
secrets that are accessed by a binary

177
00:06:42,720 --> 00:06:45,520
automatically

178
00:06:47,120 --> 00:06:49,120
in our last section we demonstrate our

179
00:06:49,120 --> 00:06:51,039
findings in detail on the application of

180
00:06:51,039 --> 00:06:52,960
our approach on apple's wi-fi password

181
00:06:52,960 --> 00:06:54,639
sharing

182
00:06:54,639 --> 00:06:56,720
we applied our structured approach to

183
00:06:56,720 --> 00:06:58,560
analyze apple's handoff and universal

184
00:06:58,560 --> 00:07:00,720
clipboard services as well as the wifi

185
00:07:00,720 --> 00:07:02,639
password sharing service

186
00:07:02,639 --> 00:07:04,000
first of all we recover the

187
00:07:04,000 --> 00:07:06,720
specification of the involved protocols

188
00:07:06,720 --> 00:07:08,639
and then we scrunitize these protocols

189
00:07:08,639 --> 00:07:11,120
for security and privacy vulnerabilities

190
00:07:11,120 --> 00:07:14,479
and we found several exploitable issues

191
00:07:14,479 --> 00:07:16,400
first we discovered a tracking attack on

192
00:07:16,400 --> 00:07:18,880
randomized identifiers used in messages

193
00:07:18,880 --> 00:07:22,240
sent over awtl when using handoff

194
00:07:22,240 --> 00:07:24,160
the identifiers did not change in the

195
00:07:24,160 --> 00:07:26,160
same interval which allowed us to

196
00:07:26,160 --> 00:07:28,479
identify devices across multiple

197
00:07:28,479 --> 00:07:31,440
randomization intervals

198
00:07:31,440 --> 00:07:33,280
second a denial of service attack on

199
00:07:33,280 --> 00:07:35,599
handoff is possible by using a group's

200
00:07:35,599 --> 00:07:37,440
attack on the authentication tag used

201
00:07:37,440 --> 00:07:40,960
for aes and galois counter mode

202
00:07:40,960 --> 00:07:43,039
third martinette all have discovered a

203
00:07:43,039 --> 00:07:44,720
tracking attack by using the linear

204
00:07:44,720 --> 00:07:47,520
initialization vector vector

205
00:07:47,520 --> 00:07:50,879
used in the hand of aes encryption

206
00:07:50,879 --> 00:07:53,360
and fourth we discovered a minor parsing

207
00:07:53,360 --> 00:07:55,280
issue in the wifi password training that

208
00:07:55,280 --> 00:07:57,520
would cause the settings up on ios to

209
00:07:57,520 --> 00:07:59,199
crash

210
00:07:59,199 --> 00:08:01,039
finally we found that wi-fi password

211
00:08:01,039 --> 00:08:03,039
sharing is susceptible to unauthorized

212
00:08:03,039 --> 00:08:06,240
or automatic password entry

213
00:08:06,240 --> 00:08:08,080
this allows an attacker to connect a

214
00:08:08,080 --> 00:08:09,919
victim to an attacker controlled wi-fi

215
00:08:09,919 --> 00:08:12,560
network we will explain this issue and

216
00:08:12,560 --> 00:08:15,360
then fall away

217
00:08:15,759 --> 00:08:17,680
with the wifi password sharing service

218
00:08:17,680 --> 00:08:19,520
apple devices can share the password of

219
00:08:19,520 --> 00:08:22,479
a known wifi network with their contacts

220
00:08:22,479 --> 00:08:24,400
for example when inviting friends over

221
00:08:24,400 --> 00:08:26,319
to your house you can easily let them

222
00:08:26,319 --> 00:08:28,960
access your own wifi network

223
00:08:28,960 --> 00:08:31,599
from a protocol perspective users first

224
00:08:31,599 --> 00:08:33,279
select the wifi network that they want

225
00:08:33,279 --> 00:08:35,679
to connect to and then they are prompted

226
00:08:35,679 --> 00:08:38,320
to enter the password

227
00:08:38,320 --> 00:08:40,559
at the same time the requesting device

228
00:08:40,559 --> 00:08:42,320
emits a bluetooth advertisement to

229
00:08:42,320 --> 00:08:45,279
notify other nearby devices that it

230
00:08:45,279 --> 00:08:47,040
requires a password

231
00:08:47,040 --> 00:08:49,279
this advertisement contains hashes of

232
00:08:49,279 --> 00:08:51,360
both the network name and the requesting

233
00:08:51,360 --> 00:08:53,760
device's contact identifiers such as

234
00:08:53,760 --> 00:08:57,360
email addresses or phone numbers

235
00:08:57,519 --> 00:08:59,839
if a nearby device knows the password

236
00:08:59,839 --> 00:09:01,519
both devices set up a bluetooth

237
00:09:01,519 --> 00:09:03,680
connection the granting device makes

238
00:09:03,680 --> 00:09:05,360
sure that it knows the owner of the

239
00:09:05,360 --> 00:09:07,600
requesting device for this the

240
00:09:07,600 --> 00:09:10,800
requesting device sends its contact ids

241
00:09:10,800 --> 00:09:12,480
in the hashed and signed form to the

242
00:09:12,480 --> 00:09:15,040
content to the grantor

243
00:09:15,040 --> 00:09:18,480
this behavior is similar to airdrop

244
00:09:18,480 --> 00:09:20,240
if the granting device has the

245
00:09:20,240 --> 00:09:22,320
requesting device in its contacts the

246
00:09:22,320 --> 00:09:24,399
user can choose to share the password

247
00:09:24,399 --> 00:09:26,080
then the password will be sent over the

248
00:09:26,080 --> 00:09:28,640
existing bluetooth connection

249
00:09:28,640 --> 00:09:30,880
this schema can be attacked because only

250
00:09:30,880 --> 00:09:32,320
the granter is validating the

251
00:09:32,320 --> 00:09:34,800
authenticity the requesting device does

252
00:09:34,800 --> 00:09:36,720
not check if the receive password is

253
00:09:36,720 --> 00:09:38,399
from a trusted party

254
00:09:38,399 --> 00:09:40,399
to exploit this an attacker would set up

255
00:09:40,399 --> 00:09:42,720
a controlled wi-fi access point

256
00:09:42,720 --> 00:09:45,279
this access point uses the same ssid as

257
00:09:45,279 --> 00:09:47,760
a nearby wi-fi network but ascending

258
00:09:47,760 --> 00:09:50,720
with a stronger transmit power an iphone

259
00:09:50,720 --> 00:09:52,720
that wants to connect your wifi network

260
00:09:52,720 --> 00:09:54,959
will only show the access point

261
00:09:54,959 --> 00:09:57,360
with the strongest signal and therefore

262
00:09:57,360 --> 00:10:00,880
only show the attacker's network

263
00:10:00,880 --> 00:10:02,720
when the user selects the network to

264
00:10:02,720 --> 00:10:05,200
connect to it will automatically start

265
00:10:05,200 --> 00:10:07,839
wi-fi password sharing in the background

266
00:10:07,839 --> 00:10:09,680
the attacker performs the handshake and

267
00:10:09,680 --> 00:10:11,440
shares the passphrase to the malicious

268
00:10:11,440 --> 00:10:13,920
network this works because only the

269
00:10:13,920 --> 00:10:15,760
requesting device needs to authenticate

270
00:10:15,760 --> 00:10:17,920
itself to the attacker the attacker's

271
00:10:17,920 --> 00:10:19,680
contact identifiers are not checked by

272
00:10:19,680 --> 00:10:22,880
the requesting device

273
00:10:23,200 --> 00:10:25,200
a user is not able to mitigate this

274
00:10:25,200 --> 00:10:27,839
issue by declining a received passphrase

275
00:10:27,839 --> 00:10:29,760
the iphone will connect to miniature's

276
00:10:29,760 --> 00:10:32,000
network automatically the attacker

277
00:10:32,000 --> 00:10:34,000
enters now a machine in the middle

278
00:10:34,000 --> 00:10:35,839
position

279
00:10:35,839 --> 00:10:37,839
they are able to perform secondary

280
00:10:37,839 --> 00:10:39,600
attacks like dns spoofing or

281
00:10:39,600 --> 00:10:41,440
compromising the entire system via

282
00:10:41,440 --> 00:10:42,959
browser exploit

283
00:10:42,959 --> 00:10:44,880
this vulnerability is based in the

284
00:10:44,880 --> 00:10:46,959
protocol and has not been fixed since

285
00:10:46,959 --> 00:10:49,040
our initial report to apple in early

286
00:10:49,040 --> 00:10:51,200
2020

287
00:10:51,200 --> 00:10:53,279
as part of this paper

288
00:10:53,279 --> 00:10:54,880
we have released five open source

289
00:10:54,880 --> 00:10:56,560
software artifacts

290
00:10:56,560 --> 00:10:58,480
among them are the automatic reverse

291
00:10:58,480 --> 00:11:00,079
engineering toolkit that we discussed

292
00:11:00,079 --> 00:11:01,920
earlier as well as an open

293
00:11:01,920 --> 00:11:03,839
re-implementation of apple's wi-fi

294
00:11:03,839 --> 00:11:05,839
password sharing protocol that has

295
00:11:05,839 --> 00:11:08,480
become quite popular on github

296
00:11:08,480 --> 00:11:09,920
we have discovered four distinct

297
00:11:09,920 --> 00:11:11,600
vulnerabilities in apple's wireless

298
00:11:11,600 --> 00:11:12,880
ecosystem

299
00:11:12,880 --> 00:11:15,040
we propose practical mitigations for all

300
00:11:15,040 --> 00:11:17,680
of them as well for one previously

301
00:11:17,680 --> 00:11:19,360
discovered flaw

302
00:11:19,360 --> 00:11:21,360
so far apple has fixed two of these

303
00:11:21,360 --> 00:11:24,880
issues but three of them remain unfixed

304
00:11:24,880 --> 00:11:27,040
using our existing expertise we have

305
00:11:27,040 --> 00:11:28,399
looked and will look

306
00:11:28,399 --> 00:11:30,240
at other interesting systems and

307
00:11:30,240 --> 00:11:32,560
protocols including the proprietary find

308
00:11:32,560 --> 00:11:34,880
my network a crowdsourced location

309
00:11:34,880 --> 00:11:36,560
tracking system

310
00:11:36,560 --> 00:11:41,239
now thank you for attending our talk

311
00:11:48,160 --> 00:11:50,240
you

