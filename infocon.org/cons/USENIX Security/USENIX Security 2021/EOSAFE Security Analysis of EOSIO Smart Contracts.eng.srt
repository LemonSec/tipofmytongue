1
00:00:08,240 --> 00:00:10,480
hi everyone my name is

2
00:00:10,480 --> 00:00:12,639
from picking university today i will

3
00:00:12,639 --> 00:00:13,840
give a

4
00:00:13,840 --> 00:00:16,560
presentation of our work using security

5
00:00:16,560 --> 00:00:20,000
analysis of usio smart contracts

6
00:00:20,000 --> 00:00:23,199
first i will take a talk about our works

7
00:00:23,199 --> 00:00:26,640
motivation usio is the first well-known

8
00:00:26,640 --> 00:00:28,560
blockchain that adopts depos as

9
00:00:28,560 --> 00:00:31,119
consensus algorithm the depos can make

10
00:00:31,119 --> 00:00:34,320
the tps of us io tens or even hundreds

11
00:00:34,320 --> 00:00:37,200
times of ethereum than bitcoins

12
00:00:37,200 --> 00:00:40,399
besides the highest market cap of us io

13
00:00:40,399 --> 00:00:43,600
has reached up to nearly 18 billion u.s

14
00:00:43,600 --> 00:00:46,960
daughter in april 20 18 and the second

15
00:00:46,960 --> 00:00:50,000
peak at the red arrow industries

16
00:00:50,000 --> 00:00:52,960
also reached nearly 14 billion us dollar

17
00:00:52,960 --> 00:00:54,160
in this month

18
00:00:54,160 --> 00:00:57,039
the up ecosystem was extremely active

19
00:00:57,039 --> 00:00:59,840
only three months is after its launch

20
00:00:59,840 --> 00:01:02,000
the daily day of users and transaction

21
00:01:02,000 --> 00:01:05,119
volume has surpassed the ethereums

22
00:01:05,119 --> 00:01:06,799
which is one of the most famous

23
00:01:06,799 --> 00:01:09,600
platforms that supports the app

24
00:01:09,600 --> 00:01:11,840
therefore such a high-value platform

25
00:01:11,840 --> 00:01:14,560
would definitely attract malicious users

26
00:01:14,560 --> 00:01:17,040
to hack money in smart contracts for

27
00:01:17,040 --> 00:01:20,640
example in december 2018 u.s bad dice

28
00:01:20,640 --> 00:01:23,119
was suffered an attack against rollback

29
00:01:23,119 --> 00:01:26,640
vulnerability this leads to nearly 200

30
00:01:26,640 --> 00:01:29,759
000 u.s tokens financial loss

31
00:01:29,759 --> 00:01:32,079
according to our data set they have been

32
00:01:32,079 --> 00:01:35,119
more than 100 times of attacks

33
00:01:35,119 --> 00:01:37,040
against the types of vulnerabilities

34
00:01:37,040 --> 00:01:39,759
which have resulted from developers of

35
00:01:39,759 --> 00:01:43,520
smart contracts or us ios design flaws

36
00:01:43,520 --> 00:01:45,520
in ethereum the vulnerabilities and

37
00:01:45,520 --> 00:01:48,159
attacks also exist however there are

38
00:01:48,159 --> 00:01:50,560
dozens of tools that are used to detect

39
00:01:50,560 --> 00:01:53,040
types of vulnerabilities in serum smart

40
00:01:53,040 --> 00:01:55,280
contracts for example some

41
00:01:55,280 --> 00:01:57,920
representative work like authoris

42
00:01:57,920 --> 00:02:00,799
securify to user adopts kind of

43
00:02:00,799 --> 00:02:02,880
programming analysis method to analyze

44
00:02:02,880 --> 00:02:04,960
the exam smart contracts

45
00:02:04,960 --> 00:02:08,160
however in usio prior to our work the

46
00:02:08,160 --> 00:02:10,318
automated vulnerability scanner is much

47
00:02:10,318 --> 00:02:12,560
more or less there are a few well-known

48
00:02:12,560 --> 00:02:14,879
tools yet

49
00:02:14,879 --> 00:02:17,599
next we will briefly introduce some

50
00:02:17,599 --> 00:02:19,520
background information of usi smart

51
00:02:19,520 --> 00:02:21,599
contract

52
00:02:21,599 --> 00:02:24,080
smart contract is written in c plus plus

53
00:02:24,080 --> 00:02:26,959
and compiles into webassembly by codes

54
00:02:26,959 --> 00:02:28,959
the figure on the right side depicts a

55
00:02:28,959 --> 00:02:31,440
specific function named apply this

56
00:02:31,440 --> 00:02:33,760
function is a dispatcher handling the

57
00:02:33,760 --> 00:02:37,120
received invocation notification

58
00:02:37,120 --> 00:02:40,160
the signature of applied fix it takes

59
00:02:40,160 --> 00:02:43,200
three arguments receiver code and action

60
00:02:43,200 --> 00:02:44,879
respectively

61
00:02:44,879 --> 00:02:47,440
corresponding to the recipient name the

62
00:02:47,440 --> 00:02:50,879
count in which the kodi is executed and

63
00:02:50,879 --> 00:02:54,720
the name of targeted function

64
00:02:54,879 --> 00:02:57,040
therefore transferring us token is a

65
00:02:57,040 --> 00:02:59,120
little different with the theorem the

66
00:02:59,120 --> 00:03:02,239
upper part is a normal situation first

67
00:03:02,239 --> 00:03:04,159
the user has to invoke the transfer

68
00:03:04,159 --> 00:03:06,480
function in usio.token

69
00:03:06,480 --> 00:03:08,800
to make a request to transfer money to

70
00:03:08,800 --> 00:03:11,440
the app once the official account

71
00:03:11,440 --> 00:03:13,920
updates the balances of the initiator

72
00:03:13,920 --> 00:03:17,040
and the recipient it will notify both of

73
00:03:17,040 --> 00:03:20,080
them last as the notification

74
00:03:20,080 --> 00:03:22,400
notification is initiated in transfer

75
00:03:22,400 --> 00:03:24,480
function the apply will dispatch a

76
00:03:24,480 --> 00:03:27,760
notification to the dx transfer function

77
00:03:27,760 --> 00:03:30,400
note that all the code fields in first

78
00:03:30,400 --> 00:03:33,200
three steps stay unchanged as the

79
00:03:33,200 --> 00:03:36,400
notification will not change the code

80
00:03:36,400 --> 00:03:38,959
however the lower part shows an attack

81
00:03:38,959 --> 00:03:41,360
against the fake us vulnerability

82
00:03:41,360 --> 00:03:44,000
specifically malicious user would

83
00:03:44,000 --> 00:03:46,799
transfer fake us token through another

84
00:03:46,799 --> 00:03:50,799
account like us.token1

85
00:03:50,799 --> 00:03:53,760
this eos token is worthless but the

86
00:03:53,760 --> 00:03:55,840
notification is initiated in the

87
00:03:55,840 --> 00:03:57,920
transfer function it can also be

88
00:03:57,920 --> 00:04:00,560
dispatched to the recipient's transfer

89
00:04:00,560 --> 00:04:01,920
function

90
00:04:01,920 --> 00:04:04,640
we call this kind of vulnerability as

91
00:04:04,640 --> 00:04:08,238
fake us vulnerability

92
00:04:08,640 --> 00:04:11,120
except for the fake us we also focused

93
00:04:11,120 --> 00:04:13,360
on three other vulnerabilities fake

94
00:04:13,360 --> 00:04:16,000
receipts rollback and missing permission

95
00:04:16,000 --> 00:04:18,478
check all these four vulnerabilities are

96
00:04:18,478 --> 00:04:20,639
commonly emerged in the interaction

97
00:04:20,639 --> 00:04:22,639
between users and the apps

98
00:04:22,639 --> 00:04:24,960
therefore implementing a framework to

99
00:04:24,960 --> 00:04:27,280
detect the vulnerabilities in us io

100
00:04:27,280 --> 00:04:30,400
smart contract is necessary and urgent

101
00:04:30,400 --> 00:04:33,199
we decided to use symbolic execution to

102
00:04:33,199 --> 00:04:35,360
recover semantic information to

103
00:04:35,360 --> 00:04:37,759
automatically identify if the current

104
00:04:37,759 --> 00:04:40,240
smart contract is vulnerable to any of

105
00:04:40,240 --> 00:04:43,919
these four types of vulnerabilities

106
00:04:43,919 --> 00:04:46,479
however there are many two challenges

107
00:04:46,479 --> 00:04:48,800
first existing tools on detecting

108
00:04:48,800 --> 00:04:51,280
vulnerabilities in serum smart contracts

109
00:04:51,280 --> 00:04:54,800
cannot be directly adopted in detecting

110
00:04:54,800 --> 00:04:57,840
vulnerabilities in us io smart contracts

111
00:04:57,840 --> 00:05:00,080
this is because the web assembly by code

112
00:05:00,080 --> 00:05:02,320
is much more complicated than the

113
00:05:02,320 --> 00:05:04,720
ethereum's smart contracts

114
00:05:04,720 --> 00:05:05,759
the com

115
00:05:05,759 --> 00:05:08,960
complexity does not rely on reflects on

116
00:05:08,960 --> 00:05:11,759
the amount and a variety of instructions

117
00:05:11,759 --> 00:05:14,639
but also on the control flow which often

118
00:05:14,639 --> 00:05:17,120
contains multi-level nested loops and

119
00:05:17,120 --> 00:05:19,120
the vulnerabilities heavily rely on

120
00:05:19,120 --> 00:05:22,720
semantic information to be verified

121
00:05:22,720 --> 00:05:25,520
secondly the symbolic execution has some

122
00:05:25,520 --> 00:05:27,840
inherent challenges including memory

123
00:05:27,840 --> 00:05:30,800
modelling external dependency and pass

124
00:05:30,800 --> 00:05:33,840
explosion specifically if the address is

125
00:05:33,840 --> 00:05:36,400
a symbol how to effectively

126
00:05:36,400 --> 00:05:39,199
and precisely retrieve and store data

127
00:05:39,199 --> 00:05:40,960
moreover the source code even the

128
00:05:40,960 --> 00:05:43,440
bytecode of the library function cannot

129
00:05:43,440 --> 00:05:44,800
be obtained

130
00:05:44,800 --> 00:05:46,960
how to emulate this function's behavior

131
00:05:46,960 --> 00:05:49,360
last the past explosion can

132
00:05:49,360 --> 00:05:51,919
significantly consume these resources

133
00:05:51,919 --> 00:05:54,000
and increase the analyzing time

134
00:05:54,000 --> 00:05:55,680
especially when encountering the

135
00:05:55,680 --> 00:05:57,759
multi-level nested loops

136
00:05:57,759 --> 00:06:00,639
such how to address these two challenges

137
00:06:00,639 --> 00:06:04,080
are mainly focused by our framework

138
00:06:04,080 --> 00:06:08,160
we design and implemented usa for tool

139
00:06:08,160 --> 00:06:10,560
to automatically detect mentioned four

140
00:06:10,560 --> 00:06:13,120
types of vulnerabilities in using smart

141
00:06:13,120 --> 00:06:14,319
contract

142
00:06:14,319 --> 00:06:16,800
eusafe is composed of three key

143
00:06:16,800 --> 00:06:19,039
components webassembly symbolic

144
00:06:19,039 --> 00:06:22,560
execution engine eusio library emulator

145
00:06:22,560 --> 00:06:25,600
and vulnerability scanner it takes the

146
00:06:25,600 --> 00:06:28,080
pre-processed smart contract as input

147
00:06:28,080 --> 00:06:30,560
and generates a report by symbolically

148
00:06:30,560 --> 00:06:32,639
excuse this contract

149
00:06:32,639 --> 00:06:34,880
next we will briefly introduce these

150
00:06:34,880 --> 00:06:38,000
three components

151
00:06:38,080 --> 00:06:40,880
first the most important component is

152
00:06:40,880 --> 00:06:42,000
the

153
00:06:42,000 --> 00:06:45,199
symbolic execution engine we implemented

154
00:06:45,199 --> 00:06:45,880
all

155
00:06:45,880 --> 00:06:48,800
172 instructions with the help of bit

156
00:06:48,800 --> 00:06:51,599
vector use this three also during the

157
00:06:51,599 --> 00:06:54,160
symbolic execution it traverses all the

158
00:06:54,160 --> 00:06:55,840
possible passes

159
00:06:55,840 --> 00:06:57,759
each physical path corresponds to a

160
00:06:57,759 --> 00:07:00,080
state maintaining the data structure in

161
00:07:00,080 --> 00:07:02,800
webassembly by code to address the past

162
00:07:02,800 --> 00:07:05,840
explosion problem we export two options

163
00:07:05,840 --> 00:07:08,080
timeouts and depths to limit the

164
00:07:08,080 --> 00:07:10,000
analyzing time and the depths of call

165
00:07:10,000 --> 00:07:11,599
stack

166
00:07:11,599 --> 00:07:14,160
experiments show that this heuristic

167
00:07:14,160 --> 00:07:16,960
approach is simple but efficient

168
00:07:16,960 --> 00:07:19,759
also to address memory modeling problem

169
00:07:19,759 --> 00:07:22,000
we adopt a mapping structure to mimic

170
00:07:22,000 --> 00:07:24,560
the memory area to obtain a precise and

171
00:07:24,560 --> 00:07:28,400
efficient result but this structure will

172
00:07:28,400 --> 00:07:30,639
import memory overlap problem and the

173
00:07:30,639 --> 00:07:31,919
figurations

174
00:07:31,919 --> 00:07:34,960
so we also propose a formally verified

175
00:07:34,960 --> 00:07:37,599
memory merging algorithm to address this

176
00:07:37,599 --> 00:07:39,599
problem

177
00:07:39,599 --> 00:07:41,680
and we also try to address the external

178
00:07:41,680 --> 00:07:44,639
dependency issue to be specific after

179
00:07:44,639 --> 00:07:46,879
manually checking the contracts in our

180
00:07:46,879 --> 00:07:49,360
benchmark we filtered out

181
00:07:49,360 --> 00:07:51,840
commonly used library functions then

182
00:07:51,840 --> 00:07:53,919
according to their functionality we

183
00:07:53,919 --> 00:07:56,879
divided them into five categories as the

184
00:07:56,879 --> 00:07:58,560
right figure shows

185
00:07:58,560 --> 00:08:00,879
due to the lack of their implementation

186
00:08:00,879 --> 00:08:03,120
in bicone formats we modeled their

187
00:08:03,120 --> 00:08:05,280
behavior according to their released

188
00:08:05,280 --> 00:08:07,840
source code in its official rapport

189
00:08:07,840 --> 00:08:10,400
moreover if an external function is not

190
00:08:10,400 --> 00:08:12,960
modeled during the symbolic execution we

191
00:08:12,960 --> 00:08:15,680
use the symbols to balance the stack to

192
00:08:15,680 --> 00:08:18,479
continue the analysis

193
00:08:18,479 --> 00:08:20,639
last we implemented a scanner which

194
00:08:20,639 --> 00:08:22,960
consists of two steps locating

195
00:08:22,960 --> 00:08:25,280
suspicious functions and detecting

196
00:08:25,280 --> 00:08:26,560
vulnerability

197
00:08:26,560 --> 00:08:28,879
therefore the scanner can firstly use

198
00:08:28,879 --> 00:08:30,879
heuristic strategies to locate the

199
00:08:30,879 --> 00:08:33,200
possible vulnerable function then our

200
00:08:33,200 --> 00:08:35,760
tool will symbolically execute that

201
00:08:35,760 --> 00:08:37,679
function and record all its visible

202
00:08:37,679 --> 00:08:38,719
paths

203
00:08:38,719 --> 00:08:41,120
with the help of each pass constraints

204
00:08:41,120 --> 00:08:44,000
the tool could identify if the contract

205
00:08:44,000 --> 00:08:45,839
is vulnerable to a certain type of

206
00:08:45,839 --> 00:08:47,600
vulnerability

207
00:08:47,600 --> 00:08:50,240
for example the right formula explains

208
00:08:50,240 --> 00:08:53,360
the way of how we prove the existence of

209
00:08:53,360 --> 00:08:56,240
fake us vulnerability the implementation

210
00:08:56,240 --> 00:08:58,640
of standard reflects good scalability

211
00:08:58,640 --> 00:09:01,200
which enables other researchers to

212
00:09:01,200 --> 00:09:03,519
extend our work and achieve their own

213
00:09:03,519 --> 00:09:06,160
detectors

214
00:09:06,399 --> 00:09:08,560
as we mentioned before we constructed a

215
00:09:08,560 --> 00:09:10,720
benchmark to evaluate the performance of

216
00:09:10,720 --> 00:09:13,200
usa to be specific we built the

217
00:09:13,200 --> 00:09:14,959
benchmark by collecting official

218
00:09:14,959 --> 00:09:18,160
announcements cryptocurrency forums and

219
00:09:18,160 --> 00:09:20,399
technical articles and blocks the

220
00:09:20,399 --> 00:09:23,519
benchmark consists of 52 contracts we

221
00:09:23,519 --> 00:09:26,560
have conducted manually check to avoid

222
00:09:26,560 --> 00:09:28,800
the attack was due to other factors

223
00:09:28,800 --> 00:09:30,399
rather than code flaws in smart

224
00:09:30,399 --> 00:09:31,680
contracts

225
00:09:31,680 --> 00:09:34,080
moreover we have released the benchmark

226
00:09:34,080 --> 00:09:36,560
in my repo on github the evaluation

227
00:09:36,560 --> 00:09:38,720
results illustrates that usain did a

228
00:09:38,720 --> 00:09:41,040
good job on detecting vulnerabilities

229
00:09:41,040 --> 00:09:43,399
reaching up to more than 80

230
00:09:43,399 --> 00:09:47,279
98 percent f1 score also we compared

231
00:09:47,279 --> 00:09:49,680
eosif with the traditional symbolic

232
00:09:49,680 --> 00:09:51,200
execution toolkit

233
00:09:51,200 --> 00:09:53,600
by converting webassembly by code to c

234
00:09:53,600 --> 00:09:56,959
code the results show that you save out

235
00:09:56,959 --> 00:09:59,440
performs significantly and the cleave

236
00:09:59,440 --> 00:10:02,720
solution has some drawbacks

237
00:10:02,720 --> 00:10:05,120
after proving the performance of yosaif

238
00:10:05,120 --> 00:10:08,240
we evaluated each of our data sets which

239
00:10:08,240 --> 00:10:10,399
includes all the contracts deployed

240
00:10:10,399 --> 00:10:14,240
before mid-november 2019

241
00:10:14,240 --> 00:10:18,399
more than 53 000 versions of 5000

242
00:10:18,399 --> 00:10:21,040
contracts a contract corresponding to

243
00:10:21,040 --> 00:10:23,200
multiple versions here is due to the

244
00:10:23,200 --> 00:10:25,760
contract in us io is updatable we

245
00:10:25,760 --> 00:10:28,160
collected all their versions here are

246
00:10:28,160 --> 00:10:30,640
some interesting results nearly half of

247
00:10:30,640 --> 00:10:32,800
smart contracts were once vulnerable to

248
00:10:32,800 --> 00:10:35,519
at least one kind of vulnerability fake

249
00:10:35,519 --> 00:10:38,959
receipt is the most widespread one

250
00:10:38,959 --> 00:10:41,200
as for the affected versions missing

251
00:10:41,200 --> 00:10:43,120
permission track vulnerability impacts

252
00:10:43,120 --> 00:10:45,440
more than

253
00:10:45,440 --> 00:10:45,760
with others

254
00:10:45,760 --> 00:10:48,480
vulnerable versions of contracts we can

255
00:10:48,480 --> 00:10:50,640
further evaluate how long it will take

256
00:10:50,640 --> 00:10:53,440
to fix vulnerable in us io smart

257
00:10:53,440 --> 00:10:55,839
contracts on average patching

258
00:10:55,839 --> 00:10:57,839
vulnerability requires more than two

259
00:10:57,839 --> 00:11:00,079
weeks moreover as the rollback

260
00:11:00,079 --> 00:11:02,000
vulnerabilities only appeared in

261
00:11:02,000 --> 00:11:04,560
gambling smart contracts

262
00:11:04,560 --> 00:11:07,680
it is patched most timely what's more by

263
00:11:07,680 --> 00:11:10,079
analyzing if the latest version is

264
00:11:10,079 --> 00:11:12,079
vulnerable we figured out more than

265
00:11:12,079 --> 00:11:14,079
three quarters of smart contracts were

266
00:11:14,079 --> 00:11:16,160
still vulnerable especially the fake

267
00:11:16,160 --> 00:11:18,640
received vulnerability we have also

268
00:11:18,640 --> 00:11:20,560
performed other interesting evaluations

269
00:11:20,560 --> 00:11:23,760
which are detailed in our paper

270
00:11:23,760 --> 00:11:26,399
finally here are some takeaway messages

271
00:11:26,399 --> 00:11:28,720
for you guys we proposed the first

272
00:11:28,720 --> 00:11:30,480
symbolic execution engine for

273
00:11:30,480 --> 00:11:32,880
webassembly native code based on the

274
00:11:32,880 --> 00:11:35,120
engine we implemented an accurate and

275
00:11:35,120 --> 00:11:37,600
scalable framework eosif which

276
00:11:37,600 --> 00:11:39,600
outperforms the clean solution and

277
00:11:39,600 --> 00:11:42,240
detecting vulnerabilities in us io smart

278
00:11:42,240 --> 00:11:43,440
contracts

279
00:11:43,440 --> 00:11:45,760
also we constructed and released a

280
00:11:45,760 --> 00:11:48,800
manually retract benchmark evaluation on

281
00:11:48,800 --> 00:11:50,639
the benchmark illustrates promising

282
00:11:50,639 --> 00:11:53,360
performance on u6

283
00:11:53,360 --> 00:11:57,279
last we applied usa file over 53 000

284
00:11:57,279 --> 00:11:59,920
smart contracts which reveals serious

285
00:11:59,920 --> 00:12:03,839
security issues in the ecosystem

286
00:12:03,839 --> 00:12:06,320
at last i would like to express my

287
00:12:06,320 --> 00:12:08,720
appreciation to my co-authors anonymous

288
00:12:08,720 --> 00:12:11,360
reviewers and you guys if you have any

289
00:12:11,360 --> 00:12:13,920
following question please contact me by

290
00:12:13,920 --> 00:12:18,199
this email thank you

