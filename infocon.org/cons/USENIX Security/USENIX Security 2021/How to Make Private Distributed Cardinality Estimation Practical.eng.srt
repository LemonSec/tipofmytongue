1
00:00:08,240 --> 00:00:10,800
hello everyone it's my pleasure to

2
00:00:10,800 --> 00:00:13,440
present our work how to make a private

3
00:00:13,440 --> 00:00:15,599
distributed cardinality estimation

4
00:00:15,599 --> 00:00:17,600
practical and against differential

5
00:00:17,600 --> 00:00:19,279
privacy for free

6
00:00:19,279 --> 00:00:21,680
my name is chang yudong from newcastle

7
00:00:21,680 --> 00:00:24,480
university this is joint work with my

8
00:00:24,480 --> 00:00:27,039
colleagues at newcastle university

9
00:00:27,039 --> 00:00:29,840
guangzhou university nankai university

10
00:00:29,840 --> 00:00:33,199
and king's college london

11
00:00:33,600 --> 00:00:35,680
let me start from secure multi-party

12
00:00:35,680 --> 00:00:37,200
computation

13
00:00:37,200 --> 00:00:40,160
the problem we can solve with npc is

14
00:00:40,160 --> 00:00:41,200
this

15
00:00:41,200 --> 00:00:42,960
there are multiple parties

16
00:00:42,960 --> 00:00:45,360
each has a private input

17
00:00:45,360 --> 00:00:48,160
and they want to jointly evaluate a

18
00:00:48,160 --> 00:00:51,199
function f over their input

19
00:00:51,199 --> 00:00:53,600
but none of them want to disclose their

20
00:00:53,600 --> 00:00:56,399
inputs to the other parties

21
00:00:56,399 --> 00:00:59,520
this seems to be an impossible task

22
00:00:59,520 --> 00:01:01,199
but with mpc

23
00:01:01,199 --> 00:01:04,239
this becomes possible

24
00:01:04,239 --> 00:01:07,040
what the parties can do is they run a

25
00:01:07,040 --> 00:01:10,000
cryptographic protocol in the protocol

26
00:01:10,000 --> 00:01:12,880
they exchange encrypted messages

27
00:01:12,880 --> 00:01:15,280
and the function f gets evaluated

28
00:01:15,280 --> 00:01:18,720
blindly over all their inputs to produce

29
00:01:18,720 --> 00:01:20,720
the output

30
00:01:20,720 --> 00:01:22,960
at the end of the protocol each party

31
00:01:22,960 --> 00:01:24,320
gets an output

32
00:01:24,320 --> 00:01:26,560
and nothing else

33
00:01:26,560 --> 00:01:30,159
because npc allows us to do computation

34
00:01:30,159 --> 00:01:33,200
without seeing the actual inputs

35
00:01:33,200 --> 00:01:35,920
it has been proposed by many people to

36
00:01:35,920 --> 00:01:38,840
solve data privacy problems in many

37
00:01:38,840 --> 00:01:42,560
scenarios however to use mpc in the real

38
00:01:42,560 --> 00:01:45,840
world there are still many challenges

39
00:01:45,840 --> 00:01:47,920
one of the biggest challenge

40
00:01:47,920 --> 00:01:49,759
is big data

41
00:01:49,759 --> 00:01:52,799
because of its cryptographic nature

42
00:01:52,799 --> 00:01:56,719
npc is much slower than computation with

43
00:01:56,719 --> 00:01:58,479
plain text data

44
00:01:58,479 --> 00:02:01,360
if you only have a small amount of data

45
00:02:01,360 --> 00:02:03,600
then it's not a big problem

46
00:02:03,600 --> 00:02:06,320
but if you have a large amount of data

47
00:02:06,320 --> 00:02:08,800
then you are in trouble

48
00:02:08,800 --> 00:02:12,080
that means unless we can make mpc much

49
00:02:12,080 --> 00:02:15,200
more scalable there is no way we can use

50
00:02:15,200 --> 00:02:18,160
npc in the killer applications such as

51
00:02:18,160 --> 00:02:20,640
data mining and machine learning

52
00:02:20,640 --> 00:02:24,400
another big challenge is the inference

53
00:02:24,400 --> 00:02:27,440
although in mpc the parties cannot see

54
00:02:27,440 --> 00:02:30,080
directly the other party's inputs

55
00:02:30,080 --> 00:02:32,640
they can infer from the output and it

56
00:02:32,640 --> 00:02:35,120
only inputs something

57
00:02:35,120 --> 00:02:38,239
for example if alice and above they run

58
00:02:38,239 --> 00:02:42,560
a mpc protocol which add up their inputs

59
00:02:42,560 --> 00:02:44,480
then from the sum

60
00:02:44,480 --> 00:02:47,920
and its own inputs bob can figure out

61
00:02:47,920 --> 00:02:51,200
ali's input so

62
00:02:51,200 --> 00:02:53,920
even though cryptography is used

63
00:02:53,920 --> 00:02:56,480
privacy can still be violated

64
00:02:56,480 --> 00:02:58,480
and we need to think about how to

65
00:02:58,480 --> 00:03:02,959
protect against inference attacks

66
00:03:03,120 --> 00:03:05,760
to summarize our paper in one sentence

67
00:03:05,760 --> 00:03:09,280
we use sketches in npc

68
00:03:09,280 --> 00:03:11,519
for those who don't know sketches are

69
00:03:11,519 --> 00:03:14,159
small data structures that summarize

70
00:03:14,159 --> 00:03:15,840
massive data

71
00:03:15,840 --> 00:03:18,640
the size of sketches is small we can

72
00:03:18,640 --> 00:03:21,360
often compress the original data into

73
00:03:21,360 --> 00:03:24,799
log or constant space sketches

74
00:03:24,799 --> 00:03:27,519
then we can use sketches in computation

75
00:03:27,519 --> 00:03:30,159
to provide approximate answers to

76
00:03:30,159 --> 00:03:32,720
certain queries

77
00:03:32,720 --> 00:03:35,280
then what can we get by combining

78
00:03:35,280 --> 00:03:38,400
sketches and mpc together

79
00:03:38,400 --> 00:03:41,840
one thing obvious is we can get scalable

80
00:03:41,840 --> 00:03:43,440
mpc

81
00:03:43,440 --> 00:03:46,480
now because the input size is reduced to

82
00:03:46,480 --> 00:03:47,680
sublinear

83
00:03:47,680 --> 00:03:51,200
the cost of mpc is reduced to sublinear

84
00:03:51,200 --> 00:03:52,799
as well

85
00:03:52,799 --> 00:03:56,080
another thing that is not obvious at all

86
00:03:56,080 --> 00:03:59,280
is that when we use sketches and mpc

87
00:03:59,280 --> 00:04:02,959
together we can get differential privacy

88
00:04:02,959 --> 00:04:05,680
with differential privacy the mpc

89
00:04:05,680 --> 00:04:08,640
protocol is now secure against inference

90
00:04:08,640 --> 00:04:10,400
attacks

91
00:04:10,400 --> 00:04:13,519
let's talk about the technical details

92
00:04:13,519 --> 00:04:16,880
the mpc protocol in the paper is for the

93
00:04:16,880 --> 00:04:18,880
privates distributed cardinality

94
00:04:18,880 --> 00:04:21,040
estimation problem

95
00:04:21,040 --> 00:04:23,280
the problem is that the following there

96
00:04:23,280 --> 00:04:26,080
are n parties each has a set

97
00:04:26,080 --> 00:04:28,560
we want to find out how many distinct

98
00:04:28,560 --> 00:04:31,600
elements in the union of all sets

99
00:04:31,600 --> 00:04:34,800
we also want privacy which means in the

100
00:04:34,800 --> 00:04:37,360
process we don't want to leak any item

101
00:04:37,360 --> 00:04:38,479
directly

102
00:04:38,479 --> 00:04:40,880
and we also want to make it hard to

103
00:04:40,880 --> 00:04:44,240
infer whether a certain item is used in

104
00:04:44,240 --> 00:04:47,199
the protocol to produce outputs

105
00:04:47,199 --> 00:04:50,320
the sketch we use in the paper is fm

106
00:04:50,320 --> 00:04:52,240
sketch

107
00:04:52,240 --> 00:04:54,240
the structure of the sketch is quite

108
00:04:54,240 --> 00:04:55,199
simple

109
00:04:55,199 --> 00:04:56,800
a bit bad

110
00:04:56,800 --> 00:04:58,720
the size of the sketch

111
00:04:58,720 --> 00:05:00,880
is dependent on the cardinality to be

112
00:05:00,880 --> 00:05:02,560
estimated

113
00:05:02,560 --> 00:05:06,000
if the cardinality to be estimated is n

114
00:05:06,000 --> 00:05:08,560
then the size of the sketch is roughly

115
00:05:08,560 --> 00:05:11,919
log n plus a small constant

116
00:05:11,919 --> 00:05:15,280
initially all bits in the sketch

117
00:05:15,280 --> 00:05:17,280
are set to zero

118
00:05:17,280 --> 00:05:20,560
to counter a set or a multisets

119
00:05:20,560 --> 00:05:23,120
what we can do is we take the elements

120
00:05:23,120 --> 00:05:26,160
from the sets hash is and then we count

121
00:05:26,160 --> 00:05:29,120
how many zero bits are at the end of the

122
00:05:29,120 --> 00:05:30,720
hash value

123
00:05:30,720 --> 00:05:33,840
the number then is used as the index

124
00:05:33,840 --> 00:05:36,400
to set the corresponding bits to one in

125
00:05:36,400 --> 00:05:37,759
the sketch

126
00:05:37,759 --> 00:05:40,000
after processing all data

127
00:05:40,000 --> 00:05:41,759
we take the sketch

128
00:05:41,759 --> 00:05:43,520
and then we find out

129
00:05:43,520 --> 00:05:46,320
where is the first zero bit

130
00:05:46,320 --> 00:05:49,199
the index is denoted as z

131
00:05:49,199 --> 00:05:52,400
and we can estimate the cardinality by 2

132
00:05:52,400 --> 00:05:56,240
to the power of z divides a constant v

133
00:05:56,240 --> 00:05:59,759
if we just use one fm sketch to estimate

134
00:05:59,759 --> 00:06:03,840
then the estimation accuracy is not good

135
00:06:03,840 --> 00:06:06,479
what we do in practice is we build

136
00:06:06,479 --> 00:06:09,199
multiple fm sketches in parallel each

137
00:06:09,199 --> 00:06:12,400
using a different hash function

138
00:06:12,400 --> 00:06:15,680
then we can extract multiple z values

139
00:06:15,680 --> 00:06:17,919
and then we use the sum or more

140
00:06:17,919 --> 00:06:20,560
precisely the average

141
00:06:20,560 --> 00:06:23,440
to estimate the cardinality which gives

142
00:06:23,440 --> 00:06:26,479
us a more accurate result

143
00:06:26,479 --> 00:06:29,280
one last thing about fm sketch

144
00:06:29,280 --> 00:06:31,360
if we have multiple sets

145
00:06:31,360 --> 00:06:34,639
then for each set we can build fm sketch

146
00:06:34,639 --> 00:06:36,800
using the same hash function

147
00:06:36,800 --> 00:06:40,080
those fm skates can be merged together

148
00:06:40,080 --> 00:06:42,800
using bit-wise wall operation

149
00:06:42,800 --> 00:06:46,240
the result is the fm sketch that counts

150
00:06:46,240 --> 00:06:48,720
the union of all sets

151
00:06:48,720 --> 00:06:52,160
we build a protocol around fm sketches

152
00:06:52,160 --> 00:06:54,000
it works in this way

153
00:06:54,000 --> 00:06:55,680
there are n parties

154
00:06:55,680 --> 00:06:57,599
each has a sets

155
00:06:57,599 --> 00:06:59,840
and they share m different hash

156
00:06:59,840 --> 00:07:01,199
functions

157
00:07:01,199 --> 00:07:04,160
for each party they use their local sets

158
00:07:04,160 --> 00:07:07,919
to build m different fm sketches

159
00:07:07,919 --> 00:07:10,639
then the sketches are split into secret

160
00:07:10,639 --> 00:07:13,039
shares and the shares are sent to the

161
00:07:13,039 --> 00:07:15,440
computation party

162
00:07:15,440 --> 00:07:17,360
the computation party then used the

163
00:07:17,360 --> 00:07:21,280
secret shares as the inputs to run a mpc

164
00:07:21,280 --> 00:07:22,319
protocol

165
00:07:22,319 --> 00:07:24,880
in the protocol the fm sketches in the

166
00:07:24,880 --> 00:07:26,160
same colon

167
00:07:26,160 --> 00:07:30,319
are merged into a union fm sketch then

168
00:07:30,319 --> 00:07:33,599
from each union fm sketch a z value

169
00:07:33,599 --> 00:07:35,919
is extracted

170
00:07:35,919 --> 00:07:37,199
in the end

171
00:07:37,199 --> 00:07:40,000
the protocol outputs the sum of all z

172
00:07:40,000 --> 00:07:40,960
values

173
00:07:40,960 --> 00:07:43,759
and the sum can be used to estimate the

174
00:07:43,759 --> 00:07:45,680
union cardinality

175
00:07:45,680 --> 00:07:48,000
to implement this protocol we use the

176
00:07:48,000 --> 00:07:50,720
speeds npc framework

177
00:07:50,720 --> 00:07:53,440
speeds is a secret sharing based mpc

178
00:07:53,440 --> 00:07:54,639
framework

179
00:07:54,639 --> 00:07:57,440
we use speeds because it's efficient and

180
00:07:57,440 --> 00:08:01,599
it provides strong security guarantees

181
00:08:01,599 --> 00:08:03,919
here are some performance figures

182
00:08:03,919 --> 00:08:06,080
as we can see in the table

183
00:08:06,080 --> 00:08:08,639
for the total running time

184
00:08:08,639 --> 00:08:11,280
our protocol is very fast

185
00:08:11,280 --> 00:08:14,080
and it also scales very well because of

186
00:08:14,080 --> 00:08:16,639
its log complexity

187
00:08:16,639 --> 00:08:19,280
for the total communication costs

188
00:08:19,280 --> 00:08:22,240
we have the same observation

189
00:08:22,240 --> 00:08:25,039
that was about scalability how about

190
00:08:25,039 --> 00:08:26,960
differential privacy

191
00:08:26,960 --> 00:08:29,440
in our protocol if the cardinality to be

192
00:08:29,440 --> 00:08:32,000
estimated is large enough

193
00:08:32,000 --> 00:08:33,679
then the output is differentially

194
00:08:33,679 --> 00:08:35,360
private

195
00:08:35,360 --> 00:08:38,000
here differential privacy is obtained

196
00:08:38,000 --> 00:08:40,880
for free that means we don't need to add

197
00:08:40,880 --> 00:08:44,080
noise in the process of computation and

198
00:08:44,080 --> 00:08:46,480
we don't need to manipulate the outputs

199
00:08:46,480 --> 00:08:48,640
after the computation

200
00:08:48,640 --> 00:08:51,200
how is that possible the intuition is

201
00:08:51,200 --> 00:08:52,080
this

202
00:08:52,080 --> 00:08:55,200
the estimates from the fm sketch

203
00:08:55,200 --> 00:08:57,200
is approximate

204
00:08:57,200 --> 00:09:00,160
that means it's already uncertain to

205
00:09:00,160 --> 00:09:01,440
some degree

206
00:09:01,440 --> 00:09:03,839
and the uncertainty here can be used to

207
00:09:03,839 --> 00:09:05,760
replace the noise for differential

208
00:09:05,760 --> 00:09:07,120
privacy

209
00:09:07,120 --> 00:09:09,279
the result is interesting because

210
00:09:09,279 --> 00:09:12,720
neither npc nor fm skates can achieve

211
00:09:12,720 --> 00:09:15,279
differential privacy alone but when we

212
00:09:15,279 --> 00:09:17,200
put them together we can get

213
00:09:17,200 --> 00:09:19,920
differential privacy for free

214
00:09:19,920 --> 00:09:22,880
then how did we prove the protocol is

215
00:09:22,880 --> 00:09:24,560
differentially private

216
00:09:24,560 --> 00:09:27,440
in general to prove an algorithm that is

217
00:09:27,440 --> 00:09:29,279
differentially private

218
00:09:29,279 --> 00:09:31,519
what we need to show is

219
00:09:31,519 --> 00:09:34,399
for two sets that's different at most

220
00:09:34,399 --> 00:09:35,760
one elements

221
00:09:35,760 --> 00:09:37,680
the output distributions of the

222
00:09:37,680 --> 00:09:40,880
algorithm are closed almost everywhere

223
00:09:40,880 --> 00:09:43,920
except a small probability

224
00:09:43,920 --> 00:09:46,399
does this hold in practice

225
00:09:46,399 --> 00:09:48,880
here are some empirical results from

226
00:09:48,880 --> 00:09:50,560
simulation

227
00:09:50,560 --> 00:09:53,120
the curves in the diagram shows the

228
00:09:53,120 --> 00:09:56,880
output distribution of our protocol

229
00:09:56,880 --> 00:10:00,720
the blue line was produced using a sets

230
00:10:00,720 --> 00:10:03,120
that is of cardinality n

231
00:10:03,120 --> 00:10:05,920
and the red dotted line was produced

232
00:10:05,920 --> 00:10:08,560
using the same sets plus and additional

233
00:10:08,560 --> 00:10:10,079
elements

234
00:10:10,079 --> 00:10:11,839
but we can see

235
00:10:11,839 --> 00:10:15,360
the curves are getting closer and closer

236
00:10:15,360 --> 00:10:16,560
when n

237
00:10:16,560 --> 00:10:18,399
increases

238
00:10:18,399 --> 00:10:21,360
that means the output distributions from

239
00:10:21,360 --> 00:10:23,680
the neighboring data sets will

240
00:10:23,680 --> 00:10:26,880
eventually become close enough for

241
00:10:26,880 --> 00:10:30,640
differential privacy to hold

242
00:10:31,040 --> 00:10:32,959
the theoretical analysis is quite

243
00:10:32,959 --> 00:10:35,600
complex and i won't have time to go

244
00:10:35,600 --> 00:10:38,560
through it but you can find the details

245
00:10:38,560 --> 00:10:40,160
in the paper

246
00:10:40,160 --> 00:10:42,399
one last thing i want to show

247
00:10:42,399 --> 00:10:44,320
remember i said

248
00:10:44,320 --> 00:10:46,959
our protocol is differentially private

249
00:10:46,959 --> 00:10:49,600
if the cardinality to be estimated is

250
00:10:49,600 --> 00:10:50,880
large enough

251
00:10:50,880 --> 00:10:53,920
then how large is large enough

252
00:10:53,920 --> 00:10:57,279
here are some concrete numbers

253
00:10:57,279 --> 00:10:58,839
as we can see in the

254
00:10:58,839 --> 00:11:02,320
table for reasonable epsilon value and

255
00:11:02,320 --> 00:11:04,160
small delta

256
00:11:04,160 --> 00:11:06,399
the lower bound of the cardinality for

257
00:11:06,399 --> 00:11:08,560
differential privacy to hold

258
00:11:08,560 --> 00:11:11,439
is quite small

259
00:11:12,560 --> 00:11:15,839
now let me conclude my presentation

260
00:11:15,839 --> 00:11:18,000
we use the fm sketch

261
00:11:18,000 --> 00:11:22,079
in npc for pdce problems we found when

262
00:11:22,079 --> 00:11:25,600
using sketches in mpc we can greatly

263
00:11:25,600 --> 00:11:28,160
improve the scalability and we also

264
00:11:28,160 --> 00:11:31,360
found with surprise when using sketches

265
00:11:31,360 --> 00:11:33,519
and the mpc together we can get

266
00:11:33,519 --> 00:11:36,720
differential privacy for free

267
00:11:36,720 --> 00:11:38,720
that's all for today if you are

268
00:11:38,720 --> 00:11:41,040
interested you can find more details in

269
00:11:41,040 --> 00:11:43,360
our paper and i'm happy to take

270
00:11:43,360 --> 00:11:44,560
questions

271
00:11:44,560 --> 00:11:47,800
thank you

