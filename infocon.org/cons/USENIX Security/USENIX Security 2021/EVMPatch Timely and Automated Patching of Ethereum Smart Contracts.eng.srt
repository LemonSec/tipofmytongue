1
00:00:08,559 --> 00:00:10,719
welcome everyone

2
00:00:10,719 --> 00:00:12,639
today i'm going to talk to you about evm

3
00:00:12,639 --> 00:00:14,639
patch our work on timely patching of

4
00:00:14,639 --> 00:00:16,400
ethereum smart contracts using bytecode

5
00:00:16,400 --> 00:00:17,600
rewriting

6
00:00:17,600 --> 00:00:19,359
my name is michelle hodler i'm from

7
00:00:19,359 --> 00:00:21,279
university of duisburg essen and it's a

8
00:00:21,279 --> 00:00:24,400
collaboration with nec labs europe

9
00:00:24,400 --> 00:00:26,480
now when we started this project

10
00:00:26,480 --> 00:00:28,960
we really had one question how do you

11
00:00:28,960 --> 00:00:30,480
protect the smart contract after

12
00:00:30,480 --> 00:00:31,599
deployment

13
00:00:31,599 --> 00:00:33,280
right so

14
00:00:33,280 --> 00:00:34,960
imagine this you develop your smart

15
00:00:34,960 --> 00:00:36,559
contract you deploy to the blockchain

16
00:00:36,559 --> 00:00:38,239
you have a lot of users interacting with

17
00:00:38,239 --> 00:00:40,000
your smart contract and then

18
00:00:40,000 --> 00:00:41,600
you find

19
00:00:41,600 --> 00:00:43,840
out it has a security issue what do you

20
00:00:43,840 --> 00:00:45,920
do then in the traditional software

21
00:00:45,920 --> 00:00:47,600
setting you would say why don't you just

22
00:00:47,600 --> 00:00:50,079
deploy a patch right but in ethereum and

23
00:00:50,079 --> 00:00:52,079
many other blockchain platforms smart

24
00:00:52,079 --> 00:00:54,079
contracts are immutable so they can

25
00:00:54,079 --> 00:00:55,600
cannot be changed after they have been

26
00:00:55,600 --> 00:00:58,600
deployed

27
00:00:58,800 --> 00:01:00,480
we have a lot of prior work on

28
00:01:00,480 --> 00:01:02,640
vulnerability detection right

29
00:01:02,640 --> 00:01:04,879
so before you deploy a contract you

30
00:01:04,879 --> 00:01:07,040
should really use all of the tools

31
00:01:07,040 --> 00:01:09,520
available available

32
00:01:09,520 --> 00:01:11,840
to test your contract and to verify that

33
00:01:11,840 --> 00:01:13,600
it works correctly you can use symbolic

34
00:01:13,600 --> 00:01:15,439
execution here you can do static

35
00:01:15,439 --> 00:01:18,560
analysis here dynamic analysis and so on

36
00:01:18,560 --> 00:01:21,040
but the problem is assume you you deploy

37
00:01:21,040 --> 00:01:22,960
your contract right so and now two

38
00:01:22,960 --> 00:01:25,759
months later some new symbolic execution

39
00:01:25,759 --> 00:01:27,840
tool is released and it finds a

40
00:01:27,840 --> 00:01:31,439
vulnerability in your contract which

41
00:01:31,439 --> 00:01:33,759
no tool has found before

42
00:01:33,759 --> 00:01:35,119
what do you do then you have already

43
00:01:35,119 --> 00:01:36,799
deployed your contract

44
00:01:36,799 --> 00:01:38,960
bad luck

45
00:01:38,960 --> 00:01:41,280
also we also um

46
00:01:41,280 --> 00:01:43,759
observe a lot of incidents uh on the

47
00:01:43,759 --> 00:01:45,040
blockchain

48
00:01:45,040 --> 00:01:47,600
and for those incidents

49
00:01:47,600 --> 00:01:49,520
many of the smart contracts don't they

50
00:01:49,520 --> 00:01:52,320
don't really include any plan on how to

51
00:01:52,320 --> 00:01:54,960
react to incidents right so there is no

52
00:01:54,960 --> 00:01:57,520
no strategy for patching no strategy to

53
00:01:57,520 --> 00:01:59,840
deprecate the contract sometimes

54
00:01:59,840 --> 00:02:02,719
contracts are even used um months after

55
00:02:02,719 --> 00:02:04,880
public bug disclosure right

56
00:02:04,880 --> 00:02:07,039
so

57
00:02:07,280 --> 00:02:09,598
we need to enable smart contract

58
00:02:09,598 --> 00:02:12,239
developers to patch new issues that have

59
00:02:12,239 --> 00:02:14,480
been found after

60
00:02:14,480 --> 00:02:18,000
deployment of the smart contract

61
00:02:18,239 --> 00:02:20,879
now there are some strategies on

62
00:02:20,879 --> 00:02:22,480
how you can

63
00:02:22,480 --> 00:02:25,040
patch your smart contract

64
00:02:25,040 --> 00:02:26,959
um so the ethereum community came up

65
00:02:26,959 --> 00:02:28,959
with two primary

66
00:02:28,959 --> 00:02:30,720
strategies here

67
00:02:30,720 --> 00:02:34,959
we have the migration strategy where you

68
00:02:34,959 --> 00:02:37,840
deprecate your old contract you deploy a

69
00:02:37,840 --> 00:02:39,760
new contract which is a patched version

70
00:02:39,760 --> 00:02:42,400
of your contract and then you manually

71
00:02:42,400 --> 00:02:44,720
migrate the state from your old contract

72
00:02:44,720 --> 00:02:46,800
to your new contract so you have to

73
00:02:46,800 --> 00:02:49,040
develop your smart contract in a way

74
00:02:49,040 --> 00:02:51,840
such that it supports this migration and

75
00:02:51,840 --> 00:02:54,239
the migration itself is usually done

76
00:02:54,239 --> 00:02:56,959
by a developer

77
00:02:56,959 --> 00:02:58,800
now there's a second

78
00:02:58,800 --> 00:03:00,159
pattern

79
00:03:00,159 --> 00:03:01,519
you can actually

80
00:03:01,519 --> 00:03:04,400
achieve an upgradeable contract

81
00:03:04,400 --> 00:03:06,720
using a special code pattern which is

82
00:03:06,720 --> 00:03:09,519
called a proxy contract pattern

83
00:03:09,519 --> 00:03:11,360
so the idea here is you split your

84
00:03:11,360 --> 00:03:13,280
contract into two parts

85
00:03:13,280 --> 00:03:16,319
immutable proxy contract which forwards

86
00:03:16,319 --> 00:03:18,560
all transactions simply to the logic

87
00:03:18,560 --> 00:03:20,800
contract and the proxy contract is

88
00:03:20,800 --> 00:03:23,040
immutable is the public face of your

89
00:03:23,040 --> 00:03:24,959
contract and

90
00:03:24,959 --> 00:03:27,599
it the proxy contract

91
00:03:27,599 --> 00:03:30,239
can switch to a different logic contract

92
00:03:30,239 --> 00:03:31,920
so you as the maintainer of the smart

93
00:03:31,920 --> 00:03:33,760
contract you can issue a switchover

94
00:03:33,760 --> 00:03:35,920
transaction and tell the proxy contract

95
00:03:35,920 --> 00:03:37,440
to switch to a new

96
00:03:37,440 --> 00:03:39,280
logic contract

97
00:03:39,280 --> 00:03:41,599
now problem here is you have to manually

98
00:03:41,599 --> 00:03:43,440
convert your contract to use this

99
00:03:43,440 --> 00:03:45,760
pattern right so this is not

100
00:03:45,760 --> 00:03:48,480
trivial to write a a good proxy logic

101
00:03:48,480 --> 00:03:50,560
contract pair

102
00:03:50,560 --> 00:03:53,200
and additionally you have to ensure

103
00:03:53,200 --> 00:03:54,400
a thing called storage layout

104
00:03:54,400 --> 00:03:56,560
compatibility this means you have to

105
00:03:56,560 --> 00:03:57,680
ensure that

106
00:03:57,680 --> 00:04:00,159
once you deploy a second logic contract

107
00:04:00,159 --> 00:04:02,879
it really uses the same storage layout

108
00:04:02,879 --> 00:04:05,760
and remember the storage is um

109
00:04:05,760 --> 00:04:07,680
basically the hard disk of your smart

110
00:04:07,680 --> 00:04:09,360
contract so it stores all persistent

111
00:04:09,360 --> 00:04:10,239
state

112
00:04:10,239 --> 00:04:13,200
and if you deploy a new logic contract

113
00:04:13,200 --> 00:04:16,160
it uses the same storage address space

114
00:04:16,160 --> 00:04:18,798
so really they have to ensure the same

115
00:04:18,798 --> 00:04:20,079
layout

116
00:04:20,079 --> 00:04:22,479
inside of the storage address space

117
00:04:22,479 --> 00:04:24,639
in practice this means you can't really

118
00:04:24,639 --> 00:04:26,840
change any data types any data

119
00:04:26,840 --> 00:04:28,880
structures when patching the logic

120
00:04:28,880 --> 00:04:31,360
contract

121
00:04:31,360 --> 00:04:32,160
now

122
00:04:32,160 --> 00:04:34,240
this sounds quite nice right so you can

123
00:04:34,240 --> 00:04:36,560
one switch over transaction

124
00:04:36,560 --> 00:04:39,199
then your your smart contract is patched

125
00:04:39,199 --> 00:04:40,800
you don't have to change your address

126
00:04:40,800 --> 00:04:42,560
you don't have to notify your users that

127
00:04:42,560 --> 00:04:44,160
you have changed your smart contract and

128
00:04:44,160 --> 00:04:46,160
so on so this sounds good but is this

129
00:04:46,160 --> 00:04:47,919
really practical

130
00:04:47,919 --> 00:04:50,479
we performed a study with six developers

131
00:04:50,479 --> 00:04:52,080
and four of those actually had a

132
00:04:52,080 --> 00:04:53,840
production grade a smart contract

133
00:04:53,840 --> 00:04:56,080
experience

134
00:04:56,080 --> 00:05:00,080
and we asked them to do various tasks

135
00:05:00,080 --> 00:05:02,560
manual patching of smart contracts but

136
00:05:02,560 --> 00:05:05,440
also actually creating an upgradable

137
00:05:05,440 --> 00:05:07,440
contract so we gave them an existing

138
00:05:07,440 --> 00:05:09,280
smart contract and we

139
00:05:09,280 --> 00:05:11,039
told them to convert this onto an

140
00:05:11,039 --> 00:05:13,520
upgradable contract and to use the proxy

141
00:05:13,520 --> 00:05:14,639
pattern

142
00:05:14,639 --> 00:05:16,720
the notable thing here is actually none

143
00:05:16,720 --> 00:05:17,919
of the

144
00:05:17,919 --> 00:05:19,759
developers managed to create a fully

145
00:05:19,759 --> 00:05:20,960
functional

146
00:05:20,960 --> 00:05:24,400
upgradable contract

147
00:05:24,400 --> 00:05:25,440
now

148
00:05:25,440 --> 00:05:27,440
what can we conclude from this

149
00:05:27,440 --> 00:05:28,960
so currently

150
00:05:28,960 --> 00:05:30,560
smart contract upgrading is really

151
00:05:30,560 --> 00:05:33,039
cumbersome it's time consuming if you

152
00:05:33,039 --> 00:05:34,960
use the migration pattern you have to do

153
00:05:34,960 --> 00:05:37,039
all this manual migration and it's

154
00:05:37,039 --> 00:05:38,960
error-prone if you use

155
00:05:38,960 --> 00:05:40,720
the proxy pattern you really have to

156
00:05:40,720 --> 00:05:42,080
make sure that everything works

157
00:05:42,080 --> 00:05:44,080
correctly

158
00:05:44,080 --> 00:05:46,400
now this is nothing that you

159
00:05:46,400 --> 00:05:48,720
want with a smart contract that might

160
00:05:48,720 --> 00:05:51,120
handle millions of dollars right so we

161
00:05:51,120 --> 00:05:53,840
really need some automation here

162
00:05:53,840 --> 00:05:55,440
and with this i'd like to introduce you

163
00:05:55,440 --> 00:05:57,440
to evm patch our fully automated

164
00:05:57,440 --> 00:05:59,199
patching framework

165
00:05:59,199 --> 00:06:01,840
so evm page really automates

166
00:06:01,840 --> 00:06:04,880
the full patching process

167
00:06:04,880 --> 00:06:08,560
even patch automatically converts

168
00:06:08,560 --> 00:06:10,800
a contract a stock solidity contract to

169
00:06:10,800 --> 00:06:12,960
use this proxy pattern

170
00:06:12,960 --> 00:06:15,919
and it also automates the deployment

171
00:06:15,919 --> 00:06:18,840
of the contract and all of future

172
00:06:18,840 --> 00:06:21,680
upgrades evm patch also automatically

173
00:06:21,680 --> 00:06:23,919
introduces patches

174
00:06:23,919 --> 00:06:26,240
using bytecode rewriting so we use a

175
00:06:26,240 --> 00:06:28,240
template-based patching approach here

176
00:06:28,240 --> 00:06:30,560
with a custom domain specific language

177
00:06:30,560 --> 00:06:33,520
that expresses the patches

178
00:06:33,520 --> 00:06:35,520
and this way we can naturally preserve

179
00:06:35,520 --> 00:06:37,199
the storage layout and ensure

180
00:06:37,199 --> 00:06:40,240
compatibility of our logic contracts

181
00:06:40,240 --> 00:06:41,840
but you don't have to trust the bytecode

182
00:06:41,840 --> 00:06:42,960
rewriter

183
00:06:42,960 --> 00:06:44,720
we have a differential patch testing

184
00:06:44,720 --> 00:06:46,319
component which ensures that the

185
00:06:46,319 --> 00:06:48,880
behavior of the original and the patch

186
00:06:48,880 --> 00:06:51,919
contract is equivalent

187
00:06:51,919 --> 00:06:53,680
now let me walk you through

188
00:06:53,680 --> 00:06:56,400
a typical workflow with evm patch and

189
00:06:56,400 --> 00:06:59,680
also the architecture of evm patch

190
00:06:59,680 --> 00:07:01,599
now we have a developer

191
00:07:01,599 --> 00:07:03,599
and this developer is responsible for a

192
00:07:03,599 --> 00:07:05,360
smart contract

193
00:07:05,360 --> 00:07:07,440
and the developer might start some

194
00:07:07,440 --> 00:07:09,599
vulnerability detection component so

195
00:07:09,599 --> 00:07:12,319
this can be really any

196
00:07:12,319 --> 00:07:14,400
any analysis tool so this is only very

197
00:07:14,400 --> 00:07:16,960
loosely integrated into evm patch can

198
00:07:16,960 --> 00:07:19,280
also be a manual vulnerability report

199
00:07:19,280 --> 00:07:20,319
right so

200
00:07:20,319 --> 00:07:24,000
if some responsible disclosure process

201
00:07:24,000 --> 00:07:26,160
gives the developer information about a

202
00:07:26,160 --> 00:07:28,720
vulnerability then the developer can

203
00:07:28,720 --> 00:07:29,599
simply

204
00:07:29,599 --> 00:07:31,919
pass this onto evm patch the important

205
00:07:31,919 --> 00:07:33,840
part here is evm patch receives a

206
00:07:33,840 --> 00:07:36,560
machine readable vulnerability report

207
00:07:36,560 --> 00:07:38,319
and then uses this vulnerability to

208
00:07:38,319 --> 00:07:40,720
patch the vulnerable contract bytecode

209
00:07:40,720 --> 00:07:42,880
evm patch selects a right template for

210
00:07:42,880 --> 00:07:45,199
the patch and applies this template

211
00:07:45,199 --> 00:07:48,639
to produce the patch contract bytecode

212
00:07:48,639 --> 00:07:50,960
this patch contract bytecode is now

213
00:07:50,960 --> 00:07:53,360
passed on to the patch testing component

214
00:07:53,360 --> 00:07:55,840
where we replay

215
00:07:55,840 --> 00:07:58,000
all of the transactions that are

216
00:07:58,000 --> 00:08:01,280
recorded on the ethereum blockchain

217
00:08:01,280 --> 00:08:02,879
and we ensure

218
00:08:02,879 --> 00:08:04,639
using a differential testing approach

219
00:08:04,639 --> 00:08:06,479
that the behavior of the original and

220
00:08:06,479 --> 00:08:08,720
the patch contract is the same

221
00:08:08,720 --> 00:08:10,400
we do omit some

222
00:08:10,400 --> 00:08:12,879
exec low-level execution details but we

223
00:08:12,879 --> 00:08:15,759
really ensure that behavior in terms of

224
00:08:15,759 --> 00:08:17,759
state updates external calls ether

225
00:08:17,759 --> 00:08:21,360
transfers and so on is the same

226
00:08:21,919 --> 00:08:24,000
if the patch testing succeeds then we

227
00:08:24,000 --> 00:08:26,000
can deploy the newly patched contract

228
00:08:26,000 --> 00:08:29,280
bytecode as a new logic contract of our

229
00:08:29,280 --> 00:08:32,159
upgradable contract

230
00:08:32,159 --> 00:08:34,000
now if the patch testing fails then this

231
00:08:34,000 --> 00:08:36,399
can have two reasons the vulnerability

232
00:08:36,399 --> 00:08:38,159
detection actually

233
00:08:38,159 --> 00:08:40,000
reported the false alarm so this was not

234
00:08:40,000 --> 00:08:41,440
really a vulnerability and we

235
00:08:41,440 --> 00:08:43,039
accidentally patched

236
00:08:43,039 --> 00:08:45,680
um some something which is not really a

237
00:08:45,680 --> 00:08:48,720
vulnerability and then we broke the

238
00:08:48,720 --> 00:08:50,959
functionality of the contract

239
00:08:50,959 --> 00:08:54,080
the second case is when

240
00:08:54,080 --> 00:08:56,160
this is a true vulnerability

241
00:08:56,160 --> 00:08:59,440
and the batch tester detects that the

242
00:08:59,440 --> 00:09:02,160
patch prevents a prior transaction then

243
00:09:02,160 --> 00:09:04,399
we can conclude that this is an attack

244
00:09:04,399 --> 00:09:06,480
transaction

245
00:09:06,480 --> 00:09:09,600
now um in any case we need to notify a

246
00:09:09,600 --> 00:09:11,120
developer

247
00:09:11,120 --> 00:09:13,519
of this

248
00:09:14,000 --> 00:09:16,000
let me walk you through

249
00:09:16,000 --> 00:09:18,480
evm patch's bytecode rewriter

250
00:09:18,480 --> 00:09:20,000
so we

251
00:09:20,000 --> 00:09:22,240
patch on the bytecode level so here you

252
00:09:22,240 --> 00:09:23,279
can see

253
00:09:23,279 --> 00:09:26,240
parts of a controller graph of the

254
00:09:26,240 --> 00:09:28,320
ebm bytecode

255
00:09:28,320 --> 00:09:30,560
and here we have a vulnerable

256
00:09:30,560 --> 00:09:32,880
multiplication structure right so this

257
00:09:32,880 --> 00:09:35,120
multiplication instruction is vulnerable

258
00:09:35,120 --> 00:09:37,440
to an integer overflow so we really need

259
00:09:37,440 --> 00:09:41,839
to insert here a checked multiplication

260
00:09:41,839 --> 00:09:42,800
now

261
00:09:42,800 --> 00:09:44,640
the bytecode rewriter

262
00:09:44,640 --> 00:09:46,640
keeps the code layout of the original

263
00:09:46,640 --> 00:09:48,399
contract intact in the rewritten

264
00:09:48,399 --> 00:09:49,680
contract

265
00:09:49,680 --> 00:09:52,000
so basic blocks that are not changed

266
00:09:52,000 --> 00:09:54,560
they are simply copied over

267
00:09:54,560 --> 00:09:57,600
and they are also at the same address

268
00:09:57,600 --> 00:10:00,160
basic blocks that need to be patched are

269
00:10:00,160 --> 00:10:02,399
replaced by trampolines so in this case

270
00:10:02,399 --> 00:10:04,640
the basic block at hexab

271
00:10:04,640 --> 00:10:07,440
is replaced by a trampoline which jumps

272
00:10:07,440 --> 00:10:10,000
out to the end of the original smart

273
00:10:10,000 --> 00:10:11,839
contract bytecode

274
00:10:11,839 --> 00:10:14,320
and there we can insert as many new

275
00:10:14,320 --> 00:10:17,360
instructions as we like

276
00:10:17,360 --> 00:10:20,000
um this means here we can replace the

277
00:10:20,000 --> 00:10:23,040
wormable multiplication instruction with

278
00:10:23,040 --> 00:10:25,040
a checked multiplication patch template

279
00:10:25,040 --> 00:10:26,720
from evm patch

280
00:10:26,720 --> 00:10:28,640
then we simply jump back to the original

281
00:10:28,640 --> 00:10:31,920
code and i have concluded the bytecode

282
00:10:31,920 --> 00:10:33,920
rewriting

283
00:10:33,920 --> 00:10:37,360
now we performed evaluation of the

284
00:10:37,360 --> 00:10:39,600
attack detection capabilities of evm

285
00:10:39,600 --> 00:10:41,279
patch

286
00:10:41,279 --> 00:10:43,279
we evaluated on five known to be

287
00:10:43,279 --> 00:10:46,720
exploited erc20 token contracts so all

288
00:10:46,720 --> 00:10:48,800
those contracts are vulnerable to

289
00:10:48,800 --> 00:10:51,360
integer overflow issues

290
00:10:51,360 --> 00:10:53,839
and we had source code we know that they

291
00:10:53,839 --> 00:10:54,640
were

292
00:10:54,640 --> 00:10:57,600
attacked so and basically this gives us

293
00:10:57,600 --> 00:11:00,640
kind of a ground truth data center

294
00:11:00,640 --> 00:11:03,040
so what we did to evaluate eventpatch

295
00:11:03,040 --> 00:11:04,959
was we compared it with a manual

296
00:11:04,959 --> 00:11:06,880
patching approach so we patched all

297
00:11:06,880 --> 00:11:09,120
those contracts with safe math a common

298
00:11:09,120 --> 00:11:11,360
safe integer library

299
00:11:11,360 --> 00:11:13,040
and we ensured that evm patched

300
00:11:13,040 --> 00:11:15,519
contracts prevent the same attacks as

301
00:11:15,519 --> 00:11:18,560
the safe math patch contracts and

302
00:11:18,560 --> 00:11:20,480
that they have the same behavior as the

303
00:11:20,480 --> 00:11:22,640
original contract except for attack

304
00:11:22,640 --> 00:11:24,320
transactions

305
00:11:24,320 --> 00:11:26,720
and we found that evm patch contracts

306
00:11:26,720 --> 00:11:29,040
have comparable overheads to source

307
00:11:29,040 --> 00:11:32,800
level patches with safe math

308
00:11:32,800 --> 00:11:35,279
we also evaluated the practicality of

309
00:11:35,279 --> 00:11:39,360
evm patch we computed the worst case

310
00:11:39,360 --> 00:11:41,519
additional costs due to the gas overhead

311
00:11:41,519 --> 00:11:43,440
introduced by the rewriter

312
00:11:43,440 --> 00:11:45,680
so for example here we have a per

313
00:11:45,680 --> 00:11:47,760
transaction overhead in the worst case

314
00:11:47,760 --> 00:11:50,079
really of a dollar cent

315
00:11:50,079 --> 00:11:52,160
and per upgrade we had in the worst case

316
00:11:52,160 --> 00:11:54,000
about 20 cents

317
00:11:54,000 --> 00:11:55,760
so this is not really a lot when

318
00:11:55,760 --> 00:11:58,720
comparing to a smart contract that might

319
00:11:58,720 --> 00:12:00,480
have

320
00:12:00,480 --> 00:12:02,800
a million dollar or maybe even 10 000 of

321
00:12:02,800 --> 00:12:04,560
dollars

322
00:12:04,560 --> 00:12:06,160
at stake so

323
00:12:06,160 --> 00:12:09,360
that is not really a lot

324
00:12:09,839 --> 00:12:11,920
additionally we performed the developer

325
00:12:11,920 --> 00:12:13,279
study

326
00:12:13,279 --> 00:12:16,000
where we asked the developers to use evm

327
00:12:16,000 --> 00:12:16,959
patch

328
00:12:16,959 --> 00:12:19,440
so we told them to patch integer

329
00:12:19,440 --> 00:12:22,160
overflow box completely automated using

330
00:12:22,160 --> 00:12:24,880
evm patch so this happened very quickly

331
00:12:24,880 --> 00:12:27,440
but we also asked them to write a new

332
00:12:27,440 --> 00:12:29,920
patch template for evm patch so the

333
00:12:29,920 --> 00:12:32,079
developers had to

334
00:12:32,079 --> 00:12:34,639
read a vulnerability report and create a

335
00:12:34,639 --> 00:12:36,639
new patch template for a type of

336
00:12:36,639 --> 00:12:38,399
vulnerability that is

337
00:12:38,399 --> 00:12:39,839
not yet

338
00:12:39,839 --> 00:12:42,720
integrated in evm patch

339
00:12:42,720 --> 00:12:45,040
and it's really notable here that this

340
00:12:45,040 --> 00:12:47,360
took only about five minutes on average

341
00:12:47,360 --> 00:12:49,600
to patch and deploy a new type of

342
00:12:49,600 --> 00:12:53,200
vulnerability using evm patch

343
00:12:53,200 --> 00:12:55,519
with this i'd like to conclude my talk

344
00:12:55,519 --> 00:12:59,320
thank you for your attention

