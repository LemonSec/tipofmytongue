1
00:00:08,480 --> 00:00:10,800
hello everyone my name is shravan and

2
00:00:10,800 --> 00:00:12,160
today i'm going to tell you about our

3
00:00:12,160 --> 00:00:14,559
work on hardening web assembly against

4
00:00:14,559 --> 00:00:17,558
spectre

5
00:00:18,480 --> 00:00:20,560
webassembly or wasm is a platform

6
00:00:20,560 --> 00:00:22,560
independent byte code that is designed

7
00:00:22,560 --> 00:00:25,680
to run c or c plus plus in the browser

8
00:00:25,680 --> 00:00:27,840
because of this wasm was designed with

9
00:00:27,840 --> 00:00:30,160
isolation in mind the byte code is

10
00:00:30,160 --> 00:00:32,159
really simple and makes data and control

11
00:00:32,159 --> 00:00:34,800
flow explicit at the language level

12
00:00:34,800 --> 00:00:36,800
this in turn makes it easy for wasn't

13
00:00:36,800 --> 00:00:40,480
compilers to enforce isolation

14
00:00:40,480 --> 00:00:44,160
really wasm is an ir for isolation

15
00:00:44,160 --> 00:00:46,559
indeed wasm is used in a wide variety of

16
00:00:46,559 --> 00:00:49,680
applications even outside of the browser

17
00:00:49,680 --> 00:00:51,840
for example isolating on trusted

18
00:00:51,840 --> 00:00:53,920
libraries isolating client code and

19
00:00:53,920 --> 00:00:56,480
function as a service platforms

20
00:00:56,480 --> 00:00:58,079
frameworks for privacy preserving

21
00:00:58,079 --> 00:01:01,440
computations secure transfers etc

22
00:01:01,440 --> 00:01:03,440
in today's talk we're going to use the

23
00:01:03,440 --> 00:01:05,040
function as a service

24
00:01:05,040 --> 00:01:07,600
platform or fast platform as our running

25
00:01:07,600 --> 00:01:09,760
example

26
00:01:09,760 --> 00:01:12,240
in a fast scenario the platform compiles

27
00:01:12,240 --> 00:01:14,400
wazer modules from multiple clients and

28
00:01:14,400 --> 00:01:17,040
runs them in a single process

29
00:01:17,040 --> 00:01:19,119
wasm ensures that one module cannot

30
00:01:19,119 --> 00:01:22,720
access another another's memory pages

31
00:01:22,720 --> 00:01:24,400
this architecture allows the fast

32
00:01:24,400 --> 00:01:26,560
platform to scale to tens of thousands

33
00:01:26,560 --> 00:01:30,080
of client modules per process

34
00:01:30,880 --> 00:01:33,680
within a process wasm isolates untrusted

35
00:01:33,680 --> 00:01:35,840
code using a mix of runtime and compile

36
00:01:35,840 --> 00:01:37,040
time checks

37
00:01:37,040 --> 00:01:38,400
for example

38
00:01:38,400 --> 00:01:41,119
every access to the heap also known as

39
00:01:41,119 --> 00:01:43,520
the linear memory has explicit runtimes

40
00:01:43,520 --> 00:01:45,600
checks to ensure that it is within

41
00:01:45,600 --> 00:01:47,919
bounds

42
00:01:48,240 --> 00:01:50,479
similarly indirect function calls

43
00:01:50,479 --> 00:01:52,880
perform runtime checks to uh to check

44
00:01:52,880 --> 00:01:55,360
the control flow integrity labels during

45
00:01:55,360 --> 00:01:57,360
execution

46
00:01:57,360 --> 00:02:00,000
finally the compiler ensures that return

47
00:02:00,000 --> 00:02:02,159
addresses are always valid by using a

48
00:02:02,159 --> 00:02:04,320
safe stack

49
00:02:04,320 --> 00:02:09,119
however spectre can break all of this

50
00:02:09,119 --> 00:02:11,440
in a first platform this means that a

51
00:02:11,440 --> 00:02:13,280
malicious client can use spectre to

52
00:02:13,280 --> 00:02:15,920
access another client's memory

53
00:02:15,920 --> 00:02:17,200
for example

54
00:02:17,200 --> 00:02:19,360
they might use a gadget that abuses the

55
00:02:19,360 --> 00:02:21,520
pattern history table or phd like this

56
00:02:21,520 --> 00:02:23,440
one

57
00:02:23,440 --> 00:02:25,440
this code performs a memory bounce check

58
00:02:25,440 --> 00:02:28,319
before it reads from the linear memory

59
00:02:28,319 --> 00:02:31,440
and concretely this is safe

60
00:02:31,440 --> 00:02:33,120
but an attacker can restrain this

61
00:02:33,120 --> 00:02:35,440
conditional to predict true

62
00:02:35,440 --> 00:02:37,599
and speculatively read out of bounds

63
00:02:37,599 --> 00:02:39,120
data

64
00:02:39,120 --> 00:02:40,720
they can then leak this data to the

65
00:02:40,720 --> 00:02:44,400
cache by performing a second read

66
00:02:45,519 --> 00:02:47,680
similarly attackers can also abuse the

67
00:02:47,680 --> 00:02:50,160
branch target buffer the btb or the

68
00:02:50,160 --> 00:02:52,319
return stack buffer the rsb to read

69
00:02:52,319 --> 00:02:54,080
other clients date

70
00:02:54,080 --> 00:02:56,400
they can do this by mispredicting the

71
00:02:56,400 --> 00:02:58,239
target of indirect function calls or

72
00:02:58,239 --> 00:03:00,239
returns to carry out a specular a

73
00:03:00,239 --> 00:03:04,319
speculative rob style attack

74
00:03:04,319 --> 00:03:06,959
alternately an attacker can also poison

75
00:03:06,959 --> 00:03:09,040
branch predictor state that is shared

76
00:03:09,040 --> 00:03:11,920
across all clients

77
00:03:11,920 --> 00:03:14,080
in doing so they can coerce the victim

78
00:03:14,080 --> 00:03:16,480
into exfiltrating their own data

79
00:03:16,480 --> 00:03:19,360
that is the victim client code leaks the

80
00:03:19,360 --> 00:03:22,239
victim client data

81
00:03:22,239 --> 00:03:24,159
we need to prevent both the sandbox

82
00:03:24,159 --> 00:03:26,080
breaker attacks attacks mentioned

83
00:03:26,080 --> 00:03:28,159
earlier as well as those as well as

84
00:03:28,159 --> 00:03:32,000
these sandbox poisoning attacks

85
00:03:32,000 --> 00:03:34,319
can of course prevent speculative

86
00:03:34,319 --> 00:03:36,720
execution attacks through careful use of

87
00:03:36,720 --> 00:03:39,200
fences

88
00:03:39,440 --> 00:03:40,879
so we tried this

89
00:03:40,879 --> 00:03:43,120
for example we added fences prior to

90
00:03:43,120 --> 00:03:45,360
every data load

91
00:03:45,360 --> 00:03:47,920
and we found that this was too slow

92
00:03:47,920 --> 00:03:50,400
we even tried reducing fences by a min

93
00:03:50,400 --> 00:03:54,799
cut algorithm and this was also too slow

94
00:03:54,799 --> 00:03:56,720
what we need is a solution that does not

95
00:03:56,720 --> 00:03:59,439
solely rely on fences

96
00:03:59,439 --> 00:04:02,159
and our solution is swivel

97
00:04:02,159 --> 00:04:04,239
swivel is a wasm compiler that prevents

98
00:04:04,239 --> 00:04:06,080
both sandbox breakout and poisoning

99
00:04:06,080 --> 00:04:09,360
attacks via this via spectre phd vtb and

100
00:04:09,360 --> 00:04:11,280
rsp

101
00:04:11,280 --> 00:04:12,959
we implemented two backends for our

102
00:04:12,959 --> 00:04:14,400
swiven compiler

103
00:04:14,400 --> 00:04:16,798
swivel sfi which enforces safety via

104
00:04:16,798 --> 00:04:19,600
software checks and swivel cet which

105
00:04:19,600 --> 00:04:21,680
leverages hardware extensions to safely

106
00:04:21,680 --> 00:04:24,160
allow smt or hyper threading

107
00:04:24,160 --> 00:04:25,600
in the rest of this talk we are going to

108
00:04:25,600 --> 00:04:28,960
focus on swivel sfi

109
00:04:28,960 --> 00:04:30,479
the fundamental problem we have to

110
00:04:30,479 --> 00:04:32,800
address is that volume adds safety

111
00:04:32,800 --> 00:04:36,080
checks at the function granularity

112
00:04:36,080 --> 00:04:38,479
this is safe because every memory access

113
00:04:38,479 --> 00:04:40,960
in every possible control flow is bounce

114
00:04:40,960 --> 00:04:43,759
checked for example the code on the

115
00:04:43,759 --> 00:04:45,840
right shows a load instruction which is

116
00:04:45,840 --> 00:04:48,479
safe because we always execute function

117
00:04:48,479 --> 00:04:51,040
proof from the beginning

118
00:04:51,040 --> 00:04:53,280
unfortunately this is not true for

119
00:04:53,280 --> 00:04:55,440
speculative control flow

120
00:04:55,440 --> 00:04:57,360
speculative execution may

121
00:04:57,360 --> 00:04:59,600
execute code directly starting at the

122
00:04:59,600 --> 00:05:01,600
load instruction resulting in an out of

123
00:05:01,600 --> 00:05:03,440
bounds read

124
00:05:03,440 --> 00:05:05,680
we need a new abstraction when compiling

125
00:05:05,680 --> 00:05:08,680
was

126
00:05:10,400 --> 00:05:12,560
in swivel this abstraction is linear

127
00:05:12,560 --> 00:05:16,000
blocks and alternate to basic blocks

128
00:05:16,000 --> 00:05:17,919
linear blocks are instruction sequences

129
00:05:17,919 --> 00:05:20,960
like basic blocks but end in a jump or

130
00:05:20,960 --> 00:05:22,560
call instruction

131
00:05:22,560 --> 00:05:25,840
as shown in this example

132
00:05:26,080 --> 00:05:28,320
linear blocks perform all required

133
00:05:28,320 --> 00:05:30,320
safety checks in the same block

134
00:05:30,320 --> 00:05:32,080
and only transfer control to other

135
00:05:32,080 --> 00:05:33,360
linear blocks

136
00:05:33,360 --> 00:05:35,520
in the example we see the bounce check

137
00:05:35,520 --> 00:05:38,320
of the register reg underscore men is in

138
00:05:38,320 --> 00:05:40,240
the same linear block as the memory

139
00:05:40,240 --> 00:05:43,840
access via this register

140
00:05:43,919 --> 00:05:47,360
finally linear block checks themselves

141
00:05:47,360 --> 00:05:48,880
cannot include branches that would

142
00:05:48,880 --> 00:05:51,440
reintroduce vector issues

143
00:05:51,440 --> 00:05:53,440
instead they must perform

144
00:05:53,440 --> 00:05:56,639
perform these biomass

145
00:05:58,080 --> 00:06:00,240
now linear blocks automatically ensure

146
00:06:00,240 --> 00:06:02,880
that spectre phd cannot be used to break

147
00:06:02,880 --> 00:06:05,280
out of sand the sandbox

148
00:06:05,280 --> 00:06:07,600
unfortunately spectre bdb and rsb can

149
00:06:07,600 --> 00:06:09,199
still violate linear

150
00:06:09,199 --> 00:06:11,280
blocking variants and jump to the middle

151
00:06:11,280 --> 00:06:12,880
of a linear block

152
00:06:12,880 --> 00:06:14,479
for spectra btb

153
00:06:14,479 --> 00:06:16,319
linear blocks do ensure that bdb

154
00:06:16,319 --> 00:06:18,639
predictions always target linear blocks

155
00:06:18,639 --> 00:06:21,840
however the btb may not be empty when we

156
00:06:21,840 --> 00:06:24,800
first enter the sandbox to address this

157
00:06:24,800 --> 00:06:27,039
we always flush the btb before entering

158
00:06:27,039 --> 00:06:28,880
the sandbox

159
00:06:28,880 --> 00:06:31,680
similarly for spectre rsv linear blocks

160
00:06:31,680 --> 00:06:33,520
always ensure that the rrsp predictions

161
00:06:33,520 --> 00:06:36,240
target linear blocks

162
00:06:36,240 --> 00:06:38,240
however the rsp can on the flow

163
00:06:38,240 --> 00:06:39,680
resulting in arbitrary target

164
00:06:39,680 --> 00:06:41,199
predictions

165
00:06:41,199 --> 00:06:43,039
we handle this by using a separate

166
00:06:43,039 --> 00:06:45,120
memory region to store control stack

167
00:06:45,120 --> 00:06:47,360
data and replacing return instructions

168
00:06:47,360 --> 00:06:50,400
with indirect jumps from this region

169
00:06:50,400 --> 00:06:53,039
this ensures sandbox code cannot break

170
00:06:53,039 --> 00:06:55,039
out via spectre

171
00:06:55,039 --> 00:06:56,560
but

172
00:06:56,560 --> 00:06:59,680
what about poisoning attacks

173
00:06:59,680 --> 00:07:00,880
ideally

174
00:07:00,880 --> 00:07:02,800
we can simply flush predictors prior to

175
00:07:02,800 --> 00:07:04,880
the execution of any client code to

176
00:07:04,880 --> 00:07:07,919
prevent all forms of poison

177
00:07:07,919 --> 00:07:10,720
however we cannot flush while we can

178
00:07:10,720 --> 00:07:12,960
flush the btb we cannot flush the

179
00:07:12,960 --> 00:07:15,360
conditional branch predictors

180
00:07:15,360 --> 00:07:19,680
so we need a different solution here

181
00:07:20,319 --> 00:07:22,560
we can handle this in one of two ways

182
00:07:22,560 --> 00:07:24,880
the first approach converts all direct

183
00:07:24,880 --> 00:07:27,599
branches that use the cbp to indirect

184
00:07:27,599 --> 00:07:30,319
branches that use the btb

185
00:07:30,319 --> 00:07:32,560
and then flushes the btb on entry to the

186
00:07:32,560 --> 00:07:34,400
sandbox

187
00:07:34,400 --> 00:07:35,840
second approach

188
00:07:35,840 --> 00:07:38,319
is a probabilistic style aslr approach

189
00:07:38,319 --> 00:07:39,840
that makes it more difficult for the

190
00:07:39,840 --> 00:07:42,080
attacker by randomizing the location of

191
00:07:42,080 --> 00:07:45,280
sandbox code

192
00:07:45,280 --> 00:07:47,599
in practice both swivels aslr and

193
00:07:47,599 --> 00:07:49,840
deterministic schemes eliminate all

194
00:07:49,840 --> 00:07:51,759
three spectra in varying spectral

195
00:07:51,759 --> 00:07:53,120
variants

196
00:07:53,120 --> 00:07:54,800
the only difference here is that

197
00:07:54,800 --> 00:07:57,199
swivel's aslr scheme is probabilistic

198
00:07:57,199 --> 00:07:59,039
for one type of attack

199
00:07:59,039 --> 00:08:01,520
that is the out of place spectre phd

200
00:08:01,520 --> 00:08:03,280
sandbox poisoning

201
00:08:03,280 --> 00:08:05,280
in our own experience we found this type

202
00:08:05,280 --> 00:08:07,199
of attack extremely challenging to

203
00:08:07,199 --> 00:08:08,800
perform even without swivel's

204
00:08:08,800 --> 00:08:10,960
randomization

205
00:08:10,960 --> 00:08:12,319
so next let's look at some of the

206
00:08:12,319 --> 00:08:15,280
performance overhead of these keys

207
00:08:15,280 --> 00:08:17,440
we measure the performance of swivel on

208
00:08:17,440 --> 00:08:19,520
standard benchmark suites such as spec

209
00:08:19,520 --> 00:08:21,199
2006

210
00:08:21,199 --> 00:08:23,759
we also measure the cost of a mock fires

211
00:08:23,759 --> 00:08:27,520
platform that uses swivel web services

212
00:08:27,520 --> 00:08:29,120
our performance costs were measured

213
00:08:29,120 --> 00:08:30,879
relative to the execution time of

214
00:08:30,879 --> 00:08:34,399
unmodified unsafe wasm

215
00:08:34,399 --> 00:08:36,159
in the interest of time i am going to

216
00:08:36,159 --> 00:08:38,159
focus on the performance overhead but we

217
00:08:38,159 --> 00:08:40,320
also provide a security evaluation in

218
00:08:40,320 --> 00:08:42,800
our paper

219
00:08:43,279 --> 00:08:45,760
for our spec benchmarks we observe that

220
00:08:45,760 --> 00:08:50,000
our aslr schemes have very low overhead

221
00:08:50,000 --> 00:08:51,040
under 10

222
00:08:51,040 --> 00:08:53,200
overhead on all wasn't compatible spec

223
00:08:53,200 --> 00:08:54,959
benchmarks

224
00:08:54,959 --> 00:08:57,279
the deterministic scheme has slightly

225
00:08:57,279 --> 00:08:59,440
higher overhead between three percent

226
00:08:59,440 --> 00:09:01,680
and 240 percent

227
00:09:01,680 --> 00:09:03,600
while this overhead is sometimes a

228
00:09:03,600 --> 00:09:04,880
little high

229
00:09:04,880 --> 00:09:06,320
it is still much lower than the

230
00:09:06,320 --> 00:09:09,839
fence-based solutions

231
00:09:09,920 --> 00:09:12,240
in our fast platform benchmark we

232
00:09:12,240 --> 00:09:13,839
evaluate the performance of different

233
00:09:13,839 --> 00:09:16,800
workloads such as converting xml to json

234
00:09:16,800 --> 00:09:20,560
rendering html and image classification

235
00:09:20,560 --> 00:09:24,160
we find that for xml to json swivel aslr

236
00:09:24,160 --> 00:09:27,120
has less than 14 overhead and is faster

237
00:09:27,120 --> 00:09:29,040
than the deterministic schemes which

238
00:09:29,040 --> 00:09:32,080
have around 36 percent overhead

239
00:09:32,080 --> 00:09:34,160
we see a very similar trend in the image

240
00:09:34,160 --> 00:09:36,880
classification workload

241
00:09:36,880 --> 00:09:38,880
the one interesting case here is the

242
00:09:38,880 --> 00:09:41,040
html rendering workload

243
00:09:41,040 --> 00:09:43,279
here swivel aslr is actually slower than

244
00:09:43,279 --> 00:09:45,120
the deterministic scheme

245
00:09:45,120 --> 00:09:48,560
because the cost of randomizing the code

246
00:09:48,560 --> 00:09:51,279
actually dominates the workload time

247
00:09:51,279 --> 00:09:53,440
however the deterministic scheme still

248
00:09:53,440 --> 00:09:55,519
offers a reasonable overhead of under 40

249
00:09:55,519 --> 00:09:58,160
percent here

250
00:09:58,399 --> 00:10:00,560
in summary swivel is a compiler that

251
00:10:00,560 --> 00:10:02,720
hardens volume against spectre our

252
00:10:02,720 --> 00:10:05,200
compiler has two back-ends one using

253
00:10:05,200 --> 00:10:06,560
software text and the other using

254
00:10:06,560 --> 00:10:08,399
hardware extensions

255
00:10:08,399 --> 00:10:10,079
both leverage the abstraction of linear

256
00:10:10,079 --> 00:10:12,240
blocks which we believe is valuable even

257
00:10:12,240 --> 00:10:14,160
beyond wasn't

258
00:10:14,160 --> 00:10:15,839
thank you and i'm happy to take any

259
00:10:15,839 --> 00:10:18,839
questions

