1
00:00:08,639 --> 00:00:10,880
hello and welcome to my presentation

2
00:00:10,880 --> 00:00:13,840
about coco my name is barbara giger and

3
00:00:13,840 --> 00:00:16,480
today i will talk about the core design

4
00:00:16,480 --> 00:00:18,720
and co-verification of mask software

5
00:00:18,720 --> 00:00:21,680
implementations on cpus

6
00:00:21,680 --> 00:00:23,359
so

7
00:00:23,359 --> 00:00:26,960
coco tries to verify counter measures

8
00:00:26,960 --> 00:00:29,199
against physically side channel attacks

9
00:00:29,199 --> 00:00:31,599
in such a text we have a certain device

10
00:00:31,599 --> 00:00:33,840
which has a specific asset

11
00:00:33,840 --> 00:00:37,040
for example a cryptographic key

12
00:00:37,040 --> 00:00:39,040
examples for this device could be a

13
00:00:39,040 --> 00:00:41,840
government id a passport

14
00:00:41,840 --> 00:00:43,280
a sim card

15
00:00:43,280 --> 00:00:46,000
or even a microprocessor which executes

16
00:00:46,000 --> 00:00:47,440
a cryptographic

17
00:00:47,440 --> 00:00:49,600
software which

18
00:00:49,600 --> 00:00:52,480
processes a secret cryptographic key and

19
00:00:52,480 --> 00:00:54,960
then there is the attacker and he is

20
00:00:54,960 --> 00:00:58,000
physically accessed to the device

21
00:00:58,000 --> 00:01:00,239
this means that the attacker can

22
00:01:00,239 --> 00:01:02,079
manipulate and observe certain

23
00:01:02,079 --> 00:01:05,760
properties of the device for example

24
00:01:05,760 --> 00:01:08,320
it allows to observe or monitor the

25
00:01:08,320 --> 00:01:11,680
power consumption of a certain cpu

26
00:01:11,680 --> 00:01:14,640
while it executes a cryptographic

27
00:01:14,640 --> 00:01:16,560
algorithm

28
00:01:16,560 --> 00:01:17,439
and

29
00:01:17,439 --> 00:01:20,159
then the power consumption depends on

30
00:01:20,159 --> 00:01:22,240
two things first of all which

31
00:01:22,240 --> 00:01:24,720
instructions are executed

32
00:01:24,720 --> 00:01:26,960
and second which data is involved for

33
00:01:26,960 --> 00:01:28,159
example

34
00:01:28,159 --> 00:01:30,240
the instructions could be

35
00:01:30,240 --> 00:01:32,079
whatever we need to do

36
00:01:32,079 --> 00:01:34,000
the aes

37
00:01:34,000 --> 00:01:36,880
and the data could be the secret key

38
00:01:36,880 --> 00:01:40,320
which is being processed by the aes and

39
00:01:40,320 --> 00:01:41,600
in order to

40
00:01:41,600 --> 00:01:44,159
construct the countermeasure against it

41
00:01:44,159 --> 00:01:47,360
we have to break this dependency

42
00:01:47,360 --> 00:01:50,079
we can do that by applying a technique

43
00:01:50,079 --> 00:01:52,399
called masking

44
00:01:52,399 --> 00:01:54,880
what we do essentially there is that we

45
00:01:54,880 --> 00:01:57,200
have our sensitive value

46
00:01:57,200 --> 00:01:59,600
and we split it into multiple random

47
00:01:59,600 --> 00:02:01,439
shares and then we don't do the

48
00:02:01,439 --> 00:02:05,280
computation on the sensitive value but

49
00:02:05,280 --> 00:02:07,200
on the shares itself

50
00:02:07,200 --> 00:02:09,679
for example here we see that we can for

51
00:02:09,679 --> 00:02:13,680
example um split the key

52
00:02:13,680 --> 00:02:14,640
k

53
00:02:14,640 --> 00:02:18,239
and you for masked aes into three parts

54
00:02:18,239 --> 00:02:19,200
and then

55
00:02:19,200 --> 00:02:22,239
if we observe the power consumption

56
00:02:22,239 --> 00:02:24,480
each part will depend on the share

57
00:02:24,480 --> 00:02:27,840
individually and if the share is random

58
00:02:27,840 --> 00:02:31,599
then we have dependency on random

59
00:02:31,599 --> 00:02:33,280
data and not on

60
00:02:33,280 --> 00:02:36,959
the sensitive value anymore

61
00:02:36,959 --> 00:02:39,360
this is not an easy task which is why we

62
00:02:39,360 --> 00:02:42,239
need verification techniques to check if

63
00:02:42,239 --> 00:02:43,760
the shares

64
00:02:43,760 --> 00:02:45,920
are separated in

65
00:02:45,920 --> 00:02:48,239
software or hardware

66
00:02:48,239 --> 00:02:49,519
and

67
00:02:49,519 --> 00:02:51,680
the verification

68
00:02:51,680 --> 00:02:55,040
of such masking schemes is either done

69
00:02:55,040 --> 00:02:57,680
on algorithmic level or in a hardware

70
00:02:57,680 --> 00:02:59,519
circuit

71
00:02:59,519 --> 00:03:02,560
and existing approaches have

72
00:03:02,560 --> 00:03:05,440
certain limitations

73
00:03:05,440 --> 00:03:08,560
first of all they have either

74
00:03:08,560 --> 00:03:11,519
focused purely on hardware circuits

75
00:03:11,519 --> 00:03:14,560
an example would be the rebecca tool

76
00:03:14,560 --> 00:03:17,840
or purely on software and those

77
00:03:17,840 --> 00:03:19,680
techniques dealing with software

78
00:03:19,680 --> 00:03:23,599
completely excluded the hardware

79
00:03:23,599 --> 00:03:26,080
which is in the end used to execute the

80
00:03:26,080 --> 00:03:28,879
software so the cpu netlist

81
00:03:28,879 --> 00:03:31,440
or the cpu itself was not

82
00:03:31,440 --> 00:03:32,400
um

83
00:03:32,400 --> 00:03:35,120
was not considered and it was assumed

84
00:03:35,120 --> 00:03:36,400
that

85
00:03:36,400 --> 00:03:38,640
it cannot cause problems but this

86
00:03:38,640 --> 00:03:41,599
assumption is not true in practice

87
00:03:41,599 --> 00:03:44,480
so what we want to do with cocoa is

88
00:03:44,480 --> 00:03:47,040
that we verify

89
00:03:47,040 --> 00:03:49,760
for a specific software and the specific

90
00:03:49,760 --> 00:03:51,680
hardware that the execution of the

91
00:03:51,680 --> 00:03:54,640
software on the hardware is secure

92
00:03:54,640 --> 00:03:58,080
and this record co-verification

93
00:03:58,080 --> 00:04:00,239
and we do that in two

94
00:04:00,239 --> 00:04:02,480
basic steps first of all we try to

95
00:04:02,480 --> 00:04:05,280
detect leakage of a given

96
00:04:05,280 --> 00:04:07,040
software execution

97
00:04:07,040 --> 00:04:09,439
um on the hardware

98
00:04:09,439 --> 00:04:11,200
on necklace level

99
00:04:11,200 --> 00:04:15,280
and second we try to fix and identify

100
00:04:15,280 --> 00:04:17,120
certain pieces of the hardware which

101
00:04:17,120 --> 00:04:18,238
cause

102
00:04:18,238 --> 00:04:21,279
leakage which is not that easy to see

103
00:04:21,279 --> 00:04:22,880
for

104
00:04:22,880 --> 00:04:24,479
the person

105
00:04:24,479 --> 00:04:27,280
writing the masked software

106
00:04:27,280 --> 00:04:30,080
but how can hardware now exactly be a

107
00:04:30,080 --> 00:04:33,919
problem to mask software

108
00:04:34,000 --> 00:04:36,160
assume that there is an attacker and

109
00:04:36,160 --> 00:04:38,960
attacker probes or observes a specific

110
00:04:38,960 --> 00:04:41,120
wire in the cpu

111
00:04:41,120 --> 00:04:44,160
for exactly one clock cycle the attacker

112
00:04:44,160 --> 00:04:46,320
will see

113
00:04:46,320 --> 00:04:50,000
all the signal fluctuations of this wire

114
00:04:50,000 --> 00:04:52,720
until the signal finally stabilizes this

115
00:04:52,720 --> 00:04:54,880
includes transitions so the change of

116
00:04:54,880 --> 00:04:56,720
the signal value from the old to the new

117
00:04:56,720 --> 00:04:57,600
value

118
00:04:57,600 --> 00:05:00,160
but also glitches

119
00:05:00,160 --> 00:05:01,680
it each occurs

120
00:05:01,680 --> 00:05:03,919
because there are variations in the

121
00:05:03,919 --> 00:05:06,560
propagation delay

122
00:05:06,560 --> 00:05:10,080
in combinatorial logic and this is again

123
00:05:10,080 --> 00:05:12,479
caused by physical hardware properties

124
00:05:12,479 --> 00:05:15,280
for example different wire lines or gate

125
00:05:15,280 --> 00:05:16,720
delays

126
00:05:16,720 --> 00:05:19,680
for example here we see the original ebx

127
00:05:19,680 --> 00:05:21,280
register file

128
00:05:21,280 --> 00:05:24,000
and assume we want to first read x2 and

129
00:05:24,000 --> 00:05:25,600
then x3

130
00:05:25,600 --> 00:05:28,560
so in the first cycle

131
00:05:28,560 --> 00:05:32,320
this multiplexer here will output x2

132
00:05:32,320 --> 00:05:34,479
and also the final read part will output

133
00:05:34,479 --> 00:05:36,960
x2 the next cycle

134
00:05:36,960 --> 00:05:40,479
we want to read x3 so this multiplexer

135
00:05:40,479 --> 00:05:43,520
will then switch to x1

136
00:05:43,520 --> 00:05:46,000
because of the address bit

137
00:05:46,000 --> 00:05:48,240
and then we have a transition from x2 to

138
00:05:48,240 --> 00:05:52,800
x1 on this wire and if x2 and x1 are

139
00:05:52,800 --> 00:05:55,199
shares we have a transition from one

140
00:05:55,199 --> 00:05:56,720
share to another

141
00:05:56,720 --> 00:05:57,759
and

142
00:05:57,759 --> 00:05:58,639
we

143
00:05:58,639 --> 00:06:01,680
actually have a leak in our design

144
00:06:01,680 --> 00:06:03,360
and the same thing happens for the write

145
00:06:03,360 --> 00:06:05,440
data

146
00:06:05,440 --> 00:06:10,080
also this uh read addresses can git

147
00:06:10,080 --> 00:06:12,560
which is even harder to make sure when

148
00:06:12,560 --> 00:06:15,360
writing software that it does not appear

149
00:06:15,360 --> 00:06:17,840
but now let's have a closer look at the

150
00:06:17,840 --> 00:06:20,479
verification flow of poco

151
00:06:20,479 --> 00:06:22,240
so we start with our software and

152
00:06:22,240 --> 00:06:24,479
hardware and the first thing we do is

153
00:06:24,479 --> 00:06:27,919
simulate the software execution on the

154
00:06:27,919 --> 00:06:29,120
hardware

155
00:06:29,120 --> 00:06:31,360
then we do the annotation which means we

156
00:06:31,360 --> 00:06:33,440
tell the verifier which

157
00:06:33,440 --> 00:06:35,600
registers and memory locations contain

158
00:06:35,600 --> 00:06:37,120
our shares

159
00:06:37,120 --> 00:06:38,479
and then we put that into the

160
00:06:38,479 --> 00:06:41,199
verification process which either says

161
00:06:41,199 --> 00:06:43,600
yes the execution is secure or no it's

162
00:06:43,600 --> 00:06:46,800
not secure and the leak is in this cycle

163
00:06:46,800 --> 00:06:48,880
at this gate

164
00:06:48,880 --> 00:06:51,280
and the verification technique of coco

165
00:06:51,280 --> 00:06:54,400
was inspired by rebecca rebecca does

166
00:06:54,400 --> 00:06:56,800
pure hardware verification and now with

167
00:06:56,800 --> 00:06:58,800
coco we extended that

168
00:06:58,800 --> 00:07:00,880
such that we can also

169
00:07:00,880 --> 00:07:03,840
verify software on hardware

170
00:07:03,840 --> 00:07:07,039
over multiple cycles

171
00:07:07,039 --> 00:07:10,720
coco can then further be used to perform

172
00:07:10,720 --> 00:07:14,160
what we call co-design

173
00:07:14,160 --> 00:07:16,479
and co-design can be done for

174
00:07:16,479 --> 00:07:18,560
essentially any processor as long as you

175
00:07:18,560 --> 00:07:20,160
have the netlist

176
00:07:20,160 --> 00:07:23,199
um in our paper we

177
00:07:23,199 --> 00:07:25,120
execute the case study using the

178
00:07:25,120 --> 00:07:27,520
risc-five e-bike score

179
00:07:27,520 --> 00:07:30,240
this is a very small core 32-bit core

180
00:07:30,240 --> 00:07:31,840
with only two

181
00:07:31,840 --> 00:07:34,240
pipeline stages

182
00:07:34,240 --> 00:07:35,039
but

183
00:07:35,039 --> 00:07:36,800
this core has

184
00:07:36,800 --> 00:07:38,639
i would say

185
00:07:38,639 --> 00:07:40,880
all the important component every other

186
00:07:40,880 --> 00:07:42,880
microprocessor has for example a

187
00:07:42,880 --> 00:07:45,919
register file or an alu

188
00:07:45,919 --> 00:07:47,840
and when we then

189
00:07:47,840 --> 00:07:50,960
run our mask software

190
00:07:50,960 --> 00:07:54,160
on the ebook score with coco

191
00:07:54,160 --> 00:07:57,039
we could identify leaks in the register

192
00:07:57,039 --> 00:08:00,000
file in the alu in the data memory and

193
00:08:00,000 --> 00:08:02,080
in the load story unit

194
00:08:02,080 --> 00:08:04,639
and then we tried to find ways

195
00:08:04,639 --> 00:08:06,160
which allow us

196
00:08:06,160 --> 00:08:07,199
to

197
00:08:07,199 --> 00:08:08,080
still

198
00:08:08,080 --> 00:08:12,479
execute mask software without leaks

199
00:08:12,479 --> 00:08:14,720
and for that we need first hardware

200
00:08:14,720 --> 00:08:18,960
fixes so changes in the cpu itself and

201
00:08:18,960 --> 00:08:21,599
also software constraints so rules our

202
00:08:21,599 --> 00:08:24,479
mask software has to follow

203
00:08:24,479 --> 00:08:27,360
here we can see how we hardened the ebex

204
00:08:27,360 --> 00:08:29,599
register file in the end

205
00:08:29,599 --> 00:08:32,080
so as you can see we replaced the

206
00:08:32,080 --> 00:08:35,279
glitchy read address signal by an

207
00:08:35,279 --> 00:08:36,799
address signal

208
00:08:36,799 --> 00:08:38,679
originating from

209
00:08:38,679 --> 00:08:41,919
register and we did that by encoding the

210
00:08:41,919 --> 00:08:44,480
read address into a one-hot vector and

211
00:08:44,480 --> 00:08:46,640
storing it in the register

212
00:08:46,640 --> 00:08:48,560
so everything which comes out of this

213
00:08:48,560 --> 00:08:50,720
one hood register

214
00:08:50,720 --> 00:08:52,959
will not have glitches because it does

215
00:08:52,959 --> 00:08:55,440
not come out of combinatorial logic

216
00:08:55,440 --> 00:08:59,120
and we can then use that bit to gate

217
00:08:59,120 --> 00:09:01,760
the register output

218
00:09:01,760 --> 00:09:04,080
and therefore we can make sure

219
00:09:04,080 --> 00:09:05,279
that

220
00:09:05,279 --> 00:09:08,800
we cannot have the same problem as we

221
00:09:08,800 --> 00:09:10,800
already talked about before so the

222
00:09:10,800 --> 00:09:12,399
address signals

223
00:09:12,399 --> 00:09:14,959
are not glitchy anymore and whenever we

224
00:09:14,959 --> 00:09:17,519
want to read for example x1 we will

225
00:09:17,519 --> 00:09:22,200
really only read x1

226
00:09:22,480 --> 00:09:24,640
yeah and we would not have any

227
00:09:24,640 --> 00:09:27,600
transitions from one register to another

228
00:09:27,600 --> 00:09:30,959
as long as we don't read this registers

229
00:09:30,959 --> 00:09:32,880
consecutively

230
00:09:32,880 --> 00:09:35,040
so this would be an example of a rule

231
00:09:35,040 --> 00:09:38,719
which you would have for a software

232
00:09:38,800 --> 00:09:41,600
we evaluated our approach first of all

233
00:09:41,600 --> 00:09:44,080
in terms of area where we

234
00:09:44,080 --> 00:09:45,839
came to the conclusion that the area

235
00:09:45,839 --> 00:09:49,120
overhead of the core excluding the sram

236
00:09:49,120 --> 00:09:51,519
is about 10 percent and then we tried to

237
00:09:51,519 --> 00:09:54,560
come up with some test cases which show

238
00:09:54,560 --> 00:09:58,160
that our verifier is also efficient

239
00:09:58,160 --> 00:10:01,200
um here we have focused on s-boxes and

240
00:10:01,200 --> 00:10:03,279
masked multipliers because when you

241
00:10:03,279 --> 00:10:05,760
construct a mask implementation this is

242
00:10:05,760 --> 00:10:07,200
the hard part

243
00:10:07,200 --> 00:10:08,800
and this is where

244
00:10:08,800 --> 00:10:13,279
leaks are very like likely

245
00:10:13,279 --> 00:10:15,360
so here you can see for example tahina

246
00:10:15,360 --> 00:10:17,120
and gate also

247
00:10:17,120 --> 00:10:19,120
dom and gate in this case we have a

248
00:10:19,120 --> 00:10:22,000
broken dom and implementation so we can

249
00:10:22,000 --> 00:10:24,160
also find errors

250
00:10:24,160 --> 00:10:27,040
and it reports the leaking cycle 12 but

251
00:10:27,040 --> 00:10:29,519
we also have some bigger test cases like

252
00:10:29,519 --> 00:10:31,839
the aes s box

253
00:10:31,839 --> 00:10:35,839
where we verified 1 900 cycles in 5

254
00:10:35,839 --> 00:10:37,120
hours

255
00:10:37,120 --> 00:10:39,120
and we also tried it with

256
00:10:39,120 --> 00:10:41,120
higher order tests for example the

257
00:10:41,120 --> 00:10:42,720
ketchup s box

258
00:10:42,720 --> 00:10:43,519
and

259
00:10:43,519 --> 00:10:48,560
masked third order dom multiplier

260
00:10:48,560 --> 00:10:50,399
yeah so this leads me to the end of my

261
00:10:50,399 --> 00:10:53,920
presentation so um with coco we tried to

262
00:10:53,920 --> 00:10:56,320
close the hardware software gap

263
00:10:56,320 --> 00:11:00,480
um so existing tools only focused on

264
00:11:00,480 --> 00:11:03,279
mask software and did not consider the

265
00:11:03,279 --> 00:11:04,320
hardware

266
00:11:04,320 --> 00:11:06,800
with coco we tried to co-verify software

267
00:11:06,800 --> 00:11:09,519
and hardware

268
00:11:09,760 --> 00:11:13,040
and also we do co-design which means

269
00:11:13,040 --> 00:11:17,680
that we find leaks in the cpu net list

270
00:11:17,680 --> 00:11:20,959
by applying co-verification

271
00:11:20,959 --> 00:11:22,160
and

272
00:11:22,160 --> 00:11:25,760
we have talked about how we

273
00:11:25,760 --> 00:11:28,320
verified and analyzed the risk 5 ebec

274
00:11:28,320 --> 00:11:32,480
core and found leakages in that core

275
00:11:32,480 --> 00:11:33,600
so this

276
00:11:33,600 --> 00:11:35,920
is the end of my presentation

277
00:11:35,920 --> 00:11:38,160
thank you for your attention and if you

278
00:11:38,160 --> 00:11:40,160
have any questions i'm very happy to

279
00:11:40,160 --> 00:11:43,480
answer them

