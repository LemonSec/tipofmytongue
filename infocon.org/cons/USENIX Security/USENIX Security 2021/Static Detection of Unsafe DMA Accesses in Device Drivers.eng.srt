1
00:00:08,720 --> 00:00:10,240
hello i'm judy bae from chinhua

2
00:00:10,240 --> 00:00:12,400
university and we're glad to share our

3
00:00:12,400 --> 00:00:15,040
paper about the detection of unsafe dm

4
00:00:15,040 --> 00:00:16,800
access

5
00:00:16,800 --> 00:00:19,840
dma is a popular mechanism for improving

6
00:00:19,840 --> 00:00:22,000
hardware io performance and it has been

7
00:00:22,000 --> 00:00:24,640
widely used in modern device servers

8
00:00:24,640 --> 00:00:27,119
dma provides direct data transfer

9
00:00:27,119 --> 00:00:29,359
between hardware registers and system

10
00:00:29,359 --> 00:00:32,000
memory without cpu environment

11
00:00:32,000 --> 00:00:34,320
in this way the cpu can focus on other

12
00:00:34,320 --> 00:00:37,840
tasks without caring about hardware io

13
00:00:37,840 --> 00:00:40,719
for html access there are three basic

14
00:00:40,719 --> 00:00:43,600
steps first the driver needs to create a

15
00:00:43,600 --> 00:00:46,239
dma buffer since the driver performs a

16
00:00:46,239 --> 00:00:48,079
dm access like a

17
00:00:48,079 --> 00:00:50,239
regular variable access

18
00:00:50,239 --> 00:00:51,920
note that this is different from

19
00:00:51,920 --> 00:00:54,160
hardware register access which is

20
00:00:54,160 --> 00:00:56,559
performed by calling specific interface

21
00:00:56,559 --> 00:00:59,280
functions like radar l and nb

22
00:00:59,280 --> 00:01:02,079
finally the driver needs to delete some

23
00:01:02,079 --> 00:01:04,239
dma buffer to a white

24
00:01:04,239 --> 00:01:06,879
memory linux

25
00:01:07,439 --> 00:01:09,360
overall there are two

26
00:01:09,360 --> 00:01:12,479
types of dma buffers used in us servers

27
00:01:12,479 --> 00:01:14,799
by streaming diamond buffer it is

28
00:01:14,799 --> 00:01:18,080
synchronously available to

29
00:01:18,080 --> 00:01:20,720
both the cpu and the hardware device

30
00:01:20,720 --> 00:01:22,479
namely there is no automated

31
00:01:22,479 --> 00:01:24,479
synchronization between hardware

32
00:01:24,479 --> 00:01:26,479
resource and superior cache

33
00:01:26,479 --> 00:01:29,439
thus driven is to implicitly perform

34
00:01:29,439 --> 00:01:31,840
synchronization as a result each

35
00:01:31,840 --> 00:01:35,840
streaming dmx is relatively cheap

36
00:01:35,840 --> 00:01:40,240
the other is coherent dma buffer it is

37
00:01:40,240 --> 00:01:43,200
mutinously available to both the cpu and

38
00:01:43,200 --> 00:01:46,000
hardware device there is

39
00:01:46,000 --> 00:01:47,520
automated

40
00:01:47,520 --> 00:01:50,240
synchronization between hardware

41
00:01:50,240 --> 00:01:53,119
registers and cpu cache thus the driver

42
00:01:53,119 --> 00:01:55,600
doesn't need to explicitly perform

43
00:01:55,600 --> 00:01:58,960
sterilization as a result each coherent

44
00:01:58,960 --> 00:02:02,960
dmx is relatively expensive

45
00:02:02,960 --> 00:02:06,680
both of streaming dmax and

46
00:02:06,680 --> 00:02:10,318
congratulations can have security risks

47
00:02:10,318 --> 00:02:13,200
for streaming the mxs due to no

48
00:02:13,200 --> 00:02:15,440
automated synchronization

49
00:02:15,440 --> 00:02:18,720
the driver should not access the content

50
00:02:18,720 --> 00:02:21,280
of the dma buffer until the smart buffer

51
00:02:21,280 --> 00:02:22,000
is

52
00:02:22,000 --> 00:02:24,400
mapped

53
00:02:24,640 --> 00:02:26,800
there is one exception namely the driver

54
00:02:26,800 --> 00:02:29,120
is allowed to access buffer content

55
00:02:29,120 --> 00:02:31,120
during synchronization with hardware

56
00:02:31,120 --> 00:02:34,400
resource and cpu cache if this row is

57
00:02:34,400 --> 00:02:36,480
violated the data between hardware

58
00:02:36,480 --> 00:02:38,480
resource and cpu cache can be

59
00:02:38,480 --> 00:02:41,360
inconsistent which can cause hardware or

60
00:02:41,360 --> 00:02:43,120
variable functions

61
00:02:43,120 --> 00:02:45,440
for short we call such violation as

62
00:02:45,440 --> 00:02:48,560
inconsistent dma buffer

63
00:02:48,560 --> 00:02:51,040
there is a real example of inconsistent

64
00:02:51,040 --> 00:02:54,480
dna access in the linux verb

65
00:02:54,480 --> 00:02:56,239
in the figure the streaming diamond

66
00:02:56,239 --> 00:02:59,599
buffers kb arrow data is created and

67
00:02:59,599 --> 00:03:00,400
then

68
00:03:00,400 --> 00:03:02,560
it's contained as rate where the

69
00:03:02,560 --> 00:03:06,080
variable hdr error frame control

70
00:03:06,080 --> 00:03:08,400
without any synchronization

71
00:03:08,400 --> 00:03:11,519
thus when you consume the dma processor

72
00:03:11,519 --> 00:03:12,879
across here

73
00:03:12,879 --> 00:03:14,959
this problem was first introduced in

74
00:03:14,959 --> 00:03:17,440
linux 4.4

75
00:03:17,440 --> 00:03:21,519
and fixed fast in october 2020.

76
00:03:21,519 --> 00:03:24,480
for coherent dmxs because the hardware

77
00:03:24,480 --> 00:03:28,000
device can be untrusted it can react by

78
00:03:28,000 --> 00:03:31,120
data into comparing 2dm buffers which

79
00:03:31,120 --> 00:03:33,599
are used by the driver thus the driver

80
00:03:33,599 --> 00:03:35,760
should perform correct

81
00:03:35,760 --> 00:03:38,720
validation of the data from buffers

82
00:03:38,720 --> 00:03:40,480
before using the data

83
00:03:40,480 --> 00:03:44,400
if this raw is violated the dma

84
00:03:44,400 --> 00:03:46,959
data can cause security bugs

85
00:03:46,959 --> 00:03:48,720
such as

86
00:03:48,720 --> 00:03:51,599
buffer flow invented pointer access and

87
00:03:51,599 --> 00:03:52,879
so on

88
00:03:52,879 --> 00:03:54,959
for short we call such violation as

89
00:03:54,959 --> 00:03:58,080
unchecked dme access

90
00:03:58,080 --> 00:04:01,360
there is a real example of unchecked dmx

91
00:04:01,360 --> 00:04:02,959
in a linux server

92
00:04:02,959 --> 00:04:05,840
in the figure the coherent dma buffer

93
00:04:05,840 --> 00:04:08,959
adapter error iss conf has created in

94
00:04:08,959 --> 00:04:11,920
the function mx3

95
00:04:11,920 --> 00:04:15,840
pro device and the s data is used as an

96
00:04:15,840 --> 00:04:18,639
array index where the variable in in the

97
00:04:18,639 --> 00:04:22,400
function vms net 3 get iss

98
00:04:22,400 --> 00:04:24,720
when the hardware device is untrusted

99
00:04:24,720 --> 00:04:26,880
the variable n can be very large which

100
00:04:26,880 --> 00:04:28,800
can cause buffer flow

101
00:04:28,800 --> 00:04:31,440
this problem was first introduced in

102
00:04:31,440 --> 00:04:32,440
linux

103
00:04:32,440 --> 00:04:38,080
3.16 and the fixed bios in june 2020

104
00:04:38,080 --> 00:04:40,000
in summary there are some basic rules

105
00:04:40,000 --> 00:04:42,560
for streaming dm access and concurrent

106
00:04:42,560 --> 00:04:46,400
dmxs if these rules are violated as if

107
00:04:46,400 --> 00:04:49,280
dmxs can occur

108
00:04:49,280 --> 00:04:51,360
in their standards there are three main

109
00:04:51,360 --> 00:04:54,639
changes of detecting unsafe dmxss

110
00:04:54,639 --> 00:04:56,560
the first challenge is how to identify

111
00:04:56,560 --> 00:04:57,840
the mxs

112
00:04:57,840 --> 00:05:00,479
on one hand as i mentioned above

113
00:05:00,479 --> 00:05:02,479
each damn test is

114
00:05:02,479 --> 00:05:05,120
implemented as a regular variable set

115
00:05:05,120 --> 00:05:07,120
without calling specific interface

116
00:05:07,120 --> 00:05:10,160
functions on the other hand dma creation

117
00:05:10,160 --> 00:05:14,400
and dmxs often have implicit

118
00:05:14,400 --> 00:05:16,800
execution order from static code

119
00:05:16,800 --> 00:05:19,680
observation namely in a broken

120
00:05:19,680 --> 00:05:22,240
control flow

121
00:05:22,240 --> 00:05:24,080
the second challenge is how to check

122
00:05:24,080 --> 00:05:25,520
check the

123
00:05:25,520 --> 00:05:28,720
safety of dmx with good accuracy and

124
00:05:28,720 --> 00:05:32,320
efficiency when analyzing large os code

125
00:05:32,320 --> 00:05:34,560
the final challenge is how to drop

126
00:05:34,560 --> 00:05:37,199
phosphates because validating code path

127
00:05:37,199 --> 00:05:39,759
visibility is often difficult and

128
00:05:39,759 --> 00:05:41,759
expensive

129
00:05:41,759 --> 00:05:43,680
to solve this

130
00:05:43,680 --> 00:05:47,759
changes vaporizary key techniques

131
00:05:47,759 --> 00:05:50,720
first we propose a field-based alien

132
00:05:50,720 --> 00:05:53,280
analysis to effectively identify the

133
00:05:53,280 --> 00:05:56,560
maxim from java code second may propose

134
00:05:56,560 --> 00:05:59,120
a flow sensitive and pattern-based

135
00:05:59,120 --> 00:06:00,319
analysis

136
00:06:00,319 --> 00:06:03,199
to accurately and efficiently check the

137
00:06:03,199 --> 00:06:07,520
safety of dmx finally we propose an

138
00:06:07,520 --> 00:06:10,000
efficient code password addition measure

139
00:06:10,000 --> 00:06:11,199
to drop

140
00:06:11,199 --> 00:06:13,919
false photos and reduce the overhead of

141
00:06:13,919 --> 00:06:17,359
using an smt server

142
00:06:17,520 --> 00:06:21,600
now let's see how to identify the mxs

143
00:06:21,600 --> 00:06:23,280
there are two steps

144
00:06:23,280 --> 00:06:25,680
in the first step we handle dma bar for

145
00:06:25,680 --> 00:06:26,880
creation

146
00:06:26,880 --> 00:06:29,440
specifically we identify function calls

147
00:06:29,440 --> 00:06:31,919
about dma creation and collects the

148
00:06:31,919 --> 00:06:34,319
information about their return variables

149
00:06:34,319 --> 00:06:36,479
including variable names

150
00:06:36,479 --> 00:06:39,600
data structure tabs and the fields in

151
00:06:39,600 --> 00:06:42,400
the second step we identified dm access

152
00:06:42,400 --> 00:06:45,280
according to the collective

153
00:06:45,280 --> 00:06:46,560
information

154
00:06:46,560 --> 00:06:48,639
so basically we check each variable

155
00:06:48,639 --> 00:06:51,680
success in the java code if variable

156
00:06:51,680 --> 00:06:53,840
name and data structure information

157
00:06:53,840 --> 00:06:56,240
matches the collected information

158
00:06:56,240 --> 00:07:00,319
success is identified to be under reset

159
00:07:00,319 --> 00:07:03,520
note that in the two steps we use an

160
00:07:03,520 --> 00:07:06,160
intra-procedural flow incentive and then

161
00:07:06,160 --> 00:07:08,400
still earnings analysis to handle

162
00:07:08,400 --> 00:07:11,199
variable assignments

163
00:07:11,199 --> 00:07:13,520
let's see how to check the mxs

164
00:07:13,520 --> 00:07:16,240
for streaming dmx will check four

165
00:07:16,240 --> 00:07:18,800
patterns about the dma operations which

166
00:07:18,800 --> 00:07:19,759
are

167
00:07:19,759 --> 00:07:21,599
shown in the figure

168
00:07:21,599 --> 00:07:23,759
so basically we perform forward and

169
00:07:23,759 --> 00:07:26,240
backward flow sensitive analysis of the

170
00:07:26,240 --> 00:07:28,960
java code to check these patterns

171
00:07:28,960 --> 00:07:31,599
for coherence dmxs the first to perform

172
00:07:31,599 --> 00:07:33,919
flow synthetic return to analysis to

173
00:07:33,919 --> 00:07:36,800
identify the operations affected by dma

174
00:07:36,800 --> 00:07:39,680
data and then check security problems

175
00:07:39,680 --> 00:07:42,160
with three patterns namely whether the

176
00:07:42,160 --> 00:07:44,800
dma data of expert

177
00:07:44,800 --> 00:07:46,720
badge

178
00:07:46,720 --> 00:07:49,039
loop condition array

179
00:07:49,039 --> 00:07:53,599
index or pointer access offset

180
00:07:55,120 --> 00:07:57,520
for each possible

181
00:07:57,520 --> 00:08:01,280
save dmxs we invite when it is code pass

182
00:08:01,280 --> 00:08:03,520
facility to drop first positive there

183
00:08:03,520 --> 00:08:07,599
are three steps in code pathway edition

184
00:08:07,599 --> 00:08:10,800
first we translate each instruction in

185
00:08:10,800 --> 00:08:13,599
the code path to this three constraint

186
00:08:13,599 --> 00:08:15,680
second we add additional constraints

187
00:08:15,680 --> 00:08:19,039
that can trigger security bugs

188
00:08:19,039 --> 00:08:21,599
for example we add a question about a

189
00:08:21,599 --> 00:08:24,639
rebound to check possible buffer flow

190
00:08:24,639 --> 00:08:27,440
finally we use d3 to solve all the

191
00:08:27,440 --> 00:08:30,080
constraints if these constraints cannot

192
00:08:30,080 --> 00:08:32,958
be satisfied the possible ncfdm may

193
00:08:32,958 --> 00:08:35,679
exist if identified as a phosphate and

194
00:08:35,679 --> 00:08:37,839
is dropped

195
00:08:37,839 --> 00:08:40,479
based on the key techniques

196
00:08:40,479 --> 00:08:41,599
we

197
00:08:41,599 --> 00:08:44,640
proposed a new approach named zada

198
00:08:44,640 --> 00:08:47,519
to aesthetically detect dme

199
00:08:47,519 --> 00:08:50,480
and cfdmxs in us drivers they have

200
00:08:50,480 --> 00:08:51,920
implemented

201
00:08:51,920 --> 00:08:54,000
soda with the column compiler and other

202
00:08:54,000 --> 00:08:56,160
performance static analysis on the iron

203
00:08:56,160 --> 00:08:57,920
back code

204
00:08:57,920 --> 00:08:59,680
in evaluation you started to check the

205
00:08:59,680 --> 00:09:01,760
java code in linux

206
00:09:01,760 --> 00:09:04,240
5.6 we just checked the kernel

207
00:09:04,240 --> 00:09:05,600
directories

208
00:09:05,600 --> 00:09:08,320
generals and font which contains vera

209
00:09:08,320 --> 00:09:10,240
code of the kernel

210
00:09:10,240 --> 00:09:12,800
the table shows the detection results of

211
00:09:12,800 --> 00:09:18,839
ncfdmxss in total sata offense 284

212
00:09:18,959 --> 00:09:20,480
real active

213
00:09:20,480 --> 00:09:22,880
dm accesses

214
00:09:22,880 --> 00:09:24,600
among the

215
00:09:24,600 --> 00:09:29,040
123 inconsistent dma accesses 108 of

216
00:09:29,040 --> 00:09:32,160
them are caused by direct access after

217
00:09:32,160 --> 00:09:35,040
dmi creation and the 15 of them are

218
00:09:35,040 --> 00:09:39,120
caused by incorrect dme synchronization

219
00:09:39,120 --> 00:09:41,160
among the

220
00:09:41,160 --> 00:09:44,200
161 unchecked dm excesses

221
00:09:44,200 --> 00:09:48,080
121 of them can cause buffer flow

222
00:09:48,080 --> 00:09:51,440
36 of them can cause embedded

223
00:09:51,440 --> 00:09:52,480
pointer

224
00:09:52,480 --> 00:09:54,720
access and the four of them can cause

225
00:09:54,720 --> 00:09:56,959
infinite

226
00:09:56,959 --> 00:09:59,519
loop pulling appointing

227
00:09:59,519 --> 00:10:00,720
up to the

228
00:10:00,720 --> 00:10:04,320
paper submission 105

229
00:10:04,320 --> 00:10:05,760
unsafe access

230
00:10:05,760 --> 00:10:08,399
and cfdm accesses have been confirmed by

231
00:10:08,399 --> 00:10:10,800
driver developers

232
00:10:10,800 --> 00:10:13,680
however soda still has some limitations

233
00:10:13,680 --> 00:10:15,920
on one hand setup reports some false

234
00:10:15,920 --> 00:10:18,720
positives for some reasons for example

235
00:10:18,720 --> 00:10:21,120
the current aliens analysis is still

236
00:10:21,120 --> 00:10:23,839
simple and not accurate enough

237
00:10:23,839 --> 00:10:25,519
moreover

238
00:10:25,519 --> 00:10:27,760
the password edition can make mistakes

239
00:10:27,760 --> 00:10:30,720
in complex cases on the other hand

240
00:10:30,720 --> 00:10:33,200
saddam may have false negatives for some

241
00:10:33,200 --> 00:10:35,519
reasons for example it lacks the

242
00:10:35,519 --> 00:10:37,279
analysis of

243
00:10:37,279 --> 00:10:39,519
function pointer of course

244
00:10:39,519 --> 00:10:42,320
moreover it neglects other patterns of

245
00:10:42,320 --> 00:10:45,279
unsafe dna exists at present

246
00:10:45,279 --> 00:10:47,839
now let's conclude the work

247
00:10:47,839 --> 00:10:49,519
dma is a

248
00:10:49,519 --> 00:10:52,079
popular maximum used in modern device

249
00:10:52,079 --> 00:10:56,000
drivers however it can still reduce

250
00:10:56,000 --> 00:10:57,440
safety

251
00:10:57,440 --> 00:11:00,000
risks in practice to detect rcfdm

252
00:11:00,000 --> 00:11:02,320
excesses in their servers they purpose a

253
00:11:02,320 --> 00:11:04,720
new static approach named saddam which

254
00:11:04,720 --> 00:11:07,120
uses three key techniques

255
00:11:07,120 --> 00:11:10,880
in the evaluation third offense 284

256
00:11:10,880 --> 00:11:16,959
real sfdm accesses in linux 5.6

257
00:11:17,120 --> 00:11:18,720
thanks for listening if you have any

258
00:11:18,720 --> 00:11:23,640
questions please feel free to contact us

259
00:11:29,680 --> 00:11:31,760
you

