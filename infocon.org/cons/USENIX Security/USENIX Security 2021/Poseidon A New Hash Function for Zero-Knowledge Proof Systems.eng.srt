1
00:00:08,480 --> 00:00:10,800
so welcome to this presentation it will

2
00:00:10,800 --> 00:00:13,280
be about poseidon which is a new hash

3
00:00:13,280 --> 00:00:14,920
function with zero knowledge proof

4
00:00:14,920 --> 00:00:17,199
systems and this is john burke together

5
00:00:17,199 --> 00:00:20,480
with lorenzo dimitry christian arnab and

6
00:00:20,480 --> 00:00:23,520
my name is marcus

7
00:00:23,840 --> 00:00:25,599
okay but before actually talking about

8
00:00:25,599 --> 00:00:27,279
this hash function i want to give you a

9
00:00:27,279 --> 00:00:29,359
short introduction so what are we

10
00:00:29,359 --> 00:00:31,119
actually trying to achieve

11
00:00:31,119 --> 00:00:33,040
and for example consider a private

12
00:00:33,040 --> 00:00:35,360
cryptocurrency spending scenario

13
00:00:35,360 --> 00:00:37,120
and here we want to sign some

14
00:00:37,120 --> 00:00:39,680
transaction h which is the hash value of

15
00:00:39,680 --> 00:00:43,520
some secret k and the metadata m

16
00:00:43,520 --> 00:00:46,239
and after that we want to add h3 which

17
00:00:46,239 --> 00:00:48,640
contains the coins and at some later

18
00:00:48,640 --> 00:00:51,039
point in the future we want to prove

19
00:00:51,039 --> 00:00:53,440
that h is actually an element of the

20
00:00:53,440 --> 00:00:55,600
tree but we also want to show that we

21
00:00:55,600 --> 00:00:58,239
actually know the secret k such as hash

22
00:00:58,239 --> 00:01:00,239
of k and this method

23
00:01:00,239 --> 00:01:02,320
equals to h

24
00:01:02,320 --> 00:01:04,319
and the difference to a classical

25
00:01:04,319 --> 00:01:06,880
scenario here is that h is used in a

26
00:01:06,880 --> 00:01:08,720
zero knowledge context

27
00:01:08,720 --> 00:01:11,040
so for example snark star called bullet

28
00:01:11,040 --> 00:01:12,400
proofs

29
00:01:12,400 --> 00:01:14,479
and proving that this relation holds so

30
00:01:14,479 --> 00:01:16,000
that h is actually an element of the

31
00:01:16,000 --> 00:01:20,320
tree is in general expensive

32
00:01:20,880 --> 00:01:23,119
so a question might be now why don't we

33
00:01:23,119 --> 00:01:24,960
just use a traditional hash function for

34
00:01:24,960 --> 00:01:28,000
example sha 256

35
00:01:28,000 --> 00:01:29,759
and the reason is that it's too

36
00:01:29,759 --> 00:01:32,000
expensive and in early implementations

37
00:01:32,000 --> 00:01:36,000
of z cache by using shadow 256 it almost

38
00:01:36,000 --> 00:01:38,400
took one minute for proofs

39
00:01:38,400 --> 00:01:40,479
and the reason is that the proof

40
00:01:40,479 --> 00:01:42,799
procedure is essentially is very similar

41
00:01:42,799 --> 00:01:44,960
for all of these systems we usually try

42
00:01:44,960 --> 00:01:47,040
to express the proof verification

43
00:01:47,040 --> 00:01:49,840
algorithm as a circuit over some field

44
00:01:49,840 --> 00:01:51,840
and then basically the generation time

45
00:01:51,840 --> 00:01:54,079
of the proof depends on the size of the

46
00:01:54,079 --> 00:01:56,320
circuit on the width and also on the

47
00:01:56,320 --> 00:01:58,000
degrees

48
00:01:58,000 --> 00:02:00,079
and we can see that traditional hash

49
00:02:00,079 --> 00:02:02,320
functions are not very very suited for

50
00:02:02,320 --> 00:02:03,040
that

51
00:02:03,040 --> 00:02:04,799
because they're mainly optimized for

52
00:02:04,799 --> 00:02:06,399
different things so for example they're

53
00:02:06,399 --> 00:02:09,038
optimized for performance on a certain

54
00:02:09,038 --> 00:02:10,399
architecture

55
00:02:10,399 --> 00:02:12,640
so the design to the goal and the idea

56
00:02:12,640 --> 00:02:14,560
of this paper was to basically design

57
00:02:14,560 --> 00:02:17,599
something new which is

58
00:02:17,599 --> 00:02:21,599
better suited for these use cases here

59
00:02:21,680 --> 00:02:23,760
so to recap which properties are we

60
00:02:23,760 --> 00:02:25,920
actually looking for we want to operate

61
00:02:25,920 --> 00:02:27,840
in a big finite field so this can be a

62
00:02:27,840 --> 00:02:29,920
binary field of prime field but we are

63
00:02:29,920 --> 00:02:32,160
focusing on prime field here

64
00:02:32,160 --> 00:02:34,480
and big means um

65
00:02:34,480 --> 00:02:37,599
some so a field of a size around 256

66
00:02:37,599 --> 00:02:38,720
bits

67
00:02:38,720 --> 00:02:40,560
and we also consider new metrics for

68
00:02:40,560 --> 00:02:42,800
example the degrees or the size of the

69
00:02:42,800 --> 00:02:43,840
circuit

70
00:02:43,840 --> 00:02:46,879
and finally of course we also focus on

71
00:02:46,879 --> 00:02:49,040
the cryptographic security of the

72
00:02:49,040 --> 00:02:52,239
resulting construction

73
00:02:54,239 --> 00:02:56,239
so that already brings me to this

74
00:02:56,239 --> 00:02:58,000
poseidon permutation so this is the

75
00:02:58,000 --> 00:03:00,480
permutation now the buses and pipe

76
00:03:00,480 --> 00:03:02,720
limitation and this is based on the

77
00:03:02,720 --> 00:03:05,120
hades design strategy which was proposed

78
00:03:05,120 --> 00:03:06,239
last year

79
00:03:06,239 --> 00:03:08,640
and the idea of this strategy is to use

80
00:03:08,640 --> 00:03:11,440
a mixture of full non-linear and partial

81
00:03:11,440 --> 00:03:13,519
neurons so this can be seen in this

82
00:03:13,519 --> 00:03:14,800
picture here where we basically have

83
00:03:14,800 --> 00:03:17,360
here some rounds with full nonlinear

84
00:03:17,360 --> 00:03:19,680
layers here partial ones and at the end

85
00:03:19,680 --> 00:03:21,840
again full nonlinearities

86
00:03:21,840 --> 00:03:24,239
and in each of the rounds as the linear

87
00:03:24,239 --> 00:03:27,680
layer we use an mds matrix a fixed one

88
00:03:27,680 --> 00:03:29,599
but what is more important here is that

89
00:03:29,599 --> 00:03:31,840
we use an efficient s box in all of the

90
00:03:31,840 --> 00:03:32,799
rounds

91
00:03:32,799 --> 00:03:35,280
and this means that we use a low degree

92
00:03:35,280 --> 00:03:37,680
polynomial for example we have x to the

93
00:03:37,680 --> 00:03:40,239
power of 3 or x to the power 5 for the s

94
00:03:40,239 --> 00:03:42,080
box

95
00:03:42,080 --> 00:03:44,000
and all of that results in a very

96
00:03:44,000 --> 00:03:45,599
flexible design so we can choose

97
00:03:45,599 --> 00:03:48,080
different field sizes but we can also

98
00:03:48,080 --> 00:03:50,560
for example change the number of s-boxes

99
00:03:50,560 --> 00:03:53,599
we use in each round

100
00:03:56,560 --> 00:03:58,319
and if we have this fermentation so this

101
00:03:58,319 --> 00:04:00,640
positive pie validation we can very

102
00:04:00,640 --> 00:04:02,319
easily build a hash function which is

103
00:04:02,319 --> 00:04:04,319
then the position hash function

104
00:04:04,319 --> 00:04:06,480
and essentially this is a very classical

105
00:04:06,480 --> 00:04:08,480
sponge construction

106
00:04:08,480 --> 00:04:11,280
so we basically add our message elements

107
00:04:11,280 --> 00:04:14,799
in each call and the c capacity elements

108
00:04:14,799 --> 00:04:16,720
they remain untouched

109
00:04:16,720 --> 00:04:19,759
and then we use basically a width of

110
00:04:19,759 --> 00:04:23,120
r plus c elements and this p here is the

111
00:04:23,120 --> 00:04:25,840
position implementation from before

112
00:04:25,840 --> 00:04:27,360
and then we can adjust this of course

113
00:04:27,360 --> 00:04:29,680
for example we can just see according to

114
00:04:29,680 --> 00:04:31,759
our security level and the field size

115
00:04:31,759 --> 00:04:33,600
you want to use

116
00:04:33,600 --> 00:04:35,840
so this is basically a classical sponge

117
00:04:35,840 --> 00:04:38,000
hash construction but using our new

118
00:04:38,000 --> 00:04:40,639
permutation

119
00:04:41,680 --> 00:04:44,000
and having decide both the permutation

120
00:04:44,000 --> 00:04:45,440
and the hash we

121
00:04:45,440 --> 00:04:46,960
of course focus also on the group

122
00:04:46,960 --> 00:04:48,400
analysis

123
00:04:48,400 --> 00:04:50,400
so in particular we focus on hash

124
00:04:50,400 --> 00:04:52,320
function specific group analysis so we

125
00:04:52,320 --> 00:04:55,040
are in keyless setting here and we also

126
00:04:55,040 --> 00:04:56,960
for example take a look take a look on

127
00:04:56,960 --> 00:04:59,040
the constraint input constraint output

128
00:04:59,040 --> 00:05:01,120
problem but also on pre-image and

129
00:05:01,120 --> 00:05:02,800
collision attacks

130
00:05:02,800 --> 00:05:05,520
and so we evaluated many strategies from

131
00:05:05,520 --> 00:05:07,440
the last couple of decades

132
00:05:07,440 --> 00:05:09,440
and we found actually that algebraic

133
00:05:09,440 --> 00:05:11,919
attacks were the most promising against

134
00:05:11,919 --> 00:05:13,840
our construction so for example

135
00:05:13,840 --> 00:05:16,000
interpolation attacks and criminal basis

136
00:05:16,000 --> 00:05:17,840
attacks

137
00:05:17,840 --> 00:05:19,680
and the statistical attacks which are

138
00:05:19,680 --> 00:05:22,080
another class of attacks they are

139
00:05:22,080 --> 00:05:24,800
largely prevented by the external rounds

140
00:05:24,800 --> 00:05:26,560
and this is actually a side effect of

141
00:05:26,560 --> 00:05:30,400
this hades design strategy

142
00:05:32,080 --> 00:05:33,759
and before it's on the introductory

143
00:05:33,759 --> 00:05:35,680
slide actually talked about merkle trees

144
00:05:35,680 --> 00:05:37,840
so how can we use sponges and vertical

145
00:05:37,840 --> 00:05:40,639
trees so for example if we want to focus

146
00:05:40,639 --> 00:05:42,560
on led t

147
00:05:42,560 --> 00:05:45,120
we can use a permutation of size t plus

148
00:05:45,120 --> 00:05:47,520
one and here we can fix one element and

149
00:05:47,520 --> 00:05:49,280
take out one element

150
00:05:49,280 --> 00:05:51,039
and in this example here we have an

151
00:05:51,039 --> 00:05:53,840
arity of three so a permutation size of

152
00:05:53,840 --> 00:05:56,160
three plus one which is four

153
00:05:56,160 --> 00:05:58,400
and essentially this continuous like

154
00:05:58,400 --> 00:06:00,720
that but this one layer here

155
00:06:00,720 --> 00:06:05,039
and in the paper we focus on areas of

156
00:06:05,039 --> 00:06:08,639
for example 2 4 8.

157
00:06:08,639 --> 00:06:11,280
and all this decides at the end how

158
00:06:11,280 --> 00:06:13,280
efficient the resulting proof is in this

159
00:06:13,280 --> 00:06:15,520
merkle tree so what is important here is

160
00:06:15,520 --> 00:06:17,280
the efficiency of this f which is

161
00:06:17,280 --> 00:06:21,000
essentially our construction

162
00:06:21,520 --> 00:06:23,680
and for an example to compare the

163
00:06:23,680 --> 00:06:25,840
efficiency we can take a look at the

164
00:06:25,840 --> 00:06:27,360
number of ring one constraints so

165
00:06:27,360 --> 00:06:28,720
essentially this is a system of

166
00:06:28,720 --> 00:06:31,120
productive equations which represents

167
00:06:31,120 --> 00:06:33,520
the whole construction

168
00:06:33,520 --> 00:06:35,520
and here we can exploit the fact that we

169
00:06:35,520 --> 00:06:37,360
have single s boxes in most of our

170
00:06:37,360 --> 00:06:39,919
rounds so this is already very efficient

171
00:06:39,919 --> 00:06:41,919
and we can even derive an optimized

172
00:06:41,919 --> 00:06:44,560
representation of our constraints by

173
00:06:44,560 --> 00:06:46,400
basically including the linear layer and

174
00:06:46,400 --> 00:06:49,599
also round constants in much fewer

175
00:06:49,599 --> 00:06:52,159
constraints

176
00:06:52,880 --> 00:06:53,840
and

177
00:06:53,840 --> 00:06:55,919
finally so this is not so important the

178
00:06:55,919 --> 00:06:58,319
rf and p now number of full impression

179
00:06:58,319 --> 00:07:01,120
ones but if we have these numbers then

180
00:07:01,120 --> 00:07:03,680
we can very easily compute the total

181
00:07:03,680 --> 00:07:06,080
number of constraints we need for some

182
00:07:06,080 --> 00:07:08,720
presiding pipelination so for example

183
00:07:08,720 --> 00:07:10,639
for that with the s box x to the power

184
00:07:10,639 --> 00:07:12,080
of five

185
00:07:12,080 --> 00:07:14,319
and very similarly we can also compute

186
00:07:14,319 --> 00:07:16,639
the number of levels which we would have

187
00:07:16,639 --> 00:07:18,639
in a mercury with 2 to the power of m

188
00:07:18,639 --> 00:07:19,680
elements

189
00:07:19,680 --> 00:07:21,280
and essentially of course this depends

190
00:07:21,280 --> 00:07:25,280
on the arity value which we choose

191
00:07:25,840 --> 00:07:27,440
for the sake of the comparison we can

192
00:07:27,440 --> 00:07:30,720
also focus on a security level of 128

193
00:07:30,720 --> 00:07:33,280
bits and our idea was then to compare

194
00:07:33,280 --> 00:07:36,080
basically in two directions so first in

195
00:07:36,080 --> 00:07:37,520
directions of

196
00:07:37,520 --> 00:07:39,680
number of rank 1 constraints so how many

197
00:07:39,680 --> 00:07:41,759
constraints do they actually need

198
00:07:41,759 --> 00:07:43,680
but then also to compare the regular

199
00:07:43,680 --> 00:07:45,680
hashing performance of the construction

200
00:07:45,680 --> 00:07:47,840
because this is also very important in

201
00:07:47,840 --> 00:07:49,120
use case

202
00:07:49,120 --> 00:07:50,960
and then we basically have the setting

203
00:07:50,960 --> 00:07:52,400
where we want to prove the leaf

204
00:07:52,400 --> 00:07:55,360
knowledge and mercury of two to above 30

205
00:07:55,360 --> 00:07:57,360
elements and this is now the scenario

206
00:07:57,360 --> 00:07:59,199
from the beginning of the presentation

207
00:07:59,199 --> 00:08:01,680
essentially

208
00:08:01,759 --> 00:08:03,599
and the result is that we have a very

209
00:08:03,599 --> 00:08:06,160
low number of rank 1 constraints

210
00:08:06,160 --> 00:08:07,759
and we have for example true

211
00:08:07,759 --> 00:08:10,720
verification times of less than 1 second

212
00:08:10,720 --> 00:08:12,479
and up to 15 times the action

213
00:08:12,479 --> 00:08:16,560
performance of comparable competitors

214
00:08:16,720 --> 00:08:19,120
and we can also take a closer look at

215
00:08:19,120 --> 00:08:21,120
that so for example this is a table

216
00:08:21,120 --> 00:08:22,800
showing the wrong one constraints we

217
00:08:22,800 --> 00:08:25,280
have the number of them and lower is

218
00:08:25,280 --> 00:08:26,560
better here

219
00:08:26,560 --> 00:08:29,199
and you can see that for an arity of

220
00:08:29,199 --> 00:08:30,960
uh eight to one so it's actually

221
00:08:30,960 --> 00:08:34,080
negative eight and width nine we can see

222
00:08:34,080 --> 00:08:36,159
that the number of total constraints is

223
00:08:36,159 --> 00:08:38,958
very low the lowest here and also lower

224
00:08:38,958 --> 00:08:41,360
than these for rescue which is a close

225
00:08:41,360 --> 00:08:43,679
competitor built for essentially

226
00:08:43,679 --> 00:08:45,600
similar use cases

227
00:08:45,600 --> 00:08:47,279
and what you can also see interestingly

228
00:08:47,279 --> 00:08:47,920
is

229
00:08:47,920 --> 00:08:49,920
that if we have this traditional hash

230
00:08:49,920 --> 00:08:53,279
function sharp 256 which is essentially

231
00:08:53,279 --> 00:08:55,200
not built for this use case but for

232
00:08:55,200 --> 00:08:57,600
other metrics for other things

233
00:08:57,600 --> 00:08:59,680
more traditional use cases then we can

234
00:08:59,680 --> 00:09:01,519
see that the number of total constraints

235
00:09:01,519 --> 00:09:04,480
is much higher

236
00:09:05,279 --> 00:09:07,360
and we can actually make also a very

237
00:09:07,360 --> 00:09:10,880
similar comparison with the runtime and

238
00:09:10,880 --> 00:09:12,480
here we can see that for the same

239
00:09:12,480 --> 00:09:15,279
instantiations here we can see that our

240
00:09:15,279 --> 00:09:17,920
hash function or our permutation so this

241
00:09:17,920 --> 00:09:19,360
is the timing which is needed for one

242
00:09:19,360 --> 00:09:20,160
call

243
00:09:20,160 --> 00:09:22,399
and this is also much lower

244
00:09:22,399 --> 00:09:23,600
than

245
00:09:23,600 --> 00:09:25,360
the time needed for

246
00:09:25,360 --> 00:09:26,959
the call of the competitors here for

247
00:09:26,959 --> 00:09:28,800
example

248
00:09:28,800 --> 00:09:30,720
so it's very efficient even in regular

249
00:09:30,720 --> 00:09:33,200
hashing

250
00:09:33,279 --> 00:09:37,080
compare me of course

251
00:09:37,279 --> 00:09:39,360
so what about implementations so we have

252
00:09:39,360 --> 00:09:41,200
a hash function available in various

253
00:09:41,200 --> 00:09:43,519
languages for example rust goes h and c

254
00:09:43,519 --> 00:09:44,720
plus plus

255
00:09:44,720 --> 00:09:46,080
and we also have some circuit

256
00:09:46,080 --> 00:09:48,480
implementations available and also the

257
00:09:48,480 --> 00:09:50,720
reference implementations of the of the

258
00:09:50,720 --> 00:09:53,680
permutation are available online under

259
00:09:53,680 --> 00:09:56,000
this link here but please make sure to

260
00:09:56,000 --> 00:09:58,720
use the version 1.1 since

261
00:09:58,720 --> 00:10:00,800
some minor things have been fixed in

262
00:10:00,800 --> 00:10:04,279
this version

263
00:10:06,000 --> 00:10:08,079
and what can you say about the the use

264
00:10:08,079 --> 00:10:09,920
of brazilians actually it's already used

265
00:10:09,920 --> 00:10:11,760
in various protocols today

266
00:10:11,760 --> 00:10:14,240
for example fire coin dusk network but

267
00:10:14,240 --> 00:10:16,240
also many many others

268
00:10:16,240 --> 00:10:18,160
and if you want to get more information

269
00:10:18,160 --> 00:10:20,160
about that you can just follow these

270
00:10:20,160 --> 00:10:23,120
links here below

271
00:10:24,320 --> 00:10:26,560
okay so thank you very much and if you

272
00:10:26,560 --> 00:10:28,480
want to have more information so please

273
00:10:28,480 --> 00:10:30,399
visit our website

274
00:10:30,399 --> 00:10:32,640
or if you want to ask us some questions

275
00:10:32,640 --> 00:10:36,480
you can also send us an email here

276
00:10:36,480 --> 00:10:39,480
thanks

