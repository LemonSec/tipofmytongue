1
00:00:08,320 --> 00:00:11,200
hi i'm dan roach i'm a professor in the

2
00:00:11,200 --> 00:00:12,559
computer science department at the u.s

3
00:00:12,559 --> 00:00:14,160
naval academy

4
00:00:14,160 --> 00:00:15,679
and this is joint work with some

5
00:00:15,679 --> 00:00:17,199
colleagues at the university of grenoble

6
00:00:17,199 --> 00:00:20,000
in france and some students there and at

7
00:00:20,000 --> 00:00:21,840
my institution we've been working on

8
00:00:21,840 --> 00:00:23,680
this for a couple years and i'm really

9
00:00:23,680 --> 00:00:25,840
excited to tell you about our work so

10
00:00:25,840 --> 00:00:27,519
the basic problem that we're looking at

11
00:00:27,519 --> 00:00:29,359
is how to make sure that remotely stored

12
00:00:29,359 --> 00:00:31,359
data in the cloud or something hasn't

13
00:00:31,359 --> 00:00:34,239
been deleted or altered or tampered with

14
00:00:34,239 --> 00:00:36,640
and the main mechanism for doing that is

15
00:00:36,640 --> 00:00:38,719
what's called an audit and previous

16
00:00:38,719 --> 00:00:40,000
solutions

17
00:00:40,000 --> 00:00:43,120
have some kind of downside either their

18
00:00:43,120 --> 00:00:44,960
audits don't end up checking everything

19
00:00:44,960 --> 00:00:47,280
so it can allow in small changes or they

20
00:00:47,280 --> 00:00:49,680
require a much more expensive um

21
00:00:49,680 --> 00:00:51,520
duplicated storage and they're not

22
00:00:51,520 --> 00:00:54,399
transparent and so what we did was first

23
00:00:54,399 --> 00:00:56,000
of all show that some of that trade-off

24
00:00:56,000 --> 00:00:58,320
is actually inherent between the audit

25
00:00:58,320 --> 00:01:00,000
time and the

26
00:01:00,000 --> 00:01:02,559
audit completeness and the storage size

27
00:01:02,559 --> 00:01:05,119
and we found a different way of doing it

28
00:01:05,119 --> 00:01:06,720
that actually

29
00:01:06,720 --> 00:01:09,200
has good complete checks and transparent

30
00:01:09,200 --> 00:01:10,400
storage

31
00:01:10,400 --> 00:01:12,560
but at the cost of having a slower cost

32
00:01:12,560 --> 00:01:14,720
for audits on the server time and then

33
00:01:14,720 --> 00:01:16,240
we show in our implementation that

34
00:01:16,240 --> 00:01:18,400
actually that slow server time cost is

35
00:01:18,400 --> 00:01:22,159
quite a low linear time and is really uh

36
00:01:22,159 --> 00:01:24,240
practically beneficial compared to the

37
00:01:24,240 --> 00:01:26,080
previous solutions

38
00:01:26,080 --> 00:01:27,759
and when we're talking about this

39
00:01:27,759 --> 00:01:30,000
there's a few images i'm going to use

40
00:01:30,000 --> 00:01:32,159
the first is our client here which is

41
00:01:32,159 --> 00:01:34,720
completely honest in our setting the

42
00:01:34,720 --> 00:01:36,320
server is

43
00:01:36,320 --> 00:01:39,040
malicious so we don't trust the server

44
00:01:39,040 --> 00:01:40,560
at all that's the point of doing an

45
00:01:40,560 --> 00:01:42,640
audit the data that we're storing in

46
00:01:42,640 --> 00:01:44,079
this case is going to be an image of

47
00:01:44,079 --> 00:01:46,640
some cheeses and finally when i have to

48
00:01:46,640 --> 00:01:48,000
talk about a hash digest i'm going to

49
00:01:48,000 --> 00:01:50,399
use this picture of a hash brown

50
00:01:50,399 --> 00:01:52,560
the basic operations that we always want

51
00:01:52,560 --> 00:01:55,520
are to be able to read a single block of

52
00:01:55,520 --> 00:01:58,240
data and to write to like add some

53
00:01:58,240 --> 00:02:00,320
salami into this picture these are

54
00:02:00,320 --> 00:02:02,159
complicated to get right in the light of

55
00:02:02,159 --> 00:02:03,759
the audits but not what we're going to

56
00:02:03,759 --> 00:02:05,520
focus on because it's not really a point

57
00:02:05,520 --> 00:02:07,439
of distinction between what we did in

58
00:02:07,439 --> 00:02:09,520
prior work these are always

59
00:02:09,520 --> 00:02:11,920
pretty good solutions nowadays

60
00:02:11,920 --> 00:02:14,640
um but the point of distinction is the

61
00:02:14,640 --> 00:02:15,760
audit so

62
00:02:15,760 --> 00:02:17,520
the with the audit we want to have an

63
00:02:17,520 --> 00:02:19,440
interactive protocol to make sure that

64
00:02:19,440 --> 00:02:22,480
the data is still intact and at level

65
00:02:22,480 --> 00:02:25,760
zero you just trust the server to not

66
00:02:25,760 --> 00:02:27,920
delete anything this is kind of a joke

67
00:02:27,920 --> 00:02:29,520
but it's really what we currently get

68
00:02:29,520 --> 00:02:31,840
for big cloud computing companies like

69
00:02:31,840 --> 00:02:34,080
aws you just have to believe based on

70
00:02:34,080 --> 00:02:35,840
their reputation that they're not going

71
00:02:35,840 --> 00:02:38,720
to be deleting or altering your data um

72
00:02:38,720 --> 00:02:41,200
maybe you're okay with that uh but even

73
00:02:41,200 --> 00:02:42,319
if you are

74
00:02:42,319 --> 00:02:43,120
the

75
00:02:43,120 --> 00:02:44,480
there's new mechanisms called

76
00:02:44,480 --> 00:02:46,000
distributed storage networks like

77
00:02:46,000 --> 00:02:47,599
filecoin where your data is actually

78
00:02:47,599 --> 00:02:49,920
being stored by um like blockchain

79
00:02:49,920 --> 00:02:51,599
miners across the world and you really

80
00:02:51,599 --> 00:02:53,120
really shouldn't trust them so we need

81
00:02:53,120 --> 00:02:55,920
some more power for audits a basic audit

82
00:02:55,920 --> 00:02:57,920
that'll always work is just downloading

83
00:02:57,920 --> 00:03:00,080
the entirety of the data and checking it

84
00:03:00,080 --> 00:03:03,360
against a hash that you may have saved

85
00:03:03,360 --> 00:03:06,640
and that works and this is a complete

86
00:03:06,640 --> 00:03:08,480
audit it's great except of course it's

87
00:03:08,480 --> 00:03:10,239
quite slow so it's going to have a

88
00:03:10,239 --> 00:03:12,319
really big communication size it's not

89
00:03:12,319 --> 00:03:13,920
very efficient

90
00:03:13,920 --> 00:03:16,159
so a better way is what's called

91
00:03:16,159 --> 00:03:19,120
provable data possession or pdp these

92
00:03:19,120 --> 00:03:21,120
methods have been studied since at least

93
00:03:21,120 --> 00:03:24,319
2007 and the basic idea although there's

94
00:03:24,319 --> 00:03:26,000
a lot of enhancements in the series of

95
00:03:26,000 --> 00:03:28,480
papers on this topic is to randomly

96
00:03:28,480 --> 00:03:30,720
check a block of the database and how do

97
00:03:30,720 --> 00:03:32,640
you do that is by having some kind of

98
00:03:32,640 --> 00:03:35,760
like a merkle hash tree and then you can

99
00:03:35,760 --> 00:03:37,440
repeat that a few times for a few

100
00:03:37,440 --> 00:03:39,840
different blocks and when you do that

101
00:03:39,840 --> 00:03:41,920
that ensures with high probability that

102
00:03:41,920 --> 00:03:44,239
most of the data is intact

103
00:03:44,239 --> 00:03:46,720
that works except that word most that i

104
00:03:46,720 --> 00:03:48,239
use is really important so if you look

105
00:03:48,239 --> 00:03:49,920
at this picture you might notice that

106
00:03:49,920 --> 00:03:51,680
something changed i threw an onion in

107
00:03:51,680 --> 00:03:52,879
here

108
00:03:52,879 --> 00:03:55,439
and so if you have a small change to the

109
00:03:55,439 --> 00:03:57,680
database it's actually likely to be

110
00:03:57,680 --> 00:04:00,239
missed by a pdp audit so if you have a

111
00:04:00,239 --> 00:04:01,760
big change if you delete a lot of the

112
00:04:01,760 --> 00:04:03,200
data it's going to be found by these

113
00:04:03,200 --> 00:04:05,760
checks but if you have a small change um

114
00:04:05,760 --> 00:04:07,439
like adding an onion that doesn't make

115
00:04:07,439 --> 00:04:09,200
the client very happy

116
00:04:09,200 --> 00:04:11,680
but it'll be missed so how can you avoid

117
00:04:11,680 --> 00:04:13,920
that is a different line of work called

118
00:04:13,920 --> 00:04:16,399
proofs of retrievability or por

119
00:04:16,399 --> 00:04:18,880
also studied for about the last 14 years

120
00:04:18,880 --> 00:04:21,600
and the idea here is usually that you

121
00:04:21,600 --> 00:04:23,520
duplicate maybe using erasure codes or

122
00:04:23,520 --> 00:04:25,199
something and shuffle and encrypt the

123
00:04:25,199 --> 00:04:27,280
data think of like oram type techniques

124
00:04:27,280 --> 00:04:29,840
in fact orams were used

125
00:04:29,840 --> 00:04:31,919
in some of these papers

126
00:04:31,919 --> 00:04:33,680
and what does that do is it allows us to

127
00:04:33,680 --> 00:04:36,720
do a pdp style audit where you just

128
00:04:36,720 --> 00:04:38,880
randomly check a few blocks but now

129
00:04:38,880 --> 00:04:40,400
because everything is encrypted and

130
00:04:40,400 --> 00:04:43,280
shuffled losing a few of these blocks as

131
00:04:43,280 --> 00:04:46,160
we could do with pdps is not going to

132
00:04:46,160 --> 00:04:47,919
affect the retrievability of the overall

133
00:04:47,919 --> 00:04:50,080
data because it's been duplicated so the

134
00:04:50,080 --> 00:04:52,560
idea is to say okay we'll allow the fact

135
00:04:52,560 --> 00:04:54,960
that our audit may miss a few blocks

136
00:04:54,960 --> 00:04:56,800
but that's okay because we're using this

137
00:04:56,800 --> 00:04:58,800
kind of duplicated storage

138
00:04:58,800 --> 00:05:01,440
and this works but now it's

139
00:05:01,440 --> 00:05:03,360
the problem is really the storage on the

140
00:05:03,360 --> 00:05:05,360
server it's not transparent and it's

141
00:05:05,360 --> 00:05:07,039
really big so it's going to be expensive

142
00:05:07,039 --> 00:05:08,639
and and it prevents the server from

143
00:05:08,639 --> 00:05:10,560
doing optimizations

144
00:05:10,560 --> 00:05:11,520
like

145
00:05:11,520 --> 00:05:13,199
deduplication which is really important

146
00:05:13,199 --> 00:05:15,600
in practice or to do its own say like

147
00:05:15,600 --> 00:05:17,520
database search because everything is

148
00:05:17,520 --> 00:05:20,080
encrypted from the server's view

149
00:05:20,080 --> 00:05:22,000
and so just as a comparison in the

150
00:05:22,000 --> 00:05:23,600
previous work that we just talked about

151
00:05:23,600 --> 00:05:25,039
there's always some kind of downside

152
00:05:25,039 --> 00:05:26,720
usually between like the completeness of

153
00:05:26,720 --> 00:05:28,720
the audit or the

154
00:05:28,720 --> 00:05:30,639
size and transparency of the storage

155
00:05:30,639 --> 00:05:31,759
mechanism

156
00:05:31,759 --> 00:05:33,840
and we first have a lower bound proof

157
00:05:33,840 --> 00:05:35,759
that you can't have at all so literally

158
00:05:35,759 --> 00:05:37,199
these four

159
00:05:37,199 --> 00:05:39,360
attributes are somehow in conflict there

160
00:05:39,360 --> 00:05:41,360
is no such system we proved that there

161
00:05:41,360 --> 00:05:43,120
is no such system that can satisfy all

162
00:05:43,120 --> 00:05:45,280
these but our work our new approach

163
00:05:45,280 --> 00:05:46,960
finds kind of a different space on this

164
00:05:46,960 --> 00:05:48,720
landscape where what we're going to be

165
00:05:48,720 --> 00:05:51,840
sacrificing is uh the audit time but not

166
00:05:51,840 --> 00:05:53,360
in terms of the client's work so the

167
00:05:53,360 --> 00:05:54,960
client's work and the bandwidth for

168
00:05:54,960 --> 00:05:56,720
communication is still going to be low

169
00:05:56,720 --> 00:05:58,560
but the server time for audit is going

170
00:05:58,560 --> 00:06:00,479
to be linear and then we show that in

171
00:06:00,479 --> 00:06:02,960
practice that linear time um server

172
00:06:02,960 --> 00:06:05,759
audit time is is beneficial is not too

173
00:06:05,759 --> 00:06:07,360
bad

174
00:06:07,360 --> 00:06:09,280
the new strategy is

175
00:06:09,280 --> 00:06:10,880
roughly summarized as treating the data

176
00:06:10,880 --> 00:06:13,440
as a square matrix it doesn't require

177
00:06:13,440 --> 00:06:15,039
modifying the data you just treat the

178
00:06:15,039 --> 00:06:17,759
bytes as numerical values in a square

179
00:06:17,759 --> 00:06:21,199
matrix and uh the idea of audits is to

180
00:06:21,199 --> 00:06:23,600
choose random linear combinations so the

181
00:06:23,600 --> 00:06:24,880
the client is going to do a random

182
00:06:24,880 --> 00:06:26,880
linear combination of the rows the

183
00:06:26,880 --> 00:06:28,240
server is going to do a random linear

184
00:06:28,240 --> 00:06:30,240
combination of the columns and then

185
00:06:30,240 --> 00:06:31,919
during an audit the client just has to

186
00:06:31,919 --> 00:06:34,240
check kind of the the random combination

187
00:06:34,240 --> 00:06:36,639
of linear combinations in two different

188
00:06:36,639 --> 00:06:38,479
ways to see that they're the same thing

189
00:06:38,479 --> 00:06:40,400
the mathematical justification for why

190
00:06:40,400 --> 00:06:42,560
audits work uh actually goes back to

191
00:06:42,560 --> 00:06:45,759
some work from fry vols in 1977 and it

192
00:06:45,759 --> 00:06:47,280
and it really boils down to this

193
00:06:47,280 --> 00:06:50,080
equation here so if a is what the client

194
00:06:50,080 --> 00:06:52,000
thinks should be stored and b is what

195
00:06:52,000 --> 00:06:53,759
the server is actually storing then we

196
00:06:53,759 --> 00:06:55,759
can multiply by these random vectors on

197
00:06:55,759 --> 00:06:58,240
the right and left and there's a proof

198
00:06:58,240 --> 00:07:00,560
that if you get a quality over a large

199
00:07:00,560 --> 00:07:03,840
enough field with these um

200
00:07:03,840 --> 00:07:06,319
matrix vector products then that

201
00:07:06,319 --> 00:07:08,240
proves that with high probability the

202
00:07:08,240 --> 00:07:10,000
two matrices what the client thinks is

203
00:07:10,000 --> 00:07:11,280
stored and what the server actually

204
00:07:11,280 --> 00:07:13,840
stores are the same so visually what

205
00:07:13,840 --> 00:07:15,680
happens is that during an initialization

206
00:07:15,680 --> 00:07:18,000
time when the client has access to the

207
00:07:18,000 --> 00:07:20,639
complete data they choose a random

208
00:07:20,639 --> 00:07:23,360
vector and compute this u transpose a

209
00:07:23,360 --> 00:07:24,880
now these are both going to be secrets

210
00:07:24,880 --> 00:07:27,680
which the client saves so when the data

211
00:07:27,680 --> 00:07:29,840
is then offloaded to the server now

212
00:07:29,840 --> 00:07:31,599
during an audit the client doesn't have

213
00:07:31,599 --> 00:07:33,440
the data anymore they choose a random

214
00:07:33,440 --> 00:07:35,680
vector x send that to the server who

215
00:07:35,680 --> 00:07:37,759
computes their own linear combination of

216
00:07:37,759 --> 00:07:41,440
the columns so that's this bx over here

217
00:07:41,440 --> 00:07:43,120
and sends that back to the client who

218
00:07:43,120 --> 00:07:46,000
now computes two dot products to check

219
00:07:46,000 --> 00:07:48,479
and if they match up then that proves

220
00:07:48,479 --> 00:07:49,599
that the

221
00:07:49,599 --> 00:07:51,919
server stored actually still stores all

222
00:07:51,919 --> 00:07:54,240
the data intact

223
00:07:54,240 --> 00:07:56,720
we implemented this and tested it using

224
00:07:56,720 --> 00:07:58,720
google cloud compute

225
00:07:58,720 --> 00:08:00,639
using actually relatively low powered

226
00:08:00,639 --> 00:08:02,080
virtual machines

227
00:08:02,080 --> 00:08:04,879
and what we compared with is a number of

228
00:08:04,879 --> 00:08:06,400
things but um

229
00:08:06,400 --> 00:08:07,120
the

230
00:08:07,120 --> 00:08:09,840
we compared with the md5 sum checksum

231
00:08:09,840 --> 00:08:11,919
algorithm so this is actually a now

232
00:08:11,919 --> 00:08:14,080
insecure cryptographic checksum but it's

233
00:08:14,080 --> 00:08:16,080
com it's used for some kind of similar

234
00:08:16,080 --> 00:08:17,280
integrity checks and you might be

235
00:08:17,280 --> 00:08:19,280
familiar with running md5 some when you

236
00:08:19,280 --> 00:08:20,960
download some untrusted file from the

237
00:08:20,960 --> 00:08:22,879
internet and what we show is that the

238
00:08:22,879 --> 00:08:25,360
bad thing about our

239
00:08:25,360 --> 00:08:28,319
work is the slow server audit time and

240
00:08:28,319 --> 00:08:29,599
we see that it's not that bad it's

241
00:08:29,599 --> 00:08:31,360
actually an order of magnitude faster

242
00:08:31,360 --> 00:08:33,519
than just doing an empty five sum

243
00:08:33,519 --> 00:08:36,080
and the client time for audits is

244
00:08:36,080 --> 00:08:38,080
extremely low um less than a fraction of

245
00:08:38,080 --> 00:08:40,479
a second even up to a very large one

246
00:08:40,479 --> 00:08:43,200
terabyte size file

247
00:08:43,200 --> 00:08:45,279
the downside however with that is that

248
00:08:45,279 --> 00:08:46,959
it depends on client secrets so the

249
00:08:46,959 --> 00:08:48,560
client has to have these two secret

250
00:08:48,560 --> 00:08:50,480
vectors that it saves that can never be

251
00:08:50,480 --> 00:08:52,000
revealed

252
00:08:52,000 --> 00:08:54,320
and to get around this and allow anyone

253
00:08:54,320 --> 00:08:57,040
to perform an audit what we use is uh

254
00:08:57,040 --> 00:08:59,360
something like a

255
00:08:59,360 --> 00:09:01,440
something between a cryptographic hash

256
00:09:01,440 --> 00:09:02,959
and a

257
00:09:02,959 --> 00:09:05,279
linearly homomorphic encryption function

258
00:09:05,279 --> 00:09:07,440
which i'll call h of alpha

259
00:09:07,440 --> 00:09:08,959
which we actually just use as

260
00:09:08,959 --> 00:09:11,360
exponentiation in an elliptic curve

261
00:09:11,360 --> 00:09:12,720
group

262
00:09:12,720 --> 00:09:15,040
and that allows us to take this private

263
00:09:15,040 --> 00:09:17,279
audit where we have these two secrets

264
00:09:17,279 --> 00:09:19,680
that the client has to store

265
00:09:19,680 --> 00:09:22,000
and turn that into a public audit where

266
00:09:22,000 --> 00:09:23,360
instead we're going to publish the

267
00:09:23,360 --> 00:09:26,160
component wise hash of those two secrets

268
00:09:26,160 --> 00:09:28,080
and the linear homomorphic properties

269
00:09:28,080 --> 00:09:30,320
allow us to do the same check and what's

270
00:09:30,320 --> 00:09:32,640
important to recognize here is that the

271
00:09:32,640 --> 00:09:34,480
server's computation so this is the

272
00:09:34,480 --> 00:09:36,800
expensive thing for us is really exactly

273
00:09:36,800 --> 00:09:38,320
the same the server doesn't have to do

274
00:09:38,320 --> 00:09:40,640
anything with elliptic curves the only

275
00:09:40,640 --> 00:09:42,080
difference is that the size of the

276
00:09:42,080 --> 00:09:43,600
finite field that you're working over

277
00:09:43,600 --> 00:09:45,440
the size of the modulus has to be a

278
00:09:45,440 --> 00:09:47,279
little bit larger for the public audit

279
00:09:47,279 --> 00:09:49,440
so that slows things down a bit but not

280
00:09:49,440 --> 00:09:51,120
too much because the server still isn't

281
00:09:51,120 --> 00:09:54,720
kind of doing any hard crypto operations

282
00:09:54,720 --> 00:09:56,160
and here's the

283
00:09:56,160 --> 00:09:58,720
uh experimental comparison for public

284
00:09:58,720 --> 00:10:00,800
verifiable audits what we see is that

285
00:10:00,800 --> 00:10:02,480
the server's computation time is a bit

286
00:10:02,480 --> 00:10:04,079
slower but still even a little bit

287
00:10:04,079 --> 00:10:06,480
faster than md5 sum the client's

288
00:10:06,480 --> 00:10:09,440
computation time or the the auditor is

289
00:10:09,440 --> 00:10:11,200
significantly slower but it's still fast

290
00:10:11,200 --> 00:10:13,519
so it's it's still something roughly

291
00:10:13,519 --> 00:10:15,360
near 10 seconds for a one terabyte

292
00:10:15,360 --> 00:10:19,360
database to check those two dot products

293
00:10:19,360 --> 00:10:21,600
and so that's what we have in summary

294
00:10:21,600 --> 00:10:23,680
we have uh kind of the best of both

295
00:10:23,680 --> 00:10:26,160
worlds in terms of pdps and pors we get

296
00:10:26,160 --> 00:10:28,480
the efficient transparent storage of

297
00:10:28,480 --> 00:10:30,480
pdps with the complete audit

298
00:10:30,480 --> 00:10:33,040
retrievability guarantees of pors and

299
00:10:33,040 --> 00:10:35,120
the downside is we have a slow server

300
00:10:35,120 --> 00:10:38,720
time for audits but we still have um

301
00:10:38,720 --> 00:10:41,200
small bandwidth and in practice this

302
00:10:41,200 --> 00:10:43,120
slow server time when we measured it

303
00:10:43,120 --> 00:10:45,519
it's very inexpensive it's something

304
00:10:45,519 --> 00:10:48,800
like 10 cents and five minutes um on

305
00:10:48,800 --> 00:10:51,440
on current technology to do a one

306
00:10:51,440 --> 00:10:54,079
terabyte size audit uh compare that to

307
00:10:54,079 --> 00:10:55,920
the cost of actually having this

308
00:10:55,920 --> 00:10:58,320
duplicated storage in previous por

309
00:10:58,320 --> 00:11:00,079
solutions that's going to be much more

310
00:11:00,079 --> 00:11:01,279
expensive

311
00:11:01,279 --> 00:11:03,200
so that's it for me here's my two

312
00:11:03,200 --> 00:11:05,600
favorite clients and uh thanks for your

313
00:11:05,600 --> 00:11:07,279
attention i would love to

314
00:11:07,279 --> 00:11:09,200
chat about this more with any of you at

315
00:11:09,200 --> 00:11:12,839
any point in time

316
00:11:18,160 --> 00:11:20,240
you

