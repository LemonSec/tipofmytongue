1
00:00:08,080 --> 00:00:10,800
hi everyone my name is han zhang

2
00:00:10,800 --> 00:00:13,280
today i'm excited to tell you about our

3
00:00:13,280 --> 00:00:15,759
work capture which aims to address the

4
00:00:15,759 --> 00:00:18,480
challenges in iot library management

5
00:00:18,480 --> 00:00:20,720
this work is a collaboration with rpg

6
00:00:20,720 --> 00:00:23,119
matt and raj at carnegie mellon

7
00:00:23,119 --> 00:00:24,880
university

8
00:00:24,880 --> 00:00:27,519
in recent years iot devices have been

9
00:00:27,519 --> 00:00:29,920
involved in so many infamous attacks and

10
00:00:29,920 --> 00:00:31,519
security incidents

11
00:00:31,519 --> 00:00:34,000
for cheap devices from random brands it

12
00:00:34,000 --> 00:00:36,000
is probably a short bet that they will

13
00:00:36,000 --> 00:00:39,280
get hacked just no matter when

14
00:00:39,280 --> 00:00:41,280
so as consumers looking to purchase some

15
00:00:41,280 --> 00:00:43,920
smart devices perhaps you want to spend

16
00:00:43,920 --> 00:00:45,360
the extra money and go for the

17
00:00:45,360 --> 00:00:46,960
well-known brands

18
00:00:46,960 --> 00:00:49,760
with years of expertise and reputation

19
00:00:49,760 --> 00:00:52,079
on the line these vendors

20
00:00:52,079 --> 00:00:53,920
should be pretty good at securing their

21
00:00:53,920 --> 00:00:56,079
devices right

22
00:00:56,079 --> 00:00:58,480
unfortunately as we will show later in

23
00:00:58,480 --> 00:00:59,520
this talk

24
00:00:59,520 --> 00:01:01,520
these devices often contain well-known

25
00:01:01,520 --> 00:01:04,080
vulnerabilities even if consumers keep

26
00:01:04,080 --> 00:01:08,240
their devices updated how come

27
00:01:08,240 --> 00:01:10,159
to understand the cause of the problem

28
00:01:10,159 --> 00:01:13,840
let's take a look at iot software stack

29
00:01:13,840 --> 00:01:15,920
we probably all have a few smart devices

30
00:01:15,920 --> 00:01:18,560
at home such as the smart plug in this

31
00:01:18,560 --> 00:01:20,159
example

32
00:01:20,159 --> 00:01:22,799
these devices are like mini computers

33
00:01:22,799 --> 00:01:25,680
with a software stack similar to

34
00:01:25,680 --> 00:01:28,720
traditional computer programs

35
00:01:28,720 --> 00:01:31,200
numerous prior research have studied the

36
00:01:31,200 --> 00:01:34,079
code reuse and library management issues

37
00:01:34,079 --> 00:01:36,240
in traditional applications

38
00:01:36,240 --> 00:01:38,640
following their insights we can easily

39
00:01:38,640 --> 00:01:41,360
predict that iot devices would process

40
00:01:41,360 --> 00:01:44,399
similar characteristics

41
00:01:44,399 --> 00:01:46,560
many common third-party libraries will

42
00:01:46,560 --> 00:01:49,040
be prevalent across iot devices and

43
00:01:49,040 --> 00:01:50,159
vendors

44
00:01:50,159 --> 00:01:53,280
meanwhile developers probably won't do a

45
00:01:53,280 --> 00:01:54,399
very good job

46
00:01:54,399 --> 00:01:57,280
in timely patching vulnerable libraries

47
00:01:57,280 --> 00:02:00,240
by exposing libraries with no exploits

48
00:02:00,240 --> 00:02:01,600
to the internet

49
00:02:01,600 --> 00:02:03,920
these devices will definitely threaten

50
00:02:03,920 --> 00:02:07,520
the overall security of users homes

51
00:02:07,520 --> 00:02:08,399
however

52
00:02:08,399 --> 00:02:09,919
both of the predictions are just

53
00:02:09,919 --> 00:02:12,720
conjectures we have to find data to back

54
00:02:12,720 --> 00:02:14,640
up our claims

55
00:02:14,640 --> 00:02:17,120
therefore we conduct a measurement study

56
00:02:17,120 --> 00:02:20,720
to analyze library usage in iot devices

57
00:02:20,720 --> 00:02:22,480
it turns out to be quite a challenging

58
00:02:22,480 --> 00:02:23,840
task

59
00:02:23,840 --> 00:02:26,239
device vendors often release firmware in

60
00:02:26,239 --> 00:02:27,440
binaries

61
00:02:27,440 --> 00:02:28,400
however

62
00:02:28,400 --> 00:02:30,640
we want to obtain insight not only into

63
00:02:30,640 --> 00:02:33,440
what library they use but which specific

64
00:02:33,440 --> 00:02:34,560
versions

65
00:02:34,560 --> 00:02:36,800
we can't get such information directly

66
00:02:36,800 --> 00:02:39,760
from the firmware binary

67
00:02:39,760 --> 00:02:42,400
fortunately many open source libraries

68
00:02:42,400 --> 00:02:45,120
require users to publicly acknowledge

69
00:02:45,120 --> 00:02:46,400
their use

70
00:02:46,400 --> 00:02:49,120
these gpl disclosures contain library

71
00:02:49,120 --> 00:02:52,879
names and exact version numbers

72
00:02:52,879 --> 00:02:55,040
analyzing these libraries will give us a

73
00:02:55,040 --> 00:02:57,519
sneak peek into the severity of the

74
00:02:57,519 --> 00:02:59,760
overall library management problem in

75
00:02:59,760 --> 00:03:01,120
iot

76
00:03:01,120 --> 00:03:02,080
however

77
00:03:02,080 --> 00:03:04,000
there are so many other libraries that

78
00:03:04,000 --> 00:03:06,000
we couldn't go through especially for

79
00:03:06,000 --> 00:03:08,080
those closed source libraries

80
00:03:08,080 --> 00:03:10,480
the problem may be even worse due to a

81
00:03:10,480 --> 00:03:13,599
lack of transparency

82
00:03:13,599 --> 00:03:15,920
we collected library usage from five

83
00:03:15,920 --> 00:03:19,599
popular vendors including 122 firmware

84
00:03:19,599 --> 00:03:22,159
releases from 27 devices

85
00:03:22,159 --> 00:03:25,280
over the span of eight years

86
00:03:25,280 --> 00:03:27,360
we want to find out how popular

87
00:03:27,360 --> 00:03:29,040
third-party libraries are used by

88
00:03:29,040 --> 00:03:31,120
different vendors and whether there is a

89
00:03:31,120 --> 00:03:33,440
significant delay for vendors to patch

90
00:03:33,440 --> 00:03:35,760
their libraries

91
00:03:35,760 --> 00:03:38,000
one important finding is that vendors

92
00:03:38,000 --> 00:03:41,200
only update libraries very infrequently

93
00:03:41,200 --> 00:03:43,440
and they use vulnerable versions most of

94
00:03:43,440 --> 00:03:45,360
the time

95
00:03:45,360 --> 00:03:46,480
for example

96
00:03:46,480 --> 00:03:49,519
here we analyze how often nest devices

97
00:03:49,519 --> 00:03:52,000
update security critical libraries such

98
00:03:52,000 --> 00:03:54,000
as openssl

99
00:03:54,000 --> 00:03:56,480
the y-axis indicates the age of the

100
00:03:56,480 --> 00:03:58,560
library

101
00:03:58,560 --> 00:04:00,640
this green line represents the ideal

102
00:04:00,640 --> 00:04:03,439
case in which every time nest releases a

103
00:04:03,439 --> 00:04:06,159
new firmware it always use the latest

104
00:04:06,159 --> 00:04:07,760
available version

105
00:04:07,760 --> 00:04:09,760
every dock represents a new firmware

106
00:04:09,760 --> 00:04:11,920
release

107
00:04:11,920 --> 00:04:14,480
now the yellow lens shows the the

108
00:04:14,480 --> 00:04:16,478
release history of nest learning

109
00:04:16,478 --> 00:04:18,079
thermostat

110
00:04:18,079 --> 00:04:20,639
it only overlaps with the ideal case in

111
00:04:20,639 --> 00:04:22,560
three time periods

112
00:04:22,560 --> 00:04:25,600
that means that only at these times nest

113
00:04:25,600 --> 00:04:27,840
is using the latest available version in

114
00:04:27,840 --> 00:04:29,280
their firmware

115
00:04:29,280 --> 00:04:30,639
most of the time

116
00:04:30,639 --> 00:04:33,040
it keeps using the updated version even

117
00:04:33,040 --> 00:04:35,280
though they regularly release new

118
00:04:35,280 --> 00:04:37,360
firmware

119
00:04:37,360 --> 00:04:39,919
to make things even worse as a different

120
00:04:39,919 --> 00:04:42,160
product from the same vendor nest

121
00:04:42,160 --> 00:04:45,120
protect uses such an outdated version

122
00:04:45,120 --> 00:04:48,880
because it gets as old as over 1500 days

123
00:04:48,880 --> 00:04:50,960
at one point

124
00:04:50,960 --> 00:04:53,040
we can see that even for devices from

125
00:04:53,040 --> 00:04:55,360
the same vendor they are using different

126
00:04:55,360 --> 00:04:57,280
library versions

127
00:04:57,280 --> 00:04:59,280
we want to point out that this is not a

128
00:04:59,280 --> 00:05:02,160
unique problem just for nest devices

129
00:05:02,160 --> 00:05:04,320
we noticed similar problems in other

130
00:05:04,320 --> 00:05:07,199
vendors as well

131
00:05:07,520 --> 00:05:10,240
our key takeaway are that there are

132
00:05:10,240 --> 00:05:12,880
common libraries shared across vendors

133
00:05:12,880 --> 00:05:15,840
and we've found of data the library uses

134
00:05:15,840 --> 00:05:16,639
a

135
00:05:16,639 --> 00:05:19,840
very prevalent phenomena

136
00:05:19,840 --> 00:05:21,120
in general

137
00:05:21,120 --> 00:05:23,120
relying on individual vendors to

138
00:05:23,120 --> 00:05:25,520
promptly update all libraries seems

139
00:05:25,520 --> 00:05:26,960
problematic

140
00:05:26,960 --> 00:05:29,360
it demands too much

141
00:05:29,360 --> 00:05:31,039
it demands too much effort from the

142
00:05:31,039 --> 00:05:32,240
vendors

143
00:05:32,240 --> 00:05:35,520
but offers very little in return

144
00:05:35,520 --> 00:05:37,600
if they fail to do so vulnerable

145
00:05:37,600 --> 00:05:39,680
libraries impose a huge threat to the

146
00:05:39,680 --> 00:05:42,080
home iot environment and other local

147
00:05:42,080 --> 00:05:43,280
devices

148
00:05:43,280 --> 00:05:45,680
given recent examples of iot library

149
00:05:45,680 --> 00:05:48,160
exploits like ripple 20 and code

150
00:05:48,160 --> 00:05:50,639
stranger we believe that mismanaged

151
00:05:50,639 --> 00:05:53,440
libraries are an important issue for our

152
00:05:53,440 --> 00:05:56,720
future iot ecosystem

153
00:05:56,720 --> 00:05:58,960
to mitigate this challenge we propose

154
00:05:58,960 --> 00:06:01,520
capture a novel architecture for iot

155
00:06:01,520 --> 00:06:04,639
device development and deployment

156
00:06:04,639 --> 00:06:06,960
currently every device includes its

157
00:06:06,960 --> 00:06:09,199
library runtime in the firmware

158
00:06:09,199 --> 00:06:11,440
if the library needs update it has to be

159
00:06:11,440 --> 00:06:13,600
packaged into the into a new firmware

160
00:06:13,600 --> 00:06:15,120
release

161
00:06:15,120 --> 00:06:17,440
meanwhile other devices in the local

162
00:06:17,440 --> 00:06:19,600
home might use the same library or

163
00:06:19,600 --> 00:06:21,759
similar alternatives

164
00:06:21,759 --> 00:06:24,479
one natural idea is to figure out a way

165
00:06:24,479 --> 00:06:26,479
to remove this redundancy

166
00:06:26,479 --> 00:06:29,199
even better maybe we can also liberate

167
00:06:29,199 --> 00:06:31,520
developers from the burden of managing

168
00:06:31,520 --> 00:06:33,440
libraries themselves

169
00:06:33,440 --> 00:06:35,280
that is what we are going to achieve

170
00:06:35,280 --> 00:06:38,000
with capture

171
00:06:38,000 --> 00:06:40,960
in capture we envision every user has a

172
00:06:40,960 --> 00:06:42,800
dedicated hub installed in their

173
00:06:42,800 --> 00:06:44,080
smartphone

174
00:06:44,080 --> 00:06:46,319
the capture hub also serves as a wi-fi

175
00:06:46,319 --> 00:06:50,240
access point for all local devices

176
00:06:50,240 --> 00:06:52,400
instead of asking each device to keep

177
00:06:52,400 --> 00:06:54,960
its own copy of the common library

178
00:06:54,960 --> 00:06:57,280
the capture hub keeps a single copy of

179
00:06:57,280 --> 00:06:59,599
the latest one and is responsible to

180
00:06:59,599 --> 00:07:02,400
maintain security updates

181
00:07:02,400 --> 00:07:04,960
in order to use the library each device

182
00:07:04,960 --> 00:07:06,800
now needs a driver program running on

183
00:07:06,800 --> 00:07:08,080
the hub

184
00:07:08,080 --> 00:07:09,919
this design essentially splits the

185
00:07:09,919 --> 00:07:12,479
traditional device into two pieces the

186
00:07:12,479 --> 00:07:16,400
on hub driver and the local firmware

187
00:07:16,400 --> 00:07:18,720
developers are in full control of how to

188
00:07:18,720 --> 00:07:21,360
implement both components

189
00:07:21,360 --> 00:07:23,840
capture also preserves the flexibility

190
00:07:23,840 --> 00:07:25,280
of developers

191
00:07:25,280 --> 00:07:27,680
if they need any special library and the

192
00:07:27,680 --> 00:07:30,720
rare dependencies not covered by the hub

193
00:07:30,720 --> 00:07:32,080
they can also include them in the

194
00:07:32,080 --> 00:07:34,560
firmware

195
00:07:34,720 --> 00:07:36,800
we have several key design requirements

196
00:07:36,800 --> 00:07:38,319
to capture

197
00:07:38,319 --> 00:07:40,639
first of all because of because of the

198
00:07:40,639 --> 00:07:42,560
firmware splitting we need to preserve

199
00:07:42,560 --> 00:07:44,479
the communication integrity between the

200
00:07:44,479 --> 00:07:46,560
device and the driver

201
00:07:46,560 --> 00:07:48,800
in addition we want to provide actual

202
00:07:48,800 --> 00:07:51,199
security protections currently absent in

203
00:07:51,199 --> 00:07:53,919
the home iot environment

204
00:07:53,919 --> 00:07:55,919
meanwhile because of capture's green

205
00:07:55,919 --> 00:07:58,560
field design we want to lower the effort

206
00:07:58,560 --> 00:08:01,759
of adoption for existing applications

207
00:08:01,759 --> 00:08:04,160
and finally we want to have a performant

208
00:08:04,160 --> 00:08:06,560
and scalable design to support hundreds

209
00:08:06,560 --> 00:08:09,120
of devices with minimal overhead on a

210
00:08:09,120 --> 00:08:12,879
single capture hub

211
00:08:12,879 --> 00:08:15,599
to ensure device integrity and security

212
00:08:15,599 --> 00:08:17,759
we employ a comprehensive

213
00:08:17,759 --> 00:08:20,800
design we employ a comprehensive design

214
00:08:20,800 --> 00:08:22,960
of network and process isolations in

215
00:08:22,960 --> 00:08:24,319
capture

216
00:08:24,319 --> 00:08:26,800
we've also proposed and evaluated three

217
00:08:26,800 --> 00:08:28,879
integration approaches to migrate

218
00:08:28,879 --> 00:08:31,440
existing applications

219
00:08:31,440 --> 00:08:33,679
and finally we've optimized our

220
00:08:33,679 --> 00:08:35,360
prototype and runtime library

221
00:08:35,360 --> 00:08:38,080
implementation to reduce overhead

222
00:08:38,080 --> 00:08:40,240
please check out our paper for details

223
00:08:40,240 --> 00:08:43,760
on any of these aspects

224
00:08:43,839 --> 00:08:46,720
captures isolation design leverages many

225
00:08:46,720 --> 00:08:50,480
existing networking and linux primitives

226
00:08:50,480 --> 00:08:53,600
we use a feature from wpa2 wifi protocol

227
00:08:53,600 --> 00:08:56,399
to construct device specific vlans and

228
00:08:56,399 --> 00:08:59,200
generate unique network credentials

229
00:08:59,200 --> 00:09:01,120
we bind unique virtual network

230
00:09:01,120 --> 00:09:03,680
interfaces to each device and assign

231
00:09:03,680 --> 00:09:06,000
different subnets

232
00:09:06,000 --> 00:09:08,320
meanwhile we create different security

233
00:09:08,320 --> 00:09:10,480
domains for each driver to manage

234
00:09:10,480 --> 00:09:13,760
resource isolation on the shared hub

235
00:09:13,760 --> 00:09:15,920
with the help of network firewall and

236
00:09:15,920 --> 00:09:18,560
linux security modules we create a

237
00:09:18,560 --> 00:09:20,640
strongly isolated runtime for each

238
00:09:20,640 --> 00:09:23,120
device driver pair

239
00:09:23,120 --> 00:09:25,600
to further minimize the attack surfaces

240
00:09:25,600 --> 00:09:27,600
we block all network communication

241
00:09:27,600 --> 00:09:29,839
involving the local devices except for

242
00:09:29,839 --> 00:09:31,440
their drivers

243
00:09:31,440 --> 00:09:33,839
in this way we can protect the devices

244
00:09:33,839 --> 00:09:35,839
even if they are have even if they have

245
00:09:35,839 --> 00:09:39,120
vulnerable firmware components

246
00:09:39,120 --> 00:09:41,279
to preserve the cloud functionalities

247
00:09:41,279 --> 00:09:43,600
the device drivers can still communicate

248
00:09:43,600 --> 00:09:45,920
with the public internet

249
00:09:45,920 --> 00:09:47,519
but we have already minimized the

250
00:09:47,519 --> 00:09:49,680
potential tech surfaces with the capture

251
00:09:49,680 --> 00:09:51,839
design

252
00:09:52,160 --> 00:09:54,320
since capture requires multiplication to

253
00:09:54,320 --> 00:09:57,040
existing applications we propose three

254
00:09:57,040 --> 00:09:58,959
integration approaches to help with

255
00:09:58,959 --> 00:10:01,360
adoption efforts

256
00:10:01,360 --> 00:10:03,279
here is a brief comparison of each

257
00:10:03,279 --> 00:10:04,560
approach

258
00:10:04,560 --> 00:10:07,200
even though building native drivers can

259
00:10:07,200 --> 00:10:09,839
always work for all the applications we

260
00:10:09,839 --> 00:10:12,240
propose os replacement and framework

261
00:10:12,240 --> 00:10:15,200
extension to offer an easy alternative

262
00:10:15,200 --> 00:10:17,440
for existing applications to adopt

263
00:10:17,440 --> 00:10:20,959
capture with minimal changes

264
00:10:21,200 --> 00:10:23,440
to evaluate these approaches we

265
00:10:23,440 --> 00:10:25,760
integrated nine open source apps from

266
00:10:25,760 --> 00:10:28,320
github into capture

267
00:10:28,320 --> 00:10:29,920
this graph shows their normalized

268
00:10:29,920 --> 00:10:31,920
latency compared to their original

269
00:10:31,920 --> 00:10:33,920
baseline

270
00:10:33,920 --> 00:10:35,920
some apps actually show

271
00:10:35,920 --> 00:10:37,519
some apps actually show performance

272
00:10:37,519 --> 00:10:39,040
improvements

273
00:10:39,040 --> 00:10:41,200
this is because we move certain

274
00:10:41,200 --> 00:10:44,079
functions from the from the less capable

275
00:10:44,079 --> 00:10:46,320
microcontrollers to the more powerful

276
00:10:46,320 --> 00:10:48,880
capture hub

277
00:10:48,880 --> 00:10:51,279
for some apps the latency increases as

278
00:10:51,279 --> 00:10:53,519
much as 50 percent

279
00:10:53,519 --> 00:10:56,320
the huge variation between six and over

280
00:10:56,320 --> 00:10:58,320
200 milliseconds is because of the

281
00:10:58,320 --> 00:11:01,279
difference in the hardware platforms

282
00:11:01,279 --> 00:11:03,839
however you may be wondering if this

283
00:11:03,839 --> 00:11:05,760
worst case numbers of hundreds of

284
00:11:05,760 --> 00:11:08,880
milliseconds would have a detrimental

285
00:11:08,880 --> 00:11:11,600
effect on user experiences

286
00:11:11,600 --> 00:11:13,760
to answer that let's move on to the

287
00:11:13,760 --> 00:11:16,160
evaluation of real world macro

288
00:11:16,160 --> 00:11:18,560
benchmarks

289
00:11:18,560 --> 00:11:20,720
we implemented three common types of

290
00:11:20,720 --> 00:11:22,880
trigger action atlas on the home

291
00:11:22,880 --> 00:11:25,920
automation platform ifttt

292
00:11:25,920 --> 00:11:28,320
this plot shows the average latency and

293
00:11:28,320 --> 00:11:29,920
standard deviation

294
00:11:29,920 --> 00:11:32,480
as you can see there's no significant

295
00:11:32,480 --> 00:11:34,480
difference between the original baseline

296
00:11:34,480 --> 00:11:36,240
and capture integration

297
00:11:36,240 --> 00:11:38,000
we suspect that the cloud back-end

298
00:11:38,000 --> 00:11:40,720
services cost the majority of the delay

299
00:11:40,720 --> 00:11:44,320
in the range of several seconds

300
00:11:44,399 --> 00:11:46,640
to summarize we've identified new

301
00:11:46,640 --> 00:11:48,880
challenges raising from iot library

302
00:11:48,880 --> 00:11:50,079
management

303
00:11:50,079 --> 00:11:52,880
we propose capture a novel architecture

304
00:11:52,880 --> 00:11:55,519
to centralize level library management

305
00:11:55,519 --> 00:11:57,839
while providing strong isolation and low

306
00:11:57,839 --> 00:11:59,040
overhead

307
00:11:59,040 --> 00:12:00,880
please check out our paper and github

308
00:12:00,880 --> 00:12:05,800
link for more details thank you

309
00:12:13,440 --> 00:12:15,519
you

