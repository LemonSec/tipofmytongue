1
00:00:08,639 --> 00:00:10,639
hello everyone my name is lee bolson

2
00:00:10,639 --> 00:00:13,040
today i will open our paper show remote

3
00:00:13,040 --> 00:00:15,200
and attracting less evolution combo

4
00:00:15,200 --> 00:00:17,279
imported keywords to detect the bugs in

5
00:00:17,279 --> 00:00:19,439
invited systems

6
00:00:19,439 --> 00:00:22,080
and i are calling authors we finished

7
00:00:22,080 --> 00:00:24,160
this work by collaborating with other

8
00:00:24,160 --> 00:00:26,640
researchers from san jose university the

9
00:00:26,640 --> 00:00:28,880
einstein technology research institute

10
00:00:28,880 --> 00:00:30,320
and studying in the first day qinghai

11
00:00:30,320 --> 00:00:33,440
university and sunderland university

12
00:00:33,440 --> 00:00:35,680
the internet over since has been much

13
00:00:35,680 --> 00:00:38,320
more widely spoiled in recent years it

14
00:00:38,320 --> 00:00:40,719
is believed that 5.8 billion iot

15
00:00:40,719 --> 00:00:43,520
endpoints are induced in 2020. we can

16
00:00:43,520 --> 00:00:47,440
find so many iot devices in our lives

17
00:00:47,440 --> 00:00:50,719
however it was reported that 57 percent

18
00:00:50,719 --> 00:00:53,039
of iot devices are vulnerable to media

19
00:00:53,039 --> 00:00:55,199
ohio stability attacks

20
00:00:55,199 --> 00:00:57,120
there are a large number of our devices

21
00:00:57,120 --> 00:00:59,120
under the lack of security in most of

22
00:00:59,120 --> 00:01:02,079
our devices brings more vulnerability

23
00:01:02,079 --> 00:01:04,239
and meanwhile many iot devices are

24
00:01:04,239 --> 00:01:06,159
connected to the network

25
00:01:06,159 --> 00:01:08,560
so it makes bios more devastating and

26
00:01:08,560 --> 00:01:12,560
often brings significant security risk

27
00:01:12,560 --> 00:01:14,640
in particular wireless router and

28
00:01:14,640 --> 00:01:16,400
wireless cameras suffer some more

29
00:01:16,400 --> 00:01:18,080
attacks because they are usually

30
00:01:18,080 --> 00:01:19,840
connected to the internet and have

31
00:01:19,840 --> 00:01:23,920
weaknesses at many board services

32
00:01:23,920 --> 00:01:25,439
so how to detect

33
00:01:25,439 --> 00:01:28,479
in such iot devices

34
00:01:28,479 --> 00:01:30,640
there are many existing methods

35
00:01:30,640 --> 00:01:33,040
including dynamical solution and static

36
00:01:33,040 --> 00:01:35,520
messages fasting is a popular one but if

37
00:01:35,520 --> 00:01:37,520
we wanted to apply fuzzing on iot

38
00:01:37,520 --> 00:01:40,560
devices we must have a real equipment or

39
00:01:40,560 --> 00:01:43,520
run from wheels and emulator due to

40
00:01:43,520 --> 00:01:46,079
different environment and peripherals it

41
00:01:46,079 --> 00:01:48,399
is unscalable to apply emulation for

42
00:01:48,399 --> 00:01:51,280
different devices and meanwhile specific

43
00:01:51,280 --> 00:01:53,680
bus conditions is also a common program

44
00:01:53,680 --> 00:01:54,880
for fasting

45
00:01:54,880 --> 00:01:56,640
then for static method like a symbolic

46
00:01:56,640 --> 00:01:57,920
exclusion

47
00:01:57,920 --> 00:02:00,719
it is a heavyweight in most cases and

48
00:02:00,719 --> 00:02:03,439
usually falls into past exposing when

49
00:02:03,439 --> 00:02:07,439
exploring complicated functions

50
00:02:07,439 --> 00:02:10,399
now we propose another solution a static

51
00:02:10,399 --> 00:02:13,440
method uh tracker user input between

52
00:02:13,440 --> 00:02:15,280
front and and the back and the floor

53
00:02:15,280 --> 00:02:17,200
will be discovered effectively and

54
00:02:17,200 --> 00:02:19,599
efficiently and show you in this figure

55
00:02:19,599 --> 00:02:21,280
on the left-hand side of the front end

56
00:02:21,280 --> 00:02:24,319
of luda is a javascript file and the

57
00:02:24,319 --> 00:02:26,720
back end is a binary named hdbd on the

58
00:02:26,720 --> 00:02:27,840
right hand side

59
00:02:27,840 --> 00:02:29,520
which causes many functions to handle

60
00:02:29,520 --> 00:02:31,840
you also input from the front end and

61
00:02:31,840 --> 00:02:34,160
have a weak functions labeled with

62
00:02:34,160 --> 00:02:36,160
eligible left angle i will present more

63
00:02:36,160 --> 00:02:38,800
details in this example

64
00:02:38,800 --> 00:02:40,800
let's move on this is our motivation

65
00:02:40,800 --> 00:02:42,640
server demonstrating a real-world

66
00:02:42,640 --> 00:02:44,720
vulnerability in looters there are four

67
00:02:44,720 --> 00:02:48,160
steps to stream this bug first i use or

68
00:02:48,160 --> 00:02:51,760
insert a usb flash device into this

69
00:02:51,760 --> 00:02:54,160
router then she can charge it in the web

70
00:02:54,160 --> 00:02:55,360
interface

71
00:02:55,360 --> 00:02:57,760
and click the mode button on the

72
00:02:57,760 --> 00:03:00,640
response page then

73
00:03:00,640 --> 00:03:03,680
this event is in the tool button

74
00:03:03,680 --> 00:03:08,080
and a command in javascript happens

75
00:03:08,080 --> 00:03:09,360
now i will

76
00:03:09,360 --> 00:03:12,480
load the course of this bug this figure

77
00:03:12,480 --> 00:03:14,080
focus on the details about how to

78
00:03:14,080 --> 00:03:16,319
utilize the web interface and the

79
00:03:16,319 --> 00:03:19,599
variable encoder inside of this router

80
00:03:19,599 --> 00:03:21,360
on the left hand side i use adjustment

81
00:03:21,360 --> 00:03:23,599
needed to click a motor button of web

82
00:03:23,599 --> 00:03:26,400
interface then the front end will send a

83
00:03:26,400 --> 00:03:28,000
requester

84
00:03:28,000 --> 00:03:30,239
with the device name attached

85
00:03:30,239 --> 00:03:32,799
we should see this available

86
00:03:32,799 --> 00:03:35,920
in the line six of this javascript file

87
00:03:35,920 --> 00:03:39,120
and name the uh device name

88
00:03:39,120 --> 00:03:41,280
on the right-hand side uh the background

89
00:03:41,280 --> 00:03:45,040
the web server is a binary named httpd

90
00:03:45,040 --> 00:03:48,640
um and it will pass the requester and

91
00:03:48,640 --> 00:03:51,519
invert as a series of functions and

92
00:03:51,519 --> 00:03:53,120
finally the codes are functioning the

93
00:03:53,120 --> 00:03:56,159
name of the form set usb unloader to

94
00:03:56,159 --> 00:04:00,319
identify the motion the device name

95
00:04:00,400 --> 00:04:03,040
synthesize a command string

96
00:04:03,040 --> 00:04:05,439
then execute the command to a motor this

97
00:04:05,439 --> 00:04:08,400
is basically specified the devices as

98
00:04:08,400 --> 00:04:10,640
shown in line 4.

99
00:04:10,640 --> 00:04:14,239
unfortunately we can see there are no

100
00:04:14,239 --> 00:04:16,798
sanitization tracking so there is a

101
00:04:16,798 --> 00:04:19,040
commander injection bug and tiger can

102
00:04:19,040 --> 00:04:21,839
append exchanger uh commands to device

103
00:04:21,839 --> 00:04:24,479
name in the front end

104
00:04:24,479 --> 00:04:27,360
available named cmd that may be embedded

105
00:04:27,360 --> 00:04:30,000
in malicious commands a fossil attacks

106
00:04:30,000 --> 00:04:32,479
can directly send a malicious request to

107
00:04:32,479 --> 00:04:34,080
wildling legalize

108
00:04:34,080 --> 00:04:38,639
and exploit this luther remotely

109
00:04:38,639 --> 00:04:40,800
at the same time we find an interesting

110
00:04:40,800 --> 00:04:43,199
phenomenon that a coma stream named the

111
00:04:43,199 --> 00:04:45,520
device name repeatedly appears in the

112
00:04:45,520 --> 00:04:47,360
front end and the background and showing

113
00:04:47,360 --> 00:04:49,680
this figure a blue dash can actually

114
00:04:49,680 --> 00:04:51,199
come stream

115
00:04:51,199 --> 00:04:54,240
so our intuition is that the strings

116
00:04:54,240 --> 00:04:56,720
shown in the web interface are commonly

117
00:04:56,720 --> 00:04:59,120
used in the both front and the fines and

118
00:04:59,120 --> 00:05:00,720
the background functions now the list

119
00:05:00,720 --> 00:05:03,520
string device name show in list server

120
00:05:03,520 --> 00:05:06,400
but in the front and the user input is

121
00:05:06,400 --> 00:05:08,720
labeled with a character string in the

122
00:05:08,720 --> 00:05:10,560
background the same string is used to

123
00:05:10,560 --> 00:05:11,680
enter

124
00:05:11,680 --> 00:05:15,520
the use input from the package

125
00:05:16,240 --> 00:05:18,479
so our another method is identifying

126
00:05:18,479 --> 00:05:20,720
these shorter strings and discovery

127
00:05:20,720 --> 00:05:22,880
vulnerability from the reference points

128
00:05:22,880 --> 00:05:26,080
of these strings in the back end

129
00:05:26,080 --> 00:05:27,919
as shown in this figure we can connect

130
00:05:27,919 --> 00:05:30,160
the front and with the balance by

131
00:05:30,160 --> 00:05:33,120
shorter keywords and identify the input

132
00:05:33,120 --> 00:05:36,000
processing function in the backend

133
00:05:36,000 --> 00:05:38,240
if this method works it will a little

134
00:05:38,240 --> 00:05:41,039
bit unnecessary past exploring internal

135
00:05:41,039 --> 00:05:43,199
analysis as we show in our motivated

136
00:05:43,199 --> 00:05:45,440
sample the tender analysis preferred to

137
00:05:45,440 --> 00:05:47,360
start at the form set usb android

138
00:05:47,360 --> 00:05:49,680
function rather than other term source

139
00:05:49,680 --> 00:05:52,400
functions like a circuit data

140
00:05:52,400 --> 00:05:55,360
and or input file handle obviously these

141
00:05:55,360 --> 00:05:57,360
functions are more directory to use

142
00:05:57,360 --> 00:05:59,919
imported than others in other words it

143
00:05:59,919 --> 00:06:02,639
can more effectively catch 10 source

144
00:06:02,639 --> 00:06:07,039
engine in this border binaries

145
00:06:07,039 --> 00:06:10,160
so we need to verify our intuition on

146
00:06:10,160 --> 00:06:12,720
normal iot devices we inspect turn

147
00:06:12,720 --> 00:06:14,960
routers from the five windows

148
00:06:14,960 --> 00:06:17,199
to track whether the front end and the

149
00:06:17,199 --> 00:06:19,840
back and use comma keywords to represent

150
00:06:19,840 --> 00:06:21,280
the user input

151
00:06:21,280 --> 00:06:24,199
as listed in this table on average

152
00:06:24,199 --> 00:06:26,960
192.4 percent of the queue were the

153
00:06:26,960 --> 00:06:29,680
value pairs captured in the front and

154
00:06:29,680 --> 00:06:32,240
much loss in the back end so it shows

155
00:06:32,240 --> 00:06:34,880
that our individuals works for least

156
00:06:34,880 --> 00:06:37,199
common devices

157
00:06:37,199 --> 00:06:39,759
now we still have three challenges for

158
00:06:39,759 --> 00:06:41,680
applying our method

159
00:06:41,680 --> 00:06:45,120
the first one is to identifying keywords

160
00:06:45,120 --> 00:06:47,120
in the front end and the second one is

161
00:06:47,120 --> 00:06:49,520
locating the input handle in the back

162
00:06:49,520 --> 00:06:52,080
and left and the third one is

163
00:06:52,080 --> 00:06:54,400
tracking the massive process of using

164
00:06:54,400 --> 00:06:57,680
input to determine the vulnerability

165
00:06:57,680 --> 00:06:59,919
to solve these challenges we design our

166
00:06:59,919 --> 00:07:02,000
approaches silence in architecture and

167
00:07:02,000 --> 00:07:04,080
showing this figure including string

168
00:07:04,080 --> 00:07:06,560
major models uh input

169
00:07:06,560 --> 00:07:08,319
keywords extraction

170
00:07:08,319 --> 00:07:10,639
imported engine now organization and the

171
00:07:10,639 --> 00:07:13,039
input system with data flow analysis

172
00:07:13,039 --> 00:07:14,960
so let's move on to see the details over

173
00:07:14,960 --> 00:07:16,639
saturday

174
00:07:16,639 --> 00:07:18,880
the first module is imported keyboard if

175
00:07:18,880 --> 00:07:20,639
javascript

176
00:07:20,639 --> 00:07:23,360
this model injects keywords from

177
00:07:23,360 --> 00:07:24,639
different

178
00:07:24,639 --> 00:07:26,560
front-end files

179
00:07:26,560 --> 00:07:30,080
including html javascript and xml files

180
00:07:30,080 --> 00:07:32,800
that are embedded in different services

181
00:07:32,800 --> 00:07:34,400
for example we use the regular

182
00:07:34,400 --> 00:07:37,120
expressions to extract keywords from the

183
00:07:37,120 --> 00:07:40,160
label names of an xml nodes

184
00:07:40,160 --> 00:07:42,240
now we fill these keywords by several

185
00:07:42,240 --> 00:07:43,199
rulers

186
00:07:43,199 --> 00:07:45,680
like removing strings with this message

187
00:07:45,680 --> 00:07:48,160
special characters said

188
00:07:48,160 --> 00:07:50,160
with single list keywords are not

189
00:07:50,160 --> 00:07:52,479
related to user input variable now we

190
00:07:52,479 --> 00:07:55,039
failed outer short character strings

191
00:07:55,039 --> 00:07:58,400
when they are less than three and we

192
00:07:58,400 --> 00:08:00,479
remove the character strings in the

193
00:08:00,479 --> 00:08:02,879
shorter libraries and and we also fill

194
00:08:02,879 --> 00:08:04,240
out the chrome strings like button

195
00:08:04,240 --> 00:08:06,240
console and so on these keywords are

196
00:08:06,240 --> 00:08:09,039
usually referenced by many front end

197
00:08:09,039 --> 00:08:12,080
files but they are not related with your

198
00:08:12,080 --> 00:08:13,680
input

199
00:08:13,680 --> 00:08:15,280
and lastly we perform stream matching

200
00:08:15,280 --> 00:08:17,280
between the string filter result and the

201
00:08:17,280 --> 00:08:19,120
strings of all

202
00:08:19,120 --> 00:08:21,280
back and the binary now we simply

203
00:08:21,280 --> 00:08:22,879
identify

204
00:08:22,879 --> 00:08:26,319
both binary by trading the binary with

205
00:08:26,319 --> 00:08:28,479
the max the matrix keywords as the

206
00:08:28,479 --> 00:08:30,240
border binary

207
00:08:30,240 --> 00:08:32,320
the second module is the input engine

208
00:08:32,320 --> 00:08:34,320
organisation and this model not only

209
00:08:34,320 --> 00:08:37,039
detected the location inside the border

210
00:08:37,039 --> 00:08:39,519
binary that reference to the other

211
00:08:39,519 --> 00:08:40,958
keyboard

212
00:08:40,958 --> 00:08:41,839
and

213
00:08:41,839 --> 00:08:44,159
also find the important engine in the

214
00:08:44,159 --> 00:08:46,640
back end that don't have corresponding

215
00:08:46,640 --> 00:08:48,880
keywords in the back end by using a

216
00:08:48,880 --> 00:08:52,160
heuristic messenger and leveraging the

217
00:08:52,160 --> 00:08:55,040
context in this location

218
00:08:55,040 --> 00:08:56,560
additionally we can find the club

219
00:08:56,560 --> 00:08:58,640
process engine by locating the data flow

220
00:08:58,640 --> 00:09:01,519
of user importer interrupted at the

221
00:09:01,519 --> 00:09:03,680
process boundary such as

222
00:09:03,680 --> 00:09:06,839
environmental variables as shown in this

223
00:09:06,839 --> 00:09:09,279
figure and the last module is important

224
00:09:09,279 --> 00:09:11,360
internal analysis

225
00:09:11,360 --> 00:09:13,920
we conducted a core screen engine that

226
00:09:13,920 --> 00:09:15,760
marks the tender source based on the

227
00:09:15,760 --> 00:09:18,560
result of the former model a 10 source

228
00:09:18,560 --> 00:09:22,720
can be a return value or parameters

229
00:09:22,720 --> 00:09:23,920
and showing this figure the written

230
00:09:23,920 --> 00:09:26,959
value nameless cmd and this real square

231
00:09:26,959 --> 00:09:29,040
should be considered as antenna source

232
00:09:29,040 --> 00:09:32,000
at the point in the use input

233
00:09:32,000 --> 00:09:34,720
and so on the right hand side this is

234
00:09:34,720 --> 00:09:36,800
our internal specification algorithm

235
00:09:36,800 --> 00:09:38,800
when performing instruction level tender

236
00:09:38,800 --> 00:09:41,760
analysis and divide all functions into

237
00:09:41,760 --> 00:09:44,959
three classes and this method achieved

238
00:09:44,959 --> 00:09:47,440
a trade-off between efficiency and

239
00:09:47,440 --> 00:09:49,360
efficacy

240
00:09:49,360 --> 00:09:51,839
for evaluation observation will meet

241
00:09:51,839 --> 00:09:54,000
these three questions

242
00:09:54,000 --> 00:09:55,760
uh for the first question can certainly

243
00:09:55,760 --> 00:09:58,240
find the real world vulnerability with

244
00:09:58,240 --> 00:10:01,120
exactly the least iot windows that

245
00:10:01,120 --> 00:10:03,279
provide their firmware online such as

246
00:10:03,279 --> 00:10:06,160
netgear agenda totaling dealing and so

247
00:10:06,160 --> 00:10:09,120
on we collected 39 firmware samples from

248
00:10:09,120 --> 00:10:11,839
the 14 crs as a data set including

249
00:10:11,839 --> 00:10:14,480
looters and the cameras

250
00:10:14,480 --> 00:10:16,560
and the show enlisted the table sales

251
00:10:16,560 --> 00:10:17,680
they found

252
00:10:17,680 --> 00:10:19,920
and no bugs and most of them

253
00:10:19,920 --> 00:10:21,519
have been

254
00:10:21,519 --> 00:10:22,800
assigned the

255
00:10:22,800 --> 00:10:25,600
ideas other than gb protocol citizen

256
00:10:25,600 --> 00:10:27,040
also supports

257
00:10:27,040 --> 00:10:29,040
other services such as the europmp and

258
00:10:29,040 --> 00:10:30,560
the actual nav

259
00:10:30,560 --> 00:10:32,079
for the second question can celeste

260
00:10:32,079 --> 00:10:34,399
accurate detect the imported keywords

261
00:10:34,399 --> 00:10:36,320
and this result shows that services can

262
00:10:36,320 --> 00:10:38,880
accurately detect all three types over

263
00:10:38,880 --> 00:10:41,440
front and the files

264
00:10:41,440 --> 00:10:43,360
this table shows the

265
00:10:43,360 --> 00:10:45,360
number of imported keywords selected by

266
00:10:45,360 --> 00:10:47,839
each stable oversized we should see that

267
00:10:47,839 --> 00:10:49,920
in most uh

268
00:10:49,920 --> 00:10:52,720
most devices uh like least tender

269
00:10:52,720 --> 00:10:55,120
looters

270
00:10:55,360 --> 00:10:57,600
let's land 10 percent of all strings

271
00:10:57,600 --> 00:11:00,079
from the front and the fines are finally

272
00:11:00,079 --> 00:11:01,600
used to

273
00:11:01,600 --> 00:11:03,519
finally use the capture to catch the

274
00:11:03,519 --> 00:11:05,120
important keywords

275
00:11:05,120 --> 00:11:07,920
and as shown in the columns on the right

276
00:11:07,920 --> 00:11:10,480
hand side selecting makes the sensible

277
00:11:10,480 --> 00:11:14,000
two positives in the parameter keywords

278
00:11:14,000 --> 00:11:15,680
for a certain question how efficiently

279
00:11:15,680 --> 00:11:18,640
and accurate is is our internal analysis

280
00:11:18,640 --> 00:11:20,560
firstly these figures list the number of

281
00:11:20,560 --> 00:11:22,399
keywords in issues

282
00:11:22,399 --> 00:11:24,399
is the sample detected by our three

283
00:11:24,399 --> 00:11:26,880
different modules and we can see that

284
00:11:26,880 --> 00:11:28,399
most of the imported keywords are

285
00:11:28,399 --> 00:11:30,320
created by the keywords referenced

286
00:11:30,320 --> 00:11:33,360
located uh especially for turner devices

287
00:11:33,360 --> 00:11:34,880
netgear samples

288
00:11:34,880 --> 00:11:36,880
contained monkey was located a pilot in

289
00:11:36,880 --> 00:11:39,040
particular engine finder and the dealing

290
00:11:39,040 --> 00:11:41,440
samples contained moki was from the

291
00:11:41,440 --> 00:11:42,959
closest process

292
00:11:42,959 --> 00:11:44,959
engine finder

293
00:11:44,959 --> 00:11:47,440
additionally for all services of this

294
00:11:47,440 --> 00:11:49,279
data software services

295
00:11:49,279 --> 00:11:52,560
raise the 101 alerts and uh

296
00:11:52,560 --> 00:11:55,279
46 of them are two positives where

297
00:11:55,279 --> 00:11:59,519
unless then those uh false positives and

298
00:11:59,519 --> 00:12:01,040
like this

299
00:12:01,040 --> 00:12:03,440
overturn the problems occurred because

300
00:12:03,440 --> 00:12:06,160
of missing objectives for some common

301
00:12:06,160 --> 00:12:09,279
functions such as a toi function

302
00:12:09,279 --> 00:12:11,600
to summarize we proposed uh to say

303
00:12:11,600 --> 00:12:13,680
another approaching to detect the

304
00:12:13,680 --> 00:12:15,279
security when i build the embedded

305
00:12:15,279 --> 00:12:17,519
assistance this work is based on the

306
00:12:17,519 --> 00:12:19,680
inside that available names are commonly

307
00:12:19,680 --> 00:12:21,600
shared between the front and the file

308
00:12:21,600 --> 00:12:22,959
and the back end of the functions

309
00:12:22,959 --> 00:12:25,279
cytosine has successful discovery

310
00:12:25,279 --> 00:12:27,519
certificates there are the software

311
00:12:27,519 --> 00:12:30,079
banks and the most of them have been

312
00:12:30,079 --> 00:12:33,120
assigned by ids and our code and the

313
00:12:33,120 --> 00:12:36,800
dataset will be public at the github

314
00:12:36,800 --> 00:12:38,560
thanks for your attention i'm happy to

315
00:12:38,560 --> 00:12:41,959
get any questions

