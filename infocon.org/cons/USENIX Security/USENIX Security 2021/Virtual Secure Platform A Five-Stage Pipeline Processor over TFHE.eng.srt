1
00:00:08,880 --> 00:00:11,519
hello i'm kotaro matsuka we will give

2
00:00:11,519 --> 00:00:13,759
the presentation about virtual secret

3
00:00:13,759 --> 00:00:16,480
platform a five-stage pipeline processor

4
00:00:16,480 --> 00:00:19,520
over t3

5
00:00:19,680 --> 00:00:22,720
in recent years cloud computing has been

6
00:00:22,720 --> 00:00:24,480
spreading rapidly

7
00:00:24,480 --> 00:00:27,039
cloud computing is a mechanism to upload

8
00:00:27,039 --> 00:00:30,400
computation processes to others

9
00:00:30,400 --> 00:00:32,800
in the current system the program and

10
00:00:32,800 --> 00:00:35,360
the data required to be processed must

11
00:00:35,360 --> 00:00:38,239
be sent to the cloud server and must be

12
00:00:38,239 --> 00:00:42,719
in plain text at the time of execution

13
00:00:42,719 --> 00:00:44,559
what we are concerned about is the

14
00:00:44,559 --> 00:00:47,600
possibility that the program and data

15
00:00:47,600 --> 00:00:50,640
can be wiretapped

16
00:00:50,640 --> 00:00:53,440
the cloud server is a computer located

17
00:00:53,440 --> 00:00:55,600
somewhere on the earth

18
00:00:55,600 --> 00:00:58,399
if a manager's party has direct access

19
00:00:58,399 --> 00:01:01,280
to that computer he or she may be able

20
00:01:01,280 --> 00:01:05,760
to extract the program and data from it

21
00:01:05,760 --> 00:01:08,640
so what to do

22
00:01:08,640 --> 00:01:11,520
just encrypt everything if the client

23
00:01:11,520 --> 00:01:13,200
encrypts everything the client

24
00:01:13,200 --> 00:01:15,759
information including the program can't

25
00:01:15,759 --> 00:01:17,840
be via tap

26
00:01:17,840 --> 00:01:21,680
we can make wiretapping pointrest

27
00:01:21,680 --> 00:01:24,840
this is the basic idea of this

28
00:01:24,840 --> 00:01:28,240
research we call our proposed method

29
00:01:28,240 --> 00:01:32,880
battle secure platform or usb

30
00:01:33,439 --> 00:01:36,720
the natural question about this idea is

31
00:01:36,720 --> 00:01:40,320
how can we execute an encrypted program

32
00:01:40,320 --> 00:01:42,560
to answer this question we recall the

33
00:01:42,560 --> 00:01:45,200
fact that programs are executed in a

34
00:01:45,200 --> 00:01:48,399
processor and the processor consists of

35
00:01:48,399 --> 00:01:50,960
logic circuits

36
00:01:50,960 --> 00:01:53,520
in the slide we show a small example of

37
00:01:53,520 --> 00:01:56,880
a part of logic circuits in a processor

38
00:01:56,880 --> 00:01:59,840
logic circuit can be represented by a

39
00:01:59,840 --> 00:02:02,880
graph of logic gates

40
00:02:02,880 --> 00:02:05,040
so the question

41
00:02:05,040 --> 00:02:08,560
how can we execute an encrypted program

42
00:02:08,560 --> 00:02:12,160
can be reduced to an easier question

43
00:02:12,160 --> 00:02:15,360
how can we evaluate logic gates over

44
00:02:15,360 --> 00:02:18,000
encrypted bits

45
00:02:18,000 --> 00:02:20,800
this is because if we can evaluate logic

46
00:02:20,800 --> 00:02:23,280
gates over encrypted bits

47
00:02:23,280 --> 00:02:25,840
we can replace each physical logic gate

48
00:02:25,840 --> 00:02:28,000
with them

49
00:02:28,000 --> 00:02:31,120
and this gives a way to evaluate logic

50
00:02:31,120 --> 00:02:34,640
circuits over encrypted bits

51
00:02:34,640 --> 00:02:36,480
this means

52
00:02:36,480 --> 00:02:39,760
we can construct the processor emitter

53
00:02:39,760 --> 00:02:42,959
for the encrypted program

54
00:02:42,959 --> 00:02:45,599
one way to achieve the evaluation of

55
00:02:45,599 --> 00:02:48,319
logic gates over encrypted bits is

56
00:02:48,319 --> 00:02:51,680
called free homomorphic encryption

57
00:02:51,680 --> 00:02:53,760
this is suitable for evaluating

58
00:02:53,760 --> 00:02:56,000
secretion certificates like processor

59
00:02:56,000 --> 00:02:59,440
circuits because fhg does not need a

60
00:02:59,440 --> 00:03:01,680
pre-circuit steps bound

61
00:03:01,680 --> 00:03:07,040
we use one kind of fhg called tfhg

62
00:03:07,840 --> 00:03:11,200
in our development of bsp we set three

63
00:03:11,200 --> 00:03:12,640
targets

64
00:03:12,640 --> 00:03:14,959
the first one is high level language

65
00:03:14,959 --> 00:03:16,720
compatibility

66
00:03:16,720 --> 00:03:19,040
sometimes there's a trade-off between

67
00:03:19,040 --> 00:03:22,000
security and usability

68
00:03:22,000 --> 00:03:24,640
even though usb provides a way to secure

69
00:03:24,640 --> 00:03:27,519
computational floating if the user needs

70
00:03:27,519 --> 00:03:29,760
to write the program by assembling

71
00:03:29,760 --> 00:03:33,120
language an ordinary user won't use such

72
00:03:33,120 --> 00:03:35,280
a system

73
00:03:35,280 --> 00:03:38,319
the second one is speed

74
00:03:38,319 --> 00:03:41,040
because the operations in fhg are

75
00:03:41,040 --> 00:03:43,440
significantly throw we have to do

76
00:03:43,440 --> 00:03:46,319
special treatment for speed up to make a

77
00:03:46,319 --> 00:03:48,560
workable implementation in the current

78
00:03:48,560 --> 00:03:50,560
real environment

79
00:03:50,560 --> 00:03:52,560
the last one is open source

80
00:03:52,560 --> 00:03:55,280
implementation

81
00:03:55,280 --> 00:03:57,360
providing an implementation

82
00:03:57,360 --> 00:04:00,120
is of course necessary to ensure

83
00:04:00,120 --> 00:04:02,879
reproducibility of results

84
00:04:02,879 --> 00:04:05,120
but in addition to that

85
00:04:05,120 --> 00:04:08,000
open source is an excellent way to allow

86
00:04:08,000 --> 00:04:10,400
users to verify the implementation

87
00:04:10,400 --> 00:04:14,080
without trusting us

88
00:04:14,080 --> 00:04:16,798
our contribution to making bsp

89
00:04:16,798 --> 00:04:19,600
compatible with high-level language is

90
00:04:19,600 --> 00:04:22,479
to implement the risk five better sale

91
00:04:22,479 --> 00:04:26,080
and error investor c compiler for it

92
00:04:26,080 --> 00:04:28,960
the reason why we chose c is it is

93
00:04:28,960 --> 00:04:31,759
widely used and easy to write speed

94
00:04:31,759 --> 00:04:33,360
optimized code

95
00:04:33,360 --> 00:04:35,919
the reason why we chose risk firebase

96
00:04:35,919 --> 00:04:39,199
isa is we want to use a widely used

97
00:04:39,199 --> 00:04:42,639
compiler framework like lwm to make the

98
00:04:42,639 --> 00:04:45,440
compiler user friendly

99
00:04:45,440 --> 00:04:47,520
for speeding up

100
00:04:47,520 --> 00:04:50,400
we need two optimizations

101
00:04:50,400 --> 00:04:53,440
one is the development of your cam an

102
00:04:53,440 --> 00:04:56,960
fpg gate operation engine this is needed

103
00:04:56,960 --> 00:04:59,440
to utilize parallelism

104
00:04:59,440 --> 00:05:02,080
what we mean here by parallelism is

105
00:05:02,080 --> 00:05:04,320
explained better

106
00:05:04,320 --> 00:05:07,680
the other is cmx memory

107
00:05:07,680 --> 00:05:10,080
because the memory circuit constructed

108
00:05:10,080 --> 00:05:13,120
by logic gates can be easily bigger than

109
00:05:13,120 --> 00:05:14,800
the processor circuit

110
00:05:14,800 --> 00:05:17,840
a special cryptographical optimization

111
00:05:17,840 --> 00:05:21,120
for memories is effective

112
00:05:21,120 --> 00:05:22,800
by combining both

113
00:05:22,800 --> 00:05:25,360
we achieved 100

114
00:05:25,360 --> 00:05:27,919
600 times faster

115
00:05:27,919 --> 00:05:31,360
implementation compared to this state of

116
00:05:31,360 --> 00:05:33,039
earth

117
00:05:33,039 --> 00:05:34,560
at last

118
00:05:34,560 --> 00:05:37,120
our implementation is available on

119
00:05:37,120 --> 00:05:39,840
github

120
00:05:40,000 --> 00:05:44,400
in this presentation we focus on iocam

121
00:05:44,400 --> 00:05:47,440
because the exploitation of parism is

122
00:05:47,440 --> 00:05:49,919
our central contribution and the most

123
00:05:49,919 --> 00:05:53,758
positive idea we proposed

124
00:05:53,840 --> 00:05:56,080
before explaining the details we

125
00:05:56,080 --> 00:05:57,840
explained the brief structure of the

126
00:05:57,840 --> 00:06:00,240
components needed to evaluate the

127
00:06:00,240 --> 00:06:02,319
processor circuit with the encrypted

128
00:06:02,319 --> 00:06:04,400
program to clarify

129
00:06:04,400 --> 00:06:07,120
where you can tell the work

130
00:06:07,120 --> 00:06:09,520
at first you can take the processor

131
00:06:09,520 --> 00:06:12,319
circuit and replace each logic gate in

132
00:06:12,319 --> 00:06:15,520
the circuit with the hg's logic gate to

133
00:06:15,520 --> 00:06:17,360
construct the processor for the

134
00:06:17,360 --> 00:06:20,880
encrypted program

135
00:06:20,880 --> 00:06:23,520
during the construction you can also

136
00:06:23,520 --> 00:06:26,479
embed cmax memory with the encrypted

137
00:06:26,479 --> 00:06:29,280
program and data to the processor

138
00:06:29,280 --> 00:06:31,758
circuit

139
00:06:32,080 --> 00:06:34,880
after the construction you can evaluate

140
00:06:34,880 --> 00:06:37,440
the repressed circuit which encrypted

141
00:06:37,440 --> 00:06:40,319
program iteratively

142
00:06:40,319 --> 00:06:42,560
handling this evaluation phase is the

143
00:06:42,560 --> 00:06:46,080
main role of your cam

144
00:06:46,240 --> 00:06:49,599
in other words we can say that yokan is

145
00:06:49,599 --> 00:06:52,160
an abstraction layer for running logic

146
00:06:52,160 --> 00:06:55,759
circuits over t4ht

147
00:06:55,759 --> 00:06:58,080
due to the time limit we will only

148
00:06:58,080 --> 00:07:00,080
discuss the get schedule cleaning

149
00:07:00,080 --> 00:07:02,400
process of your eocam which is one of

150
00:07:02,400 --> 00:07:05,280
the most important functionality

151
00:07:05,280 --> 00:07:07,840
after that we will briefly summarize the

152
00:07:07,840 --> 00:07:11,840
performance results of usb

153
00:07:12,000 --> 00:07:14,240
there are two types of parallelism in

154
00:07:14,240 --> 00:07:17,120
effect logic circuit evaluation yukon

155
00:07:17,120 --> 00:07:19,280
tries to exploit

156
00:07:19,280 --> 00:07:22,000
one is the gate level parallelism and

157
00:07:22,000 --> 00:07:24,160
the other is pipeline-induced

158
00:07:24,160 --> 00:07:26,240
parallelism

159
00:07:26,240 --> 00:07:28,800
the gate level parallel this means

160
00:07:28,800 --> 00:07:31,280
sometimes there are multiple guests that

161
00:07:31,280 --> 00:07:35,039
are available at the same time

162
00:07:35,039 --> 00:07:36,240
for example

163
00:07:36,240 --> 00:07:37,840
in this circuit

164
00:07:37,840 --> 00:07:40,080
alpha and better

165
00:07:40,080 --> 00:07:43,199
be can be partly a variable but gamma is

166
00:07:43,199 --> 00:07:44,400
not

167
00:07:44,400 --> 00:07:47,840
because the evaluation of gamma depends

168
00:07:47,840 --> 00:07:52,638
on the results of alpha and beta

169
00:07:54,319 --> 00:07:56,639
the pipeline is a circuit design

170
00:07:56,639 --> 00:07:58,879
techniques that increases separately

171
00:07:58,879 --> 00:08:01,759
available gate by inserting registers to

172
00:08:01,759 --> 00:08:04,080
divide the circuit into multiple

173
00:08:04,080 --> 00:08:06,639
parallely available circuits

174
00:08:06,639 --> 00:08:09,199
if we assume we are currently evaluating

175
00:08:09,199 --> 00:08:12,000
a stream of data by the same circuit in

176
00:08:12,000 --> 00:08:14,960
pipeline situation gamma does not have

177
00:08:14,960 --> 00:08:18,240
to weight the results of alpha and beta

178
00:08:18,240 --> 00:08:20,639
because the previous results of alpha

179
00:08:20,639 --> 00:08:25,720
and beta are spread from the register

180
00:08:26,479 --> 00:08:28,879
these parallelisms are treatable in

181
00:08:28,879 --> 00:08:31,440
physical circuits since physical rush

182
00:08:31,440 --> 00:08:33,679
gates are naturally evaluated in

183
00:08:33,679 --> 00:08:34,799
parallels

184
00:08:34,799 --> 00:08:35,919
however

185
00:08:35,919 --> 00:08:39,039
exploiting them in circuits over fhe is

186
00:08:39,039 --> 00:08:41,039
not trivial

187
00:08:41,039 --> 00:08:42,958
because we rely on the physical

188
00:08:42,958 --> 00:08:45,200
execution environment to evaluate the

189
00:08:45,200 --> 00:08:47,360
launch gate the number of priority

190
00:08:47,360 --> 00:08:50,160
available logic gates is limited by the

191
00:08:50,160 --> 00:08:52,320
physical machine capability

192
00:08:52,320 --> 00:08:55,519
like the number of codes in the cpu

193
00:08:55,519 --> 00:08:56,560
so

194
00:08:56,560 --> 00:08:59,120
efficient scheduling to free utilize the

195
00:08:59,120 --> 00:09:03,040
capability is needed

196
00:09:03,040 --> 00:09:05,600
you can take scale of this scheduling

197
00:09:05,600 --> 00:09:07,040
problem

198
00:09:07,040 --> 00:09:09,839
the prominent future of iocan is it

199
00:09:09,839 --> 00:09:14,080
supports both magical cpu and large gpu

200
00:09:14,080 --> 00:09:16,240
to maximize usable physical machine

201
00:09:16,240 --> 00:09:18,959
capability

202
00:09:18,959 --> 00:09:21,519
we evaluated our implementation by

203
00:09:21,519 --> 00:09:24,399
running it in real environments

204
00:09:24,399 --> 00:09:26,399
we show here two cases

205
00:09:26,399 --> 00:09:30,560
case one is aws p3.6x rise which is

206
00:09:30,560 --> 00:09:34,800
equipped with 8b100 gpus and k2 is

207
00:09:34,800 --> 00:09:37,440
sakura kokolek which is equipped with

208
00:09:37,440 --> 00:09:40,560
100 gpu

209
00:09:40,560 --> 00:09:42,240
in both cases

210
00:09:42,240 --> 00:09:44,480
introducing the pipeline gives better

211
00:09:44,480 --> 00:09:46,240
performance

212
00:09:46,240 --> 00:09:48,880
by increasing parallelism

213
00:09:48,880 --> 00:09:51,920
case 1 is the fastest gas among all

214
00:09:51,920 --> 00:09:53,519
tested cases

215
00:09:53,519 --> 00:09:57,360
we achieved about 0.8 seconds per cycle

216
00:09:57,360 --> 00:09:59,120
which means

217
00:09:59,120 --> 00:10:02,880
we constructed a 1.25 hertz clock speed

218
00:10:02,880 --> 00:10:06,079
processor over to hg

219
00:10:06,079 --> 00:10:09,279
as you can see ks2 is slower than case

220
00:10:09,279 --> 00:10:10,640
one

221
00:10:10,640 --> 00:10:13,760
this is because k2 does not have enough

222
00:10:13,760 --> 00:10:16,320
physical capability to free utilize all

223
00:10:16,320 --> 00:10:18,160
parallelisms

224
00:10:18,160 --> 00:10:21,839
so a scheduler like yokan to handle

225
00:10:21,839 --> 00:10:26,079
massive physical capability is needed

226
00:10:26,079 --> 00:10:29,279
to emphasize the nobility of our work we

227
00:10:29,279 --> 00:10:32,160
compare bsp with frisk a state of the

228
00:10:32,160 --> 00:10:34,800
art processor over here

229
00:10:34,800 --> 00:10:37,680
risk only supports one instruction and

230
00:10:37,680 --> 00:10:40,320
this causes no compare support while

231
00:10:40,320 --> 00:10:43,200
base b has c compiler support

232
00:10:43,200 --> 00:10:45,839
the evaluation of the circuit of risk is

233
00:10:45,839 --> 00:10:47,720
estimated to take

234
00:10:47,720 --> 00:10:51,920
1278 seconds per cycle while with b

235
00:10:51,920 --> 00:10:54,640
takes only 0.8 seconds

236
00:10:54,640 --> 00:10:58,320
this means with b is about 1

237
00:10:58,320 --> 00:11:02,320
600 times faster than the state of yield

238
00:11:02,320 --> 00:11:04,959
in addition to that our implementation

239
00:11:04,959 --> 00:11:07,839
is publicly available while the run of

240
00:11:07,839 --> 00:11:10,640
risk is not

241
00:11:10,880 --> 00:11:12,480
in conclusion

242
00:11:12,480 --> 00:11:15,760
with b enables offloading computation

243
00:11:15,760 --> 00:11:18,800
while keeping the program secret

244
00:11:18,800 --> 00:11:21,519
we demonstrated this by providing an

245
00:11:21,519 --> 00:11:23,440
open implementation

246
00:11:23,440 --> 00:11:24,959
and one more thing

247
00:11:24,959 --> 00:11:27,920
we want to emphasize is the exploitation

248
00:11:27,920 --> 00:11:30,880
of a parallelism is important in average

249
00:11:30,880 --> 00:11:33,120
circuit evaluation

250
00:11:33,120 --> 00:11:36,160
this gives significant speed up

251
00:11:36,160 --> 00:11:38,560
to expand the possibility of utilizing

252
00:11:38,560 --> 00:11:39,680
partisan

253
00:11:39,680 --> 00:11:43,120
we have to care about both cat level and

254
00:11:43,120 --> 00:11:45,200
architectural paradism in the circuit

255
00:11:45,200 --> 00:11:48,000
design and prepare massive critical

256
00:11:48,000 --> 00:11:51,839
capabilities like multiple gpus and the

257
00:11:51,839 --> 00:11:54,000
scheduler which can handle the flow of

258
00:11:54,000 --> 00:11:55,360
it

259
00:11:55,360 --> 00:11:57,760
for any question about our research

260
00:11:57,760 --> 00:12:00,800
please post to the github discussion in

261
00:12:00,800 --> 00:12:03,519
our implementation repository and or

262
00:12:03,519 --> 00:12:06,399
send an email to this address

263
00:12:06,399 --> 00:12:09,959
thank you for watching

264
00:12:17,440 --> 00:12:19,519
you

