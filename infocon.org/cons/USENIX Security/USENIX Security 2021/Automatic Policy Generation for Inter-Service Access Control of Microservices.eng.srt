1
00:00:08,480 --> 00:00:10,880
hello everyone i'm shin li from jojan

2
00:00:10,880 --> 00:00:13,440
university i'm honored to share our

3
00:00:13,440 --> 00:00:16,560
recent work automatic policy generation

4
00:00:16,560 --> 00:00:18,960
for inter-service assessed control of

5
00:00:18,960 --> 00:00:20,400
microservices

6
00:00:20,400 --> 00:00:23,279
it's joint work with yen chu chang shan

7
00:00:23,279 --> 00:00:25,119
and jin

8
00:00:25,119 --> 00:00:27,840
the architecture of cloud applications

9
00:00:27,840 --> 00:00:30,560
is constantly evolving this is a

10
00:00:30,560 --> 00:00:33,440
traditional monolithic cloud application

11
00:00:33,440 --> 00:00:36,559
consisting of four modules front-end

12
00:00:36,559 --> 00:00:39,280
back-end database analogy

13
00:00:39,280 --> 00:00:41,280
the four modules are packaged and

14
00:00:41,280 --> 00:00:43,520
deployed as a whole which leads

15
00:00:43,520 --> 00:00:46,399
flexibility when upgrading and scaling

16
00:00:46,399 --> 00:00:49,520
the modules individually

17
00:00:49,520 --> 00:00:51,760
the metal service architecture aims to

18
00:00:51,760 --> 00:00:53,600
solve this problem

19
00:00:53,600 --> 00:00:56,960
it's split a large complex application

20
00:00:56,960 --> 00:01:00,079
into multiple microservices according to

21
00:01:00,079 --> 00:01:01,840
its business boundaries

22
00:01:01,840 --> 00:01:04,479
each of them can be independently

23
00:01:04,479 --> 00:01:07,920
developed deployed and upgraded thereby

24
00:01:07,920 --> 00:01:11,200
significantly improving the flexibility

25
00:01:11,200 --> 00:01:15,200
of software development and maintenance

26
00:01:15,200 --> 00:01:18,320
in order to efficiently manage the

27
00:01:18,320 --> 00:01:21,119
communications between microservices

28
00:01:21,119 --> 00:01:23,920
service mesh emerges as a dedicated

29
00:01:23,920 --> 00:01:27,040
communication infrastructure layer

30
00:01:27,040 --> 00:01:30,640
it uses process to manage all network

31
00:01:30,640 --> 00:01:33,280
traffic among microservices and

32
00:01:33,280 --> 00:01:35,600
transparently add features

33
00:01:35,600 --> 00:01:38,880
like access control traffic management

34
00:01:38,880 --> 00:01:40,960
and monitoring

35
00:01:40,960 --> 00:01:44,000
however the communications that were

36
00:01:44,000 --> 00:01:46,560
previously conducted by local

37
00:01:46,560 --> 00:01:49,520
invitations are now exposed through the

38
00:01:49,520 --> 00:01:50,799
network

39
00:01:50,799 --> 00:01:54,640
which creates a potential data service

40
00:01:54,640 --> 00:01:57,200
for example if the loading service is

41
00:01:57,200 --> 00:02:00,320
compromised hiding behind its ip address

42
00:02:00,320 --> 00:02:02,079
and certificate

43
00:02:02,079 --> 00:02:04,560
the attacher may directly talk to the

44
00:02:04,560 --> 00:02:07,119
database service to obtain system

45
00:02:07,119 --> 00:02:09,758
information

46
00:02:09,758 --> 00:02:12,959
to defend against this kind of tech

47
00:02:12,959 --> 00:02:15,599
popular microservice infrastructures

48
00:02:15,599 --> 00:02:19,040
such as cruise and steel provide

49
00:02:19,040 --> 00:02:22,560
inter-service access control mechanisms

50
00:02:22,560 --> 00:02:25,080
with authorization policies the

51
00:02:25,080 --> 00:02:27,920
administrator can specify that

52
00:02:27,920 --> 00:02:31,200
only the backend service can access the

53
00:02:31,200 --> 00:02:32,720
database service

54
00:02:32,720 --> 00:02:37,200
thus this attack can be prevented

55
00:02:37,200 --> 00:02:40,000
well these mechanisms seem powerful and

56
00:02:40,000 --> 00:02:42,879
promising currently they still rely on

57
00:02:42,879 --> 00:02:45,120
careful manual configuration

58
00:02:45,120 --> 00:02:47,280
which is time consuming

59
00:02:47,280 --> 00:02:50,640
airport and inflexible not suitable for

60
00:02:50,640 --> 00:02:52,959
large scale and dynamically changing

61
00:02:52,959 --> 00:02:56,160
microservice applications

62
00:02:56,160 --> 00:02:58,959
to automatically generate security

63
00:02:58,959 --> 00:03:02,000
policies for distributed systems

64
00:03:02,000 --> 00:03:05,040
existing efforts can be divided into

65
00:03:05,040 --> 00:03:06,640
three categories

66
00:03:06,640 --> 00:03:09,360
document-based approaches history-based

67
00:03:09,360 --> 00:03:12,159
approaches and model-based approaches

68
00:03:12,159 --> 00:03:14,959
however their drawbacks regarding

69
00:03:14,959 --> 00:03:16,159
accuracy

70
00:03:16,159 --> 00:03:19,200
completeness and agility makes them

71
00:03:19,200 --> 00:03:22,958
unsuitable for medical services

72
00:03:23,120 --> 00:03:26,319
as a distributed system metal service

73
00:03:26,319 --> 00:03:28,319
applications have their unique

74
00:03:28,319 --> 00:03:30,159
characteristics

75
00:03:30,159 --> 00:03:31,040
first

76
00:03:31,040 --> 00:03:34,080
services are small which means a central

77
00:03:34,080 --> 00:03:37,360
service has low internal complexity

78
00:03:37,360 --> 00:03:38,560
moreover

79
00:03:38,560 --> 00:03:41,440
the intercessing rotation manner in the

80
00:03:41,440 --> 00:03:44,959
same application is relatively uniform

81
00:03:44,959 --> 00:03:48,080
and the amount of involved protocols and

82
00:03:48,080 --> 00:03:51,440
libraries are limited

83
00:03:51,760 --> 00:03:54,560
this charitable this territory states

84
00:03:54,560 --> 00:03:57,760
provide us an opportunity to extract the

85
00:03:57,760 --> 00:04:00,159
inter-service invitation logic with

86
00:04:00,159 --> 00:04:02,159
static analysis

87
00:04:02,159 --> 00:04:04,080
we designed auto armor

88
00:04:04,080 --> 00:04:06,480
an automatic inter-service access

89
00:04:06,480 --> 00:04:08,560
control pulse generator

90
00:04:08,560 --> 00:04:12,000
its workflow contains two phases

91
00:04:12,000 --> 00:04:13,599
in the request

92
00:04:13,599 --> 00:04:17,759
extraction phase it uses statin analysis

93
00:04:17,759 --> 00:04:21,120
to obtain the requests a service may

94
00:04:21,120 --> 00:04:23,759
initiate and build the inter-service

95
00:04:23,759 --> 00:04:25,759
invitation logic of the entire

96
00:04:25,759 --> 00:04:27,280
application

97
00:04:27,280 --> 00:04:30,000
in the policy management phase it uses a

98
00:04:30,000 --> 00:04:32,720
novel permission graph to generate

99
00:04:32,720 --> 00:04:35,199
access control policies and keeps them

100
00:04:35,199 --> 00:04:38,560
updated over time

101
00:04:39,360 --> 00:04:42,479
auto armor consists of three components

102
00:04:42,479 --> 00:04:45,199
an offline static nexus engine

103
00:04:45,199 --> 00:04:48,320
responsible for request extraction

104
00:04:48,320 --> 00:04:50,880
a permission engine for maintaining and

105
00:04:50,880 --> 00:04:53,520
updating the permission graph and the

106
00:04:53,520 --> 00:04:56,080
processor generator for translating the

107
00:04:56,080 --> 00:04:59,520
graph into access control process

108
00:04:59,520 --> 00:05:01,280
let's take

109
00:05:01,280 --> 00:05:02,400
the

110
00:05:02,400 --> 00:05:04,960
deployment of metal service e as an

111
00:05:04,960 --> 00:05:07,919
example to go through the workflow of

112
00:05:07,919 --> 00:05:09,280
auto armor

113
00:05:09,280 --> 00:05:10,400
at first

114
00:05:10,400 --> 00:05:12,960
service ease source code is submitted to

115
00:05:12,960 --> 00:05:15,039
the cs server

116
00:05:15,039 --> 00:05:18,320
the static analysis engine analyzes code

117
00:05:18,320 --> 00:05:20,639
and generates a manifest fail to

118
00:05:20,639 --> 00:05:23,120
describe the rotations that it may

119
00:05:23,120 --> 00:05:25,840
initiate

120
00:05:26,000 --> 00:05:29,440
at deployment time the permission

121
00:05:29,440 --> 00:05:32,160
engine passes the manifest field and

122
00:05:32,160 --> 00:05:34,720
inserts e into the plantation's

123
00:05:34,720 --> 00:05:36,320
permission graph

124
00:05:36,320 --> 00:05:40,159
with the graph changing the

125
00:05:40,240 --> 00:05:41,759
policy generator

126
00:05:41,759 --> 00:05:42,960
calculates

127
00:05:42,960 --> 00:05:44,160
the

128
00:05:44,160 --> 00:05:46,800
uh recess control policies that need to

129
00:05:46,800 --> 00:05:48,960
be added or modified

130
00:05:48,960 --> 00:05:52,240
afterward it issues the policies to the

131
00:05:52,240 --> 00:05:54,240
control plan of the

132
00:05:54,240 --> 00:05:56,400
metro service infrastructure

133
00:05:56,400 --> 00:05:57,280
which

134
00:05:57,280 --> 00:06:00,080
further distributes them to services

135
00:06:00,080 --> 00:06:01,680
process

136
00:06:01,680 --> 00:06:02,639
for

137
00:06:02,639 --> 00:06:05,600
policy enforcement

138
00:06:05,600 --> 00:06:07,840
here are some significant technical

139
00:06:07,840 --> 00:06:09,600
details

140
00:06:09,600 --> 00:06:13,280
in the request extraction phase we aim

141
00:06:13,280 --> 00:06:15,919
to extract all inter-service invocation

142
00:06:15,919 --> 00:06:18,960
requests and their detailed attributes

143
00:06:18,960 --> 00:06:20,479
from the code

144
00:06:20,479 --> 00:06:22,400
since microservices

145
00:06:22,400 --> 00:06:25,120
communicates with these

146
00:06:25,120 --> 00:06:28,800
network api mutations we can only focus

147
00:06:28,800 --> 00:06:32,160
on the code related to them and use

148
00:06:32,160 --> 00:06:35,520
program slicing to obtain the smallest

149
00:06:35,520 --> 00:06:37,600
but significant

150
00:06:37,600 --> 00:06:40,000
code fragments to

151
00:06:40,000 --> 00:06:41,360
reduce the

152
00:06:41,360 --> 00:06:45,440
complexity of static analysis

153
00:06:45,440 --> 00:06:48,319
specifically our method consists of

154
00:06:48,319 --> 00:06:50,800
three steps

155
00:06:50,800 --> 00:06:53,759
first we model the used invitation

156
00:06:53,759 --> 00:06:56,479
libraries and scan the

157
00:06:56,479 --> 00:07:00,319
service code to identify the segments

158
00:07:00,319 --> 00:07:04,560
that initiate inter-service notations

159
00:07:05,039 --> 00:07:08,160
next starting from these statements we

160
00:07:08,160 --> 00:07:09,360
perform

161
00:07:09,360 --> 00:07:10,720
backward

162
00:07:10,720 --> 00:07:13,120
tent propagation on the control flow

163
00:07:13,120 --> 00:07:14,080
graphs

164
00:07:14,080 --> 00:07:17,440
to get the program slices associated

165
00:07:17,440 --> 00:07:20,479
with each notation

166
00:07:20,479 --> 00:07:23,599
finally we extract the relevant

167
00:07:23,599 --> 00:07:27,440
attributes such as url and method from

168
00:07:27,440 --> 00:07:31,680
the slices that matter maternal essence

169
00:07:31,680 --> 00:07:34,319
in the policy management phase we

170
00:07:34,319 --> 00:07:37,280
designed a permission graph to optimize

171
00:07:37,280 --> 00:07:40,160
the generated process set

172
00:07:40,160 --> 00:07:42,400
in microservices applications

173
00:07:42,400 --> 00:07:45,120
multiple versions of the same service

174
00:07:45,120 --> 00:07:47,680
may exist at the same time

175
00:07:47,680 --> 00:07:49,599
and they may have different

176
00:07:49,599 --> 00:07:51,599
inter-service dependencies

177
00:07:51,599 --> 00:07:54,720
thus it is necessary to distinguish them

178
00:07:54,720 --> 00:07:56,720
in the authorization

179
00:07:56,720 --> 00:08:00,000
however since they belong to the same

180
00:08:00,000 --> 00:08:02,319
microservice they serve similar

181
00:08:02,319 --> 00:08:03,759
responsibilities

182
00:08:03,759 --> 00:08:06,319
so most of their requests should be

183
00:08:06,319 --> 00:08:07,840
identical

184
00:08:07,840 --> 00:08:10,000
therefore generating

185
00:08:10,000 --> 00:08:13,039
separate policies for each version will

186
00:08:13,039 --> 00:08:16,160
introduce much redundancy

187
00:08:16,160 --> 00:08:17,120
in the

188
00:08:17,120 --> 00:08:20,240
permission graph we use service node and

189
00:08:20,240 --> 00:08:22,479
version node to integrate the

190
00:08:22,479 --> 00:08:24,960
permissions shared by all versions of

191
00:08:24,960 --> 00:08:26,479
the same service

192
00:08:26,479 --> 00:08:29,280
by this means we eliminate redundant

193
00:08:29,280 --> 00:08:31,919
access control policies as well as

194
00:08:31,919 --> 00:08:35,519
unnecessary policy updates

195
00:08:35,519 --> 00:08:37,360
we evaluated

196
00:08:37,360 --> 00:08:39,919
auto armor with five popular open source

197
00:08:39,919 --> 00:08:43,039
microservice applications including

198
00:08:43,039 --> 00:08:44,959
64 services

199
00:08:44,959 --> 00:08:49,680
developed in six programming languages

200
00:08:49,680 --> 00:08:51,920
the first question is

201
00:08:51,920 --> 00:08:53,920
can auto armor extracts the

202
00:08:53,920 --> 00:08:56,320
inter-service invitation logic

203
00:08:56,320 --> 00:08:59,519
the effectiveness of request extraction

204
00:08:59,519 --> 00:09:02,000
is indicated by two metrics

205
00:09:02,000 --> 00:09:05,200
whether it can identify the invitations

206
00:09:05,200 --> 00:09:08,080
in the code and whether it can extract

207
00:09:08,080 --> 00:09:11,279
the detailed attributes of them

208
00:09:11,279 --> 00:09:14,120
the result shows that for

209
00:09:14,120 --> 00:09:16,320
755 requests

210
00:09:16,320 --> 00:09:19,600
the identification rate is 100

211
00:09:19,600 --> 00:09:22,920
and the attribute extraction rate is

212
00:09:22,920 --> 00:09:25,360
99.5 percent

213
00:09:25,360 --> 00:09:28,720
besides since auto armor reduces the

214
00:09:28,720 --> 00:09:32,240
search space for statin analysis the

215
00:09:32,240 --> 00:09:34,640
average analysis time for each metro

216
00:09:34,640 --> 00:09:35,760
services

217
00:09:35,760 --> 00:09:36,480
is

218
00:09:36,480 --> 00:09:37,600
only

219
00:09:37,600 --> 00:09:40,880
57 seconds

220
00:09:41,440 --> 00:09:44,240
the second question is can auto armor

221
00:09:44,240 --> 00:09:47,519
efficiently generate manage and update

222
00:09:47,519 --> 00:09:50,000
access control pulses

223
00:09:50,000 --> 00:09:51,680
we measured its

224
00:09:51,680 --> 00:09:54,000
process in time in dealing with this

225
00:09:54,000 --> 00:09:55,200
task

226
00:09:55,200 --> 00:09:58,320
and compare it with baseline method that

227
00:09:58,320 --> 00:10:01,279
is generating policies for all service

228
00:10:01,279 --> 00:10:04,920
versions separately

229
00:10:05,200 --> 00:10:07,920
the result shows that auto armor's pulse

230
00:10:07,920 --> 00:10:10,880
generation time for each application is

231
00:10:10,880 --> 00:10:12,800
less than two seconds

232
00:10:12,800 --> 00:10:15,360
and it achieved better performance than

233
00:10:15,360 --> 00:10:18,480
the baseline method impulse update and

234
00:10:18,480 --> 00:10:20,160
removal

235
00:10:20,160 --> 00:10:22,959
for a large application with 1000

236
00:10:22,959 --> 00:10:26,399
services it takes less than 12 seconds

237
00:10:26,399 --> 00:10:29,120
to generate 900 pulses

238
00:10:29,120 --> 00:10:31,600
which indicates its potential for large

239
00:10:31,600 --> 00:10:34,640
scale scenarios

240
00:10:35,200 --> 00:10:37,040
the third question is

241
00:10:37,040 --> 00:10:39,839
can auto armor improve the application's

242
00:10:39,839 --> 00:10:44,160
performance via the optimized pulse set

243
00:10:44,160 --> 00:10:46,880
we measured the end-to-end performance

244
00:10:46,880 --> 00:10:50,160
of the applications when deploying the

245
00:10:50,160 --> 00:10:52,959
policy set generated by the

246
00:10:52,959 --> 00:10:54,880
baseline method and auto armor

247
00:10:54,880 --> 00:10:56,480
separately

248
00:10:56,480 --> 00:10:59,360
the result shows that by eliminating

249
00:10:59,360 --> 00:11:02,240
redundant policies it accelerates the

250
00:11:02,240 --> 00:11:06,000
runtime policy check thereby enable the

251
00:11:06,000 --> 00:11:08,560
application to achieve better overall

252
00:11:08,560 --> 00:11:11,279
performance

253
00:11:11,279 --> 00:11:14,240
we can finally conclude auto armor the

254
00:11:14,240 --> 00:11:16,959
first automatic policy generation tool

255
00:11:16,959 --> 00:11:19,519
for inter-service access control of

256
00:11:19,519 --> 00:11:21,360
metal services

257
00:11:21,360 --> 00:11:22,800
it includes

258
00:11:22,800 --> 00:11:25,839
a static analysis based request

259
00:11:25,839 --> 00:11:29,120
extraction mechanism and the graph-based

260
00:11:29,120 --> 00:11:31,680
policy management mechanism

261
00:11:31,680 --> 00:11:34,000
our evaluation shows that

262
00:11:34,000 --> 00:11:36,640
it can effectively bridge the current

263
00:11:36,640 --> 00:11:39,440
policy generation gap for macro services

264
00:11:39,440 --> 00:11:43,440
with only a minor overhead

265
00:11:43,440 --> 00:11:47,959
that's all thanks for your attention

