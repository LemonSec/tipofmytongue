1
00:00:08,240 --> 00:00:10,320
hi my name is mark rosen and i'm going

2
00:00:10,320 --> 00:00:12,240
to be discussing balboa which is a new

3
00:00:12,240 --> 00:00:14,080
framework and implementation for network

4
00:00:14,080 --> 00:00:16,000
censorships or convention this work was

5
00:00:16,000 --> 00:00:18,080
done with my co-authors james parker and

6
00:00:18,080 --> 00:00:19,920
alex malzemov

7
00:00:19,920 --> 00:00:21,680
oppressive regimes are increasingly

8
00:00:21,680 --> 00:00:23,519
using internet censorship as a tool to

9
00:00:23,519 --> 00:00:27,039
suppress human rights in 2020 56 percent

10
00:00:27,039 --> 00:00:28,640
of global internet users lived in

11
00:00:28,640 --> 00:00:30,400
countries where political social or

12
00:00:30,400 --> 00:00:33,040
religious content was blocked online in

13
00:00:33,040 --> 00:00:34,960
response to this researchers have spent

14
00:00:34,960 --> 00:00:36,960
the last several decades working on new

15
00:00:36,960 --> 00:00:39,360
censorship circumvention techniques the

16
00:00:39,360 --> 00:00:41,200
balboa framework represents our

17
00:00:41,200 --> 00:00:43,520
contribution to this body of work with

18
00:00:43,520 --> 00:00:45,760
balboa we focus specifically on the link

19
00:00:45,760 --> 00:00:47,200
obfuscation part of censorship

20
00:00:47,200 --> 00:00:49,360
circumvention in the setting we have two

21
00:00:49,360 --> 00:00:51,440
parties a and b which want to

22
00:00:51,440 --> 00:00:52,960
communicate with each other across the

23
00:00:52,960 --> 00:00:55,199
internet the sensor has full access to

24
00:00:55,199 --> 00:00:56,719
the network and can both passively

25
00:00:56,719 --> 00:00:59,199
observe as well as actively manipulate

26
00:00:59,199 --> 00:01:01,199
network traffic it will shut down any

27
00:01:01,199 --> 00:01:02,480
connections that it suspects or

28
00:01:02,480 --> 00:01:04,159
attempting to circumvent its censorship

29
00:01:04,159 --> 00:01:05,119
policy

30
00:01:05,119 --> 00:01:06,720
of course the sensor could just block

31
00:01:06,720 --> 00:01:08,479
all network access entirely and this

32
00:01:08,479 --> 00:01:09,439
would certainly disrupt the

33
00:01:09,439 --> 00:01:11,680
communication between our two parties

34
00:01:11,680 --> 00:01:13,680
however we assume that there is at least

35
00:01:13,680 --> 00:01:15,439
some traffic which the sensor does not

36
00:01:15,439 --> 00:01:17,040
want to block

37
00:01:17,040 --> 00:01:19,119
specifically we assume that the sensor

38
00:01:19,119 --> 00:01:20,720
wants the pink machines to be able to

39
00:01:20,720 --> 00:01:22,320
communicate using some approved

40
00:01:22,320 --> 00:01:24,320
communication protocol if we can make

41
00:01:24,320 --> 00:01:26,080
the communication between our parties a

42
00:01:26,080 --> 00:01:27,920
and b look exactly like the

43
00:01:27,920 --> 00:01:29,119
communication between the sensor

44
00:01:29,119 --> 00:01:31,040
approved machines then the sensor won't

45
00:01:31,040 --> 00:01:32,560
be able to block the communication

46
00:01:32,560 --> 00:01:34,880
between a and b without also blocking

47
00:01:34,880 --> 00:01:36,240
the communication between the pink

48
00:01:36,240 --> 00:01:37,680
machines

49
00:01:37,680 --> 00:01:39,119
let's say that the communication between

50
00:01:39,119 --> 00:01:40,880
the pink machines is encrypted so that

51
00:01:40,880 --> 00:01:42,399
the sensor cannot see the contents of

52
00:01:42,399 --> 00:01:43,840
their communication

53
00:01:43,840 --> 00:01:46,000
unfortunately encryption alone won't

54
00:01:46,000 --> 00:01:48,000
allow parties a and b to trick the

55
00:01:48,000 --> 00:01:50,399
sensor encryption only protects the

56
00:01:50,399 --> 00:01:52,399
contents of messages not any of their

57
00:01:52,399 --> 00:01:55,200
metadata including size and timing as a

58
00:01:55,200 --> 00:01:57,600
result unless the metadata of a and b's

59
00:01:57,600 --> 00:01:59,520
communication exactly matches the

60
00:01:59,520 --> 00:02:01,439
metadata of the communication between

61
00:02:01,439 --> 00:02:03,040
the pink machines the sensor will be

62
00:02:03,040 --> 00:02:04,479
able to distinguish between them and

63
00:02:04,479 --> 00:02:08,239
block just a and b's communication

64
00:02:08,239 --> 00:02:10,080
for the next few examples let's say that

65
00:02:10,080 --> 00:02:11,840
the pink machine is running skype and

66
00:02:11,840 --> 00:02:13,040
that the sensor has approved this

67
00:02:13,040 --> 00:02:15,120
protocol and won't block it

68
00:02:15,120 --> 00:02:16,959
one approach to make the traffic between

69
00:02:16,959 --> 00:02:19,280
a and b look like skype traffic between

70
00:02:19,280 --> 00:02:21,280
the pink machines would be to write code

71
00:02:21,280 --> 00:02:23,280
to generate network traffic which would

72
00:02:23,280 --> 00:02:25,200
have the same metadata characteristics

73
00:02:25,200 --> 00:02:27,599
as real encrypted skype traffic this

74
00:02:27,599 --> 00:02:29,360
approach is called mimicry and it's the

75
00:02:29,360 --> 00:02:31,280
approach taken by systems such as skype

76
00:02:31,280 --> 00:02:32,239
morph

77
00:02:32,239 --> 00:02:34,080
unfortunately as the parodies dead paper

78
00:02:34,080 --> 00:02:36,239
notes practically implementing mimicry

79
00:02:36,239 --> 00:02:38,319
approach is nearly impossible any

80
00:02:38,319 --> 00:02:40,080
mistake in the mimicry implementation is

81
00:02:40,080 --> 00:02:42,080
a possible avenue for the sensor to

82
00:02:42,080 --> 00:02:43,280
distinguish it from the standard

83
00:02:43,280 --> 00:02:44,800
implementation which would allow the

84
00:02:44,800 --> 00:02:46,720
sensor to block it

85
00:02:46,720 --> 00:02:49,200
so if mimicking with code a target

86
00:02:49,200 --> 00:02:50,879
application is very difficult what if we

87
00:02:50,879 --> 00:02:53,599
just ran the target application instead

88
00:02:53,599 --> 00:02:55,120
this is called the tunneling approach

89
00:02:55,120 --> 00:02:56,319
and it's the approach taken by

90
00:02:56,319 --> 00:02:58,319
censorship circumvention systems such as

91
00:02:58,319 --> 00:03:00,560
delta shaper delta shaper wants a

92
00:03:00,560 --> 00:03:02,080
standard instance of skype on the

93
00:03:02,080 --> 00:03:03,440
machines which want to communicate with

94
00:03:03,440 --> 00:03:05,599
each other it then tunnels data through

95
00:03:05,599 --> 00:03:08,080
skype by giving skype a fake video feed

96
00:03:08,080 --> 00:03:09,840
which consists of the data to send over

97
00:03:09,840 --> 00:03:10,959
the network

98
00:03:10,959 --> 00:03:12,959
by writing an actual instance of skype

99
00:03:12,959 --> 00:03:14,560
the tunneling approach solves many of

100
00:03:14,560 --> 00:03:16,319
the issues with the mimicry design

101
00:03:16,319 --> 00:03:18,319
unfortunately many systems that use

102
00:03:18,319 --> 00:03:20,239
tunneling including delta shaper are

103
00:03:20,239 --> 00:03:22,080
detectable by a sensor because the

104
00:03:22,080 --> 00:03:23,599
non-standard input to the target

105
00:03:23,599 --> 00:03:25,599
application produces correspondingly

106
00:03:25,599 --> 00:03:28,319
non-standard network traffic

107
00:03:28,319 --> 00:03:30,799
so in summary we want to one

108
00:03:30,799 --> 00:03:32,560
run a standard instance of the target

109
00:03:32,560 --> 00:03:34,159
application so that we don't phones the

110
00:03:34,159 --> 00:03:36,799
pitfalls of mimicry well two using the

111
00:03:36,799 --> 00:03:39,040
standard in using the standard inputs of

112
00:03:39,040 --> 00:03:40,640
the application so we don't fall into

113
00:03:40,640 --> 00:03:42,879
the pitfalls of tunneling but three we

114
00:03:42,879 --> 00:03:44,480
also need somewhere to put the covert

115
00:03:44,480 --> 00:03:46,640
data in the network stream

116
00:03:46,640 --> 00:03:48,400
balboa is a censorship circumvention

117
00:03:48,400 --> 00:03:49,920
framework which achieves these three

118
00:03:49,920 --> 00:03:52,879
goals first it runs an unmodified binary

119
00:03:52,879 --> 00:03:55,120
of a tls enabled target application so

120
00:03:55,120 --> 00:03:57,040
we don't phones the pixels of mimikry

121
00:03:57,040 --> 00:03:58,799
and two we run the application at

122
00:03:58,799 --> 00:04:00,480
stanford input so we don't fall into the

123
00:04:00,480 --> 00:04:03,439
pitfalls of tunneling and third balboa

124
00:04:03,439 --> 00:04:04,879
inserts itself between the target

125
00:04:04,879 --> 00:04:06,799
application and the operating system and

126
00:04:06,799 --> 00:04:08,799
then intercepts and manipulates the

127
00:04:08,799 --> 00:04:10,879
application's network stream to embed

128
00:04:10,879 --> 00:04:14,159
and extract covert data

129
00:04:14,159 --> 00:04:15,840
an overall architecture of the balboa

130
00:04:15,840 --> 00:04:17,440
framework we start with the target

131
00:04:17,440 --> 00:04:19,279
application and we've instantiated the

132
00:04:19,279 --> 00:04:21,040
balboa framework for both internet radio

133
00:04:21,040 --> 00:04:23,600
streaming and web browsing on the server

134
00:04:23,600 --> 00:04:25,680
side the target application produces

135
00:04:25,680 --> 00:04:27,680
network traffic which the balboa

136
00:04:27,680 --> 00:04:29,680
framework intercepts to modify and

137
00:04:29,680 --> 00:04:32,400
rewrite in order to embed covert data in

138
00:04:32,400 --> 00:04:34,720
it the updated network traffic is then

139
00:04:34,720 --> 00:04:36,800
sent to the operating system which sends

140
00:04:36,800 --> 00:04:38,560
the data through the network and through

141
00:04:38,560 --> 00:04:41,120
the active adversary over to the client

142
00:04:41,120 --> 00:04:43,440
on the client side the same process is

143
00:04:43,440 --> 00:04:45,040
used to manipulate an incoming

144
00:04:45,040 --> 00:04:47,680
connection to embed and extract covert

145
00:04:47,680 --> 00:04:49,680
data

146
00:04:49,680 --> 00:04:51,520
the balboa framework itself is made up

147
00:04:51,520 --> 00:04:53,040
of several components

148
00:04:53,040 --> 00:04:55,040
first we intercept and manipulate the

149
00:04:55,040 --> 00:04:56,960
target applications tcp stream via

150
00:04:56,960 --> 00:04:58,880
dynamic library injection the

151
00:04:58,880 --> 00:05:00,960
intercepted stream is fed through the

152
00:05:00,960 --> 00:05:03,120
tls rewriter which decrypts and

153
00:05:03,120 --> 00:05:05,840
re-encrypts the layer of tls encryption

154
00:05:05,840 --> 00:05:07,759
lastly we have the traffic model the

155
00:05:07,759 --> 00:05:09,199
traffic model is a parser which

156
00:05:09,199 --> 00:05:11,120
identifies in the plain text network

157
00:05:11,120 --> 00:05:13,280
stream places where we can embed covert

158
00:05:13,280 --> 00:05:15,680
data in order to instantiate the balboa

159
00:05:15,680 --> 00:05:17,520
framework in a new setting all that's

160
00:05:17,520 --> 00:05:18,960
needed is to write a traffic model

161
00:05:18,960 --> 00:05:22,639
that's appropriate for the new setting

162
00:05:22,639 --> 00:05:24,240
we've written a traffic model for the

163
00:05:24,240 --> 00:05:25,840
internet radio setting in which an

164
00:05:25,840 --> 00:05:28,240
internet radio server streams all vorbis

165
00:05:28,240 --> 00:05:30,800
audio data to clients in order to avoid

166
00:05:30,800 --> 00:05:32,800
changing network metadata the traffic

167
00:05:32,800 --> 00:05:34,240
models modifications are length

168
00:05:34,240 --> 00:05:35,520
preserving

169
00:05:35,520 --> 00:05:37,199
we say that the internet radio server

170
00:05:37,199 --> 00:05:39,039
and clients have already agreed on the

171
00:05:39,039 --> 00:05:40,800
music that we'll be playing

172
00:05:40,800 --> 00:05:42,400
at the moment this is done by

173
00:05:42,400 --> 00:05:44,400
pre-sharing the audio file though the

174
00:05:44,400 --> 00:05:46,560
server and client could for example

175
00:05:46,560 --> 00:05:48,320
communicate a seed which would be used

176
00:05:48,320 --> 00:05:49,919
to generate the audio

177
00:05:49,919 --> 00:05:52,400
for authenticated balboa clients the

178
00:05:52,400 --> 00:05:54,240
internet radio server will embed covert

179
00:05:54,240 --> 00:05:56,800
data into the tls encrypted audio stream

180
00:05:56,800 --> 00:05:59,039
for each outgoing og page if its audio

181
00:05:59,039 --> 00:06:00,880
data is contained within the pre-shared

182
00:06:00,880 --> 00:06:02,960
audio data the server will replace the

183
00:06:02,960 --> 00:06:05,360
contents of the og page with covert data

184
00:06:05,360 --> 00:06:07,120
it will then replace a deterministic

185
00:06:07,120 --> 00:06:09,520
field in the og page metadata with the

186
00:06:09,520 --> 00:06:11,680
position in the pre-shared audio file

187
00:06:11,680 --> 00:06:14,160
that the original og pages contents came

188
00:06:14,160 --> 00:06:15,199
from

189
00:06:15,199 --> 00:06:17,520
the media player client will extract the

190
00:06:17,520 --> 00:06:20,000
covert data and undo all the changes to

191
00:06:20,000 --> 00:06:21,280
the og page

192
00:06:21,280 --> 00:06:22,720
after balboa has finished this

193
00:06:22,720 --> 00:06:24,880
client-side processing the og page is

194
00:06:24,880 --> 00:06:27,360
sent to the media player this final page

195
00:06:27,360 --> 00:06:28,639
is identical to the one that was

196
00:06:28,639 --> 00:06:30,400
originally created by the internet radio

197
00:06:30,400 --> 00:06:32,080
server

198
00:06:32,080 --> 00:06:33,840
this process yields efficient data

199
00:06:33,840 --> 00:06:36,720
transfer 98 of the bytes sent over the

200
00:06:36,720 --> 00:06:39,120
wire can be rewritten to transmit covert

201
00:06:39,120 --> 00:06:41,039
data using this approach

202
00:06:41,039 --> 00:06:43,360
importantly the target application not

203
00:06:43,360 --> 00:06:45,440
balboa is responsible for determining

204
00:06:45,440 --> 00:06:47,520
the network footprint of the system in

205
00:06:47,520 --> 00:06:49,840
addition because covert data is handled

206
00:06:49,840 --> 00:06:51,919
inside the traffic model and not the

207
00:06:51,919 --> 00:06:54,319
target application the network footprint

208
00:06:54,319 --> 00:06:56,560
is independent of the community of the

209
00:06:56,560 --> 00:06:58,720
communication patterns of the covert

210
00:06:58,720 --> 00:07:00,639
data

211
00:07:00,639 --> 00:07:02,240
in order to make its network footprints

212
00:07:02,240 --> 00:07:04,000
as close to the target applications as

213
00:07:04,000 --> 00:07:06,000
possible balboa intercepts network

214
00:07:06,000 --> 00:07:08,400
streams via dynamic library injection

215
00:07:08,400 --> 00:07:10,639
dynamic library injection is a feature

216
00:07:10,639 --> 00:07:12,400
of the dynamic linker on many operating

217
00:07:12,400 --> 00:07:14,479
systems it allows you to override the

218
00:07:14,479 --> 00:07:16,080
definitions of functions that a program

219
00:07:16,080 --> 00:07:18,639
calls for our purposes balboa uses

220
00:07:18,639 --> 00:07:20,400
dynamic library injection to override

221
00:07:20,400 --> 00:07:22,240
the functions in the c standard library

222
00:07:22,240 --> 00:07:23,840
which are used to manipulate network

223
00:07:23,840 --> 00:07:26,319
sockets for example we override the

224
00:07:26,319 --> 00:07:27,919
connect function so that when the target

225
00:07:27,919 --> 00:07:29,919
application wants to connect to an ip

226
00:07:29,919 --> 00:07:31,759
address and port we can flag the

227
00:07:31,759 --> 00:07:33,599
resulting file descriptor as being one

228
00:07:33,599 --> 00:07:35,280
that we want to manipulate

229
00:07:35,280 --> 00:07:37,120
by overriding the write function we can

230
00:07:37,120 --> 00:07:39,120
manipulate the outgoing data immediately

231
00:07:39,120 --> 00:07:41,840
before the operating system sees it

232
00:07:41,840 --> 00:07:43,520
because our dynamic library injection

233
00:07:43,520 --> 00:07:45,280
always preserves the lengths of buffers

234
00:07:45,280 --> 00:07:47,039
that it encounters and also does not

235
00:07:47,039 --> 00:07:49,919
change any socket options on the socket

236
00:07:49,919 --> 00:07:51,599
network manipulations made with this

237
00:07:51,599 --> 00:07:53,280
dynamic library injection approach

238
00:07:53,280 --> 00:07:55,520
should be undetectable by the sensor

239
00:07:55,520 --> 00:07:57,039
provided that the buffer reading

240
00:07:57,039 --> 00:07:59,039
operation is fast enough and that the

241
00:07:59,039 --> 00:08:00,639
sensor can't detect the changes that

242
00:08:00,639 --> 00:08:03,039
were made to the buffer's contents

243
00:08:03,039 --> 00:08:04,720
importantly this technique does not

244
00:08:04,720 --> 00:08:06,319
depend on the internals of the target

245
00:08:06,319 --> 00:08:08,639
application as long as it uses libsey's

246
00:08:08,639 --> 00:08:10,720
system call wrappers or on the internals

247
00:08:10,720 --> 00:08:14,160
of the target applications tls library

248
00:08:14,160 --> 00:08:15,759
though the dynamic library injection

249
00:08:15,759 --> 00:08:17,680
balboa is completely agnostic to the

250
00:08:17,680 --> 00:08:20,000
internals of the target applications tls

251
00:08:20,000 --> 00:08:22,319
library in order to decrypt the contents

252
00:08:22,319 --> 00:08:24,400
of the tls stream boboa needs to be able

253
00:08:24,400 --> 00:08:27,520
to somehow extract the tls keys to do

254
00:08:27,520 --> 00:08:29,759
this we take advantage of a standard

255
00:08:29,759 --> 00:08:31,919
debugging option present in most popular

256
00:08:31,919 --> 00:08:34,880
tls libraries called ssl key log file

257
00:08:34,880 --> 00:08:36,958
enabling this option will cause the tls

258
00:08:36,958 --> 00:08:39,279
library to dump the tls master secret

259
00:08:39,279 --> 00:08:40,399
key to a file

260
00:08:40,399 --> 00:08:42,479
the balboa tls rewriter can read this

261
00:08:42,479 --> 00:08:44,560
file to decrypt and perform surgical

262
00:08:44,560 --> 00:08:47,120
manipulations on the tls stream

263
00:08:47,120 --> 00:08:49,760
importantly using the ssl key log file

264
00:08:49,760 --> 00:08:51,680
means that balboa does not modify the

265
00:08:51,680 --> 00:08:54,160
tls handshake in order to learn the tls

266
00:08:54,160 --> 00:08:56,399
keys sensors place heavy emphasis on the

267
00:08:56,399 --> 00:08:58,399
tls handshake to try to detect

268
00:08:58,399 --> 00:09:00,160
censorships for convention attempts and

269
00:09:00,160 --> 00:09:01,920
balboa is entirely immune to these

270
00:09:01,920 --> 00:09:03,279
attacks

271
00:09:03,279 --> 00:09:05,120
beyond passive handshake observation

272
00:09:05,120 --> 00:09:07,440
attacks practical sensors also attempt

273
00:09:07,440 --> 00:09:09,680
so-called active probes of servers in

274
00:09:09,680 --> 00:09:11,440
which they make requests to a server to

275
00:09:11,440 --> 00:09:13,120
see if it's being used for censorships

276
00:09:13,120 --> 00:09:15,040
or convention in order to pass this

277
00:09:15,040 --> 00:09:17,040
check a balboa enabled server must

278
00:09:17,040 --> 00:09:18,880
respond to these probes in the same way

279
00:09:18,880 --> 00:09:21,040
that a normal server would respond

280
00:09:21,040 --> 00:09:23,519
the balboa tls rewriter employs a custom

281
00:09:23,519 --> 00:09:25,760
covert signaling protocol to mutually

282
00:09:25,760 --> 00:09:27,760
authenticate the client in the server in

283
00:09:27,760 --> 00:09:29,680
order to figure out on which network

284
00:09:29,680 --> 00:09:30,959
connections it's communicating with

285
00:09:30,959 --> 00:09:33,200
baboa clients it will rewrite these

286
00:09:33,200 --> 00:09:34,720
connections while leaving the other

287
00:09:34,720 --> 00:09:37,040
connections untouched

288
00:09:37,040 --> 00:09:38,880
after the tls rewriter takes care of

289
00:09:38,880 --> 00:09:41,360
covert signaling its job is to decrypt

290
00:09:41,360 --> 00:09:43,360
the tls stream giving the plaintext

291
00:09:43,360 --> 00:09:45,200
stream to the traffic model it then

292
00:09:45,200 --> 00:09:46,959
receives a modified plaintext stream

293
00:09:46,959 --> 00:09:48,320
from the traffic model which it

294
00:09:48,320 --> 00:09:50,240
re-encrypts

295
00:09:50,240 --> 00:09:52,640
to evaluate balboa's security first note

296
00:09:52,640 --> 00:09:55,680
that one balboa only modifies dae which

297
00:09:55,680 --> 00:09:57,440
is indistinguishable from randomness to

298
00:09:57,440 --> 00:10:00,080
the adversary and two because of

299
00:10:00,080 --> 00:10:01,600
balboa's use of dynamic library

300
00:10:01,600 --> 00:10:03,440
injection it preserves old socket

301
00:10:03,440 --> 00:10:05,680
options in all lengths of all buffers

302
00:10:05,680 --> 00:10:07,200
that are sent to and from the operating

303
00:10:07,200 --> 00:10:09,920
system as a result the only way in which

304
00:10:09,920 --> 00:10:11,920
balboa's network footprints can diverge

305
00:10:11,920 --> 00:10:13,120
from the network footprints of the

306
00:10:13,120 --> 00:10:15,360
target application is in the timing of

307
00:10:15,360 --> 00:10:17,200
the rewriting that balboa performs on

308
00:10:17,200 --> 00:10:18,480
network buffers

309
00:10:18,480 --> 00:10:20,399
to evaluate whether balboa has the same

310
00:10:20,399 --> 00:10:21,600
network footprint as the target

311
00:10:21,600 --> 00:10:23,839
application we collected packet captures

312
00:10:23,839 --> 00:10:25,440
from runs of the target application with

313
00:10:25,440 --> 00:10:27,920
balboa enabled and runs with balboa

314
00:10:27,920 --> 00:10:30,240
disabled we then extracted tcp

315
00:10:30,240 --> 00:10:32,000
statistics from these packet captures

316
00:10:32,000 --> 00:10:34,160
and trained a random forest classifier

317
00:10:34,160 --> 00:10:36,399
to distinguish between these scenarios

318
00:10:36,399 --> 00:10:38,000
because we have perfectly clean training

319
00:10:38,000 --> 00:10:40,079
data this represents a worst case

320
00:10:40,079 --> 00:10:42,399
scenario for balboa

321
00:10:42,399 --> 00:10:44,240
for the internet radio scenario we have

322
00:10:44,240 --> 00:10:45,839
a single code base which can be injected

323
00:10:45,839 --> 00:10:48,240
into several media players as a result

324
00:10:48,240 --> 00:10:49,519
it's easy to change the network

325
00:10:49,519 --> 00:10:51,440
footprint of balboa by simply swapping

326
00:10:51,440 --> 00:10:52,800
the media player that it's being

327
00:10:52,800 --> 00:10:55,040
injected into looking at these results

328
00:10:55,040 --> 00:10:56,800
we can see that the classifier failed to

329
00:10:56,800 --> 00:10:58,800
detect balboa with any great accuracy

330
00:10:58,800 --> 00:11:00,959
across sevium across several media

331
00:11:00,959 --> 00:11:03,440
players even in this worst case scenario

332
00:11:03,440 --> 00:11:05,839
in addition the accuracy sharply drops

333
00:11:05,839 --> 00:11:07,600
when even a little bit of latency is

334
00:11:07,600 --> 00:11:09,519
added this evidence suggests that

335
00:11:09,519 --> 00:11:11,600
balboa's network footprint is extremely

336
00:11:11,600 --> 00:11:13,120
hard to distinguish from the network

337
00:11:13,120 --> 00:11:15,680
footprint of the underlying media player

338
00:11:15,680 --> 00:11:17,360
similarly for the web browsing

339
00:11:17,360 --> 00:11:19,600
instantiation of balboa the classifier

340
00:11:19,600 --> 00:11:23,440
cannot detect balboa with high accuracy

341
00:11:23,440 --> 00:11:24,880
we're excited about the balboa

342
00:11:24,880 --> 00:11:26,560
censorships or convention framework and

343
00:11:26,560 --> 00:11:28,079
the possibility of extending it to even

344
00:11:28,079 --> 00:11:30,000
more scenarios please see our open

345
00:11:30,000 --> 00:11:31,600
source implementation on github and feel

346
00:11:31,600 --> 00:11:35,720
free to email us with any questions

347
00:11:42,720 --> 00:11:44,800
you

