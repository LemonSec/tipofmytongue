1
00:00:08,639 --> 00:00:10,960
hello everyone i'm simone from career

2
00:00:10,960 --> 00:00:13,679
adversity now i present our paper called

3
00:00:13,679 --> 00:00:15,839
blizzard finder which was co-worked with

4
00:00:15,839 --> 00:00:20,800
dongli salman park history and span d3

5
00:00:20,800 --> 00:00:23,439
the goal this paper is discovering the

6
00:00:23,439 --> 00:00:25,840
correct origin of publicly reported

7
00:00:25,840 --> 00:00:27,760
software vulnerabilities

8
00:00:27,760 --> 00:00:30,160
specifically we coined the term

9
00:00:30,160 --> 00:00:33,360
vulnerability 0 which means the software

10
00:00:33,360 --> 00:00:35,680
and its version while a vulnerability

11
00:00:35,680 --> 00:00:37,280
originated

12
00:00:37,280 --> 00:00:39,360
the reason we attempt to discover the

13
00:00:39,360 --> 00:00:42,160
breezy is that the incorrect breezy can

14
00:00:42,160 --> 00:00:45,360
cause several problems for example the

15
00:00:45,360 --> 00:00:47,600
incorrect please lead other developers

16
00:00:47,600 --> 00:00:49,600
to unintentionally overlook the

17
00:00:49,600 --> 00:00:52,320
propagate vulnerability and to delay

18
00:00:52,320 --> 00:00:54,719
patch deployment

19
00:00:54,719 --> 00:00:57,280
as a motivating example we introduced

20
00:00:57,280 --> 00:00:59,000
the civi

21
00:00:59,000 --> 00:01:01,039
2017.070 case

22
00:01:01,039 --> 00:01:03,600
its description states that it is a

23
00:01:03,600 --> 00:01:06,000
remote code execution vulnerability in

24
00:01:06,000 --> 00:01:08,799
the android system

25
00:01:08,799 --> 00:01:09,840
however

26
00:01:09,840 --> 00:01:12,159
we confirm that the correct breezy of

27
00:01:12,159 --> 00:01:15,920
this cv is jpeg compressor reused in rip

28
00:01:15,920 --> 00:01:20,960
gdx which is further used in android

29
00:01:20,960 --> 00:01:22,560
in this situation

30
00:01:22,560 --> 00:01:24,799
developers reusing vulnerable version of

31
00:01:24,799 --> 00:01:26,880
android can easily reserve their

32
00:01:26,880 --> 00:01:29,439
vulnerability because the cb has been

33
00:01:29,439 --> 00:01:33,119
reported as an android vulnerability

34
00:01:33,119 --> 00:01:34,079
however

35
00:01:34,079 --> 00:01:36,400
developers reusing only the vulnerable

36
00:01:36,400 --> 00:01:38,079
jpeg compressor

37
00:01:38,079 --> 00:01:40,159
failed to detect and patch the

38
00:01:40,159 --> 00:01:42,640
vulnerability in a timely manner

39
00:01:42,640 --> 00:01:44,960
because they do not interest in the

40
00:01:44,960 --> 00:01:48,640
vulnerabilities of android

41
00:01:48,799 --> 00:01:50,640
we succeed in reproducing the

42
00:01:50,640 --> 00:01:53,280
vulnerability in the greatest versions

43
00:01:53,280 --> 00:01:56,719
of three popular software project

44
00:01:56,719 --> 00:01:58,799
note that all reported vulnerabilities

45
00:01:58,799 --> 00:02:02,000
have been patched as a response of our

46
00:02:02,000 --> 00:02:04,479
reports

47
00:02:04,880 --> 00:02:08,000
to prevent such problem our goal is to

48
00:02:08,000 --> 00:02:10,160
discover the correct play z of a

49
00:02:10,160 --> 00:02:13,200
vulnerability in an automated way

50
00:02:13,200 --> 00:02:15,440
for example in this case we will

51
00:02:15,440 --> 00:02:18,480
discover jpeg compressor as the vz of

52
00:02:18,480 --> 00:02:19,680
this cv

53
00:02:19,680 --> 00:02:23,840
not rip gdx or android

54
00:02:24,959 --> 00:02:27,040
there are two major challenges to

55
00:02:27,040 --> 00:02:29,280
discover the correct pc

56
00:02:29,280 --> 00:02:31,760
first because the timestamp-based

57
00:02:31,760 --> 00:02:34,239
metadata of software can easily be

58
00:02:34,239 --> 00:02:35,440
changed

59
00:02:35,440 --> 00:02:37,040
the vision may not be the vulnerable

60
00:02:37,040 --> 00:02:39,599
software with the list burst date

61
00:02:39,599 --> 00:02:42,400
therefore we cannot solely rely on the

62
00:02:42,400 --> 00:02:44,959
timestamp based metadata

63
00:02:44,959 --> 00:02:47,519
second the syntax of a bonus code

64
00:02:47,519 --> 00:02:49,840
frequently changes while the code is

65
00:02:49,840 --> 00:02:51,920
reused in other software

66
00:02:51,920 --> 00:02:54,000
so we should address the syntax priority

67
00:02:54,000 --> 00:02:57,120
of vulnerable code

68
00:02:57,840 --> 00:02:59,840
to overcome the challenge

69
00:02:59,840 --> 00:03:02,720
we present blizzard finder which is the

70
00:03:02,720 --> 00:03:05,120
first approach to discover the correct

71
00:03:05,120 --> 00:03:07,519
pressure of a vulnerability

72
00:03:07,519 --> 00:03:10,640
we use a graph based approach instead of

73
00:03:10,640 --> 00:03:13,200
using timestamp-based metadata

74
00:03:13,200 --> 00:03:14,159
that is

75
00:03:14,159 --> 00:03:16,080
a pre-zero finder generates a

76
00:03:16,080 --> 00:03:18,640
vulnerability propagation graph for each

77
00:03:18,640 --> 00:03:20,000
vulnerability

78
00:03:20,000 --> 00:03:22,720
where its nodes represent a vulnerable

79
00:03:22,720 --> 00:03:26,000
software and its edges indicate the

80
00:03:26,000 --> 00:03:28,239
propagation directions

81
00:03:28,239 --> 00:03:29,599
in other words

82
00:03:29,599 --> 00:03:32,560
we convert the problem of discovering

83
00:03:32,560 --> 00:03:35,840
blizzy into a problem of finding the

84
00:03:35,840 --> 00:03:38,319
root of the vulnerability propagation

85
00:03:38,319 --> 00:03:40,480
graph

86
00:03:40,480 --> 00:03:45,519
this is an example graph for cb 2017.070

87
00:03:45,519 --> 00:03:48,000
using this graph we can easily discover

88
00:03:48,000 --> 00:03:50,400
the wizzy jpeg compressor

89
00:03:50,400 --> 00:03:52,640
and also trace software to which the

90
00:03:52,640 --> 00:03:56,238
vulnerability has propagated

91
00:03:57,040 --> 00:03:58,879
to generate a graph

92
00:03:58,879 --> 00:04:01,280
visual finder first detects all

93
00:04:01,280 --> 00:04:03,599
vulnerable software that contains a

94
00:04:03,599 --> 00:04:05,680
specific vulnerability

95
00:04:05,680 --> 00:04:08,000
and then identifies the propagation

96
00:04:08,000 --> 00:04:10,239
direction between every vulnerable

97
00:04:10,239 --> 00:04:13,280
software pair

98
00:04:13,360 --> 00:04:16,000
first visual finder detect vulnerable

99
00:04:16,000 --> 00:04:17,680
software programs containing a

100
00:04:17,680 --> 00:04:19,279
vulnerability

101
00:04:19,279 --> 00:04:21,680
considering syntax priority

102
00:04:21,680 --> 00:04:24,000
we use the method of detecting similar

103
00:04:24,000 --> 00:04:25,840
vulnerable clause

104
00:04:25,840 --> 00:04:28,800
here a visual finder uses the vulnerable

105
00:04:28,800 --> 00:04:31,120
function and patch information

106
00:04:31,120 --> 00:04:32,880
availability

107
00:04:32,880 --> 00:04:35,280
visual finder first extracts all

108
00:04:35,280 --> 00:04:37,840
functions from a software program

109
00:04:37,840 --> 00:04:40,320
and then applies the locality sensitive

110
00:04:40,320 --> 00:04:43,120
patching to all the extracted functions

111
00:04:43,120 --> 00:04:45,759
which can measure the similarity score

112
00:04:45,759 --> 00:04:49,919
between two different hash values

113
00:04:50,080 --> 00:04:52,800
after that visual finder measures the

114
00:04:52,800 --> 00:04:55,199
similar score between the hash of

115
00:04:55,199 --> 00:04:57,280
vulnerable function and the headshot

116
00:04:57,280 --> 00:05:00,000
functions in software

117
00:05:00,000 --> 00:05:02,400
if if a function is similar to the

118
00:05:02,400 --> 00:05:04,080
vulnerable function

119
00:05:04,080 --> 00:05:07,039
and if it contains all the deleted patch

120
00:05:07,039 --> 00:05:09,440
lines while it does not contain any

121
00:05:09,440 --> 00:05:11,440
inserted patch lines

122
00:05:11,440 --> 00:05:13,440
visual finder determines that the

123
00:05:13,440 --> 00:05:16,000
function is a vulnerable clone

124
00:05:16,000 --> 00:05:18,400
if a vulnerable clone is detected

125
00:05:18,400 --> 00:05:20,560
the software program is considered as

126
00:05:20,560 --> 00:05:22,080
vulnerable

127
00:05:22,080 --> 00:05:24,000
all the detected vulnerable software

128
00:05:24,000 --> 00:05:27,680
become the nodes of the graph

129
00:05:27,680 --> 00:05:30,080
next visual finder identifies the

130
00:05:30,080 --> 00:05:31,919
propagation direction between every

131
00:05:31,919 --> 00:05:34,000
vulnerable software pair

132
00:05:34,000 --> 00:05:35,759
instead of using timestamp-based

133
00:05:35,759 --> 00:05:36,960
metadata

134
00:05:36,960 --> 00:05:40,080
we focus on a reuse relation between the

135
00:05:40,080 --> 00:05:42,479
two vulnerable software

136
00:05:42,479 --> 00:05:46,000
if software s1 uses software s2

137
00:05:46,000 --> 00:05:48,320
and if the two software share the same

138
00:05:48,320 --> 00:05:49,919
vulnerability

139
00:05:49,919 --> 00:05:51,840
we can determine that the vulnerable

140
00:05:51,840 --> 00:05:57,359
code has propagated from s2 to s1

141
00:05:57,520 --> 00:06:00,720
to identify reuse relation visual finder

142
00:06:00,720 --> 00:06:04,000
utilizes three key factors source code

143
00:06:04,000 --> 00:06:07,280
path information and metadata files

144
00:06:07,280 --> 00:06:08,880
specifically

145
00:06:08,880 --> 00:06:12,000
if s1 contains the entire code base of

146
00:06:12,000 --> 00:06:13,600
s2

147
00:06:13,600 --> 00:06:16,400
or if the path of any common source file

148
00:06:16,400 --> 00:06:20,080
in s1 contains the paths of the file in

149
00:06:20,080 --> 00:06:21,280
s2

150
00:06:21,280 --> 00:06:24,880
or if s1 contains a metadata file

151
00:06:24,880 --> 00:06:28,160
located in the loot path server s2

152
00:06:28,160 --> 00:06:30,960
then blizzard finder determines that s1

153
00:06:30,960 --> 00:06:33,120
reuses s2

154
00:06:33,120 --> 00:06:35,039
which implies that the vulnerability

155
00:06:35,039 --> 00:06:39,039
propagates from s2 to s1

156
00:06:39,039 --> 00:06:41,120
according to the identified propagation

157
00:06:41,120 --> 00:06:42,400
directions

158
00:06:42,400 --> 00:06:44,960
visual finder connects the corresponding

159
00:06:44,960 --> 00:06:48,240
vulnerable software detected in page 1.

160
00:06:48,240 --> 00:06:50,319
as a result the vulnerability

161
00:06:50,319 --> 00:06:54,240
propagation graph is generated

162
00:06:54,400 --> 00:06:57,520
finally visual finder discovers the vc

163
00:06:57,520 --> 00:06:59,599
by finding the loot of the generated

164
00:06:59,599 --> 00:07:02,080
graph which is the starting point of the

165
00:07:02,080 --> 00:07:04,400
vulnerability propagation

166
00:07:04,400 --> 00:07:06,800
more details and justifications of our

167
00:07:06,800 --> 00:07:10,880
techniques are explained in the paper

168
00:07:12,479 --> 00:07:15,280
to evaluate visual finder we collected

169
00:07:15,280 --> 00:07:18,319
more than 5000 cvs from mbd and its

170
00:07:18,319 --> 00:07:19,440
trackers

171
00:07:19,440 --> 00:07:21,840
and also collected more than 10 000

172
00:07:21,840 --> 00:07:26,400
popular open source software from gita

173
00:07:26,560 --> 00:07:29,120
we applied visual finder to disk copper

174
00:07:29,120 --> 00:07:31,680
bridges for the collected series

175
00:07:31,680 --> 00:07:34,000
and then compare the discovery result

176
00:07:34,000 --> 00:07:37,360
using the cpe provided by the mbd

177
00:07:37,360 --> 00:07:39,360
which contains the vulnerable software

178
00:07:39,360 --> 00:07:41,280
name and its version information of

179
00:07:41,280 --> 00:07:44,280
availability

180
00:07:44,879 --> 00:07:46,400
as a result

181
00:07:46,400 --> 00:07:48,240
we confirmed that blazer finder

182
00:07:48,240 --> 00:07:50,319
successfully discovered the correct

183
00:07:50,319 --> 00:07:54,960
bridges for 95 percent of collective cvs

184
00:07:54,960 --> 00:07:58,160
surprisingly a visual finder found that

185
00:07:58,160 --> 00:08:01,440
96 cvs for which current vulnerability

186
00:08:01,440 --> 00:08:04,720
databases provide the incorrect busy

187
00:08:04,720 --> 00:08:07,199
the impact of the correctness of blizzy

188
00:08:07,199 --> 00:08:11,360
will be introduced in the later slide

189
00:08:11,599 --> 00:08:13,919
although wizard finder could discover

190
00:08:13,919 --> 00:08:16,800
the correct bridges for most cases

191
00:08:16,800 --> 00:08:19,919
it reported several false alarms

192
00:08:19,919 --> 00:08:22,800
specifically when blizzy does not exist

193
00:08:22,800 --> 00:08:26,000
in our data set or when blizzard finder

194
00:08:26,000 --> 00:08:29,120
failed to identify some real relations

195
00:08:29,120 --> 00:08:31,840
the general graph may have multiple loot

196
00:08:31,840 --> 00:08:34,880
or does not have any root

197
00:08:34,880 --> 00:08:37,360
yet we confirm that visual finder can

198
00:08:37,360 --> 00:08:39,519
discover the correct resist with a high

199
00:08:39,519 --> 00:08:42,159
precision and recall more than 95

200
00:08:42,159 --> 00:08:44,640
percent

201
00:08:45,200 --> 00:08:47,519
we then analyzed the impact of bridge

202
00:08:47,519 --> 00:08:48,720
discovery

203
00:08:48,720 --> 00:08:49,920
in this part

204
00:08:49,920 --> 00:08:52,160
we defined the success and the elapsed

205
00:08:52,160 --> 00:08:54,399
time for vulnerability detection

206
00:08:54,399 --> 00:08:57,600
in phase 1 visual finder detected one of

207
00:08:57,600 --> 00:08:59,360
the software programs containing a

208
00:08:59,360 --> 00:09:00,880
vulnerability

209
00:09:00,880 --> 00:09:01,680
if

210
00:09:01,680 --> 00:09:03,680
if the latest version of vulnerable

211
00:09:03,680 --> 00:09:05,760
software does not contain the

212
00:09:05,760 --> 00:09:07,279
vulnerability

213
00:09:07,279 --> 00:09:09,680
we consider that the software succeeded

214
00:09:09,680 --> 00:09:10,640
in

215
00:09:10,640 --> 00:09:13,519
detecting and patching the vulnerability

216
00:09:13,519 --> 00:09:15,839
the further called the time required to

217
00:09:15,839 --> 00:09:18,160
detect and patch the vulnerability as

218
00:09:18,160 --> 00:09:21,959
the last time

219
00:09:22,959 --> 00:09:25,279
uh we first analyzed the correlation

220
00:09:25,279 --> 00:09:26,720
between the success rate of

221
00:09:26,720 --> 00:09:29,040
vulnerabilities and the correctness of

222
00:09:29,040 --> 00:09:30,320
easy

223
00:09:30,320 --> 00:09:32,560
in the cases so cb is with the correct

224
00:09:32,560 --> 00:09:33,760
pc

225
00:09:33,760 --> 00:09:36,080
more than 85 percent of vulnerable

226
00:09:36,080 --> 00:09:38,320
software succeeded in patching the

227
00:09:38,320 --> 00:09:39,839
vulnerability

228
00:09:39,839 --> 00:09:42,800
in contrast surprisingly we confirmed

229
00:09:42,800 --> 00:09:46,080
that only 36 percent open software could

230
00:09:46,080 --> 00:09:48,640
patch the vulnerability in the cases of

231
00:09:48,640 --> 00:09:52,640
series with the incorrect bridges

232
00:09:52,959 --> 00:09:55,680
next we investigated the elapsed time

233
00:09:55,680 --> 00:09:58,720
for patching a propagate vulnerability

234
00:09:58,720 --> 00:10:00,240
even when the vulnerability was

235
00:10:00,240 --> 00:10:02,560
successfully patched in the affected

236
00:10:02,560 --> 00:10:04,399
vulnerable software

237
00:10:04,399 --> 00:10:06,640
we found that series with the incorrect

238
00:10:06,640 --> 00:10:10,240
busy require additional 200 days to

239
00:10:10,240 --> 00:10:12,640
patch the vulnerability than that of

240
00:10:12,640 --> 00:10:14,000
weather service with the correct

241
00:10:14,000 --> 00:10:16,320
business

242
00:10:16,320 --> 00:10:18,959
from our experiments we found that some

243
00:10:18,959 --> 00:10:22,000
cvs are reported with the incorrect lazy

244
00:10:22,000 --> 00:10:23,360
in that case

245
00:10:23,360 --> 00:10:25,760
the incorrect pc hinders detection and

246
00:10:25,760 --> 00:10:28,640
patching of propagate vulnerabilities

247
00:10:28,640 --> 00:10:31,760
therefore to enable developers to detect

248
00:10:31,760 --> 00:10:33,839
and patch propagate vulnerabilities in a

249
00:10:33,839 --> 00:10:35,120
timely manner

250
00:10:35,120 --> 00:10:37,600
we suggest that the task of discovering

251
00:10:37,600 --> 00:10:41,200
wg should be accurately performed with a

252
00:10:41,200 --> 00:10:45,279
system such as pressure finder

253
00:10:45,279 --> 00:10:47,200
this is our conclusion

254
00:10:47,200 --> 00:10:49,360
we found the correctness of boise has a

255
00:10:49,360 --> 00:10:52,240
significant impact on the appropriate

256
00:10:52,240 --> 00:10:54,320
detecting and patching the appropriate

257
00:10:54,320 --> 00:10:56,000
vulnerabilities

258
00:10:56,000 --> 00:10:57,200
in lisbon

259
00:10:57,200 --> 00:10:59,440
we presented blizzard finder for the

260
00:10:59,440 --> 00:11:00,880
first time

261
00:11:00,880 --> 00:11:02,959
to discover the correct basis of

262
00:11:02,959 --> 00:11:04,880
software vulnerabilities

263
00:11:04,880 --> 00:11:07,200
equipped with busy discovery result from

264
00:11:07,200 --> 00:11:08,640
blizzard finder

265
00:11:08,640 --> 00:11:10,480
developers can address propagate

266
00:11:10,480 --> 00:11:14,000
vulnerabilities in a timely manner

267
00:11:14,000 --> 00:11:16,079
this is end of my presentation thank you

268
00:11:16,079 --> 00:11:19,479
for your attention

