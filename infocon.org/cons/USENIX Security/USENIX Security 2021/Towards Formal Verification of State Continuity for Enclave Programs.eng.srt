1
00:00:09,120 --> 00:00:10,960
hello and welcome

2
00:00:10,960 --> 00:00:13,519
my name is muhit kumar jang and it is my

3
00:00:13,519 --> 00:00:15,679
honor to present our work in this

4
00:00:15,679 --> 00:00:17,039
conference

5
00:00:17,039 --> 00:00:20,080
together with professor gushing chan and

6
00:00:20,080 --> 00:00:23,600
my both advisor professor yin shan zhang

7
00:00:23,600 --> 00:00:26,240
and professor jishang len

8
00:00:26,240 --> 00:00:28,880
we made a first attempt towards formal

9
00:00:28,880 --> 00:00:31,519
verification of state continuity for

10
00:00:31,519 --> 00:00:33,680
enclave programs

11
00:00:33,680 --> 00:00:35,120
let's start with the necessary

12
00:00:35,120 --> 00:00:37,680
background information to understand the

13
00:00:37,680 --> 00:00:39,600
problem

14
00:00:39,600 --> 00:00:41,200
if we look at the commodity operating

15
00:00:41,200 --> 00:00:44,800
system it protects user data by process

16
00:00:44,800 --> 00:00:47,520
isolation and access control

17
00:00:47,520 --> 00:00:49,840
and this comes with an assumption that

18
00:00:49,840 --> 00:00:52,320
operating system is trusted

19
00:00:52,320 --> 00:00:54,079
but what happens when the operating

20
00:00:54,079 --> 00:00:56,480
system gets compromised

21
00:00:56,480 --> 00:00:59,359
that's where the intel sgx comes in

22
00:00:59,359 --> 00:01:01,520
it is a trusted hardware solution to

23
00:01:01,520 --> 00:01:04,559
protect confidentiality and integrity of

24
00:01:04,559 --> 00:01:07,439
runtime code and data

25
00:01:07,439 --> 00:01:10,400
in this ecosystem application is divided

26
00:01:10,400 --> 00:01:13,920
into trusted and untrusted code section

27
00:01:13,920 --> 00:01:16,159
the trusted code part which is hardware

28
00:01:16,159 --> 00:01:18,799
encrypted runs inside the protected

29
00:01:18,799 --> 00:01:21,439
memory regions call and play

30
00:01:21,439 --> 00:01:23,920
and thus if an adversary gets access to

31
00:01:23,920 --> 00:01:26,640
the operating system she cannot observe

32
00:01:26,640 --> 00:01:29,920
the runtime data in plain text

33
00:01:29,920 --> 00:01:32,560
another concept involved in our paper is

34
00:01:32,560 --> 00:01:34,479
state continuity

35
00:01:34,479 --> 00:01:37,119
and it's and it is classically defined

36
00:01:37,119 --> 00:01:40,240
as a property of protected modules and

37
00:01:40,240 --> 00:01:43,520
it requires that protected module must

38
00:01:43,520 --> 00:01:46,159
resume from the same execution state

39
00:01:46,159 --> 00:01:48,479
after tcp interrupts

40
00:01:48,479 --> 00:01:52,799
here pcb implies trusted computing base

41
00:01:52,799 --> 00:01:55,360
in the context of intel sgx the

42
00:01:55,360 --> 00:01:57,920
definition involves new player

43
00:01:57,920 --> 00:01:59,920
the one of these is

44
00:01:59,920 --> 00:02:02,240
heterogeneous tcp modules

45
00:02:02,240 --> 00:02:05,119
for example we have enclave memory with

46
00:02:05,119 --> 00:02:07,759
local and global variables we have

47
00:02:07,759 --> 00:02:09,520
non-volatile memory

48
00:02:09,520 --> 00:02:12,160
such as monotonic counter and persistent

49
00:02:12,160 --> 00:02:15,200
storage such as sealed data

50
00:02:15,200 --> 00:02:17,680
we also have a new threat model

51
00:02:17,680 --> 00:02:19,520
where the adversary controls the

52
00:02:19,520 --> 00:02:20,879
privileged code

53
00:02:20,879 --> 00:02:23,599
she can arbitrarily instantiate thread

54
00:02:23,599 --> 00:02:26,560
and processes she can permute reorder

55
00:02:26,560 --> 00:02:29,760
and click calls and she can access to

56
00:02:29,760 --> 00:02:33,120
e-call and vocal arguments

57
00:02:33,120 --> 00:02:35,599
therefore we redefine state continuity

58
00:02:35,599 --> 00:02:37,599
for enclave program

59
00:02:37,599 --> 00:02:39,680
consider an enclave program with

60
00:02:39,680 --> 00:02:41,519
different e calls coordinating with

61
00:02:41,519 --> 00:02:44,400
monotonic counter and seal data

62
00:02:44,400 --> 00:02:47,680
and we define state continuity here as

63
00:02:47,680 --> 00:02:50,720
for all enclave execution they always

64
00:02:50,720 --> 00:02:54,160
execute on the expected tcp state under

65
00:02:54,160 --> 00:02:57,840
sjx threat model and tcp interrupts

66
00:02:57,840 --> 00:03:01,280
let's understand this with an example

67
00:03:01,280 --> 00:03:04,400
consider the sdx application sorter

68
00:03:04,400 --> 00:03:06,640
it is a permissioned blockchain

69
00:03:06,640 --> 00:03:08,879
framework where different application

70
00:03:08,879 --> 00:03:11,519
can utilize it to build customized

71
00:03:11,519 --> 00:03:13,519
blockchain application

72
00:03:13,519 --> 00:03:16,159
one of the consensus algorithm involved

73
00:03:16,159 --> 00:03:18,640
in this framework is proof of elapsed

74
00:03:18,640 --> 00:03:19,440
time

75
00:03:19,440 --> 00:03:22,319
which leverages intel sgx for fair node

76
00:03:22,319 --> 00:03:24,000
participation

77
00:03:24,000 --> 00:03:26,799
each node in this workflow starts with

78
00:03:26,799 --> 00:03:29,120
registering into the blockchain network

79
00:03:29,120 --> 00:03:31,519
and then participates into block leader

80
00:03:31,519 --> 00:03:33,120
election

81
00:03:33,120 --> 00:03:35,920
the election is split into two enclave

82
00:03:35,920 --> 00:03:36,959
calls

83
00:03:36,959 --> 00:03:40,080
in the first e call it first generate

84
00:03:40,080 --> 00:03:42,959
random weight duration which serves as

85
00:03:42,959 --> 00:03:45,760
the elapsed time in proof of work

86
00:03:45,760 --> 00:03:47,840
then it creates a reference monotony

87
00:03:47,840 --> 00:03:49,200
counter value

88
00:03:49,200 --> 00:03:52,319
and then it seals these two values and

89
00:03:52,319 --> 00:03:54,879
waits outside the enclave call for the

90
00:03:54,879 --> 00:03:56,959
elapsed time

91
00:03:56,959 --> 00:03:59,599
the second key call unseals the seal

92
00:03:59,599 --> 00:04:02,080
data from the first key call and then it

93
00:04:02,080 --> 00:04:04,159
verifies the elapsed time

94
00:04:04,159 --> 00:04:06,640
it also compares the recent monotonic

95
00:04:06,640 --> 00:04:08,239
counter value with the reference

96
00:04:08,239 --> 00:04:10,640
monotonic control

97
00:04:10,640 --> 00:04:12,640
and then if all checks passes it

98
00:04:12,640 --> 00:04:15,120
generates the proof of elapsed time

99
00:04:15,120 --> 00:04:16,639
certificate

100
00:04:16,639 --> 00:04:19,279
and a node in a in a

101
00:04:19,279 --> 00:04:22,079
leader election can cheat by generating

102
00:04:22,079 --> 00:04:24,720
multiple certificate and gain the favor

103
00:04:24,720 --> 00:04:26,639
of elapsed time

104
00:04:26,639 --> 00:04:28,960
therefore the e call 2

105
00:04:28,960 --> 00:04:31,040
also increments the monotonic counter in

106
00:04:31,040 --> 00:04:32,080
the end

107
00:04:32,080 --> 00:04:34,720
so that the later execution of equal to

108
00:04:34,720 --> 00:04:36,320
cannot generate

109
00:04:36,320 --> 00:04:38,960
duplicate certificates

110
00:04:38,960 --> 00:04:43,040
overall sawtooth expects its tcp sales

111
00:04:43,040 --> 00:04:45,840
to remain either in a pre-certificate

112
00:04:45,840 --> 00:04:47,520
generation state

113
00:04:47,520 --> 00:04:49,520
or generate the certificate when the

114
00:04:49,520 --> 00:04:51,600
monotony counter value equals the

115
00:04:51,600 --> 00:04:53,040
reference value

116
00:04:53,040 --> 00:04:56,080
or abort in all other states

117
00:04:56,080 --> 00:04:59,120
and an adversary can influence the

118
00:04:59,120 --> 00:05:02,240
estate continuity by replaying the seal

119
00:05:02,240 --> 00:05:05,520
data or reordering e-calls or

120
00:05:05,520 --> 00:05:08,880
interleaving the enclave all operations

121
00:05:08,880 --> 00:05:10,720
and there could be many other attack

122
00:05:10,720 --> 00:05:12,160
vectors

123
00:05:12,160 --> 00:05:14,080
and therefore we think that the state

124
00:05:14,080 --> 00:05:16,560
continuity is an important property to

125
00:05:16,560 --> 00:05:18,240
prove

126
00:05:18,240 --> 00:05:20,560
in our investigation we found that out

127
00:05:20,560 --> 00:05:24,960
of 196 hx application 59 of them using

128
00:05:24,960 --> 00:05:26,320
ceiling api

129
00:05:26,320 --> 00:05:29,919
15 using monotony counter api and 5

130
00:05:29,919 --> 00:05:32,400
using global variables

131
00:05:32,400 --> 00:05:35,120
so the research problem we pose is that

132
00:05:35,120 --> 00:05:36,960
state continuity properties are

133
00:05:36,960 --> 00:05:40,479
difficult to verify in sdx environment

134
00:05:40,479 --> 00:05:42,400
and it is because of the tedious and

135
00:05:42,400 --> 00:05:45,280
error-prone manual efforts involved

136
00:05:45,280 --> 00:05:47,759
here one must clearly understand the

137
00:05:47,759 --> 00:05:50,000
trusted and untrusted boundaries

138
00:05:50,000 --> 00:05:52,080
correctly coordinate among heterogeneous

139
00:05:52,080 --> 00:05:54,720
tcp modules and carefully apply

140
00:05:54,720 --> 00:05:57,280
synchronization and lock

141
00:05:57,280 --> 00:06:00,000
and so the question we pose is

142
00:06:00,000 --> 00:06:02,800
is there a systematic approach to verify

143
00:06:02,800 --> 00:06:04,880
state continuity

144
00:06:04,880 --> 00:06:06,479
and to this end

145
00:06:06,479 --> 00:06:08,960
we propose to use symbolic verification

146
00:06:08,960 --> 00:06:09,919
too

147
00:06:09,919 --> 00:06:12,160
in its very basic flow

148
00:06:12,160 --> 00:06:15,199
tamarind tour starts with the design

149
00:06:15,199 --> 00:06:17,199
logic of a protocol in the form of

150
00:06:17,199 --> 00:06:19,759
multi-set rewriting rules

151
00:06:19,759 --> 00:06:22,160
and the security property in the form of

152
00:06:22,160 --> 00:06:23,759
first order logic

153
00:06:23,759 --> 00:06:26,560
and then it outputs whether the property

154
00:06:26,560 --> 00:06:30,319
holds for all execution of the model

155
00:06:30,319 --> 00:06:32,960
and our key observation is that the

156
00:06:32,960 --> 00:06:35,199
cryptographic protocol share common

157
00:06:35,199 --> 00:06:37,919
features with sjx environment

158
00:06:37,919 --> 00:06:39,759
the agents in the protocol can be

159
00:06:39,759 --> 00:06:43,039
considered as e-calls in the sjk site

160
00:06:43,039 --> 00:06:45,039
and the adversary on public channel can

161
00:06:45,039 --> 00:06:47,280
be considered as adversary in the

162
00:06:47,280 --> 00:06:49,039
privilege code

163
00:06:49,039 --> 00:06:50,960
we also note that the tamarind input

164
00:06:50,960 --> 00:06:53,520
language is dynamic enough to customize

165
00:06:53,520 --> 00:06:55,759
the hx environment

166
00:06:55,759 --> 00:06:57,120
so overall

167
00:06:57,120 --> 00:06:59,039
we start with the enclave execution

168
00:06:59,039 --> 00:07:01,919
logic and sgx threat logic derived from

169
00:07:01,919 --> 00:07:05,120
a component of an sjx application and we

170
00:07:05,120 --> 00:07:07,280
systematically transform it into

171
00:07:07,280 --> 00:07:09,120
tamarind input language

172
00:07:09,120 --> 00:07:11,280
and then we verify state continuity

173
00:07:11,280 --> 00:07:15,280
property for all execution of the model

174
00:07:15,280 --> 00:07:17,759
in our contribution of the systematic

175
00:07:17,759 --> 00:07:20,479
transformation we derive many lgx

176
00:07:20,479 --> 00:07:23,440
primitive and we provide model templates

177
00:07:23,440 --> 00:07:26,880
for three open source sjx application

178
00:07:26,880 --> 00:07:29,280
the example of sj experimental include

179
00:07:29,280 --> 00:07:30,960
enclave threads

180
00:07:30,960 --> 00:07:33,360
association network of sdx entities

181
00:07:33,360 --> 00:07:36,240
monotonic counter etc

182
00:07:36,240 --> 00:07:38,000
example of programming primitive

183
00:07:38,000 --> 00:07:42,479
includes logs loops and branching etc

184
00:07:42,479 --> 00:07:45,120
we also carefully model each capability

185
00:07:45,120 --> 00:07:47,680
of sjx threat adversary

186
00:07:47,680 --> 00:07:51,759
and these capabilities acts in in

187
00:07:51,759 --> 00:07:54,240
compatibility with all the

188
00:07:54,240 --> 00:07:58,080
the wavy model as expertise

189
00:07:58,080 --> 00:08:00,319
let's look at how we build tamarind

190
00:08:00,319 --> 00:08:03,360
model for the sort of case

191
00:08:03,360 --> 00:08:06,400
recall that in sort of each node

192
00:08:06,400 --> 00:08:08,960
executes in three steps

193
00:08:08,960 --> 00:08:11,520
and the election round is split into two

194
00:08:11,520 --> 00:08:13,039
enclave calls

195
00:08:13,039 --> 00:08:15,360
and overall there are many components

196
00:08:15,360 --> 00:08:18,160
required to model the workflow

197
00:08:18,160 --> 00:08:21,919
let's start with the sjx entities

198
00:08:21,919 --> 00:08:24,319
in a blockchain network each node

199
00:08:24,319 --> 00:08:28,000
executes in three steps and a user acts

200
00:08:28,000 --> 00:08:29,520
at each node

201
00:08:29,520 --> 00:08:31,360
and these nodes interact with the

202
00:08:31,360 --> 00:08:33,039
blockchain interface

203
00:08:33,039 --> 00:08:35,120
and this network can be considered as

204
00:08:35,120 --> 00:08:37,679
one network deployed by a developer or

205
00:08:37,679 --> 00:08:40,719
an isv termed in the context of intel

206
00:08:40,719 --> 00:08:41,839
sgx

207
00:08:41,839 --> 00:08:44,159
and there can be multiple isvs different

208
00:08:44,159 --> 00:08:46,800
blockchains and each node can have

209
00:08:46,800 --> 00:08:49,440
multiple processes executing those three

210
00:08:49,440 --> 00:08:51,360
steps

211
00:08:51,360 --> 00:08:53,200
and so let's see how we build the

212
00:08:53,200 --> 00:08:56,320
association network of these entities

213
00:08:56,320 --> 00:08:58,399
we utilize different properties of

214
00:08:58,399 --> 00:09:01,200
tamarind input language objects

215
00:09:01,200 --> 00:09:04,640
one of these is fresh facts which can

216
00:09:04,640 --> 00:09:07,440
produce unique variables

217
00:09:07,440 --> 00:09:09,760
a tamarind group which contains these

218
00:09:09,760 --> 00:09:11,920
facts can be instantiated unbounded

219
00:09:11,920 --> 00:09:14,480
number of times and we utilize these two

220
00:09:14,480 --> 00:09:16,720
properties to

221
00:09:16,720 --> 00:09:20,640
to produce different instances of isos

222
00:09:20,640 --> 00:09:23,040
and we pass down the isv

223
00:09:23,040 --> 00:09:25,680
entity variables to the second rule

224
00:09:25,680 --> 00:09:28,000
where we instantiate user and node

225
00:09:28,000 --> 00:09:29,680
instances

226
00:09:29,680 --> 00:09:32,959
and which starts to form a hierarchy of

227
00:09:32,959 --> 00:09:35,680
isvs users and node

228
00:09:35,680 --> 00:09:37,519
and following such procedure for the

229
00:09:37,519 --> 00:09:39,760
process level we create a three level

230
00:09:39,760 --> 00:09:43,120
hierarchy of isvs user nodes and

231
00:09:43,120 --> 00:09:45,120
processes

232
00:09:45,120 --> 00:09:47,200
let's look at how we configure enclave

233
00:09:47,200 --> 00:09:48,959
threads

234
00:09:48,959 --> 00:09:50,959
we utilize two types of facts in

235
00:09:50,959 --> 00:09:52,160
tamarind

236
00:09:52,160 --> 00:09:54,959
linear facts can be consumed only once

237
00:09:54,959 --> 00:09:57,680
so we use it to bind different rules of

238
00:09:57,680 --> 00:10:00,160
one and clef thread unit

239
00:10:00,160 --> 00:10:01,680
and the other type of fact is a

240
00:10:01,680 --> 00:10:03,760
persistent fact which can be consumed

241
00:10:03,760 --> 00:10:05,839
unmounted number of times

242
00:10:05,839 --> 00:10:07,760
and we utilize the linear fact

243
00:10:07,760 --> 00:10:09,519
dependencies starting from the

244
00:10:09,519 --> 00:10:11,440
association network to configure single

245
00:10:11,440 --> 00:10:12,399
thread

246
00:10:12,399 --> 00:10:14,079
and utilize

247
00:10:14,079 --> 00:10:16,959
the persistent fact dependencies from

248
00:10:16,959 --> 00:10:18,800
the association network to configure

249
00:10:18,800 --> 00:10:21,040
multiple threads

250
00:10:21,040 --> 00:10:23,680
and in this manner we model all the

251
00:10:23,680 --> 00:10:27,200
components of the sorted workflow

252
00:10:27,200 --> 00:10:28,880
let's recall the state continuity

253
00:10:28,880 --> 00:10:30,079
property

254
00:10:30,079 --> 00:10:32,399
required that each node must not

255
00:10:32,399 --> 00:10:34,480
generate two certificate with same

256
00:10:34,480 --> 00:10:37,360
monotonic counter reference value

257
00:10:37,360 --> 00:10:40,320
in its first order logic query it is

258
00:10:40,320 --> 00:10:42,560
encoded in the with the help of time

259
00:10:42,560 --> 00:10:43,760
stamps

260
00:10:43,760 --> 00:10:45,279
where two

261
00:10:45,279 --> 00:10:47,279
proof of elapsed time certificate

262
00:10:47,279 --> 00:10:49,920
execution events with the same node and

263
00:10:49,920 --> 00:10:52,399
same monotony counter should correspond

264
00:10:52,399 --> 00:10:55,920
to one timestamp

265
00:10:56,480 --> 00:10:58,560
once the model and the state continue

266
00:10:58,560 --> 00:11:00,720
property is ready we feed it into the

267
00:11:00,720 --> 00:11:03,519
tamarind proverb and in its raw form we

268
00:11:03,519 --> 00:11:05,360
derive an attack

269
00:11:05,360 --> 00:11:08,079
tamarind proverb shows a detailed trace

270
00:11:08,079 --> 00:11:10,880
of the sorted workflow to show the root

271
00:11:10,880 --> 00:11:13,360
cause of the attack

272
00:11:13,360 --> 00:11:14,800
and we apply

273
00:11:14,800 --> 00:11:16,959
a patch in the form of slide chain in

274
00:11:16,959 --> 00:11:19,360
the logic and we also derive

275
00:11:19,360 --> 00:11:21,440
a model where the state continuity

276
00:11:21,440 --> 00:11:23,680
property holds

277
00:11:23,680 --> 00:11:26,399
overall we apply our methodology to

278
00:11:26,399 --> 00:11:29,120
three open source sjx application and we

279
00:11:29,120 --> 00:11:32,480
build safe and vulnerable model for each

280
00:11:32,480 --> 00:11:34,160
three cases

281
00:11:34,160 --> 00:11:36,800
to conclude our worst our work is first

282
00:11:36,800 --> 00:11:38,160
attempt towards

283
00:11:38,160 --> 00:11:41,040
symbolic verification tool to verify

284
00:11:41,040 --> 00:11:43,680
state continuity property for sjx and

285
00:11:43,680 --> 00:11:44,959
play program

286
00:11:44,959 --> 00:11:47,200
we demonstrate our approach using three

287
00:11:47,200 --> 00:11:50,079
open source sdx applications and we show

288
00:11:50,079 --> 00:11:52,800
that terminal tour can effectively model

289
00:11:52,800 --> 00:11:55,440
sjk specific semantics and state

290
00:11:55,440 --> 00:11:58,079
continuity properties our tamarin code

291
00:11:58,079 --> 00:12:00,079
is released at github at the provided

292
00:12:00,079 --> 00:12:01,120
url

293
00:12:01,120 --> 00:12:03,040
i hope you enjoyed our talk

294
00:12:03,040 --> 00:12:04,880
and i would like to thank you for your

295
00:12:04,880 --> 00:12:07,880
attention

296
00:12:13,519 --> 00:12:15,600
you

