1
00:00:09,040 --> 00:00:10,080
hello

2
00:00:10,080 --> 00:00:12,719
today i'm going to introduce our work

3
00:00:12,719 --> 00:00:15,679
clarion sound and clear process checking

4
00:00:15,679 --> 00:00:17,760
for micro service deployments

5
00:00:17,760 --> 00:00:20,240
my name is jutong chen a phd student

6
00:00:20,240 --> 00:00:22,720
from north western university advised by

7
00:00:22,720 --> 00:00:24,560
ferisa yan chen

8
00:00:24,560 --> 00:00:26,640
this is also a joint work with hashan

9
00:00:26,640 --> 00:00:27,680
asshai

10
00:00:27,680 --> 00:00:31,039
dr ashish jihani and dr vinod ignis

11
00:00:31,039 --> 00:00:33,360
faryan from sri international

12
00:00:33,360 --> 00:00:37,680
many thanks to my amazing collaborators

13
00:00:37,920 --> 00:00:40,399
linux container-based microservices have

14
00:00:40,399 --> 00:00:42,719
emerged as an attractive option to

15
00:00:42,719 --> 00:00:44,399
traditional virtualization

16
00:00:44,399 --> 00:00:46,079
as they enable better resource

17
00:00:46,079 --> 00:00:47,360
utilization

18
00:00:47,360 --> 00:00:50,719
leading to increasing practical adoption

19
00:00:50,719 --> 00:00:52,719
containers serve as the underlying

20
00:00:52,719 --> 00:00:54,320
portable and lightweight software

21
00:00:54,320 --> 00:00:56,079
isolation technique

22
00:00:56,079 --> 00:00:58,000
they are facing a new security

23
00:00:58,000 --> 00:01:00,800
challenges like container escape attack

24
00:01:00,800 --> 00:01:03,600
and malicious crypt miners

25
00:01:03,600 --> 00:01:06,080
as the state of the art hosts forensics

26
00:01:06,080 --> 00:01:08,799
monitors monitoring solution

27
00:01:08,799 --> 00:01:11,119
provenance tracking is naturally

28
00:01:11,119 --> 00:01:13,840
transferred from traditional os scenario

29
00:01:13,840 --> 00:01:15,759
to container scenario

30
00:01:15,759 --> 00:01:17,520
but is this transfer really

31
00:01:17,520 --> 00:01:21,920
straightforward it's an open question

32
00:01:22,479 --> 00:01:24,880
here we start with a motivation example

33
00:01:24,880 --> 00:01:27,520
of a trivial insider attack

34
00:01:27,520 --> 00:01:29,600
three major steps in this attack

35
00:01:29,600 --> 00:01:32,000
includes touching a password file

36
00:01:32,000 --> 00:01:33,840
setting out back door and finally

37
00:01:33,840 --> 00:01:36,320
connecting the back door front remote

38
00:01:36,320 --> 00:01:38,320
assuming these insider want to damage

39
00:01:38,320 --> 00:01:40,720
both the container hose and a targeting

40
00:01:40,720 --> 00:01:41,759
container

41
00:01:41,759 --> 00:01:43,840
those three steps are performed both in

42
00:01:43,840 --> 00:01:46,320
the hose and inside container

43
00:01:46,320 --> 00:01:48,320
we will only drill down the first step

44
00:01:48,320 --> 00:01:49,040
in

45
00:01:49,040 --> 00:01:51,119
the next slide for simplicity and

46
00:01:51,119 --> 00:01:53,119
motivate our work by illustrating

47
00:01:53,119 --> 00:01:55,920
limitations in the province graph from

48
00:01:55,920 --> 00:01:59,360
three contemporary solutions

49
00:02:00,399 --> 00:02:02,960
as a container aware about not namespace

50
00:02:02,960 --> 00:02:05,200
aware solution

51
00:02:05,200 --> 00:02:08,160
we nova fails on soundness where we can

52
00:02:08,160 --> 00:02:11,200
see the fragmentation in bashcat

53
00:02:11,200 --> 00:02:12,480
problems

54
00:02:12,480 --> 00:02:14,959
and and the ambiguities on password

55
00:02:14,959 --> 00:02:16,080
files

56
00:02:16,080 --> 00:02:18,959
it looks like cad 3030

57
00:02:18,959 --> 00:02:21,440
just comes from nowhere because it

58
00:02:21,440 --> 00:02:23,840
doesn't have any parent process

59
00:02:23,840 --> 00:02:27,120
plus those two cad processes are trying

60
00:02:27,120 --> 00:02:29,120
to read the same file which is

61
00:02:29,120 --> 00:02:31,280
definitely incorrect because we know

62
00:02:31,280 --> 00:02:32,959
they should read the password file

63
00:02:32,959 --> 00:02:34,560
inside and outside container

64
00:02:34,560 --> 00:02:37,560
correspondingly

65
00:02:38,160 --> 00:02:39,200
just being

66
00:02:39,200 --> 00:02:42,000
namespace aware is also not enough as we

67
00:02:42,000 --> 00:02:45,200
can see that can flow fail on clarity in

68
00:02:45,200 --> 00:02:46,400
this graph

69
00:02:46,400 --> 00:02:48,560
although the problems is complete and

70
00:02:48,560 --> 00:02:51,120
correct they don't get a clear insight

71
00:02:51,120 --> 00:02:53,440
about which subgraph corresponds to a

72
00:02:53,440 --> 00:02:57,200
container at first glance

73
00:02:59,519 --> 00:03:02,159
when things come together spell fail on

74
00:03:02,159 --> 00:03:04,239
both sounders class soundness and

75
00:03:04,239 --> 00:03:07,040
clarity which will be a huge problem in

76
00:03:07,040 --> 00:03:10,400
problems tracking for sure

77
00:03:12,720 --> 00:03:14,720
by being named space aware and container

78
00:03:14,720 --> 00:03:17,599
aware our clarion solution provides a

79
00:03:17,599 --> 00:03:19,599
sound and clear problems graph as you

80
00:03:19,599 --> 00:03:21,360
can see here

81
00:03:21,360 --> 00:03:23,200
so the contribution of clarion can be

82
00:03:23,200 --> 00:03:24,720
summarized here

83
00:03:24,720 --> 00:03:27,200
clarion provides the first in-depth

84
00:03:27,200 --> 00:03:29,360
analysis of the implications of

85
00:03:29,360 --> 00:03:32,400
namespaces on problem checking

86
00:03:32,400 --> 00:03:35,200
claro is the first namespace aware and

87
00:03:35,200 --> 00:03:36,720
container aware problems checking

88
00:03:36,720 --> 00:03:37,760
solution

89
00:03:37,760 --> 00:03:39,200
we implemented

90
00:03:39,200 --> 00:03:41,680
as an extension of the spade process

91
00:03:41,680 --> 00:03:42,640
engine

92
00:03:42,640 --> 00:03:44,319
the detailed implementation involves

93
00:03:44,319 --> 00:03:47,519
kernel module net net filter hook and

94
00:03:47,519 --> 00:03:49,920
modification to spade application level

95
00:03:49,920 --> 00:03:51,040
handlers

96
00:03:51,040 --> 00:03:54,319
detail can be referred from the paper

97
00:03:54,319 --> 00:03:56,959
claro is is tested by a comprehensive

98
00:03:56,959 --> 00:03:59,840
evaluation of effectiveness efficiency

99
00:03:59,840 --> 00:04:02,799
and generality

100
00:04:03,680 --> 00:04:05,680
dive into the soundness challenge we

101
00:04:05,680 --> 00:04:08,159
observed in the motivation example

102
00:04:08,159 --> 00:04:10,560
we found that the root cause of it is

103
00:04:10,560 --> 00:04:12,480
the inconsistency

104
00:04:12,480 --> 00:04:14,640
in the low-level events

105
00:04:14,640 --> 00:04:16,478
this inconsistently occurs when

106
00:04:16,478 --> 00:04:18,320
low-level events report data from

107
00:04:18,320 --> 00:04:21,600
different contexts and results in vertex

108
00:04:21,600 --> 00:04:24,720
splitting in the problems graphs

109
00:04:24,720 --> 00:04:27,600
consider clones linux event linux audit

110
00:04:27,600 --> 00:04:29,680
event as an example here

111
00:04:29,680 --> 00:04:33,040
its pid field 5903

112
00:04:33,040 --> 00:04:35,120
is in host context

113
00:04:35,120 --> 00:04:39,520
but its exit field 2 which is also a pid

114
00:04:39,520 --> 00:04:42,880
is affected by pid name swiss and

115
00:04:42,880 --> 00:04:46,000
is in container context

116
00:04:46,000 --> 00:04:48,400
if province trading system directly used

117
00:04:48,400 --> 00:04:51,199
uses those two data fields to generate

118
00:04:51,199 --> 00:04:53,040
problems

119
00:04:53,040 --> 00:04:57,639
data fragmentation will definitely occur

120
00:04:57,680 --> 00:05:00,400
starting from pid namespace example in

121
00:05:00,400 --> 00:05:01,919
the previous slide

122
00:05:01,919 --> 00:05:04,320
we did a further in-depth analysis on

123
00:05:04,320 --> 00:05:07,600
namespace implication about how and what

124
00:05:07,600 --> 00:05:10,400
improvement tracking can be affected

125
00:05:10,400 --> 00:05:12,479
according to the result table

126
00:05:12,479 --> 00:05:15,600
we can see that pid mount network and

127
00:05:15,600 --> 00:05:18,479
ipc name spaces impact soundness very

128
00:05:18,479 --> 00:05:19,520
much

129
00:05:19,520 --> 00:05:21,520
additional details can be

130
00:05:21,520 --> 00:05:22,960
referred from

131
00:05:22,960 --> 00:05:26,400
table 1 and 2 in the paper

132
00:05:27,199 --> 00:05:30,240
as one last step to show the severity of

133
00:05:30,240 --> 00:05:31,840
soundness challenges

134
00:05:31,840 --> 00:05:34,160
we give some results on investigation

135
00:05:34,160 --> 00:05:36,960
about soundness challenge on other linux

136
00:05:36,960 --> 00:05:40,639
audit subsystems and os platforms

137
00:05:40,639 --> 00:05:42,080
as you can see

138
00:05:42,080 --> 00:05:44,240
sounds challenging persists under most

139
00:05:44,240 --> 00:05:46,960
cases in other linux auditing subsystems

140
00:05:46,960 --> 00:05:49,759
and os platforms with minor exceptions

141
00:05:49,759 --> 00:05:50,560
in

142
00:05:50,560 --> 00:05:53,039
pid namespace the reason for those

143
00:05:53,039 --> 00:05:56,720
exceptions is that inconsistency in pid

144
00:05:56,720 --> 00:05:59,360
is eliminated

145
00:05:59,360 --> 00:06:01,680
also additional details are provided in

146
00:06:01,680 --> 00:06:06,000
table 3 and 4 of the paper

147
00:06:06,000 --> 00:06:08,240
to address soundness challenge the key

148
00:06:08,240 --> 00:06:10,800
design is to establish a mapping between

149
00:06:10,800 --> 00:06:12,720
host view and container view on the

150
00:06:12,720 --> 00:06:15,520
virtualized system resources

151
00:06:15,520 --> 00:06:16,720
list mapping

152
00:06:16,720 --> 00:06:19,440
correlates the virtualized data with

153
00:06:19,440 --> 00:06:20,880
host data

154
00:06:20,880 --> 00:06:22,960
and it helped

155
00:06:22,960 --> 00:06:24,800
promise tracking system to use the

156
00:06:24,800 --> 00:06:26,800
consistent problems data

157
00:06:26,800 --> 00:06:28,639
according to the analysis in previous

158
00:06:28,639 --> 00:06:30,880
slides the principle name spaces that

159
00:06:30,880 --> 00:06:35,280
impact problems are pid mount network

160
00:06:35,280 --> 00:06:37,840
and ipc

161
00:06:38,319 --> 00:06:40,479
so another challenge in container

162
00:06:40,479 --> 00:06:42,720
process tracking is the clarity

163
00:06:42,720 --> 00:06:43,680
challenge

164
00:06:43,680 --> 00:06:46,000
without understanding the essential

165
00:06:46,000 --> 00:06:48,479
cleanup semantics we can neither

166
00:06:48,479 --> 00:06:50,800
accelerate the automatic analysis

167
00:06:50,800 --> 00:06:55,199
process nor simplify a security analysis

168
00:06:55,199 --> 00:06:57,919
in this paper we provide two essential

169
00:06:57,919 --> 00:07:00,240
container semantic patterns and expect

170
00:07:00,240 --> 00:07:02,880
more patterns in the future so one

171
00:07:02,880 --> 00:07:05,360
pattern is container boundary it helps

172
00:07:05,360 --> 00:07:07,599
isolate the sub graphs

173
00:07:07,599 --> 00:07:09,440
of different containers

174
00:07:09,440 --> 00:07:11,759
and we implement it by some problems

175
00:07:11,759 --> 00:07:15,199
data model adjustment in spade

176
00:07:15,199 --> 00:07:16,720
the other pattern is container

177
00:07:16,720 --> 00:07:18,400
initialization

178
00:07:18,400 --> 00:07:20,319
it marks the subgraph representing the

179
00:07:20,319 --> 00:07:23,199
container in container initialization

180
00:07:23,199 --> 00:07:25,120
the implementation involves some graph

181
00:07:25,120 --> 00:07:27,759
analysis here

182
00:07:27,759 --> 00:07:29,680
and this will wrap up the problem

183
00:07:29,680 --> 00:07:33,039
statement and system design

184
00:07:35,919 --> 00:07:36,720
in

185
00:07:36,720 --> 00:07:39,520
the evaluation we evaluate clarion

186
00:07:39,520 --> 00:07:41,680
solidly in effectiveness

187
00:07:41,680 --> 00:07:44,479
generality and efficiency the question

188
00:07:44,479 --> 00:07:47,120
for effectiveness evaluation is how

189
00:07:47,120 --> 00:07:49,680
effective is clarion in dealing with

190
00:07:49,680 --> 00:07:51,199
real-world container micro-service

191
00:07:51,199 --> 00:07:52,160
attacks

192
00:07:52,160 --> 00:07:54,319
and the answer is to do

193
00:07:54,319 --> 00:07:56,720
real-world exploit here

194
00:07:56,720 --> 00:07:59,280
we picked three recent vulnerabilities

195
00:07:59,280 --> 00:08:01,759
and briefing in this table

196
00:08:01,759 --> 00:08:04,400
they come from different core components

197
00:08:04,400 --> 00:08:06,639
of darker container engine with high

198
00:08:06,639 --> 00:08:08,080
severity

199
00:08:08,080 --> 00:08:09,520
the first two

200
00:08:09,520 --> 00:08:11,599
vulnerabilities are even more

201
00:08:11,599 --> 00:08:13,840
detrimental because they achieve

202
00:08:13,840 --> 00:08:16,879
previous escalation on container host

203
00:08:16,879 --> 00:08:21,440
we will focus on cve 2019 5736

204
00:08:21,440 --> 00:08:22,639
wrong c

205
00:08:22,639 --> 00:08:25,759
to show the effectiveness

206
00:08:25,759 --> 00:08:30,000
exploit consists of two stars of the com

207
00:08:30,000 --> 00:08:32,320
of the compromise container the first

208
00:08:32,320 --> 00:08:34,479
star will get everything ready and

209
00:08:34,479 --> 00:08:38,240
second star does the actual damage

210
00:08:38,880 --> 00:08:41,360
we provide them

211
00:08:41,360 --> 00:08:43,679
a comparison between clarion and spain

212
00:08:43,679 --> 00:08:44,560
here

213
00:08:44,560 --> 00:08:46,880
similar to what we see in the motivation

214
00:08:46,880 --> 00:08:48,080
example

215
00:08:48,080 --> 00:08:50,399
clarion successfully addresses the

216
00:08:50,399 --> 00:08:52,800
fragmentation in every invoked folk

217
00:08:52,800 --> 00:08:54,160
system call

218
00:08:54,160 --> 00:08:56,320
and eliminate ambiguous his own bash

219
00:08:56,320 --> 00:08:57,920
executable file

220
00:08:57,920 --> 00:08:59,120
besides

221
00:08:59,120 --> 00:09:00,880
we can have a clear insight about

222
00:09:00,880 --> 00:09:03,519
container in the graph generated by

223
00:09:03,519 --> 00:09:06,080
clario

224
00:09:06,480 --> 00:09:08,480
and the same thing happened on the

225
00:09:08,480 --> 00:09:11,279
second star also with the name space and

226
00:09:11,279 --> 00:09:13,279
container awareness the prominent

227
00:09:13,279 --> 00:09:17,120
tracking system is well functioning

228
00:09:19,839 --> 00:09:22,000
the question for generality is whether

229
00:09:22,000 --> 00:09:24,880
clarion solution is generally applicable

230
00:09:24,880 --> 00:09:27,519
across different container engines

231
00:09:27,519 --> 00:09:29,360
we answer this by generating container

232
00:09:29,360 --> 00:09:31,760
initialization graphs and graph

233
00:09:31,760 --> 00:09:33,839
quantitative results for different

234
00:09:33,839 --> 00:09:35,200
containers

235
00:09:35,200 --> 00:09:37,120
due to the time limit we only show the

236
00:09:37,120 --> 00:09:39,600
container initialization graph here

237
00:09:39,600 --> 00:09:42,080
as you can see we provide the graphs for

238
00:09:42,080 --> 00:09:44,480
docker engine and rocket engine where

239
00:09:44,480 --> 00:09:46,800
boundary of container are clear and

240
00:09:46,800 --> 00:09:49,360
container initialization subgraphs are

241
00:09:49,360 --> 00:09:50,880
circled

242
00:09:50,880 --> 00:09:53,440
important flags of clone and shared

243
00:09:53,440 --> 00:09:56,320
system call are recorded and name space

244
00:09:56,320 --> 00:10:00,480
changes are clearly observed

245
00:10:01,040 --> 00:10:03,839
the last part of the evaluation is about

246
00:10:03,839 --> 00:10:05,120
efficiency

247
00:10:05,120 --> 00:10:07,760
we use a microservice benchmark called

248
00:10:07,760 --> 00:10:09,360
google boutique

249
00:10:09,360 --> 00:10:11,600
as the workload during as the workload

250
00:10:11,600 --> 00:10:14,079
during the evaluation

251
00:10:14,079 --> 00:10:16,880
the results show that the overhead added

252
00:10:16,880 --> 00:10:19,760
by clarion is less than five percent in

253
00:10:19,760 --> 00:10:21,600
both runtime overhead and storage

254
00:10:21,600 --> 00:10:26,079
overhead which we believe is acceptable

255
00:10:26,240 --> 00:10:27,600
in conclusion

256
00:10:27,600 --> 00:10:30,000
we find that existing problems tracking

257
00:10:30,000 --> 00:10:32,480
solutions are inadequate

258
00:10:32,480 --> 00:10:34,640
for microservice scenarios because of

259
00:10:34,640 --> 00:10:37,279
being nemesis unaware or container

260
00:10:37,279 --> 00:10:38,800
unaware

261
00:10:38,800 --> 00:10:41,440
clarion is the first namespace aware and

262
00:10:41,440 --> 00:10:43,760
container aware problems tracking

263
00:10:43,760 --> 00:10:44,880
solution

264
00:10:44,880 --> 00:10:47,279
we perform the comprehensive evaluation

265
00:10:47,279 --> 00:10:48,399
shows

266
00:10:48,399 --> 00:10:51,279
effectiveness efficiency and generality

267
00:10:51,279 --> 00:10:52,959
of clarion

268
00:10:52,959 --> 00:10:55,360
for effectiveness we generate a sound

269
00:10:55,360 --> 00:10:58,640
and clear prominence graphs of our three

270
00:10:58,640 --> 00:11:01,760
real world cvs which outperform the

271
00:11:01,760 --> 00:11:03,680
graphs generated by the traditional

272
00:11:03,680 --> 00:11:04,959
solutions

273
00:11:04,959 --> 00:11:06,480
for general reality

274
00:11:06,480 --> 00:11:08,640
we showed that our solution is

275
00:11:08,640 --> 00:11:11,200
independent of container engines by

276
00:11:11,200 --> 00:11:12,880
providing a container initialization

277
00:11:12,880 --> 00:11:16,160
graph and quantitative results for three

278
00:11:16,160 --> 00:11:17,839
container engines

279
00:11:17,839 --> 00:11:19,279
for efficiency

280
00:11:19,279 --> 00:11:21,279
we use the problems we use the

281
00:11:21,279 --> 00:11:24,000
microservice benchmark to test the wrong

282
00:11:24,000 --> 00:11:26,160
time and storage overhead

283
00:11:26,160 --> 00:11:28,959
of sclerion and find that the overhead

284
00:11:28,959 --> 00:11:32,160
is less than five percent over speed

285
00:11:32,160 --> 00:11:34,560
if you have any questions and feedback

286
00:11:34,560 --> 00:11:39,479
please feel free to contact me thank you

287
00:11:45,920 --> 00:11:48,000
you

