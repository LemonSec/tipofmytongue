1
00:00:08,880 --> 00:00:11,519
hi my name is bogdan i'm a professor at

2
00:00:11,519 --> 00:00:13,679
poytenca university of timisoara and i'm

3
00:00:13,679 --> 00:00:15,599
presenting january our joint work with

4
00:00:15,599 --> 00:00:16,880
colleagues from the ben gurion

5
00:00:16,880 --> 00:00:19,359
university of the negev

6
00:00:19,359 --> 00:00:21,279
so we are no longer strangers to the

7
00:00:21,279 --> 00:00:23,359
fact that cars may have dozens or even

8
00:00:23,359 --> 00:00:25,119
more than a hundred issues that run

9
00:00:25,119 --> 00:00:27,039
several million lines of code to ensure

10
00:00:27,039 --> 00:00:29,439
various functionalities

11
00:00:29,439 --> 00:00:30,560
obviously

12
00:00:30,560 --> 00:00:32,399
this is used need to communicate and

13
00:00:32,399 --> 00:00:33,840
while there are many options for

14
00:00:33,840 --> 00:00:35,760
implementing in vehicle buses ranging

15
00:00:35,760 --> 00:00:37,920
from low to high speeds the can bus is

16
00:00:37,920 --> 00:00:40,160
still the most widely used why is this

17
00:00:40,160 --> 00:00:41,840
the case mostly because of its

18
00:00:41,840 --> 00:00:44,000
simplicity low cost and effectiveness

19
00:00:44,000 --> 00:00:46,480
proven by more than three decades of use

20
00:00:46,480 --> 00:00:48,800
newer embodiments such as can fd and can

21
00:00:48,800 --> 00:00:51,520
excel boost its speed from 1 megabit per

22
00:00:51,520 --> 00:00:53,600
second to 5 or even 10 megabits per

23
00:00:53,600 --> 00:00:55,520
second and prove that this bus is here

24
00:00:55,520 --> 00:00:57,440
to stay

25
00:00:57,440 --> 00:00:59,359
the can bus is a differential bus which

26
00:00:59,359 --> 00:01:02,160
uses two lines can high and can low

27
00:01:02,160 --> 00:01:05,040
connected via 121 terminal resistors

28
00:01:05,040 --> 00:01:06,880
that are specifically important for the

29
00:01:06,880 --> 00:01:09,119
development in this world the bus has

30
00:01:09,119 --> 00:01:11,280
two states a recessive state where the

31
00:01:11,280 --> 00:01:13,200
two can lines have the same voltage

32
00:01:13,200 --> 00:01:15,040
level and a dominant state in which they

33
00:01:15,040 --> 00:01:17,360
differ by about two volts the dominant

34
00:01:17,360 --> 00:01:19,200
state of the bus is able to override the

35
00:01:19,200 --> 00:01:21,360
recessive state

36
00:01:21,360 --> 00:01:23,520
this type of physical air will allow two

37
00:01:23,520 --> 00:01:25,439
nodes to start broadcasting at the same

38
00:01:25,439 --> 00:01:27,680
time and since the dominant voltage will

39
00:01:27,680 --> 00:01:29,920
overwrite the recessive voltage the node

40
00:01:29,920 --> 00:01:31,680
that writes the id with the lower value

41
00:01:31,680 --> 00:01:33,280
will be allowed to continue writing on

42
00:01:33,280 --> 00:01:35,119
the bus while the rest of the nodes will

43
00:01:35,119 --> 00:01:37,119
lose the arbitration the frame will

44
00:01:37,119 --> 00:01:39,200
carry only 64 bits but this is

45
00:01:39,200 --> 00:01:41,439
generously extended to 64 bytes in the

46
00:01:41,439 --> 00:01:44,880
newer embodiment can fd

47
00:01:44,880 --> 00:01:46,799
nevertheless and again important from

48
00:01:46,799 --> 00:01:49,439
this work the can bus has a nice error

49
00:01:49,439 --> 00:01:51,520
confinement mechanism by which nodes

50
00:01:51,520 --> 00:01:53,360
that introduce error on the bus or which

51
00:01:53,360 --> 00:01:55,600
encounter receivers will go into an

52
00:01:55,600 --> 00:01:57,600
error passive state and ultimately in a

53
00:01:57,600 --> 00:01:59,439
bus off state that prevents them from

54
00:01:59,439 --> 00:02:02,560
further disturbing the bus

55
00:02:02,560 --> 00:02:04,880
the lack of security on can led to many

56
00:02:04,880 --> 00:02:06,799
attacks reported in the recent years

57
00:02:06,799 --> 00:02:08,959
currently we know that cars are insecure

58
00:02:08,959 --> 00:02:10,399
as we see papers reporting

59
00:02:10,399 --> 00:02:12,400
vulnerabilities each year the more

60
00:02:12,400 --> 00:02:14,080
relevant part related to security is

61
00:02:14,080 --> 00:02:15,760
that both the industry and the research

62
00:02:15,760 --> 00:02:17,599
community were quick to react with

63
00:02:17,599 --> 00:02:19,760
security designs the industry had

64
00:02:19,760 --> 00:02:21,840
proposed standards such as the autosar

65
00:02:21,840 --> 00:02:22,879
standard for securing board

66
00:02:22,879 --> 00:02:24,800
communication and the research community

67
00:02:24,800 --> 00:02:26,800
proposed extremely creative approaches

68
00:02:26,800 --> 00:02:28,480
to secure can buses

69
00:02:28,480 --> 00:02:30,720
notably most of these creative efforts

70
00:02:30,720 --> 00:02:33,680
stem from the limited payload of 64 bits

71
00:02:33,680 --> 00:02:35,519
income frames which makes it very

72
00:02:35,519 --> 00:02:37,840
difficult to embed security elements so

73
00:02:37,840 --> 00:02:39,360
there have been many proposals for

74
00:02:39,360 --> 00:02:42,400
truncating macs mixing max encrypting or

75
00:02:42,400 --> 00:02:44,319
authenticating the id field which is

76
00:02:44,319 --> 00:02:46,879
also claimed to offer some us resilience

77
00:02:46,879 --> 00:02:48,239
and other solutions have called to

78
00:02:48,239 --> 00:02:49,760
physical properties of the bus and

79
00:02:49,760 --> 00:02:52,160
controllers using clock skills voltage

80
00:02:52,160 --> 00:02:54,480
levels or even cover timing or voltage

81
00:02:54,480 --> 00:02:56,080
channels

82
00:02:56,080 --> 00:02:56,959
now

83
00:02:56,959 --> 00:02:58,720
regardless of this previously described

84
00:02:58,720 --> 00:03:00,800
security mechanism there is one attack

85
00:03:00,800 --> 00:03:03,200
that is impossible to stop on can buses

86
00:03:03,200 --> 00:03:05,360
that is denial of service attacks

87
00:03:05,360 --> 00:03:07,440
the reason why this is impossible is

88
00:03:07,440 --> 00:03:09,200
because of the physical layer and error

89
00:03:09,200 --> 00:03:10,959
confinement mechanism so one way to

90
00:03:10,959 --> 00:03:13,040
cause the dos is by simply modifying a

91
00:03:13,040 --> 00:03:14,640
frame during transmission which will

92
00:03:14,640 --> 00:03:16,159
cause transmission errors and will make

93
00:03:16,159 --> 00:03:18,720
the sender going to pass off another way

94
00:03:18,720 --> 00:03:20,640
is by simply flooding the bus with high

95
00:03:20,640 --> 00:03:22,640
priority frames or even simpler than

96
00:03:22,640 --> 00:03:24,720
that keep the bus in a dominant state

97
00:03:24,720 --> 00:03:26,480
which will make it impossible for other

98
00:03:26,480 --> 00:03:28,560
nodes to communicate it is clear that

99
00:03:28,560 --> 00:03:30,159
these issues are due to intrinsic

100
00:03:30,159 --> 00:03:31,920
properties of the physical layer and

101
00:03:31,920 --> 00:03:33,680
they cannot be prevented by traditional

102
00:03:33,680 --> 00:03:36,319
security mechanisms

103
00:03:36,319 --> 00:03:38,480
for this purpose in canary we took an

104
00:03:38,480 --> 00:03:40,879
entirely distinct approach we add a bus

105
00:03:40,879 --> 00:03:42,560
guardian that monitors the left and

106
00:03:42,560 --> 00:03:44,720
right ends of the bus the bus guardian

107
00:03:44,720 --> 00:03:46,080
will run some intrusion detection

108
00:03:46,080 --> 00:03:48,080
mechanism in our work rely on a simple

109
00:03:48,080 --> 00:03:49,680
bloom filtering that checks for

110
00:03:49,680 --> 00:03:52,239
non-identifier or fixed frame content as

111
00:03:52,239 --> 00:03:54,080
well as check for the arrival rate of

112
00:03:54,080 --> 00:03:55,920
frames and verify that it does not

113
00:03:55,920 --> 00:03:57,840
exceed the specific threshold which will

114
00:03:57,840 --> 00:04:00,400
signal a flooding attack of course any

115
00:04:00,400 --> 00:04:02,080
other ideas can be implemented at the

116
00:04:02,080 --> 00:04:03,920
bus guardian level but this is a topic

117
00:04:03,920 --> 00:04:05,840
in its own and will be out of scope for

118
00:04:05,840 --> 00:04:07,760
the current communication once an

119
00:04:07,760 --> 00:04:09,840
intrusion is detected the bus guardian

120
00:04:09,840 --> 00:04:11,519
will disconnect segments of the bus in

121
00:04:11,519 --> 00:04:13,200
an attempt to localize and isolate the

122
00:04:13,200 --> 00:04:15,040
intrusion

123
00:04:15,040 --> 00:04:17,519
the question is how do we disconnect bus

124
00:04:17,519 --> 00:04:18,880
segments without damaging the

125
00:04:18,880 --> 00:04:21,040
transmission we cannot simply cut the

126
00:04:21,040 --> 00:04:23,360
wires for this we introduce a simple

127
00:04:23,360 --> 00:04:25,280
engineering tool which we call in what

128
00:04:25,280 --> 00:04:28,240
follows the bus canary the bus scanner

129
00:04:28,240 --> 00:04:30,160
is a double relay resistor structure

130
00:04:30,160 --> 00:04:32,080
that will allow bus disconnections at

131
00:04:32,080 --> 00:04:34,080
any point on the bus without losing the

132
00:04:34,080 --> 00:04:37,120
120 ohm end-of-line impedance so for

133
00:04:37,120 --> 00:04:39,360
example in the picture below you can see

134
00:04:39,360 --> 00:04:42,000
that the canary between su-2 and su 3

135
00:04:42,000 --> 00:04:43,600
when switching from position 1 to

136
00:04:43,600 --> 00:04:46,160
position 2 will simply split the bus

137
00:04:46,160 --> 00:04:48,800
into two sub buses while keeping a 120

138
00:04:48,800 --> 00:04:50,720
ohm impedance constant at the end of the

139
00:04:50,720 --> 00:04:53,120
lines

140
00:04:53,280 --> 00:04:54,960
the full schematic of our experimental

141
00:04:54,960 --> 00:04:56,800
model can be seen below

142
00:04:56,800 --> 00:04:58,720
one canal is placed in the vicinity of

143
00:04:58,720 --> 00:05:00,639
each issue and the bus guardian will

144
00:05:00,639 --> 00:05:02,320
point toward the left and right ends of

145
00:05:02,320 --> 00:05:04,479
the bus making it possible to split the

146
00:05:04,479 --> 00:05:06,639
bus and yet retransmit from one part to

147
00:05:06,639 --> 00:05:08,160
the other such that communication is

148
00:05:08,160 --> 00:05:10,800
never lost

149
00:05:10,800 --> 00:05:11,919
below you can see the actual

150
00:05:11,919 --> 00:05:14,160
implementation of canary in our work we

151
00:05:14,160 --> 00:05:15,919
use the powerful automotive grade

152
00:05:15,919 --> 00:05:18,400
controller infinion tri core for the bus

153
00:05:18,400 --> 00:05:19,759
guardian and some simple cheap

154
00:05:19,759 --> 00:05:22,000
electromagnetic relays that require a 5

155
00:05:22,000 --> 00:05:25,199
volt power supply

156
00:05:25,199 --> 00:05:27,039
the adversary model considered by our

157
00:05:27,039 --> 00:05:28,560
working visions three type of

158
00:05:28,560 --> 00:05:30,800
adversaries according to their position

159
00:05:30,800 --> 00:05:32,800
on the bus the first type of adversary

160
00:05:32,800 --> 00:05:34,880
is an adversary that will tap the bus or

161
00:05:34,880 --> 00:05:36,560
compromise the unit in a position where

162
00:05:36,560 --> 00:05:38,720
it can be completely isolated

163
00:05:38,720 --> 00:05:40,560
type 2 adversaries tap the bus in a

164
00:05:40,560 --> 00:05:42,080
location that cannot be completely

165
00:05:42,080 --> 00:05:44,479
isolated but the issue nearby has no

166
00:05:44,479 --> 00:05:46,240
essential functionalities and can be

167
00:05:46,240 --> 00:05:48,240
isolated along with the adversary

168
00:05:48,240 --> 00:05:50,320
finally type 3 adversaries will tap the

169
00:05:50,320 --> 00:05:51,680
bus in a location where it is not

170
00:05:51,680 --> 00:05:53,759
possible to isolate them nor is it

171
00:05:53,759 --> 00:05:55,199
possible to lose functionality in that

172
00:05:55,199 --> 00:05:57,280
part of the bus for which we will use a

173
00:05:57,280 --> 00:05:59,120
load balancing mechanism to prevent the

174
00:05:59,120 --> 00:06:00,800
attack

175
00:06:00,800 --> 00:06:02,720
here is a concrete example of type one

176
00:06:02,720 --> 00:06:05,039
adversary which taps the bus between two

177
00:06:05,039 --> 00:06:07,360
relays and can be fully isolated and

178
00:06:07,360 --> 00:06:09,440
then traffic can be redirected from one

179
00:06:09,440 --> 00:06:10,880
side to the other

180
00:06:10,880 --> 00:06:13,120
next there is a type 2 adversary that

181
00:06:13,120 --> 00:06:15,680
can only be isolated with ecu1 but we

182
00:06:15,680 --> 00:06:17,520
can still filter and redirect traffic

183
00:06:17,520 --> 00:06:20,080
from the compromised side and finally

184
00:06:20,080 --> 00:06:22,080
here is an example of type 3 adversary

185
00:06:22,080 --> 00:06:24,240
which we cannot isolate and cannot lose

186
00:06:24,240 --> 00:06:26,000
communications on either the left or

187
00:06:26,000 --> 00:06:27,759
right side of the network but we can

188
00:06:27,759 --> 00:06:29,759
load balance the adversary from the left

189
00:06:29,759 --> 00:06:31,840
to the right by triggering relays 3 and

190
00:06:31,840 --> 00:06:34,400
4 filtering and redirected traffic from

191
00:06:34,400 --> 00:06:37,520
one side to the other

192
00:06:37,600 --> 00:06:39,680
to prove functionalities we use two test

193
00:06:39,680 --> 00:06:41,680
beds the first of them uses traffic

194
00:06:41,680 --> 00:06:43,840
collected from a real vehicle we then

195
00:06:43,840 --> 00:06:45,520
port this traffic in our laboratory

196
00:06:45,520 --> 00:06:47,680
testbed where we split it and replayed

197
00:06:47,680 --> 00:06:49,520
at the two bus ends attempting to

198
00:06:49,520 --> 00:06:51,360
isolate the type 3 adversary in the

199
00:06:51,360 --> 00:06:54,240
middle of the bus

200
00:06:54,319 --> 00:06:56,080
the solution proves highly effective as

201
00:06:56,080 --> 00:06:57,280
you can see

202
00:06:57,280 --> 00:06:59,199
when the adversary is causing the dos

203
00:06:59,199 --> 00:07:01,280
the bus load increases to 400 kilobits

204
00:07:01,280 --> 00:07:03,599
per second on either the left or on the

205
00:07:03,599 --> 00:07:05,520
right side but not on both sides of the

206
00:07:05,520 --> 00:07:08,560
bus at the same time during the dos only

207
00:07:08,560 --> 00:07:10,639
a few legitimate frames denoted as blue

208
00:07:10,639 --> 00:07:12,639
dots will enter the channel and high

209
00:07:12,639 --> 00:07:14,960
priority adversarial frames denotes as

210
00:07:14,960 --> 00:07:17,199
orient dots will be more prevalent

211
00:07:17,199 --> 00:07:18,880
notice that the left and right channels

212
00:07:18,880 --> 00:07:20,720
are asynchronous as the adversary is

213
00:07:20,720 --> 00:07:24,560
switched from one side to the other

214
00:07:24,800 --> 00:07:26,560
there are three important questions

215
00:07:26,560 --> 00:07:28,880
regarding the effectiveness of cannery

216
00:07:28,880 --> 00:07:30,800
one of them is what happens with

217
00:07:30,800 --> 00:07:32,319
transmissions during the time when the

218
00:07:32,319 --> 00:07:34,960
relays are triggered well these relays

219
00:07:34,960 --> 00:07:37,039
have a five millisecond operation time

220
00:07:37,039 --> 00:07:39,039
but the bus disturbances will last about

221
00:07:39,039 --> 00:07:40,479
one millisecond based on our

222
00:07:40,479 --> 00:07:42,160
measurements as you can see in this

223
00:07:42,160 --> 00:07:44,160
oscilloscope plot the frame that is sent

224
00:07:44,160 --> 00:07:45,360
during the relay action will be

225
00:07:45,360 --> 00:07:46,960
destroyed and the sender will get a

226
00:07:46,960 --> 00:07:49,120
transmission error but due to the clever

227
00:07:49,120 --> 00:07:51,039
design of can it will retransmit the

228
00:07:51,039 --> 00:07:52,879
frame as soon as the bus regains its

229
00:07:52,879 --> 00:07:55,680
excessive level

230
00:07:55,680 --> 00:07:57,440
the second question is what happens to

231
00:07:57,440 --> 00:08:00,240
error counters fortunately as the node

232
00:08:00,240 --> 00:08:02,080
continuously transmissions as soon as

233
00:08:02,080 --> 00:08:04,000
the bus recover to the recessive state

234
00:08:04,000 --> 00:08:05,759
the error counter will be decremented on

235
00:08:05,759 --> 00:08:07,759
successful retransmission in our

236
00:08:07,759 --> 00:08:09,759
experiments even with a fast relay

237
00:08:09,759 --> 00:08:12,319
triggering rate of ons every 100

238
00:08:12,319 --> 00:08:14,800
milliseconds the techno red counters did

239
00:08:14,800 --> 00:08:16,960
not exceed 50 which keeps the node in

240
00:08:16,960 --> 00:08:19,440
the error active state with a lower one

241
00:08:19,440 --> 00:08:20,879
second relay triggering rate the

242
00:08:20,879 --> 00:08:23,520
situation is even better finally the

243
00:08:23,520 --> 00:08:25,440
nodes are not even closer to the error

244
00:08:25,440 --> 00:08:27,039
passive state and there is no chance

245
00:08:27,039 --> 00:08:30,560
that it will go into a bus off state

246
00:08:30,560 --> 00:08:32,000
the third question

247
00:08:32,000 --> 00:08:33,919
is what delays are caused by relays on

248
00:08:33,919 --> 00:08:36,159
legitimate frames well they encounter

249
00:08:36,159 --> 00:08:37,679
only slight delays as you can see in

250
00:08:37,679 --> 00:08:39,440
this block the left plot shows the

251
00:08:39,440 --> 00:08:41,279
arrival time on the left channel which

252
00:08:41,279 --> 00:08:43,200
is the source of the frame and the right

253
00:08:43,200 --> 00:08:45,279
plot shows the arrival rate on the right

254
00:08:45,279 --> 00:08:46,240
channel where the frames are

255
00:08:46,240 --> 00:08:48,640
retransmitted you can see that only

256
00:08:48,640 --> 00:08:51,440
several of the 30 000 frames in these

257
00:08:51,440 --> 00:08:53,120
experiments have delays of 10

258
00:08:53,120 --> 00:08:55,120
milliseconds finally the histogram

259
00:08:55,120 --> 00:08:56,800
distribution shows that the average

260
00:08:56,800 --> 00:08:58,800
arrival time is mostly unchanged on the

261
00:08:58,800 --> 00:09:01,439
two channels

262
00:09:01,519 --> 00:09:04,080
our second testbed takes advantage of an

263
00:09:04,080 --> 00:09:06,000
existing simulation from the canoe too

264
00:09:06,000 --> 00:09:07,839
the canoe tool is an industry standard

265
00:09:07,839 --> 00:09:09,839
tool and notably this simulation

266
00:09:09,839 --> 00:09:11,519
environment was previously used more

267
00:09:11,519 --> 00:09:13,519
than a decade ago to perform some of the

268
00:09:13,519 --> 00:09:16,160
first reported attacks on the can bus

269
00:09:16,160 --> 00:09:18,720
in the simulation we have five can ids

270
00:09:18,720 --> 00:09:20,880
responsible for various engine gearbox

271
00:09:20,880 --> 00:09:23,279
and abs functions

272
00:09:23,279 --> 00:09:25,519
you can see that when a ds takes place

273
00:09:25,519 --> 00:09:27,760
communication is completely lost with

274
00:09:27,760 --> 00:09:29,839
500 milliseconds load balancing the

275
00:09:29,839 --> 00:09:31,680
signals recover and although there are

276
00:09:31,680 --> 00:09:33,519
visible distortions the car remains

277
00:09:33,519 --> 00:09:35,360
functional in our simulation

278
00:09:35,360 --> 00:09:38,000
finally at 50 millisecond load balancing

279
00:09:38,000 --> 00:09:39,680
there is no visible distortion of the

280
00:09:39,680 --> 00:09:41,360
signals

281
00:09:41,360 --> 00:09:43,120
here is some action

282
00:09:43,120 --> 00:09:45,120
you can see that with the relay triggers

283
00:09:45,120 --> 00:09:46,720
the signals which were previously lost

284
00:09:46,720 --> 00:09:48,800
now recover the distortions are still

285
00:09:48,800 --> 00:09:50,399
visible

286
00:09:50,399 --> 00:09:51,519
next

287
00:09:51,519 --> 00:09:54,399
with a faster relay rate the signals

288
00:09:54,399 --> 00:09:56,240
will start to look almost perfect and

289
00:09:56,240 --> 00:09:59,839
there are no visible distortions

290
00:10:00,080 --> 00:10:01,920
this is mostly what we have tested so

291
00:10:01,920 --> 00:10:04,240
far and there is obvious some room for

292
00:10:04,240 --> 00:10:06,720
improvements for example we can use much

293
00:10:06,720 --> 00:10:08,880
faster solid state relate that have an

294
00:10:08,880 --> 00:10:11,200
operation time of under one millisecond

295
00:10:11,200 --> 00:10:13,440
we can also use more relays on the bus

296
00:10:13,440 --> 00:10:15,360
but care must be taken since wiring may

297
00:10:15,360 --> 00:10:16,959
become prohibitive and the number of

298
00:10:16,959 --> 00:10:19,519
placements grows exponentially also more

299
00:10:19,519 --> 00:10:20,959
complex scenarios with multiple

300
00:10:20,959 --> 00:10:23,120
adversaries may be considered so far we

301
00:10:23,120 --> 00:10:24,959
used only one adversary in our work

302
00:10:24,959 --> 00:10:27,120
which we assume to be realistic for in

303
00:10:27,120 --> 00:10:28,959
vehicle networks but more adversaries

304
00:10:28,959 --> 00:10:31,600
may be considered as well

305
00:10:31,600 --> 00:10:34,240
as a conclusion our work introduces bus

306
00:10:34,240 --> 00:10:36,079
generation a double relay resistor

307
00:10:36,079 --> 00:10:37,760
structure that allows dynamic

308
00:10:37,760 --> 00:10:40,000
architectural changes please note that

309
00:10:40,000 --> 00:10:42,480
we do not change the bus topology of cam

310
00:10:42,480 --> 00:10:44,480
we just split the bus into two or more

311
00:10:44,480 --> 00:10:46,480
sub buses that are perfectly compliant

312
00:10:46,480 --> 00:10:48,399
to the canned standard we do some

313
00:10:48,399 --> 00:10:50,240
architectural changes but we try to do

314
00:10:50,240 --> 00:10:52,160
them in a creative way we try to think

315
00:10:52,160 --> 00:10:54,560
differently about can buses and rethink

316
00:10:54,560 --> 00:10:56,640
them for modern security needs

317
00:10:56,640 --> 00:10:59,360
retrofitting is a key aspect of our work

318
00:10:59,360 --> 00:11:02,240
remember those car lines gps navigations

319
00:11:02,240 --> 00:11:04,000
or android head units that can add

320
00:11:04,000 --> 00:11:06,640
modern functionalities to old cars based

321
00:11:06,640 --> 00:11:08,320
on the slightly modified can bus

322
00:11:08,320 --> 00:11:10,640
architecture from this world we set room

323
00:11:10,640 --> 00:11:12,399
for intruder localization and more

324
00:11:12,399 --> 00:11:14,480
important for intruder isolation which

325
00:11:14,480 --> 00:11:17,200
was never addressed before

326
00:11:17,200 --> 00:11:19,279
thank you very much for listening and if

327
00:11:19,279 --> 00:11:21,120
you have questions please drop me an

328
00:11:21,120 --> 00:11:22,720
email

329
00:11:22,720 --> 00:11:25,720
bye

330
00:11:33,040 --> 00:11:35,120
you

