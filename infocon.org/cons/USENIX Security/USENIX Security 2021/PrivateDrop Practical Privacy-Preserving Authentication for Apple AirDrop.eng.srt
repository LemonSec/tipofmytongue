1
00:00:08,880 --> 00:00:10,800
hello and welcome everyone

2
00:00:10,800 --> 00:00:12,559
today we are going to present our work

3
00:00:12,559 --> 00:00:14,559
on private drop a practical privacy

4
00:00:14,559 --> 00:00:16,560
preserving authentication protocol for

5
00:00:16,560 --> 00:00:18,880
apple airdrop we are a team from the

6
00:00:18,880 --> 00:00:20,640
cryptography and privacy engineering

7
00:00:20,640 --> 00:00:22,400
group and the secure mobile networking

8
00:00:22,400 --> 00:00:25,279
lab a technical university of darmstadt

9
00:00:25,279 --> 00:00:26,720
this work was a very fruitful

10
00:00:26,720 --> 00:00:28,560
collaboration with my colleagues alex

11
00:00:28,560 --> 00:00:30,880
matthias thomas in question who's also

12
00:00:30,880 --> 00:00:33,840
giving this talk together with me

13
00:00:33,840 --> 00:00:35,280
so what are we going to cover in this

14
00:00:35,280 --> 00:00:37,280
talk we will start with a brief

15
00:00:37,280 --> 00:00:39,200
introduction into the apple airdrop file

16
00:00:39,200 --> 00:00:41,360
sharing service and discuss the design

17
00:00:41,360 --> 00:00:43,200
issue in the authentication handshake

18
00:00:43,200 --> 00:00:46,160
that compromises its user's privacy

19
00:00:46,160 --> 00:00:47,840
second we will present a privacy

20
00:00:47,840 --> 00:00:49,520
preserving drop-in replacement for the

21
00:00:49,520 --> 00:00:51,760
adword protocol that we call private

22
00:00:51,760 --> 00:00:53,840
drop and which is based on private set

23
00:00:53,840 --> 00:00:55,760
intersection

24
00:00:55,760 --> 00:00:57,440
finally we will show results from our

25
00:00:57,440 --> 00:00:59,440
performance evaluation which

26
00:00:59,440 --> 00:01:01,440
demonstrates that our native prototype

27
00:01:01,440 --> 00:01:03,520
implementation for the mac os and ios

28
00:01:03,520 --> 00:01:05,680
operating systems maintains an excellent

29
00:01:05,680 --> 00:01:07,200
user experience with an online

30
00:01:07,200 --> 00:01:08,960
authentication delay of less than one

31
00:01:08,960 --> 00:01:11,960
second

32
00:01:12,080 --> 00:01:14,080
airdrop is apple's file sharing service

33
00:01:14,080 --> 00:01:15,600
that is integrated into their major

34
00:01:15,600 --> 00:01:17,600
product lines including iphones and mac

35
00:01:17,600 --> 00:01:19,680
computers and it has been around for

36
00:01:19,680 --> 00:01:21,360
about seven years

37
00:01:21,360 --> 00:01:23,200
airdrop runs over wi-fi or more

38
00:01:23,200 --> 00:01:25,360
specifically a proprietary wifi-based

39
00:01:25,360 --> 00:01:27,360
link layer protocol called apple

40
00:01:27,360 --> 00:01:29,200
wireless diplink

41
00:01:29,200 --> 00:01:31,040
when discovering nearby devices that it

42
00:01:31,040 --> 00:01:33,280
can show to the user airdrop conducts an

43
00:01:33,280 --> 00:01:35,040
authentication handshake during which

44
00:01:35,040 --> 00:01:36,799
the two parties a sender and the

45
00:01:36,799 --> 00:01:38,560
receiver device would like to find out

46
00:01:38,560 --> 00:01:41,280
whether or not their mutual contacts

47
00:01:41,280 --> 00:01:42,799
because well you typically want to send

48
00:01:42,799 --> 00:01:44,000
your personal pictures or other

49
00:01:44,000 --> 00:01:46,079
sensitive files only to people you

50
00:01:46,079 --> 00:01:47,600
already know

51
00:01:47,600 --> 00:01:49,360
and here's how it works

52
00:01:49,360 --> 00:01:51,200
the two devices will set up a tls

53
00:01:51,200 --> 00:01:52,640
connection using client and server

54
00:01:52,640 --> 00:01:53,840
certificates

55
00:01:53,840 --> 00:01:55,600
via this connection the sender sends an

56
00:01:55,600 --> 00:01:57,920
http discover message that includes a

57
00:01:57,920 --> 00:02:00,479
validation record the validation record

58
00:02:00,479 --> 00:02:01,840
is essentially an apple signed

59
00:02:01,840 --> 00:02:04,159
certificate that contains hashes of the

60
00:02:04,159 --> 00:02:06,399
user's contact identifiers

61
00:02:06,399 --> 00:02:07,759
these are phone numbers and email

62
00:02:07,759 --> 00:02:09,520
addresses that the user has registered

63
00:02:09,520 --> 00:02:11,680
with apple during the account setup and

64
00:02:11,680 --> 00:02:12,959
that have gone through an ownership

65
00:02:12,959 --> 00:02:15,200
verification process so something like

66
00:02:15,200 --> 00:02:18,640
receiving an authentication code via sms

67
00:02:18,640 --> 00:02:20,160
this first step of the protocol

68
00:02:20,160 --> 00:02:22,400
semantically translates to i want to

69
00:02:22,400 --> 00:02:24,720
send something to a nearby device so i

70
00:02:24,720 --> 00:02:28,000
first tell everyone who i am

71
00:02:28,000 --> 00:02:29,680
then when receiving the validation

72
00:02:29,680 --> 00:02:31,760
record the receiver will first check

73
00:02:31,760 --> 00:02:34,239
that both the tls certificate and the

74
00:02:34,239 --> 00:02:36,080
validation record are cryptographically

75
00:02:36,080 --> 00:02:38,640
valid and belong together

76
00:02:38,640 --> 00:02:40,400
then the receiver checks whether any of

77
00:02:40,400 --> 00:02:42,239
the hash context identifiers from the

78
00:02:42,239 --> 00:02:44,640
validation record are in its own local

79
00:02:44,640 --> 00:02:45,760
address book

80
00:02:45,760 --> 00:02:47,360
if that's the case that means that the

81
00:02:47,360 --> 00:02:49,360
receiver knows the sender and the

82
00:02:49,360 --> 00:02:51,120
receiver will send its own validation

83
00:02:51,120 --> 00:02:53,280
record back to the sender

84
00:02:53,280 --> 00:02:55,040
the sender in turn will validate the

85
00:02:55,040 --> 00:02:57,360
certificates in the same way and decide

86
00:02:57,360 --> 00:02:59,599
whether or not it knows the receiver if

87
00:02:59,599 --> 00:03:01,680
yes the device will show a user icon in

88
00:03:01,680 --> 00:03:03,920
the sharing menu using information from

89
00:03:03,920 --> 00:03:05,599
its local address book

90
00:03:05,599 --> 00:03:07,200
finally the user can decide who they

91
00:03:07,200 --> 00:03:10,399
want to send the file to

92
00:03:10,959 --> 00:03:12,879
so what can go wrong with such a rather

93
00:03:12,879 --> 00:03:15,519
simple authentication protocol

94
00:03:15,519 --> 00:03:17,680
first of all we realized that airdrop

95
00:03:17,680 --> 00:03:19,680
uses hashing as a means for obfuscating

96
00:03:19,680 --> 00:03:21,120
the clear text of phone numbers and

97
00:03:21,120 --> 00:03:22,720
email addresses

98
00:03:22,720 --> 00:03:24,239
since the input space is more than

99
00:03:24,239 --> 00:03:26,239
predictable it is rather trivial to

100
00:03:26,239 --> 00:03:28,239
recover the pre-images via brute force

101
00:03:28,239 --> 00:03:30,879
or dictionary attacks

102
00:03:30,879 --> 00:03:33,040
the second issue is a bit more subtle

103
00:03:33,040 --> 00:03:34,400
and lies in the semantics of the

104
00:03:34,400 --> 00:03:36,640
protocol currently the receiver will

105
00:03:36,640 --> 00:03:38,720
share its contact identifiers if it

106
00:03:38,720 --> 00:03:40,959
determines that it knows the sender

107
00:03:40,959 --> 00:03:42,799
a well-known person such as the boss of

108
00:03:42,799 --> 00:03:44,720
a company could exploit this to extract

109
00:03:44,720 --> 00:03:46,400
personal contact details from the

110
00:03:46,400 --> 00:03:48,879
employees

111
00:03:49,680 --> 00:03:50,959
we've also shown that both

112
00:03:50,959 --> 00:03:52,959
vulnerabilities are easily exploitable

113
00:03:52,959 --> 00:03:55,280
in practice we implemented a proof of

114
00:03:55,280 --> 00:03:56,959
concept that makes use of an optimized

115
00:03:56,959 --> 00:03:59,120
rainbow table construction that is able

116
00:03:59,120 --> 00:04:00,720
to recover hashed phone numbers in a

117
00:04:00,720 --> 00:04:02,640
matter of milliseconds

118
00:04:02,640 --> 00:04:04,720
hardware-wise wi-fi capable device is

119
00:04:04,720 --> 00:04:06,720
sufficient and the attacker only has to

120
00:04:06,720 --> 00:04:08,640
wait until a nearby target opens the

121
00:04:08,640 --> 00:04:10,799
sharing menu on their iphone to

122
00:04:10,799 --> 00:04:12,080
immediately get hold of their phone

123
00:04:12,080 --> 00:04:14,640
number

124
00:04:14,640 --> 00:04:16,399
now i want to hand over to christian who

125
00:04:16,399 --> 00:04:18,160
is going to present our solution to the

126
00:04:18,160 --> 00:04:19,759
problem

127
00:04:19,759 --> 00:04:22,000
thanks milan now let's take a look at

128
00:04:22,000 --> 00:04:24,720
our design to provide privacy preserving

129
00:04:24,720 --> 00:04:28,080
mutual authentication for apple airdrop

130
00:04:28,080 --> 00:04:30,160
for our solution private drop we have

131
00:04:30,160 --> 00:04:33,120
two main privacy requirements

132
00:04:33,120 --> 00:04:35,040
first we want to disclose contact

133
00:04:35,040 --> 00:04:37,680
identifiers only if both parties are

134
00:04:37,680 --> 00:04:40,240
mutual contacts and second we want to

135
00:04:40,240 --> 00:04:42,800
disclose only those contact identifiers

136
00:04:42,800 --> 00:04:45,280
that the other party already knows to

137
00:04:45,280 --> 00:04:47,360
prevent receiver leakage

138
00:04:47,360 --> 00:04:49,120
additionally we have to keep the

139
00:04:49,120 --> 00:04:51,280
overhead low since we operate on mobile

140
00:04:51,280 --> 00:04:53,759
devices the authentication must work in

141
00:04:53,759 --> 00:04:56,160
offline scenarios and of course we have

142
00:04:56,160 --> 00:04:57,919
to consider that users might act

143
00:04:57,919 --> 00:04:59,600
maliciously

144
00:04:59,600 --> 00:05:01,840
in the following i will explain how we

145
00:05:01,840 --> 00:05:03,600
fulfill all these requirements with a

146
00:05:03,600 --> 00:05:05,199
technique called private set

147
00:05:05,199 --> 00:05:07,039
intersection

148
00:05:07,039 --> 00:05:09,360
private set intersection protocols psi

149
00:05:09,360 --> 00:05:11,680
in short are cryptographic protocols

150
00:05:11,680 --> 00:05:13,840
that allow two parties to compute the

151
00:05:13,840 --> 00:05:16,080
intersection of their input sets without

152
00:05:16,080 --> 00:05:17,919
disclosing any data outside of the

153
00:05:17,919 --> 00:05:19,440
intersection

154
00:05:19,440 --> 00:05:21,840
for example the airdrop sender can input

155
00:05:21,840 --> 00:05:24,080
their contact identifiers and the

156
00:05:24,080 --> 00:05:26,000
airdrop receiver can input the address

157
00:05:26,000 --> 00:05:28,240
book to determine whether the receiver

158
00:05:28,240 --> 00:05:30,560
knows the sender which is the case for

159
00:05:30,560 --> 00:05:33,520
non-empty intersection

160
00:05:33,520 --> 00:05:35,919
a straightforward application of psi for

161
00:05:35,919 --> 00:05:38,800
airdrop could therefore work as follows

162
00:05:38,800 --> 00:05:40,720
and the first step we would have the

163
00:05:40,720 --> 00:05:43,280
sender input their ids and the receiver

164
00:05:43,280 --> 00:05:45,919
the address book such that the receiver

165
00:05:45,919 --> 00:05:47,039
can say

166
00:05:47,039 --> 00:05:50,160
i know the sender or a board

167
00:05:50,160 --> 00:05:52,639
then we would run psi with the rows

168
00:05:52,639 --> 00:05:56,000
reversed such that the sender can say i

169
00:05:56,000 --> 00:05:58,800
know the receiver or a board

170
00:05:58,800 --> 00:06:01,440
however there are two issues the first

171
00:06:01,440 --> 00:06:03,440
is that a malicious receiver not

172
00:06:03,440 --> 00:06:05,759
necessarily aborts if the intersection

173
00:06:05,759 --> 00:06:08,080
in the first step was empty and can try

174
00:06:08,080 --> 00:06:09,919
to fool the sender by using widely

175
00:06:09,919 --> 00:06:11,759
popular phone numbers instead of the own

176
00:06:11,759 --> 00:06:14,720
ones for example an emergency number

177
00:06:14,720 --> 00:06:16,400
that the sender has stored with high

178
00:06:16,400 --> 00:06:18,080
probability

179
00:06:18,080 --> 00:06:20,639
the second problem is that the

180
00:06:20,639 --> 00:06:22,720
computation complexity of the online

181
00:06:22,720 --> 00:06:25,120
phase of the psi protocol here mainly

182
00:06:25,120 --> 00:06:27,440
depends on the size of the address book

183
00:06:27,440 --> 00:06:29,520
which is usually much larger than the

184
00:06:29,520 --> 00:06:33,199
set of own contact identifiers

185
00:06:33,199 --> 00:06:35,280
we therefore propose to slightly change

186
00:06:35,280 --> 00:06:36,720
the semantics

187
00:06:36,720 --> 00:06:39,120
for this we exactly swap the inputs

188
00:06:39,120 --> 00:06:41,199
provided by each of the parties

189
00:06:41,199 --> 00:06:43,360
this way in the first execution

190
00:06:43,360 --> 00:06:45,120
receivers only learn whether they are

191
00:06:45,120 --> 00:06:47,120
known by the sender and then have to

192
00:06:47,120 --> 00:06:50,000
prove that they know the sender

193
00:06:50,000 --> 00:06:52,080
this change also has the nice benefit

194
00:06:52,080 --> 00:06:54,560
that the online computation complexity

195
00:06:54,560 --> 00:06:57,199
of psi now mainly depends on the smaller

196
00:06:57,199 --> 00:06:59,599
input set which we assume to be at most

197
00:06:59,599 --> 00:07:01,599
of size 10.

198
00:07:01,599 --> 00:07:04,240
once both protocol executions are done

199
00:07:04,240 --> 00:07:06,080
the two parties can safely disclose

200
00:07:06,080 --> 00:07:08,160
their identifiers in later steps of the

201
00:07:08,160 --> 00:07:10,720
outro protocol as they are known by the

202
00:07:10,720 --> 00:07:13,919
respective other party anyway

203
00:07:13,919 --> 00:07:15,680
when designing and implementing the

204
00:07:15,680 --> 00:07:17,599
details of private shop we had to

205
00:07:17,599 --> 00:07:19,919
overcome a number of challenges

206
00:07:19,919 --> 00:07:22,639
first we had to choose a psi protocol

207
00:07:22,639 --> 00:07:24,639
that is efficient and secure against

208
00:07:24,639 --> 00:07:27,199
malicious users who tried to actively

209
00:07:27,199 --> 00:07:29,039
cheat on the protocol

210
00:07:29,039 --> 00:07:31,360
then we had to consider the case that

211
00:07:31,360 --> 00:07:33,759
parties lie about their actual inputs

212
00:07:33,759 --> 00:07:35,520
which cannot be prevented even by a

213
00:07:35,520 --> 00:07:38,800
maliciously secure psi

214
00:07:38,800 --> 00:07:40,880
once these challenges were solved we

215
00:07:40,880 --> 00:07:43,440
also had to tightly integrate psi into

216
00:07:43,440 --> 00:07:45,440
the airdrop protocol flow while

217
00:07:45,440 --> 00:07:47,440
maintaining backwards compatibility with

218
00:07:47,440 --> 00:07:49,840
the original airdrop to increase chances

219
00:07:49,840 --> 00:07:51,919
of adoption by apple

220
00:07:51,919 --> 00:07:54,879
also for our prototype implementations

221
00:07:54,879 --> 00:07:57,919
on real ios and mac os devices we first

222
00:07:57,919 --> 00:08:00,639
had to come up with a native open source

223
00:08:00,639 --> 00:08:02,479
implementation of the original airdrop

224
00:08:02,479 --> 00:08:05,039
protocol as well as our secure private

225
00:08:05,039 --> 00:08:07,280
drop alternative

226
00:08:07,280 --> 00:08:09,520
i will now detail the protocol selection

227
00:08:09,520 --> 00:08:11,840
process and given high level overview

228
00:08:11,840 --> 00:08:14,080
over the individual steps and some of

229
00:08:14,080 --> 00:08:17,120
our optimizations

230
00:08:17,120 --> 00:08:18,879
when looking at the psi

231
00:08:18,879 --> 00:08:20,960
literature there are very efficient

232
00:08:20,960 --> 00:08:24,160
protocols based on oblivious transfer

233
00:08:24,160 --> 00:08:26,000
specialized protocols for exactly the

234
00:08:26,000 --> 00:08:29,039
use case of unbalanced input set sizes

235
00:08:29,039 --> 00:08:31,199
and simple public key crypto based

236
00:08:31,199 --> 00:08:33,200
protocols that have been proposed

237
00:08:33,200 --> 00:08:36,399
proposed since the 1980s

238
00:08:36,399 --> 00:08:38,839
however protocols from the first two

239
00:08:38,839 --> 00:08:41,200
categories gain their performance mainly

240
00:08:41,200 --> 00:08:43,679
from shifting communication overhead to

241
00:08:43,679 --> 00:08:46,080
an input independent setup phase which

242
00:08:46,080 --> 00:08:48,320
is not suitable for our use case where

243
00:08:48,320 --> 00:08:50,320
devices meet ad hoc

244
00:08:50,320 --> 00:08:52,800
also some of them rely on advanced

245
00:08:52,800 --> 00:08:55,120
cryptographic primitives for which no

246
00:08:55,120 --> 00:08:57,839
industry create implementations exist or

247
00:08:57,839 --> 00:08:59,600
have assumptions about non-cooling

248
00:08:59,600 --> 00:09:00,720
servers

249
00:09:00,720 --> 00:09:03,600
therefore we choose to go with a simple

250
00:09:03,600 --> 00:09:05,920
maliciously secure public key-based

251
00:09:05,920 --> 00:09:08,240
protocol that for comparatively small

252
00:09:08,240 --> 00:09:09,760
input set sizes

253
00:09:09,760 --> 00:09:11,600
can be efficiently implemented using

254
00:09:11,600 --> 00:09:15,279
standard elliptic curve libraries

255
00:09:15,279 --> 00:09:18,160
for the first psi execution in private

256
00:09:18,160 --> 00:09:20,839
drop this protocol informally works as

257
00:09:20,839 --> 00:09:24,160
follows we introduce a pre-computation

258
00:09:24,160 --> 00:09:25,680
phase where the

259
00:09:25,680 --> 00:09:28,240
sender first prepares reusable

260
00:09:28,240 --> 00:09:31,040
encryptions of all address book entry cj

261
00:09:31,040 --> 00:09:33,519
under a secret key k

262
00:09:33,519 --> 00:09:35,920
on the other side the receiver likewise

263
00:09:35,920 --> 00:09:38,560
prepares encryptions of their ids under

264
00:09:38,560 --> 00:09:40,959
secret keys l4i

265
00:09:40,959 --> 00:09:43,200
then in the online phase the receiver

266
00:09:43,200 --> 00:09:45,519
transfers the encrypted ids y to the

267
00:09:45,519 --> 00:09:47,760
sender who additionally encrypts these

268
00:09:47,760 --> 00:09:49,760
under the key k

269
00:09:49,760 --> 00:09:51,680
the sender then returns the double

270
00:09:51,680 --> 00:09:54,240
encrypted value set together with the

271
00:09:54,240 --> 00:09:56,560
own encrypted address book entries u in

272
00:09:56,560 --> 00:09:58,080
random order

273
00:09:58,080 --> 00:09:59,920
the receiver can then remove the own

274
00:09:59,920 --> 00:10:02,000
alpha keys from set to determine the

275
00:10:02,000 --> 00:10:03,839
intersection by comparing address book

276
00:10:03,839 --> 00:10:06,320
entries with contact identifiers under

277
00:10:06,320 --> 00:10:08,320
the key k

278
00:10:08,320 --> 00:10:10,800
in order to prevent users

279
00:10:10,800 --> 00:10:13,519
from lying about their contact

280
00:10:13,519 --> 00:10:15,839
identifiers to cause fake matches we

281
00:10:15,839 --> 00:10:17,440
additionally propose to use signed

282
00:10:17,440 --> 00:10:19,200
inputs in the protocol

283
00:10:19,200 --> 00:10:22,000
for this we suggest to leverage apple's

284
00:10:22,000 --> 00:10:25,040
existing ca infrastructure to certify

285
00:10:25,040 --> 00:10:26,880
the authenticity of the encrypted

286
00:10:26,880 --> 00:10:29,040
contact identifiers y

287
00:10:29,040 --> 00:10:31,040
these signatures can then be transferred

288
00:10:31,040 --> 00:10:34,079
as part of the psi protocol and be

289
00:10:34,079 --> 00:10:36,079
verified by the sender before proceeding

290
00:10:36,079 --> 00:10:37,600
any further

291
00:10:37,600 --> 00:10:41,519
with this quick overview back to milan

292
00:10:41,519 --> 00:10:43,760
thanks christian now it's time to show

293
00:10:43,760 --> 00:10:45,600
how well our new protocol performs in

294
00:10:45,600 --> 00:10:46,560
practice

295
00:10:46,560 --> 00:10:48,079
for this we implemented a native

296
00:10:48,079 --> 00:10:50,240
prototype of private drop for mac os and

297
00:10:50,240 --> 00:10:52,240
ios written in swift

298
00:10:52,240 --> 00:10:53,760
you can see here the authentication

299
00:10:53,760 --> 00:10:55,680
delay of private drop depending on the

300
00:10:55,680 --> 00:10:57,600
size of the address book and the number

301
00:10:57,600 --> 00:10:59,680
of owned contact identifiers

302
00:10:59,680 --> 00:11:01,519
in green we show the address baseline

303
00:11:01,519 --> 00:11:03,360
delay which is basically independent of

304
00:11:03,360 --> 00:11:05,279
these set sizes

305
00:11:05,279 --> 00:11:07,279
we can note an expected overhead for

306
00:11:07,279 --> 00:11:09,360
private drop compared to the original

307
00:11:09,360 --> 00:11:11,760
protocol but still we managed to achieve

308
00:11:11,760 --> 00:11:13,680
an authentication delay well below one

309
00:11:13,680 --> 00:11:15,839
second which is considered an immediate

310
00:11:15,839 --> 00:11:18,079
response in human perception

311
00:11:18,079 --> 00:11:19,760
this shows that private drop is ready

312
00:11:19,760 --> 00:11:22,959
for practical deployment

313
00:11:23,120 --> 00:11:25,120
this was private drop a practical

314
00:11:25,120 --> 00:11:26,640
privacy preserving authentication

315
00:11:26,640 --> 00:11:28,560
protocol for airdrop

316
00:11:28,560 --> 00:11:29,839
we published our prototype

317
00:11:29,839 --> 00:11:32,000
implementation and evaluation data on

318
00:11:32,000 --> 00:11:33,279
github

319
00:11:33,279 --> 00:11:34,959
our work has received quite a bit of

320
00:11:34,959 --> 00:11:36,800
national as well as international media

321
00:11:36,800 --> 00:11:38,160
and press coverage

322
00:11:38,160 --> 00:11:40,399
and finally we informed apple about this

323
00:11:40,399 --> 00:11:42,640
issue about two years ago but so far

324
00:11:42,640 --> 00:11:44,000
they have not indicated that they are

325
00:11:44,000 --> 00:11:45,920
working on a solution

326
00:11:45,920 --> 00:11:48,320
this means that as of today apple users

327
00:11:48,320 --> 00:11:51,040
remain vulnerable so we hope that our

328
00:11:51,040 --> 00:11:52,480
solution will find its way into the

329
00:11:52,480 --> 00:11:54,720
apple ecosystem soon thank you for your

330
00:11:54,720 --> 00:11:57,720
attention

