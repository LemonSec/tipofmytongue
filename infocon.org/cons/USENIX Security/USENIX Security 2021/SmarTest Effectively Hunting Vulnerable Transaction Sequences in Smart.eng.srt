1
00:00:09,040 --> 00:00:11,440
hi everyone my name is

2
00:00:11,440 --> 00:00:13,599
from korea university in this

3
00:00:13,599 --> 00:00:15,759
presentation i will talk about our

4
00:00:15,759 --> 00:00:17,640
recent work on automatically finding

5
00:00:17,640 --> 00:00:21,199
vulnerabilities in smart contracts

6
00:00:21,199 --> 00:00:23,519
this is co-worked with zhang jin hong

7
00:00:23,519 --> 00:00:26,479
and hak2o

8
00:00:27,119 --> 00:00:28,960
smart contracts are digital contracts

9
00:00:28,960 --> 00:00:31,359
written in programming languages

10
00:00:31,359 --> 00:00:33,760
smart contracts can be useful in various

11
00:00:33,760 --> 00:00:36,239
domains such as decentralized finance or

12
00:00:36,239 --> 00:00:39,360
full supply chain

13
00:00:39,520 --> 00:00:41,680
users of smart contracts can send

14
00:00:41,680 --> 00:00:45,760
transactions by invoking functions

15
00:00:45,760 --> 00:00:47,280
for example

16
00:00:47,280 --> 00:00:48,879
consider the transfer function

17
00:00:48,879 --> 00:00:52,719
implemented in solid language

18
00:00:52,719 --> 00:00:54,399
as shown in the slide

19
00:00:54,399 --> 00:00:55,920
using this function

20
00:00:55,920 --> 00:00:58,239
our usual x can send some tokens by

21
00:00:58,239 --> 00:01:00,160
invoking the transfer function

22
00:01:00,160 --> 00:01:04,479
and providing proper argument values

23
00:01:04,640 --> 00:01:06,960
for two main reasons ensuring safety of

24
00:01:06,960 --> 00:01:08,560
smart contracts is a critically

25
00:01:08,560 --> 00:01:10,880
important issue

26
00:01:10,880 --> 00:01:13,200
first since the smart contracts are

27
00:01:13,200 --> 00:01:14,479
immutable

28
00:01:14,479 --> 00:01:16,159
boxing smart contracts cannot be

29
00:01:16,159 --> 00:01:18,560
mitigated once smart contracts are

30
00:01:18,560 --> 00:01:21,439
deployed on the blockchain

31
00:01:21,439 --> 00:01:22,479
second

32
00:01:22,479 --> 00:01:24,479
smart contracts typically manipulate

33
00:01:24,479 --> 00:01:28,240
value of data such as digital assets

34
00:01:28,240 --> 00:01:29,360
therefore

35
00:01:29,360 --> 00:01:30,880
even a single glitch can cause

36
00:01:30,880 --> 00:01:33,840
tremendous finance damage

37
00:01:33,840 --> 00:01:34,799
indeed

38
00:01:34,799 --> 00:01:37,200
due to flaws in smart contracts

39
00:01:37,200 --> 00:01:38,960
there have been many large-scale

40
00:01:38,960 --> 00:01:41,200
accidents that caused huge finance

41
00:01:41,200 --> 00:01:43,600
damage

42
00:01:43,759 --> 00:01:45,600
to mitigate safety issues in smart

43
00:01:45,600 --> 00:01:48,159
contracts we propose a new technique for

44
00:01:48,159 --> 00:01:51,200
analyzing safety of smart contracts

45
00:01:51,200 --> 00:01:52,640
specifically

46
00:01:52,640 --> 00:01:54,799
our goal is to find vulnerabilities with

47
00:01:54,799 --> 00:01:56,640
concrete scenarios in terms of

48
00:01:56,640 --> 00:01:59,439
transaction sequences

49
00:01:59,439 --> 00:02:01,680
i will explain our goal with a concrete

50
00:02:01,680 --> 00:02:04,240
example

51
00:02:04,320 --> 00:02:06,880
in this example the line 30 has an

52
00:02:06,880 --> 00:02:10,318
integer underflow vulnerability

53
00:02:10,318 --> 00:02:11,360
however

54
00:02:11,360 --> 00:02:12,879
even though the vulnerability is

55
00:02:12,879 --> 00:02:15,040
reported by analyzers

56
00:02:15,040 --> 00:02:17,280
it would not be easy to understand how

57
00:02:17,280 --> 00:02:20,560
the bug can happen

58
00:02:21,440 --> 00:02:24,480
for example as shown in the slide simply

59
00:02:24,480 --> 00:02:26,239
sending a single transaction after the

60
00:02:26,239 --> 00:02:28,319
deployment will fail to trigger the

61
00:02:28,319 --> 00:02:30,560
underflow

62
00:02:30,560 --> 00:02:33,200
this is because all elements of mapping

63
00:02:33,200 --> 00:02:36,879
variables are initially zeros therefore

64
00:02:36,879 --> 00:02:39,200
when invoking one from function

65
00:02:39,200 --> 00:02:40,879
if a positive number is given to the

66
00:02:40,879 --> 00:02:43,599
second parameter the current expressions

67
00:02:43,599 --> 00:02:49,720
at line 26 and 27 evaluate the false

68
00:02:50,000 --> 00:02:52,879
to trigger the underflow at line 30 as

69
00:02:52,879 --> 00:02:54,400
shown in the slide

70
00:02:54,400 --> 00:02:56,319
we need a transaction sequence of length

71
00:02:56,319 --> 00:02:58,400
four

72
00:02:58,400 --> 00:03:00,239
as we demonstrated

73
00:03:00,239 --> 00:03:01,840
in addition to merely pointing out

74
00:03:01,840 --> 00:03:04,400
vulnerable locations in a contract

75
00:03:04,400 --> 00:03:06,560
we aim to effectively find vulnerable

76
00:03:06,560 --> 00:03:08,319
transaction sequences that can

77
00:03:08,319 --> 00:03:11,518
demonstrate the flaws

78
00:03:12,480 --> 00:03:14,640
finding vulnerable sequences is crucial

79
00:03:14,640 --> 00:03:18,159
for practical smart contract analysis

80
00:03:18,159 --> 00:03:20,239
without sequencing information

81
00:03:20,239 --> 00:03:22,640
developers should manually inspect to

82
00:03:22,640 --> 00:03:24,560
decide whether reported warnings are

83
00:03:24,560 --> 00:03:28,080
true positives or not

84
00:03:28,080 --> 00:03:30,239
this manual investigation is time

85
00:03:30,239 --> 00:03:33,840
consuming and the error prone

86
00:03:34,640 --> 00:03:36,560
the technical challenge is that the

87
00:03:36,560 --> 00:03:38,239
number of possible combinations of

88
00:03:38,239 --> 00:03:40,879
transaction sequences is interactively

89
00:03:40,879 --> 00:03:42,879
large

90
00:03:42,879 --> 00:03:45,280
unfortunately suffering from this

91
00:03:45,280 --> 00:03:47,519
challenge existing symbolization

92
00:03:47,519 --> 00:03:49,040
techniques often fail to find

93
00:03:49,040 --> 00:03:51,200
vulnerabilities that require long

94
00:03:51,200 --> 00:03:54,879
transaction sequences to be found

95
00:03:54,879 --> 00:03:57,120
in this work to effectively find

96
00:03:57,120 --> 00:03:58,959
vulnerable transaction sequences in

97
00:03:58,959 --> 00:04:01,280
smart contracts we propose a new

98
00:04:01,280 --> 00:04:03,599
symbolic execution technique called

99
00:04:03,599 --> 00:04:05,840
smarttest

100
00:04:05,840 --> 00:04:08,000
the key idea of smart test is to guide

101
00:04:08,000 --> 00:04:10,480
symbolic execution with language models

102
00:04:10,480 --> 00:04:12,239
towards passes that are likely to

103
00:04:12,239 --> 00:04:15,360
contain vulnerabilities

104
00:04:15,360 --> 00:04:18,238
specifically in the training phase

105
00:04:18,238 --> 00:04:20,560
we perform unguided symbolic execution

106
00:04:20,560 --> 00:04:23,120
over training contracts

107
00:04:23,120 --> 00:04:25,440
then we collect vulnerable transaction

108
00:04:25,440 --> 00:04:27,600
sequences from the contracts

109
00:04:27,600 --> 00:04:29,759
and learn a probability distribution

110
00:04:29,759 --> 00:04:33,280
over the vulnerable sequences

111
00:04:33,600 --> 00:04:35,919
in the testing phase the symbolic

112
00:04:35,919 --> 00:04:38,479
execution guided by a learned model can

113
00:04:38,479 --> 00:04:40,720
effectively find vulnerabilities for new

114
00:04:40,720 --> 00:04:43,600
contracts by prioritizing sequences that

115
00:04:43,600 --> 00:04:47,040
are likely to be vulnerable

116
00:04:47,600 --> 00:04:50,160
now i will talk about technical details

117
00:04:50,160 --> 00:04:52,080
of learning and testing bases of

118
00:04:52,080 --> 00:04:53,840
smartist

119
00:04:53,840 --> 00:04:56,240
in our work we use the engram language

120
00:04:56,240 --> 00:04:57,919
model

121
00:04:57,919 --> 00:05:00,560
in angular models the probabilities can

122
00:05:00,560 --> 00:05:04,240
be computed by using n-gram counts

123
00:05:04,240 --> 00:05:06,639
therefore the goal of the learning phase

124
00:05:06,639 --> 00:05:09,120
is to construct a training purpose

125
00:05:09,120 --> 00:05:11,360
where we can obtain n-gram counts from

126
00:05:11,360 --> 00:05:12,960
it

127
00:05:12,960 --> 00:05:15,199
the issue is that how to abstract

128
00:05:15,199 --> 00:05:17,280
transaction sequences for effectively

129
00:05:17,280 --> 00:05:21,440
generalizing to unseen new contracts

130
00:05:21,440 --> 00:05:23,199
in the context of solidity smart

131
00:05:23,199 --> 00:05:25,759
contracts our idea is to use type

132
00:05:25,759 --> 00:05:28,160
information

133
00:05:28,160 --> 00:05:31,199
we use this idea because we found that

134
00:05:31,199 --> 00:05:33,039
type information is important for

135
00:05:33,039 --> 00:05:35,600
characterizing behaviors of functions in

136
00:05:35,600 --> 00:05:39,600
solidity smart contracts

137
00:05:39,600 --> 00:05:40,960
for example

138
00:05:40,960 --> 00:05:42,960
given a transaction that involves set

139
00:05:42,960 --> 00:05:45,039
owner function which is designated to a

140
00:05:45,039 --> 00:05:46,800
new owner of a contract

141
00:05:46,800 --> 00:05:49,120
we can attract it to a feature vector

142
00:05:49,120 --> 00:05:50,960
that sets the third and the sixth

143
00:05:50,960 --> 00:05:52,639
elements to one

144
00:05:52,639 --> 00:05:54,400
which means that a variable that has

145
00:05:54,400 --> 00:05:56,880
address type is defined and used in the

146
00:05:56,880 --> 00:05:59,039
transaction

147
00:05:59,039 --> 00:06:01,280
with this abstraction method now we can

148
00:06:01,280 --> 00:06:03,360
construct a training purpose by

149
00:06:03,360 --> 00:06:04,800
abstracting all of the obtained

150
00:06:04,800 --> 00:06:07,840
transaction sequences

151
00:06:08,960 --> 00:06:11,919
now i will explain the testing phase

152
00:06:11,919 --> 00:06:15,360
suppose we have a transaction sequence

153
00:06:15,360 --> 00:06:17,919
first we extract it to a water sequence

154
00:06:17,919 --> 00:06:19,360
in a similar way to the one in the

155
00:06:19,360 --> 00:06:21,520
learning phase

156
00:06:21,520 --> 00:06:23,680
then using the training corpus that we

157
00:06:23,680 --> 00:06:24,720
obtained

158
00:06:24,720 --> 00:06:26,560
we compute the probability of being

159
00:06:26,560 --> 00:06:28,319
vulnerable for the given transition

160
00:06:28,319 --> 00:06:30,639
sequence

161
00:06:30,639 --> 00:06:32,840
finally according to the computed

162
00:06:32,840 --> 00:06:34,880
probabilities we prioritize the

163
00:06:34,880 --> 00:06:36,720
transaction sequences to buy the

164
00:06:36,720 --> 00:06:40,319
symbolic execution procedure

165
00:06:42,000 --> 00:06:45,600
now i will present experimental results

166
00:06:45,600 --> 00:06:47,440
we collected benchmarks with known

167
00:06:47,440 --> 00:06:49,919
vulnerabilities from public data set

168
00:06:49,919 --> 00:06:53,360
such as cv reported contracts

169
00:06:53,360 --> 00:06:56,160
when necessary we constructed our own

170
00:06:56,160 --> 00:06:58,800
benchmarks

171
00:06:58,800 --> 00:07:00,639
we compared the smartest with five

172
00:07:00,639 --> 00:07:02,960
recently developed analyzers that can

173
00:07:02,960 --> 00:07:06,638
generate vulnerable sequences

174
00:07:06,720 --> 00:07:09,039
we use the trigram language model which

175
00:07:09,039 --> 00:07:13,039
was effective enough in our experience

176
00:07:13,039 --> 00:07:15,680
to evaluate the robustness of the models

177
00:07:15,680 --> 00:07:20,160
we performed four-fold cross-validation

178
00:07:20,400 --> 00:07:22,639
as shown in table one and table two we

179
00:07:22,639 --> 00:07:25,039
found that smartest consistently

180
00:07:25,039 --> 00:07:27,680
outperformed factors in terms of

181
00:07:27,680 --> 00:07:30,720
vulnerability finding ability

182
00:07:30,720 --> 00:07:32,880
for example in terms of finding

183
00:07:32,880 --> 00:07:35,520
non-civil vulnerabilities smartists

184
00:07:35,520 --> 00:07:37,919
found about 90 percent out of the sample

185
00:07:37,919 --> 00:07:39,599
cv reports

186
00:07:39,599 --> 00:07:42,479
by contrast missile and manticore

187
00:07:42,479 --> 00:07:47,199
collectively found about 35 percent

188
00:07:47,759 --> 00:07:50,800
in our experiments we found that using

189
00:07:50,800 --> 00:07:52,720
language models significantly improves

190
00:07:52,720 --> 00:07:56,080
the performance of symbolic execution

191
00:07:56,080 --> 00:07:59,759
for example for the cv data set smartest

192
00:07:59,759 --> 00:08:01,599
without language model took about 30

193
00:08:01,599 --> 00:08:06,080
minutes to find about 2200 sequences

194
00:08:06,080 --> 00:08:07,360
in contrast

195
00:08:07,360 --> 00:08:09,520
smartest with the language model took

196
00:08:09,520 --> 00:08:11,680
only about one minute to find the same

197
00:08:11,680 --> 00:08:14,720
number of vulnerable sequences

198
00:08:14,720 --> 00:08:16,960
we also observed a similar trend for the

199
00:08:16,960 --> 00:08:20,479
leaking suicidal data set

200
00:08:20,560 --> 00:08:23,360
finally using smarttest we found seven

201
00:08:23,360 --> 00:08:25,280
critical geology vulnerabilities from

202
00:08:25,280 --> 00:08:27,520
the white contracts which violate the

203
00:08:27,520 --> 00:08:30,240
erc20 standard

204
00:08:30,240 --> 00:08:34,240
we categorize them into two patterns

205
00:08:34,559 --> 00:08:36,399
the first pattern is the case where any

206
00:08:36,399 --> 00:08:38,640
user can have tokens for free due to

207
00:08:38,640 --> 00:08:41,839
mistakenly named constructors

208
00:08:41,839 --> 00:08:44,560
in older versions of solarity a function

209
00:08:44,560 --> 00:08:46,560
whose name equals the name of a contract

210
00:08:46,560 --> 00:08:49,680
is a constructor function

211
00:08:49,680 --> 00:08:52,160
here since the names are different

212
00:08:52,160 --> 00:08:56,000
b token is data constructor function

213
00:08:56,000 --> 00:08:57,360
azure results

214
00:08:57,360 --> 00:08:59,279
bitcoin function can be invoked by

215
00:08:59,279 --> 00:09:02,000
anyone at any time allowing anyone to

216
00:09:02,000 --> 00:09:05,120
have tokens for free

217
00:09:05,120 --> 00:09:07,360
based on the comment aligned to

218
00:09:07,360 --> 00:09:09,600
with conjecture that the developers

219
00:09:09,600 --> 00:09:13,040
mistakenly named the function

220
00:09:13,519 --> 00:09:15,360
the second pattern is a case where

221
00:09:15,360 --> 00:09:17,519
unauthorized users can send the tokens

222
00:09:17,519 --> 00:09:19,680
without restrictions

223
00:09:19,680 --> 00:09:23,360
specifically in the ic20 token contracts

224
00:09:23,360 --> 00:09:25,200
the transfer from functions should be

225
00:09:25,200 --> 00:09:28,399
invoked by authorized users

226
00:09:28,399 --> 00:09:29,519
however

227
00:09:29,519 --> 00:09:31,760
since the red colored part is absent in

228
00:09:31,760 --> 00:09:33,440
the original code

229
00:09:33,440 --> 00:09:35,920
unauthorized users can transfer tokens

230
00:09:35,920 --> 00:09:39,199
without any restrictions

231
00:09:40,000 --> 00:09:42,959
to summarize my talk i presented a new

232
00:09:42,959 --> 00:09:45,040
symbolic execution technique for smart

233
00:09:45,040 --> 00:09:47,120
contracts

234
00:09:47,120 --> 00:09:48,480
specifically

235
00:09:48,480 --> 00:09:50,240
our goal is to effectively find

236
00:09:50,240 --> 00:09:52,399
vulnerable transition sequences in smart

237
00:09:52,399 --> 00:09:53,760
contracts

238
00:09:53,760 --> 00:09:55,920
which is crucial for practical smart

239
00:09:55,920 --> 00:09:58,959
contract analysis

240
00:09:59,120 --> 00:10:01,040
the key idea is to guide a symbolic

241
00:10:01,040 --> 00:10:03,680
execution procedure with language models

242
00:10:03,680 --> 00:10:05,600
towards the paces that are likely to be

243
00:10:05,600 --> 00:10:08,320
vulnerable

244
00:10:08,399 --> 00:10:10,800
the implementation of smart tests and

245
00:10:10,800 --> 00:10:13,200
the benchmarks that we used are publicly

246
00:10:13,200 --> 00:10:15,519
available

247
00:10:15,519 --> 00:10:19,560
thank you for watching this video

