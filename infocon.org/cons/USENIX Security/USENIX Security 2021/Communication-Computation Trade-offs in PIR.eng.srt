1
00:00:08,080 --> 00:00:10,400
hi everyone my name is kevin and today

2
00:00:10,400 --> 00:00:11,840
i'll be talking to you guys about

3
00:00:11,840 --> 00:00:13,840
communication compensation trade-offs in

4
00:00:13,840 --> 00:00:14,960
pir

5
00:00:14,960 --> 00:00:16,239
this is a joint work with many of my

6
00:00:16,239 --> 00:00:17,680
colleagues both at google and at

7
00:00:17,680 --> 00:00:20,800
humboldt university in berlin

8
00:00:20,800 --> 00:00:22,880
all right let's get started so i'll

9
00:00:22,880 --> 00:00:24,480
first tell you guys what is private fish

10
00:00:24,480 --> 00:00:26,240
retrieval or pir for short and then i'll

11
00:00:26,240 --> 00:00:27,680
talk about our three contributions that

12
00:00:27,680 --> 00:00:28,840
we made in our

13
00:00:28,840 --> 00:00:30,880
paper so let's start off with what is

14
00:00:30,880 --> 00:00:32,479
private information retrieval it

15
00:00:32,479 --> 00:00:34,480
considers a very simple setting where

16
00:00:34,480 --> 00:00:36,719
you sort of have a user on the left and

17
00:00:36,719 --> 00:00:38,559
a server on the right and one that holds

18
00:00:38,559 --> 00:00:41,520
a list of let's say any data entries

19
00:00:41,520 --> 00:00:43,600
and what the user wants to do is query

20
00:00:43,600 --> 00:00:46,480
for an index i and sort of receive the

21
00:00:46,480 --> 00:00:48,960
data entry at the if index

22
00:00:48,960 --> 00:00:50,879
so if you sort of do this in plain text

23
00:00:50,879 --> 00:00:53,280
without any sort of privacy guarantees

24
00:00:53,280 --> 00:00:54,960
what happens is that the server is able

25
00:00:54,960 --> 00:00:58,079
to identify which index was downloaded

26
00:00:58,079 --> 00:01:00,239
excuse me and over time

27
00:01:00,239 --> 00:01:02,000
what happens is that

28
00:01:02,000 --> 00:01:04,080
the server is able to maybe view a large

29
00:01:04,080 --> 00:01:06,080
number of queries and get information

30
00:01:06,080 --> 00:01:08,000
about the user it has been shown in in

31
00:01:08,000 --> 00:01:09,520
practical situations that this can

32
00:01:09,520 --> 00:01:11,439
actually reveal information about the

33
00:01:11,439 --> 00:01:14,320
user or the user's intent

34
00:01:14,320 --> 00:01:15,840
in an attempt to sort of solve this

35
00:01:15,840 --> 00:01:16,799
problem

36
00:01:16,799 --> 00:01:18,799
private information retrieval was was

37
00:01:18,799 --> 00:01:21,200
created or invented and sort of the idea

38
00:01:21,200 --> 00:01:22,640
is you know the user still wants to

39
00:01:22,640 --> 00:01:24,159
query for index i

40
00:01:24,159 --> 00:01:25,680
it may do something more complicated

41
00:01:25,680 --> 00:01:27,840
that may include uploading a series of

42
00:01:27,840 --> 00:01:29,360
encryptions and then downloading a

43
00:01:29,360 --> 00:01:31,040
series of decryption of encrypted

44
00:01:31,040 --> 00:01:32,159
ciphertext

45
00:01:32,159 --> 00:01:33,840
and sort of decrypting locally to get

46
00:01:33,840 --> 00:01:35,520
the index bi

47
00:01:35,520 --> 00:01:36,960
but it should be done in such a way that

48
00:01:36,960 --> 00:01:38,640
the server no longer knows what was the

49
00:01:38,640 --> 00:01:40,079
requested index so it can no longer

50
00:01:40,079 --> 00:01:42,240
identify which index ios list was

51
00:01:42,240 --> 00:01:44,000
retrieved

52
00:01:44,000 --> 00:01:45,360
and this is essentially what pir tries

53
00:01:45,360 --> 00:01:46,720
to solve

54
00:01:46,720 --> 00:01:48,479
so when you're trying to construct pir

55
00:01:48,479 --> 00:01:49,360
it turns out there are several

56
00:01:49,360 --> 00:01:50,720
efficiency kind of considerations that

57
00:01:50,720 --> 00:01:52,479
you need to sort of balance

58
00:01:52,479 --> 00:01:54,560
so the first one is communication how

59
00:01:54,560 --> 00:01:56,479
much does the user upload to the server

60
00:01:56,479 --> 00:01:58,719
and download from the server

61
00:01:58,719 --> 00:01:59,920
secondly

62
00:01:59,920 --> 00:02:01,920
there's also server computation

63
00:02:01,920 --> 00:02:03,759
how much work does the server need to do

64
00:02:03,759 --> 00:02:05,600
when it receives these encryptions to

65
00:02:05,600 --> 00:02:07,600
create more encryption or potentially

66
00:02:07,600 --> 00:02:09,360
decrypt and so forth

67
00:02:09,360 --> 00:02:10,800
and simultaneously there's also the

68
00:02:10,800 --> 00:02:12,640
client computation which requires which

69
00:02:12,640 --> 00:02:14,800
is sort of how much time it costs to

70
00:02:14,800 --> 00:02:16,239
sort of create the request and then

71
00:02:16,239 --> 00:02:19,360
process the responses

72
00:02:19,440 --> 00:02:20,879
so what usually happens is that

73
00:02:20,879 --> 00:02:22,480
communication computation it's always a

74
00:02:22,480 --> 00:02:23,520
trade-off

75
00:02:23,520 --> 00:02:25,840
it's never you can never really like

76
00:02:25,840 --> 00:02:27,599
with with the best constructions to date

77
00:02:27,599 --> 00:02:29,280
either you can sort of play with these

78
00:02:29,280 --> 00:02:30,720
knobs and parameters that can either

79
00:02:30,720 --> 00:02:32,400
decrease computation at the cost of

80
00:02:32,400 --> 00:02:34,560
increasing communication or vice versa

81
00:02:34,560 --> 00:02:36,319
and it sort of it sort of becomes this

82
00:02:36,319 --> 00:02:37,840
sort of game of trying to figure out

83
00:02:37,840 --> 00:02:39,360
what the best way

84
00:02:39,360 --> 00:02:40,879
what what's the what how do we try to

85
00:02:40,879 --> 00:02:42,239
what is the best trade-off that we can

86
00:02:42,239 --> 00:02:43,920
achieve and what we're doing in this

87
00:02:43,920 --> 00:02:45,760
work is providing many more tools that

88
00:02:45,760 --> 00:02:47,760
will allow designers or users to be able

89
00:02:47,760 --> 00:02:49,760
to construct the right pir for their

90
00:02:49,760 --> 00:02:52,080
circumstance

91
00:02:52,080 --> 00:02:53,519
so yeah what is the best tradeoff and

92
00:02:53,519 --> 00:02:55,120
the answer is you know we don't there's

93
00:02:55,120 --> 00:02:57,200
never really a good answer it really

94
00:02:57,200 --> 00:02:59,120
depends on the context so for example

95
00:02:59,120 --> 00:03:01,280
what we can typically guarantee is that

96
00:03:01,280 --> 00:03:02,959
client computation is more restricted so

97
00:03:02,959 --> 00:03:04,319
you can imagine like mobile phones

98
00:03:04,319 --> 00:03:06,239
requiring a cloud storage provider so

99
00:03:06,239 --> 00:03:08,319
client competition should be small but

100
00:03:08,319 --> 00:03:09,760
between communication and server

101
00:03:09,760 --> 00:03:11,519
computation

102
00:03:11,519 --> 00:03:14,000
it ends up being it's unclear and it

103
00:03:14,000 --> 00:03:15,760
depends and one way you can do this for

104
00:03:15,760 --> 00:03:17,120
example is to estimate the best tradeoff

105
00:03:17,120 --> 00:03:18,800
using monetary costs like cloud

106
00:03:18,800 --> 00:03:20,400
computing services usually have prices

107
00:03:20,400 --> 00:03:21,760
for communication and compensation and

108
00:03:21,760 --> 00:03:23,200
you can try to compute this and this is

109
00:03:23,200 --> 00:03:25,519
what we do in our paper

110
00:03:25,519 --> 00:03:27,440
but sort of the the point i wanted to

111
00:03:27,440 --> 00:03:28,799
get across is that it's never really

112
00:03:28,799 --> 00:03:30,159
clear what the best trade-off is you can

113
00:03:30,159 --> 00:03:32,000
never say you can always you always want

114
00:03:32,000 --> 00:03:33,440
to drive down communication or you

115
00:03:33,440 --> 00:03:35,120
always want to drive down computation it

116
00:03:35,120 --> 00:03:38,159
really depends on the status

117
00:03:38,159 --> 00:03:40,159
all right so let's go into some uh like

118
00:03:40,159 --> 00:03:42,640
a very simple example of a pir scheme

119
00:03:42,640 --> 00:03:44,239
which ends up being very important is

120
00:03:44,239 --> 00:03:47,360
this homomorphic based encryption of pir

121
00:03:47,360 --> 00:03:48,879
so at a high level what happens is the

122
00:03:48,879 --> 00:03:51,519
user will encrypt homomorphically a

123
00:03:51,519 --> 00:03:53,120
sequence of n bits

124
00:03:53,120 --> 00:03:54,640
it's which is essentially a selection

125
00:03:54,640 --> 00:03:56,480
vector where all the bits are zero

126
00:03:56,480 --> 00:03:58,480
except for the entry for which

127
00:03:58,480 --> 00:04:00,239
the the user wants to retrieve will be a

128
00:04:00,239 --> 00:04:02,239
one so here let's suppose you know you

129
00:04:02,239 --> 00:04:04,239
upload this this selection vector and

130
00:04:04,239 --> 00:04:05,680
then the server will simply use the

131
00:04:05,680 --> 00:04:07,840
homomorphism the encryption to do it to

132
00:04:07,840 --> 00:04:09,200
essentially compute the dot product you

133
00:04:09,200 --> 00:04:11,840
know the first uh encrypted bit times b1

134
00:04:11,840 --> 00:04:13,040
the second encrypted bit times zero and

135
00:04:13,040 --> 00:04:15,040
so forth and then sort of add them all

136
00:04:15,040 --> 00:04:16,320
together and return the result and you

137
00:04:16,320 --> 00:04:18,079
can sort of see that as long as the user

138
00:04:18,079 --> 00:04:20,079
uploads the encryption correctly

139
00:04:20,079 --> 00:04:21,759
the user will essentially download an

140
00:04:21,759 --> 00:04:23,199
encryption of the it index that they

141
00:04:23,199 --> 00:04:25,040
wanted

142
00:04:25,040 --> 00:04:26,720
but this requires sort of uploading and

143
00:04:26,720 --> 00:04:28,880
ciphertext and there has been ideas to

144
00:04:28,880 --> 00:04:31,440
sort of uh decrease the cost of

145
00:04:31,440 --> 00:04:34,000
of of uploads in pir so an idea of this

146
00:04:34,000 --> 00:04:35,759
is recursion where sort of you take the

147
00:04:35,759 --> 00:04:37,680
database and you sort of place it into a

148
00:04:37,680 --> 00:04:39,759
square in two dimensions

149
00:04:39,759 --> 00:04:42,080
and now all the user has to do is upload

150
00:04:42,080 --> 00:04:44,479
two sets of square root of vectors

151
00:04:44,479 --> 00:04:46,639
in encrypted versions obviously but in

152
00:04:46,639 --> 00:04:48,320
such a way that you know one set of

153
00:04:48,320 --> 00:04:50,880
vectors denotes which which column the

154
00:04:50,880 --> 00:04:52,240
entry is in and the other one downloads

155
00:04:52,240 --> 00:04:54,160
which row is in and essentially this

156
00:04:54,160 --> 00:04:55,680
would allow you to decrease the the

157
00:04:55,680 --> 00:04:58,000
upload cost

158
00:04:58,000 --> 00:05:00,479
all right so um with this sort of basic

159
00:05:00,479 --> 00:05:01,600
concepts out of the way let's get to

160
00:05:01,600 --> 00:05:03,039
sort of the main results of our paper

161
00:05:03,039 --> 00:05:05,120
our main contributions so in our paper

162
00:05:05,120 --> 00:05:06,560
we introduced something called malpear

163
00:05:06,560 --> 00:05:08,400
which is a new peer construction and

164
00:05:08,400 --> 00:05:10,400
what we do is we start off from a prior

165
00:05:10,400 --> 00:05:12,160
implementation of pir called seal peer

166
00:05:12,160 --> 00:05:16,240
by angel chen lane and seti in 2018.

167
00:05:16,240 --> 00:05:18,400
and what we're able to do is is by by

168
00:05:18,400 --> 00:05:20,000
implementing several optimizations we're

169
00:05:20,000 --> 00:05:22,560
able to improve the upload by up to 75

170
00:05:22,560 --> 00:05:24,560
and the download by up to 80 so the

171
00:05:24,560 --> 00:05:26,400
communication we significantly decrease

172
00:05:26,400 --> 00:05:27,759
the communication

173
00:05:27,759 --> 00:05:29,600
and this all comes in exchange for very

174
00:05:29,600 --> 00:05:31,680
minimal computational increases so for

175
00:05:31,680 --> 00:05:33,280
example if you're using monetary costs

176
00:05:33,280 --> 00:05:34,720
it ends up being huge savings and

177
00:05:34,720 --> 00:05:37,039
monetary costs

178
00:05:37,039 --> 00:05:38,560
to sort of achieve

179
00:05:38,560 --> 00:05:40,320
this new construction we implemented

180
00:05:40,320 --> 00:05:42,479
five new optimizations

181
00:05:42,479 --> 00:05:44,880
the first was rather than using public

182
00:05:44,880 --> 00:05:46,320
key encryption on the on the client side

183
00:05:46,320 --> 00:05:48,000
that has was done in the past we end up

184
00:05:48,000 --> 00:05:49,759
using secret key encryption

185
00:05:49,759 --> 00:05:51,440
and because we use secret key encryption

186
00:05:51,440 --> 00:05:53,199
we can analyze the structure of the

187
00:05:53,199 --> 00:05:55,199
encryption and essentially replace a

188
00:05:55,199 --> 00:05:57,440
very long piece of randomness in the in

189
00:05:57,440 --> 00:05:59,360
in the in the encryption with what what

190
00:05:59,360 --> 00:06:00,960
happens with the mouse to be a very

191
00:06:00,960 --> 00:06:03,280
short prgc

192
00:06:03,280 --> 00:06:05,360
our third optimization was sort of

193
00:06:05,360 --> 00:06:07,199
when the server is going to

194
00:06:07,199 --> 00:06:08,960
send back downloaded separate text

195
00:06:08,960 --> 00:06:11,039
rather than sending them back as is what

196
00:06:11,039 --> 00:06:12,560
what what the server does essentially it

197
00:06:12,560 --> 00:06:14,160
does it employs a technique called

198
00:06:14,160 --> 00:06:15,520
modular switching which essentially

199
00:06:15,520 --> 00:06:17,120
decompresses the download ciphertext

200
00:06:17,120 --> 00:06:18,800
before being sent back to the client and

201
00:06:18,800 --> 00:06:21,840
this helps compress the download costs

202
00:06:21,840 --> 00:06:22,720
fourth

203
00:06:22,720 --> 00:06:24,160
something i'll explain later is an

204
00:06:24,160 --> 00:06:26,400
improved oblivious expansion algorithm

205
00:06:26,400 --> 00:06:28,479
and then last but not least our new

206
00:06:28,479 --> 00:06:29,840
construction is able to leverage

207
00:06:29,840 --> 00:06:32,000
multiple homomorphism which was not done

208
00:06:32,000 --> 00:06:33,440
previously

209
00:06:33,440 --> 00:06:34,960
so due to lack of time i'm only going to

210
00:06:34,960 --> 00:06:37,199
explain the two bolded optimizations but

211
00:06:37,199 --> 00:06:38,800
i do encourage all

212
00:06:38,800 --> 00:06:40,080
everyone listening to go and look at the

213
00:06:40,080 --> 00:06:42,000
paper to see all five optimizations in

214
00:06:42,000 --> 00:06:44,400
detail

215
00:06:44,400 --> 00:06:46,080
all right so the first optimization ends

216
00:06:46,080 --> 00:06:48,560
up being not too complicated so when you

217
00:06:48,560 --> 00:06:51,120
look at private key encryption or on the

218
00:06:51,120 --> 00:06:52,479
client side it turns out that the

219
00:06:52,479 --> 00:06:54,880
encryptions are of the form c0 c1 which

220
00:06:54,880 --> 00:06:57,440
is a tuple essentially polynomials

221
00:06:57,440 --> 00:06:59,759
but if you look specifically at c0 it

222
00:06:59,759 --> 00:07:01,840
turns out that c0 is really a uniformly

223
00:07:01,840 --> 00:07:03,599
random element independent of public and

224
00:07:03,599 --> 00:07:04,800
private keys

225
00:07:04,800 --> 00:07:06,000
so one thing we could do is obviously

226
00:07:06,000 --> 00:07:07,680
the client could generate all all of

227
00:07:07,680 --> 00:07:08,800
this randomness and send it to the

228
00:07:08,800 --> 00:07:11,039
server side but in our work what we do

229
00:07:11,039 --> 00:07:12,960
is we replace c0 with a very very

230
00:07:12,960 --> 00:07:15,680
succinct description of a prgcs

231
00:07:15,680 --> 00:07:17,680
so now with the prgcs if either the

232
00:07:17,680 --> 00:07:19,919
client or the server wants to sort of

233
00:07:19,919 --> 00:07:21,840
generate c0 again all it has to do is

234
00:07:21,840 --> 00:07:24,160
apply a prg several times

235
00:07:24,160 --> 00:07:25,520
and it turns out this is much this is

236
00:07:25,520 --> 00:07:26,960
this is the slight this is for example

237
00:07:26,960 --> 00:07:28,880
slightly increasing computation but it

238
00:07:28,880 --> 00:07:30,880
essentially has the upload upload

239
00:07:30,880 --> 00:07:32,960
communicate communication ends up being

240
00:07:32,960 --> 00:07:35,440
very valuable and a huge optimization in

241
00:07:35,440 --> 00:07:36,479
our work

242
00:07:36,479 --> 00:07:38,160
so this was the first optimization it

243
00:07:38,160 --> 00:07:39,280
turns out to be very simple but it's

244
00:07:39,280 --> 00:07:41,120
already very impactful as it may reduce

245
00:07:41,120 --> 00:07:43,759
to upload by have

246
00:07:43,759 --> 00:07:44,960
so the other optimization i'm going to

247
00:07:44,960 --> 00:07:47,039
talk about is called is an improved

248
00:07:47,039 --> 00:07:49,440
algorithm for oblivious expansion so in

249
00:07:49,440 --> 00:07:50,800
the work of copier that we're building

250
00:07:50,800 --> 00:07:53,440
on top of seal pier had introduced this

251
00:07:53,440 --> 00:07:55,520
new notion of oblivious expansion and

252
00:07:55,520 --> 00:07:56,960
what essentially means is that it could

253
00:07:56,960 --> 00:07:58,479
instead of having a single ciphertext

254
00:07:58,479 --> 00:08:00,160
per bit that's uploaded you could

255
00:08:00,160 --> 00:08:02,720
encrypt multiple bits per ciphertext so

256
00:08:02,720 --> 00:08:04,400
for example let's take a look without

257
00:08:04,400 --> 00:08:06,000
oblivious expansion if you want to

258
00:08:06,000 --> 00:08:08,000
encrypt this the selection vector you

259
00:08:08,000 --> 00:08:10,319
needed n ciphertext

260
00:08:10,319 --> 00:08:12,720
but with oblivious expansion for example

261
00:08:12,720 --> 00:08:14,319
it turns out that you could compress

262
00:08:14,319 --> 00:08:16,000
multiple bits into into a single

263
00:08:16,000 --> 00:08:18,160
ciphertext so for example here in the

264
00:08:18,160 --> 00:08:19,919
example i said maybe you only need three

265
00:08:19,919 --> 00:08:21,840
ciphertexts where you sort of fit n over

266
00:08:21,840 --> 00:08:24,879
three of the bits into each cipher text

267
00:08:24,879 --> 00:08:27,440
and what happens is even when when the

268
00:08:27,440 --> 00:08:29,120
when if you were if you if you use a

269
00:08:29,120 --> 00:08:30,479
bluetooth extension you compress this

270
00:08:30,479 --> 00:08:31,440
vector

271
00:08:31,440 --> 00:08:32,559
the server will still be able to

272
00:08:32,559 --> 00:08:34,159
obliviously expand it back to the end

273
00:08:34,159 --> 00:08:35,519
ciphertext where you know each

274
00:08:35,519 --> 00:08:37,440
ciphertext considers contains one bit

275
00:08:37,440 --> 00:08:39,279
that's needed for the for example the

276
00:08:39,279 --> 00:08:41,838
dot product

277
00:08:42,719 --> 00:08:44,480
so okay so this is this was a huge

278
00:08:44,480 --> 00:08:46,000
breakthrough this is why seal pier was

279
00:08:46,000 --> 00:08:48,000
able to actually achieve much better

280
00:08:48,000 --> 00:08:49,920
communication than prior works

281
00:08:49,920 --> 00:08:51,200
but it turns out that the seal poos of

282
00:08:51,200 --> 00:08:52,320
blueberries expansion had some

283
00:08:52,320 --> 00:08:54,640
limitations so one limitation was that

284
00:08:54,640 --> 00:08:56,640
the 2b compressed bit vector the input

285
00:08:56,640 --> 00:08:58,480
that's going to be compressed

286
00:08:58,480 --> 00:09:02,000
had to have having weight at most one

287
00:09:02,000 --> 00:09:03,600
so this turns out to be a pretty big

288
00:09:03,600 --> 00:09:05,680
limitation in the context of recursion

289
00:09:05,680 --> 00:09:08,080
for example so remember recursion here

290
00:09:08,080 --> 00:09:09,519
with with let's say two levels of

291
00:09:09,519 --> 00:09:11,040
recursion where you represent the

292
00:09:11,040 --> 00:09:12,959
database as a square

293
00:09:12,959 --> 00:09:14,560
the client will have to upload two sets

294
00:09:14,560 --> 00:09:16,640
of vectors one for the rows one for the

295
00:09:16,640 --> 00:09:18,640
columns and then each of these set of

296
00:09:18,640 --> 00:09:21,360
vectors has hamming weight one already

297
00:09:21,360 --> 00:09:23,040
so because of this limitation of their

298
00:09:23,040 --> 00:09:25,120
of seal peers oblivious expansion you

299
00:09:25,120 --> 00:09:27,839
needed to compress each of the bid

300
00:09:27,839 --> 00:09:29,279
vectors separately and have a cipher

301
00:09:29,279 --> 00:09:31,360
text for each because of if you sort of

302
00:09:31,360 --> 00:09:32,800
concatenated them the hamming way

303
00:09:32,800 --> 00:09:34,800
becomes two

304
00:09:34,800 --> 00:09:35,600
so

305
00:09:35,600 --> 00:09:37,920
why this is why is this so bad

306
00:09:37,920 --> 00:09:39,440
well it turns out that there could be a

307
00:09:39,440 --> 00:09:41,519
lot of wasted space in the worst case so

308
00:09:41,519 --> 00:09:43,600
for example let's let's take a look here

309
00:09:43,600 --> 00:09:45,279
you know what happens is you compress

310
00:09:45,279 --> 00:09:46,800
each of the set of vectors of having one

311
00:09:46,800 --> 00:09:48,640
into two different ciphertexts but maybe

312
00:09:48,640 --> 00:09:50,320
only less than half of each side of

313
00:09:50,320 --> 00:09:52,160
texas is being occupied and the other

314
00:09:52,160 --> 00:09:55,360
more than half are empty

315
00:09:55,760 --> 00:09:58,080
so in our work what we do is we actually

316
00:09:58,080 --> 00:09:59,360
produ

317
00:09:59,360 --> 00:10:00,880
present a new oblivious expansion

318
00:10:00,880 --> 00:10:03,279
algorithm without this limitation so the

319
00:10:03,279 --> 00:10:04,720
2b compressed speed vector can have

320
00:10:04,720 --> 00:10:06,240
arbitrary hamming weight we no longer

321
00:10:06,240 --> 00:10:07,040
care

322
00:10:07,040 --> 00:10:08,720
and what happens is especially with

323
00:10:08,720 --> 00:10:10,399
recursion is that now we can compress

324
00:10:10,399 --> 00:10:12,399
all the uploaded bit vectors once you

325
00:10:12,399 --> 00:10:13,760
know we can we can compress them once we

326
00:10:13,760 --> 00:10:15,760
can concatenate the two in the recursion

327
00:10:15,760 --> 00:10:16,800
and the recursion now that has hamilton

328
00:10:16,800 --> 00:10:19,120
weight 2 for example we can still

329
00:10:19,120 --> 00:10:21,440
compress all at once

330
00:10:21,440 --> 00:10:22,880
and the result essentially could be in

331
00:10:22,880 --> 00:10:25,040
the best case that they all fit into one

332
00:10:25,040 --> 00:10:27,200
cipher text and you have almost you have

333
00:10:27,200 --> 00:10:29,120
you have a lot less wasted space

334
00:10:29,120 --> 00:10:30,720
and this all ends up improving

335
00:10:30,720 --> 00:10:33,600
communication

336
00:10:33,600 --> 00:10:35,600
so how we came up with this algorithm is

337
00:10:35,600 --> 00:10:37,120
that we quickly noted that essentially

338
00:10:37,120 --> 00:10:38,959
the server oblivious expansion is linear

339
00:10:38,959 --> 00:10:41,279
in the plaintext space so in fact our

340
00:10:41,279 --> 00:10:42,640
algorithm only works for bit vectors but

341
00:10:42,640 --> 00:10:44,079
it can work for arbitrary vectors as

342
00:10:44,079 --> 00:10:46,240
well

343
00:10:46,240 --> 00:10:47,920
so after implementing our five

344
00:10:47,920 --> 00:10:49,760
optimizations we sort of did

345
00:10:49,760 --> 00:10:51,360
experimental evaluation and represent

346
00:10:51,360 --> 00:10:53,120
the results here and what you can sort

347
00:10:53,120 --> 00:10:55,120
of see is that malpear is able to

348
00:10:55,120 --> 00:10:57,120
actually obtain much better results so

349
00:10:57,120 --> 00:10:58,480
for example if you look at the bolded

350
00:10:58,480 --> 00:11:00,399
parts for two out of the three databases

351
00:11:00,399 --> 00:11:02,000
mallpierre is able to obtain much lower

352
00:11:02,000 --> 00:11:04,560
monetary costs and in general malpear

353
00:11:04,560 --> 00:11:06,640
has lower download for a slight increase

354
00:11:06,640 --> 00:11:08,640
in upload and a slight increase for

355
00:11:08,640 --> 00:11:10,399
communication but in general it turns

356
00:11:10,399 --> 00:11:12,079
out to be better for monetary costs and

357
00:11:12,079 --> 00:11:13,440
a better trade-off of communication and

358
00:11:13,440 --> 00:11:14,800
computation

359
00:11:14,800 --> 00:11:16,399
uh you should look at the paper for the

360
00:11:16,399 --> 00:11:17,760
full table if you need more if you want

361
00:11:17,760 --> 00:11:19,680
to look at more details

362
00:11:19,680 --> 00:11:21,839
so our second optimization was actually

363
00:11:21,839 --> 00:11:22,959
improving a different kind of peer

364
00:11:22,959 --> 00:11:24,959
called gentry ramzan so gentry ramzan

365
00:11:24,959 --> 00:11:26,640
was a peer that actually was very very

366
00:11:26,640 --> 00:11:28,399
optimized for communication

367
00:11:28,399 --> 00:11:30,560
but had very high computations and in

368
00:11:30,560 --> 00:11:31,760
our work what we're able to do is

369
00:11:31,760 --> 00:11:33,440
present a new version of it that with

370
00:11:33,440 --> 00:11:34,880
tunable communication computation

371
00:11:34,880 --> 00:11:35,920
trade-offs

372
00:11:35,920 --> 00:11:38,000
so as a result one of our one of our

373
00:11:38,000 --> 00:11:39,760
instantiations of our new of the of the

374
00:11:39,760 --> 00:11:42,000
tunable version of gentry ramzan reduces

375
00:11:42,000 --> 00:11:43,600
the gentry ramazan's server competition

376
00:11:43,600 --> 00:11:46,079
by up to 85 but for an increase in

377
00:11:46,079 --> 00:11:48,160
communication sizes

378
00:11:48,160 --> 00:11:50,720
so here's a table with someone with with

379
00:11:50,720 --> 00:11:51,920
some of these trade-offs and you can

380
00:11:51,920 --> 00:11:53,680
sort of see the client data gentry runs

381
00:11:53,680 --> 00:11:55,200
on are essentially this tunable version

382
00:11:55,200 --> 00:11:56,720
that allows you to have higher

383
00:11:56,720 --> 00:11:58,399
communication but lower server

384
00:11:58,399 --> 00:12:00,000
computation

385
00:12:00,000 --> 00:12:00,800
and

386
00:12:00,800 --> 00:12:02,079
there's a lot to look in here so i

387
00:12:02,079 --> 00:12:03,279
encourage everyone to look at the full

388
00:12:03,279 --> 00:12:05,680
paper for more details

389
00:12:05,680 --> 00:12:07,839
last but not least our last contribution

390
00:12:07,839 --> 00:12:09,680
is a generic transportation from sparse

391
00:12:09,680 --> 00:12:11,760
pure to dense pure so what is sparse

392
00:12:11,760 --> 00:12:13,920
period what is what is sparse sphere

393
00:12:13,920 --> 00:12:16,880
so essentially sparse pure is sort of

394
00:12:16,880 --> 00:12:18,320
it's sort of like dense pure but rather

395
00:12:18,320 --> 00:12:21,120
than having each element have the index

396
00:12:21,120 --> 00:12:22,720
from one to n they're essentially a key

397
00:12:22,720 --> 00:12:24,399
value pair so you know each each entry

398
00:12:24,399 --> 00:12:26,079
is associated with a specific key and

399
00:12:26,079 --> 00:12:27,440
the keys might come from a sparse

400
00:12:27,440 --> 00:12:28,800
universe

401
00:12:28,800 --> 00:12:30,320
and what our work does essentially

402
00:12:30,320 --> 00:12:32,320
presents a generic transformation where

403
00:12:32,320 --> 00:12:34,079
we essentially use cuckoo hashing to

404
00:12:34,079 --> 00:12:36,000
hash the keys and their associated

405
00:12:36,000 --> 00:12:38,560
values into two different tables where

406
00:12:38,560 --> 00:12:40,240
each entry could appear in one in an

407
00:12:40,240 --> 00:12:41,600
entry in the first table or entry in the

408
00:12:41,600 --> 00:12:42,800
second table

409
00:12:42,800 --> 00:12:44,959
and then simply what we're able to do is

410
00:12:44,959 --> 00:12:47,279
now from sparse period you can just use

411
00:12:47,279 --> 00:12:49,440
two dense pure normal pure queries one

412
00:12:49,440 --> 00:12:51,839
to each table to be able to solve to do

413
00:12:51,839 --> 00:12:54,800
a sparse pure solution

414
00:12:54,800 --> 00:12:56,240
thanks for listening and if you have any

415
00:12:56,240 --> 00:12:57,680
questions feel free to reach out to any

416
00:12:57,680 --> 00:13:00,000
of the authors emails on the paper for

417
00:13:00,000 --> 00:13:01,360
more questions and thank you for

418
00:13:01,360 --> 00:13:04,360
listening

419
00:13:09,600 --> 00:13:11,680
you

