1
00:00:08,639 --> 00:00:09,679
hi

2
00:00:09,679 --> 00:00:12,080
my name is liz ishikevich and today i

3
00:00:12,080 --> 00:00:14,160
will be presenting work that focuses on

4
00:00:14,160 --> 00:00:16,560
identifying unexpected services on the

5
00:00:16,560 --> 00:00:18,400
internet

6
00:00:18,400 --> 00:00:21,119
more than 300 security studies have used

7
00:00:21,119 --> 00:00:23,199
internet-wide scanning for studying the

8
00:00:23,199 --> 00:00:25,599
vulnerability of the internet

9
00:00:25,599 --> 00:00:27,599
projects have ranged from understanding

10
00:00:27,599 --> 00:00:30,480
service deployment such as tls and dns

11
00:00:30,480 --> 00:00:33,680
to predicting online cyber threats

12
00:00:33,680 --> 00:00:34,880
however

13
00:00:34,880 --> 00:00:37,520
past studies generally only scan iana

14
00:00:37,520 --> 00:00:40,079
sign ports and they thereby implicitly

15
00:00:40,079 --> 00:00:42,559
assume that the majority of services are

16
00:00:42,559 --> 00:00:46,000
hosted on their iana assigned ports

17
00:00:46,000 --> 00:00:47,360
for example

18
00:00:47,360 --> 00:00:51,120
since diana assigns ssh to port 22 and

19
00:00:51,120 --> 00:00:55,199
https to port 443 it is assumed that by

20
00:00:55,199 --> 00:00:58,559
scanning only port 22 and 443 that the

21
00:00:58,559 --> 00:01:01,760
majority of ssh and https services will

22
00:01:01,760 --> 00:01:03,280
be found

23
00:01:03,280 --> 00:01:06,400
in this work we first investigate where

24
00:01:06,400 --> 00:01:08,479
internet services are deployed in

25
00:01:08,479 --> 00:01:09,760
practice

26
00:01:09,760 --> 00:01:12,320
for example for the majority of telnet

27
00:01:12,320 --> 00:01:15,680
services really on port 23

28
00:01:15,680 --> 00:01:18,400
we study what is the security posture of

29
00:01:18,400 --> 00:01:21,119
services on unexpected ports

30
00:01:21,119 --> 00:01:23,600
are services on unexpected ports more or

31
00:01:23,600 --> 00:01:27,439
less likely to be secure lastly we

32
00:01:27,439 --> 00:01:29,200
investigate how do we efficiently

33
00:01:29,200 --> 00:01:32,560
identify a services protocol

34
00:01:32,560 --> 00:01:35,040
to begin answering the question of where

35
00:01:35,040 --> 00:01:37,520
services are deployed in practice

36
00:01:37,520 --> 00:01:39,439
we take a step back and analyze a

37
00:01:39,439 --> 00:01:42,159
methodology used for identifying tcp

38
00:01:42,159 --> 00:01:43,439
services

39
00:01:43,439 --> 00:01:44,880
for example

40
00:01:44,880 --> 00:01:47,600
zmapp is a tool that is often used to

41
00:01:47,600 --> 00:01:50,720
identify services vmap works by sending

42
00:01:50,720 --> 00:01:52,799
a sim packet and waits to receive a

43
00:01:52,799 --> 00:01:55,680
synap before closing the connection

44
00:01:55,680 --> 00:01:58,399
this is often referred to as a layer 4

45
00:01:58,399 --> 00:01:59,600
handshape

46
00:01:59,600 --> 00:02:02,159
by using siemens researchers assume that

47
00:02:02,159 --> 00:02:04,799
receiving a synac is a likely sign that

48
00:02:04,799 --> 00:02:07,200
the expected service is really present

49
00:02:07,200 --> 00:02:09,280
behind the scenario

50
00:02:09,280 --> 00:02:11,760
as a result if researchers choose to

51
00:02:11,760 --> 00:02:14,720
perform a follow-up layer 7 handshake

52
00:02:14,720 --> 00:02:18,080
the assumed service in this case http on

53
00:02:18,080 --> 00:02:20,840
port 80 is the only service

54
00:02:20,840 --> 00:02:24,000
scanned confessed to the assumptions

55
00:02:24,000 --> 00:02:26,319
that past scanning methodology made are

56
00:02:26,319 --> 00:02:27,360
correct

57
00:02:27,360 --> 00:02:30,319
we scan one percent of the ipv4 address

58
00:02:30,319 --> 00:02:33,840
space across 37 iana assigned courts and

59
00:02:33,840 --> 00:02:35,840
compare the number of ips that send a

60
00:02:35,840 --> 00:02:38,319
cinna to the number of ips that complete

61
00:02:38,319 --> 00:02:40,640
the expected l7 handshake

62
00:02:40,640 --> 00:02:42,720
when scanning port 80 we see that

63
00:02:42,720 --> 00:02:45,840
roughly 14 percent of hosts do not

64
00:02:45,840 --> 00:02:49,200
complete the expected http handshake

65
00:02:49,200 --> 00:02:50,400
moreover

66
00:02:50,400 --> 00:02:53,040
as ports become less popular this

67
00:02:53,040 --> 00:02:55,840
discrepancy becomes amplified

68
00:02:55,840 --> 00:02:58,879
96 percent of hosts that send back a

69
00:02:58,879 --> 00:03:02,480
synap on port 502 do not complete the

70
00:03:02,480 --> 00:03:05,360
assigned modbus handshake

71
00:03:05,360 --> 00:03:07,599
so why are hosts not completing the

72
00:03:07,599 --> 00:03:09,920
expected l7 handshake

73
00:03:09,920 --> 00:03:12,400
is it due to a broken tcp stack on the

74
00:03:12,400 --> 00:03:13,440
server

75
00:03:13,440 --> 00:03:16,080
or some middle box behavior or are there

76
00:03:16,080 --> 00:03:18,400
unexpected services living on iana

77
00:03:18,400 --> 00:03:20,400
assigned courts

78
00:03:20,400 --> 00:03:22,480
as we begin our investigation

79
00:03:22,480 --> 00:03:24,480
we find that fast methodologies for

80
00:03:24,480 --> 00:03:27,440
identifying real tcp services are

81
00:03:27,440 --> 00:03:29,120
insufficient

82
00:03:29,120 --> 00:03:32,159
tools such as zmapp which only rely on

83
00:03:32,159 --> 00:03:34,879
the layer 4 tcp handshake

84
00:03:34,879 --> 00:03:37,120
fail to capture whether the service

85
00:03:37,120 --> 00:03:39,760
actually speaks tcp

86
00:03:39,760 --> 00:03:42,239
in order for a service to be real it

87
00:03:42,239 --> 00:03:44,799
must also be able to accept data and

88
00:03:44,799 --> 00:03:47,200
acknowledge any data received according

89
00:03:47,200 --> 00:03:50,080
to the tcp rfc

90
00:03:50,080 --> 00:03:51,840
we compare the fraction of hosts that's

91
00:03:51,840 --> 00:03:53,680
symbolic with the fraction that

92
00:03:53,680 --> 00:03:56,959
acknowledge data and find that up to 96

93
00:03:56,959 --> 00:03:59,599
percent of posts that synac never

94
00:03:59,599 --> 00:04:01,840
acknowledged the data that was sent

95
00:04:01,840 --> 00:04:04,239
this phenomenon is again amplified as

96
00:04:04,239 --> 00:04:06,159
ports become less popular

97
00:04:06,159 --> 00:04:07,360
for example

98
00:04:07,360 --> 00:04:09,439
while only three percent of hosts on

99
00:04:09,439 --> 00:04:11,920
port 80 do not acknowledge data

100
00:04:11,920 --> 00:04:15,439
86 of hosts fail to acknowledge data on

101
00:04:15,439 --> 00:04:17,358
port 502

102
00:04:17,358 --> 00:04:19,440
it turns out that network defenses such

103
00:04:19,440 --> 00:04:21,918
as middle boxes are responsible for

104
00:04:21,918 --> 00:04:24,320
services appearing to be real due to a

105
00:04:24,320 --> 00:04:26,960
successful tcp handshake even when there

106
00:04:26,960 --> 00:04:29,520
are no real services present on that ip

107
00:04:29,520 --> 00:04:30,560
import

108
00:04:30,560 --> 00:04:32,960
we detail in our paper the exact five

109
00:04:32,960 --> 00:04:34,960
middle box behaviors that contribute to

110
00:04:34,960 --> 00:04:37,680
this phenomenon

111
00:04:37,680 --> 00:04:40,160
to understand what fraction of services

112
00:04:40,160 --> 00:04:43,120
that acknowledge data are unassigned and

113
00:04:43,120 --> 00:04:44,400
unexpected

114
00:04:44,400 --> 00:04:47,440
we set up an experiment to scan all 65

115
00:04:47,440 --> 00:04:50,639
000 ports with 30 unique protocols each

116
00:04:50,639 --> 00:04:54,560
across 0.1 of the ipv4 address space and

117
00:04:54,560 --> 00:04:56,560
filter for services that acknowledge

118
00:04:56,560 --> 00:04:58,080
data

119
00:04:58,080 --> 00:05:00,880
we find that 27

120
00:05:00,880 --> 00:05:03,520
of services on pocket reports and 63

121
00:05:03,520 --> 00:05:05,759
percent of services on unpopular reports

122
00:05:05,759 --> 00:05:08,960
are unassigned and unexpected

123
00:05:08,960 --> 00:05:12,720
we discovered that http and tls dominate

124
00:05:12,720 --> 00:05:16,160
unexpected services with 65 of all

125
00:05:16,160 --> 00:05:19,759
unexpected services speaking http and 30

126
00:05:19,759 --> 00:05:22,880
speaking tls

127
00:05:22,960 --> 00:05:25,520
furthermore we find that iana sign

128
00:05:25,520 --> 00:05:28,320
protocols are incredibly diffused across

129
00:05:28,320 --> 00:05:30,000
all ports

130
00:05:30,000 --> 00:05:33,199
only three percent of http is found on

131
00:05:33,199 --> 00:05:35,919
port 80. only five and a half percent of

132
00:05:35,919 --> 00:05:38,880
telnet is found on port 23 and only six

133
00:05:38,880 --> 00:05:41,120
and a half percent of tls lives on port

134
00:05:41,120 --> 00:05:44,400
443 as seen in the figure when looking

135
00:05:44,400 --> 00:05:46,479
across all ports we find that

136
00:05:46,479 --> 00:05:50,240
researchers must scan 25 000 ports to

137
00:05:50,240 --> 00:05:56,000
achieve 90 coverage of all http on ipv4

138
00:05:56,000 --> 00:05:59,759
we discovered that 50 of unexpected tls

139
00:05:59,759 --> 00:06:02,479
actually belongs to iot devices

140
00:06:02,479 --> 00:06:05,120
for example 35

141
00:06:05,120 --> 00:06:07,440
of tls on port 8000

142
00:06:07,440 --> 00:06:10,720
are cctv security devices in korea

143
00:06:10,720 --> 00:06:12,160
telecom

144
00:06:12,160 --> 00:06:15,360
five percent of unexpected tls on port

145
00:06:15,360 --> 00:06:16,880
8443

146
00:06:16,880 --> 00:06:19,600
are android tvs across a variety of

147
00:06:19,600 --> 00:06:22,000
different networks in korea

148
00:06:22,000 --> 00:06:25,919
and tls on port 80 for 38 of it are

149
00:06:25,919 --> 00:06:27,120
actually

150
00:06:27,120 --> 00:06:29,360
routers that are present across one

151
00:06:29,360 --> 00:06:33,759
percent of all as's worldwide

152
00:06:33,759 --> 00:06:36,080
furthermore we find that unexpected

153
00:06:36,080 --> 00:06:38,319
services are more vulnerable than

154
00:06:38,319 --> 00:06:40,960
unassigned than assigned services

155
00:06:40,960 --> 00:06:42,240
for example

156
00:06:42,240 --> 00:06:44,960
sports hosting unexpected tls

157
00:06:44,960 --> 00:06:47,039
posts two times more certificates with a

158
00:06:47,039 --> 00:06:50,240
known private key compared to prior work

159
00:06:50,240 --> 00:06:52,639
23 percent of courts hosting unexpected

160
00:06:52,639 --> 00:06:55,199
tls are more likely to host shared

161
00:06:55,199 --> 00:06:56,479
public keys

162
00:06:56,479 --> 00:06:58,720
than assigned teals

163
00:06:58,720 --> 00:07:02,080
and ports posting unexpected ssh are two

164
00:07:02,080 --> 00:07:05,039
and a half more times more likely to

165
00:07:05,039 --> 00:07:09,440
allow non-public key authentication

166
00:07:09,440 --> 00:07:10,880
in other words

167
00:07:10,880 --> 00:07:12,960
security studies really should scan

168
00:07:12,960 --> 00:07:16,680
unexpected services

169
00:07:18,240 --> 00:07:21,599
scan to find unexpected services

170
00:07:21,599 --> 00:07:24,240
it's feasible to recommend researchers

171
00:07:24,240 --> 00:07:26,880
to attempt over 30 handshakes for every

172
00:07:26,880 --> 00:07:29,039
port scan such as we did in our

173
00:07:29,039 --> 00:07:31,199
experiment

174
00:07:31,199 --> 00:07:34,000
to address this concern we identified

175
00:07:34,000 --> 00:07:36,160
two scanning patterns that help us

176
00:07:36,160 --> 00:07:38,400
inform how to build a more efficient

177
00:07:38,400 --> 00:07:40,400
protocol scanner

178
00:07:40,400 --> 00:07:42,960
first we discover that eight of the 30

179
00:07:42,960 --> 00:07:45,759
protocols we scan identify themselves

180
00:07:45,759 --> 00:07:47,599
first to the client

181
00:07:47,599 --> 00:07:50,720
this means that by merely opening htcp

182
00:07:50,720 --> 00:07:52,960
connection and waiting to accept the

183
00:07:52,960 --> 00:07:55,360
data we can easily fingerprint the

184
00:07:55,360 --> 00:07:57,440
service

185
00:07:57,440 --> 00:07:58,479
second

186
00:07:58,479 --> 00:08:00,639
we find alternative 30 protocols

187
00:08:00,639 --> 00:08:02,560
identify themselves using the wrong

188
00:08:02,560 --> 00:08:04,879
handshake in other words

189
00:08:04,879 --> 00:08:07,199
after establishing a tcp connection and

190
00:08:07,199 --> 00:08:10,800
sending for example an http get request

191
00:08:10,800 --> 00:08:13,680
services such as mongodb will respond in

192
00:08:13,680 --> 00:08:15,680
a fashion in which it is easy to tell

193
00:08:15,680 --> 00:08:18,879
which service is actually running

194
00:08:18,879 --> 00:08:21,520
building on these two primary insights

195
00:08:21,520 --> 00:08:24,000
we build a completely new scanner called

196
00:08:24,000 --> 00:08:26,400
laser which is tailored to efficiently

197
00:08:26,400 --> 00:08:29,039
identifying services

198
00:08:29,039 --> 00:08:31,360
laser relies on zmapp to start the

199
00:08:31,360 --> 00:08:34,080
connection between the client and server

200
00:08:34,080 --> 00:08:35,519
once the server responds with the

201
00:08:35,519 --> 00:08:37,039
synapse however

202
00:08:37,039 --> 00:08:39,360
laser intercepts the connection and

203
00:08:39,360 --> 00:08:41,679
takes over establishing the connection

204
00:08:41,679 --> 00:08:43,839
by sneakily attaching data to the

205
00:08:43,839 --> 00:08:46,480
acknowledgement of the tcp handshake

206
00:08:46,480 --> 00:08:48,560
laser then waits to receive protocol

207
00:08:48,560 --> 00:08:50,800
identifying data from the server at

208
00:08:50,800 --> 00:08:52,839
which point it closes the

209
00:08:52,839 --> 00:08:55,519
connection blazing can also be used in

210
00:08:55,519 --> 00:08:57,839
tandem with an application layer scanner

211
00:08:57,839 --> 00:09:00,800
such as z-grab informing z-grab of which

212
00:09:00,800 --> 00:09:04,240
protocol to actually scan for

213
00:09:04,240 --> 00:09:06,320
laser's key features are that it

214
00:09:06,320 --> 00:09:09,680
fingerprints all server responses and

215
00:09:09,680 --> 00:09:12,160
also ignore hook ignores hosts that do

216
00:09:12,160 --> 00:09:14,640
not acknowledge data

217
00:09:14,640 --> 00:09:16,399
by doing so

218
00:09:16,399 --> 00:09:19,440
laser is able to easily find unexpected

219
00:09:19,440 --> 00:09:21,680
services while also reducing the

220
00:09:21,680 --> 00:09:22,959
scanning time

221
00:09:22,959 --> 00:09:25,519
as laser no longer tries to re-attempt

222
00:09:25,519 --> 00:09:27,279
to make a connection with the service

223
00:09:27,279 --> 00:09:30,560
that is likely just the middle box

224
00:09:30,560 --> 00:09:32,320
with benchmark laser

225
00:09:32,320 --> 00:09:34,240
and find its performance gains to be

226
00:09:34,240 --> 00:09:36,560
prevalent when scanning less popular

227
00:09:36,560 --> 00:09:38,240
ports

228
00:09:38,240 --> 00:09:40,000
which are likely to be dominated by

229
00:09:40,000 --> 00:09:41,360
middle boxes

230
00:09:41,360 --> 00:09:42,640
for example

231
00:09:42,640 --> 00:09:45,920
laser is 55 times faster than using

232
00:09:45,920 --> 00:09:48,839
z-grab when scanning the iana assign

233
00:09:48,839 --> 00:09:50,880
mongodb port

234
00:09:50,880 --> 00:09:54,640
even when scanning http on port 80

235
00:09:54,640 --> 00:09:57,519
laser is 4.3 times faster

236
00:09:57,519 --> 00:09:59,600
than z graph

237
00:09:59,600 --> 00:10:02,079
laser however is also able to

238
00:10:02,079 --> 00:10:04,640
fingerprint up to 18 unique protocols in

239
00:10:04,640 --> 00:10:06,079
one scan

240
00:10:06,079 --> 00:10:08,800
for example when scanning mongodb on

241
00:10:08,800 --> 00:10:11,279
port 2717

242
00:10:11,279 --> 00:10:14,399
laser finds an additional 14 unique

243
00:10:14,399 --> 00:10:18,920
protocols besides mongodb

244
00:10:18,959 --> 00:10:19,920
so

245
00:10:19,920 --> 00:10:22,480
our takeaways for this project are a

246
00:10:22,480 --> 00:10:25,760
cinema is not a real service

247
00:10:25,760 --> 00:10:28,079
therefore scanning studies must scan

248
00:10:28,079 --> 00:10:30,959
layer 7 to identify and find real

249
00:10:30,959 --> 00:10:32,800
services

250
00:10:32,800 --> 00:10:35,040
in the sign protocols are diffused

251
00:10:35,040 --> 00:10:38,399
across all 65 000 ports

252
00:10:38,399 --> 00:10:40,000
scanning studies should scan for

253
00:10:40,000 --> 00:10:43,600
protocols across all ports

254
00:10:43,600 --> 00:10:46,160
unexpected services are more likely to

255
00:10:46,160 --> 00:10:47,519
be vulnerable

256
00:10:47,519 --> 00:10:50,399
so security studies in particular should

257
00:10:50,399 --> 00:10:53,519
scan for protocols across all ports

258
00:10:53,519 --> 00:10:56,079
and finally we built laser which is an

259
00:10:56,079 --> 00:10:58,160
open source scanner that efficiently

260
00:10:58,160 --> 00:11:00,399
finds unexpected services

261
00:11:00,399 --> 00:11:02,800
and that will be available on github if

262
00:11:02,800 --> 00:11:04,640
you have any questions feel free to

263
00:11:04,640 --> 00:11:08,839
email me thank you

264
00:11:15,600 --> 00:11:17,680
you

