1
00:00:08,800 --> 00:00:11,280
hello everyone my name is niels abartos

2
00:00:11,280 --> 00:00:13,040
and i'm a researcher affiliated with the

3
00:00:13,040 --> 00:00:14,719
royal university in vol

4
00:00:14,719 --> 00:00:16,079
and the max planck institute for

5
00:00:16,079 --> 00:00:17,840
security and privacy

6
00:00:17,840 --> 00:00:19,359
and in the next 10 minutes i will give a

7
00:00:19,359 --> 00:00:21,520
brief presentation about our usex 21

8
00:00:21,520 --> 00:00:22,400
paper

9
00:00:22,400 --> 00:00:24,320
on the design and misuse of microcoded

10
00:00:24,320 --> 00:00:26,720
embedded processors a cautionary node

11
00:00:26,720 --> 00:00:28,400
which has been a collaboration together

12
00:00:28,400 --> 00:00:30,720
with the umis embossed

13
00:00:30,720 --> 00:00:32,238
so let's start with a little motivation

14
00:00:32,238 --> 00:00:33,760
of what microcode actually is and what

15
00:00:33,760 --> 00:00:35,600
it's used for and the idea that

16
00:00:35,600 --> 00:00:37,600
microcode basically all started was

17
00:00:37,600 --> 00:00:39,440
because generally baxted processors or

18
00:00:39,440 --> 00:00:41,200
hardware and silicon in general is that

19
00:00:41,200 --> 00:00:43,120
they cannot be fixed and this can be

20
00:00:43,120 --> 00:00:44,719
really problematic with companies it's

21
00:00:44,719 --> 00:00:46,480
one of the most famous bugs in history

22
00:00:46,480 --> 00:00:48,960
the ftf bug has shown

23
00:00:48,960 --> 00:00:51,280
the fdif bug was a bug that incurred in

24
00:00:51,280 --> 00:00:53,280
some floating point divisions and intro

25
00:00:53,280 --> 00:00:55,199
actually had to recall all affected

26
00:00:55,199 --> 00:00:57,199
processors which caused them a loss of

27
00:00:57,199 --> 00:00:59,440
hundreds of million us dollars

28
00:00:59,440 --> 00:01:01,680
and to avoid such expensive endeavours

29
00:01:01,680 --> 00:01:04,400
in the future most processors nowadays

30
00:01:04,400 --> 00:01:06,240
contain an updateable part which we

31
00:01:06,240 --> 00:01:08,400
often refer to as microcode which allows

32
00:01:08,400 --> 00:01:10,560
the vendors to fix bugs to processors in

33
00:01:10,560 --> 00:01:12,640
field via an update which is usually

34
00:01:12,640 --> 00:01:16,320
deployed in the bias or operating system

35
00:01:16,320 --> 00:01:17,920
so what do we know about commercial

36
00:01:17,920 --> 00:01:20,240
microcode well certainly not too much

37
00:01:20,240 --> 00:01:21,920
because most information are hidden in

38
00:01:21,920 --> 00:01:23,360
patterns and there is actually little

39
00:01:23,360 --> 00:01:25,040
known about the true capabilities of

40
00:01:25,040 --> 00:01:26,720
commercial microcode

41
00:01:26,720 --> 00:01:28,960
however we know that insulin amd update

42
00:01:28,960 --> 00:01:31,360
their microcode of their cpus on a

43
00:01:31,360 --> 00:01:33,360
regular basis but these updates are

44
00:01:33,360 --> 00:01:35,439
cryptographically secured and encrypted

45
00:01:35,439 --> 00:01:37,280
so analysis from our researchers

46
00:01:37,280 --> 00:01:40,560
perspective is not possible

47
00:01:40,560 --> 00:01:42,560
but these updates actually happen pretty

48
00:01:42,560 --> 00:01:44,560
often and without us the user really

49
00:01:44,560 --> 00:01:47,360
knowing and most impressively even the

50
00:01:47,360 --> 00:01:49,360
spectroattacks will fix via microcode

51
00:01:49,360 --> 00:01:52,479
updates so basically microcode is a

52
00:01:52,479 --> 00:01:54,799
super powerful tool that even allowed

53
00:01:54,799 --> 00:01:57,280
insulin amd to fix such new attack

54
00:01:57,280 --> 00:01:58,960
vectors that no one really thought about

55
00:01:58,960 --> 00:02:00,159
during the development of these

56
00:02:00,159 --> 00:02:01,680
processes

57
00:02:01,680 --> 00:02:03,680
so we started to wonder and wanted to

58
00:02:03,680 --> 00:02:05,920
know what happens if someone is able to

59
00:02:05,920 --> 00:02:07,920
issue malicious microcode updates and

60
00:02:07,920 --> 00:02:10,399
insert trojans into the microcode or to

61
00:02:10,399 --> 00:02:12,400
put it differently what is the threat

62
00:02:12,400 --> 00:02:16,239
potential of malicious microcode updates

63
00:02:16,239 --> 00:02:18,000
and we dug a little deeper and as we

64
00:02:18,000 --> 00:02:20,080
often seen in the past security by

65
00:02:20,080 --> 00:02:22,879
obscurity is of course not the best idea

66
00:02:22,879 --> 00:02:24,800
and recently researchers were able to

67
00:02:24,800 --> 00:02:26,800
extract the secret key from some intel

68
00:02:26,800 --> 00:02:27,920
cpu

69
00:02:27,920 --> 00:02:30,480
which in theory allows them to reverse

70
00:02:30,480 --> 00:02:32,640
engineer the updates or even write their

71
00:02:32,640 --> 00:02:34,319
own custom updates

72
00:02:34,319 --> 00:02:36,480
but with the extra extraction of the

73
00:02:36,480 --> 00:02:38,480
micro put keys the researchers still

74
00:02:38,480 --> 00:02:40,080
have to understand the microcode format

75
00:02:40,080 --> 00:02:41,040
first

76
00:02:41,040 --> 00:02:42,879
and literally

77
00:02:42,879 --> 00:02:44,640
three hours before i wanted to record

78
00:02:44,640 --> 00:02:46,000
this presentation

79
00:02:46,000 --> 00:02:47,760
the same people who reported the

80
00:02:47,760 --> 00:02:49,680
extraction of the decryption key

81
00:02:49,680 --> 00:02:52,480
published a microcode disassembler tool

82
00:02:52,480 --> 00:02:53,920
which allows them for a deeper

83
00:02:53,920 --> 00:02:55,760
understanding of the microcode and

84
00:02:55,760 --> 00:02:59,200
eventually with some research deployment

85
00:02:59,200 --> 00:03:02,080
of their own custom meaningful microcode

86
00:03:02,080 --> 00:03:03,599
updates

87
00:03:03,599 --> 00:03:05,680
but not to worry though physical access

88
00:03:05,680 --> 00:03:07,920
to the processors is still necessary

89
00:03:07,920 --> 00:03:10,080
since the signing keys are not affected

90
00:03:10,080 --> 00:03:12,239
so hackers cannot issues the issue

91
00:03:12,239 --> 00:03:13,840
remote updates

92
00:03:13,840 --> 00:03:16,159
that easily

93
00:03:16,159 --> 00:03:17,440
but we still wanted to know what

94
00:03:17,440 --> 00:03:19,200
potential malicious microcode updates

95
00:03:19,200 --> 00:03:21,040
have and since none of the big vendors

96
00:03:21,040 --> 00:03:22,400
provide any kind of playground to

97
00:03:22,400 --> 00:03:24,319
research microcontrollers we had to

98
00:03:24,319 --> 00:03:25,120
build our own

99
00:03:25,120 --> 00:03:26,239
[Music]

100
00:03:26,239 --> 00:03:28,239
so for that i take purpose we built our

101
00:03:28,239 --> 00:03:30,319
own microcode evaluation platform for is

102
00:03:30,319 --> 00:03:31,200
fine

103
00:03:31,200 --> 00:03:32,959
we built a simpleris5 cpu and

104
00:03:32,959 --> 00:03:34,480
implemented the base instruction set in

105
00:03:34,480 --> 00:03:36,799
microcode the core has no instruction

106
00:03:36,799 --> 00:03:38,720
parallelism so no pipeline and we also

107
00:03:38,720 --> 00:03:40,480
have no operating system that are only

108
00:03:40,480 --> 00:03:42,799
able to run bare metal software

109
00:03:42,799 --> 00:03:44,879
to easily generate new microcoded

110
00:03:44,879 --> 00:03:46,560
instructions we built our own microcode

111
00:03:46,560 --> 00:03:48,799
generator which enables us to prototype

112
00:03:48,799 --> 00:03:50,799
and implement new instructions and more

113
00:03:50,799 --> 00:03:52,799
importantly helps us with the design of

114
00:03:52,799 --> 00:03:54,799
our own trojans

115
00:03:54,799 --> 00:03:56,080
if we have a closer look at how

116
00:03:56,080 --> 00:03:58,560
microcode works our cpu breaks down one

117
00:03:58,560 --> 00:04:00,560
microprocessor instruction so for

118
00:04:00,560 --> 00:04:03,040
example an add-off to register into a

119
00:04:03,040 --> 00:04:05,200
set of micro instructions

120
00:04:05,200 --> 00:04:07,439
and on our system in one clock cycle

121
00:04:07,439 --> 00:04:09,760
only one micro instruction is executed

122
00:04:09,760 --> 00:04:11,920
so in this small example we fetch the

123
00:04:11,920 --> 00:04:13,599
first value from the register file

124
00:04:13,599 --> 00:04:16,238
invited to operant register a

125
00:04:16,238 --> 00:04:17,839
afterwards you fetch the second value

126
00:04:17,839 --> 00:04:19,680
and write it to operand register b and

127
00:04:19,680 --> 00:04:21,680
finally we instruct the alu to add these

128
00:04:21,680 --> 00:04:23,440
two values together install the result

129
00:04:23,440 --> 00:04:25,120
in the defined register and then fetch

130
00:04:25,120 --> 00:04:26,800
the next instruction

131
00:04:26,800 --> 00:04:28,400
these little programs can be read and

132
00:04:28,400 --> 00:04:30,560
interpreted by our own micro generator

133
00:04:30,560 --> 00:04:32,320
which will generate the control signals

134
00:04:32,320 --> 00:04:34,160
that can be inserted into the microcode

135
00:04:34,160 --> 00:04:35,280
rom

136
00:04:35,280 --> 00:04:36,880
so let's have a closer look at an

137
00:04:36,880 --> 00:04:39,120
overview of our cpu and without getting

138
00:04:39,120 --> 00:04:40,800
in too much detail we will have a look

139
00:04:40,800 --> 00:04:44,240
at some of the microcode related parts

140
00:04:44,240 --> 00:04:46,400
so we already know that the microcode

141
00:04:46,400 --> 00:04:48,479
stores all the control signals which are

142
00:04:48,479 --> 00:04:51,199
used to control the data path

143
00:04:51,199 --> 00:04:52,880
so in our system we have the microcode

144
00:04:52,880 --> 00:04:55,280
rom which contains all instructions and

145
00:04:55,280 --> 00:04:57,040
a micro code register which contains

146
00:04:57,040 --> 00:04:59,280
current micro instruction and in the

147
00:04:59,280 --> 00:05:00,880
regarding micro instruction the current

148
00:05:00,880 --> 00:05:02,800
control configuration is stored so for

149
00:05:02,800 --> 00:05:04,720
example which register should be written

150
00:05:04,720 --> 00:05:07,520
to or which operation in the lu has to

151
00:05:07,520 --> 00:05:09,440
be performed

152
00:05:09,440 --> 00:05:11,039
now that we have a closer look at how

153
00:05:11,039 --> 00:05:12,880
microcode generally works let's have a

154
00:05:12,880 --> 00:05:14,160
look at how we can build microcode

155
00:05:14,160 --> 00:05:15,919
trojans

156
00:05:15,919 --> 00:05:17,039
and we're going to start with the

157
00:05:17,039 --> 00:05:19,199
capabilities that the attacker does so

158
00:05:19,199 --> 00:05:20,880
first of all he can manipulate the

159
00:05:20,880 --> 00:05:23,120
behavior of any microcoded instruction

160
00:05:23,120 --> 00:05:24,800
and most interestingly even add new

161
00:05:24,800 --> 00:05:26,800
custom instruction of his own

162
00:05:26,800 --> 00:05:28,240
he has access to the general purpose

163
00:05:28,240 --> 00:05:29,919
register so you could read or write to

164
00:05:29,919 --> 00:05:31,680
the current program counter or access

165
00:05:31,680 --> 00:05:33,680
any value in the register file

166
00:05:33,680 --> 00:05:35,440
on most systems there also exists

167
00:05:35,440 --> 00:05:37,120
special scratch registers which can only

168
00:05:37,120 --> 00:05:38,800
be accessed by the microcode to store

169
00:05:38,800 --> 00:05:41,280
temporary values for calculations

170
00:05:41,280 --> 00:05:43,120
so generally speaking all of this gives

171
00:05:43,120 --> 00:05:44,160
the attacker turing complete

172
00:05:44,160 --> 00:05:46,160
capabilities here's fine granular

173
00:05:46,160 --> 00:05:48,000
control of the data class including the

174
00:05:48,000 --> 00:05:50,080
nlu and can also execute conditional

175
00:05:50,080 --> 00:05:52,479
advantages in the microcode

176
00:05:52,479 --> 00:05:54,560
but there exists one big problem from

177
00:05:54,560 --> 00:05:56,400
the attacker's perspective and that is

178
00:05:56,400 --> 00:05:58,080
that the cpu is missing high level

179
00:05:58,080 --> 00:05:59,280
context

180
00:05:59,280 --> 00:06:01,680
from this perspective of the cpu we can

181
00:06:01,680 --> 00:06:03,759
only see one instruction at a time since

182
00:06:03,759 --> 00:06:05,680
the cpu does not have a memory of some

183
00:06:05,680 --> 00:06:06,479
sort

184
00:06:06,479 --> 00:06:08,319
and to build meaningful trojans he has

185
00:06:08,319 --> 00:06:10,800
overcome two major problems he needs

186
00:06:10,800 --> 00:06:12,560
some information of what is happening on

187
00:06:12,560 --> 00:06:14,800
a higher level and he is also quite

188
00:06:14,800 --> 00:06:16,720
constrained by the fact that the storage

189
00:06:16,720 --> 00:06:18,840
of the microcontroller is rather

190
00:06:18,840 --> 00:06:21,039
limited to overcome the problem of

191
00:06:21,039 --> 00:06:22,639
having only limited information

192
00:06:22,639 --> 00:06:25,280
available we define two trigger classes

193
00:06:25,280 --> 00:06:26,960
the first one are the stateless triggers

194
00:06:26,960 --> 00:06:28,720
which do not possess any kind of state

195
00:06:28,720 --> 00:06:30,800
or memory and can only see the currently

196
00:06:30,800 --> 00:06:33,120
executed instruction

197
00:06:33,120 --> 00:06:34,639
this limits the attacker to rather

198
00:06:34,639 --> 00:06:36,240
simple trigger condition for example

199
00:06:36,240 --> 00:06:38,080
magic values which are used to trigger

200
00:06:38,080 --> 00:06:39,600
the closing payload

201
00:06:39,600 --> 00:06:41,840
however the attacker can combine

202
00:06:41,840 --> 00:06:44,000
multiple cpu registers and statuses for

203
00:06:44,000 --> 00:06:45,600
example the problem counter or the

204
00:06:45,600 --> 00:06:47,440
registers from the register file which

205
00:06:47,440 --> 00:06:49,199
eventually allows him to design more

206
00:06:49,199 --> 00:06:51,440
advanced triggers

207
00:06:51,440 --> 00:06:52,960
the second class of triggers are the

208
00:06:52,960 --> 00:06:54,479
so-called stateful triggers where the

209
00:06:54,479 --> 00:06:56,560
attacker is able to possess some kind of

210
00:06:56,560 --> 00:06:58,400
state that spans across multiple

211
00:06:58,400 --> 00:06:59,520
instructions

212
00:06:59,520 --> 00:07:01,120
here we leverage some memory or

213
00:07:01,120 --> 00:07:02,720
registers for example the microcode

214
00:07:02,720 --> 00:07:04,479
threat registers which allow for

215
00:07:04,479 --> 00:07:06,160
implementation of counters or state

216
00:07:06,160 --> 00:07:07,599
machines

217
00:07:07,599 --> 00:07:09,360
this enables the attacker to match

218
00:07:09,360 --> 00:07:11,759
instruction sequences allowing for some

219
00:07:11,759 --> 00:07:13,919
conclusion about high level information

220
00:07:13,919 --> 00:07:16,479
however the small size of the microcode

221
00:07:16,479 --> 00:07:19,680
rom is again the limiting factor here

222
00:07:19,680 --> 00:07:21,440
in our paper we presented several

223
00:07:21,440 --> 00:07:22,800
version case studies but due to the

224
00:07:22,800 --> 00:07:24,560
limited time of this presentation we

225
00:07:24,560 --> 00:07:26,160
will only discuss one of these case

226
00:07:26,160 --> 00:07:27,199
studies

227
00:07:27,199 --> 00:07:28,960
the chosen attacks implementation of a

228
00:07:28,960 --> 00:07:30,880
secure boot implementation from a high

229
00:07:30,880 --> 00:07:32,560
level perspective the boot process on

230
00:07:32,560 --> 00:07:34,639
embedded system where secure boot can be

231
00:07:34,639 --> 00:07:36,400
the following first we load the mic

232
00:07:36,400 --> 00:07:38,479
report update to the microcode rom we'll

233
00:07:38,479 --> 00:07:40,000
then load the firmware load the

234
00:07:40,000 --> 00:07:41,680
signature of the firmware and then check

235
00:07:41,680 --> 00:07:43,199
whether the signature is valid for the

236
00:07:43,199 --> 00:07:45,280
firmware or not if the signature is not

237
00:07:45,280 --> 00:07:46,639
vetted it means the firmware has been

238
00:07:46,639 --> 00:07:48,400
tampered with and we go to a hold state

239
00:07:48,400 --> 00:07:50,080
and stop the execution

240
00:07:50,080 --> 00:07:52,000
if the signature is weathered we execute

241
00:07:52,000 --> 00:07:54,240
the firmware and proceed as normal

242
00:07:54,240 --> 00:07:55,919
the code that performs the security

243
00:07:55,919 --> 00:07:57,680
process is usually stored in a static

244
00:07:57,680 --> 00:07:59,919
read-only memory the rom is often used

245
00:07:59,919 --> 00:08:01,599
for when tempering of the security

246
00:08:01,599 --> 00:08:03,360
implementation however this means that

247
00:08:03,360 --> 00:08:05,039
the code cannot be changed or updated

248
00:08:05,039 --> 00:08:07,199
once it has been deployed we assume that

249
00:08:07,199 --> 00:08:08,800
the attacker has access to the boot code

250
00:08:08,800 --> 00:08:11,039
binary which he exactly from the rom and

251
00:08:11,039 --> 00:08:12,720
now wants to load his own religious

252
00:08:12,720 --> 00:08:14,560
firmware for which he is not able to

253
00:08:14,560 --> 00:08:16,639
generate a valid signature

254
00:08:16,639 --> 00:08:18,160
we will show that with the help of a

255
00:08:18,160 --> 00:08:20,080
malicious microcode update and by simply

256
00:08:20,080 --> 00:08:22,080
modifying only one instruction the

257
00:08:22,080 --> 00:08:24,000
attacker is able to bypass the securable

258
00:08:24,000 --> 00:08:25,919
check by manipulating the program flow

259
00:08:25,919 --> 00:08:28,000
to always take the jump that executes

260
00:08:28,000 --> 00:08:29,680
the firmware

261
00:08:29,680 --> 00:08:31,680
the entire verification in our example

262
00:08:31,680 --> 00:08:33,120
comes down to the if query of the

263
00:08:33,120 --> 00:08:35,279
verification result we jump to the

264
00:08:35,279 --> 00:08:37,519
execution of the firmware in line 2 if

265
00:08:37,519 --> 00:08:39,760
the verification succeeds and trap the

266
00:08:39,760 --> 00:08:41,919
cpu if it fails when we look at the

267
00:08:41,919 --> 00:08:44,399
compiled code the if query is evaluated

268
00:08:44,399 --> 00:08:46,240
with the branch equal instruction which

269
00:08:46,240 --> 00:08:48,000
determines which branch we take

270
00:08:48,000 --> 00:08:49,200
depending on the result of the

271
00:08:49,200 --> 00:08:50,640
verification

272
00:08:50,640 --> 00:08:53,200
the attack is now the following

273
00:08:53,200 --> 00:08:55,760
we want to insert a modified firmware

274
00:08:55,760 --> 00:08:57,200
which you can boot via a malicious

275
00:08:57,200 --> 00:08:59,200
microcode update that modifies the

276
00:08:59,200 --> 00:09:01,760
implementation of the bq instruction we

277
00:09:01,760 --> 00:09:04,560
set our microcode chosen trigger to the

278
00:09:04,560 --> 00:09:06,720
specific baq instruction at the address

279
00:09:06,720 --> 00:09:08,399
where the check takes place

280
00:09:08,399 --> 00:09:10,720
for our payload we manipulate the beq

281
00:09:10,720 --> 00:09:12,720
instruction to always take the jump that

282
00:09:12,720 --> 00:09:14,800
executes the firmware so let's have a

283
00:09:14,800 --> 00:09:16,640
closer look at the necessary adjustments

284
00:09:16,640 --> 00:09:19,040
to the bq implemented in microcode in

285
00:09:19,040 --> 00:09:20,959
the normal case where no modification

286
00:09:20,959 --> 00:09:22,800
has taken place the signature matches

287
00:09:22,800 --> 00:09:25,519
the firmware and the verify succeeds if

288
00:09:25,519 --> 00:09:26,959
we have a look at what happens on a

289
00:09:26,959 --> 00:09:28,959
lower level the result of the verify

290
00:09:28,959 --> 00:09:30,720
function is evaluated with the help of

291
00:09:30,720 --> 00:09:32,080
the beq

292
00:09:32,080 --> 00:09:34,080
on the microcode level on the right we

293
00:09:34,080 --> 00:09:35,839
first load both values that we want to

294
00:09:35,839 --> 00:09:37,600
compare and since we are in the true

295
00:09:37,600 --> 00:09:39,839
case simply fetch the next instruction

296
00:09:39,839 --> 00:09:43,200
which means that we execute the firmware

297
00:09:43,200 --> 00:09:44,959
if we now modify the vmware the

298
00:09:44,959 --> 00:09:47,279
verification fails since we are not able

299
00:09:47,279 --> 00:09:49,600
to generate a valid signature so when

300
00:09:49,600 --> 00:09:51,920
our verification is again evaluated we

301
00:09:51,920 --> 00:09:54,160
take the second case of the beq and add

302
00:09:54,160 --> 00:09:56,160
an offset to the pc and jump to the

303
00:09:56,160 --> 00:09:59,680
false case where we trap the cpu

304
00:09:59,680 --> 00:10:01,279
now let's insert the trojan into the

305
00:10:01,279 --> 00:10:03,839
microcode that will execute the firmware

306
00:10:03,839 --> 00:10:06,000
even though the verify still fails we

307
00:10:06,000 --> 00:10:07,920
add an additional check to our beq

308
00:10:07,920 --> 00:10:10,160
implementation in microcode since we

309
00:10:10,160 --> 00:10:12,079
know the exact address of our targeted

310
00:10:12,079 --> 00:10:14,720
bfu we can trigger our trojan if we are

311
00:10:14,720 --> 00:10:16,720
currently executing this one specific

312
00:10:16,720 --> 00:10:18,399
beq instruction

313
00:10:18,399 --> 00:10:19,920
and thanks to a microcode surgeon

314
00:10:19,920 --> 00:10:21,440
instead of going into the fourth case

315
00:10:21,440 --> 00:10:23,600
below the chosen will be activated and

316
00:10:23,600 --> 00:10:25,680
the firmware is executed even though the

317
00:10:25,680 --> 00:10:28,320
signature check fails

318
00:10:28,320 --> 00:10:30,480
in conclusion microcode trojans do

319
00:10:30,480 --> 00:10:32,720
provide a powerful attack vector once

320
00:10:32,720 --> 00:10:34,720
the obstacle of the limited high level

321
00:10:34,720 --> 00:10:37,519
information paradigm has been overcome

322
00:10:37,519 --> 00:10:39,120
they have to be custom tailored to the

323
00:10:39,120 --> 00:10:40,720
regarding cpu architecture and

324
00:10:40,720 --> 00:10:42,640
application and in the paper we

325
00:10:42,640 --> 00:10:44,880
demonstrate more trojans discuss how the

326
00:10:44,880 --> 00:10:46,320
trojans would behave on more rebound

327
00:10:46,320 --> 00:10:48,160
systems and introduce possible

328
00:10:48,160 --> 00:10:50,079
mitigations to defend against

329
00:10:50,079 --> 00:10:52,560
microcontrollers in general

330
00:10:52,560 --> 00:10:54,399
so thank you for your attention and if

331
00:10:54,399 --> 00:10:56,079
you have any questions feel free to

332
00:10:56,079 --> 00:10:59,560
contact us

333
00:11:04,560 --> 00:11:06,640
you

