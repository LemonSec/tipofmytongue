1
00:00:08,080 --> 00:00:10,320
hi i'm stefan maggie i'm a phd student

2
00:00:10,320 --> 00:00:11,840
here at virginia tech and today i'm

3
00:00:11,840 --> 00:00:13,200
presenting our work breaking through

4
00:00:13,200 --> 00:00:14,719
binaries compiler quality

5
00:00:14,719 --> 00:00:16,480
instrumentation for better binary only

6
00:00:16,480 --> 00:00:18,160
fuzzing this is joint work with her

7
00:00:18,160 --> 00:00:19,439
friends down the road at the university

8
00:00:19,439 --> 00:00:22,080
of virginia and winton jason heiser and

9
00:00:22,080 --> 00:00:24,160
jack davidson as well as my advisor here

10
00:00:24,160 --> 00:00:26,400
at virginia tech matthew hicks so a bit

11
00:00:26,400 --> 00:00:28,240
of background you know software quality

12
00:00:28,240 --> 00:00:30,240
assurances by now as as we all know a

13
00:00:30,240 --> 00:00:31,119
critical part of the software

14
00:00:31,119 --> 00:00:32,800
development life cycle both pre and post

15
00:00:32,800 --> 00:00:34,800
deployment developers spend significant

16
00:00:34,800 --> 00:00:36,480
amounts of time and energy on software

17
00:00:36,480 --> 00:00:38,160
testing approaches that automate the bug

18
00:00:38,160 --> 00:00:40,160
finding process of which fuzzing is a

19
00:00:40,160 --> 00:00:42,640
part of fuzzing known as fuzz testing

20
00:00:42,640 --> 00:00:44,480
is basically a carpet bombing approach

21
00:00:44,480 --> 00:00:46,160
to software testing that aims to

22
00:00:46,160 --> 00:00:47,840
generate massive amounts of test cases

23
00:00:47,840 --> 00:00:49,600
and then keep the few test cases that

24
00:00:49,600 --> 00:00:51,760
exercise some predefined metric of

25
00:00:51,760 --> 00:00:53,760
interesting behavior and then repeat

26
00:00:53,760 --> 00:00:55,840
this process by only mutating those few

27
00:00:55,840 --> 00:00:57,680
interesting test cases so in the real

28
00:00:57,680 --> 00:00:59,199
world the most common form of fuzzing

29
00:00:59,199 --> 00:01:00,480
and used today is what's called coverage

30
00:01:00,480 --> 00:01:02,480
guided great box fuzzing

31
00:01:02,480 --> 00:01:03,920
companies the likes of google and

32
00:01:03,920 --> 00:01:05,680
microsoft use this extensively to find

33
00:01:05,680 --> 00:01:07,600
bugs in their code and there's a number

34
00:01:07,600 --> 00:01:08,960
of really cool platforms out there that

35
00:01:08,960 --> 00:01:10,400
are aiming to make it a lot more user

36
00:01:10,400 --> 00:01:13,680
friendly like afl plus plus and git lab

37
00:01:13,680 --> 00:01:15,600
as well as lip buzzer so great box

38
00:01:15,600 --> 00:01:17,280
buzzing the name implies is a trade-off

39
00:01:17,280 --> 00:01:19,360
between black box and white box buzzing

40
00:01:19,360 --> 00:01:20,960
black box buzzing assumes you have no

41
00:01:20,960 --> 00:01:23,360
access to the internals whatsoever of

42
00:01:23,360 --> 00:01:25,520
the target program and thus because

43
00:01:25,520 --> 00:01:27,280
you're only tracking basic input output

44
00:01:27,280 --> 00:01:29,040
it's very very fast but you don't get

45
00:01:29,040 --> 00:01:30,560
any kind of meaningful precision out of

46
00:01:30,560 --> 00:01:32,320
it and white box testing on the other

47
00:01:32,320 --> 00:01:34,000
hand assumes you have the maximal level

48
00:01:34,000 --> 00:01:35,920
of knowledge of the program's internals

49
00:01:35,920 --> 00:01:37,520
and of course you get more precision but

50
00:01:37,520 --> 00:01:39,040
it's just so heavy weight that it

51
00:01:39,040 --> 00:01:40,799
doesn't actually scale on any modern

52
00:01:40,799 --> 00:01:42,479
programs and in the middle there is

53
00:01:42,479 --> 00:01:44,159
great box buzzing which assumes you have

54
00:01:44,159 --> 00:01:46,320
some kind of lightweight level of access

55
00:01:46,320 --> 00:01:48,399
to the target programs internals

56
00:01:48,399 --> 00:01:50,159
for example the ability to trace code

57
00:01:50,159 --> 00:01:52,799
coverage and as such it's a lot faster

58
00:01:52,799 --> 00:01:54,240
than white box buzzing and a lot more

59
00:01:54,240 --> 00:01:56,399
effective than black box buzzing and the

60
00:01:56,399 --> 00:01:58,399
key requirement here is that you have to

61
00:01:58,399 --> 00:02:00,240
be able to instrument the target program

62
00:02:00,240 --> 00:02:02,560
to achieve this level of introspection

63
00:02:02,560 --> 00:02:04,320
and if your target program is open

64
00:02:04,320 --> 00:02:05,920
source well the good news is you can

65
00:02:05,920 --> 00:02:07,600
just use any off-the-shelf compiler and

66
00:02:07,600 --> 00:02:09,758
add this in at compile time however this

67
00:02:09,758 --> 00:02:11,440
instrumentation is not always easy to

68
00:02:11,440 --> 00:02:13,200
achieve so if your target program is

69
00:02:13,200 --> 00:02:15,200
distributed as what we call binary only

70
00:02:15,200 --> 00:02:16,720
meaning you don't have access to

71
00:02:16,720 --> 00:02:18,239
instrument the source code it could be

72
00:02:18,239 --> 00:02:19,920
because of proprietary reasons or

73
00:02:19,920 --> 00:02:21,440
commercialization or even because the

74
00:02:21,440 --> 00:02:22,959
developers just prefer to release the

75
00:02:22,959 --> 00:02:25,440
code as pre-compiled you're kind of out

76
00:02:25,440 --> 00:02:27,599
of luck and there's a big gap right now

77
00:02:27,599 --> 00:02:29,760
in fuzzing between source available

78
00:02:29,760 --> 00:02:31,360
instrumentation and binary only

79
00:02:31,360 --> 00:02:32,959
instrumentation so on one hand the

80
00:02:32,959 --> 00:02:35,120
semantic richness of open source code

81
00:02:35,120 --> 00:02:36,720
makes it easy to get high efficiency

82
00:02:36,720 --> 00:02:38,239
fuzzing instrumentation as well as

83
00:02:38,239 --> 00:02:39,599
adding in these kinds of fuzzing

84
00:02:39,599 --> 00:02:41,920
enhancing program transformations but on

85
00:02:41,920 --> 00:02:43,680
the other hand the semantic opaqueness

86
00:02:43,680 --> 00:02:45,440
of binary level code makes it much

87
00:02:45,440 --> 00:02:46,959
harder to maintain the same level of

88
00:02:46,959 --> 00:02:48,959
performance and as such any kind of

89
00:02:48,959 --> 00:02:50,480
fuzzing enhancing transformations you

90
00:02:50,480 --> 00:02:51,760
want to bring over are going to be

91
00:02:51,760 --> 00:02:53,519
outweighed by the high overhead of this

92
00:02:53,519 --> 00:02:54,959
kind of instrumentation so our

93
00:02:54,959 --> 00:02:56,400
motivating question here was can

94
00:02:56,400 --> 00:02:59,280
compiler level speed and capabilities be

95
00:02:59,280 --> 00:03:01,519
attained in a binary only fuzzing use

96
00:03:01,519 --> 00:03:02,879
case and this brings us to our

97
00:03:02,879 --> 00:03:04,720
discussion of compiler quality binary

98
00:03:04,720 --> 00:03:06,720
fuzzing instrumentation so as a guiding

99
00:03:06,720 --> 00:03:07,920
principle we felt it necessary to

100
00:03:07,920 --> 00:03:09,120
identify the properties of

101
00:03:09,120 --> 00:03:11,200
instrumentation that must be achieved to

102
00:03:11,200 --> 00:03:13,280
attain compiler level speed and

103
00:03:13,280 --> 00:03:15,280
transformation and looking at available

104
00:03:15,280 --> 00:03:16,720
options for binary only fuzzing

105
00:03:16,720 --> 00:03:18,239
instrumentation under the lens of a

106
00:03:18,239 --> 00:03:21,200
compiler we see four big considerations

107
00:03:21,200 --> 00:03:23,840
code insertion code invocation register

108
00:03:23,840 --> 00:03:25,920
usage and scalability and to attain

109
00:03:25,920 --> 00:03:28,480
compiler quality instrumentation we must

110
00:03:28,480 --> 00:03:30,879
thus match how compilers answer each of

111
00:03:30,879 --> 00:03:33,120
these four considerations so in our

112
00:03:33,120 --> 00:03:35,040
first consideration of how do we insert

113
00:03:35,040 --> 00:03:37,200
code we have two basic options for

114
00:03:37,200 --> 00:03:39,519
binary level instrumentation the first

115
00:03:39,519 --> 00:03:41,760
dynamic translation operates by running

116
00:03:41,760 --> 00:03:44,080
an input binary and instrumenting it on

117
00:03:44,080 --> 00:03:45,920
the fly as it's translating its

118
00:03:45,920 --> 00:03:48,000
instructions to the host's instruction

119
00:03:48,000 --> 00:03:50,000
set now because the cost of translation

120
00:03:50,000 --> 00:03:51,680
is typically quite high as it's achieved

121
00:03:51,680 --> 00:03:53,760
through means like emulation and

122
00:03:53,760 --> 00:03:55,920
translation proceeds any instrumentation

123
00:03:55,920 --> 00:03:58,080
or analysis phases repeatedly paying

124
00:03:58,080 --> 00:03:59,920
this translation cost makes dynamic

125
00:03:59,920 --> 00:04:01,920
translation very unworkable for

126
00:04:01,920 --> 00:04:03,920
maintaining compiler level performance

127
00:04:03,920 --> 00:04:06,080
and fuzzing now the second category of

128
00:04:06,080 --> 00:04:08,480
binary instrumentation static rewriting

129
00:04:08,480 --> 00:04:10,480
operates by taking an input binary

130
00:04:10,480 --> 00:04:12,959
lifting decompiling or decoding it to an

131
00:04:12,959 --> 00:04:15,040
intermediate representation and applying

132
00:04:15,040 --> 00:04:17,040
all transformation or analysis passes to

133
00:04:17,040 --> 00:04:19,279
this ir level before reconstituting it

134
00:04:19,279 --> 00:04:21,199
to an output binary now because static

135
00:04:21,199 --> 00:04:22,639
rewriting performs these heavyweight

136
00:04:22,639 --> 00:04:24,880
tasks prior to runtime this makes it

137
00:04:24,880 --> 00:04:26,720
much more well suited to attaining high

138
00:04:26,720 --> 00:04:28,080
level performance for fuzzing

139
00:04:28,080 --> 00:04:29,840
instrumentation additionally static

140
00:04:29,840 --> 00:04:31,360
rewriting is almost analogous to how

141
00:04:31,360 --> 00:04:33,600
compilers work by lifting to an ir and

142
00:04:33,600 --> 00:04:34,960
then generating the output binary from

143
00:04:34,960 --> 00:04:37,280
this modified ir thus we conclude that

144
00:04:37,280 --> 00:04:39,520
to attain compiler level performance we

145
00:04:39,520 --> 00:04:41,680
need to insert code via static rewriting

146
00:04:41,680 --> 00:04:43,360
unfortunately there are a few static

147
00:04:43,360 --> 00:04:45,199
writing options for binary only fuzzing

148
00:04:45,199 --> 00:04:47,120
as most off-the-shelf tools instead

149
00:04:47,120 --> 00:04:48,960
prefer to use dynamic translation or

150
00:04:48,960 --> 00:04:50,800
hardware supported tracing neither of

151
00:04:50,800 --> 00:04:52,240
which are compatible with compiler

152
00:04:52,240 --> 00:04:54,400
quality performance and transformation

153
00:04:54,400 --> 00:04:56,560
as a second consideration we look to how

154
00:04:56,560 --> 00:04:58,720
inserted code will be invoked during run

155
00:04:58,720 --> 00:05:00,240
time the first approach is called

156
00:05:00,240 --> 00:05:02,160
trampolining which basically means you

157
00:05:02,160 --> 00:05:03,919
insert a payload function and then

158
00:05:03,919 --> 00:05:06,080
redirect control flow to that payload

159
00:05:06,080 --> 00:05:08,639
function via a call and redirect it back

160
00:05:08,639 --> 00:05:10,720
via a return however the repeated

161
00:05:10,720 --> 00:05:12,639
redirection to and from this payload

162
00:05:12,639 --> 00:05:14,320
function adds significant overhead over

163
00:05:14,320 --> 00:05:16,800
time and is thus undesirable for fuzzing

164
00:05:16,800 --> 00:05:18,880
the alternative is to instead inline the

165
00:05:18,880 --> 00:05:20,560
instrumentation's instructions within

166
00:05:20,560 --> 00:05:22,320
the original instructions and this is

167
00:05:22,320 --> 00:05:24,000
actually the preferred mechanism of most

168
00:05:24,000 --> 00:05:26,000
compilers today as it allows for very

169
00:05:26,000 --> 00:05:28,000
tight and optimized instrumentation

170
00:05:28,000 --> 00:05:29,840
insertion and in the world of binary

171
00:05:29,840 --> 00:05:31,840
only fuzzing instrumentation we see that

172
00:05:31,840 --> 00:05:33,759
only dynamic translators consistently

173
00:05:33,759 --> 00:05:35,919
support inlining a third consideration

174
00:05:35,919 --> 00:05:37,919
toward compiler quality instrumentation

175
00:05:37,919 --> 00:05:41,120
is how cpu registers are used and reused

176
00:05:41,120 --> 00:05:42,880
a register's liveness denotes whether or

177
00:05:42,880 --> 00:05:44,960
not it is currently in use at that point

178
00:05:44,960 --> 00:05:47,120
in the execution avoiding clobbering or

179
00:05:47,120 --> 00:05:49,840
overwriting in use registers is critical

180
00:05:49,840 --> 00:05:51,840
as careless instrumentation assertion

181
00:05:51,840 --> 00:05:53,440
can and will crash the resulting

182
00:05:53,440 --> 00:05:56,319
modified binary aliveness unaware scheme

183
00:05:56,319 --> 00:05:58,400
operates conservatively by assuming that

184
00:05:58,400 --> 00:06:00,560
all registers are in use taking the

185
00:06:00,560 --> 00:06:02,160
precaution to save and restore these

186
00:06:02,160 --> 00:06:04,720
upon any instrumentation entry and exit

187
00:06:04,720 --> 00:06:06,479
however the instruction level cost of

188
00:06:06,479 --> 00:06:08,000
doing this saving and restoring

189
00:06:08,000 --> 00:06:10,319
needlessly as in for registers that are

190
00:06:10,319 --> 00:06:12,960
not in use adds quite a bit of overhead

191
00:06:12,960 --> 00:06:15,199
per fuzzing execution on the other hand

192
00:06:15,199 --> 00:06:17,840
a liveness aware scheme employs analyses

193
00:06:17,840 --> 00:06:20,639
to identify and prioritize usage of dead

194
00:06:20,639 --> 00:06:22,960
registers so as to minimize the total

195
00:06:22,960 --> 00:06:24,880
save and restore instruction level

196
00:06:24,880 --> 00:06:26,720
overhead as some registers are even

197
00:06:26,720 --> 00:06:28,720
costlier to save and restore than others

198
00:06:28,720 --> 00:06:31,680
such as x86's e-flags register it is

199
00:06:31,680 --> 00:06:33,199
important to work around these when

200
00:06:33,199 --> 00:06:35,520
possible as tight register usage is

201
00:06:35,520 --> 00:06:37,199
critical to modern compiler's code

202
00:06:37,199 --> 00:06:39,199
optimizations it is thus critical to

203
00:06:39,199 --> 00:06:41,520
match this in attaining compiler quality

204
00:06:41,520 --> 00:06:43,280
performance and binary only fuzzing

205
00:06:43,280 --> 00:06:45,039
instrumentation however we observe that

206
00:06:45,039 --> 00:06:46,960
liveness awareness is more consistently

207
00:06:46,960 --> 00:06:49,280
utilized by dynamic translation but it

208
00:06:49,280 --> 00:06:50,960
is unlikely to be of any significant

209
00:06:50,960 --> 00:06:52,639
benefit through their already steep

210
00:06:52,639 --> 00:06:54,400
overheads our fourth and final

211
00:06:54,400 --> 00:06:56,800
consideration is scalability modern

212
00:06:56,800 --> 00:06:58,639
compilers are largely platform and

213
00:06:58,639 --> 00:07:00,720
language agnostic however this is a

214
00:07:00,720 --> 00:07:02,560
challenge to uphold at a binary only

215
00:07:02,560 --> 00:07:04,160
level given the semantically opaque

216
00:07:04,160 --> 00:07:06,240
nature of binary code at the very

217
00:07:06,240 --> 00:07:07,680
minimum a compiler quality

218
00:07:07,680 --> 00:07:09,759
instrumentation for binary only fuzzing

219
00:07:09,759 --> 00:07:11,440
should support multiple platforms such

220
00:07:11,440 --> 00:07:13,360
as linux and windows with respect to

221
00:07:13,360 --> 00:07:15,039
binary characteristics there should be

222
00:07:15,039 --> 00:07:16,880
support for common languages code

223
00:07:16,880 --> 00:07:18,880
layouts and characteristics like debug

224
00:07:18,880 --> 00:07:21,360
symbol stripping thus a compiler quality

225
00:07:21,360 --> 00:07:22,960
instrumenter for binary only fuzzing

226
00:07:22,960 --> 00:07:24,639
should scale to all common binary

227
00:07:24,639 --> 00:07:26,880
formats in the binary only world it is

228
00:07:26,880 --> 00:07:28,800
only dynamic translators and hardware

229
00:07:28,800 --> 00:07:30,400
supported tracing which achieve this

230
00:07:30,400 --> 00:07:33,120
scalability yet neither retain both

231
00:07:33,120 --> 00:07:34,880
compiler quality speed and

232
00:07:34,880 --> 00:07:37,440
transformation abilities as no existing

233
00:07:37,440 --> 00:07:39,280
binary fuzzing instrumenters currently

234
00:07:39,280 --> 00:07:41,280
meet all four compiler quality

235
00:07:41,280 --> 00:07:43,280
instrumentation attributes we thus

236
00:07:43,280 --> 00:07:45,759
designed zaful a platform for binary

237
00:07:45,759 --> 00:07:47,120
fuzzing instrumentation and

238
00:07:47,120 --> 00:07:49,199
transformation that upholds the

239
00:07:49,199 --> 00:07:51,680
principles of statically inserted inline

240
00:07:51,680 --> 00:07:53,599
instrumentation with liveness aware

241
00:07:53,599 --> 00:07:55,599
optimization zaful is adapted from the

242
00:07:55,599 --> 00:07:57,680
zipper binary rewriting project it

243
00:07:57,680 --> 00:08:00,960
currently supports x8664 elf binaries

244
00:08:00,960 --> 00:08:02,639
and has cross-platform support for

245
00:08:02,639 --> 00:08:05,440
windows pe32 plus binaries given an

246
00:08:05,440 --> 00:08:07,440
input binary zaful first invokes a

247
00:08:07,440 --> 00:08:09,280
static rewriting component to build a

248
00:08:09,280 --> 00:08:11,199
binary representation and stored it in

249
00:08:11,199 --> 00:08:13,599
an ir data struct the ir is then passed

250
00:08:13,599 --> 00:08:15,680
through zipper's zax transformation and

251
00:08:15,680 --> 00:08:17,840
instrumentation phases the first being

252
00:08:17,840 --> 00:08:19,919
control flow optimization to produce an

253
00:08:19,919 --> 00:08:21,680
optimized control flow graph following

254
00:08:21,680 --> 00:08:23,440
this we invoke zax's control flow

255
00:08:23,440 --> 00:08:25,599
analysis phase which extracts meta

256
00:08:25,599 --> 00:08:27,199
characteristics such as the dominator

257
00:08:27,199 --> 00:08:29,199
tree given any meta characteristics

258
00:08:29,199 --> 00:08:30,560
extracted in the previous phase

259
00:08:30,560 --> 00:08:32,799
instrumentation point selection is made

260
00:08:32,799 --> 00:08:34,399
finally with the control flow graph of

261
00:08:34,399 --> 00:08:36,320
marked instrumentation points any

262
00:08:36,320 --> 00:08:38,240
liveness analysis or instrumentation

263
00:08:38,240 --> 00:08:39,839
templates for blocker edge coverage are

264
00:08:39,839 --> 00:08:42,240
applied and instrumentation is inserted

265
00:08:42,240 --> 00:08:44,399
the modified ir is then passed back to

266
00:08:44,399 --> 00:08:46,480
the static rewriter which reconstitutes

267
00:08:46,480 --> 00:08:48,640
the output binary so fuzzing can begin

268
00:08:48,640 --> 00:08:50,320
at this time zaful is designed to

269
00:08:50,320 --> 00:08:52,399
support the afl fuzzer but with minor

270
00:08:52,399 --> 00:08:54,080
engineering effort it is feasible to

271
00:08:54,080 --> 00:08:56,399
support other fuzzers like hong fuzz to

272
00:08:56,399 --> 00:08:58,399
demonstrate zaful's ability to implement

273
00:08:58,399 --> 00:09:00,720
compiler style code transformations for

274
00:09:00,720 --> 00:09:02,720
binary only fuzzing we implement the

275
00:09:02,720 --> 00:09:04,880
suite of five llvm based fuzzing

276
00:09:04,880 --> 00:09:06,160
transformations from the fuzzing

277
00:09:06,160 --> 00:09:07,680
literature these include performance

278
00:09:07,680 --> 00:09:09,279
transformations which typically try to

279
00:09:09,279 --> 00:09:11,200
reduce the overhead of instrumentation

280
00:09:11,200 --> 00:09:13,279
points and feedback transformations that

281
00:09:13,279 --> 00:09:15,360
expand fuzzing scope to a finer grain

282
00:09:15,360 --> 00:09:17,519
notion of interesting behavior it is

283
00:09:17,519 --> 00:09:19,760
zaful's low level api that brings a

284
00:09:19,760 --> 00:09:21,680
semantic richness to the otherwise

285
00:09:21,680 --> 00:09:24,080
semantically opaque world that is binary

286
00:09:24,080 --> 00:09:25,519
only fuzzing

287
00:09:25,519 --> 00:09:27,600
and now i'll discuss our evaluation for

288
00:09:27,600 --> 00:09:29,680
our fuzzing benchmarks we selected eight

289
00:09:29,680 --> 00:09:31,920
diverse open source as well as five

290
00:09:31,920 --> 00:09:34,000
closed source binaries our bug finding

291
00:09:34,000 --> 00:09:36,240
evaluations consisted of five 24-hour

292
00:09:36,240 --> 00:09:37,839
trials per benchmark and in our

293
00:09:37,839 --> 00:09:39,839
performance evaluations we scaled our

294
00:09:39,839 --> 00:09:42,240
overhead relative to non-tracing speed

295
00:09:42,240 --> 00:09:44,480
for precision experiments we enumerated

296
00:09:44,480 --> 00:09:46,720
erroneously unrecovered instructions and

297
00:09:46,720 --> 00:09:48,399
compared the true and false coverage

298
00:09:48,399 --> 00:09:49,839
signal to compiler fuzzing

299
00:09:49,839 --> 00:09:51,920
instrumentation and to test scalability

300
00:09:51,920 --> 00:09:53,920
we used either our automated smoke test

301
00:09:53,920 --> 00:09:55,839
infrastructure or manually running the

302
00:09:55,839 --> 00:09:58,000
transformed binaries in evaluating

303
00:09:58,000 --> 00:10:00,240
whether zaful enhances binary fuzzing

304
00:10:00,240 --> 00:10:02,000
effectiveness we see that compared to

305
00:10:02,000 --> 00:10:03,519
the state-of-the-art static

306
00:10:03,519 --> 00:10:06,079
rewriting-based afl dynast and dynamic

307
00:10:06,079 --> 00:10:08,480
translation based afl kimu zaful helped

308
00:10:08,480 --> 00:10:11,680
expose 26 percent and 131 percent more

309
00:10:11,680 --> 00:10:14,000
unique triage crashes over these two

310
00:10:14,000 --> 00:10:14,959
tools

311
00:10:14,959 --> 00:10:16,880
in examining whether zaful speed is near

312
00:10:16,880 --> 00:10:18,800
that of compilers we see that compared

313
00:10:18,800 --> 00:10:21,920
to the compiler level 24 overhead zaful

314
00:10:21,920 --> 00:10:23,600
with and without transformations

315
00:10:23,600 --> 00:10:26,079
averages about 27 and 32 percent

316
00:10:26,079 --> 00:10:28,399
overhead which is quite faster than afl

317
00:10:28,399 --> 00:10:33,760
diamond's 88 and afl moves 256 overheads

318
00:10:33,760 --> 00:10:35,760
to investigate whether zaful can support

319
00:10:35,760 --> 00:10:37,600
real close source applications we

320
00:10:37,600 --> 00:10:39,279
conduct fuzzing trials in all five of

321
00:10:39,279 --> 00:10:41,360
our closed source benchmarks on average

322
00:10:41,360 --> 00:10:43,760
we see that zaful averages 55 percent

323
00:10:43,760 --> 00:10:46,480
more and 38 more unique triage crashes

324
00:10:46,480 --> 00:10:48,800
than afl dynasty than afl kimu in

325
00:10:48,800 --> 00:10:50,640
looking at the time to exposure for five

326
00:10:50,640 --> 00:10:52,399
unique bugs across these benchmarks we

327
00:10:52,399 --> 00:10:54,720
see that on average zaful is six hundred

328
00:10:54,720 --> 00:10:56,720
sixty percent faster exposing these bugs

329
00:10:56,720 --> 00:10:59,440
than afl dynasty and 113 percent faster

330
00:10:59,440 --> 00:11:02,079
than afl chemo and even exposed a heap

331
00:11:02,079 --> 00:11:03,760
overreading the commercial binary

332
00:11:03,760 --> 00:11:06,000
analysis tool ida in under two and a

333
00:11:06,000 --> 00:11:08,079
half hours when the closest competitor

334
00:11:08,079 --> 00:11:11,040
found it in over 23 hours

335
00:11:11,040 --> 00:11:12,959
in examining zaful's precision next to

336
00:11:12,959 --> 00:11:15,360
the commercial binary analysis tools ida

337
00:11:15,360 --> 00:11:17,360
and binary ninja we see that zaful

338
00:11:17,360 --> 00:11:19,279
achieves the highest overall instruction

339
00:11:19,279 --> 00:11:21,120
recovery with none of the instructions

340
00:11:21,120 --> 00:11:23,200
it deemed as unreachable actually being

341
00:11:23,200 --> 00:11:25,200
reached by fuzzing and comparing to

342
00:11:25,200 --> 00:11:27,360
compiler instrumentation we see a mean

343
00:11:27,360 --> 00:11:29,519
control flow graph coverage accuracy of

344
00:11:29,519 --> 00:11:31,040
almost 100

345
00:11:31,040 --> 00:11:33,120
in testing whether zaful scales to real

346
00:11:33,120 --> 00:11:35,680
binaries we apply it to a myriad of open

347
00:11:35,680 --> 00:11:37,920
source binaries of varying type closed

348
00:11:37,920 --> 00:11:39,839
source binaries as well as windows

349
00:11:39,839 --> 00:11:42,160
binaries overall we were able to confirm

350
00:11:42,160 --> 00:11:45,360
zaful's success on 33 open source and 23

351
00:11:45,360 --> 00:11:47,360
closed source binaries both linux and

352
00:11:47,360 --> 00:11:49,680
windows formats stripped position

353
00:11:49,680 --> 00:11:51,519
independent and non-position independent

354
00:11:51,519 --> 00:11:53,920
executables binaries as small as 100

355
00:11:53,920 --> 00:11:56,399
kilobytes to as large as 100 megabytes

356
00:11:56,399 --> 00:11:58,399
and binaries as small as 100 basic

357
00:11:58,399 --> 00:12:00,399
blocks to as large as 1 million basic

358
00:12:00,399 --> 00:12:01,519
blocks

359
00:12:01,519 --> 00:12:04,240
so in conclusion why zaful well much of

360
00:12:04,240 --> 00:12:05,440
today's commodity software is

361
00:12:05,440 --> 00:12:07,519
distributed as binary only and

362
00:12:07,519 --> 00:12:09,519
instrumenting binary code is far more

363
00:12:09,519 --> 00:12:10,800
challenging due to its semantic

364
00:12:10,800 --> 00:12:13,120
opaqueness and hence fuzzing it becomes

365
00:12:13,120 --> 00:12:14,720
far less effective due to the inability

366
00:12:14,720 --> 00:12:16,800
to uphold optimal speed and

367
00:12:16,800 --> 00:12:18,480
transformation capabilities at the same

368
00:12:18,480 --> 00:12:20,720
time mitigating these challenges demands

369
00:12:20,720 --> 00:12:22,160
that we close the long-standing

370
00:12:22,160 --> 00:12:23,760
instrumentation gap between source

371
00:12:23,760 --> 00:12:26,079
available and binary only fuzzing by

372
00:12:26,079 --> 00:12:27,839
carefully identifying and matching the

373
00:12:27,839 --> 00:12:29,360
attributes that make compilers so

374
00:12:29,360 --> 00:12:31,360
successful from fuzzing instrumentation

375
00:12:31,360 --> 00:12:33,279
zaful is the first to extend compiler

376
00:12:33,279 --> 00:12:35,440
level speed and fuzzing transformation

377
00:12:35,440 --> 00:12:37,839
capabilities to binary only fuzzing

378
00:12:37,839 --> 00:12:39,120
zaful's fuzzing enhancing

379
00:12:39,120 --> 00:12:40,880
transformations help expose many more

380
00:12:40,880 --> 00:12:42,720
bugs and binary only fuzzing than dine

381
00:12:42,720 --> 00:12:44,720
instant kimu all while maintaining

382
00:12:44,720 --> 00:12:46,720
performance within 10 that of compiler

383
00:12:46,720 --> 00:12:48,800
instrumentation and scaling to multiple

384
00:12:48,800 --> 00:12:51,600
platforms file sizes complexity and

385
00:12:51,600 --> 00:12:53,760
other characteristics and with that i'd

386
00:12:53,760 --> 00:12:55,519
like to thank you for viewing this talk

387
00:12:55,519 --> 00:12:56,959
and i invite you to check out the zaful

388
00:12:56,959 --> 00:12:58,639
source code as well as our evaluation

389
00:12:58,639 --> 00:13:00,639
benchmarks at the following link happy

390
00:13:00,639 --> 00:13:03,639
fuzzing

391
00:13:09,440 --> 00:13:11,519
you

