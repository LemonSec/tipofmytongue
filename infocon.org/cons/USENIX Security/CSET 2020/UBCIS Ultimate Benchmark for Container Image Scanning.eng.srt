1
00:00:08,960 --> 00:00:10,880
hello everybody my name is shea and

2
00:00:10,880 --> 00:00:13,120
today i'm going to talk about our work

3
00:00:13,120 --> 00:00:14,799
on ultimate benchmark for container

4
00:00:14,799 --> 00:00:15,679
image scanning

5
00:00:15,679 --> 00:00:18,480
it's a short preliminary work paper and

6
00:00:18,480 --> 00:00:20,480
this work has been done between myself

7
00:00:20,480 --> 00:00:22,480
jeffrey and clan and blackberry security

8
00:00:22,480 --> 00:00:23,600
ratio group

9
00:00:23,600 --> 00:00:25,279
we're going to talk today about

10
00:00:25,279 --> 00:00:27,840
container image scanning

11
00:00:27,840 --> 00:00:29,840
when you're using containers you're

12
00:00:29,840 --> 00:00:31,359
probably using a base image that is

13
00:00:31,359 --> 00:00:33,440
publicly available on the internet

14
00:00:33,440 --> 00:00:35,600
but here's the problem if you have it so

15
00:00:35,600 --> 00:00:36,640
do the attackers

16
00:00:36,640 --> 00:00:38,399
the attacker can download the public

17
00:00:38,399 --> 00:00:40,559
image as easily as you can

18
00:00:40,559 --> 00:00:42,239
and as the image is copied and you

19
00:00:42,239 --> 00:00:44,879
copied and used which is the appeal of

20
00:00:44,879 --> 00:00:46,879
using container image of course

21
00:00:46,879 --> 00:00:48,800
the vulnerabilities in that image are

22
00:00:48,800 --> 00:00:50,000
replicated

23
00:00:50,000 --> 00:00:52,239
and you need to make sure that the

24
00:00:52,239 --> 00:00:54,160
container you're using doesn't contain

25
00:00:54,160 --> 00:00:56,960
any known third-party vulnerabilities or

26
00:00:56,960 --> 00:00:57,680
at least you

27
00:00:57,680 --> 00:00:59,760
you need to have the visibility into

28
00:00:59,760 --> 00:01:01,199
those vulnerabilities

29
00:01:01,199 --> 00:01:02,399
and that's where container image

30
00:01:02,399 --> 00:01:05,840
scanning comes in

31
00:01:05,840 --> 00:01:08,320
vote won't contain their image scanning

32
00:01:08,320 --> 00:01:09,200
scanners do

33
00:01:09,200 --> 00:01:11,040
they won't find new vulnerabilities they

34
00:01:11,040 --> 00:01:12,560
won't find backdoors

35
00:01:12,560 --> 00:01:15,040
and they won't find malicious containers

36
00:01:15,040 --> 00:01:15,840
what will

37
00:01:15,840 --> 00:01:18,159
they do is find all known third-party

38
00:01:18,159 --> 00:01:20,240
vulnerabilities in your container

39
00:01:20,240 --> 00:01:21,520
and there are a number of different

40
00:01:21,520 --> 00:01:24,640
products that do container in scanning

41
00:01:24,640 --> 00:01:26,560
but the problem is they don't all give

42
00:01:26,560 --> 00:01:28,479
the same answer which was a surprise to

43
00:01:28,479 --> 00:01:28,880
us

44
00:01:28,880 --> 00:01:30,479
when we first started looking at this

45
00:01:30,479 --> 00:01:32,000
topic you can run

46
00:01:32,000 --> 00:01:33,680
four different scanners on the same

47
00:01:33,680 --> 00:01:35,280
image and you'll get four different

48
00:01:35,280 --> 00:01:36,000
results

49
00:01:36,000 --> 00:01:38,079
how do we we know this well we tested

50
00:01:38,079 --> 00:01:40,479
them none of the scanners we tested in

51
00:01:40,479 --> 00:01:41,360
this case

52
00:01:41,360 --> 00:01:44,000
we uh found the superset of the issues

53
00:01:44,000 --> 00:01:45,520
found by all other scanners

54
00:01:45,520 --> 00:01:47,840
okay so none of them is complete knows

55
00:01:47,840 --> 00:01:49,360
completely

56
00:01:49,360 --> 00:01:51,600
the big picture none of the scanners

57
00:01:51,600 --> 00:01:54,320
reported all known to us vulnerabilities

58
00:01:54,320 --> 00:01:57,280
and and all the scanners we tested had

59
00:01:57,280 --> 00:01:58,719
some kind of false positives in the

60
00:01:58,719 --> 00:02:00,399
vulnerabilities they reported

61
00:02:00,399 --> 00:02:02,079
and so we realized that we need the

62
00:02:02,079 --> 00:02:03,600
benchmark we need some kind of ground

63
00:02:03,600 --> 00:02:05,439
zero tooth first

64
00:02:05,439 --> 00:02:08,560
to dig deeper into those vulnerabilities

65
00:02:08,560 --> 00:02:10,239
and to understand what's going on there

66
00:02:10,239 --> 00:02:10,878
how do we

67
00:02:10,878 --> 00:02:12,879
even approach the comparison of those

68
00:02:12,879 --> 00:02:15,120
scanners but first

69
00:02:15,120 --> 00:02:16,720
to do this we need to understand the

70
00:02:16,720 --> 00:02:18,319
general architecture of the

71
00:02:18,319 --> 00:02:21,120
of the scanners three phases mainly

72
00:02:21,120 --> 00:02:22,560
three phases component detection

73
00:02:22,560 --> 00:02:24,239
vulnerability mentioned and reported

74
00:02:24,239 --> 00:02:26,000
component detection is about detecting

75
00:02:26,000 --> 00:02:26,319
the

76
00:02:26,319 --> 00:02:27,840
sort of composition of the container

77
00:02:27,840 --> 00:02:31,360
image and when the bits imagine is about

78
00:02:31,360 --> 00:02:33,440
given the list of software the software

79
00:02:33,440 --> 00:02:35,040
composition gives the list of packages

80
00:02:35,040 --> 00:02:35,840
and that container

81
00:02:35,840 --> 00:02:38,879
image scanner goes

82
00:02:38,879 --> 00:02:41,680
takes the metadata of this image and

83
00:02:41,680 --> 00:02:43,360
matches this uh

84
00:02:43,360 --> 00:02:45,519
sorry of the package and matches the the

85
00:02:45,519 --> 00:02:48,080
packages against known vulnerabilities

86
00:02:48,080 --> 00:02:50,800
in various security feeds and finally

87
00:02:50,800 --> 00:02:51,599
reporting

88
00:02:51,599 --> 00:02:54,800
and we're talking about the um results

89
00:02:54,800 --> 00:02:55,360
difference

90
00:02:55,360 --> 00:02:57,040
the difference in the results and

91
00:02:57,040 --> 00:02:59,440
inconsistencies we need to understand

92
00:02:59,440 --> 00:03:02,800
where those may be coming from

93
00:03:02,800 --> 00:03:04,480
first the first phase component

94
00:03:04,480 --> 00:03:06,560
detection some scans

95
00:03:06,560 --> 00:03:09,040
um most traditional scanners in fact

96
00:03:09,040 --> 00:03:10,080
they

97
00:03:10,080 --> 00:03:12,800
excuse me they employ the standard

98
00:03:12,800 --> 00:03:13,920
technique as

99
00:03:13,920 --> 00:03:15,760
they query the package manager to

100
00:03:15,760 --> 00:03:18,000
understand what software is in the

101
00:03:18,000 --> 00:03:20,560
container image for example the package

102
00:03:20,560 --> 00:03:21,440
query

103
00:03:21,440 --> 00:03:25,040
um or in ubuntu is

104
00:03:25,040 --> 00:03:27,680
yeah in the debian in the in ubuntu or

105
00:03:27,680 --> 00:03:29,519
other package manager depends on the

106
00:03:29,519 --> 00:03:32,799
distribution and give it that uh however

107
00:03:32,799 --> 00:03:34,080
other scanners they can

108
00:03:34,080 --> 00:03:37,440
deploy binary analysis for the second

109
00:03:37,440 --> 00:03:39,120
vulnerability matching stage

110
00:03:39,120 --> 00:03:41,519
some scanners can they can have

111
00:03:41,519 --> 00:03:42,959
different uh composition of

112
00:03:42,959 --> 00:03:44,640
vulnerability fits none of the scanner

113
00:03:44,640 --> 00:03:45,440
we saw we

114
00:03:45,440 --> 00:03:48,080
use it use just one vulnerability fit

115
00:03:48,080 --> 00:03:49,599
some of them use contain

116
00:03:49,599 --> 00:03:52,080
commercial ones in that that makes the

117
00:03:52,080 --> 00:03:53,200
difference of course

118
00:03:53,200 --> 00:03:54,959
and finally reporting it's it's about

119
00:03:54,959 --> 00:03:56,239
ambiguity

120
00:03:56,239 --> 00:03:58,720
in reporting in how they understand the

121
00:03:58,720 --> 00:04:00,000
power security fee and how

122
00:04:00,000 --> 00:04:01,840
they understand the results and this is

123
00:04:01,840 --> 00:04:03,599
probably the biggest part of the

124
00:04:03,599 --> 00:04:06,000
biggest issue in the in those source of

125
00:04:06,000 --> 00:04:07,760
the inconsistencies and we'll talk about

126
00:04:07,760 --> 00:04:09,439
this more

127
00:04:09,439 --> 00:04:12,000
so now knowing this knowing this we can

128
00:04:12,000 --> 00:04:14,159
we can kind of dig deeper and uh

129
00:04:14,159 --> 00:04:16,478
try to build the ground zero truth and

130
00:04:16,478 --> 00:04:17,600
what we did

131
00:04:17,600 --> 00:04:20,720
we um we took five most

132
00:04:20,720 --> 00:04:23,199
popular distributions fedora ubuntu

133
00:04:23,199 --> 00:04:26,320
debian alpine centos

134
00:04:26,320 --> 00:04:29,280
we ran the a bunch of scanners uh merged

135
00:04:29,280 --> 00:04:31,840
the results

136
00:04:32,479 --> 00:04:34,400
deduplicated vulnerabilities and took

137
00:04:34,400 --> 00:04:36,400
the and took those vulnerabilities and

138
00:04:36,400 --> 00:04:38,000
manually judged them given the

139
00:04:38,000 --> 00:04:40,080
information in the security feeds that

140
00:04:40,080 --> 00:04:42,800
applicable to us and we came up with the

141
00:04:42,800 --> 00:04:43,680
benchmark

142
00:04:43,680 --> 00:04:47,199
during this process what we saw uh

143
00:04:47,199 --> 00:04:49,520
answer one word before on how we chose

144
00:04:49,520 --> 00:04:50,479
those images

145
00:04:50,479 --> 00:04:52,880
so it was a game on the balance between

146
00:04:52,880 --> 00:04:54,800
stability and popularity on one hand we

147
00:04:54,800 --> 00:04:55,280
need

148
00:04:55,280 --> 00:04:57,440
with stable container image that doesn't

149
00:04:57,440 --> 00:04:58,960
change that the software composition

150
00:04:58,960 --> 00:05:00,560
stays stable on the other hand

151
00:05:00,560 --> 00:05:02,880
we don't want super old images that not

152
00:05:02,880 --> 00:05:04,560
being updated because they are old we

153
00:05:04,560 --> 00:05:06,160
won't steal popular images

154
00:05:06,160 --> 00:05:08,160
and that's how we came up with those

155
00:05:08,160 --> 00:05:09,520
three main distributions

156
00:05:09,520 --> 00:05:12,240
alpine db and ubuntu and those specific

157
00:05:12,240 --> 00:05:14,160
versions as 10.2

158
00:05:14,160 --> 00:05:17,400
um ubuntu 1810 and

159
00:05:17,400 --> 00:05:20,400
0.394

160
00:05:20,639 --> 00:05:23,919
and we ended up with 98 manage manually

161
00:05:23,919 --> 00:05:26,560
judge debian vaults 72 for you won't and

162
00:05:26,560 --> 00:05:28,639
10 for alpine and you can see the number

163
00:05:28,639 --> 00:05:31,759
of century asphalts and fedora is just

164
00:05:31,759 --> 00:05:34,400
humongous and so we given the time that

165
00:05:34,400 --> 00:05:36,320
we had we couldn't manually judge them

166
00:05:36,320 --> 00:05:38,560
and another problem with fedora was that

167
00:05:38,560 --> 00:05:39,919
most of the scanners actually don't

168
00:05:39,919 --> 00:05:42,400
support the door

169
00:05:42,400 --> 00:05:44,160
um so what did you see during that

170
00:05:44,160 --> 00:05:46,560
manually that manual judgment process we

171
00:05:46,560 --> 00:05:47,840
saw that

172
00:05:47,840 --> 00:05:49,840
many vulnerabilities yes indeed we can

173
00:05:49,840 --> 00:05:51,440
map them to true positives or fall

174
00:05:51,440 --> 00:05:52,320
positively

175
00:05:52,320 --> 00:05:54,400
in between truth was it true positives

176
00:05:54,400 --> 00:05:55,600
we have

177
00:05:55,600 --> 00:05:57,280
two big groups are recently found a

178
00:05:57,280 --> 00:05:59,120
little bit is that just haven't been

179
00:05:59,120 --> 00:06:01,280
fixed yet or triaged as unimportant and

180
00:06:01,280 --> 00:06:01,840
they

181
00:06:01,840 --> 00:06:04,000
those unimportant ones they kind of

182
00:06:04,000 --> 00:06:04,880
linger they're

183
00:06:04,880 --> 00:06:08,160
a long time and um

184
00:06:08,160 --> 00:06:11,280
that the distribution mentors don't just

185
00:06:11,280 --> 00:06:12,560
don't want to

186
00:06:12,560 --> 00:06:14,880
fix them or just because they are

187
00:06:14,880 --> 00:06:15,840
unimportant

188
00:06:15,840 --> 00:06:17,919
for false positives the main ones are

189
00:06:17,919 --> 00:06:19,440
backboard patches in this case for

190
00:06:19,440 --> 00:06:21,280
example the volumete

191
00:06:21,280 --> 00:06:24,160
that was patched in busybox in alpine

192
00:06:24,160 --> 00:06:26,880
scanner didn't detect this dispatch

193
00:06:26,880 --> 00:06:29,600
non-functional packages like license

194
00:06:29,600 --> 00:06:31,360
packages or empty packages

195
00:06:31,360 --> 00:06:33,280
a kernel vans for example of course

196
00:06:33,280 --> 00:06:35,360
container in which can't contain

197
00:06:35,360 --> 00:06:37,440
kernel libraries in this case sa linux

198
00:06:37,440 --> 00:06:39,520
however scanner did reportedly so that's

199
00:06:39,520 --> 00:06:40,240
false positive

200
00:06:40,240 --> 00:06:43,280
architecture mismatch for example arm

201
00:06:43,280 --> 00:06:45,759
versus x86 where vulnerability is only

202
00:06:45,759 --> 00:06:48,479
applicable for r for example

203
00:06:48,479 --> 00:06:50,960
however here's the question what is if

204
00:06:50,960 --> 00:06:51,520
there is

205
00:06:51,520 --> 00:06:52,880
something in the middle not true

206
00:06:52,880 --> 00:06:55,280
positive not false positives

207
00:06:55,280 --> 00:06:57,840
we call it uh inconclusive and there are

208
00:06:57,840 --> 00:06:59,440
several of those groups let's start with

209
00:06:59,440 --> 00:07:01,120
inconclusive so for example

210
00:07:01,120 --> 00:07:03,759
untriage this vulnerability updated on

211
00:07:03,759 --> 00:07:06,560
based on june 2024 this specific

212
00:07:06,560 --> 00:07:08,560
specific vulnerability was untriashed in

213
00:07:08,560 --> 00:07:10,400
the in the dbm security field and

214
00:07:10,400 --> 00:07:12,800
during ubuntu security field and of

215
00:07:12,800 --> 00:07:14,319
course we don't know it might be too

216
00:07:14,319 --> 00:07:15,919
positive it might be a false positive

217
00:07:15,919 --> 00:07:17,360
depending on how the

218
00:07:17,360 --> 00:07:19,840
authors the maintenance maintainers of

219
00:07:19,840 --> 00:07:22,240
the distribution will triage it

220
00:07:22,240 --> 00:07:24,000
some vulnerabilities are environmental

221
00:07:24,000 --> 00:07:25,840
depends on the build argument or usage

222
00:07:25,840 --> 00:07:26,639
pattern

223
00:07:26,639 --> 00:07:28,880
some vulnerabilities are invalidated by

224
00:07:28,880 --> 00:07:30,800
comments for example no security impact

225
00:07:30,800 --> 00:07:31,440
so what

226
00:07:31,440 --> 00:07:35,520
what does this mean uh or future unclear

227
00:07:35,520 --> 00:07:36,960
vulnerabilities marked in the comment

228
00:07:36,960 --> 00:07:38,720
not for us conceptual weakness in the

229
00:07:38,720 --> 00:07:41,680
pgp server design so what does this mean

230
00:07:41,680 --> 00:07:42,319
does this

231
00:07:42,319 --> 00:07:43,919
mean it's not vulnerability but it seems

232
00:07:43,919 --> 00:07:45,599
like vulnerability to me

233
00:07:45,599 --> 00:07:48,800
but will this be fixed i'm not sure

234
00:07:48,800 --> 00:07:51,360
and another interesting class is mm what

235
00:07:51,360 --> 00:07:52,960
marked uh

236
00:07:52,960 --> 00:07:55,199
version mismatch where different feeds

237
00:07:55,199 --> 00:07:57,280
disagree on fixed or affected package

238
00:07:57,280 --> 00:08:00,240
versions for example in this case

239
00:08:00,240 --> 00:08:03,360
vulnerability in gcc according to

240
00:08:03,360 --> 00:08:07,039
nvd it was fixed up to 880 and

241
00:08:07,039 --> 00:08:10,720
dbm does report 84 as vulnerable

242
00:08:10,720 --> 00:08:13,120
and final group is d disputed by

243
00:08:13,120 --> 00:08:14,319
maintainers

244
00:08:14,319 --> 00:08:17,360
um for example the security researchers

245
00:08:17,360 --> 00:08:19,680
raise the vulnerability as a

246
00:08:19,680 --> 00:08:22,160
race the back as vulnerability and

247
00:08:22,160 --> 00:08:24,800
maintainers say well it's either

248
00:08:24,800 --> 00:08:27,120
not a security vulnerability or i don't

249
00:08:27,120 --> 00:08:28,720
agree with it or something like that so

250
00:08:28,720 --> 00:08:29,599
what do we do

251
00:08:29,599 --> 00:08:32,880
whom do we trust here and and that's the

252
00:08:32,880 --> 00:08:34,799
problem here we we couldn't manually

253
00:08:34,799 --> 00:08:35,919
judge it however

254
00:08:35,919 --> 00:08:38,000
scanners are required to judge it on

255
00:08:38,000 --> 00:08:39,279
spot um

256
00:08:39,279 --> 00:08:41,039
and whether and they have this binary

257
00:08:41,039 --> 00:08:42,799
decision whether to report it

258
00:08:42,799 --> 00:08:44,880
or not and so sometimes they they don't

259
00:08:44,880 --> 00:08:46,800
have other choice they have to

260
00:08:46,800 --> 00:08:50,160
kind of mark it as unimportant or

261
00:08:50,160 --> 00:08:53,760
negligible and then by doing this they

262
00:08:53,760 --> 00:08:54,080
just

263
00:08:54,080 --> 00:08:57,200
uh move the the burden of uh figuring

264
00:08:57,200 --> 00:08:59,279
this out my burden of analysis on to the

265
00:08:59,279 --> 00:09:00,480
customer

266
00:09:00,480 --> 00:09:03,120
uh so the truth is many times even when

267
00:09:03,120 --> 00:09:04,480
having all of the

268
00:09:04,480 --> 00:09:05,839
report scanners don't know whether

269
00:09:05,839 --> 00:09:08,080
vulnerabilities applicable or not

270
00:09:08,080 --> 00:09:09,600
and what we claim we claim that this

271
00:09:09,600 --> 00:09:12,399
decision of how to treat those into

272
00:09:12,399 --> 00:09:14,959
i am and d uh this decision is

273
00:09:14,959 --> 00:09:16,480
environmental

274
00:09:16,480 --> 00:09:19,360
uh so what and that's what we did we we

275
00:09:19,360 --> 00:09:19,680
took

276
00:09:19,680 --> 00:09:23,120
uh we took a traditional quality metrics

277
00:09:23,120 --> 00:09:25,680
such as precision recall and f measure

278
00:09:25,680 --> 00:09:27,360
and we created the benchmark based on

279
00:09:27,360 --> 00:09:29,839
those manually judgmental images and the

280
00:09:29,839 --> 00:09:33,040
scanner results and and this benchmark

281
00:09:33,040 --> 00:09:35,120
these results are different based on the

282
00:09:35,120 --> 00:09:38,160
relaxed or paranoid mode how do you

283
00:09:38,160 --> 00:09:40,080
how do you map what what do you do with

284
00:09:40,080 --> 00:09:41,920
those intermediate vulnerabilities that

285
00:09:41,920 --> 00:09:42,640
can be

286
00:09:42,640 --> 00:09:44,080
can be mapped on the other hand to true

287
00:09:44,080 --> 00:09:46,160
positive or can be to false positive

288
00:09:46,160 --> 00:09:47,680
so because this is environmental

289
00:09:47,680 --> 00:09:49,360
decision we we

290
00:09:49,360 --> 00:09:51,600
we say depends on the customer if

291
00:09:51,600 --> 00:09:53,600
customer thinks

292
00:09:53,600 --> 00:09:56,800
that the the most suitable mode for this

293
00:09:56,800 --> 00:09:58,720
customer is relaxed where

294
00:09:58,720 --> 00:10:00,800
uh they'd rather map this to false

295
00:10:00,800 --> 00:10:01,920
positives that

296
00:10:01,920 --> 00:10:04,240
they'd rather treat those inclusive

297
00:10:04,240 --> 00:10:06,160
vulnerabilities as false positives

298
00:10:06,160 --> 00:10:08,079
then they will look at the relaxed

299
00:10:08,079 --> 00:10:10,560
results or if the customer is paranoid

300
00:10:10,560 --> 00:10:10,880
like

301
00:10:10,880 --> 00:10:13,760
i don't know department of defense where

302
00:10:13,760 --> 00:10:14,320
they

303
00:10:14,320 --> 00:10:16,720
can have can throw bodies of security

304
00:10:16,720 --> 00:10:18,399
analyst into sifting through

305
00:10:18,399 --> 00:10:20,959
potential false positives then they will

306
00:10:20,959 --> 00:10:21,920
treat the

307
00:10:21,920 --> 00:10:24,399
all the inconclusive vulnerabilities as

308
00:10:24,399 --> 00:10:26,240
a true positives

309
00:10:26,240 --> 00:10:29,360
and as you can see the performance of

310
00:10:29,360 --> 00:10:31,120
the scanners is different

311
00:10:31,120 --> 00:10:34,320
depending on the on the mode

312
00:10:34,320 --> 00:10:36,640
and following this this process we we

313
00:10:36,640 --> 00:10:38,160
develop some practical recommendations

314
00:10:38,160 --> 00:10:39,120
for the customers

315
00:10:39,120 --> 00:10:41,519
so first before choosing scanner assess

316
00:10:41,519 --> 00:10:43,040
risk tolerance can you afford to miss

317
00:10:43,040 --> 00:10:44,839
vulnerabilities

318
00:10:44,839 --> 00:10:48,720
um or must fit only which is potentially

319
00:10:48,720 --> 00:10:51,360
critical paranoid mode

320
00:10:51,360 --> 00:10:53,680
what base image are you using right is

321
00:10:53,680 --> 00:10:55,519
the image supported by the scanner

322
00:10:55,519 --> 00:10:57,600
or not because as you saw in the table

323
00:10:57,600 --> 00:10:59,600
different distributions

324
00:10:59,600 --> 00:11:01,040
scanner performs differently on

325
00:11:01,040 --> 00:11:02,720
different distributions and not

326
00:11:02,720 --> 00:11:04,959
all every scanner is best in all in all

327
00:11:04,959 --> 00:11:07,200
the distributions

328
00:11:07,200 --> 00:11:08,959
finally based on risk number one and

329
00:11:08,959 --> 00:11:11,040
base image two use the benchmark results

330
00:11:11,040 --> 00:11:13,600
in the table to select the appropriate

331
00:11:13,600 --> 00:11:16,160
a couple more practical recommendations

332
00:11:16,160 --> 00:11:18,240
from our experience no image has zero

333
00:11:18,240 --> 00:11:19,279
vulnerabilities

334
00:11:19,279 --> 00:11:21,200
a lack of vulnerabilities points to

335
00:11:21,200 --> 00:11:22,720
configuration problems or

336
00:11:22,720 --> 00:11:24,560
unsupported image like with the door

337
00:11:24,560 --> 00:11:26,000
example

338
00:11:26,000 --> 00:11:28,240
combining multiple scanners in the cicd

339
00:11:28,240 --> 00:11:30,480
pipeline is a good idea

340
00:11:30,480 --> 00:11:32,720
and decide but first you need to decide

341
00:11:32,720 --> 00:11:35,040
how to merge those results reunion or

342
00:11:35,040 --> 00:11:36,800
intersection an intersection probably

343
00:11:36,800 --> 00:11:38,720
not a good idea

344
00:11:38,720 --> 00:11:40,640
and finally keep watching the benchmark

345
00:11:40,640 --> 00:11:42,000
for changes because it will

346
00:11:42,000 --> 00:11:45,279
change as um as new vulnerabilities come

347
00:11:45,279 --> 00:11:45,920
up

348
00:11:45,920 --> 00:11:47,279
and they're worth on registering but

349
00:11:47,279 --> 00:11:49,680
it's scanning if you rely on container

350
00:11:49,680 --> 00:11:50,880
registry scanning

351
00:11:50,880 --> 00:11:52,959
just make just remember that the

352
00:11:52,959 --> 00:11:54,880
container is still you still use the

353
00:11:54,880 --> 00:11:56,720
scanners um

354
00:11:56,720 --> 00:11:58,480
underneath and they have the same

355
00:11:58,480 --> 00:12:00,560
advantages and disadvantaged

356
00:12:00,560 --> 00:12:02,480
disadvantages so you need to be mindful

357
00:12:02,480 --> 00:12:04,560
about that

358
00:12:04,560 --> 00:12:06,880
we open sourced our uh the benchmark so

359
00:12:06,880 --> 00:12:07,600
you can use it

360
00:12:07,600 --> 00:12:10,240
in two modes super scan or score go

361
00:12:10,240 --> 00:12:12,079
ahead check check it out and

362
00:12:12,079 --> 00:12:15,199
read the readme i think it's

363
00:12:15,519 --> 00:12:18,399
it's written pretty well so i hope you

364
00:12:18,399 --> 00:12:21,040
will use it and uh

365
00:12:21,040 --> 00:12:23,279
send us a line if you if you have other

366
00:12:23,279 --> 00:12:25,120
questions and i think that's the time

367
00:12:25,120 --> 00:12:25,600
for

368
00:12:25,600 --> 00:12:38,160
questions thank you for listening

