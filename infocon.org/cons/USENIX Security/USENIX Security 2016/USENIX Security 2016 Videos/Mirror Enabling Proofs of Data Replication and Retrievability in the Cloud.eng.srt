1
00:00:12,000 --> 00:00:15,120
i present the paper enabling proofs of

2
00:00:15,120 --> 00:00:16,960
data replication

3
00:00:16,960 --> 00:00:19,840
and retrievability in the cloud

4
00:00:19,840 --> 00:00:21,920
it's joint work with frederick

5
00:00:21,920 --> 00:00:23,920
armcknecht from the university mannheim

6
00:00:23,920 --> 00:00:24,640
and

7
00:00:24,640 --> 00:00:27,119
ludovic barman who was a student at in

8
00:00:27,119 --> 00:00:28,240
our labs

9
00:00:28,240 --> 00:00:29,119
and

10
00:00:29,119 --> 00:00:32,000
my colleague at nhlebska sankarami so

11
00:00:32,000 --> 00:00:33,120
it's in a

12
00:00:33,120 --> 00:00:35,040
framework of

13
00:00:35,040 --> 00:00:38,719
a joint project which aims to build

14
00:00:38,719 --> 00:00:40,239
a secure

15
00:00:40,239 --> 00:00:42,800
storage cloud and

16
00:00:42,800 --> 00:00:45,120
now the scenario you

17
00:00:45,120 --> 00:00:46,239
all know

18
00:00:46,239 --> 00:00:49,520
of cloud storage so users have data

19
00:00:49,520 --> 00:00:52,320
users upload them to the cloud and are

20
00:00:52,320 --> 00:00:55,199
then at any time

21
00:00:55,199 --> 00:00:57,199
have the possibility to retrieve the

22
00:00:57,199 --> 00:00:59,680
data by sending a request getting the

23
00:00:59,680 --> 00:01:00,800
data back

24
00:01:00,800 --> 00:01:01,680
and

25
00:01:01,680 --> 00:01:03,760
we look at such kind of

26
00:01:03,760 --> 00:01:07,200
block or file based storage as dropbox

27
00:01:07,200 --> 00:01:11,439
google drive onedrive are offering

28
00:01:11,520 --> 00:01:14,479
a main concern of the users which

29
00:01:14,479 --> 00:01:17,360
prevents them from adopting the cloud

30
00:01:17,360 --> 00:01:19,600
and also corporate users i will say a

31
00:01:19,600 --> 00:01:24,560
bit more later is a data loss so in this

32
00:01:24,560 --> 00:01:26,479
list of

33
00:01:26,479 --> 00:01:27,680
the cloud

34
00:01:27,680 --> 00:01:29,520
security alliance

35
00:01:29,520 --> 00:01:32,400
data loss is up at number two so data

36
00:01:32,400 --> 00:01:33,680
breaches

37
00:01:33,680 --> 00:01:34,479
uh

38
00:01:34,479 --> 00:01:37,040
another concern we are not

39
00:01:37,040 --> 00:01:38,960
looking at data breaches here so we

40
00:01:38,960 --> 00:01:41,840
assume data can be encrypted and there's

41
00:01:41,840 --> 00:01:45,520
no functionality or sharing needed

42
00:01:45,520 --> 00:01:47,680
but then data loss directly comes at

43
00:01:47,680 --> 00:01:50,720
number two and it is joined

44
00:01:50,720 --> 00:01:54,560
with malicious insider

45
00:01:54,560 --> 00:01:55,600
and

46
00:01:55,600 --> 00:01:56,479
yeah

47
00:01:56,479 --> 00:01:57,680
one

48
00:01:57,680 --> 00:02:00,159
solution which is very known in the

49
00:02:00,159 --> 00:02:02,479
cryptographic literature and security

50
00:02:02,479 --> 00:02:03,840
literature is

51
00:02:03,840 --> 00:02:06,320
a proof of return ability

52
00:02:06,320 --> 00:02:08,720
originally or sometimes also called

53
00:02:08,720 --> 00:02:10,800
proof of data possession

54
00:02:10,800 --> 00:02:14,080
in a proof of retrievability

55
00:02:14,080 --> 00:02:15,200
um

56
00:02:15,200 --> 00:02:17,920
a user will send a challenge to the

57
00:02:17,920 --> 00:02:20,080
service provider kind of asking is my

58
00:02:20,080 --> 00:02:22,640
data still there and then get back a

59
00:02:22,640 --> 00:02:24,080
response which

60
00:02:24,080 --> 00:02:25,520
gives him a proof

61
00:02:25,520 --> 00:02:27,599
that the data is still there so i mean

62
00:02:27,599 --> 00:02:29,920
trivially it could be

63
00:02:29,920 --> 00:02:31,440
the

64
00:02:31,440 --> 00:02:32,400
that

65
00:02:32,400 --> 00:02:34,400
the user downloads this data and checks

66
00:02:34,400 --> 00:02:36,560
if it's there but

67
00:02:36,560 --> 00:02:38,959
of course the the protocols try to do

68
00:02:38,959 --> 00:02:41,440
this very efficient so how do they

69
00:02:41,440 --> 00:02:43,840
generally work the user pre-processes

70
00:02:43,840 --> 00:02:46,080
the data before uploading

71
00:02:46,080 --> 00:02:49,040
it he applies some erasure coding

72
00:02:49,040 --> 00:02:51,519
so that he doesn't need to be concerned

73
00:02:51,519 --> 00:02:54,239
about every byte of the data

74
00:02:54,239 --> 00:02:56,959
and then we'll add some texts which are

75
00:02:56,959 --> 00:02:58,720
kind of homomorphic

76
00:02:58,720 --> 00:03:00,239
message authentication codes or

77
00:03:00,239 --> 00:03:03,120
homomorphic signatures of some blocks

78
00:03:03,120 --> 00:03:06,159
and then stores all of those data at the

79
00:03:06,159 --> 00:03:08,000
service provider

80
00:03:08,000 --> 00:03:09,040
and then

81
00:03:09,040 --> 00:03:11,599
he can issue a challenge asking for

82
00:03:11,599 --> 00:03:13,120
certain blocks

83
00:03:13,120 --> 00:03:15,040
if they are still there the service

84
00:03:15,040 --> 00:03:17,680
provider will sum up those blocks and

85
00:03:17,680 --> 00:03:19,599
the according text

86
00:03:19,599 --> 00:03:21,920
then because it's homomorphic

87
00:03:21,920 --> 00:03:23,680
the service provider can aggregate all

88
00:03:23,680 --> 00:03:26,159
of it send it back and the user can

89
00:03:26,159 --> 00:03:29,360
check that this is indeed a response

90
00:03:29,360 --> 00:03:32,400
to his challenge and it is a valid

91
00:03:32,400 --> 00:03:36,159
response based on his data

92
00:03:36,159 --> 00:03:39,120
yeah i mentioned already you can do this

93
00:03:39,120 --> 00:03:42,080
based on homomorphic max which is kind

94
00:03:42,080 --> 00:03:42,720
of

95
00:03:42,720 --> 00:03:44,000
a x

96
00:03:44,000 --> 00:03:47,760
a times x plus b

97
00:03:47,760 --> 00:03:49,200
those are rather

98
00:03:49,200 --> 00:03:51,360
quite efficient you can also do it based

99
00:03:51,360 --> 00:03:53,680
on homomorphic signatures those

100
00:03:53,680 --> 00:03:56,879
protocols are a bit more expensive but

101
00:03:56,879 --> 00:04:00,400
they have the advantage that you can get

102
00:04:00,400 --> 00:04:02,560
a public auditor

103
00:04:02,560 --> 00:04:04,799
auditing of

104
00:04:04,799 --> 00:04:07,040
of a cloud storage provider so then

105
00:04:07,040 --> 00:04:09,439
everyone would be able

106
00:04:09,439 --> 00:04:12,879
to verify the proof

107
00:04:13,040 --> 00:04:15,280
um

108
00:04:15,280 --> 00:04:16,560
okay what

109
00:04:16,560 --> 00:04:19,199
should it guarantee of course

110
00:04:19,199 --> 00:04:21,839
such a protocol needs to be correct

111
00:04:21,839 --> 00:04:23,520
meaning if the cloud is doing everything

112
00:04:23,520 --> 00:04:26,639
correct the user will accept and

113
00:04:26,639 --> 00:04:27,520
we have

114
00:04:27,520 --> 00:04:30,639
the other requirement of soundness

115
00:04:30,639 --> 00:04:33,360
or extractability how it is then called

116
00:04:33,360 --> 00:04:35,680
for this specific case

117
00:04:35,680 --> 00:04:38,240
which means that if the verifier accepts

118
00:04:38,240 --> 00:04:40,320
so if the user from this short protocol

119
00:04:40,320 --> 00:04:41,440
gets

120
00:04:41,440 --> 00:04:44,080
ok my data is still there then indeed

121
00:04:44,080 --> 00:04:46,400
the data should be extractable and it's

122
00:04:46,400 --> 00:04:48,639
usually shown that

123
00:04:48,639 --> 00:04:51,040
an algorithm which can create the valid

124
00:04:51,040 --> 00:04:53,040
responses

125
00:04:53,040 --> 00:04:55,520
can be transformed into an extractor

126
00:04:55,520 --> 00:04:58,960
which can extract the file from the

127
00:04:58,960 --> 00:05:01,280
service provider

128
00:05:01,280 --> 00:05:05,440
the adversary model we use is that

129
00:05:05,440 --> 00:05:07,120
the user is honest

130
00:05:07,120 --> 00:05:08,800
well it's the user's data we are

131
00:05:08,800 --> 00:05:11,120
concerned of and he will not corrupt his

132
00:05:11,120 --> 00:05:12,479
own data

133
00:05:12,479 --> 00:05:13,280
and

134
00:05:13,280 --> 00:05:16,000
the service provider may be malicious so

135
00:05:16,000 --> 00:05:18,400
we do not use a fully malicious model

136
00:05:18,400 --> 00:05:20,479
here but adopt the

137
00:05:20,479 --> 00:05:23,039
rational adversary model where the

138
00:05:23,039 --> 00:05:25,039
adversary's goal is

139
00:05:25,039 --> 00:05:28,479
to save cost i mean no one would do

140
00:05:28,479 --> 00:05:31,680
business with a fully malicious service

141
00:05:31,680 --> 00:05:33,520
or a service he doesn't

142
00:05:33,520 --> 00:05:35,840
trust but on the other hand we know all

143
00:05:35,840 --> 00:05:38,639
of those services are

144
00:05:38,639 --> 00:05:39,919
private

145
00:05:39,919 --> 00:05:43,280
for profit entities so they try to offer

146
00:05:43,280 --> 00:05:45,039
this service of course as cheap as

147
00:05:45,039 --> 00:05:46,880
possible and

148
00:05:46,880 --> 00:05:48,320
we have learned

149
00:05:48,320 --> 00:05:49,280
that

150
00:05:49,280 --> 00:05:51,360
you cannot prove that security measures

151
00:05:51,360 --> 00:05:53,360
are really needed so they might skip

152
00:05:53,360 --> 00:05:56,479
some of them and put the danger

153
00:05:56,479 --> 00:05:58,880
the data at risk

154
00:05:58,880 --> 00:06:02,000
which would not be what the user wants

155
00:06:02,000 --> 00:06:03,680
but

156
00:06:03,680 --> 00:06:06,560
yeah there we come also already to the

157
00:06:06,560 --> 00:06:08,160
to one of the

158
00:06:08,160 --> 00:06:09,360
problems

159
00:06:09,360 --> 00:06:10,639
namely

160
00:06:10,639 --> 00:06:13,919
uh the drawback of a poor is well if the

161
00:06:13,919 --> 00:06:16,639
user gets the notification now the data

162
00:06:16,639 --> 00:06:19,280
is not available anymore

163
00:06:19,280 --> 00:06:21,840
he cannot do much more than panic so

164
00:06:21,840 --> 00:06:25,039
it's too late the data is already lost

165
00:06:25,039 --> 00:06:27,919
what the user actually wants to know is

166
00:06:27,919 --> 00:06:28,960
that

167
00:06:28,960 --> 00:06:31,440
necessary security measures

168
00:06:31,440 --> 00:06:34,000
are in place and how to use a gear

169
00:06:34,000 --> 00:06:37,440
against data loss you you simply have to

170
00:06:37,440 --> 00:06:39,600
have a backup somewhere so the user

171
00:06:39,600 --> 00:06:41,600
could have kind of

172
00:06:41,600 --> 00:06:42,639
two

173
00:06:42,639 --> 00:06:44,400
providers he uses

174
00:06:44,400 --> 00:06:46,080
and checks with the proof of

175
00:06:46,080 --> 00:06:48,240
retrievality with each and if one is

176
00:06:48,240 --> 00:06:50,560
lost he recovers it from the other

177
00:06:50,560 --> 00:06:51,680
provider

178
00:06:51,680 --> 00:06:52,880
and

179
00:06:52,880 --> 00:06:55,759
uploads it again to to one provider but

180
00:06:55,759 --> 00:06:57,680
then of course the user will do a lot of

181
00:06:57,680 --> 00:07:00,080
data management which is not what we

182
00:07:00,080 --> 00:07:01,199
want

183
00:07:01,199 --> 00:07:03,599
but well the providers are doing exactly

184
00:07:03,599 --> 00:07:04,720
the same

185
00:07:04,720 --> 00:07:08,720
if if they offer a high

186
00:07:09,039 --> 00:07:10,080
storage

187
00:07:10,080 --> 00:07:15,199
with a high durability they replicate

188
00:07:15,199 --> 00:07:17,759
the data by themselves

189
00:07:17,759 --> 00:07:18,960
and

190
00:07:18,960 --> 00:07:19,840
um

191
00:07:19,840 --> 00:07:20,639
yeah

192
00:07:20,639 --> 00:07:22,800
indeed this is then what the user would

193
00:07:22,800 --> 00:07:25,120
like to know is my data really

194
00:07:25,120 --> 00:07:27,280
replicated

195
00:07:27,280 --> 00:07:30,000
we also hear this a lot when we talk to

196
00:07:30,000 --> 00:07:33,280
corporate customers

197
00:07:33,360 --> 00:07:35,520
who

198
00:07:35,520 --> 00:07:38,080
want to adopt storage so

199
00:07:38,080 --> 00:07:41,280
what they are concerned of is

200
00:07:41,280 --> 00:07:44,479
that from from this third-party service

201
00:07:44,479 --> 00:07:46,960
they would like to know that they apply

202
00:07:46,960 --> 00:07:49,120
all the security measures which need to

203
00:07:49,120 --> 00:07:50,479
be in place

204
00:07:50,479 --> 00:07:51,280
and

205
00:07:51,280 --> 00:07:52,960
this is certainly an obstacle because

206
00:07:52,960 --> 00:07:55,520
with the in-house data center they can

207
00:07:55,520 --> 00:07:56,800
easily check

208
00:07:56,800 --> 00:07:59,120
but with the third party this gets more

209
00:07:59,120 --> 00:08:01,680
difficult

210
00:08:01,759 --> 00:08:03,120
um and

211
00:08:03,120 --> 00:08:04,800
yeah so this

212
00:08:04,800 --> 00:08:07,680
initial question if my data is still

213
00:08:07,680 --> 00:08:08,560
there

214
00:08:08,560 --> 00:08:10,840
rather transform then in the into the

215
00:08:10,840 --> 00:08:13,440
question is my data

216
00:08:13,440 --> 00:08:16,160
really sufficiently replicated

217
00:08:16,160 --> 00:08:18,400
as my contract with the with the service

218
00:08:18,400 --> 00:08:19,520
provider

219
00:08:19,520 --> 00:08:21,840
is saying

220
00:08:21,840 --> 00:08:24,319
and yeah now

221
00:08:24,319 --> 00:08:25,360
we

222
00:08:25,360 --> 00:08:27,120
learned a bit already how this proof of

223
00:08:27,120 --> 00:08:29,680
retrievability works the question is how

224
00:08:29,680 --> 00:08:33,039
can we apply it to multiple replicas

225
00:08:33,039 --> 00:08:34,799
uh in a

226
00:08:34,799 --> 00:08:37,679
standard way like if the replica are

227
00:08:37,679 --> 00:08:41,120
just exact copies of the original file

228
00:08:41,120 --> 00:08:44,480
this is the difficult or not possible

229
00:08:44,480 --> 00:08:46,240
because or it doesn't prove the

230
00:08:46,240 --> 00:08:48,560
existence so if i vary now

231
00:08:48,560 --> 00:08:50,640
the multiple replicas

232
00:08:50,640 --> 00:08:52,240
because they are all the same the

233
00:08:52,240 --> 00:08:54,959
service provider can answer them all

234
00:08:54,959 --> 00:08:58,480
just by having the original file

235
00:08:58,480 --> 00:09:00,000
so this approach

236
00:09:00,000 --> 00:09:01,920
will not work

237
00:09:01,920 --> 00:09:04,000
another approach

238
00:09:04,000 --> 00:09:06,000
already known

239
00:09:06,000 --> 00:09:08,880
for a while by called mulleidale is the

240
00:09:08,880 --> 00:09:11,600
multi-replica pdp

241
00:09:11,600 --> 00:09:13,200
and

242
00:09:13,200 --> 00:09:15,519
there the idea is that the replicas are

243
00:09:15,519 --> 00:09:16,720
encrypted

244
00:09:16,720 --> 00:09:19,440
copies of the file which the service

245
00:09:19,440 --> 00:09:22,320
provider cannot replicate by himself but

246
00:09:22,320 --> 00:09:24,000
the user has to

247
00:09:24,000 --> 00:09:25,279
first

248
00:09:25,279 --> 00:09:27,360
create the copies and group them in a

249
00:09:27,360 --> 00:09:29,440
different way and then upload all of

250
00:09:29,440 --> 00:09:30,720
them and

251
00:09:30,720 --> 00:09:32,480
because then for the service provider

252
00:09:32,480 --> 00:09:37,040
these are simply different files

253
00:09:37,040 --> 00:09:40,000
you can run a proof of retrievability

254
00:09:40,000 --> 00:09:42,399
over every file and then of course check

255
00:09:42,399 --> 00:09:44,320
that the file and the replicas are still

256
00:09:44,320 --> 00:09:46,160
available

257
00:09:46,160 --> 00:09:47,959
we see some

258
00:09:47,959 --> 00:09:50,959
disadvantages with this

259
00:09:50,959 --> 00:09:52,720
method first

260
00:09:52,720 --> 00:09:54,800
we again put the user into the data

261
00:09:54,800 --> 00:09:56,800
management into the one who is creating

262
00:09:56,800 --> 00:09:58,640
the replicas

263
00:09:58,640 --> 00:10:01,519
this is a bit an unrealistic assumption

264
00:10:01,519 --> 00:10:03,600
and

265
00:10:03,600 --> 00:10:06,560
it also puts cost on the user for

266
00:10:06,560 --> 00:10:08,800
uploading this data

267
00:10:08,800 --> 00:10:10,240
several times

268
00:10:10,240 --> 00:10:12,720
but as well to the provider

269
00:10:12,720 --> 00:10:13,600
for

270
00:10:13,600 --> 00:10:17,120
whom also there's quite some cost

271
00:10:17,120 --> 00:10:19,920
associated to to having enough bandwidth

272
00:10:19,920 --> 00:10:23,279
now to have maybe the four five times

273
00:10:23,279 --> 00:10:25,839
times the the incoming

274
00:10:25,839 --> 00:10:28,640
data volume

275
00:10:28,959 --> 00:10:30,320
so we used

276
00:10:30,320 --> 00:10:32,800
some of those numbers really to evaluate

277
00:10:32,800 --> 00:10:33,920
so

278
00:10:33,920 --> 00:10:35,440
from

279
00:10:35,440 --> 00:10:36,720
cloudfare

280
00:10:36,720 --> 00:10:39,519
there are some data published what

281
00:10:39,519 --> 00:10:42,720
it costs for big providers to have

282
00:10:42,720 --> 00:10:45,120
incoming bandwidth

283
00:10:45,120 --> 00:10:46,959
and yeah

284
00:10:46,959 --> 00:10:48,320
based on this

285
00:10:48,320 --> 00:10:50,399
we really can see there is cost

286
00:10:50,399 --> 00:10:54,800
associated to the to the upload

287
00:10:55,120 --> 00:10:57,600
another drawback certainly comes

288
00:10:57,600 --> 00:10:59,200
because it is

289
00:10:59,200 --> 00:11:01,519
restricting the business of the cloud

290
00:11:01,519 --> 00:11:04,160
provider

291
00:11:04,240 --> 00:11:05,279
and

292
00:11:05,279 --> 00:11:08,160
if you look for example at amazon s3

293
00:11:08,160 --> 00:11:10,640
pricing so amazon offers the standard

294
00:11:10,640 --> 00:11:12,000
storage

295
00:11:12,000 --> 00:11:14,800
which which has very high

296
00:11:14,800 --> 00:11:17,120
durability it's very

297
00:11:17,120 --> 00:11:20,560
highly replicated and has the reduced

298
00:11:20,560 --> 00:11:23,600
redundancy storage which is

299
00:11:23,600 --> 00:11:26,560
which might be even not replicated and

300
00:11:26,560 --> 00:11:30,760
therefore offers just 99.99

301
00:11:30,959 --> 00:11:33,519
guaranteed that the data is

302
00:11:33,519 --> 00:11:34,880
is not lost

303
00:11:34,880 --> 00:11:36,399
and if you

304
00:11:36,399 --> 00:11:38,880
compare the prices you see it's not so

305
00:11:38,880 --> 00:11:40,959
much more expensive to use standard

306
00:11:40,959 --> 00:11:43,920
storage which clearly shows that

307
00:11:43,920 --> 00:11:46,079
for replicas

308
00:11:46,079 --> 00:11:49,200
the amount charged to the user is

309
00:11:49,200 --> 00:11:51,200
much less

310
00:11:51,200 --> 00:11:54,480
than for the original file so kind of

311
00:11:54,480 --> 00:11:56,639
the profit margin only goes to the

312
00:11:56,639 --> 00:11:59,920
original file while the replicas

313
00:11:59,920 --> 00:12:03,200
are given much cheaper at

314
00:12:03,200 --> 00:12:06,560
the cost of of the actual storage

315
00:12:06,560 --> 00:12:10,079
by the provider and will clearly

316
00:12:10,079 --> 00:12:12,720
customers wouldn't pay twice or three

317
00:12:12,720 --> 00:12:15,440
times the price if they want to have

318
00:12:15,440 --> 00:12:17,680
replicated so this business model makes

319
00:12:17,680 --> 00:12:18,639
sense

320
00:12:18,639 --> 00:12:21,279
but of course this only works if the

321
00:12:21,279 --> 00:12:24,000
provider knows those are replicas like

322
00:12:24,000 --> 00:12:26,000
in the mr pdp

323
00:12:26,000 --> 00:12:29,040
it could easily be that

324
00:12:29,040 --> 00:12:31,040
the user claims it's a replicas because

325
00:12:31,040 --> 00:12:33,839
it's differently encrypted files but it

326
00:12:33,839 --> 00:12:36,240
actually is not

327
00:12:36,240 --> 00:12:37,120
so

328
00:12:37,120 --> 00:12:39,920
what we did is we come up

329
00:12:39,920 --> 00:12:43,519
with a generic model for such an

330
00:12:43,519 --> 00:12:46,720
mr poor we call it a poor tool proof of

331
00:12:46,720 --> 00:12:49,279
redundancy and

332
00:12:49,279 --> 00:12:54,320
proof of replication and retrievability

333
00:12:54,320 --> 00:12:56,240
which extends the standard proof of

334
00:12:56,240 --> 00:12:58,160
retrievability

335
00:12:58,160 --> 00:12:59,600
so we have as in the standard

336
00:12:59,600 --> 00:13:02,160
retrievability the the

337
00:13:02,160 --> 00:13:05,440
protocols to store data and the protocol

338
00:13:05,440 --> 00:13:08,000
to challenge and verify the challenge

339
00:13:08,000 --> 00:13:09,200
which we

340
00:13:09,200 --> 00:13:13,360
put together in a verify as one protocol

341
00:13:13,360 --> 00:13:16,480
but the two new protocols we look at is

342
00:13:16,480 --> 00:13:18,320
first replicate

343
00:13:18,320 --> 00:13:20,560
so this will come later when i explain

344
00:13:20,560 --> 00:13:23,120
our protocol so replicate should

345
00:13:23,120 --> 00:13:24,240
enable

346
00:13:24,240 --> 00:13:26,240
the provider to replicate the data by

347
00:13:26,240 --> 00:13:27,600
himself

348
00:13:27,600 --> 00:13:30,160
or we have check replica which would

349
00:13:30,160 --> 00:13:33,760
extend the mr pdp

350
00:13:33,760 --> 00:13:37,600
by enabling the provider to verify

351
00:13:37,600 --> 00:13:39,680
that the uploaded data are indeed

352
00:13:39,680 --> 00:13:42,399
replicas

353
00:13:43,199 --> 00:13:45,680
the security definitions again as it's a

354
00:13:45,680 --> 00:13:47,839
proof of retrievability we have want

355
00:13:47,839 --> 00:13:50,000
data extractability so we want to know

356
00:13:50,000 --> 00:13:51,760
the data is still there

357
00:13:51,760 --> 00:13:53,920
and the second

358
00:13:53,920 --> 00:13:56,720
notion we created and defined

359
00:13:56,720 --> 00:13:59,199
is storage allocation which guarantees

360
00:13:59,199 --> 00:14:01,600
that the provider really needs

361
00:14:01,600 --> 00:14:04,000
as much space

362
00:14:04,000 --> 00:14:06,639
as would be needed for the

363
00:14:06,639 --> 00:14:09,040
file and all the replicas

364
00:14:09,040 --> 00:14:10,079
and

365
00:14:10,079 --> 00:14:11,519
well as it is a

366
00:14:11,519 --> 00:14:14,079
rational adversary then

367
00:14:14,079 --> 00:14:15,040
it

368
00:14:15,040 --> 00:14:17,120
only makes sense for him to store the

369
00:14:17,120 --> 00:14:20,000
replicas because the storage space is

370
00:14:20,000 --> 00:14:23,839
consumed in any case

371
00:14:23,920 --> 00:14:26,760
correct replication again for the

372
00:14:26,760 --> 00:14:29,600
mrpdp-like protocols

373
00:14:29,600 --> 00:14:32,320
the definitions in detail you find in

374
00:14:32,320 --> 00:14:34,880
the paper

375
00:14:35,360 --> 00:14:36,560
so then

376
00:14:36,560 --> 00:14:38,160
i come to the

377
00:14:38,160 --> 00:14:41,440
towards the protocol we designed and

378
00:14:41,440 --> 00:14:44,560
which is called mirror

379
00:14:44,560 --> 00:14:47,760
so which asks the question what what

380
00:14:47,760 --> 00:14:50,240
needs to be done so the that the service

381
00:14:50,240 --> 00:14:52,560
provider could replicate the data

382
00:14:52,560 --> 00:14:54,959
by himself and

383
00:14:54,959 --> 00:14:57,440
of course that's kind of a dilemma

384
00:14:57,440 --> 00:14:58,639
because

385
00:14:58,639 --> 00:15:00,320
we have seen

386
00:15:00,320 --> 00:15:02,240
we have this challenge response and the

387
00:15:02,240 --> 00:15:06,399
verify and there we would like to

388
00:15:06,399 --> 00:15:09,519
find the cheating service provider who

389
00:15:09,519 --> 00:15:11,279
was not replicating but is now

390
00:15:11,279 --> 00:15:13,279
replicating on the fly

391
00:15:13,279 --> 00:15:15,199
so this

392
00:15:15,199 --> 00:15:17,839
responding should be rather costly if

393
00:15:17,839 --> 00:15:20,320
you have not replicated before which

394
00:15:20,320 --> 00:15:23,519
means the replication process

395
00:15:23,519 --> 00:15:25,839
needs to be associated with some cost

396
00:15:25,839 --> 00:15:27,440
time wise or

397
00:15:27,440 --> 00:15:30,160
computation wise

398
00:15:30,160 --> 00:15:32,160
on the other hand for the store

399
00:15:32,160 --> 00:15:34,880
replicate we of course want to have the

400
00:15:34,880 --> 00:15:35,920
costs

401
00:15:35,920 --> 00:15:38,720
rather low so if we upload something the

402
00:15:38,720 --> 00:15:40,399
service provider needs to replicate

403
00:15:40,399 --> 00:15:43,360
everything but of course this should not

404
00:15:43,360 --> 00:15:44,880
take forever

405
00:15:44,880 --> 00:15:46,240
so

406
00:15:46,240 --> 00:15:48,480
this needs to be there needs to be a

407
00:15:48,480 --> 00:15:51,680
fine balance found between the cost high

408
00:15:51,680 --> 00:15:54,959
enough so that we can catch

409
00:15:54,959 --> 00:15:57,360
him during the challenge response but

410
00:15:57,360 --> 00:15:59,440
low enough so that

411
00:15:59,440 --> 00:16:02,320
replication is possible

412
00:16:02,320 --> 00:16:03,839
and

413
00:16:03,839 --> 00:16:04,959
the

414
00:16:04,959 --> 00:16:07,199
kind of primitive we use are

415
00:16:07,199 --> 00:16:09,680
cryptographic puzzles

416
00:16:09,680 --> 00:16:11,360
so those are

417
00:16:11,360 --> 00:16:14,480
functions which consume a certain time

418
00:16:14,480 --> 00:16:17,199
to to solve and

419
00:16:17,199 --> 00:16:19,040
kind of two

420
00:16:19,040 --> 00:16:22,800
famous ones are out there one is

421
00:16:22,800 --> 00:16:27,680
given a value find a brie image

422
00:16:27,680 --> 00:16:30,399
according to a hash function

423
00:16:30,399 --> 00:16:32,880
well this is very difficult to

424
00:16:32,880 --> 00:16:34,880
apply here on the one hand it's of

425
00:16:34,880 --> 00:16:37,279
course elegant because you could have

426
00:16:37,279 --> 00:16:40,240
the data and the brie image of the data

427
00:16:40,240 --> 00:16:42,639
would be the replica and you can easily

428
00:16:42,639 --> 00:16:44,959
from the replica create it back by by

429
00:16:44,959 --> 00:16:47,519
hashing while it takes a while to

430
00:16:47,519 --> 00:16:51,920
replicate it to find the pre-images but

431
00:16:51,920 --> 00:16:54,079
to find pre-images you would need to

432
00:16:54,079 --> 00:16:58,240
reduce the block size to a very small

433
00:16:58,240 --> 00:16:59,759
very small

434
00:16:59,759 --> 00:17:02,880
very few bits and

435
00:17:02,880 --> 00:17:04,480
also you don't have homomorphic

436
00:17:04,480 --> 00:17:06,400
properties so in the proof of

437
00:17:06,400 --> 00:17:09,199
retrievability it is it will not going

438
00:17:09,199 --> 00:17:10,079
to be

439
00:17:10,079 --> 00:17:12,880
efficient so we followed this second

440
00:17:12,880 --> 00:17:15,760
approach there are those rsa based

441
00:17:15,760 --> 00:17:17,359
puzzles

442
00:17:17,359 --> 00:17:19,839
now they are not related to the data

443
00:17:19,839 --> 00:17:21,919
directly but

444
00:17:21,919 --> 00:17:24,880
we can combine them in a homomorphic way

445
00:17:24,880 --> 00:17:28,000
so that we keep all those properties

446
00:17:28,000 --> 00:17:30,240
and

447
00:17:31,039 --> 00:17:33,520
this matrix gives an overview how we

448
00:17:33,520 --> 00:17:35,919
combine it so we multiply it from the

449
00:17:35,919 --> 00:17:38,400
puzzle we extract some blinding factor

450
00:17:38,400 --> 00:17:40,080
which basically is the solution of the

451
00:17:40,080 --> 00:17:42,640
puzzle and multiply it

452
00:17:42,640 --> 00:17:44,160
to the data

453
00:17:44,160 --> 00:17:49,039
to generate one replica so d11 to dn

454
00:17:49,039 --> 00:17:50,880
s

455
00:17:50,880 --> 00:17:53,600
is the file split into blocks and the

456
00:17:53,600 --> 00:17:56,480
blocks split into sectors

457
00:17:56,480 --> 00:17:59,360
and one sector is kind of like then the

458
00:17:59,360 --> 00:18:03,039
size of the rsa modulus

459
00:18:04,559 --> 00:18:06,799
and

460
00:18:06,960 --> 00:18:09,280
yep now it's turned out to be quite

461
00:18:09,280 --> 00:18:11,120
difficult to come up with the right

462
00:18:11,120 --> 00:18:15,200
parameters so the basic rsa puzzle

463
00:18:15,200 --> 00:18:17,039
is saying

464
00:18:17,039 --> 00:18:19,520
you compute g to the x for for very

465
00:18:19,520 --> 00:18:23,039
large x so x is a 2 to the l

466
00:18:23,039 --> 00:18:24,559
modulo n

467
00:18:24,559 --> 00:18:25,760
and

468
00:18:25,760 --> 00:18:28,799
how you do this if you cannot factor n

469
00:18:28,799 --> 00:18:31,919
is that you do a

470
00:18:31,919 --> 00:18:34,880
successive squaring modulu n so you

471
00:18:34,880 --> 00:18:36,320
really have to

472
00:18:36,320 --> 00:18:38,240
compute it with this

473
00:18:38,240 --> 00:18:39,840
huge exponent

474
00:18:39,840 --> 00:18:42,320
but if you know the factors of n you of

475
00:18:42,320 --> 00:18:44,400
course have a shortcut because you can

476
00:18:44,400 --> 00:18:45,600
apply

477
00:18:45,600 --> 00:18:48,960
module of phi of n in the exponent and

478
00:18:48,960 --> 00:18:51,760
then just have a standard exponentiation

479
00:18:51,760 --> 00:18:52,799
with a

480
00:18:52,799 --> 00:18:56,559
kind of 2000 bit exponent while x could

481
00:18:56,559 --> 00:18:59,760
be much larger

482
00:19:01,280 --> 00:19:03,200
however it's difficult to apply it

483
00:19:03,200 --> 00:19:06,480
straightforward because

484
00:19:06,480 --> 00:19:08,960
the exponents need to be very small like

485
00:19:08,960 --> 00:19:11,679
if you have 2000 bit exponents

486
00:19:11,679 --> 00:19:13,200
replication of

487
00:19:13,200 --> 00:19:16,720
a 100 megabyte file is already taking

488
00:19:16,720 --> 00:19:18,320
several hours

489
00:19:18,320 --> 00:19:21,039
so exponents have to be extremely small

490
00:19:21,039 --> 00:19:23,440
but then of course you do not really

491
00:19:23,440 --> 00:19:25,120
have

492
00:19:25,120 --> 00:19:28,320
a good trapdoor because then

493
00:19:28,320 --> 00:19:31,280
modulo 5n so if it's smaller than 5n

494
00:19:31,280 --> 00:19:32,640
there is no

495
00:19:32,640 --> 00:19:35,200
advantage for the user so we looked for

496
00:19:35,200 --> 00:19:39,360
another way and how we could involve

497
00:19:39,360 --> 00:19:42,559
several of those puzzle solutions

498
00:19:42,559 --> 00:19:44,080
to

499
00:19:44,080 --> 00:19:45,520
obtain

500
00:19:45,520 --> 00:19:47,600
one blinding factor

501
00:19:47,600 --> 00:19:48,720
and

502
00:19:48,720 --> 00:19:51,280
well if you

503
00:19:51,280 --> 00:19:54,640
use kind of multiply several of those

504
00:19:54,640 --> 00:19:57,600
puzzle solutions together you kind of

505
00:19:57,600 --> 00:19:59,120
end up

506
00:19:59,120 --> 00:20:01,760
with a structure very similar to a

507
00:20:01,760 --> 00:20:03,679
linear shift register

508
00:20:03,679 --> 00:20:04,640
just

509
00:20:04,640 --> 00:20:06,400
transformed into the

510
00:20:06,400 --> 00:20:08,400
multiplication domain

511
00:20:08,400 --> 00:20:09,520
so

512
00:20:09,520 --> 00:20:11,039
we have

513
00:20:11,039 --> 00:20:13,039
kind of the puzzle solutions with the

514
00:20:13,039 --> 00:20:17,760
exponents s1 s2 s3 2s8

515
00:20:17,760 --> 00:20:19,600
for the example of a

516
00:20:19,600 --> 00:20:22,959
register of length 8

517
00:20:23,679 --> 00:20:25,280
the register is given by the

518
00:20:25,280 --> 00:20:26,640
coefficients

519
00:20:26,640 --> 00:20:28,559
c1 to c8

520
00:20:28,559 --> 00:20:30,640
and now what you do is you take the

521
00:20:30,640 --> 00:20:31,919
first cell

522
00:20:31,919 --> 00:20:35,039
raise it to the power c1 then multiply

523
00:20:35,039 --> 00:20:37,679
to the second cell raised to the power

524
00:20:37,679 --> 00:20:40,080
c2 and so on and

525
00:20:40,080 --> 00:20:42,880
multiply everything up and get the next

526
00:20:42,880 --> 00:20:45,559
blinding factor g to the

527
00:20:45,559 --> 00:20:48,720
s9 um

528
00:20:48,720 --> 00:20:50,720
so this is um

529
00:20:50,720 --> 00:20:52,400
kind of yeah

530
00:20:52,400 --> 00:20:55,600
ls lfsr which is transformed in the

531
00:20:55,600 --> 00:20:58,960
multiplica multiplicative domain

532
00:20:58,960 --> 00:21:00,840
and you can have the

533
00:21:00,840 --> 00:21:03,200
according shift registers for the

534
00:21:03,200 --> 00:21:05,280
exponents and that's really a standard

535
00:21:05,280 --> 00:21:07,679
shift register with multiplying the

536
00:21:07,679 --> 00:21:11,200
coefficients and adding up

537
00:21:11,280 --> 00:21:13,440
so this is much faster to compute the

538
00:21:13,440 --> 00:21:16,000
exponents but you could give out the

539
00:21:16,000 --> 00:21:18,400
public one

540
00:21:18,400 --> 00:21:20,640
which is expensive to compute for the

541
00:21:20,640 --> 00:21:23,679
blinding factors

542
00:21:23,840 --> 00:21:26,480
and it is not possible to transform the

543
00:21:26,480 --> 00:21:31,919
public one into the secret one so

544
00:21:31,919 --> 00:21:32,960
now

545
00:21:32,960 --> 00:21:35,679
besides that you have to multiply the

546
00:21:35,679 --> 00:21:37,760
public one and

547
00:21:37,760 --> 00:21:40,240
only do additions in the

548
00:21:40,240 --> 00:21:42,480
secret one

549
00:21:42,480 --> 00:21:45,600
we could apply another

550
00:21:45,600 --> 00:21:47,919
kind of another trapdoor

551
00:21:47,919 --> 00:21:50,480
if we choose

552
00:21:50,480 --> 00:21:52,080
a shift

553
00:21:52,080 --> 00:21:54,159
polynomial which is

554
00:21:54,159 --> 00:21:56,000
not primitive

555
00:21:56,000 --> 00:21:58,000
so means that

556
00:21:58,000 --> 00:22:01,120
yeah it has some redundancy and

557
00:22:01,120 --> 00:22:02,640
also the

558
00:22:02,640 --> 00:22:04,720
sequence of blinding factors of course

559
00:22:04,720 --> 00:22:06,320
will not

560
00:22:06,320 --> 00:22:07,760
have the the

561
00:22:07,760 --> 00:22:10,000
full cycle length it could have but a

562
00:22:10,000 --> 00:22:12,320
shorter one so it produces kind of a

563
00:22:12,320 --> 00:22:14,880
sequence which could be already produced

564
00:22:14,880 --> 00:22:18,159
by a much shorter polynomial

565
00:22:18,159 --> 00:22:20,400
so exactly this we apply here we use in

566
00:22:20,400 --> 00:22:23,039
the public

567
00:22:23,760 --> 00:22:27,039
lsfr a multiple of the feedback

568
00:22:27,039 --> 00:22:29,280
polynomial of the secret one

569
00:22:29,280 --> 00:22:32,720
so the lsfr gets much longer

570
00:22:32,720 --> 00:22:35,440
but it again cannot be transformed back

571
00:22:35,440 --> 00:22:37,440
because it's not possible to factorize

572
00:22:37,440 --> 00:22:39,200
this polynomial

573
00:22:39,200 --> 00:22:41,679
as we are in an as a group and cannot

574
00:22:41,679 --> 00:22:43,760
compute inverses there

575
00:22:43,760 --> 00:22:45,120
so

576
00:22:45,120 --> 00:22:46,640
then

577
00:22:46,640 --> 00:22:47,600
and

578
00:22:47,600 --> 00:22:49,679
yeah in fact the parameters you choose

579
00:22:49,679 --> 00:22:51,760
the secret one just needs to be length

580
00:22:51,760 --> 00:22:52,799
two

581
00:22:52,799 --> 00:22:54,960
and the public one

582
00:22:54,960 --> 00:22:58,799
can be up to length 15 or longer so we

583
00:22:58,799 --> 00:23:02,320
get quite a good difference in

584
00:23:02,320 --> 00:23:04,240
the effort it takes

585
00:23:04,240 --> 00:23:07,280
to compute

586
00:23:07,280 --> 00:23:10,320
the blinding factors if you know

587
00:23:10,320 --> 00:23:12,559
the factorization and if you compute the

588
00:23:12,559 --> 00:23:14,559
blinding factors if you don't know

589
00:23:14,559 --> 00:23:16,640
now this is exactly what we do here and

590
00:23:16,640 --> 00:23:20,240
we we do we use two pairs of

591
00:23:20,240 --> 00:23:23,520
shift registers one forward

592
00:23:23,520 --> 00:23:25,679
starting so computing the blinding

593
00:23:25,679 --> 00:23:27,840
factors from the first to the last and

594
00:23:27,840 --> 00:23:30,159
one backward computing them from the

595
00:23:30,159 --> 00:23:32,320
last to the first

596
00:23:32,320 --> 00:23:33,360
which

597
00:23:33,360 --> 00:23:35,919
guarantees that for every so if you try

598
00:23:35,919 --> 00:23:38,159
just to to get one block

599
00:23:38,159 --> 00:23:40,000
somewhere in the middle you you have to

600
00:23:40,000 --> 00:23:41,760
compute all of them

601
00:23:41,760 --> 00:23:43,600
all of the blinding factors before and

602
00:23:43,600 --> 00:23:45,679
the one chain and all of them which

603
00:23:45,679 --> 00:23:47,679
follow afterwards in the second chain so

604
00:23:47,679 --> 00:23:50,159
you kind of have to compute always the

605
00:23:50,159 --> 00:23:51,679
same amount

606
00:23:51,679 --> 00:23:52,799
of

607
00:23:52,799 --> 00:23:54,559
blinding factors no matter which

608
00:23:54,559 --> 00:23:57,520
position you look at

609
00:23:57,679 --> 00:24:01,039
yes the parameter choices i i mentioned

610
00:24:01,039 --> 00:24:05,039
so the rsr modulus 2000 bit

611
00:24:05,039 --> 00:24:07,679
the poor usually takes 40 challenges so

612
00:24:07,679 --> 00:24:09,520
that's not dependent on the file size

613
00:24:09,520 --> 00:24:12,799
because we apply the erasure code

614
00:24:12,799 --> 00:24:14,880
before so that's

615
00:24:14,880 --> 00:24:17,360
there's the variability

616
00:24:17,360 --> 00:24:18,799
and then

617
00:24:18,799 --> 00:24:20,400
just use

618
00:24:20,400 --> 00:24:23,279
a two length two lfsr

619
00:24:23,279 --> 00:24:26,159
for the private and the 50 length 15 for

620
00:24:26,159 --> 00:24:28,880
the public and the exponent and the

621
00:24:28,880 --> 00:24:32,880
private one is around 70 bit

622
00:24:32,880 --> 00:24:34,320
70 bit

623
00:24:34,320 --> 00:24:36,960
there it shows that the cost

624
00:24:36,960 --> 00:24:38,880
for computing for answering this

625
00:24:38,880 --> 00:24:40,720
challenge

626
00:24:40,720 --> 00:24:42,720
for the

627
00:24:42,720 --> 00:24:45,279
service provider is

628
00:24:45,279 --> 00:24:47,919
exactly the price which it would cost to

629
00:24:47,919 --> 00:24:50,559
store and file of the according size

630
00:24:50,559 --> 00:24:53,919
on amazon s3 so there we have the same

631
00:24:53,919 --> 00:24:55,840
cost for answering the challenge if you

632
00:24:55,840 --> 00:24:57,919
don't have replicated

633
00:24:57,919 --> 00:25:00,400
as it would be to store simply store the

634
00:25:00,400 --> 00:25:01,919
replica

635
00:25:01,919 --> 00:25:04,640
so if you frequently challenge

636
00:25:04,640 --> 00:25:08,480
the length of 70 would be well suitable

637
00:25:08,480 --> 00:25:10,720
besides that it's then the same cost of

638
00:25:10,720 --> 00:25:11,679
course

639
00:25:11,679 --> 00:25:13,520
there is the timing

640
00:25:13,520 --> 00:25:15,840
so usually on the right side you see it

641
00:25:15,840 --> 00:25:19,360
takes around two seconds for the server

642
00:25:19,360 --> 00:25:21,840
to answer a replica but if

643
00:25:21,840 --> 00:25:22,720
the

644
00:25:22,720 --> 00:25:24,799
if the server has not stored the replica

645
00:25:24,799 --> 00:25:27,039
it takes him at least three seconds and

646
00:25:27,039 --> 00:25:30,799
this can be very well noticed

647
00:25:31,200 --> 00:25:34,799
creating a replica is kind of

648
00:25:34,799 --> 00:25:36,720
reasonable so

649
00:25:36,720 --> 00:25:38,960
times

650
00:25:38,960 --> 00:25:42,799
go into the few hundred

651
00:25:42,799 --> 00:25:44,640
seconds

652
00:25:44,640 --> 00:25:45,679
and

653
00:25:45,679 --> 00:25:49,200
then i conclude so we we introduced this

654
00:25:49,200 --> 00:25:50,880
proof of replication which we have

655
00:25:50,880 --> 00:25:53,840
ability as a new notion extending the

656
00:25:53,840 --> 00:25:55,600
standard poor and i think bringing it a

657
00:25:55,600 --> 00:25:57,600
bit more towards

658
00:25:57,600 --> 00:25:58,880
realistic

659
00:25:58,880 --> 00:26:00,480
settings

660
00:26:00,480 --> 00:26:03,279
we have developed this solution mirror

661
00:26:03,279 --> 00:26:06,080
and we have there a new puzzle a new

662
00:26:06,080 --> 00:26:07,520
asymmetric

663
00:26:07,520 --> 00:26:08,720
tool

664
00:26:08,720 --> 00:26:11,679
built on lsfr so this we we haven't seen

665
00:26:11,679 --> 00:26:16,000
before that you construct such a public

666
00:26:16,000 --> 00:26:18,159
lfsr

667
00:26:18,159 --> 00:26:20,320
which which you which has

668
00:26:20,320 --> 00:26:22,799
redundancy because the the polynomial is

669
00:26:22,799 --> 00:26:25,279
not primitive but you cannot transform

670
00:26:25,279 --> 00:26:28,240
it back to the to the short polynomial

671
00:26:28,240 --> 00:26:30,480
which we also think has could have many

672
00:26:30,480 --> 00:26:32,320
more applications

673
00:26:32,320 --> 00:26:35,200
and yeah this all

674
00:26:35,200 --> 00:26:37,840
is the building block for for the vision

675
00:26:37,840 --> 00:26:40,320
of having this transparent cloud

676
00:26:40,320 --> 00:26:42,159
services which

677
00:26:42,159 --> 00:26:44,640
you can verify and check as if you would

678
00:26:44,640 --> 00:26:47,840
have your id in-house

679
00:26:47,840 --> 00:26:50,440
okay thanks

680
00:26:50,440 --> 00:26:53,809
[Applause]

681
00:26:55,120 --> 00:26:56,559
great and if you have a question please

682
00:26:56,559 --> 00:26:57,919
come up to the mic and state your name

683
00:26:57,919 --> 00:27:00,640
and affiliation

684
00:27:03,200 --> 00:27:06,640
hi uh greg savarucho microsoft

685
00:27:06,640 --> 00:27:10,240
so the gap between um

686
00:27:10,240 --> 00:27:11,600
uh you know

687
00:27:11,600 --> 00:27:14,080
the honest cloud server and the cheating

688
00:27:14,080 --> 00:27:16,480
one is is one second

689
00:27:16,480 --> 00:27:17,360
um

690
00:27:17,360 --> 00:27:19,200
like in your parameters it was two

691
00:27:19,200 --> 00:27:22,559
seconds to do it honestly

692
00:27:23,120 --> 00:27:24,799
can you talk about the trade-offs if you

693
00:27:24,799 --> 00:27:26,159
wanted to make that

694
00:27:26,159 --> 00:27:27,600
larger

695
00:27:27,600 --> 00:27:29,679
um well the thing is if you want to make

696
00:27:29,679 --> 00:27:31,919
it larger now for for cheating this

697
00:27:31,919 --> 00:27:33,520
protocol just

698
00:27:33,520 --> 00:27:35,279
there's a challenge which just varies

699
00:27:35,279 --> 00:27:37,200
limited blocks

700
00:27:37,200 --> 00:27:39,279
and so the cloud

701
00:27:39,279 --> 00:27:41,039
provider only needs to compute those

702
00:27:41,039 --> 00:27:42,480
limited blocks

703
00:27:42,480 --> 00:27:45,279
now if you make those few blocks more

704
00:27:45,279 --> 00:27:46,720
expensive

705
00:27:46,720 --> 00:27:48,640
there's the risk that at the same time

706
00:27:48,640 --> 00:27:50,720
you also increase the the replication

707
00:27:50,720 --> 00:27:51,919
cost

708
00:27:51,919 --> 00:27:53,760
so it's kind of

709
00:27:53,760 --> 00:27:55,520
um

710
00:27:55,520 --> 00:27:57,679
i think you you find more analysis in

711
00:27:57,679 --> 00:27:59,679
the paper so

712
00:27:59,679 --> 00:28:03,520
this is also one idea which we have in

713
00:28:03,520 --> 00:28:07,120
in where is the matrix here

714
00:28:07,120 --> 00:28:09,440
so for replication you need to compute

715
00:28:09,440 --> 00:28:11,279
all the blinding factors

716
00:28:11,279 --> 00:28:13,840
so what what you ideally want is that

717
00:28:13,840 --> 00:28:16,159
even if you just want to give back one

718
00:28:16,159 --> 00:28:18,000
block as an answer you should need to

719
00:28:18,000 --> 00:28:20,159
compute all the blinding factors because

720
00:28:20,159 --> 00:28:22,000
then

721
00:28:22,000 --> 00:28:23,200
so if you increase the number of

722
00:28:23,200 --> 00:28:25,279
blinding factors you need to answer one

723
00:28:25,279 --> 00:28:26,880
block

724
00:28:26,880 --> 00:28:28,480
this does not cost you more for

725
00:28:28,480 --> 00:28:30,720
replication but this increases the cost

726
00:28:30,720 --> 00:28:33,279
for for answering the challenge that one

727
00:28:33,279 --> 00:28:35,840
block so on this

728
00:28:35,840 --> 00:28:37,520
you could play

729
00:28:37,520 --> 00:28:40,240
but yeah kind of the parameters i

730
00:28:40,240 --> 00:28:41,840
have shown is

731
00:28:41,840 --> 00:28:44,880
also the optimal spot we have found okay

732
00:28:44,880 --> 00:28:46,880
thanks

733
00:28:46,880 --> 00:28:49,440
i actually have one question about

734
00:28:49,440 --> 00:28:52,480
systematizing this work um turning it

735
00:28:52,480 --> 00:28:55,120
into an actual system so very few cloud

736
00:28:55,120 --> 00:28:56,320
providers

737
00:28:56,320 --> 00:28:59,279
storage providers also compute right

738
00:28:59,279 --> 00:29:02,480
many may have a compute node but there's

739
00:29:02,480 --> 00:29:04,399
associated costs with those things and

740
00:29:04,399 --> 00:29:06,159
one of the dominant causes are actually

741
00:29:06,159 --> 00:29:07,760
doing gets

742
00:29:07,760 --> 00:29:08,640
so

743
00:29:08,640 --> 00:29:10,799
would it actually is this economically

744
00:29:10,799 --> 00:29:12,399
viable or does it make more sense to

745
00:29:12,399 --> 00:29:14,320
just like compute a mac or the data and

746
00:29:14,320 --> 00:29:15,760
do one get

747
00:29:15,760 --> 00:29:17,039
so

748
00:29:17,039 --> 00:29:19,919
i i think i mean there needs to be some

749
00:29:19,919 --> 00:29:22,080
computation simply to manage all this

750
00:29:22,080 --> 00:29:24,399
storage so

751
00:29:24,399 --> 00:29:27,520
you don't need a full-blown ec2 for for

752
00:29:27,520 --> 00:29:29,840
sure but yeah

753
00:29:29,840 --> 00:29:31,760
my guess or my hope is that there will

754
00:29:31,760 --> 00:29:34,559
be more storage also available more

755
00:29:34,559 --> 00:29:36,080
computation in the storage clouds

756
00:29:36,080 --> 00:29:38,559
available also because there's simply

757
00:29:38,559 --> 00:29:40,320
more transparency

758
00:29:40,320 --> 00:29:43,520
requested by the users

759
00:29:43,679 --> 00:29:45,600
i'm unaware of any cloud provider that

760
00:29:45,600 --> 00:29:49,360
would adopt a pdp or por scheme because

761
00:29:49,360 --> 00:29:51,440
it somehow admits that they're being

762
00:29:51,440 --> 00:29:53,600
dishonest right i think they would much

763
00:29:53,600 --> 00:29:55,440
rather just say like yeah we'll provide

764
00:29:55,440 --> 00:29:58,240
nine nines and we'll call it a day

765
00:29:58,240 --> 00:29:59,840
yes

766
00:29:59,840 --> 00:30:02,320
you have to see maybe not in this pure

767
00:30:02,320 --> 00:30:04,960
form i would expect some maybe hybrid

768
00:30:04,960 --> 00:30:05,919
things

769
00:30:05,919 --> 00:30:08,320
some third-parties kind of poor ideas

770
00:30:08,320 --> 00:30:10,880
but some secure hardware

771
00:30:10,880 --> 00:30:12,640
guarantees so

772
00:30:12,640 --> 00:30:14,799
some some nice combination of it i would

773
00:30:14,799 --> 00:30:17,039
in the end expect

774
00:30:17,039 --> 00:30:19,600
great razer please

775
00:30:19,600 --> 00:30:22,559
reza kotm

776
00:30:22,559 --> 00:30:25,520
i don't have a question just the comment

777
00:30:25,520 --> 00:30:27,840
um so i'm one of the uh

778
00:30:27,840 --> 00:30:30,720
authors of that paper mr pdp that you

779
00:30:30,720 --> 00:30:33,440
cite yes published in 2008

780
00:30:33,440 --> 00:30:35,039
i just wanted to let you know that we

781
00:30:35,039 --> 00:30:37,120
actually had a follow-up work

782
00:30:37,120 --> 00:30:40,320
after that in 2013 which does something

783
00:30:40,320 --> 00:30:43,120
very similar to what you're doing uh

784
00:30:43,120 --> 00:30:44,880
shifting the burden

785
00:30:44,880 --> 00:30:46,880
from the client to the cloud provider

786
00:30:46,880 --> 00:30:48,880
for creating replicas especially when

787
00:30:48,880 --> 00:30:50,559
some of those replicas fail and they

788
00:30:50,559 --> 00:30:52,559
need to be recreated

789
00:30:52,559 --> 00:30:53,360
it's

790
00:30:53,360 --> 00:30:54,960
somewhat similar we don't call it

791
00:30:54,960 --> 00:30:57,200
blinding we call it masking and i don't

792
00:30:57,200 --> 00:30:58,399
know if you're aware of it you don't

793
00:30:58,399 --> 00:31:01,440
cite it so this was in 2013.

794
00:31:01,440 --> 00:31:03,679
i can send you the the point if you send

795
00:31:03,679 --> 00:31:05,760
it to me fine we are happy to look into

796
00:31:05,760 --> 00:31:08,559
it thanks thanks

797
00:31:08,720 --> 00:31:09,919
great let's thank our speaker one more

798
00:31:09,919 --> 00:31:12,919
time

799
00:31:15,410 --> 00:31:18,609
[Applause]

800
00:31:20,559 --> 00:31:22,639
you

