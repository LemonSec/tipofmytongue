1
00:00:10,400 --> 00:00:12,639
hello everyone i'm insulin from georgia

2
00:00:12,639 --> 00:00:15,920
tech this talk is about how to find api

3
00:00:15,920 --> 00:00:18,080
misuse but by comparing different

4
00:00:18,080 --> 00:00:20,160
multiple api usages

5
00:00:20,160 --> 00:00:23,119
this is a joint work with dr chang min

6
00:00:23,119 --> 00:00:25,199
suji c and young jin zhang and my

7
00:00:25,199 --> 00:00:27,680
advisor professor task kim and professor

8
00:00:27,680 --> 00:00:30,960
mayum nak

9
00:00:30,960 --> 00:00:33,520
apis in today's software are plentiful

10
00:00:33,520 --> 00:00:36,480
yet complex for example in openssl there

11
00:00:36,480 --> 00:00:41,440
are about 4 000 apis in version 1.0.28

12
00:00:41,440 --> 00:00:44,480
and apis are really fast evolving from

13
00:00:44,480 --> 00:00:49,360
version 1.0.1 t to version 1.0.28

14
00:00:49,360 --> 00:00:52,800
more than 100 apis are newly introduced

15
00:00:52,800 --> 00:00:55,199
and people use a lot of apis when

16
00:00:55,199 --> 00:00:57,760
implement their software for example in

17
00:00:57,760 --> 00:01:01,280
openssh they use more than 100 of

18
00:01:01,280 --> 00:01:03,520
necessary apis

19
00:01:03,520 --> 00:01:06,080
this is not limited to openssl but

20
00:01:06,080 --> 00:01:08,400
browsers like firefox and operating

21
00:01:08,400 --> 00:01:12,200
system like windows

22
00:01:12,240 --> 00:01:16,560
complex aps resulting programs mistakes

23
00:01:16,560 --> 00:01:18,479
it is caused by the problems in

24
00:01:18,479 --> 00:01:20,159
documentation

25
00:01:20,159 --> 00:01:22,560
documentation is incomplete for example

26
00:01:22,560 --> 00:01:25,280
people mention that the documentation of

27
00:01:25,280 --> 00:01:28,400
hostname verification in openssl is not

28
00:01:28,400 --> 00:01:29,920
detailed enough

29
00:01:29,920 --> 00:01:32,240
and it is too long to read them all and

30
00:01:32,240 --> 00:01:34,960
understand them all

31
00:01:34,960 --> 00:01:37,200
and there are some internal apis which

32
00:01:37,200 --> 00:01:38,320
don't have

33
00:01:38,320 --> 00:01:40,479
any documentation

34
00:01:40,479 --> 00:01:42,079
and more

35
00:01:42,079 --> 00:01:44,479
more seriously there is no automatic

36
00:01:44,479 --> 00:01:47,439
tool to support programmers

37
00:01:47,439 --> 00:01:50,479
most tools require some formal formal

38
00:01:50,479 --> 00:01:53,280
specification and precise semantics but

39
00:01:53,280 --> 00:01:58,320
in reality most of apis are lack of them

40
00:01:58,799 --> 00:02:00,799
the problem is that the

41
00:02:00,799 --> 00:02:03,040
programmers mistakes can cause some

42
00:02:03,040 --> 00:02:05,520
security problems for example if we

43
00:02:05,520 --> 00:02:09,119
incorrectly use ssla library then it may

44
00:02:09,119 --> 00:02:12,239
cause some men in the middle attack

45
00:02:12,239 --> 00:02:15,360
and if we incorrectly use api in firefox

46
00:02:15,360 --> 00:02:17,840
it can cause code execution and in

47
00:02:17,840 --> 00:02:19,680
windows it can cause privilege

48
00:02:19,680 --> 00:02:22,319
escalation

49
00:02:22,319 --> 00:02:24,319
to help programmers there are three

50
00:02:24,319 --> 00:02:27,840
major ways formal method model checking

51
00:02:27,840 --> 00:02:30,239
and symbolic execution

52
00:02:30,239 --> 00:02:32,640
formal method is a promising way but it

53
00:02:32,640 --> 00:02:35,680
requires specification but making

54
00:02:35,680 --> 00:02:38,160
specification is time consuming and most

55
00:02:38,160 --> 00:02:41,120
of apis are lack of them

56
00:02:41,120 --> 00:02:43,280
and second is model checking model

57
00:02:43,280 --> 00:02:46,000
checking also requires manual analysis

58
00:02:46,000 --> 00:02:48,080
to define model

59
00:02:48,080 --> 00:02:49,840
and

60
00:02:49,840 --> 00:02:53,040
it also it is lack of semantic context

61
00:02:53,040 --> 00:02:55,440
and symbolic execution the problem is

62
00:02:55,440 --> 00:02:57,040
the scalability

63
00:02:57,040 --> 00:02:59,120
these days there were a lot of

64
00:02:59,120 --> 00:03:01,519
improvements on scalability of symbolic

65
00:03:01,519 --> 00:03:04,319
execution but still it is hard to apply

66
00:03:04,319 --> 00:03:07,679
to large code

67
00:03:08,239 --> 00:03:10,480
except for these practices there is a

68
00:03:10,480 --> 00:03:13,200
promising way finding bugs by using

69
00:03:13,200 --> 00:03:16,640
existing code it is suggested a paper

70
00:03:16,640 --> 00:03:20,159
bugs as a deviant behavior in osdi 2001

71
00:03:20,159 --> 00:03:23,040
but it requires syntactic template like

72
00:03:23,040 --> 00:03:25,440
a checking nolan mellow

73
00:03:25,440 --> 00:03:27,920
juxta which is introduced in

74
00:03:27,920 --> 00:03:31,760
sosp 2015 it infers the correct

75
00:03:31,760 --> 00:03:34,239
semantics from the multiple

76
00:03:34,239 --> 00:03:36,239
multiple implementations

77
00:03:36,239 --> 00:03:39,200
but just approach is hard to apply

78
00:03:39,200 --> 00:03:42,159
beyond the file system so our research

79
00:03:42,159 --> 00:03:44,159
goal is that

80
00:03:44,159 --> 00:03:46,879
can we apply this method any kind of

81
00:03:46,879 --> 00:03:51,040
software without any manual effort

82
00:03:51,840 --> 00:03:55,599
our idea is that comparing api usages in

83
00:03:55,599 --> 00:03:58,480
various implementation

84
00:03:58,480 --> 00:04:00,799
for example if you want to find the open

85
00:04:00,799 --> 00:04:04,319
ssl api issues

86
00:04:04,319 --> 00:04:05,840
then first collect

87
00:04:05,840 --> 00:04:09,200
application which uses open access apis

88
00:04:09,200 --> 00:04:15,120
for example ker nginx map and hex chat

89
00:04:15,120 --> 00:04:17,519
give them as an input to the api

90
00:04:17,519 --> 00:04:20,160
sanitizer api sanitizer collects api

91
00:04:20,160 --> 00:04:22,800
context usage

92
00:04:22,800 --> 00:04:25,520
and resulted as a majority uses and

93
00:04:25,520 --> 00:04:28,320
deviant uses wizard to use this are

94
00:04:28,320 --> 00:04:31,680
considered as likely clocked and

95
00:04:31,680 --> 00:04:35,680
deviant uses as likely about

96
00:04:36,080 --> 00:04:38,560
our approach is really from promising

97
00:04:38,560 --> 00:04:39,360
and

98
00:04:39,360 --> 00:04:42,639
we have found the 76 new box and in the

99
00:04:42,639 --> 00:04:44,800
large complex software including linux

100
00:04:44,800 --> 00:04:48,240
kernel and debian packages

101
00:04:48,720 --> 00:04:51,280
but comparing different api usages is

102
00:04:51,280 --> 00:04:52,800
not trivial

103
00:04:52,800 --> 00:04:55,759
because api uses are too different from

104
00:04:55,759 --> 00:04:58,800
implementation to implementation and sub

105
00:04:58,800 --> 00:05:01,199
cosmetics of the

106
00:05:01,199 --> 00:05:04,080
correct api uses and handling large

107
00:05:04,080 --> 00:05:07,680
complex code is difficult

108
00:05:08,080 --> 00:05:11,680
here is an example of open ssl api

109
00:05:11,680 --> 00:05:14,400
there is an api called ssl get verified

110
00:05:14,400 --> 00:05:16,479
result which use the returning the

111
00:05:16,479 --> 00:05:20,000
result of peer certificate verification

112
00:05:20,000 --> 00:05:21,919
at the first time we might think the

113
00:05:21,919 --> 00:05:24,720
track to use is as follows call assessor

114
00:05:24,720 --> 00:05:27,120
get verified result and check whether it

115
00:05:27,120 --> 00:05:29,600
is okay

116
00:05:29,840 --> 00:05:32,479
but it is not if you read documentation

117
00:05:32,479 --> 00:05:34,720
carefully is that if there is no peer

118
00:05:34,720 --> 00:05:38,080
certificate then it always returns okay

119
00:05:38,080 --> 00:05:40,880
so the crack to use is that

120
00:05:40,880 --> 00:05:43,360
call ssl get verified result and check

121
00:05:43,360 --> 00:05:45,840
whether it is okay and also you need to

122
00:05:45,840 --> 00:05:47,280
check whether

123
00:05:47,280 --> 00:05:50,400
call ssa get peer certificate and check

124
00:05:50,400 --> 00:05:53,120
whether it is not known

125
00:05:53,120 --> 00:05:55,840
this correct use is very subtle so easy

126
00:05:55,840 --> 00:05:58,719
to make mistake

127
00:05:58,800 --> 00:06:01,919
here is a correct use of this api in

128
00:06:01,919 --> 00:06:03,199
curve

129
00:06:03,199 --> 00:06:07,680
first it calls ssa get peer certificate

130
00:06:07,680 --> 00:06:10,639
and check whether it is none or or not

131
00:06:10,639 --> 00:06:13,120
if you follow the fourth path then you

132
00:06:13,120 --> 00:06:16,319
check whether it calls ssa get verified

133
00:06:16,319 --> 00:06:18,560
result

134
00:06:18,560 --> 00:06:20,960
and it checks whether it is okay or not

135
00:06:20,960 --> 00:06:23,680
if we follow the true path then actually

136
00:06:23,680 --> 00:06:26,960
this path is semantically same with the

137
00:06:26,960 --> 00:06:28,479
correct use

138
00:06:28,479 --> 00:06:32,318
so it is cracked use

139
00:06:33,600 --> 00:06:35,280
there are another various

140
00:06:35,280 --> 00:06:37,840
implementations including antonyx map

141
00:06:37,840 --> 00:06:39,039
and hex chat

142
00:06:39,039 --> 00:06:41,919
similarly in antonix there is a path

143
00:06:41,919 --> 00:06:45,600
that semantically same with correct use

144
00:06:45,600 --> 00:06:49,680
so it is correct to use and in map it

145
00:06:49,680 --> 00:06:51,360
also has the path

146
00:06:51,360 --> 00:06:54,000
so it is correct to use

147
00:06:54,000 --> 00:06:56,400
but in the hex chat it calls ssa get

148
00:06:56,400 --> 00:06:58,560
verified result and ssa get peer

149
00:06:58,560 --> 00:07:00,880
certificate but there is a

150
00:07:00,880 --> 00:07:03,599
there is no return value check of ssl

151
00:07:03,599 --> 00:07:05,440
get peer certificate

152
00:07:05,440 --> 00:07:08,639
therefore it is incorrect use

153
00:07:08,639 --> 00:07:10,800
here is question can we distinguish

154
00:07:10,800 --> 00:07:13,280
between correct implementations and

155
00:07:13,280 --> 00:07:16,639
buggy implementations

156
00:07:16,639 --> 00:07:18,400
there are some challenges first

157
00:07:18,400 --> 00:07:20,800
challenges the api uses are different

158
00:07:20,800 --> 00:07:23,120
from each other

159
00:07:23,120 --> 00:07:26,000
for example incur they use a equality

160
00:07:26,000 --> 00:07:28,479
check to check the return value of ssh

161
00:07:28,479 --> 00:07:30,720
get verified resolved

162
00:07:30,720 --> 00:07:33,160
and in nginx and nmap they use

163
00:07:33,160 --> 00:07:35,360
non-equality check

164
00:07:35,360 --> 00:07:38,240
more complexly in hex chat they use a

165
00:07:38,240 --> 00:07:40,400
switch case statement

166
00:07:40,400 --> 00:07:43,440
so it is hard to find this bug by using

167
00:07:43,440 --> 00:07:47,120
just syntactic method

168
00:07:47,759 --> 00:07:49,840
and the correct api users have very

169
00:07:49,840 --> 00:07:52,560
subtle semantic for example in these

170
00:07:52,560 --> 00:07:55,199
four applications

171
00:07:55,199 --> 00:07:58,560
they call two apis ssa get verified

172
00:07:58,560 --> 00:08:01,440
result and ssa get peer certificate

173
00:08:01,440 --> 00:08:04,639
so but the bug is come from the missing

174
00:08:04,639 --> 00:08:07,199
return value check in the hex check so

175
00:08:07,199 --> 00:08:09,599
by simply just checking the absence of

176
00:08:09,599 --> 00:08:14,000
the api calls you cannot find this bug

177
00:08:14,479 --> 00:08:16,720
and handling large and complex software

178
00:08:16,720 --> 00:08:18,160
is difficult

179
00:08:18,160 --> 00:08:21,759
for example in these uh examples the

180
00:08:21,759 --> 00:08:25,360
software are more than 100 000 lines of

181
00:08:25,360 --> 00:08:28,240
code if you want to find the api visual

182
00:08:28,240 --> 00:08:31,120
bug in linux kernel you need to handle

183
00:08:31,120 --> 00:08:35,120
more than millions of lines of code

184
00:08:36,958 --> 00:08:39,440
and the code is not simple as it is

185
00:08:39,440 --> 00:08:41,919
shown actually the core code was

186
00:08:41,919 --> 00:08:44,800
simplified version in real code between

187
00:08:44,800 --> 00:08:47,839
the ssl get verified result and ssh kept

188
00:08:47,839 --> 00:08:49,440
appear certificate

189
00:08:49,440 --> 00:08:52,720
it contains many other api uses which

190
00:08:52,720 --> 00:08:56,240
make analysis harder

191
00:08:57,200 --> 00:09:00,720
here is an overview of api sanitizer

192
00:09:00,720 --> 00:09:02,800
from source code we run

193
00:09:02,800 --> 00:09:05,440
relax symbolic execution and generate a

194
00:09:05,440 --> 00:09:08,000
symbolic execution database symbolic

195
00:09:08,000 --> 00:09:10,560
execution database contains three items

196
00:09:10,560 --> 00:09:14,560
api calls arguments and constraints

197
00:09:14,560 --> 00:09:16,959
from this symbolic execution database we

198
00:09:16,959 --> 00:09:19,519
run four checkers return value checker

199
00:09:19,519 --> 00:09:22,320
argument checker causality checker and

200
00:09:22,320 --> 00:09:24,160
condition chapter

201
00:09:24,160 --> 00:09:27,440
this checker generates minority uses

202
00:09:27,440 --> 00:09:30,240
since minority is not always back we

203
00:09:30,240 --> 00:09:32,399
rank them to mitigate the false

204
00:09:32,399 --> 00:09:35,120
positives

205
00:09:35,760 --> 00:09:38,160
first i want to explain this relax

206
00:09:38,160 --> 00:09:39,839
symbolic execution and symbolic

207
00:09:39,839 --> 00:09:42,880
execution database

208
00:09:43,920 --> 00:09:45,920
as you know symbolic execution is not

209
00:09:45,920 --> 00:09:48,640
scalable because of the pathexplosion

210
00:09:48,640 --> 00:09:52,480
problem and smt is expensive because it

211
00:09:52,480 --> 00:09:56,560
is naturally the mp complete problem

212
00:09:56,640 --> 00:09:59,600
but to find the api context we can relax

213
00:09:59,600 --> 00:10:02,480
symbolic execution by limiting inter

214
00:10:02,480 --> 00:10:03,839
procedural

215
00:10:03,839 --> 00:10:08,240
and removing back gas and range-based

216
00:10:09,200 --> 00:10:13,040
api sanitizer is focusing on finding how

217
00:10:13,040 --> 00:10:16,959
to use apis not how they are implemented

218
00:10:16,959 --> 00:10:19,120
therefore we don't need to go into the

219
00:10:19,120 --> 00:10:21,360
api's implementation

220
00:10:21,360 --> 00:10:23,760
instead of it we can see how they are

221
00:10:23,760 --> 00:10:25,279
used

222
00:10:25,279 --> 00:10:28,079
so we can limit our analysis in intra

223
00:10:28,079 --> 00:10:31,800
procedural level

224
00:10:32,079 --> 00:10:34,399
api contacts can be captured within

225
00:10:34,399 --> 00:10:37,040
loops for example melody and free needs

226
00:10:37,040 --> 00:10:39,920
to be paired but this property should be

227
00:10:39,920 --> 00:10:43,440
preserved regardless of loops

228
00:10:43,440 --> 00:10:48,240
so we can remove backups to ignore loops

229
00:10:48,959 --> 00:10:51,680
and since most of arguments and return

230
00:10:51,680 --> 00:10:54,480
values are integer we can express most

231
00:10:54,480 --> 00:10:58,079
of api usage in range base

232
00:10:58,079 --> 00:11:00,320
here is a

233
00:11:00,320 --> 00:11:02,880
symbolic constraint that the search is

234
00:11:02,880 --> 00:11:05,279
not null and error is okay

235
00:11:05,279 --> 00:11:08,399
we can encode it as a range for example

236
00:11:08,399 --> 00:11:11,600
search equal minus maximum

237
00:11:11,600 --> 00:11:15,360
to -1 and from 1 to maximum

238
00:11:15,360 --> 00:11:18,160
similarly error can be encoded as a from

239
00:11:18,160 --> 00:11:20,800
ok to okay

240
00:11:20,800 --> 00:11:23,519
clan also uses this range-based

241
00:11:23,519 --> 00:11:28,360
symbolic execution in their compile time

242
00:11:28,399 --> 00:11:30,959
by relaxing symbolic execution we can

243
00:11:30,959 --> 00:11:32,880
handle large code base

244
00:11:32,880 --> 00:11:35,200
our symbolic execution is path sensitive

245
00:11:35,200 --> 00:11:37,360
and contact sensitive

246
00:11:37,360 --> 00:11:38,079
we

247
00:11:38,079 --> 00:11:40,079
while doing the symbolic execution we

248
00:11:40,079 --> 00:11:43,440
record symbolic abstractions api calls

249
00:11:43,440 --> 00:11:45,680
symbolic expression of arguments and

250
00:11:45,680 --> 00:11:48,319
constraints

251
00:11:49,040 --> 00:11:51,920
here is a sample code how we build a

252
00:11:51,920 --> 00:11:54,240
purpose symbolic abstraction from source

253
00:11:54,240 --> 00:11:56,240
code

254
00:11:56,240 --> 00:11:57,440
first

255
00:11:57,440 --> 00:12:00,240
in the source code first it calls ssa

256
00:12:00,240 --> 00:12:02,480
get peer certificate

257
00:12:02,480 --> 00:12:04,959
this call is recorded in symbolic

258
00:12:04,959 --> 00:12:06,880
abstraction

259
00:12:06,880 --> 00:12:08,720
and it check whether it is not normal or

260
00:12:08,720 --> 00:12:11,920
not if we follow the false path

261
00:12:11,920 --> 00:12:14,560
the constraint ssa get peer certificate

262
00:12:14,560 --> 00:12:17,600
is nominal is recorded in a

263
00:12:17,600 --> 00:12:20,240
symbolic abstraction

264
00:12:20,240 --> 00:12:23,519
and it calls ssa get verified result

265
00:12:23,519 --> 00:12:25,440
this call is also recorded in the

266
00:12:25,440 --> 00:12:27,360
symbolic abstractions

267
00:12:27,360 --> 00:12:29,680
and check whether it is okay or not if

268
00:12:29,680 --> 00:12:32,800
we follow the true path then ssa get

269
00:12:32,800 --> 00:12:36,079
verified result is okay is recorded in a

270
00:12:36,079 --> 00:12:39,638
symbolic abstractions

271
00:12:39,839 --> 00:12:42,480
we generate such abstractions path by

272
00:12:42,480 --> 00:12:44,800
path

273
00:12:44,880 --> 00:12:46,720
first path we generate the symbolic

274
00:12:46,720 --> 00:12:48,800
abstraction number one

275
00:12:48,800 --> 00:12:50,639
and another path we generate the

276
00:12:50,639 --> 00:12:53,360
symbolic abstraction number two

277
00:12:53,360 --> 00:12:55,200
another path we generate a symbolic

278
00:12:55,200 --> 00:12:57,519
exchange number three by repeating this

279
00:12:57,519 --> 00:13:00,079
procedure we can get multiple symbolic

280
00:13:00,079 --> 00:13:03,920
abstraction by paths

281
00:13:04,800 --> 00:13:07,040
after gathering the symbolic abstraction

282
00:13:07,040 --> 00:13:09,760
we want to check them by using these

283
00:13:09,760 --> 00:13:12,560
four checkers

284
00:13:13,600 --> 00:13:14,880
there are

285
00:13:14,880 --> 00:13:17,120
orthogonal and secure essential and

286
00:13:17,120 --> 00:13:19,760
security related context which are the

287
00:13:19,760 --> 00:13:22,800
return value and the arguments causality

288
00:13:22,800 --> 00:13:25,439
and condition

289
00:13:26,720 --> 00:13:29,839
first context is return value

290
00:13:29,839 --> 00:13:32,480
return value is for the returning

291
00:13:32,480 --> 00:13:36,320
computation result or execution status

292
00:13:36,320 --> 00:13:38,720
for example if we call mella but if we

293
00:13:38,720 --> 00:13:41,040
miss to check the return value of mellow

294
00:13:41,040 --> 00:13:44,000
then the node reference can be happened

295
00:13:44,000 --> 00:13:46,800
and in some cases privileged escalation

296
00:13:46,800 --> 00:13:50,639
can be happen like in windows

297
00:13:51,440 --> 00:13:54,079
and arguments is for

298
00:13:54,079 --> 00:13:56,160
inputs for calling apis and their

299
00:13:56,160 --> 00:13:57,440
relationship

300
00:13:57,440 --> 00:14:01,120
for example printf like function

301
00:14:01,120 --> 00:14:03,839
the argument should be constant string

302
00:14:03,839 --> 00:14:06,079
otherwise it can cause form a string

303
00:14:06,079 --> 00:14:07,519
belt

304
00:14:07,519 --> 00:14:11,040
and if you call malaga and main copy and

305
00:14:11,040 --> 00:14:13,360
these sizes should be well related

306
00:14:13,360 --> 00:14:15,120
otherwise memory corruption can be

307
00:14:15,120 --> 00:14:17,440
happen

308
00:14:19,120 --> 00:14:20,880
and the causality means the causal

309
00:14:20,880 --> 00:14:24,320
relationship between apis for example

310
00:14:24,320 --> 00:14:27,279
if you call lock but missing a lot then

311
00:14:27,279 --> 00:14:29,920
it can cause deadlock if you call mellow

312
00:14:29,920 --> 00:14:33,519
but missing free then it can cause

313
00:14:33,519 --> 00:14:36,959
memory leak vulnerability

314
00:14:38,160 --> 00:14:40,800
and condition means implicit pre-post

315
00:14:40,800 --> 00:14:43,760
condition for calling apis actually the

316
00:14:43,760 --> 00:14:46,000
accessor gets verified result and ssa

317
00:14:46,000 --> 00:14:47,920
get peer certificate is one of the

318
00:14:47,920 --> 00:14:49,120
example

319
00:14:49,120 --> 00:14:52,240
if we incorrectly use this api then

320
00:14:52,240 --> 00:14:56,079
it can cause men in the middle attack

321
00:14:56,880 --> 00:14:59,120
as i said before symbolic abstraction

322
00:14:59,120 --> 00:15:02,399
contains three items apis arguments and

323
00:15:02,399 --> 00:15:03,839
the constraints

324
00:15:03,839 --> 00:15:05,920
we can extract the context from these

325
00:15:05,920 --> 00:15:08,480
symbolic abstractions for example return

326
00:15:08,480 --> 00:15:10,959
value from the constraints argument from

327
00:15:10,959 --> 00:15:13,760
arguments causality from api calls

328
00:15:13,760 --> 00:15:16,639
condition from constraints and their api

329
00:15:16,639 --> 00:15:18,000
calls

330
00:15:18,000 --> 00:15:19,920
due to time limit i cannot explain them

331
00:15:19,920 --> 00:15:22,800
all i want to show how condition context

332
00:15:22,800 --> 00:15:24,639
can be extracted from

333
00:15:24,639 --> 00:15:28,160
the symbolic abstractions

334
00:15:29,600 --> 00:15:33,040
here is a symbolic abstraction of call

335
00:15:33,040 --> 00:15:36,240
we collect all constraints by events

336
00:15:36,240 --> 00:15:40,880
event can be any constraint or any call

337
00:15:40,880 --> 00:15:43,839
in here we pick event ssa get verified

338
00:15:43,839 --> 00:15:46,000
result is okay

339
00:15:46,000 --> 00:15:49,440
and there is a constraint which is ssl

340
00:15:49,440 --> 00:15:54,399
get peer certificate is not known

341
00:15:54,399 --> 00:15:57,040
and in engineering it also have the same

342
00:15:57,040 --> 00:16:00,320
event ssa get verified result is okay

343
00:16:00,320 --> 00:16:02,880
and the same constraint ssa get peer

344
00:16:02,880 --> 00:16:06,320
certificate is not known

345
00:16:06,959 --> 00:16:09,920
and similarly in map it also has the

346
00:16:09,920 --> 00:16:14,240
same event and the same constraint

347
00:16:14,880 --> 00:16:17,759
but in hack chat it contains the same

348
00:16:17,759 --> 00:16:20,800
event ssa gap verify result is okay but

349
00:16:20,800 --> 00:16:23,279
there is no constraint so it is not

350
00:16:23,279 --> 00:16:27,040
added in a constraint rule

351
00:16:27,600 --> 00:16:29,759
by repeating this procedure we can

352
00:16:29,759 --> 00:16:34,240
collect all constraints along with event

353
00:16:34,240 --> 00:16:36,880
from this table we can find what is

354
00:16:36,880 --> 00:16:39,279
majority uses

355
00:16:39,279 --> 00:16:41,440
and from majority uses we can find

356
00:16:41,440 --> 00:16:44,639
minority uses minor to uses is simply

357
00:16:44,639 --> 00:16:47,680
the total event minus majority use which

358
00:16:47,680 --> 00:16:51,638
contains a hex check

359
00:16:52,320 --> 00:16:54,720
after getting this minor to use

360
00:16:54,720 --> 00:16:56,880
we should rank them to reduce the effect

361
00:16:56,880 --> 00:17:00,639
of false positives

362
00:17:00,639 --> 00:17:03,199
false positives can be happened in

363
00:17:03,199 --> 00:17:05,919
majority analysis for example it is due

364
00:17:05,919 --> 00:17:07,520
to our lack of

365
00:17:07,520 --> 00:17:10,079
inter procedural analysis in most of

366
00:17:10,079 --> 00:17:13,280
cases it works well but in some cases

367
00:17:13,280 --> 00:17:15,520
for example it called mellow and passed

368
00:17:15,520 --> 00:17:18,000
the return value of the other function

369
00:17:18,000 --> 00:17:20,000
and inside the function it can check

370
00:17:20,000 --> 00:17:23,359
return value it is possible

371
00:17:23,359 --> 00:17:25,439
and the correlation is not always

372
00:17:25,439 --> 00:17:26,559
causation

373
00:17:26,559 --> 00:17:29,280
for example fprintf can be repeatedly

374
00:17:29,280 --> 00:17:30,640
used when

375
00:17:30,640 --> 00:17:34,640
open is fail to print the debug message

376
00:17:34,640 --> 00:17:38,240
but app printf and open has no causal

377
00:17:38,240 --> 00:17:40,480
relationship

378
00:17:40,480 --> 00:17:43,600
and there can be some correct minor uses

379
00:17:43,600 --> 00:17:45,039
for example

380
00:17:45,039 --> 00:17:47,360
in most of cases people call string

381
00:17:47,360 --> 00:17:49,440
compare and check whether

382
00:17:49,440 --> 00:17:52,160
its return value is zero to check the

383
00:17:52,160 --> 00:17:55,360
equality but in some cases the return

384
00:17:55,360 --> 00:17:59,280
value uh the greater than general can be

385
00:17:59,280 --> 00:18:03,440
checked to check the ordering

386
00:18:05,600 --> 00:18:09,039
so to mitigate the false positive we use

387
00:18:09,039 --> 00:18:12,480
three standards first standard is that

388
00:18:12,480 --> 00:18:15,039
more majority pattern repeat then it is

389
00:18:15,039 --> 00:18:17,760
more bug likely for example if there is

390
00:18:17,760 --> 00:18:20,000
a 999

391
00:18:20,000 --> 00:18:22,880
majority and one minority it is much

392
00:18:22,880 --> 00:18:26,080
more bug likely than the 10 majority and

393
00:18:26,080 --> 00:18:28,960
one minority this is because that it

394
00:18:28,960 --> 00:18:32,160
means we have the stronger belief of the

395
00:18:32,160 --> 00:18:34,240
crack to use

396
00:18:34,240 --> 00:18:36,240
and we can use some general information

397
00:18:36,240 --> 00:18:39,200
for example most of allocation function

398
00:18:39,200 --> 00:18:41,600
have the along in their function name

399
00:18:41,600 --> 00:18:42,480
and

400
00:18:42,480 --> 00:18:46,160
it requires to check their return value

401
00:18:46,160 --> 00:18:47,840
we can use some domain specific

402
00:18:47,840 --> 00:18:50,799
knowledge for example ssl apis start

403
00:18:50,799 --> 00:18:53,360
with a string ssl we can use such

404
00:18:53,360 --> 00:18:56,960
information for lanking

405
00:18:56,960 --> 00:18:59,120
even though i explained the aps sanitary

406
00:18:59,120 --> 00:19:02,400
informally our approach is formalized as

407
00:19:02,400 --> 00:19:05,360
a general framework so i don't want to

408
00:19:05,360 --> 00:19:07,919
explain it in detail if you want if you

409
00:19:07,919 --> 00:19:10,160
are interesting you can find it in our

410
00:19:10,160 --> 00:19:12,559
paper

411
00:19:14,480 --> 00:19:18,160
api sanitizer is written in 9000 lines

412
00:19:18,160 --> 00:19:19,840
of code in total

413
00:19:19,840 --> 00:19:22,080
symbolic context generation is based on

414
00:19:22,080 --> 00:19:24,080
clan 3.6

415
00:19:24,080 --> 00:19:26,240
compared with this framework checkers

416
00:19:26,240 --> 00:19:28,640
are really simple

417
00:19:28,640 --> 00:19:31,440
in total it requires 1000 lines of code

418
00:19:31,440 --> 00:19:34,160
of python for example in return value

419
00:19:34,160 --> 00:19:36,720
checker to implement it you need less

420
00:19:36,720 --> 00:19:40,480
than the 200 lines of code

421
00:19:41,679 --> 00:19:44,240
through evaluation i want to answer

422
00:19:44,240 --> 00:19:47,200
three questions how effective is aps

423
00:19:47,200 --> 00:19:49,840
sanitizer in finding new buffs

424
00:19:49,840 --> 00:19:52,160
and how easy to use and how easy to

425
00:19:52,160 --> 00:19:53,919
extend

426
00:19:53,919 --> 00:19:56,480
and how effective is api sanitizer's

427
00:19:56,480 --> 00:19:59,200
ranking system

428
00:20:00,080 --> 00:20:02,480
api sanitizer is effective in finding

429
00:20:02,480 --> 00:20:03,840
new bugs

430
00:20:03,840 --> 00:20:06,559
we have found the 76 new bugs in large

431
00:20:06,559 --> 00:20:08,960
complex software including linux kernel

432
00:20:08,960 --> 00:20:09,679
and

433
00:20:09,679 --> 00:20:12,000
openssl

434
00:20:12,000 --> 00:20:14,480
and these bug some bugs have the

435
00:20:14,480 --> 00:20:17,440
security implications for example the

436
00:20:17,440 --> 00:20:20,320
there is a cbe python chip imported heap

437
00:20:20,320 --> 00:20:22,559
overflow which

438
00:20:22,559 --> 00:20:24,960
we can get a code execution in google

439
00:20:24,960 --> 00:20:27,520
app engine

440
00:20:28,240 --> 00:20:31,360
an api sanitizer is easy to use without

441
00:20:31,360 --> 00:20:33,679
any manual annotation

442
00:20:33,679 --> 00:20:36,080
to generate symbolic context database

443
00:20:36,080 --> 00:20:39,840
you can use your existing build command

444
00:20:39,840 --> 00:20:41,760
and you can run checker

445
00:20:41,760 --> 00:20:44,559
uh interrupt application and inter

446
00:20:44,559 --> 00:20:47,559
application

447
00:20:49,840 --> 00:20:52,400
and api sanitizers concept is really

448
00:20:52,400 --> 00:20:54,880
easy to extend for example if you want

449
00:20:54,880 --> 00:20:57,200
to check the integer overflow into the

450
00:20:57,200 --> 00:21:00,240
overflow then first you need to do is

451
00:21:00,240 --> 00:21:02,880
that finding what is the

452
00:21:02,880 --> 00:21:06,080
integer overflow sensitive function

453
00:21:06,080 --> 00:21:09,039
integer overflow sensitive api means

454
00:21:09,039 --> 00:21:11,679
uh apis which have the security

455
00:21:11,679 --> 00:21:13,760
implications when intuitive overflow

456
00:21:13,760 --> 00:21:14,799
happens

457
00:21:14,799 --> 00:21:18,640
for example memory or location functions

458
00:21:18,640 --> 00:21:20,799
integer overflow can be extracted from

459
00:21:20,799 --> 00:21:22,880
arguments and constraints

460
00:21:22,880 --> 00:21:24,799
if arguments contains

461
00:21:24,799 --> 00:21:27,840
binary operators and we can do the uh

462
00:21:27,840 --> 00:21:29,679
and check whether integer overflow

463
00:21:29,679 --> 00:21:30,640
happen

464
00:21:30,640 --> 00:21:34,159
within given constraints

465
00:21:34,240 --> 00:21:36,720
and collect all integer overflows and

466
00:21:36,720 --> 00:21:40,000
rank them ranking strategy is as follows

467
00:21:40,000 --> 00:21:41,120
first

468
00:21:41,120 --> 00:21:43,760
more integer overflows predict prevented

469
00:21:43,760 --> 00:21:46,159
by constraints then we can know these

470
00:21:46,159 --> 00:21:48,960
apis are more likely into the overflow

471
00:21:48,960 --> 00:21:50,240
sensitivity

472
00:21:50,240 --> 00:21:53,360
and we gave the higher length to the

473
00:21:53,360 --> 00:21:55,520
integer incorrect

474
00:21:55,520 --> 00:21:57,840
constraints than the missing constraints

475
00:21:57,840 --> 00:21:59,919
because missing constraints can be

476
00:21:59,919 --> 00:22:03,039
caused by our limited analysis

477
00:22:03,039 --> 00:22:05,919
we have found six integer overflow

478
00:22:05,919 --> 00:22:08,799
less than up by using less than

479
00:22:08,799 --> 00:22:13,080
200 lines of code

480
00:22:14,000 --> 00:22:16,320
api sanitizer's ranking system is

481
00:22:16,320 --> 00:22:17,600
effective

482
00:22:17,600 --> 00:22:20,000
this is the result of the linux kernel

483
00:22:20,000 --> 00:22:22,159
with the return value checker

484
00:22:22,159 --> 00:22:24,400
it generates 3 000

485
00:22:24,400 --> 00:22:27,440
reports and we have added a 400 reports

486
00:22:27,440 --> 00:22:31,520
and found 54 bucks

487
00:22:32,480 --> 00:22:35,600
in the graph the x-axis is report sorted

488
00:22:35,600 --> 00:22:38,400
by the ranking the left size is higher

489
00:22:38,400 --> 00:22:41,440
length one and right side is row ranked

490
00:22:41,440 --> 00:22:42,880
one

491
00:22:42,880 --> 00:22:45,120
and the y-axis is cumulative through

492
00:22:45,120 --> 00:22:48,000
positive box

493
00:22:48,159 --> 00:22:50,880
in the higher rank one we can find 30

494
00:22:50,880 --> 00:22:53,440
bucks in 20 apis

495
00:22:53,440 --> 00:22:56,720
and in the low length one we found 24

496
00:22:56,720 --> 00:23:00,159
bucks in three apis

497
00:23:00,159 --> 00:23:02,880
but there is a special apis which have

498
00:23:02,880 --> 00:23:03,600
the

499
00:23:03,600 --> 00:23:06,640
15 bucks in one api except for this

500
00:23:06,640 --> 00:23:09,520
special api most of the bug can be found

501
00:23:09,520 --> 00:23:12,879
in a higher length one

502
00:23:14,320 --> 00:23:17,440
api sanitizer is not perfect it has many

503
00:23:17,440 --> 00:23:20,640
limitations first this approach is not

504
00:23:20,640 --> 00:23:24,159
sound and not complete

505
00:23:24,159 --> 00:23:27,919
and it has a high false possibility rate

506
00:23:27,919 --> 00:23:30,559
more than eighty percent

507
00:23:30,559 --> 00:23:34,640
and it is hard to uh frequently analyze

508
00:23:34,640 --> 00:23:37,120
for linux kernel to analyze it it

509
00:23:37,120 --> 00:23:40,320
requires more than 12 hours

510
00:23:40,320 --> 00:23:43,120
and we cannot fully resolve the uh

511
00:23:43,120 --> 00:23:46,000
path explosion so our analysis can be

512
00:23:46,000 --> 00:23:48,799
stopped in functions which have the

513
00:23:48,799 --> 00:23:51,840
path explosion

514
00:23:52,640 --> 00:23:54,880
i want to conclude

515
00:23:54,880 --> 00:23:57,840
this talk api sanitizer is an automatic

516
00:23:57,840 --> 00:24:00,559
way to find api misuse

517
00:24:00,559 --> 00:24:03,600
it is effective we have found the 76 new

518
00:24:03,600 --> 00:24:06,960
box and it is scalable we have tested it

519
00:24:06,960 --> 00:24:10,559
in a linux kernel and debian packages

520
00:24:10,559 --> 00:24:13,120
api sanitizer will be released as an

521
00:24:13,120 --> 00:24:15,200
open source so please check our lab

522
00:24:15,200 --> 00:24:17,710
getter thank you

523
00:24:17,710 --> 00:24:27,359
[Applause]

524
00:24:27,520 --> 00:24:30,799
hi william lecoulter uh apl i was just

525
00:24:30,799 --> 00:24:33,200
interested in whether you could use uh

526
00:24:33,200 --> 00:24:35,760
api san the other way to identify poorly

527
00:24:35,760 --> 00:24:38,400
designed apis like things that maybe

528
00:24:38,400 --> 00:24:39,279
have

529
00:24:39,279 --> 00:24:43,760
uh poor consensus on usage or

530
00:24:43,760 --> 00:24:46,159
you know not compact ranges or other

531
00:24:46,159 --> 00:24:47,200
things

532
00:24:47,200 --> 00:24:49,760
sorry could you repeat this uh could api

533
00:24:49,760 --> 00:24:52,559
sand be used to identify problematic or

534
00:24:52,559 --> 00:24:55,120
poorly designed apis so

535
00:24:55,120 --> 00:24:56,880
like clearly what the example you showed

536
00:24:56,880 --> 00:24:58,159
in the open

537
00:24:58,159 --> 00:25:00,320
ssl library with having to do that

538
00:25:00,320 --> 00:25:02,480
two-stage comparison is

539
00:25:02,480 --> 00:25:05,200
is not an optimum approach uh for

540
00:25:05,200 --> 00:25:06,720
somebody and somebody's more likely to

541
00:25:06,720 --> 00:25:10,000
make mistakes so could you use api san

542
00:25:10,000 --> 00:25:10,880
to

543
00:25:10,880 --> 00:25:15,200
uh help api developers write better apis

544
00:25:15,200 --> 00:25:16,960
oh

545
00:25:16,960 --> 00:25:18,960
so you mean that

546
00:25:18,960 --> 00:25:21,520
how so apply the api sanitation when

547
00:25:21,520 --> 00:25:24,000
generating api so like a api

548
00:25:24,000 --> 00:25:27,200
specification right yeah

549
00:25:27,200 --> 00:25:29,200
yeah using or using just just using

550
00:25:29,200 --> 00:25:32,400
feedback to identify problematic apis

551
00:25:32,400 --> 00:25:35,279
yeah uh

552
00:25:37,200 --> 00:25:39,039
yeah it can be

553
00:25:39,039 --> 00:25:41,840
yeah so i think api sanitizer can be

554
00:25:41,840 --> 00:25:44,159
used as that form so

555
00:25:44,159 --> 00:25:49,039
when so actually the most of the api uh

556
00:25:49,039 --> 00:25:51,360
vulnerability as you can see in the open

557
00:25:51,360 --> 00:25:53,840
accessor library it is due to the

558
00:25:53,840 --> 00:25:54,799
uh

559
00:25:54,799 --> 00:25:57,760
their design is actually not well

560
00:25:57,760 --> 00:26:00,720
defined so you know it is very subtle to

561
00:26:00,720 --> 00:26:03,440
use i don't know why they divide that

562
00:26:03,440 --> 00:26:05,039
like a api

563
00:26:05,039 --> 00:26:07,120
so i think it can be the

564
00:26:07,120 --> 00:26:08,159
uh

565
00:26:08,159 --> 00:26:11,279
used to uh to notify the how to design

566
00:26:11,279 --> 00:26:14,799
the apis for uh by the aps and toucher i

567
00:26:14,799 --> 00:26:17,679
think okay thanks

568
00:26:19,360 --> 00:26:21,919
hi uh sumanjana from colombia

569
00:26:21,919 --> 00:26:23,919
so i have a question about your use of

570
00:26:23,919 --> 00:26:25,840
clang so the way you defined you know

571
00:26:25,840 --> 00:26:28,080
the relaxed uh symbolic execution that

572
00:26:28,080 --> 00:26:30,480
you did so the choices you talked about

573
00:26:30,480 --> 00:26:32,400
sam schlang is actually already making

574
00:26:32,400 --> 00:26:33,600
those choices so did you make

575
00:26:33,600 --> 00:26:35,360
modifications to clients framework or

576
00:26:35,360 --> 00:26:39,279
you did use it as is uh

577
00:26:39,279 --> 00:26:41,679
like the range based constraints uh lack

578
00:26:41,679 --> 00:26:43,120
of i mean rather limited

579
00:26:43,120 --> 00:26:45,520
inter-procedural uh analysis all those

580
00:26:45,520 --> 00:26:46,799
con

581
00:26:46,799 --> 00:26:48,480
all those choices have been made by

582
00:26:48,480 --> 00:26:50,000
clang right so

583
00:26:50,000 --> 00:26:51,840
have you modified clang or are you using

584
00:26:51,840 --> 00:26:54,720
clan actually we sell the many box

585
00:26:54,720 --> 00:26:58,559
of the api misuse api mr we analyze the

586
00:26:58,559 --> 00:27:01,440
api misuse bug and most of bugs can be

587
00:27:01,440 --> 00:27:04,480
found in a relaxed form so it is we

588
00:27:04,480 --> 00:27:07,279
choose to use them so

589
00:27:07,279 --> 00:27:08,320
and we

590
00:27:08,320 --> 00:27:12,159
compared the our system with the uc clip

591
00:27:12,159 --> 00:27:14,960
uh the under constrained uh

592
00:27:14,960 --> 00:27:17,600
the symbolic execution presented in the

593
00:27:17,600 --> 00:27:18,840
last year

594
00:27:18,840 --> 00:27:21,919
actually the under constraint symbolic

595
00:27:21,919 --> 00:27:24,960
execution takes the the different uh

596
00:27:24,960 --> 00:27:26,399
direction

597
00:27:26,399 --> 00:27:29,440
uh against the uh symbolic aps sanitizer

598
00:27:29,440 --> 00:27:32,559
they do that like a in they also do the

599
00:27:32,559 --> 00:27:35,919
inter procedure analysis and like they

600
00:27:35,919 --> 00:27:38,240
also do the loop analysis and those

601
00:27:38,240 --> 00:27:40,880
kinds of things but we run the

602
00:27:40,880 --> 00:27:44,960
uh same same we run the two tools to the

603
00:27:44,960 --> 00:27:48,399
same code and we have found some bugs

604
00:27:48,399 --> 00:27:52,719
and i think it is not like a

605
00:27:53,120 --> 00:27:54,880
uh

606
00:27:54,880 --> 00:27:57,279
i i don't think it is the perfect way to

607
00:27:57,279 --> 00:27:59,919
handle the uh symbolic uh the path

608
00:27:59,919 --> 00:28:03,120
explosion actually but it is it is

609
00:28:03,120 --> 00:28:06,080
working for just this uh context when

610
00:28:06,080 --> 00:28:08,799
you find the api context so

611
00:28:08,799 --> 00:28:11,279
because of the that characteristic that

612
00:28:11,279 --> 00:28:14,000
have the api context so yeah

613
00:28:14,000 --> 00:28:17,000
thanks

614
00:28:17,279 --> 00:28:20,240
hi uh jeremy epstein darpa um the paper

615
00:28:20,240 --> 00:28:22,640
can sort of be summed up by i think by

616
00:28:22,640 --> 00:28:24,559
the wisdom of the crowds when it comes

617
00:28:24,559 --> 00:28:26,720
to api usage

618
00:28:26,720 --> 00:28:28,640
most people get it right did you run

619
00:28:28,640 --> 00:28:30,480
across any examples where most people

620
00:28:30,480 --> 00:28:33,520
get it wrong where most of the software

621
00:28:33,520 --> 00:28:36,480
you use when you actually dig into it

622
00:28:36,480 --> 00:28:38,720
people everyone is just doing it wrong

623
00:28:38,720 --> 00:28:40,960
and so you're you're you're giving

624
00:28:40,960 --> 00:28:44,000
credit to the mistakes and blaming the

625
00:28:44,000 --> 00:28:45,520
people who use it right

626
00:28:45,520 --> 00:28:48,240
actually the most bug that we have found

627
00:28:48,240 --> 00:28:50,399
was a actually the

628
00:28:50,399 --> 00:28:52,640
incorrect error handling the return

629
00:28:52,640 --> 00:28:54,159
value check so

630
00:28:54,159 --> 00:28:56,880
for example the people

631
00:28:56,880 --> 00:28:59,600
there is a one api the

632
00:28:59,600 --> 00:29:01,039
dairy uh

633
00:29:01,039 --> 00:29:02,880
contains a stream

634
00:29:02,880 --> 00:29:04,960
a log or something like that and people

635
00:29:04,960 --> 00:29:08,159
thought it is like a it can it should be

636
00:29:08,159 --> 00:29:10,559
used as a malloc so it check whether it

637
00:29:10,559 --> 00:29:13,440
is no or not but it is not it returns a

638
00:29:13,440 --> 00:29:15,039
return code

639
00:29:15,039 --> 00:29:17,360
it it returns negative return code so

640
00:29:17,360 --> 00:29:19,360
you should check the negative return

641
00:29:19,360 --> 00:29:22,640
code so i think the most cases are the

642
00:29:22,640 --> 00:29:24,880
return value check as the previous

643
00:29:24,880 --> 00:29:27,360
presentation set the

644
00:29:27,360 --> 00:29:29,600
correctly handling error like a

645
00:29:29,600 --> 00:29:32,000
correctly handling error is not that

646
00:29:32,000 --> 00:29:34,960
easy so i think that is thank you thank

647
00:29:34,960 --> 00:29:37,960
you

648
00:29:42,720 --> 00:29:46,520
let's thank the speaker again

