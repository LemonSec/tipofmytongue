1
00:00:10,240 --> 00:00:11,920
okay hi

2
00:00:11,920 --> 00:00:14,480
so i'm tom and i will be presenting our

3
00:00:14,480 --> 00:00:15,679
work on

4
00:00:15,679 --> 00:00:18,320
well named request and conquer exposing

5
00:00:18,320 --> 00:00:20,480
cross-origin resource size

6
00:00:20,480 --> 00:00:21,920
but before i

7
00:00:21,920 --> 00:00:24,880
dive into the details i will first show

8
00:00:24,880 --> 00:00:26,000
a

9
00:00:26,000 --> 00:00:28,640
very simple example of

10
00:00:28,640 --> 00:00:31,279
like a motivating example

11
00:00:31,279 --> 00:00:33,520
so on the

12
00:00:33,520 --> 00:00:34,800
left

13
00:00:34,800 --> 00:00:35,680
we have

14
00:00:35,680 --> 00:00:39,040
two users so mr bunzi and

15
00:00:39,040 --> 00:00:41,760
lazy lion and both of them are part of

16
00:00:41,760 --> 00:00:44,000
the twitter network

17
00:00:44,000 --> 00:00:46,399
so they're logged into twitter and of

18
00:00:46,399 --> 00:00:48,000
course they send

19
00:00:48,000 --> 00:00:51,199
requests to twitter so for instance if

20
00:00:51,199 --> 00:00:54,079
mr bonzi wants to get the list of people

21
00:00:54,079 --> 00:00:56,719
that are following him he can send a get

22
00:00:56,719 --> 00:00:58,640
request to twitter

23
00:00:58,640 --> 00:01:01,039
to the followers endpoint

24
00:01:01,039 --> 00:01:04,080
and he will include his cookies

25
00:01:04,080 --> 00:01:06,240
then twitter will associate these

26
00:01:06,240 --> 00:01:09,600
cookies with the profile of mr bunzi

27
00:01:09,600 --> 00:01:11,920
and will return the resource containing

28
00:01:11,920 --> 00:01:14,320
the followers of mr bunzi

29
00:01:14,320 --> 00:01:17,680
as mr bunzie is a pretty popular guy

30
00:01:17,680 --> 00:01:20,159
he has quite some followers so the

31
00:01:20,159 --> 00:01:25,520
resource size is around 172 kilobytes

32
00:01:25,520 --> 00:01:26,720
of course

33
00:01:26,720 --> 00:01:28,960
lazy lion can send exactly the same

34
00:01:28,960 --> 00:01:30,240
requests

35
00:01:30,240 --> 00:01:34,000
but with his own cookies

36
00:01:34,240 --> 00:01:37,040
and again there twitter will associate

37
00:01:37,040 --> 00:01:39,759
the cookies with the profile of the lazy

38
00:01:39,759 --> 00:01:43,439
lion and will return his followers so in

39
00:01:43,439 --> 00:01:47,759
this case around 44 kilobytes

40
00:01:47,759 --> 00:01:51,280
so that's a very simple example

41
00:01:51,280 --> 00:01:52,640
but of course

42
00:01:52,640 --> 00:01:54,799
there's also attackers that can send

43
00:01:54,799 --> 00:01:56,880
requests to twitter

44
00:01:56,880 --> 00:01:59,680
so the attacker in this case sen can

45
00:01:59,680 --> 00:02:02,799
send a get request to the profile of mr

46
00:02:02,799 --> 00:02:03,920
bunzie

47
00:02:03,920 --> 00:02:05,920
also getting his followers

48
00:02:05,920 --> 00:02:09,440
and as the profile of mr bonzi is public

49
00:02:09,440 --> 00:02:12,239
twitter will just reply with the

50
00:02:12,239 --> 00:02:15,599
followers of mr bunzi

51
00:02:15,599 --> 00:02:18,959
uh containing the exact same resource

52
00:02:18,959 --> 00:02:22,239
because well it's the same uh

53
00:02:22,239 --> 00:02:23,920
well the same followers that are

54
00:02:23,920 --> 00:02:25,360
included in this

55
00:02:25,360 --> 00:02:28,000
uh resource

56
00:02:28,000 --> 00:02:30,160
then the attacker can do the same for

57
00:02:30,160 --> 00:02:33,360
other users as well so for the lazy lion

58
00:02:33,360 --> 00:02:36,160
where he again gets the 44 kilobytes

59
00:02:36,160 --> 00:02:37,840
file back

60
00:02:37,840 --> 00:02:40,560
and basically can start enumerating

61
00:02:40,560 --> 00:02:43,519
uh all the users on twitter and getting

62
00:02:43,519 --> 00:02:46,480
the size of the resource

63
00:02:46,480 --> 00:02:50,160
so then the attacker compiles a list of

64
00:02:50,160 --> 00:02:52,319
or a table of

65
00:02:52,319 --> 00:02:56,080
usernames and associated resource sizes

66
00:02:56,080 --> 00:02:57,040
and then

67
00:02:57,040 --> 00:02:58,319
this is the

68
00:02:58,319 --> 00:03:00,480
first step of the attack and then in the

69
00:03:00,480 --> 00:03:01,760
second step

70
00:03:01,760 --> 00:03:02,480
is

71
00:03:02,480 --> 00:03:05,120
where the attacker first sets up some

72
00:03:05,120 --> 00:03:07,519
malicious javascript

73
00:03:07,519 --> 00:03:10,159
and injects it into a web page

74
00:03:10,159 --> 00:03:14,239
so this javascript could be injected

75
00:03:14,239 --> 00:03:16,400
through like an ad network

76
00:03:16,400 --> 00:03:18,879
or the attacker could actually own the

77
00:03:18,879 --> 00:03:21,360
malicious website at the website here

78
00:03:21,360 --> 00:03:24,239
that is the malicious

79
00:03:24,239 --> 00:03:27,760
so now when mr bonzi is

80
00:03:27,760 --> 00:03:30,640
browsing to the website

81
00:03:30,640 --> 00:03:32,480
this website has no idea

82
00:03:32,480 --> 00:03:35,280
that this is mr mr bunzie that's

83
00:03:35,280 --> 00:03:37,440
visiting the website so

84
00:03:37,440 --> 00:03:40,159
that website has no uh

85
00:03:40,159 --> 00:03:43,840
id that's this user here is mr bonzi on

86
00:03:43,840 --> 00:03:46,640
twitter so we can assume that

87
00:03:46,640 --> 00:03:47,840
for now

88
00:03:47,840 --> 00:03:51,200
mr bunzi is anonymous

89
00:03:51,200 --> 00:03:52,480
of course when

90
00:03:52,480 --> 00:03:55,439
mr bonzi is visiting the website the

91
00:03:55,439 --> 00:03:58,159
javascript will also be executed

92
00:03:58,159 --> 00:04:00,799
and this javascript can trigger requests

93
00:04:00,799 --> 00:04:01,920
to twitter

94
00:04:01,920 --> 00:04:05,519
so it will look exactly the same as

95
00:04:05,519 --> 00:04:08,959
in the first slide so the exact same get

96
00:04:08,959 --> 00:04:11,599
request with the cookies of mr bunzie

97
00:04:11,599 --> 00:04:14,319
will be sent to twitter and because

98
00:04:14,319 --> 00:04:16,560
twitter is unable to differentiate

99
00:04:16,560 --> 00:04:19,120
between this request and the previous

100
00:04:19,120 --> 00:04:19,918
one

101
00:04:19,918 --> 00:04:22,320
it will send exactly the same resource

102
00:04:22,320 --> 00:04:24,240
again

103
00:04:24,240 --> 00:04:26,880
then the attacker

104
00:04:26,880 --> 00:04:31,680
can try to find out the resource size so

105
00:04:31,680 --> 00:04:34,960
exposing the cross-origin resource size

106
00:04:34,960 --> 00:04:36,960
and then if he knows it you can

107
00:04:36,960 --> 00:04:39,600
associate the resource size with an

108
00:04:39,600 --> 00:04:43,440
entry he found in his table and then

109
00:04:43,440 --> 00:04:48,160
reveal the identity of mr bunzi

110
00:04:48,160 --> 00:04:50,160
of course

111
00:04:50,160 --> 00:04:53,199
i it's important to note here that this

112
00:04:53,199 --> 00:04:57,440
can just be done by default because

113
00:04:57,440 --> 00:04:59,600
well we have the same origin policy

114
00:04:59,600 --> 00:05:01,759
which prevents the attacker from

115
00:05:01,759 --> 00:05:03,120
learning

116
00:05:03,120 --> 00:05:04,479
anything about

117
00:05:04,479 --> 00:05:08,080
resources that are not within his origin

118
00:05:08,080 --> 00:05:09,919
so you should not be able to access the

119
00:05:09,919 --> 00:05:12,080
contents of this

120
00:05:12,080 --> 00:05:13,680
resource

121
00:05:13,680 --> 00:05:16,639
neither should he be able to access

122
00:05:16,639 --> 00:05:19,520
the size of this resource

123
00:05:19,520 --> 00:05:23,520
however you can use certain attacks

124
00:05:23,520 --> 00:05:26,639
size exposing techniques

125
00:05:26,639 --> 00:05:30,479
to still discover this resource size

126
00:05:30,479 --> 00:05:32,320
so in our study

127
00:05:32,320 --> 00:05:34,720
we set out to find techniques that can

128
00:05:34,720 --> 00:05:35,840
do this

129
00:05:35,840 --> 00:05:36,880
so we

130
00:05:36,880 --> 00:05:38,400
analyzed

131
00:05:38,400 --> 00:05:40,720
all the

132
00:05:40,720 --> 00:05:42,400
operations that are performed on

133
00:05:42,400 --> 00:05:44,880
resources so first a resource is

134
00:05:44,880 --> 00:05:47,520
generated as at the web server then it

135
00:05:47,520 --> 00:05:50,240
will be sent by the host

136
00:05:50,240 --> 00:05:53,680
it's transferred over the network

137
00:05:53,680 --> 00:05:55,280
then it's received by the operating

138
00:05:55,280 --> 00:05:57,199
system of the client

139
00:05:57,199 --> 00:05:59,759
and eventually it will be processed and

140
00:05:59,759 --> 00:06:01,440
optionally it will be stored by the

141
00:06:01,440 --> 00:06:03,199
browser

142
00:06:03,199 --> 00:06:07,280
and by doing this uh analysis we

143
00:06:07,280 --> 00:06:11,199
discovered or we found several

144
00:06:11,199 --> 00:06:13,520
attack techniques so size exposing

145
00:06:13,520 --> 00:06:16,000
techniques

146
00:06:16,560 --> 00:06:17,919
many of these

147
00:06:17,919 --> 00:06:20,080
were found already

148
00:06:20,080 --> 00:06:23,360
as you can see with the related work

149
00:06:23,360 --> 00:06:24,160
but

150
00:06:24,160 --> 00:06:26,880
in this talk i will mainly focus

151
00:06:26,880 --> 00:06:28,400
on

152
00:06:28,400 --> 00:06:30,880
the two new attacks that we discovered

153
00:06:30,880 --> 00:06:34,240
so the one is a travel traffic analysis

154
00:06:34,240 --> 00:06:36,560
on wi-fi networks

155
00:06:36,560 --> 00:06:38,160
and the other one is

156
00:06:38,160 --> 00:06:41,120
a side-channel attacks against browser

157
00:06:41,120 --> 00:06:44,960
that leverages the storage mechanism

158
00:06:44,960 --> 00:06:47,280
so i'll first zoom in on the wi-fi

159
00:06:47,280 --> 00:06:49,440
traffic analysis

160
00:06:49,440 --> 00:06:54,240
so as you probably know on wpa2 networks

161
00:06:54,240 --> 00:06:55,280
all

162
00:06:55,280 --> 00:06:57,440
traffic is encrypted

163
00:06:57,440 --> 00:07:00,319
and this means that

164
00:07:00,319 --> 00:07:02,880
also the tcp and ip headers are

165
00:07:02,880 --> 00:07:07,599
encrypted so as a result it's it becomes

166
00:07:07,599 --> 00:07:11,599
impossible to differentiate packets

167
00:07:11,599 --> 00:07:13,599
well it becomes impossible to know

168
00:07:13,599 --> 00:07:16,479
whether a package belongs to

169
00:07:16,479 --> 00:07:18,319
background traffic or

170
00:07:18,319 --> 00:07:21,360
a target resource

171
00:07:21,360 --> 00:07:24,800
and in order to still perform the attack

172
00:07:24,800 --> 00:07:25,599
we

173
00:07:25,599 --> 00:07:27,039
propose to use

174
00:07:27,039 --> 00:07:27,919
a

175
00:07:27,919 --> 00:07:30,639
channel based mineral attack so in this

176
00:07:30,639 --> 00:07:31,840
attack

177
00:07:31,840 --> 00:07:34,639
the attacker clones the access point but

178
00:07:34,639 --> 00:07:36,479
on a different channel and then he

179
00:07:36,479 --> 00:07:38,240
prevents

180
00:07:38,240 --> 00:07:40,720
all the connection between the

181
00:07:40,720 --> 00:07:43,919
correct access point and the client

182
00:07:43,919 --> 00:07:46,080
so he basically acts as a man in the

183
00:07:46,080 --> 00:07:47,360
middle

184
00:07:47,360 --> 00:07:48,879
and then he will

185
00:07:48,879 --> 00:07:51,039
selectively forward

186
00:07:51,039 --> 00:07:54,319
traffic coming to or from the access

187
00:07:54,319 --> 00:07:56,080
point

188
00:07:56,080 --> 00:07:56,960
so

189
00:07:56,960 --> 00:07:59,280
visualize visualize this looks as

190
00:07:59,280 --> 00:08:01,840
following so you can see that the

191
00:08:01,840 --> 00:08:04,800
attacker is present in two cases

192
00:08:04,800 --> 00:08:08,160
so he has set up this rogue access point

193
00:08:08,160 --> 00:08:09,440
and

194
00:08:09,440 --> 00:08:11,840
malicious javascript file so this

195
00:08:11,840 --> 00:08:14,720
malicious javascript file will send the

196
00:08:14,720 --> 00:08:17,360
requests to twitter as in the previous

197
00:08:17,360 --> 00:08:19,360
cases

198
00:08:19,360 --> 00:08:22,240
so mr bonzi will then

199
00:08:22,240 --> 00:08:24,720
well encrypt the wi-fi packet and send

200
00:08:24,720 --> 00:08:27,599
it over to the attacker the attacker

201
00:08:27,599 --> 00:08:29,759
will look at the size

202
00:08:29,759 --> 00:08:31,199
of this packet

203
00:08:31,199 --> 00:08:33,039
because there's no length hiding going

204
00:08:33,039 --> 00:08:35,919
on i can know the exact size

205
00:08:35,919 --> 00:08:37,839
and it will only forward

206
00:08:37,839 --> 00:08:39,120
this packet

207
00:08:39,120 --> 00:08:42,479
if it's part of the well if the length

208
00:08:42,479 --> 00:08:45,680
coincides with that of a tcp

209
00:08:45,680 --> 00:08:49,760
syn or eck or of a dls handshake

210
00:08:49,760 --> 00:08:52,800
and well that's required because

211
00:08:52,800 --> 00:08:56,640
mr bunzi here needs to set up a dcp and

212
00:08:56,640 --> 00:08:59,760
tls connection with twitter

213
00:08:59,760 --> 00:09:01,120
and he also

214
00:09:01,120 --> 00:09:03,760
forwards it if it's the size of the

215
00:09:03,760 --> 00:09:06,320
target http request

216
00:09:06,320 --> 00:09:08,800
because he wants to send the request to

217
00:09:08,800 --> 00:09:10,000
twitter

218
00:09:10,000 --> 00:09:12,640
and all the other traffic he blocks

219
00:09:12,640 --> 00:09:14,640
and as a result

220
00:09:14,640 --> 00:09:17,360
the background traffic well there won't

221
00:09:17,360 --> 00:09:18,399
be any

222
00:09:18,399 --> 00:09:21,200
uh traffic coming from mr bonzi going

223
00:09:21,200 --> 00:09:22,640
outside so the

224
00:09:22,640 --> 00:09:26,000
background traffic will die off

225
00:09:26,000 --> 00:09:27,760
so if

226
00:09:27,760 --> 00:09:31,120
this packet is of one of these sizes

227
00:09:31,120 --> 00:09:33,600
he will forward it to the access point

228
00:09:33,600 --> 00:09:34,959
which will

229
00:09:34,959 --> 00:09:37,200
in return send it to twitter

230
00:09:37,200 --> 00:09:41,200
twitter will then generate the response

231
00:09:41,200 --> 00:09:42,560
send it back

232
00:09:42,560 --> 00:09:43,760
to

233
00:09:43,760 --> 00:09:46,800
the access point which will forward it

234
00:09:46,800 --> 00:09:48,560
to the

235
00:09:48,560 --> 00:09:51,920
attacker well the rogue access point

236
00:09:51,920 --> 00:09:54,160
and at that point all the attacker has

237
00:09:54,160 --> 00:09:57,920
to do is subtract the overheads from the

238
00:09:57,920 --> 00:10:00,959
headers so from the tcp ip headers and

239
00:10:00,959 --> 00:10:03,680
the wi-fi headers and then again

240
00:10:03,680 --> 00:10:06,800
he gets the exact size of the resource

241
00:10:06,800 --> 00:10:11,279
revealing the identity of mr bonzi

242
00:10:11,279 --> 00:10:15,200
so in a nutshell that's how the

243
00:10:15,200 --> 00:10:18,480
wi-fi traffic analysis attack works so

244
00:10:18,480 --> 00:10:20,560
now i'll move on to the

245
00:10:20,560 --> 00:10:22,000
side channel attack

246
00:10:22,000 --> 00:10:24,880
leveraging the browser storage

247
00:10:24,880 --> 00:10:26,399
so

248
00:10:26,399 --> 00:10:29,279
browsers well the modern browsers now

249
00:10:29,279 --> 00:10:31,760
have a cache api

250
00:10:31,760 --> 00:10:34,880
which allows web developers to program

251
00:10:34,880 --> 00:10:37,200
the cache so this means that any

252
00:10:37,200 --> 00:10:38,640
resource

253
00:10:38,640 --> 00:10:41,200
including cross-origin ones can be

254
00:10:41,200 --> 00:10:44,399
stored into the cache

255
00:10:44,720 --> 00:10:47,519
and it's also important to note that the

256
00:10:47,519 --> 00:10:49,680
available space or

257
00:10:49,680 --> 00:10:51,200
available amount of

258
00:10:51,200 --> 00:10:53,440
bytes that can be stored into the cache

259
00:10:53,440 --> 00:10:56,880
are limited per site

260
00:10:57,839 --> 00:11:00,079
and because

261
00:11:00,079 --> 00:11:02,720
well mainly because of this

262
00:11:02,720 --> 00:11:05,120
we discovered three different attack

263
00:11:05,120 --> 00:11:07,760
techniques that can be used to expose

264
00:11:07,760 --> 00:11:11,360
the exact size of a resource

265
00:11:11,360 --> 00:11:12,800
so by

266
00:11:12,800 --> 00:11:15,600
abusing the per side quota so the the

267
00:11:15,600 --> 00:11:17,519
quota that's for every

268
00:11:17,519 --> 00:11:19,120
site

269
00:11:19,120 --> 00:11:20,160
then the

270
00:11:20,160 --> 00:11:23,600
quota that's shared among every website

271
00:11:23,600 --> 00:11:25,680
and then finally the quota management

272
00:11:25,680 --> 00:11:28,720
and storage apis also

273
00:11:28,720 --> 00:11:30,800
can be abused to leak the size of a

274
00:11:30,800 --> 00:11:33,279
cross-origin resource

275
00:11:33,279 --> 00:11:35,920
so i'll focus on the first one and the

276
00:11:35,920 --> 00:11:37,519
last one here

277
00:11:37,519 --> 00:11:39,600
because the second one is basically an

278
00:11:39,600 --> 00:11:42,480
extension of the first one

279
00:11:42,480 --> 00:11:44,560
so the per side quota attack looks as

280
00:11:44,560 --> 00:11:48,399
follows so we have our user again

281
00:11:48,399 --> 00:11:51,120
visiting a malicious website so for

282
00:11:51,120 --> 00:11:53,440
instance hex.com

283
00:11:53,440 --> 00:11:56,160
this could also be an iframe

284
00:11:56,160 --> 00:11:58,720
so it doesn't necessarily need to be the

285
00:11:58,720 --> 00:12:02,320
website that he is visiting

286
00:12:02,320 --> 00:12:05,600
so the first step that attacker does is

287
00:12:05,600 --> 00:12:08,480
with this malicious javascript

288
00:12:08,480 --> 00:12:11,040
is completely fill up the cache

289
00:12:11,040 --> 00:12:13,440
well his own cache so the cache of

290
00:12:13,440 --> 00:12:15,680
hacks.com

291
00:12:15,680 --> 00:12:17,839
after that he will remove a certain

292
00:12:17,839 --> 00:12:20,560
amount of bytes so let's say that he

293
00:12:20,560 --> 00:12:23,200
removes x bytes

294
00:12:23,200 --> 00:12:27,040
um and then in the second step you will

295
00:12:27,040 --> 00:12:29,920
send a request to twitter i can this

296
00:12:29,920 --> 00:12:31,519
exact same request

297
00:12:31,519 --> 00:12:34,880
and twitter will answer

298
00:12:34,959 --> 00:12:36,639
with a response

299
00:12:36,639 --> 00:12:38,399
and this response

300
00:12:38,399 --> 00:12:39,920
well the attacker can determine that

301
00:12:39,920 --> 00:12:41,519
this response

302
00:12:41,519 --> 00:12:45,040
will be added to the cache of hex.com

303
00:12:45,040 --> 00:12:47,120
so this fills up

304
00:12:47,120 --> 00:12:48,800
the cache with an

305
00:12:48,800 --> 00:12:52,079
unknown amount of bytes

306
00:12:52,079 --> 00:12:54,639
and then in the last step the attack at

307
00:12:54,639 --> 00:12:56,959
the attacker will again try to

308
00:12:56,959 --> 00:12:59,200
completely fill up the cash again

309
00:12:59,200 --> 00:13:00,639
but now he

310
00:13:00,639 --> 00:13:03,760
notes exactly how many bytes are needed

311
00:13:03,760 --> 00:13:06,720
until he reaches the quota so he will he

312
00:13:06,720 --> 00:13:09,040
can notice it because then he will get

313
00:13:09,040 --> 00:13:11,600
an error saying that he can't store

314
00:13:11,600 --> 00:13:14,639
any more bytes in the cache

315
00:13:14,639 --> 00:13:17,760
and well as you can see already from

316
00:13:17,760 --> 00:13:21,279
the ymx all the attacker has to do is

317
00:13:21,279 --> 00:13:22,800
subtract

318
00:13:22,800 --> 00:13:25,519
y from x and again

319
00:13:25,519 --> 00:13:28,880
get the exact size and reveal mr bonzi's

320
00:13:28,880 --> 00:13:31,439
identity

321
00:13:33,360 --> 00:13:36,399
then for the second attack

322
00:13:36,399 --> 00:13:38,480
which i think is a very good indication

323
00:13:38,480 --> 00:13:39,519
that

324
00:13:39,519 --> 00:13:43,120
uh or serves as a good example

325
00:13:43,120 --> 00:13:46,560
that when new apis are introduced into

326
00:13:46,560 --> 00:13:49,279
the browser they should be totally

327
00:13:49,279 --> 00:13:51,680
checked or at least at the security

328
00:13:51,680 --> 00:13:53,519
level

329
00:13:53,519 --> 00:13:55,040
so

330
00:13:55,040 --> 00:13:57,600
the quota management and storage apis

331
00:13:57,600 --> 00:13:59,839
allow

332
00:13:59,839 --> 00:14:02,079
web developers to get some insight in

333
00:14:02,079 --> 00:14:04,480
the current usage of the

334
00:14:04,480 --> 00:14:06,160
cache

335
00:14:06,160 --> 00:14:09,120
so what the attacker can do is he can

336
00:14:09,120 --> 00:14:11,920
ask for an estimate

337
00:14:11,920 --> 00:14:14,560
so in this case

338
00:14:14,560 --> 00:14:17,760
the cache was filled with x bytes

339
00:14:17,760 --> 00:14:20,560
and although it's called get estimate

340
00:14:20,560 --> 00:14:22,480
the browser will actually return the

341
00:14:22,480 --> 00:14:25,680
exact amount of bytes

342
00:14:25,680 --> 00:14:26,480
so

343
00:14:26,480 --> 00:14:27,760
at that point

344
00:14:27,760 --> 00:14:29,279
the attacker knows that there are

345
00:14:29,279 --> 00:14:32,160
exerpies in his cache

346
00:14:32,160 --> 00:14:34,399
then he can again send a reque well

347
00:14:34,399 --> 00:14:36,560
trigger the request to twitter

348
00:14:36,560 --> 00:14:38,240
get a response

349
00:14:38,240 --> 00:14:41,519
and put it in his cache now it grows to

350
00:14:41,519 --> 00:14:42,800
y bytes

351
00:14:42,800 --> 00:14:45,839
so again you can send the get estimates

352
00:14:45,839 --> 00:14:46,959
request

353
00:14:46,959 --> 00:14:49,360
uh get the response back

354
00:14:49,360 --> 00:14:52,320
all that all happens in the browser

355
00:14:52,320 --> 00:14:54,240
so then the attacker knows that there

356
00:14:54,240 --> 00:14:55,360
are

357
00:14:55,360 --> 00:14:59,600
y bytes so now he just needs to subtract

358
00:14:59,600 --> 00:15:01,040
x from y

359
00:15:01,040 --> 00:15:02,000
and again

360
00:15:02,000 --> 00:15:05,760
get the exact amount of bytes

361
00:15:06,320 --> 00:15:07,760
so in

362
00:15:07,760 --> 00:15:09,600
these previous examples i've mainly

363
00:15:09,600 --> 00:15:12,959
focused on a single attack scenario

364
00:15:12,959 --> 00:15:16,160
namely the user identification by for

365
00:15:16,160 --> 00:15:18,240
instance using twitter

366
00:15:18,240 --> 00:15:19,760
but of course these attacks can be

367
00:15:19,760 --> 00:15:22,480
applied in several other scenarios as

368
00:15:22,480 --> 00:15:23,519
well

369
00:15:23,519 --> 00:15:26,639
so for instance if the victim is using

370
00:15:26,639 --> 00:15:29,519
an online online health platform

371
00:15:29,519 --> 00:15:31,519
such as webmd

372
00:15:31,519 --> 00:15:34,160
it may be possible for the attacker to

373
00:15:34,160 --> 00:15:36,320
reveal which medical conditions were

374
00:15:36,320 --> 00:15:39,040
entered by the user

375
00:15:39,040 --> 00:15:44,079
uh in 2015 uh so last year a learner at

376
00:15:44,079 --> 00:15:46,160
all

377
00:15:46,160 --> 00:15:49,920
proposed these cross-site search attacks

378
00:15:49,920 --> 00:15:50,720
where

379
00:15:50,720 --> 00:15:53,360
well the attacker simply sends requests

380
00:15:53,360 --> 00:15:56,399
to the search endpoint so for instance

381
00:15:56,399 --> 00:15:58,800
with gmail search and by looking at the

382
00:15:58,800 --> 00:16:01,360
response size you can determine whether

383
00:16:01,360 --> 00:16:04,079
this returned results or not

384
00:16:04,079 --> 00:16:05,839
so in his

385
00:16:05,839 --> 00:16:08,560
or in their work they used

386
00:16:08,560 --> 00:16:10,800
regular timing attacks

387
00:16:10,800 --> 00:16:13,519
but of course it's well these attacks

388
00:16:13,519 --> 00:16:16,160
can also be applied by

389
00:16:16,160 --> 00:16:17,279
using

390
00:16:17,279 --> 00:16:18,160
the

391
00:16:18,160 --> 00:16:21,360
attacks that i just mentioned

392
00:16:21,360 --> 00:16:24,240
and because there's a global cache that

393
00:16:24,240 --> 00:16:27,120
is shared among all websites it's also

394
00:16:27,120 --> 00:16:30,079
possible to infer the caching operations

395
00:16:30,079 --> 00:16:30,800
of

396
00:16:30,800 --> 00:16:33,759
these other websites so for instance

397
00:16:33,759 --> 00:16:36,160
on the web client of telegram it's

398
00:16:36,160 --> 00:16:39,120
possible to to detect whether a certain

399
00:16:39,120 --> 00:16:41,440
member is part of a group or not and

400
00:16:41,440 --> 00:16:44,320
that's because uh if the member

401
00:16:44,320 --> 00:16:45,600
is if the

402
00:16:45,600 --> 00:16:47,279
victim is

403
00:16:47,279 --> 00:16:50,560
a member of this group the telegram will

404
00:16:50,560 --> 00:16:52,560
cache a certain resource

405
00:16:52,560 --> 00:16:56,719
which will affect the global quota

406
00:16:56,880 --> 00:16:59,920
so this brings me to the demonstration

407
00:16:59,920 --> 00:17:02,240
so in this demonstration i will show how

408
00:17:02,240 --> 00:17:03,440
the

409
00:17:03,440 --> 00:17:06,319
identification on twitter so of a

410
00:17:06,319 --> 00:17:09,359
twitter user would work

411
00:17:09,359 --> 00:17:12,559
so in a first step the attacker will

412
00:17:12,559 --> 00:17:13,520
collect

413
00:17:13,520 --> 00:17:15,760
the resource sizes as we saw in the

414
00:17:15,760 --> 00:17:17,520
beginning

415
00:17:17,520 --> 00:17:19,599
so you can see

416
00:17:19,599 --> 00:17:23,039
here it collects information

417
00:17:23,039 --> 00:17:27,119
about users and my username as well

418
00:17:27,119 --> 00:17:29,520
and you can see that it this runs from

419
00:17:29,520 --> 00:17:31,039
uh

420
00:17:31,039 --> 00:17:32,559
from the

421
00:17:32,559 --> 00:17:34,720
command line so you can

422
00:17:34,720 --> 00:17:37,280
really distribute this easily among a

423
00:17:37,280 --> 00:17:39,600
lot of machines

424
00:17:39,600 --> 00:17:42,160
and basically collects three different

425
00:17:42,160 --> 00:17:45,440
resources three collects the following

426
00:17:45,440 --> 00:17:48,640
lists and like resource or at least the

427
00:17:48,640 --> 00:17:50,640
size thereof

428
00:17:50,640 --> 00:17:53,360
and once he has a large enough list he

429
00:17:53,360 --> 00:17:54,960
will

430
00:17:54,960 --> 00:17:56,880
he will say that this is this

431
00:17:56,880 --> 00:17:59,919
precomputed data set

432
00:17:59,919 --> 00:18:02,960
and we'll move on to the next step so

433
00:18:02,960 --> 00:18:05,840
the next step the attacker either tricks

434
00:18:05,840 --> 00:18:08,480
the user in visiting his website or the

435
00:18:08,480 --> 00:18:10,160
user visits him

436
00:18:10,160 --> 00:18:14,799
well visits the websites by himself

437
00:18:14,799 --> 00:18:16,400
as you can see the

438
00:18:16,400 --> 00:18:19,679
attack already finished

439
00:18:21,760 --> 00:18:23,919
so in well this case i

440
00:18:23,919 --> 00:18:25,760
really visualized

441
00:18:25,760 --> 00:18:28,160
everything that's going on but of course

442
00:18:28,160 --> 00:18:31,120
this is just javascript executing so it

443
00:18:31,120 --> 00:18:33,760
could be executed without the user user

444
00:18:33,760 --> 00:18:36,879
knowing about anything

445
00:18:37,039 --> 00:18:37,840
so

446
00:18:37,840 --> 00:18:40,000
in this attack the attacker

447
00:18:40,000 --> 00:18:43,120
will request three resources so the

448
00:18:43,120 --> 00:18:45,919
twitter.com following the likes and

449
00:18:45,919 --> 00:18:47,520
lists will

450
00:18:47,520 --> 00:18:48,880
get a

451
00:18:48,880 --> 00:18:51,919
resource size by using the storage-based

452
00:18:51,919 --> 00:18:54,240
site channel attack

453
00:18:54,240 --> 00:18:56,640
and then he will compare

454
00:18:56,640 --> 00:18:58,799
these resource sizes with what he found

455
00:18:58,799 --> 00:19:01,679
in his pre-calculated set

456
00:19:01,679 --> 00:19:04,400
and then he will reveal the identity in

457
00:19:04,400 --> 00:19:05,440
this case

458
00:19:05,440 --> 00:19:07,600
me

459
00:19:08,880 --> 00:19:11,760
of course we also looked at

460
00:19:11,760 --> 00:19:15,200
ways to defend against these attacks

461
00:19:15,200 --> 00:19:16,160
one

462
00:19:16,160 --> 00:19:17,440
ideal

463
00:19:17,440 --> 00:19:20,080
solution would be to disable third-party

464
00:19:20,080 --> 00:19:21,039
cookies

465
00:19:21,039 --> 00:19:23,200
because if these third-party cookies are

466
00:19:23,200 --> 00:19:25,440
not there then the requests sent by the

467
00:19:25,440 --> 00:19:26,559
victim

468
00:19:26,559 --> 00:19:30,640
will not com well will not contain any

469
00:19:30,640 --> 00:19:32,000
authentication

470
00:19:32,000 --> 00:19:32,799
so

471
00:19:32,799 --> 00:19:35,360
the response will be

472
00:19:35,360 --> 00:19:40,080
unrelated to the identity of the victim

473
00:19:40,080 --> 00:19:41,520
unfortunately

474
00:19:41,520 --> 00:19:44,720
by disabling third-party cookies a small

475
00:19:44,720 --> 00:19:47,679
fraction of the web will break

476
00:19:47,679 --> 00:19:50,880
so browser vendors are not so eager to

477
00:19:50,880 --> 00:19:53,520
disable them by default

478
00:19:53,520 --> 00:19:54,559
a

479
00:19:54,559 --> 00:19:57,039
promising

480
00:19:57,120 --> 00:19:59,440
feature however is

481
00:19:59,440 --> 00:20:02,080
the same site attribute on cookies

482
00:20:02,080 --> 00:20:05,520
so basically this same site attribute

483
00:20:05,520 --> 00:20:06,720
says that

484
00:20:06,720 --> 00:20:08,159
or

485
00:20:08,159 --> 00:20:10,000
mandates that

486
00:20:10,000 --> 00:20:13,360
if a cookie is sent from a cross or in a

487
00:20:13,360 --> 00:20:15,840
cross origin if a request is sent in a

488
00:20:15,840 --> 00:20:17,280
cross-origin

489
00:20:17,280 --> 00:20:19,600
manner so if it originates from a

490
00:20:19,600 --> 00:20:21,679
different origin then the cookie will

491
00:20:21,679 --> 00:20:24,320
not be attached so

492
00:20:24,320 --> 00:20:25,120
by

493
00:20:25,120 --> 00:20:27,840
adding this attribute on your cookie as

494
00:20:27,840 --> 00:20:30,559
you would with http only or secure

495
00:20:30,559 --> 00:20:32,000
attributes

496
00:20:32,000 --> 00:20:33,440
you can prevent

497
00:20:33,440 --> 00:20:35,520
these type of attacks

498
00:20:35,520 --> 00:20:36,880
so for now

499
00:20:36,880 --> 00:20:39,919
this mechanism is only supported by

500
00:20:39,919 --> 00:20:41,039
chrome

501
00:20:41,039 --> 00:20:42,960
but i think that other browser vendors

502
00:20:42,960 --> 00:20:45,600
will follow soon with

503
00:20:45,600 --> 00:20:48,320
implementing it

504
00:20:48,320 --> 00:20:50,159
we also looked at

505
00:20:50,159 --> 00:20:52,559
how the browser storage could be

506
00:20:52,559 --> 00:20:54,559
hardened

507
00:20:54,559 --> 00:20:56,640
so for that we proposed a solution where

508
00:20:56,640 --> 00:21:00,080
we add virtual padding so with virtual

509
00:21:00,080 --> 00:21:02,559
betting i mean that the padding is not

510
00:21:02,559 --> 00:21:03,760
actually

511
00:21:03,760 --> 00:21:06,000
written to the disc it's only kept as

512
00:21:06,000 --> 00:21:09,760
part of some bookkeeping for the quota

513
00:21:09,760 --> 00:21:13,840
and as a result this will

514
00:21:13,919 --> 00:21:16,640
vary well the impact on the browser

515
00:21:16,640 --> 00:21:18,559
performance will be

516
00:21:18,559 --> 00:21:20,240
very limited

517
00:21:20,240 --> 00:21:22,240
and two weeks ago

518
00:21:22,240 --> 00:21:24,080
we learned that

519
00:21:24,080 --> 00:21:26,400
this well our proposed

520
00:21:26,400 --> 00:21:28,480
countermeasure will actually be adopted

521
00:21:28,480 --> 00:21:29,440
by

522
00:21:29,440 --> 00:21:30,880
browser vendors

523
00:21:30,880 --> 00:21:33,840
so in firefox they said it

524
00:21:33,840 --> 00:21:36,640
well should be fixed in the next release

525
00:21:36,640 --> 00:21:38,480
and then on the issue tracker of the

526
00:21:38,480 --> 00:21:40,080
storage standard

527
00:21:40,080 --> 00:21:41,919
and they mentioned that this should be a

528
00:21:41,919 --> 00:21:45,520
high priority fixed and that by applying

529
00:21:45,520 --> 00:21:46,960
it

530
00:21:46,960 --> 00:21:48,799
the well

531
00:21:48,799 --> 00:21:50,720
the usefulness of the attack will be

532
00:21:50,720 --> 00:21:52,799
reduced of that of a

533
00:21:52,799 --> 00:21:56,080
standard timing attack

534
00:21:56,080 --> 00:22:00,000
so that brings me to the conclusion

535
00:22:00,000 --> 00:22:00,720
so

536
00:22:00,720 --> 00:22:04,880
in our work we analyzed

537
00:22:05,200 --> 00:22:08,320
size exposing techniques so we did an

538
00:22:08,320 --> 00:22:11,360
analysis on

539
00:22:11,600 --> 00:22:12,480
the

540
00:22:12,480 --> 00:22:15,520
actions that are performed on resources

541
00:22:15,520 --> 00:22:18,080
which led us to the discovery of two new

542
00:22:18,080 --> 00:22:19,760
techniques

543
00:22:19,760 --> 00:22:23,280
namely the wi-fi traffic analysis using

544
00:22:23,280 --> 00:22:26,640
a wi-fi man in the middle and a second

545
00:22:26,640 --> 00:22:27,760
technique

546
00:22:27,760 --> 00:22:29,600
namely

547
00:22:29,600 --> 00:22:31,120
the browser-based

548
00:22:31,120 --> 00:22:33,520
storage side channel and both of these

549
00:22:33,520 --> 00:22:35,840
techniques can be used to determine the

550
00:22:35,840 --> 00:22:39,280
exact size of a cross-origin resource

551
00:22:39,280 --> 00:22:43,039
and i've only touched it on it briefly

552
00:22:43,039 --> 00:22:44,559
but these

553
00:22:44,559 --> 00:22:46,880
attacks can be used in various

554
00:22:46,880 --> 00:22:49,440
real world scenarios

555
00:22:49,440 --> 00:22:51,679
and in the end we also

556
00:22:51,679 --> 00:22:54,799
propose certain defense methods

557
00:22:54,799 --> 00:22:56,960
and some of them will be implemented by

558
00:22:56,960 --> 00:22:58,400
the browser

559
00:22:58,400 --> 00:22:59,919
so if you're

560
00:22:59,919 --> 00:23:02,559
interested in knowing all the details

561
00:23:02,559 --> 00:23:05,520
i suggest you take a look at our paper

562
00:23:05,520 --> 00:23:07,600
i can assure you that at least my rabbit

563
00:23:07,600 --> 00:23:09,918
liked it

564
00:23:10,550 --> 00:23:18,080
[Applause]

565
00:23:18,080 --> 00:23:20,720
hi i'm rima tanas from rice university

566
00:23:20,720 --> 00:23:22,799
so i have a question uh

567
00:23:22,799 --> 00:23:24,400
you uh you

568
00:23:24,400 --> 00:23:26,480
enumerated the users based on the

569
00:23:26,480 --> 00:23:29,200
resource size uh you know from the get

570
00:23:29,200 --> 00:23:30,559
request

571
00:23:30,559 --> 00:23:32,240
how did you deal with

572
00:23:32,240 --> 00:23:34,159
collisions because

573
00:23:34,159 --> 00:23:36,960
um you know when you start a new account

574
00:23:36,960 --> 00:23:38,799
twitter would um ask you to have a

575
00:23:38,799 --> 00:23:40,559
minimum number of users i'm sorry

576
00:23:40,559 --> 00:23:41,679
followers

577
00:23:41,679 --> 00:23:43,600
uh so you could have a lot of collisions

578
00:23:43,600 --> 00:23:46,320
so how did you deal with that uh i'll

579
00:23:46,320 --> 00:23:49,799
show a difference

580
00:23:53,600 --> 00:23:56,320
yeah so we did a more large scale

581
00:23:56,320 --> 00:24:00,240
experiment where we analyzed uh 500 000

582
00:24:00,240 --> 00:24:02,159
random users

583
00:24:02,159 --> 00:24:04,000
and for each of them we downloaded five

584
00:24:04,000 --> 00:24:07,520
resources so the followers following

585
00:24:07,520 --> 00:24:08,559
likes

586
00:24:08,559 --> 00:24:09,360
and

587
00:24:09,360 --> 00:24:12,000
lists and memberships

588
00:24:12,000 --> 00:24:14,559
and then we try to determine the group

589
00:24:14,559 --> 00:24:17,760
size they belong to so

590
00:24:17,760 --> 00:24:20,240
for instance if there's

591
00:24:20,240 --> 00:24:21,520
uh

592
00:24:21,520 --> 00:24:24,559
well if there's a resource of the of the

593
00:24:24,559 --> 00:24:25,520
size

594
00:24:25,520 --> 00:24:28,000
one two three and we find that

595
00:24:28,000 --> 00:24:29,679
three users

596
00:24:29,679 --> 00:24:31,600
have this resource size

597
00:24:31,600 --> 00:24:32,480
then we

598
00:24:32,480 --> 00:24:35,039
well then the group size is three

599
00:24:35,039 --> 00:24:37,440
so you can see here

600
00:24:37,440 --> 00:24:39,600
i think the most important one is by

601
00:24:39,600 --> 00:24:42,240
collecting all five resources

602
00:24:42,240 --> 00:24:43,760
and

603
00:24:43,760 --> 00:24:46,880
well the group size is virtually well

604
00:24:46,880 --> 00:24:48,799
for most of them

605
00:24:48,799 --> 00:24:50,880
it's one

606
00:24:50,880 --> 00:24:51,679
so

607
00:24:51,679 --> 00:24:54,240
that really reduces

608
00:24:54,240 --> 00:24:55,600
the well

609
00:24:55,600 --> 00:24:58,240
the possible set of

610
00:24:58,240 --> 00:24:59,840
victim users

611
00:24:59,840 --> 00:25:01,679
quite drastically

612
00:25:01,679 --> 00:25:03,520
but of course there are still some

613
00:25:03,520 --> 00:25:05,440
others

614
00:25:05,440 --> 00:25:07,919
but of course

615
00:25:07,919 --> 00:25:11,760
this attack is only targeting twitter

616
00:25:11,760 --> 00:25:12,799
with

617
00:25:12,799 --> 00:25:15,760
any social network or any websites

618
00:25:15,760 --> 00:25:16,799
actually

619
00:25:16,799 --> 00:25:18,720
could be abused by

620
00:25:18,720 --> 00:25:23,559
trying to reveal more about a victim

621
00:25:28,080 --> 00:25:30,559
hi antoine lemi from polytechnic just a

622
00:25:30,559 --> 00:25:32,240
follow-up question wouldn't that mean

623
00:25:32,240 --> 00:25:33,919
that you would need to sample

624
00:25:33,919 --> 00:25:36,799
essentially almost all twitter users

625
00:25:36,799 --> 00:25:39,039
up to a refresh rate of the number of

626
00:25:39,039 --> 00:25:43,240
times somebody does a like

627
00:25:44,559 --> 00:25:46,000
yeah

628
00:25:46,000 --> 00:25:47,200
but you can

629
00:25:47,200 --> 00:25:49,679
use a more sophisticated attack where

630
00:25:49,679 --> 00:25:50,960
you

631
00:25:50,960 --> 00:25:53,200
well reduce the size of

632
00:25:53,200 --> 00:25:55,039
the group size

633
00:25:55,039 --> 00:25:56,799
by having some

634
00:25:56,799 --> 00:25:58,080
offsets

635
00:25:58,080 --> 00:26:01,919
basically so if if you

636
00:26:01,919 --> 00:26:04,559
basically not look at the as exact size

637
00:26:04,559 --> 00:26:05,600
but

638
00:26:05,600 --> 00:26:07,840
allow for a range

639
00:26:07,840 --> 00:26:10,720
so that there could be small changes

640
00:26:10,720 --> 00:26:12,400
then i think

641
00:26:12,400 --> 00:26:15,760
it could still be applied

642
00:26:21,360 --> 00:26:23,200
we have a couple of minutes left so i

643
00:26:23,200 --> 00:26:25,520
get to ask a question

644
00:26:25,520 --> 00:26:28,400
what can be done server-side to detect

645
00:26:28,400 --> 00:26:31,919
or prevent this sort of attacks

646
00:26:32,000 --> 00:26:34,240
well at the server side

647
00:26:34,240 --> 00:26:37,360
the best solution would be to add same

648
00:26:37,360 --> 00:26:39,440
site cookies

649
00:26:39,440 --> 00:26:42,559
or the same set attribute to cookies

650
00:26:42,559 --> 00:26:46,000
unfortunately that will only

651
00:26:46,000 --> 00:26:48,480
prevent

652
00:26:49,039 --> 00:26:50,640
well chrome

653
00:26:50,640 --> 00:26:53,760
users from being a text

654
00:26:53,760 --> 00:26:54,480
all

655
00:26:54,480 --> 00:26:56,720
users on different browsers will still

656
00:26:56,720 --> 00:26:58,640
remain vulnerable because there it's not

657
00:26:58,640 --> 00:27:01,279
supported yet

658
00:27:01,279 --> 00:27:03,679
but yeah on the server side it's quite

659
00:27:03,679 --> 00:27:06,880
hard to defend because from desperate

660
00:27:06,880 --> 00:27:09,200
perspective the requests that are sent

661
00:27:09,200 --> 00:27:11,279
out from the attacker look exactly the

662
00:27:11,279 --> 00:27:12,080
same

663
00:27:12,080 --> 00:27:13,600
as those

664
00:27:13,600 --> 00:27:16,959
of a regular user

665
00:27:18,559 --> 00:27:21,090
all right please thank the speaker

666
00:27:21,090 --> 00:27:24,730
[Applause]

