1
00:00:10,719 --> 00:00:12,799
it's an honor to be the first speaker of

2
00:00:12,799 --> 00:00:14,639
the technical of the refereed papers

3
00:00:14,639 --> 00:00:16,239
today thank you very much for coming i'm

4
00:00:16,239 --> 00:00:17,520
going to make this efficient because i

5
00:00:17,520 --> 00:00:19,680
have a lot to tell you

6
00:00:19,680 --> 00:00:21,119
for the amusement of the chinese

7
00:00:21,119 --> 00:00:22,400
speakers in the room i'm going to make

8
00:00:22,400 --> 00:00:24,480
one attempt at pronouncing this the

9
00:00:24,480 --> 00:00:26,080
chinese way

10
00:00:26,080 --> 00:00:27,279
the rest of the time i'm going to do the

11
00:00:27,279 --> 00:00:29,199
naive way okay it's going to be this is

12
00:00:29,199 --> 00:00:31,840
about flip feng shui hammering and

13
00:00:31,840 --> 00:00:33,840
needle in the software stack

14
00:00:33,840 --> 00:00:35,920
it's a new kind of exploitation

15
00:00:35,920 --> 00:00:38,320
technique that i want to tell you about

16
00:00:38,320 --> 00:00:40,719
structure even okay here we go

17
00:00:40,719 --> 00:00:43,440
what can we do with this an example

18
00:00:43,440 --> 00:00:44,399
attack

19
00:00:44,399 --> 00:00:46,640
that we're going to show you is

20
00:00:46,640 --> 00:00:48,800
a compromise of an openssh server we're

21
00:00:48,800 --> 00:00:50,399
going to be able to generate our own new

22
00:00:50,399 --> 00:00:52,559
private key corresponding to the public

23
00:00:52,559 --> 00:00:54,640
key that's on the server and be able to

24
00:00:54,640 --> 00:00:55,920
log in

25
00:00:55,920 --> 00:00:57,680
using our own

26
00:00:57,680 --> 00:00:59,280
private key a newly generated private

27
00:00:59,280 --> 00:01:00,640
key

28
00:01:00,640 --> 00:01:02,320
we're going to be able to force gpg

29
00:01:02,320 --> 00:01:04,159
signatures and thereby completely

30
00:01:04,159 --> 00:01:05,280
compromise

31
00:01:05,280 --> 00:01:06,560
the

32
00:01:06,560 --> 00:01:08,640
apt-get package management

33
00:01:08,640 --> 00:01:12,000
widely deployed on debian and ubuntu

34
00:01:12,000 --> 00:01:14,799
by forging gpg signatures

35
00:01:14,799 --> 00:01:16,799
all of this we can do without relying on

36
00:01:16,799 --> 00:01:18,720
a software bug there are no bugs present

37
00:01:18,720 --> 00:01:21,040
in openstack and gpg that we rely on we

38
00:01:21,040 --> 00:01:23,119
do we rely on very weak assumptions that

39
00:01:23,119 --> 00:01:24,400
make this attack

40
00:01:24,400 --> 00:01:25,920
very practical there's going to be a

41
00:01:25,920 --> 00:01:29,439
demo of the second attack

42
00:01:30,320 --> 00:01:32,400
that i'm going to have to show you

43
00:01:32,400 --> 00:01:34,159
the scientific contribution as we see it

44
00:01:34,159 --> 00:01:35,840
is that flip feng shui

45
00:01:35,840 --> 00:01:37,280
is an exploitation structure that

46
00:01:37,280 --> 00:01:39,200
depends on two different things one is a

47
00:01:39,200 --> 00:01:41,119
hardware glitch and one is a memory

48
00:01:41,119 --> 00:01:43,439
massaging primitive the hardware glitch

49
00:01:43,439 --> 00:01:46,159
is we use to corrupt

50
00:01:46,159 --> 00:01:47,600
memory but of course hardware glitches

51
00:01:47,600 --> 00:01:49,840
are generally speaking unreliable

52
00:01:49,840 --> 00:01:52,000
they're noisy they're

53
00:01:52,000 --> 00:01:54,000
non-deterministic but using this memory

54
00:01:54,000 --> 00:01:55,920
massaging primitive we can make this not

55
00:01:55,920 --> 00:02:00,320
only reliable but also precisely aimed

56
00:02:01,119 --> 00:02:02,719
uh we have actually a little bit of a

57
00:02:02,719 --> 00:02:04,719
teaser we have a another paper that's

58
00:02:04,719 --> 00:02:07,600
been accepted that

59
00:02:07,600 --> 00:02:09,758
that also employs this exploitation

60
00:02:09,758 --> 00:02:11,360
structure but in a different way for

61
00:02:11,360 --> 00:02:12,640
feng shui i'm going to show you how it

62
00:02:12,640 --> 00:02:14,400
works with row hammer and memory

63
00:02:14,400 --> 00:02:16,319
duplication by hammer is the memory uh

64
00:02:16,319 --> 00:02:18,239
gl is the hardware glitch and memory

65
00:02:18,239 --> 00:02:19,680
duplication is the physical memory

66
00:02:19,680 --> 00:02:21,599
massaging primitive

67
00:02:21,599 --> 00:02:22,800
we have another another paper that's

68
00:02:22,800 --> 00:02:24,239
going to be accepted that that's

69
00:02:24,239 --> 00:02:25,840
accepted that's uh

70
00:02:25,840 --> 00:02:28,080
that also relies on memory massaging

71
00:02:28,080 --> 00:02:29,520
technique and row hammer but it's very

72
00:02:29,520 --> 00:02:30,400
different

73
00:02:30,400 --> 00:02:32,319
so that's just a teaser to show you the

74
00:02:32,319 --> 00:02:34,160
generality of this

75
00:02:34,160 --> 00:02:35,760
so in this talk i'll give you an example

76
00:02:35,760 --> 00:02:38,480
of how it works using row hammer and

77
00:02:38,480 --> 00:02:41,359
memory duplication

78
00:02:42,480 --> 00:02:44,560
so if we think about the outline of this

79
00:02:44,560 --> 00:02:46,560
talk is if we forget for a moment how it

80
00:02:46,560 --> 00:02:48,000
works what can you do with flip feng

81
00:02:48,000 --> 00:02:49,760
shui

82
00:02:49,760 --> 00:02:50,959
now we wonder how it works how does it

83
00:02:50,959 --> 00:02:52,400
work exactly what are the mechanics that

84
00:02:52,400 --> 00:02:53,840
go into flipping shui and what what

85
00:02:53,840 --> 00:02:55,120
techniques does it rely on what has to

86
00:02:55,120 --> 00:02:56,319
come together for this to work what are

87
00:02:56,319 --> 00:02:57,840
the assumptions

88
00:02:57,840 --> 00:02:59,360
once you have that in place

89
00:02:59,360 --> 00:03:01,120
what let's hear some example attacks one

90
00:03:01,120 --> 00:03:02,800
is an open ssh attack i was just talking

91
00:03:02,800 --> 00:03:05,200
about one of the gpg updates attack i'm

92
00:03:05,200 --> 00:03:06,800
going to show you a video demo and

93
00:03:06,800 --> 00:03:07,680
finally i'm going to tell you a little

94
00:03:07,680 --> 00:03:09,040
bit about the real world impact this

95
00:03:09,040 --> 00:03:11,280
work has had in terms of notification

96
00:03:11,280 --> 00:03:13,040
and what we think the takeaway

97
00:03:13,040 --> 00:03:14,879
conclusion should be from this work and

98
00:03:14,879 --> 00:03:16,239
of course where you can follow up with

99
00:03:16,239 --> 00:03:18,800
us if you want to know more about it

100
00:03:18,800 --> 00:03:20,959
okay flip picture we at work if you have

101
00:03:20,959 --> 00:03:22,560
this primitive in place

102
00:03:22,560 --> 00:03:24,000
what can you do with it

103
00:03:24,000 --> 00:03:27,360
so the the example uh scenario that we

104
00:03:27,360 --> 00:03:29,440
are assuming is that we are co-hosted

105
00:03:29,440 --> 00:03:31,920
vms with a victim and an attacker hosted

106
00:03:31,920 --> 00:03:36,720
on the same linux uh host we were using

107
00:03:36,720 --> 00:03:38,640
linux and

108
00:03:38,640 --> 00:03:40,400
kvm in these examples we didn't rely on

109
00:03:40,400 --> 00:03:41,680
it being a linux and we didn't rely on

110
00:03:41,680 --> 00:03:43,680
being kvm but their example

111
00:03:43,680 --> 00:03:47,200
an example environment in which it works

112
00:03:47,200 --> 00:03:50,640
we assume also that uh so what what

113
00:03:50,640 --> 00:03:52,239
you'll be able to do if you if you

114
00:03:52,239 --> 00:03:54,400
employ flip factory is that if you know

115
00:03:54,400 --> 00:03:56,000
if you're an attacker vm coasted with a

116
00:03:56,000 --> 00:03:57,519
victim and you know

117
00:03:57,519 --> 00:03:59,920
the content of a memory page in your

118
00:03:59,920 --> 00:04:01,360
victim vm you're going to be able to

119
00:04:01,360 --> 00:04:02,159
flip

120
00:04:02,159 --> 00:04:05,040
one bit in that page in that memory page

121
00:04:05,040 --> 00:04:06,640
of the victim so it may be an

122
00:04:06,640 --> 00:04:08,720
interesting exercise a mental exercise

123
00:04:08,720 --> 00:04:10,560
now if you want to subvert the security

124
00:04:10,560 --> 00:04:12,400
of a victim vm

125
00:04:12,400 --> 00:04:14,239
which bit which single bit would you

126
00:04:14,239 --> 00:04:16,000
flip what's the most security sensitive

127
00:04:16,000 --> 00:04:18,798
most powerful bit to flip if you're able

128
00:04:18,798 --> 00:04:21,040
to choose anyone in a page that you can

129
00:04:21,040 --> 00:04:23,600
guess the contents of so this is the

130
00:04:23,600 --> 00:04:25,360
origin of the name flip feng shui we

131
00:04:25,360 --> 00:04:27,040
call it flip because we flip one bit and

132
00:04:27,040 --> 00:04:29,680
we call it feng shui because it has the

133
00:04:29,680 --> 00:04:32,160
memory that we are attacking has to be

134
00:04:32,160 --> 00:04:34,240
organized in this way to make it

135
00:04:34,240 --> 00:04:35,440
reliable

136
00:04:35,440 --> 00:04:38,479
and uh and deterministic

137
00:04:38,479 --> 00:04:40,240
hence so as in the harmonies

138
00:04:40,240 --> 00:04:42,960
organization of objects i believe

139
00:04:42,960 --> 00:04:45,520
so using the scheme we can completely

140
00:04:45,520 --> 00:04:46,720
circumvent the strongest possible

141
00:04:46,720 --> 00:04:48,320
isolation that

142
00:04:48,320 --> 00:04:50,560
currently provided by modern cpus which

143
00:04:50,560 --> 00:04:53,120
is hardware virtualization

144
00:04:53,120 --> 00:04:55,199
okay so that started the top level view

145
00:04:55,199 --> 00:04:56,479
of

146
00:04:56,479 --> 00:04:57,919
what can you do with flip feng shui flip

147
00:04:57,919 --> 00:04:58,960
one bit

148
00:04:58,960 --> 00:05:00,880
in a co-hosted victim vm if you know the

149
00:05:00,880 --> 00:05:02,320
contents of the page

150
00:05:02,320 --> 00:05:03,919
how does it work

151
00:05:03,919 --> 00:05:06,080
so for this example we assume that we're

152
00:05:06,080 --> 00:05:08,240
co-hosted vms we assume that memory

153
00:05:08,240 --> 00:05:10,720
deduplication is turned on in the host

154
00:05:10,720 --> 00:05:12,000
in linux

155
00:05:12,000 --> 00:05:13,360
the implementation there is called ksm

156
00:05:13,360 --> 00:05:15,280
kernel same page merging we assume that

157
00:05:15,280 --> 00:05:16,960
we can use row hammer

158
00:05:16,960 --> 00:05:18,639
and i'm going to show you a little bit

159
00:05:18,639 --> 00:05:20,720
about some details of rsa which we need

160
00:05:20,720 --> 00:05:22,400
for the example attacks not for the

161
00:05:22,400 --> 00:05:23,520
flipping sheet itself but for the

162
00:05:23,520 --> 00:05:25,759
example application attacks that we do

163
00:05:25,759 --> 00:05:27,919
um

164
00:05:28,400 --> 00:05:29,759
we assume

165
00:05:29,759 --> 00:05:31,600
that

166
00:05:31,600 --> 00:05:33,680
oh yeah so we assume duplication is on

167
00:05:33,680 --> 00:05:34,880
and that row hammer works these are very

168
00:05:34,880 --> 00:05:36,400
realistic assumptions so that's what i

169
00:05:36,400 --> 00:05:39,039
meant by weak assumptions uh eighty

170
00:05:39,039 --> 00:05:40,479
percent of ddr3 ram modules are

171
00:05:40,479 --> 00:05:41,919
acceptable to row hammer memory

172
00:05:41,919 --> 00:05:43,759
duplication is commonly turned on in

173
00:05:43,759 --> 00:05:45,120
hosting in cloud hosting providers

174
00:05:45,120 --> 00:05:46,880
because because they can then fit more

175
00:05:46,880 --> 00:05:48,720
virtual machines on the same physical

176
00:05:48,720 --> 00:05:50,639
machine

177
00:05:50,639 --> 00:05:53,840
so number one memory duplication

178
00:05:54,479 --> 00:05:57,360
so the green block indicates a victim vm

179
00:05:57,360 --> 00:05:59,680
the red block indicates an attacker vm

180
00:05:59,680 --> 00:06:02,479
the arrows indicate uh

181
00:06:02,479 --> 00:06:04,160
mapping so virtual virtual memory

182
00:06:04,160 --> 00:06:05,520
mapping from this virtual address space

183
00:06:05,520 --> 00:06:07,520
to a physical address space so this

184
00:06:07,520 --> 00:06:09,120
normally if you're an attacker and

185
00:06:09,120 --> 00:06:10,319
you're a victim

186
00:06:10,319 --> 00:06:11,919
you're both in kvm you both have your

187
00:06:11,919 --> 00:06:13,600
own set of physical memory that you're

188
00:06:13,600 --> 00:06:15,360
about to use that's mapped to physical

189
00:06:15,360 --> 00:06:17,360
memory

190
00:06:17,360 --> 00:06:19,280
and the attacker has a set of physical

191
00:06:19,280 --> 00:06:20,479
memory the victim has a set of physical

192
00:06:20,479 --> 00:06:22,240
memory and never the twin shall meet you

193
00:06:22,240 --> 00:06:24,400
know you can never uh

194
00:06:24,400 --> 00:06:26,160
the isolation is is it's just because

195
00:06:26,160 --> 00:06:27,520
the mmu maps

196
00:06:27,520 --> 00:06:28,240
uh

197
00:06:28,240 --> 00:06:29,680
you're set to one page and the other set

198
00:06:29,680 --> 00:06:31,520
to the other pages you can and you can't

199
00:06:31,520 --> 00:06:34,080
touch but if memory duplication is on

200
00:06:34,080 --> 00:06:35,840
there's an os feature to save memory

201
00:06:35,840 --> 00:06:38,479
that means that every page

202
00:06:38,479 --> 00:06:42,160
all pages that have identical contents

203
00:06:42,160 --> 00:06:43,680
can be merged into a single physical

204
00:06:43,680 --> 00:06:46,160
page and then mapped multiple times so

205
00:06:46,160 --> 00:06:47,680
imagine i'm storing a copy of the mona

206
00:06:47,680 --> 00:06:49,039
lisa and the victim is storing a copy of

207
00:06:49,039 --> 00:06:50,479
the mona lisa i'm the attacker of course

208
00:06:50,479 --> 00:06:51,919
this scenario

209
00:06:51,919 --> 00:06:53,440
and we both have a copy of the mona lisa

210
00:06:53,440 --> 00:06:54,800
in physical memory then the kernel same

211
00:06:54,800 --> 00:06:56,800
page merging will notice this merge it

212
00:06:56,800 --> 00:06:58,800
to a single copy

213
00:06:58,800 --> 00:07:00,880
and map it twice to the same copy so

214
00:07:00,880 --> 00:07:02,160
that saves one page remember this can

215
00:07:02,160 --> 00:07:04,639
happen many times so this is way that

216
00:07:04,639 --> 00:07:06,720
you can save quite a lot of memory if

217
00:07:06,720 --> 00:07:08,960
you're a cloud host

218
00:07:08,960 --> 00:07:12,000
now if the attacker goes and faces the

219
00:07:12,000 --> 00:07:14,479
mona lisa by putting a mustache on her

220
00:07:14,479 --> 00:07:16,560
right there of course you have to

221
00:07:16,560 --> 00:07:19,280
re-duplicate this page again the the

222
00:07:19,280 --> 00:07:21,280
pages are mapped copy on the right so

223
00:07:21,280 --> 00:07:22,800
that as soon as this white happens this

224
00:07:22,800 --> 00:07:24,000
will trap

225
00:07:24,000 --> 00:07:25,599
to the operating system that'll allocate

226
00:07:25,599 --> 00:07:27,120
a new page and we duplicate the page

227
00:07:27,120 --> 00:07:28,800
that the facebook only happens in the

228
00:07:28,800 --> 00:07:30,400
copy of the attacker and not in the

229
00:07:30,400 --> 00:07:33,360
victim so this makes it not only you

230
00:07:33,360 --> 00:07:34,800
know semantically sound but of course

231
00:07:34,800 --> 00:07:36,319
also it would be a security disaster if

232
00:07:36,319 --> 00:07:38,319
this were any other way

233
00:07:38,319 --> 00:07:40,560
now row hammer is a glitch

234
00:07:40,560 --> 00:07:43,919
that happens in many ddr3 ram modules at

235
00:07:43,919 --> 00:07:45,280
least

236
00:07:45,280 --> 00:07:47,360
and it relies on the fact that whenever

237
00:07:47,360 --> 00:07:49,599
you access a row in memory so you see

238
00:07:49,599 --> 00:07:53,039
this row of cells i minus 1

239
00:07:53,039 --> 00:07:54,879
the charge has to come out of that row

240
00:07:54,879 --> 00:07:56,800
and be put into the row buffer now that

241
00:07:56,800 --> 00:07:58,160
row is recharged of course that the

242
00:07:58,160 --> 00:08:00,879
contents don't leak but

243
00:08:00,879 --> 00:08:02,960
in dram also the neighboring rows are

244
00:08:02,960 --> 00:08:05,199
going to leak a little bit of charge and

245
00:08:05,199 --> 00:08:07,120
if that happens fast enough if we store

246
00:08:07,120 --> 00:08:09,039
a copy of the mona lisa in row i in the

247
00:08:09,039 --> 00:08:11,680
center row in the victim row so to speak

248
00:08:11,680 --> 00:08:13,759
the charge will leak out of it slowly

249
00:08:13,759 --> 00:08:15,680
slowly but surely slowly but surely

250
00:08:15,680 --> 00:08:17,440
sometimes this will hit and sometimes so

251
00:08:17,440 --> 00:08:19,919
much charge will leak that a bit will

252
00:08:19,919 --> 00:08:20,960
flip

253
00:08:20,960 --> 00:08:22,160
and the mona lisa has this awful

254
00:08:22,160 --> 00:08:23,599
defacement

255
00:08:23,599 --> 00:08:25,039
who would do this to the mona lisa it's

256
00:08:25,039 --> 00:08:27,039
really uh outrage

257
00:08:27,039 --> 00:08:29,520
really oh my god

258
00:08:29,520 --> 00:08:30,560
so what you know earlier in the

259
00:08:30,560 --> 00:08:31,919
australian example we had a moustache on

260
00:08:31,919 --> 00:08:34,479
the mona lisa you know so that could be

261
00:08:34,479 --> 00:08:36,399
and the effect of row hammer it depends

262
00:08:36,399 --> 00:08:38,000
on which parts of physical memory x if

263
00:08:38,000 --> 00:08:39,120
you have if you access one part of

264
00:08:39,120 --> 00:08:40,559
physical memory you get a flip here if

265
00:08:40,559 --> 00:08:41,839
you access another part we get a flip

266
00:08:41,839 --> 00:08:43,839
there we call this templating because

267
00:08:43,839 --> 00:08:46,080
we're looking for where can we flip bits

268
00:08:46,080 --> 00:08:48,160
it's very hardware dependent so we have

269
00:08:48,160 --> 00:08:50,240
to test this out to make it reliable so

270
00:08:50,240 --> 00:08:52,240
if we do another part of physical memory

271
00:08:52,240 --> 00:08:54,399
then what happens we do it read read

272
00:08:54,399 --> 00:08:56,240
read read read read and then we get this

273
00:08:56,240 --> 00:08:57,680
another bit flips and then we get this

274
00:08:57,680 --> 00:08:59,279
defacement of the models which is also

275
00:08:59,279 --> 00:09:00,880
an outrage

276
00:09:00,880 --> 00:09:02,320
but we're looking for the mustache so we

277
00:09:02,320 --> 00:09:03,920
try another piece of physical memory and

278
00:09:03,920 --> 00:09:04,959
then we

279
00:09:04,959 --> 00:09:07,360
read read read read read and then we get

280
00:09:07,360 --> 00:09:09,200
a mustache we get the third flip we know

281
00:09:09,200 --> 00:09:10,320
we have to use that piece of physical

282
00:09:10,320 --> 00:09:11,360
memory

283
00:09:11,360 --> 00:09:14,240
to get a mustache on the mona lisa

284
00:09:14,240 --> 00:09:16,080
normally in normal operation you won't

285
00:09:16,080 --> 00:09:17,680
see this very often because the cpu will

286
00:09:17,680 --> 00:09:18,959
cache all this data so the reads might

287
00:09:18,959 --> 00:09:20,560
happen from the same dna but if the dram

288
00:09:20,560 --> 00:09:22,480
is hit repeatedly in the same way that's

289
00:09:22,480 --> 00:09:25,600
how the rehearsal can happen

290
00:09:26,320 --> 00:09:28,240
now put the two together and then you

291
00:09:28,240 --> 00:09:29,760
start to see how how flip feng shui

292
00:09:29,760 --> 00:09:31,120
works

293
00:09:31,120 --> 00:09:33,040
i've written a copy of the mona lisa as

294
00:09:33,040 --> 00:09:36,240
an attacker in my vm memory the victim

295
00:09:36,240 --> 00:09:38,240
has written a copy of the mona lisa in

296
00:09:38,240 --> 00:09:39,760
in their memory the operating system has

297
00:09:39,760 --> 00:09:41,600
noticed this is the same content so at

298
00:09:41,600 --> 00:09:42,800
the physical level it's going to merge

299
00:09:42,800 --> 00:09:45,440
the two and map both copies

300
00:09:45,440 --> 00:09:46,959
into the to the physical page to the

301
00:09:46,959 --> 00:09:49,440
same physical page as an attacker i can

302
00:09:49,440 --> 00:09:50,959
make sure

303
00:09:50,959 --> 00:09:53,040
that the victim uses my physical memory

304
00:09:53,040 --> 00:09:55,120
we exploit properties of linux ksm to do

305
00:09:55,120 --> 00:09:56,160
this

306
00:09:56,160 --> 00:09:57,920
and

307
00:09:57,920 --> 00:09:59,519
that means that if i do row hammer in

308
00:09:59,519 --> 00:10:01,839
the attacker vm the same change that

309
00:10:01,839 --> 00:10:03,120
happened before with the bit flip will

310
00:10:03,120 --> 00:10:05,040
happen again with this page

311
00:10:05,040 --> 00:10:06,240
and that's how we can control the

312
00:10:06,240 --> 00:10:07,839
location

313
00:10:07,839 --> 00:10:09,279
and control the reliability of row

314
00:10:09,279 --> 00:10:10,800
hammer by

315
00:10:10,800 --> 00:10:12,399
performing raw hammer in the attacker

316
00:10:12,399 --> 00:10:13,600
now we get the mustache that we wanted

317
00:10:13,600 --> 00:10:15,200
we'll also have the physical memory and

318
00:10:15,200 --> 00:10:17,040
therefore also in the victim so

319
00:10:17,040 --> 00:10:18,800
significantly this breaks copy on right

320
00:10:18,800 --> 00:10:20,320
it doesn't happen to the cpu so it's not

321
00:10:20,320 --> 00:10:22,160
trapped it's not reduplicated and

322
00:10:22,160 --> 00:10:23,760
therefore this change will propagate and

323
00:10:23,760 --> 00:10:26,959
the isolation between vms is broken

324
00:10:26,959 --> 00:10:29,440
so okay probably the rsa which has

325
00:10:29,440 --> 00:10:30,640
nothing to do with flipping she but does

326
00:10:30,640 --> 00:10:31,680
have something to do with the example

327
00:10:31,680 --> 00:10:33,200
attacks two example attacks we're gonna

328
00:10:33,200 --> 00:10:37,519
show you are open ssh and gpg and they

329
00:10:37,519 --> 00:10:39,200
these attacks do rely on properties of

330
00:10:39,200 --> 00:10:41,279
rsa to uh

331
00:10:41,279 --> 00:10:42,800
to make this work

332
00:10:42,800 --> 00:10:45,440
rsa is a just to read very briefly rsa

333
00:10:45,440 --> 00:10:48,000
is a public key crypto system that means

334
00:10:48,000 --> 00:10:50,240
it's very very convenient because if you

335
00:10:50,240 --> 00:10:51,200
uh

336
00:10:51,200 --> 00:10:53,680
encrypt a message with a public key

337
00:10:53,680 --> 00:10:55,440
you have to decrypt that with the

338
00:10:55,440 --> 00:10:56,959
private key if decrypt the ciphertext

339
00:10:56,959 --> 00:10:58,320
with the private key that means the

340
00:10:58,320 --> 00:11:00,800
encryption key can be public

341
00:11:00,800 --> 00:11:02,480
hence the name right you don't have the

342
00:11:02,480 --> 00:11:04,720
scheme

343
00:11:04,720 --> 00:11:06,560
distribution problem anymore

344
00:11:06,560 --> 00:11:07,839
the private key you have to keep private

345
00:11:07,839 --> 00:11:08,880
because that's what can decrypt your

346
00:11:08,880 --> 00:11:10,560
messages that's also what can sign

347
00:11:10,560 --> 00:11:12,000
messages and anyone who's the public key

348
00:11:12,000 --> 00:11:14,000
can verify the signature now the

349
00:11:14,000 --> 00:11:16,399
properties of rsa depend on the

350
00:11:16,399 --> 00:11:18,560
factorization of the so-called modulus

351
00:11:18,560 --> 00:11:20,640
in rsa modulus by the public key all the

352
00:11:20,640 --> 00:11:22,640
terrific of our say happens modulo a

353
00:11:22,640 --> 00:11:26,160
very big modulus 2000 base 4000 bits

354
00:11:26,160 --> 00:11:27,519
and you compute the private key by

355
00:11:27,519 --> 00:11:28,959
knowing the factorization of the public

356
00:11:28,959 --> 00:11:30,959
key now when you generate key pairs that

357
00:11:30,959 --> 00:11:32,640
happens by construction you generate two

358
00:11:32,640 --> 00:11:33,920
very big primes

359
00:11:33,920 --> 00:11:35,360
you multiply them that's the public key

360
00:11:35,360 --> 00:11:36,560
and because you know the factorization

361
00:11:36,560 --> 00:11:37,839
those two primes you can generate the

362
00:11:37,839 --> 00:11:38,880
private key then you throw out the

363
00:11:38,880 --> 00:11:40,320
factorization the public key becomes

364
00:11:40,320 --> 00:11:42,000
public and nobody can generate the

365
00:11:42,000 --> 00:11:43,200
private key because you can never

366
00:11:43,200 --> 00:11:45,600
factorize such a huge number if you're

367
00:11:45,600 --> 00:11:47,680
not the nsa uh

368
00:11:47,680 --> 00:11:49,760
of 2000 of 2000 bits

369
00:11:49,760 --> 00:11:51,920
but if you corrupt this modulus then it

370
00:11:51,920 --> 00:11:53,519
becomes just another number you get just

371
00:11:53,519 --> 00:11:55,279
another random factorization and it

372
00:11:55,279 --> 00:11:56,399
turns out

373
00:11:56,399 --> 00:11:58,240
oftentimes it's very very easy to

374
00:11:58,240 --> 00:12:00,320
factorize a 2000 bit number if it's not

375
00:12:00,320 --> 00:12:02,079
so carefully constructed and this graph

376
00:12:02,079 --> 00:12:04,240
indicates that if you have 50 possible

377
00:12:04,240 --> 00:12:06,480
variants of an rsa modulus the middle

378
00:12:06,480 --> 00:12:09,680
line of 2000 bits this is

379
00:12:09,680 --> 00:12:12,079
an example of sh key size if we have 50

380
00:12:12,079 --> 00:12:13,920
variants we call them templates

381
00:12:13,920 --> 00:12:15,760
50 locations that you can flip a bit

382
00:12:15,760 --> 00:12:17,600
then if you have 50 of them and 50 is

383
00:12:17,600 --> 00:12:20,399
not not many you know within a page

384
00:12:20,399 --> 00:12:22,399
then you're practically sure that you

385
00:12:22,399 --> 00:12:24,480
can factorize it within an hour and in

386
00:12:24,480 --> 00:12:26,000
practice we've seen

387
00:12:26,000 --> 00:12:27,279
it really just takes a few minutes to

388
00:12:27,279 --> 00:12:30,160
find a flip that you can factorize

389
00:12:30,160 --> 00:12:32,240
the modulus of and thereby generate the

390
00:12:32,240 --> 00:12:33,600
corresponding private key because just

391
00:12:33,600 --> 00:12:34,560
to take a step back that's what we're

392
00:12:34,560 --> 00:12:35,839
trying to do here we're trying to change

393
00:12:35,839 --> 00:12:38,079
the public key that someone trusts to

394
00:12:38,079 --> 00:12:40,240
authenticate something we're changing it

395
00:12:40,240 --> 00:12:41,839
and then generating a private key so

396
00:12:41,839 --> 00:12:43,440
that we can fake it authentication

397
00:12:43,440 --> 00:12:45,360
because it's going to trust the modified

398
00:12:45,360 --> 00:12:48,560
private key publicly

399
00:12:49,279 --> 00:12:50,959
okay so just to recap

400
00:12:50,959 --> 00:12:53,600
we have we are able now using this

401
00:12:53,600 --> 00:12:55,760
technique flip feng shui to corrupt a

402
00:12:55,760 --> 00:12:57,519
publicly that someone's trusting

403
00:12:57,519 --> 00:13:01,040
trusting to verify signatures

404
00:13:01,040 --> 00:13:02,320
and

405
00:13:02,320 --> 00:13:04,399
generate a corresponding private key so

406
00:13:04,399 --> 00:13:05,440
we can

407
00:13:05,440 --> 00:13:07,120
fake signatures and we can fake that as

408
00:13:07,120 --> 00:13:09,200
such authentication this authorized keys

409
00:13:09,200 --> 00:13:11,040
file ssh has many kind of authentication

410
00:13:11,040 --> 00:13:12,480
systems one of the most common one is

411
00:13:12,480 --> 00:13:14,000
the password or maybe nowadays the most

412
00:13:14,000 --> 00:13:18,320
common one is the rsa key system

413
00:13:18,320 --> 00:13:21,600
uh you if you generate an sh ssh

414
00:13:21,600 --> 00:13:23,519
key pair to generate public key and

415
00:13:23,519 --> 00:13:24,720
private key

416
00:13:24,720 --> 00:13:25,920
public key doesn't have to be kept

417
00:13:25,920 --> 00:13:27,680
secret by the very beautiful nature of

418
00:13:27,680 --> 00:13:29,440
rsa so

419
00:13:29,440 --> 00:13:32,240
this thing here is a base64 encoding of

420
00:13:32,240 --> 00:13:35,200
a rsa public key

421
00:13:35,200 --> 00:13:36,240
now

422
00:13:36,240 --> 00:13:38,560
if you can prove if you put that text in

423
00:13:38,560 --> 00:13:39,839
your home directory in your authorized

424
00:13:39,839 --> 00:13:41,839
keys file and you can prove the fsh

425
00:13:41,839 --> 00:13:43,120
server that you have the corresponding

426
00:13:43,120 --> 00:13:44,639
private key you can log in because you

427
00:13:44,639 --> 00:13:46,000
proved your identity you're the only

428
00:13:46,000 --> 00:13:47,920
person who has the private key right

429
00:13:47,920 --> 00:13:50,800
thank you for noting sir

430
00:13:51,040 --> 00:13:52,880
so and that's where you can see where

431
00:13:52,880 --> 00:13:54,399
this is going right if we can flip one

432
00:13:54,399 --> 00:13:56,160
of these bits and the base64 decoding

433
00:13:56,160 --> 00:13:58,000
corresponds to a new modulus and we can

434
00:13:58,000 --> 00:13:59,360
compute the corresponding private key

435
00:13:59,360 --> 00:14:00,880
that says server is going to let us in

436
00:14:00,880 --> 00:14:02,000
it's according to the rules there's no

437
00:14:02,000 --> 00:14:04,720
bug at play here

438
00:14:04,720 --> 00:14:06,079
so how does this work then we write all

439
00:14:06,079 --> 00:14:08,639
thrust keys files in the attacker memory

440
00:14:08,639 --> 00:14:10,720
because we could guess this right we can

441
00:14:10,720 --> 00:14:11,600
go to

442
00:14:11,600 --> 00:14:13,040
as an example because authorized keys

443
00:14:13,040 --> 00:14:14,560
followed by the design of this whole

444
00:14:14,560 --> 00:14:16,480
system are not to be

445
00:14:16,480 --> 00:14:18,480
kept secret we can go to a github github

446
00:14:18,480 --> 00:14:21,519
publishes all ssh public keys

447
00:14:21,519 --> 00:14:22,720
that users upload to them to

448
00:14:22,720 --> 00:14:23,920
authenticate themselves with because

449
00:14:23,920 --> 00:14:25,680
it's safe it's supposed to be safe so

450
00:14:25,680 --> 00:14:26,880
the attacker writes these authorized

451
00:14:26,880 --> 00:14:29,040
keys files in memory

452
00:14:29,040 --> 00:14:31,760
we then rely on the host to merge these

453
00:14:31,760 --> 00:14:33,920
two things to physical memory we find a

454
00:14:33,920 --> 00:14:36,560
flip that will properly decode to a new

455
00:14:36,560 --> 00:14:38,639
module that we can factorize and that

456
00:14:38,639 --> 00:14:40,000
means we can generate a new private key

457
00:14:40,000 --> 00:14:42,000
it looks like this

458
00:14:42,000 --> 00:14:43,600
that will means of course it also

459
00:14:43,600 --> 00:14:44,880
happens in physical memory because

460
00:14:44,880 --> 00:14:46,560
that's where stuff is stored and

461
00:14:46,560 --> 00:14:47,760
therefore it happens in the victim and

462
00:14:47,760 --> 00:14:50,000
that's will let us log in with our newly

463
00:14:50,000 --> 00:14:52,880
generated private key

464
00:14:52,959 --> 00:14:54,880
just to give you an idea of how reliable

465
00:14:54,880 --> 00:14:56,320
and how fast this is

466
00:14:56,320 --> 00:14:58,880
uh half this is a

467
00:14:58,880 --> 00:15:00,959
cdf of a combination of 300 iterated

468
00:15:00,959 --> 00:15:03,599
attacks that we did

469
00:15:04,399 --> 00:15:05,920
you can see that by

470
00:15:05,920 --> 00:15:07,120
about six minutes more than half of them

471
00:15:07,120 --> 00:15:09,199
were done by 12 minutes uh all of this

472
00:15:09,199 --> 00:15:10,800
customer was down to 84 were successful

473
00:15:10,800 --> 00:15:12,880
the first time if we try again we can

474
00:15:12,880 --> 00:15:16,480
we'll get over 95 reliability

475
00:15:16,560 --> 00:15:18,880
okay this next one is also an example

476
00:15:18,880 --> 00:15:22,079
attack it's uh an attack that relies on

477
00:15:22,079 --> 00:15:24,079
uh apt so apt is this package management

478
00:15:24,079 --> 00:15:25,760
system widely deployed in debian and

479
00:15:25,760 --> 00:15:28,160
derivatives like ubuntu

480
00:15:28,160 --> 00:15:30,160
and it's authenticates its packages

481
00:15:30,160 --> 00:15:32,399
using gpg signatures it relies on

482
00:15:32,399 --> 00:15:34,240
sources.list

483
00:15:34,240 --> 00:15:36,560
to find out where packages are to be

484
00:15:36,560 --> 00:15:38,839
retrieved and recite it and it relies on

485
00:15:38,839 --> 00:15:41,920
trusted.jpg this key ring of gpg public

486
00:15:41,920 --> 00:15:43,920
keys

487
00:15:43,920 --> 00:15:44,720
that

488
00:15:44,720 --> 00:15:45,680
it

489
00:15:45,680 --> 00:15:48,160
allows to authenticate packages the

490
00:15:48,160 --> 00:15:50,240
authenticity and their integrity when

491
00:15:50,240 --> 00:15:52,800
they are downloaded now

492
00:15:52,800 --> 00:15:55,759
if we the gpg updates attack that we uh

493
00:15:55,759 --> 00:15:57,920
subvert this authentication system uh

494
00:15:57,920 --> 00:16:00,480
with this authorization system

495
00:16:00,480 --> 00:16:02,720
is that we do two bit flips instead of

496
00:16:02,720 --> 00:16:05,040
one one is in the sources.list file so

497
00:16:05,040 --> 00:16:06,959
that we can change the domain name in

498
00:16:06,959 --> 00:16:09,920
say ubuntu.com to ubun vu.com you know

499
00:16:09,920 --> 00:16:11,519
this is this this happened in our

500
00:16:11,519 --> 00:16:13,519
example attack

501
00:16:13,519 --> 00:16:14,959
so that that means that the victim will

502
00:16:14,959 --> 00:16:16,720
go to our malicious repository hosted at

503
00:16:16,720 --> 00:16:18,959
ubunfu.com we have this domain by the

504
00:16:18,959 --> 00:16:20,480
way and we have more of these domains

505
00:16:20,480 --> 00:16:22,320
and they are for sale to interested

506
00:16:22,320 --> 00:16:23,519
parties

507
00:16:23,519 --> 00:16:25,600
see me after the talk and you know first

508
00:16:25,600 --> 00:16:27,440
come first serve

509
00:16:27,440 --> 00:16:29,759
um

510
00:16:30,079 --> 00:16:32,720
and that means that this uh totally

511
00:16:32,720 --> 00:16:34,480
legitimately this victim will go to our

512
00:16:34,480 --> 00:16:36,639
malicious repository you know

513
00:16:36,639 --> 00:16:38,079
uh and that's

514
00:16:38,079 --> 00:16:39,199
and we're not doing playing any fine

515
00:16:39,199 --> 00:16:40,639
tricks with dns or messing around with

516
00:16:40,639 --> 00:16:41,759
network traffic like that we're just

517
00:16:41,759 --> 00:16:43,199
saying this is the place you go to and

518
00:16:43,199 --> 00:16:44,800
then the victim goes to there

519
00:16:44,800 --> 00:16:46,639
then trust in if you bit if you flip a

520
00:16:46,639 --> 00:16:48,480
bit in trusted or gpg that means the

521
00:16:48,480 --> 00:16:50,320
modulus of that public key that it

522
00:16:50,320 --> 00:16:53,920
trusts to generate or verify i mean

523
00:16:53,920 --> 00:16:56,720
signatures of real authentic packages

524
00:16:56,720 --> 00:16:59,199
also changes and if we can factorize

525
00:16:59,199 --> 00:17:00,079
that

526
00:17:00,079 --> 00:17:01,920
public key modulus and generate a new

527
00:17:01,920 --> 00:17:04,480
corresponding private key then we can

528
00:17:04,480 --> 00:17:06,400
generate then we can

529
00:17:06,400 --> 00:17:08,240
not even fake we create signatures

530
00:17:08,240 --> 00:17:09,760
totally authentic signatures with a new

531
00:17:09,760 --> 00:17:12,400
private key that that the new public key

532
00:17:12,400 --> 00:17:16,000
that's changed will verify uh against

533
00:17:16,000 --> 00:17:17,679
now these bits are fourth out these keys

534
00:17:17,679 --> 00:17:18,959
are 4000 bits so it's a little bit

535
00:17:18,959 --> 00:17:20,319
harder than with ssh you know we can

536
00:17:20,319 --> 00:17:21,919
only do five percent

537
00:17:21,919 --> 00:17:23,280
but still that's more than enough bit

538
00:17:23,280 --> 00:17:24,400
flips to make this attack work

539
00:17:24,400 --> 00:17:25,839
realistically

540
00:17:25,839 --> 00:17:28,079
we rely only on information that's part

541
00:17:28,079 --> 00:17:30,840
of a stock ubuntu or debian

542
00:17:30,840 --> 00:17:33,200
uh install right sources that listen to

543
00:17:33,200 --> 00:17:35,440
us or gpg are not expected to be

544
00:17:35,440 --> 00:17:37,600
very different over different installs

545
00:17:37,600 --> 00:17:38,559
so

546
00:17:38,559 --> 00:17:40,320
these assumptions are even weaker you

547
00:17:40,320 --> 00:17:41,919
might say now i have a video demo of

548
00:17:41,919 --> 00:17:45,080
this happening

549
00:17:51,280 --> 00:17:52,160
um

550
00:17:52,160 --> 00:17:53,600
i have a video of this happening i'm

551
00:17:53,600 --> 00:17:55,200
going to show you something now i'm

552
00:17:55,200 --> 00:17:57,440
going to and this video the whole attack

553
00:17:57,440 --> 00:17:59,120
happens in 20 minutes it's heavily cut

554
00:17:59,120 --> 00:18:00,320
just to show the interesting bits

555
00:18:00,320 --> 00:18:01,679
because there are long periods of row

556
00:18:01,679 --> 00:18:03,919
hammering and deduplication i'm going to

557
00:18:03,919 --> 00:18:07,200
talk over it

558
00:18:08,480 --> 00:18:10,000
to show you what's going on i hope you

559
00:18:10,000 --> 00:18:12,080
can read the text if not i'll uh i'll

560
00:18:12,080 --> 00:18:15,360
read it out okay now this uh video is

561
00:18:15,360 --> 00:18:16,480
going to show you

562
00:18:16,480 --> 00:18:18,880
uh x terms actually going to appear here

563
00:18:18,880 --> 00:18:21,039
and here and here and here and here

564
00:18:21,039 --> 00:18:23,600
and we're going to boot the vms

565
00:18:23,600 --> 00:18:25,520
our attacker and uh and the victor now

566
00:18:25,520 --> 00:18:27,200
here is the victim this victim is there

567
00:18:27,200 --> 00:18:28,799
just doing a totally normal apt-get

568
00:18:28,799 --> 00:18:29,760
update

569
00:18:29,760 --> 00:18:32,200
and an abs get upgrade okay

570
00:18:32,200 --> 00:18:35,840
[Music]

571
00:18:35,840 --> 00:18:36,430
all right

572
00:18:36,430 --> 00:18:40,720
[Music]

573
00:18:40,720 --> 00:18:42,240
so first we're going to change the

574
00:18:42,240 --> 00:18:43,919
location of source.list this is

575
00:18:43,919 --> 00:18:45,200
happening on the left we're doing row

576
00:18:45,200 --> 00:18:47,280
hammer here we're doing right here and

577
00:18:47,280 --> 00:18:48,960
this makes us change the location from

578
00:18:48,960 --> 00:18:51,360
where we get the repository uh the

579
00:18:51,360 --> 00:18:54,080
repository list

580
00:18:54,080 --> 00:18:55,919
and as soon as we found this bit flip

581
00:18:55,919 --> 00:18:57,840
we're going to send the attacker

582
00:18:57,840 --> 00:18:59,520
to a malicious repository here is our

583
00:18:59,520 --> 00:19:01,200
malicious repository no activities

584
00:19:01,200 --> 00:19:02,480
happen there yet because this bit flip

585
00:19:02,480 --> 00:19:04,080
hasn't happened yet so let me show you

586
00:19:04,080 --> 00:19:07,360
what happens when that bit flip is found

587
00:19:07,360 --> 00:19:09,039
we wait for the duplication to happen

588
00:19:09,039 --> 00:19:10,880
that bit has flipped

589
00:19:10,880 --> 00:19:13,280
now if the victim does a visit to the

590
00:19:13,280 --> 00:19:15,039
malicious repository again we're going

591
00:19:15,039 --> 00:19:16,880
to show you that's going to happen now

592
00:19:16,880 --> 00:19:19,120
we do another update

593
00:19:19,120 --> 00:19:20,640
and now we see activity on our malicious

594
00:19:20,640 --> 00:19:22,640
repository and we're also going to do an

595
00:19:22,640 --> 00:19:24,400
upgrade but wait

596
00:19:24,400 --> 00:19:26,080
the signature isn't verified right the

597
00:19:26,080 --> 00:19:28,320
gpg is saying no we can't we kind of saw

598
00:19:28,320 --> 00:19:29,840
this package because it's not signed

599
00:19:29,840 --> 00:19:31,600
it's not signed by any any key that we

600
00:19:31,600 --> 00:19:35,760
trust if you upgrade no upgrades happen

601
00:19:35,760 --> 00:19:38,320
so now we have to bit flip

602
00:19:38,320 --> 00:19:40,320
a flip in the gpg key ring so we have to

603
00:19:40,320 --> 00:19:42,160
change the public key in gpeg so that

604
00:19:42,160 --> 00:19:43,679
the corresponding private key that we

605
00:19:43,679 --> 00:19:45,760
pre-computed is going to be trusted it's

606
00:19:45,760 --> 00:19:47,840
going to start to be trusted so will

607
00:19:47,840 --> 00:19:49,520
that happen in time for this

608
00:19:49,520 --> 00:19:52,559
presentation to end

609
00:19:52,559 --> 00:19:54,640
who knows

610
00:19:54,640 --> 00:19:56,400
oh the bit is split so now we can use a

611
00:19:56,400 --> 00:19:57,840
new private key that we've generated to

612
00:19:57,840 --> 00:19:59,679
sign

613
00:19:59,679 --> 00:20:01,600
this

614
00:20:01,600 --> 00:20:02,960
new malicious package we're going to

615
00:20:02,960 --> 00:20:04,400
back doors here we're going to back your

616
00:20:04,400 --> 00:20:07,520
core utils

617
00:20:07,520 --> 00:20:08,880
we can sign it

618
00:20:08,880 --> 00:20:11,280
you're preparing the repository

619
00:20:11,280 --> 00:20:12,880
oh my goodness if we're going to do an

620
00:20:12,880 --> 00:20:15,600
update now what's going to happen

621
00:20:15,600 --> 00:20:16,960
which package are we going to affect

622
00:20:16,960 --> 00:20:18,960
cointails

623
00:20:18,960 --> 00:20:20,960
what happens

624
00:20:20,960 --> 00:20:22,080
but first

625
00:20:22,080 --> 00:20:23,760
how does ls normally work

626
00:20:23,760 --> 00:20:26,080
ls normally works like this

627
00:20:26,080 --> 00:20:27,360
now what happens

628
00:20:27,360 --> 00:20:28,480
when you do the update this is going to

629
00:20:28,480 --> 00:20:29,760
work it's going to accept the key it's

630
00:20:29,760 --> 00:20:32,799
going to accept the signature

631
00:20:33,440 --> 00:20:35,679
yes it's going to accept the signature

632
00:20:35,679 --> 00:20:39,670
ls is backdoored thank you very much

633
00:20:39,670 --> 00:20:42,210
[Applause]

634
00:20:42,210 --> 00:20:45,440
[Music]

635
00:20:46,400 --> 00:20:49,720
no bugs

636
00:20:51,280 --> 00:20:52,400
okay

637
00:20:52,400 --> 00:20:53,919
what has happened with this work since

638
00:20:53,919 --> 00:20:54,880
then

639
00:20:54,880 --> 00:20:56,720
we have uh cooperated with the dutch

640
00:20:56,720 --> 00:20:58,880
national cyber security center

641
00:20:58,880 --> 00:21:01,679
to do disclosure and notification on

642
00:21:01,679 --> 00:21:03,120
this this problem so that all this work

643
00:21:03,120 --> 00:21:05,520
has been uh kept private until today the

644
00:21:05,520 --> 00:21:07,840
ncsc has coordinated with other cyber

645
00:21:07,840 --> 00:21:11,520
security centers in other countries

646
00:21:11,520 --> 00:21:13,679
and affected and notified affected

647
00:21:13,679 --> 00:21:15,679
parties

648
00:21:15,679 --> 00:21:16,960
of this work

649
00:21:16,960 --> 00:21:19,520
so they've notified red hat oracle zen

650
00:21:19,520 --> 00:21:22,000
vmware those are uh hypervisor vendors

651
00:21:22,000 --> 00:21:23,760
that could be interested uh to know this

652
00:21:23,760 --> 00:21:25,840
ahead of time

653
00:21:25,840 --> 00:21:28,480
uh also notified of debian ubuntu and

654
00:21:28,480 --> 00:21:30,720
also the the maintainers of openstack

655
00:21:30,720 --> 00:21:32,240
gpg so you can see sort of this is the

656
00:21:32,240 --> 00:21:34,480
range of the software stack that are

657
00:21:34,480 --> 00:21:36,480
affected by this and could potentially

658
00:21:36,480 --> 00:21:38,559
mitigate this problem so all of these

659
00:21:38,559 --> 00:21:40,240
will be notified all of them have given

660
00:21:40,240 --> 00:21:44,400
uh the inappropriate response

661
00:21:44,400 --> 00:21:45,840
also some hosting companies have been

662
00:21:45,840 --> 00:21:47,919
have been notified with ncsc then csc

663
00:21:47,919 --> 00:21:50,240
put together a fact sheet

664
00:21:50,240 --> 00:21:52,960
which is uh available on their site

665
00:21:52,960 --> 00:21:54,799
now about you know be careful about

666
00:21:54,799 --> 00:21:56,960
virtualization and gpg has already

667
00:21:56,960 --> 00:21:59,120
committed uh made a commit that

668
00:21:59,120 --> 00:22:00,799
mitigates this problem for for their

669
00:22:00,799 --> 00:22:03,200
specific application and uh and put that

670
00:22:03,200 --> 00:22:05,840
in mainline

671
00:22:06,720 --> 00:22:07,840
um

672
00:22:07,840 --> 00:22:09,600
ncsc has done an extremely professional

673
00:22:09,600 --> 00:22:11,120
job of this by the way we're grateful

674
00:22:11,120 --> 00:22:14,480
for to them to make this uh the this

675
00:22:14,480 --> 00:22:17,200
disclosure of this information very

676
00:22:17,200 --> 00:22:19,840
very safe

677
00:22:20,960 --> 00:22:22,880
so what is the conclusion we conclude

678
00:22:22,880 --> 00:22:24,880
that flipping chewy is capable of

679
00:22:24,880 --> 00:22:26,880
breaking an extremely powerful

680
00:22:26,880 --> 00:22:28,720
isolation system the hybrid

681
00:22:28,720 --> 00:22:30,720
virtualization provided by the cpu is as

682
00:22:30,720 --> 00:22:32,080
strong as possible

683
00:22:32,080 --> 00:22:34,080
currently there but flip factory breaks

684
00:22:34,080 --> 00:22:35,840
this isolation you can

685
00:22:35,840 --> 00:22:38,400
it was already widely known that

686
00:22:38,400 --> 00:22:40,559
co-hosting vms is a risky proposition

687
00:22:40,559 --> 00:22:41,919
because of all kinds of side channels

688
00:22:41,919 --> 00:22:43,440
we've got cash attacks we've got d-dupe

689
00:22:43,440 --> 00:22:45,679
attacks and so on but this

690
00:22:45,679 --> 00:22:47,600
d-dupe attack don't forget

691
00:22:47,600 --> 00:22:49,200
it's not about leaking information it's

692
00:22:49,200 --> 00:22:50,960
about writing information so this is the

693
00:22:50,960 --> 00:22:53,600
first attack as far as we know

694
00:22:53,600 --> 00:22:55,679
that actually uh uses the duplication

695
00:22:55,679 --> 00:22:57,679
not as a information leaking vector but

696
00:22:57,679 --> 00:23:00,240
as a information manipulation vector

697
00:23:00,240 --> 00:23:01,679
now the very straightforward mitigation

698
00:23:01,679 --> 00:23:03,120
that we see simply disable memory

699
00:23:03,120 --> 00:23:05,039
duplication on machines that have

700
00:23:05,039 --> 00:23:08,320
mutually untrusting vms or other parties

701
00:23:08,320 --> 00:23:10,240
on it so if you'd like more information

702
00:23:10,240 --> 00:23:11,440
about this work please go to this

703
00:23:11,440 --> 00:23:12,880
project page

704
00:23:12,880 --> 00:23:13,679
or

705
00:23:13,679 --> 00:23:16,240
or follow up with me

706
00:23:16,240 --> 00:23:17,679
or this team with

707
00:23:17,679 --> 00:23:19,200
coffee in my case

708
00:23:19,200 --> 00:23:21,890
thank you for your attention

709
00:23:21,890 --> 00:23:25,019
[Music]

710
00:23:27,039 --> 00:23:28,640
it's a really really cool attack so we

711
00:23:28,640 --> 00:23:31,440
have time for a few questions

712
00:23:31,440 --> 00:23:33,039
i guess to get started maybe i'll ask a

713
00:23:33,039 --> 00:23:34,960
question first so you gave an example of

714
00:23:34,960 --> 00:23:36,559
an attack on rsa

715
00:23:36,559 --> 00:23:37,760
it sounds like the

716
00:23:37,760 --> 00:23:39,440
uh you could also do an attack like this

717
00:23:39,440 --> 00:23:41,520
on uh elliptic curved helmet type

718
00:23:41,520 --> 00:23:42,960
systems where you change the curve that

719
00:23:42,960 --> 00:23:44,880
you're on that's a very good very good

720
00:23:44,880 --> 00:23:46,000
question

721
00:23:46,000 --> 00:23:47,919
for diffie-hellman we that was actually

722
00:23:47,919 --> 00:23:49,840
the first thing we wanted to try but we

723
00:23:49,840 --> 00:23:52,320
found that uh so diffie-hellman

724
00:23:52,320 --> 00:23:53,919
as you may or may not know relies on the

725
00:23:53,919 --> 00:23:55,440
possibility the difficulty not of

726
00:23:55,440 --> 00:23:56,880
factorizing but of the discrete log

727
00:23:56,880 --> 00:23:59,200
problem now but the algorithms for

728
00:23:59,200 --> 00:24:00,799
solving this discrete log problem even

729
00:24:00,799 --> 00:24:02,480
if you know the factorization of the

730
00:24:02,480 --> 00:24:05,200
group modulus are

731
00:24:05,200 --> 00:24:07,600
less sophisticated i would say or less

732
00:24:07,600 --> 00:24:09,679
accessible to non-cryptographers maybe

733
00:24:09,679 --> 00:24:11,600
so that these uh

734
00:24:11,600 --> 00:24:13,600
that becomes much harder much faster

735
00:24:13,600 --> 00:24:15,360
given the same modulus as far as we've

736
00:24:15,360 --> 00:24:18,240
investigated so far we do think we we

737
00:24:18,240 --> 00:24:20,000
definitely know this is possible that we

738
00:24:20,000 --> 00:24:21,279
know how to do it

739
00:24:21,279 --> 00:24:22,799
but that's something we haven't worked

740
00:24:22,799 --> 00:24:24,559
out totally and it seems like all other

741
00:24:24,559 --> 00:24:26,559
factors being equal it's harder with the

742
00:24:26,559 --> 00:24:28,320
same a modular size actually maybe just

743
00:24:28,320 --> 00:24:29,919
as a suggestion if you look at elliptic

744
00:24:29,919 --> 00:24:31,840
curve dfe hellman if you change the

745
00:24:31,840 --> 00:24:33,679
elliptic curve equation

746
00:24:33,679 --> 00:24:35,360
you get a must you you get a curve

747
00:24:35,360 --> 00:24:36,720
that's not prime and then you can do the

748
00:24:36,720 --> 00:24:37,919
attack

749
00:24:37,919 --> 00:24:39,760
can we talk about that

750
00:24:39,760 --> 00:24:40,880
because i would love to hear how that

751
00:24:40,880 --> 00:24:41,919
works

752
00:24:41,919 --> 00:24:43,600
yeah please other questions

753
00:24:43,600 --> 00:24:45,919
how do you ensure uh page alignment to

754
00:24:45,919 --> 00:24:47,840
force deduplication of for instance the

755
00:24:47,840 --> 00:24:50,320
authorized keys file okay great question

756
00:24:50,320 --> 00:24:51,840
that's

757
00:24:51,840 --> 00:24:53,440
we

758
00:24:53,440 --> 00:24:55,279
we rely on the fact that the authorized

759
00:24:55,279 --> 00:24:56,559
keys file

760
00:24:56,559 --> 00:24:58,720
and part of the reason that we use vms

761
00:24:58,720 --> 00:25:00,080
for this apart from demonstrating this

762
00:25:00,080 --> 00:25:02,080
very strong isolation to be broken this

763
00:25:02,080 --> 00:25:03,520
authorized keys file is in the page

764
00:25:03,520 --> 00:25:06,400
cache of the victim vm so it's not

765
00:25:06,400 --> 00:25:08,400
hanging about in memory well it also is

766
00:25:08,400 --> 00:25:09,440
hanging by the memory but it's also

767
00:25:09,440 --> 00:25:11,120
going to be in the page cache of the

768
00:25:11,120 --> 00:25:12,799
victim so

769
00:25:12,799 --> 00:25:14,640
as soon as that thing is in memory and

770
00:25:14,640 --> 00:25:16,559
we flip it in the page cache then all

771
00:25:16,559 --> 00:25:18,559
future reads of that auth during

772
00:25:18,559 --> 00:25:20,240
authentication will come from the page

773
00:25:20,240 --> 00:25:21,919
cache and therefore be the flipped

774
00:25:21,919 --> 00:25:23,279
version

775
00:25:23,279 --> 00:25:26,320
is that a satisfactory

776
00:25:27,279 --> 00:25:29,279
uh i've answer amazing talk

777
00:25:29,279 --> 00:25:30,880
brilliant result brilliant presentation

778
00:25:30,880 --> 00:25:32,480
um thank you very much i'm a cloud

779
00:25:32,480 --> 00:25:34,240
client i'm not a cloud provider i'm

780
00:25:34,240 --> 00:25:37,520
really worried about my uh vm with ssh

781
00:25:37,520 --> 00:25:39,840
in it what can i do i i'm asking my

782
00:25:39,840 --> 00:25:41,520
cloud provider to turn on the

783
00:25:41,520 --> 00:25:43,360
duplication they're thinking about it

784
00:25:43,360 --> 00:25:45,200
what can i do today

785
00:25:45,200 --> 00:25:46,320
okay that's a great that's a great

786
00:25:46,320 --> 00:25:47,919
question if you asked your cloud fire to

787
00:25:47,919 --> 00:25:49,360
turn off the duplication and did you say

788
00:25:49,360 --> 00:25:50,880
there were dicks about it i'm thinking

789
00:25:50,880 --> 00:25:52,080
about it but

790
00:25:52,080 --> 00:25:53,520
you're thinking about it okay sorry okay

791
00:25:53,520 --> 00:25:54,880
all right

792
00:25:54,880 --> 00:25:56,240
pardon me okay i just assumed that that

793
00:25:56,240 --> 00:25:57,660
would be the answer uh

794
00:25:57,660 --> 00:26:00,159
[Laughter]

795
00:26:00,159 --> 00:26:02,480
um

796
00:26:02,799 --> 00:26:04,240
well they will do this as a cost-saving

797
00:26:04,240 --> 00:26:05,679
measure so

798
00:26:05,679 --> 00:26:06,960
they

799
00:26:06,960 --> 00:26:09,120
you'll force them sort of into different

800
00:26:09,120 --> 00:26:10,640
state space of their business that means

801
00:26:10,640 --> 00:26:11,760
either the price is going to have to go

802
00:26:11,760 --> 00:26:13,039
up if they want to do the if they want

803
00:26:13,039 --> 00:26:16,159
to do the uh effort at all

804
00:26:16,159 --> 00:26:19,200
or or they or they won't do it at all so

805
00:26:19,200 --> 00:26:21,360
yeah so what i think cloud providers the

806
00:26:21,360 --> 00:26:22,559
kind of things cloud products should

807
00:26:22,559 --> 00:26:24,720
offer i think is to host machines is to

808
00:26:24,720 --> 00:26:26,640
offer the fact well either you know you

809
00:26:26,640 --> 00:26:28,320
you get what you pay for which is then

810
00:26:28,320 --> 00:26:30,000
less or maybe it's more expensive option

811
00:26:30,000 --> 00:26:31,840
which says well we'll we will we

812
00:26:31,840 --> 00:26:33,120
guarantee you one machine in which you

813
00:26:33,120 --> 00:26:34,559
host all of your vms or something like

814
00:26:34,559 --> 00:26:35,760
that just so that there are security

815
00:26:35,760 --> 00:26:37,279
boundaries on the same physical hardware

816
00:26:37,279 --> 00:26:40,080
they're not going to do that

817
00:26:40,400 --> 00:26:41,200
that

818
00:26:41,200 --> 00:26:43,600
proves the relevance of this work okay

819
00:26:43,600 --> 00:26:45,120
so actually maybe

820
00:26:45,120 --> 00:26:46,559
would make sense to add error correction

821
00:26:46,559 --> 00:26:48,480
and software yeah so error correction to

822
00:26:48,480 --> 00:26:50,320
memory in software looks like if they

823
00:26:50,320 --> 00:26:53,039
just shot if i just shot the key

824
00:26:53,039 --> 00:26:53,760
you

825
00:26:53,760 --> 00:26:56,159
change the format of the authorized keys

826
00:26:56,159 --> 00:26:58,400
file to add a little hash on it you fix

827
00:26:58,400 --> 00:27:00,320
at least this one absolutely so they're

828
00:27:00,320 --> 00:27:01,919
on on this application they're gonna be

829
00:27:01,919 --> 00:27:04,559
lots of application level mitigations uh

830
00:27:04,559 --> 00:27:06,320
we've uh the open stage guys we've told

831
00:27:06,320 --> 00:27:08,400
the producers that guys about this and

832
00:27:08,400 --> 00:27:09,840
well you know yeah i guess i can say it

833
00:27:09,840 --> 00:27:10,880
they said no we didn't think this

834
00:27:10,880 --> 00:27:13,760
realistic uh the gpg guys

835
00:27:13,760 --> 00:27:15,279
have said this actually to be perfectly

836
00:27:15,279 --> 00:27:17,250
honest they said uh

837
00:27:17,250 --> 00:27:19,120
[Music]

838
00:27:19,120 --> 00:27:21,360
we don't feel like it's sort of our job

839
00:27:21,360 --> 00:27:23,679
to fix this right things just well

840
00:27:23,679 --> 00:27:25,039
it would be a very simple mitigation for

841
00:27:25,039 --> 00:27:26,640
them but

842
00:27:26,640 --> 00:27:28,480
i think they said uh

843
00:27:28,480 --> 00:27:30,080
other the lower levels which are causing

844
00:27:30,080 --> 00:27:32,799
this problem should fix this uh gpg had

845
00:27:32,799 --> 00:27:34,799
had a more productive response

846
00:27:34,799 --> 00:27:35,840
but of course that doesn't solve the

847
00:27:35,840 --> 00:27:36,799
general problem

848
00:27:36,799 --> 00:27:38,640
you could solve the general problem

849
00:27:38,640 --> 00:27:41,279
we think at an os level but that has all

850
00:27:41,279 --> 00:27:43,279
kinds of performance trade-offs

851
00:27:43,279 --> 00:27:46,399
either you waste a lot of memory

852
00:27:46,399 --> 00:27:47,520
because that means you know you can

853
00:27:47,520 --> 00:27:49,440
separate sort of the mem the row hammer

854
00:27:49,440 --> 00:27:51,200
boundaries you can separate that so that

855
00:27:51,200 --> 00:27:53,679
mutually untrusting uh parties cannot uh

856
00:27:53,679 --> 00:27:54,960
find you with roy hammer but that means

857
00:27:54,960 --> 00:27:56,159
you have to wait either way a lot of

858
00:27:56,159 --> 00:27:58,240
memory or partition the memory something

859
00:27:58,240 --> 00:28:00,640
like that that's going to be possible

860
00:28:00,640 --> 00:28:02,640
but there's sort of no way out of it

861
00:28:02,640 --> 00:28:05,200
without sacrificing something okay thank

862
00:28:05,200 --> 00:28:06,559
you thank you

863
00:28:06,559 --> 00:28:07,919
great thanks a lot this is a really good

864
00:28:07,919 --> 00:28:09,200
talk really nice result thank you

865
00:28:09,200 --> 00:28:12,200
everyone

866
00:28:16,640 --> 00:28:18,720
you

