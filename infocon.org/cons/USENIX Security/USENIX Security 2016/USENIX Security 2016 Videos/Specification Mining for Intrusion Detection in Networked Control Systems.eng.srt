1
00:00:10,240 --> 00:00:12,799
welcome everybody i'm marco gazelle i'm

2
00:00:12,799 --> 00:00:14,160
presenting

3
00:00:14,160 --> 00:00:16,079
our work on specification mining for

4
00:00:16,079 --> 00:00:17,920
intrusion detection in network control

5
00:00:17,920 --> 00:00:20,240
system michael laboretos where emmanuel

6
00:00:20,240 --> 00:00:24,480
zambon juan aman robinson frank cargill

7
00:00:24,480 --> 00:00:27,599
i want to start with a few words about

8
00:00:27,599 --> 00:00:30,080
network intuition detection so since the

9
00:00:30,080 --> 00:00:31,840
80s

10
00:00:31,840 --> 00:00:34,160
intrusion detection has evolved you know

11
00:00:34,160 --> 00:00:36,719
a number of different approaches

12
00:00:36,719 --> 00:00:38,320
among them

13
00:00:38,320 --> 00:00:40,320
anomaly based and specification based

14
00:00:40,320 --> 00:00:42,559
intuition detection have gained

15
00:00:42,559 --> 00:00:45,760
attention for the capabilities to detect

16
00:00:45,760 --> 00:00:48,399
previously unforeseen attacks

17
00:00:48,399 --> 00:00:49,680
so

18
00:00:49,680 --> 00:00:52,399
sorry for that

19
00:00:52,800 --> 00:00:55,280
if anomaly-based uses

20
00:00:55,280 --> 00:00:58,559
leverages a learning phase to understand

21
00:00:58,559 --> 00:01:00,719
what a normal behavior is within an

22
00:01:00,719 --> 00:01:03,359
infrastructure specification based usage

23
00:01:03,359 --> 00:01:05,760
uses a different approaches

24
00:01:05,760 --> 00:01:08,080
and instead of a learning phase

25
00:01:08,080 --> 00:01:09,680
we leverage some functional

26
00:01:09,680 --> 00:01:12,159
specifications and documentation to

27
00:01:12,159 --> 00:01:14,960
understand what a normal behavior is and

28
00:01:14,960 --> 00:01:18,240
we use this as a reference point of the

29
00:01:18,240 --> 00:01:19,920
reference to understand what is

30
00:01:19,920 --> 00:01:22,000
malicious

31
00:01:22,000 --> 00:01:24,240
specification based

32
00:01:24,240 --> 00:01:27,119
is a nice approach it's a nice tool but

33
00:01:27,119 --> 00:01:29,600
it has some drawbacks

34
00:01:29,600 --> 00:01:31,920
um

35
00:01:31,920 --> 00:01:34,400
sorry

36
00:01:35,040 --> 00:01:38,240
sorry i cannot do anything

37
00:01:39,040 --> 00:01:41,439
one of them is that not only not all the

38
00:01:41,439 --> 00:01:43,759
infrastructures we want to monitor come

39
00:01:43,759 --> 00:01:45,920
with specifications so of course we need

40
00:01:45,920 --> 00:01:47,920
the specifications to use specification

41
00:01:47,920 --> 00:01:51,439
based on money and intrusion detection

42
00:01:51,439 --> 00:01:54,479
the other drawback is that usually

43
00:01:54,479 --> 00:01:56,000
deploying a specification-based

44
00:01:56,000 --> 00:01:58,320
intuition detection system requires a

45
00:01:58,320 --> 00:02:00,719
substantial human effort so you need a

46
00:02:00,719 --> 00:02:03,680
person that reads the specifications and

47
00:02:03,680 --> 00:02:07,920
then manually write the rules that uh

48
00:02:07,920 --> 00:02:09,280
that are included in the intrusion

49
00:02:09,280 --> 00:02:12,319
detection system so our goal with this

50
00:02:12,319 --> 00:02:14,720
work was to heat the deployment of a

51
00:02:14,720 --> 00:02:16,879
specification-based intrusion detection

52
00:02:16,879 --> 00:02:17,760
and

53
00:02:17,760 --> 00:02:20,239
automatically create the specification

54
00:02:20,239 --> 00:02:23,239
rules

55
00:02:27,680 --> 00:02:28,640
okay

56
00:02:28,640 --> 00:02:30,080
so

57
00:02:30,080 --> 00:02:32,800
to do that to achieve that we

58
00:02:32,800 --> 00:02:35,040
design a specification mining approach

59
00:02:35,040 --> 00:02:38,799
and of course the uh

60
00:02:39,040 --> 00:02:40,400
our

61
00:02:40,400 --> 00:02:42,160
our main

62
00:02:42,160 --> 00:02:43,840
sources of information are the network

63
00:02:43,840 --> 00:02:45,920
traffic we're gonna monitor and the

64
00:02:45,920 --> 00:02:47,280
documentation the functional

65
00:02:47,280 --> 00:02:50,080
specification the configuration files

66
00:02:50,080 --> 00:02:50,879
and

67
00:02:50,879 --> 00:02:53,519
an intrusion detection system that works

68
00:02:53,519 --> 00:02:55,680
with this specification mining approach

69
00:02:55,680 --> 00:02:57,599
go through different phases first of all

70
00:02:57,599 --> 00:02:59,040
the intrusion detection system has to

71
00:02:59,040 --> 00:03:00,400
understand what

72
00:03:00,400 --> 00:03:02,080
we have on the network so like

73
00:03:02,080 --> 00:03:04,400
fingerprint devices understanding roles

74
00:03:04,400 --> 00:03:07,360
of the devices and their purposes

75
00:03:07,360 --> 00:03:10,640
then it uses this information to

76
00:03:10,640 --> 00:03:13,680
go and check if there are documents that

77
00:03:13,680 --> 00:03:16,879
explain how these devices should behave

78
00:03:16,879 --> 00:03:19,760
and when we have extracted this

79
00:03:19,760 --> 00:03:21,760
information from the documentation we

80
00:03:21,760 --> 00:03:24,159
can define some detection rules some

81
00:03:24,159 --> 00:03:25,920
specification rules within the intuition

82
00:03:25,920 --> 00:03:27,360
detection system

83
00:03:27,360 --> 00:03:30,000
and after that comes the detection and

84
00:03:30,000 --> 00:03:32,480
of course the alerts

85
00:03:32,480 --> 00:03:33,360
um

86
00:03:33,360 --> 00:03:37,440
so we cannot apply this approach

87
00:03:37,440 --> 00:03:38,239
uh

88
00:03:38,239 --> 00:03:39,920
to all the infrastructure generally

89
00:03:39,920 --> 00:03:41,840
apply this approach to any

90
00:03:41,840 --> 00:03:44,879
infrastructure but we notice that

91
00:03:44,879 --> 00:03:47,280
network control system suits this kind

92
00:03:47,280 --> 00:03:48,560
of approach

93
00:03:48,560 --> 00:03:50,560
so networker control system is a growing

94
00:03:50,560 --> 00:03:52,560
technology and

95
00:03:52,560 --> 00:03:54,319
generally speaking

96
00:03:54,319 --> 00:03:56,319
network control system are those systems

97
00:03:56,319 --> 00:03:57,920
was constituents are sensor and

98
00:03:57,920 --> 00:04:00,319
actuators and you have controllers

99
00:04:00,319 --> 00:04:04,159
managing the sensory actuators to

100
00:04:04,159 --> 00:04:07,040
manage monitor a physical process

101
00:04:07,040 --> 00:04:08,560
controllers

102
00:04:08,560 --> 00:04:11,439
implement the control process by

103
00:04:11,439 --> 00:04:15,840
exchanging communication over a network

104
00:04:17,120 --> 00:04:19,358
as i said network console system are a

105
00:04:19,358 --> 00:04:21,759
growing technology and you can find them

106
00:04:21,759 --> 00:04:23,759
basically everywhere you can find them

107
00:04:23,759 --> 00:04:26,720
in critical infrastructure as industrial

108
00:04:26,720 --> 00:04:29,600
control system in iot smart cities

109
00:04:29,600 --> 00:04:31,280
within building automation system and

110
00:04:31,280 --> 00:04:35,040
even in in vehicular networks

111
00:04:35,040 --> 00:04:38,160
for this research we focused on building

112
00:04:38,160 --> 00:04:40,400
automation systems so all the system

113
00:04:40,400 --> 00:04:42,720
that within a building

114
00:04:42,720 --> 00:04:45,680
monitor and manage services such as

115
00:04:45,680 --> 00:04:48,160
heating ventilation air conditioning

116
00:04:48,160 --> 00:04:49,360
lighting

117
00:04:49,360 --> 00:04:52,479
energy consumption even security so with

118
00:04:52,479 --> 00:04:54,720
smart lock smart cameras

119
00:04:54,720 --> 00:04:57,040
and we decided to focus on these systems

120
00:04:57,040 --> 00:04:59,520
because this is going to be

121
00:04:59,520 --> 00:05:03,440
likely uh the next low-hanging fruit for

122
00:05:03,440 --> 00:05:05,520
crackers so if

123
00:05:05,520 --> 00:05:07,039
nowadays maybe

124
00:05:07,039 --> 00:05:09,360
an attacker need a crowbar to enter your

125
00:05:09,360 --> 00:05:12,080
house in near future it's

126
00:05:12,080 --> 00:05:15,120
plausible that these attackers may

127
00:05:15,120 --> 00:05:16,800
access the houses through building

128
00:05:16,800 --> 00:05:18,479
automation systems

129
00:05:18,479 --> 00:05:21,440
and there are already researchers

130
00:05:21,440 --> 00:05:22,960
that have

131
00:05:22,960 --> 00:05:26,639
categorized kind of attacks you can

132
00:05:26,639 --> 00:05:28,560
pursue against building automation

133
00:05:28,560 --> 00:05:32,560
systems and there was a nist publication

134
00:05:32,560 --> 00:05:34,960
categorizing these attacks within these

135
00:05:34,960 --> 00:05:36,000
three

136
00:05:36,000 --> 00:05:38,320
classes snooping so the idea is that

137
00:05:38,320 --> 00:05:40,400
attackers may want to gather information

138
00:05:40,400 --> 00:05:41,360
within

139
00:05:41,360 --> 00:05:43,440
a building automation system denial

140
00:05:43,440 --> 00:05:46,400
service you want to

141
00:05:46,400 --> 00:05:48,560
make some controllers unavailable

142
00:05:48,560 --> 00:05:50,000
process control subverting when an

143
00:05:50,000 --> 00:05:53,520
attacker wants to completely subvert a

144
00:05:53,520 --> 00:05:55,759
physical process monitor by a building

145
00:05:55,759 --> 00:05:58,080
automation system

146
00:05:58,080 --> 00:06:00,560
um so

147
00:06:00,560 --> 00:06:01,680
we knew

148
00:06:01,680 --> 00:06:04,080
i i talked about these two sources of

149
00:06:04,080 --> 00:06:07,199
information now let's see what kind what

150
00:06:07,199 --> 00:06:09,120
this means within building automation

151
00:06:09,120 --> 00:06:10,319
system

152
00:06:10,319 --> 00:06:12,720
for what concerns network traffic we are

153
00:06:12,720 --> 00:06:15,280
going to monitor bacnet bacnet is a

154
00:06:15,280 --> 00:06:16,880
protocol

155
00:06:16,880 --> 00:06:19,600
that allows controllers of different

156
00:06:19,600 --> 00:06:21,440
vendors to exchange information with

157
00:06:21,440 --> 00:06:23,360
each other as you can see is a really

158
00:06:23,360 --> 00:06:26,160
comprehensive protocol it implements uh

159
00:06:26,160 --> 00:06:29,120
different layers of the isosceles stack

160
00:06:29,120 --> 00:06:31,199
what we're going to monitor is the

161
00:06:31,199 --> 00:06:34,720
bacnet ip so the implementation of

162
00:06:34,720 --> 00:06:37,680
bacnet over udpip

163
00:06:37,680 --> 00:06:39,840
and i want to tell a couple of things

164
00:06:39,840 --> 00:06:41,759
more about bachness so how it works

165
00:06:41,759 --> 00:06:43,680
there are two main

166
00:06:43,680 --> 00:06:47,039
principles here objects and services so

167
00:06:47,039 --> 00:06:49,599
the idea is that every controller every

168
00:06:49,599 --> 00:06:51,520
smart sensor

169
00:06:51,520 --> 00:06:54,560
implements different bacnet objects that

170
00:06:54,560 --> 00:06:57,199
allow to describe any characteristic of

171
00:06:57,199 --> 00:06:59,360
that of that device

172
00:06:59,360 --> 00:07:02,000
such as for example here in analog value

173
00:07:02,000 --> 00:07:03,919
and every object has different

174
00:07:03,919 --> 00:07:05,039
properties

175
00:07:05,039 --> 00:07:07,680
further describing

176
00:07:07,680 --> 00:07:10,639
each aspect of the device

177
00:07:10,639 --> 00:07:13,280
buckness services are used instead to

178
00:07:13,280 --> 00:07:16,639
exchange information between two bacnet

179
00:07:16,639 --> 00:07:19,840
devices so any device can ask

180
00:07:19,840 --> 00:07:23,280
for a specific object and some specific

181
00:07:23,280 --> 00:07:24,960
properties and

182
00:07:24,960 --> 00:07:27,039
make a computation

183
00:07:27,039 --> 00:07:29,919
out of the results it gets from there

184
00:07:29,919 --> 00:07:32,880
from the other device

185
00:07:32,880 --> 00:07:36,240
for what concerns uh documentation well

186
00:07:36,240 --> 00:07:37,840
building automation comes with the

187
00:07:37,840 --> 00:07:40,240
heterogeneous documentation in the paper

188
00:07:40,240 --> 00:07:42,400
we analyze different kinds of them here

189
00:07:42,400 --> 00:07:46,240
i want to talk uh particularly about px

190
00:07:46,240 --> 00:07:47,919
protocol implementation conformance

191
00:07:47,919 --> 00:07:49,280
statement

192
00:07:49,280 --> 00:07:51,280
in fact we noticed that

193
00:07:51,280 --> 00:07:53,199
every

194
00:07:53,199 --> 00:07:55,840
every bacnet device comes

195
00:07:55,840 --> 00:07:57,840
with a protocol implementation

196
00:07:57,840 --> 00:07:59,520
conformance statement document so the

197
00:07:59,520 --> 00:08:00,879
vendors

198
00:08:00,879 --> 00:08:02,960
has to tell

199
00:08:02,960 --> 00:08:06,319
what this device implements of bacnet

200
00:08:06,319 --> 00:08:07,199
and

201
00:08:07,199 --> 00:08:09,520
these documents are just pdf files in

202
00:08:09,520 --> 00:08:11,759
which you can find description of the

203
00:08:11,759 --> 00:08:14,560
device and for what concerns bacnet you

204
00:08:14,560 --> 00:08:16,800
find the services implemented the

205
00:08:16,800 --> 00:08:20,160
objects the properties that operators

206
00:08:20,160 --> 00:08:22,319
can use if they are deploying this

207
00:08:22,319 --> 00:08:26,080
device in this in their infrastructures

208
00:08:26,080 --> 00:08:27,919
as i said we had

209
00:08:27,919 --> 00:08:30,879
other kind of documentation we analyzed

210
00:08:30,879 --> 00:08:34,479
and we used but for a lack of time

211
00:08:34,479 --> 00:08:37,039
i i cannot talk about them so you can

212
00:08:37,039 --> 00:08:40,399
find the details on the paper

213
00:08:40,399 --> 00:08:42,880
um so we know what we're gonna monitor

214
00:08:42,880 --> 00:08:44,720
from one side we have bacnet from the

215
00:08:44,720 --> 00:08:46,959
other side we have peaks and what we

216
00:08:46,959 --> 00:08:50,959
needed were testing facilities and uh

217
00:08:50,959 --> 00:08:54,320
we uh had two build we had access to two

218
00:08:54,320 --> 00:08:57,040
building automation system was for was

219
00:08:57,040 --> 00:08:58,480
at the university of 20 in the

220
00:08:58,480 --> 00:09:00,000
netherlands the other one was at

221
00:09:00,000 --> 00:09:02,640
lawrence berkeley national laboratory

222
00:09:02,640 --> 00:09:04,320
um

223
00:09:04,320 --> 00:09:06,880
to implement instead to implement our

224
00:09:06,880 --> 00:09:09,920
the ids's we we deployed in these two

225
00:09:09,920 --> 00:09:13,360
facilities we used bro framework and we

226
00:09:13,360 --> 00:09:14,880
use also some

227
00:09:14,880 --> 00:09:17,360
python programs i'm going to discuss in

228
00:09:17,360 --> 00:09:18,640
a minute

229
00:09:18,640 --> 00:09:22,160
uh so

230
00:09:22,160 --> 00:09:23,519
with

231
00:09:23,519 --> 00:09:26,160
to to to implement this approach we had

232
00:09:26,160 --> 00:09:29,600
to give uh to the ideas the the the

233
00:09:29,600 --> 00:09:31,360
mechanisms we had to implement the

234
00:09:31,360 --> 00:09:33,120
mechanisms to do system discovery

235
00:09:33,120 --> 00:09:34,880
feature lookup and real definition so

236
00:09:34,880 --> 00:09:37,040
i'm going to go through them step by

237
00:09:37,040 --> 00:09:39,279
step first of all system discovery so we

238
00:09:39,279 --> 00:09:41,760
need some mechanisms for the ideas to

239
00:09:41,760 --> 00:09:44,160
identify community device devices

240
00:09:44,160 --> 00:09:45,920
communicating on the network and

241
00:09:45,920 --> 00:09:48,839
determining the roles and

242
00:09:48,839 --> 00:09:50,560
purposes and

243
00:09:50,560 --> 00:09:52,640
we implemented several mechanisms and

244
00:09:52,640 --> 00:09:56,480
embedded this mechanism within the idss

245
00:09:56,480 --> 00:09:58,160
here i'm going to discuss about a couple

246
00:09:58,160 --> 00:09:59,360
of them

247
00:09:59,360 --> 00:10:02,000
first of all we noticed that bacnet

248
00:10:02,000 --> 00:10:04,160
exchanged a lot of information on the

249
00:10:04,160 --> 00:10:06,959
network that are freely available if you

250
00:10:06,959 --> 00:10:09,440
have a parser that actually

251
00:10:09,440 --> 00:10:12,000
can can parse

252
00:10:12,000 --> 00:10:14,000
bacnet application

253
00:10:14,000 --> 00:10:17,440
messages so bro didn't have this this

254
00:10:17,440 --> 00:10:20,079
feature we implemented the bacnet parser

255
00:10:20,079 --> 00:10:22,160
now is available on the main broad

256
00:10:22,160 --> 00:10:24,560
repository we use this bacnet parser to

257
00:10:24,560 --> 00:10:26,640
analyze the messages

258
00:10:26,640 --> 00:10:28,399
and we use this bacnet device object

259
00:10:28,399 --> 00:10:30,959
analysis to understand what devices

260
00:10:30,959 --> 00:10:32,959
we're communicating on the networks in

261
00:10:32,959 --> 00:10:34,880
fact you can

262
00:10:34,880 --> 00:10:36,800
see a lot of these messages on building

263
00:10:36,800 --> 00:10:39,200
automation systems just flowing around

264
00:10:39,200 --> 00:10:42,480
just because controllers need to keep

265
00:10:42,480 --> 00:10:45,120
information of each other and this is

266
00:10:45,120 --> 00:10:47,760
nice because in this real property

267
00:10:47,760 --> 00:10:49,920
multiple services you can see a lot of

268
00:10:49,920 --> 00:10:52,959
information about uh which is the vendor

269
00:10:52,959 --> 00:10:55,279
of the device that is communicating this

270
00:10:55,279 --> 00:10:57,279
uh that is sending this message you can

271
00:10:57,279 --> 00:10:59,040
find the model of the device so you have

272
00:10:59,040 --> 00:11:00,880
a lot of information there

273
00:11:00,880 --> 00:11:01,839
and

274
00:11:01,839 --> 00:11:04,399
this information actually allows us to

275
00:11:04,399 --> 00:11:06,959
link all the bacnet objects we see on

276
00:11:06,959 --> 00:11:10,240
the network to a specific device in fact

277
00:11:10,240 --> 00:11:11,519
thanks to the

278
00:11:11,519 --> 00:11:14,480
bacnet address linking mechanism

279
00:11:14,480 --> 00:11:16,160
we see that

280
00:11:16,160 --> 00:11:18,320
the bacnet address

281
00:11:18,320 --> 00:11:21,279
gives us an information about which

282
00:11:21,279 --> 00:11:23,120
device belong to which

283
00:11:23,120 --> 00:11:25,200
sorry which object belongs to which

284
00:11:25,200 --> 00:11:27,120
device and this allows us to have a

285
00:11:27,120 --> 00:11:29,200
clear overview of what's going on on the

286
00:11:29,200 --> 00:11:30,399
network

287
00:11:30,399 --> 00:11:32,720
so we implemented this approach and we

288
00:11:32,720 --> 00:11:34,160
were able to

289
00:11:34,160 --> 00:11:36,880
fingerprint 98.6

290
00:11:36,880 --> 00:11:40,480
of all the devices that were on the two

291
00:11:40,480 --> 00:11:45,200
infrastructures and basically 99.9

292
00:11:45,200 --> 00:11:49,360
of the objects we saw on the network

293
00:11:49,360 --> 00:11:52,800
then we used this information to search

294
00:11:52,800 --> 00:11:55,120
for documentation so we

295
00:11:55,120 --> 00:11:58,240
had a couple of choices we could

296
00:11:58,240 --> 00:12:00,160
search for documentation over the

297
00:12:00,160 --> 00:12:01,920
internet so the peaks are freely

298
00:12:01,920 --> 00:12:03,360
available over the internet there are

299
00:12:03,360 --> 00:12:05,839
suppositories for that and we had also

300
00:12:05,839 --> 00:12:09,040
access to uh private repositories of the

301
00:12:09,040 --> 00:12:11,519
operators to find further documentation

302
00:12:11,519 --> 00:12:14,160
so basically what we did was uh

303
00:12:14,160 --> 00:12:16,399
implementing and developing some python

304
00:12:16,399 --> 00:12:18,240
programs that were

305
00:12:18,240 --> 00:12:20,399
using the information and like the

306
00:12:20,399 --> 00:12:23,440
keywords found on the on the network to

307
00:12:23,440 --> 00:12:25,920
search for documentation and pinpoint

308
00:12:25,920 --> 00:12:28,880
which document which which peaks belongs

309
00:12:28,880 --> 00:12:31,200
to which device

310
00:12:31,200 --> 00:12:34,000
and we with this we were basically able

311
00:12:34,000 --> 00:12:37,680
to uh find epics for every device that

312
00:12:37,680 --> 00:12:38,880
was

313
00:12:38,880 --> 00:12:41,040
deployed on the building automation on

314
00:12:41,040 --> 00:12:43,680
the milling automation network

315
00:12:43,680 --> 00:12:46,560
what we had to do then is to understand

316
00:12:46,560 --> 00:12:49,200
what's in the peaks so

317
00:12:49,200 --> 00:12:50,000
we

318
00:12:50,000 --> 00:12:52,399
the the pixels have different templates

319
00:12:52,399 --> 00:12:53,600
so that was

320
00:12:53,600 --> 00:12:55,839
kind of difficult to to parse the pixels

321
00:12:55,839 --> 00:12:57,040
in a

322
00:12:57,040 --> 00:12:58,880
general way but we noticed that all the

323
00:12:58,880 --> 00:13:01,360
pixels shared the same structure so

324
00:13:01,360 --> 00:13:02,959
basically we

325
00:13:02,959 --> 00:13:04,320
again we

326
00:13:04,320 --> 00:13:06,480
developed a python program that was able

327
00:13:06,480 --> 00:13:09,839
to go through the the pdf and just

328
00:13:09,839 --> 00:13:11,680
pinpoint all the information about the

329
00:13:11,680 --> 00:13:14,560
specific uh bacnet device

330
00:13:14,560 --> 00:13:17,360
and with this we were just reading the

331
00:13:17,360 --> 00:13:19,360
peaks and storing all the information

332
00:13:19,360 --> 00:13:22,480
about services object properties and all

333
00:13:22,480 --> 00:13:25,519
the characteristics

334
00:13:25,519 --> 00:13:26,480
and

335
00:13:26,480 --> 00:13:28,639
so we had this information stored and

336
00:13:28,639 --> 00:13:31,040
the last thing we needed to do is to

337
00:13:31,040 --> 00:13:32,800
translate this information in

338
00:13:32,800 --> 00:13:36,000
specification rules that the ids can use

339
00:13:36,000 --> 00:13:37,920
so to do that

340
00:13:37,920 --> 00:13:40,240
we have to

341
00:13:40,240 --> 00:13:42,800
make a reasoning so we

342
00:13:42,800 --> 00:13:45,120
we knew that controllers were very

343
00:13:45,120 --> 00:13:46,560
important on the building automation

344
00:13:46,560 --> 00:13:48,480
system and we knew that these

345
00:13:48,480 --> 00:13:50,959
controllers share some some properties

346
00:13:50,959 --> 00:13:54,000
so there were every controller had a

347
00:13:54,000 --> 00:13:56,800
limited set of variables to fulfill its

348
00:13:56,800 --> 00:13:58,959
functions and all these variables were

349
00:13:58,959 --> 00:14:01,279
of predetermined types and there were a

350
00:14:01,279 --> 00:14:03,360
limited set of services accessing this

351
00:14:03,360 --> 00:14:05,199
variable so in the end we

352
00:14:05,199 --> 00:14:07,279
uh kind of

353
00:14:07,279 --> 00:14:08,639
uh

354
00:14:08,639 --> 00:14:10,399
create and uh

355
00:14:10,399 --> 00:14:12,720
develop this this abstract rule saying

356
00:14:12,720 --> 00:14:15,120
that we want to know which type of

357
00:14:15,120 --> 00:14:17,600
variables are in use we want to know

358
00:14:17,600 --> 00:14:20,639
what which values these variables assume

359
00:14:20,639 --> 00:14:24,160
and we want to know the methods that

360
00:14:24,160 --> 00:14:26,880
that are used to access this specif

361
00:14:26,880 --> 00:14:28,639
these variables

362
00:14:28,639 --> 00:14:31,600
and so the idea is that we had this this

363
00:14:31,600 --> 00:14:33,440
type rule and we

364
00:14:33,440 --> 00:14:36,000
developed a rule that says

365
00:14:36,000 --> 00:14:38,639
what a type is in a building automation

366
00:14:38,639 --> 00:14:41,839
system and for us a tie for example was

367
00:14:41,839 --> 00:14:44,639
the bacnet object or the bacnet property

368
00:14:44,639 --> 00:14:46,079
that are in use

369
00:14:46,079 --> 00:14:49,760
so when we have this bacnet type rules

370
00:14:49,760 --> 00:14:52,639
implemented within the ids we could

371
00:14:52,639 --> 00:14:55,680
automated the mapping of the information

372
00:14:55,680 --> 00:14:58,160
we found on the feature lookup to all

373
00:14:58,160 --> 00:15:00,880
the rules we created so basically the

374
00:15:00,880 --> 00:15:04,480
idea is that the ids was able to take

375
00:15:04,480 --> 00:15:07,279
all the objects he found in the pix and

376
00:15:07,279 --> 00:15:09,519
map these objects to the rules saying

377
00:15:09,519 --> 00:15:12,399
that a specific device can use just the

378
00:15:12,399 --> 00:15:15,680
objects that the ids identified within

379
00:15:15,680 --> 00:15:18,719
the documentation

380
00:15:18,800 --> 00:15:21,440
so recapping we had

381
00:15:21,440 --> 00:15:23,760
an idea we had two ideas deployed in the

382
00:15:23,760 --> 00:15:25,519
two building automation system and these

383
00:15:25,519 --> 00:15:28,399
two ideas were able to

384
00:15:28,399 --> 00:15:30,800
find information on the networks

385
00:15:30,800 --> 00:15:33,279
use that information to search over the

386
00:15:33,279 --> 00:15:35,839
internet and on private repositories

387
00:15:35,839 --> 00:15:38,079
about the documentation that

388
00:15:38,079 --> 00:15:40,399
links to the devices communicating on

389
00:15:40,399 --> 00:15:42,639
the network and they were able to map

390
00:15:42,639 --> 00:15:45,680
this information to the rules we

391
00:15:45,680 --> 00:15:48,000
to the general rules we gave to the

392
00:15:48,000 --> 00:15:50,320
intrusion detection systems

393
00:15:50,320 --> 00:15:53,360
and with this in mind we run the

394
00:15:53,360 --> 00:15:55,519
ids's for two months

395
00:15:55,519 --> 00:15:56,959
and we

396
00:15:56,959 --> 00:15:59,759
had some results so the ideas raised

397
00:15:59,759 --> 00:16:02,079
some uh alerts

398
00:16:02,079 --> 00:16:05,199
and i mean we didn't find any malicious

399
00:16:05,199 --> 00:16:07,759
activity per se but we found some

400
00:16:07,759 --> 00:16:09,199
interesting

401
00:16:09,199 --> 00:16:11,920
activities going on and specific and

402
00:16:11,920 --> 00:16:13,040
it's

403
00:16:13,040 --> 00:16:15,120
worth to say that i mean those

404
00:16:15,120 --> 00:16:17,199
activities were unknown to the operators

405
00:16:17,199 --> 00:16:19,199
so we actually

406
00:16:19,199 --> 00:16:21,839
improved the knowledge the operators had

407
00:16:21,839 --> 00:16:24,240
of their of their networks

408
00:16:24,240 --> 00:16:25,199
and

409
00:16:25,199 --> 00:16:27,440
for example we found

410
00:16:27,440 --> 00:16:31,120
a couple of devices uh using a an object

411
00:16:31,120 --> 00:16:32,800
that wasn't supposed to be there so the

412
00:16:32,800 --> 00:16:35,360
documentation didn't say anything about

413
00:16:35,360 --> 00:16:38,800
this uh proprietary object that those a

414
00:16:38,800 --> 00:16:41,360
couple of siemens devices were using so

415
00:16:41,360 --> 00:16:43,759
we asked to the operators they didn't

416
00:16:43,759 --> 00:16:46,320
know what this was and but then we

417
00:16:46,320 --> 00:16:48,839
figured out that basically siemens was

418
00:16:48,839 --> 00:16:52,880
um allowed to enter to access the

419
00:16:52,880 --> 00:16:55,759
building automation networks and do

420
00:16:55,759 --> 00:16:59,120
his own its own analysis on some of it

421
00:16:59,120 --> 00:17:02,240
of its devices so basically

422
00:17:02,240 --> 00:17:04,640
this object was unknown to the paretos

423
00:17:04,640 --> 00:17:06,000
because it's unknown in the

424
00:17:06,000 --> 00:17:10,559
documentation but siemens has his own

425
00:17:10,640 --> 00:17:12,959
its own mechanism to to to to make

426
00:17:12,959 --> 00:17:15,839
analysis on its devices

427
00:17:15,839 --> 00:17:17,839
and basically i mean this already says

428
00:17:17,839 --> 00:17:20,160
something about what an attackers may

429
00:17:20,160 --> 00:17:22,880
try to exploit without the operator even

430
00:17:22,880 --> 00:17:23,919
noting

431
00:17:23,919 --> 00:17:26,559
even knowing that this is actually

432
00:17:26,559 --> 00:17:28,720
possible because there is no

433
00:17:28,720 --> 00:17:30,880
information on the documentation

434
00:17:30,880 --> 00:17:33,360
uh we found a lot of forbidden

435
00:17:33,360 --> 00:17:36,160
properties so again there were objects

436
00:17:36,160 --> 00:17:38,480
that were not supposed to have these

437
00:17:38,480 --> 00:17:41,919
properties but still we found a lot of

438
00:17:41,919 --> 00:17:44,080
readings on properties that weren't

439
00:17:44,080 --> 00:17:46,640
supposed to be there and all of this

440
00:17:46,640 --> 00:17:48,640
were misconfiguration the operators

441
00:17:48,640 --> 00:17:51,360
didn't know that this was happening and

442
00:17:51,360 --> 00:17:56,080
actually we kind of confirmed all these

443
00:17:56,080 --> 00:17:58,640
misconfigurations even in bacnet because

444
00:17:58,640 --> 00:18:00,400
sometimes backhand gives

445
00:18:00,400 --> 00:18:03,280
errors about unknown property

446
00:18:03,280 --> 00:18:05,600
but in any case even

447
00:18:05,600 --> 00:18:07,600
this activity was unknown to to the

448
00:18:07,600 --> 00:18:09,039
operators

449
00:18:09,039 --> 00:18:10,320
and

450
00:18:10,320 --> 00:18:12,160
the most important thing

451
00:18:12,160 --> 00:18:15,360
uh we found a property that according to

452
00:18:15,360 --> 00:18:17,679
the documentation wasn't supposed to be

453
00:18:17,679 --> 00:18:21,280
writable and still we found a message we

454
00:18:21,280 --> 00:18:23,200
found an activity that was exactly

455
00:18:23,200 --> 00:18:25,840
writing a property in a specific device

456
00:18:25,840 --> 00:18:28,000
and then we again we went back to the

457
00:18:28,000 --> 00:18:29,760
operators we found out that it was an

458
00:18:29,760 --> 00:18:32,640
operator using some custom tool trying

459
00:18:32,640 --> 00:18:34,640
to write the property so it was a

460
00:18:34,640 --> 00:18:36,720
mistake and in the end we were able to

461
00:18:36,720 --> 00:18:39,280
tell the operators that do this was not

462
00:18:39,280 --> 00:18:42,799
supposed to happen

463
00:18:42,799 --> 00:18:45,360
so i want to discuss a couple of points

464
00:18:45,360 --> 00:18:47,760
here about what we found

465
00:18:47,760 --> 00:18:49,760
because we had also

466
00:18:49,760 --> 00:18:51,760
a big discussion about

467
00:18:51,760 --> 00:18:53,840
configuration mismatches

468
00:18:53,840 --> 00:18:55,760
versus security relevant events so what

469
00:18:55,760 --> 00:18:58,480
we found were indeed configuration

470
00:18:58,480 --> 00:19:00,640
mismatches so in the documentation there

471
00:19:00,640 --> 00:19:01,520
is some

472
00:19:01,520 --> 00:19:03,440
the documentation says something and in

473
00:19:03,440 --> 00:19:05,679
the network we found something else but

474
00:19:05,679 --> 00:19:09,440
still i mean what we found

475
00:19:09,440 --> 00:19:12,640
can be uh activities the attackers may

476
00:19:12,640 --> 00:19:17,280
want to uh go through to harm the system

477
00:19:17,280 --> 00:19:18,960
i mean the forbidden properties the

478
00:19:18,960 --> 00:19:22,480
forbidden objects uh can be examples of

479
00:19:22,480 --> 00:19:24,880
an attacker snooping around trying to

480
00:19:24,880 --> 00:19:27,840
gather information from the network and

481
00:19:27,840 --> 00:19:30,960
the writing of course was uh could have

482
00:19:30,960 --> 00:19:32,960
been an example of an operators trying

483
00:19:32,960 --> 00:19:33,840
to

484
00:19:33,840 --> 00:19:35,679
subvert the

485
00:19:35,679 --> 00:19:38,400
system current functioning so

486
00:19:38,400 --> 00:19:41,120
i mean in the end the operators

487
00:19:41,120 --> 00:19:43,919
agreed that this uh

488
00:19:43,919 --> 00:19:46,080
what we found was was interesting for

489
00:19:46,080 --> 00:19:48,240
them and they asked us to deploy the

490
00:19:48,240 --> 00:19:51,840
system stability on their networks

491
00:19:51,840 --> 00:19:53,919
another discussion we had was the it was

492
00:19:53,919 --> 00:19:56,080
about the attack coverage of course i

493
00:19:56,080 --> 00:19:58,400
mean if an attackers want to do

494
00:19:58,400 --> 00:20:00,080
something

495
00:20:00,080 --> 00:20:03,440
managed to attack to harm the system by

496
00:20:03,440 --> 00:20:05,679
playing within the specifications we

497
00:20:05,679 --> 00:20:07,760
cannot detect that so in this case

498
00:20:07,760 --> 00:20:11,360
probably the use of other solution

499
00:20:11,360 --> 00:20:13,600
with the specification-based intuition

500
00:20:13,600 --> 00:20:15,280
detection system we

501
00:20:15,280 --> 00:20:16,720
we implemented

502
00:20:16,720 --> 00:20:17,760
like

503
00:20:17,760 --> 00:20:19,360
anomaly-based standard anomaly-based

504
00:20:19,360 --> 00:20:22,320
intrusion detection can help to

505
00:20:22,320 --> 00:20:24,080
overcome this problem

506
00:20:24,080 --> 00:20:25,280
finally

507
00:20:25,280 --> 00:20:27,039
we discussed in the paper about the

508
00:20:27,039 --> 00:20:29,039
generalization of this approach beyond

509
00:20:29,039 --> 00:20:31,360
bacnet-based building automation system

510
00:20:31,360 --> 00:20:33,039
we studied

511
00:20:33,039 --> 00:20:35,120
a couple of different technologies in

512
00:20:35,120 --> 00:20:37,360
building automation systems like knx and

513
00:20:37,360 --> 00:20:40,159
loanworks and also in that in those

514
00:20:40,159 --> 00:20:43,039
cases we have all the

515
00:20:43,039 --> 00:20:45,840
principles and assumptions holding

516
00:20:45,840 --> 00:20:46,799
because

517
00:20:46,799 --> 00:20:49,360
those two technologies allows us to read

518
00:20:49,360 --> 00:20:52,080
the network again and

519
00:20:52,080 --> 00:20:54,320
the two technologies also

520
00:20:54,320 --> 00:20:57,840
propose some standard documentation that

521
00:20:57,840 --> 00:21:00,559
can help the operators to

522
00:21:00,559 --> 00:21:03,679
to manage their networks and in our case

523
00:21:03,679 --> 00:21:05,679
can help us to build an intrusion

524
00:21:05,679 --> 00:21:08,559
detection system and we even go beyond

525
00:21:08,559 --> 00:21:10,400
that and we studied

526
00:21:10,400 --> 00:21:11,360
how

527
00:21:11,360 --> 00:21:13,760
and if this approach was feasible for

528
00:21:13,760 --> 00:21:15,840
industrial control system in that case

529
00:21:15,840 --> 00:21:17,600
you have documentation

530
00:21:17,600 --> 00:21:18,880
and

531
00:21:18,880 --> 00:21:21,039
and controllers and the possibility to

532
00:21:21,039 --> 00:21:22,480
read the network

533
00:21:22,480 --> 00:21:23,360
and

534
00:21:23,360 --> 00:21:26,640
in vehicular networks again controllers

535
00:21:26,640 --> 00:21:29,039
within the cars that are communicating

536
00:21:29,039 --> 00:21:31,360
with each other and we have also in that

537
00:21:31,360 --> 00:21:33,520
case some documentation that help us to

538
00:21:33,520 --> 00:21:36,480
understand what should be uh what this

539
00:21:36,480 --> 00:21:39,280
communication should look like

540
00:21:39,280 --> 00:21:41,679
in the end i want to say that i mean we

541
00:21:41,679 --> 00:21:43,600
studied network and control technologies

542
00:21:43,600 --> 00:21:44,799
because

543
00:21:44,799 --> 00:21:46,480
this is attack

544
00:21:46,480 --> 00:21:48,159
this is a technology is rapidly

545
00:21:48,159 --> 00:21:51,360
spreading and most of all i mean uh

546
00:21:51,360 --> 00:21:53,440
this

547
00:21:53,440 --> 00:21:56,640
relates to a multitude of heterogeneous

548
00:21:56,640 --> 00:22:00,080
devices and i mean when we have these

549
00:22:00,080 --> 00:22:02,480
uh smart environments with such an

550
00:22:02,480 --> 00:22:05,120
heterogeneity we need security solution

551
00:22:05,120 --> 00:22:08,960
that can quickly scale up to all this

552
00:22:08,960 --> 00:22:10,480
and

553
00:22:10,480 --> 00:22:13,280
manually doing manually tuning security

554
00:22:13,280 --> 00:22:15,280
solutions for that is not gonna it's not

555
00:22:15,280 --> 00:22:16,960
gonna be feasible

556
00:22:16,960 --> 00:22:18,000
and

557
00:22:18,000 --> 00:22:20,559
our approach was exactly uh

558
00:22:20,559 --> 00:22:22,559
paving the way towards this kind of

559
00:22:22,559 --> 00:22:24,080
solutions so we automate the

560
00:22:24,080 --> 00:22:26,000
specification mining and rule

561
00:22:26,000 --> 00:22:28,960
description and we obtained a

562
00:22:28,960 --> 00:22:31,200
specification based ideas that was

563
00:22:31,200 --> 00:22:33,919
really efficient to deploy and was

564
00:22:33,919 --> 00:22:35,760
automatically adapting to the

565
00:22:35,760 --> 00:22:37,919
environment by

566
00:22:37,919 --> 00:22:40,400
understanding what was going on by by

567
00:22:40,400 --> 00:22:41,840
itself

568
00:22:41,840 --> 00:22:43,520
and said that i

569
00:22:43,520 --> 00:22:44,880
will be

570
00:22:44,880 --> 00:22:47,200
happy to answer to any questions

571
00:22:47,200 --> 00:22:48,490
thank you

572
00:22:48,490 --> 00:22:55,789
[Applause]

573
00:22:58,400 --> 00:23:00,000
very interesting work

574
00:23:00,000 --> 00:23:02,559
uh i was i was just wondering where you

575
00:23:02,559 --> 00:23:04,400
plan because yeah i see you have planned

576
00:23:04,400 --> 00:23:06,960
to enlarge what your current what your

577
00:23:06,960 --> 00:23:09,039
current model is but i was wondering if

578
00:23:09,039 --> 00:23:11,200
you have other plans to expand what your

579
00:23:11,200 --> 00:23:13,760
model of specification is

580
00:23:13,760 --> 00:23:15,280
because especially for industrial

581
00:23:15,280 --> 00:23:17,840
control systems a lot of the time you

582
00:23:17,840 --> 00:23:21,600
you want to know that the system behaves

583
00:23:21,600 --> 00:23:22,799
as

584
00:23:22,799 --> 00:23:24,799
as conforms to policy for the

585
00:23:24,799 --> 00:23:27,120
engineering system for example

586
00:23:27,120 --> 00:23:29,679
that particular field might be

587
00:23:29,679 --> 00:23:31,760
within the specification of the protocol

588
00:23:31,760 --> 00:23:32,960
read write

589
00:23:32,960 --> 00:23:35,360
but by the engineering specification it

590
00:23:35,360 --> 00:23:37,360
should be read only so do you have plan

591
00:23:37,360 --> 00:23:39,200
to expand your definition of what a

592
00:23:39,200 --> 00:23:41,120
specification is

593
00:23:41,120 --> 00:23:43,360
yeah thanks for the question uh yeah

594
00:23:43,360 --> 00:23:45,120
first of all i mean

595
00:23:45,120 --> 00:23:45,840
the

596
00:23:45,840 --> 00:23:48,240
specification we the the the rules we

597
00:23:48,240 --> 00:23:51,200
used in the end are many more than what

598
00:23:51,200 --> 00:23:53,679
i showed here but i didn't have time to

599
00:23:53,679 --> 00:23:56,080
discuss them so you can find

600
00:23:56,080 --> 00:23:58,000
a little more already on the paper what

601
00:23:58,000 --> 00:23:59,760
you said about the policies definitely

602
00:23:59,760 --> 00:24:02,720
that's really interesting development

603
00:24:02,720 --> 00:24:04,720
first of all it depends on how you find

604
00:24:04,720 --> 00:24:07,679
these policies we tested this approach

605
00:24:07,679 --> 00:24:09,840
trying to search for manuals for example

606
00:24:09,840 --> 00:24:12,159
and trying to use uh natural language

607
00:24:12,159 --> 00:24:14,400
processing to understand

608
00:24:14,400 --> 00:24:16,080
a little more about how an

609
00:24:16,080 --> 00:24:18,640
infrastructure should behave

610
00:24:18,640 --> 00:24:20,960
if you manage to

611
00:24:20,960 --> 00:24:24,240
find this information on a document like

612
00:24:24,240 --> 00:24:25,520
manual

613
00:24:25,520 --> 00:24:29,360
yeah you can try to uh

614
00:24:29,360 --> 00:24:31,760
yeah you can try to develop so so

615
00:24:31,760 --> 00:24:33,760
typically in industrial control systems

616
00:24:33,760 --> 00:24:35,520
you have the integrator that implements

617
00:24:35,520 --> 00:24:37,360
the system that has a huge binder with

618
00:24:37,360 --> 00:24:39,919
engineering diagrams seeing this

619
00:24:39,919 --> 00:24:41,919
this does this and matches with all the

620
00:24:41,919 --> 00:24:44,080
the the specific registers and stuff

621
00:24:44,080 --> 00:24:45,520
like that so you

622
00:24:45,520 --> 00:24:47,679
this documentation is typically

623
00:24:47,679 --> 00:24:50,400
available at some place

624
00:24:50,400 --> 00:24:52,880
yeah thanks

625
00:24:52,880 --> 00:24:55,760
hi uh greg zabrucha

626
00:24:55,760 --> 00:24:58,799
is any bacnet traffic encrypted and if

627
00:24:58,799 --> 00:25:01,200
it were i mean could your system still

628
00:25:01,200 --> 00:25:02,799
provide value

629
00:25:02,799 --> 00:25:03,679
um

630
00:25:03,679 --> 00:25:06,240
thanks well no

631
00:25:06,240 --> 00:25:08,720
but i have to say bacnet has uh the

632
00:25:08,720 --> 00:25:10,400
possibility to encrypt the traffic so

633
00:25:10,400 --> 00:25:12,720
it's in the standard the interesting

634
00:25:12,720 --> 00:25:15,760
thing is that nobody used them and no

635
00:25:15,760 --> 00:25:18,480
vendors implement the encryption so

636
00:25:18,480 --> 00:25:20,320
basically of course

637
00:25:20,320 --> 00:25:22,320
if the traffic is encrypted and we

638
00:25:22,320 --> 00:25:24,240
cannot read the traffic

639
00:25:24,240 --> 00:25:27,039
all the system won't work but

640
00:25:27,039 --> 00:25:29,120
as far as i know

641
00:25:29,120 --> 00:25:32,559
no infrastructure use bacnet encrypted

642
00:25:32,559 --> 00:25:33,760
traffic

643
00:25:33,760 --> 00:25:35,679
and so devices don't authenticate

644
00:25:35,679 --> 00:25:37,520
themselves to each other absolutely no

645
00:25:37,520 --> 00:25:39,039
that's a

646
00:25:39,039 --> 00:25:41,440
juicy part for the attackers basically

647
00:25:41,440 --> 00:25:43,600
you can probe

648
00:25:43,600 --> 00:25:46,000
freely every device that you find on

649
00:25:46,000 --> 00:25:48,080
your network and you can ask information

650
00:25:48,080 --> 00:25:50,400
on your own i mean you can do whatever

651
00:25:50,400 --> 00:25:54,480
you want there okay thanks

652
00:25:55,679 --> 00:25:57,840
rich johnson and carr

653
00:25:57,840 --> 00:26:01,279
i noticed that um your detection based

654
00:26:01,279 --> 00:26:02,960
on specifications

655
00:26:02,960 --> 00:26:05,039
will detect things that are out of spec

656
00:26:05,039 --> 00:26:07,279
but what if an attacker is acting within

657
00:26:07,279 --> 00:26:09,200
spec and just changing

658
00:26:09,200 --> 00:26:10,480
devices

659
00:26:10,480 --> 00:26:12,159
how would you extend to

660
00:26:12,159 --> 00:26:14,080
detect that kind of activity

661
00:26:14,080 --> 00:26:16,400
yeah as i said i mean we we're

662
00:26:16,400 --> 00:26:18,400
definitely looking at the specifications

663
00:26:18,400 --> 00:26:21,360
so if an attacker knows

664
00:26:21,360 --> 00:26:23,760
that it can harm the system playing

665
00:26:23,760 --> 00:26:26,320
within the specification our

666
00:26:26,320 --> 00:26:28,159
work won't

667
00:26:28,159 --> 00:26:31,679
alert any malicious activity that case i

668
00:26:31,679 --> 00:26:33,520
can say header you have better

669
00:26:33,520 --> 00:26:36,000
specification you can have improve your

670
00:26:36,000 --> 00:26:38,880
documentation if the the operators have

671
00:26:38,880 --> 00:26:40,960
better documentation we can try to

672
00:26:40,960 --> 00:26:43,039
improve our specification

673
00:26:43,039 --> 00:26:45,679
but i would say that it's more likely to

674
00:26:45,679 --> 00:26:46,960
have

675
00:26:46,960 --> 00:26:49,840
this approach working in parallel with

676
00:26:49,840 --> 00:26:51,440
standard and normally based intrusion

677
00:26:51,440 --> 00:26:54,080
detection try to overcome this problem

678
00:26:54,080 --> 00:26:58,120
with a different approach

679
00:27:00,250 --> 00:27:07,039
[Applause]

680
00:27:07,039 --> 00:27:09,120
you

