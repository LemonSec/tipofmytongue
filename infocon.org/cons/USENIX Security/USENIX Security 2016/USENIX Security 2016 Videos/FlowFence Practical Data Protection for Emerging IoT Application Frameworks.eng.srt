1
00:00:10,960 --> 00:00:13,200
ah my name is erlands

2
00:00:13,200 --> 00:00:15,360
and i'm here to talk about how iot

3
00:00:15,360 --> 00:00:17,680
developers can build applications that

4
00:00:17,680 --> 00:00:20,000
better respect the sensitivity of the

5
00:00:20,000 --> 00:00:22,080
data they work with this is joint work

6
00:00:22,080 --> 00:00:23,680
with my colleagues at the university of

7
00:00:23,680 --> 00:00:26,000
michigan and at the university of padova

8
00:00:26,000 --> 00:00:27,680
amir my co-author and i will be on the

9
00:00:27,680 --> 00:00:30,560
job market soon so

10
00:00:30,560 --> 00:00:32,159
okay so the

11
00:00:32,159 --> 00:00:35,120
iot has several application frameworks

12
00:00:35,120 --> 00:00:37,440
um several application domains uh

13
00:00:37,440 --> 00:00:39,280
including variables uh connected

14
00:00:39,280 --> 00:00:41,520
healthcare and smart homes and all of

15
00:00:41,520 --> 00:00:43,840
these application domains produce a lot

16
00:00:43,840 --> 00:00:45,760
of sensitive information related to a

17
00:00:45,760 --> 00:00:48,000
person a person's activities and even a

18
00:00:48,000 --> 00:00:50,480
person's family members furthermore

19
00:00:50,480 --> 00:00:52,320
there are we're seeing an emergence of

20
00:00:52,320 --> 00:00:54,079
several third-party application

21
00:00:54,079 --> 00:00:57,520
frameworks that enable uh developers to

22
00:00:57,520 --> 00:00:59,920
build uh applications that compute on

23
00:00:59,920 --> 00:01:01,680
all of the sensitive data

24
00:01:01,680 --> 00:01:03,120
google brillo and vive samsung

25
00:01:03,120 --> 00:01:05,680
smartthings and apple home kit are a few

26
00:01:05,680 --> 00:01:06,960
examples

27
00:01:06,960 --> 00:01:09,439
so here is a quick example of one such

28
00:01:09,439 --> 00:01:11,520
app that you could build this app

29
00:01:11,520 --> 00:01:13,680
accesses an ip camera

30
00:01:13,680 --> 00:01:16,159
that takes images of people's faces at a

31
00:01:16,159 --> 00:01:17,759
door and then it performs face

32
00:01:17,759 --> 00:01:19,600
recognition which i've heard a lot about

33
00:01:19,600 --> 00:01:20,799
today

34
00:01:20,799 --> 00:01:23,600
and then if that face is authorized

35
00:01:23,600 --> 00:01:26,479
it will go ahead and unlock a door

36
00:01:26,479 --> 00:01:29,119
this app also provides a feature for the

37
00:01:29,119 --> 00:01:30,479
home owner

38
00:01:30,479 --> 00:01:32,159
to basically check the status of the

39
00:01:32,159 --> 00:01:33,920
door from the internet so more

40
00:01:33,920 --> 00:01:35,520
generically we have this publisher of

41
00:01:35,520 --> 00:01:37,360
sensitive data that accesses a sensitive

42
00:01:37,360 --> 00:01:39,920
source and it makes this data available

43
00:01:39,920 --> 00:01:41,840
to a consumer app that eventually talks

44
00:01:41,840 --> 00:01:43,360
to various things

45
00:01:43,360 --> 00:01:45,280
now clearly this app needs access to the

46
00:01:45,280 --> 00:01:46,399
sensitive data for its core

47
00:01:46,399 --> 00:01:48,799
functionality it's a useful app

48
00:01:48,799 --> 00:01:52,479
but uh it it also has the potential uh

49
00:01:52,479 --> 00:01:54,320
to leak this data some of my past work

50
00:01:54,320 --> 00:01:56,799
has shown how this might be possible

51
00:01:56,799 --> 00:01:58,159
so this brings us to the central

52
00:01:58,159 --> 00:02:00,640
research question how can we build uh

53
00:02:00,640 --> 00:02:02,159
applications that compute on all of the

54
00:02:02,159 --> 00:02:04,479
sensitive data in the iot uh while

55
00:02:04,479 --> 00:02:06,719
mitigating our data abuse now on the

56
00:02:06,719 --> 00:02:08,080
surface this may not seem like a new

57
00:02:08,080 --> 00:02:09,280
question it may not even seem

58
00:02:09,280 --> 00:02:11,200
fundamental to the iot so let's see

59
00:02:11,200 --> 00:02:13,440
whether we can apply uh existing

60
00:02:13,440 --> 00:02:15,840
techniques to solve this problem

61
00:02:15,840 --> 00:02:17,760
so we went and we studied uh three

62
00:02:17,760 --> 00:02:20,239
existing application frameworks um and

63
00:02:20,239 --> 00:02:22,080
we found that all of these frameworks

64
00:02:22,080 --> 00:02:23,920
only support permission based access

65
00:02:23,920 --> 00:02:26,720
control as the core mechanism protecting

66
00:02:26,720 --> 00:02:29,200
their data we looked at uh the samsung

67
00:02:29,200 --> 00:02:31,760
smartthings api the google fit api and

68
00:02:31,760 --> 00:02:33,760
even the android sensor api

69
00:02:33,760 --> 00:02:35,200
uh and the pum an example of a

70
00:02:35,200 --> 00:02:37,440
permission is like uh capability.log

71
00:02:37,440 --> 00:02:39,599
codes in the smartthings platform and

72
00:02:39,599 --> 00:02:41,680
this basically governs whether an

73
00:02:41,680 --> 00:02:43,519
application has the right to read pin

74
00:02:43,519 --> 00:02:44,560
codes

75
00:02:44,560 --> 00:02:46,800
so now permissions are good at

76
00:02:46,800 --> 00:02:49,120
controlling what data an app can access

77
00:02:49,120 --> 00:02:50,959
but they do not control how

78
00:02:50,959 --> 00:02:53,680
applications use this data once and once

79
00:02:53,680 --> 00:02:55,280
an app has access

80
00:02:55,280 --> 00:02:57,760
what we really need is a form of flow

81
00:02:57,760 --> 00:03:00,080
control information flow control so

82
00:03:00,080 --> 00:03:01,519
let's see whether we can apply existing

83
00:03:01,519 --> 00:03:03,680
flow analysis techniques so generally we

84
00:03:03,680 --> 00:03:06,000
see two kinds of the instruction level

85
00:03:06,000 --> 00:03:06,800
type

86
00:03:06,800 --> 00:03:09,280
we see dynamic chain tracking which has

87
00:03:09,280 --> 00:03:11,760
the advantage of being fine-grained

88
00:03:11,760 --> 00:03:14,400
and not requiring developer effort

89
00:03:14,400 --> 00:03:16,319
but they often have higher computational

90
00:03:16,319 --> 00:03:17,360
overhead

91
00:03:17,360 --> 00:03:18,640
they may need special hardware for

92
00:03:18,640 --> 00:03:20,080
acceleration

93
00:03:20,080 --> 00:03:22,000
and attackers could use implicit flows

94
00:03:22,000 --> 00:03:24,480
to to leak information often some

95
00:03:24,480 --> 00:03:25,680
techniques

96
00:03:25,680 --> 00:03:27,440
leverage specific language and operating

97
00:03:27,440 --> 00:03:29,280
system structures to provide the

98
00:03:29,280 --> 00:03:31,120
security guarantees

99
00:03:31,120 --> 00:03:32,879
the second type is static chain tracking

100
00:03:32,879 --> 00:03:34,560
techniques that you know alleviate some

101
00:03:34,560 --> 00:03:35,599
of the

102
00:03:35,599 --> 00:03:37,680
computational overheads of the dynamic

103
00:03:37,680 --> 00:03:39,360
techniques and these are also fine

104
00:03:39,360 --> 00:03:41,440
grained uh do not require any developer

105
00:03:41,440 --> 00:03:44,799
effort however implicit flows uh ipc and

106
00:03:44,799 --> 00:03:47,599
asynchronous code can lead to leakages

107
00:03:47,599 --> 00:03:50,480
now there are also iot specific uh

108
00:03:50,480 --> 00:03:53,120
challenges here so many iot devices

109
00:03:53,120 --> 00:03:54,959
including the hubs are generally very

110
00:03:54,959 --> 00:03:56,319
simple hardware very constrained

111
00:03:56,319 --> 00:03:57,360
hardware

112
00:03:57,360 --> 00:03:58,959
there's also a lot of os and language

113
00:03:58,959 --> 00:04:01,599
diversity that supports this whole idea

114
00:04:01,599 --> 00:04:04,319
of rapid application development where

115
00:04:04,319 --> 00:04:06,000
developers use existing tools and

116
00:04:06,000 --> 00:04:08,879
technologies to quickly build apps

117
00:04:08,879 --> 00:04:11,120
and finally we see that a lot of iot

118
00:04:11,120 --> 00:04:14,239
apps have a lot of asynchronous code due

119
00:04:14,239 --> 00:04:16,560
to physical device delays as well as the

120
00:04:16,560 --> 00:04:18,798
whole fundamental trigger action nature

121
00:04:18,798 --> 00:04:20,880
of these applications

122
00:04:20,880 --> 00:04:23,440
so therefore we built flow fans a system

123
00:04:23,440 --> 00:04:25,199
where flow control is a first class

124
00:04:25,199 --> 00:04:27,759
primitive and flow fence is specifically

125
00:04:27,759 --> 00:04:30,000
geared towards the iot application

126
00:04:30,000 --> 00:04:32,800
consumer domain um and it solves iot

127
00:04:32,800 --> 00:04:34,320
specific challenges

128
00:04:34,320 --> 00:04:36,960
it builds on research from two areas uh

129
00:04:36,960 --> 00:04:39,120
similar to label-based flow control

130
00:04:39,120 --> 00:04:42,000
techniques uh it tracks information at

131
00:04:42,000 --> 00:04:43,440
the component level

132
00:04:43,440 --> 00:04:46,080
um and enforces flows through label

133
00:04:46,080 --> 00:04:48,560
policies and similar to

134
00:04:48,560 --> 00:04:50,720
language based flow control techniques

135
00:04:50,720 --> 00:04:52,960
uh it re it requires a developer to

136
00:04:52,960 --> 00:04:55,520
restructure uh their applications to

137
00:04:55,520 --> 00:04:58,080
obey these flow rules to make these make

138
00:04:58,080 --> 00:04:59,919
control and data flows explicit in app

139
00:04:59,919 --> 00:05:01,840
structure and then it also requires

140
00:05:01,840 --> 00:05:04,320
developers uh to declare these flows

141
00:05:04,320 --> 00:05:06,320
while flow fence automatically prevents

142
00:05:06,320 --> 00:05:08,720
uh all of the undeclared flows

143
00:05:08,720 --> 00:05:10,400
and so this leads to a flexible system

144
00:05:10,400 --> 00:05:13,680
that supports diverse uh publishers and

145
00:05:13,680 --> 00:05:15,919
consumers of policy

146
00:05:15,919 --> 00:05:18,080
off of data with with the associated

147
00:05:18,080 --> 00:05:20,160
flow policies and it also leads to a

148
00:05:20,160 --> 00:05:22,639
system that allows the use of existing

149
00:05:22,639 --> 00:05:24,560
languages tools and operating systems

150
00:05:24,560 --> 00:05:27,360
for example a flow fence implementation

151
00:05:27,360 --> 00:05:29,360
at most requires the ubiquitous virtual

152
00:05:29,360 --> 00:05:31,280
memory and secure ipc from the

153
00:05:31,280 --> 00:05:33,680
underlying operating system

154
00:05:33,680 --> 00:05:36,000
so flow fence provides its security

155
00:05:36,000 --> 00:05:38,000
guarantees using two primitives

156
00:05:38,000 --> 00:05:40,639
quarantined modules and opaque handles

157
00:05:40,639 --> 00:05:42,479
i'll explain these with the help of an

158
00:05:42,479 --> 00:05:43,440
example

159
00:05:43,440 --> 00:05:45,199
so consider some code that wants to

160
00:05:45,199 --> 00:05:48,080
compute feature vectors from a bitmap of

161
00:05:48,080 --> 00:05:49,759
a face currently a programmer would

162
00:05:49,759 --> 00:05:51,039
simply write a function or set of

163
00:05:51,039 --> 00:05:53,440
functions that has the right to access

164
00:05:53,440 --> 00:05:55,199
this sensitive data and then it would

165
00:05:55,199 --> 00:05:57,120
return the feature feature set to the

166
00:05:57,120 --> 00:05:58,319
caller

167
00:05:58,319 --> 00:06:00,560
so now for on flow fence the programmer

168
00:06:00,560 --> 00:06:02,400
would write a similar function

169
00:06:02,400 --> 00:06:03,919
but he would have to submit this

170
00:06:03,919 --> 00:06:04,880
function

171
00:06:04,880 --> 00:06:07,440
to run as a quarantine module that

172
00:06:07,440 --> 00:06:09,520
executes in a flow fence provided

173
00:06:09,520 --> 00:06:11,280
sandbox

174
00:06:11,280 --> 00:06:14,400
all data on on flow fence is taint

175
00:06:14,400 --> 00:06:15,600
labeled so in this case stained

176
00:06:15,600 --> 00:06:17,759
underscore bitmap and all of this data

177
00:06:17,759 --> 00:06:20,080
is only available within these flow fan

178
00:06:20,080 --> 00:06:22,720
sandboxes that carefully control how

179
00:06:22,720 --> 00:06:24,960
information flows into and out of an

180
00:06:24,960 --> 00:06:27,440
associated quarantine module

181
00:06:27,440 --> 00:06:29,840
when the time comes for such

182
00:06:29,840 --> 00:06:31,440
module to return

183
00:06:31,440 --> 00:06:33,120
the results of the computation to a

184
00:06:33,120 --> 00:06:35,919
caller flow fence will intercept

185
00:06:35,919 --> 00:06:38,800
that return value and replace it with an

186
00:06:38,800 --> 00:06:41,840
opaque handle so an opaque handle

187
00:06:41,840 --> 00:06:43,680
refers to the sensitive data but it has

188
00:06:43,680 --> 00:06:44,639
several

189
00:06:44,639 --> 00:06:46,000
interesting properties the most

190
00:06:46,000 --> 00:06:48,479
important is that it only refers to the

191
00:06:48,479 --> 00:06:50,639
data but outside the qm you cannot

192
00:06:50,639 --> 00:06:52,880
de-reference

193
00:06:52,880 --> 00:06:54,479
an opaque handle

194
00:06:54,479 --> 00:06:57,280
the only way you can get the raw data

195
00:06:57,280 --> 00:06:59,360
that an opaque handle refers to is by

196
00:06:59,360 --> 00:07:01,520
submitting a qm for execution in one of

197
00:07:01,520 --> 00:07:04,960
flow fences sandboxes

198
00:07:04,960 --> 00:07:07,360
a quarantine module could also try to do

199
00:07:07,360 --> 00:07:09,280
a declassification to achieve useful

200
00:07:09,280 --> 00:07:10,240
work

201
00:07:10,240 --> 00:07:11,680
and the only way to do this on this

202
00:07:11,680 --> 00:07:14,479
framework is to use a trusted sync that

203
00:07:14,479 --> 00:07:16,720
flowfins provides so the trusted sinks

204
00:07:16,720 --> 00:07:19,120
basically read the taint labels off of

205
00:07:19,120 --> 00:07:21,120
the caller and then look up a flow

206
00:07:21,120 --> 00:07:22,160
policy

207
00:07:22,160 --> 00:07:23,919
uh and then basically decide whether the

208
00:07:23,919 --> 00:07:26,479
declassification is allowed or not so

209
00:07:26,479 --> 00:07:27,759
let's see how all of this works in

210
00:07:27,759 --> 00:07:30,479
practice so we have our running face

211
00:07:30,479 --> 00:07:32,560
recognition app example and we have a

212
00:07:32,560 --> 00:07:33,840
main program

213
00:07:33,840 --> 00:07:36,000
that basically calls a module

214
00:07:36,000 --> 00:07:38,400
to compute feature vectors this accesses

215
00:07:38,400 --> 00:07:40,319
an ip camera

216
00:07:40,319 --> 00:07:42,479
essentially a bitmap computes features

217
00:07:42,479 --> 00:07:43,680
and then sends it back to the main

218
00:07:43,680 --> 00:07:44,960
program

219
00:07:44,960 --> 00:07:47,280
the main program then uses another

220
00:07:47,280 --> 00:07:48,879
module to

221
00:07:48,879 --> 00:07:51,599
call report and recognize that takes the

222
00:07:51,599 --> 00:07:54,080
features as input and also accesses the

223
00:07:54,080 --> 00:07:55,840
state of the door

224
00:07:55,840 --> 00:07:57,840
and then assuming this face is

225
00:07:57,840 --> 00:07:59,680
authorized it will go ahead and unlock

226
00:07:59,680 --> 00:08:01,599
this door

227
00:08:01,599 --> 00:08:03,759
similarly it updates the status of the

228
00:08:03,759 --> 00:08:06,800
door to an internet website for a user

229
00:08:06,800 --> 00:08:09,039
now as i said such an app can easily

230
00:08:09,039 --> 00:08:12,160
steal this sensitive information so at

231
00:08:12,160 --> 00:08:15,680
this point what flows um do you think uh

232
00:08:15,680 --> 00:08:18,240
we need to allow on this application uh

233
00:08:18,240 --> 00:08:20,080
so that it functions properly but does

234
00:08:20,080 --> 00:08:22,720
not but cannot leak data arbitrarily so

235
00:08:22,720 --> 00:08:24,160
it's very straightforward to see from

236
00:08:24,160 --> 00:08:26,720
the structure we want to flow from the

237
00:08:26,720 --> 00:08:28,720
door state to the internet and another

238
00:08:28,720 --> 00:08:31,120
flow from the door state and the camera

239
00:08:31,120 --> 00:08:33,599
to the door controller so flow fence

240
00:08:33,599 --> 00:08:36,240
allows developers uh to create and

241
00:08:36,240 --> 00:08:37,839
isolate these flows directly in the

242
00:08:37,839 --> 00:08:39,360
structure of the app

243
00:08:39,360 --> 00:08:42,159
so let's see how that happens uh and

244
00:08:42,159 --> 00:08:44,560
yeah so we do not want uh

245
00:08:44,560 --> 00:08:46,560
to prevent we want to prevent the flow

246
00:08:46,560 --> 00:08:48,880
from you know from the app to leak the

247
00:08:48,880 --> 00:08:50,880
bitmap

248
00:08:50,880 --> 00:08:52,640
so the refactored app

249
00:08:52,640 --> 00:08:55,519
we have a main program that is not a qm

250
00:08:55,519 --> 00:08:58,240
and it goes again and it calls a module

251
00:08:58,240 --> 00:08:59,760
to compute features but this is a

252
00:08:59,760 --> 00:09:02,080
quarantine module running in one of our

253
00:09:02,080 --> 00:09:03,839
sandboxes

254
00:09:03,839 --> 00:09:06,720
this module will access sensitive data

255
00:09:06,720 --> 00:09:09,440
in this case uh this dc refers to the

256
00:09:09,440 --> 00:09:11,760
data of the camera and since all data is

257
00:09:11,760 --> 00:09:14,720
taint labeled tc is that the taint label

258
00:09:14,720 --> 00:09:16,480
of that camera data

259
00:09:16,480 --> 00:09:20,160
when it does this access uh it gets uh

260
00:09:20,160 --> 00:09:23,040
the the sandbox running the qm is

261
00:09:23,040 --> 00:09:25,279
labeled with that same paint label

262
00:09:25,279 --> 00:09:27,600
so now qm features has computed its its

263
00:09:27,600 --> 00:09:29,839
vectors and when it does return as i

264
00:09:29,839 --> 00:09:31,440
said flow fence is going to intercept

265
00:09:31,440 --> 00:09:33,440
that return value and convert it into

266
00:09:33,440 --> 00:09:35,680
this opaque handle

267
00:09:35,680 --> 00:09:37,279
which basically refers to the

268
00:09:37,279 --> 00:09:39,519
transformation of the input data so h1

269
00:09:39,519 --> 00:09:40,959
is the opaque handle

270
00:09:40,959 --> 00:09:44,399
so now the only uh useful thing uh this

271
00:09:44,399 --> 00:09:46,800
app the main program the non-qm code can

272
00:09:46,800 --> 00:09:47,519
do

273
00:09:47,519 --> 00:09:49,680
with this handle is to simply send it to

274
00:09:49,680 --> 00:09:51,200
another qm because

275
00:09:51,200 --> 00:09:53,600
outside the qm handle does not

276
00:09:53,600 --> 00:09:56,160
it is not the raw sensitive data

277
00:09:56,160 --> 00:09:57,760
so here it sends it to another

278
00:09:57,760 --> 00:10:00,720
recognizer qm this qm also accesses the

279
00:10:00,720 --> 00:10:03,360
door state data labeled differently and

280
00:10:03,360 --> 00:10:05,519
now since this qm has

281
00:10:05,519 --> 00:10:07,200
accessed data from two different kinds

282
00:10:07,200 --> 00:10:09,519
of sources uh the taint labels on the

283
00:10:09,519 --> 00:10:11,760
sandbox running that particular qm

284
00:10:11,760 --> 00:10:14,000
basically reflect that it is accessed

285
00:10:14,000 --> 00:10:16,640
camera data and door state data

286
00:10:16,640 --> 00:10:18,399
now again assuming this

287
00:10:18,399 --> 00:10:21,440
face is recognized uh it's going to try

288
00:10:21,440 --> 00:10:23,440
to do a declassification to the door

289
00:10:23,440 --> 00:10:24,560
controller

290
00:10:24,560 --> 00:10:27,120
so the app will use one of flow fences

291
00:10:27,120 --> 00:10:29,839
trusted apis to do this but before the

292
00:10:29,839 --> 00:10:30,800
trusted

293
00:10:30,800 --> 00:10:32,880
api allows the declassification to

294
00:10:32,880 --> 00:10:34,000
succeed

295
00:10:34,000 --> 00:10:35,040
um

296
00:10:35,040 --> 00:10:36,720
it's going to basically

297
00:10:36,720 --> 00:10:39,200
read the taint labels off of the caller

298
00:10:39,200 --> 00:10:41,040
and then look up flow policies that i've

299
00:10:41,040 --> 00:10:43,920
shown in red here so the flow policy

300
00:10:43,920 --> 00:10:45,519
basically says that

301
00:10:45,519 --> 00:10:47,839
the camera data and this door state data

302
00:10:47,839 --> 00:10:50,480
can basically flow to the door actuator

303
00:10:50,480 --> 00:10:51,920
so in this case this flow will be

304
00:10:51,920 --> 00:10:53,519
allowed to go through

305
00:10:53,519 --> 00:10:55,920
similarly we have another quarantine

306
00:10:55,920 --> 00:10:58,640
module a qm report that simply reads the

307
00:10:58,640 --> 00:11:01,040
status of the door and declassifies that

308
00:11:01,040 --> 00:11:02,720
to the internet and we have a

309
00:11:02,720 --> 00:11:04,560
corresponding flow policy that allows

310
00:11:04,560 --> 00:11:05,839
this

311
00:11:05,839 --> 00:11:08,480
now this app could try to basically leak

312
00:11:08,480 --> 00:11:09,279
this

313
00:11:09,279 --> 00:11:11,440
opaque handle the non-qm code could try

314
00:11:11,440 --> 00:11:13,360
to do this but this is of no value to

315
00:11:13,360 --> 00:11:14,640
the attacker because it is not the

316
00:11:14,640 --> 00:11:16,320
sensitive data

317
00:11:16,320 --> 00:11:18,640
this app could also try to you know just

318
00:11:18,640 --> 00:11:20,160
try to leak the camera data to the

319
00:11:20,160 --> 00:11:22,399
internet but there is no flow policy

320
00:11:22,399 --> 00:11:24,480
that allows such a flow therefore that

321
00:11:24,480 --> 00:11:26,160
is also going to be denied

322
00:11:26,160 --> 00:11:27,839
so in this way a developer can basically

323
00:11:27,839 --> 00:11:29,440
restructure this app to better respect

324
00:11:29,440 --> 00:11:31,839
the sensitivity of all of the iot data

325
00:11:31,839 --> 00:11:33,760
it's working with um and in this way we

326
00:11:33,760 --> 00:11:36,320
can create and isolate flows

327
00:11:36,320 --> 00:11:38,079
so let me go into little more detail on

328
00:11:38,079 --> 00:11:40,320
the design of these labels and the flow

329
00:11:40,320 --> 00:11:41,519
policies

330
00:11:41,519 --> 00:11:43,920
so as i said uh an opaque handle is

331
00:11:43,920 --> 00:11:46,800
associated with a set of taint labels

332
00:11:46,800 --> 00:11:49,120
and each of the stained labels of the is

333
00:11:49,120 --> 00:11:50,800
a tuple of the form

334
00:11:50,800 --> 00:11:51,760
uh

335
00:11:51,760 --> 00:11:54,079
an application identifier and a label

336
00:11:54,079 --> 00:11:55,200
name

337
00:11:55,200 --> 00:11:58,959
so uh this application identifier is uh

338
00:11:58,959 --> 00:12:00,399
unique on the underlying operating

339
00:12:00,399 --> 00:12:01,600
system

340
00:12:01,600 --> 00:12:02,720
and the label name is simply a

341
00:12:02,720 --> 00:12:04,880
well-known string that describes the the

342
00:12:04,880 --> 00:12:07,519
type of data so since we use android as

343
00:12:07,519 --> 00:12:09,040
our

344
00:12:09,040 --> 00:12:12,000
implementation platform we simply use uh

345
00:12:12,000 --> 00:12:13,360
package names

346
00:12:13,360 --> 00:12:15,959
as the application identifier so here

347
00:12:15,959 --> 00:12:18,560
com.camera.publisher is one example

348
00:12:18,560 --> 00:12:20,160
and the label name is stained underscore

349
00:12:20,160 --> 00:12:21,600
camera

350
00:12:21,600 --> 00:12:23,839
so now the policy is simply a set of

351
00:12:23,839 --> 00:12:26,720
flow rules each flow rule is of the form

352
00:12:26,720 --> 00:12:29,040
taint label flows to sync so here we

353
00:12:29,040 --> 00:12:30,639
have two flow rules that allow camera

354
00:12:30,639 --> 00:12:33,040
data to go to the ui and heart rate data

355
00:12:33,040 --> 00:12:35,040
to go to the internet

356
00:12:35,040 --> 00:12:38,399
so building on this label design

357
00:12:38,399 --> 00:12:40,320
we come up with the idea of publishing

358
00:12:40,320 --> 00:12:42,320
and consumer flow policies to better

359
00:12:42,320 --> 00:12:44,880
support practical iot apps so a

360
00:12:44,880 --> 00:12:47,680
publisher policy

361
00:12:47,680 --> 00:12:49,680
gives publishers of sensitive data such

362
00:12:49,680 --> 00:12:52,000
as a heart rate monitor a chance to

363
00:12:52,000 --> 00:12:53,120
express

364
00:12:53,120 --> 00:12:55,920
legal uses of all of its data

365
00:12:55,920 --> 00:12:58,480
so in this example

366
00:12:58,480 --> 00:13:01,279
it allows the flow of d1 to s2

367
00:13:01,279 --> 00:13:03,200
and d1 to s1

368
00:13:03,200 --> 00:13:04,959
but in practice

369
00:13:04,959 --> 00:13:07,040
it's difficult for a publisher to

370
00:13:07,040 --> 00:13:09,040
predict all uses of its data in advance

371
00:13:09,040 --> 00:13:10,880
so we also introduced the notion of a

372
00:13:10,880 --> 00:13:12,480
discretionary style

373
00:13:12,480 --> 00:13:15,519
consumer policy that basically gives a

374
00:13:15,519 --> 00:13:17,839
consumer a chance to request

375
00:13:17,839 --> 00:13:19,920
intended data flows so in this case it

376
00:13:19,920 --> 00:13:23,120
wants to send d1 to s3 and d1 to s1

377
00:13:23,120 --> 00:13:24,320
so at this point we have like

378
00:13:24,320 --> 00:13:26,720
conflicting policies right how do we how

379
00:13:26,720 --> 00:13:28,480
does flow fence reconcile these two

380
00:13:28,480 --> 00:13:31,120
policies to get a single policy that we

381
00:13:31,120 --> 00:13:32,959
can apply to any given app

382
00:13:32,959 --> 00:13:35,120
so we do this using a two-stage process

383
00:13:35,120 --> 00:13:37,920
first we simply compute a intersection

384
00:13:37,920 --> 00:13:40,639
of the publisher and the consumer policy

385
00:13:40,639 --> 00:13:42,639
and any intersecting rules are basically

386
00:13:42,639 --> 00:13:44,639
applied for that app

387
00:13:44,639 --> 00:13:46,720
and then we compute a difference between

388
00:13:46,720 --> 00:13:49,360
consumer policy and the publisher policy

389
00:13:49,360 --> 00:13:51,760
and any difference rules

390
00:13:51,760 --> 00:13:54,160
will be surfaced as a flow request to

391
00:13:54,160 --> 00:13:56,720
the user so at this point a user has to

392
00:13:56,720 --> 00:13:58,720
decide whether to approve or deny a

393
00:13:58,720 --> 00:14:00,880
particular flow request

394
00:14:00,880 --> 00:14:03,120
so to round out a running example uh

395
00:14:03,120 --> 00:14:05,920
here is the policy set uh for our face

396
00:14:05,920 --> 00:14:07,920
recognition example so the publisher

397
00:14:07,920 --> 00:14:10,000
only allows that okay i can you the app

398
00:14:10,000 --> 00:14:12,399
can show the camera data to the user via

399
00:14:12,399 --> 00:14:13,440
the ui

400
00:14:13,440 --> 00:14:14,800
and the consumer

401
00:14:14,800 --> 00:14:16,720
needs the three flows of the camera to

402
00:14:16,720 --> 00:14:18,480
the door controller door state to the

403
00:14:18,480 --> 00:14:20,480
door controller and door state to the

404
00:14:20,480 --> 00:14:23,040
internet so in this case the user would

405
00:14:23,040 --> 00:14:25,040
be prompted

406
00:14:25,040 --> 00:14:26,560
to approve or deny all of these three

407
00:14:26,560 --> 00:14:28,320
flows

408
00:14:28,320 --> 00:14:30,160
and the final piece we need for you know

409
00:14:30,160 --> 00:14:32,720
for a practical secure iot framework for

410
00:14:32,720 --> 00:14:34,880
these applications is some data sharing

411
00:14:34,880 --> 00:14:37,360
mechanism between uh publishers and

412
00:14:37,360 --> 00:14:40,240
consumers so we we distilled three key

413
00:14:40,240 --> 00:14:42,320
properties we need to support uh from

414
00:14:42,320 --> 00:14:44,959
our framework study the first one is a

415
00:14:44,959 --> 00:14:46,560
simple polling interface where

416
00:14:46,560 --> 00:14:48,800
applications simply check publishers for

417
00:14:48,800 --> 00:14:49,839
new data

418
00:14:49,839 --> 00:14:51,519
similarly a callback interface where an

419
00:14:51,519 --> 00:14:53,519
application is given a callback these

420
00:14:53,519 --> 00:14:55,519
are fairly obvious fairly standard very

421
00:14:55,519 --> 00:14:57,040
well known patterns

422
00:14:57,040 --> 00:14:59,519
we also found a third pattern which is

423
00:14:59,519 --> 00:15:01,600
device independence so consider an

424
00:15:01,600 --> 00:15:04,160
example a heart rate monitor device

425
00:15:04,160 --> 00:15:06,480
there are several kinds of devices

426
00:15:06,480 --> 00:15:08,079
of this type and all of them produce the

427
00:15:08,079 --> 00:15:09,920
same kind of heartbeat data

428
00:15:09,920 --> 00:15:12,639
so ideally consumers should only need to

429
00:15:12,639 --> 00:15:15,440
specify what data they want without

430
00:15:15,440 --> 00:15:17,519
specifying how so this would involve

431
00:15:17,519 --> 00:15:19,519
they don't need to specify details like

432
00:15:19,519 --> 00:15:21,839
uh you know ble connections and z-wave

433
00:15:21,839 --> 00:15:23,839
pairings and all of that

434
00:15:23,839 --> 00:15:25,760
so flow fence supports these three

435
00:15:25,760 --> 00:15:29,199
properties uh using two uh two two two

436
00:15:29,199 --> 00:15:32,720
mechanism two mechanisms uh securely

437
00:15:32,720 --> 00:15:35,440
so the first is a key value store that

438
00:15:35,440 --> 00:15:37,600
supports the polling interface

439
00:15:37,600 --> 00:15:40,639
so here each app on flow fans gets its

440
00:15:40,639 --> 00:15:42,240
own kv store

441
00:15:42,240 --> 00:15:45,040
making it the owner for that store

442
00:15:45,040 --> 00:15:47,120
and then each owner is allowed to write

443
00:15:47,120 --> 00:15:48,639
to its own kv store but there is no

444
00:15:48,639 --> 00:15:50,720
restriction on where an app can read

445
00:15:50,720 --> 00:15:51,680
from

446
00:15:51,680 --> 00:15:53,600
and finally fundamentally keys are

447
00:15:53,600 --> 00:15:55,759
public information because

448
00:15:55,759 --> 00:15:57,680
they have to be already like the the

449
00:15:57,680 --> 00:15:59,600
consumer should already know about a key

450
00:15:59,600 --> 00:16:01,440
if a publisher and consumer are to talk

451
00:16:01,440 --> 00:16:03,199
to each other so let's look at an

452
00:16:03,199 --> 00:16:05,680
example we have qm one here that has

453
00:16:05,680 --> 00:16:09,120
some sensitive data t1 and then we have

454
00:16:09,120 --> 00:16:12,240
a key called cam underscore bitmap

455
00:16:12,240 --> 00:16:13,360
so when this

456
00:16:13,360 --> 00:16:15,440
qm wants to publish data it simply does

457
00:16:15,440 --> 00:16:18,079
write specifying the name of the key

458
00:16:18,079 --> 00:16:20,560
this data goes into the kv store and

459
00:16:20,560 --> 00:16:23,120
also the taint label and later on when

460
00:16:23,120 --> 00:16:24,399
qm2

461
00:16:24,399 --> 00:16:26,160
wants to read some sensitive data this

462
00:16:26,160 --> 00:16:28,240
may be from another app it will simply

463
00:16:28,240 --> 00:16:29,839
issue a read specifying the name of the

464
00:16:29,839 --> 00:16:31,920
key and then it will automatically

465
00:16:31,920 --> 00:16:33,600
inherit the change label and it will

466
00:16:33,600 --> 00:16:36,079
receive the data in return

467
00:16:36,079 --> 00:16:37,759
now since the key is public information

468
00:16:37,759 --> 00:16:39,759
we must ensure it's not affected by

469
00:16:39,759 --> 00:16:41,680
sensitive data therefore we require that

470
00:16:41,680 --> 00:16:44,639
this key is created outside the qm where

471
00:16:44,639 --> 00:16:46,480
there is no sensitive data so this is to

472
00:16:46,480 --> 00:16:48,399
prevent publishers and consumers from

473
00:16:48,399 --> 00:16:50,000
trying to exchange data by stripping

474
00:16:50,000 --> 00:16:52,000
obtains

475
00:16:52,000 --> 00:16:53,839
the second mechanism

476
00:16:53,839 --> 00:16:55,680
is called event channels and this

477
00:16:55,680 --> 00:16:58,480
supports uh the callback interface

478
00:16:58,480 --> 00:17:01,120
um so here applications can declare

479
00:17:01,120 --> 00:17:03,759
statically at install time a set of

480
00:17:03,759 --> 00:17:06,240
channels that they want uh making them

481
00:17:06,240 --> 00:17:07,520
making that app the owner for all of

482
00:17:07,520 --> 00:17:10,079
these channels similar to kv stores only

483
00:17:10,079 --> 00:17:12,400
the owner can fire an event

484
00:17:12,400 --> 00:17:14,640
on any given channel it owns

485
00:17:14,640 --> 00:17:16,319
and again this channel name has to be

486
00:17:16,319 --> 00:17:18,880
public information fundamentally because

487
00:17:18,880 --> 00:17:20,480
publishers and consumers need to know

488
00:17:20,480 --> 00:17:22,319
about the name of the channel if they

489
00:17:22,319 --> 00:17:23,679
are to communicate

490
00:17:23,679 --> 00:17:25,599
so another quick example we have our

491
00:17:25,599 --> 00:17:28,240
same qm1 that has some sensitive data

492
00:17:28,240 --> 00:17:30,480
labeled t1

493
00:17:30,480 --> 00:17:33,440
oh and then we have a subscriber qm that

494
00:17:33,440 --> 00:17:35,520
can issue a subscribe call by specifying

495
00:17:35,520 --> 00:17:37,760
the public name of the channel um and

496
00:17:37,760 --> 00:17:41,120
then it can name a qm for uh callback

497
00:17:41,120 --> 00:17:43,600
so then later on qm1 can issue a fire

498
00:17:43,600 --> 00:17:45,840
event specifying the name of the channel

499
00:17:45,840 --> 00:17:47,919
and this results in

500
00:17:47,919 --> 00:17:50,320
this data flowing through the channel

501
00:17:50,320 --> 00:17:52,880
and being delivered to the qm too

502
00:17:52,880 --> 00:17:54,799
and the taint label will automatically

503
00:17:54,799 --> 00:17:57,679
be inherited by qm2

504
00:17:57,679 --> 00:17:59,360
we support multiple search channels and

505
00:17:59,360 --> 00:18:01,039
multiple subscribers can be on a single

506
00:18:01,039 --> 00:18:02,160
channel

507
00:18:02,160 --> 00:18:03,440
and as before

508
00:18:03,440 --> 00:18:05,600
the name has to be created outside

509
00:18:05,600 --> 00:18:07,760
outside eqm to ensure that it is not

510
00:18:07,760 --> 00:18:09,760
influenced by sensitive data because

511
00:18:09,760 --> 00:18:11,200
there is no sensitive data outside the

512
00:18:11,200 --> 00:18:13,200
qm

513
00:18:13,200 --> 00:18:15,280
so in terms of implementation generally

514
00:18:15,280 --> 00:18:17,440
today we see two kinds of iot

515
00:18:17,440 --> 00:18:19,280
architectures we see like a cloud first

516
00:18:19,280 --> 00:18:20,640
architecture and we see a hub first

517
00:18:20,640 --> 00:18:22,320
architecture

518
00:18:22,320 --> 00:18:24,160
we focus on the hub first architecture

519
00:18:24,160 --> 00:18:26,799
due to its robustness and its popularity

520
00:18:26,799 --> 00:18:29,360
therefore we simply use an android phone

521
00:18:29,360 --> 00:18:31,360
as our hub and we have written some

522
00:18:31,360 --> 00:18:33,200
bridge code to interface with the

523
00:18:33,200 --> 00:18:35,120
smartthings platform and the google fit

524
00:18:35,120 --> 00:18:38,080
platform so that we can run run reality

525
00:18:38,080 --> 00:18:39,520
applications

526
00:18:39,520 --> 00:18:40,960
so in terms of implementation

527
00:18:40,960 --> 00:18:43,039
architecture our

528
00:18:43,039 --> 00:18:45,039
applications are simply regular android

529
00:18:45,039 --> 00:18:47,600
apps bundled bundled with code and

530
00:18:47,600 --> 00:18:49,679
resources

531
00:18:49,679 --> 00:18:52,480
and the trusted service runs in its own

532
00:18:52,480 --> 00:18:54,559
context and it maintains

533
00:18:54,559 --> 00:18:56,400
the opaque handle table which is

534
00:18:56,400 --> 00:18:59,360
basically the mapping between

535
00:18:59,360 --> 00:19:02,000
raw data values and the handles

536
00:19:02,000 --> 00:19:04,160
and the sandboxes use the isolated

537
00:19:04,160 --> 00:19:05,200
process

538
00:19:05,200 --> 00:19:07,760
uh feature of android that

539
00:19:07,760 --> 00:19:09,200
controls how

540
00:19:09,200 --> 00:19:10,880
what channel the channels through which

541
00:19:10,880 --> 00:19:13,679
information enters and exits the process

542
00:19:13,679 --> 00:19:15,840
this also supports a native code a

543
00:19:15,840 --> 00:19:18,400
property which we use uh in our later

544
00:19:18,400 --> 00:19:20,160
evaluation

545
00:19:20,160 --> 00:19:22,000
so in terms of evaluation we looked at

546
00:19:22,000 --> 00:19:24,640
this system from our three perspectives

547
00:19:24,640 --> 00:19:26,080
from a micro level we looked at

548
00:19:26,080 --> 00:19:28,640
computational and memory overhead we

549
00:19:28,640 --> 00:19:31,360
studied memory overhead qm call latency

550
00:19:31,360 --> 00:19:32,880
and data transfer

551
00:19:32,880 --> 00:19:35,120
bandwidth into the sandbox and we find

552
00:19:35,120 --> 00:19:36,640
that all of these

553
00:19:36,640 --> 00:19:39,039
these overheads are reasonable given our

554
00:19:39,039 --> 00:19:41,280
cyber physical application domain for

555
00:19:41,280 --> 00:19:42,400
example

556
00:19:42,400 --> 00:19:44,160
call latency or 92 milliseconds is

557
00:19:44,160 --> 00:19:45,600
comparable to

558
00:19:45,600 --> 00:19:47,600
iot device operations over a wide area

559
00:19:47,600 --> 00:19:48,720
network

560
00:19:48,720 --> 00:19:50,160
and this

561
00:19:50,160 --> 00:19:52,799
our bandwidth of basically accommodates

562
00:19:52,799 --> 00:19:54,720
uh can easily accommodate the peak

563
00:19:54,720 --> 00:19:57,919
bandwidth of a typical ip camera

564
00:19:57,919 --> 00:19:59,760
the second question is can we support

565
00:19:59,760 --> 00:20:02,000
now real apps in a functional and secure

566
00:20:02,000 --> 00:20:04,320
way and to show this we ported three

567
00:20:04,320 --> 00:20:06,320
existing iot applications to this

568
00:20:06,320 --> 00:20:08,400
framework and we found that it requires

569
00:20:08,400 --> 00:20:10,799
adding less than 140 lines of code per

570
00:20:10,799 --> 00:20:12,559
app i mean we found it was fairly

571
00:20:12,559 --> 00:20:14,080
straightforward to

572
00:20:14,080 --> 00:20:17,039
basically create and isolate these flows

573
00:20:17,039 --> 00:20:19,440
and finally we also looked at

574
00:20:19,440 --> 00:20:22,080
macro performance factors for throughput

575
00:20:22,080 --> 00:20:23,840
and end-to-end latency for critical

576
00:20:23,840 --> 00:20:25,039
operations

577
00:20:25,039 --> 00:20:26,960
on these apps so i'm just going to focus

578
00:20:26,960 --> 00:20:28,559
on these two please see the paper for

579
00:20:28,559 --> 00:20:31,440
details on the micro benchmarks

580
00:20:31,440 --> 00:20:33,760
so we the first app we ported is a smart

581
00:20:33,760 --> 00:20:36,000
lights app it basically

582
00:20:36,000 --> 00:20:39,039
monitors a beacon around the geofence

583
00:20:39,039 --> 00:20:40,880
that is around the home and if this

584
00:20:40,880 --> 00:20:42,880
beacon enters the geofence it basically

585
00:20:42,880 --> 00:20:44,880
activates lights around the home

586
00:20:44,880 --> 00:20:46,799
the only flow we needed

587
00:20:46,799 --> 00:20:48,880
to authorize for this app was to flow

588
00:20:48,880 --> 00:20:51,440
location to switch and the data security

589
00:20:51,440 --> 00:20:53,440
risk was that this app can leak location

590
00:20:53,440 --> 00:20:55,200
information because it has access to the

591
00:20:55,200 --> 00:20:58,240
geofence and the location beacons

592
00:20:58,240 --> 00:21:00,080
the second one as you know by now face

593
00:21:00,080 --> 00:21:02,559
door is our face recognition application

594
00:21:02,559 --> 00:21:06,080
um it leaks it can leak images of people

595
00:21:06,080 --> 00:21:07,679
and we require

596
00:21:07,679 --> 00:21:09,600
three flows to ensure that it is

597
00:21:09,600 --> 00:21:11,440
functional and secure

598
00:21:11,440 --> 00:21:13,120
and finally we looked at a heart rate

599
00:21:13,120 --> 00:21:16,159
monitor application that measures uh

600
00:21:16,159 --> 00:21:18,720
heartbeats using the camera

601
00:21:18,720 --> 00:21:20,320
and the security risk here is that it

602
00:21:20,320 --> 00:21:22,400
can leak these images and this heart

603
00:21:22,400 --> 00:21:24,799
rate information and since the only

604
00:21:24,799 --> 00:21:26,880
function of this app is to compute the

605
00:21:26,880 --> 00:21:28,720
heart rate and show it to the user the

606
00:21:28,720 --> 00:21:30,480
only floor really needs is to take the

607
00:21:30,480 --> 00:21:32,720
camera data and show it to the ui

608
00:21:32,720 --> 00:21:34,960
so in terms of effort we ported the

609
00:21:34,960 --> 00:21:36,880
first two apps in two days of effort

610
00:21:36,880 --> 00:21:37,919
each

611
00:21:37,919 --> 00:21:38,640
and

612
00:21:38,640 --> 00:21:40,720
the the heart rate monitor took a single

613
00:21:40,720 --> 00:21:43,360
day of porting effort these are standard

614
00:21:43,360 --> 00:21:45,280
work days and it was done by a person

615
00:21:45,280 --> 00:21:46,240
who was

616
00:21:46,240 --> 00:21:48,159
who was just introduced to the flow fans

617
00:21:48,159 --> 00:21:49,840
api

618
00:21:49,840 --> 00:21:51,440
finally in terms of the macro

619
00:21:51,440 --> 00:21:54,240
performance factors um we studied end

620
00:21:54,240 --> 00:21:56,159
role latency for face door which we

621
00:21:56,159 --> 00:21:58,880
define as the time the app is given a

622
00:21:58,880 --> 00:22:01,760
bitmap until the time it computes these

623
00:22:01,760 --> 00:22:03,679
feature vectors

624
00:22:03,679 --> 00:22:05,039
and we see approximately 100

625
00:22:05,039 --> 00:22:07,600
milliseconds increase in latency

626
00:22:07,600 --> 00:22:09,440
due to the qm call latency as well as

627
00:22:09,440 --> 00:22:11,520
the inter process transfers

628
00:22:11,520 --> 00:22:13,919
we also looked at recognition latency

629
00:22:13,919 --> 00:22:15,520
uh which is the time the app is given

630
00:22:15,520 --> 00:22:16,799
feature vectors and then it does a

631
00:22:16,799 --> 00:22:18,400
matching in a database

632
00:22:18,400 --> 00:22:20,799
um and on average we see a very more

633
00:22:20,799 --> 00:22:23,200
reasonable increase in latency

634
00:22:23,200 --> 00:22:25,120
and this does not affect it does not

635
00:22:25,120 --> 00:22:27,120
cause user noticeable delays in you know

636
00:22:27,120 --> 00:22:28,559
actually recognizing a face and then

637
00:22:28,559 --> 00:22:30,480
going and physically activating a door

638
00:22:30,480 --> 00:22:32,080
lock

639
00:22:32,080 --> 00:22:34,400
we also studied end to end latency for

640
00:22:34,400 --> 00:22:37,200
smart lights and so this is defined as

641
00:22:37,200 --> 00:22:39,039
the time and location we can enter the

642
00:22:39,039 --> 00:22:41,840
geofence till the time uh the lights are

643
00:22:41,840 --> 00:22:44,400
actually turned on or off um and again

644
00:22:44,400 --> 00:22:47,600
100 millisecond approximate increase um

645
00:22:47,600 --> 00:22:49,280
and this of course is not does not cause

646
00:22:49,280 --> 00:22:51,120
user noticeable delays because a person

647
00:22:51,120 --> 00:22:53,120
has to like physically walk through the

648
00:22:53,120 --> 00:22:54,799
fence and you know open the door and by

649
00:22:54,799 --> 00:22:58,000
the time the lights are already on

650
00:22:58,480 --> 00:23:00,480
the and finally we looked at throughput

651
00:23:00,480 --> 00:23:03,440
for the heart rate monitor app

652
00:23:03,440 --> 00:23:05,280
measured in frames per second

653
00:23:05,280 --> 00:23:07,360
and we observed very slight decrease in

654
00:23:07,360 --> 00:23:08,880
throughput but this does not affect the

655
00:23:08,880 --> 00:23:11,200
ability of this app to compute the

656
00:23:11,200 --> 00:23:15,120
heartbeat data and display to the user

657
00:23:15,120 --> 00:23:18,159
so in summary uh several emerging iot

658
00:23:18,159 --> 00:23:20,480
frameworks enable third-party developers

659
00:23:20,480 --> 00:23:22,880
to build applications but they only

660
00:23:22,880 --> 00:23:24,960
support permission based access control

661
00:23:24,960 --> 00:23:26,640
and this can lead to malicious apps that

662
00:23:26,640 --> 00:23:29,360
steal the sensitive data easily

663
00:23:29,360 --> 00:23:31,919
we built flow fence a system that

664
00:23:31,919 --> 00:23:34,080
embeds control and data flows

665
00:23:34,080 --> 00:23:36,240
directly within application structure

666
00:23:36,240 --> 00:23:38,240
and to do developers must split their

667
00:23:38,240 --> 00:23:41,919
apps uh into into two logical pieces a

668
00:23:41,919 --> 00:23:44,400
set of communicating quarantine modules

669
00:23:44,400 --> 00:23:46,640
that exchange information with each

670
00:23:46,640 --> 00:23:48,840
other through these taint tracked opaque

671
00:23:48,840 --> 00:23:50,559
references

672
00:23:50,559 --> 00:23:52,159
and then the other logical piece is

673
00:23:52,159 --> 00:23:53,919
non-sensitive code

674
00:23:53,919 --> 00:23:55,840
executes outside qms and it just

675
00:23:55,840 --> 00:23:59,600
orchestrates qms to achieve useful work

676
00:23:59,600 --> 00:24:01,360
we introduced the notion of publisher

677
00:24:01,360 --> 00:24:03,279
and consumer policies

678
00:24:03,279 --> 00:24:05,440
for these iot apps and we find that such

679
00:24:05,440 --> 00:24:07,279
policies lend themselves well to

680
00:24:07,279 --> 00:24:10,400
building practical iot apps

681
00:24:10,400 --> 00:24:12,720
we ported three existing iot apps in

682
00:24:12,720 --> 00:24:14,000
five days

683
00:24:14,000 --> 00:24:16,240
each required adding less than 140 lines

684
00:24:16,240 --> 00:24:18,720
of code per app and finally macro

685
00:24:18,720 --> 00:24:20,159
performance tests indicate that the

686
00:24:20,159 --> 00:24:22,000
overheads are reasonable given our cyber

687
00:24:22,000 --> 00:24:24,400
physical application domain

688
00:24:24,400 --> 00:24:28,360
thank you and take questions

689
00:24:30,580 --> 00:24:35,179
[Applause]

690
00:24:39,679 --> 00:24:42,240
um thank you um

691
00:24:42,240 --> 00:24:44,400
so

692
00:24:44,840 --> 00:24:49,440
um so basically in this approach

693
00:24:49,440 --> 00:24:52,400
the developer of the application need to

694
00:24:52,400 --> 00:24:55,520
embed these uh policies right

695
00:24:55,520 --> 00:24:57,440
so what happens is uh

696
00:24:57,440 --> 00:24:59,360
what happens what happens if the

697
00:24:59,360 --> 00:25:01,360
developer does uh

698
00:25:01,360 --> 00:25:04,000
not to want to basically put these

699
00:25:04,000 --> 00:25:07,039
flow policies inside

700
00:25:07,039 --> 00:25:09,440
and tries to leak some information so i

701
00:25:09,440 --> 00:25:12,000
mean the assumption here is that

702
00:25:12,000 --> 00:25:14,000
the only way to write the application

703
00:25:14,000 --> 00:25:16,880
would be to use flow fences to use flow

704
00:25:16,880 --> 00:25:18,799
fans like think of it as like writing

705
00:25:18,799 --> 00:25:20,960
against an api right like you're writing

706
00:25:20,960 --> 00:25:22,240
you write applications against the

707
00:25:22,240 --> 00:25:23,760
android api

708
00:25:23,760 --> 00:25:24,960
and you have to do that there's no other

709
00:25:24,960 --> 00:25:27,039
way to write an application here you

710
00:25:27,039 --> 00:25:28,400
have to write an application against the

711
00:25:28,400 --> 00:25:29,919
flow fans api

712
00:25:29,919 --> 00:25:34,400
so that will be the only option yes okay

713
00:25:36,720 --> 00:25:38,960
so can you comment maybe also on the

714
00:25:38,960 --> 00:25:41,360
integrations of what you see is that

715
00:25:41,360 --> 00:25:43,440
developers would from the beginning

716
00:25:43,440 --> 00:25:46,080
develop apps with having flow fans in

717
00:25:46,080 --> 00:25:48,240
mind supporting it directly or taking

718
00:25:48,240 --> 00:25:51,039
the retrospective perspective of like

719
00:25:51,039 --> 00:25:53,039
porting it as you did and then like

720
00:25:53,039 --> 00:25:55,440
uploading a second version for

721
00:25:55,440 --> 00:25:58,559
so our vision is that uh developers

722
00:25:58,559 --> 00:26:00,559
directly write applications for a flow

723
00:26:00,559 --> 00:26:02,640
fence like framework um and this makes

724
00:26:02,640 --> 00:26:04,480
sense because we are only beginning to

725
00:26:04,480 --> 00:26:07,760
see uh iot applications there's not a

726
00:26:07,760 --> 00:26:09,840
whole lot of applications that we have

727
00:26:09,840 --> 00:26:11,600
to really be backward compatible with or

728
00:26:11,600 --> 00:26:12,799
worry about

729
00:26:12,799 --> 00:26:14,400
uh because this is still all emerging

730
00:26:14,400 --> 00:26:17,600
technology so although porting is easy

731
00:26:17,600 --> 00:26:20,480
uh it may it shows the value of how easy

732
00:26:20,480 --> 00:26:22,640
we can easily we can port the whatever

733
00:26:22,640 --> 00:26:24,799
small existing set of apps are there the

734
00:26:24,799 --> 00:26:26,880
real usage model would be to

735
00:26:26,880 --> 00:26:29,360
uh to write apps directly with flow fans

736
00:26:29,360 --> 00:26:31,760
in mind

737
00:26:32,159 --> 00:26:35,200
any further questions

738
00:26:36,799 --> 00:26:38,799
i think everybody is hungry so thanks a

739
00:26:38,799 --> 00:26:42,360
lot for the presentation

