1
00:00:10,559 --> 00:00:13,280
so my name is eric dier i'm phd student

2
00:00:13,280 --> 00:00:15,599
at cispa and today i'm going to present

3
00:00:15,599 --> 00:00:18,320
joint work on demystifying the android

4
00:00:18,320 --> 00:00:20,320
application framework

5
00:00:20,320 --> 00:00:22,400
so the first question that comes in mind

6
00:00:22,400 --> 00:00:23,199
is

7
00:00:23,199 --> 00:00:25,439
why do we need to demystify the android

8
00:00:25,439 --> 00:00:27,279
application framework

9
00:00:27,279 --> 00:00:28,960
and the answer is it's because the

10
00:00:28,960 --> 00:00:31,119
framework internals are still largely a

11
00:00:31,119 --> 00:00:33,680
black box for us and as a consequence we

12
00:00:33,680 --> 00:00:36,079
do not know how these internals

13
00:00:36,079 --> 00:00:38,559
influence both platform security and

14
00:00:38,559 --> 00:00:40,160
user privacy

15
00:00:40,160 --> 00:00:42,399
and even worse we do not have a

16
00:00:42,399 --> 00:00:45,120
comprehensive methodology on how to

17
00:00:45,120 --> 00:00:48,960
analyze the framework in the first place

18
00:00:48,960 --> 00:00:50,640
this would require to have a solid

19
00:00:50,640 --> 00:00:53,280
understanding of any platform-specific

20
00:00:53,280 --> 00:00:55,600
peculiarities that would impede such a

21
00:00:55,600 --> 00:00:57,760
static analysis

22
00:00:57,760 --> 00:01:00,000
and if we have a look to

23
00:01:00,000 --> 00:01:02,480
static android application analysis we

24
00:01:02,480 --> 00:01:04,879
see that over the last years there has

25
00:01:04,879 --> 00:01:07,760
been a dedicated line of work that

26
00:01:07,760 --> 00:01:10,240
establishes such a knowledge for android

27
00:01:10,240 --> 00:01:11,680
applications

28
00:01:11,680 --> 00:01:14,960
this includes approaches to enumerate

29
00:01:14,960 --> 00:01:16,000
all the

30
00:01:16,000 --> 00:01:18,320
application entry points

31
00:01:18,320 --> 00:01:20,479
moreover there are approaches to

32
00:01:20,479 --> 00:01:24,159
generate a static runtime model that

33
00:01:24,159 --> 00:01:26,159
approximate complex application

34
00:01:26,159 --> 00:01:27,920
lifecycle behavior

35
00:01:27,920 --> 00:01:29,920
and finally there are techniques to

36
00:01:29,920 --> 00:01:32,720
automatically compile lists of sensitive

37
00:01:32,720 --> 00:01:35,040
sources and things that can be used to

38
00:01:35,040 --> 00:01:38,240
either access sensitive data

39
00:01:38,240 --> 00:01:41,840
like uh the device identifier

40
00:01:41,840 --> 00:01:42,640
or

41
00:01:42,640 --> 00:01:44,079
um

42
00:01:44,079 --> 00:01:46,640
to send data of the phone

43
00:01:46,640 --> 00:01:48,720
and if you get back to the platform

44
00:01:48,720 --> 00:01:50,320
security

45
00:01:50,320 --> 00:01:53,920
we have a rough understanding of how

46
00:01:53,920 --> 00:01:56,479
the framework works so it's composed of

47
00:01:56,479 --> 00:01:58,640
system services to provide core

48
00:01:58,640 --> 00:02:01,600
functionality to the application layer

49
00:02:01,600 --> 00:02:04,320
but yet such knowledge base as we have

50
00:02:04,320 --> 00:02:06,880
before application analysis is yet

51
00:02:06,880 --> 00:02:09,840
missing and even worse we cannot

52
00:02:09,840 --> 00:02:12,480
transfer or easily transfer this

53
00:02:12,480 --> 00:02:14,720
existing knowledge from applications to

54
00:02:14,720 --> 00:02:16,879
the framework because the framework is

55
00:02:16,879 --> 00:02:19,120
inherently different

56
00:02:19,120 --> 00:02:20,400
and this brings me to our first

57
00:02:20,400 --> 00:02:21,760
contribution

58
00:02:21,760 --> 00:02:23,360
so in the following i will show you a

59
00:02:23,360 --> 00:02:26,000
systematic methodology on how to

60
00:02:26,000 --> 00:02:28,239
statically analyze

61
00:02:28,239 --> 00:02:30,000
the application framework

62
00:02:30,000 --> 00:02:31,599
and this includes the enumeration of

63
00:02:31,599 --> 00:02:33,760
framework entry points as well as the

64
00:02:33,760 --> 00:02:36,640
generation of a precise static runtime

65
00:02:36,640 --> 00:02:38,239
model

66
00:02:38,239 --> 00:02:39,680
and

67
00:02:39,680 --> 00:02:43,599
having such a methodology we can then

68
00:02:43,760 --> 00:02:46,080
conduct any further security related

69
00:02:46,080 --> 00:02:48,640
analysis on top

70
00:02:48,640 --> 00:02:50,480
and then showed that with such a

71
00:02:50,480 --> 00:02:53,680
methodology we can improve on prior

72
00:02:53,680 --> 00:02:55,519
results by

73
00:02:55,519 --> 00:02:58,319
generating permission mappings for sdk

74
00:02:58,319 --> 00:03:01,920
and for the framework

75
00:03:02,080 --> 00:03:04,720
that improve on prior results

76
00:03:04,720 --> 00:03:06,720
and finally we dig a bit deeper in the

77
00:03:06,720 --> 00:03:08,640
android permission system

78
00:03:08,640 --> 00:03:10,800
and answer the question

79
00:03:10,800 --> 00:03:14,959
or give a technique on how to classify

80
00:03:14,959 --> 00:03:16,560
sensitive

81
00:03:16,560 --> 00:03:18,319
operations that are guarded by android's

82
00:03:18,319 --> 00:03:20,720
permission checks

83
00:03:20,720 --> 00:03:22,879
and finally we show where permissions

84
00:03:22,879 --> 00:03:25,519
are checked in the framework and

85
00:03:25,519 --> 00:03:28,319
um answering the question what simple

86
00:03:28,319 --> 00:03:31,680
security implications this might have

87
00:03:31,680 --> 00:03:33,599
okay so let's start with the question on

88
00:03:33,599 --> 00:03:37,200
how to statically analyze the framework

89
00:03:37,200 --> 00:03:39,120
similar as for android application

90
00:03:39,120 --> 00:03:40,319
analysis

91
00:03:40,319 --> 00:03:42,000
there are three main challenges that you

92
00:03:42,000 --> 00:03:43,760
have to overcome

93
00:03:43,760 --> 00:03:45,519
first is how to enumerate a framework

94
00:03:45,519 --> 00:03:47,120
entry points

95
00:03:47,120 --> 00:03:49,440
second how to generate a static model

96
00:03:49,440 --> 00:03:52,319
that approximates the runtime behavior

97
00:03:52,319 --> 00:03:53,840
and third what are the sensitive

98
00:03:53,840 --> 00:03:57,200
operations within the framework api

99
00:03:57,200 --> 00:03:58,640
let's start with the framework entry

100
00:03:58,640 --> 00:04:01,040
points so we want to know what

101
00:04:01,040 --> 00:04:02,799
functionality is exposed to the

102
00:04:02,799 --> 00:04:04,239
application layer

103
00:04:04,239 --> 00:04:06,000
and the key observation is that

104
00:04:06,000 --> 00:04:08,159
inter-process communication and android

105
00:04:08,159 --> 00:04:11,439
goes via the binder mechanism

106
00:04:11,439 --> 00:04:14,080
and there is an interface class called i

107
00:04:14,080 --> 00:04:16,320
interface with its which is the base

108
00:04:16,320 --> 00:04:18,000
interface class for all binder

109
00:04:18,000 --> 00:04:19,519
communication

110
00:04:19,519 --> 00:04:20,959
and by conducting a class hierarchy

111
00:04:20,959 --> 00:04:23,040
analysis we can enumerate all the

112
00:04:23,040 --> 00:04:25,759
classes that expose functionality to the

113
00:04:25,759 --> 00:04:27,520
application layer

114
00:04:27,520 --> 00:04:29,520
by doing this we first retrieve a list

115
00:04:29,520 --> 00:04:31,680
of interface classes which can be

116
00:04:31,680 --> 00:04:34,560
grouped to edel and non-angel interface

117
00:04:34,560 --> 00:04:37,199
classes where adal stands for android

118
00:04:37,199 --> 00:04:39,280
interface definition language

119
00:04:39,280 --> 00:04:41,120
these are basically standard java

120
00:04:41,120 --> 00:04:42,880
interfaces that come with an edel

121
00:04:42,880 --> 00:04:45,280
compiler that automatically generates

122
00:04:45,280 --> 00:04:48,560
two classes a proxy and a stub class

123
00:04:48,560 --> 00:04:49,919
where the proxy is a low-level

124
00:04:49,919 --> 00:04:52,240
implementation of the interface and the

125
00:04:52,240 --> 00:04:54,560
stop class is an abstract class that is

126
00:04:54,560 --> 00:04:56,880
extended by the actual service like the

127
00:04:56,880 --> 00:04:58,800
audio service or location manager

128
00:04:58,800 --> 00:05:01,199
service

129
00:05:01,280 --> 00:05:02,479
and for each

130
00:05:02,479 --> 00:05:04,240
android version there are a couple of

131
00:05:04,240 --> 00:05:06,560
non-aidal interfaces

132
00:05:06,560 --> 00:05:09,440
these work basically are similar with

133
00:05:09,440 --> 00:05:11,280
the exception that instead of having an

134
00:05:11,280 --> 00:05:13,360
auto generated stub class you have a

135
00:05:13,360 --> 00:05:16,720
native glass which is extended by

136
00:05:16,720 --> 00:05:18,639
services like the activity manager

137
00:05:18,639 --> 00:05:21,120
service and the reason is that such

138
00:05:21,120 --> 00:05:23,520
services can also be called from native

139
00:05:23,520 --> 00:05:25,520
code and therefore some binary

140
00:05:25,520 --> 00:05:28,720
transaction codes need to be hard coded

141
00:05:28,720 --> 00:05:31,680
once we have a full list of such classes

142
00:05:31,680 --> 00:05:34,160
we can now easily extract all public

143
00:05:34,160 --> 00:05:37,280
methods to enumerate or to compile a

144
00:05:37,280 --> 00:05:40,638
list of framework entry points

145
00:05:40,960 --> 00:05:43,199
after having such a list of entry points

146
00:05:43,199 --> 00:05:46,000
the next step is how to build a static

147
00:05:46,000 --> 00:05:47,440
runtime model

148
00:05:47,440 --> 00:05:48,880
so we know that framework services

149
00:05:48,880 --> 00:05:50,400
follow the principle of separation of

150
00:05:50,400 --> 00:05:51,440
duty

151
00:05:51,440 --> 00:05:53,280
and they need to be highly responsive in

152
00:05:53,280 --> 00:05:55,520
order to process simultaneous requests

153
00:05:55,520 --> 00:05:57,840
from multiple applications

154
00:05:57,840 --> 00:06:00,400
and to do so they use various

155
00:06:00,400 --> 00:06:02,400
concurrency patterns that impede any

156
00:06:02,400 --> 00:06:05,520
kind of static analysis

157
00:06:05,520 --> 00:06:06,800
so besides

158
00:06:06,800 --> 00:06:09,360
standard java runnables there exists

159
00:06:09,360 --> 00:06:11,120
three main concurrency pattern on the

160
00:06:11,120 --> 00:06:12,319
framework

161
00:06:12,319 --> 00:06:14,319
the first and most prevalent one is the

162
00:06:14,319 --> 00:06:16,880
message based handout class so in a

163
00:06:16,880 --> 00:06:19,120
nutshell you create a message stating

164
00:06:19,120 --> 00:06:20,479
the functionality that you want to

165
00:06:20,479 --> 00:06:22,960
execute you send it to the handler which

166
00:06:22,960 --> 00:06:25,120
then spawns a separate thread in which

167
00:06:25,120 --> 00:06:28,319
the functionality is executed

168
00:06:28,319 --> 00:06:30,160
the second pattern is asynchronous

169
00:06:30,160 --> 00:06:32,319
channel which is basically the same but

170
00:06:32,319 --> 00:06:33,919
further allows bi-directional

171
00:06:33,919 --> 00:06:35,840
communication

172
00:06:35,840 --> 00:06:37,840
and finally we have hierarchical state

173
00:06:37,840 --> 00:06:41,199
machines which further introduce states

174
00:06:41,199 --> 00:06:42,560
to allow

175
00:06:42,560 --> 00:06:44,800
managing more complex scenarios like

176
00:06:44,800 --> 00:06:46,560
wi-fi connections or bluetooth

177
00:06:46,560 --> 00:06:48,319
connections

178
00:06:48,319 --> 00:06:49,759
and while the handler pattern is also

179
00:06:49,759 --> 00:06:52,800
available for application developers

180
00:06:52,800 --> 00:06:54,400
as channel and state machines are

181
00:06:54,400 --> 00:06:57,759
exclusive to the framework

182
00:06:57,759 --> 00:07:00,080
and if you want to conduct a precise

183
00:07:00,080 --> 00:07:01,840
static analysis you have to be able to

184
00:07:01,840 --> 00:07:04,080
accurately model such concurrency

185
00:07:04,080 --> 00:07:05,440
pattern

186
00:07:05,440 --> 00:07:07,120
and at the example of the handler will

187
00:07:07,120 --> 00:07:09,360
show you what typical challenges you

188
00:07:09,360 --> 00:07:11,759
have to face

189
00:07:11,759 --> 00:07:13,759
so many servers have a dedicated handler

190
00:07:13,759 --> 00:07:17,599
to process messages in a separate thread

191
00:07:17,599 --> 00:07:20,800
and an example code would look like this

192
00:07:20,800 --> 00:07:23,120
so you have a reference to a handler

193
00:07:23,120 --> 00:07:24,800
which is called m handler and the first

194
00:07:24,800 --> 00:07:25,599
thing

195
00:07:25,599 --> 00:07:27,840
you need to do is to obtain a message

196
00:07:27,840 --> 00:07:30,080
stating the message code for the

197
00:07:30,080 --> 00:07:33,759
functionality that you want to execute

198
00:07:33,759 --> 00:07:35,520
and then you can send the message to the

199
00:07:35,520 --> 00:07:38,160
registered handler which in this case is

200
00:07:38,160 --> 00:07:39,759
a simplified version of the bluetooth

201
00:07:39,759 --> 00:07:41,440
handler

202
00:07:41,440 --> 00:07:43,520
this handler overrides a handle message

203
00:07:43,520 --> 00:07:44,960
function

204
00:07:44,960 --> 00:07:47,520
which receives the message and typically

205
00:07:47,520 --> 00:07:50,240
includes a huge switch statement which

206
00:07:50,240 --> 00:07:52,479
covers all the functionality that if

207
00:07:52,479 --> 00:07:56,800
that is exposed by the service

208
00:07:56,960 --> 00:07:59,280
now what are the typical challenges

209
00:07:59,280 --> 00:08:01,280
so first you have to be able to infer

210
00:08:01,280 --> 00:08:03,680
the runtime type of the handler instance

211
00:08:03,680 --> 00:08:05,440
in order to know the recipient of the

212
00:08:05,440 --> 00:08:07,039
message

213
00:08:07,039 --> 00:08:08,879
second you need to be able to infer the

214
00:08:08,879 --> 00:08:10,240
message code in order to know the

215
00:08:10,240 --> 00:08:12,560
functionality that is triggered

216
00:08:12,560 --> 00:08:14,560
and most importantly you have to be able

217
00:08:14,560 --> 00:08:17,039
to add path sensitivity to the switch

218
00:08:17,039 --> 00:08:20,479
construct such that you can

219
00:08:20,479 --> 00:08:23,520
infer a mapping of message code to the

220
00:08:23,520 --> 00:08:25,599
basic block that would have been

221
00:08:25,599 --> 00:08:27,840
executed at runtime

222
00:08:27,840 --> 00:08:30,479
because if you solely rely on a simple

223
00:08:30,479 --> 00:08:33,599
reachability analysis you end up in

224
00:08:33,599 --> 00:08:35,120
enumerating all the service

225
00:08:35,120 --> 00:08:37,760
functionality which could end in a lot

226
00:08:37,760 --> 00:08:41,240
of false positives

227
00:08:41,519 --> 00:08:44,320
but if you add path sensitivity you can

228
00:08:44,320 --> 00:08:45,600
accurately

229
00:08:45,600 --> 00:08:48,320
focus on the execution path that would

230
00:08:48,320 --> 00:08:50,320
have been executed at runtime and

231
00:08:50,320 --> 00:08:51,920
therefore

232
00:08:51,920 --> 00:08:53,920
your approach would not suffer from a

233
00:08:53,920 --> 00:08:57,279
huge over approximation

234
00:08:57,600 --> 00:08:59,760
okay so now after we have

235
00:08:59,760 --> 00:09:01,440
seen how to enumerate the framework

236
00:09:01,440 --> 00:09:03,200
entry points and how to build a model

237
00:09:03,200 --> 00:09:06,240
the next and last question is how do we

238
00:09:06,240 --> 00:09:08,399
identify sensitive behavior within the

239
00:09:08,399 --> 00:09:10,240
framework

240
00:09:10,240 --> 00:09:11,680
the problem is that the concept of

241
00:09:11,680 --> 00:09:13,839
sources and things as we know it for

242
00:09:13,839 --> 00:09:16,720
application analysis is no longer

243
00:09:16,720 --> 00:09:19,440
applicable here because the analysis now

244
00:09:19,440 --> 00:09:22,160
shifts into the framework so the

245
00:09:22,160 --> 00:09:24,160
question remains how do we classify

246
00:09:24,160 --> 00:09:26,160
sensitive behavior

247
00:09:26,160 --> 00:09:27,600
and a good start is to consider

248
00:09:27,600 --> 00:09:30,000
permission checks as guards to sensitive

249
00:09:30,000 --> 00:09:32,480
behavior

250
00:09:32,800 --> 00:09:34,880
and to give an informal

251
00:09:34,880 --> 00:09:37,040
informal definition on what we mean by

252
00:09:37,040 --> 00:09:39,360
sensitive operations we say that

253
00:09:39,360 --> 00:09:41,519
protected resources are security

254
00:09:41,519 --> 00:09:43,680
critical operations that have a tangible

255
00:09:43,680 --> 00:09:46,399
side effect either on the system state

256
00:09:46,399 --> 00:09:48,240
for instance if you change

257
00:09:48,240 --> 00:09:50,880
or add some network connection

258
00:09:50,880 --> 00:09:52,880
or that have a side effect on the use of

259
00:09:52,880 --> 00:09:54,800
privacy for instance if you retrieve

260
00:09:54,800 --> 00:09:57,600
sensitive data

261
00:09:57,600 --> 00:09:58,720
so now

262
00:09:58,720 --> 00:10:00,880
we have a rough understanding on what we

263
00:10:00,880 --> 00:10:02,480
are looking for but we do not know

264
00:10:02,480 --> 00:10:06,640
exactly how such operations look like

265
00:10:06,640 --> 00:10:08,800
and unfortunately unfortunately there's

266
00:10:08,800 --> 00:10:10,720
no ground truth so far

267
00:10:10,720 --> 00:10:13,120
so the only thing which you can do is to

268
00:10:13,120 --> 00:10:15,279
sit down have a coffee

269
00:10:15,279 --> 00:10:18,000
and take a deeper look into the androids

270
00:10:18,000 --> 00:10:20,240
applications framework code

271
00:10:20,240 --> 00:10:22,240
and that's what we did so we manually

272
00:10:22,240 --> 00:10:24,399
investigated 35 entry points of

273
00:10:24,399 --> 00:10:26,000
different services

274
00:10:26,000 --> 00:10:27,600
and based on our expert knowledge we

275
00:10:27,600 --> 00:10:30,000
could then compile a list of sensitive

276
00:10:30,000 --> 00:10:32,240
operations

277
00:10:32,240 --> 00:10:34,880
and finally we ended up in having a huge

278
00:10:34,880 --> 00:10:39,120
list of such operations which are also

279
00:10:39,120 --> 00:10:42,320
tailored or specific to the api which we

280
00:10:42,320 --> 00:10:43,920
were analyzing

281
00:10:43,920 --> 00:10:46,079
so this diversity of operations forced

282
00:10:46,079 --> 00:10:47,680
us to come up with some higher level

283
00:10:47,680 --> 00:10:50,720
classification not on the operation but

284
00:10:50,720 --> 00:10:52,880
on the operation type

285
00:10:52,880 --> 00:10:55,279
and this finally led to the taxonomy of

286
00:10:55,279 --> 00:10:58,000
protected resource types

287
00:10:58,000 --> 00:11:00,240
and the first protected resource that i

288
00:11:00,240 --> 00:11:01,839
want to introduce are message

289
00:11:01,839 --> 00:11:03,200
invocations

290
00:11:03,200 --> 00:11:05,200
more particular native method

291
00:11:05,200 --> 00:11:07,200
invocations as gateway to the device

292
00:11:07,200 --> 00:11:09,040
hardware for instance if you set some

293
00:11:09,040 --> 00:11:11,200
audio settings or if you want to

294
00:11:11,200 --> 00:11:14,240
establish some new field communication

295
00:11:14,240 --> 00:11:16,320
the second type of resources are

296
00:11:16,320 --> 00:11:18,320
broadcast senders that have a side

297
00:11:18,320 --> 00:11:20,160
effect on the system

298
00:11:20,160 --> 00:11:22,000
and this side effect strongly depends on

299
00:11:22,000 --> 00:11:24,399
the registered receivers both in the

300
00:11:24,399 --> 00:11:26,640
application framework and on the

301
00:11:26,640 --> 00:11:29,839
installed applications on the device

302
00:11:29,839 --> 00:11:32,880
the second type are field updates

303
00:11:32,880 --> 00:11:35,120
and during our analysis we found is that

304
00:11:35,120 --> 00:11:36,880
this is the most prevalent type of

305
00:11:36,880 --> 00:11:38,800
resource types

306
00:11:38,800 --> 00:11:40,560
with a share with about

307
00:11:40,560 --> 00:11:42,640
at about 70 percent

308
00:11:42,640 --> 00:11:45,040
so whenever you want to

309
00:11:45,040 --> 00:11:47,680
uh change some configurations uh this

310
00:11:47,680 --> 00:11:50,800
basically uh boils down to one or more

311
00:11:50,800 --> 00:11:53,680
field updates that can be classified as

312
00:11:53,680 --> 00:11:56,959
the sensitive operations

313
00:11:56,959 --> 00:11:59,040
then we have return values so whenever

314
00:11:59,040 --> 00:12:01,519
you have a non-void return value for

315
00:12:01,519 --> 00:12:03,120
your framework api

316
00:12:03,120 --> 00:12:05,600
this return value includes more or less

317
00:12:05,600 --> 00:12:07,680
sensitive data for instance a list of

318
00:12:07,680 --> 00:12:11,680
network connections or some error code

319
00:12:11,680 --> 00:12:12,959
and finally

320
00:12:12,959 --> 00:12:16,079
we have our runtime exceptions which is

321
00:12:16,079 --> 00:12:18,720
the more or the most surprising result

322
00:12:18,720 --> 00:12:21,519
in our taxonomy

323
00:12:21,519 --> 00:12:22,320
and

324
00:12:22,320 --> 00:12:23,360
we found

325
00:12:23,360 --> 00:12:25,440
exactly one case during our manual

326
00:12:25,440 --> 00:12:27,360
investigation of throwing runtime

327
00:12:27,360 --> 00:12:28,639
exception

328
00:12:28,639 --> 00:12:32,079
and we thought cool we found corner case

329
00:12:32,079 --> 00:12:35,040
but actually if we apply the taxonomy to

330
00:12:35,040 --> 00:12:37,279
the entire code by as we found that by

331
00:12:37,279 --> 00:12:39,760
no means this is an outlier because

332
00:12:39,760 --> 00:12:41,440
across android versions we found more

333
00:12:41,440 --> 00:12:43,760
than 50 instances of throwing runtime

334
00:12:43,760 --> 00:12:46,320
exceptions in the android source code

335
00:12:46,320 --> 00:12:48,880
the main reason for this is that android

336
00:12:48,880 --> 00:12:51,040
uses a lot of third-party code for

337
00:12:51,040 --> 00:12:54,079
instance bouncy castle jsip or xml pull

338
00:12:54,079 --> 00:12:55,600
parser

339
00:12:55,600 --> 00:12:57,839
and most of these libraries throw a

340
00:12:57,839 --> 00:12:59,760
runtime exception whenever they get to

341
00:12:59,760 --> 00:13:01,760
an inconsistent state

342
00:13:01,760 --> 00:13:03,440
and this leaves android developers

343
00:13:03,440 --> 00:13:05,519
basically with two choices

344
00:13:05,519 --> 00:13:08,240
there either they patch the library

345
00:13:08,240 --> 00:13:10,320
to not throw runtime exception which

346
00:13:10,320 --> 00:13:12,079
comes with some additional maintenance

347
00:13:12,079 --> 00:13:13,360
effort

348
00:13:13,360 --> 00:13:14,320
or

349
00:13:14,320 --> 00:13:16,720
they can just catch the runtime

350
00:13:16,720 --> 00:13:19,120
exception and try to recover and get to

351
00:13:19,120 --> 00:13:20,959
some consistent state again

352
00:13:20,959 --> 00:13:22,399
and that's actually what the android

353
00:13:22,399 --> 00:13:25,120
developers do

354
00:13:25,519 --> 00:13:27,920
okay so now we have seen how to analyze

355
00:13:27,920 --> 00:13:30,000
the framework and now we want to see at

356
00:13:30,000 --> 00:13:32,240
the use case of permission analysis if

357
00:13:32,240 --> 00:13:36,480
you can indeed improve on prior results

358
00:13:36,880 --> 00:13:39,040
so we revisit android permission

359
00:13:39,040 --> 00:13:41,760
mappings because

360
00:13:41,760 --> 00:13:43,279
android permissions are still a major

361
00:13:43,279 --> 00:13:45,040
security mechanism

362
00:13:45,040 --> 00:13:46,880
and they have proven to be a very

363
00:13:46,880 --> 00:13:50,639
important tool for app developers and

364
00:13:50,639 --> 00:13:53,199
security research for many years

365
00:13:53,199 --> 00:13:54,880
and we compare our results with the

366
00:13:54,880 --> 00:13:57,360
state of the r2p scout which was

367
00:13:57,360 --> 00:14:00,480
proposed at ccs12

368
00:14:00,480 --> 00:14:04,160
and we compare our results with api 16

369
00:14:04,160 --> 00:14:06,480
which were their latest results

370
00:14:06,480 --> 00:14:08,480
available at the time when we conducted

371
00:14:08,480 --> 00:14:10,800
our analysis

372
00:14:10,800 --> 00:14:13,279
but before i showed you the actual

373
00:14:13,279 --> 00:14:16,240
results i want to give you a primer on

374
00:14:16,240 --> 00:14:18,480
what are permission mappings

375
00:14:18,480 --> 00:14:20,480
so the basic idea is to have a mapping

376
00:14:20,480 --> 00:14:22,639
between framework entry points and a

377
00:14:22,639 --> 00:14:25,760
list of required permissions

378
00:14:25,760 --> 00:14:27,519
and we started with

379
00:14:27,519 --> 00:14:29,440
the framework entry points and we

380
00:14:29,440 --> 00:14:32,399
conducted a control flow for slicing to

381
00:14:32,399 --> 00:14:34,480
eventually reach permission check

382
00:14:34,480 --> 00:14:36,720
function calls

383
00:14:36,720 --> 00:14:39,040
and if we found some we conducted an

384
00:14:39,040 --> 00:14:42,160
additional string analysis to infer the

385
00:14:42,160 --> 00:14:45,199
actually checked permission

386
00:14:45,199 --> 00:14:47,600
this finally resulted in a mapping from

387
00:14:47,600 --> 00:14:49,600
of framework entry points like get

388
00:14:49,600 --> 00:14:51,680
device identifier function of the phone

389
00:14:51,680 --> 00:14:54,079
interface manager that requires the

390
00:14:54,079 --> 00:14:58,000
dangerous permission read phone state

391
00:14:58,000 --> 00:14:59,600
and here are the first results for the

392
00:14:59,600 --> 00:15:02,000
framework api mapping so this graph

393
00:15:02,000 --> 00:15:04,560
shows the number the total number of api

394
00:15:04,560 --> 00:15:06,320
to permission mappings

395
00:15:06,320 --> 00:15:08,880
and as you can see there's a huge gap

396
00:15:08,880 --> 00:15:11,920
between our tool explorer and the tool p

397
00:15:11,920 --> 00:15:13,279
scout

398
00:15:13,279 --> 00:15:15,120
and the results are even more surprising

399
00:15:15,120 --> 00:15:17,120
because p scout only includes normal and

400
00:15:17,120 --> 00:15:20,399
dangerous permission because at the time

401
00:15:20,399 --> 00:15:22,399
they focus on permissions that could be

402
00:15:22,399 --> 00:15:26,079
requested by app developers

403
00:15:26,079 --> 00:15:27,839
in contrast we additionally include

404
00:15:27,839 --> 00:15:29,600
system and system or signature

405
00:15:29,600 --> 00:15:31,360
permissions because we wanted to have a

406
00:15:31,360 --> 00:15:33,759
complete list in this regard

407
00:15:33,759 --> 00:15:36,160
but what are the root causes for this

408
00:15:36,160 --> 00:15:38,639
huge gap

409
00:15:38,639 --> 00:15:40,399
so first of all

410
00:15:40,399 --> 00:15:43,120
our results the smaller number is in

411
00:15:43,120 --> 00:15:44,399
this case

412
00:15:44,399 --> 00:15:46,480
the more accurate number because

413
00:15:46,480 --> 00:15:49,279
we introduce less false positive

414
00:15:49,279 --> 00:15:51,839
positives

415
00:15:51,839 --> 00:15:53,680
and the root cause for this reduce over

416
00:15:53,680 --> 00:15:55,759
approximation is the additional effort

417
00:15:55,759 --> 00:15:58,320
that we spend in modeling the call graph

418
00:15:58,320 --> 00:16:00,320
this does not only include

419
00:16:00,320 --> 00:16:02,320
strong type interference and resolving

420
00:16:02,320 --> 00:16:04,959
dynamic dispatch this particularly

421
00:16:04,959 --> 00:16:07,600
particularly also

422
00:16:07,600 --> 00:16:10,160
refers to the accurate

423
00:16:10,160 --> 00:16:12,639
modeling of all the concurrency pattern

424
00:16:12,639 --> 00:16:14,720
that i've presented before

425
00:16:14,720 --> 00:16:16,240
so especially

426
00:16:16,240 --> 00:16:18,480
this huge switch statement

427
00:16:18,480 --> 00:16:20,880
for the handler class

428
00:16:20,880 --> 00:16:23,360
moreover our entry point definition

429
00:16:23,360 --> 00:16:25,920
ensures that each mapping that our tutor

430
00:16:25,920 --> 00:16:28,880
reports indeed starts with a valid entry

431
00:16:28,880 --> 00:16:30,800
point that can be called from the

432
00:16:30,800 --> 00:16:33,920
application layer

433
00:16:34,480 --> 00:16:36,399
the next mapping is the sdk mapping

434
00:16:36,399 --> 00:16:38,320
which is basically an extension to the

435
00:16:38,320 --> 00:16:39,759
framework mapping

436
00:16:39,759 --> 00:16:42,079
so you add the sdk which at some point

437
00:16:42,079 --> 00:16:44,160
uses inter-process communication to call

438
00:16:44,160 --> 00:16:46,720
a framework entry point

439
00:16:46,720 --> 00:16:49,360
and finally you receive a mapping of sdk

440
00:16:49,360 --> 00:16:51,120
entry points to a list of required

441
00:16:51,120 --> 00:16:53,600
permissions

442
00:16:53,839 --> 00:16:55,600
these are the first results that show

443
00:16:55,600 --> 00:16:57,839
the number of permissions required by

444
00:16:57,839 --> 00:17:00,079
sdk apis

445
00:17:00,079 --> 00:17:01,839
and here are two important things that

446
00:17:01,839 --> 00:17:03,199
you should note

447
00:17:03,199 --> 00:17:05,039
first of all the total number of

448
00:17:05,039 --> 00:17:08,319
mappings is now much closer than

449
00:17:08,319 --> 00:17:10,720
the number of mappings that we have seen

450
00:17:10,720 --> 00:17:13,520
before for the framework mapping

451
00:17:13,520 --> 00:17:14,559
second

452
00:17:14,559 --> 00:17:16,720
auto explorer

453
00:17:16,720 --> 00:17:19,520
does not report outliers with more than

454
00:17:19,520 --> 00:17:20,319
three

455
00:17:20,319 --> 00:17:22,240
uh permissions

456
00:17:22,240 --> 00:17:24,720
and the root causes are the following

457
00:17:24,720 --> 00:17:26,959
so in the process of connecting the

458
00:17:26,959 --> 00:17:29,520
framework to the sdk a lot of false

459
00:17:29,520 --> 00:17:31,200
mappings are

460
00:17:31,200 --> 00:17:33,840
automatically eliminated

461
00:17:33,840 --> 00:17:35,360
because

462
00:17:35,360 --> 00:17:37,520
if you do not have a framework mapping

463
00:17:37,520 --> 00:17:39,600
that starts with a valid framework entry

464
00:17:39,600 --> 00:17:43,280
point you cannot connect it to the sdk

465
00:17:43,280 --> 00:17:45,200
and therefore a lot of

466
00:17:45,200 --> 00:17:46,720
non-entry

467
00:17:46,720 --> 00:17:49,360
non-api entry method mappings are

468
00:17:49,360 --> 00:17:51,919
automatically ruled out

469
00:17:51,919 --> 00:17:53,919
and as for the outliers

470
00:17:53,919 --> 00:17:57,280
adding this additional path sensitivity

471
00:17:57,280 --> 00:17:59,679
in the concurrency pattern like in the

472
00:17:59,679 --> 00:18:01,120
handler

473
00:18:01,120 --> 00:18:05,840
also eliminates a lot of false mappings

474
00:18:05,840 --> 00:18:08,559
in particular if you just rely

475
00:18:08,559 --> 00:18:11,600
on a simple reachability analysis you

476
00:18:11,600 --> 00:18:13,679
end up in enumerating all the

477
00:18:13,679 --> 00:18:17,120
functionality in the handler class which

478
00:18:17,120 --> 00:18:19,840
also implies that you sum all the

479
00:18:19,840 --> 00:18:22,160
permissions that are required by this

480
00:18:22,160 --> 00:18:23,600
functionality

481
00:18:23,600 --> 00:18:25,520
while at the same time if you are able

482
00:18:25,520 --> 00:18:28,400
to pinpoint the analysis to the exact

483
00:18:28,400 --> 00:18:31,360
execution branch we also only consider

484
00:18:31,360 --> 00:18:33,039
the permission that is required for this

485
00:18:33,039 --> 00:18:35,919
execution branch

486
00:18:35,919 --> 00:18:37,840
the second mapping shows the number of

487
00:18:37,840 --> 00:18:40,720
documented apis that requires a specific

488
00:18:40,720 --> 00:18:43,919
permission like nfc set wallpaper or

489
00:18:43,919 --> 00:18:45,039
bluetooth

490
00:18:45,039 --> 00:18:47,200
and here you can see

491
00:18:47,200 --> 00:18:49,280
that the results largely differ with

492
00:18:49,280 --> 00:18:51,600
respect to the permission

493
00:18:51,600 --> 00:18:53,360
so for instance for the nfc and

494
00:18:53,360 --> 00:18:55,919
bluetooth permission our tool reports

495
00:18:55,919 --> 00:18:57,919
less mappings while at the same time for

496
00:18:57,919 --> 00:19:00,160
that wallpaper and broadcast sticky we

497
00:19:00,160 --> 00:19:03,200
report more mappings so

498
00:19:03,200 --> 00:19:05,919
what numbers are correct

499
00:19:05,919 --> 00:19:08,880
therefore we manually validated all the

500
00:19:08,880 --> 00:19:11,600
mappings for the top four permissions to

501
00:19:11,600 --> 00:19:13,440
find the root cause

502
00:19:13,440 --> 00:19:15,360
and surprisingly

503
00:19:15,360 --> 00:19:17,520
the differences in the results were

504
00:19:17,520 --> 00:19:20,480
mainly due to the sdk analysis

505
00:19:20,480 --> 00:19:21,919
so

506
00:19:21,919 --> 00:19:23,520
the different results that we have for

507
00:19:23,520 --> 00:19:26,640
the framework mapping did not influence

508
00:19:26,640 --> 00:19:29,280
this mapping at all

509
00:19:29,280 --> 00:19:31,200
and at the example of the set wallpaper

510
00:19:31,200 --> 00:19:33,679
permissioner i will show you

511
00:19:33,679 --> 00:19:36,960
why there are different mappings

512
00:19:36,960 --> 00:19:38,880
so the analysis of

513
00:19:38,880 --> 00:19:41,120
the set wallpaper motion mainly refers

514
00:19:41,120 --> 00:19:43,600
to analyzing the context class which is

515
00:19:43,600 --> 00:19:45,760
a core class for the application

516
00:19:45,760 --> 00:19:47,039
development

517
00:19:47,039 --> 00:19:49,200
and this class is difficult to get right

518
00:19:49,200 --> 00:19:51,760
for static analysis because it includes

519
00:19:51,760 --> 00:19:54,720
more or it has more than 100 direct and

520
00:19:54,720 --> 00:19:57,200
indirect subclasses

521
00:19:57,200 --> 00:19:59,760
and the context class defines an api to

522
00:19:59,760 --> 00:20:02,240
set the wallpaper

523
00:20:02,240 --> 00:20:03,520
and

524
00:20:03,520 --> 00:20:06,400
because of that all the direct indirect

525
00:20:06,400 --> 00:20:08,320
subclasses which are non-abstract

526
00:20:08,320 --> 00:20:10,000
inherit those

527
00:20:10,000 --> 00:20:12,960
api as well so you have to get your

528
00:20:12,960 --> 00:20:15,120
class hierarchy analysis right

529
00:20:15,120 --> 00:20:18,639
to report the correct numbers

530
00:20:18,960 --> 00:20:20,720
and in the process of generating the

531
00:20:20,720 --> 00:20:23,440
permission maps we found that

532
00:20:23,440 --> 00:20:26,240
um some permissions were checked in more

533
00:20:26,240 --> 00:20:28,720
than one location

534
00:20:28,720 --> 00:20:31,360
and we called this uh aspect permission

535
00:20:31,360 --> 00:20:33,520
locality so we wanted to investigate

536
00:20:33,520 --> 00:20:35,679
this a bit deeper

537
00:20:35,679 --> 00:20:37,039
so while the services follow the

538
00:20:37,039 --> 00:20:39,760
principle of separate separation of duty

539
00:20:39,760 --> 00:20:41,919
you want to find out whether the

540
00:20:41,919 --> 00:20:44,080
respective permissions follow this

541
00:20:44,080 --> 00:20:46,480
principle as well

542
00:20:46,480 --> 00:20:48,880
so we conducted an analysis on several

543
00:20:48,880 --> 00:20:50,880
android versions and found that across

544
00:20:50,880 --> 00:20:54,000
api versions roughly 20 of permissions

545
00:20:54,000 --> 00:20:56,640
are checked in more than one class with

546
00:20:56,640 --> 00:20:58,559
exceptional cases that are checked in up

547
00:20:58,559 --> 00:21:01,280
to 10 classes

548
00:21:01,280 --> 00:21:03,679
and this aspect equally affected all

549
00:21:03,679 --> 00:21:05,600
protection levels so it did not matter

550
00:21:05,600 --> 00:21:08,159
whether it was a normal or

551
00:21:08,159 --> 00:21:11,360
dangerous or system permission

552
00:21:11,360 --> 00:21:12,799
and we could show that there's a clear

553
00:21:12,799 --> 00:21:15,200
trend towards having more checks

554
00:21:15,200 --> 00:21:17,840
for a particular permission in more

555
00:21:17,840 --> 00:21:21,280
classes in your android versions

556
00:21:21,280 --> 00:21:23,280
and we measured permission locality in

557
00:21:23,280 --> 00:21:25,840
terms of the number of distinct classes

558
00:21:25,840 --> 00:21:28,320
in which a given permission was checked

559
00:21:28,320 --> 00:21:30,080
and we referred to higher permission

560
00:21:30,080 --> 00:21:31,760
locality

561
00:21:31,760 --> 00:21:33,600
if a permission was checked or enforced

562
00:21:33,600 --> 00:21:35,679
at the single location an example for

563
00:21:35,679 --> 00:21:37,760
this would be the set wallpaper

564
00:21:37,760 --> 00:21:39,919
permission that was enforced only in the

565
00:21:39,919 --> 00:21:42,480
wallpaper manager service

566
00:21:42,480 --> 00:21:45,039
in contrast a low permission locality is

567
00:21:45,039 --> 00:21:46,799
a permission that is enforced in

568
00:21:46,799 --> 00:21:47,840
different

569
00:21:47,840 --> 00:21:51,520
possibly unrelated services or classes

570
00:21:51,520 --> 00:21:53,200
an example for this is the dangerous

571
00:21:53,200 --> 00:21:55,840
reform state permission

572
00:21:55,840 --> 00:21:58,640
so here you can see the four classes

573
00:21:58,640 --> 00:22:01,360
uh in android api 16 in which this

574
00:22:01,360 --> 00:22:03,840
permission is checked

575
00:22:03,840 --> 00:22:04,640
but

576
00:22:04,640 --> 00:22:06,480
those four classes

577
00:22:06,480 --> 00:22:09,280
reside in four different packages

578
00:22:09,280 --> 00:22:11,440
even worse one of the class not even

579
00:22:11,440 --> 00:22:13,679
part of the application framework it's

580
00:22:13,679 --> 00:22:16,240
part of the telephony system app which

581
00:22:16,240 --> 00:22:18,240
might or might not be included depending

582
00:22:18,240 --> 00:22:20,400
on the device vendor

583
00:22:20,400 --> 00:22:22,640
and if you now check how the results

584
00:22:22,640 --> 00:22:25,600
change for a new android version here we

585
00:22:25,600 --> 00:22:29,840
can see the results for android api 22

586
00:22:29,840 --> 00:22:32,320
and there are two main differences the

587
00:22:32,320 --> 00:22:34,559
first the phone sub info class was

588
00:22:34,559 --> 00:22:37,280
renamed to phone sub info proxy

589
00:22:37,280 --> 00:22:39,679
and another class called subscription

590
00:22:39,679 --> 00:22:42,240
controller was added that included one

591
00:22:42,240 --> 00:22:44,480
or more checks to this permission

592
00:22:44,480 --> 00:22:46,320
but what are the security implications

593
00:22:46,320 --> 00:22:48,159
for this

594
00:22:48,159 --> 00:22:50,080
so we have seen that locality statically

595
00:22:50,080 --> 00:22:52,720
decreases in your android versions

596
00:22:52,720 --> 00:22:56,240
this impedes the overall understanding

597
00:22:56,240 --> 00:22:59,520
of android's permission system

598
00:22:59,520 --> 00:23:02,400
because whenever you want to know

599
00:23:02,400 --> 00:23:04,799
which components of the framework try to

600
00:23:04,799 --> 00:23:07,120
access a particular resource you have to

601
00:23:07,120 --> 00:23:10,640
have a proper permission analysis

602
00:23:10,640 --> 00:23:12,640
and the question is would it make sense

603
00:23:12,640 --> 00:23:14,559
to have a single enforcement point for

604
00:23:14,559 --> 00:23:15,840
permissions

605
00:23:15,840 --> 00:23:17,919
so if you have a look at

606
00:23:17,919 --> 00:23:20,240
access control frameworks like asm or

607
00:23:20,240 --> 00:23:22,960
asf that have been proposed in the last

608
00:23:22,960 --> 00:23:24,240
years

609
00:23:24,240 --> 00:23:26,640
their security policy strongly depends

610
00:23:26,640 --> 00:23:28,880
on having knowledge about where

611
00:23:28,880 --> 00:23:32,080
permissions are checked in the framework

612
00:23:32,080 --> 00:23:33,760
and the secure policy can suddenly

613
00:23:33,760 --> 00:23:35,600
become incomplete if the new android

614
00:23:35,600 --> 00:23:37,919
version is published and new classes

615
00:23:37,919 --> 00:23:39,760
were added

616
00:23:39,760 --> 00:23:41,919
for the with permission checks for the

617
00:23:41,919 --> 00:23:43,679
same permission

618
00:23:43,679 --> 00:23:45,760
well if you have a single enforcement

619
00:23:45,760 --> 00:23:46,960
point

620
00:23:46,960 --> 00:23:49,760
your secure policy can remain secure

621
00:23:49,760 --> 00:23:52,880
because uh you know you only have one

622
00:23:52,880 --> 00:23:54,720
single enforcement point and only

623
00:23:54,720 --> 00:23:56,720
callers to this enforcement point are

624
00:23:56,720 --> 00:23:58,960
changing

625
00:23:58,960 --> 00:24:01,279
how could this be established well for

626
00:24:01,279 --> 00:24:03,200
each permission you could identify an

627
00:24:03,200 --> 00:24:05,760
owning class on owning service

628
00:24:05,760 --> 00:24:07,039
and then you could add a dedicated

629
00:24:07,039 --> 00:24:09,200
permission check method

630
00:24:09,200 --> 00:24:12,720
which can then be exposed to

631
00:24:12,720 --> 00:24:14,480
to the application layer for instance

632
00:24:14,480 --> 00:24:17,120
via adl

633
00:24:17,279 --> 00:24:19,120
okay so this concludes my talk to

634
00:24:19,120 --> 00:24:22,240
briefly summarize our findings

635
00:24:22,240 --> 00:24:24,159
we have presented comprehensive and

636
00:24:24,159 --> 00:24:27,520
cystic systematic methodology on how to

637
00:24:27,520 --> 00:24:29,279
statically analyze the application

638
00:24:29,279 --> 00:24:30,720
framework

639
00:24:30,720 --> 00:24:33,919
in this methodology forms

640
00:24:33,919 --> 00:24:35,440
a knowledge base on which further

641
00:24:35,440 --> 00:24:37,600
security related analysis can be easily

642
00:24:37,600 --> 00:24:39,520
built on top

643
00:24:39,520 --> 00:24:41,120
we gave our first high level

644
00:24:41,120 --> 00:24:42,720
classification of

645
00:24:42,720 --> 00:24:45,279
protected resource types answering the

646
00:24:45,279 --> 00:24:47,440
question what is actually protected by

647
00:24:47,440 --> 00:24:50,000
android's permissions

648
00:24:50,000 --> 00:24:52,159
then we revisited permission analysis

649
00:24:52,159 --> 00:24:54,000
and showed that our new methodology

650
00:24:54,000 --> 00:24:57,520
indeed improved on prior results for sdk

651
00:24:57,520 --> 00:25:00,480
and framework permission mappings

652
00:25:00,480 --> 00:25:02,240
then we introduced a new aspect called

653
00:25:02,240 --> 00:25:04,720
permission locality to improve the

654
00:25:04,720 --> 00:25:06,640
overall understanding of android's

655
00:25:06,640 --> 00:25:08,559
permission system

656
00:25:08,559 --> 00:25:10,480
and finally check out our project

657
00:25:10,480 --> 00:25:13,039
website explorer.org to find all the

658
00:25:13,039 --> 00:25:15,679
results and of course the new permission

659
00:25:15,679 --> 00:25:16,720
maps

660
00:25:16,720 --> 00:25:20,960
with that thank you for your attention

661
00:25:25,679 --> 00:25:28,679
questions

662
00:25:38,000 --> 00:25:39,200
so

663
00:25:39,200 --> 00:25:40,480
while people are

664
00:25:40,480 --> 00:25:41,679
considering

665
00:25:41,679 --> 00:25:43,440
um so i'm curious

666
00:25:43,440 --> 00:25:46,159
uh i'm curious in the paper

667
00:25:46,159 --> 00:25:48,320
you discuss that one of the things you

668
00:25:48,320 --> 00:25:50,080
don't deal with is intense which is

669
00:25:50,080 --> 00:25:52,000
effectively a message system can you

670
00:25:52,000 --> 00:25:53,600
talk a little bit about why that is and

671
00:25:53,600 --> 00:25:55,760
what it would take to deal with

672
00:25:55,760 --> 00:25:58,799
frameworks that make use of intents

673
00:25:58,799 --> 00:26:01,919
so of course intents and also permission

674
00:26:01,919 --> 00:26:03,760
mappings for content providers are quite

675
00:26:03,760 --> 00:26:06,080
important to have complete framework

676
00:26:06,080 --> 00:26:08,320
mapping but they are not considered

677
00:26:08,320 --> 00:26:10,240
conceptually different to what we've

678
00:26:10,240 --> 00:26:12,720
seen in the paper and the main problem

679
00:26:12,720 --> 00:26:13,840
was

680
00:26:13,840 --> 00:26:16,159
how it is often the lack of time before

681
00:26:16,159 --> 00:26:19,200
the submission and the time that we had

682
00:26:19,200 --> 00:26:21,039
we wanted to spend on manually

683
00:26:21,039 --> 00:26:23,440
investigating all the results that we

684
00:26:23,440 --> 00:26:25,760
produced to really make sure that the

685
00:26:25,760 --> 00:26:27,600
results that we report are indeed

686
00:26:27,600 --> 00:26:28,640
correct

687
00:26:28,640 --> 00:26:31,360
so if time permits we will of course

688
00:26:31,360 --> 00:26:32,559
implement

689
00:26:32,559 --> 00:26:35,440
mappings for intense content providers

690
00:26:35,440 --> 00:26:37,600
and once we have the results we will

691
00:26:37,600 --> 00:26:39,520
update our

692
00:26:39,520 --> 00:26:41,440
website accordingly okay and i want to

693
00:26:41,440 --> 00:26:43,360
thank you very much for actually making

694
00:26:43,360 --> 00:26:45,600
that effort to make the data available

695
00:26:45,600 --> 00:26:47,760
to the public i think that is a standard

696
00:26:47,760 --> 00:26:49,279
that we should try to hold ourselves to

697
00:26:49,279 --> 00:26:50,880
as a community so that people can build

698
00:26:50,880 --> 00:26:54,159
directly off of the results

699
00:26:54,159 --> 00:26:56,960
any other questions from the audience

700
00:26:56,960 --> 00:26:58,880
um no this with that let's thank our

701
00:26:58,880 --> 00:27:03,640
speaker one last time thank you

702
00:27:08,640 --> 00:27:10,720
you

