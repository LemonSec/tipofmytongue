1
00:00:10,080 --> 00:00:11,440
hello everyone

2
00:00:11,440 --> 00:00:13,040
my name is ennis quicktos and i'm going

3
00:00:13,040 --> 00:00:14,639
to present

4
00:00:14,639 --> 00:00:16,960
our work which is undermining the

5
00:00:16,960 --> 00:00:19,039
information hiding technique

6
00:00:19,039 --> 00:00:21,439
and at the same time we look at what to

7
00:00:21,439 --> 00:00:23,119
do about

8
00:00:23,119 --> 00:00:27,198
its well improving its security

9
00:00:27,760 --> 00:00:31,359
so let me start off with

10
00:00:31,840 --> 00:00:34,559
by giving an overview of my presentation

11
00:00:34,559 --> 00:00:36,079
so it's all about

12
00:00:36,079 --> 00:00:37,360
mitigating

13
00:00:37,360 --> 00:00:39,600
code reused attacks so we want to stop

14
00:00:39,600 --> 00:00:41,840
code or use attacks

15
00:00:41,840 --> 00:00:44,480
and the promising way to do this is

16
00:00:44,480 --> 00:00:47,360
extracting and isolating code pointers

17
00:00:47,360 --> 00:00:49,600
in the program

18
00:00:49,600 --> 00:00:51,680
there are several ways to do this so you

19
00:00:51,680 --> 00:00:53,760
can extract and isolate it but there are

20
00:00:53,760 --> 00:00:55,360
several ways to isolate the code

21
00:00:55,360 --> 00:00:57,760
pointers and one of those ways is the

22
00:00:57,760 --> 00:01:01,280
information hiding technique

23
00:01:01,600 --> 00:01:04,000
and we actually look at the information

24
00:01:04,000 --> 00:01:05,840
hiding technique and we actually argue

25
00:01:05,840 --> 00:01:08,320
that it might not be a good idea to go

26
00:01:08,320 --> 00:01:10,960
with the information hiding technique

27
00:01:10,960 --> 00:01:14,720
and especially for the following reason

28
00:01:14,720 --> 00:01:17,280
the defenses that

29
00:01:17,280 --> 00:01:18,400
isolate

30
00:01:18,400 --> 00:01:20,640
the code pointers

31
00:01:20,640 --> 00:01:23,280
they have to create a sensitive region

32
00:01:23,280 --> 00:01:27,200
area per thread

33
00:01:27,200 --> 00:01:29,119
and the problem is

34
00:01:29,119 --> 00:01:30,880
the more threats you spawn in the

35
00:01:30,880 --> 00:01:33,600
program the more sensitive regions you

36
00:01:33,600 --> 00:01:35,920
have in the memory space

37
00:01:35,920 --> 00:01:37,759
so

38
00:01:37,759 --> 00:01:39,360
this hurts the information hiding

39
00:01:39,360 --> 00:01:41,200
technique because information hiding

40
00:01:41,200 --> 00:01:43,119
techniques tries to

41
00:01:43,119 --> 00:01:44,720
actually

42
00:01:44,720 --> 00:01:46,640
it trusts that

43
00:01:46,640 --> 00:01:48,799
the address space is so large that the

44
00:01:48,799 --> 00:01:50,799
sensitive region cannot be found by the

45
00:01:50,799 --> 00:01:52,960
attacker

46
00:01:52,960 --> 00:01:55,280
and by actually yeah getting

47
00:01:55,280 --> 00:01:57,680
more and more sense regis regions in the

48
00:01:57,680 --> 00:01:59,680
memory um

49
00:01:59,680 --> 00:02:01,759
you increase the chance of getting

50
00:02:01,759 --> 00:02:04,079
finding such a region

51
00:02:04,079 --> 00:02:05,600
um

52
00:02:05,600 --> 00:02:09,598
one part of these defenses

53
00:02:09,598 --> 00:02:11,760
that protect the stack

54
00:02:11,760 --> 00:02:14,000
is safe stack and this is

55
00:02:14,000 --> 00:02:15,920
available in the production compiler

56
00:02:15,920 --> 00:02:17,920
llvm and

57
00:02:17,920 --> 00:02:20,560
we look at this implementation

58
00:02:20,560 --> 00:02:22,480
and we reveal that

59
00:02:22,480 --> 00:02:24,720
you can find such a sensitive region

60
00:02:24,720 --> 00:02:28,160
like the safe stack within seconds

61
00:02:28,160 --> 00:02:29,599
um

62
00:02:29,599 --> 00:02:30,480
since

63
00:02:30,480 --> 00:02:33,120
so there are several ways to hide

64
00:02:33,120 --> 00:02:34,800
these isolate

65
00:02:34,800 --> 00:02:37,760
isolate these sensitive regions

66
00:02:37,760 --> 00:02:39,440
and since information hiding is being

67
00:02:39,440 --> 00:02:42,239
used now we

68
00:02:42,720 --> 00:02:44,640
we looked at what we could do about it

69
00:02:44,640 --> 00:02:47,440
and we developed the authenticating page

70
00:02:47,440 --> 00:02:49,200
mapper that hardens the information

71
00:02:49,200 --> 00:02:51,839
hiding technique

72
00:02:52,480 --> 00:02:54,800
so let me start with

73
00:02:54,800 --> 00:02:57,599
explaining what is a code reuse attack

74
00:02:57,599 --> 00:03:00,480
by going over an instance of

75
00:03:00,480 --> 00:03:01,519
one

76
00:03:01,519 --> 00:03:03,280
by going over

77
00:03:03,280 --> 00:03:04,720
code reduce attack instance the rope

78
00:03:04,720 --> 00:03:05,599
attack

79
00:03:05,599 --> 00:03:07,200
so on the right side of the slide you

80
00:03:07,200 --> 00:03:09,440
see

81
00:03:09,519 --> 00:03:11,599
the the memory layout of a process this

82
00:03:11,599 --> 00:03:14,720
is these are the common regions that are

83
00:03:14,720 --> 00:03:16,560
that are available in the

84
00:03:16,560 --> 00:03:18,800
process memory

85
00:03:18,800 --> 00:03:21,599
so you have a code region a data region

86
00:03:21,599 --> 00:03:23,519
a heap and a stack the heap contains

87
00:03:23,519 --> 00:03:26,319
dynamic data and the stack contains the

88
00:03:26,319 --> 00:03:27,920
execution context

89
00:03:27,920 --> 00:03:30,080
of the program

90
00:03:30,080 --> 00:03:32,000
so what an attacker does in a rope

91
00:03:32,000 --> 00:03:35,519
attack it it it injects a fake stack in

92
00:03:35,519 --> 00:03:39,200
the program and this fake stack contains

93
00:03:39,200 --> 00:03:40,640
um

94
00:03:40,640 --> 00:03:42,480
code pointers

95
00:03:42,480 --> 00:03:44,400
uh that define

96
00:03:44,400 --> 00:03:48,400
a fake execution context

97
00:03:48,480 --> 00:03:50,879
after

98
00:03:51,440 --> 00:03:53,760
by using a memory vulnerability

99
00:03:53,760 --> 00:03:56,560
the attacker

100
00:03:56,799 --> 00:03:59,519
change changes the stack pointer

101
00:03:59,519 --> 00:04:01,040
from the original stack to the fake

102
00:04:01,040 --> 00:04:01,920
stack

103
00:04:01,920 --> 00:04:04,319
and when the program continues the

104
00:04:04,319 --> 00:04:07,360
execution it executes actually what the

105
00:04:07,360 --> 00:04:09,760
attacker has prepared so the fake

106
00:04:09,760 --> 00:04:12,159
execution context and it the attacker in

107
00:04:12,159 --> 00:04:14,480
the end excuse what it desires in a

108
00:04:14,480 --> 00:04:16,878
program

109
00:04:18,639 --> 00:04:20,720
so how does the attacker get to know

110
00:04:20,720 --> 00:04:22,639
these code pointers

111
00:04:22,639 --> 00:04:24,000
well if you don't have any memory

112
00:04:24,000 --> 00:04:26,160
protection

113
00:04:26,160 --> 00:04:27,520
every every

114
00:04:27,520 --> 00:04:29,600
region in the memory will be mapped at

115
00:04:29,600 --> 00:04:31,840
the same location at a fixed location

116
00:04:31,840 --> 00:04:33,199
you just need to know what kind of

117
00:04:33,199 --> 00:04:35,199
program like what what's the version of

118
00:04:35,199 --> 00:04:37,120
the program that's running once you know

119
00:04:37,120 --> 00:04:38,880
that you know what's what is where in

120
00:04:38,880 --> 00:04:41,280
the memory space and then you can just

121
00:04:41,280 --> 00:04:44,479
infer all the code pointers

122
00:04:44,720 --> 00:04:46,720
so there are several techniques to

123
00:04:46,720 --> 00:04:48,880
protect um

124
00:04:48,880 --> 00:04:50,960
the the code pointers one one of the

125
00:04:50,960 --> 00:04:52,560
widely used

126
00:04:52,560 --> 00:04:54,160
defense mechanism is the address space

127
00:04:54,160 --> 00:04:56,960
layout randomization where the regions

128
00:04:56,960 --> 00:04:58,720
get randomly mapped in in the outer

129
00:04:58,720 --> 00:04:59,840
space

130
00:04:59,840 --> 00:05:01,919
however the problem with this is that

131
00:05:01,919 --> 00:05:03,280
once attacker

132
00:05:03,280 --> 00:05:05,520
leaks just a single code point or a data

133
00:05:05,520 --> 00:05:06,639
pointer

134
00:05:06,639 --> 00:05:08,320
it knows where

135
00:05:08,320 --> 00:05:10,560
the rest in that code region is so by

136
00:05:10,560 --> 00:05:12,960
leaking just one address you can infer

137
00:05:12,960 --> 00:05:15,360
the other code pointers

138
00:05:15,360 --> 00:05:17,120
like for example it could

139
00:05:17,120 --> 00:05:19,680
reveal the the one return address on the

140
00:05:19,680 --> 00:05:22,000
stack and then you have

141
00:05:22,000 --> 00:05:25,840
all the code pointers you need

142
00:05:28,320 --> 00:05:30,479
to

143
00:05:30,479 --> 00:05:32,800
prevent inferring the rest of the

144
00:05:32,800 --> 00:05:35,199
code

145
00:05:36,400 --> 00:05:37,919
if you have so if you have one code

146
00:05:37,919 --> 00:05:39,120
pointer

147
00:05:39,120 --> 00:05:40,639
um

148
00:05:40,639 --> 00:05:43,120
with in function or instruction level

149
00:05:43,120 --> 00:05:46,320
randomization uh you won't get to know

150
00:05:46,320 --> 00:05:48,000
the other parts of the code you just

151
00:05:48,000 --> 00:05:50,080
know okay i have one pointer probably i

152
00:05:50,080 --> 00:05:52,320
know what what there is but i don't know

153
00:05:52,320 --> 00:05:54,320
what but there's uh

154
00:05:54,320 --> 00:05:56,240
more in the code region because it's all

155
00:05:56,240 --> 00:05:58,240
randomized

156
00:05:58,240 --> 00:06:00,160
and the problem with this is that

157
00:06:00,160 --> 00:06:01,600
uh

158
00:06:01,600 --> 00:06:04,000
the the jit drop attack

159
00:06:04,000 --> 00:06:05,440
um

160
00:06:05,440 --> 00:06:06,560
reads

161
00:06:06,560 --> 00:06:08,080
the regions

162
00:06:08,080 --> 00:06:10,080
on the fly during the attack

163
00:06:10,080 --> 00:06:11,360
and

164
00:06:11,360 --> 00:06:12,800
builds the rope chain

165
00:06:12,800 --> 00:06:13,840
um

166
00:06:13,840 --> 00:06:18,159
with what what it has found and um

167
00:06:18,479 --> 00:06:20,800
yeah it's so it builds it during uh

168
00:06:20,800 --> 00:06:22,880
during the attack on the fly and then

169
00:06:22,880 --> 00:06:25,440
um once it has dropped chain it

170
00:06:25,440 --> 00:06:27,680
uh

171
00:06:28,160 --> 00:06:29,600
it changed the control flow to the

172
00:06:29,600 --> 00:06:31,840
generated

173
00:06:31,840 --> 00:06:35,159
rope chain

174
00:06:36,319 --> 00:06:40,080
so these randomization techniques

175
00:06:40,800 --> 00:06:41,840
increase

176
00:06:41,840 --> 00:06:44,080
raise the bar for attackers but

177
00:06:44,080 --> 00:06:46,319
it's still not good enough

178
00:06:46,319 --> 00:06:47,919
so

179
00:06:47,919 --> 00:06:49,599
state-of-the-art defenses propose to

180
00:06:49,599 --> 00:06:52,080
isolate these code pointers and several

181
00:06:52,080 --> 00:06:54,000
ways to do that are the hardware

182
00:06:54,000 --> 00:06:55,280
segmentation

183
00:06:55,280 --> 00:06:59,039
where special registers are used

184
00:06:59,759 --> 00:07:01,759
and these special registers have a

185
00:07:01,759 --> 00:07:04,720
boundary so

186
00:07:06,080 --> 00:07:08,400
by using these special registers you can

187
00:07:08,400 --> 00:07:10,639
prevent an attacker from reading beyond

188
00:07:10,639 --> 00:07:12,240
the boundary

189
00:07:12,240 --> 00:07:14,080
like access to access the sensitive

190
00:07:14,080 --> 00:07:15,840
regions another technique is the

191
00:07:15,840 --> 00:07:18,560
software fault isolation

192
00:07:18,560 --> 00:07:20,639
where you put limits on memory reads and

193
00:07:20,639 --> 00:07:21,680
writes

194
00:07:21,680 --> 00:07:23,360
so you prevent attacker from reading

195
00:07:23,360 --> 00:07:26,240
again for example from the sensor region

196
00:07:26,240 --> 00:07:30,919
and the third waste information hiding

197
00:07:33,120 --> 00:07:36,479
the state-of-the-art defenses that

198
00:07:36,479 --> 00:07:38,960
isolate the code pointers

199
00:07:38,960 --> 00:07:41,759
are aslar guard and control encode

200
00:07:41,759 --> 00:07:45,319
pointer integrity

201
00:07:45,759 --> 00:07:47,520
they they have

202
00:07:47,520 --> 00:07:49,919
two types of sensitive regions safe

203
00:07:49,919 --> 00:07:52,560
areas one is for the stack

204
00:07:52,560 --> 00:07:53,360
where

205
00:07:53,360 --> 00:07:55,360
it separates the return addresses from

206
00:07:55,360 --> 00:07:56,400
the stack

207
00:07:56,400 --> 00:07:58,479
to protect them against buffer overflows

208
00:07:58,479 --> 00:07:59,599
and

209
00:07:59,599 --> 00:08:00,879
um

210
00:08:00,879 --> 00:08:02,639
yeah so the safe set contains the return

211
00:08:02,639 --> 00:08:03,680
addresses

212
00:08:03,680 --> 00:08:06,400
and it also has so these defenses also

213
00:08:06,400 --> 00:08:08,639
have the safe region which contains the

214
00:08:08,639 --> 00:08:11,120
rest of the code pointers like

215
00:08:11,120 --> 00:08:13,840
function addresses

216
00:08:20,400 --> 00:08:24,000
and our focus will be on the safe stack

217
00:08:24,000 --> 00:08:26,560
which is also now available in the

218
00:08:26,560 --> 00:08:30,080
production compiler llvm

219
00:08:33,200 --> 00:08:34,399
so

220
00:08:34,399 --> 00:08:36,958
information hiding is

221
00:08:36,958 --> 00:08:40,399
is the preferred model because hardware

222
00:08:40,399 --> 00:08:43,360
segmentation is not available on 64-bit

223
00:08:43,360 --> 00:08:45,440
and it has a lower performance overhead

224
00:08:45,440 --> 00:08:48,240
than software fault isolation

225
00:08:48,240 --> 00:08:50,720
the idea of information hiding

226
00:08:50,720 --> 00:08:52,000
is

227
00:08:52,000 --> 00:08:54,959
yeah you separate

228
00:08:54,959 --> 00:08:57,440
the code points in a safe area and then

229
00:08:57,440 --> 00:08:59,839
you ensure that there are no pointers to

230
00:08:59,839 --> 00:09:00,880
these

231
00:09:00,880 --> 00:09:03,920
to these safe areas

232
00:09:04,560 --> 00:09:06,880
and then

233
00:09:07,120 --> 00:09:09,920
another assumption is that these safe

234
00:09:09,920 --> 00:09:11,920
areas have a very high entropy so they

235
00:09:11,920 --> 00:09:13,839
are very

236
00:09:13,839 --> 00:09:18,000
hidden in the memory address space

237
00:09:18,000 --> 00:09:19,920
so we looked at both both of these

238
00:09:19,920 --> 00:09:23,600
assumptions and

239
00:09:23,600 --> 00:09:26,000
we found several pointers

240
00:09:26,000 --> 00:09:28,000
unexpected pointers and i would like you

241
00:09:28,000 --> 00:09:29,279
to

242
00:09:29,279 --> 00:09:31,600
look at the paper

243
00:09:31,600 --> 00:09:33,200
for the pointers and we are going to

244
00:09:33,200 --> 00:09:35,440
focus on the high entropy

245
00:09:35,440 --> 00:09:37,519
of the

246
00:09:37,519 --> 00:09:41,040
the second assumption of information id

247
00:09:41,040 --> 00:09:43,440
so let me give you an idea of what

248
00:09:43,440 --> 00:09:44,880
entropy is

249
00:09:44,880 --> 00:09:48,399
entropy is the degree of randomness and

250
00:09:48,399 --> 00:09:50,959
this is given in bits

251
00:09:50,959 --> 00:09:53,519
so let's go over an example

252
00:09:53,519 --> 00:09:55,279
let's say we have a three bit address

253
00:09:55,279 --> 00:09:57,680
space where we have eight blocks of one

254
00:09:57,680 --> 00:09:59,040
byte

255
00:09:59,040 --> 00:10:00,640
and we wanna hide

256
00:10:00,640 --> 00:10:02,560
two bytes in these

257
00:10:02,560 --> 00:10:03,950
in this address space

258
00:10:03,950 --> 00:10:05,200
[Music]

259
00:10:05,200 --> 00:10:07,440
two bytes can be represented represented

260
00:10:07,440 --> 00:10:09,519
as two to the power of one so it

261
00:10:09,519 --> 00:10:12,480
consumes one bit of the of the three bit

262
00:10:12,480 --> 00:10:13,839
address space

263
00:10:13,839 --> 00:10:16,000
so the entropy reduces from three bits

264
00:10:16,000 --> 00:10:17,440
to two bits

265
00:10:17,440 --> 00:10:20,000
and you can read this in two ways so if

266
00:10:20,000 --> 00:10:21,600
the attacker

267
00:10:21,600 --> 00:10:22,399
is

268
00:10:22,399 --> 00:10:25,440
so if you say okay what is his um

269
00:10:25,440 --> 00:10:27,839
hit chance if he randomly tries to hit

270
00:10:27,839 --> 00:10:28,720
the

271
00:10:28,720 --> 00:10:30,560
sensitive region what's the chance of

272
00:10:30,560 --> 00:10:32,880
hitting the sensitive region

273
00:10:32,880 --> 00:10:34,000
um

274
00:10:34,000 --> 00:10:36,320
in the case of two bytes bytes hiding it

275
00:10:36,320 --> 00:10:38,880
in a eight

276
00:10:38,880 --> 00:10:40,480
in a three bit address space this this

277
00:10:40,480 --> 00:10:42,560
would be 25

278
00:10:42,560 --> 00:10:43,920
and if you would look at the number of

279
00:10:43,920 --> 00:10:46,240
probes it would need it would be 4 in

280
00:10:46,240 --> 00:10:48,959
the worst case

281
00:10:49,200 --> 00:10:50,800
if you double the size of the sensitive

282
00:10:50,800 --> 00:10:52,880
region the entropy reduces because 4

283
00:10:52,880 --> 00:10:54,640
bytes can be represented as 2 to the

284
00:10:54,640 --> 00:10:57,600
power of 2

285
00:10:57,600 --> 00:10:59,839
which means that the sensitive region

286
00:10:59,839 --> 00:11:01,680
consumes two bits of the three bit

287
00:11:01,680 --> 00:11:03,440
address space and then you can read this

288
00:11:03,440 --> 00:11:05,120
as

289
00:11:05,120 --> 00:11:07,760
there's a hit chance of fifty percent

290
00:11:07,760 --> 00:11:11,120
or the attacker needs at least i mean

291
00:11:11,120 --> 00:11:12,399
in worst case

292
00:11:12,399 --> 00:11:14,959
two probes and if you double it again

293
00:11:14,959 --> 00:11:17,440
this would reduce zero bit of entropy

294
00:11:17,440 --> 00:11:21,040
and there would be a 100 hit chance

295
00:11:21,040 --> 00:11:23,279
so now let's look at the 64-bit address

296
00:11:23,279 --> 00:11:25,279
space let's say you want to hide one

297
00:11:25,279 --> 00:11:27,600
byte in the 64-bit address space

298
00:11:27,600 --> 00:11:29,680
since this byte can be placed anywhere

299
00:11:29,680 --> 00:11:32,160
in the address space the entropy is 64

300
00:11:32,160 --> 00:11:33,519
bits

301
00:11:33,519 --> 00:11:35,200
however there are several reasons this

302
00:11:35,200 --> 00:11:38,160
entropy can reduce for example linux the

303
00:11:38,160 --> 00:11:39,760
user space

304
00:11:39,760 --> 00:11:44,160
of linux uses 47 bits

305
00:11:44,320 --> 00:11:47,600
of entropy i mean i'm sorry it uses 47

306
00:11:47,600 --> 00:11:50,320
bits of the memory address space

307
00:11:50,320 --> 00:11:53,839
so the entropy would be 47 bits for this

308
00:11:53,839 --> 00:11:57,240
one byte

309
00:11:57,279 --> 00:11:59,680
if you want to use one byte in address

310
00:11:59,680 --> 00:12:01,279
space you have to allocate one whole

311
00:12:01,279 --> 00:12:02,480
page

312
00:12:02,480 --> 00:12:05,040
which is 4 kilobyte

313
00:12:05,040 --> 00:12:06,880
which can be represented as 2 to the

314
00:12:06,880 --> 00:12:08,320
power of 12 so

315
00:12:08,320 --> 00:12:11,040
the entropy reduces by 12 more bits and

316
00:12:11,040 --> 00:12:14,800
entropy becomes 35 bits

317
00:12:17,040 --> 00:12:19,440
okay now if we

318
00:12:19,440 --> 00:12:23,120
look at the saves at save stack

319
00:12:23,120 --> 00:12:25,920
the default stack size in linux is eight

320
00:12:25,920 --> 00:12:28,079
megabyte and for compatibility reasons

321
00:12:28,079 --> 00:12:30,000
safestack has the same size

322
00:12:30,000 --> 00:12:31,920
so

323
00:12:31,920 --> 00:12:33,200
allocating an

324
00:12:33,200 --> 00:12:35,200
eight megabyte

325
00:12:35,200 --> 00:12:36,959
sensitive region in the memory address

326
00:12:36,959 --> 00:12:39,279
space would reduce

327
00:12:39,279 --> 00:12:41,760
the entropy by 11 more bits so the

328
00:12:41,760 --> 00:12:42,800
entropy

329
00:12:42,800 --> 00:12:44,959
is 24 bits for the for for the save

330
00:12:44,959 --> 00:12:46,399
stack

331
00:12:46,399 --> 00:12:49,120
for one stack

332
00:12:50,959 --> 00:12:52,399
so

333
00:12:52,399 --> 00:12:53,920
however the

334
00:12:53,920 --> 00:12:57,120
entropy can reduce even more

335
00:12:57,120 --> 00:12:59,279
as you would expect if you spawn

336
00:12:59,279 --> 00:13:01,440
more and more threats

337
00:13:01,440 --> 00:13:03,600
so you force the program to legitimately

338
00:13:03,600 --> 00:13:06,560
spawn as many threats as possible so

339
00:13:06,560 --> 00:13:08,399
having one more

340
00:13:08,399 --> 00:13:11,920
thread spawns another stack

341
00:13:12,160 --> 00:13:14,399
and the the sensitive region in memory

342
00:13:14,399 --> 00:13:17,200
address space doubles so the entropy

343
00:13:17,200 --> 00:13:20,240
reduces by one more bit

344
00:13:20,240 --> 00:13:22,399
spawning two more threats reduces the

345
00:13:22,399 --> 00:13:24,399
entropy to 22 bits

346
00:13:24,399 --> 00:13:26,560
and if you would spawn

347
00:13:26,560 --> 00:13:28,560
128

348
00:13:28,560 --> 00:13:30,079
k threats

349
00:13:30,079 --> 00:13:34,920
the entropy would reduce to 7 bits

350
00:13:35,200 --> 00:13:36,800
so the

351
00:13:36,800 --> 00:13:38,399
worst case

352
00:13:38,399 --> 00:13:40,079
number of probes you would need drops to

353
00:13:40,079 --> 00:13:42,639
128

354
00:13:42,639 --> 00:13:44,000
however

355
00:13:44,000 --> 00:13:47,199
the entropy of mmap in linux is 40 bits

356
00:13:47,199 --> 00:13:49,120
so in this case

357
00:13:49,120 --> 00:13:51,040
the entropy would reduce to zero and you

358
00:13:51,040 --> 00:13:52,959
would have a worst case number of probes

359
00:13:52,959 --> 00:13:54,399
needed this

360
00:13:54,399 --> 00:13:57,279
of just one

361
00:13:58,240 --> 00:14:00,160
so we looked at

362
00:14:00,160 --> 00:14:02,079
thread spring in different applications

363
00:14:02,079 --> 00:14:04,959
we looked at firefox chrome and mysql we

364
00:14:04,959 --> 00:14:07,760
found that in firefox the

365
00:14:07,760 --> 00:14:09,600
number of threads you could spawn in

366
00:14:09,600 --> 00:14:11,040
javascript

367
00:14:11,040 --> 00:14:13,920
is unbounded

368
00:14:14,160 --> 00:14:15,199
so you could

369
00:14:15,199 --> 00:14:18,959
in theory drop the entropy to zero

370
00:14:18,959 --> 00:14:21,279
in chrome the number of

371
00:14:21,279 --> 00:14:23,600
uh web workers you could spawn was about

372
00:14:23,600 --> 00:14:25,120
50 to 60

373
00:14:25,120 --> 00:14:26,240
but

374
00:14:26,240 --> 00:14:28,240
changing a global variable

375
00:14:28,240 --> 00:14:33,920
allowed us to spawn 250 web workers

376
00:14:33,920 --> 00:14:36,560
i think well we think that

377
00:14:36,560 --> 00:14:38,480
by looking at other global variables

378
00:14:38,480 --> 00:14:39,360
that

379
00:14:39,360 --> 00:14:41,760
one could find other ways to increase

380
00:14:41,760 --> 00:14:43,040
this number

381
00:14:43,040 --> 00:14:45,760
in mysql we were able to increase the

382
00:14:45,760 --> 00:14:48,560
number of threads

383
00:14:48,560 --> 00:14:51,920
from 150 to 1k

384
00:14:51,920 --> 00:14:53,120
and

385
00:14:53,120 --> 00:14:56,240
we think the same for mysql

386
00:14:56,240 --> 00:14:58,959
we had contact with firefox and firefox

387
00:14:58,959 --> 00:15:01,120
going to look into it and

388
00:15:01,120 --> 00:15:02,800
they're going to put a limit in the

389
00:15:02,800 --> 00:15:05,839
number of threads

390
00:15:07,920 --> 00:15:09,040
and

391
00:15:09,040 --> 00:15:10,480
um

392
00:15:10,480 --> 00:15:12,959
to to show that it is actually

393
00:15:12,959 --> 00:15:14,240
practical

394
00:15:14,240 --> 00:15:15,040
um

395
00:15:15,040 --> 00:15:16,880
we developed a proof of concept in

396
00:15:16,880 --> 00:15:18,639
firefox

397
00:15:18,639 --> 00:15:21,279
where we where we spawn like

398
00:15:21,279 --> 00:15:22,160
uh

399
00:15:22,160 --> 00:15:25,120
2000 threats

400
00:15:25,120 --> 00:15:27,360
and we use um

401
00:15:27,360 --> 00:15:30,639
a crush's memory probing to find

402
00:15:30,639 --> 00:15:32,639
like a safe stack and we were able to

403
00:15:32,639 --> 00:15:34,240
find

404
00:15:34,240 --> 00:15:37,839
a safe stack within three seconds

405
00:15:38,480 --> 00:15:40,160
this is just to show that you can do

406
00:15:40,160 --> 00:15:41,519
this with

407
00:15:41,519 --> 00:15:44,639
reasonable resources with

408
00:15:44,639 --> 00:15:46,880
much higher resources much better

409
00:15:46,880 --> 00:15:48,000
hardware

410
00:15:48,000 --> 00:15:49,839
um

411
00:15:49,839 --> 00:15:50,959
you would be

412
00:15:50,959 --> 00:15:53,040
one would be able to spawn much more

413
00:15:53,040 --> 00:15:56,079
threats and the crashes memory probing

414
00:15:56,079 --> 00:15:58,800
won't be needed

415
00:16:03,040 --> 00:16:05,040
so

416
00:16:05,040 --> 00:16:07,040
information hiding

417
00:16:07,040 --> 00:16:09,839
is still going to be used

418
00:16:09,839 --> 00:16:11,199
we expect

419
00:16:11,199 --> 00:16:13,120
so we thought what we could do about it

420
00:16:13,120 --> 00:16:14,959
and we developed authenticating page

421
00:16:14,959 --> 00:16:15,920
mapper

422
00:16:15,920 --> 00:16:19,279
which is based on two observations

423
00:16:19,279 --> 00:16:22,800
the the active space

424
00:16:22,800 --> 00:16:25,839
on the stack is actually much smaller

425
00:16:25,839 --> 00:16:26,720
than

426
00:16:26,720 --> 00:16:28,240
its actual size so you could just

427
00:16:28,240 --> 00:16:29,279
protect

428
00:16:29,279 --> 00:16:31,279
the the unused

429
00:16:31,279 --> 00:16:33,759
memory region in the stack

430
00:16:33,759 --> 00:16:36,079
and it the access to the stack or

431
00:16:36,079 --> 00:16:37,440
sensitive regions

432
00:16:37,440 --> 00:16:40,320
is has a well-defined access pattern

433
00:16:40,320 --> 00:16:42,240
with which you can authenticate the

434
00:16:42,240 --> 00:16:44,000
access to it

435
00:16:44,000 --> 00:16:45,440
so

436
00:16:45,440 --> 00:16:48,959
it guards it registers the unused pages

437
00:16:48,959 --> 00:16:51,920
and authenticates is its first access

438
00:16:51,920 --> 00:16:54,320
it does this we do this by installing a

439
00:16:54,320 --> 00:16:56,800
user level page fault handler

440
00:16:56,800 --> 00:17:00,320
then any access to the registered page

441
00:17:00,320 --> 00:17:02,320
gets authenticated by this pagevault

442
00:17:02,320 --> 00:17:04,400
handler

443
00:17:04,400 --> 00:17:05,679
so what does

444
00:17:05,679 --> 00:17:09,439
so how does authenticating page mapper

445
00:17:09,439 --> 00:17:13,039
work so here we have a stack

446
00:17:13,039 --> 00:17:14,799
there's an active region it has been

447
00:17:14,799 --> 00:17:16,799
accessed by the program

448
00:17:16,799 --> 00:17:18,640
and an inactive region that has not yet

449
00:17:18,640 --> 00:17:21,600
been accessed

450
00:17:21,919 --> 00:17:23,520
so let's say the program wants to use

451
00:17:23,520 --> 00:17:25,280
more stack space

452
00:17:25,280 --> 00:17:27,119
it

453
00:17:27,119 --> 00:17:29,840
subtracts a value from

454
00:17:29,840 --> 00:17:33,120
our speed moves the stack pointer

455
00:17:33,120 --> 00:17:34,480
and then it

456
00:17:34,480 --> 00:17:36,880
tries to write a value to the stack in

457
00:17:36,880 --> 00:17:39,200
this case the page fault handler will

458
00:17:39,200 --> 00:17:40,880
trigger and it will check for the

459
00:17:40,880 --> 00:17:43,360
following

460
00:17:45,600 --> 00:17:48,720
it will check the following uh

461
00:17:48,720 --> 00:17:50,320
comparisons

462
00:17:50,320 --> 00:17:52,320
it will

463
00:17:52,320 --> 00:17:53,120
it

464
00:17:53,120 --> 00:17:55,360
it will ensure that or it will check

465
00:17:55,360 --> 00:17:56,960
whether the stack pointer is pointing

466
00:17:56,960 --> 00:17:58,000
between

467
00:17:58,000 --> 00:18:00,240
the current stack pointer and the stack

468
00:18:00,240 --> 00:18:01,600
base

469
00:18:01,600 --> 00:18:04,159
if it does

470
00:18:04,480 --> 00:18:07,600
then it releases the page

471
00:18:07,600 --> 00:18:10,799
and the program can continue

472
00:18:10,799 --> 00:18:13,280
but if there is a probe into the

473
00:18:13,280 --> 00:18:14,480
inactive

474
00:18:14,480 --> 00:18:16,720
region

475
00:18:16,720 --> 00:18:19,360
the page vote handler will trigger again

476
00:18:19,360 --> 00:18:22,640
and check for the comparison

477
00:18:22,640 --> 00:18:25,440
and since this

478
00:18:26,160 --> 00:18:28,720
this location is not between

479
00:18:28,720 --> 00:18:31,520
the stack pointer and stack base

480
00:18:31,520 --> 00:18:34,799
it will terminate the program

481
00:18:35,840 --> 00:18:37,039
however

482
00:18:37,039 --> 00:18:38,480
there are some

483
00:18:38,480 --> 00:18:40,720
issues with this so an attacker could

484
00:18:40,720 --> 00:18:43,600
follow the pointers we found

485
00:18:43,600 --> 00:18:46,720
and get to the base

486
00:18:46,720 --> 00:18:48,559
or he could

487
00:18:48,559 --> 00:18:51,440
probe the memory in such a way that he

488
00:18:51,440 --> 00:18:52,400
would not

489
00:18:52,400 --> 00:18:54,400
touch the inactive region but

490
00:18:54,400 --> 00:18:57,760
he would touch the active region before

491
00:18:57,760 --> 00:19:00,559
getting to the inactive region

492
00:19:00,559 --> 00:19:02,640
so it if it starts probing from the high

493
00:19:02,640 --> 00:19:04,080
address it would get to the active

494
00:19:04,080 --> 00:19:06,720
region first

495
00:19:06,880 --> 00:19:08,559
so as a solution we came up with

496
00:19:08,559 --> 00:19:10,880
inflating the stack

497
00:19:10,880 --> 00:19:12,880
and then moving the the

498
00:19:12,880 --> 00:19:14,480
original stack

499
00:19:14,480 --> 00:19:18,320
randomly in this inflated stack

500
00:19:19,600 --> 00:19:22,160
the inflated area we

501
00:19:22,160 --> 00:19:25,360
guard with a different handler

502
00:19:25,360 --> 00:19:27,280
such that if an axis happens to the

503
00:19:27,280 --> 00:19:30,160
inflated area we immediately

504
00:19:30,160 --> 00:19:32,960
disallow this

505
00:19:33,120 --> 00:19:36,639
and the check remains the same still

506
00:19:36,960 --> 00:19:38,720
the the access to the inactive region

507
00:19:38,720 --> 00:19:40,400
should be between the stack pointer and

508
00:19:40,400 --> 00:19:43,120
the stack base

509
00:19:43,120 --> 00:19:46,160
another advantage of increasing

510
00:19:46,160 --> 00:19:48,400
inflating the stack is that it increases

511
00:19:48,400 --> 00:19:52,039
the detection rate

512
00:19:54,799 --> 00:19:57,120
so we evaluated the performance overhead

513
00:19:57,120 --> 00:19:58,640
of apm

514
00:19:58,640 --> 00:20:00,960
with safestack

515
00:20:00,960 --> 00:20:02,880
on spec cpu

516
00:20:02,880 --> 00:20:04,880
and browser benchmarks in chromium

517
00:20:04,880 --> 00:20:07,440
firefox and we had

518
00:20:07,440 --> 00:20:10,080
negligible overhead

519
00:20:10,080 --> 00:20:12,400
and this is especially because

520
00:20:12,400 --> 00:20:14,559
the authent the total time

521
00:20:14,559 --> 00:20:16,799
of the authentication

522
00:20:16,799 --> 00:20:18,720
is far less than the execution time of

523
00:20:18,720 --> 00:20:20,960
the benchmark itself and the

524
00:20:20,960 --> 00:20:23,039
authentication only happens once once

525
00:20:23,039 --> 00:20:24,799
the page is released

526
00:20:24,799 --> 00:20:25,600
the

527
00:20:25,600 --> 00:20:26,799
uh

528
00:20:26,799 --> 00:20:28,880
the page won't be

529
00:20:28,880 --> 00:20:30,320
guarded again so

530
00:20:30,320 --> 00:20:32,840
it's only one time

531
00:20:32,840 --> 00:20:34,799
check

532
00:20:34,799 --> 00:20:36,880
so what an attacker could do is

533
00:20:36,880 --> 00:20:40,320
he could fill up the whole active

534
00:20:40,320 --> 00:20:41,120
act

535
00:20:41,120 --> 00:20:43,360
the whole original

536
00:20:43,360 --> 00:20:46,840
stack region by using as much

537
00:20:46,840 --> 00:20:50,240
uh stack memory as possible

538
00:20:50,240 --> 00:20:51,679
and then it would reduce the detection

539
00:20:51,679 --> 00:20:54,640
rate of apm

540
00:20:55,679 --> 00:20:57,039
so

541
00:20:57,039 --> 00:20:59,760
what you could do is

542
00:20:59,760 --> 00:21:00,960
you could have

543
00:21:00,960 --> 00:21:02,640
well

544
00:21:02,640 --> 00:21:04,720
you could play with the inflation factor

545
00:21:04,720 --> 00:21:05,760
if you

546
00:21:05,760 --> 00:21:07,919
if you have an inflation factor of 1 of

547
00:21:07,919 --> 00:21:09,919
course then

548
00:21:09,919 --> 00:21:11,919
no no

549
00:21:11,919 --> 00:21:14,240
page will be protected

550
00:21:14,240 --> 00:21:17,280
if the if the whole

551
00:21:17,280 --> 00:21:19,679
stack region is

552
00:21:19,679 --> 00:21:22,080
uh used by the attacker

553
00:21:22,080 --> 00:21:24,400
if you have an inflation factor of

554
00:21:24,400 --> 00:21:25,919
two

555
00:21:25,919 --> 00:21:27,919
once the attacker

556
00:21:27,919 --> 00:21:28,880
uses

557
00:21:28,880 --> 00:21:31,440
up the whole original stack region you

558
00:21:31,440 --> 00:21:34,080
will still have

559
00:21:34,080 --> 00:21:35,200
the half

560
00:21:35,200 --> 00:21:38,080
of the inflated stack area protected so

561
00:21:38,080 --> 00:21:38,960
the

562
00:21:38,960 --> 00:21:41,039
worst case detection guarantees

563
00:21:41,039 --> 00:21:44,960
of apm will reduce to 50

564
00:21:44,960 --> 00:21:46,400
and you can increase this inflation

565
00:21:46,400 --> 00:21:49,039
factor more

566
00:21:49,039 --> 00:21:50,080
um

567
00:21:50,080 --> 00:21:52,240
with an inflation factor of 10

568
00:21:52,240 --> 00:21:53,360
times

569
00:21:53,360 --> 00:21:54,080
the

570
00:21:54,080 --> 00:21:56,240
detection guarantee will be 90 in the

571
00:21:56,240 --> 00:21:59,200
worst case and you might wonder whether

572
00:21:59,200 --> 00:22:01,760
this would hurt the system like

573
00:22:01,760 --> 00:22:04,480
allocating more and more

574
00:22:04,480 --> 00:22:06,080
area for the stack

575
00:22:06,080 --> 00:22:07,679
actually this won't

576
00:22:07,679 --> 00:22:10,559
hurt the system because

577
00:22:10,559 --> 00:22:12,960
the inflated area won't be physically

578
00:22:12,960 --> 00:22:15,280
mapped

579
00:22:18,320 --> 00:22:20,799
there are limitations of apm

580
00:22:20,799 --> 00:22:23,280
for example if the application itself

581
00:22:23,280 --> 00:22:24,080
is

582
00:22:24,080 --> 00:22:27,679
storing pointers to the

583
00:22:27,679 --> 00:22:29,919
actual stack

584
00:22:29,919 --> 00:22:31,120
region

585
00:22:31,120 --> 00:22:32,240
then

586
00:22:32,240 --> 00:22:34,799
an attacker could reveal this and

587
00:22:34,799 --> 00:22:37,200
get to the active region without needing

588
00:22:37,200 --> 00:22:39,679
to probe

589
00:22:39,840 --> 00:22:42,640
another limitation is that an attacker

590
00:22:42,640 --> 00:22:44,080
could use

591
00:22:44,080 --> 00:22:46,480
side channel attacks to find out where

592
00:22:46,480 --> 00:22:48,559
this active region is

593
00:22:48,559 --> 00:22:53,799
like maybe cash side channel attacks

594
00:22:54,400 --> 00:22:56,720
to conclude my presentation

595
00:22:56,720 --> 00:22:58,960
we demonstrated an efficient way to

596
00:22:58,960 --> 00:23:02,159
locate a sensitive region

597
00:23:02,159 --> 00:23:04,080
and we named this

598
00:23:04,080 --> 00:23:05,520
new way

599
00:23:05,520 --> 00:23:08,799
the threat spraying technique and we

600
00:23:08,799 --> 00:23:11,280
believe that strong isolation techniques

601
00:23:11,280 --> 00:23:13,600
should be preferred over information

602
00:23:13,600 --> 00:23:15,120
hiding

603
00:23:15,120 --> 00:23:16,559
and

604
00:23:16,559 --> 00:23:18,480
authentication page mapper

605
00:23:18,480 --> 00:23:20,640
is a possible solution to harden

606
00:23:20,640 --> 00:23:23,760
information hiding until

607
00:23:23,760 --> 00:23:26,080
software fault isolation

608
00:23:26,080 --> 00:23:28,159
can be widely deployed thank you for

609
00:23:28,159 --> 00:23:29,520
listening and i would like to answer

610
00:23:29,520 --> 00:23:32,679
your questions

611
00:23:40,400 --> 00:23:42,480
you

