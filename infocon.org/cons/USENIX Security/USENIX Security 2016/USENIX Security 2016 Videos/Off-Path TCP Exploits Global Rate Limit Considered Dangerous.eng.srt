1
00:00:10,080 --> 00:00:11,519
hello

2
00:00:11,519 --> 00:00:14,320
thanks for introduction introduction so

3
00:00:14,320 --> 00:00:15,839
thanks sorry

4
00:00:15,839 --> 00:00:18,240
hi everyone my name is i'm from uc

5
00:00:18,240 --> 00:00:19,359
riverside

6
00:00:19,359 --> 00:00:22,000
um today i'm talking about the

7
00:00:22,000 --> 00:00:24,480
our work which is about our past tcp

8
00:00:24,480 --> 00:00:25,359
attack

9
00:00:25,359 --> 00:00:28,240
um by exploiting a globalized limit in

10
00:00:28,240 --> 00:00:30,880
recent linux kernel ssi channel

11
00:00:30,880 --> 00:00:32,960
this work is a collaboration with army

12
00:00:32,960 --> 00:00:34,640
research lab

13
00:00:34,640 --> 00:00:37,840
well tcp is such an old protocol you may

14
00:00:37,840 --> 00:00:40,480
wonder what hack we are studying it

15
00:00:40,480 --> 00:00:41,280
well

16
00:00:41,280 --> 00:00:43,760
since it's a fundamental lower layer

17
00:00:43,760 --> 00:00:46,640
protocol its security affects output

18
00:00:46,640 --> 00:00:49,280
layer protocol such as tls

19
00:00:49,280 --> 00:00:53,120
as we will show this in this talk

20
00:00:53,440 --> 00:00:56,239
in our work we discover a subtotal tcp

21
00:00:56,239 --> 00:00:57,600
side channel

22
00:00:57,600 --> 00:01:00,160
vulnerability in linux kernel 3.6 and

23
00:01:00,160 --> 00:01:02,879
beyond given any two arbitrary hosts on

24
00:01:02,879 --> 00:01:04,080
the internet

25
00:01:04,080 --> 00:01:05,920
blend attacker can exploit this

26
00:01:05,920 --> 00:01:08,320
vulnerability to infer the existence of

27
00:01:08,320 --> 00:01:09,840
communication

28
00:01:09,840 --> 00:01:12,000
um the sequence number in use and act

29
00:01:12,000 --> 00:01:13,439
number in use

30
00:01:13,439 --> 00:01:15,759
well this can in turn be used for tcp

31
00:01:15,759 --> 00:01:17,840
connection termination attack and

32
00:01:17,840 --> 00:01:20,799
malaysia malicious data injection attack

33
00:01:20,799 --> 00:01:22,720
this side channel vulnerability affects

34
00:01:22,720 --> 00:01:24,640
all linux kernels since

35
00:01:24,640 --> 00:01:27,200
late 2012

36
00:01:27,200 --> 00:01:29,280
in my presentation i will first talk

37
00:01:29,280 --> 00:01:32,079
about the strat model then i will talk i

38
00:01:32,079 --> 00:01:34,240
will give the background information

39
00:01:34,240 --> 00:01:36,240
after that i'm going to talk about the

40
00:01:36,240 --> 00:01:39,680
vulnerability our attack and evaluation

41
00:01:39,680 --> 00:01:41,520
and finally i will give some possible

42
00:01:41,520 --> 00:01:44,799
defense and conclude our work

43
00:01:44,799 --> 00:01:47,920
let's look at the threat model first

44
00:01:47,920 --> 00:01:50,479
our cell model is a very common setting

45
00:01:50,479 --> 00:01:53,200
given any arbitrary pair all client and

46
00:01:53,200 --> 00:01:56,000
server a blend outpath attacker is

47
00:01:56,000 --> 00:01:58,399
trying to

48
00:01:58,399 --> 00:02:00,479
inform their connection

49
00:02:00,479 --> 00:02:03,600
oppas attacker hackn means hacker can be

50
00:02:03,600 --> 00:02:05,200
anywhere

51
00:02:05,200 --> 00:02:07,840
with no mains medal needed since our

52
00:02:07,840 --> 00:02:10,239
attack is pure or passed without running

53
00:02:10,239 --> 00:02:12,720
any malaysia's codes on client side

54
00:02:12,720 --> 00:02:15,520
attacker is unable to eavesdrop any

55
00:02:15,520 --> 00:02:17,680
packets and states between client and

56
00:02:17,680 --> 00:02:19,360
server

57
00:02:19,360 --> 00:02:21,440
any machine might act as the attacker in

58
00:02:21,440 --> 00:02:23,840
this model as long as as long as it's

59
00:02:23,840 --> 00:02:26,080
allowed to sense proof package in

60
00:02:26,080 --> 00:02:30,959
network with clients or servers i purges

61
00:02:31,360 --> 00:02:34,640
now let's look at the background

62
00:02:34,640 --> 00:02:36,959
well security was not the primary

63
00:02:36,959 --> 00:02:39,760
concern in the design otcp so there have

64
00:02:39,760 --> 00:02:42,560
been many security patches over years

65
00:02:42,560 --> 00:02:44,640
with our surround model the most common

66
00:02:44,640 --> 00:02:46,720
attack are the traditional blend in

67
00:02:46,720 --> 00:02:48,160
window attacks

68
00:02:48,160 --> 00:02:50,720
an alpaca attacker can sense both tcp

69
00:02:50,720 --> 00:02:53,680
packets by brute forcing all possible

70
00:02:53,680 --> 00:02:55,440
sequence numbers to achieve connection

71
00:02:55,440 --> 00:02:58,400
termination or data injection attacks

72
00:02:58,400 --> 00:03:01,040
to succeed in such attack it's necessary

73
00:03:01,040 --> 00:03:03,599
to know on four tuples

74
00:03:03,599 --> 00:03:06,400
source ip destination ip source port and

75
00:03:06,400 --> 00:03:09,200
destination port or tcp connection

76
00:03:09,200 --> 00:03:11,360
besides the gas sequence number should

77
00:03:11,360 --> 00:03:14,319
fall in the received window

78
00:03:14,319 --> 00:03:18,080
to defend against such attacks rfc-5961

79
00:03:18,080 --> 00:03:20,400
proposed three modifications with such

80
00:03:20,400 --> 00:03:22,400
with the receiving schemes

81
00:03:22,400 --> 00:03:24,640
ironically we discover those three

82
00:03:24,640 --> 00:03:26,799
modifications creates an even more

83
00:03:26,799 --> 00:03:29,200
serious vulnerability

84
00:03:29,200 --> 00:03:31,519
linux introduced and said channel one in

85
00:03:31,519 --> 00:03:34,159
its of implementations i'm going to show

86
00:03:34,159 --> 00:03:36,159
this three modification first and

87
00:03:36,159 --> 00:03:37,599
explain how a new side channel

88
00:03:37,599 --> 00:03:39,920
vulnerability is introduced to search

89
00:03:39,920 --> 00:03:40,879
and

90
00:03:40,879 --> 00:03:43,440
with such changes

91
00:03:43,440 --> 00:03:44,640
okay

92
00:03:44,640 --> 00:03:46,319
i'm starting with seeing receiving

93
00:03:46,319 --> 00:03:48,640
scheme let's look at this and sequence

94
00:03:48,640 --> 00:03:50,319
number space first

95
00:03:50,319 --> 00:03:53,680
um in tcp header sequence number uh is

96
00:03:53,680 --> 00:03:56,239
32 bits long so there are four billion

97
00:03:56,239 --> 00:03:57,680
different values

98
00:03:57,680 --> 00:04:00,000
the blue area is called receive window

99
00:04:00,000 --> 00:04:02,799
while their green area is out the window

100
00:04:02,799 --> 00:04:06,080
before rfc 5961 when senders send them

101
00:04:06,080 --> 00:04:08,720
sync package if their sequence number is

102
00:04:08,720 --> 00:04:11,120
out of window receiver will send an act

103
00:04:11,120 --> 00:04:12,000
back

104
00:04:12,000 --> 00:04:14,239
otherwise receiver will resize this

105
00:04:14,239 --> 00:04:16,560
connection immediately

106
00:04:16,560 --> 00:04:18,798
an office attacker might have

107
00:04:18,798 --> 00:04:20,959
might tear down tcp connection by

108
00:04:20,959 --> 00:04:23,440
injecting smooth steam packet

109
00:04:23,440 --> 00:04:26,000
a valid unseen package will cause

110
00:04:26,000 --> 00:04:28,160
receiver to believe that their sender

111
00:04:28,160 --> 00:04:30,240
has restarted

112
00:04:30,240 --> 00:04:32,320
since any value in window can reset this

113
00:04:32,320 --> 00:04:34,479
connection attacker can boot false

114
00:04:34,479 --> 00:04:36,560
receive window instead of brute force

115
00:04:36,560 --> 00:04:38,720
each sequence number

116
00:04:38,720 --> 00:04:41,759
to mitigate this attack rfc enforces the

117
00:04:41,759 --> 00:04:43,919
receiver to send and challenge act to

118
00:04:43,919 --> 00:04:46,720
sender to confirm its and if it's indeed

119
00:04:46,720 --> 00:04:49,360
restarted

120
00:04:49,360 --> 00:04:51,600
now let's look at the resale receiving

121
00:04:51,600 --> 00:04:55,199
scheme before rfc 5961 is similar

122
00:04:55,199 --> 00:04:57,440
compared to scene received scheme

123
00:04:57,440 --> 00:04:59,440
connection will be reset when the

124
00:04:59,440 --> 00:05:01,919
sequence number is in window

125
00:05:01,919 --> 00:05:04,960
to mitigate this attack rfc requires the

126
00:05:04,960 --> 00:05:07,520
receiver to reset this connection only

127
00:05:07,520 --> 00:05:10,160
when their guest sequence number exactly

128
00:05:10,160 --> 00:05:12,800
match to receive dot next which is the

129
00:05:12,800 --> 00:05:15,360
next expected sequence number

130
00:05:15,360 --> 00:05:16,720
for the wrestling windows sequence

131
00:05:16,720 --> 00:05:19,120
number receiver will send a challenge

132
00:05:19,120 --> 00:05:21,520
act to confirm if sender indeed

133
00:05:21,520 --> 00:05:24,400
terminated this connection

134
00:05:24,400 --> 00:05:26,400
since our past attacker cannot receive

135
00:05:26,400 --> 00:05:28,479
this challenge act it needs to be

136
00:05:28,479 --> 00:05:31,600
extremely lucky to get one one number

137
00:05:31,600 --> 00:05:36,479
out of 4 billion to be able to succeed

138
00:05:37,039 --> 00:05:39,600
now let's look at data receiving skin

139
00:05:39,600 --> 00:05:42,000
when packed arrives the receiver first

140
00:05:42,000 --> 00:05:43,759
checks their sequence number to make

141
00:05:43,759 --> 00:05:45,600
sure it is in window

142
00:05:45,600 --> 00:05:47,600
after that the app number will be

143
00:05:47,600 --> 00:05:48,720
checked

144
00:05:48,720 --> 00:05:50,960
now let's look at the app number space

145
00:05:50,960 --> 00:05:52,639
we call this blue arrow accept the

146
00:05:52,639 --> 00:05:54,080
window

147
00:05:54,080 --> 00:05:55,120
here

148
00:05:55,120 --> 00:05:57,759
while the red part is out of window

149
00:05:57,759 --> 00:06:00,880
before rfc phone 961 act is valid as

150
00:06:00,880 --> 00:06:05,120
soon as it's located in a south window

151
00:06:05,919 --> 00:06:07,840
which is an effectively half of the

152
00:06:07,840 --> 00:06:10,240
space therefore a blind all-past

153
00:06:10,240 --> 00:06:12,960
attacker do not have to guess their act

154
00:06:12,960 --> 00:06:14,240
number

155
00:06:14,240 --> 00:06:15,280
well

156
00:06:15,280 --> 00:06:17,440
instead after attacking friends sequence

157
00:06:17,440 --> 00:06:19,600
number in receive window it can simply

158
00:06:19,600 --> 00:06:22,160
guess twice

159
00:06:22,160 --> 00:06:27,280
after rfc 5961 a new a new window called

160
00:06:27,280 --> 00:06:29,120
challenge act challenge window is

161
00:06:29,120 --> 00:06:31,680
introduced this window is designed to

162
00:06:31,680 --> 00:06:35,039
minimize the sap window well therefore

163
00:06:35,039 --> 00:06:37,039
the probability that guess the act

164
00:06:37,039 --> 00:06:40,080
number hit in this window is minimized

165
00:06:40,080 --> 00:06:41,600
while prevents dropping like a

166
00:06:41,600 --> 00:06:44,000
legitimate response

167
00:06:44,000 --> 00:06:47,199
in this way after rfc 5961 when at

168
00:06:47,199 --> 00:06:49,199
number is in this challenging window

169
00:06:49,199 --> 00:06:51,520
receiver will send a challenge act back

170
00:06:51,520 --> 00:06:55,280
it doesn't change the rest cases

171
00:06:55,840 --> 00:06:58,880
well in summary rfc enforces a much

172
00:06:58,880 --> 00:07:01,520
stricter check on incoming packets to

173
00:07:01,520 --> 00:07:04,560
make our pass attack extremely hard

174
00:07:04,560 --> 00:07:07,280
when four tuples are correct challenge x

175
00:07:07,280 --> 00:07:09,120
will be triggered when it's in sync

176
00:07:09,120 --> 00:07:11,680
packet with any sequence number

177
00:07:11,680 --> 00:07:13,919
or reset packet within

178
00:07:13,919 --> 00:07:15,759
in windows sequence number

179
00:07:15,759 --> 00:07:18,400
or data package within windows 6 number

180
00:07:18,400 --> 00:07:21,120
and old act number in challenge window

181
00:07:21,120 --> 00:07:23,680
we can see the different type of packets

182
00:07:23,680 --> 00:07:25,520
need different level information to

183
00:07:25,520 --> 00:07:27,919
checker challenge ack

184
00:07:27,919 --> 00:07:30,319
in our work we utilize this feature to

185
00:07:30,319 --> 00:07:32,080
guest poll number first

186
00:07:32,080 --> 00:07:34,400
then we get sequence number with those

187
00:07:34,400 --> 00:07:37,280
values we can further guess act number

188
00:07:37,280 --> 00:07:39,360
how to use this challenge act to guess

189
00:07:39,360 --> 00:07:41,919
those values is done by using our

190
00:07:41,919 --> 00:07:45,599
discovered style channel

191
00:07:45,599 --> 00:07:48,240
well this channel vulnerability has

192
00:07:48,240 --> 00:07:51,360
introduced oh sorry

193
00:07:56,400 --> 00:07:58,800
okay this side channel vulnerability is

194
00:07:58,800 --> 00:08:00,879
introduced in linux kernel by

195
00:08:00,879 --> 00:08:03,520
implementing a re-limit or challenge act

196
00:08:03,520 --> 00:08:06,080
scheme in sim rsv

197
00:08:06,080 --> 00:08:08,960
this mechanism is designed to reduce the

198
00:08:08,960 --> 00:08:11,199
number of challenge act packets to save

199
00:08:11,199 --> 00:08:12,960
resources

200
00:08:12,960 --> 00:08:16,000
and rfc market as a should be should be

201
00:08:16,000 --> 00:08:18,639
implemented

202
00:08:18,639 --> 00:08:20,080
now i'm going to explain the

203
00:08:20,080 --> 00:08:22,240
vulnerabilities that we found

204
00:08:22,240 --> 00:08:24,960
well we know that whenever we share

205
00:08:24,960 --> 00:08:27,840
states it can be it can potentially

206
00:08:27,840 --> 00:08:29,759
introduce a stat channel

207
00:08:29,759 --> 00:08:33,360
right in linux kernel 3.6 this this

208
00:08:33,360 --> 00:08:36,000
challenge x scheme was first implemented

209
00:08:36,000 --> 00:08:38,880
a global system variable was introduced

210
00:08:38,880 --> 00:08:41,200
to control maximum number or challenge x

211
00:08:41,200 --> 00:08:42,399
per second

212
00:08:42,399 --> 00:08:45,040
it is set to 100 by default

213
00:08:45,040 --> 00:08:47,200
and this limit is shared across all

214
00:08:47,200 --> 00:08:49,920
connections including the connection is

215
00:08:49,920 --> 00:08:52,480
established with attacker

216
00:08:52,480 --> 00:08:55,200
so this shared state can be exploited as

217
00:08:55,200 --> 00:08:56,880
a side channel

218
00:08:56,880 --> 00:08:59,040
for example attacker can simply

219
00:08:59,040 --> 00:09:00,959
establish a regular connection with

220
00:09:00,959 --> 00:09:01,839
server

221
00:09:01,839 --> 00:09:04,720
and send 100 reset packets with a long

222
00:09:04,720 --> 00:09:06,880
sequence number to trigger maximum

223
00:09:06,880 --> 00:09:08,880
number or challenge act

224
00:09:08,880 --> 00:09:10,160
if challenge

225
00:09:10,160 --> 00:09:12,160
since challenge act is rarely triggered

226
00:09:12,160 --> 00:09:14,720
in regular traffic it is likely for

227
00:09:14,720 --> 00:09:18,560
attackers to receive 100 transact

228
00:09:18,560 --> 00:09:20,800
in this example i also want to highlight

229
00:09:20,800 --> 00:09:23,200
that client can run any operation

230
00:09:23,200 --> 00:09:24,480
systems

231
00:09:24,480 --> 00:09:27,200
operating system since we we only

232
00:09:27,200 --> 00:09:30,959
exploit the side channel as server

233
00:09:31,519 --> 00:09:33,120
now i'm going to show how the side

234
00:09:33,120 --> 00:09:35,040
channel vulnerability can be utilized by

235
00:09:35,040 --> 00:09:37,680
using guest then check method

236
00:09:37,680 --> 00:09:40,399
at first attacker sentence booth packet

237
00:09:40,399 --> 00:09:42,959
with a guest value then attacker can use

238
00:09:42,959 --> 00:09:45,120
its regular connection with server to

239
00:09:45,120 --> 00:09:48,640
check if this guess is correct or not

240
00:09:48,640 --> 00:09:51,040
for example if attacker once you guess

241
00:09:51,040 --> 00:09:53,680
the crowd client client port attacker

242
00:09:53,680 --> 00:09:56,320
consent can send a smooth package with

243
00:09:56,320 --> 00:09:58,640
client ip address and a guest source

244
00:09:58,640 --> 00:09:59,920
port

245
00:09:59,920 --> 00:10:02,160
at server side this incoming packet will

246
00:10:02,160 --> 00:10:05,040
be considered as client packet and if

247
00:10:05,040 --> 00:10:07,760
this support source port is matched

248
00:10:07,760 --> 00:10:09,600
server will send one challenge act to

249
00:10:09,600 --> 00:10:11,839
client

250
00:10:11,839 --> 00:10:14,240
after that attacker use its own regular

251
00:10:14,240 --> 00:10:16,720
connection to send 100 reset packet at

252
00:10:16,720 --> 00:10:18,959
same one second to trigger maximum

253
00:10:18,959 --> 00:10:22,240
number of challenge acts from server

254
00:10:22,240 --> 00:10:23,760
since this challenge

255
00:10:23,760 --> 00:10:25,600
accurate limit is shared across all

256
00:10:25,600 --> 00:10:26,720
connections

257
00:10:26,720 --> 00:10:29,279
um if server has sent one challenge act

258
00:10:29,279 --> 00:10:30,480
to client

259
00:10:30,480 --> 00:10:32,399
an attacker can only receive 99

260
00:10:32,399 --> 00:10:34,240
challenge x

261
00:10:34,240 --> 00:10:36,800
like here

262
00:10:38,399 --> 00:10:40,640
in this example the blue arrow is a

263
00:10:40,640 --> 00:10:43,120
spoofed client packet which is sent in

264
00:10:43,120 --> 00:10:45,279
guest phase while the red arrow are

265
00:10:45,279 --> 00:10:47,519
packaged in attackers regular connection

266
00:10:47,519 --> 00:10:49,600
which is sent in check face

267
00:10:49,600 --> 00:10:51,680
well guests and check faces they have to

268
00:10:51,680 --> 00:10:54,880
be at steam one second

269
00:10:58,079 --> 00:11:00,399
similarly if it's a long gas no

270
00:11:00,399 --> 00:11:02,560
challenge act is sent to client so

271
00:11:02,560 --> 00:11:04,959
attacker can receive 100 change act from

272
00:11:04,959 --> 00:11:06,720
server

273
00:11:06,720 --> 00:11:08,560
this difference number or change act

274
00:11:08,560 --> 00:11:10,560
received by attacker can indicate

275
00:11:10,560 --> 00:11:12,560
whether he or she made a correct guess

276
00:11:12,560 --> 00:11:15,640
or not

277
00:11:16,560 --> 00:11:19,120
but here we have one challenge

278
00:11:19,120 --> 00:11:21,120
in guess then check method the guess

279
00:11:21,120 --> 00:11:23,279
value can be confirmed only at the end

280
00:11:23,279 --> 00:11:25,760
of the second due to the way rate limit

281
00:11:25,760 --> 00:11:27,519
is implemented

282
00:11:27,519 --> 00:11:29,920
so if we only test each value at each

283
00:11:29,920 --> 00:11:32,399
second the time cost will be really

284
00:11:32,399 --> 00:11:33,600
expensive

285
00:11:33,600 --> 00:11:35,600
therefore attacker can

286
00:11:35,600 --> 00:11:38,480
can prove multiple values in one second

287
00:11:38,480 --> 00:11:40,640
and he or she can know if a graph value

288
00:11:40,640 --> 00:11:43,200
is included in this range

289
00:11:43,200 --> 00:11:45,360
given this range how defense specific

290
00:11:45,360 --> 00:11:48,560
value will be explained later

291
00:11:48,560 --> 00:11:51,040
in our work we define as the maximum

292
00:11:51,040 --> 00:11:53,440
number of problem packets in one second

293
00:11:53,440 --> 00:11:55,279
this value depends on the bandwidth or

294
00:11:55,279 --> 00:11:56,480
current

295
00:11:56,480 --> 00:11:58,959
network

296
00:11:59,040 --> 00:12:01,360
okay similar to fundpoint number

297
00:12:01,360 --> 00:12:02,959
sequence number in window can be

298
00:12:02,959 --> 00:12:06,560
inferred by inferring inferring

299
00:12:06,560 --> 00:12:08,880
by invert can be inferred by sending

300
00:12:08,880 --> 00:12:10,880
such guests and check method with reset

301
00:12:10,880 --> 00:12:12,480
package with

302
00:12:12,480 --> 00:12:14,800
when four tuples are known

303
00:12:14,800 --> 00:12:16,240
attacker can indicate whether the

304
00:12:16,240 --> 00:12:18,480
sequence number is in window or not by

305
00:12:18,480 --> 00:12:20,560
checking the number of checklist

306
00:12:20,560 --> 00:12:21,680
received

307
00:12:21,680 --> 00:12:23,920
well same process can be done to infer

308
00:12:23,920 --> 00:12:26,160
app numbering window by sending a data

309
00:12:26,160 --> 00:12:29,200
packet when full tuples and sequence

310
00:12:29,200 --> 00:12:31,920
number are known

311
00:12:32,480 --> 00:12:34,639
in summary in traditional brute force

312
00:12:34,639 --> 00:12:36,959
attack they are finding a correct packet

313
00:12:36,959 --> 00:12:39,680
with all possible combination an open

314
00:12:39,680 --> 00:12:42,399
number sequence number and act number

315
00:12:42,399 --> 00:12:44,480
which has 10 to the power of 22

316
00:12:44,480 --> 00:12:46,000
different values

317
00:12:46,000 --> 00:12:48,240
on the other hand our attack can infer

318
00:12:48,240 --> 00:12:50,079
those values separately

319
00:12:50,079 --> 00:12:52,399
this is a huge time cost improvement

320
00:12:52,399 --> 00:12:54,720
since exchanging time cost additive

321
00:12:54,720 --> 00:12:56,959
instead of multiplicative

322
00:12:56,959 --> 00:12:58,639
this improvement makes it possible to

323
00:12:58,639 --> 00:13:02,959
finish our attack within one minute

324
00:13:03,680 --> 00:13:05,839
well in our work we have some more

325
00:13:05,839 --> 00:13:07,519
optimizations

326
00:13:07,519 --> 00:13:10,160
including binary search to reduce the

327
00:13:10,160 --> 00:13:12,800
number of problem runs on multi-bing

328
00:13:12,800 --> 00:13:15,519
search to further reduce time cost in

329
00:13:15,519 --> 00:13:17,839
addition to handle packet loss problem

330
00:13:17,839 --> 00:13:20,320
we add a redundant redundancy encoded

331
00:13:20,320 --> 00:13:21,279
search

332
00:13:21,279 --> 00:13:23,519
in this presentation i will go over the

333
00:13:23,519 --> 00:13:25,920
binary search only if one time left i

334
00:13:25,920 --> 00:13:29,440
will further explain the other ones

335
00:13:29,440 --> 00:13:31,120
well let's look at binary search for

336
00:13:31,120 --> 00:13:32,240
algorithm

337
00:13:32,240 --> 00:13:34,320
the idea is to narrow down the search

338
00:13:34,320 --> 00:13:37,120
space by half at each round attacker can

339
00:13:37,120 --> 00:13:39,760
probe all packets in half range if

340
00:13:39,760 --> 00:13:42,000
attacker receive less than 100 challenge

341
00:13:42,000 --> 00:13:45,360
act then a cracked value is included

342
00:13:45,360 --> 00:13:48,320
if attacker can so attacker can use this

343
00:13:48,320 --> 00:13:50,800
half range as a new search space and so

344
00:13:50,800 --> 00:13:53,040
on

345
00:13:56,720 --> 00:13:58,639
okay now i'm going to show how to use

346
00:13:58,639 --> 00:14:00,399
the previous master to achieve our

347
00:14:00,399 --> 00:14:02,959
attack i will give an attack overview

348
00:14:02,959 --> 00:14:07,040
first then explain how each step works

349
00:14:07,040 --> 00:14:09,600
here is a tag overview given client and

350
00:14:09,600 --> 00:14:12,160
server we are we already know source ip

351
00:14:12,160 --> 00:14:14,160
destination ip and destination port

352
00:14:14,160 --> 00:14:16,720
number for example to attack connection

353
00:14:16,720 --> 00:14:19,440
between client and usa today website

354
00:14:19,440 --> 00:14:21,839
attacker already knows their source ip

355
00:14:21,839 --> 00:14:25,440
as clients iprs destination ips servers

356
00:14:25,440 --> 00:14:29,360
iph and then destination port is 80.

357
00:14:29,360 --> 00:14:31,519
therefore attacker just needed to guess

358
00:14:31,519 --> 00:14:33,760
source port number to infer the

359
00:14:33,760 --> 00:14:36,079
existence of tcp connection

360
00:14:36,079 --> 00:14:37,920
to further

361
00:14:37,920 --> 00:14:39,680
reflect this and to further get a

362
00:14:39,680 --> 00:14:41,760
sequence number to do connection

363
00:14:41,760 --> 00:14:43,760
connection termination attack in

364
00:14:43,760 --> 00:14:45,839
addition attacker can guess all those

365
00:14:45,839 --> 00:14:48,320
values and act number to do hijacking

366
00:14:48,320 --> 00:14:49,440
attack

367
00:14:49,440 --> 00:14:50,959
in the following slides i'm going to

368
00:14:50,959 --> 00:14:53,920
explain each step

369
00:14:53,920 --> 00:14:55,680
let me describe time synchronization

370
00:14:55,680 --> 00:14:56,560
first

371
00:14:56,560 --> 00:14:59,120
in general the more packets are sent in

372
00:14:59,120 --> 00:15:01,920
guest phase the faster one on our attack

373
00:15:01,920 --> 00:15:04,560
is as mentioned before the challenge

374
00:15:04,560 --> 00:15:07,040
accurate limit is on a per second per

375
00:15:07,040 --> 00:15:09,440
second basis guess phase and check phase

376
00:15:09,440 --> 00:15:11,680
should be excess in one second

377
00:15:11,680 --> 00:15:14,160
therefore synchro and synchronizing time

378
00:15:14,160 --> 00:15:16,160
between attacker and server is very

379
00:15:16,160 --> 00:15:17,360
important

380
00:15:17,360 --> 00:15:19,199
as small packets can be sent in the

381
00:15:19,199 --> 00:15:22,720
beginning of the one second interval

382
00:15:22,720 --> 00:15:24,639
in our work we propose a time

383
00:15:24,639 --> 00:15:26,880
synchronization strategy based on their

384
00:15:26,880 --> 00:15:28,000
side channel

385
00:15:28,000 --> 00:15:30,720
the idea is to send 200 in window

386
00:15:30,720 --> 00:15:33,519
restart packets spread out evenly

387
00:15:33,519 --> 00:15:35,759
in one second and check if we can see

388
00:15:35,759 --> 00:15:38,240
more than 100 transacts

389
00:15:38,240 --> 00:15:40,320
in our strategy we can finish some

390
00:15:40,320 --> 00:15:42,800
synchronization in six seconds you can

391
00:15:42,800 --> 00:15:44,800
find more information in our work

392
00:15:44,800 --> 00:15:46,959
in our paper sorry

393
00:15:46,959 --> 00:15:49,600
well let's look at infra

394
00:15:49,600 --> 00:15:51,120
influence of possibility speed

395
00:15:51,120 --> 00:15:52,160
connection

396
00:15:52,160 --> 00:15:54,560
given source ip destination ip and

397
00:15:54,560 --> 00:15:56,320
service at server

398
00:15:56,320 --> 00:15:58,800
the main idea of this attack is to test

399
00:15:58,800 --> 00:16:01,680
if clients open and store support

400
00:16:01,680 --> 00:16:03,360
therefore attacker can use guest and

401
00:16:03,360 --> 00:16:06,480
check method to infer this port number

402
00:16:06,480 --> 00:16:09,839
at first step attacker prop un imports

403
00:16:09,839 --> 00:16:12,880
at uh at each second to see if a client

404
00:16:12,880 --> 00:16:15,759
port is open throughout all post number

405
00:16:15,759 --> 00:16:17,279
space

406
00:16:17,279 --> 00:16:19,680
as soon as we find one range we are safe

407
00:16:19,680 --> 00:16:22,959
to say that this connection is active

408
00:16:22,959 --> 00:16:25,120
if attackers want to guess exact phone

409
00:16:25,120 --> 00:16:27,440
number in use attacker can

410
00:16:27,440 --> 00:16:29,920
select correct range and use binary

411
00:16:29,920 --> 00:16:32,160
search or multi-bing search to find the

412
00:16:32,160 --> 00:16:36,040
exact port number

413
00:16:36,399 --> 00:16:39,040
well tcp connection termination attack

414
00:16:39,040 --> 00:16:42,560
as mentioned before after rfc 5961 a

415
00:16:42,560 --> 00:16:45,120
reset packet works when it has correct

416
00:16:45,120 --> 00:16:47,759
four tuples and exactly match sequence

417
00:16:47,759 --> 00:16:48,800
number

418
00:16:48,800 --> 00:16:50,800
since we have inferred source ports from

419
00:16:50,800 --> 00:16:52,560
last step we just need to find the

420
00:16:52,560 --> 00:16:55,120
correct sequence number here

421
00:16:55,120 --> 00:16:57,440
well different from port number our side

422
00:16:57,440 --> 00:16:59,040
channel can only tell us whether

423
00:16:59,040 --> 00:17:01,360
sequence number is in window or not this

424
00:17:01,360 --> 00:17:04,160
can be utilized as one optimization

425
00:17:04,160 --> 00:17:06,160
instead of probing each sequence number

426
00:17:06,160 --> 00:17:08,880
we plot each sequence window by guessing

427
00:17:08,880 --> 00:17:10,640
only one sequence number in one window

428
00:17:10,640 --> 00:17:11,599
range

429
00:17:11,599 --> 00:17:14,720
here is a termination an attack process

430
00:17:14,720 --> 00:17:15,679
first

431
00:17:15,679 --> 00:17:17,359
attacker divides their whole sequence

432
00:17:17,359 --> 00:17:20,000
number space into smaller range and

433
00:17:20,000 --> 00:17:22,160
problem one range in one second

434
00:17:22,160 --> 00:17:24,480
different from point number search this

435
00:17:24,480 --> 00:17:26,160
range includes

436
00:17:26,160 --> 00:17:28,960
on windows instead of values

437
00:17:28,960 --> 00:17:31,200
second attackers select their phone

438
00:17:31,200 --> 00:17:33,120
range and use binary or multi-beam

439
00:17:33,120 --> 00:17:34,960
search to narrow down this range to a

440
00:17:34,960 --> 00:17:37,600
single window

441
00:17:37,600 --> 00:17:39,840
in third step attacker is finding the

442
00:17:39,840 --> 00:17:42,160
exact sequence number but locates the

443
00:17:42,160 --> 00:17:44,559
left bundling of the receive window

444
00:17:44,559 --> 00:17:46,160
attacker can use binary search or

445
00:17:46,160 --> 00:17:48,000
multibeam search to find their sequence

446
00:17:48,000 --> 00:17:49,440
number

447
00:17:49,440 --> 00:17:52,240
since attacker is using a spoofed resale

448
00:17:52,240 --> 00:17:54,799
packet to guess the sequence number

449
00:17:54,799 --> 00:17:56,320
connection will be terminated

450
00:17:56,320 --> 00:17:58,799
automatically when a correct sql number

451
00:17:58,799 --> 00:18:01,440
is guessed

452
00:18:01,440 --> 00:18:03,760
well in order to hijack the connection

453
00:18:03,760 --> 00:18:05,919
attacker has to know their correct fault

454
00:18:05,919 --> 00:18:08,960
tuples sequence number and act number

455
00:18:08,960 --> 00:18:11,360
besides the connection should be alive

456
00:18:11,360 --> 00:18:13,520
so attacker can further inject data in

457
00:18:13,520 --> 00:18:14,880
it

458
00:18:14,880 --> 00:18:17,120
unfortunately one cannot use

459
00:18:17,120 --> 00:18:19,200
encapsulated connection live if we use

460
00:18:19,200 --> 00:18:21,039
the result-based sequence number

461
00:18:21,039 --> 00:18:23,039
interfere inference

462
00:18:23,039 --> 00:18:26,160
if we repeatedly reset based on

463
00:18:26,160 --> 00:18:28,640
sequence number probing the result

464
00:18:28,640 --> 00:18:31,360
package will hit the clock 6 number to

465
00:18:31,360 --> 00:18:33,039
terminate and to terminate this

466
00:18:33,039 --> 00:18:34,480
connection

467
00:18:34,480 --> 00:18:37,120
therefore we'll break the two steps and

468
00:18:37,120 --> 00:18:40,160
reuse only the first step to uh to infer

469
00:18:40,160 --> 00:18:42,960
a rough sequence number then we take a

470
00:18:42,960 --> 00:18:45,360
detour to first locate the rough act

471
00:18:45,360 --> 00:18:47,919
number which will allow us to find the

472
00:18:47,919 --> 00:18:50,720
exact sequence number later

473
00:18:50,720 --> 00:18:52,720
different from termination attack

474
00:18:52,720 --> 00:18:55,120
hijacking attack use data packet based

475
00:18:55,120 --> 00:18:58,000
probing extended reset packet therefore

476
00:18:58,000 --> 00:19:00,080
next sequence number can be found

477
00:19:00,080 --> 00:19:03,840
without resetting this connection

478
00:19:04,880 --> 00:19:08,160
now let's look at our evaluation part

479
00:19:08,160 --> 00:19:09,760
i will first talk about time micro

480
00:19:09,760 --> 00:19:12,320
analysis then i will show you case study

481
00:19:12,320 --> 00:19:14,480
or termination attacks and hijacking

482
00:19:14,480 --> 00:19:16,320
attack

483
00:19:16,320 --> 00:19:18,720
here is the time cost in our work let's

484
00:19:18,720 --> 00:19:21,520
look at figure one first

485
00:19:21,520 --> 00:19:23,840
which shows their time cost by each step

486
00:19:23,840 --> 00:19:25,760
by using binary search on multi-bing

487
00:19:25,760 --> 00:19:28,880
search this axis x-axis identifies

488
00:19:28,880 --> 00:19:31,120
different steps while the y-axis

489
00:19:31,120 --> 00:19:33,440
indicates the time cost we can see that

490
00:19:33,440 --> 00:19:35,760
the the most time consuming consuming

491
00:19:35,760 --> 00:19:38,240
part is sequence inference which is

492
00:19:38,240 --> 00:19:40,320
caused by linear search to locate the

493
00:19:40,320 --> 00:19:42,320
received window

494
00:19:42,320 --> 00:19:44,799
besides it shows that multi-bing search

495
00:19:44,799 --> 00:19:47,360
sales about half time compared to binary

496
00:19:47,360 --> 00:19:48,880
search

497
00:19:48,880 --> 00:19:52,320
okay now let's look at figure two 2

498
00:19:52,320 --> 00:19:54,080
which indicates the chance of time

499
00:19:54,080 --> 00:19:56,400
causing total impacted by attack

500
00:19:56,400 --> 00:19:57,840
intensity

501
00:19:57,840 --> 00:20:00,480
obviously there are more packets we send

502
00:20:00,480 --> 00:20:02,000
per second

503
00:20:02,000 --> 00:20:04,720
the faster the attack can finish the red

504
00:20:04,720 --> 00:20:07,120
line shows their time cost variation

505
00:20:07,120 --> 00:20:08,960
the large variation is caused by

506
00:20:08,960 --> 00:20:10,880
randomness of pawn number sequence

507
00:20:10,880 --> 00:20:12,640
number and act number

508
00:20:12,640 --> 00:20:15,039
furthermore according to figure 2 the

509
00:20:15,039 --> 00:20:18,000
decrease rate tends to be smaller

510
00:20:18,000 --> 00:20:20,400
since attacking intensity is approach is

511
00:20:20,400 --> 00:20:23,440
approaching the bandwidth limit

512
00:20:23,440 --> 00:20:26,559
which leads to a higher pack loss rate

513
00:20:26,559 --> 00:20:29,200
therefore even higher bandwidth network

514
00:20:29,200 --> 00:20:31,520
is provided and our attack can be

515
00:20:31,520 --> 00:20:34,880
achieved in a shorter time

516
00:20:34,880 --> 00:20:37,120
for termination attack we have two case

517
00:20:37,120 --> 00:20:40,720
studies ec2 and tor network in our

518
00:20:40,720 --> 00:20:43,520
amazon ec2 experiments attacker is

519
00:20:43,520 --> 00:20:46,640
located at uc campus ucr campus while

520
00:20:46,640 --> 00:20:48,559
the victim server a different ec2

521
00:20:48,559 --> 00:20:50,000
service

522
00:20:50,000 --> 00:20:51,679
from different countries

523
00:20:51,679 --> 00:20:54,480
for legitimate purpose we attack our own

524
00:20:54,480 --> 00:20:57,760
connection for obvious obvious reasons

525
00:20:57,760 --> 00:20:59,919
in our experiments we have tested eight

526
00:20:59,919 --> 00:21:02,000
different regions around the world with

527
00:21:02,000 --> 00:21:05,280
a 96 percent average success rate and

528
00:21:05,280 --> 00:21:07,039
average 80 to

529
00:21:07,039 --> 00:21:10,879
sorry 42 second time cost

530
00:21:11,039 --> 00:21:13,840
similarly our second case study is torn

531
00:21:13,840 --> 00:21:16,640
network 12 network choose random relays

532
00:21:16,640 --> 00:21:20,559
to provide an anonymity in our work we

533
00:21:20,559 --> 00:21:23,360
said we set our own client nodes as

534
00:21:23,360 --> 00:21:25,440
entrance relay and it's connected to

535
00:21:25,440 --> 00:21:27,280
some random middle relay nodes all

536
00:21:27,280 --> 00:21:28,559
around the world

537
00:21:28,559 --> 00:21:30,640
in our experiments we terminate these

538
00:21:30,640 --> 00:21:34,000
connections with 89 percent success rate

539
00:21:34,000 --> 00:21:36,720
and average 61 seconds

540
00:21:36,720 --> 00:21:39,039
with this attack we believe that user

541
00:21:39,039 --> 00:21:41,600
privacy may be bridged since their

542
00:21:41,600 --> 00:21:43,840
torque connection may be forced to route

543
00:21:43,840 --> 00:21:47,678
to some such features nodes or paths

544
00:21:48,640 --> 00:21:51,360
now let's look at and look at hijacking

545
00:21:51,360 --> 00:21:53,440
attack case study

546
00:21:53,440 --> 00:21:55,360
our target is any long-lived tcp

547
00:21:55,360 --> 00:21:59,120
connection that does not use ssl or tls

548
00:21:59,120 --> 00:22:01,840
including news website and advertisement

549
00:22:01,840 --> 00:22:03,440
connection

550
00:22:03,440 --> 00:22:05,679
in this case study we picked a news

551
00:22:05,679 --> 00:22:08,080
website usa today website which has a

552
00:22:08,080 --> 00:22:10,880
long long-lived tcp connection that

553
00:22:10,880 --> 00:22:13,280
periodically refresh data every 30

554
00:22:13,280 --> 00:22:15,678
seconds

555
00:22:18,559 --> 00:22:20,640
this gives ample idle time for our

556
00:22:20,640 --> 00:22:24,559
sequence number and act number inference

557
00:22:24,559 --> 00:22:26,720
once the number are inferred we perform

558
00:22:26,720 --> 00:22:28,559
a desynchronization attack so the

559
00:22:28,559 --> 00:22:30,480
attacker no longer needs to worry about

560
00:22:30,480 --> 00:22:32,240
the risk condition

561
00:22:32,240 --> 00:22:33,440
with server

562
00:22:33,440 --> 00:22:35,200
this synchronization attack is done

563
00:22:35,200 --> 00:22:38,640
sending us both the request to server to

564
00:22:38,640 --> 00:22:41,280
increase the expected act number at the

565
00:22:41,280 --> 00:22:42,720
server side

566
00:22:42,720 --> 00:22:45,120
also server will send a response to

567
00:22:45,120 --> 00:22:48,000
client automatically this response won't

568
00:22:48,000 --> 00:22:50,559
be accepted since it contains invalid

569
00:22:50,559 --> 00:22:52,159
act number

570
00:22:52,159 --> 00:22:55,039
later when the client initiates a real

571
00:22:55,039 --> 00:22:56,960
request the server would no longer

572
00:22:56,960 --> 00:22:59,200
accept it since the request sequence

573
00:22:59,200 --> 00:23:01,679
number is too old

574
00:23:01,679 --> 00:23:03,039
in our work

575
00:23:03,039 --> 00:23:04,880
after synchronization attack the

576
00:23:04,880 --> 00:23:07,600
attacker simply sends both the response

577
00:23:07,600 --> 00:23:10,480
periodically every few seconds

578
00:23:10,480 --> 00:23:14,000
the response are crafted such that they

579
00:23:14,000 --> 00:23:16,159
are acknowledging requests that haven't

580
00:23:16,159 --> 00:23:17,919
been sent by clients yet

581
00:23:17,919 --> 00:23:20,159
if if such both the response arrived

582
00:23:20,159 --> 00:23:22,960
before the client sends a request they

583
00:23:22,960 --> 00:23:26,159
will simply be acknowledged

584
00:23:27,840 --> 00:23:30,240
as soon as a client does send out the

585
00:23:30,240 --> 00:23:32,720
next request the spoofed response will

586
00:23:32,720 --> 00:23:34,880
become valid and accepted

587
00:23:34,880 --> 00:23:37,280
the response can can contain malicious

588
00:23:37,280 --> 00:23:40,400
javascript and that allows phishing or

589
00:23:40,400 --> 00:23:42,320
even opportunities to exploit

590
00:23:42,320 --> 00:23:44,640
vulnerability in the browser and

591
00:23:44,640 --> 00:23:46,880
underlying an online

592
00:23:46,880 --> 00:23:50,400
operating system

593
00:23:50,400 --> 00:23:52,640
in our experiment we successfully

594
00:23:52,640 --> 00:23:54,240
hijacked their connection with the

595
00:23:54,240 --> 00:23:56,720
average ninety percent success rate

596
00:23:56,720 --> 00:23:59,279
besides we injected the fishing window

597
00:23:59,279 --> 00:24:02,240
and client sites with eighties and an

598
00:24:02,240 --> 00:24:04,799
eighty percent success rate this rate is

599
00:24:04,799 --> 00:24:07,760
lower than usa today occasionally since

600
00:24:07,760 --> 00:24:09,360
the usa today

601
00:24:09,360 --> 00:24:11,360
sorry this rate is lower since the usa

602
00:24:11,360 --> 00:24:13,840
today occasionally switch the http

603
00:24:13,840 --> 00:24:16,559
request from one type to another

604
00:24:16,559 --> 00:24:18,880
therefore the injected payloads will not

605
00:24:18,880 --> 00:24:21,840
match their requests all the time

606
00:24:21,840 --> 00:24:24,240
in addition the time of injecting a

607
00:24:24,240 --> 00:24:28,000
phasing window is 81 seconds

608
00:24:29,279 --> 00:24:31,520
regarding this serious vulnerability we

609
00:24:31,520 --> 00:24:33,360
propose two possible defenses in our

610
00:24:33,360 --> 00:24:34,320
work

611
00:24:34,320 --> 00:24:36,159
the first one is to add more random

612
00:24:36,159 --> 00:24:38,320
noise to this side channel to confuse

613
00:24:38,320 --> 00:24:39,760
attacker

614
00:24:39,760 --> 00:24:42,000
the second patch is to disable this

615
00:24:42,000 --> 00:24:44,559
global rate limit this can be done by

616
00:24:44,559 --> 00:24:47,200
eliminating the global the global count

617
00:24:47,200 --> 00:24:49,360
in linux kernel

618
00:24:49,360 --> 00:24:52,240
in july 2016 linux kernel patched this

619
00:24:52,240 --> 00:24:54,880
vulnerability by use first method

620
00:24:54,880 --> 00:24:56,720
they also plan to use second method in

621
00:24:56,720 --> 00:24:58,400
the future

622
00:24:58,400 --> 00:24:59,360
however

623
00:24:59,360 --> 00:25:02,080
their newest linux kernel haven't been

624
00:25:02,080 --> 00:25:04,640
applied to the most linux in most linux

625
00:25:04,640 --> 00:25:06,000
distributions

626
00:25:06,000 --> 00:25:08,080
in order to patch their vulnerability

627
00:25:08,080 --> 00:25:11,279
temporary any administrator can disable

628
00:25:11,279 --> 00:25:14,240
red limit in their own server

629
00:25:14,240 --> 00:25:17,440
in conclusion we discover a subtle yet

630
00:25:17,440 --> 00:25:20,559
critical floor and implement

631
00:25:20,559 --> 00:25:23,200
in the design and implementations of tcp

632
00:25:23,200 --> 00:25:26,720
in linux kernel 3.6 and beyond

633
00:25:26,720 --> 00:25:28,720
we also demonstrate possible blend of

634
00:25:28,720 --> 00:25:31,840
past attacker with about one second one

635
00:25:31,840 --> 00:25:33,520
minute

636
00:25:33,520 --> 00:25:36,240
sorry at last we propose the defense

637
00:25:36,240 --> 00:25:38,400
games

638
00:25:38,400 --> 00:25:39,840
that's us thank you

639
00:25:39,840 --> 00:25:43,080
any questions

640
00:25:48,320 --> 00:25:51,960
time for some questions

641
00:25:56,960 --> 00:26:00,240
your talk is about the linux kernel yeah

642
00:26:00,240 --> 00:26:02,640
um have you found this anywhere else

643
00:26:02,640 --> 00:26:05,279
such as perhaps in bsd kernels

644
00:26:05,279 --> 00:26:07,120
implemented similarly

645
00:26:07,120 --> 00:26:08,840
such as in june

646
00:26:08,840 --> 00:26:12,799
os you could attack bgp sessions

647
00:26:12,799 --> 00:26:15,919
uh yeah i yeah in our experiments we

648
00:26:15,919 --> 00:26:19,840
also we also tested windows mac os and

649
00:26:19,840 --> 00:26:21,600
after the

650
00:26:21,600 --> 00:26:24,480
um the fedora i think yeah

651
00:26:24,480 --> 00:26:27,279
for those lena and for for the other or

652
00:26:27,279 --> 00:26:29,520
operation systems um

653
00:26:29,520 --> 00:26:31,760
we haven't found these vulnerabilities

654
00:26:31,760 --> 00:26:35,279
because they didn't implement rfc 5961

655
00:26:35,279 --> 00:26:38,279
completely

656
00:26:38,320 --> 00:26:40,159
hi roger dingledine from the tour

657
00:26:40,159 --> 00:26:42,400
project great stuff i wanted to follow

658
00:26:42,400 --> 00:26:44,720
up a little bit about the uh

659
00:26:44,720 --> 00:26:46,320
torah attack you were describing you

660
00:26:46,320 --> 00:26:48,080
were speculating that if you can break

661
00:26:48,080 --> 00:26:49,760
connections inside the tor network

662
00:26:49,760 --> 00:26:52,480
between relays then you can drive

663
00:26:52,480 --> 00:26:54,320
circuits you can drive clients to build

664
00:26:54,320 --> 00:26:56,640
circuits the way you want yeah uh when a

665
00:26:56,640 --> 00:26:58,799
connection inside the tor network fails

666
00:26:58,799 --> 00:27:01,039
the client chooses an entire new path

667
00:27:01,039 --> 00:27:03,039
without any memory of what failed or

668
00:27:03,039 --> 00:27:05,360
succeeded in the past so you basically

669
00:27:05,360 --> 00:27:06,480
have to break

670
00:27:06,480 --> 00:27:08,320
all of the connections and keep them

671
00:27:08,320 --> 00:27:11,360
broken until the client chooses exactly

672
00:27:11,360 --> 00:27:13,679
the very low probability path that you

673
00:27:13,679 --> 00:27:15,600
want so i don't think that attack would

674
00:27:15,600 --> 00:27:17,279
work but i think we should really keep

675
00:27:17,279 --> 00:27:19,360
thinking about how to use this sort of

676
00:27:19,360 --> 00:27:22,559
attack to to undermine anonymity or uh

677
00:27:22,559 --> 00:27:24,480
or attack overlay networks like that

678
00:27:24,480 --> 00:27:27,200
yeah good question i totally agree well

679
00:27:27,200 --> 00:27:28,640
but um

680
00:27:28,640 --> 00:27:31,679
this uh this uh that dos attack will be

681
00:27:31,679 --> 00:27:35,120
extremely hard for to a network to

682
00:27:35,120 --> 00:27:36,320
like

683
00:27:36,320 --> 00:27:38,720
bridge its privacy but

684
00:27:38,720 --> 00:27:41,360
um in our experiments we also found like

685
00:27:41,360 --> 00:27:43,760
a four-to-one network they have a they

686
00:27:43,760 --> 00:27:46,240
have a server and they have a

687
00:27:46,240 --> 00:27:48,640
website listing all possible

688
00:27:48,640 --> 00:27:49,440
uh

689
00:27:49,440 --> 00:27:52,720
uh relay nodes so we can brute force all

690
00:27:52,720 --> 00:27:55,600
those relay nodes and they're trying to

691
00:27:55,600 --> 00:27:58,960
likely reset all connections starting or

692
00:27:58,960 --> 00:28:00,960
ending to these running nodes

693
00:28:00,960 --> 00:28:03,120
this is one possible solution but it's

694
00:28:03,120 --> 00:28:06,879
still very hard and takes a lot of time

695
00:28:10,320 --> 00:28:13,320
okay

696
00:28:16,399 --> 00:28:18,880
okay so i have one so okay i know you

697
00:28:18,880 --> 00:28:21,200
guys have done uh quite a few

698
00:28:21,200 --> 00:28:23,120
uh work in this space right what's your

699
00:28:23,120 --> 00:28:25,600
next one

700
00:28:25,760 --> 00:28:26,799
well

701
00:28:26,799 --> 00:28:29,039
uh it's very exciting to find these

702
00:28:29,039 --> 00:28:32,320
vulnerabilities in linux kernel and

703
00:28:32,320 --> 00:28:35,679
one possible way we are thinking is that

704
00:28:35,679 --> 00:28:37,120
we can

705
00:28:37,120 --> 00:28:38,080
well

706
00:28:38,080 --> 00:28:40,159
a simple way to measurements like and

707
00:28:40,159 --> 00:28:42,399
how widely this vulnerability

708
00:28:42,399 --> 00:28:45,279
is existed in their linux current in

709
00:28:45,279 --> 00:28:47,360
linux systems for example you know like

710
00:28:47,360 --> 00:28:49,520
an even thousand vulnerability is

711
00:28:49,520 --> 00:28:52,399
patched um some servers are still using

712
00:28:52,399 --> 00:28:55,200
an old version of linux kernel so it's

713
00:28:55,200 --> 00:28:57,679
still very serious problems around the

714
00:28:57,679 --> 00:28:59,760
world

715
00:28:59,760 --> 00:29:01,840
and besides that we may

716
00:29:01,840 --> 00:29:03,679
it's it's also very interesting

717
00:29:03,679 --> 00:29:06,640
interesting to for us to think

718
00:29:06,640 --> 00:29:08,399
whether or not we can find like a

719
00:29:08,399 --> 00:29:10,720
similar browser like a similar side

720
00:29:10,720 --> 00:29:12,799
channel

721
00:29:12,799 --> 00:29:15,440
in linux kernel about like some by

722
00:29:15,440 --> 00:29:18,080
utilizing some other mechanisms

723
00:29:18,080 --> 00:29:19,760
looking forward to that any other

724
00:29:19,760 --> 00:29:20,640
question

725
00:29:20,640 --> 00:29:24,399
okay thanks thanks big one more time

726
00:29:24,720 --> 00:29:27,840
thank you

