1
00:00:10,840 --> 00:00:13,490
good morning everyone I understand there

2
00:00:13,490 --> 00:00:16,329
are some issues with the AV I did not

3
00:00:16,329 --> 00:00:19,040
animate my name or anything like that is

4
00:00:19,040 --> 00:00:20,900
that how the projector appears to be

5
00:00:20,900 --> 00:00:23,750
working I'm not making a lot of use of

6
00:00:23,750 --> 00:00:25,580
colors so maybe this is okay is this

7
00:00:25,580 --> 00:00:29,779
good or am I too loud okay okay good

8
00:00:29,779 --> 00:00:31,310
morning so I'll be presenting our work

9
00:00:31,310 --> 00:00:33,830
on the FTP M which is a software only

10
00:00:33,830 --> 00:00:37,070
implementation of a TPM chip the acronym

11
00:00:37,070 --> 00:00:40,030
TP M stands for trusted platform module

12
00:00:40,030 --> 00:00:42,799
the F in FTP M stands for firmware

13
00:00:42,799 --> 00:00:45,019
because this TPM implementation is

14
00:00:45,019 --> 00:00:46,549
running at the firmware layer of a

15
00:00:46,549 --> 00:00:49,640
mobile device the FTP M has been shipped

16
00:00:49,640 --> 00:00:51,049
on millions of mobile devices running

17
00:00:51,049 --> 00:00:54,710
Windows the FTP M as Cynthia said it was

18
00:00:54,710 --> 00:00:57,049
a large project and many researchers

19
00:00:57,049 --> 00:00:59,119
from Microsoft Research in Redmond and

20
00:00:59,119 --> 00:01:00,949
many engineers from the windows group at

21
00:01:00,949 --> 00:01:03,470
Microsoft participated I should also

22
00:01:03,470 --> 00:01:05,000
mention I can acknowledge that this

23
00:01:05,000 --> 00:01:06,409
project was done in cooperation with

24
00:01:06,409 --> 00:01:09,950
three Sauk SOC system-on-chip vendors

25
00:01:09,950 --> 00:01:14,330
Nvidia Qualcomm and Intel the use of TPM

26
00:01:14,330 --> 00:01:15,620
seen industry and research community is

27
00:01:15,620 --> 00:01:16,190
growing

28
00:01:16,190 --> 00:01:17,810
for example operating systems built by

29
00:01:17,810 --> 00:01:19,340
Google and Microsoft offer security

30
00:01:19,340 --> 00:01:22,100
features that rely on TPMS also the

31
00:01:22,100 --> 00:01:23,600
research community has put forward the

32
00:01:23,600 --> 00:01:25,730
multitude of systems using TPMS from

33
00:01:25,730 --> 00:01:27,860
cloud systems to new security primitives

34
00:01:27,860 --> 00:01:30,680
like trusted sensors however most

35
00:01:30,680 --> 00:01:32,930
smartphones and tablets lack TPM chips

36
00:01:32,930 --> 00:01:34,730
today there is nothing incompatible

37
00:01:34,730 --> 00:01:36,530
between TPM chips and smart phones and

38
00:01:36,530 --> 00:01:39,710
tablets it can definitely put equip a

39
00:01:39,710 --> 00:01:42,020
smartphone or a tablet with a GPS chip

40
00:01:42,020 --> 00:01:44,600
however TPM chips were never designed to

41
00:01:44,600 --> 00:01:46,580
me the power constraints the space

42
00:01:46,580 --> 00:01:48,110
constraints and the cost constraints of

43
00:01:48,110 --> 00:01:51,220
mobile devices although proposals for

44
00:01:51,220 --> 00:01:53,930
changing the TPM specification to meet

45
00:01:53,930 --> 00:01:55,760
this new requirement in the mobile space

46
00:01:55,760 --> 00:01:58,010
do exist they never really took off in

47
00:01:58,010 --> 00:02:00,920
practice however in recent years

48
00:02:00,920 --> 00:02:02,780
community CP architectures have started

49
00:02:02,780 --> 00:02:04,760
to offer built-in features for trusted

50
00:02:04,760 --> 00:02:07,250
computing such as razón alarm or

51
00:02:07,250 --> 00:02:10,180
software grant extension on HDX

52
00:02:10,180 --> 00:02:12,170
this extension of the runtime

53
00:02:12,170 --> 00:02:13,730
environments that are isolated from the

54
00:02:13,730 --> 00:02:16,310
rest of the system running such as

55
00:02:16,310 --> 00:02:17,870
operating system applications of

56
00:02:17,870 --> 00:02:19,459
firmware with these features CPU

57
00:02:19,459 --> 00:02:21,260
manufacturers are aiming and making it

58
00:02:21,260 --> 00:02:22,860
possible to build trusted hard

59
00:02:22,860 --> 00:02:24,930
that offer security equivalent to that

60
00:02:24,930 --> 00:02:32,930
lock secure systems this good yeah

61
00:02:32,930 --> 00:02:35,370
unfortunately there is a big problem

62
00:02:35,370 --> 00:02:37,560
while runtime isolation is important the

63
00:02:37,560 --> 00:02:39,180
cpu features to meet many of the

64
00:02:39,180 --> 00:02:40,350
resources present on this dedicated

65
00:02:40,350 --> 00:02:43,650
trusted hardware such as storage clock

66
00:02:43,650 --> 00:02:46,350
counter or entropy so the question now

67
00:02:46,350 --> 00:02:50,220
becomes whether so these omissions raise

68
00:02:50,220 --> 00:02:52,050
an important question can we overcome

69
00:02:52,050 --> 00:02:54,540
the limitations of commodity CPUs to

70
00:02:54,540 --> 00:02:56,400
build software systems security

71
00:02:56,400 --> 00:02:58,050
guarantees similar to that of trusted

72
00:02:58,050 --> 00:02:59,880
Hardware in the remainder of this talk

73
00:02:59,880 --> 00:03:01,980
we will answer this question positively

74
00:03:01,980 --> 00:03:03,870
by describing how I built a software own

75
00:03:03,870 --> 00:03:06,000
implementation of a TPM chip on arm

76
00:03:06,000 --> 00:03:08,940
trust own before I continue I also like

77
00:03:08,940 --> 00:03:10,170
to present what we think are the three

78
00:03:10,170 --> 00:03:13,110
main contributions of this work first we

79
00:03:13,110 --> 00:03:14,550
described three approaches that we use

80
00:03:14,550 --> 00:03:18,270
to build ship software that is able to

81
00:03:18,270 --> 00:03:20,130
bypass the limitations of arm trust zone

82
00:03:20,130 --> 00:03:22,650
we think these approaches we're not

83
00:03:22,650 --> 00:03:24,239
useful just for the FTP M but they're

84
00:03:24,239 --> 00:03:25,920
useful for anyone building production

85
00:03:25,920 --> 00:03:28,410
level quality on on commodity CPU

86
00:03:28,410 --> 00:03:31,140
features today such as Amazon or

87
00:03:31,140 --> 00:03:34,140
IntelliJ X second we contrast the

88
00:03:34,140 --> 00:03:36,630
security of the FTP M to that of a TPM

89
00:03:36,630 --> 00:03:40,500
chip and third the FTP M is a successful

90
00:03:40,500 --> 00:03:42,840
trusted system deployed and running in

91
00:03:42,840 --> 00:03:45,510
practice on in many microsoft surfaces

92
00:03:45,510 --> 00:03:47,519
and Windows Phones in fact if you buy to

93
00:03:47,519 --> 00:03:49,709
their Microsoft Surface that runs on arm

94
00:03:49,709 --> 00:03:52,230
it contains the FTP M inside and many of

95
00:03:52,230 --> 00:03:54,810
the Intel chip Microsoft Surface is

96
00:03:54,810 --> 00:03:56,580
running inside container FTP M but not

97
00:03:56,580 --> 00:03:59,880
all of them okay this is the online of

98
00:03:59,880 --> 00:04:01,500
my talk it's a fairly long outline I

99
00:04:01,500 --> 00:04:03,480
just give you I was bumbling through

100
00:04:03,480 --> 00:04:07,200
some motivation next I'm gonna I'm gonna

101
00:04:07,200 --> 00:04:09,000
unfortunately this talk I have to spend

102
00:04:09,000 --> 00:04:10,290
a little bit of time presenting the

103
00:04:10,290 --> 00:04:11,880
background work in order to sort of take

104
00:04:11,880 --> 00:04:14,100
away the the contribution so the batter

105
00:04:14,100 --> 00:04:16,410
shoe and there are two sort of areas of

106
00:04:16,410 --> 00:04:17,728
background work there is the background

107
00:04:17,728 --> 00:04:19,440
on the TPM and there is background on

108
00:04:19,440 --> 00:04:20,880
arm trust zone and I'm gonna spend a

109
00:04:20,880 --> 00:04:22,919
little bit of time covering those then

110
00:04:22,919 --> 00:04:24,240
I'm gonna go and present you the

111
00:04:24,240 --> 00:04:26,400
high-level architecture of our of the

112
00:04:26,400 --> 00:04:29,729
FTP M and tell you some examples of how

113
00:04:29,729 --> 00:04:31,110
we are able to overcome that the

114
00:04:31,110 --> 00:04:33,539
limitations of trans ohms finally I'm

115
00:04:33,539 --> 00:04:34,680
gonna wrap up with performance and

116
00:04:34,680 --> 00:04:35,610
conclusions

117
00:04:35,610 --> 00:04:39,180
so background on TPMS trusted platform

118
00:04:39,180 --> 00:04:41,340
module is a secure coprocessor meant to

119
00:04:41,340 --> 00:04:43,889
act as a harder route of Trust TPMS

120
00:04:43,889 --> 00:04:45,990
offer a small set of primitives that

121
00:04:45,990 --> 00:04:47,909
provide a high degree of security

122
00:04:47,909 --> 00:04:50,069
assurance first they offer strong

123
00:04:50,069 --> 00:04:52,319
machine identities a TPM is provisioned

124
00:04:52,319 --> 00:04:54,090
with a public/private key pair in such a

125
00:04:54,090 --> 00:04:55,889
way that the private portion of the key

126
00:04:55,889 --> 00:04:59,580
pair never leaves the TPM chip such a

127
00:04:59,580 --> 00:05:01,379
key can effectively act as a globally

128
00:05:01,379 --> 00:05:04,080
unique unfortunate entity and that's

129
00:05:04,080 --> 00:05:05,750
useful in a number of scenarios

130
00:05:05,750 --> 00:05:08,189
additionally TPM can prevent on desires

131
00:05:08,189 --> 00:05:10,199
after roll backs they can offer isolated

132
00:05:10,199 --> 00:05:12,629
and secure storage of credentials on

133
00:05:12,629 --> 00:05:14,729
behalf of users and applications and

134
00:05:14,729 --> 00:05:16,590
they can attest the identity of the

135
00:05:16,590 --> 00:05:19,340
software running on the machine

136
00:05:21,259 --> 00:05:23,669
although TPMS are more than a decade old

137
00:05:23,669 --> 00:05:25,710
were seeing a resurgence of TPM that I

138
00:05:25,710 --> 00:05:26,729
bought in industry in the research

139
00:05:26,729 --> 00:05:27,740
community

140
00:05:27,740 --> 00:05:30,599
VPNs have had a mixed history in part of

141
00:05:30,599 --> 00:05:31,949
the initial perception that the primary

142
00:05:31,949 --> 00:05:33,930
use of TPM should be to enable DRM

143
00:05:33,930 --> 00:05:36,000
digital rights management and TPMS were

144
00:05:36,000 --> 00:05:37,229
really seen as a mechanism for

145
00:05:37,229 --> 00:05:39,509
corporations to force users to give up

146
00:05:39,509 --> 00:05:42,270
control of their machines over time

147
00:05:42,270 --> 00:05:44,039
however the PM's have been able to

148
00:05:44,039 --> 00:05:45,539
overcome their mixed reputation of

149
00:05:45,539 --> 00:05:47,430
reputations and both industry and the

150
00:05:47,430 --> 00:05:48,719
research community have put forward

151
00:05:48,719 --> 00:05:51,319
useful systems that make use of the TPM

152
00:05:51,319 --> 00:05:53,729
this has made the PM chips very common

153
00:05:53,729 --> 00:05:55,319
in practice especially on enterprise

154
00:05:55,319 --> 00:05:58,080
hardware but not only now I don't have

155
00:05:58,080 --> 00:06:00,029
time to cover all the cool systems that

156
00:06:00,029 --> 00:06:01,650
use TPM that have been shipped out there

157
00:06:01,650 --> 00:06:03,539
both in industry and proposed by the

158
00:06:03,539 --> 00:06:05,879
research community if you're interested

159
00:06:05,879 --> 00:06:09,330
please read our paper this slide is a

160
00:06:09,330 --> 00:06:11,339
brief history of TPM again I won't cover

161
00:06:11,339 --> 00:06:14,550
this the two points I want to make is

162
00:06:14,550 --> 00:06:16,259
that the current specification of TPM

163
00:06:16,259 --> 00:06:19,439
C's 2.0 although mostly pm's deployed in

164
00:06:19,439 --> 00:06:21,180
practice and there are you know hundreds

165
00:06:21,180 --> 00:06:23,550
of millions of them are 1.2 although

166
00:06:23,550 --> 00:06:25,620
right now we're at the cusp where there

167
00:06:25,620 --> 00:06:28,560
are more TPM 2.0 platforms being shipped

168
00:06:28,560 --> 00:06:31,169
than one put into ok so what's new in

169
00:06:31,169 --> 00:06:33,629
2.0 the FT PM by the way uses the 2.0

170
00:06:33,629 --> 00:06:35,550
specifications there are three new

171
00:06:35,550 --> 00:06:37,620
things that a high level one is 2.0

172
00:06:37,620 --> 00:06:39,629
offers newer cryptography including ECC

173
00:06:39,629 --> 00:06:42,419
elliptic curve second and perhaps most

174
00:06:42,419 --> 00:06:44,459
importantly is that we now have a

175
00:06:44,459 --> 00:06:46,850
reference implementations in the

176
00:06:46,850 --> 00:06:49,190
every TPM especially with 1.2 was

177
00:06:49,190 --> 00:06:50,390
slightly different than another one

178
00:06:50,390 --> 00:06:52,580
because the specification was in English

179
00:06:52,580 --> 00:06:55,370
and English ambiguous now a hardware

180
00:06:55,370 --> 00:06:58,070
vendor can run that left grip can run

181
00:06:58,070 --> 00:06:59,330
the reference implementation and

182
00:06:59,330 --> 00:07:02,240
disambiguate and finally TPMS accept

183
00:07:02,240 --> 00:07:03,470
policies that dictate under what

184
00:07:03,470 --> 00:07:06,410
conditions they should the crib data or

185
00:07:06,410 --> 00:07:08,330
verified data signatures and these

186
00:07:08,330 --> 00:07:10,130
policies are much more flexible in 2.0

187
00:07:10,130 --> 00:07:13,490
then in 1.2 okay now so that was TPMS

188
00:07:13,490 --> 00:07:17,660
now trusts on unarmed I'm Trustin is

189
00:07:17,660 --> 00:07:19,100
amps hardware support for trusted

190
00:07:19,100 --> 00:07:20,900
computing with entres on the software

191
00:07:20,900 --> 00:07:22,280
stack and switch between two states

192
00:07:22,280 --> 00:07:25,250
refer to as the world's one world on the

193
00:07:25,250 --> 00:07:26,630
left is called the normal world and the

194
00:07:26,630 --> 00:07:27,950
other one is called the secure world

195
00:07:27,950 --> 00:07:30,110
this was that these worlds are strongly

196
00:07:30,110 --> 00:07:31,730
partitioned and you can think of them as

197
00:07:31,730 --> 00:07:33,440
virtual processor backed by Hardware

198
00:07:33,440 --> 00:07:35,480
access control and I'm gonna describe

199
00:07:35,480 --> 00:07:37,790
this figure sorry for the colors again

200
00:07:37,790 --> 00:07:39,440
it's not my fault I'm actually nervous

201
00:07:39,440 --> 00:07:41,720
about these things blinking in my back

202
00:07:41,720 --> 00:07:44,630
here I'm gonna try to explain it by

203
00:07:44,630 --> 00:07:47,300
animating a little bit so when you boot

204
00:07:47,300 --> 00:07:50,540
the arm platform the SOC the hardware

205
00:07:50,540 --> 00:07:52,610
first powers up and the processor enters

206
00:07:52,610 --> 00:07:55,160
a mode called secure code secure monitor

207
00:07:55,160 --> 00:07:57,770
layer in this mode the software can

208
00:07:57,770 --> 00:07:59,930
provide pin provision the two worlds for

209
00:07:59,930 --> 00:08:01,700
example it can allocate memory to the

210
00:08:01,700 --> 00:08:04,640
secure world and strongly isolated from

211
00:08:04,640 --> 00:08:06,290
the normal world so the normal world so

212
00:08:06,290 --> 00:08:07,820
you take your RAM and you sort of

213
00:08:07,820 --> 00:08:10,310
partition it and the normal world the

214
00:08:10,310 --> 00:08:11,600
operating system doesn't even know that

215
00:08:11,600 --> 00:08:13,010
there is this extra Ram and there is

216
00:08:13,010 --> 00:08:15,670
this other system running side by side

217
00:08:15,670 --> 00:08:18,050
this memory isolation is memory

218
00:08:18,050 --> 00:08:20,390
partitioning is referred to as curtain

219
00:08:20,390 --> 00:08:23,570
memory the CPUs now have two separate

220
00:08:23,570 --> 00:08:25,010
banks of registers for the two worlds

221
00:08:25,010 --> 00:08:26,840
and a special register determines what

222
00:08:26,840 --> 00:08:29,570
world the processor is in each world has

223
00:08:29,570 --> 00:08:31,490
access to only its register sets and

224
00:08:31,490 --> 00:08:33,470
only the secure code monitor layer has

225
00:08:33,470 --> 00:08:36,880
had access to the both register files

226
00:08:36,880 --> 00:08:40,220
the secure vault is then booted now the

227
00:08:40,220 --> 00:08:42,350
code running the secure world runs

228
00:08:42,350 --> 00:08:44,450
before any code in the normal one has

229
00:08:44,450 --> 00:08:45,830
got the chance to run and that's very

230
00:08:45,830 --> 00:08:48,080
important that's sort of again key to

231
00:08:48,080 --> 00:08:51,050
the security guarantees at some point

232
00:08:51,050 --> 00:08:52,490
the normal the secure world yields and

233
00:08:52,490 --> 00:08:55,130
the normal wall runs and the code gets

234
00:08:55,130 --> 00:08:57,140
now so now here is the operating systems

235
00:08:57,140 --> 00:08:59,360
things like Windows for example and then

236
00:08:59,360 --> 00:09:00,770
we can switch back and forth between the

237
00:09:00,770 --> 00:09:02,930
two worlds note that no two words run at

238
00:09:02,930 --> 00:09:05,000
the same time they Iran want they take

239
00:09:05,000 --> 00:09:06,370
turns

240
00:09:06,370 --> 00:09:08,930
so to summarize the Amazon properties

241
00:09:08,930 --> 00:09:11,090
the isolated runtime boots first and

242
00:09:11,090 --> 00:09:13,490
provides curtain memory all interrupts

243
00:09:13,490 --> 00:09:14,810
are delivered to the secure monitor

244
00:09:14,810 --> 00:09:16,580
layer which can then dispatch them to

245
00:09:16,580 --> 00:09:18,380
the appropriate world so with this

246
00:09:18,380 --> 00:09:20,900
feature you can build secure i/o or

247
00:09:20,900 --> 00:09:23,330
secure peripherals and this ability to

248
00:09:23,330 --> 00:09:25,430
map interrupts to the secure world it's

249
00:09:25,430 --> 00:09:27,500
specific to arm trazodone edge jigs does

250
00:09:27,500 --> 00:09:29,090
not have this ability and that's

251
00:09:29,090 --> 00:09:31,010
actually my in our opinion limitation of

252
00:09:31,010 --> 00:09:34,970
HX okay i'm trans on suffers from

253
00:09:34,970 --> 00:09:36,740
several limitations the truss on

254
00:09:36,740 --> 00:09:38,510
specification is silent untrusted

255
00:09:38,510 --> 00:09:40,340
storage one could naively imagine you

256
00:09:40,340 --> 00:09:42,380
can encrypt all your data and store it

257
00:09:42,380 --> 00:09:44,000
on a rainy regular form of untrusted

258
00:09:44,000 --> 00:09:45,980
storage you can do that but were these

259
00:09:45,980 --> 00:09:47,630
for the encryption keys where do you put

260
00:09:47,630 --> 00:09:50,840
those second there is no secure counter

261
00:09:50,840 --> 00:09:52,850
yes we can encrypt the data but the

262
00:09:52,850 --> 00:09:54,560
encryption alone does not prevent roll

263
00:09:54,560 --> 00:09:56,480
back attacks how do you actually prevent

264
00:09:56,480 --> 00:09:58,010
against all about the attacks you need a

265
00:09:58,010 --> 00:10:01,340
secure counter third there is no secure

266
00:10:01,340 --> 00:10:03,470
clock and for there is no secure source

267
00:10:03,470 --> 00:10:05,390
of entropy and the FTP meets all these

268
00:10:05,390 --> 00:10:07,610
resources and what's important here the

269
00:10:07,610 --> 00:10:09,410
reason why I think this is important is

270
00:10:09,410 --> 00:10:12,290
not that the FTP M uses resources these

271
00:10:12,290 --> 00:10:13,910
are the resources we use whenever we

272
00:10:13,910 --> 00:10:15,500
have to build any use systems useful in

273
00:10:15,500 --> 00:10:17,990
practice any storage you need a secure

274
00:10:17,990 --> 00:10:19,910
counter you use a secure form of entropy

275
00:10:19,910 --> 00:10:21,500
to create randomness and so on and so

276
00:10:21,500 --> 00:10:23,840
forth before moving on I like to mention

277
00:10:23,840 --> 00:10:25,970
two more things that make it challenging

278
00:10:25,970 --> 00:10:28,010
to actually write systems when I'm

279
00:10:28,010 --> 00:10:29,720
transom there is no virtualization

280
00:10:29,720 --> 00:10:31,550
support arm provides

281
00:10:31,550 --> 00:10:33,380
virtualization but there's nothing in

282
00:10:33,380 --> 00:10:35,420
the transom specification that says your

283
00:10:35,420 --> 00:10:38,080
SOC must have virtualization enabled and

284
00:10:38,080 --> 00:10:40,340
the lack of virtualization makes it

285
00:10:40,340 --> 00:10:42,500
difficult to write a piece of software

286
00:10:42,500 --> 00:10:45,080
stack that sits side-by-side with the

287
00:10:45,080 --> 00:10:47,150
legacy operating system because there is

288
00:10:47,150 --> 00:10:49,190
no context that you can save back and

289
00:10:49,190 --> 00:10:50,900
forth there is no help from the hardware

290
00:10:50,900 --> 00:10:53,360
to do that so yes you can actually build

291
00:10:53,360 --> 00:10:54,650
systems but they require a lot of

292
00:10:54,650 --> 00:10:56,660
engineering and a lot of engineering is

293
00:10:56,660 --> 00:10:58,160
expensive and also comes with a lot of

294
00:10:58,160 --> 00:10:59,540
bugs which is you know defeats the

295
00:10:59,540 --> 00:11:02,150
purpose in the first place the last

296
00:11:02,150 --> 00:11:03,200
thing I wanna mention is the lack of

297
00:11:03,200 --> 00:11:05,210
accessibility of armed razón

298
00:11:05,210 --> 00:11:07,370
it's very difficult to get although all

299
00:11:07,370 --> 00:11:09,470
your arm devices in your in your pockets

300
00:11:09,470 --> 00:11:11,640
right now do offer Amazon

301
00:11:11,640 --> 00:11:14,160
all of them they're not enabled and it's

302
00:11:14,160 --> 00:11:16,020
very hard to actually have the harder

303
00:11:16,020 --> 00:11:17,640
audience enable them they're reluctant

304
00:11:17,640 --> 00:11:20,580
to do that ourselves to benefit

305
00:11:20,580 --> 00:11:22,200
benefited from the relationships

306
00:11:22,200 --> 00:11:25,080
Microsoft has with the SOC vendors to

307
00:11:25,080 --> 00:11:28,320
actually get access that razón okay so

308
00:11:28,320 --> 00:11:30,330
that was background okay now I'm going

309
00:11:30,330 --> 00:11:31,770
to present a high-level FTP I'm on

310
00:11:31,770 --> 00:11:33,060
thread model and then I'm gonna tell you

311
00:11:33,060 --> 00:11:35,720
a couple of cool cool ideas that we used

312
00:11:35,720 --> 00:11:38,220
this is a high-level diagram of the FTP

313
00:11:38,220 --> 00:11:40,200
architecture the bottom layer is the arm

314
00:11:40,200 --> 00:11:42,270
hardware and we then have a number of

315
00:11:42,270 --> 00:11:44,100
layers that build a very small trusted

316
00:11:44,100 --> 00:11:47,940
execution environment or or a t we want

317
00:11:47,940 --> 00:11:49,740
this T to be as small as possible

318
00:11:49,740 --> 00:11:51,720
because we don't we haven't verified it

319
00:11:51,720 --> 00:11:53,250
and the only way we know to actually

320
00:11:53,250 --> 00:11:55,260
make sure it doesn't have bugs is to

321
00:11:55,260 --> 00:11:57,870
reduce its code complexity so here what

322
00:11:57,870 --> 00:11:59,730
all the layers that are actually a

323
00:11:59,730 --> 00:12:01,740
slightly darker there are all the TCB of

324
00:12:01,740 --> 00:12:04,620
the system by the way the small box the

325
00:12:04,620 --> 00:12:07,050
kamati OS that's by far in terms of

326
00:12:07,050 --> 00:12:09,480
numbers of lines of code it's just you

327
00:12:09,480 --> 00:12:12,120
know probably on the order of four

328
00:12:12,120 --> 00:12:13,830
orders of magnitude bigger than the code

329
00:12:13,830 --> 00:12:15,600
on the right hand side also this figure

330
00:12:15,600 --> 00:12:18,510
is not to scale I also like to mention

331
00:12:18,510 --> 00:12:20,880
that harder resources such as graphics

332
00:12:20,880 --> 00:12:24,110
regular netware regular storage sound

333
00:12:24,110 --> 00:12:26,700
they all map to the normal world not the

334
00:12:26,700 --> 00:12:28,230
secure world and we do that for

335
00:12:28,230 --> 00:12:29,520
performance reasons and I'm gonna

336
00:12:29,520 --> 00:12:32,130
actually come back to this point ok

337
00:12:32,130 --> 00:12:33,870
thread model what returning scope what

338
00:12:33,870 --> 00:12:36,090
rates are not in scope it's going it's

339
00:12:36,090 --> 00:12:37,740
important here to contrast the thread

340
00:12:37,740 --> 00:12:39,330
model of the firmware TPM without with

341
00:12:39,330 --> 00:12:41,550
with that of a discrete EPM and I still

342
00:12:41,550 --> 00:12:45,180
TPM is a TPM chip at least six attacks

343
00:12:45,180 --> 00:12:46,800
here on the left hand side six goals

344
00:12:46,800 --> 00:12:49,140
there are more in the paper please do

345
00:12:49,140 --> 00:12:50,370
the paper if you're interested in a more

346
00:12:50,370 --> 00:12:53,940
detailed thread model the first and most

347
00:12:53,940 --> 00:12:55,320
obvious attack is that of malicious

348
00:12:55,320 --> 00:12:57,780
software running on the machine we can

349
00:12:57,780 --> 00:12:59,550
certainly assume that we can have

350
00:12:59,550 --> 00:13:01,350
malware and malicious operating systems

351
00:13:01,350 --> 00:13:02,880
that makes incorrect calls he tries to

352
00:13:02,880 --> 00:13:04,710
inject exceptions or errors or tries to

353
00:13:04,710 --> 00:13:06,630
grab the storage all of these are fair

354
00:13:06,630 --> 00:13:08,550
game as a whole point of the TPMS in the

355
00:13:08,550 --> 00:13:09,470
first place

356
00:13:09,470 --> 00:13:11,400
next attacks that are in scope are

357
00:13:11,400 --> 00:13:14,100
time-based side-channel attacks here

358
00:13:14,100 --> 00:13:18,240
what we do we leverage the the the TPM

359
00:13:18,240 --> 00:13:20,730
code base which goes to great lengths to

360
00:13:20,730 --> 00:13:22,650
ensure that it's code paths are constant

361
00:13:22,650 --> 00:13:24,430
time all the cryptography

362
00:13:24,430 --> 00:13:26,290
being used is constant time and some

363
00:13:26,290 --> 00:13:27,850
there are some other mechanisms in place

364
00:13:27,850 --> 00:13:29,610
for making sure things are constant time

365
00:13:29,610 --> 00:13:31,839
next one are cash cash based

366
00:13:31,839 --> 00:13:34,930
side-channel attacks here trustzone has

367
00:13:34,930 --> 00:13:38,740
provisions for sorting side-channel cash

368
00:13:38,740 --> 00:13:41,440
pay side channel attacks and no such

369
00:13:41,440 --> 00:13:42,430
attacks have been demonstrated in

370
00:13:42,430 --> 00:13:47,140
practice at least yet now the more

371
00:13:47,140 --> 00:13:48,339
interesting part the things that are out

372
00:13:48,339 --> 00:13:50,709
of scope denial-of-service so in order

373
00:13:50,709 --> 00:13:52,390
to get access to the TPM or there is a

374
00:13:52,390 --> 00:13:54,459
TPM chip or a firmware TPM you have this

375
00:13:54,459 --> 00:13:56,110
big operating system in the middle and

376
00:13:56,110 --> 00:13:58,089
they always clearly can refuse to give

377
00:13:58,089 --> 00:14:00,970
you access the TPM so they are out of

378
00:14:00,970 --> 00:14:02,589
scope and what this means here is that

379
00:14:02,589 --> 00:14:04,779
the TPM and the firmware TPM they remain

380
00:14:04,779 --> 00:14:07,630
secure they protect their secrets but

381
00:14:07,630 --> 00:14:09,220
they cannot make forward progress and

382
00:14:09,220 --> 00:14:10,660
there is nothing we can do about it as

383
00:14:10,660 --> 00:14:12,310
long as we have this big malicious thing

384
00:14:12,310 --> 00:14:14,140
in the middle ok but but they remain

385
00:14:14,140 --> 00:14:16,529
secure that's in the important part

386
00:14:16,529 --> 00:14:18,850
power analysis side based channel

387
00:14:18,850 --> 00:14:21,760
attacks power analyses are these attacks

388
00:14:21,760 --> 00:14:23,170
where you bring an antenna to measure

389
00:14:23,170 --> 00:14:26,200
the amount of electromagnetism coming

390
00:14:26,200 --> 00:14:28,870
from your electronics if you have the

391
00:14:28,870 --> 00:14:31,089
expenses in the sophistication to Midas

392
00:14:31,089 --> 00:14:33,130
an external attacks TPMS were never

393
00:14:33,130 --> 00:14:34,750
really designed to protect against these

394
00:14:34,750 --> 00:14:37,029
attacks we're worried about them but for

395
00:14:37,029 --> 00:14:39,459
this talk they're out of scope finally

396
00:14:39,459 --> 00:14:40,870
memory attacks these are the more

397
00:14:40,870 --> 00:14:44,470
interesting ones actually the FTP em

398
00:14:44,470 --> 00:14:47,560
store all its states in memory in RAM so

399
00:14:47,560 --> 00:14:50,080
now things like coal boots bus sniffing

400
00:14:50,080 --> 00:14:52,480
or JTAG attacks are in scope and these

401
00:14:52,480 --> 00:14:55,150
are of concern because you basically can

402
00:14:55,150 --> 00:14:57,700
steal the FD PM secrets by mounting dis

403
00:14:57,700 --> 00:14:58,360
attacks

404
00:14:58,360 --> 00:15:00,760
I should add here that I'm trans on does

405
00:15:00,760 --> 00:15:03,130
not encrypt these memory contents as Jax

406
00:15:03,130 --> 00:15:04,959
does encrypt this memory contents so

407
00:15:04,959 --> 00:15:06,160
before I was telling you about a

408
00:15:06,160 --> 00:15:08,440
disadvantage of a GTX the fact that we

409
00:15:08,440 --> 00:15:09,459
don't have interrupts

410
00:15:09,459 --> 00:15:11,320
here's an advantage of HDX which is it

411
00:15:11,320 --> 00:15:12,910
encrypts this memory trazodone does not

412
00:15:12,910 --> 00:15:15,610
do that we are worried about these

413
00:15:15,610 --> 00:15:18,400
attacks and we actually have a number of

414
00:15:18,400 --> 00:15:19,990
techniques that are generalizable to all

415
00:15:19,990 --> 00:15:21,790
armed platforms to prevent these attacks

416
00:15:21,790 --> 00:15:23,950
we actually publish a paper not about

417
00:15:23,950 --> 00:15:26,470
the FTP M but about how to prevent or

418
00:15:26,470 --> 00:15:28,450
how to protect against these attacks at

419
00:15:28,450 --> 00:15:30,910
ask laws last year you should read that

420
00:15:30,910 --> 00:15:32,660
if you're interested

421
00:15:32,660 --> 00:15:35,540
okay so now the contributions we use

422
00:15:35,540 --> 00:15:37,370
three approaches to overcome the trans

423
00:15:37,370 --> 00:15:39,890
no limitations the first thing we can do

424
00:15:39,890 --> 00:15:42,500
is we can go to the SOC vendors their

425
00:15:42,500 --> 00:15:44,120
invidious and the columns of the world

426
00:15:44,120 --> 00:15:46,460
and we can mandate them that they should

427
00:15:46,460 --> 00:15:47,690
put on their associates all these

428
00:15:47,690 --> 00:15:49,730
hardware resources and this is very

429
00:15:49,730 --> 00:15:51,770
difficult in general for two reasons

430
00:15:51,770 --> 00:15:54,550
the first one is economics SOC vendors

431
00:15:54,550 --> 00:15:56,930
operate on very low margins as you know

432
00:15:56,930 --> 00:15:58,670
and they want to have a very small Bill

433
00:15:58,670 --> 00:16:01,100
of Materials at the end of the day the

434
00:16:01,100 --> 00:16:02,630
set and that sort of interesting but the

435
00:16:02,630 --> 00:16:03,920
second reason is actually more

436
00:16:03,920 --> 00:16:05,810
interesting which is much more

437
00:16:05,810 --> 00:16:08,390
fundamental it's very difficult because

438
00:16:08,390 --> 00:16:10,670
there are physical processes in physical

439
00:16:10,670 --> 00:16:12,740
process limitations in place that

440
00:16:12,740 --> 00:16:15,260
prevent us from placing storage flash

441
00:16:15,260 --> 00:16:18,020
storage or secure counter on a small and

442
00:16:18,020 --> 00:16:20,210
hot surface like that of a processor the

443
00:16:20,210 --> 00:16:22,430
death of a chip ok so sort of physics

444
00:16:22,430 --> 00:16:25,010
gets in the way you can do that however

445
00:16:25,010 --> 00:16:26,030
we've made a number of helpful

446
00:16:26,030 --> 00:16:29,420
observations first arm comes with a huge

447
00:16:29,420 --> 00:16:31,040
ecosystem out there of hardware vendors

448
00:16:31,040 --> 00:16:32,420
and it's actually played in our favor

449
00:16:32,420 --> 00:16:34,100
because they all try to differentiate

450
00:16:34,100 --> 00:16:34,820
themselves

451
00:16:34,820 --> 00:16:38,300
unlike hjx in a gtx world the only SOC

452
00:16:38,300 --> 00:16:41,900
or the only vendor is intel here you

453
00:16:41,900 --> 00:16:43,310
have all these vendors you can work with

454
00:16:43,310 --> 00:16:44,600
and it turns out that there is this

455
00:16:44,600 --> 00:16:46,760
controller called an emmc storage

456
00:16:46,760 --> 00:16:48,890
controller that has provisions for

457
00:16:48,890 --> 00:16:51,020
trusted storage and is present on many

458
00:16:51,020 --> 00:16:53,120
arm socks and i'm gonna talk about it a

459
00:16:53,120 --> 00:16:54,710
little bit the second thing is that

460
00:16:54,710 --> 00:16:56,870
there this thing called secure fuses a

461
00:16:56,870 --> 00:16:58,790
secure fuse is a register where you're

462
00:16:58,790 --> 00:17:00,740
right once you literally burn a fuse to

463
00:17:00,740 --> 00:17:02,450
write it and then you can always read it

464
00:17:02,450 --> 00:17:04,790
and what we do is we provision these

465
00:17:04,790 --> 00:17:07,430
fuses with randomness this randomness is

466
00:17:07,430 --> 00:17:09,410
different for every single device in the

467
00:17:09,410 --> 00:17:11,180
world and we use these random as to

468
00:17:11,180 --> 00:17:13,730
derive crypto keys and then it turns out

469
00:17:13,730 --> 00:17:15,260
you can also add entropy sources that's

470
00:17:15,260 --> 00:17:18,160
actually a sort of an interesting thing

471
00:17:18,160 --> 00:17:20,359
now let me spend the ones like to

472
00:17:20,359 --> 00:17:23,569
describe emmc with emmc you can set up

473
00:17:23,569 --> 00:17:25,189
so you might see the storage controller

474
00:17:25,189 --> 00:17:26,630
for accessing your storage it's not

475
00:17:26,630 --> 00:17:28,040
there is nothing special about it

476
00:17:28,040 --> 00:17:30,860
but it has this security extensions it

477
00:17:30,860 --> 00:17:32,620
turns out it is a sort of an arcane

478
00:17:32,620 --> 00:17:35,450
interesting fact that we took a great

479
00:17:35,450 --> 00:17:38,030
advantage of you can set you can set up

480
00:17:38,030 --> 00:17:40,430
a partition on our owner on your emmc

481
00:17:40,430 --> 00:17:42,530
storage as an RPM b or implement

482
00:17:42,530 --> 00:17:45,110
protected memory block and this RPM b

483
00:17:45,110 --> 00:17:46,310
partition has a useful

484
00:17:46,310 --> 00:17:48,170
of primitives it has a one-time

485
00:17:48,170 --> 00:17:50,570
programmable authentication key so what

486
00:17:50,570 --> 00:17:52,730
the eff TPM does it takes the randomness

487
00:17:52,730 --> 00:17:54,440
from the secure fusion generator up the

488
00:17:54,440 --> 00:17:56,750
graphic keys and injects them into this

489
00:17:56,750 --> 00:17:59,750
emmc controller once that is done before

490
00:17:59,750 --> 00:18:01,370
the device actually is even shipped to

491
00:18:01,370 --> 00:18:03,530
the user the consumer so we've done

492
00:18:03,530 --> 00:18:05,750
through some process where we actually

493
00:18:05,750 --> 00:18:07,160
have some mechanism in place to make

494
00:18:07,160 --> 00:18:08,810
sure that it cannot be taken advantage

495
00:18:08,810 --> 00:18:10,490
of

496
00:18:10,490 --> 00:18:12,140
it also has support for authenticated

497
00:18:12,140 --> 00:18:14,660
region right if uses a set of internal

498
00:18:14,660 --> 00:18:16,430
counters it has support for analysis to

499
00:18:16,430 --> 00:18:19,340
help you with the freshness of reads so

500
00:18:19,340 --> 00:18:21,560
that was nice okay so here's what we did

501
00:18:21,560 --> 00:18:24,020
the combination of the emmc and secure

502
00:18:24,020 --> 00:18:26,270
fuses address the first limitations we

503
00:18:26,270 --> 00:18:27,740
now have secure counters and we have

504
00:18:27,740 --> 00:18:29,990
secure trusted storage the source of

505
00:18:29,990 --> 00:18:31,400
entropy address the source of entropy

506
00:18:31,400 --> 00:18:33,680
straightforward and finally we will use

507
00:18:33,680 --> 00:18:35,720
a combination of a timer and a slight

508
00:18:35,720 --> 00:18:37,820
change in the semantics of a TPM command

509
00:18:37,820 --> 00:18:40,310
to build a secure clock and I don't have

510
00:18:40,310 --> 00:18:42,020
time to present this in the in this talk

511
00:18:42,020 --> 00:18:43,760
it's in the paper it's a couple of

512
00:18:43,760 --> 00:18:45,650
tricks we use and they were looking

513
00:18:45,650 --> 00:18:47,210
found that they were a little confusing

514
00:18:47,210 --> 00:18:48,770
to present them in a talk so I sort of

515
00:18:48,770 --> 00:18:50,300
skip and you said I'm going to focus on

516
00:18:50,300 --> 00:18:51,800
the other tricks that are actually much

517
00:18:51,800 --> 00:18:53,350
simpler and more straightforward

518
00:18:53,350 --> 00:18:55,610
okay so here's three approaches I told

519
00:18:55,610 --> 00:18:57,560
you about we went to Daiso see vendors

520
00:18:57,560 --> 00:18:58,760
and say hey you can put an emmc

521
00:18:58,760 --> 00:19:00,620
controller give us a secure fuse and

522
00:19:00,620 --> 00:19:03,350
give us a secure form of entropy and we

523
00:19:03,350 --> 00:19:05,240
did that but we use two other approaches

524
00:19:05,240 --> 00:19:07,580
we may design compromises in the TPM

525
00:19:07,580 --> 00:19:09,110
this was a trick that we took advantage

526
00:19:09,110 --> 00:19:11,720
of and then we change the semantics of

527
00:19:11,720 --> 00:19:14,300
some of the TPM commands and whenever we

528
00:19:14,300 --> 00:19:16,130
do this you have to be very careful to

529
00:19:16,130 --> 00:19:18,710
not weaken the security of the TPM

530
00:19:18,710 --> 00:19:21,350
because yeah then you defeat the purpose

531
00:19:21,350 --> 00:19:22,820
so let me give you a couple of examples

532
00:19:22,820 --> 00:19:24,590
of how we did this I'm gonna start with

533
00:19:24,590 --> 00:19:26,600
the design compromise one of the

534
00:19:26,600 --> 00:19:29,420
problems is long running commands so let

535
00:19:29,420 --> 00:19:30,650
me describe the design requirements

536
00:19:30,650 --> 00:19:32,570
coding the running of the secure world

537
00:19:32,570 --> 00:19:34,880
must be minimal for example that she

538
00:19:34,880 --> 00:19:37,460
lacks pre-emptive scheduling so we can't

539
00:19:37,460 --> 00:19:38,600
really switch back and forth very

540
00:19:38,600 --> 00:19:40,550
quickly between within the two worlds

541
00:19:40,550 --> 00:19:42,380
what is nice is that whenever we're on

542
00:19:42,380 --> 00:19:44,660
an FTP em command the operating system

543
00:19:44,660 --> 00:19:48,110
freezes to a first approximation and we

544
00:19:48,110 --> 00:19:51,230
want to make sure that this period of

545
00:19:51,230 --> 00:19:53,090
time in which the OS is frozen there not

546
00:19:53,090 --> 00:19:55,130
very long well it turns out that

547
00:19:55,130 --> 00:19:56,780
creating RSA keys which is one of the

548
00:19:56,780 --> 00:19:59,300
TPM operation can take over 10 seconds

549
00:19:59,300 --> 00:19:59,630
on

550
00:19:59,630 --> 00:20:01,940
slower mobile devices and freezing the

551
00:20:01,940 --> 00:20:04,280
operating system like Windows for more

552
00:20:04,280 --> 00:20:06,080
than a hundreds of milliseconds is

553
00:20:06,080 --> 00:20:08,060
problematic because while the OS is

554
00:20:08,060 --> 00:20:10,160
frozen the interrupts get queued the

555
00:20:10,160 --> 00:20:12,200
queue eventually overflows you start

556
00:20:12,200 --> 00:20:13,970
losing interrupts your things don't work

557
00:20:13,970 --> 00:20:15,140
properly anymore

558
00:20:15,140 --> 00:20:17,450
to give you a simple example mp3 doesn't

559
00:20:17,450 --> 00:20:18,770
work properly or it doesn't sound good

560
00:20:18,770 --> 00:20:20,090
when you start losing interrupts coming

561
00:20:20,090 --> 00:20:22,940
from your audio device we certainly

562
00:20:22,940 --> 00:20:24,410
don't want a smartphone that starts to

563
00:20:24,410 --> 00:20:26,000
distort your music whenever somebody

564
00:20:26,000 --> 00:20:29,210
uses the FT p.m. in the background so

565
00:20:29,210 --> 00:20:30,890
the solution we device here is based on

566
00:20:30,890 --> 00:20:33,050
cooperative checkpointing so whenever

567
00:20:33,050 --> 00:20:35,270
you have a long-running command the TP

568
00:20:35,270 --> 00:20:37,370
the FT p.m. check point is state and

569
00:20:37,370 --> 00:20:39,680
yields back to the normal world and it's

570
00:20:39,680 --> 00:20:41,630
not the job of the OS even though the OS

571
00:20:41,630 --> 00:20:43,310
is malicious this job the do is to

572
00:20:43,310 --> 00:20:45,110
actually resume this command if it

573
00:20:45,110 --> 00:20:47,180
wishes to do so or it can issue cancel

574
00:20:47,180 --> 00:20:48,890
commands so in this way we make sure

575
00:20:48,890 --> 00:20:50,570
that the OS is never frozen for more

576
00:20:50,570 --> 00:20:51,920
than one hundreds of couple of super

577
00:20:51,920 --> 00:20:53,000
more than a couple of hundreds of

578
00:20:53,000 --> 00:20:56,120
milliseconds finally let me give you an

579
00:20:56,120 --> 00:20:57,710
example of how it changed the semantics

580
00:20:57,710 --> 00:21:01,580
of a TPM command DPM on seal unseal is a

581
00:21:01,580 --> 00:21:03,440
TPM command where an authorization is

582
00:21:03,440 --> 00:21:05,750
shown to the TPM in order for the TPM to

583
00:21:05,750 --> 00:21:08,180
decrypt an encrypted blob and you can

584
00:21:08,180 --> 00:21:10,490
think of this an authorization like a

585
00:21:10,490 --> 00:21:12,260
pin number you can think of this over

586
00:21:12,260 --> 00:21:13,460
this author editor like a pin number

587
00:21:13,460 --> 00:21:16,100
that the user enters BitLocker which is

588
00:21:16,100 --> 00:21:18,200
one of the windows features makes great

589
00:21:18,200 --> 00:21:19,640
use of these pin numbers but not just

590
00:21:19,640 --> 00:21:21,260
BitLocker Google has a number of systems

591
00:21:21,260 --> 00:21:23,960
like this as well the TPM uses a

592
00:21:23,960 --> 00:21:26,450
mechanism called anti hammering whose

593
00:21:26,450 --> 00:21:28,250
goal is to stop an attacker attempting

594
00:21:28,250 --> 00:21:30,470
to guess the pin number the idea is to

595
00:21:30,470 --> 00:21:32,180
have a counter that they cause the

596
00:21:32,180 --> 00:21:34,670
number of tried and failed attempts it

597
00:21:34,670 --> 00:21:36,770
is important for this counter to persist

598
00:21:36,770 --> 00:21:39,380
to the trusted storage otherwise if the

599
00:21:39,380 --> 00:21:41,180
counter were to be volatile then

600
00:21:41,180 --> 00:21:42,740
attacker can simply reboot the machine

601
00:21:42,740 --> 00:21:44,330
every set the counter or rollback the

602
00:21:44,330 --> 00:21:46,760
counter and what the point of this

603
00:21:46,760 --> 00:21:49,100
diagram here is that we we store on

604
00:21:49,100 --> 00:21:50,660
trusted storage the failed attempt

605
00:21:50,660 --> 00:21:52,490
counter before we return back to the

606
00:21:52,490 --> 00:21:54,590
user and at some point if you exhaust

607
00:21:54,590 --> 00:21:57,020
the number of tries trials the TPM

608
00:21:57,020 --> 00:21:59,840
enters a period called blackout during

609
00:21:59,840 --> 00:22:01,670
lockout the TPM refuses to answer

610
00:22:01,670 --> 00:22:04,100
commands anymore and lockouts are long

611
00:22:04,100 --> 00:22:06,050
periods of time in the orders of hours

612
00:22:06,050 --> 00:22:08,390
the goal of anti hammering which is what

613
00:22:08,390 --> 00:22:10,400
this mechanism is called is to slow down

614
00:22:10,400 --> 00:22:11,930
an attacker that attempts to get pin

615
00:22:11,930 --> 00:22:13,720
numbers

616
00:22:13,720 --> 00:22:15,980
however with the FT p.m. we have a

617
00:22:15,980 --> 00:22:18,020
problem that is that we refer to as a

618
00:22:18,020 --> 00:22:20,570
dark period but that period is one where

619
00:22:20,570 --> 00:22:22,790
storage is unavailable the danger during

620
00:22:22,790 --> 00:22:24,560
the dark period is that TPM on silk

621
00:22:24,560 --> 00:22:25,820
commands are not safe because the

622
00:22:25,820 --> 00:22:27,340
attacker can simply reboot the Machine

623
00:22:27,340 --> 00:22:29,870
an example of a dark period occurs

624
00:22:29,870 --> 00:22:31,610
during the boot cycle off of your mobile

625
00:22:31,610 --> 00:22:34,250
device at the time where the firmware or

626
00:22:34,250 --> 00:22:35,990
for those of you who are armed savvy the

627
00:22:35,990 --> 00:22:38,420
UEFI the firmware sort of finished

628
00:22:38,420 --> 00:22:40,340
booting up and unload itself the

629
00:22:40,340 --> 00:22:41,900
contract between an operating system and

630
00:22:41,900 --> 00:22:44,270
the firmware is that only one set of

631
00:22:44,270 --> 00:22:45,950
drivers its present and managing a

632
00:22:45,950 --> 00:22:47,900
device at any single point in time the

633
00:22:47,900 --> 00:22:49,790
contract is that once you fi is done

634
00:22:49,790 --> 00:22:51,830
doing its stuff its gonna unload this

635
00:22:51,830 --> 00:22:53,150
driver and now the operating the

636
00:22:53,150 --> 00:22:55,130
operating system takes over and during

637
00:22:55,130 --> 00:22:56,390
this period of time you have a dark

638
00:22:56,390 --> 00:22:58,310
period storage is unavailable and you

639
00:22:58,310 --> 00:22:59,780
have to be shown on still command

640
00:22:59,780 --> 00:23:03,020
because that's how you actually release

641
00:23:03,020 --> 00:23:04,940
the authentication keys from the TPM to

642
00:23:04,940 --> 00:23:06,500
go decrypt your operating system it's

643
00:23:06,500 --> 00:23:08,660
exactly 1 TPM until it is doing one of

644
00:23:08,660 --> 00:23:10,190
these dark periods there are other

645
00:23:10,190 --> 00:23:12,170
example of dark periods other than this

646
00:23:12,170 --> 00:23:15,170
let me going back to this timeline is

647
00:23:15,170 --> 00:23:16,970
the same timeline than before we just

648
00:23:16,970 --> 00:23:19,160
enter a dark period here early on we

649
00:23:19,160 --> 00:23:20,720
don't have trusted storage anymore so

650
00:23:20,720 --> 00:23:22,550
that's what the x over that counter of

651
00:23:22,550 --> 00:23:25,130
failed attempts means and the attacker

652
00:23:25,130 --> 00:23:26,780
can simply reboot the machine and for

653
00:23:26,780 --> 00:23:28,850
the FT p.m. to never enter lockout and

654
00:23:28,850 --> 00:23:31,040
this means that the FT p.m. 70 hammering

655
00:23:31,040 --> 00:23:34,310
mechanism is useless so the solution

656
00:23:34,310 --> 00:23:36,050
here was to modify the semantics of how

657
00:23:36,050 --> 00:23:38,840
TPM 2.0 interprets the discounter and

658
00:23:38,840 --> 00:23:42,170
for this we introduce a dirty bit before

659
00:23:42,170 --> 00:23:43,760
entering the dark period we write this

660
00:23:43,760 --> 00:23:46,370
bit to storage when the machine exists

661
00:23:46,370 --> 00:23:48,830
at that period we clear this dirty bit

662
00:23:48,830 --> 00:23:51,710
however it's possible at the machine

663
00:23:51,710 --> 00:23:53,810
reboots while this bit is dirty and

664
00:23:53,810 --> 00:23:55,670
present dirty on our storage but we

665
00:23:55,670 --> 00:23:57,710
don't have drivers and their two

666
00:23:57,710 --> 00:23:58,940
possibilities either there is a

667
00:23:58,940 --> 00:24:00,470
legitimate users that happen to just

668
00:24:00,470 --> 00:24:02,060
reboot its platform in the middle of

669
00:24:02,060 --> 00:24:03,680
this one of these dark periods or an

670
00:24:03,680 --> 00:24:05,150
attacker is trying to actually Buddha

671
00:24:05,150 --> 00:24:07,100
machine to get the pin number we just

672
00:24:07,100 --> 00:24:08,480
can distinguish between the two

673
00:24:08,480 --> 00:24:10,970
possibilities which one is it and the

674
00:24:10,970 --> 00:24:13,190
solution here was to be conservative

675
00:24:13,190 --> 00:24:14,900
from a security standpoint and as human

676
00:24:14,900 --> 00:24:16,970
attacker no matter what the solution

677
00:24:16,970 --> 00:24:19,040
they needs to always enter lockout when

678
00:24:19,040 --> 00:24:22,100
you reboot during the dark period so to

679
00:24:22,100 --> 00:24:23,690
illustrate the dirty bit in action this

680
00:24:23,690 --> 00:24:25,670
is the same timeline as before except

681
00:24:25,670 --> 00:24:25,910
that the

682
00:24:25,910 --> 00:24:27,740
right hand side which don't we canister

683
00:24:27,740 --> 00:24:29,720
the filter can attempts counter but the

684
00:24:29,720 --> 00:24:32,120
right inside if we amp if the machinery

685
00:24:32,120 --> 00:24:36,230
bullet we always enter lockout okay

686
00:24:36,230 --> 00:24:38,090
performance we use seven different

687
00:24:38,090 --> 00:24:39,800
devices with different TPM see Norma

688
00:24:39,800 --> 00:24:41,660
theology this table lists the seven

689
00:24:41,660 --> 00:24:43,670
devices the first four one are armed

690
00:24:43,670 --> 00:24:46,610
smartphones and tablets these

691
00:24:46,610 --> 00:24:47,930
smartphones and tablets are sort of

692
00:24:47,930 --> 00:24:49,640
generic ones you can go walk into your

693
00:24:49,640 --> 00:24:52,280
next wireless carrier store and buy them

694
00:24:52,280 --> 00:24:54,020
probably some of you actually run them

695
00:24:54,020 --> 00:24:55,190
in your pocket there is nothing esoteric

696
00:24:55,190 --> 00:24:58,400
about these devices the last three are

697
00:24:58,400 --> 00:25:01,070
discreet TPM devices or TPM chips and we

698
00:25:01,070 --> 00:25:02,540
instrumented at profile the number of

699
00:25:02,540 --> 00:25:04,820
TPM commands we have a lot of data in a

700
00:25:04,820 --> 00:25:06,830
technical report if you're interested in

701
00:25:06,830 --> 00:25:08,510
to how to find out about our technical

702
00:25:08,510 --> 00:25:11,930
report we have a link in our paper ok

703
00:25:11,930 --> 00:25:13,910
what this graph shows is the performance

704
00:25:13,910 --> 00:25:16,160
of encryption and decryption of 32 bytes

705
00:25:16,160 --> 00:25:20,090
of data using RSA 2048 on the x-axis you

706
00:25:20,090 --> 00:25:21,800
have the 7 devices the first four are

707
00:25:21,800 --> 00:25:23,750
ftp ms the last three are daisuki TPM

708
00:25:23,750 --> 00:25:26,030
chips the y-axis measures the duration

709
00:25:26,030 --> 00:25:28,060
of a TPM commands in milliseconds and

710
00:25:28,060 --> 00:25:31,580
the takeaway point here is that it's STP

711
00:25:31,580 --> 00:25:33,500
M is much much faster than the discrete

712
00:25:33,500 --> 00:25:35,690
DBMS and there is nothing it is not

713
00:25:35,690 --> 00:25:37,070
surprising there is nothing it's not

714
00:25:37,070 --> 00:25:38,900
that the discrete TPMS are dumb or or

715
00:25:38,900 --> 00:25:41,510
it's just that a TPM chip has a micro

716
00:25:41,510 --> 00:25:43,310
controller inside and doing krypton

717
00:25:43,310 --> 00:25:45,590
microcontrollers is damn slow here we do

718
00:25:45,590 --> 00:25:47,810
crypto on the arm SOC core which is much

719
00:25:47,810 --> 00:25:49,700
much faster so we just have much better

720
00:25:49,700 --> 00:25:52,100
hardware today than they do what's cool

721
00:25:52,100 --> 00:25:54,080
here the point I want to come across is

722
00:25:54,080 --> 00:25:57,770
that with FTP MS you can now so until

723
00:25:57,770 --> 00:25:59,540
now whenever an application is to run

724
00:25:59,540 --> 00:26:01,130
encryption it relies on the operating

725
00:26:01,130 --> 00:26:02,540
system to actually sort of manage the

726
00:26:02,540 --> 00:26:04,700
encryption keys and do encryption now be

727
00:26:04,700 --> 00:26:07,220
if TPMS aren't fast enough that we can

728
00:26:07,220 --> 00:26:08,780
do encryption and decryption for most of

729
00:26:08,780 --> 00:26:10,820
your needs through the FTP M device and

730
00:26:10,820 --> 00:26:12,530
that's nice because you don't have you

731
00:26:12,530 --> 00:26:14,300
get out of the job of managing your keys

732
00:26:14,300 --> 00:26:16,070
the FTP M device has these provisions

733
00:26:16,070 --> 00:26:17,570
where you can create keys such as the

734
00:26:17,570 --> 00:26:19,400
private key never leaves the TPM chip

735
00:26:19,400 --> 00:26:20,900
and that's nice you don't cannot lose it

736
00:26:20,900 --> 00:26:24,260
and so forth ok so this is the

737
00:26:24,260 --> 00:26:26,630
conclusion slide FTP M leverages arm

738
00:26:26,630 --> 00:26:28,730
trazodone to build a TPM 2.0 running in

739
00:26:28,730 --> 00:26:30,860
firmware we took three approaches and we

740
00:26:30,860 --> 00:26:32,210
think these are useful for anyone

741
00:26:32,210 --> 00:26:34,990
building trusted systems in practice we

742
00:26:34,990 --> 00:26:37,820
looked for additional trusted hardware

743
00:26:37,820 --> 00:26:39,470
we made some design come from

744
00:26:39,470 --> 00:26:40,850
and we made some changes to the

745
00:26:40,850 --> 00:26:43,309
semantics of the commands and the last

746
00:26:43,309 --> 00:26:44,750
point I want to communicate is that the

747
00:26:44,750 --> 00:26:46,400
FTP M is much much faster than their

748
00:26:46,400 --> 00:26:48,260
dice counterparts and you can use it for

749
00:26:48,260 --> 00:26:51,740
cool things thank you that's it I have a

750
00:26:51,740 --> 00:26:53,570
slide on in discussing HDX limitations

751
00:26:53,570 --> 00:26:55,580
if you are interested ask me questions

752
00:26:55,580 --> 00:27:00,580
I'm kind of out of time okay

753
00:27:05,179 --> 00:27:12,889
well Paul has a question okay so you

754
00:27:12,889 --> 00:27:15,690
start getting ready and we'll take some

755
00:27:15,690 --> 00:27:18,179
questions I think this is a great work

756
00:27:18,179 --> 00:27:20,220
and I'm glad you had a chance to share

757
00:27:20,220 --> 00:27:22,500
it with us a question about some earlier

758
00:27:22,500 --> 00:27:23,340
research you've done

759
00:27:23,340 --> 00:27:26,010
does this substantially change the

760
00:27:26,010 --> 00:27:29,070
support level for trusted sensors or can

761
00:27:29,070 --> 00:27:30,419
you say something about how this impacts

762
00:27:30,419 --> 00:27:36,899
that so it does not the the goal maybe

763
00:27:36,899 --> 00:27:38,880
didn't come across the goal of the FTP M

764
00:27:38,880 --> 00:27:42,210
is to be as compatible with the regular

765
00:27:42,210 --> 00:27:46,529
TPM chip as possible and in fact Windows

766
00:27:46,529 --> 00:27:47,789
doesn't even know he's running on top of

767
00:27:47,789 --> 00:27:49,230
the FTP M whenever it looks for a

768
00:27:49,230 --> 00:27:50,909
hardware resource is the FTP I monsters

769
00:27:50,909 --> 00:27:52,980
and says hey I'm a TPM chip and Windows

770
00:27:52,980 --> 00:27:55,139
has no idea that in fact this firmware

771
00:27:55,139 --> 00:27:56,639
running in the tippy tippy I'm running

772
00:27:56,639 --> 00:27:58,320
in the firmware so it does not change

773
00:27:58,320 --> 00:28:01,169
only any of the features in legacy in

774
00:28:01,169 --> 00:28:03,419
Windows at least Windows no not does not

775
00:28:03,419 --> 00:28:06,440
offer super for trusted sensors and

776
00:28:06,440 --> 00:28:10,289
trusted sensors you probably DPMS are

777
00:28:10,289 --> 00:28:11,460
useful but they're probably not

778
00:28:11,460 --> 00:28:12,870
everything you need for building trusted

779
00:28:12,870 --> 00:28:14,909
sensors you probably want to have the

780
00:28:14,909 --> 00:28:18,480
ability to map your TPM set your sensor

781
00:28:18,480 --> 00:28:20,789
directly into the trust own and you

782
00:28:20,789 --> 00:28:23,159
probably run or run some sort of sensor

783
00:28:23,159 --> 00:28:25,889
driver inside there that that signs your

784
00:28:25,889 --> 00:28:29,850
readings it's a tougher problem it

785
00:28:29,850 --> 00:28:31,740
depends on what you mean so I'll tell

786
00:28:31,740 --> 00:28:33,990
you nobody has built a software stack of

787
00:28:33,990 --> 00:28:35,580
I build a softer side fortress the

788
00:28:35,580 --> 00:28:40,710
sensor is nor near the careful design

789
00:28:40,710 --> 00:28:43,200
that the TPM software sack uses so in

790
00:28:43,200 --> 00:28:45,269
other words if you're if you want to

791
00:28:45,269 --> 00:28:47,909
manage encryption keys or you want to do

792
00:28:47,909 --> 00:28:49,409
sealing on seal which are sort of useful

793
00:28:49,409 --> 00:28:51,570
TPM is definitely the way to go it's

794
00:28:51,570 --> 00:28:53,669
much more well thought-out than anything

795
00:28:53,669 --> 00:28:56,090
I've seen

796
00:28:57,380 --> 00:29:00,020
Microsoft satisfied with the FTP MGS of

797
00:29:00,020 --> 00:29:02,150
a TPM thing for mobile going corridors

798
00:29:02,150 --> 00:29:04,310
this is seen as a stopgap until Hardware

799
00:29:04,310 --> 00:29:11,630
TPMS become more yeah yeah yeah you want

800
00:29:11,630 --> 00:29:15,050
to ask the second or the first okay so

801
00:29:15,050 --> 00:29:16,220
I'll answer your first question why do

802
00:29:16,220 --> 00:29:17,660
you think so the euro quickly let me

803
00:29:17,660 --> 00:29:20,630
repeat the question the question was was

804
00:29:20,630 --> 00:29:22,880
this a stopgap solution until we have

805
00:29:22,880 --> 00:29:27,770
discrete EPMC in practice Microsoft

806
00:29:27,770 --> 00:29:29,810
really is not in the business of

807
00:29:29,810 --> 00:29:32,480
dictating the soc vendors what to do my

808
00:29:32,480 --> 00:29:34,100
guess is we're not gonna have those free

809
00:29:34,100 --> 00:29:36,710
TPMS on smartphones really stated is

810
00:29:36,710 --> 00:29:38,030
that the premium is the smartphone's

811
00:29:38,030 --> 00:29:40,580
I cannot speak on behalf of Microsoft I

812
00:29:40,580 --> 00:29:42,020
can now give you my personal opinion

813
00:29:42,020 --> 00:29:43,640
which is that I don't think we're gonna

814
00:29:43,640 --> 00:29:45,590
see TPM chips in smartphones anytime

815
00:29:45,590 --> 00:29:49,010
soon surfaces on the other hand we do

816
00:29:49,010 --> 00:29:51,020
see TPM chips and the reason for that is

817
00:29:51,020 --> 00:29:53,390
because Intel itself it's a TPM vendor

818
00:29:53,390 --> 00:29:57,400
and has EPM chips however Intel also has

819
00:29:57,400 --> 00:30:00,980
an FTP I'm running in some of their nah

820
00:30:00,980 --> 00:30:02,720
nah I mean they don't use arm on their

821
00:30:02,720 --> 00:30:07,490
own their surfaces being with FTP m's

822
00:30:07,490 --> 00:30:18,080
being is there a way for is your

823
00:30:18,080 --> 00:30:19,580
question that the user is these are

824
00:30:19,580 --> 00:30:21,500
aware or these are these devices being

825
00:30:21,500 --> 00:30:24,980
marketed as having TPMS when you might

826
00:30:24,980 --> 00:30:26,480
be difficult to determine if you have an

827
00:30:26,480 --> 00:30:31,640
FTP M or a real TPM I'll tell you I have

828
00:30:31,640 --> 00:30:33,620
no idea how exactly they're marketed and

829
00:30:33,620 --> 00:30:34,970
I'm sure that in the moment there is a

830
00:30:34,970 --> 00:30:37,100
marketing spec sheet out there that

831
00:30:37,100 --> 00:30:38,930
probably says it's a TPM in fact an FTP

832
00:30:38,930 --> 00:30:41,030
M I don't know there are ways if you're

833
00:30:41,030 --> 00:30:42,560
interested in you knowing whether you

834
00:30:42,560 --> 00:30:44,630
have an FTP M or a TPM chip I can tell

835
00:30:44,630 --> 00:30:49,870
you about how to do that in Windows yeah

836
00:30:52,090 --> 00:30:56,960
so the key that you burn into fuses

837
00:30:56,960 --> 00:30:59,600
right assume that these look that keys

838
00:30:59,600 --> 00:31:02,180
are accessible to firmware TPM the

839
00:31:02,180 --> 00:31:05,270
entire thing so how what's your recovery

840
00:31:05,270 --> 00:31:07,880
story if that keys or somehow gets

841
00:31:07,880 --> 00:31:10,010
compromised because of a bug in FTP M

842
00:31:10,010 --> 00:31:14,780
yes so so just so so your question was

843
00:31:14,780 --> 00:31:17,690
we we store keys in the secure fuses

844
00:31:17,690 --> 00:31:19,340
what if the key words were to compromise

845
00:31:19,340 --> 00:31:22,640
what measures do we take to actually do

846
00:31:22,640 --> 00:31:24,110
something about it

847
00:31:24,110 --> 00:31:26,090
good question let me thank you for your

848
00:31:26,090 --> 00:31:28,580
question let me a small paraffin we

849
00:31:28,580 --> 00:31:31,100
store a seed in the secure fuse from the

850
00:31:31,100 --> 00:31:34,400
seed we actually derive keys there are

851
00:31:34,400 --> 00:31:37,670
ways in the TPM specification to to

852
00:31:37,670 --> 00:31:40,970
recreate these keys it's called taking

853
00:31:40,970 --> 00:31:42,290
whenever there's this operation called

854
00:31:42,290 --> 00:31:44,480
taking TPM ownership taking DP an owner

855
00:31:44,480 --> 00:31:46,670
she basically tells the TPM forget all

856
00:31:46,670 --> 00:31:48,740
your keys okay so everything that they

857
00:31:48,740 --> 00:31:49,940
encrypted before you cannot decrypt

858
00:31:49,940 --> 00:31:51,830
anymore please generate new ones and

859
00:31:51,830 --> 00:31:54,920
that's done through a way in which you

860
00:31:54,920 --> 00:31:57,860
use that seed and some some counters

861
00:31:57,860 --> 00:31:59,300
that we keep in a sort of increment them

862
00:31:59,300 --> 00:32:02,000
if the seed were to be leaked outside of

863
00:32:02,000 --> 00:32:06,250
this TCB of the system we're done and

864
00:32:06,250 --> 00:32:08,840
you can definitely an decrypt everything

865
00:32:08,840 --> 00:32:12,920
that the TPM encrypts and hopefully you

866
00:32:12,920 --> 00:32:14,810
only so they're the way to link the key

867
00:32:14,810 --> 00:32:18,020
actually is by reading is by so the seed

868
00:32:18,020 --> 00:32:19,460
it's actually hard to read the seed

869
00:32:19,460 --> 00:32:20,870
using memory attacks but it's a lot

870
00:32:20,870 --> 00:32:22,429
easier to read the encryption keys music

871
00:32:22,429 --> 00:32:24,290
memory attacks and to clear that up you

872
00:32:24,290 --> 00:32:26,440
just take we take ownership of the TPM

873
00:32:26,440 --> 00:32:28,880
I'm sure it's possible to leave the seed

874
00:32:28,880 --> 00:32:29,210
some

875
00:32:29,210 --> 00:32:30,559
how it with some sophisticated attack

876
00:32:30,559 --> 00:32:32,539
and I'm not aware of anything that we do

877
00:32:32,539 --> 00:32:36,020
right now yeah there's one more question

878
00:32:36,020 --> 00:32:41,330
no sorry no sorry I wish but the whole

879
00:32:41,330 --> 00:32:43,309
point of a conference is this is not me

880
00:32:43,309 --> 00:32:44,929
talking is them talking well you should

881
00:32:44,929 --> 00:32:47,470
have talked less

882
00:32:55,259 --> 00:32:58,440
thank you

