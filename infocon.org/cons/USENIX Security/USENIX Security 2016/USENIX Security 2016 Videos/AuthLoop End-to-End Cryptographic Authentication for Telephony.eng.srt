1
00:00:10,880 --> 00:00:12,559
morning everyone i'm excited to be here

2
00:00:12,559 --> 00:00:14,559
at uznix to tell you about our latest

3
00:00:14,559 --> 00:00:17,119
work authenticating phone calls i'm brad

4
00:00:17,119 --> 00:00:19,039
reeves and this is joint work with my

5
00:00:19,039 --> 00:00:21,039
colleagues at the university of florida

6
00:00:21,039 --> 00:00:24,160
logan blue and patrick traynor

7
00:00:24,160 --> 00:00:26,000
so i want to start by pointing out that

8
00:00:26,000 --> 00:00:28,640
we really trust telephones as a society

9
00:00:28,640 --> 00:00:30,880
especially as a backup and trusted

10
00:00:30,880 --> 00:00:33,280
platform when other things go wrong so

11
00:00:33,280 --> 00:00:34,880
for example when you lose access to an

12
00:00:34,880 --> 00:00:37,040
account many times you'll have to call

13
00:00:37,040 --> 00:00:40,320
companies to have them reset a password

14
00:00:40,320 --> 00:00:42,000
but it goes deeper than that

15
00:00:42,000 --> 00:00:44,399
when the internet goes down especially

16
00:00:44,399 --> 00:00:47,200
between uh two peering networks no

17
00:00:47,200 --> 00:00:48,879
network operators have no other option

18
00:00:48,879 --> 00:00:51,280
but to pick up the phone uh to call each

19
00:00:51,280 --> 00:00:53,760
other and coordinate a response

20
00:00:53,760 --> 00:00:55,280
and this is also true in critical

21
00:00:55,280 --> 00:00:57,120
infrastructure so when there is an

22
00:00:57,120 --> 00:00:59,280
anomaly in the power grid uh that can't

23
00:00:59,280 --> 00:01:01,520
be dealt with automatically uh power

24
00:01:01,520 --> 00:01:02,879
plant operators have to pick up the

25
00:01:02,879 --> 00:01:04,640
phone and call each other even though

26
00:01:04,640 --> 00:01:07,040
they may not have ever met uh in order

27
00:01:07,040 --> 00:01:09,280
to keep the power on

28
00:01:09,280 --> 00:01:10,080
now

29
00:01:10,080 --> 00:01:12,159
uh we should all be concerned about this

30
00:01:12,159 --> 00:01:13,840
because phones are not the most

31
00:01:13,840 --> 00:01:16,320
trustworthy network uh so for example

32
00:01:16,320 --> 00:01:18,320
for an example uh i've got two calls

33
00:01:18,320 --> 00:01:19,680
here on this slide

34
00:01:19,680 --> 00:01:22,159
one of these is from bank of america and

35
00:01:22,159 --> 00:01:23,759
the other is from a fishing group in

36
00:01:23,759 --> 00:01:24,880
europe

37
00:01:24,880 --> 00:01:26,799
uh now can anyone in this room

38
00:01:26,799 --> 00:01:30,080
distinguish which is which

39
00:01:30,720 --> 00:01:32,799
uh i don't i didn't think so uh in fact

40
00:01:32,799 --> 00:01:35,439
i can't tell uh and in fact

41
00:01:35,439 --> 00:01:38,400
uh in general neither carriers nor end

42
00:01:38,400 --> 00:01:40,880
users can provide any guarantees about

43
00:01:40,880 --> 00:01:43,040
who is on a call not even your carrier

44
00:01:43,040 --> 00:01:45,040
can tell the difference

45
00:01:45,040 --> 00:01:47,759
and as a consequence faking caller id is

46
00:01:47,759 --> 00:01:50,079
really easy in fact there's even apps

47
00:01:50,079 --> 00:01:52,000
for this uh

48
00:01:52,000 --> 00:01:52,960
and so

49
00:01:52,960 --> 00:01:55,119
what's at the root of this problem uh

50
00:01:55,119 --> 00:01:58,399
why is this the case why is this so easy

51
00:01:58,399 --> 00:02:00,479
and it has to do with the way that we've

52
00:02:00,479 --> 00:02:03,280
built the phone network

53
00:02:03,280 --> 00:02:06,399
and so to really uh identify the the

54
00:02:06,399 --> 00:02:08,639
features of the phone network that uh

55
00:02:08,639 --> 00:02:10,720
are relevant to this problem uh let's

56
00:02:10,720 --> 00:02:13,200
take a look at a phone call uh when my

57
00:02:13,200 --> 00:02:15,200
when bank of america calls me for

58
00:02:15,200 --> 00:02:18,000
example so uh bank of america may make a

59
00:02:18,000 --> 00:02:21,120
call to me from a voip-based call center

60
00:02:21,120 --> 00:02:22,879
their call is going to be delivered to

61
00:02:22,879 --> 00:02:26,080
their voip carrier into an intermediate

62
00:02:26,080 --> 00:02:27,920
kind of like a long distance provider

63
00:02:27,920 --> 00:02:28,959
network

64
00:02:28,959 --> 00:02:31,040
finally to my cellular provider and then

65
00:02:31,040 --> 00:02:33,360
finally to my phone

66
00:02:33,360 --> 00:02:34,319
now

67
00:02:34,319 --> 00:02:36,640
let's look at what happens along the way

68
00:02:36,640 --> 00:02:37,440
so

69
00:02:37,440 --> 00:02:39,120
uh the most important thing that's

70
00:02:39,120 --> 00:02:41,280
happening for the purposes of this talk

71
00:02:41,280 --> 00:02:43,760
is that identity is asserted not

72
00:02:43,760 --> 00:02:46,560
attested at every network boundary

73
00:02:46,560 --> 00:02:49,680
so when uh when the call leaves the voip

74
00:02:49,680 --> 00:02:51,360
carrier and goes into the long distance

75
00:02:51,360 --> 00:02:54,000
network uh the voip carrier says this is

76
00:02:54,000 --> 00:02:55,440
a call from a bit a phone number

77
00:02:55,440 --> 00:02:58,400
belonging to bank of america and the uh

78
00:02:58,400 --> 00:03:00,400
long distance carrier has no way of

79
00:03:00,400 --> 00:03:02,959
actually affirming that this is actually

80
00:03:02,959 --> 00:03:05,760
uh with the origin the origin of the

81
00:03:05,760 --> 00:03:07,680
call

82
00:03:07,680 --> 00:03:09,920
so what this means is that effectively

83
00:03:09,920 --> 00:03:11,840
we can't have authentication of id in

84
00:03:11,840 --> 00:03:13,519
this network

85
00:03:13,519 --> 00:03:15,280
second thing that happens is that the

86
00:03:15,280 --> 00:03:17,680
signaling protocols change so these

87
00:03:17,680 --> 00:03:20,000
networks are not only can they not ask

88
00:03:20,000 --> 00:03:21,519
each other about identity in a strong

89
00:03:21,519 --> 00:03:23,360
way they're not even speaking the same

90
00:03:23,360 --> 00:03:25,680
language and so what this means is that

91
00:03:25,680 --> 00:03:28,879
uh this problem of identity

92
00:03:28,879 --> 00:03:31,599
is really really hard

93
00:03:31,599 --> 00:03:33,200
now and the third thing that happens for

94
00:03:33,200 --> 00:03:35,200
the purposes of this talk is that the

95
00:03:35,200 --> 00:03:37,760
way the audio is represented digitally

96
00:03:37,760 --> 00:03:39,599
especially in terms of how the audio is

97
00:03:39,599 --> 00:03:41,840
compressed uh it's going to often

98
00:03:41,840 --> 00:03:44,400
changes at network boundaries

99
00:03:44,400 --> 00:03:46,400
and this is uh going to be important

100
00:03:46,400 --> 00:03:48,560
later on in the talk

101
00:03:48,560 --> 00:03:49,840
now

102
00:03:49,840 --> 00:03:51,200
one key idea i want you to take from

103
00:03:51,200 --> 00:03:53,519
this slide is that all of these tran

104
00:03:53,519 --> 00:03:56,560
networks are able to transmit voice into

105
00:03:56,560 --> 00:03:59,439
end but otherwise they effectively share

106
00:03:59,439 --> 00:04:01,840
no other way of transmitting data into

107
00:04:01,840 --> 00:04:04,720
end so between bank of america and my

108
00:04:04,720 --> 00:04:07,200
phone the only thing that is uh

109
00:04:07,200 --> 00:04:09,439
transferred and delivered reliably

110
00:04:09,439 --> 00:04:13,439
is the is the call audio itself

111
00:04:13,439 --> 00:04:15,760
now uh this isn't the first network that

112
00:04:15,760 --> 00:04:17,040
we've ever looked at that had

113
00:04:17,040 --> 00:04:18,880
authentication problems uh we saw this

114
00:04:18,880 --> 00:04:20,798
in the early days of the web

115
00:04:20,798 --> 00:04:22,800
and uh the fine folks at netscape and

116
00:04:22,800 --> 00:04:24,400
some others uh developed the secure

117
00:04:24,400 --> 00:04:27,120
sockets layer and now known as tls just

118
00:04:27,120 --> 00:04:29,600
to deal with this problem

119
00:04:29,600 --> 00:04:31,759
now tls of course doesn't solve all

120
00:04:31,759 --> 00:04:34,560
authentication problems uh in particular

121
00:04:34,560 --> 00:04:37,120
when uh when you visit amazon.com you're

122
00:04:37,120 --> 00:04:40,160
using tls to authenticate amazon but

123
00:04:40,160 --> 00:04:42,240
amazon doesn't necessarily use tls to

124
00:04:42,240 --> 00:04:43,919
authenticate you

125
00:04:43,919 --> 00:04:46,560
uh nevertheless tls has been a wild

126
00:04:46,560 --> 00:04:48,160
success in that it's made um

127
00:04:48,160 --> 00:04:50,240
cryptographic verification of well-known

128
00:04:50,240 --> 00:04:53,520
parties uh commonplace

129
00:04:53,520 --> 00:04:54,240
and

130
00:04:54,240 --> 00:04:55,759
so in this paper

131
00:04:55,759 --> 00:04:57,440
we're aiming to bring end-to-end

132
00:04:57,440 --> 00:04:59,919
explicit authentication uh to phone

133
00:04:59,919 --> 00:05:00,880
calls

134
00:05:00,880 --> 00:05:03,840
much in the same way that uh tls brought

135
00:05:03,840 --> 00:05:05,600
authentication of well-known parties to

136
00:05:05,600 --> 00:05:06,800
the web

137
00:05:06,800 --> 00:05:09,039
uh and the system uh that we built is

138
00:05:09,039 --> 00:05:10,639
called off loop

139
00:05:10,639 --> 00:05:12,880
and the question the system answers is

140
00:05:12,880 --> 00:05:15,280
can we get some guarantee that the real

141
00:05:15,280 --> 00:05:19,359
bank of america for example is calling

142
00:05:19,840 --> 00:05:21,759
so off loop authenticates costs

143
00:05:21,759 --> 00:05:24,000
cryptographically and end to end for the

144
00:05:24,000 --> 00:05:26,160
existing phone network through the voice

145
00:05:26,160 --> 00:05:29,039
channel so this is a long sentence so uh

146
00:05:29,039 --> 00:05:30,560
let's unpack it

147
00:05:30,560 --> 00:05:32,639
so by authenticating calls we mean that

148
00:05:32,639 --> 00:05:34,479
all fleet provides strong identity

149
00:05:34,479 --> 00:05:37,039
claims for every call made between two

150
00:05:37,039 --> 00:05:38,960
parties

151
00:05:38,960 --> 00:05:40,400
it does so cryptographically using

152
00:05:40,400 --> 00:05:43,360
strong cryptography uh not heuristics or

153
00:05:43,360 --> 00:05:45,360
uh shared knowledge uh things like

154
00:05:45,360 --> 00:05:46,880
having to play 20 questions when you

155
00:05:46,880 --> 00:05:48,400
pick up the phone

156
00:05:48,400 --> 00:05:51,360
uh it does so end to end making the

157
00:05:51,360 --> 00:05:53,120
phones themselves the authenticating

158
00:05:53,120 --> 00:05:55,520
parties not the network

159
00:05:55,520 --> 00:05:57,199
and it does so it with the existing

160
00:05:57,199 --> 00:05:58,960
phone network so it can be used with all

161
00:05:58,960 --> 00:06:02,800
telephones landline cellular and voip

162
00:06:02,800 --> 00:06:05,600
and it does so uh using the call audio

163
00:06:05,600 --> 00:06:08,160
uh not the signaling channels that are

164
00:06:08,160 --> 00:06:10,479
often lost between networks

165
00:06:10,479 --> 00:06:12,880
and so what this means is that uh this

166
00:06:12,880 --> 00:06:14,720
offload is reverse compatible and

167
00:06:14,720 --> 00:06:17,120
network agnostic so no changes have to

168
00:06:17,120 --> 00:06:18,400
be made to the existing phone network

169
00:06:18,400 --> 00:06:19,759
for offline

170
00:06:19,759 --> 00:06:21,360
now i do want to contrast this uh with

171
00:06:21,360 --> 00:06:23,199
one other solution uh that many people

172
00:06:23,199 --> 00:06:26,080
use um there are apps like z phone or

173
00:06:26,080 --> 00:06:28,560
signal that provide authenticated uh

174
00:06:28,560 --> 00:06:31,360
end-to-end voip calls but these are voip

175
00:06:31,360 --> 00:06:34,080
only and uh they you cannot use these

176
00:06:34,080 --> 00:06:36,800
apps to make calls to uh users that

177
00:06:36,800 --> 00:06:40,319
aren't using those particular systems

178
00:06:40,319 --> 00:06:43,199
so to build offloop we had to solve two

179
00:06:43,199 --> 00:06:44,639
big problems

180
00:06:44,639 --> 00:06:46,720
the first of which is how we how to

181
00:06:46,720 --> 00:06:48,240
actually send data through the voice

182
00:06:48,240 --> 00:06:49,680
channel to conduct a cryptographic

183
00:06:49,680 --> 00:06:50,880
handshake

184
00:06:50,880 --> 00:06:53,120
the second of these is how to ensure a

185
00:06:53,120 --> 00:06:55,520
secure efficient authentication protocol

186
00:06:55,520 --> 00:06:56,800
for that channel

187
00:06:56,800 --> 00:06:58,560
now let's look at the first channel the

188
00:06:58,560 --> 00:07:00,639
first problem sending data through the

189
00:07:00,639 --> 00:07:03,599
voice channel now most of you at some

190
00:07:03,599 --> 00:07:04,960
point in your life have used something

191
00:07:04,960 --> 00:07:08,240
that looks like this a voice modem

192
00:07:08,240 --> 00:07:10,080
and

193
00:07:10,080 --> 00:07:12,319
these systems were great for the time in

194
00:07:12,319 --> 00:07:13,680
which they were used

195
00:07:13,680 --> 00:07:16,240
but they're not sufficient for modern

196
00:07:16,240 --> 00:07:17,919
telephone systems

197
00:07:17,919 --> 00:07:19,599
because modern telephone systems the one

198
00:07:19,599 --> 00:07:22,000
that we nearly all of us use every day

199
00:07:22,000 --> 00:07:24,639
are typically voip or cellular and they

200
00:07:24,639 --> 00:07:27,280
heavily compress the call audio

201
00:07:27,280 --> 00:07:28,400
and so

202
00:07:28,400 --> 00:07:29,680
this presents a problem for a

203
00:07:29,680 --> 00:07:31,680
transmitting data and so let's take a

204
00:07:31,680 --> 00:07:33,120
look why

205
00:07:33,120 --> 00:07:33,919
uh

206
00:07:33,919 --> 00:07:36,080
it's because these codecs

207
00:07:36,080 --> 00:07:38,240
that are used to compress the audio are

208
00:07:38,240 --> 00:07:41,840
heavily optimized for voice

209
00:07:41,840 --> 00:07:44,400
not for any other kind of data and so to

210
00:07:44,400 --> 00:07:46,160
reduce the the

211
00:07:46,160 --> 00:07:48,879
bandwidth of the channel they throw out

212
00:07:48,879 --> 00:07:50,639
anything that's unlikely to be related

213
00:07:50,639 --> 00:07:51,840
to voice

214
00:07:51,840 --> 00:07:54,319
and so uh trying to send anything that

215
00:07:54,319 --> 00:07:56,479
uh doesn't look like a voice sounds

216
00:07:56,479 --> 00:07:58,240
awful and so i've got a couple of

217
00:07:58,240 --> 00:08:00,000
examples for you this first one i'm

218
00:08:00,000 --> 00:08:01,919
going to play a little bit of audio

219
00:08:01,919 --> 00:08:04,000
uh and if you've ever been stuck on hold

220
00:08:04,000 --> 00:08:05,840
this is going to sound familiar

221
00:08:05,840 --> 00:08:08,080
so this is a guitar

222
00:08:08,080 --> 00:08:12,039
just strumming a couple of chords

223
00:08:12,560 --> 00:08:14,400
now let's take let's listen to what

224
00:08:14,400 --> 00:08:16,080
happens when we encode it with amr

225
00:08:16,080 --> 00:08:17,440
narrow band one of the most popular

226
00:08:17,440 --> 00:08:20,319
cellular codecs

227
00:08:21,360 --> 00:08:22,960
sound familiar

228
00:08:22,960 --> 00:08:25,440
i hope i hope i didn't give anybody a

229
00:08:25,440 --> 00:08:27,039
little anxiety there

230
00:08:27,039 --> 00:08:29,599
but we can see that uh you see that how

231
00:08:29,599 --> 00:08:32,399
anything isn't voice is terribly uh

232
00:08:32,399 --> 00:08:33,760
distorted

233
00:08:33,760 --> 00:08:35,440
and this has significant implications

234
00:08:35,440 --> 00:08:37,360
for trying to actually send data over

235
00:08:37,360 --> 00:08:39,200
the voice channel so i've got another

236
00:08:39,200 --> 00:08:41,200
graphic example here uh what we've done

237
00:08:41,200 --> 00:08:43,360
in the uh in the top graph

238
00:08:43,360 --> 00:08:46,240
is uh sweep across the frequency band

239
00:08:46,240 --> 00:08:49,920
from uh 300 to 3300 hertz so these are

240
00:08:49,920 --> 00:08:51,519
all the frequencies that phone systems

241
00:08:51,519 --> 00:08:53,200
are supposed to support

242
00:08:53,200 --> 00:08:54,880
and then we've encoded it using amr

243
00:08:54,880 --> 00:08:56,240
narrowband

244
00:08:56,240 --> 00:08:58,560
as you can see the beginning and end of

245
00:08:58,560 --> 00:08:59,360
the

246
00:08:59,360 --> 00:09:00,880
audio is clipped

247
00:09:00,880 --> 00:09:03,519
it cuts out in the middle the amplitude

248
00:09:03,519 --> 00:09:05,760
changes erratically and what you can't

249
00:09:05,760 --> 00:09:08,480
see from the from this view is that uh

250
00:09:08,480 --> 00:09:10,560
both the frequency and phase information

251
00:09:10,560 --> 00:09:12,800
is also heavily distorted

252
00:09:12,800 --> 00:09:15,040
and so what this means is that uh nearly

253
00:09:15,040 --> 00:09:16,480
all of the techniques that were

254
00:09:16,480 --> 00:09:18,880
developed by voice modem engineers over

255
00:09:18,880 --> 00:09:21,519
decades go out the window because

256
00:09:21,519 --> 00:09:22,480
amplitude

257
00:09:22,480 --> 00:09:25,200
isn't preserved phases uh information is

258
00:09:25,200 --> 00:09:27,600
lost and frequency is distorted

259
00:09:27,600 --> 00:09:29,760
so how are we going to send data through

260
00:09:29,760 --> 00:09:32,560
these awful channels

261
00:09:32,560 --> 00:09:34,880
and the solution is to encode data as

262
00:09:34,880 --> 00:09:37,839
changes in frequency so we represent

263
00:09:37,839 --> 00:09:40,080
data using one of three frequencies one

264
00:09:40,080 --> 00:09:41,680
two and three k hertz

265
00:09:41,680 --> 00:09:44,640
and encode zeros and ones as an increase

266
00:09:44,640 --> 00:09:46,640
or decrease in these frequencies because

267
00:09:46,640 --> 00:09:48,480
we've only got a few of these we have to

268
00:09:48,480 --> 00:09:50,160
use a manchester encoding to make sure

269
00:09:50,160 --> 00:09:52,959
that to limit run links um and that cuts

270
00:09:52,959 --> 00:09:55,040
down on our

271
00:09:55,040 --> 00:09:56,320
bandwidth

272
00:09:56,320 --> 00:09:57,680
and we also have to do things like

273
00:09:57,680 --> 00:09:59,519
transmitting uh constant frequency

274
00:09:59,519 --> 00:10:02,320
headers to deal with things like uh

275
00:10:02,320 --> 00:10:04,720
that if you know what that is uh but the

276
00:10:04,720 --> 00:10:07,200
punchline of all this is that uh we can

277
00:10:07,200 --> 00:10:09,839
give approximately 500 bits per second

278
00:10:09,839 --> 00:10:12,800
good put in the best case it's only 500

279
00:10:12,800 --> 00:10:14,480
bits if you want to send a text message

280
00:10:14,480 --> 00:10:16,800
it's going to take a few seconds

281
00:10:16,800 --> 00:10:17,519
uh

282
00:10:17,519 --> 00:10:20,880
and so uh we evaluated our model and uh

283
00:10:20,880 --> 00:10:23,120
we sent a hundred frames containing 2000

284
00:10:23,120 --> 00:10:24,800
bits each that's um bigger than the

285
00:10:24,800 --> 00:10:26,079
largest message that we needed for

286
00:10:26,079 --> 00:10:27,519
offload

287
00:10:27,519 --> 00:10:29,680
and uh we tested it across landline

288
00:10:29,680 --> 00:10:31,680
cellular and void codecs and what we

289
00:10:31,680 --> 00:10:33,600
found was that our average bit error was

290
00:10:33,600 --> 00:10:37,760
between uh zero and point five percent

291
00:10:37,760 --> 00:10:39,200
uh now for the channel that we're

292
00:10:39,200 --> 00:10:41,040
working for and the data rates that

293
00:10:41,040 --> 00:10:42,640
we're able to achieve this is actually

294
00:10:42,640 --> 00:10:44,160
pretty good

295
00:10:44,160 --> 00:10:46,079
but uh students of networking will know

296
00:10:46,079 --> 00:10:48,560
that uh where you have bit errors you

297
00:10:48,560 --> 00:10:50,720
require a good link layer to help you

298
00:10:50,720 --> 00:10:51,839
deal with them

299
00:10:51,839 --> 00:10:53,440
and unfortunately we couldn't pull

300
00:10:53,440 --> 00:10:55,519
anything off the shelf because uh we

301
00:10:55,519 --> 00:10:57,839
can't use common tricks like

302
00:10:57,839 --> 00:10:58,640
uh

303
00:10:58,640 --> 00:11:00,720
like headers or using uh sequence

304
00:11:00,720 --> 00:11:03,519
numbers or using long uh checksums

305
00:11:03,519 --> 00:11:05,120
because we just don't have the bandwidth

306
00:11:05,120 --> 00:11:06,240
at 500

307
00:11:06,240 --> 00:11:07,760
bits per second

308
00:11:07,760 --> 00:11:10,240
and so uh what we do is we actually take

309
00:11:10,240 --> 00:11:13,120
each uh frame break it into 32-bit

310
00:11:13,120 --> 00:11:16,720
blocks uh containing 29 uh 29 bits of

311
00:11:16,720 --> 00:11:20,320
data and a and a short 3-bit crc

312
00:11:20,320 --> 00:11:21,920
and we did a lot of math to find the

313
00:11:21,920 --> 00:11:23,519
optimal value of these parameters by the

314
00:11:23,519 --> 00:11:24,560
way

315
00:11:24,560 --> 00:11:27,680
and we send and acknowledge each block

316
00:11:27,680 --> 00:11:30,000
explicitly and retransmit each of these

317
00:11:30,000 --> 00:11:32,560
little blocks until the full frame is uh

318
00:11:32,560 --> 00:11:34,959
recovered at the end

319
00:11:34,959 --> 00:11:37,120
now uh because we're using uh very short

320
00:11:37,120 --> 00:11:40,320
crcs um there's about a 1.3 percent

321
00:11:40,320 --> 00:11:42,480
chance per frame that the layer two

322
00:11:42,480 --> 00:11:44,480
won't detect a bit error

323
00:11:44,480 --> 00:11:46,560
uh now we did the math and it turns out

324
00:11:46,560 --> 00:11:48,079
that if you're working at a call center

325
00:11:48,079 --> 00:11:49,920
40 hours a week uh this is going to

326
00:11:49,920 --> 00:11:52,639
affect you about once every two weeks

327
00:11:52,639 --> 00:11:54,639
so uh it's not going to be a major

328
00:11:54,639 --> 00:11:56,240
problem for the adoption of of this

329
00:11:56,240 --> 00:11:58,320
system

330
00:11:58,320 --> 00:11:59,839
now this link layer because we

331
00:11:59,839 --> 00:12:01,680
retransmit until a frame is completely

332
00:12:01,680 --> 00:12:03,519
received it's heavily dependent on the

333
00:12:03,519 --> 00:12:06,240
bit error rate uh but fortunately the

334
00:12:06,240 --> 00:12:07,760
performance is good for the error rates

335
00:12:07,760 --> 00:12:09,600
that we see in practice so for the

336
00:12:09,600 --> 00:12:11,040
typical error rates that we're working

337
00:12:11,040 --> 00:12:12,720
with we get

338
00:12:12,720 --> 00:12:15,360
a little under our optimal value of 400

339
00:12:15,360 --> 00:12:18,480
bits or 500 bits per second

340
00:12:18,480 --> 00:12:19,200
so

341
00:12:19,200 --> 00:12:20,720
now that we've uh now that we've got a

342
00:12:20,720 --> 00:12:22,880
way of sending data to the channel

343
00:12:22,880 --> 00:12:24,240
i told you that what we wanted was

344
00:12:24,240 --> 00:12:26,480
something like tls for the phone network

345
00:12:26,480 --> 00:12:29,279
so why don't we just use tls

346
00:12:29,279 --> 00:12:31,279
and the answer is that uh trying to do

347
00:12:31,279 --> 00:12:33,600
tls in this channel is going to be way

348
00:12:33,600 --> 00:12:34,800
too slow

349
00:12:34,800 --> 00:12:37,279
so um we took a look at some

350
00:12:37,279 --> 00:12:39,200
representative tls handshakes from

351
00:12:39,200 --> 00:12:42,000
common websites uh and it turns out that

352
00:12:42,000 --> 00:12:42,880
um

353
00:12:42,880 --> 00:12:44,800
in the best case uh you'd be looking at

354
00:12:44,800 --> 00:12:48,240
an average of a 97 second authentication

355
00:12:48,240 --> 00:12:49,440
i don't know about you but i'm

356
00:12:49,440 --> 00:12:51,040
completely unwilling to wait a minute

357
00:12:51,040 --> 00:12:53,440
and a half to authenticate a phone call

358
00:12:53,440 --> 00:12:55,839
so what we need is a protocol with the

359
00:12:55,839 --> 00:12:59,120
guarantees of tls 1.2 but a fraction of

360
00:12:59,120 --> 00:13:00,720
the bandwidth requirement

361
00:13:00,720 --> 00:13:01,519
so

362
00:13:01,519 --> 00:13:03,760
we need we took tls and slimmed it down

363
00:13:03,760 --> 00:13:05,519
and we started by acknowledging the

364
00:13:05,519 --> 00:13:07,680
things that we absolutely needed

365
00:13:07,680 --> 00:13:09,040
so and the first of which is

366
00:13:09,040 --> 00:13:11,120
cryptographic attestation of identity

367
00:13:11,120 --> 00:13:13,279
because that's the whole point of off

368
00:13:13,279 --> 00:13:14,399
loop

369
00:13:14,399 --> 00:13:16,560
now because we're doing this in a

370
00:13:16,560 --> 00:13:18,720
situation where

371
00:13:18,720 --> 00:13:20,480
for example landlines may not have

372
00:13:20,480 --> 00:13:22,480
access to an auxiliary data channel we

373
00:13:22,480 --> 00:13:25,440
need a way to certify identity of new

374
00:13:25,440 --> 00:13:26,480
parties

375
00:13:26,480 --> 00:13:29,200
uh in band and so what that's going to

376
00:13:29,200 --> 00:13:30,560
neces

377
00:13:30,560 --> 00:13:34,240
that makes necessary a a pki uh and

378
00:13:34,240 --> 00:13:36,000
we're going to talk about what a pki in

379
00:13:36,000 --> 00:13:37,920
this situation or in this scenario is

380
00:13:37,920 --> 00:13:39,600
going to look like uh towards the end of

381
00:13:39,600 --> 00:13:41,440
this talk

382
00:13:41,440 --> 00:13:43,120
the second thing that we need are tests

383
00:13:43,120 --> 00:13:45,279
for freshness and liveness

384
00:13:45,279 --> 00:13:47,279
now by freshness uh we're of course

385
00:13:47,279 --> 00:13:49,040
referring to uh protection against

386
00:13:49,040 --> 00:13:50,959
things like replay attacks

387
00:13:50,959 --> 00:13:53,680
uh liveness though is uh is a bit unique

388
00:13:53,680 --> 00:13:55,839
for this scenario because what we want

389
00:13:55,839 --> 00:13:57,839
to ensure is that uh when you

390
00:13:57,839 --> 00:13:59,600
authenticate a phone call

391
00:13:59,600 --> 00:14:02,240
you can actually ensure that as the call

392
00:14:02,240 --> 00:14:04,079
progresses you're still communicating

393
00:14:04,079 --> 00:14:05,519
with the party that you originally

394
00:14:05,519 --> 00:14:08,079
authenticated with even for example if

395
00:14:08,079 --> 00:14:10,320
you're if you call a call center and

396
00:14:10,320 --> 00:14:11,600
they happen to transfer you to a

397
00:14:11,600 --> 00:14:13,600
different apartment which happens often

398
00:14:13,600 --> 00:14:15,600
as we all know

399
00:14:15,600 --> 00:14:17,760
the third thing that we need is a shared

400
00:14:17,760 --> 00:14:19,760
secret establishment

401
00:14:19,760 --> 00:14:21,839
and there's a few reasons for this uh

402
00:14:21,839 --> 00:14:23,279
one reason is that it helps with our

403
00:14:23,279 --> 00:14:26,079
liveness tests but it also gives us some

404
00:14:26,079 --> 00:14:29,040
additional features so right now users

405
00:14:29,040 --> 00:14:30,480
are often accustomed

406
00:14:30,480 --> 00:14:32,560
when they call a phone number to

407
00:14:32,560 --> 00:14:35,600
sometimes entering a pin to authenticate

408
00:14:35,600 --> 00:14:37,120
and what this allows us to do is

409
00:14:37,120 --> 00:14:39,279
actually send small amounts of sensitive

410
00:14:39,279 --> 00:14:41,519
data things like a pin

411
00:14:41,519 --> 00:14:44,399
or perhaps a social security number

412
00:14:44,399 --> 00:14:46,880
encrypted through the voice channel so

413
00:14:46,880 --> 00:14:50,160
you onslap would enable applications for

414
00:14:50,160 --> 00:14:51,760
example of you being able to send

415
00:14:51,760 --> 00:14:53,680
sensitive data to a call center without

416
00:14:53,680 --> 00:14:55,279
the call center representative having

417
00:14:55,279 --> 00:14:56,959
access to it

418
00:14:56,959 --> 00:14:58,560
now of course we can't have everything

419
00:14:58,560 --> 00:14:59,680
and so there's some things that we have

420
00:14:59,680 --> 00:15:00,959
to live without

421
00:15:00,959 --> 00:15:04,160
uh the first of which is um is rsa in

422
00:15:04,160 --> 00:15:06,480
favor of elliptic curve cryptography

423
00:15:06,480 --> 00:15:08,880
um and we also uh truncate our hmacs to

424
00:15:08,880 --> 00:15:10,720
reduce transmission time now we checked

425
00:15:10,720 --> 00:15:13,519
with the nes standards and

426
00:15:13,519 --> 00:15:15,600
we found that 80 bits was going to be

427
00:15:15,600 --> 00:15:18,240
sufficient for this application

428
00:15:18,240 --> 00:15:19,920
second thing what we had to live without

429
00:15:19,920 --> 00:15:23,040
was a cipher agreement as a handshake

430
00:15:23,040 --> 00:15:26,560
step instead we choose safe defaults and

431
00:15:26,560 --> 00:15:29,120
use version numbers in case we need to

432
00:15:29,120 --> 00:15:32,560
use stronger cryptography in the future

433
00:15:32,560 --> 00:15:34,240
the third thing that we do away with is

434
00:15:34,240 --> 00:15:36,639
uh things like the tls record protocol

435
00:15:36,639 --> 00:15:38,000
so if you're not familiar with the

436
00:15:38,000 --> 00:15:40,240
details of tls it actually has its own

437
00:15:40,240 --> 00:15:42,720
sort of application layer protocol for

438
00:15:42,720 --> 00:15:44,160
handling messages

439
00:15:44,160 --> 00:15:46,160
between the socket layers so

440
00:15:46,160 --> 00:15:47,519
if you're familiar with the heartbeat

441
00:15:47,519 --> 00:15:49,519
message it's transmitted using a record

442
00:15:49,519 --> 00:15:50,880
protocol and that's just something that

443
00:15:50,880 --> 00:15:53,040
we don't need for our application

444
00:15:53,040 --> 00:15:55,040
so let's take a look at the protocol we

445
00:15:55,040 --> 00:15:56,160
settled on

446
00:15:56,160 --> 00:15:58,720
uh and this is uh this protocol is based

447
00:15:58,720 --> 00:16:01,360
on tls 1.2 key transport so if you're

448
00:16:01,360 --> 00:16:04,320
familiar with tls uh this is going to

449
00:16:04,320 --> 00:16:07,279
feel very familiar uh we did verify this

450
00:16:07,279 --> 00:16:09,360
new protocol with pro verif

451
00:16:09,360 --> 00:16:12,000
and so our setting is after a call is

452
00:16:12,000 --> 00:16:14,320
initiated we have two parties

453
00:16:14,320 --> 00:16:16,720
uh we term one the verifier and the

454
00:16:16,720 --> 00:16:18,560
other the approver and in the setting

455
00:16:18,560 --> 00:16:20,399
the approver is authenticating to the

456
00:16:20,399 --> 00:16:23,120
verifier so for example approver might

457
00:16:23,120 --> 00:16:24,480
be a call center

458
00:16:24,480 --> 00:16:26,720
so in the first two messages uh the

459
00:16:26,720 --> 00:16:28,959
prover and verifier both exchange nonces

460
00:16:28,959 --> 00:16:31,519
and identities and then uh the prover

461
00:16:31,519 --> 00:16:33,199
also sends a

462
00:16:33,199 --> 00:16:35,279
certificate

463
00:16:35,279 --> 00:16:38,160
in the third uh message uh the verifier

464
00:16:38,160 --> 00:16:41,279
generates a premaster secret based on

465
00:16:41,279 --> 00:16:44,720
the uh based on the nonces uh and sends

466
00:16:44,720 --> 00:16:47,040
that using the public key in the provers

467
00:16:47,040 --> 00:16:48,240
certificate

468
00:16:48,240 --> 00:16:50,800
uh it also uh uses the uh newly

469
00:16:50,800 --> 00:16:53,199
established session key to authenticate

470
00:16:53,199 --> 00:16:54,720
the first two messages

471
00:16:54,720 --> 00:16:56,720
and then in the final message the call

472
00:16:56,720 --> 00:16:59,440
center or approver rather responds with

473
00:16:59,440 --> 00:17:03,440
a uh mac uh with the new uh key that

474
00:17:03,440 --> 00:17:05,199
only uh someone in possession of the

475
00:17:05,199 --> 00:17:07,119
private key under which the premaster

476
00:17:07,119 --> 00:17:09,199
secret was sent could actually generate

477
00:17:09,199 --> 00:17:11,039
and authenticates the first two messages

478
00:17:11,039 --> 00:17:12,640
so at this point the handshake is

479
00:17:12,640 --> 00:17:14,880
complete the approver is authenticated

480
00:17:14,880 --> 00:17:16,559
and we've established a secret key all

481
00:17:16,559 --> 00:17:17,679
of the goals that we discussed on the

482
00:17:17,679 --> 00:17:18,959
previous slide

483
00:17:18,959 --> 00:17:23,679
except for one and that is uh freshness

484
00:17:23,679 --> 00:17:26,880
or liveness rather so uh to

485
00:17:26,880 --> 00:17:29,280
maintain liveness in the protocol we

486
00:17:29,280 --> 00:17:32,320
send periodic keep alive messages

487
00:17:32,320 --> 00:17:34,000
and these are just an hmac of an

488
00:17:34,000 --> 00:17:36,400
incrementing knots using the shared

489
00:17:36,400 --> 00:17:38,400
secret now these are going to be very

490
00:17:38,400 --> 00:17:40,160
short a fraction of a second and so they

491
00:17:40,160 --> 00:17:42,240
can be sent during natural pauses and

492
00:17:42,240 --> 00:17:44,080
conversation

493
00:17:44,080 --> 00:17:44,880
so

494
00:17:44,880 --> 00:17:47,440
this is great but how well does it work

495
00:17:47,440 --> 00:17:49,360
well on average it takes us nine seconds

496
00:17:49,360 --> 00:17:50,960
to do a full handshake but if we're

497
00:17:50,960 --> 00:17:52,720
authenticating with a parted partner

498
00:17:52,720 --> 00:17:54,320
that we've uh

499
00:17:54,320 --> 00:17:57,520
already uh established a certificate for

500
00:17:57,520 --> 00:17:59,280
we can cash the certificate and do it in

501
00:17:59,280 --> 00:18:01,200
about five seconds

502
00:18:01,200 --> 00:18:02,320
and so

503
00:18:02,320 --> 00:18:04,799
uh what this means is that uh we've

504
00:18:04,799 --> 00:18:06,720
reduced the time to authenticate from

505
00:18:06,720 --> 00:18:09,120
the original 97 seconds down to

506
00:18:09,120 --> 00:18:10,640
somewhere between not five and nine

507
00:18:10,640 --> 00:18:12,000
seconds

508
00:18:12,000 --> 00:18:13,520
so uh and i do want to point out that

509
00:18:13,520 --> 00:18:16,000
network transmission accounts for 99 of

510
00:18:16,000 --> 00:18:17,600
this time there's only really about 50

511
00:18:17,600 --> 00:18:19,840
milliseconds of computation happening uh

512
00:18:19,840 --> 00:18:21,520
in these numbers

513
00:18:21,520 --> 00:18:24,640
so i i did promise to talk about more

514
00:18:24,640 --> 00:18:26,000
about the fact that we're proposing a

515
00:18:26,000 --> 00:18:29,360
certificate infrastructure now um one of

516
00:18:29,360 --> 00:18:33,760
the reasons that um the pki for tls can

517
00:18:33,760 --> 00:18:36,400
be a little bit of a bit thorny at times

518
00:18:36,400 --> 00:18:38,080
is because certificate authorities are

519
00:18:38,080 --> 00:18:40,240
not in charge of actual identities like

520
00:18:40,240 --> 00:18:43,360
domains rfp addresses and so

521
00:18:43,360 --> 00:18:45,120
uh we actually think that the telephone

522
00:18:45,120 --> 00:18:47,280
system lends itself well to a model

523
00:18:47,280 --> 00:18:50,160
similar to our pki

524
00:18:50,160 --> 00:18:52,559
and so the idea is that

525
00:18:52,559 --> 00:18:55,440
the national or international body that

526
00:18:55,440 --> 00:18:57,520
establishes blocks of phone numbers in

527
00:18:57,520 --> 00:18:59,120
north america that's an organization

528
00:18:59,120 --> 00:19:02,559
called nampa can act as a route

529
00:19:02,559 --> 00:19:04,080
and establish

530
00:19:04,080 --> 00:19:07,120
carriers as certificate authorities

531
00:19:07,120 --> 00:19:08,720
and this has a number of advantages

532
00:19:08,720 --> 00:19:11,679
first of all the carriers

533
00:19:11,679 --> 00:19:13,679
not only manage numbers

534
00:19:13,679 --> 00:19:15,200
they have to authenticate their their

535
00:19:15,200 --> 00:19:17,280
customers when accounts are created and

536
00:19:17,280 --> 00:19:18,480
they also maintain a billing

537
00:19:18,480 --> 00:19:21,200
relationship so they have an ongoing

538
00:19:21,200 --> 00:19:23,360
connection to their customers and are in

539
00:19:23,360 --> 00:19:25,919
a strong position to actually uh

540
00:19:25,919 --> 00:19:28,320
definitively say that a particular phone

541
00:19:28,320 --> 00:19:31,440
number is owned by a particular entity

542
00:19:31,440 --> 00:19:33,360
now something else that's nice is that

543
00:19:33,360 --> 00:19:36,000
these blocks of public numbers are known

544
00:19:36,000 --> 00:19:38,080
publicly they're in a public database

545
00:19:38,080 --> 00:19:40,559
which carrier controls which number and

546
00:19:40,559 --> 00:19:41,919
so as a result

547
00:19:41,919 --> 00:19:44,080
we can when we see a phone number we can

548
00:19:44,080 --> 00:19:46,240
know which certificate authority or

549
00:19:46,240 --> 00:19:48,880
carrier we expect to actually be

550
00:19:48,880 --> 00:19:50,559
sending the certificate for the call

551
00:19:50,559 --> 00:19:52,880
that we're receiving now uh we did the

552
00:19:52,880 --> 00:19:55,280
math and uh it turns out that we could

553
00:19:55,280 --> 00:19:58,400
easily store certificates for uh all of

554
00:19:58,400 --> 00:20:00,559
the carriers in the united states in a

555
00:20:00,559 --> 00:20:02,720
small amount of space about 100k

556
00:20:02,720 --> 00:20:05,280
and so what this means is that uh in off

557
00:20:05,280 --> 00:20:07,679
loop if we use a pki similar to the one

558
00:20:07,679 --> 00:20:10,000
we're proposing here we actually don't

559
00:20:10,000 --> 00:20:12,159
need long certificate chains just the

560
00:20:12,159 --> 00:20:14,960
certificate for the prover

561
00:20:14,960 --> 00:20:17,600
and so to sum up telephones are used for

562
00:20:17,600 --> 00:20:20,400
our most trusted communications but as

563
00:20:20,400 --> 00:20:22,159
we saw at the beginning we can't be sure

564
00:20:22,159 --> 00:20:23,520
who's calling

565
00:20:23,520 --> 00:20:25,039
now awesome solves this problem by

566
00:20:25,039 --> 00:20:27,039
providing end-to-end cryptographic

567
00:20:27,039 --> 00:20:28,480
authentication of phone calls through

568
00:20:28,480 --> 00:20:30,559
the voice channel and so what this means

569
00:20:30,559 --> 00:20:31,840
is that

570
00:20:31,840 --> 00:20:34,240
when bank of america calls we can know

571
00:20:34,240 --> 00:20:36,960
it's the bank and not the fishers

572
00:20:36,960 --> 00:20:38,400
and so with that uh thank you for your

573
00:20:38,400 --> 00:20:39,760
attention i'll be happy to take your

574
00:20:39,760 --> 00:20:40,810
questions

575
00:20:40,810 --> 00:20:47,679
[Applause]

576
00:20:47,679 --> 00:20:50,640
hi thanks i'm see you're seeking

577
00:20:50,640 --> 00:20:54,080
positions being fall 2017 as it happens

578
00:20:54,080 --> 00:20:56,000
we're always hiring at waterloo so

579
00:20:56,000 --> 00:20:57,679
anyway fantastic

580
00:20:57,679 --> 00:21:00,480
anyway um i have two quick questions so

581
00:21:00,480 --> 00:21:03,440
one the uh

582
00:21:03,440 --> 00:21:06,000
the cert chains you have the can you

583
00:21:06,000 --> 00:21:08,080
just flip back to that slide picturing

584
00:21:08,080 --> 00:21:09,120
yeah

585
00:21:09,120 --> 00:21:10,720
yeah that one right here

586
00:21:10,720 --> 00:21:12,080
yeah so

587
00:21:12,080 --> 00:21:13,360
um

588
00:21:13,360 --> 00:21:17,360
while carriers are assigned blocks

589
00:21:17,360 --> 00:21:19,760
as of like 10 years ago right there was

590
00:21:19,760 --> 00:21:22,240
number portability and that

591
00:21:22,240 --> 00:21:24,000
introduces a

592
00:21:24,000 --> 00:21:26,880
quite complicated redirection

593
00:21:26,880 --> 00:21:30,480
uh system where you have the in the

594
00:21:30,480 --> 00:21:31,679
cellular model you have the home

595
00:21:31,679 --> 00:21:33,120
location registered and the visitor

596
00:21:33,120 --> 00:21:36,000
location register how does that all work

597
00:21:36,000 --> 00:21:37,200
what a great question and this is

598
00:21:37,200 --> 00:21:38,559
something that uh we actually had a

599
00:21:38,559 --> 00:21:40,320
lively discussion about this last night

600
00:21:40,320 --> 00:21:41,520
because there's there's a couple of ways

601
00:21:41,520 --> 00:21:43,760
that you could handle uh portability

602
00:21:43,760 --> 00:21:45,360
the first point i want to make is that

603
00:21:45,360 --> 00:21:47,120
even though um

604
00:21:47,120 --> 00:21:50,640
numbers are ported the um so for example

605
00:21:50,640 --> 00:21:52,240
i actually have a ported number i use

606
00:21:52,240 --> 00:21:54,480
t-mobile now but i use but i have an att

607
00:21:54,480 --> 00:21:56,880
phone number even though my phone number

608
00:21:56,880 --> 00:21:59,280
uh even though my carrier is t-mobile

609
00:21:59,280 --> 00:22:01,840
it's um att who's actually responsible

610
00:22:01,840 --> 00:22:04,559
for administering my phone number so uh

611
00:22:04,559 --> 00:22:07,039
in a the simplest answer would be to do

612
00:22:07,039 --> 00:22:08,799
something like

613
00:22:08,799 --> 00:22:10,960
att would still be my certificate

614
00:22:10,960 --> 00:22:13,200
authority even though i have a t-mobile

615
00:22:13,200 --> 00:22:15,039
phone and that's who i pay for service

616
00:22:15,039 --> 00:22:16,559
but you said the

617
00:22:16,559 --> 00:22:18,159
there's the the important part is that

618
00:22:18,159 --> 00:22:19,919
there's a billing relationship which is

619
00:22:19,919 --> 00:22:22,559
no longer there right and so um you you

620
00:22:22,559 --> 00:22:24,320
know that would put a little bit of uh

621
00:22:24,320 --> 00:22:25,840
administrative onus because you might

622
00:22:25,840 --> 00:22:27,440
have to deal with two parties um

623
00:22:27,440 --> 00:22:29,919
something uh an alternative model that

624
00:22:29,919 --> 00:22:32,480
um that i've thought about is that you

625
00:22:32,480 --> 00:22:34,320
could actually um

626
00:22:34,320 --> 00:22:37,120
have the owner of the block perhaps

627
00:22:37,120 --> 00:22:40,799
stable the uh the certificate so uh i

628
00:22:40,799 --> 00:22:42,320
might have a certificate issued by my

629
00:22:42,320 --> 00:22:44,799
current carrier t-mobile uh and t-mobile

630
00:22:44,799 --> 00:22:46,559
when they issue the certificate would go

631
00:22:46,559 --> 00:22:48,880
to to a t and say yes t-mobile is

632
00:22:48,880 --> 00:22:50,400
currently administering this number and

633
00:22:50,400 --> 00:22:51,600
so you could handle number of

634
00:22:51,600 --> 00:22:55,039
portability offline um thirdly um the

635
00:22:55,039 --> 00:22:57,679
this issue of portability is is just a

636
00:22:57,679 --> 00:22:59,120
nice um

637
00:22:59,120 --> 00:23:01,360
it's kind of a little extra because if

638
00:23:01,360 --> 00:23:04,000
you can trust uh this the carriers to

639
00:23:04,000 --> 00:23:05,679
act as certificate authorities if you

640
00:23:05,679 --> 00:23:09,600
actually trust them and then um this is

641
00:23:09,600 --> 00:23:11,039
this is not the most critical part of

642
00:23:11,039 --> 00:23:12,799
the project right okay the other

643
00:23:12,799 --> 00:23:14,080
question is how

644
00:23:14,080 --> 00:23:16,000
um

645
00:23:16,000 --> 00:23:18,320
so you need software at both ends right

646
00:23:18,320 --> 00:23:19,679
yes so

647
00:23:19,679 --> 00:23:21,679
this isn't going to work with a bakelite

648
00:23:21,679 --> 00:23:22,720
phone

649
00:23:22,720 --> 00:23:25,039
so so the bake like phone is not my

650
00:23:25,039 --> 00:23:26,640
grandmother has one i'm i'm trying to

651
00:23:26,640 --> 00:23:28,720
get her to give it to me actually um so

652
00:23:28,720 --> 00:23:30,559
out of the box it's uh the bakelite

653
00:23:30,559 --> 00:23:33,120
phone is not going to work um

654
00:23:33,120 --> 00:23:35,120
now there's a lot of deployment models

655
00:23:35,120 --> 00:23:36,400
and we discussed this extensively in the

656
00:23:36,400 --> 00:23:37,679
paper i just didn't have time in the

657
00:23:37,679 --> 00:23:38,960
talk

658
00:23:38,960 --> 00:23:42,559
one one deployment model is perhaps

659
00:23:42,559 --> 00:23:44,320
creating a separate dongle that you just

660
00:23:44,320 --> 00:23:46,080
attached to the phone

661
00:23:46,080 --> 00:23:49,120
so this might go on the handset cable or

662
00:23:49,120 --> 00:23:51,279
in a mobile scenario uh you might

663
00:23:51,279 --> 00:23:53,440
actually have a little bluetooth dongle

664
00:23:53,440 --> 00:23:54,880
that just sits in your pocket and

665
00:23:54,880 --> 00:23:57,440
handles um handles all of the audio

666
00:23:57,440 --> 00:23:59,520
communication when the time comes

667
00:23:59,520 --> 00:24:01,679
because all you need for this is access

668
00:24:01,679 --> 00:24:04,720
to um the the voice channel right so

669
00:24:04,720 --> 00:24:07,039
like the old caller id boxes that you

670
00:24:07,039 --> 00:24:08,480
would put in line would now just

671
00:24:08,480 --> 00:24:10,720
authenticate when it shows exactly that

672
00:24:10,720 --> 00:24:12,480
it would be exactly something like that

673
00:24:12,480 --> 00:24:15,520
okay thanks thank you for the question

674
00:24:15,520 --> 00:24:17,760
i'll just reduce google i'm curious

675
00:24:17,760 --> 00:24:19,039
since you're

676
00:24:19,039 --> 00:24:21,360
since the actual voice isn't encrypted

677
00:24:21,360 --> 00:24:23,440
so it's not part of the cryptographic

678
00:24:23,440 --> 00:24:26,640
transit trends

679
00:24:26,720 --> 00:24:28,159
link

680
00:24:28,159 --> 00:24:30,559
is there a possibility for a fisher to

681
00:24:30,559 --> 00:24:32,880
contact you and forward all the

682
00:24:32,880 --> 00:24:34,880
cryptographic just the cryptographic

683
00:24:34,880 --> 00:24:36,799
protocol part to bank of america for

684
00:24:36,799 --> 00:24:38,320
authentication

685
00:24:38,320 --> 00:24:40,640
so um so this is a great question and we

686
00:24:40,640 --> 00:24:42,480
do discuss this extensively in the paper

687
00:24:42,480 --> 00:24:44,400
um this particular threat model the fact

688
00:24:44,400 --> 00:24:46,799
that this protocol does not authenticate

689
00:24:46,799 --> 00:24:48,240
the content of the call that's something

690
00:24:48,240 --> 00:24:50,720
we're looking at in future work but um

691
00:24:50,720 --> 00:24:53,520
to answer your question directly um it

692
00:24:53,520 --> 00:24:56,159
would be very difficult because uh

693
00:24:56,159 --> 00:24:58,480
because of our liveness test

694
00:24:58,480 --> 00:25:01,120
uh the fact that um it's expected that

695
00:25:01,120 --> 00:25:02,000
um

696
00:25:02,000 --> 00:25:03,520
that you'll be able to continually

697
00:25:03,520 --> 00:25:05,679
authenticate the other end even though

698
00:25:05,679 --> 00:25:08,159
you don't necessarily authenticate the

699
00:25:08,159 --> 00:25:10,240
call content the fact that they're still

700
00:25:10,240 --> 00:25:13,039
on the line is um is important and so if

701
00:25:13,039 --> 00:25:14,240
for example a fisher were doing

702
00:25:14,240 --> 00:25:16,320
something like a three-way call

703
00:25:16,320 --> 00:25:18,159
they would have to do a lot of

704
00:25:18,159 --> 00:25:20,559
gymnastics in the phone network to make

705
00:25:20,559 --> 00:25:23,760
an attack like that work

706
00:25:27,120 --> 00:25:29,039
very great talk uh the question i have

707
00:25:29,039 --> 00:25:31,919
is that the phone itself when it when i

708
00:25:31,919 --> 00:25:33,360
talk over voice it probably has a

709
00:25:33,360 --> 00:25:36,159
channel of like 19.2 or 38.4 or

710
00:25:36,159 --> 00:25:38,320
something to its base tower

711
00:25:38,320 --> 00:25:39,919
it's going to depend on

712
00:25:39,919 --> 00:25:42,080
it's going to depend on your carrier the

713
00:25:42,080 --> 00:25:43,760
particular tower and the phase of the

714
00:25:43,760 --> 00:25:46,080
moon um but the upper bound is usually

715
00:25:46,080 --> 00:25:48,720
around 13k

716
00:25:48,720 --> 00:25:50,960
for voice channel uh for the voice um

717
00:25:50,960 --> 00:25:53,120
unless you're talking hd voice and then

718
00:25:53,120 --> 00:25:54,640
it's a little higher but like i said

719
00:25:54,640 --> 00:25:56,559
okay so the question i have is that like

720
00:25:56,559 --> 00:25:58,080
information theory tells us that you

721
00:25:58,080 --> 00:26:00,320
should be able to encode at the same

722
00:26:00,320 --> 00:26:02,400
rate of capacity and you guys are only

723
00:26:02,400 --> 00:26:05,440
pulling 500 bps and so i'm wondering how

724
00:26:05,440 --> 00:26:06,240
i mean

725
00:26:06,240 --> 00:26:07,360
why

726
00:26:07,360 --> 00:26:10,640
where's the gap and uh perhaps you could

727
00:26:10,640 --> 00:26:12,400
use you know just more standard

728
00:26:12,400 --> 00:26:14,880
protocols if you had a larger capacity

729
00:26:14,880 --> 00:26:17,279
channel so uh that's a great question um

730
00:26:17,279 --> 00:26:20,320
and this is um so if you know if we had

731
00:26:20,320 --> 00:26:22,480
an arbitrary capacity voice channel if

732
00:26:22,480 --> 00:26:24,559
uh if all cell phones were landline

733
00:26:24,559 --> 00:26:26,400
quality um this would have been a much

734
00:26:26,400 --> 00:26:29,200
easier paper to write um so but your

735
00:26:29,200 --> 00:26:30,720
question sort of the information

736
00:26:30,720 --> 00:26:32,559
theoretic limits um there's a couple of

737
00:26:32,559 --> 00:26:34,880
things first of which if we wanted to

738
00:26:34,880 --> 00:26:36,880
sort of uh exploit the information

739
00:26:36,880 --> 00:26:39,200
theoretic limits we would have to um

740
00:26:39,200 --> 00:26:41,360
we'd have to first know um know the

741
00:26:41,360 --> 00:26:44,159
channel entirely so um if you and i were

742
00:26:44,159 --> 00:26:46,320
making a phone call to each other on the

743
00:26:46,320 --> 00:26:48,799
same tower using the same codec

744
00:26:48,799 --> 00:26:50,320
something like that might be possible

745
00:26:50,320 --> 00:26:52,000
but if i'm calling my bank and i don't

746
00:26:52,000 --> 00:26:53,679
know um the

747
00:26:53,679 --> 00:26:55,679
the type of endpoint they have much less

748
00:26:55,679 --> 00:26:58,240
the particular codex the configurations

749
00:26:58,240 --> 00:27:00,400
many of these codecs have lots of um

750
00:27:00,400 --> 00:27:02,000
options that can have a vast effect on

751
00:27:02,000 --> 00:27:05,039
this um the reason that our

752
00:27:05,039 --> 00:27:08,320
our modem is so far below shannon is

753
00:27:08,320 --> 00:27:11,200
because uh we have to be agnostic to the

754
00:27:11,200 --> 00:27:12,640
network

755
00:27:12,640 --> 00:27:15,919
so i hope that answers your question

756
00:27:18,240 --> 00:27:23,000
all right let's thank brad one more time

