1
00:00:10,800 --> 00:00:13,040
good afternoon everyone my name is ahmed

2
00:00:13,040 --> 00:00:15,120
and today i will be presenting our work

3
00:00:15,120 --> 00:00:17,279
on tracing information flows between ad

4
00:00:17,279 --> 00:00:21,039
exchanges using retargeted ads

5
00:00:21,039 --> 00:00:23,279
we all know that when a user goes online

6
00:00:23,279 --> 00:00:25,119
and starts browsing the web his

7
00:00:25,119 --> 00:00:26,720
information is being tracked by both

8
00:00:26,720 --> 00:00:28,840
first parties and third parties for

9
00:00:28,840 --> 00:00:31,519
example a user can visit a website like

10
00:00:31,519 --> 00:00:34,079
cnn and in this particular case the

11
00:00:34,079 --> 00:00:36,000
browsing activity is being known by the

12
00:00:36,000 --> 00:00:38,559
first party which is cnn and also by the

13
00:00:38,559 --> 00:00:40,719
third party trackers present on cnn such

14
00:00:40,719 --> 00:00:42,719
as facebook and doubleclick

15
00:00:42,719 --> 00:00:44,079
the purpose of these third-party

16
00:00:44,079 --> 00:00:45,920
trackers is to collect information about

17
00:00:45,920 --> 00:00:47,920
the user so that they can show an ad to

18
00:00:47,920 --> 00:00:50,239
the user in future

19
00:00:50,239 --> 00:00:52,079
similarly the user can visit other

20
00:00:52,079 --> 00:00:55,440
websites like amazon and bbc and in

21
00:00:55,440 --> 00:00:57,120
doing so his browsing activity gets

22
00:00:57,120 --> 00:00:58,640
exposed to more and more third-party

23
00:00:58,640 --> 00:01:01,039
trackers

24
00:01:01,199 --> 00:01:02,079
well

25
00:01:02,079 --> 00:01:03,280
so this shows that tracking is

26
00:01:03,280 --> 00:01:04,559
ubiquitous

27
00:01:04,559 --> 00:01:06,880
however this is not very surprising you

28
00:01:06,880 --> 00:01:09,200
can actually visualize this in a browser

29
00:01:09,200 --> 00:01:12,000
using an extension like light beam

30
00:01:12,000 --> 00:01:14,560
but what you do not see are these red

31
00:01:14,560 --> 00:01:15,680
edges

32
00:01:15,680 --> 00:01:17,600
these represent information sharing

33
00:01:17,600 --> 00:01:19,520
between ad exchanges

34
00:01:19,520 --> 00:01:21,119
which implies that

35
00:01:21,119 --> 00:01:23,280
ad exchanges are not isolated islands of

36
00:01:23,280 --> 00:01:24,720
data anymore

37
00:01:24,720 --> 00:01:26,560
they not only track your information and

38
00:01:26,560 --> 00:01:28,560
collect your information they also share

39
00:01:28,560 --> 00:01:32,000
that information with other ad exchanges

40
00:01:32,000 --> 00:01:33,920
we want to study these particular red

41
00:01:33,920 --> 00:01:37,119
edges between ad exchanges

42
00:01:37,119 --> 00:01:38,799
and they happen

43
00:01:38,799 --> 00:01:40,799
in usually cookie matching but

44
00:01:40,799 --> 00:01:42,720
let's first take a step back and try to

45
00:01:42,720 --> 00:01:44,240
understand what is happening in the ad

46
00:01:44,240 --> 00:01:46,798
ecosystem

47
00:01:47,520 --> 00:01:49,280
so the modern ad ecosystem is moving

48
00:01:49,280 --> 00:01:52,560
more and more towards real-time bidding

49
00:01:52,560 --> 00:01:54,960
real-time bidding gives the flexibility

50
00:01:54,960 --> 00:01:56,880
to the advertisers

51
00:01:56,880 --> 00:01:58,799
to decide in real time whether or not

52
00:01:58,799 --> 00:02:00,240
they want to

53
00:02:00,240 --> 00:02:02,159
show an ad to the user

54
00:02:02,159 --> 00:02:04,240
each ad request is managed by an ad

55
00:02:04,240 --> 00:02:06,880
exchange which holds an auction

56
00:02:06,880 --> 00:02:09,840
and advertisers bid during that auction

57
00:02:09,840 --> 00:02:13,040
and tries to win the bid and show an ad

58
00:02:13,040 --> 00:02:15,120
but they rely on a key fact that they

59
00:02:15,120 --> 00:02:17,360
will be able to identify the user before

60
00:02:17,360 --> 00:02:18,480
bidding

61
00:02:18,480 --> 00:02:20,640
before because if they can identify they

62
00:02:20,640 --> 00:02:23,040
can use that use the information they

63
00:02:23,040 --> 00:02:26,080
have about the user to bid high or low

64
00:02:26,080 --> 00:02:28,400
and they identify the user using cookie

65
00:02:28,400 --> 00:02:29,360
matching

66
00:02:29,360 --> 00:02:31,360
and by sharing the use information with

67
00:02:31,360 --> 00:02:34,319
the exchange add exchange

68
00:02:34,319 --> 00:02:36,640
so this is a prerequisite in real time

69
00:02:36,640 --> 00:02:37,760
bidding

70
00:02:37,760 --> 00:02:39,280
and real-time bidding is getting more

71
00:02:39,280 --> 00:02:40,720
and more popular

72
00:02:40,720 --> 00:02:43,680
and idc reports suggest that uh the

73
00:02:43,680 --> 00:02:45,360
spending in real-time bidding will cross

74
00:02:45,360 --> 00:02:48,400
20 billion dollars by 2017

75
00:02:48,400 --> 00:02:51,440
and the spending will account for 80

76
00:02:51,440 --> 00:02:56,000
of us display ad by 2022

77
00:02:56,239 --> 00:02:57,760
let's try to first understand what

78
00:02:57,760 --> 00:03:00,159
real-time bidding is let's consider this

79
00:03:00,159 --> 00:03:01,440
example

80
00:03:01,440 --> 00:03:03,440
user visits a website like cnn gets a

81
00:03:03,440 --> 00:03:04,959
response

82
00:03:04,959 --> 00:03:07,200
then the browser sends an ad request to

83
00:03:07,200 --> 00:03:09,200
an ad exchange like double click

84
00:03:09,200 --> 00:03:11,680
now at this particular point doubleclick

85
00:03:11,680 --> 00:03:15,200
asks advertisers or ad partners

86
00:03:15,200 --> 00:03:16,879
whether they want to submit a bid on

87
00:03:16,879 --> 00:03:19,680
user or not to show the ad

88
00:03:19,680 --> 00:03:21,360
and depending on the information they

89
00:03:21,360 --> 00:03:23,120
have about the user

90
00:03:23,120 --> 00:03:26,400
these advertisers will submit the bid

91
00:03:26,400 --> 00:03:28,799
and this process is basically real-time

92
00:03:28,799 --> 00:03:30,480
bidding

93
00:03:30,480 --> 00:03:32,000
and somebody will eventually win the

94
00:03:32,000 --> 00:03:35,200
auction and the retarget the it will be

95
00:03:35,200 --> 00:03:36,720
served a redirect so that it can serve

96
00:03:36,720 --> 00:03:39,040
the ad to the user

97
00:03:39,040 --> 00:03:42,480
but there is a problem in this picture

98
00:03:42,480 --> 00:03:45,120
how do these advertisers know or

99
00:03:45,120 --> 00:03:47,440
identify the user

100
00:03:47,440 --> 00:03:49,760
during this process because all they see

101
00:03:49,760 --> 00:03:51,680
is double clicks cookie when the double

102
00:03:51,680 --> 00:03:53,599
click double click ask for the

103
00:03:53,599 --> 00:03:55,920
advertisers to submit bits they cannot

104
00:03:55,920 --> 00:03:57,760
read their own cookie and identify the

105
00:03:57,760 --> 00:04:00,720
user

106
00:04:00,720 --> 00:04:03,680
this is circumvented by cookie matching

107
00:04:03,680 --> 00:04:05,680
so before real time bidding this must

108
00:04:05,680 --> 00:04:07,920
have had happen

109
00:04:07,920 --> 00:04:09,599
browser sensor request to double click

110
00:04:09,599 --> 00:04:12,319
double click can read its own cookie

111
00:04:12,319 --> 00:04:13,840
which is one two three four five in this

112
00:04:13,840 --> 00:04:14,720
case

113
00:04:14,720 --> 00:04:16,639
and it sends a redirect to its add

114
00:04:16,639 --> 00:04:18,639
partner

115
00:04:18,639 --> 00:04:21,279
in this case critia and it

116
00:04:21,279 --> 00:04:22,960
sets its cookie value in the url

117
00:04:22,960 --> 00:04:24,960
parameter

118
00:04:24,960 --> 00:04:26,639
so in the next request the browser will

119
00:04:26,639 --> 00:04:27,600
send a

120
00:04:27,600 --> 00:04:29,759
request to grittio and kritio can read

121
00:04:29,759 --> 00:04:32,400
its own cookie a b c d e

122
00:04:32,400 --> 00:04:34,960
and in the url parameter

123
00:04:34,960 --> 00:04:36,639
since doubleclick

124
00:04:36,639 --> 00:04:39,759
id is there it gives the discretio the

125
00:04:39,759 --> 00:04:41,759
opportunity to create a mapping between

126
00:04:41,759 --> 00:04:44,560
its cookie id and double click cookie id

127
00:04:44,560 --> 00:04:46,240
for a particular user

128
00:04:46,240 --> 00:04:47,919
so in future when doubleclick will say

129
00:04:47,919 --> 00:04:49,680
oh you know what you want to submit a

130
00:04:49,680 --> 00:04:52,000
bit this creator just have to look in

131
00:04:52,000 --> 00:04:53,680
the database and see if there is a

132
00:04:53,680 --> 00:04:56,240
mapping

133
00:04:56,240 --> 00:04:57,120
so

134
00:04:57,120 --> 00:04:58,720
we want to

135
00:04:58,720 --> 00:05:01,120
identify these this relationship between

136
00:05:01,120 --> 00:05:03,840
double click and critical

137
00:05:03,840 --> 00:05:05,520
but it and it looks straight forward

138
00:05:05,520 --> 00:05:07,440
from here why can we just like look at

139
00:05:07,440 --> 00:05:09,199
the http request and look at the

140
00:05:09,199 --> 00:05:12,160
particular identifiers being shared

141
00:05:12,160 --> 00:05:14,400
and actually prior work has done that

142
00:05:14,400 --> 00:05:15,759
they have looked at the identifiers

143
00:05:15,759 --> 00:05:17,520
being passed around and using that they

144
00:05:17,520 --> 00:05:21,120
have identified cookie matching partners

145
00:05:21,120 --> 00:05:24,720
but they rely on http requests which has

146
00:05:24,720 --> 00:05:27,199
which has certain limitations

147
00:05:27,199 --> 00:05:28,639
for example

148
00:05:28,639 --> 00:05:30,479
one of the challenges could be the

149
00:05:30,479 --> 00:05:32,240
matching can be happening on the server

150
00:05:32,240 --> 00:05:33,520
side

151
00:05:33,520 --> 00:05:35,199
let's consider this hypothetical

152
00:05:35,199 --> 00:05:36,880
scenario

153
00:05:36,880 --> 00:05:38,960
the user goes online and create you the

154
00:05:38,960 --> 00:05:39,759
one

155
00:05:39,759 --> 00:05:41,520
when ad network observes the user from a

156
00:05:41,520 --> 00:05:44,560
particular ip address

157
00:05:44,639 --> 00:05:46,479
later at some point

158
00:05:46,479 --> 00:05:48,639
another ad network write media observes

159
00:05:48,639 --> 00:05:52,160
the user using the same from the same ip

160
00:05:52,160 --> 00:05:55,039
and behind the scene they both can

161
00:05:55,039 --> 00:05:57,120
sync up for that particular ip for that

162
00:05:57,120 --> 00:05:59,280
particular particular user

163
00:05:59,280 --> 00:06:01,840
and in this process no information is

164
00:06:01,840 --> 00:06:03,600
going through the browser no matching is

165
00:06:03,600 --> 00:06:05,680
good happening through the browser so it

166
00:06:05,680 --> 00:06:08,080
does the analysis of http request

167
00:06:08,080 --> 00:06:10,960
will not be enough

168
00:06:12,160 --> 00:06:12,880
so

169
00:06:12,880 --> 00:06:15,039
let's take a look where the information

170
00:06:15,039 --> 00:06:16,560
is flowing through the client side or

171
00:06:16,560 --> 00:06:17,919
the browser

172
00:06:17,919 --> 00:06:20,639
still there can be some challenges

173
00:06:20,639 --> 00:06:22,960
consider this this browser and the

174
00:06:22,960 --> 00:06:25,759
environment in which it is running

175
00:06:25,759 --> 00:06:27,759
it makes a request to amazon get some

176
00:06:27,759 --> 00:06:30,000
response

177
00:06:30,000 --> 00:06:31,600
then it makes a request to double click

178
00:06:31,600 --> 00:06:33,360
gets a response and at this point double

179
00:06:33,360 --> 00:06:37,120
click add the javascript in the page

180
00:06:37,120 --> 00:06:40,160
the next request goes to critia

181
00:06:40,160 --> 00:06:41,199
and

182
00:06:41,199 --> 00:06:43,440
the http request in this the get request

183
00:06:43,440 --> 00:06:47,600
is obfuscated in this particular case

184
00:06:47,600 --> 00:06:48,800
so

185
00:06:48,800 --> 00:06:51,199
at this point we have no way of knowing

186
00:06:51,199 --> 00:06:52,960
who initiated this request whether it

187
00:06:52,960 --> 00:06:54,479
was amazon

188
00:06:54,479 --> 00:06:58,240
or double click script javascript

189
00:06:58,479 --> 00:06:59,280
so

190
00:06:59,280 --> 00:07:00,880
double click and create you who are at

191
00:07:00,880 --> 00:07:02,720
markers they can have some mechanism to

192
00:07:02,720 --> 00:07:05,599
de-office skate and create a mapping

193
00:07:05,599 --> 00:07:07,120
and they can and they can do the

194
00:07:07,120 --> 00:07:08,160
matching but

195
00:07:08,160 --> 00:07:10,479
just the analysis of the http request

196
00:07:10,479 --> 00:07:13,280
will not be enough

197
00:07:13,759 --> 00:07:15,599
so the goal of our studies to develop a

198
00:07:15,599 --> 00:07:17,280
methodology to identify these

199
00:07:17,280 --> 00:07:19,840
information flows between ad exchanges

200
00:07:19,840 --> 00:07:21,520
and we want our methodology to be

201
00:07:21,520 --> 00:07:23,599
mechanism agnostic that it should work

202
00:07:23,599 --> 00:07:25,840
in the face of obfuscation and we want

203
00:07:25,840 --> 00:07:28,319
to detect both client-side flows and

204
00:07:28,319 --> 00:07:30,639
server-side flows

205
00:07:30,639 --> 00:07:32,880
but how do we detect these flows given

206
00:07:32,880 --> 00:07:35,759
the challenges i just discussed

207
00:07:35,759 --> 00:07:37,599
we rely on the key insight of using

208
00:07:37,599 --> 00:07:40,160
retarget ads which are very specific

209
00:07:40,160 --> 00:07:42,720
form of ads where a user is shown an ad

210
00:07:42,720 --> 00:07:45,199
from a product he has viewed previously

211
00:07:45,199 --> 00:07:47,919
for example a user goes online on amazon

212
00:07:47,919 --> 00:07:50,560
and looks for a particular cisco adapter

213
00:07:50,560 --> 00:07:53,199
later on he visits some other website

214
00:07:53,199 --> 00:07:55,520
and this particular ad from amazon

215
00:07:55,520 --> 00:07:56,639
follows him

216
00:07:56,639 --> 00:08:00,000
about that particular cisco adapter

217
00:08:00,000 --> 00:08:01,599
so the key inside is that because

218
00:08:01,599 --> 00:08:04,160
retargeted ads are very specific we can

219
00:08:04,160 --> 00:08:05,599
use them to conduct controlled

220
00:08:05,599 --> 00:08:08,800
experiments we know that a user visited

221
00:08:08,800 --> 00:08:11,039
some product at some point and later on

222
00:08:11,039 --> 00:08:12,560
he was shown an ad

223
00:08:12,560 --> 00:08:14,000
so there must be some information

224
00:08:14,000 --> 00:08:17,199
sharing going on in between

225
00:08:17,520 --> 00:08:20,000
following our contributions we present a

226
00:08:20,000 --> 00:08:21,919
novel methodology for identifying

227
00:08:21,919 --> 00:08:24,240
information flows between ad exchanges

228
00:08:24,240 --> 00:08:26,080
using set of control experiments

229
00:08:26,080 --> 00:08:28,319
leveraging retarget ads

230
00:08:28,319 --> 00:08:30,479
we demonstrate the impact of ad network

231
00:08:30,479 --> 00:08:32,958
obfuscation in practice which show that

232
00:08:32,958 --> 00:08:35,279
31 of cookie matching partners would

233
00:08:35,279 --> 00:08:37,200
have remained unidentified using the

234
00:08:37,200 --> 00:08:40,240
heuristics used in prior work

235
00:08:40,240 --> 00:08:42,240
we develop a methodology to categorize

236
00:08:42,240 --> 00:08:45,120
all information flows using a set of

237
00:08:45,120 --> 00:08:46,959
regular expressions

238
00:08:46,959 --> 00:08:48,640
and we use these rules to actually show

239
00:08:48,640 --> 00:08:50,800
that google shares its tracking data

240
00:08:50,800 --> 00:08:54,320
between its services on the server side

241
00:08:54,320 --> 00:08:56,399
and we use graph analysis to infer the

242
00:08:56,399 --> 00:08:58,399
roles of each actor in the ad ecosystem

243
00:08:58,399 --> 00:08:59,600
as well

244
00:08:59,600 --> 00:09:00,800
but due to time constraint i won't

245
00:09:00,800 --> 00:09:02,560
discuss the graph analysis

246
00:09:02,560 --> 00:09:06,000
i suggest you to read the paper for that

247
00:09:06,640 --> 00:09:09,200
so moving on to our data collection part

248
00:09:09,200 --> 00:09:10,959
as i mentioned we use retarget ads in

249
00:09:10,959 --> 00:09:12,959
our experiments so the key observation

250
00:09:12,959 --> 00:09:14,800
is that retargeted ads are served under

251
00:09:14,800 --> 00:09:17,279
very specific circumstances

252
00:09:17,279 --> 00:09:19,600
for example user goes on amazon and

253
00:09:19,600 --> 00:09:21,200
browses the product

254
00:09:21,200 --> 00:09:24,480
critio observes the user at

255
00:09:24,480 --> 00:09:26,399
on amazon

256
00:09:26,399 --> 00:09:27,519
later on

257
00:09:27,519 --> 00:09:29,760
the user visits web bbc and he was shown

258
00:09:29,760 --> 00:09:31,360
an ad from amazon

259
00:09:31,360 --> 00:09:33,760
and the ad was served from critter

260
00:09:33,760 --> 00:09:35,279
but notice that

261
00:09:35,279 --> 00:09:37,120
the request did not directly came from

262
00:09:37,120 --> 00:09:39,920
browser there was an exchange involved

263
00:09:39,920 --> 00:09:42,640
so they must have had matched cookies as

264
00:09:42,640 --> 00:09:45,600
i discussed earlier

265
00:09:45,600 --> 00:09:47,120
so this implies a causal flow of

266
00:09:47,120 --> 00:09:49,440
information between the ad exchange from

267
00:09:49,440 --> 00:09:52,000
the ad exchange to the advertiser and we

268
00:09:52,000 --> 00:09:54,720
use that causal relation for our

269
00:09:54,720 --> 00:09:57,279
analysis

270
00:09:58,080 --> 00:10:00,399
to give the overview of our data

271
00:10:00,399 --> 00:10:02,640
collection part we use an instrumented

272
00:10:02,640 --> 00:10:04,640
version of chromium to visit a specific

273
00:10:04,640 --> 00:10:07,440
persona a persona is an interest profile

274
00:10:07,440 --> 00:10:09,519
for example running shoes

275
00:10:09,519 --> 00:10:11,360
and for each persona we visit 10

276
00:10:11,360 --> 00:10:14,160
websites considering the same example

277
00:10:14,160 --> 00:10:17,279
these websites could be nike adidas etc

278
00:10:17,279 --> 00:10:19,760
and for each website we pick 10 product

279
00:10:19,760 --> 00:10:21,600
urls

280
00:10:21,600 --> 00:10:23,200
related to running shoes in this example

281
00:10:23,200 --> 00:10:24,720
to visit

282
00:10:24,720 --> 00:10:26,959
so overall each persona will visit 100

283
00:10:26,959 --> 00:10:29,200
product urls and once we have visited

284
00:10:29,200 --> 00:10:30,959
those products

285
00:10:30,959 --> 00:10:33,120
we visit a bunch of publishers

286
00:10:33,120 --> 00:10:34,959
in hope that we will collect retarget

287
00:10:34,959 --> 00:10:37,199
ads

288
00:10:37,519 --> 00:10:39,600
we store all the images we observe

289
00:10:39,600 --> 00:10:41,600
inclusion chains http requests and

290
00:10:41,600 --> 00:10:44,240
responses

291
00:10:44,320 --> 00:10:46,399
and we repeat this nine times

292
00:10:46,399 --> 00:10:48,160
and also notice that

293
00:10:48,160 --> 00:10:50,720
this law is only for one persona

294
00:10:50,720 --> 00:10:53,120
we created 90 such interest profiles or

295
00:10:53,120 --> 00:10:54,959
personas and those were running in

296
00:10:54,959 --> 00:10:56,640
parallel

297
00:10:56,640 --> 00:11:00,079
so in total we collected 570 000 images

298
00:11:00,079 --> 00:11:01,760
and we applied standard ad detection

299
00:11:01,760 --> 00:11:04,000
techniques using easylist etc

300
00:11:04,000 --> 00:11:06,079
and we filter out images which were

301
00:11:06,079 --> 00:11:08,160
shown to more than one persona because

302
00:11:08,160 --> 00:11:10,000
according to the definition

303
00:11:10,000 --> 00:11:13,040
retarget ads should only be shown in the

304
00:11:13,040 --> 00:11:15,920
persona they were observed in

305
00:11:15,920 --> 00:11:18,320
so this narrows down our list from fifty

306
00:11:18,320 --> 00:11:20,240
five hundred seventy thousand images to

307
00:11:20,240 --> 00:11:22,160
some thirty two thousand potentially

308
00:11:22,160 --> 00:11:23,680
retarget diets

309
00:11:23,680 --> 00:11:26,399
i say potentially because

310
00:11:26,399 --> 00:11:29,440
on because not because um it doesn't

311
00:11:29,440 --> 00:11:31,760
mean that um if the

312
00:11:31,760 --> 00:11:33,440
ad was shown in one persona it doesn't

313
00:11:33,440 --> 00:11:36,000
mean that the ad was actually retargeted

314
00:11:36,000 --> 00:11:37,600
it could have been a contextual ad or a

315
00:11:37,600 --> 00:11:40,640
behavioral ad we need to make sure that

316
00:11:40,640 --> 00:11:43,040
it is indeed a ad but because

317
00:11:43,040 --> 00:11:44,959
of the size of the ads we could not go

318
00:11:44,959 --> 00:11:46,480
through manually so we decided to

319
00:11:46,480 --> 00:11:49,440
crowdsource that part

320
00:11:49,440 --> 00:11:51,200
for crowdsourcing we use amazon

321
00:11:51,200 --> 00:11:54,720
mechanical turk to label our 32 000 ads

322
00:11:54,720 --> 00:11:58,079
we divide these ads into some 1100 tasks

323
00:11:58,079 --> 00:12:01,200
and each task consists of 30 ads

324
00:12:01,200 --> 00:12:04,160
27 unlabeled three labeled buyers which

325
00:12:04,160 --> 00:12:07,200
act as ground rules and for each ad we

326
00:12:07,200 --> 00:12:09,120
get two verdicts from two separate

327
00:12:09,120 --> 00:12:11,519
workers

328
00:12:11,519 --> 00:12:13,360
this is how one of our questions looks

329
00:12:13,360 --> 00:12:15,040
like

330
00:12:15,040 --> 00:12:16,720
this is an image we observe for a

331
00:12:16,720 --> 00:12:18,240
specific persona

332
00:12:18,240 --> 00:12:20,959
in this case in the jewelry

333
00:12:20,959 --> 00:12:22,800
so we show the worker the image and we

334
00:12:22,800 --> 00:12:24,639
show the persona the

335
00:12:24,639 --> 00:12:26,160
image was observed and we asked the

336
00:12:26,160 --> 00:12:28,480
worker oh does this image belong to this

337
00:12:28,480 --> 00:12:30,959
particular persona or this category

338
00:12:30,959 --> 00:12:32,560
and in this case it does it is from

339
00:12:32,560 --> 00:12:34,240
jewelry

340
00:12:34,240 --> 00:12:35,920
and the next question we ask oh does

341
00:12:35,920 --> 00:12:37,440
this image come from a particular

342
00:12:37,440 --> 00:12:40,480
website because we know the websites 10

343
00:12:40,480 --> 00:12:42,399
websites we've visited for a persona we

344
00:12:42,399 --> 00:12:44,880
can show the list of websites as well

345
00:12:44,880 --> 00:12:46,160
and you can also notice that in this

346
00:12:46,160 --> 00:12:49,279
particular case the ad is from admr

347
00:12:49,279 --> 00:12:50,959
the worker will say that we'll select

348
00:12:50,959 --> 00:12:52,480
that and this

349
00:12:52,480 --> 00:12:56,079
implies that this is a retarget ad

350
00:12:56,320 --> 00:12:58,320
so in our final data set

351
00:12:58,320 --> 00:13:01,920
we have some 5100 unique retarget ads

352
00:13:01,920 --> 00:13:04,480
but notice that we observe

353
00:13:04,480 --> 00:13:06,639
one retarget ad multiple times for

354
00:13:06,639 --> 00:13:09,839
example an ad could be served on bbc and

355
00:13:09,839 --> 00:13:12,880
on cnn um the same ad and it could be

356
00:13:12,880 --> 00:13:14,480
served by different ad networks like

357
00:13:14,480 --> 00:13:17,519
critio and write media so we we actually

358
00:13:17,519 --> 00:13:19,920
consider each occurrence of ads

359
00:13:19,920 --> 00:13:22,320
separately we considered that as a whole

360
00:13:22,320 --> 00:13:23,839
chain through which the ad was served

361
00:13:23,839 --> 00:13:25,519
and we considered consider all of these

362
00:13:25,519 --> 00:13:27,839
chains so in total we have like some 35

363
00:13:27,839 --> 00:13:30,720
000 published site chains

364
00:13:30,720 --> 00:13:33,120
next we want to classify those chains

365
00:13:33,120 --> 00:13:34,880
like how the ad was served and which

366
00:13:34,880 --> 00:13:38,720
information sharing mechanism was used

367
00:13:38,720 --> 00:13:41,279
let's take a look at one publisher chain

368
00:13:41,279 --> 00:13:43,920
in this particular example the user

369
00:13:43,920 --> 00:13:45,519
now these are retarget ads we know that

370
00:13:45,519 --> 00:13:47,440
these chains are

371
00:13:47,440 --> 00:13:50,399
ads although delivery target ads

372
00:13:50,399 --> 00:13:51,920
so in this case

373
00:13:51,920 --> 00:13:53,680
the user with the bbc and he was served

374
00:13:53,680 --> 00:13:57,920
an ad from amazon via critia

375
00:13:57,920 --> 00:13:59,680
so because we are seeing an ad from

376
00:13:59,680 --> 00:14:03,600
amazon we must have visited amazon in

377
00:14:03,600 --> 00:14:05,760
the past

378
00:14:05,760 --> 00:14:06,720
so

379
00:14:06,720 --> 00:14:08,959
for every publisher side chain there is

380
00:14:08,959 --> 00:14:10,800
an associated shopper side chain as well

381
00:14:10,800 --> 00:14:13,199
which we visited in the past

382
00:14:13,199 --> 00:14:15,199
but the question is how does critia know

383
00:14:15,199 --> 00:14:18,720
to serve as an ad on bbc

384
00:14:18,720 --> 00:14:20,800
well in this case it is pretty trivial

385
00:14:20,800 --> 00:14:23,440
critico observed us on amazon it knew

386
00:14:23,440 --> 00:14:25,040
about our interest and it later showed

387
00:14:25,040 --> 00:14:27,199
us an ad on publisher's side where it

388
00:14:27,199 --> 00:14:28,560
directly got the request from the

389
00:14:28,560 --> 00:14:31,279
browser

390
00:14:31,279 --> 00:14:33,680
so next question is can we classify all

391
00:14:33,680 --> 00:14:37,040
such publisher site chains

392
00:14:37,040 --> 00:14:38,720
but to understand you first see what we

393
00:14:38,720 --> 00:14:40,240
mean by a chain

394
00:14:40,240 --> 00:14:41,440
for example

395
00:14:41,440 --> 00:14:43,600
the request goes to cnn

396
00:14:43,600 --> 00:14:45,600
the next request goes to rubicon which

397
00:14:45,600 --> 00:14:48,480
redirects uh sends a redirect to kritio

398
00:14:48,480 --> 00:14:49,760
and the event

399
00:14:49,760 --> 00:14:51,680
the ad is served eventually in this case

400
00:14:51,680 --> 00:14:54,240
ruby gone is an exchange

401
00:14:54,240 --> 00:14:56,079
critio is the advertiser which served us

402
00:14:56,079 --> 00:14:57,199
the ad

403
00:14:57,199 --> 00:14:58,959
but the change can get a little more

404
00:14:58,959 --> 00:15:01,920
complicated as well

405
00:15:01,920 --> 00:15:04,480
cnn then sends a request to double click

406
00:15:04,480 --> 00:15:06,560
which sends the redirect to rubycon

407
00:15:06,560 --> 00:15:10,239
which sends the redirect to gratio

408
00:15:10,959 --> 00:15:14,320
notice that this can also this can get

409
00:15:14,320 --> 00:15:16,959
complicated further but how can we

410
00:15:16,959 --> 00:15:19,040
classify these chains how can we capture

411
00:15:19,040 --> 00:15:20,160
these strings

412
00:15:20,160 --> 00:15:23,040
we do so using regex like rules for

413
00:15:23,040 --> 00:15:24,000
example

414
00:15:24,000 --> 00:15:25,600
in this particular case

415
00:15:25,600 --> 00:15:27,839
we can capture these chains using this

416
00:15:27,839 --> 00:15:30,399
the following rule like advertiser

417
00:15:30,399 --> 00:15:31,920
should appear towards the end which is

418
00:15:31,920 --> 00:15:34,800
critical preceded by an ad exchange

419
00:15:34,800 --> 00:15:36,160
rubycon

420
00:15:36,160 --> 00:15:38,000
and at the beginning there should be a

421
00:15:38,000 --> 00:15:40,720
publisher cnn and in between there can

422
00:15:40,720 --> 00:15:42,240
be multiple trackers any number of

423
00:15:42,240 --> 00:15:44,639
trackers

424
00:15:44,880 --> 00:15:46,959
so using our rejects like rules

425
00:15:46,959 --> 00:15:50,079
we classify these publisher side chains

426
00:15:50,079 --> 00:15:52,480
in four major ways for four possible

427
00:15:52,480 --> 00:15:55,440
ways one is direct matching

428
00:15:55,440 --> 00:15:57,759
two is cookie matching three is indirect

429
00:15:57,759 --> 00:15:58,720
matching

430
00:15:58,720 --> 00:16:00,959
and latent matching indirect matching

431
00:16:00,959 --> 00:16:02,160
and latent matching are server side

432
00:16:02,160 --> 00:16:04,240
matches but i won't discuss indirect

433
00:16:04,240 --> 00:16:07,959
matching due to time constraint

434
00:16:08,399 --> 00:16:10,480
next take let's take a look at direct

435
00:16:10,480 --> 00:16:12,160
matching

436
00:16:12,160 --> 00:16:13,199
so

437
00:16:13,199 --> 00:16:15,920
um the user uh go

438
00:16:15,920 --> 00:16:18,880
the user was served an ad on critio and

439
00:16:18,880 --> 00:16:21,040
the shopper sidechain

440
00:16:21,040 --> 00:16:24,000
is from amazon to creator

441
00:16:24,000 --> 00:16:25,759
so in this case all we need to know is

442
00:16:25,759 --> 00:16:27,600
that advertiser

443
00:16:27,600 --> 00:16:29,440
that served us the retarget got a

444
00:16:29,440 --> 00:16:32,240
request directly from the browser

445
00:16:32,240 --> 00:16:35,120
which means that it can identify us

446
00:16:35,120 --> 00:16:38,320
and uh on the shopper side

447
00:16:38,320 --> 00:16:40,639
it must have observed us

448
00:16:40,639 --> 00:16:42,880
on amazon so that it knows about our

449
00:16:42,880 --> 00:16:44,240
interest

450
00:16:44,240 --> 00:16:45,839
and there can be any number of trackers

451
00:16:45,839 --> 00:16:48,639
present in between

452
00:16:48,880 --> 00:16:51,279
so this is pretty simple but the but

453
00:16:51,279 --> 00:16:54,880
this can get a little complicated

454
00:16:55,600 --> 00:16:57,120
for example let's consider cookie

455
00:16:57,120 --> 00:16:59,519
matching

456
00:17:00,000 --> 00:17:01,839
now if you notice that the shopper side

457
00:17:01,839 --> 00:17:02,959
is the same

458
00:17:02,959 --> 00:17:05,280
critique observed us over there but now

459
00:17:05,280 --> 00:17:07,199
there is an exchange involved in the

460
00:17:07,199 --> 00:17:10,000
publisher side

461
00:17:12,480 --> 00:17:14,240
before now the advertiser is not

462
00:17:14,240 --> 00:17:15,839
directly getting the request from the

463
00:17:15,839 --> 00:17:18,000
shop from the browser there isn't it is

464
00:17:18,000 --> 00:17:20,160
getting a request from the exchange like

465
00:17:20,160 --> 00:17:23,679
rtb real-time bidding

466
00:17:24,000 --> 00:17:26,000
but it still must observe us on the

467
00:17:26,000 --> 00:17:27,520
shopper side

468
00:17:27,520 --> 00:17:30,480
to know our interest

469
00:17:30,480 --> 00:17:32,640
but in between

470
00:17:32,640 --> 00:17:34,880
something like this could should happen

471
00:17:34,880 --> 00:17:37,440
there must be an exchange of there must

472
00:17:37,440 --> 00:17:40,240
be an exchange of information from the

473
00:17:40,240 --> 00:17:43,919
exchange ad exchange to the advertiser

474
00:17:43,919 --> 00:17:45,039
so

475
00:17:45,039 --> 00:17:46,559
in this scenario

476
00:17:46,559 --> 00:17:48,480
if the publisher sidechain matches this

477
00:17:48,480 --> 00:17:49,280
rule

478
00:17:49,280 --> 00:17:50,080
the

479
00:17:50,080 --> 00:17:51,760
right side rule and the shopper side

480
00:17:51,760 --> 00:17:53,520
chain matches

481
00:17:53,520 --> 00:17:54,240
the

482
00:17:54,240 --> 00:17:55,679
left side rule

483
00:17:55,679 --> 00:17:57,760
and there is a match with the rule in

484
00:17:57,760 --> 00:18:01,840
between we classify this as cookie match

485
00:18:02,400 --> 00:18:05,440
so so far we have actually discussed

486
00:18:05,440 --> 00:18:07,120
client-side matches

487
00:18:07,120 --> 00:18:08,880
and we claim that we can actually detect

488
00:18:08,880 --> 00:18:12,919
server-side matches as well

489
00:18:16,080 --> 00:18:17,840
let's take a look at one of these

490
00:18:17,840 --> 00:18:20,400
matches which we call latent matches

491
00:18:20,400 --> 00:18:22,000
so in this case the publisher side is

492
00:18:22,000 --> 00:18:23,120
the same

493
00:18:23,120 --> 00:18:24,640
you can see that there is an exchange

494
00:18:24,640 --> 00:18:26,240
involved double click and there is an

495
00:18:26,240 --> 00:18:30,080
advertiser to mdn

496
00:18:30,320 --> 00:18:31,919
but the key thing to notice over here is

497
00:18:31,919 --> 00:18:33,039
that

498
00:18:33,039 --> 00:18:36,080
neither the exchange or nor advertiser

499
00:18:36,080 --> 00:18:38,160
observed us on the shopper side but they

500
00:18:38,160 --> 00:18:40,640
still served us the ad on publisher side

501
00:18:40,640 --> 00:18:44,480
so how did they know about our interest

502
00:18:47,280 --> 00:18:50,000
the the advertisers or advertiser on the

503
00:18:50,000 --> 00:18:51,919
publisher side must have received some

504
00:18:51,919 --> 00:18:53,919
information from some shop at our site

505
00:18:53,919 --> 00:18:54,960
tracker

506
00:18:54,960 --> 00:18:56,640
right otherwise it has no way of

507
00:18:56,640 --> 00:18:58,720
identifying us and no knowing our

508
00:18:58,720 --> 00:19:00,480
interest

509
00:19:00,480 --> 00:19:02,960
and we do observe some latent matches in

510
00:19:02,960 --> 00:19:05,840
our in practice in our data set

511
00:19:05,840 --> 00:19:10,080
so to explain this particular case

512
00:19:10,080 --> 00:19:11,760
we see that double click

513
00:19:11,760 --> 00:19:13,679
or to mdn they did not observe us on the

514
00:19:13,679 --> 00:19:16,160
shopper side but google did

515
00:19:16,160 --> 00:19:18,480
and since doubleclick and 2mdn are owned

516
00:19:18,480 --> 00:19:21,360
by google google can aggregate data on

517
00:19:21,360 --> 00:19:23,280
server side and create a mapping for

518
00:19:23,280 --> 00:19:25,840
user

519
00:19:28,240 --> 00:19:30,880
so moving on the results for our

520
00:19:30,880 --> 00:19:33,679
classification

521
00:19:35,280 --> 00:19:38,320
so this this table shows how our chains

522
00:19:38,320 --> 00:19:42,320
were categorized in in the in four types

523
00:19:42,320 --> 00:19:43,679
i'm not showing indirect indirect

524
00:19:43,679 --> 00:19:46,400
matches because i did not discuss them

525
00:19:46,400 --> 00:19:49,679
so the takeaway is first as expected

526
00:19:49,679 --> 00:19:51,520
most of the re-targets were due to

527
00:19:51,520 --> 00:19:54,240
cookie matches

528
00:19:54,320 --> 00:19:56,559
second we observed very small number of

529
00:19:56,559 --> 00:19:58,400
chains that could not be categorized

530
00:19:58,400 --> 00:19:59,760
only two percent

531
00:19:59,760 --> 00:20:01,760
this shows that our rules are exhaustive

532
00:20:01,760 --> 00:20:03,840
and also low false positive rate in our

533
00:20:03,840 --> 00:20:08,080
amt labeling labeling tasks

534
00:20:08,559 --> 00:20:10,880
however we did find surprisingly large

535
00:20:10,880 --> 00:20:13,600
amount of latent matches

536
00:20:13,600 --> 00:20:15,840
i say surprisingly because latent

537
00:20:15,840 --> 00:20:18,000
matching requires more collaboration

538
00:20:18,000 --> 00:20:20,720
within ad exchanges and it requires

539
00:20:20,720 --> 00:20:23,760
collaboration on the server side

540
00:20:23,760 --> 00:20:26,880
so we thought why are the why are these

541
00:20:26,880 --> 00:20:28,640
why the number is so high why is this

542
00:20:28,640 --> 00:20:29,760
happening

543
00:20:29,760 --> 00:20:31,280
and if you remember the previous example

544
00:20:31,280 --> 00:20:34,000
i just discussed with google and 2md and

545
00:20:34,000 --> 00:20:35,039
double click

546
00:20:35,039 --> 00:20:37,360
we thought what if we categorize all

547
00:20:37,360 --> 00:20:39,600
these domains under the parent domain

548
00:20:39,600 --> 00:20:41,600
for example we can

549
00:20:41,600 --> 00:20:43,919
cluster google do double click google

550
00:20:43,919 --> 00:20:46,880
syndication under google and once we did

551
00:20:46,880 --> 00:20:49,520
that we observed that essentially all

552
00:20:49,520 --> 00:20:52,000
the latent matches disappeared and most

553
00:20:52,000 --> 00:20:54,080
of them involved google which which

554
00:20:54,080 --> 00:20:55,840
suggests that google shares tracking

555
00:20:55,840 --> 00:20:58,320
data across its services on the server

556
00:20:58,320 --> 00:21:01,320
side

557
00:21:02,240 --> 00:21:04,080
moving on

558
00:21:04,080 --> 00:21:05,600
the next question we wanted to answer

559
00:21:05,600 --> 00:21:06,720
was

560
00:21:06,720 --> 00:21:08,240
who are these cookie matching partners

561
00:21:08,240 --> 00:21:11,039
in our data set

562
00:21:11,200 --> 00:21:13,039
so this table shows the top cookie

563
00:21:13,039 --> 00:21:15,039
matching partners we found in our data

564
00:21:15,039 --> 00:21:16,960
set

565
00:21:16,960 --> 00:21:18,559
and these particular columns show the

566
00:21:18,559 --> 00:21:20,320
number of chains they appeared in in

567
00:21:20,320 --> 00:21:22,080
which they did cookie matching

568
00:21:22,080 --> 00:21:24,320
and number of unique ads which were

569
00:21:24,320 --> 00:21:27,840
served via those chains

570
00:21:28,880 --> 00:21:30,720
the interesting question what we wanted

571
00:21:30,720 --> 00:21:32,159
to answer was

572
00:21:32,159 --> 00:21:34,640
can we actually identify these cookie

573
00:21:34,640 --> 00:21:37,039
matching pairs using the heuristics used

574
00:21:37,039 --> 00:21:38,640
in prior work

575
00:21:38,640 --> 00:21:40,720
so we looked at three heuristics one

576
00:21:40,720 --> 00:21:42,640
exact share match

577
00:21:42,640 --> 00:21:44,559
which where we looked at exact cookie

578
00:21:44,559 --> 00:21:46,080
strings

579
00:21:46,080 --> 00:21:48,880
string yeah and second special url

580
00:21:48,880 --> 00:21:51,600
parameters where we looked at parameters

581
00:21:51,600 --> 00:21:54,320
such as cookiesync

582
00:21:54,320 --> 00:21:55,440
third

583
00:21:55,440 --> 00:21:57,360
we looked at we considered doubleclick

584
00:21:57,360 --> 00:21:59,679
as a separate case where we look at

585
00:21:59,679 --> 00:22:01,280
special url parameters provided by

586
00:22:01,280 --> 00:22:03,600
doubleclick because doubleclick hashes

587
00:22:03,600 --> 00:22:04,880
its

588
00:22:04,880 --> 00:22:08,480
cookies and never sends out the raw text

589
00:22:08,480 --> 00:22:10,400
and it has a special url parameter to

590
00:22:10,400 --> 00:22:12,320
identify

591
00:22:12,320 --> 00:22:13,760
to identify the cookie values which is

592
00:22:13,760 --> 00:22:16,320
google gid and google and id

593
00:22:16,320 --> 00:22:19,678
and we considered that as wrong

594
00:22:20,080 --> 00:22:20,960
so

595
00:22:20,960 --> 00:22:23,440
this particular row shows that critio

596
00:22:23,440 --> 00:22:24,880
and google's indication this particular

597
00:22:24,880 --> 00:22:26,559
cookie matching pair could have been

598
00:22:26,559 --> 00:22:27,440
found

599
00:22:27,440 --> 00:22:30,000
using the heuristics used before

600
00:22:30,000 --> 00:22:33,840
in this case special url parameters

601
00:22:34,400 --> 00:22:36,480
this particular shows that google

602
00:22:36,480 --> 00:22:37,679
syndication

603
00:22:37,679 --> 00:22:39,600
and steelhouse media this cookie

604
00:22:39,600 --> 00:22:41,679
matching pair would not have been found

605
00:22:41,679 --> 00:22:44,159
using the heuristics used before

606
00:22:44,159 --> 00:22:46,000
and overall we found

607
00:22:46,000 --> 00:22:48,400
31 percent such cookie matching pairs

608
00:22:48,400 --> 00:22:49,600
would have which

609
00:22:49,600 --> 00:22:52,080
would have remained unidentified using

610
00:22:52,080 --> 00:22:55,840
the heuristics used in prior work

611
00:22:58,559 --> 00:23:00,000
so in summary

612
00:23:00,000 --> 00:23:02,400
we develop a novel methodology to detect

613
00:23:02,400 --> 00:23:04,640
information flows between ad exchanges

614
00:23:04,640 --> 00:23:07,120
using a set of control experiments

615
00:23:07,120 --> 00:23:09,679
leveraging retarget ads

616
00:23:09,679 --> 00:23:11,360
our methodology works in phase of

617
00:23:11,360 --> 00:23:12,720
obfuscation

618
00:23:12,720 --> 00:23:14,960
and it can detect both client-side flows

619
00:23:14,960 --> 00:23:16,880
and server-side flows

620
00:23:16,880 --> 00:23:18,960
our data set gives a better picture of

621
00:23:18,960 --> 00:23:21,520
the ad ecosystem it reveals which ad

622
00:23:21,520 --> 00:23:23,520
networks are sharing information about

623
00:23:23,520 --> 00:23:25,840
the user and we can also

624
00:23:25,840 --> 00:23:28,080
reason about how information is being

625
00:23:28,080 --> 00:23:28,960
shared

626
00:23:28,960 --> 00:23:32,640
with between those ad exchanges

627
00:23:32,799 --> 00:23:34,480
and with that i'm happy to take any

628
00:23:34,480 --> 00:23:36,000
questions

629
00:23:36,000 --> 00:23:44,289
[Applause]

630
00:23:50,640 --> 00:23:53,919
uh robin rice university uh so i was

631
00:23:53,919 --> 00:23:56,000
just wondering did you also try to look

632
00:23:56,000 --> 00:23:57,520
at uh

633
00:23:57,520 --> 00:23:59,760
any tracking data that may be shared

634
00:23:59,760 --> 00:24:00,799
between

635
00:24:00,799 --> 00:24:03,679
apps and websites for example if you

636
00:24:03,679 --> 00:24:04,799
have google

637
00:24:04,799 --> 00:24:07,039
is my chatting data from hangout is

638
00:24:07,039 --> 00:24:09,279
shared with something else for telegram

639
00:24:09,279 --> 00:24:11,679
if i use the web telegram version is

640
00:24:11,679 --> 00:24:14,320
that data is being shared with somewhere

641
00:24:14,320 --> 00:24:16,240
else so if i talk with somebody on a

642
00:24:16,240 --> 00:24:19,360
specific topic and i get relevant ad in

643
00:24:19,360 --> 00:24:21,840
amazon about my buying choices uh did

644
00:24:21,840 --> 00:24:23,679
you look into that

645
00:24:23,679 --> 00:24:25,840
um so you're talking specifically about

646
00:24:25,840 --> 00:24:27,279
google case right

647
00:24:27,279 --> 00:24:30,320
so no we did not uh take a look at this

648
00:24:30,320 --> 00:24:32,880
but according to google uh

649
00:24:32,880 --> 00:24:34,720
like a couple of years ago they changed

650
00:24:34,720 --> 00:24:36,400
their policy they can actually

651
00:24:36,400 --> 00:24:38,480
share data between their services for

652
00:24:38,480 --> 00:24:40,320
example they can look at

653
00:24:40,320 --> 00:24:42,400
they can use the information you use on

654
00:24:42,400 --> 00:24:46,400
youtube and they can use later um that

655
00:24:46,400 --> 00:24:47,679
somewhere else with their and they can

656
00:24:47,679 --> 00:24:48,960
match that information with their other

657
00:24:48,960 --> 00:24:50,320
services

658
00:24:50,320 --> 00:24:51,919
to show you something but we did not

659
00:24:51,919 --> 00:24:54,559
take a look at that

660
00:24:57,760 --> 00:25:00,720
i have a question for you um so you use

661
00:25:00,720 --> 00:25:02,880
a set of personas to

662
00:25:02,880 --> 00:25:05,440
come up with a set of rules

663
00:25:05,440 --> 00:25:06,960
matching rules

664
00:25:06,960 --> 00:25:08,400
um

665
00:25:08,400 --> 00:25:10,000
i was wondering did you use any like

666
00:25:10,000 --> 00:25:12,080
control personas

667
00:25:12,080 --> 00:25:13,520
like uh

668
00:25:13,520 --> 00:25:16,159
my essentially i'm thinking that it

669
00:25:16,159 --> 00:25:18,559
could be the case that the persona was

670
00:25:18,559 --> 00:25:20,320
presented in advertisement just by

671
00:25:20,320 --> 00:25:22,799
chance and not by causality you have a

672
00:25:22,799 --> 00:25:24,240
causality

673
00:25:24,240 --> 00:25:26,240
statement essentially in what you're

674
00:25:26,240 --> 00:25:27,120
saying

675
00:25:27,120 --> 00:25:29,600
and i'm wondering how did you eliminate

676
00:25:29,600 --> 00:25:31,760
the confounding factors so if i

677
00:25:31,760 --> 00:25:33,520
understand the question uh correctly

678
00:25:33,520 --> 00:25:35,039
you're asking

679
00:25:35,039 --> 00:25:37,360
uh how did we actually

680
00:25:37,360 --> 00:25:39,200
take care of false negatives

681
00:25:39,200 --> 00:25:40,240
like the

682
00:25:40,240 --> 00:25:41,520
right

683
00:25:41,520 --> 00:25:43,039
okay so

684
00:25:43,039 --> 00:25:46,480
that's a good question actually um

685
00:25:46,480 --> 00:25:48,000
although we observed the ad in one

686
00:25:48,000 --> 00:25:52,159
persona we had 90 similar personas uh

687
00:25:52,159 --> 00:25:54,240
running well not similar 90 percenters

688
00:25:54,240 --> 00:25:56,320
running in in parallel and we were

689
00:25:56,320 --> 00:25:58,799
visiting the same set of publishers

690
00:25:58,799 --> 00:26:00,799
so and we had a control as well with

691
00:26:00,799 --> 00:26:02,320
each persona

692
00:26:02,320 --> 00:26:05,120
so we try to mitigate that uh

693
00:26:05,120 --> 00:26:07,440
using that for example if the ad because

694
00:26:07,440 --> 00:26:10,159
we're visiting similar

695
00:26:10,159 --> 00:26:11,279
publishers

696
00:26:11,279 --> 00:26:13,600
and if it's not a retarget campaign

697
00:26:13,600 --> 00:26:14,720
it should the ad should be seen

698
00:26:14,720 --> 00:26:16,320
somewhere else as well or maybe in the

699
00:26:16,320 --> 00:26:17,919
control as well

700
00:26:17,919 --> 00:26:19,279
but still

701
00:26:19,279 --> 00:26:21,600
you're right it can happen

702
00:26:21,600 --> 00:26:22,320
like

703
00:26:22,320 --> 00:26:25,039
first case scenario the

704
00:26:25,039 --> 00:26:28,559
it was not a retarget campaign

705
00:26:33,120 --> 00:26:35,700
all right let's listen to speaker again

706
00:26:35,700 --> 00:26:41,819
[Applause]

707
00:26:44,240 --> 00:26:46,320
you

