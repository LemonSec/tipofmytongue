1
00:00:10,880 --> 00:00:13,280
okay awesome okay

2
00:00:13,280 --> 00:00:14,639
well good morning everybody thank you

3
00:00:14,639 --> 00:00:16,960
for coming i'm yuan kang and i'll be

4
00:00:16,960 --> 00:00:19,199
talking about our paper on automatically

5
00:00:19,199 --> 00:00:22,240
detecting error handling bugs

6
00:00:22,240 --> 00:00:24,320
incorrect error handling is a major

7
00:00:24,320 --> 00:00:26,560
source of security flaws in fact the

8
00:00:26,560 --> 00:00:28,720
open web application security project

9
00:00:28,720 --> 00:00:31,039
ranked it as one of its top ten

10
00:00:31,039 --> 00:00:32,880
and as you can see here

11
00:00:32,880 --> 00:00:35,040
it's been behind a lot of

12
00:00:35,040 --> 00:00:37,360
bugs that have been serious enough to

13
00:00:37,360 --> 00:00:40,719
warrant their own cves

14
00:00:41,040 --> 00:00:42,960
these bugs are especially problematic in

15
00:00:42,960 --> 00:00:43,760
c

16
00:00:43,760 --> 00:00:44,800
why

17
00:00:44,800 --> 00:00:46,719
because unlike java you don't have

18
00:00:46,719 --> 00:00:48,960
built-in exception handling mechanisms

19
00:00:48,960 --> 00:00:51,039
and see you bring your own exception

20
00:00:51,039 --> 00:00:52,800
handling mechanisms

21
00:00:52,800 --> 00:00:55,920
for example here we have func 1 return 0

22
00:00:55,920 --> 00:00:58,160
for error while func 2 returns a no

23
00:00:58,160 --> 00:01:00,559
pointer for error

24
00:01:00,559 --> 00:01:02,800
keeping up with all these conventions is

25
00:01:02,800 --> 00:01:05,280
tedious and hard to get right especially

26
00:01:05,280 --> 00:01:08,479
when you're busy programming

27
00:01:09,040 --> 00:01:10,640
how bad can it be

28
00:01:10,640 --> 00:01:13,119
this is how bad it can be

29
00:01:13,119 --> 00:01:15,040
this is one of the many cds i just

30
00:01:15,040 --> 00:01:16,159
listed

31
00:01:16,159 --> 00:01:18,560
it happens in new tls one of the popular

32
00:01:18,560 --> 00:01:20,400
tls libraries

33
00:01:20,400 --> 00:01:23,200
here the program calls check fca

34
00:01:23,200 --> 00:01:25,040
that function checks if a certificate

35
00:01:25,040 --> 00:01:27,680
belongs to a certificate authority

36
00:01:27,680 --> 00:01:29,840
figuring out this property correctly is

37
00:01:29,840 --> 00:01:32,000
very important because a certificate

38
00:01:32,000 --> 00:01:33,680
authority can issue arbitrary

39
00:01:33,680 --> 00:01:35,200
certificates

40
00:01:35,200 --> 00:01:36,720
that means if we have a malicious

41
00:01:36,720 --> 00:01:38,400
authority

42
00:01:38,400 --> 00:01:40,880
that authority can pretend to be anybody

43
00:01:40,880 --> 00:01:42,799
by just issuing a certificate for that

44
00:01:42,799 --> 00:01:44,720
party

45
00:01:44,720 --> 00:01:46,960
as we see the program checks is check if

46
00:01:46,960 --> 00:01:50,240
ca returns zero that would mean that the

47
00:01:50,240 --> 00:01:52,079
certificate says that it does not belong

48
00:01:52,079 --> 00:01:54,560
to a certificate authority

49
00:01:54,560 --> 00:01:56,960
and that sounds pretty reasonable

50
00:01:56,960 --> 00:01:58,000
but

51
00:01:58,000 --> 00:01:59,920
what happens if the certificate does not

52
00:01:59,920 --> 00:02:02,960
say anything because it's malformed

53
00:02:02,960 --> 00:02:05,920
let's actually see what check if ca does

54
00:02:05,920 --> 00:02:08,720
we see that if an error happens result

55
00:02:08,720 --> 00:02:10,800
is less than zero and when it's less

56
00:02:10,800 --> 00:02:12,879
than zero the function skips right to

57
00:02:12,879 --> 00:02:15,599
the end and returns that value

58
00:02:15,599 --> 00:02:16,959
unfortunately

59
00:02:16,959 --> 00:02:18,239
the caller does not check for the

60
00:02:18,239 --> 00:02:21,760
negative value result is set to one even

61
00:02:21,760 --> 00:02:22,879
though that

62
00:02:22,879 --> 00:02:24,160
even though the

63
00:02:24,160 --> 00:02:26,480
even though the certificate is malformed

64
00:02:26,480 --> 00:02:27,760
and does not actually belong to a

65
00:02:27,760 --> 00:02:29,520
certificate authority

66
00:02:29,520 --> 00:02:32,080
that means an attacker can just spoof

67
00:02:32,080 --> 00:02:34,720
anybody by just issuing a malformed

68
00:02:34,720 --> 00:02:37,720
certificate

69
00:02:40,160 --> 00:02:42,000
well if this is so bad then why don't

70
00:02:42,000 --> 00:02:43,920
existing tools check these

71
00:02:43,920 --> 00:02:45,360
there are a couple of problems when

72
00:02:45,360 --> 00:02:48,640
dealing with error handling bugs

73
00:02:48,640 --> 00:02:50,400
first they rarely show up during regular

74
00:02:50,400 --> 00:02:53,680
execution so traditional testing and

75
00:02:53,680 --> 00:02:56,640
static and dynamic analysis will be hard

76
00:02:56,640 --> 00:02:58,560
because most of the errors don't ever

77
00:02:58,560 --> 00:03:00,560
show up

78
00:03:00,560 --> 00:03:03,519
second even if you do find the bugs most

79
00:03:03,519 --> 00:03:05,120
of the time the crashes aren't going to

80
00:03:05,120 --> 00:03:07,440
be something obvious like a crash

81
00:03:07,440 --> 00:03:09,360
even though they do produce incorrect

82
00:03:09,360 --> 00:03:10,720
results

83
00:03:10,720 --> 00:03:13,200
that means we need some kind of air

84
00:03:13,200 --> 00:03:15,840
oracle that tests if the error is being

85
00:03:15,840 --> 00:03:17,360
handled correctly

86
00:03:17,360 --> 00:03:20,000
and yes you can sit down manually for

87
00:03:20,000 --> 00:03:21,680
every function say

88
00:03:21,680 --> 00:03:23,200
okay this is how it should be handled

89
00:03:23,200 --> 00:03:24,959
and if it's not handled like that then

90
00:03:24,959 --> 00:03:27,599
we have a bug but that's very tedious

91
00:03:27,599 --> 00:03:29,760
and not very scalable we need something

92
00:03:29,760 --> 00:03:31,519
that's more general to any kinds of

93
00:03:31,519 --> 00:03:34,480
programs that we want to check

94
00:03:34,480 --> 00:03:36,799
related to that problem is the issue of

95
00:03:36,799 --> 00:03:39,200
bug localization we don't only want to

96
00:03:39,200 --> 00:03:40,959
know that there is a bug if we ever hope

97
00:03:40,959 --> 00:03:42,959
to find it we need to know what caused

98
00:03:42,959 --> 00:03:45,360
it the problem is especially for these

99
00:03:45,360 --> 00:03:47,120
kinds of silent bugs is

100
00:03:47,120 --> 00:03:50,319
if they do appear they appear way after

101
00:03:50,319 --> 00:03:52,640
the cause actually happened and that

102
00:03:52,640 --> 00:03:56,319
makes localization very hard

103
00:03:57,519 --> 00:03:59,519
this is where apex comes in

104
00:03:59,519 --> 00:04:00,799
it is

105
00:04:00,799 --> 00:04:03,040
an automatic tool for detecting air

106
00:04:03,040 --> 00:04:06,079
handling mechanisms

107
00:04:06,560 --> 00:04:09,360
it stands for airpath exploration

108
00:04:09,360 --> 00:04:10,959
because we need to explore different

109
00:04:10,959 --> 00:04:12,640
paths

110
00:04:12,640 --> 00:04:15,200
problem is there are a lot of paths

111
00:04:15,200 --> 00:04:19,120
how do we cut down to what's necessary

112
00:04:20,160 --> 00:04:21,918
we

113
00:04:21,918 --> 00:04:23,919
we perform under constrained symbolic

114
00:04:23,919 --> 00:04:26,560
execution in particular we only look at

115
00:04:26,560 --> 00:04:29,040
the color of the test function that

116
00:04:29,040 --> 00:04:30,320
could fail

117
00:04:30,320 --> 00:04:32,400
and yes because we don't do full

118
00:04:32,400 --> 00:04:34,560
symbolic execution that's going to

119
00:04:34,560 --> 00:04:36,320
introduce a lot of

120
00:04:36,320 --> 00:04:37,840
paths that might not actually be

121
00:04:37,840 --> 00:04:39,680
feasible

122
00:04:39,680 --> 00:04:41,440
but it's a good trade-off because as we

123
00:04:41,440 --> 00:04:42,479
will see

124
00:04:42,479 --> 00:04:44,400
most of the error handling only happens

125
00:04:44,400 --> 00:04:46,160
during the collar or

126
00:04:46,160 --> 00:04:49,759
if not then it's probably too late

127
00:04:50,479 --> 00:04:52,720
and amongst those shorter paths we only

128
00:04:52,720 --> 00:04:54,960
look at those data error paths what do i

129
00:04:54,960 --> 00:04:57,520
mean by error path error paths are those

130
00:04:57,520 --> 00:05:00,000
paths where the test function could have

131
00:05:00,000 --> 00:05:02,160
returned an error code how do we know

132
00:05:02,160 --> 00:05:04,560
that we have an error specification that

133
00:05:04,560 --> 00:05:06,720
says for each test function what kind of

134
00:05:06,720 --> 00:05:11,400
values it can return for an error

135
00:05:12,479 --> 00:05:14,479
okay now we have our

136
00:05:14,479 --> 00:05:17,199
now we have our error path how we do we

137
00:05:17,199 --> 00:05:19,440
figure out if something is a bug

138
00:05:19,440 --> 00:05:21,039
we look at if the error is handled

139
00:05:21,039 --> 00:05:22,080
properly

140
00:05:22,080 --> 00:05:24,479
and to do that we consider three general

141
00:05:24,479 --> 00:05:27,520
error handling methods

142
00:05:27,919 --> 00:05:30,080
the first method is just logging the

143
00:05:30,080 --> 00:05:31,840
second method is passing the error

144
00:05:31,840 --> 00:05:33,280
upstream through

145
00:05:33,280 --> 00:05:36,160
say return value or

146
00:05:36,160 --> 00:05:39,479
another method

147
00:05:39,520 --> 00:05:41,680
or more drastically the program

148
00:05:41,680 --> 00:05:43,919
terminates with an error code

149
00:05:43,919 --> 00:05:45,840
if none of these happen we say that the

150
00:05:45,840 --> 00:05:49,679
error is unhandled and we have a bug

151
00:05:51,280 --> 00:05:53,280
okay i glossed over some details about

152
00:05:53,280 --> 00:05:55,440
passing the air upstream because

153
00:05:55,440 --> 00:05:56,880
the error does not always have to be

154
00:05:56,880 --> 00:06:00,080
completely exactly passed upstream

155
00:06:00,080 --> 00:06:01,840
sometimes it's perfectly okay if there

156
00:06:01,840 --> 00:06:03,600
are some transformations done by the

157
00:06:03,600 --> 00:06:06,400
caller in returning an error code how do

158
00:06:06,400 --> 00:06:08,560
we handle that

159
00:06:08,560 --> 00:06:10,960
that is why in our air specifications we

160
00:06:10,960 --> 00:06:13,440
also include an error protocol

161
00:06:13,440 --> 00:06:16,000
and that is something that the program

162
00:06:16,000 --> 00:06:18,160
follows

163
00:06:18,160 --> 00:06:20,319
what i mean by that is that the

164
00:06:20,319 --> 00:06:22,479
color functions in the program

165
00:06:22,479 --> 00:06:24,080
you

166
00:06:24,080 --> 00:06:26,240
have followed this particular protocol

167
00:06:26,240 --> 00:06:29,039
by returning error values that have to

168
00:06:29,039 --> 00:06:31,360
fall inside a particular range

169
00:06:31,360 --> 00:06:34,479
so as long as a caller returns a value

170
00:06:34,479 --> 00:06:36,319
inside that particular range then we

171
00:06:36,319 --> 00:06:38,720
consider the error as being pocket

172
00:06:38,720 --> 00:06:41,520
propagated and

173
00:06:46,840 --> 00:06:49,199
handled now the way we focus on the

174
00:06:49,199 --> 00:06:51,199
collar makes it very easy to localize

175
00:06:51,199 --> 00:06:53,120
the bug because

176
00:06:53,120 --> 00:06:56,479
we consider the bug to happen at

177
00:06:56,479 --> 00:06:58,720
wherever the caller first stopped

178
00:06:58,720 --> 00:07:00,639
handling the error

179
00:07:00,639 --> 00:07:02,639
because if it doesn't handle the air and

180
00:07:02,639 --> 00:07:04,960
doesn't even propagate the air upwards

181
00:07:04,960 --> 00:07:06,960
then there's no real

182
00:07:06,960 --> 00:07:08,880
reliable information afterwards that let

183
00:07:08,880 --> 00:07:12,719
us know how to handle the error

184
00:07:15,360 --> 00:07:17,520
but no tool is perfect and apex will

185
00:07:17,520 --> 00:07:19,680
make mistakes if the error spec or path

186
00:07:19,680 --> 00:07:22,479
exploration is wrong if the error spec

187
00:07:22,479 --> 00:07:24,880
is wrong then some paths will be wrongly

188
00:07:24,880 --> 00:07:27,120
classified as error paths if path

189
00:07:27,120 --> 00:07:30,000
exploration is in

190
00:07:30,000 --> 00:07:31,280
if path

191
00:07:31,280 --> 00:07:33,360
exploration is incorrect then some

192
00:07:33,360 --> 00:07:36,639
infeasible buggy paths will appear

193
00:07:36,639 --> 00:07:38,880
these imperfections will generate false

194
00:07:38,880 --> 00:07:41,039
positives so we need to cut them down

195
00:07:41,039 --> 00:07:43,280
somehow

196
00:07:43,280 --> 00:07:45,680
to do that we compare across the call

197
00:07:45,680 --> 00:07:48,319
sites of the same test function

198
00:07:48,319 --> 00:07:49,280
that

199
00:07:49,280 --> 00:07:51,280
lets us find inconsistencies in error

200
00:07:51,280 --> 00:07:53,199
handling and that's how we prioritize

201
00:07:53,199 --> 00:07:54,720
them for reporting

202
00:07:54,720 --> 00:07:56,000
for example

203
00:07:56,000 --> 00:07:58,479
if the failure of a function is ignored

204
00:07:58,479 --> 00:08:00,879
and all the call sides we do not report

205
00:08:00,879 --> 00:08:03,120
them

206
00:08:05,039 --> 00:08:08,719
so this is how all the paths

207
00:08:10,080 --> 00:08:13,400
excuse me

208
00:08:22,319 --> 00:08:25,319
okay

209
00:08:27,919 --> 00:08:30,919
so

210
00:08:49,680 --> 00:08:52,680
so

211
00:08:57,360 --> 00:09:00,360
so

212
00:09:16,160 --> 00:09:19,760
oh might just be that slide

213
00:09:19,920 --> 00:09:22,920
weird

214
00:09:23,279 --> 00:09:24,959
okay well

215
00:09:24,959 --> 00:09:27,680
that's embarrassing

216
00:09:28,320 --> 00:09:31,760
well where was i

217
00:09:31,760 --> 00:09:33,760
anyways

218
00:09:33,760 --> 00:09:35,600
but you just saw what's the summary of

219
00:09:35,600 --> 00:09:37,040
happen to be the summary of all the

220
00:09:37,040 --> 00:09:38,800
parts i just mentioned so

221
00:09:38,800 --> 00:09:41,040
well you already know about them but

222
00:09:41,040 --> 00:09:42,320
point is the

223
00:09:42,320 --> 00:09:44,080
user inputs the

224
00:09:44,080 --> 00:09:44,800
the

225
00:09:44,800 --> 00:09:47,120
user inputs the code and the error

226
00:09:47,120 --> 00:09:50,320
specifications which lists what all the

227
00:09:50,320 --> 00:09:53,440
error values are for the functions and

228
00:09:53,440 --> 00:09:55,040
as well as the error protocol for the

229
00:09:55,040 --> 00:09:56,560
whole program

230
00:09:56,560 --> 00:09:58,320
and eventually that passes through all

231
00:09:58,320 --> 00:10:00,080
the different steps until the user gets

232
00:10:00,080 --> 00:10:02,720
a final bug report

233
00:10:02,720 --> 00:10:05,120
now let's see how epex works by using an

234
00:10:05,120 --> 00:10:07,600
example let's look at the new tls bug

235
00:10:07,600 --> 00:10:10,480
that we talked about earlier

236
00:10:10,480 --> 00:10:12,240
we started doing under-constrained

237
00:10:12,240 --> 00:10:15,120
symbolic execution inside the collar

238
00:10:15,120 --> 00:10:18,720
and because it caused collar because it

239
00:10:18,720 --> 00:10:20,720
because it calls check fca

240
00:10:20,720 --> 00:10:23,839
we symbolically execute that one also so

241
00:10:23,839 --> 00:10:26,480
let's look inside

242
00:10:26,480 --> 00:10:28,720
let's see what happens if result is not

243
00:10:28,720 --> 00:10:31,680
negative when that happens result is set

244
00:10:31,680 --> 00:10:34,079
to 0 and returned

245
00:10:34,079 --> 00:10:36,640
now we look at our air specification we

246
00:10:36,640 --> 00:10:38,959
see that check if ca returns a negative

247
00:10:38,959 --> 00:10:41,519
value for an error that means the 0 is

248
00:10:41,519 --> 00:10:44,240
not an error code and this path is not

249
00:10:44,240 --> 00:10:46,399
actually an error path and we stop

250
00:10:46,399 --> 00:10:49,279
exploring it here

251
00:10:50,480 --> 00:10:52,320
now let's see what happens inside check

252
00:10:52,320 --> 00:10:53,360
if ca

253
00:10:53,360 --> 00:10:56,240
if the result value is less than zero

254
00:10:56,240 --> 00:10:58,000
then the function skips to the end

255
00:10:58,000 --> 00:11:01,200
returns the same negative value and

256
00:11:01,200 --> 00:11:03,519
we know because it's a negative value

257
00:11:03,519 --> 00:11:05,839
that we have an error path and we have

258
00:11:05,839 --> 00:11:07,600
to make sure that the error is handled

259
00:11:07,600 --> 00:11:09,760
within the caller

260
00:11:09,760 --> 00:11:12,240
but we see that result is set to 1 and

261
00:11:12,240 --> 00:11:13,680
returned

262
00:11:13,680 --> 00:11:15,760
and if we look at our air specification

263
00:11:15,760 --> 00:11:18,800
the error protocol for new tls says that

264
00:11:18,800 --> 00:11:20,880
one is actually the one value that is

265
00:11:20,880 --> 00:11:23,040
not an error value

266
00:11:23,040 --> 00:11:24,800
now we have not come across any exit

267
00:11:24,800 --> 00:11:26,640
functions we have not come across any

268
00:11:26,640 --> 00:11:29,920
warning or error logging functions that

269
00:11:29,920 --> 00:11:32,480
means that this error is unhandled and

270
00:11:32,480 --> 00:11:35,839
we actually do have a bug

271
00:11:38,240 --> 00:11:39,519
now i've been talking about air

272
00:11:39,519 --> 00:11:41,279
specifications so much you're probably

273
00:11:41,279 --> 00:11:43,040
starting to wonder how hard is it to

274
00:11:43,040 --> 00:11:45,760
create that and my answer is not that

275
00:11:45,760 --> 00:11:48,560
hard because most functions only follow

276
00:11:48,560 --> 00:11:50,720
a few or

277
00:11:50,720 --> 00:11:53,920
only if most functions only follow a few

278
00:11:53,920 --> 00:11:54,959
error

279
00:11:54,959 --> 00:11:56,959
codes

280
00:11:56,959 --> 00:11:59,360
usually they just return some kind of

281
00:11:59,360 --> 00:12:01,680
macros or enums and that's how we can

282
00:12:01,680 --> 00:12:04,079
easily figure out what kind of

283
00:12:04,079 --> 00:12:06,560
error codes the function can return

284
00:12:06,560 --> 00:12:07,600
in fact

285
00:12:07,600 --> 00:12:09,440
we created

286
00:12:09,440 --> 00:12:11,519
airspace we created air specifications

287
00:12:11,519 --> 00:12:15,360
for 256 functions but there are only 38

288
00:12:15,360 --> 00:12:17,519
unique specifications

289
00:12:17,519 --> 00:12:19,519
and the table shows for some of the

290
00:12:19,519 --> 00:12:20,880
programs some of the common error

291
00:12:20,880 --> 00:12:24,680
conventions that we saw

292
00:12:24,959 --> 00:12:26,720
reusability gets even better while

293
00:12:26,720 --> 00:12:28,480
testing library functions that are used

294
00:12:28,480 --> 00:12:31,200
across many applications because then we

295
00:12:31,200 --> 00:12:33,760
can use the same air specifications for

296
00:12:33,760 --> 00:12:35,839
all those applications

297
00:12:35,839 --> 00:12:38,880
and finally we do have an automated

298
00:12:38,880 --> 00:12:41,360
way of generating error specifications

299
00:12:41,360 --> 00:12:43,120
automatically

300
00:12:43,120 --> 00:12:45,760
we created a tool called apex and we'll

301
00:12:45,760 --> 00:12:47,920
actually be talking about that at

302
00:12:47,920 --> 00:12:50,639
another conference called ase actually

303
00:12:50,639 --> 00:12:52,320
it's

304
00:12:52,320 --> 00:12:54,880
next month it's on automated software

305
00:12:54,880 --> 00:12:57,360
engineering

306
00:13:01,279 --> 00:13:02,639
now that's

307
00:13:02,639 --> 00:13:05,279
it for the principles behind apex to put

308
00:13:05,279 --> 00:13:07,600
it to use we implemented a client

309
00:13:07,600 --> 00:13:08,959
checker

310
00:13:08,959 --> 00:13:11,519
client contains a static analyzer engine

311
00:13:11,519 --> 00:13:12,800
that lets us do under-constrained

312
00:13:12,800 --> 00:13:15,200
symbolic execution on c code

313
00:13:15,200 --> 00:13:17,200
and it also lets you plug in your own

314
00:13:17,200 --> 00:13:19,200
checker which is a class where you

315
00:13:19,200 --> 00:13:20,720
overwrite certain

316
00:13:20,720 --> 00:13:23,120
callback functions to interpose the path

317
00:13:23,120 --> 00:13:25,200
exploration and check the symbolic state

318
00:13:25,200 --> 00:13:27,279
during symbolic execution

319
00:13:27,279 --> 00:13:29,920
these are some of the callbacks we used

320
00:13:29,920 --> 00:13:32,639
the checker itself is 617 lines of c

321
00:13:32,639 --> 00:13:34,880
plus plus code and the last filtering

322
00:13:34,880 --> 00:13:39,839
step is a python script with 227 lines

323
00:13:40,959 --> 00:13:44,880
we ran epex on 867 000 lines of c code

324
00:13:44,880 --> 00:13:47,760
we used apex on nine popular open source

325
00:13:47,760 --> 00:13:49,440
software projects

326
00:13:49,440 --> 00:13:50,800
four of them are

327
00:13:50,800 --> 00:13:53,519
new well four of them are ssl or tls

328
00:13:53,519 --> 00:13:55,199
libraries

329
00:13:55,199 --> 00:13:57,120
the other five applications that use

330
00:13:57,120 --> 00:13:59,920
openssl

331
00:14:01,360 --> 00:14:03,680
here's a brief summary of the results

332
00:14:03,680 --> 00:14:08,639
epecs reported 132 bugs out of those 102

333
00:14:08,639 --> 00:14:11,199
of them were real and 28 of them were

334
00:14:11,199 --> 00:14:12,800
false positives

335
00:14:12,800 --> 00:14:17,199
that's a precision of 78 percent

336
00:14:17,199 --> 00:14:20,160
that's it for how precise apex is now

337
00:14:20,160 --> 00:14:23,519
how fast is it here are their runtimes

338
00:14:23,519 --> 00:14:26,880
the leftmost column

339
00:14:27,839 --> 00:14:30,000
the leftmost column says which programs

340
00:14:30,000 --> 00:14:31,199
we looked at

341
00:14:31,199 --> 00:14:34,399
the first call the second column

342
00:14:34,399 --> 00:14:35,839
gives the time

343
00:14:35,839 --> 00:14:37,920
the second column gives the time for

344
00:14:37,920 --> 00:14:40,079
compiling the project without any

345
00:14:40,079 --> 00:14:41,279
checkers

346
00:14:41,279 --> 00:14:43,519
the third column says how long it took

347
00:14:43,519 --> 00:14:45,279
to use the division by zero checker

348
00:14:45,279 --> 00:14:47,199
which is another checker that comes with

349
00:14:47,199 --> 00:14:48,320
clang

350
00:14:48,320 --> 00:14:51,600
the last column is our time for epex

351
00:14:51,600 --> 00:14:53,760
as you can see epex is actually slightly

352
00:14:53,760 --> 00:14:55,680
faster than the standard

353
00:14:55,680 --> 00:14:57,920
epex is slightly faster than the sample

354
00:14:57,920 --> 00:14:59,839
checker that comes with clang that's

355
00:14:59,839 --> 00:15:02,639
because we only look at the error path

356
00:15:02,639 --> 00:15:05,199
and yes it is also much slower than not

357
00:15:05,199 --> 00:15:07,680
having a check at all but it's

358
00:15:07,680 --> 00:15:09,040
but it's still fast enough to be

359
00:15:09,040 --> 00:15:11,199
integrated into processes like nightly

360
00:15:11,199 --> 00:15:13,519
builds

361
00:15:14,720 --> 00:15:16,720
now on to some real bugs note that all

362
00:15:16,720 --> 00:15:18,160
these bugs have been reported and

363
00:15:18,160 --> 00:15:20,720
confirmed by the developers

364
00:15:20,720 --> 00:15:22,800
in the first example

365
00:15:22,800 --> 00:15:24,959
we see that the error is not checked in

366
00:15:24,959 --> 00:15:27,279
the highlighted code in fact the return

367
00:15:27,279 --> 00:15:29,199
value is not even red

368
00:15:29,199 --> 00:15:31,519
when the output is used later corrupted

369
00:15:31,519 --> 00:15:34,320
data will be read instead

370
00:15:34,320 --> 00:15:36,480
well it's pretty easy to check if no

371
00:15:36,480 --> 00:15:38,560
check is happening but let's see what

372
00:15:38,560 --> 00:15:40,399
happens if

373
00:15:40,399 --> 00:15:42,079
let's see what happens when there is a

374
00:15:42,079 --> 00:15:44,320
check but the correct value is not

375
00:15:44,320 --> 00:15:45,680
checked

376
00:15:45,680 --> 00:15:47,279
so here

377
00:15:47,279 --> 00:15:49,920
rand sudovice is called and it returns 0

378
00:15:49,920 --> 00:15:52,160
or negative 1 for an error

379
00:15:52,160 --> 00:15:53,839
when that happens you really don't want

380
00:15:53,839 --> 00:15:55,519
to use its output because that means

381
00:15:55,519 --> 00:15:57,680
your secret or random value will not be

382
00:15:57,680 --> 00:16:00,079
random

383
00:16:00,079 --> 00:16:02,720
here the value is

384
00:16:02,720 --> 00:16:03,759
here the

385
00:16:03,759 --> 00:16:05,519
initialization vector is supposed to be

386
00:16:05,519 --> 00:16:06,720
randomized

387
00:16:06,720 --> 00:16:08,399
and the caller only checks for the

388
00:16:08,399 --> 00:16:12,079
negative value not the zero value

389
00:16:12,079 --> 00:16:13,839
that means that the initialization

390
00:16:13,839 --> 00:16:15,759
vector might not be random which will

391
00:16:15,759 --> 00:16:20,360
make the encryption much easier to break

392
00:16:24,639 --> 00:16:26,800
the last two bugs are especially tricky

393
00:16:26,800 --> 00:16:29,600
because the checking is correct but the

394
00:16:29,600 --> 00:16:32,079
handling is not

395
00:16:32,079 --> 00:16:33,519
in this function

396
00:16:33,519 --> 00:16:35,440
we have the caller trying to generate a

397
00:16:35,440 --> 00:16:37,839
key it does an exponentiation function

398
00:16:37,839 --> 00:16:40,880
that can fail and if it does fail it

399
00:16:40,880 --> 00:16:43,199
returns the variable s

400
00:16:43,199 --> 00:16:45,680
now according to our error protocol a

401
00:16:45,680 --> 00:16:47,600
function that returns a pointer should

402
00:16:47,600 --> 00:16:49,519
return a no value

403
00:16:49,519 --> 00:16:50,800
but

404
00:16:50,800 --> 00:16:52,880
if we have reached this exponentiation

405
00:16:52,880 --> 00:16:55,759
stage that means that

406
00:16:55,759 --> 00:16:58,480
we have actually allocated s properly

407
00:16:58,480 --> 00:17:00,320
and when returning it we're returning

408
00:17:00,320 --> 00:17:02,160
something that is not null and looks

409
00:17:02,160 --> 00:17:04,559
proper even though because we skipped to

410
00:17:04,559 --> 00:17:07,439
the end so

411
00:17:07,439 --> 00:17:09,839
it looks like that s is valid but the

412
00:17:09,839 --> 00:17:11,919
value is but the value is not even

413
00:17:11,919 --> 00:17:14,559
initialized that means uh we our key is

414
00:17:14,559 --> 00:17:18,760
going to be either weak or broken

415
00:17:20,959 --> 00:17:23,679
this last bug happens in new tls as part

416
00:17:23,679 --> 00:17:25,599
of the online certificates

417
00:17:25,599 --> 00:17:27,919
as part of the online certificate status

418
00:17:27,919 --> 00:17:30,320
protocol this is responsible for

419
00:17:30,320 --> 00:17:33,600
revoking certificates

420
00:17:33,600 --> 00:17:35,679
in case of an error what should happen

421
00:17:35,679 --> 00:17:36,640
is

422
00:17:36,640 --> 00:17:39,120
the time value that's

423
00:17:39,120 --> 00:17:41,280
the time value which is a parameter

424
00:17:41,280 --> 00:17:42,240
pointer

425
00:17:42,240 --> 00:17:44,320
and the return value should both

426
00:17:44,320 --> 00:17:46,799
indicate some kind of error but as you

427
00:17:46,799 --> 00:17:48,160
can see here

428
00:17:48,160 --> 00:17:50,480
only the time value is set to a negative

429
00:17:50,480 --> 00:17:52,320
value but

430
00:17:52,320 --> 00:17:53,760
the value that's being returned

431
00:17:53,760 --> 00:17:56,160
indicates success

432
00:17:56,160 --> 00:17:59,039
it gets problematic when we see when

433
00:17:59,039 --> 00:18:00,960
it gets problematic when you see where

434
00:18:00,960 --> 00:18:02,480
it's being used

435
00:18:02,480 --> 00:18:04,080
in the caller

436
00:18:04,080 --> 00:18:06,799
only the return value is checked and the

437
00:18:06,799 --> 00:18:09,280
time is used

438
00:18:09,280 --> 00:18:10,080
and

439
00:18:10,080 --> 00:18:12,400
at the bottom we see the comparison and

440
00:18:12,400 --> 00:18:14,400
that's not correct because

441
00:18:14,400 --> 00:18:18,559
it is using an invalid time value

442
00:18:24,080 --> 00:18:26,400
now this is it for

443
00:18:26,400 --> 00:18:28,799
the bugs that we've seen that

444
00:18:28,799 --> 00:18:33,200
apex reported now let's look at it

445
00:18:35,919 --> 00:18:36,720
yeah

446
00:18:36,720 --> 00:18:38,240
now that we have looked at the bugs that

447
00:18:38,240 --> 00:18:39,919
apex found let's look at the false

448
00:18:39,919 --> 00:18:40,960
positive

449
00:18:40,960 --> 00:18:44,000
that apex reported

450
00:18:44,000 --> 00:18:46,400
we noticed that many of the false pauses

451
00:18:46,400 --> 00:18:47,919
because of limitations of client

452
00:18:47,919 --> 00:18:49,919
symbolic execution engine

453
00:18:49,919 --> 00:18:51,919
client only looks at one source file at

454
00:18:51,919 --> 00:18:52,960
a time

455
00:18:52,960 --> 00:18:56,640
so if we have multiple files and we have

456
00:18:56,640 --> 00:18:58,559
one file calling a function that is

457
00:18:58,559 --> 00:19:00,880
defined another file then client will

458
00:19:00,880 --> 00:19:03,200
not do symbolic execution

459
00:19:03,200 --> 00:19:05,919
in that called function

460
00:19:05,919 --> 00:19:07,520
and that's going to lose a lot of

461
00:19:07,520 --> 00:19:09,039
information that we could have otherwise

462
00:19:09,039 --> 00:19:11,679
used

463
00:19:11,679 --> 00:19:12,720
here

464
00:19:12,720 --> 00:19:14,720
on the right side we see the caller

465
00:19:14,720 --> 00:19:16,400
calling the function

466
00:19:16,400 --> 00:19:18,640
x509 get serial number

467
00:19:18,640 --> 00:19:20,640
and that function can return a null

468
00:19:20,640 --> 00:19:23,039
value for an error

469
00:19:23,039 --> 00:19:25,919
and that potentially no value is called

470
00:19:25,919 --> 00:19:28,559
to the integer duplication function

471
00:19:28,559 --> 00:19:29,600
and

472
00:19:29,600 --> 00:19:31,200
that might look pretty bad because you

473
00:19:31,200 --> 00:19:32,960
know you might be dereferencing a null

474
00:19:32,960 --> 00:19:34,799
value but

475
00:19:34,799 --> 00:19:36,320
if you are looking

476
00:19:36,320 --> 00:19:39,679
at the source code we see that actually

477
00:19:39,679 --> 00:19:40,960
the

478
00:19:40,960 --> 00:19:43,520
string value the potentially no value is

479
00:19:43,520 --> 00:19:45,600
being checked and when that's being

480
00:19:45,600 --> 00:19:47,679
checked and it's null

481
00:19:47,679 --> 00:19:50,960
then the function returns

482
00:19:50,960 --> 00:19:53,600
no back to the caller which as we can

483
00:19:53,600 --> 00:19:55,760
see it actually checks for the

484
00:19:55,760 --> 00:19:58,799
value so we actually know that

485
00:19:58,799 --> 00:20:01,360
if we had seen that

486
00:20:01,360 --> 00:20:03,840
the second function actually returns no

487
00:20:03,840 --> 00:20:04,640
for

488
00:20:04,640 --> 00:20:06,880
an error input then we would have known

489
00:20:06,880 --> 00:20:09,280
that it's checked

490
00:20:09,280 --> 00:20:11,280
luckily this is not a fundamental

491
00:20:11,280 --> 00:20:13,520
problem of apex

492
00:20:13,520 --> 00:20:15,760
apex is not tied to clang it is

493
00:20:15,760 --> 00:20:17,840
applicable to any symbolic execution

494
00:20:17,840 --> 00:20:20,720
engine so as symbolic execution engines

495
00:20:20,720 --> 00:20:22,720
improve we will have less of these false

496
00:20:22,720 --> 00:20:25,280
positives

497
00:20:28,480 --> 00:20:30,240
to sum it all up

498
00:20:30,240 --> 00:20:32,159
improper error handling is a silent but

499
00:20:32,159 --> 00:20:33,440
deadly problem

500
00:20:33,440 --> 00:20:35,840
as you saw it's behind a lot of

501
00:20:35,840 --> 00:20:38,240
security as you saw it's behind a lot of

502
00:20:38,240 --> 00:20:40,559
serious security vulnerabilities

503
00:20:40,559 --> 00:20:43,039
but it is also tricky to find with

504
00:20:43,039 --> 00:20:44,960
existing tools in a scalable and

505
00:20:44,960 --> 00:20:47,600
reliable fashion

506
00:20:47,600 --> 00:20:50,159
epec scalably handles the problems of

507
00:20:50,159 --> 00:20:52,960
detecting and localizing these bugs

508
00:20:52,960 --> 00:20:55,600
i encourage you to start using it now it

509
00:20:55,600 --> 00:20:57,919
our code is available on github

510
00:20:57,919 --> 00:20:59,120
thank you

511
00:20:59,120 --> 00:21:00,480
and at this time i would like to take

512
00:21:00,480 --> 00:21:02,370
any questions

513
00:21:02,370 --> 00:21:09,620
[Applause]

514
00:21:22,480 --> 00:21:25,200
how much does your work rely on

515
00:21:25,200 --> 00:21:29,799
good test coverage for these libraries

516
00:21:31,200 --> 00:21:33,520
you're saying that

517
00:21:33,520 --> 00:21:35,280
what do you mean by test coverage of

518
00:21:35,280 --> 00:21:37,039
libraries oh you were saying you used

519
00:21:37,039 --> 00:21:39,360
symbolic execution to trace the error

520
00:21:39,360 --> 00:21:41,520
propagation oh yeah

521
00:21:41,520 --> 00:21:44,159
so does this rely on these libraries

522
00:21:44,159 --> 00:21:47,120
already having a test harness that you

523
00:21:47,120 --> 00:21:50,080
piggyback on or oh no we don't use those

524
00:21:50,080 --> 00:21:52,240
what we use is okay so we're talking

525
00:21:52,240 --> 00:21:54,640
about clang right and it actually comes

526
00:21:54,640 --> 00:21:57,440
with a script that lets us

527
00:21:57,440 --> 00:21:59,520
that lets us hook into the build build

528
00:21:59,520 --> 00:22:02,080
environment for say the make file and

529
00:22:02,080 --> 00:22:03,360
replace

530
00:22:03,360 --> 00:22:05,520
certain environment variables and such

531
00:22:05,520 --> 00:22:08,000
that lets us pretty much run client

532
00:22:08,000 --> 00:22:10,720
alongside the compiler so the

533
00:22:10,720 --> 00:22:13,200
checking is done during compilation so

534
00:22:13,200 --> 00:22:15,520
we don't actually look at testing and

535
00:22:15,520 --> 00:22:16,400
usually

536
00:22:16,400 --> 00:22:17,919
maybe looking at testing might be a bad

537
00:22:17,919 --> 00:22:19,840
idea because there they might not care

538
00:22:19,840 --> 00:22:21,760
as much about error handling as in real

539
00:22:21,760 --> 00:22:24,760
usage

540
00:22:26,720 --> 00:22:29,360
justin capos nyu um

541
00:22:29,360 --> 00:22:30,080
so

542
00:22:30,080 --> 00:22:32,480
did you disclose these bugs to the

543
00:22:32,480 --> 00:22:34,320
vendors and what was their response did

544
00:22:34,320 --> 00:22:36,159
they confirm all the

545
00:22:36,159 --> 00:22:40,360
the bugs that you had listed there

546
00:22:47,200 --> 00:22:51,559
okay let's thank the speaker again

547
00:22:58,480 --> 00:23:00,559
you

