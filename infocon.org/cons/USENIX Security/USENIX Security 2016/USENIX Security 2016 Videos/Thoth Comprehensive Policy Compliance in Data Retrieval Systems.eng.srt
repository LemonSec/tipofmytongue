1
00:00:11,120 --> 00:00:13,678
hi everyone

2
00:00:14,240 --> 00:00:16,079
so i will talk to you about thought a

3
00:00:16,079 --> 00:00:17,920
project we have developed at max flank

4
00:00:17,920 --> 00:00:20,080
institute for software systems to ensure

5
00:00:20,080 --> 00:00:22,000
policy compliance and data retrieval

6
00:00:22,000 --> 00:00:24,400
systems

7
00:00:25,519 --> 00:00:27,039
so what do i mean by data retrieval

8
00:00:27,039 --> 00:00:29,519
systems these are systems that collect

9
00:00:29,519 --> 00:00:31,840
process and serve data to the clients

10
00:00:31,840 --> 00:00:33,760
and this actually represents a broad

11
00:00:33,760 --> 00:00:35,280
class of services

12
00:00:35,280 --> 00:00:37,200
here are some of the obvious examples of

13
00:00:37,200 --> 00:00:39,600
data retrieval systems like google or

14
00:00:39,600 --> 00:00:40,480
bing

15
00:00:40,480 --> 00:00:42,640
and these are among many more

16
00:00:42,640 --> 00:00:45,200
more specialized smaller scale examples

17
00:00:45,200 --> 00:00:47,600
that are run by individuals governments

18
00:00:47,600 --> 00:00:49,520
or enterprises

19
00:00:49,520 --> 00:00:51,680
these systems typically have searching

20
00:00:51,680 --> 00:00:53,920
browsing and advertising components

21
00:00:53,920 --> 00:00:55,840
additionally they may have social

22
00:00:55,840 --> 00:00:58,079
networking blogging publishing and news

23
00:00:58,079 --> 00:01:00,000
components

24
00:01:00,000 --> 00:01:02,079
one key characteristic of data retrieval

25
00:01:02,079 --> 00:01:03,920
systems is that they collect a lot of

26
00:01:03,920 --> 00:01:06,240
data from different sources for example

27
00:01:06,240 --> 00:01:08,240
a data retrieval system could collect

28
00:01:08,240 --> 00:01:09,920
world wide web pages and other

29
00:01:09,920 --> 00:01:11,280
information available in the public

30
00:01:11,280 --> 00:01:13,280
domain it could collect

31
00:01:13,280 --> 00:01:15,840
streams like tweets or new stickers

32
00:01:15,840 --> 00:01:17,520
social network data

33
00:01:17,520 --> 00:01:20,479
and emails and private messaging

34
00:01:20,479 --> 00:01:22,320
and to help clients find relevant

35
00:01:22,320 --> 00:01:24,560
information the system can use a search

36
00:01:24,560 --> 00:01:26,320
engine

37
00:01:26,320 --> 00:01:28,320
the system can also collect click and

38
00:01:28,320 --> 00:01:30,400
search histories and combine those with

39
00:01:30,400 --> 00:01:34,079
users profiles for personalization

40
00:01:34,079 --> 00:01:35,600
and to bring revenue there could

41
00:01:35,600 --> 00:01:38,840
possibly be an ad exchange

42
00:01:38,840 --> 00:01:41,759
service data from different sources are

43
00:01:41,759 --> 00:01:43,920
subject to different policies and it is

44
00:01:43,920 --> 00:01:45,840
the responsibility of the provider to

45
00:01:45,840 --> 00:01:48,479
ensure that these policies are respected

46
00:01:48,479 --> 00:01:51,360
i will next list some example policies

47
00:01:51,360 --> 00:01:55,040
that a provider may wish to enforce

48
00:01:55,040 --> 00:01:57,200
some example policies reflect the

49
00:01:57,200 --> 00:01:59,520
privacy preferences of the clients and

50
00:01:59,520 --> 00:02:01,040
the data owners

51
00:02:01,040 --> 00:02:03,439
the provider might set the world wide

52
00:02:03,439 --> 00:02:05,360
web and streams to public

53
00:02:05,360 --> 00:02:07,200
set social network data to be available

54
00:02:07,200 --> 00:02:09,598
to users friends or friends of friends

55
00:02:09,598 --> 00:02:11,840
and require that messages and emails

56
00:02:11,840 --> 00:02:15,280
remain private to the owners

57
00:02:15,280 --> 00:02:17,120
other policies are driven by the

58
00:02:17,120 --> 00:02:18,720
provider's choices

59
00:02:18,720 --> 00:02:20,400
for example the provider may want to

60
00:02:20,400 --> 00:02:21,920
limit the use of search and click

61
00:02:21,920 --> 00:02:24,480
history for personalization only and

62
00:02:24,480 --> 00:02:26,720
require that such data must expire after

63
00:02:26,720 --> 00:02:29,680
a certain period of time like two days

64
00:02:29,680 --> 00:02:32,000
also the provider may require that staff

65
00:02:32,000 --> 00:02:34,239
access to clients private information

66
00:02:34,239 --> 00:02:38,480
must be logged properly for auditing

67
00:02:38,720 --> 00:02:40,879
other policies are driven by legal

68
00:02:40,879 --> 00:02:43,120
requirements for example providers are

69
00:02:43,120 --> 00:02:45,519
often bound to respect censorship by

70
00:02:45,519 --> 00:02:47,440
restricting certain content from certain

71
00:02:47,440 --> 00:02:48,800
jurisdictions

72
00:02:48,800 --> 00:02:50,480
and this is among many other mandates

73
00:02:50,480 --> 00:02:52,480
that require logging or restrict data

74
00:02:52,480 --> 00:02:54,959
retention

75
00:02:56,000 --> 00:02:58,480
now policy compliance in data retrieval

76
00:02:58,480 --> 00:03:01,280
systems is a major challenge even for a

77
00:03:01,280 --> 00:03:03,360
provider with the best intentions

78
00:03:03,360 --> 00:03:06,159
because there are many data items and

79
00:03:06,159 --> 00:03:08,000
many complex policies

80
00:03:08,000 --> 00:03:10,720
policy specification is implicit in many

81
00:03:10,720 --> 00:03:13,519
places configuration files and in code

82
00:03:13,519 --> 00:03:15,920
including large application code bases

83
00:03:15,920 --> 00:03:18,319
and operating system

84
00:03:18,319 --> 00:03:20,959
the enforcement as well is spread across

85
00:03:20,959 --> 00:03:23,120
many components and layers

86
00:03:23,120 --> 00:03:24,799
in the operating system and throughout

87
00:03:24,799 --> 00:03:27,200
the applications

88
00:03:27,200 --> 00:03:29,040
the applications that run in data

89
00:03:29,040 --> 00:03:31,360
retrieval systems are complex and fast

90
00:03:31,360 --> 00:03:33,599
evolving with many updates these updates

91
00:03:33,599 --> 00:03:36,080
can miss access checks or introduce bugs

92
00:03:36,080 --> 00:03:39,120
increasing the risk of policy violations

93
00:03:39,120 --> 00:03:41,760
it is not surprising that providers fail

94
00:03:41,760 --> 00:03:43,920
to address these challenges and often

95
00:03:43,920 --> 00:03:45,920
enough we see policy violations

96
00:03:45,920 --> 00:03:48,080
violations result in leaking classified

97
00:03:48,080 --> 00:03:50,319
and private users informations and these

98
00:03:50,319 --> 00:03:52,239
incidents are serious they hurt the

99
00:03:52,239 --> 00:03:54,480
company's reputation and result in

100
00:03:54,480 --> 00:03:56,560
financial losses

101
00:03:56,560 --> 00:03:59,360
in this work we address these challenges

102
00:03:59,360 --> 00:04:01,280
with the goal of providing with the goal

103
00:04:01,280 --> 00:04:03,519
of preventing inadvertent policy

104
00:04:03,519 --> 00:04:06,319
violations due to application bugs and

105
00:04:06,319 --> 00:04:09,200
misconfigurations

106
00:04:09,840 --> 00:04:12,000
this is the outline of my talk so far i

107
00:04:12,000 --> 00:04:13,840
have described the

108
00:04:13,840 --> 00:04:16,560
policy compliance challenges next i will

109
00:04:16,560 --> 00:04:18,560
describe our system thought

110
00:04:18,560 --> 00:04:20,238
which we have developed to address these

111
00:04:20,238 --> 00:04:22,320
challenges i will give an overview of

112
00:04:22,320 --> 00:04:24,639
the system and describe few of the key

113
00:04:24,639 --> 00:04:28,160
ideas in its design

114
00:04:28,160 --> 00:04:30,240
i will start with an overview

115
00:04:30,240 --> 00:04:32,800
in thought policies are directly

116
00:04:32,800 --> 00:04:36,800
attached to content in files pipes or

117
00:04:36,800 --> 00:04:38,000
sockets

118
00:04:38,000 --> 00:04:40,479
that means the provider associates a

119
00:04:40,479 --> 00:04:43,440
policy with each individual source

120
00:04:43,440 --> 00:04:44,479
content

121
00:04:44,479 --> 00:04:46,800
for example there is a policy attached

122
00:04:46,800 --> 00:04:49,360
to each worldwide web file each data

123
00:04:49,360 --> 00:04:53,520
stream and each socket to external users

124
00:04:53,520 --> 00:04:55,600
optionally the applications can

125
00:04:55,600 --> 00:04:58,320
associate policies with content that is

126
00:04:58,320 --> 00:05:00,639
internal to the system for example there

127
00:05:00,639 --> 00:05:03,199
is uh there could be a policy attached

128
00:05:03,199 --> 00:05:05,680
to the index file and two pipes between

129
00:05:05,680 --> 00:05:07,919
application components however these

130
00:05:07,919 --> 00:05:10,400
internal policies are not trusted

131
00:05:10,400 --> 00:05:11,680
i will give more details about the

132
00:05:11,680 --> 00:05:14,000
policies later but for now keep in mind

133
00:05:14,000 --> 00:05:14,880
that

134
00:05:14,880 --> 00:05:17,520
the policies are stated explicitly in a

135
00:05:17,520 --> 00:05:19,680
declarative language and are directly

136
00:05:19,680 --> 00:05:21,759
attached to the content

137
00:05:21,759 --> 00:05:23,600
the next step is to enforce these

138
00:05:23,600 --> 00:05:25,360
policies

139
00:05:25,360 --> 00:05:27,759
the way thought enforces policies is

140
00:05:27,759 --> 00:05:29,840
through process level information flow

141
00:05:29,840 --> 00:05:32,320
control so every process that is running

142
00:05:32,320 --> 00:05:33,840
inside of the system

143
00:05:33,840 --> 00:05:36,000
such as the indexer or the search engine

144
00:05:36,000 --> 00:05:37,759
will be subject to information flow

145
00:05:37,759 --> 00:05:39,360
control

146
00:05:39,360 --> 00:05:41,520
thought process level information flow

147
00:05:41,520 --> 00:05:43,919
control is basically two things

148
00:05:43,919 --> 00:05:46,479
first track the data flows that cross

149
00:05:46,479 --> 00:05:48,479
the process boundary the tracking

150
00:05:48,479 --> 00:05:50,479
doesn't care about the computation nor

151
00:05:50,479 --> 00:05:52,560
the data flows inside the process

152
00:05:52,560 --> 00:05:54,800
only the inputs and outputs that cross

153
00:05:54,800 --> 00:05:56,880
the process boundary

154
00:05:56,880 --> 00:05:59,360
second and this is important thought

155
00:05:59,360 --> 00:06:01,520
uses policies as taint

156
00:06:01,520 --> 00:06:04,160
and enforces these policies on every

157
00:06:04,160 --> 00:06:05,440
data flow

158
00:06:05,440 --> 00:06:07,520
i will elaborate the flow control with

159
00:06:07,520 --> 00:06:10,080
an example

160
00:06:10,080 --> 00:06:12,240
consider for example the indexer process

161
00:06:12,240 --> 00:06:14,720
that consumes the sources

162
00:06:14,720 --> 00:06:17,919
as the data flows from the sources to

163
00:06:17,919 --> 00:06:19,199
the indexer

164
00:06:19,199 --> 00:06:21,199
the source policies get added to the

165
00:06:21,199 --> 00:06:23,120
indexer taint and you can think of a

166
00:06:23,120 --> 00:06:25,440
process thing as the set of policies

167
00:06:25,440 --> 00:06:28,639
that its output must respect

168
00:06:28,639 --> 00:06:31,919
as the indexer writes to the index file

169
00:06:31,919 --> 00:06:33,759
that write will be subject to a policy

170
00:06:33,759 --> 00:06:34,800
check

171
00:06:34,800 --> 00:06:36,800
thus the data would flow from the

172
00:06:36,800 --> 00:06:37,840
sources

173
00:06:37,840 --> 00:06:39,360
to the index file

174
00:06:39,360 --> 00:06:42,000
if and only if the source policies allow

175
00:06:42,000 --> 00:06:44,319
such flow

176
00:06:44,319 --> 00:06:47,039
and similarly as the data flows from the

177
00:06:47,039 --> 00:06:49,520
index file to the search engine the

178
00:06:49,520 --> 00:06:51,680
search engine will get tainted

179
00:06:51,680 --> 00:06:53,759
and later as the data flows to the

180
00:06:53,759 --> 00:06:55,759
external user there will be a policy

181
00:06:55,759 --> 00:06:57,360
check

182
00:06:57,360 --> 00:06:59,840
dot information flow control on policy

183
00:06:59,840 --> 00:07:02,479
checks on every data flow provide an

184
00:07:02,479 --> 00:07:04,479
important property

185
00:07:04,479 --> 00:07:06,639
regardless of the internal complexity of

186
00:07:06,639 --> 00:07:07,680
the system

187
00:07:07,680 --> 00:07:10,240
correct source policies ensure policy

188
00:07:10,240 --> 00:07:12,000
compliance

189
00:07:12,000 --> 00:07:13,599
and this actually leads me to the threat

190
00:07:13,599 --> 00:07:14,960
model

191
00:07:14,960 --> 00:07:17,360
top thread model is as follows

192
00:07:17,360 --> 00:07:20,000
thought the operating system and storage

193
00:07:20,000 --> 00:07:22,720
are all trusted applications are not and

194
00:07:22,720 --> 00:07:25,440
assumed to be buggy and misconfigured

195
00:07:25,440 --> 00:07:27,360
leaks through covert and side channels

196
00:07:27,360 --> 00:07:29,039
are not a concern

197
00:07:29,039 --> 00:07:31,440
and this threat model is pragmatic and

198
00:07:31,440 --> 00:07:33,280
reasonable under the assumption that the

199
00:07:33,280 --> 00:07:35,120
provider is interested in policy

200
00:07:35,120 --> 00:07:36,479
compliance

201
00:07:36,479 --> 00:07:39,120
and recall that the goal is to prevent

202
00:07:39,120 --> 00:07:41,840
inadvertent policy violations not to

203
00:07:41,840 --> 00:07:44,080
defend against malicious applications or

204
00:07:44,080 --> 00:07:46,240
active attacks

205
00:07:46,240 --> 00:07:48,560
so subject to that threat model

206
00:07:48,560 --> 00:07:50,080
application bugs

207
00:07:50,080 --> 00:07:52,400
and misconfigurations will not violate

208
00:07:52,400 --> 00:07:54,160
source policies

209
00:07:54,160 --> 00:07:55,840
so far i have given you an overview of

210
00:07:55,840 --> 00:07:56,960
the system

211
00:07:56,960 --> 00:08:00,000
next i will describe thought policies

212
00:08:00,000 --> 00:08:02,240
we have developed a declarative data

213
00:08:02,240 --> 00:08:04,879
flow policy language that we use to

214
00:08:04,879 --> 00:08:07,199
express thought policies

215
00:08:07,199 --> 00:08:09,280
thought policies can express the

216
00:08:09,280 --> 00:08:11,120
confidentiality integrity and the

217
00:08:11,120 --> 00:08:13,840
classification requirements of data

218
00:08:13,840 --> 00:08:16,080
and as i have mentioned earlier

219
00:08:16,080 --> 00:08:17,759
thought policies are directly attached

220
00:08:17,759 --> 00:08:20,240
to the content

221
00:08:20,240 --> 00:08:21,759
i will give a concrete example of a

222
00:08:21,759 --> 00:08:24,560
thought policy next but very briefly a

223
00:08:24,560 --> 00:08:26,960
policy is specified as the set of

224
00:08:26,960 --> 00:08:29,199
conditions that need to be met in order

225
00:08:29,199 --> 00:08:31,440
for some action to be allowed

226
00:08:31,440 --> 00:08:34,719
for example upon read or update access

227
00:08:34,719 --> 00:08:36,640
the policy dictates who can perform the

228
00:08:36,640 --> 00:08:39,200
access when and in which state

229
00:08:39,200 --> 00:08:40,799
and right on the next slide i will give

230
00:08:40,799 --> 00:08:44,560
an example of an access control policy

231
00:08:44,560 --> 00:08:47,360
upon data flow the policy dictates how

232
00:08:47,360 --> 00:08:49,839
access conditions can change along a

233
00:08:49,839 --> 00:08:52,000
data flow path and later in the talk i

234
00:08:52,000 --> 00:08:53,760
will give an example of a flow control

235
00:08:53,760 --> 00:08:56,160
policy

236
00:08:56,160 --> 00:08:58,320
this is an access control example that

237
00:08:58,320 --> 00:09:01,200
represents the privacy preferences that

238
00:09:01,200 --> 00:09:03,519
a user alice might want to install on

239
00:09:03,519 --> 00:09:05,839
her online social network post

240
00:09:05,839 --> 00:09:06,959
and typically the post should be

241
00:09:06,959 --> 00:09:08,720
available to alice her friends and

242
00:09:08,720 --> 00:09:11,200
friends of friends

243
00:09:11,200 --> 00:09:14,480
so as a start the policy allows alice to

244
00:09:14,480 --> 00:09:15,440
access

245
00:09:15,440 --> 00:09:17,360
identity is established through a

246
00:09:17,360 --> 00:09:18,880
standard public-private key

247
00:09:18,880 --> 00:09:21,279
authentication and reads that happen

248
00:09:21,279 --> 00:09:25,279
within alice's session are allowed

249
00:09:25,279 --> 00:09:27,600
to allow alice's friends to access the

250
00:09:27,600 --> 00:09:28,800
policy

251
00:09:28,800 --> 00:09:31,519
the policy allows access to user x as

252
00:09:31,519 --> 00:09:34,320
long as that user x is an alice's friend

253
00:09:34,320 --> 00:09:37,839
list in some offset

254
00:09:38,320 --> 00:09:40,480
and to allow alice's friends of friends

255
00:09:40,480 --> 00:09:42,720
to access the post the policy allows

256
00:09:42,720 --> 00:09:45,839
user y to access as long as user y is

257
00:09:45,839 --> 00:09:46,959
friends with

258
00:09:46,959 --> 00:09:50,080
some other user say x and that user x is

259
00:09:50,080 --> 00:09:52,959
friends with alice

260
00:09:53,040 --> 00:09:55,360
applications are responsible for finding

261
00:09:55,360 --> 00:09:57,519
the entries in the friends list

262
00:09:57,519 --> 00:09:58,720
and that's fine because correct

263
00:09:58,720 --> 00:10:00,640
applications need to perform this check

264
00:10:00,640 --> 00:10:02,720
anyway they just need to make this

265
00:10:02,720 --> 00:10:04,240
information available to the policy

266
00:10:04,240 --> 00:10:05,519
evaluation

267
00:10:05,519 --> 00:10:07,760
this makes policy evaluation efficient

268
00:10:07,760 --> 00:10:09,519
since the burden of proving policy

269
00:10:09,519 --> 00:10:13,360
compliance is on the applications

270
00:10:13,360 --> 00:10:15,200
this is just a subset of the language

271
00:10:15,200 --> 00:10:17,040
that language can express more types of

272
00:10:17,040 --> 00:10:19,519
policies

273
00:10:19,519 --> 00:10:21,120
as a matter of fact

274
00:10:21,120 --> 00:10:22,720
all the examples that i've mentioned in

275
00:10:22,720 --> 00:10:25,040
the beginning of the talk are example

276
00:10:25,040 --> 00:10:26,800
policies that our policy language can

277
00:10:26,800 --> 00:10:28,160
express

278
00:10:28,160 --> 00:10:30,480
as a refresher this includes limiting

279
00:10:30,480 --> 00:10:32,399
the use of search and click history for

280
00:10:32,399 --> 00:10:34,560
personalization only and requiring that

281
00:10:34,560 --> 00:10:36,560
such data must expire after a certain

282
00:10:36,560 --> 00:10:38,320
period of time

283
00:10:38,320 --> 00:10:40,640
requiring that staff access to clients

284
00:10:40,640 --> 00:10:42,720
private information must be looked

285
00:10:42,720 --> 00:10:44,880
properly for auditing

286
00:10:44,880 --> 00:10:47,040
and restricting content access for

287
00:10:47,040 --> 00:10:50,240
certain regions to respect censorship

288
00:10:50,240 --> 00:10:51,680
so far i have described the policy

289
00:10:51,680 --> 00:10:54,079
language and example taught policies

290
00:10:54,079 --> 00:10:57,040
next i will list some key ideas in the

291
00:10:57,040 --> 00:10:59,040
design of thought i will not have time

292
00:10:59,040 --> 00:11:01,279
to go into details but this slide should

293
00:11:01,279 --> 00:11:04,640
provide a high level overview

294
00:11:04,640 --> 00:11:06,959
the first key idea is process level

295
00:11:06,959 --> 00:11:08,720
information flow control which i had

296
00:11:08,720 --> 00:11:10,959
mentioned earlier only track the data

297
00:11:10,959 --> 00:11:13,839
flows that cross the process boundary

298
00:11:13,839 --> 00:11:16,320
operating at the process boundary makes

299
00:11:16,320 --> 00:11:17,839
thought

300
00:11:17,839 --> 00:11:20,320
language independent it is also

301
00:11:20,320 --> 00:11:22,480
efficient as it incurs little overhead

302
00:11:22,480 --> 00:11:25,120
as i will show in the evaluation

303
00:11:25,120 --> 00:11:26,959
process level information flow control

304
00:11:26,959 --> 00:11:28,480
is a good match for many distributed

305
00:11:28,480 --> 00:11:30,720
computing frameworks that tend to fire

306
00:11:30,720 --> 00:11:32,959
up a bunch of processes to do specific

307
00:11:32,959 --> 00:11:34,720
tasks and are garbage collected

308
00:11:34,720 --> 00:11:37,279
afterwards

309
00:11:37,360 --> 00:11:40,399
in thought we use policies as taint

310
00:11:40,399 --> 00:11:42,480
that means the process is tainted with

311
00:11:42,480 --> 00:11:44,720
the set of policies that its output must

312
00:11:44,720 --> 00:11:47,120
respect

313
00:11:47,120 --> 00:11:48,959
this enabled thought to do clever tricks

314
00:11:48,959 --> 00:11:51,600
to reduce that pain size so taint

315
00:11:51,600 --> 00:11:53,760
explosion is a problem that information

316
00:11:53,760 --> 00:11:55,839
flow control systems face but with

317
00:11:55,839 --> 00:11:57,920
policies as taint we can do policy

318
00:11:57,920 --> 00:12:00,399
comparison or partial evaluation which

319
00:12:00,399 --> 00:12:02,000
are effective techniques to reduce

320
00:12:02,000 --> 00:12:04,720
detain size

321
00:12:04,720 --> 00:12:06,800
another point is policy specified the

322
00:12:06,800 --> 00:12:08,480
classification

323
00:12:08,480 --> 00:12:10,160
typically information flow control

324
00:12:10,160 --> 00:12:13,440
systems rely on trusted application code

325
00:12:13,440 --> 00:12:15,120
to vet that a piece of data is safe to

326
00:12:15,120 --> 00:12:17,440
be declassified this is problematic

327
00:12:17,440 --> 00:12:20,480
because bugs in that piece of code can

328
00:12:20,480 --> 00:12:22,880
lead to policy violations

329
00:12:22,880 --> 00:12:24,959
in thought all the declassification

330
00:12:24,959 --> 00:12:27,680
conditions are stated in the policy and

331
00:12:27,680 --> 00:12:29,519
this is nice because applications are no

332
00:12:29,519 --> 00:12:31,440
longer trusted with declassification

333
00:12:31,440 --> 00:12:33,440
thus application bugs cannot violate

334
00:12:33,440 --> 00:12:36,000
policy

335
00:12:36,160 --> 00:12:38,880
finally we introduce a novel technique

336
00:12:38,880 --> 00:12:40,720
typed the classification

337
00:12:40,720 --> 00:12:42,959
which enables us to express even larger

338
00:12:42,959 --> 00:12:44,959
class of declassification conditions in

339
00:12:44,959 --> 00:12:47,279
the policy and this has proved to be

340
00:12:47,279 --> 00:12:48,880
very useful in the data retrieval

341
00:12:48,880 --> 00:12:50,079
scenario

342
00:12:50,079 --> 00:12:52,320
i will expand on the last point next but

343
00:12:52,320 --> 00:12:54,240
for the other points please refer to the

344
00:12:54,240 --> 00:12:56,560
paper

345
00:12:57,839 --> 00:12:59,680
type declassification

346
00:12:59,680 --> 00:13:02,000
is a novel the classification construct

347
00:13:02,000 --> 00:13:04,240
that we introduce and taught in type the

348
00:13:04,240 --> 00:13:06,560
classification the process output can be

349
00:13:06,560 --> 00:13:10,880
declassified if it has a specific type

350
00:13:10,880 --> 00:13:12,880
i will explain this by an example

351
00:13:12,880 --> 00:13:16,079
declassifying search results

352
00:13:16,079 --> 00:13:18,000
recall that the indexer consumes

353
00:13:18,000 --> 00:13:20,000
different source sources that belong to

354
00:13:20,000 --> 00:13:22,000
different users some sources can be

355
00:13:22,000 --> 00:13:23,680
private to alice some other sources

356
00:13:23,680 --> 00:13:25,680
could be private to bob and for that

357
00:13:25,680 --> 00:13:27,519
reason the index must have a very

358
00:13:27,519 --> 00:13:30,000
restrictive policy

359
00:13:30,000 --> 00:13:32,639
as the search engine reads the index to

360
00:13:32,639 --> 00:13:35,120
produce the search results

361
00:13:35,120 --> 00:13:36,959
the search results will inherit that

362
00:13:36,959 --> 00:13:38,560
restrictive policy

363
00:13:38,560 --> 00:13:40,320
and of course this allowing access to

364
00:13:40,320 --> 00:13:42,959
external users

365
00:13:42,959 --> 00:13:45,360
a key insight that allows us to enable

366
00:13:45,360 --> 00:13:46,480
flow

367
00:13:46,480 --> 00:13:48,800
is that the search results are typically

368
00:13:48,800 --> 00:13:51,360
just a list of urls

369
00:13:51,360 --> 00:13:53,199
so to enable flow

370
00:13:53,199 --> 00:13:55,680
the index policy permits urls to be

371
00:13:55,680 --> 00:13:58,079
declassified and with that policy in

372
00:13:58,079 --> 00:14:00,959
place if the search engine output is a

373
00:14:00,959 --> 00:14:03,600
list of urls it will be declassified and

374
00:14:03,600 --> 00:14:05,519
the flow is permitted into the search

375
00:14:05,519 --> 00:14:06,800
results

376
00:14:06,800 --> 00:14:09,040
of course a malicious search engine can

377
00:14:09,040 --> 00:14:11,440
leak information by encoding it in the

378
00:14:11,440 --> 00:14:14,320
classifiable urls but remember that we

379
00:14:14,320 --> 00:14:16,240
are interested in preventing leaks due

380
00:14:16,240 --> 00:14:20,480
to inadvertent bugs not malicious code

381
00:14:20,480 --> 00:14:22,800
type declassification is not limited to

382
00:14:22,800 --> 00:14:25,279
urls only other types such as integers

383
00:14:25,279 --> 00:14:28,320
floats or booleans can be used as well

384
00:14:28,320 --> 00:14:30,399
now that i've given you an overview of

385
00:14:30,399 --> 00:14:32,079
thought policies that encode the

386
00:14:32,079 --> 00:14:34,000
classification conditions let's see the

387
00:14:34,000 --> 00:14:36,720
enforcement algorithm

388
00:14:36,720 --> 00:14:38,639
the following algorithm enforces

389
00:14:38,639 --> 00:14:41,279
policies in thought when a process reads

390
00:14:41,279 --> 00:14:45,040
or writes content with a given policy

391
00:14:45,040 --> 00:14:46,880
dot differentiates between external

392
00:14:46,880 --> 00:14:49,920
processes and internal processes

393
00:14:49,920 --> 00:14:52,160
external processes represent external

394
00:14:52,160 --> 00:14:54,720
users or processes running on behalf of

395
00:14:54,720 --> 00:14:56,880
external users and of course for these

396
00:14:56,880 --> 00:14:58,959
processes thought cannot track data

397
00:14:58,959 --> 00:15:00,320
flows

398
00:15:00,320 --> 00:15:02,160
internal processes on the other hand are

399
00:15:02,160 --> 00:15:04,000
processes that are internal to the

400
00:15:04,000 --> 00:15:06,079
system for example like the indexer or

401
00:15:06,079 --> 00:15:08,240
the search engine in the data retrieval

402
00:15:08,240 --> 00:15:09,199
example

403
00:15:09,199 --> 00:15:11,519
and for those internal processes thought

404
00:15:11,519 --> 00:15:14,320
can track data flows

405
00:15:14,320 --> 00:15:15,760
so now moving to the enforcement

406
00:15:15,760 --> 00:15:16,880
algorithm

407
00:15:16,880 --> 00:15:19,440
external processes are subject to

408
00:15:19,440 --> 00:15:21,360
immediate access check

409
00:15:21,360 --> 00:15:23,360
and for that reason external processes

410
00:15:23,360 --> 00:15:26,160
might need to authenticate directly to

411
00:15:26,160 --> 00:15:27,120
thought

412
00:15:27,120 --> 00:15:30,399
using a user credentials

413
00:15:30,399 --> 00:15:33,120
a read access on a particular content is

414
00:15:33,120 --> 00:15:35,759
permitted if and only if the read rule

415
00:15:35,759 --> 00:15:38,399
on the content policy allows and of

416
00:15:38,399 --> 00:15:39,759
course there is a similar check for

417
00:15:39,759 --> 00:15:42,079
writes

418
00:15:43,040 --> 00:15:45,360
internal processes on the other hand are

419
00:15:45,360 --> 00:15:47,759
subject to flow control

420
00:15:47,759 --> 00:15:50,079
upon rate the policy is added to the

421
00:15:50,079 --> 00:15:52,320
process stained

422
00:15:52,320 --> 00:15:54,720
upon right tut first needs to check the

423
00:15:54,720 --> 00:15:56,800
update rule of the content policy to

424
00:15:56,800 --> 00:15:59,199
ensure its integrity

425
00:15:59,199 --> 00:16:01,440
and additionally dot needs to ensure

426
00:16:01,440 --> 00:16:03,199
that the policies in detained are not

427
00:16:03,199 --> 00:16:05,279
violated

428
00:16:05,279 --> 00:16:08,000
thus for each policy entertained one of

429
00:16:08,000 --> 00:16:09,920
two conditions must hold

430
00:16:09,920 --> 00:16:12,320
either all the classification

431
00:16:12,320 --> 00:16:14,720
and detained policy are met thus there

432
00:16:14,720 --> 00:16:16,560
is nothing further to check

433
00:16:16,560 --> 00:16:18,399
or

434
00:16:18,399 --> 00:16:19,759
the content policy has the

435
00:16:19,759 --> 00:16:22,240
classification that is at least as

436
00:16:22,240 --> 00:16:24,560
restrictive as detained policy and this

437
00:16:24,560 --> 00:16:28,000
is analogous to policy propagation

438
00:16:28,000 --> 00:16:29,600
the simple algorithm

439
00:16:29,600 --> 00:16:32,160
ensures end-to-end compliance since the

440
00:16:32,160 --> 00:16:34,560
source policies will always be enforced

441
00:16:34,560 --> 00:16:36,720
regardless of internal policies or

442
00:16:36,720 --> 00:16:39,519
application bugs

443
00:16:40,800 --> 00:16:43,120
so i have now described hot policies and

444
00:16:43,120 --> 00:16:45,279
how thought enforces them next i will

445
00:16:45,279 --> 00:16:47,360
describe a prototype search engine that

446
00:16:47,360 --> 00:16:49,519
we have implemented and evaluated and

447
00:16:49,519 --> 00:16:51,680
taught

448
00:16:51,680 --> 00:16:53,120
we have implemented thought a

449
00:16:53,120 --> 00:16:55,759
distributed compliance layer each node

450
00:16:55,759 --> 00:16:57,759
in a distributed system has a local

451
00:16:57,759 --> 00:16:59,279
enforcement logic

452
00:16:59,279 --> 00:17:01,600
the figure shows the elements of that

453
00:17:01,600 --> 00:17:03,680
enforcement logic

454
00:17:03,680 --> 00:17:04,799
first

455
00:17:04,799 --> 00:17:08,079
there is a linux security module of 3500

456
00:17:08,079 --> 00:17:09,359
lines of code

457
00:17:09,359 --> 00:17:11,679
the kernel module intercepts all system

458
00:17:11,679 --> 00:17:14,079
calls that can result in data flow such

459
00:17:14,079 --> 00:17:16,799
as reads or writes to files or sockets

460
00:17:16,799 --> 00:17:19,599
it also exposes few thought api calls

461
00:17:19,599 --> 00:17:23,039
such as sitting policies

462
00:17:23,119 --> 00:17:25,520
second there is a reference monitor of

463
00:17:25,520 --> 00:17:27,520
nineteen thousand lines of code and

464
00:17:27,520 --> 00:17:28,960
openssl

465
00:17:28,960 --> 00:17:31,200
which the reference monitor uses for its

466
00:17:31,200 --> 00:17:32,480
cryptograph cryptographic

467
00:17:32,480 --> 00:17:34,480
operations such as public private key

468
00:17:34,480 --> 00:17:36,000
authentication

469
00:17:36,000 --> 00:17:38,880
the reference monitor evaluates policies

470
00:17:38,880 --> 00:17:41,200
and advises the linux security module to

471
00:17:41,200 --> 00:17:44,840
reject non-compliant flows

472
00:17:44,840 --> 00:17:47,760
finally policy compliance relies on a

473
00:17:47,760 --> 00:17:50,240
global policy store that all nodes

474
00:17:50,240 --> 00:17:53,039
should operate on

475
00:17:53,520 --> 00:17:55,440
we have implemented a prototype search

476
00:17:55,440 --> 00:17:57,760
engine that includes personalization and

477
00:17:57,760 --> 00:18:00,080
ad exchange our current implementation

478
00:18:00,080 --> 00:18:01,760
of the personalization and ad exchange

479
00:18:01,760 --> 00:18:04,640
are minimal but they capture all the

480
00:18:04,640 --> 00:18:06,640
relevant flows

481
00:18:06,640 --> 00:18:08,160
the search engine implementation is

482
00:18:08,160 --> 00:18:11,039
based on apache lucy

483
00:18:11,039 --> 00:18:12,720
and our implementation supports

484
00:18:12,720 --> 00:18:14,480
distributed search

485
00:18:14,480 --> 00:18:17,760
using replication and charting

486
00:18:17,760 --> 00:18:19,679
in order to run a bachelor scene in

487
00:18:19,679 --> 00:18:20,640
thought

488
00:18:20,640 --> 00:18:23,120
we had to change only 50 lines of code

489
00:18:23,120 --> 00:18:24,799
out of 300 000

490
00:18:24,799 --> 00:18:26,640
and most of these changes were to set

491
00:18:26,640 --> 00:18:28,480
policies appropriately on the apache

492
00:18:28,480 --> 00:18:30,720
lucene output

493
00:18:30,720 --> 00:18:33,039
our implementation maintains user

494
00:18:33,039 --> 00:18:36,000
profiles and search history in memcached

495
00:18:36,000 --> 00:18:38,559
key value store

496
00:18:38,559 --> 00:18:40,960
so for performance evaluation

497
00:18:40,960 --> 00:18:43,600
we used a two short index each short is

498
00:18:43,600 --> 00:18:46,000
hosted on a server machine

499
00:18:46,000 --> 00:18:48,320
and we have two setups without and with

500
00:18:48,320 --> 00:18:50,160
replication

501
00:18:50,160 --> 00:18:52,400
for the data set we used a snapshot of

502
00:18:52,400 --> 00:18:54,720
the english wikipedia particles which

503
00:18:54,720 --> 00:18:57,520
includes around 50 million documents

504
00:18:57,520 --> 00:18:59,760
and we have randomly assigned policies

505
00:18:59,760 --> 00:19:02,480
to each content item in the data set

506
00:19:02,480 --> 00:19:05,200
in the proportions 30 private documents

507
00:19:05,200 --> 00:19:06,160
50

508
00:19:06,160 --> 00:19:09,760
public and 20 under fringe only

509
00:19:09,760 --> 00:19:11,840
all non-public documents allowed

510
00:19:11,840 --> 00:19:14,160
authorized staff members to access

511
00:19:14,160 --> 00:19:16,559
subject to logging

512
00:19:16,559 --> 00:19:19,840
and all documents have censorship clause

513
00:19:19,840 --> 00:19:21,919
for the workload which generated queries

514
00:19:21,919 --> 00:19:24,559
based on the wikipedia popularity access

515
00:19:24,559 --> 00:19:26,640
trace

516
00:19:26,640 --> 00:19:28,799
so for search throughput clients many

517
00:19:28,799 --> 00:19:31,039
clients issue queries concurrently and

518
00:19:31,039 --> 00:19:33,120
saturate the search engine

519
00:19:33,120 --> 00:19:35,679
and to fully expose start overheads the

520
00:19:35,679 --> 00:19:37,840
index and the wikipedia documents

521
00:19:37,840 --> 00:19:39,919
accessed in the trace were pre-loaded in

522
00:19:39,919 --> 00:19:41,520
memory

523
00:19:41,520 --> 00:19:43,520
the figure shows in the y-axis the

524
00:19:43,520 --> 00:19:46,320
average throughput in queries per second

525
00:19:46,320 --> 00:19:49,039
and the x-axis shows two configurations

526
00:19:49,039 --> 00:19:51,280
no replication which maps to two server

527
00:19:51,280 --> 00:19:54,160
machines and two x replication which

528
00:19:54,160 --> 00:19:56,880
maps to four server machines

529
00:19:56,880 --> 00:19:58,720
the first remark is that the performance

530
00:19:58,720 --> 00:20:00,880
for both the baseline on top scales

531
00:20:00,880 --> 00:20:02,720
linearly that does not affect the

532
00:20:02,720 --> 00:20:05,840
scalability of the system by replication

533
00:20:05,840 --> 00:20:07,919
thought overhead is around three and a

534
00:20:07,919 --> 00:20:10,400
half percent and this includes the i o

535
00:20:10,400 --> 00:20:12,000
interception the ipc cost of the

536
00:20:12,000 --> 00:20:13,600
reference monitor and the policy

537
00:20:13,600 --> 00:20:15,520
evaluation

538
00:20:15,520 --> 00:20:17,200
we have investigated the performance

539
00:20:17,200 --> 00:20:19,120
further and it turns out that most of

540
00:20:19,120 --> 00:20:20,799
the overhead is due to the i o

541
00:20:20,799 --> 00:20:23,039
interception and the ipc cost and this

542
00:20:23,039 --> 00:20:25,280
is good news because a more efficient i

543
00:20:25,280 --> 00:20:28,080
o interception or an in-kernel reference

544
00:20:28,080 --> 00:20:30,240
monitor can reduce the costs even

545
00:20:30,240 --> 00:20:32,640
further

546
00:20:32,720 --> 00:20:35,120
for search latency the baseline takes 47

547
00:20:35,120 --> 00:20:37,760
milliseconds on average per query

548
00:20:37,760 --> 00:20:40,720
and thought overhead is 14.2 percent

549
00:20:40,720 --> 00:20:43,120
this translates into additional latency

550
00:20:43,120 --> 00:20:45,919
of 6.7 milliseconds which is too small

551
00:20:45,919 --> 00:20:48,400
to be perceived by a user

552
00:20:48,400 --> 00:20:50,720
we have performed more performance

553
00:20:50,720 --> 00:20:52,320
measurements this includes measuring

554
00:20:52,320 --> 00:20:53,840
thought overhead

555
00:20:53,840 --> 00:20:56,080
overheads during indexing and other

556
00:20:56,080 --> 00:20:57,919
micro benchmarks under

557
00:20:57,919 --> 00:21:00,159
different policies and we have also

558
00:21:00,159 --> 00:21:02,320
performed security evaluation and

559
00:21:02,320 --> 00:21:04,240
validated that thought prevents

560
00:21:04,240 --> 00:21:07,520
application bugs from violating policies

561
00:21:07,520 --> 00:21:10,640
please see the paper for further details

562
00:21:10,640 --> 00:21:12,640
so what have we achieved so far

563
00:21:12,640 --> 00:21:14,720
instead of specifying policies

564
00:21:14,720 --> 00:21:17,200
implicitly in configuration files and in

565
00:21:17,200 --> 00:21:19,679
different places in the code in taught

566
00:21:19,679 --> 00:21:21,840
policies are stated explicitly in a

567
00:21:21,840 --> 00:21:23,760
declarative language and are directly

568
00:21:23,760 --> 00:21:26,240
attached attached to the content

569
00:21:26,240 --> 00:21:28,400
that provides a kernel level policy

570
00:21:28,400 --> 00:21:30,159
compliance that is independent of the

571
00:21:30,159 --> 00:21:31,600
application code

572
00:21:31,600 --> 00:21:34,039
thus application bugs and

573
00:21:34,039 --> 00:21:37,760
misconfigurations cannot violate policy

574
00:21:37,760 --> 00:21:40,000
the policy enforcement on every data

575
00:21:40,000 --> 00:21:42,720
flow provides an important property

576
00:21:42,720 --> 00:21:44,640
regardless of the internal complexity of

577
00:21:44,640 --> 00:21:46,640
the system correct source policies

578
00:21:46,640 --> 00:21:50,000
ensure policy compliance

579
00:21:50,000 --> 00:21:52,080
so this brings me to the end of the talk

580
00:21:52,080 --> 00:21:54,400
i have described thought a system to

581
00:21:54,400 --> 00:21:56,240
ensure policy compliance in data

582
00:21:56,240 --> 00:21:57,679
retrieval systems

583
00:21:57,679 --> 00:22:00,080
thought design is novel it uses

584
00:22:00,080 --> 00:22:02,159
process level information flow control

585
00:22:02,159 --> 00:22:04,400
and uses policies as taint

586
00:22:04,400 --> 00:22:06,080
thought states all the classification

587
00:22:06,080 --> 00:22:08,400
conditions in the policy

588
00:22:08,400 --> 00:22:10,720
top runtime overhead is low and is at

589
00:22:10,720 --> 00:22:12,480
least good enough for medium scale data

590
00:22:12,480 --> 00:22:14,159
retrieval systems

591
00:22:14,159 --> 00:22:16,159
and in our experience that requires

592
00:22:16,159 --> 00:22:19,120
minimal changes to existing applications

593
00:22:19,120 --> 00:22:21,440
i have demonstrated thoughts utility

594
00:22:21,440 --> 00:22:23,600
using a distributed search engine with

595
00:22:23,600 --> 00:22:25,280
that i would like to thank you and i can

596
00:22:25,280 --> 00:22:26,650
take questions

597
00:22:26,650 --> 00:22:33,030
[Applause]

598
00:22:35,840 --> 00:22:37,760
jay under microsoft research thank you

599
00:22:37,760 --> 00:22:40,000
very interesting work so my question is

600
00:22:40,000 --> 00:22:41,679
around the

601
00:22:41,679 --> 00:22:42,640
kind of

602
00:22:42,640 --> 00:22:45,440
policy updates at runtime so in your

603
00:22:45,440 --> 00:22:47,440
case uh the policies attached to a

604
00:22:47,440 --> 00:22:49,679
content right so let's say that there's

605
00:22:49,679 --> 00:22:52,240
some intermediate content which was

606
00:22:52,240 --> 00:22:54,240
generated from original content with

607
00:22:54,240 --> 00:22:56,480
some policy attached so i guess in your

608
00:22:56,480 --> 00:22:58,240
case you may have to sort of create a

609
00:22:58,240 --> 00:23:00,640
new policy for the intermediate content

610
00:23:00,640 --> 00:23:03,360
if that's the case if the policy for the

611
00:23:03,360 --> 00:23:05,679
original document original content has

612
00:23:05,679 --> 00:23:07,600
been updated at runtime by users for

613
00:23:07,600 --> 00:23:10,080
instance the users wanted to revoke some

614
00:23:10,080 --> 00:23:12,000
access

615
00:23:12,000 --> 00:23:14,000
privilege for some content how would you

616
00:23:14,000 --> 00:23:16,720
update that policy to the intermediate

617
00:23:16,720 --> 00:23:18,960
result with intermediate content and so

618
00:23:18,960 --> 00:23:20,960
on

619
00:23:20,960 --> 00:23:23,360
so just to clarify so the intermediate

620
00:23:23,360 --> 00:23:25,520
policies uh these are already set by the

621
00:23:25,520 --> 00:23:28,720
applications now for the source policies

622
00:23:28,720 --> 00:23:30,159
you're saying if they could be updated

623
00:23:30,159 --> 00:23:32,080
during runtime so this is actually a

624
00:23:32,080 --> 00:23:34,000
problem that existing systems face

625
00:23:34,000 --> 00:23:36,640
because for example um you can imagine

626
00:23:36,640 --> 00:23:39,760
the acl of some some pictures as okay

627
00:23:39,760 --> 00:23:42,080
i'm friends with that user and then

628
00:23:42,080 --> 00:23:44,080
existing systems need to work with that

629
00:23:44,080 --> 00:23:46,000
problem and then we can rely on whatever

630
00:23:46,000 --> 00:23:48,400
mechanism that existing systems use to

631
00:23:48,400 --> 00:23:50,080
also propagate the changes during

632
00:23:50,080 --> 00:23:52,000
runtime so you say that there is a way

633
00:23:52,000 --> 00:23:54,400
to propagate these policy changes at

634
00:23:54,400 --> 00:23:55,840
runtime too

635
00:23:55,840 --> 00:23:58,080
no i'm saying if if the policy changes

636
00:23:58,080 --> 00:24:00,400
so for example in our case the policy

637
00:24:00,400 --> 00:24:03,039
propagates with the data right and this

638
00:24:03,039 --> 00:24:06,080
is a problem that um existing systems

639
00:24:06,080 --> 00:24:08,320
already face when it comes to

640
00:24:08,320 --> 00:24:10,559
a user is connected through a session

641
00:24:10,559 --> 00:24:12,480
and he's friends with let's say some

642
00:24:12,480 --> 00:24:14,320
other user x and then the other user

643
00:24:14,320 --> 00:24:16,159
exit during the same session removes

644
00:24:16,159 --> 00:24:17,679
them from from the friend list then this

645
00:24:17,679 --> 00:24:19,440
is a problem for uh for that system and

646
00:24:19,440 --> 00:24:21,279
there are existing techniques take care

647
00:24:21,279 --> 00:24:23,600
of that and then in thought we can rely

648
00:24:23,600 --> 00:24:25,440
on these existing techniques and do the

649
00:24:25,440 --> 00:24:27,919
same as they do for uh for enforcing uh

650
00:24:27,919 --> 00:24:29,919
for doing the propagation okay all right

651
00:24:29,919 --> 00:24:32,880
thank you

652
00:24:32,880 --> 00:24:34,640
hi i'm cerek fourney also microsoft

653
00:24:34,640 --> 00:24:36,640
research uh i have a question regarding

654
00:24:36,640 --> 00:24:39,279
the financiality of the policies and

655
00:24:39,279 --> 00:24:40,400
themselves

656
00:24:40,400 --> 00:24:42,320
sir i didn't get that i'm concerned

657
00:24:42,320 --> 00:24:43,760
about the confidentiality of the

658
00:24:43,760 --> 00:24:46,960
policies and themselves

659
00:24:46,960 --> 00:24:49,120
to hide the content of the policy the

660
00:24:49,120 --> 00:24:51,279
content of the policy and what can you

661
00:24:51,279 --> 00:24:53,840
do to protect for example so that you

662
00:24:53,840 --> 00:24:55,440
cannot accept the list of friends out of

663
00:24:55,440 --> 00:24:57,120
the policy

664
00:24:57,120 --> 00:25:00,000
so we consider this to be a site channel

665
00:25:00,000 --> 00:25:03,120
i mean for example you can um a process

666
00:25:03,120 --> 00:25:05,760
that reads a confidential file and then

667
00:25:05,760 --> 00:25:07,039
it will not be able to produce any

668
00:25:07,039 --> 00:25:09,360
output and of course that in itself

669
00:25:09,360 --> 00:25:10,880
leaves information about the policy that

670
00:25:10,880 --> 00:25:12,720
it has consumed and for us we consider

671
00:25:12,720 --> 00:25:14,480
this as a side channel but

672
00:25:14,480 --> 00:25:15,600
i mean

673
00:25:15,600 --> 00:25:17,039
probably we can build with existing

674
00:25:17,039 --> 00:25:19,520
techniques to uh to address this problem

675
00:25:19,520 --> 00:25:22,639
if it's if it's relevant

676
00:25:23,200 --> 00:25:24,960
but when you attach a policy to a

677
00:25:24,960 --> 00:25:26,880
content you have to

678
00:25:26,880 --> 00:25:29,840
declassify that policy right

679
00:25:29,840 --> 00:25:31,840
just to transmit to attach a policy to a

680
00:25:31,840 --> 00:25:33,279
result you

681
00:25:33,279 --> 00:25:35,039
the policy itself has to be transmitted

682
00:25:35,039 --> 00:25:36,240
in the clear

683
00:25:36,240 --> 00:25:37,840
um

684
00:25:37,840 --> 00:25:39,840
so you have to declassify that i'm not

685
00:25:39,840 --> 00:25:41,919
sure when you send some results with

686
00:25:41,919 --> 00:25:44,000
some policy attached to it

687
00:25:44,000 --> 00:25:45,600
uh

688
00:25:45,600 --> 00:25:47,440
but the policy i mean the policy never

689
00:25:47,440 --> 00:25:49,360
leaves the system right

690
00:25:49,360 --> 00:25:51,440
okay the policy never leaves the system

691
00:25:51,440 --> 00:25:53,039
i'm not sure if i have answered your

692
00:25:53,039 --> 00:25:54,880
question

693
00:25:54,880 --> 00:25:56,559
i see so the whole system can lead the

694
00:25:56,559 --> 00:25:58,400
policy on that so this is this is a

695
00:25:58,400 --> 00:26:02,000
policy compliance for uh providers

696
00:26:02,000 --> 00:26:04,159
external users i mean that as the data

697
00:26:04,159 --> 00:26:05,600
leaves the system to external users

698
00:26:05,600 --> 00:26:07,360
there will be a policy check

699
00:26:07,360 --> 00:26:09,679
that says okay now this data has been uh

700
00:26:09,679 --> 00:26:12,080
is tainted with these policies and i

701
00:26:12,080 --> 00:26:13,679
will make sure that

702
00:26:13,679 --> 00:26:15,520
this access does not violate any of

703
00:26:15,520 --> 00:26:19,679
these policies okay thanks thank you

704
00:26:19,679 --> 00:26:22,320
i'll just reduce google so how flexible

705
00:26:22,320 --> 00:26:25,679
are your declassification policies um to

706
00:26:25,679 --> 00:26:27,440
looking at your example you envision

707
00:26:27,440 --> 00:26:30,720
that for instance all urls are free to

708
00:26:30,720 --> 00:26:33,520
declassify but what if say

709
00:26:33,520 --> 00:26:35,679
one wanted to enforce that urls that

710
00:26:35,679 --> 00:26:37,360
came from the gmail

711
00:26:37,360 --> 00:26:39,039
um source

712
00:26:39,039 --> 00:26:40,880
were only accessible to the original

713
00:26:40,880 --> 00:26:43,120
user whereas all other urls should be

714
00:26:43,120 --> 00:26:45,200
public can your system express that yes

715
00:26:45,200 --> 00:26:46,960
so our system can express that so

716
00:26:46,960 --> 00:26:48,480
actually the

717
00:26:48,480 --> 00:26:50,640
so every source content has a policy

718
00:26:50,640 --> 00:26:53,679
that says okay now i am as an url i can

719
00:26:53,679 --> 00:26:56,159
be declassified and if the source policy

720
00:26:56,159 --> 00:26:57,440
like for example the name is very

721
00:26:57,440 --> 00:26:58,960
sensitive and doesn't want to be

722
00:26:58,960 --> 00:27:00,960
declassified to any other then

723
00:27:00,960 --> 00:27:03,440
it can specify more restrictions under

724
00:27:03,440 --> 00:27:05,760
the classification but i guess in the

725
00:27:05,760 --> 00:27:06,720
example

726
00:27:06,720 --> 00:27:08,320
all the sources were going through the

727
00:27:08,320 --> 00:27:11,679
single indexer box yes can the indexer

728
00:27:11,679 --> 00:27:13,120
box

729
00:27:13,120 --> 00:27:15,120
enforce that

730
00:27:15,120 --> 00:27:18,159
from source to destination where the url

731
00:27:18,159 --> 00:27:20,399
came from and that it maintains the tag

732
00:27:20,399 --> 00:27:22,799
so actually that the classification that

733
00:27:22,799 --> 00:27:23,840
is uh

734
00:27:23,840 --> 00:27:26,399
set on the source policies says i can

735
00:27:26,399 --> 00:27:29,520
only flow to a search result that has

736
00:27:29,520 --> 00:27:31,360
restrictions i mean it can list okay

737
00:27:31,360 --> 00:27:33,039
these are the restrictions that i want

738
00:27:33,039 --> 00:27:34,559
but in in in the case that you have

739
00:27:34,559 --> 00:27:36,159
mentioned where you have two different

740
00:27:36,159 --> 00:27:37,760
sets of uh

741
00:27:37,760 --> 00:27:40,080
the classification requirements for urls

742
00:27:40,080 --> 00:27:41,520
then you probably create two different

743
00:27:41,520 --> 00:27:43,760
indices for these

744
00:27:43,760 --> 00:27:46,080
okay thank you

745
00:27:46,080 --> 00:27:48,640
all right any more questions

746
00:27:48,640 --> 00:27:50,080
if not then let's thank the speaker

747
00:27:50,080 --> 00:27:52,710
again

748
00:27:52,710 --> 00:27:56,670
[Applause]

