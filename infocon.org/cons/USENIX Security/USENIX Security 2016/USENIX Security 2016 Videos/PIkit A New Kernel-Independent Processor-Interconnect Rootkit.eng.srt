1
00:00:10,160 --> 00:00:12,719
hi everyone

2
00:00:12,719 --> 00:00:15,040
i'm ionic from kaist

3
00:00:15,040 --> 00:00:16,960
today i'm going to talk about a new type

4
00:00:16,960 --> 00:00:19,520
of rookie called pika a new kernel

5
00:00:19,520 --> 00:00:22,400
independent process interconnect rookie

6
00:00:22,400 --> 00:00:24,880
this is joint work with six co-authors

7
00:00:24,880 --> 00:00:27,759
from the caste

8
00:00:28,000 --> 00:00:30,640
before discussing about the pi kit as

9
00:00:30,640 --> 00:00:32,238
let's talk about

10
00:00:32,238 --> 00:00:35,360
a typical root affect scenario

11
00:00:35,360 --> 00:00:38,559
as as you know otegovers need to obtain

12
00:00:38,559 --> 00:00:40,879
one-time permission by compromising the

13
00:00:40,879 --> 00:00:42,480
target machine or

14
00:00:42,480 --> 00:00:44,800
by using social engineering

15
00:00:44,800 --> 00:00:46,879
and then article

16
00:00:46,879 --> 00:00:48,719
install

17
00:00:48,719 --> 00:00:50,719
stores rookie

18
00:00:50,719 --> 00:00:52,399
by

19
00:00:52,399 --> 00:00:53,760
exploring

20
00:00:53,760 --> 00:00:56,800
software or hardware vulnerabilities

21
00:00:56,800 --> 00:01:00,480
and finally attacker used payloads

22
00:01:00,480 --> 00:01:02,719
together with a rookie

23
00:01:02,719 --> 00:01:05,199
for their malicious activities

24
00:01:05,199 --> 00:01:07,920
so there are different types of

25
00:01:07,920 --> 00:01:10,159
rookies according to the locational

26
00:01:10,159 --> 00:01:11,760
payrolls and the types of

27
00:01:11,760 --> 00:01:13,760
vulnerabilities

28
00:01:13,760 --> 00:01:16,560
so these rookies are categorized into

29
00:01:16,560 --> 00:01:19,360
the following groups

30
00:01:19,360 --> 00:01:22,080
traditional lookups are made of only

31
00:01:22,080 --> 00:01:24,720
usable course and they replace system

32
00:01:24,720 --> 00:01:28,159
key binaries so it is detectable by

33
00:01:28,159 --> 00:01:29,200
using

34
00:01:29,200 --> 00:01:30,799
internal checking for those system

35
00:01:30,799 --> 00:01:33,200
binary system binaries

36
00:01:33,200 --> 00:01:35,920
and cornerable locations are stressier

37
00:01:35,920 --> 00:01:38,560
than usable leukis because they exist

38
00:01:38,560 --> 00:01:39,680
hardware

39
00:01:39,680 --> 00:01:41,439
corner space

40
00:01:41,439 --> 00:01:42,640
and

41
00:01:42,640 --> 00:01:44,079
they modify

42
00:01:44,079 --> 00:01:46,799
a sterile oil dynamical object so it

43
00:01:46,799 --> 00:01:49,280
requires code modification or code

44
00:01:49,280 --> 00:01:52,000
injection to the corner

45
00:01:52,000 --> 00:01:52,960
and

46
00:01:52,960 --> 00:01:55,840
in this case uh this type of locations

47
00:01:55,840 --> 00:01:59,360
are also detectable uh by using corner

48
00:01:59,360 --> 00:02:01,200
interior monitors

49
00:02:01,200 --> 00:02:03,600
and there is another type of locate

50
00:02:03,600 --> 00:02:06,000
called hardware support locates

51
00:02:06,000 --> 00:02:08,878
the hardware support are very stealthy

52
00:02:08,878 --> 00:02:12,239
because they exist hardwearable and they

53
00:02:12,239 --> 00:02:13,599
modify

54
00:02:13,599 --> 00:02:16,400
they exploit hardware features

55
00:02:16,400 --> 00:02:18,400
but previous works on hardware support

56
00:02:18,400 --> 00:02:21,200
rookies are also detectable by using

57
00:02:21,200 --> 00:02:24,640
corner intellect monitors because

58
00:02:24,640 --> 00:02:26,959
some of some of the payloads are still

59
00:02:26,959 --> 00:02:29,840
located in the corner space

60
00:02:29,840 --> 00:02:30,560
but

61
00:02:30,560 --> 00:02:33,120
our packet is different from all the

62
00:02:33,120 --> 00:02:36,440
other rookies

63
00:02:38,319 --> 00:02:40,480
so what is the pi kit

64
00:02:40,480 --> 00:02:42,400
this figure shows before and after pipe

65
00:02:42,400 --> 00:02:44,800
installation

66
00:02:44,800 --> 00:02:47,440
like other hardware support low case

67
00:02:47,440 --> 00:02:49,519
packet also exploits vulnerable hardware

68
00:02:49,519 --> 00:02:50,640
features

69
00:02:50,640 --> 00:02:53,680
more specifically pi kit modify hardware

70
00:02:53,680 --> 00:02:54,640
states

71
00:02:54,640 --> 00:02:56,640
in process interconnect in excellency

72
00:02:56,640 --> 00:02:59,040
small circuit server

73
00:02:59,040 --> 00:02:59,840
and

74
00:02:59,840 --> 00:03:02,319
the difference from others is pi kit is

75
00:03:02,319 --> 00:03:04,879
currently invented independent

76
00:03:04,879 --> 00:03:07,200
that means no code modification or

77
00:03:07,200 --> 00:03:10,480
injection to the corner is required

78
00:03:10,480 --> 00:03:13,040
and malicious payloads for pi kit can be

79
00:03:13,040 --> 00:03:15,440
made of only simple read write memory

80
00:03:15,440 --> 00:03:17,040
operations

81
00:03:17,040 --> 00:03:19,440
that means there needs there is no need

82
00:03:19,440 --> 00:03:22,879
to invoke system calls

83
00:03:23,040 --> 00:03:25,680
so it is very difficult to detect it by

84
00:03:25,680 --> 00:03:29,440
using the existing solutions

85
00:03:29,680 --> 00:03:32,480
so before getting into the detail

86
00:03:32,480 --> 00:03:33,840
let me introduce small circuit server

87
00:03:33,840 --> 00:03:37,280
and process internal technology

88
00:03:37,360 --> 00:03:39,920
here is a motherboard of high computing

89
00:03:39,920 --> 00:03:42,879
server as you can see there are several

90
00:03:42,879 --> 00:03:44,840
process circuits

91
00:03:44,840 --> 00:03:46,480
and

92
00:03:46,480 --> 00:03:49,680
local drams are connected to

93
00:03:49,680 --> 00:03:51,920
each process socket this type of server

94
00:03:51,920 --> 00:03:55,280
is referred to as a multi-circuit server

95
00:03:55,280 --> 00:03:56,640
in the multi-socket server the

96
00:03:56,640 --> 00:03:58,239
processors

97
00:03:58,239 --> 00:04:00,560
need to be connected to each other in

98
00:04:00,560 --> 00:04:02,879
order to access remote theorems this can

99
00:04:02,879 --> 00:04:04,640
be done by using

100
00:04:04,640 --> 00:04:07,280
the processed inorganic technology

101
00:04:07,280 --> 00:04:10,000
there are two examples amd hybrid

102
00:04:10,000 --> 00:04:12,560
transports and intel quick pass

103
00:04:12,560 --> 00:04:15,200
interconnect technology

104
00:04:15,200 --> 00:04:18,720
so most of today's data centers and high

105
00:04:18,720 --> 00:04:20,639
performance computing use such

106
00:04:20,639 --> 00:04:23,600
multi-server

107
00:04:24,880 --> 00:04:26,479
let's take a look at the processing

108
00:04:26,479 --> 00:04:29,600
interconnect in more detail

109
00:04:29,600 --> 00:04:31,360
this is a

110
00:04:31,360 --> 00:04:34,000
block diagram of process interconnect

111
00:04:34,000 --> 00:04:36,639
in four-way small circuit server

112
00:04:36,639 --> 00:04:39,360
as you can see each node contains

113
00:04:39,360 --> 00:04:41,120
multiple cores

114
00:04:41,120 --> 00:04:44,000
and local trams and on those bridges the

115
00:04:44,000 --> 00:04:46,479
notes which contain a memory controller

116
00:04:46,479 --> 00:04:49,280
and router

117
00:04:49,919 --> 00:04:52,080
in the process in the connect these

118
00:04:52,080 --> 00:04:54,800
nodes are connected to each other by

119
00:04:54,800 --> 00:04:57,199
using process internal technology

120
00:04:57,199 --> 00:04:58,639
so in this case

121
00:04:58,639 --> 00:05:02,800
if certain nodes access remote drams

122
00:05:02,800 --> 00:05:05,600
a northridge create a package are based

123
00:05:05,600 --> 00:05:08,320
on the dmf information and router

124
00:05:08,320 --> 00:05:10,639
transmitter packet based on the route

125
00:05:10,639 --> 00:05:13,280
information

126
00:05:13,360 --> 00:05:15,280
so what happens

127
00:05:15,280 --> 00:05:18,720
when the nodes access remote drives

128
00:05:18,720 --> 00:05:21,840
if core 1 in node 2 tries to access

129
00:05:21,840 --> 00:05:23,520
remote drams

130
00:05:23,520 --> 00:05:25,680
the notes which create the packet based

131
00:05:25,680 --> 00:05:29,120
on the data map information we call this

132
00:05:29,120 --> 00:05:31,360
tram address mapping table

133
00:05:31,360 --> 00:05:33,199
as you can see

134
00:05:33,199 --> 00:05:35,919
this table is located between the core

135
00:05:35,919 --> 00:05:39,120
and the north bridge and the table is

136
00:05:39,120 --> 00:05:43,280
initialized by the bias at the time

137
00:05:43,280 --> 00:05:44,560
so

138
00:05:44,560 --> 00:05:48,000
in the table each entry contains a drm

139
00:05:48,000 --> 00:05:50,800
address mapping range and

140
00:05:50,800 --> 00:05:53,680
corresponding each destination node

141
00:05:53,680 --> 00:05:57,039
and these are currently used entries

142
00:05:57,039 --> 00:05:58,479
that means

143
00:05:58,479 --> 00:06:02,560
the system is four ways multiple server

144
00:06:02,560 --> 00:06:06,000
and these are reserved for scalability

145
00:06:06,000 --> 00:06:08,639
that means the system is a system can be

146
00:06:08,639 --> 00:06:09,919
extended to

147
00:06:09,919 --> 00:06:11,360
by

148
00:06:11,360 --> 00:06:14,720
eight waves multi-circuit server

149
00:06:14,720 --> 00:06:15,440
so

150
00:06:15,440 --> 00:06:18,240
in this case the memory case

151
00:06:18,240 --> 00:06:19,680
exists

152
00:06:19,680 --> 00:06:22,880
in entry three so the notes the notes

153
00:06:22,880 --> 00:06:26,639
which create the packet like this

154
00:06:26,639 --> 00:06:29,199
the destination is three and the source

155
00:06:29,199 --> 00:06:30,479
is zero

156
00:06:30,479 --> 00:06:32,639
and memory type is request

157
00:06:32,639 --> 00:06:36,639
and and body contains physical address

158
00:06:36,639 --> 00:06:39,280
so after the router

159
00:06:39,280 --> 00:06:41,840
transmit the packet

160
00:06:41,840 --> 00:06:43,520
based on the routing table the router

161
00:06:43,520 --> 00:06:46,000
table contains nodes and it's

162
00:06:46,000 --> 00:06:48,880
corresponding out our proportion

163
00:06:48,880 --> 00:06:51,680
so in this case the destination node is

164
00:06:51,680 --> 00:06:53,440
three so

165
00:06:53,440 --> 00:06:58,880
the packet is lovely to the south port

166
00:06:59,199 --> 00:07:00,520
here

167
00:07:00,520 --> 00:07:01,680
[Music]

168
00:07:01,680 --> 00:07:04,479
the intuition here is the router only

169
00:07:04,479 --> 00:07:07,840
looks at the destination in the package

170
00:07:07,840 --> 00:07:08,639
so

171
00:07:08,639 --> 00:07:09,919
if we are

172
00:07:09,919 --> 00:07:12,400
we are able to change the packet you can

173
00:07:12,400 --> 00:07:15,759
send the packet to wherever you want

174
00:07:15,759 --> 00:07:18,000
as mentioned before the packages create

175
00:07:18,000 --> 00:07:19,440
the

176
00:07:19,440 --> 00:07:21,759
title map information so

177
00:07:21,759 --> 00:07:23,199
we are able to

178
00:07:23,199 --> 00:07:24,880
if we are able to modify the data

179
00:07:24,880 --> 00:07:27,280
mapping table we can send the packet to

180
00:07:27,280 --> 00:07:30,479
wherever we want

181
00:07:30,479 --> 00:07:32,319
the dealer map gram address mapping

182
00:07:32,319 --> 00:07:35,680
table has several features that helps to

183
00:07:35,680 --> 00:07:38,080
modify the direct mappings

184
00:07:38,080 --> 00:07:40,639
the first one is configurability

185
00:07:40,639 --> 00:07:43,120
the system needs to be

186
00:07:43,120 --> 00:07:47,120
remove our ads memories the table needs

187
00:07:47,120 --> 00:07:48,960
to be reconfigurable

188
00:07:48,960 --> 00:07:51,680
for providing flexibility

189
00:07:51,680 --> 00:07:55,599
and second feature is extra entries

190
00:07:55,759 --> 00:07:57,840
the system is needed to be

191
00:07:57,840 --> 00:08:01,440
designed for scalability

192
00:08:01,440 --> 00:08:02,160
so

193
00:08:02,160 --> 00:08:05,039
the number of entries can be equal to or

194
00:08:05,039 --> 00:08:08,639
greater than the largest systems

195
00:08:08,639 --> 00:08:11,599
and discrepancy

196
00:08:11,599 --> 00:08:15,120
so we can modify the data mappings

197
00:08:15,120 --> 00:08:16,319
after

198
00:08:16,319 --> 00:08:18,800
it is initialized

199
00:08:18,800 --> 00:08:21,120
and lastly there is no interview

200
00:08:21,120 --> 00:08:24,879
checking for those mapping information

201
00:08:24,879 --> 00:08:28,080
so the pi kit exploit these features

202
00:08:28,080 --> 00:08:31,758
to modifying particular mappings

203
00:08:32,399 --> 00:08:34,719
okay let's talk about let's talk about

204
00:08:34,719 --> 00:08:38,399
design and implementation of pi kit

205
00:08:38,399 --> 00:08:39,440
here is

206
00:08:39,440 --> 00:08:43,360
high level overview of fact insulation

207
00:08:43,360 --> 00:08:45,279
in the figure

208
00:08:45,279 --> 00:08:47,760
our technology is the node where

209
00:08:47,760 --> 00:08:48,640
the

210
00:08:48,640 --> 00:08:50,959
mapping table is modified to insert the

211
00:08:50,959 --> 00:08:55,200
pi kit and victim node is node where

212
00:08:55,200 --> 00:08:57,680
the memories are maliciously accessed by

213
00:08:57,680 --> 00:08:59,760
the attacker

214
00:08:59,760 --> 00:09:01,200
so

215
00:09:01,200 --> 00:09:02,560
the first thing

216
00:09:02,560 --> 00:09:05,440
the attack will have to is to define the

217
00:09:05,440 --> 00:09:07,839
alternative

218
00:09:07,839 --> 00:09:10,399
and then what i can do is to

219
00:09:10,399 --> 00:09:13,200
modify the dynamic table to map this

220
00:09:13,200 --> 00:09:15,360
auto address region to victim address

221
00:09:15,360 --> 00:09:16,640
region

222
00:09:16,640 --> 00:09:20,480
so after that any memory requests to

223
00:09:20,480 --> 00:09:22,880
this ortega's region is

224
00:09:22,880 --> 00:09:25,440
sent to the victim address region not

225
00:09:25,440 --> 00:09:27,760
alternatively so

226
00:09:27,760 --> 00:09:31,680
the pi kit exists at a hardware level

227
00:09:31,680 --> 00:09:34,560
existing software real monitors cannot

228
00:09:34,560 --> 00:09:37,519
detect it

229
00:09:37,519 --> 00:09:39,920
and in order to define articularis

230
00:09:39,920 --> 00:09:41,760
religion the attacker should take care

231
00:09:41,760 --> 00:09:44,800
of the followings

232
00:09:44,800 --> 00:09:46,640
the allocated authorities region should

233
00:09:46,640 --> 00:09:49,680
be only accessed by the attacker this is

234
00:09:49,680 --> 00:09:53,120
for preventing system crashes

235
00:09:53,120 --> 00:09:54,240
and

236
00:09:54,240 --> 00:09:56,640
the range of hotel just religion should

237
00:09:56,640 --> 00:09:58,880
follow the resolution of the dynamic

238
00:09:58,880 --> 00:10:00,000
table

239
00:10:00,000 --> 00:10:03,360
for example and obtain processor has

240
00:10:03,360 --> 00:10:05,519
shift megabytes resolution

241
00:10:05,519 --> 00:10:07,920
that means the attacker needs to

242
00:10:07,920 --> 00:10:09,440
allocate

243
00:10:09,440 --> 00:10:11,519
at least 60 megabytes

244
00:10:11,519 --> 00:10:14,720
of physically contiguous male region

245
00:10:14,720 --> 00:10:17,680
for this we can use huge page

246
00:10:17,680 --> 00:10:19,920
in the packet we allocated on your buy

247
00:10:19,920 --> 00:10:23,920
to the page by using a melo function

248
00:10:23,920 --> 00:10:26,720
and of course the attacker should

249
00:10:26,720 --> 00:10:28,320
i should keep allocating the article

250
00:10:28,320 --> 00:10:31,440
this region as long as the package is

251
00:10:31,440 --> 00:10:33,839
stored

252
00:10:34,240 --> 00:10:36,560
and in order to

253
00:10:36,560 --> 00:10:40,079
modify the data mapping table

254
00:10:40,079 --> 00:10:42,640
the taker false need to

255
00:10:42,640 --> 00:10:45,839
obtain the physical addresses of the

256
00:10:45,839 --> 00:10:48,399
allocated authorities region

257
00:10:48,399 --> 00:10:50,880
this can be done by using phasma file

258
00:10:50,880 --> 00:10:53,040
for example

259
00:10:53,040 --> 00:10:55,200
and actually

260
00:10:55,200 --> 00:10:59,200
the entries are memory mapped registers

261
00:10:59,200 --> 00:11:01,920
in case of amd they have

262
00:11:01,920 --> 00:11:05,680
eight sets of drum based limit registers

263
00:11:05,680 --> 00:11:09,120
the dm base register contains

264
00:11:09,120 --> 00:11:11,040
a base address

265
00:11:11,040 --> 00:11:14,640
and you remember register contains

266
00:11:14,640 --> 00:11:19,040
limit address and its destination node

267
00:11:19,360 --> 00:11:20,880
so

268
00:11:20,880 --> 00:11:22,320
this pair of

269
00:11:22,320 --> 00:11:25,279
registers can be considered as a single

270
00:11:25,279 --> 00:11:28,720
entry in the table

271
00:11:28,720 --> 00:11:30,640
in order to modify the data mapping

272
00:11:30,640 --> 00:11:31,920
table

273
00:11:31,920 --> 00:11:34,399
we need to change

274
00:11:34,399 --> 00:11:36,880
these registers by using system result

275
00:11:36,880 --> 00:11:39,360
commands

276
00:11:40,079 --> 00:11:40,959
but

277
00:11:40,959 --> 00:11:43,920
modifying the data mapping table should

278
00:11:43,920 --> 00:11:45,839
be done carefully

279
00:11:45,839 --> 00:11:48,560
otherwise it might cause

280
00:11:48,560 --> 00:11:51,518
system crashes

281
00:11:52,160 --> 00:11:57,200
if an attacker is located in node 1 and

282
00:11:57,200 --> 00:11:58,160
he

283
00:11:58,160 --> 00:12:00,639
allocated the auto solution like this

284
00:12:00,639 --> 00:12:02,720
and he want to

285
00:12:02,720 --> 00:12:06,000
map this region to node 2.

286
00:12:06,000 --> 00:12:08,639
in this case the attacker should create

287
00:12:08,639 --> 00:12:11,120
new entry one by one

288
00:12:11,120 --> 00:12:14,800
the first attacker um create new entry

289
00:12:14,800 --> 00:12:16,560
that indicates

290
00:12:16,560 --> 00:12:19,120
from the original region to write before

291
00:12:19,120 --> 00:12:20,959
the author just region

292
00:12:20,959 --> 00:12:24,480
and then create another entry indicating

293
00:12:24,480 --> 00:12:27,680
the artillerdus region and modify each

294
00:12:27,680 --> 00:12:29,839
destination node

295
00:12:29,839 --> 00:12:30,959
and then

296
00:12:30,959 --> 00:12:33,760
create another entry indicating the rest

297
00:12:33,760 --> 00:12:36,320
of the original region

298
00:12:36,320 --> 00:12:39,680
and lastly remove the original entry

299
00:12:39,680 --> 00:12:43,360
so after that any memory requests

300
00:12:43,360 --> 00:12:45,440
to the autodesk region

301
00:12:45,440 --> 00:12:47,839
will be sent to somewhere in

302
00:12:47,839 --> 00:12:50,560
node 2.

303
00:12:51,120 --> 00:12:55,120
so here is an example of a pi kit on amd

304
00:12:55,120 --> 00:12:57,920
obtained server

305
00:12:58,000 --> 00:13:00,720
for example

306
00:13:01,120 --> 00:13:03,600
memory case is made by node one the

307
00:13:03,600 --> 00:13:05,040
north which

308
00:13:05,040 --> 00:13:06,959
then the north bridge create a packet

309
00:13:06,959 --> 00:13:09,120
based on the data mapping table

310
00:13:09,120 --> 00:13:11,920
and route transmit the packet

311
00:13:11,920 --> 00:13:14,160
based on the routing table in this case

312
00:13:14,160 --> 00:13:16,560
the destination node is one the packet

313
00:13:16,560 --> 00:13:19,680
is loaded to the local port

314
00:13:19,680 --> 00:13:21,040
however

315
00:13:21,040 --> 00:13:23,839
attacker allocated hotels regional like

316
00:13:23,839 --> 00:13:25,200
this and

317
00:13:25,200 --> 00:13:28,800
he also modified the pyramid table like

318
00:13:28,800 --> 00:13:29,680
this

319
00:13:29,680 --> 00:13:31,040
in this case

320
00:13:31,040 --> 00:13:33,600
the same memory requests

321
00:13:33,600 --> 00:13:36,959
will be found in entry

322
00:13:36,959 --> 00:13:38,160
six

323
00:13:38,160 --> 00:13:40,320
and then drought router transmitter

324
00:13:40,320 --> 00:13:41,839
packet to

325
00:13:41,839 --> 00:13:44,320
each east port

326
00:13:44,320 --> 00:13:47,560
like this

327
00:13:48,639 --> 00:13:50,079
so far

328
00:13:50,079 --> 00:13:53,839
i explained how to implement pi kit on

329
00:13:53,839 --> 00:13:56,800
amd server but the pi key can also be

330
00:13:56,800 --> 00:13:59,920
extended to inter architecture

331
00:13:59,920 --> 00:14:01,760
intel also has

332
00:14:01,760 --> 00:14:04,079
data mapping table called

333
00:14:04,079 --> 00:14:05,279
uh

334
00:14:05,279 --> 00:14:07,839
source address decoder

335
00:14:07,839 --> 00:14:10,480
and the key difference from the amd is

336
00:14:10,480 --> 00:14:12,800
target address decoder the target

337
00:14:12,800 --> 00:14:16,000
address decoder is an additional table

338
00:14:16,000 --> 00:14:18,639
and it is accessed before the memory

339
00:14:18,639 --> 00:14:21,040
request is sent to the memory controller

340
00:14:21,040 --> 00:14:23,440
at the destination node

341
00:14:23,440 --> 00:14:28,240
and the tid contains offset value

342
00:14:28,240 --> 00:14:30,399
for remapping this continuous memory

343
00:14:30,399 --> 00:14:33,279
region so because of this

344
00:14:33,279 --> 00:14:36,240
the td offset value can be useful when

345
00:14:36,240 --> 00:14:37,360
we

346
00:14:37,360 --> 00:14:40,800
want to remap the beauty modulus region

347
00:14:40,800 --> 00:14:45,199
this is the impact of tds of the value

348
00:14:45,199 --> 00:14:48,720
in md server to attack the auto address

349
00:14:48,720 --> 00:14:51,199
region is mapped to

350
00:14:51,199 --> 00:14:53,120
single bitmaster region

351
00:14:53,120 --> 00:14:54,079
but

352
00:14:54,079 --> 00:14:57,120
by change but in intel architecture by

353
00:14:57,120 --> 00:14:59,680
changing the tid of the value we can

354
00:14:59,680 --> 00:15:02,240
limit the articular solution to

355
00:15:02,240 --> 00:15:04,000
different vitamin address revision like

356
00:15:04,000 --> 00:15:05,519
this

357
00:15:05,519 --> 00:15:06,560
so

358
00:15:06,560 --> 00:15:07,839
based on the

359
00:15:07,839 --> 00:15:10,800
offset values we can perform a fine

360
00:15:10,800 --> 00:15:13,839
grained attack

361
00:15:14,800 --> 00:15:17,680
so after practice is told

362
00:15:17,680 --> 00:15:20,639
malicious payrolls are needed for

363
00:15:20,639 --> 00:15:23,680
carrying out attack

364
00:15:25,199 --> 00:15:25,920
uh

365
00:15:25,920 --> 00:15:28,000
there may be many possible attacks with

366
00:15:28,000 --> 00:15:29,600
pi kit

367
00:15:29,600 --> 00:15:31,759
in our paper we developed four different

368
00:15:31,759 --> 00:15:33,440
types of attacks

369
00:15:33,440 --> 00:15:36,160
the system corruption attack can be used

370
00:15:36,160 --> 00:15:38,560
to crash the system and bash keyboard

371
00:15:38,560 --> 00:15:41,680
robot can be used to sync the user usual

372
00:15:41,680 --> 00:15:44,160
skill strokes and that share credential

373
00:15:44,160 --> 00:15:45,519
object attack

374
00:15:45,519 --> 00:15:48,240
can be used for privileged escalation

375
00:15:48,240 --> 00:15:51,279
and shared driver attack can be used for

376
00:15:51,279 --> 00:15:54,000
planting hidden back doors

377
00:15:54,000 --> 00:15:56,000
so

378
00:15:56,000 --> 00:15:58,639
we developed

379
00:15:58,880 --> 00:16:02,320
two bachelor tags on amd server and we

380
00:16:02,320 --> 00:16:03,600
developed

381
00:16:03,600 --> 00:16:06,560
a shared library attack on intel server

382
00:16:06,560 --> 00:16:08,320
i'm going to show you

383
00:16:08,320 --> 00:16:11,199
the last two attacks

384
00:16:11,199 --> 00:16:13,120
the first thing is special credential

385
00:16:13,120 --> 00:16:14,959
object attack

386
00:16:14,959 --> 00:16:17,600
the goal of this attack is overrides

387
00:16:17,600 --> 00:16:20,560
bashes credential data to escalate users

388
00:16:20,560 --> 00:16:22,959
privileges

389
00:16:22,959 --> 00:16:25,680
after packet is installed

390
00:16:25,680 --> 00:16:27,600
detector runs

391
00:16:27,600 --> 00:16:30,800
another shell in the victim node with a

392
00:16:30,800 --> 00:16:33,360
normal user privilege

393
00:16:33,360 --> 00:16:35,759
and in order to override the bash's

394
00:16:35,759 --> 00:16:37,920
credential data the attacker first needs

395
00:16:37,920 --> 00:16:39,040
to

396
00:16:39,040 --> 00:16:41,440
find that credential data in the victim

397
00:16:41,440 --> 00:16:42,639
address region

398
00:16:42,639 --> 00:16:45,759
this can be done used by using scanning

399
00:16:45,759 --> 00:16:48,639
the fingerprinting

400
00:16:48,639 --> 00:16:52,000
as a fingerprint value we can utilize

401
00:16:52,000 --> 00:16:53,279
the credential

402
00:16:53,279 --> 00:16:54,959
structure

403
00:16:54,959 --> 00:16:59,120
so otec already knows his iuid and gid

404
00:16:59,120 --> 00:17:00,560
so

405
00:17:00,560 --> 00:17:03,360
these consecutive values can be used as

406
00:17:03,360 --> 00:17:06,079
a fingerprint value

407
00:17:06,079 --> 00:17:09,679
and the attacker can knows

408
00:17:09,679 --> 00:17:12,240
the range of corners virtual addresses

409
00:17:12,240 --> 00:17:13,599
so

410
00:17:13,599 --> 00:17:15,839
the pointers containing these addresses

411
00:17:15,839 --> 00:17:17,599
can be used as a fingerprint value as

412
00:17:17,599 --> 00:17:18,880
well

413
00:17:18,880 --> 00:17:22,319
and other publicly available values can

414
00:17:22,319 --> 00:17:23,439
be used

415
00:17:23,439 --> 00:17:26,880
as a fingerprint value as well

416
00:17:27,439 --> 00:17:30,000
so after finding

417
00:17:30,000 --> 00:17:32,960
that credential data the attacker

418
00:17:32,960 --> 00:17:34,880
can overwrite

419
00:17:34,880 --> 00:17:39,039
the effective uid or uid

420
00:17:39,200 --> 00:17:40,000
with

421
00:17:40,000 --> 00:17:44,080
zero zero means routes so

422
00:17:44,080 --> 00:17:46,320
this can be done by using simple memory

423
00:17:46,320 --> 00:17:48,960
write instruction

424
00:17:48,960 --> 00:17:52,400
in the paper we used non-temporal write

425
00:17:52,400 --> 00:17:54,880
memory non-temporary instruction by to

426
00:17:54,880 --> 00:17:56,799
bypass

427
00:17:56,799 --> 00:17:59,120
the caching

428
00:17:59,120 --> 00:18:01,760
so this is the results after overriding

429
00:18:01,760 --> 00:18:03,360
the credential data

430
00:18:03,360 --> 00:18:07,120
we were able to get a looser

431
00:18:08,640 --> 00:18:10,480
as mentioned before the

432
00:18:10,480 --> 00:18:13,760
address region is mapped to thumbnail

433
00:18:13,760 --> 00:18:15,360
in victim node so

434
00:18:15,360 --> 00:18:16,799
there is case

435
00:18:16,799 --> 00:18:18,000
where the

436
00:18:18,000 --> 00:18:20,960
bash's credential data doesn't exist the

437
00:18:20,960 --> 00:18:23,760
victim of this region

438
00:18:23,760 --> 00:18:26,799
it happens quite frequently so

439
00:18:26,799 --> 00:18:29,280
but in this case the attackers can still

440
00:18:29,280 --> 00:18:31,360
increase the possibility of finding the

441
00:18:31,360 --> 00:18:32,960
credential data

442
00:18:32,960 --> 00:18:37,760
by spraying the process control block

443
00:18:38,880 --> 00:18:40,559
and

444
00:18:40,559 --> 00:18:42,559
the second object is

445
00:18:42,559 --> 00:18:45,840
shared library attack

446
00:18:45,840 --> 00:18:49,280
this object is for interarchitecture

447
00:18:49,280 --> 00:18:50,799
as i mentioned before

448
00:18:50,799 --> 00:18:53,440
when we use tds of the value we can

449
00:18:53,440 --> 00:18:56,720
remap the authorization to different

450
00:18:56,720 --> 00:18:59,840
victim address regions so if target

451
00:18:59,840 --> 00:19:02,880
address is fixed such as shared library

452
00:19:02,880 --> 00:19:04,880
we can perform the more controlled

453
00:19:04,880 --> 00:19:06,559
attack

454
00:19:06,559 --> 00:19:10,640
so for the shared library attack

455
00:19:10,640 --> 00:19:12,720
the attacker first needs to obtain the

456
00:19:12,720 --> 00:19:15,520
virtual addresses of the

457
00:19:15,520 --> 00:19:17,760
shared library for this

458
00:19:17,760 --> 00:19:20,080
we can write a simple program that

459
00:19:20,080 --> 00:19:22,559
dynamically links the libc

460
00:19:22,559 --> 00:19:26,640
and run the program and obtain

461
00:19:26,640 --> 00:19:29,679
the partial address of the libc

462
00:19:29,679 --> 00:19:33,360
and then translate translate

463
00:19:33,360 --> 00:19:36,480
to the physical addresses

464
00:19:36,480 --> 00:19:38,400
so after obtaining the physical

465
00:19:38,400 --> 00:19:40,880
addresses of the shared library

466
00:19:40,880 --> 00:19:42,640
we can modify

467
00:19:42,640 --> 00:19:47,840
the sad and tid to install the pi kit

468
00:19:48,720 --> 00:19:51,520
so after packet is installed

469
00:19:51,520 --> 00:19:54,000
the attacker can overwrite runtime code

470
00:19:54,000 --> 00:19:56,720
in the memory

471
00:19:56,960 --> 00:19:58,240
in the paper

472
00:19:58,240 --> 00:19:59,919
we changed

473
00:19:59,919 --> 00:20:03,840
the first 48 bytes of kpwid

474
00:20:03,840 --> 00:20:07,520
with simple circles that change the uid

475
00:20:07,520 --> 00:20:08,320
and

476
00:20:08,320 --> 00:20:11,280
execute another base share

477
00:20:11,280 --> 00:20:12,559
here

478
00:20:12,559 --> 00:20:14,720
even though

479
00:20:14,720 --> 00:20:17,360
the library is loaded

480
00:20:17,360 --> 00:20:20,240
known right to memory region the pi kit

481
00:20:20,240 --> 00:20:21,679
bypasses

482
00:20:21,679 --> 00:20:24,880
any other any operating systems page

483
00:20:24,880 --> 00:20:27,679
permission checks

484
00:20:28,000 --> 00:20:28,960
so

485
00:20:28,960 --> 00:20:31,280
after overriding

486
00:20:31,280 --> 00:20:32,720
when

487
00:20:32,720 --> 00:20:35,840
if the attacker runs system commands

488
00:20:35,840 --> 00:20:38,080
that internally invokes this function

489
00:20:38,080 --> 00:20:41,039
and have root permission with that uid

490
00:20:41,039 --> 00:20:43,600
then the attacker can

491
00:20:43,600 --> 00:20:46,399
get a real share

492
00:20:46,640 --> 00:20:49,039
so this is can be used as a hidden

493
00:20:49,039 --> 00:20:51,520
factor

494
00:20:52,720 --> 00:20:54,480
now i'm going to explain

495
00:20:54,480 --> 00:20:58,240
possible solutions

496
00:21:00,159 --> 00:21:02,400
as a possible solutions you can consider

497
00:21:02,400 --> 00:21:05,520
uh several things

498
00:21:05,760 --> 00:21:06,720
amd

499
00:21:06,720 --> 00:21:09,280
has locked in features which is

500
00:21:09,280 --> 00:21:11,600
activated by defaults

501
00:21:11,600 --> 00:21:13,200
in your

502
00:21:13,200 --> 00:21:15,360
in your systems so

503
00:21:15,360 --> 00:21:17,919
some of recent systems are not

504
00:21:17,919 --> 00:21:20,159
vulnerable to packet

505
00:21:20,159 --> 00:21:22,640
but in old bios

506
00:21:22,640 --> 00:21:24,799
the option is not a default

507
00:21:24,799 --> 00:21:25,760
so

508
00:21:25,760 --> 00:21:28,480
these old systems are still vulnerable

509
00:21:28,480 --> 00:21:31,440
to pyke

510
00:21:31,440 --> 00:21:32,320
and

511
00:21:32,320 --> 00:21:34,480
in case of intel

512
00:21:34,480 --> 00:21:36,799
they don't have any options to lock down

513
00:21:36,799 --> 00:21:40,080
the dlam configurations

514
00:21:40,799 --> 00:21:42,320
and for

515
00:21:42,320 --> 00:21:44,799
software solutions you can consider

516
00:21:44,799 --> 00:21:48,240
dealer mapping monitor

517
00:21:48,559 --> 00:21:51,120
of course it should be protected with a

518
00:21:51,120 --> 00:21:53,919
sql platform such as stress john or

519
00:21:53,919 --> 00:21:56,840
intel's fgx

520
00:21:56,840 --> 00:22:01,120
and for hardware solutions

521
00:22:01,120 --> 00:22:03,520
intel might develop blockchain features

522
00:22:03,520 --> 00:22:06,159
that amd has

523
00:22:06,159 --> 00:22:06,960
and

524
00:22:06,960 --> 00:22:09,760
in the paper uh we also talked about

525
00:22:09,760 --> 00:22:12,480
other possible hardware modifications

526
00:22:12,480 --> 00:22:14,400
so

527
00:22:14,400 --> 00:22:17,679
pretty simple to our paper

528
00:22:18,080 --> 00:22:20,480
and as a summary

529
00:22:20,480 --> 00:22:22,320
packet is a current independent process

530
00:22:22,320 --> 00:22:24,480
in acrylic root kit that exploits

531
00:22:24,480 --> 00:22:26,400
vulnerable hardware feature in process

532
00:22:26,400 --> 00:22:29,280
interconnect in xl6 small circuit server

533
00:22:29,280 --> 00:22:30,240
and

534
00:22:30,240 --> 00:22:32,480
packet is color independent that means

535
00:22:32,480 --> 00:22:34,240
no code modification over coordination

536
00:22:34,240 --> 00:22:36,960
to the corner is required

537
00:22:36,960 --> 00:22:39,280
in the paper we developed four different

538
00:22:39,280 --> 00:22:41,840
types of attacks

539
00:22:41,840 --> 00:22:43,280
and

540
00:22:43,280 --> 00:22:44,720
because

541
00:22:44,720 --> 00:22:46,799
the malicious payloads of pike can be

542
00:22:46,799 --> 00:22:48,240
made of only

543
00:22:48,240 --> 00:22:51,039
simply the right memory operations so we

544
00:22:51,039 --> 00:22:53,360
can say that packet is very

545
00:22:53,360 --> 00:22:56,240
stealth-looking

546
00:22:56,799 --> 00:22:59,270
okay thank you for listening

547
00:22:59,270 --> 00:23:03,379
[Applause]

548
00:23:05,039 --> 00:23:06,159
great thanks a lot it's pretty

549
00:23:06,159 --> 00:23:07,919
interesting so uh again we have time for

550
00:23:07,919 --> 00:23:11,280
questions if anyone has any questions

551
00:23:11,280 --> 00:23:12,080
um

552
00:23:12,080 --> 00:23:14,159
well i guess i'll start us off uh so i'm

553
00:23:14,159 --> 00:23:15,600
just curious when you talk to intel and

554
00:23:15,600 --> 00:23:17,520
amd about this what's their what is

555
00:23:17,520 --> 00:23:18,880
their reaction

556
00:23:18,880 --> 00:23:21,440
how do they respond to these attacks

557
00:23:21,440 --> 00:23:24,240
oh response me

558
00:23:24,559 --> 00:23:27,039
what's what oh oh you did so you just

559
00:23:27,039 --> 00:23:28,480
but what do they do my question is what

560
00:23:28,480 --> 00:23:30,400
do they what do they actually do yeah

561
00:23:30,400 --> 00:23:32,159
okay um

562
00:23:32,159 --> 00:23:33,039
so

563
00:23:33,039 --> 00:23:36,640
we responsibly disclosed this issue to

564
00:23:36,640 --> 00:23:38,159
yes search

565
00:23:38,159 --> 00:23:40,400
without a draft version

566
00:23:40,400 --> 00:23:43,039
oh sorry

567
00:23:43,520 --> 00:23:44,720
go ahead

568
00:23:44,720 --> 00:23:47,919
and we'll receive the response

569
00:23:47,919 --> 00:23:49,600
in april 7

570
00:23:49,600 --> 00:23:53,120
from the u.s search

571
00:23:53,600 --> 00:23:57,200
amd and intel said to install the packet

572
00:23:57,200 --> 00:23:59,840
loop permission is required

573
00:23:59,840 --> 00:24:00,559
so

574
00:24:00,559 --> 00:24:03,279
they didn't care about it

575
00:24:03,279 --> 00:24:06,880
but as you know to install the pi key i

576
00:24:06,880 --> 00:24:08,559
installed the root kit the loop

577
00:24:08,559 --> 00:24:10,960
permission is always needed

578
00:24:10,960 --> 00:24:13,039
so

579
00:24:13,039 --> 00:24:15,919
and mg said rock dylan feature can

580
00:24:15,919 --> 00:24:18,880
prevent this attack but

581
00:24:18,880 --> 00:24:20,640
as i mentioned before

582
00:24:20,640 --> 00:24:22,240
all systems are

583
00:24:22,240 --> 00:24:24,880
still vulnerable to the fight

584
00:24:24,880 --> 00:24:26,880
and until now

585
00:24:26,880 --> 00:24:28,799
andy didn't mention

586
00:24:28,799 --> 00:24:31,200
mention that

587
00:24:31,200 --> 00:24:34,400
these old systems

588
00:24:34,960 --> 00:24:38,240
and we also send our camera a diversion

589
00:24:38,240 --> 00:24:40,720
but they didn't respond here great great

590
00:24:40,720 --> 00:24:41,840
thanks a lot

591
00:24:41,840 --> 00:24:45,039
so any other any other questions

592
00:24:45,039 --> 00:24:46,960
uh okay if not then this is the end of

593
00:24:46,960 --> 00:24:49,039
the first session so let's thank all the

594
00:24:49,039 --> 00:24:52,039
speakers

