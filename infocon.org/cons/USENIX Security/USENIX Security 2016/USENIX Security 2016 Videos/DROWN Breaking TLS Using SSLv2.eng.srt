1
00:00:10,559 --> 00:00:13,920
hi so thanks for coming to our talk

2
00:00:13,920 --> 00:00:15,679
today i'm going to talk about ron which

3
00:00:15,679 --> 00:00:18,240
is a joint project with 14 other

4
00:00:18,240 --> 00:00:20,640
researchers from germany and the states

5
00:00:20,640 --> 00:00:23,359
and ground is about breaking tls using

6
00:00:23,359 --> 00:00:25,279
sslv2

7
00:00:25,279 --> 00:00:27,119
now let's take a moment to talk about

8
00:00:27,119 --> 00:00:29,039
sslv2 because

9
00:00:29,039 --> 00:00:31,199
when i give this talk the moment i

10
00:00:31,199 --> 00:00:34,160
mention sslv2 people always kind of

11
00:00:34,160 --> 00:00:36,320
raise their eyebrows and start wondering

12
00:00:36,320 --> 00:00:38,879
is this even going to be interesting

13
00:00:38,879 --> 00:00:41,840
sslv2 is an old protocol a 20 year old

14
00:00:41,840 --> 00:00:42,879
protocol

15
00:00:42,879 --> 00:00:45,120
that was published in 95 and was

16
00:00:45,120 --> 00:00:47,440
immediately found to be vulnerable to

17
00:00:47,440 --> 00:00:49,520
many in the middle attacks so it was

18
00:00:49,520 --> 00:00:52,399
quickly replaced by ssrv3 which is kind

19
00:00:52,399 --> 00:00:55,120
of the beta version for tls

20
00:00:55,120 --> 00:00:56,480
and then

21
00:00:56,480 --> 00:00:58,480
people pretty much forgot about this

22
00:00:58,480 --> 00:01:00,640
protocol

23
00:01:00,640 --> 00:01:02,960
some people chose to still support it

24
00:01:02,960 --> 00:01:05,438
and before we went public with wrong the

25
00:01:05,438 --> 00:01:07,280
common wisdom was that

26
00:01:07,280 --> 00:01:10,720
it's okay to support sslv2 and maybe

27
00:01:10,720 --> 00:01:14,080
it's even recommended to support sslv2

28
00:01:14,080 --> 00:01:15,360
especially so

29
00:01:15,360 --> 00:01:17,360
on your email server

30
00:01:17,360 --> 00:01:19,439
um

31
00:01:19,439 --> 00:01:21,439
well first of all this happens first of

32
00:01:21,439 --> 00:01:23,600
all because security for email is kind

33
00:01:23,600 --> 00:01:25,759
of broken anyway

34
00:01:25,759 --> 00:01:28,240
and also the common wisdom was that

35
00:01:28,240 --> 00:01:30,880
there might be very old email clients

36
00:01:30,880 --> 00:01:34,479
lying around that only support sslv2 so

37
00:01:34,479 --> 00:01:36,799
you might want to accommodate these old

38
00:01:36,799 --> 00:01:39,360
email clients on your server by keeping

39
00:01:39,360 --> 00:01:42,960
support for sslv2

40
00:01:43,680 --> 00:01:44,799
however

41
00:01:44,799 --> 00:01:48,079
our results show that the mere presence

42
00:01:48,079 --> 00:01:50,079
of ssl v2

43
00:01:50,079 --> 00:01:52,880
breaks security for tls

44
00:01:52,880 --> 00:01:55,520
when i say presence i mean uh

45
00:01:55,520 --> 00:01:58,560
as an sslv2 server that shares its rsa

46
00:01:58,560 --> 00:02:01,040
key with the tls server

47
00:02:01,040 --> 00:02:02,479
this is the drown

48
00:02:02,479 --> 00:02:05,040
attack scenario we've got a victim

49
00:02:05,040 --> 00:02:08,080
client that connects to a server using a

50
00:02:08,080 --> 00:02:11,200
modern tls connection we assume the

51
00:02:11,200 --> 00:02:14,879
victim client doesn't even support sslv2

52
00:02:14,879 --> 00:02:17,760
but in round the attacker observes the

53
00:02:17,760 --> 00:02:19,599
tls connection

54
00:02:19,599 --> 00:02:21,440
and then later

55
00:02:21,440 --> 00:02:24,879
sends malicious ssl v2 handshakes to the

56
00:02:24,879 --> 00:02:27,520
server and manages to squeeze out little

57
00:02:27,520 --> 00:02:30,400
bits of information out of this server

58
00:02:30,400 --> 00:02:33,040
and then combines these little bits of

59
00:02:33,040 --> 00:02:35,920
information in order to decrypt the tls

60
00:02:35,920 --> 00:02:37,040
connection

61
00:02:37,040 --> 00:02:40,239
so again run is about breaking tls

62
00:02:40,239 --> 00:02:44,080
using sslv2 as a tool

63
00:02:46,160 --> 00:02:47,760
so as i've said

64
00:02:47,760 --> 00:02:50,080
what this allows an attacker to do is to

65
00:02:50,080 --> 00:02:52,560
decrypt tls traffic

66
00:02:52,560 --> 00:02:54,239
it's obviously a cross protocol attack

67
00:02:54,239 --> 00:02:55,280
where we

68
00:02:55,280 --> 00:02:57,120
attack a tls

69
00:02:57,120 --> 00:03:00,959
implementation using an ssl v2 server

70
00:03:00,959 --> 00:03:02,400
those two servers

71
00:03:02,400 --> 00:03:04,159
may be the same machine or maybe even

72
00:03:04,159 --> 00:03:05,519
the same process

73
00:03:05,519 --> 00:03:08,000
uh the same server that supports both

74
00:03:08,000 --> 00:03:10,239
tls and sslv2

75
00:03:10,239 --> 00:03:13,519
but these might be two separate servers

76
00:03:13,519 --> 00:03:16,879
that happen to share the same rsa key

77
00:03:16,879 --> 00:03:20,080
and when you've got an sslv2 server that

78
00:03:20,080 --> 00:03:22,879
shares this rsa key with the tls server

79
00:03:22,879 --> 00:03:26,799
the tls server is just as vulnerable

80
00:03:26,799 --> 00:03:28,879
and this

81
00:03:28,879 --> 00:03:31,360
happens this is quite common when a

82
00:03:31,360 --> 00:03:33,840
company might have a well-configured

83
00:03:33,840 --> 00:03:37,120
https server that they care about a

84
00:03:37,120 --> 00:03:39,680
whole lot because https security is

85
00:03:39,680 --> 00:03:40,879
important

86
00:03:40,879 --> 00:03:43,360
but that same company might also have

87
00:03:43,360 --> 00:03:45,120
another an old

88
00:03:45,120 --> 00:03:48,080
i'm sorry an old email server lying

89
00:03:48,080 --> 00:03:50,319
around that they don't care about

90
00:03:50,319 --> 00:03:52,799
terribly because security for email is

91
00:03:52,799 --> 00:03:54,400
broken and they might not even realize

92
00:03:54,400 --> 00:03:55,840
the server is still running in some

93
00:03:55,840 --> 00:03:57,360
cases

94
00:03:57,360 --> 00:03:58,560
and then

95
00:03:58,560 --> 00:04:01,120
the email server can be used as a tool

96
00:04:01,120 --> 00:04:03,439
in order to decrypt connections to the

97
00:04:03,439 --> 00:04:06,560
tls https server

98
00:04:06,560 --> 00:04:08,400
and this this scenario is quite common

99
00:04:08,400 --> 00:04:11,599
as we'll see shortly

100
00:04:11,599 --> 00:04:13,120
when we take these scenarios into

101
00:04:13,120 --> 00:04:15,280
account 22 percent

102
00:04:15,280 --> 00:04:18,320
of trusted http hosts are vulnerable to

103
00:04:18,320 --> 00:04:19,440
ground

104
00:04:19,440 --> 00:04:21,680
so i hope with this couple of slides uh

105
00:04:21,680 --> 00:04:23,759
we've managed to convince you that this

106
00:04:23,759 --> 00:04:25,840
isn't niche this is a high profile

107
00:04:25,840 --> 00:04:29,040
attack and it's novel

108
00:04:29,040 --> 00:04:30,560
now let's give a little bit of

109
00:04:30,560 --> 00:04:33,919
background on tls

110
00:04:33,919 --> 00:04:34,639
so

111
00:04:34,639 --> 00:04:36,320
until as the client initiates the

112
00:04:36,320 --> 00:04:37,919
connection by sending a client hello

113
00:04:37,919 --> 00:04:40,080
message to the server and the server

114
00:04:40,080 --> 00:04:42,560
replies with a server hello message that

115
00:04:42,560 --> 00:04:45,199
contains the server's rsa key in a

116
00:04:45,199 --> 00:04:46,479
certificate

117
00:04:46,479 --> 00:04:48,160
in the context of ground we assume the

118
00:04:48,160 --> 00:04:50,479
certificate is a-ok no one is attacking

119
00:04:50,479 --> 00:04:53,359
the certificate

120
00:04:54,160 --> 00:04:56,720
now the client the client generates a

121
00:04:56,720 --> 00:04:59,360
value called the premaster secret which

122
00:04:59,360 --> 00:05:01,840
i kind of think of as the symmetric key

123
00:05:01,840 --> 00:05:04,320
or the basis for a symmetric key

124
00:05:04,320 --> 00:05:07,120
it encrypts this value to the server's

125
00:05:07,120 --> 00:05:10,240
public rsa key and sends the rsa cipher

126
00:05:10,240 --> 00:05:12,880
text to the server

127
00:05:12,880 --> 00:05:15,520
the server can then decrypt the rsa

128
00:05:15,520 --> 00:05:17,919
ciphertext because it has the

129
00:05:17,919 --> 00:05:19,360
private key

130
00:05:19,360 --> 00:05:20,400
and now

131
00:05:20,400 --> 00:05:22,560
in theory the client and server should

132
00:05:22,560 --> 00:05:24,800
be the only two entities in the world

133
00:05:24,800 --> 00:05:26,800
that know this secret value the

134
00:05:26,800 --> 00:05:28,479
premaster secret

135
00:05:28,479 --> 00:05:31,039
so they can then exchange messages

136
00:05:31,039 --> 00:05:33,520
encrypted using this value as a key and

137
00:05:33,520 --> 00:05:34,960
this is what they do

138
00:05:34,960 --> 00:05:36,800
the client builds a semi-constant

139
00:05:36,800 --> 00:05:39,120
message called the client finished

140
00:05:39,120 --> 00:05:41,280
encrypts it using the premaster secret

141
00:05:41,280 --> 00:05:44,000
and sends it encrypted to the server

142
00:05:44,000 --> 00:05:45,600
the server should be able to correctly

143
00:05:45,600 --> 00:05:47,520
decrypt it to the quick correctly

144
00:05:47,520 --> 00:05:49,039
decrypt it

145
00:05:49,039 --> 00:05:50,960
assuming that's the case the server will

146
00:05:50,960 --> 00:05:53,520
return the favor and now the client and

147
00:05:53,520 --> 00:05:55,360
server

148
00:05:55,360 --> 00:05:57,280
are reasonably confident that they are

149
00:05:57,280 --> 00:05:59,520
the only two entities in the world

150
00:05:59,520 --> 00:06:01,759
that know the value of this pre-master

151
00:06:01,759 --> 00:06:03,280
secret

152
00:06:03,280 --> 00:06:04,560
please note

153
00:06:04,560 --> 00:06:07,680
that if for some reason a third party is

154
00:06:07,680 --> 00:06:10,160
able to learn the value of the premaster

155
00:06:10,160 --> 00:06:11,199
secret

156
00:06:11,199 --> 00:06:13,840
that third party can decrypt the

157
00:06:13,840 --> 00:06:16,240
encrypted traffic between the client and

158
00:06:16,240 --> 00:06:17,520
server

159
00:06:17,520 --> 00:06:20,639
so it's crucial to observe that tls

160
00:06:20,639 --> 00:06:22,400
security at least in this mode is

161
00:06:22,400 --> 00:06:25,039
dependent on rsa security

162
00:06:25,039 --> 00:06:28,000
if an attacker can decrypt rsa they can

163
00:06:28,000 --> 00:06:31,680
decrypt tls traffic

164
00:06:32,479 --> 00:06:35,039
now let's move on to focus on the rsa

165
00:06:35,039 --> 00:06:37,039
ciphertext here

166
00:06:37,039 --> 00:06:37,759
so

167
00:06:37,759 --> 00:06:39,840
when they taught me rsa in undergrad

168
00:06:39,840 --> 00:06:41,520
they told me if you want to encrypt the

169
00:06:41,520 --> 00:06:44,160
value k you compute k to the power of a

170
00:06:44,160 --> 00:06:47,440
modulo n where n is the public module

171
00:06:47,440 --> 00:06:50,720
that's not how rsa works in practice in

172
00:06:50,720 --> 00:06:53,280
particular there's a problem here where

173
00:06:53,280 --> 00:06:55,520
ciphertext are deterministic if you want

174
00:06:55,520 --> 00:06:57,199
to encrypt the same value twice you get

175
00:06:57,199 --> 00:07:00,479
the same ciphertext twice

176
00:07:00,479 --> 00:07:03,840
so in real life uh this is solved by a

177
00:07:03,840 --> 00:07:07,680
standard called pkcs1 version 1.5

178
00:07:07,680 --> 00:07:10,639
where we pair the data with randomized

179
00:07:10,639 --> 00:07:14,240
padding to the length of the modulo

180
00:07:14,240 --> 00:07:16,880
this is the standard

181
00:07:16,880 --> 00:07:19,199
we start with the most significant

182
00:07:19,199 --> 00:07:21,360
uh byte of value zero

183
00:07:21,360 --> 00:07:24,240
then a byte of a value two then non-zero

184
00:07:24,240 --> 00:07:26,240
padding bytes as long as are needed to

185
00:07:26,240 --> 00:07:29,280
make the overall length what we want

186
00:07:29,280 --> 00:07:31,360
then a zero delimiter byte and then the

187
00:07:31,360 --> 00:07:33,680
actual data we want to send the pms in

188
00:07:33,680 --> 00:07:36,639
the case of tls

189
00:07:36,639 --> 00:07:37,680
but

190
00:07:37,680 --> 00:07:39,759
the moment we have padding under

191
00:07:39,759 --> 00:07:40,880
encryption

192
00:07:40,880 --> 00:07:42,720
the question arises

193
00:07:42,720 --> 00:07:45,280
what should the decrypting party do if

194
00:07:45,280 --> 00:07:47,440
they decrypt the message and see that

195
00:07:47,440 --> 00:07:49,280
the padding is invalid

196
00:07:49,280 --> 00:07:52,240
like a tls server can decrypt the rsa

197
00:07:52,240 --> 00:07:53,759
cipher text and see that the plaintext

198
00:07:53,759 --> 00:07:55,520
doesn't start with bytes

199
00:07:55,520 --> 00:07:56,840
0 and 2 for

200
00:07:56,840 --> 00:07:58,400
example

201
00:07:58,400 --> 00:08:01,120
so what should the tls server do in such

202
00:08:01,120 --> 00:08:03,120
a case

203
00:08:03,120 --> 00:08:05,599
and the straightforward answer that most

204
00:08:05,599 --> 00:08:07,360
people will give you

205
00:08:07,360 --> 00:08:09,120
is that you should send back an error

206
00:08:09,120 --> 00:08:11,039
message right the server should alert

207
00:08:11,039 --> 00:08:12,479
the client tell the client you know i

208
00:08:12,479 --> 00:08:14,720
decrypted your rsa ciphertext the

209
00:08:14,720 --> 00:08:16,560
padding looks invalid to me why don't we

210
00:08:16,560 --> 00:08:19,280
about the connection or retry

211
00:08:19,280 --> 00:08:22,240
but this is actually a vulnerability

212
00:08:22,240 --> 00:08:23,120
because

213
00:08:23,120 --> 00:08:26,160
if an attacker has an rsa cipher text

214
00:08:26,160 --> 00:08:28,319
which might be valid or invalid and they

215
00:08:28,319 --> 00:08:30,639
know that they want to know which

216
00:08:30,639 --> 00:08:33,360
they can connect to such a server send

217
00:08:33,360 --> 00:08:35,839
that rsa cipher text

218
00:08:35,839 --> 00:08:37,519
and see whether they get back an error

219
00:08:37,519 --> 00:08:39,120
message or not and then learn whether

220
00:08:39,120 --> 00:08:41,919
the cipher text was valid or not

221
00:08:41,919 --> 00:08:44,320
and bleichenbacher's attack

222
00:08:44,320 --> 00:08:45,920
from 98

223
00:08:45,920 --> 00:08:48,160
identified this vulnerability

224
00:08:48,160 --> 00:08:50,720
and then showed an algorithm that given

225
00:08:50,720 --> 00:08:52,560
a ciphertext the attacker wants to

226
00:08:52,560 --> 00:08:53,600
decrypt

227
00:08:53,600 --> 00:08:56,160
shows how the attacker can send can send

228
00:08:56,160 --> 00:08:58,560
little clever modifications of this

229
00:08:58,560 --> 00:09:00,640
intercepted ciphertext for each

230
00:09:00,640 --> 00:09:02,959
modification sent learn whether it's

231
00:09:02,959 --> 00:09:05,680
valid or not from the server's response

232
00:09:05,680 --> 00:09:08,240
and then gradually combine these answers

233
00:09:08,240 --> 00:09:09,360
into

234
00:09:09,360 --> 00:09:11,839
decryption of the rsa ciphertext into

235
00:09:11,839 --> 00:09:14,000
the rsa plain text

236
00:09:14,000 --> 00:09:16,240
so the conclusion here is

237
00:09:16,240 --> 00:09:17,600
and if you tuned out for a couple of

238
00:09:17,600 --> 00:09:19,519
minutes this is a good time to get back

239
00:09:19,519 --> 00:09:20,399
to us

240
00:09:20,399 --> 00:09:22,480
the conclusion is that the server has to

241
00:09:22,480 --> 00:09:23,680
behave

242
00:09:23,680 --> 00:09:26,240
as if the padding is valid even if it's

243
00:09:26,240 --> 00:09:29,279
invalid the server has to hide

244
00:09:29,279 --> 00:09:33,040
whether the padding was valid or not

245
00:09:33,279 --> 00:09:35,120
how do we do this

246
00:09:35,120 --> 00:09:37,760
if the pa if the padding is valid great

247
00:09:37,760 --> 00:09:40,000
we continue along with the handshake

248
00:09:40,000 --> 00:09:42,480
if the padding is invalid the server

249
00:09:42,480 --> 00:09:45,200
will generate a random replacement

250
00:09:45,200 --> 00:09:47,200
unpaid rsa data

251
00:09:47,200 --> 00:09:49,279
forget anything out of the ordinary even

252
00:09:49,279 --> 00:09:51,920
happened and just continue along with

253
00:09:51,920 --> 00:09:54,399
the handshake as usual

254
00:09:54,399 --> 00:09:56,000
here in graphic form

255
00:09:56,000 --> 00:09:58,320
when uh the client sends an rsa

256
00:09:58,320 --> 00:10:00,000
ciphertext to the server

257
00:10:00,000 --> 00:10:01,839
if it's valid great

258
00:10:01,839 --> 00:10:04,720
the server will decrypt it and use the

259
00:10:04,720 --> 00:10:07,040
decrypted ciphertext the plain text as

260
00:10:07,040 --> 00:10:10,240
the key for upcoming symmetric messages

261
00:10:10,240 --> 00:10:12,640
but if it's invalid the server will

262
00:10:12,640 --> 00:10:14,959
generate this random replacement or

263
00:10:14,959 --> 00:10:16,079
decoy

264
00:10:16,079 --> 00:10:19,040
and use that as the key for upcoming

265
00:10:19,040 --> 00:10:22,079
symmetric messages

266
00:10:23,519 --> 00:10:25,760
now let's take a moment to discuss how

267
00:10:25,760 --> 00:10:28,240
this works in ssl v2

268
00:10:28,240 --> 00:10:30,560
this is the sslv2 handshake

269
00:10:30,560 --> 00:10:32,720
it starts pretty similar to tls the

270
00:10:32,720 --> 00:10:34,240
client send the client hello message and

271
00:10:34,240 --> 00:10:36,079
the server responds with a server hello

272
00:10:36,079 --> 00:10:37,519
message

273
00:10:37,519 --> 00:10:40,399
now the client generates a random value

274
00:10:40,399 --> 00:10:43,519
called the master key which is similar

275
00:10:43,519 --> 00:10:46,560
to the pre-master secret from tls ignore

276
00:10:46,560 --> 00:10:48,640
this value for a moment

277
00:10:48,640 --> 00:10:50,800
it the current then encrypts the master

278
00:10:50,800 --> 00:10:53,279
key to the server's public rsa key and

279
00:10:53,279 --> 00:10:56,160
sends the rsa cipher text to the server

280
00:10:56,160 --> 00:10:58,839
so far pretty similar to

281
00:10:58,839 --> 00:11:01,120
tls now things

282
00:11:01,120 --> 00:11:03,120
get a little different the server will

283
00:11:03,120 --> 00:11:07,040
immediately decrypt the rsa ciphertext

284
00:11:07,040 --> 00:11:08,959
again with the proviso that if the

285
00:11:08,959 --> 00:11:11,120
ciphertext is invalid the server will

286
00:11:11,120 --> 00:11:14,480
generate a random replacement

287
00:11:14,480 --> 00:11:15,519
and

288
00:11:15,519 --> 00:11:19,600
use the rsa plaintext as the key to

289
00:11:19,600 --> 00:11:21,600
encrypt a semi-constant message called

290
00:11:21,600 --> 00:11:24,320
the server verify

291
00:11:24,320 --> 00:11:25,200
so

292
00:11:25,200 --> 00:11:27,120
we look at this and kind of scratch our

293
00:11:27,120 --> 00:11:29,760
heads because if you think about it

294
00:11:29,760 --> 00:11:31,920
we've got this complex ceremony where

295
00:11:31,920 --> 00:11:34,480
the server tries immensely hard to hide

296
00:11:34,480 --> 00:11:37,200
whether the padding was valid or not

297
00:11:37,200 --> 00:11:39,440
but then the server takes the results of

298
00:11:39,440 --> 00:11:41,200
this ceremony

299
00:11:41,200 --> 00:11:43,920
and immediately sends something over the

300
00:11:43,920 --> 00:11:46,160
wire that is derived from this result

301
00:11:46,160 --> 00:11:48,640
right so the result of this ceremony is

302
00:11:48,640 --> 00:11:50,320
the key and we the server immediately

303
00:11:50,320 --> 00:11:54,480
sends something encrypted using this key

304
00:11:54,480 --> 00:11:56,880
so at this point uh things look a little

305
00:11:56,880 --> 00:11:58,560
bit suspicious to us

306
00:11:58,560 --> 00:12:01,600
and it gets even worse when we use

307
00:12:01,600 --> 00:12:04,560
export cryptography

308
00:12:04,560 --> 00:12:06,800
so let me explain a little bit about

309
00:12:06,800 --> 00:12:09,519
export grade cryptography so in the 90s

310
00:12:09,519 --> 00:12:11,839
the us government wanted the nsa to be

311
00:12:11,839 --> 00:12:14,720
able to spy on non-u.s citizens so they

312
00:12:14,720 --> 00:12:17,040
decided that anyone outside the us

313
00:12:17,040 --> 00:12:19,279
should use cryptography that is at most

314
00:12:19,279 --> 00:12:22,320
40 bits strong

315
00:12:22,480 --> 00:12:25,120
and if you have a symmetric cipher that

316
00:12:25,120 --> 00:12:27,279
is 128

317
00:12:27,279 --> 00:12:29,600
bit strong you can reduce it to an

318
00:12:29,600 --> 00:12:32,240
effective strength of 40 bits

319
00:12:32,240 --> 00:12:33,120
by

320
00:12:33,120 --> 00:12:35,600
taking the first 40 bits sending them

321
00:12:35,600 --> 00:12:36,959
encrypted

322
00:12:36,959 --> 00:12:40,000
inside an rsa cipher text

323
00:12:40,000 --> 00:12:42,639
and taking the other 88 bits and just

324
00:12:42,639 --> 00:12:45,120
sending them in the clearer

325
00:12:45,120 --> 00:12:47,360
now the server can decrypt the rsa

326
00:12:47,360 --> 00:12:48,639
cipher text

327
00:12:48,639 --> 00:12:51,279
learn the value of the secret 40 bits

328
00:12:51,279 --> 00:12:53,440
concatenate them with the

329
00:12:53,440 --> 00:12:56,720
88 bits sent in the clear and now get a

330
00:12:56,720 --> 00:13:00,000
key of 128 bits

331
00:13:00,000 --> 00:13:02,959
and the server can now see the cipher

332
00:13:02,959 --> 00:13:04,240
with this key

333
00:13:04,240 --> 00:13:06,639
and get an effective key strength of

334
00:13:06,639 --> 00:13:09,120
only 40 bits so the nsa can happily

335
00:13:09,120 --> 00:13:12,240
decrypt that traffic

336
00:13:12,320 --> 00:13:13,120
so

337
00:13:13,120 --> 00:13:14,000
this is

338
00:13:14,000 --> 00:13:18,000
the the other 88 bits sent in the

339
00:13:18,839 --> 00:13:22,880
clear so contrast this with tls where

340
00:13:22,880 --> 00:13:27,120
even if export cryptography is involved

341
00:13:27,120 --> 00:13:30,800
the unpaid rsa data is always 48 bytes

342
00:13:30,800 --> 00:13:33,120
long

343
00:13:33,279 --> 00:13:34,399
so it's a pretty

344
00:13:34,399 --> 00:13:37,680
significant difference in length

345
00:13:37,680 --> 00:13:38,560
now

346
00:13:38,560 --> 00:13:40,800
let's take a moment to make a little

347
00:13:40,800 --> 00:13:43,120
observation

348
00:13:43,120 --> 00:13:45,519
what happens when the attacker

349
00:13:45,519 --> 00:13:47,600
connects twice to a server and sends the

350
00:13:47,600 --> 00:13:51,199
same ciphertext on both connections

351
00:13:51,199 --> 00:13:53,440
well if it's the same ciphertext it's

352
00:13:53,440 --> 00:13:55,760
either valid or invalid for both

353
00:13:55,760 --> 00:13:57,920
connections right

354
00:13:57,920 --> 00:14:00,079
if the ciphertext is valid

355
00:14:00,079 --> 00:14:02,240
the server will twice

356
00:14:02,240 --> 00:14:03,920
take this branch of the if clause and

357
00:14:03,920 --> 00:14:05,040
use the

358
00:14:05,040 --> 00:14:07,360
unpaid rsa data as the key for the

359
00:14:07,360 --> 00:14:09,760
upcoming server verify message

360
00:14:09,760 --> 00:14:11,760
so the server will reply with two

361
00:14:11,760 --> 00:14:14,079
messages that are encrypted using the

362
00:14:14,079 --> 00:14:16,560
same key

363
00:14:16,560 --> 00:14:19,680
but if the cipher text is invalid

364
00:14:19,680 --> 00:14:21,839
the server will twice take

365
00:14:21,839 --> 00:14:23,839
will take this branch of the if for both

366
00:14:23,839 --> 00:14:26,240
connections the server will twice

367
00:14:26,240 --> 00:14:28,959
generate random replacement which will

368
00:14:28,959 --> 00:14:30,240
which will likely be different because

369
00:14:30,240 --> 00:14:31,839
they're random

370
00:14:31,839 --> 00:14:34,800
and will send back two replies that are

371
00:14:34,800 --> 00:14:38,880
encrypted using different keys

372
00:14:39,440 --> 00:14:41,279
to recap

373
00:14:41,279 --> 00:14:43,680
if an attacker sends the same rsa cipher

374
00:14:43,680 --> 00:14:46,000
text on two connections

375
00:14:46,000 --> 00:14:47,839
if the rsa

376
00:14:47,839 --> 00:14:51,519
cipher text is valid

377
00:14:51,519 --> 00:14:54,240
the server will reply with two messages

378
00:14:54,240 --> 00:14:56,399
encrypted using the same key

379
00:14:56,399 --> 00:14:58,720
and if it's invalid the two server

380
00:14:58,720 --> 00:15:00,800
replies will be encrypted using

381
00:15:00,800 --> 00:15:03,599
different keys

382
00:15:03,920 --> 00:15:06,160
now the attacker can break

383
00:15:06,160 --> 00:15:09,120
the 40-bit keys for both replies and

384
00:15:09,120 --> 00:15:10,800
compare them

385
00:15:10,800 --> 00:15:12,959
if the ciphertext is valid

386
00:15:12,959 --> 00:15:15,120
the keys will be the same

387
00:15:15,120 --> 00:15:18,320
if the ciphertext is invalid

388
00:15:18,320 --> 00:15:21,600
the keys will be different

389
00:15:21,600 --> 00:15:22,639
so

390
00:15:22,639 --> 00:15:24,720
after all of this

391
00:15:24,720 --> 00:15:27,199
trouble this complex attack or the

392
00:15:27,199 --> 00:15:30,160
attacker takes ciphertext

393
00:15:30,160 --> 00:15:33,600
connects with it twice and

394
00:15:33,600 --> 00:15:35,920
com breaks keys for both replies and

395
00:15:35,920 --> 00:15:37,920
compare them the attacker managed to

396
00:15:37,920 --> 00:15:40,000
squeeze out this one little bit of

397
00:15:40,000 --> 00:15:42,320
information of whether a given cipher

398
00:15:42,320 --> 00:15:46,240
text is valid or invalid

399
00:15:46,240 --> 00:15:48,880
but we know from blackenbacher's attack

400
00:15:48,880 --> 00:15:51,279
that an attacker that can do this

401
00:15:51,279 --> 00:15:53,920
can decrypt rsa and can therefore

402
00:15:53,920 --> 00:15:56,720
decrypt tls so this one silly bit of

403
00:15:56,720 --> 00:15:58,959
information of whether a ciphertext is

404
00:15:58,959 --> 00:16:00,240
valid or not

405
00:16:00,240 --> 00:16:04,160
breaks security for tls

406
00:16:05,680 --> 00:16:07,839
so let's come back to the drone attack

407
00:16:07,839 --> 00:16:10,320
outline

408
00:16:11,519 --> 00:16:13,920
as we've said the attacker observes tls

409
00:16:13,920 --> 00:16:17,360
connections it records roughly 1000 of

410
00:16:17,360 --> 00:16:19,759
those and can hope to decrypt roughly

411
00:16:19,759 --> 00:16:23,199
one out of these thousands

412
00:16:23,199 --> 00:16:26,160
now the attacker will try to move a tls

413
00:16:26,160 --> 00:16:27,759
rsa handshake

414
00:16:27,759 --> 00:16:32,240
a tls rsa cipher text in into an sslv21

415
00:16:32,240 --> 00:16:33,839
remember those are slightly different

416
00:16:33,839 --> 00:16:35,839
because the lengths are slightly

417
00:16:35,839 --> 00:16:38,000
different

418
00:16:38,000 --> 00:16:39,600
and it will use the

419
00:16:39,600 --> 00:16:41,680
ssl bleichenbach that we've just

420
00:16:41,680 --> 00:16:45,120
described in order to identify when the

421
00:16:45,120 --> 00:16:47,440
attacker manages to generate

422
00:16:47,440 --> 00:16:51,800
a valid sslv2 ciphertext

423
00:16:52,800 --> 00:16:55,680
we emphasize the client never makes an

424
00:16:55,680 --> 00:16:58,959
sslv2 connection and we most modern

425
00:16:58,959 --> 00:16:59,920
clients

426
00:16:59,920 --> 00:17:02,240
don't modern clients don't even support

427
00:17:02,240 --> 00:17:04,880
sslv2 and this is what we assume we only

428
00:17:04,880 --> 00:17:08,400
attack tls connections

429
00:17:09,760 --> 00:17:10,640
now

430
00:17:10,640 --> 00:17:13,039
we've said that for each ciphertext the

431
00:17:13,039 --> 00:17:14,959
attacker wants to test

432
00:17:14,959 --> 00:17:17,520
it has to send the ciphertext twice and

433
00:17:17,520 --> 00:17:19,359
break 40-bit keys

434
00:17:19,359 --> 00:17:22,079
break the 40-bit key for each reply

435
00:17:22,079 --> 00:17:24,319
so if the attacker

436
00:17:24,319 --> 00:17:27,679
tests roughly 10 000 ciphertext over the

437
00:17:27,679 --> 00:17:29,200
attack

438
00:17:29,200 --> 00:17:31,280
so it's 10 000 times

439
00:17:31,280 --> 00:17:32,720
40 it's

440
00:17:32,720 --> 00:17:35,280
it sounds like 2 to the 53 key is tested

441
00:17:35,280 --> 00:17:36,400
overall

442
00:17:36,400 --> 00:17:38,240
we can actually get this number down to

443
00:17:38,240 --> 00:17:40,240
2 to the 50 with a small optimization i

444
00:17:40,240 --> 00:17:42,799
won't describe here

445
00:17:42,799 --> 00:17:45,120
so now we have 2 to the key 2 to the 50

446
00:17:45,120 --> 00:17:47,679
keys we needed to test overall and this

447
00:17:47,679 --> 00:17:50,320
sounds like an awful lot right it sounds

448
00:17:50,320 --> 00:17:52,000
maybe

449
00:17:52,000 --> 00:17:54,320
feasible only for the nsa

450
00:17:54,320 --> 00:17:56,640
maybe invisible for a small academic

451
00:17:56,640 --> 00:17:58,480
team

452
00:17:58,480 --> 00:17:59,360
but

453
00:17:59,360 --> 00:18:01,919
a wise man once said attacks only get

454
00:18:01,919 --> 00:18:05,039
better and hardware also only gets

455
00:18:05,039 --> 00:18:06,240
better

456
00:18:06,240 --> 00:18:08,720
so this number might have been large

457
00:18:08,720 --> 00:18:12,080
once but now it's perfectly doable

458
00:18:12,080 --> 00:18:14,480
just writing an fcpu implementation

459
00:18:14,480 --> 00:18:16,480
brings the runtime down

460
00:18:16,480 --> 00:18:21,200
to 114 days with an investment of 21 000

461
00:18:21,200 --> 00:18:23,840
and then we wrote a highly optimized gpu

462
00:18:23,840 --> 00:18:26,559
implementation that brings the rundown

463
00:18:26,559 --> 00:18:29,520
the runtime down to hours it's either 18

464
00:18:29,520 --> 00:18:33,039
hours with an investment of 18 000 or 8

465
00:18:33,039 --> 00:18:36,000
hours if we rent the gpus from amazon

466
00:18:36,000 --> 00:18:38,000
for 440

467
00:18:38,000 --> 00:18:40,000
so i hope everyone will agree this is

468
00:18:40,000 --> 00:18:42,799
pretty doable even for modest hacking

469
00:18:42,799 --> 00:18:45,120
groups

470
00:18:45,520 --> 00:18:48,559
we also have a variant of ground called

471
00:18:48,559 --> 00:18:50,240
special round

472
00:18:50,240 --> 00:18:51,679
where

473
00:18:51,679 --> 00:18:53,760
this variant doesn't require any large

474
00:18:53,760 --> 00:18:57,120
computations so you can do it for free

475
00:18:57,120 --> 00:19:00,799
you can read about it more in the paper

476
00:19:01,600 --> 00:19:04,559
for this variant uh 22

477
00:19:04,559 --> 00:19:07,360
of trusted http servers are vulnerable

478
00:19:07,360 --> 00:19:09,520
it's pretty similar in scope

479
00:19:09,520 --> 00:19:12,799
to general drone

480
00:19:14,960 --> 00:19:15,840
okay

481
00:19:15,840 --> 00:19:19,520
let's come back to this scenario well

482
00:19:19,520 --> 00:19:22,000
we've got a well-configured https server

483
00:19:22,000 --> 00:19:25,280
that only supports tls but this that

484
00:19:25,280 --> 00:19:27,360
same company

485
00:19:27,360 --> 00:19:30,400
will might have an old email server that

486
00:19:30,400 --> 00:19:32,559
they don't terribly care about that

487
00:19:32,559 --> 00:19:35,200
supports ssl v2

488
00:19:35,200 --> 00:19:36,320
and

489
00:19:36,320 --> 00:19:38,000
and those two servers will share the

490
00:19:38,000 --> 00:19:40,160
same rsa key

491
00:19:40,160 --> 00:19:43,280
now this happens for a couple of reasons

492
00:19:43,280 --> 00:19:44,400
first of all

493
00:19:44,400 --> 00:19:46,559
there's no protocol version in

494
00:19:46,559 --> 00:19:47,919
certificates

495
00:19:47,919 --> 00:19:51,120
so if for some reasons uh you got mad

496
00:19:51,120 --> 00:19:52,480
and decided that you want to support

497
00:19:52,480 --> 00:19:55,039
sslv2 you don't but suppose you you do

498
00:19:55,039 --> 00:19:58,640
want to support sslv2 you can separate

499
00:19:58,640 --> 00:20:01,039
this from your tls configuration you

500
00:20:01,039 --> 00:20:03,520
can't deploy sslv2 without it affecting

501
00:20:03,520 --> 00:20:06,480
your tls configuration

502
00:20:06,480 --> 00:20:07,679
also

503
00:20:07,679 --> 00:20:10,240
certificates cost money so even if you

504
00:20:10,240 --> 00:20:12,559
have two separate domains

505
00:20:12,559 --> 00:20:14,880
and two separate certificates this costs

506
00:20:14,880 --> 00:20:17,280
money and especially so for extended

507
00:20:17,280 --> 00:20:19,360
validation certificates

508
00:20:19,360 --> 00:20:21,360
also multiple certificates are quite an

509
00:20:21,360 --> 00:20:23,520
operational hassle to deal with

510
00:20:23,520 --> 00:20:24,960
so there are

511
00:20:24,960 --> 00:20:26,000
actually

512
00:20:26,000 --> 00:20:28,159
a few good reasons for this these types

513
00:20:28,159 --> 00:20:32,240
of scenario it's not just negligence

514
00:20:32,559 --> 00:20:34,400
now let's see how this works out in

515
00:20:34,400 --> 00:20:35,520
practice

516
00:20:35,520 --> 00:20:37,200
so

517
00:20:37,200 --> 00:20:40,799
first of all for https 17

518
00:20:40,799 --> 00:20:44,480
of https supports ssl v2

519
00:20:44,480 --> 00:20:46,320
so this is pretty bad

520
00:20:46,320 --> 00:20:47,440
already

521
00:20:47,440 --> 00:20:48,960
but this number all

522
00:20:48,960 --> 00:20:51,679
almost doubles to 33

523
00:20:51,679 --> 00:20:53,679
because when we look at the email ports

524
00:20:53,679 --> 00:20:56,240
sntp for example you see that ssl v2

525
00:20:56,240 --> 00:20:59,120
support is at 28

526
00:20:59,120 --> 00:21:02,240
so this explains how we got from 17 to

527
00:21:02,240 --> 00:21:03,679
33

528
00:21:03,679 --> 00:21:05,520
and the picture is pretty similar when

529
00:21:05,520 --> 00:21:08,000
we only consider trusted certificate

530
00:21:08,000 --> 00:21:10,799
it rises from 10 to 22

531
00:21:10,799 --> 00:21:13,600
again because of the widespread sslv2

532
00:21:13,600 --> 00:21:17,439
support for email posts

533
00:21:18,080 --> 00:21:18,960
now

534
00:21:18,960 --> 00:21:20,400
what can we learn

535
00:21:20,400 --> 00:21:21,520
from

536
00:21:21,520 --> 00:21:23,600
this little attack

537
00:21:23,600 --> 00:21:25,919
so the first takeaway for me

538
00:21:25,919 --> 00:21:26,880
is that

539
00:21:26,880 --> 00:21:29,360
expert great cryptography has always

540
00:21:29,360 --> 00:21:31,840
come back to haunt us so there were

541
00:21:31,840 --> 00:21:34,960
three kinds of export of cryptographic

542
00:21:34,960 --> 00:21:36,799
primitives that the us government

543
00:21:36,799 --> 00:21:38,960
decided to deliberately weaken in the

544
00:21:38,960 --> 00:21:40,000
90s

545
00:21:40,000 --> 00:21:42,400
excellent grade rsa which was the basis

546
00:21:42,400 --> 00:21:44,880
for the freak attack export grade

547
00:21:44,880 --> 00:21:46,720
diffie-hellman which was the basis for

548
00:21:46,720 --> 00:21:49,200
the log jam attack and now export great

549
00:21:49,200 --> 00:21:50,559
symmetric encryption which is the

550
00:21:50,559 --> 00:21:53,280
cornerstone for drown

551
00:21:53,280 --> 00:21:54,720
so this is

552
00:21:54,720 --> 00:21:57,360
literally failed in all three cases it

553
00:21:57,360 --> 00:21:59,520
has been tried

554
00:21:59,520 --> 00:22:00,320
but

555
00:22:00,320 --> 00:22:01,679
curiously

556
00:22:01,679 --> 00:22:04,080
we still have the us government and also

557
00:22:04,080 --> 00:22:06,480
other governments pushing for

558
00:22:06,480 --> 00:22:09,280
more such weekend encryption

559
00:22:09,280 --> 00:22:10,960
i don't know why they're still pushing

560
00:22:10,960 --> 00:22:12,720
for this i think the technical lesson

561
00:22:12,720 --> 00:22:16,480
here is clear this has literally always

562
00:22:16,480 --> 00:22:19,200
ended up helping everyone's security 20

563
00:22:19,200 --> 00:22:21,919
years later

564
00:22:22,400 --> 00:22:24,559
another takeaway i think is that

565
00:22:24,559 --> 00:22:26,400
removing obsolete cryptography

566
00:22:26,400 --> 00:22:28,960
should become a priority for everyone

567
00:22:28,960 --> 00:22:29,760
and

568
00:22:29,760 --> 00:22:31,200
when you look at the

569
00:22:31,200 --> 00:22:33,440
stream of attacks against tls during the

570
00:22:33,440 --> 00:22:35,280
last few years

571
00:22:35,280 --> 00:22:38,400
you can pretty much trace most attacks

572
00:22:38,400 --> 00:22:40,880
to an old cryptographic primitive that

573
00:22:40,880 --> 00:22:43,280
was still being used even though

574
00:22:43,280 --> 00:22:44,880
everyone knew it had

575
00:22:44,880 --> 00:22:47,200
serious vulnerabilities

576
00:22:47,200 --> 00:22:49,600
for example uh with the puddle attack

577
00:22:49,600 --> 00:22:53,200
tried targeting ssrv3 the fake ca

578
00:22:53,200 --> 00:22:56,400
in 2008 the targeted md5

579
00:22:56,400 --> 00:22:59,120
the multiple rc4 attacks where everyone

580
00:22:59,120 --> 00:23:01,280
knew lc4 had major problems

581
00:23:01,280 --> 00:23:03,600
freaking logjam which we've talked about

582
00:23:03,600 --> 00:23:06,240
lucky 13 the targets mac and encrypt

583
00:23:06,240 --> 00:23:08,640
sloth with md5 and chawan et cetera et

584
00:23:08,640 --> 00:23:10,559
cetera

585
00:23:10,559 --> 00:23:12,640
and i just have to wonder

586
00:23:12,640 --> 00:23:14,799
whether drown will be the last such

587
00:23:14,799 --> 00:23:17,120
attack that takes an old cryptographic

588
00:23:17,120 --> 00:23:18,240
primitive

589
00:23:18,240 --> 00:23:20,400
deployed and uses it as a tool to break

590
00:23:20,400 --> 00:23:21,679
security

591
00:23:21,679 --> 00:23:24,400
i hope it will be the last such attack

592
00:23:24,400 --> 00:23:26,000
i'm not so sure

593
00:23:26,000 --> 00:23:28,240
at the very least we still have macbeth

594
00:23:28,240 --> 00:23:30,559
and crypt and chawan lying around

595
00:23:30,559 --> 00:23:33,200
waiting to be exploited so maybe some of

596
00:23:33,200 --> 00:23:35,440
you will get to write cool attack papers

597
00:23:35,440 --> 00:23:37,600
on them

598
00:23:37,600 --> 00:23:40,360
that's it that's my talk thanks

599
00:23:40,360 --> 00:23:48,880
[Applause]

600
00:23:48,880 --> 00:23:50,880
hey thanks for your talk uh one point

601
00:23:50,880 --> 00:23:52,480
you said you had to

602
00:23:52,480 --> 00:23:53,360
uh

603
00:23:53,360 --> 00:23:54,799
morph the

604
00:23:54,799 --> 00:23:57,360
the one site the ssl

605
00:23:57,360 --> 00:23:59,919
sorry the tls cipher text into an sslv2

606
00:23:59,919 --> 00:24:01,760
ciphertext can you see more about that

607
00:24:01,760 --> 00:24:04,640
like how does how's that done how do we

608
00:24:04,640 --> 00:24:06,960
do this

609
00:24:09,679 --> 00:24:11,440
basically this uses the standard

610
00:24:11,440 --> 00:24:14,720
bleichenbach technique of rsa mobility

611
00:24:14,720 --> 00:24:16,559
where you can multiply under the

612
00:24:16,559 --> 00:24:20,399
encryption by any number you want

613
00:24:20,559 --> 00:24:23,600
this uses a technique by uh badou and

614
00:24:23,600 --> 00:24:27,039
his colleagues where you multiply by

615
00:24:27,039 --> 00:24:28,559
some cleverly

616
00:24:28,559 --> 00:24:30,559
crafted number which is essentially a

617
00:24:30,559 --> 00:24:33,679
fraction in this group

618
00:24:33,679 --> 00:24:36,080
and this preserves the first two bytes

619
00:24:36,080 --> 00:24:38,559
with high probability uh i i don't have

620
00:24:38,559 --> 00:24:40,240
a slide for this here i'm sorry you can

621
00:24:40,240 --> 00:24:44,000
read about it in the paper okay thanks

622
00:24:45,279 --> 00:24:47,919
okay i have also one question um so you

623
00:24:47,919 --> 00:24:50,480
also did a large scale notification

624
00:24:50,480 --> 00:24:52,320
and do you know how many systems are

625
00:24:52,320 --> 00:24:54,320
still vulnerable so are we still at this

626
00:24:54,320 --> 00:24:57,279
33 percent or how much have we improved

627
00:24:57,279 --> 00:24:58,640
since

628
00:24:58,640 --> 00:25:01,520
yeah in the last few months

629
00:25:01,520 --> 00:25:04,000
uh no i don't have the number uh by

630
00:25:04,000 --> 00:25:04,960
heart

631
00:25:04,960 --> 00:25:07,679
we have an updated number for one month

632
00:25:07,679 --> 00:25:10,000
after on the drug attack website

633
00:25:10,000 --> 00:25:13,880
i don't know it by heart sorry

634
00:25:14,000 --> 00:25:16,159
i i believe it's around 15

635
00:25:16,159 --> 00:25:18,640
off the top of my head

636
00:25:18,640 --> 00:25:20,480
okay so if there are no more questions

637
00:25:20,480 --> 00:25:23,210
then let's thank the speaker

638
00:25:23,210 --> 00:25:29,539
[Applause]

