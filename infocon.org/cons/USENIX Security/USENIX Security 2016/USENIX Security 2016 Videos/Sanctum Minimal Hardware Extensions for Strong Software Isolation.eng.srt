1
00:00:10,880 --> 00:00:12,719
my name is victor custon i'm here to

2
00:00:12,719 --> 00:00:15,200
talk about sanctum and this work was

3
00:00:15,200 --> 00:00:17,279
done at mit's computer science and ai

4
00:00:17,279 --> 00:00:19,359
lab together with ilia lebedev who's in

5
00:00:19,359 --> 00:00:21,920
the room and professor srini devadas who

6
00:00:21,920 --> 00:00:24,480
is not here today

7
00:00:24,480 --> 00:00:26,960
so sanctum's goal is trusted computing

8
00:00:26,960 --> 00:00:28,800
in this respect our work belongs to the

9
00:00:28,800 --> 00:00:32,719
same family as tpm txt sgx and trustzone

10
00:00:32,719 --> 00:00:35,120
however sanctum gives you unprecedented

11
00:00:35,120 --> 00:00:37,120
protection and unprecedented control

12
00:00:37,120 --> 00:00:39,440
over your own computer

13
00:00:39,440 --> 00:00:41,440
most of sanctum security logic is in

14
00:00:41,440 --> 00:00:43,840
software so this isn't firmware it's not

15
00:00:43,840 --> 00:00:45,600
hardware it's not microcode it's pure

16
00:00:45,600 --> 00:00:48,160
software so you can analyze it you can

17
00:00:48,160 --> 00:00:49,680
see what it does

18
00:00:49,680 --> 00:00:53,520
and uh you can decide if it

19
00:00:53,520 --> 00:00:56,239
meets your goals

20
00:00:56,239 --> 00:00:57,760
this is an unprecedented level of

21
00:00:57,760 --> 00:01:00,559
control most trusted computing solutions

22
00:01:00,559 --> 00:01:03,039
live in some opaque hardware that you

23
00:01:03,039 --> 00:01:04,799
can't touch

24
00:01:04,799 --> 00:01:07,200
and you can't inspect

25
00:01:07,200 --> 00:01:09,280
we also have unprecedented

26
00:01:09,280 --> 00:01:12,320
protection because we protect against

27
00:01:12,320 --> 00:01:14,960
all known practical software attacks and

28
00:01:14,960 --> 00:01:17,040
this includes especially cash timing

29
00:01:17,040 --> 00:01:19,360
attacks and none of the solutions that i

30
00:01:19,360 --> 00:01:21,119
mentioned before cover cash timing

31
00:01:21,119 --> 00:01:23,119
attacks

32
00:01:23,119 --> 00:01:24,560
and

33
00:01:24,560 --> 00:01:26,240
last this is practical i'm going to end

34
00:01:26,240 --> 00:01:27,360
the talk with

35
00:01:27,360 --> 00:01:29,840
some performance results that show that

36
00:01:29,840 --> 00:01:32,079
despite the fact that the previous work

37
00:01:32,079 --> 00:01:33,920
said protecting against cash timing

38
00:01:33,920 --> 00:01:35,920
attacks is not practical because the

39
00:01:35,920 --> 00:01:38,400
overheads would be too large actually

40
00:01:38,400 --> 00:01:40,240
the overheads are pretty reasonable and

41
00:01:40,240 --> 00:01:42,560
you can implement this and stop worrying

42
00:01:42,560 --> 00:01:44,960
today

43
00:01:45,200 --> 00:01:47,119
so first i'm going to start with an

44
00:01:47,119 --> 00:01:50,320
overview of trusted computing

45
00:01:50,320 --> 00:01:52,240
so there's this dream called remote

46
00:01:52,240 --> 00:01:54,079
computation in which you can take your

47
00:01:54,079 --> 00:01:56,000
code and your data bundle it up send it

48
00:01:56,000 --> 00:01:57,600
to a remote computer that you don't

49
00:01:57,600 --> 00:01:59,840
control and it's going to execute there

50
00:01:59,840 --> 00:02:01,200
and you're going to get your results

51
00:02:01,200 --> 00:02:03,520
back and everything is good and safe

52
00:02:03,520 --> 00:02:06,000
thanks to magic this is a dream we don't

53
00:02:06,000 --> 00:02:07,920
have such magic fully homomorphic

54
00:02:07,920 --> 00:02:10,239
encryption is as close as we get to such

55
00:02:10,239 --> 00:02:11,760
magic

56
00:02:11,760 --> 00:02:13,120
but if you're willing to trust a piece

57
00:02:13,120 --> 00:02:15,120
of hardware we have trusted computing

58
00:02:15,120 --> 00:02:17,680
which gives you roughly the same

59
00:02:17,680 --> 00:02:19,920
scenario except

60
00:02:19,920 --> 00:02:21,280
now you have to trust a piece of

61
00:02:21,280 --> 00:02:22,640
software and you have to know that

62
00:02:22,640 --> 00:02:24,560
you're talking to that trusted piece

63
00:02:24,560 --> 00:02:26,319
sorry piece of hardware and you have to

64
00:02:26,319 --> 00:02:27,760
know that you're talking to that trusted

65
00:02:27,760 --> 00:02:29,599
piece of hardware when you're sending it

66
00:02:29,599 --> 00:02:32,160
your code and your data

67
00:02:32,160 --> 00:02:34,160
this trust comes from software at the

68
00:02:34,160 --> 00:02:37,360
station and very briefly the idea behind

69
00:02:37,360 --> 00:02:38,879
software at the station is that there's

70
00:02:38,879 --> 00:02:40,879
a manufacturer that you trust this

71
00:02:40,879 --> 00:02:43,200
manufacturer behaves as a certificate

72
00:02:43,200 --> 00:02:45,760
authority and whenever it creates a

73
00:02:45,760 --> 00:02:47,920
piece of trusted hardware that piece of

74
00:02:47,920 --> 00:02:51,040
trusted hardware gets an attestation key

75
00:02:51,040 --> 00:02:53,200
and the manufacturer gives it an

76
00:02:53,200 --> 00:02:55,280
endorsement certificate that says this

77
00:02:55,280 --> 00:02:57,120
attestation key belongs to a piece of

78
00:02:57,120 --> 00:02:59,920
trusted hardware

79
00:03:00,239 --> 00:03:02,400
now when you're going to send your code

80
00:03:02,400 --> 00:03:04,720
and data to that trusted hardware is

81
00:03:04,720 --> 00:03:06,560
going to create a secure container for

82
00:03:06,560 --> 00:03:08,879
you to get your code and data in

83
00:03:08,879 --> 00:03:09,760
and

84
00:03:09,760 --> 00:03:11,760
you're going to send that secure

85
00:03:11,760 --> 00:03:14,480
container a challenge message and that

86
00:03:14,480 --> 00:03:16,959
secure container is going to create

87
00:03:16,959 --> 00:03:19,040
a response to your challenge message and

88
00:03:19,040 --> 00:03:21,599
it's going to ask the hardware to sign

89
00:03:21,599 --> 00:03:23,840
this response and when you look at the

90
00:03:23,840 --> 00:03:25,120
signature

91
00:03:25,120 --> 00:03:27,680
you're going to see that the response

92
00:03:27,680 --> 00:03:29,680
was produced by a container you're going

93
00:03:29,680 --> 00:03:30,959
to know exactly what was in the

94
00:03:30,959 --> 00:03:32,879
container when that response was

95
00:03:32,879 --> 00:03:35,120
produced and you're going to see all the

96
00:03:35,120 --> 00:03:37,040
certificates that say this is trusted

97
00:03:37,040 --> 00:03:39,680
hardware and that container is hosted by

98
00:03:39,680 --> 00:03:42,640
trusted hardware

99
00:03:42,799 --> 00:03:44,159
all right this works for every piece of

100
00:03:44,159 --> 00:03:46,239
trusted computing if you're presenting

101
00:03:46,239 --> 00:03:47,760
something else feel free to steal the

102
00:03:47,760 --> 00:03:49,360
slides now

103
00:03:49,360 --> 00:03:51,280
what systems what trusted computing

104
00:03:51,280 --> 00:03:53,040
systems have that makes them different

105
00:03:53,040 --> 00:03:54,879
is they put different amounts of

106
00:03:54,879 --> 00:03:57,360
software in this secure container

107
00:03:57,360 --> 00:04:00,000
for example tpm puts an entire operating

108
00:04:00,000 --> 00:04:02,879
system and all the applications inside

109
00:04:02,879 --> 00:04:05,519
whereas something like hdx only puts the

110
00:04:05,519 --> 00:04:08,799
user application in the secure container

111
00:04:08,799 --> 00:04:10,480
they also differ in how the container

112
00:04:10,480 --> 00:04:11,840
interacts with the rest of the

113
00:04:11,840 --> 00:04:12,959
environment

114
00:04:12,959 --> 00:04:16,000
what the trusted hardware is that makes

115
00:04:16,000 --> 00:04:19,040
this container secure and what

116
00:04:19,040 --> 00:04:20,959
software you need in order to make this

117
00:04:20,959 --> 00:04:23,360
container secure and last the software

118
00:04:23,360 --> 00:04:25,280
attestation process itself differs

119
00:04:25,280 --> 00:04:26,800
between systems

120
00:04:26,800 --> 00:04:28,320
and hopefully through the rest of this

121
00:04:28,320 --> 00:04:29,520
talk i'm gonna

122
00:04:29,520 --> 00:04:31,840
be able to tell you where sanctum lies

123
00:04:31,840 --> 00:04:35,440
on all these aspects

124
00:04:35,680 --> 00:04:37,680
so let's start by going over sanctum

125
00:04:37,680 --> 00:04:41,280
software stack very quickly

126
00:04:41,280 --> 00:04:42,639
we'll start all the way at the bottom

127
00:04:42,639 --> 00:04:44,320
our secure containers are called

128
00:04:44,320 --> 00:04:47,199
enclaves this is exactly like in htx

129
00:04:47,199 --> 00:04:49,440
uh so our secure containers only have

130
00:04:49,440 --> 00:04:51,600
the user application they don't require

131
00:04:51,600 --> 00:04:54,160
an operating system they don't require a

132
00:04:54,160 --> 00:04:57,759
hypervisor no system software there

133
00:04:57,759 --> 00:05:00,000
uh our enclaves run at the lowest

134
00:05:00,000 --> 00:05:02,320
possible privilege level this is user

135
00:05:02,320 --> 00:05:04,400
level on most architectures or ring

136
00:05:04,400 --> 00:05:06,479
three if you're on intel and this means

137
00:05:06,479 --> 00:05:07,840
that they cannot compromise the

138
00:05:07,840 --> 00:05:09,840
operating system or any other system

139
00:05:09,840 --> 00:05:12,160
software so we don't need to worry about

140
00:05:12,160 --> 00:05:13,919
what happens if malicious software

141
00:05:13,919 --> 00:05:16,240
enters in an enclave it's going to be

142
00:05:16,240 --> 00:05:18,080
managed just like any other malicious

143
00:05:18,080 --> 00:05:20,720
process the os can shut it down and can

144
00:05:20,720 --> 00:05:21,680
prevent

145
00:05:21,680 --> 00:05:25,280
the resources it can access

146
00:05:25,280 --> 00:05:28,080
enclaves can access the memory

147
00:05:28,080 --> 00:05:30,080
space of their host applications so they

148
00:05:30,080 --> 00:05:32,000
can do efficient fast communication with

149
00:05:32,000 --> 00:05:34,080
their host application but they cannot

150
00:05:34,080 --> 00:05:36,560
communicate with the os directly this is

151
00:05:36,560 --> 00:05:38,320
because when you perform a syscall you

152
00:05:38,320 --> 00:05:40,560
trust the operating system to set the

153
00:05:40,560 --> 00:05:42,880
execution context when it returns from

154
00:05:42,880 --> 00:05:44,880
the syscall and we can't trust the

155
00:05:44,880 --> 00:05:47,199
operating system because it's not part

156
00:05:47,199 --> 00:05:49,039
of the secure container

157
00:05:49,039 --> 00:05:51,360
so instead enclaves have to rely on

158
00:05:51,360 --> 00:05:53,600
their host application to

159
00:05:53,600 --> 00:05:56,080
perform syscalls so there's some proxy

160
00:05:56,080 --> 00:05:58,319
whenever you want to do a syscall from

161
00:05:58,319 --> 00:06:01,120
the enclave

162
00:06:02,080 --> 00:06:03,520
fortunately if you're writing software

163
00:06:03,520 --> 00:06:04,880
for an enclave you don't need to care

164
00:06:04,880 --> 00:06:07,120
about this your runtime should be able

165
00:06:07,120 --> 00:06:08,720
to handle all of this for you for

166
00:06:08,720 --> 00:06:11,039
example if your link against libsy

167
00:06:11,039 --> 00:06:12,800
whenever libsy wants to make a system

168
00:06:12,800 --> 00:06:14,720
call it would talk to the host

169
00:06:14,720 --> 00:06:16,639
application and proxy the system called

170
00:06:16,639 --> 00:06:18,639
through the host application all the way

171
00:06:18,639 --> 00:06:21,840
to the operating system

172
00:06:23,600 --> 00:06:27,280
uh the uh so that was enclaves now what

173
00:06:27,280 --> 00:06:29,440
we introduce our

174
00:06:29,440 --> 00:06:30,639
software

175
00:06:30,639 --> 00:06:34,000
is uh going to be two pieces of software

176
00:06:34,000 --> 00:06:35,039
and

177
00:06:35,039 --> 00:06:37,120
they're software they're not firmware

178
00:06:37,120 --> 00:06:40,319
they're not microcode uh they are not in

179
00:06:40,319 --> 00:06:42,080
hardware so this means they're not

180
00:06:42,080 --> 00:06:43,600
isolated from anything else on the

181
00:06:43,600 --> 00:06:45,520
computer so we need a new privilege

182
00:06:45,520 --> 00:06:48,160
level for our software to run in

183
00:06:48,160 --> 00:06:49,440
fortunately

184
00:06:49,440 --> 00:06:51,360
our prototype targets the risc v

185
00:06:51,360 --> 00:06:53,120
architecture which just happens to have

186
00:06:53,120 --> 00:06:55,520
a machine level that does exactly what

187
00:06:55,520 --> 00:06:57,840
we want so on our prototype we're

188
00:06:57,840 --> 00:07:00,560
targeting the machine level of the

189
00:07:00,560 --> 00:07:02,400
risc-5 architecture

190
00:07:02,400 --> 00:07:04,000
in general you need a new privilege

191
00:07:04,000 --> 00:07:05,840
level to keep your

192
00:07:05,840 --> 00:07:09,120
security software isolated

193
00:07:09,120 --> 00:07:12,479
so this is the machine level

194
00:07:12,639 --> 00:07:14,479
the main piece of software that we are

195
00:07:14,479 --> 00:07:17,039
adding is called a security monitor

196
00:07:17,039 --> 00:07:19,680
and the security monitor is tiny so that

197
00:07:19,680 --> 00:07:21,520
it can be formally verified we didn't

198
00:07:21,520 --> 00:07:24,479
formally verify it but it is well within

199
00:07:24,479 --> 00:07:26,560
the scope of what formal verification

200
00:07:26,560 --> 00:07:27,759
can cover

201
00:07:27,759 --> 00:07:29,840
and the way to keep it tiny is we don't

202
00:07:29,840 --> 00:07:31,599
let it make any

203
00:07:31,599 --> 00:07:34,000
resource allocation decisions instead

204
00:07:34,000 --> 00:07:36,479
these decisions stay with the operating

205
00:07:36,479 --> 00:07:38,880
system where they belong and the

206
00:07:38,880 --> 00:07:41,199
operating system simply tells the

207
00:07:41,199 --> 00:07:43,680
security monitor these are my decisions

208
00:07:43,680 --> 00:07:45,919
commit them to hardware and the security

209
00:07:45,919 --> 00:07:48,240
monitor keeps track of these decisions

210
00:07:48,240 --> 00:07:50,240
and make sure that the decisions comply

211
00:07:50,240 --> 00:07:53,039
with sanctum security policy and if any

212
00:07:53,039 --> 00:07:54,879
decision does not match the security

213
00:07:54,879 --> 00:07:56,160
policy then

214
00:07:56,160 --> 00:07:58,639
that decision is uh rejected by the

215
00:07:58,639 --> 00:08:00,160
security monitor

216
00:08:00,160 --> 00:08:02,400
uh this is equivalent to sgx's

217
00:08:02,400 --> 00:08:04,240
instructions that fail if you try to do

218
00:08:04,240 --> 00:08:06,639
something that would be insecure except

219
00:08:06,639 --> 00:08:08,560
in our case everything is implemented in

220
00:08:08,560 --> 00:08:11,039
software

221
00:08:11,440 --> 00:08:13,520
uh the other piece of software

222
00:08:13,520 --> 00:08:16,080
is a measurement route and this code

223
00:08:16,080 --> 00:08:18,639
runs at boot time and it sets up the

224
00:08:18,639 --> 00:08:20,319
software at the station chain and i'm

225
00:08:20,319 --> 00:08:22,639
gonna talk a little bit about that soon

226
00:08:22,639 --> 00:08:24,000
but after the boot process this

227
00:08:24,000 --> 00:08:26,240
measurement goes away and the only thing

228
00:08:26,240 --> 00:08:27,520
that runs

229
00:08:27,520 --> 00:08:30,878
is the security monitor

230
00:08:32,799 --> 00:08:35,200
so we have all the software that we rely

231
00:08:35,200 --> 00:08:37,519
on but at the same time we let the user

232
00:08:37,519 --> 00:08:40,240
replace most of it and this is why we

233
00:08:40,240 --> 00:08:41,919
say we give you unprecedented control

234
00:08:41,919 --> 00:08:44,720
let me talk a little bit about sanctum's

235
00:08:44,720 --> 00:08:46,640
software attestation process and how we

236
00:08:46,640 --> 00:08:48,800
can give you security and at the same

237
00:08:48,800 --> 00:08:50,640
time let the computer owner replace the

238
00:08:50,640 --> 00:08:54,120
security software

239
00:08:55,200 --> 00:08:57,360
uh before we talk about the attestation

240
00:08:57,360 --> 00:08:59,040
scheme itself i'm going to talk about

241
00:08:59,040 --> 00:09:01,120
the boot process because this is where

242
00:09:01,120 --> 00:09:05,839
the attestation chain gets established

243
00:09:06,480 --> 00:09:07,279
so

244
00:09:07,279 --> 00:09:09,360
our security monitor is the part that

245
00:09:09,360 --> 00:09:11,200
can be replaced by the user and this

246
00:09:11,200 --> 00:09:12,800
implements all of sanctum security

247
00:09:12,800 --> 00:09:14,640
policies so if you don't like our

248
00:09:14,640 --> 00:09:16,320
policies you can take advantage of our

249
00:09:16,320 --> 00:09:18,800
hardware and fork the system and build

250
00:09:18,800 --> 00:09:21,040
your own and if other people are willing

251
00:09:21,040 --> 00:09:24,080
to trust you good for you you have a

252
00:09:24,080 --> 00:09:26,160
trusted

253
00:09:26,160 --> 00:09:29,040
computing system

254
00:09:29,760 --> 00:09:31,680
so in order to keep things secure we

255
00:09:31,680 --> 00:09:33,279
have to rely on the measurement root

256
00:09:33,279 --> 00:09:35,760
code and this is not user replaceable

257
00:09:35,760 --> 00:09:38,080
this is burned into a processor rom and

258
00:09:38,080 --> 00:09:40,320
this is responsible for

259
00:09:40,320 --> 00:09:42,800
reading the security monitor and for

260
00:09:42,800 --> 00:09:44,000
hashing it

261
00:09:44,000 --> 00:09:46,800
and measuring it

262
00:09:48,560 --> 00:09:50,480
so the measurement root reads the

263
00:09:50,480 --> 00:09:54,000
security monitor and hashes it

264
00:09:54,000 --> 00:09:55,360
and

265
00:09:55,360 --> 00:09:57,680
after the security monitor is hashed

266
00:09:57,680 --> 00:09:59,839
this is fed into a bit of cryptographic

267
00:09:59,839 --> 00:10:02,480
machinery and this machinery produces an

268
00:10:02,480 --> 00:10:05,200
rsa key pair and our say key pair is

269
00:10:05,200 --> 00:10:08,480
going to become the security monitors

270
00:10:08,480 --> 00:10:12,320
rsa key pair the measurement route

271
00:10:12,320 --> 00:10:14,240
has access to the processor's

272
00:10:14,240 --> 00:10:17,279
attestation key

273
00:10:17,440 --> 00:10:20,560
and it uses that to sign the key that he

274
00:10:20,560 --> 00:10:23,360
just generated for the security monitor

275
00:10:23,360 --> 00:10:24,160
so

276
00:10:24,160 --> 00:10:26,240
a security monitor will have its own

277
00:10:26,240 --> 00:10:27,600
attestation key and it will have a

278
00:10:27,600 --> 00:10:30,000
certificate that will say

279
00:10:30,000 --> 00:10:32,000
this was the security monitor this was

280
00:10:32,000 --> 00:10:33,440
its hash and

281
00:10:33,440 --> 00:10:35,680
its key is guaranteed to be

282
00:10:35,680 --> 00:10:37,839
a proper attestation key for that

283
00:10:37,839 --> 00:10:39,440
security monitor

284
00:10:39,440 --> 00:10:40,880
so if you're willing to trust the

285
00:10:40,880 --> 00:10:43,360
security monitors code you can believe

286
00:10:43,360 --> 00:10:45,760
that at the stations signed by that key

287
00:10:45,760 --> 00:10:49,120
are legit at the stations

288
00:10:51,200 --> 00:10:53,279
uh finally in case you're horrified by

289
00:10:53,279 --> 00:10:55,120
the idea of having to generate an rsa

290
00:10:55,120 --> 00:10:57,279
key on every boot we have a caching

291
00:10:57,279 --> 00:10:59,600
mechanism that i'm not going to go into

292
00:10:59,600 --> 00:11:03,360
detail here that lets us securely cache

293
00:11:03,360 --> 00:11:06,399
the rsa key and the certificate

294
00:11:06,399 --> 00:11:08,720
for the security monitor across boot

295
00:11:08,720 --> 00:11:11,920
cycles in non-volatile memory so as long

296
00:11:11,920 --> 00:11:13,920
as the user doesn't replace the security

297
00:11:13,920 --> 00:11:16,079
monitor we can use the cached rsa key

298
00:11:16,079 --> 00:11:18,000
and skip the key generation step at boot

299
00:11:18,000 --> 00:11:20,079
time so i guess as long as you don't

300
00:11:20,079 --> 00:11:21,760
replace your monitor all the time your

301
00:11:21,760 --> 00:11:24,800
boots are going to be fast

302
00:11:26,880 --> 00:11:28,480
now before i show you the attestation

303
00:11:28,480 --> 00:11:30,160
scheme itself last thing i'm going to

304
00:11:30,160 --> 00:11:32,720
talk about a little bit is uh how we

305
00:11:32,720 --> 00:11:34,560
build enclaves and this is very similar

306
00:11:34,560 --> 00:11:37,279
to sgx when an enclave is created it

307
00:11:37,279 --> 00:11:40,320
starts out in a loading mode and in that

308
00:11:40,320 --> 00:11:41,680
mode the

309
00:11:41,680 --> 00:11:43,600
application that once the enclave talks

310
00:11:43,600 --> 00:11:45,519
to the operating system which talks to

311
00:11:45,519 --> 00:11:48,160
the security monitor and it loads code

312
00:11:48,160 --> 00:11:50,399
and data into the enclave everything

313
00:11:50,399 --> 00:11:52,480
that is loaded into the enclave is

314
00:11:52,480 --> 00:11:54,320
measured and contributes to the

315
00:11:54,320 --> 00:11:56,959
enclave's identity once loading is

316
00:11:56,959 --> 00:11:58,160
completed

317
00:11:58,160 --> 00:12:00,320
the enclave is initialized and at this

318
00:12:00,320 --> 00:12:02,399
point the enclave's measurement

319
00:12:02,399 --> 00:12:04,160
is finalized

320
00:12:04,160 --> 00:12:05,760
so you can't load things into the

321
00:12:05,760 --> 00:12:07,440
enclave anymore but you can start

322
00:12:07,440 --> 00:12:10,000
executing the enclave so basically the

323
00:12:10,000 --> 00:12:12,800
enclave's measurement is the initial

324
00:12:12,800 --> 00:12:15,040
state of its memory and it covers

325
00:12:15,040 --> 00:12:16,560
everything that was loaded into it by

326
00:12:16,560 --> 00:12:18,160
the operating system

327
00:12:18,160 --> 00:12:19,839
and this measurement is what will show

328
00:12:19,839 --> 00:12:23,800
up in software at the station

329
00:12:25,200 --> 00:12:26,560
all right the rest of software at the

330
00:12:26,560 --> 00:12:28,160
station is really pretty straightforward

331
00:12:28,160 --> 00:12:30,079
i'm going to go through it very quickly

332
00:12:30,079 --> 00:12:31,600
just so you can see all the ideas come

333
00:12:31,600 --> 00:12:33,680
together

334
00:12:33,680 --> 00:12:34,880
so

335
00:12:34,880 --> 00:12:37,040
whoa what was that

336
00:12:37,040 --> 00:12:39,920
so assuming you trust a manufacturer

337
00:12:39,920 --> 00:12:42,959
you're trusting a root key the

338
00:12:42,959 --> 00:12:45,279
manufacturer builds a sanctum processor

339
00:12:45,279 --> 00:12:48,399
and gives it its own

340
00:12:48,399 --> 00:12:50,560
public private key pair together with a

341
00:12:50,560 --> 00:12:53,680
certificate when the processor boots up

342
00:12:53,680 --> 00:12:55,920
the

343
00:12:56,079 --> 00:12:57,839
the measurement code will measure the

344
00:12:57,839 --> 00:13:00,240
security monitor and it will give it its

345
00:13:00,240 --> 00:13:01,839
attestation key together with an

346
00:13:01,839 --> 00:13:04,959
attestation certificate

347
00:13:04,959 --> 00:13:07,200
when you want to create an enclave

348
00:13:07,200 --> 00:13:09,360
uh on a remote computer that you don't

349
00:13:09,360 --> 00:13:11,120
trust you're going to have that computer

350
00:13:11,120 --> 00:13:12,480
create the enclave and you're going to

351
00:13:12,480 --> 00:13:14,480
send it a challenge message

352
00:13:14,480 --> 00:13:16,480
the enclave will start executing and

353
00:13:16,480 --> 00:13:18,959
will produce the response message

354
00:13:18,959 --> 00:13:20,959
and it will

355
00:13:20,959 --> 00:13:23,200
ask the outside to give it an

356
00:13:23,200 --> 00:13:26,320
attestation signature

357
00:13:27,839 --> 00:13:29,279
one little thing that we have different

358
00:13:29,279 --> 00:13:30,399
from every

359
00:13:30,399 --> 00:13:32,480
from i guess the older systems and that

360
00:13:32,480 --> 00:13:36,240
matches hdx is that our signing happens

361
00:13:36,240 --> 00:13:38,639
in a signing enclave so this is just

362
00:13:38,639 --> 00:13:40,160
like every other enclave in the sense

363
00:13:40,160 --> 00:13:42,000
that it's an enclave and it receives all

364
00:13:42,000 --> 00:13:44,079
the protection guarantees that enclaves

365
00:13:44,079 --> 00:13:46,480
receive but it's a special enclave that

366
00:13:46,480 --> 00:13:48,560
has a special measurement and when

367
00:13:48,560 --> 00:13:50,880
sanctum when the the sanctum security

368
00:13:50,880 --> 00:13:52,880
monitor sees this measurement

369
00:13:52,880 --> 00:13:55,440
it will release uh its private

370
00:13:55,440 --> 00:13:58,000
attestation key to the enclave so all

371
00:13:58,000 --> 00:14:00,000
the cryptographic operations happen in a

372
00:14:00,000 --> 00:14:02,399
signing enclave and not in the security

373
00:14:02,399 --> 00:14:03,839
monitor itself

374
00:14:03,839 --> 00:14:05,440
and this is just because enclaves are

375
00:14:05,440 --> 00:14:08,160
more isolated than the security monitor

376
00:14:08,160 --> 00:14:10,639
and we're going to go into that a little

377
00:14:10,639 --> 00:14:12,399
bit later

378
00:14:12,399 --> 00:14:14,160
so in order to get the signature you're

379
00:14:14,160 --> 00:14:16,480
going to have to spin up the signing

380
00:14:16,480 --> 00:14:17,920
enclave

381
00:14:17,920 --> 00:14:20,959
you're going to have to use sanctum's

382
00:14:20,959 --> 00:14:22,959
inter-enclave communication mechanisms

383
00:14:22,959 --> 00:14:24,639
to talk to it

384
00:14:24,639 --> 00:14:26,560
and send it the

385
00:14:26,560 --> 00:14:28,480
response message that needs to be signed

386
00:14:28,480 --> 00:14:29,760
and then

387
00:14:29,760 --> 00:14:30,399
the

388
00:14:30,399 --> 00:14:31,920
signing enclave will produce an

389
00:14:31,920 --> 00:14:34,079
attestation signature that

390
00:14:34,079 --> 00:14:35,360
includes the

391
00:14:35,360 --> 00:14:38,000
original enclaves measurement together

392
00:14:38,000 --> 00:14:38,720
with

393
00:14:38,720 --> 00:14:40,959
the response message that was signed

394
00:14:40,959 --> 00:14:42,839
and after you see all the chain of

395
00:14:42,839 --> 00:14:44,720
certificates and the attestation

396
00:14:44,720 --> 00:14:46,639
signature you will be convinced that

397
00:14:46,639 --> 00:14:48,240
you're talking to the enclave that you

398
00:14:48,240 --> 00:14:50,240
want to talk to so none claim that was

399
00:14:50,240 --> 00:14:51,519
initialized according to your

400
00:14:51,519 --> 00:14:52,639
instructions

401
00:14:52,639 --> 00:14:54,079
that's running

402
00:14:54,079 --> 00:14:55,680
on

403
00:14:55,680 --> 00:14:58,320
trusted sanctum hardware together with a

404
00:14:58,320 --> 00:15:01,120
security monitor that you trust because

405
00:15:01,120 --> 00:15:02,639
you've seen all the chain that covers

406
00:15:02,639 --> 00:15:04,399
everything

407
00:15:04,399 --> 00:15:06,399
so this is how we give you control while

408
00:15:06,399 --> 00:15:08,800
at the same time giving you a secure

409
00:15:08,800 --> 00:15:11,199
attestation scheme now i'm going to talk

410
00:15:11,199 --> 00:15:14,079
a little bit about protection so

411
00:15:14,079 --> 00:15:16,240
i claim we give you unprecedented

412
00:15:16,240 --> 00:15:19,040
protection because we protect against

413
00:15:19,040 --> 00:15:20,800
all software attacks including cash

414
00:15:20,800 --> 00:15:22,240
timing attacks

415
00:15:22,240 --> 00:15:25,040
and first of all i'm gonna mention that

416
00:15:25,040 --> 00:15:27,680
we're targeting multi-core processors

417
00:15:27,680 --> 00:15:30,560
with a shared last level cache

418
00:15:30,560 --> 00:15:33,440
and this is because private caches are

419
00:15:33,440 --> 00:15:35,040
paracore caches are super easy to

420
00:15:35,040 --> 00:15:37,120
protect when you enter an enclave you

421
00:15:37,120 --> 00:15:40,079
flush the parkour cache when you exit an

422
00:15:40,079 --> 00:15:42,480
enclave you flush the parkour cash and

423
00:15:42,480 --> 00:15:45,279
you've removed any cash sharing this

424
00:15:45,279 --> 00:15:47,120
strategy is easy

425
00:15:47,120 --> 00:15:49,199
uh to reason about it's simple and we

426
00:15:49,199 --> 00:15:51,519
like simple so we use it but at the same

427
00:15:51,519 --> 00:15:53,040
time it doesn't work for the more

428
00:15:53,040 --> 00:15:55,120
interesting case which is when you have

429
00:15:55,120 --> 00:15:57,120
one big last level cache that all the

430
00:15:57,120 --> 00:15:58,320
cores

431
00:15:58,320 --> 00:16:00,320
share and that strategy doesn't work

432
00:16:00,320 --> 00:16:02,320
because you're an attacker could be

433
00:16:02,320 --> 00:16:04,079
accessing the cache at the same time as

434
00:16:04,079 --> 00:16:05,680
your enclave so you need

435
00:16:05,680 --> 00:16:07,360
a more

436
00:16:07,360 --> 00:16:10,800
a slightly more complicated strategy

437
00:16:10,800 --> 00:16:12,160
and the slightly more complicated

438
00:16:12,160 --> 00:16:13,600
strategy that we use to kill the

439
00:16:13,600 --> 00:16:16,639
suspense is the cash coloring i'll

440
00:16:16,639 --> 00:16:18,880
summarize it in a bit it's really the

441
00:16:18,880 --> 00:16:21,199
simplest strategy that works

442
00:16:21,199 --> 00:16:22,880
and the main point isn't that it's the

443
00:16:22,880 --> 00:16:25,120
best strategy but even with a simple

444
00:16:25,120 --> 00:16:27,600
strategy we get reasonable overheads so

445
00:16:27,600 --> 00:16:29,920
this is practical and we can start doing

446
00:16:29,920 --> 00:16:32,160
it today to get proper protection

447
00:16:32,160 --> 00:16:34,240
against software attacks

448
00:16:34,240 --> 00:16:36,560
before i go into it uh

449
00:16:36,560 --> 00:16:40,000
we almost scale to a full intel desktop

450
00:16:40,000 --> 00:16:41,839
system the only thing that trips us is

451
00:16:41,839 --> 00:16:44,079
hyper threading we don't handle hyper

452
00:16:44,079 --> 00:16:46,320
threading because uh when you have hyper

453
00:16:46,320 --> 00:16:47,680
threading on

454
00:16:47,680 --> 00:16:49,759
two logical processors that are in the

455
00:16:49,759 --> 00:16:51,120
same core share so much

456
00:16:51,120 --> 00:16:53,360
microarchitectural state that we can't

457
00:16:53,360 --> 00:16:55,279
think of a sane way to protect against

458
00:16:55,279 --> 00:16:57,839
timing attacks in that scenario so no

459
00:16:57,839 --> 00:17:00,000
hyper-threading for sanctum other than

460
00:17:00,000 --> 00:17:01,600
that we could scale to a full-blown

461
00:17:01,600 --> 00:17:05,160
desktop processor

462
00:17:06,400 --> 00:17:08,400
very quickly what's the problem with

463
00:17:08,400 --> 00:17:11,439
cash timing attacks what are they what

464
00:17:11,439 --> 00:17:13,839
how do we defend against them so cash

465
00:17:13,839 --> 00:17:15,760
timing attacks take advantage of a fact

466
00:17:15,760 --> 00:17:18,240
that a cash hit is much faster than a

467
00:17:18,240 --> 00:17:19,760
cash miss

468
00:17:19,760 --> 00:17:22,640
and in sanctum we're targeting uh set

469
00:17:22,640 --> 00:17:24,640
associative caches

470
00:17:24,640 --> 00:17:26,720
and the nice thing about set associative

471
00:17:26,720 --> 00:17:28,240
caches is that

472
00:17:28,240 --> 00:17:31,200
each set effectively acts as its own

473
00:17:31,200 --> 00:17:32,799
independent cache

474
00:17:32,799 --> 00:17:34,480
so the physical

475
00:17:34,480 --> 00:17:36,559
address of the memory location that is

476
00:17:36,559 --> 00:17:39,200
cached decides which set

477
00:17:39,200 --> 00:17:41,919
the location will get cached in and two

478
00:17:41,919 --> 00:17:43,840
locations that get cached in different

479
00:17:43,840 --> 00:17:46,240
sets have absolutely no interaction in

480
00:17:46,240 --> 00:17:48,720
the cache

481
00:17:50,400 --> 00:17:53,120
so what we want to do is partition in

482
00:17:53,120 --> 00:17:55,679
order to defeat cache timing attacks and

483
00:17:55,679 --> 00:17:58,000
the idea behind partitioning is that if

484
00:17:58,000 --> 00:18:00,720
we can get all the memory that's private

485
00:18:00,720 --> 00:18:02,960
to our enclave to occupy sets that are

486
00:18:02,960 --> 00:18:05,200
guaranteed to not be

487
00:18:05,200 --> 00:18:07,600
occupied by any attacker there's not

488
00:18:07,600 --> 00:18:09,280
going to be any attack because there's

489
00:18:09,280 --> 00:18:11,760
no more shared cash so there's no more

490
00:18:11,760 --> 00:18:14,799
cash timing attack

491
00:18:14,799 --> 00:18:16,799
and the nice thing about caches is that

492
00:18:16,799 --> 00:18:19,120
they use physical addresses

493
00:18:19,120 --> 00:18:21,120
and physical addresses are completely

494
00:18:21,120 --> 00:18:23,760
decoupled from what software uses

495
00:18:23,760 --> 00:18:25,280
software goes through address

496
00:18:25,280 --> 00:18:28,640
translation which uses virtual addresses

497
00:18:28,640 --> 00:18:30,720
so if we look at

498
00:18:30,720 --> 00:18:33,520
a physical address most of its bits are

499
00:18:33,520 --> 00:18:36,240
determined by address translation not by

500
00:18:36,240 --> 00:18:37,919
what the software

501
00:18:37,919 --> 00:18:40,720
originally used in its virtual address

502
00:18:40,720 --> 00:18:44,400
and if we look at the address bits that

503
00:18:44,400 --> 00:18:45,919
are controlled by address translation

504
00:18:45,919 --> 00:18:47,840
and we overlap them with the address

505
00:18:47,840 --> 00:18:48,799
bits

506
00:18:48,799 --> 00:18:51,200
that are used to compute the cache set

507
00:18:51,200 --> 00:18:53,919
index we find some bits that are

508
00:18:53,919 --> 00:18:56,000
controlled by the page tables and that

509
00:18:56,000 --> 00:18:57,919
control cache placement

510
00:18:57,919 --> 00:18:58,799
and

511
00:18:58,799 --> 00:19:01,440
we call these bits our dram region index

512
00:19:01,440 --> 00:19:03,840
and other people call them the page

513
00:19:03,840 --> 00:19:06,720
color so in page coloring schemes these

514
00:19:06,720 --> 00:19:10,320
are called the page color

515
00:19:10,320 --> 00:19:13,039
these bits have the property that

516
00:19:13,039 --> 00:19:15,200
if two addresses have different values

517
00:19:15,200 --> 00:19:17,280
for these bits they're going to end up

518
00:19:17,280 --> 00:19:19,520
in different cache sets and they're

519
00:19:19,520 --> 00:19:22,320
never going to interfere in the cache

520
00:19:22,320 --> 00:19:23,440
and

521
00:19:23,440 --> 00:19:26,000
they're fully controlled by the page

522
00:19:26,000 --> 00:19:27,919
tables so

523
00:19:27,919 --> 00:19:29,600
given that in sanctum we have the

524
00:19:29,600 --> 00:19:31,280
highest level

525
00:19:31,280 --> 00:19:33,280
of software running on the machine we

526
00:19:33,280 --> 00:19:35,200
can say you're gonna set up your page

527
00:19:35,200 --> 00:19:37,679
tables to

528
00:19:37,679 --> 00:19:39,679
to match a certain security policy so

529
00:19:39,679 --> 00:19:41,600
you're going to set up your page table

530
00:19:41,600 --> 00:19:43,600
in such a way that enclaves are going to

531
00:19:43,600 --> 00:19:45,600
occupy memory that doesn't overlap in

532
00:19:45,600 --> 00:19:46,880
the cache with

533
00:19:46,880 --> 00:19:50,160
non-enclave software

534
00:19:51,039 --> 00:19:53,520
and if you use cache partitioning sorry

535
00:19:53,520 --> 00:19:55,520
page coloring blindly you end up with

536
00:19:55,520 --> 00:19:58,320
page colors like you see on the left

537
00:19:58,320 --> 00:20:00,799
basically if you

538
00:20:00,799 --> 00:20:02,240
color dram

539
00:20:02,240 --> 00:20:04,320
every page has a different color

540
00:20:04,320 --> 00:20:05,600
we do a

541
00:20:05,600 --> 00:20:08,080
nice little trick in hardware so that

542
00:20:08,080 --> 00:20:10,559
our page colors look like this in dram

543
00:20:10,559 --> 00:20:12,240
and this has the nice property that if

544
00:20:12,240 --> 00:20:14,240
the os only has

545
00:20:14,240 --> 00:20:15,039
some

546
00:20:15,039 --> 00:20:17,280
dram regions it can still allocate a

547
00:20:17,280 --> 00:20:20,000
large buffer of continuous memory and

548
00:20:20,000 --> 00:20:21,600
you want large buffers of continuous

549
00:20:21,600 --> 00:20:23,679
memory in order to talk to devices such

550
00:20:23,679 --> 00:20:26,400
as a graphics card or a nic that want to

551
00:20:26,400 --> 00:20:29,039
have a large dma buffer that you

552
00:20:29,039 --> 00:20:31,760
interact with

553
00:20:32,799 --> 00:20:35,679
all right and as i was alluding to uh

554
00:20:35,679 --> 00:20:37,919
once we have the setup

555
00:20:37,919 --> 00:20:40,960
where dram is split up into dram regions

556
00:20:40,960 --> 00:20:42,960
uh we're going to allocate dram regions

557
00:20:42,960 --> 00:20:45,039
to either enclaves or to non-enclave

558
00:20:45,039 --> 00:20:46,080
software

559
00:20:46,080 --> 00:20:48,960
and each enclave has its own page tables

560
00:20:48,960 --> 00:20:50,720
and its page tables

561
00:20:50,720 --> 00:20:51,760
map

562
00:20:51,760 --> 00:20:56,159
a virtual address space to the enclaves

563
00:20:56,159 --> 00:20:57,600
dram regions

564
00:20:57,600 --> 00:20:59,760
and then all the virtual address space

565
00:20:59,760 --> 00:21:02,080
that is outside the special range maps

566
00:21:02,080 --> 00:21:04,480
into the enclaves host

567
00:21:04,480 --> 00:21:06,880
application space so this is how an

568
00:21:06,880 --> 00:21:09,679
enclave talks to its host application it

569
00:21:09,679 --> 00:21:11,679
can just read and write its memory but

570
00:21:11,679 --> 00:21:13,679
the converse is not true no application

571
00:21:13,679 --> 00:21:17,200
can read and write into enclave memory

572
00:21:17,200 --> 00:21:18,320
all right these are the high level

573
00:21:18,320 --> 00:21:20,080
details the more

574
00:21:20,080 --> 00:21:22,639
exciting

575
00:21:22,880 --> 00:21:24,960
small details are in the paper so i hope

576
00:21:24,960 --> 00:21:27,360
you will read it and before i wrap up i

577
00:21:27,360 --> 00:21:28,640
want to show you some performance

578
00:21:28,640 --> 00:21:30,880
numbers to convince you that this is

579
00:21:30,880 --> 00:21:32,720
practical so

580
00:21:32,720 --> 00:21:34,400
we have cash partitioning going which

581
00:21:34,400 --> 00:21:37,919
prevents against the cash timing attacks

582
00:21:37,919 --> 00:21:39,840
we have separate page tables for

583
00:21:39,840 --> 00:21:41,919
enclaves and for non-enclave software

584
00:21:41,919 --> 00:21:44,240
which prevents against attacks that take

585
00:21:44,240 --> 00:21:46,960
advantage of how bits are set in the

586
00:21:46,960 --> 00:21:49,200
page tables and enclave memory is

587
00:21:49,200 --> 00:21:51,600
isolated from non-enclave memory so we

588
00:21:51,600 --> 00:21:54,000
have full isolation and we still get

589
00:21:54,000 --> 00:21:56,000
good performance numbers

590
00:21:56,000 --> 00:21:57,360
so we perform

591
00:21:57,360 --> 00:21:59,760
we did a performance analysis on a

592
00:21:59,760 --> 00:22:02,720
rocket core which is an implementation

593
00:22:02,720 --> 00:22:04,960
of the risc-v architecture that's open

594
00:22:04,960 --> 00:22:06,159
source

595
00:22:06,159 --> 00:22:08,559
produced at berkeley and the rocket core

596
00:22:08,559 --> 00:22:10,240
has a nice property that it's in order

597
00:22:10,240 --> 00:22:12,320
so you can just measure each overhead

598
00:22:12,320 --> 00:22:14,640
and add them up

599
00:22:14,640 --> 00:22:17,200
and it has a nice property that there is

600
00:22:17,200 --> 00:22:21,200
a cycle accurate rocket simulator so we

601
00:22:21,200 --> 00:22:23,840
combined this with a cache simulator and

602
00:22:23,840 --> 00:22:26,400
we ran all the spec in tests that

603
00:22:26,400 --> 00:22:28,559
didn't require too much operating system

604
00:22:28,559 --> 00:22:29,919
support

605
00:22:29,919 --> 00:22:30,960
and

606
00:22:30,960 --> 00:22:32,720
these are the main results the paper has

607
00:22:32,720 --> 00:22:34,720
more detailed results but the main

608
00:22:34,720 --> 00:22:36,320
results are that

609
00:22:36,320 --> 00:22:38,559
for most tests we have small overheads

610
00:22:38,559 --> 00:22:41,200
and the largest overhead we've seen is

611
00:22:41,200 --> 00:22:42,640
18 percent

612
00:22:42,640 --> 00:22:44,080
for

613
00:22:44,080 --> 00:22:46,799
easy two and then mcf is the next worst

614
00:22:46,799 --> 00:22:48,240
and these are

615
00:22:48,240 --> 00:22:50,720
known tests that perform poorly if your

616
00:22:50,720 --> 00:22:52,400
cash gets smaller which is exactly

617
00:22:52,400 --> 00:22:55,840
what's happening with sanctum

618
00:22:56,320 --> 00:23:00,760
and i'll stop here and take questions

619
00:23:01,410 --> 00:23:03,620
[Applause]

620
00:23:03,620 --> 00:23:05,370
[Music]

621
00:23:05,370 --> 00:23:09,479
[Applause]

622
00:23:09,600 --> 00:23:11,600
microsoft research

623
00:23:11,600 --> 00:23:14,000
great work um so i take it that in your

624
00:23:14,000 --> 00:23:17,120
system um so the key is the secret the

625
00:23:17,120 --> 00:23:19,200
keys that you use to encrypt data and so

626
00:23:19,200 --> 00:23:22,240
on these are derived from the hash of

627
00:23:22,240 --> 00:23:24,320
the security monitor right that's how

628
00:23:24,320 --> 00:23:26,720
you kind of bootstrap the everything is

629
00:23:26,720 --> 00:23:28,400
that correct

630
00:23:28,400 --> 00:23:30,080
yes you're referring to the software at

631
00:23:30,080 --> 00:23:32,480
the station right so if that's the case

632
00:23:32,480 --> 00:23:34,320
then let's say that you know somehow i

633
00:23:34,320 --> 00:23:36,080
need to update my security monitor

634
00:23:36,080 --> 00:23:38,240
because there's no problem

635
00:23:38,240 --> 00:23:40,640
how what's your recommendation for so

636
00:23:40,640 --> 00:23:43,520
recovering those uh keys and maybe for

637
00:23:43,520 --> 00:23:46,480
updating in this kind of update process

638
00:23:46,480 --> 00:23:47,360
do you

639
00:23:47,360 --> 00:23:49,120
does it make

640
00:23:49,120 --> 00:23:50,159
i sense so i

641
00:23:50,159 --> 00:23:52,320
i had running i had run some programs in

642
00:23:52,320 --> 00:23:53,840
my enclave there's some secrets there

643
00:23:53,840 --> 00:23:56,240
right and then now i need to update my

644
00:23:56,240 --> 00:23:58,799
security monitor and then you know then

645
00:23:58,799 --> 00:24:01,520
the next time i boot up in all the keys

646
00:24:01,520 --> 00:24:04,159
that need to be used for decrypt two

647
00:24:04,159 --> 00:24:05,520
secrets

648
00:24:05,520 --> 00:24:06,960
this is different

649
00:24:06,960 --> 00:24:09,440
we recommend that you store your secrets

650
00:24:09,440 --> 00:24:11,760
on the same remote system that you use

651
00:24:11,760 --> 00:24:13,039
to

652
00:24:13,039 --> 00:24:14,559
authenticate the enclave when you do

653
00:24:14,559 --> 00:24:16,159
software at the station

654
00:24:16,159 --> 00:24:18,320
so you recommend some kind of remote

655
00:24:18,320 --> 00:24:20,559
backup and resource so in order to allow

656
00:24:20,559 --> 00:24:22,720
multiple security monitors we don't have

657
00:24:22,720 --> 00:24:24,640
any sort of migration happening because

658
00:24:24,640 --> 00:24:26,000
we don't have any way to have a

659
00:24:26,000 --> 00:24:29,039
relationship between security monitors

660
00:24:29,039 --> 00:24:31,120
at the same time the advantage of having

661
00:24:31,120 --> 00:24:33,039
multiple separate monitors is that you

662
00:24:33,039 --> 00:24:34,480
could have your

663
00:24:34,480 --> 00:24:37,760
monitor trust a public key so we have

664
00:24:37,760 --> 00:24:39,120
our reference implementation of a

665
00:24:39,120 --> 00:24:40,799
security monitor but you could have your

666
00:24:40,799 --> 00:24:42,640
own monitor you could have it trust the

667
00:24:42,640 --> 00:24:44,640
public key and

668
00:24:44,640 --> 00:24:46,799
encrypt all that data under

669
00:24:46,799 --> 00:24:49,279
that public key okay somewhere and then

670
00:24:49,279 --> 00:24:51,279
somehow have another system feed data

671
00:24:51,279 --> 00:24:52,960
into the new monitor okay all right

672
00:24:52,960 --> 00:24:56,640
thank you thank you for the question

673
00:24:56,799 --> 00:24:58,640
hi uh this is just a quick clarification

674
00:24:58,640 --> 00:25:01,039
question so for the cash coloring scheme

675
00:25:01,039 --> 00:25:03,360
are you using a static partitioning or

676
00:25:03,360 --> 00:25:05,200
is this changed based on the program's

677
00:25:05,200 --> 00:25:07,279
usage of memory that's a great question

678
00:25:07,279 --> 00:25:08,720
thank you very much so the question was

679
00:25:08,720 --> 00:25:11,679
is the cache partitioning scheme static

680
00:25:11,679 --> 00:25:13,520
there is a static component in the sense

681
00:25:13,520 --> 00:25:16,159
that memory is statically assigned

682
00:25:16,159 --> 00:25:18,480
statically split up into dram regions

683
00:25:18,480 --> 00:25:21,600
but the operating system gets to

684
00:25:21,600 --> 00:25:23,440
assign these dram regions either to

685
00:25:23,440 --> 00:25:25,279
itself and it's untrusted applications

686
00:25:25,279 --> 00:25:27,440
or to various enclaves and this

687
00:25:27,440 --> 00:25:30,159
assignment changes at runtime to adapt

688
00:25:30,159 --> 00:25:32,320
to various workloads okay all right

689
00:25:32,320 --> 00:25:34,559
thanks

690
00:25:34,799 --> 00:25:36,240
for name microsoft research i have a

691
00:25:36,240 --> 00:25:38,640
related questions so how do you enforce

692
00:25:38,640 --> 00:25:40,320
the page coloring and

693
00:25:40,320 --> 00:25:41,760
to what extent is it covered by the

694
00:25:41,760 --> 00:25:43,679
remote station

695
00:25:43,679 --> 00:25:45,279
uh so the first question was how do we

696
00:25:45,279 --> 00:25:47,600
enforce the page coloring and the second

697
00:25:47,600 --> 00:25:49,919
question whether it is covered by remote

698
00:25:49,919 --> 00:25:51,520
attestations or just controlled

699
00:25:51,520 --> 00:25:52,960
operating system

700
00:25:52,960 --> 00:25:54,320
sorry

701
00:25:54,320 --> 00:25:56,480
without the remote attack station is

702
00:25:56,480 --> 00:25:58,960
good enough to cover to check that

703
00:25:58,960 --> 00:26:00,480
page coloring was enforced on the

704
00:26:00,480 --> 00:26:02,000
machine so

705
00:26:02,000 --> 00:26:03,919
remote at the station is completely

706
00:26:03,919 --> 00:26:06,320
separate from page coloring and

707
00:26:06,320 --> 00:26:07,840
basically if you trust the security

708
00:26:07,840 --> 00:26:09,760
monitor to do page coloring correctly

709
00:26:09,760 --> 00:26:12,000
and to enforce it then you can trust the

710
00:26:12,000 --> 00:26:14,240
remote as the station's results but the

711
00:26:14,240 --> 00:26:16,080
first question is very interesting how

712
00:26:16,080 --> 00:26:18,480
do we enforce page

713
00:26:18,480 --> 00:26:19,679
coloring

714
00:26:19,679 --> 00:26:20,880
so

715
00:26:20,880 --> 00:26:24,640
uh let me see if i have this right here

716
00:26:24,640 --> 00:26:26,720
so this is what that looks like from a

717
00:26:26,720 --> 00:26:28,480
software perspective there are some

718
00:26:28,480 --> 00:26:30,240
hardware registers that the security

719
00:26:30,240 --> 00:26:32,159
monitor gets to configure

720
00:26:32,159 --> 00:26:36,400
and basically these registers say

721
00:26:36,400 --> 00:26:38,159
if you're running in enclave mode or if

722
00:26:38,159 --> 00:26:40,080
you're not running in enclave mode they

723
00:26:40,080 --> 00:26:41,840
identify the two page tables the

724
00:26:41,840 --> 00:26:43,440
enclaves page tables and then the

725
00:26:43,440 --> 00:26:45,520
operating systems page tables

726
00:26:45,520 --> 00:26:48,000
they say which virtual memory address

727
00:26:48,000 --> 00:26:50,960
range maps to the enclave page tables

728
00:26:50,960 --> 00:26:52,880
and then there are two bitmaps of dram

729
00:26:52,880 --> 00:26:55,760
regions and there's a bitmap for os

730
00:26:55,760 --> 00:26:58,480
owned dram regions and there is a bitmap

731
00:26:58,480 --> 00:27:01,440
for enclave on dram regions

732
00:27:01,440 --> 00:27:02,559
and

733
00:27:02,559 --> 00:27:04,400
the security monitor is responsible for

734
00:27:04,400 --> 00:27:06,240
keeping track of which regions belong to

735
00:27:06,240 --> 00:27:08,880
whom and for setting these registers and

736
00:27:08,880 --> 00:27:12,400
then these registers feed into our

737
00:27:12,400 --> 00:27:15,120
hardware modifications to the

738
00:27:15,120 --> 00:27:18,080
page miss handler and our modifications

739
00:27:18,080 --> 00:27:19,600
don't change the core of the page miss

740
00:27:19,600 --> 00:27:21,760
handler we don't touch the finite state

741
00:27:21,760 --> 00:27:24,320
machine there we just modify the inputs

742
00:27:24,320 --> 00:27:25,919
and then we modify

743
00:27:25,919 --> 00:27:28,480
uh so we filtered the results of the

744
00:27:28,480 --> 00:27:31,679
dram reads that the pmh issues

745
00:27:31,679 --> 00:27:32,399
so

746
00:27:32,399 --> 00:27:34,480
this looks this sounds really bad but

747
00:27:34,480 --> 00:27:36,720
actually the circuits are super simple

748
00:27:36,720 --> 00:27:39,360
so this is one circuit and this is the

749
00:27:39,360 --> 00:27:41,279
other circuit and the fact that they fit

750
00:27:41,279 --> 00:27:43,039
on slides

751
00:27:43,039 --> 00:27:45,360
is pretty good news to me

752
00:27:45,360 --> 00:27:47,760
is it in the paper yes okay

753
00:27:47,760 --> 00:27:49,679
all the figures are in the paper okay

754
00:27:49,679 --> 00:27:53,399
thank you very much

755
00:27:55,700 --> 00:27:58,859
[Applause]

