1
00:00:10,480 --> 00:00:12,719
so hello everyone

2
00:00:12,719 --> 00:00:15,360
i'm yusra from syracuse university and

3
00:00:15,360 --> 00:00:17,840
today i'm presenting my paper harvesting

4
00:00:17,840 --> 00:00:20,320
inconsistent security configuration in

5
00:00:20,320 --> 00:00:23,039
custom android roms

6
00:00:23,039 --> 00:00:25,279
so as we know the open nature of android

7
00:00:25,279 --> 00:00:27,359
ecosystem has laid the foundation for a

8
00:00:27,359 --> 00:00:30,400
highly fragmented operating system

9
00:00:30,400 --> 00:00:32,000
the osp have been aggressively

10
00:00:32,000 --> 00:00:33,200
customized by everyone in the

11
00:00:33,200 --> 00:00:36,320
customization chain

12
00:00:36,320 --> 00:00:38,559
vendors and hardware manufacturers

13
00:00:38,559 --> 00:00:40,320
careers are free to build upon the

14
00:00:40,320 --> 00:00:42,719
baseline to

15
00:00:42,719 --> 00:00:45,039
to customize the devices for different

16
00:00:45,039 --> 00:00:47,600
models and regions

17
00:00:47,600 --> 00:00:48,800
for example

18
00:00:48,800 --> 00:00:51,360
vendors might add new system apps modify

19
00:00:51,360 --> 00:00:52,960
existing ones

20
00:00:52,960 --> 00:00:55,440
and also they might even change the

21
00:00:55,440 --> 00:00:57,600
framework itself to include more

22
00:00:57,600 --> 00:00:59,760
sophisticated features and services a

23
00:00:59,760 --> 00:01:01,920
prominent example is samsung's nox which

24
00:01:01,920 --> 00:01:02,800
is

25
00:01:02,800 --> 00:01:05,280
a multi-layer security platform that

26
00:01:05,280 --> 00:01:06,479
allows

27
00:01:06,479 --> 00:01:10,479
sophisticated security features to users

28
00:01:10,560 --> 00:01:12,479
what's further complicating the process

29
00:01:12,479 --> 00:01:15,360
is the fast pace with which the osp

30
00:01:15,360 --> 00:01:18,000
updates its os versions in fact since

31
00:01:18,000 --> 00:01:19,759
2008

32
00:01:19,759 --> 00:01:22,960
there is 23 different asp

33
00:01:22,960 --> 00:01:26,320
different versions

34
00:01:26,320 --> 00:01:27,680
so here are some of the facts about

35
00:01:27,680 --> 00:01:29,759
android fragmentation

36
00:01:29,759 --> 00:01:32,320
this figure is from open source open

37
00:01:32,320 --> 00:01:33,520
signal

38
00:01:33,520 --> 00:01:35,680
and it shows how the market is divided

39
00:01:35,680 --> 00:01:38,400
in terms of device vendors

40
00:01:38,400 --> 00:01:41,520
so here there is in august 2015 there

41
00:01:41,520 --> 00:01:44,240
was more than 1 200 distinct device

42
00:01:44,240 --> 00:01:45,920
models where the majority belongs to

43
00:01:45,920 --> 00:01:47,119
samsung

44
00:01:47,119 --> 00:01:51,040
each vendor is further divided into

45
00:01:51,040 --> 00:01:53,040
different models

46
00:01:53,040 --> 00:01:54,640
the second figure shows that the

47
00:01:54,640 --> 00:01:56,799
operating system itself is highly

48
00:01:56,799 --> 00:01:58,799
fragmented so at each point of time

49
00:01:58,799 --> 00:02:00,719
there might exist more than one single

50
00:02:00,719 --> 00:02:03,919
version at a time running

51
00:02:04,960 --> 00:02:07,119
well thing to know here is that android

52
00:02:07,119 --> 00:02:09,840
customization is not well guided it's

53
00:02:09,840 --> 00:02:14,160
unregulated and decentralized

54
00:02:14,160 --> 00:02:15,920
so because of that definitely

55
00:02:15,920 --> 00:02:17,680
compatibility and portability issues

56
00:02:17,680 --> 00:02:20,160
might arise but now an app developer

57
00:02:20,160 --> 00:02:21,920
have to make sure that his app works

58
00:02:21,920 --> 00:02:23,120
seamlessly

59
00:02:23,120 --> 00:02:24,480
across all

60
00:02:24,480 --> 00:02:27,280
different hardware and api versions

61
00:02:27,280 --> 00:02:28,959
which is not really feasible in real

62
00:02:28,959 --> 00:02:30,000
life

63
00:02:30,000 --> 00:02:31,440
and

64
00:02:31,440 --> 00:02:34,319
google advises new security updates each

65
00:02:34,319 --> 00:02:35,599
month

66
00:02:35,599 --> 00:02:37,680
and those updates might not be really

67
00:02:37,680 --> 00:02:39,840
pushed by device vendor to older devices

68
00:02:39,840 --> 00:02:41,920
because then they are focusing on newer

69
00:02:41,920 --> 00:02:44,000
ones

70
00:02:44,000 --> 00:02:46,720
so update problem is one of the security

71
00:02:46,720 --> 00:02:50,480
security effects of vendor customization

72
00:02:50,480 --> 00:02:52,319
but the android literature is full of

73
00:02:52,319 --> 00:02:55,440
other examples that show that vendors

74
00:02:55,440 --> 00:02:57,040
introduce a lot of

75
00:02:57,040 --> 00:02:58,640
problems

76
00:02:58,640 --> 00:03:00,319
at the linux layer

77
00:03:00,319 --> 00:03:02,640
the work called perils of fragmentation

78
00:03:02,640 --> 00:03:05,440
shows that device drivers are

79
00:03:05,440 --> 00:03:07,040
the protection of device drivers might

80
00:03:07,040 --> 00:03:09,360
be changed by vendors and the protection

81
00:03:09,360 --> 00:03:10,800
might be actually weaker than the

82
00:03:10,800 --> 00:03:14,879
original ones on corresponding usb

83
00:03:14,879 --> 00:03:16,959
the work impact vendor customization

84
00:03:16,959 --> 00:03:19,120
assesses the security

85
00:03:19,120 --> 00:03:20,080
of

86
00:03:20,080 --> 00:03:22,239
vendor pre-related apps and shows that

87
00:03:22,239 --> 00:03:23,599
it's actually riddled with security

88
00:03:23,599 --> 00:03:24,799
flows such as

89
00:03:24,799 --> 00:03:26,799
permission redelegation content looks

90
00:03:26,799 --> 00:03:31,640
and content leaks and pollution attacks

91
00:03:33,360 --> 00:03:35,680
um

92
00:03:35,760 --> 00:03:37,680
in the context of inter-app

93
00:03:37,680 --> 00:03:39,440
communication model

94
00:03:39,440 --> 00:03:41,200
a vendor might decide to remove an

95
00:03:41,200 --> 00:03:42,799
existing app

96
00:03:42,799 --> 00:03:44,640
or he might decide to change the

97
00:03:44,640 --> 00:03:46,239
attributes of an app for example here

98
00:03:46,239 --> 00:03:48,480
application a is renamed to application

99
00:03:48,480 --> 00:03:51,840
a prompt b prime

100
00:03:51,840 --> 00:03:54,560
and now application a which was uh

101
00:03:54,560 --> 00:03:56,720
referring application b

102
00:03:56,720 --> 00:03:58,799
is not anymore referring to an existing

103
00:03:58,799 --> 00:04:00,640
attribute so now the reference to

104
00:04:00,640 --> 00:04:03,519
application b and application c

105
00:04:03,519 --> 00:04:05,040
is hanging

106
00:04:05,040 --> 00:04:07,120
so the word our work

107
00:04:07,120 --> 00:04:08,640
shows that

108
00:04:08,640 --> 00:04:10,400
malicious app can squad this missing

109
00:04:10,400 --> 00:04:15,400
attributes to contact several damages

110
00:04:15,920 --> 00:04:17,519
in this work here we

111
00:04:17,519 --> 00:04:19,839
generally aim to generalize the finance

112
00:04:19,839 --> 00:04:23,199
on existing customization hazards

113
00:04:23,199 --> 00:04:25,199
to come up with

114
00:04:25,199 --> 00:04:26,240
with more

115
00:04:26,240 --> 00:04:28,000
problems that might be introduced by

116
00:04:28,000 --> 00:04:29,759
vendors

117
00:04:29,759 --> 00:04:31,600
all identified vulnerabilities and

118
00:04:31,600 --> 00:04:33,360
android customization are due to the

119
00:04:33,360 --> 00:04:34,880
fact that vendors might alter

120
00:04:34,880 --> 00:04:37,280
configuration at a specific layer

121
00:04:37,280 --> 00:04:39,360
but despite the serious

122
00:04:39,360 --> 00:04:41,040
consequences there is no work that

123
00:04:41,040 --> 00:04:43,120
systematically tries to find

124
00:04:43,120 --> 00:04:45,040
all security configuration changes

125
00:04:45,040 --> 00:04:47,520
caused by vendor customization

126
00:04:47,520 --> 00:04:49,919
so our question is can we systematically

127
00:04:49,919 --> 00:04:52,400
identify all security configurations at

128
00:04:52,400 --> 00:04:54,400
each layer

129
00:04:54,400 --> 00:04:56,880
so again if we map the existing work

130
00:04:56,880 --> 00:04:59,440
to the android layered architecture what

131
00:04:59,440 --> 00:05:01,120
we want to do is generalize from this

132
00:05:01,120 --> 00:05:03,360
works and then

133
00:05:03,360 --> 00:05:05,759
try to see if from those generalization

134
00:05:05,759 --> 00:05:08,320
we could find more secure risk that have

135
00:05:08,320 --> 00:05:11,440
have not been yet discovered

136
00:05:11,440 --> 00:05:13,199
so basically we make the first attempt

137
00:05:13,199 --> 00:05:15,680
to systematically detect configuration

138
00:05:15,680 --> 00:05:17,440
changes introduced

139
00:05:17,440 --> 00:05:20,400
by parties in the customization chain

140
00:05:20,400 --> 00:05:23,520
and our key intuition is by comparing

141
00:05:23,520 --> 00:05:25,440
custom device to similar devices from

142
00:05:25,440 --> 00:05:28,400
different vendors carriers and regions

143
00:05:28,400 --> 00:05:29,919
we might be able to find and

144
00:05:29,919 --> 00:05:31,840
intentionally introduce configuration

145
00:05:31,840 --> 00:05:34,240
changes

146
00:05:34,240 --> 00:05:35,919
so the works that have been studied so

147
00:05:35,919 --> 00:05:37,520
far addresses

148
00:05:37,520 --> 00:05:40,320
if vendors change the access control on

149
00:05:40,320 --> 00:05:43,039
system apps or the pearl's fragmentation

150
00:05:43,039 --> 00:05:44,880
addresses event or change the access

151
00:05:44,880 --> 00:05:47,840
control at drivers what about other

152
00:05:47,840 --> 00:05:50,400
access control applied at other layers

153
00:05:50,400 --> 00:05:52,320
can we check if they're the same across

154
00:05:52,320 --> 00:05:54,720
all custom roms

155
00:05:54,720 --> 00:05:56,479
so we propose to leverage a differential

156
00:05:56,479 --> 00:05:58,800
analysis among a large corpus of android

157
00:05:58,800 --> 00:06:00,560
roms

158
00:06:00,560 --> 00:06:02,479
customized android drums

159
00:06:02,479 --> 00:06:03,199
and

160
00:06:03,199 --> 00:06:05,440
this is our methodology that we followed

161
00:06:05,440 --> 00:06:08,160
so in the first phase we rely on our

162
00:06:08,160 --> 00:06:09,440
domain knowledge and android

163
00:06:09,440 --> 00:06:10,960
documentation

164
00:06:10,960 --> 00:06:12,560
to come up with a set of features that

165
00:06:12,560 --> 00:06:14,479
if altered and intentionally might

166
00:06:14,479 --> 00:06:16,800
introduce security problems

167
00:06:16,800 --> 00:06:18,720
and then we check in the second phase we

168
00:06:18,720 --> 00:06:20,400
try to generate those features in the

169
00:06:20,400 --> 00:06:22,240
second phase from our custom android

170
00:06:22,240 --> 00:06:23,520
drums

171
00:06:23,520 --> 00:06:25,759
and in the third phase we performed

172
00:06:25,759 --> 00:06:27,680
definition differential analysis to find

173
00:06:27,680 --> 00:06:29,360
all security configurations that have

174
00:06:29,360 --> 00:06:31,360
been changed across versions so if we

175
00:06:31,360 --> 00:06:33,280
find that one single image has different

176
00:06:33,280 --> 00:06:35,360
attributes compared to other images then

177
00:06:35,360 --> 00:06:36,639
reflect that

178
00:06:36,639 --> 00:06:38,319
but we believe that those changes might

179
00:06:38,319 --> 00:06:41,120
not actually be problematic all the time

180
00:06:41,120 --> 00:06:44,080
so that's why in the last last phase we

181
00:06:44,080 --> 00:06:45,759
came up with a set of

182
00:06:45,759 --> 00:06:47,280
patterns that we think if an

183
00:06:47,280 --> 00:06:49,280
inconsistency follows them

184
00:06:49,280 --> 00:06:52,160
then those inconsistencies are actually

185
00:06:52,160 --> 00:06:54,639
dangerous

186
00:06:55,680 --> 00:06:57,680
so during the futurist extraction we

187
00:06:57,680 --> 00:06:59,199
want to find all

188
00:06:59,199 --> 00:07:02,160
features that are securely relevant and

189
00:07:02,160 --> 00:07:06,960
customizable by vendors or other parties

190
00:07:06,960 --> 00:07:08,880
so to find those features systematically

191
00:07:08,880 --> 00:07:10,080
we

192
00:07:10,080 --> 00:07:12,000
started from the android layered

193
00:07:12,000 --> 00:07:13,759
architecture

194
00:07:13,759 --> 00:07:16,319
so at the framework layer and

195
00:07:16,319 --> 00:07:18,479
the system services can rely on the

196
00:07:18,479 --> 00:07:21,599
caller's permission or cooler's uid or

197
00:07:21,599 --> 00:07:24,000
package name package signature to check

198
00:07:24,000 --> 00:07:25,919
if the caller has a right to invoke

199
00:07:25,919 --> 00:07:27,199
specific

200
00:07:27,199 --> 00:07:28,319
api

201
00:07:28,319 --> 00:07:31,599
and at the linux kernel um the linux

202
00:07:31,599 --> 00:07:33,599
relies on the discretionary access

203
00:07:33,599 --> 00:07:34,800
control

204
00:07:34,800 --> 00:07:37,120
that is uids and gids to check if the

205
00:07:37,120 --> 00:07:38,319
caller has the right to access a

206
00:07:38,319 --> 00:07:39,520
resource

207
00:07:39,520 --> 00:07:41,759
and application can make sure that its

208
00:07:41,759 --> 00:07:44,319
components are safe and protected

209
00:07:44,319 --> 00:07:46,080
through several mechanism first they can

210
00:07:46,080 --> 00:07:48,160
make the components visible only to

211
00:07:48,160 --> 00:07:50,160
itself or it can require the colors to

212
00:07:50,160 --> 00:07:51,599
have specific

213
00:07:51,599 --> 00:07:53,039
uid

214
00:07:53,039 --> 00:07:55,199
or the color to have specific permission

215
00:07:55,199 --> 00:07:58,160
check or it should be system for example

216
00:07:58,160 --> 00:08:01,599
the case of protected broadcast

217
00:08:02,160 --> 00:08:04,240
so basically this this is summary of all

218
00:08:04,240 --> 00:08:06,400
the features that we have extracted we

219
00:08:06,400 --> 00:08:09,039
don't extract uid and the package name

220
00:08:09,039 --> 00:08:10,400
and package signature because package

221
00:08:10,400 --> 00:08:12,160
name and signature have already been

222
00:08:12,160 --> 00:08:14,720
covered in our hair hunter hair hunter

223
00:08:14,720 --> 00:08:17,039
paper last year

224
00:08:17,039 --> 00:08:19,199
so basically we just tried to extract

225
00:08:19,199 --> 00:08:22,000
the other features

226
00:08:22,400 --> 00:08:24,720
so the first feature that we want to

227
00:08:24,720 --> 00:08:27,759
discuss is permissions

228
00:08:27,759 --> 00:08:29,759
so android allows

229
00:08:29,759 --> 00:08:31,599
android already provides some built-in

230
00:08:31,599 --> 00:08:34,719
permission to protect resources but also

231
00:08:34,719 --> 00:08:36,719
developers are free to

232
00:08:36,719 --> 00:08:38,640
define their own permissions and

233
00:08:38,640 --> 00:08:40,000
permission are assigned different

234
00:08:40,000 --> 00:08:42,000
protection levels based on the resource

235
00:08:42,000 --> 00:08:44,399
that they are trying to protect

236
00:08:44,399 --> 00:08:46,480
signature permission are protecting the

237
00:08:46,480 --> 00:08:48,959
most privileged resources nor dangerous

238
00:08:48,959 --> 00:08:51,680
are protecting less dangerous resources

239
00:08:51,680 --> 00:08:53,600
and normal permission are protected the

240
00:08:53,600 --> 00:08:55,200
very least

241
00:08:55,200 --> 00:08:56,720
privileged resources

242
00:08:56,720 --> 00:09:00,480
so here is how permission is defined

243
00:09:00,480 --> 00:09:02,320
and what we want to answer is can the

244
00:09:02,320 --> 00:09:03,600
same permission hold different

245
00:09:03,600 --> 00:09:06,399
protection levels across two images for

246
00:09:06,399 --> 00:09:10,000
example on the first rom read sms is

247
00:09:10,000 --> 00:09:12,160
protected with a

248
00:09:12,160 --> 00:09:13,920
dangerous level permission dangerous

249
00:09:13,920 --> 00:09:15,440
level protection level

250
00:09:15,440 --> 00:09:17,839
while on the second rom it's protected

251
00:09:17,839 --> 00:09:20,320
with a normal protection level so this

252
00:09:20,320 --> 00:09:22,399
type of inconsistency is quite dangerous

253
00:09:22,399 --> 00:09:24,640
because it means that developers

254
00:09:24,640 --> 00:09:26,240
will be confused first of all because

255
00:09:26,240 --> 00:09:28,080
they don't know what is the permission

256
00:09:28,080 --> 00:09:30,560
meaning and second the result resources

257
00:09:30,560 --> 00:09:32,240
using this permission will be definitely

258
00:09:32,240 --> 00:09:34,640
at risk

259
00:09:34,640 --> 00:09:36,000
the second feature that we want to

260
00:09:36,000 --> 00:09:38,000
extract is gids

261
00:09:38,000 --> 00:09:40,000
so in android certain permission are

262
00:09:40,000 --> 00:09:42,480
mapped to gids that is once an app is

263
00:09:42,480 --> 00:09:44,240
granted that

264
00:09:44,240 --> 00:09:46,080
permission it will be running with that

265
00:09:46,080 --> 00:09:47,279
gid

266
00:09:47,279 --> 00:09:49,920
attached to its process for example here

267
00:09:49,920 --> 00:09:52,480
if an app can get this

268
00:09:52,480 --> 00:09:54,080
permission isat permission it will be

269
00:09:54,080 --> 00:09:56,240
run in with the system gid attach the

270
00:09:56,240 --> 00:09:58,080
process and basically that would allow

271
00:09:58,080 --> 00:10:00,320
you to access all drivers that are

272
00:10:00,320 --> 00:10:02,800
available to the system gid

273
00:10:02,800 --> 00:10:04,800
of course we know that system gid is

274
00:10:04,800 --> 00:10:06,560
quite dangerous so that's why the system

275
00:10:06,560 --> 00:10:09,279
will protect with the isa permission

276
00:10:09,279 --> 00:10:11,920
with protection level signature so only

277
00:10:11,920 --> 00:10:13,440
system apps can be granted that

278
00:10:13,440 --> 00:10:17,120
permission and thus get the gid system

279
00:10:17,120 --> 00:10:19,279
my question is can vendors

280
00:10:19,279 --> 00:10:22,000
in define problematic gid to permission

281
00:10:22,000 --> 00:10:24,079
mappings and thus leading to downgrading

282
00:10:24,079 --> 00:10:27,199
the gid privilege

283
00:10:27,279 --> 00:10:29,200
so for example on the first rom we have

284
00:10:29,200 --> 00:10:31,600
the same gid system mapped to izat and

285
00:10:31,600 --> 00:10:34,640
isaac is signature level while on rom 2

286
00:10:34,640 --> 00:10:36,560
the vendor introduced another permission

287
00:10:36,560 --> 00:10:38,560
for example custom permission here but

288
00:10:38,560 --> 00:10:40,399
that permission is mapped to a normal

289
00:10:40,399 --> 00:10:42,640
protection level permission

290
00:10:42,640 --> 00:10:44,079
permission

291
00:10:44,079 --> 00:10:46,560
so in that case a normal

292
00:10:46,560 --> 00:10:48,399
user i mean a third-party app can

293
00:10:48,399 --> 00:10:50,560
actually be granted the system

294
00:10:50,560 --> 00:10:52,240
uh gid

295
00:10:52,240 --> 00:10:54,800
even if only when it's uh request a

296
00:10:54,800 --> 00:10:58,320
normal uh permission level uh

297
00:10:58,320 --> 00:11:00,720
protection of a permission

298
00:11:00,720 --> 00:11:02,959
so this is definitely quite dangerous as

299
00:11:02,959 --> 00:11:04,640
the gid can be acquired with less

300
00:11:04,640 --> 00:11:07,680
privileged permissions

301
00:11:08,240 --> 00:11:09,839
protected broadcast is another feature

302
00:11:09,839 --> 00:11:11,279
that we look at

303
00:11:11,279 --> 00:11:12,320
so

304
00:11:12,320 --> 00:11:14,560
an application can make sure that only

305
00:11:14,560 --> 00:11:18,000
the system is is able to invoke certain

306
00:11:18,000 --> 00:11:20,560
broadcast receivers within it

307
00:11:20,560 --> 00:11:22,560
so now uh

308
00:11:22,560 --> 00:11:24,000
only system can invoke it but

309
00:11:24,000 --> 00:11:28,800
third-party uh application cannot

310
00:11:28,800 --> 00:11:30,880
and this is how protector broadcast can

311
00:11:30,880 --> 00:11:32,160
be defined

312
00:11:32,160 --> 00:11:34,320
so here we have a boot completed

313
00:11:34,320 --> 00:11:36,480
protected broadcast definition and to

314
00:11:36,480 --> 00:11:38,240
use this protect the broadcast an app

315
00:11:38,240 --> 00:11:39,200
can

316
00:11:39,200 --> 00:11:41,040
declare this action within the intel

317
00:11:41,040 --> 00:11:43,040
filter of certain receiver here we have

318
00:11:43,040 --> 00:11:44,720
receiver a is listening listening for

319
00:11:44,720 --> 00:11:46,800
the action

320
00:11:46,800 --> 00:11:48,640
and our question is are protected

321
00:11:48,640 --> 00:11:51,279
broadcast the same across all images

322
00:11:51,279 --> 00:11:53,600
for example

323
00:11:53,600 --> 00:11:55,360
and if a protected broadcast is not

324
00:11:55,360 --> 00:11:57,440
defined is it still used within that

325
00:11:57,440 --> 00:11:59,760
image for example on the rom 1

326
00:11:59,760 --> 00:12:01,920
boot completed is is defined and it's

327
00:12:01,920 --> 00:12:04,320
used by the receiver a

328
00:12:04,320 --> 00:12:05,920
but on round 2

329
00:12:05,920 --> 00:12:07,040
the

330
00:12:07,040 --> 00:12:09,360
booth completed protector broadcast is

331
00:12:09,360 --> 00:12:11,440
not defined at all however we see here

332
00:12:11,440 --> 00:12:14,160
that receiver a is still defined in this

333
00:12:14,160 --> 00:12:15,600
app and it's still listening to that

334
00:12:15,600 --> 00:12:17,519
protected broadcast what it thought it

335
00:12:17,519 --> 00:12:19,200
was a protected broadcast

336
00:12:19,200 --> 00:12:21,120
so this is quite dangerous as now

337
00:12:21,120 --> 00:12:22,880
receiver a can be invoked by any

338
00:12:22,880 --> 00:12:25,839
third-party application

339
00:12:27,200 --> 00:12:29,360
um another feature that we looked at is

340
00:12:29,360 --> 00:12:31,360
component visibility so

341
00:12:31,360 --> 00:12:33,279
components can protect

342
00:12:33,279 --> 00:12:35,920
themselves by making themselves only

343
00:12:35,920 --> 00:12:38,399
evocable by

344
00:12:38,399 --> 00:12:40,720
by application with the same

345
00:12:40,720 --> 00:12:43,440
signature or

346
00:12:43,440 --> 00:12:45,680
you through the exported flag

347
00:12:45,680 --> 00:12:47,040
but do components have the same

348
00:12:47,040 --> 00:12:49,600
visibility across all images

349
00:12:49,600 --> 00:12:51,680
so for example in rom one it's this

350
00:12:51,680 --> 00:12:54,480
component is exported while on rom 2

351
00:12:54,480 --> 00:12:57,200
it's not exported

352
00:12:57,200 --> 00:12:59,680
so this can help us

353
00:12:59,680 --> 00:13:01,519
detect and intentionally expose

354
00:13:01,519 --> 00:13:03,200
components

355
00:13:03,200 --> 00:13:05,760
so similarly we looked at a component

356
00:13:05,760 --> 00:13:08,079
protection so components can also

357
00:13:08,079 --> 00:13:09,519
require the caller to have certain

358
00:13:09,519 --> 00:13:13,120
permissions but are these

359
00:13:13,120 --> 00:13:15,600
permission protection the same across

360
00:13:15,600 --> 00:13:17,120
images for example here we have the

361
00:13:17,120 --> 00:13:19,440
service a is protected with permission a

362
00:13:19,440 --> 00:13:21,360
on the first round but it's protected

363
00:13:21,360 --> 00:13:25,360
with permission b on either on rom2

364
00:13:26,320 --> 00:13:28,480
so for the data generation we aim to

365
00:13:28,480 --> 00:13:30,000
conduct large-scale differential

366
00:13:30,000 --> 00:13:32,320
analysis to find inconsistencies

367
00:13:32,320 --> 00:13:34,320
and for that purpose we have collected

368
00:13:34,320 --> 00:13:36,639
591 images customized for different

369
00:13:36,639 --> 00:13:37,760
purposes

370
00:13:37,760 --> 00:13:40,480
we have images from 11 distinct vendors

371
00:13:40,480 --> 00:13:42,480
and from different versions we have

372
00:13:42,480 --> 00:13:44,240
developed a tool droid diff that would

373
00:13:44,240 --> 00:13:46,240
extract all the security attributes from

374
00:13:46,240 --> 00:13:47,920
the images and perform differential

375
00:13:47,920 --> 00:13:49,760
analysis

376
00:13:49,760 --> 00:13:51,440
so here is an example of an

377
00:13:51,440 --> 00:13:53,440
inconsistency that we want to reveal

378
00:13:53,440 --> 00:13:56,320
through our analysis we have two images

379
00:13:56,320 --> 00:14:00,399
xiaomi uh me to a run in 4.1.1 and

380
00:14:00,399 --> 00:14:04,079
xiaomi redmi 1 run in 4.4.2

381
00:14:04,079 --> 00:14:06,399
as we see from this map there are three

382
00:14:06,399 --> 00:14:07,839
uh attributes

383
00:14:07,839 --> 00:14:09,440
three features that have different

384
00:14:09,440 --> 00:14:11,760
values if you look at the camera gid

385
00:14:11,760 --> 00:14:13,680
that's the most dangerous one on the

386
00:14:13,680 --> 00:14:15,199
first image it can be acquired with

387
00:14:15,199 --> 00:14:16,560
dangerous

388
00:14:16,560 --> 00:14:18,560
permission but on the second image it

389
00:14:18,560 --> 00:14:19,839
can be acquired with the normal

390
00:14:19,839 --> 00:14:21,760
permission that is the on the second

391
00:14:21,760 --> 00:14:24,480
image and a third-party application can

392
00:14:24,480 --> 00:14:26,639
access the camera driver with a normal

393
00:14:26,639 --> 00:14:28,959
permission

394
00:14:28,959 --> 00:14:31,760
which is quite dangerous

395
00:14:31,760 --> 00:14:32,560
so

396
00:14:32,560 --> 00:14:34,240
we want to reveal three levels of

397
00:14:34,240 --> 00:14:36,000
information about any detected

398
00:14:36,000 --> 00:14:38,959
inconsistency so who's the responsible

399
00:14:38,959 --> 00:14:41,760
party what is the overall situation and

400
00:14:41,760 --> 00:14:43,199
what are the potential dangerous

401
00:14:43,199 --> 00:14:46,880
patterns behind these inconsistencies

402
00:14:46,880 --> 00:14:49,519
meaningful inconsistency should give us

403
00:14:49,519 --> 00:14:51,680
insights about who caused it

404
00:14:51,680 --> 00:14:54,079
for exa for example is an inconsistent

405
00:14:54,079 --> 00:14:56,480
due to updating the os version or

406
00:14:56,480 --> 00:14:59,279
customizing model for specific region or

407
00:14:59,279 --> 00:15:00,480
change in

408
00:15:00,480 --> 00:15:02,560
a vendor

409
00:15:02,560 --> 00:15:04,399
so for that purpose we clustered our

410
00:15:04,399 --> 00:15:06,880
images based on common criteria and

411
00:15:06,880 --> 00:15:09,120
we've proposed five sample selection

412
00:15:09,120 --> 00:15:11,519
algorithm for this purpose

413
00:15:11,519 --> 00:15:14,079
for the first one cross-version analysis

414
00:15:14,079 --> 00:15:16,720
we want to find if upgrading the os

415
00:15:16,720 --> 00:15:18,000
would introduce inconsistent

416
00:15:18,000 --> 00:15:20,240
inconsistencies so for that we need to

417
00:15:20,240 --> 00:15:24,800
compare devices within the same model

418
00:15:25,120 --> 00:15:27,199
uh and then for cross vendor analysis we

419
00:15:27,199 --> 00:15:28,959
want to change check if a change of

420
00:15:28,959 --> 00:15:30,880
model introduces some different features

421
00:15:30,880 --> 00:15:32,959
for example an htc uh phone has

422
00:15:32,959 --> 00:15:34,639
different features compared to samsung

423
00:15:34,639 --> 00:15:35,519
phone

424
00:15:35,519 --> 00:15:37,519
and for cross model analysis we want to

425
00:15:37,519 --> 00:15:38,839
find if

426
00:15:38,839 --> 00:15:42,240
um if models within the same vendors

427
00:15:42,240 --> 00:15:43,839
also have different features for example

428
00:15:43,839 --> 00:15:46,399
is the samsung h6 different prompts on

429
00:15:46,399 --> 00:15:48,800
s5 or s4

430
00:15:48,800 --> 00:15:50,560
given that they are running the same os

431
00:15:50,560 --> 00:15:52,000
version

432
00:15:52,000 --> 00:15:53,600
for cross region and cross carrier

433
00:15:53,600 --> 00:15:55,519
analysis we aim also to find

434
00:15:55,519 --> 00:15:57,360
inconsistencies that are due to changing

435
00:15:57,360 --> 00:15:59,759
the carrier or change in the the

436
00:15:59,759 --> 00:16:01,440
region and of course we need to compare

437
00:16:01,440 --> 00:16:03,279
devices running the same model and the

438
00:16:03,279 --> 00:16:06,320
same os version

439
00:16:06,720 --> 00:16:08,639
now the following figure demonstrates

440
00:16:08,639 --> 00:16:11,600
the shows the overall situation in our

441
00:16:11,600 --> 00:16:13,120
collected images

442
00:16:13,120 --> 00:16:14,720
and as we can see here there is a lot of

443
00:16:14,720 --> 00:16:16,320
inconsistencies

444
00:16:16,320 --> 00:16:18,320
that have been detected by our tool the

445
00:16:18,320 --> 00:16:20,320
cross version analysis followed by cross

446
00:16:20,320 --> 00:16:21,920
vendor analysis introduce the higher

447
00:16:21,920 --> 00:16:24,720
number of inconsistencies

448
00:16:24,720 --> 00:16:26,320
to understand what it means let's look

449
00:16:26,320 --> 00:16:29,600
at the the first

450
00:16:29,600 --> 00:16:30,959
first bar here

451
00:16:30,959 --> 00:16:33,600
so here we find that more than 50

452
00:16:33,600 --> 00:16:35,519
percent of the candidate image set

453
00:16:35,519 --> 00:16:38,560
contain at least 4.8 of permissions with

454
00:16:38,560 --> 00:16:40,480
different protection levels

455
00:16:40,480 --> 00:16:42,320
that is permission holds a protection

456
00:16:42,320 --> 00:16:45,120
level let's say normal in one on one

457
00:16:45,120 --> 00:16:47,040
image but it holds another

458
00:16:47,040 --> 00:16:49,120
protection level on another image

459
00:16:49,120 --> 00:16:51,440
and the number is around the 30

460
00:16:51,440 --> 00:16:53,920
permissions

461
00:16:55,600 --> 00:16:56,320
so

462
00:16:56,320 --> 00:16:58,160
we believe that not not all

463
00:16:58,160 --> 00:17:00,160
inconsistencies are actually dangerous

464
00:17:00,160 --> 00:17:02,639
but if they follow specific patterns

465
00:17:02,639 --> 00:17:05,280
then they are definitely dangerous so we

466
00:17:05,280 --> 00:17:07,039
came up with a set of patterns and then

467
00:17:07,039 --> 00:17:08,799
through investigating the results of our

468
00:17:08,799 --> 00:17:10,000
analysis

469
00:17:10,000 --> 00:17:12,240
we want to reveal if inconsistencies

470
00:17:12,240 --> 00:17:14,400
follows follow those patterns and if

471
00:17:14,400 --> 00:17:16,880
they do then they are pro

472
00:17:16,880 --> 00:17:21,120
problem uh probably problematic

473
00:17:21,280 --> 00:17:24,640
so the first pattern is um

474
00:17:24,640 --> 00:17:26,799
if permission goes from normal to

475
00:17:26,799 --> 00:17:28,480
signature protection level then it's

476
00:17:28,480 --> 00:17:31,039
definitely problematic

477
00:17:31,039 --> 00:17:33,919
so on average we found that 4.8 of

478
00:17:33,919 --> 00:17:36,240
common permissions have a

479
00:17:36,240 --> 00:17:38,320
protection mismatch but we're not sure

480
00:17:38,320 --> 00:17:39,760
which combination of permission is the

481
00:17:39,760 --> 00:17:41,120
most frequent

482
00:17:41,120 --> 00:17:44,320
so we analyzed our inconsistencies and

483
00:17:44,320 --> 00:17:46,960
we found that they're actually normal to

484
00:17:46,960 --> 00:17:48,240
signature

485
00:17:48,240 --> 00:17:51,679
combination is the most common

486
00:17:51,679 --> 00:17:53,360
so an example

487
00:17:53,360 --> 00:17:55,600
is this permission sim card

488
00:17:55,600 --> 00:17:58,240
authentication it holds signature

489
00:17:58,240 --> 00:17:59,120
and

490
00:17:59,120 --> 00:18:01,679
normal protection on samsung

491
00:18:01,679 --> 00:18:05,280
s4 and sony xperia respectively

492
00:18:05,280 --> 00:18:07,120
so this is quite

493
00:18:07,120 --> 00:18:09,360
confusing to developers because he might

494
00:18:09,360 --> 00:18:11,280
use this type of permission to

495
00:18:11,280 --> 00:18:13,039
protect a dangerous resource but it

496
00:18:13,039 --> 00:18:15,039
actually means

497
00:18:15,039 --> 00:18:19,200
normal protection on certain images

498
00:18:20,080 --> 00:18:23,120
so another pattern that we thought of is

499
00:18:23,120 --> 00:18:25,360
usage of specified protection level is

500
00:18:25,360 --> 00:18:27,360
not well understood

501
00:18:27,360 --> 00:18:29,440
so android allows developers to define

502
00:18:29,440 --> 00:18:31,440
permissions with a specified protection

503
00:18:31,440 --> 00:18:33,840
level and in that case the default value

504
00:18:33,840 --> 00:18:36,320
assigned is normal but

505
00:18:36,320 --> 00:18:37,919
we find that it's not clear whether

506
00:18:37,919 --> 00:18:40,240
developers really intended to use normal

507
00:18:40,240 --> 00:18:43,840
as the protection level

508
00:18:43,840 --> 00:18:46,960
so we analyzed which

509
00:18:46,960 --> 00:18:48,799
protection level is assigned to other

510
00:18:48,799 --> 00:18:49,840
images

511
00:18:49,840 --> 00:18:51,840
for those permission that are defined

512
00:18:51,840 --> 00:18:54,240
within specified protection level on at

513
00:18:54,240 --> 00:18:55,919
least one image and we find that as

514
00:18:55,919 --> 00:18:58,400
specified and signature combination is

515
00:18:58,400 --> 00:19:00,160
the most common that is developer

516
00:19:00,160 --> 00:19:01,760
probably thought that

517
00:19:01,760 --> 00:19:03,440
signature permission level will be

518
00:19:03,440 --> 00:19:05,520
assigned to to those permissions that

519
00:19:05,520 --> 00:19:09,799
are defined with a specified protection

520
00:19:10,480 --> 00:19:13,440
and another pattern that we look in is

521
00:19:13,440 --> 00:19:16,240
gid's privilege might be

522
00:19:16,240 --> 00:19:17,520
downgraded

523
00:19:17,520 --> 00:19:18,880
for this we actually found three

524
00:19:18,880 --> 00:19:20,480
discovered we discovered three

525
00:19:20,480 --> 00:19:22,559
downgraded gids

526
00:19:22,559 --> 00:19:25,280
a system camera and media so system and

527
00:19:25,280 --> 00:19:27,440
media gids are usually

528
00:19:27,440 --> 00:19:30,240
mapped to um

529
00:19:30,240 --> 00:19:32,240
to system or signature level uh

530
00:19:32,240 --> 00:19:34,640
permissions but we find on some specific

531
00:19:34,640 --> 00:19:36,880
images it's they're mapped to normal

532
00:19:36,880 --> 00:19:39,440
permissions which is quite dangerous

533
00:19:39,440 --> 00:19:40,880
now they can be obtained with normal

534
00:19:40,880 --> 00:19:44,400
protection levels on those victim images

535
00:19:44,400 --> 00:19:46,559
so as a result critical drivers can be

536
00:19:46,559 --> 00:19:49,600
accessed because of that

537
00:19:51,280 --> 00:19:54,000
during our analysis of uh the

538
00:19:54,000 --> 00:19:56,640
inconsistencies we found the bug

539
00:19:56,640 --> 00:19:58,640
due to duplicate components

540
00:19:58,640 --> 00:20:01,360
and we reported it to google so

541
00:20:01,360 --> 00:20:03,280
we found that most of inconsistent

542
00:20:03,280 --> 00:20:05,039
broadcast receivers are caused by a

543
00:20:05,039 --> 00:20:08,559
non-safe practice that developers follow

544
00:20:08,559 --> 00:20:09,840
developers

545
00:20:09,840 --> 00:20:11,760
declare duplicate broadcast receiver

546
00:20:11,760 --> 00:20:13,600
names in the same app but give them

547
00:20:13,600 --> 00:20:16,559
different protection for example here

548
00:20:16,559 --> 00:20:18,799
we have two different uh receivers but

549
00:20:18,799 --> 00:20:21,039
they have the same name the developer

550
00:20:21,039 --> 00:20:23,280
wanted to protect the functionality

551
00:20:23,280 --> 00:20:24,960
invoked when sending

552
00:20:24,960 --> 00:20:28,080
um the action reset fail with reboot

553
00:20:28,080 --> 00:20:30,240
permission but he didn't want to protect

554
00:20:30,240 --> 00:20:32,480
the second receiver with any with the

555
00:20:32,480 --> 00:20:34,400
with any protection when sending the

556
00:20:34,400 --> 00:20:37,120
action data router display

557
00:20:37,120 --> 00:20:39,520
so due to a bug in the package manager

558
00:20:39,520 --> 00:20:41,440
service the way in the way it handles

559
00:20:41,440 --> 00:20:43,200
this duplicates component receiver and

560
00:20:43,200 --> 00:20:44,640
its uh

561
00:20:44,640 --> 00:20:47,039
in its mapping permissions we found that

562
00:20:47,039 --> 00:20:49,120
it's possible to bypass any permissions

563
00:20:49,120 --> 00:20:50,960
that are declared on the same on the

564
00:20:50,960 --> 00:20:53,360
first receiver so in this case

565
00:20:53,360 --> 00:20:55,520
we can actually bypass the reboot

566
00:20:55,520 --> 00:20:57,360
permission

567
00:20:57,360 --> 00:21:00,000
in if we want to invoke this receiver

568
00:21:00,000 --> 00:21:03,000
explicitly

569
00:21:04,080 --> 00:21:06,720
so here we summarize all the attacks

570
00:21:06,720 --> 00:21:08,559
that we find based on the on the

571
00:21:08,559 --> 00:21:10,320
analysis of certain

572
00:21:10,320 --> 00:21:12,559
inconsistencies that we found so on

573
00:21:12,559 --> 00:21:15,679
samsung h6 we were able to read all user

574
00:21:15,679 --> 00:21:18,080
emails without any permission

575
00:21:18,080 --> 00:21:20,080
and and that was due to an exposed

576
00:21:20,080 --> 00:21:21,760
content provider

577
00:21:21,760 --> 00:21:24,080
and in samsung s4 were able to reboot

578
00:21:24,080 --> 00:21:25,840
the phone without any permission which

579
00:21:25,840 --> 00:21:28,559
is this action is actually restricted to

580
00:21:28,559 --> 00:21:31,200
system apps and that was also due to an

581
00:21:31,200 --> 00:21:32,799
exposed receiver

582
00:21:32,799 --> 00:21:34,880
and in node 2

583
00:21:34,880 --> 00:21:37,039
we're able to send sms messages without

584
00:21:37,039 --> 00:21:40,320
any permission and in a prominent

585
00:21:40,320 --> 00:21:42,640
example here is on moto x and several

586
00:21:42,640 --> 00:21:44,480
nexus devices were able to send

587
00:21:44,480 --> 00:21:46,559
emergency broadcasts without any uh

588
00:21:46,559 --> 00:21:48,400
permission

589
00:21:48,400 --> 00:21:51,679
uh other cases is a case that we did on

590
00:21:51,679 --> 00:21:53,600
samsung h6 so we're able to factory

591
00:21:53,600 --> 00:21:55,280
reset the phone without any permission

592
00:21:55,280 --> 00:21:58,799
and thus delete all user data

593
00:21:58,799 --> 00:22:00,720
without any user confirmation or

594
00:22:00,720 --> 00:22:02,080
permission

595
00:22:02,080 --> 00:22:04,640
and in other devices such as blue and

596
00:22:04,640 --> 00:22:06,559
xiaomi you're able to access different

597
00:22:06,559 --> 00:22:09,760
drivers with normal level permission

598
00:22:09,760 --> 00:22:13,039
and so in summary we generalized the

599
00:22:13,039 --> 00:22:14,960
hell vulnerability and other reported

600
00:22:14,960 --> 00:22:16,480
vulnerabilities to conduct an

601
00:22:16,480 --> 00:22:18,400
investigation about increasing

602
00:22:18,400 --> 00:22:21,120
inconsistent security configurations

603
00:22:21,120 --> 00:22:22,880
so we conducted a systematic

604
00:22:22,880 --> 00:22:24,640
investigation to reveal security

605
00:22:24,640 --> 00:22:25,760
features that can lead to

606
00:22:25,760 --> 00:22:27,280
vulnerabilities if changed and

607
00:22:27,280 --> 00:22:28,960
intentionally

608
00:22:28,960 --> 00:22:30,960
so we leveraged differential analysis to

609
00:22:30,960 --> 00:22:32,720
find inconsistent security uh

610
00:22:32,720 --> 00:22:36,080
configuration and we confirmed through a

611
00:22:36,080 --> 00:22:37,520
high level attack that these

612
00:22:37,520 --> 00:22:39,760
consistencies can lead to serious

613
00:22:39,760 --> 00:22:41,600
security vulnerabilities

614
00:22:41,600 --> 00:22:44,158
and thank you

615
00:22:44,740 --> 00:22:49,679
[Applause]

616
00:22:49,679 --> 00:22:52,679
questions

617
00:22:56,720 --> 00:22:59,039
i'm from rice university

618
00:22:59,039 --> 00:23:02,159
uh did you have any trial to uh

619
00:23:02,159 --> 00:23:05,120
compare with the nexus device

620
00:23:05,120 --> 00:23:08,240
uh i'm sorry the did you have any uh run

621
00:23:08,240 --> 00:23:10,720
a droid for the nexus device between

622
00:23:10,720 --> 00:23:12,720
different yeah we did

623
00:23:12,720 --> 00:23:14,720
okay but uh comparing nexus devices

624
00:23:14,720 --> 00:23:15,919
didn't introduce a lot of

625
00:23:15,919 --> 00:23:18,480
inconsistencies they are quite similar

626
00:23:18,480 --> 00:23:21,360
okay yeah and uh one more question uh

627
00:23:21,360 --> 00:23:23,919
how did you get the those 500 i mean

628
00:23:23,919 --> 00:23:26,000
about 600 images

629
00:23:26,000 --> 00:23:28,640
so most of them are from samsung and we

630
00:23:28,640 --> 00:23:31,440
got them from samsung update website so

631
00:23:31,440 --> 00:23:33,440
that's where most of the images are and

632
00:23:33,440 --> 00:23:35,200
other images we got them from physical

633
00:23:35,200 --> 00:23:37,440
devices and also from

634
00:23:37,440 --> 00:23:39,600
other like a website that provides

635
00:23:39,600 --> 00:23:42,480
images yeah

636
00:23:42,480 --> 00:23:44,720
so so i have a question um

637
00:23:44,720 --> 00:23:46,240
for a given

638
00:23:46,240 --> 00:23:48,400
model line

639
00:23:48,400 --> 00:23:50,799
it seems like you could look at things

640
00:23:50,799 --> 00:23:52,799
in terms of the versions subsequent

641
00:23:52,799 --> 00:23:54,400
releases of the operating system and

642
00:23:54,400 --> 00:23:56,320
point releases and then you could then

643
00:23:56,320 --> 00:23:57,279
assess

644
00:23:57,279 --> 00:23:59,360
for particular

645
00:23:59,360 --> 00:24:01,919
models or particular carriers over time

646
00:24:01,919 --> 00:24:04,240
do they become more permissive or less

647
00:24:04,240 --> 00:24:05,360
permissive

648
00:24:05,360 --> 00:24:06,960
and then you might

649
00:24:06,960 --> 00:24:09,200
use that to think about well which

650
00:24:09,200 --> 00:24:10,880
carriers or which

651
00:24:10,880 --> 00:24:13,360
handset providers actually are

652
00:24:13,360 --> 00:24:14,400
invest

653
00:24:14,400 --> 00:24:16,080
in having security staff that thinks

654
00:24:16,080 --> 00:24:18,480
about this were you able to to get any

655
00:24:18,480 --> 00:24:19,520
even

656
00:24:19,520 --> 00:24:21,279
ad hoc sense of

657
00:24:21,279 --> 00:24:23,039
certain combinations

658
00:24:23,039 --> 00:24:24,880
being less likely

659
00:24:24,880 --> 00:24:26,320
to trend towards less secure

660
00:24:26,320 --> 00:24:28,880
configurations or is it

661
00:24:28,880 --> 00:24:31,039
yeah so we find that

662
00:24:31,039 --> 00:24:33,520
non-popular devices for example like

663
00:24:33,520 --> 00:24:35,440
blue or xiaomi

664
00:24:35,440 --> 00:24:37,039
their security features are not actually

665
00:24:37,039 --> 00:24:39,520
being updated they're getting weaker in

666
00:24:39,520 --> 00:24:42,480
newer versions but samsung devices we

667
00:24:42,480 --> 00:24:44,080
found that a lot of

668
00:24:44,080 --> 00:24:45,679
updates

669
00:24:45,679 --> 00:24:46,799
uh

670
00:24:46,799 --> 00:24:49,200
stronger security features okay so it's

671
00:24:49,200 --> 00:24:50,880
it's consistent with a model where if

672
00:24:50,880 --> 00:24:52,640
you have a bunch of money you can invest

673
00:24:52,640 --> 00:24:54,799
in security and if you don't

674
00:24:54,799 --> 00:24:56,159
then

675
00:24:56,159 --> 00:24:58,000
things are things are worse did you try

676
00:24:58,000 --> 00:24:59,760
to contact any of the manufacturers

677
00:24:59,760 --> 00:25:02,480
about this yeah we contacted htc and

678
00:25:02,480 --> 00:25:04,960
samsung and also google for their nexus

679
00:25:04,960 --> 00:25:06,880
devices and all of them acknowledge our

680
00:25:06,880 --> 00:25:10,000
findings okay great

681
00:25:10,000 --> 00:25:12,640
other questions

682
00:25:12,799 --> 00:25:14,580
okay thank you very much

683
00:25:14,580 --> 00:25:14,880
[Music]

684
00:25:14,880 --> 00:25:20,499
[Applause]

