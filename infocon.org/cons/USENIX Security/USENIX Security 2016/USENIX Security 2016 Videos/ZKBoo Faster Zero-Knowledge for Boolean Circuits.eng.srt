1
00:00:11,040 --> 00:00:12,559
hi everyone thank you for the

2
00:00:12,559 --> 00:00:14,960
introduction today i'm going to speak

3
00:00:14,960 --> 00:00:17,600
about zika boo a new zero knowledge

4
00:00:17,600 --> 00:00:20,160
protocol for brain circuit and this is

5
00:00:20,160 --> 00:00:23,119
the joint work with jasper and claudio

6
00:00:23,119 --> 00:00:26,160
from also university

7
00:00:26,160 --> 00:00:26,880
so

8
00:00:26,880 --> 00:00:30,080
zero knowledge protocols are protocols

9
00:00:30,080 --> 00:00:33,440
that are allow approver to convince a

10
00:00:33,440 --> 00:00:35,360
verifier about the veridicity of a

11
00:00:35,360 --> 00:00:37,600
statement without revealing any other

12
00:00:37,600 --> 00:00:38,879
information

13
00:00:38,879 --> 00:00:41,040
to exemplify this concept we are going

14
00:00:41,040 --> 00:00:44,000
to consider this situation in which we

15
00:00:44,000 --> 00:00:44,879
have

16
00:00:44,879 --> 00:00:47,440
two players alice and bob

17
00:00:47,440 --> 00:00:50,239
and they both know a public circuit c

18
00:00:50,239 --> 00:00:51,840
and a value y

19
00:00:51,840 --> 00:00:55,440
and alice also knows a private input x

20
00:00:55,440 --> 00:00:58,719
such that c of x is equal to y

21
00:00:58,719 --> 00:01:00,640
and a zero knowledge protocol it's

22
00:01:00,640 --> 00:01:02,879
simple an interactive protocol between

23
00:01:02,879 --> 00:01:05,840
these two players that allows alice to

24
00:01:05,840 --> 00:01:08,799
prove to bob that she knows x without

25
00:01:08,799 --> 00:01:12,400
revealing information on x

26
00:01:12,400 --> 00:01:15,360
so since their introduction late in the

27
00:01:15,360 --> 00:01:17,280
80s at zero knowledge protocol they have

28
00:01:17,280 --> 00:01:18,960
been used

29
00:01:18,960 --> 00:01:22,479
in cryptography to design many

30
00:01:22,479 --> 00:01:24,080
many complicated

31
00:01:24,080 --> 00:01:26,799
protocols for example we have signature

32
00:01:26,799 --> 00:01:28,960
schemes that are based on zero knowledge

33
00:01:28,960 --> 00:01:31,439
protocols user identification protocols

34
00:01:31,439 --> 00:01:34,720
electronic voting system and so on

35
00:01:34,720 --> 00:01:36,159
so if

36
00:01:36,159 --> 00:01:39,280
if we would like to see all these

37
00:01:39,280 --> 00:01:41,200
applications all these interesting and

38
00:01:41,200 --> 00:01:44,240
nice application to becomes alive in

39
00:01:44,240 --> 00:01:47,840
alive in our real world the first step

40
00:01:47,840 --> 00:01:51,439
that we need to to do is designing

41
00:01:51,439 --> 00:01:53,840
practically efficient zero knowledge

42
00:01:53,840 --> 00:01:56,719
protocol that can be used to prove

43
00:01:56,719 --> 00:01:59,680
a general statement and with practically

44
00:01:59,680 --> 00:02:01,759
efficient i mean protocols that they

45
00:02:01,759 --> 00:02:04,399
don't only have good asymptotics but

46
00:02:04,399 --> 00:02:06,479
protocols for which this asymptotics

47
00:02:06,479 --> 00:02:09,598
comes with with the small constants

48
00:02:09,598 --> 00:02:11,360
small and non-constant

49
00:02:11,360 --> 00:02:13,280
and if we look at protocols and zero

50
00:02:13,280 --> 00:02:14,720
knowledge protocols with these two

51
00:02:14,720 --> 00:02:15,840
features

52
00:02:15,840 --> 00:02:17,360
um

53
00:02:17,360 --> 00:02:20,080
the the state of art we find these two

54
00:02:20,080 --> 00:02:22,160
approaches the best approaches are this

55
00:02:22,160 --> 00:02:24,480
too so the first one is represented by

56
00:02:24,480 --> 00:02:27,040
this family of protocols that are

57
00:02:27,040 --> 00:02:29,680
referred to with the name of snarks that

58
00:02:29,680 --> 00:02:33,280
stays for such non-interactive arguments

59
00:02:33,280 --> 00:02:34,239
and

60
00:02:34,239 --> 00:02:37,440
the the good properties of these

61
00:02:37,440 --> 00:02:40,319
protocols is that they usually have

62
00:02:40,319 --> 00:02:42,560
very small proof many of them they have

63
00:02:42,560 --> 00:02:44,400
a constant size proof

64
00:02:44,400 --> 00:02:47,280
and they are a very uh short very small

65
00:02:47,280 --> 00:02:50,319
verification time so the proof that can

66
00:02:50,319 --> 00:02:53,360
be verified in short time

67
00:02:53,360 --> 00:02:55,920
on the on the downside we have the they

68
00:02:55,920 --> 00:02:58,879
all almost they know they need

69
00:02:58,879 --> 00:03:00,879
the

70
00:03:00,879 --> 00:03:02,800
setup phase

71
00:03:02,800 --> 00:03:05,200
in which large keys that needed to be

72
00:03:05,200 --> 00:03:07,360
generated can you hear me

73
00:03:07,360 --> 00:03:08,800
yes okay

74
00:03:08,800 --> 00:03:12,720
and and there's law improving so meaning

75
00:03:12,720 --> 00:03:16,000
that the the the times then hell is has

76
00:03:16,000 --> 00:03:18,400
to wait to generate the proof is

77
00:03:18,400 --> 00:03:21,200
big as bigger

78
00:03:21,200 --> 00:03:23,360
and this is because basically they all

79
00:03:23,360 --> 00:03:25,280
use a all

80
00:03:25,280 --> 00:03:27,519
many of them they use a heavy

81
00:03:27,519 --> 00:03:30,159
cryptographic tool that is pairing

82
00:03:30,159 --> 00:03:31,920
uh many of these programs have been

83
00:03:31,920 --> 00:03:33,920
implemented and in particular in this

84
00:03:33,920 --> 00:03:37,120
talk as term of comparison i'm going to

85
00:03:37,120 --> 00:03:39,360
consider pinocchio that is one of the

86
00:03:39,360 --> 00:03:41,840
implementation of snarks

87
00:03:41,840 --> 00:03:44,080
the other approach

88
00:03:44,080 --> 00:03:46,159
is represented by zero knowledge from

89
00:03:46,159 --> 00:03:48,879
garbage circuits and as it says the name

90
00:03:48,879 --> 00:03:51,280
it's basically it's based on on your

91
00:03:51,280 --> 00:03:54,080
protocol for for gambling circuits

92
00:03:54,080 --> 00:03:57,040
and it's the nice thing of this approach

93
00:03:57,040 --> 00:03:58,799
is that now the proving time is

94
00:03:58,799 --> 00:04:01,599
decreased respect to the the snacks

95
00:04:01,599 --> 00:04:03,280
protocol

96
00:04:03,280 --> 00:04:06,959
but uh this protocol is interactive and

97
00:04:06,959 --> 00:04:08,879
it cannot

98
00:04:08,879 --> 00:04:12,799
be it cannot be made non-interactive

99
00:04:12,799 --> 00:04:14,239
so interaction is

100
00:04:14,239 --> 00:04:16,160
required here

101
00:04:16,160 --> 00:04:19,199
and beside these two options you finally

102
00:04:19,199 --> 00:04:21,279
now have a third one that is represented

103
00:04:21,279 --> 00:04:22,800
by isika boom

104
00:04:22,800 --> 00:04:25,440
seekable it's a three-round protocol but

105
00:04:25,440 --> 00:04:28,720
it can be made interact interactive

106
00:04:28,720 --> 00:04:31,280
it's very fast in both improving and

107
00:04:31,280 --> 00:04:33,440
very five so alice and bob they have to

108
00:04:33,440 --> 00:04:36,639
work more or less the same now

109
00:04:36,639 --> 00:04:39,280
and we pay this we made this improvement

110
00:04:39,280 --> 00:04:42,400
in the running time

111
00:04:42,400 --> 00:04:44,320
with the fact that now the size of the

112
00:04:44,320 --> 00:04:46,240
proof is not constant anymore but it's

113
00:04:46,240 --> 00:04:48,000
going to be linear with the size of the

114
00:04:48,000 --> 00:04:50,080
circuit that is the secret that

115
00:04:50,080 --> 00:04:52,080
represents the statement that alice

116
00:04:52,080 --> 00:04:54,080
wants to prove

117
00:04:54,080 --> 00:04:57,280
so before explaining what is the kabul

118
00:04:57,280 --> 00:05:01,520
let me give you some details to to to

119
00:05:01,520 --> 00:05:04,479
explain what i mean when i say

120
00:05:04,479 --> 00:05:06,720
short when i say fast when i say slow

121
00:05:06,720 --> 00:05:07,600
okay

122
00:05:07,600 --> 00:05:10,240
so these are the results from our

123
00:05:10,240 --> 00:05:13,680
experiments to prove the knowledge of a

124
00:05:13,680 --> 00:05:17,039
pre-image of an s value that is computed

125
00:05:17,039 --> 00:05:18,080
using

126
00:05:18,080 --> 00:05:22,479
the shaft the hash function sha-1

127
00:05:22,840 --> 00:05:24,639
so

128
00:05:24,639 --> 00:05:27,120
if you look at the second column you can

129
00:05:27,120 --> 00:05:28,800
see that the proving

130
00:05:28,800 --> 00:05:31,759
time so the time that you have to wait

131
00:05:31,759 --> 00:05:34,639
to generate the proof we the digaboo

132
00:05:34,639 --> 00:05:38,240
protocol is much better than pinocchio

133
00:05:38,240 --> 00:05:41,039
one thousand times better so this is

134
00:05:41,039 --> 00:05:44,560
only 13 milliseconds and here is 13 000

135
00:05:44,560 --> 00:05:46,960
something per thousand something

136
00:05:46,960 --> 00:05:48,800
the verifying time is more or less the

137
00:05:48,800 --> 00:05:50,400
same

138
00:05:50,400 --> 00:05:53,360
few milliseconds but for both alberts

139
00:05:53,360 --> 00:05:55,360
but then if you look at the size of the

140
00:05:55,360 --> 00:05:58,240
proof so how many beats hales needs to

141
00:05:58,240 --> 00:06:01,199
communicate to bob pinocchio has this

142
00:06:01,199 --> 00:06:03,600
short nice short proof

143
00:06:03,600 --> 00:06:07,440
three around 300 bytes while we have a

144
00:06:07,440 --> 00:06:09,560
bigger four and

145
00:06:09,560 --> 00:06:12,720
450 more or less kilobytes okay so there

146
00:06:12,720 --> 00:06:16,319
is a difference also in this column and

147
00:06:16,319 --> 00:06:18,319
in the middle of the these two

148
00:06:18,319 --> 00:06:21,600
situations let's say we estimate that we

149
00:06:21,600 --> 00:06:24,880
have the we estimated the complexity of

150
00:06:24,880 --> 00:06:28,080
zero knowledge from garbage circuits

151
00:06:28,080 --> 00:06:29,759
so in the rest of the talk now i'm going

152
00:06:29,759 --> 00:06:32,000
to describe zika boom

153
00:06:32,000 --> 00:06:34,240
and at the end i'm also going to give

154
00:06:34,240 --> 00:06:37,759
you more implementation results

155
00:06:37,759 --> 00:06:39,199
so let me start

156
00:06:39,199 --> 00:06:40,080
this

157
00:06:40,080 --> 00:06:43,039
first part with a definition

158
00:06:43,039 --> 00:06:44,880
so i'm going to define what a sigma

159
00:06:44,880 --> 00:06:47,039
protocol is

160
00:06:47,039 --> 00:06:49,360
so we have this public secrecy and the

161
00:06:49,360 --> 00:06:52,160
public value y as before two parties

162
00:06:52,160 --> 00:06:54,400
alice and bob and alice knows x such

163
00:06:54,400 --> 00:06:56,240
that c of x is y

164
00:06:56,240 --> 00:06:58,160
a sigma protocol is an interactive

165
00:06:58,160 --> 00:06:59,440
protocol with three rounds of

166
00:06:59,440 --> 00:07:02,000
communication and they need to be of

167
00:07:02,000 --> 00:07:03,280
this exact

168
00:07:03,280 --> 00:07:05,759
form so first round it's a mess the

169
00:07:05,759 --> 00:07:08,319
first one is a message from alice to bob

170
00:07:08,319 --> 00:07:10,639
then the second round is a random

171
00:07:10,639 --> 00:07:14,240
message sampled by bob and sent by him

172
00:07:14,240 --> 00:07:16,560
to hellis and then at the end we have

173
00:07:16,560 --> 00:07:17,919
the last

174
00:07:17,919 --> 00:07:21,599
message that is the answer that alice is

175
00:07:21,599 --> 00:07:24,479
uh is going to send to bob to answer it

176
00:07:24,479 --> 00:07:26,240
to the challenge e

177
00:07:26,240 --> 00:07:28,319
and then then bob is going to answer yes

178
00:07:28,319 --> 00:07:29,520
or no

179
00:07:29,520 --> 00:07:32,880
and we want to bob to answer yes when he

180
00:07:32,880 --> 00:07:35,680
is convinced by the fact that that alice

181
00:07:35,680 --> 00:07:38,000
knows hex so we want the protocol to be

182
00:07:38,000 --> 00:07:40,720
complete clearly and then we want two

183
00:07:40,720 --> 00:07:43,840
security requirements first of all we

184
00:07:43,840 --> 00:07:47,120
want security against cheating alice

185
00:07:47,120 --> 00:07:50,240
and this is formalizing saying that if

186
00:07:50,240 --> 00:07:51,680
alice

187
00:07:51,680 --> 00:07:54,479
knows the answer to many different

188
00:07:54,479 --> 00:07:57,520
challenges than from the answers we can

189
00:07:57,520 --> 00:07:58,879
compute x

190
00:07:58,879 --> 00:08:03,199
so we are sure that ls knows x

191
00:08:04,000 --> 00:08:05,520
a way to

192
00:08:05,520 --> 00:08:07,840
measure how good the protocol sigma

193
00:08:07,840 --> 00:08:10,960
protocol is against against a cheating

194
00:08:10,960 --> 00:08:14,240
alice is considering the sundance error

195
00:08:14,240 --> 00:08:17,199
the soundest errors is simple simple

196
00:08:17,199 --> 00:08:20,240
the bound abound for the probability of

197
00:08:20,240 --> 00:08:23,440
bob saying yes when alice is trying to

198
00:08:23,440 --> 00:08:25,520
cheat and we want this of course to be

199
00:08:25,520 --> 00:08:26,479
small

200
00:08:26,479 --> 00:08:28,639
okay

201
00:08:28,639 --> 00:08:31,680
uh then we have the security requirement

202
00:08:31,680 --> 00:08:34,719
against a chipping bob okay for cheating

203
00:08:34,719 --> 00:08:35,599
bob

204
00:08:35,599 --> 00:08:36,880
and this is what we call the

205
00:08:36,880 --> 00:08:38,799
zero-knowledge property and basically we

206
00:08:38,799 --> 00:08:41,360
want that from the three messages

207
00:08:41,360 --> 00:08:43,599
that are exchanged during the protocol

208
00:08:43,599 --> 00:08:46,480
bob can not infer any information about

209
00:08:46,480 --> 00:08:49,839
the original input x

210
00:08:50,080 --> 00:08:52,080
finally

211
00:08:52,080 --> 00:08:54,320
observe that the fact that we have three

212
00:08:54,320 --> 00:08:56,320
these three rounds where the second one

213
00:08:56,320 --> 00:08:58,399
is just a random message

214
00:08:58,399 --> 00:09:00,959
um made possible to use standard

215
00:09:00,959 --> 00:09:03,240
techniques like the fiat

216
00:09:03,240 --> 00:09:06,240
chameleonistic to squeeze

217
00:09:06,240 --> 00:09:09,360
these three messages to be only one and

218
00:09:09,360 --> 00:09:11,360
made the the protocol being

219
00:09:11,360 --> 00:09:14,320
non-interactive okay so i can consider

220
00:09:14,320 --> 00:09:16,320
this kind of protocols

221
00:09:16,320 --> 00:09:18,320
non-interactive basically

222
00:09:18,320 --> 00:09:21,200
so now that we have this definition uh

223
00:09:21,200 --> 00:09:24,480
with very nice definition how and we

224
00:09:24,480 --> 00:09:26,399
have very clear in mind what we want to

225
00:09:26,399 --> 00:09:30,240
achieve how can we achieve it

226
00:09:30,240 --> 00:09:32,160
so there is a very beautiful

227
00:09:32,160 --> 00:09:34,959
construction of sigma protocols in this

228
00:09:34,959 --> 00:09:38,240
paper of shai and others from 2007 it's

229
00:09:38,240 --> 00:09:39,839
called the icos construction from the

230
00:09:39,839 --> 00:09:43,440
names of the authors or also it's known

231
00:09:43,440 --> 00:09:45,920
in cryptography is not so with the name

232
00:09:45,920 --> 00:09:48,240
of mpc in that because the entire

233
00:09:48,240 --> 00:09:51,360
construction is based on

234
00:09:51,360 --> 00:09:54,800
a simulated mpc protocol

235
00:09:54,800 --> 00:09:56,880
and in this paper you can find a sigma

236
00:09:56,880 --> 00:10:00,160
protocol which sounds concerns to third

237
00:10:00,160 --> 00:10:02,880
but the main result of the paper is a

238
00:10:02,880 --> 00:10:04,720
zero knowledge protocol with good

239
00:10:04,720 --> 00:10:07,200
asymptotic complexity

240
00:10:07,200 --> 00:10:08,160
so

241
00:10:08,160 --> 00:10:10,959
the kabul you can see it as a new

242
00:10:10,959 --> 00:10:14,240
interpretation of this setting

243
00:10:14,240 --> 00:10:16,800
that has the main goal of

244
00:10:16,800 --> 00:10:19,360
designing a protocol that is practical

245
00:10:19,360 --> 00:10:21,760
or close to practice

246
00:10:21,760 --> 00:10:24,079
and the main ingredient to to achieve

247
00:10:24,079 --> 00:10:25,200
this

248
00:10:25,200 --> 00:10:26,240
was

249
00:10:26,240 --> 00:10:28,000
basically

250
00:10:28,000 --> 00:10:30,320
considering instead of mpc protocol

251
00:10:30,320 --> 00:10:32,880
considering this new primitive

252
00:10:32,880 --> 00:10:35,279
that new tool that we call circuit

253
00:10:35,279 --> 00:10:36,800
decomposition

254
00:10:36,800 --> 00:10:39,200
so circuit a circuit decomposition is

255
00:10:39,200 --> 00:10:42,320
just a way of computing a circuit on a

256
00:10:42,320 --> 00:10:43,760
value by

257
00:10:43,760 --> 00:10:46,000
splitting this computation in three

258
00:10:46,000 --> 00:10:48,800
different branches of computation in

259
00:10:48,800 --> 00:10:51,360
such a way that when you look at two

260
00:10:51,360 --> 00:10:55,040
only of the branches then you don't know

261
00:10:55,040 --> 00:10:57,519
which was the input value

262
00:10:57,519 --> 00:11:00,640
let me explain this better

263
00:11:00,640 --> 00:11:01,519
so

264
00:11:01,519 --> 00:11:03,839
we fix a parameter n

265
00:11:03,839 --> 00:11:04,720
okay

266
00:11:04,720 --> 00:11:06,640
and then we consider a family of a

267
00:11:06,640 --> 00:11:08,640
function the function that you can see

268
00:11:08,640 --> 00:11:10,720
in the box in the slide okay

269
00:11:10,720 --> 00:11:12,800
and we are going to use this function to

270
00:11:12,800 --> 00:11:16,399
compute c of x c of x in this way

271
00:11:16,399 --> 00:11:19,519
first of all we use the share function

272
00:11:19,519 --> 00:11:22,720
okay and we split the the input x in

273
00:11:22,720 --> 00:11:24,160
three values

274
00:11:24,160 --> 00:11:26,959
w 0 1 0 2 and 0 3

275
00:11:26,959 --> 00:11:30,320
then in our box we have these end sets

276
00:11:30,320 --> 00:11:33,920
of three function three functions each

277
00:11:33,920 --> 00:11:36,880
and i'm going to use this and set in n

278
00:11:36,880 --> 00:11:40,560
steps my my computation and each step

279
00:11:40,560 --> 00:11:42,640
for in the first step i used the

280
00:11:42,640 --> 00:11:44,800
function from the first set

281
00:11:44,800 --> 00:11:46,640
and i'm using them in the following way

282
00:11:46,640 --> 00:11:49,040
so i take the first function i input the

283
00:11:49,040 --> 00:11:50,000
value

284
00:11:50,000 --> 00:11:50,720
from

285
00:11:50,720 --> 00:11:53,760
branch one and branch two and i can put

286
00:11:53,760 --> 00:11:55,360
the next value

287
00:11:55,360 --> 00:11:57,440
in the branch one

288
00:11:57,440 --> 00:11:59,600
then i take the second function in the

289
00:11:59,600 --> 00:12:00,480
set

290
00:12:00,480 --> 00:12:03,440
and i input the value in branch

291
00:12:03,440 --> 00:12:06,880
in branch two and branch three so always

292
00:12:06,880 --> 00:12:08,720
consider the branch on the right size

293
00:12:08,720 --> 00:12:11,200
also and i compute the second value in

294
00:12:11,200 --> 00:12:13,839
the second branch the same for the third

295
00:12:13,839 --> 00:12:15,600
branch okay

296
00:12:15,600 --> 00:12:19,200
and so on i do this end time

297
00:12:19,200 --> 00:12:21,200
and and then i recollect all these

298
00:12:21,200 --> 00:12:23,920
values with the reconstruction functions

299
00:12:23,920 --> 00:12:26,320
and i can't put this output value that

300
00:12:26,320 --> 00:12:28,399
value of the reconstruction y

301
00:12:28,399 --> 00:12:30,240
and i say that the request the

302
00:12:30,240 --> 00:12:33,440
the composition is the correct if y is

303
00:12:33,440 --> 00:12:34,320
indeed

304
00:12:34,320 --> 00:12:35,760
c of x

305
00:12:35,760 --> 00:12:38,720
and i say that is too private

306
00:12:38,720 --> 00:12:40,959
if when i look at the values the

307
00:12:40,959 --> 00:12:44,000
intermediate values the w values in two

308
00:12:44,000 --> 00:12:46,880
branches two consecutive branches then i

309
00:12:46,880 --> 00:12:49,200
cannot know anything about the original

310
00:12:49,200 --> 00:12:50,839
x

311
00:12:50,839 --> 00:12:53,920
okay so given this

312
00:12:53,920 --> 00:12:56,480
i'm going i'm i'm now going to show you

313
00:12:56,480 --> 00:12:58,240
how to construct

314
00:12:58,240 --> 00:13:00,959
a zero knowledge protocol given a

315
00:13:00,959 --> 00:13:02,000
function the

316
00:13:02,000 --> 00:13:04,160
circuit decomposition

317
00:13:04,160 --> 00:13:07,120
so the first step is ask to alice to

318
00:13:07,120 --> 00:13:10,079
compute the entire decompositions as we

319
00:13:10,079 --> 00:13:14,239
did in the previous slide okay

320
00:13:14,560 --> 00:13:17,600
then she's going to commit to

321
00:13:17,600 --> 00:13:20,959
the w values so all the intermediate

322
00:13:20,959 --> 00:13:23,839
values that are have been completed

323
00:13:23,839 --> 00:13:25,040
uh

324
00:13:25,040 --> 00:13:26,720
if you don't know what a commitment is

325
00:13:26,720 --> 00:13:28,480
this just means that alice is going to

326
00:13:28,480 --> 00:13:31,200
put all this value on him black boxes

327
00:13:31,200 --> 00:13:32,800
and send

328
00:13:32,800 --> 00:13:35,519
she sends these boxes to bob bob cannot

329
00:13:35,519 --> 00:13:37,279
see inside the boxes because the boxes

330
00:13:37,279 --> 00:13:39,600
are black and they are closed with keys

331
00:13:39,600 --> 00:13:42,000
but helis has not anymore the values now

332
00:13:42,000 --> 00:13:44,480
so she cannot change the values inside

333
00:13:44,480 --> 00:13:47,120
the box

334
00:13:47,199 --> 00:13:50,160
now bob has to choose a random index

335
00:13:50,160 --> 00:13:52,399
between one two and three

336
00:13:52,399 --> 00:13:54,880
and hell is she is going to answer to

337
00:13:54,880 --> 00:13:56,639
the challenge of bob

338
00:13:56,639 --> 00:13:58,000
opening the

339
00:13:58,000 --> 00:14:01,199
the commitments the boxes of branch

340
00:14:01,199 --> 00:14:04,959
e and is plus one okay

341
00:14:04,959 --> 00:14:08,240
in this way now bob knows these two n

342
00:14:08,240 --> 00:14:09,680
values

343
00:14:09,680 --> 00:14:11,279
and he can

344
00:14:11,279 --> 00:14:13,199
run a part

345
00:14:13,199 --> 00:14:14,560
a part of the functions in the

346
00:14:14,560 --> 00:14:16,959
decomposition right

347
00:14:16,959 --> 00:14:19,839
and can check that these values they

348
00:14:19,839 --> 00:14:22,160
they they were computed by alice in the

349
00:14:22,160 --> 00:14:24,320
right way for example you can check that

350
00:14:24,320 --> 00:14:28,399
w one one is f one one of w zero one and

351
00:14:28,399 --> 00:14:29,600
zero two

352
00:14:29,600 --> 00:14:31,680
okay

353
00:14:31,680 --> 00:14:34,079
and if everything is okay it's going to

354
00:14:34,079 --> 00:14:36,959
output yes otherwise no clearly

355
00:14:36,959 --> 00:14:39,279
so this is a sigma protocol i mean it

356
00:14:39,279 --> 00:14:41,920
has the right decomposition the right

357
00:14:41,920 --> 00:14:45,600
communication partner clearly i mean the

358
00:14:45,600 --> 00:14:48,160
zero knowledge practical it's very easy

359
00:14:48,160 --> 00:14:50,639
to see because if the

360
00:14:50,639 --> 00:14:52,959
secret decomposition has two privacy

361
00:14:52,959 --> 00:14:55,839
then bob doesn't know anything about x

362
00:14:55,839 --> 00:14:59,440
from the values that he can see

363
00:14:59,440 --> 00:15:01,680
and finally observe that he has

364
00:15:01,680 --> 00:15:04,000
soundness arrows two thirds because

365
00:15:04,000 --> 00:15:07,040
basically if alice knows how to answer

366
00:15:07,040 --> 00:15:10,000
to all the three possible challenges

367
00:15:10,000 --> 00:15:11,440
this means that

368
00:15:11,440 --> 00:15:15,040
he he she sorry she knows how to compute

369
00:15:15,040 --> 00:15:16,560
the complete

370
00:15:16,560 --> 00:15:19,279
circuit decomposition in particular she

371
00:15:19,279 --> 00:15:22,639
can compute the value of stat zero and

372
00:15:22,639 --> 00:15:24,000
she can come put using the

373
00:15:24,000 --> 00:15:25,839
reconstruction function here she can

374
00:15:25,839 --> 00:15:29,600
compute x she knows x

375
00:15:29,600 --> 00:15:32,880
so this is the kabum and it this is just

376
00:15:32,880 --> 00:15:35,120
what i show you now is just basically

377
00:15:35,120 --> 00:15:38,240
general reduction that given a circuit

378
00:15:38,240 --> 00:15:40,880
decomposition

379
00:15:40,880 --> 00:15:42,720
gives you how a

380
00:15:42,720 --> 00:15:44,800
zero knowledge protocol if you want

381
00:15:44,800 --> 00:15:46,880
implemented zero noise protocol then you

382
00:15:46,880 --> 00:15:48,720
have to decide which circuit

383
00:15:48,720 --> 00:15:52,079
decomposition to use right

384
00:15:52,079 --> 00:15:55,680
so in our paper to to to

385
00:15:55,680 --> 00:15:57,839
for for the the secret that we were

386
00:15:57,839 --> 00:15:59,040
looking at

387
00:15:59,040 --> 00:16:01,920
buren circuit the best the best uh the

388
00:16:01,920 --> 00:16:04,399
decomposition was this one the linear

389
00:16:04,399 --> 00:16:06,480
decomposition uh in the linear

390
00:16:06,480 --> 00:16:09,360
decomposition n is equal to the number

391
00:16:09,360 --> 00:16:11,360
of the gates in the circuits

392
00:16:11,360 --> 00:16:14,160
that represent the statement okay and

393
00:16:14,160 --> 00:16:18,160
this is what gives you linear size proof

394
00:16:18,160 --> 00:16:19,839
then the share and the reconstruction

395
00:16:19,839 --> 00:16:21,759
function are just the sharing and

396
00:16:21,759 --> 00:16:24,800
reconstruction algorithm of the additive

397
00:16:24,800 --> 00:16:28,480
sequential scheme so you split a value

398
00:16:28,480 --> 00:16:29,199
in

399
00:16:29,199 --> 00:16:33,040
in the sum of three random values

400
00:16:33,040 --> 00:16:36,320
and then to define the the the function

401
00:16:36,320 --> 00:16:38,000
from the for the family half but you

402
00:16:38,000 --> 00:16:41,199
define one set of function for each gate

403
00:16:41,199 --> 00:16:43,279
in the circuit and the definition

404
00:16:43,279 --> 00:16:45,360
depends on which gate you are

405
00:16:45,360 --> 00:16:47,920
considering so if you have

406
00:16:47,920 --> 00:16:50,399
sorry if you have xor gate the

407
00:16:50,399 --> 00:16:53,199
definition is very simple you just sum

408
00:16:53,199 --> 00:16:56,800
locally in a branch the two input values

409
00:16:56,800 --> 00:16:58,320
instead the one you have an end gate

410
00:16:58,320 --> 00:17:00,320
it's a bit more complicated because you

411
00:17:00,320 --> 00:17:03,040
have to consider now the the pairwise

412
00:17:03,040 --> 00:17:06,400
products coming from that branch and the

413
00:17:06,400 --> 00:17:08,559
brands on the right side

414
00:17:08,559 --> 00:17:11,199
and we all you have also to mask this

415
00:17:11,199 --> 00:17:14,559
computation with a dark random value

416
00:17:14,559 --> 00:17:16,400
the all the details of course that can

417
00:17:16,400 --> 00:17:18,480
be found in the paper

418
00:17:18,480 --> 00:17:20,959
so using this the composition

419
00:17:20,959 --> 00:17:23,599
we run some experiments

420
00:17:23,599 --> 00:17:25,760
and you can see the result in this in

421
00:17:25,760 --> 00:17:29,440
this line in this table this is our

422
00:17:29,440 --> 00:17:31,679
you can as you can see this is uh for

423
00:17:31,679 --> 00:17:33,280
proving the pre-image the knowledge of

424
00:17:33,280 --> 00:17:37,600
the pre-image for sha-1 and f4sha 256

425
00:17:37,600 --> 00:17:40,160
so for sha-1 the proof size is around

426
00:17:40,160 --> 00:17:42,360
for

427
00:17:42,360 --> 00:17:45,280
450 kilobytes and it's more or less the

428
00:17:45,280 --> 00:17:47,120
double size for sure

429
00:17:47,120 --> 00:17:51,360
256 and so these numbers are all for

430
00:17:51,360 --> 00:17:54,480
sundance errors to the -18 that's what

431
00:17:54,480 --> 00:17:56,000
is used in

432
00:17:56,000 --> 00:17:59,679
practical application and i show you i

433
00:17:59,679 --> 00:18:02,720
mean the the zero the zika boo protocol

434
00:18:02,720 --> 00:18:04,799
sound is two-third so if you want

435
00:18:04,799 --> 00:18:06,559
standard two to the minus eight you have

436
00:18:06,559 --> 00:18:09,280
to repeat the protocol

437
00:18:09,280 --> 00:18:12,160
uh and actually the fact that the proof

438
00:18:12,160 --> 00:18:14,799
are done for this uh for distance are

439
00:18:14,799 --> 00:18:17,679
done in in in repetitions

440
00:18:17,679 --> 00:18:20,320
uh makes it very very

441
00:18:20,320 --> 00:18:21,360
very

442
00:18:21,360 --> 00:18:24,240
makes very useful to use a

443
00:18:24,240 --> 00:18:26,720
parallelization if you try to parallel

444
00:18:26,720 --> 00:18:29,280
parallelize the implementation then you

445
00:18:29,280 --> 00:18:32,240
can you can decrease a lot the running

446
00:18:32,240 --> 00:18:34,320
time about for the verifier and the

447
00:18:34,320 --> 00:18:37,760
prover for alice and bob

448
00:18:38,080 --> 00:18:40,320
the implementation is public you can

449
00:18:40,320 --> 00:18:43,360
find the code that we used to to

450
00:18:43,360 --> 00:18:46,080
to run the experiment on github that's

451
00:18:46,080 --> 00:18:47,600
the undress

452
00:18:47,600 --> 00:18:49,039
and

453
00:18:49,039 --> 00:18:51,600
let me now recap a bit and then conclude

454
00:18:51,600 --> 00:18:54,080
with some open questions

455
00:18:54,080 --> 00:18:57,679
so zika boot is close to practical zero

456
00:18:57,679 --> 00:18:59,360
knowledge protocol

457
00:18:59,360 --> 00:19:02,400
that is basically non-interactive

458
00:19:02,400 --> 00:19:04,559
it is already implemented for show one

459
00:19:04,559 --> 00:19:07,120
and sha-256

460
00:19:07,120 --> 00:19:09,280
and as proving time much smaller than

461
00:19:09,280 --> 00:19:12,400
the current technology for snack

462
00:19:12,400 --> 00:19:16,480
and it has a better name than snarks

463
00:19:18,320 --> 00:19:20,240
let me conclude with this

464
00:19:20,240 --> 00:19:23,840
this remark so in this paper we focus

465
00:19:23,840 --> 00:19:26,480
our attention on the boolean circuit

466
00:19:26,480 --> 00:19:30,080
because we consider shawan is a 256 for

467
00:19:30,080 --> 00:19:31,440
the experiment so it makes sense to

468
00:19:31,440 --> 00:19:33,760
consider boeing circuit but zero not but

469
00:19:33,760 --> 00:19:35,600
the cable with the linear decomposition

470
00:19:35,600 --> 00:19:38,559
so you can work for any circuit boolean

471
00:19:38,559 --> 00:19:40,640
or arithmetic

472
00:19:40,640 --> 00:19:42,080
so this

473
00:19:42,080 --> 00:19:45,440
allows to to to allows us to think that

474
00:19:45,440 --> 00:19:48,960
there are at least two research to new

475
00:19:48,960 --> 00:19:49,840
new

476
00:19:49,840 --> 00:19:52,880
new direction in this research

477
00:19:52,880 --> 00:19:54,559
because first of all will be very

478
00:19:54,559 --> 00:19:56,880
interesting to implement a general

479
00:19:56,880 --> 00:19:59,360
purpose zero knowledge jacobu

480
00:19:59,360 --> 00:20:01,840
meaning just having a code where you

481
00:20:01,840 --> 00:20:03,360
input the

482
00:20:03,360 --> 00:20:06,480
the circuit c and then the proof is

483
00:20:06,480 --> 00:20:10,559
generated using the zikabo framework

484
00:20:10,559 --> 00:20:12,159
the second

485
00:20:12,159 --> 00:20:14,559
research new research interaction is

486
00:20:14,559 --> 00:20:17,760
more related with the design of zacabu

487
00:20:17,760 --> 00:20:18,880
and

488
00:20:18,880 --> 00:20:23,039
since this this jackabu can work for any

489
00:20:23,039 --> 00:20:26,159
circuit decomposition why not consider

490
00:20:26,159 --> 00:20:28,880
it take your favorite circuit for

491
00:20:28,880 --> 00:20:32,159
example the circuit complete aes as

492
00:20:32,159 --> 00:20:36,000
encryption and think about designing a

493
00:20:36,000 --> 00:20:38,960
dock the secret decomposition a dock for

494
00:20:38,960 --> 00:20:39,840
that

495
00:20:39,840 --> 00:20:41,360
that circuit

496
00:20:41,360 --> 00:20:44,559
that allow you to decrease the size of

497
00:20:44,559 --> 00:20:47,760
the proof generated by the

498
00:20:47,760 --> 00:20:50,000
and i

499
00:20:50,000 --> 00:20:52,240
saved some i said everything so thank

500
00:20:52,240 --> 00:20:55,280
you for your attention

501
00:20:55,280 --> 00:20:58,480
[Applause]

502
00:21:02,640 --> 00:21:05,039
great questions please

503
00:21:05,039 --> 00:21:06,559
thank you um

504
00:21:06,559 --> 00:21:08,640
in one of the previous slides um you've

505
00:21:08,640 --> 00:21:09,520
shown

506
00:21:09,520 --> 00:21:11,520
the number of and gates for each of

507
00:21:11,520 --> 00:21:13,039
these circuits

508
00:21:13,039 --> 00:21:15,760
um are we correct to assume that the

509
00:21:15,760 --> 00:21:17,440
runtime is dominated by the number of

510
00:21:17,440 --> 00:21:19,520
end gates in the circuit for

511
00:21:19,520 --> 00:21:21,039
exactly yes

512
00:21:21,039 --> 00:21:22,960
the the xor gas for free basically in

513
00:21:22,960 --> 00:21:25,760
the linear decomposition because i skip

514
00:21:25,760 --> 00:21:28,320
some detail but you can basically embed

515
00:21:28,320 --> 00:21:29,200
the

516
00:21:29,200 --> 00:21:31,280
the star gate and then gates

517
00:21:31,280 --> 00:21:33,760
so it's linear in the number of and

518
00:21:33,760 --> 00:21:35,440
gates the size

519
00:21:35,440 --> 00:21:37,200
right so so this is just a standard

520
00:21:37,200 --> 00:21:38,880
implementation of shot it's not

521
00:21:38,880 --> 00:21:40,720
particularly optimized for the number of

522
00:21:40,720 --> 00:21:42,799
n gates correct

523
00:21:42,799 --> 00:21:44,640
sorry say it again so these are just for

524
00:21:44,640 --> 00:21:45,760
standard

525
00:21:45,760 --> 00:21:47,600
textbook implementations of sha is a

526
00:21:47,600 --> 00:21:49,360
boolean circuit

527
00:21:49,360 --> 00:21:50,240
no

528
00:21:50,240 --> 00:21:53,520
they bought the secret that we use it we

529
00:21:53,520 --> 00:21:55,679
tried to minimize the number of end

530
00:21:55,679 --> 00:21:57,520
gates

531
00:21:57,520 --> 00:22:00,480
okay thank you yeah

532
00:22:03,200 --> 00:22:05,200
so i saw on your second and last slide

533
00:22:05,200 --> 00:22:06,159
you say

534
00:22:06,159 --> 00:22:09,520
nearly practical um yes all right so

535
00:22:09,520 --> 00:22:13,679
what is it in your mind that isn't

536
00:22:13,679 --> 00:22:15,039
fully practical

537
00:22:15,039 --> 00:22:17,360
depends on the application i think the

538
00:22:17,360 --> 00:22:19,120
size of the proof

539
00:22:19,120 --> 00:22:21,039
can be

540
00:22:21,039 --> 00:22:24,000
still too too big

541
00:22:24,000 --> 00:22:25,679
the running time no

542
00:22:25,679 --> 00:22:27,440
that side i mean the running time i

543
00:22:27,440 --> 00:22:28,640
think we are

544
00:22:28,640 --> 00:22:30,640
practical we can say that practical but

545
00:22:30,640 --> 00:22:33,600
the size of the proof is a bit too too

546
00:22:33,600 --> 00:22:36,559
much 500k depends on application

547
00:22:36,559 --> 00:22:38,799
yeah

548
00:22:39,120 --> 00:22:40,960
anybody else

549
00:22:40,960 --> 00:22:44,760
all right let's thank our speaker

550
00:22:45,220 --> 00:22:45,590
[Music]

551
00:22:45,590 --> 00:22:49,369
[Applause]

