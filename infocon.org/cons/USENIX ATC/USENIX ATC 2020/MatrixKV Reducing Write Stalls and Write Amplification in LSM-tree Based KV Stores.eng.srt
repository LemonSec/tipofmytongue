1
00:00:08,480 --> 00:00:12,639
hello everyone my name is tiny young

2
00:00:10,639 --> 00:00:13,759
from hong jong university of science and

3
00:00:12,639 --> 00:00:16,560
technology

4
00:00:13,759 --> 00:00:18,800
my talk today is matrix kv reducing

5
00:00:16,560 --> 00:00:22,000
right star and right amplification in

6
00:00:18,800 --> 00:00:22,960
lcmg-based kv stores with a matrix

7
00:00:22,000 --> 00:00:25,920
container in

8
00:00:22,960 --> 00:00:26,800
nvm this is a joint work of pincap

9
00:00:25,920 --> 00:00:29,840
company

10
00:00:26,800 --> 00:00:32,960
the university of texas at arlington and

11
00:00:29,840 --> 00:00:32,960
temple university

12
00:00:33,120 --> 00:00:37,280
i will give this talk in four parts

13
00:00:35,520 --> 00:00:41,120
first let me introduce

14
00:00:37,280 --> 00:00:41,120
the backgrounds and motivation

15
00:00:41,920 --> 00:00:47,680
l7 shape-based kv store are widely

16
00:00:44,640 --> 00:00:50,480
deployed in ride intensive scenarios

17
00:00:47,680 --> 00:00:51,280
popular kv stores such as level dipping

18
00:00:50,480 --> 00:00:54,718
cassandra

19
00:00:51,280 --> 00:00:56,000
and roxdb are built with lcmg and they

20
00:00:54,719 --> 00:00:59,920
usually run

21
00:00:56,000 --> 00:01:03,039
on systems with dram and ssd storages

22
00:00:59,920 --> 00:01:05,840
lcm chairs offer high rise throughput

23
00:01:03,039 --> 00:01:08,000
by batching right in memory and offer

24
00:01:05,840 --> 00:01:11,360
faster read and range qualities

25
00:01:08,000 --> 00:01:14,560
with lifetime compaction

26
00:01:11,360 --> 00:01:17,520
this figure presents the structure of an

27
00:01:14,560 --> 00:01:21,520
l symmetry in the popular implementation

28
00:01:17,520 --> 00:01:22,640
roxdb roxdb is composed of a dram

29
00:01:21,520 --> 00:01:26,080
component

30
00:01:22,640 --> 00:01:29,360
and an ssd component lsm3

31
00:01:26,080 --> 00:01:30,240
levels on ssd are exponentially

32
00:01:29,360 --> 00:01:33,320
increased

33
00:01:30,240 --> 00:01:34,960
from level 0 to level 6 at the

34
00:01:33,320 --> 00:01:38,720
amplification factor

35
00:01:34,960 --> 00:01:41,759
of 10. writes requests to first

36
00:01:38,720 --> 00:01:45,039
insert into memory tables in dram

37
00:01:41,759 --> 00:01:49,040
then flush to ssd finally do

38
00:01:45,040 --> 00:01:51,680
level by level compactions overall

39
00:01:49,040 --> 00:01:52,479
the operations of roxdb manually

40
00:01:51,680 --> 00:01:56,000
includes

41
00:01:52,479 --> 00:01:58,158
insert flash and compaction of multiple

42
00:01:56,000 --> 00:02:01,040
levels

43
00:01:58,159 --> 00:02:02,079
to better understand the lcm3 based kb

44
00:02:01,040 --> 00:02:05,680
store

45
00:02:02,079 --> 00:02:07,679
we evaluate roxdb by randomly writing an

46
00:02:05,680 --> 00:02:10,000
80 gigabyte data set

47
00:02:07,680 --> 00:02:12,480
and measure the random right throughput

48
00:02:10,000 --> 00:02:15,280
in every 10 seconds

49
00:02:12,480 --> 00:02:16,000
from this figure we first observe the

50
00:02:15,280 --> 00:02:19,200
challenge

51
00:02:16,000 --> 00:02:21,760
of write stock

52
00:02:19,200 --> 00:02:23,839
that is application throughput

53
00:02:21,760 --> 00:02:27,040
periodically dropped to nearly

54
00:02:23,840 --> 00:02:30,480
zero the troughs of systems throughput

55
00:02:27,040 --> 00:02:32,160
indicate right stocks the dramatic

56
00:02:30,480 --> 00:02:35,280
fluctuation of

57
00:02:32,160 --> 00:02:37,920
performance and long-tail latencies go

58
00:02:35,280 --> 00:02:38,560
against the non-sql system's design goal

59
00:02:37,920 --> 00:02:42,640
of

60
00:02:38,560 --> 00:02:45,280
predictable and stable performance

61
00:02:42,640 --> 00:02:46,238
to figure out the reason of right stores

62
00:02:45,280 --> 00:02:48,840
we record

63
00:02:46,239 --> 00:02:50,239
the pure road of each flash and

64
00:02:48,840 --> 00:02:54,400
compaction

65
00:02:50,239 --> 00:02:54,879
of different levels surprisingly we find

66
00:02:54,400 --> 00:02:57,599
that

67
00:02:54,879 --> 00:02:58,720
the pure road of level 0 to level 1

68
00:02:57,599 --> 00:03:01,760
compaction

69
00:02:58,720 --> 00:03:04,560
matches right star approximately

70
00:03:01,760 --> 00:03:05,440
here we can see that each red line

71
00:03:04,560 --> 00:03:08,800
represents

72
00:03:05,440 --> 00:03:12,959
a level 0 to level 1 compaction

73
00:03:08,800 --> 00:03:16,000
its length along x-axis represents

74
00:03:12,959 --> 00:03:19,519
the latency of the compaction we write

75
00:03:16,000 --> 00:03:20,800
the right y-axis shows the amount of

76
00:03:19,519 --> 00:03:24,360
data processed

77
00:03:20,800 --> 00:03:28,959
in each compaction so it reaches

78
00:03:24,360 --> 00:03:28,959
3.1 gigabyte on average

79
00:03:31,760 --> 00:03:36,079
now we elaborate the level 0 to level 1

80
00:03:35,120 --> 00:03:39,280
compaction

81
00:03:36,080 --> 00:03:41,360
to explain why it involves so much

82
00:03:39,280 --> 00:03:44,319
compaction data

83
00:03:41,360 --> 00:03:45,440
to combat a level 0 to level 1

84
00:03:44,319 --> 00:03:48,399
compaction

85
00:03:45,440 --> 00:03:49,680
first we pick a victim assets table in

86
00:03:48,400 --> 00:03:53,200
level zero

87
00:03:49,680 --> 00:03:53,599
second overlapped access tables in level

88
00:03:53,200 --> 00:03:57,359
one

89
00:03:53,599 --> 00:04:00,238
are picked third since access tables

90
00:03:57,360 --> 00:04:01,519
in level zero are overlapped to each

91
00:04:00,239 --> 00:04:04,159
other

92
00:04:01,519 --> 00:04:06,720
we go back to level 0 and pick more

93
00:04:04,159 --> 00:04:07,920
access tables within the compaction key

94
00:04:06,720 --> 00:04:11,760
range

95
00:04:07,920 --> 00:04:14,238
first we go to level 1

96
00:04:11,760 --> 00:04:16,639
and find if there are any other

97
00:04:14,239 --> 00:04:20,478
overlapped access tables

98
00:04:16,639 --> 00:04:20,478
and pick state and pick it

99
00:04:20,798 --> 00:04:28,080
so now we get all the compaction data

100
00:04:24,240 --> 00:04:30,720
all the compaction data or read into

101
00:04:28,080 --> 00:04:32,880
the memory merge and sort then right

102
00:04:30,720 --> 00:04:35,520
back to level one

103
00:04:32,880 --> 00:04:36,000
as we go back and forth between level

104
00:04:35,520 --> 00:04:39,280
zero

105
00:04:36,000 --> 00:04:40,800
and level one almost asset all access

106
00:04:39,280 --> 00:04:44,080
tables in both level

107
00:04:40,800 --> 00:04:47,759
joins the level 0 to level 1 compaction

108
00:04:44,080 --> 00:04:51,520
in the end so the large amount of

109
00:04:47,759 --> 00:04:55,520
compaction data leads to heavy read

110
00:04:51,520 --> 00:04:58,400
merge write which takes up cpu cycles

111
00:04:55,520 --> 00:05:00,880
and ssd bandwidth thus blocking

112
00:04:58,400 --> 00:05:03,520
foreground requests and making

113
00:05:00,880 --> 00:05:06,719
level 0 to level 1 compaction the

114
00:05:03,520 --> 00:05:10,000
primary cause of light stars

115
00:05:06,720 --> 00:05:13,199
from the same test we observe the second

116
00:05:10,000 --> 00:05:15,759
challenge as the green line shows system

117
00:05:13,199 --> 00:05:16,800
throughput degrades with the increase of

118
00:05:15,759 --> 00:05:20,080
data sense

119
00:05:16,800 --> 00:05:20,720
size the growing data set increases the

120
00:05:20,080 --> 00:05:23,840
depth of

121
00:05:20,720 --> 00:05:24,720
lcm tree so that brings more compaction

122
00:05:23,840 --> 00:05:28,159
and thus

123
00:05:24,720 --> 00:05:32,240
higher right amplification

124
00:05:28,160 --> 00:05:33,680
as we know lcm3 based kv stores have

125
00:05:32,240 --> 00:05:36,560
long been criticized

126
00:05:33,680 --> 00:05:36,880
for their high right amplification due

127
00:05:36,560 --> 00:05:39,919
to

128
00:05:36,880 --> 00:05:42,880
level by level compactions

129
00:05:39,919 --> 00:05:44,240
with the amplification factor of

130
00:05:42,880 --> 00:05:47,759
adjacent levels

131
00:05:44,240 --> 00:05:50,720
of 10 by default right amplification

132
00:05:47,759 --> 00:05:51,440
increases with the number of levels that

133
00:05:50,720 --> 00:05:54,639
is

134
00:05:51,440 --> 00:05:57,919
right-hand purification equals to a f

135
00:05:54,639 --> 00:06:01,199
times n where n is

136
00:05:57,919 --> 00:06:01,198
the number of levels

137
00:06:01,680 --> 00:06:04,800
emerging non-voluntary memory

138
00:06:03,600 --> 00:06:07,840
technologies

139
00:06:04,800 --> 00:06:08,639
has the property of fast success better

140
00:06:07,840 --> 00:06:11,679
adjustable

141
00:06:08,639 --> 00:06:14,639
and persistency so it provides

142
00:06:11,680 --> 00:06:15,039
us a potential solution to adjust the

143
00:06:14,639 --> 00:06:18,800
both

144
00:06:15,039 --> 00:06:22,560
challenges nova same from adc18

145
00:06:18,800 --> 00:06:24,639
adopts nvm to store large mutable memory

146
00:06:22,560 --> 00:06:27,280
tables

147
00:06:24,639 --> 00:06:28,240
from the right figure we can see that

148
00:06:27,280 --> 00:06:30,719
novel sam

149
00:06:28,240 --> 00:06:32,319
improves random right throughput

150
00:06:30,720 --> 00:06:35,520
compared to roxdb

151
00:06:32,319 --> 00:06:38,720
is about 1.7 times

152
00:06:35,520 --> 00:06:40,240
so to some extent it do reduce right

153
00:06:38,720 --> 00:06:43,520
amplification

154
00:06:40,240 --> 00:06:45,199
however it significantly increases the

155
00:06:43,520 --> 00:06:49,359
size of unsorted level

156
00:06:45,199 --> 00:06:53,360
0. that makes level 0 to level 1

157
00:06:49,360 --> 00:06:55,840
compaction data reaches 15 gigabytes

158
00:06:53,360 --> 00:06:57,360
the large amount of compaction data

159
00:06:55,840 --> 00:07:01,280
making the period of

160
00:06:57,360 --> 00:07:03,759
right store extended severely hence

161
00:07:01,280 --> 00:07:04,719
we say the state-of-the-art solution

162
00:07:03,759 --> 00:07:08,000
nova sam

163
00:07:04,720 --> 00:07:11,520
is not sufficient to address the both

164
00:07:08,000 --> 00:07:11,520
two challenging issues

165
00:07:12,880 --> 00:07:19,280
from the above analysis we conclude that

166
00:07:16,080 --> 00:07:22,719
the r2 or level 0 to level 1 compaction

167
00:07:19,280 --> 00:07:24,559
is the main cause of right stock restore

168
00:07:22,720 --> 00:07:28,319
brings unpredictable

169
00:07:24,560 --> 00:07:31,840
and unstable performance the increased

170
00:07:28,319 --> 00:07:34,960
depth of lcm 3 is the main course of

171
00:07:31,840 --> 00:07:36,400
increased right amplification higher

172
00:07:34,960 --> 00:07:39,198
rate amplification

173
00:07:36,400 --> 00:07:40,479
brings decreased system performance

174
00:07:39,199 --> 00:07:43,360
especially

175
00:07:40,479 --> 00:07:46,000
decreased random right throughput

176
00:07:43,360 --> 00:07:49,120
motivated by these challenging issues

177
00:07:46,000 --> 00:07:50,639
we propose matrix kv that aims to

178
00:07:49,120 --> 00:07:53,919
reducing right stall

179
00:07:50,639 --> 00:07:54,639
and right amplification in lcmg-based kv

180
00:07:53,919 --> 00:07:58,479
stores

181
00:07:54,639 --> 00:08:04,240
by exploiting nvm

182
00:07:58,479 --> 00:08:04,240
next we will see the design of matrix kv

183
00:08:04,720 --> 00:08:08,960
this figure shows the overall

184
00:08:06,560 --> 00:08:12,960
architecture of matrix kv

185
00:08:08,960 --> 00:08:16,719
we add an nvm between dram and ssd

186
00:08:12,960 --> 00:08:19,758
so as we can see from the right figure

187
00:08:16,720 --> 00:08:23,759
from the from the top to the bottom

188
00:08:19,759 --> 00:08:24,400
dram batches right only m stores the top

189
00:08:23,759 --> 00:08:28,800
level of

190
00:08:24,400 --> 00:08:31,919
lsm3 with our proposed matrix container

191
00:08:28,800 --> 00:08:34,320
ssd stores the remaining levels of a

192
00:08:31,919 --> 00:08:38,000
flattened lsm tree

193
00:08:34,320 --> 00:08:41,200
matrix kv has four design strategies

194
00:08:38,000 --> 00:08:44,560
first the matrix container in mvn

195
00:08:41,200 --> 00:08:47,360
that stores and manage the unsorted

196
00:08:44,560 --> 00:08:47,359
level zero

197
00:08:47,920 --> 00:08:52,319
second the column compaction to reduce

198
00:08:50,800 --> 00:08:55,839
right stocks

199
00:08:52,320 --> 00:08:59,440
third the flattened lcm tree on ssd

200
00:08:55,839 --> 00:09:01,920
to reduce rack amplification and fourth

201
00:08:59,440 --> 00:09:05,680
the cross road hand surge to improve the

202
00:09:01,920 --> 00:09:08,800
read efficiency in nvm

203
00:09:05,680 --> 00:09:09,839
in the following i will introduce all

204
00:09:08,800 --> 00:09:13,279
the four

205
00:09:09,839 --> 00:09:16,240
design strategies one by one

206
00:09:13,279 --> 00:09:19,040
first let's see the metrics container

207
00:09:16,240 --> 00:09:20,800
matrix container manages the level zero

208
00:09:19,040 --> 00:09:23,279
of lsm3

209
00:09:20,800 --> 00:09:24,719
it consists of a receiver and a

210
00:09:23,279 --> 00:09:27,839
compactor

211
00:09:24,720 --> 00:09:29,600
for receiver it receives flushed memory

212
00:09:27,839 --> 00:09:32,640
table from dram

213
00:09:29,600 --> 00:09:35,200
and stores them row by row

214
00:09:32,640 --> 00:09:36,319
where each row is organized as a row

215
00:09:35,200 --> 00:09:39,360
table

216
00:09:36,320 --> 00:09:40,320
as showing this figure an immutable

217
00:09:39,360 --> 00:09:43,040
memory table

218
00:09:40,320 --> 00:09:44,080
flushed from the ram is stored in the

219
00:09:43,040 --> 00:09:47,839
receiver

220
00:09:44,080 --> 00:09:48,399
as a road table once the receiver is

221
00:09:47,839 --> 00:09:52,399
fully

222
00:09:48,399 --> 00:09:55,600
filled in process a it logically turns

223
00:09:52,399 --> 00:09:55,600
into a compactor

224
00:09:55,920 --> 00:10:01,599
then for compactor it compacts data from

225
00:09:59,680 --> 00:10:04,479
level 0 to level 1

226
00:10:01,600 --> 00:10:07,279
column by colon we call it colon

227
00:10:04,480 --> 00:10:10,560
compaction like this

228
00:10:07,279 --> 00:10:13,600
the mvm pages of a column are freed

229
00:10:10,560 --> 00:10:16,880
after the column compaction those three

230
00:10:13,600 --> 00:10:19,519
pages are returned to the free list

231
00:10:16,880 --> 00:10:21,920
and waiting for storing newly flushed

232
00:10:19,519 --> 00:10:21,920
data

233
00:10:23,440 --> 00:10:29,920
here we show the row table structure

234
00:10:26,560 --> 00:10:32,560
row table consists of data and metadata

235
00:10:29,920 --> 00:10:33,360
the data region stores serialized kv

236
00:10:32,560 --> 00:10:36,640
items

237
00:10:33,360 --> 00:10:41,600
from the immutable memory table the

238
00:10:36,640 --> 00:10:41,600
math data region is a sorted array

239
00:10:41,680 --> 00:10:47,680
each array map element maintains the key

240
00:10:44,800 --> 00:10:49,760
the page number the offsetting the page

241
00:10:47,680 --> 00:10:52,800
and a forward pointer

242
00:10:49,760 --> 00:10:56,160
for crossroad hinge search to locate a

243
00:10:52,800 --> 00:10:59,359
kv item in this row table

244
00:10:56,160 --> 00:11:00,240
we just need binary search the sorted

245
00:10:59,360 --> 00:11:03,680
array

246
00:11:00,240 --> 00:11:07,040
to get the target key and then

247
00:11:03,680 --> 00:11:07,680
its value can be indexed with the page

248
00:11:07,040 --> 00:11:10,480
number

249
00:11:07,680 --> 00:11:10,479
and offset

250
00:11:11,360 --> 00:11:15,120
with the matrix container and row table

251
00:11:14,000 --> 00:11:17,839
now we can do

252
00:11:15,120 --> 00:11:22,399
crop we can do the fine grained column

253
00:11:17,839 --> 00:11:22,399
compaction for level zero and level one

254
00:11:22,480 --> 00:11:28,800
the non-overlapped level one on ssd

255
00:11:25,920 --> 00:11:32,000
provide us sorted key space with

256
00:11:28,800 --> 00:11:35,920
multiple contiguous key ramps

257
00:11:32,000 --> 00:11:38,959
as shown in this figure the contiguous

258
00:11:35,920 --> 00:11:42,000
key range are 023

259
00:11:38,959 --> 00:11:46,239
325 528 and so

260
00:11:42,000 --> 00:11:47,839
on now i introduce the column compaction

261
00:11:46,240 --> 00:11:50,240
with an example

262
00:11:47,839 --> 00:11:51,920
column compaction starts from the first

263
00:11:50,240 --> 00:11:56,000
key range in level one

264
00:11:51,920 --> 00:12:00,000
that is zero two three then

265
00:11:56,000 --> 00:12:00,000
multiple threads in the compactor

266
00:12:00,320 --> 00:12:04,880
or multiple threads in the compactor

267
00:12:04,079 --> 00:12:08,079
searches

268
00:12:04,880 --> 00:12:11,279
the keys within the key range zero to

269
00:12:08,079 --> 00:12:13,519
three like this

270
00:12:11,279 --> 00:12:15,680
if the amount of data is under the

271
00:12:13,519 --> 00:12:19,120
threshold of a compaction

272
00:12:15,680 --> 00:12:21,680
the next key range 3 to 5 joins

273
00:12:19,120 --> 00:12:22,320
if the amount of data is still not

274
00:12:21,680 --> 00:12:26,800
enough

275
00:12:22,320 --> 00:12:30,240
the next range 5 to 8 joins

276
00:12:26,800 --> 00:12:34,319
so finally the compaction range is 0

277
00:12:30,240 --> 00:12:37,760
to 8. a logical column is formed

278
00:12:34,320 --> 00:12:38,399
with the data within the key range 0 to

279
00:12:37,760 --> 00:12:41,360
8

280
00:12:38,399 --> 00:12:42,160
and the column compaction merges the

281
00:12:41,360 --> 00:12:46,800
column

282
00:12:42,160 --> 00:12:49,199
and the first two ss tables in level 1.

283
00:12:46,800 --> 00:12:50,240
and then we do the next column

284
00:12:49,200 --> 00:12:54,639
compaction

285
00:12:50,240 --> 00:12:58,920
at range a to 30 and the next one

286
00:12:54,639 --> 00:13:02,079
so by processing level 0 to level 1

287
00:12:58,920 --> 00:13:05,199
compaction column by column

288
00:13:02,079 --> 00:13:06,638
each compaction only merges a small key

289
00:13:05,200 --> 00:13:10,079
range that has

290
00:13:06,639 --> 00:13:13,920
very limited amount of data

291
00:13:10,079 --> 00:13:16,880
hence the colon compaction can reduce

292
00:13:13,920 --> 00:13:21,680
right amplificate right stores due to

293
00:13:16,880 --> 00:13:24,560
all to all compaction

294
00:13:21,680 --> 00:13:25,519
since right amplification equals to af

295
00:13:24,560 --> 00:13:29,279
times

296
00:13:25,519 --> 00:13:32,240
the number of lcmg levels matches kb

297
00:13:29,279 --> 00:13:34,240
tries to flatten the lcm tree to reduce

298
00:13:32,240 --> 00:13:37,920
right amplification

299
00:13:34,240 --> 00:13:40,560
so what we do is keep the af

300
00:13:37,920 --> 00:13:43,120
on change while increasing the size of

301
00:13:40,560 --> 00:13:46,800
level 0 and level 1 to reduce

302
00:13:43,120 --> 00:13:49,920
the end due to colon compaction

303
00:13:46,800 --> 00:13:51,839
the size of level 0 and level 1 does not

304
00:13:49,920 --> 00:13:54,880
affect the overhead

305
00:13:51,839 --> 00:13:58,399
of level 0 to level 1 compaction it

306
00:13:54,880 --> 00:14:01,040
always add a limited amount of data

307
00:13:58,399 --> 00:14:02,480
since larger unsorted level 0 might

308
00:14:01,040 --> 00:14:05,599
decrease the read

309
00:14:02,480 --> 00:14:09,360
efficiency of matrix kv we propose

310
00:14:05,600 --> 00:14:09,360
crossroad hinge search next

311
00:14:10,160 --> 00:14:14,399
the process of cross rohing search

312
00:14:15,680 --> 00:14:20,880
to process the crossroad hinge search we

313
00:14:18,480 --> 00:14:23,920
need construct crossroad hint

314
00:14:20,880 --> 00:14:27,360
with forward pointers first

315
00:14:23,920 --> 00:14:27,839
for the key x in row table i its forward

316
00:14:27,360 --> 00:14:31,920
point

317
00:14:27,839 --> 00:14:35,680
indexes the key y in row table i minus 1

318
00:14:31,920 --> 00:14:39,199
where y always the first

319
00:14:35,680 --> 00:14:40,199
key that no less than x so for example

320
00:14:39,199 --> 00:14:43,959
here

321
00:14:40,199 --> 00:14:47,760
3.23 5.26

322
00:14:43,959 --> 00:14:50,399
7.28 and so on

323
00:14:47,760 --> 00:14:52,399
in this way we can logically sort all

324
00:14:50,399 --> 00:14:57,440
keys in level 0.

325
00:14:52,399 --> 00:15:00,240
now if we want to search the key 12

326
00:14:57,440 --> 00:15:01,040
we first binary search the row table 3

327
00:15:00,240 --> 00:15:04,480
to get

328
00:15:01,040 --> 00:15:08,000
two adjacent keys we where

329
00:15:04,480 --> 00:15:11,760
the 12 might reside that is

330
00:15:08,000 --> 00:15:12,000
key 10 and 23 with the forward pointer

331
00:15:11,760 --> 00:15:15,199
of

332
00:15:12,000 --> 00:15:19,279
10 and 23 we can go to row table

333
00:15:15,199 --> 00:15:22,479
2. the key 8 is added into

334
00:15:19,279 --> 00:15:26,320
our search region because 12 is between

335
00:15:22,480 --> 00:15:30,320
8 and 13.

336
00:15:26,320 --> 00:15:33,600
then we will go to row table 1

337
00:15:30,320 --> 00:15:37,519
with the forward pointer of key 8

338
00:15:33,600 --> 00:15:41,040
and 13 then we go to

339
00:15:37,519 --> 00:15:44,720
let row table 0 finally

340
00:15:41,040 --> 00:15:48,240
and find 12 in row table 0.

341
00:15:44,720 --> 00:15:51,279
from this yellow region we can see that

342
00:15:48,240 --> 00:15:51,839
cross row hinge search compares fewer

343
00:15:51,279 --> 00:15:54,639
keys

344
00:15:51,839 --> 00:15:55,519
thus reducing the search overhead

345
00:15:54,639 --> 00:15:58,720
compared to

346
00:15:55,519 --> 00:16:03,199
traverse all of the keys and

347
00:15:58,720 --> 00:16:03,199
com compares all of the keys

348
00:16:03,759 --> 00:16:10,160
for the evaluation we compare matrix kv

349
00:16:07,360 --> 00:16:13,440
with conventional rocks db

350
00:16:10,160 --> 00:16:16,319
which is the ssd based rock sleepy and

351
00:16:13,440 --> 00:16:19,759
the rocks db level 0 mbm

352
00:16:16,320 --> 00:16:22,240
where it put level 0 in nvm

353
00:16:19,759 --> 00:16:26,079
and the wrong assistants with dram and

354
00:16:22,240 --> 00:16:26,079
vm ssd hierarchy

355
00:16:26,160 --> 00:16:31,130
then is the stator for nova sc

356
00:16:29,440 --> 00:16:32,880
all the systems use

357
00:16:31,130 --> 00:16:37,839
[Music]

358
00:16:32,880 --> 00:16:37,839
8 gigabyte optin dcpm

359
00:16:39,040 --> 00:16:42,800
this figure shows the render right

360
00:16:41,759 --> 00:16:46,399
throughput

361
00:16:42,800 --> 00:16:48,639
with value sizes ranging from 64 byte to

362
00:16:46,399 --> 00:16:51,519
64 kilobyte

363
00:16:48,639 --> 00:16:53,600
generally matrix kv obtains the best

364
00:16:51,519 --> 00:16:57,120
random write performance in

365
00:16:53,600 --> 00:17:00,399
all the different value sizes we just

366
00:16:57,120 --> 00:17:03,680
take the 4 kb value size as an example

367
00:17:00,399 --> 00:17:04,559
matrix kv outperforms roxdb level 0 and

368
00:17:03,680 --> 00:17:08,959
the end

369
00:17:04,559 --> 00:17:12,559
by 3.6 times and outperforms knob sm

370
00:17:08,959 --> 00:17:16,720
by 2.6 times respectively

371
00:17:12,559 --> 00:17:19,199
next we will explain this advantage of

372
00:17:16,720 --> 00:17:21,600
matrix kv comes from two reasons

373
00:17:19,199 --> 00:17:26,240
the first phase reduced right store the

374
00:17:21,599 --> 00:17:26,240
second is decreased right amplification

375
00:17:27,199 --> 00:17:30,240
by recording the throughput in every 10

376
00:17:29,679 --> 00:17:32,960
seconds

377
00:17:30,240 --> 00:17:33,440
during the 80 gigabyte render node we

378
00:17:32,960 --> 00:17:36,640
see

379
00:17:33,440 --> 00:17:39,760
the fluctuation of system performance

380
00:17:36,640 --> 00:17:41,200
here matrix kv is represented by red

381
00:17:39,760 --> 00:17:44,640
line

382
00:17:41,200 --> 00:17:46,000
this figure shows that matches kv is the

383
00:17:44,640 --> 00:17:49,120
fastest to load

384
00:17:46,000 --> 00:17:52,400
the same 80 gigabyte data set

385
00:17:49,120 --> 00:17:53,360
and it has the most stable render right

386
00:17:52,400 --> 00:17:56,640
throughput

387
00:17:53,360 --> 00:17:57,199
which means we do reduce right stocks

388
00:17:56,640 --> 00:18:00,240
with

389
00:17:57,200 --> 00:18:04,160
colon compaction

390
00:18:00,240 --> 00:18:04,799
okay in terms of tail latency we can see

391
00:18:04,160 --> 00:18:07,360
that

392
00:18:04,799 --> 00:18:09,280
matrix kv obtains the shortest tail

393
00:18:07,360 --> 00:18:12,080
latency in all cases

394
00:18:09,280 --> 00:18:13,600
taking the 99 percentile latency as an

395
00:18:12,080 --> 00:18:16,799
example

396
00:18:13,600 --> 00:18:18,080
matches kv is 27 times lower than rock's

397
00:18:16,799 --> 00:18:21,520
db ssd

398
00:18:18,080 --> 00:18:23,280
five times lower than non-sm and 1.9

399
00:18:21,520 --> 00:18:28,960
times lower than roxdb

400
00:18:23,280 --> 00:18:32,240
level 0 in the end

401
00:18:28,960 --> 00:18:34,160
here we record each level 0 to level 1

402
00:18:32,240 --> 00:18:38,320
compaction to explain

403
00:18:34,160 --> 00:18:40,799
why matrix kv reduce right stars

404
00:18:38,320 --> 00:18:41,439
from this figure we can see that for

405
00:18:40,799 --> 00:18:44,879
each

406
00:18:41,440 --> 00:18:49,200
level 0 to level 1 compaction

407
00:18:44,880 --> 00:18:52,720
knob sm merges 15 gigabyte data

408
00:18:49,200 --> 00:18:57,760
known as ms rug cb ssd merges

409
00:18:52,720 --> 00:18:58,760
3.1 gigabyte data roxdb level 0nvm

410
00:18:57,760 --> 00:19:02,960
merges

411
00:18:58,760 --> 00:19:06,000
4.9 gigabyte data however

412
00:19:02,960 --> 00:19:09,039
matrix kv only merges 33

413
00:19:06,000 --> 00:19:13,039
megabyte data and it

414
00:19:09,039 --> 00:19:16,160
due the colon compaction for 467

415
00:19:13,039 --> 00:19:19,039
times so the small

416
00:19:16,160 --> 00:19:21,840
but multiple time compaction reduce

417
00:19:19,039 --> 00:19:21,840
right stock

418
00:19:23,280 --> 00:19:28,799
here we show the right amplification of

419
00:19:25,840 --> 00:19:31,918
randomly loading 80 gigabyte data set

420
00:19:28,799 --> 00:19:33,039
test results show that by flattening the

421
00:19:31,919 --> 00:19:36,080
lcmg

422
00:19:33,039 --> 00:19:39,879
matrix kv reduces right amplification

423
00:19:36,080 --> 00:19:42,960
than other resistance that's that is

424
00:19:39,880 --> 00:19:46,000
3.43 times

425
00:19:42,960 --> 00:19:47,200
here right amplification is calculated

426
00:19:46,000 --> 00:19:50,720
by the ratio

427
00:19:47,200 --> 00:19:55,200
of amount of data right into ssd

428
00:19:50,720 --> 00:19:55,200
to amount of data written by users

429
00:19:56,880 --> 00:20:00,640
in summary conventional ssd based kv

430
00:20:00,160 --> 00:20:04,559
store

431
00:20:00,640 --> 00:20:06,080
or has unpredict has unpredictable

432
00:20:04,559 --> 00:20:08,639
performance due to

433
00:20:06,080 --> 00:20:10,080
right stocks and decrease the

434
00:20:08,640 --> 00:20:14,480
performance due to

435
00:20:10,080 --> 00:20:14,480
higher right hand purification

436
00:20:14,559 --> 00:20:19,360
metrics can be built in lcm chip is the

437
00:20:16,880 --> 00:20:22,480
kb store for systems with dram

438
00:20:19,360 --> 00:20:26,158
ndm and ssd storage with

439
00:20:22,480 --> 00:20:27,120
four design strategies matrix kv reduces

440
00:20:26,159 --> 00:20:31,679
right store

441
00:20:27,120 --> 00:20:31,678
and improves right throughput finally

442
00:20:32,080 --> 00:20:35,840
thanks everyone

