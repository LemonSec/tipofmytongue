1
00:00:09,360 --> 00:00:14,399
hello everyone

2
00:00:11,040 --> 00:00:16,640
this is the talk about go pmem which is

3
00:00:14,400 --> 00:00:18,960
the end result of our efforts

4
00:00:16,640 --> 00:00:21,600
to add native support for programming

5
00:00:18,960 --> 00:00:24,320
persistent memory in go

6
00:00:21,600 --> 00:00:25,039
i am mohit and this work has been done

7
00:00:24,320 --> 00:00:27,840
jointly

8
00:00:25,039 --> 00:00:28,640
with my colleagues jadin rajesh and

9
00:00:27,840 --> 00:00:31,840
pratap

10
00:00:28,640 --> 00:00:31,840
at vmware

11
00:00:32,238 --> 00:00:37,199
first some details about persistent

12
00:00:34,399 --> 00:00:39,520
memory or pmem

13
00:00:37,200 --> 00:00:41,040
premium combines the best of ram and

14
00:00:39,520 --> 00:00:45,920
storage devices

15
00:00:41,040 --> 00:00:48,719
like ssds the read write latency of pmim

16
00:00:45,920 --> 00:00:49,440
is less than one microseconds compared

17
00:00:48,719 --> 00:00:52,800
to around

18
00:00:49,440 --> 00:00:54,000
100 nanoseconds for ddam and tens of

19
00:00:52,800 --> 00:00:58,640
microseconds for

20
00:00:54,000 --> 00:01:00,480
fast ssds premium can be accessed with

21
00:00:58,640 --> 00:01:03,600
load store instructions

22
00:01:00,480 --> 00:01:07,439
and so has byte addressability

23
00:01:03,600 --> 00:01:10,400
the data in pmim is non-volatile

24
00:01:07,439 --> 00:01:11,199
with all these features apps running on

25
00:01:10,400 --> 00:01:14,080
pmem

26
00:01:11,200 --> 00:01:16,799
can have better performance and instant

27
00:01:14,080 --> 00:01:16,798
restart time

28
00:01:16,880 --> 00:01:24,839
in this talk we present gopi mem

29
00:01:20,799 --> 00:01:27,520
which is an open source extension to go

30
00:01:24,840 --> 00:01:31,040
compiler it is based on

31
00:01:27,520 --> 00:01:33,920
go 1.11 and supports natively

32
00:01:31,040 --> 00:01:36,799
programming premium

33
00:01:33,920 --> 00:01:38,799
applications written using gop mem

34
00:01:36,799 --> 00:01:42,320
outperform the ones

35
00:01:38,799 --> 00:01:44,399
written using other solutions

36
00:01:42,320 --> 00:01:46,000
go premium has been developed with the

37
00:01:44,399 --> 00:01:49,200
intention to merge

38
00:01:46,000 --> 00:01:51,759
to official go distribution

39
00:01:49,200 --> 00:01:53,439
this resulted in minimal changes to the

40
00:01:51,759 --> 00:01:55,920
compiler code

41
00:01:53,439 --> 00:01:59,600
and programming model which is very

42
00:01:55,920 --> 00:01:59,600
similar to the existing models

43
00:02:00,159 --> 00:02:04,880
i will now discuss the design goals

44
00:02:02,640 --> 00:02:07,520
behind gopi mem

45
00:02:04,880 --> 00:02:08,000
a lot of these are obvious and we use

46
00:02:07,520 --> 00:02:10,959
them all

47
00:02:08,000 --> 00:02:14,319
the time today when we write programs

48
00:02:10,959 --> 00:02:17,040
operating on volatile data

49
00:02:14,319 --> 00:02:18,238
programming premium should be similar to

50
00:02:17,040 --> 00:02:21,040
programming data

51
00:02:18,239 --> 00:02:23,840
in volatile memory and so we will

52
00:02:21,040 --> 00:02:23,840
revisit these

53
00:02:24,000 --> 00:02:30,720
first single type system

54
00:02:27,520 --> 00:02:31,360
without a single type system each native

55
00:02:30,720 --> 00:02:33,440
type

56
00:02:31,360 --> 00:02:35,680
would need an equivalent type which will

57
00:02:33,440 --> 00:02:39,200
reside in pieman

58
00:02:35,680 --> 00:02:42,480
for example a user who wants to store an

59
00:02:39,200 --> 00:02:44,079
integer 10 they would now have to decide

60
00:02:42,480 --> 00:02:46,879
the type of 10

61
00:02:44,080 --> 00:02:47,840
based on its location whether it will be

62
00:02:46,879 --> 00:02:51,440
in pmem

63
00:02:47,840 --> 00:02:52,560
or ram this is not how today's programs

64
00:02:51,440 --> 00:02:56,160
work

65
00:02:52,560 --> 00:02:56,160
so we need a single type system

66
00:02:56,720 --> 00:03:01,680
support for two heaps many programming

67
00:03:00,319 --> 00:03:04,399
languages today

68
00:03:01,680 --> 00:03:05,519
split the virtual memory into various

69
00:03:04,400 --> 00:03:08,560
segments

70
00:03:05,519 --> 00:03:11,760
like data code stack

71
00:03:08,560 --> 00:03:14,080
heap in doing so

72
00:03:11,760 --> 00:03:16,239
they already manage a volatile heap

73
00:03:14,080 --> 00:03:18,239
residing in ram

74
00:03:16,239 --> 00:03:21,200
they should be extended to manage a

75
00:03:18,239 --> 00:03:21,200
persistent heap

76
00:03:21,760 --> 00:03:28,879
native pointers programming languages

77
00:03:25,840 --> 00:03:32,400
which provide access to pointers

78
00:03:28,879 --> 00:03:34,560
allow users to get and set data directly

79
00:03:32,400 --> 00:03:37,440
using these pointers

80
00:03:34,560 --> 00:03:38,239
so a user can directly do operations

81
00:03:37,440 --> 00:03:41,359
like

82
00:03:38,239 --> 00:03:43,560
star 0x100 equals 1

83
00:03:41,360 --> 00:03:44,799
to set the data residing at address

84
00:03:43,560 --> 00:03:47,920
0x100

85
00:03:44,799 --> 00:03:49,920
to 1. this is important

86
00:03:47,920 --> 00:03:52,159
because it provides a fast way to

87
00:03:49,920 --> 00:03:54,480
operate on data

88
00:03:52,159 --> 00:03:57,040
data present in pimen should be

89
00:03:54,480 --> 00:04:01,040
accessible in a similar way

90
00:03:57,040 --> 00:04:04,798
and so we need native pointers

91
00:04:01,040 --> 00:04:08,000
access premium data across restarts

92
00:04:04,799 --> 00:04:10,400
this is an easy one because data in

93
00:04:08,000 --> 00:04:12,879
premium is non-volatile

94
00:04:10,400 --> 00:04:14,480
we need a way to retrieve them after a

95
00:04:12,879 --> 00:04:17,760
restart

96
00:04:14,480 --> 00:04:17,760
and they should be easy to do

97
00:04:18,639 --> 00:04:24,720
crash consistent data updates

98
00:04:21,759 --> 00:04:27,120
this is needed because data in pmem is

99
00:04:24,720 --> 00:04:30,240
non-volatile

100
00:04:27,120 --> 00:04:32,880
imagine a doubly linked list in pmim and

101
00:04:30,240 --> 00:04:35,440
we are adding a new node

102
00:04:32,880 --> 00:04:37,680
we first update the tail node to point

103
00:04:35,440 --> 00:04:40,160
to the new node

104
00:04:37,680 --> 00:04:41,040
and then we update the back pointer from

105
00:04:40,160 --> 00:04:44,560
the new node

106
00:04:41,040 --> 00:04:44,560
to point to the original list

107
00:04:44,800 --> 00:04:49,919
if all goes well we get a new node added

108
00:04:48,639 --> 00:04:53,120
to the linked list

109
00:04:49,919 --> 00:04:55,198
but what happens if there is a crash

110
00:04:53,120 --> 00:04:56,320
before adding the back pointer from the

111
00:04:55,199 --> 00:04:59,520
new node

112
00:04:56,320 --> 00:05:00,800
as shown in the second diagram now we

113
00:04:59,520 --> 00:05:02,560
have a linked list

114
00:05:00,800 --> 00:05:04,880
which cannot be traversed in both the

115
00:05:02,560 --> 00:05:07,600
directions

116
00:05:04,880 --> 00:05:09,280
so there is inconsistency and we do not

117
00:05:07,600 --> 00:05:13,199
want that

118
00:05:09,280 --> 00:05:15,758
no matter what we want the addition

119
00:05:13,199 --> 00:05:17,280
of a new node to the linkages to be

120
00:05:15,759 --> 00:05:20,639
crash consistent

121
00:05:17,280 --> 00:05:20,638
as shown in the first diagram

122
00:05:21,840 --> 00:05:26,719
we want to be able to reuse functions

123
00:05:25,039 --> 00:05:28,479
a lot of our current programming

124
00:05:26,720 --> 00:05:31,039
practices rely

125
00:05:28,479 --> 00:05:32,240
on abstracting out operations as

126
00:05:31,039 --> 00:05:35,280
functions

127
00:05:32,240 --> 00:05:38,560
and reusing them from different places

128
00:05:35,280 --> 00:05:40,080
we want something similar we don't want

129
00:05:38,560 --> 00:05:42,639
to rewrite functions

130
00:05:40,080 --> 00:05:45,039
which do the same thing only for data

131
00:05:42,639 --> 00:05:48,080
residing in pmin

132
00:05:45,039 --> 00:05:50,320
so if we have a function irrespective of

133
00:05:48,080 --> 00:05:52,479
the location of its arguments

134
00:05:50,320 --> 00:05:55,759
whether it is in dram or pmm the

135
00:05:52,479 --> 00:05:55,758
function should just work

136
00:05:56,639 --> 00:06:02,160
we want the flexibility to make premium

137
00:05:58,880 --> 00:06:04,800
updates anywhere in our programs

138
00:06:02,160 --> 00:06:06,000
as i went over before we want data

139
00:06:04,800 --> 00:06:09,199
updates in pmim

140
00:06:06,000 --> 00:06:11,759
to be crash consistent and one way to do

141
00:06:09,199 --> 00:06:14,720
this is through transactions

142
00:06:11,759 --> 00:06:17,120
but transactions have overheads for

143
00:06:14,720 --> 00:06:19,840
example in an undo transaction

144
00:06:17,120 --> 00:06:22,080
all the updates are made in place but

145
00:06:19,840 --> 00:06:26,080
before an in-place update

146
00:06:22,080 --> 00:06:29,440
the old data is copied over first

147
00:06:26,080 --> 00:06:31,680
this degrades the performance of updates

148
00:06:29,440 --> 00:06:34,000
if we go back to our previous example of

149
00:06:31,680 --> 00:06:36,400
a doubly linked list

150
00:06:34,000 --> 00:06:37,919
a user may want to create a new doubly

151
00:06:36,400 --> 00:06:40,239
linked list in pmem

152
00:06:37,919 --> 00:06:42,799
and change the head head pointer to

153
00:06:40,240 --> 00:06:44,800
point to this new list

154
00:06:42,800 --> 00:06:47,440
with the flexibility to make pmim

155
00:06:44,800 --> 00:06:49,759
updates outside transactions

156
00:06:47,440 --> 00:06:51,039
user can create all the nodes in this

157
00:06:49,759 --> 00:06:53,919
new linked list

158
00:06:51,039 --> 00:06:57,840
outside the transaction and then

159
00:06:53,919 --> 00:06:57,840
atomically switch the head pointer

160
00:06:57,919 --> 00:07:01,520
this kind of flexibility also occurs

161
00:07:00,720 --> 00:07:04,319
well

162
00:07:01,520 --> 00:07:06,880
with techniques like shadow paging

163
00:07:04,319 --> 00:07:10,639
typically used in database applications

164
00:07:06,880 --> 00:07:10,639
to avoid transactional overheads

165
00:07:11,759 --> 00:07:18,560
with all the design goals behind us

166
00:07:14,880 --> 00:07:22,080
here is a program written in gobim

167
00:07:18,560 --> 00:07:24,400
this program adds a new node to the tail

168
00:07:22,080 --> 00:07:26,800
of a doubly linked list

169
00:07:24,400 --> 00:07:28,560
we will now look at each line and see

170
00:07:26,800 --> 00:07:31,199
what happens

171
00:07:28,560 --> 00:07:31,840
we want to highlight that this is very

172
00:07:31,199 --> 00:07:35,520
similar

173
00:07:31,840 --> 00:07:35,520
to existing go semantics

174
00:07:36,400 --> 00:07:40,400
first off we are creating a new node in

175
00:07:39,360 --> 00:07:43,520
premium

176
00:07:40,400 --> 00:07:46,960
using the go premium keyword pnew

177
00:07:43,520 --> 00:07:51,359
this is a language change we have added

178
00:07:46,960 --> 00:07:55,280
two premium allocation apis in go bmem

179
00:07:51,360 --> 00:07:59,280
pnew allocates zero valued objects

180
00:07:55,280 --> 00:08:02,719
similar to the existing go keyword new

181
00:07:59,280 --> 00:08:04,239
p make allocates zero valued go slices

182
00:08:02,720 --> 00:08:06,400
in email

183
00:08:04,240 --> 00:08:07,680
slices are an integral part of go

184
00:08:06,400 --> 00:08:09,599
language

185
00:08:07,680 --> 00:08:10,840
and can be thought of as an equivalent

186
00:08:09,599 --> 00:08:13,840
to c plus

187
00:08:10,840 --> 00:08:17,440
vectors

188
00:08:13,840 --> 00:08:20,159
txn is a go premium keyword to demarcate

189
00:08:17,440 --> 00:08:23,759
transaction boundaries

190
00:08:20,160 --> 00:08:26,560
internally it implements undo logging

191
00:08:23,759 --> 00:08:27,199
we support calling functions as we show

192
00:08:26,560 --> 00:08:30,400
here

193
00:08:27,199 --> 00:08:33,360
with the update tail function

194
00:08:30,400 --> 00:08:36,880
we also support most row statements

195
00:08:33,360 --> 00:08:36,880
inside dx in block

196
00:08:37,039 --> 00:08:41,360
expanding a bit more transactions in go

197
00:08:40,399 --> 00:08:43,679
premium

198
00:08:41,360 --> 00:08:45,440
are the way to make crash consistent

199
00:08:43,679 --> 00:08:48,640
updates

200
00:08:45,440 --> 00:08:51,200
these transactions support all the acid

201
00:08:48,640 --> 00:08:51,199
properties

202
00:08:51,920 --> 00:08:56,800
i will not talk more about how we solve

203
00:08:54,640 --> 00:08:59,040
the problem of isolation in go premium

204
00:08:56,800 --> 00:09:01,920
transactions

205
00:08:59,040 --> 00:09:03,439
go premium transactions can be used by

206
00:09:01,920 --> 00:09:07,199
multiple threads

207
00:09:03,440 --> 00:09:09,839
to make updates to data in premium

208
00:09:07,200 --> 00:09:12,160
imagine three threads accessing the tail

209
00:09:09,839 --> 00:09:14,880
of a doubly linked list

210
00:09:12,160 --> 00:09:16,560
one of them is updating the tail to

211
00:09:14,880 --> 00:09:20,399
point to a new node

212
00:09:16,560 --> 00:09:22,880
and others are reading the tail value

213
00:09:20,399 --> 00:09:24,240
because go gopm's transactions are undo

214
00:09:22,880 --> 00:09:27,600
transactions

215
00:09:24,240 --> 00:09:28,880
all the updates are in place so the

216
00:09:27,600 --> 00:09:32,959
first thread

217
00:09:28,880 --> 00:09:36,080
updates tail to its new value of 0x200

218
00:09:32,959 --> 00:09:39,199
and this update is in place at this

219
00:09:36,080 --> 00:09:40,399
point even though tail contains the new

220
00:09:39,200 --> 00:09:43,120
value

221
00:09:40,399 --> 00:09:45,360
the transaction is not over yet and can

222
00:09:43,120 --> 00:09:48,000
be potentially reverted

223
00:09:45,360 --> 00:09:49,440
so no threats in the system should be

224
00:09:48,000 --> 00:09:53,120
able to see

225
00:09:49,440 --> 00:09:56,399
tail equals 0x200 until the transaction

226
00:09:53,120 --> 00:09:56,399
is successfully completed

227
00:09:56,959 --> 00:10:00,880
we provide isolation in go premium

228
00:09:59,360 --> 00:10:05,760
transactions

229
00:10:00,880 --> 00:10:08,320
by requiring users to use gomutex

230
00:10:05,760 --> 00:10:11,279
mutexes are already a tool to provide

231
00:10:08,320 --> 00:10:14,240
isolation for critical sections

232
00:10:11,279 --> 00:10:15,680
go premium builds on this the

233
00:10:14,240 --> 00:10:19,200
concurrency model

234
00:10:15,680 --> 00:10:20,079
has two simple rules if a mutex was

235
00:10:19,200 --> 00:10:22,720
acquired

236
00:10:20,079 --> 00:10:23,279
outside the transaction it should be

237
00:10:22,720 --> 00:10:26,399
released

238
00:10:23,279 --> 00:10:27,200
outside the transaction the isolation in

239
00:10:26,399 --> 00:10:30,000
this case is

240
00:10:27,200 --> 00:10:33,519
natural because a transaction is inside

241
00:10:30,000 --> 00:10:35,440
the critical section

242
00:10:33,519 --> 00:10:37,040
if a mutex was acquired within a

243
00:10:35,440 --> 00:10:38,320
transaction

244
00:10:37,040 --> 00:10:40,240
it should be released within the

245
00:10:38,320 --> 00:10:42,480
transaction

246
00:10:40,240 --> 00:10:43,360
go premium provides isolation in this

247
00:10:42,480 --> 00:10:46,000
case

248
00:10:43,360 --> 00:10:48,959
by delaying mutex unlocks until the

249
00:10:46,000 --> 00:10:51,440
transaction is successfully over

250
00:10:48,959 --> 00:10:53,518
for a more detailed explanation and

251
00:10:51,440 --> 00:10:57,040
limitations of this approach

252
00:10:53,519 --> 00:10:58,839
please refer to our paper now jaren

253
00:10:57,040 --> 00:11:00,480
will walk you through the rest of the

254
00:10:58,839 --> 00:11:04,000
content

255
00:11:00,480 --> 00:11:07,279
we provide various premium apis to help

256
00:11:04,000 --> 00:11:10,720
users with premium initialization and

257
00:11:07,279 --> 00:11:15,120
restart first the

258
00:11:10,720 --> 00:11:18,480
init api is used to initialize gopi mem

259
00:11:15,120 --> 00:11:19,279
it takes a file as input and returns

260
00:11:18,480 --> 00:11:22,480
whether this

261
00:11:19,279 --> 00:11:24,079
is a first time initialization or not

262
00:11:22,480 --> 00:11:25,839
if this is not a first time

263
00:11:24,079 --> 00:11:28,160
initialization it

264
00:11:25,839 --> 00:11:30,640
also takes care of reverting any

265
00:11:28,160 --> 00:11:33,680
incomplete transactions

266
00:11:30,640 --> 00:11:36,480
next named object is a mechanism

267
00:11:33,680 --> 00:11:37,199
whereby names can be associated with

268
00:11:36,480 --> 00:11:41,360
objects in

269
00:11:37,200 --> 00:11:44,000
persistent memory the new and get apis

270
00:11:41,360 --> 00:11:44,640
respectively can be used to create and

271
00:11:44,000 --> 00:11:47,279
retrieve

272
00:11:44,640 --> 00:11:48,399
objects and persistent memory for

273
00:11:47,279 --> 00:11:50,720
example

274
00:11:48,399 --> 00:11:51,519
the code snippet shows creating and

275
00:11:50,720 --> 00:11:54,480
retrieving

276
00:11:51,519 --> 00:11:56,720
a named object called head depending on

277
00:11:54,480 --> 00:12:01,440
if it is the first time initialization

278
00:11:56,720 --> 00:12:04,399
or not so to summarize

279
00:12:01,440 --> 00:12:05,200
we highlight how our programming model

280
00:12:04,399 --> 00:12:08,959
achieves

281
00:12:05,200 --> 00:12:12,079
all the design goals that we mentioned

282
00:12:08,959 --> 00:12:15,439
line two shows a new node created

283
00:12:12,079 --> 00:12:18,959
using pnu go pmin

284
00:12:15,440 --> 00:12:22,000
uses a single type system so object

285
00:12:18,959 --> 00:12:26,560
n has the same pointer type as objects

286
00:12:22,000 --> 00:12:28,880
in volatile heap too go pmm runtime

287
00:12:26,560 --> 00:12:31,279
automatically manages both the premium

288
00:12:28,880 --> 00:12:34,480
and volatile key

289
00:12:31,279 --> 00:12:36,800
go payment also support premium updates

290
00:12:34,480 --> 00:12:40,480
outside transactions to objects that are

291
00:12:36,800 --> 00:12:43,199
not reachable from a named object

292
00:12:40,480 --> 00:12:44,720
the third line in the code snippet shows

293
00:12:43,200 --> 00:12:48,720
how the dxn keyword

294
00:12:44,720 --> 00:12:52,000
enables crash consistent data updates

295
00:12:48,720 --> 00:12:54,480
gopimen uses native pointers

296
00:12:52,000 --> 00:12:55,519
but offers features such as heap

297
00:12:54,480 --> 00:12:58,560
relocation

298
00:12:55,519 --> 00:13:03,120
that i will talk about later

299
00:12:58,560 --> 00:13:05,518
line 5 shows a premium pointer update

300
00:13:03,120 --> 00:13:06,560
premium pointers can be accessed and

301
00:13:05,519 --> 00:13:10,480
modified

302
00:13:06,560 --> 00:13:13,599
just like volatile memory pointers

303
00:13:10,480 --> 00:13:15,920
line 6 shows a function used inside a

304
00:13:13,600 --> 00:13:18,720
dxn block

305
00:13:15,920 --> 00:13:19,519
functions in go pmim can be called with

306
00:13:18,720 --> 00:13:22,560
volatile

307
00:13:19,519 --> 00:13:24,800
and persistent memory arguments

308
00:13:22,560 --> 00:13:26,959
additional overhead to enable crash

309
00:13:24,800 --> 00:13:30,560
consistent updates are incurred

310
00:13:26,959 --> 00:13:32,719
only for premium resident arguments

311
00:13:30,560 --> 00:13:35,599
go payment provides easy access to

312
00:13:32,720 --> 00:13:39,600
premium data after a restart

313
00:13:35,600 --> 00:13:43,839
line 20 and 22 shows how a named object

314
00:13:39,600 --> 00:13:43,839
can be created and retrieved

315
00:13:44,800 --> 00:13:49,279
now i'll talk about the runtime design

316
00:13:47,199 --> 00:13:51,439
that provide the building blocks

317
00:13:49,279 --> 00:13:53,519
upon which the features of co-payment

318
00:13:51,440 --> 00:13:57,040
are based on

319
00:13:53,519 --> 00:14:00,399
first go payment provides a premium heap

320
00:13:57,040 --> 00:14:03,360
and enables memory allocation and

321
00:14:00,399 --> 00:14:04,399
garbage collection on the premium heap

322
00:14:03,360 --> 00:14:07,600
the premium heap

323
00:14:04,399 --> 00:14:10,639
is dynamically sized applications

324
00:14:07,600 --> 00:14:12,560
start with a small heap that is expanded

325
00:14:10,639 --> 00:14:15,279
on demand

326
00:14:12,560 --> 00:14:15,599
pointer swizzling is a powerful feature

327
00:14:15,279 --> 00:14:19,920
that

328
00:14:15,600 --> 00:14:22,160
enables gop mem use native pointers

329
00:14:19,920 --> 00:14:23,760
go pmim provides a heap recovery

330
00:14:22,160 --> 00:14:26,480
mechanism

331
00:14:23,760 --> 00:14:27,279
this is what enables applications to run

332
00:14:26,480 --> 00:14:30,480
seamlessly

333
00:14:27,279 --> 00:14:31,199
across the crash and installed the

334
00:14:30,480 --> 00:14:34,240
runtime

335
00:14:31,199 --> 00:14:37,760
also provides cpu cache flushing support

336
00:14:34,240 --> 00:14:40,079
to ensure durability of data

337
00:14:37,760 --> 00:14:45,120
i'll go into the details of few of these

338
00:14:40,079 --> 00:14:47,599
aspects in the upcoming slides

339
00:14:45,120 --> 00:14:49,120
go payment extends the existing go

340
00:14:47,600 --> 00:14:52,160
memory allocator design

341
00:14:49,120 --> 00:14:55,040
to manage premium heap pmem

342
00:14:52,160 --> 00:14:57,279
is managed in arenas that are a multiple

343
00:14:55,040 --> 00:14:59,360
of 64 mb

344
00:14:57,279 --> 00:15:01,199
it should be noted that all data

345
00:14:59,360 --> 00:15:02,079
structures used to manage the premium

346
00:15:01,199 --> 00:15:05,439
keep

347
00:15:02,079 --> 00:15:07,599
stored in volatile memory but

348
00:15:05,440 --> 00:15:08,639
additional metadata is stored in the

349
00:15:07,600 --> 00:15:12,079
header of each

350
00:15:08,639 --> 00:15:13,440
arena to facilitate heat recovery the

351
00:15:12,079 --> 00:15:16,239
additional metadata

352
00:15:13,440 --> 00:15:19,040
occupies about 3.1 percentage of the

353
00:15:16,240 --> 00:15:19,040
arena space

354
00:15:20,079 --> 00:15:26,160
go payment enables applications to use

355
00:15:23,199 --> 00:15:28,319
pmem by mapping the premium file into

356
00:15:26,160 --> 00:15:31,439
its address page

357
00:15:28,320 --> 00:15:34,800
but what happens if the mapping address

358
00:15:31,440 --> 00:15:37,600
changes after application restart

359
00:15:34,800 --> 00:15:38,240
here the first figure shows the premium

360
00:15:37,600 --> 00:15:40,639
file

361
00:15:38,240 --> 00:15:42,720
mapped at address one zero zero during

362
00:15:40,639 --> 00:15:45,360
its first run

363
00:15:42,720 --> 00:15:48,240
in the second run the pmim file gets

364
00:15:45,360 --> 00:15:51,440
mapped at address200

365
00:15:48,240 --> 00:15:52,880
now all steward pointers in the heap are

366
00:15:51,440 --> 00:15:55,120
invalid

367
00:15:52,880 --> 00:15:57,199
for example the pointer that was

368
00:15:55,120 --> 00:16:01,199
pointing to address one one zero

369
00:15:57,199 --> 00:16:01,199
now becomes a dangling pointer

370
00:16:02,000 --> 00:16:07,120
pointer swizzling is a process by which

371
00:16:04,720 --> 00:16:10,079
the runtime fixes up these pointers

372
00:16:07,120 --> 00:16:10,800
in case the mapping address changes

373
00:16:10,079 --> 00:16:12,800
pointers

374
00:16:10,800 --> 00:16:15,599
are swizzled automatically during

375
00:16:12,800 --> 00:16:18,560
premium initialization

376
00:16:15,600 --> 00:16:19,839
to fix the dangling pointer go runtime

377
00:16:18,560 --> 00:16:23,439
changes it to point

378
00:16:19,839 --> 00:16:24,079
it to address 2 1 0 which is the correct

379
00:16:23,440 --> 00:16:27,360
swizzled

380
00:16:24,079 --> 00:16:30,800
address for it pointer swizzling

381
00:16:27,360 --> 00:16:34,240
enables go pmm to use native pointers to

382
00:16:30,800 --> 00:16:34,240
refer pmem objects

383
00:16:35,440 --> 00:16:39,360
heap recovery is a process by which the

384
00:16:38,240 --> 00:16:42,399
memory allocator

385
00:16:39,360 --> 00:16:45,759
and garbage collector state is recovered

386
00:16:42,399 --> 00:16:48,639
in case of an application restart

387
00:16:45,759 --> 00:16:50,079
first using the stored metadata in

388
00:16:48,639 --> 00:16:52,639
premium arenas

389
00:16:50,079 --> 00:16:54,079
the memory allocator volatile state is

390
00:16:52,639 --> 00:16:57,040
restored

391
00:16:54,079 --> 00:16:58,079
next if the memory mapping address

392
00:16:57,040 --> 00:17:01,759
changes

393
00:16:58,079 --> 00:17:04,720
then all steward pointers are swizzled

394
00:17:01,759 --> 00:17:05,760
next the garbage collector is run

395
00:17:04,720 --> 00:17:09,039
starting from

396
00:17:05,760 --> 00:17:10,000
the named objects the garbage collector

397
00:17:09,039 --> 00:17:13,039
traverses

398
00:17:10,000 --> 00:17:15,520
all reachable objects and plugs any

399
00:17:13,039 --> 00:17:17,919
leaked memory

400
00:17:15,520 --> 00:17:20,319
all steps in the heap recovery process

401
00:17:17,919 --> 00:17:22,079
is resilient to any crashes that happen

402
00:17:20,319 --> 00:17:25,199
in between

403
00:17:22,079 --> 00:17:27,599
once the heap is recovered and any

404
00:17:25,199 --> 00:17:32,400
incomplete transactions are reverted

405
00:17:27,599 --> 00:17:35,199
the application can resume execution

406
00:17:32,400 --> 00:17:37,120
a question that is frequently asked is

407
00:17:35,200 --> 00:17:40,240
why not provide payment support

408
00:17:37,120 --> 00:17:43,039
as a go package and why is native

409
00:17:40,240 --> 00:17:46,160
language stream is necessary

410
00:17:43,039 --> 00:17:47,039
there are a few reasons why with the

411
00:17:46,160 --> 00:17:50,080
library

412
00:17:47,039 --> 00:17:52,000
memory management becomes tricky it

413
00:17:50,080 --> 00:17:54,559
wouldn't be possible to leverage

414
00:17:52,000 --> 00:17:55,520
the existing memory allocator or garbage

415
00:17:54,559 --> 00:17:58,639
collector design

416
00:17:55,520 --> 00:18:00,320
provided by co as it is tightly coupled

417
00:17:58,640 --> 00:18:03,440
with the runtime and

418
00:18:00,320 --> 00:18:05,760
not accessible from a live ready

419
00:18:03,440 --> 00:18:07,840
libraries will need to introduce their

420
00:18:05,760 --> 00:18:10,160
own management of premium data

421
00:18:07,840 --> 00:18:12,480
such as doing reference counting which

422
00:18:10,160 --> 00:18:14,000
can get tricky

423
00:18:12,480 --> 00:18:15,679
the programming model would get

424
00:18:14,000 --> 00:18:18,480
complicated

425
00:18:15,679 --> 00:18:19,440
it would no longer be possible to use

426
00:18:18,480 --> 00:18:22,960
native types

427
00:18:19,440 --> 00:18:24,799
and pointers operators and pointers may

428
00:18:22,960 --> 00:18:25,679
need to be overloaded to provide

429
00:18:24,799 --> 00:18:28,720
functionalities

430
00:18:25,679 --> 00:18:30,799
such as transactional semantics

431
00:18:28,720 --> 00:18:32,720
programming languages have already been

432
00:18:30,799 --> 00:18:36,320
managing volatile memory for

433
00:18:32,720 --> 00:18:39,120
many years now we argue pmim

434
00:18:36,320 --> 00:18:42,559
which is another type of memory should

435
00:18:39,120 --> 00:18:44,959
also be managed by programming languages

436
00:18:42,559 --> 00:18:45,918
as i will talk about next our

437
00:18:44,960 --> 00:18:49,039
evaluations

438
00:18:45,919 --> 00:18:50,400
also prove that our effort to add native

439
00:18:49,039 --> 00:18:54,080
support performs

440
00:18:50,400 --> 00:18:54,080
much better than the other premium

441
00:18:54,840 --> 00:18:59,520
libraries

442
00:18:56,080 --> 00:19:00,799
to evaluate go pmim we ask two important

443
00:18:59,520 --> 00:19:03,039
questions

444
00:19:00,799 --> 00:19:04,160
do my applications run faster with

445
00:19:03,039 --> 00:19:06,799
premium

446
00:19:04,160 --> 00:19:09,360
and do my application restart faster

447
00:19:06,799 --> 00:19:12,080
after the crash

448
00:19:09,360 --> 00:19:13,360
we developed a redis server called go

449
00:19:12,080 --> 00:19:15,199
redis pmim

450
00:19:13,360 --> 00:19:16,879
to understand how a real world

451
00:19:15,200 --> 00:19:20,160
application can benefit from

452
00:19:16,880 --> 00:19:22,000
copymen we also use

453
00:19:20,160 --> 00:19:23,200
benchmarks from the computer language

454
00:19:22,000 --> 00:19:25,520
benchmarking

455
00:19:23,200 --> 00:19:26,640
to perform micro benchmarks of our

456
00:19:25,520 --> 00:19:30,160
memory allocator

457
00:19:26,640 --> 00:19:33,120
and transactions we compare against

458
00:19:30,160 --> 00:19:33,919
other premium libraries such as pmdk

459
00:19:33,120 --> 00:19:36,799
makalu

460
00:19:33,919 --> 00:19:36,799
and nemo simi

461
00:19:37,280 --> 00:19:43,520
first we compared performance of

462
00:19:40,320 --> 00:19:45,280
co-readers pmm against two other redis

463
00:19:43,520 --> 00:19:48,240
implementations

464
00:19:45,280 --> 00:19:50,799
pmdk readers which is the redis server

465
00:19:48,240 --> 00:19:53,760
written using pmdk library

466
00:19:50,799 --> 00:19:54,000
and vanilla red s which is the original

467
00:19:53,760 --> 00:19:56,160
c

468
00:19:54,000 --> 00:19:57,360
implementation of that is that stores

469
00:19:56,160 --> 00:20:00,480
its log files

470
00:19:57,360 --> 00:20:03,918
on ssd that is labeled as c

471
00:20:00,480 --> 00:20:04,960
redis ssd in the figure and on pmim used

472
00:20:03,919 --> 00:20:08,400
as block iu

473
00:20:04,960 --> 00:20:11,120
labelled as premium block iu

474
00:20:08,400 --> 00:20:12,240
as can be seen in the first graph go

475
00:20:11,120 --> 00:20:14,559
reduce pmim

476
00:20:12,240 --> 00:20:15,840
achieves 5x more throughput than c

477
00:20:14,559 --> 00:20:18,879
reduce ssd

478
00:20:15,840 --> 00:20:21,520
as the data size increases

479
00:20:18,880 --> 00:20:22,799
the second graph compares the restart

480
00:20:21,520 --> 00:20:25,600
time

481
00:20:22,799 --> 00:20:26,960
go reduce payment comes back up 20 times

482
00:20:25,600 --> 00:20:30,879
faster than c read as

483
00:20:26,960 --> 00:20:33,679
ssd when the database size is 3 gb

484
00:20:30,880 --> 00:20:35,679
this graph also captures the cost of

485
00:20:33,679 --> 00:20:38,240
pointers whistling

486
00:20:35,679 --> 00:20:39,520
when pointers need to be swizzled go

487
00:20:38,240 --> 00:20:43,600
redis premium

488
00:20:39,520 --> 00:20:46,240
takes as much time as c read as ssd

489
00:20:43,600 --> 00:20:48,320
but pointers need to be swizzled only

490
00:20:46,240 --> 00:20:50,480
when an application restarts

491
00:20:48,320 --> 00:20:52,320
and the mapping address changes the

492
00:20:50,480 --> 00:20:54,799
combination of which happens

493
00:20:52,320 --> 00:20:54,799
rarely

494
00:20:55,919 --> 00:20:59,919
we use the binary tree benchmark from

495
00:20:58,159 --> 00:21:02,240
the clpg suit

496
00:20:59,919 --> 00:21:04,080
to compare performance of your memory

497
00:21:02,240 --> 00:21:06,799
allocator

498
00:21:04,080 --> 00:21:07,760
the benchmark creates a number of binary

499
00:21:06,799 --> 00:21:11,200
trees

500
00:21:07,760 --> 00:21:14,158
and frees them to stress the allocator

501
00:21:11,200 --> 00:21:15,200
as seen in the graph go pmm's allocator

502
00:21:14,159 --> 00:21:19,919
performs

503
00:21:15,200 --> 00:21:21,760
up to 40x faster than pmdk and nemo cd

504
00:21:19,919 --> 00:21:23,679
memory allocations need to be

505
00:21:21,760 --> 00:21:26,879
transactional in pmdk

506
00:21:23,679 --> 00:21:30,159
and negoci go pmm

507
00:21:26,880 --> 00:21:33,200
and makalu optimizes allocations by

508
00:21:30,159 --> 00:21:34,320
not updating any metadata in pmem in the

509
00:21:33,200 --> 00:21:37,679
common case

510
00:21:34,320 --> 00:21:37,678
making them very fast

511
00:21:38,880 --> 00:21:44,480
next we use the farkaj n body benchmarks

512
00:21:42,960 --> 00:21:48,320
from clpg

513
00:21:44,480 --> 00:21:50,799
to evaluate performance of transactions

514
00:21:48,320 --> 00:21:51,678
vancouver's benchmark swaps elements of

515
00:21:50,799 --> 00:21:54,320
an array

516
00:21:51,679 --> 00:21:57,840
for all permutations of the array and

517
00:21:54,320 --> 00:22:01,039
models a long-running transaction

518
00:21:57,840 --> 00:22:01,520
nbody traces single step movement of a

519
00:22:01,039 --> 00:22:05,039
planet

520
00:22:01,520 --> 00:22:06,960
across space and models a short running

521
00:22:05,039 --> 00:22:09,679
transaction

522
00:22:06,960 --> 00:22:10,480
for both these benchmarks go payment

523
00:22:09,679 --> 00:22:15,039
performs

524
00:22:10,480 --> 00:22:15,039
up to 5x faster than vmdk

525
00:22:15,840 --> 00:22:19,840
to summarize gopm is an open source

526
00:22:19,039 --> 00:22:21,679
compiler

527
00:22:19,840 --> 00:22:23,678
that provides native support for

528
00:22:21,679 --> 00:22:25,919
programming dma

529
00:22:23,679 --> 00:22:27,760
we have created a website from which you

530
00:22:25,919 --> 00:22:30,880
can download copy mem

531
00:22:27,760 --> 00:22:34,080
and start using it right away

532
00:22:30,880 --> 00:22:37,200
it also has additional documentation and

533
00:22:34,080 --> 00:22:37,199
performance reports

534
00:22:38,880 --> 00:22:42,400
i would like to close with a call to

535
00:22:40,960 --> 00:22:45,039
action

536
00:22:42,400 --> 00:22:46,080
persistent memory dems are now available

537
00:22:45,039 --> 00:22:49,840
with the release of

538
00:22:46,080 --> 00:22:50,399
intel opt-in pmem our immediate next

539
00:22:49,840 --> 00:22:52,720
steps

540
00:22:50,400 --> 00:22:53,679
are to look into upstreaming our changes

541
00:22:52,720 --> 00:22:56,240
to google

542
00:22:53,679 --> 00:22:57,360
so we welcome suggestions and feedback

543
00:22:56,240 --> 00:23:00,720
from the community

544
00:22:57,360 --> 00:23:01,360
to help with that effort pmm makes it

545
00:23:00,720 --> 00:23:04,799
possible

546
00:23:01,360 --> 00:23:06,879
to build low latency storage stocks

547
00:23:04,799 --> 00:23:08,158
with the availability of both hardware

548
00:23:06,880 --> 00:23:11,360
and software support

549
00:23:08,159 --> 00:23:13,919
program premium we implore you to build

550
00:23:11,360 --> 00:23:14,559
the next low latency applications such

551
00:23:13,919 --> 00:23:17,919
as

552
00:23:14,559 --> 00:23:18,559
time series databases and those at edge

553
00:23:17,919 --> 00:23:23,840
devices

554
00:23:18,559 --> 00:23:36,320
using persistent memory

555
00:23:23,840 --> 00:23:38,399
thank you for listening to this talk

556
00:23:36,320 --> 00:23:38,399
you

