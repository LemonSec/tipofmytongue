1
00:00:08,160 --> 00:00:10,880
i'm jimmy from shanghai zhao tong

2
00:00:09,840 --> 00:00:13,280
university

3
00:00:10,880 --> 00:00:15,599
i'm glad to introduce our work which

4
00:00:13,280 --> 00:00:17,279
aims to harmonize the tension between

5
00:00:15,599 --> 00:00:18,960
performance and isolation in

6
00:00:17,279 --> 00:00:21,198
microkernels

7
00:00:18,960 --> 00:00:24,000
this is joint work with my colleagues

8
00:00:21,199 --> 00:00:26,480
and my advisors

9
00:00:24,000 --> 00:00:27,920
as we know a monolithic kernel

10
00:00:26,480 --> 00:00:30,240
implements and runs

11
00:00:27,920 --> 00:00:31,199
all the kernel subsystems in the kernel

12
00:00:30,240 --> 00:00:33,600
mode

13
00:00:31,199 --> 00:00:34,960
which can lead to extremely large code

14
00:00:33,600 --> 00:00:38,079
base

15
00:00:34,960 --> 00:00:41,360
for example today's linux contains

16
00:00:38,079 --> 00:00:42,320
over 20 million lines of code during

17
00:00:41,360 --> 00:00:44,399
long time

18
00:00:42,320 --> 00:00:46,079
there is no isolation among those

19
00:00:44,399 --> 00:00:48,480
subsystems

20
00:00:46,079 --> 00:00:51,039
a security vulnerability or long-term

21
00:00:48,480 --> 00:00:53,680
failure in any linux subsystem may

22
00:00:51,039 --> 00:00:56,800
affect the whole system

23
00:00:53,680 --> 00:00:59,359
on the contrary microkernels

24
00:00:56,800 --> 00:01:00,000
minimize the code running in the kernel

25
00:00:59,359 --> 00:01:03,039
mode

26
00:01:00,000 --> 00:01:05,920
by moving most os components such as

27
00:01:03,039 --> 00:01:06,560
file systems the network stack as well

28
00:01:05,920 --> 00:01:09,600
as

29
00:01:06,560 --> 00:01:11,280
device drivers into isolated user

30
00:01:09,600 --> 00:01:13,520
processes

31
00:01:11,280 --> 00:01:16,880
we name those components as system

32
00:01:13,520 --> 00:01:16,880
servers in this talk

33
00:01:17,040 --> 00:01:20,159
therefore microkernel-based operating

34
00:01:19,360 --> 00:01:22,720
systems

35
00:01:20,159 --> 00:01:24,479
can achieve advantages like better

36
00:01:22,720 --> 00:01:28,080
security or stronger

37
00:01:24,479 --> 00:01:31,439
photo isolation besides the success

38
00:01:28,080 --> 00:01:32,880
of micro kernels in safety or in safety

39
00:01:31,439 --> 00:01:37,360
critical scenarios

40
00:01:32,880 --> 00:01:39,679
such as the deployment of qmx in cars

41
00:01:37,360 --> 00:01:41,680
there is a resurgent interest in

42
00:01:39,680 --> 00:01:44,720
designing micro kernels

43
00:01:41,680 --> 00:01:49,119
for more general purpose applications

44
00:01:44,720 --> 00:01:49,119
google silicon is a typical example

45
00:01:50,399 --> 00:01:54,960
however a cost coming with microkernel

46
00:01:53,920 --> 00:01:57,280
is

47
00:01:54,960 --> 00:01:59,520
is its commonly lower performance

48
00:01:57,280 --> 00:02:03,360
compared with its monolithic

49
00:01:59,520 --> 00:02:06,880
counterparts the key factor of such cost

50
00:02:03,360 --> 00:02:10,318
is inter process communication ipc

51
00:02:06,880 --> 00:02:12,720
overhead between the system servers

52
00:02:10,318 --> 00:02:13,679
specifically a system called on

53
00:02:12,720 --> 00:02:16,560
monolithic

54
00:02:13,680 --> 00:02:17,360
kernel involves only one wrong trip

55
00:02:16,560 --> 00:02:20,800
between the

56
00:02:17,360 --> 00:02:23,599
user mode and the kernel mode and

57
00:02:20,800 --> 00:02:25,040
the interaction between different kernel

58
00:02:23,599 --> 00:02:28,238
subsystems

59
00:02:25,040 --> 00:02:32,480
are finished by function calls

60
00:02:28,239 --> 00:02:34,239
but for microkranom different systems

61
00:02:32,480 --> 00:02:36,959
different system servers running

62
00:02:34,239 --> 00:02:39,120
different user level processes

63
00:02:36,959 --> 00:02:40,319
applications need to invoke system

64
00:02:39,120 --> 00:02:43,599
servers through

65
00:02:40,319 --> 00:02:46,399
ipc's and the interaction

66
00:02:43,599 --> 00:02:48,000
between different servers are also based

67
00:02:46,400 --> 00:02:50,000
on ipc's

68
00:02:48,000 --> 00:02:52,800
which makes the whole procedure

69
00:02:50,000 --> 00:02:52,800
expensive

70
00:02:53,440 --> 00:03:00,079
we conducted an experiment with seculite

71
00:02:56,720 --> 00:03:03,120
and two system servers the x36

72
00:03:00,080 --> 00:03:04,720
file system and the sim program disk the

73
00:03:03,120 --> 00:03:08,080
results show that

74
00:03:04,720 --> 00:03:10,000
the ipc overhead is considerable in ipc

75
00:03:08,080 --> 00:03:12,800
intensive workloads

76
00:03:10,000 --> 00:03:13,519
specifically when the online micro

77
00:03:12,800 --> 00:03:16,800
kernel is

78
00:03:13,519 --> 00:03:18,480
seo4 which does lots of optimizations

79
00:03:16,800 --> 00:03:22,239
for its ipc

80
00:03:18,480 --> 00:03:24,798
only about 6 30 of the time

81
00:03:22,239 --> 00:03:26,159
spent on the servers are used to do real

82
00:03:24,799 --> 00:03:29,280
work

83
00:03:26,159 --> 00:03:31,159
if the underlying microkernel is zircon

84
00:03:29,280 --> 00:03:32,799
which does not embrace those

85
00:03:31,159 --> 00:03:37,679
optimizations

86
00:03:32,799 --> 00:03:41,040
the ipc cost will be even much higher

87
00:03:37,680 --> 00:03:44,560
actually ivcs not only bring

88
00:03:41,040 --> 00:03:47,920
direct costs such as privileged switch

89
00:03:44,560 --> 00:03:51,519
and process switch but also

90
00:03:47,920 --> 00:03:53,040
cause indirect costs including pollution

91
00:03:51,519 --> 00:03:56,560
to the cpu pipeline

92
00:03:53,040 --> 00:03:56,560
cash and tlb

93
00:03:57,280 --> 00:04:03,920
motivated by this our goal is reducing

94
00:04:00,799 --> 00:04:05,519
the ipc overhead while maintaining the

95
00:04:03,920 --> 00:04:08,720
isolation guarantee

96
00:04:05,519 --> 00:04:08,720
in microkernels

97
00:04:09,519 --> 00:04:16,160
recent hardware brings opportunities

98
00:04:12,879 --> 00:04:16,639
intel cpu adds a new feature feature

99
00:04:16,160 --> 00:04:18,959
named

100
00:04:16,639 --> 00:04:20,959
protection key for user space

101
00:04:18,959 --> 00:04:25,120
abbreviated as pku

102
00:04:20,959 --> 00:04:28,160
or mpk this feature allows

103
00:04:25,120 --> 00:04:31,680
allows to create isolated memory domains

104
00:04:28,160 --> 00:04:34,240
in a single address base more detailedly

105
00:04:31,680 --> 00:04:34,720
in each page table entry there are four

106
00:04:34,240 --> 00:04:37,520
bits

107
00:04:34,720 --> 00:04:38,000
to represent the memory domain id that

108
00:04:37,520 --> 00:04:41,840
named

109
00:04:38,000 --> 00:04:44,960
p key so a single address space can be

110
00:04:41,840 --> 00:04:47,679
divided into 16 memory domains

111
00:04:44,960 --> 00:04:49,520
and each memory page belongs to one of

112
00:04:47,680 --> 00:04:53,040
them

113
00:04:49,520 --> 00:04:55,280
this feature also adds a per cpu

114
00:04:53,040 --> 00:04:57,840
register named pkiu

115
00:04:55,280 --> 00:05:00,000
it marks the rewrite permission on

116
00:04:57,840 --> 00:05:02,479
different memory domains

117
00:05:00,000 --> 00:05:03,120
a thread can change its rewrite

118
00:05:02,479 --> 00:05:05,680
permission

119
00:05:03,120 --> 00:05:07,440
on different domains by directly

120
00:05:05,680 --> 00:05:11,680
modifying this regist

121
00:05:07,440 --> 00:05:11,680
instead of modifying page vegetables

122
00:05:12,000 --> 00:05:15,919
this feature has been exploited by

123
00:05:14,479 --> 00:05:18,560
pre-order work

124
00:05:15,919 --> 00:05:19,919
to achieve efficient intra-precise

125
00:05:18,560 --> 00:05:22,720
isolation

126
00:05:19,919 --> 00:05:23,680
preorder studies such as airing and

127
00:05:22,720 --> 00:05:27,120
hollow

128
00:05:23,680 --> 00:05:30,960
language into pku to build isolated

129
00:05:27,120 --> 00:05:34,160
domains in the application processes

130
00:05:30,960 --> 00:05:37,198
thus mutual distrusted modules can run

131
00:05:34,160 --> 00:05:39,600
in the same process

132
00:05:37,199 --> 00:05:40,400
the efficiency of such design is two

133
00:05:39,600 --> 00:05:43,039
phones

134
00:05:40,400 --> 00:05:45,280
first memory access checking is done by

135
00:05:43,039 --> 00:05:47,280
the cpu without leading to adding

136
00:05:45,280 --> 00:05:49,599
software overhead

137
00:05:47,280 --> 00:05:50,320
second switching between different

138
00:05:49,600 --> 00:05:52,800
modules

139
00:05:50,320 --> 00:05:54,560
are achieved by simply modifying the

140
00:05:52,800 --> 00:06:00,000
pkiu resist

141
00:05:54,560 --> 00:06:00,000
which only takes about 28 cycles

142
00:06:00,720 --> 00:06:05,680
the system servers on micro kernels are

143
00:06:03,440 --> 00:06:06,719
mutually isolated and they have

144
00:06:05,680 --> 00:06:10,000
well-defined

145
00:06:06,720 --> 00:06:12,880
interfaces which just matches the idea

146
00:06:10,000 --> 00:06:16,160
of intra-processed isolation

147
00:06:12,880 --> 00:06:18,400
therefore in this work we

148
00:06:16,160 --> 00:06:20,639
we want to introduce intra-process

149
00:06:18,400 --> 00:06:24,479
isolation to microkernels

150
00:06:20,639 --> 00:06:24,479
to achieve our design goals

151
00:06:25,199 --> 00:06:29,199
the first design choice is organizing

152
00:06:27,680 --> 00:06:32,400
different system servers

153
00:06:29,199 --> 00:06:34,720
into the same user level process

154
00:06:32,400 --> 00:06:37,280
the isolation between different servers

155
00:06:34,720 --> 00:06:40,800
is guaranteed by the ppu-based

156
00:06:37,280 --> 00:06:42,960
intro process isolation mechanism so the

157
00:06:40,800 --> 00:06:47,120
communication cost between different

158
00:06:42,960 --> 00:06:50,000
servers decreases but

159
00:06:47,120 --> 00:06:53,280
application still requires to invoke a

160
00:06:50,000 --> 00:06:56,639
server with traditional ipc's

161
00:06:53,280 --> 00:06:57,359
if the invoke in location only requires

162
00:06:56,639 --> 00:07:00,400
one system

163
00:06:57,360 --> 00:07:04,000
server such a design cannot benefit

164
00:07:00,400 --> 00:07:06,159
the performance the second

165
00:07:04,000 --> 00:07:08,800
design choice is to run the system

166
00:07:06,160 --> 00:07:12,000
servers within an application's

167
00:07:08,800 --> 00:07:13,919
address base therefore

168
00:07:12,000 --> 00:07:16,560
the performance problem in the first

169
00:07:13,919 --> 00:07:19,359
design choice is avoided

170
00:07:16,560 --> 00:07:20,720
however this design has several major

171
00:07:19,360 --> 00:07:23,599
drawbacks

172
00:07:20,720 --> 00:07:26,160
first it requires to map a server into

173
00:07:23,599 --> 00:07:29,280
multiple applications page tables

174
00:07:26,160 --> 00:07:32,880
which makes updating the server's memory

175
00:07:29,280 --> 00:07:33,440
mappings especially expensive since it

176
00:07:32,880 --> 00:07:36,880
need to

177
00:07:33,440 --> 00:07:40,319
update all the applications page tables

178
00:07:36,880 --> 00:07:41,120
second the cost to setting up the ipc

179
00:07:40,319 --> 00:07:43,680
connection

180
00:07:41,120 --> 00:07:45,199
is non-negligible because mapping a

181
00:07:43,680 --> 00:07:48,720
system server requires

182
00:07:45,199 --> 00:07:51,039
intensive pitch table modifications

183
00:07:48,720 --> 00:07:52,560
sir this design restricts the

184
00:07:51,039 --> 00:07:55,039
application's ability

185
00:07:52,560 --> 00:07:58,160
to use the whole address space as well

186
00:07:55,039 --> 00:08:01,360
as the pq hardware

187
00:07:58,160 --> 00:08:04,080
therefore both of our initial designs

188
00:08:01,360 --> 00:08:07,039
are not satisfying

189
00:08:04,080 --> 00:08:09,039
fortunately we have a new observation on

190
00:08:07,039 --> 00:08:12,080
the pq hardware

191
00:08:09,039 --> 00:08:15,199
as its name indicates pko appears

192
00:08:12,080 --> 00:08:17,198
to only effectively effective in user

193
00:08:15,199 --> 00:08:20,400
space

194
00:08:17,199 --> 00:08:23,280
however we observe that no matter in

195
00:08:20,400 --> 00:08:24,318
kernel space between 0 or user space

196
00:08:23,280 --> 00:08:28,080
ring 3

197
00:08:24,319 --> 00:08:31,039
pq capable pko capable cpus

198
00:08:28,080 --> 00:08:33,039
transparently enforce permission checks

199
00:08:31,039 --> 00:08:36,319
on memory accesses

200
00:08:33,039 --> 00:08:39,360
only if the user kernel bit

201
00:08:36,320 --> 00:08:43,360
of the corresponding page table entry is

202
00:08:39,360 --> 00:08:46,560
user which means user accessible

203
00:08:43,360 --> 00:08:49,120
hence pku as a lightweight

204
00:08:46,560 --> 00:08:51,279
hardware feature also offers an

205
00:08:49,120 --> 00:08:54,480
opportunity to achieve efficient

206
00:08:51,279 --> 00:08:56,800
intra-kernel isolation if all the pitch

207
00:08:54,480 --> 00:09:02,080
table entries for the kernel memory

208
00:08:56,800 --> 00:09:02,079
are marked with u-beat instead of k-bit

209
00:09:02,320 --> 00:09:06,560
based on this observation we propose the

210
00:09:05,519 --> 00:09:10,160
final design

211
00:09:06,560 --> 00:09:11,359
named underbridge which leverages the pq

212
00:09:10,160 --> 00:09:14,240
hardware feature

213
00:09:11,360 --> 00:09:14,720
to achieve intra kernel isolation and

214
00:09:14,240 --> 00:09:18,160
syncs

215
00:09:14,720 --> 00:09:21,440
the system servers into the kernel space

216
00:09:18,160 --> 00:09:24,160
while maintaining their well-defined ipc

217
00:09:21,440 --> 00:09:24,160
interfaces

218
00:09:25,040 --> 00:09:29,279
generally speaking on the bridge puts

219
00:09:28,000 --> 00:09:31,680
the system servers

220
00:09:29,279 --> 00:09:33,519
which are user level processes in

221
00:09:31,680 --> 00:09:36,560
traditional micro kernels

222
00:09:33,519 --> 00:09:38,320
back into the kernel space like a

223
00:09:36,560 --> 00:09:41,599
monolithic kernel

224
00:09:38,320 --> 00:09:44,480
it only takes one long trip between user

225
00:09:41,600 --> 00:09:46,959
and kernel for an application to invoke

226
00:09:44,480 --> 00:09:49,279
a system functionality

227
00:09:46,959 --> 00:09:50,399
also the interaction between different

228
00:09:49,279 --> 00:09:52,880
systems

229
00:09:50,399 --> 00:09:53,839
different system servers becomes more

230
00:09:52,880 --> 00:09:56,240
efficient

231
00:09:53,839 --> 00:09:58,320
since no address-based switching is

232
00:09:56,240 --> 00:10:00,880
required

233
00:09:58,320 --> 00:10:02,480
on the bridge constructs exclusion

234
00:10:00,880 --> 00:10:05,839
domains with pku

235
00:10:02,480 --> 00:10:07,519
in the kernel space and let one system

236
00:10:05,839 --> 00:10:10,240
server execute in one

237
00:10:07,519 --> 00:10:10,959
execution domain different execution

238
00:10:10,240 --> 00:10:15,040
domains

239
00:10:10,959 --> 00:10:17,680
can be connected by ipc gates

240
00:10:15,040 --> 00:10:18,560
one thing to mention to use pku in

241
00:10:17,680 --> 00:10:20,800
kernel space

242
00:10:18,560 --> 00:10:21,760
on the bridge tags all the kind of

243
00:10:20,800 --> 00:10:24,079
memory pages

244
00:10:21,760 --> 00:10:25,040
as user accessible in the kernel page

245
00:10:24,079 --> 00:10:28,399
table

246
00:10:25,040 --> 00:10:31,519
as said before however marking

247
00:10:28,399 --> 00:10:34,160
kernel memory as user accessible enables

248
00:10:31,519 --> 00:10:37,440
unprivileged user space applications

249
00:10:34,160 --> 00:10:38,399
to access kernel memory directly so on

250
00:10:37,440 --> 00:10:41,760
bridge maps

251
00:10:38,399 --> 00:10:45,200
kernel makes the kernel to use

252
00:10:41,760 --> 00:10:45,200
a separate page table

253
00:10:45,519 --> 00:10:48,880
on the bridge views isolated execution

254
00:10:48,160 --> 00:10:52,079
domains

255
00:10:48,880 --> 00:10:55,279
over pku memory domains and

256
00:10:52,079 --> 00:10:58,719
confines each system servers in

257
00:10:55,279 --> 00:11:01,439
an individual execution domain

258
00:10:58,720 --> 00:11:02,640
execution domain is especially

259
00:11:01,440 --> 00:11:07,279
specialized

260
00:11:02,640 --> 00:11:07,279
for running the trustworthy microcurrent

261
00:11:07,519 --> 00:11:13,440
every other execution domain has

262
00:11:10,800 --> 00:11:14,000
a private memory domain and can only

263
00:11:13,440 --> 00:11:18,160
access

264
00:11:14,000 --> 00:11:21,279
its private domain by default

265
00:11:18,160 --> 00:11:22,719
a system server exclusively running in

266
00:11:21,279 --> 00:11:26,000
one execution domain

267
00:11:22,720 --> 00:11:28,880
stores its data stack and heap regions

268
00:11:26,000 --> 00:11:30,320
in its private memory domain which

269
00:11:28,880 --> 00:11:34,320
cannot be accessed

270
00:11:30,320 --> 00:11:38,160
by other servers on the bridge insurance

271
00:11:34,320 --> 00:11:41,040
an execution domain can only access

272
00:11:38,160 --> 00:11:43,120
allow the memory domains by configuring

273
00:11:41,040 --> 00:11:45,760
its pkio latest

274
00:11:43,120 --> 00:11:48,959
it also forbids the execution domain

275
00:11:45,760 --> 00:11:51,680
from modifying these values

276
00:11:48,959 --> 00:11:53,359
shared memory between two servers is

277
00:11:51,680 --> 00:11:56,479
allocated

278
00:11:53,360 --> 00:11:57,920
by allowing them to access a free memory

279
00:11:56,480 --> 00:12:01,040
domain

280
00:11:57,920 --> 00:12:04,160
together shared memory between

281
00:12:01,040 --> 00:12:04,800
a server and a micro kernel does not

282
00:12:04,160 --> 00:12:07,279
occupy

283
00:12:04,800 --> 00:12:09,920
extra free memory domain because

284
00:12:07,279 --> 00:12:12,399
microkernel can directly access all the

285
00:12:09,920 --> 00:12:12,399
memory

286
00:12:13,200 --> 00:12:19,920
even though the system servers reside

287
00:12:16,480 --> 00:12:22,639
in the same kernel space their eyes

288
00:12:19,920 --> 00:12:25,760
they are isolated from each other and

289
00:12:22,639 --> 00:12:28,480
their ipc interfaces are preserved

290
00:12:25,760 --> 00:12:30,240
when connecting two system servers in

291
00:12:28,480 --> 00:12:33,440
the execution domains

292
00:12:30,240 --> 00:12:36,639
the micro kernel generates an ipc gate

293
00:12:33,440 --> 00:12:39,440
for them leipzig gate resides

294
00:12:36,639 --> 00:12:40,000
in memory domain 0 which can only be

295
00:12:39,440 --> 00:12:42,959
read

296
00:12:40,000 --> 00:12:43,760
or written by the microcurrent so for

297
00:12:42,959 --> 00:12:48,000
servers

298
00:12:43,760 --> 00:12:51,519
ipc gates are execute only

299
00:12:48,000 --> 00:12:53,279
during an ipc invocation the gate

300
00:12:51,519 --> 00:12:56,480
transfers the control flow

301
00:12:53,279 --> 00:12:57,439
from the caller to the callee to be more

302
00:12:56,480 --> 00:13:00,399
specific

303
00:12:57,440 --> 00:13:02,639
it seems the caller's execution state

304
00:13:00,399 --> 00:13:03,440
switches the colleague's execution

305
00:13:02,639 --> 00:13:06,639
domain

306
00:13:03,440 --> 00:13:10,560
by setting the pkiu register and

307
00:13:06,639 --> 00:13:13,760
restores the quality's execution state

308
00:13:10,560 --> 00:13:16,239
besides ipc gates also exists between

309
00:13:13,760 --> 00:13:18,720
the micro kernel and the servers

310
00:13:16,240 --> 00:13:21,600
which enables an interaction between the

311
00:13:18,720 --> 00:13:24,560
micro kernel and the servers

312
00:13:21,600 --> 00:13:25,519
those internal system servers invoke

313
00:13:24,560 --> 00:13:29,119
system calls

314
00:13:25,519 --> 00:13:30,639
through dedicated ivc gates connected

315
00:13:29,120 --> 00:13:33,760
with the micro kernel

316
00:13:30,639 --> 00:13:36,480
instead of using system called sysco

317
00:13:33,760 --> 00:13:36,480
instructions

318
00:13:37,839 --> 00:13:45,480
spku provides 16 memory domains in total

319
00:13:42,800 --> 00:13:46,959
and each execution domain requires to

320
00:13:45,480 --> 00:13:49,360
exclusively use

321
00:13:46,959 --> 00:13:51,119
one memory domain underbridge can

322
00:13:49,360 --> 00:13:54,320
support at most

323
00:13:51,120 --> 00:13:56,880
16 execution domains concurrently

324
00:13:54,320 --> 00:13:58,720
including the reserved one for the

325
00:13:56,880 --> 00:14:02,800
microkernel

326
00:13:58,720 --> 00:14:05,360
netherlands most system servers

327
00:14:02,800 --> 00:14:06,240
can be required considering the number

328
00:14:05,360 --> 00:14:08,959
of different

329
00:14:06,240 --> 00:14:09,839
device drivers when the number of

330
00:14:08,959 --> 00:14:12,959
concurrent

331
00:14:09,839 --> 00:14:16,240
system servers exceeds 15

332
00:14:12,959 --> 00:14:19,119
one solution is time multiplexing but

333
00:14:16,240 --> 00:14:20,320
it will not only restrict the

334
00:14:19,120 --> 00:14:22,800
concurrency but

335
00:14:20,320 --> 00:14:24,399
also increase non-negligible switching

336
00:14:22,800 --> 00:14:27,760
overhead

337
00:14:24,399 --> 00:14:31,040
therefore on the bridge in the enable

338
00:14:27,760 --> 00:14:32,240
server migration which can dynamically

339
00:14:31,040 --> 00:14:35,680
move servers

340
00:14:32,240 --> 00:14:37,519
between user and kernel space to ease

341
00:14:35,680 --> 00:14:40,880
the migration procedure

342
00:14:37,519 --> 00:14:42,000
the micro kernel aligns disjoint virtual

343
00:14:40,880 --> 00:14:45,199
memory regions

344
00:14:42,000 --> 00:14:48,399
for different system servers but never

345
00:14:45,199 --> 00:14:51,519
runs in an exclusion domain or in a

346
00:14:48,399 --> 00:14:55,279
user process a server always uses

347
00:14:51,519 --> 00:14:57,760
the same virtual addresses

348
00:14:55,279 --> 00:14:58,639
according to either online or offline

349
00:14:57,760 --> 00:15:01,279
profiling

350
00:14:58,639 --> 00:15:03,199
on the bridge can run frequently used or

351
00:15:01,279 --> 00:15:05,920
performance critical servers

352
00:15:03,199 --> 00:15:06,959
in kernel space while accommodating

353
00:15:05,920 --> 00:15:10,479
other servers

354
00:15:06,959 --> 00:15:10,479
in the user processes

355
00:15:11,360 --> 00:15:14,480
in traditional micro kernels system

356
00:15:13,839 --> 00:15:17,680
servers

357
00:15:14,480 --> 00:15:19,120
only have ring 3 privilege to achieve

358
00:15:17,680 --> 00:15:21,279
the same security and

359
00:15:19,120 --> 00:15:22,639
isolation guarantee as the traditional

360
00:15:21,279 --> 00:15:24,800
micro kernels

361
00:15:22,639 --> 00:15:26,480
on the bridge should restrict the

362
00:15:24,800 --> 00:15:29,519
server's behavior

363
00:15:26,480 --> 00:15:32,720
when running them in room 0.

364
00:15:29,519 --> 00:15:35,600
otherwise a compromised server may fund

365
00:15:32,720 --> 00:15:38,720
and execute privileged instructions at

366
00:15:35,600 --> 00:15:43,680
unaligned instruction boundaries

367
00:15:38,720 --> 00:15:46,480
with rp to threaten the whole system

368
00:15:43,680 --> 00:15:47,839
when possible defense one possible

369
00:15:46,480 --> 00:15:51,279
defense solution

370
00:15:47,839 --> 00:15:54,880
is to enforce control flow integrity

371
00:15:51,279 --> 00:15:58,240
which ensures the servers cannot

372
00:15:54,880 --> 00:16:00,079
execute any illegal control flow leading

373
00:15:58,240 --> 00:16:03,800
to executing privileged

374
00:16:00,079 --> 00:16:06,800
instructions however cfi

375
00:16:03,800 --> 00:16:10,880
instrumentations inevitably

376
00:16:06,800 --> 00:16:13,439
brings obvious long-time overhead

377
00:16:10,880 --> 00:16:14,720
another common solution for the similar

378
00:16:13,440 --> 00:16:18,480
problem

379
00:16:14,720 --> 00:16:21,920
is binary scanning and rewriting

380
00:16:18,480 --> 00:16:22,560
which ensures the unwanted instructions

381
00:16:21,920 --> 00:16:25,839
do not

382
00:16:22,560 --> 00:16:28,079
exist in the code however

383
00:16:25,839 --> 00:16:29,040
there are too many privileged

384
00:16:28,079 --> 00:16:32,239
instructions

385
00:16:29,040 --> 00:16:33,360
which makes such solution infeasible for

386
00:16:32,240 --> 00:16:36,639
example

387
00:16:33,360 --> 00:16:39,600
the hot instruction only takes one byte

388
00:16:36,639 --> 00:16:40,000
it is almost impossible to eliminate

389
00:16:39,600 --> 00:16:43,199
such

390
00:16:40,000 --> 00:16:46,079
instructions so

391
00:16:43,199 --> 00:16:47,120
on-bridge combines the usage of hardware

392
00:16:46,079 --> 00:16:50,239
virtualization

393
00:16:47,120 --> 00:16:52,800
and binary writing to prevent the

394
00:16:50,240 --> 00:16:55,920
execution of privileged instructions

395
00:16:52,800 --> 00:16:58,160
in system servers on the bridge

396
00:16:55,920 --> 00:16:59,040
runs the micro kernel in the long route

397
00:16:58,160 --> 00:17:01,920
mode and

398
00:16:59,040 --> 00:17:03,360
deploys a tiny secure monitor in the

399
00:17:01,920 --> 00:17:06,000
root mode

400
00:17:03,360 --> 00:17:06,559
for most privileged instructions that

401
00:17:06,000 --> 00:17:09,520
are not

402
00:17:06,559 --> 00:17:11,199
in the critical policies such as hot

403
00:17:09,520 --> 00:17:14,559
instructions

404
00:17:11,199 --> 00:17:17,679
we configure them to to trigger

405
00:17:14,559 --> 00:17:19,280
vm exit and enforce permission checks in

406
00:17:17,679 --> 00:17:23,120
the monitor

407
00:17:19,280 --> 00:17:23,119
for others that exists

408
00:17:23,439 --> 00:17:27,520
on the critical path such as writing

409
00:17:26,319 --> 00:17:30,399
writing cr3

410
00:17:27,520 --> 00:17:33,760
instructions we carefully handle them

411
00:17:30,400 --> 00:17:36,799
using binary scanning and rewriting

412
00:17:33,760 --> 00:17:39,760
such a hybrid solution is both efficient

413
00:17:36,799 --> 00:17:39,760
and effective

414
00:17:40,160 --> 00:17:43,520
due to the time limitation this

415
00:17:42,559 --> 00:17:45,600
presentation

416
00:17:43,520 --> 00:17:46,559
skips some parts like how to

417
00:17:45,600 --> 00:17:50,000
authenticate

418
00:17:46,559 --> 00:17:50,879
ipc capability if you want to if you are

419
00:17:50,000 --> 00:17:54,559
interested

420
00:17:50,880 --> 00:17:54,559
please refer to our paper

421
00:17:55,120 --> 00:17:58,479
let's have a quick look on the

422
00:17:56,880 --> 00:18:02,320
performance screen brought by

423
00:17:58,480 --> 00:18:05,600
on the bridge we measure the

424
00:18:02,320 --> 00:18:06,159
long-trip latency of invoking an empty

425
00:18:05,600 --> 00:18:09,199
function

426
00:18:06,160 --> 00:18:12,240
in one server from another server

427
00:18:09,200 --> 00:18:14,799
this figure shows the absolute cost

428
00:18:12,240 --> 00:18:16,400
of cloud server ipc's in different

429
00:18:14,799 --> 00:18:19,120
designs

430
00:18:16,400 --> 00:18:20,000
the latency of an ipc round trip in

431
00:18:19,120 --> 00:18:24,159
under bridge

432
00:18:20,000 --> 00:18:27,520
is around 109 cycles

433
00:18:24,160 --> 00:18:31,039
which is dominated by two pkiu

434
00:18:27,520 --> 00:18:32,000
writing instructions compared with

435
00:18:31,039 --> 00:18:35,360
skybridge

436
00:18:32,000 --> 00:18:36,080
which is the status art optimization for

437
00:18:35,360 --> 00:18:39,439
ipc

438
00:18:36,080 --> 00:18:42,000
micro kernels by using well func

439
00:18:39,440 --> 00:18:43,280
on the bridge is still faster because

440
00:18:42,000 --> 00:18:46,480
guy bridge requires

441
00:18:43,280 --> 00:18:49,200
too much high rear when funk

442
00:18:46,480 --> 00:18:49,200
instructions

443
00:18:50,320 --> 00:18:57,918
to demonstrate on the bridge efficiency

444
00:18:53,919 --> 00:19:01,120
we also ported it to three popular micro

445
00:18:57,919 --> 00:19:02,480
kernels we evaluate the throughput of

446
00:19:01,120 --> 00:19:05,918
circulite

447
00:19:02,480 --> 00:19:09,120
application with ycsb as a workload

448
00:19:05,919 --> 00:19:11,760
which represents an ipc in intensive

449
00:19:09,120 --> 00:19:15,120
benchmarks

450
00:19:11,760 --> 00:19:15,600
for seo 4 which is the most efficient

451
00:19:15,120 --> 00:19:18,639
one

452
00:19:15,600 --> 00:19:19,280
among the three micro kernels on the

453
00:19:18,640 --> 00:19:22,559
bridge

454
00:19:19,280 --> 00:19:27,760
can improve the application

455
00:19:22,559 --> 00:19:30,879
throughput by up to 105 percent

456
00:19:27,760 --> 00:19:35,440
compared with sky bridge on the bridge

457
00:19:30,880 --> 00:19:39,840
can also improve the throughput by up to

458
00:19:35,440 --> 00:19:39,840
35 percent

459
00:19:41,039 --> 00:19:47,600
so in ipc intensive benchmarks

460
00:19:44,480 --> 00:19:52,160
on the bridge can bring obvious

461
00:19:47,600 --> 00:19:54,959
performance benefits

462
00:19:52,160 --> 00:19:56,080
in one word on the bridge leverages

463
00:19:54,960 --> 00:19:59,039
pku-based

464
00:19:56,080 --> 00:20:02,080
intra-kernel isolation to redesign the

465
00:19:59,039 --> 00:20:06,000
long-term structure of micro kernel oss

466
00:20:02,080 --> 00:20:08,639
for faster system services besides

467
00:20:06,000 --> 00:20:09,760
such an efficient intra-kernel isolation

468
00:20:08,640 --> 00:20:12,559
mechanism

469
00:20:09,760 --> 00:20:13,600
may also be used to harden the isolation

470
00:20:12,559 --> 00:20:16,799
of

471
00:20:13,600 --> 00:20:21,840
the isolation of monolithic kernels

472
00:20:16,799 --> 00:20:21,840
that's all thank you for your listening

