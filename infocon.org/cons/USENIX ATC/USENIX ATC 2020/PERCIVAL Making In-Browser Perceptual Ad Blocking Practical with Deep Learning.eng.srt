1
00:00:08,720 --> 00:00:14,240
hello everyone

2
00:00:11,200 --> 00:00:15,120
i'm zane and today i will talk about

3
00:00:14,240 --> 00:00:17,199
percival

4
00:00:15,120 --> 00:00:18,800
an in-browser deep learning-powered

5
00:00:17,199 --> 00:00:22,080
perceptual ad blocker

6
00:00:18,800 --> 00:00:24,320
this is a joint work between uc davis

7
00:00:22,080 --> 00:00:25,598
university of oxford brave software

8
00:00:24,320 --> 00:00:29,039
imperial college london

9
00:00:25,599 --> 00:00:30,880
and bouncer technologies modern web

10
00:00:29,039 --> 00:00:31,920
pages contain content from multiple

11
00:00:30,880 --> 00:00:34,239
domains

12
00:00:31,920 --> 00:00:35,760
to monetize free content a publisher

13
00:00:34,239 --> 00:00:37,839
such as new york times

14
00:00:35,760 --> 00:00:40,079
reserves space in their web page for

15
00:00:37,840 --> 00:00:41,120
content from other domains such as ad

16
00:00:40,079 --> 00:00:43,680
networks

17
00:00:41,120 --> 00:00:45,919
when a user visits a publisher website

18
00:00:43,680 --> 00:00:49,840
the publisher sends the content along

19
00:00:45,920 --> 00:00:51,920
with ad tags embedded in the page

20
00:00:49,840 --> 00:00:54,320
these ad tags will then request ad

21
00:00:51,920 --> 00:00:56,320
content from ad networks

22
00:00:54,320 --> 00:00:58,640
this ad space can also be sold to

23
00:00:56,320 --> 00:01:00,000
another party via the ad network

24
00:00:58,640 --> 00:01:02,320
where the ad network instead of

25
00:01:00,000 --> 00:01:04,559
delivering the ad content delivers

26
00:01:02,320 --> 00:01:05,439
more ad tags which links to a different

27
00:01:04,559 --> 00:01:07,759
ad network

28
00:01:05,438 --> 00:01:11,039
in this case ad network too this is

29
00:01:07,760 --> 00:01:11,040
known as ad syndication

30
00:01:11,360 --> 00:01:18,400
so why would anyone want to block ads

31
00:01:14,400 --> 00:01:19,040
well intrusion ads affect user

32
00:01:18,400 --> 00:01:21,680
experience

33
00:01:19,040 --> 00:01:24,240
and performance on edge devices since ad

34
00:01:21,680 --> 00:01:26,080
content takes a lot of time to load

35
00:01:24,240 --> 00:01:28,000
ads generally take up a lot of real

36
00:01:26,080 --> 00:01:29,200
estate on web page and consist of

37
00:01:28,000 --> 00:01:32,400
dynamic content

38
00:01:29,200 --> 00:01:34,079
like images animations etc which

39
00:01:32,400 --> 00:01:36,000
impact visual accessibility and

40
00:01:34,079 --> 00:01:38,079
performance of web page

41
00:01:36,000 --> 00:01:41,040
particularly on lightweight computers

42
00:01:38,079 --> 00:01:42,158
and mobile phones attackers use ad

43
00:01:41,040 --> 00:01:44,880
distribution channels

44
00:01:42,159 --> 00:01:45,759
described before to hijack compromised

45
00:01:44,880 --> 00:01:48,158
web pages

46
00:01:45,759 --> 00:01:48,960
in order to trick users into downloading

47
00:01:48,159 --> 00:01:52,560
malware

48
00:01:48,960 --> 00:01:55,439
this is known as advertising ad networks

49
00:01:52,560 --> 00:01:57,920
also embed code in the web pages

50
00:01:55,439 --> 00:01:59,119
to identify the same users again in a

51
00:01:57,920 --> 00:02:01,520
different domain

52
00:01:59,119 --> 00:02:04,159
creating a more global view of the user

53
00:02:01,520 --> 00:02:06,640
browsing behavior

54
00:02:04,159 --> 00:02:07,680
fortunately there are ad blockers like

55
00:02:06,640 --> 00:02:11,038
adblock plus

56
00:02:07,680 --> 00:02:12,239
brave opera etc however existing ad

57
00:02:11,038 --> 00:02:14,480
blocking solutions

58
00:02:12,239 --> 00:02:17,440
use filter lists like easy list to block

59
00:02:14,480 --> 00:02:19,679
ads these lists are manually created

60
00:02:17,440 --> 00:02:21,359
and crowdsourced meaning volunteers

61
00:02:19,680 --> 00:02:23,120
report websites with ads

62
00:02:21,360 --> 00:02:25,599
and then developers write rules

63
00:02:23,120 --> 00:02:28,239
corresponding to user reporting

64
00:02:25,599 --> 00:02:28,720
typically when a user visits a website

65
00:02:28,239 --> 00:02:31,120
the

66
00:02:28,720 --> 00:02:32,800
ad blockers examine the content and the

67
00:02:31,120 --> 00:02:36,040
ad tags from the publisher

68
00:02:32,800 --> 00:02:39,040
to look for blacklisted domains like the

69
00:02:36,040 --> 00:02:39,040
adnetwork.com

70
00:02:39,200 --> 00:02:42,399
and then block the subsequent http

71
00:02:41,840 --> 00:02:45,200
request

72
00:02:42,400 --> 00:02:45,920
to this domain additionally ad blockers

73
00:02:45,200 --> 00:02:51,119
also hide

74
00:02:45,920 --> 00:02:54,238
html elements and block script execution

75
00:02:51,120 --> 00:02:56,480
however filterless based blocking

76
00:02:54,239 --> 00:02:59,599
techniques can be broken by changing

77
00:02:56,480 --> 00:03:01,280
the domain url or the page metadata of

78
00:02:59,599 --> 00:03:03,440
the of the ad posts

79
00:03:01,280 --> 00:03:05,200
which is used by ad blockers to identify

80
00:03:03,440 --> 00:03:08,319
ad elements

81
00:03:05,200 --> 00:03:10,319
second existing research has shown that

82
00:03:08,319 --> 00:03:11,599
these filter lists are not efficient and

83
00:03:10,319 --> 00:03:14,560
contain a lot of old

84
00:03:11,599 --> 00:03:16,879
unmatched rules and third unit the

85
00:03:14,560 --> 00:03:19,599
manual effort needed updating the rules

86
00:03:16,879 --> 00:03:21,518
takes a lot of time

87
00:03:19,599 --> 00:03:23,839
in an attempt to find a more flexible

88
00:03:21,519 --> 00:03:26,319
solution researchers propose

89
00:03:23,840 --> 00:03:28,159
perceptual ad blocking that looks at the

90
00:03:26,319 --> 00:03:32,480
content of the ad

91
00:03:28,159 --> 00:03:35,760
and not the markup

92
00:03:32,480 --> 00:03:37,518
ad blockers examine the web page content

93
00:03:35,760 --> 00:03:39,679
from the user's perspective

94
00:03:37,519 --> 00:03:41,680
this is because the intended audience

95
00:03:39,680 --> 00:03:43,440
for the advertisements are humans and

96
00:03:41,680 --> 00:03:45,840
not the browser

97
00:03:43,440 --> 00:03:47,519
there is a semantic gap between the code

98
00:03:45,840 --> 00:03:51,360
that gets sent to the browser

99
00:03:47,519 --> 00:03:53,840
and how the browser interprets it

100
00:03:51,360 --> 00:03:54,480
what the user sees is the interpretation

101
00:03:53,840 --> 00:03:56,959
of the code

102
00:03:54,480 --> 00:03:57,920
and also known as the rendered content

103
00:03:56,959 --> 00:04:00,799
and this is why

104
00:03:57,920 --> 00:04:02,079
perceptual ad blockers operate on the

105
00:04:00,799 --> 00:04:06,239
rendered content

106
00:04:02,080 --> 00:04:08,319
and not on the metadata however

107
00:04:06,239 --> 00:04:09,680
existing perceptual ad blockers also

108
00:04:08,319 --> 00:04:12,000
fall short

109
00:04:09,680 --> 00:04:12,959
some only look at high level features in

110
00:04:12,000 --> 00:04:15,680
ad images like

111
00:04:12,959 --> 00:04:17,918
text or add choices logo others are

112
00:04:15,680 --> 00:04:20,160
prohibitively large and slow

113
00:04:17,918 --> 00:04:23,359
for production deployment while others

114
00:04:20,160 --> 00:04:26,000
only work at the extension layer

115
00:04:23,360 --> 00:04:27,120
to this end we present percival a deep

116
00:04:26,000 --> 00:04:29,360
learning power

117
00:04:27,120 --> 00:04:31,759
in browser perceptual ad blocker that

118
00:04:29,360 --> 00:04:34,400
examines the entire ad and non-ad

119
00:04:31,759 --> 00:04:36,720
content which could be images animations

120
00:04:34,400 --> 00:04:38,560
videos etc

121
00:04:36,720 --> 00:04:40,800
with commercial neural networks to

122
00:04:38,560 --> 00:04:43,280
filter ad content

123
00:04:40,800 --> 00:04:45,120
all the visual content in the web page

124
00:04:43,280 --> 00:04:47,758
goes through personal first

125
00:04:45,120 --> 00:04:49,040
before the user sees it personal blocks

126
00:04:47,759 --> 00:04:52,160
all the visual content

127
00:04:49,040 --> 00:04:54,160
that it thinks contains ads from the

128
00:04:52,160 --> 00:04:56,160
browser's perspective personal runs in

129
00:04:54,160 --> 00:04:57,600
the rendering engine of the browser

130
00:04:56,160 --> 00:04:59,680
the rendering engine has a number of

131
00:04:57,600 --> 00:05:00,320
stages and i'll describe these stages in

132
00:04:59,680 --> 00:05:02,160
detail

133
00:05:00,320 --> 00:05:03,440
later on in the presentation but the

134
00:05:02,160 --> 00:05:05,440
high level idea is that

135
00:05:03,440 --> 00:05:10,160
percival runs in one of the sub stages

136
00:05:05,440 --> 00:05:12,240
of the rendering engine

137
00:05:10,160 --> 00:05:14,400
the job of the rendering engine is to

138
00:05:12,240 --> 00:05:14,960
convert all the code obtained from the

139
00:05:14,400 --> 00:05:16,960
network

140
00:05:14,960 --> 00:05:18,479
to content on the screen and as the

141
00:05:16,960 --> 00:05:19,280
rendering engine decodes the visual

142
00:05:18,479 --> 00:05:21,680
content

143
00:05:19,280 --> 00:05:23,359
personal intercepts it and blocks the ad

144
00:05:21,680 --> 00:05:25,520
content

145
00:05:23,360 --> 00:05:27,039
in the remainder of the presentation i

146
00:05:25,520 --> 00:05:28,479
will first talk about some of the

147
00:05:27,039 --> 00:05:29,520
challenges of running deep learning in

148
00:05:28,479 --> 00:05:31,120
the browser

149
00:05:29,520 --> 00:05:33,198
i will talk about personal design

150
00:05:31,120 --> 00:05:34,800
principles next

151
00:05:33,199 --> 00:05:36,880
this will be followed by the actual

152
00:05:34,800 --> 00:05:39,440
design and i'll talk about the

153
00:05:36,880 --> 00:05:40,639
evaluation after that that will be

154
00:05:39,440 --> 00:05:42,560
followed by a demo

155
00:05:40,639 --> 00:05:44,960
first of all and afterwards i will

156
00:05:42,560 --> 00:05:44,960
conclude

157
00:05:45,199 --> 00:05:48,960
deep commercial neural networks can beat

158
00:05:47,039 --> 00:05:50,880
humans on computer vision tasks like

159
00:05:48,960 --> 00:05:53,198
image classification

160
00:05:50,880 --> 00:05:54,400
this chart represents decrease in error

161
00:05:53,199 --> 00:05:57,039
rates over time

162
00:05:54,400 --> 00:05:59,039
with newer models on on imagenet which

163
00:05:57,039 --> 00:05:59,759
is a collection of over 14 million

164
00:05:59,039 --> 00:06:02,880
images

165
00:05:59,759 --> 00:06:05,600
belonging to over 20 000 classes

166
00:06:02,880 --> 00:06:07,199
the y axis is the error rate and the x

167
00:06:05,600 --> 00:06:09,039
axis is the year

168
00:06:07,199 --> 00:06:11,360
it can be seen that with deep learning

169
00:06:09,039 --> 00:06:14,159
the error rate decreased significantly

170
00:06:11,360 --> 00:06:14,160
in 2012

171
00:06:15,199 --> 00:06:21,680
and after 2015 with resnet

172
00:06:19,120 --> 00:06:24,400
deep cnn started outperforming humans on

173
00:06:21,680 --> 00:06:27,039
this image classification task

174
00:06:24,400 --> 00:06:28,719
however these models are of the orders

175
00:06:27,039 --> 00:06:31,120
of hundreds of megabytes

176
00:06:28,720 --> 00:06:33,520
that is almost three to four times the

177
00:06:31,120 --> 00:06:35,759
size of the entire browser executable

178
00:06:33,520 --> 00:06:38,080
the number of parameters also roughly

179
00:06:35,759 --> 00:06:40,800
translates to the increase in latency

180
00:06:38,080 --> 00:06:42,560
which makes these models impractical on

181
00:06:40,800 --> 00:06:44,800
resource constrained devices

182
00:06:42,560 --> 00:06:45,759
unless you have custom hardware like

183
00:06:44,800 --> 00:06:50,720
tpus

184
00:06:45,759 --> 00:06:52,560
or gpus and you can reliably use it

185
00:06:50,720 --> 00:06:54,720
the interest time of these models can

186
00:06:52,560 --> 00:06:55,759
also be of the order of hundreds of

187
00:06:54,720 --> 00:06:58,639
milliseconds

188
00:06:55,759 --> 00:07:00,400
on high-end cpus making a practical

189
00:06:58,639 --> 00:07:03,840
deployment of these models

190
00:07:00,400 --> 00:07:03,840
prohibitively slow

191
00:07:04,479 --> 00:07:07,919
so in order to run deep learning

192
00:07:06,720 --> 00:07:10,560
inference in the browser

193
00:07:07,919 --> 00:07:12,240
we need smaller and faster models but

194
00:07:10,560 --> 00:07:14,560
smaller models mean

195
00:07:12,240 --> 00:07:16,240
means lower machine learning capacity

196
00:07:14,560 --> 00:07:18,960
and hence lower accuracy

197
00:07:16,240 --> 00:07:21,360
so we need to maintain this size latency

198
00:07:18,960 --> 00:07:24,318
versus accuracy trade-off

199
00:07:21,360 --> 00:07:25,520
additionally all the visual content must

200
00:07:24,319 --> 00:07:27,039
go through the cnn

201
00:07:25,520 --> 00:07:29,359
since there's no way for us to know

202
00:07:27,039 --> 00:07:32,000
ahead of time what is ad content and

203
00:07:29,360 --> 00:07:35,520
what is regular content

204
00:07:32,000 --> 00:07:37,440
so if all the content goes to the cnn

205
00:07:35,520 --> 00:07:39,039
then the model inference is in the

206
00:07:37,440 --> 00:07:40,400
critical rendering path

207
00:07:39,039 --> 00:07:44,000
and then the challenge is how to keep

208
00:07:40,400 --> 00:07:47,120
the browser responsive

209
00:07:44,000 --> 00:07:47,840
to address the aforementioned concerns

210
00:07:47,120 --> 00:07:49,919
and to make

211
00:07:47,840 --> 00:07:52,400
personal practical we adhere to the

212
00:07:49,919 --> 00:07:54,639
following principles

213
00:07:52,400 --> 00:07:56,479
we run percival natively in the browser

214
00:07:54,639 --> 00:08:01,199
for performance reasons

215
00:07:56,479 --> 00:08:01,199
we identify a choke point in the browser

216
00:08:01,440 --> 00:08:04,879
uh we identify chokepoint for most

217
00:08:03,360 --> 00:08:05,599
individual content in the rendering

218
00:08:04,879 --> 00:08:08,639
engine

219
00:08:05,599 --> 00:08:10,878
and run percival at this chokepoint

220
00:08:08,639 --> 00:08:11,680
we run multiple instances of percival in

221
00:08:10,879 --> 00:08:14,879
parallel

222
00:08:11,680 --> 00:08:15,440
this is to mimic batch processing in a

223
00:08:14,879 --> 00:08:17,440
batch

224
00:08:15,440 --> 00:08:19,280
in a machine learning inference since we

225
00:08:17,440 --> 00:08:20,639
can't delay inference until a batch of

226
00:08:19,280 --> 00:08:22,239
images is available

227
00:08:20,639 --> 00:08:24,000
we have to run inference as soon as the

228
00:08:22,240 --> 00:08:26,479
first image is available

229
00:08:24,000 --> 00:08:28,960
finally we ensure our machine learning

230
00:08:26,479 --> 00:08:32,640
models run fast and are efficient

231
00:08:28,960 --> 00:08:34,478
and small to understand where percival

232
00:08:32,640 --> 00:08:35,838
runs in the browser here's an overview

233
00:08:34,479 --> 00:08:37,039
of some of the relevant browser

234
00:08:35,839 --> 00:08:39,120
components

235
00:08:37,039 --> 00:08:40,880
overall the browser consists of two

236
00:08:39,120 --> 00:08:42,240
processes the browser process and the

237
00:08:40,880 --> 00:08:43,919
rendering process

238
00:08:42,240 --> 00:08:46,160
each process has a main thread and an i

239
00:08:43,919 --> 00:08:48,319
o thread the i o threads are responsible

240
00:08:46,160 --> 00:08:49,519
for network requests in ipc

241
00:08:48,320 --> 00:08:51,200
and the main thread of the browser

242
00:08:49,519 --> 00:08:52,000
process is responsible for updating the

243
00:08:51,200 --> 00:08:53,440
ui

244
00:08:52,000 --> 00:08:55,200
whereas the main thread of the renderer

245
00:08:53,440 --> 00:08:59,360
process runs blink

246
00:08:55,200 --> 00:08:59,360
which is the chromium rendering engine

247
00:09:01,440 --> 00:09:04,480
from a high level blink's job is to turn

248
00:09:03,760 --> 00:09:07,839
html

249
00:09:04,480 --> 00:09:09,279
css and javascript into pixels on screen

250
00:09:07,839 --> 00:09:12,000
in order to render content

251
00:09:09,279 --> 00:09:13,839
that is part of the web page in this

252
00:09:12,000 --> 00:09:16,240
processing pipeline the first stage is

253
00:09:13,839 --> 00:09:18,640
parsing html tags to create the object

254
00:09:16,240 --> 00:09:20,240
model of the page or the dom tree

255
00:09:18,640 --> 00:09:22,720
when the dom tree is built blink

256
00:09:20,240 --> 00:09:24,480
processes the style sheets

257
00:09:22,720 --> 00:09:26,480
after creating the dom and parsing the

258
00:09:24,480 --> 00:09:28,240
style sheets blink computes the

259
00:09:26,480 --> 00:09:30,480
coordinates of the regions the web page

260
00:09:28,240 --> 00:09:33,519
elements will occupy on the screen

261
00:09:30,480 --> 00:09:35,360
this is known as the layout phase

262
00:09:33,519 --> 00:09:37,760
this is followed by other stages such as

263
00:09:35,360 --> 00:09:40,880
paint which records paint operations say

264
00:09:37,760 --> 00:09:42,480
draw a rectangle in a display item

265
00:09:40,880 --> 00:09:44,720
and a display item is a visual

266
00:09:42,480 --> 00:09:46,640
representation of the page

267
00:09:44,720 --> 00:09:48,640
the display items can have images in

268
00:09:46,640 --> 00:09:50,480
them which need to be decoded first so

269
00:09:48,640 --> 00:09:52,399
this is followed by the image decoding

270
00:09:50,480 --> 00:09:54,560
task

271
00:09:52,399 --> 00:09:56,880
and this is finally followed by the

272
00:09:54,560 --> 00:09:58,319
rasterization task which converts the

273
00:09:56,880 --> 00:10:00,800
display items which

274
00:09:58,320 --> 00:10:01,519
as i said are visual representations of

275
00:10:00,800 --> 00:10:03,599
the image

276
00:10:01,519 --> 00:10:05,600
of the web page and converts these

277
00:10:03,600 --> 00:10:06,959
display items into bitmaps

278
00:10:05,600 --> 00:10:10,480
note that the content is still in the

279
00:10:06,959 --> 00:10:10,479
memory and not on the screen

280
00:10:11,200 --> 00:10:14,399
this is followed by some low level

281
00:10:13,200 --> 00:10:17,040
primitives where

282
00:10:14,399 --> 00:10:18,800
blink issues opengl calls through skia

283
00:10:17,040 --> 00:10:19,439
which is a graphics library that

284
00:10:18,800 --> 00:10:22,160
abstracts

285
00:10:19,440 --> 00:10:25,360
underlying hardware and ultimately we

286
00:10:22,160 --> 00:10:25,360
see pixels on the screen

287
00:10:26,079 --> 00:10:29,199
we run percival after the image decode

288
00:10:28,720 --> 00:10:31,040
task

289
00:10:29,200 --> 00:10:32,640
and during the raster task in this

290
00:10:31,040 --> 00:10:35,279
rendering pipeline

291
00:10:32,640 --> 00:10:37,199
personal intercepts every decoded image

292
00:10:35,279 --> 00:10:38,800
in the display items and blocks

293
00:10:37,200 --> 00:10:41,519
rendering of the images

294
00:10:38,800 --> 00:10:42,719
that it determines to be as this point

295
00:10:41,519 --> 00:10:44,959
in the rendering pipeline

296
00:10:42,720 --> 00:10:46,240
is the chokepoint for vast majority of

297
00:10:44,959 --> 00:10:47,920
the visual content

298
00:10:46,240 --> 00:10:49,839
an exception to this would be a visual

299
00:10:47,920 --> 00:10:53,519
content is drawn programmatically

300
00:10:49,839 --> 00:10:55,680
using canvas or svg

301
00:10:53,519 --> 00:10:57,680
so how do we run percival in parallel

302
00:10:55,680 --> 00:10:59,760
well the main thread in blink

303
00:10:57,680 --> 00:11:01,519
creates many worker threads to decode

304
00:10:59,760 --> 00:11:03,839
multiple images in parallel

305
00:11:01,519 --> 00:11:05,519
we run an instance of per personal in

306
00:11:03,839 --> 00:11:07,279
each of these worker threads

307
00:11:05,519 --> 00:11:10,480
the model inference needs to be thread

308
00:11:07,279 --> 00:11:10,480
safe in order to do this

309
00:11:11,120 --> 00:11:14,399
from the implementation side personal

310
00:11:12,880 --> 00:11:17,439
consists of a neural network

311
00:11:14,399 --> 00:11:20,160
trained externally in python

312
00:11:17,440 --> 00:11:22,800
and an in-browser uh c plus plus machine

313
00:11:20,160 --> 00:11:24,800
learning library

314
00:11:22,800 --> 00:11:26,399
to keep our model small and fast we

315
00:11:24,800 --> 00:11:27,199
start with squeeze net as our base

316
00:11:26,399 --> 00:11:28,880
network

317
00:11:27,200 --> 00:11:30,480
we refine the network to remove some

318
00:11:28,880 --> 00:11:32,880
parameter heavy layers

319
00:11:30,480 --> 00:11:34,399
in order to keep the inference fast more

320
00:11:32,880 --> 00:11:35,680
details of this are mentioned in the

321
00:11:34,399 --> 00:11:37,279
paper

322
00:11:35,680 --> 00:11:38,719
for in-browser inference we use a

323
00:11:37,279 --> 00:11:40,480
singleton design pattern

324
00:11:38,720 --> 00:11:42,560
where the model is loaded on the first

325
00:11:40,480 --> 00:11:44,320
invocation only and subsequent

326
00:11:42,560 --> 00:11:45,920
inequation just reused the in memory

327
00:11:44,320 --> 00:11:47,600
model

328
00:11:45,920 --> 00:11:50,319
the model inference as mentioned before

329
00:11:47,600 --> 00:11:50,320
is thread safe

330
00:11:50,880 --> 00:11:54,560
given our focus on making perceptual ad

331
00:11:53,200 --> 00:11:56,800
blocking practical

332
00:11:54,560 --> 00:11:58,399
we first evaluate the impact of personal

333
00:11:56,800 --> 00:12:00,240
under browser performance

334
00:11:58,399 --> 00:12:02,320
we measured the impact of personal on

335
00:12:00,240 --> 00:12:03,600
render time which is defined as the

336
00:12:02,320 --> 00:12:05,519
difference between the

337
00:12:03,600 --> 00:12:07,440
dom complete and the downloading event

338
00:12:05,519 --> 00:12:10,639
timestamps

339
00:12:07,440 --> 00:12:15,279
and we measured that personal adds

340
00:12:10,639 --> 00:12:17,040
4.5 or 178.23 milliseconds to the mean

341
00:12:15,279 --> 00:12:20,959
render time in chromium

342
00:12:17,040 --> 00:12:25,560
on alexa top 5000 websites

343
00:12:20,959 --> 00:12:27,839
percival adds uh 19.07 or

344
00:12:25,560 --> 00:12:28,638
281.85 milliseconds overhead to the

345
00:12:27,839 --> 00:12:32,320
brave browser

346
00:12:28,639 --> 00:12:35,519
on the same experiment the graph

347
00:12:32,320 --> 00:12:37,360
to the right is the cdf of the render

348
00:12:35,519 --> 00:12:38,560
time the y-axis is the percentage of

349
00:12:37,360 --> 00:12:41,200
pages the x

350
00:12:38,560 --> 00:12:43,119
axis is the render time and log scale

351
00:12:41,200 --> 00:12:45,040
the dashed orange line it corresponds to

352
00:12:43,120 --> 00:12:47,040
the stock chromium and the blue line is

353
00:12:45,040 --> 00:12:49,279
the stock chromium reversible

354
00:12:47,040 --> 00:12:51,279
as can be seen for chromium the overhead

355
00:12:49,279 --> 00:12:53,600
is minor

356
00:12:51,279 --> 00:12:55,279
the dotted red line is the brave browser

357
00:12:53,600 --> 00:12:56,399
and the dotted green is brave with

358
00:12:55,279 --> 00:12:58,320
personal

359
00:12:56,399 --> 00:13:01,120
there's more overhead on brave than

360
00:12:58,320 --> 00:13:01,120
stock chromium

361
00:13:02,639 --> 00:13:08,320
to capture the uh

362
00:13:06,560 --> 00:13:10,319
rendering and perceptual impact better

363
00:13:08,320 --> 00:13:13,680
we created a micro benchmark

364
00:13:10,320 --> 00:13:15,519
with first meaningful paint and

365
00:13:13,680 --> 00:13:17,199
first meaningful paint is defined as the

366
00:13:15,519 --> 00:13:19,200
time it takes for the browser

367
00:13:17,200 --> 00:13:20,480
to first display content on the user

368
00:13:19,200 --> 00:13:23,120
screen

369
00:13:20,480 --> 00:13:24,639
we constructed a static html page with

370
00:13:23,120 --> 00:13:25,360
hundred images and then measured the

371
00:13:24,639 --> 00:13:28,800
first meaning

372
00:13:25,360 --> 00:13:30,880
meaningful paint in chromium and brave

373
00:13:28,800 --> 00:13:32,880
with and without personal on the static

374
00:13:30,880 --> 00:13:34,959
page

375
00:13:32,880 --> 00:13:36,079
personal adds 120 milliseconds to

376
00:13:34,959 --> 00:13:40,079
chromium

377
00:13:36,079 --> 00:13:42,638
and 140 milliseconds to brave on this uh

378
00:13:40,079 --> 00:13:43,359
static html page so it takes 120

379
00:13:42,639 --> 00:13:46,320
milliseconds

380
00:13:43,360 --> 00:13:46,720
more to render this page in chromium

381
00:13:46,320 --> 00:13:49,839
with

382
00:13:46,720 --> 00:13:49,839
personal activated

383
00:13:50,639 --> 00:13:55,519
for accuracy purposes we also conducted

384
00:13:53,199 --> 00:13:56,959
an in-browser evaluation of percival on

385
00:13:55,519 --> 00:13:59,199
facebook ads

386
00:13:56,959 --> 00:14:00,719
so generally facebook displays ads on

387
00:13:59,199 --> 00:14:02,479
the right side column as well as

388
00:14:00,720 --> 00:14:04,720
sponsored content embedded in the feed

389
00:14:02,480 --> 00:14:06,880
which is shown in the center

390
00:14:04,720 --> 00:14:08,720
accordingly we define true positives as

391
00:14:06,880 --> 00:14:09,279
the number of ads in the right side

392
00:14:08,720 --> 00:14:11,920
column

393
00:14:09,279 --> 00:14:13,519
or embedded in the feed that percival

394
00:14:11,920 --> 00:14:15,760
correctly blocks

395
00:14:13,519 --> 00:14:17,760
false positives are the number of images

396
00:14:15,760 --> 00:14:19,920
in the remaining web page that personal

397
00:14:17,760 --> 00:14:21,680
correct incorrectly blocks

398
00:14:19,920 --> 00:14:23,519
true negatives are the number of images

399
00:14:21,680 --> 00:14:24,560
rendered in the non-add portion of the

400
00:14:23,519 --> 00:14:26,320
web page

401
00:14:24,560 --> 00:14:30,239
while false negatives are the number of

402
00:14:26,320 --> 00:14:32,320
ads that evade personal

403
00:14:30,240 --> 00:14:35,360
to evaluate these metrics we browse

404
00:14:32,320 --> 00:14:38,320
facebook for a period of 35 days

405
00:14:35,360 --> 00:14:40,399
and personal achieves an accuracy of 92

406
00:14:38,320 --> 00:14:43,440
with a precision of 78.4

407
00:14:40,399 --> 00:14:45,120
and a recall of 70 on facebook ads

408
00:14:43,440 --> 00:14:46,560
meaning that every time we make a

409
00:14:45,120 --> 00:14:49,199
blocking decision

410
00:14:46,560 --> 00:14:50,160
it is correct close to 80 percent of the

411
00:14:49,199 --> 00:14:54,079
time

412
00:14:50,160 --> 00:14:57,279
and we catch about 70 of the total ads

413
00:14:54,079 --> 00:15:00,160
we also trained a custom user model

414
00:14:57,279 --> 00:15:02,800
which achieved a precision of 88.04 and

415
00:15:00,160 --> 00:15:04,800
a recall of 97.25 percent

416
00:15:02,800 --> 00:15:07,599
this was trained with ads served to one

417
00:15:04,800 --> 00:15:09,680
particular user

418
00:15:07,600 --> 00:15:11,760
to evaluate whether percival can

419
00:15:09,680 --> 00:15:14,719
generalize to other locales

420
00:15:11,760 --> 00:15:15,519
we evaluated personal on arabic spanish

421
00:15:14,720 --> 00:15:18,639
french

422
00:15:15,519 --> 00:15:19,120
korean and chinese languages as can be

423
00:15:18,639 --> 00:15:21,360
seen

424
00:15:19,120 --> 00:15:23,360
from the table percival performs well on

425
00:15:21,360 --> 00:15:24,800
arabic spanish french languages

426
00:15:23,360 --> 00:15:27,839
however the results on korean and

427
00:15:24,800 --> 00:15:27,839
chinese are less accurate

428
00:15:28,320 --> 00:15:33,360
next let's do a quick demo of percival

429
00:15:32,000 --> 00:15:35,199
so i'm actually running this

430
00:15:33,360 --> 00:15:37,519
presentation in percival

431
00:15:35,199 --> 00:15:38,959
what i'm going to do first is i'm going

432
00:15:37,519 --> 00:15:41,600
to go to

433
00:15:38,959 --> 00:15:43,758
i'm gonna just do a simple google query

434
00:15:41,600 --> 00:15:43,759
uh

435
00:15:44,079 --> 00:15:46,719
advertisement

436
00:15:47,199 --> 00:15:52,240
and it is expected that most of these

437
00:15:50,639 --> 00:15:54,240
images will have high ad

438
00:15:52,240 --> 00:15:56,959
intent and as you can see first of all

439
00:15:54,240 --> 00:16:02,000
blocks most of these images

440
00:15:56,959 --> 00:16:02,000
however if i were to do barack obama

441
00:16:02,240 --> 00:16:06,880
you will see that it renders most of

442
00:16:04,720 --> 00:16:09,040
these images

443
00:16:06,880 --> 00:16:10,000
obviously because these are off less add

444
00:16:09,040 --> 00:16:12,160
in

445
00:16:10,000 --> 00:16:14,880
so how does it work on an actual website

446
00:16:12,160 --> 00:16:18,000
you go to facebook.com

447
00:16:14,880 --> 00:16:21,199
as you can see it correctly blocked

448
00:16:18,000 --> 00:16:22,639
these two ads as i said the right right

449
00:16:21,199 --> 00:16:25,040
side column ads

450
00:16:22,639 --> 00:16:26,880
so i'm gonna go i'm gonna scroll down

451
00:16:25,040 --> 00:16:28,560
and this is some sponsored content and

452
00:16:26,880 --> 00:16:30,320
you can see it didn't block this image

453
00:16:28,560 --> 00:16:31,199
but it blocked the image right next to

454
00:16:30,320 --> 00:16:34,480
it

455
00:16:31,199 --> 00:16:37,359
and it blocked all the other images

456
00:16:34,480 --> 00:16:38,880
uh within this uh sponsored and this is

457
00:16:37,360 --> 00:16:41,199
some regular stuff which you didn't

458
00:16:38,880 --> 00:16:41,199
block

459
00:16:42,160 --> 00:16:46,880
and this is some more sponsored content

460
00:16:44,160 --> 00:16:46,880
which it blocks

461
00:16:47,120 --> 00:16:52,160
this is non-sponsored so it doesn't

462
00:16:49,519 --> 00:16:52,160
block that

463
00:16:52,240 --> 00:16:55,600
this is some more sponsored content that

464
00:16:54,560 --> 00:17:00,479
it blocked

465
00:16:55,600 --> 00:17:04,319
so you can see uh percival

466
00:17:00,480 --> 00:17:04,959
can selectively pick ad content uh from

467
00:17:04,319 --> 00:17:08,079
facebook

468
00:17:04,959 --> 00:17:08,079
and other websites as well

469
00:17:09,359 --> 00:17:13,438
all right before i conclude

470
00:17:13,839 --> 00:17:17,438
i quickly want to talk about adversarial

471
00:17:16,559 --> 00:17:22,480
attacks

472
00:17:17,439 --> 00:17:22,480
uh against percival

473
00:17:25,039 --> 00:17:29,840
so recently tram radal showed that how

474
00:17:27,839 --> 00:17:32,240
state-of-the-art perceptual ad blockers

475
00:17:29,840 --> 00:17:34,720
including percival are vulnerable to

476
00:17:32,240 --> 00:17:34,720
attacks

477
00:17:34,799 --> 00:17:39,440
however only one of the attacks

478
00:17:38,320 --> 00:17:41,760
mentioned in the paper

479
00:17:39,440 --> 00:17:43,360
actually evades percival since percival

480
00:17:41,760 --> 00:17:45,280
has deployed client-side

481
00:17:43,360 --> 00:17:47,039
attackers have white box access to the

482
00:17:45,280 --> 00:17:49,918
model weights and thus creating

483
00:17:47,039 --> 00:17:53,120
adversarial samples is trivial

484
00:17:49,919 --> 00:17:55,520
to address this we

485
00:17:53,120 --> 00:17:57,600
changed our deep learning model from

486
00:17:55,520 --> 00:17:59,679
squeeze net to mobile and v2

487
00:17:57,600 --> 00:18:01,520
and we retrained with the original data

488
00:17:59,679 --> 00:18:03,520
it took us roughly nine minutes

489
00:18:01,520 --> 00:18:06,000
to get to our baseline accuracy and the

490
00:18:03,520 --> 00:18:08,559
new model was able to correctly classify

491
00:18:06,000 --> 00:18:11,039
all the adversarial samples it should be

492
00:18:08,559 --> 00:18:14,879
noted that we did not add any new data

493
00:18:11,039 --> 00:18:17,200
to train the updated model

494
00:18:14,880 --> 00:18:19,120
in light of these observations we argue

495
00:18:17,200 --> 00:18:22,160
that personal is lightweight

496
00:18:19,120 --> 00:18:23,199
actually smaller than the average web

497
00:18:22,160 --> 00:18:26,799
page size currently

498
00:18:23,200 --> 00:18:29,520
and hence can be updated regularly

499
00:18:26,799 --> 00:18:31,679
however we recognize that the

500
00:18:29,520 --> 00:18:33,679
aforementioned defenses

501
00:18:31,679 --> 00:18:35,440
uh or the affirmation defense does not

502
00:18:33,679 --> 00:18:36,799
necessarily provide any theoretical

503
00:18:35,440 --> 00:18:38,799
guarantees

504
00:18:36,799 --> 00:18:40,639
uh against adversarial evasion of

505
00:18:38,799 --> 00:18:42,080
personal since adversaries could craft

506
00:18:40,640 --> 00:18:45,360
samples that transfer across

507
00:18:42,080 --> 00:18:47,439
models to address this uh

508
00:18:45,360 --> 00:18:49,600
future research could potentially look

509
00:18:47,440 --> 00:18:51,280
at client-side training where model is

510
00:18:49,600 --> 00:18:52,799
trained based off of user feedback or

511
00:18:51,280 --> 00:18:55,039
cell feedback

512
00:18:52,799 --> 00:18:57,918
this makes adversarial evasion harder

513
00:18:55,039 --> 00:19:00,320
since every user has a different copy

514
00:18:57,919 --> 00:19:03,600
of the model which weakens the premise

515
00:19:00,320 --> 00:19:06,000
of the first order adversarial attack

516
00:19:03,600 --> 00:19:07,439
additionally existing research on

517
00:19:06,000 --> 00:19:10,320
adversaries training

518
00:19:07,440 --> 00:19:10,640
has shown promise in particular madrid

519
00:19:10,320 --> 00:19:12,480
al

520
00:19:10,640 --> 00:19:14,080
demonstrates adversarial training that

521
00:19:12,480 --> 00:19:16,160
can provide security guarantees of

522
00:19:14,080 --> 00:19:18,080
robustness in a classifier

523
00:19:16,160 --> 00:19:19,840
they cast adversarial training as a

524
00:19:18,080 --> 00:19:21,840
saddle point formulation

525
00:19:19,840 --> 00:19:24,000
since a saddle point has both maximum

526
00:19:21,840 --> 00:19:26,080
and minima the maximization is used

527
00:19:24,000 --> 00:19:27,760
to find an adversarial sample that

528
00:19:26,080 --> 00:19:30,159
achieves high loss

529
00:19:27,760 --> 00:19:32,559
for the given network while the

530
00:19:30,160 --> 00:19:34,960
minimization is used to train

531
00:19:32,559 --> 00:19:35,918
uh the network to minimize the

532
00:19:34,960 --> 00:19:38,559
adversarial loss

533
00:19:35,919 --> 00:19:40,160
corresponding to the maximization step

534
00:19:38,559 --> 00:19:41,280
this is trained with the combination of

535
00:19:40,160 --> 00:19:45,039
gradient descent and

536
00:19:41,280 --> 00:19:47,440
ascend to conclude

537
00:19:45,039 --> 00:19:48,400
i first first motivated why we need ad

538
00:19:47,440 --> 00:19:51,679
blocking how

539
00:19:48,400 --> 00:19:53,520
existing ad blockers fall short

540
00:19:51,679 --> 00:19:54,799
with percival we introduce deep learning

541
00:19:53,520 --> 00:19:56,240
into the rendering engine which

542
00:19:54,799 --> 00:19:57,360
addresses some of the shortcomings of

543
00:19:56,240 --> 00:19:58,720
the current generation of the ad

544
00:19:57,360 --> 00:20:00,959
blockers

545
00:19:58,720 --> 00:20:02,799
personal has a minor impact on browser

546
00:20:00,960 --> 00:20:05,360
performance

547
00:20:02,799 --> 00:20:08,559
can also block first party ads and

548
00:20:05,360 --> 00:20:12,559
generalizes to other locales as well

549
00:20:08,559 --> 00:20:14,879
with that i conclude and

550
00:20:12,559 --> 00:20:16,320
any questions are welcome please send

551
00:20:14,880 --> 00:20:19,679
your questions

552
00:20:16,320 --> 00:20:21,678
to the email address mentioned on the

553
00:20:19,679 --> 00:20:34,080
slide

554
00:20:21,679 --> 00:20:34,080
thank you very much

