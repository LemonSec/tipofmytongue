1
00:00:10,160 --> 00:00:15,839
hello everyone my name is chihan nam

2
00:00:12,799 --> 00:00:16,960
i'm from kaist in this presentation i'd

3
00:00:15,839 --> 00:00:19,199
like to introduce

4
00:00:16,960 --> 00:00:20,400
a security enforcement network style

5
00:00:19,199 --> 00:00:23,840
called bastion

6
00:00:20,400 --> 00:00:26,240
or container networks this work is

7
00:00:23,840 --> 00:00:28,400
joint work with kaist and sri

8
00:00:26,240 --> 00:00:32,479
international

9
00:00:28,400 --> 00:00:32,479
okay now let's get started

10
00:00:32,960 --> 00:00:37,600
let's first think about what is a

11
00:00:34,719 --> 00:00:39,440
container a container is an abstraction

12
00:00:37,600 --> 00:00:42,559
at the application layer

13
00:00:39,440 --> 00:00:43,599
that contains everything we need such as

14
00:00:42,559 --> 00:00:46,480
code

15
00:00:43,600 --> 00:00:48,879
libraries and comprehensions in order to

16
00:00:46,480 --> 00:00:51,120
run an application

17
00:00:48,879 --> 00:00:52,800
and containers are much faster and

18
00:00:51,120 --> 00:00:54,718
lighter than virtual machines

19
00:00:52,800 --> 00:00:55,919
since they share the same host with

20
00:00:54,719 --> 00:00:58,160
common and

21
00:00:55,920 --> 00:01:01,440
run right on top of the host os like

22
00:00:58,160 --> 00:01:01,440
typical processes

23
00:01:01,520 --> 00:01:06,799
with such advantages these days the use

24
00:01:04,559 --> 00:01:09,360
of contamination technologies

25
00:01:06,799 --> 00:01:11,520
particularly for the scalp instantiation

26
00:01:09,360 --> 00:01:14,720
of products microservices

27
00:01:11,520 --> 00:01:14,720
has grown so fast

28
00:01:15,280 --> 00:01:20,400
however along with this popularity there

29
00:01:18,400 --> 00:01:24,560
have been so many security issues

30
00:01:20,400 --> 00:01:26,720
around the container world for example

31
00:01:24,560 --> 00:01:28,880
according to three wires state of

32
00:01:26,720 --> 00:01:31,439
content security report

33
00:01:28,880 --> 00:01:32,320
six percent of organizations already

34
00:01:31,439 --> 00:01:35,758
experienced

35
00:01:32,320 --> 00:01:38,559
some security incidents in 2018

36
00:01:35,759 --> 00:01:40,720
47 percent of containers they deployed

37
00:01:38,560 --> 00:01:43,520
had vulnerabilities

38
00:01:40,720 --> 00:01:45,520
every two percent of organizations have

39
00:01:43,520 --> 00:01:46,079
difficulty in investigating security

40
00:01:45,520 --> 00:01:49,200
issues

41
00:01:46,079 --> 00:01:49,199
in their continents

42
00:01:49,360 --> 00:01:52,960
likewise i think these statistics

43
00:01:51,840 --> 00:01:55,520
represent

44
00:01:52,960 --> 00:01:57,839
our current state in continuous security

45
00:01:55,520 --> 00:01:57,839
well

46
00:01:59,040 --> 00:02:04,399
then what kinds of secure solutions are

47
00:02:01,439 --> 00:02:06,719
there for continents these days

48
00:02:04,399 --> 00:02:07,520
i think we can categorize current secure

49
00:02:06,719 --> 00:02:10,639
solutions

50
00:02:07,520 --> 00:02:11,680
in three major parts container image

51
00:02:10,639 --> 00:02:14,720
integrity

52
00:02:11,680 --> 00:02:15,840
application isolation and runtime 3d

53
00:02:14,720 --> 00:02:19,040
detection

54
00:02:15,840 --> 00:02:20,160
based on what they focus on and through

55
00:02:19,040 --> 00:02:22,640
these solutions

56
00:02:20,160 --> 00:02:24,160
we may be able to improve our content

57
00:02:22,640 --> 00:02:27,679
security

58
00:02:24,160 --> 00:02:30,400
but i'd like to highlight that

59
00:02:27,680 --> 00:02:31,519
they mostly focus on containers which

60
00:02:30,400 --> 00:02:34,000
means that

61
00:02:31,519 --> 00:02:36,080
they still have less concern about the

62
00:02:34,000 --> 00:02:39,920
security of container networks

63
00:02:36,080 --> 00:02:42,080
yet so

64
00:02:39,920 --> 00:02:44,879
here i'd like to first show how a

65
00:02:42,080 --> 00:02:47,840
container network looks like

66
00:02:44,879 --> 00:02:50,799
when we think about microservices we can

67
00:02:47,840 --> 00:02:54,400
do them as shown in the alpha figure

68
00:02:50,800 --> 00:02:56,400
however in reality the continents for

69
00:02:54,400 --> 00:02:57,120
microservices are connected to each

70
00:02:56,400 --> 00:03:00,560
other

71
00:02:57,120 --> 00:03:01,840
like the lower figure especially in

72
00:03:00,560 --> 00:03:03,599
darker environments

73
00:03:01,840 --> 00:03:04,879
there are multiple bridges for each

74
00:03:03,599 --> 00:03:07,040
microservice

75
00:03:04,879 --> 00:03:10,480
and containers are linked to the bridges

76
00:03:07,040 --> 00:03:10,480
for their microservices

77
00:03:10,560 --> 00:03:16,080
then how about current environments

78
00:03:14,080 --> 00:03:17,840
in the case of kubernetes all the

79
00:03:16,080 --> 00:03:20,720
counters are what's called the group

80
00:03:17,840 --> 00:03:22,800
according to microservices all

81
00:03:20,720 --> 00:03:25,599
containers are actually connected to

82
00:03:22,800 --> 00:03:26,480
a single world network like the lower

83
00:03:25,599 --> 00:03:28,720
picker

84
00:03:26,480 --> 00:03:31,280
as quantities aims and multi-node

85
00:03:28,720 --> 00:03:31,280
environments

86
00:03:31,599 --> 00:03:35,119
from this container network architecture

87
00:03:34,239 --> 00:03:37,760
some of you may

88
00:03:35,120 --> 00:03:40,319
notice that current container networks

89
00:03:37,760 --> 00:03:44,159
probably have some security problems

90
00:03:40,319 --> 00:03:44,159
due to their architectural design

91
00:03:44,879 --> 00:03:48,399
so in this work we point out five secure

92
00:03:47,680 --> 00:03:51,599
challenges

93
00:03:48,400 --> 00:03:54,560
in current continentals first

94
00:03:51,599 --> 00:03:55,040
we lose the context of a container as

95
00:03:54,560 --> 00:03:57,680
soon as

96
00:03:55,040 --> 00:03:58,400
a network packet from a container is

97
00:03:57,680 --> 00:04:02,319
passed to

98
00:03:58,400 --> 00:04:03,519
a container network we can think that a

99
00:04:02,319 --> 00:04:06,958
container network

100
00:04:03,519 --> 00:04:09,920
is a small version of our latest network

101
00:04:06,959 --> 00:04:12,480
which means that once a packet is

102
00:04:09,920 --> 00:04:15,518
delivered to a container network

103
00:04:12,480 --> 00:04:16,719
or specifically at the host side it's

104
00:04:15,519 --> 00:04:19,519
like the packet

105
00:04:16,720 --> 00:04:22,079
is in the middle of a network somewhere

106
00:04:19,519 --> 00:04:24,720
between network switches

107
00:04:22,079 --> 00:04:25,600
does become the actual guarantee where

108
00:04:24,720 --> 00:04:28,800
the packet

109
00:04:25,600 --> 00:04:31,759
originally comes from and it is possible

110
00:04:28,800 --> 00:04:35,759
that some articles for its metal packets

111
00:04:31,759 --> 00:04:35,759
will be help of any other containers

112
00:04:36,720 --> 00:04:41,120
second there are some limitations in

113
00:04:39,280 --> 00:04:44,080
i-based access controls

114
00:04:41,120 --> 00:04:46,320
used by container networks especially

115
00:04:44,080 --> 00:04:48,560
iptables

116
00:04:46,320 --> 00:04:49,360
current network policies are mostly

117
00:04:48,560 --> 00:04:53,120
defined

118
00:04:49,360 --> 00:04:55,280
based on the ip addresses of containers

119
00:04:53,120 --> 00:04:57,759
even though some secure solutions use

120
00:04:55,280 --> 00:04:59,919
labels instead of hyper addresses to

121
00:04:57,759 --> 00:05:02,800
define net policies

122
00:04:59,919 --> 00:05:04,320
such labels still need to be changed to

123
00:05:02,800 --> 00:05:07,680
specific ip addresses

124
00:05:04,320 --> 00:05:10,240
internally likewise since

125
00:05:07,680 --> 00:05:11,520
all access controls are done by ip

126
00:05:10,240 --> 00:05:14,080
addresses

127
00:05:11,520 --> 00:05:14,960
container networks are still vulnerable

128
00:05:14,080 --> 00:05:17,440
to layered

129
00:05:14,960 --> 00:05:17,440
attacks

130
00:05:18,000 --> 00:05:22,400
third as iptables is located at the host

131
00:05:21,360 --> 00:05:24,880
site

132
00:05:22,400 --> 00:05:25,440
all network policies for containers are

133
00:05:24,880 --> 00:05:28,320
managed

134
00:05:25,440 --> 00:05:29,840
inside of ip tables in a centralized

135
00:05:28,320 --> 00:05:32,320
manner

136
00:05:29,840 --> 00:05:33,198
which means that the number of network

137
00:05:32,320 --> 00:05:35,599
policies will

138
00:05:33,199 --> 00:05:37,600
rapidly increase as the number of

139
00:05:35,600 --> 00:05:39,919
containers increases

140
00:05:37,600 --> 00:05:41,360
and eventually we can face some

141
00:05:39,919 --> 00:05:44,080
performance issues

142
00:05:41,360 --> 00:05:44,800
when the number of policies is beyond

143
00:05:44,080 --> 00:05:48,880
hundreds

144
00:05:44,800 --> 00:05:48,880
due to ideals design issues

145
00:05:49,759 --> 00:05:54,400
fourth one is containers can easily

146
00:05:52,639 --> 00:05:56,880
access the services

147
00:05:54,400 --> 00:05:58,880
running at the host site without any

148
00:05:56,880 --> 00:06:00,960
restriction

149
00:05:58,880 --> 00:06:02,159
all containers have the gateway of a

150
00:06:00,960 --> 00:06:06,719
continental

151
00:06:02,160 --> 00:06:07,039
or external accesses however the gateway

152
00:06:06,720 --> 00:06:09,360
is

153
00:06:07,039 --> 00:06:10,800
actually located at the host network

154
00:06:09,360 --> 00:06:13,360
namespace

155
00:06:10,800 --> 00:06:14,319
which means that a malicious container

156
00:06:13,360 --> 00:06:17,520
can scan

157
00:06:14,319 --> 00:06:18,800
host services and even exploit them in a

158
00:06:17,520 --> 00:06:21,840
malicious purpose

159
00:06:18,800 --> 00:06:21,840
through the gateway

160
00:06:22,960 --> 00:06:26,159
finally there is a special container

161
00:06:25,759 --> 00:06:29,120
called

162
00:06:26,160 --> 00:06:29,520
a metal privilege container it doesn't

163
00:06:29,120 --> 00:06:32,000
have

164
00:06:29,520 --> 00:06:32,799
actual privileges but shares a network

165
00:06:32,000 --> 00:06:36,479
namespace

166
00:06:32,800 --> 00:06:38,800
with the host so it can directly expose

167
00:06:36,479 --> 00:06:41,360
container services through the host ip

168
00:06:38,800 --> 00:06:44,560
addresses

169
00:06:41,360 --> 00:06:46,960
here a critical security concept in a

170
00:06:44,560 --> 00:06:50,160
network privileged container is that

171
00:06:46,960 --> 00:06:52,638
the container can actually access all

172
00:06:50,160 --> 00:06:56,160
network interfaces in the host

173
00:06:52,639 --> 00:06:58,720
including those for other containers

174
00:06:56,160 --> 00:07:01,039
furthermore current secret solutions do

175
00:06:58,720 --> 00:07:03,440
not care about such containers

176
00:07:01,039 --> 00:07:06,560
even though they have a great power in

177
00:07:03,440 --> 00:07:06,560
container networking

178
00:07:06,639 --> 00:07:09,919
for better understanding police wrapper

179
00:07:09,120 --> 00:07:12,479
or paper

180
00:07:09,919 --> 00:07:17,599
in the paper we explain these issues

181
00:07:12,479 --> 00:07:20,639
with the screenshot-based proofs

182
00:07:17,599 --> 00:07:23,680
okay so far we talked about the security

183
00:07:20,639 --> 00:07:26,400
issues in current container networks

184
00:07:23,680 --> 00:07:28,560
then how can we make our container

185
00:07:26,400 --> 00:07:31,520
networks secure

186
00:07:28,560 --> 00:07:32,479
to answer this question we propose

187
00:07:31,520 --> 00:07:34,799
bachelor

188
00:07:32,479 --> 00:07:36,560
that is an intelligent content-aware

189
00:07:34,800 --> 00:07:39,759
communication center box

190
00:07:36,560 --> 00:07:41,840
for intercontinental networking

191
00:07:39,759 --> 00:07:43,759
in this world we focused on how to

192
00:07:41,840 --> 00:07:45,919
protect network

193
00:07:43,759 --> 00:07:47,280
the abuse the secret challenges we

194
00:07:45,919 --> 00:07:50,318
discussed

195
00:07:47,280 --> 00:07:53,840
and how to isolate the content networks

196
00:07:50,319 --> 00:07:53,840
in a more fine-grained way

197
00:07:54,639 --> 00:08:00,879
then to act to achieve such goals

198
00:07:58,000 --> 00:08:02,000
we designed three key components batch

199
00:08:00,879 --> 00:08:04,960
manager

200
00:08:02,000 --> 00:08:06,000
and data visibility and track visibility

201
00:08:04,960 --> 00:08:08,638
services

202
00:08:06,000 --> 00:08:12,479
which are two key services of belgium's

203
00:08:08,639 --> 00:08:15,120
security staff

204
00:08:12,479 --> 00:08:16,960
here is a general container environment

205
00:08:15,120 --> 00:08:18,720
and

206
00:08:16,960 --> 00:08:20,878
this shows the over architectural

207
00:08:18,720 --> 00:08:24,560
bastion especially

208
00:08:20,879 --> 00:08:27,599
where bastian is actually deployed

209
00:08:24,560 --> 00:08:30,639
we see that bastion is deployed at the

210
00:08:27,599 --> 00:08:33,360
network interface of each container and

211
00:08:30,639 --> 00:08:34,080
additionally at the external interface

212
00:08:33,360 --> 00:08:36,080
for

213
00:08:34,080 --> 00:08:38,640
the overall network in the case of

214
00:08:36,080 --> 00:08:40,800
grantees

215
00:08:38,640 --> 00:08:43,838
here we don't modify any existing

216
00:08:40,799 --> 00:08:46,479
container platform or container network

217
00:08:43,839 --> 00:08:49,360
but all network traffic is controlled at

218
00:08:46,480 --> 00:08:52,240
the closed locations from containers

219
00:08:49,360 --> 00:08:53,360
and delivered to destinations through

220
00:08:52,240 --> 00:08:56,000
bastion

221
00:08:53,360 --> 00:08:58,720
instead of a container network or a

222
00:08:56,000 --> 00:09:01,279
security purpose

223
00:08:58,720 --> 00:09:02,240
now i'm going to briefly explain our key

224
00:09:01,279 --> 00:09:04,320
components

225
00:09:02,240 --> 00:09:06,800
and let's first start with the batch

226
00:09:04,320 --> 00:09:06,800
manager

227
00:09:07,680 --> 00:09:12,399
the main rules of the batch manager are

228
00:09:10,399 --> 00:09:14,160
collecting all network information for

229
00:09:12,399 --> 00:09:16,800
deploying containers

230
00:09:14,160 --> 00:09:18,240
through container platforms like docker

231
00:09:16,800 --> 00:09:20,560
and kubernetes

232
00:09:18,240 --> 00:09:23,440
and managing bastion security stack for

233
00:09:20,560 --> 00:09:25,599
each container

234
00:09:23,440 --> 00:09:26,800
first in terms of container network

235
00:09:25,600 --> 00:09:29,120
information

236
00:09:26,800 --> 00:09:30,399
it includes container deployment

237
00:09:29,120 --> 00:09:34,399
computations

238
00:09:30,399 --> 00:09:37,279
and metal policies for each container

239
00:09:34,399 --> 00:09:38,160
and based on such information bastion

240
00:09:37,279 --> 00:09:42,160
first builds

241
00:09:38,160 --> 00:09:44,319
a content network map for all containers

242
00:09:42,160 --> 00:09:46,240
then it automatically discovers in the

243
00:09:44,320 --> 00:09:47,440
container dependencies among those

244
00:09:46,240 --> 00:09:49,920
containers

245
00:09:47,440 --> 00:09:51,120
by figuring out what kinds of containers

246
00:09:49,920 --> 00:09:54,399
are deployed

247
00:09:51,120 --> 00:09:57,519
and how they have some dependencies on

248
00:09:54,399 --> 00:10:00,000
other containers and finally

249
00:09:57,519 --> 00:10:04,480
it builds an intercontinental dependency

250
00:10:00,000 --> 00:10:08,320
map like this

251
00:10:04,480 --> 00:10:09,360
in the meantime bastian deployed the

252
00:10:08,320 --> 00:10:12,399
security stacks

253
00:10:09,360 --> 00:10:15,920
for newly created containers

254
00:10:12,399 --> 00:10:18,320
and update the container network

255
00:10:15,920 --> 00:10:21,519
and intercontinental dependency maps

256
00:10:18,320 --> 00:10:24,800
into their security stacks

257
00:10:21,519 --> 00:10:25,360
if there is any change in the container

258
00:10:24,800 --> 00:10:27,680
network

259
00:10:25,360 --> 00:10:31,360
and intercontinental independence maps

260
00:10:27,680 --> 00:10:34,319
for the existing containers

261
00:10:31,360 --> 00:10:35,519
bachelor earth updates them into the

262
00:10:34,320 --> 00:10:38,000
secret steps for

263
00:10:35,519 --> 00:10:39,440
the containers whose information needs

264
00:10:38,000 --> 00:10:44,160
to be updated

265
00:10:39,440 --> 00:10:45,200
in runtime now we have all information

266
00:10:44,160 --> 00:10:47,839
we need

267
00:10:45,200 --> 00:10:50,240
for fine grain network control and

268
00:10:47,839 --> 00:10:52,880
network isolation

269
00:10:50,240 --> 00:10:53,920
so let's talk about the security

270
00:10:52,880 --> 00:10:56,959
services

271
00:10:53,920 --> 00:10:56,959
fashion provides

272
00:10:58,000 --> 00:11:01,279
as the first secure service bastion's

273
00:11:00,399 --> 00:11:03,040
network

274
00:11:01,279 --> 00:11:05,600
service restricts unnecessary

275
00:11:03,040 --> 00:11:08,800
connectivity among containers

276
00:11:05,600 --> 00:11:12,000
to do this two key functionalities are

277
00:11:08,800 --> 00:11:15,199
introduced to handle container discovery

278
00:11:12,000 --> 00:11:17,839
and intercontainer communications

279
00:11:15,200 --> 00:11:20,160
in terms of intercontinental networking

280
00:11:17,839 --> 00:11:21,279
container discovery is the first step to

281
00:11:20,160 --> 00:11:22,880
identify

282
00:11:21,279 --> 00:11:24,800
other containers that would be

283
00:11:22,880 --> 00:11:28,800
communication targets

284
00:11:24,800 --> 00:11:31,680
using arp requests however

285
00:11:28,800 --> 00:11:32,560
as we get as you guess current secure

286
00:11:31,680 --> 00:11:34,800
solutions

287
00:11:32,560 --> 00:11:36,399
do not control room eye-based

288
00:11:34,800 --> 00:11:39,279
communications

289
00:11:36,399 --> 00:11:42,640
the this process can be exploited by

290
00:11:39,279 --> 00:11:45,760
malicious containers

291
00:11:42,640 --> 00:11:48,000
so best jumpers filters out any

292
00:11:45,760 --> 00:11:50,240
unnecessary container discovery

293
00:11:48,000 --> 00:11:51,200
that doesn't pertain to the present

294
00:11:50,240 --> 00:11:54,959
containers

295
00:11:51,200 --> 00:11:56,959
dependence map simply

296
00:11:54,959 --> 00:11:59,040
since all network information for

297
00:11:56,959 --> 00:12:02,079
dependent containers

298
00:11:59,040 --> 00:12:05,199
is in the container network and

299
00:12:02,079 --> 00:12:07,199
dependency maps bastion blocks

300
00:12:05,200 --> 00:12:08,480
any container discovery for unknown

301
00:12:07,200 --> 00:12:11,519
targets

302
00:12:08,480 --> 00:12:13,920
by directly handling all records for

303
00:12:11,519 --> 00:12:16,720
container discovery by esl

304
00:12:13,920 --> 00:12:19,920
rather than broadcasting the request to

305
00:12:16,720 --> 00:12:19,920
the container network

306
00:12:21,040 --> 00:12:24,880
unfortunately although the direct arp

307
00:12:23,360 --> 00:12:26,800
handler

308
00:12:24,880 --> 00:12:29,920
handle prevents containers from

309
00:12:26,800 --> 00:12:32,560
performing unbounded to police discovery

310
00:12:29,920 --> 00:12:34,639
this coverage is limited to container

311
00:12:32,560 --> 00:12:36,880
level isolation

312
00:12:34,639 --> 00:12:38,240
which means that it does not address

313
00:12:36,880 --> 00:12:41,279
medicine's accesses

314
00:12:38,240 --> 00:12:43,360
among dependent containers so

315
00:12:41,279 --> 00:12:46,079
to further restrict the reachability of

316
00:12:43,360 --> 00:12:46,079
containers

317
00:12:46,240 --> 00:12:50,399
bastion implements container aware the

318
00:12:48,399 --> 00:12:53,279
dog isolation

319
00:12:50,399 --> 00:12:53,680
we can simply think that this is a kind

320
00:12:53,279 --> 00:12:56,160
of an

321
00:12:53,680 --> 00:12:58,800
access control mechanism specifically

322
00:12:56,160 --> 00:13:01,199
designed for containers

323
00:12:58,800 --> 00:13:02,800
since all accessible services for

324
00:13:01,200 --> 00:13:04,839
dependent containers

325
00:13:02,800 --> 00:13:06,079
are in the inter container dependence

326
00:13:04,839 --> 00:13:09,040
map

327
00:13:06,079 --> 00:13:10,239
whenever a pack comes from a container

328
00:13:09,040 --> 00:13:13,279
to bachchan

329
00:13:10,240 --> 00:13:16,240
it inspects the packet with the given

330
00:13:13,279 --> 00:13:16,880
accessory services and if there is no

331
00:13:16,240 --> 00:13:19,680
match

332
00:13:16,880 --> 00:13:21,439
you simply drop the packet otherwise

333
00:13:19,680 --> 00:13:25,120
import the packet to

334
00:13:21,440 --> 00:13:25,120
the corresponding destination

335
00:13:26,240 --> 00:13:29,600
next the third visuality service

336
00:13:28,639 --> 00:13:32,720
provides point

337
00:13:29,600 --> 00:13:35,920
point integrity and confidentiality

338
00:13:32,720 --> 00:13:37,279
among continuing network pools as the

339
00:13:35,920 --> 00:13:39,839
first step

340
00:13:37,279 --> 00:13:42,880
bastion conducts the search verification

341
00:13:39,839 --> 00:13:42,880
of incoming packet

342
00:13:43,120 --> 00:13:46,560
in the case of current secure solutions

343
00:13:45,440 --> 00:13:49,440
they simply use

344
00:13:46,560 --> 00:13:50,800
the source ipm mac addresses impact

345
00:13:49,440 --> 00:13:53,839
headers

346
00:13:50,800 --> 00:13:57,199
however you can easily guess that they

347
00:13:53,839 --> 00:14:00,240
can reverse by malicious containers

348
00:13:57,199 --> 00:14:02,719
so as an alternative solution

349
00:14:00,240 --> 00:14:03,760
often research may be used with incoming

350
00:14:02,720 --> 00:14:07,199
virtual reports

351
00:14:03,760 --> 00:14:09,839
for search verification however

352
00:14:07,199 --> 00:14:11,279
open way switch does not support a nut

353
00:14:09,839 --> 00:14:14,079
operation

354
00:14:11,279 --> 00:14:14,880
which means that we need to specifically

355
00:14:14,079 --> 00:14:18,079
define net

356
00:14:14,880 --> 00:14:21,600
policies for all possible individual

357
00:14:18,079 --> 00:14:21,599
follows between containers

358
00:14:22,079 --> 00:14:28,160
thus unlike such solutions in bastion's

359
00:14:25,600 --> 00:14:29,600
source of education deliveries the

360
00:14:28,160 --> 00:14:32,160
current metadata

361
00:14:29,600 --> 00:14:35,120
to verify the specific sources of

362
00:14:32,160 --> 00:14:35,120
incoming packets

363
00:14:36,880 --> 00:14:41,120
lastly current linux network stacks

364
00:14:40,079 --> 00:14:43,760
cannot prevent

365
00:14:41,120 --> 00:14:45,920
the exposure of intercontainer traffic

366
00:14:43,760 --> 00:14:47,839
from other containers

367
00:14:45,920 --> 00:14:49,680
if you are wondering why they cannot

368
00:14:47,839 --> 00:14:52,880
prevent such exposure

369
00:14:49,680 --> 00:14:55,680
please wrap up our paper

370
00:14:52,880 --> 00:14:56,800
anyway if a malicious container has a

371
00:14:55,680 --> 00:14:58,719
capability to

372
00:14:56,800 --> 00:15:01,599
redirect the traffic of the target

373
00:14:58,720 --> 00:15:04,399
container to itself

374
00:15:01,600 --> 00:15:07,519
it can monitor all traffic from and to

375
00:15:04,399 --> 00:15:07,519
the target container

376
00:15:08,560 --> 00:15:13,920
so to implement less privileged traffic

377
00:15:12,720 --> 00:15:16,639
exposure

378
00:15:13,920 --> 00:15:18,079
that can utilize the recent linux

379
00:15:16,639 --> 00:15:21,680
networking features

380
00:15:18,079 --> 00:15:22,399
xp and evpn and directly inject net

381
00:15:21,680 --> 00:15:24,880
packets

382
00:15:22,399 --> 00:15:26,480
from a source container to a destination

383
00:15:24,880 --> 00:15:29,199
container

384
00:15:26,480 --> 00:15:32,320
so the network packets actually bypass

385
00:15:29,199 --> 00:15:35,120
the container network at the host site

386
00:15:32,320 --> 00:15:36,399
which means that no one can see the

387
00:15:35,120 --> 00:15:38,240
network traffic

388
00:15:36,399 --> 00:15:40,000
between the source and destination

389
00:15:38,240 --> 00:15:43,040
containers from the

390
00:15:40,000 --> 00:15:43,040
container network

391
00:15:44,639 --> 00:15:48,959
okay now i'd like to show how our secret

392
00:15:48,079 --> 00:15:50,719
services

393
00:15:48,959 --> 00:15:52,319
can prevent containers from network

394
00:15:50,720 --> 00:15:54,959
objects

395
00:15:52,320 --> 00:15:56,240
before that i'm introducing an alt-tex

396
00:15:54,959 --> 00:15:58,479
scenario that shows

397
00:15:56,240 --> 00:16:00,320
the current state of container network

398
00:15:58,480 --> 00:16:03,839
security

399
00:16:00,320 --> 00:16:06,480
here there are two microservices and

400
00:16:03,839 --> 00:16:07,440
the lower one is allowed for anyone to

401
00:16:06,480 --> 00:16:10,480
access

402
00:16:07,440 --> 00:16:13,519
and the upper one is only allowed for

403
00:16:10,480 --> 00:16:16,000
registered users to access

404
00:16:13,519 --> 00:16:17,920
here the basic idea of this scenario is

405
00:16:16,000 --> 00:16:19,839
that

406
00:16:17,920 --> 00:16:21,199
an attacker tries to access the

407
00:16:19,839 --> 00:16:24,639
microservice for

408
00:16:21,199 --> 00:16:26,000
for public and get into one of the

409
00:16:24,639 --> 00:16:29,199
containers

410
00:16:26,000 --> 00:16:31,680
in the microservice then while

411
00:16:29,199 --> 00:16:36,160
monitoring network traffic

412
00:16:31,680 --> 00:16:37,199
coming from a registered user the

413
00:16:36,160 --> 00:16:40,719
article replies

414
00:16:37,199 --> 00:16:44,399
the contents requested by the user

415
00:16:40,720 --> 00:16:50,320
with the fake contents and the user

416
00:16:44,399 --> 00:16:52,800
actually received the fake contents

417
00:16:50,320 --> 00:16:54,959
here i'd like to show the steps that the

418
00:16:52,800 --> 00:16:56,800
article carried out

419
00:16:54,959 --> 00:16:59,920
once the article got into one of the

420
00:16:56,800 --> 00:17:02,000
containers for the public microservice

421
00:16:59,920 --> 00:17:03,199
the optical versus scan neighbor

422
00:17:02,000 --> 00:17:06,079
continuous

423
00:17:03,199 --> 00:17:07,760
and we can see that the autocross found

424
00:17:06,079 --> 00:17:10,639
all containers

425
00:17:07,760 --> 00:17:13,039
not only in the public micro service but

426
00:17:10,640 --> 00:17:15,520
also in the microservice for registered

427
00:17:13,039 --> 00:17:15,520
users

428
00:17:15,760 --> 00:17:19,839
then the autographs put the a target

429
00:17:18,720 --> 00:17:22,880
container

430
00:17:19,839 --> 00:17:24,480
and reduced all network traffic of the

431
00:17:22,880 --> 00:17:26,959
container

432
00:17:24,480 --> 00:17:29,120
and the article injects a big contents

433
00:17:26,959 --> 00:17:31,760
while dropping the original one

434
00:17:29,120 --> 00:17:34,080
so finally we can see that a user

435
00:17:31,760 --> 00:17:37,520
receives the fake content

436
00:17:34,080 --> 00:17:37,520
instead of the original one

437
00:17:38,080 --> 00:17:41,520
these objects are quite straightforward

438
00:17:40,880 --> 00:17:44,400
but

439
00:17:41,520 --> 00:17:44,879
what i want to say here is that they are

440
00:17:44,400 --> 00:17:48,640
still

441
00:17:44,880 --> 00:17:50,960
visible in the current container network

442
00:17:48,640 --> 00:17:54,400
then how can bastion prevent containers

443
00:17:50,960 --> 00:17:54,400
from such natural hotels

444
00:17:54,880 --> 00:17:59,280
first let's see how bastion restricts

445
00:17:57,520 --> 00:18:02,960
the topology's visuality

446
00:17:59,280 --> 00:18:04,799
of the article's container we see

447
00:18:02,960 --> 00:18:08,559
there is no restriction on the

448
00:18:04,799 --> 00:18:11,840
container's reachability without batcha

449
00:18:08,559 --> 00:18:14,559
but once we deploy background

450
00:18:11,840 --> 00:18:16,320
as shown in the lower screenshot the

451
00:18:14,559 --> 00:18:20,559
article can only see

452
00:18:16,320 --> 00:18:20,559
the containers that it depends on

453
00:18:20,960 --> 00:18:26,240
second in terms of how bastion

454
00:18:24,240 --> 00:18:27,440
hides the network traffic from other

455
00:18:26,240 --> 00:18:30,480
containers

456
00:18:27,440 --> 00:18:32,000
here we assume that the article always

457
00:18:30,480 --> 00:18:36,160
built the target container

458
00:18:32,000 --> 00:18:39,600
and could redirect both traffic

459
00:18:36,160 --> 00:18:39,600
of the target container

460
00:18:39,760 --> 00:18:43,440
and as shown in the office upper

461
00:18:42,400 --> 00:18:46,640
screenshot

462
00:18:43,440 --> 00:18:49,600
in general we can see the network travel

463
00:18:46,640 --> 00:18:50,880
of the target container at the optical

464
00:18:49,600 --> 00:18:54,080
side

465
00:18:50,880 --> 00:18:55,200
however once we have once we deployed

466
00:18:54,080 --> 00:18:57,439
bastion

467
00:18:55,200 --> 00:18:59,679
no packet is actually monitored at the

468
00:18:57,440 --> 00:19:02,240
optical container

469
00:18:59,679 --> 00:19:04,559
by the way here to show the difference

470
00:19:02,240 --> 00:19:07,200
we intentionally allowed the source to

471
00:19:04,559 --> 00:19:09,760
destination flows to be visible

472
00:19:07,200 --> 00:19:10,559
the destination to source flows to be

473
00:19:09,760 --> 00:19:13,039
hidden by

474
00:19:10,559 --> 00:19:13,039
bastion

475
00:19:13,760 --> 00:19:20,080
third in terms of packet injection

476
00:19:16,880 --> 00:19:23,600
when the article injects a fake packet

477
00:19:20,080 --> 00:19:24,559
in the case in this case a tcp reset

478
00:19:23,600 --> 00:19:28,080
packet

479
00:19:24,559 --> 00:19:29,678
into a container network the packet is

480
00:19:28,080 --> 00:19:32,559
naturally delivered to

481
00:19:29,679 --> 00:19:33,919
the target container if no fashion is

482
00:19:32,559 --> 00:19:38,160
deployed

483
00:19:33,919 --> 00:19:41,039
however as soon as bastion is deployed

484
00:19:38,160 --> 00:19:41,600
those fake packets are immediately

485
00:19:41,039 --> 00:19:44,320
dropped

486
00:19:41,600 --> 00:19:45,280
at the net interface of the article's

487
00:19:44,320 --> 00:19:49,600
container

488
00:19:45,280 --> 00:19:49,600
due to bastion's source verification

489
00:19:49,840 --> 00:19:55,120
at this point point you may wonder if

490
00:19:53,039 --> 00:19:57,919
the over network performance might be

491
00:19:55,120 --> 00:20:00,399
degraded when bastion is deployed

492
00:19:57,919 --> 00:20:02,400
since bastion performs additional

493
00:20:00,400 --> 00:20:06,799
security inspections

494
00:20:02,400 --> 00:20:10,080
so let's see how it performs

495
00:20:06,799 --> 00:20:12,158
here this table shows the therapist

496
00:20:10,080 --> 00:20:15,520
of intercontinental communications

497
00:20:12,159 --> 00:20:17,200
within the same host and across holes

498
00:20:15,520 --> 00:20:19,918
you can see that compared to the

499
00:20:17,200 --> 00:20:21,200
baseline the overall purpose were

500
00:20:19,919 --> 00:20:25,200
improved when

501
00:20:21,200 --> 00:20:27,760
best when we uh deployed bachelor

502
00:20:25,200 --> 00:20:28,640
since bachchan's director fought in

503
00:20:27,760 --> 00:20:30,799
macon gym

504
00:20:28,640 --> 00:20:32,159
particularly made all network traffic

505
00:20:30,799 --> 00:20:34,960
between containers

506
00:20:32,159 --> 00:20:36,320
bypassing a content network more

507
00:20:34,960 --> 00:20:38,720
specifically

508
00:20:36,320 --> 00:20:40,960
bypassing the network step at the host

509
00:20:38,720 --> 00:20:40,960
side

510
00:20:41,120 --> 00:20:44,799
but in the case of intercontinental

511
00:20:42,720 --> 00:20:47,760
communications across holes

512
00:20:44,799 --> 00:20:48,639
the baseline was quite low so the

513
00:20:47,760 --> 00:20:52,480
improvements

514
00:20:48,640 --> 00:20:52,480
by bastion or not that high

515
00:20:53,200 --> 00:20:57,440
and we also deployed bastion in several

516
00:20:56,159 --> 00:21:00,480
container networks

517
00:20:57,440 --> 00:21:01,760
and so the performance implements as we

518
00:21:00,480 --> 00:21:05,200
expected

519
00:21:01,760 --> 00:21:06,480
the in the cases of all container

520
00:21:05,200 --> 00:21:08,400
networks we used

521
00:21:06,480 --> 00:21:11,280
we could see batch change shows better

522
00:21:08,400 --> 00:21:14,840
performance than the existing container

523
00:21:11,280 --> 00:21:17,840
networks while providing strong network

524
00:21:14,840 --> 00:21:17,840
security

525
00:21:18,000 --> 00:21:24,080
okay now let's sum up this presentation

526
00:21:21,840 --> 00:21:26,720
in this work we have investigated the

527
00:21:24,080 --> 00:21:28,399
security of current container networks

528
00:21:26,720 --> 00:21:30,480
and discovered several security

529
00:21:28,400 --> 00:21:34,159
challenges that are critical

530
00:21:30,480 --> 00:21:36,559
in continuing networking then

531
00:21:34,159 --> 00:21:38,320
to cover such security issues we have

532
00:21:36,559 --> 00:21:40,559
proposed bastion

533
00:21:38,320 --> 00:21:42,480
which can intelligently isolate into

534
00:21:40,559 --> 00:21:45,440
container communications

535
00:21:42,480 --> 00:21:47,679
in a more fine-grained way and

536
00:21:45,440 --> 00:21:50,480
effectively mitigate lateral attacks

537
00:21:47,679 --> 00:21:53,520
that abuse the security issues against

538
00:21:50,480 --> 00:21:53,520
pure containers

539
00:21:55,200 --> 00:22:00,960
okay this is the end of my presentation

540
00:21:58,640 --> 00:22:04,159
thank you for listening if you have any

541
00:22:00,960 --> 00:22:13,840
questions please contact me by email

542
00:22:04,159 --> 00:22:13,840
thank you

543
00:22:14,880 --> 00:22:16,960
you

