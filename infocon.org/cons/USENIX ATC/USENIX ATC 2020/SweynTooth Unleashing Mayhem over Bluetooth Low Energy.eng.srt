1
00:00:09,040 --> 00:00:11,040
hi

2
00:00:09,440 --> 00:00:12,959
i'm matthias and today we're going to

3
00:00:11,040 --> 00:00:14,879
present about sciento foliation building

4
00:00:12,960 --> 00:00:17,279
over bluetooth fluid energy

5
00:00:14,880 --> 00:00:18,640
and i'm going to talk most about how we

6
00:00:17,279 --> 00:00:19,439
were able to discover many

7
00:00:18,640 --> 00:00:21,520
vulnerabilities

8
00:00:19,439 --> 00:00:24,400
what was the technique that would apply

9
00:00:21,520 --> 00:00:27,039
to automatically discover these

10
00:00:24,400 --> 00:00:27,840
issues in many iot devices particularly

11
00:00:27,039 --> 00:00:30,320
for

12
00:00:27,840 --> 00:00:31,920
smart smart watches smart things that

13
00:00:30,320 --> 00:00:34,399
are using the tiny

14
00:00:31,920 --> 00:00:35,680
little energy chipsets from popular

15
00:00:34,399 --> 00:00:37,840
vendors

16
00:00:35,680 --> 00:00:39,600
and so this work was mostly done at the

17
00:00:37,840 --> 00:00:40,480
singapore university of technology and

18
00:00:39,600 --> 00:00:42,320
design

19
00:00:40,480 --> 00:00:43,599
although it was a partnership with

20
00:00:42,320 --> 00:00:47,280
keysight and also

21
00:00:43,600 --> 00:00:50,320
a star and i shouldn't also help this uh

22
00:00:47,280 --> 00:00:53,120
he started first at the ctd but then uh

23
00:00:50,320 --> 00:00:54,800
moved to shenandoah tech university to

24
00:00:53,120 --> 00:00:56,959
finish some of the world

25
00:00:54,800 --> 00:00:58,399
so what is rain tooth so swine tube was

26
00:00:56,960 --> 00:00:59,920
a terminal that we initially

27
00:00:58,399 --> 00:01:01,920
used to describe a set of 12

28
00:00:59,920 --> 00:01:02,559
vulnerabilities and bluetooth full

29
00:01:01,920 --> 00:01:05,680
energy

30
00:01:02,559 --> 00:01:06,880
uh stacks of different devices however

31
00:01:05,680 --> 00:01:09,680
by now this number is

32
00:01:06,880 --> 00:01:12,080
unfortunately higher and as we know

33
00:01:09,680 --> 00:01:13,680
bluetooth was named after king harold so

34
00:01:12,080 --> 00:01:15,439
we found interesting what if we name of

35
00:01:13,680 --> 00:01:17,840
the ability based on

36
00:01:15,439 --> 00:01:19,439
harold's own son who is one

37
00:01:17,840 --> 00:01:22,159
beard

38
00:01:19,439 --> 00:01:23,119
and we're not uh we found problems with

39
00:01:22,159 --> 00:01:25,040
major

40
00:01:23,119 --> 00:01:26,240
inventors who sell the cheap who took

41
00:01:25,040 --> 00:01:28,320
chipsets

42
00:01:26,240 --> 00:01:29,839
in the the in the range of the products

43
00:01:28,320 --> 00:01:32,399
that they are using there

44
00:01:29,840 --> 00:01:34,000
goes from smart watches to smart locks

45
00:01:32,400 --> 00:01:36,799
and also trackers

46
00:01:34,000 --> 00:01:38,560
so if you have a smart device which uses

47
00:01:36,799 --> 00:01:39,360
beautiful energy the chance is high to

48
00:01:38,560 --> 00:01:41,439
be using

49
00:01:39,360 --> 00:01:43,200
a chipset from one of the other of these

50
00:01:41,439 --> 00:01:45,839
vendors even though most of them

51
00:01:43,200 --> 00:01:47,280
have patched against the spinner bits we

52
00:01:45,840 --> 00:01:49,920
also found some

53
00:01:47,280 --> 00:01:51,200
standalone stacks uh protocol stacks to

54
00:01:49,920 --> 00:01:54,240
be affected

55
00:01:51,200 --> 00:01:55,280
particularly for our embedded we found a

56
00:01:54,240 --> 00:01:57,199
track on github

57
00:01:55,280 --> 00:01:59,360
data pointed that they also patched

58
00:01:57,200 --> 00:02:00,960
against all of the vulnerabilities

59
00:01:59,360 --> 00:02:03,040
before we started our work we had to

60
00:02:00,960 --> 00:02:05,919
first get localized on how

61
00:02:03,040 --> 00:02:07,200
bluetooth specification uh categorized

62
00:02:05,920 --> 00:02:09,360
its technologies

63
00:02:07,200 --> 00:02:10,399
and you can understand basically uh

64
00:02:09,360 --> 00:02:13,599
three different

65
00:02:10,399 --> 00:02:14,640
flavors of bluetooth present and modern

66
00:02:13,599 --> 00:02:16,480
advances

67
00:02:14,640 --> 00:02:18,879
so the first one we introduced was

68
00:02:16,480 --> 00:02:19,920
bluetooth classic or basic rate extended

69
00:02:18,879 --> 00:02:23,760
data rate

70
00:02:19,920 --> 00:02:26,000
the latest one was low energy but uh

71
00:02:23,760 --> 00:02:27,359
many devices upgrades uh supports both

72
00:02:26,000 --> 00:02:28,800
technologies so they operate in this

73
00:02:27,360 --> 00:02:30,959
long mode

74
00:02:28,800 --> 00:02:32,879
and they they have many similarities in

75
00:02:30,959 --> 00:02:35,760
the protocol but generally low energy

76
00:02:32,879 --> 00:02:36,399
has a slightly lightweight version of l2

77
00:02:35,760 --> 00:02:39,200
cap

78
00:02:36,400 --> 00:02:40,480
protocol there and interestingly if you

79
00:02:39,200 --> 00:02:42,480
look back at the history of

80
00:02:40,480 --> 00:02:44,959
vulnerability's effect in bluetooth we

81
00:02:42,480 --> 00:02:46,959
starting from 2017 which you had

82
00:02:44,959 --> 00:02:48,720
a big one blueborne it must have

83
00:02:46,959 --> 00:02:51,440
affected the implementation

84
00:02:48,720 --> 00:02:52,160
a certain implementation of popular

85
00:02:51,440 --> 00:02:54,800
stocks and

86
00:02:52,160 --> 00:02:55,680
some tiny bits of specs there but uh

87
00:02:54,800 --> 00:02:58,480
each

88
00:02:55,680 --> 00:03:00,239
preceding year we had a different uh

89
00:02:58,480 --> 00:03:02,079
vulnerability it's not an implementation

90
00:03:00,239 --> 00:03:02,879
side on the specification side so for

91
00:03:02,080 --> 00:03:05,760
example

92
00:03:02,879 --> 00:03:06,159
we had this invalid curve attack 2018

93
00:03:05,760 --> 00:03:08,399
knob

94
00:03:06,159 --> 00:03:10,079
and then bias this year so in the

95
00:03:08,400 --> 00:03:12,640
specification

96
00:03:10,080 --> 00:03:14,159
and uh this this exemplifies that

97
00:03:12,640 --> 00:03:15,599
bluetooth specification itself is

98
00:03:14,159 --> 00:03:18,159
complex so it's

99
00:03:15,599 --> 00:03:20,079
it's a it's it's common that there is

100
00:03:18,159 --> 00:03:23,040
also vulnerabilities that

101
00:03:20,080 --> 00:03:24,080
were not found before it is still a

102
00:03:23,040 --> 00:03:26,239
problem that uh

103
00:03:24,080 --> 00:03:28,640
bluetooth by itself as being a wireless

104
00:03:26,239 --> 00:03:31,440
technology is difficult to test so it

105
00:03:28,640 --> 00:03:32,480
takes time for these vendors to be found

106
00:03:31,440 --> 00:03:34,799
but nevertheless

107
00:03:32,480 --> 00:03:36,238
we we realized that there is not much

108
00:03:34,799 --> 00:03:37,680
work done in bluetooth energy

109
00:03:36,239 --> 00:03:40,239
particularly

110
00:03:37,680 --> 00:03:42,239
implementation faults on the low energy

111
00:03:40,239 --> 00:03:44,319
side so that's why we focused only on

112
00:03:42,239 --> 00:03:46,560
bluetooth energy in this world

113
00:03:44,319 --> 00:03:48,000
and the context of that two devices

114
00:03:46,560 --> 00:03:50,720
enable total energy

115
00:03:48,000 --> 00:03:51,760
network operates uh they have different

116
00:03:50,720 --> 00:03:54,560
roles

117
00:03:51,760 --> 00:03:56,319
and for example your smart watch which

118
00:03:54,560 --> 00:03:59,040
which is called the peripheral

119
00:03:56,319 --> 00:04:01,200
is always announcing itself so then your

120
00:03:59,040 --> 00:04:03,359
smartphone which is the central

121
00:04:01,200 --> 00:04:04,720
so there's also this uh this this

122
00:04:03,360 --> 00:04:06,560
default way that

123
00:04:04,720 --> 00:04:08,239
i prefer always advertising central

124
00:04:06,560 --> 00:04:09,439
connects to even though there could be

125
00:04:08,239 --> 00:04:12,000
different combinations

126
00:04:09,439 --> 00:04:13,680
but but nevertheless the way that uh for

127
00:04:12,000 --> 00:04:17,040
example developers implement

128
00:04:13,680 --> 00:04:18,720
their stack is to use the the support of

129
00:04:17,040 --> 00:04:19,919
the standard test equipment for the tool

130
00:04:18,720 --> 00:04:21,040
which is later on used before

131
00:04:19,918 --> 00:04:22,479
certification

132
00:04:21,040 --> 00:04:24,240
and these equipments are really

133
00:04:22,479 --> 00:04:24,639
expensive so they can they can be like

134
00:04:24,240 --> 00:04:26,560
around

135
00:04:24,639 --> 00:04:28,000
ten thousand dollars they because they

136
00:04:26,560 --> 00:04:31,840
are not made not only made

137
00:04:28,000 --> 00:04:34,960
for capturing packets over the air

138
00:04:31,840 --> 00:04:37,280
or testing the the performance or

139
00:04:34,960 --> 00:04:38,000
your equipment but they also test the

140
00:04:37,280 --> 00:04:39,679
quality

141
00:04:38,000 --> 00:04:42,000
and other complicated things on the

142
00:04:39,680 --> 00:04:43,199
physical their part and also because of

143
00:04:42,000 --> 00:04:45,680
the certification

144
00:04:43,199 --> 00:04:47,120
but so we are not interested in testing

145
00:04:45,680 --> 00:04:49,120
all the

146
00:04:47,120 --> 00:04:51,280
all the parts of the technology itself

147
00:04:49,120 --> 00:04:53,120
but only on the protocol itself so

148
00:04:51,280 --> 00:04:55,679
so then one question that we come up

149
00:04:53,120 --> 00:04:57,520
with can we avoid the setup right

150
00:04:55,680 --> 00:04:59,600
and the bluetooth protocol stack is not

151
00:04:57,520 --> 00:05:00,880
simple so the complexity of its

152
00:04:59,600 --> 00:05:02,479
messaging sequences

153
00:05:00,880 --> 00:05:04,400
makes it a little harder to test the

154
00:05:02,479 --> 00:05:05,840
security overall so if we

155
00:05:04,400 --> 00:05:08,159
but we want to summarize the main

156
00:05:05,840 --> 00:05:09,679
procedures we can describe as the

157
00:05:08,160 --> 00:05:11,520
the first one will be the connection

158
00:05:09,680 --> 00:05:13,440
when the peripheral and

159
00:05:11,520 --> 00:05:14,880
central switches from the advertisement

160
00:05:13,440 --> 00:05:17,039
channel

161
00:05:14,880 --> 00:05:18,800
to the data channel when they exchange

162
00:05:17,039 --> 00:05:20,880
actual data

163
00:05:18,800 --> 00:05:21,840
and then the repairing procedure then

164
00:05:20,880 --> 00:05:23,520
performs the

165
00:05:21,840 --> 00:05:25,599
establishment of a common key between

166
00:05:23,520 --> 00:05:27,120
central peripheral and lastly the

167
00:05:25,600 --> 00:05:29,039
nuclear encryption which

168
00:05:27,120 --> 00:05:30,160
only happens on the controller's side

169
00:05:29,039 --> 00:05:32,479
another uh

170
00:05:30,160 --> 00:05:33,840
another important point of whether why

171
00:05:32,479 --> 00:05:34,960
it's important to have access to green

172
00:05:33,840 --> 00:05:37,599
player

173
00:05:34,960 --> 00:05:39,120
we then try to think in a way to test

174
00:05:37,600 --> 00:05:40,800
the all those procedures

175
00:05:39,120 --> 00:05:42,800
that was shown before of bluetooth

176
00:05:40,800 --> 00:05:45,919
energy and also how to

177
00:05:42,800 --> 00:05:47,280
uh have in mind how many fields exchange

178
00:05:45,919 --> 00:05:49,198
between two devices

179
00:05:47,280 --> 00:05:50,719
and one thing that happens in software

180
00:05:49,199 --> 00:05:52,160
is there it's fuzzy

181
00:05:50,720 --> 00:05:53,919
at fuzzy it's really good to test

182
00:05:52,160 --> 00:05:55,360
different uh different programs of

183
00:05:53,919 --> 00:05:57,440
different inputs because

184
00:05:55,360 --> 00:05:58,479
it's really it's really fast and you can

185
00:05:57,440 --> 00:06:00,960
also combine with

186
00:05:58,479 --> 00:06:01,599
evolutionary mechanisms to try different

187
00:06:00,960 --> 00:06:03,599
inputs

188
00:06:01,600 --> 00:06:04,840
and then try to reach different parts of

189
00:06:03,600 --> 00:06:06,560
a program and eventually find

190
00:06:04,840 --> 00:06:08,638
vulnerabilities

191
00:06:06,560 --> 00:06:11,280
the the the challenge is that there is

192
00:06:08,639 --> 00:06:12,880
no much work on the wireless park doing

193
00:06:11,280 --> 00:06:14,960
the same for one last part

194
00:06:12,880 --> 00:06:16,080
so the first challenge that we we

195
00:06:14,960 --> 00:06:17,919
arrived when uh

196
00:06:16,080 --> 00:06:19,120
trying to drink and how to adapt to the

197
00:06:17,919 --> 00:06:21,120
fuzzing design

198
00:06:19,120 --> 00:06:22,560
for low energy and stress of thing or

199
00:06:21,120 --> 00:06:24,960
how to access

200
00:06:22,560 --> 00:06:25,680
and also have full control over the link

201
00:06:24,960 --> 00:06:28,560
layer

202
00:06:25,680 --> 00:06:29,759
right and the other the other is that uh

203
00:06:28,560 --> 00:06:32,400
there is also this

204
00:06:29,759 --> 00:06:34,400
sense of the feedback and how you can

205
00:06:32,400 --> 00:06:35,280
get a feedback from the device that you

206
00:06:34,400 --> 00:06:36,799
are testing

207
00:06:35,280 --> 00:06:38,960
to try to improve it further because

208
00:06:36,800 --> 00:06:42,000
over there things are slower so it's

209
00:06:38,960 --> 00:06:46,318
relevant to try to optimize and send the

210
00:06:42,000 --> 00:06:46,319
the most relevant inputs as we can

211
00:06:46,479 --> 00:06:51,039
and also bluetooth is a heavily stateful

212
00:06:49,360 --> 00:06:53,599
protocol so forever

213
00:06:51,039 --> 00:06:55,039
message exchange there is uh certain

214
00:06:53,599 --> 00:06:57,599
sequences of messages

215
00:06:55,039 --> 00:06:59,599
also some optional sequences that needs

216
00:06:57,599 --> 00:07:02,400
to be taken account so you cannot you

217
00:06:59,599 --> 00:07:03,280
you need to we need to think in a way to

218
00:07:02,400 --> 00:07:05,679
send

219
00:07:03,280 --> 00:07:07,039
not only mutated inputs to the to the

220
00:07:05,680 --> 00:07:07,759
peripheral in this case that you are

221
00:07:07,039 --> 00:07:11,120
testing

222
00:07:07,759 --> 00:07:13,520
but also messages out of order then this

223
00:07:11,120 --> 00:07:16,319
is particularly important to discover

224
00:07:13,520 --> 00:07:16,960
new vulnerabilities that the reason why

225
00:07:16,319 --> 00:07:20,000
they appeared

226
00:07:16,960 --> 00:07:21,680
was out of order messages and also how

227
00:07:20,000 --> 00:07:24,160
to take crashes on anomalies

228
00:07:21,680 --> 00:07:26,080
that will depend a lot on the setup of

229
00:07:24,160 --> 00:07:28,080
the device that they are testing

230
00:07:26,080 --> 00:07:29,440
we then begin by taking on the first

231
00:07:28,080 --> 00:07:32,479
challenge on how we can

232
00:07:29,440 --> 00:07:34,319
send nuclear packets from the center to

233
00:07:32,479 --> 00:07:35,840
the peripheral and back and forth

234
00:07:34,319 --> 00:07:37,680
and it turns out that we can use the

235
00:07:35,840 --> 00:07:38,719
tiny mega controllers which has so

236
00:07:37,680 --> 00:07:40,880
internal radial

237
00:07:38,720 --> 00:07:42,880
support from the fuel energy and all of

238
00:07:40,880 --> 00:07:45,280
these devices this nrf52

239
00:07:42,880 --> 00:07:45,919
device that you can program yourself and

240
00:07:45,280 --> 00:07:47,840
uh

241
00:07:45,919 --> 00:07:50,400
implement the controller from scratch

242
00:07:47,840 --> 00:07:52,000
and because it has support for sd

243
00:07:50,400 --> 00:07:54,080
that will be the perfect setup to

244
00:07:52,000 --> 00:07:55,919
integrate to the further

245
00:07:54,080 --> 00:07:57,440
and elaborating the design itself we

246
00:07:55,919 --> 00:07:59,198
love we elaborated this humor and

247
00:07:57,440 --> 00:08:02,479
covered a non-compliant humor because

248
00:07:59,199 --> 00:08:05,520
uh we are we were implementing uh it

249
00:08:02,479 --> 00:08:08,639
to this whole the whole goal of this

250
00:08:05,520 --> 00:08:09,120
design is to for the pockets nuclear

251
00:08:08,639 --> 00:08:11,120
packs

252
00:08:09,120 --> 00:08:13,840
to and from the center and in the

253
00:08:11,120 --> 00:08:16,160
peripheral and uh because the hci

254
00:08:13,840 --> 00:08:17,039
is not sent over the air it is possible

255
00:08:16,160 --> 00:08:19,039
to move

256
00:08:17,039 --> 00:08:21,280
the link layer from the controller to

257
00:08:19,039 --> 00:08:22,080
the host so we are eliminating the total

258
00:08:21,280 --> 00:08:25,198
need of the

259
00:08:22,080 --> 00:08:26,800
hci by creating the

260
00:08:25,199 --> 00:08:28,800
the link to your procedures totally on

261
00:08:26,800 --> 00:08:29,360
the host not precisely on the model of

262
00:08:28,800 --> 00:08:32,560
the uh

263
00:08:29,360 --> 00:08:34,399
of the low energy protocol

264
00:08:32,559 --> 00:08:36,559
and only handling on the fewer the

265
00:08:34,399 --> 00:08:38,719
essential time sensitivity tasks such as

266
00:08:36,559 --> 00:08:40,079
channel hopping and also detecting the

267
00:08:38,719 --> 00:08:43,360
correct channel to to

268
00:08:40,080 --> 00:08:45,440
switch to and from uh and

269
00:08:43,360 --> 00:08:47,040
why the communicator with the peripheral

270
00:08:45,440 --> 00:08:49,440
this was this was actually

271
00:08:47,040 --> 00:08:51,360
really useful to to for the further to

272
00:08:49,440 --> 00:08:53,519
send arbitrary packets even

273
00:08:51,360 --> 00:08:55,040
and during the connection uh procedure

274
00:08:53,519 --> 00:08:58,160
which we found really basically

275
00:08:55,040 --> 00:09:00,240
vulnerabilities there we gonna introduce

276
00:08:58,160 --> 00:09:02,000
the further architecture which makes

277
00:09:00,240 --> 00:09:02,800
heavy use of this access to the link

278
00:09:02,000 --> 00:09:04,399
layer

279
00:09:02,800 --> 00:09:06,479
and uh into this code the first

280
00:09:04,399 --> 00:09:07,440
component that is common for further is

281
00:09:06,480 --> 00:09:10,080
the

282
00:09:07,440 --> 00:09:11,360
pollution but the cavities that we are

283
00:09:10,080 --> 00:09:13,839
in here for rotating

284
00:09:11,360 --> 00:09:14,480
specific fields depending on some sets

285
00:09:13,839 --> 00:09:16,959
of

286
00:09:14,480 --> 00:09:18,959
valves which are going to show later and

287
00:09:16,959 --> 00:09:20,880
also introduce this factor redundancy

288
00:09:18,959 --> 00:09:21,439
which is to send packets in around

289
00:09:20,880 --> 00:09:24,080
sequence

290
00:09:21,440 --> 00:09:24,640
this is particularly important to try to

291
00:09:24,080 --> 00:09:27,760
find

292
00:09:24,640 --> 00:09:29,120
new paths with the vendors of the stocks

293
00:09:27,760 --> 00:09:31,680
they didn't think of

294
00:09:29,120 --> 00:09:33,760
and lastly impact validation which is

295
00:09:31,680 --> 00:09:36,880
essential for discovering

296
00:09:33,760 --> 00:09:39,279
anomalies which may arise due to either

297
00:09:36,880 --> 00:09:41,040
impact manipulation redundancy or

298
00:09:39,279 --> 00:09:42,720
accommodation thereof

299
00:09:41,040 --> 00:09:44,800
and also the state machine which we

300
00:09:42,720 --> 00:09:46,880
choose to create our own state machine

301
00:09:44,800 --> 00:09:49,199
has to increase the flexibility or later

302
00:09:46,880 --> 00:09:52,240
on replicating the proof of concept

303
00:09:49,200 --> 00:09:55,360
and also adding the conditions so we can

304
00:09:52,240 --> 00:09:55,760
ensure a better validation and of course

305
00:09:55,360 --> 00:09:58,320
to

306
00:09:55,760 --> 00:10:00,240
optimize the impact manipulation block

307
00:09:58,320 --> 00:10:02,160
we employ also a fuzzy

308
00:10:00,240 --> 00:10:03,440
an optimization block there which uses

309
00:10:02,160 --> 00:10:05,839
the cost function

310
00:10:03,440 --> 00:10:07,360
which comes from the model itself

311
00:10:05,839 --> 00:10:09,360
without showcase more than that how the

312
00:10:07,360 --> 00:10:10,959
mutation works but the intuition is

313
00:10:09,360 --> 00:10:11,839
simply the way that we assign uh

314
00:10:10,959 --> 00:10:15,920
probabilities

315
00:10:11,839 --> 00:10:18,079
to to each layer and fields within a

316
00:10:15,920 --> 00:10:19,839
bluetooth packet so by layers i mean the

317
00:10:18,079 --> 00:10:22,160
different protocols contained

318
00:10:19,839 --> 00:10:23,519
within a packet and whenever the first

319
00:10:22,160 --> 00:10:26,399
the fuzzer tries to

320
00:10:23,519 --> 00:10:26,880
to go inside of this packet to iterate

321
00:10:26,399 --> 00:10:29,200
over

322
00:10:26,880 --> 00:10:30,880
it'll look is a first under under layer

323
00:10:29,200 --> 00:10:32,399
probabilities and then

324
00:10:30,880 --> 00:10:34,160
enters the fields and then tries to mute

325
00:10:32,399 --> 00:10:34,959
the diffuse based on the probability now

326
00:10:34,160 --> 00:10:36,480
the

327
00:10:34,959 --> 00:10:38,399
important thing to mention is that we

328
00:10:36,480 --> 00:10:41,839
are assigning the same probabilities for

329
00:10:38,399 --> 00:10:44,000
all the fields of of the same layers

330
00:10:41,839 --> 00:10:45,120
this is to simplify the optimization

331
00:10:44,000 --> 00:10:46,880
part

332
00:10:45,120 --> 00:10:48,800
and we then flatten the all these

333
00:10:46,880 --> 00:10:50,240
probabilities and then assigned to a

334
00:10:48,800 --> 00:10:51,680
state

335
00:10:50,240 --> 00:10:53,440
so here we should increase the packet

336
00:10:51,680 --> 00:10:55,040
relevancy component and the intuition

337
00:10:53,440 --> 00:10:57,279
right this is that whenever there is a

338
00:10:55,040 --> 00:10:59,839
pact going through this component

339
00:10:57,279 --> 00:11:01,200
and it's going to be stored on this

340
00:10:59,839 --> 00:11:02,880
practice history

341
00:11:01,200 --> 00:11:04,880
and uh for example here we have a state

342
00:11:02,880 --> 00:11:07,600
one which then goes to

343
00:11:04,880 --> 00:11:09,200
pact one and we proceed we send this

344
00:11:07,600 --> 00:11:10,079
packet over there and then we go through

345
00:11:09,200 --> 00:11:12,959
state two

346
00:11:10,079 --> 00:11:13,760
which then this component receives part

347
00:11:12,959 --> 00:11:15,680
two

348
00:11:13,760 --> 00:11:17,360
and now we move to step three and then

349
00:11:15,680 --> 00:11:20,880
receive a new part three

350
00:11:17,360 --> 00:11:22,640
but whenever we make this decision of

351
00:11:20,880 --> 00:11:24,720
saving the packet and then before

352
00:11:22,640 --> 00:11:26,160
transmission before transmission

353
00:11:24,720 --> 00:11:28,320
there's a certain chance that the

354
00:11:26,160 --> 00:11:29,839
previous pocket save on the history

355
00:11:28,320 --> 00:11:31,839
is going to be transmitted just after

356
00:11:29,839 --> 00:11:32,160
the current apartment so for example

357
00:11:31,839 --> 00:11:34,959
here

358
00:11:32,160 --> 00:11:36,640
part 1 is randomly chosen keep in mind

359
00:11:34,959 --> 00:11:37,680
that the weights that we attribute for

360
00:11:36,640 --> 00:11:40,800
this random

361
00:11:37,680 --> 00:11:42,560
choice is is the choice of not

362
00:11:40,800 --> 00:11:44,479
picking a packet from the history is

363
00:11:42,560 --> 00:11:45,359
higher than whenever peaking because

364
00:11:44,480 --> 00:11:47,920
otherwise

365
00:11:45,360 --> 00:11:49,839
forever uh it's packets and in the state

366
00:11:47,920 --> 00:11:51,839
of machine they're going to be a

367
00:11:49,839 --> 00:11:53,279
resident packet and the state of machine

368
00:11:51,839 --> 00:11:57,120
will not proceed uh

369
00:11:53,279 --> 00:11:59,600
fluidly as the way that we went so

370
00:11:57,120 --> 00:12:01,279
when the packet is the previous pack is

371
00:11:59,600 --> 00:12:03,040
fitted like this one back to one

372
00:12:01,279 --> 00:12:06,160
it's gonna be sent just after the

373
00:12:03,040 --> 00:12:09,279
current packet in this case factor three

374
00:12:06,160 --> 00:12:12,079
and this after is ascend it's

375
00:12:09,279 --> 00:12:13,519
still on the same state it's not saved

376
00:12:12,079 --> 00:12:15,439
on the practice history

377
00:12:13,519 --> 00:12:16,880
and then assuming that the peripheral

378
00:12:15,440 --> 00:12:19,360
does not misbehave

379
00:12:16,880 --> 00:12:22,240
we proceed normally to city form which

380
00:12:19,360 --> 00:12:24,560
then receives a different packet

381
00:12:22,240 --> 00:12:25,519
as for the validation component the the

382
00:12:24,560 --> 00:12:27,839
way that we

383
00:12:25,519 --> 00:12:29,519
perform this step is to assign different

384
00:12:27,839 --> 00:12:31,839
rules for different states

385
00:12:29,519 --> 00:12:33,760
and depending on whether the response of

386
00:12:31,839 --> 00:12:36,160
the peripheral should be normal or not

387
00:12:33,760 --> 00:12:38,319
we detect it if it's allowed or not so

388
00:12:36,160 --> 00:12:39,760
for example we have here these states

389
00:12:38,320 --> 00:12:41,200
and each one of these three messages

390
00:12:39,760 --> 00:12:42,399
represents different scenarios so for

391
00:12:41,200 --> 00:12:44,399
the first one

392
00:12:42,399 --> 00:12:45,600
uh the messaging would be classified as

393
00:12:44,399 --> 00:12:48,959
incorrect if

394
00:12:45,600 --> 00:12:49,920
the layers or the types of the protocols

395
00:12:48,959 --> 00:12:51,518
on its packet

396
00:12:49,920 --> 00:12:53,599
does not correspond to the expected

397
00:12:51,519 --> 00:12:55,279
layers of a particular state

398
00:12:53,600 --> 00:12:58,000
so far in this case an imperial request

399
00:12:55,279 --> 00:13:00,320
and i'm waiting for a pair response

400
00:12:58,000 --> 00:13:02,880
which is only true on the second message

401
00:13:00,320 --> 00:13:04,639
here now the rejection layers we use

402
00:13:02,880 --> 00:13:06,399
whether the we are expecting the

403
00:13:04,639 --> 00:13:08,560
peripheral to receive

404
00:13:06,399 --> 00:13:09,760
the failure message so this happens when

405
00:13:08,560 --> 00:13:13,518
we new date

406
00:13:09,760 --> 00:13:14,399
for example so message c supposing that

407
00:13:13,519 --> 00:13:17,440
we mutate

408
00:13:14,399 --> 00:13:18,480
the repair request we are expecting a

409
00:13:17,440 --> 00:13:20,480
message such as

410
00:13:18,480 --> 00:13:21,920
smp failure which is then valid in this

411
00:13:20,480 --> 00:13:23,680
case if

412
00:13:21,920 --> 00:13:25,360
if c would be not correspond to this

413
00:13:23,680 --> 00:13:27,599
wagon will correspond to a different

414
00:13:25,360 --> 00:13:29,200
and normal response then would be this

415
00:13:27,600 --> 00:13:32,320
would be an anomaly

416
00:13:29,200 --> 00:13:33,360
and just to exemplify on a real capture

417
00:13:32,320 --> 00:13:35,920
a lady

418
00:13:33,360 --> 00:13:36,959
log could be correspondingly to the

419
00:13:35,920 --> 00:13:38,719
first

420
00:13:36,959 --> 00:13:40,560
response whereas we send a request and

421
00:13:38,720 --> 00:13:42,240
the response is completely wrong

422
00:13:40,560 --> 00:13:43,760
now following up for a more complex

423
00:13:42,240 --> 00:13:45,600
example of the validation which

424
00:13:43,760 --> 00:13:48,480
will help to detect vulnerabilities with

425
00:13:45,600 --> 00:13:50,079
immediate media may arise only if after

426
00:13:48,480 --> 00:13:50,959
sending mutation followed by our

427
00:13:50,079 --> 00:13:53,680
residency

428
00:13:50,959 --> 00:13:54,479
so out of order context here and then in

429
00:13:53,680 --> 00:13:56,560
this case we

430
00:13:54,480 --> 00:13:58,959
start on this list of these services and

431
00:13:56,560 --> 00:14:00,399
we send out our request and

432
00:13:58,959 --> 00:14:02,000
receive a response which is on the

433
00:14:00,399 --> 00:14:04,560
expected so the response

434
00:14:02,000 --> 00:14:06,320
is valid now showing here also the

435
00:14:04,560 --> 00:14:07,839
captures we proceeded to the next state

436
00:14:06,320 --> 00:14:10,000
which is the current request

437
00:14:07,839 --> 00:14:11,519
but we send an utility packet which

438
00:14:10,000 --> 00:14:13,519
turns out that the one field

439
00:14:11,519 --> 00:14:16,160
key size is mutated but then the

440
00:14:13,519 --> 00:14:17,839
peripheral instead of responding with a

441
00:14:16,160 --> 00:14:20,480
failure message it actually responds a

442
00:14:17,839 --> 00:14:22,639
normal message so in this case uh it's

443
00:14:20,480 --> 00:14:25,120
the body response is marked as invalid

444
00:14:22,639 --> 00:14:27,519
and then flagged as an anomaly

445
00:14:25,120 --> 00:14:30,240
and but uh one more problem arise

446
00:14:27,519 --> 00:14:33,279
because on the same state that we the

447
00:14:30,240 --> 00:14:35,680
factory reduced block triggers by

448
00:14:33,279 --> 00:14:37,040
sending uh practice from the previous

449
00:14:35,680 --> 00:14:39,359
part from the history

450
00:14:37,040 --> 00:14:40,959
and sending the encryption request

451
00:14:39,360 --> 00:14:42,720
because we are not follow up with

452
00:14:40,959 --> 00:14:44,319
finishing the returning request and this

453
00:14:42,720 --> 00:14:46,720
packet is not in this

454
00:14:44,320 --> 00:14:49,839
supposed to be seen a disorder this also

455
00:14:46,720 --> 00:14:53,199
yields another anomaly as they prefer

456
00:14:49,839 --> 00:14:55,519
they cannot respond to this request here

457
00:14:53,199 --> 00:14:57,519
and then this is uh what happens to the

458
00:14:55,519 --> 00:14:59,760
kisa therefore vulnerability or one of

459
00:14:57,519 --> 00:15:02,240
the peripherals there crashes after this

460
00:14:59,760 --> 00:15:03,120
sort of sequence well but we have the

461
00:15:02,240 --> 00:15:06,959
notation

462
00:15:03,120 --> 00:15:08,560
followed by um out of order packet

463
00:15:06,959 --> 00:15:10,239
so lastly we have the optimization

464
00:15:08,560 --> 00:15:10,800
component and the idea of this is to

465
00:15:10,240 --> 00:15:13,600
leverage

466
00:15:10,800 --> 00:15:14,240
the state model of the total energy

467
00:15:13,600 --> 00:15:16,240
which then

468
00:15:14,240 --> 00:15:17,600
starts at each iteration of this kind of

469
00:15:16,240 --> 00:15:18,560
phase where the central weights for the

470
00:15:17,600 --> 00:15:20,800
peripheral

471
00:15:18,560 --> 00:15:22,399
and as i stated on the explanation of

472
00:15:20,800 --> 00:15:25,439
the mutation

473
00:15:22,399 --> 00:15:26,399
component we for each state has its own

474
00:15:25,440 --> 00:15:27,839
sets of

475
00:15:26,399 --> 00:15:29,680
probabilities here assigned to each

476
00:15:27,839 --> 00:15:32,880
layer of fields so we

477
00:15:29,680 --> 00:15:33,599
we assign today to the optimizer all

478
00:15:32,880 --> 00:15:35,120
this uh

479
00:15:33,600 --> 00:15:36,880
all those probabilities and other

480
00:15:35,120 --> 00:15:38,480
flatter arrays so

481
00:15:36,880 --> 00:15:40,959
every iteration it tries to improve by

482
00:15:38,480 --> 00:15:43,040
using the equation functions such as the

483
00:15:40,959 --> 00:15:44,880
total number of algorithm crashes

484
00:15:43,040 --> 00:15:47,040
so we are not using uh other

485
00:15:44,880 --> 00:15:49,120
constructions such as timing because

486
00:15:47,040 --> 00:15:53,120
therefore indicates for beautiful energy

487
00:15:49,120 --> 00:15:56,480
that can vary a lot so and

488
00:15:53,120 --> 00:15:58,000
using us normally we we are our goal is

489
00:15:56,480 --> 00:16:00,800
to focus the fuzzing

490
00:15:58,000 --> 00:16:02,240
and the parts that we are mostly causing

491
00:16:00,800 --> 00:16:04,160
issues and then we can

492
00:16:02,240 --> 00:16:06,639
arise on a better conclusion where there

493
00:16:04,160 --> 00:16:09,279
is more security problems there

494
00:16:06,639 --> 00:16:09,839
we go down to the validation setup and

495
00:16:09,279 --> 00:16:11,439
we

496
00:16:09,839 --> 00:16:13,120
show here in this table all the boards

497
00:16:11,440 --> 00:16:15,600
and devices that you use

498
00:16:13,120 --> 00:16:16,959
to test the further and each one you can

499
00:16:15,600 --> 00:16:17,920
see that they have different sample

500
00:16:16,959 --> 00:16:19,599
codes

501
00:16:17,920 --> 00:16:21,360
and the way that it works internally

502
00:16:19,600 --> 00:16:23,759
each one of these bluetooth

503
00:16:21,360 --> 00:16:26,000
chipsets they have here the part for the

504
00:16:23,759 --> 00:16:26,399
user called the sdk api which is public

505
00:16:26,000 --> 00:16:28,880
and then

506
00:16:26,399 --> 00:16:30,560
there is stuck which is just a static

507
00:16:28,880 --> 00:16:32,240
librarian or by their blog that you can

508
00:16:30,560 --> 00:16:33,758
just link to your application

509
00:16:32,240 --> 00:16:36,079
so you need to use it for grammar to

510
00:16:33,759 --> 00:16:37,440
flash all these sample codes the

511
00:16:36,079 --> 00:16:40,479
development board so you can start

512
00:16:37,440 --> 00:16:41,839
testing so this is the the setup you're

513
00:16:40,480 --> 00:16:43,519
going to notice that there is one

514
00:16:41,839 --> 00:16:45,360
board here that we didn't use as we

515
00:16:43,519 --> 00:16:48,959
reported this uh after

516
00:16:45,360 --> 00:16:50,160
we discovered later and uh basically the

517
00:16:48,959 --> 00:16:52,239
workflow that we use

518
00:16:50,160 --> 00:16:54,399
for the for the evolution setup is we

519
00:16:52,240 --> 00:16:56,079
start by getting the development board

520
00:16:54,399 --> 00:16:57,839
then we just need to flash the sample

521
00:16:56,079 --> 00:16:59,199
code sometimes you need to modify the

522
00:16:57,839 --> 00:17:00,560
sample code to enable the features we

523
00:16:59,199 --> 00:17:03,599
want to test

524
00:17:00,560 --> 00:17:04,639
and uh configure the bluetooth address

525
00:17:03,600 --> 00:17:07,839
on the further

526
00:17:04,640 --> 00:17:10,959
we after running it we get the reports

527
00:17:07,839 --> 00:17:13,918
and we just need to mail the verify

528
00:17:10,959 --> 00:17:15,039
if everything is okay and also because

529
00:17:13,919 --> 00:17:16,400
even though the further detects

530
00:17:15,039 --> 00:17:17,119
anomalies it's not automatically

531
00:17:16,400 --> 00:17:19,520
security

532
00:17:17,119 --> 00:17:20,719
vulnerability or security bypass so you

533
00:17:19,520 --> 00:17:22,639
need to identify

534
00:17:20,720 --> 00:17:23,839
and distinguish what what what can

535
00:17:22,640 --> 00:17:26,559
happen there

536
00:17:23,839 --> 00:17:28,399
and of course created epoch to the proof

537
00:17:26,559 --> 00:17:31,039
of concept to replicate the evidence

538
00:17:28,400 --> 00:17:32,799
so you can report it and then this cycle

539
00:17:31,039 --> 00:17:33,520
starts over and by doing that you'll

540
00:17:32,799 --> 00:17:35,520
actually

541
00:17:33,520 --> 00:17:36,639
get a lot of problems and all of this

542
00:17:35,520 --> 00:17:39,039
work siri

543
00:17:36,640 --> 00:17:40,720
fun at least one an issue we didn't go

544
00:17:39,039 --> 00:17:42,160
forward with the evaluation and

545
00:17:40,720 --> 00:17:43,840
unfortunately the great state of

546
00:17:42,160 --> 00:17:45,600
bluetooth uh is

547
00:17:43,840 --> 00:17:47,678
there's not many public available tools

548
00:17:45,600 --> 00:17:49,760
for frozen and the ones that

549
00:17:47,679 --> 00:17:51,200
exist they are mostly around the

550
00:17:49,760 --> 00:17:52,799
bluetooth classic

551
00:17:51,200 --> 00:17:54,960
another thing is that the for the

552
00:17:52,799 --> 00:17:57,520
protocol that they support early to clip

553
00:17:54,960 --> 00:17:59,039
is not it does not exactly fit the model

554
00:17:57,520 --> 00:18:01,200
for the flow energy

555
00:17:59,039 --> 00:18:02,720
so much of the packets sent by this but

556
00:18:01,200 --> 00:18:04,160
those hoses will be discarded by a

557
00:18:02,720 --> 00:18:06,320
beautiful energy device

558
00:18:04,160 --> 00:18:08,480
nevertheless they use the uh some more

559
00:18:06,320 --> 00:18:11,600
primitive strategies such as the random

560
00:18:08,480 --> 00:18:12,320
or using a database for example another

561
00:18:11,600 --> 00:18:15,439
thing is that they

562
00:18:12,320 --> 00:18:17,280
only detect crashes and as of

563
00:18:15,440 --> 00:18:18,559
compared to the strategy they cannot

564
00:18:17,280 --> 00:18:22,160
find logical

565
00:18:18,559 --> 00:18:22,879
problems or anomalies and and of course

566
00:18:22,160 --> 00:18:25,600
they cannot

567
00:18:22,880 --> 00:18:26,080
reach link layer as they run only on the

568
00:18:25,600 --> 00:18:29,439
host

569
00:18:26,080 --> 00:18:30,639
and depend on the on the hci to operate

570
00:18:29,440 --> 00:18:32,160
correctly

571
00:18:30,640 --> 00:18:34,480
within the creative variation of our

572
00:18:32,160 --> 00:18:36,320
further to better repeat the the

573
00:18:34,480 --> 00:18:37,760
different behavior of each individual

574
00:18:36,320 --> 00:18:38,879
component such as the mutation

575
00:18:37,760 --> 00:18:40,960
redundancy

576
00:18:38,880 --> 00:18:42,720
and uh we show them in a graphic and

577
00:18:40,960 --> 00:18:43,760
vertical axis should normally count in

578
00:18:42,720 --> 00:18:45,840
horizontal the

579
00:18:43,760 --> 00:18:46,879
numerator of iterations and uh this

580
00:18:45,840 --> 00:18:48,480
shows that uh

581
00:18:46,880 --> 00:18:50,000
if you try to enable the the fuzzy only

582
00:18:48,480 --> 00:18:51,200
with one component or another

583
00:18:50,000 --> 00:18:52,960
it will it won't find all the

584
00:18:51,200 --> 00:18:54,559
vulnerabilities as it may depend on

585
00:18:52,960 --> 00:18:56,320
certain behaviors to be triggered

586
00:18:54,559 --> 00:18:58,160
so it's always the case that for the

587
00:18:56,320 --> 00:18:59,200
evil when revolution is enabled it can

588
00:18:58,160 --> 00:19:02,080
detect all the

589
00:18:59,200 --> 00:19:02,640
the combined anomalies or the abilities

590
00:19:02,080 --> 00:19:06,080
of the

591
00:19:02,640 --> 00:19:06,400
other cases and uh it's the the number

592
00:19:06,080 --> 00:19:08,639
of

593
00:19:06,400 --> 00:19:09,760
anomalies can also increase a lot if the

594
00:19:08,640 --> 00:19:11,679
devices

595
00:19:09,760 --> 00:19:13,440
affected where has a normal is in

596
00:19:11,679 --> 00:19:13,760
different a lot of different states so

597
00:19:13,440 --> 00:19:16,880
um

598
00:19:13,760 --> 00:19:19,039
two examples of that is the nxp device

599
00:19:16,880 --> 00:19:21,440
which has the led deadlock it responds

600
00:19:19,039 --> 00:19:22,840
badly in different states and the link

601
00:19:21,440 --> 00:19:25,760
which also has

602
00:19:22,840 --> 00:19:27,918
many anomalies and vulnerabilities

603
00:19:25,760 --> 00:19:29,120
spread across many states and then it

604
00:19:27,919 --> 00:19:31,120
triggers uh it

605
00:19:29,120 --> 00:19:32,879
yields on the further uh higher number

606
00:19:31,120 --> 00:19:36,000
of anova account there

607
00:19:32,880 --> 00:19:38,720
and overall the evaluation uh

608
00:19:36,000 --> 00:19:39,600
it was relatively fast although for the

609
00:19:38,720 --> 00:19:42,480
for the surprise

610
00:19:39,600 --> 00:19:44,080
and xp was particularly fast because the

611
00:19:42,480 --> 00:19:46,799
the first seven elevators found

612
00:19:44,080 --> 00:19:48,559
were where the crashes were triggered it

613
00:19:46,799 --> 00:19:51,679
was on basic fields such as the

614
00:19:48,559 --> 00:19:54,879
nuclear length and for the the st

615
00:19:51,679 --> 00:19:57,919
microelectronic devices it was more of a

616
00:19:54,880 --> 00:20:00,400
a timing issue on the on the on the

617
00:19:57,919 --> 00:20:00,960
link layer which was possible to trigger

618
00:20:00,400 --> 00:20:03,520
when

619
00:20:00,960 --> 00:20:04,559
selling uh host clear protocol so this

620
00:20:03,520 --> 00:20:07,840
shows up that uh

621
00:20:04,559 --> 00:20:08,399
just by starting the the first of our

622
00:20:07,840 --> 00:20:10,080
design

623
00:20:08,400 --> 00:20:11,679
and by exploring the link layer it was

624
00:20:10,080 --> 00:20:13,520
already possible to

625
00:20:11,679 --> 00:20:15,440
to trigger some basic vulnerabilities

626
00:20:13,520 --> 00:20:16,080
even though they these companies may use

627
00:20:15,440 --> 00:20:18,720
a

628
00:20:16,080 --> 00:20:20,000
really expensive equipment to test now

629
00:20:18,720 --> 00:20:20,799
as to find our results we have

630
00:20:20,000 --> 00:20:22,559
categorized

631
00:20:20,799 --> 00:20:23,918
our findings into crash that locks with

632
00:20:22,559 --> 00:20:25,360
bypass and anomalies

633
00:20:23,919 --> 00:20:26,799
then the numbers represents the

634
00:20:25,360 --> 00:20:28,799
responses from peripherals which you

635
00:20:26,799 --> 00:20:29,840
found to be a non-complexly specific

636
00:20:28,799 --> 00:20:31,760
section of the

637
00:20:29,840 --> 00:20:34,158
daily standard but the interesting thing

638
00:20:31,760 --> 00:20:37,760
is that two of the civic bypasses

639
00:20:34,159 --> 00:20:39,520
are linked to a misbehavior which is not

640
00:20:37,760 --> 00:20:40,240
well explained on the standard and

641
00:20:39,520 --> 00:20:42,879
unless

642
00:20:40,240 --> 00:20:44,320
out of order packets being present

643
00:20:42,880 --> 00:20:45,440
during the repairing process so when

644
00:20:44,320 --> 00:20:47,520
this happens

645
00:20:45,440 --> 00:20:48,880
uh the security of these two devices

646
00:20:47,520 --> 00:20:50,879
fails at some point and

647
00:20:48,880 --> 00:20:52,880
for the date skip it's a bit less

648
00:20:50,880 --> 00:20:54,720
serious because it relies on

649
00:20:52,880 --> 00:20:55,919
on a previous stage on the current

650
00:20:54,720 --> 00:20:57,679
process but it's still

651
00:20:55,919 --> 00:20:59,919
possible to bypass a security property

652
00:20:57,679 --> 00:21:02,640
defined on the standard here

653
00:20:59,919 --> 00:21:03,120
another thing is that uh uh you know uh

654
00:21:02,640 --> 00:21:05,840
there's a

655
00:21:03,120 --> 00:21:07,120
widely spread no compliance uh regarding

656
00:21:05,840 --> 00:21:08,639
to the connection procedure which a

657
00:21:07,120 --> 00:21:11,120
certain feed can be

658
00:21:08,640 --> 00:21:12,159
outside of what is specified under under

659
00:21:11,120 --> 00:21:13,840
standard

660
00:21:12,159 --> 00:21:15,919
and then there is this question why this

661
00:21:13,840 --> 00:21:17,439
certification didn't catch it if it's a

662
00:21:15,919 --> 00:21:20,000
basic field so that that was an

663
00:21:17,440 --> 00:21:22,480
observation that we did

664
00:21:20,000 --> 00:21:23,600
now this this was the second uh batch

665
00:21:22,480 --> 00:21:25,760
that we released

666
00:21:23,600 --> 00:21:27,120
so a bit more uh the devices were

667
00:21:25,760 --> 00:21:28,840
affected by this

668
00:21:27,120 --> 00:21:30,559
bits were less serious because it was

669
00:21:28,840 --> 00:21:32,559
mostly a crash

670
00:21:30,559 --> 00:21:33,760
and now that lock that we found on some

671
00:21:32,559 --> 00:21:35,918
of some other vendors

672
00:21:33,760 --> 00:21:37,440
but particularly uh uh the silicon

673
00:21:35,919 --> 00:21:39,200
vendor reported that uh

674
00:21:37,440 --> 00:21:40,960
some of these clients were affected by

675
00:21:39,200 --> 00:21:42,960
the disclosure

676
00:21:40,960 --> 00:21:44,960
uh starting back to we we perform this

677
00:21:42,960 --> 00:21:45,360
test with rio with little products such

678
00:21:44,960 --> 00:21:47,280
as

679
00:21:45,360 --> 00:21:48,559
vtbt the energy august smart lock so

680
00:21:47,280 --> 00:21:51,440
which one of some

681
00:21:48,559 --> 00:21:52,158
few categories of smartphone and we we

682
00:21:51,440 --> 00:21:54,080
have released

683
00:21:52,159 --> 00:21:55,760
some uh two videos showcasing these

684
00:21:54,080 --> 00:21:57,678
attacks on their other devices

685
00:21:55,760 --> 00:21:59,200
and recently for one of these devices

686
00:21:57,679 --> 00:22:02,000
this could be this computer

687
00:21:59,200 --> 00:22:03,120
here it has it's it's vulnerable to the

688
00:22:02,000 --> 00:22:04,960
publicity crash

689
00:22:03,120 --> 00:22:06,799
which uses the one texas instruments

690
00:22:04,960 --> 00:22:08,640
device and

691
00:22:06,799 --> 00:22:10,080
it's just that the vulnerabilities is a

692
00:22:08,640 --> 00:22:12,240
crash by itself but

693
00:22:10,080 --> 00:22:13,600
because the the product the product to

694
00:22:12,240 --> 00:22:15,840
vendors for grafts implement

695
00:22:13,600 --> 00:22:17,760
the the watchdog timer which is a

696
00:22:15,840 --> 00:22:21,199
feature to automatically reset the

697
00:22:17,760 --> 00:22:23,440
the equipment the tracker cannot be

698
00:22:21,200 --> 00:22:25,200
resetted until we manually open up it

699
00:22:23,440 --> 00:22:26,720
with a screwdriver

700
00:22:25,200 --> 00:22:28,320
so that was actually a different

701
00:22:26,720 --> 00:22:30,400
observation about this

702
00:22:28,320 --> 00:22:31,360
so as for the disclosure process we

703
00:22:30,400 --> 00:22:34,480
released the

704
00:22:31,360 --> 00:22:35,120
first version of february this year and

705
00:22:34,480 --> 00:22:37,919
uh

706
00:22:35,120 --> 00:22:39,760
we also recently the exploit repository

707
00:22:37,919 --> 00:22:41,520
and github but before that we gave

708
00:22:39,760 --> 00:22:43,520
90 days starting from the last whenever

709
00:22:41,520 --> 00:22:45,039
we contacted however for the second

710
00:22:43,520 --> 00:22:45,840
batch we hold up a bit more as there

711
00:22:45,039 --> 00:22:48,320
were some

712
00:22:45,840 --> 00:22:49,600
concerns from so many business regarding

713
00:22:48,320 --> 00:22:52,320
the

714
00:22:49,600 --> 00:22:53,360
what other avengers could be affected

715
00:22:52,320 --> 00:22:55,200
and uh but

716
00:22:53,360 --> 00:22:56,959
as of the day of regard of this video

717
00:22:55,200 --> 00:22:58,880
only one

718
00:22:56,960 --> 00:23:01,840
silicon valley did not patch and i saw

719
00:22:58,880 --> 00:23:03,760
the spine two vulnerabilities

720
00:23:01,840 --> 00:23:05,678
that's for defined remarks of our work

721
00:23:03,760 --> 00:23:08,000
and it is interesting to see that the

722
00:23:05,679 --> 00:23:10,320
certification does not does not was not

723
00:23:08,000 --> 00:23:12,559
prevented bad implementation neither i

724
00:23:10,320 --> 00:23:13,840
stack free of non-comprises to be to be

725
00:23:12,559 --> 00:23:17,280
present in a

726
00:23:13,840 --> 00:23:20,639
commercial product even if the

727
00:23:17,280 --> 00:23:22,080
the comprise is basic and uh

728
00:23:20,640 --> 00:23:23,679
there is there could be better

729
00:23:22,080 --> 00:23:26,320
experience some parts of the

730
00:23:23,679 --> 00:23:28,400
specification uh particularly regarding

731
00:23:26,320 --> 00:23:30,879
what happens when there is a

732
00:23:28,400 --> 00:23:31,840
one procedure starts on top of another

733
00:23:30,880 --> 00:23:34,400
such as encryption

734
00:23:31,840 --> 00:23:35,120
and then simultaneously with smp pairing

735
00:23:34,400 --> 00:23:37,679
this was the

736
00:23:35,120 --> 00:23:39,439
with cause of two of the security issues

737
00:23:37,679 --> 00:23:42,000
that we found

738
00:23:39,440 --> 00:23:43,840
and work also shows that over there

739
00:23:42,000 --> 00:23:44,400
fuzzing is still relevant so leaving

740
00:23:43,840 --> 00:23:46,480
that you

741
00:23:44,400 --> 00:23:47,919
you give it access to the lowest level

742
00:23:46,480 --> 00:23:50,159
of a wireless

743
00:23:47,919 --> 00:23:51,840
protocol it's possible to find many

744
00:23:50,159 --> 00:23:54,240
issues there

745
00:23:51,840 --> 00:23:55,439
this sparks another questions regarding

746
00:23:54,240 --> 00:23:57,360
what happens to

747
00:23:55,440 --> 00:23:58,720
to other protocols regarding their

748
00:23:57,360 --> 00:24:01,840
security are there's

749
00:23:58,720 --> 00:24:03,679
the are they secure or they are as

750
00:24:01,840 --> 00:24:05,520
vulnerable as the discoveries that we

751
00:24:03,679 --> 00:24:08,640
found such as belly mesh or

752
00:24:05,520 --> 00:24:09,918
also wi-fi is mesh maybe 5g or even

753
00:24:08,640 --> 00:24:11,200
anybody of t

754
00:24:09,919 --> 00:24:13,840
so in general we believe that the

755
00:24:11,200 --> 00:24:17,200
morphology tools are needed to cover

756
00:24:13,840 --> 00:24:19,039
those other types of technologies

757
00:24:17,200 --> 00:24:21,600
and overall i believe that this was a

758
00:24:19,039 --> 00:24:24,158
lesson learned for the industry so

759
00:24:21,600 --> 00:24:25,199
we believe that product vendors may we

760
00:24:24,159 --> 00:24:27,520
think better on

761
00:24:25,200 --> 00:24:29,440
what are the chips that they are using

762
00:24:27,520 --> 00:24:30,960
their products and opt for the vendors

763
00:24:29,440 --> 00:24:32,640
that are more transparent

764
00:24:30,960 --> 00:24:34,000
in regards to their process and notify

765
00:24:32,640 --> 00:24:35,679
them early

766
00:24:34,000 --> 00:24:37,279
when there is a certain disclosure or

767
00:24:35,679 --> 00:24:39,360
patching process

768
00:24:37,279 --> 00:24:41,360
and of course the further is available

769
00:24:39,360 --> 00:24:42,320
open source open request or assign to

770
00:24:41,360 --> 00:24:45,520
the mail

771
00:24:42,320 --> 00:24:48,000
where the the indicator of that the

772
00:24:45,520 --> 00:24:49,918
exploit 2 and the driver refumer is

773
00:24:48,000 --> 00:24:52,559
available on the github repository

774
00:24:49,919 --> 00:24:53,600
where everyone can try out the test

775
00:24:52,559 --> 00:24:55,840
scripts and also

776
00:24:53,600 --> 00:24:57,678
have access to the room clear to do

777
00:24:55,840 --> 00:25:00,320
their own experiments

778
00:24:57,679 --> 00:25:13,679
well thank you all for your time feel

779
00:25:00,320 --> 00:25:13,678
free to reach us bearing

