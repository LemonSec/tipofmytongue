1
00:00:08,160 --> 00:00:11,280
hello everyone

2
00:00:09,040 --> 00:00:13,040
i'm patreon here from chinho university

3
00:00:11,280 --> 00:00:13,678
today i'm going to talk about our work

4
00:00:13,040 --> 00:00:15,599
conference

5
00:00:13,679 --> 00:00:17,600
a decentralized blockchain with high

6
00:00:15,599 --> 00:00:19,359
throughput and fast confirmation

7
00:00:17,600 --> 00:00:22,240
this is a joint work of chinhoy

8
00:00:19,359 --> 00:00:24,400
university and conference foundation

9
00:00:22,240 --> 00:00:26,479
to begin with i'd like to talk about

10
00:00:24,400 --> 00:00:28,560
what an ideal blockchain is like

11
00:00:26,480 --> 00:00:30,000
we think ideal blockchain should have

12
00:00:28,560 --> 00:00:32,640
the following properties

13
00:00:30,000 --> 00:00:34,800
the first is robustness that is it

14
00:00:32,640 --> 00:00:35,360
should have strong safety to defend

15
00:00:34,800 --> 00:00:37,839
against

16
00:00:35,360 --> 00:00:40,000
double spending attacks it should also

17
00:00:37,840 --> 00:00:41,440
have good liveness to be against denial

18
00:00:40,000 --> 00:00:43,280
of service attacks

19
00:00:41,440 --> 00:00:45,280
secondly the system should have high

20
00:00:43,280 --> 00:00:47,120
performance you know since then it

21
00:00:45,280 --> 00:00:49,280
should achieve both high throughput

22
00:00:47,120 --> 00:00:50,239
and no confirmation latency at the same

23
00:00:49,280 --> 00:00:52,239
time

24
00:00:50,239 --> 00:00:53,519
certainly it should have good

25
00:00:52,239 --> 00:00:56,399
decentralization

26
00:00:53,520 --> 00:00:57,520
that is it can scale to large amounts of

27
00:00:56,399 --> 00:00:59,840
participate

28
00:00:57,520 --> 00:01:02,320
and are now optional to join and leave

29
00:00:59,840 --> 00:01:04,799
the network without permission

30
00:01:02,320 --> 00:01:06,880
not to most valuable pronouncing systems

31
00:01:04,799 --> 00:01:08,720
bitcoin and ethereum both have good

32
00:01:06,880 --> 00:01:10,798
robustness and discrimination

33
00:01:08,720 --> 00:01:13,280
but still suffer a lot from performance

34
00:01:10,799 --> 00:01:14,159
problems which brings undesirable user

35
00:01:13,280 --> 00:01:16,560
experience

36
00:01:14,159 --> 00:01:18,000
non-processing dna and scheduling

37
00:01:16,560 --> 00:01:20,159
transaction fees

38
00:01:18,000 --> 00:01:21,840
for example the typical transaction

39
00:01:20,159 --> 00:01:23,360
throughput of bitcoin is about 7

40
00:01:21,840 --> 00:01:25,840
transactions per second

41
00:01:23,360 --> 00:01:27,280
and the eastern throughput is about 30

42
00:01:25,840 --> 00:01:29,600
transactions per second

43
00:01:27,280 --> 00:01:30,400
where other central services like paypal

44
00:01:29,600 --> 00:01:32,158
or visa

45
00:01:30,400 --> 00:01:33,520
can provide hundreds or thousands of

46
00:01:32,159 --> 00:01:35,520
transactions per second

47
00:01:33,520 --> 00:01:38,798
which indicates the level of support

48
00:01:35,520 --> 00:01:38,798
needed in real world

49
00:01:38,960 --> 00:01:42,479
in order to better understand why

50
00:01:40,799 --> 00:01:43,439
confidence can be superior to

51
00:01:42,479 --> 00:01:45,840
alternative

52
00:01:43,439 --> 00:01:47,199
existing blocking systems let's first

53
00:01:45,840 --> 00:01:49,600
look at some background

54
00:01:47,200 --> 00:01:51,040
about how bitcoin and ether work

55
00:01:49,600 --> 00:01:53,199
typically a public

56
00:01:51,040 --> 00:01:54,960
and decentralized blockchain system like

57
00:01:53,200 --> 00:01:57,439
bitcoin is built upon

58
00:01:54,960 --> 00:02:00,479
a peer-to-peer gossip network where each

59
00:01:57,439 --> 00:02:02,960
node is connected to several other nodes

60
00:02:00,479 --> 00:02:05,119
transactions are packed into blocks a

61
00:02:02,960 --> 00:02:08,079
block containing user transactions

62
00:02:05,119 --> 00:02:10,639
will be broadcasted in the network and

63
00:02:08,080 --> 00:02:13,040
rapidly to all the nodes

64
00:02:10,639 --> 00:02:13,679
the blocks form a chain and the nature

65
00:02:13,040 --> 00:02:15,920
for the

66
00:02:13,680 --> 00:02:18,000
transaction history and all the nodes in

67
00:02:15,920 --> 00:02:19,760
the network will eventually represent

68
00:02:18,000 --> 00:02:22,080
the same nature

69
00:02:19,760 --> 00:02:24,720
in the chain of nodes the nato one can

70
00:02:22,080 --> 00:02:26,480
be treated as a vote to the only one

71
00:02:24,720 --> 00:02:29,520
every node in the network can generate

72
00:02:26,480 --> 00:02:31,760
new blocks to vote for the previous one

73
00:02:29,520 --> 00:02:34,080
if the voting is cheap an untangle can

74
00:02:31,760 --> 00:02:35,840
easily create tens of nodes

75
00:02:34,080 --> 00:02:39,120
to actually manipulate the pronounced

76
00:02:35,840 --> 00:02:41,440
teenager this is called civil attention

77
00:02:39,120 --> 00:02:43,680
in order to avoid this vulnerability

78
00:02:41,440 --> 00:02:44,239
bitcoin and ether introduce a mechanism

79
00:02:43,680 --> 00:02:46,640
called

80
00:02:44,239 --> 00:02:48,239
proof of work that uses computation

81
00:02:46,640 --> 00:02:51,119
power and voting rate

82
00:02:48,239 --> 00:02:53,440
specifically to generate a block a node

83
00:02:51,120 --> 00:02:55,680
needs to solve a puzzle which consumes

84
00:02:53,440 --> 00:02:56,560
considerable communication resources

85
00:02:55,680 --> 00:03:00,080
this process

86
00:02:56,560 --> 00:03:02,239
is called mining bitcoin and

87
00:03:00,080 --> 00:03:03,120
its variants adopt the knack mode

88
00:03:02,239 --> 00:03:04,560
consensus

89
00:03:03,120 --> 00:03:07,120
where the language chain rule is

90
00:03:04,560 --> 00:03:09,360
organized in the language chain rule

91
00:03:07,120 --> 00:03:10,319
all the honest participants agree on the

92
00:03:09,360 --> 00:03:12,640
language chain

93
00:03:10,319 --> 00:03:13,359
and the vending systems in history in

94
00:03:12,640 --> 00:03:15,279
practice

95
00:03:13,360 --> 00:03:17,519
the length of the chain also considers

96
00:03:15,280 --> 00:03:19,360
the consumed computation power

97
00:03:17,519 --> 00:03:21,200
and the weight of the block which is

98
00:03:19,360 --> 00:03:23,120
called the mining difficulty

99
00:03:21,200 --> 00:03:24,798
normally the security guarantee are not

100
00:03:23,120 --> 00:03:27,120
commodore consensus event

101
00:03:24,799 --> 00:03:29,280
as long as more than 50 computation

102
00:03:27,120 --> 00:03:32,159
power is owned by honest nodes

103
00:03:29,280 --> 00:03:33,360
long exchange also formed by them a

104
00:03:32,159 --> 00:03:35,760
superficial reason

105
00:03:33,360 --> 00:03:37,440
and why this system can only achieve

106
00:03:35,760 --> 00:03:39,280
there are no throughput event

107
00:03:37,440 --> 00:03:42,079
they typically employ snow block

108
00:03:39,280 --> 00:03:45,200
generation rate and small block size

109
00:03:42,080 --> 00:03:46,000
for example bitcoin adopts one megabyte

110
00:03:45,200 --> 00:03:49,119
block size

111
00:03:46,000 --> 00:03:52,560
per 10 minutes variation adopts about

112
00:03:49,120 --> 00:03:54,720
100 kilobyte blocks per 50 seconds

113
00:03:52,560 --> 00:03:57,040
these parameters significantly limit

114
00:03:54,720 --> 00:03:59,280
their throughput

115
00:03:57,040 --> 00:04:00,640
so what if we run a further consensus

116
00:03:59,280 --> 00:04:03,519
with nigel block

117
00:04:00,640 --> 00:04:05,839
our first terminal generation rate

118
00:04:03,519 --> 00:04:07,920
simply doing this does not work because

119
00:04:05,840 --> 00:04:10,000
if so we will get a nature look like

120
00:04:07,920 --> 00:04:12,399
this the issue here is that

121
00:04:10,000 --> 00:04:14,400
there are a lot of folks in the nature

122
00:04:12,400 --> 00:04:16,239
this is because it takes the time to

123
00:04:14,400 --> 00:04:18,880
broadcast a new new minor product

124
00:04:16,238 --> 00:04:21,198
across the entire network during this

125
00:04:18,880 --> 00:04:22,240
delay other miners may not be able to

126
00:04:21,199 --> 00:04:25,600
see this new world

127
00:04:22,240 --> 00:04:27,919
neopreneur and still mine their own

128
00:04:25,600 --> 00:04:30,080
openers following the same older block

129
00:04:27,919 --> 00:04:31,758
and therefore introduce the fault

130
00:04:30,080 --> 00:04:33,120
natural block sizes means longer

131
00:04:31,759 --> 00:04:35,040
broadcasted delay

132
00:04:33,120 --> 00:04:36,240
which means more concurrent bars and

133
00:04:35,040 --> 00:04:38,240
lots more faults

134
00:04:36,240 --> 00:04:40,000
the faster pronunciation rate and a

135
00:04:38,240 --> 00:04:42,000
similarity

136
00:04:40,000 --> 00:04:44,240
there are two drawbanks if the name

137
00:04:42,000 --> 00:04:47,040
nature has too many folks

138
00:04:44,240 --> 00:04:48,720
first in the ninth chain rule unemployed

139
00:04:47,040 --> 00:04:51,600
in the language chain are considered

140
00:04:48,720 --> 00:04:53,520
valid other blocks on the force will be

141
00:04:51,600 --> 00:04:55,600
discarded and with networks and

142
00:04:53,520 --> 00:04:58,560
processing resources

143
00:04:55,600 --> 00:05:01,199
secondly exemplifies the security which

144
00:04:58,560 --> 00:05:03,600
is a more severe issue

145
00:05:01,199 --> 00:05:05,039
to see why it is not safe anymore let's

146
00:05:03,600 --> 00:05:07,360
see an example

147
00:05:05,039 --> 00:05:09,039
if we have the same number of blocks the

148
00:05:07,360 --> 00:05:11,919
more force that the nature have

149
00:05:09,039 --> 00:05:13,919
the shorter israelites chain suppose the

150
00:05:11,919 --> 00:05:15,359
lungs here only contains 10 percent of

151
00:05:13,919 --> 00:05:18,799
drugs in the nature

152
00:05:15,360 --> 00:05:21,840
this means the attacker can only have

153
00:05:18,800 --> 00:05:22,320
use only 10 percent computation power to

154
00:05:21,840 --> 00:05:25,198
reverse

155
00:05:22,320 --> 00:05:27,919
the longest chain which significantly

156
00:05:25,199 --> 00:05:30,479
reduces the security guarantee

157
00:05:27,919 --> 00:05:31,520
later on another consensus algorithm

158
00:05:30,479 --> 00:05:33,680
called ghost

159
00:05:31,520 --> 00:05:34,799
has been proposed to address this

160
00:05:33,680 --> 00:05:38,400
security issue

161
00:05:34,800 --> 00:05:40,320
caused by folks it is also going to net

162
00:05:38,400 --> 00:05:41,280
all the nodes agree on a single chain

163
00:05:40,320 --> 00:05:43,599
indonesia

164
00:05:41,280 --> 00:05:44,400
but instead of using longest chain rule

165
00:05:43,600 --> 00:05:46,880
it

166
00:05:44,400 --> 00:05:48,080
applies the heaviest subshell

167
00:05:46,880 --> 00:05:49,759
specifically

168
00:05:48,080 --> 00:05:52,240
to connect the blocks into the

169
00:05:49,759 --> 00:05:54,720
earthquake chain it starts from picking

170
00:05:52,240 --> 00:05:56,639
the genesis block into the agreed chain

171
00:05:54,720 --> 00:05:58,000
the genesis block is the first one in

172
00:05:56,639 --> 00:06:00,880
the nature then

173
00:05:58,000 --> 00:06:01,440
it iteratively advances to the child

174
00:06:00,880 --> 00:06:04,319
block

175
00:06:01,440 --> 00:06:06,560
with a heavy sub tree and include it

176
00:06:04,319 --> 00:06:09,280
into the grid chain

177
00:06:06,560 --> 00:06:11,600
here is an example we first connect the

178
00:06:09,280 --> 00:06:14,000
genesis block into the aggregate chain

179
00:06:11,600 --> 00:06:15,039
the genesis node has two child blocks a

180
00:06:14,000 --> 00:06:17,360
and b

181
00:06:15,039 --> 00:06:18,080
the sub tree of a has six blocks while

182
00:06:17,360 --> 00:06:20,960
sub-shell b

183
00:06:18,080 --> 00:06:22,560
only have five blocks so we sneak a into

184
00:06:20,960 --> 00:06:25,359
the agreed chain

185
00:06:22,560 --> 00:06:26,160
then following the same rule we will

186
00:06:25,360 --> 00:06:30,319
have

187
00:06:26,160 --> 00:06:32,800
c e and h also included in the chain

188
00:06:30,319 --> 00:06:34,560
when generating an obnox it follows the

189
00:06:32,800 --> 00:06:36,800
next national interchange

190
00:06:34,560 --> 00:06:38,639
unlike the longest chain rule ghost

191
00:06:36,800 --> 00:06:39,520
makes all the nodes including the blocks

192
00:06:38,639 --> 00:06:42,000
in the force

193
00:06:39,520 --> 00:06:44,240
contribute to the transnation and hence

194
00:06:42,000 --> 00:06:46,960
does not have the security issue that i

195
00:06:44,240 --> 00:06:49,199
mentioned before

196
00:06:46,960 --> 00:06:50,719
however ghost still suffers from

197
00:06:49,199 --> 00:06:53,919
niceness a tank

198
00:06:50,720 --> 00:06:55,360
here is an example assume the honest

199
00:06:53,919 --> 00:06:57,840
nodes from two groups

200
00:06:55,360 --> 00:06:59,280
and there's a misty dna d between those

201
00:06:57,840 --> 00:07:02,239
in different groups

202
00:06:59,280 --> 00:07:03,119
while the communication dna of nodes in

203
00:07:02,240 --> 00:07:05,599
the same group

204
00:07:03,120 --> 00:07:07,120
or between a tanker and any other honest

205
00:07:05,599 --> 00:07:10,159
node can be ignored

206
00:07:07,120 --> 00:07:11,120
because of such messy dna there can be a

207
00:07:10,160 --> 00:07:13,520
period where

208
00:07:11,120 --> 00:07:14,240
the nature consists of two folks of

209
00:07:13,520 --> 00:07:17,039
group a

210
00:07:14,240 --> 00:07:19,199
and group b the tank can secretly mind

211
00:07:17,039 --> 00:07:21,199
blocked on both the folk a and f of b

212
00:07:19,199 --> 00:07:23,280
and does not immediately expose its

213
00:07:21,199 --> 00:07:26,080
nodes towards node

214
00:07:23,280 --> 00:07:28,000
later on when group a match some new

215
00:07:26,080 --> 00:07:30,560
blocks following the force a

216
00:07:28,000 --> 00:07:31,199
and send them to group b the tanker may

217
00:07:30,560 --> 00:07:33,440
obser

218
00:07:31,199 --> 00:07:34,720
observe this before group b because of

219
00:07:33,440 --> 00:07:37,840
the network delay

220
00:07:34,720 --> 00:07:40,080
between the two groups it then

221
00:07:37,840 --> 00:07:40,880
exposes the blocks mine alpha b to group

222
00:07:40,080 --> 00:07:43,599
b

223
00:07:40,880 --> 00:07:45,360
this will make proof because the folk b

224
00:07:43,599 --> 00:07:47,360
is heavier than folk a

225
00:07:45,360 --> 00:07:48,639
so they will continue to mind blocks in

226
00:07:47,360 --> 00:07:51,680
for b

227
00:07:48,639 --> 00:07:52,560
and then the tanker transpose the bronx

228
00:07:51,680 --> 00:07:55,280
minor in force a

229
00:07:52,560 --> 00:07:57,120
to the nodes in group a this will also

230
00:07:55,280 --> 00:08:00,159
make those into placing sent

231
00:07:57,120 --> 00:08:02,560
called a is still heavier if the block

232
00:08:00,160 --> 00:08:04,240
generation is much faster than b

233
00:08:02,560 --> 00:08:06,639
then if there will be a lot of

234
00:08:04,240 --> 00:08:08,720
intransitive blocks during the delay

235
00:08:06,639 --> 00:08:11,360
and a tanker with little computation

236
00:08:08,720 --> 00:08:14,240
power can store the consensus forever

237
00:08:11,360 --> 00:08:15,680
and this is what we call venous attack

238
00:08:14,240 --> 00:08:18,000
the attacker can balance

239
00:08:15,680 --> 00:08:20,879
to substitute to maintain folks and

240
00:08:18,000 --> 00:08:23,039
prevent knives

241
00:08:20,879 --> 00:08:23,919
one fixed to this issue is to use what

242
00:08:23,039 --> 00:08:26,719
we call

243
00:08:23,919 --> 00:08:28,719
structured ghost approach then if we

244
00:08:26,720 --> 00:08:29,680
only choose a small fraction of blocks

245
00:08:28,720 --> 00:08:32,159
to have weights

246
00:08:29,680 --> 00:08:33,919
for the transaction and all the

247
00:08:32,159 --> 00:08:35,360
remaining blocks only contributes

248
00:08:33,919 --> 00:08:37,439
transaction

249
00:08:35,360 --> 00:08:39,519
this will be secure against navalness

250
00:08:37,440 --> 00:08:40,640
attack if the function of weighted block

251
00:08:39,519 --> 00:08:42,320
is small enough

252
00:08:40,640 --> 00:08:44,880
because this makes the concurrent

253
00:08:42,320 --> 00:08:47,040
generation of weighted blocks very rare

254
00:08:44,880 --> 00:08:48,399
for example it still considers the case

255
00:08:47,040 --> 00:08:50,719
where you have two groups

256
00:08:48,399 --> 00:08:52,240
a and b and the system is under a

257
00:08:50,720 --> 00:08:54,399
beneficial tank

258
00:08:52,240 --> 00:08:55,760
the dense numbers do not have weight for

259
00:08:54,399 --> 00:08:57,519
transaction

260
00:08:55,760 --> 00:08:58,880
at some point a weighted block is

261
00:08:57,519 --> 00:09:01,600
generated by a

262
00:08:58,880 --> 00:09:02,160
which is shown in the double line block

263
00:09:01,600 --> 00:09:05,200
still

264
00:09:02,160 --> 00:09:08,000
in group b cannot see it immediately so

265
00:09:05,200 --> 00:09:08,720
it continues to generate blocks in front

266
00:09:08,000 --> 00:09:12,160
b

267
00:09:08,720 --> 00:09:15,519
however after a time delay d

268
00:09:12,160 --> 00:09:17,920
group b observe the weight of node a

269
00:09:15,519 --> 00:09:19,360
although at this time both a and b have

270
00:09:17,920 --> 00:09:22,000
the same number of blocks

271
00:09:19,360 --> 00:09:23,440
but force a has heavier weight because

272
00:09:22,000 --> 00:09:25,120
of the weight of the block

273
00:09:23,440 --> 00:09:26,800
then group b will start to generate

274
00:09:25,120 --> 00:09:28,720
neuroblast funnel in the force a to

275
00:09:26,800 --> 00:09:31,199
break the balance

276
00:09:28,720 --> 00:09:33,200
the problem of the fix is that the

277
00:09:31,200 --> 00:09:35,600
confirmation latency is no

278
00:09:33,200 --> 00:09:37,920
it cannot benefit from the first

279
00:09:35,600 --> 00:09:40,880
generation rate anymore because

280
00:09:37,920 --> 00:09:42,479
weighted blocks are generated slowly so

281
00:09:40,880 --> 00:09:44,800
is there any way we can keep

282
00:09:42,480 --> 00:09:50,880
fast confirmation and laminates under

283
00:09:44,800 --> 00:09:52,959
tanks at the same time

284
00:09:50,880 --> 00:09:54,959
the answer is yes we can combine

285
00:09:52,959 --> 00:09:57,680
original ghost and structure ghost

286
00:09:54,959 --> 00:09:59,680
to achieve this and this is one of the

287
00:09:57,680 --> 00:10:02,560
key idea of conflux

288
00:09:59,680 --> 00:10:05,040
so confidence uses a mechanism called

289
00:10:02,560 --> 00:10:07,839
greedy heaviest adaptive substrate

290
00:10:05,040 --> 00:10:08,560
just in short so this is the issue in

291
00:10:07,839 --> 00:10:10,240
gust

292
00:10:08,560 --> 00:10:11,599
components are then different with

293
00:10:10,240 --> 00:10:14,240
different dogs

294
00:10:11,600 --> 00:10:15,680
it still uses heavy substitute to sniff

295
00:10:14,240 --> 00:10:19,279
at a great chain

296
00:10:15,680 --> 00:10:21,760
since we call pivot chain

297
00:10:19,279 --> 00:10:24,880
and it needs all the blocks or the nodes

298
00:10:21,760 --> 00:10:26,560
to consistently decide a total order

299
00:10:24,880 --> 00:10:27,920
of all the blocks based on the keyword

300
00:10:26,560 --> 00:10:29,760
chain

301
00:10:27,920 --> 00:10:31,120
in normal scenario where the attack

302
00:10:29,760 --> 00:10:33,839
campaign is

303
00:10:31,120 --> 00:10:35,600
equally to blocks just like those and

304
00:10:33,839 --> 00:10:37,760
achieving your optimal throughput and

305
00:10:35,600 --> 00:10:39,760
confirmation latency

306
00:10:37,760 --> 00:10:42,399
when attack happens you will the

307
00:10:39,760 --> 00:10:44,000
heavyweights to a small subset of growth

308
00:10:42,399 --> 00:10:46,000
in this case the operator is an

309
00:10:44,000 --> 00:10:46,800
extraordinary ghost by snowing down

310
00:10:46,000 --> 00:10:49,040
confirmation

311
00:10:46,800 --> 00:10:51,760
it ensures that consensus can always

312
00:10:49,040 --> 00:10:51,760
make progress

313
00:10:52,160 --> 00:10:56,240
so how to make honest participate

314
00:10:54,480 --> 00:10:58,160
automatically switch between the two

315
00:10:56,240 --> 00:11:00,160
scenarios

316
00:10:58,160 --> 00:11:02,079
before talking about this mechanism

317
00:11:00,160 --> 00:11:05,199
let's first look at how confidence

318
00:11:02,079 --> 00:11:08,079
organizes the laser structure in conflux

319
00:11:05,200 --> 00:11:09,600
it organizes the blocks in what we call

320
00:11:08,079 --> 00:11:12,160
tree graph structure

321
00:11:09,600 --> 00:11:12,720
each block has one parent age and shown

322
00:11:12,160 --> 00:11:15,519
as

323
00:11:12,720 --> 00:11:17,200
solid arrow each block may also have

324
00:11:15,519 --> 00:11:19,920
multiple reference edges

325
00:11:17,200 --> 00:11:21,760
and shown as density angle the reference

326
00:11:19,920 --> 00:11:22,880
edges simply represent the happening

327
00:11:21,760 --> 00:11:25,920
before relationships

328
00:11:22,880 --> 00:11:28,320
among blocks for example

329
00:11:25,920 --> 00:11:28,959
there is a reference edge from e to d

330
00:11:28,320 --> 00:11:33,040
that means

331
00:11:28,959 --> 00:11:35,359
block d is generated before block e

332
00:11:33,040 --> 00:11:37,439
when a new block is generated it's next

333
00:11:35,360 --> 00:11:38,560
to the nostril in the pivot chain and

334
00:11:37,440 --> 00:11:40,480
its parent

335
00:11:38,560 --> 00:11:42,640
and creates reference edges to all the

336
00:11:40,480 --> 00:11:44,720
other blocks that do not have incoming

337
00:11:42,640 --> 00:11:47,439
edges

338
00:11:44,720 --> 00:11:48,880
it is in the tree growth structure

339
00:11:47,440 --> 00:11:51,920
capture the history

340
00:11:48,880 --> 00:11:53,439
block the history blockchain state for

341
00:11:51,920 --> 00:11:56,479
each generated block

342
00:11:53,440 --> 00:11:58,720
we define the past sub-graph of a node

343
00:11:56,480 --> 00:12:00,880
as other blocks than the block generator

344
00:11:58,720 --> 00:12:03,760
can see when generating the block

345
00:12:00,880 --> 00:12:04,320
for example the path graph of a new

346
00:12:03,760 --> 00:12:07,680
block

347
00:12:04,320 --> 00:12:11,839
is all the current blocks while this is

348
00:12:07,680 --> 00:12:11,839
the past sub graph of block h

349
00:12:12,000 --> 00:12:15,040
in order to automatically decide a block

350
00:12:14,480 --> 00:12:17,279
weight

351
00:12:15,040 --> 00:12:19,040
we propose to derive the weight from the

352
00:12:17,279 --> 00:12:22,480
blocks past the sub graph

353
00:12:19,040 --> 00:12:24,719
that is essentially to design a function

354
00:12:22,480 --> 00:12:26,000
which takes the past sub graph of the

355
00:12:24,720 --> 00:12:28,639
block as input

356
00:12:26,000 --> 00:12:30,079
and output its corresponding weight the

357
00:12:28,639 --> 00:12:31,839
function is to detect whether the

358
00:12:30,079 --> 00:12:32,638
current situation is on the bandwidth

359
00:12:31,839 --> 00:12:34,480
attack

360
00:12:32,639 --> 00:12:36,320
in other words whether the path stop

361
00:12:34,480 --> 00:12:38,560
graph is stable enough

362
00:12:36,320 --> 00:12:39,519
if it is stable which means no tank is

363
00:12:38,560 --> 00:12:41,680
detected

364
00:12:39,519 --> 00:12:43,040
it is assigned with one to the block

365
00:12:41,680 --> 00:12:45,359
otherwise the other

366
00:12:43,040 --> 00:12:46,240
way h to the block with probability one

367
00:12:45,360 --> 00:12:48,320
over h

368
00:12:46,240 --> 00:12:49,600
uh the assigned with zero to other

369
00:12:48,320 --> 00:12:51,519
blocks

370
00:12:49,600 --> 00:12:53,440
since all the honest participants will

371
00:12:51,519 --> 00:12:56,639
have consistent view on the past

372
00:12:53,440 --> 00:12:57,920
subgroup they will have a grade on the

373
00:12:56,639 --> 00:13:01,839
weights of the blocks

374
00:12:57,920 --> 00:13:01,839
even with the presence of a tanker

375
00:13:02,000 --> 00:13:05,200
the high level intuition of how we

376
00:13:03,600 --> 00:13:08,160
design this weight assignment

377
00:13:05,200 --> 00:13:08,560
function is based on this right now that

378
00:13:08,160 --> 00:13:10,480
is

379
00:13:08,560 --> 00:13:12,479
for any pure chamber of a that is

380
00:13:10,480 --> 00:13:14,639
generated for a while not enough

381
00:13:12,480 --> 00:13:15,920
while this charge block a prime has

382
00:13:14,639 --> 00:13:17,839
become dominant

383
00:13:15,920 --> 00:13:19,519
it means the total weight of the

384
00:13:17,839 --> 00:13:21,360
substrate of a prime

385
00:13:19,519 --> 00:13:23,519
to take major function in the total

386
00:13:21,360 --> 00:13:24,720
weight of all the blocks generated after

387
00:13:23,519 --> 00:13:27,440
block a

388
00:13:24,720 --> 00:13:29,200
in other words most of the future blocks

389
00:13:27,440 --> 00:13:30,720
after a should accumulate to the

390
00:13:29,200 --> 00:13:34,000
substrate of a trend

391
00:13:30,720 --> 00:13:36,320
otherwise a balanced tank may happen so

392
00:13:34,000 --> 00:13:37,680
for a new generative block component

393
00:13:36,320 --> 00:13:41,199
details whether this pen

394
00:13:37,680 --> 00:13:43,279
has been variated into a subgraph if so

395
00:13:41,199 --> 00:13:44,319
it switches from the normal mode to the

396
00:13:43,279 --> 00:13:47,600
conservative

397
00:13:44,320 --> 00:13:49,760
structural ghost mode and later on the

398
00:13:47,600 --> 00:13:52,320
important weighted loss will accumulate

399
00:13:49,760 --> 00:13:55,120
on the substrate of a frame again

400
00:13:52,320 --> 00:13:57,440
and this will make a prime substrate

401
00:13:55,120 --> 00:13:59,920
become dominant again after a while

402
00:13:57,440 --> 00:14:02,160
the small switch could start the tank

403
00:13:59,920 --> 00:14:05,519
once the tank disappeared they will

404
00:14:02,160 --> 00:14:05,519
switch back to the normal mode

405
00:14:06,079 --> 00:14:10,880
there is a new problem about how to tell

406
00:14:08,560 --> 00:14:12,560
if a block is generated not enough

407
00:14:10,880 --> 00:14:14,240
simply using the time stamp in the block

408
00:14:12,560 --> 00:14:16,638
header is not working because

409
00:14:14,240 --> 00:14:18,560
the tanker can fill in any time stamp he

410
00:14:16,639 --> 00:14:20,160
wants and make his neural degenerative

411
00:14:18,560 --> 00:14:22,239
noise look old

412
00:14:20,160 --> 00:14:25,040
so how can we get a trust of no

413
00:14:22,240 --> 00:14:27,760
generation time in a monitor's world

414
00:14:25,040 --> 00:14:29,519
the answer is another blockchain we

415
00:14:27,760 --> 00:14:30,560
introduced timer chain to solve this

416
00:14:29,519 --> 00:14:32,639
problem

417
00:14:30,560 --> 00:14:34,800
the timer chain is absorption embedded

418
00:14:32,639 --> 00:14:35,680
in tree graph with non-gas chain rule

419
00:14:34,800 --> 00:14:38,719
and logic

420
00:14:35,680 --> 00:14:41,439
no block generation rate embed hair

421
00:14:38,720 --> 00:14:42,240
means some tree graph blocks called

422
00:14:41,440 --> 00:14:44,560
thermoblocks

423
00:14:42,240 --> 00:14:46,880
are selected to form this temperature

424
00:14:44,560 --> 00:14:49,359
the lower generation rate is achieved by

425
00:14:46,880 --> 00:14:51,680
the same method next structural goals

426
00:14:49,360 --> 00:14:53,519
where we only see enough very few blocks

427
00:14:51,680 --> 00:14:55,760
to become obnoxious

428
00:14:53,519 --> 00:14:57,600
after having a stable blockchain we can

429
00:14:55,760 --> 00:15:00,720
estimate abnormal generation time

430
00:14:57,600 --> 00:15:02,399
when everybody in an example here

431
00:15:00,720 --> 00:15:05,360
the time machine starts from the

432
00:15:02,399 --> 00:15:08,639
generation of t and ends with not e

433
00:15:05,360 --> 00:15:09,519
block d is not is not in the path of

434
00:15:08,639 --> 00:15:12,399
block a

435
00:15:09,519 --> 00:15:13,600
but its parent block c is in the path of

436
00:15:12,399 --> 00:15:16,079
block a

437
00:15:13,600 --> 00:15:18,079
meaning block c is the latest timo block

438
00:15:16,079 --> 00:15:19,920
in the past of block a

439
00:15:18,079 --> 00:15:21,920
so we measure the generation time of

440
00:15:19,920 --> 00:15:24,560
block a and the temperature height

441
00:15:21,920 --> 00:15:26,479
of block c the time machine cannot be

442
00:15:24,560 --> 00:15:30,560
manipulated by the adversary

443
00:15:26,480 --> 00:15:30,560
so the generation time can trust it

444
00:15:30,639 --> 00:15:34,639
okay so we have talked about how

445
00:15:32,720 --> 00:15:37,279
confidence handles memories attempts

446
00:15:34,639 --> 00:15:38,000
to attempt to weight the risk question

447
00:15:37,279 --> 00:15:40,560
is

448
00:15:38,000 --> 00:15:41,440
how we can make all the participate

449
00:15:40,560 --> 00:15:44,160
nodes

450
00:15:41,440 --> 00:15:46,480
to agree on the total order of all the

451
00:15:44,160 --> 00:15:48,240
blocks and transactions in the nature

452
00:15:46,480 --> 00:15:50,959
and make them contribute to the system

453
00:15:48,240 --> 00:15:53,360
throughput or today altogether

454
00:15:50,959 --> 00:15:55,279
the key idea is that since all the nodes

455
00:15:53,360 --> 00:15:57,440
agree on the pivot chain we should have

456
00:15:55,279 --> 00:16:00,160
a consistent ordering method based on

457
00:15:57,440 --> 00:16:00,160
the pivot chain

458
00:16:00,399 --> 00:16:06,959
here is an example

459
00:16:03,600 --> 00:16:09,120
first each pivot block from one import

460
00:16:06,959 --> 00:16:11,758
and i option block down to the first

461
00:16:09,120 --> 00:16:15,199
evolve whose corresponding pure chain

462
00:16:11,759 --> 00:16:18,320
block happens after it takes block d

463
00:16:15,199 --> 00:16:21,839
for example p is in the past

464
00:16:18,320 --> 00:16:22,399
subgraph of e so it happens before you

465
00:16:21,839 --> 00:16:25,680
but d

466
00:16:22,399 --> 00:16:29,360
is not in the past of its parent block c

467
00:16:25,680 --> 00:16:32,479
so e is the first so e is the first

468
00:16:29,360 --> 00:16:35,519
pivot block after d meaning d belongs to

469
00:16:32,480 --> 00:16:38,000
the e power of e

470
00:16:35,519 --> 00:16:39,519
after assigning each belongs to an epoch

471
00:16:38,000 --> 00:16:41,040
the ordering algorithm is quite

472
00:16:39,519 --> 00:16:42,880
straightforward

473
00:16:41,040 --> 00:16:45,599
first will order blocks based on their

474
00:16:42,880 --> 00:16:47,040
input then with topographically sorted

475
00:16:45,600 --> 00:16:51,519
nodes in each effort

476
00:16:47,040 --> 00:16:53,680
and break ties based on their block id

477
00:16:51,519 --> 00:16:55,040
we can see that the blocks are ordered

478
00:16:53,680 --> 00:16:58,319
epoch by import

479
00:16:55,040 --> 00:16:59,360
and the pivot block on y epoch is always

480
00:16:58,320 --> 00:17:01,920
ordered and lost

481
00:16:59,360 --> 00:17:02,880
because by definition or other blocks in

482
00:17:01,920 --> 00:17:06,639
the same input

483
00:17:02,880 --> 00:17:06,640
will be topologically before it

484
00:17:07,599 --> 00:17:11,520
we have implemented confluence system in

485
00:17:09,599 --> 00:17:13,198
rust and it is open sourced

486
00:17:11,520 --> 00:17:15,679
we have launched our test needs which

487
00:17:13,199 --> 00:17:17,919
can be publicly accessed

488
00:17:15,679 --> 00:17:20,640
on top of the consensus protocol we also

489
00:17:17,919 --> 00:17:23,439
built ethereum virtual machine aka evm

490
00:17:20,640 --> 00:17:25,520
to support the smart contract our smart

491
00:17:23,439 --> 00:17:27,039
contract is mostly compatible with

492
00:17:25,520 --> 00:17:29,679
ethereum's smart country language

493
00:17:27,039 --> 00:17:29,679
solidity

494
00:17:31,440 --> 00:17:35,760
in practice there are several key

495
00:17:33,919 --> 00:17:37,520
optimizations and i would like to

496
00:17:35,760 --> 00:17:40,000
briefly introduce a little bit

497
00:17:37,520 --> 00:17:41,760
the first is that in order to apply the

498
00:17:40,000 --> 00:17:43,919
heaviest sub-tree rule

499
00:17:41,760 --> 00:17:44,960
we have to maintain the total substitute

500
00:17:43,919 --> 00:17:47,840
for each node

501
00:17:44,960 --> 00:17:49,200
which will be continuously updated when

502
00:17:47,840 --> 00:17:51,280
the nature grows

503
00:17:49,200 --> 00:17:53,360
in a naive implementation for each

504
00:17:51,280 --> 00:17:55,918
neopreneur entering the tree graph

505
00:17:53,360 --> 00:17:57,039
it helps update the substitute of all

506
00:17:55,919 --> 00:17:58,960
its ancestors

507
00:17:57,039 --> 00:18:01,520
another chain passed to the genesis

508
00:17:58,960 --> 00:18:02,559
block this introduces a high computation

509
00:18:01,520 --> 00:18:04,879
complexity

510
00:18:02,559 --> 00:18:06,080
of on and cannot be tolerated in

511
00:18:04,880 --> 00:18:08,080
practice

512
00:18:06,080 --> 00:18:10,159
we therefore apply a fancy data

513
00:18:08,080 --> 00:18:12,879
structure called ninka tree

514
00:18:10,160 --> 00:18:14,160
to maintain this weight which reduce

515
00:18:12,880 --> 00:18:17,679
this complexity to

516
00:18:14,160 --> 00:18:21,520
unlocking and becomes acceptable

517
00:18:17,679 --> 00:18:24,640
a second issue is that the

518
00:18:21,520 --> 00:18:26,000
second issue event the pivoting close to

519
00:18:24,640 --> 00:18:29,039
the tail of the nature

520
00:18:26,000 --> 00:18:32,960
will not be then stable and a signage

521
00:18:29,039 --> 00:18:34,559
for a while the total order of the block

522
00:18:32,960 --> 00:18:37,360
close to the tail of nature

523
00:18:34,559 --> 00:18:38,879
will converge to be stable gradually in

524
00:18:37,360 --> 00:18:41,120
a short period

525
00:18:38,880 --> 00:18:42,480
if we immediately execute the

526
00:18:41,120 --> 00:18:45,039
transaction in the block

527
00:18:42,480 --> 00:18:46,480
once the block international because the

528
00:18:45,039 --> 00:18:49,360
total order may change

529
00:18:46,480 --> 00:18:51,520
this will introduce redundant execution

530
00:18:49,360 --> 00:18:53,918
in order to avoid this waste when choose

531
00:18:51,520 --> 00:18:55,840
a deferred execution mechanism where we

532
00:18:53,919 --> 00:18:57,679
will wait for the order of the block

533
00:18:55,840 --> 00:19:00,399
becoming renting stable

534
00:18:57,679 --> 00:19:01,919
then execute it this will not cause

535
00:19:00,400 --> 00:19:03,280
actual confirmation latency of

536
00:19:01,919 --> 00:19:05,760
transactions because

537
00:19:03,280 --> 00:19:07,280
to confirm the transaction we already

538
00:19:05,760 --> 00:19:10,559
have to wait for a block to have a

539
00:19:07,280 --> 00:19:12,720
stable order

540
00:19:10,559 --> 00:19:14,160
after talking about why conflicts can

541
00:19:12,720 --> 00:19:16,720
achieve high throughput and

542
00:19:14,160 --> 00:19:18,000
fast confirmation at the same time here

543
00:19:16,720 --> 00:19:20,720
we run some large

544
00:19:18,000 --> 00:19:23,280
skill generations based on

545
00:19:20,720 --> 00:19:25,200
implementation

546
00:19:23,280 --> 00:19:27,200
we run up to twelve thousands of

547
00:19:25,200 --> 00:19:28,559
conflict funnels are among the insane

548
00:19:27,200 --> 00:19:31,039
two virtual machines

549
00:19:28,559 --> 00:19:33,280
and named the bandwidth of each phone to

550
00:19:31,039 --> 00:19:35,200
20 megabits per second

551
00:19:33,280 --> 00:19:37,280
and the network latency is simulated

552
00:19:35,200 --> 00:19:40,000
between funnels

553
00:19:37,280 --> 00:19:41,918
we made it achieved throughput and the

554
00:19:40,000 --> 00:19:44,160
confirmation latency

555
00:19:41,919 --> 00:19:45,679
we are considerable confirmed if its

556
00:19:44,160 --> 00:19:50,240
confidence is the same and

557
00:19:45,679 --> 00:19:50,240
waiting for sixth block in bitcoin

558
00:19:50,320 --> 00:19:55,439
this is a result where block size is 300

559
00:19:53,679 --> 00:19:55,840
kilobytes and the block generation

560
00:19:55,440 --> 00:19:58,480
weight

561
00:19:55,840 --> 00:20:00,080
is four branch per second its first nuke

562
00:19:58,480 --> 00:20:03,120
and throughput

563
00:20:00,080 --> 00:20:04,000
for confluence reports 9.6 megabits per

564
00:20:03,120 --> 00:20:06,000
second

565
00:20:04,000 --> 00:20:07,280
this is a typical measurement of the

566
00:20:06,000 --> 00:20:09,120
system through put

567
00:20:07,280 --> 00:20:11,520
in such kind of high support branching

568
00:20:09,120 --> 00:20:13,520
system since consumes the protocol

569
00:20:11,520 --> 00:20:14,639
is not a bottleneck at all and the

570
00:20:13,520 --> 00:20:16,720
system is botanic

571
00:20:14,640 --> 00:20:18,640
and natural boundaries so this

572
00:20:16,720 --> 00:20:18,960
measurement is about the bandwidth usage

573
00:20:18,640 --> 00:20:21,039
for

574
00:20:18,960 --> 00:20:23,360
effective block transmission without

575
00:20:21,039 --> 00:20:26,640
incurring significantly

576
00:20:23,360 --> 00:20:29,439
increasing of the message dna and

577
00:20:26,640 --> 00:20:31,039
9.6 megabits per second in roughly half

578
00:20:29,440 --> 00:20:32,000
of the maximum available network

579
00:20:31,039 --> 00:20:34,080
bandwidth

580
00:20:32,000 --> 00:20:35,679
which is near optimal for the p2p

581
00:20:34,080 --> 00:20:37,918
network transmission

582
00:20:35,679 --> 00:20:39,440
this translates to about 4000

583
00:20:37,919 --> 00:20:43,760
transactions per second

584
00:20:39,440 --> 00:20:47,360
with typical transactions as in bitcoin

585
00:20:43,760 --> 00:20:49,200
comparatively this is up to 32 times

586
00:20:47,360 --> 00:20:50,559
the throughput of ghost under the same

587
00:20:49,200 --> 00:20:52,559
city and

588
00:20:50,559 --> 00:20:55,200
it's worth noting that the throughput of

589
00:20:52,559 --> 00:20:56,639
contact keeps stable regardless of the

590
00:20:55,200 --> 00:20:58,960
number of nodes because

591
00:20:56,640 --> 00:21:00,960
orbitals are eventually committed but

592
00:20:58,960 --> 00:21:02,480
the super ghost decreases with the

593
00:21:00,960 --> 00:21:03,919
number of nodes because

594
00:21:02,480 --> 00:21:06,880
increasing the number of nodes will

595
00:21:03,919 --> 00:21:10,000
increase the network dna and cosmophores

596
00:21:06,880 --> 00:21:10,320
making it making next blocks included in

597
00:21:10,000 --> 00:21:13,919
the

598
00:21:10,320 --> 00:21:16,480
pivot chain in addition the transaction

599
00:21:13,919 --> 00:21:18,320
confirmation latency is about 50 seconds

600
00:21:16,480 --> 00:21:20,559
on average in complex

601
00:21:18,320 --> 00:21:22,158
which is a small constant factor of the

602
00:21:20,559 --> 00:21:23,840
block broadcast dna

603
00:21:22,159 --> 00:21:25,760
which is about 15 seconds in our

604
00:21:23,840 --> 00:21:27,439
measurement

605
00:21:25,760 --> 00:21:29,200
and the transformation latency are

606
00:21:27,440 --> 00:21:30,720
stable when we increase the number of

607
00:21:29,200 --> 00:21:33,440
nodes which using

608
00:21:30,720 --> 00:21:34,159
conflux can scale very well to more than

609
00:21:33,440 --> 00:21:36,640
10 thousand

610
00:21:34,159 --> 00:21:36,640
phonons

611
00:21:37,440 --> 00:21:41,840
to conclude components achieve both high

612
00:21:40,000 --> 00:21:43,679
throughput and fast conformation at the

613
00:21:41,840 --> 00:21:46,399
same time

614
00:21:43,679 --> 00:21:49,039
confidence also is safe against both

615
00:21:46,400 --> 00:21:51,360
double spending and the numbness attacks

616
00:21:49,039 --> 00:21:53,360
this is achieved with a normal

617
00:21:51,360 --> 00:21:55,520
concentrator contrast

618
00:21:53,360 --> 00:21:58,320
which allows different ways to pronounce

619
00:21:55,520 --> 00:22:01,280
adaptively and automatically

620
00:21:58,320 --> 00:22:01,760
with 12 000 of those confidence can

621
00:22:01,280 --> 00:22:05,440
reach

622
00:22:01,760 --> 00:22:09,520
9.6 megabits per second throughput

623
00:22:05,440 --> 00:22:09,520
and confirm blocks within one minute

624
00:22:09,840 --> 00:22:13,280
thanks if you are interested in cover

625
00:22:11,760 --> 00:22:26,320
the project you can check

626
00:22:13,280 --> 00:22:28,399
our website here thanks for listening

627
00:22:26,320 --> 00:22:28,399
you

