1
00:00:07,940 --> 00:00:10,940
thank you

2
00:00:13,500 --> 00:00:15,960
hello everyone I'm me outside from Ohio

3
00:00:15,960 --> 00:00:19,020
University I'm glad to present our work

4
00:00:19,020 --> 00:00:21,980
flight status

5
00:00:23,340 --> 00:00:26,340
our presentation includes four parts

6
00:00:26,340 --> 00:00:28,980
first we would like to introduce the

7
00:00:28,980 --> 00:00:31,080
background and the motivation of our

8
00:00:31,080 --> 00:00:34,739
work then we describe rather as detailed

9
00:00:34,739 --> 00:00:36,719
design under implementation

10
00:00:36,719 --> 00:00:38,880
we show the flat device evaluation

11
00:00:38,880 --> 00:00:41,160
result in third part

12
00:00:41,160 --> 00:00:45,199
finally we give a conclusion

13
00:00:46,020 --> 00:00:48,020
now one of the memory technology

14
00:00:48,020 --> 00:00:51,180
revolutionize the computer storage stack

15
00:00:51,180 --> 00:00:53,879
Intel opt-in memory of a better choice

16
00:00:53,879 --> 00:00:55,320
for interface

17
00:00:55,320 --> 00:00:58,559
its device performance is attractive the

18
00:00:58,559 --> 00:01:02,160
octane memory has usual acceptancy

19
00:01:02,160 --> 00:01:04,979
which is similar to the ethereum system

20
00:01:04,979 --> 00:01:07,740
also octane memory has high memory

21
00:01:07,740 --> 00:01:10,020
bandwidths but it explained with

22
00:01:10,020 --> 00:01:11,939
characteristics are totally different

23
00:01:11,939 --> 00:01:13,380
from dram

24
00:01:13,380 --> 00:01:16,619
for example Is Random Access performance

25
00:01:16,619 --> 00:01:18,960
is much worse than the sequential access

26
00:01:18,960 --> 00:01:21,559
performance

27
00:01:22,500 --> 00:01:24,119
we introduce the first system

28
00:01:24,119 --> 00:01:26,340
hierarchical namespace design

29
00:01:26,340 --> 00:01:28,860
now hierarchical name space is basically

30
00:01:28,860 --> 00:01:32,340
a directory tree structure also in a

31
00:01:32,340 --> 00:01:35,460
virtual flat system touches namespace in

32
00:01:35,460 --> 00:01:38,700
the faster Duram to improve performance

33
00:01:38,700 --> 00:01:40,979
news or access file you know jump space

34
00:01:40,979 --> 00:01:43,680
with hierarchical file paths

35
00:01:43,680 --> 00:01:46,439
such a name space desire indeed improve

36
00:01:46,439 --> 00:01:50,220
performance for slow storage device such

37
00:01:50,220 --> 00:01:53,460
as artists or storage spacecraft

38
00:01:53,460 --> 00:01:56,159
however is a decrease performance on

39
00:01:56,159 --> 00:01:58,460
iPhone

40
00:02:01,619 --> 00:02:03,840
we find two performance issues for

41
00:02:03,840 --> 00:02:05,820
current namespace design

42
00:02:05,820 --> 00:02:09,119
successful in namespace must perform a

43
00:02:09,119 --> 00:02:11,879
fair passwork which turns a past name

44
00:02:11,879 --> 00:02:13,980
into a file I know them

45
00:02:13,980 --> 00:02:18,420
the first work need to resolve a path

46
00:02:18,420 --> 00:02:20,640
component one by one which is low and

47
00:02:20,640 --> 00:02:21,959
enough scalable

48
00:02:21,959 --> 00:02:24,239
so specifically a past component

49
00:02:24,239 --> 00:02:26,760
resolution includes the entry lookup

50
00:02:26,760 --> 00:02:29,760
from VG check one point check and the

51
00:02:29,760 --> 00:02:31,860
even Hardware I will transfer

52
00:02:31,860 --> 00:02:34,500
we do a experiment to qualify the

53
00:02:34,500 --> 00:02:37,140
possible performance impact

54
00:02:37,140 --> 00:02:41,280
generally in a password occupies 14 to

55
00:02:41,280 --> 00:02:45,180
65 percentage of execution time for 6 16

56
00:02:45,180 --> 00:02:46,379
cores

57
00:02:46,379 --> 00:02:49,080
more the whole password is not scalable

58
00:02:49,080 --> 00:02:52,379
all file system Nancy increased when 12

59
00:02:52,379 --> 00:02:54,300
Parts become lengthy

60
00:02:54,300 --> 00:02:57,060
for slow story distance traveled on hard

61
00:02:57,060 --> 00:03:00,360
disk now Hardware I will dominate but

62
00:03:00,360 --> 00:03:02,580
for faster only run the performance

63
00:03:02,580 --> 00:03:04,440
bottlenecks shift to the software

64
00:03:04,440 --> 00:03:07,220
password design

65
00:03:09,000 --> 00:03:11,640
the second problem is expensive name

66
00:03:11,640 --> 00:03:14,940
Spec 3 True also because directly

67
00:03:14,940 --> 00:03:16,800
entries logically for more tree

68
00:03:16,800 --> 00:03:19,080
structure towards the tree cause Point

69
00:03:19,080 --> 00:03:22,620
sensing which is interact memory access

70
00:03:22,620 --> 00:03:25,140
also direct entries are distributed

71
00:03:25,140 --> 00:03:26,700
across the device

72
00:03:26,700 --> 00:03:29,040
towards named spiritually cause random

73
00:03:29,040 --> 00:03:30,420
memory access

74
00:03:30,420 --> 00:03:33,239
we also do an experiment to qualify

75
00:03:33,239 --> 00:03:35,879
electric reversal cost

76
00:03:35,879 --> 00:03:38,400
we create two data sets each other

77
00:03:38,400 --> 00:03:41,280
contains one thousand thousand the first

78
00:03:41,280 --> 00:03:43,799
is put all fails in a single directory

79
00:03:43,799 --> 00:03:47,580
which simulate a platinum space a second

80
00:03:47,580 --> 00:03:50,220
intercept profiles in a relative

81
00:03:50,220 --> 00:03:53,519
hierarchy then we scan all files means

82
00:03:53,519 --> 00:03:56,099
two data sets we can see from this

83
00:03:56,099 --> 00:03:58,860
figure the three traversal takes a large

84
00:03:58,860 --> 00:04:01,680
percentage of excrete time

85
00:04:01,680 --> 00:04:04,440
the most important feature of mrm is

86
00:04:04,440 --> 00:04:06,239
good sequential performance

87
00:04:06,239 --> 00:04:08,819
however the three best namespace

88
00:04:08,819 --> 00:04:10,620
structure on the routine is faster than

89
00:04:10,620 --> 00:04:13,099
we wrap

90
00:04:15,659 --> 00:04:18,180
a program space performance motivating

91
00:04:18,180 --> 00:04:20,820
us to design a new file system for Vital

92
00:04:20,820 --> 00:04:24,199
address for faster theorem and wrap

93
00:04:24,199 --> 00:04:27,000
s overcome the imitation in traditional

94
00:04:27,000 --> 00:04:28,979
hierarchical namespace design

95
00:04:28,979 --> 00:04:31,620
it'll provide a platinum space structure

96
00:04:31,620 --> 00:04:33,840
your fail I know that it's directly

97
00:04:33,840 --> 00:04:36,720
index fellow four parts

98
00:04:36,720 --> 00:04:39,060
in the name space has two other one

99
00:04:39,060 --> 00:04:40,139
genius

100
00:04:40,139 --> 00:04:42,720
first you get retrieves short and

101
00:04:42,720 --> 00:04:45,360
scalable password because we only need

102
00:04:45,360 --> 00:04:47,820
to look up the namespace once during

103
00:04:47,820 --> 00:04:50,699
password to get a result

104
00:04:50,699 --> 00:04:53,220
second direct entries are stored

105
00:04:53,220 --> 00:04:56,340
conceptively in a device which requires

106
00:04:56,340 --> 00:04:59,220
a cheap scan to read the whole directory

107
00:04:59,220 --> 00:05:02,520
to realize that events we need to

108
00:05:02,520 --> 00:05:05,340
overcome four main challenges

109
00:05:05,340 --> 00:05:08,040
first we need to preserve the posix

110
00:05:08,040 --> 00:05:10,320
Matrix in our classroom password model

111
00:05:10,320 --> 00:05:11,580
design

112
00:05:11,580 --> 00:05:14,160
secondly we need to improve direct range

113
00:05:14,160 --> 00:05:15,660
operation performance

114
00:05:15,660 --> 00:05:18,180
third we need to reduce the data

115
00:05:18,180 --> 00:05:20,880
durability cost on our web

116
00:05:20,880 --> 00:05:23,820
first we need to ensure Quest safety for

117
00:05:23,820 --> 00:05:25,320
platinum space

118
00:05:25,320 --> 00:05:28,620
we also set up four design goals with

119
00:05:28,620 --> 00:05:32,240
these four technical changes

120
00:05:32,900 --> 00:05:35,400
we present the flight status system

121
00:05:35,400 --> 00:05:38,460
architecture in this slide practice has

122
00:05:38,460 --> 00:05:39,900
a closer design

123
00:05:39,900 --> 00:05:42,419
we briefly introduced this system

124
00:05:42,419 --> 00:05:45,120
equation in the top down order in the

125
00:05:45,120 --> 00:05:47,220
system called layer users still use

126
00:05:47,220 --> 00:05:49,620
familiar theoretical parts to access

127
00:05:49,620 --> 00:05:53,419
sales in a platinum space

128
00:05:54,320 --> 00:05:57,419
we Define a coordinate password to

129
00:05:57,419 --> 00:05:59,880
resolve a fair price with two different

130
00:05:59,880 --> 00:06:02,240
password models

131
00:06:02,240 --> 00:06:04,740
Universal system layer we designed a

132
00:06:04,740 --> 00:06:07,500
lower range optimized e plus 3 called

133
00:06:07,500 --> 00:06:10,979
the br3 which manages all carry repairs

134
00:06:10,979 --> 00:06:12,840
in a platinum space

135
00:06:12,840 --> 00:06:16,020
in the storage area we propose a right

136
00:06:16,020 --> 00:06:19,139
optimized compress the index key it will

137
00:06:19,139 --> 00:06:21,419
reduce the right traffic during key

138
00:06:21,419 --> 00:06:23,840
updates

139
00:06:25,680 --> 00:06:27,960
first let's look at the recording of the

140
00:06:27,960 --> 00:06:30,539
past working time this figure shows two

141
00:06:30,539 --> 00:06:33,060
different password models the component

142
00:06:33,060 --> 00:06:35,580
at the time password model we solve the

143
00:06:35,580 --> 00:06:37,860
path component one by one but it is

144
00:06:37,860 --> 00:06:39,780
through an unscrew

145
00:06:39,780 --> 00:06:42,539
our proposed four parts are the 10

146
00:06:42,539 --> 00:06:44,699
password model we solve the whole path

147
00:06:44,699 --> 00:06:47,400
at the time therefore it's fast and the

148
00:06:47,400 --> 00:06:49,758
scalable

149
00:06:51,360 --> 00:06:53,759
we describe each component in fact as

150
00:06:53,759 --> 00:06:55,440
possible model here

151
00:06:55,440 --> 00:06:57,840
approximate analyze generate a person

152
00:06:57,840 --> 00:07:01,819
without any doubts or redundant slashes

153
00:07:01,819 --> 00:07:05,280
component it flattered us use trendline

154
00:07:05,280 --> 00:07:07,680
let's go first name you just remove the

155
00:07:07,680 --> 00:07:08,759
no talk

156
00:07:08,759 --> 00:07:11,520
analyze this component are connected by

157
00:07:11,520 --> 00:07:14,100
the symmetic plus component finder

158
00:07:14,100 --> 00:07:16,500
a arithmetic semantic path component

159
00:07:16,500 --> 00:07:18,539
finder and the symbol links and the

160
00:07:18,539 --> 00:07:20,880
monopoint components the question is

161
00:07:20,880 --> 00:07:23,520
like how can we identify its metal

162
00:07:23,520 --> 00:07:25,259
components during password

163
00:07:25,259 --> 00:07:27,720
our solution is to create a special

164
00:07:27,720 --> 00:07:31,020
financially for this component

165
00:07:31,020 --> 00:07:33,599
because the pr3 always return the first

166
00:07:33,599 --> 00:07:35,940
entry whose key is greater than a

167
00:07:35,940 --> 00:07:38,460
request key for triple cup the final

168
00:07:38,460 --> 00:07:40,080
entry will be returned during personal

169
00:07:40,080 --> 00:07:41,539
hub

170
00:07:41,539 --> 00:07:44,280
the total component arrests magical

171
00:07:44,280 --> 00:07:45,660
issues during password

172
00:07:45,660 --> 00:07:48,180
Suppose there is a doctor following a

173
00:07:48,180 --> 00:07:49,860
boiling component

174
00:07:49,860 --> 00:07:52,860
we cannot resolve doctor component by

175
00:07:52,860 --> 00:07:55,560
just removing its boiling component to

176
00:07:55,560 --> 00:07:57,240
resolve this problem

177
00:07:57,240 --> 00:08:00,060
we give two solutions here

178
00:08:00,060 --> 00:08:01,979
and the first one checks medical

179
00:08:01,979 --> 00:08:05,639
component whenever meeting with a total

180
00:08:05,639 --> 00:08:07,500
component during password

181
00:08:07,500 --> 00:08:09,720
the second one is called the talk talk

182
00:08:09,720 --> 00:08:13,580
directory as left to pass net

183
00:08:15,979 --> 00:08:18,840
then we perform prefix permission

184
00:08:18,840 --> 00:08:21,180
checking affiliate we separate

185
00:08:21,180 --> 00:08:22,800
permission checking from past name

186
00:08:22,800 --> 00:08:25,379
lookup and a proposed a two-dimensional

187
00:08:25,379 --> 00:08:28,500
prefix permission compression to patch

188
00:08:28,500 --> 00:08:30,360
permission checking

189
00:08:30,360 --> 00:08:32,399
we find the direct rating of that part

190
00:08:32,399 --> 00:08:35,039
of Ensure the same permission base we

191
00:08:35,039 --> 00:08:37,140
Define a new data structure called

192
00:08:37,140 --> 00:08:39,958
prefix permission compressor which

193
00:08:39,958 --> 00:08:42,360
comprise those permission fees of

194
00:08:42,360 --> 00:08:44,760
of different directory

195
00:08:44,760 --> 00:08:47,100
then for previously structure in a tree

196
00:08:47,100 --> 00:08:50,220
node before the compressor based on a

197
00:08:50,220 --> 00:08:53,120
personal parts

198
00:08:53,120 --> 00:08:55,880
to perform a batch permission check

199
00:08:55,880 --> 00:09:00,000
first we verify user ID and group ID in

200
00:09:00,000 --> 00:09:02,339
a task credential with the past prefix

201
00:09:02,339 --> 00:09:03,720
PPC

202
00:09:03,720 --> 00:09:06,000
then we compare the permission piece

203
00:09:06,000 --> 00:09:09,120
between the q15 and compress the

204
00:09:09,120 --> 00:09:11,339
permission piece we do the same thing

205
00:09:11,339 --> 00:09:14,519
again for the path fixed PPC

206
00:09:14,519 --> 00:09:17,160
if both task credential and the

207
00:09:17,160 --> 00:09:19,920
permission fees are equal the prefix

208
00:09:19,920 --> 00:09:23,420
permission checking succeed

209
00:09:27,300 --> 00:09:30,060
without doubt is symbolic and one point

210
00:09:30,060 --> 00:09:32,279
may cause name space switch

211
00:09:32,279 --> 00:09:34,800
the past dispatcher similar third parts

212
00:09:34,800 --> 00:09:37,620
to the correct password model

213
00:09:37,620 --> 00:09:40,680
the password models which many includes

214
00:09:40,680 --> 00:09:42,779
one point switch and the person name

215
00:09:42,779 --> 00:09:45,060
cursor adjustment

216
00:09:45,060 --> 00:09:47,880
finally a fair price work may involve

217
00:09:47,880 --> 00:09:50,519
different possible models we coordinate

218
00:09:50,519 --> 00:09:52,560
the different plus model model to result

219
00:09:52,560 --> 00:09:55,440
a possible correctly

220
00:09:55,440 --> 00:09:57,540
the coordination is achieved in two

221
00:09:57,540 --> 00:10:00,959
steps we build password models as Black

222
00:10:00,959 --> 00:10:02,100
Box

223
00:10:02,100 --> 00:10:05,760
input a pass name the password models

224
00:10:05,760 --> 00:10:07,860
are resolved in the first name

225
00:10:07,860 --> 00:10:10,860
the first one of coordination is feed a

226
00:10:10,860 --> 00:10:13,980
correct personal input to the model

227
00:10:13,980 --> 00:10:16,320
the second point of coordination is

228
00:10:16,320 --> 00:10:19,200
ensure a correct multiplying switch

229
00:10:19,200 --> 00:10:21,779
on the virtual file system use one point

230
00:10:21,779 --> 00:10:25,800
with the entry to specify a file system

231
00:10:25,800 --> 00:10:27,720
instance in instant Space Management

232
00:10:27,720 --> 00:10:29,100
framework

233
00:10:29,100 --> 00:10:31,380
we also create one for flat address

234
00:10:31,380 --> 00:10:34,440
instance which is used to use to switch

235
00:10:34,440 --> 00:10:38,720
to the Fatima project smnm space

236
00:10:43,140 --> 00:10:45,839
our second contribution is is range

237
00:10:45,839 --> 00:10:49,079
optimized index 3. the pr3 has two

238
00:10:49,079 --> 00:10:52,200
important features the first is and we

239
00:10:52,200 --> 00:10:54,899
run friendly tree node design such as

240
00:10:54,899 --> 00:10:57,000
also the three three node

241
00:10:57,000 --> 00:10:59,279
another feature is supporting 3D range

242
00:10:59,279 --> 00:11:00,360
operation

243
00:11:00,360 --> 00:11:02,640
reactive range of operation in Platinum

244
00:11:02,640 --> 00:11:05,399
space is much expensive than a high red

245
00:11:05,399 --> 00:11:06,959
Conan space

246
00:11:06,959 --> 00:11:09,060
the orange Operation addresses

247
00:11:09,060 --> 00:11:11,760
challenges you know that structure level

248
00:11:11,760 --> 00:11:14,160
we provide a compositional range

249
00:11:14,160 --> 00:11:15,959
operation design

250
00:11:15,959 --> 00:11:18,839
first we Define the two three primitive

251
00:11:18,839 --> 00:11:23,000
the three joint and the three split

252
00:11:23,000 --> 00:11:26,040
model 3 into a big one

253
00:11:26,040 --> 00:11:28,320
okay you know three one is smaller than

254
00:11:28,320 --> 00:11:30,120
a 3 2.

255
00:11:30,120 --> 00:11:32,820
to perform a three joint we walk down

256
00:11:32,820 --> 00:11:34,860
the three two to the same level as the

257
00:11:34,860 --> 00:11:39,120
tree one then we perform another merge

258
00:11:39,120 --> 00:11:41,220
finally we install three one into the

259
00:11:41,220 --> 00:11:42,300
three two

260
00:11:42,300 --> 00:11:44,820
the three split divided 3 into two

261
00:11:44,820 --> 00:11:49,279
substrates with the splitter point x

262
00:11:52,079 --> 00:11:54,660
next we Define the four pr3 range

263
00:11:54,660 --> 00:11:57,000
operation the three flights and the

264
00:11:57,000 --> 00:11:59,060
insert operation are implemented

265
00:11:59,060 --> 00:12:02,040
implementing the Passover two three

266
00:12:02,040 --> 00:12:03,240
primitive

267
00:12:03,240 --> 00:12:06,360
the 3-5 operation the touch of substrate

268
00:12:06,360 --> 00:12:08,459
from the original tree with a given key

269
00:12:08,459 --> 00:12:11,279
range the three insert operation insert

270
00:12:11,279 --> 00:12:13,500
a symmetric into a big one

271
00:12:13,500 --> 00:12:15,899
the range updates modify the index key

272
00:12:15,899 --> 00:12:19,019
of a specific range the range query is

273
00:12:19,019 --> 00:12:22,560
similar to a text put

274
00:12:22,560 --> 00:12:24,300
three

275
00:12:24,300 --> 00:12:27,420
finally we design a full Direction range

276
00:12:27,420 --> 00:12:29,459
system because based on a pr3 event

277
00:12:29,459 --> 00:12:32,000
operation

278
00:12:33,420 --> 00:12:36,000
directory render remove directory range

279
00:12:36,000 --> 00:12:40,399
copy and the directory rename

280
00:12:43,680 --> 00:12:46,320
the third contribution is right up by

281
00:12:46,320 --> 00:12:48,060
compressed key design

282
00:12:48,060 --> 00:12:50,760
we compress key in a tree node key

283
00:12:50,760 --> 00:12:52,860
compression improves storage efficiency

284
00:12:52,860 --> 00:12:56,339
and the reduced key batch of that cost

285
00:12:56,339 --> 00:12:58,620
however key compression called key

286
00:12:58,620 --> 00:13:01,760
adjustment cost for example key insert

287
00:13:01,760 --> 00:13:05,760
costs key key prefix strings and the

288
00:13:05,760 --> 00:13:08,160
suffix expander

289
00:13:08,160 --> 00:13:11,160
there is too many small random data

290
00:13:11,160 --> 00:13:13,800
rights which is harmful to the MLM

291
00:13:13,800 --> 00:13:15,979
system

292
00:13:18,000 --> 00:13:21,360
we propose right open my compressed key

293
00:13:21,360 --> 00:13:24,600
to address this change the basic idea is

294
00:13:24,600 --> 00:13:27,180
combining data provision and cache to

295
00:13:27,180 --> 00:13:28,980
reduce data movement cost

296
00:13:28,980 --> 00:13:31,320
we give an example to describe the

297
00:13:31,320 --> 00:13:32,940
detail design

298
00:13:32,940 --> 00:13:35,880
Suppose there is index key which is

299
00:13:35,880 --> 00:13:38,519
breeding you two parts and the stored in

300
00:13:38,519 --> 00:13:40,139
different memory requests

301
00:13:40,139 --> 00:13:43,200
at times you want we Load One by data

302
00:13:43,200 --> 00:13:45,959
from a prefix to suffix

303
00:13:45,959 --> 00:13:48,480
instead of instead of loading one byte

304
00:13:48,480 --> 00:13:52,200
of data we privilege 32 bytes of data

305
00:13:52,200 --> 00:13:55,440
our time T2 will load two bytes of data

306
00:13:55,440 --> 00:13:58,860
for Less prefix specifics fortunately

307
00:13:58,860 --> 00:14:01,620
is two bytes of data are already in

308
00:14:01,620 --> 00:14:02,940
Aesthetics

309
00:14:02,940 --> 00:14:05,279
we just update the suffix pointer to

310
00:14:05,279 --> 00:14:08,399
represent this key adjustment similarly

311
00:14:08,399 --> 00:14:11,660
at time T3

312
00:14:13,100 --> 00:14:16,079
okay there's no need to move the actual

313
00:14:16,079 --> 00:14:18,439
data

314
00:14:19,860 --> 00:14:21,959
the fourth contribution is namespace

315
00:14:21,959 --> 00:14:24,000
Crash consistency design

316
00:14:24,000 --> 00:14:27,060
ated ensure crash consistency both for

317
00:14:27,060 --> 00:14:29,940
next best point and range operation

318
00:14:29,940 --> 00:14:32,579
full name space pointer operation such

319
00:14:32,579 --> 00:14:35,760
as create earning achieving crash

320
00:14:35,760 --> 00:14:37,860
consistency is straightforward

321
00:14:37,860 --> 00:14:41,160
we first prepare a position new data

322
00:14:41,160 --> 00:14:44,339
changes in on user place then we update

323
00:14:44,339 --> 00:14:46,500
the metadata automatically

324
00:14:46,500 --> 00:14:49,500
finally we switch the system to a new

325
00:14:49,500 --> 00:14:51,000
consistent state

326
00:14:51,000 --> 00:14:53,699
for namespace range operation the most

327
00:14:53,699 --> 00:14:57,260
challenging part is that it is

328
00:14:57,260 --> 00:15:01,019
temporary ports into many species

329
00:15:01,019 --> 00:15:04,019
our Insight is that twist bridge is the

330
00:15:04,019 --> 00:15:06,420
reverse operation of the screen joint we

331
00:15:06,420 --> 00:15:08,339
load substrate with address during

332
00:15:08,339 --> 00:15:10,320
namespace Street

333
00:15:10,320 --> 00:15:13,260
so as a result the names especially can

334
00:15:13,260 --> 00:15:17,060
be restored during system recover

335
00:15:20,760 --> 00:15:23,220
Frank Harvest is implemented the English

336
00:15:23,220 --> 00:15:26,760
kernel based on pmfs file system

337
00:15:26,760 --> 00:15:29,820
this is our experiment setup We compare

338
00:15:29,820 --> 00:15:33,420
factors with six file system including

339
00:15:33,420 --> 00:15:36,779
xt4 xfs Butters

340
00:15:36,779 --> 00:15:40,579
in real opposite memory machine

341
00:15:43,260 --> 00:15:44,760
we first evaluate the password

342
00:15:44,760 --> 00:15:47,760
efficiency of seven cell system in six

343
00:15:47,760 --> 00:15:50,160
different password settings

344
00:15:50,160 --> 00:15:52,440
we chose three conclusions from what is

345
00:15:52,440 --> 00:15:56,040
the experiment foreign cash first the

346
00:15:56,040 --> 00:15:58,440
best achieve a maximum 28 times the

347
00:15:58,440 --> 00:16:01,320
lensing reduction compared to others

348
00:16:01,320 --> 00:16:04,620
we'll hold the cash rather also achieve

349
00:16:04,620 --> 00:16:08,100
similar performance with rfl system

350
00:16:08,100 --> 00:16:10,500
s all perform others with different

351
00:16:10,500 --> 00:16:13,579
possible setting

352
00:16:15,540 --> 00:16:18,839
next we related password stability and

353
00:16:18,839 --> 00:16:20,459
sensitivity

354
00:16:20,459 --> 00:16:23,339
we change the path component number from

355
00:16:23,339 --> 00:16:26,579
1 to 50. then we measure a state system

356
00:16:26,579 --> 00:16:28,260
currency

357
00:16:28,260 --> 00:16:30,360
all the resistance increased

358
00:16:30,360 --> 00:16:33,420
significantly except the Fret address

359
00:16:33,420 --> 00:16:35,880
next we evaluate the threat password

360
00:16:35,880 --> 00:16:37,860
sensitivity by changing the four

361
00:16:37,860 --> 00:16:39,060
variables

362
00:16:39,060 --> 00:16:43,019
the last level cache the br3 height the

363
00:16:43,019 --> 00:16:46,199
access pattern and the process

364
00:16:46,199 --> 00:16:49,199
oh during the experiment we finalized

365
00:16:49,199 --> 00:16:50,759
threat base is extensive we choose

366
00:16:50,759 --> 00:16:55,639
Rewards except to the fair process

367
00:16:59,880 --> 00:17:02,779
we value for directly range operations

368
00:17:02,779 --> 00:17:05,939
directly read direct remove and redirect

369
00:17:05,939 --> 00:17:07,260
copy

370
00:17:07,260 --> 00:17:10,199
and the directory name for first the

371
00:17:10,199 --> 00:17:12,119
three directory range operation right

372
00:17:12,119 --> 00:17:15,780
that has achieved a 2019 times the low

373
00:17:15,780 --> 00:17:18,660
latency for proposing a new directory

374
00:17:18,660 --> 00:17:21,299
range season cost for directive name

375
00:17:21,299 --> 00:17:24,059
database performance is also close to

376
00:17:24,059 --> 00:17:27,079
other file systems

377
00:17:29,520 --> 00:17:31,980
we evaluated version of this performance

378
00:17:31,980 --> 00:17:34,620
with two metadata intensive benchmark

379
00:17:34,620 --> 00:17:37,679
trials over under Wimmer in cell bench

380
00:17:37,679 --> 00:17:40,380
you can see from the experiment result

381
00:17:40,380 --> 00:17:42,720
Fred FS greatly out of perform other

382
00:17:42,720 --> 00:17:45,179
cloud system due to its optimized

383
00:17:45,179 --> 00:17:48,780
namespace operation

384
00:17:52,020 --> 00:17:54,120
we evaluate the flight address with a

385
00:17:54,120 --> 00:17:56,220
real world application kit

386
00:17:56,220 --> 00:17:58,620
if I have this achieved almost four

387
00:17:58,620 --> 00:18:01,080
times the energy reduction 14 statues

388
00:18:01,080 --> 00:18:03,600
for its optim optimal

389
00:18:03,600 --> 00:18:06,120
directly reading the key to commit

390
00:18:06,120 --> 00:18:08,220
application is dominated by the password

391
00:18:08,220 --> 00:18:09,419
performance

392
00:18:09,419 --> 00:18:11,940
threat address also reduce the great

393
00:18:11,940 --> 00:18:14,220
committed lendency by

394
00:18:14,220 --> 00:18:17,340
18 to 37 percentage compared to other

395
00:18:17,340 --> 00:18:20,178
file systems

396
00:18:23,520 --> 00:18:26,580
as a summary direct retrieve best and

397
00:18:26,580 --> 00:18:28,919
namespace under root size high

398
00:18:28,919 --> 00:18:31,320
performance and RAM system

399
00:18:31,320 --> 00:18:34,500
we perform we propose a lower neural

400
00:18:34,500 --> 00:18:36,260
system called

401
00:18:36,260 --> 00:18:39,840
fats long five namespace structure

402
00:18:39,840 --> 00:18:42,299
try the best incorporate three quart

403
00:18:42,299 --> 00:18:45,059
techniques a coordinated password

404
00:18:45,059 --> 00:18:48,840
a wrench optimized pr3 and the red

405
00:18:48,840 --> 00:18:51,179
optimized index key design

406
00:18:51,179 --> 00:18:54,299
the expand experimental results change

407
00:18:54,299 --> 00:18:56,940
that brightness correctly improve cell

408
00:18:56,940 --> 00:19:00,200
system maintenance performance

409
00:19:00,960 --> 00:19:04,620
and this is our whole presentation thank

410
00:19:04,620 --> 00:19:07,100
you very much

