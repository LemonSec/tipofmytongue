1
00:00:14,160 --> 00:00:15,679
and for the very first talk a little bit

2
00:00:15,679 --> 00:00:17,440
something a bit unusual we'll have a

3
00:00:17,440 --> 00:00:20,000
volunteer uh fensang who's going to be

4
00:00:20,000 --> 00:00:21,520
volunteering to present the paper even

5
00:00:21,520 --> 00:00:23,439
though he's not an author

6
00:00:23,439 --> 00:00:25,680
so um hello everyone since the authors

7
00:00:25,680 --> 00:00:27,199
cannot present in person i will present

8
00:00:27,199 --> 00:00:29,199
this paper on behalf of them

9
00:00:29,199 --> 00:00:30,640
after the presentation the authors will

10
00:00:30,640 --> 00:00:33,280
answer questions virtually in the q a

11
00:00:33,280 --> 00:00:36,000
so this work proposes a software only

12
00:00:36,000 --> 00:00:38,160
approach to protect page table against

13
00:00:38,160 --> 00:00:39,760
horror hammer attacks

14
00:00:39,760 --> 00:00:41,920
it is the collaborative work across six

15
00:00:41,920 --> 00:00:44,320
organizations from both academia and

16
00:00:44,320 --> 00:00:46,480
industry

17
00:00:46,480 --> 00:00:48,000
so in the first place i'll talk about

18
00:00:48,000 --> 00:00:50,719
the background of roehammer and then the

19
00:00:50,719 --> 00:00:52,879
strong motivation for this work after

20
00:00:52,879 --> 00:00:55,039
that i'll introduce this work it's

21
00:00:55,039 --> 00:00:57,199
security and performance evaluation and

22
00:00:57,199 --> 00:01:00,239
reach a conclusion at last

23
00:01:00,239 --> 00:01:02,079
so first is the background

24
00:01:02,079 --> 00:01:04,959
so what is row hammer

25
00:01:04,959 --> 00:01:07,040
literally speaking a row hammer is to

26
00:01:07,040 --> 00:01:09,600
frequently access specific dram cells in

27
00:01:09,600 --> 00:01:10,960
dram rows

28
00:01:10,960 --> 00:01:13,200
as the density of cells in dram chips

29
00:01:13,200 --> 00:01:16,080
increases significantly if it becomes

30
00:01:16,080 --> 00:01:18,320
highly likely for these cells to

31
00:01:18,320 --> 00:01:19,520
electrically

32
00:01:19,520 --> 00:01:21,280
interact with each other

33
00:01:21,280 --> 00:01:24,240
as such frequently accessing a dram row

34
00:01:24,240 --> 00:01:26,000
allows an attacker to influence the

35
00:01:26,000 --> 00:01:28,880
electrical charge of its neighboring row

36
00:01:28,880 --> 00:01:31,040
the root cause of row hammer

37
00:01:31,040 --> 00:01:33,360
before we give more details about it we

38
00:01:33,360 --> 00:01:36,000
first introduce what a dram bank is

39
00:01:36,000 --> 00:01:38,240
that's where every dram row

40
00:01:38,240 --> 00:01:40,720
resides

41
00:01:40,720 --> 00:01:43,680
so for a dram banks layout

42
00:01:43,680 --> 00:01:45,680
as we can see from the picture

43
00:01:45,680 --> 00:01:48,079
a bank has rows of cells and a rows

44
00:01:48,079 --> 00:01:49,439
buffer

45
00:01:49,439 --> 00:01:53,040
serving an incoming memory access

46
00:01:53,040 --> 00:01:55,920
the cell has a capacitor and an axis

47
00:01:55,920 --> 00:01:58,719
transistor the capacitor is in a state

48
00:01:58,719 --> 00:02:01,200
of either charged or discharged

49
00:02:01,200 --> 00:02:03,920
to represent bit 0 or bit 1.

50
00:02:03,920 --> 00:02:06,240
the axis transistor works like a switch

51
00:02:06,240 --> 00:02:08,560
which allows or disallows the sales bit

52
00:02:08,560 --> 00:02:11,280
information to be read out to the row

53
00:02:11,280 --> 00:02:12,480
buffer

54
00:02:12,480 --> 00:02:14,560
so row buffer is responsible for serving

55
00:02:14,560 --> 00:02:17,760
a specific memory axis

56
00:02:17,840 --> 00:02:18,959
however

57
00:02:18,959 --> 00:02:21,280
the capacitor of every cell loses charge

58
00:02:21,280 --> 00:02:23,920
over time and therefore cells must be

59
00:02:23,920 --> 00:02:26,400
periodically refreshed the refresh rate

60
00:02:26,400 --> 00:02:28,959
is typically 64 milliseconds in ddr3 and

61
00:02:28,959 --> 00:02:31,280
ddr4

62
00:02:31,280 --> 00:02:34,560
in 2014 kim and his team observed that

63
00:02:34,560 --> 00:02:37,040
frequently opening rows n plus 1 and n

64
00:02:37,040 --> 00:02:39,599
minus 1 will cause some cells in row n

65
00:02:39,599 --> 00:02:42,000
leak charge at a much faster rate

66
00:02:42,000 --> 00:02:44,080
so that such cells cannot recover their

67
00:02:44,080 --> 00:02:46,640
charge even when a dram refresh comes

68
00:02:46,640 --> 00:02:49,280
this observation implies that some bits

69
00:02:49,280 --> 00:02:51,519
in the victim row cells

70
00:02:51,519 --> 00:02:54,239
have been flipped permanently from bits

71
00:02:54,239 --> 00:02:58,080
1 to bit 0 or from bit 0 to bit 1.

72
00:02:58,080 --> 00:03:01,120
so now the motivation of this work

73
00:03:01,120 --> 00:03:03,120
of the many sensitive objects that have

74
00:03:03,120 --> 00:03:05,120
been corrupted by existing row hammer

75
00:03:05,120 --> 00:03:07,280
attacks page table corruption is the

76
00:03:07,280 --> 00:03:09,599
most detrimental to system security and

77
00:03:09,599 --> 00:03:11,280
hard to mitigate

78
00:03:11,280 --> 00:03:13,920
if level one page tables are placed onto

79
00:03:13,920 --> 00:03:16,640
victim rows and corrupted by row hammer

80
00:03:16,640 --> 00:03:18,239
the whole system security can be

81
00:03:18,239 --> 00:03:19,920
compromised

82
00:03:19,920 --> 00:03:21,680
so mainstream road hammer attacks are

83
00:03:21,680 --> 00:03:25,599
targeting level 1 page table corruption

84
00:03:25,920 --> 00:03:28,000
to defend against level 1 page table

85
00:03:28,000 --> 00:03:31,040
based rowhammer attacks we focus this on

86
00:03:31,040 --> 00:03:32,879
software only approaches as they are

87
00:03:32,879 --> 00:03:35,440
compatible with existing hardware

88
00:03:35,440 --> 00:03:37,760
allowing better deployability when

89
00:03:37,760 --> 00:03:39,840
compared with hardware defenses

90
00:03:39,840 --> 00:03:42,080
however existing software only defenses

91
00:03:42,080 --> 00:03:45,120
have two major limitations

92
00:03:45,120 --> 00:03:47,760
first they're not practical enough as

93
00:03:47,760 --> 00:03:49,599
they require modifying existing kernel

94
00:03:49,599 --> 00:03:51,680
memory allocator to make the allocator

95
00:03:51,680 --> 00:03:54,239
be aware of the mapping between physical

96
00:03:54,239 --> 00:03:57,840
address and dram location

97
00:03:57,840 --> 00:04:00,080
second they're not effective enough

98
00:04:00,080 --> 00:04:02,239
against level 1 page table oriented

99
00:04:02,239 --> 00:04:03,760
rohan attacks

100
00:04:03,760 --> 00:04:06,400
for example the pt hammer shown in micro

101
00:04:06,400 --> 00:04:08,560
2020 can defeat most software-only

102
00:04:08,560 --> 00:04:11,120
defenses

103
00:04:11,280 --> 00:04:13,760
before pt hammer was published rohan

104
00:04:13,760 --> 00:04:16,560
attacks are explicit that means they

105
00:04:16,560 --> 00:04:19,199
require access permissions to part of

106
00:04:19,199 --> 00:04:21,120
rows adjacent to level one page table

107
00:04:21,120 --> 00:04:23,840
rows so that these rows can be hammered

108
00:04:23,840 --> 00:04:25,680
to induce bit flips in the level one

109
00:04:25,680 --> 00:04:29,360
page table rows in the middle

110
00:04:29,360 --> 00:04:31,759
for pt hammer the attacker does not

111
00:04:31,759 --> 00:04:34,400
require the explicit access permission

112
00:04:34,400 --> 00:04:36,880
instead the attacker abuses the page

113
00:04:36,880 --> 00:04:39,280
table walk to trick the processor to

114
00:04:39,280 --> 00:04:41,520
implicitly hammer level one page tables

115
00:04:41,520 --> 00:04:44,479
on two sides and induce bit flips to

116
00:04:44,479 --> 00:04:48,000
level one page tables in the middle

117
00:04:48,080 --> 00:04:50,960
so an overview of the project

118
00:04:50,960 --> 00:04:53,040
for our work we aim to protect page

119
00:04:53,040 --> 00:04:55,040
tables from row hammer attacks while

120
00:04:55,040 --> 00:04:56,639
addressing the two limitations of

121
00:04:56,639 --> 00:04:58,080
existing works

122
00:04:58,080 --> 00:05:01,360
so have three design principles

123
00:05:01,360 --> 00:05:03,919
first we need to be effective enough in

124
00:05:03,919 --> 00:05:06,080
protecting page tables from explicit and

125
00:05:06,080 --> 00:05:08,560
implicit attacks

126
00:05:08,560 --> 00:05:10,960
second we need to be compatible with os

127
00:05:10,960 --> 00:05:14,000
kernels we do not modify kernel source

128
00:05:14,000 --> 00:05:16,479
code or break kernel code integrity

129
00:05:16,479 --> 00:05:19,520
through binary instrumentation

130
00:05:19,520 --> 00:05:21,600
last our approach should incur small

131
00:05:21,600 --> 00:05:25,840
performance overhead to commodity system

132
00:05:25,840 --> 00:05:28,240
our approach is inspired inspired by a

133
00:05:28,240 --> 00:05:30,400
widely of deployed hardware defense that

134
00:05:30,400 --> 00:05:32,880
is dram chip based target road refresh

135
00:05:32,880 --> 00:05:34,880
also called chip trr

136
00:05:34,880 --> 00:05:37,280
from a high level chip trr accounts rows

137
00:05:37,280 --> 00:05:40,080
activations and refreshes adjacent rows

138
00:05:40,080 --> 00:05:42,479
to suppress bit flips if the activation

139
00:05:42,479 --> 00:05:46,000
counts reach a predefined limit

140
00:05:46,000 --> 00:05:47,039
however

141
00:05:47,039 --> 00:05:49,039
chip trr can only track a limited number

142
00:05:49,039 --> 00:05:51,840
of rows due to limited hardware space

143
00:05:51,840 --> 00:05:54,160
with this observation stress path in

144
00:05:54,160 --> 00:05:57,680
ieee snp 2020 broke chip trs security

145
00:05:57,680 --> 00:06:01,680
guarantee by using many sided hammer

146
00:06:02,240 --> 00:06:04,720
to protect page table integrity while

147
00:06:04,720 --> 00:06:06,960
addressing the security limitations we

148
00:06:06,960 --> 00:06:09,360
propose soft trr a software only

149
00:06:09,360 --> 00:06:11,840
approach that leverages mmu and os

150
00:06:11,840 --> 00:06:14,560
kernel features

151
00:06:15,120 --> 00:06:17,360
so we are aware of that mmu and os

152
00:06:17,360 --> 00:06:19,199
kernel work together to enforce memory

153
00:06:19,199 --> 00:06:20,720
access mediation

154
00:06:20,720 --> 00:06:23,600
in particular page tables dictate access

155
00:06:23,600 --> 00:06:26,080
commissions to each physical page and an

156
00:06:26,080 --> 00:06:28,240
authorized access means that a user

157
00:06:28,240 --> 00:06:30,319
access to a virtual page violates the

158
00:06:30,319 --> 00:06:33,440
dictated access permissions

159
00:06:33,440 --> 00:06:35,680
as this figure shows the unauthorized

160
00:06:35,680 --> 00:06:38,080
axis raises a page fault and will be

161
00:06:38,080 --> 00:06:40,639
captured by the mmu

162
00:06:40,639 --> 00:06:42,800
as a response the mmu will switch the

163
00:06:42,800 --> 00:06:45,039
process context to the kernel the page

164
00:06:45,039 --> 00:06:47,120
fault handler will be invoked to handle

165
00:06:47,120 --> 00:06:49,759
the faults based on a hardware generated

166
00:06:49,759 --> 00:06:52,160
error code

167
00:06:52,160 --> 00:06:54,560
and then the handler will ask mmu to

168
00:06:54,560 --> 00:06:58,720
update tlb and page tables accordingly

169
00:06:59,520 --> 00:07:02,000
essentially soft trr leverages page

170
00:07:02,000 --> 00:07:03,919
tables and page fault handler to

171
00:07:03,919 --> 00:07:06,240
frequently trace memory accesses to any

172
00:07:06,240 --> 00:07:08,319
rows adjacent to rows hosting page

173
00:07:08,319 --> 00:07:10,720
tables

174
00:07:10,720 --> 00:07:12,960
here's an overview of our approach

175
00:07:12,960 --> 00:07:15,120
soft tr works as a loadable module

176
00:07:15,120 --> 00:07:17,360
inside the kernel and it has three main

177
00:07:17,360 --> 00:07:19,680
components

178
00:07:19,680 --> 00:07:24,000
the first is the page table collector

179
00:07:24,000 --> 00:07:25,840
so the page table collector actively

180
00:07:25,840 --> 00:07:28,080
collects all page tables and maintains

181
00:07:28,080 --> 00:07:30,639
their page and dram information

182
00:07:30,639 --> 00:07:32,479
it also collects and maintains adjacent

183
00:07:32,479 --> 00:07:34,880
pages

184
00:07:35,520 --> 00:07:37,680
because all existing page table oriented

185
00:07:37,680 --> 00:07:39,840
row hammer attacks aim at corrupting

186
00:07:39,840 --> 00:07:41,840
level 1 page tables in our

187
00:07:41,840 --> 00:07:43,919
implementation we focus on protecting

188
00:07:43,919 --> 00:07:47,199
level 1 page tables or l1pts there are

189
00:07:47,199 --> 00:07:49,520
targeted by existing explicit and

190
00:07:49,520 --> 00:07:52,880
implicit rowhammer attacks

191
00:07:53,199 --> 00:07:55,759
for existing lmpt pages the page table

192
00:07:55,759 --> 00:07:58,080
collector enumerates the list of test

193
00:07:58,080 --> 00:08:00,800
structure in a kernel to collect lmpt

194
00:08:00,800 --> 00:08:02,000
pages

195
00:08:02,000 --> 00:08:03,919
there are dram adjacent pages and their

196
00:08:03,919 --> 00:08:04,879
dram

197
00:08:04,879 --> 00:08:06,960
locations as well

198
00:08:06,960 --> 00:08:08,800
for lmpt pages

199
00:08:08,800 --> 00:08:11,039
that are dynamically allocated or freed

200
00:08:11,039 --> 00:08:12,879
after the enumeration the collector

201
00:08:12,879 --> 00:08:15,199
hooks l1pt unlock and three functions in

202
00:08:15,199 --> 00:08:17,680
the kernel

203
00:08:18,080 --> 00:08:20,800
so what is a dram adjacent page

204
00:08:20,800 --> 00:08:22,960
it refers to a page that resides in a

205
00:08:22,960 --> 00:08:26,479
row adjacent to a row hosting l1pt pages

206
00:08:26,479 --> 00:08:29,199
based on the kim's paper from isca 2020

207
00:08:29,199 --> 00:08:30,800
the largest row distance between the

208
00:08:30,800 --> 00:08:32,640
victim row and the hammer row is up to

209
00:08:32,640 --> 00:08:35,120
six row

210
00:08:35,599 --> 00:08:38,240
so in our implementation a dram adjacent

211
00:08:38,240 --> 00:08:40,880
page row can be up to 6 or away from a

212
00:08:40,880 --> 00:08:44,000
11 pt page row

213
00:08:45,279 --> 00:08:47,200
to maintain the collected page and dram

214
00:08:47,200 --> 00:08:50,480
row location information we we reuse the

215
00:08:50,480 --> 00:08:52,640
kernel's red black tree structure and

216
00:08:52,640 --> 00:08:55,839
have three red back trees

217
00:08:56,399 --> 00:08:58,880
the second component is adjacent page

218
00:08:58,880 --> 00:09:01,360
tracer

219
00:09:01,920 --> 00:09:04,560
in this component adjacent page tracer

220
00:09:04,560 --> 00:09:06,959
traces access to the maintained adjacent

221
00:09:06,959 --> 00:09:09,920
pages if an access is traced

222
00:09:09,920 --> 00:09:12,160
the adjacent page tracer maintains and

223
00:09:12,160 --> 00:09:14,399
updates a counter called charge leak

224
00:09:14,399 --> 00:09:16,880
counter for its relevant page table page

225
00:09:16,880 --> 00:09:18,000
row

226
00:09:18,000 --> 00:09:19,600
when the counter reaches a predefined

227
00:09:19,600 --> 00:09:22,080
limit the third component of row

228
00:09:22,080 --> 00:09:24,080
refresher will be triggered which is

229
00:09:24,080 --> 00:09:27,360
similar to chip trr

230
00:09:28,080 --> 00:09:30,240
for its tracing purpose the adjacent

231
00:09:30,240 --> 00:09:32,800
page tracer sets up tracing to collected

232
00:09:32,800 --> 00:09:35,120
adjacent pages in each time

233
00:09:35,120 --> 00:09:38,959
points from t0 to t1 to tn and the

234
00:09:38,959 --> 00:09:40,480
interval between two adjacent time

235
00:09:40,480 --> 00:09:44,080
points is called timer interval

236
00:09:44,640 --> 00:09:46,320
when the tracer captures the first

237
00:09:46,320 --> 00:09:48,720
memory axis in green color and ignores

238
00:09:48,720 --> 00:09:50,640
subsequent memory access in each time

239
00:09:50,640 --> 00:09:53,440
period of timer interval and updates the

240
00:09:53,440 --> 00:09:55,279
charge leak counter

241
00:09:55,279 --> 00:09:56,720
whenever the counter reaches a

242
00:09:56,720 --> 00:09:59,279
predefined limit called count limit

243
00:09:59,279 --> 00:10:00,880
the row refresher is triggered to

244
00:10:00,880 --> 00:10:03,880
refresh

245
00:10:04,160 --> 00:10:06,560
for the implementation the adjacent page

246
00:10:06,560 --> 00:10:08,480
tracer needs to implement a periodic

247
00:10:08,480 --> 00:10:10,959
tracing

248
00:10:10,959 --> 00:10:12,959
and determine a timer interval as short

249
00:10:12,959 --> 00:10:15,279
as possible and a count limit as low as

250
00:10:15,279 --> 00:10:17,440
possible so that a rowhammer attacker

251
00:10:17,440 --> 00:10:19,519
cannot induce bit flips in a period of

252
00:10:19,519 --> 00:10:22,160
threshold

253
00:10:22,480 --> 00:10:25,040
to set up periodic tracing we can

254
00:10:25,040 --> 00:10:27,440
configure present bit or reserve bit in

255
00:10:27,440 --> 00:10:29,600
a leaf page table entries

256
00:10:29,600 --> 00:10:32,000
with this configuration we capture every

257
00:10:32,000 --> 00:10:34,640
type of memory access such as read write

258
00:10:34,640 --> 00:10:37,839
or instruction fetch

259
00:10:38,320 --> 00:10:40,079
in this figure we can see that if a

260
00:10:40,079 --> 00:10:41,760
virtual page has a corresponding leave

261
00:10:41,760 --> 00:10:44,160
page table entry and the pte has present

262
00:10:44,160 --> 00:10:47,600
bit set to 0 or reserved bit set to 1

263
00:10:47,600 --> 00:10:49,120
and access to the virtual page will

264
00:10:49,120 --> 00:10:51,200
raise the page fault

265
00:10:51,200 --> 00:10:53,600
dmmu will switch the process context to

266
00:10:53,600 --> 00:10:55,440
the kernel and forward the page fault

267
00:10:55,440 --> 00:10:59,200
error code to the page fault handler

268
00:10:59,519 --> 00:11:01,519
when the present bit is set to 0 on the

269
00:11:01,519 --> 00:11:03,920
leaf pte the access triggers a page

270
00:11:03,920 --> 00:11:08,399
fault with p bit in error code set to 0.

271
00:11:08,720 --> 00:11:10,959
when the reserve bit is set to 1 in the

272
00:11:10,959 --> 00:11:13,200
leave pte the access triggers a page

273
00:11:13,200 --> 00:11:16,079
fault with rsvd bit in error code set to

274
00:11:16,079 --> 00:11:18,399
1.

275
00:11:18,640 --> 00:11:21,200
in our implementation we choose reserved

276
00:11:21,200 --> 00:11:22,160
bit

277
00:11:22,160 --> 00:11:24,079
we observe that the kernel performs

278
00:11:24,079 --> 00:11:26,480
active checks of the present bit

279
00:11:26,480 --> 00:11:28,399
and we cannot avoid such checks without

280
00:11:28,399 --> 00:11:30,320
modifying the kernel code

281
00:11:30,320 --> 00:11:32,800
for the reserved bit it is unused even

282
00:11:32,800 --> 00:11:35,120
in recent linux kernels and therefore

283
00:11:35,120 --> 00:11:36,800
there is no check against the reserved

284
00:11:36,800 --> 00:11:39,040
bit

285
00:11:39,519 --> 00:11:41,279
to determine timer interval and count

286
00:11:41,279 --> 00:11:43,200
limit we need to know the value of

287
00:11:43,200 --> 00:11:45,360
threshold

288
00:11:45,360 --> 00:11:47,440
in this figure we can see that the

289
00:11:47,440 --> 00:11:50,160
threshold must satisfy such an equation

290
00:11:50,160 --> 00:11:51,279
that is

291
00:11:51,279 --> 00:11:54,480
timer interval multiplies count limit -1

292
00:11:54,480 --> 00:11:56,480
and so an attacker's hammering time

293
00:11:56,480 --> 00:11:58,880
before our refresh is the periodic

294
00:11:58,880 --> 00:12:01,519
period of threshold

295
00:12:01,519 --> 00:12:03,600
the adjacent page tracer needs to make

296
00:12:03,600 --> 00:12:06,399
sure that no bit flip will be caused

297
00:12:06,399 --> 00:12:10,160
during a period of threshold

298
00:12:10,160 --> 00:12:12,959
on isca paper of 2020 a safe threshold

299
00:12:12,959 --> 00:12:14,560
is one millisecond

300
00:12:14,560 --> 00:12:17,040
that means no bit flip can occur within

301
00:12:17,040 --> 00:12:19,200
one millisecond when a dram chip is

302
00:12:19,200 --> 00:12:22,320
being frequently hammered

303
00:12:22,480 --> 00:12:24,160
given that both timer intervals and

304
00:12:24,160 --> 00:12:26,480
count limits are unsigned integers we

305
00:12:26,480 --> 00:12:28,639
set timer interval to 1 millisecond and

306
00:12:28,639 --> 00:12:30,880
count limit to 2 to keep the security

307
00:12:30,880 --> 00:12:33,360
guarantee

308
00:12:34,000 --> 00:12:38,079
the last component is the raw refresher

309
00:12:38,079 --> 00:12:40,000
when the counters reach the predefined

310
00:12:40,000 --> 00:12:42,639
limit the raw refresher is triggered to

311
00:12:42,639 --> 00:12:44,639
refresh desired row hosting page table

312
00:12:44,639 --> 00:12:46,720
pages

313
00:12:46,720 --> 00:12:48,079
by doing so

314
00:12:48,079 --> 00:12:50,000
rows hosting page tables in orange

315
00:12:50,000 --> 00:12:52,880
colors are immune to row hammer induced

316
00:12:52,880 --> 00:12:55,440
bit flips while non-page table rows in

317
00:12:55,440 --> 00:12:57,680
green colors are still vulnerable to bit

318
00:12:57,680 --> 00:13:00,079
flips

319
00:13:00,399 --> 00:13:02,240
it is straightforward to refresh a

320
00:13:02,240 --> 00:13:05,279
specified row we use a memory to a

321
00:13:05,279 --> 00:13:07,279
kernel virtual address to refresh a

322
00:13:07,279 --> 00:13:09,600
specified row as memory read can charge

323
00:13:09,600 --> 00:13:11,760
a row and suppress any possible bit

324
00:13:11,760 --> 00:13:12,959
flips

325
00:13:12,959 --> 00:13:14,880
before we do the read access we also

326
00:13:14,880 --> 00:13:17,120
need to flush cpu caches of the kernel

327
00:13:17,120 --> 00:13:20,320
virtual address

328
00:13:20,320 --> 00:13:22,079
to obtain the correct ternal virtual

329
00:13:22,079 --> 00:13:24,240
address the raw refresher leverages

330
00:13:24,240 --> 00:13:26,000
direct physical map

331
00:13:26,000 --> 00:13:28,639
this mapping is built by linux kernel to

332
00:13:28,639 --> 00:13:30,560
map available physical memory into

333
00:13:30,560 --> 00:13:32,079
kernel space

334
00:13:32,079 --> 00:13:33,760
so we can find the correct controversial

335
00:13:33,760 --> 00:13:36,079
address mapped to a specified row by

336
00:13:36,079 --> 00:13:38,480
using two mappings one is the direct

337
00:13:38,480 --> 00:13:39,680
physical map

338
00:13:39,680 --> 00:13:41,200
and the other is between a physical

339
00:13:41,200 --> 00:13:44,880
address and a dram row location

340
00:13:44,880 --> 00:13:48,639
okay here are our evaluation results

341
00:13:48,639 --> 00:13:51,200
we deploy soft trr into one system

342
00:13:51,200 --> 00:13:52,959
against one representative kernel

343
00:13:52,959 --> 00:13:55,279
privilege escalation attack

344
00:13:55,279 --> 00:13:57,600
for memory spray it hammers user memory

345
00:13:57,600 --> 00:14:00,320
that is adjacent to one pt pages

346
00:14:00,320 --> 00:14:01,600
for cat

347
00:14:01,600 --> 00:14:03,279
at hammer's device driver buffer

348
00:14:03,279 --> 00:14:06,160
adjacent to l1pt pages

349
00:14:06,160 --> 00:14:09,440
pc hammer implicitly hammers lmpt pages

350
00:14:09,440 --> 00:14:12,880
that are adjacent to other lmpt pages

351
00:14:12,880 --> 00:14:15,279
both memory spray and cadmium are

352
00:14:15,279 --> 00:14:17,360
explicit row hammer attacks with two

353
00:14:17,360 --> 00:14:19,040
different types of memory accessible to

354
00:14:19,040 --> 00:14:20,880
normal users

355
00:14:20,880 --> 00:14:23,600
pt hammer is the only published implicit

356
00:14:23,600 --> 00:14:26,399
row hammer attack

357
00:14:26,880 --> 00:14:29,680
in our experiments each attack targets

358
00:14:29,680 --> 00:14:33,440
and lmpt pages and ns50

359
00:14:33,440 --> 00:14:36,800
without soft trr each attack can succeed

360
00:14:36,800 --> 00:14:39,680
with soft trr each attack fails to

361
00:14:39,680 --> 00:14:42,800
induce bit flips in the 50 lmpt pages

362
00:14:42,800 --> 00:14:44,720
indicating that those attacks have been

363
00:14:44,720 --> 00:14:47,279
mitigated

364
00:14:47,920 --> 00:14:49,839
for the performance evaluation we

365
00:14:49,839 --> 00:14:52,399
consider three representative

366
00:14:52,399 --> 00:14:54,079
benchmarks

367
00:14:54,079 --> 00:14:58,720
spec speed 2017 integer focus on cpu

368
00:14:58,720 --> 00:15:02,160
memcache d focus on memory for nx test

369
00:15:02,160 --> 00:15:05,279
suite benchmarks the system as a whole

370
00:15:05,279 --> 00:15:06,880
we launched each of the benchmarks to

371
00:15:06,880 --> 00:15:08,959
evaluate of trs performance overhead in

372
00:15:08,959 --> 00:15:12,079
two scenarios

373
00:15:12,079 --> 00:15:14,560
is delta within one where an adjacent

374
00:15:14,560 --> 00:15:16,720
row is only one row from a row hosting

375
00:15:16,720 --> 00:15:18,399
lmpt pages

376
00:15:18,399 --> 00:15:20,000
and this is a common assumption from

377
00:15:20,000 --> 00:15:21,760
previous works

378
00:15:21,760 --> 00:15:24,160
so these works cannot defend against

379
00:15:24,160 --> 00:15:25,920
attacks where the road distance can be

380
00:15:25,920 --> 00:15:27,519
more than one row

381
00:15:27,519 --> 00:15:28,880
in our design

382
00:15:28,880 --> 00:15:29,519
an

383
00:15:29,519 --> 00:15:32,000
an adjacent row can be multiple row away

384
00:15:32,000 --> 00:15:33,680
from the page table row

385
00:15:33,680 --> 00:15:35,680
based on the aforementioned work in iska

386
00:15:35,680 --> 00:15:38,399
2020 the largest row distance can be up

387
00:15:38,399 --> 00:15:40,320
to six rows

388
00:15:40,320 --> 00:15:42,639
so in our implementation we consider

389
00:15:42,639 --> 00:15:45,279
delta within 6 where our row hosting on

390
00:15:45,279 --> 00:15:47,760
pt pages has an adjacent row that can be

391
00:15:47,760 --> 00:15:50,480
6 or away

392
00:15:50,800 --> 00:15:52,560
as this table shows

393
00:15:52,560 --> 00:15:54,560
soft trr incurs less than one percent

394
00:15:54,560 --> 00:15:56,639
overhead on leverage to each of the

395
00:15:56,639 --> 00:16:00,399
three benchmarks in both scenarios

396
00:16:00,720 --> 00:16:02,880
we also use the real world use case to

397
00:16:02,880 --> 00:16:04,720
measure runtime memory consumption of

398
00:16:04,720 --> 00:16:06,079
soft trr

399
00:16:06,079 --> 00:16:08,399
it is a lamp production environment with

400
00:16:08,399 --> 00:16:10,959
soft tr deployed and we run a common

401
00:16:10,959 --> 00:16:14,160
tool nick toll for 60 minutes to stretch

402
00:16:14,160 --> 00:16:16,639
test the lamp with soft trr from another

403
00:16:16,639 --> 00:16:19,040
machine

404
00:16:19,440 --> 00:16:22,079
the results are shown in this figure the

405
00:16:22,079 --> 00:16:24,399
memory cost in both delta within 1 and

406
00:16:24,399 --> 00:16:27,199
delta within 6 increase gradually and

407
00:16:27,199 --> 00:16:29,440
reach a relatively stable level in the

408
00:16:29,440 --> 00:16:31,839
last 15 minutes

409
00:16:31,839 --> 00:16:33,839
both delta within 1 and delta within 6

410
00:16:33,839 --> 00:16:36,399
have a similar and low memory cost that

411
00:16:36,399 --> 00:16:39,839
is less than 600 kilobytes

412
00:16:40,399 --> 00:16:42,639
to evaluate the robustness of a test

413
00:16:42,639 --> 00:16:45,040
system with soft tr enabled

414
00:16:45,040 --> 00:16:47,199
we selected 20 system costs of different

415
00:16:47,199 --> 00:16:49,839
types and perform stress tests for each

416
00:16:49,839 --> 00:16:52,240
selected system call on both a vanilla

417
00:16:52,240 --> 00:16:56,720
system and a soft trr enabled system

418
00:16:56,720 --> 00:16:58,720
from this table we can see that there is

419
00:16:58,720 --> 00:17:01,120
no deviation for the soft tr enabled

420
00:17:01,120 --> 00:17:05,720
system compared to the vanilla system

421
00:17:06,079 --> 00:17:09,439
last we have three key takeaways

422
00:17:09,439 --> 00:17:12,319
compared to existing works soft trr is a

423
00:17:12,319 --> 00:17:14,480
more effective and practical software

424
00:17:14,480 --> 00:17:16,319
only mitigation

425
00:17:16,319 --> 00:17:18,880
for its implementation soft tr works as

426
00:17:18,880 --> 00:17:21,199
a loadable kernel module to defend

427
00:17:21,199 --> 00:17:24,799
against row hammer attacks on l1pt pages

428
00:17:24,799 --> 00:17:28,079
it leverages mmu and os kernel features

429
00:17:28,079 --> 00:17:30,720
to collect lmpt pages track memory

430
00:17:30,720 --> 00:17:34,960
accesses and refresh target l1pt pages

431
00:17:34,960 --> 00:17:38,559
for its evaluation soft tr is evaluated

432
00:17:38,559 --> 00:17:40,080
to be effective against three

433
00:17:40,080 --> 00:17:42,320
representative row hammer attacks and

434
00:17:42,320 --> 00:17:44,080
incur small overhead and memory

435
00:17:44,080 --> 00:17:46,640
footprints

436
00:17:46,640 --> 00:17:48,799
with that i'll conclude my talk and the

437
00:17:48,799 --> 00:17:50,559
authors will be online for

438
00:17:50,559 --> 00:17:53,799
q a

