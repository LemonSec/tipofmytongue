1
00:00:07,940 --> 00:00:10,940
thank you

2
00:00:12,980 --> 00:00:15,420
I would like to talk about the modulo

3
00:00:15,420 --> 00:00:18,060
today which is a model based testing

4
00:00:18,060 --> 00:00:18,960
tool

5
00:00:18,960 --> 00:00:21,900
it's specially designed for finding

6
00:00:21,900 --> 00:00:24,420
convergence failure Buffs in distributed

7
00:00:24,420 --> 00:00:28,920
systems with the diverges listing models

8
00:00:28,920 --> 00:00:30,960
these days there are various cloud

9
00:00:30,960 --> 00:00:33,239
services and large-scale web

10
00:00:33,239 --> 00:00:35,520
applications relying on distributed

11
00:00:35,520 --> 00:00:37,140
systems

12
00:00:37,140 --> 00:00:40,440
in this talk we'll focus on replicated

13
00:00:40,440 --> 00:00:43,140
distributed storage systems where each

14
00:00:43,140 --> 00:00:46,320
replica is a key value store trying to

15
00:00:46,320 --> 00:00:49,620
keep its data set in sync with other

16
00:00:49,620 --> 00:00:51,960
replicas

17
00:00:51,960 --> 00:00:54,480
here's the one example convergence

18
00:00:54,480 --> 00:00:56,760
failure but we found from

19
00:00:56,760 --> 00:01:01,199
jira about database of Zookeeper so its

20
00:01:01,199 --> 00:01:03,660
priorities labeled as blocker which

21
00:01:03,660 --> 00:01:08,119
means it's one of the most severe bus

22
00:01:08,220 --> 00:01:10,860
and its reproduction step is as follow

23
00:01:10,860 --> 00:01:13,799
so you start server zero first and then

24
00:01:13,799 --> 00:01:15,780
create some data items on This Server

25
00:01:15,780 --> 00:01:19,080
zero and you shut down the zero zero

26
00:01:19,080 --> 00:01:21,720
then you restart server zero this time

27
00:01:21,720 --> 00:01:24,299
you start you also start server one and

28
00:01:24,299 --> 00:01:26,100
these two servers are supposed to be

29
00:01:26,100 --> 00:01:27,960
replicas

30
00:01:27,960 --> 00:01:32,340
but then clients can cannot read those

31
00:01:32,340 --> 00:01:36,119
data items on server zero while clients

32
00:01:36,119 --> 00:01:37,979
can still read those data items on

33
00:01:37,979 --> 00:01:40,740
server zero sorry clients cannot read

34
00:01:40,740 --> 00:01:43,740
those State items on server one but can

35
00:01:43,740 --> 00:01:46,680
can read data items on server zero

36
00:01:46,680 --> 00:01:49,680
so servers are out of sync

37
00:01:49,680 --> 00:01:52,740
clients May read inconsistent data and

38
00:01:52,740 --> 00:01:55,079
make incorrect decisions based on that

39
00:01:55,079 --> 00:01:58,020
which may resulted in catastrophic

40
00:01:58,020 --> 00:02:00,439
events

41
00:02:01,560 --> 00:02:05,180
so Patrick hunt who is the author of The

42
00:02:05,180 --> 00:02:06,960
Zookeeper paper

43
00:02:06,960 --> 00:02:09,780
left a comment saying this is a serious

44
00:02:09,780 --> 00:02:11,220
issue

45
00:02:11,220 --> 00:02:14,520
as is causing the follower which is a

46
00:02:14,520 --> 00:02:15,840
server one

47
00:02:15,840 --> 00:02:19,080
uh to get an inconsistent view of the

48
00:02:19,080 --> 00:02:20,220
database

49
00:02:20,220 --> 00:02:23,640
so it's a serious bar

50
00:02:23,640 --> 00:02:26,340
and here's another example we found from

51
00:02:26,340 --> 00:02:29,360
the same boat database and this bug

52
00:02:29,360 --> 00:02:32,760
requires long sequence events to be

53
00:02:32,760 --> 00:02:36,780
interleaved to find it so these types of

54
00:02:36,780 --> 00:02:39,900
bugs can be pretty difficult to find

55
00:02:39,900 --> 00:02:42,780
and also this ball resulted in several

56
00:02:42,780 --> 00:02:45,780
soft tasks a couple of them are still

57
00:02:45,780 --> 00:02:48,720
not still not closed and Bug itself

58
00:02:48,720 --> 00:02:52,080
hasn't been resolved and it has been 10

59
00:02:52,080 --> 00:02:53,819
years

60
00:02:53,819 --> 00:02:56,340
and we found there are other similar

61
00:02:56,340 --> 00:02:58,800
bugs in the about database

62
00:02:58,800 --> 00:03:01,800
so it's recurring problem so we need

63
00:03:01,800 --> 00:03:04,080
some kind of automated ball finding tool

64
00:03:04,080 --> 00:03:06,599
for these types of Buffs

65
00:03:06,599 --> 00:03:09,780
so what happens in internally

66
00:03:09,780 --> 00:03:11,940
is as follow so

67
00:03:11,940 --> 00:03:14,519
let's say there are two clients and

68
00:03:14,519 --> 00:03:17,220
client One sensor put request writing

69
00:03:17,220 --> 00:03:19,620
value one for some key

70
00:03:19,620 --> 00:03:21,840
and after some time passed another

71
00:03:21,840 --> 00:03:22,860
client

72
00:03:22,860 --> 00:03:26,400
uh it's best to read the value that's

73
00:03:26,400 --> 00:03:28,980
written by the previous put which is one

74
00:03:28,980 --> 00:03:31,440
in this case

75
00:03:31,440 --> 00:03:33,959
the key enabler for this is Convergence

76
00:03:33,959 --> 00:03:36,060
property that keeps the replicas

77
00:03:36,060 --> 00:03:37,620
consistent

78
00:03:37,620 --> 00:03:40,080
what happens is client one sense put

79
00:03:40,080 --> 00:03:42,659
request one of the replicas commit that

80
00:03:42,659 --> 00:03:45,299
operation it becomes a different from

81
00:03:45,299 --> 00:03:47,879
other replicas so replicas diverse but

82
00:03:47,879 --> 00:03:50,519
then replication protocol works and

83
00:03:50,519 --> 00:03:52,560
other replicas replicate that operation

84
00:03:52,560 --> 00:03:55,980
committed so their data set becomes

85
00:03:55,980 --> 00:04:00,239
equivalent so replicas converge

86
00:04:00,239 --> 00:04:02,700
then client uh

87
00:04:02,700 --> 00:04:05,459
read data from arbitrary replica and

88
00:04:05,459 --> 00:04:07,260
still get the consistent value which is

89
00:04:07,260 --> 00:04:09,420
very one

90
00:04:09,420 --> 00:04:12,599
but what if a replica failed after a

91
00:04:12,599 --> 00:04:14,939
commit the right operation

92
00:04:14,939 --> 00:04:18,120
so in this case if replica that

93
00:04:18,120 --> 00:04:22,560
committed the writing for the key with

94
00:04:22,560 --> 00:04:26,000
the value of one fail and it becomes

95
00:04:26,000 --> 00:04:30,020
unavailable for replication

96
00:04:30,900 --> 00:04:34,740
therefore unless the failures recovered

97
00:04:34,740 --> 00:04:38,699
Divergence across replicas remain

98
00:04:38,699 --> 00:04:41,400
once failure recovery is made we think

99
00:04:41,400 --> 00:04:44,820
mechanisms run and replicas replicate

100
00:04:44,820 --> 00:04:47,880
and commit the operation just like the

101
00:04:47,880 --> 00:04:51,419
the other one and they become converged

102
00:04:51,419 --> 00:04:53,580
again so

103
00:04:53,580 --> 00:04:55,560
uh that's how it how they reach

104
00:04:55,560 --> 00:04:58,139
convergence but if there is a software

105
00:04:58,139 --> 00:05:01,620
bug lurking in the resync mechanisms I

106
00:05:01,620 --> 00:05:03,900
may manifest in certain Divergence

107
00:05:03,900 --> 00:05:06,120
listing scenario and some of the

108
00:05:06,120 --> 00:05:08,160
replicas may suffer from convergence

109
00:05:08,160 --> 00:05:11,160
failure in this case the convergence may

110
00:05:11,160 --> 00:05:13,320
never occur again and we call these

111
00:05:13,320 --> 00:05:15,419
types of bugs convergence failure bus or

112
00:05:15,419 --> 00:05:17,580
cfps

113
00:05:17,580 --> 00:05:21,240
if a client happens to read data from

114
00:05:21,240 --> 00:05:23,580
this faulty replicas then he will read

115
00:05:23,580 --> 00:05:26,340
the inconsistent data

116
00:05:26,340 --> 00:05:28,860
so there are existing approaches to find

117
00:05:28,860 --> 00:05:31,080
balls in distributed systems

118
00:05:31,080 --> 00:05:33,380
model based testing and model checking

119
00:05:33,380 --> 00:05:36,780
is State space exploration

120
00:05:36,780 --> 00:05:39,500
they systematically and exhaustively

121
00:05:39,500 --> 00:05:42,539
explore the state space of the system

122
00:05:42,539 --> 00:05:43,860
under test

123
00:05:43,860 --> 00:05:46,320
but their state space exploration is

124
00:05:46,320 --> 00:05:48,539
usually generic and not targeted

125
00:05:48,539 --> 00:05:50,759
therefore they may easily suffer from

126
00:05:50,759 --> 00:05:54,539
the notorious State explosion problem

127
00:05:54,539 --> 00:05:56,280
on the other hand manual testing and

128
00:05:56,280 --> 00:05:59,060
random testing explore State space

129
00:05:59,060 --> 00:06:01,560
randomly but their state space

130
00:06:01,560 --> 00:06:04,199
exploration is neither exhaustive nor

131
00:06:04,199 --> 00:06:05,520
systematic

132
00:06:05,520 --> 00:06:09,199
so they make miscorner cases

133
00:06:09,199 --> 00:06:12,720
our approach is targeted systematic and

134
00:06:12,720 --> 00:06:15,539
exhaustive state space exploration and

135
00:06:15,539 --> 00:06:18,300
because it's targeted we mitigate the

136
00:06:18,300 --> 00:06:20,039
state explosion problem

137
00:06:20,039 --> 00:06:22,740
and because we systematically and

138
00:06:22,740 --> 00:06:25,380
exhaustively explore the state space we

139
00:06:25,380 --> 00:06:28,919
don't miss the corner cases

140
00:06:28,919 --> 00:06:32,639
we made one a key observation that we

141
00:06:32,639 --> 00:06:34,560
can convert the sequence of Complex

142
00:06:34,560 --> 00:06:36,960
events such as the one on the left hand

143
00:06:36,960 --> 00:06:41,400
side here into much shorter sequence

144
00:06:41,400 --> 00:06:44,639
that's concise and reproducible

145
00:06:44,639 --> 00:06:46,819
just like the one on the right hand side

146
00:06:46,819 --> 00:06:49,919
involving the relevance events such as

147
00:06:49,919 --> 00:06:52,979
crash could restart and resync for

148
00:06:52,979 --> 00:06:54,539
example

149
00:06:54,539 --> 00:06:57,240
and we can interleave this to find new

150
00:06:57,240 --> 00:06:59,520
CFO BS

151
00:06:59,520 --> 00:07:02,300
we further can reduce

152
00:07:02,300 --> 00:07:05,699
these steps into Divergence and

153
00:07:05,699 --> 00:07:07,139
convergence

154
00:07:07,139 --> 00:07:09,960
so by focusing on interleave exploring

155
00:07:09,960 --> 00:07:12,360
various interleavings of Divergence and

156
00:07:12,360 --> 00:07:15,539
convergence can reduce the state space

157
00:07:15,539 --> 00:07:18,960
explore significantly more

158
00:07:18,960 --> 00:07:22,139
uh and also we separate abstraction from

159
00:07:22,139 --> 00:07:23,880
the concrete execution

160
00:07:23,880 --> 00:07:26,819
we developed the Divergence resync model

161
00:07:26,819 --> 00:07:27,840
for that

162
00:07:27,840 --> 00:07:31,319
it's Divergence resync model or trm uh

163
00:07:31,319 --> 00:07:33,539
represents various Divergence resync

164
00:07:33,539 --> 00:07:36,360
scenarios it is composed of abstract

165
00:07:36,360 --> 00:07:39,479
execution model or AEM and concrete

166
00:07:39,479 --> 00:07:43,139
execution model or cm am models the

167
00:07:43,139 --> 00:07:46,740
target abstract Behavior where an and CM

168
00:07:46,740 --> 00:07:49,020
models the target concrete Behavior

169
00:07:49,020 --> 00:07:51,419
that's compatible with the abstract

170
00:07:51,419 --> 00:07:54,419
Behavior behavior model by AES

171
00:07:54,419 --> 00:07:57,479
so am is essentially a finite State

172
00:07:57,479 --> 00:07:59,699
machine

173
00:07:59,699 --> 00:08:02,940
um we use the depth first search

174
00:08:02,940 --> 00:08:04,639
strategy

175
00:08:04,639 --> 00:08:07,880
and state exploration is is

176
00:08:07,880 --> 00:08:11,400
uh it's actually a repeat repetitions of

177
00:08:11,400 --> 00:08:13,699
past exploration each pass exploration

178
00:08:13,699 --> 00:08:16,800
starts at the initial State and Traverse

179
00:08:16,800 --> 00:08:19,379
down each each stage that hasn't been

180
00:08:19,379 --> 00:08:22,500
visited previously and it ends at the

181
00:08:22,500 --> 00:08:24,000
leaf state where there is no more next

182
00:08:24,000 --> 00:08:25,199
day to visit

183
00:08:25,199 --> 00:08:27,180
we repeat this until we visit every

184
00:08:27,180 --> 00:08:29,340
state in the state space

185
00:08:29,340 --> 00:08:31,740
so we exhaustively and systematically

186
00:08:31,740 --> 00:08:34,200
explore the state space of AEM

187
00:08:34,200 --> 00:08:36,599
and produce schedules

188
00:08:36,599 --> 00:08:39,000
each schedule is basically passed we

189
00:08:39,000 --> 00:08:40,380
just explored

190
00:08:40,380 --> 00:08:42,360
so it's a sequence of Divergence and

191
00:08:42,360 --> 00:08:43,440
convergence

192
00:08:43,440 --> 00:08:48,420
with this modulo Trends generates the

193
00:08:48,420 --> 00:08:50,399
inputs and injects the

194
00:08:50,399 --> 00:08:52,980
into the system under test to find the

195
00:08:52,980 --> 00:08:56,160
box in the real these Theory systems

196
00:08:56,160 --> 00:08:58,260
and benefits of separating abstraction

197
00:08:58,260 --> 00:09:00,839
from concrete execution is twofold in

198
00:09:00,839 --> 00:09:04,860
modulo so first AEM can be reused for

199
00:09:04,860 --> 00:09:06,839
different systems under test

200
00:09:06,839 --> 00:09:10,200
and the common functionality of the cems

201
00:09:10,200 --> 00:09:12,779
that's repeatedly implemented can be

202
00:09:12,779 --> 00:09:16,040
compiled as a library

203
00:09:16,080 --> 00:09:18,540
modulus architecture is pretty simple it

204
00:09:18,540 --> 00:09:20,700
has two components schedule generator

205
00:09:20,700 --> 00:09:23,279
and concrete executor

206
00:09:23,279 --> 00:09:26,180
user must specify and provide a DRM

207
00:09:26,180 --> 00:09:29,279
including AEM and CM

208
00:09:29,279 --> 00:09:31,500
am is going to be given to the schedule

209
00:09:31,500 --> 00:09:32,940
generator

210
00:09:32,940 --> 00:09:36,360
cm is given to the concrete executor

211
00:09:36,360 --> 00:09:38,519
and CM is essentially a system under

212
00:09:38,519 --> 00:09:41,459
test wrapped by a control layer

213
00:09:41,459 --> 00:09:44,880
so scheduled generators is the one that

214
00:09:44,880 --> 00:09:47,820
explores that am's state space and

215
00:09:47,820 --> 00:09:49,860
produces schedule files containing bunch

216
00:09:49,860 --> 00:09:51,360
of schedules

217
00:09:51,360 --> 00:09:53,279
concrete executor takes each schedule

218
00:09:53,279 --> 00:09:55,920
and executed by generating input based

219
00:09:55,920 --> 00:09:58,260
on it and injecting those inputs into

220
00:09:58,260 --> 00:10:02,180
the system under test via cem

221
00:10:02,700 --> 00:10:06,000
after executing each schedule modular

222
00:10:06,000 --> 00:10:08,040
performed bunch of read operations

223
00:10:08,040 --> 00:10:10,500
to see the values of each key on every

224
00:10:10,500 --> 00:10:11,580
replica

225
00:10:11,580 --> 00:10:14,880
and check if there is any key contains

226
00:10:14,880 --> 00:10:17,040
the value that's inconsistent across the

227
00:10:17,040 --> 00:10:18,540
replicas

228
00:10:18,540 --> 00:10:20,660
if inconsistent

229
00:10:20,660 --> 00:10:25,500
Keys detected then modular razor raise

230
00:10:25,500 --> 00:10:27,959
an alarm for detection of convergence

231
00:10:27,959 --> 00:10:30,619
failure bus

232
00:10:31,380 --> 00:10:34,680
now let me explain more detail about how

233
00:10:34,680 --> 00:10:37,019
module use drms

234
00:10:37,019 --> 00:10:40,920
so I'll use a example DRM we used for

235
00:10:40,920 --> 00:10:44,160
zookeeper in this example DRM we have

236
00:10:44,160 --> 00:10:46,800
two State variables

237
00:10:46,800 --> 00:10:49,880
for the AEM

238
00:10:49,880 --> 00:10:53,519
and those are replica State and online

239
00:10:53,519 --> 00:10:56,399
State user must specify the number of

240
00:10:56,399 --> 00:10:59,220
ride operations to inject as normal PS

241
00:10:59,220 --> 00:11:01,440
and the number of replicas to use as

242
00:11:01,440 --> 00:11:03,180
known replicas

243
00:11:03,180 --> 00:11:05,940
with the norm replicas given we can we

244
00:11:05,940 --> 00:11:07,980
can determine the size of arrays for

245
00:11:07,980 --> 00:11:09,899
State variables

246
00:11:09,899 --> 00:11:11,880
and each index in the array is for each

247
00:11:11,880 --> 00:11:15,000
replica so first first index is for

248
00:11:15,000 --> 00:11:17,519
replica a second index is for replica p

249
00:11:17,519 --> 00:11:19,079
and so on

250
00:11:19,079 --> 00:11:21,720
and then with the Dom Ops given we can

251
00:11:21,720 --> 00:11:24,540
generate the predefined write sequence

252
00:11:24,540 --> 00:11:27,000
we write values that are monoclonically

253
00:11:27,000 --> 00:11:28,260
increasing

254
00:11:28,260 --> 00:11:30,060
and based on this we can index each

255
00:11:30,060 --> 00:11:33,120
right operation to distinguish to

256
00:11:33,120 --> 00:11:36,540
distinguish it explicitly

257
00:11:36,540 --> 00:11:38,760
so replica stay represents up to which

258
00:11:38,760 --> 00:11:42,480
right has been committed by replicas

259
00:11:42,480 --> 00:11:45,720
or replicas so far and online stay

260
00:11:45,720 --> 00:11:47,940
represents the availability of each

261
00:11:47,940 --> 00:11:50,100
replica

262
00:11:50,100 --> 00:11:53,160
uh so here is what uh one example state

263
00:11:53,160 --> 00:11:56,279
state s0 is we It's actually an initial

264
00:11:56,279 --> 00:11:59,700
State and in this state uh every replica

265
00:11:59,700 --> 00:12:02,399
has committed uh the first right

266
00:12:02,399 --> 00:12:04,980
operation so set data is the right

267
00:12:04,980 --> 00:12:07,500
operation we use for zookeeper

268
00:12:07,500 --> 00:12:11,339
and so there are key key access values

269
00:12:11,339 --> 00:12:14,579
are all zero so State variable for as

270
00:12:14,579 --> 00:12:16,440
serious should be set as follow so

271
00:12:16,440 --> 00:12:18,720
replica stage should be set as zero zero

272
00:12:18,720 --> 00:12:20,940
zero and online stay should be set as

273
00:12:20,940 --> 00:12:23,640
true true which means every replica is

274
00:12:23,640 --> 00:12:25,860
converted at the very first right

275
00:12:25,860 --> 00:12:29,040
operation and they're all online

276
00:12:29,040 --> 00:12:31,740
and each state has a bunch of enabled

277
00:12:31,740 --> 00:12:34,260
transitions and let's say we pick the

278
00:12:34,260 --> 00:12:35,940
Divergence transition

279
00:12:35,940 --> 00:12:38,700
which represents a Divergence scenario

280
00:12:38,700 --> 00:12:41,880
where we crash the replica B first and

281
00:12:41,880 --> 00:12:44,880
then inject a right operation so replica

282
00:12:44,880 --> 00:12:46,620
ANC committed

283
00:12:46,620 --> 00:12:49,800
then ANC crash

284
00:12:49,800 --> 00:12:52,860
if we apply its Divergence transition to

285
00:12:52,860 --> 00:12:57,959
s0 we we get to the next state S1 where

286
00:12:57,959 --> 00:13:01,440
replica stays set to 1 0 1 which means A

287
00:13:01,440 --> 00:13:03,600
and C has committed the second right

288
00:13:03,600 --> 00:13:07,320
operation but B did not because of the

289
00:13:07,320 --> 00:13:10,860
failure and online state is set to false

290
00:13:10,860 --> 00:13:13,920
false false to indicate every replica is

291
00:13:13,920 --> 00:13:15,959
crashed

292
00:13:15,959 --> 00:13:19,860
in S1 there are also a bunch of enabled

293
00:13:19,860 --> 00:13:21,180
transitions

294
00:13:21,180 --> 00:13:23,220
and let's say we pick one of the

295
00:13:23,220 --> 00:13:25,079
convergence transition

296
00:13:25,079 --> 00:13:27,839
which represents the scenario where we

297
00:13:27,839 --> 00:13:30,360
restart a and b and then let them

298
00:13:30,360 --> 00:13:32,459
re-sync

299
00:13:32,459 --> 00:13:36,180
if we apply this transition T2 to S1 we

300
00:13:36,180 --> 00:13:38,519
get to the next state as two where

301
00:13:38,519 --> 00:13:42,360
replica stays to 111 which means replica

302
00:13:42,360 --> 00:13:46,860
B successfully replicates the second

303
00:13:46,860 --> 00:13:49,800
right the the second right operation and

304
00:13:49,800 --> 00:13:52,200
all the replications all the replicas

305
00:13:52,200 --> 00:13:55,440
actually converted an online state in

306
00:13:55,440 --> 00:13:58,320
the case the amp are online while C

307
00:13:58,320 --> 00:14:00,899
remains crashed

308
00:14:00,899 --> 00:14:03,360
so with this we can perform per test

309
00:14:03,360 --> 00:14:04,620
exploration

310
00:14:04,620 --> 00:14:07,560
and pass expiration produce a schedule

311
00:14:07,560 --> 00:14:09,779
which is which is a sequence of

312
00:14:09,779 --> 00:14:12,839
Divergence and convergence transitions

313
00:14:12,839 --> 00:14:15,839
and concrete executor takes its schedule

314
00:14:15,839 --> 00:14:17,760
and

315
00:14:17,760 --> 00:14:18,360
um

316
00:14:18,360 --> 00:14:22,139
get its transition and translate it into

317
00:14:22,139 --> 00:14:24,839
the more concrete test inputs so for

318
00:14:24,839 --> 00:14:27,620
example for Divergence transition

319
00:14:27,620 --> 00:14:30,660
it translates it into the intermediate

320
00:14:30,660 --> 00:14:32,420
representation

321
00:14:32,420 --> 00:14:36,420
where crash B and write 1 to X and

322
00:14:36,420 --> 00:14:39,180
question C are executed we just actually

323
00:14:39,180 --> 00:14:42,060
get further translated into more

324
00:14:42,060 --> 00:14:44,399
concrete test inputs

325
00:14:44,399 --> 00:14:45,000
um

326
00:14:45,000 --> 00:14:48,360
which is a q minus 9 for b z Theta

327
00:14:48,360 --> 00:14:51,779
threat asleep Q minus 9 for a and C

328
00:14:51,779 --> 00:14:54,000
and similarly for convergence transition

329
00:14:54,000 --> 00:14:56,820
we can translate it into restart a and b

330
00:14:56,820 --> 00:14:58,860
and wave for resync which will get

331
00:14:58,860 --> 00:15:04,260
further translated into Java uh

332
00:15:04,260 --> 00:15:08,279
to restart the A and B and and scanning

333
00:15:08,279 --> 00:15:10,139
the logs for certain messages to be

334
00:15:10,139 --> 00:15:13,320
printed out for the indication of the

335
00:15:13,320 --> 00:15:15,480
resync

336
00:15:15,480 --> 00:15:19,339
uh and once inputs are generated

337
00:15:19,339 --> 00:15:22,740
concrete executor injects them into the

338
00:15:22,740 --> 00:15:25,380
system under test at the correct timing

339
00:15:25,380 --> 00:15:28,139
relative to some internal events so for

340
00:15:28,139 --> 00:15:31,440
example we have a thread asleep for a

341
00:15:31,440 --> 00:15:33,360
Divergence transition

342
00:15:33,360 --> 00:15:37,440
after set data but before kill -9 for a

343
00:15:37,440 --> 00:15:42,420
and C this is to ensure that ANC commit

344
00:15:42,420 --> 00:15:46,079
the injected right operation before they

345
00:15:46,079 --> 00:15:47,940
get crashed

346
00:15:47,940 --> 00:15:49,079
foreign

347
00:15:49,079 --> 00:15:52,260
so if we don't have this time delay it's

348
00:15:52,260 --> 00:15:54,420
possible that ANC crash before they

349
00:15:54,420 --> 00:15:57,060
committed so the test is going to be

350
00:15:57,060 --> 00:16:00,979
deviated from the Our intention

351
00:16:01,260 --> 00:16:03,899
um and for for convergence we have

352
00:16:03,899 --> 00:16:07,560
scanning the law after restarting the A

353
00:16:07,560 --> 00:16:09,120
and B

354
00:16:09,120 --> 00:16:13,320
uh this means we wait until the leader

355
00:16:13,320 --> 00:16:15,839
election completes and recent completes

356
00:16:15,839 --> 00:16:17,880
otherwise it's possible in the next

357
00:16:17,880 --> 00:16:21,180
transition right injection is made but

358
00:16:21,180 --> 00:16:22,880
failed because there is no little

359
00:16:22,880 --> 00:16:25,199
elected yet

360
00:16:25,199 --> 00:16:26,839
so we need these kinds of

361
00:16:26,839 --> 00:16:30,139
non-determination control

362
00:16:30,779 --> 00:16:34,019
module is implemented in 8.k lines of

363
00:16:34,019 --> 00:16:36,720
code in total schedule generator and

364
00:16:36,720 --> 00:16:39,660
concrete executor are only 0.3 K lines

365
00:16:39,660 --> 00:16:41,759
of code and 0.8 K lines of code

366
00:16:41,759 --> 00:16:43,560
respectively

367
00:16:43,560 --> 00:16:46,259
Divergence resync models takes up most

368
00:16:46,259 --> 00:16:48,420
of the code which is

369
00:16:48,420 --> 00:16:51,660
7.3 K lines of code this includes all

370
00:16:51,660 --> 00:16:54,779
five drms we Implement method and among

371
00:16:54,779 --> 00:16:57,360
these AMS are 2.8 highlights of code and

372
00:16:57,360 --> 00:17:00,360
CMS are 4.6 K lines of code

373
00:17:00,360 --> 00:17:03,060
and we applied modular to zookeeper

374
00:17:03,060 --> 00:17:05,339
mongodb and redis

375
00:17:05,339 --> 00:17:10,079
as a result we found 11 cfbs and we

376
00:17:10,079 --> 00:17:13,020
newly discovered five cfps in Zookeeper

377
00:17:13,020 --> 00:17:16,619
and one cfp in mongodb and we reported

378
00:17:16,619 --> 00:17:17,459
them

379
00:17:17,459 --> 00:17:20,579
and we also detected one known cfp in

380
00:17:20,579 --> 00:17:26,178
mongodb and four known cfps in redis

381
00:17:26,780 --> 00:17:29,640
and we found that the size of State

382
00:17:29,640 --> 00:17:31,500
space to explore

383
00:17:31,500 --> 00:17:35,039
is small enough so we could finish the

384
00:17:35,039 --> 00:17:37,320
systematic and irresistative state space

385
00:17:37,320 --> 00:17:38,880
exploration

386
00:17:38,880 --> 00:17:41,820
for the AEM of drms we use to find

387
00:17:41,820 --> 00:17:44,960
aforementioned box

388
00:17:45,360 --> 00:17:49,559
also we could reuse AEM for both

389
00:17:49,559 --> 00:17:52,799
zookeeper and mongodb so it shows that

390
00:17:52,799 --> 00:17:55,620
modulo is supportable

391
00:17:55,620 --> 00:17:59,460
and we made the repeated portion of cems

392
00:17:59,460 --> 00:18:02,460
for radius trms as a library and

393
00:18:02,460 --> 00:18:04,980
implemented each radius the radius is

394
00:18:04,980 --> 00:18:07,799
DRM by extending

395
00:18:07,799 --> 00:18:11,640
the based on the library so it also

396
00:18:11,640 --> 00:18:14,640
shows that modulo is extensible

397
00:18:14,640 --> 00:18:19,679
so in conclusion modulo is effective in

398
00:18:19,679 --> 00:18:22,080
finding bugs in real world distributed

399
00:18:22,080 --> 00:18:23,100
systems

400
00:18:23,100 --> 00:18:25,620
our key approaches is targeted

401
00:18:25,620 --> 00:18:27,720
systematic and exhaustive state space

402
00:18:27,720 --> 00:18:28,919
exploration

403
00:18:28,919 --> 00:18:32,160
and key ideas are exploring only

404
00:18:32,160 --> 00:18:33,960
interleaving of Divergence and

405
00:18:33,960 --> 00:18:36,419
convergence which mitigate the state

406
00:18:36,419 --> 00:18:39,000
space a state explosion problem and

407
00:18:39,000 --> 00:18:41,640
separating abstraction from concrete

408
00:18:41,640 --> 00:18:45,660
execution via AEM and cem

409
00:18:45,660 --> 00:18:48,059
uh therefore mojulo becomes more

410
00:18:48,059 --> 00:18:51,360
portable and extensible and so modular

411
00:18:51,360 --> 00:18:53,640
can be extended to find Buffs in your

412
00:18:53,640 --> 00:18:57,000
distributed systems and the code is here

413
00:18:57,000 --> 00:18:58,919
in the GitHub

414
00:18:58,919 --> 00:19:01,620
so thank you very much and I'll take any

415
00:19:01,620 --> 00:19:04,219
question now

