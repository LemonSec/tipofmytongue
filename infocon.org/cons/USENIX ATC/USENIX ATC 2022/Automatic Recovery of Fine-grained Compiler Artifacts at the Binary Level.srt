1
00:00:14,400 --> 00:00:15,200
hi

2
00:00:15,200 --> 00:00:16,720
i'm ife du

3
00:00:16,720 --> 00:00:18,480
uh and

4
00:00:18,480 --> 00:00:20,640
today i'll present our work automatic

5
00:00:20,640 --> 00:00:22,480
recovery of fine-grained compiler

6
00:00:22,480 --> 00:00:24,480
artifacts at the binary level

7
00:00:24,480 --> 00:00:26,960
this work is co-authored with ryan court

8
00:00:26,960 --> 00:00:29,679
and kevin snow from zero point dynamics

9
00:00:29,679 --> 00:00:32,238
and my advisor fabian monroe from unc

10
00:00:32,238 --> 00:00:33,760
chapel hill

11
00:00:33,760 --> 00:00:36,320
our work focuses on identifying the set

12
00:00:36,320 --> 00:00:38,640
of individual optimization passes for

13
00:00:38,640 --> 00:00:41,280
each function in a binary with the main

14
00:00:41,280 --> 00:00:43,600
motivation of helping developers and

15
00:00:43,600 --> 00:00:44,640
analysts

16
00:00:44,640 --> 00:00:47,039
to find potentially vulnerable functions

17
00:00:47,039 --> 00:00:50,879
caused by compiler optimizations

18
00:00:52,480 --> 00:00:53,360
so

19
00:00:53,360 --> 00:00:55,199
today's programs have becoming

20
00:00:55,199 --> 00:00:57,440
increasingly complex

21
00:00:57,440 --> 00:00:59,680
and there are more and more platforms

22
00:00:59,680 --> 00:01:01,280
that are getting smarter

23
00:01:01,280 --> 00:01:03,120
in addition to personal computing

24
00:01:03,120 --> 00:01:05,840
devices and servers we also have

25
00:01:05,840 --> 00:01:08,159
embedded systems like routers and iot

26
00:01:08,159 --> 00:01:11,760
devices such as smart cars

27
00:01:11,760 --> 00:01:15,520
more programs and more complex programs

28
00:01:15,520 --> 00:01:17,600
as a security practitioners you might

29
00:01:17,600 --> 00:01:20,000
wonder there's larger attack surfaces

30
00:01:20,000 --> 00:01:21,680
and there's higher chance of human

31
00:01:21,680 --> 00:01:22,720
errors

32
00:01:22,720 --> 00:01:25,119
we humans all often make errors in

33
00:01:25,119 --> 00:01:27,520
programming leaving vulnerable code

34
00:01:27,520 --> 00:01:30,159
thankfully the community has developed

35
00:01:30,159 --> 00:01:32,479
common secure coding practices to

36
00:01:32,479 --> 00:01:34,159
prevent human errors

37
00:01:34,159 --> 00:01:36,960
for example it is common for

38
00:01:36,960 --> 00:01:39,200
programmers that deal with secret data

39
00:01:39,200 --> 00:01:42,000
to erase such data after using them such

40
00:01:42,000 --> 00:01:44,079
that even if

41
00:01:44,079 --> 00:01:46,079
an information leak happens

42
00:01:46,079 --> 00:01:49,920
the attacker cannot find the secret data

43
00:01:49,920 --> 00:01:51,280
you might wonder

44
00:01:51,280 --> 00:01:53,520
you might think that with

45
00:01:53,520 --> 00:01:57,280
if you strictly focus with the

46
00:01:57,280 --> 00:01:59,280
if you strictly stick to the secure

47
00:01:59,280 --> 00:02:00,880
coding practices

48
00:02:00,880 --> 00:02:03,520
your code will be completely safe you'll

49
00:02:03,520 --> 00:02:05,680
you'll write secure c code or c plus

50
00:02:05,680 --> 00:02:07,920
plus code and then the compiler will

51
00:02:07,920 --> 00:02:09,840
faithfully generate binaries that

52
00:02:09,840 --> 00:02:12,800
exactly match the designed behavior

53
00:02:12,800 --> 00:02:14,000
however

54
00:02:14,000 --> 00:02:15,760
have you questioned

55
00:02:15,760 --> 00:02:17,280
that do these

56
00:02:17,280 --> 00:02:19,680
do the compilers actually faithfully

57
00:02:19,680 --> 00:02:21,599
compile all of your code

58
00:02:21,599 --> 00:02:23,920
do these secure code practices really

59
00:02:23,920 --> 00:02:26,720
exist after those optimizations

60
00:02:26,720 --> 00:02:29,120
and the answer is no

61
00:02:29,120 --> 00:02:30,800
compilers are now

62
00:02:30,800 --> 00:02:33,120
heavy optimizers as well

63
00:02:33,120 --> 00:02:35,360
and many of the optimizations could

64
00:02:35,360 --> 00:02:38,400
potentially remove the secure coding

65
00:02:38,400 --> 00:02:40,879
practices that programmers added

66
00:02:40,879 --> 00:02:42,000
in fact

67
00:02:42,000 --> 00:02:44,800
in a previous work by d silva at all

68
00:02:44,800 --> 00:02:47,360
they discussed the keratin security gap

69
00:02:47,360 --> 00:02:48,879
which arises when a compiler

70
00:02:48,879 --> 00:02:51,760
optimization preserves the functionality

71
00:02:51,760 --> 00:02:54,319
but violates a security guarantee made

72
00:02:54,319 --> 00:02:56,319
by formerly sound

73
00:02:56,319 --> 00:02:58,800
correct source code

74
00:02:58,800 --> 00:03:01,840
in their work d silva at all described

75
00:03:01,840 --> 00:03:04,720
three types of the correctness security

76
00:03:04,720 --> 00:03:05,599
gap

77
00:03:05,599 --> 00:03:07,760
first they have site

78
00:03:07,760 --> 00:03:10,000
compiler optimizations may create site

79
00:03:10,000 --> 00:03:11,280
channels

80
00:03:11,280 --> 00:03:13,120
where developers of

81
00:03:13,120 --> 00:03:14,879
cryptography

82
00:03:14,879 --> 00:03:16,080
libraries

83
00:03:16,080 --> 00:03:18,480
would add code to prevent constant time

84
00:03:18,480 --> 00:03:21,280
to to produce constant time operations

85
00:03:21,280 --> 00:03:23,519
but the optimizations such as common sub

86
00:03:23,519 --> 00:03:25,360
expression elimination

87
00:03:25,360 --> 00:03:28,239
and people optimizations may simplify or

88
00:03:28,239 --> 00:03:30,560
remove those code into

89
00:03:30,560 --> 00:03:34,080
faster code but not constant time

90
00:03:34,080 --> 00:03:35,920
second

91
00:03:35,920 --> 00:03:38,879
developers often sometimes rely on

92
00:03:38,879 --> 00:03:40,640
undefined behaviors to perform

93
00:03:40,640 --> 00:03:42,480
protections such as

94
00:03:42,480 --> 00:03:44,640
detecting overflowed into assigned

95
00:03:44,640 --> 00:03:45,760
integers

96
00:03:45,760 --> 00:03:48,159
however compilers are free to perform

97
00:03:48,159 --> 00:03:49,599
whatever they want

98
00:03:49,599 --> 00:03:51,440
or maybe even

99
00:03:51,440 --> 00:03:53,000
sometimes

100
00:03:53,000 --> 00:03:55,840
identified that such check is

101
00:03:55,840 --> 00:03:57,280
unnecessary

102
00:03:57,280 --> 00:03:59,599
because a very large signed integer will

103
00:03:59,599 --> 00:04:01,439
obviously be larger than a negative

104
00:04:01,439 --> 00:04:02,480
integer

105
00:04:02,480 --> 00:04:05,840
and removes those checks

106
00:04:05,840 --> 00:04:07,680
and finally we have persistent state

107
00:04:07,680 --> 00:04:09,040
violations

108
00:04:09,040 --> 00:04:12,799
where developers would write would store

109
00:04:12,799 --> 00:04:16,880
erase secure data or verify data

110
00:04:16,880 --> 00:04:19,199
verify the code that deal with secure

111
00:04:19,199 --> 00:04:20,639
data

112
00:04:20,639 --> 00:04:23,120
but the compiler would then use either

113
00:04:23,120 --> 00:04:25,919
that storage nation or function inlining

114
00:04:25,919 --> 00:04:27,680
optimizations

115
00:04:27,680 --> 00:04:29,840
that keep the data

116
00:04:29,840 --> 00:04:32,240
beyond available in the memory beyond

117
00:04:32,240 --> 00:04:35,280
their design scope

118
00:04:36,800 --> 00:04:38,479
there are some

119
00:04:38,479 --> 00:04:41,919
developers that are known that know this

120
00:04:41,919 --> 00:04:44,080
this issue the correctness security gap

121
00:04:44,080 --> 00:04:45,520
issue

122
00:04:45,520 --> 00:04:47,840
experienced developers are tricking

123
00:04:47,840 --> 00:04:49,759
applying tricks to the to trick the

124
00:04:49,759 --> 00:04:50,960
compiler

125
00:04:50,960 --> 00:04:54,000
to avoid such optimizations

126
00:04:54,000 --> 00:04:56,720
we have examples that use

127
00:04:56,720 --> 00:04:59,280
various form of volatile functions or

128
00:04:59,280 --> 00:05:00,720
volatile

129
00:05:00,720 --> 00:05:01,759
objects

130
00:05:01,759 --> 00:05:03,520
such that the compilers will not

131
00:05:03,520 --> 00:05:06,160
understand that the memory object will

132
00:05:06,160 --> 00:05:08,080
not be in used after

133
00:05:08,080 --> 00:05:10,160
however

134
00:05:10,160 --> 00:05:11,919
what works for the current version of

135
00:05:11,919 --> 00:05:14,160
the compiler has no guarantee that they

136
00:05:14,160 --> 00:05:17,840
will work for a future version

137
00:05:18,400 --> 00:05:20,560
and finding these

138
00:05:20,560 --> 00:05:23,120
compiler-induced issues is prohibitedly

139
00:05:23,120 --> 00:05:24,560
difficult

140
00:05:24,560 --> 00:05:26,400
developers need to either

141
00:05:26,400 --> 00:05:28,479
inspect the entire disassembly of the

142
00:05:28,479 --> 00:05:29,520
program

143
00:05:29,520 --> 00:05:32,160
or use gcc or another debugger to make

144
00:05:32,160 --> 00:05:33,759
sure that the

145
00:05:33,759 --> 00:05:34,800
the

146
00:05:34,800 --> 00:05:36,800
the code faithfully perform what they

147
00:05:36,800 --> 00:05:39,520
want

148
00:05:39,520 --> 00:05:42,639
so is there an easy button for this

149
00:05:42,639 --> 00:05:44,160
problem

150
00:05:44,160 --> 00:05:46,000
that is our focus

151
00:05:46,000 --> 00:05:49,199
so our guild our goal is to build a tool

152
00:05:49,199 --> 00:05:50,840
that identifies the sets of

153
00:05:50,840 --> 00:05:53,440
optimizations applied to each function

154
00:05:53,440 --> 00:05:55,280
of the program

155
00:05:55,280 --> 00:05:57,600
our tool can help developers

156
00:05:57,600 --> 00:05:59,680
detect two of the three types of the

157
00:05:59,680 --> 00:06:01,440
correctness security gap

158
00:06:01,440 --> 00:06:03,600
the side channels and persistent state

159
00:06:03,600 --> 00:06:05,600
violations that are

160
00:06:05,600 --> 00:06:07,440
that happens because of compiler

161
00:06:07,440 --> 00:06:09,199
optimizations

162
00:06:09,199 --> 00:06:11,360
to our knowledge we are the first to

163
00:06:11,360 --> 00:06:15,680
focus on the past level identification

164
00:06:17,360 --> 00:06:19,120
so a little bit of background on

165
00:06:19,120 --> 00:06:22,479
optimizations and passes

166
00:06:22,479 --> 00:06:24,800
most developers only focus on the

167
00:06:24,800 --> 00:06:26,960
optimization level when they compile

168
00:06:26,960 --> 00:06:29,520
programs however

169
00:06:29,520 --> 00:06:31,600
internally

170
00:06:31,600 --> 00:06:33,280
compilers apply

171
00:06:33,280 --> 00:06:36,000
fine-grained optimization passes to each

172
00:06:36,000 --> 00:06:37,919
optimization level

173
00:06:37,919 --> 00:06:41,039
they run each optimization pass

174
00:06:41,039 --> 00:06:42,240
and the password

175
00:06:42,240 --> 00:06:44,080
determine whether the

176
00:06:44,080 --> 00:06:46,960
the optimization is necessary and if so

177
00:06:46,960 --> 00:06:49,520
modify the code

178
00:06:49,520 --> 00:06:51,680
here is a high level overview of the

179
00:06:51,680 --> 00:06:53,600
compiler

180
00:06:53,600 --> 00:06:55,840
and we're

181
00:06:55,840 --> 00:06:58,400
and our tool focuses on detecting those

182
00:06:58,400 --> 00:07:01,599
optimization passes that actually

183
00:07:01,599 --> 00:07:03,280
the source code

184
00:07:03,280 --> 00:07:06,400
during the compilation

185
00:07:07,039 --> 00:07:10,240
for our motivation

186
00:07:10,800 --> 00:07:12,639
there are three

187
00:07:12,639 --> 00:07:14,479
we list a few

188
00:07:14,479 --> 00:07:17,759
previous work that fits similar go

189
00:07:17,759 --> 00:07:22,479
we have origin himalaya and neuroci

190
00:07:22,479 --> 00:07:24,960
all of those previous work

191
00:07:24,960 --> 00:07:27,039
focus on detecting

192
00:07:27,039 --> 00:07:29,199
detecting the core screen the compiler

193
00:07:29,199 --> 00:07:30,479
configuration

194
00:07:30,479 --> 00:07:32,880
including the compiler family compiler

195
00:07:32,880 --> 00:07:35,360
version and the optimization level of a

196
00:07:35,360 --> 00:07:37,360
function in a binary

197
00:07:37,360 --> 00:07:39,199
and they all utilize deep learning

198
00:07:39,199 --> 00:07:41,199
techniques

199
00:07:41,199 --> 00:07:44,080
however for our exact purpose we need

200
00:07:44,080 --> 00:07:46,560
finer grained information

201
00:07:46,560 --> 00:07:49,039
we need to detect

202
00:07:49,039 --> 00:07:50,160
we need to

203
00:07:50,160 --> 00:07:53,919
given a bina a binary function detect in

204
00:07:53,919 --> 00:07:58,000
the individual optimization passes

205
00:07:58,000 --> 00:08:00,240
and we are also not convinced that

206
00:08:00,240 --> 00:08:02,160
we really need deep learning techniques

207
00:08:02,160 --> 00:08:05,199
for our techniques

208
00:08:05,199 --> 00:08:08,639
here is a detailed here is an overview

209
00:08:08,639 --> 00:08:10,479
of the state-of-the-art previous work

210
00:08:10,479 --> 00:08:12,479
near ci

211
00:08:12,479 --> 00:08:14,879
so the taking the binary file

212
00:08:14,879 --> 00:08:18,319
disassemble it into individual functions

213
00:08:18,319 --> 00:08:20,960
then extract features using word vac

214
00:08:20,960 --> 00:08:22,800
into vectors

215
00:08:22,800 --> 00:08:24,960
and then run either a

216
00:08:24,960 --> 00:08:26,800
convolutional neural network or a

217
00:08:26,800 --> 00:08:28,639
recurrent neural network

218
00:08:28,639 --> 00:08:30,639
to determine the compiler configuration

219
00:08:30,639 --> 00:08:33,440
for each function

220
00:08:35,679 --> 00:08:37,760
and to

221
00:08:37,760 --> 00:08:41,120
verify that to show that we don't need

222
00:08:41,120 --> 00:08:42,958
deep learning technique

223
00:08:42,958 --> 00:08:45,920
we build a classifier that matches this

224
00:08:45,920 --> 00:08:48,480
nearest eyes behavior but using only

225
00:08:48,480 --> 00:08:50,160
simple features

226
00:08:50,160 --> 00:08:53,040
and a multi-class decision tree based

227
00:08:53,040 --> 00:08:56,320
light gbm classifier

228
00:08:56,320 --> 00:08:59,440
we only use seven types of simple

229
00:08:59,440 --> 00:09:01,519
features including

230
00:09:01,519 --> 00:09:04,240
opcode instructions registers two gram

231
00:09:04,240 --> 00:09:06,160
solving up code and instructions and

232
00:09:06,160 --> 00:09:08,959
first and last instructions they are all

233
00:09:08,959 --> 00:09:12,000
binary features using one hot encoding

234
00:09:12,000 --> 00:09:13,839
and we apply feature engineering when

235
00:09:13,839 --> 00:09:16,240
selecting the types of features we want

236
00:09:16,240 --> 00:09:19,200
for example we also tried three grams of

237
00:09:19,200 --> 00:09:21,120
opcodes and instructions but eventually

238
00:09:21,120 --> 00:09:23,600
decided to not use them because

239
00:09:23,600 --> 00:09:25,839
while they could bring single digits of

240
00:09:25,839 --> 00:09:27,680
improvement in our results they

241
00:09:27,680 --> 00:09:29,200
significantly

242
00:09:29,200 --> 00:09:31,120
they take significantly longer time to

243
00:09:31,120 --> 00:09:33,600
generate

244
00:09:35,680 --> 00:09:38,560
so after we build our classifier we were

245
00:09:38,560 --> 00:09:41,120
eager to compare with the

246
00:09:41,120 --> 00:09:43,600
the state of the art on how we do

247
00:09:43,600 --> 00:09:46,240
without a deep learning technique

248
00:09:46,240 --> 00:09:48,480
thankfully newer ci published their data

249
00:09:48,480 --> 00:09:49,279
set

250
00:09:49,279 --> 00:09:51,120
so we use the same data set that

251
00:09:51,120 --> 00:09:53,600
includes 15 programs five compiler

252
00:09:53,600 --> 00:09:57,360
versions and three optimization levels

253
00:09:57,360 --> 00:09:59,040
while going through the data set we

254
00:09:59,040 --> 00:10:01,519
realize that it is not really balanced

255
00:10:01,519 --> 00:10:03,920
so some classes have significantly more

256
00:10:03,920 --> 00:10:06,399
functions than others so we applied data

257
00:10:06,399 --> 00:10:07,839
set balance

258
00:10:07,839 --> 00:10:09,920
just like near ci we split the data set

259
00:10:09,920 --> 00:10:14,480
into 80 training set and 20 testing set

260
00:10:14,480 --> 00:10:16,959
first we reproduce the results of newer

261
00:10:16,959 --> 00:10:18,399
ci

262
00:10:18,399 --> 00:10:20,640
and verified that the result their

263
00:10:20,640 --> 00:10:22,720
results closely resembled their claim

264
00:10:22,720 --> 00:10:25,200
the result in their paper

265
00:10:25,200 --> 00:10:27,200
we showed the confusion matrix of the

266
00:10:27,200 --> 00:10:30,320
results on the x-axis is what near ci

267
00:10:30,320 --> 00:10:33,120
predicted and the y-axis is the actual

268
00:10:33,120 --> 00:10:35,040
configuration

269
00:10:35,040 --> 00:10:37,519
so even with the balanced data set

270
00:10:37,519 --> 00:10:41,680
new rci still performs very well

271
00:10:41,920 --> 00:10:43,920
the most confused

272
00:10:43,920 --> 00:10:46,640
it is mostly confused when dealing with

273
00:10:46,640 --> 00:10:49,920
claim 3.8 and claim 5.0 where it

274
00:10:49,920 --> 00:10:52,880
misclassifies many of the functions

275
00:10:52,880 --> 00:10:56,079
for the compiler version

276
00:10:56,079 --> 00:10:57,920
and similarly

277
00:10:57,920 --> 00:10:59,600
it makes

278
00:10:59,600 --> 00:11:02,000
and similarly it comes it is confused

279
00:11:02,000 --> 00:11:03,839
when

280
00:11:03,839 --> 00:11:07,200
when detecting gcc 6 versus gcc 4

281
00:11:07,200 --> 00:11:10,640
functions at 0.

282
00:11:10,720 --> 00:11:13,760
next we show the result our own approach

283
00:11:13,760 --> 00:11:16,160
that utilizes shadow learning and simple

284
00:11:16,160 --> 00:11:17,760
features

285
00:11:17,760 --> 00:11:20,399
on average we have a slightly higher f1

286
00:11:20,399 --> 00:11:21,360
score

287
00:11:21,360 --> 00:11:24,800
comparing to the state of the art

288
00:11:24,800 --> 00:11:27,600
just like near ci

289
00:11:27,600 --> 00:11:30,079
our approach also shows that it cannot

290
00:11:30,079 --> 00:11:33,200
accurately identify claim 3.8 and claim

291
00:11:33,200 --> 00:11:36,399
5.0 functions

292
00:11:36,800 --> 00:11:38,800
we have shown that with well-engineered

293
00:11:38,800 --> 00:11:40,959
features a shallow learning technique

294
00:11:40,959 --> 00:11:42,959
could could do just as well in the

295
00:11:42,959 --> 00:11:45,440
configuration identification problem

296
00:11:45,440 --> 00:11:47,600
now let's switch to the more complicated

297
00:11:47,600 --> 00:11:48,880
problem

298
00:11:48,880 --> 00:11:53,519
the optimization path identification

299
00:11:53,760 --> 00:11:55,839
so while going through going over

300
00:11:55,839 --> 00:11:57,920
existing work we were surprised that

301
00:11:57,920 --> 00:11:59,839
nobody have looked into this problem

302
00:11:59,839 --> 00:12:00,880
before

303
00:12:00,880 --> 00:12:02,880
even the ones that do mention the

304
00:12:02,880 --> 00:12:04,800
problem claim that they will be very

305
00:12:04,800 --> 00:12:06,720
challenging to detect

306
00:12:06,720 --> 00:12:09,040
this is a quote from a previous work

307
00:12:09,040 --> 00:12:11,040
that some flags would be challenging if

308
00:12:11,040 --> 00:12:13,360
not impossible to detect the debt code

309
00:12:13,360 --> 00:12:16,000
elimination flag being one example

310
00:12:16,000 --> 00:12:19,519
however we disagree

311
00:12:19,519 --> 00:12:20,720
but before

312
00:12:20,720 --> 00:12:22,560
building our model we first need to

313
00:12:22,560 --> 00:12:24,560
generate the data set

314
00:12:24,560 --> 00:12:27,200
of the compiler passes because compilers

315
00:12:27,200 --> 00:12:29,760
run passes internally and we couldn't

316
00:12:29,760 --> 00:12:31,440
retrieve the pass information at a

317
00:12:31,440 --> 00:12:32,959
function level

318
00:12:32,959 --> 00:12:33,920
therefore

319
00:12:33,920 --> 00:12:36,480
we modified the legacy path manager of

320
00:12:36,480 --> 00:12:39,120
the lvm compiler infrastructure to

321
00:12:39,120 --> 00:12:42,480
generate our ground truth

322
00:12:43,519 --> 00:12:46,959
after generating our data set

323
00:12:46,959 --> 00:12:50,959
we then modified our existing compiler

324
00:12:50,959 --> 00:12:54,000
configuration classifier

325
00:12:54,000 --> 00:12:55,360
to

326
00:12:55,360 --> 00:12:58,240
to classify the fine-grained compiler

327
00:12:58,240 --> 00:13:00,079
path information

328
00:13:00,079 --> 00:13:01,600
first

329
00:13:01,600 --> 00:13:04,240
we modified our single light gbm

330
00:13:04,240 --> 00:13:07,440
classifier into a multi-label classifier

331
00:13:07,440 --> 00:13:10,399
that includes a light gbm model for each

332
00:13:10,399 --> 00:13:13,040
compiler pass

333
00:13:13,040 --> 00:13:15,839
and we also added optional support for

334
00:13:15,839 --> 00:13:18,320
dynamic feature generator

335
00:13:18,320 --> 00:13:19,680
where we

336
00:13:19,680 --> 00:13:22,399
you utilize a symbolic execution tool

337
00:13:22,399 --> 00:13:24,720
and force execute every feature every

338
00:13:24,720 --> 00:13:26,800
function to extract the registered

339
00:13:26,800 --> 00:13:29,279
deltas

340
00:13:32,000 --> 00:13:34,639
so since we had to extract additional

341
00:13:34,639 --> 00:13:37,200
information from the compiler we used a

342
00:13:37,200 --> 00:13:40,079
different data set for our for to

343
00:13:40,079 --> 00:13:41,600
evaluate our compiler pass

344
00:13:41,600 --> 00:13:43,200
identification

345
00:13:43,200 --> 00:13:44,639
we used four

346
00:13:44,639 --> 00:13:47,600
popular open source projects bing utils

347
00:13:47,600 --> 00:13:51,760
choreotails httpd and sqlite

348
00:13:51,760 --> 00:13:54,160
we utilized the

349
00:13:54,160 --> 00:13:56,720
the the claim 14 compiler

350
00:13:56,720 --> 00:14:01,120
and modified its legacy path manager

351
00:14:01,199 --> 00:14:02,560
and we compiled

352
00:14:02,560 --> 00:14:04,959
our on the four projects in using four

353
00:14:04,959 --> 00:14:08,320
optimization levels from o0 to o3

354
00:14:08,320 --> 00:14:12,079
in total we extracted 83 compiler passes

355
00:14:12,079 --> 00:14:14,399
that are applied to functions but not

356
00:14:14,399 --> 00:14:17,120
all functions so we excluded

357
00:14:17,120 --> 00:14:19,279
the compiler passes that are applied to

358
00:14:19,279 --> 00:14:21,600
every function in our data set

359
00:14:21,600 --> 00:14:23,920
because that's very obviously easy to

360
00:14:23,920 --> 00:14:27,279
detect they're just always present

361
00:14:27,279 --> 00:14:30,720
and in total we generated 552 binaries

362
00:14:30,720 --> 00:14:32,399
and about 15

363
00:14:32,399 --> 00:14:36,800
in about 150 000 functions

364
00:14:37,040 --> 00:14:39,040
just like our

365
00:14:39,040 --> 00:14:41,760
compiler configuration evaluation we

366
00:14:41,760 --> 00:14:44,160
also balance the data set such that for

367
00:14:44,160 --> 00:14:46,560
each pass we passing

368
00:14:46,560 --> 00:14:48,399
for each compiler pass

369
00:14:48,399 --> 00:14:49,680
our test

370
00:14:49,680 --> 00:14:51,920
our data set have the same number of

371
00:14:51,920 --> 00:14:53,519
functions that have the pass and the

372
00:14:53,519 --> 00:14:55,199
number of functions that do not have the

373
00:14:55,199 --> 00:14:56,399
pass

374
00:14:56,399 --> 00:14:58,639
we split our

375
00:14:58,639 --> 00:15:01,680
data set to 75 training set and 25

376
00:15:01,680 --> 00:15:04,319
testing set

377
00:15:04,399 --> 00:15:07,519
so the average f1 score across all 83

378
00:15:07,519 --> 00:15:10,839
passes is 80 92.1

379
00:15:10,839 --> 00:15:14,720
percent and i and here we listed the

380
00:15:14,720 --> 00:15:16,639
result for the debt code illumination

381
00:15:16,639 --> 00:15:17,839
passes

382
00:15:17,839 --> 00:15:20,399
contrary to the quote from previous work

383
00:15:20,399 --> 00:15:22,560
our model could detect these stat code

384
00:15:22,560 --> 00:15:25,120
illumination passes with high

385
00:15:25,120 --> 00:15:27,680
f1 score they're all higher than 83

386
00:15:27,680 --> 00:15:29,519
percent

387
00:15:29,519 --> 00:15:30,639
and

388
00:15:30,639 --> 00:15:33,040
more importantly thanks to our shallow

389
00:15:33,040 --> 00:15:34,720
learning model we could we could

390
00:15:34,720 --> 00:15:37,199
interpret the results to see exactly why

391
00:15:37,199 --> 00:15:38,839
it performs

392
00:15:38,839 --> 00:15:42,560
well here we show the top features for

393
00:15:42,560 --> 00:15:43,760
the past

394
00:15:43,760 --> 00:15:45,760
aggressive debt code illumination we

395
00:15:45,760 --> 00:15:48,000
chose this pass because it is one of the

396
00:15:48,000 --> 00:15:50,880
dead code illumination pass passes

397
00:15:50,880 --> 00:15:54,000
and its code comment in the lvm source

398
00:15:54,000 --> 00:15:56,800
code is clear on what it does

399
00:15:56,800 --> 00:15:59,680
so it removes that code especially

400
00:15:59,680 --> 00:16:02,240
in loops

401
00:16:02,240 --> 00:16:04,240
and we could support the claim seeing

402
00:16:04,240 --> 00:16:05,360
that

403
00:16:05,360 --> 00:16:09,680
our classifier found four top four of

404
00:16:09,680 --> 00:16:11,279
the top features

405
00:16:11,279 --> 00:16:13,839
are compare instructions

406
00:16:13,839 --> 00:16:16,320
that are common in loops

407
00:16:16,320 --> 00:16:18,800
this shows that our classifier picked up

408
00:16:18,800 --> 00:16:22,560
the behavior of the loop the pass itself

409
00:16:22,560 --> 00:16:23,839
however

410
00:16:23,839 --> 00:16:25,600
in addition to that

411
00:16:25,600 --> 00:16:27,199
our classifier also picked up the

412
00:16:27,199 --> 00:16:29,839
behavior of other optimizations

413
00:16:29,839 --> 00:16:32,480
for example the number one feature here

414
00:16:32,480 --> 00:16:35,120
is actually the frame pointer setup

415
00:16:35,120 --> 00:16:37,920
where at 01 or higher optimization level

416
00:16:37,920 --> 00:16:39,920
the compiler would just skip the frame

417
00:16:39,920 --> 00:16:42,079
pointer

418
00:16:42,079 --> 00:16:44,560
and similarly

419
00:16:44,560 --> 00:16:47,199
the classifier also picked up various uh

420
00:16:47,199 --> 00:16:49,519
no-op instructions that are used for

421
00:16:49,519 --> 00:16:51,680
alignments that also appear at one or

422
00:16:51,680 --> 00:16:55,120
higher optimization level

423
00:16:55,360 --> 00:16:56,639
furthermore

424
00:16:56,639 --> 00:16:58,240
even though the aggressive debt code

425
00:16:58,240 --> 00:16:59,759
elimination pass

426
00:16:59,759 --> 00:17:00,560
is

427
00:17:00,560 --> 00:17:01,920
applied at the intermediate

428
00:17:01,920 --> 00:17:04,079
representation level before register

429
00:17:04,079 --> 00:17:06,160
allocation

430
00:17:06,160 --> 00:17:08,559
our classifier still picked up several

431
00:17:08,559 --> 00:17:10,880
registers upon the top features

432
00:17:10,880 --> 00:17:12,319
showing that

433
00:17:12,319 --> 00:17:13,919
its relationship

434
00:17:13,919 --> 00:17:16,400
this pass also has a relationship

435
00:17:16,400 --> 00:17:20,319
to the machine level optimizations

436
00:17:20,319 --> 00:17:22,000
so in summary

437
00:17:22,000 --> 00:17:25,039
we did this we discovered that our past

438
00:17:25,039 --> 00:17:27,599
worked well

439
00:17:27,599 --> 00:17:29,600
by identifying both the past's own

440
00:17:29,600 --> 00:17:31,760
behavior and its relationship with other

441
00:17:31,760 --> 00:17:34,240
passes

442
00:17:34,880 --> 00:17:37,919
in addition to that code illumination

443
00:17:37,919 --> 00:17:40,640
our classifier also achieved high f1

444
00:17:40,640 --> 00:17:42,480
score on all the

445
00:17:42,480 --> 00:17:45,120
all the compiler optimizations that are

446
00:17:45,120 --> 00:17:48,000
described in the dcova at our

447
00:17:48,000 --> 00:17:49,919
correctness security gap

448
00:17:49,919 --> 00:17:51,280
claimed to be

449
00:17:51,280 --> 00:17:53,679
impacting having an impact of on

450
00:17:53,679 --> 00:17:56,000
security

451
00:17:56,000 --> 00:17:58,960
including code motion telco illumination

452
00:17:58,960 --> 00:18:01,360
common sub expression elimination

453
00:18:01,360 --> 00:18:02,880
strength reduction and people

454
00:18:02,880 --> 00:18:04,240
optimizations

455
00:18:04,240 --> 00:18:06,880
for all of these passes our classifier

456
00:18:06,880 --> 00:18:09,600
achieved a high higher an f1 score

457
00:18:09,600 --> 00:18:13,120
higher than 83 percent

458
00:18:13,120 --> 00:18:16,320
and finally since our class

459
00:18:16,320 --> 00:18:18,080
our main motivation is to help

460
00:18:18,080 --> 00:18:20,480
developers and analysts detect

461
00:18:20,480 --> 00:18:23,039
potential issues in their code

462
00:18:23,039 --> 00:18:26,240
induced by compilers we ran case studies

463
00:18:26,240 --> 00:18:29,039
to show that our tool can can assist

464
00:18:29,039 --> 00:18:31,760
developers in real world

465
00:18:31,760 --> 00:18:34,000
so

466
00:18:34,160 --> 00:18:36,960
we applied our tool to busybox the

467
00:18:36,960 --> 00:18:39,200
latest version of busybox at the time of

468
00:18:39,200 --> 00:18:40,640
experiment

469
00:18:40,640 --> 00:18:43,280
busybox is a popular lin unix utility

470
00:18:43,280 --> 00:18:45,520
suite for embedded systems

471
00:18:45,520 --> 00:18:48,640
and our classifier detected that these

472
00:18:48,640 --> 00:18:53,600
function in the sha encryption

473
00:18:54,880 --> 00:18:56,480
detect

474
00:18:56,480 --> 00:18:58,320
was the modified by the dead store

475
00:18:58,320 --> 00:19:01,919
illumination pass and in fact

476
00:19:01,919 --> 00:19:04,240
the developers specifically mentioned in

477
00:19:04,240 --> 00:19:06,559
the code comment that they wanted to

478
00:19:06,559 --> 00:19:09,679
erase the secret intermediate values

479
00:19:09,679 --> 00:19:11,039
such that

480
00:19:11,039 --> 00:19:13,280
people attaching to processes or reading

481
00:19:13,280 --> 00:19:16,160
core dumps cannot get any information

482
00:19:16,160 --> 00:19:18,320
however the compiler kicked in and

483
00:19:18,320 --> 00:19:19,919
applied that stored illumination which

484
00:19:19,919 --> 00:19:23,280
completely removed these erasures

485
00:19:23,280 --> 00:19:25,520
we have found this issue and reported

486
00:19:25,520 --> 00:19:29,840
the bug on the bug tracker of busy box

487
00:19:29,840 --> 00:19:31,039
next

488
00:19:31,039 --> 00:19:34,000
we also found an issue in apache http

489
00:19:34,000 --> 00:19:36,880
support utility program ht password

490
00:19:36,880 --> 00:19:39,280
where the compiler just simply removed

491
00:19:39,280 --> 00:19:41,600
the erasure instruction that erases the

492
00:19:41,600 --> 00:19:43,679
plain text password

493
00:19:43,679 --> 00:19:46,480
so after this get password function

494
00:19:46,480 --> 00:19:49,200
executes we were still able to recover

495
00:19:49,200 --> 00:19:51,440
the entire plaintext password

496
00:19:51,440 --> 00:19:52,720
because the

497
00:19:52,720 --> 00:19:55,679
the the code that erases the password is

498
00:19:55,679 --> 00:19:58,000
gone

499
00:19:58,160 --> 00:20:00,480
and the same with crypto plus plus which

500
00:20:00,480 --> 00:20:02,799
is a cryptography library

501
00:20:02,799 --> 00:20:04,880
our classifier detected the dead store

502
00:20:04,880 --> 00:20:07,440
elimination pass at o3 optimization for

503
00:20:07,440 --> 00:20:10,559
the cast 256

504
00:20:10,559 --> 00:20:12,480
encryption function

505
00:20:12,480 --> 00:20:15,280
where the developers erases the

506
00:20:15,280 --> 00:20:16,799
intermediate result

507
00:20:16,799 --> 00:20:19,200
in inside the variable kappa but the

508
00:20:19,200 --> 00:20:20,640
compiler

509
00:20:20,640 --> 00:20:24,000
removed this erasure

510
00:20:24,640 --> 00:20:27,360
our next step is to run

511
00:20:27,360 --> 00:20:29,520
is to conduct a large-scale evaluation

512
00:20:29,520 --> 00:20:31,919
of the compiler correctness

513
00:20:31,919 --> 00:20:33,840
correctness security gap across

514
00:20:33,840 --> 00:20:35,520
platforms

515
00:20:35,520 --> 00:20:37,520
including both linux programs and

516
00:20:37,520 --> 00:20:39,600
popular windows programs and we have

517
00:20:39,600 --> 00:20:41,600
already found a number of new problems

518
00:20:41,600 --> 00:20:44,320
due to compiler optimizations

519
00:20:44,320 --> 00:20:45,760
to conclude

520
00:20:45,760 --> 00:20:47,840
compilers can nullify secured code

521
00:20:47,840 --> 00:20:50,400
practices add by programmers

522
00:20:50,400 --> 00:20:52,159
and it is very challenging for

523
00:20:52,159 --> 00:20:54,559
developers to detect that their code are

524
00:20:54,559 --> 00:20:56,159
on the mind is undermined by the

525
00:20:56,159 --> 00:20:58,159
compilers

526
00:20:58,159 --> 00:21:00,320
and we applied shadow learning to build

527
00:21:00,320 --> 00:21:03,120
a model that identifies compiler passes

528
00:21:03,120 --> 00:21:04,400
applied

529
00:21:04,400 --> 00:21:07,679
to each function of a binary to assist

530
00:21:07,679 --> 00:21:09,840
developers and analysts to better handle

531
00:21:09,840 --> 00:21:11,600
this problem

532
00:21:11,600 --> 00:21:14,840
thank you

533
00:21:20,080 --> 00:21:22,158
you

