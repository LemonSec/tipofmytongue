1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:17,720 --> 00:00:20,279
who leads computer architecture and

3
00:00:20,279 --> 00:00:23,340
memory systems level 3. today I'll

4
00:00:23,340 --> 00:00:26,039
introduce our work which is Bijou KV

5
00:00:26,039 --> 00:00:28,680
Hardware South caracal design to

6
00:00:28,680 --> 00:00:30,960
integrate through strong latency

7
00:00:30,960 --> 00:00:33,719
determinism into look structured merge

8
00:00:33,719 --> 00:00:35,760
key value stores

9
00:00:35,760 --> 00:00:38,399
let me explain about our Target research

10
00:00:38,399 --> 00:00:40,260
domain

11
00:00:40,260 --> 00:00:43,200
our goal is to guarantee strong latency

12
00:00:43,200 --> 00:00:46,500
determinism here latency means the read

13
00:00:46,500 --> 00:00:50,100
latency that determines user experience

14
00:00:50,100 --> 00:00:52,860
by the way why is read latency closely

15
00:00:52,860 --> 00:00:55,920
related to the user experience

16
00:00:55,920 --> 00:00:58,140
let's think about the web page loading

17
00:00:58,140 --> 00:01:01,079
scenario if you cannot read the web page

18
00:01:01,079 --> 00:01:03,840
within your expected time you would like

19
00:01:03,840 --> 00:01:07,320
to give only one star for the score

20
00:01:07,320 --> 00:01:10,200
as more practical number Google reports

21
00:01:10,200 --> 00:01:12,479
that one second longer web page loading

22
00:01:12,479 --> 00:01:15,900
time loses 20 30 percent of users and

23
00:01:15,900 --> 00:01:18,540
Amazon reports that 100 milliseconds

24
00:01:18,540 --> 00:01:21,060
longer web page loading time loses one

25
00:01:21,060 --> 00:01:23,220
percent of Revenue

26
00:01:23,220 --> 00:01:25,979
does this work aims to achieve strong

27
00:01:25,979 --> 00:01:28,619
latency determinism for reads without

28
00:01:28,619 --> 00:01:31,619
long tail latency

29
00:01:31,619 --> 00:01:33,960
let's zoom in on our Target scenario

30
00:01:33,960 --> 00:01:36,299
with the Facebook work code

31
00:01:36,299 --> 00:01:38,460
when the client executes the Facebook

32
00:01:38,460 --> 00:01:39,960
application

33
00:01:39,960 --> 00:01:42,780
fronten tries to display the news feed

34
00:01:42,780 --> 00:01:44,220
to the client

35
00:01:44,220 --> 00:01:46,740
for this the front hand should access

36
00:01:46,740 --> 00:01:49,200
the back-end database to read the

37
00:01:49,200 --> 00:01:51,780
relationship information and media such

38
00:01:51,780 --> 00:01:54,600
as images and videos

39
00:01:54,600 --> 00:01:56,939
in this slide I will break down the

40
00:01:56,939 --> 00:01:59,759
latency into front-end time and back-end

41
00:01:59,759 --> 00:02:01,020
time

42
00:02:01,020 --> 00:02:03,659
as shown in the right the average news

43
00:02:03,659 --> 00:02:06,600
feed read latency is only 0.26

44
00:02:06,600 --> 00:02:08,098
milliseconds

45
00:02:08,098 --> 00:02:11,400
however at some point the client can

46
00:02:11,400 --> 00:02:14,099
suffer from 11 times longer read latency

47
00:02:14,099 --> 00:02:17,459
which can worsens the user experience

48
00:02:17,459 --> 00:02:20,400
by the way why does the unexpected long

49
00:02:20,400 --> 00:02:23,700
latency occur

50
00:02:23,700 --> 00:02:25,920
as shown in the graph we can realize

51
00:02:25,920 --> 00:02:29,160
that the unexpected long-term latency

52
00:02:29,160 --> 00:02:31,860
comes from the backend database not the

53
00:02:31,860 --> 00:02:33,720
front-end slide

54
00:02:33,720 --> 00:02:36,300
from now on let's check what back-end

55
00:02:36,300 --> 00:02:38,640
system looks like and what impacts long

56
00:02:38,640 --> 00:02:41,220
tail latency

57
00:02:41,220 --> 00:02:43,800
backend database usually adopts look

58
00:02:43,800 --> 00:02:46,200
structured merge key value stores such

59
00:02:46,200 --> 00:02:47,940
as Lux DV

60
00:02:47,940 --> 00:02:51,180
in the backend system the users read

61
00:02:51,180 --> 00:02:54,480
query is delayed by LSM KVs internet

62
00:02:54,480 --> 00:02:55,680
task

63
00:02:55,680 --> 00:02:58,260
in the next slide let's briefly go over

64
00:02:58,260 --> 00:03:02,819
the LSM cables internal task

65
00:03:02,819 --> 00:03:05,819
LSM KV consists of memory slide and

66
00:03:05,819 --> 00:03:08,640
storyside data structures in the memory

67
00:03:08,640 --> 00:03:10,800
side there is a data structure called

68
00:03:10,800 --> 00:03:11,940
mem table

69
00:03:11,940 --> 00:03:14,519
which can insert the key value pairs in

70
00:03:14,519 --> 00:03:17,340
an open only manner

71
00:03:17,340 --> 00:03:20,099
when the mem table is full it is changed

72
00:03:20,099 --> 00:03:22,019
to a read-only data structure called

73
00:03:22,019 --> 00:03:25,019
immutable mem table and it is flushed to

74
00:03:25,019 --> 00:03:26,760
storage in background

75
00:03:26,760 --> 00:03:29,700
and the flushed mem table is managed as

76
00:03:29,700 --> 00:03:32,280
SSD file

77
00:03:32,280 --> 00:03:35,400
this mem table flush is the first LSM

78
00:03:35,400 --> 00:03:37,860
KVs internet task that we have to keep

79
00:03:37,860 --> 00:03:40,220
in mind

80
00:03:40,440 --> 00:03:43,560
this slide LSM KV adopts multi-level

81
00:03:43,560 --> 00:03:46,200
architecture which is developer insert

82
00:03:46,200 --> 00:03:47,760
friendly

83
00:03:47,760 --> 00:03:49,980
when laboratory is full the

84
00:03:49,980 --> 00:03:52,200
corresponding SSD file moves to the next

85
00:03:52,200 --> 00:03:54,299
level level one

86
00:03:54,299 --> 00:03:57,299
if LSM KV is getting filled with key

87
00:03:57,299 --> 00:04:00,060
value pairs we cannot simply flush the

88
00:04:00,060 --> 00:04:02,040
main table

89
00:04:02,040 --> 00:04:04,860
we have to merge multiple SSD files

90
00:04:04,860 --> 00:04:08,519
across lsm3 labels such as level Drew

91
00:04:08,519 --> 00:04:12,239
and level 1. this SSD compaction is the

92
00:04:12,239 --> 00:04:15,360
last LSM KVs inter task that we also

93
00:04:15,360 --> 00:04:18,320
have to keep in mind

94
00:04:18,358 --> 00:04:21,120
then from now on let's check the impact

95
00:04:21,120 --> 00:04:24,120
of LSM kv's internet task

96
00:04:24,120 --> 00:04:26,340
by comparing them with a read-only

97
00:04:26,340 --> 00:04:28,380
performance which is colored in Orange

98
00:04:28,380 --> 00:04:30,479
in this graph

99
00:04:30,479 --> 00:04:33,000
by the way why does the read latency

100
00:04:33,000 --> 00:04:35,040
increase when we could run the read and

101
00:04:35,040 --> 00:04:37,500
write operation although the mem table

102
00:04:37,500 --> 00:04:40,860
of absorbs all the right operations

103
00:04:40,860 --> 00:04:43,320
in the storage size there is one more

104
00:04:43,320 --> 00:04:46,560
data structure called right ahead Road

105
00:04:46,560 --> 00:04:48,720
before keeping a key value pair in the

106
00:04:48,720 --> 00:04:50,940
memory we have to recover the history

107
00:04:50,940 --> 00:04:53,820
into the wire permanently

108
00:04:53,820 --> 00:04:56,160
after that we can insert the key value

109
00:04:56,160 --> 00:04:59,660
pair into the mem table

110
00:05:00,000 --> 00:05:02,639
as all right operations generates higher

111
00:05:02,639 --> 00:05:05,280
request rule forward it can also

112
00:05:05,280 --> 00:05:09,320
interfere with the read request

113
00:05:09,419 --> 00:05:11,940
when the number of puts increase mem

114
00:05:11,940 --> 00:05:14,639
table flush will occur as shown in graph

115
00:05:14,639 --> 00:05:17,160
main table flush Works since the user's

116
00:05:17,160 --> 00:05:19,680
read latency as high as three

117
00:05:19,680 --> 00:05:21,180
milliseconds

118
00:05:21,180 --> 00:05:24,240
moreover SSD file compaction also

119
00:05:24,240 --> 00:05:28,880
impacts users read latency significantly

120
00:05:29,280 --> 00:05:31,919
as a long tail latency comes from the

121
00:05:31,919 --> 00:05:35,820
interference of LSM kv's interior task

122
00:05:35,820 --> 00:05:38,400
several studies try to service users

123
00:05:38,400 --> 00:05:41,160
query as earlier as possible

124
00:05:41,160 --> 00:05:44,220
it reschedule or delay the LSM KVs

125
00:05:44,220 --> 00:05:46,620
internet task by leveraging the idle

126
00:05:46,620 --> 00:05:48,360
time

127
00:05:48,360 --> 00:05:51,060
however existing internet task

128
00:05:51,060 --> 00:05:53,460
scheduling or delaying the method is

129
00:05:53,460 --> 00:05:56,160
similar to patching the bump

130
00:05:56,160 --> 00:05:58,860
let's suppose that there is no user idle

131
00:05:58,860 --> 00:06:01,080
time and the mem table flush keeps

132
00:06:01,080 --> 00:06:04,740
delaying in this case LSM caves memory

133
00:06:04,740 --> 00:06:07,080
space is getting larger but we can

134
00:06:07,080 --> 00:06:09,660
ensure the latency determinism for the

135
00:06:09,660 --> 00:06:10,800
user query

136
00:06:10,800 --> 00:06:14,220
however when LSM KV reaches to the

137
00:06:14,220 --> 00:06:16,740
maximum memory capacity the bomb blows

138
00:06:16,740 --> 00:06:18,539
up

139
00:06:18,539 --> 00:06:21,000
in order to reclaim the memory capacity

140
00:06:21,000 --> 00:06:23,460
all the mem table should be flushed to

141
00:06:23,460 --> 00:06:24,840
LSM tree

142
00:06:24,840 --> 00:06:27,419
and it causes latency spikes for the

143
00:06:27,419 --> 00:06:30,180
user chorus

144
00:06:30,180 --> 00:06:33,060
not only for the lsmk reason third task

145
00:06:33,060 --> 00:06:36,060
user query can be interfered with SSD

146
00:06:36,060 --> 00:06:38,639
internet task as well this is the second

147
00:06:38,639 --> 00:06:41,940
root cause a long-ter latency

148
00:06:41,940 --> 00:06:43,860
if you look into the SSD Center

149
00:06:43,860 --> 00:06:46,800
architecture there is dram which is used

150
00:06:46,800 --> 00:06:49,020
to hide the long ride latency

151
00:06:49,020 --> 00:06:52,319
does SSD flushes 30 data into the net

152
00:06:52,319 --> 00:06:54,360
flash in the background

153
00:06:54,360 --> 00:06:56,699
as shown in graph we can check the DM

154
00:06:56,699 --> 00:06:59,340
flash increases read latency almost two

155
00:06:59,340 --> 00:07:00,960
times

156
00:07:00,960 --> 00:07:03,840
in addition to the iron flush SSD

157
00:07:03,840 --> 00:07:05,460
performs garbage collection in

158
00:07:05,460 --> 00:07:07,919
background to collect valid pages

159
00:07:07,919 --> 00:07:10,380
as garbage collection reads and writes

160
00:07:10,380 --> 00:07:13,560
multiple Pages it enters your users i o

161
00:07:13,560 --> 00:07:16,259
a lot and increase the read latency

162
00:07:16,259 --> 00:07:19,139
almost nine milliseconds

163
00:07:19,139 --> 00:07:21,599
moreover as this should perform the

164
00:07:21,599 --> 00:07:24,419
reclaim for the read Hub pages

165
00:07:24,419 --> 00:07:27,419
when a page is read a lot the British

166
00:07:27,419 --> 00:07:30,780
distribution is shifted to write as it

167
00:07:30,780 --> 00:07:33,240
can reduce the Saltair causes software

168
00:07:33,240 --> 00:07:36,180
error we have to rewrite the page

169
00:07:36,180 --> 00:07:39,240
read reclaim also interferes users read

170
00:07:39,240 --> 00:07:42,360
requests and increases it up to three

171
00:07:42,360 --> 00:07:44,880
milliseconds

172
00:07:44,880 --> 00:07:47,280
as a solution of SSD internal task

173
00:07:47,280 --> 00:07:49,560
handling is standard and being a

174
00:07:49,560 --> 00:07:51,900
protocol which is predictable latency

175
00:07:51,900 --> 00:07:53,460
mode interface

176
00:07:53,460 --> 00:07:56,759
PRM interface allows two device data on

177
00:07:56,759 --> 00:07:59,460
the line storage such as determines the

178
00:07:59,460 --> 00:08:01,919
window dt-win and non-deterministic

179
00:08:01,919 --> 00:08:04,020
window and the win

180
00:08:04,020 --> 00:08:06,240
assist internet task only can be

181
00:08:06,240 --> 00:08:08,940
performed during nd-win that's why d2ing

182
00:08:08,940 --> 00:08:11,220
can guarantee the deterministic latency

183
00:08:11,220 --> 00:08:13,680
to host

184
00:08:13,680 --> 00:08:16,979
however current PRM interface is just

185
00:08:16,979 --> 00:08:19,379
best effort contract and there is no

186
00:08:19,379 --> 00:08:21,660
detailed guideline for this which can

187
00:08:21,660 --> 00:08:24,000
make us hard to use it

188
00:08:24,000 --> 00:08:26,220
let's summarize what we went over until

189
00:08:26,220 --> 00:08:29,220
now let's go list scheduling or delaying

190
00:08:29,220 --> 00:08:32,458
the LSM KVs entire task can reduce tail

191
00:08:32,458 --> 00:08:35,219
light consists on what however it cannot

192
00:08:35,219 --> 00:08:37,020
fully eliminate eliminate the tail

193
00:08:37,020 --> 00:08:39,539
latency and delayed internet tasks

194
00:08:39,539 --> 00:08:42,599
should be performed at some point

195
00:08:42,599 --> 00:08:44,640
and handling access the internet task

196
00:08:44,640 --> 00:08:46,680
with PLM interface is good starting

197
00:08:46,680 --> 00:08:49,260
point to support Hardware level latency

198
00:08:49,260 --> 00:08:52,260
determinism however this is just best

199
00:08:52,260 --> 00:08:54,360
effort contract and there is no real

200
00:08:54,360 --> 00:08:56,160
prototype

201
00:08:56,160 --> 00:08:58,860
moreover in order to achieve the

202
00:08:58,860 --> 00:09:01,080
deterministic latency we have to store

203
00:09:01,080 --> 00:09:04,800
both LSM kv's entire task and SSD Center

204
00:09:04,800 --> 00:09:07,800
tasks however there is no solution for

205
00:09:07,800 --> 00:09:11,220
both of them at the same time

206
00:09:11,220 --> 00:09:14,459
those in this work we propose visual KV

207
00:09:14,459 --> 00:09:16,800
which is designed with closed

208
00:09:16,800 --> 00:09:19,140
collaboration between storage and host

209
00:09:19,140 --> 00:09:20,519
slides software

210
00:09:20,519 --> 00:09:23,160
with visual KV we can achieve storage

211
00:09:23,160 --> 00:09:26,000
latency determinism and it can reduce

212
00:09:26,000 --> 00:09:29,160
3.2 time shooter tail latency compared

213
00:09:29,160 --> 00:09:31,800
to the state-of-pr solution and can

214
00:09:31,800 --> 00:09:34,740
reduce 34 percent of average latency as

215
00:09:34,740 --> 00:09:36,360
well

216
00:09:36,360 --> 00:09:40,380
first let's check the visual KV Hardware

217
00:09:40,380 --> 00:09:43,560
our digital KV Hardware supports two two

218
00:09:43,560 --> 00:09:46,320
opportunities and three constraints

219
00:09:46,320 --> 00:09:48,720
first of all visual KV Hardware support

220
00:09:48,720 --> 00:09:52,019
space division opportunity for visual KV

221
00:09:52,019 --> 00:09:54,660
software by partitioning single device

222
00:09:54,660 --> 00:09:59,040
into multiple and nbm sets each NVM sets

223
00:09:59,040 --> 00:10:01,320
guarantee performance isolation at the

224
00:10:01,320 --> 00:10:03,600
heart rate level

225
00:10:03,600 --> 00:10:05,519
in addition to the space division

226
00:10:05,519 --> 00:10:08,399
opportunity visual KV Hardware provides

227
00:10:08,399 --> 00:10:10,940
time division Opportunity by enabling

228
00:10:10,940 --> 00:10:14,339
PLM interface per MBM set

229
00:10:14,339 --> 00:10:16,500
with this time division opportunity

230
00:10:16,500 --> 00:10:19,980
digital KV Hardware can be in two

231
00:10:19,980 --> 00:10:22,080
different performance Windows these look

232
00:10:22,080 --> 00:10:24,180
heavy Hardware enters to end the win

233
00:10:24,180 --> 00:10:27,060
when users that sends the set and doing

234
00:10:27,060 --> 00:10:29,940
comments while it enters the detailing

235
00:10:29,940 --> 00:10:33,660
when set detailing comments arrives

236
00:10:33,660 --> 00:10:35,220
not only for the time division

237
00:10:35,220 --> 00:10:36,420
opportunity

238
00:10:36,420 --> 00:10:39,120
but visual KV Hardware also reveals

239
00:10:39,120 --> 00:10:41,940
three PLM constraints that visual KV

240
00:10:41,940 --> 00:10:43,740
software must know

241
00:10:43,740 --> 00:10:46,380
the first constraint of PRM is right

242
00:10:46,380 --> 00:10:48,120
free on d2n

243
00:10:48,120 --> 00:10:51,060
although digital KV Hardware enters the

244
00:10:51,060 --> 00:10:52,920
detailing proponents window

245
00:10:52,920 --> 00:10:55,079
if user sends the right request during

246
00:10:55,079 --> 00:10:57,779
the twin visit KV Hardware automatically

247
00:10:57,779 --> 00:11:00,600
turns into enduring purpose window

248
00:11:00,600 --> 00:11:03,060
those the right after reads cannot enjoy

249
00:11:03,060 --> 00:11:06,839
the determinacy latency of d2in

250
00:11:06,839 --> 00:11:09,120
thus visual carry software should

251
00:11:09,120 --> 00:11:11,519
consider this country and serve read

252
00:11:11,519 --> 00:11:13,380
requests only during detailing

253
00:11:13,380 --> 00:11:15,899
performance window

254
00:11:15,899 --> 00:11:18,480
the second country of PLM is fair

255
00:11:18,480 --> 00:11:21,360
scheduling for repairing windows let's

256
00:11:21,360 --> 00:11:24,060
suppose our Target application requires

257
00:11:24,060 --> 00:11:26,820
High Court per second and wants to stay

258
00:11:26,820 --> 00:11:28,680
in detailing for a long time

259
00:11:28,680 --> 00:11:31,680
however visual KV Hardware can stay in

260
00:11:31,680 --> 00:11:33,899
detailing until it reaches to maximum

261
00:11:33,899 --> 00:11:37,019
determine time called Max detailing

262
00:11:37,019 --> 00:11:38,720
then what about sending set between

263
00:11:38,720 --> 00:11:42,240
again right after and leaving entrance

264
00:11:42,240 --> 00:11:45,240
in fact it does not work since ending

265
00:11:45,240 --> 00:11:47,459
should be staying in the state at least

266
00:11:47,459 --> 00:11:50,100
pre-configure minimum time called mean

267
00:11:50,100 --> 00:11:51,959
and doing

268
00:11:51,959 --> 00:11:54,240
those visual KV slow tears should

269
00:11:54,240 --> 00:11:56,160
consider this constraint into the device

270
00:11:56,160 --> 00:11:59,160
State scheduling note that the twin time

271
00:11:59,160 --> 00:12:01,320
can be shorter than the max between

272
00:12:01,320 --> 00:12:03,540
while ending time can be larger than

273
00:12:03,540 --> 00:12:05,519
mean enduring

274
00:12:05,519 --> 00:12:08,100
the last constraint of PLM is device

275
00:12:08,100 --> 00:12:09,420
locked down

276
00:12:09,420 --> 00:12:11,579
although we send the set between comment

277
00:12:11,579 --> 00:12:14,040
to visual KV Hardware it does not turn

278
00:12:14,040 --> 00:12:16,560
into determined immediate immediately

279
00:12:16,560 --> 00:12:19,440
after a device lockdown time digital KV

280
00:12:19,440 --> 00:12:22,019
Hardware starts to detune and can serve

281
00:12:22,019 --> 00:12:24,959
usually requests

282
00:12:24,959 --> 00:12:27,360
with the two opportunities and three

283
00:12:27,360 --> 00:12:29,519
constraints the digital KV Hardware

284
00:12:29,519 --> 00:12:33,240
support let's design visual KV software

285
00:12:33,240 --> 00:12:36,000
our digital KV software performs data

286
00:12:36,000 --> 00:12:38,880
placement data device day scheduling and

287
00:12:38,880 --> 00:12:40,800
recap scheduling

288
00:12:40,800 --> 00:12:43,500
first let's talk about how visual KV

289
00:12:43,500 --> 00:12:47,459
software places LSM KV data and metadata

290
00:12:47,459 --> 00:12:49,620
by leveraging the visual KV Hardware

291
00:12:49,620 --> 00:12:52,639
space division opportunity visual cable

292
00:12:52,639 --> 00:12:56,820
software stores LSM kv's metadata into

293
00:12:56,820 --> 00:12:59,820
separated nbm set while the remained

294
00:12:59,820 --> 00:13:02,820
ambient sets are used for LSM KVs data

295
00:13:02,820 --> 00:13:04,920
such as SSD files

296
00:13:04,920 --> 00:13:09,060
we'll call each MBM set as kvsat and

297
00:13:09,060 --> 00:13:11,040
meta set

298
00:13:11,040 --> 00:13:13,680
as metadata is isolated from key value

299
00:13:13,680 --> 00:13:17,339
data LSM KV can perform the data logging

300
00:13:17,339 --> 00:13:18,779
whenever you want

301
00:13:18,779 --> 00:13:22,079
also LSM KVs data can be free from the

302
00:13:22,079 --> 00:13:25,079
metadata are your interferences

303
00:13:25,079 --> 00:13:28,079
secondly let's talk about how digital KV

304
00:13:28,079 --> 00:13:30,600
software schedules the device States

305
00:13:30,600 --> 00:13:33,600
the goal of visual KV is to support the

306
00:13:33,600 --> 00:13:36,779
deterministic latency 24 7. however

307
00:13:36,779 --> 00:13:39,420
based on the plm's fair scheduling

308
00:13:39,420 --> 00:13:42,120
constraint single MBM set cannot support

309
00:13:42,120 --> 00:13:45,839
the determination latency 24 7.

310
00:13:45,839 --> 00:13:49,380
to serve this PLM limitation visual KV

311
00:13:49,380 --> 00:13:51,240
software adopt or a laboratory

312
00:13:51,240 --> 00:13:53,820
technology that can grow multiple KV

313
00:13:53,820 --> 00:13:55,620
sets into single volume

314
00:13:55,620 --> 00:13:59,100
when data comes visual KV software makes

315
00:13:59,100 --> 00:14:02,160
it as two chunks and calculates the

316
00:14:02,160 --> 00:14:04,440
parity of two chunks and store them

317
00:14:04,440 --> 00:14:07,500
across multiple KB sets

318
00:14:07,500 --> 00:14:09,720
after that if it's scheduled device

319
00:14:09,720 --> 00:14:12,600
state by considering other KV sets

320
00:14:12,600 --> 00:14:15,000
device date we can guarantee the

321
00:14:15,000 --> 00:14:18,120
determinants the latency 24 7. as shown

322
00:14:18,120 --> 00:14:21,060
in this slide is located schedules the

323
00:14:21,060 --> 00:14:25,880
ending State and most only one KVA set

324
00:14:26,880 --> 00:14:30,000
this is the target KV set is in and the

325
00:14:30,000 --> 00:14:32,639
win digital KV so Theory contract data

326
00:14:32,639 --> 00:14:36,120
by Levering other two KV sets data

327
00:14:36,120 --> 00:14:38,940
however this state device State

328
00:14:38,940 --> 00:14:41,100
scheduling is now correctly working in

329
00:14:41,100 --> 00:14:44,040
PLM we have to modify it

330
00:14:44,040 --> 00:14:46,139
by considering the device lockdown

331
00:14:46,139 --> 00:14:48,959
constraint we have to guarantee only one

332
00:14:48,959 --> 00:14:53,940
KV set is an ND win or device lockdown

333
00:14:53,940 --> 00:14:56,639
and last let's talk about how visual K

334
00:14:56,639 --> 00:14:58,560
resolved Terror schedules are your

335
00:14:58,560 --> 00:15:01,260
requests this is KV software schedules

336
00:15:01,260 --> 00:15:04,680
LSM KVs IR request to ND win while

337
00:15:04,680 --> 00:15:08,220
scheduling users iot pass to determine

338
00:15:08,220 --> 00:15:11,220
for latency determinism to give hint to

339
00:15:11,220 --> 00:15:14,399
the bezel Kiwi software we modify lsonkv

340
00:15:14,399 --> 00:15:17,279
by adding IO priority to each client's

341
00:15:17,279 --> 00:15:19,860
thread and enter task threads

342
00:15:19,860 --> 00:15:22,260
then now let's Implement digital KV

343
00:15:22,260 --> 00:15:25,260
hardware and analyzes characteristics

344
00:15:25,260 --> 00:15:28,380
here I summarize our bjkv Hardware

345
00:15:28,380 --> 00:15:30,959
specification the total capacity of

346
00:15:30,959 --> 00:15:33,180
bezel KV Hardware is to terabyte and

347
00:15:33,180 --> 00:15:35,519
totally has eight channels

348
00:15:35,519 --> 00:15:37,740
our digital KV Hardware currently

349
00:15:37,740 --> 00:15:40,560
supports 4 MBM set which can manage the

350
00:15:40,560 --> 00:15:43,440
device State independently as our nbm

351
00:15:43,440 --> 00:15:45,779
stats have their own device State the

352
00:15:45,779 --> 00:15:48,839
host can control visual KV Hardware in a

353
00:15:48,839 --> 00:15:51,360
fine-grained manner then let's Implement

354
00:15:51,360 --> 00:15:54,060
bjkv Hardware step by step

355
00:15:54,060 --> 00:15:56,220
the key idea of partitioning is

356
00:15:56,220 --> 00:15:58,740
minimizing Hardware resource sharing in

357
00:15:58,740 --> 00:16:01,019
this slide I will assume bjkb Hardware

358
00:16:01,019 --> 00:16:03,959
only supports 2 MBM sets for Shaco

359
00:16:03,959 --> 00:16:05,519
Burberry

360
00:16:05,519 --> 00:16:07,680
the implementation of partitioning is

361
00:16:07,680 --> 00:16:09,320
not difficult

362
00:16:09,320 --> 00:16:12,300
separates physical functions cores onto

363
00:16:12,300 --> 00:16:15,420
memory interior dram and Flash channels

364
00:16:15,420 --> 00:16:18,240
based on mbm's ID the activated hardware

365
00:16:18,240 --> 00:16:20,519
resources are different

366
00:16:20,519 --> 00:16:22,980
that's why we can isolate both heart

367
00:16:22,980 --> 00:16:25,320
performance and device State per ambient

368
00:16:25,320 --> 00:16:26,339
sets

369
00:16:26,339 --> 00:16:29,760
now you now you wonder the MBM sets are

370
00:16:29,760 --> 00:16:32,519
isolated or not in this slide I will

371
00:16:32,519 --> 00:16:35,279
show you our Hardware validation widget

372
00:16:35,279 --> 00:16:37,920
first we group two nbm sets in a single

373
00:16:37,920 --> 00:16:40,199
storage volume and we could run the

374
00:16:40,199 --> 00:16:42,779
readwork code colored in blue and white

375
00:16:42,779 --> 00:16:45,800
record colored in red in the right side

376
00:16:45,800 --> 00:16:49,560
great great color grab shows the re read

377
00:16:49,560 --> 00:16:52,380
worker's latency a shown in graph the

378
00:16:52,380 --> 00:16:54,420
read latency exhibits the long tail

379
00:16:54,420 --> 00:16:57,120
latency as much as 2 milliseconds due to

380
00:16:57,120 --> 00:16:59,339
the right request interference

381
00:16:59,339 --> 00:17:02,940
now now let's isolate the readwork code

382
00:17:02,940 --> 00:17:05,400
and right recruit readwork crew uses and

383
00:17:05,400 --> 00:17:07,439
beam set one why arrival could use the

384
00:17:07,439 --> 00:17:09,599
same means it too then let's check the

385
00:17:09,599 --> 00:17:11,699
read latency behaviors with blue color

386
00:17:11,699 --> 00:17:13,980
graph as shown in graph there is no

387
00:17:13,980 --> 00:17:17,160
long-term latency and all experience

388
00:17:17,160 --> 00:17:19,679
similar latency

389
00:17:19,679 --> 00:17:21,599
as you talked as we successfully

390
00:17:21,599 --> 00:17:23,880
Implement multiple mbms that let's

391
00:17:23,880 --> 00:17:27,119
integrate PLM interface per MBM stats

392
00:17:27,119 --> 00:17:30,059
enabling PLM interface is also not

393
00:17:30,059 --> 00:17:32,700
difficult implementation each MBM cell

394
00:17:32,700 --> 00:17:35,340
has two requests queues such as Legacy

395
00:17:35,340 --> 00:17:38,039
IQ and integer job queue

396
00:17:38,039 --> 00:17:40,799
Lego creoq managers are your request

397
00:17:40,799 --> 00:17:43,500
comes from host while internet queue

398
00:17:43,500 --> 00:17:46,080
only manages IO requests comes from the

399
00:17:46,080 --> 00:17:49,380
SSD firmware if device status and dtwin

400
00:17:49,380 --> 00:17:51,660
are your requesting Legacy ioq or

401
00:17:51,660 --> 00:17:55,020
service if the if if device status and

402
00:17:55,020 --> 00:17:57,000
and doing are your requests in both

403
00:17:57,000 --> 00:17:59,640
Legacy ioq and internal job QR service

404
00:17:59,640 --> 00:18:02,760
that's why ndwin does not guarantee the

405
00:18:02,760 --> 00:18:06,179
deterministic latency for host

406
00:18:06,179 --> 00:18:09,539
from now on our reveal 3 PLM constraint

407
00:18:09,539 --> 00:18:11,520
or behavior based on our Hardware

408
00:18:11,520 --> 00:18:13,919
prototype let's check from the first

409
00:18:13,919 --> 00:18:14,820
country

410
00:18:14,820 --> 00:18:17,039
our digital KV Hardware automatically

411
00:18:17,039 --> 00:18:19,140
turns into ND win when there is a right

412
00:18:19,140 --> 00:18:22,500
request during detailing however if user

413
00:18:22,500 --> 00:18:25,020
insurers write free on detailing our

414
00:18:25,020 --> 00:18:27,179
visual KV Hardware guarantees read

415
00:18:27,179 --> 00:18:30,120
latency under 200 microseconds

416
00:18:30,120 --> 00:18:31,919
let's move on to the second constraint

417
00:18:31,919 --> 00:18:34,380
as shown in this graph we can observe

418
00:18:34,380 --> 00:18:36,380
Fair scheduling of PLM Windows

419
00:18:36,380 --> 00:18:39,299
specifically the maximum dt1 is 16

420
00:18:39,299 --> 00:18:41,580
seconds and minimum and the win is 4

421
00:18:41,580 --> 00:18:45,539
seconds in our budget KV Hardware

422
00:18:45,539 --> 00:18:48,299
to check the last constraint of PLM we

423
00:18:48,299 --> 00:18:50,760
analyze device lockdown times varying

424
00:18:50,760 --> 00:18:53,220
based on how data were written in the

425
00:18:53,220 --> 00:18:55,799
previous ND win and as shown in graph it

426
00:18:55,799 --> 00:18:58,020
is sufficient sufficient for the host to

427
00:18:58,020 --> 00:19:01,380
hold the data by under 20 milliseconds

428
00:19:01,380 --> 00:19:04,260
here is the summary of rebuild the PLM

429
00:19:04,260 --> 00:19:06,600
behaviors when users want to use the

430
00:19:06,600 --> 00:19:09,660
prmi naval SSD they have to consider

431
00:19:09,660 --> 00:19:12,480
these values for the device or we can

432
00:19:12,480 --> 00:19:14,400
scheduling

433
00:19:14,400 --> 00:19:16,559
beforehand my talk I will show you the

434
00:19:16,559 --> 00:19:18,799
representative evaluation result

435
00:19:18,799 --> 00:19:20,700
compared to the state-of-the-art

436
00:19:20,700 --> 00:19:23,340
solution our digital KV reduces the long

437
00:19:23,340 --> 00:19:26,400
tail latency 3.2 times also we can

438
00:19:26,400 --> 00:19:29,820
reduce the average latency as much as 34

439
00:19:29,820 --> 00:19:31,200
percent

440
00:19:31,200 --> 00:19:33,419
the proposed visual KV isn't hardware

441
00:19:33,419 --> 00:19:35,880
and solitary co-design framework that

442
00:19:35,880 --> 00:19:38,760
eliminates long tail with strong latency

443
00:19:38,760 --> 00:19:41,580
determinism we implement the workforce

444
00:19:41,580 --> 00:19:44,340
PLM interface prototype also supports

445
00:19:44,340 --> 00:19:47,760
host ISO terraform prototype furthermore

446
00:19:47,760 --> 00:19:50,100
we reveal the PM constraints that have

447
00:19:50,100 --> 00:19:52,080
never discussed before

448
00:19:52,080 --> 00:19:54,000
thank you for your listening and if you

449
00:19:54,000 --> 00:19:57,559
have any questions fully ask me

