1
00:00:13,120 --> 00:00:14,960
all right thank you

2
00:00:14,960 --> 00:00:17,279
and hello my name is lucas werling and

3
00:00:17,279 --> 00:00:19,520
i'm going to present to you winter

4
00:00:19,520 --> 00:00:21,279
automatic non-volatile memory crash

5
00:00:21,279 --> 00:00:23,840
consistency testing for full systems

6
00:00:23,840 --> 00:00:25,519
this is joint work with my student

7
00:00:25,519 --> 00:00:27,680
samuel caldwellis and my advisor frank

8
00:00:27,680 --> 00:00:30,480
bellusa

9
00:00:30,480 --> 00:00:32,640
to start i want to assert that crash

10
00:00:32,640 --> 00:00:35,280
consistency is a hard problem

11
00:00:35,280 --> 00:00:37,840
the system may crash at any point during

12
00:00:37,840 --> 00:00:40,399
its execution for example due to a power

13
00:00:40,399 --> 00:00:41,440
failure

14
00:00:41,440 --> 00:00:43,840
and the goal of any software running on

15
00:00:43,840 --> 00:00:46,320
the system that holds state is then

16
00:00:46,320 --> 00:00:49,280
after restart to recover a semantically

17
00:00:49,280 --> 00:00:51,920
correct state that is of course as close

18
00:00:51,920 --> 00:00:53,600
as possible to the state before the

19
00:00:53,600 --> 00:00:55,840
system crash

20
00:00:55,840 --> 00:00:57,920
this is a general problem that got new

21
00:00:57,920 --> 00:00:59,280
attention with the introduction of

22
00:00:59,280 --> 00:01:00,879
non-volatile memory

23
00:01:00,879 --> 00:01:02,559
non-volatile memory is part of the

24
00:01:02,559 --> 00:01:05,119
memory hierarchy as shown here on the

25
00:01:05,119 --> 00:01:06,799
right

26
00:01:06,799 --> 00:01:08,479
and in contrast to the previous

27
00:01:08,479 --> 00:01:11,600
secondary storage it is not accessed

28
00:01:11,600 --> 00:01:12,880
clockwise

29
00:01:12,880 --> 00:01:15,439
but directly with read and write

30
00:01:15,439 --> 00:01:17,600
store instructions

31
00:01:17,600 --> 00:01:19,600
that also go through the normal memory

32
00:01:19,600 --> 00:01:23,200
hierarchy including registers and caches

33
00:01:23,200 --> 00:01:25,680
of course the caches are still volatile

34
00:01:25,680 --> 00:01:27,439
so the developers need to introduce

35
00:01:27,439 --> 00:01:28,960
cache flashes

36
00:01:28,960 --> 00:01:31,759
as well as memory fences to ensure that

37
00:01:31,759 --> 00:01:33,280
any data

38
00:01:33,280 --> 00:01:35,040
reaches the non-volatile memory in the

39
00:01:35,040 --> 00:01:38,439
correct order

40
00:01:40,320 --> 00:01:42,799
all of these cache flashes and memory

41
00:01:42,799 --> 00:01:45,840
fences do not actually have an effect on

42
00:01:45,840 --> 00:01:47,920
normal execution

43
00:01:47,920 --> 00:01:50,399
and any bugs would only show if decision

44
00:01:50,399 --> 00:01:52,479
actually crashes and after restart it

45
00:01:52,479 --> 00:01:54,880
holds the wrong state

46
00:01:54,880 --> 00:01:55,759
so

47
00:01:55,759 --> 00:01:56,799
this means

48
00:01:56,799 --> 00:01:59,119
that we need special tools to test crash

49
00:01:59,119 --> 00:02:01,520
consistency since we cannot see it

50
00:02:01,520 --> 00:02:03,840
otherwise

51
00:02:03,840 --> 00:02:05,920
so when we are test when we are writing

52
00:02:05,920 --> 00:02:08,878
an nvm file system of our own

53
00:02:08,878 --> 00:02:10,800
we looked at the available tools for

54
00:02:10,800 --> 00:02:12,400
crash consistency testing for

55
00:02:12,400 --> 00:02:14,000
non-volatile memory

56
00:02:14,000 --> 00:02:16,239
and we found that none of them are

57
00:02:16,239 --> 00:02:19,599
really easily adaptable for testing file

58
00:02:19,599 --> 00:02:22,400
systems that run in a kernel setting we

59
00:02:22,400 --> 00:02:25,599
identified three main reasons for that

60
00:02:25,599 --> 00:02:27,680
the first reason

61
00:02:27,680 --> 00:02:29,760
is that a lot of the tools rely on

62
00:02:29,760 --> 00:02:33,120
manual annotation of sites where you do

63
00:02:33,120 --> 00:02:35,120
memory fences and

64
00:02:35,120 --> 00:02:37,360
cache flashes

65
00:02:37,360 --> 00:02:39,840
but these are hard to introduce in a

66
00:02:39,840 --> 00:02:41,519
kernel setting where you often only

67
00:02:41,519 --> 00:02:43,200
control your own kernel module with the

68
00:02:43,200 --> 00:02:45,360
file system but still need to interact

69
00:02:45,360 --> 00:02:47,840
with the rest of the kernel

70
00:02:47,840 --> 00:02:48,879
second

71
00:02:48,879 --> 00:02:50,720
symbolic execution and related

72
00:02:50,720 --> 00:02:52,959
techniques are great for understanding

73
00:02:52,959 --> 00:02:55,360
what the code is doing but we found it

74
00:02:55,360 --> 00:02:58,000
hard to apply to kernel code since most

75
00:02:58,000 --> 00:03:00,480
of it is written for user space code

76
00:03:00,480 --> 00:03:01,599
setting

77
00:03:01,599 --> 00:03:03,360
and we found especially for file systems

78
00:03:03,360 --> 00:03:06,319
that the interaction between

79
00:03:06,319 --> 00:03:08,000
between user's base code and kernel's

80
00:03:08,000 --> 00:03:10,319
base code is important for crash

81
00:03:10,319 --> 00:03:12,319
consistency

82
00:03:12,319 --> 00:03:15,200
finally some of these tools rely on

83
00:03:15,200 --> 00:03:18,959
heuristics to detect bugs such as what

84
00:03:18,959 --> 00:03:22,319
is happening when the program ends

85
00:03:22,319 --> 00:03:24,000
this is of course limited to certain

86
00:03:24,000 --> 00:03:26,400
types of bugs and these works generally

87
00:03:26,400 --> 00:03:28,319
were written with

88
00:03:28,319 --> 00:03:30,879
user space software in mind and not with

89
00:03:30,879 --> 00:03:32,879
kernel file systems

90
00:03:32,879 --> 00:03:35,680
so we set out to write our own tool

91
00:03:35,680 --> 00:03:37,120
called winter

92
00:03:37,120 --> 00:03:38,959
that captures the full system in a

93
00:03:38,959 --> 00:03:40,799
virtual machine and also features

94
00:03:40,799 --> 00:03:43,360
automatic testing for crash consistency

95
00:03:43,360 --> 00:03:44,840
properties such as

96
00:03:44,840 --> 00:03:47,440
atomicity we also contribute the first

97
00:03:47,440 --> 00:03:49,519
analysis of

98
00:03:49,519 --> 00:03:52,080
three file systems written for

99
00:03:52,080 --> 00:03:54,480
non-volatile memory which are nova novo

100
00:03:54,480 --> 00:03:57,920
fortis and pmfs which are all

101
00:03:57,920 --> 00:04:01,798
previous research projects

102
00:04:02,159 --> 00:04:03,439
and i want to

103
00:04:03,439 --> 00:04:05,120
start looking into winter by giving an

104
00:04:05,120 --> 00:04:07,920
overview of all its components

105
00:04:07,920 --> 00:04:10,560
there are three main components

106
00:04:10,560 --> 00:04:13,120
the tracer the crash image generator and

107
00:04:13,120 --> 00:04:15,519
the tester

108
00:04:15,519 --> 00:04:18,320
the tracer gets as input a virtual

109
00:04:18,320 --> 00:04:20,320
machine image with the software that we

110
00:04:20,320 --> 00:04:21,759
want to test

111
00:04:21,759 --> 00:04:23,680
and in that virtual machine it runs a

112
00:04:23,680 --> 00:04:25,199
certain test case

113
00:04:25,199 --> 00:04:28,240
and while the test case runs it traces

114
00:04:28,240 --> 00:04:30,639
all interaction with non-volatile memory

115
00:04:30,639 --> 00:04:34,000
including all memory writes

116
00:04:34,000 --> 00:04:37,600
cache flashes and memory fences

117
00:04:37,600 --> 00:04:39,840
once tracing has finished we have a

118
00:04:39,840 --> 00:04:42,479
trace file which is the input for the

119
00:04:42,479 --> 00:04:44,320
crash image generator

120
00:04:44,320 --> 00:04:46,080
the question image generator replays the

121
00:04:46,080 --> 00:04:47,280
trace

122
00:04:47,280 --> 00:04:50,080
step by step and reproduces the

123
00:04:50,080 --> 00:04:51,919
non-volatile memory as well as cache

124
00:04:51,919 --> 00:04:54,400
contents so with non-volatile memory

125
00:04:54,400 --> 00:04:56,800
contents we always mean everything that

126
00:04:56,800 --> 00:04:58,560
is fully persisted at that point in the

127
00:04:58,560 --> 00:05:00,240
trace because it has already been

128
00:05:00,240 --> 00:05:02,080
flushed out of the caches

129
00:05:02,080 --> 00:05:05,360
and cache contents are everything

130
00:05:05,360 --> 00:05:08,000
that might be lost if the system crashes

131
00:05:08,000 --> 00:05:10,400
at that point so in this example we have

132
00:05:10,400 --> 00:05:12,800
three blue writes and these of course

133
00:05:12,800 --> 00:05:15,039
would first be in the volatile caches

134
00:05:15,039 --> 00:05:17,840
and might be lost

135
00:05:17,840 --> 00:05:20,400
from these contents the question which

136
00:05:20,400 --> 00:05:22,240
generator generates crash images of

137
00:05:22,240 --> 00:05:23,280
course

138
00:05:23,280 --> 00:05:26,320
which are possible nvm condoms if the

139
00:05:26,320 --> 00:05:29,039
program crashes at that point

140
00:05:29,039 --> 00:05:32,479
during the program execution

141
00:05:33,600 --> 00:05:35,120
of course there's this issue that if

142
00:05:35,120 --> 00:05:36,960
there are a lot of rights

143
00:05:36,960 --> 00:05:38,720
then this might lead to state explosion

144
00:05:38,720 --> 00:05:40,639
and we might try to generate way too

145
00:05:40,639 --> 00:05:42,639
many rights that we cannot handle

146
00:05:42,639 --> 00:05:45,840
anymore so we employ a heuristic to cut

147
00:05:45,840 --> 00:05:49,520
down on that more on that later

148
00:05:49,520 --> 00:05:51,120
just to illustrate how this would

149
00:05:51,120 --> 00:05:52,960
continue here

150
00:05:52,960 --> 00:05:55,360
for the next part of the trace we had a

151
00:05:55,360 --> 00:05:57,759
memory flush of these so now all the

152
00:05:57,759 --> 00:05:59,919
various cache contents are now fully

153
00:05:59,919 --> 00:06:01,039
persisted

154
00:06:01,039 --> 00:06:03,680
and at the next step only the new writes

155
00:06:03,680 --> 00:06:05,120
would be considered for crash image

156
00:06:05,120 --> 00:06:06,800
generation

157
00:06:06,800 --> 00:06:10,319
the final component the tester

158
00:06:10,319 --> 00:06:12,319
extracts the semantic states from each

159
00:06:12,319 --> 00:06:14,000
of these crash images so that we

160
00:06:14,000 --> 00:06:16,160
understand what is happening

161
00:06:16,160 --> 00:06:18,720
and it can automatically derive certain

162
00:06:18,720 --> 00:06:20,560
crash consistency properties or detect

163
00:06:20,560 --> 00:06:22,800
crash consistency properties such as

164
00:06:22,800 --> 00:06:25,120
atomicity

165
00:06:25,120 --> 00:06:26,880
i now want to talk about each of these

166
00:06:26,880 --> 00:06:29,840
components in a with a bit more detail

167
00:06:29,840 --> 00:06:31,840
starting with the tracer

168
00:06:31,840 --> 00:06:34,400
we built a tracer on the panda full

169
00:06:34,400 --> 00:06:36,000
system emulator

170
00:06:36,000 --> 00:06:39,120
which uses binary translation

171
00:06:39,120 --> 00:06:41,120
and as part of the translation it can

172
00:06:41,120 --> 00:06:43,919
hook arbitrary instructions which we use

173
00:06:43,919 --> 00:06:46,800
to trace memory accesses as well as all

174
00:06:46,800 --> 00:06:49,600
instructions that perform cache flashes

175
00:06:49,600 --> 00:06:52,160
and memory fences

176
00:06:52,160 --> 00:06:55,039
we also implement hyper calls

177
00:06:55,039 --> 00:06:56,720
to signal

178
00:06:56,720 --> 00:06:59,919
where a test case starts and ends

179
00:06:59,919 --> 00:07:02,080
within the trace so that we can

180
00:07:02,080 --> 00:07:03,759
specifically look into that part of the

181
00:07:03,759 --> 00:07:07,440
trace for detecting bugs

182
00:07:07,440 --> 00:07:10,240
to aid the developer in understanding

183
00:07:10,240 --> 00:07:12,160
why bugs are happening

184
00:07:12,160 --> 00:07:14,560
we also associate metadata with each

185
00:07:14,560 --> 00:07:17,039
trace entry including a stack trace of

186
00:07:17,039 --> 00:07:19,440
the virtual machine execution at the

187
00:07:19,440 --> 00:07:20,720
point where the trace entry was

188
00:07:20,720 --> 00:07:23,360
generated

189
00:07:23,440 --> 00:07:25,919
the output of the tracer is a single

190
00:07:25,919 --> 00:07:28,000
sequential trace file

191
00:07:28,000 --> 00:07:29,919
in summary the tracer works with

192
00:07:29,919 --> 00:07:32,240
arbitrary unmodified software

193
00:07:32,240 --> 00:07:33,840
including kernel software that runs in

194
00:07:33,840 --> 00:07:36,638
the virtual machine

195
00:07:37,360 --> 00:07:39,440
the crash image generator takes this

196
00:07:39,440 --> 00:07:42,000
trace file as an input

197
00:07:42,000 --> 00:07:45,039
and uses it to

198
00:07:45,039 --> 00:07:47,440
to derive nvm and cache contents during

199
00:07:47,440 --> 00:07:49,840
the memory trace and at each fence it

200
00:07:49,840 --> 00:07:52,160
generates crash images as described

201
00:07:52,160 --> 00:07:54,560
before

202
00:07:55,039 --> 00:07:57,280
this includes the happy path image where

203
00:07:57,280 --> 00:07:59,759
every right is persisted and no data is

204
00:07:59,759 --> 00:08:00,720
lost

205
00:08:00,720 --> 00:08:02,080
but of course we also have to look at

206
00:08:02,080 --> 00:08:04,639
subsets of rights

207
00:08:04,639 --> 00:08:08,080
and specifically for the file systems we

208
00:08:08,080 --> 00:08:09,840
looked into

209
00:08:09,840 --> 00:08:10,639
we

210
00:08:10,639 --> 00:08:13,280
soon encountered the problem that in

211
00:08:13,280 --> 00:08:15,360
some cases there are way too many

212
00:08:15,360 --> 00:08:18,080
modified cache lines at some

213
00:08:18,080 --> 00:08:19,599
at some fences

214
00:08:19,599 --> 00:08:21,919
so it's for example innova we observed

215
00:08:21,919 --> 00:08:24,879
up to 512 modified cache lines for the

216
00:08:24,879 --> 00:08:27,120
simple file system operations that we

217
00:08:27,120 --> 00:08:28,240
tested

218
00:08:28,240 --> 00:08:30,000
and this immediately leads to state

219
00:08:30,000 --> 00:08:32,640
explosion and

220
00:08:32,640 --> 00:08:34,479
it is not viable to generate all

221
00:08:34,479 --> 00:08:37,839
possible crash images here

222
00:08:38,000 --> 00:08:40,399
however we observed that

223
00:08:40,399 --> 00:08:42,958
all the file system and i assume most

224
00:08:42,958 --> 00:08:46,160
nvm software in general uses journaling

225
00:08:46,160 --> 00:08:47,839
and other techniques such as log

226
00:08:47,839 --> 00:08:50,080
structuring to actually write any

227
00:08:50,080 --> 00:08:51,600
important data

228
00:08:51,600 --> 00:08:53,920
and this generally happens in two steps

229
00:08:53,920 --> 00:08:56,320
the first step is to write a journal

230
00:08:56,320 --> 00:08:57,839
entry out

231
00:08:57,839 --> 00:09:00,240
to memory and this can be of course

232
00:09:00,240 --> 00:09:02,800
arbitrary large

233
00:09:02,800 --> 00:09:04,880
but only after it is fully flushed out

234
00:09:04,880 --> 00:09:07,279
and there has been a memory fence it is

235
00:09:07,279 --> 00:09:09,279
marked valid in the second step which is

236
00:09:09,279 --> 00:09:12,000
usually just a very small write that's a

237
00:09:12,000 --> 00:09:13,600
single bit to

238
00:09:13,600 --> 00:09:15,040
valid

239
00:09:15,040 --> 00:09:17,680
and in case of a crash the recovery

240
00:09:17,680 --> 00:09:20,320
process will always ignore incomplete

241
00:09:20,320 --> 00:09:23,600
journal entries and

242
00:09:23,600 --> 00:09:25,920
thus will not be them at all so it is

243
00:09:25,920 --> 00:09:28,399
not useful to generate crash images for

244
00:09:28,399 --> 00:09:30,320
incomplete journal

245
00:09:30,320 --> 00:09:32,080
entries

246
00:09:32,080 --> 00:09:34,320
but how can we detect these

247
00:09:34,320 --> 00:09:37,839
incomplete journal entries

248
00:09:37,920 --> 00:09:40,000
and the idea that we are following here

249
00:09:40,000 --> 00:09:41,519
is to

250
00:09:41,519 --> 00:09:42,640
trace

251
00:09:42,640 --> 00:09:45,040
reads to the non-volatile memory during

252
00:09:45,040 --> 00:09:47,200
the recovery process

253
00:09:47,200 --> 00:09:50,080
and so the way we are doing this this is

254
00:09:50,080 --> 00:09:51,120
that we

255
00:09:51,120 --> 00:09:52,399
take the

256
00:09:52,399 --> 00:09:54,720
nvm contents at

257
00:09:54,720 --> 00:09:56,240
the memory fence

258
00:09:56,240 --> 00:09:58,880
and combine it to one single

259
00:09:58,880 --> 00:10:01,680
image as shown here like the happy path

260
00:10:01,680 --> 00:10:03,600
image basically with all the

261
00:10:03,600 --> 00:10:05,440
unpersisted write

262
00:10:05,440 --> 00:10:07,600
included we load that into a virtual

263
00:10:07,600 --> 00:10:10,399
machine and run the recovery code so

264
00:10:10,399 --> 00:10:12,640
this would usually

265
00:10:12,640 --> 00:10:14,720
be a file system checker

266
00:10:14,720 --> 00:10:16,720
but for the nvm file systems we just

267
00:10:16,720 --> 00:10:20,240
have to mount the file system

268
00:10:21,040 --> 00:10:23,040
from the tray streets

269
00:10:23,040 --> 00:10:25,120
and we then know which parts of the

270
00:10:25,120 --> 00:10:27,519
image has have been read and which

271
00:10:27,519 --> 00:10:28,959
haven't been

272
00:10:28,959 --> 00:10:31,440
and we can then compare this again to

273
00:10:31,440 --> 00:10:32,640
the

274
00:10:32,640 --> 00:10:35,120
volatile reads that we started with

275
00:10:35,120 --> 00:10:37,279
to obtain the set of lines that we

276
00:10:37,279 --> 00:10:40,079
actually use for generating crash images

277
00:10:40,079 --> 00:10:42,320
so in this case since this was an

278
00:10:42,320 --> 00:10:44,399
incomplete journal entry we would not

279
00:10:44,399 --> 00:10:46,320
read or the recovery would not read any

280
00:10:46,320 --> 00:10:48,880
of it and the crash image generated then

281
00:10:48,880 --> 00:10:50,480
would completely

282
00:10:50,480 --> 00:10:52,959
skip on generating any crash images for

283
00:10:52,959 --> 00:10:55,518
this case

284
00:10:56,320 --> 00:10:58,720
so in summary with a heuristic we have

285
00:10:58,720 --> 00:11:01,120
achieved efficient generation of the

286
00:11:01,120 --> 00:11:04,399
interesting crash images

287
00:11:05,360 --> 00:11:08,320
for detecting bugs

288
00:11:10,560 --> 00:11:12,160
but of course the crash images

289
00:11:12,160 --> 00:11:14,160
themselves are not very useful for that

290
00:11:14,160 --> 00:11:16,240
since they're just a bunch of binary

291
00:11:16,240 --> 00:11:17,200
data

292
00:11:17,200 --> 00:11:18,800
for which we don't have any further

293
00:11:18,800 --> 00:11:20,480
insight

294
00:11:20,480 --> 00:11:21,279
so

295
00:11:21,279 --> 00:11:22,880
in the final stage

296
00:11:22,880 --> 00:11:24,480
the tester we

297
00:11:24,480 --> 00:11:26,640
extract the semantic states from the

298
00:11:26,640 --> 00:11:29,200
crash images by again loading them into

299
00:11:29,200 --> 00:11:31,360
a virtual machine and running a state

300
00:11:31,360 --> 00:11:33,360
extraction program

301
00:11:33,360 --> 00:11:35,440
which in the case of file systems is

302
00:11:35,440 --> 00:11:37,760
just a serialized file listing

303
00:11:37,760 --> 00:11:41,959
that we then save to a file

304
00:11:42,720 --> 00:11:43,839
we can then

305
00:11:43,839 --> 00:11:46,160
find all the unique states here

306
00:11:46,160 --> 00:11:48,160
which is already very useful for manual

307
00:11:48,160 --> 00:11:50,480
analysis of the states since we now can

308
00:11:50,480 --> 00:11:52,399
have a look so in this example we have

309
00:11:52,399 --> 00:11:55,519
four crash images and would get three

310
00:11:55,519 --> 00:11:57,360
states and now the developer can look

311
00:11:57,360 --> 00:11:59,040
into these states and can see whether

312
00:11:59,040 --> 00:12:01,440
the second intermediate state

313
00:12:01,440 --> 00:12:03,360
that might happen during a crash is an

314
00:12:03,360 --> 00:12:05,440
expected one or whether this is already

315
00:12:05,440 --> 00:12:07,760
a bug

316
00:12:07,920 --> 00:12:10,880
but we can also use this data to derive

317
00:12:10,880 --> 00:12:12,560
some crash consistency properties

318
00:12:12,560 --> 00:12:14,079
automatically

319
00:12:14,079 --> 00:12:15,760
the first one

320
00:12:15,760 --> 00:12:18,800
that we found very useful uh

321
00:12:18,800 --> 00:12:21,200
we called single final state and the

322
00:12:21,200 --> 00:12:23,760
idea here is that for any multi-step

323
00:12:23,760 --> 00:12:26,399
process one property that we still

324
00:12:26,399 --> 00:12:27,760
always expect

325
00:12:27,760 --> 00:12:30,639
is that at the final memory fence of the

326
00:12:30,639 --> 00:12:33,120
operation so where the operation ends

327
00:12:33,120 --> 00:12:36,079
we expect that only one semantic state

328
00:12:36,079 --> 00:12:38,639
is still possible

329
00:12:38,639 --> 00:12:41,040
because otherwise there would be still

330
00:12:41,040 --> 00:12:42,800
some unpersistent data left in the

331
00:12:42,800 --> 00:12:45,279
caches

332
00:12:45,360 --> 00:12:48,560
which is obviously a bug

333
00:12:49,839 --> 00:12:51,200
we can also

334
00:12:51,200 --> 00:12:53,760
test automatically test for atomicity by

335
00:12:53,760 --> 00:12:55,839
looking at the number of

336
00:12:55,839 --> 00:12:58,560
unique states that are generated

337
00:12:58,560 --> 00:13:00,399
and if there are only two possible

338
00:13:00,399 --> 00:13:01,519
states

339
00:13:01,519 --> 00:13:03,440
from any number of crash images that are

340
00:13:03,440 --> 00:13:05,680
generated then we can say that the

341
00:13:05,680 --> 00:13:08,959
operation is atomic

342
00:13:11,600 --> 00:13:14,720
so how do we apply winter now to test

343
00:13:14,720 --> 00:13:16,000
file systems

344
00:13:16,000 --> 00:13:18,959
we created three virtual machines

345
00:13:18,959 --> 00:13:20,800
that included kernels with nova and over

346
00:13:20,800 --> 00:13:22,880
40s and pmfs

347
00:13:22,880 --> 00:13:24,880
and we wrote a state extraction program

348
00:13:24,880 --> 00:13:27,279
that we called fs stamp that serializes

349
00:13:27,279 --> 00:13:30,240
the visual file system state including

350
00:13:30,240 --> 00:13:32,720
all metadata files and their contents to

351
00:13:32,720 --> 00:13:35,279
a json file

352
00:13:35,279 --> 00:13:37,920
we wrote 16 test cases which are all

353
00:13:37,920 --> 00:13:40,160
short shell scripts

354
00:13:40,160 --> 00:13:42,880
that were chosen to cover most basic

355
00:13:42,880 --> 00:13:45,920
file system operations

356
00:13:45,920 --> 00:13:48,079
the results of our tests are shown in

357
00:13:48,079 --> 00:13:50,160
this table

358
00:13:50,160 --> 00:13:52,639
it is easy to see that we found several

359
00:13:52,639 --> 00:13:55,680
bugs across all three file systems that

360
00:13:55,680 --> 00:13:58,720
we tested that ranged from data loss to

361
00:13:58,720 --> 00:14:01,760
crashes atomicity violations we had

362
00:14:01,760 --> 00:14:03,120
cases where

363
00:14:03,120 --> 00:14:05,360
reading and writing the file system even

364
00:14:05,360 --> 00:14:07,440
if it's only unrelated files failed

365
00:14:07,440 --> 00:14:09,199
after recovery

366
00:14:09,199 --> 00:14:11,519
and also violations of our single final

367
00:14:11,519 --> 00:14:13,760
state property

368
00:14:13,760 --> 00:14:17,199
in this presentation i want to

369
00:14:17,199 --> 00:14:19,440
get into more detail of one particular

370
00:14:19,440 --> 00:14:20,480
bug

371
00:14:20,480 --> 00:14:22,010
of a missing flash in nova

372
00:14:22,010 --> 00:14:24,160
[Music]

373
00:14:24,160 --> 00:14:25,839
the other bugs are discussed in more

374
00:14:25,839 --> 00:14:29,480
detail in the paper

375
00:14:30,800 --> 00:14:32,240
so the

376
00:14:32,240 --> 00:14:34,320
right test case

377
00:14:34,320 --> 00:14:38,000
where we found this missing flush bug

378
00:14:38,000 --> 00:14:40,160
looked as given above

379
00:14:40,160 --> 00:14:42,720
so it first creates a file called my

380
00:14:42,720 --> 00:14:44,399
file and

381
00:14:44,399 --> 00:14:48,320
then writes hello world to it

382
00:14:48,399 --> 00:14:50,880
and the winter report for this

383
00:14:50,880 --> 00:14:53,600
is that there are seven states this is

384
00:14:53,600 --> 00:14:55,680
okay at first because this is not an

385
00:14:55,680 --> 00:14:57,440
atomic operation we have multiple steps

386
00:14:57,440 --> 00:14:58,399
here

387
00:14:58,399 --> 00:15:00,720
however it also reported that there are

388
00:15:00,720 --> 00:15:02,880
four possible final states

389
00:15:02,880 --> 00:15:05,279
and looking into these states we could

390
00:15:05,279 --> 00:15:06,399
see

391
00:15:06,399 --> 00:15:09,199
that there's first the expected state

392
00:15:09,199 --> 00:15:11,199
hello world with a new line at the end

393
00:15:11,199 --> 00:15:14,240
but also three additional states where

394
00:15:14,240 --> 00:15:17,120
a suffix of the file is missing and is

395
00:15:17,120 --> 00:15:20,160
replaced with only zero bytes

396
00:15:20,160 --> 00:15:22,639
to understand what is happening there we

397
00:15:22,639 --> 00:15:25,279
now looked into the trace file

398
00:15:25,279 --> 00:15:27,839
specifically filtering for the cache

399
00:15:27,839 --> 00:15:28,959
line

400
00:15:28,959 --> 00:15:30,720
where this file content

401
00:15:30,720 --> 00:15:33,440
is written to

402
00:15:33,440 --> 00:15:35,600
and what we could see then is that nova

403
00:15:35,600 --> 00:15:36,800
wrote

404
00:15:36,800 --> 00:15:39,519
to this file in four distinct

405
00:15:39,519 --> 00:15:40,800
instructions

406
00:15:40,800 --> 00:15:43,199
first a non-temporal write that

407
00:15:43,199 --> 00:15:46,079
does not go into the volatile caches

408
00:15:46,079 --> 00:15:49,279
um of the first eight bytes of the files

409
00:15:49,279 --> 00:15:52,000
and then the remaining three bytes with

410
00:15:52,000 --> 00:15:54,720
individual single byte rights that do go

411
00:15:54,720 --> 00:15:56,959
to the caches

412
00:15:56,959 --> 00:16:00,399
and of course there's no flush here

413
00:16:00,399 --> 00:16:02,800
so the remaining three bytes

414
00:16:02,800 --> 00:16:04,160
might all

415
00:16:04,160 --> 00:16:05,920
yeah might remain in the caches and will

416
00:16:05,920 --> 00:16:08,399
be lost on a crash

417
00:16:08,399 --> 00:16:11,199
and to get a better understanding of

418
00:16:11,199 --> 00:16:13,279
where this bug is happening or how to

419
00:16:13,279 --> 00:16:15,360
fix this bug we can then look into the

420
00:16:15,360 --> 00:16:16,800
metadata

421
00:16:16,800 --> 00:16:18,880
associated with these rights

422
00:16:18,880 --> 00:16:19,759
and

423
00:16:19,759 --> 00:16:21,759
can then see the stack trace

424
00:16:21,759 --> 00:16:23,920
and the root cause of this bug is then

425
00:16:23,920 --> 00:16:24,800
that

426
00:16:24,800 --> 00:16:27,920
the nova function calls a general linux

427
00:16:27,920 --> 00:16:30,079
helper function called copy user no

428
00:16:30,079 --> 00:16:31,199
cache

429
00:16:31,199 --> 00:16:32,560
that apparently wasn't written with

430
00:16:32,560 --> 00:16:34,720
non-volatile memory but with performance

431
00:16:34,720 --> 00:16:37,440
in mind and the developers seemed

432
00:16:37,440 --> 00:16:39,600
acceptable to

433
00:16:39,600 --> 00:16:41,600
leave a small amount of data in the

434
00:16:41,600 --> 00:16:42,639
caches

435
00:16:42,639 --> 00:16:45,279
which is of course not acceptable when

436
00:16:45,279 --> 00:16:46,880
using it for

437
00:16:46,880 --> 00:16:51,000
non-volatile memory and for persistency

438
00:16:51,920 --> 00:16:55,680
apart from finding new bugs we also

439
00:16:55,680 --> 00:16:57,120
looked into whether

440
00:16:57,120 --> 00:16:58,800
winter can reproduce

441
00:16:58,800 --> 00:17:00,880
previously reported and fixed bugs and

442
00:17:00,880 --> 00:17:02,839
to do that

443
00:17:02,839 --> 00:17:06,640
we looked at the nova buck tracker

444
00:17:06,640 --> 00:17:07,919
and

445
00:17:07,919 --> 00:17:09,039
looked specifically for crash

446
00:17:09,039 --> 00:17:12,319
consistency bugs and verified that

447
00:17:12,319 --> 00:17:14,400
if we check out versions of the code

448
00:17:14,400 --> 00:17:16,880
without the bug fix that winter reports

449
00:17:16,880 --> 00:17:18,720
additional issues with the test cases

450
00:17:18,720 --> 00:17:21,439
that we are using

451
00:17:21,599 --> 00:17:23,679
we also wanted to get some

452
00:17:23,679 --> 00:17:25,439
better understanding of how effective

453
00:17:25,439 --> 00:17:28,079
the heuristic is that we have chosen

454
00:17:28,079 --> 00:17:29,520
and we found

455
00:17:29,520 --> 00:17:32,880
that with the heuristic winter generates

456
00:17:32,880 --> 00:17:35,280
significantly fewer crash images than

457
00:17:35,280 --> 00:17:37,440
with it but it still finds the same

458
00:17:37,440 --> 00:17:40,080
semantic states as in iran without the

459
00:17:40,080 --> 00:17:42,240
heuristic

460
00:17:42,240 --> 00:17:44,559
finally we looked at the performance and

461
00:17:44,559 --> 00:17:46,960
found that every

462
00:17:46,960 --> 00:17:49,200
test case takes only a few minutes to

463
00:17:49,200 --> 00:17:52,240
run and parallel analysis is possible so

464
00:17:52,240 --> 00:17:54,000
it's very

465
00:17:54,000 --> 00:17:57,360
possible for the developer to use winter

466
00:17:57,360 --> 00:17:58,400
to do

467
00:17:58,400 --> 00:18:01,600
live analysis and debugging of a file

468
00:18:01,600 --> 00:18:02,559
system

469
00:18:02,559 --> 00:18:04,880
details for all of these points are in

470
00:18:04,880 --> 00:18:07,440
the paper

471
00:18:08,640 --> 00:18:10,640
to conclude i want to repeat the

472
00:18:10,640 --> 00:18:12,640
assertion from the start that crash

473
00:18:12,640 --> 00:18:14,480
consistency is a hard problem

474
00:18:14,480 --> 00:18:16,160
since bugs do not show during normal

475
00:18:16,160 --> 00:18:19,200
execution and we need special tools to

476
00:18:19,200 --> 00:18:22,080
test for it winter is one such tool that

477
00:18:22,080 --> 00:18:23,760
captures the full system in a virtual

478
00:18:23,760 --> 00:18:26,000
machine and also features automatic

479
00:18:26,000 --> 00:18:28,880
testing for properties such as atomicity

480
00:18:28,880 --> 00:18:30,880
and single final stage

481
00:18:30,880 --> 00:18:33,520
we analyzed the filesystems nova nova

482
00:18:33,520 --> 00:18:37,679
40s and pmfs and found several new bugs

483
00:18:37,679 --> 00:18:39,919
we successfully participated in the

484
00:18:39,919 --> 00:18:42,240
artifact evaluation and our source code

485
00:18:42,240 --> 00:18:44,559
is available on github so check it out

486
00:18:44,559 --> 00:18:46,559
if you're working on nvm file systems

487
00:18:46,559 --> 00:18:50,520
yourself thank you

