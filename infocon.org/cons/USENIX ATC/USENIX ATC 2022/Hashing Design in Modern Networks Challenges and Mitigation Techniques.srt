1
00:00:13,519 --> 00:00:15,440
so i'm going to talk about somewhat of a

2
00:00:15,440 --> 00:00:17,840
niche topic today it's about hashing

3
00:00:17,840 --> 00:00:20,560
design in modern data center networks

4
00:00:20,560 --> 00:00:21,920
it's challenges and mitigation

5
00:00:21,920 --> 00:00:24,000
techniques this is a joint work

6
00:00:24,000 --> 00:00:26,240
with our colleagues from texas a m and

7
00:00:26,240 --> 00:00:29,240
harvard

8
00:00:31,199 --> 00:00:32,960
um today data center and wide area

9
00:00:32,960 --> 00:00:35,360
networks typically employ multi-path

10
00:00:35,360 --> 00:00:37,680
forwarding think about equal cost

11
00:00:37,680 --> 00:00:40,000
multipathing ecmp

12
00:00:40,000 --> 00:00:43,680
or its weighted variant wcnp

13
00:00:43,680 --> 00:00:45,920
roughly how the switch hashing works is

14
00:00:45,920 --> 00:00:47,520
when the packet arrives at a switch it's

15
00:00:47,520 --> 00:00:50,320
first matched to a next top group which

16
00:00:50,320 --> 00:00:53,039
is basically a list of ports that you

17
00:00:53,039 --> 00:00:55,360
can forward the packet out to

18
00:00:55,360 --> 00:00:57,440
that would get it get it to its

19
00:00:57,440 --> 00:00:59,680
destination

20
00:00:59,680 --> 00:01:01,760
the next step the switch applies the

21
00:01:01,760 --> 00:01:02,960
hash function

22
00:01:02,960 --> 00:01:05,280
which then indexes the packet

23
00:01:05,280 --> 00:01:08,479
into one of the next top

24
00:01:08,560 --> 00:01:10,960
and then forwards that

25
00:01:10,960 --> 00:01:13,360
packet out of that port

26
00:01:13,360 --> 00:01:15,680
so a good hash function should hash

27
00:01:15,680 --> 00:01:19,600
flows equally across all the next hops

28
00:01:19,600 --> 00:01:21,280
when that fails to happen

29
00:01:21,280 --> 00:01:23,759
this is a problem we call its hash

30
00:01:23,759 --> 00:01:26,240
polarization

31
00:01:26,240 --> 00:01:28,159
and this can happen when you reuse the

32
00:01:28,159 --> 00:01:30,479
same hash function or you use correlated

33
00:01:30,479 --> 00:01:33,200
hash functions across different switches

34
00:01:33,200 --> 00:01:34,960
on the same forwarding path so let us

35
00:01:34,960 --> 00:01:37,360
look at an example

36
00:01:37,360 --> 00:01:40,079
between node and a and node f there are

37
00:01:40,079 --> 00:01:42,240
four equal cost paths

38
00:01:42,240 --> 00:01:43,920
so ideally we want to utilize all of

39
00:01:43,920 --> 00:01:45,759
them equally

40
00:01:45,759 --> 00:01:49,040
so when traffic comes into a

41
00:01:49,040 --> 00:01:52,000
it has only two next tops to go to

42
00:01:52,000 --> 00:01:54,720
if the hash value of the packet is of

43
00:01:54,720 --> 00:01:56,880
the packet headers is zero then you

44
00:01:56,880 --> 00:01:58,880
forward it to b if it's one you forward

45
00:01:58,880 --> 00:02:01,200
it to c

46
00:02:01,200 --> 00:02:04,719
the problem arises at node b

47
00:02:04,719 --> 00:02:06,320
what if you use the same hash function

48
00:02:06,320 --> 00:02:10,239
as a the problem is

49
00:02:10,239 --> 00:02:11,038
then

50
00:02:11,038 --> 00:02:13,599
you will only use next top d

51
00:02:13,599 --> 00:02:15,760
because all that green traffic coming

52
00:02:15,760 --> 00:02:18,400
into b has hash value zero and if you're

53
00:02:18,400 --> 00:02:20,560
using the same hash function at b you

54
00:02:20,560 --> 00:02:23,520
will not hit e at all

55
00:02:23,520 --> 00:02:25,760
so this is a problem because only two

56
00:02:25,760 --> 00:02:29,599
out of your four paths are used

57
00:02:30,239 --> 00:02:32,160
this is problematic because this leads

58
00:02:32,160 --> 00:02:35,120
to poor low balancing and this tends to

59
00:02:35,120 --> 00:02:37,599
result in high very high tail latency

60
00:02:37,599 --> 00:02:38,959
which is detrimental to application

61
00:02:38,959 --> 00:02:41,519
performance like you know uh for example

62
00:02:41,519 --> 00:02:43,599
think about machine learning collective

63
00:02:43,599 --> 00:02:45,519
communications which are known to be

64
00:02:45,519 --> 00:02:47,760
highly sensitive to tail latencies also

65
00:02:47,760 --> 00:02:49,760
from network operators perspective this

66
00:02:49,760 --> 00:02:52,720
is just a lot of build bandwidth

67
00:02:52,720 --> 00:02:54,480
being unusable because you're

68
00:02:54,480 --> 00:02:57,200
prematurely saturating the link so your

69
00:02:57,200 --> 00:02:59,280
usable bandwidth is significantly less

70
00:02:59,280 --> 00:03:01,599
than your provision bandwidth

71
00:03:01,599 --> 00:03:03,599
so here are our contributions in this

72
00:03:03,599 --> 00:03:06,400
paper first we formalized the first time

73
00:03:06,400 --> 00:03:07,599
this

74
00:03:07,599 --> 00:03:09,760
hash polarization problem and this is

75
00:03:09,760 --> 00:03:12,560
attributed to a lack of uncorrelated

76
00:03:12,560 --> 00:03:14,879
hash functions provided in commodity

77
00:03:14,879 --> 00:03:16,159
switches

78
00:03:16,159 --> 00:03:17,840
there's a common misconception that

79
00:03:17,840 --> 00:03:20,000
random seeds can create uncorrelated

80
00:03:20,000 --> 00:03:21,599
hash functions which are actually not

81
00:03:21,599 --> 00:03:23,440
true

82
00:03:23,440 --> 00:03:24,800
and this lack of

83
00:03:24,800 --> 00:03:26,720
uncorrelated hash functions become even

84
00:03:26,720 --> 00:03:28,959
more acute with increasing adoption of

85
00:03:28,959 --> 00:03:32,879
direct connect technologies topologies

86
00:03:32,879 --> 00:03:34,879
so to mitigate this problem

87
00:03:34,879 --> 00:03:37,360
we had designed two approaches one is

88
00:03:37,360 --> 00:03:40,000
you know we identified a very common

89
00:03:40,000 --> 00:03:42,640
forwarding structure that enables us to

90
00:03:42,640 --> 00:03:45,519
reuse hash functions safely

91
00:03:45,519 --> 00:03:47,920
and secondly you know we proposed

92
00:03:47,920 --> 00:03:50,239
design an sdn based approach which does

93
00:03:50,239 --> 00:03:52,159
not require any switch modification to

94
00:03:52,159 --> 00:03:54,640
decorate switches using the same hash

95
00:03:54,640 --> 00:03:58,319
function together our solutions are

96
00:03:58,319 --> 00:04:01,760
near close near uh very near optimal for

97
00:04:01,760 --> 00:04:04,879
dcn and we have reclaimed 33 percent of

98
00:04:04,879 --> 00:04:06,959
network capacity otherwise lost to poor

99
00:04:06,959 --> 00:04:08,959
hashing

100
00:04:08,959 --> 00:04:10,959
let's take a look at google's data

101
00:04:10,959 --> 00:04:12,319
center networks

102
00:04:12,319 --> 00:04:16,079
this is a very typical conventional um

103
00:04:16,079 --> 00:04:18,160
clo topology

104
00:04:18,160 --> 00:04:19,358
uh

105
00:04:19,358 --> 00:04:20,639
google

106
00:04:20,639 --> 00:04:22,079
due to our skill

107
00:04:22,079 --> 00:04:24,479
this multi-stage cloud comprises

108
00:04:24,479 --> 00:04:26,639
five stages of switches

109
00:04:26,639 --> 00:04:28,320
now this work was first published

110
00:04:28,320 --> 00:04:31,840
revealed in sitcom 2015.

111
00:04:31,840 --> 00:04:34,320
um and the with the lower three layers

112
00:04:34,320 --> 00:04:36,720
of switches comprising the what we call

113
00:04:36,720 --> 00:04:38,240
the aggregation block which connects the

114
00:04:38,240 --> 00:04:39,199
servers

115
00:04:39,199 --> 00:04:40,960
and the upper two layers of switches

116
00:04:40,960 --> 00:04:42,639
comprising the swipe blob which provides

117
00:04:42,639 --> 00:04:44,800
the connectivity across the aggregation

118
00:04:44,800 --> 00:04:47,199
blocks

119
00:04:48,800 --> 00:04:52,240
so for inter-block traffic it follows

120
00:04:52,240 --> 00:04:53,040
every

121
00:04:53,040 --> 00:04:56,080
every single packet follows a fixed

122
00:04:56,080 --> 00:04:58,320
structure path which has exactly ahops

123
00:04:58,320 --> 00:05:00,160
and it goes through the exact same stage

124
00:05:00,160 --> 00:05:01,520
sequence

125
00:05:01,520 --> 00:05:04,320
so this suggests a pretty simple

126
00:05:04,320 --> 00:05:05,919
hash function allocation scheme where

127
00:05:05,919 --> 00:05:07,680
you basically for each hop let's assign

128
00:05:07,680 --> 00:05:09,680
a unique hash function

129
00:05:09,680 --> 00:05:12,479
note that this means for

130
00:05:12,479 --> 00:05:14,479
switches at

131
00:05:14,479 --> 00:05:18,240
s2 s3 and s4

132
00:05:18,400 --> 00:05:19,919
you will have two hash functions

133
00:05:19,919 --> 00:05:21,840
assigned to northbound traffic and

134
00:05:21,840 --> 00:05:24,240
southbound traffic respectively and we

135
00:05:24,240 --> 00:05:28,160
call this scheme per stage allocation

136
00:05:28,320 --> 00:05:29,600
uh

137
00:05:29,600 --> 00:05:31,759
fast forward to more you know recent

138
00:05:31,759 --> 00:05:33,199
years you know

139
00:05:33,199 --> 00:05:35,120
around five years ago we started uh

140
00:05:35,120 --> 00:05:37,039
building our data center networks using

141
00:05:37,039 --> 00:05:39,280
a non-hierarchical

142
00:05:39,280 --> 00:05:41,759
direct connect topology

143
00:05:41,759 --> 00:05:43,440
what happens here is we remove the spine

144
00:05:43,440 --> 00:05:45,520
blocks and we directly mesh the

145
00:05:45,520 --> 00:05:48,719
aggregation blocks together

146
00:05:49,440 --> 00:05:51,759
the problem here well first how do we do

147
00:05:51,759 --> 00:05:53,520
routing

148
00:05:53,520 --> 00:05:55,759
um so the inter-block traffic now either

149
00:05:55,759 --> 00:05:58,800
goes over a direct path

150
00:05:58,800 --> 00:06:04,320
or it goes through one transit hop

151
00:06:05,280 --> 00:06:07,520
now if we use the same per stage

152
00:06:07,520 --> 00:06:09,840
allocation

153
00:06:09,840 --> 00:06:11,199
what we're going to see is there's going

154
00:06:11,199 --> 00:06:13,360
to be hash collision

155
00:06:13,360 --> 00:06:14,880
happening

156
00:06:14,880 --> 00:06:17,919
between the source to transit hop

157
00:06:17,919 --> 00:06:21,039
and the transit to destination hop

158
00:06:21,039 --> 00:06:22,400
remember the same

159
00:06:22,400 --> 00:06:23,280
uh

160
00:06:23,280 --> 00:06:25,280
hash polarization example that i showed

161
00:06:25,280 --> 00:06:26,560
earlier

162
00:06:26,560 --> 00:06:28,880
the problem is at the source

163
00:06:28,880 --> 00:06:31,039
s3 switch you could hash the traffic

164
00:06:31,039 --> 00:06:32,800
apart no problem

165
00:06:32,800 --> 00:06:34,720
but what if only the green traffic

166
00:06:34,720 --> 00:06:36,479
arrives at the transit

167
00:06:36,479 --> 00:06:39,039
so now at this trans you can see my

168
00:06:39,039 --> 00:06:40,319
cursor right yes

169
00:06:40,319 --> 00:06:44,080
let me actually bring it up the laser

170
00:06:44,080 --> 00:06:46,880
but at this transit s3 chip

171
00:06:46,880 --> 00:06:48,319
unfortunately you're only seeing green

172
00:06:48,319 --> 00:06:49,759
traffic so you cannot hash it apart and

173
00:06:49,759 --> 00:06:51,680
there might be might very well be

174
00:06:51,680 --> 00:06:53,039
multiple links

175
00:06:53,039 --> 00:06:55,039
equal cost links to the destination so

176
00:06:55,039 --> 00:06:57,759
this is a problem

177
00:06:57,840 --> 00:07:00,240
now what can we do ideally you know if

178
00:07:00,240 --> 00:07:02,639
each aggregation block is assigned a

179
00:07:02,639 --> 00:07:04,800
unique a unique hash function then

180
00:07:04,800 --> 00:07:06,800
problem solved but that would require

181
00:07:06,800 --> 00:07:10,319
dozens of hash functions at least

182
00:07:10,319 --> 00:07:12,400
but you know unfortunately the commodity

183
00:07:12,400 --> 00:07:14,800
switches offer only very limited set of

184
00:07:14,800 --> 00:07:16,639
hash functions

185
00:07:16,639 --> 00:07:19,440
and as i hinted at earlier

186
00:07:19,440 --> 00:07:21,919
there's a common misconception that by

187
00:07:21,919 --> 00:07:24,560
randomizing the uh by randomly seeding

188
00:07:24,560 --> 00:07:26,240
the hash functions on the switch you

189
00:07:26,240 --> 00:07:28,080
create uncorrelated hash function that's

190
00:07:28,080 --> 00:07:29,599
actually not true

191
00:07:29,599 --> 00:07:30,400
the

192
00:07:30,400 --> 00:07:31,919
because the common implementation of the

193
00:07:31,919 --> 00:07:34,880
seed is it's concatenated to the input

194
00:07:34,880 --> 00:07:36,560
big vectors which consists of you know

195
00:07:36,560 --> 00:07:38,720
other packet uh header fields that you

196
00:07:38,720 --> 00:07:40,639
choose to hash upon

197
00:07:40,639 --> 00:07:42,720
so you concatenate the c to the big

198
00:07:42,720 --> 00:07:44,479
vectors and feed that into the hash

199
00:07:44,479 --> 00:07:46,639
function so the effect of that roughly

200
00:07:46,639 --> 00:07:48,319
speaking you can find you know more

201
00:07:48,319 --> 00:07:50,479
theoretical proof in the paper the the

202
00:07:50,479 --> 00:07:52,800
rough effect of that is it

203
00:07:52,800 --> 00:07:55,280
it scrambles the next hop but it does

204
00:07:55,280 --> 00:07:58,440
not decorate

205
00:07:59,199 --> 00:08:01,120
so what can we do

206
00:08:01,120 --> 00:08:02,160
we have

207
00:08:02,160 --> 00:08:04,639
limited hash functions implemented on

208
00:08:04,639 --> 00:08:06,879
the on the switch hardwired so you

209
00:08:06,879 --> 00:08:08,639
cannot really you know add new hash

210
00:08:08,639 --> 00:08:11,199
functions to it

211
00:08:11,199 --> 00:08:13,199
and then we have a growing need for more

212
00:08:13,199 --> 00:08:14,639
hash functions so we need to find some

213
00:08:14,639 --> 00:08:18,080
ways to safely reuse hash functions

214
00:08:18,080 --> 00:08:20,319
and here is one common pattern

215
00:08:20,319 --> 00:08:23,919
which we call color recombination

216
00:08:23,919 --> 00:08:25,520
again let's illustrate through an

217
00:08:25,520 --> 00:08:27,120
example

218
00:08:27,120 --> 00:08:29,120
same forwarding graph as before traffic

219
00:08:29,120 --> 00:08:30,960
coming in and it's split to green and

220
00:08:30,960 --> 00:08:32,159
red

221
00:08:32,159 --> 00:08:33,599
for it to

222
00:08:33,599 --> 00:08:35,839
switch b and c respectively

223
00:08:35,839 --> 00:08:38,320
we already established that at switch b

224
00:08:38,320 --> 00:08:40,000
and c you cannot reuse the same hash

225
00:08:40,000 --> 00:08:42,159
function right it's not going to work

226
00:08:42,159 --> 00:08:44,480
so that means we have to use a an

227
00:08:44,480 --> 00:08:46,880
orthogonal or uncorrelated hash function

228
00:08:46,880 --> 00:08:50,399
at node b and c

229
00:08:51,680 --> 00:08:55,360
the result of that is for the next layer

230
00:08:55,360 --> 00:08:59,200
at node dne now you have

231
00:08:59,279 --> 00:09:00,959
traffic coming

232
00:09:00,959 --> 00:09:03,440
from both colors right so you those two

233
00:09:03,440 --> 00:09:05,519
colors recombine into your original

234
00:09:05,519 --> 00:09:07,680
unpolarized traffic so now you can reuse

235
00:09:07,680 --> 00:09:11,599
actually reuse hash function h

236
00:09:12,480 --> 00:09:14,480
so where do we see this

237
00:09:14,480 --> 00:09:17,120
color recon uh recombination pattern

238
00:09:17,120 --> 00:09:19,120
it's actually quite prevalent it's very

239
00:09:19,120 --> 00:09:21,680
prevalent in most of the two stage clo

240
00:09:21,680 --> 00:09:23,600
block design

241
00:09:23,600 --> 00:09:25,200
uh remember the earlier i showed you the

242
00:09:25,200 --> 00:09:26,800
graph of jupiter topology you take a

243
00:09:26,800 --> 00:09:28,560
jupiter swine block for example you have

244
00:09:28,560 --> 00:09:32,080
the s4 it's a two-stage photic glow

245
00:09:32,080 --> 00:09:34,399
and color recombination you can

246
00:09:34,399 --> 00:09:36,640
basically map this if you unfold this it

247
00:09:36,640 --> 00:09:38,480
basically looks like the forwarding

248
00:09:38,480 --> 00:09:39,920
graph on the left

249
00:09:39,920 --> 00:09:42,560
this allows us to save one hash function

250
00:09:42,560 --> 00:09:44,480
at the stage four switch so i can use

251
00:09:44,480 --> 00:09:46,399
the same hash function for northbound

252
00:09:46,399 --> 00:09:50,279
traffic and southbound traffic

253
00:09:50,399 --> 00:09:51,920
here's another technique

254
00:09:51,920 --> 00:09:54,160
uh

255
00:09:54,320 --> 00:09:56,560
what i didn't mention earlier was that

256
00:09:56,560 --> 00:09:59,040
there are really two hash operations

257
00:09:59,040 --> 00:10:00,880
involved in selecting the next top of

258
00:10:00,880 --> 00:10:02,000
the packet

259
00:10:02,000 --> 00:10:04,399
so after a packet is you know matched

260
00:10:04,399 --> 00:10:06,080
into a next top group

261
00:10:06,080 --> 00:10:08,000
the switch does two things one is it

262
00:10:08,000 --> 00:10:10,560
first uh applies a hash function for

263
00:10:10,560 --> 00:10:14,079
example crc 32 which outputs a 32-bit

264
00:10:14,079 --> 00:10:15,680
integer

265
00:10:15,680 --> 00:10:18,560
and then the switch modulo that 32-bit

266
00:10:18,560 --> 00:10:20,720
uh integer

267
00:10:20,720 --> 00:10:23,440
by the size of the next top group and

268
00:10:23,440 --> 00:10:25,680
then whatever the remainder is that's

269
00:10:25,680 --> 00:10:27,360
the index

270
00:10:27,360 --> 00:10:30,320
for the port that you select

271
00:10:30,320 --> 00:10:32,880
so the nice thing about this is that the

272
00:10:32,880 --> 00:10:35,040
group size is completely controlled by

273
00:10:35,040 --> 00:10:36,640
the sdn controller

274
00:10:36,640 --> 00:10:37,760
um

275
00:10:37,760 --> 00:10:39,760
we program them uh

276
00:10:39,760 --> 00:10:41,600
it's fully under our control

277
00:10:41,600 --> 00:10:43,440
and we have proved a theorem in the

278
00:10:43,440 --> 00:10:45,920
paper which states that

279
00:10:45,920 --> 00:10:49,360
if two group sizes are co-prime

280
00:10:49,360 --> 00:10:51,120
then the two switches are uncorrelated

281
00:10:51,120 --> 00:10:54,959
even if they use the same hash function

282
00:10:54,959 --> 00:10:57,760
just to show a very simple illustration

283
00:10:57,760 --> 00:11:00,800
same example again

284
00:11:00,800 --> 00:11:02,560
packets arriving at

285
00:11:02,560 --> 00:11:04,800
switch a it has two next tops to forward

286
00:11:04,800 --> 00:11:07,199
it too

287
00:11:08,959 --> 00:11:10,160
for all the

288
00:11:10,160 --> 00:11:13,279
packets that have hash value 0 2 4 all

289
00:11:13,279 --> 00:11:14,800
the even numbers will get to forward it

290
00:11:14,800 --> 00:11:15,760
to b

291
00:11:15,760 --> 00:11:16,560
and

292
00:11:16,560 --> 00:11:19,760
even if you don't do anything at b

293
00:11:19,760 --> 00:11:21,440
what happens is they're all going to hit

294
00:11:21,440 --> 00:11:23,519
d and none is going to hit e

295
00:11:23,519 --> 00:11:25,760
but remember the co prime

296
00:11:25,760 --> 00:11:28,880
theorem what if we resize this group to

297
00:11:28,880 --> 00:11:33,439
a co-prime number uh let's say five

298
00:11:34,320 --> 00:11:36,160
and the way you do that is by just

299
00:11:36,160 --> 00:11:38,240
simple replications

300
00:11:38,240 --> 00:11:40,640
now let's see what happens

301
00:11:40,640 --> 00:11:43,120
okay so zero two four they're still

302
00:11:43,120 --> 00:11:44,320
gonna hit d

303
00:11:44,320 --> 00:11:46,160
but starting at six you're starting to

304
00:11:46,160 --> 00:11:48,240
hit e now

305
00:11:48,240 --> 00:11:51,279
and then this repeats

306
00:11:51,440 --> 00:11:52,800
so now

307
00:11:52,800 --> 00:11:55,279
you know very nicely uh by doing this

308
00:11:55,279 --> 00:11:57,600
little trick you're able to utilize the

309
00:11:57,600 --> 00:12:00,800
previously unused path

310
00:12:00,800 --> 00:12:02,720
there's a cache however

311
00:12:02,720 --> 00:12:04,800
if you're paying close attention it

312
00:12:04,800 --> 00:12:11,240
introduces us a slight weight skew um

313
00:12:11,440 --> 00:12:13,519
previously the intended traffic split is

314
00:12:13,519 --> 00:12:15,519
one to one between d and e but now due

315
00:12:15,519 --> 00:12:17,760
to this replication scheme the new split

316
00:12:17,760 --> 00:12:19,680
is actually three to two so there's now

317
00:12:19,680 --> 00:12:21,120
you see there's a trade-off existing

318
00:12:21,120 --> 00:12:22,240
between

319
00:12:22,240 --> 00:12:23,680
the weight precision

320
00:12:23,680 --> 00:12:27,120
and how many switch table ecmp table uh

321
00:12:27,120 --> 00:12:30,079
entries you're going to burn

322
00:12:30,160 --> 00:12:32,880
and we just talked about it which is uh

323
00:12:32,880 --> 00:12:35,839
expanding resizing an ecmp group

324
00:12:35,839 --> 00:12:38,560
co-priming resizing a wcmp group is a

325
00:12:38,560 --> 00:12:40,480
little bit more tricky and i a simple

326
00:12:40,480 --> 00:12:43,360
replication may not work very well so i

327
00:12:43,360 --> 00:12:45,200
encourage you to look at the to read the

328
00:12:45,200 --> 00:12:47,440
paper about this

329
00:12:47,440 --> 00:12:49,279
let's see how we apply the this code

330
00:12:49,279 --> 00:12:50,160
prime

331
00:12:50,160 --> 00:12:51,839
co-priming technique in our direct

332
00:12:51,839 --> 00:12:52,880
connect

333
00:12:52,880 --> 00:12:55,360
dcn network

334
00:12:55,360 --> 00:12:58,079
again remember the goal is to decorate

335
00:12:58,079 --> 00:12:59,040
the

336
00:12:59,040 --> 00:13:00,800
transit to destination hop from the

337
00:13:00,800 --> 00:13:03,680
source to transit hop

338
00:13:03,680 --> 00:13:05,519
i mean we could coordinate the group

339
00:13:05,519 --> 00:13:06,880
sizes

340
00:13:06,880 --> 00:13:09,120
between the two hops to code prime

341
00:13:09,120 --> 00:13:10,800
but we found there's an easier way to do

342
00:13:10,800 --> 00:13:11,920
that which is

343
00:13:11,920 --> 00:13:14,560
let's not touch the source group at all

344
00:13:14,560 --> 00:13:16,320
let's just resize the transit to

345
00:13:16,320 --> 00:13:18,639
destination group to a prime number

346
00:13:18,639 --> 00:13:21,200
which in the vast overwhelming majority

347
00:13:21,200 --> 00:13:23,680
of the cases should uh be automatically

348
00:13:23,680 --> 00:13:27,120
co-primed with the source transit group

349
00:13:27,120 --> 00:13:29,360
the other benefit of only resizing the

350
00:13:29,360 --> 00:13:31,040
transit to destination group is the

351
00:13:31,040 --> 00:13:32,880
transit destination tends to be ecmp

352
00:13:32,880 --> 00:13:34,639
whereas the source to transit tends to

353
00:13:34,639 --> 00:13:36,560
be wcmp because of you know traffic

354
00:13:36,560 --> 00:13:37,600
engineering

355
00:13:37,600 --> 00:13:39,440
uh

356
00:13:39,440 --> 00:13:41,760
for traffic engineering purposes so and

357
00:13:41,760 --> 00:13:43,279
we already

358
00:13:43,279 --> 00:13:45,680
said earlier that resizing an ecmp group

359
00:13:45,680 --> 00:13:48,399
tends to produce less weight skew

360
00:13:48,399 --> 00:13:50,079
without burning too many

361
00:13:50,079 --> 00:13:53,040
switch resources

362
00:13:56,160 --> 00:14:00,319
so let's look at some simulation results

363
00:14:00,639 --> 00:14:01,680
in this presentation we're going to

364
00:14:01,680 --> 00:14:03,120
focus on

365
00:14:03,120 --> 00:14:04,959
multi-stage cloud dcm and the direct

366
00:14:04,959 --> 00:14:07,120
connect dcm you can find more results on

367
00:14:07,120 --> 00:14:09,600
isp networks or general uh wide area

368
00:14:09,600 --> 00:14:12,240
networks in the paper

369
00:14:12,240 --> 00:14:14,880
um the hash functions that we use is

370
00:14:14,880 --> 00:14:17,120
called rtx7 which is a

371
00:14:17,120 --> 00:14:19,920
broadcom implementation so very fairly

372
00:14:19,920 --> 00:14:22,000
widely deployed

373
00:14:22,000 --> 00:14:24,480
it consists of a family of seven hash

374
00:14:24,480 --> 00:14:26,320
functions

375
00:14:26,320 --> 00:14:30,000
crc32 etc

376
00:14:30,000 --> 00:14:32,399
um to evaluate the effectiveness of our

377
00:14:32,399 --> 00:14:34,560
hashing design we look at the link

378
00:14:34,560 --> 00:14:37,680
utilization across

379
00:14:38,000 --> 00:14:40,079
across the switches and we use

380
00:14:40,079 --> 00:14:42,399
coefficient of variation to

381
00:14:42,399 --> 00:14:44,399
quantify just how much imbalance there

382
00:14:44,399 --> 00:14:46,000
is

383
00:14:46,000 --> 00:14:48,880
also we do use random seed so each

384
00:14:48,880 --> 00:14:53,040
switch is configured randomly seated

385
00:14:53,839 --> 00:14:54,959
so let's first look at the cloud

386
00:14:54,959 --> 00:14:57,279
topology we compare two configurations

387
00:14:57,279 --> 00:14:58,399
the baseline

388
00:14:58,399 --> 00:14:59,360
is

389
00:14:59,360 --> 00:15:01,839
because of the lack of hash functions so

390
00:15:01,839 --> 00:15:03,199
we

391
00:15:03,199 --> 00:15:05,360
will apply the same hash function for

392
00:15:05,360 --> 00:15:06,880
both the northbound and southbound

393
00:15:06,880 --> 00:15:09,040
traffic

394
00:15:09,040 --> 00:15:11,680
s3 chip

395
00:15:11,760 --> 00:15:15,519
and our with color recombining we could

396
00:15:15,519 --> 00:15:18,639
it allows us to allocate it saves us one

397
00:15:18,639 --> 00:15:20,079
hash function

398
00:15:20,079 --> 00:15:22,480
at stage four switch which

399
00:15:22,480 --> 00:15:24,000
allows us to assign that extra hash

400
00:15:24,000 --> 00:15:26,560
function to the s3 southbound traffic

401
00:15:26,560 --> 00:15:30,000
so we compare these two schemes

402
00:15:30,160 --> 00:15:32,880
so here is a

403
00:15:32,880 --> 00:15:34,959
representative s3 chip and we look at

404
00:15:34,959 --> 00:15:36,720
its down facing

405
00:15:36,720 --> 00:15:39,279
ports there are eight of them

406
00:15:39,279 --> 00:15:43,600
the blue bars show the the baseline

407
00:15:43,600 --> 00:15:45,760
you can see that it has a pretty poor

408
00:15:45,760 --> 00:15:47,199
low balancing

409
00:15:47,199 --> 00:15:49,040
uh

410
00:15:49,040 --> 00:15:51,360
across the the links but when you apply

411
00:15:51,360 --> 00:15:55,040
color recombining uh the

412
00:15:55,040 --> 00:15:57,600
low balancing is significantly improved

413
00:15:57,600 --> 00:15:59,199
we're looking at a coefficient of

414
00:15:59,199 --> 00:16:04,359
variation of 0.6 versus 0.05

415
00:16:06,079 --> 00:16:09,279
and because of this we can

416
00:16:09,279 --> 00:16:11,440
increase the effective capacity by 33

417
00:16:11,440 --> 00:16:13,839
percent

418
00:16:13,839 --> 00:16:16,560
uh a similar story uh follows for the

419
00:16:16,560 --> 00:16:19,040
direct connect topology uh here we're

420
00:16:19,040 --> 00:16:20,959
comparing again a baseline where we

421
00:16:20,959 --> 00:16:22,639
retain the original

422
00:16:22,639 --> 00:16:25,440
group size without code priming and we

423
00:16:25,440 --> 00:16:28,160
compare with our technique of co-priming

424
00:16:28,160 --> 00:16:29,040
the

425
00:16:29,040 --> 00:16:32,319
source group and the transit group

426
00:16:34,959 --> 00:16:36,880
again a similar story here the low

427
00:16:36,880 --> 00:16:39,519
balancing performance is significantly

428
00:16:39,519 --> 00:16:41,920
improved uh here we're looking at 23

429
00:16:41,920 --> 00:16:44,959
capacity improvement

430
00:16:45,120 --> 00:16:46,720
next we explore

431
00:16:46,720 --> 00:16:48,480
a little bit the trade-off between the

432
00:16:48,480 --> 00:16:51,839
waste sku and the switch table usage

433
00:16:51,839 --> 00:16:55,040
the main takeaways are

434
00:16:55,120 --> 00:16:56,639
which the results are pretty intuitive

435
00:16:56,639 --> 00:16:58,079
as well by increasing the code prime

436
00:16:58,079 --> 00:17:00,959
value from 9 to 73 we're able to reduce

437
00:17:00,959 --> 00:17:02,639
load imbalance

438
00:17:02,639 --> 00:17:04,959
by 80 so this loading balance is purely

439
00:17:04,959 --> 00:17:07,280
due to weight skew

440
00:17:07,280 --> 00:17:09,359
but as you increase the ecmp group size

441
00:17:09,359 --> 00:17:12,480
you also burn more ecmp entries

442
00:17:12,480 --> 00:17:14,480
and we also see diminished return after

443
00:17:14,480 --> 00:17:17,199
a certain point

444
00:17:17,520 --> 00:17:19,280
um both of these techniques have been

445
00:17:19,280 --> 00:17:20,959
deployed in our production for many

446
00:17:20,959 --> 00:17:22,959
years now

447
00:17:22,959 --> 00:17:24,959
specifically in the

448
00:17:24,959 --> 00:17:28,160
multi-stage glow topology we use color

449
00:17:28,160 --> 00:17:30,240
combination recombination and it's not

450
00:17:30,240 --> 00:17:31,919
just in spine block i would encourage

451
00:17:31,919 --> 00:17:33,760
you to think about

452
00:17:33,760 --> 00:17:35,440
other places where this is happening and

453
00:17:35,440 --> 00:17:36,799
it doesn't have to be just a single

454
00:17:36,799 --> 00:17:40,160
layer do the re color recombination

455
00:17:40,160 --> 00:17:42,960
in our direct connect architecture

456
00:17:42,960 --> 00:17:44,480
which is going to come out

457
00:17:44,480 --> 00:17:47,360
in this year's sitcom we employ both

458
00:17:47,360 --> 00:17:50,080
color recombination and co-priming

459
00:17:50,080 --> 00:17:51,360
and we have

460
00:17:51,360 --> 00:17:53,200
been able to achieve excellent low

461
00:17:53,200 --> 00:17:54,960
balancing performance with a coefficient

462
00:17:54,960 --> 00:17:56,640
of variation of only

463
00:17:56,640 --> 00:17:59,640
0.03

464
00:18:00,559 --> 00:18:01,840
um

465
00:18:01,840 --> 00:18:04,160
there's still works remaining to be done

466
00:18:04,160 --> 00:18:05,919
um i think

467
00:18:05,919 --> 00:18:08,160
for one hash polarization detection in

468
00:18:08,160 --> 00:18:10,880
live networks remains to be a difficult

469
00:18:10,880 --> 00:18:12,720
problem the reason is attributing

470
00:18:12,720 --> 00:18:15,120
loading balance to

471
00:18:15,120 --> 00:18:16,880
hash polarization in the face of

472
00:18:16,880 --> 00:18:18,400
multiple confounders is actually quite

473
00:18:18,400 --> 00:18:19,760
challenging because there are many

474
00:18:19,760 --> 00:18:22,320
things that could impact load balancing

475
00:18:22,320 --> 00:18:25,039
think about wcmp traffic engineering

476
00:18:25,039 --> 00:18:27,280
or elephant flow

477
00:18:27,280 --> 00:18:29,600
um there's even harder problem which is

478
00:18:29,600 --> 00:18:32,720
intermittent passion issues because

479
00:18:32,720 --> 00:18:34,640
due to some

480
00:18:34,640 --> 00:18:37,039
coincidental combination of your routing

481
00:18:37,039 --> 00:18:38,240
you might

482
00:18:38,240 --> 00:18:40,320
have

483
00:18:40,320 --> 00:18:41,919
occasionally good color mixing which

484
00:18:41,919 --> 00:18:44,880
might hide your hashing issue but when

485
00:18:44,880 --> 00:18:46,559
you lose that

486
00:18:46,559 --> 00:18:49,360
color mixing in some occasions you may

487
00:18:49,360 --> 00:18:51,200
your service may see outages because now

488
00:18:51,200 --> 00:18:54,720
your hashing issues start surfacing

489
00:18:54,960 --> 00:18:56,720
so this will be an interesting problem

490
00:18:56,720 --> 00:18:58,960
to do more research on

491
00:18:58,960 --> 00:19:00,799
fundamentally we believe the way to

492
00:19:00,799 --> 00:19:03,120
solve this you know

493
00:19:03,120 --> 00:19:05,520
as good as the approaches that we have

494
00:19:05,520 --> 00:19:07,280
proposed we believe the fundamental way

495
00:19:07,280 --> 00:19:09,200
to solve this is

496
00:19:09,200 --> 00:19:10,960
the switch hardware level is that we

497
00:19:10,960 --> 00:19:12,400
really need the switch vendors to

498
00:19:12,400 --> 00:19:13,600
provide

499
00:19:13,600 --> 00:19:16,400
unlimited uncorrelated hash functions

500
00:19:16,400 --> 00:19:18,559
and generatable by

501
00:19:18,559 --> 00:19:22,320
seeding the hash function randomly

502
00:19:22,320 --> 00:19:24,960
lastly um

503
00:19:24,960 --> 00:19:27,840
i think how do we automatically detect

504
00:19:27,840 --> 00:19:29,760
and discover this color recombining

505
00:19:29,760 --> 00:19:33,360
pattern uh considering uh mirrored uh

506
00:19:33,360 --> 00:19:36,480
multiple factors like routing uh hashing

507
00:19:36,480 --> 00:19:38,799
the traffic entropy etc is also an

508
00:19:38,799 --> 00:19:41,280
interesting problem to conclude

509
00:19:41,280 --> 00:19:43,039
hash polarization is a real yet

510
00:19:43,039 --> 00:19:45,360
underestimated problem in production

511
00:19:45,360 --> 00:19:47,679
networks it could reduce reusable

512
00:19:47,679 --> 00:19:50,400
bandwidth by as much as one third

513
00:19:50,400 --> 00:19:51,520
we have

514
00:19:51,520 --> 00:19:53,600
shown you uh two proven approaches to

515
00:19:53,600 --> 00:19:55,840
achieve near optimal hashing

516
00:19:55,840 --> 00:19:58,720
and we're actively working with our

517
00:19:58,720 --> 00:20:00,880
switch vendors on better switch hashing

518
00:20:00,880 --> 00:20:02,559
implementation with that thank you all

519
00:20:02,559 --> 00:20:04,640
for your attention i'm happy to take any

520
00:20:04,640 --> 00:20:07,640
questions

