1
00:00:14,639 --> 00:00:17,359
hello everyone my name is fan and i'm a

2
00:00:17,359 --> 00:00:19,520
fourth year phd student at georgia tech

3
00:00:19,520 --> 00:00:21,680
advised by professor tessa kim

4
00:00:21,680 --> 00:00:23,359
so today i will be presenting our work

5
00:00:23,359 --> 00:00:25,519
predwin originally is the name of the

6
00:00:25,519 --> 00:00:27,920
shield of king arthur

7
00:00:27,920 --> 00:00:29,599
and which here represents a framework

8
00:00:29,599 --> 00:00:32,079
for universally hardening xjx program

9
00:00:32,079 --> 00:00:33,920
via low temp synthesis

10
00:00:33,920 --> 00:00:35,840
this this project is a collaboration

11
00:00:35,840 --> 00:00:39,040
between our lab and intel

12
00:00:39,440 --> 00:00:41,280
in today's world cloud computing is

13
00:00:41,280 --> 00:00:42,239
everywhere

14
00:00:42,239 --> 00:00:44,079
led by well-known names such as amazon

15
00:00:44,079 --> 00:00:46,719
web service microsoft azure and google

16
00:00:46,719 --> 00:00:49,680
plus google cloud platform

17
00:00:49,680 --> 00:00:51,680
cloud computing has been a major enabler

18
00:00:51,680 --> 00:00:53,120
for applications across different

19
00:00:53,120 --> 00:00:56,320
services and devices

20
00:00:56,719 --> 00:00:59,199
to make use of cloud platforms user data

21
00:00:59,199 --> 00:01:01,680
is transmitted to used by and stored in

22
00:01:01,680 --> 00:01:03,600
the cloud

23
00:01:03,600 --> 00:01:05,519
however as a cloud provider has the

24
00:01:05,519 --> 00:01:06,960
total authority of the cloud

25
00:01:06,960 --> 00:01:08,960
infrastructure while not necessarily

26
00:01:08,960 --> 00:01:10,400
could be trusted

27
00:01:10,400 --> 00:01:12,080
data security has been one of the major

28
00:01:12,080 --> 00:01:14,640
concerns with cloud

29
00:01:14,640 --> 00:01:16,479
being privileged a malicious cloud

30
00:01:16,479 --> 00:01:18,400
provider can easily compromise the

31
00:01:18,400 --> 00:01:21,360
security of data in transit data in use

32
00:01:21,360 --> 00:01:24,240
and data at rest

33
00:01:24,799 --> 00:01:26,240
thanks to the advance of security

34
00:01:26,240 --> 00:01:27,600
research we have corresponding

35
00:01:27,600 --> 00:01:30,000
strategies to protect the user data at

36
00:01:30,000 --> 00:01:32,560
each stage

37
00:01:32,560 --> 00:01:35,280
to protect the data in transit tls and

38
00:01:35,280 --> 00:01:39,520
ssl are applied over the network

39
00:01:39,520 --> 00:01:41,759
to protect the data at rest the cloud

40
00:01:41,759 --> 00:01:44,479
provider offers disk encryption

41
00:01:44,479 --> 00:01:46,000
in order to ensure integrity and

42
00:01:46,000 --> 00:01:48,720
confidentiality

43
00:01:48,720 --> 00:01:50,960
and to protect the data in use here

44
00:01:50,960 --> 00:01:53,040
comes our main character today intel

45
00:01:53,040 --> 00:01:55,360
software guard extension shortened as

46
00:01:55,360 --> 00:01:58,320
sgx is developed and deployed to provide

47
00:01:58,320 --> 00:02:00,560
a trusted execution environment so that

48
00:02:00,560 --> 00:02:02,719
the user can be confident that even when

49
00:02:02,719 --> 00:02:05,040
the cloud provider becomes broke no

50
00:02:05,040 --> 00:02:07,600
security and no secret could be stolen

51
00:02:07,600 --> 00:02:09,758
when the user workload is being executed

52
00:02:09,758 --> 00:02:12,160
on cloud server

53
00:02:12,160 --> 00:02:14,239
so how is sgx able to provide such a

54
00:02:14,239 --> 00:02:15,920
trust

55
00:02:15,920 --> 00:02:18,319
let's briefly get some background

56
00:02:18,319 --> 00:02:20,720
on the server side during runtime the

57
00:02:20,720 --> 00:02:23,040
cpu is constantly fetching the user code

58
00:02:23,040 --> 00:02:27,360
and data from the memory for execution

59
00:02:27,360 --> 00:02:28,879
at the same time

60
00:02:28,879 --> 00:02:30,160
the privileged software such as

61
00:02:30,160 --> 00:02:32,000
operating system and hypervisor can

62
00:02:32,000 --> 00:02:34,239
issue external memory accesses in order

63
00:02:34,239 --> 00:02:36,959
to peek into the execution context

64
00:02:36,959 --> 00:02:38,400
if the privileged

65
00:02:38,400 --> 00:02:40,480
software is malicious everything during

66
00:02:40,480 --> 00:02:41,599
execution

67
00:02:41,599 --> 00:02:44,399
is exposed

68
00:02:45,200 --> 00:02:47,599
sgx provides a protected execution

69
00:02:47,599 --> 00:02:49,920
container called enclave which consists

70
00:02:49,920 --> 00:02:52,000
of an isolated memory region enforced by

71
00:02:52,000 --> 00:02:54,640
the cpu hardware

72
00:02:54,640 --> 00:02:57,280
first of all only the enclave is allowed

73
00:02:57,280 --> 00:02:59,599
to access isolated memory region so

74
00:02:59,599 --> 00:03:02,400
accesses from elsewhere even from the os

75
00:03:02,400 --> 00:03:06,159
and the hypervisor will be denied

76
00:03:06,800 --> 00:03:09,680
second memory encryption by hardware key

77
00:03:09,680 --> 00:03:12,080
fused on the cpu during manufacturing is

78
00:03:12,080 --> 00:03:14,720
enforced on the isolated region

79
00:03:14,720 --> 00:03:16,159
the memory content will only be

80
00:03:16,159 --> 00:03:17,920
decrypted when entering the cpu for

81
00:03:17,920 --> 00:03:19,840
execution and re-encrypted once left the

82
00:03:19,840 --> 00:03:22,319
cpu

83
00:03:22,400 --> 00:03:24,480
physical attacks such as memory snooping

84
00:03:24,480 --> 00:03:26,319
therefore cannot exfiltrate any useful

85
00:03:26,319 --> 00:03:28,560
data

86
00:03:28,959 --> 00:03:31,440
lastly sjx provides the capability of

87
00:03:31,440 --> 00:03:34,159
remote attestation by which a user can

88
00:03:34,159 --> 00:03:36,560
attest that the code and data are

89
00:03:36,560 --> 00:03:39,680
deployed into genuine sjx enclave with

90
00:03:39,680 --> 00:03:43,440
the most updated security features

91
00:03:44,239 --> 00:03:46,480
however life is always not easy

92
00:03:46,480 --> 00:03:48,799
the activities here of sgx lies in a

93
00:03:48,799 --> 00:03:50,480
category of attacks called side channel

94
00:03:50,480 --> 00:03:52,480
attacks

95
00:03:52,480 --> 00:03:54,959
inevitably when comes lower into the

96
00:03:54,959 --> 00:03:58,560
execution stack sjx programs shares

97
00:03:58,560 --> 00:04:00,400
state 4 hardware resources

98
00:04:00,400 --> 00:04:02,480
such as cache and page table with other

99
00:04:02,480 --> 00:04:04,080
processes

100
00:04:04,080 --> 00:04:06,239
the shared resources create unintended

101
00:04:06,239 --> 00:04:08,319
information channels which we call site

102
00:04:08,319 --> 00:04:10,560
channels

103
00:04:10,560 --> 00:04:12,239
although with the security guarantees of

104
00:04:12,239 --> 00:04:15,519
sgx privileged software cannot

105
00:04:15,519 --> 00:04:17,519
directly access the secret inside an

106
00:04:17,519 --> 00:04:20,000
enclave

107
00:04:20,880 --> 00:04:22,880
through side channels the attackers are

108
00:04:22,880 --> 00:04:24,560
able to exfiltrate secret data

109
00:04:24,560 --> 00:04:27,040
indirectly

110
00:04:27,040 --> 00:04:29,280
so cloud providers with total authority

111
00:04:29,280 --> 00:04:31,520
over the servers have natural advantage

112
00:04:31,520 --> 00:04:33,759
as side channel attackers to conduct

113
00:04:33,759 --> 00:04:36,000
secret influence with low noise and high

114
00:04:36,000 --> 00:04:38,560
resolution

115
00:04:39,120 --> 00:04:40,800
hdx action attacks have been well

116
00:04:40,800 --> 00:04:43,360
researched in academia with published

117
00:04:43,360 --> 00:04:45,040
research papers in various top

118
00:04:45,040 --> 00:04:46,720
conferences

119
00:04:46,720 --> 00:04:49,040
common shared hardware resources for

120
00:04:49,040 --> 00:04:51,600
launching sjxl channel text include page

121
00:04:51,600 --> 00:04:54,560
table cache branch predictor

122
00:04:54,560 --> 00:04:56,639
translation location buffer and cpu

123
00:04:56,639 --> 00:04:59,919
execution pipelines

124
00:04:59,919 --> 00:05:01,600
all those attacks allowed attacker to

125
00:05:01,600 --> 00:05:03,199
infer fine-grained information inside

126
00:05:03,199 --> 00:05:05,120
the enclave

127
00:05:05,120 --> 00:05:06,560
as a result

128
00:05:06,560 --> 00:05:08,639
the security guarantees of sgx are

129
00:05:08,639 --> 00:05:10,560
compromised as long as those side

130
00:05:10,560 --> 00:05:13,680
channels are present

131
00:05:13,680 --> 00:05:15,360
so how are the exject side channel

132
00:05:15,360 --> 00:05:18,320
attacks addressed

133
00:05:18,560 --> 00:05:20,240
against those attacks are various

134
00:05:20,240 --> 00:05:22,639
mitigation schemes from the academia and

135
00:05:22,639 --> 00:05:24,960
industry each targeting different types

136
00:05:24,960 --> 00:05:27,199
of sidechain attacks or just serving as

137
00:05:27,199 --> 00:05:30,800
a general hardening technique for sgx

138
00:05:30,800 --> 00:05:34,000
they'll share similar design choices

139
00:05:34,000 --> 00:05:35,759
first they require no hardware

140
00:05:35,759 --> 00:05:38,960
modification for quick roll out

141
00:05:38,960 --> 00:05:39,919
second

142
00:05:39,919 --> 00:05:41,759
they are enabled by code instrumentation

143
00:05:41,759 --> 00:05:44,400
via compiler and require minimum manual

144
00:05:44,400 --> 00:05:46,639
effort for best usability

145
00:05:46,639 --> 00:05:48,880
during compile time customized compilers

146
00:05:48,880 --> 00:05:51,199
will automatically transform programs in

147
00:05:51,199 --> 00:05:55,360
hardened ones by inserting extra logic

148
00:05:55,759 --> 00:05:57,440
let's take a look at how one single

149
00:05:57,440 --> 00:05:59,120
instrumentation based mitigation scheme

150
00:05:59,120 --> 00:06:02,960
gets deployed on sgx applications

151
00:06:02,960 --> 00:06:05,039
using a customized compiler designed for

152
00:06:05,039 --> 00:06:07,440
a specific mitigation scheme the user

153
00:06:07,440 --> 00:06:09,440
source code is locally compiled into a

154
00:06:09,440 --> 00:06:12,479
protected binary

155
00:06:12,479 --> 00:06:14,160
the hard end binary is then securely

156
00:06:14,160 --> 00:06:16,400
transmitted to the remote and executed

157
00:06:16,400 --> 00:06:19,440
inside an s6 enclave on the sjx capable

158
00:06:19,440 --> 00:06:21,840
machine

159
00:06:22,319 --> 00:06:23,280
however

160
00:06:23,280 --> 00:06:25,680
each scheme as we saw before targets

161
00:06:25,680 --> 00:06:28,560
limited types of attacks

162
00:06:28,560 --> 00:06:30,720
while the problem is that multiple side

163
00:06:30,720 --> 00:06:32,840
channels can

164
00:06:32,840 --> 00:06:35,840
co-exist therefore to defeat multiple

165
00:06:35,840 --> 00:06:38,080
side channel attacks at the same time we

166
00:06:38,080 --> 00:06:40,080
need to compose multiple mitigation

167
00:06:40,080 --> 00:06:42,880
schemes together

168
00:06:43,759 --> 00:06:45,520
now instead of targeting one type of

169
00:06:45,520 --> 00:06:48,080
session attacks for example thread based

170
00:06:48,080 --> 00:06:50,000
attacks we need to apply schemes

171
00:06:50,000 --> 00:06:51,840
targeting other types of side channels

172
00:06:51,840 --> 00:06:53,680
at the same time

173
00:06:53,680 --> 00:06:56,319
such as cached attacks and page volume

174
00:06:56,319 --> 00:06:58,639
page for the text

175
00:06:58,639 --> 00:07:00,000
when we want to deploy multiple

176
00:07:00,000 --> 00:07:02,160
mitigation schemes and follow the

177
00:07:02,160 --> 00:07:04,479
current strategy we saw before some sort

178
00:07:04,479 --> 00:07:06,639
of mega compiler will locally compile

179
00:07:06,639 --> 00:07:09,120
the user code with multiple mitigation

180
00:07:09,120 --> 00:07:11,919
schemes together

181
00:07:12,240 --> 00:07:13,680
and the hardened binary will be

182
00:07:13,680 --> 00:07:16,080
similarly transmitted to the sgx enclave

183
00:07:16,080 --> 00:07:19,280
on the target machine for execution

184
00:07:19,280 --> 00:07:22,799
but is that really the true story

185
00:07:23,199 --> 00:07:25,440
unfortunately natively composing

186
00:07:25,440 --> 00:07:27,520
multiple mitigation schemes locally

187
00:07:27,520 --> 00:07:29,680
creates several problems for distinct

188
00:07:29,680 --> 00:07:32,080
remote platforms

189
00:07:32,080 --> 00:07:34,400
for example if the remote server already

190
00:07:34,400 --> 00:07:36,800
has hyperthread disabled the scheme

191
00:07:36,800 --> 00:07:38,560
targeting hyperthread based attacks will

192
00:07:38,560 --> 00:07:41,039
be redundant and incurs unnecessary

193
00:07:41,039 --> 00:07:43,599
performance overhead

194
00:07:43,599 --> 00:07:44,560
meanwhile

195
00:07:44,560 --> 00:07:46,880
if there's no intel tsx hardware support

196
00:07:46,880 --> 00:07:49,120
on the remote server the binary hardened

197
00:07:49,120 --> 00:07:51,919
with tsjx a scheme against page fault

198
00:07:51,919 --> 00:07:54,160
attacks will simply fault on tsx

199
00:07:54,160 --> 00:07:56,319
instructions making the application

200
00:07:56,319 --> 00:07:59,120
undeployable

201
00:07:59,120 --> 00:08:00,800
not to mention that mitigation schemes

202
00:08:00,800 --> 00:08:02,720
might be incompatible with each other by

203
00:08:02,720 --> 00:08:04,800
design or implementation due to the

204
00:08:04,800 --> 00:08:06,720
unawareness of each other during

205
00:08:06,720 --> 00:08:09,039
development

206
00:08:09,039 --> 00:08:10,720
they'll happen because of the static

207
00:08:10,720 --> 00:08:12,879
approach of enforcing schemes at local

208
00:08:12,879 --> 00:08:15,680
compilation time

209
00:08:16,319 --> 00:08:18,000
so when can we make the best decision of

210
00:08:18,000 --> 00:08:21,039
the mitigation schemes to be applied

211
00:08:21,039 --> 00:08:22,720
we believe that the decision should be

212
00:08:22,720 --> 00:08:24,720
delayed as close to the final execution

213
00:08:24,720 --> 00:08:27,120
as possible to best fit the target sgx

214
00:08:27,120 --> 00:08:28,960
platform as well as the co-existing

215
00:08:28,960 --> 00:08:31,919
mitigation techniques

216
00:08:32,479 --> 00:08:35,120
how it would look like are as follows

217
00:08:35,120 --> 00:08:36,880
instead of applying mitigation schemes

218
00:08:36,880 --> 00:08:39,200
locally

219
00:08:39,200 --> 00:08:41,120
we will select and apply mitigation

220
00:08:41,120 --> 00:08:43,120
schemes on the remote side after the

221
00:08:43,120 --> 00:08:44,800
binary is deployed to best fit the

222
00:08:44,800 --> 00:08:48,560
capability of the runtime platform

223
00:08:48,560 --> 00:08:50,880
for example the target platform has no

224
00:08:50,880 --> 00:08:55,200
ts6 support with hyperthread disabled

225
00:08:55,200 --> 00:08:57,200
then corresponding schemes the highlight

226
00:08:57,200 --> 00:08:58,000
here

227
00:08:58,000 --> 00:08:59,760
should be omitted to achieve best

228
00:08:59,760 --> 00:09:02,000
performance and compatibility with the

229
00:09:02,000 --> 00:09:04,320
platform

230
00:09:04,320 --> 00:09:06,240
to achieve such a strategy there are

231
00:09:06,240 --> 00:09:09,200
several requirements

232
00:09:09,200 --> 00:09:10,959
first we should be able to detect the

233
00:09:10,959 --> 00:09:12,880
hardware configuration of the target

234
00:09:12,880 --> 00:09:15,440
platform such as whether tier 6 is

235
00:09:15,440 --> 00:09:17,360
available or hyper thread in this

236
00:09:17,360 --> 00:09:19,760
example

237
00:09:20,000 --> 00:09:22,240
second we should selectively enforce

238
00:09:22,240 --> 00:09:24,320
schemes to achieve the best performance

239
00:09:24,320 --> 00:09:27,440
and security for the specific platform

240
00:09:27,440 --> 00:09:29,680
while avoiding conflicts and errors

241
00:09:29,680 --> 00:09:33,199
based on the configuration we have

242
00:09:33,440 --> 00:09:35,440
finally we should be able to validate

243
00:09:35,440 --> 00:09:37,760
that the scheme are enforced faithfully

244
00:09:37,760 --> 00:09:39,279
to provide the expected security

245
00:09:39,279 --> 00:09:41,839
guarantee

246
00:09:41,920 --> 00:09:45,760
so pratwin is our answer to this

247
00:09:45,839 --> 00:09:47,440
let's take a look at an overview of

248
00:09:47,440 --> 00:09:49,760
predwin and see how it satisfied the

249
00:09:49,760 --> 00:09:51,760
requirements

250
00:09:51,760 --> 00:09:53,920
so from a bigger picture pardon is a

251
00:09:53,920 --> 00:09:57,760
binary loader inside the xjs enclave

252
00:09:57,760 --> 00:10:00,640
first part one's prober identifies the

253
00:10:00,640 --> 00:10:02,399
hardware and system configurations of

254
00:10:02,399 --> 00:10:06,160
the target platform in a trusted way

255
00:10:06,160 --> 00:10:08,800
to selectively enforce schemes

256
00:10:08,800 --> 00:10:11,440
partners path manager first determines

257
00:10:11,440 --> 00:10:14,160
an optimal set of feasible

258
00:10:14,160 --> 00:10:16,160
instrumentation passes based on the

259
00:10:16,160 --> 00:10:19,839
identified hardware configurations

260
00:10:20,079 --> 00:10:21,040
then

261
00:10:21,040 --> 00:10:23,040
synthetizer accepts the user provided

262
00:10:23,040 --> 00:10:24,640
binary

263
00:10:24,640 --> 00:10:26,959
and hardens the program with the chosen

264
00:10:26,959 --> 00:10:29,279
instrumentation passes before loading it

265
00:10:29,279 --> 00:10:33,440
into the target s6 enclave

266
00:10:33,440 --> 00:10:35,200
finally to allow validation of

267
00:10:35,200 --> 00:10:37,760
enforcement partners validator verifies

268
00:10:37,760 --> 00:10:39,519
whether the final executable is hardened

269
00:10:39,519 --> 00:10:42,560
as expected and provides a functionality

270
00:10:42,560 --> 00:10:45,120
for developers to remotely verify both

271
00:10:45,120 --> 00:10:46,959
the process of synthesis and the

272
00:10:46,959 --> 00:10:50,800
hardened binary before execution

273
00:10:51,440 --> 00:10:53,920
however meeting those requirements under

274
00:10:53,920 --> 00:10:56,480
sgx is non-trivial

275
00:10:56,480 --> 00:10:58,399
for example instructions that we

276
00:10:58,399 --> 00:10:59,920
normally use to query the hardware

277
00:10:59,920 --> 00:11:02,399
capability of the system such as cpuid

278
00:11:02,399 --> 00:11:04,720
and syscalls are not allowed in s6

279
00:11:04,720 --> 00:11:05,920
enclave

280
00:11:05,920 --> 00:11:08,320
besides under the threat model of each

281
00:11:08,320 --> 00:11:11,760
of sgx operating system is not trusted a

282
00:11:11,760 --> 00:11:13,920
malicious operating system can simply

283
00:11:13,920 --> 00:11:15,440
return false information about the

284
00:11:15,440 --> 00:11:18,240
hardware configuration for example lack

285
00:11:18,240 --> 00:11:21,279
of tsx when ts6 is actually available to

286
00:11:21,279 --> 00:11:23,519
bypass enforcement of certain mitigation

287
00:11:23,519 --> 00:11:24,959
schemes

288
00:11:24,959 --> 00:11:27,600
so how to detect hardware configurations

289
00:11:27,600 --> 00:11:30,160
in a trusted way in the presence of

290
00:11:30,160 --> 00:11:32,720
privileged attackers

291
00:11:32,720 --> 00:11:34,720
meanwhile the target binary is

292
00:11:34,720 --> 00:11:36,399
dynamically generated by the pride wing

293
00:11:36,399 --> 00:11:39,279
synthesizer inside the sjx enclave while

294
00:11:39,279 --> 00:11:42,079
sjx remote attack station only supports

295
00:11:42,079 --> 00:11:44,800
a testing static contents in enclave

296
00:11:44,800 --> 00:11:47,839
upon enclave initialization

297
00:11:47,839 --> 00:11:50,320
so how to sustain the chain of trust of

298
00:11:50,320 --> 00:11:53,040
sjx remote attestation even in presence

299
00:11:53,040 --> 00:11:56,240
of dynamic code and data

300
00:11:56,240 --> 00:11:58,079
challenges exist for selective

301
00:11:58,079 --> 00:12:01,040
enforcement of schemes as well

302
00:12:01,040 --> 00:12:02,560
due to time constraints this

303
00:12:02,560 --> 00:12:04,160
presentation will focus mainly on

304
00:12:04,160 --> 00:12:06,480
selective enforcement of streams for

305
00:12:06,480 --> 00:12:11,200
more details please refer to our paper

306
00:12:11,200 --> 00:12:13,440
so we call practice approach load time

307
00:12:13,440 --> 00:12:15,600
synthesis by which the binary is

308
00:12:15,600 --> 00:12:17,839
synthesized and when it's

309
00:12:17,839 --> 00:12:19,680
being loaded for execution in the

310
00:12:19,680 --> 00:12:22,000
enclave

311
00:12:22,000 --> 00:12:23,680
product on the remote side takes the

312
00:12:23,680 --> 00:12:26,079
intermediate representation or ir

313
00:12:26,079 --> 00:12:29,519
of a user program as input

314
00:12:29,519 --> 00:12:31,040
it supports compilation and

315
00:12:31,040 --> 00:12:32,880
instrumentation of the ir to apply

316
00:12:32,880 --> 00:12:34,079
different instrumentation-based

317
00:12:34,079 --> 00:12:37,120
mitigation techniques

318
00:12:37,200 --> 00:12:39,200
parliament also provides various apis at

319
00:12:39,200 --> 00:12:41,120
different granularity levels for

320
00:12:41,120 --> 00:12:42,959
implementing mitigation schemes as

321
00:12:42,959 --> 00:12:46,000
instrumentation passes

322
00:12:46,639 --> 00:12:48,800
we decide to use ir instead of native

323
00:12:48,800 --> 00:12:52,240
binary as input for several reasons

324
00:12:52,240 --> 00:12:54,720
first ir is friendly for code analysis

325
00:12:54,720 --> 00:12:56,800
and instrumentations and has been used

326
00:12:56,800 --> 00:12:59,440
for such process purposes thanks to the

327
00:12:59,440 --> 00:13:02,880
events of modern compilers

328
00:13:02,880 --> 00:13:03,839
second

329
00:13:03,839 --> 00:13:06,639
ir is an abstraction of the source code

330
00:13:06,639 --> 00:13:09,440
and is platform independent so program

331
00:13:09,440 --> 00:13:12,000
in the form of ir is not restricted to a

332
00:13:12,000 --> 00:13:16,240
particular platform like native binaries

333
00:13:16,240 --> 00:13:18,480
for pride win we choose web assembly as

334
00:13:18,480 --> 00:13:21,200
our target ir

335
00:13:21,200 --> 00:13:24,000
webassembly is a lightweight

336
00:13:24,000 --> 00:13:26,320
ir with a small instruction set

337
00:13:26,320 --> 00:13:28,320
which only adds a small footprint to the

338
00:13:28,320 --> 00:13:31,920
enclave's trusted computing base

339
00:13:32,160 --> 00:13:34,399
webassembly is a target ir for multiple

340
00:13:34,399 --> 00:13:36,320
high level languages such as c c plus

341
00:13:36,320 --> 00:13:38,720
plus and rust so that the choice of

342
00:13:38,720 --> 00:13:40,880
development language for the user is

343
00:13:40,880 --> 00:13:43,440
more flexible

344
00:13:43,440 --> 00:13:45,200
and finally the compilation of

345
00:13:45,200 --> 00:13:46,959
webassembly is very straightforward

346
00:13:46,959 --> 00:13:49,120
providing flexible instrumentation

347
00:13:49,120 --> 00:13:51,519
options

348
00:13:51,760 --> 00:13:53,440
as we can see here the private

349
00:13:53,440 --> 00:13:55,760
background is only 1.26 megabytes

350
00:13:55,760 --> 00:13:58,480
comparing to the llvmx86 backend which

351
00:13:58,480 --> 00:14:00,639
is about which is about three magnitudes

352
00:14:00,639 --> 00:14:03,639
bigger

353
00:14:03,680 --> 00:14:06,000
so in order to convert the simple c

354
00:14:06,000 --> 00:14:08,160
program into webassembly ir

355
00:14:08,160 --> 00:14:09,839
the user will first compile the c

356
00:14:09,839 --> 00:14:12,240
program into webassembly binary

357
00:14:12,240 --> 00:14:14,000
the compilation is carried out by open

358
00:14:14,000 --> 00:14:16,160
source webassembly compilers such as

359
00:14:16,160 --> 00:14:17,440
m-scription

360
00:14:17,440 --> 00:14:19,440
and the process requires no source code

361
00:14:19,440 --> 00:14:21,519
change

362
00:14:21,519 --> 00:14:23,760
upon receiving the webassembly binary

363
00:14:23,760 --> 00:14:25,920
python will decode it into readable

364
00:14:25,920 --> 00:14:28,079
webassembly ir for instrumentation and

365
00:14:28,079 --> 00:14:31,839
compilation into native code

366
00:14:32,000 --> 00:14:33,920
the webassembly single path compilation

367
00:14:33,920 --> 00:14:35,360
allows us to enable flexible

368
00:14:35,360 --> 00:14:37,360
instrumentation for mitigation schemes

369
00:14:37,360 --> 00:14:40,320
at both ir and native level

370
00:14:40,320 --> 00:14:42,320
for example for a single instruction in

371
00:14:42,320 --> 00:14:44,320
webassembly ir we are able to hook

372
00:14:44,320 --> 00:14:45,920
either before or after the stack

373
00:14:45,920 --> 00:14:49,279
operations and insert extra logic

374
00:14:49,279 --> 00:14:51,600
meanwhile for conditional statements in

375
00:14:51,600 --> 00:14:53,760
the webassembly ir we can hook before or

376
00:14:53,760 --> 00:14:56,399
after the corresponding native code

377
00:14:56,399 --> 00:14:58,560
in order to hijack the control flow or

378
00:14:58,560 --> 00:15:00,160
insert memory friends instructions for

379
00:15:00,160 --> 00:15:01,760
mitigations against speculative

380
00:15:01,760 --> 00:15:04,880
execution for example

381
00:15:05,760 --> 00:15:07,600
to facilitate easy adoption of pride

382
00:15:07,600 --> 00:15:09,440
ring for developers we provide

383
00:15:09,440 --> 00:15:11,199
convenient instrumentation apis at

384
00:15:11,199 --> 00:15:13,680
different granularities

385
00:15:13,680 --> 00:15:15,839
at web sample ir level

386
00:15:15,839 --> 00:15:17,440
developers can

387
00:15:17,440 --> 00:15:19,760
can instrument at function level at each

388
00:15:19,760 --> 00:15:21,680
control statement or at the single

389
00:15:21,680 --> 00:15:24,000
instruction

390
00:15:24,000 --> 00:15:26,079
at native level developers can

391
00:15:26,079 --> 00:15:28,480
instrument at each machine instruction

392
00:15:28,480 --> 00:15:30,560
with such a capability tried wing can

393
00:15:30,560 --> 00:15:33,040
conveniently conveniently support most

394
00:15:33,040 --> 00:15:35,120
of not all instrumentation-based

395
00:15:35,120 --> 00:15:37,199
mitigation techniques against sdx

396
00:15:37,199 --> 00:15:40,439
channel attacks

397
00:15:40,639 --> 00:15:42,480
so after we know how predominant works

398
00:15:42,480 --> 00:15:44,399
let's look at an example to see what

399
00:15:44,399 --> 00:15:47,839
problem looks like in action

400
00:15:47,920 --> 00:15:49,839
the primary loader here detects that the

401
00:15:49,839 --> 00:15:52,240
target platform has tsx available and

402
00:15:52,240 --> 00:15:54,880
hyperthread disabled for example

403
00:15:54,880 --> 00:15:57,120
the pass manager gets the configuration

404
00:15:57,120 --> 00:15:59,440
information and decides to apply tsjx

405
00:15:59,440 --> 00:16:02,000
and slr as the as the optimal set of

406
00:16:02,000 --> 00:16:04,160
mitigations to benefit the performance

407
00:16:04,160 --> 00:16:06,240
of tsx hardware and prevent the

408
00:16:06,240 --> 00:16:07,759
redundant protection of

409
00:16:07,759 --> 00:16:10,959
hypersphere-based attacks

410
00:16:10,959 --> 00:16:13,199
on another target platform the pipeline

411
00:16:13,199 --> 00:16:16,399
prober detects that ts6 is not available

412
00:16:16,399 --> 00:16:19,519
while hyperthread is enabled

413
00:16:19,519 --> 00:16:21,040
based on the probe configuration

414
00:16:21,040 --> 00:16:23,759
information the path manager decided to

415
00:16:23,759 --> 00:16:26,079
enforce aslr collocation tests for

416
00:16:26,079 --> 00:16:29,040
hyperthread-based attacks and varies

417
00:16:29,040 --> 00:16:32,240
as a solar alternative to tsgx when ts6

418
00:16:32,240 --> 00:16:35,040
is not available

419
00:16:35,279 --> 00:16:36,880
to show the runtime overhead of the

420
00:16:36,880 --> 00:16:38,880
prepping loader itself we measure the

421
00:16:38,880 --> 00:16:41,279
execution time that predominant takes to

422
00:16:41,279 --> 00:16:42,880
synthesize native binaries with

423
00:16:42,880 --> 00:16:44,480
different compositions of mitigation

424
00:16:44,480 --> 00:16:45,440
schemes

425
00:16:45,440 --> 00:16:47,120
we divide the execution of pregnant

426
00:16:47,120 --> 00:16:48,959
loader into three stages the

427
00:16:48,959 --> 00:16:51,920
initialization stage the synthesis stage

428
00:16:51,920 --> 00:16:54,240
and additional overhead when the aslr is

429
00:16:54,240 --> 00:16:56,560
enforced

430
00:16:56,560 --> 00:16:58,800
overall the overhead of synthesizing

431
00:16:58,800 --> 00:17:00,959
native binary from a small program is

432
00:17:00,959 --> 00:17:03,680
around 50 to 60 milliseconds

433
00:17:03,680 --> 00:17:05,839
while from larger programs is less than

434
00:17:05,839 --> 00:17:08,000
500 milliseconds

435
00:17:08,000 --> 00:17:10,319
this overhead is only imposed once when

436
00:17:10,319 --> 00:17:11,919
synthesized the program for the first

437
00:17:11,919 --> 00:17:14,160
time

438
00:17:14,559 --> 00:17:16,240
we evaluate the runtime performance of

439
00:17:16,240 --> 00:17:18,160
pride win synthesize programs using

440
00:17:18,160 --> 00:17:20,720
realistic applications such as lighty

441
00:17:20,720 --> 00:17:23,199
sqlite and lib jpeg

442
00:17:23,199 --> 00:17:25,359
first without applying any mitigation

443
00:17:25,359 --> 00:17:27,520
schemes we measure the relative runtime

444
00:17:27,520 --> 00:17:29,280
performance and compare it with the

445
00:17:29,280 --> 00:17:30,880
native versions

446
00:17:30,880 --> 00:17:32,720
this metric tells us about the overhead

447
00:17:32,720 --> 00:17:34,480
of using webassembly as an ir for

448
00:17:34,480 --> 00:17:36,080
compilation

449
00:17:36,080 --> 00:17:38,000
the evaluation results show that

450
00:17:38,000 --> 00:17:40,080
predominant slows down lightly by 1.5

451
00:17:40,080 --> 00:17:40,880
times

452
00:17:40,880 --> 00:17:42,160
sqlite by

453
00:17:42,160 --> 00:17:46,080
1.3 times and lib jpeg by 1.4 times

454
00:17:46,080 --> 00:17:48,480
meanwhile recent studies shows that spec

455
00:17:48,480 --> 00:17:50,480
match mark compiled using in-browser

456
00:17:50,480 --> 00:17:52,720
webassembly just in time compilation

457
00:17:52,720 --> 00:17:56,320
slows down by 1.45 to 1.55 times which

458
00:17:56,320 --> 00:18:00,640
is comparable to what we have observed

459
00:18:00,640 --> 00:18:02,799
when mitigation schemes are enforced in

460
00:18:02,799 --> 00:18:04,960
the case of lib jpeg and sqlite the

461
00:18:04,960 --> 00:18:07,840
performance slows down by 1.9 times on

462
00:18:07,840 --> 00:18:09,840
average when only hardware based schemes

463
00:18:09,840 --> 00:18:11,200
are invoiced

464
00:18:11,200 --> 00:18:13,600
and 3.4 times when software-only schemes

465
00:18:13,600 --> 00:18:15,039
are enforced

466
00:18:15,039 --> 00:18:16,480
which are both comparable to the

467
00:18:16,480 --> 00:18:18,400
original implementations of those

468
00:18:18,400 --> 00:18:20,799
schemes

469
00:18:21,600 --> 00:18:23,360
to conclude

470
00:18:23,360 --> 00:18:25,600
we first talked about that hdx side

471
00:18:25,600 --> 00:18:28,320
channel attacks can co-exist while each

472
00:18:28,320 --> 00:18:30,240
mitigation scheme targets limited types

473
00:18:30,240 --> 00:18:32,400
of attacks

474
00:18:32,400 --> 00:18:34,559
we then pointed out that the existing

475
00:18:34,559 --> 00:18:36,480
model for deploying mitigation schemes

476
00:18:36,480 --> 00:18:37,840
is limited

477
00:18:37,840 --> 00:18:41,120
under such an attack scenario

478
00:18:41,120 --> 00:18:43,120
we propose part when to address the

479
00:18:43,120 --> 00:18:46,320
challenges of scheme composition

480
00:18:46,320 --> 00:18:47,520
program detects the hardware

481
00:18:47,520 --> 00:18:49,280
configuration of the target platform in

482
00:18:49,280 --> 00:18:51,039
a trusted way

483
00:18:51,039 --> 00:18:53,600
and adaptively enforces mitigation

484
00:18:53,600 --> 00:18:57,840
schemes with an enclave loader

485
00:18:57,840 --> 00:18:59,919
empire is extensible to support more

486
00:18:59,919 --> 00:19:03,280
instrumentation-based mitigation schemes

487
00:19:03,280 --> 00:19:05,120
hardwin is open source for the community

488
00:19:05,120 --> 00:19:07,440
to test use and contribute

489
00:19:07,440 --> 00:19:09,600
with this i conclude my speech and i'm

490
00:19:09,600 --> 00:19:13,559
happy to take any further questions

