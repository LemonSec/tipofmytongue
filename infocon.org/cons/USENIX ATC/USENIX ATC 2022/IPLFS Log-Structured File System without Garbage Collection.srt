1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:16,820 --> 00:00:19,080
structure file system without garbage

3
00:00:19,080 --> 00:00:20,760
collection

4
00:00:20,760 --> 00:00:22,520
here is the outline of presentation

5
00:00:22,520 --> 00:00:24,779
first of all I will show you the

6
00:00:24,779 --> 00:00:27,060
background and motivation second I will

7
00:00:27,060 --> 00:00:29,519
explain the problem that we faced third

8
00:00:29,519 --> 00:00:31,320
and first I will introduce you our

9
00:00:31,320 --> 00:00:34,079
development iplfs and interval mapping

10
00:00:34,079 --> 00:00:35,940
at the end I will show you the

11
00:00:35,940 --> 00:00:38,460
evaluation and conclusion

12
00:00:38,460 --> 00:00:39,960
let's start with background and

13
00:00:39,960 --> 00:00:41,640
motivation

14
00:00:41,640 --> 00:00:44,460
in 1991 was emblem developed a low

15
00:00:44,460 --> 00:00:46,800
structural file system the low structure

16
00:00:46,800 --> 00:00:48,899
fast system is designed to optimize the

17
00:00:48,899 --> 00:00:51,059
right performance it trace the first

18
00:00:51,059 --> 00:00:52,980
system partitioned as a single load and

19
00:00:52,980 --> 00:00:55,559
white data plug in an open only manner

20
00:00:55,559 --> 00:00:57,539
this figure shows how the low structure

21
00:00:57,539 --> 00:00:59,940
of a system opens the data block

22
00:00:59,940 --> 00:01:02,100
for the right of a block t

23
00:01:02,100 --> 00:01:04,260
the block D is appended at the end of

24
00:01:04,260 --> 00:01:05,220
the low

25
00:01:05,220 --> 00:01:07,439
for update of a block a to a prime

26
00:01:07,439 --> 00:01:10,020
though a prime is appended and a is

27
00:01:10,020 --> 00:01:11,280
invalidated

28
00:01:11,280 --> 00:01:13,439
likewise the low social file system

29
00:01:13,439 --> 00:01:17,100
opens new blog at the end of the low

30
00:01:17,100 --> 00:01:19,080
the low social file system converts

31
00:01:19,080 --> 00:01:20,759
random right on a file into the

32
00:01:20,759 --> 00:01:23,220
sequential right the block is appended

33
00:01:23,220 --> 00:01:25,320
at the end of the load regardless of the

34
00:01:25,320 --> 00:01:27,360
Block's index in a fire

35
00:01:27,360 --> 00:01:29,700
this open only nature enhances the right

36
00:01:29,700 --> 00:01:31,740
performance by avoiding six operations

37
00:01:31,740 --> 00:01:34,320
in a disk

38
00:01:34,320 --> 00:01:36,420
likewise the log social file system

39
00:01:36,420 --> 00:01:38,340
efficiently handles render white

40
00:01:38,340 --> 00:01:39,659
workload

41
00:01:39,659 --> 00:01:41,640
its design is a perfect fit for the

42
00:01:41,640 --> 00:01:43,500
right terminal workload and for slow

43
00:01:43,500 --> 00:01:46,200
ride device such as flash 3G and SML

44
00:01:46,200 --> 00:01:47,340
disk

45
00:01:47,340 --> 00:01:49,380
however the load structural file system

46
00:01:49,380 --> 00:01:51,299
has not been received till the recent

47
00:01:51,299 --> 00:01:52,320
days

48
00:01:52,320 --> 00:01:55,140
since it's released at 1991 there are a

49
00:01:55,140 --> 00:01:56,939
few deployments at the data center and

50
00:01:56,939 --> 00:01:59,700
mobile file system

51
00:01:59,700 --> 00:02:01,560
why is the local social file system not

52
00:02:01,560 --> 00:02:03,119
widely adopted

53
00:02:03,119 --> 00:02:06,960
the reason is garbage collection

54
00:02:06,960 --> 00:02:08,880
as the low structural file system keeps

55
00:02:08,880 --> 00:02:10,919
appending the data blocks it will run

56
00:02:10,919 --> 00:02:13,020
out of free space for logging

57
00:02:13,020 --> 00:02:15,180
to obtain the free space for logging the

58
00:02:15,180 --> 00:02:17,040
load structural file system reclaims the

59
00:02:17,040 --> 00:02:18,599
invalid blocks

60
00:02:18,599 --> 00:02:20,819
it migrates valid Block in the old

61
00:02:20,819 --> 00:02:23,099
segments to the free segment and face

62
00:02:23,099 --> 00:02:24,660
the old segments

63
00:02:24,660 --> 00:02:26,459
this activity is called garbage

64
00:02:26,459 --> 00:02:28,500
collection

65
00:02:28,500 --> 00:02:30,300
the bad news is that garbage collection

66
00:02:30,300 --> 00:02:31,500
is costly

67
00:02:31,500 --> 00:02:33,239
the garbage collection generates an

68
00:02:33,239 --> 00:02:35,160
additional i o when migrating valid

69
00:02:35,160 --> 00:02:36,239
blocks

70
00:02:36,239 --> 00:02:38,280
also checkpoints triggered before and

71
00:02:38,280 --> 00:02:40,440
after the garbage collection flush the

72
00:02:40,440 --> 00:02:42,840
cash metadata to the disk

73
00:02:42,840 --> 00:02:44,940
now global locks for checkpoint and

74
00:02:44,940 --> 00:02:46,980
garbage collection block 5 operations

75
00:02:46,980 --> 00:02:50,160
such as white and opent

76
00:02:50,160 --> 00:02:52,140
we measure the overhead of garbage

77
00:02:52,140 --> 00:02:54,360
collection with ytsp Benchmark and the

78
00:02:54,360 --> 00:02:55,860
sister wizard

79
00:02:55,860 --> 00:02:57,660
when the garbage collection starts the

80
00:02:57,660 --> 00:02:59,879
throughput significantly decreases and

81
00:02:59,879 --> 00:03:02,580
the average update latency increases

82
00:03:02,580 --> 00:03:04,379
in other words garbage collection

83
00:03:04,379 --> 00:03:08,239
degrades performance and predictability

84
00:03:08,459 --> 00:03:11,459
our research start with one question why

85
00:03:11,459 --> 00:03:13,920
does the garbage collection exist

86
00:03:13,920 --> 00:03:16,620
our answer is the size of logical file

87
00:03:16,620 --> 00:03:19,319
system partition is limited

88
00:03:19,319 --> 00:03:21,480
the size of Legacy for system partition

89
00:03:21,480 --> 00:03:23,099
is limited by the size of physical

90
00:03:23,099 --> 00:03:24,480
storage

91
00:03:24,480 --> 00:03:26,640
therefore the file system has to reduce

92
00:03:26,640 --> 00:03:28,620
the logical blocks and the garbage

93
00:03:28,620 --> 00:03:31,500
collection is inevitable

94
00:03:31,500 --> 00:03:33,180
then what if the file system partition

95
00:03:33,180 --> 00:03:35,159
is virtually infinite

96
00:03:35,159 --> 00:03:37,080
in that case the file system does not

97
00:03:37,080 --> 00:03:39,900
need to reuse The Logical blocks

98
00:03:39,900 --> 00:03:41,879
we propose to separate the first system

99
00:03:41,879 --> 00:03:44,819
partition size from the disk size and

100
00:03:44,819 --> 00:03:46,379
make the first system partition size

101
00:03:46,379 --> 00:03:49,019
very large so the low structural flash

102
00:03:49,019 --> 00:03:50,280
system does not perform garbage

103
00:03:50,280 --> 00:03:52,620
collection

104
00:03:52,620 --> 00:03:54,780
the infinite logical partition does not

105
00:03:54,780 --> 00:03:56,640
mean that we can write valid blocks

106
00:03:56,640 --> 00:03:58,680
beyond the storage capacity

107
00:03:58,680 --> 00:04:00,860
the file system has three types of block

108
00:04:00,860 --> 00:04:03,599
valid invalid and free

109
00:04:03,599 --> 00:04:06,180
in the in the legal C4 system some of

110
00:04:06,180 --> 00:04:08,459
their sizes is less or equal to the size

111
00:04:08,459 --> 00:04:10,019
of storage

112
00:04:10,019 --> 00:04:12,060
for the infinite logical partition the

113
00:04:12,060 --> 00:04:14,040
size of total value blocks should be

114
00:04:14,040 --> 00:04:17,639
less or equal to the storage size

115
00:04:17,639 --> 00:04:19,440
the size of our infinite logical

116
00:04:19,440 --> 00:04:21,839
partition is H data byte

117
00:04:21,839 --> 00:04:24,120
these are this size is large enough to

118
00:04:24,120 --> 00:04:26,100
provide free logical blocks during the

119
00:04:26,100 --> 00:04:28,440
flash storage lifespan

120
00:04:28,440 --> 00:04:30,660
first cell can be erased or programmed

121
00:04:30,660 --> 00:04:33,240
for the only limited number of times

122
00:04:33,240 --> 00:04:35,759
the first Trojan lifespan expires long

123
00:04:35,759 --> 00:04:38,460
before it fully uses up to 8 zettabyte

124
00:04:38,460 --> 00:04:41,299
logical partition

125
00:04:41,460 --> 00:04:43,740
this figure depicts actively used for

126
00:04:43,740 --> 00:04:46,020
system partition in the infinite logical

127
00:04:46,020 --> 00:04:47,400
partition

128
00:04:47,400 --> 00:04:49,139
we name actively use file system

129
00:04:49,139 --> 00:04:51,780
partition as mapping interval

130
00:04:51,780 --> 00:04:53,580
the mapping intervals start from the

131
00:04:53,580 --> 00:04:55,979
first valid logical block and ends at

132
00:04:55,979 --> 00:04:59,400
the last valid logical block

133
00:04:59,400 --> 00:05:01,560
the mapping interval is updated by a

134
00:05:01,560 --> 00:05:03,900
pendant discard when the head of the

135
00:05:03,900 --> 00:05:06,120
mapping interval is discarded

136
00:05:06,120 --> 00:05:09,300
then his head moved to the higher LBA

137
00:05:09,300 --> 00:05:11,880
when a block is appended the tale of

138
00:05:11,880 --> 00:05:13,620
mapping interval moves toward the higher

139
00:05:13,620 --> 00:05:15,120
LBA

140
00:05:15,120 --> 00:05:17,400
likewise the mapping intervals slides

141
00:05:17,400 --> 00:05:20,100
through the higher LBA and its size can

142
00:05:20,100 --> 00:05:22,080
change

143
00:05:22,080 --> 00:05:24,120
here is another figure that explains the

144
00:05:24,120 --> 00:05:27,000
actively used for system partition

145
00:05:27,000 --> 00:05:28,740
the mapping interval keeps sliding

146
00:05:28,740 --> 00:05:30,780
through the higher LBA

147
00:05:30,780 --> 00:05:33,180
inside the mapping interval there are

148
00:05:33,180 --> 00:05:36,479
partially discarded mappings

149
00:05:36,479 --> 00:05:40,320
let's move on to the problem formulation

150
00:05:40,320 --> 00:05:42,240
to handle very large persistent

151
00:05:42,240 --> 00:05:44,759
partition new overhead arises both on

152
00:05:44,759 --> 00:05:46,560
file system and FTL

153
00:05:46,560 --> 00:05:48,479
on the far system side there is a

154
00:05:48,479 --> 00:05:50,220
metadata overhead

155
00:05:50,220 --> 00:05:52,259
the Legacy log structure file system has

156
00:05:52,259 --> 00:05:54,660
some metadata whose size becomes huge

157
00:05:54,660 --> 00:05:57,479
with the infinite logical partition

158
00:05:57,479 --> 00:05:59,940
on FTL side there is a mapping interval

159
00:05:59,940 --> 00:06:01,020
overhead

160
00:06:01,020 --> 00:06:03,479
the Legacy mapping table consumes a huge

161
00:06:03,479 --> 00:06:05,340
amount of memory with the infinite

162
00:06:05,340 --> 00:06:07,979
logical partition

163
00:06:07,979 --> 00:06:10,440
to reduce the overhead we have developed

164
00:06:10,440 --> 00:06:13,080
a new i o stack as shown in this figure

165
00:06:13,080 --> 00:06:15,440
our development consists of two parts

166
00:06:15,440 --> 00:06:18,600
IPL FS the logs of surface is set with

167
00:06:18,600 --> 00:06:20,759
the infinite load partition and interval

168
00:06:20,759 --> 00:06:22,380
mapping of space efficient mapping

169
00:06:22,380 --> 00:06:24,900
structure for FTL

170
00:06:24,900 --> 00:06:28,620
let's take a look at the iplfs first

171
00:06:28,620 --> 00:06:31,520
this is very simple overview of iplfs

172
00:06:31,520 --> 00:06:34,380
iplfs opens on 64-bit sector space

173
00:06:34,380 --> 00:06:37,020
without garbage collection at the same

174
00:06:37,020 --> 00:06:39,479
time IPL FS dispatches discard command

175
00:06:39,479 --> 00:06:41,460
to the strategy for the invalidated

176
00:06:41,460 --> 00:06:42,860
blocks

177
00:06:42,860 --> 00:06:45,479
iplfs performs a unique operation named

178
00:06:45,479 --> 00:06:47,460
discard logging I will talk about the

179
00:06:47,460 --> 00:06:49,979
discard login later

180
00:06:49,979 --> 00:06:53,220
the iplfs is built on f2fs one of the

181
00:06:53,220 --> 00:06:55,500
Legacy log structure file systems

182
00:06:55,500 --> 00:06:58,380
ftfs has three major metadata block

183
00:06:58,380 --> 00:07:01,620
bitmap reverse mapping and a file index

184
00:07:01,620 --> 00:07:03,660
the sizes of block bitmap and reverse

185
00:07:03,660 --> 00:07:05,340
mapping are proportional to The Logical

186
00:07:05,340 --> 00:07:06,900
partition size

187
00:07:06,900 --> 00:07:09,060
with the infinite logical partition the

188
00:07:09,060 --> 00:07:12,360
resizes become 500 health petabyte and 8

189
00:07:12,360 --> 00:07:14,699
exabyte irrespectively

190
00:07:14,699 --> 00:07:18,479
both sizes are too huge to maintain

191
00:07:18,479 --> 00:07:20,520
therefore we carefully trim the block

192
00:07:20,520 --> 00:07:23,520
bitmap and reverse mapping in the iplfs

193
00:07:23,520 --> 00:07:26,039
to verify whether it is okay to remove

194
00:07:26,039 --> 00:07:29,940
both of them resource for their use

195
00:07:29,940 --> 00:07:32,099
before talking about their use let me

196
00:07:32,099 --> 00:07:34,259
explain the discard command first

197
00:07:34,259 --> 00:07:36,060
the discard command contains information

198
00:07:36,060 --> 00:07:38,520
of vision to be discarded

199
00:07:38,520 --> 00:07:41,160
it informs SSD of the file system blocks

200
00:07:41,160 --> 00:07:43,620
that are no longer used by those file

201
00:07:43,620 --> 00:07:45,000
system

202
00:07:45,000 --> 00:07:46,919
this card command helps to prohibit

203
00:07:46,919 --> 00:07:49,080
after garbage collection module from

204
00:07:49,080 --> 00:07:53,180
migrating the invalid file system blocks

205
00:07:53,220 --> 00:07:56,160
this is how the f2fs discussed the file

206
00:07:56,160 --> 00:07:57,479
system block

207
00:07:57,479 --> 00:07:59,520
when the fast system plug is invalided

208
00:07:59,520 --> 00:08:01,860
by the garbage collection truncate and

209
00:08:01,860 --> 00:08:04,319
on link the fast system on sets

210
00:08:04,319 --> 00:08:06,780
corresponding bit in the block bitmap

211
00:08:06,780 --> 00:08:08,819
at the checkpoint routine the file

212
00:08:08,819 --> 00:08:11,220
system scans the three block bitmaps and

213
00:08:11,220 --> 00:08:13,259
creates Discord commands

214
00:08:13,259 --> 00:08:15,960
only when IO is idle at most eight

215
00:08:15,960 --> 00:08:18,479
discard commands are dispatched at 50

216
00:08:18,479 --> 00:08:21,660
millisecond time interval

217
00:08:21,660 --> 00:08:24,240
let's go back to the IPL FS metadata

218
00:08:24,240 --> 00:08:26,099
this table shows the use of each

219
00:08:26,099 --> 00:08:28,560
metadata since there is no garbage

220
00:08:28,560 --> 00:08:31,139
collection in IPL FS we remove the

221
00:08:31,139 --> 00:08:32,760
reverse mapping

222
00:08:32,760 --> 00:08:35,159
the block bitmap is used for two cases

223
00:08:35,159 --> 00:08:37,919
garbage collection and discard

224
00:08:37,919 --> 00:08:40,679
we develop new metadata for this card to

225
00:08:40,679 --> 00:08:42,659
replace the block bitmap

226
00:08:42,659 --> 00:08:44,880
they are named discard bitmap and

227
00:08:44,880 --> 00:08:46,500
discard law

228
00:08:46,500 --> 00:08:49,200
discard bitmap in memory is for creating

229
00:08:49,200 --> 00:08:50,880
the Discord commands

230
00:08:50,880 --> 00:08:53,220
this got low on disk is for crash

231
00:08:53,220 --> 00:08:56,459
recovery of Discord commands

232
00:08:56,459 --> 00:08:58,740
for this car bitmap indicates the blocks

233
00:08:58,740 --> 00:09:01,200
that should be discarded a single

234
00:09:01,200 --> 00:09:02,880
discard bitmap represents a section

235
00:09:02,880 --> 00:09:06,300
whose size is one gigabyte by default

236
00:09:06,300 --> 00:09:08,459
so discard command is organized with h

237
00:09:08,459 --> 00:09:11,339
table whose key is section number

238
00:09:11,339 --> 00:09:13,080
so this card feedback differs from the

239
00:09:13,080 --> 00:09:15,480
Legacy Block bitmap in that it does not

240
00:09:15,480 --> 00:09:17,399
maintain every section in The Logical

241
00:09:17,399 --> 00:09:19,019
partition

242
00:09:19,019 --> 00:09:21,420
so this car bitmap is created if there

243
00:09:21,420 --> 00:09:23,700
is no existing discard bitmap for the

244
00:09:23,700 --> 00:09:26,339
incoming invalidated blocks

245
00:09:26,339 --> 00:09:28,560
it is deleted after being transformed

246
00:09:28,560 --> 00:09:30,060
into the Discord comments at the

247
00:09:30,060 --> 00:09:32,479
checkpoint

248
00:09:32,700 --> 00:09:36,060
this is the descript mechanism of iplfs

249
00:09:36,060 --> 00:09:38,160
it is almost similar to The Legacy log

250
00:09:38,160 --> 00:09:40,380
structure file system except that this

251
00:09:40,380 --> 00:09:43,700
card bitmap replaces the block bitmap

252
00:09:43,700 --> 00:09:46,380
iplfs dispatches this card in a more

253
00:09:46,380 --> 00:09:48,720
aggressive fashion than the Legacy Luxor

254
00:09:48,720 --> 00:09:50,519
so far system

255
00:09:50,519 --> 00:09:53,760
whether or not iOS either at most 16

256
00:09:53,760 --> 00:09:55,980
discard commands are dispatched at 15

257
00:09:55,980 --> 00:09:59,480
millisecond time interval

258
00:09:59,700 --> 00:10:01,500
since the score bitmap and Discord

259
00:10:01,500 --> 00:10:03,899
command are in memory they can be lost

260
00:10:03,899 --> 00:10:06,779
by power failure and this brings about a

261
00:10:06,779 --> 00:10:07,980
new problem

262
00:10:07,980 --> 00:10:11,100
let me explain the problem step by step

263
00:10:11,100 --> 00:10:13,680
discard bitmap is containing invalidated

264
00:10:13,680 --> 00:10:15,959
block information

265
00:10:15,959 --> 00:10:18,360
from the Discord bitmap discard commands

266
00:10:18,360 --> 00:10:20,279
are created

267
00:10:20,279 --> 00:10:22,380
when the crash occurs

268
00:10:22,380 --> 00:10:24,120
we'll lose this card command in the

269
00:10:24,120 --> 00:10:25,800
memory

270
00:10:25,800 --> 00:10:28,140
with a Discord command first pages are

271
00:10:28,140 --> 00:10:30,779
never invalidated and unnecessary take

272
00:10:30,779 --> 00:10:32,640
up the storage space

273
00:10:32,640 --> 00:10:35,279
we call this problem storage leak

274
00:10:35,279 --> 00:10:37,680
this is a unique problem that arises in

275
00:10:37,680 --> 00:10:40,500
the iplfs

276
00:10:40,500 --> 00:10:42,899
to prevent Australian League we propose

277
00:10:42,899 --> 00:10:44,519
this car logging

278
00:10:44,519 --> 00:10:46,800
idea is very simple just load the

279
00:10:46,800 --> 00:10:48,720
discard commands into a checkpoint pack

280
00:10:48,720 --> 00:10:52,140
and make them recoverable from the crash

281
00:10:52,140 --> 00:10:54,300
the checkpoint pack is saved on the disk

282
00:10:54,300 --> 00:10:57,740
so we don't lose it by the trash

283
00:10:57,779 --> 00:10:59,459
let me explain this car logging

284
00:10:59,459 --> 00:11:01,560
mechanism step by step

285
00:11:01,560 --> 00:11:03,839
referring to this corporate map

286
00:11:03,839 --> 00:11:05,880
to discard commands are created in

287
00:11:05,880 --> 00:11:07,440
memory

288
00:11:07,440 --> 00:11:10,079
then we conduct is called logging in the

289
00:11:10,079 --> 00:11:11,640
checkpoint pad

290
00:11:11,640 --> 00:11:15,660
the checkpoint pack is written on a disk

291
00:11:15,660 --> 00:11:17,820
after the crash the discard commands in

292
00:11:17,820 --> 00:11:20,720
the memory are lost

293
00:11:21,000 --> 00:11:23,339
it's time to recover the discard log

294
00:11:23,339 --> 00:11:24,720
first of all

295
00:11:24,720 --> 00:11:26,279
read the checkpoint pack from the

296
00:11:26,279 --> 00:11:27,120
storage

297
00:11:27,120 --> 00:11:29,100
then we discard looks in the checkpoint

298
00:11:29,100 --> 00:11:32,339
pack and recover the discard commands

299
00:11:32,339 --> 00:11:34,680
after the recovery IPL office start

300
00:11:34,680 --> 00:11:37,680
dispatching discard commands

301
00:11:37,680 --> 00:11:40,019
then FTL mappings and Flash pages are

302
00:11:40,019 --> 00:11:41,399
invalidated

303
00:11:41,399 --> 00:11:43,800
to sum up the discard log enables to

304
00:11:43,800 --> 00:11:47,779
complete this card even after the crash

305
00:11:47,820 --> 00:11:49,860
here is the complete file system layout

306
00:11:49,860 --> 00:11:51,420
of iplfs

307
00:11:51,420 --> 00:11:53,940
we add space for discard log inside the

308
00:11:53,940 --> 00:11:55,440
checkpoint path

309
00:11:55,440 --> 00:11:57,180
and this is the end of the file system

310
00:11:57,180 --> 00:11:58,980
section for the infinite logical

311
00:11:58,980 --> 00:12:01,380
partition

312
00:12:01,380 --> 00:12:03,420
now let's move on to the after part for

313
00:12:03,420 --> 00:12:05,519
the infinite logical partition

314
00:12:05,519 --> 00:12:08,100
we developed a new mapping scheme of FTL

315
00:12:08,100 --> 00:12:12,120
and its name is interval mapping

316
00:12:12,120 --> 00:12:14,519
there are various types of Legacy FTL

317
00:12:14,519 --> 00:12:16,620
mapping techniques such as page mapping

318
00:12:16,620 --> 00:12:18,480
block mapping superblock mapping and so

319
00:12:18,480 --> 00:12:19,440
on

320
00:12:19,440 --> 00:12:21,600
those mapping tables map the whole

321
00:12:21,600 --> 00:12:23,640
logical partition

322
00:12:23,640 --> 00:12:25,500
with the infinite logical partition

323
00:12:25,500 --> 00:12:29,339
Legacy mapping table gets huge

324
00:12:29,339 --> 00:12:31,560
for example the size of page mapping

325
00:12:31,560 --> 00:12:34,800
table becomes 8 exabyte it is almost

326
00:12:34,800 --> 00:12:37,019
impossible to map the infinite logical

327
00:12:37,019 --> 00:12:41,279
partition with the Legacy mapping tables

328
00:12:41,279 --> 00:12:43,320
this is an overview of interval mapping

329
00:12:43,320 --> 00:12:45,480
a specification mapping structure for

330
00:12:45,480 --> 00:12:48,060
the infinite logical partition

331
00:12:48,060 --> 00:12:50,459
interval mapping only must actively used

332
00:12:50,459 --> 00:12:53,100
region in The Logical partition

333
00:12:53,100 --> 00:12:55,560
the actively used Vision can partially

334
00:12:55,560 --> 00:12:58,200
include invalid mappings

335
00:12:58,200 --> 00:13:00,060
to exclude the mappings for the

336
00:13:00,060 --> 00:13:02,760
invalidated lbas interval mapping is

337
00:13:02,760 --> 00:13:06,120
designed as previous mapping structure

338
00:13:06,120 --> 00:13:08,760
in a leaf note of the tree we apply our

339
00:13:08,760 --> 00:13:11,279
new mapping scheme named fixed region

340
00:13:11,279 --> 00:13:15,560
mapping to reduce the memory footprint

341
00:13:15,660 --> 00:13:17,760
the figure shows mapping interval and

342
00:13:17,760 --> 00:13:19,800
interval mapping tree

343
00:13:19,800 --> 00:13:22,260
interval mapping 3 only Maps the mapping

344
00:13:22,260 --> 00:13:24,300
interval

345
00:13:24,300 --> 00:13:27,180
by the Discord and open mapping interval

346
00:13:27,180 --> 00:13:29,100
is updated and moves through the higher

347
00:13:29,100 --> 00:13:31,380
LDA

348
00:13:31,380 --> 00:13:33,480
then interval mapping tree is updated to

349
00:13:33,480 --> 00:13:36,600
map the new mapping interval

350
00:13:36,600 --> 00:13:38,639
a structure of internal mapping tree is

351
00:13:38,639 --> 00:13:40,980
tree level 3. there are different types

352
00:13:40,980 --> 00:13:42,959
of nodes on each layer

353
00:13:42,959 --> 00:13:45,000
the names of the node at the first

354
00:13:45,000 --> 00:13:47,519
second and third level are root nodes

355
00:13:47,519 --> 00:13:51,620
Zone node and map node respectively

356
00:13:51,779 --> 00:13:53,579
the root node maintains the range of

357
00:13:53,579 --> 00:13:55,740
mapping interval and an array of Zone

358
00:13:55,740 --> 00:13:57,240
node pointers

359
00:13:57,240 --> 00:13:59,820
this root note shrinks and expands to

360
00:13:59,820 --> 00:14:02,040
follow up the mapping interval

361
00:14:02,040 --> 00:14:04,560
the size of root node can change up to

362
00:14:04,560 --> 00:14:07,699
the mapping interval size

363
00:14:07,740 --> 00:14:09,899
The Zone node represents a single zone

364
00:14:09,899 --> 00:14:13,560
we Define the zone as 16 gigabyte region

365
00:14:13,560 --> 00:14:15,540
the donor maintains the map node

366
00:14:15,540 --> 00:14:16,980
pointers

367
00:14:16,980 --> 00:14:18,899
The Zone node is still located when

368
00:14:18,899 --> 00:14:23,180
every map node pointer is invalidated

369
00:14:23,220 --> 00:14:25,800
or memnot maintains lb to PBA mappings

370
00:14:25,800 --> 00:14:28,200
for a 16 megabyte region

371
00:14:28,200 --> 00:14:30,420
total size of the matte node accounts

372
00:14:30,420 --> 00:14:33,480
for 99 in term of the interval mapping

373
00:14:33,480 --> 00:14:34,860
tree size

374
00:14:34,860 --> 00:14:37,019
with this in reducing metal size is a

375
00:14:37,019 --> 00:14:40,019
key to reduce internal mapping tree size

376
00:14:40,019 --> 00:14:42,240
we develop a new mapping scheme named

377
00:14:42,240 --> 00:14:46,399
fixed visual mapping for the map node

378
00:14:46,620 --> 00:14:48,480
the goal of the fixed visual mapping is

379
00:14:48,480 --> 00:14:51,000
mapping only valid rbas and excluding

380
00:14:51,000 --> 00:14:52,980
invalid Air Base

381
00:14:52,980 --> 00:14:55,079
fixed visual mapping consists of two

382
00:14:55,079 --> 00:14:57,899
elements region directory and region

383
00:14:57,899 --> 00:14:59,160
mapping

384
00:14:59,160 --> 00:15:01,680
the visual mapping represents the

385
00:15:01,680 --> 00:15:04,680
consecutive valid mappings it consists

386
00:15:04,680 --> 00:15:07,260
of a header and a mapping array the

387
00:15:07,260 --> 00:15:09,720
header contains dark LBA and of the

388
00:15:09,720 --> 00:15:11,160
valid region

389
00:15:11,160 --> 00:15:13,440
a visual mapping is created for each

390
00:15:13,440 --> 00:15:15,240
valid region

391
00:15:15,240 --> 00:15:17,160
the region directory provides location

392
00:15:17,160 --> 00:15:19,860
of visual mapping it points to the

393
00:15:19,860 --> 00:15:22,740
header of the visual mapping

394
00:15:22,740 --> 00:15:25,019
to fix visual mapping enables to compact

395
00:15:25,019 --> 00:15:27,540
the map node this figure depicts on

396
00:15:27,540 --> 00:15:30,000
initial map node in the map node every

397
00:15:30,000 --> 00:15:32,100
mapping is valid so there is a single

398
00:15:32,100 --> 00:15:33,600
valid region

399
00:15:33,600 --> 00:15:35,639
there is the original mapping for the

400
00:15:35,639 --> 00:15:37,860
single valid region and also there is a

401
00:15:37,860 --> 00:15:40,199
single Vision directory pointing to the

402
00:15:40,199 --> 00:15:42,899
header of the visual mapping

403
00:15:42,899 --> 00:15:45,180
as time goes by the region is partially

404
00:15:45,180 --> 00:15:48,240
invalidated by this card

405
00:15:48,240 --> 00:15:50,220
then the map node is reorganized to

406
00:15:50,220 --> 00:15:52,920
reduce its size we call this map node

407
00:15:52,920 --> 00:15:55,320
compaction the map load compaction is

408
00:15:55,320 --> 00:15:57,839
divided into the four steps step one

409
00:15:57,839 --> 00:16:00,600
divide the lb space of the map node into

410
00:16:00,600 --> 00:16:02,579
the fixed regions

411
00:16:02,579 --> 00:16:05,040
the size of dividing region is minimum

412
00:16:05,040 --> 00:16:07,440
hole size and for more details please

413
00:16:07,440 --> 00:16:09,480
refer to our paper

414
00:16:09,480 --> 00:16:12,180
in this case lb space is divided into

415
00:16:12,180 --> 00:16:14,519
the four regions

416
00:16:14,519 --> 00:16:17,459
Step 2 for each region create the New

417
00:16:17,459 --> 00:16:18,779
Vision directory

418
00:16:18,779 --> 00:16:20,760
in this case total four Vision

419
00:16:20,760 --> 00:16:24,000
directories are created for reason 0 1 2

420
00:16:24,000 --> 00:16:26,040
and 3.

421
00:16:26,040 --> 00:16:28,260
step 3 create original mapping for each

422
00:16:28,260 --> 00:16:31,019
valid region in this case total three

423
00:16:31,019 --> 00:16:33,720
original mappings are created

424
00:16:33,720 --> 00:16:36,120
step 4 make the reason directory point

425
00:16:36,120 --> 00:16:38,220
to the original mappings we create

426
00:16:38,220 --> 00:16:41,339
Vision directory for each valid region

427
00:16:41,339 --> 00:16:44,160
for each Vision after Vision mapping is

428
00:16:44,160 --> 00:16:46,500
included in the ice region then the ice

429
00:16:46,500 --> 00:16:48,660
region directory points to that region

430
00:16:48,660 --> 00:16:49,620
mapping

431
00:16:49,620 --> 00:16:51,839
for example please look at the blue

432
00:16:51,839 --> 00:16:52,920
region

433
00:16:52,920 --> 00:16:54,839
the blue region is included in the

434
00:16:54,839 --> 00:16:57,360
region 0 so the region directory is zero

435
00:16:57,360 --> 00:16:59,519
points to the blue region mapping

436
00:16:59,519 --> 00:17:01,019
this is the end of the map node

437
00:17:01,019 --> 00:17:03,000
compaction

438
00:17:03,000 --> 00:17:05,939
let's move on to the evaluation section

439
00:17:05,939 --> 00:17:08,520
this is the evaluation setup we tested

440
00:17:08,520 --> 00:17:11,699
on storage Cosmos Plus open SSD

441
00:17:11,699 --> 00:17:14,160
in this presentation I will introduce

442
00:17:14,160 --> 00:17:16,559
only two experiments for this garbage

443
00:17:16,559 --> 00:17:18,599
collection elimination test with a fire

444
00:17:18,599 --> 00:17:20,640
Benchmark and second is Method

445
00:17:20,640 --> 00:17:22,740
compaction test with firestable workload

446
00:17:22,740 --> 00:17:24,900
and firebance

447
00:17:24,900 --> 00:17:26,459
in the garbage collection elimination

448
00:17:26,459 --> 00:17:30,000
test we evaluated on two cases forces

449
00:17:30,000 --> 00:17:31,620
when only fast system garbage collection

450
00:17:31,620 --> 00:17:34,140
occurs and second is when both fast

451
00:17:34,140 --> 00:17:36,000
system and after garbage collections

452
00:17:36,000 --> 00:17:37,320
occur

453
00:17:37,320 --> 00:17:39,179
the first graph shows the result of

454
00:17:39,179 --> 00:17:41,520
force case when the fast system gravity

455
00:17:41,520 --> 00:17:44,280
collection starts the throughput of f2fs

456
00:17:44,280 --> 00:17:46,620
decreased by a chance while that of

457
00:17:46,620 --> 00:17:48,660
iplfs is steady

458
00:17:48,660 --> 00:17:50,880
it is because iplfs is free from the

459
00:17:50,880 --> 00:17:52,860
fast system garbage collection

460
00:17:52,860 --> 00:17:55,020
the second graph shows the result of the

461
00:17:55,020 --> 00:17:56,220
second case

462
00:17:56,220 --> 00:17:58,740
while the throughput of iplfs decreases

463
00:17:58,740 --> 00:18:01,799
because of after garbage collection IPL

464
00:18:01,799 --> 00:18:05,039
FST outperforms ftfs since it does not

465
00:18:05,039 --> 00:18:06,660
suffer from the fast system garbage

466
00:18:06,660 --> 00:18:08,700
collection

467
00:18:08,700 --> 00:18:10,919
we evaluate map node compaction on

468
00:18:10,919 --> 00:18:13,320
firestable workload and file bench which

469
00:18:13,320 --> 00:18:15,360
performs random right

470
00:18:15,360 --> 00:18:19,440
we measure three size for 1 600 seconds

471
00:18:19,440 --> 00:18:21,840
without compaction the tree size keeps

472
00:18:21,840 --> 00:18:23,640
increasing because of the partially

473
00:18:23,640 --> 00:18:25,260
discluded holes

474
00:18:25,260 --> 00:18:29,580
with compaction the tree side is steady

475
00:18:29,580 --> 00:18:31,440
here is our conclusion

476
00:18:31,440 --> 00:18:34,080
this size logical partition is main

477
00:18:34,080 --> 00:18:35,880
cause of the garbage collection in log

478
00:18:35,880 --> 00:18:37,620
structure fast system

479
00:18:37,620 --> 00:18:40,140
so we developed iplfs the log social

480
00:18:40,140 --> 00:18:42,000
file system for the infinite logical

481
00:18:42,000 --> 00:18:43,380
partition

482
00:18:43,380 --> 00:18:45,600
iplfs is free from the fast system

483
00:18:45,600 --> 00:18:47,100
garbage collection

484
00:18:47,100 --> 00:18:49,559
we also develop interval mapping which

485
00:18:49,559 --> 00:18:51,660
only Maps actively use fast system

486
00:18:51,660 --> 00:18:52,919
region

487
00:18:52,919 --> 00:18:56,460
we found out that IPL FSI performs ftfs

488
00:18:56,460 --> 00:18:59,160
by up to 12 times

489
00:18:59,160 --> 00:19:01,320
this is the end of my presentation thank

490
00:19:01,320 --> 00:19:03,000
you for listening and feel free to ask

491
00:19:03,000 --> 00:19:05,539
any question

