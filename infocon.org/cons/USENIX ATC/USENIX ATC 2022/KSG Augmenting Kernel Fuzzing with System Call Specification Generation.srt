1
00:00:07,940 --> 00:00:10,940
thank you

2
00:00:13,500 --> 00:00:16,520
hello everyone my name is

3
00:00:16,520 --> 00:00:19,859
University today I'm going to share our

4
00:00:19,859 --> 00:00:22,500
recent work kfg augmenting color

5
00:00:22,500 --> 00:00:24,539
following with system core specification

6
00:00:24,539 --> 00:00:27,300
generation hope this master can give you

7
00:00:27,300 --> 00:00:29,820
some inspiration to your domain first

8
00:00:29,820 --> 00:00:31,740
I'm going to talk about a typical

9
00:00:31,740 --> 00:00:34,980
folding workflow first of all the

10
00:00:34,980 --> 00:00:37,500
further generates or mutate they include

11
00:00:37,500 --> 00:00:40,320
with only input cost and assistive

12
00:00:40,320 --> 00:00:42,719
course specification the input curve

13
00:00:42,719 --> 00:00:45,180
contains a set of high qualitation

14
00:00:45,180 --> 00:00:48,059
called sequences and this is not

15
00:00:48,059 --> 00:00:50,039
specification provides further with

16
00:00:50,039 --> 00:00:52,980
detailed information about zip code for

17
00:00:52,980 --> 00:00:56,640
example the input structure of the input

18
00:00:56,640 --> 00:00:59,579
type of each system core then it

19
00:00:59,579 --> 00:01:02,039
generated input which is a physical

20
00:01:02,039 --> 00:01:06,119
sequence are fed into the executor that

21
00:01:06,119 --> 00:01:08,880
runs inside the target kernel after

22
00:01:08,880 --> 00:01:11,820
execution they gather feedback for

23
00:01:11,820 --> 00:01:14,400
example they covered information are set

24
00:01:14,400 --> 00:01:17,220
back to the father based on which for

25
00:01:17,220 --> 00:01:19,920
their continuously update the internal

26
00:01:19,920 --> 00:01:22,740
States for example they uh the the

27
00:01:22,740 --> 00:01:25,439
corpse meanwhile they triggered crashes

28
00:01:25,439 --> 00:01:27,720
are saved locally for further you are

29
00:01:27,720 --> 00:01:31,619
taking investigation and this method is

30
00:01:31,619 --> 00:01:35,340
pretty practical and in practice for

31
00:01:35,340 --> 00:01:38,040
this has already filed thousands of

32
00:01:38,040 --> 00:01:40,920
Linux kernels bugs

33
00:01:40,920 --> 00:01:44,520
now let's focus on the driving force of

34
00:01:44,520 --> 00:01:46,799
Kernel father the system called

35
00:01:46,799 --> 00:01:49,799
specification the system calls are

36
00:01:49,799 --> 00:01:52,259
actually very hard to fast for the

37
00:01:52,259 --> 00:01:54,540
following reasons first they are

38
00:01:54,540 --> 00:01:57,060
normally the abstraction of underlining

39
00:01:57,060 --> 00:02:00,479
sub modules for example as shown in the

40
00:02:00,479 --> 00:02:04,640
figure the sock API show

41
00:02:04,640 --> 00:02:08,639
is actually abstraction over the cockpit

42
00:02:08,639 --> 00:02:11,879
implementation of specific protocols

43
00:02:11,879 --> 00:02:16,140
which means system calls can accept

44
00:02:16,140 --> 00:02:20,819
input from user space and dispatch it to

45
00:02:20,819 --> 00:02:24,480
the underlying sub module therefore the

46
00:02:24,480 --> 00:02:26,940
input to the fifth course can be

47
00:02:26,940 --> 00:02:29,160
different the structure can be different

48
00:02:29,160 --> 00:02:32,220
based on the requirements of underlining

49
00:02:32,220 --> 00:02:35,879
submodules this makes it very hard to

50
00:02:35,879 --> 00:02:39,360
fast currently further utilizes cost

51
00:02:39,360 --> 00:02:42,060
specifications as true in the bottom

52
00:02:42,060 --> 00:02:45,300
part of the finger to generate the high

53
00:02:45,300 --> 00:02:48,300
quality input which can satisfy

54
00:02:48,300 --> 00:02:52,080
structural constrict on partial semantic

55
00:02:52,080 --> 00:02:55,500
constrict thereby they can bypass the

56
00:02:55,500 --> 00:02:58,200
basic validation in the kernel for

57
00:02:58,200 --> 00:03:00,780
example the structural check only metric

58
00:03:00,780 --> 00:03:04,500
check therefore we can see that the

59
00:03:04,500 --> 00:03:07,140
system of specifications are the driving

60
00:03:07,140 --> 00:03:10,819
force of card kernel fathers however

61
00:03:10,819 --> 00:03:15,420
this takes some issues and the first the

62
00:03:15,420 --> 00:03:19,260
most obvious one is that encoding system

63
00:03:19,260 --> 00:03:22,440
called specification is extremely time

64
00:03:22,440 --> 00:03:24,840
consuming for the following reasoning

65
00:03:24,840 --> 00:03:28,260
first to encode specification for

66
00:03:28,260 --> 00:03:30,659
specifics for more use we need to First

67
00:03:30,659 --> 00:03:33,239
figure out the precise input types

68
00:03:33,239 --> 00:03:36,000
divided by the modules since the

69
00:03:36,000 --> 00:03:39,200
complexity of system modules will be

70
00:03:39,200 --> 00:03:42,959
significant and kernel contains of

71
00:03:42,959 --> 00:03:46,260
thousands of thousands of super modules

72
00:03:46,260 --> 00:03:49,620
it is very hard to perform this task

73
00:03:49,620 --> 00:03:53,879
then even those we undertale the input

74
00:03:53,879 --> 00:03:58,500
type of each submodule we now need to

75
00:03:58,500 --> 00:04:02,099
figure out the semantics of each input

76
00:04:02,099 --> 00:04:04,739
field in order to encode a high quality

77
00:04:04,739 --> 00:04:08,040
specification and finally after a bit

78
00:04:08,040 --> 00:04:10,739
obtaining all these require domain

79
00:04:10,739 --> 00:04:12,420
knowledge of the chronological modules

80
00:04:12,420 --> 00:04:15,780
we now need to understand how to encode

81
00:04:15,780 --> 00:04:18,839
this information in domain language used

82
00:04:18,839 --> 00:04:21,779
by kernel father the bottom part of the

83
00:04:21,779 --> 00:04:24,900
figure shows a very simple example of

84
00:04:24,900 --> 00:04:27,600
this long specification for TCT system

85
00:04:27,600 --> 00:04:31,020
course to write such specification we

86
00:04:31,020 --> 00:04:33,300
need to perform ctex method from

87
00:04:33,300 --> 00:04:35,759
original C definition to system

88
00:04:35,759 --> 00:04:38,580
definition and we also need to encode

89
00:04:38,580 --> 00:04:41,220
schematics with different types for

90
00:04:41,220 --> 00:04:43,620
example we can encode a field as a check

91
00:04:43,620 --> 00:04:45,540
time type in system

92
00:04:45,540 --> 00:04:49,199
and this actually presents significant

93
00:04:49,199 --> 00:04:53,040
manually affect and to reduce this

94
00:04:53,040 --> 00:04:55,740
we can try to automatically generate the

95
00:04:55,740 --> 00:04:59,220
uh the specification but first we need

96
00:04:59,220 --> 00:05:01,860
to solve several challenges and the

97
00:05:01,860 --> 00:05:04,979
first one is to uh extracting the

98
00:05:04,979 --> 00:05:07,919
entries of super module as we can see

99
00:05:07,919 --> 00:05:10,560
from the finger the major responsibility

100
00:05:10,560 --> 00:05:14,759
of decimal cause is to dispatch input to

101
00:05:14,759 --> 00:05:17,880
server modules entry which conduct the

102
00:05:17,880 --> 00:05:21,540
actual logic Behavior and the sub

103
00:05:21,540 --> 00:05:24,300
modules entry therefore are our Target

104
00:05:24,300 --> 00:05:26,759
for analysis for specification

105
00:05:26,759 --> 00:05:30,600
generation however the entries of

106
00:05:30,600 --> 00:05:33,900
submodule can be registered into the

107
00:05:33,900 --> 00:05:37,080
kernel during different times and with

108
00:05:37,080 --> 00:05:39,720
different different apis for example

109
00:05:39,720 --> 00:05:42,479
they can be registered into the kernel

110
00:05:42,479 --> 00:05:45,300
during kernel booting audio remodel

111
00:05:45,300 --> 00:05:48,060
loading loading and they can also be

112
00:05:48,060 --> 00:05:52,620
registered with various kernel apis and

113
00:05:52,620 --> 00:05:56,520
this makes us very hard to extract the

114
00:05:56,520 --> 00:05:59,340
the modules entry with color static

115
00:05:59,340 --> 00:06:02,940
analysis and what we want here is the

116
00:06:02,940 --> 00:06:05,639
approach that can extract entries

117
00:06:05,639 --> 00:06:09,000
accurately without being about to any

118
00:06:09,000 --> 00:06:12,960
driver's implementation detail at all

119
00:06:12,960 --> 00:06:18,680
and now the second issue here is that

120
00:06:18,680 --> 00:06:21,840
identified in the input types of each

121
00:06:21,840 --> 00:06:24,660
entry is hard as we can see from the

122
00:06:24,660 --> 00:06:27,960
finger the type of specific parameter

123
00:06:27,960 --> 00:06:30,000
can be different under different

124
00:06:30,000 --> 00:06:33,300
execution passes which is a really good

125
00:06:33,300 --> 00:06:35,880
common design pattern in the kernel as

126
00:06:35,880 --> 00:06:38,520
you can see from the finger the

127
00:06:38,520 --> 00:06:43,380
type of a parameter option value is cut

128
00:06:43,380 --> 00:06:45,780
to different types in different case

129
00:06:45,780 --> 00:06:49,319
conditions and the third parameter

130
00:06:49,319 --> 00:06:51,900
option name is responsible for is

131
00:06:51,900 --> 00:06:54,860
responsible for controlling the

132
00:06:54,860 --> 00:06:59,220
condition and therefore the panther here

133
00:06:59,220 --> 00:07:03,900
is that some parameters of a entry are

134
00:07:03,900 --> 00:07:06,300
responsible for controlling the

135
00:07:06,300 --> 00:07:09,600
execution path and While others maybe

136
00:07:09,600 --> 00:07:11,759
talk to different type for different

137
00:07:11,759 --> 00:07:15,960
purpose and each field of a structure or

138
00:07:15,960 --> 00:07:18,720
not the nested structure can also be

139
00:07:18,720 --> 00:07:21,240
caused to different types based on their

140
00:07:21,240 --> 00:07:23,599
need this design

141
00:07:23,599 --> 00:07:26,460
pattern facilitates the kernel design

142
00:07:26,460 --> 00:07:29,660
significantly because each module can

143
00:07:29,660 --> 00:07:32,940
Implement arbitrary complexity

144
00:07:32,940 --> 00:07:35,940
functionality as the as they need but

145
00:07:35,940 --> 00:07:39,479
this makes it very hard for us to

146
00:07:39,479 --> 00:07:42,300
identify the precise type for each field

147
00:07:42,300 --> 00:07:46,199
at different passes and to address the

148
00:07:46,199 --> 00:07:49,620
Machine Tool challenges we now proper

149
00:07:49,620 --> 00:07:52,080
care G the kernel specification

150
00:07:52,080 --> 00:07:55,880
generator and this figure should be work

151
00:07:55,880 --> 00:07:59,940
overall workflow of our method first the

152
00:07:59,940 --> 00:08:02,520
kernel soft code is compelled into a

153
00:08:02,520 --> 00:08:05,699
portable image which will put later and

154
00:08:05,699 --> 00:08:10,020
the EST information adopt locally with

155
00:08:10,020 --> 00:08:14,160
the help of from clone compiler within

156
00:08:14,160 --> 00:08:18,240
utilize a probate Tracy method to

157
00:08:18,240 --> 00:08:20,639
connect customer modules entry which I

158
00:08:20,639 --> 00:08:24,720
will talk later in detail after that we

159
00:08:24,720 --> 00:08:27,900
collect input types and read constricts

160
00:08:27,900 --> 00:08:30,960
for each entry in different execution

161
00:08:30,960 --> 00:08:35,880
passes with Cloud analyzer and finally

162
00:08:35,880 --> 00:08:38,760
we will generate specification without

163
00:08:38,760 --> 00:08:41,700
gathered happy formation and entries

164
00:08:41,700 --> 00:08:45,680
indomie language used by kernel father

165
00:08:45,680 --> 00:08:49,380
now the first step is to extract the

166
00:08:49,380 --> 00:08:52,500
entry the major idea behind it is that

167
00:08:52,500 --> 00:08:55,320
our entries of several modules are

168
00:08:55,320 --> 00:08:57,720
radited into the kernel really doesn't

169
00:08:57,720 --> 00:09:00,420
matter because although we can be

170
00:09:00,420 --> 00:09:02,940
registered during different time with

171
00:09:02,940 --> 00:09:06,120
different apis there eventually store

172
00:09:06,120 --> 00:09:09,240
any two specific fields in the kernel

173
00:09:09,240 --> 00:09:12,660
for example the fire operation of each

174
00:09:12,660 --> 00:09:16,440
file or a normal file are stored into a

175
00:09:16,440 --> 00:09:21,300
field called fire off in structure file

176
00:09:21,300 --> 00:09:23,640
which represents that an open file

177
00:09:23,640 --> 00:09:26,940
inside the kernel and the protocol

178
00:09:26,940 --> 00:09:30,000
operation is stored into the field

179
00:09:30,000 --> 00:09:35,339
called off of a structure called socket

180
00:09:35,339 --> 00:09:39,060
which also represents that open the

181
00:09:39,060 --> 00:09:42,300
socket in a kernel therefore this tells

182
00:09:42,300 --> 00:09:45,060
us that we can extract entries from this

183
00:09:45,060 --> 00:09:48,560
field without the need to apply

184
00:09:48,560 --> 00:09:52,380
any complicated analysis

185
00:09:52,380 --> 00:09:55,980
and here is how we do this we first hook

186
00:09:55,980 --> 00:09:59,220
multiple props before specific kernel

187
00:09:59,220 --> 00:10:02,300
functions that creates these entries

188
00:10:02,300 --> 00:10:06,720
while ebcf and the K problem ebpf and

189
00:10:06,720 --> 00:10:09,839
k-probe enables us to inject our

190
00:10:09,839 --> 00:10:12,540
customized function into almost any

191
00:10:12,540 --> 00:10:17,180
kernel location we then for extract the

192
00:10:17,180 --> 00:10:21,120
profile operation we inject prop after

193
00:10:21,120 --> 00:10:24,660
the execution of Kernel function to fire

194
00:10:24,660 --> 00:10:27,660
open to collect the file operation

195
00:10:27,660 --> 00:10:31,560
structure and we also inject probes

196
00:10:31,560 --> 00:10:33,800
after the execution of Kernel function

197
00:10:33,800 --> 00:10:37,080
socket creates to capture the execution

198
00:10:37,080 --> 00:10:39,420
of protocol operation

199
00:10:39,420 --> 00:10:43,560
after them we trigger the accusation of

200
00:10:43,560 --> 00:10:46,560
a dead Hook from user space while

201
00:10:46,560 --> 00:10:49,200
scanning corresponding resources for

202
00:10:49,200 --> 00:10:52,980
example to extract fire operation will

203
00:10:52,980 --> 00:10:56,459
enter with all the devices files under

204
00:10:56,459 --> 00:10:59,180
this directory or Dev directory

205
00:10:59,180 --> 00:11:01,980
recursively to extract possible

206
00:11:01,980 --> 00:11:04,800
operation we set up all these supported

207
00:11:04,800 --> 00:11:08,360
sockets to collect protocol operation

208
00:11:08,360 --> 00:11:12,420
then the whole execution path will be

209
00:11:12,420 --> 00:11:15,839
captured in the kernel by those probes

210
00:11:15,839 --> 00:11:18,839
and those props will store all the

211
00:11:18,839 --> 00:11:22,579
required operation into ppf map

212
00:11:22,579 --> 00:11:27,959
finally we we read this address value

213
00:11:27,959 --> 00:11:31,440
from the Euler space and we symbolize

214
00:11:31,440 --> 00:11:36,899
them in your space with prox KL Sims so

215
00:11:36,899 --> 00:11:40,019
that we get the symbol as a category the

216
00:11:40,019 --> 00:11:43,440
function we need and in this way we can

217
00:11:43,440 --> 00:11:45,660
collect some modules entry accurately

218
00:11:45,660 --> 00:11:49,079
without being bothered to any submodules

219
00:11:49,079 --> 00:11:51,420
implementation detail as well as the

220
00:11:51,420 --> 00:11:55,019
result needed to modify the kernel

221
00:11:55,019 --> 00:11:59,339
uh after confirming that the entries we

222
00:11:59,339 --> 00:12:02,519
need to analyze are extracted we now

223
00:12:02,519 --> 00:12:05,700
conduct entry procedure analysis based

224
00:12:05,700 --> 00:12:09,540
on closet analyzer a cluster analyzer is

225
00:12:09,540 --> 00:12:11,820
a source code level stability execution

226
00:12:11,820 --> 00:12:15,420
entry we identified a most precise type

227
00:12:15,420 --> 00:12:18,540
of feature field from all the type

228
00:12:18,540 --> 00:12:22,140
related operations based on CFA for

229
00:12:22,140 --> 00:12:25,560
example all the Typecast operation in C

230
00:12:25,560 --> 00:12:29,820
language and all some specific kernel

231
00:12:29,820 --> 00:12:32,640
function for example the copy from copy

232
00:12:32,640 --> 00:12:37,500
2 user will be analyzed the finger in

233
00:12:37,500 --> 00:12:39,839
the left part shows the major idea of

234
00:12:39,839 --> 00:12:42,600
our collecting algorithm it's based on

235
00:12:42,600 --> 00:12:46,079
class static analyze uh symbolic system

236
00:12:46,079 --> 00:12:49,620
and the memory module memory module for

237
00:12:49,620 --> 00:12:52,019
into for integral to pointer conversion

238
00:12:52,019 --> 00:12:54,779
we first record the relationship between

239
00:12:54,779 --> 00:12:58,079
the sample value of of the corresponding

240
00:12:58,079 --> 00:13:00,839
integral variable and the memory region

241
00:13:00,839 --> 00:13:03,600
of the target kernel and for a pointer

242
00:13:03,600 --> 00:13:06,720
to pointer cost we associate the type

243
00:13:06,720 --> 00:13:08,060
information

244
00:13:08,060 --> 00:13:11,880
in the Target memory region after a

245
00:13:11,880 --> 00:13:15,000
compare real type comparison with the

246
00:13:15,000 --> 00:13:18,000
rule dividing our paper and finally a

247
00:13:18,000 --> 00:13:20,639
special map is used to record the

248
00:13:20,639 --> 00:13:24,360
connection between regions his PS3

249
00:13:24,360 --> 00:13:25,700
creates a

250
00:13:25,700 --> 00:13:29,220
sub-region during each pointer costing

251
00:13:29,220 --> 00:13:32,160
and with this method we can collect and

252
00:13:32,160 --> 00:13:34,920
pro a path path all the immediate

253
00:13:34,920 --> 00:13:35,899
information

254
00:13:35,899 --> 00:13:39,899
allow the execution test and here is a

255
00:13:39,899 --> 00:13:42,779
running example of such algorithm and as

256
00:13:42,779 --> 00:13:45,720
first we only know the symbol value of

257
00:13:45,720 --> 00:13:49,079
input parameter which are symbol 0 and

258
00:13:49,079 --> 00:13:51,360
symbol one after the first case

259
00:13:51,360 --> 00:13:54,120
condition cluster analyzer collected the

260
00:13:54,120 --> 00:13:57,300
corresponding risk contract on symbol 0

261
00:13:57,300 --> 00:14:01,380
other company from stock stock PTR is

262
00:14:01,380 --> 00:14:05,279
executed the algorithm is also invoked

263
00:14:05,279 --> 00:14:08,160
and it has figured out that the type of

264
00:14:08,160 --> 00:14:12,120
parameter option value and it records

265
00:14:12,120 --> 00:14:15,540
such information with single one and

266
00:14:15,540 --> 00:14:18,120
memory region one and finally after

267
00:14:18,120 --> 00:14:21,480
another hit condition we collected Rich

268
00:14:21,480 --> 00:14:25,139
constructs on the field option code of

269
00:14:25,139 --> 00:14:28,440
another structure with this procedure as

270
00:14:28,440 --> 00:14:30,959
we can see we can connect all the needed

271
00:14:30,959 --> 00:14:33,300
with country read contribute and the

272
00:14:33,300 --> 00:14:37,200
most precise type of each input

273
00:14:37,200 --> 00:14:41,699
and after we collect the entries and the

274
00:14:41,699 --> 00:14:43,220
needed type information

275
00:14:43,220 --> 00:14:46,680
we now can finally generate the

276
00:14:46,680 --> 00:14:50,279
specifications for each path with two

277
00:14:50,279 --> 00:14:53,339
steps the first step is to generate

278
00:14:53,339 --> 00:14:55,920
system calls that create the

279
00:14:55,920 --> 00:14:58,860
corresponding resources for example we

280
00:14:58,860 --> 00:15:01,320
generate a system called open for each

281
00:15:01,320 --> 00:15:04,199
device file or a normal file and the

282
00:15:04,199 --> 00:15:08,100
code responding path is set as the cost

283
00:15:08,100 --> 00:15:12,000
value for first parameter we use signals

284
00:15:12,000 --> 00:15:14,639
called type for this and we generate a

285
00:15:14,639 --> 00:15:17,279
system called socket for each supported

286
00:15:17,279 --> 00:15:22,199
protocol and the input domain type Proto

287
00:15:22,199 --> 00:15:24,060
are set at Cost value as well

288
00:15:24,060 --> 00:15:28,199
accordingly based on the protocols need

289
00:15:28,199 --> 00:15:29,820
and then

290
00:15:29,820 --> 00:15:33,660
after we generate the system calls that

291
00:15:33,660 --> 00:15:36,120
create those resources we now generally

292
00:15:36,120 --> 00:15:39,420
generate the rest course and the input

293
00:15:39,420 --> 00:15:42,180
to this generated costs are set as

294
00:15:42,180 --> 00:15:46,139
collected types during this course we

295
00:15:46,139 --> 00:15:48,959
need to map the say type definition to

296
00:15:48,959 --> 00:15:51,899
system type definition which requires

297
00:15:51,899 --> 00:15:55,260
some simple detect mapping during this

298
00:15:55,260 --> 00:15:58,860
mapping we also check the collected

299
00:15:58,860 --> 00:16:02,040
information and try to figure out if an

300
00:16:02,040 --> 00:16:05,160
integral variable has a collected read

301
00:16:05,160 --> 00:16:09,120
construct if so we could work it as a

302
00:16:09,120 --> 00:16:11,339
cost type institution and static value

303
00:16:11,339 --> 00:16:14,760
as the collective value and meanwhile we

304
00:16:14,760 --> 00:16:19,019
also can figure out the the direction of

305
00:16:19,019 --> 00:16:21,959
a pointer because we collected those

306
00:16:21,959 --> 00:16:24,000
kind of information during Second Step

307
00:16:24,000 --> 00:16:29,220
for example if we meet a copy from user

308
00:16:29,220 --> 00:16:31,860
then it implies that the data flow

309
00:16:31,860 --> 00:16:35,760
direction is in and finally the

310
00:16:35,760 --> 00:16:38,279
generative specification are filled as

311
00:16:38,279 --> 00:16:40,139
input to the folder

312
00:16:40,139 --> 00:16:43,920
this is a major workflow our method and

313
00:16:43,920 --> 00:16:47,459
for evaluation we execute KFC in

314
00:16:47,459 --> 00:16:50,459
multiple versions of Linux kernel and as

315
00:16:50,459 --> 00:16:53,720
a result he actually is able to extract

316
00:16:53,720 --> 00:16:58,800
792 entries from 78 socket the 1098

317
00:16:58,800 --> 00:17:01,860
device files and all the generated

318
00:17:01,860 --> 00:17:05,959
specifications contains almost 2

319
00:17:05,959 --> 00:17:11,660
430 with specialized system calls and

320
00:17:11,660 --> 00:17:16,199
1460 are new to existing infrastration

321
00:17:16,199 --> 00:17:18,179
uh this table shows the detailed

322
00:17:18,179 --> 00:17:21,359
information of the extracted entries and

323
00:17:21,359 --> 00:17:24,059
the specifications generated generated

324
00:17:24,059 --> 00:17:27,500
from those entries

325
00:17:27,720 --> 00:17:31,080
and to test if our generation

326
00:17:31,080 --> 00:17:34,860
specification can improve the coverage

327
00:17:34,860 --> 00:17:38,640
capability of further we take all the

328
00:17:38,640 --> 00:17:40,620
generated all the newly generated

329
00:17:40,620 --> 00:17:43,220
specifications as input to Kernel father

330
00:17:43,220 --> 00:17:47,580
and as a result as shown in the table uh

331
00:17:47,580 --> 00:17:48,799
with

332
00:17:48,799 --> 00:17:52,559
1400 416 newly generated specifications

333
00:17:52,559 --> 00:17:55,860
this color is able to achieve 22

334
00:17:55,860 --> 00:17:59,220
pathetic coverage improvements on

335
00:17:59,220 --> 00:18:00,900
average and the digital information

336
00:18:00,900 --> 00:18:04,320
could be is shown in the table

337
00:18:04,320 --> 00:18:07,500
and finally we they added this is the

338
00:18:07,500 --> 00:18:10,679
most our most important goal of our uh

339
00:18:10,679 --> 00:18:13,440
tool to improve the bug fighting

340
00:18:13,440 --> 00:18:16,320
capability of Colonel father yeah to

341
00:18:16,320 --> 00:18:19,980
evaluate this we take we also take the

342
00:18:19,980 --> 00:18:22,160
generally specification Uber to father

343
00:18:22,160 --> 00:18:27,059
and as a result uh KSG assisted his

344
00:18:27,059 --> 00:18:28,580
father to discover

345
00:18:28,580 --> 00:18:32,460
26 previously on Lower vulnerability all

346
00:18:32,460 --> 00:18:34,620
the bugs have been confirmed by

347
00:18:34,620 --> 00:18:37,860
corresponding machiners and 30 bucks

348
00:18:37,860 --> 00:18:41,400
have already been fixed at a six bucks

349
00:18:41,400 --> 00:18:43,860
have already been assigned with three

350
00:18:43,860 --> 00:18:47,640
years and this table in this table shows

351
00:18:47,640 --> 00:18:50,100
the detailed information about our CVI

352
00:18:50,100 --> 00:18:55,260
ID we got and many of them uh are very

353
00:18:55,260 --> 00:18:58,440
critical uh we can we can see the

354
00:18:58,440 --> 00:19:00,240
detailed information according to the

355
00:19:00,240 --> 00:19:01,740
theory information

356
00:19:01,740 --> 00:19:04,559
and in summary

357
00:19:04,559 --> 00:19:08,039
we propose kfj to automatically generate

358
00:19:08,039 --> 00:19:10,080
the system called specification to

359
00:19:10,080 --> 00:19:13,140
reduce the manual effort in coding

360
00:19:13,140 --> 00:19:17,039
specifications and we first utilize the

361
00:19:17,039 --> 00:19:19,919
appropriate treating to accurately

362
00:19:19,919 --> 00:19:22,799
extract thermometers entry and we

363
00:19:22,799 --> 00:19:25,980
collect type and read constricts based

364
00:19:25,980 --> 00:19:30,000
on a intro procedure analysis that is

365
00:19:30,000 --> 00:19:33,620
also based on classic analyzer and the

366
00:19:33,620 --> 00:19:36,960
external result shows that the

367
00:19:36,960 --> 00:19:39,360
generative specification can improve the

368
00:19:39,360 --> 00:19:41,940
performance of a further significantly

369
00:19:41,940 --> 00:19:44,700
in terms of coverage improvements and

370
00:19:44,700 --> 00:19:47,820
the bug fighting capability and in the

371
00:19:47,820 --> 00:19:50,340
future we will obtain a kfg to other

372
00:19:50,340 --> 00:19:54,120
modules and Implement more Checkers to

373
00:19:54,120 --> 00:19:57,059
collect other parameters schematic for

374
00:19:57,059 --> 00:19:58,860
example we can Implement a checker to

375
00:19:58,860 --> 00:20:01,860
check if the field is actually the

376
00:20:01,860 --> 00:20:05,600
checksum value of other field

377
00:20:05,820 --> 00:20:09,740
uh text for your attention

