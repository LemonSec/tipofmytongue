1
00:00:07,940 --> 00:00:10,940
thank you

2
00:00:13,679 --> 00:00:17,039
hello everyone my name is jinyu I

3
00:00:17,039 --> 00:00:20,100
received my PhD degree last year and now

4
00:00:20,100 --> 00:00:22,680
I'm a young Factory in Shanghai xiaotong

5
00:00:22,680 --> 00:00:23,760
University

6
00:00:23,760 --> 00:00:26,760
I'm glad to introduce our work to you

7
00:00:26,760 --> 00:00:30,720
this work is entitled EPK scalable and

8
00:00:30,720 --> 00:00:34,079
efficient memory protection keys

9
00:00:34,079 --> 00:00:36,540
internal memory protection key known as

10
00:00:36,540 --> 00:00:39,600
Intel mpk and Intel PKU

11
00:00:39,600 --> 00:00:42,420
it is a hardware feature for

12
00:00:42,420 --> 00:00:44,879
intraprocessed memory isolation which

13
00:00:44,879 --> 00:00:47,760
has been introduced into the Intel CPU

14
00:00:47,760 --> 00:00:48,980
since

15
00:00:48,980 --> 00:00:52,980
2019 both the desktop and server CPUs

16
00:00:52,980 --> 00:00:55,500
are shipped with this feature

17
00:00:55,500 --> 00:00:58,680
it offers highly efficient interprecess

18
00:00:58,680 --> 00:01:01,079
memory isolation by supporting memory

19
00:01:01,079 --> 00:01:04,159
domains inside web application

20
00:01:04,159 --> 00:01:07,439
specifically in time BK can divide the

21
00:01:07,439 --> 00:01:10,200
virtual memory space of one process into

22
00:01:10,200 --> 00:01:12,420
16 memory domains

23
00:01:12,420 --> 00:01:15,900
by leveraging pre previously unused

24
00:01:15,900 --> 00:01:18,479
forbids in the page table entry each

25
00:01:18,479 --> 00:01:21,000
memory page is tagged with a 4-bit

26
00:01:21,000 --> 00:01:23,820
protection key as a domain ID

27
00:01:23,820 --> 00:01:27,420
and exclusively belongs to 1 over the 16

28
00:01:27,420 --> 00:01:29,340
domains

29
00:01:29,340 --> 00:01:33,360
a new 32-bit registered pkiu is

30
00:01:33,360 --> 00:01:35,520
introduced to specify the access

31
00:01:35,520 --> 00:01:38,280
permissions including read only real

32
00:01:38,280 --> 00:01:41,820
rights and none of the 16 domains two

33
00:01:41,820 --> 00:01:45,119
bits for one domain because the register

34
00:01:45,119 --> 00:01:48,000
is per call concurrent threads in the

35
00:01:48,000 --> 00:01:50,100
same process can have different access

36
00:01:50,100 --> 00:01:53,520
permissions on different domains a

37
00:01:53,520 --> 00:01:56,880
non-privileged instruction called wrpkiu

38
00:01:56,880 --> 00:02:00,000
can update this register to change the

39
00:02:00,000 --> 00:02:01,560
access permissions

40
00:02:01,560 --> 00:02:04,979
notably this new instruction not only

41
00:02:04,979 --> 00:02:07,619
can execute in the user mode directly

42
00:02:07,619 --> 00:02:12,360
but also takes only about 28 Cycles

43
00:02:12,360 --> 00:02:15,660
according to our pre-op according to

44
00:02:15,660 --> 00:02:18,360
pre-ordial studies on mpk based

45
00:02:18,360 --> 00:02:21,840
entrepresence isolation the common usage

46
00:02:21,840 --> 00:02:25,020
model of mpk is as follows an

47
00:02:25,020 --> 00:02:27,540
application process creates memory

48
00:02:27,540 --> 00:02:30,000
domains by binding different protection

49
00:02:30,000 --> 00:02:33,239
keys to them as a domain IDs and

50
00:02:33,239 --> 00:02:35,520
separates the memory data into different

51
00:02:35,520 --> 00:02:36,840
domains

52
00:02:36,840 --> 00:02:40,200
an application thread requires or

53
00:02:40,200 --> 00:02:42,720
releases the access permission of one

54
00:02:42,720 --> 00:02:45,959
specific one specific domain before or

55
00:02:45,959 --> 00:02:49,319
after accessing the data in it which

56
00:02:49,319 --> 00:02:52,379
reduces the chances of isolated memory

57
00:02:52,379 --> 00:02:55,440
being affected by vulnerabilities or

58
00:02:55,440 --> 00:02:56,959
faults

59
00:02:56,959 --> 00:03:00,540
acquiring or releasing the domain access

60
00:03:00,540 --> 00:03:03,599
permission is efficiently achieved by

61
00:03:03,599 --> 00:03:07,500
executing wrpkiu instruction which is

62
00:03:07,500 --> 00:03:10,920
referred as domain switching

63
00:03:10,920 --> 00:03:13,620
however the small number of isolated

64
00:03:13,620 --> 00:03:16,560
memory domains supported by mpk

65
00:03:16,560 --> 00:03:19,860
undermines is its usability

66
00:03:19,860 --> 00:03:22,760
here are some potential scenarios that

67
00:03:22,760 --> 00:03:26,159
desire lightweight isolation while mpk

68
00:03:26,159 --> 00:03:29,099
fails to fit due to the problem of

69
00:03:29,099 --> 00:03:31,640
non-scalable domain number

70
00:03:31,640 --> 00:03:35,400
first a typical server application

71
00:03:35,400 --> 00:03:38,760
usually serves for more than 16 clients

72
00:03:38,760 --> 00:03:42,180
concurrently and it is preferable to

73
00:03:42,180 --> 00:03:45,120
store clients private data in isolated

74
00:03:45,120 --> 00:03:47,760
domains to prevent sensitive data

75
00:03:47,760 --> 00:03:50,459
leakage second

76
00:03:50,459 --> 00:03:52,980
there is a growing interest in

77
00:03:52,980 --> 00:03:55,879
protecting persistent memory data from

78
00:03:55,879 --> 00:03:58,879
accidental or malicious excesses

79
00:03:58,879 --> 00:04:02,580
isolating the data in more domains can

80
00:04:02,580 --> 00:04:05,760
reduce the data exposure time and

81
00:04:05,760 --> 00:04:09,480
benefits Street access protection

82
00:04:09,480 --> 00:04:12,720
so third both applications and system

83
00:04:12,720 --> 00:04:15,500
software may contain more than 16

84
00:04:15,500 --> 00:04:19,500
components that need to be isolated for

85
00:04:19,500 --> 00:04:22,440
example are popular applications use

86
00:04:22,440 --> 00:04:26,000
scores of third-party libraries

87
00:04:26,000 --> 00:04:29,400
the root cause of why mpk can only

88
00:04:29,400 --> 00:04:32,699
support 16 memory domains is that each

89
00:04:32,699 --> 00:04:36,199
domain needs to exclusively take one PK

90
00:04:36,199 --> 00:04:40,380
while the hardware only supports 16p

91
00:04:40,380 --> 00:04:44,220
keys in all one candidate design choice

92
00:04:44,220 --> 00:04:47,160
is resource time division multiplexing

93
00:04:47,160 --> 00:04:49,740
which means letting different domains

94
00:04:49,740 --> 00:04:53,100
use the same P key as different times by

95
00:04:53,100 --> 00:04:56,160
evicting the P key from one domain and

96
00:04:56,160 --> 00:04:58,680
assigning it to another domain

97
00:04:58,680 --> 00:05:02,240
however such a solution may lead to a

98
00:05:02,240 --> 00:05:04,860
non-negligible performance overhead

99
00:05:04,860 --> 00:05:07,979
for example for for example if we want

100
00:05:07,979 --> 00:05:12,479
to reuse pk1 for another domain name uh

101
00:05:12,479 --> 00:05:16,440
domain 17 we need to First clear all

102
00:05:16,440 --> 00:05:20,280
existing PT is tagged with pt1 this

103
00:05:20,280 --> 00:05:23,460
procedure can be costly especially when

104
00:05:23,460 --> 00:05:26,160
the domain memory size is large because

105
00:05:26,160 --> 00:05:29,460
we need to modify many ptes

106
00:05:29,460 --> 00:05:32,520
besides the the overhead of page table

107
00:05:32,520 --> 00:05:36,419
modification we also need to flash trbs

108
00:05:36,419 --> 00:05:38,820
which will further introduce more

109
00:05:38,820 --> 00:05:40,740
overhead

110
00:05:40,740 --> 00:05:43,919
another very intuitive solution is using

111
00:05:43,919 --> 00:05:46,500
more bits in the page table entry as the

112
00:05:46,500 --> 00:05:49,860
domain ID for example if 10 bits instead

113
00:05:49,860 --> 00:05:53,600
of 4 bits are used it can offer

114
00:05:53,600 --> 00:05:57,120
1024 memory domains however this is

115
00:05:57,120 --> 00:05:59,880
infeasible on commodity machines and

116
00:05:59,880 --> 00:06:00,780
maybe

117
00:06:00,780 --> 00:06:03,660
are incompatible with the upcoming five

118
00:06:03,660 --> 00:06:06,780
level page table because of using too

119
00:06:06,780 --> 00:06:08,940
many PG Beats

120
00:06:08,940 --> 00:06:12,180
moreover how to represent the domain

121
00:06:12,180 --> 00:06:15,300
permission efficiently is also a problem

122
00:06:15,300 --> 00:06:19,080
since it cannot simply use one pkio

123
00:06:19,080 --> 00:06:24,419
register with more than 2 000 bits

124
00:06:24,419 --> 00:06:27,840
so our work has three major design goals

125
00:06:27,840 --> 00:06:29,639
first

126
00:06:29,639 --> 00:06:32,580
is to support a scalable number of

127
00:06:32,580 --> 00:06:37,580
memory domains second is uh no Hardware

128
00:06:37,580 --> 00:06:42,000
modifications is required third load a

129
00:06:42,000 --> 00:06:45,960
performance overhead especially it needs

130
00:06:45,960 --> 00:06:50,660
to support a scalable memory domain size

131
00:06:50,660 --> 00:06:54,240
mpk's performance advantages stems from

132
00:06:54,240 --> 00:06:56,759
the decoupling of domain configuration

133
00:06:56,759 --> 00:06:59,340
in the privileged mode and the domain

134
00:06:59,340 --> 00:07:01,160
switching in the non-prevision

135
00:07:01,160 --> 00:07:04,139
non-privileged mode our observation is

136
00:07:04,139 --> 00:07:07,139
that another Hardware feature will funk

137
00:07:07,139 --> 00:07:10,020
for fast epd switching has a similar

138
00:07:10,020 --> 00:07:12,360
pattern which decouples EPC

139
00:07:12,360 --> 00:07:15,180
configuration in the host mode from if

140
00:07:15,180 --> 00:07:18,720
it is switching in the guest mode thus

141
00:07:18,720 --> 00:07:21,960
we propose to Extended protection keys

142
00:07:21,960 --> 00:07:26,039
by combining NPK with fast EPT switching

143
00:07:26,039 --> 00:07:28,979
which means we're using the same mpk

144
00:07:28,979 --> 00:07:31,560
protection keys in different extended

145
00:07:31,560 --> 00:07:35,060
page tables different from time division

146
00:07:35,060 --> 00:07:37,560
multiplexing one P key can be

147
00:07:37,560 --> 00:07:40,440
simultaneously used for different memory

148
00:07:40,440 --> 00:07:44,580
domains in different epts EPK is short

149
00:07:44,580 --> 00:07:48,539
for extended protection keys

150
00:07:48,539 --> 00:07:51,000
here is a quick introduction on real

151
00:07:51,000 --> 00:07:54,180
funk as we know Intel hardware

152
00:07:54,180 --> 00:07:57,780
virtualization employs EPT for memory

153
00:07:57,780 --> 00:08:00,960
virtualization for a virtual machine the

154
00:08:00,960 --> 00:08:03,780
page tables inside the VM map guest

155
00:08:03,780 --> 00:08:05,759
virtual addresses to guest physical

156
00:08:05,759 --> 00:08:10,440
addresses while the EPT Maps GPS to host

157
00:08:10,440 --> 00:08:12,780
physical addresses

158
00:08:12,780 --> 00:08:17,340
the high visor manages the vm's EPT

159
00:08:17,340 --> 00:08:19,639
when Funk is a hardware instruction

160
00:08:19,639 --> 00:08:23,759
allowing the guest VM to directly load a

161
00:08:23,759 --> 00:08:27,060
new EPT the loadable EPT can only be

162
00:08:27,060 --> 00:08:31,219
chosen from a list of epts up to 512

163
00:08:31,219 --> 00:08:35,219
config configured by The Horizon

164
00:08:35,219 --> 00:08:38,039
the hardware feature of mpk is also

165
00:08:38,039 --> 00:08:41,940
usable in a VM thus EPK combines mpk and

166
00:08:41,940 --> 00:08:43,200
winfunk

167
00:08:43,200 --> 00:08:45,779
it requires an application to draw

168
00:08:45,779 --> 00:08:49,980
within a VM and multiple apts need need

169
00:08:49,980 --> 00:08:52,500
to be created for the VM

170
00:08:52,500 --> 00:08:55,800
EPK allows an application to partition

171
00:08:55,800 --> 00:08:58,320
its virtual address space into different

172
00:08:58,320 --> 00:09:00,959
memory domains with each domain

173
00:09:00,959 --> 00:09:04,200
containing discrete memory pages

174
00:09:04,200 --> 00:09:07,380
a domain exclusively takes one extended

175
00:09:07,380 --> 00:09:10,920
protection key as its domain ID to which

176
00:09:10,920 --> 00:09:17,300
is composed of a P key and an EPT index

177
00:09:17,640 --> 00:09:20,760
if EBT can hold 15 domains for an

178
00:09:20,760 --> 00:09:24,660
application and the 15 domain IDs have

179
00:09:24,660 --> 00:09:28,560
the same EPT index but different P keys

180
00:09:28,560 --> 00:09:31,620
for example domain one and the domain 2

181
00:09:31,620 --> 00:09:37,860
are both in EPT 0 but use pk1 and P key

182
00:09:37,860 --> 00:09:41,180
2 respectively

183
00:09:42,360 --> 00:09:45,000
the same P key can be shared by domains

184
00:09:45,000 --> 00:09:47,940
in different ebts concurrently

185
00:09:47,940 --> 00:09:51,959
for example domain 1 domain 16 and

186
00:09:51,959 --> 00:09:56,399
domain 31 can all use pk1 because Z will

187
00:09:56,399 --> 00:10:01,560
be mapped in EPT 0 ept1 and ept2

188
00:10:01,560 --> 00:10:04,680
separately memory isolation between

189
00:10:04,680 --> 00:10:07,860
domains within the same EPT is achieved

190
00:10:07,860 --> 00:10:11,580
through the use of distinct pts to

191
00:10:11,580 --> 00:10:14,100
achieve memory isolation between domains

192
00:10:14,100 --> 00:10:17,940
in different apts APK ensures that each

193
00:10:17,940 --> 00:10:22,380
domain's mappings only exist in its in

194
00:10:22,380 --> 00:10:24,480
one EBT

195
00:10:24,480 --> 00:10:27,240
other memory Pages like the global code

196
00:10:27,240 --> 00:10:30,959
and the data are tagged with pk0 and

197
00:10:30,959 --> 00:10:36,959
mapped in all the apts APK called this a

198
00:10:36,959 --> 00:10:39,600
special domain as domain 0.

199
00:10:39,600 --> 00:10:43,560
this is also why each EPT can only offer

200
00:10:43,560 --> 00:10:48,260
15 domains instead of 16.

201
00:10:48,300 --> 00:10:51,540
APK preserves the usage model of the

202
00:10:51,540 --> 00:10:54,720
original NPK it includes a user library

203
00:10:54,720 --> 00:10:58,260
to provide the interface interfaces for

204
00:10:58,260 --> 00:10:59,820
applications

205
00:10:59,820 --> 00:11:03,300
an application can invoke domains to get

206
00:11:03,300 --> 00:11:06,540
mod code to my IDs considering that some

207
00:11:06,540 --> 00:11:09,839
domains are likely to Traverse together

208
00:11:09,839 --> 00:11:12,480
the interface will try to return the

209
00:11:12,480 --> 00:11:15,360
domains that are located in the same EPT

210
00:11:15,360 --> 00:11:17,700
because domain switching within the same

211
00:11:17,700 --> 00:11:20,700
EPT is faster

212
00:11:20,700 --> 00:11:24,420
domain and map is used to allocate a

213
00:11:24,420 --> 00:11:26,880
virtual memory page within one memory

214
00:11:26,880 --> 00:11:29,360
domain

215
00:11:29,779 --> 00:11:32,880
are responsible for switching memory

216
00:11:32,880 --> 00:11:35,399
domains switching between domains within

217
00:11:35,399 --> 00:11:38,279
the same EPT can finish by

218
00:11:38,279 --> 00:11:42,240
uh executing wrpkio instructions for

219
00:11:42,240 --> 00:11:44,940
setting the pkio value switching between

220
00:11:44,940 --> 00:11:48,240
domains in different apts involve one

221
00:11:48,240 --> 00:11:52,399
additional Rand instruction

222
00:11:52,440 --> 00:11:55,140
while the idea is simple there are two

223
00:11:55,140 --> 00:11:57,420
implementation challenges for combining

224
00:11:57,420 --> 00:12:01,760
mpk and advanced first how to make a VM

225
00:12:01,760 --> 00:12:06,060
similarly wrong with different epts and

226
00:12:06,060 --> 00:12:08,940
how and the high visor does not have

227
00:12:08,940 --> 00:12:11,760
domain mapping information how can it

228
00:12:11,760 --> 00:12:14,519
tell a legal EPT violation caused by

229
00:12:14,519 --> 00:12:19,140
on-demand paging with an illegal one due

230
00:12:19,140 --> 00:12:21,240
to a wrong access

231
00:12:21,240 --> 00:12:24,660
second given that mpk allows one thread

232
00:12:24,660 --> 00:12:26,779
to access multiple domains

233
00:12:26,779 --> 00:12:29,940
simultaneously how to support such a

234
00:12:29,940 --> 00:12:33,060
flexible feature when multiple epts are

235
00:12:33,060 --> 00:12:36,779
in use due to the time limitation please

236
00:12:36,779 --> 00:12:39,839
refer to our paper for detailed designs

237
00:12:39,839 --> 00:12:42,360
if interested

238
00:12:42,360 --> 00:12:45,480
we conduct the experiments on their

239
00:12:45,480 --> 00:12:48,720
power Edge server besides the vanilla

240
00:12:48,720 --> 00:12:51,060
process we compare the performance of

241
00:12:51,060 --> 00:12:54,060
EPK with a real Funk solution and demand

242
00:12:54,060 --> 00:12:57,480
PK the van Funk solution provides one

243
00:12:57,480 --> 00:13:00,839
memory domain in one EPT and the

244
00:13:00,839 --> 00:13:03,839
leverages when funk for domain switches

245
00:13:03,839 --> 00:13:06,899
live NPK is a Pioneer study that

246
00:13:06,899 --> 00:13:12,120
extended mpk memory domains it uses the

247
00:13:12,120 --> 00:13:14,940
technique of time division P key

248
00:13:14,940 --> 00:13:17,820
multiplexing since it does not need a

249
00:13:17,820 --> 00:13:20,940
virtualization we run it in the host OS

250
00:13:20,940 --> 00:13:23,399
for fairness

251
00:13:23,399 --> 00:13:26,040
we first apply different interprecess

252
00:13:26,040 --> 00:13:28,920
isolation mechanisms to a widely used

253
00:13:28,920 --> 00:13:31,139
web server ngx

254
00:13:31,139 --> 00:13:34,500
to evaluate the performance overhead we

255
00:13:34,500 --> 00:13:38,040
isolate SSL session keys of different

256
00:13:38,040 --> 00:13:40,800
clients in different memory domains we

257
00:13:40,800 --> 00:13:43,380
leverage a b to generate the workload

258
00:13:43,380 --> 00:13:46,320
300 clients keep sending file requests

259
00:13:46,320 --> 00:13:49,139
one by one thus the total domain number

260
00:13:49,139 --> 00:13:54,000
is 300. dpk imposes about five percent

261
00:13:54,000 --> 00:13:57,019
overhead compared with

262
00:13:57,019 --> 00:14:01,019
native and outperforms other Solutions

263
00:14:01,019 --> 00:14:03,600
the overhead of the real Funk solution

264
00:14:03,600 --> 00:14:05,880
is about 12 percent

265
00:14:05,880 --> 00:14:09,180
we make the server thread handle client

266
00:14:09,180 --> 00:14:12,180
requests in order last most domain

267
00:14:12,180 --> 00:14:15,420
switches In apk need no equity changing

268
00:14:15,420 --> 00:14:18,720
making APK outperform the ramfunk

269
00:14:18,720 --> 00:14:22,139
solution leave mpk increase about 18

270
00:14:22,139 --> 00:14:24,240
performance overhead due to the

271
00:14:24,240 --> 00:14:27,420
involvement of page table modifying and

272
00:14:27,420 --> 00:14:30,560
trb flashing

273
00:14:31,260 --> 00:14:34,620
printing into process memory isolation

274
00:14:34,620 --> 00:14:37,620
to protect MBM data has also been

275
00:14:37,620 --> 00:14:41,040
investigated by recent work in this case

276
00:14:41,040 --> 00:14:44,220
we create multiple memory domains with

277
00:14:44,220 --> 00:14:46,800
different mechanism and each domain

278
00:14:46,800 --> 00:14:48,899
contains one hash table

279
00:14:48,899 --> 00:14:51,660
in this test we fix the domain number

280
00:14:51,660 --> 00:14:55,019
through 32 while increase the domain

281
00:14:55,019 --> 00:14:57,540
size by adding more buckets and key

282
00:14:57,540 --> 00:15:00,660
value pairs in each hash table

283
00:15:00,660 --> 00:15:04,920
the overhead or leave NPK increases as

284
00:15:04,920 --> 00:15:08,339
the domain size grows because it needs

285
00:15:08,339 --> 00:15:11,040
to update more page table entries during

286
00:15:11,040 --> 00:15:12,779
domain switch

287
00:15:12,779 --> 00:15:16,860
in contrast the overhead of EPK and Van

288
00:15:16,860 --> 00:15:20,459
Funk solution is immune to The Domain

289
00:15:20,459 --> 00:15:23,579
size the overhead decreases because the

290
00:15:23,579 --> 00:15:26,940
vanilla performance decreases when more

291
00:15:26,940 --> 00:15:29,959
memory involves

292
00:15:30,480 --> 00:15:33,779
here is a last case study micro kernels

293
00:15:33,779 --> 00:15:36,240
leave minimum functionalities in the

294
00:15:36,240 --> 00:15:38,820
kernel while running system servers such

295
00:15:38,820 --> 00:15:41,160
as file system servers or

296
00:15:41,160 --> 00:15:44,279
file systems and device drivers in the

297
00:15:44,279 --> 00:15:48,000
user processes the interactions between

298
00:15:48,000 --> 00:15:50,399
two servers or between an application

299
00:15:50,399 --> 00:15:53,040
and the server required inter-process

300
00:15:53,040 --> 00:15:56,760
communication which is not cheap

301
00:15:56,760 --> 00:15:59,820
but most recent IPC design called on the

302
00:15:59,820 --> 00:16:03,360
bridge retrofits into mpk to optimize

303
00:16:03,360 --> 00:16:04,920
IPC

304
00:16:04,920 --> 00:16:08,339
it pulls system servers from user level

305
00:16:08,339 --> 00:16:11,600
processes into the kernel address space

306
00:16:11,600 --> 00:16:15,480
meanwhile it leveraged internal mpk to

307
00:16:15,480 --> 00:16:18,120
ensure the isolation between system

308
00:16:18,120 --> 00:16:21,600
servers the ipcs between the servers are

309
00:16:21,600 --> 00:16:22,820
based on

310
00:16:22,820 --> 00:16:26,699
wrpkiu instructions and thus greatly

311
00:16:26,699 --> 00:16:29,660
optimized

312
00:16:29,760 --> 00:16:32,399
however due to the mpk domain number

313
00:16:32,399 --> 00:16:35,880
limitation it can only accelerate ipcs

314
00:16:35,880 --> 00:16:38,880
for limited system servers

315
00:16:38,880 --> 00:16:41,759
since EPK can construct many more

316
00:16:41,759 --> 00:16:44,639
isolated memory domains efficiently and

317
00:16:44,639 --> 00:16:48,180
enable fast domain switch at user level

318
00:16:48,180 --> 00:16:51,240
we propose EPK based hybrids for

319
00:16:51,240 --> 00:16:54,839
boosting ipcs for micro kernels system

320
00:16:54,839 --> 00:16:58,399
servers long at user level and each one

321
00:16:58,399 --> 00:17:02,100
exclusively take one private memory

322
00:17:02,100 --> 00:17:04,619
domain for holding its own memory such

323
00:17:04,619 --> 00:17:07,859
as code data and stack the system

324
00:17:07,859 --> 00:17:10,500
servers cannot access each other's

325
00:17:10,500 --> 00:17:13,799
private memory just like when they are

326
00:17:13,799 --> 00:17:16,140
isolated in different

327
00:17:16,140 --> 00:17:20,160
a process processes while ipcs are based

328
00:17:20,160 --> 00:17:23,520
on the efficient domain switches

329
00:17:23,520 --> 00:17:26,160
the micro kernel can run the related

330
00:17:26,160 --> 00:17:29,880
system servers in the same EPT then most

331
00:17:29,880 --> 00:17:33,620
cross-server ipcs are only need to be

332
00:17:33,620 --> 00:17:36,860
only ex need to execute

333
00:17:36,860 --> 00:17:39,840
wrpio instruction for switching memory

334
00:17:39,840 --> 00:17:42,480
access permission the application to

335
00:17:42,480 --> 00:17:46,380
server IPC needs to execute real Funk

336
00:17:46,380 --> 00:17:49,980
real Funk to change the EPT which is

337
00:17:49,980 --> 00:17:53,160
also far more lightweight than the

338
00:17:53,160 --> 00:17:57,299
original micro kernel IPC

339
00:17:57,299 --> 00:17:59,940
on our research Michael Colonel should

340
00:17:59,940 --> 00:18:02,520
call hybrid shows better performance

341
00:18:02,520 --> 00:18:05,580
than the two recent IPC designs on the

342
00:18:05,580 --> 00:18:09,419
bridge and Sky Bridge which use mpk and

343
00:18:09,419 --> 00:18:13,380
venfunk to accelerate ipcs respectively

344
00:18:13,380 --> 00:18:16,740
in the case of running CQ light on

345
00:18:16,740 --> 00:18:19,080
Zircon which is a micro kernel from

346
00:18:19,080 --> 00:18:20,940
Google

347
00:18:20,940 --> 00:18:24,419
to perform the native performance by up

348
00:18:24,419 --> 00:18:28,380
to nine times and outperformed Sky

349
00:18:28,380 --> 00:18:31,400
bridge by about

350
00:18:31,400 --> 00:18:35,400
66 percentage

351
00:18:35,580 --> 00:18:39,900
to conclude EPK is a first trial to

352
00:18:39,900 --> 00:18:42,840
combine the usage of mpk and hardware

353
00:18:42,840 --> 00:18:45,360
virtualization features to achieve

354
00:18:45,360 --> 00:18:48,419
scalable and efficient inter-processed

355
00:18:48,419 --> 00:18:51,799
memory isolation the three case studies

356
00:18:51,799 --> 00:18:55,440
demonstrate the virus potential usage of

357
00:18:55,440 --> 00:18:57,360
EPK

358
00:18:57,360 --> 00:19:00,799
thank you very much

