1
00:00:14,080 --> 00:00:16,480
hi everyone i'm jamming from qinghua

2
00:00:16,480 --> 00:00:17,600
university

3
00:00:17,600 --> 00:00:20,000
i'm proud to have the opportunity to

4
00:00:20,000 --> 00:00:21,760
present our paper

5
00:00:21,760 --> 00:00:24,320
finding box in programmable data plane

6
00:00:24,320 --> 00:00:26,160
generators

7
00:00:26,160 --> 00:00:28,240
this is a joint work with my colleagues

8
00:00:28,240 --> 00:00:30,880
from ching hwan university and alibaba

9
00:00:30,880 --> 00:00:32,960
group

10
00:00:32,960 --> 00:00:34,880
over the past few years

11
00:00:34,880 --> 00:00:37,200
programmable data plane has gained

12
00:00:37,200 --> 00:00:39,760
significant traction in the networking

13
00:00:39,760 --> 00:00:41,840
community

14
00:00:41,840 --> 00:00:43,840
the packet processing logic on the

15
00:00:43,840 --> 00:00:46,160
devices are programmable

16
00:00:46,160 --> 00:00:49,200
and thus enable flexible customization

17
00:00:49,200 --> 00:00:51,600
of the network

18
00:00:51,600 --> 00:00:53,440
according to the intent

19
00:00:53,440 --> 00:00:56,160
programmers write data plane programs in

20
00:00:56,160 --> 00:00:58,399
domain specific languages

21
00:00:58,399 --> 00:01:00,879
or dsl

22
00:01:00,879 --> 00:01:03,760
then the compiler compiles the dsl

23
00:01:03,760 --> 00:01:04,799
programs

24
00:01:04,799 --> 00:01:07,680
and generates the binary

25
00:01:07,680 --> 00:01:10,560
the binary will be finally loaded on the

26
00:01:10,560 --> 00:01:13,600
programmable devices

27
00:01:13,600 --> 00:01:16,000
however since the data planning

28
00:01:16,000 --> 00:01:19,280
programming is still at an early stage

29
00:01:19,280 --> 00:01:21,600
programmers have to manually take care

30
00:01:21,600 --> 00:01:24,880
of many hardware details and dsl

31
00:01:24,880 --> 00:01:26,400
specifics

32
00:01:26,400 --> 00:01:28,640
this makes data plan programming not

33
00:01:28,640 --> 00:01:30,880
easy

34
00:01:30,880 --> 00:01:33,600
recently a growing body of research

35
00:01:33,600 --> 00:01:36,880
proposes data plane generators or dp

36
00:01:36,880 --> 00:01:38,720
generator

37
00:01:38,720 --> 00:01:41,280
the dp generators can greatly reduce

38
00:01:41,280 --> 00:01:44,159
manual efforts by providing high-level

39
00:01:44,159 --> 00:01:47,119
pregnancy to express intent

40
00:01:47,119 --> 00:01:50,399
and directly converting intent into dp

41
00:01:50,399 --> 00:01:51,840
programs

42
00:01:51,840 --> 00:01:52,799
thus

43
00:01:52,799 --> 00:01:55,759
many researchers and industries design

44
00:01:55,759 --> 00:01:58,479
various dp generators for network

45
00:01:58,479 --> 00:01:59,759
monitoring

46
00:01:59,759 --> 00:02:04,320
routing security and so on

47
00:02:04,399 --> 00:02:07,200
with the prevalence of dp generators we

48
00:02:07,200 --> 00:02:10,080
need to guarantee their correctness

49
00:02:10,080 --> 00:02:11,760
based on our study

50
00:02:11,760 --> 00:02:14,319
three types of mistakes may happen to dp

51
00:02:14,319 --> 00:02:16,080
generators

52
00:02:16,080 --> 00:02:18,720
the first is intent violation

53
00:02:18,720 --> 00:02:21,440
the input intent and the output program

54
00:02:21,440 --> 00:02:24,000
is not consistent

55
00:02:24,000 --> 00:02:26,640
the second is security vulnerabilities

56
00:02:26,640 --> 00:02:28,640
in output programs

57
00:02:28,640 --> 00:02:32,640
such as out-of-bound register access

58
00:02:32,640 --> 00:02:35,680
and the third is generator crash the

59
00:02:35,680 --> 00:02:37,760
generator rejects some reasonable

60
00:02:37,760 --> 00:02:41,360
intents without any output

61
00:02:41,360 --> 00:02:43,840
using 40 dp generators

62
00:02:43,840 --> 00:02:47,360
may result in serious mistakes such as

63
00:02:47,360 --> 00:02:50,160
missing attacks and undesired package

64
00:02:50,160 --> 00:02:53,120
processing procedure

65
00:02:53,120 --> 00:02:54,160
therefore

66
00:02:54,160 --> 00:02:56,480
we should guarantee the correctness

67
00:02:56,480 --> 00:03:00,560
before using a dp generator

68
00:03:00,720 --> 00:03:02,159
unfortunately

69
00:03:02,159 --> 00:03:04,720
little attention has been devoted to

70
00:03:04,720 --> 00:03:05,840
guaranteeing

71
00:03:05,840 --> 00:03:09,360
the correctness of dp generators

72
00:03:09,360 --> 00:03:12,560
existing data plane verification tools

73
00:03:12,560 --> 00:03:15,200
focus on verifying the consistency

74
00:03:15,200 --> 00:03:19,599
between specifications and dpg programs

75
00:03:19,599 --> 00:03:20,720
however

76
00:03:20,720 --> 00:03:22,720
these tools are not designed for

77
00:03:22,720 --> 00:03:25,680
debugging dp generators

78
00:03:25,680 --> 00:03:26,560
first

79
00:03:26,560 --> 00:03:28,720
since they aim to verify individual

80
00:03:28,720 --> 00:03:31,360
programs instead of debugging dp

81
00:03:31,360 --> 00:03:32,720
generators

82
00:03:32,720 --> 00:03:35,599
they can hardly cover all generator

83
00:03:35,599 --> 00:03:38,879
force because they cannot enumerate the

84
00:03:38,879 --> 00:03:41,519
numerous intent

85
00:03:41,519 --> 00:03:42,480
second

86
00:03:42,480 --> 00:03:45,599
to check intent program consistency

87
00:03:45,599 --> 00:03:47,599
they require massive human return

88
00:03:47,599 --> 00:03:49,040
specifications

89
00:03:49,040 --> 00:03:53,599
which is error-prone and time-consuming

90
00:03:53,599 --> 00:03:57,120
in this paper we proposed fireboat

91
00:03:57,120 --> 00:04:00,560
a black box testing tool to find bugs in

92
00:04:00,560 --> 00:04:03,280
dp generators

93
00:04:03,280 --> 00:04:06,239
the key idea of fireboat is thoroughly

94
00:04:06,239 --> 00:04:09,439
generating intents as test cases

95
00:04:09,439 --> 00:04:12,080
and automatically performing program

96
00:04:12,080 --> 00:04:13,599
verification

97
00:04:13,599 --> 00:04:14,560
thus

98
00:04:14,560 --> 00:04:17,918
firebot workflow includes two steps

99
00:04:17,918 --> 00:04:20,238
intent generation and program

100
00:04:20,238 --> 00:04:22,639
verification

101
00:04:22,639 --> 00:04:23,600
first

102
00:04:23,600 --> 00:04:26,639
to thoroughly explore the interspace

103
00:04:26,639 --> 00:04:29,120
firebot takes the grammar and semantic

104
00:04:29,120 --> 00:04:32,639
constraints of a dp generator as input

105
00:04:32,639 --> 00:04:36,400
and generates all reasonable intents

106
00:04:36,400 --> 00:04:37,280
then

107
00:04:37,280 --> 00:04:39,680
firebot proves the generated intent

108
00:04:39,680 --> 00:04:42,720
space to eliminate redundancy

109
00:04:42,720 --> 00:04:46,880
and produces representative intent

110
00:04:46,880 --> 00:04:49,440
this intent as input into the dp

111
00:04:49,440 --> 00:04:52,720
generator to generate dp programs

112
00:04:52,720 --> 00:04:57,120
or to find crash backs

113
00:04:57,120 --> 00:04:59,759
to automatically verify the correctness

114
00:04:59,759 --> 00:05:01,919
of generated programs

115
00:05:01,919 --> 00:05:04,400
fireballs provides a general and high

116
00:05:04,400 --> 00:05:07,680
level specification to express every

117
00:05:07,680 --> 00:05:10,560
intense grammar symbol

118
00:05:10,560 --> 00:05:13,120
and automatically derives the final

119
00:05:13,120 --> 00:05:16,960
specification of each intent

120
00:05:16,960 --> 00:05:20,400
then firebot formalizes the output dp

121
00:05:20,400 --> 00:05:22,840
programs using these three

122
00:05:22,840 --> 00:05:26,080
formulas and use the open source this

123
00:05:26,080 --> 00:05:28,880
resolver to check whether these three

124
00:05:28,880 --> 00:05:32,320
formulas have security vulnerabilities

125
00:05:32,320 --> 00:05:34,800
or whether they are consistent with the

126
00:05:34,800 --> 00:05:37,800
specifications

127
00:05:38,960 --> 00:05:42,080
so let's look deeper into the workflow

128
00:05:42,080 --> 00:05:42,960
first

129
00:05:42,960 --> 00:05:47,520
let's generate all reasonable intents

130
00:05:47,680 --> 00:05:49,919
reasonable intent should be first

131
00:05:49,919 --> 00:05:52,720
syntactically correct to generate

132
00:05:52,720 --> 00:05:55,759
syntactically correct intents we follow

133
00:05:55,759 --> 00:06:00,000
a syntax guided generation method

134
00:06:00,000 --> 00:06:02,720
each dp generator should expose the

135
00:06:02,720 --> 00:06:05,600
grammar from expressing intent

136
00:06:05,600 --> 00:06:09,120
the grammar describes the intent space

137
00:06:09,120 --> 00:06:12,080
five vote uses the backers north form or

138
00:06:12,080 --> 00:06:13,280
bnf

139
00:06:13,280 --> 00:06:16,240
the most common grammar format to

140
00:06:16,240 --> 00:06:19,520
describe the intent grammar

141
00:06:19,520 --> 00:06:22,560
the bnf grammar contains a start symbol

142
00:06:22,560 --> 00:06:25,199
and many expansion rules

143
00:06:25,199 --> 00:06:27,600
this expansion rules can expand

144
00:06:27,600 --> 00:06:30,479
individual symbols to combinations of

145
00:06:30,479 --> 00:06:34,120
many other symbols

146
00:06:34,160 --> 00:06:37,680
given a bnf grammar of a dp generator

147
00:06:37,680 --> 00:06:40,240
generating or syntactically correct

148
00:06:40,240 --> 00:06:41,199
intent

149
00:06:41,199 --> 00:06:43,639
can be written as growing an

150
00:06:43,639 --> 00:06:47,639
intergeneration graph

151
00:06:48,400 --> 00:06:51,360
the root node is the start symbol

152
00:06:51,360 --> 00:06:54,160
then we grow the graph by replacing the

153
00:06:54,160 --> 00:06:57,039
symbols at each node using the expansion

154
00:06:57,039 --> 00:06:58,400
rules

155
00:06:58,400 --> 00:07:00,160
in this example

156
00:07:00,160 --> 00:07:03,360
first the program symbol is replaced by

157
00:07:03,360 --> 00:07:05,680
the statement symbol

158
00:07:05,680 --> 00:07:08,560
the statement symbol is replaced by two

159
00:07:08,560 --> 00:07:09,919
symbols

160
00:07:09,919 --> 00:07:13,120
name and query

161
00:07:13,280 --> 00:07:16,319
then we can expand the query symbol

162
00:07:16,319 --> 00:07:19,360
using two expansion rules and generate

163
00:07:19,360 --> 00:07:22,720
two new nodes

164
00:07:22,880 --> 00:07:25,520
we close the graph until all leaf nodes

165
00:07:25,520 --> 00:07:29,280
cannot be expanded anymore then we can

166
00:07:29,280 --> 00:07:33,599
collect the leaf nodes as output intents

167
00:07:33,599 --> 00:07:36,639
such syntax guided intent generation can

168
00:07:36,639 --> 00:07:39,840
find or syntactically correct intents

169
00:07:39,840 --> 00:07:40,880
however

170
00:07:40,880 --> 00:07:43,919
only correct syntax may be not enough

171
00:07:43,919 --> 00:07:47,440
because they may be semantically invalid

172
00:07:47,440 --> 00:07:50,160
here we give two examples for invalid

173
00:07:50,160 --> 00:07:51,919
semantics

174
00:07:51,919 --> 00:07:55,120
the first example is undefined variable

175
00:07:55,120 --> 00:07:56,639
reference

176
00:07:56,639 --> 00:08:00,000
here variable r1 is referenced before

177
00:08:00,000 --> 00:08:01,599
it's defined

178
00:08:01,599 --> 00:08:04,160
to avoid this case we should require

179
00:08:04,160 --> 00:08:05,440
that

180
00:08:05,440 --> 00:08:07,759
only after we take the expansion rules

181
00:08:07,759 --> 00:08:10,479
for variable definition definition

182
00:08:10,479 --> 00:08:12,960
we can then take the expansion words for

183
00:08:12,960 --> 00:08:16,639
the corresponding variable reference

184
00:08:16,639 --> 00:08:18,879
this case actually represents a

185
00:08:18,879 --> 00:08:21,599
dependency type constraint

186
00:08:21,599 --> 00:08:24,400
taking some rules is dependent dependent

187
00:08:24,400 --> 00:08:27,120
on taking other rules

188
00:08:27,120 --> 00:08:30,400
the second example is repeated variable

189
00:08:30,400 --> 00:08:31,919
definition

190
00:08:31,919 --> 00:08:33,679
to avoid this case

191
00:08:33,679 --> 00:08:36,159
we should recall that

192
00:08:36,159 --> 00:08:38,399
if we take the expansion rules for

193
00:08:38,399 --> 00:08:40,399
variable definition

194
00:08:40,399 --> 00:08:42,799
we should not take the expansion rules

195
00:08:42,799 --> 00:08:46,640
for the same variable definition

196
00:08:47,920 --> 00:08:50,800
this case actually represents an

197
00:08:50,800 --> 00:08:53,360
exclusion type constraint

198
00:08:53,360 --> 00:08:55,680
taking some rules and taking some other

199
00:08:55,680 --> 00:08:59,839
rules are mutually exclusive

200
00:08:59,839 --> 00:09:02,720
with this semantic constraints

201
00:09:02,720 --> 00:09:04,959
we can reject some expansion rules

202
00:09:04,959 --> 00:09:07,120
during intergeneration

203
00:09:07,120 --> 00:09:11,600
to generate semantically valid intents

204
00:09:12,240 --> 00:09:14,720
now we can generate all reasonable

205
00:09:14,720 --> 00:09:15,760
intents

206
00:09:15,760 --> 00:09:18,240
however the intent space may be

207
00:09:18,240 --> 00:09:20,959
extremely large or even

208
00:09:20,959 --> 00:09:24,399
infinite so next we need to reduce the

209
00:09:24,399 --> 00:09:27,040
intense space and generate only

210
00:09:27,040 --> 00:09:29,760
representative intents which are enough

211
00:09:29,760 --> 00:09:32,640
to find bugs

212
00:09:32,640 --> 00:09:35,200
we first analyze the factors which lead

213
00:09:35,200 --> 00:09:37,680
to the huge intent space

214
00:09:37,680 --> 00:09:40,399
the first is the right parameter range

215
00:09:40,399 --> 00:09:42,240
a symbol may have many possible

216
00:09:42,240 --> 00:09:43,680
expansion rules

217
00:09:43,680 --> 00:09:47,040
which correspond to a large node degree

218
00:09:47,040 --> 00:09:48,560
in this example

219
00:09:48,560 --> 00:09:49,279
a

220
00:09:49,279 --> 00:09:50,560
bit number

221
00:09:50,560 --> 00:09:53,480
has 65

222
00:09:53,480 --> 00:09:56,240
536 possible values

223
00:09:56,240 --> 00:09:59,120
for sphere this symbol appears multiple

224
00:09:59,120 --> 00:10:00,160
times

225
00:10:00,160 --> 00:10:03,120
the exponential combination can directly

226
00:10:03,120 --> 00:10:07,040
lead to explosion of the internal space

227
00:10:07,040 --> 00:10:09,680
the second is the cyclic reference a

228
00:10:09,680 --> 00:10:12,080
symbol may return to itself after

229
00:10:12,080 --> 00:10:13,440
expansion

230
00:10:13,440 --> 00:10:16,320
which corresponds to an infinite depth

231
00:10:16,320 --> 00:10:19,519
of the intent generation graph

232
00:10:19,519 --> 00:10:21,920
for the first one the white parameter

233
00:10:21,920 --> 00:10:23,200
range

234
00:10:23,200 --> 00:10:25,680
we can keep only representative

235
00:10:25,680 --> 00:10:27,920
expansion rules

236
00:10:27,920 --> 00:10:30,480
the representative rules include three

237
00:10:30,480 --> 00:10:33,200
categories

238
00:10:33,200 --> 00:10:36,240
the first is the boundary words such as

239
00:10:36,240 --> 00:10:40,240
minimum and maximum values for numbers

240
00:10:40,240 --> 00:10:42,480
boundary rules usually represent some

241
00:10:42,480 --> 00:10:45,200
extreme cases or conditions

242
00:10:45,200 --> 00:10:49,519
and should be included in the test cases

243
00:10:49,519 --> 00:10:52,640
the second is random rules we also take

244
00:10:52,640 --> 00:10:54,800
a random rule in addition to the

245
00:10:54,800 --> 00:10:56,800
boundary rule

246
00:10:56,800 --> 00:11:00,560
the third is previously selected rules

247
00:11:00,560 --> 00:11:02,880
when the same symbol is event is

248
00:11:02,880 --> 00:11:04,959
expanded multiple times

249
00:11:04,959 --> 00:11:07,760
we also include the previously selected

250
00:11:07,760 --> 00:11:09,839
random rules

251
00:11:09,839 --> 00:11:12,320
for the cyclic symbol reference

252
00:11:12,320 --> 00:11:15,360
we break the infinite symbol recurrence

253
00:11:15,360 --> 00:11:18,000
by limiting the recurrence time of the

254
00:11:18,000 --> 00:11:20,240
same symbol expansions

255
00:11:20,240 --> 00:11:22,000
such pruning is based on the

256
00:11:22,000 --> 00:11:24,720
combinatorial testing theory and will

257
00:11:24,720 --> 00:11:27,760
not lose intent representativeness

258
00:11:27,760 --> 00:11:30,480
for time reasons i won't go into details

259
00:11:30,480 --> 00:11:32,320
here

260
00:11:32,320 --> 00:11:35,279
now we have generated both reasonable

261
00:11:35,279 --> 00:11:39,279
and representative intents as test cases

262
00:11:39,279 --> 00:11:41,760
these intents are then input into the dp

263
00:11:41,760 --> 00:11:44,640
generator to find crash backs or to

264
00:11:44,640 --> 00:11:47,120
generate dp programs

265
00:11:47,120 --> 00:11:50,160
next we need to automatically verify the

266
00:11:50,160 --> 00:11:53,200
generated dp programs to further find

267
00:11:53,200 --> 00:11:55,920
security vulnerabilities or intent

268
00:11:55,920 --> 00:11:58,640
violations

269
00:11:58,720 --> 00:12:00,720
the challenge here is

270
00:12:00,720 --> 00:12:03,360
how to automatically convert intents

271
00:12:03,360 --> 00:12:06,320
into specifications for verification

272
00:12:06,320 --> 00:12:09,040
because manually converting intents into

273
00:12:09,040 --> 00:12:11,600
verification specifications is time

274
00:12:11,600 --> 00:12:14,639
consuming and not scalable

275
00:12:14,639 --> 00:12:16,560
we observe that

276
00:12:16,560 --> 00:12:18,560
intents are generated by expanding

277
00:12:18,560 --> 00:12:20,160
grammar symbols

278
00:12:20,160 --> 00:12:23,040
so our key idea is first writing the

279
00:12:23,040 --> 00:12:25,440
specifications of each symbol in the

280
00:12:25,440 --> 00:12:26,480
grammar

281
00:12:26,480 --> 00:12:28,959
and then automatically composing simple

282
00:12:28,959 --> 00:12:31,760
specifications into specifications for

283
00:12:31,760 --> 00:12:33,440
each intent

284
00:12:33,440 --> 00:12:36,160
to uniformly express various grammar

285
00:12:36,160 --> 00:12:38,160
across generators

286
00:12:38,160 --> 00:12:41,040
we need to design an expression format

287
00:12:41,040 --> 00:12:43,680
that should be general enough to specify

288
00:12:43,680 --> 00:12:45,600
various grammar symbols

289
00:12:45,600 --> 00:12:49,440
and flexible enough to for composition

290
00:12:49,440 --> 00:12:51,680
we propose to express symbol

291
00:12:51,680 --> 00:12:55,040
specifications as high level functions

292
00:12:55,040 --> 00:12:57,440
the function is general enough to

293
00:12:57,440 --> 00:13:00,480
specify the input logic and return

294
00:13:00,480 --> 00:13:03,519
values of individual symbols and

295
00:13:03,519 --> 00:13:05,839
flexible enough for composition by

296
00:13:05,839 --> 00:13:08,639
combining function course

297
00:13:08,639 --> 00:13:11,760
the function consists of two segments

298
00:13:11,760 --> 00:13:14,399
a declaration function that defines

299
00:13:14,399 --> 00:13:16,720
internal states of symbols

300
00:13:16,720 --> 00:13:19,680
and an execution function that describes

301
00:13:19,680 --> 00:13:22,880
the process in logic

302
00:13:22,959 --> 00:13:26,560
here we give an example for counting

303
00:13:26,560 --> 00:13:28,560
the simple count statement

304
00:13:28,560 --> 00:13:31,600
can be expanded as counting on an

305
00:13:31,600 --> 00:13:33,200
expression

306
00:13:33,200 --> 00:13:35,600
if the expression returns true

307
00:13:35,600 --> 00:13:38,160
the counter will plus 1.

308
00:13:38,160 --> 00:13:41,600
so the specification for count statement

309
00:13:41,600 --> 00:13:43,680
is like this

310
00:13:43,680 --> 00:13:45,760
the declaration function defines a

311
00:13:45,760 --> 00:13:46,839
counter

312
00:13:46,839 --> 00:13:50,000
variable the execution function does the

313
00:13:50,000 --> 00:13:51,120
counting

314
00:13:51,120 --> 00:13:54,000
by calling the execution function of the

315
00:13:54,000 --> 00:13:56,720
expression symbol

316
00:13:56,720 --> 00:13:59,600
similarly the specification of

317
00:13:59,600 --> 00:14:01,279
expression symbol contains the

318
00:14:01,279 --> 00:14:05,600
declaration part and the execution part

319
00:14:05,600 --> 00:14:08,320
when we have a code snippet like this

320
00:14:08,320 --> 00:14:10,880
the specification can be automatically

321
00:14:10,880 --> 00:14:13,680
derived by composing the specifications

322
00:14:13,680 --> 00:14:15,279
for count statement

323
00:14:15,279 --> 00:14:17,839
and expression

324
00:14:18,480 --> 00:14:20,639
in this way we can derive the

325
00:14:20,639 --> 00:14:23,680
specification for any intent given the

326
00:14:23,680 --> 00:14:27,600
personal specifications

327
00:14:27,600 --> 00:14:28,399
next

328
00:14:28,399 --> 00:14:30,720
fireball formalizes the output dp

329
00:14:30,720 --> 00:14:33,760
programs using these three formulas

330
00:14:33,760 --> 00:14:36,000
these these three formulas will finally

331
00:14:36,000 --> 00:14:38,480
be verified

332
00:14:38,480 --> 00:14:41,600
currently fireball focus on the p4

333
00:14:41,600 --> 00:14:45,440
language here we use the popular p416 as

334
00:14:45,440 --> 00:14:47,760
an example to illustrate how to

335
00:14:47,760 --> 00:14:50,240
formalize dp programs into these three

336
00:14:50,240 --> 00:14:51,920
formulas

337
00:14:51,920 --> 00:14:55,519
a p416 program is composed of several

338
00:14:55,519 --> 00:14:57,760
programmable blocks

339
00:14:57,760 --> 00:15:00,320
we convert each programmable block into

340
00:15:00,320 --> 00:15:02,959
these three formulas

341
00:15:02,959 --> 00:15:05,279
here we present an example for

342
00:15:05,279 --> 00:15:06,480
formalizing

343
00:15:06,480 --> 00:15:08,800
a match action table residing in the

344
00:15:08,800 --> 00:15:11,279
control flow block

345
00:15:11,279 --> 00:15:13,120
in this example

346
00:15:13,120 --> 00:15:16,320
table t matches with the key k and has

347
00:15:16,320 --> 00:15:19,040
two candidate actions

348
00:15:19,040 --> 00:15:20,959
to formalize this table

349
00:15:20,959 --> 00:15:24,240
we define a z3 free variable for each

350
00:15:24,240 --> 00:15:27,839
input parameter of this table

351
00:15:27,839 --> 00:15:30,079
we also convert the operations of this

352
00:15:30,079 --> 00:15:33,519
table to a nested if the else statement

353
00:15:33,519 --> 00:15:37,120
to imitate the action executions

354
00:15:37,120 --> 00:15:40,000
then we can combine these three formulas

355
00:15:40,000 --> 00:15:42,480
for different tables to derive these

356
00:15:42,480 --> 00:15:44,399
three formulas for the control flow

357
00:15:44,399 --> 00:15:46,720
block

358
00:15:48,160 --> 00:15:50,000
with these three formulas and

359
00:15:50,000 --> 00:15:52,480
specifications we can then perform

360
00:15:52,480 --> 00:15:55,199
program verification by converting the

361
00:15:55,199 --> 00:15:57,279
specification into these three

362
00:15:57,279 --> 00:16:00,320
assertions on the c3 formulas

363
00:16:00,320 --> 00:16:02,959
and then we use the this resolver to

364
00:16:02,959 --> 00:16:04,480
check whether there are security

365
00:16:04,480 --> 00:16:07,199
vulnerabilities in the generated digital

366
00:16:07,199 --> 00:16:09,600
formulas and whether the formulas and

367
00:16:09,600 --> 00:16:13,519
specifications are consistent

368
00:16:13,600 --> 00:16:15,920
we implement fireballs in the

369
00:16:15,920 --> 00:16:18,079
linux virtual machine

370
00:16:18,079 --> 00:16:21,759
firebot has about 2000 lines of code

371
00:16:21,759 --> 00:16:23,920
we use fireballs to test

372
00:16:23,920 --> 00:16:27,600
three popular open source dp generators

373
00:16:27,600 --> 00:16:31,279
including mapper and sonata for network

374
00:16:31,279 --> 00:16:34,720
telemetry and poise for security policy

375
00:16:34,720 --> 00:16:37,120
enforcement

376
00:16:37,120 --> 00:16:39,519
we take two dp program verification

377
00:16:39,519 --> 00:16:44,880
tours acryla and p4v for comparison

378
00:16:45,279 --> 00:16:47,839
we have two evaluation goals

379
00:16:47,839 --> 00:16:49,920
the first is the back coverage of

380
00:16:49,920 --> 00:16:51,199
fireboat

381
00:16:51,199 --> 00:16:54,959
how many bugs can fireboat fund

382
00:16:54,959 --> 00:16:57,120
and the second is the scalability of

383
00:16:57,120 --> 00:16:58,240
fireboat

384
00:16:58,240 --> 00:17:00,480
including how long does it take for

385
00:17:00,480 --> 00:17:02,639
firebots to find bugs

386
00:17:02,639 --> 00:17:05,359
and how many human efforts does variable

387
00:17:05,359 --> 00:17:07,599
take

388
00:17:08,559 --> 00:17:11,439
first for the back coverage

389
00:17:11,439 --> 00:17:13,439
tribot finds bugs in all three

390
00:17:13,439 --> 00:17:15,919
generators by generating thousands of

391
00:17:15,919 --> 00:17:18,079
test cases

392
00:17:18,079 --> 00:17:21,599
including five security vulnerabilities

393
00:17:21,599 --> 00:17:23,839
certain internal violations and one

394
00:17:23,839 --> 00:17:25,359
crash back

395
00:17:25,359 --> 00:17:28,079
we also present the back details in our

396
00:17:28,079 --> 00:17:30,400
paper

397
00:17:30,400 --> 00:17:32,960
to evaluate the debugging scalability of

398
00:17:32,960 --> 00:17:34,240
fireball

399
00:17:34,240 --> 00:17:36,480
we count the lines of input cumulative

400
00:17:36,480 --> 00:17:37,520
code

401
00:17:37,520 --> 00:17:39,039
and the running time for internet

402
00:17:39,039 --> 00:17:43,200
generation and program verification

403
00:17:43,360 --> 00:17:46,000
for the running time we can see that

404
00:17:46,000 --> 00:17:48,160
both internet generation and program

405
00:17:48,160 --> 00:17:51,200
verification in all scenarios can be

406
00:17:51,200 --> 00:17:55,039
done within 25 minutes

407
00:17:55,039 --> 00:17:57,120
for the human written code

408
00:17:57,120 --> 00:17:59,840
fireballs requires tens of lines of code

409
00:17:59,840 --> 00:18:01,679
for internet grammar

410
00:18:01,679 --> 00:18:04,559
tens of lines for semantic constraints

411
00:18:04,559 --> 00:18:06,960
and hundreds of lines for per simple

412
00:18:06,960 --> 00:18:09,280
specifications

413
00:18:09,280 --> 00:18:11,280
we can see that the personal

414
00:18:11,280 --> 00:18:14,320
specifications occupy a majority of

415
00:18:14,320 --> 00:18:16,160
human written code

416
00:18:16,160 --> 00:18:17,200
however

417
00:18:17,200 --> 00:18:18,799
fireball requires writing the

418
00:18:18,799 --> 00:18:21,840
specifications only once and then the

419
00:18:21,840 --> 00:18:24,720
specifications for all intents can be

420
00:18:24,720 --> 00:18:27,840
automatically derived

421
00:18:27,840 --> 00:18:30,320
we use existing tools to verify the

422
00:18:30,320 --> 00:18:32,240
generated programs

423
00:18:32,240 --> 00:18:33,760
we need to write thousands of

424
00:18:33,760 --> 00:18:37,200
specifications for the generated intent

425
00:18:37,200 --> 00:18:40,799
thus firebot can save massive manual

426
00:18:40,799 --> 00:18:43,600
efforts by writing specifications only

427
00:18:43,600 --> 00:18:44,960
once

428
00:18:44,960 --> 00:18:46,799
let me conclude

429
00:18:46,799 --> 00:18:48,480
we proposed fireball

430
00:18:48,480 --> 00:18:52,400
the first tool to debug db generators

431
00:18:52,400 --> 00:18:54,559
firebot thoroughly explores the internet

432
00:18:54,559 --> 00:18:55,440
space

433
00:18:55,440 --> 00:18:57,840
to generate syntactically correct

434
00:18:57,840 --> 00:19:00,960
symmetrically valid and representative

435
00:19:00,960 --> 00:19:03,919
intents as test cases

436
00:19:03,919 --> 00:19:06,480
and then automatically verify dp

437
00:19:06,480 --> 00:19:09,520
programs by formalizing programs

438
00:19:09,520 --> 00:19:11,840
and producing specifications to find

439
00:19:11,840 --> 00:19:14,159
bugs

440
00:19:14,240 --> 00:19:16,480
evaluation on three open source dp

441
00:19:16,480 --> 00:19:18,640
generators show that

442
00:19:18,640 --> 00:19:20,799
firebot can achieve both high back

443
00:19:20,799 --> 00:19:24,720
coverage and high scalability

444
00:19:24,720 --> 00:19:26,480
thank you for your listening and i'm

445
00:19:26,480 --> 00:19:30,280
happy to take questions

