1
00:00:13,040 --> 00:00:16,079
hello everyone i'm holding and today i'm

2
00:00:16,079 --> 00:00:18,160
going to talk about the shift a new

3
00:00:18,160 --> 00:00:20,480
methodology to leverage automation to

4
00:00:20,480 --> 00:00:22,560
verify distributed systems

5
00:00:22,560 --> 00:00:24,560
this is a joint work with my colleagues

6
00:00:24,560 --> 00:00:28,160
at the university of michigan

7
00:00:28,240 --> 00:00:30,880
how much do you trust your systems

8
00:00:30,880 --> 00:00:32,960
it turns out that even with our best

9
00:00:32,960 --> 00:00:35,200
effort we still live backs in our

10
00:00:35,200 --> 00:00:36,239
systems

11
00:00:36,239 --> 00:00:39,600
for example we leave box in icloud which

12
00:00:39,600 --> 00:00:42,160
expose private information

13
00:00:42,160 --> 00:00:45,120
or in the case of microsoft we need bugs

14
00:00:45,120 --> 00:00:48,480
in windows which can cost lots of data

15
00:00:48,480 --> 00:00:50,559
and so on

16
00:00:50,559 --> 00:00:53,360
this is just a small part of the list of

17
00:00:53,360 --> 00:00:55,600
the bugs and their problems

18
00:00:55,600 --> 00:00:58,079
actually this box can influence the

19
00:00:58,079 --> 00:01:00,879
company revenue and more importantly

20
00:01:00,879 --> 00:01:04,160
the public reputation

21
00:01:04,319 --> 00:01:06,400
to build systems with strong practice

22
00:01:06,400 --> 00:01:08,560
guarantees the research community has

23
00:01:08,560 --> 00:01:10,400
developed a powerful approach for

24
00:01:10,400 --> 00:01:12,479
modification

25
00:01:12,479 --> 00:01:14,799
with formal verification we can formally

26
00:01:14,799 --> 00:01:17,840
prove the correctness of a system

27
00:01:17,840 --> 00:01:20,159
however despite the recent effort

28
00:01:20,159 --> 00:01:21,759
formal verification of distributed

29
00:01:21,759 --> 00:01:23,680
systems is still not ready for

30
00:01:23,680 --> 00:01:25,759
real-world applications

31
00:01:25,759 --> 00:01:27,360
the most powerful

32
00:01:27,360 --> 00:01:29,520
but manual approach of ironfist and

33
00:01:29,520 --> 00:01:31,920
verdi where the developer used

34
00:01:31,920 --> 00:01:33,840
refinement to show that a complex

35
00:01:33,840 --> 00:01:35,759
implementation is equivalent to an

36
00:01:35,759 --> 00:01:38,240
abstract sophistication

37
00:01:38,240 --> 00:01:40,720
however this approach used a huge amount

38
00:01:40,720 --> 00:01:42,240
of manual effort

39
00:01:42,240 --> 00:01:44,799
and takes person years to prove a

40
00:01:44,799 --> 00:01:47,840
disputed system correct

41
00:01:47,840 --> 00:01:50,640
to reduce the manual effort another

42
00:01:50,640 --> 00:01:53,439
approach i4 was proposed

43
00:01:53,439 --> 00:01:55,840
i4 and this follow-up works leverage

44
00:01:55,840 --> 00:01:58,320
model checking and sap servers to

45
00:01:58,320 --> 00:02:00,640
automate the process of proving the

46
00:02:00,640 --> 00:02:02,960
correctness of a protocol

47
00:02:02,960 --> 00:02:04,799
we call the monolithic

48
00:02:04,799 --> 00:02:07,759
provers because this approach can only

49
00:02:07,759 --> 00:02:10,878
be applied to magnetic protocols but not

50
00:02:10,878 --> 00:02:13,760
refinement proofs

51
00:02:13,760 --> 00:02:16,400
so what's refinement and why it's so

52
00:02:16,400 --> 00:02:19,760
important in verification

53
00:02:20,000 --> 00:02:23,040
in refinement we use two layers which

54
00:02:23,040 --> 00:02:24,879
are modeled as two separated

55
00:02:24,879 --> 00:02:26,319
transmissions

56
00:02:26,319 --> 00:02:28,400
we say that the lower layer refines the

57
00:02:28,400 --> 00:02:31,520
upper layer if all observable outputs

58
00:02:31,520 --> 00:02:34,160
produced by any execution of the lower

59
00:02:34,160 --> 00:02:36,720
layer can also be produced by some

60
00:02:36,720 --> 00:02:40,000
execution of the upper layer

61
00:02:40,000 --> 00:02:41,440
in the simplest application of

62
00:02:41,440 --> 00:02:43,760
refinement the developer writes two

63
00:02:43,760 --> 00:02:45,840
layers a specification and an

64
00:02:45,840 --> 00:02:47,120
implementation

65
00:02:47,120 --> 00:02:48,959
the only thing to show is that the

66
00:02:48,959 --> 00:02:50,800
sophistication the implementation

67
00:02:50,800 --> 00:02:53,360
prevents the sophistication

68
00:02:53,360 --> 00:02:55,440
in more complex systems

69
00:02:55,440 --> 00:02:57,280
directly proving refinement from the

70
00:02:57,280 --> 00:02:59,120
invitation to the substitution could be

71
00:02:59,120 --> 00:03:00,319
difficult

72
00:03:00,319 --> 00:03:03,040
in that case the developer can insert

73
00:03:03,040 --> 00:03:05,440
one or more increasingly complex layers

74
00:03:05,440 --> 00:03:06,480
in between

75
00:03:06,480 --> 00:03:08,720
thus creating a multi-layer structure

76
00:03:08,720 --> 00:03:10,560
where each layer must be proven to

77
00:03:10,560 --> 00:03:14,239
refine the layer above it

78
00:03:14,879 --> 00:03:17,120
refinement it turns out is a very

79
00:03:17,120 --> 00:03:18,800
powerful technique for a number of

80
00:03:18,800 --> 00:03:20,640
reasons

81
00:03:20,640 --> 00:03:21,519
first

82
00:03:21,519 --> 00:03:24,400
previous work from ti plus q iron fleet

83
00:03:24,400 --> 00:03:26,159
shows that sophistication should be

84
00:03:26,159 --> 00:03:28,000
written as a simple abstract

85
00:03:28,000 --> 00:03:29,840
transmissions which can be easily

86
00:03:29,840 --> 00:03:31,280
understood

87
00:03:31,280 --> 00:03:32,799
and the refinement

88
00:03:32,799 --> 00:03:34,799
proves that we can refer a complex

89
00:03:34,799 --> 00:03:37,280
invitation into such a simple concept

90
00:03:37,280 --> 00:03:39,040
specification

91
00:03:39,040 --> 00:03:41,120
imagine that you are proving a shadow

92
00:03:41,120 --> 00:03:44,080
hash table mineralizability is used for

93
00:03:44,080 --> 00:03:46,560
safety property but extremely difficult

94
00:03:46,560 --> 00:03:48,640
to write at the event

95
00:03:48,640 --> 00:03:49,440
with

96
00:03:49,440 --> 00:03:52,080
with refinement we can simply prove its

97
00:03:52,080 --> 00:03:54,560
equivalence to a centralized map which

98
00:03:54,560 --> 00:03:58,159
cause neutralizability naturally

99
00:03:58,159 --> 00:04:00,879
also refinement could be the key to deal

100
00:04:00,879 --> 00:04:03,519
with the complexity of real systems

101
00:04:03,519 --> 00:04:06,400
with refinement we can split the proof

102
00:04:06,400 --> 00:04:08,720
into multiple layers to show that each

103
00:04:08,720 --> 00:04:10,959
layer reveals the one above it

104
00:04:10,959 --> 00:04:13,280
in the absence of refinement where left

105
00:04:13,280 --> 00:04:15,040
of the task

106
00:04:15,040 --> 00:04:17,440
with reasoning about a single monolithic

107
00:04:17,440 --> 00:04:19,519
system whose complexity becomes a

108
00:04:19,519 --> 00:04:21,600
limiting factor for both manual and

109
00:04:21,600 --> 00:04:24,240
automated approaches

110
00:04:24,240 --> 00:04:26,400
finally being unable to split a

111
00:04:26,400 --> 00:04:28,400
monolithic system into multiple layers

112
00:04:28,400 --> 00:04:30,400
can sometimes be a show stopper for

113
00:04:30,400 --> 00:04:31,919
automation

114
00:04:31,919 --> 00:04:34,240
some protocols may be undecidable by

115
00:04:34,240 --> 00:04:36,880
construction and thus not available to

116
00:04:36,880 --> 00:04:40,320
automation of tools like i4

117
00:04:40,320 --> 00:04:43,280
in these cases one can use refinement to

118
00:04:43,280 --> 00:04:46,320
split the protocol into two layers each

119
00:04:46,320 --> 00:04:49,120
of which is separately desirable and can

120
00:04:49,120 --> 00:04:51,520
be automated

121
00:04:51,520 --> 00:04:54,080
as a result refinement becomes an

122
00:04:54,080 --> 00:04:55,919
essential concept improving the

123
00:04:55,919 --> 00:05:00,080
correctness of real complex systems

124
00:05:00,479 --> 00:05:02,880
unfortunately all existing approaches

125
00:05:02,880 --> 00:05:05,199
that support refinement requires manual

126
00:05:05,199 --> 00:05:07,039
effort and all

127
00:05:07,039 --> 00:05:08,320
automated

128
00:05:08,320 --> 00:05:10,400
approaches only reason about single

129
00:05:10,400 --> 00:05:11,759
layer systems

130
00:05:11,759 --> 00:05:14,320
if the developer wants to use automation

131
00:05:14,320 --> 00:05:16,320
and the use of use that come with it

132
00:05:16,320 --> 00:05:18,479
that they can only prove the simplest of

133
00:05:18,479 --> 00:05:19,680
protocols

134
00:05:19,680 --> 00:05:22,560
if they want to prove a moderate process

135
00:05:22,560 --> 00:05:25,280
or representation they have no choice

136
00:05:25,280 --> 00:05:28,400
but to use a manual approach

137
00:05:28,400 --> 00:05:30,240
in the rest of my talk

138
00:05:30,240 --> 00:05:32,639
i show you that how we can get the best

139
00:05:32,639 --> 00:05:35,440
of both worlds so that we can not only

140
00:05:35,440 --> 00:05:38,400
achieve simple concise specification but

141
00:05:38,400 --> 00:05:41,440
also scale our automated proofs to more

142
00:05:41,440 --> 00:05:43,680
completely complicated distributed

143
00:05:43,680 --> 00:05:46,320
implementations

144
00:05:46,720 --> 00:05:49,440
we introduced a new methodology shift

145
00:05:49,440 --> 00:05:51,360
that combines automated verification

146
00:05:51,360 --> 00:05:53,759
with a small amount of manual effort to

147
00:05:53,759 --> 00:05:56,720
push the boundary of kinds of systems

148
00:05:56,720 --> 00:06:01,120
that can benefit from proof automation

149
00:06:01,680 --> 00:06:04,880
at a high level the goal of shift is to

150
00:06:04,880 --> 00:06:07,120
use the power of refinement but with

151
00:06:07,120 --> 00:06:10,400
only a fraction of the manual effort

152
00:06:10,400 --> 00:06:12,960
to achieve this goal shift is a two-time

153
00:06:12,960 --> 00:06:14,319
methodology

154
00:06:14,319 --> 00:06:15,199
first

155
00:06:15,199 --> 00:06:17,360
save the leverage of automation of

156
00:06:17,360 --> 00:06:19,919
monolithic provers which can only handle

157
00:06:19,919 --> 00:06:22,160
a single layer like the blue box

158
00:06:22,160 --> 00:06:24,479
to prove refinement within a multi-layer

159
00:06:24,479 --> 00:06:25,520
system

160
00:06:25,520 --> 00:06:29,600
the way we do it is by encapsulation

161
00:06:29,600 --> 00:06:32,319
here shows the idea of encapsulation

162
00:06:32,319 --> 00:06:34,560
traditionally we have two separate

163
00:06:34,560 --> 00:06:36,960
definitions for two layers

164
00:06:36,960 --> 00:06:39,360
now we encapsulate the state of the

165
00:06:39,360 --> 00:06:42,000
upper layer into the lower layer

166
00:06:42,000 --> 00:06:43,280
as a result

167
00:06:43,280 --> 00:06:45,680
we have a monolithic transmission which

168
00:06:45,680 --> 00:06:47,600
which includes two layers

169
00:06:47,600 --> 00:06:49,520
and the refinement property becomes a

170
00:06:49,520 --> 00:06:51,280
simple safety property

171
00:06:51,280 --> 00:06:54,000
involving just one state machine

172
00:06:54,000 --> 00:06:54,960
so

173
00:06:54,960 --> 00:06:57,360
this enhanced layer is not amenable to

174
00:06:57,360 --> 00:06:59,039
proof by tradition traditional

175
00:06:59,039 --> 00:07:01,360
monolithic proverbs but is still

176
00:07:01,360 --> 00:07:03,840
powerful enough to demonstrate whether

177
00:07:03,840 --> 00:07:06,160
refinement holds between the original

178
00:07:06,160 --> 00:07:08,800
two layers

179
00:07:10,400 --> 00:07:13,280
sometimes however a single layer can be

180
00:07:13,280 --> 00:07:15,520
too complex for a monolithic prover to

181
00:07:15,520 --> 00:07:17,120
prove automatically

182
00:07:17,120 --> 00:07:19,919
when that happens we need a way out we

183
00:07:19,919 --> 00:07:21,759
need to have a way to make the problem

184
00:07:21,759 --> 00:07:24,240
easier for the monolithic prover

185
00:07:24,240 --> 00:07:26,080
and that leads to the second part of

186
00:07:26,080 --> 00:07:28,800
shift a divide and conquer click to

187
00:07:28,800 --> 00:07:31,599
break the proof into more pieces to

188
00:07:31,599 --> 00:07:34,560
simplify the task

189
00:07:35,840 --> 00:07:37,840
now that i have described the shift

190
00:07:37,840 --> 00:07:38,639
opera

191
00:07:38,639 --> 00:07:40,960
methodology at a higher level let's see

192
00:07:40,960 --> 00:07:44,639
how to use shift to prove a season

193
00:07:44,639 --> 00:07:46,880
similar to the overview the sifted

194
00:07:46,880 --> 00:07:48,639
workflow has two parts

195
00:07:48,639 --> 00:07:50,479
starting from the specification and the

196
00:07:50,479 --> 00:07:52,639
implementation of the target system we

197
00:07:52,639 --> 00:07:54,720
feed it to the fifth iteration to prove

198
00:07:54,720 --> 00:07:56,160
the refinement

199
00:07:56,160 --> 00:07:58,639
if this succeeds we have proofed the

200
00:07:58,639 --> 00:08:00,000
refinement from the invitation to the

201
00:08:00,000 --> 00:08:01,520
specification

202
00:08:01,520 --> 00:08:03,599
if it fails due to complexity or

203
00:08:03,599 --> 00:08:06,800
disability we need to use the divide and

204
00:08:06,800 --> 00:08:09,280
conquer click to add a new layer and try

205
00:08:09,280 --> 00:08:11,520
again

206
00:08:11,520 --> 00:08:14,240
before we go into the sift loop i'd like

207
00:08:14,240 --> 00:08:16,800
to give an example of the target station

208
00:08:16,800 --> 00:08:19,680
and how to encapsulate a layer

209
00:08:19,680 --> 00:08:22,160
for example this is a state transition

210
00:08:22,160 --> 00:08:23,919
for the substitution of charge height

211
00:08:23,919 --> 00:08:24,800
table

212
00:08:24,800 --> 00:08:26,720
it can commit a request and this

213
00:08:26,720 --> 00:08:29,120
corresponding reply

214
00:08:29,120 --> 00:08:30,960
and here is the state transition for the

215
00:08:30,960 --> 00:08:32,159
implementation

216
00:08:32,159 --> 00:08:34,640
when node is handling a request it may

217
00:08:34,640 --> 00:08:37,440
send out a reply

218
00:08:37,440 --> 00:08:38,958
to encapsulate the sophistication

219
00:08:38,958 --> 00:08:41,039
transition into the implementation

220
00:08:41,039 --> 00:08:43,360
the implementation can simply cause the

221
00:08:43,360 --> 00:08:46,880
corresponding transition in the spec

222
00:08:47,200 --> 00:08:49,040
keep in mind that this costs to the

223
00:08:49,040 --> 00:08:51,279
specification are just a ghost cost

224
00:08:51,279 --> 00:08:53,279
which means it doesn't go to the

225
00:08:53,279 --> 00:08:55,760
executable code so there's no overhead

226
00:08:55,760 --> 00:08:59,120
when we run this invitation

227
00:08:59,120 --> 00:09:01,680
as for the refinement property we only

228
00:09:01,680 --> 00:09:04,000
care about the outgoing messages to the

229
00:09:04,000 --> 00:09:07,440
client which is reply messages

230
00:09:07,440 --> 00:09:10,240
thus the refinement property between the

231
00:09:10,240 --> 00:09:12,080
specification and the information is

232
00:09:12,080 --> 00:09:14,800
that for all messages in the network

233
00:09:14,800 --> 00:09:16,800
if it's a reply message

234
00:09:16,800 --> 00:09:20,320
the spec must have the same message

235
00:09:20,320 --> 00:09:22,399
in this way we don't rely on the

236
00:09:22,399 --> 00:09:25,279
developer to provide any refinement

237
00:09:25,279 --> 00:09:27,279
function to leave the state of the

238
00:09:27,279 --> 00:09:29,839
invitation to the sophistication

239
00:09:29,839 --> 00:09:31,279
the monolithic approval can

240
00:09:31,279 --> 00:09:33,200
automatically find such

241
00:09:33,200 --> 00:09:34,640
relations between the implementation

242
00:09:34,640 --> 00:09:37,120
state and the skin state

243
00:09:37,120 --> 00:09:41,279
from this state transitions

244
00:09:42,880 --> 00:09:45,600
now we have an encapsulated layer but we

245
00:09:45,600 --> 00:09:46,959
are not done yet

246
00:09:46,959 --> 00:09:49,360
there is still a stable problem we need

247
00:09:49,360 --> 00:09:52,480
to solve before we feed the encapsulator

248
00:09:52,480 --> 00:09:55,600
layer to the magnetic proofer

249
00:09:55,600 --> 00:09:57,519
we need to check if there are any

250
00:09:57,519 --> 00:10:00,800
unsatisfied preconditions

251
00:10:00,800 --> 00:10:01,600
so

252
00:10:01,600 --> 00:10:04,240
where are these preconditions from for

253
00:10:04,240 --> 00:10:06,720
example in the substitution of started

254
00:10:06,720 --> 00:10:07,839
hash table

255
00:10:07,839 --> 00:10:10,000
we can't commit arbitrary requests and

256
00:10:10,000 --> 00:10:11,200
replies

257
00:10:11,200 --> 00:10:13,120
we need to add some constraints to

258
00:10:13,120 --> 00:10:16,240
ensure that the reply match the request

259
00:10:16,240 --> 00:10:18,800
more specifically we need to ensure that

260
00:10:18,800 --> 00:10:21,519
they have the same type the same source

261
00:10:21,519 --> 00:10:24,160
the same id the same key

262
00:10:24,160 --> 00:10:26,800
if it's a read request the reply data

263
00:10:26,800 --> 00:10:29,440
must equal to the value in the spec map

264
00:10:29,440 --> 00:10:32,800
and it must be a flash request

265
00:10:32,800 --> 00:10:35,600
if we simply ignore these preconditions

266
00:10:35,600 --> 00:10:37,680
the invitation could commit arbitrary

267
00:10:37,680 --> 00:10:40,240
reply when sending a reply message and

268
00:10:40,240 --> 00:10:42,160
the refinement property is trivially

269
00:10:42,160 --> 00:10:44,399
inductive but the safety of the

270
00:10:44,399 --> 00:10:47,600
sophistication is violated

271
00:10:47,600 --> 00:10:49,760
unfortunately current monolithic

272
00:10:49,760 --> 00:10:52,079
proverbs cannot deal with

273
00:10:52,079 --> 00:10:55,360
precondition checks as a result we need

274
00:10:55,360 --> 00:10:58,880
some tricks to enforce it

275
00:10:59,200 --> 00:11:01,120
there are two ways to enforce these

276
00:11:01,120 --> 00:11:02,399
preconditions

277
00:11:02,399 --> 00:11:04,320
we can convert them to either if

278
00:11:04,320 --> 00:11:08,160
statements or environments

279
00:11:08,480 --> 00:11:10,160
the first solution is to convert

280
00:11:10,160 --> 00:11:12,240
preconditions to if statements

281
00:11:12,240 --> 00:11:13,360
for example

282
00:11:13,360 --> 00:11:15,920
to enforce this condition we can simply

283
00:11:15,920 --> 00:11:18,480
replace it with an if segment if the

284
00:11:18,480 --> 00:11:20,640
condition holds we can continue to

285
00:11:20,640 --> 00:11:22,079
commit to the reply

286
00:11:22,079 --> 00:11:25,279
otherwise do nothing

287
00:11:25,279 --> 00:11:28,240
this idea is similar to always enable

288
00:11:28,240 --> 00:11:30,240
actions of iron fleet

289
00:11:30,240 --> 00:11:32,560
such always enabled transitions doesn't

290
00:11:32,560 --> 00:11:35,120
use any preconditions that doesn't

291
00:11:35,120 --> 00:11:38,320
require any precondition checks

292
00:11:38,320 --> 00:11:40,640
the benefit of this approach is that it

293
00:11:40,640 --> 00:11:43,200
does not rely on any understanding of

294
00:11:43,200 --> 00:11:45,680
the system which makes it very easy to

295
00:11:45,680 --> 00:11:47,680
implement

296
00:11:47,680 --> 00:11:49,920
however this solution just through the

297
00:11:49,920 --> 00:11:52,160
problem to the monolithic approval to

298
00:11:52,160 --> 00:11:54,640
prove that such conditions should always

299
00:11:54,640 --> 00:11:55,519
hold

300
00:11:55,519 --> 00:11:59,040
and then that could complicate the task

301
00:11:59,040 --> 00:12:01,519
so we have an alternative approach

302
00:12:01,519 --> 00:12:05,120
converting preconditions to imbalance

303
00:12:05,120 --> 00:12:07,360
based on the same precondition we can

304
00:12:07,360 --> 00:12:09,519
look back to the implementation manually

305
00:12:09,519 --> 00:12:11,839
and see why it always holds

306
00:12:11,839 --> 00:12:14,160
we can easily find that when not

307
00:12:14,160 --> 00:12:16,720
committed reply the value in its local

308
00:12:16,720 --> 00:12:19,200
hashing map must equal the value in the

309
00:12:19,200 --> 00:12:21,360
stack map

310
00:12:21,360 --> 00:12:24,160
thus we can manually add an event that

311
00:12:24,160 --> 00:12:26,480
for all node if not the end thing is the

312
00:12:26,480 --> 00:12:27,920
owner of key k

313
00:12:27,920 --> 00:12:30,800
so and can handle requests about k

314
00:12:30,800 --> 00:12:33,760
and thus the value in

315
00:12:33,760 --> 00:12:36,800
k at node n must equal the value in the

316
00:12:36,800 --> 00:12:39,760
spec map

317
00:12:39,760 --> 00:12:42,160
in this way we use our understanding of

318
00:12:42,160 --> 00:12:44,480
the system to convert preconditions to

319
00:12:44,480 --> 00:12:47,519
events and this event can even simplify

320
00:12:47,519 --> 00:12:48,560
the work

321
00:12:48,560 --> 00:12:52,359
for monolithic proverbs

322
00:12:53,680 --> 00:12:55,680
now that we have converted preconditions

323
00:12:55,680 --> 00:12:58,000
to if statements or events

324
00:12:58,000 --> 00:13:00,000
the next step is to use monolithic

325
00:13:00,000 --> 00:13:02,160
proofer to find an inductive event to

326
00:13:02,160 --> 00:13:04,399
prove the refinement property

327
00:13:04,399 --> 00:13:06,720
and there are two possible results

328
00:13:06,720 --> 00:13:09,680
first it may succeed which means we have

329
00:13:09,680 --> 00:13:11,519
finished our proof

330
00:13:11,519 --> 00:13:14,160
or the approval may give up due to the

331
00:13:14,160 --> 00:13:17,040
limit of time or memory

332
00:13:17,040 --> 00:13:19,519
when the monolithic approval approval

333
00:13:19,519 --> 00:13:22,079
fails one solution is to convert more

334
00:13:22,079 --> 00:13:24,560
preconditions to events to simplify the

335
00:13:24,560 --> 00:13:26,399
task

336
00:13:26,399 --> 00:13:28,399
if there are no more preconditions to

337
00:13:28,399 --> 00:13:29,839
convert

338
00:13:29,839 --> 00:13:32,560
this means there is nothing we can do to

339
00:13:32,560 --> 00:13:34,560
help the monolithic approval

340
00:13:34,560 --> 00:13:38,639
in that case we need to add a new layer

341
00:13:38,639 --> 00:13:41,040
that leads to the second part of shift

342
00:13:41,040 --> 00:13:43,360
divide and conquer technique

343
00:13:43,360 --> 00:13:46,000
to guide developers on how to introduce

344
00:13:46,000 --> 00:13:47,680
intermediate layers

345
00:13:47,680 --> 00:13:49,519
that will essentially break up the

346
00:13:49,519 --> 00:13:51,680
problem of showing refinement directly

347
00:13:51,680 --> 00:13:52,720
from the invitation to the

348
00:13:52,720 --> 00:13:56,480
sophistication into smaller problems

349
00:13:56,480 --> 00:13:58,399
here we found several

350
00:13:58,399 --> 00:14:00,560
efficient transformations to create a

351
00:14:00,560 --> 00:14:02,720
new layer

352
00:14:02,720 --> 00:14:04,800
the first thing to do is to abstract

353
00:14:04,800 --> 00:14:07,440
away transitions that are not needed for

354
00:14:07,440 --> 00:14:08,800
safety

355
00:14:08,800 --> 00:14:11,279
for example there must be a periodic

356
00:14:11,279 --> 00:14:12,800
keeper live message

357
00:14:12,800 --> 00:14:14,720
to avoid timeout

358
00:14:14,720 --> 00:14:16,959
these messages doesn't influence the

359
00:14:16,959 --> 00:14:19,120
safety proof and can be removed in

360
00:14:19,120 --> 00:14:21,199
middle layers

361
00:14:21,199 --> 00:14:23,760
we can also simplify the local state and

362
00:14:23,760 --> 00:14:25,279
requirements for transitions in the

363
00:14:25,279 --> 00:14:26,880
middle list

364
00:14:26,880 --> 00:14:29,680
for example in a middle layer a note can

365
00:14:29,680 --> 00:14:31,760
even read the set of sent messages in

366
00:14:31,760 --> 00:14:33,920
the network which is impossible in the

367
00:14:33,920 --> 00:14:35,440
invitation

368
00:14:35,440 --> 00:14:37,760
this could simplify the local state and

369
00:14:37,760 --> 00:14:39,600
thus simplify the requirement for

370
00:14:39,600 --> 00:14:42,240
transitions

371
00:14:42,480 --> 00:14:44,959
also we can merge multiple transitions

372
00:14:44,959 --> 00:14:47,120
into one abstract transition to simplify

373
00:14:47,120 --> 00:14:48,720
the middle layer

374
00:14:48,720 --> 00:14:50,079
for example

375
00:14:50,079 --> 00:14:52,480
some protocols like two-phase commit

376
00:14:52,480 --> 00:14:54,320
requires a node to receive multiple

377
00:14:54,320 --> 00:14:57,120
messages to make progress

378
00:14:57,120 --> 00:14:59,360
in that situation

379
00:14:59,360 --> 00:15:01,440
in the implementation a node can only

380
00:15:01,440 --> 00:15:03,680
receive one message at once

381
00:15:03,680 --> 00:15:05,360
but in the middle layer

382
00:15:05,360 --> 00:15:07,199
we can merge these transitions into an

383
00:15:07,199 --> 00:15:09,040
abstract transition and receive all

384
00:15:09,040 --> 00:15:12,079
messages at once

385
00:15:12,079 --> 00:15:14,240
while these three deal with

386
00:15:14,240 --> 00:15:17,040
complexity the monolithic proof can also

387
00:15:17,040 --> 00:15:19,519
fail due to undecidability

388
00:15:19,519 --> 00:15:22,880
in that case there is existing work

389
00:15:22,880 --> 00:15:25,920
that shows how to use derived relation

390
00:15:25,920 --> 00:15:27,839
to break quantifier authorizations and

391
00:15:27,839 --> 00:15:30,399
remain desirable

392
00:15:30,399 --> 00:15:32,240
all these transformations

393
00:15:32,240 --> 00:15:34,320
tells us how to construct a new layer

394
00:15:34,320 --> 00:15:36,800
from an existing layer so that we don't

395
00:15:36,800 --> 00:15:41,839
need to write a flash layer from scratch

396
00:15:42,880 --> 00:15:45,120
in summary here is the complete workflow

397
00:15:45,120 --> 00:15:48,160
of shift it has two basic parts

398
00:15:48,160 --> 00:15:51,360
first we use our encapsulation technique

399
00:15:51,360 --> 00:15:53,680
to leverage the automation of monolithic

400
00:15:53,680 --> 00:15:57,279
proofers to prove refinement

401
00:15:57,279 --> 00:15:59,600
when that phase we use our divide and

402
00:15:59,600 --> 00:16:01,360
conquer technique to break the

403
00:16:01,360 --> 00:16:03,199
refinement into smaller and more

404
00:16:03,199 --> 00:16:06,160
manageable pieces

405
00:16:07,519 --> 00:16:08,399
now that

406
00:16:08,399 --> 00:16:10,959
we have seen how shift works let's see

407
00:16:10,959 --> 00:16:13,199
to what degree shift can automate the

408
00:16:13,199 --> 00:16:15,519
proof of the 3d stations and what

409
00:16:15,519 --> 00:16:17,279
performance our verified implementation

410
00:16:17,279 --> 00:16:19,920
can achieve

411
00:16:20,000 --> 00:16:22,639
we use six systems to evaluate the power

412
00:16:22,639 --> 00:16:23,759
of shift

413
00:16:23,759 --> 00:16:26,560
we choose ic3po as our magnetic approval

414
00:16:26,560 --> 00:16:29,519
and here's a summary of our proof effort

415
00:16:29,519 --> 00:16:31,759
for the first three leader reduction

416
00:16:31,759 --> 00:16:34,399
distributed lock and two phase commit

417
00:16:34,399 --> 00:16:36,240
we can verify them without any

418
00:16:36,240 --> 00:16:38,000
intermediate layers refine the

419
00:16:38,000 --> 00:16:39,360
invitation to the sophistication

420
00:16:39,360 --> 00:16:40,639
directly

421
00:16:40,639 --> 00:16:42,880
the only thing we need is to simply

422
00:16:42,880 --> 00:16:44,560
convert the precondition to if

423
00:16:44,560 --> 00:16:46,880
statements which takes less than five

424
00:16:46,880 --> 00:16:48,720
minutes

425
00:16:48,720 --> 00:16:51,360
for sht shared hash table

426
00:16:51,360 --> 00:16:53,279
although we don't need any intermediate

427
00:16:53,279 --> 00:16:54,959
layers we need to convert some

428
00:16:54,959 --> 00:16:57,120
preconditions to events

429
00:16:57,120 --> 00:16:59,360
as a result this conversion takes less

430
00:16:59,360 --> 00:17:01,440
than 30 minutes

431
00:17:01,440 --> 00:17:04,720
and then we go to complex protocols raft

432
00:17:04,720 --> 00:17:06,480
and multiplexers

433
00:17:06,480 --> 00:17:08,959
as we can see they require significantly

434
00:17:08,959 --> 00:17:11,520
more layers and more proof of effort

435
00:17:11,520 --> 00:17:13,359
but still our

436
00:17:13,359 --> 00:17:15,520
approach is easier than the original iv

437
00:17:15,520 --> 00:17:16,720
attempt

438
00:17:16,720 --> 00:17:19,439
according to their paper they spent 12

439
00:17:19,439 --> 00:17:21,839
percent weeks on raft and eight person

440
00:17:21,839 --> 00:17:24,319
weeks on multiplexers while we reduced

441
00:17:24,319 --> 00:17:26,319
this effort to four and three person

442
00:17:26,319 --> 00:17:28,319
weeks

443
00:17:28,319 --> 00:17:30,080
you can check our paper for more

444
00:17:30,080 --> 00:17:32,559
detailed explanation about how we spend

445
00:17:32,559 --> 00:17:36,960
our effort by adding more layers

446
00:17:38,080 --> 00:17:40,240
we also evaluated the performance of

447
00:17:40,240 --> 00:17:42,080
some verified systems

448
00:17:42,080 --> 00:17:45,039
first we compared the performance of our

449
00:17:45,039 --> 00:17:47,760
strategic hatch table with arm tv the

450
00:17:47,760 --> 00:17:50,480
static hash table from arnold field

451
00:17:50,480 --> 00:17:53,120
here's the throughput latency graph

452
00:17:53,120 --> 00:17:56,000
we used 1000 keys delegated evenly

453
00:17:56,000 --> 00:17:58,320
across three nodes

454
00:17:58,320 --> 00:18:00,480
we have two workloads

455
00:18:00,480 --> 00:18:02,160
one of them used half read and half

456
00:18:02,160 --> 00:18:05,039
right the other has 90 percent read and

457
00:18:05,039 --> 00:18:06,720
10 percent right

458
00:18:06,720 --> 00:18:08,799
different dots indicate runs with

459
00:18:08,799 --> 00:18:11,520
different number of clients vary from 1

460
00:18:11,520 --> 00:18:14,320
to 128

461
00:18:14,320 --> 00:18:16,799
as we can see our performance is

462
00:18:16,799 --> 00:18:18,880
comparable with iron tv

463
00:18:18,880 --> 00:18:22,320
we think the main difference is that rtv

464
00:18:22,320 --> 00:18:24,720
spend extra manual effort for the sake

465
00:18:24,720 --> 00:18:26,960
of performance such as an efficient

466
00:18:26,960 --> 00:18:28,480
delegation map

467
00:18:28,480 --> 00:18:29,520
that's

468
00:18:29,520 --> 00:18:32,799
maintained in each node

469
00:18:32,960 --> 00:18:34,799
we also evaluated our left and

470
00:18:34,799 --> 00:18:37,679
multipackers against the iv

471
00:18:37,679 --> 00:18:40,240
artifact in pldi18

472
00:18:40,240 --> 00:18:42,320
we used three replicas with different

473
00:18:42,320 --> 00:18:45,520
number of clients from 1 to 128

474
00:18:45,520 --> 00:18:47,600
we can see that our performance is very

475
00:18:47,600 --> 00:18:51,520
similar to the iv implementation

476
00:18:53,679 --> 00:18:56,000
in conclusion there are two important

477
00:18:56,000 --> 00:18:58,400
lessons from shift

478
00:18:58,400 --> 00:18:59,280
first

479
00:18:59,280 --> 00:19:01,280
refinement is the key to scale

480
00:19:01,280 --> 00:19:04,880
verification to real-world applications

481
00:19:04,880 --> 00:19:05,840
second

482
00:19:05,840 --> 00:19:08,240
with encapsulation shift combines the

483
00:19:08,240 --> 00:19:10,320
power of refinement and the monolithic

484
00:19:10,320 --> 00:19:13,360
proverbs to automate the verification of

485
00:19:13,360 --> 00:19:15,600
complex distributed stations

486
00:19:15,600 --> 00:19:17,679
all our code and approves are available

487
00:19:17,679 --> 00:19:18,960
in github

488
00:19:18,960 --> 00:19:20,799
thanks for listening i'll be happy to

489
00:19:20,799 --> 00:19:24,520
take questions now

490
00:19:30,080 --> 00:19:32,159
you

