1
00:00:01,199 --> 00:00:04,199
foreign

2
00:00:09,920 --> 00:00:12,900
I work at Stony Brook the work I'm going

3
00:00:12,900 --> 00:00:15,660
to present is Deb fast orchestrating

4
00:00:15,660 --> 00:00:17,820
code for Quorum systems

5
00:00:17,820 --> 00:00:20,340
what's special about this work is that

6
00:00:20,340 --> 00:00:23,100
we're focusing on not algorithms not

7
00:00:23,100 --> 00:00:25,740
designs but we're trying to write better

8
00:00:25,740 --> 00:00:30,560
code that is easier to manage and follow

9
00:00:31,500 --> 00:00:34,800
okay so what is a current system

10
00:00:34,800 --> 00:00:37,200
her Chrome system has a foundational

11
00:00:37,200 --> 00:00:39,719
communication pattern where we have a

12
00:00:39,719 --> 00:00:42,239
node broadcast request to a group of

13
00:00:42,239 --> 00:00:46,519
nodes and then collect responses

14
00:00:46,559 --> 00:00:48,660
the system will then proceed with a

15
00:00:48,660 --> 00:00:49,559
quorum

16
00:00:49,559 --> 00:00:52,320
the Chrome size can differ for example

17
00:00:52,320 --> 00:00:54,780
it could be majority

18
00:00:54,780 --> 00:00:56,940
a super majority

19
00:00:56,940 --> 00:01:01,199
or all of the nodes in the group

20
00:01:01,199 --> 00:01:03,960
a typical example of Quorum system is

21
00:01:03,960 --> 00:01:06,420
consensus systems based on considered

22
00:01:06,420 --> 00:01:09,240
particles such as paxus and wrapped

23
00:01:09,240 --> 00:01:11,460
so Quorum systems are widely used in

24
00:01:11,460 --> 00:01:13,740
practice especially in Fault tolerance

25
00:01:13,740 --> 00:01:16,880
systems such as coordination Services

26
00:01:16,880 --> 00:01:21,360
databases and blockchain systems

27
00:01:21,360 --> 00:01:24,119
Quorum systems are hard they have very

28
00:01:24,119 --> 00:01:27,060
complex State transitions

29
00:01:27,060 --> 00:01:29,460
for example we have a node broadcast

30
00:01:29,460 --> 00:01:32,400
requests and wait for replies within a

31
00:01:32,400 --> 00:01:33,540
timeout

32
00:01:33,540 --> 00:01:35,820
there are lots of conditions we need to

33
00:01:35,820 --> 00:01:37,320
process

34
00:01:37,320 --> 00:01:38,640
or one

35
00:01:38,640 --> 00:01:42,780
we could receive a majority yes replies

36
00:01:42,780 --> 00:01:44,400
before timeout

37
00:01:44,400 --> 00:01:47,220
or we can receive a majority of no

38
00:01:47,220 --> 00:01:49,439
replies before demo

39
00:01:49,439 --> 00:01:52,619
or a timeout we could receive majority

40
00:01:52,619 --> 00:01:53,880
replies

41
00:01:53,880 --> 00:01:56,820
but they are a mix of yes and no

42
00:01:56,820 --> 00:01:59,040
or a timeout

43
00:01:59,040 --> 00:02:01,079
you know we could receive no not enough

44
00:02:01,079 --> 00:02:03,600
replies

45
00:02:03,600 --> 00:02:05,159
and there is more

46
00:02:05,159 --> 00:02:07,560
in advanced Quorum systems things could

47
00:02:07,560 --> 00:02:10,380
be more complex mainly because

48
00:02:10,380 --> 00:02:13,319
we need to process multiple different

49
00:02:13,319 --> 00:02:16,379
sized quorums in a single broadcast

50
00:02:16,379 --> 00:02:19,560
so for example in addition to the four

51
00:02:19,560 --> 00:02:21,540
conditions we talked about

52
00:02:21,540 --> 00:02:24,660
we could be waiting for a super majority

53
00:02:24,660 --> 00:02:28,379
of yes replies before a second timeout

54
00:02:28,379 --> 00:02:31,860
and or before the second timeout we

55
00:02:31,860 --> 00:02:34,800
could receive enough wrote no replies so

56
00:02:34,800 --> 00:02:37,260
that a super majority of yes replies is

57
00:02:37,260 --> 00:02:39,239
no longer possible

58
00:02:39,239 --> 00:02:41,459
or at the second timeout we could

59
00:02:41,459 --> 00:02:43,860
receive not enough replies to form a

60
00:02:43,860 --> 00:02:46,140
super majority

61
00:02:46,140 --> 00:02:47,459
so

62
00:02:47,459 --> 00:02:50,940
coding all these complex conditions is a

63
00:02:50,940 --> 00:02:53,280
very hard job and the question we try to

64
00:02:53,280 --> 00:02:55,980
ask an answer today is how can we make

65
00:02:55,980 --> 00:02:58,560
the code of these systems easier to

66
00:02:58,560 --> 00:03:01,099
write and follow

67
00:03:01,260 --> 00:03:03,300
well first let's look at the status quo

68
00:03:03,300 --> 00:03:06,420
what's our current way of writing

69
00:03:06,420 --> 00:03:09,180
the code for the systems

70
00:03:09,180 --> 00:03:12,239
the way we often use is asynchronous

71
00:03:12,239 --> 00:03:15,780
coding style or event driven

72
00:03:15,780 --> 00:03:18,180
so we write the broadcast in one

73
00:03:18,180 --> 00:03:19,379
function

74
00:03:19,379 --> 00:03:22,019
and then we have another function to

75
00:03:22,019 --> 00:03:24,599
handle the reply messages from that

76
00:03:24,599 --> 00:03:25,560
broadcast

77
00:03:25,560 --> 00:03:27,720
so this rep so this reply message

78
00:03:27,720 --> 00:03:30,540
Handler is usually triggered by a

79
00:03:30,540 --> 00:03:32,459
message Loop that keeps looping over

80
00:03:32,459 --> 00:03:33,959
incoming messages

81
00:03:33,959 --> 00:03:36,480
and dispatch the message to the right

82
00:03:36,480 --> 00:03:39,239
message Handler okay so why do we write

83
00:03:39,239 --> 00:03:41,099
code like this

84
00:03:41,099 --> 00:03:43,980
many for two reasons one will be

85
00:03:43,980 --> 00:03:46,739
educated for many years that this is the

86
00:03:46,739 --> 00:03:50,159
right way to write fast Network programs

87
00:03:50,159 --> 00:03:52,620
and there are many famous open source

88
00:03:52,620 --> 00:03:55,319
libraries such as dbv promoting the

89
00:03:55,319 --> 00:03:57,180
style

90
00:03:57,180 --> 00:03:59,040
number two

91
00:03:59,040 --> 00:04:00,599
coding this style

92
00:04:00,599 --> 00:04:04,860
is consistent with uh some pseudocode or

93
00:04:04,860 --> 00:04:07,140
some types of formal specifications such

94
00:04:07,140 --> 00:04:10,159
as TLA Plus

95
00:04:10,260 --> 00:04:12,959
however coding in this style has issues

96
00:04:12,959 --> 00:04:15,900
one of which is known for many years as

97
00:04:15,900 --> 00:04:17,399
stack ripping

98
00:04:17,399 --> 00:04:20,100
basically we're breaking the continuous

99
00:04:20,100 --> 00:04:23,160
logic into two separate functions

100
00:04:23,160 --> 00:04:25,380
and this means that we have to manually

101
00:04:25,380 --> 00:04:29,100
manage the context share by these two

102
00:04:29,100 --> 00:04:30,360
functions

103
00:04:30,360 --> 00:04:32,280
for example in this case we have to

104
00:04:32,280 --> 00:04:35,900
properly manage the entry variable

105
00:04:37,380 --> 00:04:40,380
and and more the Callback function is

106
00:04:40,380 --> 00:04:42,780
now triggered only once but triggered

107
00:04:42,780 --> 00:04:44,759
multiple times

108
00:04:44,759 --> 00:04:47,520
and as we develop the systems we write

109
00:04:47,520 --> 00:04:49,680
more and more callback functions which

110
00:04:49,680 --> 00:04:52,320
eventually cause too much cognitive load

111
00:04:52,320 --> 00:04:55,800
for developers this is also known as the

112
00:04:55,800 --> 00:04:57,840
Callback health issue

113
00:04:57,840 --> 00:05:00,900
so how can we address these issues

114
00:05:00,900 --> 00:05:03,720
well this brings us to the Eternal

115
00:05:03,720 --> 00:05:05,880
debate of asynchronous coding versus

116
00:05:05,880 --> 00:05:07,740
synchronous coding or

117
00:05:07,740 --> 00:05:10,440
event versus threat

118
00:05:10,440 --> 00:05:12,360
so here is a typical example of

119
00:05:12,360 --> 00:05:14,400
asynchronous code or event-driven code

120
00:05:14,400 --> 00:05:17,460
where we trigger RPC in one function and

121
00:05:17,460 --> 00:05:19,680
we write another Handler function to

122
00:05:19,680 --> 00:05:21,419
handle the replies

123
00:05:21,419 --> 00:05:24,000
we can convert this asynchronous code

124
00:05:24,000 --> 00:05:27,660
to synchronous code using thread so

125
00:05:27,660 --> 00:05:30,240
basically calling the RPC will block the

126
00:05:30,240 --> 00:05:32,220
thread well

127
00:05:32,220 --> 00:05:34,979
coding this style is much easier to

128
00:05:34,979 --> 00:05:36,600
write and follow

129
00:05:36,600 --> 00:05:39,120
but it is potentially much slower than

130
00:05:39,120 --> 00:05:41,220
the event-driven code because of the

131
00:05:41,220 --> 00:05:43,560
overhead of using threads

132
00:05:43,560 --> 00:05:45,840
and in the past many years people have

133
00:05:45,840 --> 00:05:48,180
been using lightweight threads such as

134
00:05:48,180 --> 00:05:51,060
fibers or stackful coroutines

135
00:05:51,060 --> 00:05:53,520
to mitigate this effect and actually

136
00:05:53,520 --> 00:05:55,740
it's proven that using lightweight

137
00:05:55,740 --> 00:05:56,940
threads

138
00:05:56,940 --> 00:06:00,300
has very low performance overhead and is

139
00:06:00,300 --> 00:06:04,020
almost as fast as event-driven code

140
00:06:04,020 --> 00:06:06,780
and this inspires us too so we built

141
00:06:06,780 --> 00:06:08,940
this framework called devfast which is a

142
00:06:08,940 --> 00:06:11,400
core routine based framework so it works

143
00:06:11,400 --> 00:06:13,919
as a user space library that a process

144
00:06:13,919 --> 00:06:15,180
can link to

145
00:06:15,180 --> 00:06:18,060
we provide this uh stack for quarantine

146
00:06:18,060 --> 00:06:20,520
interface so users can Define their own

147
00:06:20,520 --> 00:06:21,539
tasking

148
00:06:21,539 --> 00:06:24,080
we also provide a common utility

149
00:06:24,080 --> 00:06:26,940
functions such as RPC and current

150
00:06:26,940 --> 00:06:28,380
scheduling

151
00:06:28,380 --> 00:06:30,600
we did spend a lot of time building

152
00:06:30,600 --> 00:06:33,180
these features to help us build

153
00:06:33,180 --> 00:06:35,340
distributions and distribute systems

154
00:06:35,340 --> 00:06:38,639
easier but today what I want to show you

155
00:06:38,639 --> 00:06:41,819
the most is the event abstraction that

156
00:06:41,819 --> 00:06:43,800
we come up with to help us develop

157
00:06:43,800 --> 00:06:45,660
Quorum systems

158
00:06:45,660 --> 00:06:47,639
so I want to show you this interface

159
00:06:47,639 --> 00:06:50,039
corout interface with a the same

160
00:06:50,039 --> 00:06:52,259
broadcasting example

161
00:06:52,259 --> 00:06:54,720
here is how we create a core routine

162
00:06:54,720 --> 00:06:57,199
and here is how we do a broadcast

163
00:06:57,199 --> 00:07:01,199
basically by triggering our PC to each

164
00:07:01,199 --> 00:07:05,539
server and this RPC is now blocking

165
00:07:05,539 --> 00:07:09,419
it returns an event object or PC event

166
00:07:09,419 --> 00:07:11,520
ER namespace in our namespace we call

167
00:07:11,520 --> 00:07:13,620
this event but conceptually it is

168
00:07:13,620 --> 00:07:16,440
similar to a condition or a promise if

169
00:07:16,440 --> 00:07:18,600
you're familiar with those names

170
00:07:18,600 --> 00:07:21,660
and then we can wait on the RPC event to

171
00:07:21,660 --> 00:07:23,460
collect responses

172
00:07:23,460 --> 00:07:25,919
so here you might spot a problem already

173
00:07:25,919 --> 00:07:27,960
that we're doing this weight

174
00:07:27,960 --> 00:07:29,400
sequentially

175
00:07:29,400 --> 00:07:30,840
so

176
00:07:30,840 --> 00:07:33,539
uh you know each weight will block the

177
00:07:33,539 --> 00:07:36,720
carotene so it kills all the concurrency

178
00:07:36,720 --> 00:07:39,180
of other order replies

179
00:07:39,180 --> 00:07:41,759
so it will have low performance

180
00:07:41,759 --> 00:07:44,639
it is also difficult to express the

181
00:07:44,639 --> 00:07:47,039
complex conditions such as a collective

182
00:07:47,039 --> 00:07:50,759
Timeout on all our PC events

183
00:07:50,759 --> 00:07:53,580
so this is why we invent the Quorum

184
00:07:53,580 --> 00:07:54,419
event

185
00:07:54,419 --> 00:07:56,039
abstraction

186
00:07:56,039 --> 00:07:58,199
so a chrome event

187
00:07:58,199 --> 00:08:00,180
is a collection

188
00:08:00,180 --> 00:08:04,319
of events so here we add the RPC event

189
00:08:04,319 --> 00:08:06,360
to a quorum event and then instead of

190
00:08:06,360 --> 00:08:07,440
waiting on

191
00:08:07,440 --> 00:08:11,880
the individual RPC events we do a

192
00:08:11,880 --> 00:08:13,680
collective weight on the Chrome event

193
00:08:13,680 --> 00:08:15,960
for majority

194
00:08:15,960 --> 00:08:17,699
and the library in the background will

195
00:08:17,699 --> 00:08:20,220
guarantee concurrency it will process

196
00:08:20,220 --> 00:08:23,400
the replies out of order and unblock the

197
00:08:23,400 --> 00:08:26,340
weight as long as a majority of yes

198
00:08:26,340 --> 00:08:29,299
replies achieved

199
00:08:29,460 --> 00:08:32,219
also it makes expressing complex

200
00:08:32,219 --> 00:08:34,440
conditions much easier we can just go

201
00:08:34,440 --> 00:08:36,120
through the conditions with a simple if

202
00:08:36,120 --> 00:08:38,940
else statement so it will be much easier

203
00:08:38,940 --> 00:08:42,299
to express conditions such as reject

204
00:08:42,299 --> 00:08:45,020
or timeout

205
00:08:45,480 --> 00:08:48,180
okay next I want to show you the

206
00:08:48,180 --> 00:08:51,120
expressiveness of that fast using a real

207
00:08:51,120 --> 00:08:52,220
example

208
00:08:52,220 --> 00:08:54,180
epexes

209
00:08:54,180 --> 00:08:57,120
so epexus is an advanced consensus

210
00:08:57,120 --> 00:08:58,080
protocol

211
00:08:58,080 --> 00:09:01,019
that has a fast path and a slow path

212
00:09:01,019 --> 00:09:04,740
so in the broadcast if we receive a

213
00:09:04,740 --> 00:09:08,220
super majority of yes we go fast path if

214
00:09:08,220 --> 00:09:10,200
we only receive a majority yes we go

215
00:09:10,200 --> 00:09:12,440
slow path

216
00:09:12,440 --> 00:09:15,839
epexes is a very popular project is well

217
00:09:15,839 --> 00:09:18,480
liked by the community including us not

218
00:09:18,480 --> 00:09:21,060
only its design but its code is widely

219
00:09:21,060 --> 00:09:21,920
used

220
00:09:21,920 --> 00:09:24,600
in related areas

221
00:09:24,600 --> 00:09:26,839
okay so how can we express if

222
00:09:26,839 --> 00:09:29,760
expressively implement EP access

223
00:09:29,760 --> 00:09:33,420
first let's try to draw the control flow

224
00:09:33,420 --> 00:09:36,540
apexes in a human friendly way

225
00:09:36,540 --> 00:09:39,600
first we have a broadcast

226
00:09:39,600 --> 00:09:42,660
and then we wait for the conditions for

227
00:09:42,660 --> 00:09:44,399
fast path

228
00:09:44,399 --> 00:09:48,060
if it succeeds we go fast path

229
00:09:48,060 --> 00:09:50,399
otherwise if

230
00:09:50,399 --> 00:09:53,940
if if it doesn't we try to wait for

231
00:09:53,940 --> 00:09:56,880
conditions for slow path if that

232
00:09:56,880 --> 00:09:59,160
succeeds we go slow path

233
00:09:59,160 --> 00:10:02,220
otherwise we go error handling

234
00:10:02,220 --> 00:10:06,060
so now I want to to imagine how can we

235
00:10:06,060 --> 00:10:08,820
implement this using a asynchronous

236
00:10:08,820 --> 00:10:11,880
style event driven style coding so what

237
00:10:11,880 --> 00:10:13,080
are the events

238
00:10:13,080 --> 00:10:15,120
we need to process at least three types

239
00:10:15,120 --> 00:10:17,040
of Events first

240
00:10:17,040 --> 00:10:19,260
we need to process the reply for that

241
00:10:19,260 --> 00:10:20,640
broadcast

242
00:10:20,640 --> 00:10:21,899
and second

243
00:10:21,899 --> 00:10:24,000
we need to process the timeout for the

244
00:10:24,000 --> 00:10:25,920
fast path conditions

245
00:10:25,920 --> 00:10:27,360
and third

246
00:10:27,360 --> 00:10:29,160
we need to process the timeout for the

247
00:10:29,160 --> 00:10:31,380
slow path conditions

248
00:10:31,380 --> 00:10:33,180
Okay so

249
00:10:33,180 --> 00:10:36,660
all these three types of events and they

250
00:10:36,660 --> 00:10:38,279
will actually

251
00:10:38,279 --> 00:10:40,880
form very complex

252
00:10:40,880 --> 00:10:44,160
non-deterministic State transitions like

253
00:10:44,160 --> 00:10:46,320
this which will further

254
00:10:46,320 --> 00:10:49,680
satisfy or deny the conditions in the

255
00:10:49,680 --> 00:10:52,019
main control flow

256
00:10:52,019 --> 00:10:53,940
and out of order

257
00:10:53,940 --> 00:10:55,920
you can imagine this will be very hard

258
00:10:55,920 --> 00:10:57,480
code to write

259
00:10:57,480 --> 00:10:58,680
so

260
00:10:58,680 --> 00:11:00,600
how can we write code in depth fast for

261
00:11:00,600 --> 00:11:02,399
this

262
00:11:02,399 --> 00:11:06,060
okay in that fast we do broadcast and

263
00:11:06,060 --> 00:11:08,100
initialize the current events

264
00:11:08,100 --> 00:11:10,019
and then we'll wait for the fast path

265
00:11:10,019 --> 00:11:13,320
conditions and then if it succeeds we go

266
00:11:13,320 --> 00:11:16,200
fast path otherwise if it fails or

267
00:11:16,200 --> 00:11:18,420
timeouts we try to wait for the

268
00:11:18,420 --> 00:11:20,339
conditions for slow path

269
00:11:20,339 --> 00:11:22,260
and then if that succeeds we go slow

270
00:11:22,260 --> 00:11:26,100
path otherwise we go error handling

271
00:11:26,100 --> 00:11:29,100
as you can see this is very human

272
00:11:29,100 --> 00:11:32,220
friendly code right it's almost direct

273
00:11:32,220 --> 00:11:36,019
translation of the main control flow

274
00:11:36,300 --> 00:11:38,339
makes things much easier

275
00:11:38,339 --> 00:11:41,160
well you may Wonder okay this all this

276
00:11:41,160 --> 00:11:43,500
all is natural so what's it like to

277
00:11:43,500 --> 00:11:46,320
write apexes without that fast

278
00:11:46,320 --> 00:11:50,339
all right this is the code we copy from

279
00:11:50,339 --> 00:11:53,579
epac's original code repo with some

280
00:11:53,579 --> 00:11:55,380
simplifications

281
00:11:55,380 --> 00:11:58,620
this is the message Handler function for

282
00:11:58,620 --> 00:12:00,000
the broadcast

283
00:12:00,000 --> 00:12:02,760
well first probably you may notice that

284
00:12:02,760 --> 00:12:06,420
with with this coding style we often

285
00:12:06,420 --> 00:12:10,019
have to mix the main control flow with

286
00:12:10,019 --> 00:12:11,399
some minor case

287
00:12:11,399 --> 00:12:13,920
you know conditions such as this is

288
00:12:13,920 --> 00:12:16,380
handling a delayed message we have to do

289
00:12:16,380 --> 00:12:17,579
early return

290
00:12:17,579 --> 00:12:19,860
right this makes our code a little bit

291
00:12:19,860 --> 00:12:21,420
untidy

292
00:12:21,420 --> 00:12:23,220
next

293
00:12:23,220 --> 00:12:25,620
you may notice that there are two to

294
00:12:25,620 --> 00:12:27,480
do's

295
00:12:27,480 --> 00:12:30,000
in in this code these are actual to Do's

296
00:12:30,000 --> 00:12:31,560
in apex's code

297
00:12:31,560 --> 00:12:34,740
and if you want to actually if you want

298
00:12:34,740 --> 00:12:36,839
to implement the studios yourself

299
00:12:36,839 --> 00:12:38,880
you'll find that

300
00:12:38,880 --> 00:12:40,980
it is harder than I thought

301
00:12:40,980 --> 00:12:44,100
so for the first Studio when you receive

302
00:12:44,100 --> 00:12:46,500
enough rejects okay what you need to do

303
00:12:46,500 --> 00:12:49,440
is you need to do you need to invalidate

304
00:12:49,440 --> 00:12:52,139
the entire Quorum including you have to

305
00:12:52,139 --> 00:12:54,779
invalidate all the future messages all

306
00:12:54,779 --> 00:12:56,700
right so this cannot be a local change

307
00:12:56,700 --> 00:12:58,500
you cannot like write three lines of

308
00:12:58,500 --> 00:13:00,779
code here or make a function call here

309
00:13:00,779 --> 00:13:02,700
to implement this you have to rewrite

310
00:13:02,700 --> 00:13:04,200
the entire function

311
00:13:04,200 --> 00:13:06,899
right second to do is similar it is

312
00:13:06,899 --> 00:13:08,399
processing timeout

313
00:13:08,399 --> 00:13:10,500
all right we know that processing

314
00:13:10,500 --> 00:13:13,320
timeout in CR event driven style is very

315
00:13:13,320 --> 00:13:15,600
difficult you at least need another

316
00:13:15,600 --> 00:13:17,160
function call for this

317
00:13:17,160 --> 00:13:19,920
and we know some nice hacks you know

318
00:13:19,920 --> 00:13:21,839
from later projects based on epixes is

319
00:13:21,839 --> 00:13:25,139
that you can trigger an empty message at

320
00:13:25,139 --> 00:13:28,139
timeout right so that's a nice hack but

321
00:13:28,139 --> 00:13:30,540
you know more and more such hacks in our

322
00:13:30,540 --> 00:13:32,880
code you know harder and harder for

323
00:13:32,880 --> 00:13:35,339
people to follow the code

324
00:13:35,339 --> 00:13:39,240
so the last problem I want to discuss is

325
00:13:39,240 --> 00:13:40,560
is this

326
00:13:40,560 --> 00:13:43,560
so you may notice that in this code the

327
00:13:43,560 --> 00:13:45,660
fast path Quorum and the slow path

328
00:13:45,660 --> 00:13:48,480
Quorum the sizes are the same

329
00:13:48,480 --> 00:13:52,019
they are both a majority

330
00:13:52,019 --> 00:13:55,320
okay this is actually a special case for

331
00:13:55,320 --> 00:13:57,899
apexes if they have optimizations that

332
00:13:57,899 --> 00:14:02,220
when the replication group size is five

333
00:14:02,220 --> 00:14:05,820
the size for both quorums is three

334
00:14:05,820 --> 00:14:07,980
so they can write code conveniently like

335
00:14:07,980 --> 00:14:08,760
this

336
00:14:08,760 --> 00:14:11,279
however if you want to support more

337
00:14:11,279 --> 00:14:14,100
General case like replication group size

338
00:14:14,100 --> 00:14:15,720
more than five

339
00:14:15,720 --> 00:14:18,180
you cannot write code like this you

340
00:14:18,180 --> 00:14:20,459
cannot you cannot replace one of the

341
00:14:20,459 --> 00:14:22,139
number with a larger number it will

342
00:14:22,139 --> 00:14:24,480
cause liveness issues

343
00:14:24,480 --> 00:14:26,760
so

344
00:14:26,760 --> 00:14:29,880
if we look at the epactus sorry the dev

345
00:14:29,880 --> 00:14:32,160
fast version code again

346
00:14:32,160 --> 00:14:35,839
we don't have these issues

347
00:14:37,260 --> 00:14:40,560
okay next I want to talk about another

348
00:14:40,560 --> 00:14:43,620
example copilot this is not github's

349
00:14:43,620 --> 00:14:46,740
co-pilot but uh consensus protocol

350
00:14:46,740 --> 00:14:49,079
published in 2020

351
00:14:49,079 --> 00:14:51,360
which has a nice feature that tolerate

352
00:14:51,360 --> 00:14:54,180
any server fails slow

353
00:14:54,180 --> 00:14:56,880
okay it also has a fast path and slow

354
00:14:56,880 --> 00:14:59,660
path structure

355
00:15:00,500 --> 00:15:03,480
copilot's code is based on apex's code

356
00:15:03,480 --> 00:15:07,980
and it has about 2 000 and 500 lines of

357
00:15:07,980 --> 00:15:09,779
gold

358
00:15:09,779 --> 00:15:13,560
and we re-implemented copilot with that

359
00:15:13,560 --> 00:15:15,839
fast so with all major features

360
00:15:15,839 --> 00:15:17,940
implemented

361
00:15:17,940 --> 00:15:21,540
our version is about 1 600 lines of code

362
00:15:21,540 --> 00:15:24,319
in C plus plus

363
00:15:24,839 --> 00:15:28,800
here I want to show you a comparison of

364
00:15:28,800 --> 00:15:31,260
the algorithm and Dev fast version code

365
00:15:31,260 --> 00:15:34,440
and the regional copilot code

366
00:15:34,440 --> 00:15:37,079
so this algorithm description is we

367
00:15:37,079 --> 00:15:39,180
directly copy and paste the text from

368
00:15:39,180 --> 00:15:40,199
the paper

369
00:15:40,199 --> 00:15:43,740
again First Step do a broadcast

370
00:15:43,740 --> 00:15:45,899
the second step

371
00:15:45,899 --> 00:15:49,139
gather the fast path quorum wait for the

372
00:15:49,139 --> 00:15:51,120
fast path conditions

373
00:15:51,120 --> 00:15:53,639
and the third step is

374
00:15:53,639 --> 00:15:57,360
uh go fast path if it is satisfied

375
00:15:57,360 --> 00:16:00,180
and fourth step is

376
00:16:00,180 --> 00:16:04,199
if fast path is rejected or timeouts go

377
00:16:04,199 --> 00:16:06,839
slow path okay

378
00:16:06,839 --> 00:16:08,880
all right so

379
00:16:08,880 --> 00:16:11,459
without looking too deep in the cold I

380
00:16:11,459 --> 00:16:14,279
think we can already notice that

381
00:16:14,279 --> 00:16:17,760
fast version is cleaner

382
00:16:17,760 --> 00:16:20,639
right it's easier to understand

383
00:16:20,639 --> 00:16:23,279
it's an almost direct translation of the

384
00:16:23,279 --> 00:16:24,360
text

385
00:16:24,360 --> 00:16:27,120
and it handles complex conditions such

386
00:16:27,120 --> 00:16:29,519
as time out more elegantly

387
00:16:29,519 --> 00:16:30,899
well

388
00:16:30,899 --> 00:16:33,000
another problem I want to discuss is

389
00:16:33,000 --> 00:16:35,339
very interestingly this is exactly the

390
00:16:35,339 --> 00:16:37,440
problem we chatted earlier that

391
00:16:37,440 --> 00:16:40,380
for a co-pilot the first path Quorum

392
00:16:40,380 --> 00:16:43,079
size and the slow path current size are

393
00:16:43,079 --> 00:16:44,699
no longer the same they're different

394
00:16:44,699 --> 00:16:47,779
which means they cannot directly reuse

395
00:16:47,779 --> 00:16:51,540
epex's code for this

396
00:16:51,540 --> 00:16:54,240
so what uh eventually they come up with

397
00:16:54,240 --> 00:16:56,940
a nice hack that they reversed process

398
00:16:56,940 --> 00:16:59,519
in the slow path and fast path

399
00:16:59,519 --> 00:17:01,920
so that it avoids the live news issue

400
00:17:01,920 --> 00:17:03,959
it's a nice hack again it's not hack but

401
00:17:03,959 --> 00:17:05,880
more and more hacks we have in this code

402
00:17:05,880 --> 00:17:09,179
it's harder for us to understand it

403
00:17:09,179 --> 00:17:11,660
okay

404
00:17:11,880 --> 00:17:14,660
next I want to show you uh evaluation

405
00:17:14,660 --> 00:17:18,660
comparing our copilot implementation

406
00:17:18,660 --> 00:17:20,699
against the original copilot

407
00:17:20,699 --> 00:17:21,959
implementation

408
00:17:21,959 --> 00:17:25,079
so we try to answer two questions one is

409
00:17:25,079 --> 00:17:27,480
about performance like

410
00:17:27,480 --> 00:17:29,400
do we have a lot of overhead compared to

411
00:17:29,400 --> 00:17:31,559
the original implementation

412
00:17:31,559 --> 00:17:34,500
and we did this test on Azure with the

413
00:17:34,500 --> 00:17:37,580
three replica setup

414
00:17:37,919 --> 00:17:39,660
the second question we try to answer is

415
00:17:39,660 --> 00:17:42,360
can Dev fast help developers to deal

416
00:17:42,360 --> 00:17:44,760
with complex cases

417
00:17:44,760 --> 00:17:48,419
such as fell slow so we measured this by

418
00:17:48,419 --> 00:17:50,820
data field slow test in which we

419
00:17:50,820 --> 00:17:52,740
injected different types of failed slow

420
00:17:52,740 --> 00:17:54,720
errors such as

421
00:17:54,720 --> 00:17:59,340
on CPU Network and memory

422
00:17:59,340 --> 00:18:01,260
so this is the results for the

423
00:18:01,260 --> 00:18:04,200
performance test the x-axis represents

424
00:18:04,200 --> 00:18:06,660
throughput and y-axis is the median

425
00:18:06,660 --> 00:18:08,280
latency

426
00:18:08,280 --> 00:18:11,039
you can see that that fast version of

427
00:18:11,039 --> 00:18:13,340
copilot has about similar performance

428
00:18:13,340 --> 00:18:15,600
comparing to the original implementation

429
00:18:15,600 --> 00:18:20,159
with a slightly higher latency

430
00:18:20,820 --> 00:18:23,280
so the next question

431
00:18:23,280 --> 00:18:26,700
fail slow so this shows the fail slow

432
00:18:26,700 --> 00:18:29,280
test and each figure

433
00:18:29,280 --> 00:18:31,919
the blue bar represents the case where

434
00:18:31,919 --> 00:18:33,000
there are no

435
00:18:33,000 --> 00:18:36,120
failures so it serves as a Baseline and

436
00:18:36,120 --> 00:18:38,880
each other color type represents a

437
00:18:38,880 --> 00:18:40,860
different type of injected fail slope

438
00:18:40,860 --> 00:18:42,059
failure

439
00:18:42,059 --> 00:18:44,580
and the expectation is the throughput

440
00:18:44,580 --> 00:18:47,760
could drop but no major drop like not

441
00:18:47,760 --> 00:18:51,679
like less than 20 or so

442
00:18:51,720 --> 00:18:54,840
I do want to say that we verified

443
00:18:54,840 --> 00:18:58,620
co-pilot in its original papers setup

444
00:18:58,620 --> 00:19:01,679
that it can tolerate any server slow

445
00:19:01,679 --> 00:19:02,700
down

446
00:19:02,700 --> 00:19:06,419
however in our own tests which are

447
00:19:06,419 --> 00:19:07,500
different

448
00:19:07,500 --> 00:19:10,620
from original co-pilots test that we

449
00:19:10,620 --> 00:19:12,600
noticed something interesting that in

450
00:19:12,600 --> 00:19:14,700
some cases the original co-part

451
00:19:14,700 --> 00:19:17,220
instrumentation has more throughput draw

452
00:19:17,220 --> 00:19:19,080
than we expected

453
00:19:19,080 --> 00:19:22,980
and in one case it crashed

454
00:19:22,980 --> 00:19:26,100
in comparison uh that fast version has

455
00:19:26,100 --> 00:19:28,020
no such issues

456
00:19:28,020 --> 00:19:30,059
so I do want to emphasize that we're not

457
00:19:30,059 --> 00:19:31,380
trying to bash

458
00:19:31,380 --> 00:19:34,080
the co-pilot's implementation it is a

459
00:19:34,080 --> 00:19:36,600
academic prototype which has done its

460
00:19:36,600 --> 00:19:39,419
purpose well of validating the idea the

461
00:19:39,419 --> 00:19:40,919
message we're trying to communicate here

462
00:19:40,919 --> 00:19:43,559
is Fault tolerance is not only an

463
00:19:43,559 --> 00:19:46,200
algorithm issue algorithmic issue it's a

464
00:19:46,200 --> 00:19:49,980
also an implementation issue

465
00:19:49,980 --> 00:19:53,580
okay quickly summarize my talk today

466
00:19:53,580 --> 00:19:55,500
Quorum systems are very hard to build

467
00:19:55,500 --> 00:19:58,020
and asynchronous programming style makes

468
00:19:58,020 --> 00:19:59,520
it even harder

469
00:19:59,520 --> 00:20:02,700
so we present that fast with a quorum

470
00:20:02,700 --> 00:20:05,760
event abstraction to make things easier

471
00:20:05,760 --> 00:20:09,179
and we analyzed two cases EP access and

472
00:20:09,179 --> 00:20:10,919
Copilot

473
00:20:10,919 --> 00:20:12,840
you're welcome to check our paper which

474
00:20:12,840 --> 00:20:16,440
has more details on the internal designs

475
00:20:16,440 --> 00:20:18,240
and more results of the co-pilot

476
00:20:18,240 --> 00:20:19,500
evaluation

477
00:20:19,500 --> 00:20:22,620
and it has a wrapped implementation also

478
00:20:22,620 --> 00:20:24,720
has more discussions on fail slow

479
00:20:24,720 --> 00:20:25,919
failures

480
00:20:25,919 --> 00:20:29,780
uh thank you I'm ready to take questions

