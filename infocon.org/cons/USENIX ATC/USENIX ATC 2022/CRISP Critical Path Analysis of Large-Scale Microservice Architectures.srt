1
00:00:13,200 --> 00:00:15,440
i'm chris i'm a fourth year phd student

2
00:00:15,440 --> 00:00:17,840
from uc santa barbara and today i'm

3
00:00:17,840 --> 00:00:20,000
happy to share our work the cresp

4
00:00:20,000 --> 00:00:22,160
critical path analysis on a large-scale

5
00:00:22,160 --> 00:00:24,400
micro service architectures this is a

6
00:00:24,400 --> 00:00:26,320
collaborative work between uc santa

7
00:00:26,320 --> 00:00:28,480
barbara and uber

8
00:00:28,480 --> 00:00:30,800
so first let me give you a very quick

9
00:00:30,800 --> 00:00:32,479
background information what is

10
00:00:32,479 --> 00:00:34,640
microservices architecture

11
00:00:34,640 --> 00:00:37,520
so microservice is it compared with the

12
00:00:37,520 --> 00:00:39,840
traditional monolithic design

13
00:00:39,840 --> 00:00:42,480
it's more distributed because each

14
00:00:42,480 --> 00:00:44,960
functions of or business logic of your

15
00:00:44,960 --> 00:00:47,840
system is divided into independent parts

16
00:00:47,840 --> 00:00:49,680
and in each part is implemented by

17
00:00:49,680 --> 00:00:51,680
independent programs

18
00:00:51,680 --> 00:00:52,719
so

19
00:00:52,719 --> 00:00:55,600
and the independent programs normally

20
00:00:55,600 --> 00:00:57,600
communicate with each other over the

21
00:00:57,600 --> 00:01:00,399
well-defined apis and typically through

22
00:01:00,399 --> 00:01:01,120
the

23
00:01:01,120 --> 00:01:05,040
our rpc oral remote procedure cost

24
00:01:05,040 --> 00:01:06,240
and

25
00:01:06,240 --> 00:01:08,320
all of them are loosely coupled because

26
00:01:08,320 --> 00:01:10,400
they communicate with each other but at

27
00:01:10,400 --> 00:01:13,040
the same time they're independent

28
00:01:13,040 --> 00:01:13,920
so

29
00:01:13,920 --> 00:01:15,600
another characteristic of this

30
00:01:15,600 --> 00:01:18,159
microservices is each small services is

31
00:01:18,159 --> 00:01:20,000
normally owned by the different

32
00:01:20,000 --> 00:01:22,720
independent or self-contained team and

33
00:01:22,720 --> 00:01:24,320
they can just develop this stuff very

34
00:01:24,320 --> 00:01:25,439
fastly

35
00:01:25,439 --> 00:01:28,000
all right then you may ask why do we

36
00:01:28,000 --> 00:01:29,759
need microservices

37
00:01:29,759 --> 00:01:33,680
because they offer scalable development

38
00:01:33,680 --> 00:01:35,920
specifically because the services are

39
00:01:35,920 --> 00:01:38,000
independent they can just be developed

40
00:01:38,000 --> 00:01:39,600
independently

41
00:01:39,600 --> 00:01:43,200
and it also allows the companies or

42
00:01:43,200 --> 00:01:45,920
service owners to deploy the stuff more

43
00:01:45,920 --> 00:01:47,280
easily

44
00:01:47,280 --> 00:01:49,520
as a result a survey from last year

45
00:01:49,520 --> 00:01:51,920
shows that more than 71 percent of

46
00:01:51,920 --> 00:01:54,799
organizations fully or partially adopted

47
00:01:54,799 --> 00:01:57,759
the microservices

48
00:01:59,040 --> 00:02:01,280
however this fast growing of the

49
00:02:01,280 --> 00:02:03,200
microservices also brought many

50
00:02:03,200 --> 00:02:04,960
challenges and particularly the

51
00:02:04,960 --> 00:02:06,719
complexity

52
00:02:06,719 --> 00:02:09,598
the evolution of the micro services also

53
00:02:09,598 --> 00:02:13,200
leads to very complex interactions

54
00:02:13,200 --> 00:02:15,680
and those interactions add a lot of

55
00:02:15,680 --> 00:02:18,000
difficulties to analyze

56
00:02:18,000 --> 00:02:21,360
specifically those interactions um very

57
00:02:21,360 --> 00:02:23,920
frequently just deeply nested and they

58
00:02:23,920 --> 00:02:27,200
are also a synchronized

59
00:02:27,200 --> 00:02:29,840
so you can imagine if you have tens of

60
00:02:29,840 --> 00:02:32,160
thousands of endpoints interact with

61
00:02:32,160 --> 00:02:34,480
each other and i'm gonna ask okay my

62
00:02:34,480 --> 00:02:36,319
service is slow down what's the problem

63
00:02:36,319 --> 00:02:38,640
for what's called root cause for this

64
00:02:38,640 --> 00:02:40,400
it's really hard to answer

65
00:02:40,400 --> 00:02:42,239
so here's a screenshot from uber a

66
00:02:42,239 --> 00:02:45,519
couple years ago and in this graph each

67
00:02:45,519 --> 00:02:48,239
node is a service and each edges are the

68
00:02:48,239 --> 00:02:50,239
interactions between services because

69
00:02:50,239 --> 00:02:52,000
you can now you can imagine if i ask

70
00:02:52,000 --> 00:02:53,760
okay it's slow down it's really hard to

71
00:02:53,760 --> 00:02:56,400
answer why

72
00:02:56,400 --> 00:03:00,239
so couple tools has been developed for

73
00:03:00,239 --> 00:03:02,159
analyze this micro services texture

74
00:03:02,159 --> 00:03:04,800
architecture and distributed tracing is

75
00:03:04,800 --> 00:03:06,879
one of the commonly used one

76
00:03:06,879 --> 00:03:09,040
and it's really helped us to understand

77
00:03:09,040 --> 00:03:10,720
the business logic and our business

78
00:03:10,720 --> 00:03:12,000
workflow

79
00:03:12,000 --> 00:03:14,000
and specifically i want to talk about

80
00:03:14,000 --> 00:03:16,800
jaeger tracing used in uber for this

81
00:03:16,800 --> 00:03:18,720
presentation

82
00:03:18,720 --> 00:03:21,840
so jaeger it's a system to capturing all

83
00:03:21,840 --> 00:03:24,480
the rpc costs between caller and quality

84
00:03:24,480 --> 00:03:26,080
among the services

85
00:03:26,080 --> 00:03:28,080
and it tracks all the rpc calls and

86
00:03:28,080 --> 00:03:30,840
build an end-to-end trades for the

87
00:03:30,840 --> 00:03:32,480
service

88
00:03:32,480 --> 00:03:35,200
and it's widely deployed at uber and

89
00:03:35,200 --> 00:03:37,840
supports multiple languages including go

90
00:03:37,840 --> 00:03:41,440
java python and so on

91
00:03:41,440 --> 00:03:44,720
and one one interesting feature of eager

92
00:03:44,720 --> 00:03:46,720
is a collector trace on the sampling

93
00:03:46,720 --> 00:03:47,760
basis

94
00:03:47,760 --> 00:03:49,519
so it doesn't need to collect all the

95
00:03:49,519 --> 00:03:51,360
traces which might be way too much

96
00:03:51,360 --> 00:03:54,159
expensive to capture

97
00:03:54,159 --> 00:03:56,959
however jaeger at the same time also

98
00:03:56,959 --> 00:03:58,799
works well since it captures end

99
00:03:58,799 --> 00:04:00,000
end-to-end

100
00:04:00,000 --> 00:04:02,799
request so it stores all the trace and

101
00:04:02,799 --> 00:04:04,720
spans independently without

102
00:04:04,720 --> 00:04:06,799
synchronizing between caller and

103
00:04:06,799 --> 00:04:10,400
colleagues only the unique request id is

104
00:04:10,400 --> 00:04:12,480
carried between caller and callee to

105
00:04:12,480 --> 00:04:14,720
reconstruct the entire graph in the

106
00:04:14,720 --> 00:04:17,599
post-processing

107
00:04:17,600 --> 00:04:20,478
also jaeger supports multiple storage

108
00:04:20,478 --> 00:04:24,000
systems for example cassandra elastic

109
00:04:24,000 --> 00:04:27,199
search in memory or some other more

110
00:04:27,199 --> 00:04:29,120
techniques

111
00:04:29,120 --> 00:04:32,080
but again even i give you this jaeger

112
00:04:32,080 --> 00:04:34,560
chase it's still hard to answer like

113
00:04:34,560 --> 00:04:36,720
okay what's causing the end to end

114
00:04:36,720 --> 00:04:41,199
latency of a specific request or service

115
00:04:41,199 --> 00:04:44,320
here's a sort of a visualization of some

116
00:04:44,320 --> 00:04:47,360
relatively simple traces from uber as

117
00:04:47,360 --> 00:04:49,280
you can see it's quite complicated also

118
00:04:49,280 --> 00:04:51,759
here it only shows you the visualization

119
00:04:51,759 --> 00:04:54,400
without the overlap in reality there's a

120
00:04:54,400 --> 00:04:56,479
lot of overlap in

121
00:04:56,479 --> 00:04:58,320
the timeline so it's really hard to

122
00:04:58,320 --> 00:05:00,400
analyze

123
00:05:00,400 --> 00:05:03,199
so here i will say our solution in this

124
00:05:03,199 --> 00:05:05,680
paper is we use the critical path

125
00:05:05,680 --> 00:05:08,720
analysis on the distributed systems oh

126
00:05:08,720 --> 00:05:11,680
sorry on the distributed traces

127
00:05:11,680 --> 00:05:13,280
so it supports

128
00:05:13,280 --> 00:05:16,080
three main functionalities the first is

129
00:05:16,080 --> 00:05:19,039
top-down analysis it aims for the

130
00:05:19,039 --> 00:05:21,440
service owner to debug and optimize

131
00:05:21,440 --> 00:05:22,320
their

132
00:05:22,320 --> 00:05:24,880
service that they are interested

133
00:05:24,880 --> 00:05:26,880
and second we offer the bottom-up

134
00:05:26,880 --> 00:05:28,560
analysis which is sort of like

135
00:05:28,560 --> 00:05:31,759
systematic analyze to give you a whole

136
00:05:31,759 --> 00:05:32,560
whole

137
00:05:32,560 --> 00:05:34,880
upper level whole picture of your entire

138
00:05:34,880 --> 00:05:37,520
system across the data center

139
00:05:37,520 --> 00:05:40,400
and third we also helps for the anomaly

140
00:05:40,400 --> 00:05:43,120
detection which is definitely helpful to

141
00:05:43,120 --> 00:05:47,199
build automatic alerting systems

142
00:05:47,360 --> 00:05:50,160
and here's the offline of my talk and i

143
00:05:50,160 --> 00:05:51,840
then i will give you some brief

144
00:05:51,840 --> 00:05:53,840
introductions of what is critical path

145
00:05:53,840 --> 00:05:55,840
analysis and what the difficulties

146
00:05:55,840 --> 00:05:59,440
applying those in the real data center

147
00:06:00,639 --> 00:06:02,720
so critical path analysis is a

148
00:06:02,720 --> 00:06:04,960
well-known techniques from each pc

149
00:06:04,960 --> 00:06:06,880
community and

150
00:06:06,880 --> 00:06:09,919
and it's it's really helpful to identify

151
00:06:09,919 --> 00:06:11,840
the longest stretch of the dependent

152
00:06:11,840 --> 00:06:13,120
tasks

153
00:06:13,120 --> 00:06:14,960
and the important of the importance of

154
00:06:14,960 --> 00:06:17,039
the critical path analysis is if you

155
00:06:17,039 --> 00:06:20,720
want to shorten your end-to-end latency

156
00:06:20,720 --> 00:06:24,000
it's required by shorten your uh

157
00:06:24,000 --> 00:06:27,440
the latencies on your critical path

158
00:06:28,639 --> 00:06:31,520
so we think that critical path analysis

159
00:06:31,520 --> 00:06:33,919
naturally simplifies the complex

160
00:06:33,919 --> 00:06:35,840
dependency graph we collected from

161
00:06:35,840 --> 00:06:37,759
distributed tracing

162
00:06:37,759 --> 00:06:38,960
and

163
00:06:38,960 --> 00:06:40,880
how to compute that i won't give you the

164
00:06:40,880 --> 00:06:42,560
full algorithm here because there are a

165
00:06:42,560 --> 00:06:44,639
lot of those online or you can also

166
00:06:44,639 --> 00:06:45,919
refer to our

167
00:06:45,919 --> 00:06:48,560
our paper but at a high level it's just

168
00:06:48,560 --> 00:06:50,400
iteratively going back from the

169
00:06:50,400 --> 00:06:52,960
timelines and call those computation

170
00:06:52,960 --> 00:06:55,680
algorithms recursively

171
00:06:55,680 --> 00:06:57,919
let me run a quick examples here so

172
00:06:57,919 --> 00:07:00,479
suppose you have a parent span a the

173
00:07:00,479 --> 00:07:02,960
parent service a it costs b

174
00:07:02,960 --> 00:07:05,919
and it is also called c and c maybe also

175
00:07:05,919 --> 00:07:08,080
calls d and e so

176
00:07:08,080 --> 00:07:10,720
how can we identify the critical path

177
00:07:10,720 --> 00:07:12,720
for from this trace

178
00:07:12,720 --> 00:07:15,360
first we'll start from the

179
00:07:15,360 --> 00:07:18,400
the end of the timeline t10 we just walk

180
00:07:18,400 --> 00:07:20,880
backwards okay what's the last return

181
00:07:20,880 --> 00:07:24,080
child from a we can see it's c from t9

182
00:07:24,080 --> 00:07:26,800
right so this is added as a critical

183
00:07:26,800 --> 00:07:27,680
pass

184
00:07:27,680 --> 00:07:29,680
all right then we move on to the c

185
00:07:29,680 --> 00:07:32,400
because c returns last we recursively

186
00:07:32,400 --> 00:07:34,960
cause what's the last return child of c

187
00:07:34,960 --> 00:07:37,599
we will figure out okay it's e so this

188
00:07:37,599 --> 00:07:40,240
second part this ta to t9 will be added

189
00:07:40,240 --> 00:07:42,080
to the critical path

190
00:07:42,080 --> 00:07:44,960
similarly this third part on e because

191
00:07:44,960 --> 00:07:48,479
that e is the last return chart from c

192
00:07:48,479 --> 00:07:50,880
and so on and so forth so important

193
00:07:50,880 --> 00:07:53,440
important stuff here is notice that

194
00:07:53,440 --> 00:07:56,960
the span d or service d from times t six

195
00:07:56,960 --> 00:07:58,960
to t7 is not on the critical path

196
00:07:58,960 --> 00:08:00,879
because it's not the last return child

197
00:08:00,879 --> 00:08:03,280
of service c

198
00:08:03,280 --> 00:08:05,759
so by just running these algorithms

199
00:08:05,759 --> 00:08:06,720
we can

200
00:08:06,720 --> 00:08:09,360
construct the full critical path graph

201
00:08:09,360 --> 00:08:12,400
or critical path analysis here

202
00:08:12,400 --> 00:08:14,720
all right then you may ask sounds like

203
00:08:14,720 --> 00:08:16,720
this is doable why not just applying

204
00:08:16,720 --> 00:08:19,039
this critical pass analysis on the

205
00:08:19,039 --> 00:08:21,840
real-world traces directly

206
00:08:21,840 --> 00:08:25,039
it turns out that jaeger's does not

207
00:08:25,039 --> 00:08:27,919
actually have the sink or aka the last

208
00:08:27,919 --> 00:08:30,000
arrival informations from the trace

209
00:08:30,000 --> 00:08:31,840
directly

210
00:08:31,840 --> 00:08:34,559
which means all those sink or last

211
00:08:34,559 --> 00:08:37,200
arrival information needs to be inferred

212
00:08:37,200 --> 00:08:40,320
by using the timestamp

213
00:08:40,320 --> 00:08:42,000
and what's more

214
00:08:42,000 --> 00:08:44,240
the the different physical machines are

215
00:08:44,240 --> 00:08:46,480
not perfectly synchronized

216
00:08:46,480 --> 00:08:48,959
and those clock skills will brought

217
00:08:48,959 --> 00:08:50,720
errors to the critical path analysis

218
00:08:50,720 --> 00:08:52,720
which i will show you later

219
00:08:52,720 --> 00:08:54,480
also on the other hand there are a lot

220
00:08:54,480 --> 00:08:56,560
of missing spans in the traces which

221
00:08:56,560 --> 00:08:58,480
just increase the difficulties of

222
00:08:58,480 --> 00:09:02,560
applying cpa to the trace directly

223
00:09:02,560 --> 00:09:04,720
so here let me give you a real simple

224
00:09:04,720 --> 00:09:05,760
example

225
00:09:05,760 --> 00:09:10,480
a is a parent span it costs b c d in

226
00:09:10,480 --> 00:09:13,519
strictly sequential order so what is the

227
00:09:13,519 --> 00:09:16,080
critical path for this case it's easy to

228
00:09:16,080 --> 00:09:17,839
imagine

229
00:09:17,839 --> 00:09:20,399
uh sorry this should be d

230
00:09:20,399 --> 00:09:24,240
c b so basically b c sorry but all the b

231
00:09:24,240 --> 00:09:26,800
c and d are all on a critical path

232
00:09:26,800 --> 00:09:29,920
so a actually contributes a very minor

233
00:09:29,920 --> 00:09:31,839
uh time span on there

234
00:09:31,839 --> 00:09:34,720
but in real reality what we observe is

235
00:09:34,720 --> 00:09:37,600
there very frequently some overlap

236
00:09:37,600 --> 00:09:39,839
between each

237
00:09:39,839 --> 00:09:43,519
endpoint so specifically in this case

238
00:09:43,519 --> 00:09:47,120
b overlapped with c and c overlap with d

239
00:09:47,120 --> 00:09:49,279
so if we run the critical path analysis

240
00:09:49,279 --> 00:09:50,480
here

241
00:09:50,480 --> 00:09:53,040
we will see okay this d is on a critical

242
00:09:53,040 --> 00:09:56,560
path that's fine but at a time t4 what's

243
00:09:56,560 --> 00:09:59,760
the last return child from for a it's

244
00:09:59,760 --> 00:10:02,480
not c because c doesn't return yet

245
00:10:02,480 --> 00:10:04,320
it's actually

246
00:10:04,320 --> 00:10:04,959
b

247
00:10:04,959 --> 00:10:08,080
so this entire stuff is entire time is

248
00:10:08,080 --> 00:10:10,959
contributed to a instead of c

249
00:10:10,959 --> 00:10:13,920
and as a result you will notice that

250
00:10:13,920 --> 00:10:16,240
c is not on a critical path

251
00:10:16,240 --> 00:10:18,079
and here is a sort of a

252
00:10:18,079 --> 00:10:20,160
plot chart we collected

253
00:10:20,160 --> 00:10:22,959
by comparing the what's the first

254
00:10:22,959 --> 00:10:25,600
endpoint of the first child minus the

255
00:10:25,600 --> 00:10:27,920
start point of the second child so

256
00:10:27,920 --> 00:10:29,920
technically this value should be

257
00:10:29,920 --> 00:10:31,920
negative because the first child

258
00:10:31,920 --> 00:10:33,920
finished first and then the second child

259
00:10:33,920 --> 00:10:35,839
starts because this is a strictly

260
00:10:35,839 --> 00:10:37,519
sequential order

261
00:10:37,519 --> 00:10:39,360
however in reality we collect more than

262
00:10:39,360 --> 00:10:41,200
thousands of traces we can clearly see

263
00:10:41,200 --> 00:10:44,560
that because of the overlap

264
00:10:44,560 --> 00:10:46,240
you can't really run the critical path

265
00:10:46,240 --> 00:10:48,399
analysis directly

266
00:10:48,399 --> 00:10:51,279
so our solution here is we will just

267
00:10:51,279 --> 00:10:53,920
allow some degrees of overlap between

268
00:10:53,920 --> 00:10:55,760
child endpoints if there's nothing in

269
00:10:55,760 --> 00:10:57,519
between and there are more details

270
00:10:57,519 --> 00:11:00,880
please refer to our paper

271
00:11:00,880 --> 00:11:03,040
all right then i will just

272
00:11:03,040 --> 00:11:04,720
briefly talk about the design of the

273
00:11:04,720 --> 00:11:07,040
crest it's named after the critical pass

274
00:11:07,040 --> 00:11:08,959
and span

275
00:11:08,959 --> 00:11:11,920
so first assume you have micro services

276
00:11:11,920 --> 00:11:14,000
you collect the traces use uh using

277
00:11:14,000 --> 00:11:15,040
eager

278
00:11:15,040 --> 00:11:17,200
so for crisp the first step is it's

279
00:11:17,200 --> 00:11:19,040
gonna collect the trays from the

280
00:11:19,040 --> 00:11:20,320
database

281
00:11:20,320 --> 00:11:22,079
and after that you will compute the

282
00:11:22,079 --> 00:11:24,800
critical path for each of the trays

283
00:11:24,800 --> 00:11:26,800
once we have all the other critical

284
00:11:26,800 --> 00:11:29,360
paths the two things we can do first is

285
00:11:29,360 --> 00:11:31,760
we can generate the critical path report

286
00:11:31,760 --> 00:11:34,240
in the blue arrows you can see

287
00:11:34,240 --> 00:11:37,040
or alternatively we can also compute the

288
00:11:37,040 --> 00:11:39,279
feature vectors and put those feature

289
00:11:39,279 --> 00:11:41,519
vectors into machine learning models

290
00:11:41,519 --> 00:11:44,560
that can be used for the automatic uh

291
00:11:44,560 --> 00:11:48,479
anomaly detection and alerting later

292
00:11:48,560 --> 00:11:50,720
so this is the visualization of the

293
00:11:50,720 --> 00:11:53,120
frame graph it's one of the top-down

294
00:11:53,120 --> 00:11:56,240
analysis we're catering for the service

295
00:11:56,240 --> 00:11:58,000
owner if they want to figure out okay

296
00:11:58,000 --> 00:12:00,560
why is my service slow

297
00:12:00,560 --> 00:12:02,800
and as you can see fling graph is a

298
00:12:02,800 --> 00:12:04,959
popular tools that you can interact

299
00:12:04,959 --> 00:12:05,920
search

300
00:12:05,920 --> 00:12:08,079
and to see okay what's the time span on

301
00:12:08,079 --> 00:12:09,200
each

302
00:12:09,200 --> 00:12:10,880
side and you can also see the call

303
00:12:10,880 --> 00:12:12,720
chains entire call chains just back and

304
00:12:12,720 --> 00:12:14,720
forth

305
00:12:14,720 --> 00:12:16,480
and more importantly

306
00:12:16,480 --> 00:12:19,440
we compute the differential flame graphs

307
00:12:19,440 --> 00:12:20,560
um

308
00:12:20,560 --> 00:12:22,959
on those two uh

309
00:12:22,959 --> 00:12:25,760
p values specifically the p50 value the

310
00:12:25,760 --> 00:12:28,399
median value and the p95 which is like

311
00:12:28,399 --> 00:12:32,000
the tail latency so by taking those two

312
00:12:32,000 --> 00:12:34,399
diff between those two we figure out on

313
00:12:34,399 --> 00:12:37,120
one of the important servers that uber

314
00:12:37,120 --> 00:12:38,560
shows like

315
00:12:38,560 --> 00:12:40,480
on the bottom of the top left you can if

316
00:12:40,480 --> 00:12:42,880
you can read its cassandra read so

317
00:12:42,880 --> 00:12:45,920
basically between p50 and p95 this

318
00:12:45,920 --> 00:12:49,839
cassandra really increased more than 47

319
00:12:49,839 --> 00:12:53,360
and as a result we we just recommend the

320
00:12:53,360 --> 00:12:56,000
developers to cache the results in place

321
00:12:56,000 --> 00:12:57,839
instead of acquiring this expensive

322
00:12:57,839 --> 00:13:01,440
database operations every time

323
00:13:01,680 --> 00:13:03,920
then let me move on to the bottom up

324
00:13:03,920 --> 00:13:06,079
analysis which is sort of a gives the

325
00:13:06,079 --> 00:13:09,120
overview for the system administrators

326
00:13:09,120 --> 00:13:11,600
to have a some sort of idea of how the

327
00:13:11,600 --> 00:13:13,839
system is running in the database

328
00:13:13,839 --> 00:13:15,839
there are more results in the paper

329
00:13:15,839 --> 00:13:17,680
uh here i will only briefly talk about

330
00:13:17,680 --> 00:13:19,279
two pictures

331
00:13:19,279 --> 00:13:21,519
so first let me let me tell you how to

332
00:13:21,519 --> 00:13:22,720
read this one

333
00:13:22,720 --> 00:13:26,079
the x-axis is unique and points in each

334
00:13:26,079 --> 00:13:28,079
trace basically meaning okay i have a

335
00:13:28,079 --> 00:13:29,839
trace how many endpoints are there in

336
00:13:29,839 --> 00:13:33,120
the trace and the y-axis is a count so

337
00:13:33,120 --> 00:13:36,399
suppose i have one trace it has thousand

338
00:13:36,399 --> 00:13:38,880
nodes a thousand unique endpoints then

339
00:13:38,880 --> 00:13:40,399
it will be probably

340
00:13:40,399 --> 00:13:41,440
somewhere

341
00:13:41,440 --> 00:13:43,839
on the 1000 over there and counts that

342
00:13:43,839 --> 00:13:47,040
histogram plus one

343
00:13:47,040 --> 00:13:50,000
similarly on the right we have the

344
00:13:50,000 --> 00:13:52,000
number of the unique endpoints on the

345
00:13:52,000 --> 00:13:54,959
critical path so the choices are exactly

346
00:13:54,959 --> 00:13:57,600
the same but we only we're comparing the

347
00:13:57,600 --> 00:13:59,199
unique endpoints on the whole graph

348
00:13:59,199 --> 00:14:00,720
versus the unique endpoints on a

349
00:14:00,720 --> 00:14:04,320
critical path so as we can see like

350
00:14:04,320 --> 00:14:06,560
on the whole graph there are more than

351
00:14:06,560 --> 00:14:09,440
one thousand endpoints for several for

352
00:14:09,440 --> 00:14:11,279
certain traces

353
00:14:11,279 --> 00:14:13,040
but on the right

354
00:14:13,040 --> 00:14:15,040
for the same graph on the critical path

355
00:14:15,040 --> 00:14:18,240
number significantly reduced to around

356
00:14:18,240 --> 00:14:19,680
140.

357
00:14:19,680 --> 00:14:20,800
so that's

358
00:14:20,800 --> 00:14:23,680
roughly about 10x difference

359
00:14:23,680 --> 00:14:25,760
and another interesting observations we

360
00:14:25,760 --> 00:14:28,560
have is on the left the unique endpoints

361
00:14:28,560 --> 00:14:31,680
for in each trace the distribution is

362
00:14:31,680 --> 00:14:34,480
more like a power law but on the right

363
00:14:34,480 --> 00:14:37,120
this is sort of a more

364
00:14:37,120 --> 00:14:40,560
monotonically decreasing

365
00:14:41,680 --> 00:14:44,320
all right then let me just talk about

366
00:14:44,320 --> 00:14:46,720
what is a why we need anomaly detection

367
00:14:46,720 --> 00:14:48,320
and why is it important

368
00:14:48,320 --> 00:14:49,279
so

369
00:14:49,279 --> 00:14:50,720
suppose

370
00:14:50,720 --> 00:14:53,920
we the system detects some box

371
00:14:53,920 --> 00:14:56,160
and you you can just automatically

372
00:14:56,160 --> 00:14:58,399
generate an alert to the service owners

373
00:14:58,399 --> 00:15:00,399
so that they can trying to figure out

374
00:15:00,399 --> 00:15:02,880
okay what's causing any troubles

375
00:15:02,880 --> 00:15:05,600
meltdown slowdown of the service that's

376
00:15:05,600 --> 00:15:09,600
why we think this tool is really helpful

377
00:15:09,600 --> 00:15:13,040
so we compared our work by using our on

378
00:15:13,040 --> 00:15:15,920
top of the auto encoder decoder based uh

379
00:15:15,920 --> 00:15:17,839
baseline

380
00:15:17,839 --> 00:15:20,079
the key difference here is in original

381
00:15:20,079 --> 00:15:21,839
work they're using the whole graph of

382
00:15:21,839 --> 00:15:23,120
the input

383
00:15:23,120 --> 00:15:25,440
to to training and doing the inference

384
00:15:25,440 --> 00:15:28,160
but the case for us we use the

385
00:15:28,160 --> 00:15:29,440
critical path

386
00:15:29,440 --> 00:15:31,839
as an input

387
00:15:31,839 --> 00:15:34,160
so we run on numerous real important

388
00:15:34,160 --> 00:15:37,120
services from uber

389
00:15:37,120 --> 00:15:39,600
and let's give you some quick metrics

390
00:15:39,600 --> 00:15:41,680
summarize of what are those services

391
00:15:41,680 --> 00:15:44,240
look like so typically they have around

392
00:15:44,240 --> 00:15:48,639
200 to 1500 unique endpoints on each

393
00:15:48,639 --> 00:15:51,680
service sorry on each service or trace

394
00:15:51,680 --> 00:15:54,480
and in terms of a span number like the

395
00:15:54,480 --> 00:15:56,720
nodes how many nodes in a graph it

396
00:15:56,720 --> 00:16:01,600
varies from 1 500 to more than 11 000.

397
00:16:01,600 --> 00:16:04,480
so it turns out that the the critical

398
00:16:04,480 --> 00:16:07,040
path analysis based data

399
00:16:07,040 --> 00:16:10,079
can show significantly speed up for both

400
00:16:10,079 --> 00:16:12,480
training and influence also it generates

401
00:16:12,480 --> 00:16:14,399
way much better results in terms of

402
00:16:14,399 --> 00:16:16,320
recall

403
00:16:16,320 --> 00:16:18,720
so specifically when we're talking about

404
00:16:18,720 --> 00:16:20,959
the accuracy of the anomaly detections

405
00:16:20,959 --> 00:16:23,199
there are mainly two metrics where we

406
00:16:23,199 --> 00:16:25,279
care about first is precision it

407
00:16:25,279 --> 00:16:27,519
basically means okay i give you some

408
00:16:27,519 --> 00:16:29,839
abnormal data can you tell them

409
00:16:29,839 --> 00:16:32,639
it shows that both method the original

410
00:16:32,639 --> 00:16:34,079
work and the critical path-based

411
00:16:34,079 --> 00:16:36,240
analysis both of them works roughly well

412
00:16:36,240 --> 00:16:37,199
you can check

413
00:16:37,199 --> 00:16:38,399
from the paper

414
00:16:38,399 --> 00:16:40,639
and i will talk a little bit more on a

415
00:16:40,639 --> 00:16:43,360
recall in this case so the importance of

416
00:16:43,360 --> 00:16:45,839
recall basically means okay

417
00:16:45,839 --> 00:16:48,240
how many false gen false alarms are you

418
00:16:48,240 --> 00:16:49,920
gonna false positive are you gonna

419
00:16:49,920 --> 00:16:51,120
generate

420
00:16:51,120 --> 00:16:53,120
and basically the higher the number

421
00:16:53,120 --> 00:16:55,839
close to one it means the less false

422
00:16:55,839 --> 00:16:58,000
alarm you're gonna generate

423
00:16:58,000 --> 00:16:59,360
so

424
00:16:59,360 --> 00:17:01,680
specifically here we can take a look for

425
00:17:01,680 --> 00:17:04,559
service three and service five the

426
00:17:04,559 --> 00:17:06,880
original work actually generate tons of

427
00:17:06,880 --> 00:17:09,199
false alarm which probably gonna annoy

428
00:17:09,199 --> 00:17:11,119
the service owner but on the right you

429
00:17:11,119 --> 00:17:13,520
can see the crisp just consistently

430
00:17:13,520 --> 00:17:19,359
generate very few uh fast uh alarm

431
00:17:19,359 --> 00:17:21,280
and next let's take a look at the

432
00:17:21,280 --> 00:17:24,079
training and inference speed up

433
00:17:24,079 --> 00:17:26,959
so first is the training speed up for

434
00:17:26,959 --> 00:17:28,079
crisp

435
00:17:28,079 --> 00:17:30,320
because the dimensionality of the

436
00:17:30,320 --> 00:17:32,320
critical path is way much smaller than

437
00:17:32,320 --> 00:17:34,000
the full graph

438
00:17:34,000 --> 00:17:34,960
it can

439
00:17:34,960 --> 00:17:37,600
it can generate significant speed up so

440
00:17:37,600 --> 00:17:40,080
the y-axis here is times of a speed up

441
00:17:40,080 --> 00:17:42,480
it's not percentage so as we can see

442
00:17:42,480 --> 00:17:44,960
chris can generate up to more than 20

443
00:17:44,960 --> 00:17:46,799
times speed up compared with the

444
00:17:46,799 --> 00:17:48,640
baseline

445
00:17:48,640 --> 00:17:50,799
on the right is the inference it's

446
00:17:50,799 --> 00:17:52,720
actually even larger it can generate

447
00:17:52,720 --> 00:17:54,160
more than 60

448
00:17:54,160 --> 00:17:57,919
sorry 60 times speed off

449
00:17:58,960 --> 00:18:00,559
all right so

450
00:18:00,559 --> 00:18:01,919
in conclusion

451
00:18:01,919 --> 00:18:04,640
we built crisp a critical path analysis

452
00:18:04,640 --> 00:18:07,440
based tool to analyze the complex micro

453
00:18:07,440 --> 00:18:09,440
service traces

454
00:18:09,440 --> 00:18:12,320
it offers three main important uh

455
00:18:12,320 --> 00:18:14,400
components top-down analysis for the

456
00:18:14,400 --> 00:18:16,400
service level insights

457
00:18:16,400 --> 00:18:18,799
bottom-up analysis for the system-wide

458
00:18:18,799 --> 00:18:22,080
insights and anomaly detection to build

459
00:18:22,080 --> 00:18:25,280
a better automatic alerting systems

460
00:18:25,280 --> 00:18:27,919
and the code is available on the github

461
00:18:27,919 --> 00:18:30,000
and if you have any questions feel free

462
00:18:30,000 --> 00:18:31,919
to shoot us an email

463
00:18:31,919 --> 00:18:34,240
and thanks for your time and if you have

464
00:18:34,240 --> 00:18:36,080
any questions and what i have you to

465
00:18:36,080 --> 00:18:38,080
answer also i'll be at a poster session

466
00:18:38,080 --> 00:18:42,280
so we can chat more if you want

467
00:18:47,760 --> 00:18:49,840
you

