1
00:00:08,400 --> 00:00:08,800
hi

2
00:00:08,800 --> 00:00:12,160
i'm louise hi i'm dimitra so maurice

3
00:00:12,160 --> 00:00:14,160
what are we going to talk about today

4
00:00:14,160 --> 00:00:16,880
avocado whatever god there is a secure

5
00:00:16,880 --> 00:00:19,359
in-memory distributed storage system

6
00:00:19,359 --> 00:00:22,000
so key value stores uh is a fundamental

7
00:00:22,000 --> 00:00:23,039
building block for

8
00:00:23,039 --> 00:00:26,960
storing data and that makes them popular

9
00:00:26,960 --> 00:00:28,240
and they are everywhere in

10
00:00:28,240 --> 00:00:31,119
modern online services right yes because

11
00:00:31,119 --> 00:00:33,200
they offer high performance that means

12
00:00:33,200 --> 00:00:35,600
low latency and high throughput but you

13
00:00:35,600 --> 00:00:37,040
can scale them out

14
00:00:37,040 --> 00:00:40,079
so that you can go over the limits of

15
00:00:40,079 --> 00:00:42,640
one note

16
00:00:43,040 --> 00:00:45,039
it's a cloud is idea for it because you

17
00:00:45,039 --> 00:00:46,399
can very easily

18
00:00:46,399 --> 00:00:48,239
scale your application depending on your

19
00:00:48,239 --> 00:00:50,160
current workload by adding or removing

20
00:00:50,160 --> 00:00:51,760
nodes

21
00:00:51,760 --> 00:00:54,079
yeah that makes sense but what about

22
00:00:54,079 --> 00:00:55,520
data security

23
00:00:55,520 --> 00:00:58,640
for example users may store their

24
00:00:58,640 --> 00:01:01,120
financial medical or any other private

25
00:01:01,120 --> 00:01:01,760
data

26
00:01:01,760 --> 00:01:04,559
and these data are exposed to the cloud

27
00:01:04,559 --> 00:01:05,280
provider

28
00:01:05,280 --> 00:01:08,320
to administrators or any other malicious

29
00:01:08,320 --> 00:01:10,240
attacker is that right

30
00:01:10,240 --> 00:01:12,880
yes this is a severe problem so the

31
00:01:12,880 --> 00:01:14,479
question we try to

32
00:01:14,479 --> 00:01:17,200
solve becomes how to design a secure

33
00:01:17,200 --> 00:01:19,280
distributed and memory key value store

34
00:01:19,280 --> 00:01:22,880
for untrusted cloud environments

35
00:01:23,600 --> 00:01:26,960
so we present avocado

36
00:01:26,960 --> 00:01:29,600
so avocado is a secure distributed in

37
00:01:29,600 --> 00:01:31,280
memory cable store

38
00:01:31,280 --> 00:01:33,680
for the untrusted computing

39
00:01:33,680 --> 00:01:34,960
infrastructure

40
00:01:34,960 --> 00:01:38,880
and we designed avocado with three

41
00:01:38,880 --> 00:01:41,360
important properties in mind strict

42
00:01:41,360 --> 00:01:42,640
security properties

43
00:01:42,640 --> 00:01:45,680
which is confidentiality integrity and

44
00:01:45,680 --> 00:01:48,240
and freshness fall tolerance or

45
00:01:48,240 --> 00:01:49,360
availability

46
00:01:49,360 --> 00:01:55,840
and also avocado targets performance

47
00:01:59,280 --> 00:02:00,799
maurice would you like to tell us a

48
00:02:00,799 --> 00:02:04,079
little bit about the basic design

49
00:02:04,079 --> 00:02:05,840
yeah so the basic detail of a

50
00:02:05,840 --> 00:02:08,318
distributed in-memory value store

51
00:02:08,318 --> 00:02:11,760
has a local key value store in

52
00:02:11,760 --> 00:02:14,160
every node and an replication layer

53
00:02:14,160 --> 00:02:14,800
which

54
00:02:14,800 --> 00:02:18,239
provides scalability and availability

55
00:02:18,239 --> 00:02:19,680
and this key value still then

56
00:02:19,680 --> 00:02:21,440
communicates over the operating system

57
00:02:21,440 --> 00:02:24,160
and the network with other nodes

58
00:02:24,160 --> 00:02:27,440
but the host and the network are not

59
00:02:27,440 --> 00:02:29,040
necessarily trusted

60
00:02:29,040 --> 00:02:33,440
an attacker can compromise

61
00:02:33,440 --> 00:02:36,640
the network traffic and also tamper with

62
00:02:36,640 --> 00:02:39,280
the protocol execution is that correct

63
00:02:39,280 --> 00:02:40,480
yes for example

64
00:02:40,480 --> 00:02:42,640
it could change the operation which the

65
00:02:42,640 --> 00:02:44,160
network package

66
00:02:44,160 --> 00:02:46,239
shows and therefore compromise the

67
00:02:46,239 --> 00:02:48,319
entire system because it

68
00:02:48,319 --> 00:02:51,200
puts a protocol in a state which is

69
00:02:51,200 --> 00:02:52,239
incorrect

70
00:02:52,239 --> 00:02:55,519
but doesn't pft already solve that uh

71
00:02:55,519 --> 00:02:58,959
so so bft indeed ensures the

72
00:02:58,959 --> 00:03:00,959
protocol execution correctness but it

73
00:03:00,959 --> 00:03:03,840
doesn't provide any confidentiality

74
00:03:03,840 --> 00:03:06,879
and additionally is is very slow

75
00:03:06,879 --> 00:03:09,519
so what about using trusted computing

76
00:03:09,519 --> 00:03:12,879
for design in avocado

77
00:03:12,879 --> 00:03:14,400
at trent and trusted computing are

78
00:03:14,400 --> 00:03:16,480
trusted execution environments

79
00:03:16,480 --> 00:03:18,640
they provide the obstruction of a secure

80
00:03:18,640 --> 00:03:20,720
memory area in which you can put code

81
00:03:20,720 --> 00:03:21,440
and data

82
00:03:21,440 --> 00:03:23,680
which is then even protected against

83
00:03:23,680 --> 00:03:24,720
privileged

84
00:03:24,720 --> 00:03:26,959
adversaries like the operating system or

85
00:03:26,959 --> 00:03:29,200
hypervisors

86
00:03:29,200 --> 00:03:31,280
examples for these systems are into sgx

87
00:03:31,280 --> 00:03:32,720
and trust zone

88
00:03:32,720 --> 00:03:36,080
and amd suv however these systems come

89
00:03:36,080 --> 00:03:37,440
with severe limitations

90
00:03:37,440 --> 00:03:40,239
like limited memory slow io slower the

91
00:03:40,239 --> 00:03:41,120
station

92
00:03:41,120 --> 00:03:43,040
furthermore they trust doesn't extend

93
00:03:43,040 --> 00:03:44,799
over the network which makes them not

94
00:03:44,799 --> 00:03:48,400
very suited for distributed systems

95
00:03:48,400 --> 00:03:51,760
so when we design avocado we identified

96
00:03:51,760 --> 00:03:53,840
three core

97
00:03:53,840 --> 00:03:56,400
challenges the first question we had to

98
00:03:56,400 --> 00:03:56,959
answer

99
00:03:56,959 --> 00:03:59,680
was how to extend the trust to the

100
00:03:59,680 --> 00:04:00,200
network

101
00:04:00,200 --> 00:04:03,840
infrastructure where an attacker can

102
00:04:03,840 --> 00:04:07,360
compromise the network traffic and delay

103
00:04:07,360 --> 00:04:10,560
drop resend

104
00:04:10,560 --> 00:04:14,080
the packets the second question we had

105
00:04:14,080 --> 00:04:17,120
to answer was how to design

106
00:04:17,120 --> 00:04:19,759
a secure replication protocol that

107
00:04:19,759 --> 00:04:20,399
ensures

108
00:04:20,399 --> 00:04:23,520
integrity confidentiality and freshness

109
00:04:23,520 --> 00:04:26,080
in byzantine settings and at the same

110
00:04:26,080 --> 00:04:26,880
time

111
00:04:26,880 --> 00:04:30,080
be performed and lastly

112
00:04:30,080 --> 00:04:33,759
avocado as conventional like

113
00:04:33,759 --> 00:04:36,080
conventional key value stores

114
00:04:36,080 --> 00:04:39,840
should store a large amount

115
00:04:39,840 --> 00:04:43,199
of data and therefore avocado design

116
00:04:43,199 --> 00:04:46,240
should overcome the limitation of the

117
00:04:46,240 --> 00:04:50,720
enclave memory so how avocado handles

118
00:04:50,720 --> 00:04:54,560
all these challenges

119
00:04:54,560 --> 00:04:56,960
let's go back to the first challenge

120
00:04:56,960 --> 00:04:58,840
distributed systems have to

121
00:04:58,840 --> 00:05:01,280
constantly send messages between its

122
00:05:01,280 --> 00:05:02,720
nodes

123
00:05:02,720 --> 00:05:05,039
however these net systems are very

124
00:05:05,039 --> 00:05:06,639
expensive in trusted execution

125
00:05:06,639 --> 00:05:07,600
environments

126
00:05:07,600 --> 00:05:10,800
since the make answers are not trusted

127
00:05:10,800 --> 00:05:11,919
therefore you have to do a lot of

128
00:05:11,919 --> 00:05:15,280
security checks if you do a system call

129
00:05:15,280 --> 00:05:17,520
in and these security checks you have to

130
00:05:17,520 --> 00:05:20,720
do in hardware and software

131
00:05:20,720 --> 00:05:22,960
furthermore you cannot easily map the

132
00:05:22,960 --> 00:05:24,800
nic into the trusted execution

133
00:05:24,800 --> 00:05:25,520
environment

134
00:05:25,520 --> 00:05:28,880
since then then it could leak data

135
00:05:28,880 --> 00:05:31,199
to other nodes or to the operating

136
00:05:31,199 --> 00:05:33,520
system

137
00:05:34,320 --> 00:05:37,600
yeah so that is why in avocado we had to

138
00:05:37,600 --> 00:05:38,320
design

139
00:05:38,320 --> 00:05:42,400
a secure network stack that

140
00:05:42,400 --> 00:05:45,919
relies on erpc and

141
00:05:45,919 --> 00:05:49,360
dbdk and our approach

142
00:05:49,360 --> 00:05:53,280
achieves fast networking avoiding

143
00:05:53,280 --> 00:05:56,559
enclave transitions

144
00:05:58,720 --> 00:06:02,000
so in avocado the network stack is

145
00:06:02,000 --> 00:06:04,720
split into two parts the logic the code

146
00:06:04,720 --> 00:06:06,080
runs inside the enclave

147
00:06:06,080 --> 00:06:09,440
and that it is protected while the

148
00:06:09,440 --> 00:06:10,720
message buffers

149
00:06:10,720 --> 00:06:13,840
reside in the untrusted the host memory

150
00:06:13,840 --> 00:06:16,800
and that optimizes the enclave memory

151
00:06:16,800 --> 00:06:18,319
usage

152
00:06:18,319 --> 00:06:20,639
additionally we have designed a secure

153
00:06:20,639 --> 00:06:22,960
package format that guarantees a

154
00:06:22,960 --> 00:06:26,960
freshness which means that the avocado

155
00:06:26,960 --> 00:06:29,039
can detect

156
00:06:29,039 --> 00:06:32,639
packages that are recent and at the same

157
00:06:32,639 --> 00:06:33,600
time are

158
00:06:33,600 --> 00:06:37,360
stable do you like to explain to us how

159
00:06:37,360 --> 00:06:40,880
this work in detail okay for example if

160
00:06:40,880 --> 00:06:42,319
avocado wants to send a

161
00:06:42,319 --> 00:06:45,280
message from one node to another node we

162
00:06:45,280 --> 00:06:45,680
would

163
00:06:45,680 --> 00:06:47,120
take some message from our avocado

164
00:06:47,120 --> 00:06:48,880
buffer and pass it to the encryption

165
00:06:48,880 --> 00:06:50,240
decryption library

166
00:06:50,240 --> 00:06:53,199
which will create our package format

167
00:06:53,199 --> 00:06:54,800
thereby providing

168
00:06:54,800 --> 00:06:57,599
confidentiality integrity and the recent

169
00:06:57,599 --> 00:06:58,720
guarantees so

170
00:06:58,720 --> 00:07:02,000
recent detection guarantees

171
00:07:02,000 --> 00:07:04,319
this message would then be passed to

172
00:07:04,319 --> 00:07:06,960
erpc which will put it into the host

173
00:07:06,960 --> 00:07:10,160
memory message buffers we use

174
00:07:10,160 --> 00:07:13,440
erpc to provide a transport layer

175
00:07:13,440 --> 00:07:17,120
this udp and dbdk library to

176
00:07:17,120 --> 00:07:21,120
provide a networking layer on ip basis

177
00:07:21,120 --> 00:07:22,880
as mentioned an attacker can easily

178
00:07:22,880 --> 00:07:24,479
tamper with network traffic

179
00:07:24,479 --> 00:07:27,360
and they can also crash stop and restart

180
00:07:27,360 --> 00:07:28,479
nodes

181
00:07:28,479 --> 00:07:31,360
yeah but since behaviors are can also

182
00:07:31,360 --> 00:07:31,919
happen

183
00:07:31,919 --> 00:07:34,319
in conventional distributed systems

184
00:07:34,319 --> 00:07:36,319
because the network is unreliable there

185
00:07:36,319 --> 00:07:37,520
too

186
00:07:37,520 --> 00:07:40,240
yes and that's why avocado does not need

187
00:07:40,240 --> 00:07:41,039
to use an

188
00:07:41,039 --> 00:07:44,080
expensive bfd protocol because we

189
00:07:44,080 --> 00:07:46,400
already secure the network traffic over

190
00:07:46,400 --> 00:07:49,520
our network stack and running the

191
00:07:49,520 --> 00:07:50,080
protocol

192
00:07:50,080 --> 00:07:51,919
inside the te protects the state of the

193
00:07:51,919 --> 00:07:53,840
protocol okay therefore

194
00:07:53,840 --> 00:07:57,280
as long as the implementation is correct

195
00:07:57,280 --> 00:08:00,879
we can deploy a non-byzantine protocol

196
00:08:00,879 --> 00:08:03,440
inside the trust execution environment

197
00:08:03,440 --> 00:08:06,879
targeting an untrusted setting

198
00:08:06,879 --> 00:08:08,639
as long as we have the majority of

199
00:08:08,639 --> 00:08:10,840
non-faulty nodes we can use any

200
00:08:10,840 --> 00:08:12,479
column-based

201
00:08:12,479 --> 00:08:14,639
non-byzantine protocol inside the

202
00:08:14,639 --> 00:08:17,199
enclave to ensure both performance

203
00:08:17,199 --> 00:08:20,639
and security in avocado we use a

204
00:08:20,639 --> 00:08:21,919
multiwriter ibd

205
00:08:21,919 --> 00:08:25,599
protocol for example if a client

206
00:08:25,599 --> 00:08:28,240
issues a get request then the sketch

207
00:08:28,240 --> 00:08:29,520
request would

208
00:08:29,520 --> 00:08:31,360
go to a request coordinator which will

209
00:08:31,360 --> 00:08:32,719
then forward

210
00:08:32,719 --> 00:08:36,320
the request to all replicas the request

211
00:08:36,320 --> 00:08:38,080
coordinator and the replicas will look

212
00:08:38,080 --> 00:08:38,958
up

213
00:08:38,958 --> 00:08:42,080
the value corresponding to the key

214
00:08:42,080 --> 00:08:44,959
and the timestamp and the replicas will

215
00:08:44,959 --> 00:08:46,640
respond with the value and the timestamp

216
00:08:46,640 --> 00:08:48,560
to the request coordinator

217
00:08:48,560 --> 00:08:51,279
the request coordinator will then look

218
00:08:51,279 --> 00:08:51,680
if

219
00:08:51,680 --> 00:08:54,959
the majority of replicas know the value

220
00:08:54,959 --> 00:08:55,440
with the

221
00:08:55,440 --> 00:08:57,839
highest timestamp and if that's the case

222
00:08:57,839 --> 00:08:59,600
it can respond to the

223
00:08:59,600 --> 00:09:03,360
client with a value

224
00:09:03,360 --> 00:09:06,959
however if not the majority knows the

225
00:09:06,959 --> 00:09:09,920
value with the highest timestamp then

226
00:09:09,920 --> 00:09:11,440
the request coordinator has to do a

227
00:09:11,440 --> 00:09:13,279
second broadcast round where it

228
00:09:13,279 --> 00:09:15,440
distributes the timestamp with value and

229
00:09:15,440 --> 00:09:17,120
has to wait until the majority of the

230
00:09:17,120 --> 00:09:18,240
replicas

231
00:09:18,240 --> 00:09:22,000
acknowledge um

232
00:09:22,000 --> 00:09:25,600
that's broadcast lastly

233
00:09:25,600 --> 00:09:28,240
avocado is built on top of sgx however

234
00:09:28,240 --> 00:09:30,640
hgx has a hard

235
00:09:30,640 --> 00:09:33,040
memory limit which is problematic for an

236
00:09:33,040 --> 00:09:34,640
in-memory key value stroke which needs

237
00:09:34,640 --> 00:09:36,399
to store a lot of data

238
00:09:36,399 --> 00:09:39,760
in memory while sgx provides us with a

239
00:09:39,760 --> 00:09:41,200
paging mechanism

240
00:09:41,200 --> 00:09:44,240
to increase our memory area this paging

241
00:09:44,240 --> 00:09:47,040
incurs very high overheads

242
00:09:47,040 --> 00:09:49,760
yes that's why avocado adopts a key

243
00:09:49,760 --> 00:09:52,399
value in memory key value data structure

244
00:09:52,399 --> 00:09:55,839
that optimizes the epc

245
00:09:55,839 --> 00:09:59,680
memory footprint

246
00:10:01,360 --> 00:10:04,959
so avocado adopts and

247
00:10:04,959 --> 00:10:07,680
so avocado dopes and hybrid approach

248
00:10:07,680 --> 00:10:08,240
where

249
00:10:08,240 --> 00:10:12,079
we divide the key and the value space

250
00:10:12,079 --> 00:10:16,079
inside and outside the enclave

251
00:10:16,079 --> 00:10:19,360
memory in particular keys are stored

252
00:10:19,360 --> 00:10:21,680
inside the enclave memory in order to

253
00:10:21,680 --> 00:10:22,240
achieve

254
00:10:22,240 --> 00:10:25,440
fast lookups while the values reside

255
00:10:25,440 --> 00:10:28,720
in the in and encrypted in the host

256
00:10:28,720 --> 00:10:30,160
memory

257
00:10:30,160 --> 00:10:34,079
the node inside the enclave memory is

258
00:10:34,079 --> 00:10:35,360
consists of a key

259
00:10:35,360 --> 00:10:38,000
and a pointer to the metadata structure

260
00:10:38,000 --> 00:10:39,760
the metadata structure

261
00:10:39,760 --> 00:10:42,399
which is also placed inside the enclave

262
00:10:42,399 --> 00:10:43,519
is comprised

263
00:10:43,519 --> 00:10:46,160
by a mac which is used for integrity

264
00:10:46,160 --> 00:10:46,880
checks

265
00:10:46,880 --> 00:10:49,839
a value size the logical clock or

266
00:10:49,839 --> 00:10:50,880
timestamp

267
00:10:50,880 --> 00:10:53,040
and the pointer which points to the host

268
00:10:53,040 --> 00:10:54,720
memory where the encrypt

269
00:10:54,720 --> 00:10:58,320
values are stored and the overall design

270
00:10:58,320 --> 00:11:03,760
achieves to minimize the epc pressure

271
00:11:04,320 --> 00:11:05,839
when we are putting all these components

272
00:11:05,839 --> 00:11:07,200
together we arrive at the following

273
00:11:07,200 --> 00:11:08,560
system design

274
00:11:08,560 --> 00:11:10,240
first we have a configuration data

275
00:11:10,240 --> 00:11:12,480
station service for fast authentication

276
00:11:12,480 --> 00:11:15,760
of our nodes we haven't shown it in this

277
00:11:15,760 --> 00:11:17,920
presentation but you can't find it in

278
00:11:17,920 --> 00:11:19,680
the paper

279
00:11:19,680 --> 00:11:21,519
then we have the replication layer which

280
00:11:21,519 --> 00:11:22,959
together with the networking layer

281
00:11:22,959 --> 00:11:24,800
provides a secure

282
00:11:24,800 --> 00:11:27,760
replication with non-byzantine protocols

283
00:11:27,760 --> 00:11:29,519
over multiple nodes

284
00:11:29,519 --> 00:11:32,240
and we have a key value store which is

285
00:11:32,240 --> 00:11:33,279
optimized

286
00:11:33,279 --> 00:11:36,959
for enclaves to avoid paging behavior

287
00:11:36,959 --> 00:11:39,600
we can then replicate these design over

288
00:11:39,600 --> 00:11:40,560
multiple nodes

289
00:11:40,560 --> 00:11:44,640
to have our just to have avocado

290
00:11:45,680 --> 00:11:47,920
so in the evaluation maurice and i were

291
00:11:47,920 --> 00:11:49,360
interested in two

292
00:11:49,360 --> 00:11:51,600
crucial questions what is the overall

293
00:11:51,600 --> 00:11:54,160
performance of avocado compared to bifty

294
00:11:54,160 --> 00:11:57,040
and how while does avocado scale with an

295
00:11:57,040 --> 00:11:58,639
increase in number of nodes

296
00:11:58,639 --> 00:12:01,760
in the paper we also present some more

297
00:12:01,760 --> 00:12:05,200
experiments regarding the network stack

298
00:12:05,200 --> 00:12:07,839
um the single key value store and also

299
00:12:07,839 --> 00:12:09,440
the configuration and the station

300
00:12:09,440 --> 00:12:11,839
service

301
00:12:12,240 --> 00:12:14,399
okay let's look at the overall

302
00:12:14,399 --> 00:12:16,079
performance

303
00:12:16,079 --> 00:12:19,279
in this craft we have plotted avocado

304
00:12:19,279 --> 00:12:22,639
in an anti-kill setting so avocado

305
00:12:22,639 --> 00:12:24,000
doesn't provide any security

306
00:12:24,000 --> 00:12:27,440
that is red bar against avocado being

307
00:12:27,440 --> 00:12:28,000
fully

308
00:12:28,000 --> 00:12:30,000
secure in a trusted environment the

309
00:12:30,000 --> 00:12:31,360
green bar

310
00:12:31,360 --> 00:12:35,519
and against bft smart as a

311
00:12:35,519 --> 00:12:38,000
state-of-the-art version of bft in the

312
00:12:38,000 --> 00:12:40,240
blue bar

313
00:12:40,240 --> 00:12:41,920
what we can see is that avocado

314
00:12:41,920 --> 00:12:45,040
outperforms bft in all settings and that

315
00:12:45,040 --> 00:12:48,079
avocado is

316
00:12:48,560 --> 00:12:50,800
high performance in read and write heavy

317
00:12:50,800 --> 00:12:53,839
load workloads

318
00:12:54,160 --> 00:12:56,720
we also see that avocado suffers a two

319
00:12:56,720 --> 00:12:57,920
times overhead

320
00:12:57,920 --> 00:13:00,480
between and secure and unsecured version

321
00:13:00,480 --> 00:13:02,800
of it

322
00:13:03,519 --> 00:13:06,880
so a avocado scales well with a number

323
00:13:06,880 --> 00:13:07,600
of

324
00:13:07,600 --> 00:13:10,079
nodes in the plot we measure the

325
00:13:10,079 --> 00:13:11,680
throughput the kilo operations per

326
00:13:11,680 --> 00:13:13,680
second of both secure

327
00:13:13,680 --> 00:13:16,880
and native executions of the system and

328
00:13:16,880 --> 00:13:20,079
in general we can see that the overheads

329
00:13:20,079 --> 00:13:23,200
of security are approximately

330
00:13:23,200 --> 00:13:27,600
two times compared to native execution

331
00:13:28,399 --> 00:13:30,560
to sign up in this talk we presented

332
00:13:30,560 --> 00:13:32,800
avocado a secure in-memory distributed

333
00:13:32,800 --> 00:13:34,399
storage system

334
00:13:34,399 --> 00:13:36,959
which provides strong security

335
00:13:36,959 --> 00:13:37,920
guarantees

336
00:13:37,920 --> 00:13:40,720
that is confidentiality integrity and

337
00:13:40,720 --> 00:13:43,040
freshness

338
00:13:43,040 --> 00:13:44,880
and we answered the question how can we

339
00:13:44,880 --> 00:13:47,680
leverage a dee to design

340
00:13:47,680 --> 00:13:49,279
high performance secure and for

341
00:13:49,279 --> 00:13:52,399
tolerance very strong

342
00:13:52,399 --> 00:13:54,959
the paper contributions are a secure

343
00:13:54,959 --> 00:13:57,040
network stack a trusted secure network

344
00:13:57,040 --> 00:13:59,279
stack a trusted replication protocol

345
00:13:59,279 --> 00:14:02,160
a trusted in-memory key value store and

346
00:14:02,160 --> 00:14:04,320
lastly configuration and attestation

347
00:14:04,320 --> 00:14:04,959
service

348
00:14:04,959 --> 00:14:06,959
which is not covering the presentation

349
00:14:06,959 --> 00:14:09,040
but you can see the paper for more

350
00:14:09,040 --> 00:14:11,599
details

351
00:14:13,279 --> 00:14:17,279
thank you if you have any questions

352
00:14:17,279 --> 00:14:17,920
please

353
00:14:17,920 --> 00:14:28,959
contact us

