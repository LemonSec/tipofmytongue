1
00:00:08,639 --> 00:00:09,679
hello everyone

2
00:00:09,679 --> 00:00:12,080
it is my great pleasure to present our

3
00:00:12,080 --> 00:00:13,599
recent research

4
00:00:13,599 --> 00:00:16,239
on detecting memory leaks in operating

5
00:00:16,239 --> 00:00:17,920
system kernels

6
00:00:17,920 --> 00:00:20,880
my name is and i'm from the university

7
00:00:20,880 --> 00:00:21,920
of georgia

8
00:00:21,920 --> 00:00:25,199
now let's start as we know

9
00:00:25,199 --> 00:00:27,840
memory leaks are a common class of

10
00:00:27,840 --> 00:00:30,080
memory management bugs

11
00:00:30,080 --> 00:00:32,800
a memory leak intrigued when a

12
00:00:32,800 --> 00:00:35,440
dynamically allocated memory object

13
00:00:35,440 --> 00:00:38,879
is not freed after its usage since the

14
00:00:38,879 --> 00:00:40,640
leaked memory objects

15
00:00:40,640 --> 00:00:42,960
still occupy the valuable memory

16
00:00:42,960 --> 00:00:44,800
resource in the system

17
00:00:44,800 --> 00:00:47,600
memory leaks can cause serious system

18
00:00:47,600 --> 00:00:48,719
problems

19
00:00:48,719 --> 00:00:51,840
especially in critical software systems

20
00:00:51,840 --> 00:00:54,640
for example the leaked memory objects

21
00:00:54,640 --> 00:00:56,000
can reduce

22
00:00:56,000 --> 00:00:58,000
the memory resource available for

23
00:00:58,000 --> 00:01:00,079
useable application

24
00:01:00,079 --> 00:01:02,079
this can lead to significant influence

25
00:01:02,079 --> 00:01:05,119
on system response time and throughput

26
00:01:05,119 --> 00:01:08,479
once the memory resource exhausted

27
00:01:08,479 --> 00:01:11,119
the system had to be rebooted to for

28
00:01:11,119 --> 00:01:12,159
better efficiency

29
00:01:12,159 --> 00:01:15,439
and reliability also memory leaks can be

30
00:01:15,439 --> 00:01:16,320
leveraged

31
00:01:16,320 --> 00:01:19,040
to launch security attacks this has been

32
00:01:19,040 --> 00:01:20,240
demonstrated by

33
00:01:20,240 --> 00:01:23,920
vulnerabilities listed in cve therefore

34
00:01:23,920 --> 00:01:27,200
it is important to detect and fix memory

35
00:01:27,200 --> 00:01:27,920
leak bags

36
00:01:27,920 --> 00:01:31,280
in software systems to this end

37
00:01:31,280 --> 00:01:33,600
many memory leak detectors have been

38
00:01:33,600 --> 00:01:34,560
developed

39
00:01:34,560 --> 00:01:36,880
for example address sanitizer can detect

40
00:01:36,880 --> 00:01:38,079
a broad range of

41
00:01:38,079 --> 00:01:40,240
memory safety errors including memory

42
00:01:40,240 --> 00:01:42,159
leaks by incrementing

43
00:01:42,159 --> 00:01:43,600
programming source code at the

44
00:01:43,600 --> 00:01:45,520
compilation time

45
00:01:45,520 --> 00:01:47,520
another example is memcheck which is

46
00:01:47,520 --> 00:01:49,200
based on the binary entrepreneurial

47
00:01:49,200 --> 00:01:51,200
framework web green

48
00:01:51,200 --> 00:01:53,200
without the requirement of programming

49
00:01:53,200 --> 00:01:55,040
source code

50
00:01:55,040 --> 00:01:58,000
besides the linux kernel has a memory

51
00:01:58,000 --> 00:01:59,119
leak detector

52
00:01:59,119 --> 00:02:01,600
which uses a cabinet collection-based

53
00:02:01,600 --> 00:02:02,320
algorithm

54
00:02:02,320 --> 00:02:05,280
to detect the memory leaks in addition

55
00:02:05,280 --> 00:02:06,560
to this detector

56
00:02:06,560 --> 00:02:08,479
there are many other memory detection

57
00:02:08,479 --> 00:02:10,800
techniques and tools

58
00:02:10,800 --> 00:02:14,080
however even with this detector it is

59
00:02:14,080 --> 00:02:14,800
still quite

60
00:02:14,800 --> 00:02:17,200
challenging to detect memory leaks in

61
00:02:17,200 --> 00:02:18,879
operating system kernels

62
00:02:18,879 --> 00:02:21,599
which are a fundamental class of system

63
00:02:21,599 --> 00:02:23,040
software

64
00:02:23,040 --> 00:02:25,599
for example the linux kernel memory leak

65
00:02:25,599 --> 00:02:26,879
detector

66
00:02:26,879 --> 00:02:29,599
is a dynamic detection tool and

67
00:02:29,599 --> 00:02:31,040
inevitably

68
00:02:31,040 --> 00:02:34,560
has a well-known coverage issue

69
00:02:34,560 --> 00:02:36,480
that is it cannot detect the memory

70
00:02:36,480 --> 00:02:38,160
leaks in the kernel code

71
00:02:38,160 --> 00:02:40,959
that is not executed or tested at the

72
00:02:40,959 --> 00:02:42,640
runtime

73
00:02:42,640 --> 00:02:45,680
on the other side existing static memory

74
00:02:45,680 --> 00:02:47,680
leak detection techniques

75
00:02:47,680 --> 00:02:49,680
are many developed for user level

76
00:02:49,680 --> 00:02:51,120
applications

77
00:02:51,120 --> 00:02:54,239
it is not easy to apply them directly to

78
00:02:54,239 --> 00:02:56,000
operating system kernels

79
00:02:56,000 --> 00:02:58,800
due to the inherent complexity of

80
00:02:58,800 --> 00:03:00,800
operating system kernels

81
00:03:00,800 --> 00:03:02,959
for example the linux kernel has more

82
00:03:02,959 --> 00:03:04,159
than 25

83
00:03:04,159 --> 00:03:06,560
million source code lines with several

84
00:03:06,560 --> 00:03:07,280
hundred

85
00:03:07,280 --> 00:03:11,920
source lines added or updated every hour

86
00:03:11,920 --> 00:03:13,920
this makes it difficult for static

87
00:03:13,920 --> 00:03:15,200
detection techniques

88
00:03:15,200 --> 00:03:17,519
to complete the detection of memory

89
00:03:17,519 --> 00:03:18,640
leaks for the

90
00:03:18,640 --> 00:03:22,480
entire kernel within acceptable time

91
00:03:22,480 --> 00:03:24,159
therefore it would be desirable to

92
00:03:24,159 --> 00:03:25,760
develop an effective and

93
00:03:25,760 --> 00:03:28,879
scalable static memory detector for

94
00:03:28,879 --> 00:03:31,840
operating system kernels

95
00:03:31,840 --> 00:03:35,040
this work we focus on memory leaks

96
00:03:35,040 --> 00:03:38,319
on an early exit path

97
00:03:38,319 --> 00:03:40,879
this is inspired by the observation that

98
00:03:40,879 --> 00:03:42,799
software bugs often look in

99
00:03:42,799 --> 00:03:46,000
really tested program paths now let's

100
00:03:46,000 --> 00:03:47,200
see what is

101
00:03:47,200 --> 00:03:50,879
an early exit pass in general

102
00:03:50,879 --> 00:03:52,480
our operating system kernel need to

103
00:03:52,480 --> 00:03:54,239
handle various

104
00:03:54,239 --> 00:03:57,680
expected and unexpected season states

105
00:03:57,680 --> 00:04:00,879
during the execution of a kernel routine

106
00:04:00,879 --> 00:04:03,680
it is often necessary to exit from the

107
00:04:03,680 --> 00:04:04,239
routine

108
00:04:04,239 --> 00:04:06,319
without executing the following code

109
00:04:06,319 --> 00:04:07,760
because for example

110
00:04:07,760 --> 00:04:11,519
a specific system stat is encountered

111
00:04:11,519 --> 00:04:14,080
this is usually achieved by composing

112
00:04:14,080 --> 00:04:16,079
early exit paths

113
00:04:16,079 --> 00:04:18,639
that is to say early exit paths are

114
00:04:18,639 --> 00:04:19,918
designed to exit

115
00:04:19,918 --> 00:04:23,040
from kernel routine as soon as possible

116
00:04:23,040 --> 00:04:25,759
as shown in the example on this slide

117
00:04:25,759 --> 00:04:26,960
the source code line

118
00:04:26,960 --> 00:04:30,000
from 5 to 9 from an early exit

119
00:04:30,000 --> 00:04:34,560
pass in fact exception or error handlers

120
00:04:34,560 --> 00:04:37,919
are common examples of early exit paths

121
00:04:37,919 --> 00:04:40,560
but our study finds that early exit

122
00:04:40,560 --> 00:04:41,040
paths

123
00:04:41,040 --> 00:04:43,759
are also used for many other purposes in

124
00:04:43,759 --> 00:04:44,880
operating system

125
00:04:44,880 --> 00:04:47,759
kernels for example bypassing irrelevant

126
00:04:47,759 --> 00:04:48,800
kernel stats

127
00:04:48,800 --> 00:04:51,680
and extending kernel functionalities

128
00:04:51,680 --> 00:04:53,199
moreover

129
00:04:53,199 --> 00:04:55,919
some actual code often need to be

130
00:04:55,919 --> 00:04:56,960
executed

131
00:04:56,960 --> 00:04:59,919
before a kernel routine is executed from

132
00:04:59,919 --> 00:05:00,160
an

133
00:05:00,160 --> 00:05:03,199
early exit pass like in this example

134
00:05:03,199 --> 00:05:05,759
a lock is released and a memory object

135
00:05:05,759 --> 00:05:06,880
is delocated

136
00:05:06,880 --> 00:05:10,320
on the early exit path therefore if an

137
00:05:10,320 --> 00:05:12,479
early exit path is created

138
00:05:12,479 --> 00:05:15,199
without the required work software

139
00:05:15,199 --> 00:05:16,320
software bugs

140
00:05:16,320 --> 00:05:19,520
will be introduced in particular

141
00:05:19,520 --> 00:05:21,759
if a memory deal location is required

142
00:05:21,759 --> 00:05:22,960
but missed

143
00:05:22,960 --> 00:05:25,759
on early exit pass a memory leak will be

144
00:05:25,759 --> 00:05:27,680
constituted

145
00:05:27,680 --> 00:05:29,840
based on this observation we developed

146
00:05:29,840 --> 00:05:31,039
mre

147
00:05:31,039 --> 00:05:33,840
aesthetic memory leak detector to find

148
00:05:33,840 --> 00:05:34,720
the memory leaks

149
00:05:34,720 --> 00:05:39,199
on early exit paths the idea of mre

150
00:05:39,199 --> 00:05:42,240
is inspired by our study of early exit

151
00:05:42,240 --> 00:05:42,800
paths

152
00:05:42,800 --> 00:05:46,400
in operating system kernels specifically

153
00:05:46,400 --> 00:05:47,600
we found that

154
00:05:47,600 --> 00:05:50,320
the inconsistencies of memory

155
00:05:50,320 --> 00:05:51,759
de-allocations

156
00:05:51,759 --> 00:05:54,320
showing up on different early exit paths

157
00:05:54,320 --> 00:05:55,600
and normal paths

158
00:05:55,600 --> 00:05:59,039
usually indicate potential memory leaks

159
00:05:59,039 --> 00:06:01,120
therefore it is possible to detect the

160
00:06:01,120 --> 00:06:03,600
memory leaks on early exit paths

161
00:06:03,600 --> 00:06:06,720
by cross-checking the presence of memory

162
00:06:06,720 --> 00:06:08,000
de-allocation

163
00:06:08,000 --> 00:06:10,160
on different early exit paths and normal

164
00:06:10,160 --> 00:06:11,199
paths

165
00:06:11,199 --> 00:06:13,840
this is the high-level idea and approach

166
00:06:13,840 --> 00:06:15,520
of mre

167
00:06:15,520 --> 00:06:18,960
now let's see how mre works

168
00:06:18,960 --> 00:06:21,840
mre takes the input the rvm ir of the

169
00:06:21,840 --> 00:06:23,520
target kernel

170
00:06:23,520 --> 00:06:25,919
and reports the memory leaks detected on

171
00:06:25,919 --> 00:06:27,919
early exit pass

172
00:06:27,919 --> 00:06:31,840
the first step of mre is to identify

173
00:06:31,840 --> 00:06:35,039
early exit paths in a targeted kernel

174
00:06:35,039 --> 00:06:37,520
this is done by analyzing conditional

175
00:06:37,520 --> 00:06:38,240
branches

176
00:06:38,240 --> 00:06:41,440
in each kernel routine next

177
00:06:41,440 --> 00:06:44,319
mre collects memory allocation in the

178
00:06:44,319 --> 00:06:46,639
same kernel routine as the identified

179
00:06:46,639 --> 00:06:47,039
early

180
00:06:47,039 --> 00:06:50,160
access path and it checks whether there

181
00:06:50,160 --> 00:06:50,560
is

182
00:06:50,560 --> 00:06:54,160
any memory deallocation that is missed

183
00:06:54,160 --> 00:06:57,680
on early access pass that is the memory

184
00:06:57,680 --> 00:06:58,720
object

185
00:06:58,720 --> 00:07:01,280
freed by the memory allocation is not

186
00:07:01,280 --> 00:07:04,319
freed on the early exit pass

187
00:07:04,319 --> 00:07:07,759
if such a misdeal located in the firm

188
00:07:07,759 --> 00:07:10,960
mre further analyzes the misdeal

189
00:07:10,960 --> 00:07:11,759
location

190
00:07:11,759 --> 00:07:15,120
and the corresponding early exit pass

191
00:07:15,120 --> 00:07:17,440
to determine whether the missed deal

192
00:07:17,440 --> 00:07:19,280
location should show up on the early

193
00:07:19,280 --> 00:07:20,720
access pass

194
00:07:20,720 --> 00:07:23,440
if yes a potential memory leak will be

195
00:07:23,440 --> 00:07:24,560
reported

196
00:07:24,560 --> 00:07:26,240
after manual investigation we can

197
00:07:26,240 --> 00:07:28,880
confirm the back

198
00:07:28,880 --> 00:07:32,319
to put the mre into practice we need to

199
00:07:32,319 --> 00:07:35,120
address two technical challenges

200
00:07:35,120 --> 00:07:37,840
the first challenge is how to identify

201
00:07:37,840 --> 00:07:40,080
early exit paths

202
00:07:40,080 --> 00:07:43,440
given the diverse semantics and usage

203
00:07:43,440 --> 00:07:44,240
scenarios

204
00:07:44,240 --> 00:07:46,960
of early exit paths it is quite

205
00:07:46,960 --> 00:07:49,440
difficult to precisely identify early

206
00:07:49,440 --> 00:07:52,240
exit paths in operating system kernels

207
00:07:52,240 --> 00:07:55,280
to address this challenge we manually

208
00:07:55,280 --> 00:07:56,080
studied

209
00:07:56,080 --> 00:07:59,280
the structures and semantics of many

210
00:07:59,280 --> 00:08:00,960
different early access paths

211
00:08:00,960 --> 00:08:03,039
in real operational kernels such as

212
00:08:03,039 --> 00:08:04,479
linux

213
00:08:04,479 --> 00:08:07,520
through this study we find out that the

214
00:08:07,520 --> 00:08:08,080
key

215
00:08:08,080 --> 00:08:11,360
to identify an early exit path is to

216
00:08:11,360 --> 00:08:12,240
identify

217
00:08:12,240 --> 00:08:15,440
the unique program statements that can

218
00:08:15,440 --> 00:08:17,039
distinguish

219
00:08:17,039 --> 00:08:19,120
these early exit paths from other

220
00:08:19,120 --> 00:08:20,080
program paths

221
00:08:20,080 --> 00:08:23,520
in the same canopy moreover

222
00:08:23,520 --> 00:08:25,919
these segments usually start from a

223
00:08:25,919 --> 00:08:26,800
particular

224
00:08:26,800 --> 00:08:29,680
conditional branch we call such a branch

225
00:08:29,680 --> 00:08:30,000
an

226
00:08:30,000 --> 00:08:33,279
early exit branch therefore by

227
00:08:33,279 --> 00:08:35,839
identifying early exit branch in kernel

228
00:08:35,839 --> 00:08:36,719
routine

229
00:08:36,719 --> 00:08:40,399
mre can identify early exit paths

230
00:08:40,399 --> 00:08:42,719
more detail about how to identify early

231
00:08:42,719 --> 00:08:43,919
exit branch

232
00:08:43,919 --> 00:08:46,959
can be found in our paper

233
00:08:46,959 --> 00:08:49,440
the second challenge is how to analyze

234
00:08:49,440 --> 00:08:51,360
memory delocation

235
00:08:51,360 --> 00:08:53,519
specifically a missed memory gear

236
00:08:53,519 --> 00:08:54,959
location maybe not

237
00:08:54,959 --> 00:08:58,320
needed on exit pass

238
00:08:58,320 --> 00:09:00,000
there are many potential reasons for

239
00:09:00,000 --> 00:09:01,360
this for example

240
00:09:01,360 --> 00:09:04,640
the memory object freed by the missed

241
00:09:04,640 --> 00:09:07,600
memory the allocation may be embedded on

242
00:09:07,600 --> 00:09:09,519
the early access path

243
00:09:09,519 --> 00:09:12,320
therefore it is not appropriate to free

244
00:09:12,320 --> 00:09:13,600
it

245
00:09:13,600 --> 00:09:16,720
to address this challenge mre creates

246
00:09:16,720 --> 00:09:19,760
several static analysis to ensure that

247
00:09:19,760 --> 00:09:23,440
the memory object to be freed is live

248
00:09:23,440 --> 00:09:26,399
varied and not used on the early exit

249
00:09:26,399 --> 00:09:28,160
path

250
00:09:28,160 --> 00:09:31,600
besides mre also heuristically

251
00:09:31,600 --> 00:09:34,320
enforce whether the misdeal location is

252
00:09:34,320 --> 00:09:35,200
necessary

253
00:09:35,200 --> 00:09:38,880
on the early exit path this way

254
00:09:38,880 --> 00:09:42,399
mre can detect memory leaks by analyzing

255
00:09:42,399 --> 00:09:45,680
missed memory deal locations

256
00:09:45,680 --> 00:09:49,360
we have implemented mre as rrvm2

257
00:09:49,360 --> 00:09:51,600
with multiple analysis passing the

258
00:09:51,600 --> 00:09:53,360
version of the rvm is

259
00:09:53,360 --> 00:09:57,360
8.0 to evaluate the effectiveness

260
00:09:57,360 --> 00:10:01,440
of mre we applied to the linux kernel

261
00:10:01,440 --> 00:10:05,120
version 5.0 we compare the linear kernel

262
00:10:05,120 --> 00:10:07,600
to rvmir with the oes option

263
00:10:07,600 --> 00:10:11,920
and feed mre with the compiled ir

264
00:10:11,920 --> 00:10:14,560
eventually mre finishes the detection

265
00:10:14,560 --> 00:10:15,279
process

266
00:10:15,279 --> 00:10:17,200
for the entire linux kernel in around

267
00:10:17,200 --> 00:10:18,399
half an hour

268
00:10:18,399 --> 00:10:20,000
this shows the efficiency and

269
00:10:20,000 --> 00:10:22,240
scalability of the analysis

270
00:10:22,240 --> 00:10:25,920
in mre next let's see some analysis

271
00:10:25,920 --> 00:10:29,120
results this table

272
00:10:29,120 --> 00:10:32,079
shows some statistics of the analysis

273
00:10:32,079 --> 00:10:33,680
results

274
00:10:33,680 --> 00:10:35,760
actually in this table there are more

275
00:10:35,760 --> 00:10:37,279
than seven thousand

276
00:10:37,279 --> 00:10:41,120
canadians that have both early exit pass

277
00:10:41,120 --> 00:10:43,600
and memory de-allocation this

278
00:10:43,600 --> 00:10:44,720
demonstrates that

279
00:10:44,720 --> 00:10:46,480
it is very likely to have memory

280
00:10:46,480 --> 00:10:47,920
management operation

281
00:10:47,920 --> 00:10:51,279
on early exit pass after the analysis

282
00:10:51,279 --> 00:10:55,440
mre reports 126 suspicious early exit

283
00:10:55,440 --> 00:10:56,160
branch

284
00:10:56,160 --> 00:10:59,519
with missed memory allocation this

285
00:10:59,519 --> 00:11:01,920
early exit branches are located in

286
00:11:01,920 --> 00:11:04,000
different kernel modules

287
00:11:04,000 --> 00:11:06,079
with further menu analysis and

288
00:11:06,079 --> 00:11:07,200
investigation

289
00:11:07,200 --> 00:11:11,600
we can finally confirm memory packs

290
00:11:11,600 --> 00:11:14,320
on average it took around three to five

291
00:11:14,320 --> 00:11:15,120
minutes

292
00:11:15,120 --> 00:11:18,079
to manually analyze one suspicious early

293
00:11:18,079 --> 00:11:20,079
exit branch

294
00:11:20,079 --> 00:11:23,440
finally we confirm 120

295
00:11:23,440 --> 00:11:27,040
new memory leaks related to 103

296
00:11:27,040 --> 00:11:30,560
reported early exit branch the reason we

297
00:11:30,560 --> 00:11:32,000
have more memory leaks

298
00:11:32,000 --> 00:11:35,200
than early exit branch is because one

299
00:11:35,200 --> 00:11:37,360
early exit branch may have multiple

300
00:11:37,360 --> 00:11:37,839
missed

301
00:11:37,839 --> 00:11:41,040
the allocations among the conformed

302
00:11:41,040 --> 00:11:44,720
bugs 103 bugs have been fixed using

303
00:11:44,720 --> 00:11:45,760
either arrow patch

304
00:11:45,760 --> 00:11:49,040
or other patch this

305
00:11:49,040 --> 00:11:52,480
shows the capability of mre to find the

306
00:11:52,480 --> 00:11:53,440
memory leaks

307
00:11:53,440 --> 00:11:56,800
in real world operating system kernels

308
00:11:56,800 --> 00:11:59,760
we also studied the kernel module from

309
00:11:59,760 --> 00:12:00,160
which

310
00:12:00,160 --> 00:12:03,040
the memory leaks are discovered issued

311
00:12:03,040 --> 00:12:04,720
in the table on the right side

312
00:12:04,720 --> 00:12:07,519
around 60 of memory leaks are found in

313
00:12:07,519 --> 00:12:09,519
drivers

314
00:12:09,519 --> 00:12:12,480
this implies that drivers are the one of

315
00:12:12,480 --> 00:12:13,040
the most

316
00:12:13,040 --> 00:12:16,079
buggy module in the kernel at the same

317
00:12:16,079 --> 00:12:16,880
time

318
00:12:16,880 --> 00:12:19,519
this also shows that non-driver kernel

319
00:12:19,519 --> 00:12:20,240
modules

320
00:12:20,240 --> 00:12:23,839
also suffer from memory

321
00:12:23,839 --> 00:12:26,320
this slide shows a real memory leak back

322
00:12:26,320 --> 00:12:27,600
found by mre

323
00:12:27,600 --> 00:12:30,880
in the real kernel in this part there is

324
00:12:30,880 --> 00:12:31,120
an

325
00:12:31,120 --> 00:12:34,079
early exit path formed by the if

326
00:12:34,079 --> 00:12:37,440
sediment from line six to line nine

327
00:12:37,440 --> 00:12:40,240
on this early exit path the memory

328
00:12:40,240 --> 00:12:40,800
object

329
00:12:40,800 --> 00:12:43,920
rss map pointed to in the ir

330
00:12:43,920 --> 00:12:47,440
qp is not freed and thus lead to a

331
00:12:47,440 --> 00:12:51,440
memory leak mre successfully detects

332
00:12:51,440 --> 00:12:52,560
this leak

333
00:12:52,560 --> 00:12:55,600
by reporting the memory dislocation line

334
00:12:55,600 --> 00:12:56,160
11

335
00:12:56,160 --> 00:12:59,200
is missed on the early exit path

336
00:12:59,200 --> 00:13:01,040
this bug has been fixed in the lattice

337
00:13:01,040 --> 00:13:03,920
limits kernel

338
00:13:04,079 --> 00:13:07,120
as aesthetic memory leak detector

339
00:13:07,120 --> 00:13:10,320
mre also has some limitations

340
00:13:10,320 --> 00:13:14,639
first mre may have false negatives

341
00:13:14,639 --> 00:13:17,600
at least many focuses on memory leaks

342
00:13:17,600 --> 00:13:19,200
related to early exit

343
00:13:19,200 --> 00:13:22,240
pass second

344
00:13:22,240 --> 00:13:26,399
mre may also report false positives

345
00:13:26,399 --> 00:13:29,760
for example a memory allocation meets

346
00:13:29,760 --> 00:13:32,959
an early exit pass may be invoked

347
00:13:32,959 --> 00:13:35,600
in a callback routine or by another

348
00:13:35,600 --> 00:13:36,399
kernel

349
00:13:36,399 --> 00:13:39,600
thread more accurate

350
00:13:39,600 --> 00:13:42,079
and semantic-based aesthetic analysis

351
00:13:42,079 --> 00:13:43,120
are required

352
00:13:43,120 --> 00:13:46,800
to eliminate these false positives

353
00:13:46,800 --> 00:13:51,279
we leave this as part of our future work

354
00:13:51,680 --> 00:13:54,800
to summarize memory leaks in

355
00:13:54,800 --> 00:13:57,440
critical system software can cause

356
00:13:57,440 --> 00:13:58,079
serious

357
00:13:58,079 --> 00:14:01,199
performance reliability and security

358
00:14:01,199 --> 00:14:02,639
issues

359
00:14:02,639 --> 00:14:06,240
in this work we present a static memory

360
00:14:06,240 --> 00:14:07,920
leak detector

361
00:14:07,920 --> 00:14:11,199
called mre to detect the memory leaks

362
00:14:11,199 --> 00:14:14,639
in operating system kernels

363
00:14:14,639 --> 00:14:17,360
mre focuses on memory leaks on early

364
00:14:17,360 --> 00:14:18,800
exit paths

365
00:14:18,800 --> 00:14:23,199
they are often rarely tested in practice

366
00:14:23,199 --> 00:14:26,480
after applying mre to the linux kernel

367
00:14:26,480 --> 00:14:30,959
we found 120 memory leak box

368
00:14:30,959 --> 00:14:33,440
and most of these packs have been fixed

369
00:14:33,440 --> 00:14:34,320
in the lattice

370
00:14:34,320 --> 00:14:37,440
linux kernel we believe

371
00:14:37,440 --> 00:14:41,040
with more tools like mre more memory

372
00:14:41,040 --> 00:14:41,519
leaks

373
00:14:41,519 --> 00:14:44,880
can be found and fixed in critical

374
00:14:44,880 --> 00:14:46,959
system software

375
00:14:46,959 --> 00:14:49,360
this is my talk thanks for your

376
00:14:49,360 --> 00:14:50,560
attention

377
00:14:50,560 --> 00:14:59,839
and i would be happy to take questions

378
00:15:00,800 --> 00:15:02,880
you

