1
00:00:10,250 --> 00:00:14,480
great so yes sir thank you very much

2
00:00:12,570 --> 00:00:16,560
everybody for for coming to my talk and

3
00:00:14,480 --> 00:00:18,630
thanks very much to the organizers for

4
00:00:16,560 --> 00:00:22,710
the for the invitation it's very

5
00:00:18,630 --> 00:00:27,409
exciting for me to be here this is joint

6
00:00:22,710 --> 00:00:31,500
work with Nathan Chong Tyler Sorenson

7
00:00:27,410 --> 00:00:34,680
the talk will have four parts the first

8
00:00:31,500 --> 00:00:37,410
part explaining what is week memory

9
00:00:34,680 --> 00:00:40,350
second part explaining what are

10
00:00:37,410 --> 00:00:42,898
transactions third part is explaining

11
00:00:40,350 --> 00:00:45,000
how we devise a model that explains how

12
00:00:42,899 --> 00:00:52,500
transactions in week memory work

13
00:00:45,000 --> 00:00:55,140
together in x86 power arm and the C++

14
00:00:52,500 --> 00:00:56,699
language and the fourth part will be

15
00:00:55,140 --> 00:01:00,059
explaining that when you combine

16
00:00:56,699 --> 00:01:04,769
transactions in week memory in the ARM

17
00:01:00,059 --> 00:01:08,280
architecture then there be dragons okay

18
00:01:04,769 --> 00:01:10,320
so to begin so weak memory to explain

19
00:01:08,280 --> 00:01:13,710
weak memory I want to show you a tiny

20
00:01:10,320 --> 00:01:15,720
little concurrent program imagine I have

21
00:01:13,710 --> 00:01:17,850
two shared locations x and y both

22
00:01:15,720 --> 00:01:20,220
initially 0 and i have two threads on

23
00:01:17,850 --> 00:01:22,860
the left-hand thread I'm putting a 1

24
00:01:20,220 --> 00:01:24,539
into X and then reading from Y and in

25
00:01:22,860 --> 00:01:27,600
the right-hand thread I'm putting a 1

26
00:01:24,540 --> 00:01:30,030
into y and then reading from X so what

27
00:01:27,600 --> 00:01:31,380
can happen when I run this program well

28
00:01:30,030 --> 00:01:33,480
to answer that question you might start

29
00:01:31,380 --> 00:01:34,979
trying to imagine all of the possible

30
00:01:33,480 --> 00:01:37,770
interleavings that you could have these

31
00:01:34,980 --> 00:01:41,880
four instructions so one possibility is

32
00:01:37,770 --> 00:01:43,740
that x and y the stores happen first and

33
00:01:41,880 --> 00:01:47,220
then the loads if that happens then you

34
00:01:43,740 --> 00:01:49,530
end up with if that happens you end up

35
00:01:47,220 --> 00:01:51,780
with one one in those two local

36
00:01:49,530 --> 00:01:53,790
registers another possibility is the

37
00:01:51,780 --> 00:01:56,790
left thread finishes before the writer

38
00:01:53,790 --> 00:01:58,980
had the right threads start if you get

39
00:01:56,790 --> 00:02:00,270
that then you end up with 0 1 and if the

40
00:01:58,980 --> 00:02:01,770
right hand thread finishes before the

41
00:02:00,270 --> 00:02:04,470
left hand thread starts you end up with

42
00:02:01,770 --> 00:02:05,550
1 0 there are other interleavings of

43
00:02:04,470 --> 00:02:07,500
these instructions that you could think

44
00:02:05,550 --> 00:02:10,440
about that they'll all give rise to one

45
00:02:07,500 --> 00:02:12,030
of those 3 outcomes this interleaving

46
00:02:10,440 --> 00:02:14,879
model of concurrency is called

47
00:02:12,030 --> 00:02:16,650
sequential consistency or SC it's a nice

48
00:02:14,879 --> 00:02:20,489
simple way to think about concurrent

49
00:02:16,650 --> 00:02:23,160
programs unfortunately it's it's not

50
00:02:20,490 --> 00:02:23,910
enough because the fact is it if I take

51
00:02:23,160 --> 00:02:26,400
this program which

52
00:02:23,910 --> 00:02:28,650
written in a sort of x86 style syntax

53
00:02:26,400 --> 00:02:30,570
and I run it on my x86 processor over

54
00:02:28,650 --> 00:02:33,000
there if I'd run it enough times maybe

55
00:02:30,570 --> 00:02:35,910
100,000 times then very occasionally I

56
00:02:33,000 --> 00:02:38,940
might see the fourth allowed outcome

57
00:02:35,910 --> 00:02:40,380
under x86 which is zero zero this is

58
00:02:38,940 --> 00:02:43,260
very weird because it can't be explained

59
00:02:40,380 --> 00:02:44,670
by any of these interleavings and so

60
00:02:43,260 --> 00:02:46,380
because it's not a sequentially

61
00:02:44,670 --> 00:02:49,200
consistent behavior we say it is a weak

62
00:02:46,380 --> 00:02:53,100
behavior we said x86 has a weak memory

63
00:02:49,200 --> 00:02:56,369
model this is very confusing to

64
00:02:53,100 --> 00:02:58,260
programmers targeting x86 but it's not

65
00:02:56,370 --> 00:03:00,120
just a problem with Intel processors

66
00:02:58,260 --> 00:03:02,070
this is something that happens on IBM

67
00:03:00,120 --> 00:03:04,470
power processors it happens on ARM

68
00:03:02,070 --> 00:03:07,200
processors even more so it happens on

69
00:03:04,470 --> 00:03:08,400
GPUs made by Nvidia and AMD and because

70
00:03:07,200 --> 00:03:10,350
it happens on all of these low-level

71
00:03:08,400 --> 00:03:12,450
architectures it also appears in the

72
00:03:10,350 --> 00:03:16,769
high-level languages that we use like C

73
00:03:12,450 --> 00:03:18,660
C++ open Co Java they all have some

74
00:03:16,770 --> 00:03:22,920
notion of weak memory it's a completely

75
00:03:18,660 --> 00:03:25,710
pervasive concept and it brings

76
00:03:22,920 --> 00:03:28,769
complexity and confusion wherever it

77
00:03:25,710 --> 00:03:31,530
appears so it is Ignace it is an example

78
00:03:28,770 --> 00:03:33,090
of a few of the problems the x86 weak

79
00:03:31,530 --> 00:03:35,520
memory model that took a couple of goes

80
00:03:33,090 --> 00:03:37,620
to get that one right there were bugs

81
00:03:35,520 --> 00:03:40,470
found to do with weak memory in power

82
00:03:37,620 --> 00:03:42,060
processors that were deployed the C++

83
00:03:40,470 --> 00:03:43,530
specification got a bit confused about

84
00:03:42,060 --> 00:03:46,020
exactly what it was guaranteeing with

85
00:03:43,530 --> 00:03:47,430
respect to weak memory compiler

86
00:03:46,020 --> 00:03:49,590
optimizations that you'd think would be

87
00:03:47,430 --> 00:03:51,480
completely straightforward or in fact

88
00:03:49,590 --> 00:03:54,030
invalid in the presence of weak memory

89
00:03:51,480 --> 00:03:55,709
and Nvidia graphics processors

90
00:03:54,030 --> 00:03:58,739
contradicted what their programming

91
00:03:55,709 --> 00:04:00,209
guide by Nvidia said and so it's not

92
00:03:58,739 --> 00:04:02,280
just programmers who get confused it's

93
00:04:00,209 --> 00:04:05,390
the manufacturers of these architectures

94
00:04:02,280 --> 00:04:09,450
and these designers of these languages

95
00:04:05,390 --> 00:04:12,238
so there is a great need therefore to be

96
00:04:09,450 --> 00:04:14,280
very precise very formal about exactly

97
00:04:12,239 --> 00:04:16,590
what is allowed and exactly what is not

98
00:04:14,280 --> 00:04:19,108
allowed in the presence of weak memory

99
00:04:16,589 --> 00:04:22,229
and a lot of work has been done in the

100
00:04:19,108 --> 00:04:24,930
last decade or decade or so to pin down

101
00:04:22,230 --> 00:04:27,330
exactly what can happen and the way that

102
00:04:24,930 --> 00:04:29,550
these weak memory models are can

103
00:04:27,330 --> 00:04:33,390
formalized is a bit like this so you

104
00:04:29,550 --> 00:04:36,820
take your concurrent program and you

105
00:04:33,390 --> 00:04:39,820
enumerate all of the possible and

106
00:04:36,820 --> 00:04:41,860
executions of that program so an

107
00:04:39,820 --> 00:04:43,780
execution looks a bit like this kind of

108
00:04:41,860 --> 00:04:46,600
gadget it's a kind of mathematical graph

109
00:04:43,780 --> 00:04:49,090
you at the vertices you have events

110
00:04:46,600 --> 00:04:51,250
representing here writes and reads of

111
00:04:49,090 --> 00:04:53,590
certain values they're ordered with

112
00:04:51,250 --> 00:04:55,600
edges between the events you see arrows

113
00:04:53,590 --> 00:04:58,239
showing how data flows from one event to

114
00:04:55,600 --> 00:05:00,280
another this is a particular execution

115
00:04:58,240 --> 00:05:01,720
that ends up with one one there are

116
00:05:00,280 --> 00:05:04,270
other executions that end up with

117
00:05:01,720 --> 00:05:06,370
different outcomes and the task of the

118
00:05:04,270 --> 00:05:09,219
model then is to take each of these

119
00:05:06,370 --> 00:05:11,830
execution graphs and just answer is that

120
00:05:09,220 --> 00:05:15,160
allowed or not allowed so for sequential

121
00:05:11,830 --> 00:05:21,120
consistency you'll say yes yes yes and

122
00:05:15,160 --> 00:05:23,680
no and for x86 you say yes yes yes yes

123
00:05:21,120 --> 00:05:25,450
okay so that's the first part of the

124
00:05:23,680 --> 00:05:27,700
talk that's weak memory the second

125
00:05:25,450 --> 00:05:32,580
ingredient is transactional memory so

126
00:05:27,700 --> 00:05:35,020
transactions came around around 1993 and

127
00:05:32,580 --> 00:05:36,880
the basic idea is about saying you've

128
00:05:35,020 --> 00:05:38,380
got these group it's a mechanism that

129
00:05:36,880 --> 00:05:42,070
allows you to put a sequence of

130
00:05:38,380 --> 00:05:44,020
instructions into a transaction and make

131
00:05:42,070 --> 00:05:45,340
it appear that from the point of view of

132
00:05:44,020 --> 00:05:48,250
every other thread that these

133
00:05:45,340 --> 00:05:49,619
instructions happen all at once or not

134
00:05:48,250 --> 00:05:52,900
at all

135
00:05:49,620 --> 00:05:54,580
and then around 2013 transactions really

136
00:05:52,900 --> 00:05:58,299
started to hit the mainstream so they

137
00:05:54,580 --> 00:06:00,609
appeared in x86 in power with slightly

138
00:05:58,300 --> 00:06:02,770
different syntax while we were doing

139
00:06:00,610 --> 00:06:05,080
this project arm was developing their

140
00:06:02,770 --> 00:06:07,210
own extension of transactional memory

141
00:06:05,080 --> 00:06:09,760
for their processes which in recent

142
00:06:07,210 --> 00:06:13,620
months has has now become publicly

143
00:06:09,760 --> 00:06:17,099
announced and also the C++ committee is

144
00:06:13,620 --> 00:06:21,070
currently working on how to standardize

145
00:06:17,100 --> 00:06:22,830
transactions for C++ so in short it's a

146
00:06:21,070 --> 00:06:24,880
really good time to be thinking about

147
00:06:22,830 --> 00:06:30,690
the details of how these things should

148
00:06:24,880 --> 00:06:33,040
work so how to combine these two things

149
00:06:30,690 --> 00:06:34,300
it's a bit of a tricky question because

150
00:06:33,040 --> 00:06:38,020
on the one hand we've seen that weak

151
00:06:34,300 --> 00:06:39,880
memory is allowing more things to happen

152
00:06:38,020 --> 00:06:41,950
if you go from sequential consistency to

153
00:06:39,880 --> 00:06:44,909
x86 you're allowing more outcomes of

154
00:06:41,950 --> 00:06:47,440
your program but if you add transactions

155
00:06:44,910 --> 00:06:50,140
say I put both of these threads inside a

156
00:06:47,440 --> 00:06:52,750
transaction now using x86 syntax

157
00:06:50,140 --> 00:06:54,039
what I'm saying here is that the the two

158
00:06:52,750 --> 00:06:56,080
instructions in each thread have to be

159
00:06:54,040 --> 00:06:57,610
kept together so I'm restricting the set

160
00:06:56,080 --> 00:07:00,430
of possible interleavings I'm saying you

161
00:06:57,610 --> 00:07:01,930
have to buy the do this or this so

162
00:07:00,430 --> 00:07:03,640
transactions are restricting the set of

163
00:07:01,930 --> 00:07:05,440
outcomes like so

164
00:07:03,640 --> 00:07:06,760
so if weak memory is pulling me in this

165
00:07:05,440 --> 00:07:07,960
direction transactions approve me in

166
00:07:06,760 --> 00:07:10,120
this direction what do I get if I

167
00:07:07,960 --> 00:07:14,430
combine the two that's the question we

168
00:07:10,120 --> 00:07:17,710
set out to answer so the main

169
00:07:14,430 --> 00:07:21,330
intellectual work of the project was

170
00:07:17,710 --> 00:07:25,270
taking the existing weak memory models

171
00:07:21,330 --> 00:07:27,159
from previous authors and working out

172
00:07:25,270 --> 00:07:29,049
how to extend them with transactions

173
00:07:27,160 --> 00:07:30,820
which executions should then be

174
00:07:29,050 --> 00:07:31,150
forbidden which should be allowed and so

175
00:07:30,820 --> 00:07:33,760
on

176
00:07:31,150 --> 00:07:34,929
so I won't explain the details of what

177
00:07:33,760 --> 00:07:38,590
we did there I just want to show you

178
00:07:34,930 --> 00:07:40,630
kind of visually the the output of that

179
00:07:38,590 --> 00:07:43,119
which was to all the bits that are in a

180
00:07:40,630 --> 00:07:45,040
sort of beige e pink are the bits that

181
00:07:43,120 --> 00:07:49,570
we added okay so just to show you the

182
00:07:45,040 --> 00:07:51,520
magnitude but it's all very well showing

183
00:07:49,570 --> 00:07:53,469
you these models and how can you trust

184
00:07:51,520 --> 00:07:57,130
me that what we've written down there is

185
00:07:53,470 --> 00:07:59,110
is resembles reality at all well we did

186
00:07:57,130 --> 00:08:01,990
five things to try and validate these

187
00:07:59,110 --> 00:08:04,810
models the first thing we did was we

188
00:08:01,990 --> 00:08:07,330
looked at the manual which can take you

189
00:08:04,810 --> 00:08:11,200
quite far but as is always the case with

190
00:08:07,330 --> 00:08:13,060
these informal technical prose documents

191
00:08:11,200 --> 00:08:15,490
they're a little bit inconsistent

192
00:08:13,060 --> 00:08:16,930
occasionally they're certainly a bit

193
00:08:15,490 --> 00:08:19,440
incomplete they don't answer all of your

194
00:08:16,930 --> 00:08:21,910
questions there sometimes bit ambiguous

195
00:08:19,440 --> 00:08:23,260
so for any remaining questions we try to

196
00:08:21,910 --> 00:08:26,470
talk to as many engineers from the

197
00:08:23,260 --> 00:08:28,060
various companies that we could do we

198
00:08:26,470 --> 00:08:30,100
also checked that the models we came up

199
00:08:28,060 --> 00:08:31,840
with had some reasonable mathematical

200
00:08:30,100 --> 00:08:35,470
properties so for instance you would

201
00:08:31,840 --> 00:08:37,120
expect that if you have a behavior

202
00:08:35,470 --> 00:08:40,270
that's not allowed and then you add a

203
00:08:37,120 --> 00:08:42,370
transaction somewhere you shouldn't then

204
00:08:40,270 --> 00:08:44,380
find that the behavior is now allowed

205
00:08:42,370 --> 00:08:46,330
okay so it's a trap map adding

206
00:08:44,380 --> 00:08:48,610
transactions should always be safe in

207
00:08:46,330 --> 00:08:50,890
other words so we check that our models

208
00:08:48,610 --> 00:08:53,110
have that property which they do we also

209
00:08:50,890 --> 00:08:55,870
checks that existing compiler mappings

210
00:08:53,110 --> 00:08:59,290
so if we pull us down to x86 arm power

211
00:08:55,870 --> 00:09:01,090
we know how to compile these this

212
00:08:59,290 --> 00:09:02,589
language into these into these targets

213
00:09:01,090 --> 00:09:03,760
and so we checks that those compiler

214
00:09:02,590 --> 00:09:06,850
mappings still

215
00:09:03,760 --> 00:09:08,500
if you add transactions everywhere but

216
00:09:06,850 --> 00:09:10,570
then the fifth and most important way

217
00:09:08,500 --> 00:09:15,370
that we validated the models and was we

218
00:09:10,570 --> 00:09:17,860
we took the we took the models and we

219
00:09:15,370 --> 00:09:20,470
put them into a constraint solver and we

220
00:09:17,860 --> 00:09:22,360
asked the constraint solver if you

221
00:09:20,470 --> 00:09:24,430
imagine these are the executions that

222
00:09:22,360 --> 00:09:27,070
the model says I'm not allowed and then

223
00:09:24,430 --> 00:09:29,260
these the executions that are allowed we

224
00:09:27,070 --> 00:09:31,360
asked for can you give it can you going

225
00:09:29,260 --> 00:09:34,870
to spit out lots of executions that are

226
00:09:31,360 --> 00:09:37,120
just at that boundary so just allow so

227
00:09:34,870 --> 00:09:39,339
just forbidden okay so not sort of

228
00:09:37,120 --> 00:09:42,130
really obviously forbidden but just just

229
00:09:39,339 --> 00:09:43,420
a tiny bit forbidden and and then we

230
00:09:42,130 --> 00:09:46,930
took each of those and we turned those

231
00:09:43,420 --> 00:09:48,310
into executable tests and we ran them

232
00:09:46,930 --> 00:09:50,380
lots and lots of times on existing

233
00:09:48,310 --> 00:09:52,989
hardware which at the time of writing

234
00:09:50,380 --> 00:09:57,730
was just x86 and power and the result of

235
00:09:52,990 --> 00:09:59,470
that was this so on x86 this is the size

236
00:09:57,730 --> 00:10:01,180
of the test this is the number of tests

237
00:09:59,470 --> 00:10:02,949
that we automatically generated and we

238
00:10:01,180 --> 00:10:04,569
see that these bars are all green which

239
00:10:02,949 --> 00:10:06,250
means that every test we generated no

240
00:10:04,570 --> 00:10:08,380
matter how many times we ran that test

241
00:10:06,250 --> 00:10:09,910
it matter how many other threads we have

242
00:10:08,380 --> 00:10:12,220
some pounding memory system at the same

243
00:10:09,910 --> 00:10:13,329
time we could not observe the behavior

244
00:10:12,220 --> 00:10:15,370
that the model said we shouldn't be able

245
00:10:13,329 --> 00:10:17,560
to observe which is good this suggests

246
00:10:15,370 --> 00:10:20,319
that our model is probably sound and the

247
00:10:17,560 --> 00:10:22,329
same story goes for power as well and

248
00:10:20,319 --> 00:10:24,389
then what we also did was we said ask

249
00:10:22,329 --> 00:10:27,519
the constraints over can you give me

250
00:10:24,389 --> 00:10:29,470
executions that are just allowed so just

251
00:10:27,519 --> 00:10:33,370
on the other side of that boundary

252
00:10:29,470 --> 00:10:36,130
defined by the model and when we did

253
00:10:33,370 --> 00:10:38,500
that we found that we didn't try to run

254
00:10:36,130 --> 00:10:40,269
those and here you want to be able to

255
00:10:38,500 --> 00:10:43,209
see as many of these behaviors as

256
00:10:40,269 --> 00:10:45,519
possible and we could we saw most of

257
00:10:43,209 --> 00:10:47,349
them the orange ones are the pavis we

258
00:10:45,519 --> 00:10:50,260
that the model allows but we couldn't

259
00:10:47,350 --> 00:10:53,350
actually see them which might mean that

260
00:10:50,260 --> 00:10:55,060
our model is a little bit too weak it

261
00:10:53,350 --> 00:10:57,130
may also mean that the machine that we

262
00:10:55,060 --> 00:10:58,930
were running on actually consumed it

263
00:10:57,130 --> 00:11:00,279
conservative it didn't implement every

264
00:10:58,930 --> 00:11:01,839
detail that the architecture allowed it

265
00:11:00,279 --> 00:11:04,269
to it's also possible we just didn't run

266
00:11:01,839 --> 00:11:05,980
that enough tests so we became

267
00:11:04,269 --> 00:11:09,510
reasonably close in both cases so our

268
00:11:05,980 --> 00:11:12,390
models probably aren't ridiculously weak

269
00:11:09,510 --> 00:11:16,079
okay so

270
00:11:12,390 --> 00:11:17,130
that's how we validated our models then

271
00:11:16,079 --> 00:11:20,579
the final thing I want to tell you about

272
00:11:17,130 --> 00:11:23,070
is how we used our models so there are

273
00:11:20,579 --> 00:11:25,170
many uses you could have of these kind

274
00:11:23,070 --> 00:11:27,540
of formal model a formal models you

275
00:11:25,170 --> 00:11:29,610
could use them to to validate compilers

276
00:11:27,540 --> 00:11:31,230
or to validate programs that use

277
00:11:29,610 --> 00:11:33,180
transactions written in these languages

278
00:11:31,230 --> 00:11:37,649
and what we wanted to do is to validate

279
00:11:33,180 --> 00:11:39,870
a program transformation and that arm

280
00:11:37,649 --> 00:11:42,529
was particularly interested in called

281
00:11:39,870 --> 00:11:45,089
lock illusion this is one of the key

282
00:11:42,529 --> 00:11:48,450
driving forces behind having

283
00:11:45,089 --> 00:11:51,709
transactional memory at all here the

284
00:11:48,450 --> 00:11:53,610
idea of lock elision is that you have

285
00:11:51,709 --> 00:11:55,018
suppose you have a critical region

286
00:11:53,610 --> 00:11:57,450
that's protected by a lock

287
00:11:55,019 --> 00:11:59,760
the idea is to elide that lock and

288
00:11:57,450 --> 00:12:02,160
replace it instead by having a critical

289
00:11:59,760 --> 00:12:04,680
section inside a transaction the benefit

290
00:12:02,160 --> 00:12:05,850
of doing this is that if you have two of

291
00:12:04,680 --> 00:12:08,660
these critical sections running in

292
00:12:05,850 --> 00:12:10,950
parallel and they happen not to conflict

293
00:12:08,660 --> 00:12:12,569
then by having them in transactions

294
00:12:10,950 --> 00:12:13,649
those transactions can go in parallel if

295
00:12:12,570 --> 00:12:16,260
they had them in locks

296
00:12:13,649 --> 00:12:17,430
you'd have to serialize them so that's

297
00:12:16,260 --> 00:12:23,220
the big win you can get from low

298
00:12:17,430 --> 00:12:25,859
collision but it it turns out that the

299
00:12:23,220 --> 00:12:27,269
combination of weak memory transactions

300
00:12:25,860 --> 00:12:30,750
and no collision in the ARM architecture

301
00:12:27,269 --> 00:12:32,730
is a bit toxic and here's what can go

302
00:12:30,750 --> 00:12:34,380
wrong so here's a tiny example I have

303
00:12:32,730 --> 00:12:36,420
two critical sections one is trying to

304
00:12:34,380 --> 00:12:40,380
increment X by 2 and the other is just

305
00:12:36,420 --> 00:12:41,880
trying to set X to 1 if X starts at 0

306
00:12:40,380 --> 00:12:44,730
you did't hope that you end up either

307
00:12:41,880 --> 00:12:49,769
with X is 1 or X is 3 at the end if you

308
00:12:44,730 --> 00:12:51,360
get X is 2 something's gone wrong la

309
00:12:49,769 --> 00:12:54,029
collision should work not only when

310
00:12:51,360 --> 00:12:56,430
every look is elided but also just when

311
00:12:54,029 --> 00:12:58,320
some locks are elided so what I'm gonna

312
00:12:56,430 --> 00:13:01,170
do is on I'm going to turn it into armed

313
00:12:58,320 --> 00:13:03,149
syntax first and then on the left I'm

314
00:13:01,170 --> 00:13:04,199
going to replace that lock with the

315
00:13:03,149 --> 00:13:06,060
standard armed

316
00:13:04,199 --> 00:13:09,089
spin lock you can just copy this from

317
00:13:06,060 --> 00:13:11,010
the manual and on the right I'm going to

318
00:13:09,089 --> 00:13:13,949
use la collision so there I've turned

319
00:13:11,010 --> 00:13:16,709
that lock into in start the transaction

320
00:13:13,949 --> 00:13:18,569
finish transaction now I don't have time

321
00:13:16,709 --> 00:13:21,449
to step through all of the all the

322
00:13:18,570 --> 00:13:23,640
instructions but if you see my my

323
00:13:21,449 --> 00:13:24,880
co-author Nathan's talk on YouTube it

324
00:13:23,640 --> 00:13:26,560
will take you through

325
00:13:24,880 --> 00:13:29,590
that anyway it turns out that you can

326
00:13:26,560 --> 00:13:30,219
now end up with X is two so this is a

327
00:13:29,590 --> 00:13:35,140
bit of a problem

328
00:13:30,220 --> 00:13:37,650
I'm confirmed and it's a bit of a fiddly

329
00:13:35,140 --> 00:13:40,270
one to fix but they've sorted it out now

330
00:13:37,650 --> 00:13:41,260
and turns out that this is actually

331
00:13:40,270 --> 00:13:43,569
example that can be generated

332
00:13:41,260 --> 00:13:44,800
automatically so again using that

333
00:13:43,570 --> 00:13:48,430
constraint solver that I mentioned a few

334
00:13:44,800 --> 00:13:51,189
minutes ago um if you just plug in the

335
00:13:48,430 --> 00:13:52,079
definition of what the arm week memory

336
00:13:51,190 --> 00:13:54,310
model looks like

337
00:13:52,080 --> 00:13:56,260
how are you extended with transactions

338
00:13:54,310 --> 00:13:58,839
what la collision how lo collision works

339
00:13:56,260 --> 00:14:02,350
and how the critical SEC critical

340
00:13:58,840 --> 00:14:03,970
sections should work and then you ask it

341
00:14:02,350 --> 00:14:06,250
okay now give me in a counter example

342
00:14:03,970 --> 00:14:09,490
give it a few minutes and it actually

343
00:14:06,250 --> 00:14:10,870
came up with this itself from which we

344
00:14:09,490 --> 00:14:12,880
could generate that sequence of assembly

345
00:14:10,870 --> 00:14:14,040
code that I showed you so that's pretty

346
00:14:12,880 --> 00:14:18,520
cool

347
00:14:14,040 --> 00:14:20,829
so in conclusion weak memory is

348
00:14:18,520 --> 00:14:23,439
pervasive transactional memory is

349
00:14:20,830 --> 00:14:25,420
becoming pretty pervasive too now is a

350
00:14:23,440 --> 00:14:27,610
good time to think about how these two

351
00:14:25,420 --> 00:14:29,439
features really interact and we've done

352
00:14:27,610 --> 00:14:32,770
so for several mainstream architectures

353
00:14:29,440 --> 00:14:36,130
and languages and sometimes the

354
00:14:32,770 --> 00:14:37,510
interaction can be a bit tricky so do be

355
00:14:36,130 --> 00:14:39,720
careful thanks very much for your

356
00:14:37,510 --> 00:14:39,720
attention

357
00:14:42,210 --> 00:14:53,290
okay do we have any questions oh yeah so

358
00:14:52,060 --> 00:14:55,180
very interesting you know actually

359
00:14:53,290 --> 00:14:59,349
looking at what the architect rectly

360
00:14:55,180 --> 00:15:01,270
does I'm curious at least for x86 do you

361
00:14:59,350 --> 00:15:04,150
think you would have found the aspects

362
00:15:01,270 --> 00:15:05,710
of the transactional memory that

363
00:15:04,150 --> 00:15:07,209
basically Intel ended up like

364
00:15:05,710 --> 00:15:09,100
withdrawing the entire Hardware

365
00:15:07,210 --> 00:15:15,610
transactional memory support because it

366
00:15:09,100 --> 00:15:17,920
was buggy yeah I'm trying to remember

367
00:15:15,610 --> 00:15:20,140
what that I'm trying to remember the

368
00:15:17,920 --> 00:15:22,180
there was a few years ago yeah no I

369
00:15:20,140 --> 00:15:24,790
remember it was it was tricky I did I

370
00:15:22,180 --> 00:15:25,989
don't remember that it was ever I don't

371
00:15:24,790 --> 00:15:27,880
know that it was ever made public what

372
00:15:25,990 --> 00:15:29,020
the kind of root cause was and so it's

373
00:15:27,880 --> 00:15:30,189
hard for me to say whether we'd have

374
00:15:29,020 --> 00:15:34,140
been able to find the same kind of

375
00:15:30,190 --> 00:15:37,230
problems I I don't think it was known

376
00:15:34,140 --> 00:15:38,910
what the why they'd retracted it

377
00:15:37,230 --> 00:15:41,940
okay so you so you you did not in fact

378
00:15:38,910 --> 00:15:44,069
actually find an issue with the Intel

379
00:15:41,940 --> 00:15:44,250
implementation correct all right fair

380
00:15:44,070 --> 00:15:51,750
enough

381
00:15:44,250 --> 00:15:53,250
thanks our about you from Purdue so this

382
00:15:51,750 --> 00:15:55,500
is regarding the verification of your

383
00:15:53,250 --> 00:15:57,810
model so you showed how there's some

384
00:15:55,500 --> 00:15:59,430
behavior that should be allowed and some

385
00:15:57,810 --> 00:16:02,069
that's definitely should not be allowed

386
00:15:59,430 --> 00:16:04,260
so is wondering how easy or difficult is

387
00:16:02,070 --> 00:16:06,960
it to clearly separate these two spaces

388
00:16:04,260 --> 00:16:08,610
and then you said you picked some test

389
00:16:06,960 --> 00:16:11,460
cases which are just close to the

390
00:16:08,610 --> 00:16:13,680
boundary of these two is that more of an

391
00:16:11,460 --> 00:16:19,410
art than science picking something like

392
00:16:13,680 --> 00:16:26,640
that so yes we tried to do it pretty

393
00:16:19,410 --> 00:16:29,640
scientifically in the sense that we said

394
00:16:26,640 --> 00:16:31,800
that the kind of approach was so that

395
00:16:29,640 --> 00:16:34,500
the definition of what is a forbidden

396
00:16:31,800 --> 00:16:35,969
behavior is defined in terms of of these

397
00:16:34,500 --> 00:16:42,330
graph structures these these executions

398
00:16:35,970 --> 00:16:45,300
and then we defined the you want you

399
00:16:42,330 --> 00:16:46,620
want it's it's maximally inconsistent is

400
00:16:45,300 --> 00:16:51,719
where you want so it so in other words

401
00:16:46,620 --> 00:16:53,730
if you if you add in any extra

402
00:16:51,720 --> 00:16:57,780
synchronization stuff like adding an

403
00:16:53,730 --> 00:16:59,130
extra fence or strengthen some right to

404
00:16:57,780 --> 00:17:01,680
a read-modify-write Azeri so any

405
00:16:59,130 --> 00:17:03,930
anything that sort of strengthens or add

406
00:17:01,680 --> 00:17:07,050
a transaction or something so any change

407
00:17:03,930 --> 00:17:10,409
you make to that graph tips it over the

408
00:17:07,050 --> 00:17:15,060
boundary to become then an allowed

409
00:17:10,410 --> 00:17:17,910
behavior so so that that bat was pinned

410
00:17:15,060 --> 00:17:22,980
down quite quite a bit of objectively

411
00:17:17,910 --> 00:17:24,180
said it wasn't much art there but but I

412
00:17:22,980 --> 00:17:27,319
wouldn't claim that it's a sort of

413
00:17:24,180 --> 00:17:30,450
complete a complete test generation

414
00:17:27,319 --> 00:17:33,810
method in particular we only went it up

415
00:17:30,450 --> 00:17:36,450
to six or seven events in these

416
00:17:33,810 --> 00:17:38,010
executions so there may be tests that

417
00:17:36,450 --> 00:17:39,720
are bigger than that and that would show

418
00:17:38,010 --> 00:17:44,300
the model to be unsound and we we can't

419
00:17:39,720 --> 00:17:44,300
be certain beyond thank you thank you

420
00:17:44,490 --> 00:17:52,330
okay thanks done thank you

421
00:17:48,080 --> 00:17:52,330
[Applause]

