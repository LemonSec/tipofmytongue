1
00:00:10,929 --> 00:00:16,539
oh hi from national champion diversity

2
00:00:13,870 --> 00:00:18,880
Taiwan I'm going to introduce our work

3
00:00:16,539 --> 00:00:21,189
after other preserving translation the

4
00:00:18,880 --> 00:00:23,470
recovery design for SSDs we sustained a

5
00:00:21,189 --> 00:00:24,820
block device interface this is a John

6
00:00:23,470 --> 00:00:27,538
word with my advisor professor

7
00:00:24,820 --> 00:00:30,160
eventually national champion adversity

8
00:00:27,539 --> 00:00:32,259
as a dropping replacement for Hardy

9
00:00:30,160 --> 00:00:34,089
stripe so Lisa giant in harried the

10
00:00:32,259 --> 00:00:36,610
interface and a weaker antifa hari

11
00:00:34,089 --> 00:00:39,339
strike that is the premier persisting

12
00:00:36,610 --> 00:00:41,500
request in arbitrary order the

13
00:00:39,339 --> 00:00:44,530
implication of having the recurrent

14
00:00:41,500 --> 00:00:46,930
astir for application Buuren SSDs such

15
00:00:44,530 --> 00:00:49,180
as file system and database systems the

16
00:00:46,930 --> 00:00:51,040
need to frequently flush SSDs to ensure

17
00:00:49,180 --> 00:00:54,670
order and the cause of performance

18
00:00:51,040 --> 00:00:56,920
degradation we proposed older preserving

19
00:00:54,670 --> 00:00:59,530
SSDs which provide two additional

20
00:00:56,920 --> 00:01:00,100
request level guarantees first the

21
00:00:59,530 --> 00:01:02,920
persist

22
00:01:00,100 --> 00:01:05,189
all right requests in order second the

23
00:01:02,920 --> 00:01:08,350
persist each request atomically our

24
00:01:05,188 --> 00:01:11,380
design of other preserving SSD uses the

25
00:01:08,350 --> 00:01:13,539
the identical interface to existing

26
00:01:11,380 --> 00:01:17,229
software and offers comparable

27
00:01:13,540 --> 00:01:18,880
performance to traditional SSDs when we

28
00:01:17,230 --> 00:01:21,370
first illustrate the difference between

29
00:01:18,880 --> 00:01:24,970
traditional SSC order preserving SSDs

30
00:01:21,370 --> 00:01:26,620
with an example in this example the SSA

31
00:01:24,970 --> 00:01:28,750
received three write requests before a

32
00:01:26,620 --> 00:01:31,990
crash occurs here's a few available

33
00:01:28,750 --> 00:01:34,450
State for traditional SSDs for instance

34
00:01:31,990 --> 00:01:37,000
writer can be done even the right one is

35
00:01:34,450 --> 00:01:40,600
not alright wine can be partially done

36
00:01:37,000 --> 00:01:42,460
and many other possibility exist because

37
00:01:40,600 --> 00:01:44,408
each sector can be either region or not

38
00:01:42,460 --> 00:01:47,130
the number of thoroughly post-crash

39
00:01:44,409 --> 00:01:50,110
states is to teleport six

40
00:01:47,130 --> 00:01:52,780
encounters older preserving SSD only

41
00:01:50,110 --> 00:01:54,370
allow for valley post per state we can

42
00:01:52,780 --> 00:01:56,530
see from this example that other

43
00:01:54,370 --> 00:01:58,600
preserving SSDs significantly reduced

44
00:01:56,530 --> 00:02:01,060
the number of post wave state the

45
00:01:58,600 --> 00:02:03,100
application have to handle this is an

46
00:02:01,060 --> 00:02:08,229
empowering advantage of all representing

47
00:02:03,100 --> 00:02:10,239
SSD against traditional SSDs the impact

48
00:02:08,229 --> 00:02:12,250
of other preserving SSD on computer

49
00:02:10,239 --> 00:02:14,830
system are several fold first other

50
00:02:12,250 --> 00:02:17,319
preserving SSD can allow us to optimize

51
00:02:14,830 --> 00:02:19,840
existing application by removing

52
00:02:17,319 --> 00:02:21,429
unnecessary flushes but we believe that

53
00:02:19,840 --> 00:02:23,870
it is practical and manageable because

54
00:02:21,430 --> 00:02:26,870
other preserving SSD key being safe

55
00:02:23,870 --> 00:02:28,879
in tech second although preserving SSD

56
00:02:26,870 --> 00:02:31,069
can inspire new file system they are

57
00:02:28,879 --> 00:02:33,709
persistent design which exploited the

58
00:02:31,069 --> 00:02:36,079
strong crash guarantees third other

59
00:02:33,709 --> 00:02:38,660
preserving SSD may establish new SSD

60
00:02:36,080 --> 00:02:41,120
industrial standard finally other

61
00:02:38,660 --> 00:02:43,579
preserving SSD itself can open our new

62
00:02:41,120 --> 00:02:47,390
research direction in the area of SSD

63
00:02:43,580 --> 00:02:49,730
firmware so I've covered what is an

64
00:02:47,390 --> 00:02:52,190
older preserving SSD and its implication

65
00:02:49,730 --> 00:02:53,298
to system design next I will briefly

66
00:02:52,190 --> 00:02:56,299
describe some background knowledge

67
00:02:53,299 --> 00:02:58,280
regarding SSD and recovery and introduce

68
00:02:56,299 --> 00:03:01,160
our SSD design which preserve order

69
00:02:58,280 --> 00:03:03,110
while maintains high performance then I

70
00:03:01,160 --> 00:03:05,510
will demonstrate one usage case of order

71
00:03:03,110 --> 00:03:08,030
reserving SSDs which is to optimize

72
00:03:05,510 --> 00:03:11,929
existing applications finally I will

73
00:03:08,030 --> 00:03:13,910
conclude this talk one main constraint

74
00:03:11,930 --> 00:03:17,299
of flash memory is that it does not

75
00:03:13,910 --> 00:03:19,099
allow in place update thus our most SSD

76
00:03:17,299 --> 00:03:21,230
an embedded with a specialized firmware

77
00:03:19,099 --> 00:03:23,599
called flash translation layer or after

78
00:03:21,230 --> 00:03:26,840
for sure for logical to physical address

79
00:03:23,599 --> 00:03:28,700
mapping to achieve high performance SSDs

80
00:03:26,840 --> 00:03:30,590
often consist of multiple channels and

81
00:03:28,700 --> 00:03:33,108
flash chips to increase the level of

82
00:03:30,590 --> 00:03:35,600
parallelism besides after you may

83
00:03:33,109 --> 00:03:37,010
reorder request an employer write cache

84
00:03:35,600 --> 00:03:38,959
to improve response time their

85
00:03:37,010 --> 00:03:40,970
throughput although this

86
00:03:38,959 --> 00:03:43,810
high-performance schemes are very useful

87
00:03:40,970 --> 00:03:46,220
they also inevitably break the order

88
00:03:43,810 --> 00:03:47,750
after you are also responsible for

89
00:03:46,220 --> 00:03:51,680
garbage collection and crash recovery

90
00:03:47,750 --> 00:03:53,359
which I will cover in a next slide pages

91
00:03:51,680 --> 00:03:56,120
not containing the most recent data

92
00:03:53,359 --> 00:03:57,560
which we call invalid pages we will

93
00:03:56,120 --> 00:04:00,349
accumulate in flash memory

94
00:03:57,560 --> 00:04:02,599
thus garbage collection is required to

95
00:04:00,349 --> 00:04:06,018
early reclaim space for future right

96
00:04:02,599 --> 00:04:08,030
during GC a v10 block is chosen and each

97
00:04:06,019 --> 00:04:12,440
valley page in a victim block is copied

98
00:04:08,030 --> 00:04:15,560
to another page then after a day vl2 be

99
00:04:12,440 --> 00:04:18,680
able to relocate a copied page finally

100
00:04:15,560 --> 00:04:21,108
the victim block is C raised press

101
00:04:18,680 --> 00:04:23,510
recovery is another task after has to

102
00:04:21,108 --> 00:04:26,060
handle since the mapping table is often

103
00:04:23,510 --> 00:04:29,440
capping volatile memory FTL has to

104
00:04:26,060 --> 00:04:32,330
reconstruct the l2p table after crash

105
00:04:29,440 --> 00:04:35,030
this is normally done by leaving an LPN

106
00:04:32,330 --> 00:04:37,279
tag in the spiria of each program page

107
00:04:35,030 --> 00:04:40,159
so during recovery

108
00:04:37,279 --> 00:04:44,119
here can examine examinee the LPN tech

109
00:04:40,159 --> 00:04:45,619
and reconstruct the mapping table okay

110
00:04:44,119 --> 00:04:47,419
so that's enough for the background

111
00:04:45,619 --> 00:04:49,789
knowledge let's get down to our design

112
00:04:47,419 --> 00:04:51,739
as mentioned earlier we want are

113
00:04:49,789 --> 00:04:54,109
designed to preserve odor while maintain

114
00:04:51,739 --> 00:04:56,149
high performance so we need to keep all

115
00:04:54,109 --> 00:04:57,709
the high performance kings this means

116
00:04:56,149 --> 00:05:00,859
that right requests are not are not

117
00:04:57,709 --> 00:05:02,899
necessarily processing order however the

118
00:05:00,859 --> 00:05:05,448
recovery procedure should be able to row

119
00:05:02,899 --> 00:05:09,769
back the SSD to our desired state which

120
00:05:05,449 --> 00:05:12,409
create an order preserving illusion for

121
00:05:09,769 --> 00:05:14,539
clarity that first Australian SSD with

122
00:05:12,409 --> 00:05:17,379
our right cache and juicy will remove

123
00:05:14,539 --> 00:05:20,199
this impractical assumption in a minute

124
00:05:17,379 --> 00:05:23,389
the key idea of other preserving

125
00:05:20,199 --> 00:05:25,399
recoveries that during recovery if we

126
00:05:23,389 --> 00:05:27,559
know exactly which right are completely

127
00:05:25,399 --> 00:05:29,749
and which are not we can recover until

128
00:05:27,559 --> 00:05:31,579
the first incomplete right for example

129
00:05:29,749 --> 00:05:33,860
if the first second third and fifth

130
00:05:31,579 --> 00:05:35,629
right are complete then we can simply

131
00:05:33,860 --> 00:05:37,519
recover the first three right but not

132
00:05:35,629 --> 00:05:40,009
any other right the follow-up question

133
00:05:37,519 --> 00:05:42,979
is how can we determine whether right is

134
00:05:40,009 --> 00:05:45,229
complete or not we introduce a mechanism

135
00:05:42,979 --> 00:05:47,360
called right completion tracking the key

136
00:05:45,229 --> 00:05:49,789
idea is really simple if a right

137
00:05:47,360 --> 00:05:51,739
contains some pages then and during

138
00:05:49,789 --> 00:05:53,808
recovery we find on pages full of right

139
00:05:51,739 --> 00:05:57,619
then the page is indeed complete

140
00:05:53,809 --> 00:05:59,839
otherwise the right is incomplete so

141
00:05:57,619 --> 00:06:02,929
we'll leave two texts in the spare area

142
00:05:59,839 --> 00:06:04,579
of each page right idea size variety is

143
00:06:02,929 --> 00:06:06,589
a sequence number assigned to a right

144
00:06:04,579 --> 00:06:09,139
according to the order in which you

145
00:06:06,589 --> 00:06:10,759
write are received by the SSD and size

146
00:06:09,139 --> 00:06:13,549
is the number of pages to the right

147
00:06:10,759 --> 00:06:15,889
contents by doing so determining whether

148
00:06:13,549 --> 00:06:18,229
write is company is simply a counting

149
00:06:15,889 --> 00:06:20,959
problem if the number of page funds for

150
00:06:18,229 --> 00:06:23,058
a particular right matrix size tag then

151
00:06:20,959 --> 00:06:23,719
we can conclude that this right is

152
00:06:23,059 --> 00:06:28,069
complete

153
00:06:23,719 --> 00:06:30,409
otherwise the right is incomplete let's

154
00:06:28,069 --> 00:06:33,399
try to recover an SSD with a pages

155
00:06:30,409 --> 00:06:36,319
programmed each page in the figure is

156
00:06:33,399 --> 00:06:39,139
represented by its write ID size and LP

157
00:06:36,319 --> 00:06:41,269
on the first step of our recovery

158
00:06:39,139 --> 00:06:43,759
procedure is to read all the program

159
00:06:41,269 --> 00:06:45,469
pages and reuse the information we laugh

160
00:06:43,759 --> 00:06:48,739
in a spare area to determine whether

161
00:06:45,469 --> 00:06:50,430
each ray is complete or not next we can

162
00:06:48,739 --> 00:06:53,099
construct an flow network with

163
00:06:50,430 --> 00:06:55,200
you know representing Rodriquez and each

164
00:06:53,100 --> 00:06:58,440
edge pointing from right eye to right I

165
00:06:55,200 --> 00:07:00,060
plus one then we find an SD card to

166
00:06:58,440 --> 00:07:04,260
partition the network into two sub

167
00:07:00,060 --> 00:07:07,310
graphs SMT so that everybody else is

168
00:07:04,260 --> 00:07:09,780
complete and the size of as is maximized

169
00:07:07,310 --> 00:07:12,380
finally we can recover all the rights

170
00:07:09,780 --> 00:07:15,150
and only low rise in stuff great ass

171
00:07:12,380 --> 00:07:18,170
so that's basically the idea of other

172
00:07:15,150 --> 00:07:20,310
preserving recovery next I will remove

173
00:07:18,170 --> 00:07:25,650
the assumption that I made previously

174
00:07:20,310 --> 00:07:28,020
that is no write cache and GC one of a

175
00:07:25,650 --> 00:07:29,909
benefit of rot of a write cache is Right

176
00:07:28,020 --> 00:07:31,740
coalescing we want to support right

177
00:07:29,910 --> 00:07:34,200
coalescing because when to write

178
00:07:31,740 --> 00:07:37,080
Corollas the number of program operation

179
00:07:34,200 --> 00:07:38,969
required decreased and therefore the

180
00:07:37,080 --> 00:07:39,599
performance and lifetime fairness is the

181
00:07:38,970 --> 00:07:42,210
increase

182
00:07:39,600 --> 00:07:44,670
however the recovery procedure shown

183
00:07:42,210 --> 00:07:47,280
previously is incompatible with right

184
00:07:44,670 --> 00:07:50,190
coalescing let's take a look at an

185
00:07:47,280 --> 00:07:52,349
example in this example right hand

186
00:07:50,190 --> 00:07:54,390
contains two pages and both pages are

187
00:07:52,350 --> 00:07:55,860
buffering the write cache while the

188
00:07:54,390 --> 00:07:58,710
first page has been written to

189
00:07:55,860 --> 00:08:01,590
thoroughly the second page has not if

190
00:07:58,710 --> 00:08:04,169
another write say write 11 targets the

191
00:08:01,590 --> 00:08:07,229
same pages then the first page is

192
00:08:04,170 --> 00:08:09,660
replaced which is fine but the second

193
00:08:07,230 --> 00:08:11,490
page is coalesced and the consequence is

194
00:08:09,660 --> 00:08:13,920
that right hand will never be considered

195
00:08:11,490 --> 00:08:16,590
complete because it's number of pages

196
00:08:13,920 --> 00:08:18,870
that can be found during recovery is at

197
00:08:16,590 --> 00:08:22,049
most 1 while the recovery procedure

198
00:08:18,870 --> 00:08:24,470
still expects to see two pages in order

199
00:08:22,050 --> 00:08:27,750
to contain the writing as a comple right

200
00:08:24,470 --> 00:08:30,150
from the buff example we can see that

201
00:08:27,750 --> 00:08:32,220
the main challenge is that right

202
00:08:30,150 --> 00:08:34,110
coalescing decreases the number of pages

203
00:08:32,220 --> 00:08:35,880
being programmed to flash memory and

204
00:08:34,110 --> 00:08:38,130
therefore the number of pages found

205
00:08:35,880 --> 00:08:41,010
during recovery can no longer match the

206
00:08:38,130 --> 00:08:43,140
number of pages the right contains an

207
00:08:41,010 --> 00:08:46,410
IVA solution will be forbidden by

208
00:08:43,140 --> 00:08:48,150
coalescing however by coalescing has its

209
00:08:46,410 --> 00:08:51,660
benefit and we don't really want to do

210
00:08:48,150 --> 00:08:53,850
that what we really should do is to have

211
00:08:51,660 --> 00:08:56,280
knowledge that coalescing happens so

212
00:08:53,850 --> 00:08:57,770
introduce coalescing records to keep

213
00:08:56,280 --> 00:09:00,000
track of coalescing event

214
00:08:57,770 --> 00:09:02,819
coalescing record serve two purpose

215
00:09:00,000 --> 00:09:04,200
first it tells the recovery procedure to

216
00:09:02,820 --> 00:09:07,170
expect one last page

217
00:09:04,200 --> 00:09:10,139
each wrecker second my request that the

218
00:09:07,170 --> 00:09:12,120
Corollas are atomic as a whole consider

219
00:09:10,139 --> 00:09:14,160
the previous example this time we

220
00:09:12,120 --> 00:09:16,740
Aultman each buffer a right idea in the

221
00:09:14,160 --> 00:09:18,990
size when are coalescing when a

222
00:09:16,740 --> 00:09:21,600
coalescing event occurs which can be

223
00:09:18,990 --> 00:09:23,490
detected by the dirty flag with foreign

224
00:09:21,600 --> 00:09:26,250
coalescing record consisting of the

225
00:09:23,490 --> 00:09:29,699
right IDs of both right and the size of

226
00:09:26,250 --> 00:09:32,160
the prior right coalescing records apart

227
00:09:29,699 --> 00:09:34,349
a recording a buffer and a batch of

228
00:09:32,160 --> 00:09:37,110
coalescing records are written to flash

229
00:09:34,350 --> 00:09:41,760
when the buffer is full upon receiving a

230
00:09:37,110 --> 00:09:43,860
flush request capture collection is

231
00:09:41,760 --> 00:09:46,319
still incompatible with our recovery

232
00:09:43,860 --> 00:09:48,420
procedure the reason is that the job of

233
00:09:46,320 --> 00:09:51,420
ecology clutter is to recap is to

234
00:09:48,420 --> 00:09:53,370
reclaim invalid pages however our

235
00:09:51,420 --> 00:09:55,889
recovery procedure relies on this

236
00:09:53,370 --> 00:09:59,339
invalid pages to determine whether each

237
00:09:55,889 --> 00:10:02,870
write is complete the resolve this issue

238
00:09:59,339 --> 00:10:05,040
will perform mapping table checkpoint

239
00:10:02,870 --> 00:10:07,470
weakened out to type of check on

240
00:10:05,040 --> 00:10:09,240
incremental SharePoint which recall in

241
00:10:07,470 --> 00:10:12,060
the mapping table difference compared to

242
00:10:09,240 --> 00:10:14,130
the latest report and for checkpoint

243
00:10:12,060 --> 00:10:16,380
which recalled the entire mapping table

244
00:10:14,130 --> 00:10:18,630
we always perform incremental check on

245
00:10:16,380 --> 00:10:19,910
except with exact when we are out of

246
00:10:18,630 --> 00:10:22,769
storage

247
00:10:19,910 --> 00:10:25,620
once the chapel is successfully created

248
00:10:22,769 --> 00:10:28,079
all right recurs prior to the chapel is

249
00:10:25,620 --> 00:10:30,089
guarantee recoverable and thus this

250
00:10:28,079 --> 00:10:31,890
right requests do not rely on accounting

251
00:10:30,089 --> 00:10:35,220
mechanism to determine whether they are

252
00:10:31,890 --> 00:10:38,250
complete this solve the allegewi issue

253
00:10:35,220 --> 00:10:40,199
because now we can restrict GC to only

254
00:10:38,250 --> 00:10:42,420
reclaim pages programmed before the

255
00:10:40,199 --> 00:10:46,079
latest share point but now those after

256
00:10:42,420 --> 00:10:48,269
the latest check point let me show you

257
00:10:46,079 --> 00:10:50,510
the final recovery procedure that is

258
00:10:48,269 --> 00:10:52,890
compatible with right cache and GC

259
00:10:50,510 --> 00:10:55,170
description covered in purple are those

260
00:10:52,890 --> 00:10:58,319
the differs from the previous recovery

261
00:10:55,170 --> 00:11:00,269
procedure the recovery procedure start

262
00:10:58,319 --> 00:11:04,110
with sequentially applying a check point

263
00:11:00,269 --> 00:11:06,300
then it read all pages and coalescing

264
00:11:04,110 --> 00:11:09,389
records generally after latest

265
00:11:06,300 --> 00:11:11,579
checkpoint next the recovery procedure

266
00:11:09,389 --> 00:11:14,490
determining whether issue is company or

267
00:11:11,579 --> 00:11:16,079
not incomplete incomplete writes are

268
00:11:14,490 --> 00:11:17,430
those they have total number of pages

269
00:11:16,079 --> 00:11:21,020
and coalescing records

270
00:11:17,430 --> 00:11:23,729
fewer than the number of expected pages

271
00:11:21,020 --> 00:11:25,470
the recovery procedure then construct

272
00:11:23,730 --> 00:11:29,310
the same flow network as the previous

273
00:11:25,470 --> 00:11:32,790
one and eight and add a band age for

274
00:11:29,310 --> 00:11:35,010
each coalescing record in addition for

275
00:11:32,790 --> 00:11:37,199
the previous constraint we add another

276
00:11:35,010 --> 00:11:39,720
constraint the cut size has to be equal

277
00:11:37,200 --> 00:11:41,940
to one this country constraint captured

278
00:11:39,720 --> 00:11:43,820
the idea of color correlation right our

279
00:11:41,940 --> 00:11:46,830
tummy as a whole

280
00:11:43,820 --> 00:11:48,990
finally like the previous recovery

281
00:11:46,830 --> 00:11:53,030
procedure will recover all the rights

282
00:11:48,990 --> 00:11:53,030
and only the rights in South correct s

283
00:11:53,210 --> 00:11:58,710
okay so let me explain our evaluation

284
00:11:56,700 --> 00:12:00,540
method we implement order preserving

285
00:11:58,710 --> 00:12:02,790
ancestry under high web platform and

286
00:12:00,540 --> 00:12:04,740
validated against our previously

287
00:12:02,790 --> 00:12:07,740
previously proposed testing framework

288
00:12:04,740 --> 00:12:09,510
called the VST we modify the ESC for

289
00:12:07,740 --> 00:12:12,800
file system and a synchronize data base

290
00:12:09,510 --> 00:12:15,720
system to explore other preserving SSDs

291
00:12:12,800 --> 00:12:18,599
we identify three system optimization

292
00:12:15,720 --> 00:12:20,730
with other preserving SSDs the first

293
00:12:18,600 --> 00:12:23,070
ones the first one optimized the file

294
00:12:20,730 --> 00:12:25,320
system the second one optimized both our

295
00:12:23,070 --> 00:12:27,930
file system and application the third

296
00:12:25,320 --> 00:12:31,370
optimization is a no flash mode enabled

297
00:12:27,930 --> 00:12:34,199
by our proposed order preserving SSDs

298
00:12:31,370 --> 00:12:37,070
this lies explain the baseline before we

299
00:12:34,200 --> 00:12:40,170
dive into the three system optimizations

300
00:12:37,070 --> 00:12:43,230
we round seek rely on table est four on

301
00:12:40,170 --> 00:12:45,300
top of a traditional SSD for the figure

302
00:12:43,230 --> 00:12:47,250
on the right hand side the x-axis to

303
00:12:45,300 --> 00:12:49,709
know the changes we made tool assistant

304
00:12:47,250 --> 00:12:52,140
and the y-axis denote the performance of

305
00:12:49,710 --> 00:12:55,650
the system the green point to know the

306
00:12:52,140 --> 00:12:58,439
baseline previous work on translational

307
00:12:55,650 --> 00:13:01,140
SSD is proposed to change or in some

308
00:12:58,440 --> 00:13:03,660
sense to abandon the standard disk

309
00:13:01,140 --> 00:13:06,240
interface so as to achieve this the

310
00:13:03,660 --> 00:13:07,819
desire strong crash guarantee although

311
00:13:06,240 --> 00:13:10,140
they can potentially achieve substantial

312
00:13:07,820 --> 00:13:14,130
benefits they also suffer from

313
00:13:10,140 --> 00:13:15,840
significant system changes in a first

314
00:13:14,130 --> 00:13:17,070
system optimization with other

315
00:13:15,840 --> 00:13:19,530
preserving SSDs

316
00:13:17,070 --> 00:13:21,990
we optimize es default by allowing a

317
00:13:19,530 --> 00:13:24,660
redundant flash request of FD testing to

318
00:13:21,990 --> 00:13:26,880
be removed experiment experimental

319
00:13:24,660 --> 00:13:29,730
results show that we can obtain one

320
00:13:26,880 --> 00:13:32,459
point three times Peter

321
00:13:29,730 --> 00:13:34,529
in a second system optimization we

322
00:13:32,459 --> 00:13:36,508
further optimized equalized by replacing

323
00:13:34,529 --> 00:13:39,989
sound F data singh with a new file

324
00:13:36,509 --> 00:13:41,819
system api called f data fans f de

325
00:13:39,989 --> 00:13:44,399
défense does not use flash at all and

326
00:13:41,819 --> 00:13:47,160
relies on our SSDs to implicitly

327
00:13:44,399 --> 00:13:51,600
preserve the order by doing so we can

328
00:13:47,160 --> 00:13:54,509
achieve a 2.8 times speed up in a third

329
00:13:51,600 --> 00:13:56,790
system optimization we keep we keep up

330
00:13:54,509 --> 00:13:59,730
the exe file and sequel are intact but

331
00:13:56,790 --> 00:14:02,998
mount ext4 using the no barrier option

332
00:13:59,730 --> 00:14:05,669
which the process of flash request this

333
00:14:02,999 --> 00:14:09,720
mode trace away immediate durability for

334
00:14:05,669 --> 00:14:11,669
trivial 6.2 times better sorry please

335
00:14:09,720 --> 00:14:14,129
know that even if this most oppresses

336
00:14:11,669 --> 00:14:16,350
all flushes crash consistency is now

337
00:14:14,129 --> 00:14:18,419
traded away because our SSD can

338
00:14:16,350 --> 00:14:19,730
implicitly preserve the order of my

339
00:14:18,419 --> 00:14:22,769
request

340
00:14:19,730 --> 00:14:25,019
in conclusion we propose all the

341
00:14:22,769 --> 00:14:26,449
preserving SSDs which provide two

342
00:14:25,019 --> 00:14:29,369
additional request level guarantees

343
00:14:26,449 --> 00:14:31,889
first the persist over I request an

344
00:14:29,369 --> 00:14:34,679
order second the precedes issue a

345
00:14:31,889 --> 00:14:36,359
request atomically we believe that other

346
00:14:34,679 --> 00:14:38,819
preserving SSD should be an interesting

347
00:14:36,359 --> 00:14:41,699
topic and may have several impacts to

348
00:14:38,819 --> 00:14:44,248
computer assistance including optimizing

349
00:14:41,699 --> 00:14:46,019
existing application inspiring new file

350
00:14:44,249 --> 00:14:48,899
system and database system design

351
00:14:46,019 --> 00:14:52,730
establishing new SSD industrial standard

352
00:14:48,899 --> 00:14:55,709
and opening our new SSD research area

353
00:14:52,730 --> 00:14:57,269
that's off of us talk since I instill

354
00:14:55,709 --> 00:14:59,518
refactoring the code and writing

355
00:14:57,269 --> 00:15:01,319
document for it the code is currently

356
00:14:59,519 --> 00:15:05,820
not available but we will make it

357
00:15:01,319 --> 00:15:11,929
available before August 15 thank you

358
00:15:05,820 --> 00:15:14,929
[Applause]

359
00:15:11,929 --> 00:15:14,929
questions

360
00:15:22,110 --> 00:15:27,870
yeah I have a question you mentioned

361
00:15:24,450 --> 00:15:31,920
that on recovery you have to read out

362
00:15:27,870 --> 00:15:33,660
all of the pages to get the right IDs

363
00:15:31,920 --> 00:15:36,569
and so forth and information what is the

364
00:15:33,660 --> 00:15:39,839
cost of doing that read out I mean

365
00:15:36,570 --> 00:15:43,170
there's a lot of pages on SSD yeah so

366
00:15:39,840 --> 00:15:46,320
actually oh the only non naive algorithm

367
00:15:43,170 --> 00:15:49,560
read out all the program pages so things

368
00:15:46,320 --> 00:15:52,260
we we have done checkpoint we only need

369
00:15:49,560 --> 00:15:54,660
to read the pages program after the

370
00:15:52,260 --> 00:15:57,960
checkpoint so we do not need to read all

371
00:15:54,660 --> 00:16:00,780
the other program pages in the entire

372
00:15:57,960 --> 00:16:06,570
SSD and so how long does it actually

373
00:16:00,780 --> 00:16:11,100
take um we so we do not evaluate the

374
00:16:06,570 --> 00:16:13,800
recovery time because the the howard

375
00:16:11,100 --> 00:16:16,680
platform we implement be the the

376
00:16:13,800 --> 00:16:19,979
algorithm has some hardware limitation

377
00:16:16,680 --> 00:16:23,370
so we implement the recovery algorithm

378
00:16:19,980 --> 00:16:26,040
on a stimulation framework so I'm sorry

379
00:16:23,370 --> 00:16:29,790
that I can so we have done some analysis

380
00:16:26,040 --> 00:16:33,870
based on some worst case was case

381
00:16:29,790 --> 00:16:38,390
assumption that should take maybe 3 3

382
00:16:33,870 --> 00:16:42,090
seconds less to recover it and no sisty

383
00:16:38,390 --> 00:16:44,610
also I was curious your your graph

384
00:16:42,090 --> 00:16:46,650
algorithm where you find the cuts in the

385
00:16:44,610 --> 00:16:48,660
in the one that has the bent edges as

386
00:16:46,650 --> 00:16:50,760
well as the straight edges is it always

387
00:16:48,660 --> 00:16:55,079
possible to find a cut that has just one

388
00:16:50,760 --> 00:16:57,930
edge yes a once of a flower request once

389
00:16:55,080 --> 00:17:01,230
a flat request is successfully performed

390
00:16:57,930 --> 00:17:06,179
the there were there were view of there

391
00:17:01,230 --> 00:17:06,780
will always be a 1 1 1 cut cut work out

392
00:17:06,180 --> 00:17:11,790
yeah

393
00:17:06,780 --> 00:17:15,500
any other questions okay well I would

394
00:17:11,790 --> 00:17:18,270
like to to thank everyone for coming

395
00:17:15,500 --> 00:17:19,890
it's been a great conference I hope you

396
00:17:18,270 --> 00:17:23,760
guys have enjoyed it as much as I have

397
00:17:19,890 --> 00:17:24,420
and I wish you all safe travels on the

398
00:17:23,760 --> 00:17:26,720
way home

399
00:17:24,420 --> 00:17:28,780
thank you for coming

400
00:17:26,720 --> 00:17:28,780
you

