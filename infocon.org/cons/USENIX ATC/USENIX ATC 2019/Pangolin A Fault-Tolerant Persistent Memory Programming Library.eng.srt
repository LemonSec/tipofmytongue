1
00:00:10,230 --> 00:00:15,330
thanks for the introduction good morning

2
00:00:12,660 --> 00:00:17,550
everyone this is Lou from University of

3
00:00:15,330 --> 00:00:20,480
California San Diego I'm going to

4
00:00:17,550 --> 00:00:23,010
present our work on designing tolerant

5
00:00:20,480 --> 00:00:25,439
programming hmmm memory programming

6
00:00:23,010 --> 00:00:27,630
library called Pangolin hungry not

7
00:00:25,439 --> 00:00:29,670
hungry provides crushed consistency but

8
00:00:27,630 --> 00:00:31,859
also for tolerance features for user

9
00:00:29,670 --> 00:00:34,170
space applications to handle distant

10
00:00:31,859 --> 00:00:36,000
memory errors including hardware and

11
00:00:34,170 --> 00:00:39,420
credible ones and hardware and

12
00:00:36,000 --> 00:00:41,250
detectable errors resistant memory or

13
00:00:39,420 --> 00:00:43,830
PMM has finally arrived

14
00:00:41,250 --> 00:00:46,409
Intel has announced their obtained DC

15
00:00:43,830 --> 00:00:48,299
persistent memory modules in April so

16
00:00:46,409 --> 00:00:51,000
now you can buy them and install them

17
00:00:48,299 --> 00:00:53,760
alongside your DRAM team's position

18
00:00:51,000 --> 00:00:57,000
memory is battered Red Bull and a cache

19
00:00:53,760 --> 00:00:59,460
coherent when it's used as storage or

20
00:00:57,000 --> 00:01:01,500
user space application can memory map a

21
00:00:59,460 --> 00:01:03,530
pmm file and user load store

22
00:01:01,500 --> 00:01:06,450
instructions to access to both data

23
00:01:03,530 --> 00:01:08,909
without the page cache of our system

24
00:01:06,450 --> 00:01:11,610
code in the way this provides the

25
00:01:08,909 --> 00:01:15,090
fastest path from user space to durable

26
00:01:11,610 --> 00:01:18,719
storage and this access mode is termed

27
00:01:15,090 --> 00:01:21,450
direct access or tags however direct

28
00:01:18,719 --> 00:01:23,939
access brings challenges for programming

29
00:01:21,450 --> 00:01:26,340
a widely recognized challenge is how to

30
00:01:23,939 --> 00:01:29,100
maintain fresh consistency with the

31
00:01:26,340 --> 00:01:31,770
presence of volatile CPU caches and

32
00:01:29,100 --> 00:01:33,770
limited support for durable atomic

33
00:01:31,770 --> 00:01:36,509
stores from hardware instructions a

34
00:01:33,770 --> 00:01:39,149
programmer has to carefully reason about

35
00:01:36,509 --> 00:01:41,969
when and in what other stores become

36
00:01:39,149 --> 00:01:44,189
persistent and implement transaction or

37
00:01:41,969 --> 00:01:47,428
recovery procedures to ensure data

38
00:01:44,189 --> 00:01:49,258
consistency in case of power failures on

39
00:01:47,429 --> 00:01:51,149
the other hand fault tolerance is

40
00:01:49,259 --> 00:01:53,729
equally important but much less

41
00:01:51,149 --> 00:01:56,189
researched for persistent memory media

42
00:01:53,729 --> 00:01:56,909
errors such as broken memory cells or

43
00:01:56,189 --> 00:01:59,428
paid flips

44
00:01:56,909 --> 00:02:01,619
can cause data loss software errors

45
00:01:59,429 --> 00:02:04,789
including buffer overruns or using

46
00:02:01,619 --> 00:02:07,679
Tamplin pointers may also crack the data

47
00:02:04,789 --> 00:02:10,020
for this in the memory teams and their

48
00:02:07,679 --> 00:02:12,240
memory controllers implement some kind

49
00:02:10,020 --> 00:02:14,970
of a hardware based error correction

50
00:02:12,240 --> 00:02:18,080
coding algorithm to detect some memory

51
00:02:14,970 --> 00:02:20,459
errors similar to how a CCD Rams work

52
00:02:18,080 --> 00:02:22,620
according to whether memory errors are

53
00:02:20,459 --> 00:02:24,090
detectable or correctable by the

54
00:02:22,620 --> 00:02:26,160
hardware ECC

55
00:02:24,090 --> 00:02:28,140
we can divide them into three different

56
00:02:26,160 --> 00:02:31,170
types and they require different

57
00:02:28,140 --> 00:02:33,299
responses from the software the first

58
00:02:31,170 --> 00:02:35,670
type of error is both detectable and

59
00:02:33,300 --> 00:02:38,280
correctable by the hardware ECC

60
00:02:35,670 --> 00:02:41,010
algorithm in this case the application

61
00:02:38,280 --> 00:02:43,230
will simply get good data without even

62
00:02:41,010 --> 00:02:45,359
knowing an error has happened this

63
00:02:43,230 --> 00:02:48,840
requires no further processing from the

64
00:02:45,360 --> 00:02:51,150
software if the error is a detectable

65
00:02:48,840 --> 00:02:53,370
but not a correctable by the ECC

66
00:02:51,150 --> 00:02:55,019
algorithm the memory controller will

67
00:02:53,370 --> 00:02:56,670
raise the exception through the

68
00:02:55,019 --> 00:02:59,459
operating system and the operating

69
00:02:56,670 --> 00:03:01,619
system isolates the page continuing

70
00:02:59,459 --> 00:03:04,140
error and sends the Sigma's to the

71
00:03:01,620 --> 00:03:06,600
application to notify it many

72
00:03:04,140 --> 00:03:09,569
applications are not ready to handle SiC

73
00:03:06,600 --> 00:03:11,640
bus especially from resistant memory the

74
00:03:09,569 --> 00:03:13,410
consequence is that many of them will

75
00:03:11,640 --> 00:03:16,529
crash and that they will lose data

76
00:03:13,410 --> 00:03:18,989
caused by the error to repair this type

77
00:03:16,530 --> 00:03:22,049
of error the application needs to handle

78
00:03:18,989 --> 00:03:24,299
sick bus and use some source of backup

79
00:03:22,049 --> 00:03:27,000
to repair the corruption and to

80
00:03:24,299 --> 00:03:28,680
overwrite the affected memory range then

81
00:03:27,000 --> 00:03:31,890
the persistent memory teams will get

82
00:03:28,680 --> 00:03:35,040
repaired data and remap it to some good

83
00:03:31,890 --> 00:03:37,529
spare memory cells the last type of

84
00:03:35,040 --> 00:03:39,840
error is not even detectable by the

85
00:03:37,530 --> 00:03:42,299
hardware ECC there can be some MIDI

86
00:03:39,840 --> 00:03:44,459
errors that accidentally escapes the ECC

87
00:03:42,299 --> 00:03:46,019
check all there can be some software

88
00:03:44,459 --> 00:03:48,630
into starers that are transparent

89
00:03:46,019 --> 00:03:50,640
through the memory controller this type

90
00:03:48,630 --> 00:03:53,670
of error will reload in corrupted data

91
00:03:50,640 --> 00:03:55,230
being delivered to the application if

92
00:03:53,670 --> 00:03:57,388
the application does not have any

93
00:03:55,230 --> 00:03:59,459
software detection and a correction

94
00:03:57,389 --> 00:04:02,569
mechanism it will consume the data and

95
00:03:59,459 --> 00:04:05,910
have unpredictable consequences

96
00:04:02,569 --> 00:04:07,980
therefore from software perspective it

97
00:04:05,910 --> 00:04:09,989
needs to be aware of uncorrectable and

98
00:04:07,980 --> 00:04:10,500
undetectable errors and handle them

99
00:04:09,989 --> 00:04:12,959
properly

100
00:04:10,500 --> 00:04:15,410
this requires having some source of

101
00:04:12,959 --> 00:04:17,639
redundancy to repair corruption and

102
00:04:15,410 --> 00:04:19,978
implementing some software based error

103
00:04:17,639 --> 00:04:24,240
detection and correction mechanism that

104
00:04:19,978 --> 00:04:26,159
works in addition to Hardware ECC you

105
00:04:24,240 --> 00:04:28,889
probably wonder conventionally we use

106
00:04:26,160 --> 00:04:31,229
file systems to provide protection for

107
00:04:28,889 --> 00:04:34,680
persistent data why not keep relying on

108
00:04:31,229 --> 00:04:37,500
them well we know some file systems for

109
00:04:34,680 --> 00:04:40,380
example Nova can provide protection for

110
00:04:37,500 --> 00:04:41,970
distant memory data but the county do so

111
00:04:40,380 --> 00:04:44,550
through its read and write interface

112
00:04:41,970 --> 00:04:47,070
where the data transfer is still managed

113
00:04:44,550 --> 00:04:49,290
by the file system if the application

114
00:04:47,070 --> 00:04:51,990
memory maps the file it is essentially

115
00:04:49,290 --> 00:04:54,000
bypasses the file system so if the file

116
00:04:51,990 --> 00:04:56,100
system code is not running it's very

117
00:04:54,000 --> 00:04:59,610
difficult for it to protect memory

118
00:04:56,100 --> 00:05:02,310
mapped persistent data as a result the

119
00:04:59,610 --> 00:05:04,740
application either has to handle all the

120
00:05:02,310 --> 00:05:06,960
error complications by itself or we can

121
00:05:04,740 --> 00:05:09,750
design a little memory program library

122
00:05:06,960 --> 00:05:12,840
to simplify this task that gives us

123
00:05:09,750 --> 00:05:13,410
motivation to develop tangling in

124
00:05:12,840 --> 00:05:16,229
Pangolin

125
00:05:13,410 --> 00:05:18,450
we aim to both ensure crash consistency

126
00:05:16,230 --> 00:05:20,870
and also protect application data

127
00:05:18,450 --> 00:05:23,789
against media and software errors

128
00:05:20,870 --> 00:05:25,980
meanwhile Pangolin aims to incur as a

129
00:05:23,790 --> 00:05:29,550
low as possible storage overhead for

130
00:05:25,980 --> 00:05:32,430
providing fault tolerance at high level

131
00:05:29,550 --> 00:05:35,540
Pangolin combines replication and parity

132
00:05:32,430 --> 00:05:38,250
as redundancy to repair corruption a

133
00:05:35,540 --> 00:05:40,560
naive approach to application is to

134
00:05:38,250 --> 00:05:41,430
simply duplicate all the data in a

135
00:05:40,560 --> 00:05:43,680
separate file

136
00:05:41,430 --> 00:05:45,470
apparently this doubles the storage

137
00:05:43,680 --> 00:05:48,720
requirement for persistent memory

138
00:05:45,470 --> 00:05:51,450
instead pombaline only replicates its

139
00:05:48,720 --> 00:05:53,820
metadata in the object store which

140
00:05:51,450 --> 00:05:56,550
consists of allocation bitmaps and our

141
00:05:53,820 --> 00:05:58,979
transaction logs and it uses parity to

142
00:05:56,550 --> 00:06:01,440
protect arbitrary size randomly

143
00:05:58,979 --> 00:06:03,810
distributed object data the metadata

144
00:06:01,440 --> 00:06:06,419
replication and object parity

145
00:06:03,810 --> 00:06:08,160
together only incur about 1% storage

146
00:06:06,419 --> 00:06:11,700
overhead for a quickie by the sized

147
00:06:08,160 --> 00:06:14,370
object store Pangolin checksums always

148
00:06:11,700 --> 00:06:18,030
made the data and object data to detect

149
00:06:14,370 --> 00:06:20,490
hardware and detectable errors when

150
00:06:18,030 --> 00:06:23,130
adding parity and checksums to a object

151
00:06:20,490 --> 00:06:25,350
store a challenge comes up as how to

152
00:06:23,130 --> 00:06:28,469
maintain the consistency between related

153
00:06:25,350 --> 00:06:31,020
parts when modifying PMM objects in

154
00:06:28,470 --> 00:06:34,050
Panchgani when application wants to

155
00:06:31,020 --> 00:06:35,700
modify PMM objects we copy their data

156
00:06:34,050 --> 00:06:38,070
into DRAM based

157
00:06:35,700 --> 00:06:40,229
object level buffers we call them macro

158
00:06:38,070 --> 00:06:42,030
buffers the application can freely

159
00:06:40,229 --> 00:06:44,430
modify the buffered objects without

160
00:06:42,030 --> 00:06:47,280
concerning about the checksum or parity

161
00:06:44,430 --> 00:06:49,380
consistency later when the transaction

162
00:06:47,280 --> 00:06:51,539
commits Pangolin writes the modified

163
00:06:49,380 --> 00:06:53,700
objects back to their original location

164
00:06:51,540 --> 00:06:55,950
and automatically refreshes their

165
00:06:53,700 --> 00:06:58,920
checksums and corresponding party

166
00:06:55,950 --> 00:07:00,900
rangers in a failure Tomic way in the

167
00:06:58,920 --> 00:07:03,450
remaining slides I will first show how

168
00:07:00,900 --> 00:07:05,340
Pangolin organizes this data and then I

169
00:07:03,450 --> 00:07:09,420
will explain some implementation details

170
00:07:05,340 --> 00:07:11,609
of the transaction noctilum Pangolin

171
00:07:09,420 --> 00:07:13,070
creates a object store using memory

172
00:07:11,610 --> 00:07:15,480
mapped for distant memory foul

173
00:07:13,070 --> 00:07:17,730
instruction mapping Pangolin first

174
00:07:15,480 --> 00:07:20,970
reserved space for its metadata

175
00:07:17,730 --> 00:07:23,340
replication then virtually divides all

176
00:07:20,970 --> 00:07:25,920
the data pages into equally sized the

177
00:07:23,340 --> 00:07:28,409
rows a row contains the set of pages

178
00:07:25,920 --> 00:07:32,100
that are continuous in address space and

179
00:07:28,410 --> 00:07:35,580
the row size is 1% of a data zone size

180
00:07:32,100 --> 00:07:37,980
is only the term we borrowed from Libman

181
00:07:35,580 --> 00:07:41,729
Bob to reference a huge memory block for

182
00:07:37,980 --> 00:07:44,040
object allocation zone size is 16

183
00:07:41,730 --> 00:07:47,610
gigabytes in both little knobs and

184
00:07:44,040 --> 00:07:49,590
Pangolin so penguins row size is 116

185
00:07:47,610 --> 00:07:52,440
megabytes and for each data zone

186
00:07:49,590 --> 00:07:55,799
Pangolin reserves one row as object

187
00:07:52,440 --> 00:07:58,560
parity we call them rules because

188
00:07:55,800 --> 00:08:00,930
penguin views all data pages of data

189
00:07:58,560 --> 00:08:03,150
zone as a two-dimensional array and it

190
00:08:00,930 --> 00:08:05,940
computes parity vertically across all

191
00:08:03,150 --> 00:08:09,179
the rows that means a page from the

192
00:08:05,940 --> 00:08:12,330
party row is the exclusive or result of

193
00:08:09,180 --> 00:08:14,460
all the data pages of the same color but

194
00:08:12,330 --> 00:08:17,789
doing this we can afford losing one

195
00:08:14,460 --> 00:08:20,789
whole row of data and repair it using

196
00:08:17,790 --> 00:08:23,430
the parity row and other data rows of

197
00:08:20,790 --> 00:08:25,320
the same zone we can also adjust the

198
00:08:23,430 --> 00:08:28,620
number of rows to make a trade-off

199
00:08:25,320 --> 00:08:31,969
between the storage overhead and the

200
00:08:28,620 --> 00:08:34,590
maximum amount of data we can repair

201
00:08:31,970 --> 00:08:37,530
admission Pangolin introduces macro

202
00:08:34,590 --> 00:08:39,270
buffering to provide transactions when

203
00:08:37,530 --> 00:08:40,228
the application wants to modify a

204
00:08:39,270 --> 00:08:42,500
premium object

205
00:08:40,229 --> 00:08:45,450
Pangolin creates its macro buffer and

206
00:08:42,500 --> 00:08:47,610
transfers the objects data from PMM to

207
00:08:45,450 --> 00:08:50,130
its buffer in this process

208
00:08:47,610 --> 00:08:52,980
Pangolin installs signal handler to

209
00:08:50,130 --> 00:08:55,110
watch for sigmaz and verifies the object

210
00:08:52,980 --> 00:08:57,630
Chesham to detect hardware and

211
00:08:55,110 --> 00:09:00,120
detectable errors if it traps a signal

212
00:08:57,630 --> 00:09:02,730
or finds the checks on mismatch Pangolin

213
00:09:00,120 --> 00:09:05,010
tries to repair the object or the page

214
00:09:02,730 --> 00:09:07,920
using the parity row and other day

215
00:09:05,010 --> 00:09:10,140
the rows of the same date album if the

216
00:09:07,920 --> 00:09:12,300
data is good or it's a successfully

217
00:09:10,140 --> 00:09:14,880
repaired the application can freely

218
00:09:12,300 --> 00:09:17,310
modify this object as it does in

219
00:09:14,880 --> 00:09:20,010
conventional TDM programming this

220
00:09:17,310 --> 00:09:23,569
animation shows the object modifies the

221
00:09:20,010 --> 00:09:25,920
range of object one highlighted by t1

222
00:09:23,570 --> 00:09:27,930
the committee process of a Pangolin

223
00:09:25,920 --> 00:09:31,020
transaction consists of several other

224
00:09:27,930 --> 00:09:34,589
steps first it refreshes the object

225
00:09:31,020 --> 00:09:37,530
Chesham in its macro buffer then it logs

226
00:09:34,590 --> 00:09:39,990
both the updated checksum and the model

227
00:09:37,530 --> 00:09:42,089
range using grid to login and replicates

228
00:09:39,990 --> 00:09:44,790
all the login trees for protecting login

229
00:09:42,090 --> 00:09:46,800
data after logging Pangolin starts

230
00:09:44,790 --> 00:09:49,319
updating parity which I will explain in

231
00:09:46,800 --> 00:09:52,229
the following slides and finally it

232
00:09:49,320 --> 00:09:54,450
writes the checksum and multiple range

233
00:09:52,230 --> 00:09:56,850
back to their original locations to

234
00:09:54,450 --> 00:09:58,620
complete the transaction although we

235
00:09:56,850 --> 00:10:00,840
only show a single object reduction here

236
00:09:58,620 --> 00:10:02,820
Pangolin also supports multi object

237
00:10:00,840 --> 00:10:05,040
transactions and we have made the

238
00:10:02,820 --> 00:10:09,180
program interface very similar to what

239
00:10:05,040 --> 00:10:11,339
Libyan mob provides some green starts

240
00:10:09,180 --> 00:10:14,339
updating party after transaction logging

241
00:10:11,340 --> 00:10:16,950
for each mode value range in transaction

242
00:10:14,340 --> 00:10:19,050
Pangolin first computes the XOR

243
00:10:16,950 --> 00:10:21,780
difference between modify the range in

244
00:10:19,050 --> 00:10:24,599
macro buffer and the correspondingly and

245
00:10:21,780 --> 00:10:27,709
multi range in pmm to get a parity patch

246
00:10:24,600 --> 00:10:31,040
then it applies this parity patch to the

247
00:10:27,710 --> 00:10:34,110
corresponding pedi range in the partiro

248
00:10:31,040 --> 00:10:36,180
Pangolin does not have to read data from

249
00:10:34,110 --> 00:10:39,480
other data rows to update a range of

250
00:10:36,180 --> 00:10:43,079
parity it abuse the modify the checksum

251
00:10:39,480 --> 00:10:44,970
as one extra multiple range of object

252
00:10:43,080 --> 00:10:47,100
so for cleanest I'm now drawing the

253
00:10:44,970 --> 00:10:50,670
checksum or the replicated login trees

254
00:10:47,100 --> 00:10:53,010
from this slide after pair the updating

255
00:10:50,670 --> 00:10:56,400
Pangolin updates the multiple range to

256
00:10:53,010 --> 00:10:58,530
finish your transaction in the current

257
00:10:56,400 --> 00:11:00,780
version Pangolin we do not log the

258
00:10:58,530 --> 00:11:02,970
parity change it's a power failure

259
00:11:00,780 --> 00:11:05,520
causes partial parity update this can

260
00:11:02,970 --> 00:11:07,110
only happen after Pangolin has all the

261
00:11:05,520 --> 00:11:09,260
transaction logging but before

262
00:11:07,110 --> 00:11:12,450
transaction completes in this case

263
00:11:09,260 --> 00:11:14,550
restart Pangolin first applies all the

264
00:11:12,450 --> 00:11:17,430
redo log entries to their corresponding

265
00:11:14,550 --> 00:11:18,689
objects and then it reads data from all

266
00:11:17,430 --> 00:11:23,069
the data rows to

267
00:11:18,690 --> 00:11:25,440
recompute the affected party range for

268
00:11:23,070 --> 00:11:27,630
multi-threaded applications Pangolin

269
00:11:25,440 --> 00:11:30,270
needs a way to coordinate parity updates

270
00:11:27,630 --> 00:11:30,810
if multiple ranges share a segment of

271
00:11:30,270 --> 00:11:32,939
parity

272
00:11:30,810 --> 00:11:35,130
this slide shows two threads

273
00:11:32,940 --> 00:11:38,190
concurrently executing two transactions

274
00:11:35,130 --> 00:11:40,350
modifying object one and object seven

275
00:11:38,190 --> 00:11:42,780
independently but there are multiple

276
00:11:40,350 --> 00:11:46,200
ranges overlap in the column direction

277
00:11:42,780 --> 00:11:47,930
so they share a range of parity to

278
00:11:46,200 --> 00:11:50,610
update this range our parity

279
00:11:47,930 --> 00:11:53,510
straightforward method is to log a pair

280
00:11:50,610 --> 00:11:56,700
the range and serialize parity updates

281
00:11:53,510 --> 00:12:00,120
between threads this works but it's

282
00:11:56,700 --> 00:12:02,310
sacrificing scalability alternatively we

283
00:12:00,120 --> 00:12:06,270
can use atomic XOR instructions to

284
00:12:02,310 --> 00:12:08,780
update 30 atomic instruction can update

285
00:12:06,270 --> 00:12:11,460
up to eight bytes of data atomically

286
00:12:08,780 --> 00:12:13,199
because parity words are independent of

287
00:12:11,460 --> 00:12:15,900
each other at the launch we can update

288
00:12:13,200 --> 00:12:18,720
each party word independently we can use

289
00:12:15,900 --> 00:12:21,569
atomic attacks or instructions to update

290
00:12:18,720 --> 00:12:25,050
arbitrarily sized parity range in lock

291
00:12:21,570 --> 00:12:27,420
free way however the downside of atomic

292
00:12:25,050 --> 00:12:29,670
or instructions is that they can be

293
00:12:27,420 --> 00:12:32,370
slower than the regular ones or the

294
00:12:29,670 --> 00:12:34,920
vectorized version so to cut benefits of

295
00:12:32,370 --> 00:12:38,370
both words Pangolin implements a hybrid

296
00:12:34,920 --> 00:12:40,829
scheme using both methods it uses the

297
00:12:38,370 --> 00:12:43,620
multiple ranger size to decide which

298
00:12:40,830 --> 00:12:46,080
method to use and it uses shared mutex

299
00:12:43,620 --> 00:12:48,560
or with the red blocks to coordinate

300
00:12:46,080 --> 00:12:51,630
both methods within locked parity range

301
00:12:48,560 --> 00:12:54,689
for small updates for example less than

302
00:12:51,630 --> 00:12:58,470
8 kilobytes threads can take a shared

303
00:12:54,690 --> 00:13:00,780
ownership of parity range lock and use

304
00:12:58,470 --> 00:13:01,380
the atomic as or instructions to update

305
00:13:00,780 --> 00:13:03,620
parity

306
00:13:01,380 --> 00:13:06,660
within this range concurrently for

307
00:13:03,620 --> 00:13:09,600
updates larger than 8 kilobytes asteroid

308
00:13:06,660 --> 00:13:11,670
has to take exclusive locks of one or

309
00:13:09,600 --> 00:13:13,620
multiple parity ranges and use a

310
00:13:11,670 --> 00:13:16,170
vectorized xor instructions to get

311
00:13:13,620 --> 00:13:18,360
better performance the threshold for

312
00:13:16,170 --> 00:13:20,400
switching methods is based on protocol

313
00:13:18,360 --> 00:13:25,260
measurement and it can vary between

314
00:13:20,400 --> 00:13:28,170
machines we implement the Pangolin on

315
00:13:25,260 --> 00:13:30,780
top of a libyan Bob and the we compare

316
00:13:28,170 --> 00:13:32,280
it to both little knobs and thus

317
00:13:30,780 --> 00:13:33,870
replicate the version

318
00:13:32,280 --> 00:13:36,089
we evaluated performance using a

319
00:13:33,870 --> 00:13:37,650
platform with Intel's opt-in DC

320
00:13:36,090 --> 00:13:40,110
resistance memory modules

321
00:13:37,650 --> 00:13:42,480
this figure shows transaction latency is

322
00:13:40,110 --> 00:13:45,090
for overwriting a single object of

323
00:13:42,480 --> 00:13:47,580
different sizes the bars from left to

324
00:13:45,090 --> 00:13:50,190
right represent Lippe mobs its

325
00:13:47,580 --> 00:13:52,080
replicated version and Pangolin we

326
00:13:50,190 --> 00:13:54,300
observe that libya mob Schrage

327
00:13:52,080 --> 00:13:56,910
replication not hungry doubles the

328
00:13:54,300 --> 00:13:59,699
storage requirement but also often makes

329
00:13:56,910 --> 00:14:02,760
the performance more than twice Wars in

330
00:13:59,700 --> 00:14:06,260
Hungary its latency is Yellin 11 percent

331
00:14:02,760 --> 00:14:08,790
lower than Libyan mob with replication

332
00:14:06,260 --> 00:14:12,180
we also evaluate pangolins performance

333
00:14:08,790 --> 00:14:14,490
using complex data structures that

334
00:14:12,180 --> 00:14:16,770
involve multiple objects the two figures

335
00:14:14,490 --> 00:14:19,610
show average insertion and removal

336
00:14:16,770 --> 00:14:21,660
agencies for 6 map and data structures

337
00:14:19,610 --> 00:14:24,450
for this mapping data structures

338
00:14:21,660 --> 00:14:27,449
pangolins performance is 90 percent of

339
00:14:24,450 --> 00:14:30,450
Libyan mobs with replication the reason

340
00:14:27,450 --> 00:14:32,700
for some lost performance is that some

341
00:14:30,450 --> 00:14:34,650
data structures are large but a

342
00:14:32,700 --> 00:14:37,260
transaction only modifies a small part

343
00:14:34,650 --> 00:14:39,810
of it in this case Pangolin pays more

344
00:14:37,260 --> 00:14:41,880
for the data movement from p.m. to the

345
00:14:39,810 --> 00:14:44,430
macro buffer than it gains from

346
00:14:41,880 --> 00:14:47,220
operating a whole object as a previous

347
00:14:44,430 --> 00:14:49,469
slide shows considering penguin uses

348
00:14:47,220 --> 00:14:51,930
much less space overhead for providing

349
00:14:49,470 --> 00:14:53,940
fault tolerance and it provides object

350
00:14:51,930 --> 00:14:55,829
checksums to detect hardware and the

351
00:14:53,940 --> 00:14:59,580
taxpayers we consider this as a

352
00:14:55,830 --> 00:15:01,980
reasonable performance trade-off in

353
00:14:59,580 --> 00:15:03,570
conclusion we believe persistent memory

354
00:15:01,980 --> 00:15:05,730
programming libraries should also

355
00:15:03,570 --> 00:15:07,710
consider for tolerance for critical

356
00:15:05,730 --> 00:15:10,800
applications and we have developed

357
00:15:07,710 --> 00:15:12,990
Pangolin as a response with bungling we

358
00:15:10,800 --> 00:15:15,150
found that parody based redundancy can

359
00:15:12,990 --> 00:15:17,400
provide similar performance compared to

360
00:15:15,150 --> 00:15:20,040
replication and meanwhile significantly

361
00:15:17,400 --> 00:15:21,839
reduce the storage requirement we also

362
00:15:20,040 --> 00:15:23,910
observe that micro buffering bitch

363
00:15:21,839 --> 00:15:25,740
collections can both support the correct

364
00:15:23,910 --> 00:15:28,189
consistency and also provides fault

365
00:15:25,740 --> 00:15:30,780
tolerance for emergency medications

366
00:15:28,190 --> 00:15:34,200
that's all my talk thanks for listening

367
00:15:30,780 --> 00:15:39,150
and I'm glad to take any questions

368
00:15:34,200 --> 00:15:41,850
[Applause]

369
00:15:39,150 --> 00:15:44,500
let me start through questions so you

370
00:15:41,850 --> 00:15:47,170
explained that the how penguin is going

371
00:15:44,500 --> 00:15:49,690
to handle the two different threat try

372
00:15:47,170 --> 00:15:51,910
to modify the different object I have

373
00:15:49,690 --> 00:15:53,800
how the penguin handles that the if the

374
00:15:51,910 --> 00:15:56,680
two different threat tried to access and

375
00:15:53,800 --> 00:15:59,410
modify the same object is the micro

376
00:15:56,680 --> 00:16:02,800
buffer is going to be shared so our

377
00:15:59,410 --> 00:16:06,810
macro buffer by default its thread local

378
00:16:02,800 --> 00:16:09,520
so if to stress so the supports

379
00:16:06,810 --> 00:16:12,640
multiplying different objects so if

380
00:16:09,520 --> 00:16:16,860
stress how to modify the same object

381
00:16:12,640 --> 00:16:19,620
they have to manage concurrency

382
00:16:16,860 --> 00:16:22,450
explicitly so we do not support

383
00:16:19,620 --> 00:16:25,240
transparent currently modifying the same

384
00:16:22,450 --> 00:16:27,279
object so it's the same limitation as in

385
00:16:25,240 --> 00:16:28,839
the P mob because there are two

386
00:16:27,279 --> 00:16:30,970
transactions multiplying the same the

387
00:16:28,839 --> 00:16:33,610
overlapping range can call some kind of

388
00:16:30,970 --> 00:16:34,210
inconsistency if one commits but the

389
00:16:33,610 --> 00:16:39,720
other fails

390
00:16:34,210 --> 00:16:43,870
I wonder what size transactions were you

391
00:16:39,720 --> 00:16:46,030
thinking that this was for but size

392
00:16:43,870 --> 00:16:49,600
transactions were you contemplating that

393
00:16:46,030 --> 00:16:51,370
this would be used for what size object

394
00:16:49,600 --> 00:16:53,589
would be typically being oh it can be

395
00:16:51,370 --> 00:16:56,770
any size as long as the allocator

396
00:16:53,589 --> 00:16:58,600
supports so for very small transactions

397
00:16:56,770 --> 00:17:00,579
do you know if the Intel transactional

398
00:16:58,600 --> 00:17:02,490
memory support runs on this hardware and

399
00:17:00,580 --> 00:17:06,280
did you compare that with what you did

400
00:17:02,490 --> 00:17:10,870
Intel transaction transactional memory

401
00:17:06,280 --> 00:17:13,329
right so that it doesn't work out of a

402
00:17:10,869 --> 00:17:16,899
box for transactional memory because

403
00:17:13,329 --> 00:17:19,000
that works at cache level so it it

404
00:17:16,900 --> 00:17:21,569
doesn't handle per distance so you can

405
00:17:19,000 --> 00:17:24,220
modify a cache line using that

406
00:17:21,569 --> 00:17:27,339
transaction instructions but it doesn't

407
00:17:24,220 --> 00:17:29,470
guarantee crash consistency so there are

408
00:17:27,339 --> 00:17:31,750
some related works talking about how to

409
00:17:29,470 --> 00:17:35,290
mix that work together with present

410
00:17:31,750 --> 00:17:37,990
memory so in our work we don't we don't

411
00:17:35,290 --> 00:17:41,530
use that do transactions but we do use

412
00:17:37,990 --> 00:17:43,390
that to optimize some implement

413
00:17:41,530 --> 00:17:45,580
implementation for example we use the

414
00:17:43,390 --> 00:17:48,510
hardware lock Eliran to do the reader

415
00:17:45,580 --> 00:17:51,629
read lock talk to him as that

416
00:17:48,510 --> 00:17:53,370
just to avoid taking the logs in some

417
00:17:51,630 --> 00:17:54,780
other poppin it's the kissing and I

418
00:17:53,370 --> 00:17:56,699
don't know the technology is there any

419
00:17:54,780 --> 00:17:59,160
significant where in this memory or

420
00:17:56,700 --> 00:18:04,950
where is not a factor you mean we're out

421
00:17:59,160 --> 00:18:08,220
yeah I we don't have data yet but my

422
00:18:04,950 --> 00:18:13,410
guess is because it's much denser media

423
00:18:08,220 --> 00:18:17,220
so writing kind I mean we're out can be

424
00:18:13,410 --> 00:18:19,679
a problem for for this device I wonder

425
00:18:17,220 --> 00:18:21,540
if we're could be an issue then the

426
00:18:19,679 --> 00:18:24,330
parity area is gonna wear much less oh

427
00:18:21,540 --> 00:18:27,990
that's area this is this is a valid

428
00:18:24,330 --> 00:18:29,909
concern so we we assume the memory

429
00:18:27,990 --> 00:18:32,549
controller and the position memory teams

430
00:18:29,910 --> 00:18:35,220
will have some hardware based very

431
00:18:32,549 --> 00:18:37,830
leveling back to them so they will remap

432
00:18:35,220 --> 00:18:43,950
things around to avoid over over overly

433
00:18:37,830 --> 00:18:45,840
and wrecking the same range okay if

434
00:18:43,950 --> 00:18:47,400
there is no other questions less things

435
00:18:45,840 --> 00:18:52,109
to speak up once again

436
00:18:47,400 --> 00:18:52,109
[Applause]

