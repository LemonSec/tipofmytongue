1
00:00:10,160 --> 00:00:14,810
q for the introduction and welcome to

2
00:00:12,980 --> 00:00:18,230
the last stock and the virtualization

3
00:00:14,810 --> 00:00:22,130
flavors session where I hope you'll get

4
00:00:18,230 --> 00:00:24,500
a taste of virtual networking so this is

5
00:00:22,130 --> 00:00:27,020
work that I did with my colleague from T

6
00:00:24,500 --> 00:00:28,520
Oberlin Santa Mach Gabor at Bari from

7
00:00:27,020 --> 00:00:31,520
the Budapest University of Technology

8
00:00:28,520 --> 00:00:35,870
and economics and stefan schmidt from

9
00:00:31,520 --> 00:00:38,629
the university of vienna so virtual

10
00:00:35,870 --> 00:00:40,610
networks in multi-tenant clouds are

11
00:00:38,629 --> 00:00:43,460
typically created using a piece of

12
00:00:40,610 --> 00:00:47,360
software that's running in the host OS

13
00:00:43,460 --> 00:00:49,280
called virtual switches and these

14
00:00:47,360 --> 00:00:52,729
virtual switches are programmed to

15
00:00:49,280 --> 00:00:56,540
connect the different VMs on a server as

16
00:00:52,729 --> 00:00:58,760
well as across servers so that the

17
00:00:56,540 --> 00:01:02,479
different tenants or appear to have a

18
00:00:58,760 --> 00:01:05,539
network under their control isolation

19
00:01:02,479 --> 00:01:08,420
between the different VMs is enforced at

20
00:01:05,540 --> 00:01:12,159
the virtual switch by configuring it

21
00:01:08,420 --> 00:01:15,920
with flow rules or forwarding rules as

22
00:01:12,159 --> 00:01:17,899
well as a tunneling protocol like VX LAN

23
00:01:15,920 --> 00:01:22,039
for connectivity and isolation across

24
00:01:17,899 --> 00:01:24,740
the servers and so in the past 10 years

25
00:01:22,039 --> 00:01:28,399
there have been about more than 20 V

26
00:01:24,740 --> 00:01:32,000
switches out there and most of the

27
00:01:28,399 --> 00:01:34,700
designs have been or have emphasized or

28
00:01:32,000 --> 00:01:36,950
programmability or performance and so

29
00:01:34,700 --> 00:01:39,320
for my research it was interesting to

30
00:01:36,950 --> 00:01:42,829
look at the security aspect of these

31
00:01:39,320 --> 00:01:44,809
systems and so we've actually uncovered

32
00:01:42,829 --> 00:01:49,490
quite a few security weaknesses of

33
00:01:44,810 --> 00:01:52,520
virtual switches so let's look at the

34
00:01:49,490 --> 00:01:55,669
first one which is the fact that virtual

35
00:01:52,520 --> 00:01:59,289
switches directly process untrusted data

36
00:01:55,670 --> 00:02:02,539
so malicious vm can actually send

37
00:01:59,289 --> 00:02:07,399
packets to the v switch that it would

38
00:02:02,539 --> 00:02:11,180
process next we have the fact that the V

39
00:02:07,399 --> 00:02:14,330
switch as a component is privileged so

40
00:02:11,180 --> 00:02:17,240
the packet parsing which is quite a

41
00:02:14,330 --> 00:02:19,460
large attack surface it happens either

42
00:02:17,240 --> 00:02:21,590
in the kernel or if running in user

43
00:02:19,460 --> 00:02:26,780
space is running with

44
00:02:21,590 --> 00:02:29,540
root or as sudo next we have the fact

45
00:02:26,780 --> 00:02:33,050
that virtual network configuration is

46
00:02:29,540 --> 00:02:35,329
actually quite complex and so the V

47
00:02:33,050 --> 00:02:37,400
switch is there's just one V switch on

48
00:02:35,330 --> 00:02:40,129
the host and that can be a single point

49
00:02:37,400 --> 00:02:42,650
of failure so if you have a miss

50
00:02:40,129 --> 00:02:45,200
configuration on the V smudge that could

51
00:02:42,650 --> 00:02:47,810
lead to a security miss configuration

52
00:02:45,200 --> 00:02:50,890
issue and so you could have one ten inch

53
00:02:47,810 --> 00:02:53,569
traffic leakin to another tenants and

54
00:02:50,890 --> 00:02:55,670
finally the most important is the fact

55
00:02:53,569 --> 00:02:59,208
that the V switches oftentimes

56
00:02:55,670 --> 00:03:02,630
co-located with the host OS and so an

57
00:02:59,209 --> 00:03:04,370
attacker if she can compromise the V

58
00:03:02,630 --> 00:03:09,079
switch actually can break out of

59
00:03:04,370 --> 00:03:12,079
isolation and also spread as a worm as

60
00:03:09,079 --> 00:03:13,640
we demonstrated with open V switch where

61
00:03:12,079 --> 00:03:16,790
there was a buffer overflow

62
00:03:13,640 --> 00:03:19,160
vulnerability in the MPLS packet parsing

63
00:03:16,790 --> 00:03:22,400
that we could exploit to not only break

64
00:03:19,160 --> 00:03:25,430
out of the VM but also spread across a

65
00:03:22,400 --> 00:03:28,340
data center for example like OpenStack

66
00:03:25,430 --> 00:03:29,780
and we could show within about a couple

67
00:03:28,340 --> 00:03:35,900
of minutes you can take down about

68
00:03:29,780 --> 00:03:38,150
hundred servers so this work or the

69
00:03:35,900 --> 00:03:40,459
paper at 80 C actually talks about how

70
00:03:38,150 --> 00:03:42,230
we can prevent or address those security

71
00:03:40,459 --> 00:03:45,260
weaknesses which I'll talk about next

72
00:03:42,230 --> 00:03:48,828
and then we look at what our performance

73
00:03:45,260 --> 00:03:50,630
evaluation and then something that's not

74
00:03:48,829 --> 00:03:52,400
in the paper is how we can scale this

75
00:03:50,630 --> 00:03:54,730
system and then I'll talk about some of

76
00:03:52,400 --> 00:03:56,840
the pros and cons and then conclude

77
00:03:54,730 --> 00:03:58,819
alright so if you've been wondering what

78
00:03:56,840 --> 00:04:00,799
MTR stands for it stands for multi

79
00:03:58,819 --> 00:04:02,630
tenant switch we actually had some

80
00:04:00,799 --> 00:04:04,370
discussion on what to call this it was

81
00:04:02,630 --> 00:04:09,019
initially called M switch but that was

82
00:04:04,370 --> 00:04:10,849
taken and so we changed it and so mts is

83
00:04:09,019 --> 00:04:14,750
actually based on secure design

84
00:04:10,849 --> 00:04:17,358
principles meant to address all those

85
00:04:14,750 --> 00:04:20,630
security weaknesses so the first one is

86
00:04:17,358 --> 00:04:22,880
a lease privilege virtual switch which

87
00:04:20,630 --> 00:04:24,770
addresses the problem of collocating the

88
00:04:22,880 --> 00:04:27,710
V switch with the host and so we move

89
00:04:24,770 --> 00:04:30,770
the V switch out of the host and into a

90
00:04:27,710 --> 00:04:35,000
virtual machine and so even if the V

91
00:04:30,770 --> 00:04:37,760
switch VM is compromised the host is not

92
00:04:35,000 --> 00:04:39,980
and to address the point of or to

93
00:04:37,760 --> 00:04:42,650
address the single point of failure we

94
00:04:39,980 --> 00:04:45,470
have the least common mechanism so we

95
00:04:42,650 --> 00:04:48,650
create multiple V switch VMs and so even

96
00:04:45,470 --> 00:04:50,330
if one we switch a VM is compromised the

97
00:04:48,650 --> 00:04:54,710
compromised tenants are restricted to

98
00:04:50,330 --> 00:04:57,859
that specific or tenants VM this also

99
00:04:54,710 --> 00:05:01,930
has the benefit of reducing our tenant

100
00:04:57,860 --> 00:05:06,560
specific virtual network configuration

101
00:05:01,930 --> 00:05:09,230
next to add a extra security boundary we

102
00:05:06,560 --> 00:05:12,970
run the V switch in user space so for

103
00:05:09,230 --> 00:05:16,190
example running OVS with DP DK and

104
00:05:12,970 --> 00:05:18,590
finally we have what's what's called

105
00:05:16,190 --> 00:05:20,750
complete mediation so to connect all

106
00:05:18,590 --> 00:05:23,659
these different or V switch VMs and the

107
00:05:20,750 --> 00:05:26,180
tenant VMs we use what's called a single

108
00:05:23,660 --> 00:05:29,410
route IO virtualization network card in

109
00:05:26,180 --> 00:05:34,220
short sr io b and this implements a

110
00:05:29,410 --> 00:05:37,010
simple Ethernet switch or bridge in the

111
00:05:34,220 --> 00:05:39,830
network card that also supports VLAN

112
00:05:37,010 --> 00:05:42,890
tagging and you can think of the switch

113
00:05:39,830 --> 00:05:45,590
this switch in the NIC having ports in

114
00:05:42,890 --> 00:05:49,000
SR io v called virtual functions that

115
00:05:45,590 --> 00:05:52,219
you can attach to the different VMs and

116
00:05:49,000 --> 00:05:54,650
to isolate the difference a tenant so

117
00:05:52,220 --> 00:05:57,470
like over here the red and blue you can

118
00:05:54,650 --> 00:06:00,320
configure all those sports or VMs with a

119
00:05:57,470 --> 00:06:04,580
specific VLAN tag so you have isolation

120
00:06:00,320 --> 00:06:09,590
at the layer two and so putting all this

121
00:06:04,580 --> 00:06:12,770
together we compared this with the

122
00:06:09,590 --> 00:06:15,169
baseline so running for example open V

123
00:06:12,770 --> 00:06:19,280
switch in the host OS versus our

124
00:06:15,169 --> 00:06:19,669
solution and for the SR io v network

125
00:06:19,280 --> 00:06:23,020
card

126
00:06:19,669 --> 00:06:25,940
we used a Mellanox connect x4 NIC and

127
00:06:23,020 --> 00:06:28,760
like I mentioned for the V switch or the

128
00:06:25,940 --> 00:06:31,760
virtual switch we used open V switch to

129
00:06:28,760 --> 00:06:35,390
run that and user space we use OBS with

130
00:06:31,760 --> 00:06:38,390
DP DK and we ran a bunch of standard BMS

131
00:06:35,390 --> 00:06:40,520
using Q mu and KBM there were several

132
00:06:38,390 --> 00:06:42,500
factors that we had to consider for the

133
00:06:40,520 --> 00:06:44,900
evaluation but over here I'm just going

134
00:06:42,500 --> 00:06:49,180
to talk about two of them the first is

135
00:06:44,900 --> 00:06:51,799
how we allocated resources in particular

136
00:06:49,180 --> 00:06:54,860
we had a couple of ways of doing this

137
00:06:51,800 --> 00:06:58,160
and we'd like to just emphasize the

138
00:06:54,860 --> 00:07:01,280
shared resource mode where we have the

139
00:06:58,160 --> 00:07:03,380
host OS pinned to a single course so in

140
00:07:01,280 --> 00:07:05,479
case of running the baseline we had OVS

141
00:07:03,380 --> 00:07:07,850
running in the host and that was spin to

142
00:07:05,480 --> 00:07:11,900
a physical core and then we had our

143
00:07:07,850 --> 00:07:15,830
system empty s with one or more V switch

144
00:07:11,900 --> 00:07:20,229
VMs and all those VMs were pinned to a

145
00:07:15,830 --> 00:07:23,810
dedicated core apart from the host OS

146
00:07:20,230 --> 00:07:29,030
the tenant VMs were got their own course

147
00:07:23,810 --> 00:07:30,740
so the reason for that was so that the

148
00:07:29,030 --> 00:07:35,390
tenant VMs wouldn't actually be a

149
00:07:30,740 --> 00:07:37,520
bottleneck in our evaluation which

150
00:07:35,390 --> 00:07:40,280
brings me to the traffic pattern so we

151
00:07:37,520 --> 00:07:40,849
had three typical patterns over here the

152
00:07:40,280 --> 00:07:43,609
p2p

153
00:07:40,850 --> 00:07:45,710
which is pure software switching the p2v

154
00:07:43,610 --> 00:07:48,290
so the packet goes all the way up to the

155
00:07:45,710 --> 00:07:51,349
VM in this case and then we have the V

156
00:07:48,290 --> 00:07:53,090
to V which kind of emulated some kind of

157
00:07:51,350 --> 00:07:55,130
service function chain so it would go to

158
00:07:53,090 --> 00:07:59,869
like for our firewall and then to the

159
00:07:55,130 --> 00:08:02,659
actual host for example okay so with

160
00:07:59,870 --> 00:08:05,150
this kind of resource mode and traffic

161
00:08:02,660 --> 00:08:08,570
patterns we actually did we made several

162
00:08:05,150 --> 00:08:10,820
measurements and I just like to share

163
00:08:08,570 --> 00:08:14,300
the results from the throughput

164
00:08:10,820 --> 00:08:17,210
measurements um the first being a raw

165
00:08:14,300 --> 00:08:20,810
packet processing performance and over

166
00:08:17,210 --> 00:08:23,479
here we have 64 byte UDP packets being

167
00:08:20,810 --> 00:08:26,330
sent and we measured how fast these

168
00:08:23,480 --> 00:08:30,980
systems could actually forward those

169
00:08:26,330 --> 00:08:32,720
packets and so you have on the x-axis or

170
00:08:30,980 --> 00:08:35,750
the three different traffic patterns so

171
00:08:32,720 --> 00:08:38,990
the p2p P 2 V and V 2 V and on the

172
00:08:35,750 --> 00:08:41,929
y-axis we have the forwarded throughput

173
00:08:38,990 --> 00:08:47,330
and you have three clusters over here

174
00:08:41,929 --> 00:08:49,790
and though the dark gray bar is our

175
00:08:47,330 --> 00:08:53,120
baseline as you can see over there and

176
00:08:49,790 --> 00:08:55,069
then the green is single V switch VM and

177
00:08:53,120 --> 00:08:57,080
the orange when we have two V switch

178
00:08:55,070 --> 00:09:00,410
PM's and the blue is when we have four

179
00:08:57,080 --> 00:09:02,430
and so you can see in the p2p the true

180
00:09:00,410 --> 00:09:06,150
part of our system compared to base

181
00:09:02,430 --> 00:09:10,650
is roughly the same but when we look at

182
00:09:06,150 --> 00:09:13,140
the p2v we can see that mts actually has

183
00:09:10,650 --> 00:09:16,500
about double the throughput of the

184
00:09:13,140 --> 00:09:18,930
baseline even though we've kind of added

185
00:09:16,500 --> 00:09:22,050
extra layers of security which was quite

186
00:09:18,930 --> 00:09:24,719
a cool result for us and when we thought

187
00:09:22,050 --> 00:09:27,870
about it the reason for this improvement

188
00:09:24,720 --> 00:09:30,270
is because all the packets now go

189
00:09:27,870 --> 00:09:33,570
through the PCIe bus rather than through

190
00:09:30,270 --> 00:09:36,750
software and so essentially by we've

191
00:09:33,570 --> 00:09:38,550
increased security for maybe a single

192
00:09:36,750 --> 00:09:41,250
core but we've also increased

193
00:09:38,550 --> 00:09:43,199
performance which is really cool so this

194
00:09:41,250 --> 00:09:47,310
is just packet processing but when we

195
00:09:43,200 --> 00:09:50,970
look at Network applications as well we

196
00:09:47,310 --> 00:09:55,349
see something similar so again we don't

197
00:09:50,970 --> 00:09:58,140
have a 2x increase but about 1.5 - 2 and

198
00:09:55,350 --> 00:10:03,990
we can see that again with apache and

199
00:09:58,140 --> 00:10:05,939
memcache D ok so the key takeaway like I

200
00:10:03,990 --> 00:10:09,000
mentioned is that for an extra physical

201
00:10:05,940 --> 00:10:12,720
core we could get up to 4 times network

202
00:10:09,000 --> 00:10:16,560
isolation and about 1.5 - 2 X increase

203
00:10:12,720 --> 00:10:20,340
in throughput so this was just running

204
00:10:16,560 --> 00:10:24,719
like 4 V switch VMs but in a real cloud

205
00:10:20,340 --> 00:10:28,470
made probably want to run many more B

206
00:10:24,720 --> 00:10:30,990
switches so we started playing around

207
00:10:28,470 --> 00:10:34,140
with running V switch containers in

208
00:10:30,990 --> 00:10:37,890
these VMs and so far we've been able to

209
00:10:34,140 --> 00:10:41,490
successfully run 12 V switches spread

210
00:10:37,890 --> 00:10:44,850
across 4 VMs there seems to be some

211
00:10:41,490 --> 00:10:48,900
issue with qmu and attaching about more

212
00:10:44,850 --> 00:10:50,940
than 36 v FS to VMs and so we were

213
00:10:48,900 --> 00:10:54,180
hoping we could run at least 16 beefs

214
00:10:50,940 --> 00:10:56,820
which container spread across 4 VMs but

215
00:10:54,180 --> 00:10:58,229
there seems to be an issue with that we

216
00:10:56,820 --> 00:11:02,010
still have to evaluate the performance

217
00:10:58,230 --> 00:11:04,790
of this ok which brings me to the pros

218
00:11:02,010 --> 00:11:07,140
and cons of course everything is not

219
00:11:04,790 --> 00:11:09,990
always pretty there are some downsides

220
00:11:07,140 --> 00:11:12,390
to this the first thing or primarily

221
00:11:09,990 --> 00:11:16,200
because of the fact that we use SR io v

222
00:11:12,390 --> 00:11:17,939
and by using SR Iove

223
00:11:16,200 --> 00:11:21,290
since all packets now go through the PCI

224
00:11:17,940 --> 00:11:26,820
bus that could become a bottleneck right

225
00:11:21,290 --> 00:11:29,430
and when we go about like 40 gigs or 100

226
00:11:26,820 --> 00:11:31,830
gigs this could be an issue but we

227
00:11:29,430 --> 00:11:33,630
haven't evaluated that yet second is the

228
00:11:31,830 --> 00:11:36,270
fact that the number of VFS on the

229
00:11:33,630 --> 00:11:38,520
Knicks are limited and so that could

230
00:11:36,270 --> 00:11:42,510
potentially be an issue when scaling and

231
00:11:38,520 --> 00:11:45,240
if you want to do a life migration with

232
00:11:42,510 --> 00:11:49,290
obvious there's currently no clean

233
00:11:45,240 --> 00:11:51,390
solution for that yet however the

234
00:11:49,290 --> 00:11:53,310
benefits of the solution I think are

235
00:11:51,390 --> 00:11:56,490
really cool especially when you think

236
00:11:53,310 --> 00:12:01,140
about silver less where you want to be

237
00:11:56,490 --> 00:12:03,480
able to accurately charge customers for

238
00:12:01,140 --> 00:12:05,550
tenant specifics a virtual networking

239
00:12:03,480 --> 00:12:08,300
which wasn't really possible when you

240
00:12:05,550 --> 00:12:14,310
have the V switch running in the host

241
00:12:08,300 --> 00:12:16,260
and it also brings in the possibility to

242
00:12:14,310 --> 00:12:18,750
now run different V switches for

243
00:12:16,260 --> 00:12:22,500
different tenants so if someone wants to

244
00:12:18,750 --> 00:12:24,540
run a specific software switch that has

245
00:12:22,500 --> 00:12:27,480
some feature that's not supported by

246
00:12:24,540 --> 00:12:30,000
obvious you can now do that you could

247
00:12:27,480 --> 00:12:32,100
also reduce the attack surface by for

248
00:12:30,000 --> 00:12:35,490
example reducing the packet parsing

249
00:12:32,100 --> 00:12:39,150
logic of the different of V switches in

250
00:12:35,490 --> 00:12:42,720
the different tenants and so with that

251
00:12:39,150 --> 00:12:45,600
I'd like to conclude and I think the key

252
00:12:42,720 --> 00:12:47,970
takeaways over here are that there are

253
00:12:45,600 --> 00:12:51,870
several V switches out there that have

254
00:12:47,970 --> 00:12:53,730
security weaknesses and our solution mts

255
00:12:51,870 --> 00:12:55,920
which is based on secure design

256
00:12:53,730 --> 00:13:00,510
principles addresses those weaknesses

257
00:12:55,920 --> 00:13:02,969
and when combined with SR Iove not only

258
00:13:00,510 --> 00:13:06,840
increases the security but also the

259
00:13:02,970 --> 00:13:12,240
performance for a modest increase in

260
00:13:06,840 --> 00:13:15,090
resources all the scripts data and VMs

261
00:13:12,240 --> 00:13:21,080
that we used for this evaluation are on

262
00:13:15,090 --> 00:13:21,080
github so please check it out that's it

263
00:13:24,340 --> 00:13:33,500
thank you I intend birds up University

264
00:13:31,520 --> 00:13:35,240
of california-irvine so I'm just curious

265
00:13:33,500 --> 00:13:37,040
so what happens if you find a buffer

266
00:13:35,240 --> 00:13:42,530
overflow inside the network firmware

267
00:13:37,040 --> 00:13:44,780
network card firmware yes so in our

268
00:13:42,530 --> 00:13:48,380
threat model the network card is part of

269
00:13:44,780 --> 00:13:50,810
the TCB so of course since our solution

270
00:13:48,380 --> 00:13:54,439
relies on trusting the network card if

271
00:13:50,810 --> 00:13:57,979
that's exploited the system can be

272
00:13:54,440 --> 00:13:59,720
exploited in tangible terms do you

273
00:13:57,980 --> 00:14:01,700
believe the complexity of the code

274
00:13:59,720 --> 00:14:04,130
running on the network card is the same

275
00:14:01,700 --> 00:14:07,700
as open with which I mean you just moved

276
00:14:04,130 --> 00:14:10,400
it to a different hardware so we got a

277
00:14:07,700 --> 00:14:13,990
similar like comment in our reviews as

278
00:14:10,400 --> 00:14:19,790
well I'm not sure if that was you but

279
00:14:13,990 --> 00:14:22,030
I'm not sure right there I mean so at

280
00:14:19,790 --> 00:14:24,650
least the way I understand it is that

281
00:14:22,030 --> 00:14:28,130
anyway the network card is part of the

282
00:14:24,650 --> 00:14:31,189
TCB in the cloud so whether there is a

283
00:14:28,130 --> 00:14:34,040
bug that can be exploited or not it can

284
00:14:31,190 --> 00:14:35,690
be exploited of course so we just say

285
00:14:34,040 --> 00:14:36,740
you know you're already trusting your

286
00:14:35,690 --> 00:14:40,250
NIC firmware

287
00:14:36,740 --> 00:14:43,580
I mean adding the simple layer to bridge

288
00:14:40,250 --> 00:14:47,920
into the network card with the SRV is in

289
00:14:43,580 --> 00:14:47,920
our opinion not gonna change much you

290
00:14:51,400 --> 00:14:55,510
I am her Gupta from Georgia Tech do

291
00:14:53,980 --> 00:14:57,100
you have any thoughts about how this

292
00:14:55,510 --> 00:14:59,470
would increase the cost of the provider

293
00:14:57,100 --> 00:15:01,690
because now there's a there is a CPU

294
00:14:59,470 --> 00:15:04,600
constantly pulling and it might even

295
00:15:01,690 --> 00:15:06,790
hurt the lifetime of that CPU core so

296
00:15:04,600 --> 00:15:09,910
that's a good question and I think like

297
00:15:06,790 --> 00:15:11,980
using DP DK for example it's yeah it's

298
00:15:09,910 --> 00:15:14,920
normally constantly polling you have now

299
00:15:11,980 --> 00:15:18,160
your energy prices going up so at least

300
00:15:14,920 --> 00:15:21,640
the results that I shared right now

301
00:15:18,160 --> 00:15:26,290
maybe I didn't explicitly state that was

302
00:15:21,640 --> 00:15:28,360
without using OBS with DP D K so this

303
00:15:26,290 --> 00:15:31,060
was not running it and userspace just

304
00:15:28,360 --> 00:15:36,310
running it in a VM my results actually

305
00:15:31,060 --> 00:15:38,380
showed that it is yeah it depends yeah

306
00:15:36,310 --> 00:15:40,689
but it's quite expensive to use the PDA

307
00:15:38,380 --> 00:15:44,800
cause you also have to pay a price in

308
00:15:40,690 --> 00:15:49,840
resources then which maybe doesn't work

309
00:15:44,800 --> 00:15:53,380
out thank you great book Thanks question

310
00:15:49,840 --> 00:15:56,950
is there a quantitative way to say how

311
00:15:53,380 --> 00:16:00,040
much you improve security yeah I mean so

312
00:15:56,950 --> 00:16:04,260
measuring the increase in security is I

313
00:16:00,040 --> 00:16:08,530
think it's always like firmware

314
00:16:04,260 --> 00:16:10,720
including from yeah it's really hard I'd

315
00:16:08,530 --> 00:16:12,520
love to do that I mean people say okay

316
00:16:10,720 --> 00:16:14,590
let's count the number of lines of code

317
00:16:12,520 --> 00:16:20,020
and then you can say okay we've reduced

318
00:16:14,590 --> 00:16:22,510
the TCP in this way I don't know

319
00:16:20,020 --> 00:16:25,240
actually like the way we've done it is

320
00:16:22,510 --> 00:16:26,800
mainly argumentative but I would be

321
00:16:25,240 --> 00:16:28,510
interested to think about it a little

322
00:16:26,800 --> 00:16:33,969
more to have some kind of quantitative

323
00:16:28,510 --> 00:16:35,590
way of measuring this thank you the

324
00:16:33,970 --> 00:16:37,000
thing the speaker again and all the

325
00:16:35,590 --> 00:16:41,269
other speakers in the session

326
00:16:37,000 --> 00:16:41,269
[Applause]

