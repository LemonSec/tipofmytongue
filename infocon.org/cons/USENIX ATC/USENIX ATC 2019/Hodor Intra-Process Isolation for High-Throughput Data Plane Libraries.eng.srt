1
00:00:10,400 --> 00:00:13,910
okay thank you for the introduction and

2
00:00:12,410 --> 00:00:15,620
thank you everybody for being here in

3
00:00:13,910 --> 00:00:16,520
this presentation I'm going to be

4
00:00:15,620 --> 00:00:19,310
talking about

5
00:00:16,520 --> 00:00:21,560
work Hodor a system designed to provide

6
00:00:19,310 --> 00:00:23,779
intra process isolation for data plane

7
00:00:21,560 --> 00:00:26,150
libraries this is a collaboration with

8
00:00:23,780 --> 00:00:27,290
speed oleg revani ethan Johnson John

9
00:00:26,150 --> 00:00:29,419
Criswell and Michael Scott from

10
00:00:27,290 --> 00:00:31,970
University of Rochester and Cohen and

11
00:00:29,420 --> 00:00:35,450
Mike Marty from Google in

12
00:00:31,970 --> 00:00:37,040
conventionalized stack design our access

13
00:00:35,450 --> 00:00:39,020
to device is mediated basically by

14
00:00:37,040 --> 00:00:41,390
operating system Kenneth it's the

15
00:00:39,020 --> 00:00:44,120
responsibility of OS to multiplex

16
00:00:41,390 --> 00:00:46,820
devices and enable sharing of resources

17
00:00:44,120 --> 00:00:49,309
among applications as well as enforce

18
00:00:46,820 --> 00:00:52,430
fairness security and reliability

19
00:00:49,310 --> 00:00:56,120
policies among applications these

20
00:00:52,430 --> 00:00:57,760
policies might for example prevent an

21
00:00:56,120 --> 00:01:00,019
application from monopolizing the device

22
00:00:57,760 --> 00:01:02,690
protect applications from corrupting

23
00:01:00,020 --> 00:01:05,890
each other's data and recover the state

24
00:01:02,690 --> 00:01:09,289
of the application after a power failure

25
00:01:05,890 --> 00:01:12,020
the OS is able to provide these

26
00:01:09,290 --> 00:01:15,410
guarantees without needing to trust the

27
00:01:12,020 --> 00:01:17,840
applications since it is protected from

28
00:01:15,410 --> 00:01:22,310
malicious or buggy applications through

29
00:01:17,840 --> 00:01:24,229
user kernel isolation however as devices

30
00:01:22,310 --> 00:01:25,700
with microsecond latencies and

31
00:01:24,229 --> 00:01:28,209
throughputs of millions of AI ops

32
00:01:25,700 --> 00:01:31,459
made their way into data centers people

33
00:01:28,209 --> 00:01:33,709
started to move oil stacks out of the

34
00:01:31,459 --> 00:01:36,170
kernel and into user space usually

35
00:01:33,709 --> 00:01:38,780
implemented as libraries this allows for

36
00:01:36,170 --> 00:01:41,660
lower latency and higher throughput it

37
00:01:38,780 --> 00:01:43,009
allows for rapid development cycles

38
00:01:41,660 --> 00:01:45,860
because it's easier to write code in

39
00:01:43,009 --> 00:01:48,520
user space and specifically is it allows

40
00:01:45,860 --> 00:01:50,869
for specialization say you don't need

41
00:01:48,520 --> 00:01:52,399
all the features that cannot stack

42
00:01:50,869 --> 00:01:54,950
provides you can roll your own and you

43
00:01:52,399 --> 00:01:57,530
can basically simplify it and in a gain

44
00:01:54,950 --> 00:02:00,170
performance this way we loosely call all

45
00:01:57,530 --> 00:02:03,170
of these libraries data plane libraries

46
00:02:00,170 --> 00:02:07,729
it could include Network libraries like

47
00:02:03,170 --> 00:02:10,580
DP D K s P D K for storage but also in

48
00:02:07,729 --> 00:02:12,620
memory key value stores or non-volatile

49
00:02:10,580 --> 00:02:19,459
memory libraries that guarantee that you

50
00:02:12,620 --> 00:02:21,200
can recover after a power failure so the

51
00:02:19,459 --> 00:02:23,120
problem is that if data player in

52
00:02:21,200 --> 00:02:25,459
libraries are simply mapped into the

53
00:02:23,120 --> 00:02:27,770
user space applications address space

54
00:02:25,460 --> 00:02:29,990
the lack of isolation means that any

55
00:02:27,770 --> 00:02:30,410
guarantee that these libraries are

56
00:02:29,990 --> 00:02:35,480
provide

57
00:02:30,410 --> 00:02:36,710
is effectively void a vulnerability like

58
00:02:35,480 --> 00:02:39,649
a straight pointer in the main

59
00:02:36,710 --> 00:02:43,490
application can crop the state that is

60
00:02:39,650 --> 00:02:45,890
maintained by these libraries or even

61
00:02:43,490 --> 00:02:48,560
worse malicious application can

62
00:02:45,890 --> 00:02:51,350
completely circumvent these libraries

63
00:02:48,560 --> 00:02:54,370
and accesses device directly and finally

64
00:02:51,350 --> 00:02:56,859
because of this lack of isolation

65
00:02:54,370 --> 00:02:59,150
multiplexing the underlying resources

66
00:02:56,860 --> 00:03:03,020
when you are using data plane libraries

67
00:02:59,150 --> 00:03:04,730
to access the device is basically very

68
00:03:03,020 --> 00:03:08,630
challenging when applications are

69
00:03:04,730 --> 00:03:10,369
distrusting ok so now that we have

70
00:03:08,630 --> 00:03:12,470
established what data plane libraries

71
00:03:10,370 --> 00:03:14,390
are and why they are important why they

72
00:03:12,470 --> 00:03:19,820
are going to become even more important

73
00:03:14,390 --> 00:03:21,920
in the future and that we need isolation

74
00:03:19,820 --> 00:03:23,510
to share data in libraries I'm going to

75
00:03:21,920 --> 00:03:26,380
talk about our solution to provide

76
00:03:23,510 --> 00:03:28,220
isolation without basically negating

77
00:03:26,380 --> 00:03:31,010
everything that you are basically

78
00:03:28,220 --> 00:03:33,560
reaping from doing kernel bypass for the

79
00:03:31,010 --> 00:03:35,600
rest of the talk will focus on our work

80
00:03:33,560 --> 00:03:39,080
on Hodor first I will describe the

81
00:03:35,600 --> 00:03:41,480
high-level design of holder then I will

82
00:03:39,080 --> 00:03:44,810
show how we achieve fast memory

83
00:03:41,480 --> 00:03:48,859
isolation using Intel protection keys

84
00:03:44,810 --> 00:03:51,440
for user space and then we show the

85
00:03:48,860 --> 00:03:55,270
experimental evaluations and finally we

86
00:03:51,440 --> 00:03:57,980
conclude and discuss future direction ok

87
00:03:55,270 --> 00:04:00,260
in order to achieve isolation we

88
00:03:57,980 --> 00:04:03,079
introduce protected library as a new OS

89
00:04:00,260 --> 00:04:05,209
abstraction holder partitions

90
00:04:03,080 --> 00:04:08,330
application into multiple domains of

91
00:04:05,209 --> 00:04:10,550
executable code each domain is granted

92
00:04:08,330 --> 00:04:12,290
access to some part of the address space

93
00:04:10,550 --> 00:04:14,150
and denied access to some other parts of

94
00:04:12,290 --> 00:04:15,859
the address space each domain has a

95
00:04:14,150 --> 00:04:19,070
private stack it can also have private

96
00:04:15,860 --> 00:04:20,900
heap but also shares access to some part

97
00:04:19,070 --> 00:04:23,300
of address space for efficient

98
00:04:20,899 --> 00:04:25,880
communication with other domains in this

99
00:04:23,300 --> 00:04:28,090
figure you see the main application in a

100
00:04:25,880 --> 00:04:31,460
separate domain from network and storage

101
00:04:28,090 --> 00:04:35,210
protected libraries which have their own

102
00:04:31,460 --> 00:04:38,450
domain but the point is that any access

103
00:04:35,210 --> 00:04:41,090
to either of these storage or networking

104
00:04:38,450 --> 00:04:43,960
device has to go through the appropriate

105
00:04:41,090 --> 00:04:46,630
library the interaction

106
00:04:43,960 --> 00:04:49,150
between the application and the

107
00:04:46,630 --> 00:04:51,789
libraries is like it was before through

108
00:04:49,150 --> 00:04:57,609
function calls and returns following the

109
00:04:51,789 --> 00:05:00,340
standard calling convention however in

110
00:04:57,610 --> 00:05:02,889
order to ensure isolation these

111
00:05:00,340 --> 00:05:05,530
transitions are mediated by a trampoline

112
00:05:02,889 --> 00:05:07,900
that switches to the appropriate domain

113
00:05:05,530 --> 00:05:11,739
before handling handing over the

114
00:05:07,900 --> 00:05:13,419
execution to the library you can think

115
00:05:11,740 --> 00:05:15,550
of trampolines as wrappers for the

116
00:05:13,419 --> 00:05:18,130
exported api of the protected library

117
00:05:15,550 --> 00:05:21,699
and in our solution they are inserted

118
00:05:18,130 --> 00:05:26,759
automatically by our program load but

119
00:05:21,699 --> 00:05:28,990
they can also be inserted at link time

120
00:05:26,759 --> 00:05:32,800
trampolines also need to safely switch

121
00:05:28,990 --> 00:05:34,720
stack copy arguments to maintain calling

122
00:05:32,800 --> 00:05:37,539
Convention and also scrub registers to

123
00:05:34,720 --> 00:05:45,039
make sure that we are not leaking

124
00:05:37,539 --> 00:05:46,870
information okay let's take a look at

125
00:05:45,039 --> 00:05:48,370
the process of using holder so if you

126
00:05:46,870 --> 00:05:50,229
want to use holder what what are the

127
00:05:48,370 --> 00:05:52,539
steps that you have to take to start

128
00:05:50,229 --> 00:05:54,580
with our design doesn't require the main

129
00:05:52,539 --> 00:05:57,669
application to be modified that's

130
00:05:54,580 --> 00:06:00,008
because this is the default policy the

131
00:05:57,669 --> 00:06:03,729
application shares its entire memory of

132
00:06:00,009 --> 00:06:05,590
space we protected library so it trusts

133
00:06:03,729 --> 00:06:07,449
the protected library of course if

134
00:06:05,590 --> 00:06:09,698
you're not happy with that you can

135
00:06:07,449 --> 00:06:11,560
change the application in order to share

136
00:06:09,699 --> 00:06:13,690
only parts of it with protected

137
00:06:11,560 --> 00:06:17,469
libraries the only codes that need to be

138
00:06:13,690 --> 00:06:20,460
ported to holder or the protected

139
00:06:17,469 --> 00:06:22,630
libraries this is required because the

140
00:06:20,460 --> 00:06:24,630
protected library needs to use

141
00:06:22,630 --> 00:06:27,310
appropriate flags to indicate to us

142
00:06:24,630 --> 00:06:30,969
memory regions that need to be shared

143
00:06:27,310 --> 00:06:33,190
with the application and it also needs

144
00:06:30,969 --> 00:06:34,960
to indicate information on exported API

145
00:06:33,190 --> 00:06:37,419
so that the loader can insert

146
00:06:34,960 --> 00:06:38,650
appropriate trampolines at load time in

147
00:06:37,419 --> 00:06:40,630
our experiment these

148
00:06:38,650 --> 00:06:42,330
these changes are relatively

149
00:06:40,630 --> 00:06:45,940
straightforward and this for the

150
00:06:42,330 --> 00:06:47,650
protected libraries that we used two

151
00:06:45,940 --> 00:06:50,409
main components of our design are

152
00:06:47,650 --> 00:06:54,219
holders loader and the modification that

153
00:06:50,409 --> 00:06:55,870
we added to the Linux kernel the job of

154
00:06:54,219 --> 00:06:57,780
the loader is to basically parse the

155
00:06:55,870 --> 00:06:59,850
information that comes with the

156
00:06:57,780 --> 00:07:02,760
protected library some metadata that we

157
00:06:59,850 --> 00:07:04,830
add and load the library in its own

158
00:07:02,760 --> 00:07:07,230
domain insert the trampolines initialize

159
00:07:04,830 --> 00:07:09,840
the library it will also communicate the

160
00:07:07,230 --> 00:07:11,250
address space layout with the with the

161
00:07:09,840 --> 00:07:13,469
camera so that during the course of

162
00:07:11,250 --> 00:07:19,020
execution the kennel can guarantee the

163
00:07:13,470 --> 00:07:20,430
integrity of basically this setting in

164
00:07:19,020 --> 00:07:22,349
the next part I'm going to be talking

165
00:07:20,430 --> 00:07:27,150
about how we achieve fast memory

166
00:07:22,350 --> 00:07:30,240
isolation to protect libraries starting

167
00:07:27,150 --> 00:07:31,830
with the slight skylake espy intel

168
00:07:30,240 --> 00:07:34,680
introduced protection keys for user

169
00:07:31,830 --> 00:07:37,289
space also known as memory protection

170
00:07:34,680 --> 00:07:39,600
keys or in PK which enables an address

171
00:07:37,290 --> 00:07:43,050
space to be partitioned to 16 different

172
00:07:39,600 --> 00:07:45,060
domains it introduces for previously

173
00:07:43,050 --> 00:07:48,150
unused bits in the page table structure

174
00:07:45,060 --> 00:07:50,790
called P key to identify which domain a

175
00:07:48,150 --> 00:07:53,940
page belongs to and the 32 bit register

176
00:07:50,790 --> 00:07:57,980
called peek-a-ru to disable access all

177
00:07:53,940 --> 00:08:00,360
right to each of the 16 domains

178
00:07:57,980 --> 00:08:03,210
indicated by the speaky it also

179
00:08:00,360 --> 00:08:05,610
introduces to unprivileged instruction

180
00:08:03,210 --> 00:08:09,870
for reading and writing to the picker

181
00:08:05,610 --> 00:08:12,710
you register this week I showed how

182
00:08:09,870 --> 00:08:16,770
peek-a-ru affects the access permission

183
00:08:12,710 --> 00:08:19,650
of a page on a memory access basically

184
00:08:16,770 --> 00:08:21,810
we use TLB and the cache translation

185
00:08:19,650 --> 00:08:24,539
determines the legacy permission to the

186
00:08:21,810 --> 00:08:27,419
page it also determines which protection

187
00:08:24,540 --> 00:08:29,790
domain this page belongs to using the P

188
00:08:27,419 --> 00:08:33,030
key value then we used this P key value

189
00:08:29,790 --> 00:08:36,030
to basically look up into the bigger you

190
00:08:33,030 --> 00:08:38,610
register to determine PK or u

191
00:08:36,030 --> 00:08:40,620
permissions for that domain then the

192
00:08:38,610 --> 00:08:43,919
final access write is going to be the

193
00:08:40,620 --> 00:08:48,060
intersection of legacy and pickier

194
00:08:43,919 --> 00:08:50,339
permission as it turns out the PK

195
00:08:48,060 --> 00:08:52,469
feature can be directly used to provide

196
00:08:50,339 --> 00:08:54,990
different protection domains in holder

197
00:08:52,470 --> 00:08:57,000
the loader basically needs to assign

198
00:08:54,990 --> 00:08:58,820
appropriate peak is to pages based on

199
00:08:57,000 --> 00:09:01,230
which protection domain they belong to

200
00:08:58,820 --> 00:09:03,060
either they are application or the

201
00:09:01,230 --> 00:09:05,190
protected library and which protected by

202
00:09:03,060 --> 00:09:08,010
library and the trampoline needs to

203
00:09:05,190 --> 00:09:10,240
grant or deny accesses appropriately

204
00:09:08,010 --> 00:09:14,360
using the peek-a-ru register

205
00:09:10,240 --> 00:09:16,640
transitioning into an out of domain the

206
00:09:14,360 --> 00:09:18,080
example in this figure shows each domain

207
00:09:16,640 --> 00:09:19,790
with a different color next to the

208
00:09:18,080 --> 00:09:22,730
application and the libraries you see

209
00:09:19,790 --> 00:09:25,819
the keys representing the domains that

210
00:09:22,730 --> 00:09:27,410
they can access with the corresponding

211
00:09:25,820 --> 00:09:29,150
color for example here the main

212
00:09:27,410 --> 00:09:31,850
application can only access its own

213
00:09:29,150 --> 00:09:33,829
domain while protected Network library

214
00:09:31,850 --> 00:09:36,320
can access both its own and the

215
00:09:33,830 --> 00:09:41,720
applications to me unfortunately this

216
00:09:36,320 --> 00:09:44,210
design is not safe so why not because

217
00:09:41,720 --> 00:09:46,010
the instruction that modifies PQR you

218
00:09:44,210 --> 00:09:49,820
register which is the right peek-a-ru

219
00:09:46,010 --> 00:09:51,380
instruction is unprivileged so we cannot

220
00:09:49,820 --> 00:09:54,230
guarantee that the access rights are

221
00:09:51,380 --> 00:09:57,170
granted only when transitioning through

222
00:09:54,230 --> 00:09:59,840
the trampoline continuing with the

223
00:09:57,170 --> 00:10:03,110
previous example a malicious application

224
00:09:59,840 --> 00:10:05,720
can grant itself access to domain of

225
00:10:03,110 --> 00:10:09,920
protected Network library by using the

226
00:10:05,720 --> 00:10:11,720
right to carry instruction here okay in

227
00:10:09,920 --> 00:10:14,930
order to ensure the application can

228
00:10:11,720 --> 00:10:17,180
never brand itself right to right that

229
00:10:14,930 --> 00:10:19,300
has not been intended by hodor we have

230
00:10:17,180 --> 00:10:21,650
to ensure any right peek-a-ru

231
00:10:19,300 --> 00:10:23,630
instruction outside of trampoline that

232
00:10:21,650 --> 00:10:25,280
we craft and we insert and we guarantee

233
00:10:23,630 --> 00:10:28,220
that they are they cannot be used in

234
00:10:25,280 --> 00:10:31,459
malicious way or vetted to this end

235
00:10:28,220 --> 00:10:33,140
holder inspects all executable pages at

236
00:10:31,460 --> 00:10:36,550
low time or whenever during the course

237
00:10:33,140 --> 00:10:39,590
of execution that they become executable

238
00:10:36,550 --> 00:10:41,719
looking for the byte sequence that can

239
00:10:39,590 --> 00:10:44,900
be used to execute write the carrier

240
00:10:41,720 --> 00:10:47,600
instruction since it is undecidable to

241
00:10:44,900 --> 00:10:50,840
know in advance for x86 at least whether

242
00:10:47,600 --> 00:10:52,820
such a three byte sequence is a real

243
00:10:50,840 --> 00:10:56,320
instance of right we hear you as opposed

244
00:10:52,820 --> 00:10:58,970
to data embedded in code or spanning

245
00:10:56,320 --> 00:11:01,550
legitimate instructions we do not rely

246
00:10:58,970 --> 00:11:04,400
on this assembly of the executable

247
00:11:01,550 --> 00:11:06,979
region and mark all these occurrences as

248
00:11:04,400 --> 00:11:12,680
potentially malicious in the example

249
00:11:06,980 --> 00:11:14,390
here on the left you can see an intended

250
00:11:12,680 --> 00:11:18,349
use of right bakery from Lipsy and on

251
00:11:14,390 --> 00:11:20,750
the right and implicit instance spanning

252
00:11:18,350 --> 00:11:23,870
neighboring instructions however since

253
00:11:20,750 --> 00:11:25,970
the control flow can be violated too

254
00:11:23,870 --> 00:11:28,040
basically start in the middle of the

255
00:11:25,970 --> 00:11:32,180
load effective address instruction we

256
00:11:28,040 --> 00:11:34,640
need to vet this instances as well once

257
00:11:32,180 --> 00:11:36,770
all of these illegal instances we have

258
00:11:34,640 --> 00:11:38,960
once they have been identified who do

259
00:11:36,770 --> 00:11:41,600
relies on hardware watch points or debug

260
00:11:38,960 --> 00:11:44,300
registers to read the execution of all

261
00:11:41,600 --> 00:11:46,490
right peek-a-ru instructions outside of

262
00:11:44,300 --> 00:11:47,900
trampoline a hardware watch point is

263
00:11:46,490 --> 00:11:50,270
going to be programmed basically to

264
00:11:47,900 --> 00:11:52,490
point to the beginning of this three

265
00:11:50,270 --> 00:11:54,949
byte sequence and it will cause an

266
00:11:52,490 --> 00:11:59,570
exception if and when the sequence is

267
00:11:54,950 --> 00:12:02,270
used as right PTR instruction note that

268
00:11:59,570 --> 00:12:04,880
data access if you have data embedded in

269
00:12:02,270 --> 00:12:08,960
the code or in the case of implicit

270
00:12:04,880 --> 00:12:10,570
instances like this figure correctly

271
00:12:08,960 --> 00:12:13,820
aligned execution will not cause

272
00:12:10,570 --> 00:12:15,980
exception but the problem is that we

273
00:12:13,820 --> 00:12:17,720
have only a limited number of hardware

274
00:12:15,980 --> 00:12:20,680
watch points we have only foreign Intel

275
00:12:17,720 --> 00:12:22,880
processors because of this we use the

276
00:12:20,680 --> 00:12:25,609
hardware watchman this set of hardware

277
00:12:22,880 --> 00:12:28,700
watch point as the cache for the set of

278
00:12:25,610 --> 00:12:33,890
potentially illegal sequence so when we

279
00:12:28,700 --> 00:12:36,040
map a page that is that has this illegal

280
00:12:33,890 --> 00:12:39,560
sequence we map it as non-executable

281
00:12:36,040 --> 00:12:41,329
upon the first access the hardware bar

282
00:12:39,560 --> 00:12:43,910
watch points are going to be reclaimed

283
00:12:41,330 --> 00:12:45,890
and used to point to these instances and

284
00:12:43,910 --> 00:12:49,550
from that point on the page is going to

285
00:12:45,890 --> 00:12:51,380
be marked as executable or until we need

286
00:12:49,550 --> 00:12:54,589
to reclaim these registers again if we

287
00:12:51,380 --> 00:12:56,360
have a - in extremely rare case that

288
00:12:54,589 --> 00:12:58,339
there are more than the number of watch

289
00:12:56,360 --> 00:13:00,050
point instances in a single page we have

290
00:12:58,339 --> 00:13:04,959
to basically do single step through the

291
00:13:00,050 --> 00:13:09,020
page so what is the cost of getting the

292
00:13:04,959 --> 00:13:10,550
right behavior use so there are

293
00:13:09,020 --> 00:13:12,770
different categories that you know I

294
00:13:10,550 --> 00:13:15,469
want to go one by one

295
00:13:12,770 --> 00:13:17,510
note that implicit instances are never

296
00:13:15,470 --> 00:13:20,420
really executed I mean unless your

297
00:13:17,510 --> 00:13:23,540
program is already hijacked or never

298
00:13:20,420 --> 00:13:25,910
triggered so there's no waiting cost for

299
00:13:23,540 --> 00:13:29,240
that applications that we only need to

300
00:13:25,910 --> 00:13:32,959
use PK or peek-a-ru for

301
00:13:29,240 --> 00:13:35,630
internal isolation they need to use this

302
00:13:32,959 --> 00:13:38,180
API using the P key set function from

303
00:13:35,630 --> 00:13:39,950
Lipsy to change the picture you register

304
00:13:38,180 --> 00:13:42,739
and we have modified the P key set in

305
00:13:39,950 --> 00:13:43,760
Lipsy to guarantee it cannot be

306
00:13:42,740 --> 00:13:45,380
exploited

307
00:13:43,760 --> 00:13:48,140
so we also don't need to read these

308
00:13:45,380 --> 00:13:50,060
instances and our experiment also shows

309
00:13:48,140 --> 00:13:51,800
that there is no measurable overhead as

310
00:13:50,060 --> 00:13:55,099
long as the number of hot illegal

311
00:13:51,800 --> 00:13:58,189
instruction sequence hot hot

312
00:13:55,100 --> 00:14:01,070
illegal sequence or fewer than the

313
00:13:58,190 --> 00:14:04,700
available number of wash points to put

314
00:14:01,070 --> 00:14:07,610
that into perspective we inspected RPM

315
00:14:04,700 --> 00:14:09,589
packages on Fedora distribution which

316
00:14:07,610 --> 00:14:12,410
amounts to more than 100 thousand

317
00:14:09,589 --> 00:14:16,640
executable and libraries within these

318
00:14:12,410 --> 00:14:19,939
binaries we found only 123 binaries with

319
00:14:16,640 --> 00:14:22,430
one or more instances of illegal byte

320
00:14:19,940 --> 00:14:26,120
sequence only two of which have more

321
00:14:22,430 --> 00:14:28,520
than for instance therefore we don't

322
00:14:26,120 --> 00:14:30,440
expect the limited number of hardware

323
00:14:28,520 --> 00:14:32,660
watch points to cause any significant

324
00:14:30,440 --> 00:14:34,160
overhead for real applications and for

325
00:14:32,660 --> 00:14:40,810
the record none of the applications that

326
00:14:34,160 --> 00:14:40,810
we used for experiments had any instance

327
00:14:41,649 --> 00:14:47,000
we implemented holder also be two

328
00:14:44,380 --> 00:14:50,079
alternative memory isolation techniques

329
00:14:47,000 --> 00:14:52,520
and compared it against the PKU approach

330
00:14:50,079 --> 00:14:55,670
that you can see in the paper the first

331
00:14:52,520 --> 00:14:57,980
one is basically separate page table for

332
00:14:55,670 --> 00:14:59,449
each domain and inside a trampoline we

333
00:14:57,980 --> 00:15:01,670
do a Cisco we change this here to

334
00:14:59,450 --> 00:15:03,860
register to point to the appropriate

335
00:15:01,670 --> 00:15:06,890
page table and the second one is similar

336
00:15:03,860 --> 00:15:09,339
but it uses extended page table and then

337
00:15:06,890 --> 00:15:12,199
we use VM funk instruction inside the

338
00:15:09,339 --> 00:15:15,079
trampoline to basically switch domain

339
00:15:12,200 --> 00:15:17,660
without calling in to us however the

340
00:15:15,079 --> 00:15:21,739
second one is only available if you are

341
00:15:17,660 --> 00:15:24,680
already running inside vm x we evaluated

342
00:15:21,740 --> 00:15:27,860
three real-world applications and real

343
00:15:24,680 --> 00:15:31,069
data plane libraries we evaluated the

344
00:15:27,860 --> 00:15:34,910
effect of holder on M memory in memory

345
00:15:31,070 --> 00:15:37,070
database on a kernel bypass tcp/ip stack

346
00:15:34,910 --> 00:15:38,870
and on interest data plane development

347
00:15:37,070 --> 00:15:40,760
get in the interest of time we are not

348
00:15:38,870 --> 00:15:43,460
going to discuss the DPD k please see

349
00:15:40,760 --> 00:15:46,370
the paper for that result but

350
00:15:43,460 --> 00:15:49,130
these images here they show the setting

351
00:15:46,370 --> 00:15:51,350
for silo andreas on the Left Musil Oh

352
00:15:49,130 --> 00:15:53,780
which is a library that can be used to

353
00:15:51,350 --> 00:15:56,270
write scalable in-memory databases for

354
00:15:53,780 --> 00:15:58,760
multi-core machines we use this library

355
00:15:56,270 --> 00:16:01,970
to provide in memory key value store and

356
00:15:58,760 --> 00:16:04,700
in memory LTP interface then we use why

357
00:16:01,970 --> 00:16:08,270
CSP and TPCC benchmark to evaluate the

358
00:16:04,700 --> 00:16:10,100
cost of using the in memory database as

359
00:16:08,270 --> 00:16:14,569
a protected library

360
00:16:10,100 --> 00:16:17,600
similarly we used Redis which is another

361
00:16:14,570 --> 00:16:19,910
in memory key value store which serves a

362
00:16:17,600 --> 00:16:21,860
request over network but we replace the

363
00:16:19,910 --> 00:16:24,380
kernel networking with F stack which is

364
00:16:21,860 --> 00:16:26,470
a kernel bypass tcp/ip stack in this

365
00:16:24,380 --> 00:16:28,670
instance the network library is

366
00:16:26,470 --> 00:16:32,270
basically protected from any

367
00:16:28,670 --> 00:16:35,990
vulnerability that may exist in Redis so

368
00:16:32,270 --> 00:16:37,760
here are the evaluation results we

369
00:16:35,990 --> 00:16:40,010
measured application a specific

370
00:16:37,760 --> 00:16:41,750
throughput metric for both of the

371
00:16:40,010 --> 00:16:44,330
applications and you know higher is

372
00:16:41,750 --> 00:16:46,910
better here as you can see PKU which is

373
00:16:44,330 --> 00:16:49,130
the yellow bar provides the lowest

374
00:16:46,910 --> 00:16:52,730
overhead compared to the red bar which

375
00:16:49,130 --> 00:16:56,120
is the unprotected case and for YC s be

376
00:16:52,730 --> 00:16:58,010
the PKU approach reaches more than 2

377
00:16:56,120 --> 00:17:00,440
million transitions per second per core

378
00:16:58,010 --> 00:17:04,400
and across the board it's within 90 to

379
00:17:00,440 --> 00:17:06,200
98 percent of unprotected case via Fox

380
00:17:04,400 --> 00:17:08,589
seems to be the second best alternative

381
00:17:06,200 --> 00:17:11,780
and in the paper we detail the

382
00:17:08,589 --> 00:17:15,829
trade-offs between using PKU or using VM

383
00:17:11,780 --> 00:17:19,520
func to conclude we introduced protected

384
00:17:15,829 --> 00:17:22,579
libraries as a new OS abstraction we

385
00:17:19,520 --> 00:17:25,089
also showed that we can use inter PKU in

386
00:17:22,579 --> 00:17:27,409
a safe way to isolate protected

387
00:17:25,089 --> 00:17:30,260
libraries without sacrificing

388
00:17:27,410 --> 00:17:33,550
performance what we didn't talk about

389
00:17:30,260 --> 00:17:35,960
here is how we can use holder to share

390
00:17:33,550 --> 00:17:38,210
resources and these protected libraries

391
00:17:35,960 --> 00:17:40,550
which you can see the paper for that and

392
00:17:38,210 --> 00:17:42,880
with that I would be happy to take any

393
00:17:40,550 --> 00:17:42,879
questions

394
00:17:43,010 --> 00:17:52,390
[Applause]

395
00:17:47,670 --> 00:17:54,400
we can take a couple of questions like

396
00:17:52,390 --> 00:17:56,860
this leaves of course open all of the

397
00:17:54,400 --> 00:17:59,050
issues of unsaved programming languages

398
00:17:56,860 --> 00:18:01,270
and the arguments into the libraries and

399
00:17:59,050 --> 00:18:03,300
the pointers and all of the other stuff

400
00:18:01,270 --> 00:18:05,650
that can be caused to trip the library

401
00:18:03,300 --> 00:18:08,620
return-oriented programming whatever to

402
00:18:05,650 --> 00:18:11,200
smash the library state right so all of

403
00:18:08,620 --> 00:18:13,570
these problem are going to exist in in

404
00:18:11,200 --> 00:18:17,290
our system the point is that what we are

405
00:18:13,570 --> 00:18:19,780
offering is a solution that you can lift

406
00:18:17,290 --> 00:18:23,530
the services that were written in the

407
00:18:19,780 --> 00:18:25,780
Canon to user space and you have to take

408
00:18:23,530 --> 00:18:27,850
the same care that you would care if you

409
00:18:25,780 --> 00:18:30,490
were to write them inside the kernel so

410
00:18:27,850 --> 00:18:32,350
you have to do copying copy out you have

411
00:18:30,490 --> 00:18:38,740
to check the arguments into and out of

412
00:18:32,350 --> 00:18:41,770
the the libraries but the benefit is

413
00:18:38,740 --> 00:18:46,090
that with somewhat minor modification

414
00:18:41,770 --> 00:18:48,940
you can basically use the PDK bit holder

415
00:18:46,090 --> 00:18:50,949
yeah yeah it would be great if we could

416
00:18:48,940 --> 00:18:53,500
basically you know all of us we could

417
00:18:50,950 --> 00:18:58,330
switch to programming language that

418
00:18:53,500 --> 00:19:00,760
doesn't have these problems how do you

419
00:18:58,330 --> 00:19:02,439
compare with areum which essentially

420
00:19:00,760 --> 00:19:05,050
uses NPK but

421
00:19:02,440 --> 00:19:07,330
inspect the binaries right and the

422
00:19:05,050 --> 00:19:09,639
rewriting and I really appreciate your

423
00:19:07,330 --> 00:19:11,320
contribution about this hard work break

424
00:19:09,640 --> 00:19:15,370
points it's very cute but can you

425
00:19:11,320 --> 00:19:17,740
provide some tokens is so so very busy

426
00:19:15,370 --> 00:19:20,260
concurrent work if some of you don't

427
00:19:17,740 --> 00:19:23,800
know it's going to be presented I guess

428
00:19:20,260 --> 00:19:26,800
in using security if you in few weeks so

429
00:19:23,800 --> 00:19:29,470
the approach that Aaron uses is static

430
00:19:26,800 --> 00:19:33,070
binary rewriting and you know static

431
00:19:29,470 --> 00:19:36,460
binary rewriting for x86 is undecidable

432
00:19:33,070 --> 00:19:38,320
you don't know the this byte sequence

433
00:19:36,460 --> 00:19:41,530
that you've seen executable region if it

434
00:19:38,320 --> 00:19:46,120
is code or if it is data that is

435
00:19:41,530 --> 00:19:48,070
embedded here and so again because

436
00:19:46,120 --> 00:19:49,659
because of the same resource that I

437
00:19:48,070 --> 00:19:52,780
showed here that you know this byte

438
00:19:49,660 --> 00:19:55,300
sequence rarely happens areum is going

439
00:19:52,780 --> 00:19:56,870
to work ninety percent of the time or 99

440
00:19:55,300 --> 00:19:58,550
percent of the time but

441
00:19:56,870 --> 00:19:59,929
you know there are some cases that

442
00:19:58,550 --> 00:20:02,870
basically is going to break the

443
00:19:59,930 --> 00:20:08,440
application now if you actually read the

444
00:20:02,870 --> 00:20:12,110
paper I think they have basically

445
00:20:08,440 --> 00:20:15,620
inspected like mm I guess binaries and

446
00:20:12,110 --> 00:20:17,600
the hood and basically disassembled 200

447
00:20:15,620 --> 00:20:20,780
out of this 2,000 or some number like

448
00:20:17,600 --> 00:20:23,629
that see the paper for that but yeah

449
00:20:20,780 --> 00:20:27,980
basically you know that's undecidable so

450
00:20:23,630 --> 00:20:30,470
you can get away because you know it

451
00:20:27,980 --> 00:20:33,880
doesn't happen that frequently but thank

452
00:20:30,470 --> 00:20:36,260
you yeah thank you

453
00:20:33,880 --> 00:20:39,200
speaker to start setting up I'll take

454
00:20:36,260 --> 00:20:43,190
maybe one more question and then we can

455
00:20:39,200 --> 00:20:45,710
I think you appreciate also this talk to

456
00:20:43,190 --> 00:20:47,600
uh I've got a question about using the

457
00:20:45,710 --> 00:20:50,000
Intel piqué piqué have in a safe way so

458
00:20:47,600 --> 00:20:53,240
have you considered her like how would

459
00:20:50,000 --> 00:20:55,220
you handle just-in-time compilation or

460
00:20:53,240 --> 00:20:57,890
any self-modifying code or if that would

461
00:20:55,220 --> 00:20:59,510
produce any problems can you repeat the

462
00:20:57,890 --> 00:21:01,730
question if you had a self-modifying

463
00:20:59,510 --> 00:21:04,700
code that could use that instruction or

464
00:21:01,730 --> 00:21:06,710
or a JIT compiler that can in some ways

465
00:21:04,700 --> 00:21:08,690
can imagine was a way to output an

466
00:21:06,710 --> 00:21:11,330
instruction there's no way for you to to

467
00:21:08,690 --> 00:21:12,980
check for that so so we didn't

468
00:21:11,330 --> 00:21:15,290
experiment with that but we have thought

469
00:21:12,980 --> 00:21:16,640
about it and the point is that we can

470
00:21:15,290 --> 00:21:18,678
support it compilers

471
00:21:16,640 --> 00:21:20,210
basically you know we have to guarantee

472
00:21:18,679 --> 00:21:21,800
that if it is writable it's not

473
00:21:20,210 --> 00:21:23,150
executable and the first time that you

474
00:21:21,800 --> 00:21:26,240
are going to execute it we are going to

475
00:21:23,150 --> 00:21:27,320
re-inspect it and then we can we can

476
00:21:26,240 --> 00:21:30,920
proceed the same way that we are

477
00:21:27,320 --> 00:21:32,780
proceeding here but natural question is

478
00:21:30,920 --> 00:21:34,610
going to be what's the overhead and we

479
00:21:32,780 --> 00:21:39,160
did an experiment with that yeah thank

480
00:21:34,610 --> 00:21:39,159
you thank you listening the speaker

481
00:21:40,210 --> 00:21:42,270
you

