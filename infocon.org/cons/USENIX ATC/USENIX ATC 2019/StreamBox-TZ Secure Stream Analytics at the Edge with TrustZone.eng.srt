1
00:00:09,990 --> 00:00:15,660
so good afternoon everyone I'm Heaton

2
00:00:12,630 --> 00:00:17,760
Park from Paju University today I'm

3
00:00:15,660 --> 00:00:20,730
going to introduce the paper of stream

4
00:00:17,760 --> 00:00:23,759
box TZ a secure stream analytics at the

5
00:00:20,730 --> 00:00:25,920
edge with trust John this work is joint

6
00:00:23,759 --> 00:00:28,349
work with Shanghai and professor

7
00:00:25,920 --> 00:00:30,689
Franklin from Excel lab at Purdue and

8
00:00:28,349 --> 00:00:36,329
profess a long row from Northeastern

9
00:00:30,689 --> 00:00:39,269
University so these days a lot of data a

10
00:00:36,329 --> 00:00:42,059
lot of IOT devices are widely deployed

11
00:00:39,270 --> 00:00:45,120
in many areas and generate a large

12
00:00:42,059 --> 00:00:47,519
stream of telemetry data for instance a

13
00:00:45,120 --> 00:00:50,968
millions of power samples are produced

14
00:00:47,519 --> 00:00:54,929
in the area of smart grid to process

15
00:00:50,969 --> 00:00:56,879
this large stream in time as processing

16
00:00:54,929 --> 00:00:59,519
is now emerging which cleans and

17
00:00:56,879 --> 00:01:00,468
summarize data stream and report the

18
00:00:59,519 --> 00:01:04,199
result of

19
00:01:00,469 --> 00:01:06,390
cloud servers for deeper analysis in

20
00:01:04,199 --> 00:01:08,908
general um processor is popular choice

21
00:01:06,390 --> 00:01:12,390
for each device due to its compelling

22
00:01:08,909 --> 00:01:14,520
performance at a low power it normally

23
00:01:12,390 --> 00:01:18,720
has four to eight cores with several

24
00:01:14,520 --> 00:01:21,360
gigabytes of VRAM while the etch

25
00:01:18,720 --> 00:01:24,570
processing is compelling it has many

26
00:01:21,360 --> 00:01:27,450
security threads first of all is attack

27
00:01:24,570 --> 00:01:30,000
surfaces wide as the software stack on

28
00:01:27,450 --> 00:01:32,820
the edge is large complex and

29
00:01:30,000 --> 00:01:35,759
potentially vulnerable second the edge

30
00:01:32,820 --> 00:01:38,719
devices high value target as the data is

31
00:01:35,759 --> 00:01:42,060
aggregated from the multiple sources

32
00:01:38,719 --> 00:01:44,729
moreover each device shares common IOT

33
00:01:42,060 --> 00:01:47,759
weakness such as lack of professionals

34
00:01:44,729 --> 00:01:50,369
for vision weak configuration or delay

35
00:01:47,759 --> 00:01:54,750
the security updates this make each

36
00:01:50,369 --> 00:01:57,180
device even more pollen oh cool so in

37
00:01:54,750 --> 00:02:00,509
our scenario sensors and Claude are

38
00:01:57,180 --> 00:02:02,210
trusted but the edge is untrusted as its

39
00:02:00,509 --> 00:02:05,820
OS can be compromised

40
00:02:02,210 --> 00:02:09,299
for example the adversary can compromise

41
00:02:05,820 --> 00:02:12,120
the OS by exploiting the vulnerability

42
00:02:09,300 --> 00:02:15,560
and the user Conner interface locally or

43
00:02:12,120 --> 00:02:18,750
the similar attack can be done remotely

44
00:02:15,560 --> 00:02:22,680
we assume the powerful adversary who can

45
00:02:18,750 --> 00:02:23,670
control the entire edge OS so that they

46
00:02:22,680 --> 00:02:25,680
can able to

47
00:02:23,670 --> 00:02:29,040
David they are able to access

48
00:02:25,680 --> 00:02:33,420
confidential data or fabricate relatives

49
00:02:29,040 --> 00:02:36,510
Richard then how can we secure a process

50
00:02:33,420 --> 00:02:39,839
large streams of IOT data at the edge

51
00:02:36,510 --> 00:02:42,870
our approach is isolating data and it's

52
00:02:39,840 --> 00:02:44,970
computation within te and shield them

53
00:02:42,870 --> 00:02:50,640
from the remaining potentially

54
00:02:44,970 --> 00:02:53,040
vulnerable as a software stack trusted

55
00:02:50,640 --> 00:02:56,100
execution environment can support the

56
00:02:53,040 --> 00:03:01,140
isolated execution in which code and

57
00:02:56,100 --> 00:03:03,930
data are protected and code and data and

58
00:03:01,140 --> 00:03:08,579
cannot be accessed or modified by the

59
00:03:03,930 --> 00:03:12,180
other things Arab TV at Rus John is am

60
00:03:08,580 --> 00:03:14,730
solution for t enforcement it logically

61
00:03:12,180 --> 00:03:17,459
partitions the platform's hardware

62
00:03:14,730 --> 00:03:20,790
resources into two separate words called

63
00:03:17,459 --> 00:03:23,250
the Newmar and secure world by doing

64
00:03:20,790 --> 00:03:25,530
that the normal world application or

65
00:03:23,250 --> 00:03:27,630
even OS kernel in the normal world

66
00:03:25,530 --> 00:03:31,500
cannot access the secure word memory or

67
00:03:27,630 --> 00:03:34,049
peripherals for strong isolation we can

68
00:03:31,500 --> 00:03:37,709
only give limited memory into secure

69
00:03:34,049 --> 00:03:40,799
world one notable feature of trojan is

70
00:03:37,709 --> 00:03:43,950
we can assign IO to the secure world

71
00:03:40,799 --> 00:03:46,110
which is called the trusted I all this

72
00:03:43,950 --> 00:03:49,380
can be done by configuring preparers

73
00:03:46,110 --> 00:03:51,870
owned by secure world by doing that we

74
00:03:49,380 --> 00:03:57,120
can make io directly interact with the

75
00:03:51,870 --> 00:04:00,269
secret word memory our approach has two

76
00:03:57,120 --> 00:04:02,340
design constraints first TCP size should

77
00:04:00,269 --> 00:04:04,890
be minimized for the purpose of securing

78
00:04:02,340 --> 00:04:08,489
and the second is that the secure memory

79
00:04:04,890 --> 00:04:10,798
in te is limited constrained by these

80
00:04:08,489 --> 00:04:13,470
two factors will match three following

81
00:04:10,799 --> 00:04:15,989
challenges first what functionality

82
00:04:13,470 --> 00:04:20,180
should be in te and behind what

83
00:04:15,989 --> 00:04:24,150
interface this is very important because

84
00:04:20,180 --> 00:04:27,330
porting large functionality incre large

85
00:04:24,150 --> 00:04:30,150
TCP and the white and the wide interface

86
00:04:27,330 --> 00:04:33,210
may may result in the high potential

87
00:04:30,150 --> 00:04:35,400
vulnerabilities second how to execute

88
00:04:33,210 --> 00:04:37,349
stream our Attucks with high throughput

89
00:04:35,400 --> 00:04:39,510
and low delay

90
00:04:37,350 --> 00:04:41,790
we need secure processing within limited

91
00:04:39,510 --> 00:04:45,180
memory while delivering a good

92
00:04:41,790 --> 00:04:47,280
performance third as untrusted

93
00:04:45,180 --> 00:04:50,640
components are in analytics how to

94
00:04:47,280 --> 00:04:52,950
verify the outcome as both trusted

95
00:04:50,640 --> 00:04:55,349
computation and untrusted even

96
00:04:52,950 --> 00:04:58,080
complicated edge components participated

97
00:04:55,350 --> 00:05:02,630
in our analytics we must verify

98
00:04:58,080 --> 00:05:02,630
analytics execution and its outcome

99
00:05:03,350 --> 00:05:08,160
there are two alternative design choice

100
00:05:06,030 --> 00:05:11,580
to isolate the application security

101
00:05:08,160 --> 00:05:14,160
sensitive functions within te the first

102
00:05:11,580 --> 00:05:16,979
one is to put all the engines and the

103
00:05:14,160 --> 00:05:20,010
lock its libraries to te however this

104
00:05:16,980 --> 00:05:22,290
research in result in substantial TCB

105
00:05:20,010 --> 00:05:24,870
growing which is which make engine

106
00:05:22,290 --> 00:05:26,810
vulnerable the second approach is

107
00:05:24,870 --> 00:05:29,250
partitioning as is meaning that

108
00:05:26,810 --> 00:05:31,770
partitioning application by program

109
00:05:29,250 --> 00:05:35,280
analysis and protect protect only

110
00:05:31,770 --> 00:05:37,469
security sensitive part in te while this

111
00:05:35,280 --> 00:05:40,169
approach can comparatively reduced the

112
00:05:37,470 --> 00:05:43,140
size of TCB it is unsuitable for

113
00:05:40,170 --> 00:05:44,820
existing stream analytics engine as they

114
00:05:43,140 --> 00:05:49,020
are not designed for partitioning

115
00:05:44,820 --> 00:05:51,659
partitioning does it incre incurs wide

116
00:05:49,020 --> 00:05:54,060
interface as all the sensitive functions

117
00:05:51,660 --> 00:05:58,020
have their own separated interface to

118
00:05:54,060 --> 00:06:00,780
enter te also current stream analytics

119
00:05:58,020 --> 00:06:03,330
engine has arm using hash based

120
00:06:00,780 --> 00:06:07,169
structure and algorithm which mismatches

121
00:06:03,330 --> 00:06:09,090
T is the limited memory then what our

122
00:06:07,170 --> 00:06:09,480
design is different from the existing

123
00:06:09,090 --> 00:06:12,599
ones

124
00:06:09,480 --> 00:06:15,660
first we architect a data plan for

125
00:06:12,600 --> 00:06:19,320
protection which has very small TCB and

126
00:06:15,660 --> 00:06:21,960
narrow interface second we optimize the

127
00:06:19,320 --> 00:06:25,349
data plans performance challenging the

128
00:06:21,960 --> 00:06:28,049
limited secure memory and third we

129
00:06:25,350 --> 00:06:30,570
verify analytics vision as untrusted

130
00:06:28,050 --> 00:06:35,370
part are still cooperating with the

131
00:06:30,570 --> 00:06:38,340
trusted part so let's take a look at our

132
00:06:35,370 --> 00:06:40,560
design of stream bob TC first we

133
00:06:38,340 --> 00:06:43,460
architect the data plan which encloses

134
00:06:40,560 --> 00:06:46,500
all the analytics data and computations

135
00:06:43,460 --> 00:06:49,200
the data plan is protected by trust on

136
00:06:46,500 --> 00:06:50,580
te and thus is integrity and

137
00:06:49,200 --> 00:06:53,789
confidentiality our

138
00:06:50,580 --> 00:06:56,219
don't eat as we only have three main

139
00:06:53,789 --> 00:06:59,068
components in the figure in in the data

140
00:06:56,220 --> 00:07:02,490
plan the data plan can keep TC besides

141
00:06:59,069 --> 00:07:05,129
very small which is only 5 K lines of

142
00:07:02,490 --> 00:07:07,110
code in our implementation the

143
00:07:05,129 --> 00:07:10,349
components in the data plan are used for

144
00:07:07,110 --> 00:07:12,629
computation or verification which are

145
00:07:10,349 --> 00:07:16,949
optimized for stream stream processing

146
00:07:12,629 --> 00:07:18,300
within te we will give more detail on we

147
00:07:16,949 --> 00:07:22,889
will give more detail on the following

148
00:07:18,300 --> 00:07:24,840
slide we live we live the remaining

149
00:07:22,889 --> 00:07:28,020
complicated software stack in the normal

150
00:07:24,840 --> 00:07:30,090
world which we call the control plan the

151
00:07:28,020 --> 00:07:32,370
control plan contains all the functions

152
00:07:30,090 --> 00:07:35,159
related to the data flow control for

153
00:07:32,370 --> 00:07:39,629
example scheduling or threading or

154
00:07:35,159 --> 00:07:41,580
operator pipelines by our design we only

155
00:07:39,629 --> 00:07:44,940
appear narrow and shared-nothing

156
00:07:41,580 --> 00:07:47,849
interface conceptually we only have 4

157
00:07:44,940 --> 00:07:50,250
entry functions two of them are used for

158
00:07:47,849 --> 00:07:53,490
data plane initialization and cleanup

159
00:07:50,250 --> 00:07:56,669
and one shared by all the trusted

160
00:07:53,490 --> 00:08:01,560
computation the last one is for

161
00:07:56,669 --> 00:08:03,599
debugging we've observed three

162
00:08:01,560 --> 00:08:06,659
optimization points in secure stream

163
00:08:03,599 --> 00:08:10,830
processing within te the first one is is

164
00:08:06,659 --> 00:08:13,349
parallel execution in in a te the stream

165
00:08:10,830 --> 00:08:16,529
operators in fact has internal task

166
00:08:13,349 --> 00:08:19,080
parallelism for it for example group by

167
00:08:16,529 --> 00:08:21,419
operator can be implemented by multiple

168
00:08:19,080 --> 00:08:22,550
certain words which can be running in

169
00:08:21,419 --> 00:08:24,659
parallel

170
00:08:22,550 --> 00:08:27,180
recall that we leave the stream

171
00:08:24,659 --> 00:08:30,300
pipelining scheduler out of te for lo

172
00:08:27,180 --> 00:08:32,279
TCP and thus enclosing all the operators

173
00:08:30,300 --> 00:08:36,240
in T cannot fully exploit the

174
00:08:32,279 --> 00:08:39,299
parallelism we instead invent a set of

175
00:08:36,240 --> 00:08:42,510
low-level stream algorithms in te which

176
00:08:39,299 --> 00:08:44,729
is called the Trostle primitive trusted

177
00:08:42,510 --> 00:08:47,490
primitive can build stream operators

178
00:08:44,730 --> 00:08:50,850
with higher parallelism because they are

179
00:08:47,490 --> 00:08:54,180
single threaded stateless and oblivious

180
00:08:50,850 --> 00:08:56,790
to synchronization by design moreover

181
00:08:54,180 --> 00:09:00,300
trusted primitive share cache current

182
00:08:56,790 --> 00:09:04,110
memory space in te in order to simplify

183
00:09:00,300 --> 00:09:07,170
data sharing and avoid data copy

184
00:09:04,110 --> 00:09:09,750
our current implementation have 23

185
00:09:07,170 --> 00:09:14,459
trusted primitive which can cover most

186
00:09:09,750 --> 00:09:16,920
popular stream operators second

187
00:09:14,460 --> 00:09:20,370
optimization is about T memory

188
00:09:16,920 --> 00:09:22,469
management existing memory management in

189
00:09:20,370 --> 00:09:25,470
the stream streaming processing is not

190
00:09:22,470 --> 00:09:28,230
suit t due to its large code base

191
00:09:25,470 --> 00:09:30,660
HBase diskette structure or algorithm

192
00:09:28,230 --> 00:09:33,360
and relocation over here comes from its

193
00:09:30,660 --> 00:09:36,150
data container to deal with such

194
00:09:33,360 --> 00:09:38,820
problems we introduced a spatial data

195
00:09:36,150 --> 00:09:43,170
container which is called unbounded

196
00:09:38,820 --> 00:09:45,510
array the unbounded array is virtually

197
00:09:43,170 --> 00:09:48,300
unbounded and used for storing data

198
00:09:45,510 --> 00:09:49,010
among trusted primitive or operator

199
00:09:48,300 --> 00:09:52,589
states

200
00:09:49,010 --> 00:09:56,250
it grows in place which is backed by on

201
00:09:52,590 --> 00:09:58,440
demand paging in Te it is append-only

202
00:09:56,250 --> 00:10:01,350
buffer in the continuous memory reason

203
00:09:58,440 --> 00:10:05,310
so that it can achieve a compact memory

204
00:10:01,350 --> 00:10:08,460
layout as it uses a dedicated dedicated

205
00:10:05,310 --> 00:10:11,250
a large virtual memory it does not incur

206
00:10:08,460 --> 00:10:14,580
any relocation overhead and thus enables

207
00:10:11,250 --> 00:10:18,210
fast memory allocation in TE we

208
00:10:14,580 --> 00:10:21,780
implemented it using only 0.7 K lines of

209
00:10:18,210 --> 00:10:25,470
code which is lightweight as it is 9x

210
00:10:21,780 --> 00:10:28,949
feared and Malo and the trained as fear

211
00:10:25,470 --> 00:10:33,690
than je Malo which are generally used in

212
00:10:28,950 --> 00:10:35,790
stream processing the final optimization

213
00:10:33,690 --> 00:10:39,450
point is reducing the overhead comes

214
00:10:35,790 --> 00:10:41,550
from the ingestion if the if that

215
00:10:39,450 --> 00:10:44,040
ingested data paths through the OS

216
00:10:41,550 --> 00:10:46,709
issued copy that copy data into data

217
00:10:44,040 --> 00:10:50,480
plan which also incurs some crypto

218
00:10:46,710 --> 00:10:54,330
overhead as OS at the edge is untrusted

219
00:10:50,480 --> 00:10:57,750
to mitigate it we exploit the trusted IO

220
00:10:54,330 --> 00:11:00,930
which enables direct ingestion to the

221
00:10:57,750 --> 00:11:02,940
data plan in clear text so that we can

222
00:11:00,930 --> 00:11:08,010
remove all the overhead comes from the

223
00:11:02,940 --> 00:11:10,380
ingestion as untrusted

224
00:11:08,010 --> 00:11:13,710
participate in the analytics we provide

225
00:11:10,380 --> 00:11:16,890
verification of edge analytics engine in

226
00:11:13,710 --> 00:11:17,670
fact tracking the origin of wizard like

227
00:11:16,890 --> 00:11:20,610
a data

228
00:11:17,670 --> 00:11:23,880
data lineage is insufficient due to the

229
00:11:20,610 --> 00:11:26,700
lack is lack of stream semantics to deal

230
00:11:23,880 --> 00:11:30,660
with that our solution is adding atom

231
00:11:26,700 --> 00:11:33,480
record when the data plan is invoked it

232
00:11:30,660 --> 00:11:35,850
generates the other record to track all

233
00:11:33,480 --> 00:11:39,030
the data flow among trust primitives

234
00:11:35,850 --> 00:11:41,850
with stream model awareness for example

235
00:11:39,030 --> 00:11:45,720
you can track the window ID or watermark

236
00:11:41,850 --> 00:11:48,750
used in stream processing then the cloud

237
00:11:45,720 --> 00:11:55,080
can verify the analytics by symbolically

238
00:11:48,750 --> 00:11:58,050
playing by similarly playing in this we

239
00:11:55,080 --> 00:12:01,140
note that in the when the cloud tried a

240
00:11:58,050 --> 00:12:03,180
trap cloud verifies they verify the

241
00:12:01,140 --> 00:12:05,250
erratic engine there is no real

242
00:12:03,180 --> 00:12:08,939
computation it's only just a symbolic

243
00:12:05,250 --> 00:12:11,880
replaying the cloud verifiers a cloud

244
00:12:08,940 --> 00:12:13,950
verify the two things first analytics

245
00:12:11,880 --> 00:12:15,990
analytics correctness which is all

246
00:12:13,950 --> 00:12:19,890
ingested the data is processed correctly

247
00:12:15,990 --> 00:12:22,350
correctly second research freshness

248
00:12:19,890 --> 00:12:27,420
which ensure that the pipeline hasn't

249
00:12:22,350 --> 00:12:29,880
has low output delays we've implemented

250
00:12:27,420 --> 00:12:32,719
stream box easy on top of hockey board

251
00:12:29,880 --> 00:12:36,030
which support a programmable trust on

252
00:12:32,720 --> 00:12:38,160
for the control plan we reviews most of

253
00:12:36,030 --> 00:12:41,790
the code from the original stream box

254
00:12:38,160 --> 00:12:45,060
but add to twelve point four thousand

255
00:12:41,790 --> 00:12:47,189
lines of code on the other hand the data

256
00:12:45,060 --> 00:12:50,880
plan is newly implemented from scratch

257
00:12:47,190 --> 00:12:53,880
and written that is written by C we use

258
00:12:50,880 --> 00:12:55,920
six benchmarks for six benchmarks and

259
00:12:53,880 --> 00:12:59,640
four different versions of stream past

260
00:12:55,920 --> 00:13:03,959
easy for evaluation but we just show

261
00:12:59,640 --> 00:13:06,090
some of them due to limited time first

262
00:13:03,960 --> 00:13:08,730
we evaluate the secret over here comes

263
00:13:06,090 --> 00:13:12,590
from the isolation by comparing two

264
00:13:08,730 --> 00:13:12,590
different versions of stream basta see

265
00:13:13,010 --> 00:13:19,590
this version is insecure in which

266
00:13:15,890 --> 00:13:21,060
symbols TC is completely running in the

267
00:13:19,590 --> 00:13:24,120
normal world no more words without

268
00:13:21,060 --> 00:13:26,969
isolation so it does not have any

269
00:13:24,120 --> 00:13:30,520
security features and thus you can show

270
00:13:26,970 --> 00:13:34,330
native performance of stream box easy

271
00:13:30,520 --> 00:13:37,120
on the other hand stream best stream RTG

272
00:13:34,330 --> 00:13:39,760
on the right side runs data plan within

273
00:13:37,120 --> 00:13:43,690
te having all the security features

274
00:13:39,760 --> 00:13:45,970
including trusted io by comparing these

275
00:13:43,690 --> 00:13:49,779
two versions we've evaluated the

276
00:13:45,970 --> 00:13:52,000
isolation overhead and finally we've

277
00:13:49,779 --> 00:13:57,279
achieved modest secure overhead which is

278
00:13:52,000 --> 00:14:00,209
less than 25 percent second we evaluate

279
00:13:57,279 --> 00:14:04,560
an impact of trusted Isle by comparing a

280
00:14:00,209 --> 00:14:07,599
different set of two versions similarly

281
00:14:04,560 --> 00:14:11,040
the third version shown at right mossad

282
00:14:07,600 --> 00:14:14,860
does not exploit trusted IO

283
00:14:11,040 --> 00:14:17,920
by comparing trust stream bust easy on

284
00:14:14,860 --> 00:14:20,080
the center and without trusted IO on the

285
00:14:17,920 --> 00:14:22,060
rightmost side we can evaluate the

286
00:14:20,080 --> 00:14:26,290
impact table without the impact of

287
00:14:22,060 --> 00:14:29,649
trusted aisle without trusted IO about

288
00:14:26,290 --> 00:14:32,649
40 to 50% throughput loss happens due to

289
00:14:29,649 --> 00:14:37,980
this is due to data copy and decryption

290
00:14:32,649 --> 00:14:41,350
overhead so now let me conclude my talk

291
00:14:37,980 --> 00:14:43,959
we build stream box TZ a secure stream

292
00:14:41,350 --> 00:14:45,880
analytics engine at the edge which is

293
00:14:43,959 --> 00:14:47,800
designed and optimized for data

294
00:14:45,880 --> 00:14:51,760
intensive parallel computation on

295
00:14:47,800 --> 00:14:54,849
minimal TCP we architect the data plan

296
00:14:51,760 --> 00:14:57,040
for protection leveraging Amazon and we

297
00:14:54,850 --> 00:15:00,070
optimize its performance within te and

298
00:14:57,040 --> 00:15:03,910
proposed audit record for verifying edge

299
00:15:00,070 --> 00:15:06,370
analytics execution with the following

300
00:15:03,910 --> 00:15:08,020
contributions stream buffs tt-02

301
00:15:06,370 --> 00:15:09,940
comparative performance with strong

302
00:15:08,020 --> 00:15:12,399
security security as per our security

303
00:15:09,940 --> 00:15:15,680
features thank you for listening my talk

304
00:15:12,399 --> 00:15:20,079
and I'm waiting for your question

305
00:15:15,680 --> 00:15:22,008
[Applause]

306
00:15:20,079 --> 00:15:25,160
hi nice work

307
00:15:22,009 --> 00:15:27,889
mark silverstein Technium I wonder what

308
00:15:25,160 --> 00:15:30,379
is the threat model if you running and

309
00:15:27,889 --> 00:15:34,129
part of the streaming logic or

310
00:15:30,379 --> 00:15:37,490
processing logic in untrusted what would

311
00:15:34,129 --> 00:15:41,029
happen if the adversary tries to change

312
00:15:37,490 --> 00:15:43,009
the logic and modify it would be the

313
00:15:41,029 --> 00:15:47,959
would that be a valid scenario for

314
00:15:43,009 --> 00:15:51,740
protecting it using your system so your

315
00:15:47,959 --> 00:15:54,500
question is my question is if you if

316
00:15:51,740 --> 00:15:58,279
part of the application logic runs

317
00:15:54,500 --> 00:16:02,120
outside of trust zone how do you ensure

318
00:15:58,279 --> 00:16:04,839
that the application is not is not

319
00:16:02,120 --> 00:16:10,699
attacked okay III got you a point so

320
00:16:04,839 --> 00:16:13,670
that is a that can be verified by the

321
00:16:10,699 --> 00:16:17,389
cloud very fired because we tracked all

322
00:16:13,670 --> 00:16:19,550
the other computation happening in the

323
00:16:17,389 --> 00:16:23,600
trusted trusted excuse me environment

324
00:16:19,550 --> 00:16:26,329
like the scheduler or pipeline in the

325
00:16:23,600 --> 00:16:29,389
normal world when the schedule invoked

326
00:16:26,329 --> 00:16:35,810
the trusted primitive it the audit

327
00:16:29,389 --> 00:16:39,019
record stored is a trust primitive ID

328
00:16:35,810 --> 00:16:41,689
and this this record can be replayed in

329
00:16:39,019 --> 00:16:44,300
the cloud verifier and the fun by

330
00:16:41,689 --> 00:16:47,420
replaying this audit record you can

331
00:16:44,300 --> 00:16:50,750
track whether this pipeline can be

332
00:16:47,420 --> 00:16:53,180
compromised or not so for that the club

333
00:16:50,750 --> 00:16:55,880
verifier should should keep a copy of

334
00:16:53,180 --> 00:16:57,800
operator pipeline so that's our

335
00:16:55,880 --> 00:17:01,430
assumption like the cloud Baelfire has

336
00:16:57,800 --> 00:17:04,369
to have the same pipeline and this sir

337
00:17:01,430 --> 00:17:06,770
just to finalize this question so the

338
00:17:04,369 --> 00:17:10,219
cloud verifier is a shield to be trusted

339
00:17:06,770 --> 00:17:15,500
yeah our threat model here thank you

340
00:17:10,220 --> 00:17:17,480
I have one question um did you consider

341
00:17:15,500 --> 00:17:19,579
an alternative of running a hypervisor

342
00:17:17,480 --> 00:17:22,250
instead that instead inside the trust

343
00:17:19,579 --> 00:17:24,260
zone which will eliminate the

344
00:17:22,250 --> 00:17:27,679
limitations of trusted execution

345
00:17:24,260 --> 00:17:29,750
environment for processing the data so

346
00:17:27,679 --> 00:17:32,710
your question is can we use the

347
00:17:29,750 --> 00:17:34,870
hypervisor or the other

348
00:17:32,710 --> 00:17:37,029
settin hypervisor inside the trusted

349
00:17:34,870 --> 00:17:39,760
execution environment and just do the

350
00:17:37,029 --> 00:17:43,480
processing outside of it in a different

351
00:17:39,760 --> 00:17:46,390
VM in the sense oh I see I fear a point

352
00:17:43,480 --> 00:17:51,419
but in my opinion yeah it is possible

353
00:17:46,390 --> 00:17:53,590
like for example PTC support the Butcher

354
00:17:51,419 --> 00:17:58,179
environment in the in the truss joint

355
00:17:53,590 --> 00:17:59,740
but my opinion is like for the the to

356
00:17:58,179 --> 00:18:02,830
deal with the high velocity stream

357
00:17:59,740 --> 00:18:07,270
analytics stream our data we have to

358
00:18:02,830 --> 00:18:10,418
keep the same memory cache memory reason

359
00:18:07,270 --> 00:18:12,580
to to speed up the speed up the

360
00:18:10,419 --> 00:18:14,890
processing so I think that of course

361
00:18:12,580 --> 00:18:16,539
that can guarantee the security as well

362
00:18:14,890 --> 00:18:20,520
but I think that in terms of performance

363
00:18:16,539 --> 00:18:23,570
it may be may worse than our approach

364
00:18:20,520 --> 00:18:28,960
thank you let's think I will speak again

365
00:18:23,570 --> 00:18:28,960
[Applause]

