1
00:00:10,020 --> 00:00:14,690
hello everyone I'm Chandra Medela I work

2
00:00:13,170 --> 00:00:16,759
for Applied Sciences the Rubik's

3
00:00:14,690 --> 00:00:20,410
research India where I am

4
00:00:16,760 --> 00:00:22,670
research Redmond I'm here to talk about

5
00:00:20,410 --> 00:00:24,320
the walk which God has the best paper

6
00:00:22,670 --> 00:00:26,750
already know is there 2018

7
00:00:24,320 --> 00:00:30,080
it's called ARCA online would call the

8
00:00:26,750 --> 00:00:32,989
analysis tool so this is joint work with

9
00:00:30,080 --> 00:00:37,489
Angela Rahul and Aditya who also works

10
00:00:32,989 --> 00:00:39,470
at Microsoft Research just to set some

11
00:00:37,489 --> 00:00:42,589
pretext let's take a quick look at a

12
00:00:39,470 --> 00:00:45,500
typical devops lifecycle on the extreme

13
00:00:42,590 --> 00:00:48,530
left basically development phase comes

14
00:00:45,500 --> 00:00:50,300
where developers write code they produce

15
00:00:48,530 --> 00:00:52,850
comments make pull requests and push

16
00:00:50,300 --> 00:00:54,949
changes then comes the build and test

17
00:00:52,850 --> 00:00:57,140
phase where the code is baked into build

18
00:00:54,949 --> 00:00:59,900
and a battery of tests ranging from unit

19
00:00:57,140 --> 00:01:01,400
to integration tests are run then comes

20
00:00:59,900 --> 00:01:02,930
the release phase where the software is

21
00:01:01,400 --> 00:01:05,720
released into internal and external

22
00:01:02,930 --> 00:01:08,479
customer environments finally comes the

23
00:01:05,720 --> 00:01:10,610
post deployment phase where health of

24
00:01:08,479 --> 00:01:13,729
the services are monitored closely and

25
00:01:10,610 --> 00:01:19,760
any anomalies that are detected or

26
00:01:13,729 --> 00:01:21,610
mitigated and fixed so ARCA basically

27
00:01:19,760 --> 00:01:24,470
operates in the post deployment phase

28
00:01:21,610 --> 00:01:25,789
this is part of an uber project that we

29
00:01:24,470 --> 00:01:28,970
have been working for a couple of years

30
00:01:25,790 --> 00:01:31,520
in Microsoft called Sankey which

31
00:01:28,970 --> 00:01:33,860
basically provides various different

32
00:01:31,520 --> 00:01:37,039
tools using AML and other information

33
00:01:33,860 --> 00:01:38,270
retrieval techniques to make each phase

34
00:01:37,040 --> 00:01:42,170
of the software development lifecycle

35
00:01:38,270 --> 00:01:44,440
better Orca is one of the tools that we

36
00:01:42,170 --> 00:01:50,690
built to aid the post deployment

37
00:01:44,440 --> 00:01:53,210
stakeholders let's try to understand how

38
00:01:50,690 --> 00:01:55,970
a typical incident management and

39
00:01:53,210 --> 00:01:59,270
tracing happens in large-scale services

40
00:01:55,970 --> 00:02:03,560
at least at Microsoft so this is a

41
00:01:59,270 --> 00:02:05,570
consider this a time line so when when

42
00:02:03,560 --> 00:02:10,640
an anomalous behavior is observed in a

43
00:02:05,570 --> 00:02:12,590
service an incident is raised then an

44
00:02:10,639 --> 00:02:15,250
on-call engineer or a site reliability

45
00:02:12,590 --> 00:02:17,900
engineer is engaged who basically

46
00:02:15,250 --> 00:02:20,269
acknowledges the incident and they go

47
00:02:17,900 --> 00:02:22,819
through an incident amount of logs and

48
00:02:20,269 --> 00:02:24,230
talk to multiple people who are

49
00:02:22,819 --> 00:02:26,749
responsible for each individual

50
00:02:24,230 --> 00:02:29,790
components of the service and they try

51
00:02:26,749 --> 00:02:31,620
to root cause why the service is broken

52
00:02:29,790 --> 00:02:34,260
then they basically try to mitigate the

53
00:02:31,620 --> 00:02:36,150
issue by rolling back the change that

54
00:02:34,260 --> 00:02:40,140
has broken the service or applying the

55
00:02:36,150 --> 00:02:42,900
fix to fix the bug that is introduced in

56
00:02:40,140 --> 00:02:44,880
a previous bill and broke the service so

57
00:02:42,900 --> 00:02:48,420
this entire process is pretty random

58
00:02:44,880 --> 00:02:50,850
pretty manual and it takes anywhere

59
00:02:48,420 --> 00:02:52,920
between a couple of hours to even

60
00:02:50,850 --> 00:02:57,960
sometimes days based on the complexity

61
00:02:52,920 --> 00:03:00,239
of the issue so here comes our car which

62
00:02:57,960 --> 00:03:03,810
potentially can reduce this hours or

63
00:03:00,240 --> 00:03:05,880
days of manual and laborious route

64
00:03:03,810 --> 00:03:09,330
causing and mitigation process to a

65
00:03:05,880 --> 00:03:12,690
couple of minutes possibly so ARCA

66
00:03:09,330 --> 00:03:15,600
basically takes two inputs one is any

67
00:03:12,690 --> 00:03:18,960
textual description of the symptom so in

68
00:03:15,600 --> 00:03:20,880
this case post tag up we're capacity

69
00:03:18,960 --> 00:03:22,860
module which is one of the modules in

70
00:03:20,880 --> 00:03:26,640
exchange online service and Microsoft

71
00:03:22,860 --> 00:03:28,140
has broken and the symptomatic build the

72
00:03:26,640 --> 00:03:30,750
building which they map the issues

73
00:03:28,140 --> 00:03:33,809
manifestly is $15 $20 whatever

74
00:03:30,750 --> 00:03:36,090
so ARCA takes these two as inputs and

75
00:03:33,810 --> 00:03:37,800
tries to come up with a ranked list of

76
00:03:36,090 --> 00:03:40,709
commits or pull requests which

77
00:03:37,800 --> 00:03:44,780
potentially might have introduced the

78
00:03:40,709 --> 00:03:44,780
bug and caused the service to be broken

79
00:03:46,730 --> 00:03:52,100
let me quickly explain some of the

80
00:03:49,200 --> 00:03:54,899
observations that we had sitting with

81
00:03:52,100 --> 00:03:58,170
on-call engineers and various

82
00:03:54,900 --> 00:03:59,820
engineering managers who runs a lot of

83
00:03:58,170 --> 00:04:03,630
these large-scale services at Microsoft

84
00:03:59,820 --> 00:04:06,150
so one of the key observations we had is

85
00:04:03,630 --> 00:04:10,650
there is a strong textual similarity

86
00:04:06,150 --> 00:04:16,649
between symptom and code change so here

87
00:04:10,650 --> 00:04:19,980
there is an example so one find a male

88
00:04:16,649 --> 00:04:22,289
client has broken and when we look at

89
00:04:19,980 --> 00:04:23,970
the logs or exception messages we see

90
00:04:22,290 --> 00:04:26,490
something like operation not supported

91
00:04:23,970 --> 00:04:29,390
for type mail ad so this is the symptom

92
00:04:26,490 --> 00:04:31,620
symptom text that we see in the logs but

93
00:04:29,390 --> 00:04:33,570
after doing the manual root causing

94
00:04:31,620 --> 00:04:36,510
people have figured out that there is a

95
00:04:33,570 --> 00:04:39,479
function which which is called get mail

96
00:04:36,510 --> 00:04:42,770
session is modified in one of the

97
00:04:39,479 --> 00:04:43,789
commits so the developer who

98
00:04:42,770 --> 00:04:45,859
working on the server side who is

99
00:04:43,789 --> 00:04:47,389
organizationally very far away from the

100
00:04:45,860 --> 00:04:51,129
developers who work on the client-side

101
00:04:47,389 --> 00:04:53,750
software has introduced a new argument

102
00:04:51,129 --> 00:04:56,659
without a default value so a mandatory

103
00:04:53,750 --> 00:04:58,250
argument but developer on the client

104
00:04:56,659 --> 00:05:01,849
side forgot to react to this change

105
00:04:58,250 --> 00:05:04,310
which has broken the service right so

106
00:05:01,849 --> 00:05:06,199
you can clearly see there is there are

107
00:05:04,310 --> 00:05:08,330
some common words like male IDs which

108
00:05:06,199 --> 00:05:15,349
which occur in the symptom also in the

109
00:05:08,330 --> 00:05:17,139
code change and second so like lot of

110
00:05:15,349 --> 00:05:20,000
things in life so this is not so simple

111
00:05:17,139 --> 00:05:22,940
so you see textual similarity in code

112
00:05:20,000 --> 00:05:24,860
changes right but you don't you don't

113
00:05:22,940 --> 00:05:27,219
just see it in one code change or one

114
00:05:24,860 --> 00:05:29,870
simple commit or update you actually see

115
00:05:27,220 --> 00:05:31,400
these kind of similarities in cluster of

116
00:05:29,870 --> 00:05:34,490
code changes that happen at the same

117
00:05:31,400 --> 00:05:36,469
time so how to figure out which of these

118
00:05:34,490 --> 00:05:39,069
code changes has actually introduced the

119
00:05:36,469 --> 00:05:44,509
bug so that's going to be a tricky

120
00:05:39,069 --> 00:05:48,139
tricky a pretty tricky task and the

121
00:05:44,509 --> 00:05:50,810
final nail in the coffin is the build in

122
00:05:48,139 --> 00:05:53,030
which the issue is manifested is not

123
00:05:50,810 --> 00:05:56,750
always the build in which the issues

124
00:05:53,030 --> 00:05:57,888
introduced so here if you see there are

125
00:05:56,750 --> 00:05:59,509
like a couple of bills that are

126
00:05:57,889 --> 00:06:01,449
continuously rolled out through our

127
00:05:59,509 --> 00:06:02,919
continued integration and deployment

128
00:06:01,449 --> 00:06:08,090
pipelines

129
00:06:02,919 --> 00:06:10,400
so in build for the issue is manifested

130
00:06:08,090 --> 00:06:13,039
but the actual root cause commit is

131
00:06:10,400 --> 00:06:18,469
introduced in build 3 which is a bill

132
00:06:13,039 --> 00:06:20,960
that the previous build right and the

133
00:06:18,469 --> 00:06:24,289
build graph is not always a linear graph

134
00:06:20,960 --> 00:06:26,719
so in large-scale services at Microsoft

135
00:06:24,289 --> 00:06:28,068
there is a deployment process they

136
00:06:26,719 --> 00:06:30,289
follow something called drink based

137
00:06:28,069 --> 00:06:32,979
deployment model so they select set of

138
00:06:30,289 --> 00:06:35,630
people and divide them based on drinks

139
00:06:32,979 --> 00:06:38,150
let's say a specific group of people

140
00:06:35,630 --> 00:06:39,860
under a specific VP is one ring then

141
00:06:38,150 --> 00:06:41,539
entire company is another ring then

142
00:06:39,860 --> 00:06:43,430
worldwide external customers etc

143
00:06:41,539 --> 00:06:46,669
etcetera so the service is rolled out

144
00:06:43,430 --> 00:06:47,960
slowly ring by ring basis and when we

145
00:06:46,669 --> 00:06:52,070
are doing this kind of complex

146
00:06:47,960 --> 00:06:56,070
deployment so bills keeps rolling out

147
00:06:52,070 --> 00:06:57,659
and there are there are continuous

148
00:06:56,070 --> 00:07:00,150
and foreigner integrations that happens

149
00:06:57,660 --> 00:07:02,990
the code changes from wandering follows

150
00:07:00,150 --> 00:07:05,820
flows into the other rings and and

151
00:07:02,990 --> 00:07:07,920
basically when an issue is generated so

152
00:07:05,820 --> 00:07:10,440
in this case an issue is or an alert is

153
00:07:07,920 --> 00:07:12,840
triggered at build 3.2 but if you

154
00:07:10,440 --> 00:07:15,840
actually see the root cause can be

155
00:07:12,840 --> 00:07:18,090
traced back to any of these builds which

156
00:07:15,840 --> 00:07:20,280
followed the same ring right so all

157
00:07:18,090 --> 00:07:22,109
these bills basically are like parents

158
00:07:20,280 --> 00:07:28,530
or grandparents or siblings of the bill

159
00:07:22,110 --> 00:07:31,020
in which the issues manifested so as I

160
00:07:28,530 --> 00:07:33,450
said earlier ARCA basically takes two

161
00:07:31,020 --> 00:07:36,479
inputs one is the symptom text the

162
00:07:33,450 --> 00:07:38,460
symptom text can be anything like alert

163
00:07:36,480 --> 00:07:40,770
names or exception information or

164
00:07:38,460 --> 00:07:43,530
anything from the logs and the other is

165
00:07:40,770 --> 00:07:45,750
the build number so once ARCA takes both

166
00:07:43,530 --> 00:07:47,309
of the inputs it basically tries to

167
00:07:45,750 --> 00:07:48,600
figure out the right root cause and come

168
00:07:47,310 --> 00:07:50,520
up with a ranked list of commits and

169
00:07:48,600 --> 00:07:53,850
pull requests so let me quickly explain

170
00:07:50,520 --> 00:07:56,099
how the entire process happens so on the

171
00:07:53,850 --> 00:07:58,530
top you see the symptom text so

172
00:07:56,100 --> 00:07:59,850
architects the symptom text as I said

173
00:07:58,530 --> 00:08:02,400
earlier the symptom text can be

174
00:07:59,850 --> 00:08:04,890
something like an exception has occurred

175
00:08:02,400 --> 00:08:09,870
in Microsoft dot outlook dot exchange

176
00:08:04,890 --> 00:08:11,460
dot compose mail module right so akka

177
00:08:09,870 --> 00:08:14,790
basically tries to tokenize this

178
00:08:11,460 --> 00:08:16,609
tokenize the symptomatic text we do

179
00:08:14,790 --> 00:08:19,980
stemming lamentation etcetera etcetera

180
00:08:16,610 --> 00:08:22,530
then we use algorithms like tf-idf to

181
00:08:19,980 --> 00:08:24,360
basically understand importance or

182
00:08:22,530 --> 00:08:26,520
rarity of the tokens so in the example

183
00:08:24,360 --> 00:08:29,220
that I gave maybe tokens like Microsoft

184
00:08:26,520 --> 00:08:30,930
Outlook these things may appear multiple

185
00:08:29,220 --> 00:08:34,080
times in multiple error messages but

186
00:08:30,930 --> 00:08:36,599
tokens like compose mail is basically

187
00:08:34,080 --> 00:08:40,320
telling you something right it's a very

188
00:08:36,599 --> 00:08:43,290
specific phrase so we basically

189
00:08:40,320 --> 00:08:45,060
construct a set of tokens on the bottom

190
00:08:43,289 --> 00:08:46,560
you see we take a bill number as an

191
00:08:45,060 --> 00:08:49,410
input then we run it through the build

192
00:08:46,560 --> 00:08:50,640
graph that we have built and we try to

193
00:08:49,410 --> 00:08:53,069
figure out the siblings parents

194
00:08:50,640 --> 00:08:55,470
grandparents etc etc based on that we

195
00:08:53,070 --> 00:08:58,020
come up with a candidate build set then

196
00:08:55,470 --> 00:09:00,090
we basically crack open each build into

197
00:08:58,020 --> 00:09:02,400
lists of commits and each commit into

198
00:09:00,090 --> 00:09:05,070
list of directories that are touched or

199
00:09:02,400 --> 00:09:07,680
modified in that commit the files are

200
00:09:05,070 --> 00:09:08,970
changed and we also look at the content

201
00:09:07,680 --> 00:09:12,180
of the change

202
00:09:08,970 --> 00:09:13,889
so what we usually do is we basically

203
00:09:12,180 --> 00:09:15,149
generate an abstract syntax tree of the

204
00:09:13,889 --> 00:09:16,620
previous version of the chains and

205
00:09:15,149 --> 00:09:18,779
current version of the chains and see

206
00:09:16,620 --> 00:09:20,660
which nodes are changed so all of this

207
00:09:18,779 --> 00:09:23,310
information constitutes our search space

208
00:09:20,660 --> 00:09:28,529
then using the tokens that are generated

209
00:09:23,310 --> 00:09:30,119
in step one we try to figure out which

210
00:09:28,529 --> 00:09:32,519
parts of our search space are actually

211
00:09:30,120 --> 00:09:36,360
matched to the tokens that are generally

212
00:09:32,519 --> 00:09:38,310
in step one so based on that we

213
00:09:36,360 --> 00:09:40,259
basically calculate something called a

214
00:09:38,310 --> 00:09:43,018
relevant score so for each and every

215
00:09:40,259 --> 00:09:45,029
took and what we do is we take the IDF

216
00:09:43,019 --> 00:09:48,240
value of the token which signifies how

217
00:09:45,029 --> 00:09:49,980
important the token is right so the more

218
00:09:48,240 --> 00:09:52,410
the idea of value is the higher the ID

219
00:09:49,980 --> 00:09:56,490
value is the more important the token is

220
00:09:52,410 --> 00:09:58,740
so then we basically see Worrall places

221
00:09:56,490 --> 00:10:00,240
in which we found the match we also add

222
00:09:58,740 --> 00:10:02,100
some sort of weight age for instance

223
00:10:00,240 --> 00:10:05,639
from our observation we have observed

224
00:10:02,100 --> 00:10:10,319
that finding a match in function names

225
00:10:05,639 --> 00:10:12,389
or class names is much more can be given

226
00:10:10,319 --> 00:10:14,729
much more weight than finding a match in

227
00:10:12,389 --> 00:10:16,800
a file name or a directory name right so

228
00:10:14,730 --> 00:10:18,750
we decide those weights and these rates

229
00:10:16,800 --> 00:10:20,849
are dynamic they can keep changing

230
00:10:18,750 --> 00:10:24,149
so finally we calculate a relevance code

231
00:10:20,850 --> 00:10:26,730
which we use to rank the list of matches

232
00:10:24,149 --> 00:10:33,470
which basically the list of commits our

233
00:10:26,730 --> 00:10:36,560
pull requests so finally comes the

234
00:10:33,470 --> 00:10:39,540
recommendation spot so this is a sample

235
00:10:36,560 --> 00:10:41,880
incident management system which is used

236
00:10:39,540 --> 00:10:44,670
across Microsoft so whenever there is an

237
00:10:41,880 --> 00:10:47,480
issue that happens in a in a service

238
00:10:44,670 --> 00:10:50,459
like exchange an incident is raised so

239
00:10:47,480 --> 00:10:52,380
before arca what you see in this

240
00:10:50,459 --> 00:10:54,449
incident is hey something like this is

241
00:10:52,380 --> 00:10:58,130
broken in this build this is a time

242
00:10:54,449 --> 00:11:00,810
stamp go fix it right so after we

243
00:10:58,130 --> 00:11:02,519
introduced orca and integrated into our

244
00:11:00,810 --> 00:11:05,250
incident management system at the bottom

245
00:11:02,519 --> 00:11:08,339
we actually see orca results so if I

246
00:11:05,250 --> 00:11:09,959
just zoom in it basically says hey this

247
00:11:08,339 --> 00:11:11,339
is the incident and potentially these

248
00:11:09,959 --> 00:11:13,018
are the root cause commits and pull

249
00:11:11,339 --> 00:11:18,120
requests which you should first look at

250
00:11:13,019 --> 00:11:21,350
and see what happened let me talk about

251
00:11:18,120 --> 00:11:21,350
the evaluation

252
00:11:21,959 --> 00:11:27,640
evaluation so we have to do to evaluate

253
00:11:26,050 --> 00:11:29,140
a system like this basically you know

254
00:11:27,640 --> 00:11:32,740
you need something like this right so

255
00:11:29,140 --> 00:11:34,600
you need the symptomatic text the build

256
00:11:32,740 --> 00:11:37,209
number which constitutes the incident

257
00:11:34,600 --> 00:11:39,370
then the actual root cause which was

258
00:11:37,209 --> 00:11:42,099
found through manual root causing and

259
00:11:39,370 --> 00:11:45,399
debugging etc in the past then we

260
00:11:42,100 --> 00:11:47,620
basically ran set up such incidents for

261
00:11:45,399 --> 00:11:50,019
which we know the root causes against

262
00:11:47,620 --> 00:11:52,029
our car and see in how many of cases our

263
00:11:50,019 --> 00:11:56,529
Chi is able to find the real root cause

264
00:11:52,029 --> 00:11:58,029
so we construct a set of 74 such

265
00:11:56,529 --> 00:12:00,640
incidents for which we knew the root

266
00:11:58,029 --> 00:12:04,089
causes we were able to find the right

267
00:12:00,640 --> 00:12:05,550
root cause in 43 of those cases using

268
00:12:04,089 --> 00:12:09,519
our abstract syntax tree diff

269
00:12:05,550 --> 00:12:12,370
methodology and we were able to push

270
00:12:09,519 --> 00:12:16,209
that 43 to 52 by including build graph

271
00:12:12,370 --> 00:12:18,760
and below so that is accuracy or recall

272
00:12:16,209 --> 00:12:21,130
right so below you see mr r which is

273
00:12:18,760 --> 00:12:24,220
mean reciprocal rank which signal which

274
00:12:21,130 --> 00:12:25,750
basically helps us understand in the

275
00:12:24,220 --> 00:12:27,520
rank list of pull requests or commits

276
00:12:25,750 --> 00:12:29,640
that we show at what position we are

277
00:12:27,520 --> 00:12:32,850
showing the right root cause our commit

278
00:12:29,640 --> 00:12:36,279
so in a matter of point four four

279
00:12:32,850 --> 00:12:38,020
basically tells you that whenever ARCA

280
00:12:36,279 --> 00:12:40,779
finds the root cause it mostly finds it

281
00:12:38,020 --> 00:12:43,990
on an average it mostly finds it between

282
00:12:40,779 --> 00:12:45,459
second and third results which is pretty

283
00:12:43,990 --> 00:12:47,380
good like if we are showing the right

284
00:12:45,459 --> 00:12:48,760
result at ninth or eleventh place right

285
00:12:47,380 --> 00:12:52,209
so people has to actually go through

286
00:12:48,760 --> 00:12:53,980
those nine or ten pull requests and to

287
00:12:52,209 --> 00:13:00,189
to actually before they reach the real

288
00:12:53,980 --> 00:13:03,790
root cause so as I said earlier so we

289
00:13:00,190 --> 00:13:06,279
are finding the root cause the real root

290
00:13:03,790 --> 00:13:08,500
cause commit for real life site

291
00:13:06,279 --> 00:13:10,360
incidents in 70% of the cases and these

292
00:13:08,500 --> 00:13:12,399
are some of the anecdotes that we

293
00:13:10,360 --> 00:13:14,500
received from some of the engineering

294
00:13:12,399 --> 00:13:16,660
managers and site reliables trite

295
00:13:14,500 --> 00:13:17,949
reliable teams in years who are

296
00:13:16,660 --> 00:13:19,709
responsible for running some of the

297
00:13:17,949 --> 00:13:22,449
large-scale services across Microsoft

298
00:13:19,709 --> 00:13:27,119
into which our kya is already

299
00:13:22,449 --> 00:13:28,990
operationalized just to give a summary

300
00:13:27,120 --> 00:13:31,810
ARCA is a commit level bug the

301
00:13:28,990 --> 00:13:32,890
localization to ARCA uses different

302
00:13:31,810 --> 00:13:34,000
techniques like differential code

303
00:13:32,890 --> 00:13:37,390
analysis

304
00:13:34,000 --> 00:13:38,950
build provenance graphics etc to to

305
00:13:37,390 --> 00:13:41,140
basically constitute a search space

306
00:13:38,950 --> 00:13:44,290
explore the search space and try to find

307
00:13:41,140 --> 00:13:46,780
the root cause commit our change that

308
00:13:44,290 --> 00:13:48,339
has introduced a bug archives

309
00:13:46,780 --> 00:13:50,709
deployed on to large-scale cloud

310
00:13:48,340 --> 00:13:53,190
services at Microsoft and some more are

311
00:13:50,710 --> 00:13:55,870
in the process of on boarding into vodka

312
00:13:53,190 --> 00:13:58,990
and it's able to find the right root

313
00:13:55,870 --> 00:14:04,170
cause for almost 73% of the incidents by

314
00:13:58,990 --> 00:14:06,070
reducing the mean time to recovery by 3x

315
00:14:04,170 --> 00:14:17,229
so that's it

316
00:14:06,070 --> 00:14:21,430
I'd like to take any questions we have

317
00:14:17,230 --> 00:14:25,510
time for one or two questions hi sure

318
00:14:21,430 --> 00:14:28,120
you are you from for you so in the

319
00:14:25,510 --> 00:14:29,830
remaining 27% if it's not able to find

320
00:14:28,120 --> 00:14:32,740
the root causes have you looked at

321
00:14:29,830 --> 00:14:34,750
something like what are the put strong

322
00:14:32,740 --> 00:14:38,770
reasons why it's not able to find the

323
00:14:34,750 --> 00:14:40,210
bugs there and also another thing is you

324
00:14:38,770 --> 00:14:41,530
give the relevance list like this is

325
00:14:40,210 --> 00:14:43,510
this is this is what you should look at

326
00:14:41,530 --> 00:14:45,730
but also it might be that a particular

327
00:14:43,510 --> 00:14:48,790
bug is because of interaction of two

328
00:14:45,730 --> 00:14:51,160
different incidents happening in two

329
00:14:48,790 --> 00:14:54,400
different bugs is there anything like

330
00:14:51,160 --> 00:14:58,150
that being done in the system right

331
00:14:54,400 --> 00:14:59,350
right so it's a great question so in 23%

332
00:14:58,150 --> 00:15:03,240
of the cases where we are not finding

333
00:14:59,350 --> 00:15:05,800
the right root cause so one of the

334
00:15:03,240 --> 00:15:10,510
actually there are two main reasons so

335
00:15:05,800 --> 00:15:12,520
one of the main reasons is so success of

336
00:15:10,510 --> 00:15:15,520
this entire system depends on how

337
00:15:12,520 --> 00:15:17,050
quickly you are able to raise an

338
00:15:15,520 --> 00:15:19,630
incident when an anomalous behavior is

339
00:15:17,050 --> 00:15:22,359
observed in the service so in some

340
00:15:19,630 --> 00:15:25,390
modules the way the probes are

341
00:15:22,360 --> 00:15:28,360
structured they actually are finding are

342
00:15:25,390 --> 00:15:32,230
surfacing that there is an issue exists

343
00:15:28,360 --> 00:15:36,040
in the system almost after 100 or 150

344
00:15:32,230 --> 00:15:38,440
builds right so when we go back and

345
00:15:36,040 --> 00:15:40,089
search in our build graph even if we

346
00:15:38,440 --> 00:15:42,460
consider parents grandparents siblings

347
00:15:40,090 --> 00:15:45,190
etc etc so we can go up to maximum off

348
00:15:42,460 --> 00:15:46,780
like 2030 builds so it's a nice

349
00:15:45,190 --> 00:15:50,230
trade-off between

350
00:15:46,780 --> 00:15:51,610
false positives that you generate versus

351
00:15:50,230 --> 00:15:55,630
number of bills you want to look up

352
00:15:51,610 --> 00:15:57,370
right so so imagine right today there is

353
00:15:55,630 --> 00:16:01,689
an incident is raged but the actual root

354
00:15:57,370 --> 00:16:05,350
cause was introduced 100 bills ago right

355
00:16:01,690 --> 00:16:07,090
or count go that that much back right so

356
00:16:05,350 --> 00:16:14,440
that is one reason and the second reason

357
00:16:07,090 --> 00:16:18,790
is lack of lack of decent enough symptom

358
00:16:14,440 --> 00:16:20,410
text so an example is let's say you are

359
00:16:18,790 --> 00:16:23,770
writing a module to do authentication

360
00:16:20,410 --> 00:16:25,810
like Kerberos authentication and there

361
00:16:23,770 --> 00:16:26,860
is an exception so when you have to

362
00:16:25,810 --> 00:16:29,260
throw an exception you throw an

363
00:16:26,860 --> 00:16:31,300
exception like there is a problem

364
00:16:29,260 --> 00:16:34,689
running Kerberos authentication right

365
00:16:31,300 --> 00:16:36,430
but some services has a select so much

366
00:16:34,690 --> 00:16:38,920
of complex code with lot of national

367
00:16:36,430 --> 00:16:41,530
exceptions at the top level if this says

368
00:16:38,920 --> 00:16:44,050
page is not loading right

369
00:16:41,530 --> 00:16:47,189
so with that symptom text it's almost

370
00:16:44,050 --> 00:16:51,089
impossible to root cause anything right

371
00:16:47,190 --> 00:16:51,090
it doesn't answer your question

372
00:16:55,060 --> 00:17:01,219
Rahmi Penn Google I wonder if you have

373
00:16:58,220 --> 00:17:03,200
enough data from all these instants to

374
00:17:01,220 --> 00:17:06,860
Butte and the end-to-end machine

375
00:17:03,200 --> 00:17:09,500
learning based the system right so

376
00:17:06,859 --> 00:17:14,059
that's a great question again so we try

377
00:17:09,500 --> 00:17:16,910
to do it but trust me it's like super

378
00:17:14,059 --> 00:17:19,428
painful to curate all this data right

379
00:17:16,910 --> 00:17:21,530
even to get this 74 incidents I

380
00:17:19,429 --> 00:17:23,600
personally had to chase a lot of this

381
00:17:21,530 --> 00:17:25,579
you know incident manager santol

382
00:17:23,599 --> 00:17:29,178
engineer cetera et cetera to you know

383
00:17:25,579 --> 00:17:31,159
get this data and interestingly when

384
00:17:29,179 --> 00:17:34,520
these systems are built like incident

385
00:17:31,160 --> 00:17:37,460
management systems are built the people

386
00:17:34,520 --> 00:17:38,900
who build them they didn't have use

387
00:17:37,460 --> 00:17:41,540
cases of machine learning in the mind

388
00:17:38,900 --> 00:17:43,580
right so what happens is when out an

389
00:17:41,540 --> 00:17:45,290
incident is raised everyone is like just

390
00:17:43,580 --> 00:17:46,730
running and try to fix the issue when

391
00:17:45,290 --> 00:17:49,940
they are fixed when they fix the issue

392
00:17:46,730 --> 00:17:52,490
they just close it and move on right so

393
00:17:49,940 --> 00:17:56,169
I think it's a cultural and cultural

394
00:17:52,490 --> 00:17:59,630
shift that people has to go through to

395
00:17:56,169 --> 00:18:01,250
basically curate this data which

396
00:17:59,630 --> 00:18:02,750
potentially can be used as a training

397
00:18:01,250 --> 00:18:08,059
data for a machine learning system to be

398
00:18:02,750 --> 00:18:10,290
built right thank you thank you that

399
00:18:08,059 --> 00:18:13,549
sexist beaker

400
00:18:10,290 --> 00:18:13,549
[Applause]

