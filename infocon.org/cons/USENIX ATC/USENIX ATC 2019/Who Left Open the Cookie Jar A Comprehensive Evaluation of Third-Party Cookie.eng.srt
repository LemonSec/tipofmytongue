1
00:00:10,010 --> 00:00:14,899
all right good morning or close this

2
00:00:12,469 --> 00:00:16,550
session we we got the internet defense

3
00:00:14,900 --> 00:00:19,130
price

4
00:00:16,550 --> 00:00:20,900
use an executor for a comprehensive

5
00:00:19,130 --> 00:00:23,960
evaluation of third party cookie

6
00:00:20,900 --> 00:00:25,459
policies the focus of this talk is on

7
00:00:23,960 --> 00:00:28,279
the on the web browser and its

8
00:00:25,460 --> 00:00:32,269
extensions and to which extent the web

9
00:00:28,279 --> 00:00:34,909
browser is typically implementing the

10
00:00:32,269 --> 00:00:37,370
policies let's say as promised we all

11
00:00:34,909 --> 00:00:39,280
know that there are in the web

12
00:00:37,370 --> 00:00:43,010
environment a lot of security challenges

13
00:00:39,280 --> 00:00:46,550
and a major one is caused by the sharing

14
00:00:43,010 --> 00:00:49,399
of cookies historically the the web

15
00:00:46,550 --> 00:00:51,649
protocol HTTP that was the driver of the

16
00:00:49,399 --> 00:00:54,289
big success of the World Wide Web is

17
00:00:51,649 --> 00:00:56,890
stateless and of course application

18
00:00:54,289 --> 00:00:59,539
builders had from the very beginning to

19
00:00:56,890 --> 00:01:03,440
invent and create a technique to share

20
00:00:59,539 --> 00:01:05,330
state and the somewhat funny name cookie

21
00:01:03,440 --> 00:01:08,300
emerge from that the cookie is basically

22
00:01:05,330 --> 00:01:10,580
state shared between a client on the one

23
00:01:08,300 --> 00:01:13,640
hand and the website that your that your

24
00:01:10,580 --> 00:01:18,200
service by on the other hand however a

25
00:01:13,640 --> 00:01:21,830
web page in its own right is it's a

26
00:01:18,200 --> 00:01:24,890
composite of many ingredients very often

27
00:01:21,830 --> 00:01:26,270
generated by third party so the simple

28
00:01:24,890 --> 00:01:29,360
example that you see on the slide is

29
00:01:26,270 --> 00:01:32,539
that a domain a includes an image from a

30
00:01:29,360 --> 00:01:34,910
domain B and cookies that are basically

31
00:01:32,539 --> 00:01:38,450
representing the state of the of the

32
00:01:34,910 --> 00:01:41,840
browser session between domain a and the

33
00:01:38,450 --> 00:01:44,989
client are automatically or by default

34
00:01:41,840 --> 00:01:47,780
shared with the domain B and that allows

35
00:01:44,989 --> 00:01:50,509
domain B to abuse eventually

36
00:01:47,780 --> 00:01:54,229
authentication tokens as one principle

37
00:01:50,509 --> 00:01:56,000
example or just leverage on information

38
00:01:54,229 --> 00:01:59,569
that leaks from the clients to that

39
00:01:56,000 --> 00:02:03,349
domain B and that leads to undesirable

40
00:01:59,569 --> 00:02:05,050
ads tracking privacy breaches and so on

41
00:02:03,349 --> 00:02:07,610
it's it's a well-known problem I'm sure

42
00:02:05,050 --> 00:02:09,800
so that's where we come from and it

43
00:02:07,610 --> 00:02:11,930
leads to two major problems as I already

44
00:02:09,800 --> 00:02:13,790
indicated here there are let's say

45
00:02:11,930 --> 00:02:17,450
severe security problems on the one hand

46
00:02:13,790 --> 00:02:20,120
and and maybe also severe privacy

47
00:02:17,450 --> 00:02:22,910
problems on the other hand and the most

48
00:02:20,120 --> 00:02:25,280
common example of that is the cross-site

49
00:02:22,910 --> 00:02:27,829
request forgery where an attacker can

50
00:02:25,280 --> 00:02:30,090
perform authenticated actions with the

51
00:02:27,830 --> 00:02:31,980
account of the victim

52
00:02:30,090 --> 00:02:34,340
let's assume a very friendly website

53
00:02:31,980 --> 00:02:36,510
being visited this leaves

54
00:02:34,340 --> 00:02:40,230
authentication tokens and relevant

55
00:02:36,510 --> 00:02:43,380
information in the state somebody in

56
00:02:40,230 --> 00:02:45,600
hacks that site and inputs malicious

57
00:02:43,380 --> 00:02:48,060
code that is downloaded with for example

58
00:02:45,600 --> 00:02:50,359
an image or a serviced page and that

59
00:02:48,060 --> 00:02:54,660
allows that image would allow the

60
00:02:50,360 --> 00:02:58,430
attacker to force the victim to use that

61
00:02:54,660 --> 00:03:00,390
information to do an undesirable

62
00:02:58,430 --> 00:03:02,250
transaction on a bank this is the

63
00:03:00,390 --> 00:03:04,488
pedagogical start to say that what is

64
00:03:02,250 --> 00:03:07,140
this all about now some of you may say

65
00:03:04,489 --> 00:03:11,430
cross-site request forgery is not so

66
00:03:07,140 --> 00:03:13,768
much a big issue we know it has been for

67
00:03:11,430 --> 00:03:16,290
a long time and many big events have

68
00:03:13,769 --> 00:03:19,500
occurred it has been in the OS top-10

69
00:03:16,290 --> 00:03:21,870
for a long time it is getting out of

70
00:03:19,500 --> 00:03:24,540
that picture for many reasons I'm sure

71
00:03:21,870 --> 00:03:26,489
bug bounty hunters have revealed enough

72
00:03:24,540 --> 00:03:28,380
problems to the website developers that

73
00:03:26,489 --> 00:03:32,519
that's sort of the awareness and the

74
00:03:28,380 --> 00:03:35,670
how-to on how to secure the the code at

75
00:03:32,519 --> 00:03:37,739
the server side is a it is an improving

76
00:03:35,670 --> 00:03:40,078
skill and that's a great thing but on

77
00:03:37,739 --> 00:03:42,510
the other hand it would be much more

78
00:03:40,079 --> 00:03:44,970
powerful to make sure that from a client

79
00:03:42,510 --> 00:03:47,250
perspective the leaking of these cookies

80
00:03:44,970 --> 00:03:49,410
is blocked and that the quality of the

81
00:03:47,250 --> 00:03:51,480
server that you visit is definitely not

82
00:03:49,410 --> 00:03:53,489
the cause or the or the only reason why

83
00:03:51,480 --> 00:03:56,970
you would be secured so in from that

84
00:03:53,489 --> 00:03:58,920
respect cross-site request forgery still

85
00:03:56,970 --> 00:04:01,079
is a problem because you have to

86
00:03:58,920 --> 00:04:03,720
advocate easily apply best practices on

87
00:04:01,079 --> 00:04:05,269
the server side while you could maybe

88
00:04:03,720 --> 00:04:07,380
have just a default security

89
00:04:05,269 --> 00:04:10,260
implementation on the on the client side

90
00:04:07,380 --> 00:04:13,170
on the browser side in order to deal

91
00:04:10,260 --> 00:04:15,149
with the latter same side cookie has

92
00:04:13,170 --> 00:04:17,488
been introduced which delivers your

93
00:04:15,150 --> 00:04:19,918
security by default what is the same

94
00:04:17,488 --> 00:04:22,830
side cookie it's a cookie with an

95
00:04:19,918 --> 00:04:26,490
additional attribute called same side no

96
00:04:22,830 --> 00:04:28,830
surprise and it would label that cookie

97
00:04:26,490 --> 00:04:31,530
as one that cannot be shared at all with

98
00:04:28,830 --> 00:04:33,630
any other webpage apart from the one it

99
00:04:31,530 --> 00:04:36,059
was serviced from and that would be the

100
00:04:33,630 --> 00:04:39,000
strict option or it could be a relaxed a

101
00:04:36,060 --> 00:04:42,599
little bit where you have top-level

102
00:04:39,000 --> 00:04:43,920
domains sharing it via get nope no post

103
00:04:42,599 --> 00:04:45,719
obviously or pre-read

104
00:04:43,920 --> 00:04:47,460
during facility so that is a sort of an

105
00:04:45,720 --> 00:04:49,320
intermediate version that really

106
00:04:47,460 --> 00:04:52,380
restricts the sharing of the cookies and

107
00:04:49,320 --> 00:04:54,750
these type of evolutions are what we

108
00:04:52,380 --> 00:04:57,450
call third-party cookie policies that

109
00:04:54,750 --> 00:05:01,020
are proposed as a standard and

110
00:04:57,450 --> 00:05:03,240
subsequently adopted by browser vendors

111
00:05:01,020 --> 00:05:05,310
to make sure that that client-side

112
00:05:03,240 --> 00:05:09,390
security quality gets better and better

113
00:05:05,310 --> 00:05:13,620
so the same site lacks option for

114
00:05:09,390 --> 00:05:17,070
example would be as of version 76 the

115
00:05:13,620 --> 00:05:19,290
default in google chrome it takes a

116
00:05:17,070 --> 00:05:22,469
while to adapt that's what we say here

117
00:05:19,290 --> 00:05:24,600
in practice if you look at the example

118
00:05:22,470 --> 00:05:27,800
again a victim could go to the bank get

119
00:05:24,600 --> 00:05:31,380
cookies but the same site cookie policy

120
00:05:27,800 --> 00:05:33,120
attribute would then not allow cute

121
00:05:31,380 --> 00:05:35,340
kittens in this example to take

122
00:05:33,120 --> 00:05:37,740
advantage of that information and

123
00:05:35,340 --> 00:05:40,440
subsequently it would not be possible to

124
00:05:37,740 --> 00:05:42,300
do have that malicious behavior I

125
00:05:40,440 --> 00:05:45,030
mentioned here cross-site request

126
00:05:42,300 --> 00:05:48,270
forgery as as a sort of a pedagogical

127
00:05:45,030 --> 00:05:48,989
example we have cross-eyed code

128
00:05:48,270 --> 00:05:51,630
injection

129
00:05:48,990 --> 00:05:53,700
we have timing attacks in the browser

130
00:05:51,630 --> 00:05:55,530
they all there's a broader range of

131
00:05:53,700 --> 00:05:58,170
attacks that should not be explained in

132
00:05:55,530 --> 00:06:01,429
depth here that all leverage on that

133
00:05:58,170 --> 00:06:05,550
potential problem this is a big problem

134
00:06:01,430 --> 00:06:07,890
many cases have been have been reported

135
00:06:05,550 --> 00:06:10,860
in the public with big financial losses

136
00:06:07,890 --> 00:06:14,669
and impact that's the security bit the

137
00:06:10,860 --> 00:06:17,790
privacy bit it's clear that independent

138
00:06:14,670 --> 00:06:19,800
of heavy weight attacks with significant

139
00:06:17,790 --> 00:06:23,400
financial losses in these days I don't

140
00:06:19,800 --> 00:06:25,440
have to tell you that trackers is a huge

141
00:06:23,400 --> 00:06:28,440
activity there are recent studies for

142
00:06:25,440 --> 00:06:31,140
example here showing that almost all

143
00:06:28,440 --> 00:06:33,090
pages visited contained third-party

144
00:06:31,140 --> 00:06:35,010
requests to trackers this is a corn kind

145
00:06:33,090 --> 00:06:37,380
of a default we are dealing with so

146
00:06:35,010 --> 00:06:40,230
there are good reasons to to improve the

147
00:06:37,380 --> 00:06:43,260
posture on the client side to deal with

148
00:06:40,230 --> 00:06:45,720
that client-side cookie policies in the

149
00:06:43,260 --> 00:06:49,349
broad sense have to defend against these

150
00:06:45,720 --> 00:06:51,420
problems and they're very often a built

151
00:06:49,350 --> 00:06:53,460
in browser option just to block

152
00:06:51,420 --> 00:06:56,790
third-party cookies for example most

153
00:06:53,460 --> 00:06:57,630
browsers have that option support for

154
00:06:56,790 --> 00:06:59,880
the new

155
00:06:57,630 --> 00:07:03,210
proposal of same size cookies as I

156
00:06:59,880 --> 00:07:06,060
introduced to you specific browsers have

157
00:07:03,210 --> 00:07:07,620
additional element and Firefox for

158
00:07:06,060 --> 00:07:10,620
example with this tracking prediction

159
00:07:07,620 --> 00:07:12,240
opera with the ad blocker Safari with

160
00:07:10,620 --> 00:07:15,300
intelligent tracking prevention and so

161
00:07:12,240 --> 00:07:17,100
on so there is a knowledge on the site

162
00:07:15,300 --> 00:07:18,920
of the browser producers obviously to

163
00:07:17,100 --> 00:07:22,280
deal with that and and this shows that

164
00:07:18,920 --> 00:07:25,350
in addition there is an API that allows

165
00:07:22,280 --> 00:07:27,450
other parties to build extensions and we

166
00:07:25,350 --> 00:07:30,770
have ad blockers and privacy protection

167
00:07:27,450 --> 00:07:34,349
extensions a numerous amount of them

168
00:07:30,770 --> 00:07:36,469
that can be installed in the context of

169
00:07:34,350 --> 00:07:38,970
your browser to hopefully potentially

170
00:07:36,470 --> 00:07:41,010
enhance your security posture the

171
00:07:38,970 --> 00:07:43,260
question now is and we come back to the

172
00:07:41,010 --> 00:07:45,300
opening of the talk is the browser

173
00:07:43,260 --> 00:07:49,500
correctly enforcing the claims that

174
00:07:45,300 --> 00:07:52,110
these browser based standards are

175
00:07:49,500 --> 00:07:54,060
stating and/or the promises of the

176
00:07:52,110 --> 00:07:55,560
extension builders are they fulfilled in

177
00:07:54,060 --> 00:07:57,840
practice that was the question we

178
00:07:55,560 --> 00:08:01,010
started from and we had two years ago a

179
00:07:57,840 --> 00:08:05,010
master student evaluating a couple of

180
00:08:01,010 --> 00:08:06,960
setups and that was like like not really

181
00:08:05,010 --> 00:08:09,300
encouraging we saw quite some problems

182
00:08:06,960 --> 00:08:11,159
and and the next step beyond that was

183
00:08:09,300 --> 00:08:14,070
let's try to systematically evaluate

184
00:08:11,160 --> 00:08:19,020
that for all browsers for a broad range

185
00:08:14,070 --> 00:08:20,490
of extensions and see to which extent we

186
00:08:19,020 --> 00:08:24,200
are dealing with it with the severe

187
00:08:20,490 --> 00:08:26,460
problem or not is it easy for a browser

188
00:08:24,200 --> 00:08:28,830
builder to to deal with that

189
00:08:26,460 --> 00:08:30,719
well one illustration if you think of

190
00:08:28,830 --> 00:08:33,590
Firefox you might say what is a web

191
00:08:30,720 --> 00:08:38,870
security talk doing in a systems

192
00:08:33,590 --> 00:08:38,870
conference well in terms of complexity

193
00:08:38,929 --> 00:08:43,770
thirty-six million lines of codes in

194
00:08:41,099 --> 00:08:46,440
2018 in Firefox and and I'm this is

195
00:08:43,770 --> 00:08:48,660
probably the most public case and and

196
00:08:46,440 --> 00:08:51,660
therefore easy to retrieve is huge the

197
00:08:48,660 --> 00:08:53,550
complexity of systems is comparable we

198
00:08:51,660 --> 00:08:55,290
can have a philosophical debate about it

199
00:08:53,550 --> 00:08:57,930
but we talk about the huge complexity

200
00:08:55,290 --> 00:09:00,170
and the question is can we in such a

201
00:08:57,930 --> 00:09:02,760
complex piece of software can anyone

202
00:09:00,170 --> 00:09:05,459
easily intercept all the requests and

203
00:09:02,760 --> 00:09:08,280
strip third party cookies from a request

204
00:09:05,460 --> 00:09:11,290
where are the requests generated in that

205
00:09:08,280 --> 00:09:14,110
huge codebase this is not unique to fire

206
00:09:11,290 --> 00:09:16,360
folks if you think about the number of

207
00:09:14,110 --> 00:09:18,699
options supported then you see that

208
00:09:16,360 --> 00:09:20,829
they're all competing and if you look at

209
00:09:18,699 --> 00:09:24,339
the announcements that the edge with the

210
00:09:20,829 --> 00:09:26,849
lowest number of features will will

211
00:09:24,339 --> 00:09:31,050
definitely grow if you look at the

212
00:09:26,850 --> 00:09:36,310
release notes of their future versions

213
00:09:31,050 --> 00:09:38,430
so we have to evaluate that browsers do

214
00:09:36,310 --> 00:09:41,589
not necessarily implement the standards

215
00:09:38,430 --> 00:09:43,449
accurately there are with all these

216
00:09:41,589 --> 00:09:45,339
features interactions between features

217
00:09:43,449 --> 00:09:47,500
that call side effects that actually

218
00:09:45,339 --> 00:09:49,899
still enable the leaking that's a

219
00:09:47,500 --> 00:09:52,149
potential risks and we know that

220
00:09:49,899 --> 00:09:55,180
extensions have been bypassed in the in

221
00:09:52,149 --> 00:09:58,329
the past for example through WebSockets

222
00:09:55,180 --> 00:10:01,000
it was a very well known and published

223
00:09:58,329 --> 00:10:03,399
case so that's the motivation and a

224
00:10:01,000 --> 00:10:06,069
little bit of the pedagogical intro in

225
00:10:03,399 --> 00:10:08,790
case you might benefit from that why we

226
00:10:06,069 --> 00:10:11,649
did this and why this is a non-trivial

227
00:10:08,790 --> 00:10:13,389
case we had the indications but but

228
00:10:11,649 --> 00:10:16,149
there is some rationale as I I try to

229
00:10:13,389 --> 00:10:21,880
sketch to you so let me give you an

230
00:10:16,149 --> 00:10:23,920
Outlook on on the on the result the

231
00:10:21,880 --> 00:10:26,230
standard browsers didn't make it and all

232
00:10:23,920 --> 00:10:29,439
of the exchanges was not by possible so

233
00:10:26,230 --> 00:10:31,360
there was actually no no no good example

234
00:10:29,440 --> 00:10:32,860
this is interesting because we don't

235
00:10:31,360 --> 00:10:35,260
have to say there's a good and a bad one

236
00:10:32,860 --> 00:10:38,260
we were able to bypass all these

237
00:10:35,260 --> 00:10:43,420
vehicles in an experiment that we

238
00:10:38,260 --> 00:10:45,519
finished in June last year there has

239
00:10:43,420 --> 00:10:50,709
been after the publication of the paper

240
00:10:45,519 --> 00:10:53,860
in August 2000 18 we have done an extra

241
00:10:50,709 --> 00:10:57,069
run because you wonder what happens then

242
00:10:53,860 --> 00:10:58,750
you responsible disclosure you share

243
00:10:57,069 --> 00:11:00,819
that information with all the vendors

244
00:10:58,750 --> 00:11:03,639
and they pick it up or they don't pick

245
00:11:00,819 --> 00:11:05,110
it up but it's not so easy for them in a

246
00:11:03,639 --> 00:11:08,259
release plan with the number of features

247
00:11:05,110 --> 00:11:10,269
I was referring to deseo let's let's

248
00:11:08,259 --> 00:11:13,660
reengineering or that because these are

249
00:11:10,269 --> 00:11:15,279
not always minor issues they may have

250
00:11:13,660 --> 00:11:17,740
design flaws at the base which you

251
00:11:15,279 --> 00:11:19,750
cannot quickly incorporate in your

252
00:11:17,740 --> 00:11:23,170
ongoing release plan so that is a delay

253
00:11:19,750 --> 00:11:24,430
in picking it up and we we noticed that

254
00:11:23,170 --> 00:11:28,719
because we we didn't

255
00:11:24,430 --> 00:11:31,599
additional evaluation in in the fall of

256
00:11:28,720 --> 00:11:33,970
2019 and that has been published in the

257
00:11:31,600 --> 00:11:36,070
I Triple E security and privacy magazine

258
00:11:33,970 --> 00:11:39,040
as a sort of an extended version of the

259
00:11:36,070 --> 00:11:41,770
of the using acuity paper and the

260
00:11:39,040 --> 00:11:43,959
situation has evolved but very gradually

261
00:11:41,770 --> 00:11:47,110
and I'm not blaming anyone in particular

262
00:11:43,959 --> 00:11:49,510
for that as as I made clear so what is

263
00:11:47,110 --> 00:11:51,910
the core work that we have did we had a

264
00:11:49,510 --> 00:11:54,279
testing framework to be developed to do

265
00:11:51,910 --> 00:11:57,160
that kind of massive evaluation at large

266
00:11:54,279 --> 00:11:58,750
scale and with the idea to repetitively

267
00:11:57,160 --> 00:12:01,240
do that to have also launched

268
00:11:58,750 --> 00:12:04,870
longitudinal information that's the idea

269
00:12:01,240 --> 00:12:06,700
and as it's kind of crazy to go at

270
00:12:04,870 --> 00:12:09,250
source code level with these types of

271
00:12:06,700 --> 00:12:14,020
code bases we retreated the browser as a

272
00:12:09,250 --> 00:12:17,860
black box and the idea was was to

273
00:12:14,020 --> 00:12:21,579
actually generate all the possible cases

274
00:12:17,860 --> 00:12:23,920
that could lead to a bypass of cookie

275
00:12:21,580 --> 00:12:26,320
leaking and apply them systematically

276
00:12:23,920 --> 00:12:28,180
alone on all the instances that we

277
00:12:26,320 --> 00:12:31,959
wanted to look at so all the browser's

278
00:12:28,180 --> 00:12:34,000
their versions and and the size of that

279
00:12:31,959 --> 00:12:36,040
framework actually depends of course on

280
00:12:34,000 --> 00:12:40,570
the number of test cases that you

281
00:12:36,040 --> 00:12:43,540
generate and in practice here is a rough

282
00:12:40,570 --> 00:12:46,750
classification that is articulated in

283
00:12:43,540 --> 00:12:49,660
detail in the full paper obviously where

284
00:12:46,750 --> 00:12:51,900
there are a number of obvious so to

285
00:12:49,660 --> 00:12:54,520
speak for people familiar with these

286
00:12:51,900 --> 00:12:58,750
with web development obvious

287
00:12:54,520 --> 00:13:01,089
possibilities to to bypass an

288
00:12:58,750 --> 00:13:02,920
interceptor that says I want to get all

289
00:13:01,089 --> 00:13:06,250
the requests that go out I want to

290
00:13:02,920 --> 00:13:07,900
verify whether it's it's safe from an

291
00:13:06,250 --> 00:13:09,310
information leakage perspective and

292
00:13:07,900 --> 00:13:11,110
otherwise I want to block the request

293
00:13:09,310 --> 00:13:13,000
and or strip the cookies that I don't

294
00:13:11,110 --> 00:13:16,329
want to leak the latter is the key issue

295
00:13:13,000 --> 00:13:18,100
of course but if you look at the at the

296
00:13:16,329 --> 00:13:21,279
way we build we build web applications

297
00:13:18,100 --> 00:13:23,410
there are for example obviously HTML

298
00:13:21,279 --> 00:13:25,689
tags but images in which you can embed

299
00:13:23,410 --> 00:13:28,120
functionality and that functionality

300
00:13:25,690 --> 00:13:30,279
could launch a request so there's a

301
00:13:28,120 --> 00:13:33,820
bunch of HTML tags that's a huge

302
00:13:30,279 --> 00:13:34,900
category with almost 200 scenarios

303
00:13:33,820 --> 00:13:38,250
sitting behind it

304
00:13:34,900 --> 00:13:39,689
response headers can also apart from

305
00:13:38,250 --> 00:13:42,600
the direct resource that is being

306
00:13:39,690 --> 00:13:45,530
requested include additional triggers -

307
00:13:42,600 --> 00:13:48,680
to add functionality and therefore

308
00:13:45,530 --> 00:13:51,510
trigger a request that could be harmful

309
00:13:48,680 --> 00:13:54,089
we include redirects as well which is a

310
00:13:51,510 --> 00:13:55,800
bit debatable if people look at a strict

311
00:13:54,090 --> 00:13:58,740
description of certain policies but a

312
00:13:55,800 --> 00:14:00,479
redirect offers that possibility as well

313
00:13:58,740 --> 00:14:03,330
and then there is the big player

314
00:14:00,480 --> 00:14:05,760
JavaScript that obviously by adding

315
00:14:03,330 --> 00:14:09,630
functionality anywhere can launch

316
00:14:05,760 --> 00:14:13,110
requests and also can do that from many

317
00:14:09,630 --> 00:14:15,689
PDF viewers which is interesting PDF

318
00:14:13,110 --> 00:14:18,150
viewers can these days PDF asking can

319
00:14:15,690 --> 00:14:20,940
add also functionality typically

320
00:14:18,150 --> 00:14:23,040
embedded JavaScript as well most of the

321
00:14:20,940 --> 00:14:25,140
browser vendors make their own version

322
00:14:23,040 --> 00:14:27,569
of that viewer and in and that is in

323
00:14:25,140 --> 00:14:30,120
itself another source of vulnerabilities

324
00:14:27,570 --> 00:14:32,460
and then there are a couple of api is

325
00:14:30,120 --> 00:14:34,290
including the application cache being

326
00:14:32,460 --> 00:14:36,900
deprecated on the one hand but being

327
00:14:34,290 --> 00:14:39,360
overly used still on the other hand and

328
00:14:36,900 --> 00:14:41,250
actually that application cache is

329
00:14:39,360 --> 00:14:44,839
currently replaced by the serviceworker

330
00:14:41,250 --> 00:14:47,760
api which more or less creates the same

331
00:14:44,839 --> 00:14:50,850
cross-origin possibility but because

332
00:14:47,760 --> 00:14:53,010
it's shared by all the web servers so

333
00:14:50,850 --> 00:14:56,130
that is sort of a rough classification

334
00:14:53,010 --> 00:14:58,290
of hundreds of scenarios that can be

335
00:14:56,130 --> 00:15:01,350
imposed on the web browser and/or

336
00:14:58,290 --> 00:15:04,319
extensions to see to see whether leakage

337
00:15:01,350 --> 00:15:07,290
occurs and then this gives you a quick

338
00:15:04,320 --> 00:15:09,240
overview of the framework where you you

339
00:15:07,290 --> 00:15:15,329
see in the upper left corner a browser

340
00:15:09,240 --> 00:15:17,940
control engine that actually starts from

341
00:15:15,330 --> 00:15:20,850
a number of configurations that you you

342
00:15:17,940 --> 00:15:23,580
you built based upon all these scenarios

343
00:15:20,850 --> 00:15:26,190
that I was trying to classify briefly on

344
00:15:23,580 --> 00:15:29,360
the previous slide the framework manager

345
00:15:26,190 --> 00:15:33,750
generates all these test cases and that

346
00:15:29,360 --> 00:15:36,420
produces web pages that try to have the

347
00:15:33,750 --> 00:15:39,570
browser downloading a page that bypasses

348
00:15:36,420 --> 00:15:42,689
the the third-party cookie policy so on

349
00:15:39,570 --> 00:15:44,730
the one hand the browser talks to browse

350
00:15:42,690 --> 00:15:47,130
the browser control creates browser

351
00:15:44,730 --> 00:15:49,350
instances that are tested and these

352
00:15:47,130 --> 00:15:51,840
browser instances are confronted with a

353
00:15:49,350 --> 00:15:54,060
number of web pages that correspond to

354
00:15:51,840 --> 00:15:57,330
all the potential bypass scenarios that

355
00:15:54,060 --> 00:15:59,550
I have sort of classified briefly on the

356
00:15:57,330 --> 00:16:01,770
previous slide of course between that

357
00:15:59,550 --> 00:16:03,990
browser instance in the right column of

358
00:16:01,770 --> 00:16:05,880
the slide there's a proxy that monitors

359
00:16:03,990 --> 00:16:08,550
what's going on and that reports on the

360
00:16:05,880 --> 00:16:10,620
leaks and put that in a register that

361
00:16:08,550 --> 00:16:14,240
engine has been obviously applied

362
00:16:10,620 --> 00:16:16,650
extensively here here are the seven

363
00:16:14,240 --> 00:16:19,500
browsers on the left-hand side there

364
00:16:16,650 --> 00:16:21,930
were 40-something 47 exchanges a

365
00:16:19,500 --> 00:16:26,100
combination of ad blockers and tracking

366
00:16:21,930 --> 00:16:29,939
protection players and and here are in a

367
00:16:26,100 --> 00:16:31,980
nutshell the results of applying that or

368
00:16:29,940 --> 00:16:35,460
deploying that framework in the context

369
00:16:31,980 --> 00:16:37,350
of all these tools and facilities so if

370
00:16:35,460 --> 00:16:39,840
you look at the full paper and I will

371
00:16:37,350 --> 00:16:41,970
not sort of go into the boring rally of

372
00:16:39,840 --> 00:16:44,640
at this point rushing through a number

373
00:16:41,970 --> 00:16:47,280
of results but you will see both for the

374
00:16:44,640 --> 00:16:51,380
browser and the extensions you will see

375
00:16:47,280 --> 00:16:56,910
that in light of the seven categories of

376
00:16:51,380 --> 00:16:59,640
of ways to bypass actually the the

377
00:16:56,910 --> 00:17:02,310
protection that is imposed or prescribed

378
00:16:59,640 --> 00:17:04,319
by a policy you see the whatever there's

379
00:17:02,310 --> 00:17:07,139
a black circle then it means actually

380
00:17:04,319 --> 00:17:09,750
that a request with cookies that

381
00:17:07,140 --> 00:17:10,800
third-party cookies in this context was

382
00:17:09,750 --> 00:17:14,119
able to be sent

383
00:17:10,800 --> 00:17:17,550
despite the configuration that was

384
00:17:14,119 --> 00:17:21,359
suggesting the opposite and for example

385
00:17:17,550 --> 00:17:24,149
you see that because redirects are are

386
00:17:21,359 --> 00:17:25,530
not actually taking care of formally in

387
00:17:24,150 --> 00:17:27,860
the policy this gives you a huge

388
00:17:25,530 --> 00:17:33,300
opportunity you also see surprisingly

389
00:17:27,859 --> 00:17:35,939
that for example the PDF viewers from

390
00:17:33,300 --> 00:17:39,930
opera and chrome failed to do the job

391
00:17:35,940 --> 00:17:42,330
and allow JavaScript to leak third-party

392
00:17:39,930 --> 00:17:44,160
cookies and so on and so forth so the

393
00:17:42,330 --> 00:17:46,590
the sort of the main body of the paper

394
00:17:44,160 --> 00:17:48,920
or oral tale after the description of

395
00:17:46,590 --> 00:17:51,330
the framework a large inventory of

396
00:17:48,920 --> 00:17:53,700
result is described by zooming into

397
00:17:51,330 --> 00:17:56,669
particular cases where you say well this

398
00:17:53,700 --> 00:17:58,260
is surprising and also reporting on our

399
00:17:56,670 --> 00:18:00,060
interaction with the vendors on how to

400
00:17:58,260 --> 00:18:03,900
deal with that so I'll give you this

401
00:18:00,060 --> 00:18:05,530
just as a methodological example but but

402
00:18:03,900 --> 00:18:07,600
it's clear that that there is

403
00:18:05,530 --> 00:18:09,879
a huge amount of information sitting

404
00:18:07,600 --> 00:18:12,219
behind that which we actually report on

405
00:18:09,880 --> 00:18:15,160
a website that is updated so whenever a

406
00:18:12,220 --> 00:18:17,470
new release of the major browser vendors

407
00:18:15,160 --> 00:18:19,930
is coming up we update that information

408
00:18:17,470 --> 00:18:22,810
and as I said you can see from that

409
00:18:19,930 --> 00:18:25,630
experiment that it's not so trivial for

410
00:18:22,810 --> 00:18:28,120
these vendors to run fast certain bug

411
00:18:25,630 --> 00:18:30,550
fixes can be done major flaws cannot

412
00:18:28,120 --> 00:18:35,080
easily be fixed necessarily at least not

413
00:18:30,550 --> 00:18:38,590
in the short term okay so as far as the

414
00:18:35,080 --> 00:18:40,750
built-in browser policies is concerned a

415
00:18:38,590 --> 00:18:44,530
major element that I mentioned was the

416
00:18:40,750 --> 00:18:49,300
bypassing of via the PDF viewer in

417
00:18:44,530 --> 00:18:51,370
chrome and opera some of the blocking

418
00:18:49,300 --> 00:18:53,320
options for example in action Safari

419
00:18:51,370 --> 00:18:56,260
were completely not functioning they

420
00:18:53,320 --> 00:19:00,129
were not doing the job at all and it's

421
00:18:56,260 --> 00:19:03,820
clear that many categories also a

422
00:19:00,130 --> 00:19:05,980
Firefox and opera of tracking protection

423
00:19:03,820 --> 00:19:08,320
that was built in not by an extension

424
00:19:05,980 --> 00:19:10,300
provider but by the browser produces

425
00:19:08,320 --> 00:19:12,700
themselves were not functioning so it

426
00:19:10,300 --> 00:19:15,399
was a little bit shocking but on the

427
00:19:12,700 --> 00:19:18,130
other hand I introduced you to the way

428
00:19:15,400 --> 00:19:20,800
it grew and the current complexity of a

429
00:19:18,130 --> 00:19:25,060
browser it's it's easy to write a module

430
00:19:20,800 --> 00:19:27,610
that says if I intercept a request I can

431
00:19:25,060 --> 00:19:31,120
analyze it strip the cookies I don't

432
00:19:27,610 --> 00:19:34,030
want to leak and then forward it that

433
00:19:31,120 --> 00:19:37,360
piece of logic is easy to imagine for

434
00:19:34,030 --> 00:19:39,310
all of us the problem is from where from

435
00:19:37,360 --> 00:19:41,050
which locations in the source code do I

436
00:19:39,310 --> 00:19:43,419
need to call it to be complete in my

437
00:19:41,050 --> 00:19:45,520
coverage and apparently that's a

438
00:19:43,420 --> 00:19:49,020
non-trivial situation today with this

439
00:19:45,520 --> 00:19:52,330
huge code bases so you can wonder about

440
00:19:49,020 --> 00:19:55,660
the modularity there as far as the

441
00:19:52,330 --> 00:19:57,639
browser extension is concerned some of

442
00:19:55,660 --> 00:19:59,860
them are really offered to to bring you

443
00:19:57,640 --> 00:20:02,320
that tracking protection and advocate

444
00:19:59,860 --> 00:20:04,540
action they could all be bypassed so we

445
00:20:02,320 --> 00:20:07,540
we had a couple of we had a workshop

446
00:20:04,540 --> 00:20:09,760
later on also with let's say is a

447
00:20:07,540 --> 00:20:11,710
special interest group close group to

448
00:20:09,760 --> 00:20:15,520
just sort of collaborate on on how to

449
00:20:11,710 --> 00:20:19,180
improve and share ideas on how to avoid

450
00:20:15,520 --> 00:20:20,950
design flaws and common implementation

451
00:20:19,180 --> 00:20:24,100
stakes but it was a little bit

452
00:20:20,950 --> 00:20:27,070
overwhelming as you can imagine if we

453
00:20:24,100 --> 00:20:28,300
now look at the same side cookie case

454
00:20:27,070 --> 00:20:31,840
which I introduced in the beginning

455
00:20:28,300 --> 00:20:35,320
which is supposed to do to be a solution

456
00:20:31,840 --> 00:20:39,459
and a new standard we could see that in

457
00:20:35,320 --> 00:20:41,260
a number of browsers this it was not

458
00:20:39,460 --> 00:20:44,410
working either Chrome and opera for

459
00:20:41,260 --> 00:20:46,210
example were sending a strict cookie in

460
00:20:44,410 --> 00:20:50,550
a pre render request which is inherently

461
00:20:46,210 --> 00:20:53,380
a relaxed version as a detail but also

462
00:20:50,550 --> 00:20:56,639
there were bypasses despite the

463
00:20:53,380 --> 00:21:00,070
specification of the inside cookie

464
00:20:56,640 --> 00:21:02,650
attributes in edge so it is a it's a

465
00:21:00,070 --> 00:21:05,439
it's a rough landscape of of required

466
00:21:02,650 --> 00:21:07,060
improvements so all the details are

467
00:21:05,440 --> 00:21:08,920
obviously in the paper and not in the

468
00:21:07,060 --> 00:21:11,290
scope of this presentation but for those

469
00:21:08,920 --> 00:21:13,240
who are very much interested I recommend

470
00:21:11,290 --> 00:21:15,790
of course reading it as well as the

471
00:21:13,240 --> 00:21:20,410
extended version in I Triple E skewed in

472
00:21:15,790 --> 00:21:22,560
privacy so our browser evaluation

473
00:21:20,410 --> 00:21:25,360
framework validates the correctness of

474
00:21:22,560 --> 00:21:27,639
implicit and explicit policies that are

475
00:21:25,360 --> 00:21:32,469
to be enforced implicit because a

476
00:21:27,640 --> 00:21:36,040
browser claimed to be complying with a

477
00:21:32,470 --> 00:21:38,500
certain standard the framework supports

478
00:21:36,040 --> 00:21:42,790
all browsers in various configurations

479
00:21:38,500 --> 00:21:45,550
and we we believe that such a framework

480
00:21:42,790 --> 00:21:47,530
is not just here to say well we we are

481
00:21:45,550 --> 00:21:49,659
here as security researchers this is an

482
00:21:47,530 --> 00:21:51,879
alarm signal and please and please

483
00:21:49,660 --> 00:21:54,880
listen we found a lot of problems it's

484
00:21:51,880 --> 00:21:56,130
it's more like a target for us to to

485
00:21:54,880 --> 00:21:58,270
make sure that we can validate

486
00:21:56,130 --> 00:22:00,790
implementations before release that's

487
00:21:58,270 --> 00:22:03,090
the goal it's a constructive tool which

488
00:22:00,790 --> 00:22:05,680
is a little bit unlike to too many

489
00:22:03,090 --> 00:22:09,970
security research results that you may

490
00:22:05,680 --> 00:22:11,890
see in further evaluating our findings

491
00:22:09,970 --> 00:22:17,710
we saw a lot of opportunities to buy

492
00:22:11,890 --> 00:22:20,290
pause we crawled the Alexa top ten

493
00:22:17,710 --> 00:22:22,900
thousand websites with a max of up to

494
00:22:20,290 --> 00:22:25,389
twenty pages per site to see whether the

495
00:22:22,900 --> 00:22:28,870
potential bypassing that we discovered

496
00:22:25,390 --> 00:22:31,900
through our systematic analysis was was

497
00:22:28,870 --> 00:22:32,919
actually found in the wild it was not it

498
00:22:31,900 --> 00:22:34,270
was not an

499
00:22:32,920 --> 00:22:41,170
so to a large extent there were

500
00:22:34,270 --> 00:22:42,990
potential abuses not not being exploited

501
00:22:41,170 --> 00:22:45,810
as far as we could see there's a

502
00:22:42,990 --> 00:22:49,810
validity issue here okay

503
00:22:45,810 --> 00:22:51,940
so in conclusion bypasses for ad

504
00:22:49,810 --> 00:22:53,830
blockers and privacy extensions as well

505
00:22:51,940 --> 00:22:56,470
as for built-in browser policies

506
00:22:53,830 --> 00:22:58,780
understand this this situation the

507
00:22:56,470 --> 00:23:03,250
complexity has been grown to a huge

508
00:22:58,780 --> 00:23:05,770
level and our framework in this context

509
00:23:03,250 --> 00:23:08,200
is supposed to be evolving to deal with

510
00:23:05,770 --> 00:23:10,590
other policies as well mobile browsers

511
00:23:08,200 --> 00:23:13,000
and so on we got that award from

512
00:23:10,590 --> 00:23:15,820
Facebook and we will we will sort of

513
00:23:13,000 --> 00:23:18,070
invest in extending the work and and and

514
00:23:15,820 --> 00:23:20,950
utilize that moniker for good purposes I

515
00:23:18,070 --> 00:23:23,560
want to finish with this example to sort

516
00:23:20,950 --> 00:23:25,480
of again say we are not saying hooray we

517
00:23:23,560 --> 00:23:28,120
found a lot of troubles it seems to be

518
00:23:25,480 --> 00:23:30,430
very difficult to stay consistent that

519
00:23:28,120 --> 00:23:32,350
was the pre-render book in the same site

520
00:23:30,430 --> 00:23:33,940
cookie policy it bypass I mentioned

521
00:23:32,350 --> 00:23:36,730
earlier on the slides it's just one of

522
00:23:33,940 --> 00:23:40,960
the problems out of the many it was

523
00:23:36,730 --> 00:23:44,020
reported four versions 57 of Chrome it

524
00:23:40,960 --> 00:23:48,130
took them five releases to get it out

525
00:23:44,020 --> 00:23:50,139
and it reappeared as of version 66 tells

526
00:23:48,130 --> 00:23:52,270
you a lot about the difficulty of

527
00:23:50,140 --> 00:23:54,370
dealing with with this type of policies

528
00:23:52,270 --> 00:23:56,770
despite their huge relevance and

529
00:23:54,370 --> 00:24:12,100
importance thank you I'm happy to take

530
00:23:56,770 --> 00:24:15,520
questions if there's timeless I will be

531
00:24:12,100 --> 00:24:16,959
from Indiana University so from what I

532
00:24:15,520 --> 00:24:19,510
understood like there are two

533
00:24:16,960 --> 00:24:21,160
motivations for work one is the turtle

534
00:24:19,510 --> 00:24:27,430
tracking and the other one is like

535
00:24:21,160 --> 00:24:29,410
attack like CSRF right so as you know

536
00:24:27,430 --> 00:24:31,330
probably recently there like a lot of

537
00:24:29,410 --> 00:24:33,790
tracking happening with the client-side

538
00:24:31,330 --> 00:24:36,669
browser fingerprinting and they don't

539
00:24:33,790 --> 00:24:39,250
even use probably the cookies anymore

540
00:24:36,670 --> 00:24:42,130
and you you can't know even if they're

541
00:24:39,250 --> 00:24:44,920
tracking you or not and they're selling

542
00:24:42,130 --> 00:24:46,270
your data to other like it's like

543
00:24:44,920 --> 00:24:46,660
they're actually being transferred

544
00:24:46,270 --> 00:24:50,440
between

545
00:24:46,660 --> 00:24:53,920
websites and I think there are no like

546
00:24:50,440 --> 00:24:56,740
actual solution for that like the the

547
00:24:53,920 --> 00:24:59,020
the best solution is like tor that

548
00:24:56,740 --> 00:25:01,630
totally disables the JavaScript because

549
00:24:59,020 --> 00:25:03,730
otherwise they can take and use like

550
00:25:01,630 --> 00:25:07,120
unique information from your browser or

551
00:25:03,730 --> 00:25:07,570
from the client browser to track you

552
00:25:07,120 --> 00:25:09,280
down

553
00:25:07,570 --> 00:25:11,260
so how does how do you think that

554
00:25:09,280 --> 00:25:15,070
affects your motivation in your in this

555
00:25:11,260 --> 00:25:17,890
work you're absolutely right that the

556
00:25:15,070 --> 00:25:19,720
the problem of tracking is is not only a

557
00:25:17,890 --> 00:25:22,420
matter of leaking third party cookie

558
00:25:19,720 --> 00:25:25,570
policies thirty party cookies obviously

559
00:25:22,420 --> 00:25:28,140
correct more advanced techniques like

560
00:25:25,570 --> 00:25:32,439
fingerprinting which we studied in other

561
00:25:28,140 --> 00:25:34,870
papers are part of the spectrum so I

562
00:25:32,440 --> 00:25:39,400
believe that if if the consortium

563
00:25:34,870 --> 00:25:43,600
including dub-dub-dub and in other

564
00:25:39,400 --> 00:25:46,120
working groups jointly aimed for a

565
00:25:43,600 --> 00:25:48,760
certain policy to deal with part of the

566
00:25:46,120 --> 00:25:51,429
problem that is not fighting

567
00:25:48,760 --> 00:25:53,590
fingerprinting obviously and machine

568
00:25:51,430 --> 00:25:56,500
learning based advanced techniques then

569
00:25:53,590 --> 00:25:58,600
it is not and it's important to deliver

570
00:25:56,500 --> 00:26:01,510
software that to the maximum possible

571
00:25:58,600 --> 00:26:04,600
extent complies with the policy it

572
00:26:01,510 --> 00:26:07,360
claims to implement okay do we need

573
00:26:04,600 --> 00:26:11,280
other policies other possibilities to to

574
00:26:07,360 --> 00:26:14,709
maximize fingerprinting protection I

575
00:26:11,280 --> 00:26:17,620
think so I could refer to other work

576
00:26:14,710 --> 00:26:20,560
that did with the Nick Nick if Iraqis

577
00:26:17,620 --> 00:26:23,290
for example in that space and and that

578
00:26:20,560 --> 00:26:25,600
is another line of research but I don't

579
00:26:23,290 --> 00:26:27,790
think it it evaluates the relevance of

580
00:26:25,600 --> 00:26:30,610
doing this right I don't think so but we

581
00:26:27,790 --> 00:26:34,270
we can argue during a break that it's my

582
00:26:30,610 --> 00:26:37,050
opinion all right thank you and that's

583
00:26:34,270 --> 00:26:37,050
the end of the session

584
00:26:42,400 --> 00:26:44,460
you

