1
00:00:10,100 --> 00:00:15,500
hi everyone I'm Adrienne I'm PhD student

2
00:00:13,400 --> 00:00:17,360
at EPFL and I'm here to present secured

3
00:00:15,500 --> 00:00:19,160
routines to work we've been doing with

4
00:00:17,360 --> 00:00:22,669
my advisors women editor

5
00:00:19,160 --> 00:00:25,670
so trust the execution environments or

6
00:00:22,670 --> 00:00:27,380
teas for short or the solution to the

7
00:00:25,670 --> 00:00:29,570
problem of trust in the cloud

8
00:00:27,380 --> 00:00:31,820
they provide confidentiality and

9
00:00:29,570 --> 00:00:33,920
integrity for user I trusted user code

10
00:00:31,820 --> 00:00:36,530
and data that you deploy on an untrusted

11
00:00:33,920 --> 00:00:38,660
machine they come in different flavors

12
00:00:36,530 --> 00:00:40,640
depending on hardware vendors and while

13
00:00:38,660 --> 00:00:43,099
our solution could be adapted to any of

14
00:00:40,640 --> 00:00:46,070
them we decided to focus on Intel SGX

15
00:00:43,100 --> 00:00:47,870
enclaves because sjx is kind of

16
00:00:46,070 --> 00:00:50,410
symptomatic of all the challenges that

17
00:00:47,870 --> 00:00:52,970
you might face when you want to use tes

18
00:00:50,410 --> 00:00:55,250
anyone interested in using T's has to

19
00:00:52,970 --> 00:00:57,620
consider performance security and

20
00:00:55,250 --> 00:00:59,690
usability implications for example

21
00:00:57,620 --> 00:01:01,280
crossings getting inside and outside of

22
00:00:59,690 --> 00:01:03,860
the Enclave is expensive and should be

23
00:01:01,280 --> 00:01:05,990
avoided so you might think ok let's just

24
00:01:03,860 --> 00:01:07,670
put more code inside the Enclave but

25
00:01:05,990 --> 00:01:09,530
that doesn't work because you have a

26
00:01:07,670 --> 00:01:11,119
limited environment and by doing that

27
00:01:09,530 --> 00:01:13,100
you would just increase the likelihood

28
00:01:11,119 --> 00:01:16,030
of having expensive page evictions and

29
00:01:13,100 --> 00:01:18,289
also because your attack surface grows

30
00:01:16,030 --> 00:01:19,729
so it seems like the solution is to

31
00:01:18,290 --> 00:01:21,650
partition your application between

32
00:01:19,729 --> 00:01:23,210
trusted and untrusted code but this is

33
00:01:21,650 --> 00:01:25,310
actually hard for existing applications

34
00:01:23,210 --> 00:01:26,720
and then once you've done all of this

35
00:01:25,310 --> 00:01:29,210
you still need to find a way to support

36
00:01:26,720 --> 00:01:31,220
system calls which requires to cooperate

37
00:01:29,210 --> 00:01:33,110
with untrusted code and if you make any

38
00:01:31,220 --> 00:01:34,729
mistake at any point you might end up

39
00:01:33,110 --> 00:01:36,350
leaking a secret especially since

40
00:01:34,729 --> 00:01:38,990
trusted code has access to interesting

41
00:01:36,350 --> 00:01:41,000
memory so we were actually looking at

42
00:01:38,990 --> 00:01:43,210
all of this and we thought wait a minute

43
00:01:41,000 --> 00:01:44,750
the compiler can do all of that for me

44
00:01:43,210 --> 00:01:46,460
provided that I have the correct

45
00:01:44,750 --> 00:01:49,940
programming abstraction that's actually

46
00:01:46,460 --> 00:01:51,530
what we try to provide in this paper so

47
00:01:49,940 --> 00:01:53,119
we call them secured routines their

48
00:01:51,530 --> 00:01:55,369
language level approach to supporting

49
00:01:53,119 --> 00:01:57,170
T's they're actually an extension to an

50
00:01:55,369 --> 00:01:58,700
existing programming abstraction that we

51
00:01:57,170 --> 00:02:00,680
implemented inside the go programming

52
00:01:58,700 --> 00:02:03,080
language with our compiler extension

53
00:02:00,680 --> 00:02:05,630
called goat key and from a syntax point

54
00:02:03,080 --> 00:02:09,500
of view it's actually just a new key

55
00:02:05,630 --> 00:02:11,030
word go secure so ingo a goroutine is a

56
00:02:09,500 --> 00:02:12,530
user level thread that executes the

57
00:02:11,030 --> 00:02:14,629
function call concurrently to the main

58
00:02:12,530 --> 00:02:16,010
program and you can spawn a new one by

59
00:02:14,629 --> 00:02:18,048
just prefixing the function call with

60
00:02:16,010 --> 00:02:19,608
the goal keyword and good secure

61
00:02:18,049 --> 00:02:21,650
actually works in exactly the same way

62
00:02:19,609 --> 00:02:24,270
except that your routine is going to be

63
00:02:21,650 --> 00:02:26,010
a secured routine executing inside

64
00:02:24,270 --> 00:02:27,690
to trust the execution environment and

65
00:02:26,010 --> 00:02:30,630
that's it it's actually all you need to

66
00:02:27,690 --> 00:02:31,020
do our compiler goatee takes care of the

67
00:02:30,630 --> 00:02:33,030
rest

68
00:02:31,020 --> 00:02:34,710
so at compile time it uses the GU secure

69
00:02:33,030 --> 00:02:37,590
keyword to determine what code and data

70
00:02:34,710 --> 00:02:39,450
is to go inside the Enclave then at

71
00:02:37,590 --> 00:02:41,730
runtime we actually handle everything

72
00:02:39,450 --> 00:02:44,190
else so crossings are replaced with tap

73
00:02:41,730 --> 00:02:45,959
a typed message passing we handle

74
00:02:44,190 --> 00:02:48,410
runtime cooperation system calls and we

75
00:02:45,960 --> 00:02:52,380
actually also enhance memory isolation

76
00:02:48,410 --> 00:02:54,329
so let's look at the compiled time so

77
00:02:52,380 --> 00:02:56,130
this is the standard pipeline when you

78
00:02:54,330 --> 00:02:57,510
compile a GUI application you have your

79
00:02:56,130 --> 00:03:00,480
app that go and you end up with an

80
00:02:57,510 --> 00:03:02,399
executable called app and these are the

81
00:03:00,480 --> 00:03:03,750
elements that we added so at the top you

82
00:03:02,400 --> 00:03:06,030
can see go SEC and the runtime

83
00:03:03,750 --> 00:03:08,100
extensions which are our internal

84
00:03:06,030 --> 00:03:09,450
libraries one thing that you should

85
00:03:08,100 --> 00:03:11,160
notice on this graph is that after

86
00:03:09,450 --> 00:03:14,429
parsing we actually trigger a second

87
00:03:11,160 --> 00:03:16,460
compilation pipeline for trusted code so

88
00:03:14,430 --> 00:03:19,620
we can look into that a little bit more

89
00:03:16,460 --> 00:03:21,690
so this is your application code you

90
00:03:19,620 --> 00:03:23,220
parse it you can pile it and then down

91
00:03:21,690 --> 00:03:24,990
the line in the end this line is going

92
00:03:23,220 --> 00:03:27,300
to get replaced by a code one of our

93
00:03:24,990 --> 00:03:28,830
internal libraries that is gonna send a

94
00:03:27,300 --> 00:03:31,050
message to the Enclave saying hey please

95
00:03:28,830 --> 00:03:34,320
can you execute this function with these

96
00:03:31,050 --> 00:03:36,120
arguments but as I said you have a

97
00:03:34,320 --> 00:03:37,739
second compilation pipeline for trusted

98
00:03:36,120 --> 00:03:39,930
code that takes the target of the good

99
00:03:37,740 --> 00:03:43,080
secure keyword and actually registers it

100
00:03:39,930 --> 00:03:45,420
inside a synthetic entry point for the

101
00:03:43,080 --> 00:03:47,190
Enclave and that's actually all we need

102
00:03:45,420 --> 00:03:50,190
to do are the compiler when you compile

103
00:03:47,190 --> 00:03:51,900
this this trusted code is going to pull

104
00:03:50,190 --> 00:03:55,740
in all the dependencies that it needs in

105
00:03:51,900 --> 00:03:57,540
terms of code and data inside trusted

106
00:03:55,740 --> 00:03:59,400
couldn't data that you deploy inside the

107
00:03:57,540 --> 00:04:01,049
Enclave and then down the line

108
00:03:59,400 --> 00:04:02,910
everything is compiled we repackage

109
00:04:01,050 --> 00:04:05,520
everything inside an executable and if

110
00:04:02,910 --> 00:04:07,920
you look at this executable it's

111
00:04:05,520 --> 00:04:10,350
actually what you expect an elf format

112
00:04:07,920 --> 00:04:12,359
executable with your usual text data and

113
00:04:10,350 --> 00:04:14,700
real data sections but you also have dot

114
00:04:12,360 --> 00:04:18,060
enclaves section that itself contains

115
00:04:14,700 --> 00:04:19,589
the trusted code and data so we're done

116
00:04:18,060 --> 00:04:22,350
with compile time let's look at the run

117
00:04:19,589 --> 00:04:24,060
time this is an overview of the goaty

118
00:04:22,350 --> 00:04:26,610
runtime so you have two trusted and yun

119
00:04:24,060 --> 00:04:28,860
trusted domains they each manage their

120
00:04:26,610 --> 00:04:31,620
own pool of threads on top of which

121
00:04:28,860 --> 00:04:33,060
executes the runtime routine so they

122
00:04:31,620 --> 00:04:35,630
each have their own garbage collectors

123
00:04:33,060 --> 00:04:37,250
and then on top of that you have the

124
00:04:35,630 --> 00:04:38,840
application-level routines and the way

125
00:04:37,250 --> 00:04:41,420
it works is basically that at some point

126
00:04:38,840 --> 00:04:44,030
and untrusted thread is going to execute

127
00:04:41,420 --> 00:04:45,830
the application routine that it might do

128
00:04:44,030 --> 00:04:47,960
a good secure call so it's going to send

129
00:04:45,830 --> 00:04:50,180
a message via one of these boxes in the

130
00:04:47,960 --> 00:04:51,770
middle and then on the trusted side a

131
00:04:50,180 --> 00:04:53,330
trusted thread is going to execute the

132
00:04:51,770 --> 00:04:54,770
go secure server that's going to read

133
00:04:53,330 --> 00:04:57,260
from the channel and actually spawn the

134
00:04:54,770 --> 00:04:59,060
appropriate secured routine and that's

135
00:04:57,260 --> 00:05:00,469
basically the way everything works in

136
00:04:59,060 --> 00:05:01,940
our system it's the same thing for

137
00:05:00,470 --> 00:05:03,770
system calls and application level

138
00:05:01,940 --> 00:05:05,719
communications and as you can see

139
00:05:03,770 --> 00:05:08,330
everything goes through the small boxes

140
00:05:05,720 --> 00:05:10,610
in the middle and these are actually

141
00:05:08,330 --> 00:05:12,710
just typed and synchronized both

142
00:05:10,610 --> 00:05:15,680
channels that we slightly extended

143
00:05:12,710 --> 00:05:17,690
inside gotee the extension consists of

144
00:05:15,680 --> 00:05:20,150
having automatic deep copy for cross

145
00:05:17,690 --> 00:05:21,650
domain communications that means that

146
00:05:20,150 --> 00:05:24,320
you basically declare and use them like

147
00:05:21,650 --> 00:05:27,229
regular go channels and we take care of

148
00:05:24,320 --> 00:05:29,659
the rest whenever you use them for cross

149
00:05:27,230 --> 00:05:31,460
domain communications and as we've seen

150
00:05:29,660 --> 00:05:33,230
before there's a single point of

151
00:05:31,460 --> 00:05:35,330
interaction between the two domains not

152
00:05:33,230 --> 00:05:37,820
only within our runtime but also at the

153
00:05:35,330 --> 00:05:40,159
application level meaning that in the

154
00:05:37,820 --> 00:05:41,480
end we just remove crossings that's the

155
00:05:40,160 --> 00:05:44,510
only abstraction that you have to

156
00:05:41,480 --> 00:05:47,240
communicate with the Enclave so why deep

157
00:05:44,510 --> 00:05:49,520
copy we were looking for a mechanism to

158
00:05:47,240 --> 00:05:51,710
actually prevent cross domain memory

159
00:05:49,520 --> 00:05:53,150
references meaning trusted code

160
00:05:51,710 --> 00:05:56,359
shouldn't have a pointer to and Trust in

161
00:05:53,150 --> 00:05:58,159
memory and vice versa so it's a little

162
00:05:56,360 --> 00:05:59,780
bit similar in principle to Network

163
00:05:58,160 --> 00:06:02,270
marshalling you receive a bunch of bytes

164
00:05:59,780 --> 00:06:05,630
and you need to reinterpret them into a

165
00:06:02,270 --> 00:06:06,710
complex object while copying things we

166
00:06:05,630 --> 00:06:09,110
do we do that

167
00:06:06,710 --> 00:06:11,900
using reflection based on types stored

168
00:06:09,110 --> 00:06:14,780
within the domain itself augmented with

169
00:06:11,900 --> 00:06:16,969
some sage checks of course and that

170
00:06:14,780 --> 00:06:18,799
simple mechanism actually allows us to

171
00:06:16,970 --> 00:06:20,810
have not only independent garbage

172
00:06:18,800 --> 00:06:22,880
collectors but also enhance memory

173
00:06:20,810 --> 00:06:24,560
isolation suddenly your trusted code

174
00:06:22,880 --> 00:06:26,600
doesn't have any pointer to entrusting

175
00:06:24,560 --> 00:06:29,450
memories you cannot mistakenly leak any

176
00:06:26,600 --> 00:06:32,210
secret so we're done with memory

177
00:06:29,450 --> 00:06:34,490
isolation and crossings let's look at

178
00:06:32,210 --> 00:06:36,830
system calls if you've been following

179
00:06:34,490 --> 00:06:39,530
this presentation you actually already

180
00:06:36,830 --> 00:06:42,320
know how we handle them we just use

181
00:06:39,530 --> 00:06:44,119
channels for the moment we reduce the

182
00:06:42,320 --> 00:06:46,099
API that we exposed to the trusted

183
00:06:44,120 --> 00:06:48,080
domain the goal in the long run would be

184
00:06:46,100 --> 00:06:49,230
to let the user decide the width of the

185
00:06:48,080 --> 00:06:51,479
Cisco API

186
00:06:49,230 --> 00:06:53,840
that would be available inside the

187
00:06:51,480 --> 00:06:56,730
Enclave to the trusted code

188
00:06:53,840 --> 00:06:58,500
okay now runtime cooperation so how do

189
00:06:56,730 --> 00:07:00,480
you get goo routines and secure routines

190
00:06:58,500 --> 00:07:04,110
to communicate synchronizing block on

191
00:07:00,480 --> 00:07:06,000
share channels regular go the way it

192
00:07:04,110 --> 00:07:08,220
works is that routine one is going to do

193
00:07:06,000 --> 00:07:09,960
right to channel which is a blocking

194
00:07:08,220 --> 00:07:11,760
operation so it's going to get wrapped

195
00:07:09,960 --> 00:07:14,250
inside a special data structure and

196
00:07:11,760 --> 00:07:16,620
including a block you then routine to

197
00:07:14,250 --> 00:07:18,810
comes along from the read which will

198
00:07:16,620 --> 00:07:20,190
unblock which one put it back inside the

199
00:07:18,810 --> 00:07:21,690
scheduler queue and then at some point

200
00:07:20,190 --> 00:07:24,150
the scheduler decides to reschedule

201
00:07:21,690 --> 00:07:26,340
routine one in goatee

202
00:07:24,150 --> 00:07:28,109
if routine one is actually a secured

203
00:07:26,340 --> 00:07:29,909
routine you cannot put it back directly

204
00:07:28,110 --> 00:07:31,050
inside the trusted scheduled queue

205
00:07:29,910 --> 00:07:33,120
because you don't have access to it

206
00:07:31,050 --> 00:07:34,770
right so what happens is that you

207
00:07:33,120 --> 00:07:36,720
actually include this wrapper structure

208
00:07:34,770 --> 00:07:38,729
inside an intermediary queue called

209
00:07:36,720 --> 00:07:41,280
trusted ready queue and then at some

210
00:07:38,730 --> 00:07:44,240
point the trusted scheduler comes post

211
00:07:41,280 --> 00:07:46,469
the queue checks that it was in fact

212
00:07:44,240 --> 00:07:48,810
secured routine blocked on cross domain

213
00:07:46,470 --> 00:07:53,130
communication and decides to unblock it

214
00:07:48,810 --> 00:07:55,530
and then eventually reschedule it so

215
00:07:53,130 --> 00:07:58,860
we're done now let's look at the

216
00:07:55,530 --> 00:08:00,960
evaluation so the first thing that we

217
00:07:58,860 --> 00:08:02,820
did was we wanted to see if message

218
00:08:00,960 --> 00:08:04,409
passing still made sense when we have to

219
00:08:02,820 --> 00:08:08,670
run times that need to cooperate in

220
00:08:04,410 --> 00:08:10,920
order to block and schedule routines so

221
00:08:08,670 --> 00:08:13,710
we compared it with the Intel SG SG x

222
00:08:10,920 --> 00:08:15,900
SDK that does crossings and the first

223
00:08:13,710 --> 00:08:19,200
experiment was with system calls so it's

224
00:08:15,900 --> 00:08:22,679
a get UID in this case and actually yes

225
00:08:19,200 --> 00:08:24,990
we have benefits we have a 2.7 X latency

226
00:08:22,680 --> 00:08:26,430
improvement with our approach then the

227
00:08:24,990 --> 00:08:28,530
second experiment is called go secure

228
00:08:26,430 --> 00:08:30,090
plus plug so you do a go secure call and

229
00:08:28,530 --> 00:08:31,710
you wait for the security team to send

230
00:08:30,090 --> 00:08:33,569
you something back on the channel so

231
00:08:31,710 --> 00:08:36,539
it's basically a synchronous way of

232
00:08:33,570 --> 00:08:39,150
using the secure and then again we have

233
00:08:36,539 --> 00:08:41,490
a 2.3 X improvement over the crossing

234
00:08:39,150 --> 00:08:44,039
approach that you have in the Intel SGX

235
00:08:41,490 --> 00:08:46,230
SDK but then we thought wait

236
00:08:44,039 --> 00:08:48,060
when thread is doing a crossing is

237
00:08:46,230 --> 00:08:50,910
actually not doing anything useful right

238
00:08:48,060 --> 00:08:53,430
well in our case threads don't block

239
00:08:50,910 --> 00:08:55,410
routines block so we could actually

240
00:08:53,430 --> 00:08:57,150
leverage that in a throughput experiment

241
00:08:55,410 --> 00:08:59,430
and we did and then we see that we have

242
00:08:57,150 --> 00:09:02,990
a 5 point 2 X improvement in terms of

243
00:08:59,430 --> 00:09:02,989
throughput with our approach

244
00:09:03,149 --> 00:09:08,470
then we decided to look at how easy it

245
00:09:05,470 --> 00:09:11,529
is use security routines when you want

246
00:09:08,470 --> 00:09:13,930
to have security applications so the

247
00:09:11,529 --> 00:09:15,189
first thing we looked at was what if I

248
00:09:13,930 --> 00:09:16,930
have an application I just want

249
00:09:15,189 --> 00:09:18,790
everything to be secured so we took an

250
00:09:16,930 --> 00:09:20,979
asset server wrap the code inside a

251
00:09:18,790 --> 00:09:23,920
function did go secure on that function

252
00:09:20,980 --> 00:09:26,170
and it basically works we didn't have to

253
00:09:23,920 --> 00:09:29,229
change any application level code to do

254
00:09:26,170 --> 00:09:31,149
this but secured routines are supposed

255
00:09:29,230 --> 00:09:32,709
to be more flexible than this you're

256
00:09:31,149 --> 00:09:35,019
supposed to be able to hand pick what

257
00:09:32,709 --> 00:09:37,449
you want to execute inside the te right

258
00:09:35,019 --> 00:09:39,639
so we took the standard TLS package and

259
00:09:37,449 --> 00:09:41,109
go and decided that the private key and

260
00:09:39,639 --> 00:09:44,259
all the operations on it should be

261
00:09:41,110 --> 00:09:45,910
inside the Enclave and to do that we

262
00:09:44,259 --> 00:09:48,579
only needed nine lines of code inside

263
00:09:45,910 --> 00:09:50,949
the tos package and 35 lines of extra

264
00:09:48,579 --> 00:09:52,599
code but most of it is actually just API

265
00:09:50,949 --> 00:09:54,790
work to let you decide between trusted

266
00:09:52,600 --> 00:09:57,040
and untrusted execution and the

267
00:09:54,790 --> 00:09:58,810
performance for that was 88% of native

268
00:09:57,040 --> 00:10:02,860
throughput in terms of handshakes so

269
00:09:58,810 --> 00:10:04,899
pretty good and finally we thought okay

270
00:10:02,860 --> 00:10:06,550
what if you have trusted execution

271
00:10:04,899 --> 00:10:09,339
environments in mind when you actually

272
00:10:06,550 --> 00:10:10,719
write your application so we looked at

273
00:10:09,339 --> 00:10:12,639
the gooey theorem project that has this

274
00:10:10,720 --> 00:10:15,370
notion of a key store his store is

275
00:10:12,639 --> 00:10:17,559
basically a bunch of accounts of wallets

276
00:10:15,370 --> 00:10:20,170
that you have for a theorem that you

277
00:10:17,559 --> 00:10:21,459
encrypt with a master secret and

278
00:10:20,170 --> 00:10:22,899
whenever you want to use one of these

279
00:10:21,459 --> 00:10:25,719
accounts you need to enter your master

280
00:10:22,899 --> 00:10:27,639
secret decrypt the account use it to do

281
00:10:25,720 --> 00:10:29,559
some transactions and then what they do

282
00:10:27,639 --> 00:10:32,829
is that they zero out the private key in

283
00:10:29,559 --> 00:10:34,870
memory to reduce the window during which

284
00:10:32,829 --> 00:10:37,239
someone could come and steal your wallet

285
00:10:34,870 --> 00:10:38,529
but if you have a te you actually don't

286
00:10:37,240 --> 00:10:41,019
need to do all of that you can decrypt

287
00:10:38,529 --> 00:10:44,379
them and keep them in the trusted

288
00:10:41,019 --> 00:10:46,420
environment so we wanted to write one

289
00:10:44,379 --> 00:10:48,399
and we actually use our sage server to

290
00:10:46,420 --> 00:10:51,099
deliver the master secret in that case

291
00:10:48,399 --> 00:10:53,110
and took us a day and five hundred lines

292
00:10:51,100 --> 00:10:57,910
of code which all mostly just kissed or

293
00:10:53,110 --> 00:10:59,379
logic simplified then finally we looked

294
00:10:57,910 --> 00:11:00,939
at the TCB so again

295
00:10:59,379 --> 00:11:03,430
gucchi has a runtime it means that it

296
00:11:00,939 --> 00:11:05,620
has a scheduler garbage collector so we

297
00:11:03,430 --> 00:11:08,620
wanted to see the size of the trusted

298
00:11:05,620 --> 00:11:11,079
codebase in the end so as expected the

299
00:11:08,620 --> 00:11:11,800
runtime for go is a lot bigger than

300
00:11:11,079 --> 00:11:15,069
hadn't

301
00:11:11,800 --> 00:11:17,439
written in C++ application but if you

302
00:11:15,069 --> 00:11:20,110
look at our historic application that

303
00:11:17,439 --> 00:11:22,389
has a full embedded SSH server inside of

304
00:11:20,110 --> 00:11:24,749
it it's still around four megabytes

305
00:11:22,389 --> 00:11:26,860
which actually fits inside an enclave

306
00:11:24,749 --> 00:11:28,269
another thing that you can see here is

307
00:11:26,860 --> 00:11:30,459
the difference in terms of complexity

308
00:11:28,269 --> 00:11:33,579
when it comes to writing a simple hello

309
00:11:30,459 --> 00:11:36,579
world with our solution or the Intel SGX

310
00:11:33,579 --> 00:11:39,040
SDK in our case it's 13 lines of code

311
00:11:36,579 --> 00:11:42,459
with package declaration and declaring

312
00:11:39,040 --> 00:11:44,009
main in the case of GSK if you had to

313
00:11:42,459 --> 00:11:46,748
look at it it's pretty complicated code

314
00:11:44,009 --> 00:11:48,249
and another thing that is not on this

315
00:11:46,749 --> 00:11:50,230
slide is actually the difference in

316
00:11:48,249 --> 00:11:52,629
terms of tool chains if any of you had

317
00:11:50,230 --> 00:11:53,769
to use the SDK you know that the make

318
00:11:52,629 --> 00:11:55,569
file is pretty complicated

319
00:11:53,769 --> 00:11:58,230
in our case everything just builds by

320
00:11:55,569 --> 00:11:59,709
using good cheap build and you're done

321
00:11:58,230 --> 00:12:11,199
so that's it

322
00:11:59,709 --> 00:12:13,899
Thanks hi Marcia great work I really

323
00:12:11,199 --> 00:12:15,758
like this idea and I'll say one question

324
00:12:13,899 --> 00:12:17,589
that I have is is the memory consistency

325
00:12:15,759 --> 00:12:19,990
so you're saying that you're making deep

326
00:12:17,589 --> 00:12:22,509
copies right yeah and if those deep

327
00:12:19,990 --> 00:12:24,069
copies are touching a whole range of you

328
00:12:22,509 --> 00:12:27,160
know complex data structures like trees

329
00:12:24,069 --> 00:12:29,349
or linked lists first of all it will be

330
00:12:27,160 --> 00:12:32,079
very expensive but let alone how do you

331
00:12:29,350 --> 00:12:34,059
actually merge it back so we don't so

332
00:12:32,079 --> 00:12:36,670
that's the thing what happens is that

333
00:12:34,059 --> 00:12:38,920
when you compile code and you used you

334
00:12:36,670 --> 00:12:42,549
start for example I think a better

335
00:12:38,920 --> 00:12:44,079
example would be global variables if

336
00:12:42,549 --> 00:12:45,970
it's touched by code that is inside the

337
00:12:44,079 --> 00:12:47,529
Enclave you're gonna end up having to

338
00:12:45,970 --> 00:12:49,179
end outside of the Enclave you end up

339
00:12:47,529 --> 00:12:51,129
having two copies of the data and what

340
00:12:49,179 --> 00:12:53,470
the compiler does is that whenever we're

341
00:12:51,129 --> 00:12:54,910
able to detect that kind of situation we

342
00:12:53,470 --> 00:13:00,399
give you warnings because the whole

343
00:12:54,910 --> 00:13:03,279
point was to limit interactions to all

344
00:13:00,399 --> 00:13:06,100
go through channels right we don't want

345
00:13:03,279 --> 00:13:08,860
to have shared memory abstraction here

346
00:13:06,100 --> 00:13:11,739
so we do our best to warn you at compile

347
00:13:08,860 --> 00:13:15,819
time when we can so from the perspective

348
00:13:11,739 --> 00:13:18,189
of a programmer if one touched some part

349
00:13:15,819 --> 00:13:19,929
of the block if from the temporal

350
00:13:18,189 --> 00:13:21,849
perspective first you are running and

351
00:13:19,929 --> 00:13:24,100
touching some of the global variables in

352
00:13:21,850 --> 00:13:24,480
untrusted part and then you have the

353
00:13:24,100 --> 00:13:27,240
trust

354
00:13:24,480 --> 00:13:30,630
for then you will not see the original

355
00:13:27,240 --> 00:13:33,000
values we it's part of the memory

356
00:13:30,630 --> 00:13:34,889
isolation but when you think about it

357
00:13:33,000 --> 00:13:36,600
it's not that hard right if you if you

358
00:13:34,889 --> 00:13:39,000
really want to share you updated value

359
00:13:36,600 --> 00:13:40,440
you just either augment the list of

360
00:13:39,000 --> 00:13:42,449
arguments that you have to your function

361
00:13:40,440 --> 00:13:45,870
to pass them or you send them via

362
00:13:42,449 --> 00:13:47,459
channel which I think it is a better

363
00:13:45,870 --> 00:13:49,260
model it's one of the things that allows

364
00:13:47,459 --> 00:13:51,239
us to have such decoupling between

365
00:13:49,260 --> 00:13:52,910
trusting and interesting code good

366
00:13:51,240 --> 00:13:56,639
thanks

367
00:13:52,910 --> 00:13:58,469
thank you great work I want to ask about

368
00:13:56,639 --> 00:14:00,240
what's the responsibility of the

369
00:13:58,470 --> 00:14:01,529
developer to defend against malicious

370
00:14:00,240 --> 00:14:04,050
system call so that's I have

371
00:14:01,529 --> 00:14:05,760
applications that use system call

372
00:14:04,050 --> 00:14:07,920
package or even use the package that use

373
00:14:05,760 --> 00:14:10,050
the system or package how do I even know

374
00:14:07,920 --> 00:14:11,370
how to defend against any kind of see

375
00:14:10,050 --> 00:14:12,810
whether they should suspend call result

376
00:14:11,370 --> 00:14:15,180
so that's actually a very good question

377
00:14:12,810 --> 00:14:18,779
that I spend a lot of time thinking

378
00:14:15,180 --> 00:14:20,279
about and that's why during the talk I

379
00:14:18,779 --> 00:14:24,510
said that at some point we would like to

380
00:14:20,279 --> 00:14:27,180
expose the system called the width of

381
00:14:24,510 --> 00:14:30,870
the system call API to programmers

382
00:14:27,180 --> 00:14:32,790
because in in any language when you use

383
00:14:30,870 --> 00:14:34,319
any library you're not very you're not

384
00:14:32,790 --> 00:14:35,610
actually aware of the system calls that

385
00:14:34,319 --> 00:14:37,079
you might end up doing but this is

386
00:14:35,610 --> 00:14:39,360
actually a very important thing when you

387
00:14:37,079 --> 00:14:41,219
try to write a trusted application so

388
00:14:39,360 --> 00:14:42,990
that's why I want to give that to the

389
00:14:41,220 --> 00:14:45,630
programmer for the moment what we do is

390
00:14:42,990 --> 00:14:46,889
that we limited the API to just a few

391
00:14:45,630 --> 00:14:50,730
system calls that the runtime itself

392
00:14:46,889 --> 00:14:53,010
needs and a few others that we we need

393
00:14:50,730 --> 00:14:55,110
it inside our benchmark the cool thing

394
00:14:53,010 --> 00:14:57,029
with godo is that all system calls

395
00:14:55,110 --> 00:14:59,760
actually go through the same function

396
00:14:57,029 --> 00:15:02,250
call inside the cisco library and so

397
00:14:59,760 --> 00:15:04,439
it's very easy to go in interpose over

398
00:15:02,250 --> 00:15:11,100
there and actually plug in some user

399
00:15:04,440 --> 00:15:14,149
code as well thank you okay yeah let's

400
00:15:11,100 --> 00:15:14,149
thank our speaker again

401
00:15:14,910 --> 00:15:16,969
you

