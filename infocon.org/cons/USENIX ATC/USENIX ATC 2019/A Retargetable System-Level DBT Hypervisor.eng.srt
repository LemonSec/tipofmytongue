1
00:00:10,730 --> 00:00:13,730
right thank you very much for the

2
00:00:12,019 --> 00:00:15,349
introduction my name's Thomas pink from

3
00:00:13,730 --> 00:00:17,180
the University of Edinburgh and I'm

4
00:00:15,349 --> 00:00:19,610
delighted to talk to you about our

5
00:00:17,180 --> 00:00:22,489
retarget able system level DBT

6
00:00:19,610 --> 00:00:24,590
hypervisor core captive so a captive

7
00:00:22,489 --> 00:00:26,839
this is a high-level overview of how you

8
00:00:24,590 --> 00:00:27,529
can imagine captive from a user's point

9
00:00:26,839 --> 00:00:29,089
of view

10
00:00:27,529 --> 00:00:30,859
so there's captive sitting on top of

11
00:00:29,089 --> 00:00:32,540
your operating system which has to be

12
00:00:30,859 --> 00:00:33,800
Linux you've got your horse physical

13
00:00:32,540 --> 00:00:35,150
machine which is where your keyboard is

14
00:00:33,800 --> 00:00:37,010
you've got linux running we've got

15
00:00:35,150 --> 00:00:39,829
captive and captive provides the

16
00:00:37,010 --> 00:00:41,839
illusion of guest virtual machines that

17
00:00:39,829 --> 00:00:44,780
are of architectures that are different

18
00:00:41,839 --> 00:00:47,239
to the Horst so here our x86 host

19
00:00:44,780 --> 00:00:49,250
physical machine is hosting a bunch of

20
00:00:47,239 --> 00:00:51,019
guest virtual machines of different

21
00:00:49,250 --> 00:00:53,870
architectures and arm one there's a mips

22
00:00:51,020 --> 00:00:55,370
one this risk 5:1 there and that's what

23
00:00:53,870 --> 00:00:57,140
captive does it provides that illusion

24
00:00:55,370 --> 00:00:59,120
and it's a full system virtual machine

25
00:00:57,140 --> 00:01:01,160
as well so it's you can run an

26
00:00:59,120 --> 00:01:03,440
unmodified native operating system

27
00:01:01,160 --> 00:01:04,849
compiled for the architecture in this

28
00:01:03,440 --> 00:01:07,130
virtual machine and you can run it a

29
00:01:04,849 --> 00:01:09,259
near native performance as well so let's

30
00:01:07,130 --> 00:01:11,020
dig a bit deeper into well I always take

31
00:01:09,259 --> 00:01:13,070
a look at why you want to use captive

32
00:01:11,020 --> 00:01:15,440
architectural exploration maybe you're

33
00:01:13,070 --> 00:01:18,740
interested and develop in developing a

34
00:01:15,440 --> 00:01:20,539
new instruction set or a new platform so

35
00:01:18,740 --> 00:01:24,080
you can do that instruction set

36
00:01:20,539 --> 00:01:26,030
extensions obviously getting processor

37
00:01:24,080 --> 00:01:28,970
IP and modifying them and taping them

38
00:01:26,030 --> 00:01:31,130
out or synthesizing them on an FPGA

39
00:01:28,970 --> 00:01:33,679
takes time and takes money but using

40
00:01:31,130 --> 00:01:36,380
captive you have this ability to rapidly

41
00:01:33,679 --> 00:01:37,789
prototype architectural changes all you

42
00:01:36,380 --> 00:01:39,920
do is you modify your architecture

43
00:01:37,789 --> 00:01:41,679
description you give it to captive and

44
00:01:39,920 --> 00:01:44,479
away you go you've got a very fast

45
00:01:41,679 --> 00:01:46,280
virtualized environment to try out your

46
00:01:44,479 --> 00:01:47,929
modifications in so fast performance

47
00:01:46,280 --> 00:01:50,390
modeling something you can do as well

48
00:01:47,929 --> 00:01:52,700
captive can emulate Hardware processor

49
00:01:50,390 --> 00:01:55,429
counters if you're interested in TLB

50
00:01:52,700 --> 00:01:56,599
flushes instruction cache misses that

51
00:01:55,429 --> 00:01:59,300
sort of stuff it can emulate those

52
00:01:56,599 --> 00:02:01,340
properly running unmodified systems if

53
00:01:59,300 --> 00:02:03,140
you want to look at how an existing

54
00:02:01,340 --> 00:02:05,629
system works maybe you've got the

55
00:02:03,140 --> 00:02:07,429
firmware from some embedded IOT device

56
00:02:05,629 --> 00:02:08,840
that you want to see what's going on

57
00:02:07,429 --> 00:02:10,878
with it you can drop it straight into

58
00:02:08,840 --> 00:02:12,500
captive provided you've got the right

59
00:02:10,878 --> 00:02:14,030
platform description an architecture

60
00:02:12,500 --> 00:02:16,700
description away you go

61
00:02:14,030 --> 00:02:19,219
and yet host agnostic virtualization

62
00:02:16,700 --> 00:02:20,780
services you want a virtual machine of a

63
00:02:19,219 --> 00:02:23,239
particular architecture and you don't

64
00:02:20,780 --> 00:02:24,800
care what the horst architecture is you

65
00:02:23,239 --> 00:02:27,440
can just run it on and

66
00:02:24,800 --> 00:02:28,850
server run it on an x86 server run it on

67
00:02:27,440 --> 00:02:31,040
some architecture you've never even

68
00:02:28,850 --> 00:02:34,280
heard of and you get the virtual machine

69
00:02:31,040 --> 00:02:36,829
implementing that architecture so let's

70
00:02:34,280 --> 00:02:38,930
split that first diagram up a bit and

71
00:02:36,830 --> 00:02:40,670
actually see where captive is positioned

72
00:02:38,930 --> 00:02:43,580
in all of these things and it can be

73
00:02:40,670 --> 00:02:45,799
quite tricky to to get your head around

74
00:02:43,580 --> 00:02:47,810
all these different layers and and

75
00:02:45,800 --> 00:02:50,090
different positions that things are

76
00:02:47,810 --> 00:02:52,010
virtual machines and guest machines so

77
00:02:50,090 --> 00:02:54,170
I'm going to introduce a few terms that

78
00:02:52,010 --> 00:02:56,269
are used in the paper and what I will

79
00:02:54,170 --> 00:02:59,390
say throughout the rest of the talk as

80
00:02:56,270 --> 00:03:01,550
well and hopefully bare with me and and

81
00:02:59,390 --> 00:03:03,500
you'll get what I'm trying to say so the

82
00:03:01,550 --> 00:03:05,120
host physical machine that is that is

83
00:03:03,500 --> 00:03:06,740
your physical machine it's exactly as it

84
00:03:05,120 --> 00:03:08,510
sounds like that to your laptop that's

85
00:03:06,740 --> 00:03:10,640
your computer that's your server and I'm

86
00:03:08,510 --> 00:03:12,170
going to use the examples of x86 and arm

87
00:03:10,640 --> 00:03:13,609
here because that's that's what we've

88
00:03:12,170 --> 00:03:17,149
been working on for the last few years

89
00:03:13,610 --> 00:03:19,040
is architectural models for x86 horse

90
00:03:17,150 --> 00:03:20,270
machines and arm guest machines so

91
00:03:19,040 --> 00:03:22,130
you've got your physical machine the big

92
00:03:20,270 --> 00:03:24,170
grid boxer on the outside running the

93
00:03:22,130 --> 00:03:27,519
Linux operating system that has KVM

94
00:03:24,170 --> 00:03:30,980
support we rely on the KVM technology

95
00:03:27,520 --> 00:03:33,020
for how the hypervisor works so you've

96
00:03:30,980 --> 00:03:36,049
got Linux with KVM and then the KVM

97
00:03:33,020 --> 00:03:38,390
hypervisor the hypervisor portion of

98
00:03:36,050 --> 00:03:40,130
captive runs as a normal application in

99
00:03:38,390 --> 00:03:41,570
your operating system and that's what

100
00:03:40,130 --> 00:03:43,010
you interface with when you want to

101
00:03:41,570 --> 00:03:44,750
start your virtual machines you see a

102
00:03:43,010 --> 00:03:45,320
captive and give me an arm virtual

103
00:03:44,750 --> 00:03:47,060
machine

104
00:03:45,320 --> 00:03:49,459
so what captives then does is it creates

105
00:03:47,060 --> 00:03:51,470
what we call a Horst virtual machine and

106
00:03:49,460 --> 00:03:53,420
that's the native virtual machine that

107
00:03:51,470 --> 00:03:55,520
KVM provides that is the same

108
00:03:53,420 --> 00:03:57,799
architecture as the Horst so the horse

109
00:03:55,520 --> 00:04:00,620
physical machine x86 you get a horse

110
00:03:57,800 --> 00:04:03,080
virtual machine which is x86 through KVM

111
00:04:00,620 --> 00:04:05,570
magic then inside the horse virtual

112
00:04:03,080 --> 00:04:09,170
machine runs the DBT yoona kernel of

113
00:04:05,570 --> 00:04:11,359
captive and that's the bit that provides

114
00:04:09,170 --> 00:04:13,160
the guest virtual machine which is the

115
00:04:11,360 --> 00:04:14,990
architecture that you're actually after

116
00:04:13,160 --> 00:04:17,000
so you're after an arm v8 guest the

117
00:04:14,990 --> 00:04:19,220
virtual machine the unit kernel runs

118
00:04:17,000 --> 00:04:21,980
inside the bare metal host virtual

119
00:04:19,220 --> 00:04:24,320
machine environment and provides the

120
00:04:21,980 --> 00:04:27,380
implementation of arm v8 so I hope

121
00:04:24,320 --> 00:04:28,550
that's that's clear and you might be

122
00:04:27,380 --> 00:04:30,740
wondering why we actually go to this

123
00:04:28,550 --> 00:04:32,660
trouble of implementing a unicorn or

124
00:04:30,740 --> 00:04:34,640
cause because it's a it's tricky when

125
00:04:32,660 --> 00:04:36,169
you have this bare metal environment no

126
00:04:34,640 --> 00:04:38,120
operating system no standard libraries

127
00:04:36,169 --> 00:04:39,620
nothing like that you've got to tick

128
00:04:38,120 --> 00:04:42,440
of everything yourself it turns out

129
00:04:39,620 --> 00:04:45,139
there's a number of benefits to doing it

130
00:04:42,440 --> 00:04:46,910
in this bare-metal environment and I'm

131
00:04:45,139 --> 00:04:48,729
going to explain this one pretty quickly

132
00:04:46,910 --> 00:04:51,889
because the paper isn't actually about

133
00:04:48,729 --> 00:04:53,180
so much the MMU side of things or what

134
00:04:51,889 --> 00:04:55,070
we can do from the architecture I'm of

135
00:04:53,180 --> 00:04:56,630
the DBT side of things there is another

136
00:04:55,070 --> 00:04:58,820
paper about this but I think it's useful

137
00:04:56,630 --> 00:05:00,770
to know why we actually operate in this

138
00:04:58,820 --> 00:05:02,780
sort of way why we're not just doing

139
00:05:00,770 --> 00:05:05,090
this as a horse application so one of

140
00:05:02,780 --> 00:05:07,190
the benefits is that we can do MMU page

141
00:05:05,090 --> 00:05:09,650
table mapping which is pretty cool so

142
00:05:07,190 --> 00:05:11,719
arm guest page table entries are

143
00:05:09,650 --> 00:05:13,789
semantically quite similar to x86 page

144
00:05:11,720 --> 00:05:16,490
table entries well if you're operating

145
00:05:13,789 --> 00:05:18,530
in an x86 bare-metal environment you

146
00:05:16,490 --> 00:05:20,389
have full control of the page tables so

147
00:05:18,530 --> 00:05:21,948
what we actually do is we take our SP

148
00:05:20,389 --> 00:05:24,350
edge table entries turn them into

149
00:05:21,949 --> 00:05:26,120
corresponding x86 page table entries and

150
00:05:24,350 --> 00:05:30,970
we can use that to accelerate memory

151
00:05:26,120 --> 00:05:33,350
accesses in the guest so we can take a a

152
00:05:30,970 --> 00:05:36,110
virtual address from the guest system

153
00:05:33,350 --> 00:05:37,910
and almost identically replicate it on

154
00:05:36,110 --> 00:05:40,010
the horse machine by using the hardware

155
00:05:37,910 --> 00:05:42,289
page table system by using the hardware

156
00:05:40,010 --> 00:05:44,419
MMU which has lots of benefits over

157
00:05:42,289 --> 00:05:46,280
using a software MMU implementation of

158
00:05:44,419 --> 00:05:48,289
course there's little things around that

159
00:05:46,280 --> 00:05:51,289
they have to take care of but it really

160
00:05:48,289 --> 00:05:54,740
does accelerate em virtual memory

161
00:05:51,289 --> 00:05:56,510
virtualization so this is this is how

162
00:05:54,740 --> 00:05:58,370
captive works and there's there's two

163
00:05:56,510 --> 00:06:00,409
stages to it there's an offline stage

164
00:05:58,370 --> 00:06:02,000
and an on-line stage and the offline

165
00:06:00,410 --> 00:06:04,550
stage is all about producing the

166
00:06:02,000 --> 00:06:05,930
architecture module that implements the

167
00:06:04,550 --> 00:06:07,550
architecture that is that you're

168
00:06:05,930 --> 00:06:09,830
interested in so you take an

169
00:06:07,550 --> 00:06:12,020
architecture description which is a file

170
00:06:09,830 --> 00:06:14,389
that contains a list of the instructions

171
00:06:12,020 --> 00:06:16,639
and how they get decoded and then a list

172
00:06:14,389 --> 00:06:18,470
of behaviors for those instructions so

173
00:06:16,639 --> 00:06:20,780
each instruction has an Associated

174
00:06:18,470 --> 00:06:22,849
behavior which is written in a C like

175
00:06:20,780 --> 00:06:25,010
language I say C like because it looks a

176
00:06:22,849 --> 00:06:26,810
lot like C but there's extensions and

177
00:06:25,010 --> 00:06:28,940
domain specific extensions that make

178
00:06:26,810 --> 00:06:31,340
writing architecture behaviors a bit

179
00:06:28,940 --> 00:06:33,530
easier like brought eight operators and

180
00:06:31,340 --> 00:06:35,239
various intrinsics so you take the

181
00:06:33,530 --> 00:06:37,388
description you pop it into gen sim

182
00:06:35,240 --> 00:06:40,820
which is our simulator generator system

183
00:06:37,389 --> 00:06:42,860
which optimizes the model and produces

184
00:06:40,820 --> 00:06:45,169
the the guest architecture module which

185
00:06:42,860 --> 00:06:47,210
is then used by the hypervisor so the

186
00:06:45,169 --> 00:06:48,830
reason we have this this optimizer in

187
00:06:47,210 --> 00:06:50,750
this offline stage is so that you can

188
00:06:48,830 --> 00:06:51,740
write your architecture description in a

189
00:06:50,750 --> 00:06:53,990
really natural way

190
00:06:51,740 --> 00:06:58,520
as a programmer you might think in the

191
00:06:53,990 --> 00:07:00,350
way that C the C language the C language

192
00:06:58,520 --> 00:07:01,849
works and if you're writing your

193
00:07:00,350 --> 00:07:04,130
architecture description and your

194
00:07:01,850 --> 00:07:05,960
instruction behaviors in C you'd want to

195
00:07:04,130 --> 00:07:08,000
use features like function calls and

196
00:07:05,960 --> 00:07:09,409
variables and lists that in the other so

197
00:07:08,000 --> 00:07:11,330
if you can write your architecture

198
00:07:09,410 --> 00:07:12,680
description and very natural where run

199
00:07:11,330 --> 00:07:15,289
it through the optimizer you're going to

200
00:07:12,680 --> 00:07:16,670
get the best performance at the end of

201
00:07:15,290 --> 00:07:19,850
the day for the for the architecture

202
00:07:16,670 --> 00:07:21,740
that you're describing and this is what

203
00:07:19,850 --> 00:07:25,370
an instruction description might look

204
00:07:21,740 --> 00:07:27,800
like so this is for the add I add I

205
00:07:25,370 --> 00:07:29,780
instruction which is added an immediate

206
00:07:27,800 --> 00:07:33,050
you just see that red pointer there

207
00:07:29,780 --> 00:07:35,479
there's a couple of function calls here

208
00:07:33,050 --> 00:07:38,210
that d-chord part of the instruction to

209
00:07:35,480 --> 00:07:40,100
get immediate values and what one of the

210
00:07:38,210 --> 00:07:42,229
operands is then there's a control flow

211
00:07:40,100 --> 00:07:45,140
statements here which can be evaluated

212
00:07:42,230 --> 00:07:47,000
at JIT compilation time to see if it's a

213
00:07:45,140 --> 00:07:48,740
flag setting instruction and what size

214
00:07:47,000 --> 00:07:52,160
the instruction operands are and we've

215
00:07:48,740 --> 00:07:54,320
got some function calls that compute add

216
00:07:52,160 --> 00:07:56,720
with carries with flags and other things

217
00:07:54,320 --> 00:07:58,370
and then right back into registers so

218
00:07:56,720 --> 00:08:00,560
it's quite nice way to describe your

219
00:07:58,370 --> 00:08:02,960
architecture and this then gets passed

220
00:08:00,560 --> 00:08:05,180
by Jensen and optimized into a

221
00:08:02,960 --> 00:08:06,229
domain-specific SSA form I'm not going

222
00:08:05,180 --> 00:08:07,610
to go through all of this because it's

223
00:08:06,230 --> 00:08:09,020
not that interesting but what you can

224
00:08:07,610 --> 00:08:11,690
see is on the left you get the

225
00:08:09,020 --> 00:08:13,729
unoptimized SSA representation of this

226
00:08:11,690 --> 00:08:15,560
instruction behavior run it through some

227
00:08:13,730 --> 00:08:17,740
aggressive optimizations and you get a

228
00:08:15,560 --> 00:08:20,150
much shorter sequence of SSE

229
00:08:17,740 --> 00:08:22,100
instructions and when you have the

230
00:08:20,150 --> 00:08:24,979
optimized SSA form of the instruction

231
00:08:22,100 --> 00:08:27,290
behavior you get a generator function

232
00:08:24,980 --> 00:08:29,420
and this is what actually goes into that

233
00:08:27,290 --> 00:08:31,310
architecture module now the generator

234
00:08:29,420 --> 00:08:34,220
function is generated code so it looks

235
00:08:31,310 --> 00:08:36,830
awful but it gets the job done for every

236
00:08:34,220 --> 00:08:39,950
SSA statement there the generator

237
00:08:36,830 --> 00:08:42,200
function has an equivalent line in the

238
00:08:39,950 --> 00:08:44,240
cord to to implement that particular SSA

239
00:08:42,200 --> 00:08:46,730
operation and it's this generator

240
00:08:44,240 --> 00:08:49,100
function that is invoked by the online

241
00:08:46,730 --> 00:08:50,810
runtime every time it encounters an

242
00:08:49,100 --> 00:08:53,450
instruction that it has to translate it

243
00:08:50,810 --> 00:08:55,189
we typically translate basic blocks of

244
00:08:53,450 --> 00:08:58,100
instructions at a time sometimes we

245
00:08:55,190 --> 00:09:00,770
translate traces of instructions and for

246
00:08:58,100 --> 00:09:02,660
each instruction in that trace the

247
00:09:00,770 --> 00:09:05,449
generator function is invoked at

248
00:09:02,660 --> 00:09:06,680
compilation time to build a graph that

249
00:09:05,450 --> 00:09:08,750
represents the behavior of that

250
00:09:06,680 --> 00:09:12,290
instruction and eventually the behavior

251
00:09:08,750 --> 00:09:13,910
of that particular basic block so taking

252
00:09:12,290 --> 00:09:15,110
this guest architecture module which

253
00:09:13,910 --> 00:09:17,750
contains all of these generator

254
00:09:15,110 --> 00:09:19,490
functions we pop it into captive into

255
00:09:17,750 --> 00:09:21,830
the online stage into the hypervisor

256
00:09:19,490 --> 00:09:23,330
stage along with your guest system image

257
00:09:21,830 --> 00:09:25,550
so that contains your kernel and it

258
00:09:23,330 --> 00:09:27,290
continued user space or any disk images

259
00:09:25,550 --> 00:09:29,479
platform description what sort of

260
00:09:27,290 --> 00:09:31,490
devices exist in the platform pop into

261
00:09:29,480 --> 00:09:33,350
captive and captive runs that and you

262
00:09:31,490 --> 00:09:36,440
get your guest machine that is described

263
00:09:33,350 --> 00:09:38,600
by the architecture and this is what the

264
00:09:36,440 --> 00:09:40,310
execution looks a loop looks like very

265
00:09:38,600 --> 00:09:42,680
high-level we start off with the guest

266
00:09:40,310 --> 00:09:44,750
physical PC and the physical PC is

267
00:09:42,680 --> 00:09:46,969
checked to see if a translation for that

268
00:09:44,750 --> 00:09:48,710
PC exists and if it does it just

269
00:09:46,970 --> 00:09:50,870
executes the translation and then loops

270
00:09:48,710 --> 00:09:52,790
back around and if it doesn't the basic

271
00:09:50,870 --> 00:09:56,210
block is translated stored in the cache

272
00:09:52,790 --> 00:09:58,130
and then executed there's a lot of cool

273
00:09:56,210 --> 00:10:00,650
things that we do to make this go faster

274
00:09:58,130 --> 00:10:02,990
so we do jump chaining and we we can

275
00:10:00,650 --> 00:10:04,880
stitch things together but pretty much

276
00:10:02,990 --> 00:10:06,860
that's the execution loop it translates

277
00:10:04,880 --> 00:10:09,350
on the fly and the translation stage is

278
00:10:06,860 --> 00:10:12,080
very quick it has to be to make sure

279
00:10:09,350 --> 00:10:14,330
there's not not much latency and the

280
00:10:12,080 --> 00:10:16,370
important thing about the the PC here is

281
00:10:14,330 --> 00:10:18,350
that it is a physical piece thing so we

282
00:10:16,370 --> 00:10:19,940
cache the translations by their physical

283
00:10:18,350 --> 00:10:21,920
address which means that we don't have

284
00:10:19,940 --> 00:10:24,140
to retranslate when the page tables

285
00:10:21,920 --> 00:10:25,849
change when the page tables change

286
00:10:24,140 --> 00:10:27,319
unlike cue memory which has to lose all

287
00:10:25,850 --> 00:10:30,200
of its translations when the virtual

288
00:10:27,320 --> 00:10:31,700
address mappings change and this is how

289
00:10:30,200 --> 00:10:33,740
a basic block actually gets translated

290
00:10:31,700 --> 00:10:36,440
so there's three arm instructions there

291
00:10:33,740 --> 00:10:38,660
along the bottom add X 0 X 0 hash one

292
00:10:36,440 --> 00:10:42,170
more of X 1 X 0 and branch with the link

293
00:10:38,660 --> 00:10:44,900
to some address and what happens is when

294
00:10:42,170 --> 00:10:46,729
the translator comes across the this

295
00:10:44,900 --> 00:10:48,890
first instruction it produces part of

296
00:10:46,730 --> 00:10:51,080
this this graph that represents the

297
00:10:48,890 --> 00:10:53,150
behavior so it's an order which is store

298
00:10:51,080 --> 00:10:55,010
which stores a register and then there's

299
00:10:53,150 --> 00:10:57,590
an addition of a guest register with a

300
00:10:55,010 --> 00:11:00,140
constant and the store goes back into

301
00:10:57,590 --> 00:11:01,940
the X 0 register there and then the next

302
00:11:00,140 --> 00:11:03,319
instruction is a mob and the final

303
00:11:01,940 --> 00:11:05,600
instruction has a store to the link

304
00:11:03,320 --> 00:11:07,070
register and a store to the the PC

305
00:11:05,600 --> 00:11:10,160
because we're advancing the program

306
00:11:07,070 --> 00:11:13,040
counter by a certain amount and as we

307
00:11:10,160 --> 00:11:16,160
come across Nords in this tree in this

308
00:11:13,040 --> 00:11:18,290
dag that have side effects and we say a

309
00:11:16,160 --> 00:11:19,310
side effect inaud is one that does

310
00:11:18,290 --> 00:11:21,050
something that meat

311
00:11:19,310 --> 00:11:22,849
it's the guest steer so for example a

312
00:11:21,050 --> 00:11:25,160
register right which is this store here

313
00:11:22,850 --> 00:11:27,590
the tree is collapsed at that point into

314
00:11:25,160 --> 00:11:29,390
horse machine instructions so as soon as

315
00:11:27,590 --> 00:11:31,340
we come across that store node we walk

316
00:11:29,390 --> 00:11:34,189
that tree and we emit a horse

317
00:11:31,340 --> 00:11:37,070
a native chord sequence that implements

318
00:11:34,190 --> 00:11:40,130
that part of the tree and when the basic

319
00:11:37,070 --> 00:11:42,620
block is translated we lower that that

320
00:11:40,130 --> 00:11:44,300
tree and we get the Machine cord before

321
00:11:42,620 --> 00:11:46,550
the horse platform that we're running on

322
00:11:44,300 --> 00:11:49,010
so that adds X 0 at the top gets load to

323
00:11:46,550 --> 00:11:50,750
those three x86 instructions the more of

324
00:11:49,010 --> 00:11:52,760
those two there and the branch with link

325
00:11:50,750 --> 00:11:54,980
and gets lured to those three x86

326
00:11:52,760 --> 00:11:58,220
instructions as we come across each of

327
00:11:54,980 --> 00:12:00,230
those side effect nodes in the tree and

328
00:11:58,220 --> 00:12:01,760
we can exploit quite a few our textual

329
00:12:00,230 --> 00:12:03,770
features running in this bare metal

330
00:12:01,760 --> 00:12:05,330
virtual machine environment we have full

331
00:12:03,770 --> 00:12:06,800
control of the horse to MMU which i

332
00:12:05,330 --> 00:12:08,900
mentioned at the start we can use

333
00:12:06,800 --> 00:12:11,569
privilege levels so we've got user mode

334
00:12:08,900 --> 00:12:13,610
and kernel mode arm have their privilege

335
00:12:11,570 --> 00:12:15,589
levels music mode and kernel mode and we

336
00:12:13,610 --> 00:12:17,240
can mirror that in the execution of our

337
00:12:15,589 --> 00:12:18,890
guest and take advantage of memory

338
00:12:17,240 --> 00:12:20,570
protections that way we can use

339
00:12:18,890 --> 00:12:22,819
privileged instructions like in and out

340
00:12:20,570 --> 00:12:24,230
and cisco insists ret we can use special

341
00:12:22,820 --> 00:12:26,900
registers we have complete control over

342
00:12:24,230 --> 00:12:29,089
the ABI so we we can do things like

343
00:12:26,900 --> 00:12:30,829
reserve registers to use for our own

344
00:12:29,089 --> 00:12:32,510
purposes and we can use software and

345
00:12:30,830 --> 00:12:34,250
hardware interrupts for fast device

346
00:12:32,510 --> 00:12:37,460
communication and it's fast

347
00:12:34,250 --> 00:12:38,870
he is spec and there's a noticeable

348
00:12:37,460 --> 00:12:42,490
speed up there however everything the

349
00:12:38,870 --> 00:12:45,020
geo mean is just above two times and

350
00:12:42,490 --> 00:12:46,339
yeah it runs at near-native speed some

351
00:12:45,020 --> 00:12:49,430
of our benchmarks that are in the paper

352
00:12:46,339 --> 00:12:52,040
shows that it runs about 40 percent of

353
00:12:49,430 --> 00:12:54,410
the speed of a native like arm server

354
00:12:52,040 --> 00:12:58,969
but it can actually outperform raspberry

355
00:12:54,410 --> 00:13:00,589
pi implementations as well so that is

356
00:12:58,970 --> 00:13:02,470
the end of my talk I'm absolutely

357
00:13:00,589 --> 00:13:04,850
delighted to speak to any of you about

358
00:13:02,470 --> 00:13:07,070
any of this in further detail got a

359
00:13:04,850 --> 00:13:09,320
poster session later and I can show a

360
00:13:07,070 --> 00:13:11,089
demonstration of it booting Linux if you

361
00:13:09,320 --> 00:13:13,660
want to at the poster session as well so

362
00:13:11,089 --> 00:13:13,660
thank you very much

363
00:13:17,139 --> 00:13:21,880
thank you do you have any questions

364
00:13:23,079 --> 00:13:26,959
Keith when Stein Stanford that was a

365
00:13:25,070 --> 00:13:29,000
great talk thank you thank you I'm

366
00:13:26,959 --> 00:13:31,008
curious do you think you could run a web

367
00:13:29,000 --> 00:13:33,110
assembly container with this apparatus a

368
00:13:31,009 --> 00:13:36,319
web assembly container

369
00:13:33,110 --> 00:13:38,779
well the captive is designed to run an

370
00:13:36,319 --> 00:13:40,430
operating system so you take an

371
00:13:38,779 --> 00:13:41,930
operating system image and you run it in

372
00:13:40,430 --> 00:13:44,300
captive so anything you can run inside

373
00:13:41,930 --> 00:13:45,138
the operating system you can run there

374
00:13:44,300 --> 00:13:46,459
that's what it's for

375
00:13:45,139 --> 00:13:47,720
oh but I see what you mean if you wrote

376
00:13:46,459 --> 00:13:50,508
an architecture description for a web

377
00:13:47,720 --> 00:13:50,750
assembly interesting and I don't see why

378
00:13:50,509 --> 00:13:52,399
not

379
00:13:50,750 --> 00:13:54,889
if you can write the behavior for the

380
00:13:52,399 --> 00:13:59,360
instructions then yeah absolutely you

381
00:13:54,889 --> 00:14:02,029
totally could yeah did you take the

382
00:13:59,360 --> 00:14:04,220
extra step to do multiple course and SMP

383
00:14:02,029 --> 00:14:06,860
support yeah it's actually something

384
00:14:04,220 --> 00:14:08,269
we're working on so Martin there a PhD

385
00:14:06,860 --> 00:14:10,360
student is working on the multi-core

386
00:14:08,269 --> 00:14:14,120
side of things we've got an initial

387
00:14:10,360 --> 00:14:15,829
implementation of of it kind of working

388
00:14:14,120 --> 00:14:17,560
at the moment there are a couple of

389
00:14:15,829 --> 00:14:19,399
things to iron out as is with multi-core

390
00:14:17,560 --> 00:14:21,170
but that is something that we're working

391
00:14:19,399 --> 00:14:23,209
on I'm certainly later this year we hope

392
00:14:21,170 --> 00:14:25,490
to have maybe some papers about that

393
00:14:23,209 --> 00:14:27,619
what's what we've decided to do is

394
00:14:25,490 --> 00:14:31,819
instantiate multiple virtual CPUs with

395
00:14:27,620 --> 00:14:34,819
KVM to actually map multiple guest CPUs

396
00:14:31,819 --> 00:14:38,719
as well thank you fantastic work are you

397
00:14:34,819 --> 00:14:41,449
welcome Thanks thank you so I have a

398
00:14:38,720 --> 00:14:43,940
question along the web assembly line

399
00:14:41,449 --> 00:14:45,949
what's the was that at initial effort of

400
00:14:43,940 --> 00:14:46,819
getting an architecture specification I

401
00:14:45,949 --> 00:14:48,589
mean I guess you've gone through a

402
00:14:46,819 --> 00:14:50,810
couple of examples so what does it take

403
00:14:48,589 --> 00:14:53,569
to generate those inputs and is there

404
00:14:50,810 --> 00:14:56,029
anything from you know the the

405
00:14:53,569 --> 00:14:58,310
traditional architecture community that

406
00:14:56,029 --> 00:15:00,470
they already use when they're specifying

407
00:14:58,310 --> 00:15:02,989
new hardware that you can leverage as

408
00:15:00,470 --> 00:15:04,760
inputs okay very good question because

409
00:15:02,990 --> 00:15:07,610
the initial effort is extremely high and

410
00:15:04,760 --> 00:15:09,980
I've been working on captive maybe five

411
00:15:07,610 --> 00:15:11,329
or six years and that's not just the

412
00:15:09,980 --> 00:15:13,819
infrastructure that's implementing the

413
00:15:11,329 --> 00:15:15,739
model as well so we have an x86 model

414
00:15:13,819 --> 00:15:17,660
but that doesn't have any system support

415
00:15:15,740 --> 00:15:20,569
it just has user support for one of our

416
00:15:17,660 --> 00:15:22,610
other simulators we have an arm v7 model

417
00:15:20,569 --> 00:15:23,779
which is complete we have the UM b8

418
00:15:22,610 --> 00:15:25,850
model which is complete and we have a

419
00:15:23,779 --> 00:15:27,649
risk 5 model which is almost system

420
00:15:25,850 --> 00:15:28,700
complete but risk 5 is in a bit of flux

421
00:15:27,649 --> 00:15:30,680
at the moment

422
00:15:28,700 --> 00:15:33,320
and implementing a full architecture

423
00:15:30,680 --> 00:15:35,660
like that is very it's very

424
00:15:33,320 --> 00:15:38,480
time-consuming and it's taken you know

425
00:15:35,660 --> 00:15:40,100
our team a lot of work to get that over

426
00:15:38,480 --> 00:15:41,960
the years to work because there's

427
00:15:40,100 --> 00:15:43,700
writing the instruction behaviors which

428
00:15:41,960 --> 00:15:45,860
can be simple if you're reading from a

429
00:15:43,700 --> 00:15:47,090
manual and the pseudocode available but

430
00:15:45,860 --> 00:15:48,680
then there's also things like the MMU

431
00:15:47,090 --> 00:15:49,910
and there's the devices on the platform

432
00:15:48,680 --> 00:15:51,620
that also have to be implemented the

433
00:15:49,910 --> 00:15:53,660
interrupt controller as well and so that

434
00:15:51,620 --> 00:15:55,910
all takes a lot of time to answer these

435
00:15:53,660 --> 00:15:58,760
are part of your question about what is

436
00:15:55,910 --> 00:16:01,100
already used in architecture I know of a

437
00:15:58,760 --> 00:16:03,110
couple of things that that are used like

438
00:16:01,100 --> 00:16:04,520
blue spec and the sale that have formal

439
00:16:03,110 --> 00:16:06,020
descriptions for their models and I'd

440
00:16:04,520 --> 00:16:09,199
really like to use that as a front-end

441
00:16:06,020 --> 00:16:11,240
to Jensen to take advantage of work that

442
00:16:09,200 --> 00:16:13,130
other people have already done rather

443
00:16:11,240 --> 00:16:14,720
than having to use our architecture

444
00:16:13,130 --> 00:16:16,960
description language it's definitely

445
00:16:14,720 --> 00:16:20,510
something that that were thinking about

446
00:16:16,960 --> 00:16:23,300
the the sale one in particular our

447
00:16:20,510 --> 00:16:25,010
colleagues of an arm have the UM v8

448
00:16:23,300 --> 00:16:26,479
model for that it's very different way

449
00:16:25,010 --> 00:16:27,770
of thinking to how we've implemented it

450
00:16:26,480 --> 00:16:30,380
because it's it's more functional

451
00:16:27,770 --> 00:16:32,030
whereas ours is more procedural and but

452
00:16:30,380 --> 00:16:33,680
I think it'd be interesting to see if we

453
00:16:32,030 --> 00:16:36,829
can reuse those kinds of things as a

454
00:16:33,680 --> 00:16:38,569
front-end to the simulator generator ok

455
00:16:36,830 --> 00:16:41,420
thank you very much and congratulations

456
00:16:38,570 --> 00:16:46,460
on your award one time thank you

457
00:16:41,420 --> 00:16:46,459
[Applause]

