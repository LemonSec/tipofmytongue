1
00:00:10,350 --> 00:00:16,329
clip 1 bolted is a bare metal cloud

2
00:00:14,170 --> 00:00:19,509
architecture to support security sense

3
00:00:16,329 --> 00:00:22,028
intense security sensitive tenants are

4
00:00:19,510 --> 00:00:23,980
entities such as hospitals or financial

5
00:00:22,029 --> 00:00:26,950
Institute's that have both expertise

6
00:00:23,980 --> 00:00:28,990
desire or requirement to trust their own

7
00:00:26,950 --> 00:00:31,450
security arrangements over those of a

8
00:00:28,990 --> 00:00:32,949
cloud provider this wall is a

9
00:00:31,450 --> 00:00:36,850
collaboration between the massive rain

10
00:00:32,950 --> 00:00:38,860
cloud and our industry partners there

11
00:00:36,850 --> 00:00:41,670
are several problems with existing

12
00:00:38,860 --> 00:00:45,100
clause for security sensitive tenants

13
00:00:41,670 --> 00:00:48,130
first visualize clouds co-locate

14
00:00:45,100 --> 00:00:51,250
multiple tenants to a single physical

15
00:00:48,130 --> 00:00:54,370
node exposing tenant to side channel and

16
00:00:51,250 --> 00:00:56,740
covert channel attacks also malicious

17
00:00:54,370 --> 00:01:00,190
tenants you can exploit vulnerabilities

18
00:00:56,740 --> 00:01:02,800
as a type in the hypervisor to launch

19
00:01:00,190 --> 00:01:06,700
attacks against other tenants and the

20
00:01:02,800 --> 00:01:09,429
provider itself second popular cloud

21
00:01:06,700 --> 00:01:12,729
management software's like OpenStack can

22
00:01:09,430 --> 00:01:15,490
have a trusted computing base with

23
00:01:12,729 --> 00:01:19,630
millions of lines of code and a massive

24
00:01:15,490 --> 00:01:22,600
attack surface third the existing cloud

25
00:01:19,630 --> 00:01:27,158
are black boxes providing tenants with

26
00:01:22,600 --> 00:01:29,110
very limited visibility and control the

27
00:01:27,159 --> 00:01:31,870
tenant including security sensitives

28
00:01:29,110 --> 00:01:34,240
with deep expertise need to fully trust

29
00:01:31,870 --> 00:01:38,159
that the provider is doing everything

30
00:01:34,240 --> 00:01:42,548
right in from security perspective

31
00:01:38,159 --> 00:01:45,150
finally for operational efficiency cloud

32
00:01:42,549 --> 00:01:48,580
providers tend to support

33
00:01:45,150 --> 00:01:51,340
one-size-fits-all solution where they

34
00:01:48,580 --> 00:01:54,400
apply uniform solutions like network

35
00:01:51,340 --> 00:01:56,700
encryption to all customers different

36
00:01:54,400 --> 00:01:59,860
security sensitive tenant can have

37
00:01:56,700 --> 00:02:03,520
different security requirements for

38
00:01:59,860 --> 00:02:05,860
example different agencies and may need

39
00:02:03,520 --> 00:02:09,369
two independent layers of encryption

40
00:02:05,860 --> 00:02:12,519
while a heap a dozen required in

41
00:02:09,369 --> 00:02:14,769
addition by definition most tenants are

42
00:02:12,519 --> 00:02:18,190
not security sensitive tenants and if

43
00:02:14,769 --> 00:02:20,980
the provider deploys a very strict

44
00:02:18,190 --> 00:02:24,099
security solution it may hurt the

45
00:02:20,980 --> 00:02:26,510
performance of the other tenants

46
00:02:24,099 --> 00:02:28,909
while permit all cloths

47
00:02:26,510 --> 00:02:31,159
eliminate the security concerns implicit

48
00:02:28,909 --> 00:02:33,849
in virtualization they are not

49
00:02:31,159 --> 00:02:36,319
addressing the other challenges that I

50
00:02:33,849 --> 00:02:39,260
described in previous slides

51
00:02:36,319 --> 00:02:42,319
for example openness tax a bare-metal

52
00:02:39,260 --> 00:02:46,548
service it still has all the OpenStack

53
00:02:42,319 --> 00:02:50,530
in its TCP also bare metal claws are one

54
00:02:46,549 --> 00:02:53,659
able to a class of memory based attacks

55
00:02:50,530 --> 00:02:58,010
so a question is is it possible to have

56
00:02:53,659 --> 00:03:00,649
a cloud even suitable for security

57
00:02:58,010 --> 00:03:03,560
sensitive tenants is it possible for

58
00:03:00,650 --> 00:03:06,049
this kind of patents to not fully trust

59
00:03:03,560 --> 00:03:08,680
the provider and is it possible to

60
00:03:06,049 --> 00:03:11,709
achieve this without sacrificing the

61
00:03:08,680 --> 00:03:14,209
performance of the other tenants

62
00:03:11,709 --> 00:03:17,150
we developed an architecture for bare

63
00:03:14,209 --> 00:03:19,700
metal cloud altered which demonstrates

64
00:03:17,150 --> 00:03:25,370
that to answer all of these questions is

65
00:03:19,700 --> 00:03:28,250
yes bolted has three main macro services

66
00:03:25,370 --> 00:03:34,239
that tenant interacts with them through

67
00:03:28,250 --> 00:03:38,389
a user level script isolation service

68
00:03:34,239 --> 00:03:41,870
can be used by tenant to allocate node

69
00:03:38,389 --> 00:03:45,319
and network provisioning service is used

70
00:03:41,870 --> 00:03:48,440
to load operating system and software on

71
00:03:45,319 --> 00:03:50,738
the node and attestation service a lost

72
00:03:48,440 --> 00:03:54,379
tenants to measure firmware and software

73
00:03:50,739 --> 00:03:56,389
into a TPM crypto processor and then

74
00:03:54,379 --> 00:03:57,230
compare these measurements against a

75
00:03:56,389 --> 00:03:59,209
whitelist

76
00:03:57,230 --> 00:04:03,819
to make sure that the node is not

77
00:03:59,209 --> 00:04:08,720
compromised here here how does it works

78
00:04:03,819 --> 00:04:12,619
the tenant uses the isolation service to

79
00:04:08,720 --> 00:04:16,310
get a free bare metal node then she

80
00:04:12,620 --> 00:04:19,430
creates an isolated environment that we

81
00:04:16,310 --> 00:04:22,430
call airlock where she can make sure

82
00:04:19,430 --> 00:04:25,940
that the software running on the node in

83
00:04:22,430 --> 00:04:29,090
including firmware is not compromised

84
00:04:25,940 --> 00:04:32,930
before she puts the node into her secure

85
00:04:29,090 --> 00:04:36,580
network using isolation service she puts

86
00:04:32,930 --> 00:04:42,620
the free newly acquired node into the

87
00:04:36,580 --> 00:04:45,650
then using provisioning service we

88
00:04:42,620 --> 00:04:49,669
download attestation services

89
00:04:45,650 --> 00:04:51,979
client-side on the machine and we attest

90
00:04:49,669 --> 00:04:55,090
this software and including the firmware

91
00:04:51,979 --> 00:04:57,229
running on the machine against FY please

92
00:04:55,090 --> 00:05:00,530
residing in the attestation services

93
00:04:57,229 --> 00:05:04,520
server site if the note passes the

94
00:05:00,530 --> 00:05:07,340
attestation tenant puts the note into

95
00:05:04,520 --> 00:05:10,568
her secure Network and provision it with

96
00:05:07,340 --> 00:05:14,590
operating system and application if not

97
00:05:10,569 --> 00:05:17,030
envisioned a tenant and rejects the note

98
00:05:14,590 --> 00:05:21,138
we have developed a prototype of both

99
00:05:17,030 --> 00:05:24,318
architecture hardware isolation layer or

100
00:05:21,139 --> 00:05:28,039
Hill is our implementation of isolation

101
00:05:24,319 --> 00:05:31,000
service a tenant can invoke Hill to

102
00:05:28,039 --> 00:05:34,039
allocate nodes creates Network and

103
00:05:31,000 --> 00:05:37,360
including management network and connect

104
00:05:34,039 --> 00:05:41,440
this network to to any provisioning tool

105
00:05:37,360 --> 00:05:43,759
Hill controls providers switch to

106
00:05:41,440 --> 00:05:48,259
provide we land based isolation

107
00:05:43,759 --> 00:05:51,529
therefore tenant cannot deploy a hill

108
00:05:48,259 --> 00:05:54,469
because it means it has it needs to have

109
00:05:51,529 --> 00:05:57,889
privileges so it must be deployed by the

110
00:05:54,469 --> 00:06:00,229
provider to minimize the tcp we tried

111
00:05:57,889 --> 00:06:01,669
hard to keep Hill very simple and this

112
00:06:00,229 --> 00:06:06,770
implemented in two thousand lines of

113
00:06:01,669 --> 00:06:09,849
code parameter imaging or PMI is our

114
00:06:06,770 --> 00:06:14,029
implementation for provisioning service

115
00:06:09,849 --> 00:06:18,949
PMI serves images from ice classic based

116
00:06:14,029 --> 00:06:22,029
network mounted boot drives and with the

117
00:06:18,949 --> 00:06:25,310
backends of distributed sewage system it

118
00:06:22,029 --> 00:06:28,699
as a result there is no need to escort a

119
00:06:25,310 --> 00:06:32,690
node before releasing it when the node

120
00:06:28,699 --> 00:06:35,960
network put it only fetches the part of

121
00:06:32,690 --> 00:06:39,500
the image that it uses and it is usually

122
00:06:35,960 --> 00:06:43,729
less than 1% and this significantly

123
00:06:39,500 --> 00:06:46,069
reduces the provisioning time key now is

124
00:06:43,729 --> 00:06:49,430
our implementation of attestation

125
00:06:46,069 --> 00:06:49,790
service it is a remote attestation and

126
00:06:49,430 --> 00:06:52,760
key

127
00:06:49,790 --> 00:06:57,050
management system it delivers tenants

128
00:06:52,760 --> 00:07:07,210
who kill colonel in his RT in encryption

129
00:06:57,050 --> 00:07:09,770
keys and full o controlling scripts so

130
00:07:07,210 --> 00:07:13,700
fundamental goal of our system is to

131
00:07:09,770 --> 00:07:15,890
provide flexibility so that tenants only

132
00:07:13,700 --> 00:07:18,260
pay in performance and cost for the

133
00:07:15,890 --> 00:07:21,289
security they need while security

134
00:07:18,260 --> 00:07:24,260
sensitive tenant can take full control

135
00:07:21,290 --> 00:07:28,210
of their own security to show how we do

136
00:07:24,260 --> 00:07:31,460
this let's walk through a simple example

137
00:07:28,210 --> 00:07:34,460
imagine we have a security insensitive

138
00:07:31,460 --> 00:07:37,010
tenant Alice she can be a graduate

139
00:07:34,460 --> 00:07:38,599
student for example she uses providers

140
00:07:37,010 --> 00:07:40,610
isolation service and provisioning

141
00:07:38,600 --> 00:07:43,400
service and runs her applications as

142
00:07:40,610 --> 00:07:46,220
fast as possible now imagine we have

143
00:07:43,400 --> 00:07:48,380
security sensitive tenant Bob who is

144
00:07:46,220 --> 00:07:50,990
willing to trust the provider but not

145
00:07:48,380 --> 00:07:52,969
other tenants who may have used the

146
00:07:50,990 --> 00:07:56,120
machine he's using and compromised

147
00:07:52,970 --> 00:07:58,370
before so he uses providers attestation

148
00:07:56,120 --> 00:08:00,070
service to make sure that the node is

149
00:07:58,370 --> 00:08:02,990
not compromised

150
00:08:00,070 --> 00:08:06,040
in addition we have Charlie here who is

151
00:08:02,990 --> 00:08:11,420
security sensitive and he doesn't trust

152
00:08:06,040 --> 00:08:13,580
not provider or other tenants so but he

153
00:08:11,420 --> 00:08:16,460
doesn't have any choice other than using

154
00:08:13,580 --> 00:08:19,520
providers isolation service because as I

155
00:08:16,460 --> 00:08:21,049
said before isolation service and has to

156
00:08:19,520 --> 00:08:22,789
have the privilege to work with network

157
00:08:21,050 --> 00:08:26,330
switches to implement a network

158
00:08:22,790 --> 00:08:29,210
isolation so he needs to use that but he

159
00:08:26,330 --> 00:08:31,280
has the expertise to deploy his own

160
00:08:29,210 --> 00:08:33,610
security procedures including

161
00:08:31,280 --> 00:08:38,059
provisioning and attestation services

162
00:08:33,610 --> 00:08:40,340
both of components can can be any system

163
00:08:38,059 --> 00:08:43,039
with required features here for example

164
00:08:40,340 --> 00:08:45,140
provider uses he'll be MI and key lime

165
00:08:43,039 --> 00:08:48,170
to deploy his own pallet a security

166
00:08:45,140 --> 00:08:51,860
policy on the other hand Charlie uses

167
00:08:48,170 --> 00:08:55,010
Foreman which is a popular provisioning

168
00:08:51,860 --> 00:08:57,950
tool and it is used by many enterprises

169
00:08:55,010 --> 00:09:01,089
for provisioning and he uses key lime

170
00:08:57,950 --> 00:09:03,339
possibly with some medications to

171
00:09:01,089 --> 00:09:07,600
sir and address his security

172
00:09:03,339 --> 00:09:10,029
requirements as I explained in the

173
00:09:07,600 --> 00:09:12,279
previous slide and if a tenant doesn't

174
00:09:10,029 --> 00:09:15,399
trust other tenants he can use app or

175
00:09:12,279 --> 00:09:18,879
wireless services if it doesn't he need

176
00:09:15,399 --> 00:09:21,850
to deploy his own services but it is not

177
00:09:18,879 --> 00:09:24,339
good enough right for example if the

178
00:09:21,850 --> 00:09:26,529
provide because provider for example can

179
00:09:24,339 --> 00:09:28,870
see the ordinate and traffic going

180
00:09:26,529 --> 00:09:32,589
through the network so he needs to do

181
00:09:28,870 --> 00:09:34,240
more than deploying on services the

182
00:09:32,589 --> 00:09:36,430
first thing that he needs to do is

183
00:09:34,240 --> 00:09:40,120
encrypt the network in our

184
00:09:36,430 --> 00:09:41,430
implementation we have used key lime and

185
00:09:40,120 --> 00:09:43,749
key lime supports automatic

186
00:09:41,430 --> 00:09:46,809
configurations of hydrosec for network

187
00:09:43,749 --> 00:09:49,600
encryption and this is happening using

188
00:09:46,809 --> 00:09:52,499
key bootstrap during attestation and it

189
00:09:49,600 --> 00:09:55,990
is bound to TPMS hardware root of trust

190
00:09:52,499 --> 00:09:58,029
the second thing that a tenant security

191
00:09:55,990 --> 00:10:01,689
sensitive tenant needs to do is to

192
00:09:58,029 --> 00:10:05,079
encrypt a disk because to remove this

193
00:10:01,689 --> 00:10:07,569
actually because the provider has access

194
00:10:05,079 --> 00:10:10,359
to the raw volume in our implementation

195
00:10:07,569 --> 00:10:13,349
we have used Linux Unified key setup and

196
00:10:10,360 --> 00:10:15,790
we have integrated locks with key lime

197
00:10:13,350 --> 00:10:21,639
which would straps kids during

198
00:10:15,790 --> 00:10:23,709
attestation as we explained before pair

199
00:10:21,639 --> 00:10:28,929
metal claws are vulnerable to firmware

200
00:10:23,709 --> 00:10:31,449
based attacks existing BIOS and UEFI

201
00:10:28,929 --> 00:10:34,179
are complicated code with large attack

202
00:10:31,449 --> 00:10:37,990
surface they are opaque and there are

203
00:10:34,179 --> 00:10:40,059
one and the tenants cannot check them

204
00:10:37,990 --> 00:10:42,550
verify them to see if they have one

205
00:10:40,059 --> 00:10:44,860
Arbutus or not even they can't check

206
00:10:42,550 --> 00:10:48,459
that if the latest patch is applied or

207
00:10:44,860 --> 00:10:52,929
not to adjust this problem one of our

208
00:10:48,459 --> 00:10:56,229
quarters at 2 Sigma has developed Linux

209
00:10:52,929 --> 00:10:58,259
wood it is based on Linux so it is open

210
00:10:56,230 --> 00:11:00,309
source and is scrutinized by many users

211
00:10:58,259 --> 00:11:02,290
more important Linux wood is

212
00:11:00,309 --> 00:11:03,790
deterministic liberal which means that

213
00:11:02,290 --> 00:11:06,639
tenon can download the source code

214
00:11:03,790 --> 00:11:09,459
compile it and measure it and then

215
00:11:06,639 --> 00:11:12,250
compile this compare this measurement

216
00:11:09,459 --> 00:11:14,300
against the measurement of the firmware

217
00:11:12,250 --> 00:11:15,530
running on the machine and make sure

218
00:11:14,300 --> 00:11:18,949
that the firmer running on the machine

219
00:11:15,530 --> 00:11:23,000
is exactly is exactly the firmer that it

220
00:11:18,950 --> 00:11:27,110
expects to be we have used Linux foot as

221
00:11:23,000 --> 00:11:29,570
execution environment in our environment

222
00:11:27,110 --> 00:11:34,100
execution execution environment sorry

223
00:11:29,570 --> 00:11:36,860
for attestation client ha having Linux

224
00:11:34,100 --> 00:11:39,770
foot burned into the service flash ROM

225
00:11:36,860 --> 00:11:41,990
we directly download keylime clients on

226
00:11:39,770 --> 00:11:45,020
the machine and run it for the service

227
00:11:41,990 --> 00:11:48,050
that we can't put Linux boot on which

228
00:11:45,020 --> 00:11:50,870
frankly is most of our servers and we

229
00:11:48,050 --> 00:11:53,510
are using a ufi for minimum amount of

230
00:11:50,870 --> 00:11:57,260
time to download Linux boots run time

231
00:11:53,510 --> 00:12:00,950
and then follow the same steps as before

232
00:11:57,260 --> 00:12:04,569
and it was very cool thing to do the

233
00:12:00,950 --> 00:12:07,790
Rope burning the Linux panetta flash ROM

234
00:12:04,570 --> 00:12:11,300
what is the cost of the having a secure

235
00:12:07,790 --> 00:12:14,510
cloud in the speaker we show a foreman

236
00:12:11,300 --> 00:12:16,819
which installs fedora reboots the server

237
00:12:14,510 --> 00:12:19,460
and put from the local disk in

238
00:12:16,820 --> 00:12:21,620
environment it takes around 700 seconds

239
00:12:19,460 --> 00:12:23,870
and this is this number is very

240
00:12:21,620 --> 00:12:25,940
optimistic because many bare-metal

241
00:12:23,870 --> 00:12:27,650
services are doing are taking more than

242
00:12:25,940 --> 00:12:37,070
this because of the extra steps are

243
00:12:27,650 --> 00:12:39,740
doing for example scrubbing disk for the

244
00:12:37,070 --> 00:12:43,220
case that tenant doesn't care about the

245
00:12:39,740 --> 00:12:46,400
security with bolted he can use hill and

246
00:12:43,220 --> 00:12:49,460
BMI which takes 300 seconds in

247
00:12:46,400 --> 00:12:54,680
environment in our environment this time

248
00:12:49,460 --> 00:12:58,100
is dominated by ufi post time we

249
00:12:54,680 --> 00:13:00,290
introduce the network we introduced

250
00:12:58,100 --> 00:13:03,860
network mounting for this and what it

251
00:13:00,290 --> 00:13:06,170
drives to avoid to avoid scrubbing the

252
00:13:03,860 --> 00:13:08,800
node before releasing it but it actually

253
00:13:06,170 --> 00:13:11,660
resulted in a great perform asking

254
00:13:08,800 --> 00:13:15,349
because it downloads a small fraction of

255
00:13:11,660 --> 00:13:21,650
the image it uses for that users who

256
00:13:15,350 --> 00:13:24,410
care about about security and are

257
00:13:21,650 --> 00:13:27,760
willing to trust the provider but not

258
00:13:24,410 --> 00:13:30,459
other tenants they need to go through

259
00:13:27,760 --> 00:13:32,949
the steps that I discussed before for

260
00:13:30,459 --> 00:13:35,910
example putting the note into airlock

261
00:13:32,949 --> 00:13:39,040
status station moving the note to the

262
00:13:35,910 --> 00:13:42,010
network in secure network and casing

263
00:13:39,040 --> 00:13:49,380
into the kernel and all this process

264
00:13:42,010 --> 00:13:52,990
takes time but but even in that case

265
00:13:49,380 --> 00:13:58,480
voltage is faster than standard format

266
00:13:52,990 --> 00:14:01,350
for foreign in the case that the probe

267
00:13:58,480 --> 00:14:04,420
the user doesn't trust the provider and

268
00:14:01,350 --> 00:14:07,630
disk encryption and networking chain

269
00:14:04,420 --> 00:14:11,410
adds more overhead even in that case we

270
00:14:07,630 --> 00:14:14,820
are faster than again from a format in

271
00:14:11,410 --> 00:14:21,490
the case of our own firmware Linux boot

272
00:14:14,820 --> 00:14:24,250
our time is around 170 seconds and this

273
00:14:21,490 --> 00:14:26,949
time is comparable to virtual

274
00:14:24,250 --> 00:14:30,550
machine-based card and this is because

275
00:14:26,949 --> 00:14:39,399
the short time that Linux would have has

276
00:14:30,550 --> 00:14:42,609
for the post for the same reason

277
00:14:39,399 --> 00:14:47,709
actually we for land like network

278
00:14:42,610 --> 00:14:50,860
mounted disk we used we developed Linux

279
00:14:47,709 --> 00:14:54,219
boot to have better and security but it

280
00:14:50,860 --> 00:14:56,079
resulted in a better performance because

281
00:14:54,220 --> 00:15:00,100
of the short time that it has in the

282
00:14:56,079 --> 00:15:03,939
post time for the users who are not

283
00:15:00,100 --> 00:15:10,060
trusting other tenants our time is

284
00:15:03,940 --> 00:15:12,579
faster than a UF eyes all cases and in

285
00:15:10,060 --> 00:15:14,349
one of the reasons is the post time and

286
00:15:12,579 --> 00:15:16,899
the other reason is that we have reduced

287
00:15:14,350 --> 00:15:21,819
the number of steps to assistant knows

288
00:15:16,899 --> 00:15:23,980
required data sent out our again for the

289
00:15:21,819 --> 00:15:29,649
users who are not trusting the provider

290
00:15:23,980 --> 00:15:32,649
and bit locks and IPSec in the place our

291
00:15:29,649 --> 00:15:36,089
performance again more than two times

292
00:15:32,649 --> 00:15:36,089
faster than for man

293
00:15:36,620 --> 00:15:54,770
these results show that okay to show the

294
00:15:52,430 --> 00:15:56,900
overhead for applications when the

295
00:15:54,770 --> 00:16:00,850
tenant doesn't trust the provider and

296
00:15:56,900 --> 00:16:04,420
needs to use Network and disk encryption

297
00:16:00,850 --> 00:16:07,940
we have run several micro benchmarks

298
00:16:04,420 --> 00:16:11,089
first we run applications from NASA

299
00:16:07,940 --> 00:16:14,960
parallel benchmark for compute intensive

300
00:16:11,090 --> 00:16:19,010
applications like embarrassingly

301
00:16:14,960 --> 00:16:21,040
parallel the overt is small but for

302
00:16:19,010 --> 00:16:25,910
Network intensive applications such as

303
00:16:21,040 --> 00:16:27,849
MPI conjugate gradient the overhead is

304
00:16:25,910 --> 00:16:30,560
as high as two hundred and ten percent

305
00:16:27,850 --> 00:16:33,530
this result suggests that there are

306
00:16:30,560 --> 00:16:35,449
definitely workloads for which not

307
00:16:33,530 --> 00:16:39,040
trusting the provider doesn't incur a

308
00:16:35,450 --> 00:16:42,250
very huge overhead on the other hand

309
00:16:39,040 --> 00:16:47,709
deploying and using one-size-fits-all

310
00:16:42,250 --> 00:16:50,540
solution is inappropriate only tenants

311
00:16:47,710 --> 00:16:54,430
who are willing to trust a provider are

312
00:16:50,540 --> 00:16:58,670
likely to use and to run network and i/o

313
00:16:54,430 --> 00:17:03,410
intensive applications in the cloud our

314
00:16:58,670 --> 00:17:06,230
next experiment is a typical cloud

315
00:17:03,410 --> 00:17:08,750
application running to resort on SPARC

316
00:17:06,230 --> 00:17:11,630
framework we see around 30 percent

317
00:17:08,750 --> 00:17:15,560
overhead and even though it is a

318
00:17:11,630 --> 00:17:18,740
significant overhead we are Excel

319
00:17:15,560 --> 00:17:21,050
we are expecting that secure sensitive

320
00:17:18,740 --> 00:17:25,030
tenants are willing to incur this level

321
00:17:21,050 --> 00:17:27,919
of overhead these results show that

322
00:17:25,030 --> 00:17:30,080
based on the tenant their requirement

323
00:17:27,920 --> 00:17:33,790
and their applications overhead can a

324
00:17:30,080 --> 00:17:36,439
security overhead can be different and

325
00:17:33,790 --> 00:17:39,920
this should be the tenant who chooses

326
00:17:36,440 --> 00:17:43,820
the trade-off between cost performance

327
00:17:39,920 --> 00:17:46,510
and security you can check the paper for

328
00:17:43,820 --> 00:17:46,510
more results

329
00:17:47,150 --> 00:17:51,830
this work has moved beyond a

330
00:17:49,310 --> 00:17:55,970
proof-of-concept Jill I'm is that going

331
00:17:51,830 --> 00:17:59,389
upstream into Fedora and he's on the

332
00:17:55,970 --> 00:18:02,480
rail road map he Lambie mi are getting

333
00:17:59,390 --> 00:18:06,670
integrated to ironic and Linux would is

334
00:18:02,480 --> 00:18:06,670
getting adopted by Open Compute vendors

335
00:18:06,790 --> 00:18:12,409
we discuss ported architecture for bare

336
00:18:09,410 --> 00:18:15,290
metal cloud bolted has demonstrated that

337
00:18:12,410 --> 00:18:19,160
it is possible to measure all components

338
00:18:15,290 --> 00:18:20,960
needed to boot a server securely in it

339
00:18:19,160 --> 00:18:24,140
consists of a small micro benchmarks

340
00:18:20,960 --> 00:18:27,410
which enables tenants to minimize stress

341
00:18:24,140 --> 00:18:28,970
in the provider in addition provider

342
00:18:27,410 --> 00:18:32,750
doesn't need to deploy a

343
00:18:28,970 --> 00:18:35,240
one-size-fits-all solution in that way

344
00:18:32,750 --> 00:18:38,600
secure sensitive tenants can deploy your

345
00:18:35,240 --> 00:18:42,820
own micro services and fulfill their

346
00:18:38,600 --> 00:18:45,290
security requirements and be sure that

347
00:18:42,820 --> 00:18:46,760
security can have different overheads

348
00:18:45,290 --> 00:18:48,500
based on the tenants and their

349
00:18:46,760 --> 00:18:51,020
requirements and their applications and

350
00:18:48,500 --> 00:18:54,320
it should be the tenant who chooses the

351
00:18:51,020 --> 00:18:56,810
trade-off between cost performance and

352
00:18:54,320 --> 00:19:04,030
security thank you

353
00:18:56,810 --> 00:19:04,030
[Applause]

354
00:19:10,429 --> 00:19:15,119
you're at a station service uses a

355
00:19:12,960 --> 00:19:19,169
whitelist based approach did I get that

356
00:19:15,119 --> 00:19:21,238
right yes so I mean whitelist based

357
00:19:19,169 --> 00:19:24,570
approaches are difficult to scale up and

358
00:19:21,239 --> 00:19:26,489
difficult to maintain can you comment on

359
00:19:24,570 --> 00:19:28,980
why you wouldn't use some other

360
00:19:26,489 --> 00:19:33,179
approaches like static analysis of the

361
00:19:28,980 --> 00:19:35,909
firmware to a test it we have several

362
00:19:33,179 --> 00:19:38,850
reasons one of the reasons is that we

363
00:19:35,909 --> 00:19:42,359
are using this at extension service for

364
00:19:38,850 --> 00:19:44,039
we are didn't describe describe it here

365
00:19:42,359 --> 00:19:45,330
but we are example it's we are using it

366
00:19:44,039 --> 00:19:48,059
for continuous attestation

367
00:19:45,330 --> 00:19:49,918
for runtime so user can have this

368
00:19:48,059 --> 00:19:53,460
voiceless and update the status for his

369
00:19:49,919 --> 00:19:56,009
applications so attestation service can

370
00:19:53,460 --> 00:19:59,549
check the applications that are running

371
00:19:56,009 --> 00:20:01,320
in the users operating system to be sure

372
00:19:59,549 --> 00:20:04,080
that it's not compromised even in that

373
00:20:01,320 --> 00:20:10,769
case so we wanted to have some something

374
00:20:04,080 --> 00:20:13,529
dynamic to support these features hi I'm

375
00:20:10,769 --> 00:20:15,960
Chris will University of Rochester so if

376
00:20:13,529 --> 00:20:19,019
I understand correctly the hardware

377
00:20:15,960 --> 00:20:21,600
isolation layer is a mechanism provided

378
00:20:19,019 --> 00:20:24,149
by the cloud provider to ensure that the

379
00:20:21,600 --> 00:20:27,840
bare metal machine cannot be accessed by

380
00:20:24,149 --> 00:20:29,488
any other network host while it is being

381
00:20:27,840 --> 00:20:33,209
provisioned if that is the case my

382
00:20:29,489 --> 00:20:35,190
understanding is correct then how can

383
00:20:33,210 --> 00:20:36,720
you ensure how can the client ensure

384
00:20:35,190 --> 00:20:39,179
that the hardware isolation layer is

385
00:20:36,720 --> 00:20:40,590
actually doing that right because it the

386
00:20:39,179 --> 00:20:47,549
client doesn't really want to trust the

387
00:20:40,590 --> 00:20:51,059
provider in any way so your question is

388
00:20:47,549 --> 00:20:52,619
that we need to be sure that isolation

389
00:20:51,059 --> 00:20:53,309
service is working correctly right

390
00:20:52,619 --> 00:20:58,199
correct

391
00:20:53,309 --> 00:21:00,389
okay hardware isolation there is in our

392
00:20:58,200 --> 00:21:02,999
to trust computing place we need to

393
00:21:00,389 --> 00:21:04,649
trust that we have tried as I said we

394
00:21:02,999 --> 00:21:08,580
have tried it to make it a small

395
00:21:04,649 --> 00:21:10,768
cheetah's on lines of code but we need

396
00:21:08,580 --> 00:21:11,879
to trust at some that minimum trust in

397
00:21:10,769 --> 00:21:14,159
the provider we are not eliminating

398
00:21:11,879 --> 00:21:16,659
completely to trust in the provider it

399
00:21:14,159 --> 00:21:20,940
is minimized trust okay

400
00:21:16,660 --> 00:21:24,370
Thank You judges hi Texas A&M University

401
00:21:20,940 --> 00:21:26,770
don't ask like so a lot of our features

402
00:21:24,370 --> 00:21:29,050
need like om or like off the shelves

403
00:21:26,770 --> 00:21:31,090
from where to use it so I just wondering

404
00:21:29,050 --> 00:21:32,830
since you're using open source firmware

405
00:21:31,090 --> 00:21:34,510
wouldn't that affect the usability of

406
00:21:32,830 --> 00:21:38,379
the system like can I use this our

407
00:21:34,510 --> 00:21:41,350
feature anymore so you're asking about

408
00:21:38,380 --> 00:21:43,930
the firmware it is it is being used in

409
00:21:41,350 --> 00:21:46,480
other systems or not that's okay

410
00:21:43,930 --> 00:21:50,380
Linux boots right now is use in Open

411
00:21:46,480 --> 00:21:53,530
Compute Project which is funded by

412
00:21:50,380 --> 00:21:58,750
Google and Facebook for example it is

413
00:21:53,530 --> 00:22:03,550
used in open what was the name

414
00:21:58,750 --> 00:22:06,460
Leo port servers and I think it is using

415
00:22:03,550 --> 00:22:10,270
Chrome servers to Chrome books machines

416
00:22:06,460 --> 00:22:15,370
to but yes it is very difficult to make

417
00:22:10,270 --> 00:22:19,440
vendors to use Linux ports so that's one

418
00:22:15,370 --> 00:22:19,439
of the challenges we have be true yes

419
00:22:21,000 --> 00:22:30,520
exactly yes yes yes we as I showed that

420
00:22:25,720 --> 00:22:32,290
we can use ufi as the pace murmur run it

421
00:22:30,520 --> 00:22:34,570
for a minimum time of time minimum

422
00:22:32,290 --> 00:22:39,370
amount of time and downloading experts

423
00:22:34,570 --> 00:22:42,159
run time on it actually let me I can't

424
00:22:39,370 --> 00:22:44,139
show you it maybe that's okay so I guess

425
00:22:42,160 --> 00:22:46,780
part of my question is like is your

426
00:22:44,140 --> 00:22:49,900
Howard feature like for the CPU feature

427
00:22:46,780 --> 00:22:51,270
that you cannot support to do these open

428
00:22:49,900 --> 00:22:54,040
source all

429
00:22:51,270 --> 00:22:56,220
actually sorry I'm so is there any like

430
00:22:54,040 --> 00:23:00,580
CPU features that you cannot support

431
00:22:56,220 --> 00:23:03,490
okay when we are compiling Linux boot

432
00:23:00,580 --> 00:23:08,350
we are not compiling it from the scratch

433
00:23:03,490 --> 00:23:11,320
we are downloading the bias or ufi out

434
00:23:08,350 --> 00:23:16,409
of the flash rom that the figure I

435
00:23:11,320 --> 00:23:20,139
showed here here we first download the

436
00:23:16,410 --> 00:23:21,850
firmware out of the machine extract some

437
00:23:20,140 --> 00:23:24,640
part of it which is specific to the

438
00:23:21,850 --> 00:23:25,840
processor and embed it into the Linux

439
00:23:24,640 --> 00:23:28,660
boots

440
00:23:25,840 --> 00:23:29,580
final image so for example Dixie is in

441
00:23:28,660 --> 00:23:34,110
that

442
00:23:29,580 --> 00:23:38,939
we have extracted out of it let's

443
00:23:34,110 --> 00:23:42,449
continue the next second question Edwina

444
00:23:38,940 --> 00:23:45,419
EPFL so servers typically have this very

445
00:23:42,450 --> 00:23:48,210
pesky annoying feature but necessary in

446
00:23:45,419 --> 00:23:49,830
many cases called the BMC which is a

447
00:23:48,210 --> 00:23:51,750
little computer next to the computer

448
00:23:49,830 --> 00:23:53,189
that basically allows you to connect it

449
00:23:51,750 --> 00:23:55,289
out of band and it's used for a number

450
00:23:53,190 --> 00:23:58,230
of operations and so I guess my question

451
00:23:55,289 --> 00:24:00,030
is do you assume that you have a BMC and

452
00:23:58,230 --> 00:24:02,929
you somehow secure access to it or do

453
00:24:00,030 --> 00:24:05,399
you assume that you do not need a beams

454
00:24:02,929 --> 00:24:08,970
actually that's one of our crates

455
00:24:05,400 --> 00:24:10,409
challenges right now not only BMC what

456
00:24:08,970 --> 00:24:13,919
about immu

457
00:24:10,409 --> 00:24:17,909
what about management engine what about

458
00:24:13,919 --> 00:24:21,780
power that's open question for us we

459
00:24:17,909 --> 00:24:24,890
need to consider that I mean nice

460
00:24:21,780 --> 00:24:29,460
thought so how large is firmware

461
00:24:24,890 --> 00:24:33,150
dismembered I mean in general how many

462
00:24:29,460 --> 00:24:35,460
lines of code is very strip down Linux

463
00:24:33,150 --> 00:24:39,840
boot the whole image the final image

464
00:24:35,460 --> 00:24:42,870
itself is compiled one is around 32 cake

465
00:24:39,840 --> 00:24:45,689
but using because we are exacting some

466
00:24:42,870 --> 00:24:48,899
part of the image out of this the final

467
00:24:45,690 --> 00:24:52,350
image is for servers is 16 megabytes for

468
00:24:48,900 --> 00:24:56,039
laptops that we use it was four megabyte

469
00:24:52,350 --> 00:24:59,820
I as I remember I don't know if I what's

470
00:24:56,039 --> 00:25:04,590
typically firmware size I was asking not

471
00:24:59,820 --> 00:25:08,370
your image size IC for this one when we

472
00:25:04,590 --> 00:25:11,580
downloaded the original image it was 16

473
00:25:08,370 --> 00:25:15,270
megabytes so we had to Pat the whole

474
00:25:11,580 --> 00:25:18,899
image to make the same size so for

475
00:25:15,270 --> 00:25:21,210
example in boot card wouldn't complain

476
00:25:18,900 --> 00:25:23,460
about the differences I think what I'm

477
00:25:21,210 --> 00:25:26,760
trying to get is that like trusting

478
00:25:23,460 --> 00:25:29,940
3,000 lines of code which is the high 8

479
00:25:26,760 --> 00:25:32,640
il plus key line plus you had another

480
00:25:29,940 --> 00:25:35,669
travel of things there might be actually

481
00:25:32,640 --> 00:25:38,750
a bigger trust in computing base than

482
00:25:35,669 --> 00:25:41,430
the firmware itself that you don't trust

483
00:25:38,750 --> 00:25:43,980
key lime and maybe

484
00:25:41,430 --> 00:25:46,470
no chill I'm and PM are not part of

485
00:25:43,980 --> 00:25:49,170
trusted computing base they are deployed

486
00:25:46,470 --> 00:25:51,450
by to provide the tenant its himself

487
00:25:49,170 --> 00:25:53,160
right so they are not part of the trust

488
00:25:51,450 --> 00:25:55,740
in computing with their our trusted

489
00:25:53,160 --> 00:25:57,990
computing has for a base for our case is

490
00:25:55,740 --> 00:26:05,400
he'll which is two thousand lines of

491
00:25:57,990 --> 00:26:08,730
code Linux put the firmware and I think

492
00:26:05,400 --> 00:26:10,650
these are the main parts of the so I

493
00:26:08,730 --> 00:26:12,360
don't see why the argument that trusting

494
00:26:10,650 --> 00:26:19,530
this is actually better than trusting

495
00:26:12,360 --> 00:26:22,379
the firmware in the provider itself well

496
00:26:19,530 --> 00:26:25,889
yeah I understand but you also trust the

497
00:26:22,380 --> 00:26:28,620
hack that it is so why not wide the

498
00:26:25,890 --> 00:26:31,190
other rather than the other let's you

499
00:26:28,620 --> 00:26:31,189
want to speak

500
00:26:40,630 --> 00:26:50,970
okay hey let think i'ma speak again

501
00:26:45,740 --> 00:26:50,970
[Applause]

