1
00:00:10,300 --> 00:00:15,280
hi everyone I am Mohammed from

2
00:00:12,100 --> 00:00:17,689
Northeastern University today I will

3
00:00:15,280 --> 00:00:19,710
talk about

4
00:00:17,689 --> 00:00:22,380
translation layers for interlaced

5
00:00:19,710 --> 00:00:24,810
magnetic recording this is a joint work

6
00:00:22,380 --> 00:00:29,038
between Northeastern University and

7
00:00:24,810 --> 00:00:30,840
Seagate Technology so in my presentation

8
00:00:29,039 --> 00:00:33,800
I'll first talk about interlaced

9
00:00:30,840 --> 00:00:36,720
magnetic recording the pros and cons so

10
00:00:33,800 --> 00:00:39,300
just for the record because I call it

11
00:00:36,720 --> 00:00:41,909
IMR throughout my presentation to make

12
00:00:39,300 --> 00:00:44,309
it easier for myself then I will talk

13
00:00:41,909 --> 00:00:48,180
about why we need a translation layer on

14
00:00:44,309 --> 00:00:50,669
top of EMR and then I'll talk about our

15
00:00:48,180 --> 00:00:53,549
translation layers that we proposed and

16
00:00:50,670 --> 00:00:56,549
then at the end we'll see how well they

17
00:00:53,549 --> 00:00:59,670
can perform so before I get to the main

18
00:00:56,549 --> 00:01:03,900
slides I would love to have a brief

19
00:00:59,670 --> 00:01:06,330
overview of the hard drives so a single

20
00:01:03,900 --> 00:01:08,280
hard drive is composed of several

21
00:01:06,330 --> 00:01:12,380
platters that you can see one in the

22
00:01:08,280 --> 00:01:14,909
figure each platter is composed of

23
00:01:12,380 --> 00:01:17,820
actually it contains a huge number of

24
00:01:14,909 --> 00:01:21,120
tracks each track is about one to two

25
00:01:17,820 --> 00:01:24,949
megabyte and for example a 20 terabyte

26
00:01:21,120 --> 00:01:28,590
device can contain about 13 million

27
00:01:24,950 --> 00:01:32,700
tracks so depending on the speed of the

28
00:01:28,590 --> 00:01:34,770
disk it takes about 8 10 milliseconds to

29
00:01:32,700 --> 00:01:36,420
rotate so we need this information to

30
00:01:34,770 --> 00:01:40,050
understand when we when I'm talking

31
00:01:36,420 --> 00:01:42,930
about the performance issues so what is

32
00:01:40,050 --> 00:01:44,520
interlaced magnetic recording or IMR

33
00:01:42,930 --> 00:01:48,090
to answer this question I'll do some

34
00:01:44,520 --> 00:01:50,520
comparisons between the technologies for

35
00:01:48,090 --> 00:01:52,920
magnetic recording let's start with the

36
00:01:50,520 --> 00:01:56,220
basic one it's conventional magnetic

37
00:01:52,920 --> 00:01:57,360
recording or people call it CMR so as

38
00:01:56,220 --> 00:01:59,429
you can see in the figure in this

39
00:01:57,360 --> 00:02:02,549
technology tracks are located beside

40
00:01:59,430 --> 00:02:06,150
each other a newer technology was

41
00:02:02,549 --> 00:02:09,509
shingle drives or SMR that showed up

42
00:02:06,150 --> 00:02:12,720
around six seven years ago so the idea

43
00:02:09,508 --> 00:02:15,029
is to overlap tracks to offer higher

44
00:02:12,720 --> 00:02:18,269
capacity so they could increase the

45
00:02:15,030 --> 00:02:20,370
capacity by 25 percent however it

46
00:02:18,269 --> 00:02:23,010
suffers from a serious limitation and

47
00:02:20,370 --> 00:02:27,090
the limitation is that no random ride is

48
00:02:23,010 --> 00:02:28,769
allowed on all the tracks so because of

49
00:02:27,090 --> 00:02:29,880
this limitation the performance is going

50
00:02:28,770 --> 00:02:32,970
to be

51
00:02:29,880 --> 00:02:35,049
lower than the conventional drive

52
00:02:32,970 --> 00:02:37,920
interlaced magnetic recording which is

53
00:02:35,050 --> 00:02:40,360
the focus of this tart is a

54
00:02:37,920 --> 00:02:43,510
state-of-the-art technology it's still

55
00:02:40,360 --> 00:02:45,880
on the experimental phase so again it

56
00:02:43,510 --> 00:02:48,609
shares the same idea with SM RB jingle

57
00:02:45,880 --> 00:02:50,019
drives they track the overlap tracks but

58
00:02:48,610 --> 00:02:52,390
in a different way in a different

59
00:02:50,020 --> 00:02:55,230
fashion as you can see in the figure so

60
00:02:52,390 --> 00:02:57,459
they offer a higher capacity about 40%

61
00:02:55,230 --> 00:03:00,549
increasing capacity compared to a

62
00:02:57,460 --> 00:03:03,850
conventional drive and the cool and

63
00:03:00,550 --> 00:03:06,190
interesting thing about IMR is that they

64
00:03:03,850 --> 00:03:08,410
lift some of the constraint that SMR has

65
00:03:06,190 --> 00:03:12,390
to deal with so here we are talking

66
00:03:08,410 --> 00:03:14,620
about half of the tracks overlap so

67
00:03:12,390 --> 00:03:17,649
definitely the performance should be

68
00:03:14,620 --> 00:03:20,050
better than a single Drive but the main

69
00:03:17,650 --> 00:03:22,060
question is how close we can get to a

70
00:03:20,050 --> 00:03:25,950
conventional Drive in terms of

71
00:03:22,060 --> 00:03:28,480
performance so let's get back to the AMR

72
00:03:25,950 --> 00:03:30,299
technology so you can see a figure on

73
00:03:28,480 --> 00:03:32,470
the right that there are three tracks

74
00:03:30,300 --> 00:03:36,010
located in the background and there are

75
00:03:32,470 --> 00:03:38,350
two top tracks interlaced in between so

76
00:03:36,010 --> 00:03:41,440
that's why I have a track overlap and

77
00:03:38,350 --> 00:03:44,350
the other half doesn't so one fact about

78
00:03:41,440 --> 00:03:46,780
AMR is that top tracks are smaller in

79
00:03:44,350 --> 00:03:50,260
size than the bottom tracks so meaning

80
00:03:46,780 --> 00:03:52,930
that they contain less amount of data so

81
00:03:50,260 --> 00:03:54,730
I was talking about overlapping and half

82
00:03:52,930 --> 00:03:56,350
of the tracks are rewritable and the

83
00:03:54,730 --> 00:03:57,850
other half are not so for half of the

84
00:03:56,350 --> 00:04:00,160
tracks which are writable we got no

85
00:03:57,850 --> 00:04:02,350
problem for the other half we need to

86
00:04:00,160 --> 00:04:04,510
come up with a solution some sort of

87
00:04:02,350 --> 00:04:07,239
operation like read-modify-write could

88
00:04:04,510 --> 00:04:10,090
help or a translation layer can help to

89
00:04:07,240 --> 00:04:12,250
address the problem for those who are

90
00:04:10,090 --> 00:04:15,780
not familiar with translation layer it's

91
00:04:12,250 --> 00:04:18,190
a layer that provides a rewritable block

92
00:04:15,780 --> 00:04:20,500
interface on top of the drive and the

93
00:04:18,190 --> 00:04:24,250
device so it can be implemented on the

94
00:04:20,500 --> 00:04:26,380
host side or on the device side like the

95
00:04:24,250 --> 00:04:28,270
SMR that we have host manage drive or

96
00:04:26,380 --> 00:04:32,710
drive manage drive the focus of this

97
00:04:28,270 --> 00:04:37,000
work in is on translation layers sitting

98
00:04:32,710 --> 00:04:38,320
on the device side so the constraint and

99
00:04:37,000 --> 00:04:41,890
the limitation that I was talking about

100
00:04:38,320 --> 00:04:43,360
let's see what happens you've got a

101
00:04:41,890 --> 00:04:44,800
figure here on the left

102
00:04:43,360 --> 00:04:47,439
and let's say that I would like to do a

103
00:04:44,800 --> 00:04:49,689
top track update so as you can see by

104
00:04:47,439 --> 00:04:51,819
updating the top tracks here I'm going

105
00:04:49,689 --> 00:04:54,370
to rewrite on the bottom track which is

106
00:04:51,819 --> 00:04:56,800
in the middle however you can see

107
00:04:54,370 --> 00:04:59,889
because in IMR the read head is smaller

108
00:04:56,800 --> 00:05:01,840
than the right head I'm still able to

109
00:04:59,889 --> 00:05:03,849
read the middle section of the bottom

110
00:05:01,840 --> 00:05:06,669
track so there is no problem with this

111
00:05:03,849 --> 00:05:10,659
as I said before unfortunately this is

112
00:05:06,669 --> 00:05:12,188
not the case for bottom track update so

113
00:05:10,659 --> 00:05:14,169
you can see figure you can see in this

114
00:05:12,189 --> 00:05:16,180
figure on the right that as soon as I

115
00:05:14,169 --> 00:05:18,060
update the bottom track the two

116
00:05:16,180 --> 00:05:21,159
neighboring top tracks are gonna be

117
00:05:18,060 --> 00:05:23,289
overwritten and again unfortunately

118
00:05:21,159 --> 00:05:24,969
because the read head this time is not

119
00:05:23,289 --> 00:05:27,128
that is small enough I'm not able to

120
00:05:24,969 --> 00:05:31,539
read the entire section of the middle

121
00:05:27,129 --> 00:05:33,669
track so data is corrupted and lost to

122
00:05:31,539 --> 00:05:37,120
address this problem the original paper

123
00:05:33,669 --> 00:05:37,628
of IMR proposes read-modify-write very

124
00:05:37,120 --> 00:05:40,689
vaguely

125
00:05:37,629 --> 00:05:43,629
so here I'm showing how it works so

126
00:05:40,689 --> 00:05:45,669
let's say that I'm gonna update sector s

127
00:05:43,629 --> 00:05:48,759
on the bottom track which is in the

128
00:05:45,669 --> 00:05:50,710
middle so what happens is that we have

129
00:05:48,759 --> 00:05:53,680
to take these steps first we have to

130
00:05:50,710 --> 00:05:56,080
read the two neighboring sectors on the

131
00:05:53,680 --> 00:05:58,419
two neighboring top tracks then we're

132
00:05:56,080 --> 00:06:00,430
going to update sector on the bottom

133
00:05:58,419 --> 00:06:02,049
track data is corrupted but there is no

134
00:06:00,430 --> 00:06:05,379
problem we have copied somewhere else

135
00:06:02,050 --> 00:06:07,479
and you can see the copies are are in

136
00:06:05,379 --> 00:06:09,639
the memory and on each persistent place

137
00:06:07,479 --> 00:06:12,310
just to address the crash consistency

138
00:06:09,639 --> 00:06:16,389
and then the third step is to write back

139
00:06:12,310 --> 00:06:18,639
the red sectors so bingo we got not no

140
00:06:16,389 --> 00:06:21,639
problem it's random right here but there

141
00:06:18,639 --> 00:06:24,159
is another issue for a single update I

142
00:06:21,639 --> 00:06:27,520
have to do two additional reads and

143
00:06:24,159 --> 00:06:29,560
three additional writes this I am

144
00:06:27,520 --> 00:06:32,770
purification translates to a poor

145
00:06:29,560 --> 00:06:35,370
performance as all these steps there

146
00:06:32,770 --> 00:06:39,039
have to be has to be done synchronously

147
00:06:35,370 --> 00:06:40,810
so in terms of latency each round each

148
00:06:39,039 --> 00:06:44,050
read modify write is gonna cost about a

149
00:06:40,810 --> 00:06:47,319
seek and four to five rotations

150
00:06:44,050 --> 00:06:50,229
depending on the i/o size so to see how

151
00:06:47,319 --> 00:06:52,300
bad it is we can compare it with a with

152
00:06:50,229 --> 00:06:54,758
a with an update in in a conventional

153
00:06:52,300 --> 00:06:56,480
drive that only needs a seek plus half a

154
00:06:54,759 --> 00:07:00,090
rotation

155
00:06:56,480 --> 00:07:03,360
so we thought okay how can we resolve

156
00:07:00,090 --> 00:07:07,020
this problem our strategy is to move the

157
00:07:03,360 --> 00:07:09,090
data the hot data from the bottom track

158
00:07:07,020 --> 00:07:10,409
and put them on top because on top

159
00:07:09,090 --> 00:07:12,690
tracks we don't have any problem for

160
00:07:10,410 --> 00:07:14,520
random writes then the question is at

161
00:07:12,690 --> 00:07:17,280
what Karen Larry we want to do this do

162
00:07:14,520 --> 00:07:20,130
we want to do it per sector definitely

163
00:07:17,280 --> 00:07:23,039
not because it's gonna use a lot of

164
00:07:20,130 --> 00:07:25,680
memory to keep that sector map and

165
00:07:23,040 --> 00:07:27,510
second of all we are going to make data

166
00:07:25,680 --> 00:07:29,220
fragmented then we are going to deal

167
00:07:27,510 --> 00:07:31,409
with a lot of seats and then the full

168
00:07:29,220 --> 00:07:34,740
performance at the end of the day so

169
00:07:31,410 --> 00:07:39,900
what about doing it at a track level

170
00:07:34,740 --> 00:07:41,940
maybe so our analysis and the and the

171
00:07:39,900 --> 00:07:43,289
workloads that we have on the block

172
00:07:41,940 --> 00:07:45,719
traces actually these are the traces

173
00:07:43,290 --> 00:07:47,820
block traces that we have I'll talk

174
00:07:45,720 --> 00:07:50,340
about them in the evaluation section our

175
00:07:47,820 --> 00:07:53,280
analysis supports this idea so here in

176
00:07:50,340 --> 00:07:56,280
this figure you see the CDF of the write

177
00:07:53,280 --> 00:07:58,590
accesses to the tracks for the four

178
00:07:56,280 --> 00:08:02,250
different workloads as you can see the

179
00:07:58,590 --> 00:08:04,830
majority of writes go to the small

180
00:08:02,250 --> 00:08:07,260
number of tracks here for example the

181
00:08:04,830 --> 00:08:11,099
first hundred hot tracks for the

182
00:08:07,260 --> 00:08:13,730
workload W 106 you can see 80% of the

183
00:08:11,100 --> 00:08:17,040
writes are going to that track so

184
00:08:13,730 --> 00:08:19,230
motivated by that we propose three

185
00:08:17,040 --> 00:08:21,930
translation layers which we call track

186
00:08:19,230 --> 00:08:24,120
slippin track caching and dynamic track

187
00:08:21,930 --> 00:08:29,490
mapping these algorithms should run

188
00:08:24,120 --> 00:08:31,620
periodically every maybe every 20k right

189
00:08:29,490 --> 00:08:34,860
there the 30k price which is going to be

190
00:08:31,620 --> 00:08:37,260
about a few minutes in order to make the

191
00:08:34,860 --> 00:08:39,740
overhead of these algorithm limited we

192
00:08:37,260 --> 00:08:43,169
are going to run these algorithms for a

193
00:08:39,740 --> 00:08:45,360
limited amount of tracks so we can

194
00:08:43,169 --> 00:08:47,520
minimize the overhead but keep in mind

195
00:08:45,360 --> 00:08:49,740
that we still need to do read modify

196
00:08:47,520 --> 00:08:53,760
write because we still have data on

197
00:08:49,740 --> 00:08:55,500
bottom tracks although they are cold so

198
00:08:53,760 --> 00:08:57,060
let's get back to the ideas that I was

199
00:08:55,500 --> 00:09:00,090
talking about the first one was track

200
00:08:57,060 --> 00:09:03,030
sleeping the the main idea is to swap

201
00:09:00,090 --> 00:09:04,800
the hot bottom tracks with neighboring

202
00:09:03,030 --> 00:09:07,439
cold top tracks so you can see a figure

203
00:09:04,800 --> 00:09:09,750
at track layout of an IMR on the right

204
00:09:07,440 --> 00:09:12,720
I'm showing the temperature using call

205
00:09:09,750 --> 00:09:14,280
here so as you can see track 1 and 5 are

206
00:09:12,720 --> 00:09:17,700
super hot and there are good can

207
00:09:14,280 --> 00:09:19,920
candidates to be swap with track 2 and 4

208
00:09:17,700 --> 00:09:22,710
in the figure after doing this you can

209
00:09:19,920 --> 00:09:24,750
see I'm gonna have a new layout with hot

210
00:09:22,710 --> 00:09:28,320
tracks on top and cold tracks in the

211
00:09:24,750 --> 00:09:30,660
bottom so I'm gonna show that this

212
00:09:28,320 --> 00:09:33,150
algorithm is working however it suffers

213
00:09:30,660 --> 00:09:34,920
from a couple of limitations and

214
00:09:33,150 --> 00:09:36,590
challenges the first challenge is that

215
00:09:34,920 --> 00:09:39,689
if you remember I was talking about

216
00:09:36,590 --> 00:09:41,250
track size mismatch bottom tracks are

217
00:09:39,690 --> 00:09:43,080
smaller than the top track

218
00:09:41,250 --> 00:09:45,450
so I cannot copy the entire content of a

219
00:09:43,080 --> 00:09:46,860
bottom track to a top track a simple

220
00:09:45,450 --> 00:09:50,490
solution for that would be to either

221
00:09:46,860 --> 00:09:52,350
copy the low LBAs or high LVS between

222
00:09:50,490 --> 00:09:54,540
one track whichever is hotter we're

223
00:09:52,350 --> 00:09:56,580
going to copy that part but the second

224
00:09:54,540 --> 00:09:58,560
problem is that what if I've got two

225
00:09:56,580 --> 00:10:01,890
neighboring top tracks which are already

226
00:09:58,560 --> 00:10:04,680
there already hot as well so there is no

227
00:10:01,890 --> 00:10:09,600
improvement by flipping them or swapping

228
00:10:04,680 --> 00:10:12,239
them with the neighboring tracks cost of

229
00:10:09,600 --> 00:10:13,800
doing a single attract flipping is going

230
00:10:12,240 --> 00:10:15,900
to be around three six plus eight

231
00:10:13,800 --> 00:10:18,270
rotations but keep in mind that we are

232
00:10:15,900 --> 00:10:21,709
doing this periodically and you're doing

233
00:10:18,270 --> 00:10:21,710
this for a limited number of tracks

234
00:10:21,830 --> 00:10:26,070
since we are going to implement track

235
00:10:24,089 --> 00:10:28,230
flipping and the other two algorithms in

236
00:10:26,070 --> 00:10:32,100
the fair where we have to be careful

237
00:10:28,230 --> 00:10:34,230
about the memory usage so for track for

238
00:10:32,100 --> 00:10:37,890
track flipping we have to first take a

239
00:10:34,230 --> 00:10:40,970
keep track of the track accesses so we

240
00:10:37,890 --> 00:10:44,040
we offer just logging the written tracks

241
00:10:40,970 --> 00:10:46,740
within each period and since the periods

242
00:10:44,040 --> 00:10:48,750
are not that much long we are gonna have

243
00:10:46,740 --> 00:10:50,339
only we are gonna use only maybe a

244
00:10:48,750 --> 00:10:53,400
quarter of megabytes for this in our

245
00:10:50,339 --> 00:10:56,430
experiments the other memory usage is

246
00:10:53,400 --> 00:10:59,040
related to track map so each bottom

247
00:10:56,430 --> 00:10:59,760
track can have five states either it's

248
00:10:59,040 --> 00:11:02,040
unmov'd

249
00:10:59,760 --> 00:11:04,080
or it's Phillip if it is flipped it's

250
00:11:02,040 --> 00:11:06,060
either flip or swap with the right

251
00:11:04,080 --> 00:11:07,740
neighbor or the left neighbor so I'm

252
00:11:06,060 --> 00:11:10,109
gonna have five states at the end of the

253
00:11:07,740 --> 00:11:14,310
day which means that I need to have

254
00:11:10,110 --> 00:11:16,410
three beats per two tracks so if we do

255
00:11:14,310 --> 00:11:18,750
the calculation we will see that for a

256
00:11:16,410 --> 00:11:23,709
20 terabytes drive I'll need two and a

257
00:11:18,750 --> 00:11:26,170
half megabytes to store the track map

258
00:11:23,709 --> 00:11:29,260
the second approach is selected track

259
00:11:26,170 --> 00:11:32,079
caching this approach resolves the

260
00:11:29,260 --> 00:11:33,279
problem and limitations of the track

261
00:11:32,079 --> 00:11:35,920
Philippine that I was talking about

262
00:11:33,279 --> 00:11:40,089
track mismatch and neighboring hot

263
00:11:35,920 --> 00:11:41,920
tracks so the idea is to reserve a small

264
00:11:40,089 --> 00:11:44,649
number of tracks in our experiment

265
00:11:41,920 --> 00:11:46,389
hundred tracks we are going to reserve a

266
00:11:44,649 --> 00:11:47,470
small number of tracks in the disc and

267
00:11:46,389 --> 00:11:49,089
we are going to make sure that it's

268
00:11:47,470 --> 00:11:51,399
non-interlaced so there is no problem

269
00:11:49,089 --> 00:11:53,139
with random writing those in that area

270
00:11:51,399 --> 00:11:55,899
and you're going to catch super hot

271
00:11:53,139 --> 00:11:57,850
tracks in there so let's see that with

272
00:11:55,899 --> 00:12:00,550
an example here you can see that track

273
00:11:57,850 --> 00:12:02,320
three and seven is going to be inserted

274
00:12:00,550 --> 00:12:04,089
to the cache and track one because it's

275
00:12:02,320 --> 00:12:08,980
right now cold it's going to be evicted

276
00:12:04,089 --> 00:12:11,440
from the cache so the cost of this

277
00:12:08,980 --> 00:12:13,329
algorithm is going to be I mean an

278
00:12:11,440 --> 00:12:18,370
eviction plus an insertion it's going to

279
00:12:13,329 --> 00:12:20,979
cost about six six plus ten rotations in

280
00:12:18,370 --> 00:12:22,570
terms of memory requirement we're gonna

281
00:12:20,980 --> 00:12:24,779
do the same thing that we did for track

282
00:12:22,570 --> 00:12:28,750
flipping so a quarter of megabytes for

283
00:12:24,779 --> 00:12:32,160
keeping track of hot tracks however for

284
00:12:28,750 --> 00:12:35,860
the cache map if we can implement it

285
00:12:32,160 --> 00:12:37,630
like a leukocyte buffer the size of the

286
00:12:35,860 --> 00:12:40,269
cache is going to be proportional to the

287
00:12:37,630 --> 00:12:43,720
number of tracks in the cache so in our

288
00:12:40,269 --> 00:12:48,040
case which we only had 100 tracks in the

289
00:12:43,720 --> 00:12:50,500
cache it's super tiny the third

290
00:12:48,040 --> 00:12:51,969
algorithm is dynamic track mapping I'm

291
00:12:50,500 --> 00:12:53,459
not going to go to the details of this

292
00:12:51,970 --> 00:12:56,199
I'm just going to say this this is a

293
00:12:53,459 --> 00:12:57,638
more complex way of doing track slipping

294
00:12:56,199 --> 00:12:59,859
which is more relaxed but it's gonna

295
00:12:57,639 --> 00:13:01,480
consume more memory please take a look

296
00:12:59,860 --> 00:13:05,829
at the paper if you're interested in

297
00:13:01,480 --> 00:13:07,510
this one so in order to validate the

298
00:13:05,829 --> 00:13:10,779
three algorithms that I was talking

299
00:13:07,510 --> 00:13:14,410
about and also read-modify-write we ran

300
00:13:10,779 --> 00:13:16,630
some simulations so we replayed the

301
00:13:14,410 --> 00:13:18,880
traces that we have these are the traces

302
00:13:16,630 --> 00:13:21,399
from these are the block traces from

303
00:13:18,880 --> 00:13:23,740
cloud physics virtualized environments

304
00:13:21,399 --> 00:13:27,399
so these are the traces of VMs running

305
00:13:23,740 --> 00:13:29,440
Linux and windows so we also had a

306
00:13:27,399 --> 00:13:32,110
simplified model of the disk that you

307
00:13:29,440 --> 00:13:34,360
can see the parameters here for more

308
00:13:32,110 --> 00:13:35,600
details please take a look at the paper

309
00:13:34,360 --> 00:13:38,790
again

310
00:13:35,600 --> 00:13:42,240
so in our simulation trace inter arrival

311
00:13:38,790 --> 00:13:46,410
times of we're preserved in replay up to

312
00:13:42,240 --> 00:13:49,500
a maximum Q depth of 64 so to calculate

313
00:13:46,410 --> 00:13:52,709
the i/o latency we included that queuing

314
00:13:49,500 --> 00:13:57,750
time the seek time rotational delay and

315
00:13:52,710 --> 00:14:01,010
transfer time so here we see selected

316
00:13:57,750 --> 00:14:04,170
results for right amplification factor

317
00:14:01,010 --> 00:14:08,250
in comparison the conventional drive

318
00:14:04,170 --> 00:14:10,130
read-modify-write would be one so let's

319
00:14:08,250 --> 00:14:13,650
see

320
00:14:10,130 --> 00:14:15,439
as you can see read modify write imposes

321
00:14:13,650 --> 00:14:19,199
a lot of overhead we are dealing with a

322
00:14:15,440 --> 00:14:22,620
with a large read-modify-write maximum

323
00:14:19,200 --> 00:14:25,020
up to 2.5 you can see here however by

324
00:14:22,620 --> 00:14:27,510
using a large our algorithm track

325
00:14:25,020 --> 00:14:30,569
flipping track caching and dynamic track

326
00:14:27,510 --> 00:14:34,470
mapping you can see we could reduce that

327
00:14:30,570 --> 00:14:36,930
write amplification factor to 1.1 which

328
00:14:34,470 --> 00:14:41,610
is very close to a conventional drive or

329
00:14:36,930 --> 00:14:44,660
the case W 39 in the figure the other

330
00:14:41,610 --> 00:14:47,490
metric that we use was normalized

331
00:14:44,660 --> 00:14:48,240
was mean latency actually the result

332
00:14:47,490 --> 00:14:49,950
that I'm going to show they are

333
00:14:48,240 --> 00:14:53,100
normalized to a conventional drive

334
00:14:49,950 --> 00:14:55,620
latency so again read-modify-write here

335
00:14:53,100 --> 00:14:57,930
you can see more mixed result for some

336
00:14:55,620 --> 00:15:01,110
cases the the increase in latency was

337
00:14:57,930 --> 00:15:02,699
not that much bad but for many of the

338
00:15:01,110 --> 00:15:06,930
cases it's really bad for some of the

339
00:15:02,700 --> 00:15:09,920
cases like W 39 and W 56 you can see we

340
00:15:06,930 --> 00:15:15,060
are dealing with a horrible latency

341
00:15:09,920 --> 00:15:17,550
increase so our algorithm can help read

342
00:15:15,060 --> 00:15:19,739
modify sorry flipping caching and

343
00:15:17,550 --> 00:15:24,660
dynamic mapping they can help to reduce

344
00:15:19,740 --> 00:15:28,470
that increase in the latency so as you

345
00:15:24,660 --> 00:15:31,500
can see here for the case of W 56 which

346
00:15:28,470 --> 00:15:34,020
we had a very horrible latency we could

347
00:15:31,500 --> 00:15:38,630
reduce it and very make it very close to

348
00:15:34,020 --> 00:15:40,770
the latency of a conventional drive so

349
00:15:38,630 --> 00:15:42,720
in today's talk I talked about

350
00:15:40,770 --> 00:15:44,430
interlaced magnetic recording which is

351
00:15:42,720 --> 00:15:45,030
the state-of-the-art technology in hard

352
00:15:44,430 --> 00:15:46,589
drives

353
00:15:45,030 --> 00:15:48,110
I talked about the pros and cons the

354
00:15:46,590 --> 00:15:50,390
idea of overlapping try

355
00:15:48,110 --> 00:15:54,020
and the constraints that half of the

356
00:15:50,390 --> 00:15:55,610
tracks cannot be overwritten in place so

357
00:15:54,020 --> 00:15:57,710
I talked about with modify write at a

358
00:15:55,610 --> 00:16:00,620
classical solution to that and I showed

359
00:15:57,710 --> 00:16:03,290
that the performance can suck so we

360
00:16:00,620 --> 00:16:04,790
proposed three translation layers track

361
00:16:03,290 --> 00:16:07,130
sleeping track caching and dynamic

362
00:16:04,790 --> 00:16:09,530
mapping that takes advantages of the

363
00:16:07,130 --> 00:16:12,770
flexibility of IMR and can improve the

364
00:16:09,530 --> 00:16:25,150
performance significantly and thank you

365
00:16:12,770 --> 00:16:27,530
and I can have your questions Rick Ferro

366
00:16:25,150 --> 00:16:29,329
so when you're doing track flipping

367
00:16:27,530 --> 00:16:31,790
you're going from the bottom to the

368
00:16:29,330 --> 00:16:34,640
overlapping tracks you mentioned that

369
00:16:31,790 --> 00:16:37,040
the overlapping tracks have only 80 or

370
00:16:34,640 --> 00:16:39,290
90 percent of the capacity so you have a

371
00:16:37,040 --> 00:16:41,360
larger capacity track hearing or copying

372
00:16:39,290 --> 00:16:43,400
it to a smaller capacity track is that

373
00:16:41,360 --> 00:16:46,730
correct yes all right so what do you do

374
00:16:43,400 --> 00:16:49,640
with the extra data as I set up so what

375
00:16:46,730 --> 00:16:51,920
we do is we're gonna either copy the

376
00:16:49,640 --> 00:16:54,260
lower LBA which means the top part of

377
00:16:51,920 --> 00:16:57,050
the track the bottom track or the high

378
00:16:54,260 --> 00:17:00,260
LDH so either of these ends so we are

379
00:16:57,050 --> 00:17:02,390
gonna keep the other end in the in the

380
00:17:00,260 --> 00:17:04,640
bottom track our analysis shows that

381
00:17:02,390 --> 00:17:07,639
usually in a track we are not gonna have

382
00:17:04,640 --> 00:17:10,339
a even distribution of accesses for the

383
00:17:07,640 --> 00:17:12,800
LVS most of the times it's like ask you

384
00:17:10,339 --> 00:17:16,099
to one of the ends so we just need more

385
00:17:12,800 --> 00:17:17,839
memory to just keep track of each end so

386
00:17:16,099 --> 00:17:19,550
we're gonna double the memory maybe but

387
00:17:17,839 --> 00:17:21,260
it's not a big deal I showed that the

388
00:17:19,550 --> 00:17:23,379
memory usage is very okay so you're not

389
00:17:21,260 --> 00:17:25,040
just mapping the tracks your Mac beam

390
00:17:23,380 --> 00:17:28,520
yes exactly

391
00:17:25,040 --> 00:17:30,800
okay thanks by the way dynamic track

392
00:17:28,520 --> 00:17:32,750
mapping addresses des problem by

393
00:17:30,800 --> 00:17:34,669
arbitrarily moving the tracks around but

394
00:17:32,750 --> 00:17:38,540
I didn't explain it because lack of time

395
00:17:34,670 --> 00:17:41,060
sure hey thank you do you have any

396
00:17:38,540 --> 00:17:43,490
insight or insight knowledge about the

397
00:17:41,060 --> 00:17:47,389
availability of such drives availability

398
00:17:43,490 --> 00:17:49,430
yeah definitely you cannot find it on

399
00:17:47,390 --> 00:17:51,770
the market right now and I guess that

400
00:17:49,430 --> 00:17:53,870
it's and the experimental phase as I

401
00:17:51,770 --> 00:17:55,670
told you even when I was interning with

402
00:17:53,870 --> 00:17:57,919
them I didn't have access to data right

403
00:17:55,670 --> 00:17:59,789
that's why we be revealed with these

404
00:17:57,920 --> 00:18:02,519
simulations so so

405
00:17:59,789 --> 00:18:05,580
simulation and analysis as well seems to

406
00:18:02,519 --> 00:18:07,799
rely very tightly on the specific

407
00:18:05,580 --> 00:18:10,710
parameters the rotation and the seek

408
00:18:07,799 --> 00:18:13,168
times so do you have any insight of how

409
00:18:10,710 --> 00:18:15,359
these could be maybe the parameters

410
00:18:13,169 --> 00:18:17,789
should be adjusted to these types of

411
00:18:15,359 --> 00:18:18,749
drives or how the performance will

412
00:18:17,789 --> 00:18:21,059
depend on them

413
00:18:18,749 --> 00:18:22,710
I do believe because these drives they

414
00:18:21,059 --> 00:18:24,840
are based on the mechanics I mean you're

415
00:18:22,710 --> 00:18:26,700
gonna deal with arms and rotations so

416
00:18:24,840 --> 00:18:28,769
it's gonna be fixed

417
00:18:26,700 --> 00:18:30,690
you're gonna go buy a faster Drive it's

418
00:18:28,769 --> 00:18:32,070
gonna rotate faster so you just need to

419
00:18:30,690 --> 00:18:33,840
change the parameter you're not gonna

420
00:18:32,070 --> 00:18:36,359
have more parameters but you just need

421
00:18:33,840 --> 00:18:39,599
to change your parameters of course what

422
00:18:36,359 --> 00:18:41,220
I meant was whether these drives should

423
00:18:39,599 --> 00:18:45,899
have different parameters from regular

424
00:18:41,220 --> 00:18:47,820
CMR drives because of the specific what

425
00:18:45,899 --> 00:18:50,668
do you mean by regular by you should

426
00:18:47,820 --> 00:18:52,529
they spin quicker should they yeah I

427
00:18:50,669 --> 00:18:54,210
guess it doesn't matter for them because

428
00:18:52,529 --> 00:18:57,840
the technology is behind overlapping

429
00:18:54,210 --> 00:19:00,720
tracks so I I'm on top of my head I

430
00:18:57,840 --> 00:19:03,029
don't believe that we should have some

431
00:19:00,720 --> 00:19:06,029
more constraints about moving the stuff

432
00:19:03,029 --> 00:19:07,830
or rotating faster or slower okay so

433
00:19:06,029 --> 00:19:08,970
thank you very much this concludes our

434
00:19:07,830 --> 00:19:13,539
session

435
00:19:08,970 --> 00:19:13,539
[Applause]

