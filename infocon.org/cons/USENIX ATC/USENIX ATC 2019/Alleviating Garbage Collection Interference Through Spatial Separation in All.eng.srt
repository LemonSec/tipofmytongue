1
00:00:10,250 --> 00:00:14,540
yeah Thank You Prince affliction good

2
00:00:12,440 --> 00:00:17,180
morning everyone I'm choking from

3
00:00:14,540 --> 00:00:20,299
Virginia Tech I'm happy to be here to

4
00:00:17,180 --> 00:00:21,650
introduce our world today the title of

5
00:00:20,300 --> 00:00:23,779
this talk is elevating garbage

6
00:00:21,650 --> 00:00:26,990
collection interference through spatial

7
00:00:23,779 --> 00:00:28,220
separation in all fresh away okay this

8
00:00:26,990 --> 00:00:30,290
is joint work with the Quan Yin

9
00:00:28,220 --> 00:00:32,269
namyoung-dong Chun professor song Genie

10
00:00:30,290 --> 00:00:36,110
professor Chang min and prepares a

11
00:00:32,270 --> 00:00:38,150
seminal ok let me start or fresh always

12
00:00:36,110 --> 00:00:40,760
storage infrastructure that contains

13
00:00:38,150 --> 00:00:45,620
only flash memory drivers this was

14
00:00:40,760 --> 00:00:47,780
called soldier state away here is an

15
00:00:45,620 --> 00:00:50,239
example of a fresh away product

16
00:00:47,780 --> 00:00:53,870
typically one storage node is composed

17
00:00:50,240 --> 00:00:59,390
of large number of Asst multiple network

18
00:00:53,870 --> 00:01:01,730
ports so let me show you a list of and

19
00:00:59,390 --> 00:01:04,339
processes the control country on the

20
00:01:01,730 --> 00:01:06,920
market as you can see sequential read

21
00:01:04,339 --> 00:01:09,229
and write performance are in the future

22
00:01:06,920 --> 00:01:11,600
by per second range actually it is a

23
00:01:09,229 --> 00:01:14,658
fairly high performance okay let me show

24
00:01:11,600 --> 00:01:17,030
you the bandhas trend for network and

25
00:01:14,659 --> 00:01:20,330
storage interface except it shows years

26
00:01:17,030 --> 00:01:21,950
and while she sees bandwidth as you can

27
00:01:20,330 --> 00:01:25,009
see network interface bandwidth

28
00:01:21,950 --> 00:01:29,000
increases fast storage interface

29
00:01:25,010 --> 00:01:31,280
boundaries growth even faster so we can

30
00:01:29,000 --> 00:01:33,229
sell story a throughput increase quickly

31
00:01:31,280 --> 00:01:38,690
on storage is impaired alike anymore I

32
00:01:33,229 --> 00:01:42,700
know system so let's see again for

33
00:01:38,690 --> 00:01:45,860
storage II flows a fresh erased product

34
00:01:42,700 --> 00:01:48,830
if we configure all fresh of we're using

35
00:01:45,860 --> 00:01:51,289
this high-performance SST through

36
00:01:48,830 --> 00:01:56,720
probable few high-end SSD can easily

37
00:01:51,290 --> 00:01:58,700
saturate the network through blue so let

38
00:01:56,720 --> 00:02:02,270
me summarize current random challenges

39
00:01:58,700 --> 00:02:04,940
for this work promises for promise of

40
00:02:02,270 --> 00:02:07,548
SSD is a fairly high and total suitable

41
00:02:04,940 --> 00:02:10,038
few SSD is recession and appendices of

42
00:02:07,549 --> 00:02:12,739
all fresh away note however

43
00:02:10,038 --> 00:02:16,010
garbage collection of SSDs are still

44
00:02:12,739 --> 00:02:19,490
proponents of our lack of sorry

45
00:02:16,010 --> 00:02:23,690
so what is an either way to manage in

46
00:02:19,490 --> 00:02:25,520
the way of SSDs within current trend

47
00:02:23,690 --> 00:02:28,460
people introducing our solution I'm

48
00:02:25,520 --> 00:02:32,990
gonna give you a brief the comparison

49
00:02:28,460 --> 00:02:34,790
all previous solutions this is typical

50
00:02:32,990 --> 00:02:38,990
system linear with all traditional

51
00:02:34,790 --> 00:02:41,359
weight traditional way the employee in

52
00:02:38,990 --> 00:02:45,440
place of plate full serving right recast

53
00:02:41,360 --> 00:02:46,820
by doing this it is a susceptible to

54
00:02:45,440 --> 00:02:49,190
proponents drop due to cabbage

55
00:02:46,820 --> 00:02:52,690
correctional bread inside SSD because of

56
00:02:49,190 --> 00:02:55,250
random right from host so there will

57
00:02:52,690 --> 00:02:57,440
previous solutions to optimize your

58
00:02:55,250 --> 00:03:02,180
rational rate approach but there are

59
00:02:57,440 --> 00:03:04,790
still limitations to overcome drawback

60
00:03:02,180 --> 00:03:08,000
about rational rate the location radio

61
00:03:04,790 --> 00:03:10,340
approach has been have been studied log

62
00:03:08,000 --> 00:03:13,130
based rate employ local structured the

63
00:03:10,340 --> 00:03:16,550
right to reduce the garbage collection

64
00:03:13,130 --> 00:03:19,100
already inside SSDs however local

65
00:03:16,550 --> 00:03:22,880
structure the right involve host Rebecca

66
00:03:19,100 --> 00:03:25,640
collection the garbage collection little

67
00:03:22,880 --> 00:03:27,560
eyes on the either time if Adele was no

68
00:03:25,640 --> 00:03:30,200
idle time cabbage collection will cause

69
00:03:27,560 --> 00:03:32,870
proponents drop I'm sorry

70
00:03:30,200 --> 00:03:34,399
so this is well known job variable over

71
00:03:32,870 --> 00:03:36,470
structures right so there were also

72
00:03:34,400 --> 00:03:40,910
several previous solutions but there are

73
00:03:36,470 --> 00:03:42,709
still limitations now we consider

74
00:03:40,910 --> 00:03:45,880
performance of typical load Bay State

75
00:03:42,709 --> 00:03:48,800
weight were it consists of eight SSDs

76
00:03:45,880 --> 00:03:50,930
for workload we use the random white we

77
00:03:48,800 --> 00:03:54,170
cast continuously for two hours

78
00:03:50,930 --> 00:03:55,400
here is a proposed result x axis is time

79
00:03:54,170 --> 00:03:58,309
and why he actually says the throughput

80
00:03:55,400 --> 00:04:01,280
wheel so that garbage collections turned

81
00:03:58,310 --> 00:04:02,959
around at a thousand second up the

82
00:04:01,280 --> 00:04:05,480
garbage collection performance fruit

83
00:04:02,959 --> 00:04:07,060
rate due to copy correction are you and

84
00:04:05,480 --> 00:04:12,440
you GRU

85
00:04:07,060 --> 00:04:13,880
so what can we how can you avoid the

86
00:04:12,440 --> 00:04:18,200
performance evaluation due to cabbage

87
00:04:13,880 --> 00:04:21,409
cracks in the office away so our

88
00:04:18,200 --> 00:04:24,200
solution is Swan so Swan stand for

89
00:04:21,410 --> 00:04:27,200
posture separation reading an array of a

90
00:04:24,200 --> 00:04:30,289
SSD or not network so we have a three

91
00:04:27,200 --> 00:04:32,330
goals in this world the first we provide

92
00:04:30,290 --> 00:04:35,479
sustainable through pool up to net

93
00:04:32,330 --> 00:04:37,609
values of all fresh away second we

94
00:04:35,479 --> 00:04:40,039
elevate cars crashing if you

95
00:04:37,610 --> 00:04:44,150
between yu-gi-oh and garbage collection

96
00:04:40,040 --> 00:04:46,850
I or the last one we find on efficient

97
00:04:44,150 --> 00:04:49,340
way to manage a way of SST in all fresh

98
00:04:46,850 --> 00:04:51,680
way our approach is to minimize your

99
00:04:49,340 --> 00:04:56,750
garbage collection interference through

100
00:04:51,680 --> 00:04:59,840
supposed special separation so I'm gonna

101
00:04:56,750 --> 00:05:04,550
give you a brief architectural Swan so

102
00:04:59,840 --> 00:05:08,989
with the Biden wave SST into front end

103
00:05:04,550 --> 00:05:13,070
and back end we call it spatial

104
00:05:08,990 --> 00:05:14,810
separation and swan employ local

105
00:05:13,070 --> 00:05:19,190
structured right to make append-only

106
00:05:14,810 --> 00:05:21,110
manner which is deal fresh friendly so

107
00:05:19,190 --> 00:05:26,810
garbage collection effect is minimized

108
00:05:21,110 --> 00:05:29,870
by this spatial separation so we focus

109
00:05:26,810 --> 00:05:34,100
on how to implement spatial separation

110
00:05:29,870 --> 00:05:36,320
in all fresh away and we compel temporal

111
00:05:34,100 --> 00:05:41,200
separation and spatial separation in

112
00:05:36,320 --> 00:05:44,570
terms of performance and efficiency so

113
00:05:41,200 --> 00:05:46,640
I'm gonna give you a detective Swan for

114
00:05:44,570 --> 00:05:49,669
spatial separation front end disturb

115
00:05:46,640 --> 00:05:52,940
alright we cast while back end problem

116
00:05:49,669 --> 00:05:55,190
garbage collections so Swan the employee

117
00:05:52,940 --> 00:05:56,990
is segmented based of segments based

118
00:05:55,190 --> 00:05:59,990
append-only right which is fresh

119
00:05:56,990 --> 00:06:03,020
friendly and will also maintain the

120
00:05:59,990 --> 00:06:06,560
mapping table and Swan is implemented in

121
00:06:03,020 --> 00:06:12,349
black isle area okay I'm gonna give you

122
00:06:06,560 --> 00:06:16,000
example handling Ionian Swan so s 1

123
00:06:12,350 --> 00:06:20,210
receive all right all are you recast

124
00:06:16,000 --> 00:06:23,630
from Brava you interface and we maintain

125
00:06:20,210 --> 00:06:27,080
logical and physical volume to menus a

126
00:06:23,630 --> 00:06:29,180
way of SST okay let's assume that the

127
00:06:27,080 --> 00:06:32,359
right we can read and white cast of vibe

128
00:06:29,180 --> 00:06:35,780
to from black know face the red

129
00:06:32,360 --> 00:06:38,330
rectangle let the circles indicate the

130
00:06:35,780 --> 00:06:43,760
right request and green circle indicates

131
00:06:38,330 --> 00:06:45,800
white read recast so we cast oppressed

132
00:06:43,760 --> 00:06:50,789
in the Raj Kapoor room according to the

133
00:06:45,800 --> 00:06:53,660
block number white wicker stop and it

134
00:06:50,790 --> 00:07:00,150
to open the two segments and distribute

135
00:06:53,660 --> 00:07:06,960
SST with parity for recovery like late

136
00:07:00,150 --> 00:07:09,780
parallelism the in case of read recast

137
00:07:06,960 --> 00:07:12,150
the with recast will be solved by any

138
00:07:09,780 --> 00:07:17,039
obesity they are holding the we casted a

139
00:07:12,150 --> 00:07:18,810
table like this okay I'm gonna give you

140
00:07:17,040 --> 00:07:21,450
a procedure about handling in more

141
00:07:18,810 --> 00:07:24,660
detail from 10 Colette let me assume

142
00:07:21,450 --> 00:07:26,729
let's assume the held one from 10 and to

143
00:07:24,660 --> 00:07:30,900
back-end each of them consists of three

144
00:07:26,730 --> 00:07:32,880
SS this front end absorb all right we

145
00:07:30,900 --> 00:07:39,590
can still open the only manner to

146
00:07:32,880 --> 00:07:45,090
explore performance of SSDs like this

147
00:07:39,590 --> 00:07:48,960
yeah when front-end become full the next

148
00:07:45,090 --> 00:07:51,780
empty bag and become front hand and foot

149
00:07:48,960 --> 00:07:55,109
point and become back-end again in front

150
00:07:51,780 --> 00:07:59,549
new proteins serve alright we cast like

151
00:07:55,110 --> 00:08:02,280
this okay Wendell is no more empty bag

152
00:07:59,550 --> 00:08:05,280
and the swatch garbage collection is

153
00:08:02,280 --> 00:08:07,200
triggered to make free space and so on

154
00:08:05,280 --> 00:08:12,210
choose victim segment from one of

155
00:08:07,200 --> 00:08:16,500
back-end right buried the blog we didn't

156
00:08:12,210 --> 00:08:20,820
Susan back end and the final victim

157
00:08:16,500 --> 00:08:23,280
segment is trimmed like this yeah

158
00:08:20,820 --> 00:08:25,890
actually in command is important for our

159
00:08:23,280 --> 00:08:29,219
Swan the because the trim command

160
00:08:25,890 --> 00:08:35,280
initial wiring all segments sequencer

161
00:08:29,220 --> 00:08:39,440
inside SSD so all white we cast and the

162
00:08:35,280 --> 00:08:43,470
correctional spots are separated so will

163
00:08:39,440 --> 00:08:47,340
conducted usability analysis on swamp so

164
00:08:43,470 --> 00:08:49,860
in the analysis we provide design

165
00:08:47,340 --> 00:08:53,150
choices such as how many assess in front

166
00:08:49,860 --> 00:08:55,920
end and how many back end in a fresh way

167
00:08:53,150 --> 00:08:56,730
in addition we also present a

168
00:08:55,920 --> 00:08:59,490
multi-modal

169
00:08:56,730 --> 00:09:02,960
swatch garbage collection okay a police

170
00:08:59,490 --> 00:09:05,240
lab to our paper for detail

171
00:09:02,960 --> 00:09:09,310
okay I'm going to show you evaluations

172
00:09:05,240 --> 00:09:13,640
settle for evaluation we use a typical

173
00:09:09,310 --> 00:09:17,959
typical server with with up to nine

174
00:09:13,640 --> 00:09:19,550
statuses steel and we also use open

175
00:09:17,960 --> 00:09:24,200
channel access TV for monitoring

176
00:09:19,550 --> 00:09:28,839
internal activity of an SSD we compel a

177
00:09:24,200 --> 00:09:33,200
little traditional laid and robust wait

178
00:09:28,839 --> 00:09:36,800
please note that the zero and fold in in

179
00:09:33,200 --> 00:09:43,730
a Mitchell scheme indicate presence or

180
00:09:36,800 --> 00:09:47,140
absence of parity so for workload we use

181
00:09:43,730 --> 00:09:50,690
micro benchmark and watch SCP CPH mark

182
00:09:47,140 --> 00:09:55,610
now push up to the the rest of the more

183
00:09:50,690 --> 00:09:57,200
wizard for our paper so now I'm gonna go

184
00:09:55,610 --> 00:10:03,040
will show you the result of random light

185
00:09:57,200 --> 00:10:06,410
performance for low blade and so on 0 so

186
00:10:03,040 --> 00:10:09,920
the in case of low-grade 0 up to garbage

187
00:10:06,410 --> 00:10:12,800
collection start the band appreciates

188
00:10:09,920 --> 00:10:15,260
because of the interference between cars

189
00:10:12,800 --> 00:10:18,829
crashing I even use a gyro in case was

190
00:10:15,260 --> 00:10:23,360
one Swann provide consistent performance

191
00:10:18,830 --> 00:10:26,990
even garbage collection starts ok let's

192
00:10:23,360 --> 00:10:28,850
take a closer look at Poppins result so

193
00:10:26,990 --> 00:10:30,770
I'm gonna show you an analysis of low

194
00:10:28,850 --> 00:10:34,850
Brandis wide performance in the

195
00:10:30,770 --> 00:10:37,699
experiment we used 8 SSDs so both left

196
00:10:34,850 --> 00:10:40,880
and right figure shows still through

197
00:10:37,700 --> 00:10:42,950
Prolog raid 0 in the left figure which

198
00:10:40,880 --> 00:10:47,620
shows individual through playable all

199
00:10:42,950 --> 00:10:51,230
SSD and the last low shows use observed

200
00:10:47,620 --> 00:10:53,630
used observe the through pull the blue

201
00:10:51,230 --> 00:10:57,320
line in indicate the right through pool

202
00:10:53,630 --> 00:11:01,120
while red wine is with the throughput so

203
00:10:57,320 --> 00:11:01,120
AB the garbage collection starts

204
00:11:01,450 --> 00:11:07,250
red line increases while blue line dick

205
00:11:04,820 --> 00:11:11,839
the drop down since garbage collection

206
00:11:07,250 --> 00:11:15,140
in curve with and white so the pop

207
00:11:11,839 --> 00:11:17,680
almost Pritchett as old SSD involved in

208
00:11:15,140 --> 00:11:20,120
garbage collection

209
00:11:17,680 --> 00:11:23,630
so in case there was to answer right

210
00:11:20,120 --> 00:11:26,600
performance we also measured all

211
00:11:23,630 --> 00:11:30,830
individual throughput or SSDs and the

212
00:11:26,600 --> 00:11:34,300
last of all yeah okay sorry

213
00:11:30,830 --> 00:11:37,010
so for us when this evaluation we use

214
00:11:34,300 --> 00:11:39,229
one front end up four pack and each of

215
00:11:37,010 --> 00:11:44,390
them considered to consist of two SSDs

216
00:11:39,230 --> 00:11:48,470
and two which will also meet your all

217
00:11:44,390 --> 00:11:54,790
individual access they threw pool also

218
00:11:48,470 --> 00:11:59,360
as two wall is usual shortest roopu so

219
00:11:54,790 --> 00:12:02,180
so as you can see left side figure front

220
00:11:59,360 --> 00:12:07,310
end the only stable wide we cast around

221
00:12:02,180 --> 00:12:09,290
a 1000 second to one or began the start

222
00:12:07,310 --> 00:12:12,469
garbage collection will hold front end

223
00:12:09,290 --> 00:12:14,089
the handle right cast so not the only

224
00:12:12,470 --> 00:12:19,310
one peg and the involved in garbage

225
00:12:14,090 --> 00:12:23,450
collection yeah this pattern goes when

226
00:12:19,310 --> 00:12:25,040
we can survive so we can say so on

227
00:12:23,450 --> 00:12:30,890
separate white cast and garbage

228
00:12:25,040 --> 00:12:36,500
collection so here is the widow Teletoon

229
00:12:30,890 --> 00:12:39,800
she'll full by CCBC benchmark so swine

230
00:12:36,500 --> 00:12:43,660
shows shortest though okay sorry

231
00:12:39,800 --> 00:12:46,969
so x axis is time and the y axis is the

232
00:12:43,660 --> 00:12:50,360
latency in spatial telogen see the swine

233
00:12:46,970 --> 00:12:54,140
shows shortest little agency and ready

234
00:12:50,360 --> 00:12:58,550
for and related full stop along with a

235
00:12:54,140 --> 00:13:01,460
license so it shows spatial separation

236
00:12:58,550 --> 00:13:06,500
is effective for handling with recast as

237
00:13:01,460 --> 00:13:10,510
well okay I'm gonna give you the

238
00:13:06,500 --> 00:13:14,720
additional benefit with Swan so we can

239
00:13:10,510 --> 00:13:17,390
use the simple SST even develop it

240
00:13:14,720 --> 00:13:19,370
so so one can save cost and power

241
00:13:17,390 --> 00:13:22,220
consumption without compromising

242
00:13:19,370 --> 00:13:25,370
performance by adapting simple SST such

243
00:13:22,220 --> 00:13:29,090
as smaller de-emphasizing sided SSD

244
00:13:25,370 --> 00:13:30,290
controller and small obvious space for

245
00:13:29,090 --> 00:13:34,910
saving

246
00:13:30,290 --> 00:13:39,050
the cost or the we can use block or a

247
00:13:34,910 --> 00:13:40,790
cement level up TL instead of the page

248
00:13:39,050 --> 00:13:44,449
aperture which which will cause

249
00:13:40,790 --> 00:13:46,640
increased cost because of us one always

250
00:13:44,450 --> 00:13:49,190
sequentially writes always the

251
00:13:46,640 --> 00:13:52,580
sequentially right data twelve segments

252
00:13:49,190 --> 00:13:55,340
and trim a large chunk of data in the

253
00:13:52,580 --> 00:13:58,970
segment in the same segment at once yeah

254
00:13:55,340 --> 00:14:02,480
actually the important award the good

255
00:13:58,970 --> 00:14:05,420
benefit okay let me summarize let me

256
00:14:02,480 --> 00:14:07,940
conclude our work so we provide full

257
00:14:05,420 --> 00:14:10,670
right banda visual array of SSD up to

258
00:14:07,940 --> 00:14:12,380
narrow bandwidth limit so we elevate

259
00:14:10,670 --> 00:14:15,260
garbage collection interference through

260
00:14:12,380 --> 00:14:17,240
spatial separation are you induced by

261
00:14:15,260 --> 00:14:20,750
application and garbage collection of

262
00:14:17,240 --> 00:14:24,100
all fresh away mu introduced efficient

263
00:14:20,750 --> 00:14:26,600
way to manage assess eaten or fresh away

264
00:14:24,100 --> 00:14:34,820
thank you for your attention I'd be

265
00:14:26,600 --> 00:14:36,290
happy to take your question yeah thank

266
00:14:34,820 --> 00:14:39,140
you very much that's a very interesting

267
00:14:36,290 --> 00:14:40,819
design I have well people are standing

268
00:14:39,140 --> 00:14:45,170
up I have one question

269
00:14:40,820 --> 00:14:48,440
so you trim to let the Swan controller

270
00:14:45,170 --> 00:14:51,260
trims entire blocks to let SSDs that

271
00:14:48,440 --> 00:14:53,810
they can do efficient garbage collection

272
00:14:51,260 --> 00:14:56,480
yes why but how do you tell these SSDs

273
00:14:53,810 --> 00:14:59,109
when it is time to actually perform the

274
00:14:56,480 --> 00:15:03,140
erasers do you control it in somehow

275
00:14:59,110 --> 00:15:05,210
because the the host the actually Swan

276
00:15:03,140 --> 00:15:09,110
is implemented in host layer in the

277
00:15:05,210 --> 00:15:11,660
Bradley in so the when they always do we

278
00:15:09,110 --> 00:15:15,470
need to capture collection it means that

279
00:15:11,660 --> 00:15:18,079
we need to make free space so the weak

280
00:15:15,470 --> 00:15:22,640
object is the inside the actually the

281
00:15:18,080 --> 00:15:28,130
host layer but we still need to the cut

282
00:15:22,640 --> 00:15:31,490
the copy to the from this directly the

283
00:15:28,130 --> 00:15:34,220
bag and start to copy and L we can send

284
00:15:31,490 --> 00:15:36,230
the trim command by from hosting and

285
00:15:34,220 --> 00:15:38,720
this the trim command just trigger the

286
00:15:36,230 --> 00:15:42,320
SD card yes right yeah there was a dick

287
00:15:38,720 --> 00:15:43,860
comment yes standard comment yeah I'm

288
00:15:42,320 --> 00:15:47,190
Alan I work for

289
00:15:43,860 --> 00:15:48,870
come so a way of solving these kind of

290
00:15:47,190 --> 00:15:50,730
problem is to introducing a scheduler

291
00:15:48,870 --> 00:15:53,070
right so schedule all the users just

292
00:15:50,730 --> 00:15:54,600
wondering like why did you like go ahead

293
00:15:53,070 --> 00:15:57,690
with the why'd you decide to go ahead

294
00:15:54,600 --> 00:15:59,339
with something like Swan as opposed to

295
00:15:57,690 --> 00:16:03,660
implementing sort of I use Caggiula

296
00:15:59,339 --> 00:16:06,779
that's more generalized you mean you to

297
00:16:03,660 --> 00:16:09,000
the schedule I'm sorry I can understand

298
00:16:06,779 --> 00:16:10,950
understand you mean so one option is to

299
00:16:09,000 --> 00:16:14,370
just I mean if they're like write and

300
00:16:10,950 --> 00:16:16,410
write or read workload right maybe slow

301
00:16:14,370 --> 00:16:18,959
down the garbage collection it's a yeah

302
00:16:16,410 --> 00:16:22,760
so that could we could have done that as

303
00:16:18,959 --> 00:16:25,229
opposed to sort of like switching like

304
00:16:22,760 --> 00:16:27,450
between front-end and back-end SSDs

305
00:16:25,230 --> 00:16:30,390
right so just wondering like why did you

306
00:16:27,450 --> 00:16:32,970
do you know why did you decide to not to

307
00:16:30,390 --> 00:16:37,860
coordinate these i/o operations as

308
00:16:32,970 --> 00:16:43,200
opposed to and you know I mean went with

309
00:16:37,860 --> 00:16:44,880
the swam make sense is because of the

310
00:16:43,200 --> 00:16:47,269
simplicity because I think that because

311
00:16:44,880 --> 00:16:50,189
there is detail in various resources so

312
00:16:47,269 --> 00:16:52,620
it's much more harder to implement some

313
00:16:50,190 --> 00:16:54,890
sort of a general a scheduler and this

314
00:16:52,620 --> 00:16:57,060
approach that you're taken might be like

315
00:16:54,890 --> 00:16:59,339
easier given the resources constrain

316
00:16:57,060 --> 00:17:02,069
yeah it make sense oh but this is little

317
00:16:59,339 --> 00:17:04,829
it's a little bit hard to implement in

318
00:17:02,070 --> 00:17:10,169
IO schedule because this is we need to

319
00:17:04,829 --> 00:17:12,030
control all aware of SST and yeah

320
00:17:10,169 --> 00:17:14,069
actually I understand your suggestion

321
00:17:12,030 --> 00:17:16,349
but it's a little bit hard to the

322
00:17:14,069 --> 00:17:20,030
control always SSD and aware of

323
00:17:16,349 --> 00:17:23,869
especially when you within scheduler

324
00:17:20,030 --> 00:17:26,868
okay I think it did yeah I guess offline

325
00:17:23,869 --> 00:17:31,589
okay let's thank the speaker again

326
00:17:26,868 --> 00:17:31,589
[Applause]

