1
00:00:10,470 --> 00:00:14,370
thank you very much for the introduction

2
00:00:12,000 --> 00:00:16,470
so thank you everyone to be here to

3
00:00:14,370 --> 00:00:18,240
listen to my talk so they're going to

4
00:00:16,470 --> 00:00:20,580
talk about sim DX programming and

5
00:00:18,240 --> 00:00:23,369
processing of graph algorithms and GPUs

6
00:00:20,580 --> 00:00:25,770
as he just mentioned that it's really

7
00:00:23,369 --> 00:00:27,779
just a marriage between graph and GPU so

8
00:00:25,770 --> 00:00:30,359
it's about two things let's see how

9
00:00:27,779 --> 00:00:33,570
these two guys behave together

10
00:00:30,359 --> 00:00:35,910
I bet everyone agrees that graph

11
00:00:33,570 --> 00:00:38,040
everywhere stunning from the morning

12
00:00:35,910 --> 00:00:39,690
like our generation writer would

13
00:00:38,040 --> 00:00:41,250
typically use Facebook to check new

14
00:00:39,690 --> 00:00:43,829
fates and actually it's based upon

15
00:00:41,250 --> 00:00:45,719
social network if you want navigate from

16
00:00:43,829 --> 00:00:47,489
airport to here you are using you know

17
00:00:45,719 --> 00:00:50,340
single source shortest paths with

18
00:00:47,489 --> 00:00:52,680
similar algorithms if you think sim DX

19
00:00:50,340 --> 00:00:54,600
is an interesting paper please go ahead

20
00:00:52,680 --> 00:00:56,519
a book or it well actually when your

21
00:00:54,600 --> 00:00:58,980
Google is actually working on a web

22
00:00:56,520 --> 00:01:02,129
graph to figure out the web page every

23
00:00:58,980 --> 00:01:04,229
interest there's a lot of applications

24
00:01:02,129 --> 00:01:06,330
out there they are based upon graphs

25
00:01:04,229 --> 00:01:08,280
I can definitely cannot enumerate them

26
00:01:06,330 --> 00:01:11,160
one by one but I think it's very safe to

27
00:01:08,280 --> 00:01:13,560
say graph is everywhere where on the

28
00:01:11,160 --> 00:01:15,060
other hand graph algorithms are working

29
00:01:13,560 --> 00:01:17,940
on those graphs and extract very

30
00:01:15,060 --> 00:01:20,099
valuable insights for our daily life for

31
00:01:17,940 --> 00:01:22,289
example I'm still using the same graphs

32
00:01:20,099 --> 00:01:24,240
over there in the right side and I'm

33
00:01:22,289 --> 00:01:26,160
listing the algorithms like computing on

34
00:01:24,240 --> 00:01:28,679
those graphs and extracting valuable

35
00:01:26,160 --> 00:01:30,959
insights for social network friend

36
00:01:28,679 --> 00:01:34,890
recommendation for navigation using

37
00:01:30,959 --> 00:01:37,709
shortest path or PageRank no need to

38
00:01:34,890 --> 00:01:39,690
mention Larry Page invented this and the

39
00:01:37,709 --> 00:01:43,020
use this is the prototype to build this

40
00:01:39,690 --> 00:01:46,080
giant of Google right matrix of matrix

41
00:01:43,020 --> 00:01:48,390
factorization similarly for Amazon well

42
00:01:46,080 --> 00:01:50,369
graph is everywhere graph computing is

43
00:01:48,390 --> 00:01:53,340
very insightful but unfortunately graph

44
00:01:50,369 --> 00:01:55,530
computing is also not easy well if you I

45
00:01:53,340 --> 00:01:57,090
mean give you a very intuitive example

46
00:01:55,530 --> 00:01:59,459
right when we learn about algorithms

47
00:01:57,090 --> 00:02:03,060
graph algorithm is what is the last

48
00:01:59,459 --> 00:02:06,539
chapter of your algorithm book right so

49
00:02:03,060 --> 00:02:08,789
you you know that it's intimidating for

50
00:02:06,539 --> 00:02:10,530
us well here I'm not see it's

51
00:02:08,788 --> 00:02:12,958
intimidating for us is in humiliating

52
00:02:10,530 --> 00:02:14,819
for the machines right in the middle it

53
00:02:12,959 --> 00:02:17,640
is just a theoretical complexity of

54
00:02:14,819 --> 00:02:20,609
graph algorithms saying you can see here

55
00:02:17,640 --> 00:02:22,350
the complexity is either E or several

56
00:02:20,610 --> 00:02:24,490
times of you if you take a look at the

57
00:02:22,350 --> 00:02:27,160
graphs here we see really

58
00:02:24,490 --> 00:02:29,020
of Ages worth tens of trillions hundreds

59
00:02:27,160 --> 00:02:32,590
of trillions of ages so it's a lot of

60
00:02:29,020 --> 00:02:34,570
better and we will run the power graph

61
00:02:32,590 --> 00:02:38,290
which is a very popular graph framework

62
00:02:34,570 --> 00:02:40,060
on a relatively small Twitter data set

63
00:02:38,290 --> 00:02:42,820
which is 53 meaning of what it is to be

64
00:02:40,060 --> 00:02:45,310
no edges it takes 10 minutes two hours

65
00:02:42,820 --> 00:02:48,340
to figure out those kind of computations

66
00:02:45,310 --> 00:02:50,110
well if you just to give an imagination

67
00:02:48,340 --> 00:02:51,730
if you are navigating on the highway you

68
00:02:50,110 --> 00:02:54,010
make a wrong turn which is typical

69
00:02:51,730 --> 00:02:56,019
everybody makes mistakes right do you

70
00:02:54,010 --> 00:02:58,750
want to with tens of minutes to figure

71
00:02:56,020 --> 00:03:01,180
the next turn well I bet you do not want

72
00:02:58,750 --> 00:03:02,710
that actually it's not like that right

73
00:03:01,180 --> 00:03:03,760
but because here we're talking about

74
00:03:02,710 --> 00:03:06,160
this and giving you an illustration

75
00:03:03,760 --> 00:03:10,299
about that we need graph computing to be

76
00:03:06,160 --> 00:03:11,770
faster right well we needed to be faster

77
00:03:10,300 --> 00:03:14,380
and it's very fortunate right now

78
00:03:11,770 --> 00:03:16,780
there's a very good processor over there

79
00:03:14,380 --> 00:03:19,630
they can provide very very impressive

80
00:03:16,780 --> 00:03:22,030
computing power and data delivery wait

81
00:03:19,630 --> 00:03:24,670
for example we see here highlighted it

82
00:03:22,030 --> 00:03:27,670
gives you 100 hair flops computing power

83
00:03:24,670 --> 00:03:28,780
and nearly one terabyte per second

84
00:03:27,670 --> 00:03:33,160
throughput

85
00:03:28,780 --> 00:03:34,600
I mean tremendous weight wise like that

86
00:03:33,160 --> 00:03:36,430
I'll give you a very high-level

87
00:03:34,600 --> 00:03:39,280
impression about a wise like that with

88
00:03:36,430 --> 00:03:42,310
two things first is processor second is

89
00:03:39,280 --> 00:03:44,050
memory they both are hierarchical so you

90
00:03:42,310 --> 00:03:45,730
have a cup of multi processors and

91
00:03:44,050 --> 00:03:48,040
instead of each multi processor you have

92
00:03:45,730 --> 00:03:51,220
a couple cores taken together if you

93
00:03:48,040 --> 00:03:52,959
like v100 GPU have fat file and of

94
00:03:51,220 --> 00:03:54,190
course over there and supporting

95
00:03:52,960 --> 00:03:57,340
millions of threats to do the

96
00:03:54,190 --> 00:04:00,100
computation well on the other hand you

97
00:03:57,340 --> 00:04:02,200
have the hierarchical register share

98
00:04:00,100 --> 00:04:05,140
memory well and cache l2 cache and

99
00:04:02,200 --> 00:04:07,660
global memory we deliver you different

100
00:04:05,140 --> 00:04:08,980
access latencies like zero cycle because

101
00:04:07,660 --> 00:04:11,170
it's whirring in register so you can

102
00:04:08,980 --> 00:04:12,820
compute it merely and or it's in share

103
00:04:11,170 --> 00:04:15,010
memory or l2 cache global memory

104
00:04:12,820 --> 00:04:17,108
accelerate different audiences so it

105
00:04:15,010 --> 00:04:19,510
tells you that you want it to be still

106
00:04:17,108 --> 00:04:22,750
sustained they look how early right

107
00:04:19,510 --> 00:04:24,460
well GP has a lot of things we can

108
00:04:22,750 --> 00:04:26,530
definitely were not from the Nvidia so

109
00:04:24,460 --> 00:04:29,530
why not sell it but I'm tell you some

110
00:04:26,530 --> 00:04:32,229
cavador takeaway here that is GPUs

111
00:04:29,530 --> 00:04:34,239
simpie in nature that means you have

112
00:04:32,230 --> 00:04:38,200
millions of threads like thinking about

113
00:04:34,240 --> 00:04:40,420
we have a general as minion soldiers he

114
00:04:38,200 --> 00:04:42,280
can I talk to every soldier right he

115
00:04:40,420 --> 00:04:43,990
have talked to a group of soldiers at a

116
00:04:42,280 --> 00:04:46,900
time where they need some haricot

117
00:04:43,990 --> 00:04:49,720
management seminar here we manage the

118
00:04:46,900 --> 00:04:53,109
threats near war were a same deep group

119
00:04:49,720 --> 00:04:54,340
and then every time you have 32 threats

120
00:04:53,110 --> 00:04:57,640
they kind of Skagit in the same

121
00:04:54,340 --> 00:05:00,190
instruction to the computation well that

122
00:04:57,640 --> 00:05:02,140
being said if it's not obeyed then your

123
00:05:00,190 --> 00:05:04,060
performance that degradation gonna be

124
00:05:02,140 --> 00:05:05,650
suffered well this is something

125
00:05:04,060 --> 00:05:07,750
everybody knows and I want to give you

126
00:05:05,650 --> 00:05:10,690
another kV is when you're accessing some

127
00:05:07,750 --> 00:05:13,180
data its what so similar if you ask

128
00:05:10,690 --> 00:05:15,760
those consecutive threats to access

129
00:05:13,180 --> 00:05:17,950
non-adjacent data then you're gonna

130
00:05:15,760 --> 00:05:22,060
watch so suffer from the memory access

131
00:05:17,950 --> 00:05:26,409
degradation so with the same D in your

132
00:05:22,060 --> 00:05:28,690
mind let's move on so we say GPU is very

133
00:05:26,410 --> 00:05:31,090
good to move to map those things matrix

134
00:05:28,690 --> 00:05:33,670
computation because it's very regular

135
00:05:31,090 --> 00:05:35,859
it's like image processing right so

136
00:05:33,670 --> 00:05:39,160
that's what so the origin of GPU or

137
00:05:35,860 --> 00:05:41,950
graphics processing unit well if you map

138
00:05:39,160 --> 00:05:45,520
graph and GPU in the middle you see that

139
00:05:41,950 --> 00:05:49,960
it's a twisted mapping because graph is

140
00:05:45,520 --> 00:05:51,700
what complex in nature so as I said in

141
00:05:49,960 --> 00:05:55,359
the net noon talk I'm saying

142
00:05:51,700 --> 00:05:58,840
GPUs SEM D graph is complex so that's

143
00:05:55,360 --> 00:06:01,210
why we marry right so you combine some

144
00:05:58,840 --> 00:06:04,900
plot from this one some plot from that

145
00:06:01,210 --> 00:06:06,760
one so it becomes simply X okay so

146
00:06:04,900 --> 00:06:09,789
that's why we bridge the gap between

147
00:06:06,760 --> 00:06:14,200
graph computing and GPU what in terms of

148
00:06:09,790 --> 00:06:17,380
name at least okay so it's a little bit

149
00:06:14,200 --> 00:06:19,599
motivation now let's move on to what is

150
00:06:17,380 --> 00:06:22,810
exactly graph computing and then how we

151
00:06:19,600 --> 00:06:25,360
do it so for example using single source

152
00:06:22,810 --> 00:06:28,000
shortest path as an example if we are

153
00:06:25,360 --> 00:06:31,390
computing on this toy graph which has a

154
00:06:28,000 --> 00:06:33,430
to I 9 vertices and a cup of edges the

155
00:06:31,390 --> 00:06:36,340
value numerical values on top of those

156
00:06:33,430 --> 00:06:39,100
lines are the the Agilent assuming we

157
00:06:36,340 --> 00:06:42,070
start the Traverso from 0 and then we go

158
00:06:39,100 --> 00:06:44,530
to B and D correspondingly we update the

159
00:06:42,070 --> 00:06:49,380
distance array with the distance of a as

160
00:06:44,530 --> 00:06:52,030
0 and B and D with 5 and 1 respectively

161
00:06:49,380 --> 00:06:54,040
so when we proceed to neck

162
00:06:52,030 --> 00:06:57,520
iteration we see different colors of the

163
00:06:54,040 --> 00:07:00,400
vertices so this darker brown means it

164
00:06:57,520 --> 00:07:02,760
is active right now you have to compute

165
00:07:00,400 --> 00:07:05,679
on this vertex right now and those

166
00:07:02,760 --> 00:07:08,140
slightly lighter ones means they just

167
00:07:05,680 --> 00:07:10,180
get updated in this iteration and that

168
00:07:08,140 --> 00:07:13,180
whistle means it can be actively next

169
00:07:10,180 --> 00:07:16,180
iteration so similarly we work on B and

170
00:07:13,180 --> 00:07:18,310
D we could en ese fin updated you

171
00:07:16,180 --> 00:07:20,470
continue like this you get another one

172
00:07:18,310 --> 00:07:22,570
well some of you may question okay we

173
00:07:20,470 --> 00:07:24,730
are not using you are not using tax for

174
00:07:22,570 --> 00:07:27,280
right so here we didn't use that is

175
00:07:24,730 --> 00:07:29,140
because dextra is very very has very

176
00:07:27,280 --> 00:07:31,450
very limited parallelism because it only

177
00:07:29,140 --> 00:07:34,000
allows the students went to proceed at a

178
00:07:31,450 --> 00:07:36,430
time so here we allow those guys who get

179
00:07:34,000 --> 00:07:38,140
updated of them you can go ahead because

180
00:07:36,430 --> 00:07:42,130
think about GPU has massively

181
00:07:38,140 --> 00:07:43,659
parallelism right and and you I mean you

182
00:07:42,130 --> 00:07:46,150
can continue like this and show you have

183
00:07:43,660 --> 00:07:47,410
no update to cut to perform it's also

184
00:07:46,150 --> 00:07:50,919
the time you can terminate your

185
00:07:47,410 --> 00:07:52,870
computation well this is an impression

186
00:07:50,920 --> 00:07:53,230
to you let me summarize what's wrong

187
00:07:52,870 --> 00:07:56,950
with it

188
00:07:53,230 --> 00:07:59,890
first you only allow were uni you only

189
00:07:56,950 --> 00:08:02,830
experience a portion of vertices to be

190
00:07:59,890 --> 00:08:04,960
active that actually means you cannot

191
00:08:02,830 --> 00:08:07,120
compute envoy or you do not have to

192
00:08:04,960 --> 00:08:09,549
compute what the vertices at a single

193
00:08:07,120 --> 00:08:13,270
iteration you only have to act computer

194
00:08:09,550 --> 00:08:16,480
on this darker brown ones right second

195
00:08:13,270 --> 00:08:19,810
is various active vertices are totally

196
00:08:16,480 --> 00:08:22,840
different if you use social narrow as an

197
00:08:19,810 --> 00:08:26,980
example with Twitter like our president

198
00:08:22,840 --> 00:08:31,299
has millions of followers I have six

199
00:08:26,980 --> 00:08:34,870
followers right well yeah that's true

200
00:08:31,300 --> 00:08:36,640
so it means if we assign the same amount

201
00:08:34,870 --> 00:08:39,100
of threads or same number of threads to

202
00:08:36,640 --> 00:08:41,280
these two vertices you suffer from what

203
00:08:39,100 --> 00:08:44,290
chlorine balanced right

204
00:08:41,280 --> 00:08:46,750
synchronization is what's necessary as

205
00:08:44,290 --> 00:08:49,569
we can see here from Y duration

206
00:08:46,750 --> 00:08:52,140
proceeding to next iteration you have to

207
00:08:49,570 --> 00:08:54,670
get updated value from the previous

208
00:08:52,140 --> 00:08:56,439
iterations in order to proceed to next

209
00:08:54,670 --> 00:08:58,959
generation otherwise you're gonna get

210
00:08:56,440 --> 00:09:01,750
skewed updates where you're gonna put

211
00:08:58,960 --> 00:09:04,900
your synchronization what converting is

212
00:09:01,750 --> 00:09:05,740
gonna be pounded so that's all those

213
00:09:04,900 --> 00:09:08,800
challenges you

214
00:09:05,740 --> 00:09:10,720
deal with and thence MDX is here to

215
00:09:08,800 --> 00:09:12,969
bridge the gap then it's a here to solve

216
00:09:10,720 --> 00:09:15,550
these problems right to solve the only

217
00:09:12,970 --> 00:09:17,380
or portion what is the active to solve

218
00:09:15,550 --> 00:09:19,689
this water imbalance to solve this

219
00:09:17,380 --> 00:09:21,189
synchronization well because we have

220
00:09:19,690 --> 00:09:27,040
limited time I can only focus on the

221
00:09:21,190 --> 00:09:29,200
first one assuming we have what is this

222
00:09:27,040 --> 00:09:31,770
en si being active let's see how we work

223
00:09:29,200 --> 00:09:35,020
on it we work on a neighbor of Yangtze

224
00:09:31,770 --> 00:09:37,180
which is assuming have mobile threats

225
00:09:35,020 --> 00:09:40,090
then definitely parallel is parallel

226
00:09:37,180 --> 00:09:43,689
processing VNC so we get working on B

227
00:09:40,090 --> 00:09:46,660
and F and which is a neighbor of C and B

228
00:09:43,690 --> 00:09:49,510
D F G H I is a neighbor of E and then we

229
00:09:46,660 --> 00:09:51,819
put neighbors together and then we work

230
00:09:49,510 --> 00:09:53,830
on the distance array and then we

231
00:09:51,820 --> 00:09:56,980
generally active least this is how

232
00:09:53,830 --> 00:10:00,100
related work work on it so we see first

233
00:09:56,980 --> 00:10:02,860
it has to use to multiply e number of

234
00:10:00,100 --> 00:10:05,230
space to add to cache this active

235
00:10:02,860 --> 00:10:07,480
neighbor list and also it has to go

236
00:10:05,230 --> 00:10:10,330
through scanning of the distance theory

237
00:10:07,480 --> 00:10:14,410
a cup of times in order to extract the

238
00:10:10,330 --> 00:10:17,470
next active list right and also the

239
00:10:14,410 --> 00:10:19,780
active what is this BF h i in the bottom

240
00:10:17,470 --> 00:10:21,340
is out of water it's not good for memory

241
00:10:19,780 --> 00:10:24,730
access pattern as we are in the system

242
00:10:21,340 --> 00:10:26,830
conference here you know that so to

243
00:10:24,730 --> 00:10:27,450
summarize we have a cup of water C's I'm

244
00:10:26,830 --> 00:10:30,250
sorry

245
00:10:27,450 --> 00:10:31,600
okay I mean it's easier for you to

246
00:10:30,250 --> 00:10:33,760
remember because that's where I

247
00:10:31,600 --> 00:10:35,350
summarized it so we have a cup of

248
00:10:33,760 --> 00:10:37,569
vertices and then we learn neighbors

249
00:10:35,350 --> 00:10:39,610
into a construct active neighbor list in

250
00:10:37,570 --> 00:10:41,800
in the left side and then we to federal

251
00:10:39,610 --> 00:10:46,780
neighbors and we get the active vertices

252
00:10:41,800 --> 00:10:49,240
those pink ones means or the brown ones

253
00:10:46,780 --> 00:10:52,600
means you have a problem over there so

254
00:10:49,240 --> 00:10:54,400
then we propose bullet filter where some

255
00:10:52,600 --> 00:10:56,950
people would have been using it for

256
00:10:54,400 --> 00:10:59,680
their own work how will work on that

257
00:10:56,950 --> 00:11:01,630
first we work on the Yenisei and then we

258
00:10:59,680 --> 00:11:05,319
simultaneously update the current

259
00:11:01,630 --> 00:11:07,510
distance array and afterwards we compare

260
00:11:05,320 --> 00:11:09,850
the previous previous distance agree on

261
00:11:07,510 --> 00:11:13,930
a current distance array usable 8

262
00:11:09,850 --> 00:11:18,190
primitive provided from GPU to generate

263
00:11:13,930 --> 00:11:19,579
an active list that's newer what the

264
00:11:18,190 --> 00:11:22,130
technical is pretty

265
00:11:19,580 --> 00:11:24,020
complicated I mean I just give you an

266
00:11:22,130 --> 00:11:25,820
impression if you have any for the

267
00:11:24,020 --> 00:11:28,130
questions definitely let's talk leader

268
00:11:25,820 --> 00:11:30,500
afterwards so I'm giving you some

269
00:11:28,130 --> 00:11:31,970
summarization first we only use a vase

270
00:11:30,500 --> 00:11:33,800
based because we do not have to

271
00:11:31,970 --> 00:11:36,860
construct the active neighbor list and

272
00:11:33,800 --> 00:11:39,890
second we use one further step in order

273
00:11:36,860 --> 00:11:44,030
to generate an new water active what X

274
00:11:39,890 --> 00:11:46,160
so what is this list to summarize is we

275
00:11:44,030 --> 00:11:48,620
do not have to construct an active

276
00:11:46,160 --> 00:11:50,540
neighbor list as before so we basically

277
00:11:48,620 --> 00:11:52,820
know the neighbor and directly go ahead

278
00:11:50,540 --> 00:11:53,810
up to the metadata and then you scan the

279
00:11:52,820 --> 00:11:57,230
matter that I in order to generate

280
00:11:53,810 --> 00:12:01,609
active what is this and what sort active

281
00:11:57,230 --> 00:12:05,120
vertices is in your water okay so that's

282
00:12:01,610 --> 00:12:06,980
that and we also figure out scanning

283
00:12:05,120 --> 00:12:08,300
this data array actually takes a lot of

284
00:12:06,980 --> 00:12:10,160
time right

285
00:12:08,300 --> 00:12:12,890
think about it has very few active

286
00:12:10,160 --> 00:12:14,449
vortices then we say okay when we just

287
00:12:12,890 --> 00:12:16,730
use our time efficient I know our target

288
00:12:14,450 --> 00:12:18,530
which is a lot of overhead everybody

289
00:12:16,730 --> 00:12:19,820
want to avoid it but if you have very

290
00:12:18,530 --> 00:12:22,939
few at home impression

291
00:12:19,820 --> 00:12:24,680
it sounds to us is it's good right so we

292
00:12:22,940 --> 00:12:26,300
were so give it a try and figure out its

293
00:12:24,680 --> 00:12:28,880
pretty good for this very few iterations

294
00:12:26,300 --> 00:12:32,060
in the initial and last generations of

295
00:12:28,880 --> 00:12:33,950
graph traversal so how it works assuming

296
00:12:32,060 --> 00:12:35,869
we're working on B and D which is very

297
00:12:33,950 --> 00:12:37,760
initial the second generation and then

298
00:12:35,870 --> 00:12:40,280
we'll work on this on neighbor list and

299
00:12:37,760 --> 00:12:42,410
we go ahead using a time operation to

300
00:12:40,280 --> 00:12:45,140
update the distance array and then we

301
00:12:42,410 --> 00:12:48,170
generate a negative active what is this

302
00:12:45,140 --> 00:12:52,010
least which is out of water so this is

303
00:12:48,170 --> 00:12:54,229
how summarize how it works so taken

304
00:12:52,010 --> 00:12:55,880
together batch theater is not good

305
00:12:54,230 --> 00:12:58,550
because it consumes a lot of memory and

306
00:12:55,880 --> 00:13:00,950
GPU has very few memories over there so

307
00:12:58,550 --> 00:13:03,140
we use ballad theater to make it better

308
00:13:00,950 --> 00:13:05,420
as well as consuming fewer man less

309
00:13:03,140 --> 00:13:08,180
memory and then we say okay some

310
00:13:05,420 --> 00:13:10,400
iterations may even suffer from scanning

311
00:13:08,180 --> 00:13:14,239
to general active viruses so we go ahead

312
00:13:10,400 --> 00:13:16,699
use a timer patient to do that so that's

313
00:13:14,240 --> 00:13:18,530
the first task management or only a

314
00:13:16,700 --> 00:13:20,180
portion of the vertices are active how

315
00:13:18,530 --> 00:13:22,430
we deal with that and the second thing

316
00:13:20,180 --> 00:13:24,199
is we think while programming on GPU is

317
00:13:22,430 --> 00:13:26,500
not straightforward so we go ahead

318
00:13:24,200 --> 00:13:30,050
figure out the most important things in

319
00:13:26,500 --> 00:13:31,490
GPU based graph computing and then we

320
00:13:30,050 --> 00:13:33,439
say okay you only have to define those

321
00:13:31,490 --> 00:13:36,889
API is basically the framing

322
00:13:33,440 --> 00:13:38,810
selling you know slide see how it works

323
00:13:36,889 --> 00:13:41,660
assuming you have this top other

324
00:13:38,810 --> 00:13:44,810
vortices where the you know tasks you

325
00:13:41,660 --> 00:13:46,699
have different tubes higher this ones

326
00:13:44,810 --> 00:13:49,609
has higher shadow music they have more

327
00:13:46,699 --> 00:13:51,469
workload this one's having an inactive

328
00:13:49,610 --> 00:13:53,509
vortex inside of it or were found

329
00:13:51,470 --> 00:13:55,310
instead of amines it's not active to

330
00:13:53,509 --> 00:13:58,750
mimic you have only portion what it is

331
00:13:55,310 --> 00:14:01,250
being active so first you go ahead

332
00:13:58,750 --> 00:14:03,199
filter out those active ones definitely

333
00:14:01,250 --> 00:14:05,600
and then you classify them into

334
00:14:03,199 --> 00:14:09,050
different groups like 0-3 is various a

335
00:14:05,600 --> 00:14:11,750
group with very small workload well one

336
00:14:09,050 --> 00:14:14,329
in five have a lot of them and then you

337
00:14:11,750 --> 00:14:16,850
do synchronization and then you map them

338
00:14:14,329 --> 00:14:18,589
onto different number of pores like you

339
00:14:16,850 --> 00:14:20,449
have a lot of workload then you go ahead

340
00:14:18,589 --> 00:14:22,819
and use a lot of course right you have a

341
00:14:20,449 --> 00:14:24,680
very few that you use very few course so

342
00:14:22,819 --> 00:14:27,800
that give you an impression no matter

343
00:14:24,680 --> 00:14:30,378
you are from a large a giant front here

344
00:14:27,800 --> 00:14:32,540
or a small active attacks it's easily

345
00:14:30,379 --> 00:14:34,610
similar because we're trying to make

346
00:14:32,540 --> 00:14:38,329
sure everybody take care of similar

347
00:14:34,610 --> 00:14:40,100
amount of workload so then we say okay

348
00:14:38,329 --> 00:14:42,680
the summarization is you only have to

349
00:14:40,100 --> 00:14:44,540
tell me which buttocks is active and how

350
00:14:42,680 --> 00:14:46,099
you want to compute on edge and then how

351
00:14:44,540 --> 00:14:48,170
you want to combine those edges together

352
00:14:46,100 --> 00:14:51,319
and what are general updates to the

353
00:14:48,170 --> 00:14:52,370
vertex right so this is the AC C

354
00:14:51,319 --> 00:14:54,910
programming Morrow

355
00:14:52,370 --> 00:14:57,740
how it how it you have those kind of

356
00:14:54,910 --> 00:14:59,839
essential component for you guys to

357
00:14:57,740 --> 00:15:03,079
simplified your programming and graph

358
00:14:59,839 --> 00:15:05,300
computing on GPU okay

359
00:15:03,079 --> 00:15:07,189
so taken together we evaluate simply

360
00:15:05,300 --> 00:15:11,359
acts on a couple of those data set

361
00:15:07,189 --> 00:15:13,750
starting from Facebook to Twitter those

362
00:15:11,360 --> 00:15:18,620
vertex can and edge panel over there

363
00:15:13,750 --> 00:15:21,290
so definitely sure you raise armies were

364
00:15:18,620 --> 00:15:23,269
pretty good right so we have X access

365
00:15:21,290 --> 00:15:26,149
are in a different graph data set from

366
00:15:23,269 --> 00:15:29,420
FB to Twitter and time are like mini

367
00:15:26,149 --> 00:15:32,180
second and we run the page rank iterate

368
00:15:29,420 --> 00:15:34,189
for like five iterations I believe so we

369
00:15:32,180 --> 00:15:36,859
say pretty good speed up over Garrick

370
00:15:34,189 --> 00:15:40,279
and galleries which are like very

371
00:15:36,860 --> 00:15:42,769
popular and also we run against Legrand

372
00:15:40,279 --> 00:15:44,839
others we didn't have including all of

373
00:15:42,769 --> 00:15:47,180
them but these two will assure you that

374
00:15:44,839 --> 00:15:48,890
it's pretty good performance

375
00:15:47,180 --> 00:15:51,589
we're assuming you can see the

376
00:15:48,890 --> 00:15:54,800
performance they're very good we also

377
00:15:51,590 --> 00:15:57,020
compare it against the BFS so we see

378
00:15:54,800 --> 00:15:59,180
that still x-axis different data set

379
00:15:57,020 --> 00:16:01,640
where axis is the time for traversal and

380
00:15:59,180 --> 00:16:03,770
get a valley in BFS we see that the

381
00:16:01,640 --> 00:16:06,860
speed up over a garage and a callus is

382
00:16:03,770 --> 00:16:10,910
still observable well you may also

383
00:16:06,860 --> 00:16:13,520
notice in some portion that like Rd

384
00:16:10,910 --> 00:16:16,069
which is a random graph you see that the

385
00:16:13,520 --> 00:16:18,380
performance is slightly worse

386
00:16:16,070 --> 00:16:20,300
comparing to Cowboys I mean not slowly

387
00:16:18,380 --> 00:16:23,270
it's definitely worse right let's not be

388
00:16:20,300 --> 00:16:25,370
shy about it so the reason is a very

389
00:16:23,270 --> 00:16:27,680
straightforward because our de is a

390
00:16:25,370 --> 00:16:30,590
graph that comes with uniform a degree

391
00:16:27,680 --> 00:16:33,020
distribution so that means you are what

392
00:16:30,590 --> 00:16:34,430
cloade you know task management to put

393
00:16:33,020 --> 00:16:36,260
this in this pocket this in that pocket

394
00:16:34,430 --> 00:16:37,729
and to schedule this kind of things

395
00:16:36,260 --> 00:16:41,420
those are useless because they are the

396
00:16:37,730 --> 00:16:44,150
same right so it's overhead there are

397
00:16:41,420 --> 00:16:47,240
more sort of technical contributions

398
00:16:44,150 --> 00:16:49,910
like synchronization and programming

399
00:16:47,240 --> 00:16:51,860
abstraction how we do that in github all

400
00:16:49,910 --> 00:16:53,870
of them you can be found that in github

401
00:16:51,860 --> 00:16:55,370
where it can be can reach out to me to

402
00:16:53,870 --> 00:17:04,540
figure out all those details

403
00:16:55,370 --> 00:17:04,540
thank you questions or comments

404
00:17:08,140 --> 00:17:14,620
I am Jiwon from Han University

405
00:17:11,920 --> 00:17:15,880
good talk there are many different kind

406
00:17:14,619 --> 00:17:18,309
of graph algorithms and many different

407
00:17:15,880 --> 00:17:20,740
variants for example data stepping

408
00:17:18,309 --> 00:17:23,049
algorithm for parallel shortest path

409
00:17:20,740 --> 00:17:24,640
computation and things like that so out

410
00:17:23,049 --> 00:17:27,010
of all those graph algorithms have you

411
00:17:24,640 --> 00:17:30,580
found any graph algorithm that your

412
00:17:27,010 --> 00:17:33,240
technique do not work well or can you

413
00:17:30,580 --> 00:17:37,449
think of any graph everything

414
00:17:33,240 --> 00:17:39,940
okay that's a very good question yeah we

415
00:17:37,450 --> 00:17:42,580
should not hide it right so basically

416
00:17:39,940 --> 00:17:46,210
you if you take look back the

417
00:17:42,580 --> 00:17:50,409
programming ask you to define the active

418
00:17:46,210 --> 00:17:53,830
vertex ask you to do you know computing

419
00:17:50,410 --> 00:17:56,110
and combine so these things only work on

420
00:17:53,830 --> 00:18:00,220
something that can fit in this sort of

421
00:17:56,110 --> 00:18:01,799
pattern if you go to some sort of graph

422
00:18:00,220 --> 00:18:06,640
based machine learning like a

423
00:18:01,799 --> 00:18:09,040
collaborative filtering or multi-layer

424
00:18:06,640 --> 00:18:11,350
perceptron those kind of things that

425
00:18:09,040 --> 00:18:16,659
does not need those kind of techniques

426
00:18:11,350 --> 00:18:19,629
may not work or the control flow is way

427
00:18:16,660 --> 00:18:21,730
beyond just active computer combined

428
00:18:19,630 --> 00:18:24,070
maybe it's active compute compute

429
00:18:21,730 --> 00:18:26,590
compute or something like that compute

430
00:18:24,070 --> 00:18:28,450
combine compute combine if you go beyond

431
00:18:26,590 --> 00:18:33,939
those kind of sequences it will not work

432
00:18:28,450 --> 00:18:35,860
thank you for your question I am under

433
00:18:33,940 --> 00:18:39,250
PhD student a good talk

434
00:18:35,860 --> 00:18:42,370
I was curious about your programming

435
00:18:39,250 --> 00:18:45,370
interface what do you think what's the

436
00:18:42,370 --> 00:18:48,219
difference between your interface with

437
00:18:45,370 --> 00:18:50,939
the previous graph processing framework

438
00:18:48,220 --> 00:18:54,760
because they also proposed some

439
00:18:50,940 --> 00:18:58,510
programming interface okay it's also a

440
00:18:54,760 --> 00:19:01,419
good question so um yeah because I think

441
00:18:58,510 --> 00:19:03,490
you're coming from the the bag one that

442
00:19:01,419 --> 00:19:06,580
there's so many programming interface

443
00:19:03,490 --> 00:19:10,000
right yeah what eccentric eccentric gas

444
00:19:06,580 --> 00:19:13,659
G or whatever right you can see all of

445
00:19:10,000 --> 00:19:16,290
those kind of things so here I think I

446
00:19:13,660 --> 00:19:19,450
can depreciate it from maybe two ways so

447
00:19:16,290 --> 00:19:21,379
first this is the programming model for

448
00:19:19,450 --> 00:19:23,840
grab concluding on GPU

449
00:19:21,380 --> 00:19:25,850
so when you put it on GPU it means it

450
00:19:23,840 --> 00:19:28,010
automatically means that you have to

451
00:19:25,850 --> 00:19:30,199
deal with those hierarchies of memory

452
00:19:28,010 --> 00:19:33,410
hierarchies of threats like a wall per

453
00:19:30,200 --> 00:19:35,929
CD a were block then here we are trying

454
00:19:33,410 --> 00:19:38,630
to really had those come come come

455
00:19:35,929 --> 00:19:42,620
those programming complexity originated

456
00:19:38,630 --> 00:19:45,289
from the hierarchy of RAM and management

457
00:19:42,620 --> 00:19:47,178
and a memory management so that's

458
00:19:45,289 --> 00:19:49,789
something that what eccentric or

459
00:19:47,179 --> 00:19:51,559
eccentric or gasps those things which

460
00:19:49,789 --> 00:19:55,760
are designed for either external memory

461
00:19:51,559 --> 00:19:58,520
or CPU based things which they cannot

462
00:19:55,760 --> 00:20:00,980
cover and the second thing is what so

463
00:19:58,520 --> 00:20:04,490
based upon GPU is that we were so taking

464
00:20:00,980 --> 00:20:06,620
care of the performance so say we do

465
00:20:04,490 --> 00:20:09,950
computing on edge and combine off of

466
00:20:06,620 --> 00:20:12,289
vortex it means we actually try to use

467
00:20:09,950 --> 00:20:15,620
some buffers to combine those updates

468
00:20:12,289 --> 00:20:18,260
with that autonomy operation so um I

469
00:20:15,620 --> 00:20:21,379
think this added to uniqueness I would

470
00:20:18,260 --> 00:20:24,470
identify no thanks thank you a brief

471
00:20:21,380 --> 00:20:28,640
question yes thank you for a really

472
00:20:24,470 --> 00:20:30,559
really good talk in your examples you've

473
00:20:28,640 --> 00:20:34,120
always probably because it's a simple

474
00:20:30,559 --> 00:20:36,379
example you've always used the edge

475
00:20:34,120 --> 00:20:39,918
attribute was just a single number and

476
00:20:36,380 --> 00:20:41,450
the distances is just a single number if

477
00:20:39,919 --> 00:20:43,250
I have some machine learning workloads

478
00:20:41,450 --> 00:20:45,730
where I have a vector at each ad or a

479
00:20:43,250 --> 00:20:48,200
vector D each node can I still use this

480
00:20:45,730 --> 00:20:49,820
okay I'm working on that right now so

481
00:20:48,200 --> 00:20:52,880
it's a very good question right so I

482
00:20:49,820 --> 00:20:55,730
think which neural graph going to talk a

483
00:20:52,880 --> 00:20:59,390
little bit about it right so um yes

484
00:20:55,730 --> 00:21:03,320
because we're goes to high dimension of

485
00:20:59,390 --> 00:21:06,049
what X attribute then there's single

486
00:21:03,320 --> 00:21:10,908
entry distance array will not work right

487
00:21:06,049 --> 00:21:11,389
so um this one cannot work may be pretty

488
00:21:10,909 --> 00:21:15,620
straightforward

489
00:21:11,390 --> 00:21:17,600
I think yeah I mean you're gonna have to

490
00:21:15,620 --> 00:21:19,428
deal with the high dimension complexity

491
00:21:17,600 --> 00:21:21,049
because some of them may be a lot of a

492
00:21:19,429 --> 00:21:24,590
zero portions some of them would be very

493
00:21:21,049 --> 00:21:26,270
few persons so we were so working on

494
00:21:24,590 --> 00:21:28,250
that I have some work in progress I

495
00:21:26,270 --> 00:21:30,660
think we can take it offline yeah thank

496
00:21:28,250 --> 00:21:35,130
you very good time thank you

497
00:21:30,660 --> 00:21:35,130
let's thank the speaker again great talk

