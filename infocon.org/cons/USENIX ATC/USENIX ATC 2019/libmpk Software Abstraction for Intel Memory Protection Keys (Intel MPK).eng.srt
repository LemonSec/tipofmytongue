1
00:00:10,340 --> 00:00:15,210
hello everyone thank you for coming my

2
00:00:13,020 --> 00:00:18,990
talk I am Sam puck from Georgia Tech and

3
00:00:15,210 --> 00:00:21,750
today I am going to talk about our work

4
00:00:18,990 --> 00:00:26,098
leaving PK a software abstraction for

5
00:00:21,750 --> 00:00:28,590
Intel memory protection key first of all

6
00:00:26,099 --> 00:00:29,760
I want to emphasize some memory space

7
00:00:28,590 --> 00:00:34,620
need protection

8
00:00:29,760 --> 00:00:38,190
first writable and executable J page is

9
00:00:34,620 --> 00:00:40,860
one of the common target to achieve a

10
00:00:38,190 --> 00:00:46,440
remote code execution in JavaScript

11
00:00:40,860 --> 00:00:48,239
engine so for example one pontil winner

12
00:00:46,440 --> 00:00:50,670
explained that they achieved code

13
00:00:48,239 --> 00:00:55,290
execution by locating their share code

14
00:00:50,670 --> 00:00:57,540
into the read pages and second the

15
00:00:55,290 --> 00:01:01,339
personal information such as password

16
00:00:57,540 --> 00:01:04,530
and private key is also common target to

17
00:01:01,339 --> 00:01:07,380
be to attacked and should be protected

18
00:01:04,530 --> 00:01:09,600
for example the CloudFlare challenges

19
00:01:07,380 --> 00:01:11,729
show that the private key in the cloud

20
00:01:09,600 --> 00:01:16,080
service can be easily licked by

21
00:01:11,729 --> 00:01:19,260
heartbleed attack so let me first

22
00:01:16,080 --> 00:01:22,289
explain what is heartbleed attack in the

23
00:01:19,260 --> 00:01:24,480
figure the p9 users and his private key

24
00:01:22,290 --> 00:01:26,670
to the web server and the web servers

25
00:01:24,480 --> 00:01:29,280
and his private key to the attacker

26
00:01:26,670 --> 00:01:31,800
because of the heartbleed attack for

27
00:01:29,280 --> 00:01:35,760
example the attacker recast the web

28
00:01:31,800 --> 00:01:41,490
server reply hello at 1,000 bytes then

29
00:01:35,760 --> 00:01:43,050
the web server will send father 990 95

30
00:01:41,490 --> 00:01:45,570
bytes more because the hello is only

31
00:01:43,050 --> 00:01:49,950
five bytes and it will leak the private

32
00:01:45,570 --> 00:01:52,800
key in the following memory space to

33
00:01:49,950 --> 00:01:56,190
prevent this kind of attack one existing

34
00:01:52,800 --> 00:01:59,250
solution is process separation assuming

35
00:01:56,190 --> 00:02:03,120
this process is web server it will make

36
00:01:59,250 --> 00:02:06,210
new process for every incoming new

37
00:02:03,120 --> 00:02:08,459
client request then the users private

38
00:02:06,210 --> 00:02:12,209
key will be located in the memory of the

39
00:02:08,459 --> 00:02:15,510
separated process so in this case if the

40
00:02:12,209 --> 00:02:19,579
main process has bug it cannot assess

41
00:02:15,510 --> 00:02:22,138
the private key in the separated process

42
00:02:19,579 --> 00:02:24,010
another existing solution to protect

43
00:02:22,139 --> 00:02:27,310
memory is

44
00:02:24,010 --> 00:02:31,179
zip page protection to protect dick page

45
00:02:27,310 --> 00:02:33,819
from malicious code injection attack for

46
00:02:31,180 --> 00:02:35,860
example if once read write code into the

47
00:02:33,819 --> 00:02:38,679
code cache and it will execute it

48
00:02:35,860 --> 00:02:41,620
however in the meanwhile if another

49
00:02:38,680 --> 00:02:43,480
thread can write code into the code

50
00:02:41,620 --> 00:02:48,220
cache it can read arbitrary code

51
00:02:43,480 --> 00:02:50,649
execution so to make the W X for X

52
00:02:48,220 --> 00:02:52,810
protection easily let's assume we have

53
00:02:50,650 --> 00:02:55,360
one red thread which only allowed to

54
00:02:52,810 --> 00:02:58,319
write coding to the code cache therefore

55
00:02:55,360 --> 00:03:03,480
it must use and protect to change the

56
00:02:58,319 --> 00:03:05,530
permission of the code cache however the

57
00:03:03,480 --> 00:03:08,260
introduces solution has several

58
00:03:05,530 --> 00:03:11,290
drawbacks first the process separation

59
00:03:08,260 --> 00:03:13,629
can generate high overhead to make new

60
00:03:11,290 --> 00:03:17,230
process and synchronize data among the

61
00:03:13,629 --> 00:03:19,629
process and second the WX forex

62
00:03:17,230 --> 00:03:21,790
protection can generate multiple Oba had

63
00:03:19,629 --> 00:03:24,879
to change permission over multiple

64
00:03:21,790 --> 00:03:26,379
sparse pages also it can lead race

65
00:03:24,879 --> 00:03:28,239
condition attack because of the

66
00:03:26,379 --> 00:03:31,470
permission synchronization from and

67
00:03:28,239 --> 00:03:33,940
protect so in this talk we utilize

68
00:03:31,470 --> 00:03:35,650
hardware mechanism into memory

69
00:03:33,940 --> 00:03:39,870
protection key to address these

70
00:03:35,650 --> 00:03:43,150
challenges so this is the outline and

71
00:03:39,870 --> 00:03:44,859
before I explain our work let me first

72
00:03:43,150 --> 00:03:49,419
explain what is the Intel memory

73
00:03:44,859 --> 00:03:52,030
protection key memory protection key is

74
00:03:49,419 --> 00:03:54,370
a hardware feature to support fast for

75
00:03:52,030 --> 00:03:57,069
me to change for page groups with single

76
00:03:54,370 --> 00:04:01,389
instruction brutally it provides fast

77
00:03:57,069 --> 00:04:03,488
single invocation for example the end

78
00:04:01,389 --> 00:04:05,620
product is a system call which means it

79
00:04:03,489 --> 00:04:08,079
needs transition between user space and

80
00:04:05,620 --> 00:04:09,940
counter space because and protector need

81
00:04:08,079 --> 00:04:15,340
to change the page table in the corner

82
00:04:09,940 --> 00:04:17,680
space however internally change

83
00:04:15,340 --> 00:04:20,709
permission with a single instruction in

84
00:04:17,680 --> 00:04:23,020
user space also it provides fast

85
00:04:20,709 --> 00:04:25,780
permission change for multiple pages in

86
00:04:23,020 --> 00:04:28,359
this graph you can check the latency of

87
00:04:25,780 --> 00:04:31,659
and protect with contiguous memory and

88
00:04:28,360 --> 00:04:33,820
spurs memory all increase linearly when

89
00:04:31,660 --> 00:04:37,090
they change the permission of memorable

90
00:04:33,820 --> 00:04:41,320
pages however Intel and PK on this

91
00:04:37,090 --> 00:04:47,289
and single constant latency to change a

92
00:04:41,320 --> 00:04:50,260
set of pages so this is the detailed

93
00:04:47,290 --> 00:04:52,540
implementation and broadly speaking all

94
00:04:50,260 --> 00:04:55,570
Intel memory protection case consisted

95
00:04:52,540 --> 00:04:59,110
of three components first the protection

96
00:04:55,570 --> 00:05:00,790
key filled in the page table and P

97
00:04:59,110 --> 00:05:02,729
carrier register which stored the

98
00:05:00,790 --> 00:05:05,530
permission for page groups and

99
00:05:02,729 --> 00:05:07,630
instruction set such as write peak area

100
00:05:05,530 --> 00:05:11,138
and really care you to assess the peak

101
00:05:07,630 --> 00:05:13,389
area register each CPU has its own

102
00:05:11,139 --> 00:05:16,690
peek-a-ru register and the permission is

103
00:05:13,389 --> 00:05:20,320
maintained per thread also the peek-a-ru

104
00:05:16,690 --> 00:05:22,990
register can represent only 16 kids

105
00:05:20,320 --> 00:05:26,800
because the one key needs to be to

106
00:05:22,990 --> 00:05:29,229
indicate write and read permission so

107
00:05:26,800 --> 00:05:32,310
this is one example how to use NPK for a

108
00:05:29,229 --> 00:05:36,039
real relationship legit page protection

109
00:05:32,310 --> 00:05:39,820
so first we allocate one protection key

110
00:05:36,039 --> 00:05:42,729
with picky a lock function and assign it

111
00:05:39,820 --> 00:05:45,310
to the code cache by an applique and

112
00:05:42,729 --> 00:05:47,440
protect function and then we can change

113
00:05:45,310 --> 00:05:50,310
the permission of the code cache through

114
00:05:47,440 --> 00:05:53,590
the write P carrier instruction and

115
00:05:50,310 --> 00:05:56,050
finally after change code cache we can

116
00:05:53,590 --> 00:06:00,310
free the protection case through the P

117
00:05:56,050 --> 00:06:03,070
key free function one interesting

118
00:06:00,310 --> 00:06:05,169
feature of mpk is that is support

119
00:06:03,070 --> 00:06:07,900
executable new memory on the hardware

120
00:06:05,169 --> 00:06:10,510
level so for example if you want to make

121
00:06:07,900 --> 00:06:12,340
the cheat code cache as executable need

122
00:06:10,510 --> 00:06:16,750
to prevent some kinds of code reuse

123
00:06:12,340 --> 00:06:19,929
attack such as did ROP you know you can

124
00:06:16,750 --> 00:06:25,630
simply make it to rebook the every

125
00:06:19,930 --> 00:06:28,150
permission of mpk so to utilize mpk for

126
00:06:25,630 --> 00:06:31,090
our purpose first memory isolation and

127
00:06:28,150 --> 00:06:33,190
protection we should address these two

128
00:06:31,090 --> 00:06:35,109
challenges non-scalable hardware

129
00:06:33,190 --> 00:06:39,880
resource and a synchronous permission

130
00:06:35,110 --> 00:06:41,979
change so first challenge is non

131
00:06:39,880 --> 00:06:44,139
callable hardware resource which to the

132
00:06:41,979 --> 00:06:48,360
net naturally happen because of hardware

133
00:06:44,139 --> 00:06:50,129
limitation so 4mpk intel provides

134
00:06:48,360 --> 00:06:53,339
32-bit speaker

135
00:06:50,129 --> 00:06:56,689
sister which only support 16 protection

136
00:06:53,339 --> 00:06:59,699
key for example if you assign a

137
00:06:56,689 --> 00:07:01,709
protection key for each code cache the

138
00:06:59,699 --> 00:07:05,849
16 code cache already makes the

139
00:07:01,709 --> 00:07:08,069
peek-a-ru register exhausted and another

140
00:07:05,849 --> 00:07:10,319
challenge to utilize mpk is a

141
00:07:08,069 --> 00:07:12,869
synchronous permission change because

142
00:07:10,319 --> 00:07:16,379
the permission changes and PK is read

143
00:07:12,869 --> 00:07:18,599
Locker naturally in fact this can be one

144
00:07:16,379 --> 00:07:23,129
advantage first on situation like this

145
00:07:18,599 --> 00:07:25,740
example in the jig protection model

146
00:07:23,129 --> 00:07:28,469
because we want the only railroad can

147
00:07:25,740 --> 00:07:31,259
grant permission to write the code cache

148
00:07:28,469 --> 00:07:34,229
so if we use NPK for a change in

149
00:07:31,259 --> 00:07:36,749
permission the other black thread cannot

150
00:07:34,229 --> 00:07:38,909
write the code cache in the meanwhile

151
00:07:36,749 --> 00:07:42,949
because the permission of the code cache

152
00:07:38,909 --> 00:07:45,929
is not change it further blacks read

153
00:07:42,949 --> 00:07:47,279
however in another situation we might

154
00:07:45,929 --> 00:07:50,669
want the permission should be

155
00:07:47,279 --> 00:07:53,639
synchronized for example after the code

156
00:07:50,669 --> 00:07:56,128
cache is modified the red thread want to

157
00:07:53,639 --> 00:08:00,539
change the permission as executable need

158
00:07:56,129 --> 00:08:03,419
to prevent code reuse attack however if

159
00:08:00,539 --> 00:08:05,039
the revs values NPK it doesn't affect to

160
00:08:03,419 --> 00:08:09,599
the other black thread because of the

161
00:08:05,039 --> 00:08:10,610
threadlocker nature so to address these

162
00:08:09,599 --> 00:08:13,349
two challenges

163
00:08:10,610 --> 00:08:16,439
non-scalable hardware resource and a

164
00:08:13,349 --> 00:08:18,628
synchronous permission change lib mpk

165
00:08:16,439 --> 00:08:21,179
provide key virtualization by Keane

166
00:08:18,629 --> 00:08:24,329
direction and permission synchronization

167
00:08:21,179 --> 00:08:26,568
API so let me explain the details in

168
00:08:24,329 --> 00:08:29,729
following slide

169
00:08:26,569 --> 00:08:32,610
so the key virtualization decompose

170
00:08:29,729 --> 00:08:36,328
physical keys from user interface you

171
00:08:32,610 --> 00:08:38,789
can imagine it works like a cache so for

172
00:08:36,328 --> 00:08:40,828
example if you need more than 16

173
00:08:38,789 --> 00:08:43,380
protection key the physical protection

174
00:08:40,828 --> 00:08:46,859
key cannot be allocated more because of

175
00:08:43,380 --> 00:08:49,980
the hardware limitation however in our

176
00:08:46,860 --> 00:08:52,980
library we provide virtual key so if we

177
00:08:49,980 --> 00:08:57,389
if more than 16 protection key is

178
00:08:52,980 --> 00:08:59,189
necessary then the PG card key will one

179
00:08:57,389 --> 00:09:00,890
pitch car key will be evicted and

180
00:08:59,189 --> 00:09:06,050
reassigned for

181
00:09:00,890 --> 00:09:08,240
the burger key in the library and this

182
00:09:06,050 --> 00:09:11,689
is the algorithm under permission

183
00:09:08,240 --> 00:09:14,750
synchronization API so first if we call

184
00:09:11,690 --> 00:09:17,900
the MP cam protect which is permission

185
00:09:14,750 --> 00:09:20,290
synchronization API it will call picky

186
00:09:17,900 --> 00:09:24,439
sink system call which is added by us

187
00:09:20,290 --> 00:09:26,420
then the P key sync function at hook for

188
00:09:24,440 --> 00:09:30,170
two updates the peak area of other

189
00:09:26,420 --> 00:09:32,719
thread and its tenth interrupt to key

190
00:09:30,170 --> 00:09:36,530
called other thread and it will return

191
00:09:32,720 --> 00:09:39,650
to the user space so finally when those

192
00:09:36,530 --> 00:09:42,020
thread is reschedule the PGI register

193
00:09:39,650 --> 00:09:47,329
will be updated and permission will be

194
00:09:42,020 --> 00:09:49,880
distinct arise ravenica is mostly

195
00:09:47,330 --> 00:09:51,020
written in c and c++ and we slightly

196
00:09:49,880 --> 00:09:53,570
modify connor

197
00:09:51,020 --> 00:09:56,630
to provide permission synchronization

198
00:09:53,570 --> 00:10:01,670
api and managing metadata so you can

199
00:09:56,630 --> 00:10:03,980
find our source code in this rapid 3 and

200
00:10:01,670 --> 00:10:06,860
here is the use case of Leoben we

201
00:10:03,980 --> 00:10:09,350
converted page protection so in the

202
00:10:06,860 --> 00:10:12,050
example Leoben became a function

203
00:10:09,350 --> 00:10:15,170
allocate cold cash and it will return

204
00:10:12,050 --> 00:10:17,150
virtual key further code cache and after

205
00:10:15,170 --> 00:10:20,360
that we can change the permission of the

206
00:10:17,150 --> 00:10:22,400
code cache with double jerky through the

207
00:10:20,360 --> 00:10:25,810
living ek begin and leave a mccain

208
00:10:22,400 --> 00:10:29,449
function it is threadlocker way and

209
00:10:25,810 --> 00:10:34,489
first incrementation we also provide 11

210
00:10:29,450 --> 00:10:37,460
PK and protect function so in evaluation

211
00:10:34,490 --> 00:10:41,840
we mainly focus on showing a three

212
00:10:37,460 --> 00:10:45,020
aspect the users usability and oppa has

213
00:10:41,840 --> 00:10:47,270
generated by 11 PK design and each case

214
00:10:45,020 --> 00:10:53,840
to protect memory reason on the real

215
00:10:47,270 --> 00:10:56,329
world application so we applied live and

216
00:10:53,840 --> 00:10:59,660
BK to these three application to protect

217
00:10:56,330 --> 00:11:02,600
different type of memory so for open ssl

218
00:10:59,660 --> 00:11:05,990
we only change 83 lines of code to

219
00:11:02,600 --> 00:11:09,980
protect private key and for memcache it

220
00:11:05,990 --> 00:11:12,730
we modify one once 101 7 lines of code

221
00:11:09,980 --> 00:11:16,990
to protect in memory

222
00:11:12,730 --> 00:11:19,449
- data and for one of the JavaScript

223
00:11:16,990 --> 00:11:22,540
engine chakra core we only need to

224
00:11:19,449 --> 00:11:26,469
modify 10 lines of code because chakra

225
00:11:22,540 --> 00:11:30,399
reason only provide W X or X protection

226
00:11:26,470 --> 00:11:32,620
with and protect based resolution so

227
00:11:30,399 --> 00:11:37,839
also he's asked to change it at this and

228
00:11:32,620 --> 00:11:39,760
protect to our library API o tilde

229
00:11:37,839 --> 00:11:41,860
overhead from Livan pick a design we

230
00:11:39,760 --> 00:11:44,949
first measured how much of a is

231
00:11:41,860 --> 00:11:46,899
introduced by the key virtualization so

232
00:11:44,949 --> 00:11:49,709
in the graph we can see the performance

233
00:11:46,899 --> 00:11:52,000
vary depending on the hit rate which is

234
00:11:49,709 --> 00:11:54,790
determined by the permission change

235
00:11:52,000 --> 00:11:57,130
pattern and however accepts the case

236
00:11:54,790 --> 00:11:59,829
every time it missed because the

237
00:11:57,130 --> 00:12:01,540
Olimpica generates reasonable beheld and

238
00:11:59,829 --> 00:12:06,189
protect while providing similar

239
00:12:01,540 --> 00:12:08,349
functionality also we evaluated the

240
00:12:06,190 --> 00:12:11,110
latency came from permission

241
00:12:08,350 --> 00:12:13,480
synchronization so with one sudden pages

242
00:12:11,110 --> 00:12:15,250
even pick a permission synchronization

243
00:12:13,480 --> 00:12:18,100
is better than and protects all three

244
00:12:15,250 --> 00:12:20,920
point eight times more also a single

245
00:12:18,100 --> 00:12:23,440
page is still defeat and protect one

246
00:12:20,920 --> 00:12:25,990
point seven times more so from the

247
00:12:23,440 --> 00:12:27,970
research we can see leave and be careful

248
00:12:25,990 --> 00:12:32,350
phone and protect regardless of the

249
00:12:27,970 --> 00:12:34,480
number of pages and to show the benefit

250
00:12:32,350 --> 00:12:37,660
of eleven PK as memory protection

251
00:12:34,480 --> 00:12:40,660
missile we apply it to the open SSL and

252
00:12:37,660 --> 00:12:42,939
memcache to protect private key and in

253
00:12:40,660 --> 00:12:45,880
memory cache a the data which is more

254
00:12:42,940 --> 00:12:48,100
than one gigabyte so for both case we

255
00:12:45,880 --> 00:12:50,860
observe a negligible of ahead for

256
00:12:48,100 --> 00:12:53,050
protection and also is showed that the

257
00:12:50,860 --> 00:12:55,209
performance of our synchronization API

258
00:12:53,050 --> 00:13:00,279
can defeat and protect eight times more

259
00:12:55,209 --> 00:13:02,800
in this case we also apply the implicit

260
00:13:00,279 --> 00:13:05,769
to protect audit page which originally

261
00:13:02,800 --> 00:13:08,319
has unprotected maced protection however

262
00:13:05,769 --> 00:13:10,360
the protect based protection can make

263
00:13:08,319 --> 00:13:13,360
more overhead and a load the race

264
00:13:10,360 --> 00:13:15,779
condition attack so on the other hand

265
00:13:13,360 --> 00:13:19,300
our solution improved the performance

266
00:13:15,779 --> 00:13:21,310
30% more at most and prevent race

267
00:13:19,300 --> 00:13:24,050
condition attack based on the thread

268
00:13:21,310 --> 00:13:28,649
lock our nature

269
00:13:24,050 --> 00:13:31,079
so as the mpk is only implica is also

270
00:13:28,649 --> 00:13:34,019
affected by the meltdown attack so our

271
00:13:31,079 --> 00:13:36,329
library also can have same problem but

272
00:13:34,019 --> 00:13:39,149
we believe that this can be solved by

273
00:13:36,329 --> 00:13:41,910
hardware or software mitigation for

274
00:13:39,149 --> 00:13:44,220
original meltdown attack and also

275
00:13:41,910 --> 00:13:47,069
arbitrary executed alright Peak area

276
00:13:44,220 --> 00:13:47,700
instruction can break the security so

277
00:13:47,070 --> 00:13:50,760
applying

278
00:13:47,700 --> 00:13:53,149
sandboxing or control flow integrity can

279
00:13:50,760 --> 00:13:55,470
help to mitigate this problem and

280
00:13:53,149 --> 00:13:57,990
finally the current corner

281
00:13:55,470 --> 00:14:00,660
implementation for NPK can suffer key

282
00:13:57,990 --> 00:14:02,579
use after free ship because the P key

283
00:14:00,660 --> 00:14:06,569
free function does not perfectly clean

284
00:14:02,579 --> 00:14:09,089
the protection key on the page table

285
00:14:06,570 --> 00:14:11,430
entry so which makes the page e are

286
00:14:09,089 --> 00:14:15,990
still associate with the protection key

287
00:14:11,430 --> 00:14:18,930
after free in the course of our research

288
00:14:15,990 --> 00:14:22,140
we have found the several mpk related

289
00:14:18,930 --> 00:14:24,750
researcher perform simultaneously so the

290
00:14:22,140 --> 00:14:27,180
aryan provide secure wrapper of NPK by

291
00:14:24,750 --> 00:14:31,380
binary inspection and rewriting unsafe

292
00:14:27,180 --> 00:14:33,689
right p carry and borrow integrates

293
00:14:31,380 --> 00:14:37,350
implicit to shadow spec for less

294
00:14:33,690 --> 00:14:39,720
overhead and excellence which provide a

295
00:14:37,350 --> 00:14:43,170
coleridge attack prevention with the

296
00:14:39,720 --> 00:14:46,769
execute only memory feature supported by

297
00:14:43,170 --> 00:14:49,680
NPK so I want to claim our work is also

298
00:14:46,769 --> 00:14:52,620
goner to this work because they are one

299
00:14:49,680 --> 00:14:55,640
application of NPK so they can get

300
00:14:52,620 --> 00:14:58,829
benefit from our work

301
00:14:55,640 --> 00:15:00,810
to sum up with a big case I'll secure

302
00:14:58,829 --> 00:15:03,689
scalable and synchronize above

303
00:15:00,810 --> 00:15:05,969
obstruction of NPK to support fast

304
00:15:03,690 --> 00:15:08,610
memory protection and isolation with

305
00:15:05,970 --> 00:15:10,760
leader programmers effort thank you for

306
00:15:08,610 --> 00:15:10,760
listening

307
00:15:14,000 --> 00:15:19,740
[Applause]

308
00:15:17,240 --> 00:15:23,340
high-spirited revani University of

309
00:15:19,740 --> 00:15:24,960
Rochester I think the final claim that

310
00:15:23,340 --> 00:15:30,510
you're making that leap indicates a

311
00:15:24,960 --> 00:15:32,670
secure abstraction of MBA is too strong

312
00:15:30,510 --> 00:15:35,220
because you really don't protect the use

313
00:15:32,670 --> 00:15:38,150
of the WRP care you instruction right

314
00:15:35,220 --> 00:15:40,530
it's a user space accessible register

315
00:15:38,150 --> 00:15:42,390
anybody can just execute that

316
00:15:40,530 --> 00:15:46,199
instruction to change the protection

317
00:15:42,390 --> 00:15:48,330
keys it's not just a small or we didn't

318
00:15:46,200 --> 00:15:54,660
implemented it's fundamental to using

319
00:15:48,330 --> 00:15:58,470
mpk yeah and we claim it's a sticker

320
00:15:54,660 --> 00:16:00,150
because in the discussion we explained

321
00:15:58,470 --> 00:16:04,470
the protection key use after free and

322
00:16:00,150 --> 00:16:06,870
because our design can prevent this walk

323
00:16:04,470 --> 00:16:08,610
so your design can prevent the code

324
00:16:06,870 --> 00:16:12,030
reuse attack you're saying yeah because

325
00:16:08,610 --> 00:16:13,950
our design of the cup of the protection

326
00:16:12,030 --> 00:16:17,550
kit from user interface so it don't need

327
00:16:13,950 --> 00:16:20,520
to cope free by I can just execute the

328
00:16:17,550 --> 00:16:25,170
WRP care you instruction I mean your

329
00:16:20,520 --> 00:16:27,360
your the scenery lays work I so yes the

330
00:16:25,170 --> 00:16:29,160
tester is in discussion I said we should

331
00:16:27,360 --> 00:16:32,100
apply and stay in the box or CFI to

332
00:16:29,160 --> 00:16:33,930
prevent the auto priori carrier thing

333
00:16:32,100 --> 00:16:41,400
that would have a lot of overhead which

334
00:16:33,930 --> 00:16:42,599
we don't include also in yes thanks in a

335
00:16:41,400 --> 00:16:44,310
Cornbelt Simpson University of

336
00:16:42,600 --> 00:16:47,520
Washington really cool work I'm

337
00:16:44,310 --> 00:16:50,729
wondering one quick question and maybe

338
00:16:47,520 --> 00:16:53,310
one more complicated question why well

339
00:16:50,730 --> 00:16:56,970
do you know why they only put in 16 keys

340
00:16:53,310 --> 00:17:00,810
like some sometimes more threads than 16

341
00:16:56,970 --> 00:17:03,360
or running at the same time and then the

342
00:17:00,810 --> 00:17:07,349
second question is can you give some

343
00:17:03,360 --> 00:17:11,010
intuition about why it's so hard to do

344
00:17:07,349 --> 00:17:12,750
the free properly like why why they

345
00:17:11,010 --> 00:17:15,569
didn't actually clean it up properly oh

346
00:17:12,750 --> 00:17:16,380
oh sorry what is your first question

347
00:17:15,569 --> 00:17:20,819
I did

348
00:17:16,380 --> 00:17:26,100
clearly understood you know why they

349
00:17:20,819 --> 00:17:28,500
made only 16 of these keys like ah you

350
00:17:26,099 --> 00:17:30,570
meaning why yeah why why intel only

351
00:17:28,500 --> 00:17:33,150
makes 16 because they make things with

352
00:17:30,570 --> 00:17:36,689
more than 16 threads yeah because I'm

353
00:17:33,150 --> 00:17:39,960
not in telling police oh I don't know

354
00:17:36,690 --> 00:17:43,200
exactly whether I guess because maybe

355
00:17:39,960 --> 00:17:46,250
adding one register is not a bit

356
00:17:43,200 --> 00:17:49,590
expensive and also because I know they

357
00:17:46,250 --> 00:17:51,870
the FIR and PK day is unused at the bit

358
00:17:49,590 --> 00:17:55,230
in the page table entry and I think it

359
00:17:51,870 --> 00:17:57,809
may be the fella totally more than 16

360
00:17:55,230 --> 00:18:02,789
but cannot expand more and for a second

361
00:17:57,809 --> 00:18:04,740
question in fact I saw the corner

362
00:18:02,789 --> 00:18:08,490
developer make comments in the peaky

363
00:18:04,740 --> 00:18:10,919
free function and they said the its it

364
00:18:08,490 --> 00:18:14,100
does not clean the associated metadata

365
00:18:10,919 --> 00:18:16,799
but I so I think they know the problem

366
00:18:14,100 --> 00:18:18,199
but because as you know if you want to

367
00:18:16,799 --> 00:18:22,260
clean them at the data you should

368
00:18:18,200 --> 00:18:29,340
enumerate every page table so yeah I

369
00:18:22,260 --> 00:18:32,960
think they may afraid it overhead yes we

370
00:18:29,340 --> 00:18:35,340
could talk I have a question and it is

371
00:18:32,960 --> 00:18:38,010
did you use any app did you find that

372
00:18:35,340 --> 00:18:40,530
applications are using more than 60 16

373
00:18:38,010 --> 00:18:44,129
domains so you need more than 16 keys

374
00:18:40,530 --> 00:18:48,918
and what's the overhead opened when you

375
00:18:44,130 --> 00:18:48,919
go beyond 16 keys and how that increases

376
00:18:50,419 --> 00:18:56,250
in fact I didn't put in my slide so

377
00:18:53,700 --> 00:18:59,159
because I'm afraid it's over 16 minutes

378
00:18:56,250 --> 00:19:06,000
but oh you can check him on my paper at

379
00:18:59,159 --> 00:19:10,919
the we apply the key for when we apply

380
00:19:06,000 --> 00:19:13,140
key for the jpg for JavaScript and we

381
00:19:10,919 --> 00:19:15,270
also because we also want to see the

382
00:19:13,140 --> 00:19:19,789
overhead from if we want if we use up

383
00:19:15,270 --> 00:19:23,059
more than 16 key what happens so I so we

384
00:19:19,789 --> 00:19:23,059
locate the

385
00:19:23,160 --> 00:19:29,290
protection protection keeper did paces

386
00:19:26,500 --> 00:19:32,680
then in must have would like more than

387
00:19:29,290 --> 00:19:35,440
10k protection key in the case in the

388
00:19:32,680 --> 00:19:38,620
overhead is we observed the overhead it

389
00:19:35,440 --> 00:19:42,240
depends on the memory permission change

390
00:19:38,620 --> 00:19:45,370
a patent and fortunately because the

391
00:19:42,240 --> 00:19:48,940
JavaScript engine change the one pages

392
00:19:45,370 --> 00:19:51,010
permission of Perry frequently and they

393
00:19:48,940 --> 00:19:54,520
don't like it they don't mix the

394
00:19:51,010 --> 00:19:56,710
permission change pattern like they like

395
00:19:54,520 --> 00:19:59,800
they've change you a permission a page

396
00:19:56,710 --> 00:20:01,780
permission B and C D like more than

397
00:19:59,800 --> 00:20:05,169
sixteen day if they keep repeating this

398
00:20:01,780 --> 00:20:08,649
then maybe my library can have more

399
00:20:05,170 --> 00:20:11,950
overhead but in the case that we observe

400
00:20:08,650 --> 00:20:13,120
stilt of the variant promote okay all

401
00:20:11,950 --> 00:20:15,330
right let's thank our speaker one more

402
00:20:13,120 --> 00:20:15,330
time

