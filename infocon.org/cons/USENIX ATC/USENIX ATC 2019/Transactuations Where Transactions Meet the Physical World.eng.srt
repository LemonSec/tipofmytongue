1
00:00:10,610 --> 00:00:16,689
good afternoon everyone I'm Marita so

2
00:00:13,759 --> 00:00:19,730
this is work done at Samsung research

3
00:00:16,689 --> 00:00:23,240
with my former colleagues Daniken

4
00:00:19,730 --> 00:00:25,789
Massoud and Caesar this talk is about

5
00:00:23,240 --> 00:00:29,959
trans actuations where transactions meet

6
00:00:25,789 --> 00:00:32,000
the physical world IOT systems are

7
00:00:29,960 --> 00:00:34,699
everywhere and people use it for all

8
00:00:32,000 --> 00:00:37,460
kinds of purposes like safety security

9
00:00:34,699 --> 00:00:39,739
and automation however they are still

10
00:00:37,460 --> 00:00:41,420
early-stage and immature with respect to

11
00:00:39,739 --> 00:00:44,360
the fundamental properties they provide

12
00:00:41,420 --> 00:00:46,460
in this talk I will focus on one such

13
00:00:44,360 --> 00:00:49,760
fundamental property that is reliability

14
00:00:46,460 --> 00:00:54,350
of IOT systems I will talk about one

15
00:00:49,760 --> 00:00:56,900
iota domain called smart homes although

16
00:00:54,350 --> 00:00:58,519
the techniques I discuss here can be

17
00:00:56,900 --> 00:01:01,580
extent potentially extended to other

18
00:00:58,519 --> 00:01:03,890
cyber physical domains as well so this

19
00:01:01,580 --> 00:01:06,500
is how a smart home looks like it has

20
00:01:03,890 --> 00:01:08,390
sensors and actuators it receives this

21
00:01:06,500 --> 00:01:10,610
physical events and these events are

22
00:01:08,390 --> 00:01:13,369
then sent over the network to the cloud

23
00:01:10,610 --> 00:01:15,860
the applications reside reside in the

24
00:01:13,369 --> 00:01:20,270
cloud they execute the application logic

25
00:01:15,860 --> 00:01:24,289
and then send actuation commands back to

26
00:01:20,270 --> 00:01:28,850
the home well everything is not perfect

27
00:01:24,290 --> 00:01:32,020
and things can fail so what could happen

28
00:01:28,850 --> 00:01:34,789
is the sensor subsystem might go down or

29
00:01:32,020 --> 00:01:36,740
the sensor or the actuators might run

30
00:01:34,790 --> 00:01:38,360
out and run out of battery or there

31
00:01:36,740 --> 00:01:41,949
could be a network disconnection or a

32
00:01:38,360 --> 00:01:45,110
network partition so due to this failure

33
00:01:41,950 --> 00:01:49,040
does the does the implication only cause

34
00:01:45,110 --> 00:01:51,890
mere inconveniences what we found is no

35
00:01:49,040 --> 00:01:57,260
the consequences can be actually much

36
00:01:51,890 --> 00:02:00,590
more severe this is a real-world smart

37
00:01:57,260 --> 00:02:03,950
home customer who got robbed when he was

38
00:02:00,590 --> 00:02:06,280
on vacation he's upset and dissatisfied

39
00:02:03,950 --> 00:02:09,459
with the technology and he's saying that

40
00:02:06,280 --> 00:02:13,340
the motion sensors could detect motion

41
00:02:09,459 --> 00:02:15,080
because the logs show motion of the

42
00:02:13,340 --> 00:02:17,330
robbers but the application never

43
00:02:15,080 --> 00:02:20,209
sounded the alarm he lost trust in the

44
00:02:17,330 --> 00:02:22,749
system so let's look at the root cause

45
00:02:20,209 --> 00:02:22,749
of this problem

46
00:02:23,379 --> 00:02:29,030
this is the real world application taken

47
00:02:26,239 --> 00:02:32,230
from smart things smart home platform

48
00:02:29,030 --> 00:02:35,599
it's an intruder detection application

49
00:02:32,230 --> 00:02:37,548
this has an event based programming

50
00:02:35,599 --> 00:02:40,069
model which is representative of its

51
00:02:37,549 --> 00:02:42,739
this class of application it has an

52
00:02:40,069 --> 00:02:44,839
handler which is triggered based on

53
00:02:42,739 --> 00:02:48,680
physical events captured by sensors and

54
00:02:44,840 --> 00:02:51,290
actuators in this app the sensor values

55
00:02:48,680 --> 00:02:55,419
are read to determine if the motion is

56
00:02:51,290 --> 00:02:57,798
of an intruder it uses heuristic like

57
00:02:55,419 --> 00:03:00,730
whether the residents were quiet for a

58
00:02:57,799 --> 00:03:03,489
long time and what time of the day it is

59
00:03:00,730 --> 00:03:05,840
it then reads an application state and

60
00:03:03,489 --> 00:03:08,239
checks if the alarm is not already

61
00:03:05,840 --> 00:03:11,389
active if it's not it activates the

62
00:03:08,239 --> 00:03:14,750
alarm and sets the application state

63
00:03:11,389 --> 00:03:17,510
active to true this application state is

64
00:03:14,750 --> 00:03:19,340
said because the developer would read

65
00:03:17,510 --> 00:03:22,730
this state instead of reading the device

66
00:03:19,340 --> 00:03:27,109
itself to reduce battery drainage of the

67
00:03:22,730 --> 00:03:29,750
device so what happens if something goes

68
00:03:27,109 --> 00:03:34,099
wrong and let's say the actuation

69
00:03:29,750 --> 00:03:36,260
command - the alarm fails or actuation

70
00:03:34,099 --> 00:03:38,060
command is lost if there is a message

71
00:03:36,260 --> 00:03:41,750
loss or if there is a temporary glitch

72
00:03:38,060 --> 00:03:43,639
in the alarm what happens is now the

73
00:03:41,750 --> 00:03:45,199
alarm has been actuated and that has not

74
00:03:43,639 --> 00:03:48,010
gone through although the application

75
00:03:45,199 --> 00:03:50,209
state has been updated this leads to an

76
00:03:48,010 --> 00:03:52,728
inconsistency between the physical state

77
00:03:50,209 --> 00:03:54,979
and the application state this

78
00:03:52,729 --> 00:03:57,879
inconsistency is irreversible without

79
00:03:54,979 --> 00:04:00,889
manual intervention intervention and

80
00:03:57,879 --> 00:04:05,149
even if the intruder moves from one room

81
00:04:00,889 --> 00:04:07,609
to another this the alarm would never be

82
00:04:05,150 --> 00:04:10,099
sounded by the application and this is

83
00:04:07,609 --> 00:04:13,340
not just a failure that could happen the

84
00:04:10,099 --> 00:04:15,978
device itself comes with a warning that

85
00:04:13,340 --> 00:04:18,349
due to our RF interference on wireless

86
00:04:15,979 --> 00:04:21,320
transmissions the alarm may not operate

87
00:04:18,349 --> 00:04:24,680
as intended so the fundamental problem

88
00:04:21,320 --> 00:04:27,380
in this system is that the failure makes

89
00:04:24,680 --> 00:04:31,159
application states inconsistent with the

90
00:04:27,380 --> 00:04:33,500
device state in addition these

91
00:04:31,159 --> 00:04:36,500
applications are even based and are

92
00:04:33,500 --> 00:04:39,080
inherently concurrent so there

93
00:04:36,500 --> 00:04:41,990
could be inconsistencies due to

94
00:04:39,080 --> 00:04:43,669
concurrency bugs as well let's try to

95
00:04:41,990 --> 00:04:46,550
find out how often can these

96
00:04:43,670 --> 00:04:48,260
inconsistencies happen so we identified

97
00:04:46,550 --> 00:04:50,780
three classes of dependencies in

98
00:04:48,260 --> 00:04:52,730
application logic these dependencies are

99
00:04:50,780 --> 00:04:54,770
basically semantic relationship between

100
00:04:52,730 --> 00:04:57,460
the application state and the device

101
00:04:54,770 --> 00:04:59,630
state and these dependencies are

102
00:04:57,460 --> 00:05:01,729
vulnerable to failures that means if

103
00:04:59,630 --> 00:05:05,540
they are broken it might violate the

104
00:05:01,730 --> 00:05:07,520
application semantics by statically

105
00:05:05,540 --> 00:05:09,710
analyzing the code for these

106
00:05:07,520 --> 00:05:11,330
dependencies we could identify potential

107
00:05:09,710 --> 00:05:14,630
inconsistencies in the smart home

108
00:05:11,330 --> 00:05:16,609
applications and thereby find out the

109
00:05:14,630 --> 00:05:18,950
undesirable consequences due to these

110
00:05:16,610 --> 00:05:21,380
inconsistencies let me get into the

111
00:05:18,950 --> 00:05:24,080
details of different kinds of

112
00:05:21,380 --> 00:05:26,840
dependencies first is the sensing -

113
00:05:24,080 --> 00:05:29,510
activating dependency where you can see

114
00:05:26,840 --> 00:05:31,039
in this example a carbon dioxide sensor

115
00:05:29,510 --> 00:05:33,590
is being read and if its value is

116
00:05:31,040 --> 00:05:36,350
greater than a threshold fans are being

117
00:05:33,590 --> 00:05:38,510
actuated now what happens if there is a

118
00:05:36,350 --> 00:05:41,930
failure and the sensor returns a stale

119
00:05:38,510 --> 00:05:45,050
value so this is returning stale value

120
00:05:41,930 --> 00:05:50,180
is there in many of the existing smart

121
00:05:45,050 --> 00:05:51,919
home platforms what happens is now the

122
00:05:50,180 --> 00:05:54,280
there is an incorrect actuation or a

123
00:05:51,919 --> 00:05:57,169
missing actuation

124
00:05:54,280 --> 00:06:00,349
similarly if for the sensing -

125
00:05:57,169 --> 00:06:02,510
application state update dependency a

126
00:06:00,350 --> 00:06:04,700
thermostat value is being read and then

127
00:06:02,510 --> 00:06:07,280
if its value is greater than a threshold

128
00:06:04,700 --> 00:06:10,900
or software state mode is being said

129
00:06:07,280 --> 00:06:12,890
again an incorrect state update could

130
00:06:10,900 --> 00:06:16,909
could be read elsewhere in the

131
00:06:12,890 --> 00:06:18,409
application and that that inconsistency

132
00:06:16,910 --> 00:06:22,820
could be propagated elsewhere in the

133
00:06:18,410 --> 00:06:26,260
application third is the activating to

134
00:06:22,820 --> 00:06:29,330
the app state update dependency where an

135
00:06:26,260 --> 00:06:31,159
actuation is being made and the

136
00:06:29,330 --> 00:06:33,200
corresponding software state is updated

137
00:06:31,160 --> 00:06:36,110
here the software state is tied to the

138
00:06:33,200 --> 00:06:38,990
actuation command so as you can clearly

139
00:06:36,110 --> 00:06:42,640
see any inconsistency any failure here

140
00:06:38,990 --> 00:06:45,919
would lead to irreversible inconsistency

141
00:06:42,640 --> 00:06:46,640
our results of static analysis was quite

142
00:06:45,919 --> 00:06:50,299
interesting

143
00:06:46,640 --> 00:06:52,568
we analyzed over 182 applications

144
00:06:50,300 --> 00:06:55,879
from smart things and opener openhab and

145
00:06:52,569 --> 00:06:59,150
to open so smart home platforms and

146
00:06:55,879 --> 00:07:02,539
could identify nearly 309 undesirable

147
00:06:59,150 --> 00:07:04,969
consequences that arise because of

148
00:07:02,539 --> 00:07:08,419
inconsistencies which happened due to

149
00:07:04,970 --> 00:07:12,409
failures so how can we fix this problem

150
00:07:08,419 --> 00:07:14,359
so transaction is a very well-known

151
00:07:12,409 --> 00:07:16,250
programming programming abstraction that

152
00:07:14,360 --> 00:07:17,900
provides the all-or-nothing semantics

153
00:07:16,250 --> 00:07:22,729
and also provides the isolation

154
00:07:17,900 --> 00:07:25,099
semantics on delving deeper we found

155
00:07:22,729 --> 00:07:29,710
that it is impossible to adopt

156
00:07:25,099 --> 00:07:33,069
transactions to solve this problem and

157
00:07:29,710 --> 00:07:37,039
this is because of the nature of the IOT

158
00:07:33,069 --> 00:07:39,680
solution by or T environment let's see

159
00:07:37,039 --> 00:07:40,639
the reasons why transactions is not

160
00:07:39,680 --> 00:07:43,340
applicable here

161
00:07:40,639 --> 00:07:45,560
the IOT devices unlike the software

162
00:07:43,340 --> 00:07:47,530
world cannot be locked because users can

163
00:07:45,560 --> 00:07:52,400
still see the intermediate values and

164
00:07:47,530 --> 00:07:54,710
rolling back IOT devices could lead to a

165
00:07:52,400 --> 00:07:57,469
poor user experience for example the

166
00:07:54,710 --> 00:07:59,239
door getting locked and the door again

167
00:07:57,469 --> 00:08:02,509
getting unlocked which the user could

168
00:07:59,240 --> 00:08:04,039
see and in many cases the actuations

169
00:08:02,509 --> 00:08:08,029
cannot even be rolled back for example

170
00:08:04,039 --> 00:08:09,860
undoing a water dispenser so we tailored

171
00:08:08,029 --> 00:08:13,449
transactions for the physical world and

172
00:08:09,860 --> 00:08:15,110
we call this abstraction trans actuation

173
00:08:13,449 --> 00:08:17,599
transactivation is a high-level

174
00:08:15,110 --> 00:08:19,909
programming abstraction that allows the

175
00:08:17,599 --> 00:08:23,599
developer to program to write code in a

176
00:08:19,909 --> 00:08:25,960
failure aware way it provides atomic

177
00:08:23,599 --> 00:08:28,639
durability of only application states as

178
00:08:25,960 --> 00:08:31,969
actuations cannot be rolled back it also

179
00:08:28,639 --> 00:08:35,810
provides internal atomic visibility

180
00:08:31,969 --> 00:08:37,698
among trans actuations and this prevents

181
00:08:35,809 --> 00:08:41,718
several of the concurrency canonical

182
00:08:37,698 --> 00:08:43,520
concurrency bugs more importantly it

183
00:08:41,719 --> 00:08:45,800
provides these two invariants the first

184
00:08:43,520 --> 00:08:48,410
is the sensing invariant which governs

185
00:08:45,800 --> 00:08:50,800
executing a trans actuation and the next

186
00:08:48,410 --> 00:08:53,779
is the actuator invariant which governs

187
00:08:50,800 --> 00:08:55,540
committing of a transaction let's look

188
00:08:53,779 --> 00:08:58,579
at these two invariants in more detail

189
00:08:55,540 --> 00:09:02,120
so the sensing invariant guarantees that

190
00:08:58,579 --> 00:09:03,949
a trans actuation executes only when its

191
00:09:02,120 --> 00:09:05,900
when only when its

192
00:09:03,950 --> 00:09:08,480
the staleness of his sensor reads is

193
00:09:05,900 --> 00:09:12,439
bounded as part a developer specified

194
00:09:08,480 --> 00:09:14,780
policy and the developer can specify two

195
00:09:12,440 --> 00:09:16,450
parameters in the sensing policy one is

196
00:09:14,780 --> 00:09:19,310
how much staleness

197
00:09:16,450 --> 00:09:21,440
can the application tolerate and how

198
00:09:19,310 --> 00:09:23,150
many failed sensor reads will still

199
00:09:21,440 --> 00:09:26,720
preserve the application semantics an

200
00:09:23,150 --> 00:09:29,270
example would be at least one of the co2

201
00:09:26,720 --> 00:09:31,460
sensor must be available and can be read

202
00:09:29,270 --> 00:09:34,630
in the five minutes of the triggering

203
00:09:31,460 --> 00:09:37,910
event for the application to execute

204
00:09:34,630 --> 00:09:39,500
let's look at the actuated invariant the

205
00:09:37,910 --> 00:09:41,329
actuator invariant guarantees that as

206
00:09:39,500 --> 00:09:43,460
trans actuation commits its application

207
00:09:41,330 --> 00:09:45,500
states if sufficient number of

208
00:09:43,460 --> 00:09:47,960
actuations have gone through as part the

209
00:09:45,500 --> 00:09:49,760
developer specified policy and the

210
00:09:47,960 --> 00:09:54,470
actuation policy would have a parameter

211
00:09:49,760 --> 00:09:57,020
that how many failed actuations can the

212
00:09:54,470 --> 00:09:59,300
application tolerate for it to commit

213
00:09:57,020 --> 00:10:01,010
the application states an example of

214
00:09:59,300 --> 00:10:04,430
actuation policy would be commit the

215
00:10:01,010 --> 00:10:08,000
application states only if one alarm has

216
00:10:04,430 --> 00:10:10,849
been successfully executed let's explain

217
00:10:08,000 --> 00:10:14,720
this more with a simplified example so

218
00:10:10,850 --> 00:10:16,940
this is code written by a smart home

219
00:10:14,720 --> 00:10:20,150
developer say and he this is actually

220
00:10:16,940 --> 00:10:23,210
real-world code and he's reading carbon

221
00:10:20,150 --> 00:10:24,680
dioxide sensors here's and if the value

222
00:10:23,210 --> 00:10:27,350
of the sensor reads is greater than a

223
00:10:24,680 --> 00:10:30,380
particular threshold and if he has not

224
00:10:27,350 --> 00:10:33,530
already activated the exhaust fans which

225
00:10:30,380 --> 00:10:35,300
is tied to a software state active he is

226
00:10:33,530 --> 00:10:37,970
activating the fans and setting the

227
00:10:35,300 --> 00:10:40,430
software state active to true so this is

228
00:10:37,970 --> 00:10:42,440
code without trans actuations now if he

229
00:10:40,430 --> 00:10:45,439
wants to write this code in a failure

230
00:10:42,440 --> 00:10:47,360
aware way he instantiate the trans

231
00:10:45,440 --> 00:10:50,870
actuation and puts this code in a

232
00:10:47,360 --> 00:10:54,110
perform block now he can add a sensing

233
00:10:50,870 --> 00:10:56,420
policy to it meaning that if he can say

234
00:10:54,110 --> 00:10:58,700
that if all the carbon dioxide sensors

235
00:10:56,420 --> 00:11:00,469
could be read in the last five minutes

236
00:10:58,700 --> 00:11:02,930
of the triggering event then only

237
00:11:00,470 --> 00:11:05,690
execute the code he could also add an

238
00:11:02,930 --> 00:11:08,359
actuation policy which says commit the

239
00:11:05,690 --> 00:11:09,860
application state active to true only if

240
00:11:08,360 --> 00:11:11,810
all the actuations

241
00:11:09,860 --> 00:11:14,630
in this code have successfully gone

242
00:11:11,810 --> 00:11:17,569
through the actual abstraction is more

243
00:11:14,630 --> 00:11:20,480
involved it has a onsuccess block

244
00:11:17,570 --> 00:11:22,480
on failure block and also you could

245
00:11:20,480 --> 00:11:24,920
change transactions together so please

246
00:11:22,480 --> 00:11:27,230
refer the paper if you are interested in

247
00:11:24,920 --> 00:11:29,719
the details so this is how the

248
00:11:27,230 --> 00:11:32,149
abstraction looks like but how does it

249
00:11:29,720 --> 00:11:34,069
execute under the hood let look at let's

250
00:11:32,149 --> 00:11:37,610
look at the execution model of our

251
00:11:34,069 --> 00:11:40,099
implementation so trans actuation starts

252
00:11:37,610 --> 00:11:42,440
executing if the sensing policy is

253
00:11:40,100 --> 00:11:45,199
satisfied that if the sensor validation

254
00:11:42,440 --> 00:11:48,110
passes it starts executing its execute

255
00:11:45,199 --> 00:11:50,329
completely on in software first and it

256
00:11:48,110 --> 00:11:52,790
defers all the activations say it

257
00:11:50,329 --> 00:11:54,920
executes in software and speculatively

258
00:11:52,790 --> 00:11:57,439
commits in software this speculative

259
00:11:54,920 --> 00:12:00,170
commit allows trans actuations to have a

260
00:11:57,440 --> 00:12:01,279
get a serializable order without rolling

261
00:12:00,170 --> 00:12:03,769
back the actuations

262
00:12:01,279 --> 00:12:05,839
as once the final commit phase that is

263
00:12:03,769 --> 00:12:08,389
the actuated phase starts you cannot

264
00:12:05,839 --> 00:12:09,920
roll back the actuations then the

265
00:12:08,389 --> 00:12:11,509
transactivation enters the actuate

266
00:12:09,920 --> 00:12:14,389
encase which we call the final commit

267
00:12:11,509 --> 00:12:17,240
phase and it finally commits according

268
00:12:14,389 --> 00:12:20,540
to the actuation policy interestingly a

269
00:12:17,240 --> 00:12:22,639
speculative commit could trigger another

270
00:12:20,540 --> 00:12:24,740
trans actuation like tt-to which goes

271
00:12:22,639 --> 00:12:28,339
through the same phase of speculative

272
00:12:24,740 --> 00:12:31,730
and final commit and here it is

273
00:12:28,339 --> 00:12:34,040
overlapping the computation of t2 and

274
00:12:31,730 --> 00:12:37,519
the actuation in t1 that is the

275
00:12:34,040 --> 00:12:39,260
triggering trans actuation a speculative

276
00:12:37,519 --> 00:12:41,779
commit could also trigger other trans

277
00:12:39,260 --> 00:12:43,579
actuations like t3 and some trans

278
00:12:41,779 --> 00:12:45,560
actuations like t3 might have to wait

279
00:12:43,579 --> 00:12:47,510
while is triggering trans actuation is

280
00:12:45,560 --> 00:12:49,910
finally committing or any conflicting

281
00:12:47,510 --> 00:12:53,529
trans actuation is finally committing

282
00:12:49,910 --> 00:12:57,620
that is for correctness so I will talk

283
00:12:53,529 --> 00:13:01,189
next about the implementation briefly of

284
00:12:57,620 --> 00:13:02,060
our execution model our implementation

285
00:13:01,189 --> 00:13:05,480
is called relax

286
00:13:02,060 --> 00:13:09,018
and this runtime is implemented over as

287
00:13:05,480 --> 00:13:10,730
your technology we are used for for the

288
00:13:09,019 --> 00:13:12,680
applications as well as for system

289
00:13:10,730 --> 00:13:15,110
components like the final commit we use

290
00:13:12,680 --> 00:13:17,359
serverless function infrastructure it's

291
00:13:15,110 --> 00:13:21,290
all on serverless functions and we use

292
00:13:17,360 --> 00:13:24,139
specifically as your functions for the

293
00:13:21,290 --> 00:13:27,920
relax for the storage we call it a

294
00:13:24,139 --> 00:13:29,930
relaxed or we use cosmos DB and we

295
00:13:27,920 --> 00:13:31,459
integrated this system to Samsung

296
00:13:29,930 --> 00:13:33,529
smartthings IOT platform

297
00:13:31,460 --> 00:13:37,490
there are several other interesting

298
00:13:33,529 --> 00:13:41,270
details on how we integrate this to the

299
00:13:37,490 --> 00:13:43,460
service environment and details of fault

300
00:13:41,270 --> 00:13:46,250
tolerance for example how we provide the

301
00:13:43,460 --> 00:13:49,520
exactly one semantics for trans

302
00:13:46,250 --> 00:13:51,560
actuations in in the serval s

303
00:13:49,520 --> 00:13:53,709
environment so please look at the paper

304
00:13:51,560 --> 00:13:57,469
if you are interested in those details

305
00:13:53,709 --> 00:14:00,109
we evaluated trans actuations on several

306
00:13:57,470 --> 00:14:03,380
metrics in the interest of time I will

307
00:14:00,110 --> 00:14:05,330
talk about two metrics here a program

308
00:14:03,380 --> 00:14:09,500
ability and the runtime overhead without

309
00:14:05,330 --> 00:14:11,660
failures in program ability I am showing

310
00:14:09,500 --> 00:14:13,910
you of several applications here taken

311
00:14:11,660 --> 00:14:16,310
from the real world we reimplemented

312
00:14:13,910 --> 00:14:18,800
these applications in node.js as trans

313
00:14:16,310 --> 00:14:21,109
actuation is implemented in node.js so

314
00:14:18,800 --> 00:14:23,390
the first column is showing the lines of

315
00:14:21,110 --> 00:14:26,450
code in the original app and in the

316
00:14:23,390 --> 00:14:28,459
middle column the developer introduced

317
00:14:26,450 --> 00:14:31,279
the consistency guarantees that a trans

318
00:14:28,459 --> 00:14:33,500
actuation provides manually introducing

319
00:14:31,279 --> 00:14:35,839
lines of code that makes the application

320
00:14:33,500 --> 00:14:38,660
complex and increases the lines of code

321
00:14:35,839 --> 00:14:40,940
as well and the third column is the the

322
00:14:38,660 --> 00:14:42,740
trans actuation it takes similar amount

323
00:14:40,940 --> 00:14:47,770
of lines of code as the original

324
00:14:42,740 --> 00:14:52,850
application as it pushes the complexity

325
00:14:47,770 --> 00:14:55,189
into the system although in certain

326
00:14:52,850 --> 00:14:57,260
cases there are applications where trans

327
00:14:55,190 --> 00:14:59,300
actuations take a lot more code than the

328
00:14:57,260 --> 00:15:01,040
original app this is for correctness

329
00:14:59,300 --> 00:15:03,319
where we chain trans activations

330
00:15:01,040 --> 00:15:07,219
together the details are there in the

331
00:15:03,320 --> 00:15:10,970
paper let's look at the runtime overhead

332
00:15:07,220 --> 00:15:13,160
without failures in the system so trans

333
00:15:10,970 --> 00:15:16,970
actuations overall incurs an overhead of

334
00:15:13,160 --> 00:15:18,529
50% over the unmodified that is the

335
00:15:16,970 --> 00:15:21,350
original application without the

336
00:15:18,529 --> 00:15:23,839
necessary guarantees overall there is a

337
00:15:21,350 --> 00:15:26,480
modest overhead that is incurred by

338
00:15:23,839 --> 00:15:28,579
trans actuation across all the apps but

339
00:15:26,480 --> 00:15:31,430
again in certain applications the

340
00:15:28,579 --> 00:15:33,349
overhead is quite high as you can see in

341
00:15:31,430 --> 00:15:34,670
e1 in this case and this is again

342
00:15:33,350 --> 00:15:37,670
because of the server list function

343
00:15:34,670 --> 00:15:39,020
triggering overhead basically the

344
00:15:37,670 --> 00:15:42,380
database update triggering the server

345
00:15:39,020 --> 00:15:44,959
list function has some overhead there

346
00:15:42,380 --> 00:15:45,230
are there is overhead breakdown in the

347
00:15:44,959 --> 00:15:47,239
pay

348
00:15:45,230 --> 00:15:50,660
for our evaluation and there is thorough

349
00:15:47,240 --> 00:15:52,250
experimentation with failures as well so

350
00:15:50,660 --> 00:15:54,699
please refer the paper if you were

351
00:15:52,250 --> 00:15:57,620
interested in the overhead bag breakdown

352
00:15:54,700 --> 00:15:59,600
in conclusion we established a critical

353
00:15:57,620 --> 00:16:03,110
reliability issue due to inconsistencies

354
00:15:59,600 --> 00:16:05,480
and introduced our abstraction called

355
00:16:03,110 --> 00:16:08,210
trans actuation that allows a developer

356
00:16:05,480 --> 00:16:09,740
to program in a failure aware way we

357
00:16:08,210 --> 00:16:11,810
demonstrated trans actuations

358
00:16:09,740 --> 00:16:13,520
programmability performance and

359
00:16:11,810 --> 00:16:17,439
effectiveness and showed that it is a

360
00:16:13,520 --> 00:16:31,520
powerful abstraction and execution model

361
00:16:17,440 --> 00:16:33,020
thank you any questions all right so I

362
00:16:31,520 --> 00:16:36,800
will ask questions while people are

363
00:16:33,020 --> 00:16:39,650
approaching the mic so I must say that

364
00:16:36,800 --> 00:16:42,380
I'm I'm actually scared to death to use

365
00:16:39,650 --> 00:16:46,160
those things now like the smart homes

366
00:16:42,380 --> 00:16:48,830
and because like if co2 is is relying

367
00:16:46,160 --> 00:16:52,160
like the in the turning on the fan

368
00:16:48,830 --> 00:16:54,230
relies on co2 sensor being accessible

369
00:16:52,160 --> 00:16:57,350
through the network I think something is

370
00:16:54,230 --> 00:16:59,570
kind of fundamentally wrong but my real

371
00:16:57,350 --> 00:17:01,690
question is it looks like the regional

372
00:16:59,570 --> 00:17:05,839
kind of code samples that you've shown

373
00:17:01,690 --> 00:17:09,020
show that people kind of ignore errors

374
00:17:05,839 --> 00:17:12,619
by definition sort of they they don't

375
00:17:09,020 --> 00:17:15,079
have this notion of checking for errors

376
00:17:12,619 --> 00:17:19,040
every time they try some actuation to go

377
00:17:15,079 --> 00:17:22,069
on and so your proposed model still

378
00:17:19,040 --> 00:17:26,119
keeps them out of like this necessity

379
00:17:22,069 --> 00:17:28,399
but helps them to basically handle

380
00:17:26,119 --> 00:17:31,399
errors in certain more centralized way

381
00:17:28,400 --> 00:17:33,890
is that correct yes so there are

382
00:17:31,400 --> 00:17:36,050
basically sophisticated developers with

383
00:17:33,890 --> 00:17:38,180
who write these apps who would have to

384
00:17:36,050 --> 00:17:39,590
check for errors if he has to write the

385
00:17:38,180 --> 00:17:41,450
application in a correct way and they

386
00:17:39,590 --> 00:17:43,310
are at some hobbies developers who write

387
00:17:41,450 --> 00:17:45,320
this apps and who would not care about

388
00:17:43,310 --> 00:17:48,020
these errors so this is a genetic

389
00:17:45,320 --> 00:17:50,840
programming model that we are saying

390
00:17:48,020 --> 00:17:53,540
that you could or you should write this

391
00:17:50,840 --> 00:17:57,310
in a proper way so that you can avoid

392
00:17:53,540 --> 00:17:57,310
this problem of inconsistencies

393
00:17:58,169 --> 00:18:03,490
I'm hot Gupta from Georgia Tech so

394
00:18:00,970 --> 00:18:04,330
as if I understood correctly you have a

395
00:18:03,490 --> 00:18:07,150
condition

396
00:18:04,330 --> 00:18:09,189
about how many actuators should succeed

397
00:18:07,150 --> 00:18:11,169
in order for the entire transaction to

398
00:18:09,190 --> 00:18:14,440
succeed right right so what happens if

399
00:18:11,169 --> 00:18:16,029
it is partially executed you want to so

400
00:18:14,440 --> 00:18:18,250
those that have already executed are

401
00:18:16,029 --> 00:18:20,650
still are not rolled back they they

402
00:18:18,250 --> 00:18:22,870
still remain in this so we basically

403
00:18:20,650 --> 00:18:24,730
just roll back the application state as

404
00:18:22,870 --> 00:18:28,840
we cannot but the transaction still

405
00:18:24,730 --> 00:18:30,429
finally commits and the rollback of we

406
00:18:28,840 --> 00:18:32,408
roll back the application state so as a

407
00:18:30,429 --> 00:18:35,980
result other trans actuations would read

408
00:18:32,409 --> 00:18:38,049
the application state which which was

409
00:18:35,980 --> 00:18:41,049
there before the transactivation started

410
00:18:38,049 --> 00:18:43,480
and that makes this inconsistency go

411
00:18:41,049 --> 00:18:45,940
away but the physical device is not

412
00:18:43,480 --> 00:18:48,610
rolled back if a door was unlocked will

413
00:18:45,940 --> 00:18:53,830
it be locked again so for the ones we

414
00:18:48,610 --> 00:18:57,279
have actuated yes they will be rolled

415
00:18:53,830 --> 00:19:00,840
back yeah thanks so the you you mean the

416
00:18:57,279 --> 00:19:03,250
ones which have been actuated yes no

417
00:19:00,840 --> 00:19:06,610
they've once they have been actuated and

418
00:19:03,250 --> 00:19:08,020
some some failed because of a failure so

419
00:19:06,610 --> 00:19:09,070
those that have been partially executed

420
00:19:08,020 --> 00:19:10,539
they won't be rolled back

421
00:19:09,070 --> 00:19:12,100
no they won't roll back but then you

422
00:19:10,539 --> 00:19:13,270
roll back the applications application

423
00:19:12,100 --> 00:19:16,270
state only so then there's an

424
00:19:13,270 --> 00:19:18,429
inconsistency right because the door has

425
00:19:16,270 --> 00:19:20,110
been unlocked but now you roll back the

426
00:19:18,429 --> 00:19:24,340
application state to it saying that it's

427
00:19:20,110 --> 00:19:27,340
locked there is an inconsistency in the

428
00:19:24,340 --> 00:19:29,230
state but if the another application is

429
00:19:27,340 --> 00:19:37,539
reading the software state then it would

430
00:19:29,230 --> 00:19:39,520
function correctly right yeah I was

431
00:19:37,539 --> 00:19:41,590
wondering for the whether the

432
00:19:39,520 --> 00:19:44,020
applications used for the evaluations

433
00:19:41,590 --> 00:19:45,879
are representative for the complexity

434
00:19:44,020 --> 00:19:48,220
and the size of the code base of a

435
00:19:45,880 --> 00:19:49,600
real-world IOT device something that you

436
00:19:48,220 --> 00:19:52,360
know used in the original example

437
00:19:49,600 --> 00:19:55,330
somebody had had been robbed and so on

438
00:19:52,360 --> 00:19:57,428
and whether do you foresee any issues

439
00:19:55,330 --> 00:20:01,299
with refactoring some like a larger

440
00:19:57,429 --> 00:20:04,000
codebase to use transactions sorry if we

441
00:20:01,299 --> 00:20:05,918
fade any faced any issues do you for do

442
00:20:04,000 --> 00:20:08,409
you think it would be easy to to

443
00:20:05,919 --> 00:20:08,830
refactor a larger codebase than the ones

444
00:20:08,409 --> 00:20:11,679
that

445
00:20:08,830 --> 00:20:13,210
to show to use transactions so you use

446
00:20:11,679 --> 00:20:14,799
something like a hundred or two hundred

447
00:20:13,210 --> 00:20:17,919
lines of code

448
00:20:14,799 --> 00:20:20,110
I mean mad yes real applications may be

449
00:20:17,919 --> 00:20:21,399
much larger than that well the smart

450
00:20:20,110 --> 00:20:23,699
home applications these are real

451
00:20:21,399 --> 00:20:25,719
applications and they are usually

452
00:20:23,700 --> 00:20:27,610
hundreds of lines of course they are

453
00:20:25,720 --> 00:20:29,080
because these are rules although they

454
00:20:27,610 --> 00:20:32,649
are even baits and have complex

455
00:20:29,080 --> 00:20:34,840
concurrency primitives in them but I

456
00:20:32,649 --> 00:20:37,120
think these the technique is basic and

457
00:20:34,840 --> 00:20:40,059
can be extended to other cyber physical

458
00:20:37,120 --> 00:20:41,979
domains having a larger code base okay

459
00:20:40,059 --> 00:20:43,779
thank you I'm sorry we actually don't

460
00:20:41,980 --> 00:20:45,220
have more time so let's take a selfie

461
00:20:43,779 --> 00:20:45,890
and thanks the speaker thank you very

462
00:20:45,220 --> 00:20:50,779
much

463
00:20:45,890 --> 00:20:50,779
[Applause]

