1
00:00:10,299 --> 00:00:13,360
hi everyone I'm Jimmy from Shanghai John

2
00:00:12,759 --> 00:00:16,299
University

3
00:00:13,360 --> 00:00:18,369
our system is named Pisces it is a

4
00:00:16,299 --> 00:00:20,948
software transactional memory built up

5
00:00:18,369 --> 00:00:23,198
and normal entire memory and aims to

6
00:00:20,949 --> 00:00:26,489
achieve both read efficiency and high

7
00:00:23,199 --> 00:00:30,849
scalability normal term memory such as

8
00:00:26,489 --> 00:00:33,910
PCM IRM and 3d xpoint is revolutionising

9
00:00:30,849 --> 00:00:35,770
the memory storage hierarchy the

10
00:00:33,910 --> 00:00:37,538
recently release of interruptin

11
00:00:35,770 --> 00:00:40,690
persistent memory marks the transition

12
00:00:37,539 --> 00:00:44,829
of LVM technology from research but

13
00:00:40,690 --> 00:00:46,780
prototypes to mainstream products REM is

14
00:00:44,829 --> 00:00:50,920
byte addressable and has low reader

15
00:00:46,780 --> 00:00:53,380
agency but about 10 times roy latency to

16
00:00:50,920 --> 00:00:56,680
efficiently program on VM with the

17
00:00:53,380 --> 00:00:58,770
balance among good programmability high

18
00:00:56,680 --> 00:01:01,780
performance and low software overhead

19
00:00:58,770 --> 00:01:04,930
the persistent transactional memory has

20
00:01:01,780 --> 00:01:07,119
been exploited by priori work so

21
00:01:04,930 --> 00:01:11,140
combining the transactional memory and

22
00:01:07,119 --> 00:01:15,810
nvm PTM offers the properties of atoms

23
00:01:11,140 --> 00:01:19,719
tea consistency isolation and durability

24
00:01:15,810 --> 00:01:21,939
but most of erased Imperium system

25
00:01:19,719 --> 00:01:25,589
neglect the performance of read

26
00:01:21,939 --> 00:01:28,270
operations all have scalability issues

27
00:01:25,590 --> 00:01:31,389
the root cause for the read efficiency

28
00:01:28,270 --> 00:01:34,119
problem is that such PTM system exposed

29
00:01:31,389 --> 00:01:37,529
higher M persistence overhead to readers

30
00:01:34,119 --> 00:01:40,060
in such systems to modify an object a

31
00:01:37,529 --> 00:01:42,779
transaction where first lock the object

32
00:01:40,060 --> 00:01:45,340
and recall the modification log after

33
00:01:42,779 --> 00:01:47,469
flushing the log into nvm the

34
00:01:45,340 --> 00:01:50,109
transaction can update the objects

35
00:01:47,469 --> 00:01:53,639
finally it will flush the updates into

36
00:01:50,109 --> 00:01:58,179
nvm and release the log of object

37
00:01:53,639 --> 00:02:00,548
however the this my blog concurrent

38
00:01:58,179 --> 00:02:03,130
reader operations on the same object

39
00:02:00,549 --> 00:02:05,499
this lump locking duration may become a

40
00:02:03,130 --> 00:02:08,318
severe performance bottleneck due to the

41
00:02:05,499 --> 00:02:13,180
amplified persistence overhead incurred

42
00:02:08,318 --> 00:02:14,109
by high ROI latency of a VM the another

43
00:02:13,180 --> 00:02:17,260
related work

44
00:02:14,110 --> 00:02:19,750
hides the vm persistence overheads

45
00:02:17,260 --> 00:02:21,630
through eliminate through eliminating

46
00:02:19,750 --> 00:02:24,060
the flush operations in the

47
00:02:21,630 --> 00:02:26,370
executions rats it's a leverage the

48
00:02:24,060 --> 00:02:30,600
backgrounds were ads to a synchronized a

49
00:02:26,370 --> 00:02:34,500
flash rise to nvm such PGM design

50
00:02:30,600 --> 00:02:38,010
duplicate the persistent objects in DRAM

51
00:02:34,500 --> 00:02:40,260
and the foreground stress owning updates

52
00:02:38,010 --> 00:02:43,350
that pact with the objects in DRM and

53
00:02:40,260 --> 00:02:47,579
the one background stress is responsible

54
00:02:43,350 --> 00:02:50,160
for updating the objects in rem however

55
00:02:47,580 --> 00:02:53,430
the background thread has to apply the

56
00:02:50,160 --> 00:02:56,040
logs to the persistent objects in a

57
00:02:53,430 --> 00:02:58,520
total order according to the Mon are not

58
00:02:56,040 --> 00:03:00,810
monotonic increasing transaction ID

59
00:02:58,520 --> 00:03:03,180
because the background thread cannot

60
00:03:00,810 --> 00:03:06,120
tell whether this two transaction have

61
00:03:03,180 --> 00:03:08,940
dependency such a strict persistence

62
00:03:06,120 --> 00:03:11,940
ordering harms the scalability once the

63
00:03:08,940 --> 00:03:16,530
background thread cannot catch up the

64
00:03:11,940 --> 00:03:19,140
pace of the foreground stress so or it

65
00:03:16,530 --> 00:03:21,930
is a challenging to design a PTM system

66
00:03:19,140 --> 00:03:24,269
that insulates readers from being

67
00:03:21,930 --> 00:03:28,170
affected by the over by the hynerian

68
00:03:24,270 --> 00:03:30,080
persistence overhead while avoid overly

69
00:03:28,170 --> 00:03:33,899
constrained persistence ordering

70
00:03:30,080 --> 00:03:36,300
simultaneously we notice that natural

71
00:03:33,900 --> 00:03:38,100
isolation can avoid rewrite conflicts

72
00:03:36,300 --> 00:03:41,190
and surfaces for many real-world

73
00:03:38,100 --> 00:03:43,680
applications which makes it possible to

74
00:03:41,190 --> 00:03:46,829
design a PTM that allows a transaction

75
00:03:43,680 --> 00:03:48,810
to persist its logs in the critic

76
00:03:46,830 --> 00:03:51,900
section in the critical path instead of

77
00:03:48,810 --> 00:03:54,600
in the background while hiding is a high

78
00:03:51,900 --> 00:03:58,430
persistence overhead from concurrent

79
00:03:54,600 --> 00:04:00,690
area operations as usually and the early

80
00:03:58,430 --> 00:04:04,830
multi-version concurrency control is a

81
00:04:00,690 --> 00:04:07,500
common choice to achieve si what we

82
00:04:04,830 --> 00:04:10,170
observe that the redo logs which will be

83
00:04:07,500 --> 00:04:12,720
finally applied applied to the durable

84
00:04:10,170 --> 00:04:15,780
data can be reused as a new data

85
00:04:12,720 --> 00:04:19,709
variance which enables us to efficiently

86
00:04:15,780 --> 00:04:22,320
introduce MVCC to PDF a following

87
00:04:19,709 --> 00:04:25,650
question is that kind of intuitive and

88
00:04:22,320 --> 00:04:28,020
races based the PTM satisfy our goal to

89
00:04:25,650 --> 00:04:31,770
answer this question we implement a

90
00:04:28,020 --> 00:04:37,109
prototype and races a PDF like a common

91
00:04:31,770 --> 00:04:40,349
MVCC design we implement an identifier

92
00:04:37,110 --> 00:04:43,020
and a very list for each object a write

93
00:04:40,350 --> 00:04:46,050
operation will insert the newest version

94
00:04:43,020 --> 00:04:48,000
as ahead of the version list and a read

95
00:04:46,050 --> 00:04:51,930
operation where locates the correct

96
00:04:48,000 --> 00:04:55,320
version to read in the word list however

97
00:04:51,930 --> 00:04:57,390
we find this intuitive design still has

98
00:04:55,320 --> 00:04:59,820
considerable overhead for real

99
00:04:57,390 --> 00:05:04,620
operations because of the following two

100
00:04:59,820 --> 00:05:07,260
issues first to read us first is a real

101
00:05:04,620 --> 00:05:10,280
interaction problem which leads to extra

102
00:05:07,260 --> 00:05:13,500
memory read extra random memory accesses

103
00:05:10,280 --> 00:05:16,770
take a linked list as an example if a

104
00:05:13,500 --> 00:05:19,590
transaction traverses this 3-3-3 object

105
00:05:16,770 --> 00:05:23,370
link a list it points to be be points to

106
00:05:19,590 --> 00:05:25,950
see it actually needs to traverse a much

107
00:05:23,370 --> 00:05:29,400
longer list which at least contains

108
00:05:25,950 --> 00:05:32,610
three objects and three object IDs the

109
00:05:29,400 --> 00:05:34,979
second problem is his named his real

110
00:05:32,610 --> 00:05:38,490
operations may still be blocked by the

111
00:05:34,979 --> 00:05:41,039
OEM persist of operations specifically

112
00:05:38,490 --> 00:05:43,860
when reader access an object which is

113
00:05:41,039 --> 00:05:47,250
being blocked the reader may be blocked

114
00:05:43,860 --> 00:05:50,430
until the writer commits as an example

115
00:05:47,250 --> 00:05:54,300
shown on the right taewin starts with x

116
00:05:50,430 --> 00:05:58,260
times 5 and it wants to read object D

117
00:05:54,300 --> 00:06:03,660
while t2 locks the same object here T to

118
00:05:58,260 --> 00:06:09,419
make kameez D 45 so t1 must be blocked

119
00:06:03,660 --> 00:06:11,970
instead of directly reading d3 to

120
00:06:09,419 --> 00:06:13,890
eliminate the cost of extra dereference

121
00:06:11,970 --> 00:06:17,280
caused by object IDs

122
00:06:13,890 --> 00:06:20,669
Pisces keeps up to two versions for each

123
00:06:17,280 --> 00:06:23,159
object similar ways the MVCC design a

124
00:06:20,669 --> 00:06:25,770
writer own objects will create a new

125
00:06:23,160 --> 00:06:28,169
world and thus can proceed with the

126
00:06:25,770 --> 00:06:31,560
concurrent readers the difference is

127
00:06:28,169 --> 00:06:34,320
that the writer were eagerly overrides

128
00:06:31,560 --> 00:06:37,380
the older versions with the new versions

129
00:06:34,320 --> 00:06:40,050
which makes an object usually have only

130
00:06:37,380 --> 00:06:42,600
a single version and thus the readers

131
00:06:40,050 --> 00:06:44,020
can directly get their word without

132
00:06:42,600 --> 00:06:47,650
extra memory

133
00:06:44,020 --> 00:06:50,460
the reference to reduce the blocking

134
00:06:47,650 --> 00:06:53,950
overhead in the entry team MVCC design

135
00:06:50,460 --> 00:06:56,409
pisces proposes a three-stage commit

136
00:06:53,950 --> 00:06:58,510
protocol to decompose different

137
00:06:56,410 --> 00:07:00,570
functionalities of the whole commit

138
00:06:58,510 --> 00:07:04,240
phase into different stages

139
00:07:00,570 --> 00:07:06,670
hence owning the reuters in the second

140
00:07:04,240 --> 00:07:08,710
coming stage can block internal readers

141
00:07:06,670 --> 00:07:13,300
and the second coming stage only

142
00:07:08,710 --> 00:07:17,830
involves two DRM rights Pisces can allow

143
00:07:13,300 --> 00:07:22,180
nearly non blocking rates now let s see

144
00:07:17,830 --> 00:07:24,909
how Pisces excuse transactions Pisces

145
00:07:22,180 --> 00:07:27,370
maintains a global timestamp global

146
00:07:24,910 --> 00:07:30,100
timestamp and each transaction retrieves

147
00:07:27,370 --> 00:07:33,160
this tempt stamp as if start time stamp

148
00:07:30,100 --> 00:07:36,640
in the beginning for each data object

149
00:07:33,160 --> 00:07:39,880
Pisces attaches a header which is used

150
00:07:36,640 --> 00:07:41,740
as the right log to coordinates

151
00:07:39,880 --> 00:07:44,680
concurrent writers on the same object

152
00:07:41,740 --> 00:07:46,680
and when an object is locked into a

153
00:07:44,680 --> 00:07:49,570
point to a new world

154
00:07:46,680 --> 00:07:53,110
suppose the transaction T wants to write

155
00:07:49,570 --> 00:07:55,719
object a it first gets a slog and then

156
00:07:53,110 --> 00:07:57,700
make a copy in its unlock after there's

157
00:07:55,720 --> 00:08:01,540
the transaction Teague updates is

158
00:07:57,700 --> 00:08:05,530
copying also a transaction rights other

159
00:08:01,540 --> 00:08:07,840
objects in a similar way a full

160
00:08:05,530 --> 00:08:10,380
read-only transactions Pisces directly

161
00:08:07,840 --> 00:08:13,090
committing them without any operation

162
00:08:10,380 --> 00:08:14,800
while for rewrite transaction Pisces

163
00:08:13,090 --> 00:08:18,010
committed and through through stage

164
00:08:14,800 --> 00:08:21,430
commits in the first stage persistence

165
00:08:18,010 --> 00:08:25,650
persist stage a transaction has to flash

166
00:08:21,430 --> 00:08:28,660
the object copies in his log to nvm a

167
00:08:25,650 --> 00:08:31,359
transaction reaches is durable point at

168
00:08:28,660 --> 00:08:34,180
the end of this stage because it's logs

169
00:08:31,360 --> 00:08:37,570
is durable and will be redone after

170
00:08:34,179 --> 00:08:40,209
crash in the second stage concurrency

171
00:08:37,570 --> 00:08:40,720
commit stage the transaction atomically

172
00:08:40,210 --> 00:08:43,380
makes

173
00:08:40,720 --> 00:08:46,510
object copies visible to others after

174
00:08:43,380 --> 00:08:48,970
this stage the object copies in the logs

175
00:08:46,510 --> 00:08:52,450
are regarded as the second versions for

176
00:08:48,970 --> 00:08:53,290
objects so the end of this stage is a

177
00:08:52,450 --> 00:08:55,300
commits

178
00:08:53,290 --> 00:08:58,839
commit point for transaction

179
00:08:55,300 --> 00:09:02,240
then how does Pisces achieved a Thomas T

180
00:08:58,839 --> 00:09:05,180
while allocating an object copy Pisces

181
00:09:02,240 --> 00:09:07,190
says that the copies were in pointer to

182
00:09:05,180 --> 00:09:11,329
that to the transactions and timestamp

183
00:09:07,190 --> 00:09:13,760
and in this second alchemists age the

184
00:09:11,329 --> 00:09:17,810
transactions and timestamp will be said

185
00:09:13,760 --> 00:09:20,800
to the global x + 1 thus all the object

186
00:09:17,810 --> 00:09:24,140
copies are assigned a sink vanity

187
00:09:20,800 --> 00:09:26,240
remember at the same time after the yes

188
00:09:24,140 --> 00:09:28,490
the global timestamp will be increased

189
00:09:26,240 --> 00:09:32,260
by when in order to make all the new

190
00:09:28,490 --> 00:09:35,779
versions we devote to other transactions

191
00:09:32,260 --> 00:09:39,290
in the last coming stage right backstage

192
00:09:35,779 --> 00:09:43,220
Pisces firstly leverage the idea of I

193
00:09:39,290 --> 00:09:45,980
say yogurts pure detection to ensure the

194
00:09:43,220 --> 00:09:48,680
original objects such as object a and

195
00:09:45,980 --> 00:09:51,769
object B geo are no longer needed by

196
00:09:48,680 --> 00:09:54,589
others and then passes eagerly writes

197
00:09:51,769 --> 00:09:57,560
back the new versions to let readers

198
00:09:54,589 --> 00:10:00,640
directly access objects in the home

199
00:09:57,560 --> 00:10:03,739
location without extra memory accesses

200
00:10:00,640 --> 00:10:08,810
finally the objects are unlocked for

201
00:10:03,740 --> 00:10:12,470
following updates TM really is used for

202
00:10:08,810 --> 00:10:15,619
reading objects and it has both first

203
00:10:12,470 --> 00:10:17,930
path and Slava's well object is unlocked

204
00:10:15,620 --> 00:10:21,260
which means there is no concurrent

205
00:10:17,930 --> 00:10:23,890
writer TM reads excuse the first pass

206
00:10:21,260 --> 00:10:26,569
which simply returns the object

207
00:10:23,890 --> 00:10:29,029
otherwise in the slow path TM read

208
00:10:26,570 --> 00:10:31,370
compares all the object copies very

209
00:10:29,029 --> 00:10:34,880
number with the transaction start time

210
00:10:31,370 --> 00:10:39,470
stamp to decide to return either the

211
00:10:34,880 --> 00:10:41,240
original object all object cops okay

212
00:10:39,470 --> 00:10:43,640
that's all about the transaction

213
00:10:41,240 --> 00:10:47,149
interfaces designed for applications to

214
00:10:43,640 --> 00:10:51,800
use for other designs like how to reduce

215
00:10:47,149 --> 00:10:54,470
memorize please refer to our paper we

216
00:10:51,800 --> 00:10:57,949
conduct experiments on inches in go

217
00:10:54,470 --> 00:11:00,589
server with nvm encrypted to demonstrate

218
00:10:57,949 --> 00:11:04,790
the real efficiency and scalability of

219
00:11:00,589 --> 00:11:07,010
Pisces we compare party prices of always

220
00:11:04,790 --> 00:11:08,789
do TM which is a still a large

221
00:11:07,010 --> 00:11:11,919
PGM system

222
00:11:08,789 --> 00:11:14,799
in the micro data structure benchmarks

223
00:11:11,919 --> 00:11:17,769
when the update rates are low the

224
00:11:14,799 --> 00:11:19,779
throughput of both Pisces and UTM can

225
00:11:17,769 --> 00:11:23,079
scale where with the increase of the

226
00:11:19,779 --> 00:11:25,839
strand number note the y-axis is log

227
00:11:23,079 --> 00:11:28,118
scale nevertheless owing to the read

228
00:11:25,839 --> 00:11:32,439
friendly design spices has higher

229
00:11:28,119 --> 00:11:36,069
throughput in TATP which is the rhythm

230
00:11:32,439 --> 00:11:39,189
read dominated OLTP benchmark pisces

231
00:11:36,069 --> 00:11:41,228
ought also outperforms dude here from

232
00:11:39,189 --> 00:11:44,529
the figure on the right we can see

233
00:11:41,229 --> 00:11:47,289
Pisces obviously decreases the real

234
00:11:44,529 --> 00:11:47,679
agency compared to the intuitive MVC

235
00:11:47,289 --> 00:11:52,929
design

236
00:11:47,679 --> 00:11:55,358
thanks to no extra memory access pisces

237
00:11:52,929 --> 00:11:57,909
also show better scalability than dude

238
00:11:55,359 --> 00:12:01,029
here recorded if a background thread

239
00:11:57,909 --> 00:12:03,669
needs to persist updates in a terrarium

240
00:12:01,029 --> 00:12:06,699
in your total order it can harm the

241
00:12:03,669 --> 00:12:09,728
scalability and do TM represent such

242
00:12:06,699 --> 00:12:11,919
design in the hash table benchmark is

243
00:12:09,729 --> 00:12:14,829
royalty transactional only updates one

244
00:12:11,919 --> 00:12:17,169
object so the background stars in duty

245
00:12:14,829 --> 00:12:19,929
amp and timely finish the persistence

246
00:12:17,169 --> 00:12:23,049
operations when strand number is no

247
00:12:19,929 --> 00:12:27,728
longer than 16 however if adding more

248
00:12:23,049 --> 00:12:30,608
stress the scalability issue comes up in

249
00:12:27,729 --> 00:12:33,939
the testing 40 VCC new order transaction

250
00:12:30,609 --> 00:12:36,339
each thread has a warehouse and all the

251
00:12:33,939 --> 00:12:39,339
transactions are right Roy transactions

252
00:12:36,339 --> 00:12:41,799
do TM cannot scale because such

253
00:12:39,339 --> 00:12:44,019
transaction generates much more logs and

254
00:12:41,799 --> 00:12:47,139
the background thread cannot catch up

255
00:12:44,019 --> 00:12:50,199
the pace of the from foreground stress

256
00:12:47,139 --> 00:12:54,039
in contrast parties can also scale much

257
00:12:50,199 --> 00:12:57,039
brighter so to conclude this talk

258
00:12:54,039 --> 00:12:59,339
present Pisces a real friendly PDM that

259
00:12:57,039 --> 00:13:02,319
provides transactional memory API for

260
00:12:59,339 --> 00:13:04,419
programming on a VM with several

261
00:13:02,319 --> 00:13:07,059
techniques such as DVCC

262
00:13:04,419 --> 00:13:10,718
and three-stage commit pisces achieves

263
00:13:07,059 --> 00:13:13,329
achieves both read efficiency and good

264
00:13:10,719 --> 00:13:14,930
scalability while ensuring snapshot

265
00:13:13,329 --> 00:13:18,079
isolation and

266
00:13:14,930 --> 00:13:21,310
consistency thank you for your attention

267
00:13:18,080 --> 00:13:21,310
I'd like to take questions

268
00:13:25,660 --> 00:13:31,189
okay this is very nice work and I like

269
00:13:29,120 --> 00:13:33,740
the idea of the three stage commit and

270
00:13:31,190 --> 00:13:36,320
do your version concurrence control but

271
00:13:33,740 --> 00:13:38,270
the one potential downside of the Java

272
00:13:36,320 --> 00:13:41,029
conference control is the lag of the

273
00:13:38,270 --> 00:13:43,730
person's right so for example in the

274
00:13:41,029 --> 00:13:45,470
case of the workload is right intensive

275
00:13:43,730 --> 00:13:48,470
and right is very skilled

276
00:13:45,470 --> 00:13:50,600
then the the same object person of the

277
00:13:48,470 --> 00:13:53,270
number of person for the same object can

278
00:13:50,600 --> 00:13:56,029
be gross very quickly then I guess the

279
00:13:53,270 --> 00:13:58,100
Pisces have to wait until they claim the

280
00:13:56,029 --> 00:14:00,740
previous versions right is that they

281
00:13:58,100 --> 00:14:02,330
could be the potential put our

282
00:14:00,740 --> 00:14:06,500
performance bar line

283
00:14:02,330 --> 00:14:09,920
yes things currently since the way

284
00:14:06,500 --> 00:14:12,800
design Pisces is really dominating the

285
00:14:09,920 --> 00:14:17,800
war clothes soap episode finally Pisces

286
00:14:12,800 --> 00:14:20,689
is a read oriented PDM it's a in in some

287
00:14:17,800 --> 00:14:24,890
alright dominated or closed it cannot

288
00:14:20,690 --> 00:14:28,250
perform where I think but maybe in some

289
00:14:24,890 --> 00:14:31,189
some some right right right most work

290
00:14:28,250 --> 00:14:32,990
laws such as as in this in this

291
00:14:31,190 --> 00:14:35,510
experiments we use T pieces in your

292
00:14:32,990 --> 00:14:39,410
order transactions and the update rate

293
00:14:35,510 --> 00:14:47,170
is a 100 percent peopIe Cisco also

294
00:14:39,410 --> 00:14:47,170
performs wear any other questions okay

295
00:14:47,410 --> 00:14:51,439
if there is no question less thanks to

296
00:14:50,060 --> 00:14:55,299
speaker once again

297
00:14:51,440 --> 00:14:55,299
[Applause]

