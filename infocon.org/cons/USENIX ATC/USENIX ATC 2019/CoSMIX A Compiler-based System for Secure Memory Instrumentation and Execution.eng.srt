1
00:00:10,810 --> 00:00:15,309
thanks for the kind introduction so this

2
00:00:13,540 --> 00:00:19,720
is cosmics the joint walk with Yun

3
00:00:15,309 --> 00:00:21,369
Christophe and Mark let's begin so we

4
00:00:19,720 --> 00:00:26,369
all know the night is dark and full of

5
00:00:21,369 --> 00:00:28,869
terrors but is it the night or the cloud

6
00:00:26,369 --> 00:00:30,029
where adversaries can lurk inside of

7
00:00:28,869 --> 00:00:32,590
machines

8
00:00:30,029 --> 00:00:36,580
luckily recent development in how our

9
00:00:32,590 --> 00:00:38,620
enclaves can help us the way to do that

10
00:00:36,580 --> 00:00:41,260
is that the shield applications from a

11
00:00:38,620 --> 00:00:43,390
privileged adversary's providing them

12
00:00:41,260 --> 00:00:45,699
confidentiality and integrity so they

13
00:00:43,390 --> 00:00:49,510
can even a malicious OS cannot read them

14
00:00:45,700 --> 00:00:51,550
or tamper with it and recent development

15
00:00:49,510 --> 00:00:53,050
in library operating system even allowed

16
00:00:51,550 --> 00:00:57,309
us to run and modify the application

17
00:00:53,050 --> 00:01:00,430
inside of enclaves such that every quest

18
00:00:57,309 --> 00:01:01,690
made to the operating system will be

19
00:01:00,430 --> 00:01:05,979
passed through the library operating

20
00:01:01,690 --> 00:01:10,380
system and be able to validate it and

21
00:01:05,979 --> 00:01:13,300
pass it on to the unclaimed seamlessly

22
00:01:10,380 --> 00:01:15,158
this current talk will focus on the

23
00:01:13,300 --> 00:01:17,860
current architecture of SGX enclaves

24
00:01:15,159 --> 00:01:19,960
that are integrated into recent Intel

25
00:01:17,860 --> 00:01:23,170
CPUs and the question we asked ourselves

26
00:01:19,960 --> 00:01:26,470
was can we execute any application

27
00:01:23,170 --> 00:01:29,350
inside of enclaves unfortunately the

28
00:01:26,470 --> 00:01:33,429
answer to that is no and as an example

29
00:01:29,350 --> 00:01:36,039
we look at memory mapped files so sequel

30
00:01:33,430 --> 00:01:37,840
Lite has a way to fastly read the

31
00:01:36,040 --> 00:01:41,979
database file by memory mapping it to

32
00:01:37,840 --> 00:01:44,170
its outer space then it will just access

33
00:01:41,979 --> 00:01:47,020
the memory as they did with any pointer

34
00:01:44,170 --> 00:01:49,360
to read the file the contents this will

35
00:01:47,020 --> 00:01:51,789
trigger if the page is not physically

36
00:01:49,360 --> 00:01:54,880
available a fault handler that will read

37
00:01:51,790 --> 00:01:57,549
the page contents and it does not apply

38
00:01:54,880 --> 00:01:58,990
only to file mapping previous works have

39
00:01:57,549 --> 00:02:01,770
shown that you could achieve just

40
00:01:58,990 --> 00:02:04,350
aggregate disaggregated memory support

41
00:02:01,770 --> 00:02:06,520
compressed memory and many other things

42
00:02:04,350 --> 00:02:09,910
because customization is a powerful

43
00:02:06,520 --> 00:02:11,500
tools and because it's so efficient and

44
00:02:09,910 --> 00:02:13,030
require no modifications for

45
00:02:11,500 --> 00:02:15,370
applications the way that applications

46
00:02:13,030 --> 00:02:18,459
are program right now is that they rely

47
00:02:15,370 --> 00:02:20,410
on these abstractions unfortunately it's

48
00:02:18,459 --> 00:02:23,080
not possible to do it in currently

49
00:02:20,410 --> 00:02:24,160
available SGX the reason is that the

50
00:02:23,080 --> 00:02:25,750
fault handler is

51
00:02:24,160 --> 00:02:30,040
Trust has it's part of the operating

52
00:02:25,750 --> 00:02:31,570
system so we can't use it and customize

53
00:02:30,040 --> 00:02:34,030
it as we would with traditional

54
00:02:31,570 --> 00:02:36,640
applications we also can't use the

55
00:02:34,030 --> 00:02:39,730
available HDX demand paging instructions

56
00:02:36,640 --> 00:02:42,339
because they're inflexible what we can

57
00:02:39,730 --> 00:02:44,459
do is try to use the Ninon clay vendor

58
00:02:42,340 --> 00:02:47,140
unfortunately that doesn't work either

59
00:02:44,460 --> 00:02:48,670
the reason is that first it's

60
00:02:47,140 --> 00:02:51,339
inefficient so let's take the following

61
00:02:48,670 --> 00:02:53,049
example on each fault we'll need to

62
00:02:51,340 --> 00:02:56,170
first exit the Enclave to the operating

63
00:02:53,050 --> 00:02:59,010
system will enter into an exception

64
00:02:56,170 --> 00:03:01,869
handler in the Enclave resolve the fault

65
00:02:59,010 --> 00:03:04,000
exit again to the operating system fault

66
00:03:01,870 --> 00:03:06,910
honor and resume the execution of the

67
00:03:04,000 --> 00:03:10,330
Enclave even for an empty fault ender

68
00:03:06,910 --> 00:03:12,329
this is two clave transitions which are

69
00:03:10,330 --> 00:03:15,010
known to be very costly

70
00:03:12,330 --> 00:03:17,770
apparently it's six times more costly

71
00:03:15,010 --> 00:03:21,100
compared to traditional page fault that

72
00:03:17,770 --> 00:03:22,480
we measured the second problem is that

73
00:03:21,100 --> 00:03:24,310
every time you take a fault

74
00:03:22,480 --> 00:03:26,040
when move to the operating system it

75
00:03:24,310 --> 00:03:27,970
might resolve the fault by itself

76
00:03:26,040 --> 00:03:29,799
resuming and replaying the last

77
00:03:27,970 --> 00:03:31,359
instruction without an clave being made

78
00:03:29,800 --> 00:03:35,410
aware that the fault handler never was

79
00:03:31,360 --> 00:03:37,209
executed and the key point is that and

80
00:03:35,410 --> 00:03:39,480
claves are really missing in always

81
00:03:37,209 --> 00:03:42,190
obstruction that applications relied on

82
00:03:39,480 --> 00:03:44,410
and previous walk comes to show that the

83
00:03:42,190 --> 00:03:46,390
sidestep does this lack of secure page

84
00:03:44,410 --> 00:03:48,940
fault handler to create in an clave

85
00:03:46,390 --> 00:03:51,130
paging support oblivious plays accesses

86
00:03:48,940 --> 00:03:54,190
and secure access to remote memory and

87
00:03:51,130 --> 00:03:56,290
much others many other things these are

88
00:03:54,190 --> 00:03:58,450
all we're all ad hoc solution the

89
00:03:56,290 --> 00:04:00,549
required modification to the application

90
00:03:58,450 --> 00:04:02,560
to support them and the question that

91
00:04:00,550 --> 00:04:04,830
arises is well why do we want to add

92
00:04:02,560 --> 00:04:08,110
more than one to the applications right

93
00:04:04,830 --> 00:04:09,550
we could use them customize an efficient

94
00:04:08,110 --> 00:04:11,140
page fault handler and we have an

95
00:04:09,550 --> 00:04:15,330
opportunity in our hands if we will be

96
00:04:11,140 --> 00:04:17,798
able to do that so to recap we need

97
00:04:15,330 --> 00:04:20,260
application needs efficient page fault

98
00:04:17,798 --> 00:04:22,870
handling support yet we can't rely on

99
00:04:20,260 --> 00:04:25,510
the current out well so what can we do

100
00:04:22,870 --> 00:04:28,180
well we can automatically change our

101
00:04:25,510 --> 00:04:30,010
applications by instrumenting their

102
00:04:28,180 --> 00:04:34,060
memory accesses and this is exactly

103
00:04:30,010 --> 00:04:35,710
cosmics that'll show next cosmics is an

104
00:04:34,060 --> 00:04:37,319
efficient instrument in compiler and

105
00:04:35,710 --> 00:04:40,198
runtime system

106
00:04:37,319 --> 00:04:42,330
and our basic observation in this walk

107
00:04:40,199 --> 00:04:44,639
was that well we don't really need to

108
00:04:42,330 --> 00:04:46,349
instrument every memory access so take

109
00:04:44,639 --> 00:04:48,270
for example the memory mapped files we

110
00:04:46,349 --> 00:04:51,808
don't need to instrument stack memory

111
00:04:48,270 --> 00:04:55,740
right so we decided on instrumentation

112
00:04:51,809 --> 00:04:57,569
policy that reduces the the over load on

113
00:04:55,740 --> 00:04:59,669
the programmers so they only need to

114
00:04:57,569 --> 00:05:01,289
annotate memory allocations that define

115
00:04:59,669 --> 00:05:04,139
the memory semantics to that memory

116
00:05:01,289 --> 00:05:06,599
regions and cosmics will automatically

117
00:05:04,139 --> 00:05:09,809
infer the memory accesses that needs to

118
00:05:06,599 --> 00:05:11,580
be instrumented in how but the question

119
00:05:09,809 --> 00:05:13,110
is how should we express the memory

120
00:05:11,580 --> 00:05:15,359
behavior or what is the interface that

121
00:05:13,110 --> 00:05:18,059
is needed for to support custom page

122
00:05:15,360 --> 00:05:21,180
fault engines right we need the new

123
00:05:18,059 --> 00:05:24,379
software obstruction and this is memory

124
00:05:21,180 --> 00:05:26,490
stores that are in short mem stores

125
00:05:24,379 --> 00:05:28,589
memory stalls are another layer of

126
00:05:26,490 --> 00:05:30,809
virtual memory on top of an abstract

127
00:05:28,589 --> 00:05:32,599
backing store and backing store can be

128
00:05:30,809 --> 00:05:35,399
anything it could be the volatile memory

129
00:05:32,599 --> 00:05:38,159
persistent storage even remote memory in

130
00:05:35,399 --> 00:05:39,719
the cloud it doesn't matter virtual

131
00:05:38,159 --> 00:05:40,770
memory on the other end is much more

132
00:05:39,719 --> 00:05:45,389
interesting

133
00:05:40,770 --> 00:05:47,339
so the basic interface for memory is

134
00:05:45,389 --> 00:05:49,919
thought of to support virtual memory

135
00:05:47,339 --> 00:05:52,229
apparently is to support a location in

136
00:05:49,919 --> 00:05:54,120
the allocations which means we need to

137
00:05:52,229 --> 00:05:56,938
instrument and provide callbacks for

138
00:05:54,120 --> 00:05:59,339
memory allocations and the second part

139
00:05:56,939 --> 00:06:01,469
is to write address translation and a

140
00:05:59,339 --> 00:06:03,749
paging system which means we need to

141
00:06:01,469 --> 00:06:06,209
instrument and provide callbacks for

142
00:06:03,749 --> 00:06:08,189
memory accesses let's focus the

143
00:06:06,209 --> 00:06:11,610
knowledge translation doing it in

144
00:06:08,189 --> 00:06:14,689
software translating addresses in for

145
00:06:11,610 --> 00:06:17,639
memory store - there backing store

146
00:06:14,689 --> 00:06:19,379
addresses is way more flexible than

147
00:06:17,639 --> 00:06:21,689
traditional page fault handling make

148
00:06:19,379 --> 00:06:24,050
customization I'm going to show an

149
00:06:21,689 --> 00:06:29,339
example in few slides and you understand

150
00:06:24,050 --> 00:06:30,990
so if we want to directly access our

151
00:06:29,339 --> 00:06:33,719
backing store we don't really need a

152
00:06:30,990 --> 00:06:36,089
paging system and a cache and we call

153
00:06:33,719 --> 00:06:40,769
this the site type of memory stores

154
00:06:36,089 --> 00:06:43,069
direct access memory stores let's take a

155
00:06:40,769 --> 00:06:45,779
look at the oblivious trauma or Ram

156
00:06:43,069 --> 00:06:47,909
sharam is a well-established security

157
00:06:45,779 --> 00:06:49,729
primitives that preserve the

158
00:06:47,909 --> 00:06:52,110
input-output behavior or of

159
00:06:49,729 --> 00:06:54,240
algorithms while obfuscating the

160
00:06:52,110 --> 00:06:56,990
distribution of memory accesses statute

161
00:06:54,240 --> 00:07:00,210
applies them from petitioner adversaries

162
00:06:56,990 --> 00:07:02,580
and it's a well-established security

163
00:07:00,210 --> 00:07:06,090
primitive that people have shown you can

164
00:07:02,580 --> 00:07:09,948
use in applications by modifying their

165
00:07:06,090 --> 00:07:13,500
access the memory access to to use that

166
00:07:09,949 --> 00:07:16,800
with cosmics it's much easier you simply

167
00:07:13,500 --> 00:07:20,490
need to instrument provide a callbacks

168
00:07:16,800 --> 00:07:23,130
for loads and stores use the Orem logic

169
00:07:20,490 --> 00:07:25,380
inside that and you'll get obfuscated

170
00:07:23,130 --> 00:07:30,389
memory access to whatever bad King story

171
00:07:25,380 --> 00:07:34,289
desired and all without ever changing a

172
00:07:30,389 --> 00:07:38,190
single line of code and this is really

173
00:07:34,289 --> 00:07:40,620
flexible if you don't want to access the

174
00:07:38,190 --> 00:07:42,630
storage any in every memory access they

175
00:07:40,620 --> 00:07:45,150
want to reduce the overhead we've posed

176
00:07:42,630 --> 00:07:48,030
adding a paging system and we call these

177
00:07:45,150 --> 00:07:50,280
cached memory stores so cache memory

178
00:07:48,030 --> 00:07:53,219
stores are essentially adding a page

179
00:07:50,280 --> 00:07:55,320
table and the page cache such that we

180
00:07:53,220 --> 00:07:58,260
will cache pages inside of a cache and

181
00:07:55,320 --> 00:08:01,620
store their translations and it's the

182
00:07:58,260 --> 00:08:04,500
use case with proposing to use them for

183
00:08:01,620 --> 00:08:06,090
in Enclave demand paging so previous

184
00:08:04,500 --> 00:08:08,130
walks show that in an clave demand

185
00:08:06,090 --> 00:08:11,130
paging can maintain the same security

186
00:08:08,130 --> 00:08:13,740
guarantees as traditional SGX paging but

187
00:08:11,130 --> 00:08:15,380
removing the cost of an clave exits

188
00:08:13,740 --> 00:08:18,150
therefore boosting the performance

189
00:08:15,380 --> 00:08:20,490
however that this previous work we

190
00:08:18,150 --> 00:08:22,710
called manual modifications and with

191
00:08:20,490 --> 00:08:24,810
memory stores it's very easy to do that

192
00:08:22,710 --> 00:08:27,719
because we only need to focus in the

193
00:08:24,810 --> 00:08:29,970
exact semantics of what we need so the

194
00:08:27,720 --> 00:08:32,039
backing store is the untrusted memory

195
00:08:29,970 --> 00:08:34,349
which is stuffed when created the page

196
00:08:32,039 --> 00:08:37,708
cache is the unclaimed Hardware

197
00:08:34,349 --> 00:08:40,320
protected memory so it doesn't need to

198
00:08:37,708 --> 00:08:41,880
be stopped or encrypted and the page

199
00:08:40,320 --> 00:08:44,550
table maps between them and we don't

200
00:08:41,880 --> 00:08:45,870
only need to focus on what paging

201
00:08:44,550 --> 00:08:50,279
actually does which is decryption and

202
00:08:45,870 --> 00:08:52,770
validation of pages we and later on

203
00:08:50,279 --> 00:08:54,270
every accesses to the same memory will

204
00:08:52,770 --> 00:08:56,400
be fetched from the cache so it's much

205
00:08:54,270 --> 00:08:58,500
more efficient and doesn't need to be

206
00:08:56,400 --> 00:09:02,640
copied decrypted and integrity validated

207
00:08:58,500 --> 00:09:03,920
on every further access so memory stores

208
00:09:02,640 --> 00:09:07,610
are very easy

209
00:09:03,920 --> 00:09:09,140
there's C and C++ bait it's small and

210
00:09:07,610 --> 00:09:11,120
simple interface which is function

211
00:09:09,140 --> 00:09:13,250
callback and we provide all the common

212
00:09:11,120 --> 00:09:15,860
building blocks and as an example it

213
00:09:13,250 --> 00:09:17,330
only took us a week once we have had

214
00:09:15,860 --> 00:09:20,510
everything sorted out to implement a

215
00:09:17,330 --> 00:09:23,390
memory mapped files memory stored as an

216
00:09:20,510 --> 00:09:25,010
end-to-end use case cosmics takes an

217
00:09:23,390 --> 00:09:27,650
annotated source code together with

218
00:09:25,010 --> 00:09:30,020
memory stores compile it into binary and

219
00:09:27,650 --> 00:09:31,730
can in is able to run with different

220
00:09:30,020 --> 00:09:33,260
library operating systems inside of

221
00:09:31,730 --> 00:09:36,200
enclaves like scone and Juna and

222
00:09:33,260 --> 00:09:38,569
graphene as a reminder we only need to

223
00:09:36,200 --> 00:09:40,940
annotate memory allocations and cosmics

224
00:09:38,570 --> 00:09:43,160
can automatically infer how to

225
00:09:40,940 --> 00:09:44,780
instrument every memory access so we can

226
00:09:43,160 --> 00:09:46,969
mix different memory stall in the same

227
00:09:44,780 --> 00:09:49,699
application in addition we can also

228
00:09:46,970 --> 00:09:52,420
stack memory stalls so we only need to

229
00:09:49,700 --> 00:09:55,820
instrument the allocation of a pointer

230
00:09:52,420 --> 00:09:57,680
to access it from memory store one for

231
00:09:55,820 --> 00:09:59,990
example but when we stole one also

232
00:09:57,680 --> 00:10:02,089
exercise memory so we can instrument

233
00:09:59,990 --> 00:10:04,160
that memory access as well with memory

234
00:10:02,090 --> 00:10:07,670
store 2 and stack them with the one on

235
00:10:04,160 --> 00:10:10,040
top of memory store - this is very

236
00:10:07,670 --> 00:10:13,550
powerful so take for example all RAM

237
00:10:10,040 --> 00:10:15,969
which performs multiple memory accesses

238
00:10:13,550 --> 00:10:18,859
in order to hide the access pattern

239
00:10:15,970 --> 00:10:22,520
which can result in memory thrashing

240
00:10:18,860 --> 00:10:25,070
especially when you use it in SGX to get

241
00:10:22,520 --> 00:10:29,210
orang we only need to annotate the

242
00:10:25,070 --> 00:10:31,700
pointers allocation to support exercise

243
00:10:29,210 --> 00:10:33,350
roarin but orem also existed memory so

244
00:10:31,700 --> 00:10:35,510
we can annotate that with self paging

245
00:10:33,350 --> 00:10:36,620
meaning we're gonna boost the

246
00:10:35,510 --> 00:10:38,480
performance because we're going to

247
00:10:36,620 --> 00:10:39,950
reduce the cost of in enclaves paging

248
00:10:38,480 --> 00:10:43,760
but also maintain their own security

249
00:10:39,950 --> 00:10:47,810
guarantees all without ever requiring

250
00:10:43,760 --> 00:10:51,560
any code changes being involved cosmics

251
00:10:47,810 --> 00:10:53,660
is efficient and we measured it - it's

252
00:10:51,560 --> 00:10:56,209
over it to be only 20% on the Phoenix

253
00:10:53,660 --> 00:10:58,939
wit and the way it's efficient it's

254
00:10:56,210 --> 00:11:01,120
because it provides selective

255
00:10:58,940 --> 00:11:04,339
instrumentation with pointer analysis

256
00:11:01,120 --> 00:11:07,670
reduces excess l2 cache memory stores

257
00:11:04,339 --> 00:11:11,089
using a software TLB and also reducing

258
00:11:07,670 --> 00:11:15,790
and intensive memory accesses mostly

259
00:11:11,089 --> 00:11:17,720
found in loops by proposing the new

260
00:11:15,790 --> 00:11:20,810
transformation that hoisting

261
00:11:17,720 --> 00:11:23,630
instrumentation wherever it is able for

262
00:11:20,810 --> 00:11:25,219
looping violent access and we encourage

263
00:11:23,630 --> 00:11:29,330
you to read more about this optimization

264
00:11:25,220 --> 00:11:31,700
in the paper let's take a look at the

265
00:11:29,330 --> 00:11:34,010
evaluation so we evaluated cosmics on

266
00:11:31,700 --> 00:11:35,540
different workloads ranging up to

267
00:11:34,010 --> 00:11:38,270
hundreds of thousands of lines of code

268
00:11:35,540 --> 00:11:41,949
to show its applicability we're going to

269
00:11:38,270 --> 00:11:45,530
focus specifically on these three next

270
00:11:41,950 --> 00:11:47,980
so memcache D we used with about six

271
00:11:45,530 --> 00:11:50,660
times the available STX memory

272
00:11:47,980 --> 00:11:55,160
performing random exercise for 1k byte

273
00:11:50,660 --> 00:11:58,360
of items 10% set and 90% gets we plotted

274
00:11:55,160 --> 00:12:00,790
the throughput latency graph and we

275
00:11:58,360 --> 00:12:03,080
ranked with test G X alone by

276
00:12:00,790 --> 00:12:05,870
instrumenting a single line annotating a

277
00:12:03,080 --> 00:12:07,430
single line of code within an clave page

278
00:12:05,870 --> 00:12:10,970
Inc we were able to boost the

279
00:12:07,430 --> 00:12:12,680
performance by more than two times we

280
00:12:10,970 --> 00:12:15,200
compare that to a manual a modified

281
00:12:12,680 --> 00:12:17,540
version of en clave paging in previous

282
00:12:15,200 --> 00:12:20,720
walk into our surprise it was 7% faster

283
00:12:17,540 --> 00:12:22,370
than that we attribute that to the

284
00:12:20,720 --> 00:12:23,620
different optimization offered by

285
00:12:22,370 --> 00:12:27,230
cosmics

286
00:12:23,620 --> 00:12:29,930
we also evaluated on sequel Lite using

287
00:12:27,230 --> 00:12:32,540
an encrypted database file and the Cavey

288
00:12:29,930 --> 00:12:35,839
tests shipped with sequel Lite to

289
00:12:32,540 --> 00:12:39,339
perform random exercise this plot shows

290
00:12:35,840 --> 00:12:43,550
the latency to access for K by 2 items

291
00:12:39,340 --> 00:12:45,560
where a lower is better in this plot we

292
00:12:43,550 --> 00:12:47,300
first configure sequel Lite to use no

293
00:12:45,560 --> 00:12:49,939
page cache and got very poor performance

294
00:12:47,300 --> 00:12:52,449
because every access needed to decrypt

295
00:12:49,940 --> 00:12:55,010
and validate the database file

296
00:12:52,450 --> 00:12:56,780
annotating memory mapped files in Seco

297
00:12:55,010 --> 00:13:00,350
light which required only two lines of

298
00:12:56,780 --> 00:13:03,740
code of annotations resulted in about

299
00:13:00,350 --> 00:13:07,430
four and a half time slow and faster

300
00:13:03,740 --> 00:13:09,440
access because the memory mapped files M

301
00:13:07,430 --> 00:13:12,079
store uses caching and a page cache and

302
00:13:09,440 --> 00:13:13,730
caches the contents of the page lighting

303
00:13:12,080 --> 00:13:18,710
the need to decrypt invalidate and

304
00:13:13,730 --> 00:13:20,480
integrity validate every page we used we

305
00:13:18,710 --> 00:13:23,150
then configure sequel Lite with its own

306
00:13:20,480 --> 00:13:26,280
page cache which is

307
00:13:23,150 --> 00:13:27,959
manually written and since it's a

308
00:13:26,280 --> 00:13:30,030
production quality application we

309
00:13:27,960 --> 00:13:32,310
believe it was highly optimized and

310
00:13:30,030 --> 00:13:35,040
twelve surprised it was only 27 percent

311
00:13:32,310 --> 00:13:36,719
faster then the memory-mapped file

312
00:13:35,040 --> 00:13:38,910
offered by cosmics showing that the

313
00:13:36,720 --> 00:13:41,370
overheads cosmics introduced are not

314
00:13:38,910 --> 00:13:43,410
that large

315
00:13:41,370 --> 00:13:45,480
the last example I'm going to talk about

316
00:13:43,410 --> 00:13:48,300
is the biometric identity checking

317
00:13:45,480 --> 00:13:50,700
server traditionally used when we travel

318
00:13:48,300 --> 00:13:53,040
internationally for example the way that

319
00:13:50,700 --> 00:13:56,880
walks we have a server that stalls the

320
00:13:53,040 --> 00:13:59,689
database of images and IDs and we take a

321
00:13:56,880 --> 00:14:02,370
query with an image and an ID and

322
00:13:59,690 --> 00:14:04,440
compare the two images and outputs

323
00:14:02,370 --> 00:14:07,110
either the image matches the persons or

324
00:14:04,440 --> 00:14:09,750
not so true or false we configure our

325
00:14:07,110 --> 00:14:12,450
server with more than two times the

326
00:14:09,750 --> 00:14:17,040
available unclear memory so they can be

327
00:14:12,450 --> 00:14:19,590
paging activity there and we annotated

328
00:14:17,040 --> 00:14:22,349
their database the database allocation

329
00:14:19,590 --> 00:14:27,510
using a ram so we will be able to

330
00:14:22,350 --> 00:14:29,580
maintain travelers privacy however Aurum

331
00:14:27,510 --> 00:14:33,930
is notoriously inefficient our

332
00:14:29,580 --> 00:14:39,290
implementation was actually 61 slower

333
00:14:33,930 --> 00:14:43,170
than traditional memory accesses however

334
00:14:39,290 --> 00:14:45,540
with cosmics I don't thinking a single

335
00:14:43,170 --> 00:14:49,579
line of code we were able to reduce that

336
00:14:45,540 --> 00:14:52,980
to only eight point six times slowdown

337
00:14:49,580 --> 00:14:55,470
since we only instrumented database

338
00:14:52,980 --> 00:14:58,500
accesses are not every access so this is

339
00:14:55,470 --> 00:15:00,870
this plot shows the max reboot achieved

340
00:14:58,500 --> 00:15:05,670
by the server so higher is better

341
00:15:00,870 --> 00:15:08,280
however it's much less than 61 times but

342
00:15:05,670 --> 00:15:10,290
that's not all by stacking Gorem on top

343
00:15:08,280 --> 00:15:12,560
of in and click paging reducing the cost

344
00:15:10,290 --> 00:15:16,829
of paging we were able to further reduce

345
00:15:12,560 --> 00:15:19,739
this slowdown up to about five and five

346
00:15:16,830 --> 00:15:22,770
point eight times slow down which might

347
00:15:19,740 --> 00:15:25,680
be applicable to some systems so to

348
00:15:22,770 --> 00:15:28,290
conclude our enclave's can improve the

349
00:15:25,680 --> 00:15:31,349
security of applications in our public

350
00:15:28,290 --> 00:15:33,599
clouds however the current how the

351
00:15:31,350 --> 00:15:35,870
hardware support limits the use of

352
00:15:33,600 --> 00:15:39,080
trusted page fault handlers

353
00:15:35,870 --> 00:15:42,140
cosmics can provide us the ability to

354
00:15:39,080 --> 00:15:43,610
use trusted page for tenders today and

355
00:15:42,140 --> 00:15:45,069
with efficient instrumentation we

356
00:15:43,610 --> 00:15:47,300
believe this can be a feasible approach

357
00:15:45,070 --> 00:15:50,580
thank you for your time and I'll be

358
00:15:47,300 --> 00:15:57,478
happy to take your questions

359
00:15:50,580 --> 00:15:57,479
[Applause]

360
00:16:00,490 --> 00:16:06,860
yeah Mario Yoshi pfl thank you very much

361
00:16:03,410 --> 00:16:08,420
for the talk it's not clear to me why do

362
00:16:06,860 --> 00:16:10,550
you need to do the instrumentation and

363
00:16:08,420 --> 00:16:12,650
which pointers you actually instrument

364
00:16:10,550 --> 00:16:15,250
do you require some specific domain

365
00:16:12,650 --> 00:16:19,040
knowledge in that and is there risk

366
00:16:15,250 --> 00:16:24,470
regarding the actual security of the of

367
00:16:19,040 --> 00:16:26,620
the whole thing so just so I'll recap

368
00:16:24,470 --> 00:16:30,950
the questions see that I understood it

369
00:16:26,620 --> 00:16:34,490
you're asking how should I instrument or

370
00:16:30,950 --> 00:16:36,730
which memory should I instrument so our

371
00:16:34,490 --> 00:16:41,330
instrumentation policy is dictated by

372
00:16:36,730 --> 00:16:43,010
annotations we require the developers to

373
00:16:41,330 --> 00:16:45,560
annotate their source code but just the

374
00:16:43,010 --> 00:16:49,069
location part so for instant take em

375
00:16:45,560 --> 00:16:51,279
Apple malach for example cause you need

376
00:16:49,070 --> 00:16:53,510
to instrument them you get back a

377
00:16:51,279 --> 00:16:57,200
predefined memory range that you operate

378
00:16:53,510 --> 00:16:59,750
on and cosmics can automatically infer

379
00:16:57,200 --> 00:17:01,400
how to instrument just that memory

380
00:16:59,750 --> 00:17:03,320
region with just that logic and not

381
00:17:01,400 --> 00:17:07,400
other memory region with other logic

382
00:17:03,320 --> 00:17:09,770
using text pointer approach so it's not

383
00:17:07,400 --> 00:17:12,620
all all my logs and M maps you you need

384
00:17:09,770 --> 00:17:15,770
to know which ones you have to into to

385
00:17:12,619 --> 00:17:18,109
annotate exactly we so the semantics is

386
00:17:15,770 --> 00:17:21,859
pretty clear in C and C++

387
00:17:18,109 --> 00:17:25,280
it affects what goes inside the VN clave

388
00:17:21,859 --> 00:17:27,379
and whatnot yes the the instrumented

389
00:17:25,280 --> 00:17:30,649
application the compiled to binary is

390
00:17:27,380 --> 00:17:33,010
running kinda inside down flav thank you

391
00:17:30,650 --> 00:17:33,010
sure

392
00:17:34,510 --> 00:17:40,760
I'd been your EPFL so again a great talk

393
00:17:38,090 --> 00:17:42,230
thank you so your approach to

394
00:17:40,760 --> 00:17:43,070
instrumentation is static if I

395
00:17:42,230 --> 00:17:44,809
understand right

396
00:17:43,070 --> 00:17:46,280
which means you you rely on static

397
00:17:44,809 --> 00:17:51,350
instrumentation you need to do a number

398
00:17:46,280 --> 00:17:53,780
of checks which are necessary but in the

399
00:17:51,350 --> 00:17:55,790
common case you actually never actually

400
00:17:53,780 --> 00:17:57,440
are accessing memory that is subject to

401
00:17:55,790 --> 00:17:59,420
paging so I was wondering whether you've

402
00:17:57,440 --> 00:18:01,400
looked at alternative which is these a

403
00:17:59,420 --> 00:18:03,500
more dynamic approach where you're

404
00:18:01,400 --> 00:18:07,820
optimistic and memory reference will

405
00:18:03,500 --> 00:18:10,220
actually not cause a paging access and

406
00:18:07,820 --> 00:18:13,280
then you rely on some kind of a hardware

407
00:18:10,220 --> 00:18:15,290
mechanism to identify the case the few

408
00:18:13,280 --> 00:18:17,510
locations that actually touch memory

409
00:18:15,290 --> 00:18:20,210
that is sensitive and then effectively

410
00:18:17,510 --> 00:18:22,400
you trade off the cost of instrumenting

411
00:18:20,210 --> 00:18:26,030
memory accesses that actually never

412
00:18:22,400 --> 00:18:27,710
become an issue with the with the one

413
00:18:26,030 --> 00:18:31,240
and I that by identifying the ones that

414
00:18:27,710 --> 00:18:34,760
actually in practice do cause the issue

415
00:18:31,240 --> 00:18:37,100
so the problem that we saw with the

416
00:18:34,760 --> 00:18:39,500
current available SGX is that we can't

417
00:18:37,100 --> 00:18:42,110
rely on the available Hardware mechanism

418
00:18:39,500 --> 00:18:45,410
as it is maybe there's some other hard

419
00:18:42,110 --> 00:18:48,250
water ecology could use but you can't

420
00:18:45,410 --> 00:18:51,160
rely to hardware to invoke your

421
00:18:48,250 --> 00:18:55,070
exception handler in the case of paging

422
00:18:51,160 --> 00:19:00,370
therefore you cannot rely on the logic

423
00:18:55,070 --> 00:19:05,689
being executed there to happen okay

424
00:19:00,370 --> 00:19:06,739
thank you sure okay let's say thank our

425
00:19:05,690 --> 00:19:12,140
speaker again

426
00:19:06,740 --> 00:19:12,140
[Applause]

