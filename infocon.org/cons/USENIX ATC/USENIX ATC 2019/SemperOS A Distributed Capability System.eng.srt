1
00:00:09,990 --> 00:00:14,610
so my name is Matias illa and I will

2
00:00:12,630 --> 00:00:17,100
talk about temporal s this wheel's

3
00:00:14,610 --> 00:00:19,410
capability system which is joint work of

4
00:00:17,100 --> 00:00:23,180
Neos Asmussen promote by Georgia and

5
00:00:19,410 --> 00:00:25,619
hamon artists so we thought about how

6
00:00:23,180 --> 00:00:28,590
distributed system would be build betas

7
00:00:25,619 --> 00:00:30,570
based on capabilities and how exactly

8
00:00:28,590 --> 00:00:33,149
the rights management would be done in

9
00:00:30,570 --> 00:00:35,120
such a system typically the system which

10
00:00:33,149 --> 00:00:38,480
consists of nodes and each node has a

11
00:00:35,120 --> 00:00:40,709
local capability system which is

12
00:00:38,480 --> 00:00:42,690
managing the access rights locally and

13
00:00:40,710 --> 00:00:44,340
then the resources of a node are exposed

14
00:00:42,690 --> 00:00:46,010
why are some kind of interface typically

15
00:00:44,340 --> 00:00:49,019
a POSIX interface or something like that

16
00:00:46,010 --> 00:00:52,920
and all of these nodes we built the

17
00:00:49,019 --> 00:00:55,858
disputed system itself so but to

18
00:00:52,920 --> 00:00:57,899
actually reuse the benefits of using a

19
00:00:55,859 --> 00:00:59,879
capability system like building a system

20
00:00:57,899 --> 00:01:01,739
with the principle of least Authority we

21
00:00:59,879 --> 00:01:04,378
want to enforce the capabilities on a

22
00:01:01,739 --> 00:01:06,360
global scale so we would like to put the

23
00:01:04,379 --> 00:01:08,430
disability capability system in the

24
00:01:06,360 --> 00:01:10,250
distributed system so the capability

25
00:01:08,430 --> 00:01:13,050
system in the distributed system itself

26
00:01:10,250 --> 00:01:14,939
so and the question now is can we build

27
00:01:13,050 --> 00:01:16,950
such a capability system does it scale

28
00:01:14,939 --> 00:01:21,809
once we have it at that size or is it a

29
00:01:16,950 --> 00:01:23,189
showstopper itself and to get ready I

30
00:01:21,810 --> 00:01:25,020
want to make sure we're all on the same

31
00:01:23,189 --> 00:01:28,199
page and I talked about the capability

32
00:01:25,020 --> 00:01:30,689
so for me a capability is a pointer to a

33
00:01:28,200 --> 00:01:33,030
resource with a associated access rights

34
00:01:30,689 --> 00:01:34,949
and the year this stick man is

35
00:01:33,030 --> 00:01:37,070
resembling a process which has the

36
00:01:34,950 --> 00:01:39,750
capability that points to a resource and

37
00:01:37,070 --> 00:01:41,669
the capability itself is also recorded

38
00:01:39,750 --> 00:01:43,950
in a capability tree inside of the

39
00:01:41,670 --> 00:01:45,600
operating system this tree is later on

40
00:01:43,950 --> 00:01:48,960
important to implement things like

41
00:01:45,600 --> 00:01:51,329
relocation if the process now wants to

42
00:01:48,960 --> 00:01:54,389
share the axis with another process it

43
00:01:51,329 --> 00:01:55,859
can delegate the capability which grants

44
00:01:54,390 --> 00:01:57,930
the second process access to the

45
00:01:55,859 --> 00:01:59,880
resource service that's how you could

46
00:01:57,930 --> 00:02:01,920
for example establish shared memory and

47
00:01:59,880 --> 00:02:04,979
this delegation can be done multiple

48
00:02:01,920 --> 00:02:08,820
times if the sharing is now no longer

49
00:02:04,979 --> 00:02:11,340
desired you would initiate a revoke

50
00:02:08,820 --> 00:02:13,620
operation which causes the operating

51
00:02:11,340 --> 00:02:15,810
system to search the capabilities in the

52
00:02:13,620 --> 00:02:19,200
capability tree that need to be revoked

53
00:02:15,810 --> 00:02:21,920
and then revokes the accesses from the

54
00:02:19,200 --> 00:02:23,609
processes so this is one way of

55
00:02:21,920 --> 00:02:27,269
implementing ok

56
00:02:23,610 --> 00:02:29,670
the way that we use and we search for

57
00:02:27,270 --> 00:02:31,920
capability systems and looked at several

58
00:02:29,670 --> 00:02:35,100
of them and try to do a little bit of

59
00:02:31,920 --> 00:02:36,929
characterization in terms of their scope

60
00:02:35,100 --> 00:02:40,560
and how they enforce the access rights

61
00:02:36,930 --> 00:02:42,300
and how scalable they are could be and

62
00:02:40,560 --> 00:02:44,640
the first one is actually a class of

63
00:02:42,300 --> 00:02:48,450
capability systems like the for systems

64
00:02:44,640 --> 00:02:50,549
with SEL for n fiasco as one of the two

65
00:02:48,450 --> 00:02:52,339
of them implementations so they are

66
00:02:50,550 --> 00:02:54,840
implemented on cache coherence systems

67
00:02:52,340 --> 00:02:57,060
meaning their their scope is basically

68
00:02:54,840 --> 00:02:58,650
the cache coherence domain and the

69
00:02:57,060 --> 00:03:02,010
enforcement is done via the memory

70
00:02:58,650 --> 00:03:05,070
management unit for all sorts of memory

71
00:03:02,010 --> 00:03:06,750
related resources or for the kernel for

72
00:03:05,070 --> 00:03:09,600
virtual resources like communication

73
00:03:06,750 --> 00:03:11,160
channels sounds like that and in terms

74
00:03:09,600 --> 00:03:13,220
of scalability is probably scales as

75
00:03:11,160 --> 00:03:16,530
long as your coherence the main scales

76
00:03:13,220 --> 00:03:17,340
then there's m3 which some of you might

77
00:03:16,530 --> 00:03:20,780
already know

78
00:03:17,340 --> 00:03:23,959
due to the other talked earlier on m3 X

79
00:03:20,780 --> 00:03:26,610
which is a hardware software code design

80
00:03:23,959 --> 00:03:28,680
which implements which does not rely on

81
00:03:26,610 --> 00:03:30,720
cache coherence and therefore scales to

82
00:03:28,680 --> 00:03:32,310
a machine as long as the components are

83
00:03:30,720 --> 00:03:34,440
connected by a network and chip or a

84
00:03:32,310 --> 00:03:36,900
network in the side of the machine and

85
00:03:34,440 --> 00:03:41,459
the enforcement is done by a unit called

86
00:03:36,900 --> 00:03:43,440
data transfer unit where the DTU or for

87
00:03:41,459 --> 00:03:47,070
other results for virtual resources at

88
00:03:43,440 --> 00:03:49,140
by the kernel as well so and m3 in its

89
00:03:47,070 --> 00:03:50,850
version based version is using one

90
00:03:49,140 --> 00:03:52,679
kernel which then becomes the

91
00:03:50,850 --> 00:03:55,019
scalability bottleneck if you use more

92
00:03:52,680 --> 00:03:57,980
and more cores and then there's also

93
00:03:55,019 --> 00:04:00,480
better fish as a capability system which

94
00:03:57,980 --> 00:04:02,488
also does not rely on cache coherence so

95
00:04:00,480 --> 00:04:05,730
it has the scope of a machine and is

96
00:04:02,489 --> 00:04:08,250
shown to be scalable up to 32 cores so

97
00:04:05,730 --> 00:04:10,799
since we undressed in familiar very

98
00:04:08,250 --> 00:04:12,510
familiar with the m3 and it's the the

99
00:04:10,800 --> 00:04:14,820
latest research development prototype

100
00:04:12,510 --> 00:04:20,310
here I decided to use and three as the

101
00:04:14,820 --> 00:04:22,530
basis of our system so we employ runs

102
00:04:20,310 --> 00:04:24,900
one kernel which is running on his

103
00:04:22,530 --> 00:04:27,599
dedicated core and it's running it's on

104
00:04:24,900 --> 00:04:30,179
a privileged core and this core remotely

105
00:04:27,600 --> 00:04:33,180
configures the application course there

106
00:04:30,180 --> 00:04:36,060
are shown in yellow here it configures

107
00:04:33,180 --> 00:04:36,840
the DTU of the core so the the course

108
00:04:36,060 --> 00:04:38,370
can only access

109
00:04:36,840 --> 00:04:40,789
resources they have appropriate access

110
00:04:38,370 --> 00:04:43,080
rights titude so this system called

111
00:04:40,790 --> 00:04:45,360
mechanism also was kind of different the

112
00:04:43,080 --> 00:04:46,889
the process running on the application

113
00:04:45,360 --> 00:04:49,470
course sends a message to the kernel and

114
00:04:46,889 --> 00:04:52,740
requests any kind of resource or service

115
00:04:49,470 --> 00:04:53,729
at once and similarly an application

116
00:04:52,740 --> 00:04:56,130
would request for example a

117
00:04:53,729 --> 00:04:58,229
communication channel to be set up and

118
00:04:56,130 --> 00:05:00,300
then the kernel configures the dtu's of

119
00:04:58,229 --> 00:05:01,800
the rightmost application course

120
00:05:00,300 --> 00:05:05,940
appropriately so they can talk to each

121
00:05:01,800 --> 00:05:08,190
other in semper s we extended this to be

122
00:05:05,940 --> 00:05:09,810
a multi kernel design so we partitioned

123
00:05:08,190 --> 00:05:14,600
our system which is shown here by the

124
00:05:09,810 --> 00:05:16,979
colored boxes and each kernel is

125
00:05:14,600 --> 00:05:19,020
managing the application course in its

126
00:05:16,979 --> 00:05:22,139
partition and also the capabilities of

127
00:05:19,020 --> 00:05:24,060
its partition but the relations between

128
00:05:22,139 --> 00:05:27,479
the capabilities can cross partition

129
00:05:24,060 --> 00:05:29,520
borders so we need somehow a mechanism

130
00:05:27,479 --> 00:05:32,760
to to identify relations between those

131
00:05:29,520 --> 00:05:35,609
partitions which actually are between

132
00:05:32,760 --> 00:05:39,900
different cones and that's what we call

133
00:05:35,610 --> 00:05:42,180
the disputed data lookups now here in

134
00:05:39,900 --> 00:05:43,950
this example we have kernels and kernel

135
00:05:42,180 --> 00:05:46,139
a and B two partitions and these kernels

136
00:05:43,950 --> 00:05:49,800
have processes which are the stickmen

137
00:05:46,139 --> 00:05:52,470
over there and these processes have

138
00:05:49,800 --> 00:05:54,300
capabilities and we already know how to

139
00:05:52,470 --> 00:05:57,360
do this capability measurement engine

140
00:05:54,300 --> 00:05:59,250
local partition but now we also have

141
00:05:57,360 --> 00:06:01,919
these cross partition relations and

142
00:05:59,250 --> 00:06:06,180
let's look into the capability itself we

143
00:06:01,919 --> 00:06:08,370
have an ID and then AB capability has

144
00:06:06,180 --> 00:06:12,120
parent and a list of children typically

145
00:06:08,370 --> 00:06:16,110
and we use the this ID as sort of a fat

146
00:06:12,120 --> 00:06:18,599
pointer so B uses a particular part of

147
00:06:16,110 --> 00:06:22,289
this ID to identify to which partition a

148
00:06:18,599 --> 00:06:25,200
capability actually belongs so now we

149
00:06:22,289 --> 00:06:27,090
have two separate or at least two

150
00:06:25,200 --> 00:06:30,090
separate partitions with parallel

151
00:06:27,090 --> 00:06:31,590
operations going on Cullen's working on

152
00:06:30,090 --> 00:06:34,200
the capability tree on the global

153
00:06:31,590 --> 00:06:37,320
capability tree in parallel so what

154
00:06:34,200 --> 00:06:40,050
could possibly go wrong I will show you

155
00:06:37,320 --> 00:06:41,969
walk you through two examples the first

156
00:06:40,050 --> 00:06:45,599
one is a problem problem that appears

157
00:06:41,970 --> 00:06:47,430
during relocations so we have three

158
00:06:45,599 --> 00:06:49,760
partitions in this example three

159
00:06:47,430 --> 00:06:52,160
processes one per partition and it

160
00:06:49,760 --> 00:06:54,530
capability did capability that has been

161
00:06:52,160 --> 00:06:57,800
delegated from the first to the second

162
00:06:54,530 --> 00:07:00,200
to the third partition now there are two

163
00:06:57,800 --> 00:07:02,210
vocation operations appearing so this is

164
00:07:00,200 --> 00:07:06,380
these are two separate operations

165
00:07:02,210 --> 00:07:08,930
appearing at the same time the first the

166
00:07:06,380 --> 00:07:10,640
leftmost process revokes its own

167
00:07:08,930 --> 00:07:12,700
capability and the second the middle

168
00:07:10,640 --> 00:07:15,710
process revokes the capability as well

169
00:07:12,700 --> 00:07:19,190
so in a simple implementation Colonel a

170
00:07:15,710 --> 00:07:21,169
and Colonel B would simultaneously

171
00:07:19,190 --> 00:07:23,560
clean up their capabilities and then

172
00:07:21,170 --> 00:07:25,940
certain messages to the other Colonel's

173
00:07:23,560 --> 00:07:28,070
following down the graph of the

174
00:07:25,940 --> 00:07:31,580
capabilities to remove the other cape

175
00:07:28,070 --> 00:07:33,200
caps so now Colonel B thinks that

176
00:07:31,580 --> 00:07:35,300
there's no capability anymore because it

177
00:07:33,200 --> 00:07:38,750
already deleted capabilities C and it

178
00:07:35,300 --> 00:07:40,370
sent the request to Colonel C which is

179
00:07:38,750 --> 00:07:42,620
kind of busy at that time and so the

180
00:07:40,370 --> 00:07:44,780
revocation is still waiting to be

181
00:07:42,620 --> 00:07:47,360
finished but currently actually thinks

182
00:07:44,780 --> 00:07:48,880
the revocation is done I'm sorry in this

183
00:07:47,360 --> 00:07:51,860
point of time we have a race where

184
00:07:48,880 --> 00:07:53,960
Kallay thinks the vacation is done and

185
00:07:51,860 --> 00:07:56,570
could you give the resource to someone

186
00:07:53,960 --> 00:08:00,010
else but actually the process in the

187
00:07:56,570 --> 00:08:04,550
third partition still has access to this

188
00:08:00,010 --> 00:08:07,730
so and a second problem we come across

189
00:08:04,550 --> 00:08:09,350
is when we look at the delegation in

190
00:08:07,730 --> 00:08:12,140
this example we'll use the same example

191
00:08:09,350 --> 00:08:16,300
basically but we add a fourth process to

192
00:08:12,140 --> 00:08:20,479
the first partition and we again have to

193
00:08:16,300 --> 00:08:22,760
part two parallel operations the first

194
00:08:20,480 --> 00:08:25,370
is to revoke for the first process and

195
00:08:22,760 --> 00:08:28,550
partition a and the second operation is

196
00:08:25,370 --> 00:08:32,000
the delegation in the partition of

197
00:08:28,550 --> 00:08:37,549
Colonel B so this delegation shall be

198
00:08:32,000 --> 00:08:39,440
done to do the fourth process and now

199
00:08:37,549 --> 00:08:41,419
the next step is that Colonel a things

200
00:08:39,440 --> 00:08:43,099
okay I will clean up this price this

201
00:08:41,419 --> 00:08:45,170
capability here and then send the

202
00:08:43,099 --> 00:08:48,800
request to Colonel B to clean up its

203
00:08:45,170 --> 00:08:52,250
capability and in the same time Colonel

204
00:08:48,800 --> 00:08:54,140
B sends a message that it it shows it

205
00:08:52,250 --> 00:08:58,250
pushes a capability at the delegation of

206
00:08:54,140 --> 00:09:01,880
c2 to Colonel aid but it does not yet

207
00:08:58,250 --> 00:09:03,379
have a connection that connects c2 with

208
00:09:01,880 --> 00:09:06,499
the new capability instead it

209
00:09:03,379 --> 00:09:09,079
cleans up situ and kernel a in the next

210
00:09:06,499 --> 00:09:11,059
step creates the capability that it just

211
00:09:09,079 --> 00:09:13,248
received from Colonel B but this

212
00:09:11,059 --> 00:09:14,839
capability is basically an orphan so

213
00:09:13,249 --> 00:09:16,699
it's there's there's no parent

214
00:09:14,839 --> 00:09:20,269
capability of that and there's also no

215
00:09:16,699 --> 00:09:23,779
way to to go back that way so there's a

216
00:09:20,269 --> 00:09:25,399
capability that is a security risk at

217
00:09:23,779 --> 00:09:29,629
this point in time when the relocation

218
00:09:25,399 --> 00:09:32,809
finish this capability is left over and

219
00:09:29,629 --> 00:09:34,639
in the process there the fourth process

220
00:09:32,809 --> 00:09:37,129
has access to resource with which it

221
00:09:34,639 --> 00:09:39,139
should not have so we solve this by

222
00:09:37,129 --> 00:09:42,619
implementing it in kind of a two way

223
00:09:39,139 --> 00:09:44,419
handshake fashion so I will just show

224
00:09:42,619 --> 00:09:46,309
you the delegation operation itself

225
00:09:44,419 --> 00:09:48,829
without the second operation in parallel

226
00:09:46,309 --> 00:09:50,238
so if we do a delegation we actually

227
00:09:48,829 --> 00:09:52,579
send a message to Colonel that it's

228
00:09:50,239 --> 00:09:54,949
quite the same and now the currently a

229
00:09:52,579 --> 00:09:56,868
just does a sort of a reserve

230
00:09:54,949 --> 00:09:59,348
reservation for the capability it does

231
00:09:56,869 --> 00:10:02,119
not yet insert the capability into the

232
00:09:59,349 --> 00:10:05,389
in the 2d program into the process it

233
00:10:02,119 --> 00:10:08,419
just identifies it sets up an ID and

234
00:10:05,389 --> 00:10:10,970
then sends a ready message to Colonel B

235
00:10:08,419 --> 00:10:12,289
that contains this ID so Colonel B can

236
00:10:10,970 --> 00:10:14,659
actually make a connection in the

237
00:10:12,289 --> 00:10:17,149
children list the list of children of

238
00:10:14,659 --> 00:10:21,739
capability to c2 sends an acknowledgment

239
00:10:17,149 --> 00:10:23,359
and now the the connection is set up and

240
00:10:21,739 --> 00:10:28,669
this would have prevented the ID year

241
00:10:23,359 --> 00:10:30,739
Eero we had in the scenario earlier so

242
00:10:28,669 --> 00:10:32,419
we looked at all kinds of interferences

243
00:10:30,739 --> 00:10:34,639
that can appear with the capability

244
00:10:32,419 --> 00:10:36,049
operations we have in our system and we

245
00:10:34,639 --> 00:10:38,359
also discussed the solutions in more

246
00:10:36,049 --> 00:10:40,129
detail in our paper for example the

247
00:10:38,359 --> 00:10:41,619
revocation problem is soft with the sort

248
00:10:40,129 --> 00:10:44,720
of it's distributed mark-and-sweep

249
00:10:41,619 --> 00:10:47,859
algorithm and then we we combined all of

250
00:10:44,720 --> 00:10:50,059
this together in a protocol that's

251
00:10:47,859 --> 00:10:54,019
solving the the disputed capability

252
00:10:50,059 --> 00:10:57,829
systems issues here we evaluated our

253
00:10:54,019 --> 00:11:02,599
system in a Gen 5 simulation where we

254
00:10:57,829 --> 00:11:06,319
used 640 out of order cores in the yep

255
00:11:02,599 --> 00:11:08,929
exactly and we had retry application

256
00:11:06,319 --> 00:11:11,478
traces recorded in Linux and then we

257
00:11:08,929 --> 00:11:14,299
replayed them and their timing behavior

258
00:11:11,479 --> 00:11:16,970
in seberus in which we implemented all

259
00:11:14,299 --> 00:11:20,240
the necessary system calls

260
00:11:16,970 --> 00:11:21,560
the OS service we use is a file system

261
00:11:20,240 --> 00:11:24,710
which is heavily used by the

262
00:11:21,560 --> 00:11:27,619
applications and this is an in-memory

263
00:11:24,710 --> 00:11:29,570
file system which uses the capability

264
00:11:27,620 --> 00:11:32,720
system to get to give an application

265
00:11:29,570 --> 00:11:35,360
access to a file so we have file

266
00:11:32,720 --> 00:11:38,060
multiple extents and if you open read or

267
00:11:35,360 --> 00:11:41,060
write to that file you get a capability

268
00:11:38,060 --> 00:11:42,890
to a range of memory and this range of

269
00:11:41,060 --> 00:11:45,140
values within this file now if you're a

270
00:11:42,890 --> 00:11:46,910
read or write operation exceeds this

271
00:11:45,140 --> 00:11:50,120
range of memory you will go to the

272
00:11:46,910 --> 00:11:52,430
servers again and the service will grant

273
00:11:50,120 --> 00:11:55,130
you access to another memory capability

274
00:11:52,430 --> 00:11:57,949
that gives you the next extent basically

275
00:11:55,130 --> 00:11:59,870
and if you close your file all the

276
00:11:57,950 --> 00:12:01,550
capabilities you've got for this file

277
00:11:59,870 --> 00:12:05,270
will be closed again it will be revoked

278
00:12:01,550 --> 00:12:07,520
again so we selected a number of

279
00:12:05,270 --> 00:12:10,310
applications among them is torrent

280
00:12:07,520 --> 00:12:13,520
antara whoo pecker and unpacked a number

281
00:12:10,310 --> 00:12:15,560
of files find which searches directly

282
00:12:13,520 --> 00:12:17,270
basically and then sequel I'd as a small

283
00:12:15,560 --> 00:12:21,319
database engine level DB as a key value

284
00:12:17,270 --> 00:12:25,870
store where we insert and select and

285
00:12:21,320 --> 00:12:30,140
remove some values and post mark as a

286
00:12:25,870 --> 00:12:32,120
filesystem benchmark on the left two

287
00:12:30,140 --> 00:12:34,130
columns you see the number of capability

288
00:12:32,120 --> 00:12:38,600
operations that happen if you execute

289
00:12:34,130 --> 00:12:39,980
one of such application and these these

290
00:12:38,600 --> 00:12:43,190
numbers are kind of small because we had

291
00:12:39,980 --> 00:12:45,260
to strip them down to keep the

292
00:12:43,190 --> 00:12:49,450
simulation time and the reasonable time

293
00:12:45,260 --> 00:12:52,220
frame so that's the reason why and if we

294
00:12:49,450 --> 00:12:54,020
on the right side you see the number of

295
00:12:52,220 --> 00:12:57,590
capability operations and the operation

296
00:12:54,020 --> 00:13:00,560
rate if we execute 512 capability

297
00:12:57,590 --> 00:13:03,320
operate application instances in

298
00:13:00,560 --> 00:13:04,670
parallel so there we achieve up to three

299
00:13:03,320 --> 00:13:06,800
hundred and forty eight thousand

300
00:13:04,670 --> 00:13:11,030
capability operations per second for the

301
00:13:06,800 --> 00:13:12,229
postmark benchmark so we we did a number

302
00:13:11,030 --> 00:13:14,800
of measurements and I wanted to show you

303
00:13:12,230 --> 00:13:19,030
one here for those applications that

304
00:13:14,800 --> 00:13:20,750
chose the parallel efficiency which is

305
00:13:19,030 --> 00:13:23,380
basically showing the performance

306
00:13:20,750 --> 00:13:25,760
overhead that one application instance

307
00:13:23,380 --> 00:13:29,420
experiences if it is run in parallel

308
00:13:25,760 --> 00:13:30,640
with a number of other instances of the

309
00:13:29,420 --> 00:13:33,040
same application

310
00:13:30,640 --> 00:13:38,199
so 100% pearl efficiency shows the ideal

311
00:13:33,040 --> 00:13:41,560
scaling basically and we have we reached

312
00:13:38,200 --> 00:13:44,920
a pearl efficiency of 72 to 78 percent

313
00:13:41,560 --> 00:13:47,459
in this configuration where we use 11

314
00:13:44,920 --> 00:13:50,550
percent of the system course for the OS

315
00:13:47,459 --> 00:13:52,869
and there we we have different

316
00:13:50,550 --> 00:13:55,779
configurations that we looked at in the

317
00:13:52,870 --> 00:13:57,640
paper when we use less or more cores for

318
00:13:55,779 --> 00:14:01,029
the kernel and that's a more core course

319
00:13:57,640 --> 00:14:02,769
for the file system service and we also

320
00:14:01,029 --> 00:14:05,290
discussed the trade-off between the

321
00:14:02,769 --> 00:14:07,180
system efficiency to use the course for

322
00:14:05,290 --> 00:14:09,279
the application or for the operating

323
00:14:07,180 --> 00:14:13,620
system you can find the details in the

324
00:14:09,279 --> 00:14:16,480
paper we had another application

325
00:14:13,620 --> 00:14:19,450
implemented here which is the nginx web

326
00:14:16,480 --> 00:14:22,089
server where we modified one of the

327
00:14:19,450 --> 00:14:23,769
course to be a network interface which

328
00:14:22,089 --> 00:14:28,380
floods the application covers which are

329
00:14:23,769 --> 00:14:31,390
now nginx processes with requests and

330
00:14:28,380 --> 00:14:35,079
yeah the they answer as fast as they can

331
00:14:31,390 --> 00:14:38,760
and stress devices in this moment as

332
00:14:35,079 --> 00:14:41,620
well here you see some of the there is

333
00:14:38,760 --> 00:14:43,329
configurations so if we use just a

334
00:14:41,620 --> 00:14:46,060
kernels and eight services basically

335
00:14:43,329 --> 00:14:48,130
eight cores for a kernel we have eight

336
00:14:46,060 --> 00:14:52,329
partitions in that system so and eight

337
00:14:48,130 --> 00:14:54,519
services we do scale not so far but if

338
00:14:52,329 --> 00:14:58,810
he is 32 kernels and 32 services we

339
00:14:54,519 --> 00:15:01,870
scale almost linearly so to conclude we

340
00:14:58,810 --> 00:15:04,000
built semper s is which includes a

341
00:15:01,870 --> 00:15:06,790
scalable distributed capability system

342
00:15:04,000 --> 00:15:09,250
we built up on Global Knowledge about

343
00:15:06,790 --> 00:15:13,089
our capabilities we have a efficient

344
00:15:09,250 --> 00:15:15,699
identity identifier scheme and to reach

345
00:15:13,089 --> 00:15:19,269
up to 78% of parallel efficiency when we

346
00:15:15,699 --> 00:15:22,810
use 11% of our course for OS services

347
00:15:19,269 --> 00:15:25,089
and it seems like finally capability

348
00:15:22,810 --> 00:15:27,219
systems to scale and we will look

349
00:15:25,089 --> 00:15:28,720
further into this so I'm happy to take

350
00:15:27,220 --> 00:15:35,999
questions

351
00:15:28,720 --> 00:15:35,999
[Applause]

352
00:15:36,140 --> 00:15:40,620
well let me ask you a question so I

353
00:15:38,670 --> 00:15:43,229
really appreciate appreciate the amount

354
00:15:40,620 --> 00:15:45,630
of evaluation but I'm still a little bit

355
00:15:43,230 --> 00:15:51,360
too confused about what is the main kind

356
00:15:45,630 --> 00:15:54,930
of insight how do you scale okay so I

357
00:15:51,360 --> 00:15:57,890
think that scaling to 512 applications

358
00:15:54,930 --> 00:16:02,729
with a reasonable amount of overhead is

359
00:15:57,890 --> 00:16:05,040
is good so far I'm not sure how it would

360
00:16:02,730 --> 00:16:07,680
look like if you scale to 2,000 cores

361
00:16:05,040 --> 00:16:09,599
but what probably I'm you misunderstood

362
00:16:07,680 --> 00:16:11,069
me I would I was trying to understand

363
00:16:09,600 --> 00:16:12,720
what is the technical or kind of what

364
00:16:11,070 --> 00:16:14,880
kind of set of mechanisms and

365
00:16:12,720 --> 00:16:19,890
abstractions you used to provide the

366
00:16:14,880 --> 00:16:21,810
scalability okay so we we try to keep

367
00:16:19,890 --> 00:16:25,230
the traffic for example for relocation

368
00:16:21,810 --> 00:16:27,270
loads we do that's has spread so many

369
00:16:25,230 --> 00:16:29,340
copies we do not spend so many cache

370
00:16:27,270 --> 00:16:31,650
copies of capabilities in comparison to

371
00:16:29,340 --> 00:16:34,320
other capability systems so we always

372
00:16:31,650 --> 00:16:35,880
know where an object is in the system

373
00:16:34,320 --> 00:16:38,160
where a capability is in the system so

374
00:16:35,880 --> 00:16:40,260
we know where to go for example if we

375
00:16:38,160 --> 00:16:42,270
have capabilities rep spread across the

376
00:16:40,260 --> 00:16:45,120
system there's no broadcast or anything

377
00:16:42,270 --> 00:16:49,050
involved that would not scale easily to

378
00:16:45,120 --> 00:16:50,600
bigger numbers thank you all right John

379
00:16:49,050 --> 00:16:53,640
Criswell University of Rochester I

380
00:16:50,600 --> 00:16:55,140
apologize for my confusion but with the

381
00:16:53,640 --> 00:16:56,430
workloads that you tested I don't

382
00:16:55,140 --> 00:16:59,090
understand where the delegation

383
00:16:56,430 --> 00:17:02,609
revocation operations are coming from

384
00:16:59,090 --> 00:17:05,069
okay so the the workloads they all make

385
00:17:02,610 --> 00:17:07,200
heavily heavy use of the file system and

386
00:17:05,069 --> 00:17:10,439
the fight system delegates memory

387
00:17:07,200 --> 00:17:12,180
capabilities to you so you have each

388
00:17:10,440 --> 00:17:15,090
time you open a file you you get a

389
00:17:12,180 --> 00:17:16,830
memory capability to that file it's

390
00:17:15,089 --> 00:17:20,429
revoked again equivalent to a UNIX file

391
00:17:16,829 --> 00:17:22,409
descriptor correct so if you see the

392
00:17:20,430 --> 00:17:23,940
capability of the file it's kind of like

393
00:17:22,410 --> 00:17:25,980
in UNIX you get a file descriptor to the

394
00:17:23,940 --> 00:17:28,650
file correct if you see the UNIX file

395
00:17:25,980 --> 00:17:30,600
descriptor as a capability it is yes and

396
00:17:28,650 --> 00:17:31,740
then you you delegate it and the

397
00:17:30,600 --> 00:17:35,250
difference to the file descriptors and

398
00:17:31,740 --> 00:17:38,100
that you know who has a capability and

399
00:17:35,250 --> 00:17:40,620
you can revoke all of them okay so you

400
00:17:38,100 --> 00:17:43,409
basically have delegation or revocation

401
00:17:40,620 --> 00:17:44,909
between the operating system

402
00:17:43,410 --> 00:17:46,650
in the application that wants to open

403
00:17:44,910 --> 00:17:50,670
the file and close the file and so forth

404
00:17:46,650 --> 00:17:52,740
and so on you you so you the file system

405
00:17:50,670 --> 00:17:55,230
has all the memory capabilities to all

406
00:17:52,740 --> 00:17:57,030
the files on the system and the file

407
00:17:55,230 --> 00:17:59,880
system then delegates part of this

408
00:17:57,030 --> 00:18:01,530
memory access rights to the application

409
00:17:59,880 --> 00:18:03,780
and it uses the operating system to do

410
00:18:01,530 --> 00:18:05,129
so okay so these capabilities are

411
00:18:03,780 --> 00:18:06,720
actually capabilities for memory

412
00:18:05,130 --> 00:18:09,750
locations they're not capabilities to

413
00:18:06,720 --> 00:18:10,860
operating system objects they the ones

414
00:18:09,750 --> 00:18:13,670
that we stress most and those

415
00:18:10,860 --> 00:18:16,439
applications are to memory objects yeah

416
00:18:13,670 --> 00:18:22,950
to memory ranges alright maybe we should

417
00:18:16,440 --> 00:18:24,720
chat offline oh sure thank you my

418
00:18:22,950 --> 00:18:26,760
discourse EPFL thank you very much for

419
00:18:24,720 --> 00:18:28,440
the talk so effectively you have a

420
00:18:26,760 --> 00:18:30,180
distributed system and there are some

421
00:18:28,440 --> 00:18:31,410
operations that have to be in order and

422
00:18:30,180 --> 00:18:34,320
some other operations that can be

423
00:18:31,410 --> 00:18:36,990
performed in parallel so can you draw an

424
00:18:34,320 --> 00:18:38,850
analogy with literature related to

425
00:18:36,990 --> 00:18:40,980
distributed systems and state machine

426
00:18:38,850 --> 00:18:43,649
replication so can you say that you

427
00:18:40,980 --> 00:18:45,600
could run something like patches or raft

428
00:18:43,650 --> 00:18:49,200
and have different needs as is running

429
00:18:45,600 --> 00:18:52,980
in parallel we can definitely run

430
00:18:49,200 --> 00:18:54,840
parcels and raft in such a system well

431
00:18:52,980 --> 00:18:57,740
I'm not sure where you what you I mean

432
00:18:54,840 --> 00:19:02,250
for the capability management instead

433
00:18:57,740 --> 00:19:04,230
you solve the problems with so you're

434
00:19:02,250 --> 00:19:06,600
going after specific problems while

435
00:19:04,230 --> 00:19:08,040
effectively you need to order operations

436
00:19:06,600 --> 00:19:09,659
and there are some operations that need

437
00:19:08,040 --> 00:19:12,240
to be order and some others that can be

438
00:19:09,660 --> 00:19:14,940
in parallel so could you do something

439
00:19:12,240 --> 00:19:18,230
like running epoxy instances for for the

440
00:19:14,940 --> 00:19:21,330
operations that you do need to order so

441
00:19:18,230 --> 00:19:22,980
if I catch you correctly then you mean

442
00:19:21,330 --> 00:19:25,169
that there could be multiple orders of

443
00:19:22,980 --> 00:19:29,300
the operations and you want to choose

444
00:19:25,170 --> 00:19:32,220
which which order the system agrees on

445
00:19:29,300 --> 00:19:34,980
well I I don't see the situation where

446
00:19:32,220 --> 00:19:39,500
we would need an election for example

447
00:19:34,980 --> 00:19:42,870
awfully a leader to decide on the order

448
00:19:39,500 --> 00:19:48,780
so I I don't really see what taxes would

449
00:19:42,870 --> 00:19:49,709
give us here okay thank you thank you

450
00:19:48,780 --> 00:19:55,749
you

451
00:19:49,710 --> 00:19:55,749
[Applause]

