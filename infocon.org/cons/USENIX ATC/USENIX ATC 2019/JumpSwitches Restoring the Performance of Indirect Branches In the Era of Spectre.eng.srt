1
00:00:10,630 --> 00:00:17,410
thank you so I will talk about jump

2
00:00:13,000 --> 00:00:20,920
switches and we'll start by talking

3
00:00:17,410 --> 00:00:22,750
about spectra and this is the security

4
00:00:20,920 --> 00:00:26,650
tracks I'm sure that you are all know

5
00:00:22,750 --> 00:00:29,230
about it but Intel CPUs and other CPUs

6
00:00:26,650 --> 00:00:32,110
were found to be susceptible to all kind

7
00:00:29,230 --> 00:00:33,879
of speculative execution attacks and in

8
00:00:32,110 --> 00:00:36,309
this talk we'll talk about spectra and

9
00:00:33,879 --> 00:00:36,849
just briefly to mention what it's all

10
00:00:36,309 --> 00:00:39,699
about

11
00:00:36,850 --> 00:00:42,820
so Specter is a family of five

12
00:00:39,699 --> 00:00:44,650
vulnerabilities and basically the main

13
00:00:42,820 --> 00:00:47,350
cause is that CPUs try to execute

14
00:00:44,650 --> 00:00:48,879
instructions as fast as possible but

15
00:00:47,350 --> 00:00:50,350
from time to time they encounter an

16
00:00:48,879 --> 00:00:52,210
instruction that prevents them from

17
00:00:50,350 --> 00:00:55,900
knowing what the next instruction to

18
00:00:52,210 --> 00:00:58,059
execute is in such case tus try to guess

19
00:00:55,900 --> 00:01:00,220
and when they guess they use a branch

20
00:00:58,059 --> 00:01:02,320
predictor to guess what the next

21
00:01:00,220 --> 00:01:05,229
instruction is and they might miss

22
00:01:02,320 --> 00:01:08,170
predict this misprediction we are told

23
00:01:05,229 --> 00:01:10,539
not is benign and we are told not

24
00:01:08,170 --> 00:01:13,270
worried but it turns out that even when

25
00:01:10,540 --> 00:01:16,149
we discard the results of this Miskolc

26
00:01:13,270 --> 00:01:19,860
miss prediction there are side effects

27
00:01:16,149 --> 00:01:23,320
that affect a resource of the machine

28
00:01:19,860 --> 00:01:26,530
specifically caches for example and by a

29
00:01:23,320 --> 00:01:29,579
malicious user may manipulate the CPU in

30
00:01:26,530 --> 00:01:32,350
order to run a flow of instructions that

31
00:01:29,579 --> 00:01:37,570
speculatively that will expose and leak

32
00:01:32,350 --> 00:01:40,658
data that it should not know later on by

33
00:01:37,570 --> 00:01:44,710
timing it accesses to the caches it can

34
00:01:40,659 --> 00:01:47,679
infer what the information is so Specter

35
00:01:44,710 --> 00:01:50,288
v2 that this talk will revolve is a

36
00:01:47,679 --> 00:01:53,049
effects indirect branch branches on

37
00:01:50,289 --> 00:01:55,840
Intel CPUs and it turns out that on

38
00:01:53,049 --> 00:01:57,670
inter CPUs you can take indirect branch

39
00:01:55,840 --> 00:02:00,759
like those that are being used by

40
00:01:57,670 --> 00:02:02,649
function pointers and manipulate it so

41
00:02:00,759 --> 00:02:04,509
speculatively we will execute arbitrary

42
00:02:02,649 --> 00:02:05,920
piece of code that exists in the

43
00:02:04,509 --> 00:02:09,610
privilege domain in the kernel in our

44
00:02:05,920 --> 00:02:11,800
case M even if this piece of code should

45
00:02:09,610 --> 00:02:14,170
never be executed by the interact branch

46
00:02:11,800 --> 00:02:16,090
even if it's not this one of the two do

47
00:02:14,170 --> 00:02:20,260
good or do no evil functions that are

48
00:02:16,090 --> 00:02:21,880
executed by the function pointer there

49
00:02:20,260 --> 00:02:23,750
is a solution and there a solution that

50
00:02:21,880 --> 00:02:26,030
is being used today is called read

51
00:02:23,750 --> 00:02:27,770
and where polling is a solution that was

52
00:02:26,030 --> 00:02:29,930
developed in Google and the idea behind

53
00:02:27,770 --> 00:02:32,410
it is to emulate the indirect branch

54
00:02:29,930 --> 00:02:36,350
using a different flow of instructions

55
00:02:32,410 --> 00:02:38,329
that prevents speculation and this is

56
00:02:36,350 --> 00:02:39,890
good because it prevents the attack but

57
00:02:38,330 --> 00:02:42,170
it is not that good because it induces

58
00:02:39,890 --> 00:02:45,019
overheads of tens of cycles for each

59
00:02:42,170 --> 00:02:49,579
indirect branch each indirect branch is

60
00:02:45,020 --> 00:02:52,250
effectively mispredicted so the main

61
00:02:49,580 --> 00:02:53,600
idea behind how a solution is called is

62
00:02:52,250 --> 00:02:57,200
a common technique which is called

63
00:02:53,600 --> 00:02:58,370
indirect branch promotion and to explain

64
00:02:57,200 --> 00:03:00,350
the basic idea

65
00:02:58,370 --> 00:03:02,000
assume that we do have some function

66
00:03:00,350 --> 00:03:03,799
which is called du haut and we know that

67
00:03:02,000 --> 00:03:06,530
this function is the one that is usually

68
00:03:03,800 --> 00:03:08,690
executed by an indirect branch we can

69
00:03:06,530 --> 00:03:10,940
precede the call to the read pauline

70
00:03:08,690 --> 00:03:12,620
with a piece of code that checks whether

71
00:03:10,940 --> 00:03:15,290
the function pointer that we are about

72
00:03:12,620 --> 00:03:18,620
to use is indeed this do heart function

73
00:03:15,290 --> 00:03:21,380
and in that case use a called du haut

74
00:03:18,620 --> 00:03:23,870
using a direct call a direct call is a

75
00:03:21,380 --> 00:03:26,570
call in which the target of the call is

76
00:03:23,870 --> 00:03:28,910
encoded inside the instruction and is

77
00:03:26,570 --> 00:03:32,570
not susceptible to expect a veto attacks

78
00:03:28,910 --> 00:03:35,390
if we fail if that's not the case we

79
00:03:32,570 --> 00:03:36,920
just fall back to read pauline now

80
00:03:35,390 --> 00:03:38,570
indirect bridge promotion might look

81
00:03:36,920 --> 00:03:41,570
like a great solution but it has some

82
00:03:38,570 --> 00:03:43,489
problems because hat functions might

83
00:03:41,570 --> 00:03:45,650
change for it might be different in

84
00:03:43,489 --> 00:03:49,400
different systems on different workloads

85
00:03:45,650 --> 00:03:51,470
and might even change a long time so

86
00:03:49,400 --> 00:03:54,019
profiling and rebuilding anyhow is the

87
00:03:51,470 --> 00:03:56,060
partial solution at best but even then

88
00:03:54,019 --> 00:03:58,070
this is not a trivial task for random

89
00:03:56,060 --> 00:03:59,690
user to profile his workload when we

90
00:03:58,070 --> 00:04:02,750
talk about operating system kernels

91
00:03:59,690 --> 00:04:04,609
there is usually most distribution

92
00:04:02,750 --> 00:04:06,590
provide you a single kernel and you are

93
00:04:04,610 --> 00:04:09,260
not allowed to profile it and rebuild it

94
00:04:06,590 --> 00:04:12,620
in a way that is something that the

95
00:04:09,260 --> 00:04:14,810
users might do so we need a dynamic and

96
00:04:12,620 --> 00:04:17,870
adaptive solution something like JIT and

97
00:04:14,810 --> 00:04:20,418
that's what we are doing basically so

98
00:04:17,870 --> 00:04:23,960
this basic inline jump switch that we

99
00:04:20,418 --> 00:04:25,880
show is based on two stages the first

100
00:04:23,960 --> 00:04:28,430
stage is stage of profiling and the

101
00:04:25,880 --> 00:04:30,469
second stage will be a strange a stage

102
00:04:28,430 --> 00:04:34,010
of binary rewriting and all of those

103
00:04:30,470 --> 00:04:35,660
those two stages happen on the fly so

104
00:04:34,010 --> 00:04:39,380
initially we proceed

105
00:04:35,660 --> 00:04:41,390
code that in the code that calls the red

106
00:04:39,380 --> 00:04:43,730
pulley instead of an interactive branch

107
00:04:41,390 --> 00:04:45,950
with some kind of code that saved the

108
00:04:43,730 --> 00:04:50,210
branch source and target for each one of

109
00:04:45,950 --> 00:04:52,670
the branches in this case every branch

110
00:04:50,210 --> 00:04:53,900
is basically forced down to falls back

111
00:04:52,670 --> 00:04:57,440
to the red pollen and we have

112
00:04:53,900 --> 00:04:59,719
misprediction after we collected enough

113
00:04:57,440 --> 00:05:02,750
samples we start to do to collect the

114
00:04:59,720 --> 00:05:05,000
samples and perform binary rewriting so

115
00:05:02,750 --> 00:05:06,860
basically on the fly we change each

116
00:05:05,000 --> 00:05:08,510
piece of code that preceded a rat

117
00:05:06,860 --> 00:05:14,930
pulling into this indirect branch

118
00:05:08,510 --> 00:05:17,690
promotion code now there are advantages

119
00:05:14,930 --> 00:05:20,120
we the basic idea is simple maybe but

120
00:05:17,690 --> 00:05:21,650
doing it correctly is more harder and

121
00:05:20,120 --> 00:05:24,290
I'm not going to get into the

122
00:05:21,650 --> 00:05:26,719
implementation details too much but we

123
00:05:24,290 --> 00:05:28,730
do provide we do want it to be easy to

124
00:05:26,720 --> 00:05:31,010
deploy so we provide a compiler plugin

125
00:05:28,730 --> 00:05:32,930
which makes it all kind of non intrusive

126
00:05:31,010 --> 00:05:35,240
in a way we still require a worker

127
00:05:32,930 --> 00:05:38,230
thread that would do the hard work and

128
00:05:35,240 --> 00:05:40,190
figure out where what the branches are a

129
00:05:38,230 --> 00:05:43,040
where do very little

130
00:05:40,190 --> 00:05:45,020
we employ efficient sampling and

131
00:05:43,040 --> 00:05:46,820
patching and in order to avoid overheads

132
00:05:45,020 --> 00:05:49,070
during the learning stage and we have

133
00:05:46,820 --> 00:05:50,719
support for multiple our targets using

134
00:05:49,070 --> 00:05:53,120
an outline block because we don't want

135
00:05:50,720 --> 00:05:58,070
to reserve a lot of a big piece of code

136
00:05:53,120 --> 00:06:01,460
just for the worst-case scenario now

137
00:05:58,070 --> 00:06:03,860
after we develop this mechanism we try

138
00:06:01,460 --> 00:06:06,049
to measure performance and we still saw

139
00:06:03,860 --> 00:06:08,570
that there are many branches that we do

140
00:06:06,050 --> 00:06:11,300
not manage to predict correctly and we

141
00:06:08,570 --> 00:06:12,950
do have over it for them as well in one

142
00:06:11,300 --> 00:06:15,680
of the cases we encountered is the case

143
00:06:12,950 --> 00:06:17,990
of system calls now system course is a

144
00:06:15,680 --> 00:06:20,300
challenging because it is important

145
00:06:17,990 --> 00:06:23,330
because it is a common indirect branch

146
00:06:20,300 --> 00:06:25,370
that is mispredicted every invocation of

147
00:06:23,330 --> 00:06:27,880
system call requires a jump table so

148
00:06:25,370 --> 00:06:30,950
basically this is an indirect branch and

149
00:06:27,880 --> 00:06:32,870
which is mispredicted there are two main

150
00:06:30,950 --> 00:06:34,190
problems in this case the first problem

151
00:06:32,870 --> 00:06:39,290
is that we have many potential targets

152
00:06:34,190 --> 00:06:42,410
now many system calls in our inline jump

153
00:06:39,290 --> 00:06:44,900
switch that I just show can basically

154
00:06:42,410 --> 00:06:47,030
can handle one and we have mechanism

155
00:06:44,900 --> 00:06:49,429
that they can idle few but basically we

156
00:06:47,030 --> 00:06:51,979
are going to have a lot of misses

157
00:06:49,430 --> 00:06:54,260
and beside of that we have the problem

158
00:06:51,980 --> 00:06:56,690
that the second point that we have is

159
00:06:54,260 --> 00:06:58,219
that different processes might have a

160
00:06:56,690 --> 00:07:00,920
different distribution of system calls

161
00:06:58,220 --> 00:07:04,640
and we need to the handle these cases as

162
00:07:00,920 --> 00:07:08,950
well the kernel code is mutual to all

163
00:07:04,640 --> 00:07:11,419
the processes so this is not that simple

164
00:07:08,950 --> 00:07:11,870
so for the first problem that I just

165
00:07:11,420 --> 00:07:14,810
showed

166
00:07:11,870 --> 00:07:17,480
we employee search jumps which we call

167
00:07:14,810 --> 00:07:20,800
this solution and that is to use index

168
00:07:17,480 --> 00:07:24,350
mapping to map system calls to indexes

169
00:07:20,800 --> 00:07:26,390
so we take the system course we learn

170
00:07:24,350 --> 00:07:28,610
what they are which system calls are

171
00:07:26,390 --> 00:07:30,950
frequent and the most frequent ones are

172
00:07:28,610 --> 00:07:33,020
being mapped to in Texas between 0 & 2

173
00:07:30,950 --> 00:07:35,539
in the power of something which is 4 in

174
00:07:33,020 --> 00:07:39,020
this case those system calls will be

175
00:07:35,540 --> 00:07:41,000
executed through a binary tree the other

176
00:07:39,020 --> 00:07:44,210
system calls which are more infrequent

177
00:07:41,000 --> 00:07:46,970
will arm up to nil and we we will

178
00:07:44,210 --> 00:07:49,130
execute them through a jump table so it

179
00:07:46,970 --> 00:07:51,110
looks pretty much like that system calls

180
00:07:49,130 --> 00:07:52,490
the like system collect accept for

181
00:07:51,110 --> 00:07:55,520
example let's assume it's the frequent

182
00:07:52,490 --> 00:07:58,130
one will go based on the index mapping

183
00:07:55,520 --> 00:08:01,240
to binary tree and another system called

184
00:07:58,130 --> 00:08:03,710
like Santo will go into jump table and

185
00:08:01,240 --> 00:08:06,050
eventually it works like that we have

186
00:08:03,710 --> 00:08:08,090
the index mapping and whenever we get an

187
00:08:06,050 --> 00:08:11,090
accept system call we are going through

188
00:08:08,090 --> 00:08:13,880
a binary code a a binary tree which is

189
00:08:11,090 --> 00:08:17,510
actually a piece of code that is laid

190
00:08:13,880 --> 00:08:20,270
out in memory and we traverse through

191
00:08:17,510 --> 00:08:23,000
the tree and eventually go to the into

192
00:08:20,270 --> 00:08:26,570
the direct call direct jump in this case

193
00:08:23,000 --> 00:08:28,190
that goes into the system code if we get

194
00:08:26,570 --> 00:08:32,289
a system code which is that frequent we

195
00:08:28,190 --> 00:08:35,030
fall back and go to the read poly of

196
00:08:32,289 --> 00:08:36,770
course we have a worker that looks what

197
00:08:35,030 --> 00:08:39,439
system calls are frequent from time to

198
00:08:36,770 --> 00:08:44,569
time we do profiling and update this

199
00:08:39,440 --> 00:08:46,460
binary tree and index mapping the second

200
00:08:44,570 --> 00:08:48,650
problem that we had is the fact that

201
00:08:46,460 --> 00:08:50,680
each process has a different

202
00:08:48,650 --> 00:08:54,020
might have different system called

203
00:08:50,680 --> 00:08:56,510
distribution we deal with it by learning

204
00:08:54,020 --> 00:08:57,949
the target spell process but we still

205
00:08:56,510 --> 00:08:59,960
need to deal with the fact that the

206
00:08:57,950 --> 00:09:02,390
kernel code is mutual to all processes

207
00:08:59,960 --> 00:09:05,120
and we just break it and we take one

208
00:09:02,390 --> 00:09:06,800
code page out of the process and make

209
00:09:05,120 --> 00:09:09,320
that each one of the processes would

210
00:09:06,800 --> 00:09:11,209
have a different kernel page the

211
00:09:09,320 --> 00:09:13,490
trampolines that we use to call the

212
00:09:11,210 --> 00:09:16,220
system calls the binary tree which is a

213
00:09:13,490 --> 00:09:21,860
piece of code that is laid out in the

214
00:09:16,220 --> 00:09:25,220
binary patching and repair this kind of

215
00:09:21,860 --> 00:09:27,470
per page pair the page per process we

216
00:09:25,220 --> 00:09:29,510
have one challenge which is x86

217
00:09:27,470 --> 00:09:31,400
challenge that we need this code page to

218
00:09:29,510 --> 00:09:33,950
be adjustment in the same two Jigga bite

219
00:09:31,400 --> 00:09:38,540
area as the other pieces of the code and

220
00:09:33,950 --> 00:09:41,000
we deal with that as well finally the

221
00:09:38,540 --> 00:09:46,819
last last problem that I will talk about

222
00:09:41,000 --> 00:09:48,470
is the cold chains and for this reason

223
00:09:46,820 --> 00:09:50,930
we are using registration jump switch

224
00:09:48,470 --> 00:09:52,310
that I will present next but let's

225
00:09:50,930 --> 00:09:54,979
assume for the second that we have a

226
00:09:52,310 --> 00:09:56,420
cold chain and let's assume that this

227
00:09:54,980 --> 00:09:58,820
cold chain does not change very

228
00:09:56,420 --> 00:10:01,040
frequently again this is based on actual

229
00:09:58,820 --> 00:10:05,630
and I will show later on things that we

230
00:10:01,040 --> 00:10:07,370
saw in the linux kernel if we have a

231
00:10:05,630 --> 00:10:09,470
cold chain and we have this kind of

232
00:10:07,370 --> 00:10:12,459
invocation that goes to each one of the

233
00:10:09,470 --> 00:10:15,140
cultures and calls it we have a problem

234
00:10:12,459 --> 00:10:17,089
we can handle very nicely as we saw

235
00:10:15,140 --> 00:10:22,490
before using this inline jumps which a

236
00:10:17,089 --> 00:10:24,350
single indirect call that is turned up

237
00:10:22,490 --> 00:10:26,420
tends to be a red palette we can use

238
00:10:24,350 --> 00:10:28,459
interactive branch promotion but when we

239
00:10:26,420 --> 00:10:31,040
have multiple ones they are being

240
00:10:28,459 --> 00:10:34,729
invoked in a loop and the problems that

241
00:10:31,040 --> 00:10:37,430
we have is that in this case the source

242
00:10:34,730 --> 00:10:39,890
the the integrity branches the jumps to

243
00:10:37,430 --> 00:10:41,900
each one of those destinations to those

244
00:10:39,890 --> 00:10:44,180
targets is actually the same indirect

245
00:10:41,900 --> 00:10:49,520
branch so we are going to have many

246
00:10:44,180 --> 00:10:52,560
nieces but in this case we also see that

247
00:10:49,520 --> 00:10:54,970
the pattern of the course is very

248
00:10:52,560 --> 00:10:58,239
expected and for that reason we're using

249
00:10:54,970 --> 00:11:00,670
a not a transparent mechanism but we

250
00:10:58,240 --> 00:11:04,209
provide a registration code we allow you

251
00:11:00,670 --> 00:11:07,120
to perform a to explicitly say that

252
00:11:04,209 --> 00:11:10,060
these whenever the the list the coal

253
00:11:07,120 --> 00:11:13,029
change changes and in that case perform

254
00:11:10,060 --> 00:11:19,329
binary rewriting so each one of the

255
00:11:13,029 --> 00:11:23,050
pieces of the code will go to will go to

256
00:11:19,329 --> 00:11:24,790
the right target and and we do not need

257
00:11:23,050 --> 00:11:29,439
to have any read Pauline fallback for

258
00:11:24,790 --> 00:11:33,040
that case we implemented all of that on

259
00:11:29,440 --> 00:11:35,410
the line Knox kernel and we see here

260
00:11:33,040 --> 00:11:37,569
multiple benchmarks that we executed sis

261
00:11:35,410 --> 00:11:40,209
bench and the bench our file system

262
00:11:37,570 --> 00:11:44,410
benchmarks and gen-x and readies our

263
00:11:40,209 --> 00:11:47,680
network benchmarks the y-axis shows the

264
00:11:44,410 --> 00:11:50,319
speed up and this is a lot to grasp so I

265
00:11:47,680 --> 00:11:52,989
will go a bit to more concrete points

266
00:11:50,320 --> 00:11:56,050
but just to emphasize that on the purple

267
00:11:52,990 --> 00:11:58,420
color we see what is the baseline not a

268
00:11:56,050 --> 00:12:01,000
performance the performance of a

269
00:11:58,420 --> 00:12:04,209
protected system today on the red bars

270
00:12:01,000 --> 00:12:06,370
we see an unsafe system which is a

271
00:12:04,209 --> 00:12:08,469
system that is like the optimum that we

272
00:12:06,370 --> 00:12:11,949
want to achieve which is actually a

273
00:12:08,470 --> 00:12:14,350
system which is unprotected without any

274
00:12:11,949 --> 00:12:17,680
spectral v2 mitigations without red

275
00:12:14,350 --> 00:12:19,300
polling so the first thing that we can

276
00:12:17,680 --> 00:12:21,399
see is that in line jump switches

277
00:12:19,300 --> 00:12:23,649
provide most benefit in most cases not

278
00:12:21,399 --> 00:12:26,620
in the case of the bench but in others

279
00:12:23,649 --> 00:12:32,019
they do and this is the basic mechanism

280
00:12:26,620 --> 00:12:33,790
that we saw initially ii think that

281
00:12:32,019 --> 00:12:36,880
there comes out from these results is

282
00:12:33,790 --> 00:12:38,800
the d bench the file system benchmark

283
00:12:36,880 --> 00:12:42,010
that invokes a lot of system calls of

284
00:12:38,800 --> 00:12:43,689
different types it gets a three percent

285
00:12:42,010 --> 00:12:46,839
performance improvement from the search

286
00:12:43,690 --> 00:12:50,079
jump switch that that looks for through

287
00:12:46,839 --> 00:12:53,110
a binary tree for to call use to use the

288
00:12:50,079 --> 00:12:57,550
direct call a direct call in order to

289
00:12:53,110 --> 00:13:00,459
jump to the right system column in the

290
00:12:57,550 --> 00:13:02,319
case of readies the case of Redis is

291
00:13:00,459 --> 00:13:04,479
interesting it turns out there is a

292
00:13:02,319 --> 00:13:05,769
system in large that is called second

293
00:13:04,480 --> 00:13:10,509
which is a mechanism

294
00:13:05,769 --> 00:13:12,759
to provide a user space to define system

295
00:13:10,509 --> 00:13:14,949
called filtering saying that some system

296
00:13:12,759 --> 00:13:16,470
calls should not be executed because the

297
00:13:14,949 --> 00:13:19,868
application does not need them and

298
00:13:16,470 --> 00:13:22,019
therefore they should not be executed if

299
00:13:19,869 --> 00:13:26,290
by mistake a process is being

300
00:13:22,019 --> 00:13:29,790
compromised second is nice but it turns

301
00:13:26,290 --> 00:13:32,230
out that when you touch many filters

302
00:13:29,790 --> 00:13:34,089
each one of these filters that say

303
00:13:32,230 --> 00:13:38,739
whether a system call should be executed

304
00:13:34,089 --> 00:13:41,769
or not is a being invoked using is using

305
00:13:38,739 --> 00:13:44,769
an indirect branch in the case of Redis

306
00:13:41,769 --> 00:13:47,290
we saw that 17 sister in direct branches

307
00:13:44,769 --> 00:13:52,779
17 filters are being invoked whenever

308
00:13:47,290 --> 00:13:55,360
you want on our Ubuntu system a Redis so

309
00:13:52,779 --> 00:13:57,220
the registration jump switch provides us

310
00:13:55,360 --> 00:14:00,939
a two percent performance improvement as

311
00:13:57,220 --> 00:14:03,100
well eventually we get a speed-up of 10

312
00:14:00,939 --> 00:14:05,019
percent up to 10 percent performance

313
00:14:03,100 --> 00:14:10,230
improvement and we are less we are less

314
00:14:05,019 --> 00:14:10,230
than 2 percent performance then unsafe

315
00:14:10,799 --> 00:14:15,249
so as because as we saw jump switch has

316
00:14:13,720 --> 00:14:17,499
dramatically reduced the spectre of the

317
00:14:15,249 --> 00:14:19,509
two overheads we submitted touches to

318
00:14:17,499 --> 00:14:22,480
line locks not of all of our work we are

319
00:14:19,509 --> 00:14:24,339
waiting for some things to result and I

320
00:14:22,480 --> 00:14:26,410
think that it is interesting to see the

321
00:14:24,339 --> 00:14:28,149
binary rewriting although it's being

322
00:14:26,410 --> 00:14:29,949
superseded a lot of many times people

323
00:14:28,149 --> 00:14:32,410
say by virtualization and other

324
00:14:29,949 --> 00:14:40,770
solutions can still improve performance

325
00:14:32,410 --> 00:14:48,260
significantly in some cases that's it

326
00:14:40,770 --> 00:14:48,260
[Applause]

327
00:14:48,920 --> 00:14:55,589
hi Thomas ping University of Edinburgh

328
00:14:52,920 --> 00:14:58,380
are there any additional security

329
00:14:55,590 --> 00:15:00,690
concerns arise from indirect call

330
00:14:58,380 --> 00:15:02,730
promotion yes thanks for the question I

331
00:15:00,690 --> 00:15:07,290
left it because I knew somebody would

332
00:15:02,730 --> 00:15:09,810
invade so basically there is one issue

333
00:15:07,290 --> 00:15:15,270
which effects so there is an issue of

334
00:15:09,810 --> 00:15:16,859
Spectre v1 so the so the fact that we

335
00:15:15,270 --> 00:15:19,590
use indirect branches might looks

336
00:15:16,860 --> 00:15:21,630
dangerous because not in direct branches

337
00:15:19,590 --> 00:15:23,550
sorry the fact that we use conditional

338
00:15:21,630 --> 00:15:25,800
branches might look dangerous but you

339
00:15:23,550 --> 00:15:28,290
need to remember that actually every

340
00:15:25,800 --> 00:15:31,819
direct branch that you have today in the

341
00:15:28,290 --> 00:15:35,069
system is susceptible to Spectre v1 in

342
00:15:31,820 --> 00:15:38,520
so just to say there is a different

343
00:15:35,070 --> 00:15:40,620
flavor of spectra that usually people

344
00:15:38,520 --> 00:15:43,350
who think effects only conditional

345
00:15:40,620 --> 00:15:45,480
branches but it also it can cause type

346
00:15:43,350 --> 00:15:49,130
confusion and it also infects indirect

347
00:15:45,480 --> 00:15:52,260
branches so intentionally

348
00:15:49,130 --> 00:15:53,340
unintentionally spider v1 basically if

349
00:15:52,260 --> 00:15:55,740
you know what you're doing you can

350
00:15:53,340 --> 00:15:56,970
mitigate it relatively well if you know

351
00:15:55,740 --> 00:16:01,770
what you are doing that's another

352
00:15:56,970 --> 00:16:03,300
question but a indirect branches are

353
00:16:01,770 --> 00:16:07,230
susceptible to expect everyone

354
00:16:03,300 --> 00:16:10,040
regardless to our walk the at the moment

355
00:16:07,230 --> 00:16:12,360
the Intel that Intel resolves Spectre v2

356
00:16:10,040 --> 00:16:15,270
they are not about to solve the spectre

357
00:16:12,360 --> 00:16:17,310
v1 the CPUs feeling will be susceptible

358
00:16:15,270 --> 00:16:21,030
to Spectre v1 and mitigations will need

359
00:16:17,310 --> 00:16:25,319
to be set to prevent that so the fact

360
00:16:21,030 --> 00:16:27,420
that we do not a our system is makes the

361
00:16:25,320 --> 00:16:29,250
system susceptible to Spectre v1 but we

362
00:16:27,420 --> 00:16:31,890
rely on the fact that other mitigation

363
00:16:29,250 --> 00:16:33,750
says some were adapted will prevent that

364
00:16:31,890 --> 00:16:36,360
if that's what you regarded otherwise I

365
00:16:33,750 --> 00:16:37,980
just gave you some may material ok did

366
00:16:36,360 --> 00:16:40,230
you have to justify that to the Linux

367
00:16:37,980 --> 00:16:43,470
kernel folks you know we needed to

368
00:16:40,230 --> 00:16:45,720
justify to the PC committing to the

369
00:16:43,470 --> 00:16:48,689
program committee but the Linux

370
00:16:45,720 --> 00:16:53,129
did not have this consideration they and

371
00:16:48,689 --> 00:16:55,740
they they actually implement something

372
00:16:53,129 --> 00:16:58,129
similar which is more static right now

373
00:16:55,740 --> 00:16:58,129
right

374
00:17:09,050 --> 00:17:14,409
and I stuck see one from Dongguk

375
00:17:11,690 --> 00:17:17,950
University have you ever thought about

376
00:17:14,410 --> 00:17:21,470
how to work with an integrity management

377
00:17:17,950 --> 00:17:26,120
integrity management can you repeat the

378
00:17:21,470 --> 00:17:30,290
walk with um well Colonel integrity

379
00:17:26,119 --> 00:17:32,929
could see Colonel integrity are you mean

380
00:17:30,290 --> 00:17:35,000
like to the fact that we patch the code

381
00:17:32,930 --> 00:17:35,480
the binary is right in the consideration

382
00:17:35,000 --> 00:17:38,590
yes

383
00:17:35,480 --> 00:17:41,810
so binary writing is a consideration and

384
00:17:38,590 --> 00:17:44,389
uh I have a couple of answers for you so

385
00:17:41,810 --> 00:17:47,060
first of all it's being done today okay

386
00:17:44,390 --> 00:17:48,680
so today you already have rewrite of the

387
00:17:47,060 --> 00:17:50,600
code for example if you have a single

388
00:17:48,680 --> 00:17:52,400
cost system of Linux you booted with the

389
00:17:50,600 --> 00:17:54,740
single core then you had plugged another

390
00:17:52,400 --> 00:17:57,740
core you have that happening that all

391
00:17:54,740 --> 00:17:59,360
your x86 instructions which do not have

392
00:17:57,740 --> 00:18:00,620
locked perfect all of the sudden will

393
00:17:59,360 --> 00:18:02,840
have looks perfect without your

394
00:18:00,620 --> 00:18:04,580
knowledge and there are many other cases

395
00:18:02,840 --> 00:18:07,250
this is just the easy case to explain

396
00:18:04,580 --> 00:18:10,040
the second thing is that the mechanism

397
00:18:07,250 --> 00:18:12,410
that does it if you knew knew if you saw

398
00:18:10,040 --> 00:18:15,470
it he would be really concerned so we

399
00:18:12,410 --> 00:18:17,240
try to do we try to improve it and I

400
00:18:15,470 --> 00:18:18,740
think that in the like next Linux

401
00:18:17,240 --> 00:18:21,410
version you will see that it's better

402
00:18:18,740 --> 00:18:24,170
not that you will notice but it will it

403
00:18:21,410 --> 00:18:26,240
it is safer nowadays because we did walk

404
00:18:24,170 --> 00:18:32,270
in also in order to prove this kind of

405
00:18:26,240 --> 00:18:32,810
things okay thanks alright I had a

406
00:18:32,270 --> 00:18:35,030
question

407
00:18:32,810 --> 00:18:36,470
so Intel's coming out with a new

408
00:18:35,030 --> 00:18:38,870
instruction if it's not out already

409
00:18:36,470 --> 00:18:41,630
which is essentially a branch branch

410
00:18:38,870 --> 00:18:43,159
prediction barrier and so between that

411
00:18:41,630 --> 00:18:45,500
and other features where they're gonna

412
00:18:43,160 --> 00:18:47,750
like isolate the btp between hyper

413
00:18:45,500 --> 00:18:49,730
threads is there an advantage to jump

414
00:18:47,750 --> 00:18:53,720
switches over over that upcoming

415
00:18:49,730 --> 00:18:56,570
approach so a very good question I I

416
00:18:53,720 --> 00:18:59,150
think that it's how to say I think that

417
00:18:56,570 --> 00:19:01,760
I don't know to begin with I don't know

418
00:18:59,150 --> 00:19:05,740
whether speculation will actually be

419
00:19:01,760 --> 00:19:08,180
prevented with this extension a

420
00:19:05,740 --> 00:19:09,860
perspective v2 is about to me be

421
00:19:08,180 --> 00:19:13,970
mitigated completely let's put it this

422
00:19:09,860 --> 00:19:15,260
scary in the futures inter CPUs we saw

423
00:19:13,970 --> 00:19:19,060
up to two percent performance

424
00:19:15,260 --> 00:19:21,160
improvement but I even without

425
00:19:19,060 --> 00:19:23,260
when we disabled all the mitigations in

426
00:19:21,160 --> 00:19:25,630
some cases I didn't want to show these

427
00:19:23,260 --> 00:19:28,590
results because actually the benefit is

428
00:19:25,630 --> 00:19:30,880
a bit marginal to be confident about the

429
00:19:28,590 --> 00:19:35,560
wealthiness of this approach in such

430
00:19:30,880 --> 00:19:37,240
cases but I think that with some kind of

431
00:19:35,560 --> 00:19:40,419
refinement of the mechanisms there might

432
00:19:37,240 --> 00:19:43,080
be is a smaller much smaller benefit for

433
00:19:40,420 --> 00:19:47,560
this approach as well okay thank you

434
00:19:43,080 --> 00:19:49,179
any other questions all right well then

435
00:19:47,560 --> 00:19:54,259
let's thank our speaker

436
00:19:49,180 --> 00:19:54,259
[Applause]

