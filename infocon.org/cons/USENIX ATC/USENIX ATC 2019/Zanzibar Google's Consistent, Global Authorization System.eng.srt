1
00:00:10,110 --> 00:00:14,739
my name is Ramon Casillas and I'll be

2
00:00:12,849 --> 00:00:17,110
describing the Zanzibar theorization

3
00:00:14,740 --> 00:00:22,119
system this is joint work with great

4
00:00:17,110 --> 00:00:25,738
many people so determining whether

5
00:00:22,119 --> 00:00:28,809
online users have permission to access

6
00:00:25,739 --> 00:00:32,410
digital objects is central to preserving

7
00:00:28,809 --> 00:00:36,010
privacy online so for example here we

8
00:00:32,409 --> 00:00:37,718
have on the Left user Alice post a video

9
00:00:36,010 --> 00:00:40,570
on a video sharing service such as

10
00:00:37,719 --> 00:00:42,969
YouTube when the question arises can

11
00:00:40,570 --> 00:00:46,510
another user in this case Bob on the

12
00:00:42,969 --> 00:00:49,089
right access the video now there are

13
00:00:46,510 --> 00:00:51,159
many examples of the need for these

14
00:00:49,089 --> 00:00:53,469
authorization checks in any service that

15
00:00:51,159 --> 00:00:57,899
allows users to share objects that could

16
00:00:53,469 --> 00:01:03,819
be videos photos documents locations

17
00:00:57,899 --> 00:01:08,050
calendar entries etc etc so Zanzibar is

18
00:01:03,819 --> 00:01:10,630
a is a system that does these

19
00:01:08,050 --> 00:01:16,270
authorization checks for hundreds of

20
00:01:10,630 --> 00:01:21,548
Google services we have a few examples

21
00:01:16,270 --> 00:01:25,630
here again YouTube photos Drive Google

22
00:01:21,549 --> 00:01:27,369
cloud etc so Zanzibar serves two main

23
00:01:25,630 --> 00:01:30,640
purposes the first one is to store

24
00:01:27,369 --> 00:01:32,439
access control lists or permissions so

25
00:01:30,640 --> 00:01:35,670
we have two examples here

26
00:01:32,439 --> 00:01:38,079
YouTube acting on behalf of its users

27
00:01:35,670 --> 00:01:41,530
stores in Zanzibar which is the orange

28
00:01:38,079 --> 00:01:44,490
cylinder in the middle a permission that

29
00:01:41,530 --> 00:01:46,899
says the video X is public for example

30
00:01:44,490 --> 00:01:50,229
another example at the Google cloud

31
00:01:46,899 --> 00:01:52,240
platform a store in Zanzibar permission

32
00:01:50,229 --> 00:01:58,689
that says that group Y manages cloud

33
00:01:52,240 --> 00:02:00,250
project Z the second purpose of Zanzibar

34
00:01:58,689 --> 00:02:02,369
is then to perform a thorough zation

35
00:02:00,250 --> 00:02:06,729
checks based on those stored permissions

36
00:02:02,369 --> 00:02:08,530
so for example YouTube math Zanzibar at

37
00:02:06,729 --> 00:02:10,690
a later date when a when a user comes to

38
00:02:08,530 --> 00:02:14,350
try and access a video can Alice view

39
00:02:10,690 --> 00:02:19,780
video X or when a cloud user comes to

40
00:02:14,350 --> 00:02:21,909
use a virtual machine the Google cloud

41
00:02:19,780 --> 00:02:22,790
service can come as Zanzibar can Bob

42
00:02:21,909 --> 00:02:26,798
Korea

43
00:02:22,790 --> 00:02:26,798
a virtual machine under cloud project Z

44
00:02:29,379 --> 00:02:35,328
so Zanzibar has a number of notable

45
00:02:33,579 --> 00:02:37,659
properties that really come from

46
00:02:35,329 --> 00:02:41,720
requirements of a system such as this

47
00:02:37,659 --> 00:02:43,849
Sansa bar should be consistent and by

48
00:02:41,720 --> 00:02:46,489
that I mean that it needs to respect the

49
00:02:43,849 --> 00:02:49,429
causal ordering of updates to access

50
00:02:46,489 --> 00:02:52,280
control lists and object contents in

51
00:02:49,430 --> 00:02:54,650
order to allow its clients and users to

52
00:02:52,280 --> 00:02:56,780
reason about when it is that permissions

53
00:02:54,650 --> 00:02:59,900
are there or not there this is very

54
00:02:56,780 --> 00:03:02,930
important for privacy the answer bar

55
00:02:59,900 --> 00:03:04,909
needs to be flexible to support a very

56
00:03:02,930 --> 00:03:06,680
rich variety of access control policies

57
00:03:04,909 --> 00:03:08,599
we have hundreds of services that are

58
00:03:06,680 --> 00:03:13,780
our clients and they have very very

59
00:03:08,599 --> 00:03:16,819
widely different access control patterns

60
00:03:13,780 --> 00:03:18,819
Zanzibar needs to be scalable many of

61
00:03:16,819 --> 00:03:22,119
our client services are themselves

62
00:03:18,819 --> 00:03:24,500
global they work worldwide they have

63
00:03:22,120 --> 00:03:29,470
built over a billion users some of them

64
00:03:24,500 --> 00:03:29,470
and they manage billions of objects so

65
00:03:29,949 --> 00:03:34,549
Zanzibar has been shown to scale to

66
00:03:32,750 --> 00:03:36,739
trillions of access control entries and

67
00:03:34,549 --> 00:03:41,449
millions of acts authoritative checks

68
00:03:36,739 --> 00:03:43,220
per second as we'll see finally an in

69
00:03:41,449 --> 00:03:45,650
terms of performance Anza bar needs to

70
00:03:43,220 --> 00:03:47,060
be fast authorization checks are often

71
00:03:45,650 --> 00:03:51,500
in the critical path of user

72
00:03:47,060 --> 00:03:53,900
interactions and it's in the case of a

73
00:03:51,500 --> 00:03:55,579
search application for example it may do

74
00:03:53,900 --> 00:03:56,959
tens or hundreds of authorization checks

75
00:03:55,579 --> 00:04:00,379
before it can present a single search

76
00:03:56,959 --> 00:04:04,579
result that's that's a col aware so in

77
00:04:00,379 --> 00:04:05,929
this in this case Zanzibar as has very

78
00:04:04,579 --> 00:04:07,699
good tail latency less than 10

79
00:04:05,930 --> 00:04:09,769
milliseconds at the 95th percentile and

80
00:04:07,699 --> 00:04:12,199
finally a system like Zanzibar needs to

81
00:04:09,769 --> 00:04:14,510
be highly available and the reason is

82
00:04:12,199 --> 00:04:17,000
that if an authorization system is not

83
00:04:14,510 --> 00:04:18,289
there its client services must assume

84
00:04:17,000 --> 00:04:20,930
that the answer to an authorization

85
00:04:18,289 --> 00:04:23,360
check is no for privacy reasons and so

86
00:04:20,930 --> 00:04:27,880
if the authorization system is not there

87
00:04:23,360 --> 00:04:27,880
there's a huge denial of service problem

88
00:04:29,690 --> 00:04:35,890
so how does it work so what happens is

89
00:04:32,740 --> 00:04:37,760
our clients get to create arbitrary

90
00:04:35,890 --> 00:04:39,530
namespaces and there's a new one

91
00:04:37,760 --> 00:04:42,800
namespace roughly for every type of

92
00:04:39,530 --> 00:04:45,739
object say a video videos or photos or

93
00:04:42,800 --> 00:04:47,720
documents etc within those namespaces

94
00:04:45,740 --> 00:04:50,240
our clients define arbitrary relations

95
00:04:47,720 --> 00:04:53,420
between users and objects examples of

96
00:04:50,240 --> 00:04:59,650
relations are owner editor commenter

97
00:04:53,420 --> 00:05:01,940
viewer etc and Zanzibar stores these

98
00:04:59,650 --> 00:05:05,150
this information that comes from from

99
00:05:01,940 --> 00:05:06,950
our clients in what we call relation to

100
00:05:05,150 --> 00:05:08,659
pools which is a row in this table a

101
00:05:06,950 --> 00:05:10,700
relation to pool is a three tuple

102
00:05:08,660 --> 00:05:12,790
consists of an object or relation and a

103
00:05:10,700 --> 00:05:16,640
user set so here we have two examples

104
00:05:12,790 --> 00:05:20,270
the first one states that user a is a

105
00:05:16,640 --> 00:05:22,640
viewer of object of video X and the

106
00:05:20,270 --> 00:05:24,650
second one states that all users are

107
00:05:22,640 --> 00:05:27,020
viewers of video Y all users is just a

108
00:05:24,650 --> 00:05:31,750
system constant that is how we implement

109
00:05:27,020 --> 00:05:34,969
public objects so when it comes to check

110
00:05:31,750 --> 00:05:37,610
authorizations Zanzibar will read it's

111
00:05:34,970 --> 00:05:38,990
stored relation to pools and evaluate

112
00:05:37,610 --> 00:05:41,780
the check so for example the question

113
00:05:38,990 --> 00:05:44,630
comes is user a AB you or video X the

114
00:05:41,780 --> 00:05:47,510
answer here is yes is user be a viewer

115
00:05:44,630 --> 00:05:49,219
video X the answer's no user B does not

116
00:05:47,510 --> 00:05:52,550
appear in the in the access control list

117
00:05:49,220 --> 00:05:56,450
for video X and since video Y is public

118
00:05:52,550 --> 00:06:01,310
all users are viewers of video Y so the

119
00:05:56,450 --> 00:06:02,450
answer is always yes for that so things

120
00:06:01,310 --> 00:06:04,190
get a little more complicated or

121
00:06:02,450 --> 00:06:08,050
actually a lot more complicated because

122
00:06:04,190 --> 00:06:11,000
user sets that third column in the table

123
00:06:08,050 --> 00:06:14,510
can be more than just a single user or

124
00:06:11,000 --> 00:06:18,200
all users they can also be a set of

125
00:06:14,510 --> 00:06:20,930
users that have a certain relation to a

126
00:06:18,200 --> 00:06:23,870
certain object it's a it's a it's a way

127
00:06:20,930 --> 00:06:26,330
of having an indirection here so in this

128
00:06:23,870 --> 00:06:29,300
example here in the second row we have

129
00:06:26,330 --> 00:06:32,330
that in addition to user a being a bit

130
00:06:29,300 --> 00:06:34,550
of your video X all the members of Group

131
00:06:32,330 --> 00:06:37,130
one are also viewers of video X and to

132
00:06:34,550 --> 00:06:40,100
it to evaluate that the answer might

133
00:06:37,130 --> 00:06:41,990
needs to expand that indirection and go

134
00:06:40,100 --> 00:06:43,550
to another namespace in this case groups

135
00:06:41,990 --> 00:06:47,270
and see who are the

136
00:06:43,550 --> 00:06:50,150
birth of Group one so and you can

137
00:06:47,270 --> 00:06:52,490
imagine that this creates sometimes very

138
00:06:50,150 --> 00:06:54,950
deep hierarchies of permissions

139
00:06:52,490 --> 00:06:57,290
sometimes very wide hierarchies of

140
00:06:54,950 --> 00:06:59,450
permissions and this is a challenge when

141
00:06:57,290 --> 00:07:03,800
you want to evaluate an authorization

142
00:06:59,450 --> 00:07:06,620
check with low latency so if we want to

143
00:07:03,800 --> 00:07:10,160
do a thorough nation checks here for

144
00:07:06,620 --> 00:07:12,650
instance user B is it is it a viewer is

145
00:07:10,160 --> 00:07:15,620
of video X the answer is yes because

146
00:07:12,650 --> 00:07:18,799
it's a member of group one whereas user

147
00:07:15,620 --> 00:07:21,250
D is still not a viewer video X I hope

148
00:07:18,800 --> 00:07:21,250
that's clear

149
00:07:21,940 --> 00:07:27,710
so another subtle

150
00:07:25,850 --> 00:07:30,490
another important but subtle point here

151
00:07:27,710 --> 00:07:34,000
is that our clients very much care about

152
00:07:30,490 --> 00:07:37,130
the order in which Sansa Bar is able to

153
00:07:34,000 --> 00:07:40,190
apply changes to access control lists

154
00:07:37,130 --> 00:07:42,290
and to object contents and in particular

155
00:07:40,190 --> 00:07:44,719
it wants to they want to protect against

156
00:07:42,290 --> 00:07:47,450
what we call the new enemy problem and

157
00:07:44,720 --> 00:07:49,880
here's an example is again user Alice

158
00:07:47,450 --> 00:07:54,469
has decided has been sharing a document

159
00:07:49,880 --> 00:07:56,600
with users Bob and Charlie and sadly

160
00:07:54,470 --> 00:07:58,820
despite the fact that Alice and Bob have

161
00:07:56,600 --> 00:08:01,580
been appearing together and talks and

162
00:07:58,820 --> 00:08:03,890
papers like this one for more than 30

163
00:08:01,580 --> 00:08:09,800
years they've had a recent falling out

164
00:08:03,890 --> 00:08:13,250
and Alice then decides she's not gonna

165
00:08:09,800 --> 00:08:15,140
work with Bob anymore so she removes

166
00:08:13,250 --> 00:08:17,570
them from the access control list for

167
00:08:15,140 --> 00:08:21,020
this document and it's important now for

168
00:08:17,570 --> 00:08:23,960
the system the service to not allow Bob

169
00:08:21,020 --> 00:08:26,299
to access any new contents that may be

170
00:08:23,960 --> 00:08:27,859
added to a document to the document

171
00:08:26,300 --> 00:08:29,780
after bob was removed from the access

172
00:08:27,860 --> 00:08:32,240
control list and he had access to it

173
00:08:29,780 --> 00:08:34,789
before so he's already aware of of all

174
00:08:32,240 --> 00:08:36,350
that contents earlier but maybe Allison

175
00:08:34,789 --> 00:08:38,809
Charlie when I have new sensitive

176
00:08:36,350 --> 00:08:43,150
information a new you know confidential

177
00:08:38,809 --> 00:08:46,489
information that Bob should not see so

178
00:08:43,150 --> 00:08:48,319
zanzabar solves this problem by offering

179
00:08:46,490 --> 00:08:51,560
a consistency protocol that it executes

180
00:08:48,320 --> 00:08:54,790
in cooperation with its services all our

181
00:08:51,560 --> 00:08:54,790
client services are

182
00:08:55,270 --> 00:09:01,040
friends of ours they're all Google

183
00:08:58,280 --> 00:09:02,329
services so we are we work in

184
00:09:01,040 --> 00:09:05,750
cooperation with them it's not an

185
00:09:02,330 --> 00:09:07,790
adversarial situation so the first step

186
00:09:05,750 --> 00:09:10,310
of this consistency protocol is in this

187
00:09:07,790 --> 00:09:12,439
example alice has removed Bob from the

188
00:09:10,310 --> 00:09:14,810
access control list so the document

189
00:09:12,440 --> 00:09:17,690
service sends a request to stanza bar to

190
00:09:14,810 --> 00:09:20,869
remove Bob from the as a viewer of

191
00:09:17,690 --> 00:09:23,780
document X and the key to this

192
00:09:20,870 --> 00:09:26,660
consistency protocol is to exploit the

193
00:09:23,780 --> 00:09:28,670
linearizable commit timestamps provided

194
00:09:26,660 --> 00:09:30,680
by the underlying database system which

195
00:09:28,670 --> 00:09:32,750
in this case is spanner it's a

196
00:09:30,680 --> 00:09:34,819
fascinating database system I if you

197
00:09:32,750 --> 00:09:39,140
don't know about it I invite you to to

198
00:09:34,820 --> 00:09:41,270
read this paper from 2012 but in

199
00:09:39,140 --> 00:09:44,840
particular we use these commit time

200
00:09:41,270 --> 00:09:48,319
stamps to mark the order in which events

201
00:09:44,840 --> 00:09:50,690
happen in Zanzibar and so this change to

202
00:09:48,320 --> 00:09:54,020
the access control list for document X

203
00:09:50,690 --> 00:09:55,430
receives time stamp t0 and its answer

204
00:09:54,020 --> 00:09:57,260
well where we turn that time step to the

205
00:09:55,430 --> 00:09:59,270
client in case it wants to use it later

206
00:09:57,260 --> 00:10:01,460
by continuing with this particular

207
00:09:59,270 --> 00:10:03,020
example what we really want to protect

208
00:10:01,460 --> 00:10:06,290
against this is these new content

209
00:10:03,020 --> 00:10:08,210
updates so when another user with

210
00:10:06,290 --> 00:10:10,880
permission to update the content in this

211
00:10:08,210 --> 00:10:14,630
case Charlie could be Alice or anyone

212
00:10:10,880 --> 00:10:17,420
else the the document service will then

213
00:10:14,630 --> 00:10:19,640
send another request to Zanzibar to

214
00:10:17,420 --> 00:10:22,490
check whether this content update is

215
00:10:19,640 --> 00:10:24,830
allowed in this case the answer let's

216
00:10:22,490 --> 00:10:26,150
assume the answer is yes but this and

217
00:10:24,830 --> 00:10:28,610
the important thing is this content

218
00:10:26,150 --> 00:10:30,260
update will receive a new timestamp and

219
00:10:28,610 --> 00:10:33,020
the answer will ensure that this time

220
00:10:30,260 --> 00:10:37,130
step T 1 is larger than the timestamp T

221
00:10:33,020 --> 00:10:39,319
0 for the aqwal update and finally when

222
00:10:37,130 --> 00:10:45,080
let's say Bob tries to access this

223
00:10:39,320 --> 00:10:47,930
document then the document service will

224
00:10:45,080 --> 00:10:50,780
send that check on a kolcheck for Bob to

225
00:10:47,930 --> 00:10:53,270
view a document X but it will send back

226
00:10:50,780 --> 00:10:54,949
that the timestamp that disease answer

227
00:10:53,270 --> 00:10:56,120
bar had sent the document service before

228
00:10:54,950 --> 00:10:57,440
the document service will have

229
00:10:56,120 --> 00:10:59,330
associated that timestamp with the

230
00:10:57,440 --> 00:11:01,760
version of the document in its own

231
00:10:59,330 --> 00:11:05,480
storage system separate from Zanzibar

232
00:11:01,760 --> 00:11:07,580
and now Zanzibar can evaluate this Akal

233
00:11:05,480 --> 00:11:08,090
check knowing that it needs to do so at

234
00:11:07,580 --> 00:11:12,050
a times

235
00:11:08,090 --> 00:11:15,290
at least as fresh as t1 and it does so

236
00:11:12,050 --> 00:11:18,050
and this this protocol ensures that Bob

237
00:11:15,290 --> 00:11:20,900
cannot access new new contents of the

238
00:11:18,050 --> 00:11:24,500
document after bob was removed from the

239
00:11:20,900 --> 00:11:26,480
access control list so how does it sense

240
00:11:24,500 --> 00:11:29,600
of our work inside so it's a very large

241
00:11:26,480 --> 00:11:32,210
system starting from the top we have

242
00:11:29,600 --> 00:11:35,450
clients and we have a small well-defined

243
00:11:32,210 --> 00:11:36,590
API the two things the two parts the API

244
00:11:35,450 --> 00:11:39,530
we've been talking about so far are

245
00:11:36,590 --> 00:11:42,770
right and check writes are used to

246
00:11:39,530 --> 00:11:46,520
create modify or delete access control

247
00:11:42,770 --> 00:11:47,900
entries or relation to pools check is

248
00:11:46,520 --> 00:11:49,880
this isolation check that I've been

249
00:11:47,900 --> 00:11:52,880
talking about there's two other

250
00:11:49,880 --> 00:11:54,710
read-only api's read and expand that

251
00:11:52,880 --> 00:11:57,850
they allow our clients to read back

252
00:11:54,710 --> 00:12:01,430
their apples and reason about them

253
00:11:57,850 --> 00:12:04,010
there's one other API called watch which

254
00:12:01,430 --> 00:12:05,900
provides our clients with a neo

255
00:12:04,010 --> 00:12:09,350
real-time stream of changes to their

256
00:12:05,900 --> 00:12:12,430
apples this is a very useful API for

257
00:12:09,350 --> 00:12:16,510
clients that want to keep up-to-date

258
00:12:12,430 --> 00:12:20,979
indices that are Akal aware for search

259
00:12:16,510 --> 00:12:24,650
when a say a check request arrives at a

260
00:12:20,980 --> 00:12:26,510
at Zanzibar it arrives our main server

261
00:12:24,650 --> 00:12:29,240
types call a co server these are

262
00:12:26,510 --> 00:12:31,850
organizing clusters and requests can

263
00:12:29,240 --> 00:12:35,360
arrive at any server in the cluster and

264
00:12:31,850 --> 00:12:36,680
that server will farm out work to other

265
00:12:35,360 --> 00:12:39,050
servers as necessary

266
00:12:36,680 --> 00:12:41,109
remember those levels of indirection in

267
00:12:39,050 --> 00:12:45,560
the data whenever you see one of those

268
00:12:41,110 --> 00:12:47,810
typically results in Akal server doing

269
00:12:45,560 --> 00:12:50,180
an internal request to another actual

270
00:12:47,810 --> 00:12:53,150
server to evaluate that part of the

271
00:12:50,180 --> 00:12:55,640
request and these things these requests

272
00:12:53,150 --> 00:12:57,709
can infer in turn contact other Akal

273
00:12:55,640 --> 00:13:00,050
servers so it's a very rich graph of

274
00:12:57,710 --> 00:13:03,020
internal are pcs these is all remote

275
00:13:00,050 --> 00:13:05,120
procedure calls here so that's how our

276
00:13:03,020 --> 00:13:07,939
clusters work and as I mentioned before

277
00:13:05,120 --> 00:13:09,980
all the data is stored on the spanner

278
00:13:07,940 --> 00:13:11,420
global database system we have one

279
00:13:09,980 --> 00:13:13,700
database for their main space

280
00:13:11,420 --> 00:13:15,770
configurations which is how our clients

281
00:13:13,700 --> 00:13:18,380
configure our system with namespaces and

282
00:13:15,770 --> 00:13:20,030
relations we have one database per

283
00:13:18,380 --> 00:13:21,240
namespace to restore the relation to

284
00:13:20,030 --> 00:13:24,059
both for that namespace

285
00:13:21,240 --> 00:13:27,029
and finally we have a changelog which is

286
00:13:24,059 --> 00:13:29,189
a record of all the changes to the

287
00:13:27,029 --> 00:13:35,910
through all the namespaces that it's

288
00:13:29,189 --> 00:13:37,829
used by the watch sir so satisfying all

289
00:13:35,910 --> 00:13:41,639
the requirements of a system like

290
00:13:37,829 --> 00:13:44,248
Zanzibar simultaneously presents very

291
00:13:41,639 --> 00:13:46,559
difficult engineering challenges I don't

292
00:13:44,249 --> 00:13:48,749
have time unfortunately to describe the

293
00:13:46,559 --> 00:13:51,118
many implementation techniques that

294
00:13:48,749 --> 00:13:52,559
we've included in Zanzibar to satisfy

295
00:13:51,119 --> 00:13:55,649
these requirements I invite you to read

296
00:13:52,559 --> 00:13:57,269
the paper but very quickly we have some

297
00:13:55,649 --> 00:13:59,449
freedom to choose these evaluation time

298
00:13:57,269 --> 00:14:01,619
stamps because that protocol I mentioned

299
00:13:59,449 --> 00:14:04,469
clients will give us a time stamp and

300
00:14:01,619 --> 00:14:06,809
they want us to evaluate the cheque at a

301
00:14:04,470 --> 00:14:09,059
time that at least as fresh as that but

302
00:14:06,809 --> 00:14:10,949
we have we have freedom all the way back

303
00:14:09,059 --> 00:14:13,439
to that time stamp and often it turns

304
00:14:10,949 --> 00:14:15,569
out clients are satisfied with

305
00:14:13,439 --> 00:14:17,610
evaluating time times that are more than

306
00:14:15,569 --> 00:14:20,519
ten seconds old or mean minutes old and

307
00:14:17,610 --> 00:14:23,879
that gives us the ability to choose a

308
00:14:20,519 --> 00:14:26,040
time stamp for data that gives us data

309
00:14:23,879 --> 00:14:28,379
that's already been replicated around

310
00:14:26,040 --> 00:14:32,368
the world so that we have a local copy

311
00:14:28,379 --> 00:14:34,499
so it's nearby we have a number of hot

312
00:14:32,369 --> 00:14:36,809
stop hot spot mitigation techniques such

313
00:14:34,499 --> 00:14:40,529
as caching and deduplication of requests

314
00:14:36,809 --> 00:14:42,059
we hedge requests which means this is

315
00:14:40,529 --> 00:14:44,490
all internal requests we hedge request

316
00:14:42,059 --> 00:14:46,319
meaning that we send multiple copies of

317
00:14:44,490 --> 00:14:48,029
the same request to multiple servers and

318
00:14:46,319 --> 00:14:50,610
take the fact that one that comes back

319
00:14:48,029 --> 00:14:52,410
first that's a very important technique

320
00:14:50,610 --> 00:14:53,730
for reducing tail-end seen in the

321
00:14:52,410 --> 00:14:55,949
distributed system there's always one

322
00:14:53,730 --> 00:14:57,269
slow server somewhere so if you if you

323
00:14:55,949 --> 00:14:58,618
have bad luck and you're only sending

324
00:14:57,269 --> 00:15:00,629
your request to that bad server you're

325
00:14:58,619 --> 00:15:03,089
going to have high latency so in some

326
00:15:00,629 --> 00:15:04,799
cases we farm out the same request of

327
00:15:03,089 --> 00:15:07,019
multiple servers and take the fastest

328
00:15:04,799 --> 00:15:09,420
one we have a lot of fine-grained

329
00:15:07,019 --> 00:15:12,660
performance isolation to protect against

330
00:15:09,420 --> 00:15:15,748
misbehaving clients and finally we use

331
00:15:12,660 --> 00:15:19,079
in a specialized indexing system called

332
00:15:15,749 --> 00:15:23,220
Leopard to optimize up operations on

333
00:15:19,079 --> 00:15:25,609
very large or deeply nested sets and we

334
00:15:23,220 --> 00:15:28,049
that's runs in memory can get back

335
00:15:25,610 --> 00:15:31,279
return unions and intersections of very

336
00:15:28,049 --> 00:15:31,279
large sets in microseconds

337
00:15:31,660 --> 00:15:36,339
so in terms of deployment Zanzibar has

338
00:15:35,080 --> 00:15:40,000
been in production for more than five

339
00:15:36,340 --> 00:15:43,000
years it manages over 1,500 namespaces

340
00:15:40,000 --> 00:15:44,320
defined by hundreds of clients it stores

341
00:15:43,000 --> 00:15:47,890
more than 2 trillion in relation to

342
00:15:44,320 --> 00:15:48,720
pools replicated several dozen places

343
00:15:47,890 --> 00:15:51,699
around the world

344
00:15:48,720 --> 00:15:53,980
it receives more than 10 million

345
00:15:51,700 --> 00:15:57,880
requests per second from various clients

346
00:15:53,980 --> 00:16:00,910
mostly read-only kind and we have over

347
00:15:57,880 --> 00:16:02,710
10,000 servers also in several dozen

348
00:16:00,910 --> 00:16:06,130
clusters around the world to serve these

349
00:16:02,710 --> 00:16:08,950
requests so just a couple of performance

350
00:16:06,130 --> 00:16:13,150
notes here in terms of load this is a

351
00:16:08,950 --> 00:16:14,650
typical week and how many check queries

352
00:16:13,150 --> 00:16:16,990
per second we have two kinds of check

353
00:16:14,650 --> 00:16:19,900
queries we classify them as either safe

354
00:16:16,990 --> 00:16:22,000
or recent a safe request is one for

355
00:16:19,900 --> 00:16:24,069
which the time stamp that the client

356
00:16:22,000 --> 00:16:27,490
requested is at least 10 seconds old

357
00:16:24,070 --> 00:16:28,990
again that means that almost guaranteed

358
00:16:27,490 --> 00:16:30,580
we'll be able to find the data at a

359
00:16:28,990 --> 00:16:32,890
nearby server because it's already been

360
00:16:30,580 --> 00:16:35,650
replicated worldwide by spanner we have

361
00:16:32,890 --> 00:16:38,710
an 8 minute replication heartbeat I'm

362
00:16:35,650 --> 00:16:40,329
sorry it's 8 second the other kind is

363
00:16:38,710 --> 00:16:42,700
recent that's when the time stamp

364
00:16:40,330 --> 00:16:45,010
requested by the by the client is lit as

365
00:16:42,700 --> 00:16:46,360
less than 10 seconds old and then in

366
00:16:45,010 --> 00:16:48,550
some of these cases we're gonna have to

367
00:16:46,360 --> 00:16:50,290
go to a faraway server because the data

368
00:16:48,550 --> 00:16:53,829
hasn't been replicated yet so those are

369
00:16:50,290 --> 00:16:56,380
slower but as you can see then the great

370
00:16:53,830 --> 00:16:58,840
majority of requests are of the safe

371
00:16:56,380 --> 00:17:01,710
kind of the fast kind orders of

372
00:16:58,840 --> 00:17:05,319
magnitude more about 4 million QPS

373
00:17:01,710 --> 00:17:07,630
peeking every week for the safe whereas

374
00:17:05,319 --> 00:17:11,020
only about a hundred thousand for the

375
00:17:07,630 --> 00:17:13,180
recent in terms of latency which is one

376
00:17:11,020 --> 00:17:15,310
of our major goals here again this is

377
00:17:13,180 --> 00:17:17,560
the same week we have different

378
00:17:15,310 --> 00:17:19,270
percentiles of latency for check safe

379
00:17:17,560 --> 00:17:22,030
which again is the most common operation

380
00:17:19,270 --> 00:17:24,150
by far orders of magnitude and we're

381
00:17:22,030 --> 00:17:28,300
very proud of the fact that we we are

382
00:17:24,150 --> 00:17:30,430
serving check responses in less than 10

383
00:17:28,300 --> 00:17:33,399
milliseconds at the 95th percentile and

384
00:17:30,430 --> 00:17:37,120
less than 100 milliseconds at the 99.9

385
00:17:33,400 --> 00:17:38,220
percent off finally availability as I

386
00:17:37,120 --> 00:17:39,820
mentioned the very important

387
00:17:38,220 --> 00:17:42,790
consideration for an authorization

388
00:17:39,820 --> 00:17:45,100
system and we're very pleased that we've

389
00:17:42,790 --> 00:17:48,059
been able to maintain available

390
00:17:45,100 --> 00:17:50,428
over 99.999% over the last three years

391
00:17:48,059 --> 00:17:53,230
if you look closely you'll see that

392
00:17:50,429 --> 00:17:54,940
around New Year's every year the system

393
00:17:53,230 --> 00:17:57,520
seems to take a little break I don't

394
00:17:54,940 --> 00:18:01,840
really know why but I it's it's still

395
00:17:57,520 --> 00:18:05,370
very far above the 99.99% so to

396
00:18:01,840 --> 00:18:07,570
summarize I hope I've convinced you that

397
00:18:05,370 --> 00:18:10,270
robust Authority authorization checks

398
00:18:07,570 --> 00:18:12,340
are central to preserving privacy online

399
00:18:10,270 --> 00:18:15,039
it's answer bar is a unified

400
00:18:12,340 --> 00:18:18,220
authorization check authorization system

401
00:18:15,039 --> 00:18:21,669
for Google services and it respects

402
00:18:18,220 --> 00:18:25,320
causal order of user actions supports a

403
00:18:21,669 --> 00:18:27,880
wide variety of access control policies

404
00:18:25,320 --> 00:18:30,309
it offers very low latency very high

405
00:18:27,880 --> 00:18:32,380
availability scales to trillions of

406
00:18:30,309 --> 00:18:34,750
access control lists and millions of

407
00:18:32,380 --> 00:18:37,289
checks per second to support hundreds of

408
00:18:34,750 --> 00:18:39,669
services used by billions of people and

409
00:18:37,289 --> 00:18:42,450
please come to our poster tonight if you

410
00:18:39,669 --> 00:18:46,890
like to learn more thank you very much

411
00:18:42,450 --> 00:18:49,360
[Applause]

412
00:18:46,890 --> 00:18:53,710
before any questions it's our final

413
00:18:49,360 --> 00:18:56,779
speaker okay so yeah any questions

414
00:18:53,710 --> 00:18:56,779
[Music]

415
00:18:59,190 --> 00:19:06,610
Peter destroyers northeastern this is

416
00:19:02,980 --> 00:19:09,299
fascinating it's curious the the

417
00:19:06,610 --> 00:19:12,250
relations are those opaque or are they

418
00:19:09,299 --> 00:19:17,470
semantic do have semantic knowledge of

419
00:19:12,250 --> 00:19:20,320
what Viewer means our member so Zanzibar

420
00:19:17,470 --> 00:19:23,440
does not understand the semantics of

421
00:19:20,320 --> 00:19:26,379
their relations we they're fully defined

422
00:19:23,440 --> 00:19:28,750
by our clients in their configuration

423
00:19:26,380 --> 00:19:33,220
files we simply check for matches

424
00:19:28,750 --> 00:19:35,350
whether users have the certain relations

425
00:19:33,220 --> 00:19:40,150
to certain objects okay thank you I

426
00:19:35,350 --> 00:19:42,070
suspected that Ana Cornfeld Simpson

427
00:19:40,150 --> 00:19:42,700
University of Washington really cool

428
00:19:42,070 --> 00:19:46,870
work

429
00:19:42,700 --> 00:19:48,580
I was wondering since you know that your

430
00:19:46,870 --> 00:19:50,110
clients are other Google services and

431
00:19:48,580 --> 00:19:53,408
you have this watch server already

432
00:19:50,110 --> 00:19:56,379
whether you could end up with something

433
00:19:53,409 --> 00:19:58,059
along the lines of the key transparency

434
00:19:56,380 --> 00:19:58,840
work where clients would be able to sort

435
00:19:58,059 --> 00:20:01,300
of

436
00:19:58,840 --> 00:20:05,110
keep a I don't know internal in this

437
00:20:01,300 --> 00:20:06,820
case but internally public track of any

438
00:20:05,110 --> 00:20:09,669
changes that have been made and recorded

439
00:20:06,820 --> 00:20:11,530
by the system well thanks I am I'm not

440
00:20:09,670 --> 00:20:14,110
familiar with the key transparency work

441
00:20:11,530 --> 00:20:16,270
I'd love to learn more afterwards but

442
00:20:14,110 --> 00:20:18,310
yeah so I'm not sure I can answer your

443
00:20:16,270 --> 00:20:23,710
question I'm just not familiar with with

444
00:20:18,310 --> 00:20:27,460
that hi

445
00:20:23,710 --> 00:20:30,190
I am mr. Sandler from Oracle is that a

446
00:20:27,460 --> 00:20:33,910
global system meaning that does it span

447
00:20:30,190 --> 00:20:35,680
worldwide or is it a system that is

448
00:20:33,910 --> 00:20:40,600
local to see yeah our production

449
00:20:35,680 --> 00:20:43,030
instance is global we we have 10,000

450
00:20:40,600 --> 00:20:44,800
servers on in several dozen data centers

451
00:20:43,030 --> 00:20:46,899
all around the world to be close to our

452
00:20:44,800 --> 00:20:49,659
users and our services aren't our

453
00:20:46,900 --> 00:20:51,070
clients for latency and also for high

454
00:20:49,660 --> 00:20:54,340
availability and the data is also

455
00:20:51,070 --> 00:20:56,050
replicated globally again at several

456
00:20:54,340 --> 00:20:58,840
dozen times all around the world again

457
00:20:56,050 --> 00:21:02,020
to be close to our clients and our users

458
00:20:58,840 --> 00:21:06,399
for for both low latency and

459
00:21:02,020 --> 00:21:07,870
availability thank you ok let's thank

460
00:21:06,400 --> 00:21:13,130
our speaker

461
00:21:07,870 --> 00:21:13,129
[Applause]

