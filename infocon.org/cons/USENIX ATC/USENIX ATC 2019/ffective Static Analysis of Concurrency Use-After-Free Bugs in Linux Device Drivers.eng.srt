1
00:00:12,070 --> 00:00:16,309
hello I'm judged by from Johan

2
00:00:14,360 --> 00:00:20,810
University America to share our paper

3
00:00:16,309 --> 00:00:23,150
about party action use of free box into

4
00:00:20,810 --> 00:00:26,930
a drivers are often generous tenant call

5
00:00:23,150 --> 00:00:30,709
system cartridge or can be exploit to

6
00:00:26,930 --> 00:00:32,870
attack the operating system many of

7
00:00:30,710 --> 00:00:35,690
these bugs are caused by sequential

8
00:00:32,870 --> 00:00:38,320
execution namely the free and the use in

9
00:00:35,690 --> 00:00:43,370
the same threat and some of these bugs

10
00:00:38,320 --> 00:00:45,320
cost by concurrent code execution namely

11
00:00:43,370 --> 00:00:47,809
the free NGOs are in two different

12
00:00:45,320 --> 00:00:53,929
stress so such bugs are more difficult

13
00:00:47,809 --> 00:00:56,839
to detect here is an example of a

14
00:00:53,929 --> 00:01:00,559
concurrency user free bug in the CW 1200

15
00:00:56,839 --> 00:01:04,640
Rivera in the Trevor code the function

16
00:01:00,559 --> 00:01:09,530
CW 1200 HW skin can be concurrently

17
00:01:04,640 --> 00:01:13,360
escalated with the function CW to 1200

18
00:01:09,530 --> 00:01:16,580
PA SS even for changed the two functions

19
00:01:13,360 --> 00:01:18,770
respectively have a free and rate

20
00:01:16,580 --> 00:01:22,640
operations the read operation is

21
00:01:18,770 --> 00:01:25,070
protected by our hex lock but the free

22
00:01:22,640 --> 00:01:27,760
operation is not protected by this lock

23
00:01:25,070 --> 00:01:31,820
does a concurrency is a free park occurs

24
00:01:27,760 --> 00:01:36,890
this bug had been present for over five

25
00:01:31,820 --> 00:01:39,529
years to know more about such bugs we

26
00:01:36,890 --> 00:01:45,860
study the Linux kernel commits we found

27
00:01:39,530 --> 00:01:48,080
that about 20 about 42 percent of feral

28
00:01:45,860 --> 00:01:54,650
camels fixing yourself Reebok co-chair

29
00:01:48,080 --> 00:01:58,850
concurrency besides well we also study

30
00:01:54,650 --> 00:02:00,980
the mission to toes in this case we

31
00:01:58,850 --> 00:02:04,729
found that no static analysis toy as

32
00:02:00,980 --> 00:02:09,280
mentioned to detect concurrency just use

33
00:02:04,730 --> 00:02:12,709
our free bugs just it is important to

34
00:02:09,280 --> 00:02:17,989
explore start analysis to detect such

35
00:02:12,709 --> 00:02:20,390
bugs in us drivers there are some

36
00:02:17,989 --> 00:02:22,470
channels to do it the first one is how

37
00:02:20,390 --> 00:02:25,649
to intensify general functions

38
00:02:22,470 --> 00:02:27,150
that it can be concurrently executed in

39
00:02:25,650 --> 00:02:29,130
the wrists colonel the documentation

40
00:02:27,150 --> 00:02:31,860
about Rio concurrency is often poor and

41
00:02:29,130 --> 00:02:35,579
there are many functions defined in the

42
00:02:31,860 --> 00:02:38,070
Java code the sector y is how to ensure

43
00:02:35,580 --> 00:02:40,590
accuracy and the efficiency of code

44
00:02:38,070 --> 00:02:42,660
analysis and the next error code base is

45
00:02:40,590 --> 00:02:44,420
over a very large and there are many

46
00:02:42,660 --> 00:02:46,950
function calls are called different

47
00:02:44,420 --> 00:02:51,089
factions across different software

48
00:02:46,950 --> 00:02:53,630
across different models so in this paper

49
00:02:51,090 --> 00:02:56,160
we propose our approach an empty cuff to

50
00:02:53,630 --> 00:02:59,100
effectively detect the concurrency user

51
00:02:56,160 --> 00:03:02,010
free bugs into a traverse it performs

52
00:02:59,100 --> 00:03:07,709
static analysis on the air RAM our our

53
00:03:02,010 --> 00:03:10,859
we embed code of the West errors in the

54
00:03:07,710 --> 00:03:13,650
first uses local colobus strategy to

55
00:03:10,860 --> 00:03:16,140
identify concurrent function pairs from

56
00:03:13,650 --> 00:03:18,450
our source code and then it uses a

57
00:03:16,140 --> 00:03:23,010
summary based lochside an asset to

58
00:03:18,450 --> 00:03:26,519
detect concurrency user free bugs you

59
00:03:23,010 --> 00:03:29,399
must let see the local overstretching in

60
00:03:26,520 --> 00:03:32,310
most cases or linux terror and s2

61
00:03:29,400 --> 00:03:34,950
infinitum it expla meant some functions

62
00:03:32,310 --> 00:03:38,300
including Kanodia or interfaces and

63
00:03:34,950 --> 00:03:41,429
interrupt handler interfaces and this

64
00:03:38,300 --> 00:03:44,940
trainer phases are the entries of this

65
00:03:41,430 --> 00:03:48,030
Trevor trust a broken country is often

66
00:03:44,940 --> 00:03:51,900
determined by concurrent escucha of

67
00:03:48,030 --> 00:03:54,660
these driver interfaces so we need to

68
00:03:51,900 --> 00:03:57,530
identify which pairs of Trevor

69
00:03:54,660 --> 00:04:01,290
interfaces can be concurrently executed

70
00:03:57,530 --> 00:04:05,220
now here are two example network errors

71
00:04:01,290 --> 00:04:08,790
in the nest kernel the two trailers both

72
00:04:05,220 --> 00:04:09,930
define Global's it has structure whose

73
00:04:08,790 --> 00:04:14,640
tab is struct

74
00:04:09,930 --> 00:04:17,519
net device ops this data structure has

75
00:04:14,640 --> 00:04:21,298
some function pointer fields each field

76
00:04:17,519 --> 00:04:25,220
has a kernel drivers interface which

77
00:04:21,298 --> 00:04:28,620
represents a specific traffic Jannetty

78
00:04:25,220 --> 00:04:32,669
for example in the figure the indio open

79
00:04:28,620 --> 00:04:35,760
used to open the device and your store

80
00:04:32,669 --> 00:04:38,900
is just to close the device and

81
00:04:35,760 --> 00:04:42,510
the NGO start act media is used to

82
00:04:38,900 --> 00:04:47,310
transmit the packets

83
00:04:42,510 --> 00:04:52,010
besides the the two trailers post call

84
00:04:47,310 --> 00:04:54,800
or the function requires to a queue to

85
00:04:52,010 --> 00:04:58,560
register the interrupt handler interface

86
00:04:54,800 --> 00:05:02,970
or from the focus of this Java

87
00:04:58,560 --> 00:05:05,580
interfaces do start at meat can be

88
00:05:02,970 --> 00:05:09,330
concurrently executed with the interrupt

89
00:05:05,580 --> 00:05:14,669
handler part in the open is narrow can

90
00:05:09,330 --> 00:05:17,669
hard to hit with your closed pistol on

91
00:05:14,670 --> 00:05:21,440
Teixeira model we use two stages to

92
00:05:17,670 --> 00:05:24,180
extract concurrent to hunger in pairs

93
00:05:21,440 --> 00:05:27,510
firstly we analyze the source code of

94
00:05:24,180 --> 00:05:31,050
each driver which forms the hostage and

95
00:05:27,510 --> 00:05:34,500
same ways that statistically analyze the

96
00:05:31,050 --> 00:05:40,350
local results of all drivers which from

97
00:05:34,500 --> 00:05:42,630
the global stage in the in the lock

98
00:05:40,350 --> 00:05:44,970
stage there are three stamps firstly we

99
00:05:42,630 --> 00:05:48,570
identify possible concurrency function

100
00:05:44,970 --> 00:05:50,670
pairs in each driver we do it by

101
00:05:48,570 --> 00:05:52,950
checking whether the two functions or

102
00:05:50,670 --> 00:05:56,340
acquired the sim lock if so we select

103
00:05:52,950 --> 00:05:58,830
select the pair of them secondly with

104
00:05:56,340 --> 00:06:03,479
drop possible leave for spares fourth

105
00:05:58,830 --> 00:06:05,969
pair we collect the ancestors of the two

106
00:06:03,480 --> 00:06:08,990
functions in the car graph and the drop

107
00:06:05,970 --> 00:06:12,150
despair if they have a common ancestor

108
00:06:08,990 --> 00:06:13,800
subtly for each Romanian pair we

109
00:06:12,150 --> 00:06:16,650
identified the pairs of terror

110
00:06:13,800 --> 00:06:23,220
interfaces calling the functions and

111
00:06:16,650 --> 00:06:27,659
extract this pairs as local concurrent

112
00:06:23,220 --> 00:06:30,920
interface pairs for this favour after

113
00:06:27,660 --> 00:06:33,330
the local stage we get the local

114
00:06:30,920 --> 00:06:36,990
concurrent interface appears for each

115
00:06:33,330 --> 00:06:40,409
juror in the global stage we first

116
00:06:36,990 --> 00:06:43,640
gather all this relatives in pairs and

117
00:06:40,410 --> 00:06:46,290
therefore each pair will check how many

118
00:06:43,640 --> 00:06:47,729
software's have the two triggering

119
00:06:46,290 --> 00:06:49,169
surfaces and how many software's

120
00:06:47,730 --> 00:06:50,969
considered the two

121
00:06:49,169 --> 00:06:54,620
or their interfaces as a local

122
00:06:50,969 --> 00:06:57,599
concurrent interface pair we divide the

123
00:06:54,620 --> 00:07:00,270
two numbers and get a ratio if this

124
00:06:57,599 --> 00:07:03,628
ratio is larger than was fair food and

125
00:07:00,270 --> 00:07:08,960
this local local concurrent interface PR

126
00:07:03,629 --> 00:07:08,960
is consider as a global interface pair

127
00:07:10,249 --> 00:07:18,479
and the table shows for examples the

128
00:07:14,990 --> 00:07:21,930
resource or for the first two pairs are

129
00:07:18,479 --> 00:07:25,860
very small so they are dropped and we

130
00:07:21,930 --> 00:07:30,330
show for the last two pairs lucky enough

131
00:07:25,860 --> 00:07:34,379
so they are extracted finally with this

132
00:07:30,330 --> 00:07:37,740
global concurrent interface pairs we

133
00:07:34,379 --> 00:07:41,490
identify concurrent function pairs in

134
00:07:37,740 --> 00:07:44,819
each driver with this function PS we

135
00:07:41,490 --> 00:07:49,499
perform a summary based oxide analysis

136
00:07:44,819 --> 00:07:51,569
in the first it uses a contacts s2 and

137
00:07:49,499 --> 00:07:54,330
the facility onassis to maintain a lock

138
00:07:51,569 --> 00:07:58,889
sight for each variable access he

139
00:07:54,330 --> 00:08:02,310
performs field based alias analysis to

140
00:07:58,889 --> 00:08:04,589
identify the sim locks it performs a

141
00:08:02,310 --> 00:08:07,110
summary based on data to reuse the

142
00:08:04,589 --> 00:08:10,740
result of already and writes the

143
00:08:07,110 --> 00:08:14,149
functions specifically this analysis has

144
00:08:10,740 --> 00:08:16,800
two stamps roughly for each count

145
00:08:14,149 --> 00:08:20,250
concurrent function here it collects the

146
00:08:16,800 --> 00:08:22,589
lock site of each variable size in the

147
00:08:20,250 --> 00:08:25,589
two factors and saying it checks the

148
00:08:22,589 --> 00:08:29,339
held the lock size of a wearable status

149
00:08:25,589 --> 00:08:32,338
to find box in the well in the

150
00:08:29,339 --> 00:08:38,578
evaluation we check the link the driver

151
00:08:32,339 --> 00:08:41,820
code in Linux 3.14 and 4.19 where your

152
00:08:38,578 --> 00:08:45,239
common PC with false appeals and erotica

153
00:08:41,820 --> 00:08:50,790
from for stress we configured less

154
00:08:45,240 --> 00:08:52,980
kernel using the OAS config for x86 the

155
00:08:50,790 --> 00:08:56,250
results of the local global strategy are

156
00:08:52,980 --> 00:08:58,709
shown in the table the curve analyzed an

157
00:08:56,250 --> 00:09:00,000
S is over five million third quadrants

158
00:08:58,709 --> 00:09:02,729
within twenty minutes

159
00:09:00,000 --> 00:09:05,720
it is instruct sort of

160
00:09:02,730 --> 00:09:08,820
parent function pairs in the gel coat

161
00:09:05,720 --> 00:09:11,760
with this paris-dakar fence hundreds of

162
00:09:08,820 --> 00:09:13,800
concurrency us are free bugs we imagine

163
00:09:11,760 --> 00:09:16,050
a check all of this box and identified

164
00:09:13,800 --> 00:09:20,040
that many of them should be real they

165
00:09:16,050 --> 00:09:24,180
also sent 130 real back to Jared

166
00:09:20,040 --> 00:09:28,459
developers and 95 of them have been

167
00:09:24,180 --> 00:09:33,449
confirmed the site gives some links to

168
00:09:28,459 --> 00:09:35,550
some come from the box the first

169
00:09:33,449 --> 00:09:38,760
positives are introduced by some reasons

170
00:09:35,550 --> 00:09:42,149
for example our onions and atheists may

171
00:09:38,760 --> 00:09:45,389
incorrectly identified the same locks

172
00:09:42,149 --> 00:09:47,910
and our flow sensitive analysis doesn't

173
00:09:45,389 --> 00:09:50,519
validate the past conditions the

174
00:09:47,910 --> 00:09:53,550
Forstner tails caused by some reasons

175
00:09:50,519 --> 00:09:55,880
for example of occupant or analysis not

176
00:09:53,550 --> 00:10:00,449
performed and the other can't of

177
00:09:55,880 --> 00:10:02,670
Sanitation and lactate at last when we

178
00:10:00,449 --> 00:10:04,380
make a conclusion of a paper Conquer

179
00:10:02,670 --> 00:10:07,290
series of Reeboks integers are often

180
00:10:04,380 --> 00:10:09,420
hard to detect we proposed a certain

181
00:10:07,290 --> 00:10:12,660
assets approach namely decaf to detect

182
00:10:09,420 --> 00:10:14,579
this bugs it uses a local global

183
00:10:12,660 --> 00:10:18,060
strategy and summary based block site

184
00:10:14,579 --> 00:10:21,630
analysis this approach fans hundreds of

185
00:10:18,060 --> 00:10:23,150
new real box 2's drivers okay the sauce

186
00:10:21,630 --> 00:10:30,529
thank you

187
00:10:23,150 --> 00:10:30,529
[Applause]

188
00:10:31,950 --> 00:10:37,330
all right I have a question if no one

189
00:10:35,170 --> 00:10:39,130
else has a question so you mentioned

190
00:10:37,330 --> 00:10:41,440
that you're using alias analysis and

191
00:10:39,130 --> 00:10:46,270
you're also using apparently called

192
00:10:41,440 --> 00:10:47,260
graph analysis correct so I would tend

193
00:10:46,270 --> 00:10:49,540
to think that you would have to use

194
00:10:47,260 --> 00:10:51,760
these analyses in an inter procedural

195
00:10:49,540 --> 00:10:53,410
fashion like a whole you'd have to you

196
00:10:51,760 --> 00:10:55,000
do this over the whole Linux kernel is

197
00:10:53,410 --> 00:10:56,500
that correct or are you actually using

198
00:10:55,000 --> 00:11:00,460
the alias analysis and call graph

199
00:10:56,500 --> 00:11:04,930
analysis only during your local phase in

200
00:11:00,460 --> 00:11:06,760
fact I the alias analysis just to

201
00:11:04,930 --> 00:11:09,640
perform on the on the gelcoat

202
00:11:06,760 --> 00:11:14,050
no it's the whole kernel and because we

203
00:11:09,640 --> 00:11:17,920
for example we we analyze the when we're

204
00:11:14,050 --> 00:11:21,099
away only unless the functions in this

205
00:11:17,920 --> 00:11:23,530
rarest so for example if the trailer

206
00:11:21,100 --> 00:11:29,730
costs a common interface like maybe your

207
00:11:23,530 --> 00:11:34,420
Kazakh and Kim Eric with tropic and we

208
00:11:29,730 --> 00:11:41,860
do the other two an analysis by maybe

209
00:11:34,420 --> 00:11:44,530
the renaming the names when we can cross

210
00:11:41,860 --> 00:11:45,880
the functions okay so it sounds like

211
00:11:44,530 --> 00:11:47,500
you're doing interprocedural analysis

212
00:11:45,880 --> 00:11:49,480
within the driver but not but not

213
00:11:47,500 --> 00:11:51,550
actually across translation units

214
00:11:49,480 --> 00:11:53,800
correct yeah okay so you could

215
00:11:51,550 --> 00:11:56,260
potentially miss aliases that would

216
00:11:53,800 --> 00:11:58,540
occur due to interactions between

217
00:11:56,260 --> 00:12:00,130
drivers and interactions between the

218
00:11:58,540 --> 00:12:02,849
driver and between the drivers and the

219
00:12:00,130 --> 00:12:06,820
core kernel right yeah yeah for example

220
00:12:02,850 --> 00:12:08,680
in fact if some time tell us we call the

221
00:12:06,820 --> 00:12:12,160
function defined the other powers and

222
00:12:08,680 --> 00:12:13,359
and we mean if their situations okay but

223
00:12:12,160 --> 00:12:17,370
it's still good enough for finding bugs

224
00:12:13,360 --> 00:12:19,480
yeah yeah okay all right other questions

225
00:12:17,370 --> 00:12:21,010
yeah yeah just come to the microphone

226
00:12:19,480 --> 00:12:25,210
yes if you have questions just line up

227
00:12:21,010 --> 00:12:27,370
the microphone collapse so is there

228
00:12:25,210 --> 00:12:29,320
anything anything special in the device

229
00:12:27,370 --> 00:12:31,100
drivers that make you approach work or

230
00:12:29,320 --> 00:12:33,320
you could apply it to

231
00:12:31,100 --> 00:12:36,740
other pieces of software the rest of the

232
00:12:33,320 --> 00:12:40,279
kernel is cosmic chaos speak louder also

233
00:12:36,740 --> 00:12:42,529
is there anything special in device

234
00:12:40,279 --> 00:12:44,930
drivers in the Linux kernel that makes

235
00:12:42,529 --> 00:12:48,110
the approach work or you could apply it

236
00:12:44,930 --> 00:12:53,779
to other pieces of software or to the

237
00:12:48,110 --> 00:12:55,819
rest of the kernel so you ask the how or

238
00:12:53,779 --> 00:12:58,339
whether the calf can go for other

239
00:12:55,819 --> 00:13:00,529
software yeah basically why did you

240
00:12:58,339 --> 00:13:01,550
decide to focus on the device drivers

241
00:13:00,529 --> 00:13:06,439
okay

242
00:13:01,550 --> 00:13:11,329
in fact the calf is only can only work

243
00:13:06,440 --> 00:13:15,920
on Trevor's not and for other software

244
00:13:11,329 --> 00:13:19,969
maybe you know this our approach is

245
00:13:15,920 --> 00:13:25,519
based on the Linux Trek model so if we

246
00:13:19,970 --> 00:13:29,180
maybe we want to apply to maybe first

247
00:13:25,519 --> 00:13:32,810
systems or other software we maybe we

248
00:13:29,180 --> 00:13:35,209
need to modify the we need to know the

249
00:13:32,810 --> 00:13:39,079
model the model of the software and the

250
00:13:35,209 --> 00:13:43,130
modify may be our approach okay thank

251
00:13:39,079 --> 00:13:45,888
you Spiritu blocked Ravana University of

252
00:13:43,130 --> 00:13:48,470
Rochester so I understand you didn't do

253
00:13:45,889 --> 00:13:50,690
the analysis across modules but why

254
00:13:48,470 --> 00:13:54,760
there was no function pointer analysis

255
00:13:50,690 --> 00:13:58,370
within the driver was that a hard step

256
00:13:54,760 --> 00:14:01,459
you said that function pointer analysis

257
00:13:58,370 --> 00:14:04,069
was not performed yeah yeah but it would

258
00:14:01,459 --> 00:14:07,910
be only within the driver that's that's

259
00:14:04,069 --> 00:14:13,849
what you're looking at right okay in

260
00:14:07,910 --> 00:14:16,969
fact in that in the same trailer maybe

261
00:14:13,850 --> 00:14:19,610
that the theorem a also called causal

262
00:14:16,970 --> 00:14:22,459
factor pointer a test pan term may have

263
00:14:19,610 --> 00:14:26,600
a function moment if an index clever

264
00:14:22,459 --> 00:14:29,180
right for example the the tower cause I

265
00:14:26,600 --> 00:14:32,899
don't have to call as a net control of

266
00:14:29,180 --> 00:14:35,779
error cause of poker punter and this

267
00:14:32,899 --> 00:14:43,060
this pointer maybe

268
00:14:35,779 --> 00:14:47,600
have a assignment in this trailer so so

269
00:14:43,060 --> 00:14:52,599
you know in the driver we cannot analyze

270
00:14:47,600 --> 00:14:54,559
the fact Pantera - thanks

271
00:14:52,600 --> 00:14:55,340
alright let's thank our speaker one more

272
00:14:54,559 --> 00:15:00,689
time

273
00:14:55,340 --> 00:15:00,690
[Applause]

