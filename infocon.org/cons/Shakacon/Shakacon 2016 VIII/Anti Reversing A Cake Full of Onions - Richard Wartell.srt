1
00:00:00,000 --> 00:00:11,099
hey<font color="#E5E5E5"> everybody so this I'm gonna give a</font>

2
00:00:06,299 --> 00:00:14,460
talk basically on code obfuscation I'm

3
00:00:11,099 --> 00:00:17,130
Richard war tell Wartortle I work for<font color="#CCCCCC"> a</font>

4
00:00:14,460 --> 00:00:20,880
for<font color="#E5E5E5"> Palo Alto Networks doing reverse</font>

5
00:00:17,130 --> 00:00:23,519
engineering and this talk kind of stem

6
00:00:20,880 --> 00:00:27,750
for me writing CTF challenges and having

7
00:00:23,519 --> 00:00:29,038
some fun with<font color="#CCCCCC"> it this is kind of a tool</font>

8
00:00:27,750 --> 00:00:31,289
demonstration talk where I'm going to

9
00:00:29,039 --> 00:00:34,350
talk about<font color="#E5E5E5"> some kotofey skaters that are</font>

10
00:00:31,289 --> 00:00:36,149
out there and then one<font color="#E5E5E5"> that I wrote the</font>

11
00:00:34,350 --> 00:00:38,160
code base is right here it's called red

12
00:00:36,149 --> 00:00:41,879
fishy realness feel free to go and check

13
00:00:38,160 --> 00:00:43,919
<font color="#CCCCCC">it out also my team is running</font><font color="#E5E5E5"> a CTF</font>

14
00:00:41,879 --> 00:00:46,110
that's starting in less than 24 hours

15
00:00:43,920 --> 00:00:48,719
we're giving away like 16 grand and a

16
00:00:46,110 --> 00:00:50,879
bunch of other stuff so feel free<font color="#E5E5E5"> to</font>

17
00:00:48,719 --> 00:00:54,270
check out labyrinth<font color="#E5E5E5"> calm that's going to</font>

18
00:00:50,879 --> 00:00:57,120
be launching tomorrow so let's talk

19
00:00:54,270 --> 00:01:00,750
about<font color="#E5E5E5"> a shin so the idea of obfuscation</font>

20
00:00:57,120 --> 00:01:02,218
is you have something that<font color="#CCCCCC"> you want to</font>

21
00:01:00,750 --> 00:01:03,510
obscure you have something that<font color="#CCCCCC"> you</font>

22
00:01:02,219 --> 00:01:06,060
don't want<font color="#CCCCCC"> know somebody to know what it</font>

23
00:01:03,510 --> 00:01:07,740
is or you at least want to want to<font color="#E5E5E5"> make</font>

24
00:01:06,060 --> 00:01:10,760
it hard for somebody to understand what

25
00:01:07,740 --> 00:01:13,048
it<font color="#CCCCCC"> is so for example</font><font color="#E5E5E5"> you have a dick but</font>

26
00:01:10,760 --> 00:01:15,570
and you want to<font color="#E5E5E5"> make it look</font><font color="#CCCCCC"> like this</font>

27
00:01:13,049 --> 00:01:18,420
so something like<font color="#E5E5E5"> that this is</font><font color="#CCCCCC"> a general</font>

28
00:01:15,570 --> 00:01:21,689
idea or like this or like this guy make

29
00:01:18,420 --> 00:01:23,909
it look completely nondescript so

30
00:01:21,689 --> 00:01:27,240
there's a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> different obvious</font>

31
00:01:23,909 --> 00:01:29,220
<font color="#E5E5E5">caters that are out there um oh by the</font>

32
00:01:27,240 --> 00:01:33,630
way I don't<font color="#CCCCCC"> use bullets anymore I</font><font color="#E5E5E5"> just</font>

33
00:01:29,220 --> 00:01:35,700
use horrible images so enjoy that<font color="#E5E5E5"> this</font>

34
00:01:33,630 --> 00:01:37,229
is basically<font color="#E5E5E5"> going to be almost like</font>

35
00:01:35,700 --> 00:01:41,280
that Salesforce talk that you saw

36
00:01:37,229 --> 00:01:43,170
earlier um so there's different kinds of

37
00:01:41,280 --> 00:01:44,880
code of ophtho skaters out there when

38
00:01:43,170 --> 00:01:47,490
you're talking about obfuscating a

39
00:01:44,880 --> 00:01:49,350
binary you can talk about qaddafi

40
00:01:47,490 --> 00:01:51,179
skaters like source code obfuscator zh

41
00:01:49,350 --> 00:01:52,770
that are actually just obfuscating your

42
00:01:51,180 --> 00:01:55,079
source code or you can talk about

43
00:01:52,770 --> 00:01:59,600
obfuscation on the binary level so

44
00:01:55,079 --> 00:02:03,029
things like<font color="#CCCCCC"> Packers and compressors</font><font color="#E5E5E5"> um</font>

45
00:01:59,600 --> 00:02:05,100
when you're talking<font color="#E5E5E5"> about source code</font>

46
00:02:03,030 --> 00:02:06,780
obfuscation there's a one of the first

47
00:02:05,100 --> 00:02:08,639
ones<font color="#E5E5E5"> that comes up as different ways of</font>

48
00:02:06,780 --> 00:02:12,020
obscuring your code<font color="#CCCCCC"> you know when you're</font>

49
00:02:08,639 --> 00:02:13,859
writing code you'll put in things like

50
00:02:12,020 --> 00:02:15,660
very obvious

51
00:02:13,860 --> 00:02:17,340
function name so that you can reference

52
00:02:15,660 --> 00:02:18,630
things and understand them lots<font color="#E5E5E5"> of</font>

53
00:02:17,340 --> 00:02:20,760
source code obvious Gators will go in

54
00:02:18,630 --> 00:02:23,010
and get rid of that and make them very

55
00:02:20,760 --> 00:02:24,929
generic or make<font color="#E5E5E5"> them even harder to read</font>

56
00:02:23,010 --> 00:02:26,880
and harder to understand the references

57
00:02:24,930 --> 00:02:30,690
of now because they'll do things like

58
00:02:26,880 --> 00:02:32,549
adding only<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the letters il and one</font>

59
00:02:30,690 --> 00:02:37,500
for all variable names so it's really

60
00:02:32,550 --> 00:02:41,100
<font color="#E5E5E5">hard to read there's pros to this for</font>

61
00:02:37,500 --> 00:02:42,930
pros<font color="#E5E5E5"> it's really</font><font color="#CCCCCC"> good at protecting like</font>

62
00:02:41,100 --> 00:02:44,940
somebody looking<font color="#E5E5E5"> at your source code</font>

63
00:02:42,930 --> 00:02:46,620
it's it's ugly to look at and it's a

64
00:02:44,940 --> 00:02:49,170
pain in the ass<font color="#CCCCCC"> and</font><font color="#E5E5E5"> people won't want</font><font color="#CCCCCC"> to</font>

65
00:02:46,620 --> 00:02:54,180
look at it however when<font color="#E5E5E5"> you're talking</font>

66
00:02:49,170 --> 00:03:00,060
about cons which of these two is<font color="#CCCCCC"> a</font>

67
00:02:54,180 --> 00:03:04,350
convict um so when you're talking about

68
00:03:00,060 --> 00:03:05,940
cons if you have a program<font color="#E5E5E5"> that analyzes</font>

69
00:03:04,350 --> 00:03:07,440
source code for you it's not<font color="#E5E5E5"> going to</font>

70
00:03:05,940 --> 00:03:08,790
struggle<font color="#E5E5E5"> with this at all it's actually</font>

71
00:03:07,440 --> 00:03:10,320
<font color="#E5E5E5">going to look at it and be like whoa</font>

72
00:03:08,790 --> 00:03:12,179
there's still variable names I know

73
00:03:10,320 --> 00:03:13,859
where they go cross-references will

74
00:03:12,180 --> 00:03:16,110
still make sense it actually doesn't do

75
00:03:13,860 --> 00:03:17,760
much source code obfuscation usually

76
00:03:16,110 --> 00:03:25,200
doesn't do much in the way of protecting

77
00:03:17,760 --> 00:03:28,230
a compiled binary um so<font color="#E5E5E5"> I added new</font>

78
00:03:25,200 --> 00:03:30,630
images to this and now I'm struggling if

79
00:03:28,230 --> 00:03:33,390
you're talking another one<font color="#E5E5E5"> that you can</font>

80
00:03:30,630 --> 00:03:36,150
talk about with source code obfuscation

81
00:03:33,390 --> 00:03:38,429
is adding complexity so if you add

82
00:03:36,150 --> 00:03:40,530
complexity to the source code and you

83
00:03:38,430 --> 00:03:42,480
add things like<font color="#E5E5E5"> function calls and</font>

84
00:03:40,530 --> 00:03:44,640
random conditionals and different<font color="#CCCCCC"> things</font>

85
00:03:42,480 --> 00:03:46,200
we sometimes refer to this as red

86
00:03:44,640 --> 00:03:47,640
herring code code that makes you think

87
00:03:46,200 --> 00:03:49,829
that it's<font color="#CCCCCC"> doing something</font><font color="#E5E5E5"> when</font>

88
00:03:47,640 --> 00:03:51,839
essentially in the<font color="#E5E5E5"> end it's not really</font>

89
00:03:49,830 --> 00:03:53,310
doing anything it's<font color="#E5E5E5"> really good at</font>

90
00:03:51,840 --> 00:03:54,780
obvious getting it such that you don't

91
00:03:53,310 --> 00:03:56,549
know the end purpose because there's

92
00:03:54,780 --> 00:03:59,100
<font color="#CCCCCC">just so much crap in front of you that</font>

93
00:03:56,549 --> 00:04:01,560
it's really<font color="#E5E5E5"> hard to tell so when we're</font>

94
00:03:59,100 --> 00:04:03,780
talking about pros of this it's great

95
00:04:01,560 --> 00:04:05,280
really hard to read<font color="#E5E5E5"> really difficult</font>

96
00:04:03,780 --> 00:04:07,440
another benefit of source code

97
00:04:05,280 --> 00:04:11,010
appreciation this way is if it's a

98
00:04:07,440 --> 00:04:12,840
compiled if you're compiling that source

99
00:04:11,010 --> 00:04:16,019
code down to native afterwards you're

100
00:04:12,840 --> 00:04:17,488
getting benefits of the obfuscation down

101
00:04:16,019 --> 00:04:18,989
in the native code as well because

102
00:04:17,488 --> 00:04:20,279
you're adding a bunch of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> which</font>

103
00:04:18,988 --> 00:04:21,869
makes it hard to reverse when you're

104
00:04:20,279 --> 00:04:24,330
actually looking at the native binary as

105
00:04:21,870 --> 00:04:27,510
well so you get benefits on both sides

106
00:04:24,330 --> 00:04:32,640
of that in terms of cons

107
00:04:27,510 --> 00:04:34,830
<font color="#CCCCCC">uh it it adds a lot of code bloat so if</font>

108
00:04:32,640 --> 00:04:37,080
you have some mission-critical code like

109
00:04:34,830 --> 00:04:40,590
say I'm writing code for rockets or a

110
00:04:37,080 --> 00:04:42,450
<font color="#E5E5E5">satellite or something you every cycle</font>

111
00:04:40,590 --> 00:04:43,890
probably counts and you really do not

112
00:04:42,450 --> 00:04:46,409
want<font color="#E5E5E5"> to be adding a bunch of code bloat</font>

113
00:04:43,890 --> 00:04:47,550
so this<font color="#CCCCCC"> is a kind</font><font color="#E5E5E5"> of a bad approach when</font>

114
00:04:46,410 --> 00:04:49,410
you have like mission-critical code

115
00:04:47,550 --> 00:04:53,040
because you're<font color="#E5E5E5"> going to add cycles it's</font>

116
00:04:49,410 --> 00:04:55,440
going to slow things down now if<font color="#E5E5E5"> we talk</font>

117
00:04:53,040 --> 00:04:57,570
<font color="#CCCCCC">about code a few skaters that are only</font>

118
00:04:55,440 --> 00:04:59,760
dealing<font color="#E5E5E5"> with a compiled binary you</font>

119
00:04:57,570 --> 00:05:04,650
obviously<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> packing so obvious</font>

120
00:04:59,760 --> 00:05:07,230
<font color="#CCCCCC">skaters that are the delay their obvious</font>

121
00:05:04,650 --> 00:05:09,659
caters well essentially<font color="#CCCCCC"> Packers that are</font>

122
00:05:07,230 --> 00:05:11,700
just taking your code or your binary and

123
00:05:09,660 --> 00:05:13,770
they're encrypting or compressing the

124
00:05:11,700 --> 00:05:16,140
data inside of that binary and then at

125
00:05:13,770 --> 00:05:19,409
runtime they're pulling that data out I

126
00:05:16,140 --> 00:05:21,300
and executing it obviously there's some

127
00:05:19,410 --> 00:05:26,550
great pros of this makes<font color="#E5E5E5"> it really hard</font>

128
00:05:21,300 --> 00:05:28,260
to understand if you look at if you<font color="#CCCCCC"> look</font>

129
00:05:26,550 --> 00:05:29,580
at the binary statically you won't see

130
00:05:28,260 --> 00:05:31,020
very much you're<font color="#E5E5E5"> going to see a little</font>

131
00:05:29,580 --> 00:05:33,539
<font color="#E5E5E5">bit of code and probably a bunch of</font>

132
00:05:31,020 --> 00:05:37,289
encrypted data doesn't really do much in

133
00:05:33,540 --> 00:05:42,420
terms of reversing however oh and then

134
00:05:37,290 --> 00:05:44,640
on however in terms of cons um most of

135
00:05:42,420 --> 00:05:46,680
the time at some point this binary has

136
00:05:44,640 --> 00:05:48,900
to unpack its payload it has to unpack

137
00:05:46,680 --> 00:05:50,940
what it's going to do and run that so

138
00:05:48,900 --> 00:05:52,590
most reversers will just say<font color="#E5E5E5"> okay well</font>

139
00:05:50,940 --> 00:05:54,840
<font color="#CCCCCC">i'll wait for it son packet stuff and</font>

140
00:05:52,590 --> 00:05:56,489
then i'll go<font color="#CCCCCC"> to that point and</font><font color="#E5E5E5"> I'll just</font>

141
00:05:54,840 --> 00:05:58,229
dump out memory and I'll be able to get

142
00:05:56,490 --> 00:06:00,030
<font color="#CCCCCC">out what it's actually going to do so it</font>

143
00:05:58,230 --> 00:06:01,710
doesn't do much in terms of protecting

144
00:06:00,030 --> 00:06:04,080
<font color="#E5E5E5">long-term because there's usually</font>

145
00:06:01,710 --> 00:06:05,580
workarounds there's also caveats to that

146
00:06:04,080 --> 00:06:09,000
<font color="#E5E5E5">because there are some Packers that I'll</font>

147
00:06:05,580 --> 00:06:11,400
talk<font color="#CCCCCC"> about but usually that's the case</font>

148
00:06:09,000 --> 00:06:12,900
<font color="#CCCCCC">for the majority of Packers there's also</font>

149
00:06:11,400 --> 00:06:15,179
a couple of<font color="#CCCCCC"> things in terms of</font>

150
00:06:12,900 --> 00:06:18,539
obfuscation that just fall under like

151
00:06:15,180 --> 00:06:21,090
these unique territories for example

152
00:06:18,540 --> 00:06:25,140
like<font color="#CCCCCC"> movies skater andthe mighta and vm</font>

153
00:06:21,090 --> 00:06:28,049
protect vm protect and tomayto both both

154
00:06:25,140 --> 00:06:31,110
work on single process virtualization<font color="#E5E5E5"> so</font>

155
00:06:28,050 --> 00:06:33,120
they<font color="#CCCCCC"> actually take your binary or they</font>

156
00:06:31,110 --> 00:06:35,010
have options to do so essentially and

157
00:06:33,120 --> 00:06:37,470
they will take<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and convert it to a</font>

158
00:06:35,010 --> 00:06:39,300
different instruction architecture so it

159
00:06:37,470 --> 00:06:40,500
actually uses different instructions in

160
00:06:39,300 --> 00:06:43,620
the binary

161
00:06:40,500 --> 00:06:45,840
then translates them as the binaries

162
00:06:43,620 --> 00:06:47,700
executing really good because<font color="#E5E5E5"> it's</font>

163
00:06:45,840 --> 00:06:51,869
really<font color="#E5E5E5"> hard to understand makes it very</font>

164
00:06:47,700 --> 00:06:53,310
difficult um and is pretty painful we

165
00:06:51,870 --> 00:06:55,140
don't see a lot of<font color="#E5E5E5"> this in the wild</font>

166
00:06:53,310 --> 00:06:58,080
surprisingly because it's a huge pain in

167
00:06:55,140 --> 00:07:00,390
the ass for<font color="#CCCCCC"> reversers but we don't tend</font>

168
00:06:58,080 --> 00:07:02,700
<font color="#E5E5E5">to see it very much and then movie</font>

169
00:07:00,390 --> 00:07:04,500
skater has to get a shout out because

170
00:07:02,700 --> 00:07:07,349
it's<font color="#E5E5E5"> probably the coolest obfuscator</font>

171
00:07:04,500 --> 00:07:08,970
<font color="#CCCCCC">I've ever heard of this I forget</font><font color="#E5E5E5"> the</font>

172
00:07:07,350 --> 00:07:11,490
author's name but he essentially wrote

173
00:07:08,970 --> 00:07:13,440
an obfuscated<font color="#E5E5E5"> ER based on the move</font>

174
00:07:11,490 --> 00:07:15,480
instruction so the move instruction is

175
00:07:13,440 --> 00:07:17,730
technically touring complete so you can

176
00:07:15,480 --> 00:07:20,190
<font color="#E5E5E5">use it instead of all other instructions</font>

177
00:07:17,730 --> 00:07:22,380
so he made an obfuscated<font color="#E5E5E5"> ER that did</font>

178
00:07:20,190 --> 00:07:24,870
that<font color="#E5E5E5"> so that when you open it in ida and</font>

179
00:07:22,380 --> 00:07:27,180
try to reverse it you get this graph

180
00:07:24,870 --> 00:07:29,550
which is a hundred thousand move

181
00:07:27,180 --> 00:07:31,350
instructions it's really damn difficult

182
00:07:29,550 --> 00:07:34,620
to look at and we actually<font color="#CCCCCC"> have seen</font>

183
00:07:31,350 --> 00:07:36,630
this in the wild which is painful but

184
00:07:34,620 --> 00:07:38,700
very<font color="#CCCCCC"> very cool stuff those kind</font><font color="#E5E5E5"> of fall</font>

185
00:07:36,630 --> 00:07:39,990
into more of the uniqueness route so

186
00:07:38,700 --> 00:07:41,159
this<font color="#CCCCCC"> is just a little bit of a</font>

187
00:07:39,990 --> 00:07:43,950
background on all the<font color="#CCCCCC"> different ways</font>

188
00:07:41,160 --> 00:07:46,080
<font color="#E5E5E5">that you can go about obfuscating code</font><font color="#CCCCCC"> I</font>

189
00:07:43,950 --> 00:07:48,539
was<font color="#E5E5E5"> going about this as I wanted to</font>

190
00:07:46,080 --> 00:07:51,930
write a code obfuscator to make CTF

191
00:07:48,540 --> 00:07:54,240
challenges back<font color="#CCCCCC"> a while back</font><font color="#E5E5E5"> I started</font>

192
00:07:51,930 --> 00:07:56,640
writing a CTF and I<font color="#E5E5E5"> needed something to</font>

193
00:07:54,240 --> 00:07:58,620
make an ugly binary I wanted one of<font color="#E5E5E5"> my</font>

194
00:07:56,640 --> 00:08:02,820
later challenges with a lot<font color="#CCCCCC"> of crap in</font>

195
00:07:58,620 --> 00:08:05,790
<font color="#E5E5E5">there so this</font><font color="#CCCCCC"> is when i came up with red</font>

196
00:08:02,820 --> 00:08:08,130
fish realness if you haven't<font color="#E5E5E5"> seen seen</font>

197
00:08:05,790 --> 00:08:12,419
Nick Cage Pokemon before please go check

198
00:08:08,130 --> 00:08:14,580
it out<font color="#CCCCCC"> they're wonderful um so red the</font>

199
00:08:12,419 --> 00:08:16,169
idea behind this was I went through all

200
00:08:14,580 --> 00:08:18,090
of the you know<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the ways of</font>

201
00:08:16,169 --> 00:08:21,750
obfuscating code and I decided that red

202
00:08:18,090 --> 00:08:24,000
herring code and adding a lot of just

203
00:08:21,750 --> 00:08:26,190
crap code to my binder was not the

204
00:08:24,000 --> 00:08:29,430
approach that was<font color="#E5E5E5"> the best for me it</font>

205
00:08:26,190 --> 00:08:31,880
gives you benefits in static code or

206
00:08:29,430 --> 00:08:34,260
sorry in non compiled code so like in an

207
00:08:31,880 --> 00:08:36,750
interpreted language and it also can

208
00:08:34,260 --> 00:08:39,179
give you benefits in native code so was

209
00:08:36,750 --> 00:08:42,089
something that compiles so it was really

210
00:08:39,179 --> 00:08:45,810
what worked best for me so<font color="#E5E5E5"> I went about</font>

211
00:08:42,089 --> 00:08:47,490
<font color="#E5E5E5">this I made a dirty little thing where I</font>

212
00:08:45,810 --> 00:08:50,250
was<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like all right how can</font><font color="#CCCCCC"> I do</font>

213
00:08:47,490 --> 00:08:52,620
this as simply as possible so what I did

214
00:08:50,250 --> 00:08:54,329
was say that you have like<font color="#CCCCCC"> this really</font>

215
00:08:52,620 --> 00:08:56,489
stupid simple see

216
00:08:54,329 --> 00:09:00,209
program and what this is is it's just

217
00:08:56,489 --> 00:09:02,220
<font color="#E5E5E5">like a variable and like one actual code</font>

218
00:09:00,209 --> 00:09:04,410
instruction and an import like that's

219
00:09:02,220 --> 00:09:07,679
all that's inside<font color="#CCCCCC"> of here</font><font color="#E5E5E5"> and I even put</font>

220
00:09:04,410 --> 00:09:09,749
really handy little comments so that I

221
00:09:07,679 --> 00:09:11,879
knew I could make the dumbest parser

222
00:09:09,749 --> 00:09:14,279
ever in order<font color="#CCCCCC"> to read this in and then</font>

223
00:09:11,879 --> 00:09:17,249
obfuscate it for me so what I did is I

224
00:09:14,279 --> 00:09:19,619
take this and I convert it to this which

225
00:09:17,249 --> 00:09:22,079
is just the imports the global variables

226
00:09:19,619 --> 00:09:24,959
and the code statements this is<font color="#E5E5E5"> just me</font>

227
00:09:22,079 --> 00:09:27,839
generalizing what this looks like so

228
00:09:24,959 --> 00:09:30,540
then I take<font color="#CCCCCC"> the imports and I just kind</font>

229
00:09:27,839 --> 00:09:32,819
of crap fake imports all around it so

230
00:09:30,540 --> 00:09:35,488
that it's hard to look<font color="#E5E5E5"> at and then I</font>

231
00:09:32,819 --> 00:09:38,309
take all<font color="#CCCCCC"> the global variables and just</font>

232
00:09:35,489 --> 00:09:39,959
go and vomit horrible global variables

233
00:09:38,309 --> 00:09:42,179
so you can't tell where anything is in

234
00:09:39,959 --> 00:09:44,160
this thing and then with the code

235
00:09:42,179 --> 00:09:45,720
statements I do the exact same thing but

236
00:09:44,160 --> 00:09:47,189
it gets more interesting because with

237
00:09:45,720 --> 00:09:49,019
code statements there's all kinds of

238
00:09:47,189 --> 00:09:51,299
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that you can act you can add math</font>

239
00:09:49,019 --> 00:09:53,129
you can add functions that get called

240
00:09:51,299 --> 00:09:56,730
you can<font color="#E5E5E5"> add conditionals that actually</font>

241
00:09:53,129 --> 00:09:58,470
are that go a single way every time or

242
00:09:56,730 --> 00:10:00,360
determined by some other variable that

243
00:09:58,470 --> 00:10:03,389
you control so that you know which way

244
00:10:00,360 --> 00:10:06,269
they're going to go so I just spit a ton

245
00:10:03,389 --> 00:10:10,199
of code out into this thing and it

246
00:10:06,269 --> 00:10:11,970
worked the general response to the sixth

247
00:10:10,199 --> 00:10:15,389
this was what I use for the<font color="#E5E5E5"> sixth</font>

248
00:10:11,970 --> 00:10:18,540
flareon challenge in 2014 and the

249
00:10:15,389 --> 00:10:21,959
internet basically said this that they

250
00:10:18,540 --> 00:10:24,959
did<font color="#CCCCCC"> not appreciate I saw a lot of gifts</font>

251
00:10:21,959 --> 00:10:27,388
of people that said this was my day and

252
00:10:24,959 --> 00:10:29,189
it was<font color="#E5E5E5"> just a guy hitting the f8 button</font>

253
00:10:27,389 --> 00:10:33,119
on a debugger over and over and over

254
00:10:29,189 --> 00:10:35,040
<font color="#E5E5E5">again so it worked out pretty well for</font>

255
00:10:33,119 --> 00:10:38,220
something that wasn't all that much

256
00:10:35,040 --> 00:10:39,748
effort but i knew i could go deeper<font color="#E5E5E5"> i</font>

257
00:10:38,220 --> 00:10:42,059
knew<font color="#E5E5E5"> i could come up with something and</font>

258
00:10:39,749 --> 00:10:44,929
<font color="#E5E5E5">actually make this viable and useful to</font>

259
00:10:42,059 --> 00:10:48,238
somebody be on my own<font color="#E5E5E5"> horrible in this</font>

260
00:10:44,929 --> 00:10:49,199
so what<font color="#CCCCCC"> I did was I decided I need to</font>

261
00:10:48,239 --> 00:10:50,730
figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> how to make this</font>

262
00:10:49,199 --> 00:10:53,459
<font color="#E5E5E5">multi-language I want to make something</font>

263
00:10:50,730 --> 00:10:55,919
where I can actually parse a piece of

264
00:10:53,459 --> 00:10:58,290
code and it doesn't matter<font color="#CCCCCC"> what language</font>

265
00:10:55,919 --> 00:11:00,809
it is i can define<font color="#CCCCCC"> i want to make an</font>

266
00:10:58,290 --> 00:11:03,569
engine<font color="#E5E5E5"> that i can then add more</font>

267
00:11:00,809 --> 00:11:07,589
languages to on the fly without actually

268
00:11:03,569 --> 00:11:08,370
having to spend a lot<font color="#CCCCCC"> of time on so that</font>

269
00:11:07,589 --> 00:11:10,560
<font color="#E5E5E5">gets us into</font>

270
00:11:08,370 --> 00:11:12,510
you syntax we have to<font color="#E5E5E5"> talk about code</font>

271
00:11:10,560 --> 00:11:13,920
syntax and how you can actually<font color="#CCCCCC"> do</font>

272
00:11:12,510 --> 00:11:17,670
<font color="#E5E5E5">something where you're abstracting away</font>

273
00:11:13,920 --> 00:11:19,860
what it is to be the code so let's<font color="#E5E5E5"> look</font>

274
00:11:17,670 --> 00:11:21,540
at urban dictionary which is my favorite

275
00:11:19,860 --> 00:11:24,240
way to get information<font color="#E5E5E5"> about the world</font>

276
00:11:21,540 --> 00:11:26,730
this<font color="#E5E5E5"> is what urban dictionary said that</font>

277
00:11:24,240 --> 00:11:28,500
the definition<font color="#CCCCCC"> of syntax is so it says</font>

278
00:11:26,730 --> 00:11:30,210
the order in which words or phrases are

279
00:11:28,500 --> 00:11:33,270
placed<font color="#E5E5E5"> on the computer it's not exactly</font>

280
00:11:30,210 --> 00:11:35,370
<font color="#CCCCCC">right I like when they use it in</font><font color="#E5E5E5"> a</font>

281
00:11:33,270 --> 00:11:41,000
sentence better because that one applies

282
00:11:35,370 --> 00:11:44,190
more but essentially syntax is a

283
00:11:41,000 --> 00:11:46,500
definition<font color="#E5E5E5"> of the rules that control</font>

284
00:11:44,190 --> 00:11:48,839
symbols in a language so things like if

285
00:11:46,500 --> 00:11:50,880
and all of these keywords and these

286
00:11:48,839 --> 00:11:52,740
literals and stuff like that<font color="#E5E5E5"> so it</font>

287
00:11:50,880 --> 00:11:56,339
defines how the how the compiler is

288
00:11:52,740 --> 00:11:58,290
going to understand that the nice thing

289
00:11:56,339 --> 00:12:01,230
<font color="#CCCCCC">about syntax is it's very vague there's</font>

290
00:11:58,290 --> 00:12:03,900
a lot of ways to<font color="#E5E5E5"> do this this is one</font>

291
00:12:01,230 --> 00:12:05,310
absolutely legitimate syntax this is

292
00:12:03,900 --> 00:12:08,160
<font color="#E5E5E5">called brainfuck if you've never seen it</font>

293
00:12:05,310 --> 00:12:11,069
it's made of like eight I think six or

294
00:12:08,160 --> 00:12:14,310
eight I<font color="#E5E5E5"> forget different symbols and</font>

295
00:12:11,070 --> 00:12:16,529
that's it very very simple language if

296
00:12:14,310 --> 00:12:17,910
anybody's play<font color="#CCCCCC"> gorillas on qbasic</font>

297
00:12:16,529 --> 00:12:19,500
they've<font color="#CCCCCC"> probably seen something like</font>

298
00:12:17,910 --> 00:12:22,980
this before<font color="#E5E5E5"> just totally illegitimate</font>

299
00:12:19,500 --> 00:12:24,870
syntax this is one of<font color="#E5E5E5"> my favorites this</font>

300
00:12:22,980 --> 00:12:26,430
is another legitimate syntax for a

301
00:12:24,870 --> 00:12:29,040
programming language called white space

302
00:12:26,430 --> 00:12:31,140
and this is a<font color="#E5E5E5"> demonstration of where the</font>

303
00:12:29,040 --> 00:12:34,199
code actually is but if you look<font color="#E5E5E5"> at this</font>

304
00:12:31,140 --> 00:12:36,120
in a text editor it's just spaces and

305
00:12:34,200 --> 00:12:37,890
tabs because it's all whitespace

306
00:12:36,120 --> 00:12:43,080
characters and they defined a language

307
00:12:37,890 --> 00:12:47,459
based on that so sorry and and probably

308
00:12:43,080 --> 00:12:48,870
both kinds<font color="#E5E5E5"> of new lines um so the</font><font color="#CCCCCC"> point</font>

309
00:12:47,459 --> 00:12:50,790
is there's<font color="#E5E5E5"> a lot of different</font><font color="#CCCCCC"> ways to</font>

310
00:12:48,870 --> 00:12:53,370
<font color="#E5E5E5">define syntax however those are</font>

311
00:12:50,790 --> 00:12:56,370
explanations of ones that<font color="#E5E5E5"> you don't see</font>

312
00:12:53,370 --> 00:13:00,270
very<font color="#E5E5E5"> often I don't know many white space</font>

313
00:12:56,370 --> 00:13:01,740
or brainfuck authors like they don't

314
00:13:00,270 --> 00:13:03,870
write it<font color="#E5E5E5"> in that because that's not how</font>

315
00:13:01,740 --> 00:13:06,450
people<font color="#E5E5E5"> think most languages are made to</font>

316
00:13:03,870 --> 00:13:08,760
be simple and understandable and easy to

317
00:13:06,450 --> 00:13:10,890
work with so they all will have things

318
00:13:08,760 --> 00:13:12,810
like assignment you<font color="#E5E5E5"> have to be able to</font>

319
00:13:10,890 --> 00:13:14,939
define variables and you have to be<font color="#CCCCCC"> able</font>

320
00:13:12,810 --> 00:13:16,680
<font color="#E5E5E5">to assign things to them they'll have</font>

321
00:13:14,940 --> 00:13:18,680
math you have to be able<font color="#E5E5E5"> to do math</font>

322
00:13:16,680 --> 00:13:21,209
everything tends to be based on math

323
00:13:18,680 --> 00:13:22,170
they'll have conditionals you have to

324
00:13:21,209 --> 00:13:24,599
have some way to

325
00:13:22,170 --> 00:13:27,089
fine you know<font color="#E5E5E5"> if something happens do X</font>

326
00:13:24,600 --> 00:13:29,700
otherwise do<font color="#E5E5E5"> I you have to always have</font>

327
00:13:27,089 --> 00:13:31,500
that kind of a functionality and then

328
00:13:29,700 --> 00:13:32,639
finally they have to<font color="#E5E5E5"> have loops because</font>

329
00:13:31,500 --> 00:13:34,350
at some point you're going<font color="#E5E5E5"> to need</font><font color="#CCCCCC"> to</font>

330
00:13:32,639 --> 00:13:35,730
loop or repeat something and you don't

331
00:13:34,350 --> 00:13:40,410
<font color="#E5E5E5">want to write the same code over and</font>

332
00:13:35,730 --> 00:13:42,600
over again so this is vague vague ideas

333
00:13:40,410 --> 00:13:44,610
of what it is to define in the<font color="#E5E5E5"> majority</font>

334
00:13:42,600 --> 00:13:46,709
of languages out there like C and Java

335
00:13:44,610 --> 00:13:48,269
and so I was looking<font color="#CCCCCC"> at all of this and</font>

336
00:13:46,709 --> 00:13:51,209
trying to<font color="#E5E5E5"> figure out okay how can I dumb</font>

337
00:13:48,269 --> 00:13:55,560
all of this down such that I I can have

338
00:13:51,209 --> 00:13:58,920
<font color="#CCCCCC">one single engine and so what I did is I</font>

339
00:13:55,560 --> 00:14:02,010
looked at this will be python vs see

340
00:13:58,920 --> 00:14:03,779
this is how Python does assignment you

341
00:14:02,010 --> 00:14:05,399
just have variables and then you have

342
00:14:03,779 --> 00:14:08,850
the assign the value that you're

343
00:14:05,399 --> 00:14:10,860
assigning to them in<font color="#E5E5E5"> C very similar but</font>

344
00:14:08,850 --> 00:14:12,630
you have to say<font color="#E5E5E5"> what kind of variable it</font>

345
00:14:10,860 --> 00:14:14,760
is you have<font color="#E5E5E5"> to type define</font><font color="#CCCCCC"> the type of</font>

346
00:14:12,630 --> 00:14:16,889
the variable and then then they use

347
00:14:14,760 --> 00:14:19,800
semicolons a little bit different but

348
00:14:16,889 --> 00:14:21,690
pretty much<font color="#E5E5E5"> similar however you can dumb</font>

349
00:14:19,800 --> 00:14:23,819
it down to just this so if<font color="#E5E5E5"> I'm</font>

350
00:14:21,690 --> 00:14:26,310
generating a bunch of<font color="#E5E5E5"> random code I can</font>

351
00:14:23,820 --> 00:14:28,860
say all right well I need a name and a

352
00:14:26,310 --> 00:14:33,149
value for Python I need a type in a name

353
00:14:28,860 --> 00:14:35,760
and a value for C really easy to do same

354
00:14:33,149 --> 00:14:39,990
thing<font color="#CCCCCC"> applies for conditionals this is a</font>

355
00:14:35,760 --> 00:14:43,050
conditional in Python just if X do this

356
00:14:39,990 --> 00:14:45,120
code block else do the other this is

357
00:14:43,050 --> 00:14:46,890
what it looks like and see very simple

358
00:14:45,120 --> 00:14:49,680
but we can dumb it down and say all

359
00:14:46,890 --> 00:14:53,130
<font color="#CCCCCC">right maybe I want one</font><font color="#E5E5E5"> that always does</font>

360
00:14:49,680 --> 00:14:56,459
the else statement I will say if a

361
00:14:53,130 --> 00:14:58,709
conditional that's always false do a

362
00:14:56,459 --> 00:15:01,500
<font color="#CCCCCC">fake code block where i define bunch</font>

363
00:14:58,709 --> 00:15:03,359
more code inside of there<font color="#E5E5E5"> otherwise do a</font>

364
00:15:01,500 --> 00:15:05,220
real code block and we can dumb it down

365
00:15:03,360 --> 00:15:06,810
such that i just<font color="#E5E5E5"> have strings that</font>

366
00:15:05,220 --> 00:15:08,550
define all right well this is what an if

367
00:15:06,810 --> 00:15:10,380
and else looks like and now<font color="#E5E5E5"> i just need</font>

368
00:15:08,550 --> 00:15:14,250
to shove in<font color="#CCCCCC"> the actual logic inside of</font>

369
00:15:10,380 --> 00:15:16,319
there so let's<font color="#E5E5E5"> take a look at what</font><font color="#CCCCCC"> you</font>

370
00:15:14,250 --> 00:15:18,389
get from this it looks really pretty

371
00:15:16,319 --> 00:15:21,719
when you disassemble it so this<font color="#CCCCCC"> is a</font>

372
00:15:18,389 --> 00:15:24,389
binary in c i'm pretty<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> this is me</font>

373
00:15:21,720 --> 00:15:28,010
summing two numbers that's<font color="#E5E5E5"> what the</font>

374
00:15:24,389 --> 00:15:32,069
graph looks like it's it's pretty ugly

375
00:15:28,010 --> 00:15:33,240
so after putting all of these text links

376
00:15:32,069 --> 00:15:36,030
together you end up<font color="#E5E5E5"> with something like</font>

377
00:15:33,240 --> 00:15:38,100
<font color="#CCCCCC">this it's pretty damn painful to look at</font>

378
00:15:36,030 --> 00:15:40,050
and works out pretty well if you want to

379
00:15:38,100 --> 00:15:42,570
obfuscate what you're doing at some

380
00:15:40,050 --> 00:15:44,459
point in here there's two variables

381
00:15:42,570 --> 00:15:47,010
getting added and that's it like<font color="#E5E5E5"> this</font>

382
00:15:44,460 --> 00:15:48,660
all of this is just avoiding that I also

383
00:15:47,010 --> 00:15:50,700
wanted to make this very customizable

384
00:15:48,660 --> 00:15:53,579
obviously sometimes I<font color="#E5E5E5"> might not want to</font>

385
00:15:50,700 --> 00:15:55,320
add 10,000 instructions to for every

386
00:15:53,580 --> 00:15:57,180
added destruction that probably isn't

387
00:15:55,320 --> 00:15:59,970
the best of ideas but sometimes they do

388
00:15:57,180 --> 00:16:01,439
so<font color="#E5E5E5"> I have this all scalable so the</font>

389
00:15:59,970 --> 00:16:04,260
<font color="#E5E5E5">amount of recursion that I use will</font>

390
00:16:01,440 --> 00:16:06,540
define exactly how much stupid amounts

391
00:16:04,260 --> 00:16:11,370
of code that I'm generating so it works

392
00:16:06,540 --> 00:16:13,829
pretty well so I did this and I<font color="#E5E5E5"> started</font>

393
00:16:11,370 --> 00:16:16,290
writing it and I'll demo exactly kind of

394
00:16:13,830 --> 00:16:20,220
how the engine works and and what it

395
00:16:16,290 --> 00:16:22,439
looks like a<font color="#E5E5E5"> little bit I wrote the</font>

396
00:16:20,220 --> 00:16:24,420
first one as kind of I<font color="#E5E5E5"> just abstracted</font>

397
00:16:22,440 --> 00:16:28,680
everything away from my original see one

398
00:16:24,420 --> 00:16:31,110
and got that working<font color="#E5E5E5"> I sorry I I have</font>

399
00:16:28,680 --> 00:16:32,280
Python working that was one of<font color="#CCCCCC"> the first</font>

400
00:16:31,110 --> 00:16:34,800
languages that I wanted to<font color="#E5E5E5"> support</font>

401
00:16:32,280 --> 00:16:36,930
mainly<font color="#E5E5E5"> because I'm i find it funny that</font>

402
00:16:34,800 --> 00:16:40,589
<font color="#CCCCCC">I'm writing Python to write Python for</font>

403
00:16:36,930 --> 00:16:44,719
me I also support pearl if you don't

404
00:16:40,590 --> 00:16:46,830
know<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a drag queen named pearl I</font>

405
00:16:44,720 --> 00:16:48,240
support see because I was a first

406
00:16:46,830 --> 00:16:50,580
language and obviously what I use for

407
00:16:48,240 --> 00:16:52,260
<font color="#E5E5E5">that original challenge and I support</font>

408
00:16:50,580 --> 00:16:54,870
golang now because I thought it'd be

409
00:16:52,260 --> 00:16:56,610
funny to support go and actually the

410
00:16:54,870 --> 00:16:58,920
main reason I chose to go after go was

411
00:16:56,610 --> 00:17:02,220
because they have just the dirtiest

412
00:16:58,920 --> 00:17:04,409
mascot ever as<font color="#CCCCCC"> the go logo which I just</font>

413
00:17:02,220 --> 00:17:06,750
love<font color="#E5E5E5"> also go is already painful to</font>

414
00:17:04,410 --> 00:17:08,760
reverse just like looking<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Pearl makes</font>

415
00:17:06,750 --> 00:17:14,099
me want<font color="#E5E5E5"> to throw up so I thought let's</font>

416
00:17:08,760 --> 00:17:16,589
make both of those worse<font color="#CCCCCC"> um so let's do</font>

417
00:17:14,099 --> 00:17:18,480
a<font color="#E5E5E5"> little bit of a demo time also</font><font color="#CCCCCC"> i love</font>

418
00:17:16,589 --> 00:17:21,149
that a few<font color="#CCCCCC"> google</font><font color="#E5E5E5"> shrek images you get</font>

419
00:17:18,480 --> 00:17:27,180
random<font color="#E5E5E5"> little kit drawings of e equals</font>

420
00:17:21,150 --> 00:17:31,560
MC squared so oh that's great it's there

421
00:17:27,180 --> 00:17:39,800
it's there it's not there<font color="#E5E5E5"> all right</font>

422
00:17:31,560 --> 00:17:42,960
let's see can I do this so this is<font color="#CCCCCC"> a</font>

423
00:17:39,800 --> 00:17:45,090
giant JSON object that defines what it

424
00:17:42,960 --> 00:17:47,190
is to have what it is to have a<font color="#CCCCCC"> language</font>

425
00:17:45,090 --> 00:17:49,539
for one of these obvious<font color="#CCCCCC"> caters this is</font>

426
00:17:47,190 --> 00:17:51,970
my Python one and

427
00:17:49,539 --> 00:17:54,039
all it is all its defining is different

428
00:17:51,970 --> 00:17:55,840
variables that<font color="#E5E5E5"> I can have so in Python</font>

429
00:17:54,039 --> 00:17:57,759
I've done a little bit more work<font color="#CCCCCC"> and</font>

430
00:17:55,840 --> 00:17:59,859
<font color="#E5E5E5">added more variable types i support</font>

431
00:17:57,759 --> 00:18:02,590
bullion's and integers and characters

432
00:17:59,859 --> 00:18:06,340
and strings I support lists of integers

433
00:18:02,590 --> 00:18:07,809
list of strings dictionaries of strings

434
00:18:06,340 --> 00:18:10,090
to in section areas of strings of

435
00:18:07,809 --> 00:18:11,619
strings I<font color="#E5E5E5"> can support all of those in</font>

436
00:18:10,090 --> 00:18:12,999
terms of the code that<font color="#CCCCCC"> i generate that</font>

437
00:18:11,619 --> 00:18:14,918
doesn't mean<font color="#CCCCCC"> that I can't support</font><font color="#E5E5E5"> those</font>

438
00:18:12,999 --> 00:18:17,080
types in the code that<font color="#E5E5E5"> I mop you skating</font>

439
00:18:14,919 --> 00:18:19,119
this<font color="#E5E5E5"> just means like I can use those</font>

440
00:18:17,080 --> 00:18:22,960
types in the random crap that I'm

441
00:18:19,119 --> 00:18:24,668
generating so I then have to define what

442
00:18:22,960 --> 00:18:25,720
<font color="#CCCCCC">it is to have a function at some point</font>

443
00:18:24,669 --> 00:18:27,609
you're going<font color="#E5E5E5"> to need to need to create a</font>

444
00:18:25,720 --> 00:18:30,399
function and call it<font color="#E5E5E5"> I have to define</font>

445
00:18:27,609 --> 00:18:32,228
<font color="#CCCCCC">that this is conditionals like I'm</font><font color="#E5E5E5"> only</font>

446
00:18:30,399 --> 00:18:34,469
defining one type of conditional right

447
00:18:32,229 --> 00:18:37,330
now but you can<font color="#E5E5E5"> define more conditionals</font>

448
00:18:34,470 --> 00:18:38,999
this is different math operations I have

449
00:18:37,330 --> 00:18:41,590
ways of handling addition subtraction

450
00:18:38,999 --> 00:18:45,309
adding boolean stuff adding bitwise

451
00:18:41,590 --> 00:18:47,529
stuff these are memory operations so

452
00:18:45,309 --> 00:18:50,229
just moving variables around throwing

453
00:18:47,529 --> 00:18:51,639
things into lists this is all of the

454
00:18:50,229 --> 00:18:53,950
code that<font color="#E5E5E5"> it's just going to shove in</font>

455
00:18:51,639 --> 00:18:57,609
there is code bloat when it generates

456
00:18:53,950 --> 00:18:58,690
this this is string operations and then

457
00:18:57,609 --> 00:19:01,449
finally there's just some random

458
00:18:58,690 --> 00:19:04,869
features that<font color="#E5E5E5"> I decide</font><font color="#CCCCCC"> that I've defined</font>

459
00:19:01,450 --> 00:19:06,609
like can this language support creating

460
00:19:04,869 --> 00:19:08,109
variables outside of functions like

461
00:19:06,609 --> 00:19:11,199
global variables there are languages

462
00:19:08,109 --> 00:19:13,178
that don't support that they I have a

463
00:19:11,200 --> 00:19:15,009
variable<font color="#E5E5E5"> called must use variables</font>

464
00:19:13,179 --> 00:19:16,840
because when I came<font color="#CCCCCC"> when I started</font>

465
00:19:15,009 --> 00:19:19,299
supporting golang it's actually<font color="#CCCCCC"> a</font>

466
00:19:16,840 --> 00:19:21,220
semi-intelligent compiler and it'll be

467
00:19:19,299 --> 00:19:24,099
like<font color="#CCCCCC"> you're not using this variable I</font>

468
00:19:21,220 --> 00:19:26,080
won't compile so I had to go and change

469
00:19:24,099 --> 00:19:27,820
everything<font color="#E5E5E5"> I was doing and make</font><font color="#CCCCCC"> sure</font>

470
00:19:26,080 --> 00:19:30,070
<font color="#CCCCCC">that every time</font><font color="#E5E5E5"> I make a variable I</font>

471
00:19:27,820 --> 00:19:32,559
actually use<font color="#CCCCCC"> that variable in an</font>

472
00:19:30,070 --> 00:19:34,539
assignment<font color="#CCCCCC"> or in a math operation or</font>

473
00:19:32,559 --> 00:19:39,099
something so that you can't have unused

474
00:19:34,539 --> 00:19:42,269
variables so this<font color="#CCCCCC"> is what it kind of</font>

475
00:19:39,099 --> 00:19:46,359
looks like in terms of making a language

476
00:19:42,269 --> 00:19:48,940
adding a language to the obfuscator this

477
00:19:46,359 --> 00:19:51,939
is just<font color="#E5E5E5"> a simple</font><font color="#CCCCCC"> little python script</font>

478
00:19:48,940 --> 00:19:55,059
that I wrote this is for getting if you

479
00:19:51,940 --> 00:19:56,950
have a binary getting the hash of it on

480
00:19:55,059 --> 00:19:58,989
on disk and then also getting the hash

481
00:19:56,950 --> 00:20:00,759
of it based on what the file says<font color="#CCCCCC"> that</font>

482
00:19:58,989 --> 00:20:03,170
it should be so stupid little thing that

483
00:20:00,759 --> 00:20:05,330
<font color="#CCCCCC">I use in some of our erasing stuff</font>

484
00:20:03,170 --> 00:20:10,450
but it you know it's got some lines of

485
00:20:05,330 --> 00:20:14,120
code this is what the script generates I

486
00:20:10,450 --> 00:20:17,210
can scroll for a while it's it's pretty

487
00:20:14,120 --> 00:20:19,370
damn ugly it Jen it spits out all of

488
00:20:17,210 --> 00:20:21,620
this stuff if you wanted<font color="#E5E5E5"> to be really</font>

489
00:20:19,370 --> 00:20:24,139
ugly since pythons interpreted on top of

490
00:20:21,620 --> 00:20:25,879
this you could then use you know<font color="#E5E5E5"> a</font>

491
00:20:24,140 --> 00:20:28,310
Python obfuscator that makes all the

492
00:20:25,880 --> 00:20:29,930
variables really stupidly named<font color="#CCCCCC"> you even</font>

493
00:20:28,310 --> 00:20:31,429
though they're already kind of ugly so

494
00:20:29,930 --> 00:20:32,950
you could do all kinds of things with

495
00:20:31,430 --> 00:20:35,990
this if you want to make it<font color="#E5E5E5"> even worse</font>

496
00:20:32,950 --> 00:20:37,970
um so that gives you an idea of a little

497
00:20:35,990 --> 00:20:40,970
bit<font color="#E5E5E5"> of what it does if you do this for</font>

498
00:20:37,970 --> 00:20:43,730
other language for native languages I

499
00:20:40,970 --> 00:20:46,400
don't I don't bring<font color="#E5E5E5"> up Ida when I have</font>

500
00:20:43,730 --> 00:20:48,860
an 800 x 600 resolution because your

501
00:20:46,400 --> 00:20:51,710
eyes will bleed but<font color="#E5E5E5"> essentially</font>

502
00:20:48,860 --> 00:20:55,280
sometimes you'll bring up Ida and it

503
00:20:51,710 --> 00:20:57,200
will say<font color="#E5E5E5"> ah I can't even open this in</font>

504
00:20:55,280 --> 00:21:00,020
graph mode because you have like thirty

505
00:20:57,200 --> 00:21:01,520
thousand nodes inside of this graph and

506
00:21:00,020 --> 00:21:04,220
I can't even display it cuz there's just

507
00:21:01,520 --> 00:21:06,050
too much crap inside of it um so fun

508
00:21:04,220 --> 00:21:10,940
stuff for making a<font color="#CCCCCC"> reverser have a bad</font>

509
00:21:06,050 --> 00:21:13,040
day cool<font color="#E5E5E5"> I'm back so that's where I'm at</font>

510
00:21:10,940 --> 00:21:14,810
with this I've been I've worked on<font color="#E5E5E5"> it</font>

511
00:21:13,040 --> 00:21:16,879
for<font color="#E5E5E5"> a while mainly for the CTF stuff</font>

512
00:21:14,810 --> 00:21:19,750
that we've been doing<font color="#E5E5E5"> the next step so</font>

513
00:21:16,880 --> 00:21:21,860
this that I'd like<font color="#CCCCCC"> to add languages</font>

514
00:21:19,750 --> 00:21:23,930
obviously other languages and adding

515
00:21:21,860 --> 00:21:25,610
them to this but thankfully that's not

516
00:21:23,930 --> 00:21:27,950
the most difficult of things like I'd

517
00:21:25,610 --> 00:21:29,120
like to add Java and C sharp mainly

518
00:21:27,950 --> 00:21:31,880
because<font color="#E5E5E5"> i want to write some CTF</font>

519
00:21:29,120 --> 00:21:34,100
challenges in them I'd like<font color="#E5E5E5"> to add a</font>

520
00:21:31,880 --> 00:21:36,050
couple other different languages right

521
00:21:34,100 --> 00:21:37,879
now based<font color="#E5E5E5"> on the way that this works</font>

522
00:21:36,050 --> 00:21:39,409
imperative programming languages are

523
00:21:37,880 --> 00:21:41,600
going to be the<font color="#E5E5E5"> only ones that are</font>

524
00:21:39,410 --> 00:21:43,520
really<font color="#E5E5E5"> supportable I don't think</font><font color="#CCCCCC"> I could</font>

525
00:21:41,600 --> 00:21:45,679
use my engine to do this with like a

526
00:21:43,520 --> 00:21:49,550
functional programming language but<font color="#E5E5E5"> I'm</font>

527
00:21:45,680 --> 00:21:54,650
not 100% sure that so yeah it works

528
00:21:49,550 --> 00:21:59,990
pretty dang well and then in terms of

529
00:21:54,650 --> 00:22:02,660
other things i'd like i'd<font color="#CCCCCC"> like to do</font>

530
00:21:59,990 --> 00:22:06,080
something<font color="#CCCCCC"> with math essentially one of</font>

531
00:22:02,660 --> 00:22:07,340
the easiest ways to find leads it when

532
00:22:06,080 --> 00:22:10,689
you're reversing something is to look

533
00:22:07,340 --> 00:22:12,770
for<font color="#CCCCCC"> Strings it's just the</font><font color="#E5E5E5"> the truth that</font>

534
00:22:10,690 --> 00:22:14,540
usually there will be string somewhere

535
00:22:12,770 --> 00:22:16,730
that will give you some idea of what a

536
00:22:14,540 --> 00:22:17,059
binary is doing so what I'd like to do

537
00:22:16,730 --> 00:22:20,059
is

538
00:22:17,059 --> 00:22:21,590
is used for every string that<font color="#E5E5E5"> I find</font>

539
00:22:20,059 --> 00:22:24,649
inside<font color="#CCCCCC"> of a binary that I'm</font><font color="#E5E5E5"> trying to</font>

540
00:22:21,590 --> 00:22:27,559
obfuscate actually creating a decoding

541
00:22:24,649 --> 00:22:29,299
function and then creating an encoded

542
00:22:27,559 --> 00:22:30,769
version of the string that at runtime it

543
00:22:29,299 --> 00:22:32,059
just calls the decode function so

544
00:22:30,769 --> 00:22:35,629
looking at it<font color="#E5E5E5"> won't tell you anything</font>

545
00:22:32,059 --> 00:22:37,789
about it<font color="#E5E5E5"> it's kind of hard I started</font>

546
00:22:35,629 --> 00:22:39,740
already working on this but it's a

547
00:22:37,789 --> 00:22:42,559
<font color="#E5E5E5">little bit difficult to do on the fly</font>

548
00:22:39,740 --> 00:22:45,980
four different languages but something

549
00:22:42,559 --> 00:22:49,249
<font color="#CCCCCC">that I'm working on the other thing I'd</font>

550
00:22:45,980 --> 00:22:51,230
like to do<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> in time loading of</font>

551
00:22:49,249 --> 00:22:54,139
libraries so you know one of the other

552
00:22:51,230 --> 00:22:56,360
ways that<font color="#CCCCCC"> you infer some data about a</font>

553
00:22:54,139 --> 00:22:58,340
binary or a script really early is

554
00:22:56,360 --> 00:23:00,019
looking at its imports looking at what

555
00:22:58,340 --> 00:23:01,939
it's going to what libraries it's going

556
00:23:00,019 --> 00:23:04,220
to use so rather<font color="#E5E5E5"> than doing that I'd</font>

557
00:23:01,940 --> 00:23:05,929
<font color="#CCCCCC">like to pull these it pull those</font>

558
00:23:04,220 --> 00:23:08,419
libraries in at<font color="#E5E5E5"> runtime because it'll</font><font color="#CCCCCC"> be</font>

559
00:23:05,929 --> 00:23:10,909
it'll give me<font color="#E5E5E5"> the ability to hide that I</font>

560
00:23:08,419 --> 00:23:12,830
hide that logic and you can do<font color="#E5E5E5"> that for</font>

561
00:23:10,909 --> 00:23:15,529
compiled binaries and also for

562
00:23:12,830 --> 00:23:19,399
imperative bynars you're sorry script

563
00:23:15,529 --> 00:23:22,220
languages I love using this image

564
00:23:19,399 --> 00:23:24,350
because<font color="#E5E5E5"> it's a the best branding</font>

565
00:23:22,220 --> 00:23:27,320
campaign I've ever seen and that's a lot

566
00:23:24,350 --> 00:23:28,908
of sarcasm I'd like<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> doing</font>

567
00:23:27,320 --> 00:23:32,769
something a<font color="#E5E5E5"> little bit different with</font>

568
00:23:28,909 --> 00:23:35,749
this<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> in trying to model the</font>

569
00:23:32,769 --> 00:23:37,850
activities of benign code as as like a

570
00:23:35,749 --> 00:23:39,679
mathematical model rather than what i'm

571
00:23:37,850 --> 00:23:43,009
<font color="#CCCCCC">doing right now</font><font color="#E5E5E5"> i'm defining what I</font>

572
00:23:39,679 --> 00:23:45,080
think looks benign and would give a

573
00:23:43,009 --> 00:23:47,149
reverse or a bad<font color="#E5E5E5"> day but if I could</font><font color="#CCCCCC"> take</font>

574
00:23:45,080 --> 00:23:49,610
a corpus of binaries that have benign

575
00:23:47,149 --> 00:23:51,619
activity in them and use those instead I

576
00:23:49,610 --> 00:23:53,840
could then create a model and kind of

577
00:23:51,619 --> 00:23:55,309
try<font color="#E5E5E5"> to shove that in and said so I'd</font>

578
00:23:53,840 --> 00:23:56,629
like like to go<font color="#E5E5E5"> down that road but</font>

579
00:23:55,309 --> 00:24:00,139
that's a little<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

580
00:23:56,629 --> 00:24:01,879
research so that's all<font color="#CCCCCC"> I have the like I</font>

581
00:24:00,139 --> 00:24:06,860
said<font color="#CCCCCC"> the repo is up it's called red</font>

582
00:24:01,879 --> 00:24:12,850
fishy realness and<font color="#E5E5E5"> yeah I will take any</font>

583
00:24:06,860 --> 00:24:12,850
questions yes

584
00:24:14,530 --> 00:24:21,370
so the<font color="#CCCCCC"> question is can can I actually</font>

585
00:24:17,630 --> 00:24:25,280
make pearl worse and the answer is yes

586
00:24:21,370 --> 00:24:28,250
you can make pearl much worse I actually

587
00:24:25,280 --> 00:24:32,330
had to I made a pearl challenge for<font color="#E5E5E5"> this</font>

588
00:24:28,250 --> 00:24:35,270
upcoming CTF and then I had to I<font color="#E5E5E5"> I used</font>

589
00:24:32,330 --> 00:24:36,889
this to obfuscate it and then I was told

590
00:24:35,270 --> 00:24:38,870
that I wasn't<font color="#E5E5E5"> allowed to do that because</font>

591
00:24:36,890 --> 00:24:41,720
the couple of people that tried to solve

592
00:24:38,870 --> 00:24:52,820
it it hurt their brain too much and they

593
00:24:41,720 --> 00:24:54,920
did not enjoy it yeah um currently no

594
00:24:52,820 --> 00:24:57,200
<font color="#E5E5E5">I'm not really doing anything with any</font>

595
00:24:54,920 --> 00:24:59,480
compiler optimizations you could totally

596
00:24:57,200 --> 00:25:01,310
<font color="#CCCCCC">throw that in as like your definition of</font>

597
00:24:59,480 --> 00:25:08,660
the language you could say these are the

598
00:25:01,310 --> 00:25:11,929
compiler optimizations but I<font color="#E5E5E5"> don't um</font>

599
00:25:08,660 --> 00:25:14,300
<font color="#CCCCCC">know so that</font><font color="#E5E5E5"> won't happen really to my</font>

600
00:25:11,930 --> 00:25:16,190
knowledge I don't know I mean every

601
00:25:14,300 --> 00:25:17,510
compiler optimization eyes<font color="#E5E5E5"> are scaling</font>

602
00:25:16,190 --> 00:25:19,160
to<font color="#E5E5E5"> be a little</font><font color="#CCCCCC"> bit different so I can't</font>

603
00:25:17,510 --> 00:25:23,270
be like no it never happens obviously

604
00:25:19,160 --> 00:25:25,130
it's possible but all<font color="#E5E5E5"> you know the</font>

605
00:25:23,270 --> 00:25:28,300
majority<font color="#E5E5E5"> of the code that I'm generating</font>

606
00:25:25,130 --> 00:25:30,680
is actually traversed like a good<font color="#E5E5E5"> I</font>

607
00:25:28,300 --> 00:25:32,840
would say a good<font color="#E5E5E5"> fifty percent of it</font>

608
00:25:30,680 --> 00:25:34,400
<font color="#CCCCCC">probably is traversed it's not like I'm</font>

609
00:25:32,840 --> 00:25:35,929
<font color="#E5E5E5">just gonna spit a bunch of code and then</font>

610
00:25:34,400 --> 00:25:37,790
at the<font color="#CCCCCC"> end is like oh here's the</font>

611
00:25:35,930 --> 00:25:41,000
original script like that that would<font color="#E5E5E5"> be</font>

612
00:25:37,790 --> 00:25:44,090
pretty useless so it does<font color="#E5E5E5"> traverse that</font>

613
00:25:41,000 --> 00:25:45,830
<font color="#E5E5E5">so for example when I'm creating a</font>

614
00:25:44,090 --> 00:25:48,830
function call that could be in a

615
00:25:45,830 --> 00:25:51,110
conditional that it does follow the one

616
00:25:48,830 --> 00:25:52,909
the one branch of that and that's

617
00:25:51,110 --> 00:25:55,070
calling the function call and then

618
00:25:52,910 --> 00:25:56,750
that's another function and like you can

619
00:25:55,070 --> 00:25:59,060
nest all of these things really<font color="#E5E5E5"> easily</font>

620
00:25:56,750 --> 00:26:01,640
so all of the stuff that<font color="#CCCCCC"> I try to make</font>

621
00:25:59,060 --> 00:26:03,169
all of it use used because dead code

622
00:26:01,640 --> 00:26:11,560
paths like you're saying or pretty

623
00:26:03,170 --> 00:26:11,560
useless any other questions sure

624
00:26:12,370 --> 00:26:25,010
nope that didn't work sure oh well thank

625
00:26:23,330 --> 00:26:32,960
you<font color="#E5E5E5"> guys very much oh sorry I got one</font>

626
00:26:25,010 --> 00:26:37,520
more back here you can you'll just<font color="#E5E5E5"> have</font>

627
00:26:32,960 --> 00:26:42,860
<font color="#CCCCCC">to pay me for it I mean this does happen</font>

628
00:26:37,520 --> 00:26:44,690
so for exam- skater in the wild the

629
00:26:42,860 --> 00:26:46,520
reason that I don't worry about talking

630
00:26:44,690 --> 00:26:49,250
about<font color="#E5E5E5"> stuff like this and releasing it</font>

631
00:26:46,520 --> 00:26:51,530
is I mean I I release it because I'm

632
00:26:49,250 --> 00:26:53,120
writing it for CTF challenges if I was

633
00:26:51,530 --> 00:26:57,170
out writing malware with his said I

634
00:26:53,120 --> 00:26:58,760
would dick move but I<font color="#E5E5E5"> would get caught</font>

635
00:26:57,170 --> 00:27:01,370
and then I wouldn't<font color="#E5E5E5"> be able to live my</font>

636
00:26:58,760 --> 00:27:05,660
lovely life in the United States<font color="#E5E5E5"> I'd you</font>

637
00:27:01,370 --> 00:27:07,459
know be down in Guantanamo so it doesn't

638
00:27:05,660 --> 00:27:09,730
<font color="#CCCCCC">really happen that a lot of attackers</font>

639
00:27:07,460 --> 00:27:12,530
will actually actively go out and use

640
00:27:09,730 --> 00:27:14,810
obfuscations like this like using mufa

641
00:27:12,530 --> 00:27:16,460
<font color="#CCCCCC">skidders really damned ugly just out of</font>

642
00:27:14,810 --> 00:27:19,760
<font color="#CCCCCC">the box it's ugly and then it's really</font>

643
00:27:16,460 --> 00:27:20,930
easy to<font color="#CCCCCC"> make it worse so we've seen</font><font color="#E5E5E5"> that</font>

644
00:27:19,760 --> 00:27:23,390
in<font color="#E5E5E5"> the wild but we've seen in the wild</font>

645
00:27:20,930 --> 00:27:27,020
once and it came out more than a year

646
00:27:23,390 --> 00:27:29,930
<font color="#CCCCCC">ago</font><font color="#E5E5E5"> now so I don't think it's something</font>

647
00:27:27,020 --> 00:27:32,629
<font color="#E5E5E5">we really have to worry about but you</font>

648
00:27:29,930 --> 00:27:34,880
know yeah sure call<font color="#CCCCCC"> me I'll help you</font>

649
00:27:32,630 --> 00:27:37,600
know<font color="#CCCCCC"> right if</font><font color="#E5E5E5"> you see this in the wild</font>

650
00:27:34,880 --> 00:27:40,340
and you're like oh that dick war tell

651
00:27:37,600 --> 00:27:42,500
then yeah you<font color="#E5E5E5"> know send me a message and</font>

652
00:27:40,340 --> 00:27:46,220
it says that<font color="#E5E5E5"> starts with hey dick like</font>

653
00:27:42,500 --> 00:27:51,830
you got some work to do because I think

654
00:27:46,220 --> 00:27:54,310
<font color="#E5E5E5">that's only fair anybody else cool</font>

655
00:27:51,830 --> 00:27:54,310
thanks a lot

