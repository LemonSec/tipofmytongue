1
00:00:00,079 --> 00:00:03,650
<font color="#E5E5E5">alright I guess we're good to go</font>

2
00:00:03,950 --> 00:00:09,260
everyone ready all right hi I'm Ryan

3
00:00:07,170 --> 00:00:12,450
<font color="#CCCCCC">Stuart's and this is Swift reversing</font>

4
00:00:09,260 --> 00:00:15,379
this talk is about the<font color="#E5E5E5"> Swift programming</font>

5
00:00:12,450 --> 00:00:17,910
language not the<font color="#E5E5E5"> in our banking network</font>

6
00:00:15,379 --> 00:00:19,470
if I were doing<font color="#E5E5E5"> that no no none</font><font color="#CCCCCC"> of you</font>

7
00:00:17,910 --> 00:00:22,650
would know and I'd have a salad good

8
00:00:19,470 --> 00:00:24,930
laptop so this walk is burger into three

9
00:00:22,650 --> 00:00:27,090
parts on introduction to<font color="#E5E5E5"> Swift a</font>

10
00:00:24,930 --> 00:00:29,550
discussion of the my methodology and

11
00:00:27,090 --> 00:00:34,230
reversing the language and<font color="#E5E5E5"> the ABI and</font>

12
00:00:29,550 --> 00:00:37,739
the actual results from my research so

13
00:00:34,230 --> 00:00:40,800
Swift is<font color="#E5E5E5"> Apple's new sexy language for</font>

14
00:00:37,739 --> 00:00:42,870
the future just like everything<font color="#E5E5E5"> Apple</font>

15
00:00:40,800 --> 00:00:45,288
does is more ceremony than substance

16
00:00:42,870 --> 00:00:47,699
when the<font color="#E5E5E5"> first version</font><font color="#CCCCCC"> was released</font>

17
00:00:45,289 --> 00:00:50,070
raise your hand if you had an<font color="#CCCCCC"> iPad 1 and</font>

18
00:00:47,700 --> 00:00:56,100
<font color="#E5E5E5">iPhone one or an Apple watch you know</font>

19
00:00:50,070 --> 00:00:58,050
what I<font color="#CCCCCC"> mean but more importantly Swift</font>

20
00:00:56,100 --> 00:01:00,719
is meant to<font color="#E5E5E5"> take over</font><font color="#CCCCCC"> for objective-c</font>

21
00:00:58,050 --> 00:01:02,669
and if you've done objective-c reversing

22
00:01:00,719 --> 00:01:05,880
or development you<font color="#CCCCCC"> can probably</font><font color="#E5E5E5"> get</font>

23
00:01:02,670 --> 00:01:08,070
behind that so Swift is actually open

24
00:01:05,880 --> 00:01:10,199
source back in<font color="#E5E5E5"> December before I started</font>

25
00:01:08,070 --> 00:01:12,630
doing a lot of this research I did cheat

26
00:01:10,200 --> 00:01:15,869
a little bit afterward I don't know if

27
00:01:12,630 --> 00:01:19,020
it's<font color="#CCCCCC"> really cheating and go verify the</font>

28
00:01:15,869 --> 00:01:22,320
things I had<font color="#E5E5E5"> discovered originally when</font>

29
00:01:19,020 --> 00:01:24,390
<font color="#E5E5E5">it was still proprietary it's</font>

30
00:01:22,320 --> 00:01:26,548
technically available on linux as well

31
00:01:24,390 --> 00:01:30,329
as<font color="#CCCCCC"> i was 10 but so is objective-c and</font>

32
00:01:26,549 --> 00:01:32,850
that didn't go<font color="#CCCCCC"> so well so we'll see and</font>

33
00:01:30,329 --> 00:01:34,829
a few<font color="#E5E5E5"> months</font><font color="#CCCCCC"> ago macrumors actually had</font>

34
00:01:32,850 --> 00:01:38,960
this big article saying that<font color="#E5E5E5"> google is</font>

35
00:01:34,829 --> 00:01:42,179
considering adopting<font color="#CCCCCC"> Swift for android i</font>

36
00:01:38,960 --> 00:01:44,039
I think<font color="#E5E5E5"> that article is in February and</font>

37
00:01:42,180 --> 00:01:46,439
I haven't<font color="#E5E5E5"> seen anything from it</font><font color="#CCCCCC"> again so</font>

38
00:01:44,040 --> 00:01:48,720
i don't know maybe<font color="#CCCCCC"> there's just like a</font>

39
00:01:46,439 --> 00:01:52,669
random<font color="#CCCCCC"> macrumors TechCrunch kind of</font>

40
00:01:48,720 --> 00:01:55,530
let's pump the stock kind of article

41
00:01:52,670 --> 00:01:57,930
Swift<font color="#E5E5E5"> is pretty expressive you can</font>

42
00:01:55,530 --> 00:01:59,670
commit atrocities like this one this is

43
00:01:57,930 --> 00:02:01,890
<font color="#E5E5E5">Noah's Ark you can see that there's the</font>

44
00:01:59,670 --> 00:02:03,960
world there's all the animals in<font color="#E5E5E5"> the</font>

45
00:02:01,890 --> 00:02:08,399
world we have<font color="#E5E5E5"> a boat which is an array</font>

46
00:02:03,960 --> 00:02:10,649
of strings for love in world we're going

47
00:02:08,399 --> 00:02:13,830
<font color="#E5E5E5">to put two</font><font color="#CCCCCC"> of each on the boat and print</font>

48
00:02:10,649 --> 00:02:18,270
the boat the output<font color="#CCCCCC"> is</font>

49
00:02:13,830 --> 00:02:19,560
below you know two by two so Swift is

50
00:02:18,270 --> 00:02:21,150
meant to be a persistence<font color="#E5E5E5"> program</font>

51
00:02:19,560 --> 00:02:24,030
language so things like these awesome

52
00:02:21,150 --> 00:02:26,940
emojis actually get compiled to machine

53
00:02:24,030 --> 00:02:28,620
code and are executed natively on the

54
00:02:26,940 --> 00:02:31,160
platform they're not interpreted and

55
00:02:28,620 --> 00:02:38,490
they're<font color="#E5E5E5"> not you know</font><font color="#CCCCCC"> chittod like in</font>

56
00:02:31,160 --> 00:02:42,510
Python or Java respectively<font color="#CCCCCC"> so Swift the</font>

57
00:02:38,490 --> 00:02:44,550
language it's a modern language which

58
00:02:42,510 --> 00:02:46,489
I'm not<font color="#E5E5E5"> really certain what that means</font>

59
00:02:44,550 --> 00:02:48,240
but I think it was designed after

60
00:02:46,490 --> 00:02:50,000
smashing the stack for fun and profit

61
00:02:48,240 --> 00:02:53,520
came out and told everyone that like

62
00:02:50,000 --> 00:02:55,920
memory Safety's a thing let me show

63
00:02:53,520 --> 00:02:58,700
their stuff before that but has all the

64
00:02:55,920 --> 00:03:02,359
features you'd expect like closures

65
00:02:58,700 --> 00:03:06,839
<font color="#E5E5E5">first</font><font color="#CCCCCC"> class functions tuples generics</font>

66
00:03:02,360 --> 00:03:08,990
easy iteration<font color="#CCCCCC"> air handling builtin as a</font>

67
00:03:06,840 --> 00:03:12,870
reverse engineer<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> reading the</font>

68
00:03:08,990 --> 00:03:17,700
feature list and the closures and

69
00:03:12,870 --> 00:03:19,709
generics came to me like those made me

70
00:03:17,700 --> 00:03:21,510
<font color="#CCCCCC">concerned that I felt they'd be</font>

71
00:03:19,709 --> 00:03:24,600
problematic when reversing because if

72
00:03:21,510 --> 00:03:26,700
you ever reversed like highly templated

73
00:03:24,600 --> 00:03:31,859
C++ you know what I<font color="#E5E5E5"> mean and these are</font>

74
00:03:26,700 --> 00:03:34,010
you know<font color="#CCCCCC"> swift's version of those Swift</font>

75
00:03:31,860 --> 00:03:36,090
also makes heavy use of optionals

76
00:03:34,010 --> 00:03:37,950
optionals is a form of air handling

77
00:03:36,090 --> 00:03:40,560
where it is a boxed object to that

78
00:03:37,950 --> 00:03:42,959
either has the value you<font color="#E5E5E5"> want or has</font>

79
00:03:40,560 --> 00:03:46,500
none you have to safely unpack it before

80
00:03:42,959 --> 00:03:47,850
they give you the data I felt that<font color="#E5E5E5"> this</font>

81
00:03:46,500 --> 00:03:48,840
was going<font color="#E5E5E5"> to add a lot</font><font color="#CCCCCC"> of noise so this</font>

82
00:03:47,850 --> 00:03:50,880
assembly<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I spend a lot</font><font color="#CCCCCC"> of time</font>

83
00:03:48,840 --> 00:03:53,970
figuring out<font color="#E5E5E5"> exactly how optionals are</font>

84
00:03:50,880 --> 00:03:56,010
represented and I'll get into<font color="#CCCCCC"> that but</font>

85
00:03:53,970 --> 00:03:57,480
first<font color="#E5E5E5"> I wanted to go over the compiler</font>

86
00:03:56,010 --> 00:03:59,840
stuff so<font color="#E5E5E5"> I actually got into Swift</font>

87
00:03:57,480 --> 00:04:03,268
because I was<font color="#E5E5E5"> doing a lot of lvm</font>

88
00:03:59,840 --> 00:04:05,700
development a lot of low level analysis

89
00:04:03,269 --> 00:04:07,739
passes to try and find code patterns it

90
00:04:05,700 --> 00:04:09,810
might be you know<font color="#CCCCCC"> vole</font><font color="#E5E5E5"> neural and to</font>

91
00:04:07,739 --> 00:04:14,700
rewrite code to<font color="#CCCCCC"> be obvious gated things</font>

92
00:04:09,810 --> 00:04:18,478
like that and I felt that looking at the

93
00:04:14,700 --> 00:04:21,329
compiler setup was important to fully

94
00:04:18,478 --> 00:04:23,700
grasp<font color="#E5E5E5"> Swift reverse engineering so these</font>

95
00:04:21,329 --> 00:04:25,260
next few slides kind of go over the

96
00:04:23,700 --> 00:04:27,479
compiler architecture and borrow heavily

97
00:04:25,260 --> 00:04:32,130
from<font color="#CCCCCC"> Chris lautner's lvm dev meeting</font>

98
00:04:27,480 --> 00:04:34,140
tation to both clang<font color="#E5E5E5"> and Swift and</font><font color="#CCCCCC"> Ross</font>

99
00:04:32,130 --> 00:04:38,969
new million other compilers are built on

100
00:04:34,140 --> 00:04:45,240
top of<font color="#CCCCCC"> LOM clang has a pretty minor set</font>

101
00:04:38,970 --> 00:04:49,290
of a minor I don't know overhead on top

102
00:04:45,240 --> 00:04:53,130
of<font color="#CCCCCC"> llvm</font><font color="#E5E5E5"> where Swift has a much longer</font>

103
00:04:49,290 --> 00:04:56,280
chain in front of it the optimizations

104
00:04:53,130 --> 00:05:00,180
for each you<font color="#E5E5E5"> know happen in very</font>

105
00:04:56,280 --> 00:05:01,469
different spots Swift you know<font color="#E5E5E5"> was</font>

106
00:05:00,180 --> 00:05:04,350
designed by the same people who did

107
00:05:01,470 --> 00:05:06,030
clang<font color="#CCCCCC"> an lvm and they learned from their</font>

108
00:05:04,350 --> 00:05:07,470
mistakes and one of these mistakes is

109
00:05:06,030 --> 00:05:11,909
they implemented their own intermediate

110
00:05:07,470 --> 00:05:13,620
language to the oedipal full

111
00:05:11,910 --> 00:05:15,720
understanding of Swift's type system and

112
00:05:13,620 --> 00:05:19,170
and could do some guaranteed

113
00:05:15,720 --> 00:05:24,330
optimizations and some safety so we're

114
00:05:19,170 --> 00:05:25,710
clang optimizes here Swift with all of

115
00:05:24,330 --> 00:05:28,530
this extra information is able to

116
00:05:25,710 --> 00:05:30,890
optimize here and each one of these

117
00:05:28,530 --> 00:05:35,820
optimizations actually causes a lot of

118
00:05:30,890 --> 00:05:40,740
problems every time they have a closure

119
00:05:35,820 --> 00:05:44,340
or just even a regular basic block it

120
00:05:40,740 --> 00:05:47,820
can be optimized in 80 different ways

121
00:05:44,340 --> 00:05:49,169
and you know<font color="#E5E5E5"> as when</font><font color="#CCCCCC"> you reverse</font>

122
00:05:47,820 --> 00:05:51,150
engineer things you kind of pattern

123
00:05:49,170 --> 00:05:53,730
match things you don't really<font color="#CCCCCC"> go in like</font>

124
00:05:51,150 --> 00:05:55,979
okay yes this one is iterating from one

125
00:05:53,730 --> 00:05:58,500
to four you know<font color="#CCCCCC"> it's index into this</font>

126
00:05:55,980 --> 00:06:00,330
array like you kind<font color="#E5E5E5"> of pattern match to</font>

127
00:05:58,500 --> 00:06:02,790
like realize that like okay this is<font color="#CCCCCC"> just</font>

128
00:06:00,330 --> 00:06:05,820
<font color="#CCCCCC">iterate over this array and that is then</font>

129
00:06:02,790 --> 00:06:11,810
passed to this function um on each

130
00:06:05,820 --> 00:06:11,810
iteration so going<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the compiler</font>

131
00:06:11,840 --> 00:06:19,590
we start<font color="#E5E5E5"> with a swift source file this</font>

132
00:06:16,560 --> 00:06:24,450
gets parsed and lex to and becomes an

133
00:06:19,590 --> 00:06:26,400
<font color="#E5E5E5">asd file or abstract syntax tree this is</font>

134
00:06:24,450 --> 00:06:28,320
not<font color="#E5E5E5"> meant to be machinery or human</font>

135
00:06:26,400 --> 00:06:29,849
readable<font color="#CCCCCC"> not to be machine readable but</font>

136
00:06:28,320 --> 00:06:34,020
it's a nice tree format you can still

137
00:06:29,850 --> 00:06:38,850
see the emojis that goes through<font color="#E5E5E5"> the</font>

138
00:06:34,020 --> 00:06:40,889
sill<font color="#E5E5E5"> gen so the first layer is a st to</font>

139
00:06:38,850 --> 00:06:43,080
still which is<font color="#E5E5E5"> swift's IL so</font>

140
00:06:40,889 --> 00:06:48,060
<font color="#CCCCCC">swift</font><font color="#E5E5E5"> does is all of its analysis on</font>

141
00:06:43,080 --> 00:06:51,688
sale um and if you're familiar with any

142
00:06:48,060 --> 00:06:53,430
you know IRL vm you'll notice that this

143
00:06:51,689 --> 00:06:55,499
one<font color="#CCCCCC"> is a bit higher on the abstraction</font>

144
00:06:53,430 --> 00:07:00,689
layer like it understands types it has

145
00:06:55,499 --> 00:07:03,680
it own it sends a stack it has like

146
00:07:00,689 --> 00:07:05,909
things<font color="#E5E5E5"> like the enum optional and it has</font>

147
00:07:03,680 --> 00:07:08,430
virtual function pointers haven't been

148
00:07:05,909 --> 00:07:10,669
like d virtualized yet things like that

149
00:07:08,430 --> 00:07:15,389
that make an alice is much much easier

150
00:07:10,669 --> 00:07:18,120
that ends up going to lv mir this is

151
00:07:15,389 --> 00:07:22,770
<font color="#E5E5E5">just normal lv m RR and then finally the</font>

152
00:07:18,120 --> 00:07:26,719
machine code so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> x86 64 AT&T</font>

153
00:07:22,770 --> 00:07:29,580
syntax<font color="#CCCCCC"> I'm sorry I didn't change that</font>

154
00:07:26,719 --> 00:07:32,129
and like that's the whole thing<font color="#CCCCCC"> and</font>

155
00:07:29,580 --> 00:07:37,740
there's chances to optimize and rewrite

156
00:07:32,129 --> 00:07:39,629
the code in many many stages<font color="#CCCCCC"> um one last</font>

157
00:07:37,740 --> 00:07:42,479
<font color="#E5E5E5">thing about still before</font><font color="#CCCCCC"> I go to</font><font color="#E5E5E5"> the</font>

158
00:07:39,629 --> 00:07:45,659
actual talk again Alec box so Swift has

159
00:07:42,479 --> 00:07:48,419
many ways to create closures still has

160
00:07:45,659 --> 00:07:50,039
the al-kitab<font color="#E5E5E5"> oksana</font><font color="#CCCCCC"> tate optimization</font>

161
00:07:48,419 --> 00:07:52,438
which actually causes a lot of heartache

162
00:07:50,039 --> 00:07:55,378
when reversing so by default all

163
00:07:52,439 --> 00:07:57,960
variables are allocated on the heap much

164
00:07:55,379 --> 00:08:02,129
like<font color="#E5E5E5"> Java and everyone knows how fast</font>

165
00:07:57,960 --> 00:08:04,008
and expressive Java is right well Swift

166
00:08:02,129 --> 00:08:07,050
didn't want to do that so they do

167
00:08:04,009 --> 00:08:09,180
guaranteed analysis for escape analysis

168
00:08:07,050 --> 00:08:12,389
and you know if a variable doesn't leave

169
00:08:09,180 --> 00:08:13,889
a scope<font color="#CCCCCC"> like let's say this the</font><font color="#E5E5E5"> function</font>

170
00:08:12,389 --> 00:08:15,589
scope they're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take it off the</font>

171
00:08:13,889 --> 00:08:18,149
heat and bring it onto the<font color="#E5E5E5"> stack and</font>

172
00:08:15,589 --> 00:08:19,620
this means is for two or three different

173
00:08:18,149 --> 00:08:22,050
representations for each variable or

174
00:08:19,620 --> 00:08:27,659
closure type and this multiplies across

175
00:08:22,050 --> 00:08:30,120
your entire application so enough about

176
00:08:27,659 --> 00:08:31,919
the compiler let's<font color="#E5E5E5"> figure how to turn</font>

177
00:08:30,120 --> 00:08:33,120
the thing in<font color="#E5E5E5"> the on the left to the</font>

178
00:08:31,919 --> 00:08:35,909
thing into the right and these are

179
00:08:33,120 --> 00:08:40,349
actually<font color="#E5E5E5"> the same thing certain with my</font>

180
00:08:35,909 --> 00:08:42,208
methodology so I promised a systematic

181
00:08:40,349 --> 00:08:43,740
approach in my talk abstract but as more

182
00:08:42,208 --> 00:08:46,579
a list of things that I was confused

183
00:08:43,740 --> 00:08:46,579
about going<font color="#CCCCCC"> in</font>

184
00:08:50,550 --> 00:08:56,170
the story you really need to<font color="#E5E5E5"> start with</font>

185
00:08:52,870 --> 00:08:57,790
motivation because you could<font color="#CCCCCC"> be a like</font>

186
00:08:56,170 --> 00:09:00,910
language weenie and<font color="#E5E5E5"> want to know every</font>

187
00:08:57,790 --> 00:09:03,969
little detail about how the<font color="#E5E5E5"> language is</font>

188
00:09:00,910 --> 00:09:06,790
constructed and you know dissect the

189
00:09:03,970 --> 00:09:10,660
decisions made by<font color="#CCCCCC"> blattner and grow off</font>

190
00:09:06,790 --> 00:09:15,099
and<font color="#CCCCCC"> whatnot</font><font color="#E5E5E5"> but what's the motivation</font>

191
00:09:10,660 --> 00:09:17,459
<font color="#E5E5E5">for that the research really needs to be</font>

192
00:09:15,100 --> 00:09:25,540
driven by the work that you want to<font color="#E5E5E5"> do</font>

193
00:09:17,460 --> 00:09:26,740
so when<font color="#E5E5E5"> I start reversing things I start</font>

194
00:09:25,540 --> 00:09:28,420
<font color="#E5E5E5">with one of these first two in mind</font>

195
00:09:26,740 --> 00:09:29,980
application testing or exploit

196
00:09:28,420 --> 00:09:31,959
development but I frequently end up just

197
00:09:29,980 --> 00:09:35,530
finding myself building character which

198
00:09:31,960 --> 00:09:39,580
is my on a pep talk way of saying not

199
00:09:35,530 --> 00:09:42,490
making progress so this talk<font color="#CCCCCC"> focus is on</font>

200
00:09:39,580 --> 00:09:45,640
application<font color="#CCCCCC"> pen test in but there's a</font>

201
00:09:42,490 --> 00:09:47,680
lot of character building starting with

202
00:09:45,640 --> 00:09:51,970
<font color="#E5E5E5">my initial question so I jotted down a</font>

203
00:09:47,680 --> 00:09:56,469
bunch of questions going in with the

204
00:09:51,970 --> 00:09:57,850
<font color="#CCCCCC">language so what area in a broken down</font>

205
00:09:56,470 --> 00:10:03,820
in three areas of the toolchain the

206
00:09:57,850 --> 00:10:06,160
language core in the<font color="#CCCCCC"> ABI um so what</font>

207
00:10:03,820 --> 00:10:08,890
tools are available what is it message

208
00:10:06,160 --> 00:10:11,530
basic objective<font color="#CCCCCC"> see what native types</font>

209
00:10:08,890 --> 00:10:13,330
are available how does<font color="#E5E5E5"> Swift bridge into</font>

210
00:10:11,530 --> 00:10:14,740
<font color="#E5E5E5">Objective C because I know that they are</font>

211
00:10:13,330 --> 00:10:16,630
compatible<font color="#CCCCCC"> with each other what is the</font>

212
00:10:14,740 --> 00:10:18,280
calling convention heart things laid out

213
00:10:16,630 --> 00:10:20,170
in memory all these<font color="#CCCCCC"> are initial</font>

214
00:10:18,280 --> 00:10:23,110
questions<font color="#CCCCCC"> I had going on for each one of</font>

215
00:10:20,170 --> 00:10:25,120
these questions<font color="#E5E5E5"> I created one or more</font>

216
00:10:23,110 --> 00:10:26,920
small project that focused on using that

217
00:10:25,120 --> 00:10:31,090
<font color="#E5E5E5">one individual feature behind each</font>

218
00:10:26,920 --> 00:10:35,880
question for example this one<font color="#E5E5E5"> is</font>

219
00:10:31,090 --> 00:10:38,710
optional unpacking and class<font color="#E5E5E5"> inheritance</font>

220
00:10:35,880 --> 00:10:41,140
so you'll see that there's a vehicle

221
00:10:38,710 --> 00:10:43,720
based class and bicycle inherits order

222
00:10:41,140 --> 00:10:45,699
is derived off of that and tandem is

223
00:10:43,720 --> 00:10:52,030
derived up a bicycle in each one extends

224
00:10:45,700 --> 00:10:53,710
<font color="#CCCCCC">the next the this one has a small</font>

225
00:10:52,030 --> 00:10:56,770
closure that's just too small closures

226
00:10:53,710 --> 00:10:58,810
and and several bugs that will cause it

227
00:10:56,770 --> 00:11:00,590
all to crash if given the right

228
00:10:58,810 --> 00:11:03,560
information

229
00:11:00,590 --> 00:11:06,560
but this is another<font color="#E5E5E5"> example I used so</font>

230
00:11:03,560 --> 00:11:08,959
going<font color="#E5E5E5"> into the actual reversing I</font>

231
00:11:06,560 --> 00:11:12,530
started by looking at any tools that may

232
00:11:08,960 --> 00:11:14,570
be available already tools that you know

233
00:11:12,530 --> 00:11:16,839
might help reverse reversing but also

234
00:11:14,570 --> 00:11:19,550
just creating things and being

235
00:11:16,840 --> 00:11:21,280
environments to debug in and it starts

236
00:11:19,550 --> 00:11:24,560
with a google search and<font color="#CCCCCC"> Swift reversing</font>

237
00:11:21,280 --> 00:11:26,449
nine of the top<font color="#CCCCCC"> ten results were</font>

238
00:11:24,560 --> 00:11:28,060
reversing a stringer array and<font color="#E5E5E5"> Swift and</font>

239
00:11:26,450 --> 00:11:30,770
the<font color="#CCCCCC"> 10th one</font><font color="#E5E5E5"> was about Taylor Swift</font>

240
00:11:28,060 --> 00:11:33,469
reversing female opinion and why women

241
00:11:30,770 --> 00:11:37,760
love her now when they<font color="#E5E5E5"> did in three</font>

242
00:11:33,470 --> 00:11:40,490
years ago so I was kind of you know<font color="#E5E5E5"> on</font>

243
00:11:37,760 --> 00:11:42,650
my own there so to<font color="#E5E5E5"> start i looked at the</font>

244
00:11:40,490 --> 00:11:44,960
compiler and the<font color="#E5E5E5"> switch sees compiler</font>

245
00:11:42,650 --> 00:11:47,060
<font color="#CCCCCC">its installed xcode there's a swift</font>

246
00:11:44,960 --> 00:11:49,040
application which is<font color="#E5E5E5"> the compiler repple</font>

247
00:11:47,060 --> 00:11:53,270
which is fun to play in<font color="#E5E5E5"> and then this</font>

248
00:11:49,040 --> 00:11:57,770
<font color="#E5E5E5">Swift de mango nothing really</font><font color="#CCCCCC"> else was</font>

249
00:11:53,270 --> 00:11:59,720
available at the time they do have some

250
00:11:57,770 --> 00:12:01,189
nice<font color="#E5E5E5"> Diagnostics that you can dump and</font>

251
00:11:59,720 --> 00:12:03,590
you can dump<font color="#E5E5E5"> the sill and you can read</font>

252
00:12:01,190 --> 00:12:05,150
the sale and like try to make sense of

253
00:12:03,590 --> 00:12:07,850
that and at the<font color="#E5E5E5"> time it wasn't</font>

254
00:12:05,150 --> 00:12:12,140
documented<font color="#E5E5E5"> also it was not all that</font>

255
00:12:07,850 --> 00:12:14,330
useful Oh what was<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of useful as</font>

256
00:12:12,140 --> 00:12:17,540
things like the<font color="#E5E5E5"> Swift ripple and I guess</font>

257
00:12:14,330 --> 00:12:21,500
there's a too<font color="#CCCCCC"> far up the screen</font><font color="#E5E5E5"> on both</font>

258
00:12:17,540 --> 00:12:25,250
of them the Swift ripple was neat

259
00:12:21,500 --> 00:12:26,960
because you could you type in things and

260
00:12:25,250 --> 00:12:29,780
<font color="#E5E5E5">then if you repented things with a colon</font>

261
00:12:26,960 --> 00:12:35,210
you could dump into lld be so you could

262
00:12:29,780 --> 00:12:38,569
then disassemble at like PC after you

263
00:12:35,210 --> 00:12:41,600
had assigned some variables and it also

264
00:12:38,570 --> 00:12:45,110
caught errors so what I do here is

265
00:12:41,600 --> 00:12:48,410
actually<font color="#E5E5E5"> I sine V as an optional anti</font>

266
00:12:45,110 --> 00:12:51,020
give it to and accent<font color="#CCCCCC"> XNX as an optional</font>

267
00:12:48,410 --> 00:12:54,730
and to give it nil on pet force on pack

268
00:12:51,020 --> 00:12:57,290
v<font color="#CCCCCC"> I get to force unpack X and I get a</font>

269
00:12:54,730 --> 00:13:00,070
which<font color="#CCCCCC"> is what you expect when you for</font>

270
00:12:57,290 --> 00:13:02,420
some pack something that's not not there

271
00:13:00,070 --> 00:13:05,900
the most useful tool actually a swift to

272
00:13:02,420 --> 00:13:09,949
mangle um so if you've done Super Plus

273
00:13:05,900 --> 00:13:13,850
reversing you know that in order to<font color="#CCCCCC"> have</font>

274
00:13:09,950 --> 00:13:16,930
functions with the same name but<font color="#E5E5E5"> if</font>

275
00:13:13,850 --> 00:13:20,149
parameters they have to mangle the name

276
00:13:16,930 --> 00:13:23,180
and then code the type signature in<font color="#CCCCCC"> the</font>

277
00:13:20,149 --> 00:13:25,759
name and<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> dimanga</font><font color="#CCCCCC"> Latvia like</font>

278
00:13:23,180 --> 00:13:29,540
standard tools like C++ felt while Swift

279
00:13:25,759 --> 00:13:32,389
has the same thing except it's actually

280
00:13:29,540 --> 00:13:34,099
much more expressive you notice you may

281
00:13:32,389 --> 00:13:36,860
notice at the bottom here on the second

282
00:13:34,100 --> 00:13:39,529
<font color="#CCCCCC">one argh argh one equals dead it</font>

283
00:13:36,860 --> 00:13:43,269
actually encodes the ownership of the

284
00:13:39,529 --> 00:13:45,800
argument into the type signature and

285
00:13:43,269 --> 00:13:47,720
also all<font color="#CCCCCC"> of the types of all the</font>

286
00:13:45,800 --> 00:13:49,550
arguments and they're very expressive

287
00:13:47,720 --> 00:13:53,839
they're not<font color="#E5E5E5"> just like void star or into</font>

288
00:13:49,550 --> 00:13:55,819
star you<font color="#E5E5E5"> know it's this is a first class</font>

289
00:13:53,839 --> 00:13:57,800
function passed in that takes these

290
00:13:55,819 --> 00:14:02,060
arguments and it's a specialization of

291
00:13:57,800 --> 00:14:06,319
this class that then you know doesn't<font color="#E5E5E5"> it</font>

292
00:14:02,060 --> 00:14:10,130
assumes that our Guan is no longer

293
00:14:06,319 --> 00:14:13,040
maintained after you pass it in so if it

294
00:14:10,130 --> 00:14:15,980
wants it to not get deallocated<font color="#E5E5E5"> it's</font>

295
00:14:13,040 --> 00:14:17,689
responsible for that and it's got this

296
00:14:15,980 --> 00:14:20,240
neat tree view and it's meant to just<font color="#E5E5E5"> be</font>

297
00:14:17,690 --> 00:14:22,699
garbage on the screen don't try to read

298
00:14:20,240 --> 00:14:25,519
it but if<font color="#E5E5E5"> you're into like parsing</font>

299
00:14:22,699 --> 00:14:28,069
things and writing tools this is

300
00:14:25,519 --> 00:14:33,380
<font color="#CCCCCC">fantastic because nothing like that</font>

301
00:14:28,069 --> 00:14:35,540
exists for C or C++ so initial tools

302
00:14:33,380 --> 00:14:37,540
questions or visiting link what tools

303
00:14:35,540 --> 00:14:40,880
<font color="#E5E5E5">are available now is nothing it's just</font>

304
00:14:37,540 --> 00:14:42,889
swifty mango there's class<font color="#CCCCCC"> dumped in</font>

305
00:14:40,880 --> 00:14:44,839
class don't kind of works because of<font color="#E5E5E5"> the</font>

306
00:14:42,889 --> 00:14:47,660
binary compatibility between objective-c

307
00:14:44,839 --> 00:14:49,399
and Swift but it's very confused and it

308
00:14:47,660 --> 00:14:56,839
shouldn't be too difficult to update but

309
00:14:49,399 --> 00:14:58,939
I haven't<font color="#CCCCCC"> done</font><font color="#E5E5E5"> that yet yeah next up is</font>

310
00:14:56,839 --> 00:15:02,449
the<font color="#E5E5E5"> language core I got this little guy</font>

311
00:14:58,939 --> 00:15:05,029
here what comes up when you<font color="#E5E5E5"> search the</font>

312
00:15:02,449 --> 00:15:11,109
language and set the image settings for

313
00:15:05,029 --> 00:15:13,009
the right size so a language core

314
00:15:11,110 --> 00:15:14,720
there's a<font color="#CCCCCC"> billion things i could</font><font color="#E5E5E5"> put</font>

315
00:15:13,009 --> 00:15:17,660
here i decided to focus on native types

316
00:15:14,720 --> 00:15:20,180
control flow and optionals and class<font color="#E5E5E5"> and</font>

317
00:15:17,660 --> 00:15:23,689
San Shi ation a lot of these native

318
00:15:20,180 --> 00:15:25,309
types decay and<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Swift built-in ties</font>

319
00:15:23,689 --> 00:15:26,449
which then decay into all of your native

320
00:15:25,309 --> 00:15:27,800
type so they're<font color="#E5E5E5"> kind of what you'd</font>

321
00:15:26,449 --> 00:15:31,640
expect like an in

322
00:15:27,800 --> 00:15:36,109
eight is assigned a bit integer on a

323
00:15:31,640 --> 00:15:41,170
little endian system and you know they

324
00:15:36,110 --> 00:15:47,420
actually<font color="#E5E5E5"> like all of Swift is utf-16</font>

325
00:15:41,170 --> 00:15:50,479
utf-16 but they decay into utf-8 because

326
00:15:47,420 --> 00:15:52,430
that is more more easy to optimize and

327
00:15:50,480 --> 00:15:57,260
like unless<font color="#CCCCCC"> cpu can deal with that</font>

328
00:15:52,430 --> 00:15:59,989
natively with like a ski<font color="#CCCCCC"> out of every</font>

329
00:15:57,260 --> 00:16:01,370
<font color="#CCCCCC">dish and all that stuff</font><font color="#E5E5E5"> so they'll</font>

330
00:15:59,990 --> 00:16:05,779
<font color="#E5E5E5">dicated into that if that's all you're</font>

331
00:16:01,370 --> 00:16:07,519
using is utf-8 and like<font color="#CCCCCC"> i said before</font>

332
00:16:05,779 --> 00:16:12,200
<font color="#E5E5E5">for each language feature</font><font color="#CCCCCC"> i want no</font><font color="#E5E5E5"> more</font>

333
00:16:07,519 --> 00:16:14,360
about a test case or two so objective CI

334
00:16:12,200 --> 00:16:17,089
she does use<font color="#CCCCCC"> i</font><font color="#E5E5E5"> skip the subjective see</font>

335
00:16:14,360 --> 00:16:19,700
uses tagged pointers that encode like

336
00:16:17,089 --> 00:16:22,459
reference counts and maybe types in them

337
00:16:19,700 --> 00:16:24,529
so if doesn't use that even though<font color="#E5E5E5"> it'd</font>

338
00:16:22,459 --> 00:16:28,119
be cool and it's a built-in feature in

339
00:16:24,529 --> 00:16:34,070
arm 64 so the first<font color="#CCCCCC"> question I had was</font>

340
00:16:28,120 --> 00:16:36,410
messages and laziness so when you do

341
00:16:34,070 --> 00:16:38,870
objective-c like this one down here and

342
00:16:36,410 --> 00:16:40,819
about<font color="#E5E5E5"> on the bottom one you get these</font>

343
00:16:38,870 --> 00:16:43,310
weird indirect calls that<font color="#CCCCCC"> are very</font>

344
00:16:40,820 --> 00:16:45,260
difficult to follow you get a object

345
00:16:43,310 --> 00:16:49,969
that's<font color="#CCCCCC"> past objective-c message to send</font>

346
00:16:45,260 --> 00:16:51,680
in a string reference and that in<font color="#E5E5E5"> the</font>

347
00:16:49,970 --> 00:16:54,589
back end dispatches a call to<font color="#E5E5E5"> that</font>

348
00:16:51,680 --> 00:16:57,079
function going<font color="#CCCCCC"> the other way is</font><font color="#E5E5E5"> not</font>

349
00:16:54,589 --> 00:16:58,250
always the easiest and then getting type

350
00:16:57,079 --> 00:17:00,649
information is not always the easiest

351
00:16:58,250 --> 00:17:03,020
and figuring out<font color="#E5E5E5"> what how many arguments</font>

352
00:17:00,649 --> 00:17:06,169
is not always the easiest and it's super

353
00:17:03,020 --> 00:17:11,030
annoying and<font color="#E5E5E5"> Apple you know rightly</font>

354
00:17:06,169 --> 00:17:12,589
decided to get rid of that and so

355
00:17:11,030 --> 00:17:15,559
messages aren't a thing unless you're

356
00:17:12,589 --> 00:17:19,188
bridging the objective-c and then for

357
00:17:15,559 --> 00:17:21,079
laziness there is no laziness which is

358
00:17:19,189 --> 00:17:23,839
awesome if there were laziness you'd end

359
00:17:21,079 --> 00:17:26,510
up with a bunch of<font color="#CCCCCC"> Haskell style thunk</font>

360
00:17:23,839 --> 00:17:30,020
chains I have tried<font color="#CCCCCC"> to reverse engineer</font>

361
00:17:26,510 --> 00:17:33,050
<font color="#CCCCCC">Haskell i wrote a hello world program</font>

362
00:17:30,020 --> 00:17:36,020
and it took me<font color="#E5E5E5"> an hour to find the</font>

363
00:17:33,050 --> 00:17:40,980
string hello world via tracing calls and

364
00:17:36,020 --> 00:17:45,200
references it is a level

365
00:17:40,980 --> 00:17:45,200
of hell that Dante didn't quite describe

366
00:17:45,410 --> 00:17:54,059
so I don't<font color="#E5E5E5"> wish that on anyone optional</font>

367
00:17:49,890 --> 00:17:57,000
so optionals are awesome c++ 17 and 14

368
00:17:54,059 --> 00:17:58,770
have these and everyone should use them

369
00:17:57,000 --> 00:18:00,450
<font color="#E5E5E5">and get rid</font><font color="#CCCCCC"> of exceptions and get rid of</font>

370
00:17:58,770 --> 00:18:06,660
return codes<font color="#E5E5E5"> just use optionals</font>

371
00:18:00,450 --> 00:18:09,270
everywhere because you<font color="#E5E5E5"> have like they</font>

372
00:18:06,660 --> 00:18:15,440
enforce for lack of a better word a good

373
00:18:09,270 --> 00:18:18,480
design paradigm and you know everything

374
00:18:15,440 --> 00:18:22,620
requires them in the<font color="#CCCCCC"> Swift native</font>

375
00:18:18,480 --> 00:18:24,299
library you can unpack them like this<font color="#E5E5E5"> is</font>

376
00:18:22,620 --> 00:18:27,030
a safe way<font color="#CCCCCC"> to unpack them right here is</font>

377
00:18:24,299 --> 00:18:29,190
if let name equals optional name new

378
00:18:27,030 --> 00:18:32,639
good access to name its bound in this

379
00:18:29,190 --> 00:18:37,950
one scope if it's not bound it actually

380
00:18:32,640 --> 00:18:39,929
skips this block and then we have a

381
00:18:37,950 --> 00:18:42,510
little bit<font color="#CCCCCC"> of pattern matching here so</font>

382
00:18:39,929 --> 00:18:45,120
we have choices passed in as a possibly

383
00:18:42,510 --> 00:18:51,120
an integer<font color="#E5E5E5"> from arguments and we match</font>

384
00:18:45,120 --> 00:18:53,100
it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 1 2 3 or invalid choice so these</font>

385
00:18:51,120 --> 00:18:54,600
are actually encoded in a much simpler

386
00:18:53,100 --> 00:18:57,889
way than i expected i expect them to be

387
00:18:54,600 --> 00:19:02,520
loud and ugly<font color="#CCCCCC"> and horrible in every way</font>

388
00:18:57,890 --> 00:19:05,520
they are quit then they're just one bite

389
00:19:02,520 --> 00:19:08,549
and you have your value encoded and this

390
00:19:05,520 --> 00:19:11,190
can be several<font color="#CCCCCC"> you though this one um</font>

391
00:19:08,549 --> 00:19:15,960
this can be several bites<font color="#CCCCCC"> I think it's</font>

392
00:19:11,190 --> 00:19:18,929
up to<font color="#E5E5E5"> 24 bytes decimal in line and then</font>

393
00:19:15,960 --> 00:19:22,440
you<font color="#E5E5E5"> don't have your optional flag and if</font>

394
00:19:18,929 --> 00:19:25,020
the option is there like if the value is

395
00:19:22,440 --> 00:19:29,370
available to<font color="#E5E5E5"> you the flag</font><font color="#CCCCCC"> is cleared</font><font color="#E5E5E5"> and</font>

396
00:19:25,020 --> 00:19:31,440
if it's not<font color="#CCCCCC"> set and the code is littered</font>

397
00:19:29,370 --> 00:19:34,889
with these look and and one these

398
00:19:31,440 --> 00:19:38,220
bitwise hands of random things<font color="#E5E5E5"> this 51</font>

399
00:19:34,890 --> 00:19:43,020
right here is correlated<font color="#CCCCCC"> with us 52 so</font>

400
00:19:38,220 --> 00:19:49,049
if the option is is clear yeah I've

401
00:19:43,020 --> 00:19:51,030
clear retain it and<font color="#E5E5E5"> the great thing</font>

402
00:19:49,049 --> 00:19:53,040
about that is the only place that uses

403
00:19:51,030 --> 00:19:54,879
bitwise hands in all of us<font color="#E5E5E5"> of code it's</font>

404
00:19:53,040 --> 00:19:58,010
optional and packing

405
00:19:54,880 --> 00:20:00,640
so what something that scared me going

406
00:19:58,010 --> 00:20:05,090
and ended up<font color="#E5E5E5"> being much much easier to</font>

407
00:20:00,640 --> 00:20:06,230
reverse what does suck is uh you end up

408
00:20:05,090 --> 00:20:10,360
with these like weird misaligned

409
00:20:06,230 --> 00:20:15,470
structure so like my this<font color="#CCCCCC"> is an in 64</font>

410
00:20:10,360 --> 00:20:18,169
with the value to and the option is in

411
00:20:15,470 --> 00:20:19,310
the next bite and it ends<font color="#E5E5E5"> up getting a</font>

412
00:20:18,170 --> 00:20:24,830
lineman there's a lot of dead bites

413
00:20:19,310 --> 00:20:29,179
everywhere yeah the other cool thing is

414
00:20:24,830 --> 00:20:34,639
the compiler emits aud to or bug in an x

415
00:20:29,180 --> 00:20:39,140
rays<font color="#CCCCCC"> any time you use an option invalid</font>

416
00:20:34,640 --> 00:20:41,900
way so this one is take an integer off

417
00:20:39,140 --> 00:20:46,790
of process arguments cast it to<font color="#E5E5E5"> an</font>

418
00:20:41,900 --> 00:20:49,430
optional integer for some<font color="#E5E5E5"> pact that we</font>

419
00:20:46,790 --> 00:20:52,970
see<font color="#CCCCCC"> here that we for some packet and if</font>

420
00:20:49,430 --> 00:20:55,610
<font color="#E5E5E5">it's set meaning the optional the option</font>

421
00:20:52,970 --> 00:20:57,320
was not parse properly it hits this bug

422
00:20:55,610 --> 00:20:59,060
and you'll see you get a legal

423
00:20:57,320 --> 00:21:03,070
instruction if you do it and this

424
00:20:59,060 --> 00:21:03,070
totally says Chaka Khan not infiltrating

425
00:21:05,080 --> 00:21:09,379
next thing I wanted<font color="#E5E5E5"> to look at is a</font>

426
00:21:07,070 --> 00:21:11,389
dynamic class allocation instantiation

427
00:21:09,380 --> 00:21:13,460
so as you'd expect from a<font color="#CCCCCC"> high-level</font>

428
00:21:11,390 --> 00:21:16,340
<font color="#E5E5E5">language you don't really handle raw</font>

429
00:21:13,460 --> 00:21:17,630
memory operations yourself and it turns

430
00:21:16,340 --> 00:21:20,230
out the way that<font color="#E5E5E5"> Swift handles this</font>

431
00:21:17,630 --> 00:21:22,370
isn't<font color="#E5E5E5"> very much different than C++</font>

432
00:21:20,230 --> 00:21:24,050
you'll hear me say not different this

433
00:21:22,370 --> 00:21:25,489
was plus a lot because<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> very</font>

434
00:21:24,050 --> 00:21:29,510
surprised going in<font color="#E5E5E5"> and I've been</font>

435
00:21:25,490 --> 00:21:31,060
suffered through objective-c the minor

436
00:21:29,510 --> 00:21:33,650
differences actually are related to

437
00:21:31,060 --> 00:21:39,620
accessing the type and passing that to a

438
00:21:33,650 --> 00:21:41,300
swift<font color="#CCCCCC"> Alex object in most or maybe all</font>

439
00:21:39,620 --> 00:21:43,250
cases you'll see that they use<font color="#CCCCCC"> in</font>

440
00:21:41,300 --> 00:21:44,899
allocating<font color="#CCCCCC"> a net form of the call which</font>

441
00:21:43,250 --> 00:21:47,480
will handle everything which I it will

442
00:21:44,900 --> 00:21:49,910
handle allocating the object assigning

443
00:21:47,480 --> 00:21:52,220
its<font color="#E5E5E5"> vtable and instantiate and all its</font>

444
00:21:49,910 --> 00:21:53,660
memory members and then going<font color="#CCCCCC"> up</font><font color="#E5E5E5"> its</font>

445
00:21:52,220 --> 00:21:57,620
inheritance chain in doing the same<font color="#E5E5E5"> for</font>

446
00:21:53,660 --> 00:22:03,320
<font color="#E5E5E5">all of that interesting though and v1</font>

447
00:21:57,620 --> 00:22:06,709
here the<font color="#CCCCCC"> Alec call cares about the type</font>

448
00:22:03,320 --> 00:22:07,879
this<font color="#E5E5E5"> is great because you can now just</font>

449
00:22:06,710 --> 00:22:10,009
cross-reference every

450
00:22:07,879 --> 00:22:14,629
<font color="#E5E5E5">cult to Alec object and you get</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> Oh</font>

451
00:22:10,009 --> 00:22:17,659
classes train is 24 bytes long and it

452
00:22:14,629 --> 00:22:19,639
also has a this is a alignment mask it

453
00:22:17,659 --> 00:22:22,579
is aligned to a bite about<font color="#E5E5E5"> eight</font><font color="#CCCCCC"> byte</font>

454
00:22:19,639 --> 00:22:23,809
boundaries and if you've done this

455
00:22:22,579 --> 00:22:25,069
before you like out you get the

456
00:22:23,809 --> 00:22:27,079
cross-reference must've stuff you have

457
00:22:25,069 --> 00:22:30,408
to<font color="#E5E5E5"> do like horrible subtree matching</font><font color="#CCCCCC"> and</font>

458
00:22:27,079 --> 00:22:34,908
<font color="#E5E5E5">x-rays or that's</font><font color="#CCCCCC"> what I've done</font><font color="#E5E5E5"> it's</font>

459
00:22:30,409 --> 00:22:36,109
<font color="#CCCCCC">probably not the right choice going</font>

460
00:22:34,909 --> 00:22:39,169
through this<font color="#E5E5E5"> I found this awesome</font>

461
00:22:36,109 --> 00:22:40,698
comment which is at some point soon

462
00:22:39,169 --> 00:22:43,069
after return it will be coming<font color="#E5E5E5"> in a</font>

463
00:22:40,699 --> 00:22:45,889
variant that metadata gets<font color="#E5E5E5"> size will</font>

464
00:22:43,069 --> 00:22:49,879
equal the required size and like what do

465
00:22:45,889 --> 00:22:51,649
you mean sometime after return like it's

466
00:22:49,879 --> 00:22:56,149
a skidding allocated but I'm another

467
00:22:51,649 --> 00:22:57,799
thread is this a possible bug area right

468
00:22:56,149 --> 00:22:59,059
now it's<font color="#CCCCCC"> not been the future it might be</font>

469
00:22:57,799 --> 00:23:02,899
because right now it's<font color="#E5E5E5"> just backed by</font>

470
00:22:59,059 --> 00:23:06,789
slow Malik but they might allocate

471
00:23:02,899 --> 00:23:09,829
something in the like on demand or

472
00:23:06,789 --> 00:23:13,069
another thread in the future to speed it

473
00:23:09,829 --> 00:23:14,839
up even more but I'm totally waiting for

474
00:23:13,069 --> 00:23:18,619
them to optimize it and remove their to

475
00:23:14,839 --> 00:23:22,309
<font color="#E5E5E5">do's because that you know that's what</font>

476
00:23:18,619 --> 00:23:24,289
makes this money uh-huh so this<font color="#CCCCCC"> is a</font>

477
00:23:22,309 --> 00:23:28,279
class of San Shi ation and specifically

478
00:23:24,289 --> 00:23:32,599
it's the non allocating version of

479
00:23:28,279 --> 00:23:34,519
trains in it it calls<font color="#E5E5E5"> his parents not</font>

480
00:23:32,599 --> 00:23:36,649
allocating in it as well and in science

481
00:23:34,519 --> 00:23:39,499
the parents pointer and this is hex

482
00:23:36,649 --> 00:23:41,718
phrase getting confused this actually

483
00:23:39,499 --> 00:23:46,249
<font color="#E5E5E5">doesn't have return address or return</font>

484
00:23:41,719 --> 00:23:47,749
time and in C++ function would<font color="#CCCCCC"> be</font>

485
00:23:46,249 --> 00:23:49,190
responsible<font color="#E5E5E5"> for assigning the classes</font>

486
00:23:47,749 --> 00:23:52,549
view tables but in our<font color="#E5E5E5"> case that's</font>

487
00:23:49,190 --> 00:23:54,429
handled by<font color="#E5E5E5"> Swift Alec object we also get</font>

488
00:23:52,549 --> 00:23:59,389
a<font color="#E5E5E5"> lot of these lazy bound variables</font>

489
00:23:54,429 --> 00:24:02,029
where if this guy has not been set they

490
00:23:59,389 --> 00:24:03,708
set it and then just<font color="#CCCCCC"> return it it has</font>

491
00:24:02,029 --> 00:24:05,659
been reset the<font color="#E5E5E5"> earth said it they look</font>

492
00:24:03,709 --> 00:24:07,459
it up and<font color="#E5E5E5"> return it a lot of those get</font>

493
00:24:05,659 --> 00:24:10,479
optimized out at higher optimization

494
00:24:07,459 --> 00:24:15,679
levels but they're super verbose and

495
00:24:10,479 --> 00:24:19,759
awesome<font color="#E5E5E5"> I love all the symbols so</font>

496
00:24:15,679 --> 00:24:21,560
language<font color="#E5E5E5"> core revisited isn't message</font>

497
00:24:19,759 --> 00:24:24,110
basic objectives here

498
00:24:21,560 --> 00:24:27,770
more like<font color="#E5E5E5"> C++ and in C++ is a lazy like</font>

499
00:24:24,110 --> 00:24:29,719
Haskell now I'll thank God what native

500
00:24:27,770 --> 00:24:36,740
types are available<font color="#E5E5E5"> the usuals you'd</font>

501
00:24:29,720 --> 00:24:40,130
expect the rest<font color="#E5E5E5"> you know bitwise</font><font color="#CCCCCC"> ann's</font>

502
00:24:36,740 --> 00:24:41,840
for optionals all that and the final

503
00:24:40,130 --> 00:24:44,390
<font color="#CCCCCC">area that</font><font color="#E5E5E5"> I looked at was a swift ABI</font>

504
00:24:41,840 --> 00:24:46,669
this is where so the ABI is the

505
00:24:44,390 --> 00:24:49,730
application binary interface it defines

506
00:24:46,670 --> 00:24:54,160
how compiled applications talk to other

507
00:24:49,730 --> 00:24:57,760
compelled applications like how you like

508
00:24:54,160 --> 00:25:00,200
what what registers and you put your

509
00:24:57,760 --> 00:25:03,020
arguments in like our<font color="#CCCCCC"> Guan goes into</font><font color="#E5E5E5"> our</font>

510
00:25:00,200 --> 00:25:08,690
<font color="#E5E5E5">di or like or r 0 or something like that</font>

511
00:25:03,020 --> 00:25:11,470
return values come back and<font color="#CCCCCC"> RI X so</font>

512
00:25:08,690 --> 00:25:14,660
since I'm dealing with machine code I

513
00:25:11,470 --> 00:25:16,790
the ABI is you know important so my

514
00:25:14,660 --> 00:25:19,730
questions with ABI is how is objective-c

515
00:25:16,790 --> 00:25:22,760
bridging done almost<font color="#E5E5E5"> all of apple's code</font>

516
00:25:19,730 --> 00:25:24,290
is an objective-c still and<font color="#CCCCCC"> i think</font>

517
00:25:22,760 --> 00:25:26,990
<font color="#CCCCCC">that's because</font><font color="#E5E5E5"> of that backwards</font>

518
00:25:24,290 --> 00:25:30,170
compatibility reasons with like arc

519
00:25:26,990 --> 00:25:33,140
stuff how<font color="#CCCCCC"> our virtual function call is</font>

520
00:25:30,170 --> 00:25:35,330
implemented big pain point who owns what

521
00:25:33,140 --> 00:25:39,680
in arguments and what's the calling

522
00:25:35,330 --> 00:25:41,510
convention bridging so bridging was

523
00:25:39,680 --> 00:25:43,760
actually really difficult to do on the

524
00:25:41,510 --> 00:25:45,560
command line<font color="#E5E5E5"> I did eventually get an</font>

525
00:25:43,760 --> 00:25:50,060
example working but I had to cheat with

526
00:25:45,560 --> 00:25:53,570
Xcode so Swift is very far away<font color="#CCCCCC"> from</font>

527
00:25:50,060 --> 00:25:55,280
being like a<font color="#E5E5E5"> command-line server</font>

528
00:25:53,570 --> 00:25:57,139
application kind of thing<font color="#CCCCCC"> like you</font><font color="#E5E5E5"> kind</font>

529
00:25:55,280 --> 00:25:59,990
of want with<font color="#E5E5E5"> Linux if you're doing a</font>

530
00:25:57,140 --> 00:26:02,510
Linux here I could be an objective c

531
00:25:59,990 --> 00:26:05,690
class that implements one method and<font color="#E5E5E5"> i</font>

532
00:26:02,510 --> 00:26:07,879
called that<font color="#E5E5E5"> from</font><font color="#CCCCCC"> Swift so bridge test is</font>

533
00:26:05,690 --> 00:26:11,360
uh oh another one method has a class

534
00:26:07,880 --> 00:26:14,600
method called class method 1 and this<font color="#CCCCCC"> is</font>

535
00:26:11,360 --> 00:26:16,429
the compiled bit of that function notice

536
00:26:14,600 --> 00:26:20,209
the funny a bit of mixing and matching

537
00:26:16,430 --> 00:26:21,590
we have a swift style allocating in it

538
00:26:20,210 --> 00:26:23,570
and then right after<font color="#E5E5E5"> that we hit</font>

539
00:26:21,590 --> 00:26:26,179
objective-c message Senate objective-c

540
00:26:23,570 --> 00:26:30,610
release and then like Swift doesn't know

541
00:26:26,180 --> 00:26:33,980
what to do if<font color="#CCCCCC"> it ends up</font><font color="#E5E5E5"> returning a</font>

542
00:26:30,610 --> 00:26:35,149
untagged pointer they call<font color="#E5E5E5"> Swift unknown</font>

543
00:26:33,980 --> 00:26:39,139
release

544
00:26:35,149 --> 00:26:40,609
and if it's tagged<font color="#E5E5E5"> a just-released I</font>

545
00:26:39,139 --> 00:26:43,639
have that backwards if its honor if<font color="#E5E5E5"> it's</font>

546
00:26:40,609 --> 00:26:46,428
<font color="#CCCCCC">on tap if it's tagged a unknown release</font>

547
00:26:43,639 --> 00:26:51,289
it and if it's none tagged they really

548
00:26:46,429 --> 00:26:53,119
so did I just say<font color="#CCCCCC"> the simple toys here's</font>

549
00:26:51,289 --> 00:26:55,158
the<font color="#E5E5E5"> objective c class for reference it's</font>

550
00:26:53,119 --> 00:27:00,228
trivial just calls this native like

551
00:26:55,159 --> 00:27:01,909
syslog<font color="#CCCCCC"> and ass log function virtual</font>

552
00:27:00,229 --> 00:27:05,379
function calls everyone's favorite<font color="#CCCCCC"> um</font>

553
00:27:01,909 --> 00:27:07,849
they're implemented identically to<font color="#E5E5E5"> c++</font>

554
00:27:05,379 --> 00:27:11,779
your instantiated class as a pointer to

555
00:27:07,849 --> 00:27:13,968
in a table that table<font color="#E5E5E5"> you know has a</font>

556
00:27:11,779 --> 00:27:17,809
bunch of function pointers the index of

557
00:27:13,969 --> 00:27:21,289
it you<font color="#E5E5E5"> can corresponds to the call you</font>

558
00:27:17,809 --> 00:27:24,099
want and you<font color="#E5E5E5"> index into in cola method</font>

559
00:27:21,289 --> 00:27:27,080
and this hex<font color="#CCCCCC"> raise code right here</font>

560
00:27:24,099 --> 00:27:29,210
corresponds directly with this guy so we

561
00:27:27,080 --> 00:27:33,678
see two they've already unpacked the

562
00:27:29,210 --> 00:27:36,440
optional above this 2 equals choice we

563
00:27:33,679 --> 00:27:38,269
will get will instantiate a train object

564
00:27:36,440 --> 00:27:42,729
and will call train that make noise and

565
00:27:38,269 --> 00:27:42,729
that's done to this virtual method

566
00:27:44,349 --> 00:27:51,619
ownership rules object ownership rules

567
00:27:48,710 --> 00:27:53,119
are pretty well<font color="#CCCCCC"> defined which is one of</font>

568
00:27:51,619 --> 00:27:55,158
the<font color="#E5E5E5"> major reasons why it's to say</font>

569
00:27:53,119 --> 00:27:56,779
everything in<font color="#E5E5E5"> Swift is reference counted</font>

570
00:27:55,159 --> 00:27:59,899
with arc which is<font color="#CCCCCC"> Apple's automated</font>

571
00:27:56,779 --> 00:28:02,179
reference counting a lot of<font color="#CCCCCC"> the old</font>

572
00:27:59,899 --> 00:28:04,549
objective-c bugs or the fact that arc

573
00:28:02,179 --> 00:28:09,559
was not required until I think it's just

574
00:28:04,549 --> 00:28:11,239
<font color="#CCCCCC">now becoming required well that's</font><font color="#E5E5E5"> not</font>

575
00:28:09,559 --> 00:28:15,349
<font color="#E5E5E5">true not everything's reference counted</font>

576
00:28:11,239 --> 00:28:17,269
native types aren't so<font color="#E5E5E5"> and also stack</font>

577
00:28:15,349 --> 00:28:20,289
objects at aren't reference counted they

578
00:28:17,269 --> 00:28:23,179
don't escape aren't reference counted

579
00:28:20,289 --> 00:28:24,589
then this is possible because almost

580
00:28:23,179 --> 00:28:26,869
everything is derived from this heap

581
00:28:24,589 --> 00:28:28,158
object type which includes a ref count a

582
00:28:26,869 --> 00:28:30,349
data point our type field and some

583
00:28:28,159 --> 00:28:34,929
<font color="#E5E5E5">inline storage if it's a smaller object</font>

584
00:28:30,349 --> 00:28:37,428
and all of the ownership rules for like

585
00:28:34,929 --> 00:28:38,899
external calls are encoded in the type

586
00:28:37,429 --> 00:28:42,889
signature so we have dead guaranteed

587
00:28:38,899 --> 00:28:46,449
exploded guaranteed and exploded which

588
00:28:42,889 --> 00:28:48,240
our funny names dead means the color

589
00:28:46,450 --> 00:28:50,040
does<font color="#CCCCCC"> it maintained</font>

590
00:28:48,240 --> 00:28:52,200
in the<font color="#E5E5E5"> reference guaranteed means the</font>

591
00:28:50,040 --> 00:28:55,850
color maintains the reference exploded

592
00:28:52,200 --> 00:28:59,340
means it got unpacked and its gear and

593
00:28:55,850 --> 00:29:04,919
it's dead and then guaranteed is you

594
00:28:59,340 --> 00:29:07,020
know guaranteed and unpacked this is

595
00:29:04,920 --> 00:29:10,770
calling convention so ifs approach is

596
00:29:07,020 --> 00:29:14,100
awful um they will do whatever the hell

597
00:29:10,770 --> 00:29:17,540
they want<font color="#E5E5E5"> at any time and they don't</font>

598
00:29:14,100 --> 00:29:20,879
<font color="#E5E5E5">care what you're doing</font><font color="#CCCCCC"> and it's awful</font>

599
00:29:17,540 --> 00:29:23,879
but it makes sense to make it faster

600
00:29:20,880 --> 00:29:27,990
because if you have valuable data and

601
00:29:23,880 --> 00:29:33,000
one of your calling or<font color="#CCCCCC"> Kali safe</font>

602
00:29:27,990 --> 00:29:36,410
registers you want to keep it there in

603
00:29:33,000 --> 00:29:41,429
<font color="#CCCCCC">the life is</font><font color="#E5E5E5"> change the one calling spot</font>

604
00:29:36,410 --> 00:29:43,320
x-rays doesn't understand it at all so

605
00:29:41,429 --> 00:29:45,120
variables appear out of nowhere<font color="#E5E5E5"> on a red</font>

606
00:29:43,320 --> 00:29:46,200
from but then i'm closer introspection

607
00:29:45,120 --> 00:29:49,080
they're actually they're turned values

608
00:29:46,200 --> 00:29:51,240
from the preceding<font color="#E5E5E5"> call and you you just</font>

609
00:29:49,080 --> 00:29:54,559
<font color="#E5E5E5">end up having to go in through every</font>

610
00:29:51,240 --> 00:30:03,059
leaf function and type them all properly

611
00:29:54,559 --> 00:30:05,428
and it's awful sorry flashbacks who has

612
00:30:03,059 --> 00:30:07,530
been to this page in the<font color="#CCCCCC"> autodoc ride</font><font color="#E5E5E5"> a</font>

613
00:30:05,429 --> 00:30:11,670
pro documentation<font color="#CCCCCC"> i'm pretty</font><font color="#E5E5E5"> certain</font>

614
00:30:07,530 --> 00:30:14,670
it's just me<font color="#CCCCCC"> ida have</font><font color="#E5E5E5"> support to do</font>

615
00:30:11,670 --> 00:30:17,309
awful awful stuff<font color="#E5E5E5"> with variables and</font>

616
00:30:14,670 --> 00:30:20,550
their type signatures and<font color="#CCCCCC"> i've done that</font>

617
00:30:17,309 --> 00:30:22,678
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get it working with swift except it</font>

618
00:30:20,550 --> 00:30:28,290
only works with three arguments it by

619
00:30:22,679 --> 00:30:31,380
<font color="#CCCCCC">default Swift needs for as registers so</font>

620
00:30:28,290 --> 00:30:37,020
it doesn't really<font color="#CCCCCC"> work and x-rays yet</font>

621
00:30:31,380 --> 00:30:40,020
and i've bugged Igor and no faq about it

622
00:30:37,020 --> 00:30:45,660
and they're not doing anything yet so

623
00:30:40,020 --> 00:30:48,120
ABI revisited it bridges seamlessly<font color="#CCCCCC"> it's</font>

624
00:30:45,660 --> 00:30:50,490
<font color="#CCCCCC">C++ like classes and structures I guess</font>

625
00:30:48,120 --> 00:30:52,169
I didn't cover this is laid out exactly

626
00:30:50,490 --> 00:30:54,000
a good projective see actually if<font color="#E5E5E5"> you</font>

627
00:30:52,170 --> 00:30:55,200
want to do more objective c stuff you

628
00:30:54,000 --> 00:30:59,910
should just<font color="#E5E5E5"> go read the swift</font><font color="#CCCCCC"> docs</font>

629
00:30:55,200 --> 00:31:02,310
because they're well formatted and there

630
00:30:59,910 --> 00:31:04,710
they easy to jump into and

631
00:31:02,310 --> 00:31:07,500
actually put a lot of<font color="#E5E5E5"> invariance on</font>

632
00:31:04,710 --> 00:31:09,390
objective c in<font color="#E5E5E5"> the future and that those</font>

633
00:31:07,500 --> 00:31:12,960
docs aren't available for objective-c at

634
00:31:09,390 --> 00:31:15,450
all on<font color="#CCCCCC"> calling convention is yolo tools</font>

635
00:31:12,960 --> 00:31:17,520
so there are no tools<font color="#CCCCCC"> i wrote a tool</font>

636
00:31:15,450 --> 00:31:21,600
it's called Swift up high I hate writing

637
00:31:17,520 --> 00:31:28,200
<font color="#E5E5E5">Ida Python but I had to this is actually</font>

638
00:31:21,600 --> 00:31:30,060
I de x-rays python yeah so what it does

639
00:31:28,200 --> 00:31:33,150
right now<font color="#E5E5E5"> is it does a hex raise</font>

640
00:31:30,060 --> 00:31:37,169
rewriting of<font color="#CCCCCC"> de mango</font><font color="#E5E5E5"> names it annotates</font>

641
00:31:33,150 --> 00:31:40,680
the<font color="#CCCCCC"> IDA disassembly with these dimanga</font>

642
00:31:37,170 --> 00:31:43,200
names it does some class body recovery

643
00:31:40,680 --> 00:31:45,300
it does some type propagation but that's

644
00:31:43,200 --> 00:31:50,190
really broken so for this demo I don't

645
00:31:45,300 --> 00:31:52,230
have it on and it will do witness table

646
00:31:50,190 --> 00:31:55,110
recovery once I fully understand the

647
00:31:52,230 --> 00:31:58,440
implications<font color="#E5E5E5"> for witness tables and i</font>

648
00:31:55,110 --> 00:32:01,760
have a small demo for that let's see

649
00:31:58,440 --> 00:32:01,760
this is going<font color="#E5E5E5"> to work</font>

650
00:32:07,680 --> 00:32:14,310
so what's<font color="#CCCCCC"> just what it's doing is it's</font>

651
00:32:10,170 --> 00:32:18,240
moving my Python file out of the plugins

652
00:32:14,310 --> 00:32:19,649
folder I have this this Swift program

653
00:32:18,240 --> 00:32:23,250
that was where I was playing with

654
00:32:19,650 --> 00:32:25,890
protocols and you can see all<font color="#CCCCCC"> the names</font>

655
00:32:23,250 --> 00:32:27,780
or mangled<font color="#CCCCCC"> x-rays you have no</font><font color="#E5E5E5"> idea</font>

656
00:32:25,890 --> 00:32:29,010
what's going on<font color="#CCCCCC"> but you can kind of see</font>

657
00:32:27,780 --> 00:32:31,830
like okay this is something<font color="#E5E5E5"> the</font>

658
00:32:29,010 --> 00:32:33,870
<font color="#E5E5E5">protocols called dice there's an LC g</font>

659
00:32:31,830 --> 00:32:37,020
probably random number generator for

660
00:32:33,870 --> 00:32:39,270
dice and then not a lot else that you

661
00:32:37,020 --> 00:32:41,780
could figure<font color="#E5E5E5"> out what's</font><font color="#CCCCCC"> going on close</font>

662
00:32:39,270 --> 00:32:45,060
the it's moving my plugin back in

663
00:32:41,780 --> 00:32:46,770
relaunching it you can see like okay

664
00:32:45,060 --> 00:32:49,379
we've a little<font color="#E5E5E5"> bit more here</font><font color="#CCCCCC"> not all of</font>

665
00:32:46,770 --> 00:32:51,840
these are working perfectly but we can

666
00:32:49,380 --> 00:32:55,860
see we have<font color="#E5E5E5"> a protocol witness table for</font>

667
00:32:51,840 --> 00:32:59,189
the dice we are calling we're allocating

668
00:32:55,860 --> 00:33:02,490
a dice object we are getting the textual

669
00:32:59,190 --> 00:33:06,090
description of it believe we throw the

670
00:33:02,490 --> 00:33:11,850
dice somewhere as well so it goes

671
00:33:06,090 --> 00:33:13,770
through and rewrites that we also can

672
00:33:11,850 --> 00:33:17,730
run it<font color="#E5E5E5"> on here</font><font color="#CCCCCC"> and you'll</font><font color="#E5E5E5"> get it</font><font color="#CCCCCC"> in the</font>

673
00:33:13,770 --> 00:33:19,950
disassembly as well there's no<font color="#E5E5E5"> way to</font>

674
00:33:17,730 --> 00:33:23,310
add your<font color="#E5E5E5"> own name de Mangler and Ida</font>

675
00:33:19,950 --> 00:33:25,680
I've also complained about<font color="#CCCCCC"> that so this</font>

676
00:33:23,310 --> 00:33:28,980
<font color="#CCCCCC">is what I'm left to and it'll get</font>

677
00:33:25,680 --> 00:33:34,200
classes eventually<font color="#E5E5E5"> i don't think i have</font>

678
00:33:28,980 --> 00:33:37,320
them here it is a few<font color="#E5E5E5"> that it got its</font>

679
00:33:34,200 --> 00:33:42,750
with double so if i'll cg things like

680
00:33:37,320 --> 00:33:48,179
that the demo demo super simple short so

681
00:33:42,750 --> 00:33:50,820
that's it<font color="#CCCCCC"> i tried</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> make the talk a</font>

682
00:33:48,180 --> 00:33:56,580
little more interesting with dry super

683
00:33:50,820 --> 00:34:01,439
dry humor but you know it's a very dry

684
00:33:56,580 --> 00:34:03,179
topic<font color="#CCCCCC"> i hope you guys enjoyed it swift</font>

685
00:34:01,440 --> 00:34:04,740
still has some hurdles that need to be

686
00:34:03,180 --> 00:34:06,990
crossing order to be able to effectively

687
00:34:04,740 --> 00:34:12,120
<font color="#CCCCCC">reverse engineer</font><font color="#E5E5E5"> andrey implement</font>

688
00:34:06,990 --> 00:34:15,380
snapchat so that's my talk<font color="#E5E5E5"> and this is</font>

689
00:34:12,120 --> 00:34:15,380
me do have<font color="#CCCCCC"> any questions</font>

690
00:34:18,270 --> 00:34:26,899
no all right cool thank you

