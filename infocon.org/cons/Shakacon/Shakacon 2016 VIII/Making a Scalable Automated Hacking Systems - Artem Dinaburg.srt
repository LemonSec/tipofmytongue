1
00:00:00,000 --> 00:00:05,040
great so thank you very much for that

2
00:00:02,159 --> 00:00:06,210
kind introduction and it's that and as

3
00:00:05,040 --> 00:00:08,490
mentioned I'm going to be talking about

4
00:00:06,210 --> 00:00:11,639
<font color="#E5E5E5">making scalable automated hacking</font>

5
00:00:08,490 --> 00:00:14,429
systems so first a little<font color="#E5E5E5"> bit about</font>

6
00:00:11,639 --> 00:00:17,009
myself so I am a principal security

7
00:00:14,429 --> 00:00:19,109
engineer at trail of bit which<font color="#CCCCCC"> is a</font>

8
00:00:17,010 --> 00:00:22,410
small<font color="#CCCCCC"> new york-based computer security</font>

9
00:00:19,109 --> 00:00:23,880
startup however<font color="#E5E5E5"> even though we're based</font>

10
00:00:22,410 --> 00:00:26,010
<font color="#E5E5E5">on anyway cv of a lot of remote</font>

11
00:00:23,880 --> 00:00:27,210
employees of which I am one and I'm

12
00:00:26,010 --> 00:00:29,640
actually coming to<font color="#E5E5E5"> you today from</font>

13
00:00:27,210 --> 00:00:31,439
Chicago and I'm<font color="#E5E5E5"> very glad to be here in</font>

14
00:00:29,640 --> 00:00:35,489
sunny Hawaii to speak to you<font color="#CCCCCC"> guys so</font>

15
00:00:31,439 --> 00:00:37,410
thank<font color="#CCCCCC"> you very much for having me so as</font>

16
00:00:35,489 --> 00:00:39,328
you can<font color="#E5E5E5"> get as you can gather by the</font>

17
00:00:37,410 --> 00:00:41,250
<font color="#CCCCCC">title this talk is going</font><font color="#E5E5E5"> to be talking</font>

18
00:00:39,329 --> 00:00:44,640
about automated vulnerability discovery

19
00:00:41,250 --> 00:00:47,550
and this is a really broad topic so i

20
00:00:44,640 --> 00:00:50,280
could give three different one our talks

21
00:00:47,550 --> 00:00:53,069
on various aspects of<font color="#E5E5E5"> this and still not</font>

22
00:00:50,280 --> 00:00:54,449
cover everything so by definition some

23
00:00:53,070 --> 00:00:56,760
stuff is going to<font color="#E5E5E5"> have to be left out</font>

24
00:00:54,449 --> 00:00:58,289
since here<font color="#E5E5E5"> i've only got 50 minutes so</font>

25
00:00:56,760 --> 00:01:01,649
we are not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to get to everything</font>

26
00:00:58,289 --> 00:01:03,899
who's having said that my goal is to

27
00:01:01,649 --> 00:01:05,970
make<font color="#E5E5E5"> this talk technical but still</font>

28
00:01:03,899 --> 00:01:08,430
accessible I've seen<font color="#E5E5E5"> people give</font>

29
00:01:05,970 --> 00:01:10,590
automated vulnerability talks before and

30
00:01:08,430 --> 00:01:12,600
everybody<font color="#CCCCCC"> just zones out because</font>

31
00:01:10,590 --> 00:01:15,030
somebody's talking about<font color="#E5E5E5"> like obscure</font>

32
00:01:12,600 --> 00:01:17,070
optimizations for SMT solvers so I'm<font color="#E5E5E5"> not</font>

33
00:01:15,030 --> 00:01:18,360
going<font color="#E5E5E5"> to do that to you I'm going to try</font>

34
00:01:17,070 --> 00:01:20,220
to give you<font color="#E5E5E5"> stuff that</font><font color="#CCCCCC"> you can actually</font>

35
00:01:18,360 --> 00:01:23,880
use<font color="#CCCCCC"> if you are thinking</font><font color="#E5E5E5"> about developing</font>

36
00:01:20,220 --> 00:01:26,280
one of these<font color="#E5E5E5"> systems yourself and having</font>

37
00:01:23,880 --> 00:01:28,649
said that everything that I'm<font color="#E5E5E5"> going to</font>

38
00:01:26,280 --> 00:01:31,170
mention here comes from our experiences

39
00:01:28,650 --> 00:01:33,810
actually<font color="#E5E5E5"> actually building one of these</font>

40
00:01:31,170 --> 00:01:35,159
automated hacking systems so everything

41
00:01:33,810 --> 00:01:37,009
that<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to talk about is stuff</font>

42
00:01:35,159 --> 00:01:38,369
that we've either had to deal with or

43
00:01:37,009 --> 00:01:41,159
something that you've actually

44
00:01:38,369 --> 00:01:45,270
implemented so all of this ours comes

45
00:01:41,159 --> 00:01:47,610
from practical experience so this talk

46
00:01:45,270 --> 00:01:50,130
is divided into two<font color="#CCCCCC"> parts and a</font>

47
00:01:47,610 --> 00:01:51,990
conclusion and in the first<font color="#E5E5E5"> part you're</font>

48
00:01:50,130 --> 00:01:54,089
<font color="#E5E5E5">going to learn</font><font color="#CCCCCC"> about how the trail of</font>

49
00:01:51,990 --> 00:01:57,780
its automated bug finding system works

50
00:01:54,090 --> 00:02:00,000
and how<font color="#CCCCCC"> to make your own in the second</font>

51
00:01:57,780 --> 00:02:02,490
part I'm going<font color="#E5E5E5"> to discuss our approach</font>

52
00:02:00,000 --> 00:02:05,399
to automated binary patching that is

53
00:02:02,490 --> 00:02:09,389
patching both known and unknown bugs in

54
00:02:05,399 --> 00:02:11,610
binary programs and finally I'm going to

55
00:02:09,389 --> 00:02:13,109
conclude with what's next and for the

56
00:02:11,610 --> 00:02:13,780
future<font color="#E5E5E5"> of automated vulnerability</font>

57
00:02:13,110 --> 00:02:16,090
discovery

58
00:02:13,780 --> 00:02:19,060
both in terms of what's next for our

59
00:02:16,090 --> 00:02:20,860
system<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> what's next in terms of</font>

60
00:02:19,060 --> 00:02:27,970
automated vulnerability discovery in

61
00:02:20,860 --> 00:02:29,770
general so what gives me<font color="#CCCCCC"> the right or</font>

62
00:02:27,970 --> 00:02:32,260
authority you know<font color="#E5E5E5"> Compton talk to you</font>

63
00:02:29,770 --> 00:02:35,110
guys about automated bug finding so

64
00:02:32,260 --> 00:02:37,450
trail of bits was a competitor in DARPA

65
00:02:35,110 --> 00:02:39,220
cyber grand challenge and for those<font color="#CCCCCC"> of</font>

66
00:02:37,450 --> 00:02:41,350
you who don't<font color="#E5E5E5"> know the cyber</font><font color="#CCCCCC"> grand</font>

67
00:02:39,220 --> 00:02:44,739
<font color="#CCCCCC">challenge is one of the DARPA Grand</font>

68
00:02:41,350 --> 00:02:47,170
Challenges that is it is a contest open

69
00:02:44,739 --> 00:02:50,709
to anybody in the world held by DARPA

70
00:02:47,170 --> 00:02:53,829
and in the contest DARPA offers a large

71
00:02:50,709 --> 00:02:55,480
pool of money to the winner and the

72
00:02:53,830 --> 00:02:57,190
cyber<font color="#CCCCCC"> grand challenge was a grand</font>

73
00:02:55,480 --> 00:03:00,579
challenge to create<font color="#E5E5E5"> an automated</font>

74
00:02:57,190 --> 00:03:03,600
computer versus computer CTF so that

75
00:03:00,580 --> 00:03:07,209
means<font color="#CCCCCC"> that each computer system had to</font>

76
00:03:03,600 --> 00:03:09,609
<font color="#E5E5E5">both find bugs in binary programs then</font>

77
00:03:07,209 --> 00:03:11,830
patch those bugs and optionally use the

78
00:03:09,610 --> 00:03:15,250
bugs<font color="#CCCCCC"> that found to attack other systems</font>

79
00:03:11,830 --> 00:03:17,319
computers and to make<font color="#E5E5E5"> things a little</font>

80
00:03:15,250 --> 00:03:20,799
bit<font color="#E5E5E5"> easier for everybody there were some</font>

81
00:03:17,319 --> 00:03:23,018
limitations placed on the constraints of

82
00:03:20,799 --> 00:03:24,940
the challenge so it was the challenge

83
00:03:23,019 --> 00:03:26,769
<font color="#E5E5E5">was for a special Linux derived</font>

84
00:03:24,940 --> 00:03:30,040
operating system<font color="#E5E5E5"> called decree and</font>

85
00:03:26,769 --> 00:03:32,380
decree is Linux based but it only<font color="#CCCCCC"> has</font>

86
00:03:30,040 --> 00:03:34,980
seven system calls and it emits things

87
00:03:32,380 --> 00:03:37,239
like file system shared memory

88
00:03:34,980 --> 00:03:39,160
<font color="#CCCCCC">interprocess communications and things</font>

89
00:03:37,239 --> 00:03:40,720
like that and the reason<font color="#E5E5E5"> they did this</font>

90
00:03:39,160 --> 00:03:43,120
is so that the competitors could focus

91
00:03:40,720 --> 00:03:44,829
on the actual science of automated

92
00:03:43,120 --> 00:03:47,170
vulnerability detection and patching

93
00:03:44,829 --> 00:03:50,950
instead of<font color="#E5E5E5"> having to worry about obscure</font>

94
00:03:47,170 --> 00:03:53,559
Linux semantics and also the vulnerable

95
00:03:50,950 --> 00:03:56,828
programs that you had to find your bugs

96
00:03:53,560 --> 00:03:58,660
in where specifically developed for the

97
00:03:56,829 --> 00:04:01,000
grand challenge so that is that

98
00:03:58,660 --> 00:04:02,680
<font color="#E5E5E5">different companies were contracted out</font>

99
00:04:01,000 --> 00:04:05,260
to make special purpose vulnerable

100
00:04:02,680 --> 00:04:07,030
programs and these weren't just like toy

101
00:04:05,260 --> 00:04:09,280
trivial applications some of these had

102
00:04:07,030 --> 00:04:12,220
really deep<font color="#E5E5E5"> and complex vulnerabilities</font>

103
00:04:09,280 --> 00:04:14,709
as an example in one of<font color="#E5E5E5"> them you had to</font>

104
00:04:12,220 --> 00:04:16,570
play a game<font color="#E5E5E5"> versus the computer you had</font>

105
00:04:14,709 --> 00:04:18,700
to win the game<font color="#CCCCCC"> and then in the high</font>

106
00:04:16,570 --> 00:04:21,159
score list you have<font color="#CCCCCC"> to overflow the name</font>

107
00:04:18,700 --> 00:04:22,510
buffer for the<font color="#E5E5E5"> first place high score so</font>

108
00:04:21,160 --> 00:04:24,780
some of these were really<font color="#CCCCCC"> really</font>

109
00:04:22,510 --> 00:04:27,219
challenging<font color="#E5E5E5"> to actually you know</font>

110
00:04:24,780 --> 00:04:29,919
identify the bug and fix<font color="#E5E5E5"> it</font>

111
00:04:27,220 --> 00:04:31,810
and as a competitor in the cyber<font color="#CCCCCC"> grand</font>

112
00:04:29,920 --> 00:04:34,060
<font color="#CCCCCC">challenge at trail of bits we built</font>

113
00:04:31,810 --> 00:04:35,890
Cyberdyne which was our automated bug

114
00:04:34,060 --> 00:04:38,080
finding system and our competitor in the

115
00:04:35,890 --> 00:04:40,840
challenge and if<font color="#E5E5E5"> that name seems</font>

116
00:04:38,080 --> 00:04:42,310
familiar to you<font color="#CCCCCC"> Cyberdyne is the evil</font>

117
00:04:40,840 --> 00:04:45,219
corporation from<font color="#CCCCCC"> The</font><font color="#E5E5E5"> Terminator</font>

118
00:04:42,310 --> 00:04:48,670
<font color="#CCCCCC">franchise that</font><font color="#E5E5E5"> creates the AI that tries</font>

119
00:04:45,220 --> 00:04:51,490
<font color="#CCCCCC">to kill all of humanity and I was the</font>

120
00:04:48,670 --> 00:04:53,200
<font color="#E5E5E5">p.i for the trail of its team meaning I</font>

121
00:04:51,490 --> 00:04:55,780
had to handle interactions with DARPA

122
00:04:53,200 --> 00:04:58,180
and I was also<font color="#E5E5E5"> in charge of the design</font>

123
00:04:55,780 --> 00:05:01,719
and<font color="#E5E5E5"> development</font><font color="#CCCCCC"> of our automated bug</font>

124
00:04:58,180 --> 00:05:03,850
finding system and so in the cyber grand

125
00:05:01,720 --> 00:05:06,820
challenge it was composed of two rounds

126
00:05:03,850 --> 00:05:09,640
<font color="#CCCCCC">a qualification round and a final</font><font color="#E5E5E5"> round</font>

127
00:05:06,820 --> 00:05:12,790
<font color="#E5E5E5">and the qualification round was held of</font>

128
00:05:09,640 --> 00:05:14,950
<font color="#E5E5E5">June of 2015 which is mostly what I'll</font>

129
00:05:12,790 --> 00:05:16,660
be talking about<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> final round is</font>

130
00:05:14,950 --> 00:05:18,340
actually going to<font color="#E5E5E5"> be held August fourth</font>

131
00:05:16,660 --> 00:05:20,260
of this year in Las<font color="#CCCCCC"> Vegas and I would</font>

132
00:05:18,340 --> 00:05:23,859
encourage everybody to go<font color="#CCCCCC"> promises to be</font>

133
00:05:20,260 --> 00:05:26,080
super interesting and so how did we<font color="#E5E5E5"> do</font>

134
00:05:23,860 --> 00:05:28,780
in the<font color="#E5E5E5"> qualification</font><font color="#CCCCCC"> round well</font><font color="#E5E5E5"> we</font>

135
00:05:26,080 --> 00:05:31,000
entered our system<font color="#E5E5E5"> and it worked pretty</font>

136
00:05:28,780 --> 00:05:33,760
well so there were three different

137
00:05:31,000 --> 00:05:35,800
categories to qualify<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the finals in</font>

138
00:05:33,760 --> 00:05:38,320
the cyber grand challenge one<font color="#E5E5E5"> of these</font>

139
00:05:35,800 --> 00:05:40,630
<font color="#CCCCCC">categories was obviously how many bugs</font>

140
00:05:38,320 --> 00:05:41,890
he found and in terms of that we

141
00:05:40,630 --> 00:05:43,570
finished second among all the

142
00:05:41,890 --> 00:05:45,669
competitors we were number two in the

143
00:05:43,570 --> 00:05:49,810
<font color="#CCCCCC">amount of bugs found which was</font><font color="#E5E5E5"> pretty</font>

144
00:05:45,669 --> 00:05:51,490
good then the next<font color="#E5E5E5"> thing you have to do</font>

145
00:05:49,810 --> 00:05:53,290
was yet to patch bug so you had to patch

146
00:05:51,490 --> 00:05:56,080
the bugs you found and still maintain

147
00:05:53,290 --> 00:05:58,210
program functionality and in terms of

148
00:05:56,080 --> 00:06:00,419
that we were fifth so we patched the

149
00:05:58,210 --> 00:06:02,940
fifth most bugs and still maintain

150
00:06:00,419 --> 00:06:06,880
functionality and our patches work

151
00:06:02,940 --> 00:06:09,100
however we didn't qualify and the reason

152
00:06:06,880 --> 00:06:11,800
<font color="#E5E5E5">we didn't qualify is because of the</font>

153
00:06:09,100 --> 00:06:14,290
third metric which is the performance<font color="#E5E5E5"> of</font>

154
00:06:11,800 --> 00:06:15,790
your patched binaries and in terms of

155
00:06:14,290 --> 00:06:18,940
the performance of your patches that is

156
00:06:15,790 --> 00:06:21,010
how fast or how slow does your patched

157
00:06:18,940 --> 00:06:22,930
application run in comparison to<font color="#CCCCCC"> the</font>

158
00:06:21,010 --> 00:06:25,270
original<font color="#E5E5E5"> and in terms of that we were</font>

159
00:06:22,930 --> 00:06:30,250
dead last not like last but like dead

160
00:06:25,270 --> 00:06:33,039
last however our<font color="#CCCCCC"> loss is your gain since</font>

161
00:06:30,250 --> 00:06:34,630
we didn't qualify I am free to<font color="#CCCCCC"> be here</font>

162
00:06:33,040 --> 00:06:37,690
and talk to<font color="#CCCCCC"> you guys about how we</font>

163
00:06:34,630 --> 00:06:39,640
designed our system and how the parts

164
00:06:37,690 --> 00:06:40,810
that worked well actually performed and

165
00:06:39,640 --> 00:06:43,180
so<font color="#E5E5E5"> I can tell you all about</font>

166
00:06:40,810 --> 00:06:44,980
out automated book finding while all the

167
00:06:43,180 --> 00:06:48,610
other<font color="#E5E5E5"> competitors are really busy</font>

168
00:06:44,980 --> 00:06:50,860
preparing for<font color="#CCCCCC"> the final so now</font><font color="#E5E5E5"> that</font>

169
00:06:48,610 --> 00:06:55,560
we've got that out of<font color="#E5E5E5"> the way let's talk</font>

170
00:06:50,860 --> 00:06:55,560
a<font color="#E5E5E5"> little bit about automated bug finding</font>

171
00:06:59,520 --> 00:07:05,289
so in this section I'm going to go over

172
00:07:02,470 --> 00:07:07,870
both the theory that<font color="#E5E5E5"> we used for our</font>

173
00:07:05,290 --> 00:07:10,120
automated<font color="#E5E5E5"> bug findings engine and some</font>

174
00:07:07,870 --> 00:07:12,250
of the practical things you have to use

175
00:07:10,120 --> 00:07:14,320
to make<font color="#CCCCCC"> it work along with</font><font color="#E5E5E5"> some</font>

176
00:07:12,250 --> 00:07:15,790
implementation thoughts and like things

177
00:07:14,320 --> 00:07:17,349
like architecture diagrams and like

178
00:07:15,790 --> 00:07:20,979
steps you should take if you're<font color="#E5E5E5"> trying</font>

179
00:07:17,350 --> 00:07:23,200
<font color="#E5E5E5">to build one of these yourself so first</font>

180
00:07:20,979 --> 00:07:26,770
a<font color="#E5E5E5"> little bit of automated vulnerability</font>

181
00:07:23,200 --> 00:07:29,200
discovery theory so step one is that<font color="#E5E5E5"> you</font>

182
00:07:26,770 --> 00:07:32,200
cannot write a tool that<font color="#E5E5E5"> is going to</font>

183
00:07:29,200 --> 00:07:34,180
find you the<font color="#CCCCCC"> bugs in just the bugs for</font>

184
00:07:32,200 --> 00:07:35,530
an arbitrary<font color="#E5E5E5"> program like it you can't</font>

185
00:07:34,180 --> 00:07:36,940
do<font color="#E5E5E5"> it you're going to run</font><font color="#CCCCCC"> into the</font>

186
00:07:35,530 --> 00:07:40,659
halting problem this is provably

187
00:07:36,940 --> 00:07:43,479
impossible so instead you have two main

188
00:07:40,660 --> 00:07:45,610
alternatives of doing bug finding your

189
00:07:43,479 --> 00:07:48,669
first alternative is that<font color="#E5E5E5"> you're going</font>

190
00:07:45,610 --> 00:07:50,740
to<font color="#E5E5E5"> over approximate so that is whatever</font>

191
00:07:48,669 --> 00:07:52,719
analysis you have that's looking at this

192
00:07:50,740 --> 00:07:54,640
program is<font color="#E5E5E5"> going to overestimate the</font>

193
00:07:52,720 --> 00:07:56,110
amount of bugs it's going<font color="#E5E5E5"> to say some</font>

194
00:07:54,640 --> 00:07:58,270
things<font color="#CCCCCC"> that are bugs which aren't really</font>

195
00:07:56,110 --> 00:08:00,460
bombs and I mean in the trivial example

196
00:07:58,270 --> 00:08:02,349
you take<font color="#CCCCCC"> a program and</font><font color="#E5E5E5"> then you say</font>

197
00:08:00,460 --> 00:08:04,150
every<font color="#E5E5E5"> statement is a bug and by</font>

198
00:08:02,350 --> 00:08:06,430
definition<font color="#E5E5E5"> you're guaranteed to find all</font>

199
00:08:04,150 --> 00:08:09,429
the bugs in it however that<font color="#E5E5E5"> wouldn't</font>

200
00:08:06,430 --> 00:08:11,950
<font color="#E5E5E5">really be very</font><font color="#CCCCCC"> useful having</font><font color="#E5E5E5"> said that</font>

201
00:08:09,430 --> 00:08:14,050
though sometimes over approximation is

202
00:08:11,950 --> 00:08:17,469
actually what you want so there are

203
00:08:14,050 --> 00:08:20,320
several analyses like points to<font color="#E5E5E5"> analysis</font>

204
00:08:17,470 --> 00:08:22,600
and alias analysis and escape analysis

205
00:08:20,320 --> 00:08:25,150
that are used in compilers and these

206
00:08:22,600 --> 00:08:26,919
make assumptions that might not

207
00:08:25,150 --> 00:08:29,650
necessarily be true for all execution

208
00:08:26,919 --> 00:08:31,690
programs but they're there to make<font color="#CCCCCC"> sure</font>

209
00:08:29,650 --> 00:08:33,280
to see if note if your compiler can do a

210
00:08:31,690 --> 00:08:36,150
certain optimization or<font color="#CCCCCC"> whether it can</font>

211
00:08:33,280 --> 00:08:38,919
so sometimes<font color="#CCCCCC"> this is really</font><font color="#E5E5E5"> useful</font>

212
00:08:36,150 --> 00:08:40,360
conversely<font color="#CCCCCC"> you can also under</font>

213
00:08:38,919 --> 00:08:44,470
approximate the amount of bugs in your

214
00:08:40,360 --> 00:08:46,060
program and the typical example of this

215
00:08:44,470 --> 00:08:48,130
is that<font color="#E5E5E5"> you're going to say that this</font>

216
00:08:46,060 --> 00:08:50,109
<font color="#E5E5E5">program doesn't have any bugs so you're</font>

217
00:08:48,130 --> 00:08:52,240
going<font color="#CCCCCC"> to a suit you're not</font><font color="#E5E5E5"> going to find</font>

218
00:08:50,110 --> 00:08:53,860
all the bugs you're going to<font color="#E5E5E5"> accept that</font>

219
00:08:52,240 --> 00:08:57,209
there's going<font color="#E5E5E5"> to be bugs in this</font><font color="#CCCCCC"> Pro</font>

220
00:08:53,860 --> 00:09:00,399
<font color="#E5E5E5">graham that you're not going to find and</font>

221
00:08:57,209 --> 00:09:02,560
virtually all of<font color="#E5E5E5"> the actual practical</font>

222
00:09:00,399 --> 00:09:05,440
like bug finding tools that you can<font color="#E5E5E5"> get</font>

223
00:09:02,560 --> 00:09:07,930
and use on real programs fall into this

224
00:09:05,440 --> 00:09:10,839
category and typically these work by

225
00:09:07,930 --> 00:09:13,149
either sampling program execution like

226
00:09:10,839 --> 00:09:15,610
running it under a debugger or but you

227
00:09:13,149 --> 00:09:17,560
know<font color="#E5E5E5"> treating the program as some kind</font>

228
00:09:15,610 --> 00:09:21,640
of formula and solving the input based

229
00:09:17,560 --> 00:09:23,890
on that<font color="#E5E5E5"> for me and so under approximate</font>

230
00:09:21,640 --> 00:09:25,750
analysis tools aren't guaranteed to find

231
00:09:23,890 --> 00:09:27,970
you anything but it's actually<font color="#E5E5E5"> more</font>

232
00:09:25,750 --> 00:09:30,070
nuanced than that so it turns<font color="#E5E5E5"> out that</font>

233
00:09:27,970 --> 00:09:31,720
different kinds and like different

234
00:09:30,070 --> 00:09:33,670
families of<font color="#E5E5E5"> under proximate analysis</font>

235
00:09:31,720 --> 00:09:36,459
tools have different what<font color="#E5E5E5"> I call</font>

236
00:09:33,670 --> 00:09:38,589
roadblocks that is conditions in the

237
00:09:36,459 --> 00:09:41,319
<font color="#E5E5E5">code that prevent the tool from being</font>

238
00:09:38,589 --> 00:09:43,570
further able to analyze the program so

239
00:09:41,320 --> 00:09:45,160
as an example<font color="#E5E5E5"> let's say if you take this</font>

240
00:09:43,570 --> 00:09:48,070
conditional where we're comparing your

241
00:09:45,160 --> 00:09:50,560
input to a static 32-bit value like this

242
00:09:48,070 --> 00:09:52,060
<font color="#E5E5E5">is really really hard for a standard um</font>

243
00:09:50,560 --> 00:09:54,550
fuzzer you're going to take two to the

244
00:09:52,060 --> 00:09:56,768
32 tries to<font color="#CCCCCC"> actually be able</font><font color="#E5E5E5"> to pass</font>

245
00:09:54,550 --> 00:09:58,810
this conditional but for<font color="#E5E5E5"> something like</font>

246
00:09:56,769 --> 00:10:00,370
<font color="#E5E5E5">a symbolic execution engine that treats</font>

247
00:09:58,810 --> 00:10:02,229
your program as a<font color="#CCCCCC"> mathematical formula</font>

248
00:10:00,370 --> 00:10:04,839
<font color="#E5E5E5">and tries</font><font color="#CCCCCC"> to solve it this</font><font color="#E5E5E5"> is a simple</font>

249
00:10:02,230 --> 00:10:06,940
fork operation you know on one side<font color="#CCCCCC"> you</font>

250
00:10:04,839 --> 00:10:08,740
have input that feel of<font color="#E5E5E5"> the end but is</font>

251
00:10:06,940 --> 00:10:10,360
equal to bad food on the other<font color="#E5E5E5"> side</font><font color="#CCCCCC"> it's</font>

252
00:10:08,740 --> 00:10:13,060
<font color="#CCCCCC">not equal to bad food and you go</font><font color="#E5E5E5"> on</font>

253
00:10:10,360 --> 00:10:14,800
through your next step conversely

254
00:10:13,060 --> 00:10:17,529
something like this where let's say

255
00:10:14,800 --> 00:10:19,870
you're<font color="#CCCCCC"> doing a cryptographic hash of two</font>

256
00:10:17,529 --> 00:10:22,149
different inputs or sorry have two parts

257
00:10:19,870 --> 00:10:23,440
of the same input this is going to be

258
00:10:22,149 --> 00:10:26,019
<font color="#E5E5E5">really hard for symbolic</font><font color="#CCCCCC"> execution</font>

259
00:10:23,440 --> 00:10:28,269
engine assuming your cryptographic hash

260
00:10:26,019 --> 00:10:31,570
is any good you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to really run</font>

261
00:10:28,269 --> 00:10:33,279
out of<font color="#E5E5E5"> CPU and memory usage before you</font>

262
00:10:31,570 --> 00:10:37,209
really do anything<font color="#CCCCCC"> useful about this</font>

263
00:10:33,279 --> 00:10:40,360
however to pass this<font color="#E5E5E5"> check a simple dumb</font>

264
00:10:37,209 --> 00:10:42,550
fuzzer just has to generate 2d words of

265
00:10:40,360 --> 00:10:44,350
the same input and like it's<font color="#E5E5E5"> probably</font>

266
00:10:42,550 --> 00:10:47,500
going to try all zeros as the very first

267
00:10:44,350 --> 00:10:49,870
thing and get by<font color="#CCCCCC"> this check however</font>

268
00:10:47,500 --> 00:10:51,610
having said that so we know that<font color="#E5E5E5"> we have</font>

269
00:10:49,870 --> 00:10:54,040
<font color="#E5E5E5">these different classes of under</font>

270
00:10:51,610 --> 00:10:56,320
<font color="#E5E5E5">approximate analysis tools and that like</font>

271
00:10:54,040 --> 00:10:58,300
we can get these tools but can we do

272
00:10:56,320 --> 00:11:00,820
better than having then you know running

273
00:10:58,300 --> 00:11:03,430
<font color="#E5E5E5">two separate things on the same program</font>

274
00:11:00,820 --> 00:11:05,140
and after<font color="#CCCCCC"> thinking about</font><font color="#E5E5E5"> this for a</font>

275
00:11:03,430 --> 00:11:06,739
while he realized that<font color="#E5E5E5"> the answer is</font><font color="#CCCCCC"> yes</font>

276
00:11:05,140 --> 00:11:08,060
so

277
00:11:06,740 --> 00:11:10,250
you have to think<font color="#CCCCCC"> about what have you</font>

278
00:11:08,060 --> 00:11:12,770
just<font color="#E5E5E5"> been talking</font><font color="#CCCCCC"> about so different</font>

279
00:11:10,250 --> 00:11:14,600
under approximate alyses tools all we

280
00:11:12,770 --> 00:11:17,240
<font color="#E5E5E5">are always conservative they don't make</font>

281
00:11:14,600 --> 00:11:19,790
any assumptions that are invalid for

282
00:11:17,240 --> 00:11:22,250
execution of the program<font color="#E5E5E5"> you know modulo</font>

283
00:11:19,790 --> 00:11:24,050
bugs and your tools and they operate

284
00:11:22,250 --> 00:11:26,930
over the same domain meaning that

285
00:11:24,050 --> 00:11:29,149
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> all analyzing the same stuff so</font>

286
00:11:26,930 --> 00:11:31,849
everything that<font color="#E5E5E5"> one tool discovers about</font>

287
00:11:29,149 --> 00:11:33,260
the program has to be true for

288
00:11:31,850 --> 00:11:35,720
everything the other tool discovers

289
00:11:33,260 --> 00:11:37,610
about your program since they only take

290
00:11:35,720 --> 00:11:40,130
truths about the program and<font color="#E5E5E5"> they're all</font>

291
00:11:37,610 --> 00:11:43,010
analyzing the same thing so instead<font color="#E5E5E5"> of</font>

292
00:11:40,130 --> 00:11:45,080
working separately what if all<font color="#CCCCCC"> of your</font>

293
00:11:43,010 --> 00:11:48,140
tools could work together and share

294
00:11:45,080 --> 00:11:51,230
discoveries and we call this concept

295
00:11:48,140 --> 00:11:53,360
analysis boosting and the name analysis

296
00:11:51,230 --> 00:11:54,380
boosting comes from the field of machine

297
00:11:53,360 --> 00:11:56,300
learning where you have something called

298
00:11:54,380 --> 00:11:58,220
classifier boosting where you have

299
00:11:56,300 --> 00:12:00,859
several<font color="#CCCCCC"> weak learners that</font><font color="#E5E5E5"> you can</font>

300
00:11:58,220 --> 00:12:03,890
combine together to create a single new

301
00:12:00,860 --> 00:12:06,410
stronger learner similarly you can take

302
00:12:03,890 --> 00:12:08,240
several weaker under approximate

303
00:12:06,410 --> 00:12:10,910
analyses and you can combine them

304
00:12:08,240 --> 00:12:13,160
together to<font color="#CCCCCC"> create</font><font color="#E5E5E5"> a single stronger</font>

305
00:12:10,910 --> 00:12:15,890
analysis that is<font color="#E5E5E5"> greater than</font><font color="#CCCCCC"> the sum of</font>

306
00:12:13,160 --> 00:12:18,680
its parts so<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is this new analysis</font>

307
00:12:15,890 --> 00:12:20,510
can combine existing stuff and solve

308
00:12:18,680 --> 00:12:24,290
<font color="#CCCCCC">problems that none of the separate</font>

309
00:12:20,510 --> 00:12:27,439
algorithms could by themselves and this

310
00:12:24,290 --> 00:12:29,899
is<font color="#CCCCCC"> useful to demonstrate as we combine</font>

311
00:12:27,440 --> 00:12:30,950
the two previous examples what if<font color="#CCCCCC"> you</font>

312
00:12:29,899 --> 00:12:33,470
have something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> uses both</font>

313
00:12:30,950 --> 00:12:36,110
conditionals<font color="#E5E5E5"> and sequence so this</font><font color="#CCCCCC"> is</font>

314
00:12:33,470 --> 00:12:38,000
something<font color="#CCCCCC"> that you cannot solve by</font>

315
00:12:36,110 --> 00:12:41,360
<font color="#E5E5E5">either of the two analysis alone but</font>

316
00:12:38,000 --> 00:12:43,459
working together you can so a symbolic

317
00:12:41,360 --> 00:12:45,890
executor would identify that you know

318
00:12:43,459 --> 00:12:53,899
down this one path you<font color="#E5E5E5"> need to have your</font>

319
00:12:45,890 --> 00:12:55,490
input equal to 0<font color="#E5E5E5"> X bad food then it</font>

320
00:12:53,899 --> 00:12:57,709
would pass this knowledge off to the

321
00:12:55,490 --> 00:12:59,899
fuzzer which would eventually probably

322
00:12:57,709 --> 00:13:01,910
duplicate its own input really quickly

323
00:12:59,899 --> 00:13:04,760
and therefore you would<font color="#E5E5E5"> be able to reach</font>

324
00:13:01,910 --> 00:13:07,130
the crashing condition and remove these

325
00:13:04,760 --> 00:13:09,110
<font color="#E5E5E5">roadblocks so each tool would be</font>

326
00:13:07,130 --> 00:13:10,730
removing roadblocks for all the other

327
00:13:09,110 --> 00:13:14,240
tools<font color="#E5E5E5"> that are combining in your</font>

328
00:13:10,730 --> 00:13:16,070
analysis however you know<font color="#E5E5E5"> all of this</font>

329
00:13:14,240 --> 00:13:18,829
theory is like really<font color="#E5E5E5"> nice to talk about</font>

330
00:13:16,070 --> 00:13:19,720
but how do you<font color="#E5E5E5"> actually apply this the</font>

331
00:13:18,829 --> 00:13:21,790
real tools

332
00:13:19,720 --> 00:13:24,069
since you aren't going to you know take

333
00:13:21,790 --> 00:13:26,620
all of these bug finding tools and then

334
00:13:24,069 --> 00:13:28,750
you know rip them open and combine their

335
00:13:26,620 --> 00:13:31,060
guts into one omni-tool like this is

336
00:13:28,750 --> 00:13:33,550
kind of a practical nobody has the time

337
00:13:31,060 --> 00:13:35,199
to rewrite everything and we certainly

338
00:13:33,550 --> 00:13:36,910
didn't<font color="#E5E5E5"> V at a small team and we were</font>

339
00:13:35,199 --> 00:13:39,819
working<font color="#E5E5E5"> in a fairly tight</font><font color="#CCCCCC"> deadline and</font>

340
00:13:36,910 --> 00:13:41,649
so we didn't have time to do this and we

341
00:13:39,819 --> 00:13:44,560
have to thought about this so what can

342
00:13:41,649 --> 00:13:46,509
<font color="#CCCCCC">we do do you know kind</font><font color="#E5E5E5"> of cheat to find</font>

343
00:13:44,560 --> 00:13:48,699
some<font color="#E5E5E5"> kind of approximation to instead</font>

344
00:13:46,509 --> 00:13:51,879
<font color="#E5E5E5">combine tools of without having to</font>

345
00:13:48,699 --> 00:13:55,389
rewrite everything and what we came up

346
00:13:51,879 --> 00:13:57,189
with<font color="#E5E5E5"> was inputs so this is kind of lame</font>

347
00:13:55,389 --> 00:13:59,490
but it actually works really well in

348
00:13:57,189 --> 00:14:01,839
practice so what happens is that

349
00:13:59,490 --> 00:14:03,910
virtually every bug fighting tool you're

350
00:14:01,839 --> 00:14:06,459
going to get is going to take<font color="#CCCCCC"> some</font>

351
00:14:03,910 --> 00:14:08,589
corpus of inputs you know like if you're

352
00:14:06,459 --> 00:14:10,508
looking at image<font color="#E5E5E5"> files going to be some</font>

353
00:14:08,589 --> 00:14:12,430
corpus of image files you're going to

354
00:14:10,509 --> 00:14:14,230
give it to this tool and this tool is

355
00:14:12,430 --> 00:14:15,819
going to do whatever it<font color="#E5E5E5"> does on them</font>

356
00:14:14,230 --> 00:14:17,949
whether it's you know run them through

357
00:14:15,819 --> 00:14:19,899
the program and<font color="#E5E5E5"> monitor execution and</font>

358
00:14:17,949 --> 00:14:22,000
then generate inputs with new coverage

359
00:14:19,899 --> 00:14:24,100
whether it's flip some bits in them and

360
00:14:22,000 --> 00:14:25,959
generate you more stuff or whether it's

361
00:14:24,100 --> 00:14:28,149
just read from<font color="#E5E5E5"> W random and like pipe</font>

362
00:14:25,959 --> 00:14:29,768
your random stream so all of these<font color="#E5E5E5"> are</font>

363
00:14:28,149 --> 00:14:31,480
<font color="#E5E5E5">going to take some cognitive inputs</font>

364
00:14:29,769 --> 00:14:33,250
they're going<font color="#E5E5E5"> to do some kind of</font>

365
00:14:31,480 --> 00:14:35,110
processing<font color="#E5E5E5"> on them and then they're</font>

366
00:14:33,250 --> 00:14:37,809
going<font color="#E5E5E5"> to generate another set and then</font>

367
00:14:35,110 --> 00:14:40,689
if you take<font color="#CCCCCC"> that set you can use it in a</font>

368
00:14:37,809 --> 00:14:43,420
feedback<font color="#CCCCCC"> loop and this is easiest to</font>

369
00:14:40,689 --> 00:14:46,689
show with a knife's diagram so you would

370
00:14:43,420 --> 00:14:49,089
start off with some set or corpus of

371
00:14:46,689 --> 00:14:52,059
inputs for your target<font color="#E5E5E5"> this could be</font><font color="#CCCCCC"> the</font>

372
00:14:49,089 --> 00:14:55,959
<font color="#CCCCCC">null set and then you would pass</font><font color="#E5E5E5"> the set</font>

373
00:14:52,059 --> 00:14:57,339
of inputs on to a<font color="#E5E5E5"> set of analyses which</font>

374
00:14:55,959 --> 00:14:59,709
don't have to know anything about<font color="#E5E5E5"> each</font>

375
00:14:57,339 --> 00:15:01,569
other and<font color="#E5E5E5"> this can in fact could be like</font>

376
00:14:59,709 --> 00:15:03,670
off-the-shelf stuff that you're using

377
00:15:01,569 --> 00:15:05,349
and this is going to do a bunch of

378
00:15:03,670 --> 00:15:08,559
process saying it's going<font color="#E5E5E5"> to do whatever</font>

379
00:15:05,350 --> 00:15:11,139
<font color="#E5E5E5">they do it's going to produce new inputs</font>

380
00:15:08,559 --> 00:15:13,209
and then when you<font color="#CCCCCC"> have these new inputs</font>

381
00:15:11,139 --> 00:15:15,730
you are going<font color="#E5E5E5"> to merge them together and</font>

382
00:15:13,209 --> 00:15:18,040
put it back in the start creating a

383
00:15:15,730 --> 00:15:20,559
virtuous cycle that combines the

384
00:15:18,040 --> 00:15:24,029
separate analyses into a hole that<font color="#E5E5E5"> is</font>

385
00:15:20,559 --> 00:15:24,029
more than<font color="#CCCCCC"> the sum of its parts</font>

386
00:15:29,670 --> 00:15:35,349
and this is effectively<font color="#E5E5E5"> what we did so</font>

387
00:15:33,579 --> 00:15:37,529
what we ended up doing<font color="#E5E5E5"> was we combined</font>

388
00:15:35,350 --> 00:15:40,480
two different symbolic execution engines

389
00:15:37,529 --> 00:15:43,360
one of which was<font color="#CCCCCC"> Klee which is a</font>

390
00:15:40,480 --> 00:15:46,269
symbolic execution engine for<font color="#CCCCCC"> llvm bit</font>

391
00:15:43,360 --> 00:15:48,430
code and one of which was Pais mmu which

392
00:15:46,269 --> 00:15:51,760
is a python-based x86 symbolic execution

393
00:15:48,430 --> 00:15:54,099
engine and we took<font color="#E5E5E5"> these two symbolic</font>

394
00:15:51,760 --> 00:15:57,339
execution engines and we combined them

395
00:15:54,100 --> 00:15:58,779
with a custom written buzzer it's really

396
00:15:57,339 --> 00:16:00,490
awesome i could give like a whole hour

397
00:15:58,779 --> 00:16:02,589
<font color="#E5E5E5">talk just talking about this thing but</font>

398
00:16:00,490 --> 00:16:05,320
effectively uses dynamic binary

399
00:16:02,589 --> 00:16:07,899
translation to really really reduce

400
00:16:05,320 --> 00:16:10,209
fuzzing latency and generate a lot of

401
00:16:07,899 --> 00:16:12,550
throughput and also gives<font color="#E5E5E5"> you free code</font>

402
00:16:10,209 --> 00:16:14,619
coverage and can take<font color="#E5E5E5"> in like snapshots</font>

403
00:16:12,550 --> 00:16:16,719
generated by symbolic execution tools

404
00:16:14,620 --> 00:16:18,070
and pass them around for like<font color="#CCCCCC"> freaking</font>

405
00:16:16,720 --> 00:16:19,690
colic execution like this thing is

406
00:16:18,070 --> 00:16:22,209
really cool<font color="#E5E5E5"> but I don't want to get</font><font color="#CCCCCC"> too</font>

407
00:16:19,690 --> 00:16:25,029
distracted and so<font color="#CCCCCC"> we took these three</font>

408
00:16:22,209 --> 00:16:28,060
bug finding tools and when we generate

409
00:16:25,029 --> 00:16:29,589
their inputs we combine<font color="#CCCCCC"> everything that</font>

410
00:16:28,060 --> 00:16:31,768
they generate via something called min

411
00:16:29,589 --> 00:16:34,269
<font color="#CCCCCC">sac and the mint set is</font><font color="#E5E5E5"> really key for</font>

412
00:16:31,769 --> 00:16:35,860
doing this in practice<font color="#E5E5E5"> so while</font>

413
00:16:34,269 --> 00:16:37,510
theoretically you don't have to do this

414
00:16:35,860 --> 00:16:39,220
if you want things<font color="#E5E5E5"> to work practically</font>

415
00:16:37,510 --> 00:16:41,199
you do is you take all of those

416
00:16:39,220 --> 00:16:43,889
generated outputs that every tool does

417
00:16:41,199 --> 00:16:46,449
and you have to minimize that set and

418
00:16:43,889 --> 00:16:49,540
the<font color="#E5E5E5"> reason you have</font><font color="#CCCCCC"> to minimize that set</font>

419
00:16:46,449 --> 00:16:51,849
is because you<font color="#CCCCCC"> have some tools that are</font>

420
00:16:49,540 --> 00:16:54,189
like a<font color="#E5E5E5"> really fast and efficient buzzer</font>

421
00:16:51,850 --> 00:16:57,040
that's<font color="#E5E5E5"> going to generate a huge amount</font>

422
00:16:54,190 --> 00:16:59,040
of<font color="#E5E5E5"> potential inputs however a lot of</font>

423
00:16:57,040 --> 00:17:01,029
<font color="#E5E5E5">those inputs are really going to be</font>

424
00:16:59,040 --> 00:17:03,459
potentially useless because they're not

425
00:17:01,029 --> 00:17:05,799
going to<font color="#CCCCCC"> give you any new coverage for</font>

426
00:17:03,459 --> 00:17:07,530
whatever your coverage metric is and if

427
00:17:05,799 --> 00:17:09,790
you have slower running tools like a

428
00:17:07,530 --> 00:17:11,649
symbolic execution engine of some kind

429
00:17:09,790 --> 00:17:14,500
you're effectively going to slow that

430
00:17:11,650 --> 00:17:17,380
down having to process all<font color="#CCCCCC"> of these</font>

431
00:17:14,500 --> 00:17:19,809
useless inputs so instead you need some

432
00:17:17,380 --> 00:17:24,220
way to minimize your input set at that

433
00:17:19,809 --> 00:17:26,709
merge point and this<font color="#E5E5E5"> thing needs to be</font>

434
00:17:24,220 --> 00:17:29,799
fast and<font color="#E5E5E5"> it needs to be able to compare</font>

435
00:17:26,709 --> 00:17:31,179
coverage and so we used code coverage

436
00:17:29,799 --> 00:17:33,280
because it was the easiest<font color="#E5E5E5"> and the</font>

437
00:17:31,179 --> 00:17:34,690
simplest metric but code cup but

438
00:17:33,280 --> 00:17:36,940
coverage doesn't necessarily have to be

439
00:17:34,690 --> 00:17:39,549
code coverage it could be you know

440
00:17:36,940 --> 00:17:41,120
branch coverage or it could be path

441
00:17:39,549 --> 00:17:42,650
coverage or it could<font color="#CCCCCC"> be</font>

442
00:17:41,120 --> 00:17:44,270
you know if you depending what kind of

443
00:17:42,650 --> 00:17:46,190
instrumentation you can get maybe you're

444
00:17:44,270 --> 00:17:48,350
only looking after a certain memory

445
00:17:46,190 --> 00:17:50,330
value and you want to have something

446
00:17:48,350 --> 00:17:51,469
that checks<font color="#E5E5E5"> the range that value can</font>

447
00:17:50,330 --> 00:17:55,129
take and that's<font color="#E5E5E5"> you're going to be your</font>

448
00:17:51,470 --> 00:17:57,380
coverage metric and the most important

449
00:17:55,130 --> 00:17:59,540
part is that this doesn't<font color="#E5E5E5"> have to be</font>

450
00:17:57,380 --> 00:18:02,210
perfect you don't have to maintain a

451
00:17:59,540 --> 00:18:04,700
perfectly minimal set so remember the

452
00:18:02,210 --> 00:18:06,500
goal of this is to reduce the overall

453
00:18:04,700 --> 00:18:09,980
amount<font color="#E5E5E5"> of work that all</font><font color="#CCCCCC"> of your tools</font>

454
00:18:06,500 --> 00:18:11,270
are going to do and so just<font color="#CCCCCC"> you want to</font>

455
00:18:09,980 --> 00:18:12,890
minimize it to the absolute perfection

456
00:18:11,270 --> 00:18:15,889
you can just minimize it enough it's

457
00:18:12,890 --> 00:18:17,330
<font color="#CCCCCC">okay to have things</font><font color="#E5E5E5"> that have the same</font>

458
00:18:15,890 --> 00:18:19,400
<font color="#E5E5E5">coverage as long as you don't miss</font>

459
00:18:17,330 --> 00:18:21,050
anything and what this enables you to do

460
00:18:19,400 --> 00:18:23,330
is let's say instead of using a

461
00:18:21,050 --> 00:18:24,919
cryptographic hash or something<font color="#E5E5E5"> really</font>

462
00:18:23,330 --> 00:18:28,070
complex to measure code coverage which

463
00:18:24,920 --> 00:18:30,440
is an enormous bitmap you can use a much

464
00:18:28,070 --> 00:18:32,149
smaller<font color="#E5E5E5"> and much faster imperfect hash</font>

465
00:18:30,440 --> 00:18:34,460
and you can also use<font color="#E5E5E5"> things like</font>

466
00:18:32,150 --> 00:18:36,200
probabilistic data structures since as

467
00:18:34,460 --> 00:18:38,179
long as you can measure membership in

468
00:18:36,200 --> 00:18:39,440
the set you're probably going<font color="#CCCCCC"> to be okay</font>

469
00:18:38,179 --> 00:18:43,610
and you don't have<font color="#E5E5E5"> to be super right</font>

470
00:18:39,440 --> 00:18:46,010
about it so having talked about like the

471
00:18:43,610 --> 00:18:48,500
theory of how this<font color="#E5E5E5"> works and some</font>

472
00:18:46,010 --> 00:18:50,510
diagrams I was going to<font color="#CCCCCC"> next talk to you</font>

473
00:18:48,500 --> 00:18:52,730
about how you would actually build

474
00:18:50,510 --> 00:18:54,830
something<font color="#E5E5E5"> like this and in which order</font>

475
00:18:52,730 --> 00:18:57,140
you would build this include like some

476
00:18:54,830 --> 00:18:59,480
really<font color="#E5E5E5"> basic architecture diagrams of</font>

477
00:18:57,140 --> 00:19:01,580
what pieces go into this thing which

478
00:18:59,480 --> 00:19:02,510
ones you can get off the shelf and what

479
00:19:01,580 --> 00:19:08,419
you're going to have to write by

480
00:19:02,510 --> 00:19:11,929
yourself so in general<font color="#CCCCCC"> in this talk I've</font>

481
00:19:08,420 --> 00:19:13,670
avoided discussing the long struggles we

482
00:19:11,929 --> 00:19:14,870
had developing this which is very

483
00:19:13,670 --> 00:19:16,790
entertaining and<font color="#E5E5E5"> interesting in its own</font>

484
00:19:14,870 --> 00:19:19,070
right but<font color="#E5E5E5"> I'll mention it in this one</font>

485
00:19:16,790 --> 00:19:21,830
case<font color="#E5E5E5"> and that most of the steps that</font>

486
00:19:19,070 --> 00:19:24,080
you're<font color="#E5E5E5"> going to see</font><font color="#CCCCCC"> here are are going</font>

487
00:19:21,830 --> 00:19:26,210
to appear in the exact opposite order in

488
00:19:24,080 --> 00:19:27,439
which we did them<font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> for</font>

489
00:19:26,210 --> 00:19:28,760
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is because the way we</font><font color="#CCCCCC"> did them</font>

490
00:19:27,440 --> 00:19:30,200
originally was really wrong you

491
00:19:28,760 --> 00:19:33,730
<font color="#E5E5E5">shouldn't do</font><font color="#CCCCCC"> that so learn from our</font>

492
00:19:30,200 --> 00:19:37,130
mistakes and do it this way instead ah

493
00:19:33,730 --> 00:19:40,070
so step one step one is you're going to

494
00:19:37,130 --> 00:19:41,270
<font color="#E5E5E5">find some analyses</font><font color="#CCCCCC"> to combine and what</font>

495
00:19:40,070 --> 00:19:43,340
you're going to do here is you're<font color="#E5E5E5"> going</font>

496
00:19:41,270 --> 00:19:45,770
<font color="#E5E5E5">to find different existing off-the-shelf</font>

497
00:19:43,340 --> 00:19:48,050
tools and I would recommend<font color="#E5E5E5"> combining</font>

498
00:19:45,770 --> 00:19:49,280
things that have<font color="#E5E5E5"> different properties so</font>

499
00:19:48,050 --> 00:19:51,860
like you maybe you're going<font color="#E5E5E5"> to get a</font>

500
00:19:49,280 --> 00:19:53,750
dumb fuzzer that just tries random bytes

501
00:19:51,860 --> 00:19:54,530
or has some kind<font color="#E5E5E5"> of intelligent mutation</font>

502
00:19:53,750 --> 00:19:58,460
like your<font color="#E5E5E5"> atoms</font>

503
00:19:54,530 --> 00:20:00,230
uh take a smart fuzzer like<font color="#E5E5E5"> a FF and</font>

504
00:19:58,460 --> 00:20:02,840
then like<font color="#CCCCCC"> a symbolic execution engine</font>

505
00:20:00,230 --> 00:20:04,760
such as<font color="#E5E5E5"> CLE pie some mu or something</font>

506
00:20:02,840 --> 00:20:06,260
<font color="#E5E5E5">from like the anger project or like</font><font color="#CCCCCC"> lib</font>

507
00:20:04,760 --> 00:20:07,220
<font color="#CCCCCC">backs or something there's a</font><font color="#E5E5E5"> lot of</font>

508
00:20:06,260 --> 00:20:08,900
these<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> available that you can</font>

509
00:20:07,220 --> 00:20:12,230
just<font color="#E5E5E5"> get especially</font><font color="#CCCCCC"> if you're targeting</font>

510
00:20:08,900 --> 00:20:14,240
a common operating system and after you

511
00:20:12,230 --> 00:20:16,790
know what you are combining you should

512
00:20:14,240 --> 00:20:19,250
take your tools and<font color="#E5E5E5"> you should wrap them</font>

513
00:20:16,790 --> 00:20:21,590
in some<font color="#CCCCCC"> kind of manager script and this</font>

514
00:20:19,250 --> 00:20:24,020
script this has two purposes number one

515
00:20:21,590 --> 00:20:26,300
this script is going to provide a common

516
00:20:24,020 --> 00:20:29,180
interface for plugging tools in and out

517
00:20:26,300 --> 00:20:31,070
<font color="#E5E5E5">of your analysis boosting engine so this</font>

518
00:20:29,180 --> 00:20:34,010
means that it's going to abstract away

519
00:20:31,070 --> 00:20:36,800
<font color="#E5E5E5">absolutely everything as taking some set</font>

520
00:20:34,010 --> 00:20:38,480
of inputs and then doing stuff to it and

521
00:20:36,800 --> 00:20:40,970
then sending back some set of outputs

522
00:20:38,480 --> 00:20:42,350
the second thing it's going to do is

523
00:20:40,970 --> 00:20:45,620
it's going<font color="#E5E5E5"> to do housekeeping and</font>

524
00:20:42,350 --> 00:20:47,449
resource control and the reason you need

525
00:20:45,620 --> 00:20:49,969
this is because you<font color="#CCCCCC"> are going to have</font>

526
00:20:47,450 --> 00:20:51,470
stuff that pegs all of your cpu's at<font color="#E5E5E5"> a</font>

527
00:20:49,970 --> 00:20:52,670
<font color="#E5E5E5">hundred</font><font color="#CCCCCC"> percent you're going to have</font>

528
00:20:51,470 --> 00:20:54,770
<font color="#E5E5E5">something that eats up all of your</font>

529
00:20:52,670 --> 00:20:55,910
memory and then the<font color="#CCCCCC"> Linux killer is</font>

530
00:20:54,770 --> 00:20:58,040
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to start killing your random</font>

531
00:20:55,910 --> 00:21:00,470
processes you're going to fill<font color="#CCCCCC"> up your</font>

532
00:20:58,040 --> 00:21:02,540
disk and you want<font color="#E5E5E5"> something that</font>

533
00:21:00,470 --> 00:21:04,040
actually managed these these situations

534
00:21:02,540 --> 00:21:05,720
<font color="#E5E5E5">instead of letting them run out of</font>

535
00:21:04,040 --> 00:21:07,250
control especially<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

536
00:21:05,720 --> 00:21:09,110
<font color="#E5E5E5">have more than one analysis running in</font>

537
00:21:07,250 --> 00:21:10,640
the same machine you're also<font color="#E5E5E5"> going to do</font>

538
00:21:09,110 --> 00:21:12,350
like resource control and starvation

539
00:21:10,640 --> 00:21:14,990
issues but like that gets kind<font color="#E5E5E5"> of</font>

540
00:21:12,350 --> 00:21:16,909
complicated and after you write these

541
00:21:14,990 --> 00:21:17,840
scripts and you have your tools what

542
00:21:16,910 --> 00:21:19,730
you're going to do is you're going to

543
00:21:17,840 --> 00:21:21,230
<font color="#E5E5E5">write tests for them and like this is</font>

544
00:21:19,730 --> 00:21:23,690
really important<font color="#E5E5E5"> and we didn't do this</font>

545
00:21:21,230 --> 00:21:26,030
and this was a huge mistake because you

546
00:21:23,690 --> 00:21:28,040
know figuring out what went<font color="#CCCCCC"> wrong</font>

547
00:21:26,030 --> 00:21:29,570
because<font color="#E5E5E5"> you can't get to your box since</font>

548
00:21:28,040 --> 00:21:31,129
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> disk is full and it's out of memory</font>

549
00:21:29,570 --> 00:21:33,379
is really difficult and it's much<font color="#E5E5E5"> easier</font>

550
00:21:31,130 --> 00:21:34,910
to<font color="#CCCCCC"> figure this out at this</font><font color="#E5E5E5"> point before</font>

551
00:21:33,380 --> 00:21:36,380
you have a large distributed system

552
00:21:34,910 --> 00:21:39,440
where you<font color="#CCCCCC"> have to try to</font><font color="#E5E5E5"> SSH into</font>

553
00:21:36,380 --> 00:21:42,230
something and after you write<font color="#E5E5E5"> your tests</font>

554
00:21:39,440 --> 00:21:44,390
you're going to set up some kind of

555
00:21:42,230 --> 00:21:48,260
shared resources between all of your

556
00:21:44,390 --> 00:21:50,990
components and this is<font color="#CCCCCC"> necessary for two</font>

557
00:21:48,260 --> 00:21:53,780
reasons one is that it's going to<font color="#E5E5E5"> be a</font>

558
00:21:50,990 --> 00:21:55,700
<font color="#E5E5E5">great place to shove in your statistics</font>

559
00:21:53,780 --> 00:21:57,350
and performance monitoring engine and

560
00:21:55,700 --> 00:22:00,020
like other metrics stuff that you're

561
00:21:57,350 --> 00:22:01,280
going<font color="#E5E5E5"> to do later and also</font><font color="#CCCCCC"> having a</font>

562
00:22:00,020 --> 00:22:03,500
synchronous communication between

563
00:22:01,280 --> 00:22:05,600
<font color="#CCCCCC">everything prevents you from waiting</font><font color="#E5E5E5"> for</font>

564
00:22:03,500 --> 00:22:08,120
the slowest tool and like your slowest

565
00:22:05,600 --> 00:22:09,469
tool is going to be<font color="#E5E5E5"> really slow</font><font color="#CCCCCC"> so</font>

566
00:22:08,120 --> 00:22:11,689
you want to be<font color="#CCCCCC"> able to use new</font>

567
00:22:09,470 --> 00:22:12,920
information as you<font color="#E5E5E5"> get it and so to do</font>

568
00:22:11,690 --> 00:22:14,390
this you're<font color="#E5E5E5"> going to want some kind of</font>

569
00:22:12,920 --> 00:22:16,520
message queue and some kind of

570
00:22:14,390 --> 00:22:17,930
distributed storage and like<font color="#E5E5E5"> this</font>

571
00:22:16,520 --> 00:22:20,150
<font color="#E5E5E5">doesn't have to be complicated like this</font>

572
00:22:17,930 --> 00:22:22,280
is all stuff that you can just<font color="#E5E5E5"> get for</font>

573
00:22:20,150 --> 00:22:25,100
Linux like your<font color="#E5E5E5"> message queue can be</font>

574
00:22:22,280 --> 00:22:26,690
like zeromq or rabbit or reduce or like

575
00:22:25,100 --> 00:22:28,879
a thousand other like open source

576
00:22:26,690 --> 00:22:30,980
message queues and<font color="#E5E5E5"> your distributed</font>

577
00:22:28,880 --> 00:22:33,290
storage can be as simple as a shared

578
00:22:30,980 --> 00:22:35,060
folder or like an NFS mount this<font color="#E5E5E5"> doesn't</font>

579
00:22:33,290 --> 00:22:36,440
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> be complicated stuff and this</font>

580
00:22:35,060 --> 00:22:38,300
definitely should not be something<font color="#E5E5E5"> at</font>

581
00:22:36,440 --> 00:22:40,370
your writing from scratch<font color="#E5E5E5"> just get off</font>

582
00:22:38,300 --> 00:22:44,060
the shelf stuff and make your scripts

583
00:22:40,370 --> 00:22:46,520
talk to it and after you've got that you

584
00:22:44,060 --> 00:22:48,590
are going to plug in your men set and as

585
00:22:46,520 --> 00:22:51,020
a reminder your men's set is going to be

586
00:22:48,590 --> 00:22:52,760
the thing that minimizes the set of

587
00:22:51,020 --> 00:22:54,920
inputs that all of these tools generate

588
00:22:52,760 --> 00:22:58,070
so that you can operate an efficient

589
00:22:54,920 --> 00:22:59,780
manner and this thing<font color="#CCCCCC"> is going to listen</font>

590
00:22:58,070 --> 00:23:01,909
<font color="#E5E5E5">in this message queue and look at this</font>

591
00:22:59,780 --> 00:23:03,500
distributed storage system it's going to

592
00:23:01,910 --> 00:23:06,380
<font color="#E5E5E5">wait until something has an output and</font>

593
00:23:03,500 --> 00:23:09,500
it's going to maintain<font color="#E5E5E5"> a corpus of stuff</font>

594
00:23:06,380 --> 00:23:10,640
that has the minimal the maximal code

595
00:23:09,500 --> 00:23:13,640
coverage for the<font color="#E5E5E5"> minimum</font><font color="#CCCCCC"> amount of</font>

596
00:23:10,640 --> 00:23:15,620
inputs and finally after you do that

597
00:23:13,640 --> 00:23:17,810
you're going<font color="#E5E5E5"> to write some more tests</font>

598
00:23:15,620 --> 00:23:19,280
<font color="#E5E5E5">and this is also sounds boring but this</font>

599
00:23:17,810 --> 00:23:20,960
is really important<font color="#CCCCCC"> to do it at this</font>

600
00:23:19,280 --> 00:23:22,760
point<font color="#E5E5E5"> because it's going to be much</font>

601
00:23:20,960 --> 00:23:24,620
harder later and you're going<font color="#E5E5E5"> to make</font>

602
00:23:22,760 --> 00:23:26,390
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that like your mince it actually</font>

603
00:23:24,620 --> 00:23:29,090
works that it can<font color="#CCCCCC"> handle the load</font>

604
00:23:26,390 --> 00:23:30,950
generated with all of your tools that

605
00:23:29,090 --> 00:23:32,149
you can<font color="#E5E5E5"> actually use this distributed</font>

606
00:23:30,950 --> 00:23:33,770
communication infrastructure in it

607
00:23:32,150 --> 00:23:35,720
doesn't fall over when it has a high

608
00:23:33,770 --> 00:23:37,340
amount of messages and that like your

609
00:23:35,720 --> 00:23:40,100
resource control prevents it from being

610
00:23:37,340 --> 00:23:42,020
saturated so like all<font color="#E5E5E5"> of like stupid but</font>

611
00:23:40,100 --> 00:23:44,719
really important stuff before you<font color="#E5E5E5"> deploy</font>

612
00:23:42,020 --> 00:23:46,879
this in practice<font color="#E5E5E5"> and after you've done</font>

613
00:23:44,720 --> 00:23:49,130
that you're<font color="#CCCCCC"> going to add some monitoring</font>

614
00:23:46,880 --> 00:23:50,900
and statistics infrastructure and you

615
00:23:49,130 --> 00:23:53,390
probably already wrote this doing<font color="#E5E5E5"> your</font>

616
00:23:50,900 --> 00:23:55,160
tests but in case<font color="#CCCCCC"> you didn't like this</font>

617
00:23:53,390 --> 00:23:57,530
is the thing<font color="#CCCCCC"> that is going to tell you</font>

618
00:23:55,160 --> 00:23:59,150
like how<font color="#E5E5E5"> many bugs you're finding is the</font>

619
00:23:57,530 --> 00:24:02,450
<font color="#E5E5E5">amount of coverage you</font><font color="#CCCCCC"> have growing</font><font color="#E5E5E5"> or</font>

620
00:23:59,150 --> 00:24:04,430
staying steady how many new inputs is

621
00:24:02,450 --> 00:24:06,170
each tool produced how much<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

622
00:24:04,430 --> 00:24:08,720
program has<font color="#CCCCCC"> been covered</font><font color="#E5E5E5"> by all of the</font>

623
00:24:06,170 --> 00:24:10,400
tools under operation and things like

624
00:24:08,720 --> 00:24:11,900
that<font color="#E5E5E5"> and in addition it's going to make</font>

625
00:24:10,400 --> 00:24:15,290
this a lot easier when you're going<font color="#E5E5E5"> to</font>

626
00:24:11,900 --> 00:24:17,420
distribute stuff and so also in the

627
00:24:15,290 --> 00:24:19,580
slide you notice<font color="#CCCCCC"> that there's some blue</font>

628
00:24:17,420 --> 00:24:21,290
and there's some orange so the orange

629
00:24:19,580 --> 00:24:21,740
<font color="#E5E5E5">stuff is things you can get off the</font>

630
00:24:21,290 --> 00:24:23,840
shelf

631
00:24:21,740 --> 00:24:25,309
so you don't have to write yourself the

632
00:24:23,840 --> 00:24:27,770
blue stuff is stuff that you're probably

633
00:24:25,309 --> 00:24:29,450
going to write from scratch and so once

634
00:24:27,770 --> 00:24:31,639
you<font color="#CCCCCC"> have this and you have this tested</font>

635
00:24:29,450 --> 00:24:32,960
<font color="#CCCCCC">and working</font><font color="#E5E5E5"> on a single machine what</font>

636
00:24:31,640 --> 00:24:36,320
you're going to do is you're going to

637
00:24:32,960 --> 00:24:38,480
<font color="#CCCCCC">take your favorite automation engine</font>

638
00:24:36,320 --> 00:24:40,550
such as you know ansible or chef or

639
00:24:38,480 --> 00:24:42,220
puppet and then<font color="#CCCCCC"> you're going to</font><font color="#E5E5E5"> make it</font>

640
00:24:40,550 --> 00:24:44,600
automatically create one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these boxes</font>

641
00:24:42,220 --> 00:24:46,490
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then you're going to be able to</font>

642
00:24:44,600 --> 00:24:48,709
distribute it across a lot<font color="#E5E5E5"> of stuff and</font>

643
00:24:46,490 --> 00:24:50,480
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> through out a control and</font>

644
00:24:48,710 --> 00:24:52,940
provisioning thing that's going to<font color="#E5E5E5"> plug</font>

645
00:24:50,480 --> 00:24:55,160
in that statistics engine you just made

646
00:24:52,940 --> 00:24:57,320
and create like this awesome dashboard

647
00:24:55,160 --> 00:24:59,809
that shows you number one<font color="#E5E5E5"> your global</font>

648
00:24:57,320 --> 00:25:01,730
state and number to your local state of

649
00:24:59,809 --> 00:25:03,230
how each thing is doing so you can do

650
00:25:01,730 --> 00:25:05,690
<font color="#CCCCCC">the same thing you did before but on a</font>

651
00:25:03,230 --> 00:25:07,670
global level and in additionally you're

652
00:25:05,690 --> 00:25:10,309
going to find<font color="#CCCCCC"> some way to take your</font>

653
00:25:07,670 --> 00:25:17,030
input set partition it and see<font color="#CCCCCC"> how</font>

654
00:25:10,309 --> 00:25:18,710
you're all doing and as a reference this

655
00:25:17,030 --> 00:25:20,629
is<font color="#E5E5E5"> the part that you should do last and</font>

656
00:25:18,710 --> 00:25:29,990
not first otherwise<font color="#E5E5E5"> things are going to</font>

657
00:25:20,630 --> 00:25:32,059
and poorly so<font color="#E5E5E5"> having said that we talked</font>

658
00:25:29,990 --> 00:25:34,670
a lot about building this system<font color="#CCCCCC"> and how</font>

659
00:25:32,059 --> 00:25:39,800
it works<font color="#E5E5E5"> and like how to engineer it but</font>

660
00:25:34,670 --> 00:25:44,030
how well does it actually work so i have

661
00:25:39,800 --> 00:25:46,700
my obligatory AFL comparison slide and I

662
00:25:44,030 --> 00:25:50,030
will preface the slide with I really

663
00:25:46,700 --> 00:25:51,980
hate having the slide here<font color="#E5E5E5"> but every</font>

664
00:25:50,030 --> 00:25:54,050
time I give a practice talk the first

665
00:25:51,980 --> 00:25:56,360
<font color="#E5E5E5">question that always get is so how does</font>

666
00:25:54,050 --> 00:25:57,320
<font color="#E5E5E5">this compare to AFL so I have to have</font>

667
00:25:56,360 --> 00:26:00,709
<font color="#CCCCCC">this enough to have this long</font>

668
00:25:57,320 --> 00:26:02,030
explanation about why it's here so the

669
00:26:00,710 --> 00:26:04,730
reason I hate<font color="#E5E5E5"> the slide is twofold</font>

670
00:26:02,030 --> 00:26:06,379
number one is that<font color="#E5E5E5"> the whole point of</font>

671
00:26:04,730 --> 00:26:08,990
analysis boosting is that you're not

672
00:26:06,380 --> 00:26:12,110
having an<font color="#CCCCCC"> either/or situation where you</font>

673
00:26:08,990 --> 00:26:14,420
have to take one thing and you have to

674
00:26:12,110 --> 00:26:17,750
<font color="#E5E5E5">use that or the other thing you</font><font color="#CCCCCC"> can use</font>

675
00:26:14,420 --> 00:26:19,640
AFL as a part of an analysis boosting

676
00:26:17,750 --> 00:26:22,220
system so you don't have to pick<font color="#CCCCCC"> one you</font>

677
00:26:19,640 --> 00:26:23,990
can just use<font color="#E5E5E5"> both the second part that I</font>

678
00:26:22,220 --> 00:26:26,150
don't like about this slide is that<font color="#E5E5E5"> this</font>

679
00:26:23,990 --> 00:26:29,420
<font color="#CCCCCC">is not an apples-to-apples comparison</font>

680
00:26:26,150 --> 00:26:32,140
and benchmarking is really hard so the

681
00:26:29,420 --> 00:26:35,149
numbers that<font color="#E5E5E5"> I have for our stuff is</font>

682
00:26:32,140 --> 00:26:37,309
things that<font color="#CCCCCC"> we measured using the same</font>

683
00:26:35,149 --> 00:26:41,029
sources for the same period<font color="#CCCCCC"> of</font><font color="#E5E5E5"> time the</font>

684
00:26:37,309 --> 00:26:42,739
AFL information we have is for<font color="#CCCCCC"> it's from</font>

685
00:26:41,029 --> 00:26:44,629
a paper called driller it was an i

686
00:26:42,739 --> 00:26:46,159
triple e security and privacy by one of

687
00:26:44,629 --> 00:26:48,019
the other cyber grand challenge teams

688
00:26:46,159 --> 00:26:51,289
and they did like<font color="#E5E5E5"> the really hard work</font>

689
00:26:48,019 --> 00:26:53,179
of properly using<font color="#CCCCCC"> AFL for this Linux</font>

690
00:26:51,289 --> 00:26:55,789
like operating<font color="#E5E5E5"> system and like writing</font>

691
00:26:53,179 --> 00:26:58,249
<font color="#CCCCCC">there and hooking in like the Q mu</font><font color="#E5E5E5"> based</font>

692
00:26:55,789 --> 00:27:00,679
engine of it and like they did their own

693
00:26:58,249 --> 00:27:02,479
measurements but even<font color="#CCCCCC"> though it was on</font>

694
00:27:00,679 --> 00:27:03,919
the same set of binaries I don't know

695
00:27:02,479 --> 00:27:05,779
what the resource constraints were like

696
00:27:03,919 --> 00:27:07,999
so maybe this comparison is actually

697
00:27:05,779 --> 00:27:09,649
really unfair to<font color="#E5E5E5"> AFL or maybe through</font>

698
00:27:07,999 --> 00:27:11,779
the unfair to us since<font color="#E5E5E5"> I don't know for</font>

699
00:27:09,649 --> 00:27:13,689
how long each thing ran and what kind<font color="#E5E5E5"> of</font>

700
00:27:11,779 --> 00:27:16,399
resources they had available<font color="#E5E5E5"> to them</font>

701
00:27:13,690 --> 00:27:18,169
however the reason they still keep the

702
00:27:16,399 --> 00:27:20,119
slide here<font color="#CCCCCC"> other than inevitably having</font>

703
00:27:18,169 --> 00:27:22,159
to answer this anyway is<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> shows</font>

704
00:27:20,119 --> 00:27:25,218
one awesome thing and that is that

705
00:27:22,159 --> 00:27:27,080
analysis boosting really works so if you

706
00:27:25,219 --> 00:27:29,599
look at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> top you have the three gray</font>

707
00:27:27,080 --> 00:27:32,960
bars the three gray bars at<font color="#CCCCCC"> the very top</font>

708
00:27:29,599 --> 00:27:35,749
is how well each one of our tools found

709
00:27:32,960 --> 00:27:39,259
bugs by itself then<font color="#E5E5E5"> the next bar below</font>

710
00:27:35,749 --> 00:27:40,909
that at 65 is if you took the union<font color="#E5E5E5"> of</font>

711
00:27:39,259 --> 00:27:42,649
all of those if took the union<font color="#E5E5E5"> of all</font>

712
00:27:40,909 --> 00:27:44,749
those tools running separately how many

713
00:27:42,649 --> 00:27:47,508
bugs would you find assuming the tools

714
00:27:44,749 --> 00:27:50,210
were not cooperating then you have a FL

715
00:27:47,509 --> 00:27:52,700
from the trailer paper and finally<font color="#E5E5E5"> you</font>

716
00:27:50,210 --> 00:27:55,700
have the<font color="#E5E5E5"> result of how well all of those</font>

717
00:27:52,700 --> 00:27:57,710
tools worked operating together given

718
00:27:55,700 --> 00:28:00,440
the same resource and time constraint in

719
00:27:57,710 --> 00:28:03,289
the same input set and by working

720
00:28:00,440 --> 00:28:06,259
together at the exact same tools were

721
00:28:03,289 --> 00:28:08,599
able to find bugs in binary that they

722
00:28:06,259 --> 00:28:11,119
<font color="#E5E5E5">previously could not identify and so</font>

723
00:28:08,599 --> 00:28:13,460
they did<font color="#E5E5E5"> strictly better like you can do</font>

724
00:28:11,119 --> 00:28:15,918
no worse combining all the stuff then

725
00:28:13,460 --> 00:28:17,839
<font color="#E5E5E5">you can do operating it by itself so by</font>

726
00:28:15,919 --> 00:28:21,200
combining it we were able<font color="#E5E5E5"> to find bugs</font>

727
00:28:17,839 --> 00:28:24,019
that we couldn't before and finally the

728
00:28:21,200 --> 00:28:26,539
very bottom line is how well we were

729
00:28:24,019 --> 00:28:29,029
approximately doing now so the results

730
00:28:26,539 --> 00:28:32,029
we have as from soon after the actual

731
00:28:29,029 --> 00:28:33,409
qualifier event about<font color="#CCCCCC"> a year ago and you</font>

732
00:28:32,029 --> 00:28:35,450
know needless to say if<font color="#E5E5E5"> you had like a</font>

733
00:28:33,409 --> 00:28:36,950
lot of mistakes and our stuff since we

734
00:28:35,450 --> 00:28:40,460
were in quite a hurry to get everything

735
00:28:36,950 --> 00:28:42,349
<font color="#E5E5E5">done</font><font color="#CCCCCC"> so after</font><font color="#E5E5E5"> fixing it and doing some</font>

736
00:28:40,460 --> 00:28:44,029
more iterations we're doing considerably

737
00:28:42,349 --> 00:28:46,939
better however this is still an

738
00:28:44,029 --> 00:28:48,950
approximate number since doing a real

739
00:28:46,940 --> 00:28:51,139
representative test take several it

740
00:28:48,950 --> 00:28:53,240
durations and it takes a lot of<font color="#CCCCCC"> time and</font>

741
00:28:51,139 --> 00:28:54,529
a lot of ec2 dollars which were simply

742
00:28:53,240 --> 00:28:59,059
<font color="#CCCCCC">not willing to spend to get a better</font>

743
00:28:54,529 --> 00:29:01,880
benchmark so having<font color="#CCCCCC"> said that we are</font>

744
00:28:59,059 --> 00:29:03,769
<font color="#E5E5E5">going to now move on to patching since</font>

745
00:29:01,880 --> 00:29:05,659
if your call in the beginning this<font color="#E5E5E5"> whole</font>

746
00:29:03,769 --> 00:29:08,269
challenge wasn't just about finding bugs

747
00:29:05,659 --> 00:29:09,950
it was about finding bugs patching them

748
00:29:08,269 --> 00:29:17,720
and having those patches operate

749
00:29:09,950 --> 00:29:20,750
efficiently so what do I mean<font color="#E5E5E5"> by</font>

750
00:29:17,720 --> 00:29:22,250
patching so in the context of the cyber

751
00:29:20,750 --> 00:29:25,730
<font color="#E5E5E5">Grand Challenge qualifying event</font>

752
00:29:22,250 --> 00:29:28,460
patching just mean make the binary not

753
00:29:25,730 --> 00:29:30,769
crash and anyway you made it not crash

754
00:29:28,460 --> 00:29:34,700
given an input that previously crash it

755
00:29:30,769 --> 00:29:37,309
was ok and the sounds simple but it

756
00:29:34,700 --> 00:29:40,010
gives rise<font color="#CCCCCC"> to several interesting</font>

757
00:29:37,309 --> 00:29:43,519
situations which apply to all kinds of

758
00:29:40,010 --> 00:29:45,049
patches so the first thing<font color="#E5E5E5"> is what's</font>

759
00:29:43,519 --> 00:29:48,799
your patching method and by this<font color="#E5E5E5"> I mean</font>

760
00:29:45,049 --> 00:29:50,779
so what<font color="#E5E5E5"> are you going</font><font color="#CCCCCC"> to fix so what a</font>

761
00:29:48,799 --> 00:29:52,070
human would do is a human would look at

762
00:29:50,779 --> 00:29:54,049
the patch we're like sorry they would

763
00:29:52,070 --> 00:29:56,480
look<font color="#E5E5E5"> at the bug and they would be</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I</font>

764
00:29:54,049 --> 00:29:58,370
<font color="#E5E5E5">am going to go and I'm going to find the</font>

765
00:29:56,480 --> 00:29:59,960
root cause of this such as no buffer

766
00:29:58,370 --> 00:30:02,289
that's too small and I'm going<font color="#E5E5E5"> to fix</font>

767
00:29:59,960 --> 00:30:05,240
<font color="#CCCCCC">this and you know make a bigger buffer</font>

768
00:30:02,289 --> 00:30:07,850
however that's<font color="#E5E5E5"> not your only option what</font>

769
00:30:05,240 --> 00:30:09,860
you could do for example is maybe you

770
00:30:07,850 --> 00:30:11,600
can find where you read the input and

771
00:30:09,860 --> 00:30:13,010
<font color="#CCCCCC">the bad input has a certain signature</font>

772
00:30:11,600 --> 00:30:15,110
and then you can just read<font color="#E5E5E5"> that you have</font>

773
00:30:13,010 --> 00:30:17,629
a bad and put an exit the program like

774
00:30:15,110 --> 00:30:19,580
that's a perfectly valid patch you have

775
00:30:17,630 --> 00:30:20,690
made it not crash on the bad input and

776
00:30:19,580 --> 00:30:22,970
you've preserved the original

777
00:30:20,690 --> 00:30:25,789
functionality the first issue is what do

778
00:30:22,970 --> 00:30:28,220
you fix once you know what you're fixing

779
00:30:25,789 --> 00:30:31,100
you have<font color="#E5E5E5"> another problem which is how do</font>

780
00:30:28,220 --> 00:30:34,850
you<font color="#E5E5E5"> actually apply the fix that</font><font color="#CCCCCC"> you just</font>

781
00:30:31,100 --> 00:30:37,639
created like so this binary it has code

782
00:30:34,850 --> 00:30:40,070
in it that needs to run and<font color="#E5E5E5"> it as known</font>

783
00:30:37,639 --> 00:30:41,689
as any binary it has a whole bunch of

784
00:30:40,070 --> 00:30:44,629
references<font color="#CCCCCC"> to other pieces</font><font color="#E5E5E5"> of the</font>

785
00:30:41,690 --> 00:30:46,039
program both<font color="#E5E5E5"> in code and data and for</font>

786
00:30:44,630 --> 00:30:48,139
the cyber<font color="#E5E5E5"> grand challenge these are all</font>

787
00:30:46,039 --> 00:30:50,029
statically linked and they didn't have

788
00:30:48,139 --> 00:30:51,469
relocations so you have the problem you

789
00:30:50,029 --> 00:30:54,260
know what's a pointer and what's not a

790
00:30:51,470 --> 00:30:59,240
pointer how do<font color="#CCCCCC"> i</font><font color="#E5E5E5"> know where i can safely</font>

791
00:30:54,260 --> 00:31:01,789
put my code in and finally after you

792
00:30:59,240 --> 00:31:02,509
potentially know how to fix it you have

793
00:31:01,789 --> 00:31:05,089
to think<font color="#CCCCCC"> about</font>

794
00:31:02,509 --> 00:31:07,570
other issue is have I reached<font color="#E5E5E5"> every</font>

795
00:31:05,089 --> 00:31:10,639
possible way to get to this code and

796
00:31:07,570 --> 00:31:13,189
also what happens if I haven't<font color="#CCCCCC"> found the</font>

797
00:31:10,639 --> 00:31:16,668
bug since if you recall from the graphs

798
00:31:13,190 --> 00:31:18,649
we only found bugs and about half of the

799
00:31:16,669 --> 00:31:21,289
challenge binaries there 131 totally

800
00:31:18,649 --> 00:31:23,299
<font color="#E5E5E5">found bugs in 65 of them so if you</font><font color="#CCCCCC"> don't</font>

801
00:31:21,289 --> 00:31:24,769
<font color="#E5E5E5">know the bug how are you going to pick</font>

802
00:31:23,299 --> 00:31:27,979
patch the program since you need to

803
00:31:24,769 --> 00:31:30,379
patch it to score and I'm going to

804
00:31:27,979 --> 00:31:33,859
<font color="#E5E5E5">discuss the solutions we had to each of</font>

805
00:31:30,379 --> 00:31:37,579
these problems so for the patching

806
00:31:33,859 --> 00:31:40,489
method we chose to<font color="#CCCCCC"> simply prevent access</font>

807
00:31:37,579 --> 00:31:42,859
to invalid memory and the<font color="#CCCCCC"> reason and the</font>

808
00:31:40,489 --> 00:31:44,569
way we<font color="#E5E5E5"> did this has to do with number</font>

809
00:31:42,859 --> 00:31:47,149
<font color="#E5E5E5">one both the effort required and doing</font>

810
00:31:44,569 --> 00:31:49,279
this and our actual patching mechanics

811
00:31:47,149 --> 00:31:50,928
and the<font color="#CCCCCC"> reason we did this is number</font>

812
00:31:49,279 --> 00:31:52,989
what this was the least effort way to do

813
00:31:50,929 --> 00:31:55,759
it since figuring out how to root cause

814
00:31:52,989 --> 00:31:57,619
the issue once you have a crash is

815
00:31:55,759 --> 00:31:59,659
really<font color="#E5E5E5"> really hard especially how to do</font>

816
00:31:57,619 --> 00:32:02,329
it automatically on previa news you've

817
00:31:59,659 --> 00:32:05,419
never seen before so it is easier to

818
00:32:02,329 --> 00:32:06,889
just fix the effect and the other issues

819
00:32:05,419 --> 00:32:09,440
because of<font color="#E5E5E5"> the mechanics that we used</font>

820
00:32:06,889 --> 00:32:11,718
and the<font color="#E5E5E5"> way be patch stuff is we would</font>

821
00:32:09,440 --> 00:32:15,349
take a binary we would translate this

822
00:32:11,719 --> 00:32:17,389
binary to<font color="#CCCCCC"> llvm bit code and llvm bit</font>

823
00:32:15,349 --> 00:32:20,718
code is an intermediate representation

824
00:32:17,389 --> 00:32:24,079
used by the LLVM compiler infrastructure

825
00:32:20,719 --> 00:32:25,699
and it's like a think of<font color="#E5E5E5"> it as a typed</font>

826
00:32:24,079 --> 00:32:28,999
assembly language in static single

827
00:32:25,699 --> 00:32:30,649
assignment form and because of<font color="#CCCCCC"> the way</font>

828
00:32:28,999 --> 00:32:33,409
we patch it was really easy to<font color="#CCCCCC"> identify</font>

829
00:32:30,649 --> 00:32:35,809
all places where you allocate memory and

830
00:32:33,409 --> 00:32:39,019
keep like a nice bitmap of memory and

831
00:32:35,809 --> 00:32:42,199
its permissions and<font color="#E5E5E5"> I'm going to talk</font><font color="#CCCCCC"> a</font>

832
00:32:39,019 --> 00:32:45,979
little more about our actual<font color="#CCCCCC"> llvm based</font>

833
00:32:42,199 --> 00:32:48,199
patching methodology so first of all why

834
00:32:45,979 --> 00:32:51,709
did<font color="#CCCCCC"> we do this so the reason we did this</font>

835
00:32:48,199 --> 00:32:55,009
the<font color="#CCCCCC"> several-fold</font><font color="#E5E5E5"> one is we already had</font>

836
00:32:51,709 --> 00:32:58,399
an x86 to<font color="#CCCCCC"> llvm translator called maxima</font>

837
00:32:55,009 --> 00:33:00,049
it's open source i co-wrote it and so

838
00:32:58,399 --> 00:33:01,998
you know<font color="#CCCCCC"> i guess</font><font color="#E5E5E5"> when you have a hammer</font>

839
00:33:00,049 --> 00:33:03,859
everything looks like a nail and so

840
00:33:01,999 --> 00:33:06,829
we're like yeah lets<font color="#CCCCCC"> you know translate</font>

841
00:33:03,859 --> 00:33:09,079
these things to<font color="#E5E5E5"> llvm and once you have</font>

842
00:33:06,829 --> 00:33:12,229
something in<font color="#CCCCCC"> llvm your actual methods of</font>

843
00:33:09,079 --> 00:33:15,049
patching become really broad so you it's

844
00:33:12,229 --> 00:33:16,130
super super<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to add and remove code</font>

845
00:33:15,049 --> 00:33:18,290
at well since

846
00:33:16,130 --> 00:33:20,660
this is a Thrall and I are meant to<font color="#CCCCCC"> be</font>

847
00:33:18,290 --> 00:33:22,760
<font color="#E5E5E5">used in a compiler and so you can do</font>

848
00:33:20,660 --> 00:33:24,860
<font color="#E5E5E5">things</font><font color="#CCCCCC"> like instrument every memory</font>

849
00:33:22,760 --> 00:33:27,980
allocation or instrument every single

850
00:33:24,860 --> 00:33:30,469
<font color="#CCCCCC">memory access and that's</font><font color="#E5E5E5"> like a</font><font color="#CCCCCC"> 20 30</font>

851
00:33:27,980 --> 00:33:33,590
line<font color="#E5E5E5"> llvm pass it's really</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to do</font>

852
00:33:30,470 --> 00:33:35,540
and you can add patches of arbitrary

853
00:33:33,590 --> 00:33:38,959
size and complexity and have them

854
00:33:35,540 --> 00:33:41,300
<font color="#E5E5E5">re-emitted as a working program because</font>

855
00:33:38,960 --> 00:33:43,010
after all like this thing has all the

856
00:33:41,300 --> 00:33:45,620
plumbing to take this intermediate

857
00:33:43,010 --> 00:33:48,650
representation and output it as a binary

858
00:33:45,620 --> 00:33:50,659
and additionally by translating this

859
00:33:48,650 --> 00:33:54,170
binary instead of keeping it in roots

860
00:33:50,660 --> 00:33:56,870
raw form we also get a built in binary

861
00:33:54,170 --> 00:33:59,510
diversity so a lot<font color="#CCCCCC"> of bugs are there</font>

862
00:33:56,870 --> 00:34:01,699
only because you know something has a

863
00:33:59,510 --> 00:34:04,040
very<font color="#E5E5E5"> specific data structure layout or</font>

864
00:34:01,700 --> 00:34:06,080
data layout and whenever this gets

865
00:34:04,040 --> 00:34:07,970
changed that bug just disappears by

866
00:34:06,080 --> 00:34:12,440
itself so this was another additional

867
00:34:07,970 --> 00:34:14,780
<font color="#E5E5E5">benefit finally you have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> issue of</font>

868
00:34:12,440 --> 00:34:16,429
what do you do<font color="#E5E5E5"> like how do you decide</font>

869
00:34:14,780 --> 00:34:18,230
where to patch like have you covered

870
00:34:16,429 --> 00:34:21,980
every single way to get to where you are

871
00:34:18,230 --> 00:34:28,370
and also<font color="#E5E5E5"> how do you patch stuff where</font>

872
00:34:21,980 --> 00:34:30,830
you<font color="#E5E5E5"> don't know where the</font><font color="#CCCCCC"> bug is and this</font>

873
00:34:28,370 --> 00:34:32,179
led to<font color="#E5E5E5"> two different patching</font>

874
00:34:30,830 --> 00:34:35,110
methodologies which i like to call

875
00:34:32,179 --> 00:34:38,360
specific patching and generic patching

876
00:34:35,110 --> 00:34:40,669
so first let's<font color="#E5E5E5"> start off with specific</font>

877
00:34:38,360 --> 00:34:42,560
patching so we have this thing<font color="#CCCCCC"> that</font>

878
00:34:40,668 --> 00:34:44,149
<font color="#E5E5E5">finds bugs that I just talked a lot</font>

879
00:34:42,560 --> 00:34:46,310
about describing and it worked and it

880
00:34:44,149 --> 00:34:48,649
works pretty well so why<font color="#E5E5E5"> not just use</font>

881
00:34:46,310 --> 00:34:51,379
<font color="#CCCCCC">that thing to find the bugs</font><font color="#E5E5E5"> and then</font>

882
00:34:48,649 --> 00:34:53,418
only<font color="#E5E5E5"> put in the patch in</font><font color="#CCCCCC"> the area where</font>

883
00:34:51,379 --> 00:34:54,889
you<font color="#E5E5E5"> know you're crashing the program so</font>

884
00:34:53,418 --> 00:34:57,290
what you<font color="#E5E5E5"> can do is you have this</font>

885
00:34:54,889 --> 00:35:00,740
crashing input you see where crashes you

886
00:34:57,290 --> 00:35:03,860
correlate the crashing program counter

887
00:35:00,740 --> 00:35:05,839
with your translated bit code and you

888
00:35:03,860 --> 00:35:07,790
add in some checks for memory validity

889
00:35:05,840 --> 00:35:09,530
at the crashing location and bam you've

890
00:35:07,790 --> 00:35:11,270
eliminated the bug every time you reach

891
00:35:09,530 --> 00:35:12,980
that piece of<font color="#E5E5E5"> code now you're simply</font>

892
00:35:11,270 --> 00:35:14,780
going to<font color="#E5E5E5"> see if the access is valid and</font>

893
00:35:12,980 --> 00:35:19,040
if it's<font color="#E5E5E5"> not you're going to exit problem</font>

894
00:35:14,780 --> 00:35:21,170
solved however there's some slug hitches

895
00:35:19,040 --> 00:35:23,480
with this which are interesting caveat

896
00:35:21,170 --> 00:35:26,000
so one of<font color="#E5E5E5"> these is a quirk of the game</font>

897
00:35:23,480 --> 00:35:28,400
rules so you

898
00:35:26,000 --> 00:35:30,910
had to be sure to patch the correct bug

899
00:35:28,400 --> 00:35:33,940
so I said<font color="#CCCCCC"> that there were specially made</font>

900
00:35:30,910 --> 00:35:36,410
applications with purposely put in bugs

901
00:35:33,940 --> 00:35:39,140
unfortunately these applications were

902
00:35:36,410 --> 00:35:41,240
made in<font color="#E5E5E5"> the sea family of languages like</font>

903
00:35:39,140 --> 00:35:42,950
a lot of software<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> C family of</font>

904
00:35:41,240 --> 00:35:44,870
languages is terrible and<font color="#E5E5E5"> there were a</font>

905
00:35:42,950 --> 00:35:46,819
whole bunch of unintended bugs in these

906
00:35:44,870 --> 00:35:48,290
applications<font color="#E5E5E5"> and if you found one of</font>

907
00:35:46,820 --> 00:35:50,570
those bugs and you patched you didn't

908
00:35:48,290 --> 00:35:51,650
get any points because the original bug

909
00:35:50,570 --> 00:35:54,050
was still there<font color="#E5E5E5"> and that's what was</font>

910
00:35:51,650 --> 00:35:56,030
tested for so you<font color="#E5E5E5"> had to patch the</font>

911
00:35:54,050 --> 00:35:58,300
intended bug and you were never sure if

912
00:35:56,030 --> 00:36:00,950
you found the intended bug or not and

913
00:35:58,300 --> 00:36:03,290
additionally there may be multiple code

914
00:36:00,950 --> 00:36:05,089
paths to reach to where you are and you

915
00:36:03,290 --> 00:36:07,130
would have to potentially make sure that

916
00:36:05,090 --> 00:36:11,240
you have<font color="#CCCCCC"> pet that the bug you triggered</font>

917
00:36:07,130 --> 00:36:13,130
is like really the core issue or if

918
00:36:11,240 --> 00:36:15,350
<font color="#E5E5E5">you're there's some other way to get to</font>

919
00:36:13,130 --> 00:36:18,830
using the bad input to another crashing

920
00:36:15,350 --> 00:36:21,560
location so the alternative you have to

921
00:36:18,830 --> 00:36:24,049
this is generic patching where you try

922
00:36:21,560 --> 00:36:27,290
to remove all bugs of a certain class

923
00:36:24,050 --> 00:36:29,450
and this is<font color="#CCCCCC"> actually done a lot in</font>

924
00:36:27,290 --> 00:36:31,640
<font color="#E5E5E5">practice and like actual deployed</font>

925
00:36:29,450 --> 00:36:34,250
security mitigations like stat cookies

926
00:36:31,640 --> 00:36:36,740
like stack cookies remove the class of

927
00:36:34,250 --> 00:36:39,050
return override bugs they<font color="#E5E5E5"> just eliminate</font>

928
00:36:36,740 --> 00:36:41,209
the whole class<font color="#E5E5E5"> of problems and other</font>

929
00:36:39,050 --> 00:36:43,780
things like a SLR<font color="#CCCCCC"> and control flow</font>

930
00:36:41,210 --> 00:36:46,640
integrity are a similar situation

931
00:36:43,780 --> 00:36:50,780
unfortunately<font color="#E5E5E5"> is that these things are</font>

932
00:36:46,640 --> 00:36:53,839
kind of slow since I they mitigate all

933
00:36:50,780 --> 00:36:55,910
of the program but your bug is only

934
00:36:53,840 --> 00:36:58,340
occurs in a small and specific piece of

935
00:36:55,910 --> 00:37:02,720
<font color="#E5E5E5">it so by adding these frequent checks</font>

936
00:36:58,340 --> 00:37:04,840
you add a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> overhead the problem we</font>

937
00:37:02,720 --> 00:37:07,459
had was though a little<font color="#E5E5E5"> bit bigger so</font>

938
00:37:04,840 --> 00:37:09,230
<font color="#CCCCCC">once we did the implement both of these</font>

939
00:37:07,460 --> 00:37:11,540
<font color="#E5E5E5">methods and</font><font color="#CCCCCC"> B had like a set of test</font>

940
00:37:09,230 --> 00:37:13,520
programs and like we created this really

941
00:37:11,540 --> 00:37:15,170
big you know Excel spreadsheet and

942
00:37:13,520 --> 00:37:16,730
they're like these are the tests we have

943
00:37:15,170 --> 00:37:18,800
<font color="#CCCCCC">these are all the different patching</font>

944
00:37:16,730 --> 00:37:20,600
methods and this is how much see more

945
00:37:18,800 --> 00:37:23,540
CPU we use this is how much more memory

946
00:37:20,600 --> 00:37:25,549
we use and this is the<font color="#E5E5E5"> festa mated final</font>

947
00:37:23,540 --> 00:37:27,500
score and you look<font color="#CCCCCC"> their estimated final</font>

948
00:37:25,550 --> 00:37:30,470
score<font color="#E5E5E5"> it was terrible and so we're like</font>

949
00:37:27,500 --> 00:37:32,510
okay we have<font color="#E5E5E5"> to fix this and so then</font>

950
00:37:30,470 --> 00:37:35,779
spoon be remembered hey we are using

951
00:37:32,510 --> 00:37:38,060
this compiler optimization framework why

952
00:37:35,780 --> 00:37:39,350
don't we start<font color="#E5E5E5"> doing some compiler</font>

953
00:37:38,060 --> 00:37:40,910
optimization on these

954
00:37:39,350 --> 00:37:43,310
translated programs and all of these

955
00:37:40,910 --> 00:37:45,500
patched binaries<font color="#E5E5E5"> and so this is where</font>

956
00:37:43,310 --> 00:37:48,290
everybody in trail of bits busts out

957
00:37:45,500 --> 00:37:49,790
there<font color="#CCCCCC"> long-forgotten compiler</font>

958
00:37:48,290 --> 00:37:51,170
development knowledge and starts

959
00:37:49,790 --> 00:37:59,210
figuring out how to start optimizing

960
00:37:51,170 --> 00:38:02,030
code so<font color="#E5E5E5"> I'm going to go through like</font>

961
00:37:59,210 --> 00:38:04,040
this like<font color="#CCCCCC"> rocky like montage of stuff we</font>

962
00:38:02,030 --> 00:38:06,830
actually did to try and make these

963
00:38:04,040 --> 00:38:08,810
programs run faster number one is

964
00:38:06,830 --> 00:38:11,569
something<font color="#CCCCCC"> called</font><font color="#E5E5E5"> cross block dead store</font>

965
00:38:08,810 --> 00:38:13,549
elimination so a dead store is you know

966
00:38:11,570 --> 00:38:14,960
if you write to<font color="#CCCCCC"> a value you never read</font>

967
00:38:13,550 --> 00:38:16,400
from what you write<font color="#CCCCCC"> to it again you</font>

968
00:38:14,960 --> 00:38:19,670
<font color="#E5E5E5">never had</font><font color="#CCCCCC"> to do the first right it's</font>

969
00:38:16,400 --> 00:38:22,190
dead we<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> llvm does is for single</font>

970
00:38:19,670 --> 00:38:24,910
blocks we extended this across basic

971
00:38:22,190 --> 00:38:27,590
blocks to operate over a whole function

972
00:38:24,910 --> 00:38:29,540
when you're translating we can<font color="#CCCCCC"> actually</font>

973
00:38:27,590 --> 00:38:32,750
see you know<font color="#E5E5E5"> which registers a program</font>

974
00:38:29,540 --> 00:38:34,310
uses until you run up to an e bi

975
00:38:32,750 --> 00:38:36,020
boundary where you know certain

976
00:38:34,310 --> 00:38:37,640
registers are killed and if you know

977
00:38:36,020 --> 00:38:39,740
certain registers are killed at the<font color="#E5E5E5"> API</font>

978
00:38:37,640 --> 00:38:42,430
boundary you can<font color="#E5E5E5"> look back during</font>

979
00:38:39,740 --> 00:38:44,450
translation and then you can eliminate

980
00:38:42,430 --> 00:38:45,799
translating the instructions<font color="#E5E5E5"> that touch</font>

981
00:38:44,450 --> 00:38:47,779
those registers because you know they're

982
00:38:45,800 --> 00:38:51,230
not<font color="#E5E5E5"> going to be used so you can</font><font color="#CCCCCC"> actually</font>

983
00:38:47,780 --> 00:38:52,340
eliminate parts of the program you<font color="#CCCCCC"> could</font>

984
00:38:51,230 --> 00:38:55,520
do things like a Dominator tree

985
00:38:52,340 --> 00:38:59,330
traversal which is you sort your program

986
00:38:55,520 --> 00:39:01,280
by blocks that are executed first and

987
00:38:59,330 --> 00:39:03,560
every child block industry is executed

988
00:39:01,280 --> 00:39:04,850
after the parent block and this would

989
00:39:03,560 --> 00:39:06,860
this lets you do is let's say you know

990
00:39:04,850 --> 00:39:08,950
<font color="#E5E5E5">you saw that you inserted your patch</font>

991
00:39:06,860 --> 00:39:11,720
deep in a function in some kind of loop

992
00:39:08,950 --> 00:39:14,810
instead if that value that<font color="#E5E5E5"> you're trying</font>

993
00:39:11,720 --> 00:39:17,120
to attest this valid is only set

994
00:39:14,810 --> 00:39:18,680
somewhere at the top you can take take

995
00:39:17,120 --> 00:39:20,630
your patch and you can move it up to the

996
00:39:18,680 --> 00:39:23,839
<font color="#E5E5E5">top and only execute once instead of</font>

997
00:39:20,630 --> 00:39:27,230
executed repeatedly a realization that

998
00:39:23,840 --> 00:39:29,120
we<font color="#E5E5E5"> had is that like until you read data</font>

999
00:39:27,230 --> 00:39:31,190
from the user you don't need<font color="#CCCCCC"> to patch</font>

1000
00:39:29,120 --> 00:39:34,790
anything since by definition that code

1001
00:39:31,190 --> 00:39:37,130
isn't the code<font color="#E5E5E5"> that's not touchable from</font>

1002
00:39:34,790 --> 00:39:40,250
the place<font color="#E5E5E5"> we read user data can't have a</font>

1003
00:39:37,130 --> 00:39:42,770
crashing bug so you could<font color="#E5E5E5"> do data flow</font>

1004
00:39:40,250 --> 00:39:44,810
from the one system call that reads user

1005
00:39:42,770 --> 00:39:47,630
input and then you could see in<font color="#E5E5E5"> your</font>

1006
00:39:44,810 --> 00:39:49,190
program like which is the set of

1007
00:39:47,630 --> 00:39:51,470
potential code that<font color="#CCCCCC"> i may touch from</font>

1008
00:39:49,190 --> 00:39:53,270
this which<font color="#CCCCCC"> i actually need to fix so you</font>

1009
00:39:51,470 --> 00:39:55,250
can instead of trying<font color="#E5E5E5"> to apply your</font>

1010
00:39:53,270 --> 00:39:57,230
generic patches to everything you can

1011
00:39:55,250 --> 00:40:00,500
<font color="#E5E5E5">apply your generic patches to a subset</font>

1012
00:39:57,230 --> 00:40:03,320
<font color="#E5E5E5">of the program and since this was</font>

1013
00:40:00,500 --> 00:40:05,270
operating in like a real a compiler

1014
00:40:03,320 --> 00:40:07,040
development framework it's super easy to

1015
00:40:05,270 --> 00:40:08,540
<font color="#E5E5E5">mix and match all of these things you</font>

1016
00:40:07,040 --> 00:40:10,400
can<font color="#E5E5E5"> just pipe the intermediate</font>

1017
00:40:08,540 --> 00:40:12,020
representation between them or any

1018
00:40:10,400 --> 00:40:13,640
subset or combination of them that you

1019
00:40:12,020 --> 00:40:15,500
want and apply them in different

1020
00:40:13,640 --> 00:40:18,290
sequences and see which one is the most

1021
00:40:15,500 --> 00:40:19,930
optimal method of pageant and like<font color="#E5E5E5"> so we</font>

1022
00:40:18,290 --> 00:40:22,040
did this and you spend a<font color="#CCCCCC"> lot of time</font>

1023
00:40:19,930 --> 00:40:23,779
optimizing like this is towards<font color="#CCCCCC"> Lake</font>

1024
00:40:22,040 --> 00:40:26,779
close to the very ends of the

1025
00:40:23,780 --> 00:40:28,850
competition<font color="#CCCCCC"> deadline and like we thought</font>

1026
00:40:26,780 --> 00:40:30,170
we were good to go like we knew that our

1027
00:40:28,850 --> 00:40:32,360
programs are slow but you didn't<font color="#CCCCCC"> think</font>

1028
00:40:30,170 --> 00:40:34,010
they were that slow and like due to a

1029
00:40:32,360 --> 00:40:35,180
variety of factors which I'm not really

1030
00:40:34,010 --> 00:40:37,580
<font color="#E5E5E5">going to get into now because I'm going</font>

1031
00:40:35,180 --> 00:40:40,580
<font color="#E5E5E5">to run</font><font color="#CCCCCC"> out of time but you can talk to</font>

1032
00:40:37,580 --> 00:40:42,560
me<font color="#E5E5E5"> afterwards if you want it wasn't fast</font>

1033
00:40:40,580 --> 00:40:45,110
enough like we were still dead last in

1034
00:40:42,560 --> 00:40:48,680
performance as a reminder but we tried

1035
00:40:45,110 --> 00:40:51,350
we tried really really hard so if you

1036
00:40:48,680 --> 00:40:54,049
are patching stuff by translating your

1037
00:40:51,350 --> 00:41:01,910
binary<font color="#CCCCCC"> stew llvm don't rely on</font><font color="#E5E5E5"> them</font>

1038
00:40:54,050 --> 00:41:05,000
really operating quickly but<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though</font>

1039
00:41:01,910 --> 00:41:07,700
that was the end for us the cyber<font color="#E5E5E5"> grand</font>

1040
00:41:05,000 --> 00:41:09,560
<font color="#E5E5E5">challenge continues ah the finals are</font>

1041
00:41:07,700 --> 00:41:11,390
going to be held in August fourth of

1042
00:41:09,560 --> 00:41:15,140
this year<font color="#E5E5E5"> and they are co-located with</font>

1043
00:41:11,390 --> 00:41:17,569
Def Con in Las<font color="#CCCCCC"> Vegas it is free to enter</font>

1044
00:41:15,140 --> 00:41:19,640
it is not at<font color="#CCCCCC"> Def Con</font><font color="#E5E5E5"> there's co-located</font>

1045
00:41:17,570 --> 00:41:21,950
with it so you do not<font color="#CCCCCC"> need a DEFCON</font>

1046
00:41:19,640 --> 00:41:23,720
badge to see these cyber<font color="#E5E5E5"> Grand Challenge</font>

1047
00:41:21,950 --> 00:41:25,160
finals I'm going<font color="#E5E5E5"> to be there i think</font>

1048
00:41:23,720 --> 00:41:27,439
it's going to<font color="#E5E5E5"> be super exciting i would</font>

1049
00:41:25,160 --> 00:41:29,420
really<font color="#E5E5E5"> encourage everybody to go and it</font>

1050
00:41:27,440 --> 00:41:31,310
was also announced last year that the

1051
00:41:29,420 --> 00:41:33,980
winning computer cyber grand challenge

1052
00:41:31,310 --> 00:41:36,529
team is going<font color="#E5E5E5"> to face the winning human</font>

1053
00:41:33,980 --> 00:41:39,080
CTF team so there's going to be a human

1054
00:41:36,530 --> 00:41:40,880
<font color="#E5E5E5">vs computer contest of the two winners</font>

1055
00:41:39,080 --> 00:41:46,160
which is going to be<font color="#E5E5E5"> really awesome in</font>

1056
00:41:40,880 --> 00:41:48,560
itself ah so also what was next for

1057
00:41:46,160 --> 00:41:51,620
Cyberdyne well so we were you're really

1058
00:41:48,560 --> 00:41:53,930
<font color="#E5E5E5">sad we didn't qualify but after</font><font color="#CCCCCC"> you know</font>

1059
00:41:51,620 --> 00:41:56,299
<font color="#E5E5E5">sitting down and looking back on if you</font>

1060
00:41:53,930 --> 00:41:58,669
realize well we have like this bug

1061
00:41:56,300 --> 00:41:59,900
finding system what are<font color="#E5E5E5"> we going to do</font>

1062
00:41:58,670 --> 00:42:02,570
with it and so we're<font color="#E5E5E5"> like we're gonna</font>

1063
00:41:59,900 --> 00:42:04,340
<font color="#E5E5E5">find Linux bugs and if your call this</font>

1064
00:42:02,570 --> 00:42:06,230
was not this thing wasn't meant to run

1065
00:42:04,340 --> 00:42:07,230
on Linux it's meant to<font color="#E5E5E5"> run on a Linux</font>

1066
00:42:06,230 --> 00:42:10,320
like opera

1067
00:42:07,230 --> 00:42:12,810
system so instead of porting distinct

1068
00:42:10,320 --> 00:42:14,940
<font color="#E5E5E5">Linux instead the easier option was to</font>

1069
00:42:12,810 --> 00:42:17,490
port the targets that we want to<font color="#E5E5E5"> look at</font>

1070
00:42:14,940 --> 00:42:20,640
to decree the operating system<font color="#E5E5E5"> this</font>

1071
00:42:17,490 --> 00:42:22,970
thing runs on so<font color="#E5E5E5"> I have a version of Lib</font>

1072
00:42:20,640 --> 00:42:25,319
C like a stubbed out line that

1073
00:42:22,970 --> 00:42:27,000
essentially fakes a lot of the Linux<font color="#CCCCCC"> II</font>

1074
00:42:25,320 --> 00:42:29,580
features your<font color="#E5E5E5"> actual application may</font>

1075
00:42:27,000 --> 00:42:31,410
want to use and I can rebuild stuffed

1076
00:42:29,580 --> 00:42:33,690
with source to retarget this operating

1077
00:42:31,410 --> 00:42:36,210
system and link it with this fake Lib C

1078
00:42:33,690 --> 00:42:38,820
and like it'll work like if you ran it

1079
00:42:36,210 --> 00:42:40,950
and it'll work and it will find like you

1080
00:42:38,820 --> 00:42:44,280
verify it and stuff with known<font color="#E5E5E5"> CVEs like</font>

1081
00:42:40,950 --> 00:42:45,930
it'll find linux box the other thing

1082
00:42:44,280 --> 00:42:48,060
that we want to<font color="#E5E5E5"> do is we want to</font>

1083
00:42:45,930 --> 00:42:50,549
integrate more tools and knowledge so

1084
00:42:48,060 --> 00:42:51,690
top of the list<font color="#E5E5E5"> is</font><font color="#CCCCCC"> i mentioned AFL</font>

1085
00:42:50,550 --> 00:42:53,640
before and like I would love to

1086
00:42:51,690 --> 00:42:57,030
integrate AFL but it was<font color="#E5E5E5"> like really</font>

1087
00:42:53,640 --> 00:42:58,529
complicated however<font color="#CCCCCC"> I saw that ncc group</font>

1088
00:42:57,030 --> 00:43:00,090
had something called Project Triforce

1089
00:42:58,530 --> 00:43:02,190
which is probably going to make this a

1090
00:43:00,090 --> 00:43:04,619
lot easier I really wanted<font color="#E5E5E5"> to do this</font>

1091
00:43:02,190 --> 00:43:06,270
before the<font color="#E5E5E5"> conference but I'm just super</font>

1092
00:43:04,619 --> 00:43:08,400
busy and it<font color="#CCCCCC"> doesn't have time but</font><font color="#E5E5E5"> this</font>

1093
00:43:06,270 --> 00:43:11,070
<font color="#CCCCCC">is like on my list of stuff to do and</font>

1094
00:43:08,400 --> 00:43:12,570
I've also wanted<font color="#CCCCCC"> to do things like in a</font>

1095
00:43:11,070 --> 00:43:15,150
great grammar based buzzers or

1096
00:43:12,570 --> 00:43:16,470
information from your compiler in your

1097
00:43:15,150 --> 00:43:18,570
source code because this could really

1098
00:43:16,470 --> 00:43:20,368
help<font color="#CCCCCC"> for instance with coverage of</font>

1099
00:43:18,570 --> 00:43:22,590
metrics like if some of theirs so this

1100
00:43:20,369 --> 00:43:24,030
is mentoring on binaries but if you're

1101
00:43:22,590 --> 00:43:25,380
not running this on binary is if you're

1102
00:43:24,030 --> 00:43:27,740
running<font color="#E5E5E5"> this and stuff you originally of</font>

1103
00:43:25,380 --> 00:43:30,540
source for you have a lot more options

1104
00:43:27,740 --> 00:43:32,609
also<font color="#E5E5E5"> I really love to add broader</font>

1105
00:43:30,540 --> 00:43:35,850
library support so we can test it on

1106
00:43:32,609 --> 00:43:38,880
more applications since i have a Lib C

1107
00:43:35,850 --> 00:43:40,890
but it don't have a<font color="#E5E5E5"> lib c++ that's been</font>

1108
00:43:38,880 --> 00:43:42,480
a little bit<font color="#E5E5E5"> more of a lift it's totally</font>

1109
00:43:40,890 --> 00:43:47,160
doable it's just something<font color="#E5E5E5"> it needs to</font>

1110
00:43:42,480 --> 00:43:50,550
be done<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I do think that automating a</font>

1111
00:43:47,160 --> 00:43:52,859
lot of stuff is in the<font color="#CCCCCC"> future and I</font>

1112
00:43:50,550 --> 00:43:55,830
<font color="#E5E5E5">think that automation is going to really</font>

1113
00:43:52,859 --> 00:43:59,490
help people who audit software we aren't

1114
00:43:55,830 --> 00:44:02,430
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to replace humans but we are going</font>

1115
00:43:59,490 --> 00:44:05,549
to make their job a lot easier since you

1116
00:44:02,430 --> 00:44:07,410
can have this automated system do a lot

1117
00:44:05,550 --> 00:44:08,910
of the really<font color="#E5E5E5"> really boring work</font>

1118
00:44:07,410 --> 00:44:11,819
especially of stuff<font color="#E5E5E5"> that you haven't</font>

1119
00:44:08,910 --> 00:44:13,830
seen before so you can take this thing

1120
00:44:11,820 --> 00:44:16,020
you can give<font color="#E5E5E5"> it a binary or maybe stuff</font>

1121
00:44:13,830 --> 00:44:17,220
you have source for and let<font color="#CCCCCC"> it turn on</font>

1122
00:44:16,020 --> 00:44:18,810
<font color="#E5E5E5">it for a</font><font color="#CCCCCC"> while well you know you</font>

1123
00:44:17,220 --> 00:44:21,189
research more in depth of what you're

1124
00:44:18,810 --> 00:44:23,049
<font color="#CCCCCC">looking for and it's going</font><font color="#E5E5E5"> to give you</font>

1125
00:44:21,190 --> 00:44:25,510
no some kind<font color="#E5E5E5"> of confidence measurement</font>

1126
00:44:23,050 --> 00:44:27,369
of like I<font color="#E5E5E5"> either found these known these</font>

1127
00:44:25,510 --> 00:44:28,990
bugs that are<font color="#E5E5E5"> definitely there and like</font>

1128
00:44:27,369 --> 00:44:32,380
here's the input that will trigger them

1129
00:44:28,990 --> 00:44:34,390
or it's going<font color="#CCCCCC"> to do something like say i</font>

1130
00:44:32,380 --> 00:44:37,300
looked at the following<font color="#E5E5E5"> paths in your</font>

1131
00:44:34,390 --> 00:44:39,609
program and<font color="#CCCCCC"> i know that i was not</font><font color="#E5E5E5"> able</font>

1132
00:44:37,300 --> 00:44:42,069
<font color="#E5E5E5">to</font><font color="#CCCCCC"> find bugs in these paths however this</font>

1133
00:44:39,609 --> 00:44:43,720
is the stuff<font color="#CCCCCC"> i couldn't see and then the</font>

1134
00:44:42,069 --> 00:44:46,509
human can look at the stuff that was

1135
00:44:43,720 --> 00:44:48,609
missed there by letting you avoid doing

1136
00:44:46,510 --> 00:44:50,109
like all of the boring were looking at

1137
00:44:48,609 --> 00:44:52,000
the<font color="#E5E5E5"> whole thing where you can have a</font>

1138
00:44:50,109 --> 00:44:53,859
robot give you a high quality estimate

1139
00:44:52,000 --> 00:44:55,869
saying that there's probably nothing in

1140
00:44:53,859 --> 00:45:00,009
this part but check this other part

1141
00:44:55,869 --> 00:45:02,220
instead and to test this trail of bits

1142
00:45:00,010 --> 00:45:05,319
is actually doing<font color="#E5E5E5"> a pilot of a</font>

1143
00:45:02,220 --> 00:45:08,560
semi-automated / fully automated audit

1144
00:45:05,319 --> 00:45:10,420
of<font color="#E5E5E5"> z lib for the Mozilla Foundation so Z</font>

1145
00:45:08,560 --> 00:45:13,420
lib Bronson pretty much every product

1146
00:45:10,420 --> 00:45:15,790
that Mozilla has and we are doing an

1147
00:45:13,420 --> 00:45:17,770
automated audit of it with the<font color="#E5E5E5"> current</font>

1148
00:45:15,790 --> 00:45:19,869
version<font color="#E5E5E5"> of the tools and we're seeing</font>

1149
00:45:17,770 --> 00:45:22,180
you<font color="#CCCCCC"> know how well is this actually going</font>

1150
00:45:19,869 --> 00:45:23,829
to work<font color="#E5E5E5"> like we</font><font color="#CCCCCC"> don't expect to find</font>

1151
00:45:22,180 --> 00:45:26,529
anything<font color="#CCCCCC"> Z lip</font><font color="#E5E5E5"> has been combed over</font>

1152
00:45:23,829 --> 00:45:28,300
really<font color="#CCCCCC"> really thoroughly but it would be</font>

1153
00:45:26,530 --> 00:45:31,030
nice if let's say if<font color="#CCCCCC"> you could have this</font>

1154
00:45:28,300 --> 00:45:33,220
automated system give us a confidence

1155
00:45:31,030 --> 00:45:35,079
measurement and say like this is how

1156
00:45:33,220 --> 00:45:38,259
much stuff<font color="#E5E5E5"> I was able to find out</font><font color="#CCCCCC"> about</font>

1157
00:45:35,079 --> 00:45:39,550
<font color="#CCCCCC">Zeila automatically therefore as a human</font>

1158
00:45:38,260 --> 00:45:42,940
you would have only had to check these

1159
00:45:39,550 --> 00:45:44,440
other pieces and eventually what we

1160
00:45:42,940 --> 00:45:46,960
would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> we would like to be</font>

1161
00:45:44,440 --> 00:45:52,089
able to extend this idea<font color="#E5E5E5"> to more open</font>

1162
00:45:46,960 --> 00:45:54,250
source software since if you can

1163
00:45:52,089 --> 00:45:57,670
automate<font color="#E5E5E5"> away a lot of the really easy</font>

1164
00:45:54,250 --> 00:45:59,500
tasks we could create something where we

1165
00:45:57,670 --> 00:46:01,839
would<font color="#E5E5E5"> just automatically audit open</font>

1166
00:45:59,500 --> 00:46:05,109
source software and make the world a

1167
00:46:01,839 --> 00:46:07,230
more<font color="#CCCCCC"> bug free place for everyone thank</font>

1168
00:46:05,109 --> 00:46:07,230
you

1169
00:46:11,410 --> 00:46:20,740
<font color="#E5E5E5">oh do we have any questions I'm looking</font>

1170
00:46:19,150 --> 00:46:34,480
for hands I'll waive it if there's

1171
00:46:20,740 --> 00:46:37,538
anything yes or here so the patches that

1172
00:46:34,480 --> 00:46:40,450
we generate<font color="#CCCCCC"> where you are essentially</font>

1173
00:46:37,539 --> 00:46:42,039
patching the memory access that was

1174
00:46:40,450 --> 00:46:43,779
crashing we weren't finding the root

1175
00:46:42,039 --> 00:46:45,579
cause of the problem we were effectively

1176
00:46:43,780 --> 00:46:47,260
saying well we know this thing crashes

1177
00:46:45,579 --> 00:46:49,599
here so we're going to<font color="#E5E5E5"> detect an invalid</font>

1178
00:46:47,260 --> 00:46:52,359
accident Patchett and this patch would

1179
00:46:49,599 --> 00:46:54,369
only it would conceivably work for like

1180
00:46:52,359 --> 00:46:56,319
<font color="#E5E5E5">a full-featured OS but ideally you would</font>

1181
00:46:54,369 --> 00:46:57,970
want something<font color="#E5E5E5"> that was more</font><font color="#CCCCCC"> in-depth</font>

1182
00:46:56,319 --> 00:47:00,190
than<font color="#E5E5E5"> you want a human to do the patching</font>

1183
00:46:57,970 --> 00:47:01,868
part at least the way we did it<font color="#E5E5E5"> I'm sure</font>

1184
00:47:00,190 --> 00:47:06,579
<font color="#E5E5E5">some of the other team said much more</font>

1185
00:47:01,869 --> 00:47:12,039
intelligent patching solutions yes over

1186
00:47:06,579 --> 00:47:17,920
there I'm sorry could you say that a

1187
00:47:12,039 --> 00:47:19,539
little louder so I talked a little bit

1188
00:47:17,920 --> 00:47:22,059
<font color="#E5E5E5">more</font><font color="#CCCCCC"> about it when I did a similar talk</font>

1189
00:47:19,539 --> 00:47:24,309
<font color="#CCCCCC">at infiltrate but essentially uses</font>

1190
00:47:22,059 --> 00:47:28,779
dynamic binary translation to translate

1191
00:47:24,309 --> 00:47:30,819
an x86 binary and eliminate<font color="#E5E5E5"> calls to the</font>

1192
00:47:28,779 --> 00:47:33,279
colonel<font color="#E5E5E5"> and effectively operate</font>

1193
00:47:30,819 --> 00:47:35,440
everything so the center your CPU speed

1194
00:47:33,279 --> 00:47:36,940
becomes your limiter<font color="#E5E5E5"> and because you use</font>

1195
00:47:35,440 --> 00:47:39,160
dynamic binary translation you have

1196
00:47:36,940 --> 00:47:48,029
things<font color="#E5E5E5"> like free code coverage and free</font>

1197
00:47:39,160 --> 00:47:52,118
crash detection is there anything else I

1198
00:47:48,029 --> 00:47:55,140
think this looks like it last chance<font color="#E5E5E5"> all</font>

1199
00:47:52,119 --> 00:47:55,140
<font color="#E5E5E5">right</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> very much everybody</font>

