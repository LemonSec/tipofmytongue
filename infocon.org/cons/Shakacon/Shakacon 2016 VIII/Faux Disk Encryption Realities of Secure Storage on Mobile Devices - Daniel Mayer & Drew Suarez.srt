1
00:00:00,350 --> 00:00:05,189
hey good afternoon thanks for coming on

2
00:00:04,049 --> 00:00:06,750
this talk will be about full disk

3
00:00:05,190 --> 00:00:09,389
encryption and the realities<font color="#CCCCCC"> of secure</font>

4
00:00:06,750 --> 00:00:10,980
storage and mobile devices I'm Daniel

5
00:00:09,389 --> 00:00:15,000
I'm a principal consultant with the NCC

6
00:00:10,980 --> 00:00:17,190
group I'm have we do so basically I do

7
00:00:15,000 --> 00:00:19,080
<font color="#CCCCCC">all kind of contesting and software</font>

8
00:00:17,190 --> 00:00:20,789
security assessments<font color="#E5E5E5"> but ever focus on</font>

9
00:00:19,080 --> 00:00:22,680
the iOS site and I've written a tool

10
00:00:20,789 --> 00:00:24,600
called a DB which some of you might be

11
00:00:22,680 --> 00:00:26,698
familiar with for doing iOS pen testing

12
00:00:24,600 --> 00:00:29,429
and I give the talk together with drew

13
00:00:26,699 --> 00:00:31,260
over here<font color="#CCCCCC"> Thanks yeah my name is true</font>

14
00:00:29,429 --> 00:00:34,620
i'm a senior security consultant and

15
00:00:31,260 --> 00:00:35,910
research director with the NCC group s

16
00:00:34,620 --> 00:00:37,949
have extensive background with the

17
00:00:35,910 --> 00:00:41,940
<font color="#CCCCCC">cyanogenmod project on the</font><font color="#E5E5E5"> open source</font>

18
00:00:37,950 --> 00:00:44,850
side bringing up new devices and unloved

19
00:00:41,940 --> 00:00:48,059
devices as well as building out the wiki

20
00:00:44,850 --> 00:00:50,850
and exploit database for getting<font color="#E5E5E5"> Android</font>

21
00:00:48,059 --> 00:00:53,968
onto your phone an occasional familiar

22
00:00:50,850 --> 00:00:55,350
<font color="#E5E5E5">NCC group is a uk-based company but both</font>

23
00:00:53,969 --> 00:00:57,930
<font color="#CCCCCC">of</font><font color="#E5E5E5"> us out of Chicago and we have a</font>

24
00:00:55,350 --> 00:00:59,399
number of offices in the US both of<font color="#E5E5E5"> us</font>

25
00:00:57,930 --> 00:01:00,840
are in the pen testing practice but we

26
00:00:59,399 --> 00:01:03,840
also do software escrow and domain

27
00:01:00,840 --> 00:01:05,810
services and another another number of

28
00:01:03,840 --> 00:01:08,850
different other areas will<font color="#CCCCCC"> be working in</font>

29
00:01:05,810 --> 00:01:10,260
so quick overview giving you a brief

30
00:01:08,850 --> 00:01:12,419
introduction into the topic and why it's

31
00:01:10,260 --> 00:01:14,430
important then<font color="#E5E5E5"> I will be talking about</font>

32
00:01:12,420 --> 00:01:16,080
secure storage on iOS and tell you how

33
00:01:14,430 --> 00:01:17,189
the foot functions out there how it

34
00:01:16,080 --> 00:01:19,289
works and what the different features

35
00:01:17,189 --> 00:01:21,000
are and then drew will take over and

36
00:01:19,290 --> 00:01:23,610
<font color="#E5E5E5">talk for the bigger part of the talked</font>

37
00:01:21,000 --> 00:01:25,439
over secure storage and Android and how

38
00:01:23,610 --> 00:01:27,450
it compares to<font color="#E5E5E5"> Android they also show</font>

39
00:01:25,439 --> 00:01:29,460
you and exploit how full disk encryption

40
00:01:27,450 --> 00:01:31,500
and<font color="#E5E5E5"> Android may not always be as secure</font>

41
00:01:29,460 --> 00:01:33,210
as do you think it is<font color="#E5E5E5"> um and then give</font>

42
00:01:31,500 --> 00:01:36,360
you some outlook on what we think where

43
00:01:33,210 --> 00:01:37,649
we can go from<font color="#E5E5E5"> here</font><font color="#CCCCCC"> as an industry so</font>

44
00:01:36,360 --> 00:01:39,840
where do we talk about secure storage

45
00:01:37,650 --> 00:01:43,110
you probably recently have seen the FBI

46
00:01:39,840 --> 00:01:45,149
San Bernardino case against apple and

47
00:01:43,110 --> 00:01:47,399
that's just<font color="#E5E5E5"> like one example on why it</font>

48
00:01:45,149 --> 00:01:48,780
is why people<font color="#CCCCCC"> are interested in securing</font>

49
00:01:47,399 --> 00:01:51,299
data on a mobile device and

50
00:01:48,780 --> 00:01:52,619
traditionally we have data stored on a

51
00:01:51,299 --> 00:01:54,899
server where we have tight controls

52
00:01:52,619 --> 00:01:56,219
where we can have it<font color="#CCCCCC"> in our data center</font>

53
00:01:54,899 --> 00:01:58,110
<font color="#E5E5E5">and we know</font><font color="#CCCCCC"> exactly where the data is</font>

54
00:01:56,219 --> 00:02:00,210
and how to get to it<font color="#E5E5E5"> but on a mobile</font>

55
00:01:58,110 --> 00:02:01,290
device the data is<font color="#CCCCCC"> on the device and</font>

56
00:02:00,210 --> 00:02:03,119
it's<font color="#E5E5E5"> being carried around and it's</font>

57
00:02:01,290 --> 00:02:05,430
<font color="#E5E5E5">mobile so it's much harder to actually</font>

58
00:02:03,119 --> 00:02:08,310
enforce controls on where your data is

59
00:02:05,430 --> 00:02:09,750
and what Cook has<font color="#E5E5E5"> access to it and if</font>

60
00:02:08,310 --> 00:02:12,209
you<font color="#E5E5E5"> look at how people use mobile</font>

61
00:02:09,750 --> 00:02:14,210
devices we see<font color="#E5E5E5"> that they're mostly using</font>

62
00:02:12,209 --> 00:02:16,220
applications so if you some grass

63
00:02:14,210 --> 00:02:17,630
see that ninety<font color="#CCCCCC"> percent basically if</font>

64
00:02:16,220 --> 00:02:19,520
people are using mostly apps on the

65
00:02:17,630 --> 00:02:21,079
device and not using the mobile that so

66
00:02:19,520 --> 00:02:23,030
they actually<font color="#E5E5E5"> have apps which are able</font>

67
00:02:21,080 --> 00:02:25,820
to store data on the device which term

68
00:02:23,030 --> 00:02:27,860
which may store data there and then so

69
00:02:25,820 --> 00:02:29,000
the problem is we need this mobility

70
00:02:27,860 --> 00:02:31,130
right that's<font color="#E5E5E5"> the purpose of these</font>

71
00:02:29,000 --> 00:02:32,450
<font color="#E5E5E5">devices so the data which we have is</font>

72
00:02:31,130 --> 00:02:34,130
being<font color="#E5E5E5"> carried around constantly and</font>

73
00:02:32,450 --> 00:02:37,760
there in that exposes them much more

74
00:02:34,130 --> 00:02:40,130
than previously for example I'm use some

75
00:02:37,760 --> 00:02:41,899
statistic from 2013 in<font color="#E5E5E5"> the US they were</font>

76
00:02:40,130 --> 00:02:44,180
1.4 million phones which<font color="#E5E5E5"> have been lost</font>

77
00:02:41,900 --> 00:02:46,340
and 3.1 million phones which have been

78
00:02:44,180 --> 00:02:48,860
stolen<font color="#E5E5E5"> and while those probably we're</font>

79
00:02:46,340 --> 00:02:50,240
not targeted um stolen phones you could

80
00:02:48,860 --> 00:02:51,950
imagine somebody targeting you to get

81
00:02:50,240 --> 00:02:53,270
your data and sealing the phone so this

82
00:02:51,950 --> 00:02:55,880
is<font color="#CCCCCC"> something we need to consider</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> an</font>

83
00:02:53,270 --> 00:02:57,890
attack vector and what makes this all

84
00:02:55,880 --> 00:02:59,269
pretty challenging is that while while

85
00:02:57,890 --> 00:03:01,369
we need to<font color="#E5E5E5"> secure the data we also need</font>

86
00:02:59,270 --> 00:03:03,020
to<font color="#E5E5E5"> make it accessible accessible meaning</font>

87
00:03:01,370 --> 00:03:05,900
the data<font color="#E5E5E5"> has to be there if the user</font>

88
00:03:03,020 --> 00:03:07,160
wants it so if we<font color="#E5E5E5"> have we caching data</font>

89
00:03:05,900 --> 00:03:08,870
on the device so if you're on your

90
00:03:07,160 --> 00:03:12,470
airplane you can read your<font color="#E5E5E5"> emails or you</font>

91
00:03:08,870 --> 00:03:13,880
can read a PF read documents if you want

92
00:03:12,470 --> 00:03:15,080
to login into your apps you don't want

93
00:03:13,880 --> 00:03:17,299
to type<font color="#CCCCCC"> user names and passwords every</font>

94
00:03:15,080 --> 00:03:18,800
time so we need to store access<font color="#E5E5E5"> tokens</font>

95
00:03:17,300 --> 00:03:20,870
or credentials in some way or form on

96
00:03:18,800 --> 00:03:22,490
the device and we have to do this<font color="#E5E5E5"> in a</font>

97
00:03:20,870 --> 00:03:25,040
way<font color="#CCCCCC"> so that we</font><font color="#E5E5E5"> actually make it usable</font>

98
00:03:22,490 --> 00:03:27,350
for the user so we don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to have</font>

99
00:03:25,040 --> 00:03:28,340
security controlled which are a super in

100
00:03:27,350 --> 00:03:30,350
foal to the users that<font color="#E5E5E5"> they either</font>

101
00:03:28,340 --> 00:03:31,730
<font color="#CCCCCC">disable them or get your</font><font color="#E5E5E5"> anthem so we</font>

102
00:03:30,350 --> 00:03:32,960
need to find<font color="#CCCCCC"> a trade-off between all</font>

103
00:03:31,730 --> 00:03:34,820
these different things<font color="#E5E5E5"> so that we don't</font>

104
00:03:32,960 --> 00:03:39,230
end up coming up<font color="#E5E5E5"> as an observed</font>

105
00:03:34,820 --> 00:03:41,630
procedure<font color="#E5E5E5"> like in this comic thanks</font>

106
00:03:39,230 --> 00:03:42,920
thanks Dana so everyone's heard<font color="#CCCCCC"> the</font>

107
00:03:41,630 --> 00:03:45,200
phrase there's no such thing<font color="#E5E5E5"> as absolute</font>

108
00:03:42,920 --> 00:03:47,690
security um but let's take a deeper look

109
00:03:45,200 --> 00:03:50,750
<font color="#E5E5E5">at who you're actually worried about</font>

110
00:03:47,690 --> 00:03:52,040
<font color="#E5E5E5">looking at the date on your device so</font>

111
00:03:50,750 --> 00:03:54,680
we'll go<font color="#CCCCCC"> through a</font><font color="#E5E5E5"> couple categories</font>

112
00:03:52,040 --> 00:03:55,910
here so the remote attacker you know

113
00:03:54,680 --> 00:03:57,700
this is someone who<font color="#CCCCCC"> wants to connect</font>

114
00:03:55,910 --> 00:04:00,500
your<font color="#E5E5E5"> device remotely over the Internet</font>

115
00:03:57,700 --> 00:04:02,630
we have the coffee shop attacker which

116
00:04:00,500 --> 00:04:04,490
is something<font color="#CCCCCC"> like you're in a Starbucks</font>

117
00:04:02,630 --> 00:04:07,370
and on an insecure Wi-Fi and somebody

118
00:04:04,490 --> 00:04:10,250
might<font color="#CCCCCC"> be intercepting or modifying the</font>

119
00:04:07,370 --> 00:04:11,960
traffic you're sending then the casual

120
00:04:10,250 --> 00:04:13,400
thief someone who really probably

121
00:04:11,960 --> 00:04:14,930
doesn't care at all about the data on

122
00:04:13,400 --> 00:04:17,480
your phone but<font color="#CCCCCC"> they want the hardware to</font>

123
00:04:14,930 --> 00:04:20,329
flip and make a you know quick buck on

124
00:04:17,480 --> 00:04:22,520
that way and then targeted attacks

125
00:04:20,329 --> 00:04:25,190
someone who's specifically coming for

126
00:04:22,520 --> 00:04:26,180
you specifically and the data on your

127
00:04:25,190 --> 00:04:28,940
phone

128
00:04:26,180 --> 00:04:31,300
and then finally<font color="#E5E5E5"> nation states which</font>

129
00:04:28,940 --> 00:04:34,910
have a much higher budget and time to

130
00:04:31,300 --> 00:04:36,699
make targeted attacks against you so if

131
00:04:34,910 --> 00:04:39,889
we kind of put these on a graph of

132
00:04:36,699 --> 00:04:42,380
sophistication and effort we can kind<font color="#CCCCCC"> of</font>

133
00:04:39,889 --> 00:04:44,990
see you<font color="#CCCCCC"> know obviously the casual thief</font>

134
00:04:42,380 --> 00:04:46,789
is very unsophisticated and requires

135
00:04:44,990 --> 00:04:48,729
very little effort<font color="#E5E5E5"> to snatch something</font>

136
00:04:46,789 --> 00:04:51,380
from you and all the way up to

137
00:04:48,729 --> 00:04:53,630
<font color="#CCCCCC">nation-states you know this</font>

138
00:04:51,380 --> 00:04:56,180
sophistication is much higher and much

139
00:04:53,630 --> 00:04:59,810
more effort involved to do something

140
00:04:56,180 --> 00:05:01,460
<font color="#E5E5E5">like this and so the defense against</font>

141
00:04:59,810 --> 00:05:03,919
these sort of scales along with this

142
00:05:01,460 --> 00:05:05,419
graph here<font color="#E5E5E5"> and it's important to kind of</font>

143
00:05:03,919 --> 00:05:09,380
know who who you're actually worried

144
00:05:05,419 --> 00:05:14,630
about<font color="#E5E5E5"> looking at your data so talk now</font>

145
00:05:09,380 --> 00:05:17,570
about mobile data security a quick you

146
00:05:14,630 --> 00:05:19,159
<font color="#E5E5E5">know intro to full disk encryption files</font>

147
00:05:17,570 --> 00:05:22,310
are transparently decrypted when they're

148
00:05:19,160 --> 00:05:24,590
red and transparently encrypted when

149
00:05:22,310 --> 00:05:26,780
<font color="#E5E5E5">written to application sandboxes for</font>

150
00:05:24,590 --> 00:05:29,239
example and the production really only

151
00:05:26,780 --> 00:05:31,369
exists when the device is off you know

152
00:05:29,240 --> 00:05:33,440
in<font color="#E5E5E5"> combination with a strong passcode of</font>

153
00:05:31,370 --> 00:05:36,080
course but we need<font color="#CCCCCC"> something more</font>

154
00:05:33,440 --> 00:05:40,280
fine-grained and you know more control

155
00:05:36,080 --> 00:05:42,830
here this is very binary on or<font color="#CCCCCC"> off so</font>

156
00:05:40,280 --> 00:05:45,919
with that we'll look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> how that</font><font color="#E5E5E5"> works</font>

157
00:05:42,830 --> 00:05:50,690
<font color="#E5E5E5">on iOS and then it will tell you about</font>

158
00:05:45,919 --> 00:05:52,880
<font color="#CCCCCC">that</font><font color="#E5E5E5"> thanks so um in iOS really the</font><font color="#CCCCCC"> the</font>

159
00:05:50,690 --> 00:05:54,889
whole<font color="#E5E5E5"> process starts at boot time and we</font>

160
00:05:52,880 --> 00:05:56,419
will talk about the Android side about

161
00:05:54,889 --> 00:05:59,030
that and how things are different there

162
00:05:56,419 --> 00:06:00,530
so in iOS<font color="#CCCCCC"> Apple has the big advantage</font>

163
00:05:59,030 --> 00:06:02,539
that they can have that produced<font color="#CCCCCC"> the</font>

164
00:06:00,530 --> 00:06:04,008
hardware and<font color="#CCCCCC"> the producer software so</font>

165
00:06:02,539 --> 00:06:05,330
they can build hardware support for

166
00:06:04,009 --> 00:06:06,620
certain software features that can<font color="#E5E5E5"> build</font>

167
00:06:05,330 --> 00:06:09,620
suffer support for the latest hardware

168
00:06:06,620 --> 00:06:11,240
so they can for them it's much easier<font color="#E5E5E5"> to</font>

169
00:06:09,620 --> 00:06:12,710
build these systems from the ground up

170
00:06:11,240 --> 00:06:15,409
and make them secure all<font color="#CCCCCC"> the way through</font>

171
00:06:12,710 --> 00:06:16,698
so<font color="#CCCCCC"> they um they verify the entire boot</font>

172
00:06:15,409 --> 00:06:20,030
<font color="#E5E5E5">chain there is a harpy root of trust</font>

173
00:06:16,699 --> 00:06:21,440
which is a public key a public you<font color="#E5E5E5"> can</font>

174
00:06:20,030 --> 00:06:23,239
be verified which is impact into the

175
00:06:21,440 --> 00:06:26,389
hardware and then the entire boot shine

176
00:06:23,240 --> 00:06:28,039
from the bootloader over even the the

177
00:06:26,389 --> 00:06:29,870
baseband<font color="#E5E5E5"> and kernel and everything like</font>

178
00:06:28,039 --> 00:06:31,340
this will<font color="#E5E5E5"> be verified when the system</font>

179
00:06:29,870 --> 00:06:33,830
boots up let me know that we have a

180
00:06:31,340 --> 00:06:35,950
trusted system running and then when you

181
00:06:33,830 --> 00:06:37,210
install updates that's the same thing<font color="#E5E5E5"> I</font>

182
00:06:35,950 --> 00:06:40,479
the updates have to be signed by Apple

183
00:06:37,210 --> 00:06:42,460
if you've ever tried to install an iOS 8

184
00:06:40,480 --> 00:06:43,630
currently on an iOS 9 device you will

185
00:06:42,460 --> 00:06:45,729
notice that you<font color="#E5E5E5"> cannot do that anymore</font>

186
00:06:43,630 --> 00:06:46,990
because every time you install it there

187
00:06:45,730 --> 00:06:48,550
will<font color="#E5E5E5"> be the second challenge response</font>

188
00:06:46,990 --> 00:06:50,530
kind<font color="#E5E5E5"> of protocol where your phone</font>

189
00:06:48,550 --> 00:06:51,790
actually phones out to apple and they

190
00:06:50,530 --> 00:06:54,210
need<font color="#E5E5E5"> to sign it specifically for your</font>

191
00:06:51,790 --> 00:06:56,410
phone in order to you to install<font color="#CCCCCC"> it so</font>

192
00:06:54,210 --> 00:06:58,030
<font color="#CCCCCC">you're not</font><font color="#E5E5E5"> able to downgrade and so</font>

193
00:06:56,410 --> 00:07:01,150
you're only able to<font color="#E5E5E5"> install the latest</font>

194
00:06:58,030 --> 00:07:04,390
version which Apple deems current or is

195
00:07:01,150 --> 00:07:05,799
secure for you to be used and then now

196
00:07:04,390 --> 00:07:07,419
<font color="#E5E5E5">that we have a running operating system</font>

197
00:07:05,800 --> 00:07:09,400
all the apps on top of that are also

198
00:07:07,420 --> 00:07:11,320
signed so through the absolute process

199
00:07:09,400 --> 00:07:13,750
all apps are also signed by Apple and<font color="#E5E5E5"> so</font>

200
00:07:11,320 --> 00:07:15,159
we kind of know<font color="#CCCCCC"> we're all software it is</font>

201
00:07:13,750 --> 00:07:17,110
running on<font color="#E5E5E5"> the device is coming from</font>

202
00:07:15,160 --> 00:07:18,700
since I'm everything<font color="#E5E5E5"> has been signed and</font>

203
00:07:17,110 --> 00:07:21,820
there is no no way to bypass those

204
00:07:18,700 --> 00:07:23,710
checks in the ideal case now<font color="#E5E5E5"> that we</font>

205
00:07:21,820 --> 00:07:25,599
have this let's talk<font color="#E5E5E5"> about how we how we</font>

206
00:07:23,710 --> 00:07:27,340
get to get secure storage and encryption

207
00:07:25,600 --> 00:07:29,290
on there there's a few key components

208
00:07:27,340 --> 00:07:31,299
which we<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> actually make that</font>

209
00:07:29,290 --> 00:07:32,260
happen on a mobile device the first

210
00:07:31,300 --> 00:07:34,030
thing<font color="#CCCCCC"> is we need to have a device</font>

211
00:07:32,260 --> 00:07:35,740
passcode we need something which is not

212
00:07:34,030 --> 00:07:37,239
stored on the device because if it's on

213
00:07:35,740 --> 00:07:39,520
<font color="#CCCCCC">the device and</font><font color="#E5E5E5"> you steal it from someone</font>

214
00:07:37,240 --> 00:07:41,710
then<font color="#CCCCCC"> you have the encryption key and you</font>

215
00:07:39,520 --> 00:07:44,020
have the data<font color="#E5E5E5"> and you haven't made any</font>

216
00:07:41,710 --> 00:07:45,400
progress there so the device passcode is

217
00:07:44,020 --> 00:07:47,229
used to derive an encryption key

218
00:07:45,400 --> 00:07:48,789
whenever you type it in and then that

219
00:07:47,230 --> 00:07:50,470
key is used to encrypt data which is<font color="#E5E5E5"> on</font>

220
00:07:48,790 --> 00:07:52,240
<font color="#CCCCCC">the device</font><font color="#E5E5E5"> and then when you lock your</font>

221
00:07:50,470 --> 00:07:54,100
phone that key can be wiped from memory

222
00:07:52,240 --> 00:07:55,980
and it will not be on there until<font color="#CCCCCC"> you</font>

223
00:07:54,100 --> 00:07:59,170
unlock it the next time so you have

224
00:07:55,980 --> 00:08:00,940
protection from the time the user

225
00:07:59,170 --> 00:08:02,560
unlocks the device<font color="#CCCCCC"> to let's being locked</font>

226
00:08:00,940 --> 00:08:04,140
so that's what one step further than

227
00:08:02,560 --> 00:08:06,370
what we had from full disk encryption

228
00:08:04,140 --> 00:08:08,260
the problem is that users to<font color="#CCCCCC"> choose</font>

229
00:08:06,370 --> 00:08:09,970
<font color="#CCCCCC">really weak passcodes one two three four</font>

230
00:08:08,260 --> 00:08:12,219
<font color="#E5E5E5">or like some sort of patterns on their</font>

231
00:08:09,970 --> 00:08:13,720
pass on the keypads so these are prone

232
00:08:12,220 --> 00:08:15,100
to offline<font color="#E5E5E5"> brute</font><font color="#CCCCCC"> force attacks if you</font>

233
00:08:13,720 --> 00:08:17,460
could have copy the data offline and

234
00:08:15,100 --> 00:08:19,690
then you can root<font color="#E5E5E5"> for us to pass codes</font>

235
00:08:17,460 --> 00:08:23,469
so in order to prevent that we need to

236
00:08:19,690 --> 00:08:24,610
<font color="#E5E5E5">rely on some hardware the the weather it</font>

237
00:08:23,470 --> 00:08:26,020
usually works is that there's some<font color="#CCCCCC"> sort</font>

238
00:08:24,610 --> 00:08:29,140
of hardware root of trust in the device

239
00:08:26,020 --> 00:08:30,340
and on<font color="#CCCCCC"> Apple side there is a unique</font>

240
00:08:29,140 --> 00:08:32,799
encryption key which is baked into

241
00:08:30,340 --> 00:08:34,990
hardware at manufacturing time and that

242
00:08:32,799 --> 00:08:37,750
key is not readable from software<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font>

243
00:08:34,990 --> 00:08:39,460
can read<font color="#E5E5E5"> it out and copy it off any</font>

244
00:08:37,750 --> 00:08:40,870
operation involving this key will be

245
00:08:39,460 --> 00:08:43,150
really have to be<font color="#E5E5E5"> performed on the</font>

246
00:08:40,870 --> 00:08:44,740
device and so<font color="#CCCCCC"> that kind of ties you on</font>

247
00:08:43,150 --> 00:08:46,900
to the device for brute force attacks

248
00:08:44,740 --> 00:08:48,790
and since you need to use this hardware

249
00:08:46,900 --> 00:08:51,730
component you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> have proof</font>

250
00:08:48,790 --> 00:08:53,290
<font color="#E5E5E5">controlled so you can say Oh after a</font>

251
00:08:51,730 --> 00:08:54,640
certain amount<font color="#E5E5E5"> of times we delay you</font><font color="#CCCCCC"> by</font>

252
00:08:53,290 --> 00:08:57,490
<font color="#E5E5E5">hardware and there's no way to really</font>

253
00:08:54,640 --> 00:08:59,260
bypass that similarly you can enforce

254
00:08:57,490 --> 00:09:00,940
device<font color="#CCCCCC"> wipes because you</font><font color="#E5E5E5"> can in</font><font color="#CCCCCC"> Hardware</font>

255
00:08:59,260 --> 00:09:02,920
<font color="#E5E5E5">count off when you try to unlock</font><font color="#CCCCCC"> your</font>

256
00:09:00,940 --> 00:09:04,690
device and<font color="#CCCCCC"> if you if you hit a certain</font>

257
00:09:02,920 --> 00:09:07,689
threshold you could<font color="#E5E5E5"> just delete all the</font>

258
00:09:04,690 --> 00:09:10,990
encryption keys and prevent access to

259
00:09:07,690 --> 00:09:12,520
the data forever basically so now that

260
00:09:10,990 --> 00:09:15,040
<font color="#CCCCCC">we know these two concepts like to see</font>

261
00:09:12,520 --> 00:09:17,110
how this all<font color="#E5E5E5"> fits together in the iOS</font>

262
00:09:15,040 --> 00:09:18,219
encryption scheme this<font color="#E5E5E5"> is for</font><font color="#CCCCCC"> the file</font>

263
00:09:17,110 --> 00:09:19,900
encryption I will talk about the

264
00:09:18,220 --> 00:09:22,150
keychain right<font color="#E5E5E5"> after this because they</font>

265
00:09:19,900 --> 00:09:24,730
kind of related so down<font color="#E5E5E5"> here in the</font>

266
00:09:22,150 --> 00:09:26,500
corner we have a file and every file on

267
00:09:24,730 --> 00:09:28,660
iOS has a separate file key under which

268
00:09:26,500 --> 00:09:30,850
it is encrypted and that file key is

269
00:09:28,660 --> 00:09:33,069
just stored with the file metadata so

270
00:09:30,850 --> 00:09:34,720
it's<font color="#E5E5E5"> just on the file system so it</font>

271
00:09:33,070 --> 00:09:36,730
doesn't<font color="#E5E5E5"> really help you all that much if</font>

272
00:09:34,720 --> 00:09:39,190
you would store it just that way so what

273
00:09:36,730 --> 00:09:41,620
happens is that we have the<font color="#E5E5E5"> file system</font>

274
00:09:39,190 --> 00:09:43,180
key which is<font color="#E5E5E5"> unique for voted for every</font>

275
00:09:41,620 --> 00:09:46,000
installation of iOS on your device and

276
00:09:43,180 --> 00:09:47,500
<font color="#CCCCCC">that key is used to encrypt on that file</font>

277
00:09:46,000 --> 00:09:49,390
key so that file key is protected under

278
00:09:47,500 --> 00:09:50,920
<font color="#E5E5E5">the file system key and then that file</font>

279
00:09:49,390 --> 00:09:52,810
system key is protected under this hard

280
00:09:50,920 --> 00:09:55,270
work here I've been<font color="#E5E5E5"> talking about so we</font>

281
00:09:52,810 --> 00:09:56,829
basically tie this file he we<font color="#CCCCCC"> have the</font>

282
00:09:55,270 --> 00:09:58,810
file system key to the hardware<font color="#E5E5E5"> so you</font>

283
00:09:56,830 --> 00:10:00,130
can decrypt it off the device<font color="#E5E5E5"> you can</font>

284
00:09:58,810 --> 00:10:03,010
only decrypt it on the device when you

285
00:10:00,130 --> 00:10:04,000
<font color="#E5E5E5">have that</font><font color="#CCCCCC"> Hardware key available that</font>

286
00:10:03,010 --> 00:10:05,439
doesn't<font color="#E5E5E5"> really help you much if you</font>

287
00:10:04,000 --> 00:10:06,910
steal the phone<font color="#E5E5E5"> because then you have</font>

288
00:10:05,440 --> 00:10:08,680
<font color="#E5E5E5">the hardware and the key in the file and</font>

289
00:10:06,910 --> 00:10:09,939
you can<font color="#E5E5E5"> still decrypt everything so</font>

290
00:10:08,680 --> 00:10:13,120
<font color="#E5E5E5">that's where we</font><font color="#CCCCCC"> need to have the</font>

291
00:10:09,940 --> 00:10:14,620
passcode and the<font color="#E5E5E5"> passcode is used using</font>

292
00:10:13,120 --> 00:10:17,290
pbk<font color="#CCCCCC"> tf2 which is a key derivation</font>

293
00:10:14,620 --> 00:10:19,030
function to UM derive a pass code key

294
00:10:17,290 --> 00:10:20,740
and then that key together with the

295
00:10:19,030 --> 00:10:21,910
hardware key is used<font color="#E5E5E5"> to have like</font>

296
00:10:20,740 --> 00:10:23,830
another bunch of keys which we'll talk

297
00:10:21,910 --> 00:10:25,780
about in a second and those are then

298
00:10:23,830 --> 00:10:27,790
used to encrypt the file key so<font color="#E5E5E5"> you have</font>

299
00:10:25,780 --> 00:10:29,500
<font color="#E5E5E5">something which goes</font><font color="#CCCCCC"> into the file key</font>

300
00:10:27,790 --> 00:10:30,610
encryption which comes from the<font color="#E5E5E5"> hardware</font>

301
00:10:29,500 --> 00:10:33,130
and<font color="#CCCCCC"> you have something which comes from</font>

302
00:10:30,610 --> 00:10:34,360
the passcode so you tied to hardware and

303
00:10:33,130 --> 00:10:37,930
to something the user knows at this

304
00:10:34,360 --> 00:10:39,670
point so let's look<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more at</font>

305
00:10:37,930 --> 00:10:41,109
why we need this file system key in the

306
00:10:39,670 --> 00:10:42,819
first place because you could just<font color="#E5E5E5"> use</font>

307
00:10:41,110 --> 00:10:46,210
the<font color="#E5E5E5"> hard way key the main reason</font><font color="#CCCCCC"> is that</font>

308
00:10:42,820 --> 00:10:48,280
if you<font color="#E5E5E5"> want to delete</font><font color="#CCCCCC"> your your iphone</font>

309
00:10:46,210 --> 00:10:50,350
or ipad remotely for example or after

310
00:10:48,280 --> 00:10:52,900
some<font color="#E5E5E5"> of some encryption attempts you can</font>

311
00:10:50,350 --> 00:10:54,250
just delete that key and all your data

312
00:10:52,900 --> 00:10:56,260
on the file system will be inaccessible

313
00:10:54,250 --> 00:10:57,580
you couldn't delete the hardware key

314
00:10:56,260 --> 00:10:59,020
because<font color="#CCCCCC"> that's baked into hardware so</font>

315
00:10:57,580 --> 00:11:00,930
you need to<font color="#E5E5E5"> have some intermediary key</font>

316
00:10:59,020 --> 00:11:03,310
there

317
00:11:00,930 --> 00:11:05,229
so this year it looks a bit complicated

318
00:11:03,310 --> 00:11:07,390
<font color="#E5E5E5">so let's look at this into a bit more</font>

319
00:11:05,230 --> 00:11:09,820
detail to see what's going on<font color="#E5E5E5"> here so</font>

320
00:11:07,390 --> 00:11:11,500
there's basically three different class

321
00:11:09,820 --> 00:11:12,910
keys and they're called NS fire

322
00:11:11,500 --> 00:11:14,740
protection none and ass fire protection

323
00:11:12,910 --> 00:11:17,860
complete until first user authentication

324
00:11:14,740 --> 00:11:19,420
and<font color="#CCCCCC"> anas fire protection complete and</font>

325
00:11:17,860 --> 00:11:21,220
they kind<font color="#E5E5E5"> of do what you think they</font>

326
00:11:19,420 --> 00:11:22,569
would do I<font color="#E5E5E5"> don't know if if it's</font>

327
00:11:21,220 --> 00:11:24,010
intuitive for you for me I<font color="#E5E5E5"> had a hard</font>

328
00:11:22,570 --> 00:11:26,950
time figuring that out the first<font color="#E5E5E5"> time</font>

329
00:11:24,010 --> 00:11:28,480
but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> idea is that the the first one</font>

330
00:11:26,950 --> 00:11:30,610
here the NS fire protection none is only

331
00:11:28,480 --> 00:11:32,380
tied into the hardware key and it's not

332
00:11:30,610 --> 00:11:34,060
tied into anything else and the other

333
00:11:32,380 --> 00:11:36,270
two are actually also using the passcode

334
00:11:34,060 --> 00:11:40,180
but in two different ways the first one

335
00:11:36,270 --> 00:11:41,500
will keep data encrypted until you

336
00:11:40,180 --> 00:11:43,479
unlock your<font color="#CCCCCC"> phone the very first time</font>

337
00:11:41,500 --> 00:11:46,630
when you boot it up so if you<font color="#CCCCCC"> phone is</font>

338
00:11:43,480 --> 00:11:47,740
off you turn it<font color="#E5E5E5"> on and then its data is</font>

339
00:11:46,630 --> 00:11:49,930
still encrypted until you type in the

340
00:11:47,740 --> 00:11:51,790
passcode and then that key is<font color="#E5E5E5"> being</font>

341
00:11:49,930 --> 00:11:54,279
generated and kept in memory until you

342
00:11:51,790 --> 00:11:55,300
turn your<font color="#CCCCCC"> phone off basically so that's</font>

343
00:11:54,279 --> 00:11:57,580
kind of similar to<font color="#E5E5E5"> what full disk</font>

344
00:11:55,300 --> 00:11:59,380
encryption traditionally does and then

345
00:11:57,580 --> 00:12:01,000
the second one they are complete is the

346
00:11:59,380 --> 00:12:02,470
one which<font color="#CCCCCC"> is being back from memory</font>

347
00:12:01,000 --> 00:12:04,480
every time you lock your phone so that's

348
00:12:02,470 --> 00:12:05,740
a much stronger protection because if

349
00:12:04,480 --> 00:12:07,720
your phone is locked and somebody gets

350
00:12:05,740 --> 00:12:08,740
it that key is not available<font color="#E5E5E5"> to them and</font>

351
00:12:07,720 --> 00:12:11,500
they will<font color="#E5E5E5"> not get to data which is</font>

352
00:12:08,740 --> 00:12:14,589
encrypted under this so these<font color="#E5E5E5"> are the</font>

353
00:12:11,500 --> 00:12:16,000
three<font color="#E5E5E5"> main categories which iOS has and</font>

354
00:12:14,589 --> 00:12:18,070
<font color="#E5E5E5">you can choose from as a developer when</font>

355
00:12:16,000 --> 00:12:20,770
you implement things and then I'm

356
00:12:18,070 --> 00:12:23,620
talking<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> keychain which is um</font>

357
00:12:20,770 --> 00:12:25,000
just<font color="#CCCCCC"> a way of</font><font color="#E5E5E5"> storing smaller amounts of</font>

358
00:12:23,620 --> 00:12:26,320
structured data on the device if<font color="#E5E5E5"> you</font>

359
00:12:25,000 --> 00:12:29,200
don't need files that one actually

360
00:12:26,320 --> 00:12:30,550
functions quite similarly and internally

361
00:12:29,200 --> 00:12:32,230
it's just a sequel a database which is

362
00:12:30,550 --> 00:12:33,699
<font color="#E5E5E5">on the file system and every piece of</font>

363
00:12:32,230 --> 00:12:36,040
information you<font color="#E5E5E5"> want to store and there</font>

364
00:12:33,700 --> 00:12:38,020
is just an entry in that sequel I'd

365
00:12:36,040 --> 00:12:39,939
database about every entry is encrypted

366
00:12:38,020 --> 00:12:42,040
individually depending on when you have

367
00:12:39,940 --> 00:12:44,020
access to<font color="#CCCCCC"> it so it uses similar things</font>

368
00:12:42,040 --> 00:12:45,849
have a<font color="#E5E5E5"> table in a second the main</font>

369
00:12:44,020 --> 00:12:47,589
problem<font color="#CCCCCC"> with it is though that if you</font>

370
00:12:45,850 --> 00:12:49,540
uninstall an application it does not

371
00:12:47,589 --> 00:12:50,890
delete the keychain entry so you may

372
00:12:49,540 --> 00:12:53,770
have<font color="#E5E5E5"> an app on there which you tried a</font>

373
00:12:50,890 --> 00:12:55,270
year ago and that key key chain entry is

374
00:12:53,770 --> 00:12:57,339
still on there so if it's<font color="#E5E5E5"> a later point</font>

375
00:12:55,270 --> 00:12:58,750
in time somebody if you sell your device

376
00:12:57,339 --> 00:13:00,880
and<font color="#CCCCCC"> you don't pipe it or if somebody</font>

377
00:12:58,750 --> 00:13:02,860
gets your device to borrowers it they

378
00:13:00,880 --> 00:13:05,010
may get access to whatever you had in

379
00:13:02,860 --> 00:13:07,240
the kitchen at that point in time

380
00:13:05,010 --> 00:13:08,880
internally it looks<font color="#CCCCCC"> very similar to what</font>

381
00:13:07,240 --> 00:13:11,079
<font color="#CCCCCC">we just talked about</font><font color="#E5E5E5"> for file encryption</font>

382
00:13:08,880 --> 00:13:12,220
armanda on the left side here you have

383
00:13:11,079 --> 00:13:14,000
the list of the diff of the three

384
00:13:12,220 --> 00:13:16,060
<font color="#CCCCCC">categories for file encryption and the</font>

385
00:13:14,000 --> 00:13:19,100
column is the<font color="#E5E5E5"> equivalent keychain class</font>

386
00:13:16,060 --> 00:13:21,739
they also have nice long names<font color="#E5E5E5"> Kasich at</font>

387
00:13:19,100 --> 00:13:24,050
are accessible always after<font color="#E5E5E5"> first unlock</font>

388
00:13:21,740 --> 00:13:25,640
or<font color="#E5E5E5"> when unlocked and I think they're a</font>

389
00:13:24,050 --> 00:13:27,410
<font color="#E5E5E5">little more intuitive but they're</font>

390
00:13:25,640 --> 00:13:29,620
exactly what you expect what the

391
00:13:27,410 --> 00:13:31,670
correlation for the<font color="#E5E5E5"> file system one was</font>

392
00:13:29,620 --> 00:13:33,620
there's an<font color="#E5E5E5"> additional category called</font>

393
00:13:31,670 --> 00:13:35,540
when passcode set and the<font color="#E5E5E5"> reason for</font>

394
00:13:33,620 --> 00:13:37,220
that is<font color="#E5E5E5"> if</font><font color="#CCCCCC"> people realize if you're an</font>

395
00:13:35,540 --> 00:13:38,839
app developer and you want to store data

396
00:13:37,220 --> 00:13:40,580
on the device and we now learned that

397
00:13:38,840 --> 00:13:42,710
you need to have a passcode for actually

398
00:13:40,580 --> 00:13:44,330
having security on there you<font color="#E5E5E5"> don't know</font>

399
00:13:42,710 --> 00:13:46,310
if you cannot enforce that your users

400
00:13:44,330 --> 00:13:47,600
have pass codes on the<font color="#CCCCCC"> devices so what</font>

401
00:13:46,310 --> 00:13:49,430
do you do in that<font color="#E5E5E5"> case do you still</font>

402
00:13:47,600 --> 00:13:52,370
store the data do<font color="#E5E5E5"> you want to warn the</font>

403
00:13:49,430 --> 00:13:54,260
user or do you just<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to just ignore</font>

404
00:13:52,370 --> 00:13:56,570
it basically<font color="#CCCCCC"> in not store and have like</font>

405
00:13:54,260 --> 00:13:58,040
a usability problem so with this this

406
00:13:56,570 --> 00:13:59,720
function<font color="#E5E5E5"> you at least can check what's</font>

407
00:13:58,040 --> 00:14:01,310
going on and you can only store data if

408
00:13:59,720 --> 00:14:05,420
the user has a passcode and that's

409
00:14:01,310 --> 00:14:06,619
available since iOS 8 so you may wonder

410
00:14:05,420 --> 00:14:08,209
why do we need<font color="#E5E5E5"> all of these different</font>

411
00:14:06,620 --> 00:14:10,550
categories in the first place why don't

412
00:14:08,210 --> 00:14:12,170
we<font color="#CCCCCC"> just have the most secure one for all</font>

413
00:14:10,550 --> 00:14:14,420
data which<font color="#CCCCCC"> we would restore on the</font>

414
00:14:12,170 --> 00:14:16,459
device the problem is<font color="#CCCCCC"> that we need</font>

415
00:14:14,420 --> 00:14:18,260
different data available at different

416
00:14:16,460 --> 00:14:20,390
points in time if you turn on your phone

417
00:14:18,260 --> 00:14:21,830
<font color="#E5E5E5">you</font><font color="#CCCCCC"> kind of expect that you can</font><font color="#E5E5E5"> receive</font>

418
00:14:20,390 --> 00:14:25,490
phone calls at this time or text

419
00:14:21,830 --> 00:14:27,680
messages or that you can use Find My

420
00:14:25,490 --> 00:14:29,210
iPhone to locate your device so certain

421
00:14:27,680 --> 00:14:31,550
functionality this needs to be available

422
00:14:29,210 --> 00:14:34,190
<font color="#E5E5E5">always when</font><font color="#CCCCCC"> you turn your device on so</font>

423
00:14:31,550 --> 00:14:36,579
that data cannot really be encrypted at

424
00:14:34,190 --> 00:14:38,690
that point<font color="#E5E5E5"> in time then similarly</font>

425
00:14:36,580 --> 00:14:39,980
there's others which you can protect a

426
00:14:38,690 --> 00:14:41,420
bit more if you you don't necessarily

427
00:14:39,980 --> 00:14:43,220
need to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> your contact</font><font color="#E5E5E5"> Wi-Fi</font>

428
00:14:41,420 --> 00:14:45,229
credentials available right away it's

429
00:14:43,220 --> 00:14:47,030
<font color="#E5E5E5">okay to unlock your</font><font color="#CCCCCC"> device once first</font>

430
00:14:45,230 --> 00:14:49,550
<font color="#E5E5E5">and only then</font><font color="#CCCCCC"> you have those available</font>

431
00:14:47,030 --> 00:14:51,770
so Apple chooses to encrypt certain

432
00:14:49,550 --> 00:14:54,890
things by<font color="#E5E5E5"> default and in this category</font>

433
00:14:51,770 --> 00:14:57,170
after<font color="#E5E5E5"> first unlock and then again even</font>

434
00:14:54,890 --> 00:14:58,130
others such as Safari passwords you

435
00:14:57,170 --> 00:14:59,530
<font color="#E5E5E5">don't need to have you as a very</font>

436
00:14:58,130 --> 00:15:01,700
passwords available when your phone is

437
00:14:59,530 --> 00:15:03,829
locked because you don't use safari at

438
00:15:01,700 --> 00:15:06,170
that point in time so those are even

439
00:15:03,830 --> 00:15:07,670
stricter protected and<font color="#CCCCCC"> this is example</font>

440
00:15:06,170 --> 00:15:08,870
from the<font color="#CCCCCC"> stock applications on how</font>

441
00:15:07,670 --> 00:15:10,760
they're being<font color="#CCCCCC"> used is for these</font>

442
00:15:08,870 --> 00:15:12,320
categories but<font color="#E5E5E5"> if you're an application</font>

443
00:15:10,760 --> 00:15:13,520
<font color="#CCCCCC">developer you can</font><font color="#E5E5E5"> choose to do similar</font>

444
00:15:12,320 --> 00:15:14,930
things if you need data for push

445
00:15:13,520 --> 00:15:16,160
notifications you may need to<font color="#CCCCCC"> have it</font>

446
00:15:14,930 --> 00:15:18,530
accessible at certain times or

447
00:15:16,160 --> 00:15:20,240
background jobs other<font color="#E5E5E5"> data you may</font>

448
00:15:18,530 --> 00:15:23,079
restrict to only have it available when

449
00:15:20,240 --> 00:15:23,080
the user unlocks the phone

450
00:15:23,580 --> 00:15:27,990
and that kind of gets us to usability

451
00:15:25,920 --> 00:15:30,270
because this kind<font color="#E5E5E5"> of always a trade-off</font>

452
00:15:27,990 --> 00:15:32,550
between<font color="#E5E5E5"> venner things available I'm and</font>

453
00:15:30,270 --> 00:15:33,990
they are<font color="#E5E5E5"> not so if you want to make it</font>

454
00:15:32,550 --> 00:15:37,500
easy<font color="#E5E5E5"> for your cat to get to your phone</font>

455
00:15:33,990 --> 00:15:40,920
like<font color="#E5E5E5"> on this video you</font><font color="#CCCCCC"> probably use</font>

456
00:15:37,500 --> 00:15:41,940
touch ID so touch ID is what's kind<font color="#E5E5E5"> of</font>

457
00:15:40,920 --> 00:15:43,319
misunderstood in the beginning because

458
00:15:41,940 --> 00:15:44,940
everybody thought oh I can<font color="#CCCCCC"> just lift</font>

459
00:15:43,320 --> 00:15:47,880
somebody's fingerprints and I can get

460
00:15:44,940 --> 00:15:49,890
into the<font color="#E5E5E5"> phone but actually</font><font color="#CCCCCC"> it's meant</font>

461
00:15:47,880 --> 00:15:52,470
as a usability feature and it actually

462
00:15:49,890 --> 00:15:53,880
causes users to like oh maybe<font color="#E5E5E5"> I should</font>

463
00:15:52,470 --> 00:15:55,290
<font color="#E5E5E5">put a passcode because touch ID is</font>

464
00:15:53,880 --> 00:15:56,760
awesome and I want<font color="#E5E5E5"> to use touch ID I</font>

465
00:15:55,290 --> 00:15:58,530
mean when you have to when you<font color="#E5E5E5"> want to</font>

466
00:15:56,760 --> 00:15:59,910
use tax ID for payments and things like

467
00:15:58,530 --> 00:16:02,339
that<font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> have a passcode on the</font>

468
00:15:59,910 --> 00:16:03,689
phone and here on the<font color="#CCCCCC"> bottom are two</font>

469
00:16:02,340 --> 00:16:05,520
slides which are probably hard to read

470
00:16:03,690 --> 00:16:08,550
<font color="#E5E5E5">there from Apple's latest keynote from</font>

471
00:16:05,520 --> 00:16:10,500
dub dub DC this year and they showed

472
00:16:08,550 --> 00:16:12,180
that before the head touch ID only about

473
00:16:10,500 --> 00:16:14,640
fifty percent<font color="#E5E5E5"> of users had a passcode on</font>

474
00:16:12,180 --> 00:16:16,319
their phone and since they rolled out

475
00:16:14,640 --> 00:16:18,930
touch ID it's up to ninety percent of

476
00:16:16,320 --> 00:16:20,610
people so ninety percent of iphone and

477
00:16:18,930 --> 00:16:23,069
<font color="#E5E5E5">ipad users now have a passcode on the</font>

478
00:16:20,610 --> 00:16:24,240
device and mostly because touch that he

479
00:16:23,070 --> 00:16:28,470
makes it easy that<font color="#E5E5E5"> you don't need to</font>

480
00:16:24,240 --> 00:16:30,540
type it in every single<font color="#CCCCCC"> time and so</font>

481
00:16:28,470 --> 00:16:31,980
tragedy you know to unlock<font color="#CCCCCC"> your phone or</font>

482
00:16:30,540 --> 00:16:34,050
you know it may be<font color="#CCCCCC"> for Apple pay if</font>

483
00:16:31,980 --> 00:16:35,730
<font color="#E5E5E5">you're using an iphone but</font><font color="#CCCCCC"> you can also</font>

484
00:16:34,050 --> 00:16:38,160
<font color="#CCCCCC">use it as an app developer to have</font>

485
00:16:35,730 --> 00:16:41,100
another level of control<font color="#CCCCCC"> over your data</font>

486
00:16:38,160 --> 00:16:43,530
you can<font color="#E5E5E5"> tag a keychain item using access</font>

487
00:16:41,100 --> 00:16:45,720
controls and can say whenever I read or

488
00:16:43,530 --> 00:16:47,189
write that keychain item I want the user

489
00:16:45,720 --> 00:16:49,230
to re-authenticate and that can be

490
00:16:47,190 --> 00:16:51,030
either by swiping the finger or what can

491
00:16:49,230 --> 00:16:53,370
<font color="#E5E5E5">be by typing in their passcode at that</font>

492
00:16:51,030 --> 00:16:55,500
time<font color="#E5E5E5"> again so you can have data</font>

493
00:16:53,370 --> 00:16:57,020
explicitly authorized by<font color="#E5E5E5"> the user even</font>

494
00:16:55,500 --> 00:16:58,620
if the phone is unlocked already and

495
00:16:57,020 --> 00:17:00,660
similarly there<font color="#CCCCCC"> is a local</font>

496
00:16:58,620 --> 00:17:02,970
authentication API which is an OS level

497
00:17:00,660 --> 00:17:04,619
thing which is<font color="#E5E5E5"> not tied into the</font>

498
00:17:02,970 --> 00:17:06,630
<font color="#E5E5E5">encryption directly but what it does</font>

499
00:17:04,619 --> 00:17:08,310
it's basically ask the operating system

500
00:17:06,630 --> 00:17:10,199
hey can you<font color="#CCCCCC"> ask the user to swipe their</font>

501
00:17:08,310 --> 00:17:13,050
finger and then it<font color="#E5E5E5"> comes back with yes</font>

502
00:17:10,199 --> 00:17:14,940
or no the problem is this is<font color="#CCCCCC"> that if you</font>

503
00:17:13,050 --> 00:17:16,470
<font color="#CCCCCC">have a jailbroken device and you can</font>

504
00:17:14,940 --> 00:17:18,540
hook those operating system functions

505
00:17:16,470 --> 00:17:19,770
you can<font color="#CCCCCC"> pretend that somebody swiped the</font>

506
00:17:18,540 --> 00:17:22,199
finger successfully and the app will

507
00:17:19,770 --> 00:17:23,609
believe it well for the<font color="#E5E5E5"> kitchn1 it</font>

508
00:17:22,199 --> 00:17:25,080
actually tied into the encryption and

509
00:17:23,609 --> 00:17:27,179
all<font color="#E5E5E5"> done in hardware so you can't really</font>

510
00:17:25,079 --> 00:17:29,820
hook those functions and bypass it so

511
00:17:27,180 --> 00:17:31,560
the user presence for the keychain is is

512
00:17:29,820 --> 00:17:33,840
a<font color="#E5E5E5"> stronger mechanism than only using the</font>

513
00:17:31,560 --> 00:17:36,399
<font color="#E5E5E5">local authentic</font>

514
00:17:33,840 --> 00:17:38,379
so where does this leave us with the

515
00:17:36,400 --> 00:17:40,360
threats you can still have after you you

516
00:17:38,380 --> 00:17:41,440
do all these things jailbreaks<font color="#E5E5E5"> are</font>

517
00:17:40,360 --> 00:17:43,449
probably the first<font color="#E5E5E5"> thing which come to</font>

518
00:17:41,440 --> 00:17:46,360
mind when you think about things that

519
00:17:43,450 --> 00:17:48,700
can go wrong with<font color="#E5E5E5"> iPhones so Derek's let</font>

520
00:17:46,360 --> 00:17:50,290
you do arbitrary execution of unsigned

521
00:17:48,700 --> 00:17:52,090
code on the device before we talked

522
00:17:50,290 --> 00:17:53,590
<font color="#CCCCCC">about everything has to be signed</font><font color="#E5E5E5"> if you</font>

523
00:17:52,090 --> 00:17:55,149
jailbreak the device those<font color="#E5E5E5"> things are</font>

524
00:17:53,590 --> 00:17:57,639
being patched and disabled so you can

525
00:17:55,150 --> 00:17:59,140
run arbitrary code it does disable some

526
00:17:57,640 --> 00:18:01,419
<font color="#CCCCCC">or westerville protections in order to</font>

527
00:17:59,140 --> 00:18:03,610
get the code running which<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to</font>

528
00:18:01,419 --> 00:18:05,559
have to to<font color="#E5E5E5"> disable those things but they</font>

529
00:18:03,610 --> 00:18:07,600
don't necessarily<font color="#E5E5E5"> disable sandboxing of</font>

530
00:18:05,559 --> 00:18:10,000
apps so if you have two apps<font color="#E5E5E5"> there's</font>

531
00:18:07,600 --> 00:18:11,770
still sandbox um you could disable the

532
00:18:10,000 --> 00:18:13,299
sandboxing but the jailbreak does not

533
00:18:11,770 --> 00:18:14,918
necessarily mean that the sandboxing is

534
00:18:13,299 --> 00:18:17,100
disabled so you still have isolation

535
00:18:14,919 --> 00:18:19,840
between applications potentially and

536
00:18:17,100 --> 00:18:21,100
regarding secure storage well so first

537
00:18:19,840 --> 00:18:22,720
of all if you have a passcode on the

538
00:18:21,100 --> 00:18:24,699
device<font color="#E5E5E5"> and you ever try to jailbreak</font>

539
00:18:22,720 --> 00:18:26,710
your phone you may not be able to<font color="#CCCCCC"> do</font>

540
00:18:24,700 --> 00:18:28,330
that with a public exploit because that

541
00:18:26,710 --> 00:18:30,880
requires you to reboot<font color="#E5E5E5"> your phone like</font>

542
00:18:28,330 --> 00:18:32,740
35 times and<font color="#E5E5E5"> then you need to type in</font>

543
00:18:30,880 --> 00:18:33,549
the passcode every single time so you

544
00:18:32,740 --> 00:18:35,559
may not be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> use a public</font>

545
00:18:33,549 --> 00:18:37,059
jailbreak but there may be people which

546
00:18:35,559 --> 00:18:39,668
are jailbreaks which don't require that

547
00:18:37,059 --> 00:18:41,168
and in<font color="#E5E5E5"> that case data which is protected</font>

548
00:18:39,669 --> 00:18:43,120
under the passcode or fingerprint are

549
00:18:41,169 --> 00:18:47,590
still secure because you can get to it

550
00:18:43,120 --> 00:18:49,360
without knowing those keys but what's

551
00:18:47,590 --> 00:18:50,799
still possible though even non

552
00:18:49,360 --> 00:18:52,540
jailbroken devices that you could<font color="#E5E5E5"> have a</font>

553
00:18:50,799 --> 00:18:54,879
malicious application who can access

554
00:18:52,540 --> 00:18:56,649
personal data they can<font color="#E5E5E5"> just be privacy</font>

555
00:18:54,880 --> 00:18:58,660
I'm infringing it as asking for too many

556
00:18:56,650 --> 00:19:00,100
permissions where you can have apps

557
00:18:58,660 --> 00:19:01,660
attacking other apps we are inter

558
00:19:00,100 --> 00:19:02,949
process communication calling URL

559
00:19:01,660 --> 00:19:06,040
handlers and getting data from other

560
00:19:02,950 --> 00:19:07,270
apps which are<font color="#E5E5E5"> more like um app level</font>

561
00:19:06,040 --> 00:19:10,299
flaws more or less it's not really like

562
00:19:07,270 --> 00:19:11,530
an iOS issue and then a topic which<font color="#E5E5E5"> we</font>

563
00:19:10,299 --> 00:19:13,990
will<font color="#CCCCCC"> talk about in the eye in</font><font color="#E5E5E5"> the</font>

564
00:19:11,530 --> 00:19:15,639
Android side a bit more you could

565
00:19:13,990 --> 00:19:17,710
jailbreak your device and you could back

566
00:19:15,640 --> 00:19:19,059
door it so you could<font color="#CCCCCC"> install something</font>

567
00:19:17,710 --> 00:19:21,790
in the kernel or in an app which

568
00:19:19,059 --> 00:19:24,190
monitors the users behavior and steal

569
00:19:21,790 --> 00:19:26,500
some data and we've demonstrated with in

570
00:19:24,190 --> 00:19:28,919
a bit and with that<font color="#E5E5E5"> I'm going to give</font><font color="#CCCCCC"> it</font>

571
00:19:26,500 --> 00:19:31,929
to<font color="#E5E5E5"> Drew for talking bit more but Android</font>

572
00:19:28,919 --> 00:19:34,030
thanks Daniel so let's<font color="#E5E5E5"> look at how</font>

573
00:19:31,929 --> 00:19:36,840
<font color="#E5E5E5">Android handles the similar things that</font>

574
00:19:34,030 --> 00:19:39,610
the Daniel just<font color="#E5E5E5"> talked about for iOS</font>

575
00:19:36,840 --> 00:19:40,990
here's a<font color="#E5E5E5"> table of the evolution of</font>

576
00:19:39,610 --> 00:19:42,159
<font color="#E5E5E5">Android security that we put together</font>

577
00:19:40,990 --> 00:19:43,750
and

578
00:19:42,160 --> 00:19:45,820
<font color="#E5E5E5">in particular interests of this talk are</font>

579
00:19:43,750 --> 00:19:48,520
the items in blue which pertained the

580
00:19:45,820 --> 00:19:50,889
<font color="#E5E5E5">secure data storage but as you can see a</font>

581
00:19:48,520 --> 00:19:52,360
lot of security features have come with

582
00:19:50,890 --> 00:19:53,830
each revision of Android you get a

583
00:19:52,360 --> 00:19:58,240
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> stronger a</font><font color="#CCCCCC"> little bit better</font>

584
00:19:53,830 --> 00:20:01,810
and there's there's two on there

585
00:19:58,240 --> 00:20:04,570
probably hard to read but the<font color="#CCCCCC"> keystore</font>

586
00:20:01,810 --> 00:20:06,399
<font color="#E5E5E5">hidden keys and force encrypt have</font>

587
00:20:04,570 --> 00:20:09,659
asterisks next to them because<font color="#CCCCCC"> Google</font>

588
00:20:06,400 --> 00:20:11,920
tried to roll this out with lollipop and

589
00:20:09,660 --> 00:20:13,780
realize<font color="#E5E5E5"> their om partners weren't quite</font>

590
00:20:11,920 --> 00:20:15,970
ready for that so they rescinded the

591
00:20:13,780 --> 00:20:17,590
force encryption<font color="#E5E5E5"> that lollipop was</font>

592
00:20:15,970 --> 00:20:20,040
supposed to<font color="#E5E5E5"> come with that is now</font>

593
00:20:17,590 --> 00:20:22,000
mandatory and marshmallow and<font color="#E5E5E5"> beyond but</font>

594
00:20:20,040 --> 00:20:24,580
one thing that's interesting to point

595
00:20:22,000 --> 00:20:28,230
out there and then the newer things<font color="#E5E5E5"> for</font>

596
00:20:24,580 --> 00:20:30,010
<font color="#E5E5E5">60 the fingerprint API and verified boot</font>

597
00:20:28,230 --> 00:20:34,270
which we'll<font color="#CCCCCC"> talk a</font><font color="#E5E5E5"> little bit more about</font>

598
00:20:30,010 --> 00:20:38,110
<font color="#E5E5E5">coming up so if we look at the adoption</font>

599
00:20:34,270 --> 00:20:40,540
<font color="#CCCCCC">of Android as a platform there's kind of</font>

600
00:20:38,110 --> 00:20:42,340
an<font color="#E5E5E5"> issue with the fact that most people</font>

601
00:20:40,540 --> 00:20:44,440
are<font color="#E5E5E5"> still on and unsupported</font><font color="#CCCCCC"> and</font>

602
00:20:42,340 --> 00:20:45,970
insecure version which is KitKat there

603
00:20:44,440 --> 00:20:49,570
and<font color="#E5E5E5"> you kind of combine all the</font>

604
00:20:45,970 --> 00:20:51,580
different versions there you know that's

605
00:20:49,570 --> 00:20:54,340
an issue this this graph actually looks

606
00:20:51,580 --> 00:20:56,350
much better now<font color="#E5E5E5"> than it did a year ago</font>

607
00:20:54,340 --> 00:20:58,480
because there are significant amount<font color="#E5E5E5"> of</font>

608
00:20:56,350 --> 00:21:00,340
people on the latest<font color="#E5E5E5"> version which is</font>

609
00:20:58,480 --> 00:21:02,620
<font color="#E5E5E5">good this progress is happening here</font>

610
00:21:00,340 --> 00:21:04,389
with with android fragmentation but if

611
00:21:02,620 --> 00:21:07,689
<font color="#E5E5E5">we kind of snap back</font><font color="#CCCCCC"> to iOS a little bit</font>

612
00:21:04,390 --> 00:21:09,880
it's very clear that majority of iOS

613
00:21:07,690 --> 00:21:14,560
users are on the latest and thus most

614
00:21:09,880 --> 00:21:16,420
secure version of the platform so how

615
00:21:14,560 --> 00:21:19,780
does this have an impact on application

616
00:21:16,420 --> 00:21:21,280
developers so because there's so many

617
00:21:19,780 --> 00:21:23,290
different<font color="#E5E5E5"> versions of Android with so</font>

618
00:21:21,280 --> 00:21:25,570
many<font color="#CCCCCC"> different security features coming</font>

619
00:21:23,290 --> 00:21:27,639
at different times of the<font color="#E5E5E5"> platform there</font>

620
00:21:25,570 --> 00:21:29,710
tends to be a lot of code complexity

621
00:21:27,640 --> 00:21:31,810
needed to develop<font color="#E5E5E5"> Android applications</font>

622
00:21:29,710 --> 00:21:34,180
because you can't necessarily rely on

623
00:21:31,810 --> 00:21:36,220
your app running the same<font color="#CCCCCC"> on two</font>

624
00:21:34,180 --> 00:21:37,630
different versions of Android because

625
00:21:36,220 --> 00:21:39,670
they may have better protections

626
00:21:37,630 --> 00:21:41,770
available in a newer version that<font color="#CCCCCC"> you</font>

627
00:21:39,670 --> 00:21:43,630
can't leverage in an older one so this

628
00:21:41,770 --> 00:21:45,610
<font color="#E5E5E5">this kind of leads to</font><font color="#CCCCCC"> a lot of like</font><font color="#E5E5E5"> if</font>

629
00:21:43,630 --> 00:21:48,520
<font color="#E5E5E5">defs and code complexity and</font>

630
00:21:45,610 --> 00:21:50,620
inconsistent behavior as a<font color="#E5E5E5"> result of</font>

631
00:21:48,520 --> 00:21:52,240
<font color="#E5E5E5">this because you know if you don't trust</font>

632
00:21:50,620 --> 00:21:54,189
the platform at a certain version you're

633
00:21:52,240 --> 00:21:55,850
going to have to like hack around that

634
00:21:54,190 --> 00:21:57,890
essentially as a developer

635
00:21:55,850 --> 00:21:59,928
and access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> more secure functionality</font>

636
00:21:57,890 --> 00:22:02,030
is not necessarily available for all

637
00:21:59,929 --> 00:22:05,150
users so things like hardware back

638
00:22:02,030 --> 00:22:06,710
crypto storage may not exist on your you

639
00:22:05,150 --> 00:22:08,960
know<font color="#E5E5E5"> more budget version of an</font><font color="#CCCCCC"> Android</font>

640
00:22:06,710 --> 00:22:10,580
<font color="#E5E5E5">device as opposed to like a flagship</font>

641
00:22:08,960 --> 00:22:12,470
model which would have that so

642
00:22:10,580 --> 00:22:15,049
developers need to sort<font color="#E5E5E5"> of like query</font>

643
00:22:12,470 --> 00:22:17,120
via API to see if that's available and

644
00:22:15,049 --> 00:22:19,610
then do it in a more secure way and if

645
00:22:17,120 --> 00:22:21,979
it's not then<font color="#E5E5E5"> you get what you get kind</font>

646
00:22:19,610 --> 00:22:24,289
of thing and security improvements are

647
00:22:21,980 --> 00:22:26,750
available<font color="#CCCCCC"> only in the</font><font color="#E5E5E5"> latest versions</font>

648
00:22:24,289 --> 00:22:29,408
that come out so you know<font color="#E5E5E5"> Android has a</font>

649
00:22:26,750 --> 00:22:31,640
long history of complicated OTA problems

650
00:22:29,409 --> 00:22:34,760
devices that come out and just<font color="#E5E5E5"> never get</font>

651
00:22:31,640 --> 00:22:36,260
an update and never get supported or you

652
00:22:34,760 --> 00:22:38,510
know once that get maybe one or two

653
00:22:36,260 --> 00:22:40,400
updates but are left behind and these

654
00:22:38,510 --> 00:22:43,370
devices live for quite a while I mean

655
00:22:40,400 --> 00:22:44,539
most people probably have devices longer

656
00:22:43,370 --> 00:22:47,120
than a year<font color="#E5E5E5"> unless you're really into</font>

657
00:22:44,539 --> 00:22:49,070
phones so these kind of problems live

658
00:22:47,120 --> 00:22:53,178
for for quite<font color="#CCCCCC"> a while out</font><font color="#E5E5E5"> there in the</font>

659
00:22:49,070 --> 00:22:55,010
wild so let's<font color="#E5E5E5"> look at how Android</font>

660
00:22:53,179 --> 00:22:58,549
encryption works similar to how Daniel

661
00:22:55,010 --> 00:23:00,230
showed on iOS so when you enable

662
00:22:58,549 --> 00:23:02,720
encryption or when you boot a newer

663
00:23:00,230 --> 00:23:05,240
<font color="#CCCCCC">phone for the first time the deck or</font>

664
00:23:02,720 --> 00:23:07,460
device encryption key is set and

665
00:23:05,240 --> 00:23:11,299
encrypts all the disk sectors on the

666
00:23:07,460 --> 00:23:15,500
volume for user<font color="#CCCCCC"> data and they uses AES</font>

667
00:23:11,299 --> 00:23:16,460
<font color="#CCCCCC">CBC 128 but we</font><font color="#E5E5E5"> have an issue with you</font>

668
00:23:15,500 --> 00:23:19,730
know<font color="#E5E5E5"> what if I want to</font><font color="#CCCCCC"> change my</font>

669
00:23:16,460 --> 00:23:22,010
password so we have the<font color="#E5E5E5"> concept of a key</font>

670
00:23:19,730 --> 00:23:25,250
encryption key or<font color="#CCCCCC"> keck and an</font>

671
00:23:22,010 --> 00:23:26,960
initialization vector together form

672
00:23:25,250 --> 00:23:28,880
what's called the encrypted deck which

673
00:23:26,960 --> 00:23:32,179
is<font color="#E5E5E5"> then stored in a cryptic footer and</font>

674
00:23:28,880 --> 00:23:33,890
<font color="#E5E5E5">I'll talk more about that later but the</font>

675
00:23:32,179 --> 00:23:35,419
<font color="#CCCCCC">reason this is relevant is because if</font>

676
00:23:33,890 --> 00:23:37,010
you have a<font color="#CCCCCC"> passcode and you want to</font>

677
00:23:35,419 --> 00:23:38,750
change it you don't want<font color="#CCCCCC"> to have to</font>

678
00:23:37,010 --> 00:23:40,460
re-encrypt all the data<font color="#E5E5E5"> on your volume</font>

679
00:23:38,750 --> 00:23:43,190
again<font color="#E5E5E5"> so essentially the key encryption</font>

680
00:23:40,460 --> 00:23:45,350
key can change and that's fluid but the

681
00:23:43,190 --> 00:23:46,850
device encryption key is set once and

682
00:23:45,350 --> 00:23:49,480
once the encryptions enable for the

683
00:23:46,850 --> 00:23:53,240
first time and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> state's persistent</font>

684
00:23:49,480 --> 00:23:54,950
so similar to<font color="#E5E5E5"> how iOS we take user input</font>

685
00:23:53,240 --> 00:23:56,980
and depending on the version of<font color="#CCCCCC"> Android</font>

686
00:23:54,950 --> 00:24:00,409
you're running it's a PB<font color="#CCCCCC"> kdf to</font>

687
00:23:56,980 --> 00:24:02,600
derivation function or more modern

688
00:24:00,409 --> 00:24:04,940
versions use a<font color="#E5E5E5"> script for for better</font>

689
00:24:02,600 --> 00:24:08,240
security but<font color="#E5E5E5"> this can be a pin pattern</font>

690
00:24:04,940 --> 00:24:09,470
or<font color="#E5E5E5"> passcode this is sort of run through</font>

691
00:24:08,240 --> 00:24:11,289
<font color="#E5E5E5">the derivation function</font>

692
00:24:09,470 --> 00:24:14,630
then you get your<font color="#E5E5E5"> key encryption key</font>

693
00:24:11,289 --> 00:24:18,440
something that Google added in 5.0

694
00:24:14,630 --> 00:24:21,590
lollipop was the<font color="#E5E5E5"> ability to have this</font>

695
00:24:18,440 --> 00:24:23,900
<font color="#CCCCCC">Hardware bound thus the there's a unique</font>

696
00:24:21,590 --> 00:24:26,149
ID<font color="#E5E5E5"> for every device and the key</font>

697
00:24:23,900 --> 00:24:29,690
encryption key can be wrapped and signed

698
00:24:26,150 --> 00:24:32,510
<font color="#E5E5E5">by this this built-in function in the</font>

699
00:24:29,690 --> 00:24:34,870
sock unfortunately I don't<font color="#E5E5E5"> know if you</font>

700
00:24:32,510 --> 00:24:37,129
guys saw maybe<font color="#E5E5E5"> week or two ago</font>

701
00:24:34,870 --> 00:24:39,020
researcher discovered that this<font color="#E5E5E5"> is</font>

702
00:24:37,130 --> 00:24:41,840
<font color="#CCCCCC">actually not hardware bound and this key</font>

703
00:24:39,020 --> 00:24:44,059
is accessible via software and so by

704
00:24:41,840 --> 00:24:47,330
exploiting trustzone you were<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

705
00:24:44,059 --> 00:24:50,270
recover<font color="#E5E5E5"> this key and thus sort of render</font>

706
00:24:47,330 --> 00:24:52,460
this not as effective anymore and the

707
00:24:50,270 --> 00:24:53,840
blog is down<font color="#E5E5E5"> there I it's a very</font>

708
00:24:52,460 --> 00:24:55,309
complicated post but it's very

709
00:24:53,840 --> 00:24:59,809
interesting to read so encourage you to

710
00:24:55,309 --> 00:25:03,799
check that<font color="#E5E5E5"> out so back to</font><font color="#CCCCCC"> the the crypto</font>

711
00:24:59,809 --> 00:25:05,750
footer the encrypted deck is stored and

712
00:25:03,799 --> 00:25:07,730
it's<font color="#CCCCCC"> usually carved out of the end of</font>

713
00:25:05,750 --> 00:25:10,159
the user data partition some devices

714
00:25:07,730 --> 00:25:13,250
have a dedicated crypto partition for

715
00:25:10,159 --> 00:25:15,830
this for this metadata but androids

716
00:25:13,250 --> 00:25:17,510
encryption only protects one partition

717
00:25:15,830 --> 00:25:19,129
on your entire device and that's the

718
00:25:17,510 --> 00:25:21,080
user data partition where all of your

719
00:25:19,130 --> 00:25:23,210
settings and user downloaded apps and

720
00:25:21,080 --> 00:25:27,020
everything go but that leaves the boot

721
00:25:23,210 --> 00:25:31,039
and system unencrypted and we'll see why

722
00:25:27,020 --> 00:25:32,418
that<font color="#E5E5E5"> matters in a little while but you</font>

723
00:25:31,039 --> 00:25:35,750
know if you're familiar with lux it's

724
00:25:32,419 --> 00:25:37,490
lux ish but<font color="#E5E5E5"> it only has one key slot so</font>

725
00:25:35,750 --> 00:25:40,100
you're<font color="#E5E5E5"> essentially bound to have a</font>

726
00:25:37,490 --> 00:25:43,730
single password for your lock screen and

727
00:25:40,100 --> 00:25:45,230
for boot there<font color="#E5E5E5"> are a lot of mott</font><font color="#CCCCCC"> like</font>

728
00:25:43,730 --> 00:25:46,970
custom modifications that people put

729
00:25:45,230 --> 00:25:48,799
into things like<font color="#CCCCCC"> cyanogenmod or other</font>

730
00:25:46,970 --> 00:25:51,020
custom roms that let you have more key

731
00:25:48,799 --> 00:25:52,970
slots and thus you<font color="#CCCCCC"> can have a much more</font>

732
00:25:51,020 --> 00:25:55,370
complicated boot password and a less

733
00:25:52,970 --> 00:25:57,350
complicated login screen but the de

734
00:25:55,370 --> 00:26:02,090
facto and what Google supports is

735
00:25:57,350 --> 00:26:05,178
essentially one one key here a quick

736
00:26:02,090 --> 00:26:06,860
word on<font color="#E5E5E5"> Android credential storage so</font>

737
00:26:05,179 --> 00:26:09,730
the system credential storage allows for

738
00:26:06,860 --> 00:26:11,740
things like VPN<font color="#CCCCCC"> keys your</font><font color="#E5E5E5"> Wi-Fi creds</font>

739
00:26:09,730 --> 00:26:13,940
asymmetrical keys that can<font color="#E5E5E5"> be stored</font>

740
00:26:11,740 --> 00:26:16,760
these are encrypted from a key<font color="#E5E5E5"> drive</font>

741
00:26:13,940 --> 00:26:18,559
from the<font color="#E5E5E5"> users passcode this can be</font>

742
00:26:16,760 --> 00:26:20,210
hardware backed I'd sort<font color="#E5E5E5"> of alluded to</font>

743
00:26:18,559 --> 00:26:22,220
that earlier some devices have<font color="#E5E5E5"> hardware</font>

744
00:26:20,210 --> 00:26:23,210
back crypto such that even if you root

745
00:26:22,220 --> 00:26:25,070
your device you

746
00:26:23,210 --> 00:26:27,830
can't use<font color="#CCCCCC"> that to access the the keys</font>

747
00:26:25,070 --> 00:26:29,779
that are<font color="#E5E5E5"> stored there and thus requires</font>

748
00:26:27,830 --> 00:26:33,350
the device in any attack<font color="#CCCCCC"> that you want</font>

749
00:26:29,779 --> 00:26:35,840
to<font color="#E5E5E5"> do on the keystore unfortunately the</font>

750
00:26:33,350 --> 00:26:38,120
<font color="#CCCCCC">keystore has</font><font color="#E5E5E5"> had a lot of issues in the</font>

751
00:26:35,840 --> 00:26:39,830
past that<font color="#E5E5E5"> are now largely mitigated in</font>

752
00:26:38,120 --> 00:26:41,120
newer versions of<font color="#CCCCCC"> Android but as I</font>

753
00:26:39,830 --> 00:26:42,949
<font color="#CCCCCC">mentioned there's a lot of legacy</font>

754
00:26:41,120 --> 00:26:45,260
Android out<font color="#E5E5E5"> there that still has these</font>

755
00:26:42,950 --> 00:26:47,360
issues and application developers run

756
00:26:45,260 --> 00:26:49,279
into things where the things they store

757
00:26:47,360 --> 00:26:51,830
in the key<font color="#CCCCCC"> so just disappear arbitrarily</font>

758
00:26:49,279 --> 00:26:54,679
or there's<font color="#E5E5E5"> like inconsistent behavior</font>

759
00:26:51,830 --> 00:26:57,139
and and unclear documentation on how

760
00:26:54,679 --> 00:27:01,010
those things work so we've seen you<font color="#E5E5E5"> know</font>

761
00:26:57,140 --> 00:27:03,230
when I assess security apps like for my

762
00:27:01,010 --> 00:27:05,210
job a lot of developers try to hack

763
00:27:03,230 --> 00:27:08,480
around this and do their own thing which

764
00:27:05,210 --> 00:27:10,309
usually ends poorly so this<font color="#E5E5E5"> is</font>

765
00:27:08,480 --> 00:27:13,399
significantly approved with marshmallow

766
00:27:10,309 --> 00:27:15,230
and now<font color="#CCCCCC"> newgate coming out these are</font>

767
00:27:13,399 --> 00:27:16,899
these behaviors are clearly defined but

768
00:27:15,230 --> 00:27:18,919
there's<font color="#E5E5E5"> been a long history of</font>

769
00:27:16,899 --> 00:27:20,570
application developers not really being

770
00:27:18,919 --> 00:27:25,279
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to trust the keystore and so this</font>

771
00:27:20,570 --> 00:27:27,529
introduces problems a look at

772
00:27:25,279 --> 00:27:28,970
marshmallow new gets going to have some

773
00:27:27,529 --> 00:27:32,059
new changes but since they're still

774
00:27:28,970 --> 00:27:34,460
Developer Preview you know not<font color="#E5E5E5"> Ruby</font>

775
00:27:32,059 --> 00:27:36,408
relevant right now but they implemented

776
00:27:34,460 --> 00:27:37,970
<font color="#E5E5E5">escrow fashioning of the unlock passcode</font>

777
00:27:36,409 --> 00:27:41,539
values so this used to be done with

778
00:27:37,970 --> 00:27:42,980
sha-1 md5 hash concatenation this has

779
00:27:41,539 --> 00:27:46,340
<font color="#CCCCCC">been replaced</font><font color="#E5E5E5"> with something much more</font>

780
00:27:42,980 --> 00:27:48,409
sturdy and now the keystore like<font color="#CCCCCC"> i</font>

781
00:27:46,340 --> 00:27:50,149
mentioned<font color="#E5E5E5"> has some guarantees and some</font>

782
00:27:48,409 --> 00:27:53,659
actual documentation from google on how

783
00:27:50,149 --> 00:27:55,370
how these things work additionally now

784
00:27:53,659 --> 00:27:58,190
<font color="#E5E5E5">keys can have like additional metadata</font>

785
00:27:55,370 --> 00:28:00,830
attributes like you know the application

786
00:27:58,190 --> 00:28:02,720
developer can say you can't use ECB mode

787
00:28:00,830 --> 00:28:04,820
or you can't use fix IVs like you have

788
00:28:02,720 --> 00:28:06,799
to do these more secure behaviors so

789
00:28:04,820 --> 00:28:11,240
these can<font color="#E5E5E5"> actually be set by the</font>

790
00:28:06,799 --> 00:28:13,908
application developer and lastly the

791
00:28:11,240 --> 00:28:16,730
Nexus imprint similar to what<font color="#CCCCCC"> Daniels</font>

792
00:28:13,909 --> 00:28:18,590
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about touch ID google officially</font>

793
00:28:16,730 --> 00:28:21,559
released their implementation of this

794
00:28:18,590 --> 00:28:23,899
the reference implementation and<font color="#E5E5E5"> OEMs</font>

795
00:28:21,559 --> 00:28:26,120
you know<font color="#E5E5E5"> for years before this had sort</font>

796
00:28:23,899 --> 00:28:28,279
of had their own fingerprint unlock

797
00:28:26,120 --> 00:28:31,309
style things like<font color="#CCCCCC"> Samsung for example</font>

798
00:28:28,279 --> 00:28:33,679
had this for a while but this<font color="#CCCCCC"> is a win</font>

799
00:28:31,309 --> 00:28:35,600
for for data storage because it allows

800
00:28:33,679 --> 00:28:36,730
you to<font color="#E5E5E5"> have a much more complicated boot</font>

801
00:28:35,600 --> 00:28:38,199
password

802
00:28:36,730 --> 00:28:39,640
that you<font color="#E5E5E5"> don't have to type every time</font>

803
00:28:38,200 --> 00:28:41,799
that you want<font color="#E5E5E5"> to unlock your</font><font color="#CCCCCC"> phone so it</font>

804
00:28:39,640 --> 00:28:43,630
encourages people to set something

805
00:28:41,799 --> 00:28:45,460
that's not one two three four to unlock

806
00:28:43,630 --> 00:28:47,440
their phone and then they have the

807
00:28:45,460 --> 00:28:49,600
convenience of being able to<font color="#E5E5E5"> get to</font>

808
00:28:47,440 --> 00:28:51,940
their data when they get a<font color="#E5E5E5"> new tweet</font>

809
00:28:49,600 --> 00:28:55,020
mention or something like that this can

810
00:28:51,940 --> 00:28:57,490
also be used<font color="#CCCCCC"> for secure payments and</font>

811
00:28:55,020 --> 00:29:00,910
this data is stored securely in the

812
00:28:57,490 --> 00:29:02,380
trusted execution environment the most

813
00:29:00,910 --> 00:29:04,929
important thing here<font color="#E5E5E5"> is that it sort of</font>

814
00:29:02,380 --> 00:29:07,179
defines the standards<font color="#E5E5E5"> for OEMs to use on</font>

815
00:29:04,929 --> 00:29:09,040
how the Nexus imprint is so that

816
00:29:07,179 --> 00:29:13,020
hopefully people start<font color="#CCCCCC"> using this</font>

817
00:29:09,040 --> 00:29:13,020
instead of<font color="#E5E5E5"> doing their own custom things</font>

818
00:29:13,290 --> 00:29:19,389
Google and their OEM partners have a

819
00:29:15,669 --> 00:29:22,020
long history of having different ideas

820
00:29:19,390 --> 00:29:23,950
on how to secure things and

821
00:29:22,020 --> 00:29:26,049
unfortunately this leads to wild

822
00:29:23,950 --> 00:29:27,790
inconsistencies among devices you see

823
00:29:26,049 --> 00:29:30,700
out in the wild especially among like

824
00:29:27,790 --> 00:29:32,409
the cheaper devices that you know you

825
00:29:30,700 --> 00:29:33,970
can get very cheaply but don't have<font color="#E5E5E5"> a</font>

826
00:29:32,410 --> 00:29:36,040
lot of protections because it costs

827
00:29:33,970 --> 00:29:38,320
money to implement things like that so

828
00:29:36,040 --> 00:29:41,590
you run in two very different<font color="#CCCCCC"> things in</font>

829
00:29:38,320 --> 00:29:43,540
bootloader security the presence of

830
00:29:41,590 --> 00:29:45,909
hardware back<font color="#E5E5E5"> crypto storage or not as I</font>

831
00:29:43,540 --> 00:29:47,668
mentioned the existence of a trusted

832
00:29:45,910 --> 00:29:49,929
execution environment such as trustzone

833
00:29:47,669 --> 00:29:51,580
may or may not exist on<font color="#E5E5E5"> the device you</font>

834
00:29:49,929 --> 00:29:53,380
you know the budget devices you're

835
00:29:51,580 --> 00:29:55,480
buying and even the boot image type

836
00:29:53,380 --> 00:29:57,460
can't be agreed upon so you see lots<font color="#E5E5E5"> of</font>

837
00:29:55,480 --> 00:29:58,480
different like image types and and if

838
00:29:57,460 --> 00:30:00,700
you're<font color="#E5E5E5"> starting to look at things like</font>

839
00:29:58,480 --> 00:30:02,559
that<font color="#E5E5E5"> and take them apart you're going to</font>

840
00:30:00,700 --> 00:30:06,580
see a lot<font color="#CCCCCC"> of different</font><font color="#E5E5E5"> behavior out</font>

841
00:30:02,559 --> 00:30:09,510
there and even more<font color="#CCCCCC"> different OEMs offer</font>

842
00:30:06,580 --> 00:30:12,428
much different protection schemes so

843
00:30:09,510 --> 00:30:14,500
some OEM is like HTC have like emmc

844
00:30:12,429 --> 00:30:15,880
<font color="#CCCCCC">write protection</font><font color="#E5E5E5"> for example so even if</font>

845
00:30:14,500 --> 00:30:17,260
you were to leverage a local root

846
00:30:15,880 --> 00:30:19,510
exploit and you want to overwrite a

847
00:30:17,260 --> 00:30:23,260
partition that<font color="#E5E5E5"> right will be silently</font>

848
00:30:19,510 --> 00:30:25,090
discarded based<font color="#E5E5E5"> on that so like you</font>

849
00:30:23,260 --> 00:30:27,429
<font color="#CCCCCC">can't actually implement it in the same</font>

850
00:30:25,090 --> 00:30:28,870
<font color="#E5E5E5">way as another OEM if you were to hack</font>

851
00:30:27,429 --> 00:30:31,780
their device in the same way you could

852
00:30:28,870 --> 00:30:33,668
probably overwrite that partition some

853
00:30:31,780 --> 00:30:36,059
devices actually<font color="#E5E5E5"> check boot image</font>

854
00:30:33,669 --> 00:30:38,070
signature verification and many do not

855
00:30:36,059 --> 00:30:40,750
which we'll see in a minute and<font color="#E5E5E5"> then</font>

856
00:30:38,070 --> 00:30:43,750
<font color="#CCCCCC">even</font><font color="#E5E5E5"> boot loader types they can be</font>

857
00:30:40,750 --> 00:30:46,090
unlocked excuse me locked completely and

858
00:30:43,750 --> 00:30:49,120
have no capability to change any of the

859
00:30:46,090 --> 00:30:50,580
firmware there's the more popular and

860
00:30:49,120 --> 00:30:53,459
luckily for us

861
00:30:50,580 --> 00:30:54,990
like locked but unlockable so this<font color="#CCCCCC"> is</font>

862
00:30:53,460 --> 00:30:58,380
like<font color="#E5E5E5"> a more responsible way to handle</font>

863
00:30:54,990 --> 00:31:00,419
things and things like Nexus or Sony or

864
00:30:58,380 --> 00:31:02,669
our lives a lot of other programs<font color="#CCCCCC"> out</font>

865
00:31:00,419 --> 00:31:04,289
there that allow you to responsibly

866
00:31:02,669 --> 00:31:06,529
unlock your bootloader and thus

867
00:31:04,289 --> 00:31:08,640
completely blow away all the user data

868
00:31:06,529 --> 00:31:10,230
but then you have the capability to

869
00:31:08,640 --> 00:31:13,230
write your<font color="#E5E5E5"> own custom firmware to your</font>

870
00:31:10,230 --> 00:31:15,240
device and then sadly<font color="#CCCCCC"> we have permissive</font>

871
00:31:13,230 --> 00:31:16,679
by default where they just<font color="#E5E5E5"> don't care at</font>

872
00:31:15,240 --> 00:31:20,370
all and you can kind<font color="#E5E5E5"> of write whatever</font>

873
00:31:16,679 --> 00:31:21,870
you want to the storage so this<font color="#E5E5E5"> is</font>

874
00:31:20,370 --> 00:31:24,120
<font color="#CCCCCC">actually a pretty difficult problem to</font>

875
00:31:21,870 --> 00:31:25,739
solve for<font color="#E5E5E5"> Google</font><font color="#CCCCCC"> because they want their</font>

876
00:31:24,120 --> 00:31:27,479
partners to have like the<font color="#E5E5E5"> freedom to</font>

877
00:31:25,740 --> 00:31:29,460
develop their and software and put

878
00:31:27,480 --> 00:31:31,049
whatever they want out there that runs

879
00:31:29,460 --> 00:31:33,899
android but then you run into like

880
00:31:31,049 --> 00:31:35,340
issues we're having inconsistent

881
00:31:33,899 --> 00:31:37,559
security is going to going<font color="#CCCCCC"> to burn you</font>

882
00:31:35,340 --> 00:31:40,610
so it's<font color="#E5E5E5"> really challenging for</font><font color="#CCCCCC"> Google to</font>

883
00:31:37,559 --> 00:31:43,080
enforce these consistent protections and

884
00:31:40,610 --> 00:31:44,639
one of the nice things that<font color="#CCCCCC"> came out</font>

885
00:31:43,080 --> 00:31:47,639
with marshmallow is that Google finally

886
00:31:44,639 --> 00:31:50,340
said you have to<font color="#E5E5E5"> protect the boot to</font>

887
00:31:47,639 --> 00:31:52,229
<font color="#CCCCCC">some extent so you have to put an option</font>

888
00:31:50,340 --> 00:31:54,360
in developer options that the user has

889
00:31:52,230 --> 00:31:58,260
to go in and manually click a box<font color="#E5E5E5"> that</font>

890
00:31:54,360 --> 00:31:59,668
says I am<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> with OEM unlock and so</font>

891
00:31:58,260 --> 00:32:01,470
now<font color="#CCCCCC"> there's like a slight barrier to</font>

892
00:31:59,669 --> 00:32:03,539
entry because and then you have to<font color="#E5E5E5"> know</font>

893
00:32:01,470 --> 00:32:06,090
a user's pass code<font color="#CCCCCC"> to get in to</font><font color="#E5E5E5"> enable</font>

894
00:32:03,539 --> 00:32:07,889
that option but there's still a lot of

895
00:32:06,090 --> 00:32:10,500
<font color="#E5E5E5">people that</font><font color="#CCCCCC"> just don't set pass codes on</font>

896
00:32:07,889 --> 00:32:12,719
their devices and things like that<font color="#CCCCCC"> so as</font>

897
00:32:10,500 --> 00:32:14,250
<font color="#CCCCCC">dino kind of alluded to earlier Apple</font>

898
00:32:12,720 --> 00:32:16,049
has<font color="#CCCCCC"> a very distinct advantage here</font>

899
00:32:14,250 --> 00:32:18,630
because they<font color="#E5E5E5"> control the entire stack</font>

900
00:32:16,049 --> 00:32:20,190
and they don't<font color="#E5E5E5"> have to deal with</font><font color="#CCCCCC"> like 10</font>

901
00:32:18,630 --> 00:32:21,779
am doing something<font color="#E5E5E5"> crazy and the other</font>

902
00:32:20,190 --> 00:32:23,399
one doing something saying but they all

903
00:32:21,779 --> 00:32:25,200
run Android it's sort of just like

904
00:32:23,399 --> 00:32:29,309
<font color="#E5E5E5">completely controlled by by Apple in</font>

905
00:32:25,200 --> 00:32:32,549
that regard<font color="#CCCCCC"> so let's talk about about</font>

906
00:32:29,309 --> 00:32:33,720
the importance of<font color="#CCCCCC"> boot security you know</font>

907
00:32:32,549 --> 00:32:35,429
we can kind of make some assumptions

908
00:32:33,720 --> 00:32:36,990
that the<font color="#E5E5E5"> bootloader there's there's</font>

909
00:32:35,429 --> 00:32:38,429
usually a series of boot loaders that

910
00:32:36,990 --> 00:32:40,380
check the next<font color="#E5E5E5"> level to see the</font>

911
00:32:38,429 --> 00:32:43,080
<font color="#E5E5E5">signature so we can kind</font><font color="#CCCCCC"> of call that</font>

912
00:32:40,380 --> 00:32:44,669
secure so we have that green and then we

913
00:32:43,080 --> 00:32:46,699
have the user data partition all the way

914
00:32:44,669 --> 00:32:49,529
at<font color="#CCCCCC"> the end which if you've enabled</font>

915
00:32:46,700 --> 00:32:51,090
encryption we're calling that secure as

916
00:32:49,529 --> 00:32:53,820
well but<font color="#E5E5E5"> there's two things in the</font>

917
00:32:51,090 --> 00:32:56,428
middle<font color="#CCCCCC"> here that create a vulnerable</font>

918
00:32:53,820 --> 00:32:59,129
boot chain trust issue on Android and

919
00:32:56,429 --> 00:33:01,830
<font color="#E5E5E5">that is that many devices do not check</font>

920
00:32:59,130 --> 00:33:05,299
the boot kernel or the system

921
00:33:01,830 --> 00:33:07,408
integrity so you can tamper with these

922
00:33:05,299 --> 00:33:09,179
you know there's some protections now

923
00:33:07,409 --> 00:33:11,580
with like<font color="#CCCCCC"> DM Verity and</font><font color="#E5E5E5"> things like that</font>

924
00:33:09,179 --> 00:33:13,679
<font color="#CCCCCC">but again wildly inconsistent as to how</font>

925
00:33:11,580 --> 00:33:15,019
these are applied so we can<font color="#E5E5E5"> kind of</font>

926
00:33:13,679 --> 00:33:17,399
tamper with these<font color="#E5E5E5"> things and then</font>

927
00:33:15,019 --> 00:33:20,059
potentially<font color="#E5E5E5"> just completely invalidate</font>

928
00:33:17,399 --> 00:33:22,219
the whole<font color="#CCCCCC"> fol disk encryption and so</font>

929
00:33:20,059 --> 00:33:25,168
let's take a look at how that's possible

930
00:33:22,220 --> 00:33:28,110
if you saw my talk last year<font color="#E5E5E5"> here at</font>

931
00:33:25,169 --> 00:33:30,539
Chaka Khan about android firmware images

932
00:33:28,110 --> 00:33:33,149
and building your<font color="#CCCCCC"> own images I talked a</font>

933
00:33:30,539 --> 00:33:34,950
little bit about download mode but<font color="#E5E5E5"> this</font>

934
00:33:33,149 --> 00:33:37,799
is like a very scary thing that exists

935
00:33:34,950 --> 00:33:39,600
on every Samsung device it's their own

936
00:33:37,799 --> 00:33:42,750
custom boot loader implementation and

937
00:33:39,600 --> 00:33:45,719
internally<font color="#E5E5E5"> Samsung uses a tool that's</font>

938
00:33:42,750 --> 00:33:48,029
pretty terrible software called Odin<font color="#CCCCCC"> its</font>

939
00:33:45,720 --> 00:33:50,940
windows only but using this you can

940
00:33:48,029 --> 00:33:52,950
potentially overwrite any partition on

941
00:33:50,940 --> 00:33:55,440
<font color="#CCCCCC">the internal storage with a firmware</font>

942
00:33:52,950 --> 00:33:57,360
image that you provide and you can kind

943
00:33:55,440 --> 00:33:59,010
of enter this mode with what we call

944
00:33:57,360 --> 00:34:00,840
like that the grip of death if you've

945
00:33:59,010 --> 00:34:03,120
ever messed with any Android devices

946
00:34:00,840 --> 00:34:04,918
before you kind of have to hold a lot<font color="#E5E5E5"> of</font>

947
00:34:03,120 --> 00:34:07,799
buttons at the same time in order<font color="#E5E5E5"> to get</font>

948
00:34:04,919 --> 00:34:10,320
it<font color="#E5E5E5"> to boot into a different mode so this</font>

949
00:34:07,799 --> 00:34:14,790
<font color="#CCCCCC">particular one drops you into a</font>

950
00:34:10,320 --> 00:34:16,830
bootloader interface and you should

951
00:34:14,790 --> 00:34:18,389
<font color="#CCCCCC">check out Heimdall which is a reverse</font>

952
00:34:16,830 --> 00:34:20,339
engineered version of Odin but it's

953
00:34:18,389 --> 00:34:21,780
cross platform and open source if you if

954
00:34:20,339 --> 00:34:23,549
<font color="#E5E5E5">you're interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> working on some of</font>

955
00:34:21,780 --> 00:34:26,070
these things<font color="#E5E5E5"> it's a lot nicer to get</font>

956
00:34:23,550 --> 00:34:27,750
<font color="#E5E5E5">working than Odin but it should be</font>

957
00:34:26,070 --> 00:34:29,820
<font color="#E5E5E5">fairly obvious that this is terrible</font>

958
00:34:27,750 --> 00:34:31,379
this is overly permissive there should

959
00:34:29,820 --> 00:34:34,649
<font color="#E5E5E5">be no way to overwrite these partitions</font>

960
00:34:31,379 --> 00:34:37,649
on a device at least<font color="#E5E5E5"> without responsibly</font>

961
00:34:34,649 --> 00:34:40,799
unlocking at first so with a few

962
00:34:37,649 --> 00:34:43,279
<font color="#CCCCCC">exceptions most devices allow direct</font>

963
00:34:40,800 --> 00:34:47,490
write access to the internal storage

964
00:34:43,280 --> 00:34:49,740
<font color="#CCCCCC">verizon notably and AT&T have had</font>

965
00:34:47,489 --> 00:34:51,989
restrictions for years on this such<font color="#E5E5E5"> that</font>

966
00:34:49,739 --> 00:34:54,178
you could still actually<font color="#E5E5E5"> do the write in</font>

967
00:34:51,989 --> 00:34:56,368
download mode but it would realize that

968
00:34:54,179 --> 00:34:58,320
this the signature was<font color="#E5E5E5"> different and</font>

969
00:34:56,369 --> 00:35:00,119
failed to boot or just completely break

970
00:34:58,320 --> 00:35:04,349
you in the case of a lot of Verizon

971
00:35:00,119 --> 00:35:06,750
devices but<font color="#E5E5E5"> this exists internationally</font>

972
00:35:04,349 --> 00:35:09,690
on<font color="#E5E5E5"> all</font><font color="#CCCCCC"> our devices and has really</font><font color="#E5E5E5"> only</font>

973
00:35:06,750 --> 00:35:10,850
largely been fixed in marshmallow where

974
00:35:09,690 --> 00:35:12,320
<font color="#E5E5E5">Google mandated that</font>

975
00:35:10,850 --> 00:35:15,860
you have to click that box<font color="#CCCCCC"> I mentioned</font>

976
00:35:12,320 --> 00:35:18,310
earlier let's look at some other<font color="#E5E5E5"> boot</font>

977
00:35:15,860 --> 00:35:21,680
<font color="#E5E5E5">loaders a little kernel which is used on</font>

978
00:35:18,310 --> 00:35:22,820
<font color="#CCCCCC">Qualcomm devices has had many issues</font><font color="#E5E5E5"> in</font>

979
00:35:21,680 --> 00:35:26,029
the past<font color="#E5E5E5"> that'll last similar</font>

980
00:35:22,820 --> 00:35:27,680
functionality so you know the boot

981
00:35:26,030 --> 00:35:29,750
command just completely bypasses

982
00:35:27,680 --> 00:35:31,759
signature verification so you're<font color="#E5E5E5"> not</font>

983
00:35:29,750 --> 00:35:34,340
able to flash a new<font color="#E5E5E5"> image persistently</font>

984
00:35:31,760 --> 00:35:35,720
but you can boot it once and if you can

985
00:35:34,340 --> 00:35:37,220
do<font color="#CCCCCC"> that then you can tamper with</font>

986
00:35:35,720 --> 00:35:38,689
anything on<font color="#E5E5E5"> the system and then it's</font>

987
00:35:37,220 --> 00:35:42,049
actually worse because when you reboot

988
00:35:38,690 --> 00:35:44,900
it's gone there's other issues where you

989
00:35:42,050 --> 00:35:47,210
were able<font color="#E5E5E5"> to forge signatures based on</font>

990
00:35:44,900 --> 00:35:50,720
some crypto weaknesses they had and then

991
00:35:47,210 --> 00:35:52,250
the the<font color="#CCCCCC"> newer one when you flash sparse</font>

992
00:35:50,720 --> 00:35:54,109
bundle images it didn't<font color="#E5E5E5"> actually check</font>

993
00:35:52,250 --> 00:35:56,810
the end of where that sparse bundle was

994
00:35:54,110 --> 00:35:59,780
so if you cleverly made something that

995
00:35:56,810 --> 00:36:03,220
over wrote a particular partition you

996
00:35:59,780 --> 00:36:06,470
could still execute something<font color="#E5E5E5"> like this</font>

997
00:36:03,220 --> 00:36:07,700
and then<font color="#CCCCCC"> laugh which is very aptly</font>

998
00:36:06,470 --> 00:36:09,799
titled<font color="#E5E5E5"> because this is a hilarious</font>

999
00:36:07,700 --> 00:36:12,470
backdoor that LG shipped on a lot of

1000
00:36:09,800 --> 00:36:14,930
their phones it's a special boot mode

1001
00:36:12,470 --> 00:36:17,569
very similar to download mode and you

1002
00:36:14,930 --> 00:36:20,089
talk to it with a obscured send command

1003
00:36:17,570 --> 00:36:22,760
binary which was windows only but

1004
00:36:20,090 --> 00:36:24,670
somebody ported it as a<font color="#E5E5E5"> Python script so</font>

1005
00:36:22,760 --> 00:36:27,740
now it's cross platform and open source

1006
00:36:24,670 --> 00:36:29,510
but essentially you figure<font color="#CCCCCC"> out which</font>

1007
00:36:27,740 --> 00:36:31,879
comport your phones connected to and

1008
00:36:29,510 --> 00:36:33,500
provide that integer to send come in and

1009
00:36:31,880 --> 00:36:36,590
it drops you into root shell on<font color="#E5E5E5"> the</font>

1010
00:36:33,500 --> 00:36:38,060
phone so from that root shell you could

1011
00:36:36,590 --> 00:36:41,060
flash any image you want you could

1012
00:36:38,060 --> 00:36:44,840
access any data in the system<font color="#E5E5E5"> for</font>

1013
00:36:41,060 --> 00:36:47,420
example<font color="#E5E5E5"> and this actually shipped on the</font>

1014
00:36:44,840 --> 00:36:49,160
<font color="#E5E5E5">Nexus 5 which really surprised all of us</font>

1015
00:36:47,420 --> 00:36:52,310
when we kind of realized that this was

1016
00:36:49,160 --> 00:36:55,759
possible<font color="#CCCCCC"> on a Google</font><font color="#E5E5E5"> device so that was</font>

1017
00:36:52,310 --> 00:36:58,310
patched out obviously but LG's fix was

1018
00:36:55,760 --> 00:37:00,200
fairly incomplete so this<font color="#E5E5E5"> is actually</font>

1019
00:36:58,310 --> 00:37:01,940
still possible on a number of models

1020
00:37:00,200 --> 00:37:04,100
essentially what they did was they

1021
00:37:01,940 --> 00:37:05,990
<font color="#E5E5E5">realized well we shouldn't allow over</font>

1022
00:37:04,100 --> 00:37:07,910
writing these particular partition IDs

1023
00:37:05,990 --> 00:37:11,359
because they contain you know

1024
00:37:07,910 --> 00:37:13,819
susceptible firmware images so we'll

1025
00:37:11,360 --> 00:37:17,780
just block the ability to write to for

1026
00:37:13,820 --> 00:37:20,660
example MMC block<font color="#CCCCCC"> 0p one but they didn't</font>

1027
00:37:17,780 --> 00:37:23,600
block the the root volume so<font color="#CCCCCC"> I'm sorry</font>

1028
00:37:20,660 --> 00:37:24,319
the root of the block device so using DD

1029
00:37:23,600 --> 00:37:27,529
and

1030
00:37:24,320 --> 00:37:29,780
eek you could cleverly right to MMC blot

1031
00:37:27,530 --> 00:37:31,370
0 and then just find the offset for the

1032
00:37:29,780 --> 00:37:35,390
partition you want to overwrite and

1033
00:37:31,370 --> 00:37:37,460
still execute this this bug so this is

1034
00:37:35,390 --> 00:37:38,600
<font color="#E5E5E5">obviously fixed now but this is</font>

1035
00:37:37,460 --> 00:37:42,470
<font color="#CCCCCC">something that exists</font><font color="#E5E5E5"> on a ton of</font>

1036
00:37:38,600 --> 00:37:44,299
handsets out there so now we're going<font color="#E5E5E5"> to</font>

1037
00:37:42,470 --> 00:37:46,879
talk<font color="#CCCCCC"> a little bit about the the exploit</font>

1038
00:37:44,300 --> 00:37:48,260
release last year and we kind of want<font color="#E5E5E5"> to</font>

1039
00:37:46,880 --> 00:37:50,420
revisit the idea that full disk

1040
00:37:48,260 --> 00:37:53,360
encryption protects data when the device

1041
00:37:50,420 --> 00:37:54,710
is turned off and we posit that that's

1042
00:37:53,360 --> 00:37:58,610
not necessarily true and a lot of

1043
00:37:54,710 --> 00:38:02,390
devices so this<font color="#E5E5E5"> is Rosie the evil</font>

1044
00:37:58,610 --> 00:38:04,430
Android evil made this is a classic evil

1045
00:38:02,390 --> 00:38:06,740
made attack this stuff like this is

1046
00:38:04,430 --> 00:38:08,569
existed for a while we<font color="#CCCCCC"> just kind of put</font>

1047
00:38:06,740 --> 00:38:11,060
it together to as a proof of concept

1048
00:38:08,570 --> 00:38:13,310
here but it exploits permissive

1049
00:38:11,060 --> 00:38:14,930
bootloaders so any<font color="#E5E5E5"> of the the</font><font color="#CCCCCC"> previous</font>

1050
00:38:13,310 --> 00:38:17,810
slides we just talked about<font color="#E5E5E5"> ways to do</font>

1051
00:38:14,930 --> 00:38:21,200
this you flash a custom boot image

1052
00:38:17,810 --> 00:38:24,110
overwrite the colonel we back toward the

1053
00:38:21,200 --> 00:38:27,410
colonel and in less than two minutes

1054
00:38:24,110 --> 00:38:29,810
including multiple reboots the devices

1055
00:38:27,410 --> 00:38:31,910
is completely back doored so you do this

1056
00:38:29,810 --> 00:38:34,970
you give it back to the user they type

1057
00:38:31,910 --> 00:38:36,319
in their decryption key and sky's the

1058
00:38:34,970 --> 00:38:39,259
limit at that point<font color="#E5E5E5"> because we have</font>

1059
00:38:36,320 --> 00:38:41,000
Colonel<font color="#E5E5E5"> execution so we could steal the</font>

1060
00:38:39,260 --> 00:38:42,680
encryption key we get X exfiltrate

1061
00:38:41,000 --> 00:38:44,270
specific data off<font color="#CCCCCC"> the device</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> could</font>

1062
00:38:42,680 --> 00:38:47,750
get a shell<font color="#CCCCCC"> like it basically anything</font>

1063
00:38:44,270 --> 00:38:49,730
you<font color="#E5E5E5"> want for the purposes of the demo we</font>

1064
00:38:47,750 --> 00:38:51,350
are<font color="#E5E5E5"> exel trading a specific piece of</font>

1065
00:38:49,730 --> 00:38:54,380
<font color="#E5E5E5">data but you could essentially do</font>

1066
00:38:51,350 --> 00:38:55,370
whatever you want with this so<font color="#E5E5E5"> Daniels</font>

1067
00:38:54,380 --> 00:38:58,270
going to talk a little bit about the

1068
00:38:55,370 --> 00:39:02,120
<font color="#E5E5E5">setup and then we'll watch what happens</font>

1069
00:38:58,270 --> 00:39:03,470
so<font color="#E5E5E5"> I'm going to put it all together the</font>

1070
00:39:02,120 --> 00:39:05,270
first thing we did is using the

1071
00:39:03,470 --> 00:39:06,589
permissive bootloader which which drew

1072
00:39:05,270 --> 00:39:08,030
mentioned just for our development

1073
00:39:06,590 --> 00:39:09,950
process it's not only the exploit in the

1074
00:39:08,030 --> 00:39:13,790
end but just to get<font color="#E5E5E5"> going with this we</font>

1075
00:39:09,950 --> 00:39:16,460
installed a free recovery called gwr p

1076
00:39:13,790 --> 00:39:18,860
or<font color="#CCCCCC"> TWRP on there we used odin to flush</font>

1077
00:39:16,460 --> 00:39:21,080
that on the device<font color="#E5E5E5"> and once we had it we</font>

1078
00:39:18,860 --> 00:39:22,910
downloaded the kernel source for the

1079
00:39:21,080 --> 00:39:25,610
device<font color="#CCCCCC"> you were looking at since</font>

1080
00:39:22,910 --> 00:39:26,870
licensing requires to be the Colonel's

1081
00:39:25,610 --> 00:39:29,600
to be open source we just could<font color="#E5E5E5"> get it</font>

1082
00:39:26,870 --> 00:39:31,490
from<font color="#E5E5E5"> the OMS website when we added our</font>

1083
00:39:29,600 --> 00:39:33,140
own custom kernel module to it so here

1084
00:39:31,490 --> 00:39:35,390
you can<font color="#CCCCCC"> see our</font><font color="#E5E5E5"> make menu conflict with</font>

1085
00:39:33,140 --> 00:39:37,460
our back to a module enabled so we added

1086
00:39:35,390 --> 00:39:38,080
this to the CUDA kernel arm and compiled

1087
00:39:37,460 --> 00:39:40,160
it

1088
00:39:38,080 --> 00:39:41,600
and then we just<font color="#CCCCCC"> went through these</font>

1089
00:39:40,160 --> 00:39:43,279
steps basically until they got it<font color="#CCCCCC"> going</font>

1090
00:39:41,600 --> 00:39:45,350
we compiled<font color="#E5E5E5"> the colonel you put a good</font>

1091
00:39:43,280 --> 00:39:47,810
image on the device rebooted the device

1092
00:39:45,350 --> 00:39:50,299
and test it until we<font color="#CCCCCC"> got it going</font><font color="#E5E5E5"> until</font>

1093
00:39:47,810 --> 00:39:52,660
<font color="#CCCCCC">we had a final image which would work so</font>

1094
00:39:50,300 --> 00:39:54,740
and then once we have this the exploit

1095
00:39:52,660 --> 00:39:56,690
doesn't require these steps anymore the

1096
00:39:54,740 --> 00:39:57,618
only thing which needs to be done<font color="#CCCCCC"> is</font>

1097
00:39:56,690 --> 00:40:02,540
what you're going<font color="#E5E5E5"> to see in this video</font>

1098
00:39:57,619 --> 00:40:05,030
now<font color="#CCCCCC"> alright so we start with</font><font color="#E5E5E5"> a popular</font>

1099
00:40:02,540 --> 00:40:06,560
device it's on just to prove that<font color="#E5E5E5"> you</font>

1100
00:40:05,030 --> 00:40:09,109
know<font color="#CCCCCC"> we can turn this off and start the</font>

1101
00:40:06,560 --> 00:40:10,730
attack in the<font color="#E5E5E5"> lower right corner you're</font>

1102
00:40:09,109 --> 00:40:13,190
going to see like a shot clock<font color="#E5E5E5"> style a</font>

1103
00:40:10,730 --> 00:40:15,890
timer to count how long this actually

1104
00:40:13,190 --> 00:40:17,540
takes so here I'm doing<font color="#E5E5E5"> the grip of</font>

1105
00:40:15,890 --> 00:40:20,390
death I mentioned earlier to place this

1106
00:40:17,540 --> 00:40:22,670
device into download mode where it's

1107
00:40:20,390 --> 00:40:24,950
very permissive you get a warning that

1108
00:40:22,670 --> 00:40:26,300
says modifying this OS could cause

1109
00:40:24,950 --> 00:40:29,210
security issues which should be

1110
00:40:26,300 --> 00:40:31,910
self-evident so we connect it to the

1111
00:40:29,210 --> 00:40:36,020
tool and<font color="#E5E5E5"> we load our custom kernel into</font>

1112
00:40:31,910 --> 00:40:38,390
the right slot and here in<font color="#CCCCCC"> under 23</font>

1113
00:40:36,020 --> 00:40:41,930
seconds that device<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been completely</font>

1114
00:40:38,390 --> 00:40:45,770
<font color="#E5E5E5">backdoored so it's going to reboot and</font>

1115
00:40:41,930 --> 00:40:47,480
then once it reboots the user you know

1116
00:40:45,770 --> 00:40:50,750
assume that you've sort<font color="#E5E5E5"> of given this</font>

1117
00:40:47,480 --> 00:40:54,290
back to the user and then we'll talk

1118
00:40:50,750 --> 00:40:55,880
about<font color="#E5E5E5"> what happens now yes as it</font>

1119
00:40:54,290 --> 00:40:57,740
promises we got access to this device

1120
00:40:55,880 --> 00:40:59,810
for a short<font color="#E5E5E5"> amount of time where you</font>

1121
00:40:57,740 --> 00:41:01,430
know you go through<font color="#CCCCCC"> security somewhere</font>

1122
00:40:59,810 --> 00:41:04,340
or<font color="#CCCCCC"> you just borrow it Valle you on the</font>

1123
00:41:01,430 --> 00:41:06,319
bathroom or something like that<font color="#CCCCCC"> and then</font>

1124
00:41:04,340 --> 00:41:08,060
the user<font color="#E5E5E5"> gets the device back and let</font><font color="#CCCCCC"> it</font>

1125
00:41:06,320 --> 00:41:10,580
go it's off<font color="#E5E5E5"> and they need to restart it</font>

1126
00:41:08,060 --> 00:41:11,900
that hype in the passcode and then the

1127
00:41:10,580 --> 00:41:13,910
phone will regularly unlock an hour

1128
00:41:11,900 --> 00:41:17,780
<font color="#E5E5E5">Colonel</font><font color="#CCCCCC"> back door will basically run and</font>

1129
00:41:13,910 --> 00:41:18,980
here on<font color="#E5E5E5"> the right side you see the shell</font>

1130
00:41:17,780 --> 00:41:21,500
just like an etiquette listener

1131
00:41:18,980 --> 00:41:23,359
somewhere on a cloud instance and once

1132
00:41:21,500 --> 00:41:25,369
the device is unlocked we will see<font color="#CCCCCC"> that</font>

1133
00:41:23,359 --> 00:41:27,470
it does dumps a hex dump of a file which

1134
00:41:25,369 --> 00:41:32,109
we which we're sending out there it's

1135
00:41:27,470 --> 00:41:35,529
going to<font color="#CCCCCC"> take a few</font><font color="#E5E5E5"> seconds there we go</font>

1136
00:41:32,109 --> 00:41:38,200
so we got the file received on the cloud

1137
00:41:35,530 --> 00:41:39,520
and then you can see we're just<font color="#E5E5E5"> checking</font>

1138
00:41:38,200 --> 00:41:40,899
<font color="#E5E5E5">okay there is actually a secret light</font>

1139
00:41:39,520 --> 00:41:43,560
database there which is<font color="#E5E5E5"> the accounts</font>

1140
00:41:40,900 --> 00:41:46,180
sequel light database file and we can

1141
00:41:43,560 --> 00:41:48,880
use the stick you lie to look at it and

1142
00:41:46,180 --> 00:41:53,890
we can look at<font color="#CCCCCC"> all the files on there on</font>

1143
00:41:48,880 --> 00:41:56,920
the tables<font color="#CCCCCC"> and then after this we will</font>

1144
00:41:53,890 --> 00:41:58,810
<font color="#E5E5E5">quickly log in via adb shell to show you</font>

1145
00:41:56,920 --> 00:42:01,240
that that file<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> a protected</font>

1146
00:41:58,810 --> 00:42:02,650
file if<font color="#E5E5E5"> you try to cut that file as a</font>

1147
00:42:01,240 --> 00:42:03,729
regular user you will get a permission

1148
00:42:02,650 --> 00:42:05,410
denied error because it's actually

1149
00:42:03,730 --> 00:42:07,060
running it's actually owned by root and

1150
00:42:05,410 --> 00:42:08,290
you should not<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to get to it so</font>

1151
00:42:07,060 --> 00:42:10,810
<font color="#E5E5E5">this kind of shows we're running and</font>

1152
00:42:08,290 --> 00:42:12,970
Colonel like at least would roll

1153
00:42:10,810 --> 00:42:14,950
privileges and we could get a file off

1154
00:42:12,970 --> 00:42:19,990
the<font color="#CCCCCC"> device which was fully encrypted by</font>

1155
00:42:14,950 --> 00:42:22,120
backdooring the colonel like this so

1156
00:42:19,990 --> 00:42:23,680
does to review this real quick so this

1157
00:42:22,120 --> 00:42:25,450
possible on a number of<font color="#E5E5E5"> ym devices is</font>

1158
00:42:23,680 --> 00:42:27,910
not particularly to this one all of the

1159
00:42:25,450 --> 00:42:30,609
ones where you don't have protection of

1160
00:42:27,910 --> 00:42:31,899
<font color="#CCCCCC">the of the boot of the boot image for</font>

1161
00:42:30,610 --> 00:42:33,850
example and which have this permission

1162
00:42:31,900 --> 00:42:35,590
bootloaders which drew has been talking

1163
00:42:33,850 --> 00:42:37,569
about so there's not a new problem and

1164
00:42:35,590 --> 00:42:39,670
all this flashing of<font color="#E5E5E5"> food images has</font>

1165
00:42:37,570 --> 00:42:42,190
been used by the by<font color="#E5E5E5"> the modding and by</font>

1166
00:42:39,670 --> 00:42:43,540
the routing community before but and

1167
00:42:42,190 --> 00:42:44,740
when<font color="#E5E5E5"> Google is aware of this and I think</font>

1168
00:42:43,540 --> 00:42:46,029
drew mentioned already that they're

1169
00:42:44,740 --> 00:42:47,529
trying<font color="#CCCCCC"> to prevent this by having a</font>

1170
00:42:46,030 --> 00:42:49,390
responsible unlock where you need to

1171
00:42:47,530 --> 00:42:51,790
type in the passcode first before the

1172
00:42:49,390 --> 00:42:53,500
bootloader is unlocked and then finally

1173
00:42:51,790 --> 00:42:55,600
<font color="#CCCCCC">this similar things are also possible</font><font color="#E5E5E5"> on</font>

1174
00:42:53,500 --> 00:42:58,000
iOS<font color="#E5E5E5"> I mentioned the evil</font><font color="#CCCCCC"> meta tags</font>

1175
00:42:55,600 --> 00:42:59,680
briefly before if you can drive record

1176
00:42:58,000 --> 00:43:01,150
device and you can<font color="#E5E5E5"> also modify the</font>

1177
00:42:59,680 --> 00:43:02,529
kernel or other coat on there and<font color="#E5E5E5"> you</font>

1178
00:43:01,150 --> 00:43:04,900
can put it back door on it just the same

1179
00:43:02,530 --> 00:43:06,820
way you can do it<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Android just that</font>

1180
00:43:04,900 --> 00:43:11,050
the technique is<font color="#E5E5E5"> a bit it's a bit</font>

1181
00:43:06,820 --> 00:43:14,590
<font color="#CCCCCC">different there</font><font color="#E5E5E5"> all right so yeah this</font>

1182
00:43:11,050 --> 00:43:17,050
is what we call it drew soapbox slide so

1183
00:43:14,590 --> 00:43:19,750
<font color="#E5E5E5">essentially there's ways</font><font color="#CCCCCC"> to fix this and</font>

1184
00:43:17,050 --> 00:43:22,390
it requires cooperation with Google's

1185
00:43:19,750 --> 00:43:24,670
OEM partners and Google we want to see

1186
00:43:22,390 --> 00:43:25,990
<font color="#E5E5E5">secure configurations by default I mean</font>

1187
00:43:24,670 --> 00:43:28,990
when you buy a device it should be

1188
00:43:25,990 --> 00:43:30,759
locked<font color="#E5E5E5"> down as hard as</font><font color="#CCCCCC"> possible however</font>

1189
00:43:28,990 --> 00:43:32,529
we believe there should be<font color="#E5E5E5"> responsible</font>

1190
00:43:30,760 --> 00:43:35,560
boot locked bootloader unlock

1191
00:43:32,530 --> 00:43:37,720
capabilities think a lot of<font color="#E5E5E5"> these public</font>

1192
00:43:35,560 --> 00:43:39,460
exploits that come out simply<font color="#CCCCCC"> exists</font>

1193
00:43:37,720 --> 00:43:41,799
because there's such demand that people

1194
00:43:39,460 --> 00:43:44,980
want to legitimately modify their own

1195
00:43:41,800 --> 00:43:48,210
devices and run rooted apps and change

1196
00:43:44,980 --> 00:43:48,210
the way things look right so

1197
00:43:48,590 --> 00:43:53,120
exports may not be as necessary to exist

1198
00:43:50,690 --> 00:43:54,830
if the OEM partners just<font color="#E5E5E5"> said okay if</font>

1199
00:43:53,120 --> 00:43:56,420
<font color="#E5E5E5">you accept the risks will let you unlock</font>

1200
00:43:54,830 --> 00:43:58,960
it and then you<font color="#E5E5E5"> don't have to do these</font>

1201
00:43:56,420 --> 00:44:01,100
sort of dangerous hacks to your device

1202
00:43:58,960 --> 00:44:03,560
we'd really<font color="#E5E5E5"> like to see like clearly</font>

1203
00:44:01,100 --> 00:44:06,140
<font color="#E5E5E5">documented security guarantees because</font>

1204
00:44:03,560 --> 00:44:08,660
each device<font color="#E5E5E5"> it's you have to research</font>

1205
00:44:06,140 --> 00:44:12,230
each one individually even devices

1206
00:44:08,660 --> 00:44:13,790
within you know so like<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> ms device on</font>

1207
00:44:12,230 --> 00:44:15,230
different carrier networks will have

1208
00:44:13,790 --> 00:44:16,970
different protections and you don't

1209
00:44:15,230 --> 00:44:18,470
<font color="#CCCCCC">really know that</font><font color="#E5E5E5"> until you actually buy</font>

1210
00:44:16,970 --> 00:44:20,930
the phone and<font color="#CCCCCC"> figure out how it works</font>

1211
00:44:18,470 --> 00:44:23,930
because<font color="#E5E5E5"> no one's no one's saying here's</font>

1212
00:44:20,930 --> 00:44:26,299
what we're protecting and we'd<font color="#E5E5E5"> like to</font>

1213
00:44:23,930 --> 00:44:29,330
see consistency among these OEM partners

1214
00:44:26,300 --> 00:44:32,270
so you know let's have one heavily

1215
00:44:29,330 --> 00:44:35,509
audited public<font color="#CCCCCC"> boot loader that</font><font color="#E5E5E5"> we all</font>

1216
00:44:32,270 --> 00:44:36,530
agree<font color="#CCCCCC"> to use and keep our eyes on to</font>

1217
00:44:35,510 --> 00:44:39,200
make sure there's now the<font color="#E5E5E5"> security</font>

1218
00:44:36,530 --> 00:44:40,760
<font color="#E5E5E5">Mulder bilities on if if everyone didn't</font>

1219
00:44:39,200 --> 00:44:42,950
do their own thing and have all these

1220
00:44:40,760 --> 00:44:44,450
crazy problems with with their boot

1221
00:44:42,950 --> 00:44:50,210
loaders then this problem would largely

1222
00:44:44,450 --> 00:44:52,399
be mitigated in<font color="#E5E5E5"> Allah cases so let's get</font>

1223
00:44:50,210 --> 00:44:55,130
this to some alternatives to platform

1224
00:44:52,400 --> 00:44:57,170
security maybe becomes<font color="#E5E5E5"> clear in a second</font>

1225
00:44:55,130 --> 00:44:59,600
what we mean by<font color="#E5E5E5"> that so what do you do</font>

1226
00:44:57,170 --> 00:45:01,850
if you if you're an app developer and

1227
00:44:59,600 --> 00:45:03,830
you may not be<font color="#E5E5E5"> able to enforce users</font><font color="#CCCCCC"> who</font>

1228
00:45:01,850 --> 00:45:05,120
set passwords on the devices so the most

1229
00:45:03,830 --> 00:45:06,710
common solution for that is<font color="#E5E5E5"> having</font>

1230
00:45:05,120 --> 00:45:08,509
custom apps and boxes if you're familiar

1231
00:45:06,710 --> 00:45:10,010
with good or<font color="#CCCCCC"> MobileIron or any of these</font>

1232
00:45:08,510 --> 00:45:12,230
containers solutions that's kind of what

1233
00:45:10,010 --> 00:45:14,330
they do they are you had a<font color="#CCCCCC"> passcode to</font>

1234
00:45:12,230 --> 00:45:16,700
<font color="#E5E5E5">the application just like what you've</font>

1235
00:45:14,330 --> 00:45:18,350
described<font color="#CCCCCC"> in both cases you derive an</font>

1236
00:45:16,700 --> 00:45:19,580
encryption key from that passcode you

1237
00:45:18,350 --> 00:45:21,410
encrypt all your data in the sandbox

1238
00:45:19,580 --> 00:45:23,690
with that passcode<font color="#CCCCCC"> and whenever the app</font>

1239
00:45:21,410 --> 00:45:26,060
is being closed or our<font color="#CCCCCC"> background you</font>

1240
00:45:23,690 --> 00:45:28,820
just wipe that key from<font color="#CCCCCC"> the from</font><font color="#E5E5E5"> the</font>

1241
00:45:26,060 --> 00:45:29,990
memory<font color="#E5E5E5"> and you you should be having an</font>

1242
00:45:28,820 --> 00:45:31,580
implementation which is<font color="#E5E5E5"> pretty similar</font>

1243
00:45:29,990 --> 00:45:34,009
<font color="#CCCCCC">to what the operating system provides</font>

1244
00:45:31,580 --> 00:45:35,720
the problem is though getting this right

1245
00:45:34,010 --> 00:45:37,730
is hard so crypto getting can encrypt

1246
00:45:35,720 --> 00:45:39,290
<font color="#CCCCCC">your heart is already hard but on top of</font>

1247
00:45:37,730 --> 00:45:40,610
that you also<font color="#E5E5E5"> have the problem that you</font>

1248
00:45:39,290 --> 00:45:42,290
don't have<font color="#E5E5E5"> any of the hardware support</font>

1249
00:45:40,610 --> 00:45:44,450
which the operating system has for you

1250
00:45:42,290 --> 00:45:45,950
so you don't<font color="#E5E5E5"> have proof verse</font>

1251
00:45:44,450 --> 00:45:49,339
protections or any kind of enforcement

1252
00:45:45,950 --> 00:45:51,649
<font color="#E5E5E5">for how much how many attempts somebody</font>

1253
00:45:49,340 --> 00:45:52,850
could make or you can copy the sandbox

1254
00:45:51,650 --> 00:45:54,790
off the device and do an offline

1255
00:45:52,850 --> 00:45:57,710
brute-force attack and things like that

1256
00:45:54,790 --> 00:45:59,600
another option would be potentially to

1257
00:45:57,710 --> 00:46:00,710
not have offline storage at all and<font color="#CCCCCC"> just</font>

1258
00:45:59,600 --> 00:46:01,529
have an app which stores everything

1259
00:46:00,710 --> 00:46:03,630
online

1260
00:46:01,530 --> 00:46:06,780
but that's that's challenging too

1261
00:46:03,630 --> 00:46:08,340
because we have you need to have some

1262
00:46:06,780 --> 00:46:10,590
applications which have offline data and

1263
00:46:08,340 --> 00:46:12,570
we have to have usability so that the

1264
00:46:10,590 --> 00:46:14,490
user doesn't need to login into the

1265
00:46:12,570 --> 00:46:15,650
<font color="#E5E5E5">application every single time they're</font>

1266
00:46:14,490 --> 00:46:17,850
trying<font color="#E5E5E5"> to access their information</font>

1267
00:46:15,650 --> 00:46:20,160
because otherwise you opened<font color="#E5E5E5"> up</font><font color="#CCCCCC"> a nap</font>

1268
00:46:17,850 --> 00:46:22,080
and you have if the app auto logs in

1269
00:46:20,160 --> 00:46:23,819
then you didn't<font color="#E5E5E5"> gain anything right</font>

1270
00:46:22,080 --> 00:46:25,020
because you can still get the data so

1271
00:46:23,820 --> 00:46:28,890
<font color="#E5E5E5">you would need to have an authentication</font>

1272
00:46:25,020 --> 00:46:32,100
I'm at each step of there so where does

1273
00:46:28,890 --> 00:46:35,190
this leave us just like<font color="#E5E5E5"> to two things</font>

1274
00:46:32,100 --> 00:46:37,770
here in<font color="#E5E5E5"> general for best practices for</font>

1275
00:46:35,190 --> 00:46:40,380
users we have to set strong pass codes

1276
00:46:37,770 --> 00:46:42,390
on the devices so that the operating

1277
00:46:40,380 --> 00:46:43,590
system can we can actually<font color="#E5E5E5"> use the</font>

1278
00:46:42,390 --> 00:46:46,319
hardware features and everything in

1279
00:46:43,590 --> 00:46:48,690
there and then for iOS you might want<font color="#E5E5E5"> to</font>

1280
00:46:46,320 --> 00:46:50,850
consider enabling remote wipe so that

1281
00:46:48,690 --> 00:46:52,650
you like your phone gets wiped if you

1282
00:46:50,850 --> 00:46:53,970
either remotely want to or if you're

1283
00:46:52,650 --> 00:46:57,630
typing in the passcode to number of

1284
00:46:53,970 --> 00:47:00,330
different times yeah Brooke Willie for

1285
00:46:57,630 --> 00:47:02,340
<font color="#E5E5E5">Android choose your device wisely this</font>

1286
00:47:00,330 --> 00:47:05,250
is not an<font color="#E5E5E5"> easy task you kind of have to</font>

1287
00:47:02,340 --> 00:47:07,110
research them and encrypt your device if

1288
00:47:05,250 --> 00:47:08,850
it's not forced this has been a user

1289
00:47:07,110 --> 00:47:12,450
electable option for many years like

1290
00:47:08,850 --> 00:47:15,360
pleasing please enable this best

1291
00:47:12,450 --> 00:47:17,460
practices you know determine if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font>

1292
00:47:15,360 --> 00:47:19,620
to store this data at all you know this

1293
00:47:17,460 --> 00:47:21,180
is<font color="#E5E5E5"> case by case obviously but you know</font>

1294
00:47:19,620 --> 00:47:23,299
do you need to<font color="#E5E5E5"> store the secure thing or</font>

1295
00:47:21,180 --> 00:47:25,740
can you pull it down when you need it

1296
00:47:23,300 --> 00:47:29,640
android relying on platform security is

1297
00:47:25,740 --> 00:47:33,450
very<font color="#E5E5E5"> challenging as we've seen and for</font>

1298
00:47:29,640 --> 00:47:34,920
iOS yeah why iOS the you want to use<font color="#E5E5E5"> a</font>

1299
00:47:33,450 --> 00:47:36,330
protection class which actually requires

1300
00:47:34,920 --> 00:47:38,760
a pass code which incorporates the

1301
00:47:36,330 --> 00:47:41,819
<font color="#CCCCCC">passcode into</font><font color="#E5E5E5"> the into the encryption</font>

1302
00:47:38,760 --> 00:47:44,820
and if you want to store data which is

1303
00:47:41,820 --> 00:47:46,140
<font color="#E5E5E5">not with you is throwing yourself as an</font>

1304
00:47:44,820 --> 00:47:48,120
app developer you want to use one<font color="#CCCCCC"> of the</font>

1305
00:47:46,140 --> 00:47:50,670
protection classes which actually um you

1306
00:47:48,120 --> 00:47:52,109
makes use of the passcode<font color="#E5E5E5"> and one the</font>

1307
00:47:50,670 --> 00:47:54,990
user if they don't have<font color="#CCCCCC"> a passcode set</font>

1308
00:47:52,110 --> 00:47:57,900
on the device<font color="#CCCCCC"> if possible so our</font>

1309
00:47:54,990 --> 00:47:59,819
takeaways security much control should

1310
00:47:57,900 --> 00:48:01,290
<font color="#E5E5E5">be balanced with how sensitive the data</font>

1311
00:47:59,820 --> 00:48:02,670
is and the threat model remember the

1312
00:48:01,290 --> 00:48:05,310
graph we showed earlier who are you

1313
00:48:02,670 --> 00:48:07,830
worried about protect<font color="#E5E5E5"> the data until</font>

1314
00:48:05,310 --> 00:48:09,690
it's actually needed and secure storage

1315
00:48:07,830 --> 00:48:11,279
relies on the entire stack being secured

1316
00:48:09,690 --> 00:48:12,840
and hopefully the the attack we showed

1317
00:48:11,280 --> 00:48:14,080
earlier illustrates the importance of

1318
00:48:12,840 --> 00:48:16,030
this

1319
00:48:14,080 --> 00:48:18,100
so we want<font color="#E5E5E5"> to say thanks very much to</font>

1320
00:48:16,030 --> 00:48:20,380
chaka khan<font color="#E5E5E5"> for having us it's great to</font>

1321
00:48:18,100 --> 00:48:22,210
be<font color="#CCCCCC"> back here any</font><font color="#E5E5E5"> questions please</font><font color="#CCCCCC"> let us</font>

1322
00:48:20,380 --> 00:48:24,520
know the slide<font color="#E5E5E5"> deck should be available</font>

1323
00:48:22,210 --> 00:48:27,010
<font color="#CCCCCC">shortly at that URL after the talk and</font>

1324
00:48:24,520 --> 00:48:37,540
follow us on Twitter and<font color="#E5E5E5"> social media</font>

1325
00:48:27,010 --> 00:48:39,960
but thanks very much to<font color="#E5E5E5"> everyone any</font>

1326
00:48:37,540 --> 00:48:39,960
questions

1327
00:48:45,790 --> 00:49:01,810
<font color="#E5E5E5">yeah so good question that's actually</font>

1328
00:48:58,300 --> 00:49:03,730
changed with marshmallow there's what

1329
00:49:01,810 --> 00:49:06,100
they call<font color="#E5E5E5"> SD card adoption so there's</font>

1330
00:49:03,730 --> 00:49:08,320
two methods that you can<font color="#E5E5E5"> do one is if</font>

1331
00:49:06,100 --> 00:49:10,960
you adopt it to the system<font color="#E5E5E5"> it gets</font>

1332
00:49:08,320 --> 00:49:13,950
formatted as ext4 and then it's

1333
00:49:10,960 --> 00:49:18,670
encrypted and essentially if if your

1334
00:49:13,950 --> 00:49:20,200
device gets stolen or lost or you know

1335
00:49:18,670 --> 00:49:22,420
you<font color="#E5E5E5"> lose you forget your password that</font>

1336
00:49:20,200 --> 00:49:23,980
data is as good as dead so even if you

1337
00:49:22,420 --> 00:49:27,880
take the card out and try<font color="#E5E5E5"> to look at it</font>

1338
00:49:23,980 --> 00:49:31,990
you're done the other option is the

1339
00:49:27,880 --> 00:49:33,760
historical fat32<font color="#CCCCCC"> valdese sort of like</font>

1340
00:49:31,990 --> 00:49:35,799
hack that they have where it just treats

1341
00:49:33,760 --> 00:49:38,260
it as a normal SD card<font color="#E5E5E5"> and then it</font>

1342
00:49:35,800 --> 00:49:40,510
doesn't<font color="#E5E5E5"> have any of the OS level</font>

1343
00:49:38,260 --> 00:49:42,340
encryption protection it's whatever is

1344
00:49:40,510 --> 00:49:44,260
stored there whatever application

1345
00:49:42,340 --> 00:49:46,060
decides to store it there it's up to

1346
00:49:44,260 --> 00:49:51,630
that application<font color="#CCCCCC"> to decide how that's</font>

1347
00:49:46,060 --> 00:49:54,630
sword I think it's somebody back there

1348
00:49:51,630 --> 00:49:54,630
yeah

1349
00:49:57,170 --> 00:49:59,230
you

1350
00:50:05,790 --> 00:50:11,630
so like connecting something with<font color="#E5E5E5"> like a</font>

1351
00:50:07,950 --> 00:50:17,910
like a USB<font color="#E5E5E5"> OTG is that the questioner</font>

1352
00:50:11,630 --> 00:50:19,710
yeah so yeah so you'll get prompted

1353
00:50:17,910 --> 00:50:23,370
whatever you plug in as an external

1354
00:50:19,710 --> 00:50:25,560
storage medium to either adopt it or let

1355
00:50:23,370 --> 00:50:27,660
it be under the doorbell mechanism so

1356
00:50:25,560 --> 00:50:38,070
<font color="#CCCCCC">it'll work exactly</font><font color="#E5E5E5"> like what I described</font>

1357
00:50:27,660 --> 00:50:41,089
to to the previous question<font color="#E5E5E5"> okay well</font>

1358
00:50:38,070 --> 00:50:41,090
thanks everyone thanks everyone

