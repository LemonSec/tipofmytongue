1
00:00:00,560 --> 00:00:03,550
password crypto problems now

2
00:00:03,550 --> 00:00:07,569
yeah addresses a key part to that team.
the release now

3
00:00:07,569 --> 00:00:11,139
white paper he also traveled a really
long way to get here he's not really

4
00:00:11,139 --> 00:00:12,870
take much time off because he has a

5
00:00:12,870 --> 00:00:17,480
vacation next week from Greece so if he
looks jet lag it's because he is

6
00:00:17,480 --> 00:00:23,320
%ah and I really happy flyer to time
contact us today so please welcome thank

7
00:00:23,320 --> 00:00:23,570
you

8
00:00:23,510 --> 00:00:30,029
thanks for a short introduction

9
00:00:30,029 --> 00:00:34,000
I'm very happy to be here and welcome to
my focus on

10
00:00:34,000 --> 00:00:39,420
and fisting with with a special focus on
runtime analysis and manipulation

11
00:00:39,420 --> 00:00:42,510
if you have any questions all let

12
00:00:42,510 --> 00:00:47,379
on submit the and my presentation and
please forgive me any dropouts

13
00:00:47,379 --> 00:00:51,218
it's Jason said right now it's middle of
the night in Germany

14
00:00:51,219 --> 00:00:57,399
so HS one sec thank you

15
00:00:57,399 --> 00:01:01,100
right now okay yet yep

16
00:01:01,100 --> 00:01:05,700
I just flipped locks and it's a 12-hour
time shift so

17
00:01:05,700 --> 00:01:09,310
sorry for any trouble out before the
start of a few words about me in the

18
00:01:09,310 --> 00:01:10,110
next slide

19
00:01:10,110 --> 00:01:14,869
I'm currently writing my PhD thesis that
the security research group of the

20
00:01:14,869 --> 00:01:16,170
University of Alan

21
00:01:16,170 --> 00:01:19,780
him back in the main focus of my
research is

22
00:01:19,780 --> 00:01:23,280
based on the security of mobile devices
and mobile applications

23
00:01:23,280 --> 00:01:28,170
so for example we are currently
researching new techniques for ultimate

24
00:01:28,170 --> 00:01:33,770
dynamic analysis of Iowa saps to conduct
empirical studies and the security

25
00:01:33,770 --> 00:01:35,298
landscape of mobile apps

26
00:01:35,299 --> 00:01:40,960
and sites my academic work I'm cofounder
of unease a security lapse a security

27
00:01:40,960 --> 00:01:43,759
research and consulting company based in
Germany

28
00:01:43,759 --> 00:01:48,729
we are specialized software security to
a lot of penetration testing code

29
00:01:48,729 --> 00:01:50,700
analysis of different kind of software

30
00:01:50,700 --> 00:01:55,450
from native software to web applications
and a lot of mobile applications in the

31
00:01:55,450 --> 00:01:56,340
last year's

32
00:01:56,340 --> 00:01:59,570
I'd like to begin this

33
00:01:59,570 --> 00:02:04,460
talk with a butt on the current state of
mobile application security

34
00:02:04,460 --> 00:02:08,549
when it comes to security assessment of
amo by lepe

35
00:02:08,550 --> 00:02:13,610
most of the time spent looking for when
their abilities in the back and services

36
00:02:13,610 --> 00:02:16,650
those of you with a conduct its a

37
00:02:16,650 --> 00:02:21,069
and testify mobile app for might agree
on that that many reasons

38
00:02:21,069 --> 00:02:24,480
just to name a few of them most Epps are

39
00:02:24,480 --> 00:02:27,829
communicating why HTTP to back and web
services

40
00:02:27,830 --> 00:02:31,750
so it's quite easy to adopt all
well-known technologies

41
00:02:31,750 --> 00:02:35,340
and methodologies from a browser-based
world

42
00:02:35,340 --> 00:02:38,530
to excess the security of a mobile apps

43
00:02:38,530 --> 00:02:41,700
second component right in addition

44
00:02:41,700 --> 00:02:45,988
we have plenty of tools and scandalous
for emailing when your abilities and

45
00:02:45,989 --> 00:02:46,980
what implications

46
00:02:46,980 --> 00:02:52,329
on the contest go on using them and also
look for back and won their abilities

47
00:02:52,330 --> 00:02:58,739
compared to that less so far only little
information on mobile app assessments

48
00:02:58,739 --> 00:03:02,900
and to make matters worse we have almost
no tools

49
00:03:02,900 --> 00:03:06,129
to assist assessments of mobile front
ends

50
00:03:06,129 --> 00:03:09,379
for the purpose of this presentation

51
00:03:09,379 --> 00:03:12,670
is to enlarge that mauled by a lab slice

52
00:03:12,670 --> 00:03:16,260
and to attach more importance on the
itself

53
00:03:16,260 --> 00:03:20,310
and I promise you it's worth it within
the last yes we know

54
00:03:20,310 --> 00:03:24,750
me up serving a strong increase of
client site security measures

55
00:03:24,750 --> 00:03:29,010
inside mobile applications one popular
example is

56
00:03:29,010 --> 00:03:32,599
me what's at messenger which I found
some serious security

57
00:03:32,599 --> 00:03:36,810
on the Republic is almost two years ago
exploitation of those won their

58
00:03:36,810 --> 00:03:38,049
abilities allow to you

59
00:03:38,049 --> 00:03:41,780
to take over any what's if User account
remotely

60
00:03:41,780 --> 00:03:45,810
to read messages on their behalf and
sent messages and remote means

61
00:03:45,810 --> 00:03:49,010
but only in the same by less broadcast a
man but in the same

62
00:03:49,010 --> 00:03:52,739
internet yeah were serious won their
abilities

63
00:03:52,739 --> 00:03:56,360
in the day registration cuz

64
00:03:56,360 --> 00:03:59,819
their registration of numbers in the
number verification actually

65
00:03:59,819 --> 00:04:05,689
only took place in happened inside yep
so it's worth a look behind the scenes

66
00:04:05,689 --> 00:04:12,129
purcell the relevant knowledge weekend
in pen testing during the last yes

67
00:04:12,129 --> 00:04:15,298
I'm going to bite this presentation into
two parts

68
00:04:15,299 --> 00:04:20,478
at the beginning I'd like to give you a
broad outline on the objective-c runtime

69
00:04:20,478 --> 00:04:25,389
I would show you all running I always
applications can be expanded with

70
00:04:25,389 --> 00:04:26,460
additional

71
00:04:26,460 --> 00:04:30,780
the packing and front I'm tracing
capabilities and health this facilitates

72
00:04:30,780 --> 00:04:31,869
both

73
00:04:31,870 --> 00:04:35,490
pandemic and static analysis of IOUs
Epps

74
00:04:35,490 --> 00:04:38,790
after the introduction we will focus on
different use cases

75
00:04:38,790 --> 00:04:42,120
impacts so if you are pen tester

76
00:04:42,120 --> 00:04:45,650
you should be able to explore the attack
surface of an i/o Sep

77
00:04:45,650 --> 00:04:48,929
more efficiently at least I hope so

78
00:04:48,930 --> 00:04:52,060
if you are at the weather but you might
prefer

79
00:04:52,060 --> 00:04:56,770
to avoid blindside logic and security
measures in the future

80
00:04:56,770 --> 00:05:01,180
and if your decision-making you should
be aware of the matching race

81
00:05:01,180 --> 00:05:04,880
just a few comments on what this talk
will not cover we will not look

82
00:05:04,880 --> 00:05:07,949
and on on vulnerabilities and on the
line

83
00:05:07,949 --> 00:05:11,120
I US operating system and we won't
discuss

84
00:05:11,120 --> 00:05:14,259
those basic procedures of at and this

85
00:05:14,259 --> 00:05:17,699
s there's been plenty of talk some other
conferences before

86
00:05:17,699 --> 00:05:20,759
we're focusing on runtime analysis and
runtime

87
00:05:20,759 --> 00:05:27,669
Manuel Asian let's start with a quick
introduction to the objective-c runtime

88
00:05:27,669 --> 00:05:31,409
before we have a closer look at the
runtime itself let's talk about

89
00:05:31,410 --> 00:05:34,610
let's call or not objective-c for a
moment

90
00:05:34,610 --> 00:05:38,610
objective-c was developed in the Ellie
19 80s

91
00:05:38,610 --> 00:05:42,919
and was the main language use for the
next step operating system from which

92
00:05:42,919 --> 00:05:46,120
a West End anti-u_s_ are derived and all

93
00:05:46,120 --> 00:05:49,690
I USF sorry ten objective-c

94
00:05:49,690 --> 00:05:54,620
objective-c provides a set of extensions
to C programming language

95
00:05:54,620 --> 00:05:58,699
these additions of art sound bites and
object Korean tits

96
00:05:58,699 --> 00:06:03,880
to sign we have a strong messaging
concept we look at this in a few minutes

97
00:06:03,880 --> 00:06:06,949
a dynamic typing and reflection you
might have heard

98
00:06:06,949 --> 00:06:09,949
of reflection and other languages like
child before

99
00:06:09,949 --> 00:06:14,360
reflection is the ability of a computer
program to modify its

100
00:06:14,360 --> 00:06:17,840
behavior at runtime so

101
00:06:17,840 --> 00:06:20,900
these concepts make objective-c quite
attractive from making

102
00:06:20,900 --> 00:06:23,919
perspective at least all these runtime:
functionalities and that

103
00:06:23,919 --> 00:06:29,049
reflection abilities let's have a look
at some sample code

104
00:06:29,050 --> 00:06:32,990
we have a hello world class which has
some memory allocated

105
00:06:32,990 --> 00:06:37,380
and this initialized and after what's
the method say hello is called

106
00:06:37,380 --> 00:06:41,159
just the printout am the arguments like
a con

107
00:06:41,160 --> 00:06:44,310
we come back to that sample in a second

108
00:06:44,310 --> 00:06:47,680
in the meantime will have a look at the
actual runtime: what

109
00:06:47,680 --> 00:06:51,030
makes the objective-c runtime

110
00:06:51,030 --> 00:06:54,258
during the boot process all Epps are
linked

111
00:06:54,259 --> 00:06:57,280
to the lip objective-c dynamic library

112
00:06:57,280 --> 00:07:01,739
information on all linked binary is can
be extracted from the binary

113
00:07:01,740 --> 00:07:05,410
using the object file: displaying tool
from Apple

114
00:07:05,410 --> 00:07:08,940
which it will show you at every I US ep

115
00:07:08,940 --> 00:07:14,240
is linked to this specific library in
this live objective-c a dialup so

116
00:07:14,240 --> 00:07:17,750
this library provides all the runtime
functionalities

117
00:07:17,750 --> 00:07:21,120
of the objective-c runtime

118
00:07:21,120 --> 00:07:24,300
and the most important function of its
runtime

119
00:07:24,300 --> 00:07:28,000
is the function objective-c message sent

120
00:07:28,000 --> 00:07:32,669
so this function serves as a central
dispatcher

121
00:07:32,669 --> 00:07:37,330
dysfunction issues to send message this
to existing objects

122
00:07:37,330 --> 00:07:41,650
that's the core of that message in
concept in order to invoke a

123
00:07:41,650 --> 00:07:44,940
specific object method every time a

124
00:07:44,940 --> 00:07:48,250
message messages sent to that this
picture and it through

125
00:07:48,250 --> 00:07:51,629
routes they the messages to receiving
objects:

126
00:07:51,629 --> 00:07:55,470
this can be compared to calling a
function in C so very fundamental

127
00:07:55,470 --> 00:07:57,199
concept

128
00:07:57,199 --> 00:08:00,259
this dispatcher function accepts at
least the minimum of two

129
00:08:00,259 --> 00:08:03,490
around metus the first paramita

130
00:08:03,490 --> 00:08:07,240
it's a point to to an instance of a
class

131
00:08:07,240 --> 00:08:11,960
hoofs method we want to call this is
called the receiver on the receiving end

132
00:08:11,960 --> 00:08:12,989
stance

133
00:08:12,990 --> 00:08:18,389
in our sample it's a instance of the
hell a world-class

134
00:08:18,389 --> 00:08:22,560
the second argument that function is the
name of the method

135
00:08:22,560 --> 00:08:25,560
that should be invoked in objective-c

136
00:08:25,560 --> 00:08:31,849
this is called the selector in our
sample say hello math

137
00:08:31,849 --> 00:08:35,779
in the end dispatcher receives a
variable is the arguments which is sent

138
00:08:35,779 --> 00:08:39,458
to that say hello method what's very
important issue

139
00:08:39,458 --> 00:08:43,018
keep in mind is at every method
invocation

140
00:08:43,019 --> 00:08:46,180
in objective-c with salts in one or more

141
00:08:46,180 --> 00:08:49,579
messages too fat central dispatcher

142
00:08:49,580 --> 00:08:53,589
it's going to be important in a few
minutes let's talk about how this

143
00:08:53,589 --> 00:08:54,890
runtime behavior

144
00:08:54,890 --> 00:08:59,189
influenza security assessments of I with
applications

145
00:08:59,190 --> 00:09:03,160
as an any kind of software security
assessment two different approaches to

146
00:09:03,160 --> 00:09:03,699
excess

147
00:09:03,700 --> 00:09:07,360
we have static analysis and dynamic
analysis

148
00:09:07,360 --> 00:09:12,550
and why static analysis gives you
detailed insights into amo by lepe

149
00:09:12,550 --> 00:09:16,290
is of course the preferred way of
performing a security assessment

150
00:09:16,290 --> 00:09:19,310
it's not always the most practical way

151
00:09:19,310 --> 00:09:23,268
mention when that's no source code
available

152
00:09:23,269 --> 00:09:26,760
or another problem when you're have a
look at this assembly

153
00:09:26,760 --> 00:09:29,800
of NIOS at you might notice that

154
00:09:29,800 --> 00:09:34,399
the characteristics objective-c Mike
makes it quite difficult to follow the

155
00:09:34,399 --> 00:09:35,709
control-flow

156
00:09:35,709 --> 00:09:39,300
because of that dynamic messaging
concept which is

157
00:09:39,300 --> 00:09:44,469
decided at runtime in the end static
analysis of Iowa steps are quite time

158
00:09:44,470 --> 00:09:45,630
consuming

159
00:09:45,630 --> 00:09:49,779
we all know that pen test is always on a
tight deadline

160
00:09:49,779 --> 00:09:52,950
so what can we do the good thing is

161
00:09:52,950 --> 00:09:56,010
that the characteristics of the
objective-c runtime

162
00:09:56,010 --> 00:09:59,459
enables comprehensive and efficient
dynamic

163
00:09:59,459 --> 00:10:02,810
analysis so

164
00:10:02,810 --> 00:10:06,779
for example we could intercept all those
messages

165
00:10:06,779 --> 00:10:11,390
that central dispatcher we get that
completely a trace of the internal

166
00:10:11,390 --> 00:10:12,610
control flow

167
00:10:12,610 --> 00:10:16,240
without having the source code at all we
could also send

168
00:10:16,240 --> 00:10:19,779
arbitrary messages to existing objects
or rewrite

169
00:10:19,779 --> 00:10:24,149
whole implementations of methods and
then we really start to manipulate

170
00:10:24,149 --> 00:10:25,019
what's going on

171
00:10:25,019 --> 00:10:28,600
inside an app so we're trying to

172
00:10:28,600 --> 00:10:31,700
make use of these techniques

173
00:10:31,700 --> 00:10:34,870
that's it for a short introduction
important part part was

174
00:10:34,870 --> 00:10:38,440
that central function of the runtime:

175
00:10:38,440 --> 00:10:41,860
let's move on and have a look at some
backgrounds and techniques how to

176
00:10:41,860 --> 00:10:45,490
Manufa late this runtime

177
00:10:45,490 --> 00:10:48,779
so our starting point our goal is
ape-like box

178
00:10:48,779 --> 00:10:52,230
analysis up a try I was at

179
00:10:52,230 --> 00:10:57,140
this could be an enterprise in house at
on at from the official App Store

180
00:10:57,140 --> 00:11:00,350
Cydia app and the typical approach with

181
00:11:00,350 --> 00:11:03,870
with Chase to San for mobile app
security assessment

182
00:11:03,870 --> 00:11:07,750
is to XM India on a chain broke and the
Weiss

183
00:11:07,750 --> 00:11:12,579
this has many advantages a.m. at first
it removes all limitations imposed by

184
00:11:12,579 --> 00:11:13,390
Apple

185
00:11:13,390 --> 00:11:16,779
it provides to root access to the
operating system

186
00:11:16,779 --> 00:11:20,620
enables you to install additional
analysis software

187
00:11:20,620 --> 00:11:23,750
and it gets you access to the
objective-c runtime

188
00:11:23,750 --> 00:11:28,870
so this is the basic procedure want to a
black box analysis on a jailbroken

189
00:11:28,870 --> 00:11:33,829
testing device and due to its reflection
abilities

190
00:11:33,829 --> 00:11:37,640
the objective-c runtime offers a wide
range of Unity's

191
00:11:37,640 --> 00:11:41,750
to manipulate existing Iowa steps

192
00:11:41,750 --> 00:11:44,880
before we start to manipulate what
happens insights

193
00:11:44,880 --> 00:11:47,880
we need to extend an existing app

194
00:11:47,880 --> 00:11:51,060
with additional coat and for this

195
00:11:51,060 --> 00:11:54,609
two different approaches have proven to
be extremely practical

196
00:11:54,610 --> 00:11:58,399
you could either in check a complete
static library

197
00:11:58,399 --> 00:12:02,930
with new functionalities or we could
unchecked an interpreter

198
00:12:02,930 --> 00:12:07,489
for on the fly manipulations let's have
a look on the first one first

199
00:12:07,490 --> 00:12:12,250
when check the static library to inject
additional code from a deep fucking

200
00:12:12,250 --> 00:12:13,920
library we have to follow up

201
00:12:13,920 --> 00:12:18,709
we make use of the environment variable
insert libraries

202
00:12:18,709 --> 00:12:21,739
this variable at my sis the dynamic
linker

203
00:12:21,740 --> 00:12:26,510
which is a component of the operating
system to load an additional dynamics at

204
00:12:26,510 --> 00:12:27,360
library

205
00:12:27,360 --> 00:12:30,940
into the IOUs address space at startup

206
00:12:30,940 --> 00:12:35,779
so that's the first step just at
additional Colt

207
00:12:35,779 --> 00:12:38,779
like this

208
00:12:38,779 --> 00:12:43,380
during initialisation of that library
the library needs to reroute

209
00:12:43,380 --> 00:12:47,750
the program control using runtime
pitching to make use of our new

210
00:12:47,750 --> 00:12:50,209
functionalities

211
00:12:50,209 --> 00:12:53,699
so much when we have our apt an API
method and our library

212
00:12:53,700 --> 00:12:58,709
with providing the additional code in
the case of objective-c

213
00:12:58,709 --> 00:13:03,660
the implementation of that arbitrary
method can be replaced

214
00:13:03,660 --> 00:13:07,569
in the case of a C function we do
something like the to a runtime patching

215
00:13:07,570 --> 00:13:09,029
or point this whistling

216
00:13:09,029 --> 00:13:13,829
and chest point that execution over to
our replacement

217
00:13:13,829 --> 00:13:17,599
we could call the original API method if
you wanna

218
00:13:17,600 --> 00:13:20,950
and important this be could return
anywhere you

219
00:13:20,950 --> 00:13:25,970
that we want to back to be a so imagine
you at once to call the unique device

220
00:13:25,970 --> 00:13:26,600
id:

221
00:13:26,600 --> 00:13:31,029
we could fake that unique device id: or
wants to clear your location

222
00:13:31,029 --> 00:13:34,930
we could fake location because many
believe everything which

223
00:13:34,930 --> 00:13:38,859
which is seen from the app

224
00:13:38,860 --> 00:13:41,980
for this in practice I'd highly
recommend you the usage of mobile

225
00:13:41,980 --> 00:13:43,670
substrate

226
00:13:43,670 --> 00:13:47,689
mobile substrate content consists of two
parts a more by Lolita

227
00:13:47,690 --> 00:13:50,820
and amo by hookah the mall by louder

228
00:13:50,820 --> 00:13:55,779
will first load itself into the
application using that link a technique

229
00:13:55,779 --> 00:13:59,699
and then it looks fall dynamic libraries
in a specific folder in TL opens

230
00:13:59,699 --> 00:14:03,170
them the mall by hookah that thats the
actual

231
00:14:03,170 --> 00:14:07,199
hooking so to function ms hook message

232
00:14:07,199 --> 00:14:10,550
will replace the implementation of a
specific method

233
00:14:10,550 --> 00:14:13,550
and Ms work function is the same as MS

234
00:14:13,550 --> 00:14:17,569
message but for C&C plus plus functions
if you want to develop those

235
00:14:17,570 --> 00:14:20,910
static libraries I recommend you to use
of

236
00:14:20,910 --> 00:14:25,019
I'm fierce developments we to set up
your built environment

237
00:14:25,019 --> 00:14:30,149
CDA references in the end of this
presentation

238
00:14:30,149 --> 00:14:34,639
this is an example of a first week when
this library is loaded

239
00:14:34,639 --> 00:14:38,130
during initialisation am

240
00:14:38,130 --> 00:14:42,560
the implementation of the method unique
identifiers replace

241
00:14:42,560 --> 00:14:46,199
this is the method which returns to the
unique what unique device id:

242
00:14:46,199 --> 00:14:49,589
of your of your mobile device and

243
00:14:49,589 --> 00:14:54,350
every time that you I deweiss class will
cease a unique identify a message

244
00:14:54,350 --> 00:14:57,940
it was execute our replaced
implementation

245
00:14:57,940 --> 00:15:03,050
which will trust with huncha on so that
was the first way of extending existing

246
00:15:03,050 --> 00:15:04,939
apps with additional code

247
00:15:04,940 --> 00:15:09,829
another even more flexible approach is
to inject a whole interpreter

248
00:15:09,829 --> 00:15:13,370
into an at and this Anabel spontaneous

249
00:15:13,370 --> 00:15:17,050
on-the-fly manipulations at runtime

250
00:15:17,050 --> 00:15:22,010
let's have a look at script script is a
programming language designed to blend

251
00:15:22,010 --> 00:15:24,000
the barrier between objective-c

252
00:15:24,000 --> 00:15:27,120
& Shop a script when using script

253
00:15:27,120 --> 00:15:30,269
hiii script interpreter is injected

254
00:15:30,269 --> 00:15:33,910
into a running F let me show you

255
00:15:33,910 --> 00:15:37,149
one example to make it more clear

256
00:15:37,149 --> 00:15:41,690
one of the most powerful features script
is its ability to attach to an existing

257
00:15:41,690 --> 00:15:43,990
process

258
00:15:43,990 --> 00:15:47,389
not on a debugger level but on the
runtime level its

259
00:15:47,389 --> 00:15:50,410
more or less upfront and that more by
substrate

260
00:15:50,410 --> 00:15:53,800
that gives you access to all classes
instance methods

261
00:15:53,800 --> 00:15:57,469
variables at runtime you can invoke
arbitrary methods

262
00:15:57,470 --> 00:16:02,000
even replace the implementations with in
the interpreter

263
00:16:02,000 --> 00:16:06,550
so no need to set up a built and YM and
then compiled static libraries threatens

264
00:16:06,550 --> 00:16:10,069
and trans fat them to to your device and
so on

265
00:16:10,070 --> 00:16:14,759
just on the fly so we could attach to an
app process

266
00:16:14,759 --> 00:16:17,810
we could invoke any objective-c method
we want to

267
00:16:17,810 --> 00:16:22,779
like the same as we had before to
retrieve the unique device id:

268
00:16:22,779 --> 00:16:25,829
we could also replace the implementation

269
00:16:25,829 --> 00:16:28,880
within script doing like this every time
you

270
00:16:28,880 --> 00:16:33,339
I deweiss receives a message of that
type will return Chaka Khan

271
00:16:33,339 --> 00:16:36,899
and these modifications are specific to
the only app in scope

272
00:16:36,899 --> 00:16:42,730
with attached and when we compare with a
unique device ID again it will return

273
00:16:42,730 --> 00:16:45,769
this static string

274
00:16:45,769 --> 00:16:48,870
this the app I demonstrate from the App
Store

275
00:16:48,870 --> 00:16:52,019
which shows that with all the fall
runtime: modifications before one of the

276
00:16:52,019 --> 00:16:52,579
chest

277
00:16:52,579 --> 00:16:55,969
just to show you that it works

278
00:16:55,970 --> 00:17:00,370
I'm going to own that this is not rocket
science to to chess with her and a fake

279
00:17:00,370 --> 00:17:04,500
unique device id: but demonstrates the
diverse possibilities

280
00:17:04,500 --> 00:17:08,699
if I was runtime: injection during the
last years I had several calls

281
00:17:08,699 --> 00:17:12,439
phone calls a friends of mine and pen
testing community and they asked me if

282
00:17:12,439 --> 00:17:13,620
it's possible

283
00:17:13,619 --> 00:17:17,049
chest and to fake hard to identify us

284
00:17:17,049 --> 00:17:22,599
and this case I show them and these
techniques and they were happy

285
00:17:22,599 --> 00:17:27,089
the techniques on already and might be
useful and different scenarios

286
00:17:27,089 --> 00:17:32,500
mention and at that relies on hard to
identify his fault indication

287
00:17:32,500 --> 00:17:37,090
or emo by ep that uses a binary or
proper Terry protocol like Google

288
00:17:37,090 --> 00:17:38,320
product before any

289
00:17:38,320 --> 00:17:41,970
binary web service protocol

290
00:17:41,970 --> 00:17:45,230
in the end you don't have to reverse
engineer the protocol

291
00:17:45,230 --> 00:17:48,559
you can just modify some values inside
the app

292
00:17:48,559 --> 00:17:51,720
and then you can start the sequel
injection attack on the back and chest

293
00:17:51,720 --> 00:17:54,559
India Petra space

294
00:17:54,559 --> 00:17:58,918
those manipulations of maritime safing

295
00:17:58,919 --> 00:18:01,990
let's look at some more use cases

296
00:18:01,990 --> 00:18:05,720
as we have seen running apps can be
extended with additional

297
00:18:05,720 --> 00:18:10,289
the packing and runtime tracing
capabilities by using these techniques

298
00:18:10,289 --> 00:18:13,840
this is a great feature to assist
security assessments

299
00:18:13,840 --> 00:18:17,879
of more by less run to manipulation
makes it a lot

300
00:18:17,880 --> 00:18:21,570
easier for us to discover
vulnerabilities and

301
00:18:21,570 --> 00:18:26,409
finally to prove client site security
measures useless

302
00:18:26,410 --> 00:18:30,799
the following just one example want to
follow suit

303
00:18:30,799 --> 00:18:34,039
when it comes to evaluate the encryption
scheme of a nap

304
00:18:34,039 --> 00:18:38,450
a typical question this which at methods
I called inside the app

305
00:18:38,450 --> 00:18:42,440
after the login button is pressed so we
want to see what happens

306
00:18:42,440 --> 00:18:46,580
also is a black box assessment and the
idea is

307
00:18:46,580 --> 00:18:50,970
to make use of those dynamic analysis
features to reconstruct the control flow

308
00:18:50,970 --> 00:18:53,179
of a nap

309
00:18:53,179 --> 00:18:57,510
to on so that we want get a complete
race of on method course we could just

310
00:18:57,510 --> 00:18:58,150
lock

311
00:18:58,150 --> 00:19:02,419
on message says to that central dispatch
right

312
00:19:02,419 --> 00:19:06,220
so let's have a look at the CDP way
first

313
00:19:06,220 --> 00:19:10,110
after attaching to a specific at process

314
00:19:10,110 --> 00:19:14,260
we could set a breakpoint at that
objective-c message that function

315
00:19:14,260 --> 00:19:19,640
by she's here and every time that break
point is reached

316
00:19:19,640 --> 00:19:22,679
we print out this CPU which is this

317
00:19:22,679 --> 00:19:26,330
Arciero and r1 RCR was the first
argument

318
00:19:26,330 --> 00:19:29,789
to that function and i won second
document which means

319
00:19:29,789 --> 00:19:34,600
Arciero holds a point to to the instance
of the class

320
00:19:34,600 --> 00:19:39,080
and I one contains name of the method
which should be called

321
00:19:39,080 --> 00:19:42,379
so we get always the class in the method
and you get a complete race of it

322
00:19:42,380 --> 00:19:47,289
every time that break point is reached
when we start looking at the output

323
00:19:47,289 --> 00:19:53,169
we recognize very fast at this approach
makes an awful lot of nice

324
00:19:53,169 --> 00:19:56,460
because all internal method invocations
of the runtime

325
00:19:56,460 --> 00:20:00,250
are displayed as well what's really on
the robotic

326
00:20:00,250 --> 00:20:03,860
and hard to figure out up specific cause
only

327
00:20:03,860 --> 00:20:07,340
see all the background noise from the
runtimes law

328
00:20:07,340 --> 00:20:11,389
a better approach with P to intercept
those messages

329
00:20:11,390 --> 00:20:15,289
to objective-c with in the runtime

330
00:20:15,289 --> 00:20:19,140
when you look at the runtime level we
could apply different filled this

331
00:20:19,140 --> 00:20:22,919
so using the runtime first we could
extract all available

332
00:20:22,919 --> 00:20:28,020
losses methods from the binary
afterwards we can focus on experts if if

333
00:20:28,020 --> 00:20:29,230
classes and methods

334
00:20:29,230 --> 00:20:33,210
only not like on a deeper level
everything is printed

335
00:20:33,210 --> 00:20:39,260
but on a runtime: level and food during
out all the background noise

336
00:20:39,260 --> 00:20:42,700
the tricky part on this loss to handle
all parameters

337
00:20:42,700 --> 00:20:47,450
and to continue normal execution because
we intercept execution at a very

338
00:20:47,450 --> 00:20:50,110
sensitive part

339
00:20:50,110 --> 00:20:53,770
the central dispatcher and a locking
routines itself

340
00:20:53,770 --> 00:20:57,129
modified SEP which is this again

341
00:20:57,130 --> 00:21:00,510
the solution for this is to process of
the current execution

342
00:21:00,510 --> 00:21:05,299
execution state when we pols execution
and that dispatcher

343
00:21:05,299 --> 00:21:09,860
for this we are located and alternate
stick with it heap memory

344
00:21:09,860 --> 00:21:14,309
which chest backup all the richest this
and the stick to that alternates thick

345
00:21:14,309 --> 00:21:18,399
and we can do all the locking and
filtering use the CPUs we want to

346
00:21:18,400 --> 00:21:22,169
afterwards when you restore the
registers and continue execution

347
00:21:22,169 --> 00:21:26,320
this was the tricky part but doing so no
arguments will be lost during locking

348
00:21:26,320 --> 00:21:30,710
with a stick safe tracing implementation

349
00:21:30,710 --> 00:21:35,530
and this is the sample output of a
possible what safe from the App Store

350
00:21:35,530 --> 00:21:39,690
it shows the trace of at my efforts of
the user has

351
00:21:39,690 --> 00:21:45,270
and that his POSCO and what we can see
very quickly is

352
00:21:45,270 --> 00:21:49,158
at only a constant string is used

353
00:21:49,159 --> 00:21:53,070
four decryption on that the US not the
use a poss cold

354
00:21:53,070 --> 00:21:57,450
suspect quick to implementation now also
call your attention to that keep their

355
00:21:57,450 --> 00:21:58,770
base in function

356
00:21:58,770 --> 00:22:02,429
at least the developers try to derive a
strong cryptographic key

357
00:22:02,429 --> 00:22:05,679
out of the constant string questionable
but

358
00:22:05,679 --> 00:22:10,679
however so hopefully that constant
string was guaranteed to be a random

359
00:22:10,679 --> 00:22:13,840
and nothing could go wrong so

360
00:22:13,840 --> 00:22:18,620
within seconds we have evaluated the
encryption scheme of that

361
00:22:18,620 --> 00:22:21,989
without the need for doing any static
analysis

362
00:22:21,990 --> 00:22:26,510
I runtime analysis can be very time
safing

363
00:22:26,510 --> 00:22:30,260
during a penetration test

364
00:22:30,260 --> 00:22:33,900
as was just one example and how runtime:
interpolation assist security

365
00:22:33,900 --> 00:22:34,900
assessments

366
00:22:34,900 --> 00:22:38,390
let's look at some more so we had that
discover week missing

367
00:22:38,390 --> 00:22:42,650
encryption we could buy poss anne klein
site with strict sense

368
00:22:42,650 --> 00:22:47,390
we could execute hidden functionalities
which was not supposed to be accessible

369
00:22:47,390 --> 00:22:49,370
at all

370
00:22:49,370 --> 00:22:53,199
we could unlock additional features and
premium content

371
00:22:53,200 --> 00:22:57,000
imagine Epsom and there's a light
version and a pro 1

372
00:22:57,000 --> 00:23:00,000
often the Lite version contains the same
cold

373
00:23:00,000 --> 00:23:03,510
but the Pro features are simply not
accessible to the user interface

374
00:23:03,510 --> 00:23:06,809
now you know how to upgrade your lighter
version

375
00:23:06,809 --> 00:23:10,000
or imagine and at imagine all these in

376
00:23:10,000 --> 00:23:15,240
ep purchases most of them are broken by
the sign

377
00:23:15,240 --> 00:23:19,039
so that just waking to be enabled for
free by executing

378
00:23:19,039 --> 00:23:23,600
the specific method which is called from
a call back from the iTunes Store

379
00:23:23,600 --> 00:23:27,059
more than eighty percent of in app
purchases can

380
00:23:27,059 --> 00:23:32,299
can be retrieved for free also very
interesting man ep steel with copyright

381
00:23:32,299 --> 00:23:32,970
protected

382
00:23:32,970 --> 00:23:36,880
protected content like pay-tv providers
newspapers

383
00:23:36,880 --> 00:23:40,380
and although and also on although state
%ah

384
00:23:40,380 --> 00:23:43,750
like movies are accessible at runtime
when you can watch

385
00:23:43,750 --> 00:23:46,880
them and you can simply dumped them

386
00:23:46,880 --> 00:23:50,340
and copy them using all those techniques

387
00:23:50,340 --> 00:23:54,039
so to sum up runtime: manipulation
increases

388
00:23:54,039 --> 00:23:58,570
the attack surface of mobile apps assist
security assessments

389
00:23:58,570 --> 00:24:02,379
and even you attack correct us might
arise

390
00:24:02,380 --> 00:24:06,110
the only problem is that there are
almost no tools available for those

391
00:24:06,110 --> 00:24:07,539
dynamics analysis

392
00:24:07,539 --> 00:24:11,450
also you know techniques and you could
compile a static library and so on

393
00:24:11,450 --> 00:24:16,730
would be quite time consuming any with
do that on your daily pen testing basis

394
00:24:16,730 --> 00:24:20,470
and s Russia rights and I like that
security will not get

395
00:24:20,470 --> 00:24:25,340
better until to us for practical
exploration of the attack surface

396
00:24:25,340 --> 00:24:29,590
I made available the following we will
close

397
00:24:29,590 --> 00:24:32,889
that gap of missing tools so

398
00:24:32,890 --> 00:24:37,059
during the last years we have developed
several little libraries and penetration

399
00:24:37,059 --> 00:24:37,678
tests

400
00:24:37,679 --> 00:24:40,960
we call if those the packing and runtime
tracing

401
00:24:40,960 --> 00:24:44,929
11 force quite time consuming to
maintain all those little tweaks and to

402
00:24:44,929 --> 00:24:46,210
keep an overview

403
00:24:46,210 --> 00:24:50,360
this is why we decided to consolidate
all these little help us

404
00:24:50,360 --> 00:24:54,580
into a comprehensive the fucking library
so what you need to do is

405
00:24:54,580 --> 00:24:58,809
catch your testing device insulin at and
get our library on it

406
00:24:58,809 --> 00:25:02,260
with all the debugging and runtime
tracing functionalities

407
00:25:02,260 --> 00:25:06,400
to make all these functions in that
library accessible

408
00:25:06,400 --> 00:25:11,720
and no easy to use we extended it with
an xml-rpc web service and point

409
00:25:11,720 --> 00:25:16,220
which is started inside the F we also
started a web server in it

410
00:25:16,220 --> 00:25:20,570
and this web server provides you with an
HTML Javascript front and based on

411
00:25:20,570 --> 00:25:21,939
Google Web Toolkit

412
00:25:21,940 --> 00:25:26,130
and this front and communicates with the
webservice to remotely control and

413
00:25:26,130 --> 00:25:31,720
manipulate any arbitrary i OS at

414
00:25:31,720 --> 00:25:36,140
that idea what's the birth of Snoopy it
a tool to assist security assessments

415
00:25:36,140 --> 00:25:40,570
and dynamic analysis of Iowa saps

416
00:25:40,570 --> 00:25:44,000
let's have a look at some features we
could 18 or

417
00:25:44,000 --> 00:25:47,000
of I system excesses as we hooking all

418
00:25:47,000 --> 00:25:50,279
system open system calls to curl

419
00:25:50,279 --> 00:25:55,850
and using this feature is the would be
very easy for you to spot configuration

420
00:25:55,850 --> 00:25:56,870
files

421
00:25:56,870 --> 00:25:59,949
that store configure sensitive a tank
clear

422
00:25:59,950 --> 00:26:03,289
because you see every excess 25 system

423
00:26:03,289 --> 00:26:07,390
you could apply different filters on it
even see if Apple's data protection

424
00:26:07,390 --> 00:26:09,650
mechanisms are you still not

425
00:26:09,650 --> 00:26:12,760
now weekend we see all X's to the
keychain

426
00:26:12,760 --> 00:26:16,279
excess too sensitive API like

427
00:26:16,279 --> 00:26:20,630
when excesses you at risk book or

428
00:26:20,630 --> 00:26:26,100
your location your photos and even when
it at tries to access your microphone

429
00:26:26,100 --> 00:26:30,399
you know there's only a few lines of
code to switch on your microphone

430
00:26:30,400 --> 00:26:34,669
and to send that the recording to a
back-end web server

431
00:26:34,669 --> 00:26:39,610
and you have no way to restrict that on
your i OS device

432
00:26:39,610 --> 00:26:43,908
this is going to be changed and I was
seven and use a consent is required

433
00:26:43,909 --> 00:26:50,559
to access the microphone but at the
moment it's completely missing

434
00:26:50,559 --> 00:26:55,529
we could fake cop who identify as fake
location GPS data short story on that

435
00:26:55,529 --> 00:26:59,510
I had to assess and I US ap which was
supposed

436
00:26:59,510 --> 00:27:03,200
to only work on the company crowns of
that company

437
00:27:03,200 --> 00:27:06,659
so a typical client site security
measure

438
00:27:06,659 --> 00:27:10,020
so I had two choices either I could
travel up road

439
00:27:10,020 --> 00:27:13,600
or I could find a way to fake GPS state
that with this at

440
00:27:13,600 --> 00:27:17,490
and sleep at home you might guess which
option I had to send

441
00:27:17,490 --> 00:27:21,799
and the result is also integrated in
snow pit could fake any specific

442
00:27:21,799 --> 00:27:26,360
L location also good feature to make fun
of friends

443
00:27:26,360 --> 00:27:30,110
I'm you could explore all the view
controllers list

444
00:27:30,110 --> 00:27:34,110
all available classes invoke method sets
runtime:

445
00:27:34,110 --> 00:27:39,240
just a few other features be paid a lot
of attention to make it very easy to use

446
00:27:39,240 --> 00:27:43,080
so after installing that package you
will get a configuration at

447
00:27:43,080 --> 00:27:46,510
show you that in a minute they could use
that but interface

448
00:27:46,510 --> 00:27:50,580
with different for this we also provide
you with an xml-rpc web service

449
00:27:50,580 --> 00:27:52,870
interface a detailed description of it

450
00:27:52,870 --> 00:27:56,879
so you don't have to use our web
interface you could just use your Python

451
00:27:56,880 --> 00:27:59,210
or Ruby script or whatever to ultimate

452
00:27:59,210 --> 00:28:03,820
your own analysis and with it will be
freely available soon

453
00:28:03,820 --> 00:28:07,320
if you're interested in a bit at just
sent me a mail

454
00:28:07,320 --> 00:28:11,629
think within the next few weeks to get
started

455
00:28:11,630 --> 00:28:15,440
you just have to open this new pit
configuration ep select the app's you

456
00:28:15,440 --> 00:28:17,059
want to analyze

457
00:28:17,059 --> 00:28:20,889
could be from system maps from Apple App
Store aP's

458
00:28:20,890 --> 00:28:24,190
adjust some settings like the web server
listener port

459
00:28:24,190 --> 00:28:28,090
and just run the app you want to analyze
and point your browser to the stupid web

460
00:28:28,090 --> 00:28:30,129
interface

461
00:28:30,130 --> 00:28:35,630
let's do them on it

462
00:28:35,630 --> 00:28:39,980
alright what we what you see here in the
lower left this that

463
00:28:39,980 --> 00:28:44,380
snow pit configuration ap just have to
open it

464
00:28:44,380 --> 00:28:48,909
and men you can select the Epps you want
to analyze

465
00:28:48,909 --> 00:28:53,179
let's do and quick assessment of that
fleshlight at

466
00:28:53,179 --> 00:28:57,370
the settings you can set the web server
listening port some authentication and

467
00:28:57,370 --> 00:29:00,449
the tracing the common that later

468
00:29:00,450 --> 00:29:03,620
and of that you just have to switch on

469
00:29:03,620 --> 00:29:07,100
and open that during startup

470
00:29:07,100 --> 00:29:10,539
using that library in Section our
debugging live a reason check that

471
00:29:10,539 --> 00:29:12,730
insight this flashlight app

472
00:29:12,730 --> 00:29:16,549
and the web service already running know
I can trust

473
00:29:16,549 --> 00:29:21,740
now connect to it

474
00:29:21,740 --> 00:29:24,740
and this is the web interface now it
connects to the

475
00:29:24,740 --> 00:29:28,570
to the web service in the face can see
some like

476
00:29:28,570 --> 00:29:32,279
memory protection which is used inside
you can see all the

477
00:29:32,279 --> 00:29:35,640
and its lock debugging output switch
developers might have forgotten to

478
00:29:35,640 --> 00:29:36,890
remove

479
00:29:36,890 --> 00:29:40,260
and its look at these fine system excess

480
00:29:40,260 --> 00:29:43,690
we see every access to the file system
and we are restricted in this

481
00:29:43,690 --> 00:29:46,909
you chest to the application sent box

482
00:29:46,909 --> 00:29:50,840
using this filter you can also see all
the background files system excess of

483
00:29:50,840 --> 00:29:53,039
the IRS operating system

484
00:29:53,039 --> 00:29:57,000
you see every five which is loaded we
also print out the up a fight protection

485
00:29:57,000 --> 00:29:58,840
classes to spot fires

486
00:29:58,840 --> 00:30:02,260
which I'm not using up mechanisms also
indicated by a red dot

487
00:30:02,260 --> 00:30:06,730
here existed a keychain existing network

488
00:30:06,730 --> 00:30:10,110
and just wanna remind you this is a
fleshlight

489
00:30:10,110 --> 00:30:13,279
at just to switch on light and switch it
off

490
00:30:13,279 --> 00:30:16,659
and that's a lot of network
communication has at least four

491
00:30:16,659 --> 00:30:17,909
different

492
00:30:17,909 --> 00:30:21,110
trekking services libraries integrated

493
00:30:21,110 --> 00:30:24,270
those trekking so those are really bad
thing more more than

494
00:30:24,270 --> 00:30:27,929
two-third of Olives using those
statistic and trekking

495
00:30:27,929 --> 00:30:33,289
services and they keep track of every
action you take so when you start a nap

496
00:30:33,289 --> 00:30:37,679
send the requested you tap a specific by
then it send the requested the back end

497
00:30:37,679 --> 00:30:41,049
so very transparent when using any any I

498
00:30:41,049 --> 00:30:44,340
anymore by at so let's see here

499
00:30:44,340 --> 00:30:48,709
one of these requests from the fat Choi
at network

500
00:30:48,710 --> 00:30:53,289
it runs fast my my country code my I US
version

501
00:30:53,289 --> 00:30:56,990
and let's go for to the end where

502
00:30:56,990 --> 00:31:00,320
its s my provider that German telecom

503
00:31:00,320 --> 00:31:03,889
tracking enabled my advertising I DM
platforms I O S

504
00:31:03,890 --> 00:31:08,669
my devices make address my device name
and it would transfer also

505
00:31:08,669 --> 00:31:13,640
the location if I would have a lout the
app to access the location but then all

506
00:31:13,640 --> 00:31:17,549
tracking services can excess location as
well keep that in mind

507
00:31:17,549 --> 00:31:21,600
so chest a privacy issue and that
flashlight app

508
00:31:21,600 --> 00:31:26,539
see all access to sensitive API a lot of
fixes to that WiFi Mac address:

509
00:31:26,539 --> 00:31:30,149
you know why curse of these plenty of
services

510
00:31:30,149 --> 00:31:33,570
this fall stop anti-u_s_ 7 I A seven

511
00:31:33,570 --> 00:31:36,678
Apple will return aesthetic value

512
00:31:36,679 --> 00:31:40,500
in a F tries to excess the mecca Thrace
always return

513
00:31:40,500 --> 00:31:44,450
serious illness or so some quite curious
what the tracking service will move on

514
00:31:44,450 --> 00:31:46,340
next

515
00:31:46,340 --> 00:31:51,240
see some access to the camera we can
fake hard to identify us

516
00:31:51,240 --> 00:31:55,779
way easily we could also pretend to be
an iPad or iPod

517
00:31:55,779 --> 00:31:59,360
we have hear that fake location discuss
set up in

518
00:31:59,360 --> 00:32:04,000
and afterwards yep think you at this
location

519
00:32:04,000 --> 00:32:07,360
this a feature with we extract all

520
00:32:07,360 --> 00:32:11,139
away let the class and method
information out of the binary

521
00:32:11,140 --> 00:32:14,559
and these are all that classes and

522
00:32:14,559 --> 00:32:20,240
methods which are implemented in that
flashlight app

523
00:32:20,240 --> 00:32:24,840
during in its realisation of each class
all we can we keep track of that

524
00:32:24,840 --> 00:32:28,399
just to invoke methods of instances
which means

525
00:32:28,399 --> 00:32:33,039
a a Green Dot indicates at this a
concrete instance we catch that we know

526
00:32:33,039 --> 00:32:34,600
the location a memory

527
00:32:34,600 --> 00:32:37,949
and right means it's just the class we
could

528
00:32:37,950 --> 00:32:43,169
just click on this in stance peace all
the methods which are provided

529
00:32:43,169 --> 00:32:48,019
could open the function could invoke the
function opened camera LED

530
00:32:48,019 --> 00:32:51,149
just need to select instance which we
catch

531
00:32:51,149 --> 00:32:54,268
and then we could invoke that method and

532
00:32:54,269 --> 00:32:58,779
it's the only way I we can proof it
works to remotely control that app store

533
00:32:58,779 --> 00:32:59,350
at

534
00:32:59,350 --> 00:33:02,629
otherwise everything could have been
fake what I've shown you but when he

535
00:33:02,630 --> 00:33:04,289
works

536
00:33:04,289 --> 00:33:07,980
am without the need for any

537
00:33:07,980 --> 00:33:11,470
shell very easy to use

538
00:33:11,470 --> 00:33:15,470
let's do another example gonna switch
back

539
00:33:15,470 --> 00:33:22,080
its anyone of you using this I pin
lights or I pen possible it safe

540
00:33:22,080 --> 00:33:25,480
one this so if nothing to fear

541
00:33:25,480 --> 00:33:29,570
am this so this

542
00:33:29,570 --> 00:33:33,289
this at a.m. I just wanna give you a
some of these

543
00:33:33,289 --> 00:33:37,658
encrypt description SS with an in a way
to give sends ok he bought

544
00:33:37,659 --> 00:33:41,740
you'll have quick access to all your
pants with out any annoying

545
00:33:41,740 --> 00:33:46,080
time coming passwords sounds great
sounds like a perfect example of

546
00:33:46,080 --> 00:33:49,639
usability meets security right

547
00:33:49,640 --> 00:33:54,090
and on security it says safety is of
greatest importance

548
00:33:54,090 --> 00:33:57,379
all data is encrypted using AES and

549
00:33:57,380 --> 00:34:02,019
they apply the KISS principle keep it
simple and CQ

550
00:34:02,019 --> 00:34:06,000
so let's look behind the scenes and
let's analyze

551
00:34:06,000 --> 00:34:09,079
this application from the App Store

552
00:34:09,079 --> 00:34:12,399
for this which just enable it and I want
to use

553
00:34:12,399 --> 00:34:17,339
that's racing future now just to look
behind the scenes what's happened

554
00:34:17,339 --> 00:34:23,020
inside yep we can start it up

555
00:34:23,020 --> 00:34:26,918
notes now our libraries and check the
web service started

556
00:34:26,918 --> 00:34:31,578
and this is what it looks like

557
00:34:31,579 --> 00:34:36,079
the question is about all these secret a
toast or now

558
00:34:36,079 --> 00:34:39,960
on the first floor we would go to the
filesystem and look for any

559
00:34:39,960 --> 00:34:43,649
suspicious file system activity what we
see is

560
00:34:43,649 --> 00:34:48,319
how many of view controllers excess some
some localized Springs

561
00:34:48,320 --> 00:34:52,480
the Sens or keyboard you control a which
presents you that sends a view

562
00:34:52,480 --> 00:34:56,149
and a file which is called I pin
security model

563
00:34:56,149 --> 00:34:59,720
that sounds very interesting using snoop
it you could just

564
00:34:59,720 --> 00:35:03,140
download that file by a double click so
no need to do

565
00:35:03,140 --> 00:35:06,900
secure copy that file and he opened it
but

566
00:35:06,900 --> 00:35:11,070
the bests thing would have been if it's
here and clear but unfortunately it's

567
00:35:11,070 --> 00:35:14,109
encoded or at least encrypt it or
anything

568
00:35:14,109 --> 00:35:17,140
so but the good thing is we have that
mess

569
00:35:17,140 --> 00:35:21,279
method tracing feature we can now look
at the methods which

570
00:35:21,280 --> 00:35:25,960
processing this file let's look at that
method tracing

571
00:35:25,960 --> 00:35:29,490
we can see what happens after we have
started yep

572
00:35:29,490 --> 00:35:32,649
just increase size

573
00:35:32,650 --> 00:35:36,119
and now let's look for the security
model

574
00:35:36,119 --> 00:35:40,160
which was the name of that fight what we
see is at this fine is

575
00:35:40,160 --> 00:35:43,500
really excess and the problem with

576
00:35:43,500 --> 00:35:46,859
is at this finances some kind of packed

577
00:35:46,859 --> 00:35:51,700
am and archive is protected with the key

578
00:35:51,700 --> 00:35:56,270
and the key to unpack that fine is I pin
model

579
00:35:56,270 --> 00:35:59,630
so this the first problem it's a statics
aesthetic

580
00:35:59,630 --> 00:36:03,530
password used for unpacking equipping
this file

581
00:36:03,530 --> 00:36:06,890
what comes out of this file is a.m.

582
00:36:06,890 --> 00:36:11,210
in this file is stored a sends a hellish

583
00:36:11,210 --> 00:36:14,329
K what is this has used for

584
00:36:14,329 --> 00:36:17,560
obviously for authentication purposes
just

585
00:36:17,560 --> 00:36:20,990
to verify if the end it sends a code is
correct or not

586
00:36:20,990 --> 00:36:24,578
might be just an assumption I copy that
so we'll use it

587
00:36:24,579 --> 00:36:27,740
soon let's go to the end

588
00:36:27,740 --> 00:36:30,959
and have a look what happens after we
press a

589
00:36:30,960 --> 00:36:34,599
single button the upper left one

590
00:36:34,599 --> 00:36:41,599
reload and see all the method
invocations

591
00:36:41,829 --> 00:36:46,640
a plenty of indications also we do a lot
of filtering

592
00:36:46,640 --> 00:36:50,879
to get out all the background noise

593
00:36:50,880 --> 00:36:54,550
just looking for

594
00:36:54,550 --> 00:36:59,460
must be a touched you want

595
00:36:59,460 --> 00:37:02,820
yeah here its s set touched

596
00:37:02,820 --> 00:37:07,020
number of touches one this method is
called

597
00:37:07,020 --> 00:37:10,300
what we see here that sense or keyboard
you control a

598
00:37:10,300 --> 00:37:13,470
returns a value of ten

599
00:37:13,470 --> 00:37:17,399
it is again its ok given over to look in
view controller

600
00:37:17,400 --> 00:37:22,460
afterwards and md5 hash is called
related of that value of ten

601
00:37:22,460 --> 00:37:25,560
and afterwards this compared to sends a
heshe

602
00:37:25,560 --> 00:37:29,070
which was derived from that five
protected with that constant

603
00:37:29,070 --> 00:37:32,730
string so what happens is

604
00:37:32,730 --> 00:37:36,839
every time you hit UTEP a single sends a
view it

605
00:37:36,839 --> 00:37:40,310
its joint to a password and the md5 hash

606
00:37:40,310 --> 00:37:43,328
is calculated and compared to that one
but

607
00:37:43,329 --> 00:37:46,720
on this nine different fields

608
00:37:46,720 --> 00:37:50,359
the number of combinations is quite
limited its right

609
00:37:50,359 --> 00:37:53,410
so I wrote a small pie tin scriptures to

610
00:37:53,410 --> 00:37:56,810
brute force all possible combinations
from tent and

611
00:37:56,810 --> 00:38:01,430
1990 1990 like if it that sends a hash
which bf derived from that

612
00:38:01,430 --> 00:38:05,379
from this file it only took you few

613
00:38:05,380 --> 00:38:09,670
milliseconds to derive to send so cold
which was in that case

614
00:38:09,670 --> 00:38:12,760
1020 36 the

615
00:38:12,760 --> 00:38:16,030
ninety so

616
00:38:16,030 --> 00:38:20,030
within seconds we have analyze that
possible it's a fat

617
00:38:20,030 --> 00:38:23,140
without the need for doing any static
analysis

618
00:38:23,140 --> 00:38:27,410
just by looking at the trace and by
invoking methods at runtime

619
00:38:27,410 --> 00:38:30,779
missus Maritime Safety

620
00:38:30,780 --> 00:38:37,780
so

621
00:38:38,520 --> 00:38:41,619
I hope you enjoy that them on during the
last week

622
00:38:41,619 --> 00:38:44,829
make during the last weeks ago a lot of
positive feedback

623
00:38:44,829 --> 00:38:50,490
from our Peter test this stupid you spy
pen test this all around the world now

624
00:38:50,490 --> 00:38:55,939
I put in one feedback on this light and
even several companies in chechnya using

625
00:38:55,940 --> 00:38:56,730
snow pit

626
00:38:56,730 --> 00:39:00,440
to review ep store abs for privacy
violations

627
00:39:00,440 --> 00:39:04,170
the full whitelisting Epps and allowing
them for internal use

628
00:39:04,170 --> 00:39:08,560
just to get sure that no contact
contacts are accessible at the

629
00:39:08,560 --> 00:39:12,660
microphone and all of its tough

630
00:39:12,660 --> 00:39:16,270
another use case last week we published
a study

631
00:39:16,270 --> 00:39:21,900
on the security of mobile hotspot using
these dynamic analysis techniques

632
00:39:21,900 --> 00:39:26,180
we analyze the official professor
insists at from the IRS

633
00:39:26,180 --> 00:39:29,430
and we found out that I US generates
week

634
00:39:29,430 --> 00:39:34,180
default passwords an iPhone issues as a
mobile hotspot

635
00:39:34,180 --> 00:39:39,390
on a first spot the four possible its
consists of only four to six characters

636
00:39:39,390 --> 00:39:42,490
followed by a four digit number and this

637
00:39:42,490 --> 00:39:47,529
and neighbors brute force attacks on a
weepy a handshake

638
00:39:47,530 --> 00:39:51,109
in more detail we upset if that the I US

639
00:39:51,109 --> 00:39:54,770
spell checking framework is used

640
00:39:54,770 --> 00:39:58,320
to suggest 84 passes

641
00:39:58,320 --> 00:40:01,200
this is why default passwords are
derived from an English language

642
00:40:01,200 --> 00:40:03,000
dictionary

643
00:40:03,000 --> 00:40:07,000
but uploaded to mow mistakes

644
00:40:07,000 --> 00:40:10,329
we found out that only 1800 entries

645
00:40:10,329 --> 00:40:14,020
of that the action every taken in
consideration when choosing a default

646
00:40:14,020 --> 00:40:15,880
password

647
00:40:15,880 --> 00:40:20,280
a.m. compared to the number of sold i OS
devices 1800 different passwords is

648
00:40:20,280 --> 00:40:21,079
quite limited

649
00:40:21,079 --> 00:40:25,750
right and in addition the process of
selecting butts from Sat

650
00:40:25,750 --> 00:40:30,619
dictionary is not random at all this
results in a possibility to compromise a

651
00:40:30,619 --> 00:40:34,349
hotspot connection and less than 50
seconds

652
00:40:34,349 --> 00:40:38,810
this shows the frequency distribution it
shows very clear that works from the top

653
00:40:38,810 --> 00:40:39,859
10

654
00:40:39,859 --> 00:40:43,990
are 10 times more likely to be selected
from that but from that limited

655
00:40:43,990 --> 00:40:45,368
worthless that all

656
00:40:45,369 --> 00:40:49,560
a.m. to be used as a default password
and this is the top 10

657
00:40:49,560 --> 00:40:54,299
of default passwords I was hot spot if
it didn't change your password right by

658
00:40:54,300 --> 00:40:54,849
now

659
00:40:54,849 --> 00:40:58,550
just have a look if your password is one
of these

660
00:40:58,550 --> 00:41:02,119
and I highly recommend you to change
your your hotspot

661
00:41:02,119 --> 00:41:07,890
isolates yeah for more information
please refer to our chess website

662
00:41:07,890 --> 00:41:12,259
I think this serves as a perfect example
lights always a good thing twice

663
00:41:12,260 --> 00:41:15,300
and to replace initial default passwords

664
00:41:15,300 --> 00:41:18,750
a user-defined strong and secure
passwords by the way we have notified

665
00:41:18,750 --> 00:41:19,829
Apple

666
00:41:19,829 --> 00:41:25,630
a.m. long time ago and this is going to
be fixed in Iowa 7

667
00:41:25,630 --> 00:41:28,730
and it looks quite random with me and
look

668
00:41:28,730 --> 00:41:33,270
and the look on this yet

669
00:41:33,270 --> 00:41:38,710
one more thing the last thing more more
abt perform some kind of che break

670
00:41:38,710 --> 00:41:40,200
detection

671
00:41:40,200 --> 00:41:43,560
to verify the platform integrity

672
00:41:43,560 --> 00:41:49,400
many banking at some movie s or acts of
mobile device management solutions

673
00:41:49,400 --> 00:41:53,160
try to detect if they were executed on a
jailbroken device

674
00:41:53,160 --> 00:41:56,690
for that they perform common checks like
looking for suspicious files and

675
00:41:56,690 --> 00:41:57,750
directories like

676
00:41:57,750 --> 00:42:02,510
application Cydia app look for a file
system permissions mount options

677
00:42:02,510 --> 00:42:06,700
just for traces of public jailbreaks the
problem with these checks

678
00:42:06,700 --> 00:42:10,118
this at all of them rely on information

679
00:42:10,119 --> 00:42:13,210
provided by an on trust with the runtime

680
00:42:13,210 --> 00:42:16,450
to determine its integrity that will
never work

681
00:42:16,450 --> 00:42:21,078
the same s you were trying to detect a
rootkit on a host operating system from

682
00:42:21,079 --> 00:42:25,130
within a virtual machine

683
00:42:25,130 --> 00:42:28,130
this is what it's a brake checked looks
like in static analysis

684
00:42:28,130 --> 00:42:32,230
what's hot hard to read so what we see
he is

685
00:42:32,230 --> 00:42:35,740
a else that system call on the
applications

686
00:42:35,740 --> 00:42:41,109
folder tries to take am if it's if all
applications lie in the Applications

687
00:42:41,109 --> 00:42:44,230
folder or if the applications for this a
symlink

688
00:42:44,230 --> 00:42:47,619
to the use a petition cause this happens
at H and break

689
00:42:47,619 --> 00:42:51,839
all the applications I moved to the use
a petition and afterwards

690
00:42:51,839 --> 00:42:54,950
the fight ET CFS have excess

691
00:42:54,950 --> 00:42:58,169
and is is searched for a if it's
readable

692
00:42:58,170 --> 00:43:01,520
or retry it excess on the root partition

693
00:43:01,520 --> 00:43:05,730
is also an and trace of a change brake
this is what these

694
00:43:05,730 --> 00:43:09,160
checks usually look like

695
00:43:09,160 --> 00:43:13,118
since we are testing absence a broken
device we need to buy poss

696
00:43:13,119 --> 00:43:16,550
of those checks in order to assess them

697
00:43:16,550 --> 00:43:19,950
so we could either pension at binary
offline

698
00:43:19,950 --> 00:43:23,109
and pets Lecce protection out or more
easily

699
00:43:23,109 --> 00:43:26,470
at runtime to remove checks so if you
have a very

700
00:43:26,470 --> 00:43:29,589
easy check you could just do like this
and script

701
00:43:29,589 --> 00:43:33,328
every time you delegate receives a
message is change broken

702
00:43:33,329 --> 00:43:36,329
just returned no when many cases it's

703
00:43:36,329 --> 00:43:43,329
SPCs this way a march in every way would
be to intercept all system calls to cull

704
00:43:43,520 --> 00:43:47,020
and to simulate unmodified execution
environment

705
00:43:47,020 --> 00:43:51,380
this would be an action Eric approach
and this is what we do in snoop it

706
00:43:51,380 --> 00:43:54,500
to heights new pit from its surrounding
am

707
00:43:54,500 --> 00:43:58,540
and to bypass most of the comments a
break detection mechanisms away level

708
00:43:58,540 --> 00:44:01,740
we'll all major system calls and pretend
and

709
00:44:01,740 --> 00:44:06,618
unmodified execution environment and to
activate that bypass

710
00:44:06,619 --> 00:44:10,829
it just have to switch it on inside the
snippet configuration at

711
00:44:10,829 --> 00:44:14,440
will show you that

712
00:44:14,440 --> 00:44:17,690
we have here in ep which is called 3d
central

713
00:44:17,690 --> 00:44:22,130
I have no clue what this app is for but
it performs such a prick the texan

714
00:44:22,130 --> 00:44:26,210
so good for demonstration purposes and
it says jailbroken devices are not

715
00:44:26,210 --> 00:44:27,190
support the neck on

716
00:44:27,190 --> 00:44:30,569
use that any longer and

717
00:44:30,569 --> 00:44:35,380
that this assembly have seen as just a
disassembly of this application

718
00:44:35,380 --> 00:44:38,730
I will open snow pit and going down we
cannot

719
00:44:38,730 --> 00:44:44,089
switch on the bypassed jailbreak
detection mechanism

720
00:44:44,089 --> 00:44:47,690
and then I'm going to restart

721
00:44:47,690 --> 00:44:50,750
that at and

722
00:44:50,750 --> 00:44:54,880
it which s food so it makes all these
checks we fake all the well use

723
00:44:54,880 --> 00:45:01,800
now return to that

724
00:45:01,800 --> 00:45:07,859
so this quite a useful feature to not
wasting too much time touring a

725
00:45:07,859 --> 00:45:09,140
penetration test

726
00:45:09,140 --> 00:45:14,069
on disabling jailbreak checks last week
the excitement it's a break detection

727
00:45:14,069 --> 00:45:17,630
mechanism of a while Iran and Good for
Enterprise

728
00:45:17,630 --> 00:45:20,750
and it broke them within a single day so

729
00:45:20,750 --> 00:45:24,720
I recommended to not rely too much on
those trade protection

730
00:45:24,720 --> 00:45:28,839
mechanisms especially bring your own
device and Darius

731
00:45:28,839 --> 00:45:32,819
how could one do it better we researched
some techniques

732
00:45:32,819 --> 00:45:36,359
for at Monster a prick detection and
develop at mind a

733
00:45:36,359 --> 00:45:41,040
at minder it's a change break detection
which is with an impure assembly code

734
00:45:41,040 --> 00:45:44,190
we we only use arm assembly to implement
it just

735
00:45:44,190 --> 00:45:47,510
to avoid getting hooked this easy
techniques

736
00:45:47,510 --> 00:45:51,160
using more by substrate and so on so

737
00:45:51,160 --> 00:45:55,250
we a lot of effort and various code
obfuscation techniques

738
00:45:55,250 --> 00:45:59,770
that makes it hard to spot trade break
detection at all even I dot precious

739
00:45:59,770 --> 00:46:03,339
a lot of times when when that traffic
detection is integrated

740
00:46:03,339 --> 00:46:07,210
a lot of self integrity checks on titty
fucking measures

741
00:46:07,210 --> 00:46:11,480
and is provided as a Web service at at
my knees left that you could just have a

742
00:46:11,480 --> 00:46:13,210
look on it

743
00:46:13,210 --> 00:46:17,380
am it would give you a small interface a
quick look on China right and you get

744
00:46:17,380 --> 00:46:18,190
your own

745
00:46:18,190 --> 00:46:21,849
trade break detection code the code is
polymorphic which means

746
00:46:21,849 --> 00:46:25,920
that every time you click to rate you
will get your own cold week on

747
00:46:25,920 --> 00:46:29,010
by posse of course all those

748
00:46:29,010 --> 00:46:33,069
at mind that shakes can be bypassed this
well if you do something like

749
00:46:33,069 --> 00:46:36,290
hooping are you if you which just

750
00:46:36,290 --> 00:46:40,339
in West a lot of time to spot it and to
bypass it

751
00:46:40,339 --> 00:46:44,078
though this is like erase the bob with
us very high I don't wanna

752
00:46:44,079 --> 00:46:48,069
bypass these checks

753
00:46:48,069 --> 00:46:51,390
so this what it looks like you have
different levels of a

754
00:46:51,390 --> 00:46:54,400
obfuscation and self integrity and saw

755
00:46:54,400 --> 00:46:59,440
just use it if if any questions on at
mind a sent many my

756
00:46:59,440 --> 00:47:04,880
to conclude I'd like to discuss some
countermeasures for securing the runtime

757
00:47:04,880 --> 00:47:08,640
first commandment of course is keep only
a minimum of

758
00:47:08,640 --> 00:47:11,930
daytime logic on the client side

759
00:47:11,930 --> 00:47:17,190
so at least no client site security
mechanisms

760
00:47:17,190 --> 00:47:22,000
those can be easily bypassed our tools

761
00:47:22,000 --> 00:47:26,380
if you develop some abs make perfect use
of see at least for security critical

762
00:47:26,380 --> 00:47:27,819
implements

763
00:47:27,819 --> 00:47:31,640
objective-c can be hooked very easily
see can be hooked

764
00:47:31,640 --> 00:47:35,009
not as easily as objective-c and you can
use

765
00:47:35,010 --> 00:47:38,050
something like inline functions and more

766
00:47:38,050 --> 00:47:42,910
obfuscation it's possible with with an
objective-c

767
00:47:42,910 --> 00:47:48,000
and do some kind of at Monster a break
the Texan and runtime integrity checks

768
00:47:48,000 --> 00:47:52,349
at least try to it's worth a shot and
always should raise the bar

769
00:47:52,349 --> 00:47:55,550
as high as possible

770
00:47:55,550 --> 00:48:01,069
well what I want you to take Ole Miss
that runtime analysis and manipulation

771
00:48:01,069 --> 00:48:06,140
facilitates both dynamic and static
analysis of I was applications

772
00:48:06,140 --> 00:48:09,509
just remember these examples where we
have analyzed a

773
00:48:09,510 --> 00:48:15,200
arbitrary f/stop: us what safe within
seconds

774
00:48:15,200 --> 00:48:19,149
the attack surface of my USF's can be
explored more efficiently

775
00:48:19,150 --> 00:48:24,200
using these techniques and even with our
new tools new pit which will be provided

776
00:48:24,200 --> 00:48:25,348
soon

777
00:48:25,349 --> 00:48:30,700
so for your future IRS assessments this
means when in doubt snoop it out

778
00:48:30,700 --> 00:48:37,700
thank you very much

779
00:48:41,300 --> 00:48:43,040
on any questions or comments

780
00:48:43,040 --> 00:48:47,390
alright

781
00:48:47,390 --> 00:48:51,930
I'm around until this afternoon though
just come to me and let's have some

782
00:48:51,930 --> 00:48:55,850
mobile app security discussions thank
you thank you address

783
00:48:55,850 --> 00:48:57,900
that a round of applause for as pretty
awesome

