1
00:00:00,030 --> 00:00:07,730
<font color="#E5E5E5">okay hi Ron</font><font color="#CCCCCC"> my name is Alex and I'm here</font>

2
00:00:05,339 --> 00:00:10,889
to present digging into the core of<font color="#CCCCCC"> boot</font>

3
00:00:07,730 --> 00:00:15,719
so<font color="#E5E5E5"> originally this work was</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> by two</font>

4
00:00:10,889 --> 00:00:17,549
people<font color="#CCCCCC"> myself and yerba Ligon</font><font color="#E5E5E5"> recent</font>

5
00:00:15,719 --> 00:00:20,189
years we published a lot<font color="#E5E5E5"> of research</font>

6
00:00:17,550 --> 00:00:22,680
related<font color="#CCCCCC"> to system</font><font color="#E5E5E5"> from where different</font>

7
00:00:20,189 --> 00:00:24,420
vulnerabilities<font color="#E5E5E5"> attack vectors and we</font>

8
00:00:22,680 --> 00:00:26,160
<font color="#E5E5E5">even released the open source framework</font>

9
00:00:24,420 --> 00:00:27,449
which you can use to<font color="#CCCCCC"> test your own</font>

10
00:00:26,160 --> 00:00:30,359
system<font color="#CCCCCC"> firma</font>

11
00:00:27,449 --> 00:00:32,880
but a lot of<font color="#E5E5E5"> that research was focused</font>

12
00:00:30,359 --> 00:00:35,489
on the five<font color="#CCCCCC"> basic Fermin</font><font color="#E5E5E5"> and we were</font>

13
00:00:32,880 --> 00:00:38,399
thinking<font color="#CCCCCC"> about okay can we applies the</font>

14
00:00:35,489 --> 00:00:41,489
same attack vectors<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the same</font>

15
00:00:38,399 --> 00:00:44,070
methodology<font color="#E5E5E5"> to analyze a different</font>

16
00:00:41,489 --> 00:00:46,649
system former and one of the<font color="#E5E5E5"> popular</font>

17
00:00:44,070 --> 00:00:51,539
another system from which<font color="#CCCCCC"> I will talk</font>

18
00:00:46,649 --> 00:00:53,399
today is a core boot<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I will go to</font>

19
00:00:51,539 --> 00:00:56,910
some<font color="#CCCCCC"> of the introduction of</font><font color="#E5E5E5"> the core</font>

20
00:00:53,399 --> 00:00:58,649
boot and the attack vectors which is

21
00:00:56,910 --> 00:01:01,468
applicable to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> coreboot compared to</font>

22
00:00:58,649 --> 00:01:04,110
the<font color="#CCCCCC"> ufi basic bias then I will go and</font>

23
00:01:01,469 --> 00:01:07,110
recap some of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vulnerabilities which</font>

24
00:01:04,110 --> 00:01:10,409
we<font color="#E5E5E5"> disclose it this year for</font><font color="#CCCCCC"> the ufi</font>

25
00:01:07,110 --> 00:01:14,280
basic biases and then show how to apply

26
00:01:10,409 --> 00:01:17,670
<font color="#CCCCCC">the same vector</font><font color="#E5E5E5"> to the core boot from</font>

27
00:01:14,280 --> 00:01:21,049
<font color="#E5E5E5">them</font><font color="#CCCCCC"> then I will go</font><font color="#E5E5E5"> through some</font><font color="#CCCCCC"> of the</font>

28
00:01:17,670 --> 00:01:24,180
new vectors of<font color="#E5E5E5"> attack a CPI G and V s</font>

29
00:01:21,049 --> 00:01:28,439
pointer issue which is applicable just

30
00:01:24,180 --> 00:01:31,560
to coreboot firmware and then I will go

31
00:01:28,439 --> 00:01:34,169
<font color="#E5E5E5">to some</font><font color="#CCCCCC"> of the classical SMI handler</font>

32
00:01:31,560 --> 00:01:35,700
issues and will explain<font color="#E5E5E5"> how this can be</font>

33
00:01:34,170 --> 00:01:38,630
applicable as well for the core boot

34
00:01:35,700 --> 00:01:40,920
because we previously<font color="#E5E5E5"> presented in</font>

35
00:01:38,630 --> 00:01:45,449
<font color="#CCCCCC">2015/16 how does it applicable for</font><font color="#E5E5E5"> you</font>

36
00:01:40,920 --> 00:01:49,409
five basic biases<font color="#E5E5E5"> and then I will finish</font>

37
00:01:45,450 --> 00:01:52,110
with some of the small explanation<font color="#CCCCCC"> write</font>

38
00:01:49,409 --> 00:01:58,380
protection<font color="#E5E5E5"> functionality for the core</font>

39
00:01:52,110 --> 00:02:03,420
boot and go to the conclusion so

40
00:01:58,380 --> 00:02:07,610
<font color="#E5E5E5">initially coreboot was designed and</font>

41
00:02:03,420 --> 00:02:09,869
<font color="#CCCCCC">developed as an alternative</font><font color="#E5E5E5"> from Bram</font>

42
00:02:07,610 --> 00:02:10,899
<font color="#E5E5E5">alternative open-source version of the</font>

43
00:02:09,869 --> 00:02:12,820
firm

44
00:02:10,899 --> 00:02:16,150
there was<font color="#E5E5E5"> era when there was a legacy</font>

45
00:02:12,820 --> 00:02:18,700
bias<font color="#E5E5E5"> and legacy bias basically is based</font>

46
00:02:16,150 --> 00:02:20,530
<font color="#E5E5E5">on</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> table and all of the</font>

47
00:02:18,700 --> 00:02:23,230
functionality<font color="#E5E5E5"> is going through the</font>

48
00:02:20,530 --> 00:02:25,840
<font color="#E5E5E5">internet table</font><font color="#CCCCCC"> and there was no standard</font>

49
00:02:23,230 --> 00:02:28,269
<font color="#E5E5E5">at that time for the legacy biases and</font>

50
00:02:25,840 --> 00:02:29,830
then at some point<font color="#E5E5E5"> the open source</font>

51
00:02:28,270 --> 00:02:34,990
community figure out they don't<font color="#E5E5E5"> want to</font>

52
00:02:29,830 --> 00:02:37,780
have the<font color="#E5E5E5"> proper attire</font><font color="#CCCCCC"> bias they want to</font>

53
00:02:34,990 --> 00:02:40,750
have open<font color="#E5E5E5"> source bias and they try to</font>

54
00:02:37,780 --> 00:02:45,430
<font color="#E5E5E5">develop the the initial version of the</font>

55
00:02:40,750 --> 00:02:47,800
<font color="#E5E5E5">core boot called lineage bias</font><font color="#CCCCCC"> and then</font>

56
00:02:45,430 --> 00:02:50,260
they they they renamed it<font color="#E5E5E5"> to the core</font>

57
00:02:47,800 --> 00:02:52,180
boot<font color="#CCCCCC"> it is not really</font><font color="#E5E5E5"> true</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it is</font>

58
00:02:50,260 --> 00:02:55,660
full open source because<font color="#CCCCCC"> it still use</font>

59
00:02:52,180 --> 00:02:57,959
<font color="#CCCCCC">some of the binary</font><font color="#E5E5E5"> blobs provided by</font>

60
00:02:55,660 --> 00:03:00,760
vendor<font color="#E5E5E5"> during the belt when it is</font>

61
00:02:57,959 --> 00:03:04,180
builded for the specific<font color="#CCCCCC"> system for</font>

62
00:03:00,760 --> 00:03:06,640
example<font color="#E5E5E5"> MRC code which is released from</font>

63
00:03:04,180 --> 00:03:09,820
the<font color="#E5E5E5"> Intel and other vendors the code</font>

64
00:03:06,640 --> 00:03:12,040
which<font color="#E5E5E5"> is necessary to run during the</font>

65
00:03:09,820 --> 00:03:13,959
boot time to<font color="#E5E5E5"> train the memory that code</font>

66
00:03:12,040 --> 00:03:15,790
is<font color="#E5E5E5"> not open source but it's still part</font>

67
00:03:13,959 --> 00:03:18,190
of the package with the<font color="#E5E5E5"> core boot so</font>

68
00:03:15,790 --> 00:03:20,260
when we talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> coreboot</font><font color="#CCCCCC"> coreboot</font>

69
00:03:18,190 --> 00:03:23,739
has the core functionality which is open

70
00:03:20,260 --> 00:03:28,179
<font color="#CCCCCC">source but it still use a lot of binary</font>

71
00:03:23,739 --> 00:03:33,660
blobs<font color="#E5E5E5"> from there from which is from the</font>

72
00:03:28,180 --> 00:03:38,140
vendor which is not open<font color="#CCCCCC"> source</font><font color="#E5E5E5"> then a</font>

73
00:03:33,660 --> 00:03:40,660
<font color="#E5E5E5">coreboot grow a lot and then they</font><font color="#CCCCCC"> edit a</font>

74
00:03:38,140 --> 00:03:43,779
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of architecture is</font><font color="#E5E5E5"> 86</font><font color="#CCCCCC"> arm mips and</font>

75
00:03:40,660 --> 00:03:48,310
so on mostly coreboot wrote<font color="#E5E5E5"> and and seen</font>

76
00:03:43,780 --> 00:03:51,340
a same<font color="#E5E5E5"> su5 basic biases there is a bit</font>

77
00:03:48,310 --> 00:03:53,410
code base<font color="#CCCCCC"> ro</font><font color="#E5E5E5"> tenancy and then there is</font>

78
00:03:51,340 --> 00:03:56,350
some assemblers when you need to<font color="#E5E5E5"> access</font>

79
00:03:53,410 --> 00:03:59,140
<font color="#CCCCCC">specific interfaces</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> MSR are your</font>

80
00:03:56,350 --> 00:04:05,560
ports PCIe ports you you need<font color="#E5E5E5"> to use</font>

81
00:03:59,140 --> 00:04:08,950
some assembler functions then also<font color="#E5E5E5"> core</font>

82
00:04:05,560 --> 00:04:10,989
<font color="#CCCCCC">boot support a</font><font color="#E5E5E5"> CPI standard to propagate</font>

83
00:04:08,950 --> 00:04:13,570
the data from the farmer<font color="#CCCCCC"> to the person</font>

84
00:04:10,989 --> 00:04:16,570
<font color="#E5E5E5">system and as part of the implementation</font>

85
00:04:13,570 --> 00:04:18,269
it uses<font color="#E5E5E5"> as a language as well as</font><font color="#CCCCCC"> u5s</font>

86
00:04:16,570 --> 00:04:23,520
biases

87
00:04:18,269 --> 00:04:26,909
and then also coreboot support<font color="#E5E5E5"> multiple</font>

88
00:04:23,520 --> 00:04:30,690
payloads<font color="#E5E5E5"> payloads it is in in the UFO</font>

89
00:04:26,909 --> 00:04:34,169
<font color="#E5E5E5">base by same as bootloaders but just</font>

90
00:04:30,690 --> 00:04:38,539
different terminology<font color="#CCCCCC"> to boot different</font>

91
00:04:34,169 --> 00:04:41,280
<font color="#CCCCCC">OSS like Frommer's linux and so on the</font>

92
00:04:38,539 --> 00:04:43,199
some<font color="#E5E5E5"> of the payload has specific</font>

93
00:04:41,280 --> 00:04:46,590
functionality like verify<font color="#E5E5E5"> boot</font>

94
00:04:43,199 --> 00:04:48,780
some of them more like a graph which<font color="#CCCCCC"> is</font>

95
00:04:46,590 --> 00:04:52,289
just booting<font color="#CCCCCC"> the next step</font><font color="#E5E5E5"> during</font><font color="#CCCCCC"> the</font>

96
00:04:48,780 --> 00:04:54,119
flow during the boot flow so<font color="#E5E5E5"> and some of</font>

97
00:04:52,289 --> 00:04:57,330
them they even<font color="#CCCCCC"> if I base it like</font>

98
00:04:54,120 --> 00:05:02,069
<font color="#CCCCCC">genacore also interesting fact that</font>

99
00:04:57,330 --> 00:05:05,219
<font color="#E5E5E5">nowadays</font><font color="#CCCCCC"> Gore boot is really</font><font color="#E5E5E5"> similar in</font>

100
00:05:02,069 --> 00:05:10,530
<font color="#E5E5E5">the perspective</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the modular modulus</font>

101
00:05:05,220 --> 00:05:15,930
with the<font color="#CCCCCC"> UFO based bias so that was not</font>

102
00:05:10,530 --> 00:05:18,059
me<font color="#CCCCCC"> some one day so</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> specific</font>

103
00:05:15,930 --> 00:05:21,389
modulus which is defined and initialize

104
00:05:18,060 --> 00:05:24,030
functionality for CPUs for for chipset

105
00:05:21,389 --> 00:05:26,639
and for SOC s and then when you<font color="#E5E5E5"> added</font>

106
00:05:24,030 --> 00:05:28,440
<font color="#E5E5E5">the new platform you just need to</font>

107
00:05:26,639 --> 00:05:30,930
combine<font color="#E5E5E5"> this modulus and added some</font>

108
00:05:28,440 --> 00:05:33,270
<font color="#CCCCCC">sandwich's was not defined it there</font><font color="#E5E5E5"> so</font>

109
00:05:30,930 --> 00:05:35,639
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> why I</font><font color="#E5E5E5"> mentioned this</font>

110
00:05:33,270 --> 00:05:38,789
<font color="#E5E5E5">because when</font><font color="#CCCCCC"> the if I create a standard</font>

111
00:05:35,639 --> 00:05:41,370
they actually specify all of<font color="#CCCCCC"> this all of</font>

112
00:05:38,789 --> 00:05:44,219
<font color="#CCCCCC">this modelers and in</font><font color="#E5E5E5"> you file</font><font color="#CCCCCC"> you have</font>

113
00:05:41,370 --> 00:05:46,289
the<font color="#E5E5E5"> specific phase which is</font><font color="#CCCCCC"> half</font>

114
00:05:44,219 --> 00:05:48,719
standard and this<font color="#E5E5E5"> space it</font><font color="#CCCCCC"> should be</font>

115
00:05:46,289 --> 00:05:51,270
<font color="#E5E5E5">implemented in specific sequence and all</font>

116
00:05:48,719 --> 00:05:54,599
of that standards it<font color="#E5E5E5"> is it was created</font>

117
00:05:51,270 --> 00:05:57,389
<font color="#E5E5E5">to</font><font color="#CCCCCC"> make as simple as possible to</font><font color="#E5E5E5"> develop</font>

118
00:05:54,599 --> 00:05:59,340
the biases and make good modular

119
00:05:57,389 --> 00:06:01,319
structure then you<font color="#CCCCCC"> can reuse</font><font color="#E5E5E5"> a lot of</font>

120
00:05:59,340 --> 00:06:02,849
code and you<font color="#E5E5E5"> don't need to</font><font color="#CCCCCC"> everytime</font>

121
00:06:01,319 --> 00:06:04,650
create a new code you can just combine

122
00:06:02,849 --> 00:06:07,199
<font color="#E5E5E5">the components from already existing</font>

123
00:06:04,650 --> 00:06:09,568
modulus so in this<font color="#E5E5E5"> perspective they are</font>

124
00:06:07,199 --> 00:06:11,909
<font color="#E5E5E5">really similar except the Corbeau</font>

125
00:06:09,569 --> 00:06:14,009
doesn't have<font color="#CCCCCC"> standards so they have good</font>

126
00:06:11,909 --> 00:06:16,020
<font color="#CCCCCC">structure but it's not kind of</font><font color="#E5E5E5"> wrote and</font>

127
00:06:14,009 --> 00:06:17,909
in some standard<font color="#E5E5E5"> way when everyone</font>

128
00:06:16,020 --> 00:06:21,508
should follow it so everyone<font color="#E5E5E5"> can</font><font color="#CCCCCC"> make</font>

129
00:06:17,909 --> 00:06:23,990
any<font color="#CCCCCC"> changes and</font><font color="#E5E5E5"> also a core boot support</font>

130
00:06:21,509 --> 00:06:26,430
<font color="#CCCCCC">verify</font><font color="#E5E5E5"> boot which is</font><font color="#CCCCCC"> routed to the</font>

131
00:06:23,990 --> 00:06:29,870
<font color="#E5E5E5">hardware protection which</font><font color="#CCCCCC"> is one of the</font>

132
00:06:26,430 --> 00:06:29,870
topics<font color="#CCCCCC"> which I've explained today</font>

133
00:06:30,000 --> 00:06:40,010
so a little<font color="#E5E5E5"> bit about booth flow and how</font>

134
00:06:35,850 --> 00:06:43,530
<font color="#CCCCCC">does</font><font color="#E5E5E5"> it done in the core board first</font>

135
00:06:40,010 --> 00:06:45,060
<font color="#CCCCCC">when the system is power on</font><font color="#E5E5E5"> first</font>

136
00:06:43,530 --> 00:06:47,729
instruction which is<font color="#E5E5E5"> executive service</font>

137
00:06:45,060 --> 00:06:51,030
<font color="#E5E5E5">that vector which is</font><font color="#CCCCCC"> fetching</font><font color="#E5E5E5"> directly</font>

138
00:06:47,730 --> 00:06:56,310
from the spy chip then it called the the

139
00:06:51,030 --> 00:06:58,109
boot block which<font color="#CCCCCC"> is basically the the</font>

140
00:06:56,310 --> 00:07:01,410
really small piece of<font color="#E5E5E5"> code which is</font>

141
00:06:58,110 --> 00:07:05,520
running<font color="#E5E5E5"> in a mode cases run and that</font>

142
00:07:01,410 --> 00:07:08,280
mode is<font color="#CCCCCC"> actually using cash</font><font color="#E5E5E5"> as main</font>

143
00:07:05,520 --> 00:07:10,890
memory it<font color="#CCCCCC"> doesn't use</font><font color="#E5E5E5"> the main memory at</font>

144
00:07:08,280 --> 00:07:13,469
all<font color="#CCCCCC"> why because the main</font><font color="#E5E5E5"> memory is not</font>

145
00:07:10,890 --> 00:07:15,270
initialized<font color="#E5E5E5"> yet so we cannot run from</font>

146
00:07:13,470 --> 00:07:18,210
the main memory<font color="#E5E5E5"> we can we can run it</font>

147
00:07:15,270 --> 00:07:20,609
<font color="#CCCCCC">just from cache so what happened in</font><font color="#E5E5E5"> this</font>

148
00:07:18,210 --> 00:07:24,799
stage in this page<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> call the</font>

149
00:07:20,610 --> 00:07:28,140
<font color="#E5E5E5">next step which is called</font><font color="#CCCCCC"> wear stage</font>

150
00:07:24,800 --> 00:07:31,980
<font color="#CCCCCC">boot</font><font color="#E5E5E5"> block that didn't doesn't check the</font>

151
00:07:28,140 --> 00:07:36,120
verse stage so there is no validation or

152
00:07:31,980 --> 00:07:39,360
signature check done yet<font color="#E5E5E5"> so</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> stage</font>

153
00:07:36,120 --> 00:07:42,570
is the minimum<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the really small stage</font>

154
00:07:39,360 --> 00:07:44,310
but the main goal<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the stage</font><font color="#CCCCCC"> haven't</font>

155
00:07:42,570 --> 00:07:47,130
their verification functionality first

156
00:07:44,310 --> 00:07:49,140
and<font color="#E5E5E5"> before it has the small technology</font>

157
00:07:47,130 --> 00:07:50,670
<font color="#E5E5E5">supposed to initialize necessary</font>

158
00:07:49,140 --> 00:07:56,010
components<font color="#CCCCCC"> to have that verification</font>

159
00:07:50,670 --> 00:08:00,180
<font color="#E5E5E5">method so it isn't in initialize GPM a</font>

160
00:07:56,010 --> 00:08:01,980
spy and<font color="#CCCCCC"> V boot verify boot</font><font color="#E5E5E5"> so after they</font>

161
00:08:00,180 --> 00:08:04,050
initialize<font color="#E5E5E5"> these three modules they can</font>

162
00:08:01,980 --> 00:08:06,630
run the<font color="#E5E5E5"> V boot and check the next step</font>

163
00:08:04,050 --> 00:08:11,040
or in<font color="#CCCCCC"> a boot sequence and then they</font>

164
00:08:06,630 --> 00:08:12,990
check<font color="#E5E5E5"> in the wrong stage and switch into</font>

165
00:08:11,040 --> 00:08:15,090
execution<font color="#E5E5E5"> to the run stage one stage</font>

166
00:08:12,990 --> 00:08:18,120
basically<font color="#E5E5E5"> training the memory including</font>

167
00:08:15,090 --> 00:08:20,849
<font color="#CCCCCC">speedy</font><font color="#E5E5E5"> lodging the microcode preparing</font>

168
00:08:18,120 --> 00:08:23,760
everything<font color="#E5E5E5"> preparing system to run the</font>

169
00:08:20,850 --> 00:08:26,490
<font color="#E5E5E5">from</font><font color="#CCCCCC"> ur from the main</font><font color="#E5E5E5"> memory so then</font><font color="#CCCCCC"> it</font>

170
00:08:23,760 --> 00:08:27,780
<font color="#E5E5E5">verified the run stage and</font><font color="#CCCCCC"> switch</font><font color="#E5E5E5"> and</font>

171
00:08:26,490 --> 00:08:31,820
execution to<font color="#CCCCCC"> the on stage</font>

172
00:08:27,780 --> 00:08:34,530
<font color="#CCCCCC">REM stage</font><font color="#E5E5E5"> basically making</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the main</font>

173
00:08:31,820 --> 00:08:37,919
initialization flow for the platform<font color="#E5E5E5"> so</font>

174
00:08:34,530 --> 00:08:40,228
it it<font color="#E5E5E5"> make enumeration of the</font><font color="#CCCCCC"> PC</font>

175
00:08:37,919 --> 00:08:42,900
interfaces<font color="#E5E5E5"> it</font><font color="#CCCCCC"> make them</font>

176
00:08:40,229 --> 00:08:46,680
<font color="#CCCCCC">SMM initialization inclusion</font>

177
00:08:42,900 --> 00:08:49,230
some<font color="#CCCCCC"> unlocks session and unlocks</font><font color="#E5E5E5"> auction</font>

178
00:08:46,680 --> 00:08:52,020
rooms<font color="#E5E5E5"> a CPI table so on the</font><font color="#CCCCCC"> run stage</font>

179
00:08:49,230 --> 00:08:54,480
<font color="#E5E5E5">supposed to implement in specific</font>

180
00:08:52,020 --> 00:08:57,270
sequence as well<font color="#E5E5E5"> it didn't show in this</font>

181
00:08:54,480 --> 00:09:00,240
<font color="#CCCCCC">picture but to mention</font><font color="#E5E5E5"> at the sequence</font>

182
00:08:57,270 --> 00:09:02,490
inside<font color="#E5E5E5"> this stage may may allow attacker</font>

183
00:09:00,240 --> 00:09:05,280
to<font color="#CCCCCC"> fence over</font><font color="#E5E5E5"> to trigger some</font>

184
00:09:02,490 --> 00:09:08,550
vulnerability<font color="#E5E5E5"> for example if the PCIe</font>

185
00:09:05,280 --> 00:09:10,949
devices<font color="#E5E5E5"> already enumerated</font><font color="#CCCCCC"> but as a man</font>

186
00:09:08,550 --> 00:09:12,810
not<font color="#CCCCCC"> lock at the end the PC device can</font>

187
00:09:10,950 --> 00:09:16,980
send<font color="#E5E5E5"> the GM a transaction and override</font>

188
00:09:12,810 --> 00:09:19,979
<font color="#CCCCCC">this among the sm ram memory and</font><font color="#E5E5E5"> it make</font>

189
00:09:16,980 --> 00:09:23,910
<font color="#E5E5E5">make some installation of them back door</font>

190
00:09:19,980 --> 00:09:26,850
to them into the SML so run stage verify

191
00:09:23,910 --> 00:09:29,760
the payload and switch in the kitchen to

192
00:09:26,850 --> 00:09:31,590
<font color="#CCCCCC">the payload payload basically finishing</font>

193
00:09:29,760 --> 00:09:33,900
the initialization<font color="#E5E5E5"> including graphic</font>

194
00:09:31,590 --> 00:09:38,370
insulation<font color="#CCCCCC"> its installation</font><font color="#E5E5E5"> and it</font>

195
00:09:33,900 --> 00:09:41,850
verified them them it called the

196
00:09:38,370 --> 00:09:44,760
verified kernel which is continuing the

197
00:09:41,850 --> 00:09:49,890
boot of trust to the up<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

198
00:09:44,760 --> 00:09:53,700
<font color="#E5E5E5">application level so</font><font color="#CCCCCC"> m/s as we here</font><font color="#E5E5E5"> as</font>

199
00:09:49,890 --> 00:09:56,069
we see here we<font color="#E5E5E5"> have an entire route of</font>

200
00:09:53,700 --> 00:09:58,680
trust which is starting somewhere<font color="#E5E5E5"> in a</font>

201
00:09:56,070 --> 00:10:02,400
boot block and where stage but how<font color="#CCCCCC"> does</font>

202
00:09:58,680 --> 00:10:05,819
this<font color="#E5E5E5"> two</font><font color="#CCCCCC"> stages protected so can</font>

203
00:10:02,400 --> 00:10:08,880
<font color="#CCCCCC">attacker</font><font color="#E5E5E5"> righted it so it's supposed to</font>

204
00:10:05,820 --> 00:10:12,930
be<font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> memory so all of these</font>

205
00:10:08,880 --> 00:10:15,390
stages<font color="#E5E5E5"> is the part</font><font color="#CCCCCC"> exists in spite ship</font>

206
00:10:12,930 --> 00:10:18,750
in different modulus in different

207
00:10:15,390 --> 00:10:21,030
regions<font color="#E5E5E5"> but the two</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> boot block</font>

208
00:10:18,750 --> 00:10:25,470
and<font color="#CCCCCC"> where</font><font color="#E5E5E5"> stage supposed to be just in</font>

209
00:10:21,030 --> 00:10:27,870
<font color="#E5E5E5">read-only spy section so meaning that</font>

210
00:10:25,470 --> 00:10:30,180
<font color="#E5E5E5">it's supposed to be somehow protected</font>

211
00:10:27,870 --> 00:10:32,250
and then if you have read only memory

212
00:10:30,180 --> 00:10:34,050
which is<font color="#E5E5E5"> very</font><font color="#CCCCCC"> fine readwrite memory if</font>

213
00:10:32,250 --> 00:10:35,970
you<font color="#E5E5E5"> trust that</font><font color="#CCCCCC"> redundant number</font><font color="#E5E5E5"> doesn't</font>

214
00:10:34,050 --> 00:10:38,990
have any vulnerability<font color="#CCCCCC"> you have the</font>

215
00:10:35,970 --> 00:10:42,060
entire boot of trust<font color="#E5E5E5"> that's the idea</font>

216
00:10:38,990 --> 00:10:45,480
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> see how how does it implemented</font>

217
00:10:42,060 --> 00:10:47,849
what kind<font color="#CCCCCC"> of issues it may have</font><font color="#E5E5E5"> so</font>

218
00:10:45,480 --> 00:10:49,650
coreboot is just a firmer<font color="#E5E5E5"> but someone</font>

219
00:10:47,850 --> 00:10:52,020
need to use this from<font color="#E5E5E5"> where and</font><font color="#CCCCCC"> to the</font>

220
00:10:49,650 --> 00:10:54,449
to the final to them to the<font color="#CCCCCC"> system so</font>

221
00:10:52,020 --> 00:10:56,069
<font color="#CCCCCC">some someone need to build this from and</font>

222
00:10:54,450 --> 00:10:58,610
flash it to the system

223
00:10:56,070 --> 00:11:02,310
and one of<font color="#CCCCCC"> the examples is from</font><font color="#E5E5E5"> books</font>

224
00:10:58,610 --> 00:11:04,860
<font color="#E5E5E5">which is using the Chrome</font><font color="#CCCCCC"> OS</font><font color="#E5E5E5"> plus</font>

225
00:11:02,310 --> 00:11:07,140
coreboot so basically in<font color="#E5E5E5"> Chromebook you</font>

226
00:11:04,860 --> 00:11:09,690
have the core boot which<font color="#CCCCCC"> is basically</font>

227
00:11:07,140 --> 00:11:12,170
verifying the Chrome OS<font color="#E5E5E5"> component and</font>

228
00:11:09,690 --> 00:11:16,290
building the root of<font color="#CCCCCC"> trust from</font><font color="#E5E5E5"> them</font>

229
00:11:12,170 --> 00:11:20,579
<font color="#CCCCCC">Hardware protected</font><font color="#E5E5E5"> by redundant spy</font>

230
00:11:16,290 --> 00:11:23,550
section<font color="#E5E5E5"> up to the application</font><font color="#CCCCCC"> level in</font>

231
00:11:20,580 --> 00:11:27,150
this picture will see that there is two

232
00:11:23,550 --> 00:11:29,250
<font color="#CCCCCC">different again there is read-only</font>

233
00:11:27,150 --> 00:11:33,150
memory<font color="#E5E5E5"> dried memory in readwrite memory</font>

234
00:11:29,250 --> 00:11:38,730
we have them<font color="#CCCCCC"> two different</font><font color="#E5E5E5"> flow a kernel</font>

235
00:11:33,150 --> 00:11:40,530
engine will be<font color="#E5E5E5"> it is kind of it was</font>

236
00:11:38,730 --> 00:11:42,900
<font color="#CCCCCC">design</font><font color="#E5E5E5"> it in a way</font><font color="#CCCCCC"> that is there is some</font>

237
00:11:40,530 --> 00:11:45,420
<font color="#E5E5E5">corruption happen by</font><font color="#CCCCCC"> mistake</font>

238
00:11:42,900 --> 00:11:47,939
there is the<font color="#CCCCCC"> backup flow which will</font>

239
00:11:45,420 --> 00:11:49,920
restore the<font color="#CCCCCC"> original one</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> there is</font>

240
00:11:47,940 --> 00:11:52,680
original one corrupted and the system

241
00:11:49,920 --> 00:11:55,260
still will boot but because<font color="#CCCCCC"> read read</font>

242
00:11:52,680 --> 00:11:56,959
<font color="#CCCCCC">memory is</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> attacker can</font>

243
00:11:55,260 --> 00:12:00,480
override it<font color="#E5E5E5"> and corrupt the entire</font>

244
00:11:56,960 --> 00:12:02,250
entire stack up<font color="#E5E5E5"> to the redundant memory</font>

245
00:12:00,480 --> 00:12:05,010
<font color="#E5E5E5">what happened in</font><font color="#CCCCCC"> that case the system</font>

246
00:12:02,250 --> 00:12:06,930
<font color="#CCCCCC">will go to the recovery state as mode</font>

247
00:12:05,010 --> 00:12:09,960
and<font color="#E5E5E5"> a recovery mode expected that you</font>

248
00:12:06,930 --> 00:12:12,420
have a USB<font color="#E5E5E5"> stick which you plug in</font><font color="#CCCCCC"> in</font>

249
00:12:09,960 --> 00:12:14,730
<font color="#CCCCCC">the system with the image which is</font>

250
00:12:12,420 --> 00:12:18,030
<font color="#E5E5E5">signed by the vendor and this image will</font>

251
00:12:14,730 --> 00:12:20,880
be checked by read-only component and

252
00:12:18,030 --> 00:12:23,579
will restore<font color="#E5E5E5"> entire state the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> for</font>

253
00:12:20,880 --> 00:12:26,370
the next<font color="#E5E5E5"> reboot to</font><font color="#CCCCCC"> go the normal</font><font color="#E5E5E5"> boot</font>

254
00:12:23,580 --> 00:12:28,830
flow<font color="#CCCCCC"> that's kind of</font><font color="#E5E5E5"> the way how the</font>

255
00:12:26,370 --> 00:12:31,050
system<font color="#E5E5E5"> is not breakable because they</font>

256
00:12:28,830 --> 00:12:33,630
always<font color="#E5E5E5"> can restore</font><font color="#CCCCCC"> it</font>

257
00:12:31,050 --> 00:12:35,609
another interesting<font color="#E5E5E5"> things is when you</font>

258
00:12:33,630 --> 00:12:38,390
go<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when you</font><font color="#CCCCCC"> boot in the</font><font color="#E5E5E5"> normal flow</font>

259
00:12:35,610 --> 00:12:41,760
you also<font color="#E5E5E5"> allow to put in developer mode</font>

260
00:12:38,390 --> 00:12:43,740
<font color="#E5E5E5">in developer</font><font color="#CCCCCC"> mode when you go in from</font>

261
00:12:41,760 --> 00:12:47,130
random little<font color="#CCCCCC"> readwrite stage the</font>

262
00:12:43,740 --> 00:12:51,510
signature verification is not required

263
00:12:47,130 --> 00:12:55,110
and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can put</font><font color="#E5E5E5"> your own kernel and your</font>

264
00:12:51,510 --> 00:12:56,880
own payload and<font color="#E5E5E5"> booty any any operating</font>

265
00:12:55,110 --> 00:12:58,500
<font color="#E5E5E5">system</font><font color="#CCCCCC"> which supported</font><font color="#E5E5E5"> by that payload</font>

266
00:12:56,880 --> 00:13:03,650
that's<font color="#E5E5E5"> the way how you can put for</font>

267
00:12:58,500 --> 00:13:06,720
example<font color="#E5E5E5"> Ubuntu in in her own book system</font>

268
00:13:03,650 --> 00:13:08,910
and a<font color="#E5E5E5"> couple words about</font><font color="#CCCCCC"> verify</font><font color="#E5E5E5"> would</font>

269
00:13:06,720 --> 00:13:10,080
<font color="#CCCCCC">already</font><font color="#E5E5E5"> mentioned almost all</font><font color="#CCCCCC"> of the</font>

270
00:13:08,910 --> 00:13:13,380
<font color="#E5E5E5">statements</font>

271
00:13:10,080 --> 00:13:15,480
so we have root of<font color="#E5E5E5"> trust which</font><font color="#CCCCCC"> is</font>

272
00:13:13,380 --> 00:13:17,280
started<font color="#E5E5E5"> from read-only memory read-only</font>

273
00:13:15,480 --> 00:13:20,070
memory very<font color="#CCCCCC"> very</font><font color="#E5E5E5"> the right memory which</font>

274
00:13:17,280 --> 00:13:22,620
<font color="#E5E5E5">will verify the the</font><font color="#CCCCCC"> verified kernel</font>

275
00:13:20,070 --> 00:13:27,840
which will verify the rest of them of

276
00:13:22,620 --> 00:13:30,270
the system and we can disable verify

277
00:13:27,840 --> 00:13:32,880
boot<font color="#CCCCCC"> go into the developer mode and I</font>

278
00:13:30,270 --> 00:13:34,350
<font color="#CCCCCC">will explain what the difference in the</font>

279
00:13:32,880 --> 00:13:37,650
perspective<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the state of the system</font>

280
00:13:34,350 --> 00:13:41,160
these different modes<font color="#E5E5E5"> so in perspective</font>

281
00:13:37,650 --> 00:13:43,800
of them<font color="#CCCCCC"> system before it go to developer</font>

282
00:13:41,160 --> 00:13:46,920
mode<font color="#CCCCCC"> it erases entire state</font><font color="#E5E5E5"> to making</font>

283
00:13:43,800 --> 00:13:50,250
<font color="#CCCCCC">sure there is no data and store it in</font>

284
00:13:46,920 --> 00:13:53,010
TPM<font color="#E5E5E5"> or hard drives so when you go into</font>

285
00:13:50,250 --> 00:13:55,140
the developer mode<font color="#E5E5E5"> you know your system</font>

286
00:13:53,010 --> 00:13:58,230
is<font color="#E5E5E5"> not checking the signature but system</font>

287
00:13:55,140 --> 00:14:01,230
<font color="#E5E5E5">not supposed to have any data sensitive</font>

288
00:13:58,230 --> 00:14:03,210
data<font color="#CCCCCC"> from user so why we interested</font><font color="#E5E5E5"> in</font>

289
00:14:01,230 --> 00:14:05,760
going to developer mode because we want

290
00:14:03,210 --> 00:14:07,650
to<font color="#E5E5E5"> run our tools to</font><font color="#CCCCCC"> investigate the</font>

291
00:14:05,760 --> 00:14:10,530
heart of the<font color="#CCCCCC"> phone books and and</font>

292
00:14:07,650 --> 00:14:12,360
coreboot and to run<font color="#E5E5E5"> e that we want to</font>

293
00:14:10,530 --> 00:14:14,040
run Linux and in Linux you want to run

294
00:14:12,360 --> 00:14:17,880
all of<font color="#E5E5E5"> the right tools which we have</font>

295
00:14:14,040 --> 00:14:21,630
like flash<font color="#E5E5E5"> ROM chip second so</font><font color="#CCCCCC"> on and</font>

296
00:14:17,880 --> 00:14:24,720
also<font color="#E5E5E5"> we want to have more run other</font>

297
00:14:21,630 --> 00:14:27,330
tools as well<font color="#E5E5E5"> so developer mode allows</font>

298
00:14:24,720 --> 00:14:30,180
<font color="#CCCCCC">you to run then there are comments from</font>

299
00:14:27,330 --> 00:14:34,080
<font color="#CCCCCC">the root privileges and setup</font><font color="#E5E5E5"> options</font>

300
00:14:30,180 --> 00:14:36,870
like do<font color="#E5E5E5"> not check signature run from</font>

301
00:14:34,080 --> 00:14:40,290
external boot from<font color="#E5E5E5"> external device and</font>

302
00:14:36,870 --> 00:14:43,020
boot with legacy payload what this mean

303
00:14:40,290 --> 00:14:45,170
<font color="#E5E5E5">it's mean</font><font color="#CCCCCC"> that you allow system boot</font>

304
00:14:43,020 --> 00:14:48,180
from USB stick<font color="#E5E5E5"> this and be our basic</font>

305
00:14:45,170 --> 00:14:51,420
system which is basically<font color="#E5E5E5"> any bootable</font>

306
00:14:48,180 --> 00:14:54,060
USB stick for example<font color="#CCCCCC"> Boonton</font><font color="#E5E5E5"> that's the</font>

307
00:14:51,420 --> 00:14:55,979
way how you<font color="#CCCCCC"> run</font><font color="#E5E5E5"> the Bunton</font><font color="#CCCCCC"> and then</font>

308
00:14:54,060 --> 00:14:58,140
after you're<font color="#CCCCCC"> on the boot you can run the</font>

309
00:14:55,980 --> 00:15:00,360
comments like flash<font color="#E5E5E5"> rom</font>

310
00:14:58,140 --> 00:15:03,990
to check the what kind<font color="#E5E5E5"> of protection is</font>

311
00:15:00,360 --> 00:15:06,810
enable and<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do down for example spy</font>

312
00:15:03,990 --> 00:15:08,970
and make an investigation of the system

313
00:15:06,810 --> 00:15:11,729
<font color="#E5E5E5">so one of them things which</font><font color="#CCCCCC"> i already</font>

314
00:15:08,970 --> 00:15:13,740
mention is there's<font color="#CCCCCC"> physical protection</font>

315
00:15:11,730 --> 00:15:18,030
for the read-only

316
00:15:13,740 --> 00:15:20,660
part section of this spy chip<font color="#CCCCCC"> what</font><font color="#E5E5E5"> this</font>

317
00:15:18,030 --> 00:15:24,880
mean is so there is<font color="#E5E5E5"> a</font>

318
00:15:20,660 --> 00:15:29,120
specific<font color="#CCCCCC"> pain in a spied ship</font><font color="#E5E5E5"> call it</font>

319
00:15:24,880 --> 00:15:31,730
<font color="#CCCCCC">WPA</font><font color="#E5E5E5"> write-protect we and the spin is</font><font color="#CCCCCC"> the</font>

320
00:15:29,120 --> 00:15:35,360
spin is<font color="#E5E5E5"> asserted it not allowing</font><font color="#CCCCCC"> to</font>

321
00:15:31,730 --> 00:15:37,700
modify one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> registers</font><font color="#CCCCCC"> : status</font>

322
00:15:35,360 --> 00:15:41,390
register and the status register<font color="#E5E5E5"> story</font>

323
00:15:37,700 --> 00:15:45,560
configuration what kind<font color="#E5E5E5"> of region should</font>

324
00:15:41,390 --> 00:15:47,900
<font color="#E5E5E5">be read-only and it and it's supposed to</font>

325
00:15:45,560 --> 00:15:50,479
<font color="#E5E5E5">be enabled disparate this protection or</font>

326
00:15:47,900 --> 00:15:53,510
not<font color="#E5E5E5"> so basically if this register is</font>

327
00:15:50,480 --> 00:15:56,360
configured in<font color="#E5E5E5"> a way that hey let's let's</font>

328
00:15:53,510 --> 00:15:59,450
lock the<font color="#CCCCCC"> last two megabytes in spite you</font>

329
00:15:56,360 --> 00:16:03,710
and then you physically<font color="#CCCCCC"> ascertain</font><font color="#E5E5E5"> this</font>

330
00:15:59,450 --> 00:16:07,640
<font color="#E5E5E5">pin then that despite ship physically</font>

331
00:16:03,710 --> 00:16:09,860
protection<font color="#E5E5E5"> that region making just that</font>

332
00:16:07,640 --> 00:16:11,600
region read-only so any right

333
00:16:09,860 --> 00:16:14,480
transaction will not go<font color="#CCCCCC"> through by this</font>

334
00:16:11,600 --> 00:16:16,700
<font color="#E5E5E5">methods so if you want to bypass</font><font color="#CCCCCC"> it you</font>

335
00:16:14,480 --> 00:16:19,280
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find a hardware</font><font color="#CCCCCC"> issue or they</font>

336
00:16:16,700 --> 00:16:21,320
assert the desert<font color="#CCCCCC"> this pin</font><font color="#E5E5E5"> and then you</font>

337
00:16:19,280 --> 00:16:24,829
will have the<font color="#E5E5E5"> full access that's the</font>

338
00:16:21,320 --> 00:16:29,030
basic<font color="#E5E5E5"> metal how the Corp the</font><font color="#CCCCCC"> Chromebook</font>

339
00:16:24,830 --> 00:16:32,060
system protecting the read-only<font color="#E5E5E5"> section</font>

340
00:16:29,030 --> 00:16:35,569
in a<font color="#E5E5E5"> spied ship which is</font><font color="#CCCCCC"> a root</font><font color="#E5E5E5"> of trust</font>

341
00:16:32,060 --> 00:16:38,660
to entire boot flow<font color="#E5E5E5"> and basically in</font>

342
00:16:35,570 --> 00:16:43,490
every<font color="#CCCCCC"> Chromebook there</font><font color="#E5E5E5"> is a screw which</font>

343
00:16:38,660 --> 00:16:47,230
is a certain<font color="#E5E5E5"> this pin and if you want to</font>

344
00:16:43,490 --> 00:16:49,580
<font color="#CCCCCC">open anti-spy need to unmount</font><font color="#E5E5E5"> the</font>

345
00:16:47,230 --> 00:16:51,860
<font color="#E5E5E5">Chromebook find that screw and</font><font color="#CCCCCC"> screw</font>

346
00:16:49,580 --> 00:16:53,960
<font color="#E5E5E5">that and then when you just</font><font color="#CCCCCC"> sort the pin</font>

347
00:16:51,860 --> 00:16:58,760
then you will have the entire access to

348
00:16:53,960 --> 00:17:01,310
the to the spine but that's them<font color="#E5E5E5"> and</font>

349
00:16:58,760 --> 00:17:04,730
that's the basic methods how this

350
00:17:01,310 --> 00:17:07,730
<font color="#E5E5E5">read-only memory part of them</font><font color="#CCCCCC"> spy chip</font>

351
00:17:04,730 --> 00:17:09,890
implemented in the system<font color="#E5E5E5"> so when you</font>

352
00:17:07,730 --> 00:17:13,880
put your<font color="#CCCCCC"> open toe in a</font><font color="#E5E5E5"> Chromebook now</font>

353
00:17:09,890 --> 00:17:17,270
you can run a flash<font color="#E5E5E5"> ROM or chip sack and</font>

354
00:17:13,880 --> 00:17:21,050
dump entire<font color="#CCCCCC"> spike content and this</font><font color="#E5E5E5"> by</font>

355
00:17:17,270 --> 00:17:24,530
content has then has<font color="#E5E5E5"> some of them blocks</font>

356
00:17:21,050 --> 00:17:26,869
<font color="#E5E5E5">and then after you kind of parse these</font>

357
00:17:24,530 --> 00:17:29,840
blocks<font color="#E5E5E5"> you can figure out which one is</font>

358
00:17:26,869 --> 00:17:31,959
<font color="#E5E5E5">read-only like the the this part is</font>

359
00:17:29,840 --> 00:17:35,240
specifically read-only

360
00:17:31,960 --> 00:17:37,910
memory which include<font color="#CCCCCC"> gbb is a google</font>

361
00:17:35,240 --> 00:17:40,760
boot<font color="#E5E5E5"> block and then configuration memory</font>

362
00:17:37,910 --> 00:17:42,500
layout<font color="#CCCCCC"> and so on so this memory you</font>

363
00:17:40,760 --> 00:17:44,770
cannot modify<font color="#E5E5E5"> it but you can read it</font><font color="#CCCCCC"> and</font>

364
00:17:42,500 --> 00:17:47,180
you can<font color="#E5E5E5"> analyze it to verify like</font><font color="#CCCCCC"> okay</font>

365
00:17:44,770 --> 00:17:47,810
<font color="#CCCCCC">how</font><font color="#E5E5E5"> does it relate it to open source</font>

366
00:17:47,180 --> 00:17:49,880
<font color="#E5E5E5">version</font>

367
00:17:47,810 --> 00:17:52,460
what kind of<font color="#E5E5E5"> Chromebook was installed</font>

368
00:17:49,880 --> 00:17:54,380
<font color="#CCCCCC">here is it</font><font color="#E5E5E5"> following all</font><font color="#CCCCCC"> of the stages</font>

369
00:17:52,460 --> 00:17:56,240
as<font color="#E5E5E5"> it's supposed</font><font color="#CCCCCC"> to be and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> on so you</font>

370
00:17:54,380 --> 00:17:59,090
can verify the entire boot sequence from

371
00:17:56,240 --> 00:18:00,590
here<font color="#E5E5E5"> and also you can check the spy</font>

372
00:17:59,090 --> 00:18:03,199
descriptor to see what kind<font color="#E5E5E5"> of</font>

373
00:18:00,590 --> 00:18:04,639
protection<font color="#E5E5E5"> spy descriptor has and it</font>

374
00:18:03,200 --> 00:18:06,980
doesn't really<font color="#E5E5E5"> important because it has</font>

375
00:18:04,640 --> 00:18:08,890
<font color="#CCCCCC">physical protection but it still give</font>

376
00:18:06,980 --> 00:18:12,110
you some<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> the system</font>

377
00:18:08,890 --> 00:18:16,070
then<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> dump and see all of the</font>

378
00:18:12,110 --> 00:18:21,020
<font color="#CCCCCC">readwrite region including the Vav</font>

379
00:18:16,070 --> 00:18:23,090
blocker from the<font color="#CCCCCC"> block AV blog be all of</font>

380
00:18:21,020 --> 00:18:25,790
the structure and then after you decode

381
00:18:23,090 --> 00:18:28,310
all of that you may be able to<font color="#E5E5E5"> find the</font>

382
00:18:25,790 --> 00:18:30,560
SMI handlers and all of the runtime

383
00:18:28,310 --> 00:18:33,320
<font color="#CCCCCC">components</font><font color="#E5E5E5"> which is necessary to analyze</font>

384
00:18:30,560 --> 00:18:36,320
<font color="#E5E5E5">for understand the the core the core</font>

385
00:18:33,320 --> 00:18:39,530
<font color="#CCCCCC">boot in the system</font>

386
00:18:36,320 --> 00:18:43,370
you<font color="#E5E5E5"> can load this in</font><font color="#CCCCCC"> Ida and or and make</font>

387
00:18:39,530 --> 00:18:45,440
an analysis and much<font color="#E5E5E5"> deeper so I was</font>

388
00:18:43,370 --> 00:18:48,020
explaining a lot<font color="#E5E5E5"> about the boot flow and</font>

389
00:18:45,440 --> 00:18:50,150
the component of the chrome the the core

390
00:18:48,020 --> 00:18:52,610
boot and so on but what happened at

391
00:18:50,150 --> 00:18:57,320
<font color="#E5E5E5">runtime after all of this boot flow is</font>

392
00:18:52,610 --> 00:19:00,439
done at runtime<font color="#CCCCCC"> the system has some</font>

393
00:18:57,320 --> 00:19:04,429
similar vector attacks as<font color="#CCCCCC"> ufi basic</font>

394
00:19:00,440 --> 00:19:07,370
biases<font color="#CCCCCC"> because it has</font><font color="#E5E5E5"> a semi mode</font><font color="#CCCCCC"> as you</font>

395
00:19:04,430 --> 00:19:08,990
<font color="#CCCCCC">know like there isn't rearing zero and</font>

396
00:19:07,370 --> 00:19:11,540
<font color="#CCCCCC">SMM and you can make a privilege</font>

397
00:19:08,990 --> 00:19:14,810
<font color="#E5E5E5">escalation from the mean 0 to the SMM</font>

398
00:19:11,540 --> 00:19:17,899
and install some backdoor<font color="#E5E5E5"> which will</font>

399
00:19:14,810 --> 00:19:22,250
allow<font color="#E5E5E5"> to accelerate data and send the</font>

400
00:19:17,900 --> 00:19:24,650
<font color="#E5E5E5">data and so</font><font color="#CCCCCC"> on so at one time the core</font>

401
00:19:22,250 --> 00:19:26,420
boot has<font color="#CCCCCC"> SMM</font><font color="#E5E5E5"> and if it has this</font>

402
00:19:24,650 --> 00:19:29,180
amendment should protected<font color="#E5E5E5"> properly and</font>

403
00:19:26,420 --> 00:19:31,670
all of the<font color="#CCCCCC"> implementation of SMM should</font>

404
00:19:29,180 --> 00:19:34,190
be done without issues<font color="#E5E5E5"> because if there</font>

405
00:19:31,670 --> 00:19:37,400
<font color="#CCCCCC">is any vulnerabilities there it can</font><font color="#E5E5E5"> be</font>

406
00:19:34,190 --> 00:19:40,520
exploited<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I will go through some</font><font color="#CCCCCC"> of</font>

407
00:19:37,400 --> 00:19:42,520
the<font color="#CCCCCC"> vulnerabilities which will</font><font color="#E5E5E5"> disclose</font>

408
00:19:40,520 --> 00:19:47,050
<font color="#CCCCCC">that this this</font><font color="#E5E5E5"> year</font>

409
00:19:42,520 --> 00:19:49,389
on which we disclose it this year<font color="#E5E5E5"> this</font>

410
00:19:47,050 --> 00:19:51,250
this<font color="#CCCCCC"> concept of the</font><font color="#E5E5E5"> CERN ability may</font>

411
00:19:49,390 --> 00:19:54,670
applicable to different architecture or

412
00:19:51,250 --> 00:20:01,420
different from<font color="#CCCCCC"> one let me</font><font color="#E5E5E5"> let me just</font>

413
00:19:54,670 --> 00:20:04,440
<font color="#E5E5E5">explain it a bit so then normal not but</font>

414
00:20:01,420 --> 00:20:07,840
normally when you have<font color="#E5E5E5"> them some device</font>

415
00:20:04,440 --> 00:20:10,150
the the layout of the physical<font color="#E5E5E5"> memory</font>

416
00:20:07,840 --> 00:20:12,550
<font color="#E5E5E5">look like this so you</font><font color="#CCCCCC"> have the operation</font>

417
00:20:10,150 --> 00:20:15,580
<font color="#CCCCCC">system memory</font><font color="#E5E5E5"> you have the SMM and you</font>

418
00:20:12,550 --> 00:20:18,820
have a memory region<font color="#E5E5E5"> any transaction to</font>

419
00:20:15,580 --> 00:20:21,760
the<font color="#E5E5E5"> MMI your region going to the device</font>

420
00:20:18,820 --> 00:20:24,429
directly so that<font color="#CCCCCC"> the memory controller</font>

421
00:20:21,760 --> 00:20:26,140
no<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so this is a memory of the</font>

422
00:20:24,430 --> 00:20:30,280
specific device and I need to send

423
00:20:26,140 --> 00:20:33,190
transaction back to the PCH or to some

424
00:20:30,280 --> 00:20:36,100
other buses<font color="#CCCCCC"> to the device</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the</font>

425
00:20:33,190 --> 00:20:38,080
<font color="#E5E5E5">normal normally what happened</font><font color="#CCCCCC"> and the</font>

426
00:20:36,100 --> 00:20:41,169
<font color="#E5E5E5">others where</font><font color="#CCCCCC"> remember</font><font color="#E5E5E5"> your range should</font>

427
00:20:38,080 --> 00:20:43,510
be<font color="#CCCCCC"> is store it in PCIe config space so</font>

428
00:20:41,170 --> 00:20:46,240
in the PC config space the resumption

429
00:20:43,510 --> 00:20:48,310
which is called a memory bar which<font color="#CCCCCC"> is</font>

430
00:20:46,240 --> 00:20:50,740
<font color="#CCCCCC">contained the</font><font color="#E5E5E5"> address of the memory</font>

431
00:20:48,310 --> 00:20:53,500
region for specific device and when you

432
00:20:50,740 --> 00:20:55,210
<font color="#E5E5E5">enumerate all</font><font color="#CCCCCC"> of the PCI devices you can</font>

433
00:20:53,500 --> 00:20:57,190
enumerate and find all of<font color="#E5E5E5"> them on</font><font color="#CCCCCC"> my</font>

434
00:20:55,210 --> 00:20:59,740
your regions for all of them<font color="#E5E5E5"> on your</font>

435
00:20:57,190 --> 00:21:03,180
devices for all<font color="#CCCCCC"> of the PC devices and</font>

436
00:20:59,740 --> 00:21:05,500
then see where they are where it<font color="#E5E5E5"> is</font>

437
00:21:03,180 --> 00:21:08,650
everything everything is going really

438
00:21:05,500 --> 00:21:10,840
well<font color="#CCCCCC"> until someone is not relocating</font>

439
00:21:08,650 --> 00:21:14,140
this<font color="#CCCCCC"> entire bar</font><font color="#E5E5E5"> because some of them are</font>

440
00:21:10,840 --> 00:21:16,929
<font color="#CCCCCC">Maya bar is not locked</font><font color="#E5E5E5"> they can be they</font>

441
00:21:14,140 --> 00:21:18,600
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> reallocated</font><font color="#CCCCCC"> at runtime from</font><font color="#E5E5E5"> the</font>

442
00:21:16,930 --> 00:21:21,130
operation<font color="#E5E5E5"> system</font><font color="#CCCCCC"> of an array or</font>

443
00:21:18,600 --> 00:21:23,830
<font color="#E5E5E5">malicious driver and this malicious</font>

444
00:21:21,130 --> 00:21:28,420
driver may relocate the<font color="#CCCCCC"> MMO</font><font color="#E5E5E5"> bar and</font>

445
00:21:23,830 --> 00:21:30,879
overlap<font color="#CCCCCC"> it with SMM and then after it</font>

446
00:21:28,420 --> 00:21:32,050
overlaps with a sermon and device<font color="#E5E5E5"> and</font>

447
00:21:30,880 --> 00:21:34,630
transaction it will not go through

448
00:21:32,050 --> 00:21:37,389
<font color="#E5E5E5">because there is a protection call it t</font>

449
00:21:34,630 --> 00:21:40,090
<font color="#CCCCCC">sack which is not allowing any DMA</font>

450
00:21:37,390 --> 00:21:44,460
transaction go into the<font color="#CCCCCC"> SML memory but</font>

451
00:21:40,090 --> 00:21:47,560
that<font color="#CCCCCC"> some of the sm is using the bars</font>

452
00:21:44,460 --> 00:21:50,230
inside the<font color="#CCCCCC"> Mon code so basically if you</font>

453
00:21:47,560 --> 00:21:53,169
<font color="#E5E5E5">overlap</font><font color="#CCCCCC"> in the MMI your bar with SMM and</font>

454
00:21:50,230 --> 00:21:55,150
trigger some of<font color="#E5E5E5"> the specific</font><font color="#CCCCCC"> sm eyes SMI</font>

455
00:21:53,170 --> 00:21:57,910
<font color="#CCCCCC">is not checking that</font><font color="#E5E5E5"> animal</font>

456
00:21:55,150 --> 00:21:59,590
was relegated with<font color="#E5E5E5"> SM</font><font color="#CCCCCC"> ROM</font><font color="#E5E5E5"> and then they</font>

457
00:21:57,910 --> 00:22:02,320
just can simply<font color="#E5E5E5"> read and write from</font>

458
00:21:59,590 --> 00:22:05,500
<font color="#E5E5E5">there</font><font color="#CCCCCC"> and and there is no protection</font>

459
00:22:02,320 --> 00:22:09,159
from this type of access<font color="#CCCCCC"> what's supposed</font>

460
00:22:05,500 --> 00:22:11,950
to<font color="#CCCCCC"> be is that SM M cones should check</font>

461
00:22:09,160 --> 00:22:15,370
that<font color="#E5E5E5"> after</font><font color="#CCCCCC"> it read em mio bar to check</font>

462
00:22:11,950 --> 00:22:18,480
<font color="#E5E5E5">okay where is the address located and in</font>

463
00:22:15,370 --> 00:22:21,040
does<font color="#E5E5E5"> it overlaps with</font><font color="#CCCCCC"> SM on or</font><font color="#E5E5E5"> not so</font>

464
00:22:18,480 --> 00:22:23,020
why I mentioned that this type of attack

465
00:22:21,040 --> 00:22:25,300
<font color="#CCCCCC">is may applicable for other type of</font>

466
00:22:23,020 --> 00:22:27,040
firmer or<font color="#E5E5E5"> other architecture because</font>

467
00:22:25,300 --> 00:22:29,770
<font color="#CCCCCC">basically every time</font><font color="#E5E5E5"> when you have a</font>

468
00:22:27,040 --> 00:22:32,200
relocatable memory region and you<font color="#CCCCCC"> have</font>

469
00:22:29,770 --> 00:22:34,300
<font color="#CCCCCC">different privilege level you always can</font>

470
00:22:32,200 --> 00:22:37,090
overlap it<font color="#CCCCCC"> with small privilege level</font>

471
00:22:34,300 --> 00:22:40,120
and see how does<font color="#E5E5E5"> memory manager manage</font>

472
00:22:37,090 --> 00:22:43,178
<font color="#E5E5E5">this or how the</font><font color="#CCCCCC"> swimmer manage this so</font>

473
00:22:40,120 --> 00:22:46,120
we found this type<font color="#CCCCCC"> of issues</font><font color="#E5E5E5"> and then</font>

474
00:22:43,179 --> 00:22:49,059
the multiple instances was<font color="#E5E5E5"> existed in</font>

475
00:22:46,120 --> 00:22:51,399
<font color="#CCCCCC">ufi</font><font color="#E5E5E5"> basic biases nowadays the many of</font>

476
00:22:49,059 --> 00:22:54,550
them was fix it one of the most

477
00:22:51,400 --> 00:22:57,070
<font color="#CCCCCC">dangerous one was a spy bar</font><font color="#E5E5E5"> because that</font>

478
00:22:54,550 --> 00:22:59,409
one<font color="#CCCCCC"> has a lot of controls when you can</font>

479
00:22:57,070 --> 00:23:01,870
<font color="#CCCCCC">override a big portion of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> memory</font>

480
00:22:59,410 --> 00:23:08,040
<font color="#E5E5E5">which allow attacker make more reliable</font>

481
00:23:01,870 --> 00:23:13,120
exploit this example is in a coreboot

482
00:23:08,040 --> 00:23:16,300
<font color="#E5E5E5">coreboot code basically what is what is</font>

483
00:23:13,120 --> 00:23:18,100
<font color="#E5E5E5">happening</font><font color="#CCCCCC"> here is when you increase and</font>

484
00:23:16,300 --> 00:23:20,290
<font color="#E5E5E5">decrease brightness in the screen you</font>

485
00:23:18,100 --> 00:23:23,110
trigger is mine that's the<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the way</font>

486
00:23:20,290 --> 00:23:27,190
<font color="#E5E5E5">typical a use case for the SMI handlers</font>

487
00:23:23,110 --> 00:23:29,469
<font color="#E5E5E5">and typical use case for the</font><font color="#CCCCCC"> SM</font><font color="#E5E5E5"> ramen so</font>

488
00:23:27,190 --> 00:23:31,780
when you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement some of the</font>

489
00:23:29,470 --> 00:23:35,710
<font color="#E5E5E5">harder functionality and communicate</font>

490
00:23:31,780 --> 00:23:37,809
back to the<font color="#E5E5E5"> person system they the the</font>

491
00:23:35,710 --> 00:23:39,760
SMM is perfect location to<font color="#E5E5E5"> implement</font>

492
00:23:37,809 --> 00:23:41,530
that<font color="#E5E5E5"> so every time when</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> decrease</font>

493
00:23:39,760 --> 00:23:44,170
increase<font color="#E5E5E5"> brightness the this is my</font>

494
00:23:41,530 --> 00:23:47,950
<font color="#E5E5E5">gender</font><font color="#CCCCCC"> is trillion and it writing to</font>

495
00:23:44,170 --> 00:23:50,590
specific it increasing specific<font color="#CCCCCC"> offset</font>

496
00:23:47,950 --> 00:23:52,510
from some of the<font color="#E5E5E5"> enemy</font><font color="#CCCCCC"> you bar and when</font>

497
00:23:50,590 --> 00:23:55,270
it<font color="#E5E5E5"> increasing this value basically</font>

498
00:23:52,510 --> 00:23:59,440
<font color="#CCCCCC">attacker may control it and change</font><font color="#E5E5E5"> the</font>

499
00:23:55,270 --> 00:24:01,270
value of<font color="#E5E5E5"> some specific register then</font>

500
00:23:59,440 --> 00:24:03,790
when when the attacker will<font color="#CCCCCC"> reallocate</font>

501
00:24:01,270 --> 00:24:06,129
<font color="#CCCCCC">at a different location</font><font color="#E5E5E5"> he has limited</font>

502
00:24:03,790 --> 00:24:09,700
<font color="#CCCCCC">write primitive when he</font><font color="#E5E5E5"> increasing them</font>

503
00:24:06,130 --> 00:24:12,519
<font color="#CCCCCC">some of the value by 10k</font>

504
00:24:09,700 --> 00:24:14,499
the biggest<font color="#E5E5E5"> problem physics with</font>

505
00:24:12,519 --> 00:24:17,679
<font color="#CCCCCC">exploits in the</font><font color="#E5E5E5"> memorial bar issue is</font>

506
00:24:14,499 --> 00:24:21,419
that<font color="#CCCCCC"> a memory bar should be aligned it</font>

507
00:24:17,679 --> 00:24:25,090
and what this<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> is demo</font><font color="#E5E5E5"> Mayo</font>

508
00:24:21,419 --> 00:24:27,879
if the mama arranged size for example

509
00:24:25,090 --> 00:24:30,428
<font color="#E5E5E5">for keying the mama your bar should</font><font color="#CCCCCC"> be</font>

510
00:24:27,879 --> 00:24:33,039
<font color="#CCCCCC">aligned</font><font color="#E5E5E5"> on this size and because of that</font>

511
00:24:30,429 --> 00:24:35,740
you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have the read primitive for</font>

512
00:24:33,039 --> 00:24:38,169
any random<font color="#E5E5E5"> others you can</font><font color="#CCCCCC"> new cue you</font>

513
00:24:35,740 --> 00:24:41,289
have just granular for each for example

514
00:24:38,169 --> 00:24:43,299
<font color="#E5E5E5">for</font><font color="#CCCCCC"> K rights</font><font color="#E5E5E5"> it still allows you to try</font>

515
00:24:41,289 --> 00:24:46,029
to find some of<font color="#CCCCCC"> the location when you</font>

516
00:24:43,299 --> 00:24:49,899
can mess<font color="#CCCCCC"> around with the instruction</font><font color="#E5E5E5"> or</font>

517
00:24:46,029 --> 00:24:52,269
with some tables or risk if you catch

518
00:24:49,899 --> 00:24:57,330
some address that that will be

519
00:24:52,269 --> 00:25:02,200
exploitable<font color="#E5E5E5"> or yes</font>

520
00:24:57,330 --> 00:25:06,639
so that was their idea about how we<font color="#E5E5E5"> can</font>

521
00:25:02,200 --> 00:25:09,249
<font color="#E5E5E5">apply them methods which we which we</font>

522
00:25:06,639 --> 00:25:13,209
<font color="#E5E5E5">just</font><font color="#CCCCCC"> disclosed</font><font color="#E5E5E5"> it in</font><font color="#CCCCCC"> the FI base advice</font>

523
00:25:09,249 --> 00:25:16,240
<font color="#CCCCCC">though to coreboot biases I will explain</font>

524
00:25:13,210 --> 00:25:23,350
<font color="#E5E5E5">some new one which is</font><font color="#CCCCCC"> just applicable</font>

525
00:25:16,240 --> 00:25:30,249
<font color="#E5E5E5">for the core boot from so it called a</font>

526
00:25:23,350 --> 00:25:33,219
CPI<font color="#CCCCCC"> a G and es pointer issue when when I</font>

527
00:25:30,249 --> 00:25:36,789
was<font color="#CCCCCC"> mentioning</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> s mm and that s mm</font>

528
00:25:33,220 --> 00:25:39,730
is is used by the<font color="#E5E5E5"> coreboot</font><font color="#CCCCCC"> I didn't</font>

529
00:25:36,789 --> 00:25:42,129
mention<font color="#E5E5E5"> how does it use it so in you</font>

530
00:25:39,730 --> 00:25:44,679
five<font color="#E5E5E5"> basic biases</font><font color="#CCCCCC"> there is a bunch of</font>

531
00:25:42,129 --> 00:25:47,129
SMI handlers and although that structure

532
00:25:44,679 --> 00:25:52,619
how does<font color="#CCCCCC"> this handless enumerated is</font>

533
00:25:47,129 --> 00:25:55,689
define it in the<font color="#CCCCCC"> SMM dispatch manager</font>

534
00:25:52,619 --> 00:25:57,428
functionality<font color="#E5E5E5"> and it has default handler</font>

535
00:25:55,690 --> 00:25:59,049
which will numerate all of the handlers

536
00:25:57,429 --> 00:26:02,559
and so on so forth

537
00:25:59,049 --> 00:26:05,769
in coreboot firmer<font color="#E5E5E5"> it has almost similar</font>

538
00:26:02,559 --> 00:26:08,980
structure except in it doesn't<font color="#CCCCCC"> have that</font>

539
00:26:05,769 --> 00:26:13,299
<font color="#E5E5E5">much SMI handlers so as you see there</font><font color="#CCCCCC"> is</font>

540
00:26:08,980 --> 00:26:15,549
kind of<font color="#CCCCCC"> 10 SMI handlers and that's it in</font>

541
00:26:13,299 --> 00:26:18,279
the UFO base<font color="#CCCCCC"> advise it can be hundreds</font>

542
00:26:15,549 --> 00:26:20,139
of<font color="#E5E5E5"> them</font><font color="#CCCCCC"> so what happened when when</font>

543
00:26:18,279 --> 00:26:21,940
there's my hand rest<font color="#E5E5E5"> regen they started</font>

544
00:26:20,139 --> 00:26:24,760
with<font color="#CCCCCC"> flow handler start</font>

545
00:26:21,940 --> 00:26:26,890
which is<font color="#E5E5E5"> set in</font><font color="#CCCCCC"> the log and then we will</font>

546
00:26:24,760 --> 00:26:29,560
numerate all of the<font color="#CCCCCC"> cpu SMI handlers</font>

547
00:26:26,890 --> 00:26:32,250
<font color="#E5E5E5">after</font><font color="#CCCCCC"> it finishes all of the</font><font color="#E5E5E5"> cpu SMI</font>

548
00:26:29,560 --> 00:26:36,070
handlers it will check what<font color="#CCCCCC"> kind of</font>

549
00:26:32,250 --> 00:26:39,820
<font color="#E5E5E5">Northbridge SMI handlers it has then for</font>

550
00:26:36,070 --> 00:26:42,040
example<font color="#E5E5E5"> graphic SMI handlers and then</font>

551
00:26:39,820 --> 00:26:43,710
<font color="#CCCCCC">we'll go to Southbridge and overhead</font><font color="#E5E5E5"> all</font>

552
00:26:42,040 --> 00:26:46,690
of the<font color="#CCCCCC"> sales pitches to my handlers</font>

553
00:26:43,710 --> 00:26:49,090
including the advanced power<font color="#E5E5E5"> management</font>

554
00:26:46,690 --> 00:26:51,910
controller including memory controller

555
00:26:49,090 --> 00:26:54,010
included periodic is to my sleep SMI<font color="#E5E5E5"> and</font>

556
00:26:51,910 --> 00:26:58,270
so on so<font color="#E5E5E5"> that's the list of the semis</font>

557
00:26:54,010 --> 00:27:00,850
and<font color="#CCCCCC"> it checks</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> which one</font><font color="#E5E5E5"> is knit you</font>

558
00:26:58,270 --> 00:27:04,570
one is which one<font color="#E5E5E5"> or a person system on</font>

559
00:27:00,850 --> 00:27:07,060
<font color="#CCCCCC">hardware won't execute but there should</font>

560
00:27:04,570 --> 00:27:10,689
be<font color="#E5E5E5"> mechanism how to communicate from the</font>

561
00:27:07,060 --> 00:27:13,960
<font color="#CCCCCC">operation system from a person system to</font>

562
00:27:10,690 --> 00:27:15,700
the SMM and in device advice various

563
00:27:13,960 --> 00:27:18,250
combat<font color="#E5E5E5"> fair and there is</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> other</font>

564
00:27:15,700 --> 00:27:20,890
methods in coreboot<font color="#CCCCCC"> base advice there is</font>

565
00:27:18,250 --> 00:27:23,890
this communication<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> done from a</font>

566
00:27:20,890 --> 00:27:27,160
global<font color="#CCCCCC"> India's global envious and</font>

567
00:27:23,890 --> 00:27:31,300
<font color="#CCCCCC">novelty storage is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> strategy which is</font>

568
00:27:27,160 --> 00:27:31,810
used in both sides from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> operating</font>

569
00:27:31,300 --> 00:27:34,300
<font color="#E5E5E5">system</font>

570
00:27:31,810 --> 00:27:38,710
<font color="#CCCCCC">NSA meant to pass some data between this</font>

571
00:27:34,300 --> 00:27:41,050
privilege level so as you as you as<font color="#E5E5E5"> you</font>

572
00:27:38,710 --> 00:27:43,990
notice<font color="#E5E5E5"> because this is the input</font><font color="#CCCCCC"> buffer</font>

573
00:27:41,050 --> 00:27:49,710
for the assignment can be attack vector

574
00:27:43,990 --> 00:27:54,190
for the SMS<font color="#CCCCCC"> mm</font><font color="#E5E5E5"> code in in coreboot so</font>

575
00:27:49,710 --> 00:27:56,830
this<font color="#CCCCCC"> gnv s contains some of</font><font color="#E5E5E5"> the field in</font>

576
00:27:54,190 --> 00:28:00,580
<font color="#E5E5E5">Kirkland including the SMM interface</font>

577
00:27:56,830 --> 00:28:01,720
buffer<font color="#CCCCCC"> a sea lochs thermal data fan date</font>

578
00:28:00,580 --> 00:28:08,439
even

579
00:28:01,720 --> 00:28:12,160
<font color="#CCCCCC">chrome</font><font color="#E5E5E5"> OS v boot data</font><font color="#CCCCCC"> this the pointer</font>

580
00:28:08,440 --> 00:28:14,440
to<font color="#E5E5E5"> the structure can</font><font color="#CCCCCC"> be can be</font><font color="#E5E5E5"> located</font>

581
00:28:12,160 --> 00:28:19,210
in two different<font color="#CCCCCC"> locations one location</font>

582
00:28:14,440 --> 00:28:24,340
<font color="#E5E5E5">is a CPI table the</font><font color="#CCCCCC"> SDG table</font><font color="#E5E5E5"> may contain</font>

583
00:28:19,210 --> 00:28:27,790
the pointer to destruction<font color="#CCCCCC"> and if the</font>

584
00:28:24,340 --> 00:28:31,149
<font color="#E5E5E5">either it is implementation specific so</font>

585
00:28:27,790 --> 00:28:33,310
it may<font color="#E5E5E5"> be done just by</font><font color="#CCCCCC"> a CPI table and</font>

586
00:28:31,150 --> 00:28:35,140
can be done by some other methods and I

587
00:28:33,310 --> 00:28:36,080
will explain what<font color="#E5E5E5"> this method is but</font>

588
00:28:35,140 --> 00:28:38,360
basically<font color="#CCCCCC"> the main</font>

589
00:28:36,080 --> 00:28:43,370
you have<font color="#E5E5E5"> point of the distraction that's</font>

590
00:28:38,360 --> 00:28:46,039
the main idea<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the structure how to</font>

591
00:28:43,370 --> 00:28:49,070
find the structure<font color="#CCCCCC"> when we run</font><font color="#E5E5E5"> the core</font>

592
00:28:46,039 --> 00:28:52,070
info tool in a coreboot we can basically

593
00:28:49,070 --> 00:28:55,189
figure<font color="#E5E5E5"> out all of the tables system</font>

594
00:28:52,070 --> 00:28:59,299
tables the<font color="#CCCCCC"> tables which is coreboot use</font>

595
00:28:55,190 --> 00:29:00,740
it<font color="#E5E5E5"> during the boot time and back when it</font>

596
00:28:59,299 --> 00:29:05,779
communicated to the operation system

597
00:29:00,740 --> 00:29:09,260
<font color="#CCCCCC">from the SMI</font><font color="#E5E5E5"> mode so after we done the</font>

598
00:29:05,779 --> 00:29:14,080
table with address BFF<font color="#E5E5E5"> 1a we can find</font>

599
00:29:09,260 --> 00:29:17,269
the CPI tables and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> CBMM comm is a</font>

600
00:29:14,080 --> 00:29:20,000
specific storage<font color="#E5E5E5"> which core would use to</font>

601
00:29:17,269 --> 00:29:24,380
store some sensitive data system

602
00:29:20,000 --> 00:29:26,720
sensitive data like some pointers for

603
00:29:24,380 --> 00:29:30,049
some structures<font color="#E5E5E5"> sleep state</font>

604
00:29:26,720 --> 00:29:33,590
configuration<font color="#CCCCCC"> and so on so</font><font color="#E5E5E5"> forth so as</font>

605
00:29:30,049 --> 00:29:36,799
we see here with<font color="#E5E5E5"> having that with</font>

606
00:29:33,590 --> 00:29:38,720
<font color="#E5E5E5">reallocating the Aegean vias in CBMM</font>

607
00:29:36,799 --> 00:29:43,399
memory<font color="#CCCCCC"> sociable main memory contains</font>

608
00:29:38,720 --> 00:29:46,130
some in<font color="#E5E5E5"> English in</font><font color="#CCCCCC"> comm memory manager</font>

609
00:29:43,399 --> 00:29:47,570
<font color="#CCCCCC">somewhere distraction</font><font color="#E5E5E5"> then then we</font>

610
00:29:46,130 --> 00:29:50,960
create<font color="#CCCCCC"> the structure the field of</font>

611
00:29:47,570 --> 00:29:54,408
distraction then<font color="#E5E5E5"> next one is we create a</font>

612
00:29:50,960 --> 00:29:56,450
pointer to<font color="#CCCCCC"> that G&V abstraction and</font>

613
00:29:54,409 --> 00:30:02,240
store<font color="#CCCCCC"> that pointer back to the same</font>

614
00:29:56,450 --> 00:30:04,100
storage so<font color="#E5E5E5"> CBMM one of them one of the</font>

615
00:30:02,240 --> 00:30:05,870
<font color="#E5E5E5">instruction CBMM will contain that</font>

616
00:30:04,100 --> 00:30:07,879
pointer and then we create another

617
00:30:05,870 --> 00:30:13,178
<font color="#E5E5E5">pointer in a</font><font color="#CCCCCC"> CPI table for this</font>

618
00:30:07,880 --> 00:30:16,760
structure<font color="#CCCCCC"> so to find this to find</font><font color="#E5E5E5"> this</font>

619
00:30:13,179 --> 00:30:19,279
structure we<font color="#E5E5E5"> can just done the CPI table</font>

620
00:30:16,760 --> 00:30:23,059
<font color="#E5E5E5">decode it with Excel utility find the</font>

621
00:30:19,279 --> 00:30:27,320
address of the NVC a variable and<font color="#E5E5E5"> then</font>

622
00:30:23,059 --> 00:30:28,879
we<font color="#E5E5E5"> can down the stretch from</font><font color="#CCCCCC"> there from</font>

623
00:30:27,320 --> 00:30:31,039
<font color="#E5E5E5">different perspective as</font><font color="#CCCCCC"> already</font>

624
00:30:28,880 --> 00:30:33,620
mentioned that there is<font color="#E5E5E5"> another pointer</font>

625
00:30:31,039 --> 00:30:36,200
which is<font color="#E5E5E5"> storing in</font><font color="#CCCCCC"> the same storage</font>

626
00:30:33,620 --> 00:30:38,899
CBMM storage and this<font color="#E5E5E5"> is in memory</font>

627
00:30:36,200 --> 00:30:40,519
database<font color="#E5E5E5"> that name of the storage went</font>

628
00:30:38,899 --> 00:30:43,250
that pointer to the<font color="#CCCCCC"> structured store it</font>

629
00:30:40,519 --> 00:30:46,330
as well so<font color="#CCCCCC"> then we can find</font><font color="#E5E5E5"> that pointer</font>

630
00:30:43,250 --> 00:30:46,330
from<font color="#E5E5E5"> that structure as well</font>

631
00:30:46,759 --> 00:30:56,979
<font color="#CCCCCC">as we see</font><font color="#E5E5E5"> here there is them I am</font><font color="#CCCCCC"> di MD</font>

632
00:30:52,659 --> 00:31:00,139
storage<font color="#CCCCCC"> IG which is given us</font><font color="#E5E5E5"> a gmds</font>

633
00:30:56,979 --> 00:31:02,989
value and we see the<font color="#E5E5E5"> same are the offset</font>

634
00:31:00,139 --> 00:31:05,478
<font color="#E5E5E5">there is all set to</font><font color="#CCCCCC"> the same address</font><font color="#E5E5E5"> as</font>

635
00:31:02,989 --> 00:31:07,549
we saw it previously<font color="#CCCCCC"> so that's the main</font>

636
00:31:05,479 --> 00:31:09,559
core<font color="#CCCCCC"> of the problem that which I will</font>

637
00:31:07,549 --> 00:31:12,699
<font color="#CCCCCC">explain later but</font><font color="#E5E5E5"> the main idea</font><font color="#CCCCCC"> is there</font>

638
00:31:09,559 --> 00:31:15,889
is<font color="#E5E5E5"> a pointer to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> structure which is</font>

639
00:31:12,699 --> 00:31:18,799
which<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> regular memory which is not</font>

640
00:31:15,889 --> 00:31:23,029
protecting and accessible<font color="#E5E5E5"> from any ring</font>

641
00:31:18,799 --> 00:31:27,349
<font color="#E5E5E5">zero attacker</font><font color="#CCCCCC"> and then what happened</font>

642
00:31:23,029 --> 00:31:32,690
next<font color="#CCCCCC"> a little bit before that</font><font color="#E5E5E5"> so why we</font>

643
00:31:27,349 --> 00:31:35,149
<font color="#E5E5E5">interested in G NDS</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> engineers</font><font color="#CCCCCC"> there</font>

644
00:31:32,690 --> 00:31:38,959
allocated during<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of them earlier</font>

645
00:31:35,149 --> 00:31:41,418
boot stages and the pointer<font color="#E5E5E5"> of that</font>

646
00:31:38,959 --> 00:31:45,529
<font color="#E5E5E5">point which I mentioned already will be</font>

647
00:31:41,419 --> 00:31:51,259
used later<font color="#E5E5E5"> in some in</font><font color="#CCCCCC"> SMM code to some</font>

648
00:31:45,529 --> 00:31:54,169
of their<font color="#E5E5E5"> read/write primitives</font><font color="#CCCCCC"> so let's</font>

649
00:31:51,259 --> 00:31:56,869
see<font color="#E5E5E5"> that code a little bit so when we</font>

650
00:31:54,169 --> 00:31:59,149
have when<font color="#E5E5E5"> the system go to sleep and</font>

651
00:31:56,869 --> 00:32:01,218
waking up<font color="#E5E5E5"> system need</font><font color="#CCCCCC"> to restore</font><font color="#E5E5E5"> the</font>

652
00:31:59,149 --> 00:32:02,869
state and when the<font color="#E5E5E5"> system is restoring</font>

653
00:32:01,219 --> 00:32:04,609
the<font color="#E5E5E5"> state it's supposed to initialize</font>

654
00:32:02,869 --> 00:32:06,948
all<font color="#E5E5E5"> necessary registers and all of the</font>

655
00:32:04,609 --> 00:32:09,189
necessary structures including<font color="#E5E5E5"> a CPI</font>

656
00:32:06,949 --> 00:32:12,589
tables and all of<font color="#CCCCCC"> the necessary</font>

657
00:32:09,190 --> 00:32:17,719
<font color="#E5E5E5">structures for that so in this specific</font>

658
00:32:12,589 --> 00:32:20,569
<font color="#E5E5E5">example we see that during the s3 resume</font>

659
00:32:17,719 --> 00:32:23,239
<font color="#E5E5E5">it called the</font><font color="#CCCCCC"> a CPA resume flow which</font>

660
00:32:20,569 --> 00:32:25,789
which basically<font color="#CCCCCC"> run in the</font><font color="#E5E5E5"> function a</font>

661
00:32:23,239 --> 00:32:29,659
CPA resume which is right which is try

662
00:32:25,789 --> 00:32:32,869
to find<font color="#CCCCCC"> their pointer to</font><font color="#E5E5E5"> GN vs structure</font>

663
00:32:29,659 --> 00:32:37,579
in CB memory and then it passes<font color="#E5E5E5"> this</font>

664
00:32:32,869 --> 00:32:41,238
pointer to estimate set up structures

665
00:32:37,579 --> 00:32:45,918
<font color="#E5E5E5">function and then it just called with</font>

666
00:32:41,239 --> 00:32:48,799
that vector and<font color="#E5E5E5"> then this S&M set of</font>

667
00:32:45,919 --> 00:32:52,459
structure just triggering SMI<font color="#E5E5E5"> and</font>

668
00:32:48,799 --> 00:32:55,609
passing this pointer<font color="#CCCCCC"> genius pointer to</font>

669
00:32:52,459 --> 00:32:58,489
the SML<font color="#E5E5E5"> and then in the right side we</font>

670
00:32:55,609 --> 00:33:00,020
<font color="#CCCCCC">see that this pointer is reading in a</font>

671
00:32:58,489 --> 00:33:03,080
cement flow from the

672
00:33:00,020 --> 00:33:05,870
from the<font color="#CCCCCC"> cpu state from</font><font color="#E5E5E5"> the register FBX</font>

673
00:33:03,080 --> 00:33:09,830
<font color="#CCCCCC">as it was</font><font color="#E5E5E5"> pass it through in the left</font>

674
00:33:05,870 --> 00:33:12,620
side of the<font color="#E5E5E5"> picture and then we have</font>

675
00:33:09,830 --> 00:33:15,139
this pointer in<font color="#CCCCCC"> SMM code and this</font>

676
00:33:12,620 --> 00:33:17,178
pointer<font color="#CCCCCC"> is not validated and control it</font>

677
00:33:15,140 --> 00:33:21,140
fully from attacker<font color="#E5E5E5"> and this pointer in</font>

678
00:33:17,179 --> 00:33:22,730
a cement code somewhere<font color="#E5E5E5"> what what</font>

679
00:33:21,140 --> 00:33:24,620
problem we have in here

680
00:33:22,730 --> 00:33:27,170
<font color="#E5E5E5">the problem is that attacker fully</font>

681
00:33:24,620 --> 00:33:29,540
<font color="#E5E5E5">control</font><font color="#CCCCCC"> may control this pointer and</font>

682
00:33:27,170 --> 00:33:32,510
<font color="#CCCCCC">eye-doctor fully controlled all of</font><font color="#E5E5E5"> the</font>

683
00:33:29,540 --> 00:33:34,909
stage<font color="#E5E5E5"> how this pointer should be passing</font>

684
00:33:32,510 --> 00:33:37,730
to this<font color="#E5E5E5"> my handlers because</font><font color="#CCCCCC"> I came</font><font color="#E5E5E5"> a</font>

685
00:33:34,910 --> 00:33:39,650
<font color="#E5E5E5">forced system go to a three attacker may</font>

686
00:33:37,730 --> 00:33:42,470
trigger some offender and<font color="#E5E5E5"> replace the</font>

687
00:33:39,650 --> 00:33:46,070
pointer<font color="#E5E5E5"> and in this case as we see in</font>

688
00:33:42,470 --> 00:33:48,470
this example that attacker may be able

689
00:33:46,070 --> 00:33:52,870
<font color="#CCCCCC">to have the right primitives when he</font>

690
00:33:48,470 --> 00:33:57,760
<font color="#E5E5E5">right to the to the instruction to this</font>

691
00:33:52,870 --> 00:34:01,159
<font color="#CCCCCC">gnv astride shiv is a specific offset</font>

692
00:33:57,760 --> 00:34:05,450
unfortunately<font color="#CCCCCC"> this primitives</font><font color="#E5E5E5"> is not</font>

693
00:34:01,160 --> 00:34:07,910
full primitive it's not arbitrary

694
00:34:05,450 --> 00:34:10,820
<font color="#E5E5E5">primitives it when you control an and</font>

695
00:34:07,910 --> 00:34:12,889
understand value<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> control in</font><font color="#E5E5E5"> the</font>

696
00:34:10,820 --> 00:34:16,129
address here<font color="#CCCCCC"> but you're not</font><font color="#E5E5E5"> controlling</font>

697
00:34:12,889 --> 00:34:19,399
<font color="#CCCCCC">the value and in many cases you you kind</font>

698
00:34:16,129 --> 00:34:21,259
of<font color="#CCCCCC"> have an</font><font color="#E5E5E5"> even precondition as as we</font>

699
00:34:19,399 --> 00:34:24,199
<font color="#CCCCCC">haven't hear</font><font color="#E5E5E5"> that</font>

700
00:34:21,260 --> 00:34:31,700
first of all precondition is<font color="#E5E5E5"> telling</font>

701
00:34:24,199 --> 00:34:34,609
that<font color="#E5E5E5"> it may flip de Voort 32 to 0 0 so</font>

702
00:34:31,699 --> 00:34:36,918
it<font color="#E5E5E5"> will not make any random changes it</font>

703
00:34:34,609 --> 00:34:39,918
will make<font color="#CCCCCC"> judge</font><font color="#E5E5E5"> some specific changes it</font>

704
00:34:36,918 --> 00:34:42,219
is really<font color="#E5E5E5"> limited by but still</font><font color="#CCCCCC"> may be</font>

705
00:34:39,918 --> 00:34:45,259
exploitable<font color="#E5E5E5"> if there is some</font>

706
00:34:42,219 --> 00:34:47,118
configuration register or some offset

707
00:34:45,260 --> 00:34:49,580
<font color="#E5E5E5">storage and some sensitive structure in</font>

708
00:34:47,119 --> 00:34:52,310
<font color="#CCCCCC">SM code which is</font><font color="#E5E5E5"> held high probability</font>

709
00:34:49,580 --> 00:34:56,779
for<font color="#E5E5E5"> example in CPU safe</font><font color="#CCCCCC"> state area or</font>

710
00:34:52,310 --> 00:34:58,310
something<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> so conclude</font>

711
00:34:56,780 --> 00:35:02,090
conclusion about this specific

712
00:34:58,310 --> 00:35:06,950
vulnerability that attacker may control

713
00:35:02,090 --> 00:35:09,560
<font color="#E5E5E5">then that pointer gnv s PT are also</font>

714
00:35:06,950 --> 00:35:12,680
attacker may have the right<font color="#E5E5E5"> limited</font>

715
00:35:09,560 --> 00:35:13,549
right primitive when it<font color="#E5E5E5"> flipped 32 to 0</font>

716
00:35:12,680 --> 00:35:17,629
or 99

717
00:35:13,550 --> 00:35:19,340
zero<font color="#CCCCCC"> this type of issue may not be</font>

718
00:35:17,630 --> 00:35:22,580
applicable<font color="#CCCCCC"> if the system doesn't have a</font>

719
00:35:19,340 --> 00:35:24,940
<font color="#E5E5E5">three boot script or if because this</font>

720
00:35:22,580 --> 00:35:27,650
vulnerability<font color="#E5E5E5"> is implementation-specific</font>

721
00:35:24,940 --> 00:35:32,810
<font color="#CCCCCC">some of the platform may not store the</font>

722
00:35:27,650 --> 00:35:36,590
pointer<font color="#E5E5E5"> or to destruction to the sebum</font>

723
00:35:32,810 --> 00:35:39,740
<font color="#E5E5E5">and memory</font><font color="#CCCCCC"> so some of</font><font color="#E5E5E5"> the system is more</font>

724
00:35:36,590 --> 00:35:42,170
<font color="#CCCCCC">vulnerable than another</font><font color="#E5E5E5"> and specifically</font>

725
00:35:39,740 --> 00:35:43,609
<font color="#E5E5E5">broad walls they may have it winner</font>

726
00:35:42,170 --> 00:35:46,160
religion

727
00:35:43,610 --> 00:35:48,020
what kind<font color="#CCCCCC"> of mitigation</font><font color="#E5E5E5"> we can make so</font>

728
00:35:46,160 --> 00:35:50,450
first of all<font color="#E5E5E5"> all of the pointer which</font>

729
00:35:48,020 --> 00:35:53,300
will take from the<font color="#E5E5E5"> ring zero we should</font>

730
00:35:50,450 --> 00:35:55,640
validate in the cement<font color="#CCCCCC"> code so when we</font>

731
00:35:53,300 --> 00:35:58,670
have when we implement in the<font color="#E5E5E5"> coreboot</font>

732
00:35:55,640 --> 00:36:01,040
bias with the developer should have the

733
00:35:58,670 --> 00:36:03,800
checks<font color="#E5E5E5"> every time when every pointer or</font>

734
00:36:01,040 --> 00:36:07,420
either structure every field<font color="#E5E5E5"> of the</font>

735
00:36:03,800 --> 00:36:11,000
structure should be should<font color="#E5E5E5"> be checked</font>

736
00:36:07,420 --> 00:36:14,390
that it's not overlapping<font color="#E5E5E5"> with sm ram</font>

737
00:36:11,000 --> 00:36:17,270
and the<font color="#E5E5E5"> interestingly that the similar</font>

738
00:36:14,390 --> 00:36:21,140
the<font color="#E5E5E5"> similar vulnerability we disclose it</font>

739
00:36:17,270 --> 00:36:23,780
in<font color="#CCCCCC"> UF i base advices in 2015 when they</font>

740
00:36:21,140 --> 00:36:26,450
demonstrate<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there is similar method</font>

741
00:36:23,780 --> 00:36:29,210
<font color="#CCCCCC">: combat fair which is</font><font color="#E5E5E5"> basically was not</font>

742
00:36:26,450 --> 00:36:31,669
<font color="#CCCCCC">checked by a CMM</font><font color="#E5E5E5"> allow you to overlap</font>

743
00:36:29,210 --> 00:36:33,350
with<font color="#CCCCCC"> xml code and override and make a</font>

744
00:36:31,670 --> 00:36:37,130
<font color="#CCCCCC">privileged escalation from a 0 to the</font>

745
00:36:33,350 --> 00:36:38,960
<font color="#CCCCCC">SMM another way how we can protect</font><font color="#E5E5E5"> from</font>

746
00:36:37,130 --> 00:36:41,960
<font color="#E5E5E5">this type</font><font color="#CCCCCC"> of vulnerability is just</font>

747
00:36:38,960 --> 00:36:45,470
<font color="#E5E5E5">having extra copy of the address for the</font>

748
00:36:41,960 --> 00:36:47,840
<font color="#E5E5E5">G and V s somewhere in decimal because</font>

749
00:36:45,470 --> 00:36:50,419
<font color="#CCCCCC">this is the</font><font color="#E5E5E5"> global structure we can we</font>

750
00:36:47,840 --> 00:36:52,910
can<font color="#CCCCCC"> have a copy</font><font color="#E5E5E5"> somewhere in protected</font>

751
00:36:50,420 --> 00:36:58,460
storage it's not supposed to be

752
00:36:52,910 --> 00:37:00,350
relocatable<font color="#CCCCCC"> then a</font><font color="#E5E5E5"> little bit about SMI</font>

753
00:36:58,460 --> 00:37:02,380
handlers<font color="#CCCCCC"> a little bit more about SMI</font>

754
00:37:00,350 --> 00:37:05,930
handlers<font color="#E5E5E5"> so that was a complicated</font>

755
00:37:02,380 --> 00:37:08,840
vulnerability<font color="#E5E5E5"> when you need to play a</font>

756
00:37:05,930 --> 00:37:11,600
lot with<font color="#CCCCCC"> there</font><font color="#E5E5E5"> the complicated structure</font>

757
00:37:08,840 --> 00:37:12,550
<font color="#E5E5E5">to pass the pointer</font><font color="#CCCCCC"> and then you have</font>

758
00:37:11,600 --> 00:37:16,370
really limited

759
00:37:12,550 --> 00:37:18,620
<font color="#CCCCCC">primitives but what kind of other</font>

760
00:37:16,370 --> 00:37:24,549
<font color="#E5E5E5">vulnerabilities in core both coreboot</font>

761
00:37:18,620 --> 00:37:24,549
may have so

762
00:37:26,870 --> 00:37:34,370
for some of the system<font color="#E5E5E5"> pretty old system</font>

763
00:37:30,220 --> 00:37:38,209
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> a SMI handler which is</font>

764
00:37:34,370 --> 00:37:43,190
responsible<font color="#E5E5E5"> to handle some of</font><font color="#CCCCCC"> the</font>

765
00:37:38,210 --> 00:37:44,620
requests<font color="#E5E5E5"> in in the graphic memory in GPU</font>

766
00:37:43,190 --> 00:37:50,360
and<font color="#CCCCCC"> NBI</font>

767
00:37:44,620 --> 00:37:55,509
registers<font color="#E5E5E5"> and here we see there in this</font>

768
00:37:50,360 --> 00:37:58,460
flow the the SMI handler<font color="#E5E5E5"> region-specific</font>

769
00:37:55,510 --> 00:38:00,470
<font color="#E5E5E5">register and depends on</font><font color="#CCCCCC"> the value of</font><font color="#E5E5E5"> the</font>

770
00:37:58,460 --> 00:38:03,350
register it picking this the different

771
00:38:00,470 --> 00:38:05,299
flow so an attacker basically can

772
00:38:03,350 --> 00:38:07,910
control<font color="#E5E5E5"> that value so that</font><font color="#CCCCCC"> I can may</font>

773
00:38:05,300 --> 00:38:13,100
execute different<font color="#CCCCCC"> flow from this from</font>

774
00:38:07,910 --> 00:38:14,420
this function<font color="#CCCCCC"> so what happening is that</font>

775
00:38:13,100 --> 00:38:18,470
was exactly the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> as I already</font>

776
00:38:14,420 --> 00:38:22,070
mentioned<font color="#CCCCCC"> that when rebel is my friend</font>

777
00:38:18,470 --> 00:38:24,709
<font color="#E5E5E5">reading the MMO bar from the PCI config</font>

778
00:38:22,070 --> 00:38:29,570
space and then<font color="#E5E5E5"> having the right</font>

779
00:38:24,710 --> 00:38:31,430
primitive<font color="#E5E5E5"> back to that MMA</font><font color="#CCCCCC"> yolk bar</font><font color="#E5E5E5"> so</font>

780
00:38:29,570 --> 00:38:33,320
because<font color="#E5E5E5"> the attacker may control this</font>

781
00:38:31,430 --> 00:38:35,089
<font color="#CCCCCC">animal</font><font color="#E5E5E5"> bar it may</font><font color="#CCCCCC"> relocate it to some</font>

782
00:38:33,320 --> 00:38:37,010
different<font color="#E5E5E5"> location and having the right</font>

783
00:38:35,090 --> 00:38:39,680
primitive for example to the<font color="#CCCCCC"> SMM code</font>

784
00:38:37,010 --> 00:38:41,990
again it<font color="#E5E5E5"> has some limitations for the</font>

785
00:38:39,680 --> 00:38:43,940
for<font color="#CCCCCC"> explosive to exploit this</font>

786
00:38:41,990 --> 00:38:46,540
vulnerability<font color="#CCCCCC"> but it's still valuable</font>

787
00:38:43,940 --> 00:38:51,110
vulnerability and specially because the

788
00:38:46,540 --> 00:38:53,600
the it has a magic value<font color="#E5E5E5"> which is well</font>

789
00:38:51,110 --> 00:38:58,370
we<font color="#CCCCCC"> use it to write to that</font><font color="#E5E5E5"> value so it</font>

790
00:38:53,600 --> 00:39:01,940
may corrupt<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ward of some awesome</font>

791
00:38:58,370 --> 00:39:05,450
data in<font color="#CCCCCC"> SMM code which may be useful if</font>

792
00:39:01,940 --> 00:39:07,610
the it<font color="#CCCCCC"> either is there the attacker will</font>

793
00:39:05,450 --> 00:39:11,419
catch the sensitive structure inside

794
00:39:07,610 --> 00:39:14,120
<font color="#CCCCCC">decimal but the same</font><font color="#E5E5E5"> vendor has another</font>

795
00:39:11,420 --> 00:39:16,580
vulnerabilities which is much more easy

796
00:39:14,120 --> 00:39:21,470
<font color="#CCCCCC">to exploit what is happening here is</font>

797
00:39:16,580 --> 00:39:24,140
<font color="#E5E5E5">that from the same register</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> my</font>

798
00:39:21,470 --> 00:39:29,649
<font color="#CCCCCC">hand will read the value and pass it to</font>

799
00:39:24,140 --> 00:39:32,540
<font color="#CCCCCC">the function call it and</font><font color="#E5E5E5"> be I call and</font>

800
00:39:29,650 --> 00:39:35,750
this value is<font color="#CCCCCC"> controlled by attacker</font><font color="#E5E5E5"> and</font>

801
00:39:32,540 --> 00:39:38,990
this value is<font color="#CCCCCC"> they are just over there</font>

802
00:39:35,750 --> 00:39:39,380
<font color="#CCCCCC">of the structure and the search has</font>

803
00:39:38,990 --> 00:39:43,910
couple

804
00:39:39,380 --> 00:39:46,279
<font color="#CCCCCC">fields</font><font color="#E5E5E5"> so if you'll see how the NBI</font><font color="#CCCCCC"> call</font>

805
00:39:43,910 --> 00:39:48,519
will handle it<font color="#E5E5E5"> we will see that it has</font><font color="#CCCCCC"> a</font>

806
00:39:46,279 --> 00:39:52,009
<font color="#E5E5E5">bunch of rights to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> structure</font><font color="#CCCCCC"> so</font>

807
00:39:48,519 --> 00:39:53,959
<font color="#E5E5E5">again if</font><font color="#CCCCCC"> we will overlap</font><font color="#E5E5E5"> the structure</font>

808
00:39:52,009 --> 00:39:57,799
with<font color="#CCCCCC"> the SMM we can have a right</font>

809
00:39:53,960 --> 00:40:00,650
primitive to them<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this mm code</font><font color="#E5E5E5"> and it</font>

810
00:39:57,799 --> 00:40:02,529
has much<font color="#CCCCCC"> more so that kind of was golden</font>

811
00:40:00,650 --> 00:40:08,180
function because it has a lot of<font color="#CCCCCC"> rights</font>

812
00:40:02,529 --> 00:40:11,390
like<font color="#E5E5E5"> and more so that</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> the</font>

813
00:40:08,180 --> 00:40:14,109
<font color="#CCCCCC">high-level idea</font><font color="#E5E5E5"> of what kind of a</font>

814
00:40:11,390 --> 00:40:17,118
<font color="#CCCCCC">nobility is similar for the coreboot</font>

815
00:40:14,109 --> 00:40:19,759
from and the<font color="#CCCCCC"> ufi basis from and what</font>

816
00:40:17,119 --> 00:40:23,180
kind of<font color="#E5E5E5"> vector is applicable for the</font>

817
00:40:19,759 --> 00:40:25,579
coreboot<font color="#CCCCCC"> member and why it</font><font color="#E5E5E5"> is important</font>

818
00:40:23,180 --> 00:40:28,160
to<font color="#E5E5E5"> validate all of the pointer and</font><font color="#CCCCCC"> all</font>

819
00:40:25,579 --> 00:40:30,650
of the bars in area so my handler when

820
00:40:28,160 --> 00:40:32,598
we implement the<font color="#E5E5E5"> coreboot by when the</font>

821
00:40:30,650 --> 00:40:34,640
developer implemented coreboot bias and

822
00:40:32,599 --> 00:40:40,339
<font color="#E5E5E5">then they build it finally and ship</font><font color="#CCCCCC"> it</font>

823
00:40:34,640 --> 00:40:45,019
<font color="#E5E5E5">to the to the products so a little bit</font>

824
00:40:40,339 --> 00:40:47,538
<font color="#E5E5E5">about right protection</font><font color="#CCCCCC"> as I'm glad you</font>

825
00:40:45,019 --> 00:40:51,680
mentioned<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the entire root of trust</font>

826
00:40:47,539 --> 00:40:53,329
is<font color="#CCCCCC"> based on the read-only memory and it</font>

827
00:40:51,680 --> 00:40:55,038
is<font color="#E5E5E5"> really good applicable for the</font>

828
00:40:53,329 --> 00:40:57,650
Chromebooks because<font color="#CCCCCC"> robust has this</font>

829
00:40:55,039 --> 00:40:59,690
<font color="#E5E5E5">implementation and we have really good</font>

830
00:40:57,650 --> 00:41:02,960
root of<font color="#E5E5E5"> trust so it is really hard to</font>

831
00:40:59,690 --> 00:41:06,140
bypass<font color="#E5E5E5"> verification method on the phone</font>

832
00:41:02,960 --> 00:41:07,819
book and<font color="#E5E5E5"> still possible to</font><font color="#CCCCCC"> find the</font>

833
00:41:06,140 --> 00:41:10,368
runtime vulnerability but it will<font color="#E5E5E5"> not</font>

834
00:41:07,819 --> 00:41:12,079
<font color="#E5E5E5">make a persistent attack for for make a</font>

835
00:41:10,369 --> 00:41:14,750
persistent attack you need<font color="#E5E5E5"> to bypass the</font>

836
00:41:12,079 --> 00:41:17,839
root of<font color="#CCCCCC"> trust including</font><font color="#E5E5E5"> some of the</font>

837
00:41:14,750 --> 00:41:21,619
stages including the redundant<font color="#CCCCCC"> Spy stage</font>

838
00:41:17,839 --> 00:41:24,890
which is<font color="#E5E5E5"> the first one</font><font color="#CCCCCC"> but what if we</font>

839
00:41:21,619 --> 00:41:28,130
<font color="#CCCCCC">just run</font><font color="#E5E5E5"> the Chromebook in a random</font>

840
00:41:24,890 --> 00:41:30,200
system<font color="#CCCCCC"> you cannot coreboot what if you</font>

841
00:41:28,130 --> 00:41:33,009
run coreboot in any<font color="#E5E5E5"> random system like</font>

842
00:41:30,200 --> 00:41:37,759
we just built<font color="#E5E5E5"> for example for the novel</font>

843
00:41:33,009 --> 00:41:40,460
fallen over<font color="#E5E5E5"> IFS to</font><font color="#CCCCCC"> 30 we can build the</font>

844
00:41:37,759 --> 00:41:43,549
core boot and<font color="#CCCCCC"> we'll can</font><font color="#E5E5E5"> flash</font><font color="#CCCCCC"> it to the</font>

845
00:41:40,460 --> 00:41:45,859
<font color="#E5E5E5">to this laptop and run it so</font>

846
00:41:43,549 --> 00:41:48,680
interestingly that there is no no

847
00:41:45,859 --> 00:41:52,009
protection at all so all of<font color="#CCCCCC"> their</font>

848
00:41:48,680 --> 00:41:52,970
protection which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> define it from the</font>

849
00:41:52,009 --> 00:41:55,880
hardware to use

850
00:41:52,970 --> 00:41:58,129
<font color="#CCCCCC">my software</font><font color="#E5E5E5"> to protect</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> buyers is not</font>

851
00:41:55,880 --> 00:42:00,410
use it at all<font color="#CCCCCC"> so basically what</font><font color="#E5E5E5"> this</font>

852
00:41:58,130 --> 00:42:02,840
mean is that if you don't<font color="#E5E5E5"> have that</font>

853
00:42:00,410 --> 00:42:05,720
physical protection and you use her own

854
00:42:02,840 --> 00:42:08,900
book<font color="#E5E5E5"> your bias is open for any type of</font>

855
00:42:05,720 --> 00:42:11,629
attack<font color="#E5E5E5"> found recent five years and here</font>

856
00:42:08,900 --> 00:42:14,690
is the summary so assuming basic frame

857
00:42:11,630 --> 00:42:17,210
<font color="#E5E5E5">rate but</font><font color="#CCCCCC"> right protection</font><font color="#E5E5E5"> is off spy</font>

858
00:42:14,690 --> 00:42:21,170
protection ranges is off all of the spy

859
00:42:17,210 --> 00:42:23,599
locks is not set spy configure is SMI

860
00:42:21,170 --> 00:42:26,599
locks<font color="#CCCCCC"> it's not set spy configuration is</font>

861
00:42:23,599 --> 00:42:29,359
<font color="#E5E5E5">not</font><font color="#CCCCCC"> locked and SM am accessible for DMA</font>

862
00:42:26,599 --> 00:42:31,280
attack<font color="#E5E5E5"> so basically all</font><font color="#CCCCCC"> of the all of</font>

863
00:42:29,359 --> 00:42:33,920
the<font color="#E5E5E5"> protection is supposed to be set is</font>

864
00:42:31,280 --> 00:42:36,710
not set<font color="#CCCCCC"> so all</font><font color="#E5E5E5"> of the protect all of the</font>

865
00:42:33,920 --> 00:42:38,840
protection relying on deaths on this pin

866
00:42:36,710 --> 00:42:39,770
and the pin<font color="#E5E5E5"> should be asserted if it's</font>

867
00:42:38,840 --> 00:42:42,109
not like<font color="#CCCCCC"> that</font>

868
00:42:39,770 --> 00:42:43,099
the<font color="#CCCCCC"> coreboot is doesn't</font><font color="#E5E5E5"> have any other</font>

869
00:42:42,109 --> 00:42:47,359
protection at all

870
00:42:43,099 --> 00:42:49,580
and I would say like who want to<font color="#E5E5E5"> install</font>

871
00:42:47,359 --> 00:42:51,740
the<font color="#E5E5E5"> the core boot in</font><font color="#CCCCCC"> the mount laptop</font>

872
00:42:49,580 --> 00:42:54,140
and there is not to make too much of

873
00:42:51,740 --> 00:42:58,069
<font color="#E5E5E5">yeah I will go</font><font color="#CCCCCC"> to that a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit</font>

874
00:42:54,140 --> 00:42:59,720
later<font color="#CCCCCC"> so and yeah we call it crazy</font><font color="#E5E5E5"> super</font>

875
00:42:58,070 --> 00:43:03,550
crazy developer mode when you can

876
00:42:59,720 --> 00:43:07,790
overwrite entire<font color="#E5E5E5"> enticed by region or</font>

877
00:43:03,550 --> 00:43:12,470
<font color="#CCCCCC">SMM code and make</font><font color="#E5E5E5"> a persistent and</font>

878
00:43:07,790 --> 00:43:13,910
<font color="#E5E5E5">styles backdoor in the SMM code what</font>

879
00:43:12,470 --> 00:43:16,279
kind of protection we have<font color="#E5E5E5"> in source</font>

880
00:43:13,910 --> 00:43:18,049
code if you will check<font color="#CCCCCC"> the single thing</font>

881
00:43:16,280 --> 00:43:20,359
which we<font color="#E5E5E5"> found that this function and</font>

882
00:43:18,050 --> 00:43:23,240
this function<font color="#E5E5E5"> basically what is doing is</font>

883
00:43:20,359 --> 00:43:26,240
it just tell we will<font color="#E5E5E5"> ignore everything</font>

884
00:43:23,240 --> 00:43:28,399
and<font color="#E5E5E5"> we will flip the right the right</font>

885
00:43:26,240 --> 00:43:29,209
enable bit<font color="#E5E5E5"> because this bit is not</font>

886
00:43:28,400 --> 00:43:31,070
necessary

887
00:43:29,210 --> 00:43:37,609
when you send the right transaction

888
00:43:31,070 --> 00:43:39,920
<font color="#CCCCCC">without them really bit</font><font color="#E5E5E5"> so basically to</font>

889
00:43:37,609 --> 00:43:43,119
simplify the<font color="#E5E5E5"> thing is is telling we will</font>

890
00:43:39,920 --> 00:43:47,589
not use protection<font color="#CCCCCC"> and if someone try to</font>

891
00:43:43,119 --> 00:43:47,589
enable<font color="#E5E5E5"> some bits</font><font color="#CCCCCC"> we'll just ignore</font><font color="#E5E5E5"> it</font>

892
00:43:48,020 --> 00:43:52,730
we<font color="#CCCCCC"> would ask like e of course but who</font>

893
00:43:51,290 --> 00:43:55,670
want to<font color="#CCCCCC"> install the core pod on the</font>

894
00:43:52,730 --> 00:43:57,800
<font color="#E5E5E5">system themselves it's kind of they need</font>

895
00:43:55,670 --> 00:44:00,830
to understand that<font color="#CCCCCC"> okay if you</font><font color="#E5E5E5"> install</font>

896
00:43:57,800 --> 00:44:02,599
and<font color="#E5E5E5"> if you in some of the core boot you</font>

897
00:44:00,830 --> 00:44:05,029
take all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> responsibility to enable</font>

898
00:44:02,599 --> 00:44:06,150
the protection for yourself<font color="#E5E5E5"> but there is</font>

899
00:44:05,030 --> 00:44:08,520
also

900
00:44:06,150 --> 00:44:11,430
<font color="#E5E5E5">buuut which is basically heaven in them</font>

901
00:44:08,520 --> 00:44:13,920
website in the description that<font color="#E5E5E5"> okay we</font>

902
00:44:11,430 --> 00:44:16,319
<font color="#E5E5E5">don't want to use any right protection</font>

903
00:44:13,920 --> 00:44:18,930
at all because because it's just not<font color="#E5E5E5"> you</font>

904
00:44:16,319 --> 00:44:20,940
just<font color="#E5E5E5"> for usability reasons it's really</font>

905
00:44:18,930 --> 00:44:25,220
useful if someone if anyone can override

906
00:44:20,940 --> 00:44:30,240
the despite shaper from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> and</font>

907
00:44:25,220 --> 00:44:32,669
there is couple companies<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> taken</font>

908
00:44:30,240 --> 00:44:36,299
<font color="#E5E5E5">limber core and just sit in the left of</font>

909
00:44:32,670 --> 00:44:40,950
his<font color="#E5E5E5"> liberal core bias</font><font color="#CCCCCC"> it called a</font>

910
00:44:36,299 --> 00:44:44,819
<font color="#E5E5E5">surprise prism which basically has this</font>

911
00:44:40,950 --> 00:44:47,250
open<font color="#E5E5E5"> open</font><font color="#CCCCCC"> Libra</font><font color="#E5E5E5"> quarry witches you can</font>

912
00:44:44,819 --> 00:44:50,009
just write<font color="#CCCCCC"> the entire spy from the</font>

913
00:44:47,250 --> 00:44:53,069
software<font color="#E5E5E5"> we didn't check this we just</font>

914
00:44:50,010 --> 00:44:54,930
<font color="#E5E5E5">check</font><font color="#CCCCCC"> the description so it may</font><font color="#E5E5E5"> be it</font>

915
00:44:53,069 --> 00:44:58,799
may<font color="#CCCCCC"> be that</font><font color="#E5E5E5"> they have the protection</font><font color="#CCCCCC"> but</font>

916
00:44:54,930 --> 00:45:03,180
that what we found in the<font color="#E5E5E5"> website anyway</font>

917
00:44:58,799 --> 00:45:06,390
conclusion so first of all the<font color="#E5E5E5"> decoder</font>

918
00:45:03,180 --> 00:45:09,960
base for the<font color="#E5E5E5"> core boot is really</font><font color="#CCCCCC"> big</font><font color="#E5E5E5"> and</font>

919
00:45:06,390 --> 00:45:11,490
has a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different components</font><font color="#CCCCCC"> and we</font>

920
00:45:09,960 --> 00:45:13,770
need to perform<font color="#E5E5E5"> all of the necessary</font>

921
00:45:11,490 --> 00:45:16,319
<font color="#CCCCCC">checks for all of the components</font><font color="#E5E5E5"> which</font>

922
00:45:13,770 --> 00:45:18,329
is running in<font color="#E5E5E5"> SME mode assume for all</font><font color="#CCCCCC"> of</font>

923
00:45:16,319 --> 00:45:21,839
the<font color="#E5E5E5"> SM eyes every time when we got</font><font color="#CCCCCC"> a new</font>

924
00:45:18,329 --> 00:45:24,089
pointer<font color="#CCCCCC"> also we need to validate</font><font color="#E5E5E5"> the</font>

925
00:45:21,839 --> 00:45:26,069
entire<font color="#CCCCCC"> thread model to understand where</font>

926
00:45:24,089 --> 00:45:29,970
is<font color="#CCCCCC"> the attack vectors</font><font color="#E5E5E5"> where is all of</font>

927
00:45:26,069 --> 00:45:33,599
<font color="#E5E5E5">this</font><font color="#CCCCCC"> HCP IG and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> s pointers kind came</font>

928
00:45:29,970 --> 00:45:36,029
from and<font color="#E5E5E5"> who who controlling them</font><font color="#CCCCCC"> also</font>

929
00:45:33,599 --> 00:45:39,000
<font color="#CCCCCC">we need to</font><font color="#E5E5E5"> really understand</font><font color="#CCCCCC"> that if you</font>

930
00:45:36,029 --> 00:45:42,029
use the core the<font color="#E5E5E5"> core boot in front boom</font>

931
00:45:39,000 --> 00:45:44,940
that's fine because it has VP pin which

932
00:45:42,029 --> 00:45:46,740
is asserted and you cannot overwrite the

933
00:45:44,940 --> 00:45:49,289
entire region because there<font color="#E5E5E5"> is read-only</font>

934
00:45:46,740 --> 00:45:51,808
memory<font color="#E5E5E5"> but if you use the core boot in</font>

935
00:45:49,289 --> 00:45:54,569
some any other<font color="#E5E5E5"> random system</font><font color="#CCCCCC"> you need to</font>

936
00:45:51,809 --> 00:45:56,329
be<font color="#CCCCCC"> sure and you are responsible to</font>

937
00:45:54,569 --> 00:46:00,119
enable all<font color="#E5E5E5"> of the necessary protection</font>

938
00:45:56,329 --> 00:46:02,700
for<font color="#E5E5E5"> you for assistant framer for the</font>

939
00:46:00,119 --> 00:46:05,400
core boot and<font color="#CCCCCC"> that functionality</font><font color="#E5E5E5"> is not</font>

940
00:46:02,700 --> 00:46:07,109
just one if<font color="#CCCCCC"> def you need to actually</font>

941
00:46:05,400 --> 00:46:10,160
create<font color="#E5E5E5"> a functionality because this</font>

942
00:46:07,109 --> 00:46:15,109
analogy<font color="#E5E5E5"> doesn't exist in in coreboot</font>

943
00:46:10,160 --> 00:46:15,109
implementation that's it

944
00:46:16,440 --> 00:46:26,150
I<font color="#E5E5E5"> have I have</font><font color="#CCCCCC"> time for questions</font>

945
00:46:38,560 --> 00:46:44,690
<font color="#CCCCCC">it seems like no questions all right</font>

946
00:46:42,550 --> 00:46:47,960
<font color="#E5E5E5">second time we present this talk and</font>

947
00:46:44,690 --> 00:46:50,020
second time no questions that's fine for

948
00:46:47,960 --> 00:46:50,020
me

