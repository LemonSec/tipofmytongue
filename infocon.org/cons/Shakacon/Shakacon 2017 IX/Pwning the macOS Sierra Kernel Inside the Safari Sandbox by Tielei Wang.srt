1
00:00:00,030 --> 00:00:06,060
hello my name is<font color="#CCCCCC"> Kelvin</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Kim Pangu</font>

2
00:00:02,970 --> 00:00:07,048
<font color="#E5E5E5">my friend my friend Shiho cannot be here</font>

3
00:00:06,060 --> 00:00:10,969
what a pity

4
00:00:07,049 --> 00:00:14,759
and the unit<font color="#E5E5E5"> in this talk I'm</font><font color="#CCCCCC"> going to</font>

5
00:00:10,969 --> 00:00:16,980
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about a Mac OS security and I'm</font>

6
00:00:14,759 --> 00:00:19,710
going<font color="#E5E5E5"> to share some Colonel Warren</font>

7
00:00:16,980 --> 00:00:22,710
abilities that can<font color="#E5E5E5"> be directly exploited</font>

8
00:00:19,710 --> 00:00:27,210
<font color="#E5E5E5">inside the Safari sandbox environment</font>

9
00:00:22,710 --> 00:00:30,140
<font color="#CCCCCC">and this is the agenda of my talk and I</font>

10
00:00:27,210 --> 00:00:34,800
think<font color="#CCCCCC"> from last talk well we already</font>

11
00:00:30,140 --> 00:00:37,440
observe that the any audio<font color="#CCCCCC"> or video</font>

12
00:00:34,800 --> 00:00:41,010
drawn words inside the kernel<font color="#E5E5E5"> might be</font>

13
00:00:37,440 --> 00:00:45,209
very very<font color="#CCCCCC"> massive</font><font color="#E5E5E5"> and a lot of box there</font>

14
00:00:41,010 --> 00:00:49,289
I think similar thing happens to<font color="#CCCCCC"> iOS or</font>

15
00:00:45,210 --> 00:00:51,149
Mac device<font color="#E5E5E5"> so it I will start by a very</font>

16
00:00:49,289 --> 00:00:53,670
<font color="#E5E5E5">short introduction and then we will</font>

17
00:00:51,149 --> 00:00:58,199
review the attack surface in Safari

18
00:00:53,670 --> 00:01:00,570
I mean how in the<font color="#CCCCCC"> Safari sandbox how can</font>

19
00:00:58,199 --> 00:01:03,358
we attack the kernel and then we will

20
00:01:00,570 --> 00:01:05,640
share<font color="#CCCCCC"> some very good and</font><font color="#E5E5E5"> increased</font>

21
00:01:03,359 --> 00:01:08,580
incredible abilities and I'm going to

22
00:01:05,640 --> 00:01:12,360
<font color="#CCCCCC">also share some exploitation details and</font>

23
00:01:08,580 --> 00:01:15,330
<font color="#E5E5E5">finally I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> conclude a talk so</font>

24
00:01:12,360 --> 00:01:17,729
about me<font color="#E5E5E5"> I'm a co-founder of team</font><font color="#CCCCCC"> Pangu</font>

25
00:01:15,330 --> 00:01:20,820
and our team is known for<font color="#CCCCCC"> releasing</font>

26
00:01:17,729 --> 00:01:25,080
jailbreak tools for iOS<font color="#CCCCCC"> seven eight and</font>

27
00:01:20,820 --> 00:01:27,960
<font color="#CCCCCC">nine and we regularly present our work</font>

28
00:01:25,080 --> 00:01:31,860
and the different<font color="#E5E5E5"> security conference I</font>

29
00:01:27,960 --> 00:01:34,408
think<font color="#E5E5E5"> after after cycling</font><font color="#CCCCCC"> um I will</font><font color="#E5E5E5"> be</font>

30
00:01:31,860 --> 00:01:40,490
<font color="#E5E5E5">very proud to add tracker on to the list</font>

31
00:01:34,409 --> 00:01:43,350
<font color="#E5E5E5">and so Michael</font><font color="#CCCCCC"> Weiss</font><font color="#E5E5E5"> Sarah which is the</font>

32
00:01:40,490 --> 00:01:46,350
<font color="#E5E5E5">thirteenth major release of Mac Mac OS</font>

33
00:01:43,350 --> 00:01:50,850
as many people in this room<font color="#CCCCCC"> are using</font>

34
00:01:46,350 --> 00:01:53,939
Mac<font color="#E5E5E5"> OS and this version was released to</font>

35
00:01:50,850 --> 00:01:57,119
<font color="#E5E5E5">end-users</font><font color="#CCCCCC"> on September 20th</font><font color="#E5E5E5"> last year</font>

36
00:01:53,939 --> 00:01:59,669
the cursor is very popular it became<font color="#E5E5E5"> a</font>

37
00:01:57,119 --> 00:02:03,210
very<font color="#E5E5E5"> hot target in different pong</font>

38
00:01:59,670 --> 00:02:09,538
context like pound to own or<font color="#CCCCCC"> pom fest</font>

39
00:02:03,210 --> 00:02:12,150
and so I did<font color="#E5E5E5"> a typical pong process it</font>

40
00:02:09,538 --> 00:02:12,920
looks like this<font color="#E5E5E5"> so</font><font color="#CCCCCC"> basically you</font><font color="#E5E5E5"> create</font>

41
00:02:12,150 --> 00:02:16,700
a

42
00:02:12,920 --> 00:02:20,720
monstrous webpage and<font color="#CCCCCC"> you use</font><font color="#E5E5E5"> mobile you</font>

43
00:02:16,700 --> 00:02:23,239
use<font color="#E5E5E5"> Safari to access the</font><font color="#CCCCCC"> webpage</font><font color="#E5E5E5"> and if</font>

44
00:02:20,720 --> 00:02:25,819
<font color="#E5E5E5">you can pop up a calculator or a</font>

45
00:02:23,240 --> 00:02:28,910
terminal running<font color="#CCCCCC"> without the</font><font color="#E5E5E5"> center box</font>

46
00:02:25,819 --> 00:02:32,600
which clear you win the game<font color="#E5E5E5"> and you can</font>

47
00:02:28,910 --> 00:02:38,329
get extra<font color="#E5E5E5"> bonus if the calculator</font><font color="#CCCCCC"> or the</font>

48
00:02:32,600 --> 00:02:41,720
terminal<font color="#E5E5E5"> run at suit so</font><font color="#CCCCCC"> it sounds easy</font>

49
00:02:38,330 --> 00:02:44,209
but a lot<font color="#CCCCCC"> of stuff to do so first you</font>

50
00:02:41,720 --> 00:02:48,020
need<font color="#CCCCCC"> a remote code execution in Safari</font>

51
00:02:44,209 --> 00:02:51,200
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Safari process model is based on</font>

52
00:02:48,020 --> 00:02:53,959
WebKit<font color="#CCCCCC"> - that means</font><font color="#E5E5E5"> Safari the whole</font>

53
00:02:51,200 --> 00:02:57,200
<font color="#E5E5E5">Safari is split into different families</font>

54
00:02:53,959 --> 00:03:01,180
different processes<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example there</font><font color="#E5E5E5"> is</font>

55
00:02:57,200 --> 00:03:04,700
a process<font color="#CCCCCC"> called web web content</font><font color="#E5E5E5"> and</font>

56
00:03:01,180 --> 00:03:08,120
anyway so<font color="#CCCCCC"> for the process model you guys</font>

57
00:03:04,700 --> 00:03:10,100
can refer to<font color="#E5E5E5"> the two links on the on the</font>

58
00:03:08,120 --> 00:03:13,760
page and they have more details about

59
00:03:10,100 --> 00:03:15,859
the process<font color="#CCCCCC"> model and web process is</font>

60
00:03:13,760 --> 00:03:18,679
responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> loading passing and</font>

61
00:03:15,860 --> 00:03:21,079
rendering<font color="#CCCCCC"> the web</font><font color="#E5E5E5"> pages so</font><font color="#CCCCCC"> that means</font>

62
00:03:18,680 --> 00:03:23,299
it's<font color="#E5E5E5"> more</font><font color="#CCCCCC"> vulnerable because you have a</font>

63
00:03:21,079 --> 00:03:25,070
lot of<font color="#E5E5E5"> work to do and</font><font color="#CCCCCC"> so the more</font>

64
00:03:23,299 --> 00:03:29,720
functionalities<font color="#CCCCCC"> you have the more likely</font>

65
00:03:25,070 --> 00:03:32,269
<font color="#CCCCCC">you have bugs so web process is the main</font>

66
00:03:29,720 --> 00:03:36,500
target<font color="#CCCCCC"> to to find</font><font color="#E5E5E5"> the remote code</font>

67
00:03:32,269 --> 00:03:39,340
execution<font color="#E5E5E5"> box but I also knew that so</font>

68
00:03:36,500 --> 00:03:43,370
what process is heavily confirm<font color="#CCCCCC"> are</font>

69
00:03:39,340 --> 00:03:47,720
confined by the sandbox so sandbox will

70
00:03:43,370 --> 00:03:50,570
limit the<font color="#E5E5E5"> what the web process can</font>

71
00:03:47,720 --> 00:03:52,579
access<font color="#E5E5E5"> to the whole system</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> are the</font>

72
00:03:50,570 --> 00:03:58,640
influence<font color="#E5E5E5"> it can produce to the</font><font color="#CCCCCC"> whole</font>

73
00:03:52,579 --> 00:04:02,420
system<font color="#E5E5E5"> so to win the pong fast so</font>

74
00:03:58,640 --> 00:04:06,070
basically you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to you need to extra</font>

75
00:04:02,420 --> 00:04:09,619
step<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to escape the sandbox</font><font color="#E5E5E5"> so</font>

76
00:04:06,070 --> 00:04:12,410
basically you have two ways one<font color="#E5E5E5"> way is</font>

77
00:04:09,620 --> 00:04:15,290
you can attack other system services

78
00:04:12,410 --> 00:04:19,130
that can<font color="#CCCCCC"> be directly communicated by</font><font color="#E5E5E5"> web</font>

79
00:04:15,290 --> 00:04:21,610
<font color="#E5E5E5">process like from</font><font color="#CCCCCC"> tea and the</font><font color="#E5E5E5"> windows</font>

80
00:04:19,130 --> 00:04:25,219
<font color="#E5E5E5">server increasingly</font><font color="#CCCCCC"> I think this your</font>

81
00:04:21,610 --> 00:04:26,660
billion pound<font color="#E5E5E5"> to own context many teams</font>

82
00:04:25,220 --> 00:04:29,330
finally warned

83
00:04:26,660 --> 00:04:32,660
the<font color="#CCCCCC"> safari category</font><font color="#E5E5E5"> so they go to the</font>

84
00:04:29,330 --> 00:04:36,050
youth permission through<font color="#CCCCCC"> Safari but</font><font color="#E5E5E5"> most</font>

85
00:04:32,660 --> 00:04:40,940
of them select<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> server and the</font>

86
00:04:36,050 --> 00:04:43,820
and the sandbox<font color="#E5E5E5"> escape target and the</font>

87
00:04:40,940 --> 00:04:48,530
other<font color="#E5E5E5"> way is</font><font color="#CCCCCC"> you can directly</font><font color="#E5E5E5"> explore</font>

88
00:04:43,820 --> 00:04:51,320
tournament abilities so this is the

89
00:04:48,530 --> 00:04:52,580
focus of a talk how can we directly

90
00:04:51,320 --> 00:04:55,340
<font color="#CCCCCC">exploit</font>

91
00:04:52,580 --> 00:05:01,340
<font color="#CCCCCC">Colonel von oben abilities inside</font><font color="#E5E5E5"> the</font>

92
00:04:55,340 --> 00:05:04,520
web process sandbox<font color="#E5E5E5"> so the other</font><font color="#CCCCCC"> two</font>

93
00:05:01,340 --> 00:05:08,659
find box we need<font color="#CCCCCC"> to know where we where</font>

94
00:05:04,520 --> 00:05:13,130
we<font color="#CCCCCC"> can find them</font><font color="#E5E5E5"> basically if you check</font>

95
00:05:08,660 --> 00:05:16,100
the<font color="#E5E5E5"> two sandbox profiles the location is</font>

96
00:05:13,130 --> 00:05:20,840
pretty long you can get<font color="#E5E5E5"> the of the pass</font>

97
00:05:16,100 --> 00:05:24,860
here inside the tube sandbox profiles

98
00:05:20,840 --> 00:05:28,219
<font color="#E5E5E5">they define</font><font color="#CCCCCC"> what kind</font><font color="#E5E5E5"> of resource</font><font color="#CCCCCC"> or</font>

99
00:05:24,860 --> 00:05:30,920
<font color="#E5E5E5">influence the web process can produce to</font>

100
00:05:28,220 --> 00:05:32,930
the<font color="#CCCCCC"> system and there there are a lot of</font>

101
00:05:30,920 --> 00:05:36,550
rules<font color="#E5E5E5"> like what kind of files you can</font>

102
00:05:32,930 --> 00:05:39,800
read create<font color="#E5E5E5"> write and what kind of</font>

103
00:05:36,550 --> 00:05:42,650
system properties you can modify<font color="#E5E5E5"> or or</font>

104
00:05:39,800 --> 00:05:46,000
get and among such rules

105
00:05:42,650 --> 00:05:49,909
the most interesting part<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us is</font>

106
00:05:46,000 --> 00:05:54,380
<font color="#E5E5E5">alkyd open so basically allow alkyl</font>

107
00:05:49,910 --> 00:05:58,570
alkyl open<font color="#E5E5E5"> indicate what kind of</font><font color="#CCCCCC"> macro</font>

108
00:05:54,380 --> 00:06:02,930
<font color="#CCCCCC">is brower's</font><font color="#E5E5E5"> you can directly communicate</font>

109
00:05:58,570 --> 00:06:05,900
so don't don't expect there are<font color="#E5E5E5"> many</font>

110
00:06:02,930 --> 00:06:09,020
<font color="#CCCCCC">doors you can</font><font color="#E5E5E5"> directly talk with inside</font>

111
00:06:05,900 --> 00:06:14,510
the<font color="#CCCCCC"> web process</font><font color="#E5E5E5"> basically if I remember</font>

112
00:06:09,020 --> 00:06:16,310
correctly<font color="#E5E5E5"> it less than</font><font color="#CCCCCC"> ten so what does</font>

113
00:06:14,510 --> 00:06:19,300
<font color="#E5E5E5">elke it means so if you have a mini</font>

114
00:06:16,310 --> 00:06:22,669
early<font color="#E5E5E5"> cell I mean Mac OS kernel</font>

115
00:06:19,300 --> 00:06:25,190
programming<font color="#E5E5E5"> you must be very familiar</font>

116
00:06:22,669 --> 00:06:28,130
with<font color="#CCCCCC"> I okay</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> there is a collection</font>

117
00:06:25,190 --> 00:06:30,620
of system frameworks and<font color="#E5E5E5"> tools and other</font>

118
00:06:28,130 --> 00:06:32,630
resource for creating device<font color="#E5E5E5"> drawers</font>

119
00:06:30,620 --> 00:06:36,500
basically<font color="#E5E5E5"> yes you can you</font><font color="#CCCCCC"> can think okay</font>

120
00:06:32,630 --> 00:06:38,659
<font color="#E5E5E5">it is for Mac OS</font><font color="#CCCCCC"> growers and the user</font>

121
00:06:36,500 --> 00:06:39,790
land free market are called<font color="#CCCCCC"> lkt</font><font color="#E5E5E5"> dot</font>

122
00:06:38,660 --> 00:06:43,090
framework<font color="#CCCCCC"> it</font>

123
00:06:39,790 --> 00:06:47,310
dynamic library it provides extensive

124
00:06:43,090 --> 00:06:50,619
user mode<font color="#CCCCCC"> AP</font><font color="#E5E5E5"> is to support the</font>

125
00:06:47,310 --> 00:06:53,710
communication from<font color="#E5E5E5"> opportunity</font><font color="#CCCCCC"> user land</font>

126
00:06:50,620 --> 00:06:56,860
and the<font color="#CCCCCC"> kernel such as memory sharing</font>

127
00:06:53,710 --> 00:07:01,830
and notification messaging and other

128
00:06:56,860 --> 00:07:06,340
more complicated<font color="#E5E5E5"> method</font><font color="#CCCCCC"> course so a</font>

129
00:07:01,830 --> 00:07:10,080
typical cycle cycle of using a<font color="#E5E5E5"> al-qaeda</font>

130
00:07:06,340 --> 00:07:13,210
is like this<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> define a matching</font>

131
00:07:10,080 --> 00:07:15,460
dictionary in<font color="#E5E5E5"> the dictionary you want</font>

132
00:07:13,210 --> 00:07:18,190
you can specify what kind<font color="#E5E5E5"> of driver you</font>

133
00:07:15,460 --> 00:07:20,409
want<font color="#CCCCCC"> to talk and the using</font><font color="#E5E5E5"> Walker API</font>

134
00:07:18,190 --> 00:07:23,410
code<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> service get matching service</font>

135
00:07:20,410 --> 00:07:25,690
which will<font color="#E5E5E5"> look up here adjusted our</font>

136
00:07:23,410 --> 00:07:27,310
service<font color="#CCCCCC"> the</font><font color="#E5E5E5"> object in the kernel and the</font>

137
00:07:25,690 --> 00:07:30,490
<font color="#E5E5E5">return handler to the other</font>

138
00:07:27,310 --> 00:07:32,650
buta<font color="#E5E5E5"> line is a</font><font color="#CCCCCC"> pod</font><font color="#E5E5E5"> and after getting</font>

139
00:07:30,490 --> 00:07:35,440
that part you can<font color="#CCCCCC"> use our service</font><font color="#E5E5E5"> open</font>

140
00:07:32,650 --> 00:07:38,049
which will<font color="#E5E5E5"> create a connection</font><font color="#CCCCCC"> to the</font>

141
00:07:35,440 --> 00:07:43,090
i/o service object and the return the

142
00:07:38,050 --> 00:07:45,850
pot represent a<font color="#E5E5E5"> user client object after</font>

143
00:07:43,090 --> 00:07:49,380
you get the user<font color="#E5E5E5"> client object there are</font>

144
00:07:45,850 --> 00:07:53,020
tons of<font color="#E5E5E5"> APRs you can use to continue to</font>

145
00:07:49,380 --> 00:07:56,380
<font color="#E5E5E5">communicate with the user client</font><font color="#CCCCCC"> I list</font>

146
00:07:53,020 --> 00:07:59,049
the two<font color="#CCCCCC"> of them one</font><font color="#E5E5E5"> is I'll connect set</font>

147
00:07:56,380 --> 00:07:59,610
notification pot we<font color="#CCCCCC"> will see this appear</font>

148
00:07:59,050 --> 00:08:03,100
later

149
00:07:59,610 --> 00:08:05,140
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> it's used to set a port</font><font color="#E5E5E5"> to</font>

150
00:08:03,100 --> 00:08:09,340
receive notifications from the<font color="#CCCCCC"> user</font>

151
00:08:05,140 --> 00:08:12,250
client<font color="#CCCCCC"> and another idea is</font><font color="#E5E5E5"> I will</font>

152
00:08:09,340 --> 00:08:15,429
connect call method<font color="#CCCCCC"> it</font><font color="#E5E5E5"> used to pass or</font>

153
00:08:12,250 --> 00:08:19,420
get data from<font color="#E5E5E5"> the value the client</font>

154
00:08:15,430 --> 00:08:22,420
object so basically<font color="#CCCCCC"> the you can see that</font>

155
00:08:19,420 --> 00:08:25,120
you have<font color="#CCCCCC"> so many</font><font color="#E5E5E5"> ways to exchange data</font>

156
00:08:22,420 --> 00:08:27,850
<font color="#E5E5E5">or instruct the</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> all this</font>

157
00:08:25,120 --> 00:08:31,210
interface<font color="#CCCCCC"> they are a</font><font color="#E5E5E5"> text service so</font>

158
00:08:27,850 --> 00:08:34,540
what we do is we knew what what<font color="#E5E5E5"> drove us</font>

159
00:08:31,210 --> 00:08:36,909
we can we can<font color="#CCCCCC"> open so we just manually</font>

160
00:08:34,539 --> 00:08:40,120
<font color="#E5E5E5">analyze them one by one and</font><font color="#CCCCCC"> on each</font>

161
00:08:36,909 --> 00:08:44,380
<font color="#E5E5E5">measure one by one so likely we find the</font>

162
00:08:40,120 --> 00:08:48,820
sum of box so let's<font color="#CCCCCC"> go ahead with the</font>

163
00:08:44,380 --> 00:08:51,880
box and the exploitations<font color="#E5E5E5"> so in short</font>

164
00:08:48,820 --> 00:08:53,320
I'm going<font color="#E5E5E5"> to share three interesting box</font>

165
00:08:51,880 --> 00:08:56,890
one is a

166
00:08:53,320 --> 00:09:00,270
<font color="#E5E5E5">I initialized</font><font color="#CCCCCC"> shape issue in IO all your</font>

167
00:08:56,890 --> 00:09:04,480
family which can<font color="#E5E5E5"> lead to info leak</font>

168
00:09:00,270 --> 00:09:06,130
problem and it can<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to bypass the</font>

169
00:09:04,480 --> 00:09:10,540
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> grassley layout randomization</font>

170
00:09:06,130 --> 00:09:14,350
<font color="#E5E5E5">and the second one is in the AMD</font>

171
00:09:10,540 --> 00:09:17,380
graphics rubber so<font color="#E5E5E5"> I</font><font color="#CCCCCC"> initialized stack</font>

172
00:09:14,350 --> 00:09:21,610
variable it can<font color="#E5E5E5"> result in a actually</font>

173
00:09:17,380 --> 00:09:24,720
<font color="#E5E5E5">coded</font><font color="#CCCCCC"> koushin and the third one is</font><font color="#E5E5E5"> it's</font>

174
00:09:21,610 --> 00:09:29,230
<font color="#CCCCCC">vinyl for my favorite</font><font color="#E5E5E5"> it's a hippo flow</font>

175
00:09:24,720 --> 00:09:31,480
so basically<font color="#E5E5E5"> is not a typical</font>

176
00:09:29,230 --> 00:09:34,540
programming<font color="#E5E5E5"> room is a fundamental error</font>

177
00:09:31,480 --> 00:09:36,970
in the picture sharing<font color="#E5E5E5"> mechanism in</font><font color="#CCCCCC"> our</font>

178
00:09:34,540 --> 00:09:40,089
<font color="#CCCCCC">kit I'm going to show</font><font color="#E5E5E5"> you more</font><font color="#CCCCCC"> details</font>

179
00:09:36,970 --> 00:09:42,790
later<font color="#CCCCCC"> ok let's go to the first</font><font color="#E5E5E5"> one in</font>

180
00:09:40,090 --> 00:09:47,980
the info leak in a audio family<font color="#E5E5E5"> actually</font>

181
00:09:42,790 --> 00:09:50,740
<font color="#E5E5E5">they because this drawer or this module</font>

182
00:09:47,980 --> 00:09:53,350
is open source<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can get the source</font>

183
00:09:50,740 --> 00:09:56,890
<font color="#CCCCCC">code from</font><font color="#E5E5E5"> op open source I'm calm it's</font>

184
00:09:53,350 --> 00:09:59,710
much<font color="#CCCCCC"> easier to review the code you feel</font>

185
00:09:56,890 --> 00:10:04,620
I mean<font color="#E5E5E5"> you have some in source code it's</font>

186
00:09:59,710 --> 00:10:04,620
much easier if<font color="#E5E5E5"> you only have binary and</font>

187
00:10:04,830 --> 00:10:12,760
so basically this<font color="#CCCCCC"> drawer is used to</font><font color="#E5E5E5"> make</font>

188
00:10:08,800 --> 00:10:15,910
<font color="#E5E5E5">to to organize and managing the audio</font>

189
00:10:12,760 --> 00:10:18,160
drawers audio devices<font color="#E5E5E5"> Halloween so this</font>

190
00:10:15,910 --> 00:10:20,770
<font color="#CCCCCC">user</font><font color="#E5E5E5"> trying to allow user space program</font>

191
00:10:18,160 --> 00:10:24,400
to<font color="#CCCCCC"> get the notification pot and the</font>

192
00:10:20,770 --> 00:10:26,770
leader<font color="#E5E5E5"> this user client</font><font color="#CCCCCC"> we've seen some</font>

193
00:10:24,400 --> 00:10:30,610
notification message to the user<font color="#E5E5E5"> land</font>

194
00:10:26,770 --> 00:10:33,460
programs like so<font color="#E5E5E5"> if you if your</font><font color="#CCCCCC"> program</font>

195
00:10:30,610 --> 00:10:36,190
<font color="#CCCCCC">is since</font><font color="#E5E5E5"> cable to for example if your</font>

196
00:10:33,460 --> 00:10:39,610
program<font color="#CCCCCC"> have some functionalities about</font>

197
00:10:36,190 --> 00:10:42,040
the the audio volume so if the user

198
00:10:39,610 --> 00:10:44,950
changes the audio volume your

199
00:10:42,040 --> 00:10:47,980
application is supposed to<font color="#E5E5E5"> receive</font><font color="#CCCCCC"> the</font>

200
00:10:44,950 --> 00:10:53,020
notification so this is for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> purpose</font>

201
00:10:47,980 --> 00:10:56,740
<font color="#E5E5E5">and the user</font><font color="#CCCCCC"> line</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> connect a set</font>

202
00:10:53,020 --> 00:11:00,610
and defecation pot we<font color="#E5E5E5"> will reach the so</font>

203
00:10:56,740 --> 00:11:02,890
if you create<font color="#CCCCCC"> a iou user</font><font color="#E5E5E5"> times</font><font color="#CCCCCC"> all you</font>

204
00:11:00,610 --> 00:11:06,040
can show you the client<font color="#E5E5E5"> you pass it to</font>

205
00:11:02,890 --> 00:11:06,760
<font color="#E5E5E5">I'll connect settle notification finally</font>

206
00:11:06,040 --> 00:11:09,670
<font color="#E5E5E5">in</font>

207
00:11:06,760 --> 00:11:12,130
<font color="#CCCCCC">you will reach the code called regis</font>

208
00:11:09,670 --> 00:11:17,319
notification<font color="#CCCCCC"> part the source code looks</font>

209
00:11:12,130 --> 00:11:19,959
<font color="#E5E5E5">like this so in this function and it</font>

210
00:11:17,320 --> 00:11:23,230
<font color="#E5E5E5">will</font><font color="#CCCCCC"> locate a structure</font><font color="#E5E5E5"> called</font>

211
00:11:19,959 --> 00:11:26,579
notification message and the allocation

212
00:11:23,230 --> 00:11:31,230
<font color="#CCCCCC">is I</font><font color="#E5E5E5"> all my log I'm a</font><font color="#CCCCCC"> lock aligned and</font>

213
00:11:26,579 --> 00:11:34,689
that<font color="#CCCCCC"> the left corner</font><font color="#E5E5E5"> defines the</font>

214
00:11:31,230 --> 00:11:35,889
<font color="#E5E5E5">structure information so basically at</font>

215
00:11:34,690 --> 00:11:38,769
the<font color="#CCCCCC"> beginning there is the message</font>

216
00:11:35,889 --> 00:11:43,600
header<font color="#CCCCCC"> in the following you can see a</font>

217
00:11:38,769 --> 00:11:48,040
<font color="#E5E5E5">type is a integer 32 and</font><font color="#CCCCCC"> TouchWiz is</font>

218
00:11:43,600 --> 00:11:50,740
integer 32 and also a<font color="#E5E5E5"> watch star sender</font>

219
00:11:48,040 --> 00:11:53,439
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> look at the initialized code</font>

220
00:11:50,740 --> 00:11:57,790
<font color="#E5E5E5">basically it initializes these members</font>

221
00:11:53,440 --> 00:11:59,880
one by one<font color="#E5E5E5"> but inside this function you</font>

222
00:11:57,790 --> 00:12:03,880
will see that actually<font color="#E5E5E5"> it doesn't</font>

223
00:11:59,880 --> 00:12:07,990
initialize sender field and also the

224
00:12:03,880 --> 00:12:15,040
type<font color="#E5E5E5"> field so the code forget to totally</font>

225
00:12:07,990 --> 00:12:17,319
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> is a Malaga</font><font color="#E5E5E5"> buffer so later if</font>

226
00:12:15,040 --> 00:12:21,819
some<font color="#E5E5E5"> notification happens I mean like</font>

227
00:12:17,319 --> 00:12:24,250
the<font color="#E5E5E5"> volume is changed the the kernel</font>

228
00:12:21,819 --> 00:12:27,910
object<font color="#E5E5E5"> I audio control you the change</font>

229
00:12:24,250 --> 00:12:30,970
will send the notification to the New

230
00:12:27,910 --> 00:12:33,519
<font color="#CCCCCC">Zealand</font><font color="#E5E5E5"> this is how the notification is</font>

231
00:12:30,970 --> 00:12:37,360
sent<font color="#E5E5E5"> so basically it will tear</font><font color="#CCCCCC"> out</font>

232
00:12:33,519 --> 00:12:39,850
<font color="#E5E5E5">according the API the chrono API mark</font>

233
00:12:37,360 --> 00:12:42,089
message<font color="#E5E5E5"> sent from kernel and it will</font>

234
00:12:39,850 --> 00:12:47,560
<font color="#CCCCCC">sync the</font><font color="#E5E5E5"> whole message to the other land</font>

235
00:12:42,089 --> 00:12:50,170
including the initialized data so the

236
00:12:47,560 --> 00:12:55,180
notification message is allocated in<font color="#E5E5E5"> the</font>

237
00:12:50,170 --> 00:12:59,469
<font color="#E5E5E5">key block 72 zone and the send field</font>

238
00:12:55,180 --> 00:13:04,750
the offset<font color="#E5E5E5"> is 38 in hex so that means</font>

239
00:12:59,470 --> 00:13:09,100
basically<font color="#CCCCCC"> we can we can leak</font><font color="#E5E5E5"> eight bars</font>

240
00:13:04,750 --> 00:13:14,769
<font color="#E5E5E5">and the offset of 68 in hacks you know</font>

241
00:13:09,100 --> 00:13:18,440
object in the zone<font color="#E5E5E5"> 72 so the idea I</font>

242
00:13:14,769 --> 00:13:21,740
think<font color="#E5E5E5"> that the root</font><font color="#CCCCCC"> cause is very</font><font color="#E5E5E5"> clear</font>

243
00:13:18,440 --> 00:13:24,050
so it's exploding the<font color="#CCCCCC"> viability</font><font color="#E5E5E5"> seems to</font>

244
00:13:21,740 --> 00:13:26,120
be very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> so we just created</font><font color="#E5E5E5"> the IO</font>

245
00:13:24,050 --> 00:13:28,609
<font color="#E5E5E5">audio</font><font color="#CCCCCC"> control you the client objects</font>

246
00:13:26,120 --> 00:13:31,310
<font color="#E5E5E5">many times</font><font color="#CCCCCC"> and as</font><font color="#E5E5E5"> many as well as we</font>

247
00:13:28,610 --> 00:13:35,779
want and the for<font color="#CCCCCC"> each user Clank</font><font color="#E5E5E5"> we can</font>

248
00:13:31,310 --> 00:13:38,268
<font color="#E5E5E5">readjust a notification pot and somehow</font>

249
00:13:35,779 --> 00:13:39,920
<font color="#CCCCCC">if we can trigger the notification</font>

250
00:13:38,269 --> 00:13:42,170
<font color="#CCCCCC">humint</font><font color="#E5E5E5"> we will receive with a</font>

251
00:13:39,920 --> 00:13:44,060
notification message and the inside<font color="#CCCCCC"> of</font>

252
00:13:42,170 --> 00:13:48,500
the notification message will get a lot

253
00:13:44,060 --> 00:13:51,050
of<font color="#E5E5E5"> I initialized data and but to make</font>

254
00:13:48,500 --> 00:13:53,750
the whole<font color="#E5E5E5"> one</font><font color="#CCCCCC"> ability meaningful</font><font color="#E5E5E5"> we have</font>

255
00:13:51,050 --> 00:13:57,139
two challenges<font color="#CCCCCC"> so first how can we</font>

256
00:13:53,750 --> 00:14:01,370
trigger<font color="#E5E5E5"> the notification movement inside</font>

257
00:13:57,139 --> 00:14:04,339
<font color="#E5E5E5">the</font><font color="#CCCCCC"> web content process and also how can</font>

258
00:14:01,370 --> 00:14:06,680
<font color="#E5E5E5">we make the leaked data meaningful like</font>

259
00:14:04,339 --> 00:14:08,810
for<font color="#CCCCCC"> example we want to bypass kernel</font>

260
00:14:06,680 --> 00:14:11,839
address<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> transition the key slide</font>

261
00:14:08,810 --> 00:14:15,439
value so every time you blew your<font color="#CCCCCC"> bootie</font>

262
00:14:11,839 --> 00:14:17,089
<font color="#E5E5E5">or</font><font color="#CCCCCC"> mac OS</font><font color="#E5E5E5"> so the kernel will be loaded</font>

263
00:14:15,439 --> 00:14:19,069
and<font color="#E5E5E5"> placed in the locations</font><font color="#CCCCCC"> there's a</font>

264
00:14:17,089 --> 00:14:21,439
slight<font color="#CCCCCC"> value so if we can link</font><font color="#E5E5E5"> that</font>

265
00:14:19,069 --> 00:14:24,949
value value we can totally bypass the

266
00:14:21,439 --> 00:14:29,480
randomization protection so for the

267
00:14:24,949 --> 00:14:32,420
<font color="#E5E5E5">first challenge is if there</font><font color="#CCCCCC"> there's no</font>

268
00:14:29,480 --> 00:14:36,139
<font color="#E5E5E5">set box it's very easy so we can direct</font>

269
00:14:32,420 --> 00:14:38,750
a<font color="#CCCCCC"> Koi api i</font><font color="#E5E5E5"> alway just to increase SCS</font>

270
00:14:36,139 --> 00:14:41,300
properties we<font color="#E5E5E5"> can directly sex the</font>

271
00:14:38,750 --> 00:14:44,930
property named by audio control value

272
00:14:41,300 --> 00:14:46,910
which indicates the<font color="#CCCCCC"> volume so we can</font>

273
00:14:44,930 --> 00:14:48,880
directly<font color="#E5E5E5"> call this</font><font color="#CCCCCC"> function and then</font><font color="#E5E5E5"> it</font>

274
00:14:46,910 --> 00:14:52,219
will trigger the notification

275
00:14:48,880 --> 00:14:56,329
unfortunately the sandbox<font color="#E5E5E5"> profile for</font>

276
00:14:52,220 --> 00:14:59,120
web content process is it<font color="#E5E5E5"> doesn't allow</font>

277
00:14:56,329 --> 00:15:00,620
to<font color="#E5E5E5"> set this</font><font color="#CCCCCC"> property so basically we can</font>

278
00:14:59,120 --> 00:15:04,339
<font color="#CCCCCC">add they're directly set to this</font>

279
00:15:00,620 --> 00:15:06,350
property<font color="#E5E5E5"> so for a long time we believe</font>

280
00:15:04,339 --> 00:15:08,509
that the<font color="#E5E5E5"> bug may not be exportable</font>

281
00:15:06,350 --> 00:15:12,050
inside the sandbox<font color="#CCCCCC"> but</font><font color="#E5E5E5"> finally we</font>

282
00:15:08,509 --> 00:15:15,139
<font color="#CCCCCC">realize</font><font color="#E5E5E5"> actually you can somehow</font>

283
00:15:12,050 --> 00:15:18,559
instruct the system service to change

284
00:15:15,139 --> 00:15:21,910
the volume<font color="#CCCCCC"> so what we did is this</font><font color="#E5E5E5"> so I</font>

285
00:15:18,559 --> 00:15:25,370
find if I change the volume using the

286
00:15:21,910 --> 00:15:28,100
keyboard<font color="#E5E5E5"> I can my program</font><font color="#CCCCCC"> can receive</font>

287
00:15:25,370 --> 00:15:29,630
the notification so I reverse engineer

288
00:15:28,100 --> 00:15:33,290
the process<font color="#E5E5E5"> who</font>

289
00:15:29,630 --> 00:15:36,649
it's used<font color="#E5E5E5"> to set the volume and finally</font>

290
00:15:33,290 --> 00:15:41,779
I find a<font color="#CCCCCC"> system service called</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> of</font>

291
00:15:36,649 --> 00:15:45,589
duty<font color="#E5E5E5"> and you can if you if you go to</font>

292
00:15:41,779 --> 00:15:47,540
<font color="#E5E5E5">Patrick's</font><font color="#CCCCCC"> talked this morning</font><font color="#E5E5E5"> so he also</font>

293
00:15:45,589 --> 00:15:49,880
talked about<font color="#CCCCCC"> this demon it's used to</font>

294
00:15:47,540 --> 00:15:52,069
manager at<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> to managers the</font>

295
00:15:49,880 --> 00:15:56,360
audio the microphone and other audio

296
00:15:52,069 --> 00:16:00,910
<font color="#E5E5E5">related devices so this system service</font>

297
00:15:56,360 --> 00:16:04,069
is responsible<font color="#CCCCCC"> for saving</font><font color="#E5E5E5"> the volume and</font>

298
00:16:00,910 --> 00:16:07,069
fortunately inside the sandbox<font color="#E5E5E5"> for a</font>

299
00:16:04,069 --> 00:16:09,649
file we also find the web process can

300
00:16:07,069 --> 00:16:13,790
directly talk with this system<font color="#E5E5E5"> service</font>

301
00:16:09,649 --> 00:16:16,519
so sing sing get easier so we<font color="#E5E5E5"> just send</font>

302
00:16:13,790 --> 00:16:20,449
some message<font color="#CCCCCC"> to this system service and</font>

303
00:16:16,519 --> 00:16:26,389
ask this service to<font color="#E5E5E5"> change the</font><font color="#CCCCCC"> volume so</font>

304
00:16:20,449 --> 00:16:29,920
we<font color="#E5E5E5"> can trigger the notification</font><font color="#CCCCCC"> ok this</font>

305
00:16:26,389 --> 00:16:33,410
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> steps the the snapshot of the</font>

306
00:16:29,920 --> 00:16:36,439
profile<font color="#E5E5E5"> sandbox</font><font color="#CCCCCC"> provides the last line</font>

307
00:16:33,410 --> 00:16:38,630
here<font color="#E5E5E5"> define what kind of message or what</font>

308
00:16:36,439 --> 00:16:43,569
kind of system service<font color="#E5E5E5"> the web process</font>

309
00:16:38,630 --> 00:16:48,079
can directly<font color="#CCCCCC"> talk so to challenge</font>

310
00:16:43,569 --> 00:16:51,019
challenge<font color="#CCCCCC"> to how</font><font color="#E5E5E5"> can we</font><font color="#CCCCCC"> lick</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ka iOS</font>

311
00:16:48,079 --> 00:16:54,439
<font color="#CCCCCC">our slide</font><font color="#E5E5E5"> so how to make</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> leak the</font>

312
00:16:51,019 --> 00:16:59,660
data meaningful<font color="#CCCCCC"> recall</font><font color="#E5E5E5"> then we can read</font>

313
00:16:54,439 --> 00:17:03,050
it by data and<font color="#E5E5E5"> offset of 38 in hex from</font>

314
00:16:59,660 --> 00:17:08,379
a straight object in the<font color="#CCCCCC"> catalog 3072</font>

315
00:17:03,050 --> 00:17:11,809
zone so what we did is we annually

316
00:17:08,380 --> 00:17:12,770
<font color="#CCCCCC">manually analyze a lot</font><font color="#E5E5E5"> of objects in the</font>

317
00:17:11,809 --> 00:17:20,178
<font color="#E5E5E5">same zone</font>

318
00:17:12,770 --> 00:17:22,970
I mean<font color="#E5E5E5"> kill kill or 72</font><font color="#CCCCCC"> and from the many</font>

319
00:17:20,179 --> 00:17:27,140
objects<font color="#CCCCCC"> we found a very interesting</font><font color="#E5E5E5"> one</font>

320
00:17:22,970 --> 00:17:29,510
called<font color="#CCCCCC"> OSC right and it's also in</font><font color="#E5E5E5"> the</font>

321
00:17:27,140 --> 00:17:35,539
same zone and if you look at the member

322
00:17:29,510 --> 00:17:40,070
and offset 38<font color="#E5E5E5"> in fact is it's called</font>

323
00:17:35,539 --> 00:17:43,010
<font color="#E5E5E5">editor in the red box the enter itself</font>

324
00:17:40,070 --> 00:17:46,850
<font color="#CCCCCC">actually is a</font><font color="#E5E5E5"> function pointer</font>

325
00:17:43,010 --> 00:17:50,510
so the definition<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the editor is in</font>

326
00:17:46,850 --> 00:17:53,659
the end is in the end of<font color="#E5E5E5"> the slide so</font>

327
00:17:50,510 --> 00:17:56,030
basically we can<font color="#E5E5E5"> create a lot so somehow</font>

328
00:17:53,660 --> 00:17:59,120
we sing some data to the<font color="#CCCCCC"> kernel first</font>

329
00:17:56,030 --> 00:18:02,299
and trigger the the kernel to create a

330
00:17:59,120 --> 00:18:04,549
lot of<font color="#E5E5E5"> OSE right</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> and then the</font>

331
00:18:02,299 --> 00:18:06,790
carnival thing when the kind<font color="#E5E5E5"> of finish</font>

332
00:18:04,549 --> 00:18:10,460
the job<font color="#E5E5E5"> hey</font><font color="#CCCCCC"> will free such Oso</font>

333
00:18:06,790 --> 00:18:13,340
<font color="#CCCCCC">sterilized objects and then we can apply</font>

334
00:18:10,460 --> 00:18:16,190
<font color="#E5E5E5">the info leak back and we can get the I</font>

335
00:18:13,340 --> 00:18:19,639
<font color="#E5E5E5">initialized data back and the I</font>

336
00:18:16,190 --> 00:18:23,299
initialized data<font color="#E5E5E5"> happens to be the value</font>

337
00:18:19,640 --> 00:18:26,450
<font color="#E5E5E5">of the editor field so we get a function</font>

338
00:18:23,299 --> 00:18:29,270
<font color="#E5E5E5">pointer value in the kernel from that</font>

339
00:18:26,450 --> 00:18:31,820
<font color="#E5E5E5">value we</font><font color="#CCCCCC"> can further the holy arch of</font>

340
00:18:29,270 --> 00:18:35,770
the<font color="#E5E5E5"> memory catch the kind of catch so</font>

341
00:18:31,820 --> 00:18:40,850
from here we<font color="#E5E5E5"> bypass to the kernel</font>

342
00:18:35,770 --> 00:18:44,240
address layout randomization<font color="#CCCCCC"> so let's go</font>

343
00:18:40,850 --> 00:18:47,000
to the second one<font color="#CCCCCC"> I say</font><font color="#E5E5E5"> I initialize the</font>

344
00:18:44,240 --> 00:18:53,000
stack variable it<font color="#E5E5E5"> will lead to</font><font color="#CCCCCC"> actually</font>

345
00:18:47,000 --> 00:18:57,049
code execution and the back in the<font color="#CCCCCC"> EMD</font>

346
00:18:53,000 --> 00:19:00,130
<font color="#CCCCCC">graphics driver</font><font color="#E5E5E5"> and I think</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> four</font>

347
00:18:57,049 --> 00:19:03,559
different<font color="#CCCCCC"> Hardware modal's</font><font color="#E5E5E5"> macro</font><font color="#CCCCCC"> MacBook</font>

348
00:19:00,130 --> 00:19:07,940
<font color="#CCCCCC">you may find</font><font color="#E5E5E5"> different graphic driver</font>

349
00:19:03,559 --> 00:19:11,600
<font color="#CCCCCC">windows like</font><font color="#E5E5E5"> Intel all OMB only on some</font>

350
00:19:07,940 --> 00:19:14,030
other<font color="#E5E5E5"> vendors</font><font color="#CCCCCC"> and I think the common</font>

351
00:19:11,600 --> 00:19:16,309
implementation is called<font color="#CCCCCC"> El accelerator</font>

352
00:19:14,030 --> 00:19:19,850
family<font color="#CCCCCC"> too</font><font color="#E5E5E5"> and different winter they</font>

353
00:19:16,309 --> 00:19:22,610
will in current from this basic<font color="#E5E5E5"> family</font>

354
00:19:19,850 --> 00:19:26,750
and how<font color="#CCCCCC"> their different implementations</font>

355
00:19:22,610 --> 00:19:30,350
and<font color="#E5E5E5"> the variability in the is in the AMD</font>

356
00:19:26,750 --> 00:19:33,440
<font color="#CCCCCC">Rendon acts something dot keep kind</font><font color="#E5E5E5"> of</font>

357
00:19:30,350 --> 00:19:37,090
extension<font color="#E5E5E5"> the X is a</font><font color="#CCCCCC"> number it may be</font>

358
00:19:33,440 --> 00:19:37,090
<font color="#E5E5E5">different on different hardware model</font>

359
00:19:37,179 --> 00:19:45,110
let's go ahead<font color="#E5E5E5"> okay so the AMD</font>

360
00:19:42,230 --> 00:19:47,299
accelerator can create a different<font color="#CCCCCC"> user</font>

361
00:19:45,110 --> 00:19:50,120
clients<font color="#E5E5E5"> that's also the interesting part</font>

362
00:19:47,299 --> 00:19:53,270
of this<font color="#CCCCCC"> one ability</font><font color="#E5E5E5"> and that's that's</font>

363
00:19:50,120 --> 00:19:55,158
<font color="#E5E5E5">why a simple father does not work for to</font>

364
00:19:53,270 --> 00:19:56,720
find<font color="#E5E5E5"> this bug also the</font><font color="#CCCCCC"> packet is very</font>

365
00:19:55,159 --> 00:19:59,330
simple

366
00:19:56,720 --> 00:20:03,160
so to use the clients are involved in

367
00:19:59,330 --> 00:20:06,679
this one<font color="#CCCCCC"> ability one is EMV</font><font color="#E5E5E5"> sagale</font>

368
00:20:03,160 --> 00:20:09,410
context<font color="#E5E5E5"> and the one is shared user</font>

369
00:20:06,680 --> 00:20:12,320
client<font color="#E5E5E5"> so if you look at the</font><font color="#CCCCCC"> our service</font>

370
00:20:09,410 --> 00:20:15,980
<font color="#E5E5E5">open the API and the third parameter is</font>

371
00:20:12,320 --> 00:20:19,220
a<font color="#E5E5E5"> integer type so if you pass different</font>

372
00:20:15,980 --> 00:20:20,960
type into the API<font color="#E5E5E5"> the the kernel side</font>

373
00:20:19,220 --> 00:20:26,210
will create a<font color="#E5E5E5"> different type</font><font color="#CCCCCC"> of user</font>

374
00:20:20,960 --> 00:20:32,180
times and those two types<font color="#CCCCCC"> one is</font><font color="#E5E5E5"> one and</font>

375
00:20:26,210 --> 00:20:35,510
<font color="#E5E5E5">one is 6 so the</font><font color="#CCCCCC"> contacts user client</font>

376
00:20:32,180 --> 00:20:38,960
<font color="#E5E5E5">will not be started until you connect a</font>

377
00:20:35,510 --> 00:20:42,170
shared<font color="#E5E5E5"> use client so basically</font><font color="#CCCCCC"> there's a</font>

378
00:20:38,960 --> 00:20:46,610
<font color="#E5E5E5">very barely used in the land Apio</font>

379
00:20:42,170 --> 00:20:49,670
connect and<font color="#E5E5E5"> the client so almost I mean</font>

380
00:20:46,610 --> 00:20:53,120
<font color="#E5E5E5">most I reviewed many kernel drummers</font>

381
00:20:49,670 --> 00:20:57,860
maybe only<font color="#CCCCCC"> L accelerate is the one</font><font color="#E5E5E5"> using</font>

382
00:20:53,120 --> 00:21:00,860
this API<font color="#E5E5E5"> you will rely on this API so if</font>

383
00:20:57,860 --> 00:21:01,550
you write a<font color="#CCCCCC"> very simple father</font><font color="#E5E5E5"> and you</font>

384
00:21:00,860 --> 00:21:03,740
<font color="#CCCCCC">don't know</font>

385
00:21:01,550 --> 00:21:08,780
use this API so you won't trigger the

386
00:21:03,740 --> 00:21:12,410
back and also the contact user<font color="#CCCCCC"> kind will</font>

387
00:21:08,780 --> 00:21:14,420
support many external measures that

388
00:21:12,410 --> 00:21:17,990
<font color="#E5E5E5">allows the user land program to invoke</font>

389
00:21:14,420 --> 00:21:21,350
and the user land program can<font color="#E5E5E5"> use the</font>

390
00:21:17,990 --> 00:21:24,170
API<font color="#CCCCCC"> I'll connect</font><font color="#E5E5E5"> commenter and the</font>

391
00:21:21,350 --> 00:21:27,139
second parameter selector<font color="#CCCCCC"> it's used to</font>

392
00:21:24,170 --> 00:21:33,170
tell the colonel<font color="#E5E5E5"> object which function</font>

393
00:21:27,140 --> 00:21:36,050
<font color="#CCCCCC">they want</font><font color="#E5E5E5"> to invoke so most user client</font>

394
00:21:33,170 --> 00:21:39,220
will use selector starting from<font color="#CCCCCC"> zero</font>

395
00:21:36,050 --> 00:21:44,480
<font color="#E5E5E5">like zero one</font><font color="#CCCCCC"> two three but the AMD</font>

396
00:21:39,220 --> 00:21:48,260
<font color="#CCCCCC">grower use selector 200 starting from</font>

397
00:21:44,480 --> 00:21:53,570
200 in hex<font color="#E5E5E5"> so the back happens in the</font>

398
00:21:48,260 --> 00:21:56,030
selector 201 in hex so if you pass the

399
00:21:53,570 --> 00:21:56,810
lecture<font color="#E5E5E5"> 201</font><font color="#CCCCCC"> it will reach function</font>

400
00:21:56,030 --> 00:21:59,330
called or something

401
00:21:56,810 --> 00:22:01,340
balla balla balla surface copy this

402
00:21:59,330 --> 00:22:04,970
function is<font color="#CCCCCC"> supposed to look up a</font>

403
00:22:01,340 --> 00:22:07,730
resource object<font color="#E5E5E5"> according to some input</font>

404
00:22:04,970 --> 00:22:10,080
index that can be controlled by<font color="#CCCCCC"> the user</font>

405
00:22:07,730 --> 00:22:12,570
and the process to<font color="#E5E5E5"> you</font>

406
00:22:10,080 --> 00:22:14,790
the resource<font color="#CCCCCC"> object and the lookup</font>

407
00:22:12,570 --> 00:22:19,740
<font color="#CCCCCC">Francis happens</font><font color="#E5E5E5"> in the local resource</font>

408
00:22:14,790 --> 00:22:21,149
function and in the<font color="#CCCCCC"> in the compiled code</font>

409
00:22:19,740 --> 00:22:26,010
<font color="#E5E5E5">you can see the end of the third</font>

410
00:22:21,150 --> 00:22:28,260
parameter<font color="#CCCCCC"> wave 50 and the</font><font color="#E5E5E5"> wave 51 they</font>

411
00:22:26,010 --> 00:22:29,690
are not initialized<font color="#CCCCCC"> we understand</font>

412
00:22:28,260 --> 00:22:33,810
basically there are two pointers but

413
00:22:29,690 --> 00:22:35,640
without<font color="#CCCCCC"> the initialization the lookup</font>

414
00:22:33,810 --> 00:22:38,940
resource function may fail if you

415
00:22:35,640 --> 00:22:41,070
<font color="#CCCCCC">improve the invalid index like a super</font>

416
00:22:38,940 --> 00:22:44,730
<font color="#CCCCCC">lock in Dexter there's no such a</font><font color="#E5E5E5"> result</font>

417
00:22:41,070 --> 00:22:46,740
<font color="#E5E5E5">and lookup resource will fail</font><font color="#CCCCCC"> so but</font>

418
00:22:44,730 --> 00:22:49,680
<font color="#E5E5E5">lookup resource internally won't</font>

419
00:22:46,740 --> 00:22:52,470
initialize the two<font color="#E5E5E5"> pointers and the</font>

420
00:22:49,680 --> 00:22:56,340
surface copy<font color="#E5E5E5"> also</font><font color="#CCCCCC"> doesn't check the</font>

421
00:22:52,470 --> 00:23:00,600
<font color="#CCCCCC">return value from</font><font color="#E5E5E5"> lookup resource so if</font>

422
00:22:56,340 --> 00:23:03,600
you simply supply invalid index you will

423
00:23:00,600 --> 00:23:07,620
trigger a panic so basically the the two

424
00:23:03,600 --> 00:23:10,409
variable wave 50<font color="#CCCCCC"> andrey</font><font color="#E5E5E5"> 51 will use the</font>

425
00:23:07,620 --> 00:23:13,560
<font color="#CCCCCC">sum sum</font><font color="#E5E5E5"> value left on a stack as a</font>

426
00:23:10,410 --> 00:23:16,800
pointer and use that<font color="#CCCCCC"> value to to</font>

427
00:23:13,560 --> 00:23:20,010
continue<font color="#E5E5E5"> some virtual function</font><font color="#CCCCCC"> hole so</font>

428
00:23:16,800 --> 00:23:23,330
it will easily trigger a panic<font color="#E5E5E5"> so now</font>

429
00:23:20,010 --> 00:23:26,070
the<font color="#E5E5E5"> challenge is</font><font color="#CCCCCC"> how can we make the</font>

430
00:23:23,330 --> 00:23:29,879
initialized data meaningful<font color="#E5E5E5"> so how can</font>

431
00:23:26,070 --> 00:23:34,370
we put some some data there<font color="#E5E5E5"> and make the</font>

432
00:23:29,880 --> 00:23:40,860
uninitialized value to use our our<font color="#E5E5E5"> data</font>

433
00:23:34,370 --> 00:23:44,489
so I reviewed many<font color="#E5E5E5"> cool new drivers I</font>

434
00:23:40,860 --> 00:23:47,969
happen to find a very<font color="#CCCCCC"> interesting one</font>

435
00:23:44,490 --> 00:23:53,550
called<font color="#CCCCCC"> 8 GPM is maybe I / graphic for</font>

436
00:23:47,970 --> 00:23:56,430
manager<font color="#E5E5E5"> and which servers is lecture 7 3</font>

437
00:23:53,550 --> 00:24:00,840
3 3<font color="#E5E5E5"> in this function you will see that</font>

438
00:23:56,430 --> 00:24:07,080
actually<font color="#E5E5E5"> it will copy up to 4 Kbytes</font>

439
00:24:00,840 --> 00:24:09,000
<font color="#E5E5E5">user input</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> kind of stack so if</font>

440
00:24:07,080 --> 00:24:12,210
you look<font color="#CCCCCC"> into the compiled code I</font>

441
00:24:09,000 --> 00:24:14,400
highlighted<font color="#E5E5E5"> a screen copy basically the</font>

442
00:24:12,210 --> 00:24:18,150
student<font color="#E5E5E5"> Club the soft buffer is inside</font>

443
00:24:14,400 --> 00:24:23,220
the it's controlled<font color="#E5E5E5"> by the kernel and</font><font color="#CCCCCC"> so</font>

444
00:24:18,150 --> 00:24:26,760
it will copy<font color="#E5E5E5"> almost</font><font color="#CCCCCC"> at most</font>

445
00:24:23,220 --> 00:24:30,150
4 Kbytes<font color="#CCCCCC"> non-zero data to the</font><font color="#E5E5E5"> kind of</font>

446
00:24:26,760 --> 00:24:32,310
<font color="#E5E5E5">stack so what we can do is which by the</font>

447
00:24:30,150 --> 00:24:35,310
way<font color="#E5E5E5"> this drummer can also be talked by</font>

448
00:24:32,310 --> 00:24:37,350
<font color="#E5E5E5">web process so we just invoke this</font>

449
00:24:35,310 --> 00:24:40,260
<font color="#CCCCCC">function first and</font><font color="#E5E5E5"> we can change the</font>

450
00:24:37,350 --> 00:24:43,860
whole<font color="#CCCCCC"> stack</font><font color="#E5E5E5"> and then we can trigger the</font>

451
00:24:40,260 --> 00:24:46,020
we can trigger the initialize the issue

452
00:24:43,860 --> 00:24:49,530
and we can can choose a to stack

453
00:24:46,020 --> 00:24:52,110
variable so<font color="#CCCCCC"> now we have two choices one</font>

454
00:24:49,530 --> 00:24:55,230
<font color="#CCCCCC">is we mix so what kind of data we want</font>

455
00:24:52,110 --> 00:24:58,830
<font color="#CCCCCC">to use we can make the pointer pointing</font>

456
00:24:55,230 --> 00:25:01,050
to some thick object we put on us on<font color="#E5E5E5"> the</font>

457
00:24:58,830 --> 00:25:03,960
<font color="#E5E5E5">heap</font><font color="#CCCCCC"> or we can make the</font><font color="#E5E5E5"> pointer pointing</font>

458
00:25:01,050 --> 00:25:06,690
to some real object and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font>

459
00:25:03,960 --> 00:25:09,390
trigger<font color="#E5E5E5"> some type computing it's hard so</font>

460
00:25:06,690 --> 00:25:11,610
we<font color="#E5E5E5"> prefer the first one we make the</font>

461
00:25:09,390 --> 00:25:14,810
pointer pointing to you somewhere on the

462
00:25:11,610 --> 00:25:20,479
heap and we can we can<font color="#E5E5E5"> occupy that</font>

463
00:25:14,810 --> 00:25:23,370
address<font color="#E5E5E5"> and put our data there so</font>

464
00:25:20,480 --> 00:25:25,500
remember the info leak bug<font color="#E5E5E5"> so basically</font>

465
00:25:23,370 --> 00:25:29,310
you<font color="#E5E5E5"> can also use that leverage that bug</font>

466
00:25:25,500 --> 00:25:31,980
<font color="#E5E5E5">to leak some keep it address but</font><font color="#CCCCCC"> we use</font>

467
00:25:29,310 --> 00:25:36,740
a simple<font color="#CCCCCC"> one so we</font><font color="#E5E5E5"> just to do a</font>

468
00:25:31,980 --> 00:25:39,320
<font color="#CCCCCC">brute-force</font><font color="#E5E5E5"> our process can spray a huge</font>

469
00:25:36,740 --> 00:25:43,320
chunk<font color="#E5E5E5"> of data</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> several gigabytes</font>

470
00:25:39,320 --> 00:25:46,050
<font color="#E5E5E5">data into the kernel</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> that case the</font>

471
00:25:43,320 --> 00:25:49,649
<font color="#CCCCCC">hit randomization is very weak because</font>

472
00:25:46,050 --> 00:25:53,040
<font color="#E5E5E5">if you already allocated so much and the</font>

473
00:25:49,650 --> 00:25:56,850
user<font color="#CCCCCC"> control</font><font color="#E5E5E5"> data will be load located</font>

474
00:25:53,040 --> 00:26:00,030
and a fixed address<font color="#E5E5E5"> so we can we achieve</font>

475
00:25:56,850 --> 00:26:03,389
<font color="#E5E5E5">this</font><font color="#CCCCCC"> by spring six objects</font><font color="#E5E5E5"> we just use</font>

476
00:26:00,030 --> 00:26:07,230
<font color="#CCCCCC">vmf copy data</font><font color="#E5E5E5"> is a typical hip spray</font>

477
00:26:03,390 --> 00:26:10,080
technique<font color="#CCCCCC"> our</font><font color="#E5E5E5"> Mac OS</font><font color="#CCCCCC"> and iOS</font><font color="#E5E5E5"> so it's</font>

478
00:26:07,230 --> 00:26:14,670
<font color="#E5E5E5">very fast and has very small side</font>

479
00:26:10,080 --> 00:26:18,600
effects on hip and we can<font color="#CCCCCC"> pixely control</font>

480
00:26:14,670 --> 00:26:20,880
<font color="#E5E5E5">up to</font><font color="#CCCCCC"> a size and</font><font color="#E5E5E5"> the content and the</font>

481
00:26:18,600 --> 00:26:23,939
only<font color="#E5E5E5"> only weakness is that so for</font>

482
00:26:20,880 --> 00:26:27,450
example we<font color="#E5E5E5"> can we can spray for key page</font>

483
00:26:23,940 --> 00:26:30,440
<font color="#E5E5E5">and I mean for</font><font color="#CCCCCC"> each for each element</font>

484
00:26:27,450 --> 00:26:33,510
with the site is<font color="#CCCCCC"> 4k but another</font><font color="#E5E5E5"> painting</font>

485
00:26:30,440 --> 00:26:35,760
<font color="#CCCCCC">18 bytes</font><font color="#E5E5E5"> in hex</font><font color="#CCCCCC"> we cannot control</font>

486
00:26:33,510 --> 00:26:36,970
because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel will put some</font>

487
00:26:35,760 --> 00:26:41,110
<font color="#E5E5E5">metadata there</font>

488
00:26:36,970 --> 00:26:44,110
but it doesn't<font color="#CCCCCC"> affect our</font><font color="#E5E5E5"> exploit so</font>

489
00:26:41,110 --> 00:26:47,799
basically we<font color="#CCCCCC"> create a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of page like</font>

490
00:26:44,110 --> 00:26:50,530
this is<font color="#CCCCCC"> focus inside and ended up</font>

491
00:26:47,799 --> 00:26:53,789
<font color="#E5E5E5">gaining that the first</font><font color="#CCCCCC"> attendee</font><font color="#E5E5E5"> in hex</font>

492
00:26:50,530 --> 00:26:58,809
cannot be controlled<font color="#E5E5E5"> but the rest piece</font>

493
00:26:53,789 --> 00:27:01,658
are<font color="#E5E5E5"> also are all controlled</font><font color="#CCCCCC"> by us so we</font>

494
00:26:58,809 --> 00:27:04,809
can make a fake virtual pointer there

495
00:27:01,659 --> 00:27:09,929
and the pointing to the lead of stack

496
00:27:04,809 --> 00:27:12,970
<font color="#E5E5E5">and after we trigger the</font><font color="#CCCCCC"> I initialized</font>

497
00:27:09,929 --> 00:27:14,799
slack variable it will<font color="#CCCCCC"> evoke somewhat</font><font color="#E5E5E5"> to</font>

498
00:27:12,970 --> 00:27:18,299
function and we<font color="#CCCCCC"> can make the virtual</font>

499
00:27:14,799 --> 00:27:22,418
<font color="#E5E5E5">function point into some gadgets there</font>

500
00:27:18,299 --> 00:27:25,780
so in the<font color="#CCCCCC"> hour go option we first see</font>

501
00:27:22,419 --> 00:27:29,799
all the registers<font color="#E5E5E5"> and and change the</font>

502
00:27:25,780 --> 00:27:34,350
stack<font color="#E5E5E5"> so</font><font color="#CCCCCC"> on the latest version of Mac oh</font>

503
00:27:29,799 --> 00:27:37,780
I mean the MacBook<font color="#E5E5E5"> there are two very</font>

504
00:27:34,350 --> 00:27:40,899
significant protection<font color="#CCCCCC"> of</font><font color="#E5E5E5"> exploited</font>

505
00:27:37,780 --> 00:27:44,110
medications<font color="#E5E5E5"> one is called snap as</font>

506
00:27:40,900 --> 00:27:47,880
immunity and the wires map<font color="#E5E5E5"> as I'm ap</font>

507
00:27:44,110 --> 00:27:50,949
<font color="#CCCCCC">they are used to protect</font><font color="#E5E5E5"> the kernel from</font>

508
00:27:47,880 --> 00:27:54,280
executing code in<font color="#E5E5E5"> your</font><font color="#CCCCCC"> land</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the one</font>

509
00:27:50,950 --> 00:27:57,370
is you to protect the system<font color="#E5E5E5"> the kernel</font>

510
00:27:54,280 --> 00:28:00,039
from accessing the data in the kernel

511
00:27:57,370 --> 00:28:04,530
<font color="#E5E5E5">you know you know in the other land</font>

512
00:28:00,039 --> 00:28:08,140
<font color="#E5E5E5">sorry but we</font><font color="#CCCCCC"> can't disable the</font><font color="#E5E5E5"> two</font>

513
00:28:04,530 --> 00:28:11,220
protections by I will show you the<font color="#CCCCCC"> lock</font>

514
00:28:08,140 --> 00:28:14,590
guarded after we disable<font color="#CCCCCC"> the tube</font>

515
00:28:11,220 --> 00:28:17,590
medications<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> easily change the</font>

516
00:28:14,590 --> 00:28:20,110
program<font color="#CCCCCC"> counter to a user land share</font>

517
00:28:17,590 --> 00:28:23,590
code<font color="#E5E5E5"> so we don't have to drop</font><font color="#CCCCCC"> any more</font>

518
00:28:20,110 --> 00:28:26,530
<font color="#E5E5E5">we just jump into the the the code page</font>

519
00:28:23,590 --> 00:28:29,309
in the in our own process<font color="#E5E5E5"> and then we</font>

520
00:28:26,530 --> 00:28:32,918
can run the code in the inner corner

521
00:28:29,309 --> 00:28:36,100
after we finish the whole exploitation

522
00:28:32,919 --> 00:28:39,820
we can really enable smart<font color="#E5E5E5"> - map the</font>

523
00:28:36,100 --> 00:28:45,789
<font color="#CCCCCC">cost read exception return - to exit to</font>

524
00:28:39,820 --> 00:28:48,668
<font color="#CCCCCC">return so SMAP and samantha implemented</font>

525
00:28:45,789 --> 00:28:50,710
the base<font color="#E5E5E5"> general hardware so they are</font>

526
00:28:48,669 --> 00:28:56,919
special we just<font color="#CCCCCC"> saw record CR</font>

527
00:28:50,710 --> 00:28:59,590
all that the 21st and the 22nd base of

528
00:28:56,919 --> 00:29:03,820
the register<font color="#CCCCCC"> indicate the status</font><font color="#E5E5E5"> of the</font>

529
00:28:59,590 --> 00:29:04,260
CPU<font color="#CCCCCC"> I mean weathers SME POS MEAP</font><font color="#E5E5E5"> enabled</font>

530
00:29:03,820 --> 00:29:07,029
or not

531
00:29:04,260 --> 00:29:09,520
<font color="#E5E5E5">so basically we</font><font color="#CCCCCC"> can find</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> guy days</font>

532
00:29:07,029 --> 00:29:12,039
like this<font color="#E5E5E5"> so the first one is how to</font>

533
00:29:09,520 --> 00:29:14,740
agree to<font color="#E5E5E5"> see our phone so basically some</font>

534
00:29:12,039 --> 00:29:17,020
<font color="#CCCCCC">cup</font><font color="#E5E5E5"> if you find some gadget</font><font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> it</font>

535
00:29:14,740 --> 00:29:18,850
moves<font color="#CCCCCC"> therefore to re</font><font color="#E5E5E5"> X and the return</font>

536
00:29:17,020 --> 00:29:21,908
<font color="#E5E5E5">okay you'll find</font><font color="#CCCCCC"> the gadget you can</font>

537
00:29:18,850 --> 00:29:24,459
<font color="#E5E5E5">register</font><font color="#CCCCCC"> for and then you can you can</font>

538
00:29:21,909 --> 00:29:29,230
change the<font color="#CCCCCC"> CFL value and you can mutate</font>

539
00:29:24,460 --> 00:29:32,260
the 21st and 22nd this and then you

540
00:29:29,230 --> 00:29:36,429
restore it<font color="#E5E5E5"> when you can disable</font><font color="#CCCCCC"> assuming</font>

541
00:29:32,260 --> 00:29:38,320
you can<font color="#CCCCCC"> sign as</font><font color="#E5E5E5"> an AP and the</font>

542
00:29:36,429 --> 00:29:42,070
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing is the kernel stack</font>

543
00:29:38,320 --> 00:29:44,799
used so I will time<font color="#E5E5E5"> if you from the user</font>

544
00:29:42,070 --> 00:29:49,299
land<font color="#E5E5E5"> inter to enter the kernel kernel</font>

545
00:29:44,799 --> 00:29:55,000
mode<font color="#E5E5E5"> we believe that it will use the</font>

546
00:29:49,299 --> 00:29:57,250
thread own threads<font color="#E5E5E5"> own kernel stack but</font>

547
00:29:55,000 --> 00:29:59,860
the truth is<font color="#E5E5E5"> our Mac wise there is a</font>

548
00:29:57,250 --> 00:30:02,710
common kernel stack so every thread may

549
00:29:59,860 --> 00:30:05,080
use<font color="#CCCCCC"> that stack so if you want to change</font>

550
00:30:02,710 --> 00:30:08,559
the kernel stack<font color="#E5E5E5"> you mean you need to</font>

551
00:30:05,080 --> 00:30:11,110
generate many times so that<font color="#E5E5E5"> you can have</font>

552
00:30:08,559 --> 00:30:13,450
higher chance to tender the post<font color="#CCCCCC"> the</font>

553
00:30:11,110 --> 00:30:17,020
kernel stack and also the thread stack

554
00:30:13,450 --> 00:30:22,960
and there are some also<font color="#E5E5E5"> log balance</font><font color="#CCCCCC"> is</font>

555
00:30:17,020 --> 00:30:25,779
problem but it's also easy to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> ok</font>

556
00:30:22,960 --> 00:30:28,500
let's go ahead to<font color="#CCCCCC"> the third</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also</font>

557
00:30:25,779 --> 00:30:31,510
<font color="#E5E5E5">the last one it's a hippo flow issue</font>

558
00:30:28,500 --> 00:30:35,860
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not a simple program I</font>

559
00:30:31,510 --> 00:30:39,908
want to<font color="#CCCCCC"> do like there's there's no</font>

560
00:30:35,860 --> 00:30:42,539
signal no obvious program error<font color="#E5E5E5"> it's</font>

561
00:30:39,909 --> 00:30:46,380
caused by a fundamental issue<font color="#E5E5E5"> in</font><font color="#CCCCCC"> LK</font>

562
00:30:42,539 --> 00:30:50,408
<font color="#CCCCCC">tashera mechanism that means this</font>

563
00:30:46,380 --> 00:30:51,640
fundamental issue without<font color="#E5E5E5"> him many many</font>

564
00:30:50,409 --> 00:30:54,549
kernel bugs

565
00:30:51,640 --> 00:30:57,580
the issue was reported by<font color="#CCCCCC"> King lamb to</font>

566
00:30:54,549 --> 00:31:00,690
<font color="#E5E5E5">Apple they find some crush</font><font color="#CCCCCC"> maybe they</font>

567
00:30:57,580 --> 00:31:04,580
found the<font color="#CCCCCC"> Palio is not easy to</font><font color="#E5E5E5"> exploit</font>

568
00:31:00,690 --> 00:31:09,649
<font color="#E5E5E5">but the truth is they burned away</font>

569
00:31:04,580 --> 00:31:12,799
good bug so remember<font color="#E5E5E5"> I'll connect call</font>

570
00:31:09,649 --> 00:31:16,870
method is used to<font color="#E5E5E5"> send all receive data</font>

571
00:31:12,799 --> 00:31:20,539
with<font color="#E5E5E5"> I owe you the</font><font color="#CCCCCC"> client object</font><font color="#E5E5E5"> and</font>

572
00:31:16,870 --> 00:31:22,789
this is this<font color="#E5E5E5"> diagram indicated the whole</font>

573
00:31:20,539 --> 00:31:26,090
workflow<font color="#E5E5E5"> so basically there are some</font>

574
00:31:22,789 --> 00:31:29,870
user<font color="#CCCCCC"> high-level userland API like I will</font>

575
00:31:26,090 --> 00:31:32,209
connect scanner method or struct method

576
00:31:29,870 --> 00:31:35,389
and<font color="#E5E5E5"> we adjust</font><font color="#CCCCCC"> to some right first</font>

577
00:31:32,210 --> 00:31:40,130
<font color="#E5E5E5">eventually they will call a user net API</font>

578
00:31:35,390 --> 00:31:42,620
code this one<font color="#CCCCCC"> I will connect method and</font>

579
00:31:40,130 --> 00:31:45,139
the corresponding implantation in the

580
00:31:42,620 --> 00:31:48,399
<font color="#E5E5E5">kernel is this one with the blank box</font>

581
00:31:45,139 --> 00:31:52,219
one so let<font color="#E5E5E5"> me explain such parameters</font>

582
00:31:48,399 --> 00:31:55,340
<font color="#CCCCCC">the first one is connection which means</font>

583
00:31:52,220 --> 00:31:57,799
which<font color="#CCCCCC"> user client</font><font color="#E5E5E5"> you want to you want</font>

584
00:31:55,340 --> 00:32:00,019
<font color="#E5E5E5">to send it to and the second one is</font>

585
00:31:57,799 --> 00:32:03,408
selector we already see<font color="#CCCCCC"> that so the</font>

586
00:32:00,019 --> 00:32:06,440
selector will tell the<font color="#CCCCCC"> the drower</font><font color="#E5E5E5"> which</font>

587
00:32:03,409 --> 00:32:09,559
method you want<font color="#E5E5E5"> to call and the third</font>

588
00:32:06,440 --> 00:32:13,419
one scalar input it will<font color="#E5E5E5"> store some</font>

589
00:32:09,559 --> 00:32:18,590
integer values it can store up to

590
00:32:13,419 --> 00:32:19,639
<font color="#CCCCCC">sixteen using 64</font><font color="#E5E5E5"> integers and</font><font color="#CCCCCC"> scalar</font>

591
00:32:18,590 --> 00:32:24,220
<font color="#E5E5E5">input count</font>

592
00:32:19,639 --> 00:32:28,908
indicated the<font color="#E5E5E5"> number of the integers and</font>

593
00:32:24,220 --> 00:32:33,950
the IMP<font color="#E5E5E5"> and input is a buffer the length</font>

594
00:32:28,909 --> 00:32:37,250
is up to<font color="#E5E5E5"> 4k so if you want</font><font color="#CCCCCC"> only want to</font>

595
00:32:33,950 --> 00:32:40,760
send<font color="#E5E5E5"> small chunk of data then you can</font>

596
00:32:37,250 --> 00:32:42,350
<font color="#E5E5E5">use the IMP and input you just</font><font color="#CCCCCC"> embed the</font>

597
00:32:40,760 --> 00:32:44,539
data in the message and<font color="#E5E5E5"> send it</font><font color="#CCCCCC"> to</font>

598
00:32:42,350 --> 00:32:46,459
<font color="#CCCCCC">cranium</font><font color="#E5E5E5"> but what would happen</font><font color="#CCCCCC"> if you</font>

599
00:32:44,539 --> 00:32:50,539
<font color="#E5E5E5">want to send a huge chunk of data to the</font>

600
00:32:46,460 --> 00:32:54,620
kernel<font color="#CCCCCC"> so okay to support the option</font>

601
00:32:50,539 --> 00:32:57,289
called<font color="#CCCCCC"> Oh L input and also</font><font color="#E5E5E5"> or input size</font>

602
00:32:54,620 --> 00:32:59,689
so basically you prove the<font color="#E5E5E5"> user land</font>

603
00:32:57,289 --> 00:33:03,220
<font color="#E5E5E5">address there and also the size layer</font>

604
00:32:59,690 --> 00:33:08,389
and you pass it so kernel and the kernel

605
00:33:03,220 --> 00:33:11,120
kernel part will map<font color="#E5E5E5"> remap your bit</font>

606
00:33:08,389 --> 00:33:14,840
address into the<font color="#E5E5E5"> kernel and make it read</font>

607
00:33:11,120 --> 00:33:15,860
only in the kernel<font color="#E5E5E5"> okay it's read only</font>

608
00:33:14,840 --> 00:33:18,168
<font color="#E5E5E5">in the kernel</font>

609
00:33:15,860 --> 00:33:20,539
but<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> writable in the</font>

610
00:33:18,169 --> 00:33:23,359
<font color="#E5E5E5">userland so there's no documentation for</font>

611
00:33:20,539 --> 00:33:26,889
this<font color="#CCCCCC"> fault the the buck is there for a</font>

612
00:33:23,359 --> 00:33:31,609
long<font color="#CCCCCC"> time since the</font><font color="#E5E5E5"> appearance of</font><font color="#CCCCCC"> since</font>

613
00:33:26,889 --> 00:33:34,908
the first<font color="#CCCCCC"> since the first</font><font color="#E5E5E5"> beginning of</font>

614
00:33:31,609 --> 00:33:37,330
<font color="#CCCCCC">elk aid so you can see that it's</font>

615
00:33:34,909 --> 00:33:40,070
implicated it share the memory and

616
00:33:37,330 --> 00:33:45,799
apparently<font color="#E5E5E5"> it will cause many many</font>

617
00:33:40,070 --> 00:33:49,460
issues<font color="#E5E5E5"> and we will share one</font><font color="#CCCCCC"> buck in our</font>

618
00:33:45,799 --> 00:33:53,149
<font color="#CCCCCC">access Excel display pipe you decline to</font>

619
00:33:49,460 --> 00:33:58,999
which also created by<font color="#CCCCCC"> L graphic Excel</font>

620
00:33:53,149 --> 00:34:00,709
<font color="#CCCCCC">etc - and I think type is full and this</font>

621
00:33:58,999 --> 00:34:04,309
user trying to support many different

622
00:34:00,710 --> 00:34:07,549
external<font color="#E5E5E5"> measures and if you review this</font>

623
00:34:04,309 --> 00:34:10,879
method and some of them will finally

624
00:34:07,549 --> 00:34:17,239
reach this function it's called<font color="#E5E5E5"> Piper</font>

625
00:34:10,879 --> 00:34:20,629
<font color="#E5E5E5">posters</font><font color="#CCCCCC"> CIC commonly ID in it</font><font color="#E5E5E5"> and the</font>

626
00:34:17,239 --> 00:34:23,868
code is<font color="#E5E5E5"> very very simple so entertaining</font>

627
00:34:20,629 --> 00:34:28,578
<font color="#E5E5E5">it will fetch</font><font color="#CCCCCC"> an integer from the</font><font color="#E5E5E5"> Ohio</font>

628
00:34:23,869 --> 00:34:31,819
input and do a heap allocation through<font color="#E5E5E5"> L</font>

629
00:34:28,579 --> 00:34:34,760
<font color="#CCCCCC">malloc and the leader it</font><font color="#E5E5E5"> will refresh</font>

630
00:34:31,819 --> 00:34:40,129
the<font color="#CCCCCC"> slides from the shared memory</font><font color="#E5E5E5"> and</font>

631
00:34:34,760 --> 00:34:44,480
use it in the memory copy so now<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think</font>

632
00:34:40,129 --> 00:34:47,779
<font color="#E5E5E5">is</font><font color="#CCCCCC"> is a perfect people flow</font><font color="#E5E5E5"> so basically</font>

633
00:34:44,480 --> 00:34:50,510
you can<font color="#CCCCCC"> create a</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> dress to risk the</font>

634
00:34:47,780 --> 00:34:54,109
time window<font color="#CCCCCC"> so once right</font><font color="#E5E5E5"> you just send</font>

635
00:34:50,510 --> 00:34:56,089
all<font color="#E5E5E5"> our input to</font><font color="#CCCCCC"> the pipe</font><font color="#E5E5E5"> user client to</font>

636
00:34:54,109 --> 00:34:58,640
the<font color="#CCCCCC"> disappoint</font><font color="#E5E5E5"> display</font><font color="#CCCCCC"> party of the</font>

637
00:34:56,089 --> 00:35:01,520
<font color="#E5E5E5">client so that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the kernel will</font>

638
00:34:58,640 --> 00:35:06,859
allocate something<font color="#E5E5E5"> and copy something</font>

639
00:35:01,520 --> 00:35:10,280
into the to the<font color="#E5E5E5"> allocated buffer and you</font>

640
00:35:06,859 --> 00:35:13,910
need a difference right like<font color="#E5E5E5"> sweat</font><font color="#CCCCCC"> -</font>

641
00:35:10,280 --> 00:35:17,869
which runs<font color="#E5E5E5"> in peril you</font><font color="#CCCCCC"> can modify the</font>

642
00:35:13,910 --> 00:35:20,480
size field<font color="#E5E5E5"> so if you can win the time</font>

643
00:35:17,869 --> 00:35:22,790
window<font color="#E5E5E5"> between the allocation and the</font>

644
00:35:20,480 --> 00:35:26,809
memory copy<font color="#E5E5E5"> you can change the sides</font>

645
00:35:22,790 --> 00:35:29,480
failed to up<font color="#CCCCCC"> trait</font><font color="#E5E5E5"> value so if you</font>

646
00:35:26,809 --> 00:35:30,750
change the size smaller than<font color="#E5E5E5"> the orange</font>

647
00:35:29,480 --> 00:35:33,650
in<font color="#E5E5E5"> the value</font>

648
00:35:30,750 --> 00:35:36,930
you can make you can<font color="#E5E5E5"> transfer it into a</font>

649
00:35:33,650 --> 00:35:39,660
<font color="#E5E5E5">embolic because the</font><font color="#CCCCCC"> Molalla buffer is</font>

650
00:35:36,930 --> 00:35:42,960
not<font color="#CCCCCC"> initialized</font><font color="#E5E5E5"> and it is supposed to</font>

651
00:35:39,660 --> 00:35:45,000
copy the same length<font color="#CCCCCC"> data</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> user land</font>

652
00:35:42,960 --> 00:35:47,850
<font color="#E5E5E5">to the heap buffer but if you change the</font>

653
00:35:45,000 --> 00:35:50,460
<font color="#E5E5E5">size smaller</font><font color="#CCCCCC"> than the original value it</font>

654
00:35:47,850 --> 00:35:52,890
will make the located buffer only

655
00:35:50,460 --> 00:35:55,590
initialized very and very<font color="#E5E5E5"> beginning so</font>

656
00:35:52,890 --> 00:35:58,830
the rest piece is not<font color="#E5E5E5"> initialized</font><font color="#CCCCCC"> so you</font>

657
00:35:55,590 --> 00:36:01,340
can get an info leak if you can change

658
00:35:58,830 --> 00:36:05,220
<font color="#CCCCCC">the size larger than the</font><font color="#E5E5E5"> original value</font>

659
00:36:01,340 --> 00:36:08,790
your data will overwrite the the next

660
00:36:05,220 --> 00:36:11,430
<font color="#CCCCCC">but</font><font color="#E5E5E5"> next object so now what we</font><font color="#CCCCCC"> can</font>

661
00:36:08,790 --> 00:36:13,680
consume<font color="#E5E5E5"> so basically you can</font><font color="#CCCCCC"> can choose</font>

662
00:36:11,430 --> 00:36:17,700
<font color="#E5E5E5">the destination buffer size because the</font>

663
00:36:13,680 --> 00:36:20,609
allocation is it<font color="#E5E5E5"> I think that the</font>

664
00:36:17,700 --> 00:36:23,669
education<font color="#CCCCCC"> use the site supplied by the</font>

665
00:36:20,610 --> 00:36:26,040
user land<font color="#E5E5E5"> so basically that means you</font>

666
00:36:23,670 --> 00:36:28,590
can prepare you can use hip spring

667
00:36:26,040 --> 00:36:33,540
technique to make some holes in the end

668
00:36:28,590 --> 00:36:35,760
of<font color="#E5E5E5"> June</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want so the</font><font color="#CCCCCC"> 80 will make the</font>

669
00:36:33,540 --> 00:36:38,009
destination buffer will be allocated in

670
00:36:35,760 --> 00:36:41,160
some of the<font color="#CCCCCC"> whole and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> object</font>

671
00:36:38,010 --> 00:36:43,980
<font color="#E5E5E5">will be controlled by you and also you</font>

672
00:36:41,160 --> 00:36:47,040
can<font color="#E5E5E5"> control the size the</font><font color="#CCCCCC"> soft buffer</font>

673
00:36:43,980 --> 00:36:49,050
size<font color="#E5E5E5"> through the risk condition you can</font>

674
00:36:47,040 --> 00:36:50,520
change the size to any<font color="#CCCCCC"> venue so</font>

675
00:36:49,050 --> 00:36:53,460
basically you can control how<font color="#CCCCCC"> much you</font>

676
00:36:50,520 --> 00:36:56,280
<font color="#E5E5E5">want to overwrite and also the soft</font>

677
00:36:53,460 --> 00:37:00,210
buffer is content<font color="#CCCCCC"> to the data</font><font color="#E5E5E5"> so</font>

678
00:36:56,280 --> 00:37:03,750
basically you can cope a user controlled

679
00:37:00,210 --> 00:37:06,540
data to the next object so it's very

680
00:37:03,750 --> 00:37:09,450
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> to overwrite</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> water table right</font>

681
00:37:06,540 --> 00:37:12,090
after that<font color="#E5E5E5"> you trigger the next you</font>

682
00:37:09,450 --> 00:37:15,480
invoke the virtual function of the next

683
00:37:12,090 --> 00:37:18,510
<font color="#CCCCCC">object you can just use the exploitation</font>

684
00:37:15,480 --> 00:37:20,880
techniques we we showed in<font color="#CCCCCC"> the initial</font><font color="#E5E5E5"> a</font>

685
00:37:18,510 --> 00:37:24,120
second<font color="#CCCCCC"> one</font><font color="#E5E5E5"> ability</font><font color="#CCCCCC"> so basically you can</font>

686
00:37:20,880 --> 00:37:28,560
jump<font color="#E5E5E5"> to somewhere</font><font color="#CCCCCC"> and you can the</font><font color="#E5E5E5"> whole</font>

687
00:37:24,120 --> 00:37:31,049
code that's contained in<font color="#E5E5E5"> a kernel okay</font>

688
00:37:28,560 --> 00:37:35,610
so for the<font color="#E5E5E5"> first two one abilities</font><font color="#CCCCCC"> they</font>

689
00:37:31,050 --> 00:37:38,430
were fixed<font color="#E5E5E5"> in 10.2 12.3</font><font color="#CCCCCC"> january 23rd</font>

690
00:37:35,610 --> 00:37:40,800
this year and there are<font color="#CCCCCC"> two</font><font color="#E5E5E5"> three</font>

691
00:37:38,430 --> 00:37:42,299
numbers we use<font color="#E5E5E5"> the two vulnerabilities</font>

692
00:37:40,800 --> 00:37:45,780
in pump<font color="#CCCCCC"> faster</font>

693
00:37:42,300 --> 00:37:49,380
last year<font color="#E5E5E5"> and the third one actually</font>

694
00:37:45,780 --> 00:37:54,510
<font color="#E5E5E5">there's new as far as I knew so there's</font>

695
00:37:49,380 --> 00:37:57,090
no public<font color="#CCCCCC"> CBE and Apple finally realized</font>

696
00:37:54,510 --> 00:38:01,140
<font color="#CCCCCC">that maybe it's</font><font color="#E5E5E5"> not possible to</font><font color="#CCCCCC"> change</font>

697
00:37:57,090 --> 00:38:03,750
the<font color="#E5E5E5"> government by wine so how Apple fix</font>

698
00:38:01,140 --> 00:38:05,129
the problem is it<font color="#E5E5E5"> changed the OHL memory</font>

699
00:38:03,750 --> 00:38:08,460
and copy-on-write

700
00:38:05,130 --> 00:38:11,280
so if<font color="#E5E5E5"> you if</font><font color="#CCCCCC"> the user lands change the</font>

701
00:38:08,460 --> 00:38:13,290
change<font color="#E5E5E5"> that the data it will be</font>

702
00:38:11,280 --> 00:38:15,060
different<font color="#E5E5E5"> copies so the kernel has</font><font color="#CCCCCC"> a</font>

703
00:38:13,290 --> 00:38:17,460
<font color="#CCCCCC">handle copy and the other end</font><font color="#E5E5E5"> has a</font>

704
00:38:15,060 --> 00:38:23,040
different copy<font color="#E5E5E5"> so it won't it</font>

705
00:38:17,460 --> 00:38:26,580
fundamentally fix the issue so now I'm

706
00:38:23,040 --> 00:38:29,160
going<font color="#E5E5E5"> to conclude</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> talk so as we see</font>

707
00:38:26,580 --> 00:38:33,450
the<font color="#CCCCCC"> these liabilities so finding them</font>

708
00:38:29,160 --> 00:38:36,509
it's not easy because<font color="#CCCCCC"> the only limited</font>

709
00:38:33,450 --> 00:38:39,390
number of<font color="#CCCCCC"> alka drawers can be opened by</font>

710
00:38:36,510 --> 00:38:42,570
web process and these drivers are

711
00:38:39,390 --> 00:38:45,900
revealed by many parties<font color="#E5E5E5"> Apple different</font>

712
00:38:42,570 --> 00:38:49,470
security researchers and a lot of<font color="#E5E5E5"> bugs</font>

713
00:38:45,900 --> 00:38:51,630
already fixed so find a new box<font color="#E5E5E5"> is not</font>

714
00:38:49,470 --> 00:38:53,730
easy but it's the whole<font color="#E5E5E5"> process is fun</font>

715
00:38:51,630 --> 00:38:56,550
<font color="#E5E5E5">and you will see such a lot of</font>

716
00:38:53,730 --> 00:38:58,530
undocumented<font color="#E5E5E5"> features in the kernel and</font>

717
00:38:56,550 --> 00:39:02,060
you'll find a new attack service<font color="#E5E5E5"> the</font>

718
00:38:58,530 --> 00:39:05,010
whole process is<font color="#E5E5E5"> very exciting and</font>

719
00:39:02,060 --> 00:39:07,860
directly<font color="#CCCCCC"> exporting</font><font color="#E5E5E5"> Windows kernel</font>

720
00:39:05,010 --> 00:39:11,130
I mean<font color="#CCCCCC"> mac</font><font color="#E5E5E5"> OS kernel inside suffer</font>

721
00:39:07,860 --> 00:39:15,060
sandbox<font color="#CCCCCC"> it's hard but as we proved it is</font>

722
00:39:11,130 --> 00:39:17,760
<font color="#E5E5E5">visible and we believe that in future it</font>

723
00:39:15,060 --> 00:39:19,940
will continue to be feasible because<font color="#E5E5E5"> we</font>

724
00:39:17,760 --> 00:39:22,890
will<font color="#E5E5E5"> continue to find new bugs</font><font color="#CCCCCC"> and</font>

725
00:39:19,940 --> 00:39:26,310
people will continue<font color="#E5E5E5"> to make mistakes</font>

726
00:39:22,890 --> 00:39:27,060
I mean Apple programmers<font color="#CCCCCC"> okay thank you</font>

727
00:39:26,310 --> 00:39:29,040
<font color="#E5E5E5">for</font><font color="#CCCCCC"> your attention</font>

728
00:39:27,060 --> 00:39:31,160
I'm going to answer<font color="#E5E5E5"> your question thank</font>

729
00:39:29,040 --> 00:39:31,160
<font color="#CCCCCC">you</font>

730
00:39:33,360 --> 00:39:39,239
[Music]

731
00:39:35,940 --> 00:39:39,239
[Applause]

732
00:39:46,440 --> 00:39:51,010
yes<font color="#E5E5E5"> yes</font>

733
00:39:48,250 --> 00:39:54,250
so basically<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> me only</font><font color="#CCCCCC"> a few drummers</font>

734
00:39:51,010 --> 00:39:57,280
<font color="#E5E5E5">you have the soft</font><font color="#CCCCCC"> coat for</font><font color="#E5E5E5"> the most</font>

735
00:39:54,250 --> 00:40:01,290
<font color="#E5E5E5">third party winter drummers there's no</font>

736
00:39:57,280 --> 00:40:01,290
<font color="#E5E5E5">such code we have</font><font color="#CCCCCC"> to do binary</font><font color="#E5E5E5"> analysis</font>

737
00:40:01,980 --> 00:40:12,160
it's my daily job so as I discussed<font color="#E5E5E5"> in</font>

738
00:40:09,100 --> 00:40:16,960
so<font color="#CCCCCC"> I'd opinion we we try to</font><font color="#E5E5E5"> join our</font>

739
00:40:12,160 --> 00:40:21,250
Father and but we realize that the low

740
00:40:16,960 --> 00:40:24,940
hand fruits already taken<font color="#E5E5E5"> so for example</font>

741
00:40:21,250 --> 00:40:27,850
for<font color="#E5E5E5"> the for the second one it's</font><font color="#CCCCCC"> you have</font>

742
00:40:24,940 --> 00:40:30,310
<font color="#E5E5E5">to call some barely use epi</font><font color="#CCCCCC"> I will</font>

743
00:40:27,850 --> 00:40:35,190
connect and client and you have to

744
00:40:30,310 --> 00:40:37,810
specify very<font color="#E5E5E5"> weird selector if you don't</font>

745
00:40:35,190 --> 00:40:41,980
<font color="#CCCCCC">reverse-engineer the binary</font><font color="#E5E5E5"> you won't</font>

746
00:40:37,810 --> 00:40:44,560
notice<font color="#E5E5E5"> that so that means we have to do</font>

747
00:40:41,980 --> 00:40:46,480
reversal in here first<font color="#CCCCCC"> and at the time</font>

748
00:40:44,560 --> 00:40:48,970
you reverse engineer<font color="#CCCCCC"> the binary you</font>

749
00:40:46,480 --> 00:40:51,160
already<font color="#CCCCCC"> noticed the box</font><font color="#E5E5E5"> so we we don't</font>

750
00:40:48,970 --> 00:40:53,890
<font color="#E5E5E5">have to use</font><font color="#CCCCCC"> further so basically now we</font>

751
00:40:51,160 --> 00:40:56,009
have to do the<font color="#E5E5E5"> manual inspection thank</font>

752
00:40:53,890 --> 00:40:56,009
you

