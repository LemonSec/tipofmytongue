1
00:00:02,790 --> 00:00:07,440
<font color="#CCCCCC">alright hey everyone</font>

2
00:00:05,180 --> 00:00:08,550
really excited to be here<font color="#E5E5E5"> at Chaka Khan</font>

3
00:00:07,440 --> 00:00:10,920
it's<font color="#E5E5E5"> my first time at this conference</font>

4
00:00:08,550 --> 00:00:13,080
<font color="#E5E5E5">it's been awesome</font><font color="#CCCCCC"> so far</font><font color="#E5E5E5"> so what I</font>

5
00:00:10,920 --> 00:00:14,879
wanted<font color="#CCCCCC"> to talk to you today is</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> a</font>

6
00:00:13,080 --> 00:00:17,310
<font color="#E5E5E5">little side project I've been working</font><font color="#CCCCCC"> on</font>

7
00:00:14,880 --> 00:00:19,470
in the<font color="#CCCCCC"> last</font><font color="#E5E5E5"> few months</font><font color="#CCCCCC"> called reductio</font>

8
00:00:17,310 --> 00:00:21,330
but before I get<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> details of</font>

9
00:00:19,470 --> 00:00:22,799
what exactly<font color="#CCCCCC"> that is just a little bit</font>

10
00:00:21,330 --> 00:00:24,448
of background<font color="#E5E5E5"> information on myself</font><font color="#CCCCCC"> my</font>

11
00:00:22,800 --> 00:00:26,099
name<font color="#E5E5E5"> is Christopher</font><font color="#CCCCCC"> Domus I'm a</font>

12
00:00:24,449 --> 00:00:27,180
<font color="#CCCCCC">cybersecurity researcher at a company</font>

13
00:00:26,099 --> 00:00:29,849
called<font color="#CCCCCC"> the Battelle Memorial Institute</font>

14
00:00:27,180 --> 00:00:31,500
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really large</font><font color="#CCCCCC"> nonprofit R&D</font>

15
00:00:29,849 --> 00:00:33,390
<font color="#CCCCCC">institutes a lot of fun to work</font><font color="#E5E5E5"> for</font>

16
00:00:31,500 --> 00:00:34,559
<font color="#CCCCCC">gives me a lot of chances to sort of</font>

17
00:00:33,390 --> 00:00:36,239
<font color="#E5E5E5">explore the fringe areas of</font>

18
00:00:34,559 --> 00:00:39,390
<font color="#E5E5E5">cybersecurity</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> wouldn't otherwise</font>

19
00:00:36,239 --> 00:00:41,640
get<font color="#E5E5E5"> a seat so I want to get into</font><font color="#CCCCCC"> exactly</font>

20
00:00:39,390 --> 00:00:43,260
<font color="#CCCCCC">what this reductio thing is but to sort</font>

21
00:00:41,640 --> 00:00:44,610
<font color="#CCCCCC">of</font><font color="#E5E5E5"> frame the</font><font color="#CCCCCC"> rest of the talk I want</font><font color="#E5E5E5"> to</font>

22
00:00:43,260 --> 00:00:46,230
start<font color="#E5E5E5"> out with</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> observations</font><font color="#CCCCCC"> in</font>

23
00:00:44,610 --> 00:00:47,730
thought<font color="#CCCCCC"> Experian experiments so</font><font color="#E5E5E5"> the</font>

24
00:00:46,230 --> 00:00:50,279
first observation<font color="#CCCCCC"> is sort of</font><font color="#E5E5E5"> an obvious</font>

25
00:00:47,730 --> 00:00:51,360
<font color="#E5E5E5">one</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> different paths can produce the</font>

26
00:00:50,280 --> 00:00:52,949
<font color="#E5E5E5">same result and we know that from</font>

27
00:00:51,360 --> 00:00:55,379
programming<font color="#E5E5E5"> right we can write the same</font>

28
00:00:52,949 --> 00:00:57,360
program<font color="#CCCCCC"> in two different</font><font color="#E5E5E5"> ways and have</font>

29
00:00:55,379 --> 00:00:58,829
<font color="#E5E5E5">it do the exact</font><font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> but I've had</font>

30
00:00:57,360 --> 00:01:01,230
this nagging question in the back of my

31
00:00:58,829 --> 00:01:03,239
head for for a while<font color="#E5E5E5"> now namely could</font>

32
00:01:01,230 --> 00:01:05,548
the inverse of<font color="#E5E5E5"> that observation be true</font>

33
00:01:03,239 --> 00:01:08,039
so could<font color="#E5E5E5"> we all take exactly</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

34
00:01:05,549 --> 00:01:09,630
path<font color="#CCCCCC"> but end up at different places</font><font color="#E5E5E5"> so</font>

35
00:01:08,040 --> 00:01:11,310
<font color="#CCCCCC">know that's kind of a nebulous question</font>

36
00:01:09,630 --> 00:01:13,830
but just try<font color="#E5E5E5"> to keep that</font><font color="#CCCCCC"> in your</font><font color="#E5E5E5"> head</font>

37
00:01:11,310 --> 00:01:14,850
<font color="#E5E5E5">throughout the</font><font color="#CCCCCC"> rest of this talk and I</font>

38
00:01:13,830 --> 00:01:17,130
<font color="#E5E5E5">think it'll make things a little bit</font>

39
00:01:14,850 --> 00:01:18,750
<font color="#E5E5E5">more clear some other observation I want</font>

40
00:01:17,130 --> 00:01:20,729
to make this one should also be obvious

41
00:01:18,750 --> 00:01:22,380
is<font color="#CCCCCC"> that groups of instructions be them</font>

42
00:01:20,729 --> 00:01:23,580
regular programming instructions<font color="#E5E5E5"> or</font>

43
00:01:22,380 --> 00:01:26,070
machine instructions or whatever it can

44
00:01:23,580 --> 00:01:28,530
<font color="#E5E5E5">often be reduced to a more simple form</font>

45
00:01:26,070 --> 00:01:31,110
so for<font color="#E5E5E5"> example if we had x equals x</font>

46
00:01:28,530 --> 00:01:32,670
times<font color="#E5E5E5"> 2 and then x equals x plus</font><font color="#CCCCCC"> x</font>

47
00:01:31,110 --> 00:01:34,320
essentially that<font color="#E5E5E5"> what we've done is</font>

48
00:01:32,670 --> 00:01:36,570
we've quadrupled X so we<font color="#E5E5E5"> could reduce</font>

49
00:01:34,320 --> 00:01:38,639
these instructions<font color="#E5E5E5"> into</font><font color="#CCCCCC"> one instruction</font>

50
00:01:36,570 --> 00:01:41,008
<font color="#E5E5E5">x equals x times</font><font color="#CCCCCC"> four so</font><font color="#E5E5E5"> nothing</font>

51
00:01:38,640 --> 00:01:43,079
revolutionary there but as as<font color="#E5E5E5"> another</font>

52
00:01:41,009 --> 00:01:46,020
thought experiment<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> let's think</font>

53
00:01:43,079 --> 00:01:47,970
about<font color="#E5E5E5"> how</font><font color="#CCCCCC"> much could one program</font><font color="#E5E5E5"> really</font>

54
00:01:46,020 --> 00:01:50,189
be reduced<font color="#CCCCCC"> if we had a program that</font>

55
00:01:47,970 --> 00:01:52,380
consisted of 100<font color="#E5E5E5"> instructions could we</font>

56
00:01:50,189 --> 00:01:53,610
by finding on patterns in those

57
00:01:52,380 --> 00:01:55,530
instructions<font color="#E5E5E5"> and finding ways to</font>

58
00:01:53,610 --> 00:01:57,719
<font color="#E5E5E5">simplify instructions could we reduce it</font>

59
00:01:55,530 --> 00:02:00,479
down<font color="#E5E5E5"> to 50</font><font color="#CCCCCC"> if we had 50 could we reduce</font>

60
00:01:57,719 --> 00:02:02,850
it<font color="#E5E5E5"> down to 25</font><font color="#CCCCCC"> how far could we reduce</font><font color="#E5E5E5"> a</font>

61
00:02:00,479 --> 00:02:05,908
single<font color="#CCCCCC"> program so I want</font><font color="#E5E5E5"> to address</font>

62
00:02:02,850 --> 00:02:07,169
<font color="#E5E5E5">those questions but before we go into</font>

63
00:02:05,909 --> 00:02:08,099
<font color="#CCCCCC">the</font><font color="#E5E5E5"> details of how that's going to work</font>

64
00:02:07,170 --> 00:02:09,899
<font color="#E5E5E5">I need to give a little bit of</font>

65
00:02:08,098 --> 00:02:12,179
<font color="#CCCCCC">background</font><font color="#E5E5E5"> information on a totally</font>

66
00:02:09,899 --> 00:02:13,800
<font color="#E5E5E5">different project that I worked on about</font>

67
00:02:12,180 --> 00:02:16,530
a<font color="#E5E5E5"> year ago so some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the myths</font>

68
00:02:13,800 --> 00:02:18,120
is<font color="#E5E5E5"> already if you if you have bear with</font>

69
00:02:16,530 --> 00:02:20,340
<font color="#E5E5E5">me it will</font><font color="#CCCCCC"> make sense</font><font color="#E5E5E5"> why we're going</font>

70
00:02:18,120 --> 00:02:21,630
<font color="#CCCCCC">over it in about</font><font color="#E5E5E5"> 15 minutes if you</font>

71
00:02:20,340 --> 00:02:23,790
haven't and<font color="#CCCCCC"> I think this stuff this is</font>

72
00:02:21,630 --> 00:02:26,340
pretty neat so the the whole project

73
00:02:23,790 --> 00:02:27,989
<font color="#E5E5E5">started with</font><font color="#CCCCCC"> looking at assembly</font>

74
00:02:26,340 --> 00:02:29,640
programming<font color="#E5E5E5"> so if you haven't done a</font>

75
00:02:27,990 --> 00:02:31,860
whole<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> work in assembly it's</font>

76
00:02:29,640 --> 00:02:33,510
actually not<font color="#E5E5E5"> that hard</font><font color="#CCCCCC"> so for example</font>

77
00:02:31,860 --> 00:02:35,550
let's suppose<font color="#E5E5E5"> that we wanted to write an</font>

78
00:02:33,510 --> 00:02:37,829
assembly program to print<font color="#E5E5E5"> out a string</font><font color="#CCCCCC"> a</font>

79
00:02:35,550 --> 00:02:39,780
hundred times in a row<font color="#CCCCCC"> here's how we</font>

80
00:02:37,830 --> 00:02:41,370
might go<font color="#CCCCCC"> about that first</font><font color="#E5E5E5"> thing we're</font>

81
00:02:39,780 --> 00:02:43,380
going<font color="#E5E5E5"> to do is we're going</font><font color="#CCCCCC"> to load up a</font>

82
00:02:41,370 --> 00:02:45,300
local<font color="#E5E5E5"> variable with the value zero this</font>

83
00:02:43,380 --> 00:02:47,040
is<font color="#CCCCCC"> going to be our counter we're setting</font>

84
00:02:45,300 --> 00:02:49,140
<font color="#E5E5E5">it to zero using the move</font><font color="#CCCCCC"> instruction</font>

85
00:02:47,040 --> 00:02:50,760
after<font color="#E5E5E5"> that we need to actually print</font>

86
00:02:49,140 --> 00:02:52,290
something out<font color="#CCCCCC"> so we want to call the</font>

87
00:02:50,760 --> 00:02:53,700
printf function<font color="#E5E5E5"> but we need to pass it</font>

88
00:02:52,290 --> 00:02:54,929
an argument<font color="#CCCCCC"> the string that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> want to</font>

89
00:02:53,700 --> 00:02:56,429
print<font color="#E5E5E5"> out so we can use the push</font>

90
00:02:54,930 --> 00:02:58,440
instruction to push a pointer<font color="#CCCCCC"> to a</font>

91
00:02:56,430 --> 00:02:59,790
string<font color="#E5E5E5"> onto the set and we</font><font color="#CCCCCC"> can use the</font>

92
00:02:58,440 --> 00:03:01,500
call<font color="#CCCCCC"> instruction to print out that</font>

93
00:02:59,790 --> 00:03:03,359
string the pop instruction to remove our

94
00:03:01,500 --> 00:03:05,220
argument<font color="#CCCCCC"> from the stack</font><font color="#E5E5E5"> and then we can</font>

95
00:03:03,360 --> 00:03:07,320
<font color="#E5E5E5">increment our counter so I'm going to</font>

96
00:03:05,220 --> 00:03:09,180
<font color="#E5E5E5">use the add instruction to add one to</font>

97
00:03:07,320 --> 00:03:11,810
<font color="#CCCCCC">our local counter then I want to check</font>

98
00:03:09,180 --> 00:03:13,620
<font color="#CCCCCC">am I at</font><font color="#E5E5E5"> a hundred iteration yet or not</font>

99
00:03:11,810 --> 00:03:15,840
<font color="#CCCCCC">so I'm going</font><font color="#E5E5E5"> to use the compare</font>

100
00:03:13,620 --> 00:03:17,790
instruction to check my<font color="#E5E5E5"> local variable</font>

101
00:03:15,840 --> 00:03:19,739
against the value<font color="#CCCCCC"> one hundred and if I'm</font>

102
00:03:17,790 --> 00:03:20,820
less than<font color="#CCCCCC"> or equal</font><font color="#E5E5E5"> to 100 I'm going to</font>

103
00:03:19,739 --> 00:03:22,020
jump<font color="#CCCCCC"> back to the beginning of the</font>

104
00:03:20,820 --> 00:03:23,910
program<font color="#CCCCCC"> and repeat the whole</font><font color="#E5E5E5"> process</font>

105
00:03:22,020 --> 00:03:26,040
<font color="#E5E5E5">over again so this is very simply how we</font>

106
00:03:23,910 --> 00:03:27,959
can print out a string<font color="#CCCCCC"> 100 times using</font>

107
00:03:26,040 --> 00:03:29,549
basic<font color="#E5E5E5"> assembly language so what you can</font>

108
00:03:27,959 --> 00:03:31,500
see we did when we<font color="#E5E5E5"> were</font><font color="#CCCCCC"> writing this</font><font color="#E5E5E5"> out</font>

109
00:03:29,550 --> 00:03:33,570
<font color="#E5E5E5">as we sort of use the instructions</font><font color="#CCCCCC"> that</font>

110
00:03:31,500 --> 00:03:35,040
were available<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to to do things</font>

111
00:03:33,570 --> 00:03:36,090
that we<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to do and that kind of</font>

112
00:03:35,040 --> 00:03:38,519
makes<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> that's how we think about</font>

113
00:03:36,090 --> 00:03:39,900
programming normally but I<font color="#CCCCCC"> stumbled</font>

114
00:03:38,520 --> 00:03:42,540
across<font color="#E5E5E5"> this paper about a year ago</font>

115
00:03:39,900 --> 00:03:45,090
<font color="#E5E5E5">called movies Turing completes by a guy</font>

116
00:03:42,540 --> 00:03:46,950
named<font color="#CCCCCC"> Steven Dolan and what he's</font>

117
00:03:45,090 --> 00:03:48,930
<font color="#CCCCCC">referring to is</font><font color="#E5E5E5"> the x86 move instruction</font>

118
00:03:46,950 --> 00:03:50,700
so contrary<font color="#E5E5E5"> to</font><font color="#CCCCCC"> its name x86 move does</font>

119
00:03:48,930 --> 00:03:52,560
not actually<font color="#E5E5E5"> move data it copies data</font>

120
00:03:50,700 --> 00:03:54,359
<font color="#E5E5E5">it's a very very simple instruction</font>

121
00:03:52,560 --> 00:03:56,010
<font color="#E5E5E5">basically the simplest instruction in</font>

122
00:03:54,360 --> 00:03:57,690
the entire architecture it copies data

123
00:03:56,010 --> 00:04:00,600
from one<font color="#CCCCCC"> location the source</font><font color="#E5E5E5"> into</font>

124
00:03:57,690 --> 00:04:03,060
<font color="#CCCCCC">another</font><font color="#E5E5E5"> location the destination and</font>

125
00:04:00,600 --> 00:04:05,310
that's that's all move does is a copy

126
00:04:03,060 --> 00:04:07,050
data<font color="#E5E5E5"> from one place</font><font color="#CCCCCC"> to another so</font><font color="#E5E5E5"> what</font>

127
00:04:05,310 --> 00:04:08,370
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that turing-complete part well</font>

128
00:04:07,050 --> 00:04:10,170
that means<font color="#CCCCCC"> that any code that we write</font>

129
00:04:08,370 --> 00:04:12,300
could be written<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a set of move</font>

130
00:04:10,170 --> 00:04:14,010
instructions instead and absolutely

131
00:04:12,300 --> 00:04:15,660
<font color="#E5E5E5">nothing else and when you think</font><font color="#CCCCCC"> about</font>

132
00:04:14,010 --> 00:04:16,918
<font color="#E5E5E5">that that's kind of mind-boggling when</font>

133
00:04:15,660 --> 00:04:19,500
<font color="#CCCCCC">you think about</font><font color="#E5E5E5"> all the things that our</font>

134
00:04:16,918 --> 00:04:21,089
programs have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do like control flow</font>

135
00:04:19,500 --> 00:04:22,320
and<font color="#CCCCCC"> function calls and</font><font color="#E5E5E5"> exception</font>

136
00:04:21,089 --> 00:04:23,700
<font color="#CCCCCC">handling how on earth could</font><font color="#E5E5E5"> you</font>

137
00:04:22,320 --> 00:04:25,700
accomplish<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of that</font><font color="#E5E5E5"> with</font>

138
00:04:23,700 --> 00:04:28,130
unconditional data transfers from<font color="#E5E5E5"> one</font>

139
00:04:25,700 --> 00:04:29,360
location to another<font color="#CCCCCC"> you basically go</font>

140
00:04:28,130 --> 00:04:30,710
from<font color="#E5E5E5"> something like this where</font><font color="#CCCCCC"> we pick</font>

141
00:04:29,360 --> 00:04:33,230
out instructions<font color="#CCCCCC"> that actually make</font>

142
00:04:30,710 --> 00:04:35,090
<font color="#E5E5E5">sense for what we're trying to do into</font>

143
00:04:33,230 --> 00:04:36,710
<font color="#E5E5E5">something like this just a long stream</font>

144
00:04:35,090 --> 00:04:39,770
of<font color="#E5E5E5"> unconditional data transfers from one</font>

145
00:04:36,710 --> 00:04:41,570
location<font color="#E5E5E5"> to another so a Dolan who wrote</font>

146
00:04:39,770 --> 00:04:42,530
this paper<font color="#E5E5E5"> proving that move is</font><font color="#CCCCCC"> Turing</font>

147
00:04:41,570 --> 00:04:44,599
<font color="#CCCCCC">complete he kind</font><font color="#E5E5E5"> of tongue-in-cheek</font>

148
00:04:42,530 --> 00:04:46,039
<font color="#E5E5E5">concludes removing all about the move</font>

149
00:04:44,600 --> 00:04:47,630
instruction<font color="#CCCCCC"> from future iterations of</font>

150
00:04:46,040 --> 00:04:49,550
the<font color="#CCCCCC"> x86 architecture would have many</font>

151
00:04:47,630 --> 00:04:51,110
advantages<font color="#E5E5E5"> the instruction format would</font>

152
00:04:49,550 --> 00:04:52,280
be greatly<font color="#CCCCCC"> simplified the expensive</font>

153
00:04:51,110 --> 00:04:54,140
decode unit<font color="#E5E5E5"> would become much cheaper</font>

154
00:04:52,280 --> 00:04:55,729
<font color="#CCCCCC">and Silicon currently used for complex</font>

155
00:04:54,140 --> 00:04:57,919
functional<font color="#E5E5E5"> units could</font><font color="#CCCCCC"> be repurposed</font><font color="#E5E5E5"> as</font>

156
00:04:55,730 --> 00:04:59,480
even more<font color="#E5E5E5"> cash</font><font color="#CCCCCC"> as long</font><font color="#E5E5E5"> as someone else</font>

157
00:04:57,920 --> 00:05:01,580
implements the compiler so throughout

158
00:04:59,480 --> 00:05:02,750
his his paper he was<font color="#E5E5E5"> very aware of the</font>

159
00:05:01,580 --> 00:05:04,969
fact<font color="#CCCCCC"> that he was</font><font color="#E5E5E5"> implementing an</font>

160
00:05:02,750 --> 00:05:06,740
academic Turing machine<font color="#E5E5E5"> just a basic</font>

161
00:05:04,970 --> 00:05:08,420
proof that move is turning complete<font color="#E5E5E5"> and</font>

162
00:05:06,740 --> 00:05:12,050
that's a<font color="#E5E5E5"> very long ways from a</font>

163
00:05:08,420 --> 00:05:13,760
functioning compiler or usable code<font color="#CCCCCC"> but</font>

164
00:05:12,050 --> 00:05:15,290
I really liked<font color="#E5E5E5"> the paper when I read</font>

165
00:05:13,760 --> 00:05:16,700
that last<font color="#E5E5E5"> sentence</font><font color="#CCCCCC"> it's only</font><font color="#E5E5E5"> someone</font>

166
00:05:15,290 --> 00:05:18,560
else implements the compiler I thought

167
00:05:16,700 --> 00:05:19,789
I'm going<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> this I'll take</font><font color="#E5E5E5"> you up</font>

168
00:05:18,560 --> 00:05:22,970
on<font color="#E5E5E5"> your challenge</font><font color="#CCCCCC"> still</font><font color="#E5E5E5"> want to see if I</font>

169
00:05:19,790 --> 00:05:24,800
can implement<font color="#E5E5E5"> a move</font><font color="#CCCCCC"> only compiler but</font>

170
00:05:22,970 --> 00:05:27,320
where do we<font color="#E5E5E5"> begin it's a really daunting</font>

171
00:05:24,800 --> 00:05:29,120
prospect<font color="#CCCCCC"> thinking of how we can</font><font color="#E5E5E5"> use move</font>

172
00:05:27,320 --> 00:05:31,190
instructions to implement very complex

173
00:05:29,120 --> 00:05:32,660
<font color="#CCCCCC">program logic well there's a few key</font>

174
00:05:31,190 --> 00:05:34,640
<font color="#CCCCCC">ideas inside of Dolan's paper that we</font>

175
00:05:32,660 --> 00:05:36,230
<font color="#E5E5E5">can start adapting one of his key ideas</font>

176
00:05:34,640 --> 00:05:38,599
is<font color="#CCCCCC"> that the move instruction</font><font color="#E5E5E5"> can check</font>

177
00:05:36,230 --> 00:05:40,610
for equality<font color="#CCCCCC"> so let's say have a</font>

178
00:05:38,600 --> 00:05:42,830
variable<font color="#E5E5E5"> x and y and i want to check our</font>

179
00:05:40,610 --> 00:05:44,510
x and y equal to each other<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the very</font>

180
00:05:42,830 --> 00:05:46,609
first thing<font color="#CCCCCC"> i'm going to do is i'm</font><font color="#E5E5E5"> going</font>

181
00:05:44,510 --> 00:05:49,219
<font color="#E5E5E5">to load 0 into the memory at location</font><font color="#CCCCCC"> x</font>

182
00:05:46,610 --> 00:05:51,230
we load<font color="#CCCCCC"> 1 in the memory location Y and</font>

183
00:05:49,220 --> 00:05:52,160
then read back from<font color="#CCCCCC"> the location X so</font>

184
00:05:51,230 --> 00:05:54,170
let's see how this works<font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice</font>

185
00:05:52,160 --> 00:05:56,600
<font color="#CCCCCC">let's say x and y are</font><font color="#E5E5E5"> equal to each</font>

186
00:05:54,170 --> 00:05:59,870
<font color="#E5E5E5">other</font><font color="#CCCCCC"> X is 3 and</font><font color="#E5E5E5"> Y</font><font color="#CCCCCC"> is 3 then</font><font color="#E5E5E5"> it says</font>

187
00:05:56,600 --> 00:06:01,790
load a 0<font color="#E5E5E5"> into the memory address 3 load</font>

188
00:05:59,870 --> 00:06:03,230
of wine into<font color="#E5E5E5"> the memory address 3 over</font>

189
00:06:01,790 --> 00:06:05,300
<font color="#E5E5E5">writing the 0 that</font><font color="#CCCCCC"> we just wrote there</font>

190
00:06:03,230 --> 00:06:06,980
<font color="#E5E5E5">and then read back</font><font color="#CCCCCC"> from memory address 3</font>

191
00:06:05,300 --> 00:06:09,320
so we read back<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last thing we wrote</font>

192
00:06:06,980 --> 00:06:11,960
which was a wine<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> wine indicates</font>

193
00:06:09,320 --> 00:06:13,010
that x and y are equal to each<font color="#CCCCCC"> other now</font>

194
00:06:11,960 --> 00:06:14,840
let's<font color="#CCCCCC"> say they weren't</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> to each</font>

195
00:06:13,010 --> 00:06:16,640
other let's say<font color="#E5E5E5"> X was 2 and Y was 3 then</font>

196
00:06:14,840 --> 00:06:19,460
<font color="#E5E5E5">this is right 0 to memory address 2</font>

197
00:06:16,640 --> 00:06:20,960
right<font color="#E5E5E5"> 1 to memory address 3 and read</font>

198
00:06:19,460 --> 00:06:22,340
back<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> memory address</font><font color="#CCCCCC"> - well the</font>

199
00:06:20,960 --> 00:06:24,560
<font color="#E5E5E5">last thing we wrote a memory address -</font>

200
00:06:22,340 --> 00:06:25,940
was a 0<font color="#E5E5E5"> we read a 0 indicating that</font>

201
00:06:24,560 --> 00:06:26,330
these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> instructions aren't equal to</font>

202
00:06:25,940 --> 00:06:28,100
each other

203
00:06:26,330 --> 00:06:28,880
so normally if<font color="#CCCCCC"> I were</font><font color="#E5E5E5"> writing assembly I</font>

204
00:06:28,100 --> 00:06:30,620
would have used<font color="#CCCCCC"> something like</font><font color="#E5E5E5"> to</font>

205
00:06:28,880 --> 00:06:32,510
compare instruction to see if x<font color="#E5E5E5"> and y</font>

206
00:06:30,620 --> 00:06:34,010
we're equal but with this approach<font color="#E5E5E5"> we</font>

207
00:06:32,510 --> 00:06:35,810
<font color="#E5E5E5">can use</font><font color="#CCCCCC"> 3 move instructions to</font>

208
00:06:34,010 --> 00:06:37,789
accomplish the<font color="#E5E5E5"> same thing so that's an</font>

209
00:06:35,810 --> 00:06:39,210
<font color="#CCCCCC">interesting starting point</font><font color="#E5E5E5"> Dolan also</font>

210
00:06:37,790 --> 00:06:40,919
made this observation

211
00:06:39,210 --> 00:06:42,780
where he said his move<font color="#E5E5E5"> Turing machine</font>

212
00:06:40,919 --> 00:06:44,280
<font color="#E5E5E5">would require a single jump instruction</font>

213
00:06:42,780 --> 00:06:46,559
at<font color="#E5E5E5"> the end to loop</font><font color="#CCCCCC"> back to the</font><font color="#E5E5E5"> beginning</font>

214
00:06:44,280 --> 00:06:48,239
<font color="#CCCCCC">so</font><font color="#E5E5E5"> this is sort</font><font color="#CCCCCC"> of incidental we don't</font>

215
00:06:46,560 --> 00:06:50,310
actually need that jump instruction<font color="#E5E5E5"> I</font>

216
00:06:48,240 --> 00:06:51,330
found a way to fix that<font color="#E5E5E5"> later</font><font color="#CCCCCC"> on but at</font>

217
00:06:50,310 --> 00:06:53,699
a high<font color="#CCCCCC"> level this is sort of what</font>

218
00:06:51,330 --> 00:06:55,380
<font color="#CCCCCC">Dolan's move</font><font color="#E5E5E5"> only program would</font><font color="#CCCCCC"> look</font>

219
00:06:53,699 --> 00:06:57,360
like a whole bunch<font color="#CCCCCC"> of move instructions</font>

220
00:06:55,380 --> 00:06:58,919
<font color="#CCCCCC">and at the</font><font color="#E5E5E5"> very end</font><font color="#CCCCCC"> a jump instruction</font>

221
00:06:57,360 --> 00:07:00,060
<font color="#CCCCCC">that loops back to the beginning and</font>

222
00:06:58,919 --> 00:07:01,740
<font color="#E5E5E5">what does it's going to do is it's just</font>

223
00:07:00,060 --> 00:07:03,870
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> execute these moves in a loop</font>

224
00:07:01,740 --> 00:07:04,770
<font color="#E5E5E5">over</font><font color="#CCCCCC"> and over</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> over again and somehow</font>

225
00:07:03,870 --> 00:07:06,599
<font color="#E5E5E5">that's going</font><font color="#CCCCCC"> to do meaningful</font>

226
00:07:04,770 --> 00:07:09,539
computations somehow<font color="#E5E5E5"> that's supposed to</font>

227
00:07:06,599 --> 00:07:10,770
<font color="#E5E5E5">execute a program so I thought well</font>

228
00:07:09,539 --> 00:07:12,300
<font color="#E5E5E5">these are these</font><font color="#CCCCCC"> are some</font><font color="#E5E5E5"> good starting</font>

229
00:07:10,770 --> 00:07:14,159
points maybe we could start<font color="#CCCCCC"> building on</font>

230
00:07:12,300 --> 00:07:16,259
<font color="#CCCCCC">Dolan's ideas and we could adapt these</font>

231
00:07:14,160 --> 00:07:18,150
primitive<font color="#CCCCCC"> turing machine operations for</font>

232
00:07:16,259 --> 00:07:19,979
<font color="#CCCCCC">higher-level logic we could convert his</font>

233
00:07:18,150 --> 00:07:21,900
machine which worked on abstract symbols

234
00:07:19,979 --> 00:07:23,370
so that<font color="#E5E5E5"> it would actually work on actual</font>

235
00:07:21,900 --> 00:07:25,198
<font color="#E5E5E5">data instead and then we could add logic</font>

236
00:07:23,370 --> 00:07:27,030
<font color="#E5E5E5">for things</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> if in else and</font>

237
00:07:25,199 --> 00:07:28,830
<font color="#CCCCCC">arithmetic and logic</font><font color="#E5E5E5"> and jumps and loops</font>

238
00:07:27,030 --> 00:07:30,659
and everything else<font color="#CCCCCC"> a program actually</font>

239
00:07:28,830 --> 00:07:33,030
needs based off<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these basic building</font>

240
00:07:30,659 --> 00:07:33,930
<font color="#E5E5E5">blocks that</font><font color="#CCCCCC"> Dolan developed and if we</font>

241
00:07:33,030 --> 00:07:35,039
did all that<font color="#E5E5E5"> then maybe this would</font>

242
00:07:33,930 --> 00:07:37,199
become<font color="#E5E5E5"> something a little closer to</font>

243
00:07:35,039 --> 00:07:38,280
<font color="#E5E5E5">something</font><font color="#CCCCCC"> we we could actually use so</font>

244
00:07:37,199 --> 00:07:39,690
the very first thing<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do</font>

245
00:07:38,280 --> 00:07:41,909
using<font color="#CCCCCC"> only</font><font color="#E5E5E5"> move instructions was figure</font>

246
00:07:39,690 --> 00:07:44,310
out how do i implement<font color="#E5E5E5"> in if statement</font>

247
00:07:41,909 --> 00:07:46,289
using only<font color="#E5E5E5"> unconditional data transfers</font>

248
00:07:44,310 --> 00:07:48,150
so let's look at an if statement and

249
00:07:46,289 --> 00:07:50,219
something<font color="#E5E5E5"> like basic this is it X and</font>

250
00:07:48,150 --> 00:07:52,979
<font color="#E5E5E5">wire to go to each other then assign the</font>

251
00:07:50,220 --> 00:07:55,440
value 100 to variable X but<font color="#CCCCCC"> there's a</font>

252
00:07:52,979 --> 00:07:58,199
catch here<font color="#CCCCCC"> activity 6 move instructions</font>

253
00:07:55,440 --> 00:08:00,449
can't branch in other words all paths

254
00:07:58,199 --> 00:08:02,520
<font color="#E5E5E5">execute no matter what so</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> back a</font>

255
00:08:00,449 --> 00:08:04,469
slide regardless of whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not x and</font>

256
00:08:02,520 --> 00:08:06,448
y are<font color="#E5E5E5"> equally</font><font color="#CCCCCC"> to each</font><font color="#E5E5E5"> other this</font>

257
00:08:04,469 --> 00:08:08,430
<font color="#CCCCCC">assignment has to occur because</font><font color="#E5E5E5"> we have</font>

258
00:08:06,449 --> 00:08:10,889
no way<font color="#CCCCCC"> to jump over</font><font color="#E5E5E5"> it with only move</font>

259
00:08:08,430 --> 00:08:12,930
instructions<font color="#E5E5E5"> so I found a way around</font>

260
00:08:10,889 --> 00:08:15,120
<font color="#E5E5E5">this in that we could force a</font><font color="#CCCCCC"> pet to</font>

261
00:08:12,930 --> 00:08:16,979
operate on dummy data<font color="#E5E5E5"> if we don't want</font>

262
00:08:15,120 --> 00:08:19,380
<font color="#CCCCCC">it results so this</font><font color="#E5E5E5"> is what that sort of</font>

263
00:08:16,979 --> 00:08:21,539
looks<font color="#CCCCCC"> like here's the if statement that</font>

264
00:08:19,380 --> 00:08:23,580
we're analyzing<font color="#E5E5E5"> and in memory I've got</font>

265
00:08:21,539 --> 00:08:26,719
the program's actual data on the<font color="#E5E5E5"> left</font>

266
00:08:23,580 --> 00:08:29,130
<font color="#E5E5E5">and program scratch data on the right</font>

267
00:08:26,719 --> 00:08:31,259
and then what I've got is a selector to

268
00:08:29,130 --> 00:08:33,899
select<font color="#E5E5E5"> between the real program data and</font>

269
00:08:31,259 --> 00:08:35,909
the fake program data<font color="#E5E5E5"> so what we're</font>

270
00:08:33,899 --> 00:08:37,409
<font color="#E5E5E5">going to do is we want</font><font color="#CCCCCC"> to examine</font><font color="#E5E5E5"> if x</font>

271
00:08:35,909 --> 00:08:38,610
and<font color="#E5E5E5"> y</font><font color="#CCCCCC"> are equal to each other using move</font>

272
00:08:37,409 --> 00:08:41,370
instructions and then we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

273
00:08:38,610 --> 00:08:43,529
<font color="#CCCCCC">move to load up this selector to point</font>

274
00:08:41,370 --> 00:08:45,270
to the real data if x and y we're equal

275
00:08:43,529 --> 00:08:46,829
to each other then<font color="#CCCCCC"> we</font><font color="#E5E5E5"> execute the</font>

276
00:08:45,270 --> 00:08:48,660
assignment<font color="#E5E5E5"> operation using move</font>

277
00:08:46,829 --> 00:08:49,380
<font color="#CCCCCC">operations and we're going</font><font color="#E5E5E5"> to store 100</font>

278
00:08:48,660 --> 00:08:51,930
into the

279
00:08:49,380 --> 00:08:53,700
<font color="#E5E5E5">programs real data on the other hand if</font>

280
00:08:51,930 --> 00:08:55,170
<font color="#CCCCCC">X&Y weren't equal</font><font color="#E5E5E5"> to each other then</font><font color="#CCCCCC"> we</font>

281
00:08:53,700 --> 00:08:57,150
use move<font color="#CCCCCC"> operations to load up the</font>

282
00:08:55,170 --> 00:08:59,640
selector with a pointer<font color="#CCCCCC"> to the scratch</font>

283
00:08:57,150 --> 00:09:01,500
or the fake program data<font color="#E5E5E5"> now my next</font>

284
00:08:59,640 --> 00:09:03,300
statement<font color="#E5E5E5"> still has to execute I have no</font>

285
00:09:01,500 --> 00:09:04,680
way to branch over it but now<font color="#E5E5E5"> when we</font>

286
00:09:03,300 --> 00:09:06,510
<font color="#CCCCCC">store 100 in memory it's going to be</font>

287
00:09:04,680 --> 00:09:08,489
stored<font color="#CCCCCC"> in to the scratch</font><font color="#E5E5E5"> space and not</font>

288
00:09:06,510 --> 00:09:09,689
affect the actual<font color="#E5E5E5"> program</font><font color="#CCCCCC"> state so</font><font color="#E5E5E5"> this</font>

289
00:09:08,490 --> 00:09:11,760
<font color="#E5E5E5">sort of how</font><font color="#CCCCCC"> we can implement</font><font color="#E5E5E5"> if</font>

290
00:09:09,690 --> 00:09:13,200
statements with<font color="#E5E5E5"> only move instructions</font>

291
00:09:11,760 --> 00:09:15,720
at an actual assembly<font color="#CCCCCC"> level it looks</font>

292
00:09:13,200 --> 00:09:17,760
something like this<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> x and y</font>

293
00:09:15,720 --> 00:09:19,260
comparison that<font color="#CCCCCC"> we had before and what</font>

294
00:09:17,760 --> 00:09:20,220
we<font color="#E5E5E5"> do is we load a pointer out of some</font>

295
00:09:19,260 --> 00:09:21,750
array<font color="#E5E5E5"> that these are going to be a</font>

296
00:09:20,220 --> 00:09:24,000
pointer for real data or to fake data

297
00:09:21,750 --> 00:09:26,670
<font color="#E5E5E5">and we assign 100</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> whatever that</font>

298
00:09:24,000 --> 00:09:28,830
pointer points to so<font color="#E5E5E5"> on so that's not</font>

299
00:09:26,670 --> 00:09:30,150
too bad and it's fairly<font color="#E5E5E5"> straightforward</font>

300
00:09:28,830 --> 00:09:31,770
at this point to<font color="#E5E5E5"> start developing</font>

301
00:09:30,150 --> 00:09:33,840
extensions to give us<font color="#E5E5E5"> things</font><font color="#CCCCCC"> like if</font>

302
00:09:31,770 --> 00:09:36,120
<font color="#E5E5E5">else is and if else if</font><font color="#CCCCCC"> else is and any</font>

303
00:09:33,840 --> 00:09:38,340
quality checks and really everything<font color="#E5E5E5"> we</font>

304
00:09:36,120 --> 00:09:40,500
need as far as as if statement control

305
00:09:38,340 --> 00:09:42,150
flow goes<font color="#E5E5E5"> so I started</font><font color="#CCCCCC"> building macros</font>

306
00:09:40,500 --> 00:09:43,950
to<font color="#E5E5E5"> implement these primitive operations</font>

307
00:09:42,150 --> 00:09:46,140
like<font color="#E5E5E5"> this is a macro</font><font color="#CCCCCC"> for checking</font>

308
00:09:43,950 --> 00:09:47,790
equality<font color="#E5E5E5"> using only move instructions</font>

309
00:09:46,140 --> 00:09:50,400
this is<font color="#CCCCCC"> a macro for checking inequality</font>

310
00:09:47,790 --> 00:09:52,260
<font color="#E5E5E5">for using only move instructions this is</font>

311
00:09:50,400 --> 00:09:55,380
a macro<font color="#E5E5E5"> for selecting between real and</font>

312
00:09:52,260 --> 00:09:57,150
<font color="#CCCCCC">dummy data inside</font><font color="#E5E5E5"> of the program</font><font color="#CCCCCC"> so</font>

313
00:09:55,380 --> 00:09:59,280
that's sort<font color="#E5E5E5"> of like the if statement</font>

314
00:09:57,150 --> 00:10:01,170
control flow but we also need like loops

315
00:09:59,280 --> 00:10:03,060
and branches in order<font color="#E5E5E5"> to implement</font><font color="#CCCCCC"> any</font>

316
00:10:01,170 --> 00:10:04,530
sort of useful<font color="#CCCCCC"> programs so</font><font color="#E5E5E5"> you're sort</font>

317
00:10:03,060 --> 00:10:07,079
of what I came<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> for how we could</font>

318
00:10:04,530 --> 00:10:08,400
implement<font color="#E5E5E5"> branches using only move</font>

319
00:10:07,080 --> 00:10:09,570
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> so at a high level our</font>

320
00:10:08,400 --> 00:10:11,069
program looks kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like this a bunch</font>

321
00:10:09,570 --> 00:10:12,540
<font color="#E5E5E5">of move instructions followed by a loop</font>

322
00:10:11,070 --> 00:10:14,970
back<font color="#CCCCCC"> to the beginning of the program</font>

323
00:10:12,540 --> 00:10:17,339
<font color="#CCCCCC">let's say we wanted to branch</font><font color="#E5E5E5"> from this</font>

324
00:10:14,970 --> 00:10:19,350
move instruction over<font color="#E5E5E5"> this top move</font>

325
00:10:17,340 --> 00:10:22,170
instruction<font color="#E5E5E5"> so the way that's going to</font>

326
00:10:19,350 --> 00:10:24,150
<font color="#E5E5E5">work is what this move instruction is</font>

327
00:10:22,170 --> 00:10:25,439
<font color="#E5E5E5">going to do is it's going to store the</font>

328
00:10:24,150 --> 00:10:27,569
target that<font color="#E5E5E5"> it's trying to branch to</font>

329
00:10:25,440 --> 00:10:29,100
<font color="#E5E5E5">it's trying to branch to address 1 0 0 C</font>

330
00:10:27,570 --> 00:10:31,980
so it's<font color="#E5E5E5"> going to use move instructions</font>

331
00:10:29,100 --> 00:10:34,020
to store that<font color="#CCCCCC"> into memory somewhere now</font>

332
00:10:31,980 --> 00:10:35,940
<font color="#CCCCCC">it's going to switch all the pointers</font><font color="#E5E5E5"> in</font>

333
00:10:34,020 --> 00:10:38,010
the program over a dummy data<font color="#CCCCCC"> so every</font>

334
00:10:35,940 --> 00:10:40,140
<font color="#E5E5E5">single data reference in the program now</font>

335
00:10:38,010 --> 00:10:42,390
points to<font color="#E5E5E5"> the scratch space instead</font><font color="#CCCCCC"> of</font>

336
00:10:40,140 --> 00:10:44,610
the real<font color="#E5E5E5"> program space so</font><font color="#CCCCCC"> that means</font>

337
00:10:42,390 --> 00:10:45,900
execution is essentially off at this

338
00:10:44,610 --> 00:10:47,460
<font color="#E5E5E5">point</font><font color="#CCCCCC"> the move</font><font color="#E5E5E5"> instructions still</font>

339
00:10:45,900 --> 00:10:49,740
execute but they're<font color="#E5E5E5"> going to only</font><font color="#CCCCCC"> affect</font>

340
00:10:47,460 --> 00:10:52,470
<font color="#E5E5E5">the fake program</font><font color="#CCCCCC"> State not</font><font color="#E5E5E5"> the real</font>

341
00:10:49,740 --> 00:10:54,300
<font color="#CCCCCC">program State so our next</font><font color="#E5E5E5"> block of moves</font>

342
00:10:52,470 --> 00:10:55,470
executes and what those block what that

343
00:10:54,300 --> 00:10:56,910
block of moves is going to do is it's

344
00:10:55,470 --> 00:11:00,060
<font color="#E5E5E5">going to check</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> my the current branch</font>

345
00:10:56,910 --> 00:11:01,890
<font color="#E5E5E5">target well I'm address 1 0 24 that's</font>

346
00:11:00,060 --> 00:11:02,319
not 1 0 0 C so I'm<font color="#E5E5E5"> not the current</font>

347
00:11:01,890 --> 00:11:03,910
<font color="#E5E5E5">branch</font>

348
00:11:02,320 --> 00:11:06,460
I'm just going to<font color="#E5E5E5"> execute all my work on</font>

349
00:11:03,910 --> 00:11:08,319
<font color="#E5E5E5">that scratch</font><font color="#CCCCCC"> demand</font><font color="#E5E5E5"> at a scratch program</font>

350
00:11:06,460 --> 00:11:10,930
<font color="#E5E5E5">state will continue</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

351
00:11:08,320 --> 00:11:12,310
branch target<font color="#E5E5E5"> we're not continue then</font>

352
00:11:10,930 --> 00:11:15,069
jump back to<font color="#E5E5E5"> the beginning continue</font>

353
00:11:12,310 --> 00:11:17,109
continue continue and then finally a

354
00:11:15,070 --> 00:11:19,480
block of moves detects<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it is the</font>

355
00:11:17,110 --> 00:11:21,430
<font color="#E5E5E5">current branch</font><font color="#CCCCCC"> target</font><font color="#E5E5E5"> one zero zero</font><font color="#CCCCCC"> C</font>

356
00:11:19,480 --> 00:11:22,780
matches the<font color="#CCCCCC"> store branch target</font><font color="#E5E5E5"> so what</font>

357
00:11:21,430 --> 00:11:24,579
it's going<font color="#CCCCCC"> to do is it's</font><font color="#E5E5E5"> going to use</font>

358
00:11:22,780 --> 00:11:27,010
move instructions to reload all the

359
00:11:24,580 --> 00:11:29,470
programs<font color="#E5E5E5"> data references to now point to</font>

360
00:11:27,010 --> 00:11:30,670
<font color="#E5E5E5">the real program</font><font color="#CCCCCC"> state so subsequent</font>

361
00:11:29,470 --> 00:11:32,110
move instructions will have an effect on

362
00:11:30,670 --> 00:11:34,089
the real<font color="#E5E5E5"> state instead of</font><font color="#CCCCCC"> the scratch</font>

363
00:11:32,110 --> 00:11:36,700
<font color="#CCCCCC">State essentially turning execution</font><font color="#E5E5E5"> on</font>

364
00:11:34,090 --> 00:11:39,010
again at this<font color="#E5E5E5"> point so that's sort of</font>

365
00:11:36,700 --> 00:11:41,680
how loops work<font color="#E5E5E5"> next thing we need in</font>

366
00:11:39,010 --> 00:11:45,130
order<font color="#CCCCCC"> to implement actual programs with</font>

367
00:11:41,680 --> 00:11:46,270
move instructions is<font color="#CCCCCC"> arithmetic so basic</font>

368
00:11:45,130 --> 00:11:48,820
arithmetic is pretty<font color="#CCCCCC"> straightforward</font>

369
00:11:46,270 --> 00:11:50,920
with<font color="#CCCCCC"> lookup tables specifically</font><font color="#E5E5E5"> one byte</font>

370
00:11:48,820 --> 00:11:52,800
versions are very easy so let's say we

371
00:11:50,920 --> 00:11:55,000
<font color="#E5E5E5">wanted to implement and increment</font>

372
00:11:52,800 --> 00:11:58,870
instructions all increment does is it

373
00:11:55,000 --> 00:12:00,520
adds wine to a number well with a<font color="#CCCCCC"> one</font>

374
00:11:58,870 --> 00:12:02,830
<font color="#CCCCCC">byte value using</font><font color="#E5E5E5"> lookup</font><font color="#CCCCCC"> tables</font><font color="#E5E5E5"> it would</font>

375
00:12:00,520 --> 00:12:04,569
<font color="#E5E5E5">look something like this</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> C it's just</font>

376
00:12:02,830 --> 00:12:06,460
a long array and here's how this array

377
00:12:04,570 --> 00:12:08,050
works<font color="#CCCCCC"> if I want to figure out what is to</font>

378
00:12:06,460 --> 00:12:09,820
<font color="#E5E5E5">increment it by one</font>

379
00:12:08,050 --> 00:12:11,589
I move to element<font color="#E5E5E5"> two in the array and</font>

380
00:12:09,820 --> 00:12:14,020
<font color="#E5E5E5">read its value so this is element</font><font color="#CCCCCC"> zero</font>

381
00:12:11,590 --> 00:12:16,180
this<font color="#E5E5E5"> is element wine</font><font color="#CCCCCC"> missus element two</font>

382
00:12:14,020 --> 00:12:18,610
so element two is three I just figured

383
00:12:16,180 --> 00:12:21,760
<font color="#CCCCCC">out that</font><font color="#E5E5E5"> two incremented by one is three</font>

384
00:12:18,610 --> 00:12:23,110
using just data transfers<font color="#CCCCCC"> and assembly</font>

385
00:12:21,760 --> 00:12:25,830
this looks something like this we can

386
00:12:23,110 --> 00:12:27,700
use<font color="#E5E5E5"> macros to build up this lookup table</font>

387
00:12:25,830 --> 00:12:29,110
<font color="#CCCCCC">and then we can use a simple</font><font color="#E5E5E5"> move</font>

388
00:12:27,700 --> 00:12:30,550
instruction to actually access<font color="#CCCCCC"> the</font>

389
00:12:29,110 --> 00:12:33,940
lookup table so<font color="#E5E5E5"> this says go</font><font color="#CCCCCC"> to the</font>

390
00:12:30,550 --> 00:12:36,640
increment<font color="#E5E5E5"> lookup table and move forward</font>

391
00:12:33,940 --> 00:12:38,500
<font color="#CCCCCC">ax elements and read that</font><font color="#E5E5E5"> value out</font><font color="#CCCCCC"> of</font>

392
00:12:36,640 --> 00:12:40,420
the lookup table<font color="#E5E5E5"> so increment can be</font>

393
00:12:38,500 --> 00:12:43,690
done with exactly one move instruction

394
00:12:40,420 --> 00:12:45,040
now if if we stick to<font color="#E5E5E5"> simple things</font><font color="#CCCCCC"> like</font>

395
00:12:43,690 --> 00:12:46,810
increment and decrement it's going to be

396
00:12:45,040 --> 00:12:49,120
really<font color="#CCCCCC"> really hard to write any sort of</font>

397
00:12:46,810 --> 00:12:51,609
sophisticated<font color="#E5E5E5"> program so we need a more</font>

398
00:12:49,120 --> 00:12:54,040
sophisticated<font color="#E5E5E5"> arithmetic logic unit so I</font>

399
00:12:51,610 --> 00:12:56,770
started trying<font color="#E5E5E5"> to build this 32 bit ALU</font>

400
00:12:54,040 --> 00:12:59,650
using<font color="#CCCCCC"> only move instructions at this</font>

401
00:12:56,770 --> 00:13:01,270
point<font color="#E5E5E5"> so for 8-bit operations it's</font>

402
00:12:59,650 --> 00:13:02,949
fairly easy<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> look-up tables but</font>

403
00:13:01,270 --> 00:13:04,900
for 32-bit operations you can't<font color="#E5E5E5"> really</font>

404
00:13:02,950 --> 00:13:06,520
use look-up tables anymore<font color="#CCCCCC"> a 32-bit</font>

405
00:13:04,900 --> 00:13:08,620
lookup table for something like a 32-bit

406
00:13:06,520 --> 00:13:10,120
edition is hundreds of<font color="#E5E5E5"> gigabytes large</font>

407
00:13:08,620 --> 00:13:12,070
so that's that's<font color="#E5E5E5"> not going to scale very</font>

408
00:13:10,120 --> 00:13:14,110
<font color="#CCCCCC">well</font><font color="#E5E5E5"> so what I did is I wrote all the</font>

409
00:13:12,070 --> 00:13:15,889
<font color="#E5E5E5">look-up tables for the 8-bit operations</font>

410
00:13:14,110 --> 00:13:17,569
<font color="#CCCCCC">then I cascade</font><font color="#E5E5E5"> in 8-bit operations</font>

411
00:13:15,889 --> 00:13:19,759
together to form 32-bit operations so

412
00:13:17,569 --> 00:13:21,559
this is a macro<font color="#E5E5E5"> for performing a 32-bit</font>

413
00:13:19,759 --> 00:13:23,600
edition with only<font color="#CCCCCC"> move instructions</font>

414
00:13:21,559 --> 00:13:25,790
essentially we cascade<font color="#E5E5E5"> eight or</font><font color="#CCCCCC"> four</font>

415
00:13:23,600 --> 00:13:28,160
<font color="#CCCCCC">eight bit adders together in order to</font>

416
00:13:25,790 --> 00:13:30,079
perform<font color="#E5E5E5"> a 32-bit edition and when we</font>

417
00:13:28,160 --> 00:13:32,269
expand<font color="#E5E5E5"> this macro these are the move</font>

418
00:13:30,079 --> 00:13:33,919
instructions that will<font color="#CCCCCC"> perform a 32-bit</font>

419
00:13:32,269 --> 00:13:35,749
edition with<font color="#CCCCCC"> only unconditional data</font>

420
00:13:33,919 --> 00:13:37,609
transfers so it looks<font color="#E5E5E5"> like a lot but</font>

421
00:13:35,749 --> 00:13:38,839
<font color="#CCCCCC">this really</font><font color="#E5E5E5"> isn't too bad it's only a</font>

422
00:13:37,609 --> 00:13:41,059
handful of move instructions for a

423
00:13:38,839 --> 00:13:42,559
<font color="#E5E5E5">fairly complicated operation where does</font>

424
00:13:41,059 --> 00:13:44,600
get bad is for more<font color="#E5E5E5"> complicated</font>

425
00:13:42,559 --> 00:13:45,889
<font color="#CCCCCC">arithmetic operations for example this</font>

426
00:13:44,600 --> 00:13:48,769
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the macro I came up with for</font>

427
00:13:45,889 --> 00:13:50,359
implementing division<font color="#E5E5E5"> 32-bit division</font>

428
00:13:48,769 --> 00:13:52,449
with only<font color="#E5E5E5"> unconditional data transfers</font>

429
00:13:50,359 --> 00:13:54,919
now division is a fairly complex

430
00:13:52,449 --> 00:13:57,349
algorithm when you break it<font color="#E5E5E5"> down step by</font>

431
00:13:54,919 --> 00:13:59,179
step so when we expand this macro<font color="#E5E5E5"> this</font>

432
00:13:57,350 --> 00:14:00,589
is what 32-bit division looks like and

433
00:13:59,179 --> 00:14:03,019
<font color="#E5E5E5">only move instructions it's a little</font>

434
00:14:00,589 --> 00:14:05,239
over<font color="#E5E5E5"> 7,000 move instructions for one</font>

435
00:14:03,019 --> 00:14:07,279
give operation<font color="#E5E5E5"> so it's getting kind of</font>

436
00:14:05,239 --> 00:14:08,449
crazy<font color="#E5E5E5"> but it's still working at this</font>

437
00:14:07,279 --> 00:14:11,209
point we're still able to perform

438
00:14:08,449 --> 00:14:13,429
<font color="#E5E5E5">computation with only move instructions</font>

439
00:14:11,209 --> 00:14:15,258
so I thought I had all the basic

440
00:14:13,429 --> 00:14:17,600
building<font color="#E5E5E5"> blocks</font><font color="#CCCCCC"> ready</font><font color="#E5E5E5"> so I could</font>

441
00:14:15,259 --> 00:14:20,600
<font color="#E5E5E5">actually start tackling my my compiler</font>

442
00:14:17,600 --> 00:14:22,579
goal at this<font color="#E5E5E5"> point</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this compiler is</font>

443
00:14:20,600 --> 00:14:24,259
what I call the<font color="#CCCCCC"> Mothe</font><font color="#E5E5E5"> ascator so I found</font>

444
00:14:22,579 --> 00:14:26,719
something called<font color="#E5E5E5"> LCC it's the little</font>

445
00:14:24,259 --> 00:14:28,249
seed compiler it's a very very simple<font color="#E5E5E5"> C</font>

446
00:14:26,720 --> 00:14:30,589
compiler and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> used that as the compiler</font>

447
00:14:28,249 --> 00:14:33,290
<font color="#E5E5E5">front end and then I started</font><font color="#CCCCCC"> building a</font>

448
00:14:30,589 --> 00:14:35,540
new<font color="#E5E5E5"> back-end move back in for LCC so</font>

449
00:14:33,290 --> 00:14:37,699
that I could compile C code<font color="#CCCCCC"> into only</font>

450
00:14:35,540 --> 00:14:40,099
<font color="#E5E5E5">move instructions so the way I made this</font>

451
00:14:37,699 --> 00:14:41,479
work<font color="#E5E5E5"> is I used a si e EDI for the actual</font>

452
00:14:40,100 --> 00:14:43,819
<font color="#E5E5E5">program</font><font color="#CCCCCC"> state I used all my other</font>

453
00:14:41,480 --> 00:14:45,319
registers<font color="#E5E5E5"> for just scratch locations for</font>

454
00:14:43,819 --> 00:14:47,238
moving<font color="#CCCCCC"> data from</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> location to</font><font color="#E5E5E5"> another</font>

455
00:14:45,319 --> 00:14:49,368
<font color="#CCCCCC">as you</font><font color="#E5E5E5"> design my own move calling</font>

456
00:14:47,239 --> 00:14:51,439
convention built<font color="#E5E5E5"> a move emulated stack</font>

457
00:14:49,369 --> 00:14:53,209
<font color="#E5E5E5">and to go get that</font><font color="#CCCCCC"> 32-bit arithmetic</font>

458
00:14:51,439 --> 00:14:57,498
logic unit<font color="#E5E5E5"> simplify the way we access</font>

459
00:14:53,209 --> 00:14:59,508
dummy selectors and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> LCC</font><font color="#E5E5E5"> compile C</font>

460
00:14:57,499 --> 00:15:01,429
into<font color="#CCCCCC"> 102</font><font color="#E5E5E5"> different intermediate language</font>

461
00:14:59,509 --> 00:15:03,169
<font color="#E5E5E5">instruction so I had to painstakingly go</font>

462
00:15:01,429 --> 00:15:06,649
through and implement all 102 of<font color="#E5E5E5"> those</font>

463
00:15:03,169 --> 00:15:07,819
instructions by in<font color="#E5E5E5"> two moves by hand but</font>

464
00:15:06,649 --> 00:15:10,459
when it was<font color="#E5E5E5"> all</font><font color="#CCCCCC"> said</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> done I was</font>

465
00:15:07,819 --> 00:15:12,709
<font color="#E5E5E5">actually surprised by how smoothly this</font>

466
00:15:10,459 --> 00:15:15,319
this whole<font color="#E5E5E5"> thing went and I</font><font color="#CCCCCC"> ended up</font>

467
00:15:12,709 --> 00:15:18,079
<font color="#E5E5E5">with a functioning move only compiler so</font>

468
00:15:15,319 --> 00:15:20,329
so<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> mob skater that I want to</font>

469
00:15:18,079 --> 00:15:22,248
show you it's a move<font color="#E5E5E5"> only C compiler as</font>

470
00:15:20,329 --> 00:15:24,378
far as I know it's the<font color="#CCCCCC"> world's first</font>

471
00:15:22,249 --> 00:15:25,339
single<font color="#E5E5E5"> instruction C compiler mostly</font>

472
00:15:24,379 --> 00:15:26,760
because I don't<font color="#CCCCCC"> think anybody's ever</font>

473
00:15:25,339 --> 00:15:29,720
wanted such a thing in the<font color="#E5E5E5"> past</font>

474
00:15:26,760 --> 00:15:32,460
but<font color="#CCCCCC"> it's a quick</font><font color="#E5E5E5"> demo for what we can do</font>

475
00:15:29,720 --> 00:15:34,230
<font color="#E5E5E5">with with the</font><font color="#CCCCCC"> mapa skater let's let's</font>

476
00:15:32,460 --> 00:15:37,080
<font color="#E5E5E5">try to compile some programs so here</font>

477
00:15:34,230 --> 00:15:38,790
I've got<font color="#CCCCCC"> a really simple prime number</font>

478
00:15:37,080 --> 00:15:40,580
program so<font color="#CCCCCC"> all it does is</font><font color="#E5E5E5"> it checks if</font>

479
00:15:38,790 --> 00:15:42,660
as a function checks the numbers<font color="#CCCCCC"> Prime</font>

480
00:15:40,580 --> 00:15:45,510
and<font color="#E5E5E5"> it's going to find all the prime</font>

481
00:15:42,660 --> 00:15:46,800
<font color="#CCCCCC">numbers between</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> and 10,000</font><font color="#E5E5E5"> so what we</font>

482
00:15:45,510 --> 00:15:49,890
can do is we can compile this program

483
00:15:46,800 --> 00:15:53,670
<font color="#E5E5E5">with the mob skater</font><font color="#CCCCCC"> and what that's</font>

484
00:15:49,890 --> 00:15:55,080
going<font color="#E5E5E5"> to do is it's going</font><font color="#CCCCCC"> to compile our</font>

485
00:15:53,670 --> 00:15:57,479
program<font color="#CCCCCC"> into nothing but a whole bunch</font>

486
00:15:55,080 --> 00:15:58,500
<font color="#CCCCCC">of</font><font color="#E5E5E5"> unconditional data transfers when we</font>

487
00:15:57,480 --> 00:16:00,060
were<font color="#E5E5E5"> on</font><font color="#CCCCCC"> our program we can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> it</font>

488
00:15:58,500 --> 00:16:02,130
<font color="#CCCCCC">actually does calculate all the primes</font>

489
00:16:00,060 --> 00:16:03,390
<font color="#CCCCCC">even though it has no complex logic</font><font color="#E5E5E5"> it's</font>

490
00:16:02,130 --> 00:16:04,500
just<font color="#CCCCCC"> moving data from one location to</font>

491
00:16:03,390 --> 00:16:07,830
another it's able to<font color="#E5E5E5"> successfully</font>

492
00:16:04,500 --> 00:16:08,910
calculate all these prime numbers<font color="#CCCCCC"> but we</font>

493
00:16:07,830 --> 00:16:11,190
can take<font color="#E5E5E5"> it a step</font><font color="#CCCCCC"> further you</font><font color="#E5E5E5"> know it's</font>

494
00:16:08,910 --> 00:16:14,250
a full<font color="#E5E5E5"> C compiler at this point so we</font>

495
00:16:11,190 --> 00:16:16,320
can compile complex programs at<font color="#E5E5E5"> least in</font>

496
00:16:14,250 --> 00:16:18,330
theory for a while Michael Tyler<font color="#CCCCCC"> was</font>

497
00:16:16,320 --> 00:16:20,490
lacking<font color="#CCCCCC"> namely my compiler didn't have</font>

498
00:16:18,330 --> 00:16:22,260
support<font color="#E5E5E5"> for floating-point operations</font>

499
00:16:20,490 --> 00:16:23,520
and the reason<font color="#E5E5E5"> for that is an x86 you</font>

500
00:16:22,260 --> 00:16:26,850
can't access<font color="#E5E5E5"> the floating-point</font>

501
00:16:23,520 --> 00:16:28,410
registers<font color="#E5E5E5"> with the move instruction</font><font color="#CCCCCC"> but</font>

502
00:16:26,850 --> 00:16:30,390
you can't get very<font color="#E5E5E5"> far</font><font color="#CCCCCC"> with a compiler</font>

503
00:16:28,410 --> 00:16:32,850
without floating<font color="#E5E5E5"> point support so I</font>

504
00:16:30,390 --> 00:16:36,930
built a move on the I<font color="#E5E5E5"> Triple E floating</font>

505
00:16:32,850 --> 00:16:39,630
<font color="#CCCCCC">point emulator it's about 500,000 move</font>

506
00:16:36,930 --> 00:16:42,209
instructions<font color="#E5E5E5"> but I was pretty proud</font><font color="#CCCCCC"> that</font>

507
00:16:39,630 --> 00:16:44,490
<font color="#E5E5E5">this thing actually worked so I thought</font>

508
00:16:42,210 --> 00:16:46,290
like<font color="#E5E5E5"> well what's the the coolest thing I</font>

509
00:16:44,490 --> 00:16:49,680
could could write to demonstrate

510
00:16:46,290 --> 00:16:51,390
floating point math well on<font color="#E5E5E5"> 3d graphics</font>

511
00:16:49,680 --> 00:16:53,370
uses a lot of<font color="#CCCCCC"> floating</font><font color="#E5E5E5"> point math so I</font>

512
00:16:51,390 --> 00:16:56,220
threw together<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little like 3d graphics</font>

513
00:16:53,370 --> 00:16:58,610
engine and then compiled that with<font color="#E5E5E5"> the</font>

514
00:16:56,220 --> 00:17:00,870
<font color="#CCCCCC">Moff ascator</font><font color="#E5E5E5"> so at this point it's like</font>

515
00:16:58,610 --> 00:17:02,270
<font color="#CCCCCC">300,000 instruction</font><font color="#E5E5E5"> move instructions</font>

516
00:17:00,870 --> 00:17:05,190
for the graphics engine<font color="#E5E5E5"> and another</font>

517
00:17:02,270 --> 00:17:06,510
<font color="#CCCCCC">500,000 for the floating-point</font><font color="#E5E5E5"> emulation</font>

518
00:17:05,190 --> 00:17:09,360
piece of this so it's going<font color="#E5E5E5"> to be</font>

519
00:17:06,510 --> 00:17:11,069
something<font color="#E5E5E5"> these instructions for for a</font>

520
00:17:09,359 --> 00:17:12,929
little while and<font color="#E5E5E5"> I'm probably just going</font>

521
00:17:11,069 --> 00:17:15,089
<font color="#E5E5E5">to kill this so that we don't sit</font><font color="#CCCCCC"> here</font>

522
00:17:12,930 --> 00:17:17,190
all day<font color="#CCCCCC"> but when we</font><font color="#E5E5E5"> uh</font><font color="#CCCCCC"> when we're all</font>

523
00:17:15,089 --> 00:17:19,198
<font color="#CCCCCC">said and done</font><font color="#E5E5E5"> we can launch this</font><font color="#CCCCCC"> thing</font>

524
00:17:17,190 --> 00:17:20,970
and we can see<font color="#E5E5E5"> our little spinning</font>

525
00:17:19,199 --> 00:17:22,680
<font color="#CCCCCC">text-based spinning cube here so what's</font>

526
00:17:20,970 --> 00:17:23,640
going on here<font color="#E5E5E5"> is with only move</font>

527
00:17:22,680 --> 00:17:26,180
instructions we're performing

528
00:17:23,640 --> 00:17:28,290
trigonometric calculations<font color="#E5E5E5"> calculating</font>

529
00:17:26,180 --> 00:17:30,300
transformation matrices doing vector

530
00:17:28,290 --> 00:17:32,280
rotations and all sorts of really

531
00:17:30,300 --> 00:17:33,629
<font color="#E5E5E5">complex floating point math so it's</font>

532
00:17:32,280 --> 00:17:36,990
<font color="#E5E5E5">pretty amazing that</font><font color="#CCCCCC"> we can do all of</font>

533
00:17:33,630 --> 00:17:39,720
<font color="#CCCCCC">that with only unconditional data</font>

534
00:17:36,990 --> 00:17:40,550
transfers so with this<font color="#E5E5E5"> I was having a</font>

535
00:17:39,720 --> 00:17:41,810
<font color="#E5E5E5">lot of fun</font><font color="#CCCCCC"> compile</font>

536
00:17:40,550 --> 00:17:43,760
things I try to<font color="#CCCCCC"> think</font><font color="#E5E5E5"> what else could I</font>

537
00:17:41,810 --> 00:17:46,429
compile that<font color="#CCCCCC"> would be be fun and I</font>

538
00:17:43,760 --> 00:17:48,440
decided to<font color="#E5E5E5"> like do an inception kind of</font>

539
00:17:46,430 --> 00:17:51,980
thing and compile<font color="#CCCCCC"> them obfuscator with</font>

540
00:17:48,440 --> 00:17:53,540
them obfuscator<font color="#E5E5E5"> so now I have a program</font>

541
00:17:51,980 --> 00:17:55,730
written<font color="#E5E5E5"> and only move instructions</font><font color="#CCCCCC"> I</font>

542
00:17:53,540 --> 00:17:57,409
<font color="#CCCCCC">compiles other programs and to only move</font>

543
00:17:55,730 --> 00:17:58,850
instructions it's it's<font color="#CCCCCC"> a slowest thing</font>

544
00:17:57,410 --> 00:18:00,350
in<font color="#E5E5E5"> the world I tested it out it</font><font color="#CCCCCC"> takes</font>

545
00:17:58,850 --> 00:18:02,689
about three<font color="#CCCCCC"> days to</font><font color="#E5E5E5"> compile hello world</font>

546
00:18:00,350 --> 00:18:05,659
<font color="#CCCCCC">but it's really</font><font color="#E5E5E5"> really cool</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can</font>

547
00:18:02,690 --> 00:18:07,210
actually do that<font color="#E5E5E5"> so where does that</font>

548
00:18:05,660 --> 00:18:09,920
<font color="#E5E5E5">leave us so one of the interesting</font>

549
00:18:07,210 --> 00:18:12,530
<font color="#E5E5E5">aspects of of all of</font><font color="#CCCCCC"> this is how it</font>

550
00:18:09,920 --> 00:18:14,450
<font color="#CCCCCC">reduces programs so what we're looking</font>

551
00:18:12,530 --> 00:18:16,220
<font color="#E5E5E5">at up</font><font color="#CCCCCC"> here is called a program</font><font color="#E5E5E5"> control</font>

552
00:18:14,450 --> 00:18:18,050
flow graph<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if you haven't</font><font color="#E5E5E5"> seen these</font>

553
00:18:16,220 --> 00:18:19,880
<font color="#CCCCCC">before</font><font color="#E5E5E5"> the just behind a control flow</font>

554
00:18:18,050 --> 00:18:21,350
graph is that<font color="#E5E5E5"> your programs going to do</font>

555
00:18:19,880 --> 00:18:23,090
some kind of<font color="#CCCCCC"> calculation</font><font color="#E5E5E5"> and then it's</font>

556
00:18:21,350 --> 00:18:25,429
going<font color="#E5E5E5"> to make a decision</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something</font>

557
00:18:23,090 --> 00:18:26,929
true or false<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> things are true</font>

558
00:18:25,430 --> 00:18:28,370
it's going<font color="#E5E5E5"> to go down one path</font><font color="#CCCCCC"> of things</font>

559
00:18:26,930 --> 00:18:30,500
are false it's going to go down a

560
00:18:28,370 --> 00:18:31,790
<font color="#E5E5E5">different path so for example that's</font>

561
00:18:30,500 --> 00:18:33,860
what we're seeing<font color="#CCCCCC"> right here at the</font>

562
00:18:31,790 --> 00:18:35,810
opening of<font color="#E5E5E5"> this control flow graph we've</font>

563
00:18:33,860 --> 00:18:37,459
got some computations<font color="#E5E5E5"> then the program</font>

564
00:18:35,810 --> 00:18:38,899
makes a<font color="#E5E5E5"> decision it does one thing</font><font color="#CCCCCC"> if</font>

565
00:18:37,460 --> 00:18:40,310
the decision is true another thing<font color="#E5E5E5"> that</font>

566
00:18:38,900 --> 00:18:41,840
the decision is false<font color="#CCCCCC"> this is</font>

567
00:18:40,310 --> 00:18:44,210
essentially<font color="#E5E5E5"> what you would see with an</font>

568
00:18:41,840 --> 00:18:45,740
if-else statement here so control flow

569
00:18:44,210 --> 00:18:47,180
graphs gives you give you a great way<font color="#CCCCCC"> to</font>

570
00:18:45,740 --> 00:18:50,600
sort<font color="#CCCCCC"> of visualize the high-level</font>

571
00:18:47,180 --> 00:18:51,800
<font color="#E5E5E5">functionality of a program so this is</font>

572
00:18:50,600 --> 00:18:52,879
<font color="#E5E5E5">actually the control flow graph for a</font>

573
00:18:51,800 --> 00:18:54,590
little program that<font color="#E5E5E5"> prints out the</font>

574
00:18:52,880 --> 00:18:57,110
<font color="#E5E5E5">lyrics</font><font color="#CCCCCC"> to 99 bottles of</font><font color="#E5E5E5"> beer</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> wall</font>

575
00:18:54,590 --> 00:18:59,060
it's a very very simple<font color="#CCCCCC"> program but when</font>

576
00:18:57,110 --> 00:19:01,580
you when you deal with<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> analyze</font>

577
00:18:59,060 --> 00:19:03,020
programs<font color="#CCCCCC"> for a career you tend to</font>

578
00:19:01,580 --> 00:19:04,760
<font color="#E5E5E5">stumble across a lot of like very</font>

579
00:19:03,020 --> 00:19:06,139
complex control flow graphs like it's

580
00:19:04,760 --> 00:19:08,390
<font color="#E5E5E5">much more common for me to see a control</font>

581
00:19:06,140 --> 00:19:10,430
flow graph<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> and what we saw on</font>

582
00:19:08,390 --> 00:19:12,140
on the previous slides<font color="#E5E5E5"> but these are</font>

583
00:19:10,430 --> 00:19:14,150
these<font color="#CCCCCC"> are normal control flow graphs</font>

584
00:19:12,140 --> 00:19:15,830
<font color="#E5E5E5">what happens when we compile something</font>

585
00:19:14,150 --> 00:19:18,230
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the Moff ascator</font><font color="#E5E5E5"> is the control</font>

586
00:19:15,830 --> 00:19:21,379
flow changes so this<font color="#E5E5E5"> is the control flow</font>

587
00:19:18,230 --> 00:19:24,890
graph for that<font color="#CCCCCC"> prime program</font><font color="#E5E5E5"> that I</font>

588
00:19:21,380 --> 00:19:27,020
showed early on this<font color="#E5E5E5"> is the control flow</font>

589
00:19:24,890 --> 00:19:28,370
graph for that<font color="#CCCCCC"> three-d spinning</font><font color="#E5E5E5"> cube and</font>

590
00:19:27,020 --> 00:19:30,230
this<font color="#E5E5E5"> is the control flow graph for the</font>

591
00:19:28,370 --> 00:19:31,580
mop skated<font color="#CCCCCC"> mop</font><font color="#E5E5E5"> skater so you might</font>

592
00:19:30,230 --> 00:19:33,530
notice like a<font color="#CCCCCC"> pattern here they've all</font>

593
00:19:31,580 --> 00:19:35,990
just<font color="#CCCCCC"> become lines</font><font color="#E5E5E5"> and that's because</font>

594
00:19:33,530 --> 00:19:38,450
there are<font color="#CCCCCC"> no branches in these programs</font>

595
00:19:35,990 --> 00:19:41,780
it's just an endless<font color="#E5E5E5"> stream of move</font>

596
00:19:38,450 --> 00:19:43,400
instructions right now so I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> this</font>

597
00:19:41,780 --> 00:19:45,560
<font color="#CCCCCC">is sort</font><font color="#E5E5E5"> of neat</font><font color="#CCCCCC"> especially when you</font><font color="#E5E5E5"> look</font>

598
00:19:43,400 --> 00:19:47,060
at it<font color="#E5E5E5"> from this reduction perspective</font>

599
00:19:45,560 --> 00:19:49,280
maybe that question<font color="#E5E5E5"> I threw</font><font color="#CCCCCC"> out at</font><font color="#E5E5E5"> the</font>

600
00:19:47,060 --> 00:19:52,250
beginning<font color="#CCCCCC"> of the talk how much can we</font>

601
00:19:49,280 --> 00:19:54,020
simplify a program so far we've gotten

602
00:19:52,250 --> 00:19:56,840
<font color="#E5E5E5">rid of functions we've got rid of</font><font color="#CCCCCC"> Lu</font>

603
00:19:54,020 --> 00:20:00,139
and branches<font color="#E5E5E5"> and arithmetic</font><font color="#CCCCCC"> that's an</font>

604
00:19:56,840 --> 00:20:02,000
okay<font color="#E5E5E5"> start but we might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to take</font>

605
00:20:00,140 --> 00:20:03,620
it further<font color="#CCCCCC"> because right</font><font color="#E5E5E5"> now we have all</font>

606
00:20:02,000 --> 00:20:05,180
the same instructions and that<font color="#E5E5E5"> all of</font>

607
00:20:03,620 --> 00:20:07,729
<font color="#CCCCCC">our instructions</font><font color="#E5E5E5"> are move instructions</font>

608
00:20:05,180 --> 00:20:09,980
but they're not<font color="#E5E5E5"> all really the same</font><font color="#CCCCCC"> and</font>

609
00:20:07,730 --> 00:20:12,020
what<font color="#E5E5E5"> I mean by that is x86 has a lot of</font>

610
00:20:09,980 --> 00:20:13,430
<font color="#E5E5E5">different types of move instructions</font>

611
00:20:12,020 --> 00:20:15,470
you've got register to register

612
00:20:13,430 --> 00:20:17,510
transfers you've got things<font color="#E5E5E5"> like this is</font>

613
00:20:15,470 --> 00:20:19,940
a one byte<font color="#E5E5E5"> write from a register into</font>

614
00:20:17,510 --> 00:20:21,650
memory<font color="#E5E5E5"> you've got the ability to load</font>

615
00:20:19,940 --> 00:20:23,840
immediate values or constants into

616
00:20:21,650 --> 00:20:26,240
<font color="#E5E5E5">registers and you've got really really</font>

617
00:20:23,840 --> 00:20:29,209
complex<font color="#E5E5E5"> addressing</font><font color="#CCCCCC"> form so move is a</font>

618
00:20:26,240 --> 00:20:30,890
very very<font color="#CCCCCC"> diverse instruction so if we</font>

619
00:20:29,210 --> 00:20:32,320
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> simplify our program</font><font color="#CCCCCC"> even more</font>

620
00:20:30,890 --> 00:20:35,000
we should<font color="#E5E5E5"> start getting</font><font color="#CCCCCC"> rid of</font><font color="#E5E5E5"> some of</font>

621
00:20:32,320 --> 00:20:37,250
these these crazy move instructions that

622
00:20:35,000 --> 00:20:38,720
x86 supports it's a very first thing we

623
00:20:37,250 --> 00:20:40,460
<font color="#CCCCCC">can</font><font color="#E5E5E5"> do the easiest one is get rid of</font>

624
00:20:38,720 --> 00:20:41,570
register to register transfers we don't

625
00:20:40,460 --> 00:20:43,340
need the ability<font color="#CCCCCC"> to transfer one</font>

626
00:20:41,570 --> 00:20:45,889
register to another so this instruction

627
00:20:43,340 --> 00:20:48,260
copies the<font color="#CCCCCC"> edx register into the EAH</font>

628
00:20:45,890 --> 00:20:51,470
register<font color="#E5E5E5"> but we don't need that let's</font>

629
00:20:48,260 --> 00:20:53,390
rewrite this<font color="#E5E5E5"> by instead making move</font><font color="#CCCCCC"> edx</font>

630
00:20:51,470 --> 00:20:55,310
into some scratch location in memory<font color="#CCCCCC"> and</font>

631
00:20:53,390 --> 00:20:57,440
then read<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> that scratch location</font>

632
00:20:55,310 --> 00:21:00,560
<font color="#E5E5E5">in memory into EAX so this still copies</font>

633
00:20:57,440 --> 00:21:02,000
<font color="#CCCCCC">edx</font><font color="#E5E5E5"> into EAX</font><font color="#CCCCCC"> it just does it with memory</font>

634
00:21:00,560 --> 00:21:05,300
transfers instead of registered

635
00:21:02,000 --> 00:21:07,490
transfers so let's start and we can also

636
00:21:05,300 --> 00:21:09,020
<font color="#E5E5E5">eliminate constant register transfer so</font>

637
00:21:07,490 --> 00:21:11,180
this move instruction loads the value

638
00:21:09,020 --> 00:21:13,090
<font color="#CCCCCC">one two three four five into the EAX</font>

639
00:21:11,180 --> 00:21:15,140
register<font color="#E5E5E5"> so we could rewrite</font><font color="#CCCCCC"> that</font>

640
00:21:13,090 --> 00:21:16,639
basically store one two three four five

641
00:21:15,140 --> 00:21:18,440
somewhere<font color="#E5E5E5"> in memory and then use a</font>

642
00:21:16,640 --> 00:21:20,180
memory<font color="#CCCCCC"> access to load that value into</font>

643
00:21:18,440 --> 00:21:21,770
<font color="#E5E5E5">the</font><font color="#CCCCCC"> EAX register so we</font><font color="#E5E5E5"> got rid of</font>

644
00:21:20,180 --> 00:21:23,450
another<font color="#E5E5E5"> form of these move instructions</font>

645
00:21:21,770 --> 00:21:27,440
so<font color="#CCCCCC"> now all</font><font color="#E5E5E5"> of our move instructions</font>

646
00:21:23,450 --> 00:21:28,640
either<font color="#E5E5E5"> read</font><font color="#CCCCCC"> to or</font><font color="#E5E5E5"> write from memory next</font>

647
00:21:27,440 --> 00:21:31,130
thing we might<font color="#CCCCCC"> want to try start getting</font>

648
00:21:28,640 --> 00:21:34,610
rid<font color="#E5E5E5"> of some of the complex byte accesses</font>

649
00:21:31,130 --> 00:21:36,650
that x86<font color="#E5E5E5"> supports so with move</font>

650
00:21:34,610 --> 00:21:40,370
instructions on<font color="#E5E5E5"> 32-bit x86 you can</font>

651
00:21:36,650 --> 00:21:42,680
<font color="#E5E5E5">actually transfer either</font><font color="#CCCCCC"> 8 16 or</font><font color="#E5E5E5"> 32 bits</font>

652
00:21:40,370 --> 00:21:44,000
of<font color="#E5E5E5"> data at a</font><font color="#CCCCCC"> time so I want all of</font><font color="#E5E5E5"> my</font>

653
00:21:42,680 --> 00:21:45,500
move instructions to be transferring<font color="#E5E5E5"> the</font>

654
00:21:44,000 --> 00:21:47,270
same size data so I'm going to<font color="#E5E5E5"> try to</font>

655
00:21:45,500 --> 00:21:49,340
get rid<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these 8 and</font><font color="#CCCCCC"> 16-bit</font><font color="#E5E5E5"> memory</font>

656
00:21:47,270 --> 00:21:52,790
accesses so<font color="#E5E5E5"> for example this instruction</font>

657
00:21:49,340 --> 00:21:55,250
loads<font color="#E5E5E5"> one bite into the</font><font color="#CCCCCC"> EAX register so</font>

658
00:21:52,790 --> 00:21:58,010
al is actually the lowest byte of the<font color="#E5E5E5"> 32</font>

659
00:21:55,250 --> 00:22:00,230
bit<font color="#CCCCCC"> 4 byte EAX register is what's</font><font color="#E5E5E5"> going</font>

660
00:21:58,010 --> 00:22:01,550
on<font color="#E5E5E5"> here so to rewrite this it's a little</font>

661
00:22:00,230 --> 00:22:04,100
<font color="#CCCCCC">bit more complex we're going to take the</font>

662
00:22:01,550 --> 00:22:05,659
whole<font color="#CCCCCC"> four byte EAX register</font><font color="#E5E5E5"> toss it</font>

663
00:22:04,100 --> 00:22:06,830
into<font color="#E5E5E5"> some scratch memory let's say we're</font>

664
00:22:05,660 --> 00:22:09,500
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> store that in to add</font>

665
00:22:06,830 --> 00:22:10,789
us 200 in memory<font color="#CCCCCC"> then</font><font color="#E5E5E5"> what I'm going to</font>

666
00:22:09,500 --> 00:22:12,380
do is I'm<font color="#CCCCCC"> going to go to the byte that I</font>

667
00:22:10,789 --> 00:22:13,760
actually want to read which<font color="#CCCCCC"> is at</font>

668
00:22:12,380 --> 00:22:16,220
address<font color="#E5E5E5"> 100 and I'm going to move</font>

669
00:22:13,760 --> 00:22:18,220
backwards<font color="#CCCCCC"> three bytes</font><font color="#E5E5E5"> and load all four</font>

670
00:22:16,220 --> 00:22:21,500
of these bytes<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> EAX register</font>

671
00:22:18,220 --> 00:22:23,840
<font color="#E5E5E5">then I'm going to write Dax</font><font color="#CCCCCC"> into address</font>

672
00:22:21,500 --> 00:22:25,970
200<font color="#E5E5E5"> minus 3 so what you'll see</font><font color="#CCCCCC"> is that</font>

673
00:22:23,840 --> 00:22:29,570
<font color="#E5E5E5">we did is we copied this</font><font color="#CCCCCC"> 4 bytes from</font>

674
00:22:25,970 --> 00:22:32,210
address 100 back<font color="#E5E5E5"> 3 over to these</font><font color="#CCCCCC"> 4 bytes</font>

675
00:22:29,570 --> 00:22:34,549
200 back<font color="#E5E5E5"> 3 and you'll notice that when</font><font color="#CCCCCC"> I</font>

676
00:22:32,210 --> 00:22:37,250
<font color="#CCCCCC">did that</font><font color="#E5E5E5"> what I really did with was with</font>

677
00:22:34,549 --> 00:22:40,220
this one byte at<font color="#E5E5E5"> address 100</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> exactly</font>

678
00:22:37,250 --> 00:22:42,679
move that<font color="#CCCCCC"> into</font><font color="#E5E5E5"> address 200 so that low</font>

679
00:22:40,220 --> 00:22:44,750
byte got loaded<font color="#E5E5E5"> with my desire about my</font>

680
00:22:42,679 --> 00:22:47,059
desired value while the<font color="#CCCCCC"> hi free byte</font>

681
00:22:44,750 --> 00:22:49,970
here contained the<font color="#CCCCCC"> original 3 bytes from</font>

682
00:22:47,059 --> 00:22:53,149
the<font color="#CCCCCC"> EAX register</font><font color="#E5E5E5"> so when I load now from</font>

683
00:22:49,970 --> 00:22:55,279
address<font color="#E5E5E5"> 201 LOD</font><font color="#CCCCCC"> 4 bytes</font><font color="#E5E5E5"> into EAX I'm</font>

684
00:22:53,149 --> 00:22:57,500
<font color="#E5E5E5">preserving the</font><font color="#CCCCCC"> original</font><font color="#E5E5E5"> high 3 bytes</font><font color="#CCCCCC"> of</font>

685
00:22:55,279 --> 00:22:59,929
<font color="#E5E5E5">the a X while loading a</font><font color="#CCCCCC"> new low byte of</font>

686
00:22:57,500 --> 00:23:03,500
a X<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> how we can get rid of</font>

687
00:22:59,929 --> 00:23:05,350
different size accesses with with some

688
00:23:03,500 --> 00:23:08,630
more remapping of our move instructions

689
00:23:05,350 --> 00:23:10,730
<font color="#E5E5E5">next</font><font color="#CCCCCC"> thing we need to work on x86 has</font>

690
00:23:08,630 --> 00:23:12,230
some really<font color="#CCCCCC"> really complex</font><font color="#E5E5E5"> addressing</font>

691
00:23:10,730 --> 00:23:14,360
forms we really want to simplify<font color="#E5E5E5"> these</font>

692
00:23:12,230 --> 00:23:17,600
addressing<font color="#E5E5E5"> forms so for example this</font>

693
00:23:14,360 --> 00:23:20,240
this move instruction says add 1 2<font color="#E5E5E5"> 3 4</font><font color="#CCCCCC"> 2</font>

694
00:23:17,600 --> 00:23:22,699
<font color="#CCCCCC">EC X</font><font color="#E5E5E5"> 2 8 x</font><font color="#CCCCCC"> e DX go to that</font><font color="#E5E5E5"> location</font>

695
00:23:20,240 --> 00:23:26,120
memory<font color="#E5E5E5"> fetch 32 bits load it into the</font>

696
00:23:22,700 --> 00:23:27,440
<font color="#CCCCCC">EAX register so we can simplify this and</font>

697
00:23:26,120 --> 00:23:28,580
we already<font color="#E5E5E5"> have the tools available to</font>

698
00:23:27,440 --> 00:23:30,590
<font color="#E5E5E5">do it</font><font color="#CCCCCC"> we've got</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> mob Skater</font>

699
00:23:28,580 --> 00:23:32,750
arithmetic logic unit so we<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> that</font>

700
00:23:30,590 --> 00:23:35,240
<font color="#E5E5E5">ALU to actually calculate a portion of</font>

701
00:23:32,750 --> 00:23:38,000
this<font color="#E5E5E5"> memory access we can calculate</font><font color="#CCCCCC"> ec x</font>

702
00:23:35,240 --> 00:23:40,159
<font color="#CCCCCC">+ 8 x edx</font><font color="#E5E5E5"> using very simple move</font>

703
00:23:38,000 --> 00:23:42,049
instructions<font color="#E5E5E5"> and accumulate the results</font>

704
00:23:40,159 --> 00:23:44,600
into<font color="#E5E5E5"> some other registers so that what</font>

705
00:23:42,049 --> 00:23:46,330
<font color="#CCCCCC">that gives us is a</font><font color="#E5E5E5"> bunch of ALU</font>

706
00:23:44,600 --> 00:23:49,789
instructions to do that computation

707
00:23:46,330 --> 00:23:51,500
<font color="#E5E5E5">followed by our reduced form of this</font>

708
00:23:49,789 --> 00:23:53,299
original<font color="#E5E5E5"> instruction so now instead</font><font color="#CCCCCC"> of</font>

709
00:23:51,500 --> 00:23:56,960
<font color="#E5E5E5">that complex</font><font color="#CCCCCC"> addressing we see here it's</font>

710
00:23:53,299 --> 00:23:58,279
just<font color="#E5E5E5"> 1 2 3 4 +</font><font color="#CCCCCC"> e CX so so we're almost</font>

711
00:23:56,960 --> 00:23:59,779
there we've<font color="#CCCCCC"> got no more registered to</font>

712
00:23:58,279 --> 00:24:01,610
register transfer<font color="#E5E5E5"> is no more constant</font>

713
00:23:59,779 --> 00:24:03,590
register<font color="#E5E5E5"> transfer is no more 8 or 16-bit</font>

714
00:24:01,610 --> 00:24:05,479
instructions<font color="#CCCCCC"> all memory accesses are the</font>

715
00:24:03,590 --> 00:24:07,789
form register plus some constant all

716
00:24:05,480 --> 00:24:09,500
move instructions are now either<font color="#E5E5E5"> reading</font>

717
00:24:07,789 --> 00:24:11,149
<font color="#CCCCCC">from register</font><font color="#E5E5E5"> plus a</font><font color="#CCCCCC"> constant into a</font>

718
00:24:09,500 --> 00:24:12,889
register<font color="#CCCCCC"> or writing a register into a</font>

719
00:24:11,149 --> 00:24:15,020
register plus some constant so we've

720
00:24:12,889 --> 00:24:16,340
greatly<font color="#E5E5E5"> simplified the forms of our move</font>

721
00:24:15,020 --> 00:24:18,470
instructions but we can still<font color="#E5E5E5"> take it</font>

722
00:24:16,340 --> 00:24:20,240
<font color="#E5E5E5">further right now we're using all</font><font color="#CCCCCC"> 8</font>

723
00:24:18,470 --> 00:24:22,550
general-purpose registers<font color="#E5E5E5"> exit</font>

724
00:24:20,240 --> 00:24:24,380
<font color="#E5E5E5">six has to offer</font><font color="#CCCCCC"> we can decrease that to</font>

725
00:24:22,550 --> 00:24:26,030
<font color="#E5E5E5">only two registers just by storing all</font>

726
00:24:24,380 --> 00:24:27,620
the extras in<font color="#CCCCCC"> to scratch locations</font><font color="#E5E5E5"> and</font>

727
00:24:26,030 --> 00:24:29,600
memory so if you do<font color="#E5E5E5"> this production</font>

728
00:24:27,620 --> 00:24:32,209
<font color="#E5E5E5">you'll find that all of your move</font>

729
00:24:29,600 --> 00:24:35,480
instructions are now moving<font color="#E5E5E5"> either from</font>

730
00:24:32,210 --> 00:24:37,760
memory at ESI or<font color="#E5E5E5"> EDI plus some constant</font>

731
00:24:35,480 --> 00:24:41,000
<font color="#CCCCCC">into ESI or</font><font color="#E5E5E5"> EDI those are the registers</font>

732
00:24:37,760 --> 00:24:44,210
I chose or writing ESI or<font color="#CCCCCC"> EDI</font><font color="#E5E5E5"> into ESI</font>

733
00:24:41,000 --> 00:24:46,610
<font color="#CCCCCC">or</font><font color="#E5E5E5"> EDI EDI plus some constant so so</font>

734
00:24:44,210 --> 00:24:47,900
we're getting<font color="#E5E5E5"> there what I</font><font color="#CCCCCC"> notice</font><font color="#E5E5E5"> when I</font>

735
00:24:46,610 --> 00:24:50,270
<font color="#E5E5E5">was looking at my</font><font color="#CCCCCC"> program all of our</font>

736
00:24:47,900 --> 00:24:52,400
moves<font color="#E5E5E5"> are now of these two forms</font><font color="#CCCCCC"> writes</font>

737
00:24:50,270 --> 00:24:55,100
<font color="#CCCCCC">right to</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> reads read for memory</font>

738
00:24:52,400 --> 00:24:58,580
but<font color="#E5E5E5"> sometimes I'll have write read</font><font color="#CCCCCC"> write</font>

739
00:24:55,100 --> 00:25:00,379
read read read read<font color="#CCCCCC"> write right so</font>

740
00:24:58,580 --> 00:25:02,240
there's still some<font color="#E5E5E5"> diversity going on</font>

741
00:25:00,380 --> 00:25:04,580
there I've<font color="#E5E5E5"> got</font><font color="#CCCCCC"> different orders to my</font>

742
00:25:02,240 --> 00:25:06,320
reads and writes so I thought to make

743
00:25:04,580 --> 00:25:07,879
things even more<font color="#E5E5E5"> homogeneous we could</font>

744
00:25:06,320 --> 00:25:09,678
alternate reads and writes and this is

745
00:25:07,880 --> 00:25:11,450
actually<font color="#E5E5E5"> really easy to do what I want</font>

746
00:25:09,679 --> 00:25:13,010
is I want<font color="#CCCCCC"> exactly one read followed by</font>

747
00:25:11,450 --> 00:25:15,830
exactly one<font color="#E5E5E5"> write followed by exactly</font>

748
00:25:13,010 --> 00:25:17,900
<font color="#E5E5E5">one read etc so to accomplish that if we</font>

749
00:25:15,830 --> 00:25:19,730
see two reads in a row we're just going

750
00:25:17,900 --> 00:25:21,260
<font color="#E5E5E5">to insert a dummy</font><font color="#CCCCCC"> writes in</font><font color="#E5E5E5"> between the</font>

751
00:25:19,730 --> 00:25:22,550
two if we see two writes in a row we're

752
00:25:21,260 --> 00:25:24,350
going<font color="#CCCCCC"> to insert a dummy read in between</font>

753
00:25:22,550 --> 00:25:27,230
<font color="#CCCCCC">the</font><font color="#E5E5E5"> two what I mean by dummy accesses</font>

754
00:25:24,350 --> 00:25:29,000
and access<font color="#CCCCCC"> that follows</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> instruction</font>

755
00:25:27,230 --> 00:25:31,070
format but doesn't actually<font color="#CCCCCC"> change the</font>

756
00:25:29,000 --> 00:25:33,620
program<font color="#CCCCCC"> State in any way so with that</font>

757
00:25:31,070 --> 00:25:35,540
this<font color="#E5E5E5"> is what our</font><font color="#CCCCCC"> new move</font><font color="#E5E5E5"> program looks</font>

758
00:25:33,620 --> 00:25:37,459
<font color="#E5E5E5">like on the right here all</font><font color="#CCCCCC"> of these</font>

759
00:25:35,540 --> 00:25:39,530
instructions<font color="#CCCCCC"> will</font><font color="#E5E5E5"> virtually identical</font><font color="#CCCCCC"> to</font>

760
00:25:37,460 --> 00:25:41,390
every single<font color="#CCCCCC"> other instruction inside</font>

761
00:25:39,530 --> 00:25:43,730
<font color="#E5E5E5">the program so the programs become much</font>

762
00:25:41,390 --> 00:25:45,350
much<font color="#E5E5E5"> more simple than</font><font color="#CCCCCC"> it originally</font><font color="#E5E5E5"> was</font>

763
00:25:43,730 --> 00:25:47,090
after we ran it through<font color="#CCCCCC"> them office</font>

764
00:25:45,350 --> 00:25:49,449
<font color="#CCCCCC">cater so I thought we're doing pretty</font>

765
00:25:47,090 --> 00:25:51,530
good but can we take<font color="#E5E5E5"> this even further</font><font color="#CCCCCC"> I</font>

766
00:25:49,450 --> 00:25:53,090
thought what if<font color="#E5E5E5"> we started using like</font>

767
00:25:51,530 --> 00:25:54,860
pseudo registers like<font color="#E5E5E5"> instead of</font>

768
00:25:53,090 --> 00:25:56,990
registers what if we<font color="#CCCCCC"> just use memory</font><font color="#E5E5E5"> to</font>

769
00:25:54,860 --> 00:25:59,030
hold<font color="#E5E5E5"> the register constants or the</font>

770
00:25:56,990 --> 00:26:01,040
register contents instead so like the

771
00:25:59,030 --> 00:26:02,750
ESI register instead of using ESI we're

772
00:26:01,040 --> 00:26:05,780
going to use the<font color="#E5E5E5"> memory at some totally</font>

773
00:26:02,750 --> 00:26:09,020
arbitrary location<font color="#E5E5E5"> 8 900 100 and instead</font>

774
00:26:05,780 --> 00:26:11,090
<font color="#E5E5E5">of EDI</font><font color="#CCCCCC"> using memory at 8 900 200 so just</font>

775
00:26:09,020 --> 00:26:12,620
arbitrary free locations in memory

776
00:26:11,090 --> 00:26:14,809
instead of actually<font color="#E5E5E5"> using registers at</font>

777
00:26:12,620 --> 00:26:16,909
all so we're going to<font color="#E5E5E5"> call these pseudo</font>

778
00:26:14,809 --> 00:26:19,730
registers so with<font color="#E5E5E5"> these pseudo registers</font>

779
00:26:16,910 --> 00:26:22,280
our move instructions now look like like

780
00:26:19,730 --> 00:26:24,440
this<font color="#E5E5E5"> so at this point the benefit here</font>

781
00:26:22,280 --> 00:26:26,780
is<font color="#E5E5E5"> we're just</font><font color="#CCCCCC"> moving values</font><font color="#E5E5E5"> to and from</font>

782
00:26:24,440 --> 00:26:28,370
different<font color="#CCCCCC"> locations in</font><font color="#E5E5E5"> memory we don't</font>

783
00:26:26,780 --> 00:26:30,889
even<font color="#E5E5E5"> have the complexity of register</font>

784
00:26:28,370 --> 00:26:32,689
accesses anymore but unfortunately<font color="#CCCCCC"> for</font>

785
00:26:30,890 --> 00:26:33,980
<font color="#CCCCCC">us this is no</font><font color="#E5E5E5"> longer valid x86</font>

786
00:26:32,690 --> 00:26:35,809
instruction you can't<font color="#E5E5E5"> access</font>

787
00:26:33,980 --> 00:26:39,260
multiple<font color="#E5E5E5"> memory addresses like this at</font>

788
00:26:35,809 --> 00:26:41,960
once<font color="#E5E5E5"> in x86</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so well what's the point</font>

789
00:26:39,260 --> 00:26:43,370
<font color="#E5E5E5">if this isn't valid x86 anymore well</font>

790
00:26:41,960 --> 00:26:45,620
this gives<font color="#E5E5E5"> us the ability to</font><font color="#CCCCCC"> create like</font>

791
00:26:43,370 --> 00:26:47,989
a new synthetic move instruction that

792
00:26:45,620 --> 00:26:50,479
<font color="#E5E5E5">I'm going to call big move</font><font color="#CCCCCC"> so big moves</font>

793
00:26:47,990 --> 00:26:52,820
format looks<font color="#E5E5E5"> something like this it goes</font>

794
00:26:50,480 --> 00:26:54,799
<font color="#E5E5E5">to an address in</font><font color="#CCCCCC"> memory reads</font><font color="#E5E5E5"> the value</font>

795
00:26:52,820 --> 00:26:56,780
from<font color="#CCCCCC"> that address and then adds in some</font>

796
00:26:54,799 --> 00:26:59,660
<font color="#E5E5E5">constant</font><font color="#CCCCCC"> offset then it goes to that</font>

797
00:26:56,780 --> 00:27:00,918
address<font color="#CCCCCC"> read that</font><font color="#E5E5E5"> value from memory and</font>

798
00:26:59,660 --> 00:27:02,900
it goes to<font color="#CCCCCC"> another address</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> memory</font>

799
00:27:00,919 --> 00:27:05,809
reads<font color="#E5E5E5"> that value out</font><font color="#CCCCCC"> adds an a constant</font>

800
00:27:02,900 --> 00:27:08,390
offset<font color="#CCCCCC"> into that location it writes</font><font color="#E5E5E5"> what</font>

801
00:27:05,809 --> 00:27:10,309
it read from the right so so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is our</font>

802
00:27:08,390 --> 00:27:12,410
big move instruction<font color="#CCCCCC"> a little complex</font>

803
00:27:10,309 --> 00:27:14,660
<font color="#CCCCCC">but it accomplishes</font><font color="#E5E5E5"> everything we need</font>

804
00:27:12,410 --> 00:27:17,110
to do so<font color="#CCCCCC"> our broken x86 instruction</font>

805
00:27:14,660 --> 00:27:18,919
looks something like<font color="#E5E5E5"> this in big move</font>

806
00:27:17,110 --> 00:27:20,899
<font color="#E5E5E5">notation you'll notice I've just</font>

807
00:27:18,919 --> 00:27:22,940
replaced<font color="#E5E5E5"> ESI</font><font color="#CCCCCC"> and EDI with memory</font>

808
00:27:20,900 --> 00:27:24,140
accesses<font color="#E5E5E5"> instead each one's</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going</font>

809
00:27:22,940 --> 00:27:25,490
to be<font color="#E5E5E5"> dereference and added to a</font>

810
00:27:24,140 --> 00:27:27,919
constant<font color="#E5E5E5"> and then we're going to</font>

811
00:27:25,490 --> 00:27:29,540
<font color="#E5E5E5">transfer memory that way so what we can</font>

812
00:27:27,919 --> 00:27:31,010
<font color="#E5E5E5">do now</font><font color="#CCCCCC"> is we can</font><font color="#E5E5E5"> take all those old move</font>

813
00:27:29,540 --> 00:27:32,799
instructions that<font color="#E5E5E5"> we had and translate</font>

814
00:27:31,010 --> 00:27:35,059
<font color="#E5E5E5">them into the more generic</font><font color="#CCCCCC"> big move</font>

815
00:27:32,799 --> 00:27:37,940
<font color="#CCCCCC">instructions so for example a register</font>

816
00:27:35,059 --> 00:27:41,299
read<font color="#E5E5E5"> becomes this version of big move a</font>

817
00:27:37,940 --> 00:27:43,429
register<font color="#E5E5E5"> or a memory write becomes this</font>

818
00:27:41,299 --> 00:27:45,620
<font color="#CCCCCC">version of big move and</font><font color="#E5E5E5"> the neat thing</font>

819
00:27:43,429 --> 00:27:47,900
<font color="#E5E5E5">here</font><font color="#CCCCCC"> that you'll see is both of</font><font color="#E5E5E5"> these</font>

820
00:27:45,620 --> 00:27:50,178
big move instructions have exactly<font color="#E5E5E5"> the</font>

821
00:27:47,900 --> 00:27:52,370
same<font color="#E5E5E5"> format so whether we are originally</font>

822
00:27:50,179 --> 00:27:54,650
doing<font color="#E5E5E5"> a register memory read or memory</font>

823
00:27:52,370 --> 00:27:56,750
right<font color="#E5E5E5"> now all of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> instructions have</font>

824
00:27:54,650 --> 00:27:58,760
exactly the<font color="#CCCCCC"> same format as every other</font>

825
00:27:56,750 --> 00:28:01,400
instruction that's going to be important

826
00:27:58,760 --> 00:28:03,140
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it'll lets us reduce things</font><font color="#E5E5E5"> even</font>

827
00:28:01,400 --> 00:28:04,940
further<font color="#E5E5E5"> because now</font><font color="#CCCCCC"> that all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> our</font>

828
00:28:03,140 --> 00:28:06,440
instructions<font color="#E5E5E5"> are exactly the</font><font color="#CCCCCC"> same format</font>

829
00:28:04,940 --> 00:28:09,110
we<font color="#CCCCCC"> can start thinking about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> is the</font>

830
00:28:06,440 --> 00:28:10,700
essence of this instruction because for

831
00:28:09,110 --> 00:28:12,490
all<font color="#E5E5E5"> of my instructions they all start</font>

832
00:28:10,700 --> 00:28:14,960
with moves they all start with bracket

833
00:28:12,490 --> 00:28:16,580
asterisk here<font color="#E5E5E5"> the only part of this</font>

834
00:28:14,960 --> 00:28:18,290
instruction that changes between<font color="#E5E5E5"> one</font>

835
00:28:16,580 --> 00:28:20,629
move instruction to the next are these

836
00:28:18,290 --> 00:28:22,490
four constants<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have here so we</font>

837
00:28:20,630 --> 00:28:25,309
can extract<font color="#E5E5E5"> these four constants and</font>

838
00:28:22,490 --> 00:28:28,250
<font color="#E5E5E5">they basically form the essence of this</font>

839
00:28:25,309 --> 00:28:31,129
move instruction so I'm going<font color="#E5E5E5"> to extract</font>

840
00:28:28,250 --> 00:28:32,900
<font color="#E5E5E5">all of these constants</font><font color="#CCCCCC"> into a table you</font>

841
00:28:31,130 --> 00:28:34,250
can<font color="#E5E5E5"> see each element in</font><font color="#CCCCCC"> the tables or</font>

842
00:28:32,900 --> 00:28:36,230
each entry in the<font color="#CCCCCC"> table is going</font><font color="#E5E5E5"> to have</font>

843
00:28:34,250 --> 00:28:37,130
four elements<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> and since I've got</font>

844
00:28:36,230 --> 00:28:38,210
hundreds of<font color="#E5E5E5"> thousands</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> move</font>

845
00:28:37,130 --> 00:28:39,830
instructions at this point I'm<font color="#CCCCCC"> gonna</font>

846
00:28:38,210 --> 00:28:42,200
<font color="#CCCCCC">have</font><font color="#E5E5E5"> hundreds</font><font color="#CCCCCC"> of thousands of entries</font><font color="#E5E5E5"> in</font>

847
00:28:39,830 --> 00:28:44,720
my table<font color="#E5E5E5"> so so what do we do now oh</font>

848
00:28:42,200 --> 00:28:47,000
<font color="#E5E5E5">we've distilled an entire</font><font color="#CCCCCC"> C program down</font>

849
00:28:44,720 --> 00:28:47,620
into a simple table<font color="#CCCCCC"> describing a very</font>

850
00:28:47,000 --> 00:28:49,360
long list<font color="#CCCCCC"> of</font>

851
00:28:47,620 --> 00:28:51,669
data transfers<font color="#E5E5E5"> that implement that</font>

852
00:28:49,360 --> 00:28:53,770
program<font color="#E5E5E5"> so now let's actually write a</font>

853
00:28:51,670 --> 00:28:55,270
program to<font color="#E5E5E5"> perform the actions described</font>

854
00:28:53,770 --> 00:28:57,730
in a table<font color="#CCCCCC"> I'm going to write this in</font>

855
00:28:55,270 --> 00:28:59,470
x86<font color="#CCCCCC"> so try</font><font color="#E5E5E5"> to bear with</font><font color="#CCCCCC"> me it doesn't</font>

856
00:28:57,730 --> 00:29:01,900
it's<font color="#E5E5E5"> not a whole lot of instructions but</font>

857
00:28:59,470 --> 00:29:03,300
<font color="#E5E5E5">it does get a little</font><font color="#CCCCCC"> complex</font><font color="#E5E5E5"> but we're</font>

858
00:29:01,900 --> 00:29:05,559
<font color="#E5E5E5">going to start out with our table</font>

859
00:29:03,300 --> 00:29:06,399
<font color="#E5E5E5">sitting in memory and the very first</font>

860
00:29:05,559 --> 00:29:07,990
<font color="#E5E5E5">thing I'm going to do is I'm going</font><font color="#CCCCCC"> to</font>

861
00:29:06,400 --> 00:29:09,940
load a pointer<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> table into</font><font color="#CCCCCC"> the</font>

862
00:29:07,990 --> 00:29:11,830
ESI register so throughout the rest of

863
00:29:09,940 --> 00:29:14,220
<font color="#E5E5E5">this ESI</font><font color="#CCCCCC"> is going to point</font><font color="#E5E5E5"> to the</font>

864
00:29:11,830 --> 00:29:16,659
<font color="#E5E5E5">current entry inside of that table</font><font color="#CCCCCC"> so</font>

865
00:29:14,220 --> 00:29:18,730
<font color="#CCCCCC">with</font><font color="#E5E5E5"> this I need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start implementing</font>

866
00:29:16,660 --> 00:29:20,080
my big move logic the first thing I

867
00:29:18,730 --> 00:29:21,670
should<font color="#E5E5E5"> do with my big move instruction</font>

868
00:29:20,080 --> 00:29:23,590
is I should perform<font color="#E5E5E5"> that memory read</font>

869
00:29:21,670 --> 00:29:26,290
from the<font color="#CCCCCC"> right-hand</font><font color="#E5E5E5"> side of the</font>

870
00:29:23,590 --> 00:29:27,909
instruction<font color="#E5E5E5"> so the way we do that is we</font>

871
00:29:26,290 --> 00:29:30,190
go<font color="#CCCCCC"> to</font><font color="#E5E5E5"> our current entry in the table</font>

872
00:29:27,910 --> 00:29:31,660
<font color="#E5E5E5">fetch the first element out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the table</font>

873
00:29:30,190 --> 00:29:33,220
<font color="#E5E5E5">remember this is a pointer to a pseudo</font>

874
00:29:31,660 --> 00:29:35,260
register so<font color="#E5E5E5"> we load that pointer into</font>

875
00:29:33,220 --> 00:29:38,110
the ebh register and then we dereference

876
00:29:35,260 --> 00:29:39,820
<font color="#CCCCCC">edx to grab that pseudo register out of</font>

877
00:29:38,110 --> 00:29:42,428
<font color="#E5E5E5">memory so now</font><font color="#CCCCCC"> EDX holds the value of</font>

878
00:29:39,820 --> 00:29:45,250
<font color="#CCCCCC">that pseudo register</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> thing we do is</font>

879
00:29:42,429 --> 00:29:47,740
we go<font color="#CCCCCC"> to the next element in the table</font>

880
00:29:45,250 --> 00:29:51,640
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is our constant offset</font><font color="#E5E5E5"> and we add</font>

881
00:29:47,740 --> 00:29:53,230
<font color="#E5E5E5">that into our pseudo register then we</font>

882
00:29:51,640 --> 00:29:55,210
dereference<font color="#E5E5E5"> the whole thing doing one</font>

883
00:29:53,230 --> 00:29:56,620
more memory raid so now<font color="#CCCCCC"> EBX holds the</font>

884
00:29:55,210 --> 00:29:59,590
<font color="#E5E5E5">final value that we read out</font><font color="#CCCCCC"> of memory</font>

885
00:29:56,620 --> 00:30:01,870
<font color="#E5E5E5">and so so we</font><font color="#CCCCCC"> just implemented</font><font color="#E5E5E5"> the read</font>

886
00:29:59,590 --> 00:30:03,189
portion of the big move instruction now

887
00:30:01,870 --> 00:30:04,959
we need to implement<font color="#E5E5E5"> the right portion</font>

888
00:30:03,190 --> 00:30:07,030
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the big move instruction so we're</font>

889
00:30:04,960 --> 00:30:09,130
<font color="#E5E5E5">going to go to the</font><font color="#CCCCCC"> the third element in</font>

890
00:30:07,030 --> 00:30:10,360
the table<font color="#CCCCCC"> fetch that</font><font color="#E5E5E5"> into the edx</font>

891
00:30:09,130 --> 00:30:12,970
register again<font color="#CCCCCC"> remember this</font><font color="#E5E5E5"> this</font>

892
00:30:10,360 --> 00:30:14,229
pointer to a<font color="#E5E5E5"> pseudo register at this</font>

893
00:30:12,970 --> 00:30:15,790
point so we're going to<font color="#E5E5E5"> dereference that</font>

894
00:30:14,230 --> 00:30:17,410
pointer to grab the second pseudo

895
00:30:15,790 --> 00:30:18,970
register then we move<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the fourth</font>

896
00:30:17,410 --> 00:30:21,940
<font color="#CCCCCC">element in the table that's</font><font color="#E5E5E5"> our constant</font>

897
00:30:18,970 --> 00:30:23,670
offset<font color="#CCCCCC"> we add</font><font color="#E5E5E5"> that in to our</font><font color="#CCCCCC"> evx</font>

898
00:30:21,940 --> 00:30:27,130
accumulator here and then we dereference

899
00:30:23,670 --> 00:30:29,590
<font color="#E5E5E5">edx</font><font color="#CCCCCC"> EBX held what we read from memory</font>

900
00:30:27,130 --> 00:30:32,620
<font color="#E5E5E5">edx holds the location we want to write</font>

901
00:30:29,590 --> 00:30:35,860
to memory<font color="#CCCCCC"> so we copy EDX into memory at</font>

902
00:30:32,620 --> 00:30:37,750
EDX<font color="#E5E5E5"> so that's all there is to doing this</font>

903
00:30:35,860 --> 00:30:42,100
this big move instruction<font color="#E5E5E5"> it's just this</font>

904
00:30:37,750 --> 00:30:43,600
handful of simple x86 instructions so at

905
00:30:42,100 --> 00:30:45,189
<font color="#E5E5E5">this point all we need to do is execute</font>

906
00:30:43,600 --> 00:30:47,080
<font color="#E5E5E5">the</font><font color="#CCCCCC"> next big move instruction and then</font>

907
00:30:45,190 --> 00:30:50,380
the next<font color="#E5E5E5"> big move instruction so the way</font>

908
00:30:47,080 --> 00:30:52,030
I constructed my table each each entry

909
00:30:50,380 --> 00:30:53,800
in<font color="#E5E5E5"> the table has four</font><font color="#CCCCCC"> elements</font><font color="#E5E5E5"> and then</font>

910
00:30:52,030 --> 00:30:57,310
each<font color="#E5E5E5"> one is followed by a pointer</font><font color="#CCCCCC"> to the</font>

911
00:30:53,800 --> 00:30:58,510
<font color="#E5E5E5">next entry in the table</font><font color="#CCCCCC"> so to</font><font color="#E5E5E5"> move to</font>

912
00:30:57,310 --> 00:31:00,159
the next<font color="#E5E5E5"> entry in the table with</font>

913
00:30:58,510 --> 00:31:03,280
assembly we go

914
00:31:00,160 --> 00:31:05,350
<font color="#CCCCCC">to</font><font color="#E5E5E5"> that pointer and we reload the ESI</font>

915
00:31:03,280 --> 00:31:07,660
register so now ESI points to the next

916
00:31:05,350 --> 00:31:09,790
entry<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> table and we jump back</font><font color="#CCCCCC"> to</font>

917
00:31:07,660 --> 00:31:12,670
<font color="#CCCCCC">the beginning of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> Move emulator</font><font color="#E5E5E5"> to</font>

918
00:31:09,790 --> 00:31:15,250
run the whole<font color="#CCCCCC"> thing over</font><font color="#E5E5E5"> again so that</font>

919
00:31:12,670 --> 00:31:17,650
whole process<font color="#E5E5E5"> forms what I'm calling the</font>

920
00:31:15,250 --> 00:31:20,080
reductio tool chain<font color="#CCCCCC"> what it essentially</font>

921
00:31:17,650 --> 00:31:22,990
does now is<font color="#E5E5E5"> it lets you</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> C</font>

922
00:31:20,080 --> 00:31:24,909
program and compile<font color="#CCCCCC"> it into exactly</font><font color="#E5E5E5"> the</font>

923
00:31:22,990 --> 00:31:27,700
<font color="#E5E5E5">instructions on the right hand side of</font>

924
00:31:24,910 --> 00:31:29,980
this so sort of revisiting<font color="#E5E5E5"> our original</font>

925
00:31:27,700 --> 00:31:33,280
<font color="#CCCCCC">thought experiment here</font><font color="#E5E5E5"> asked how far</font>

926
00:31:29,980 --> 00:31:35,170
could we<font color="#E5E5E5"> possibly reduce a program well</font>

927
00:31:33,280 --> 00:31:37,690
it turns out<font color="#E5E5E5"> that every single</font><font color="#CCCCCC"> program</font>

928
00:31:35,170 --> 00:31:39,580
<font color="#E5E5E5">ever written can</font><font color="#CCCCCC"> be reduced</font><font color="#E5E5E5"> to exactly</font>

929
00:31:37,690 --> 00:31:41,200
the instructions that<font color="#E5E5E5"> we see on the</font>

930
00:31:39,580 --> 00:31:43,240
right here just this handful of about

931
00:31:41,200 --> 00:31:45,100
<font color="#E5E5E5">ten instructions our other thought</font>

932
00:31:43,240 --> 00:31:47,260
experiment was like can one sequence of

933
00:31:45,100 --> 00:31:50,350
instructions produce entirely different

934
00:31:47,260 --> 00:31:52,450
results<font color="#E5E5E5"> an answer is obviously yes</font><font color="#CCCCCC"> this</font>

935
00:31:50,350 --> 00:31:54,340
instruction stream<font color="#E5E5E5"> simultaneously</font>

936
00:31:52,450 --> 00:31:57,400
implements<font color="#E5E5E5"> every program that ever has</font>

937
00:31:54,340 --> 00:31:59,490
been or<font color="#CCCCCC"> ever will be implemented so I</font>

938
00:31:57,400 --> 00:32:02,290
wanted<font color="#E5E5E5"> to give an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of sort of the</font>

939
00:31:59,490 --> 00:32:04,540
<font color="#E5E5E5">repercussions of this so I compiled an</font>

940
00:32:02,290 --> 00:32:07,210
<font color="#CCCCCC">open-source AES program with the</font>

941
00:32:04,540 --> 00:32:09,520
reductio tool chain<font color="#E5E5E5"> and these are the</font>

942
00:32:07,210 --> 00:32:13,090
<font color="#E5E5E5">instructions I got so if I come over</font>

943
00:32:09,520 --> 00:32:15,879
<font color="#E5E5E5">here and I look</font><font color="#CCCCCC"> at the instructions</font>

944
00:32:13,090 --> 00:32:18,699
inside of my AES program you'll see

945
00:32:15,880 --> 00:32:21,430
<font color="#CCCCCC">these are my my AES instructions here</font>

946
00:32:18,700 --> 00:32:23,950
this very<font color="#E5E5E5"> very simple set of</font>

947
00:32:21,430 --> 00:32:25,210
instructions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when we run a yes it's</font>

948
00:32:23,950 --> 00:32:27,520
<font color="#E5E5E5">not the fastest</font><font color="#CCCCCC"> thing in</font><font color="#E5E5E5"> the world</font><font color="#CCCCCC"> you</font>

949
00:32:25,210 --> 00:32:29,590
<font color="#CCCCCC">got to think the mob skater bloats code</font>

950
00:32:27,520 --> 00:32:31,389
by a factor of about 100 to a thousand

951
00:32:29,590 --> 00:32:34,179
and<font color="#E5E5E5"> then reductio bloats it again by</font>

952
00:32:31,390 --> 00:32:36,220
another<font color="#CCCCCC"> 10x or</font><font color="#E5E5E5"> so so it's very very slow</font>

953
00:32:34,180 --> 00:32:39,520
but it's actually doing<font color="#E5E5E5"> AES encryption</font>

954
00:32:36,220 --> 00:32:43,330
now using<font color="#E5E5E5"> that very very simple</font><font color="#CCCCCC"> fully</font>

955
00:32:39,520 --> 00:32:44,440
reduced instruction<font color="#E5E5E5"> stream so that's a</font>

956
00:32:43,330 --> 00:32:45,909
yes

957
00:32:44,440 --> 00:32:47,410
then I took an<font color="#E5E5E5"> open source</font><font color="#CCCCCC"> version</font><font color="#E5E5E5"> of</font>

958
00:32:45,910 --> 00:32:49,630
minesweeper and<font color="#CCCCCC"> I compiled it with the</font>

959
00:32:47,410 --> 00:32:51,600
reductio tool chain and<font color="#CCCCCC"> this is what we</font>

960
00:32:49,630 --> 00:32:54,700
got you'll notice it's the exact same

961
00:32:51,600 --> 00:32:58,030
instruction<font color="#CCCCCC"> stream</font><font color="#E5E5E5"> so here's the AES</font>

962
00:32:54,700 --> 00:32:59,350
instruction stream here's the

963
00:32:58,030 --> 00:33:01,570
minesweeper instruction stream<font color="#CCCCCC"> they're</font>

964
00:32:59,350 --> 00:33:05,949
verbatim identical<font color="#E5E5E5"> but now when I run</font>

965
00:33:01,570 --> 00:33:08,320
mines even<font color="#CCCCCC"> though it's executing with</font>

966
00:33:05,950 --> 00:33:11,800
<font color="#E5E5E5">the exact same code the exact same</font>

967
00:33:08,320 --> 00:33:12,639
instructions<font color="#E5E5E5"> as AES was we're now</font><font color="#CCCCCC"> doing</font>

968
00:33:11,800 --> 00:33:14,799
something<font color="#E5E5E5"> entirely</font>

969
00:33:12,640 --> 00:33:18,220
<font color="#E5E5E5">we're playing minesweeper with the</font><font color="#CCCCCC"> AES</font>

970
00:33:14,799 --> 00:33:20,080
code<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> thought that was I was really</font>

971
00:33:18,220 --> 00:33:22,559
pretty amazing<font color="#CCCCCC"> the exact same program</font>

972
00:33:20,080 --> 00:33:24,939
<font color="#E5E5E5">doing two entirely different things</font>

973
00:33:22,559 --> 00:33:27,639
<font color="#E5E5E5">simultaneously</font><font color="#CCCCCC"> so I I wish I could show</font>

974
00:33:24,940 --> 00:33:29,380
<font color="#E5E5E5">you guys actually compiling things with</font>

975
00:33:27,640 --> 00:33:31,480
the reductio tool chain but it takes

976
00:33:29,380 --> 00:33:33,940
like 30 gigs of memory in about eight

977
00:33:31,480 --> 00:33:35,620
<font color="#E5E5E5">hours to compile that</font><font color="#CCCCCC"> a yes program so</font>

978
00:33:33,940 --> 00:33:37,330
it's not really<font color="#E5E5E5"> the</font><font color="#CCCCCC"> best demo but you're</font>

979
00:33:35,620 --> 00:33:39,669
welcome<font color="#CCCCCC"> to try this on</font><font color="#E5E5E5"> your own</font>

980
00:33:37,330 --> 00:33:41,830
later on so one distinction<font color="#CCCCCC"> I want to</font>

981
00:33:39,670 --> 00:33:43,929
make<font color="#CCCCCC"> really quick</font><font color="#E5E5E5"> you might be thinking</font>

982
00:33:41,830 --> 00:33:45,790
well<font color="#E5E5E5"> doesn't an emulator or</font><font color="#CCCCCC"> an</font>

983
00:33:43,929 --> 00:33:47,860
interpreter<font color="#CCCCCC"> is not essentially one</font>

984
00:33:45,790 --> 00:33:49,720
program<font color="#CCCCCC"> that can</font><font color="#E5E5E5"> execute many different</font>

985
00:33:47,860 --> 00:33:51,340
programs<font color="#E5E5E5"> I mean it is but there's a</font>

986
00:33:49,720 --> 00:33:53,590
really important distinction<font color="#E5E5E5"> here in</font>

987
00:33:51,340 --> 00:33:55,689
that in emulator or<font color="#CCCCCC"> an interpreter</font><font color="#E5E5E5"> what</font>

988
00:33:53,590 --> 00:33:57,370
they do is they read one instruction

989
00:33:55,690 --> 00:33:58,960
from the program they're interpreting or

990
00:33:57,370 --> 00:34:01,120
emulating and then they decide what<font color="#E5E5E5"> to</font>

991
00:33:58,960 --> 00:34:03,010
do<font color="#E5E5E5"> based on that instruction so for</font>

992
00:34:01,120 --> 00:34:04,479
example they'll do one thing if they

993
00:34:03,010 --> 00:34:06,640
read an add instruction and something

994
00:34:04,480 --> 00:34:08,830
entirely different<font color="#CCCCCC"> if they read a sub</font>

995
00:34:06,640 --> 00:34:10,570
instruction<font color="#E5E5E5"> so they take different paths</font>

996
00:34:08,830 --> 00:34:12,819
depending<font color="#E5E5E5"> on the program that they're</font>

997
00:34:10,570 --> 00:34:14,740
emulating<font color="#E5E5E5"> with the with with this</font>

998
00:34:12,820 --> 00:34:16,270
reduced code on the<font color="#E5E5E5"> other hand you can</font>

999
00:34:14,739 --> 00:34:17,649
actually<font color="#E5E5E5"> attach an in circuit emulator</font>

1000
00:34:16,270 --> 00:34:19,090
up to the processor<font color="#CCCCCC"> and you would see</font>

1001
00:34:17,649 --> 00:34:21,279
<font color="#E5E5E5">that the processor is executing the</font>

1002
00:34:19,090 --> 00:34:23,740
<font color="#CCCCCC">exact same instructions</font><font color="#E5E5E5"> over and over</font>

1003
00:34:21,280 --> 00:34:25,869
<font color="#CCCCCC">regardless of what program it's actually</font>

1004
00:34:23,739 --> 00:34:29,199
<font color="#CCCCCC">running so so what are the implications</font>

1005
00:34:25,869 --> 00:34:32,619
<font color="#E5E5E5">of this</font><font color="#CCCCCC"> so one of the</font><font color="#E5E5E5"> interesting ones</font>

1006
00:34:29,199 --> 00:34:34,480
<font color="#E5E5E5">is if every program is the same</font><font color="#CCCCCC"> malware</font>

1007
00:34:32,619 --> 00:34:37,000
detection gets a little<font color="#CCCCCC"> bit harder</font>

1008
00:34:34,480 --> 00:34:39,340
because<font color="#E5E5E5"> we can have completely malicious</font>

1009
00:34:37,000 --> 00:34:41,980
code in completely benign code that are

1010
00:34:39,340 --> 00:34:46,149
actually the exact same code so<font color="#E5E5E5"> as a</font>

1011
00:34:41,980 --> 00:34:49,418
demonstration of<font color="#CCCCCC"> that I compiled the</font>

1012
00:34:46,149 --> 00:34:51,159
<font color="#CCCCCC">Mirai botnet using using reductio and</font>

1013
00:34:49,418 --> 00:34:53,500
you'll notice<font color="#E5E5E5"> the Mirai botnets source</font>

1014
00:34:51,159 --> 00:34:55,600
code or instructions are now<font color="#E5E5E5"> exactly the</font>

1015
00:34:53,500 --> 00:34:58,000
same as minesweeper<font color="#CCCCCC"> or a yes something</font>

1016
00:34:55,600 --> 00:35:00,130
totally<font color="#E5E5E5"> benign so sort</font><font color="#CCCCCC"> of at</font><font color="#E5E5E5"> least</font><font color="#CCCCCC"> in</font>

1017
00:34:58,000 --> 00:35:03,040
theory<font color="#E5E5E5"> malware detection can</font><font color="#CCCCCC"> be hard</font>

1018
00:35:00,130 --> 00:35:07,210
when malware looks exactly like a real

1019
00:35:03,040 --> 00:35:09,009
<font color="#CCCCCC">legitimate program</font><font color="#E5E5E5"> but but in practice</font>

1020
00:35:07,210 --> 00:35:10,630
realistically we would just<font color="#E5E5E5"> use the same</font>

1021
00:35:09,010 --> 00:35:13,030
<font color="#CCCCCC">approach as we do right now you would</font>

1022
00:35:10,630 --> 00:35:14,830
signature on that<font color="#E5E5E5"> data</font><font color="#CCCCCC"> we still have to</font>

1023
00:35:13,030 --> 00:35:16,390
be able<font color="#E5E5E5"> to make API calls heat monitor</font>

1024
00:35:14,830 --> 00:35:19,390
those API<font color="#CCCCCC"> calls so it's more</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a</font>

1025
00:35:16,390 --> 00:35:21,549
<font color="#CCCCCC">theoretical implication one of the much</font>

1026
00:35:19,390 --> 00:35:23,400
more<font color="#CCCCCC"> practical implications though and</font>

1027
00:35:21,550 --> 00:35:25,720
<font color="#E5E5E5">this one I totally didn't expect was a</font>

1028
00:35:23,400 --> 00:35:26,290
exploitation so when I released this

1029
00:35:25,720 --> 00:35:29,640
source code

1030
00:35:26,290 --> 00:35:32,440
a group led<font color="#CCCCCC"> by Mark Barnes at</font><font color="#E5E5E5"> MWR</font><font color="#CCCCCC"> Labs</font>

1031
00:35:29,640 --> 00:35:33,819
<font color="#E5E5E5">developed something called a</font><font color="#CCCCCC"> veer opt so</font>

1032
00:35:32,440 --> 00:35:35,170
you can find out on<font color="#E5E5E5"> github</font><font color="#CCCCCC"> but basically</font>

1033
00:35:33,820 --> 00:35:37,810
what they were<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is attack an</font>

1034
00:35:35,170 --> 00:35:40,420
AVR microcontroller so AVR<font color="#CCCCCC"> is the</font>

1035
00:35:37,810 --> 00:35:41,799
architecture behind<font color="#CCCCCC"> raspberry PI's so if</font>

1036
00:35:40,420 --> 00:35:44,080
your controllers are interesting<font color="#E5E5E5"> they're</font>

1037
00:35:41,800 --> 00:35:45,730
Harvard architectures what that means is

1038
00:35:44,080 --> 00:35:48,400
<font color="#CCCCCC">that they have a separate program</font><font color="#E5E5E5"> in</font>

1039
00:35:45,730 --> 00:35:50,320
data section and the implication of that

1040
00:35:48,400 --> 00:35:53,260
is<font color="#E5E5E5"> that traditional buffer overflows</font>

1041
00:35:50,320 --> 00:35:56,320
don't work on AVR<font color="#E5E5E5"> since you can</font><font color="#CCCCCC"> overflow</font>

1042
00:35:53,260 --> 00:35:58,810
the data but you<font color="#E5E5E5"> can't hit on the</font>

1043
00:35:56,320 --> 00:36:01,660
instructions<font color="#CCCCCC"> but</font><font color="#E5E5E5"> what that does though</font>

1044
00:35:58,810 --> 00:36:03,940
is it<font color="#E5E5E5"> limits you to</font><font color="#CCCCCC"> two Rob is</font><font color="#E5E5E5"> pretty</font>

1045
00:36:01,660 --> 00:36:05,410
much the only exploitation mechanism

1046
00:36:03,940 --> 00:36:07,600
you're going to have<font color="#CCCCCC"> available on AVR</font>

1047
00:36:05,410 --> 00:36:09,670
but a<font color="#E5E5E5"> challenge here is that</font><font color="#CCCCCC"> ABR</font><font color="#E5E5E5"> has a</font>

1048
00:36:07,600 --> 00:36:10,810
very<font color="#E5E5E5"> very small memory space which means</font>

1049
00:36:09,670 --> 00:36:13,240
that you<font color="#E5E5E5"> have very very few gadgets</font>

1050
00:36:10,810 --> 00:36:14,700
<font color="#CCCCCC">available for actually performing return</font>

1051
00:36:13,240 --> 00:36:16,419
<font color="#CCCCCC">oriented program</font>

1052
00:36:14,700 --> 00:36:17,980
fortunately what we know from the<font color="#CCCCCC"> moths</font>

1053
00:36:16,420 --> 00:36:20,440
<font color="#CCCCCC">cater and reductio is you don't need any</font>

1054
00:36:17,980 --> 00:36:24,010
complex gadgets move can do everything

1055
00:36:20,440 --> 00:36:25,900
<font color="#E5E5E5">you everything you need now for for</font>

1056
00:36:24,010 --> 00:36:28,540
their purposes<font color="#E5E5E5"> the move instruction</font>

1057
00:36:25,900 --> 00:36:30,310
wasn't quite what<font color="#E5E5E5"> they were looking</font><font color="#CCCCCC"> for</font>

1058
00:36:28,540 --> 00:36:32,890
<font color="#E5E5E5">because move in x86 is very very</font>

1059
00:36:30,310 --> 00:36:36,730
<font color="#CCCCCC">complicated and translates to many many</font>

1060
00:36:32,890 --> 00:36:38,950
<font color="#E5E5E5">different instructions in AVR</font><font color="#CCCCCC"> but what</font>

1061
00:36:36,730 --> 00:36:41,560
they did is<font color="#CCCCCC"> they took this reductio</font>

1062
00:36:38,950 --> 00:36:43,509
output and adapted it for the AVR

1063
00:36:41,560 --> 00:36:46,360
microcontroller<font color="#CCCCCC"> what they were then able</font>

1064
00:36:43,510 --> 00:36:48,790
<font color="#E5E5E5">to do is find just three or four very</font>

1065
00:36:46,360 --> 00:36:50,620
very simple gadgets<font color="#CCCCCC"> inside of AVR like</font>

1066
00:36:48,790 --> 00:36:53,410
they<font color="#E5E5E5"> found a load gadget and add gadget</font>

1067
00:36:50,620 --> 00:36:55,390
<font color="#CCCCCC">and add</font><font color="#E5E5E5"> C gadget and that's in a store</font>

1068
00:36:53,410 --> 00:36:55,750
<font color="#CCCCCC">gadget and</font><font color="#E5E5E5"> that's basically all they</font>

1069
00:36:55,390 --> 00:36:57,819
needed

1070
00:36:55,750 --> 00:36:59,440
so with<font color="#E5E5E5"> those four gadgets then they're</font>

1071
00:36:57,820 --> 00:37:00,630
able to<font color="#CCCCCC"> actually exploit an architecture</font>

1072
00:36:59,440 --> 00:37:03,670
<font color="#CCCCCC">that would</font><font color="#E5E5E5"> have been extremely difficult</font>

1073
00:37:00,630 --> 00:37:05,620
to exploit in any other<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so as</font><font color="#E5E5E5"> sort</font>

1074
00:37:03,670 --> 00:37:08,980
of fascinating how reducing<font color="#CCCCCC"> programs to</font>

1075
00:37:05,620 --> 00:37:12,880
<font color="#E5E5E5">their smallest</font><font color="#CCCCCC"> possible state simplify</font>

1076
00:37:08,980 --> 00:37:14,560
some classes of<font color="#E5E5E5"> exploitation - and the</font>

1077
00:37:12,880 --> 00:37:15,820
final<font color="#CCCCCC"> implication I want to discuss and</font>

1078
00:37:14,560 --> 00:37:17,380
I think this is the most important one

1079
00:37:15,820 --> 00:37:20,200
is I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> think it's really cool</font><font color="#E5E5E5"> because</font>

1080
00:37:17,380 --> 00:37:25,030
it<font color="#E5E5E5"> it sort of contradicts every single</font>

1081
00:37:20,200 --> 00:37:28,120
thing that we expect from from programs

1082
00:37:25,030 --> 00:37:30,370
<font color="#E5E5E5">like we've all</font><font color="#CCCCCC"> been brought up to</font><font color="#E5E5E5"> think</font>

1083
00:37:28,120 --> 00:37:32,650
when I when I'm writing<font color="#E5E5E5"> a program I</font>

1084
00:37:30,370 --> 00:37:34,630
write code<font color="#CCCCCC"> that tells</font><font color="#E5E5E5"> the processor what</font>

1085
00:37:32,650 --> 00:37:36,550
to do and I write different code<font color="#E5E5E5"> so the</font>

1086
00:37:34,630 --> 00:37:37,780
processor<font color="#E5E5E5"> can do different things but</font>

1087
00:37:36,550 --> 00:37:39,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> necessarily</font><font color="#E5E5E5"> have to be the</font>

1088
00:37:37,780 --> 00:37:41,730
case as<font color="#E5E5E5"> we saw here they</font>

1089
00:37:39,510 --> 00:37:43,250
same code can actually do pretty much

1090
00:37:41,730 --> 00:37:46,350
anything so it's sort of a<font color="#E5E5E5"> philosophical</font>

1091
00:37:43,250 --> 00:37:48,540
<font color="#E5E5E5">conclusion here then</font><font color="#CCCCCC"> if the code that we</font>

1092
00:37:46,350 --> 00:37:50,759
write makes no<font color="#E5E5E5"> difference</font><font color="#CCCCCC"> what does it</font>

1093
00:37:48,540 --> 00:37:52,920
<font color="#E5E5E5">even mean to program something</font><font color="#CCCCCC"> and sort</font>

1094
00:37:50,760 --> 00:37:54,690
<font color="#CCCCCC">of</font><font color="#E5E5E5"> to take that - it's a fullest extent</font>

1095
00:37:52,920 --> 00:37:56,070
<font color="#CCCCCC">I want to sort of highlight that</font><font color="#E5E5E5"> even</font>

1096
00:37:54,690 --> 00:37:57,840
though we wrote all<font color="#CCCCCC"> of this in assembly</font>

1097
00:37:56,070 --> 00:37:59,280
<font color="#E5E5E5">we're not really constrained to assembly</font>

1098
00:37:57,840 --> 00:38:01,980
here we could<font color="#E5E5E5"> write</font><font color="#CCCCCC"> this in</font><font color="#E5E5E5"> any language</font>

1099
00:37:59,280 --> 00:38:04,710
so<font color="#E5E5E5"> I actually adapted that assembly code</font>

1100
00:38:01,980 --> 00:38:06,810
and rewrote it as<font color="#E5E5E5"> as a seed program so</font>

1101
00:38:04,710 --> 00:38:09,990
what we have<font color="#E5E5E5"> here is a</font><font color="#CCCCCC"> C program that</font>

1102
00:38:06,810 --> 00:38:11,160
implements<font color="#E5E5E5"> every possible C program and</font>

1103
00:38:09,990 --> 00:38:12,390
I<font color="#E5E5E5"> think the implications of that are</font>

1104
00:38:11,160 --> 00:38:14,310
<font color="#E5E5E5">kind of cool because like</font><font color="#CCCCCC"> the next</font><font color="#E5E5E5"> time</font>

1105
00:38:12,390 --> 00:38:16,290
your boss asks hey have you finished

1106
00:38:14,310 --> 00:38:18,270
<font color="#E5E5E5">coding that web back in that I asked you</font>

1107
00:38:16,290 --> 00:38:21,029
<font color="#E5E5E5">for you can be like yep</font>

1108
00:38:18,270 --> 00:38:22,759
it's right here<font color="#E5E5E5"> the codes all done</font><font color="#CCCCCC"> I</font>

1109
00:38:21,030 --> 00:38:25,590
just<font color="#CCCCCC"> got to figure out this data</font><font color="#E5E5E5"> table</font>

1110
00:38:22,760 --> 00:38:27,180
<font color="#E5E5E5">so I think that's that's cool you're</font>

1111
00:38:25,590 --> 00:38:29,700
you're pretty<font color="#CCCCCC"> much done with</font><font color="#E5E5E5"> all your</font>

1112
00:38:27,180 --> 00:38:32,430
<font color="#CCCCCC">coding at this point and it just</font><font color="#E5E5E5"> becomes</font>

1113
00:38:29,700 --> 00:38:35,100
figuring out data so that's that's

1114
00:38:32,430 --> 00:38:37,080
<font color="#E5E5E5">pretty much all I've got</font><font color="#CCCCCC"> you can find</font>

1115
00:38:35,100 --> 00:38:40,799
all<font color="#E5E5E5"> this stuff on my github that's</font>

1116
00:38:37,080 --> 00:38:42,810
<font color="#E5E5E5">github calm</font><font color="#CCCCCC"> X or ax e</font><font color="#E5E5E5"> ax e ax I really</font>

1117
00:38:40,800 --> 00:38:44,100
wish I had<font color="#E5E5E5"> chosen a easier to say user</font>

1118
00:38:42,810 --> 00:38:46,890
handle but that's what I've got

1119
00:38:44,100 --> 00:38:48,180
so that's<font color="#E5E5E5"> a reductio tool chain</font><font color="#CCCCCC"> I also</font>

1120
00:38:46,890 --> 00:38:51,180
<font color="#CCCCCC">showed them off</font><font color="#E5E5E5"> skaters the single</font>

1121
00:38:48,180 --> 00:38:52,470
instruction<font color="#CCCCCC"> C compiler a year so back I</font>

1122
00:38:51,180 --> 00:38:54,330
showed<font color="#E5E5E5"> how you could manipulate those</font>

1123
00:38:52,470 --> 00:38:56,430
control flow graphs in order to actually

1124
00:38:54,330 --> 00:38:58,170
form images so that's the reset tool

1125
00:38:56,430 --> 00:39:01,230
chain you<font color="#E5E5E5"> can find on there</font><font color="#CCCCCC"> I've also</font>

1126
00:38:58,170 --> 00:39:02,370
got an architectural exploit on x86<font color="#E5E5E5"> and</font>

1127
00:39:01,230 --> 00:39:04,710
you can find that<font color="#E5E5E5"> code</font><font color="#CCCCCC"> and a lot of</font>

1128
00:39:02,370 --> 00:39:06,660
<font color="#CCCCCC">other just totally random</font><font color="#E5E5E5"> fun things</font>

1129
00:39:04,710 --> 00:39:08,850
<font color="#E5E5E5">that I've done in my free time</font><font color="#CCCCCC"> if</font>

1130
00:39:06,660 --> 00:39:11,279
anybody<font color="#CCCCCC"> has feedback</font><font color="#E5E5E5"> or ideas on this I</font>

1131
00:39:08,850 --> 00:39:13,200
<font color="#E5E5E5">would absolutely love to hear usually</font>

1132
00:39:11,280 --> 00:39:15,090
what happens<font color="#CCCCCC"> is</font><font color="#E5E5E5"> I develop something</font>

1133
00:39:13,200 --> 00:39:17,189
<font color="#E5E5E5">simple and you're stupid like this</font>

1134
00:39:15,090 --> 00:39:18,810
<font color="#CCCCCC">really</font><font color="#E5E5E5"> that I just did for for fun and I</font>

1135
00:39:17,190 --> 00:39:20,040
thought it'd be<font color="#E5E5E5"> interesting but then</font>

1136
00:39:18,810 --> 00:39:21,720
when I show it<font color="#CCCCCC"> to other people people</font>

1137
00:39:20,040 --> 00:39:23,580
seem<font color="#CCCCCC"> to find some really</font><font color="#E5E5E5"> interesting</font>

1138
00:39:21,720 --> 00:39:27,359
applications for it like the<font color="#E5E5E5"> the</font>

1139
00:39:23,580 --> 00:39:28,470
exploitation application here<font color="#E5E5E5"> if you if</font>

1140
00:39:27,360 --> 00:39:30,870
you want<font color="#E5E5E5"> to talk to me at the conference</font>

1141
00:39:28,470 --> 00:39:33,149
I'd be<font color="#E5E5E5"> awesome otherwise you can reach</font>

1142
00:39:30,870 --> 00:39:35,910
out<font color="#CCCCCC"> to</font><font color="#E5E5E5"> me on</font><font color="#CCCCCC"> Twitter same same handle or</font>

1143
00:39:33,150 --> 00:39:37,980
shoot me<font color="#E5E5E5"> an email as well I'd love to</font>

1144
00:39:35,910 --> 00:39:39,690
<font color="#CCCCCC">hear</font><font color="#E5E5E5"> from you and what</font><font color="#CCCCCC"> you think</font><font color="#E5E5E5"> so</font>

1145
00:39:37,980 --> 00:39:44,000
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> all I got thanks everyone for</font>

1146
00:39:39,690 --> 00:39:44,000
<font color="#CCCCCC">hanging out here are there any questions</font>

1147
00:39:45,319 --> 00:39:50,190
<font color="#E5E5E5">all right that's awesome</font><font color="#CCCCCC"> because I get</font>

1148
00:39:47,789 --> 00:39:51,600
nervous<font color="#E5E5E5"> answering questions so thanks</font>

1149
00:39:50,190 --> 00:39:54,830
everyone

1150
00:39:51,600 --> 00:39:57,118
[Music]

1151
00:39:54,830 --> 00:39:57,119
[Applause]

