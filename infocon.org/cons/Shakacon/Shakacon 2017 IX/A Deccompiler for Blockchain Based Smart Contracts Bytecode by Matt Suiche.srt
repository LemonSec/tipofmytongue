1
00:00:00,380 --> 00:00:06,689
thanks for the warm introduction<font color="#CCCCCC"> so</font>

2
00:00:04,920 --> 00:00:09,030
we're going to<font color="#E5E5E5"> be talking about smart</font>

3
00:00:06,690 --> 00:00:10,380
<font color="#E5E5E5">contracts</font><font color="#CCCCCC"> while initially I was not</font>

4
00:00:09,030 --> 00:00:12,239
<font color="#E5E5E5">really big on blockchain</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> everything</font>

5
00:00:10,380 --> 00:00:13,559
I<font color="#CCCCCC"> didn't really care</font><font color="#E5E5E5"> but living in Dubai</font>

6
00:00:12,240 --> 00:00:16,259
everybody's talking about<font color="#CCCCCC"> it</font>

7
00:00:13,559 --> 00:00:18,029
all<font color="#CCCCCC"> over so I was like if at</font><font color="#E5E5E5"> least I'm</font>

8
00:00:16,260 --> 00:00:21,420
going<font color="#E5E5E5"> to be criticizing it a mess would</font>

9
00:00:18,029 --> 00:00:25,019
be educated<font color="#CCCCCC"> about it so that so I</font>

10
00:00:21,420 --> 00:00:27,269
started<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look into it</font><font color="#CCCCCC"> to know where</font>

11
00:00:25,019 --> 00:00:29,278
what were the leading blockchain

12
00:00:27,269 --> 00:00:32,759
platform so study to look<font color="#E5E5E5"> at it back in</font>

13
00:00:29,279 --> 00:00:36,899
February<font color="#CCCCCC"> and ended</font><font color="#E5E5E5"> up writing a</font>

14
00:00:32,759 --> 00:00:38,879
decompiler for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Syrian byte</font><font color="#E5E5E5"> card which</font>

15
00:00:36,899 --> 00:00:42,030
was pretty stupid<font color="#E5E5E5"> of me I wish if</font><font color="#CCCCCC"> add</font>

16
00:00:38,879 --> 00:00:44,399
about some some coins instead of writing

17
00:00:42,030 --> 00:00:47,610
a decompiler<font color="#E5E5E5"> at least I would have made</font>

18
00:00:44,399 --> 00:00:50,989
money<font color="#E5E5E5"> out of it but</font><font color="#CCCCCC"> at least I got an</font>

19
00:00:47,610 --> 00:00:55,260
excuse to come back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> check again</font>

20
00:00:50,989 --> 00:00:57,089
so this is my Twitter<font color="#CCCCCC"> ender</font><font color="#E5E5E5"> M</font><font color="#CCCCCC"> switch so</font>

21
00:00:55,260 --> 00:00:59,789
I'm the founder of<font color="#E5E5E5"> a company called</font>

22
00:00:57,090 --> 00:01:03,300
<font color="#E5E5E5">technical met acknowledges we just</font>

23
00:00:59,789 --> 00:01:05,220
started around one year<font color="#CCCCCC"> ago and like</font>

24
00:01:03,300 --> 00:01:08,759
Jason was<font color="#E5E5E5"> saying I'm also running a</font>

25
00:01:05,220 --> 00:01:10,530
conference<font color="#E5E5E5"> called up code in Dubai</font><font color="#CCCCCC"> we're</font>

26
00:01:08,760 --> 00:01:18,150
just like focus on like technical

27
00:01:10,530 --> 00:01:20,729
content and yeah many none for so you

28
00:01:18,150 --> 00:01:24,240
<font color="#E5E5E5">can serve in Asia</font><font color="#CCCCCC"> that was some</font><font color="#E5E5E5"> of the</font>

29
00:01:20,729 --> 00:01:26,400
<font color="#CCCCCC">Lancer</font><font color="#E5E5E5"> for mayor this one thing I've</font>

30
00:01:24,240 --> 00:01:29,100
mainly<font color="#E5E5E5"> known for a car window stuff so I</font>

31
00:01:26,400 --> 00:01:32,280
wrote an application deployment<font color="#E5E5E5"> software</font>

32
00:01:29,100 --> 00:01:37,408
called cloud volumes and wrote a bunch

33
00:01:32,280 --> 00:01:39,720
of memory<font color="#CCCCCC"> forensic utilities and yeah</font>

34
00:01:37,409 --> 00:01:44,630
<font color="#E5E5E5">and my new claim to fame is I've been</font>

35
00:01:39,720 --> 00:01:44,630
called<font color="#CCCCCC"> a fun guy by</font><font color="#E5E5E5"> the shadow brokers</font>

36
00:01:44,780 --> 00:01:50,430
so just so you know even<font color="#CCCCCC"> though it's</font>

37
00:01:48,360 --> 00:01:53,250
blockchain related we won't be talking

38
00:01:50,430 --> 00:01:54,810
<font color="#CCCCCC">about</font><font color="#E5E5E5"> like blow like the most of the</font>

39
00:01:53,250 --> 00:01:57,659
abduction stuff that people<font color="#E5E5E5"> are</font><font color="#CCCCCC"> talking</font>

40
00:01:54,810 --> 00:02:02,369
about<font color="#E5E5E5"> like the miracle</font><font color="#CCCCCC"> trees proof of</font>

41
00:01:57,659 --> 00:02:03,930
work or all<font color="#E5E5E5"> those</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> mainly</font><font color="#CCCCCC"> we're</font>

42
00:02:02,369 --> 00:02:06,210
going to be focusing on the a theory<font color="#CCCCCC"> of</font>

43
00:02:03,930 --> 00:02:08,420
virtual machine we're going to talk

44
00:02:06,210 --> 00:02:13,009
about<font color="#E5E5E5"> the a compiler called solidity and</font>

45
00:02:08,419 --> 00:02:13,009
we're going to<font color="#E5E5E5"> focus on smart contracts</font>

46
00:02:13,250 --> 00:02:22,410
that's the<font color="#E5E5E5"> agenda</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> what happens with a</font>

47
00:02:20,700 --> 00:02:25,018
<font color="#E5E5E5">theory</font><font color="#CCCCCC"> amines</font><font color="#E5E5E5"> it basically introduced</font>

48
00:02:22,410 --> 00:02:28,440
that concept of dynamic application so

49
00:02:25,019 --> 00:02:30,569
if you look at stand or<font color="#E5E5E5"> blockchain stuff</font>

50
00:02:28,440 --> 00:02:33,660
it was just like data being<font color="#CCCCCC"> stored on</font>

51
00:02:30,569 --> 00:02:35,010
blockchain<font color="#CCCCCC"> but since I am so when they</font>

52
00:02:33,660 --> 00:02:38,060
came<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> concept</font><font color="#E5E5E5"> of dynamic</font>

53
00:02:35,010 --> 00:02:40,290
application so like oh we can store

54
00:02:38,060 --> 00:02:41,790
<font color="#CCCCCC">basically like software</font><font color="#E5E5E5"> on top of</font>

55
00:02:40,290 --> 00:02:44,280
blockchain and<font color="#E5E5E5"> that's basically what</font>

56
00:02:41,790 --> 00:02:46,760
they<font color="#E5E5E5"> call</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> smart contract usually that</font>

57
00:02:44,280 --> 00:02:50,040
<font color="#E5E5E5">would</font><font color="#CCCCCC"> be like a</font><font color="#E5E5E5"> very small piece of</font><font color="#CCCCCC"> code</font>

58
00:02:46,760 --> 00:02:53,578
would<font color="#CCCCCC"> be compatible by a compiler</font><font color="#E5E5E5"> called</font>

59
00:02:50,040 --> 00:02:59,609
<font color="#E5E5E5">solidity the</font><font color="#CCCCCC"> sin tax of smart contracts</font>

60
00:02:53,579 --> 00:03:01,739
is very similar to JavaScript<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> I</font>

61
00:02:59,610 --> 00:03:04,650
<font color="#CCCCCC">came up with</font><font color="#E5E5E5"> the idea of</font><font color="#CCCCCC"> doing the</font>

62
00:03:01,739 --> 00:03:06,450
Equality comparator while I was like<font color="#E5E5E5"> one</font>

63
00:03:04,650 --> 00:03:08,549
if the compiler score<font color="#CCCCCC"> solidity I'm just</font>

64
00:03:06,450 --> 00:03:11,040
going to call<font color="#CCCCCC"> it porosity so if you have</font>

65
00:03:08,549 --> 00:03:12,750
done some physics<font color="#E5E5E5"> you would know that</font>

66
00:03:11,040 --> 00:03:17,209
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> basically the</font><font color="#E5E5E5"> opposite of</font>

67
00:03:12,750 --> 00:03:22,170
solidity<font color="#CCCCCC"> just to give like a short</font>

68
00:03:17,209 --> 00:03:23,670
introduction about<font color="#E5E5E5"> like</font><font color="#CCCCCC"> ester a.m. so</font>

69
00:03:22,170 --> 00:03:28,738
basically what I was explaining before

70
00:03:23,670 --> 00:03:34,649
<font color="#E5E5E5">is so with dynamic application you can</font>

71
00:03:28,739 --> 00:03:36,870
you can<font color="#E5E5E5"> have like basically</font><font color="#CCCCCC"> you have so</font>

72
00:03:34,650 --> 00:03:40,470
byte code that you store on block chains

73
00:03:36,870 --> 00:03:42,750
<font color="#E5E5E5">and that is going to be interpreted by</font>

74
00:03:40,470 --> 00:03:46,709
what they call the a<font color="#CCCCCC"> 3 ohm virtual</font>

75
00:03:42,750 --> 00:03:50,489
machine so it's not as advanced as what

76
00:03:46,709 --> 00:03:52,350
most of the other machines<font color="#E5E5E5"> we know even</font>

77
00:03:50,489 --> 00:03:55,910
<font color="#CCCCCC">if you take like some all the Gameboy</font>

78
00:03:52,350 --> 00:03:59,010
<font color="#CCCCCC">emulators</font><font color="#E5E5E5"> it would be like more like</font>

79
00:03:55,910 --> 00:04:02,540
powerful to certain degree except when

80
00:03:59,010 --> 00:04:05,548
it comes<font color="#CCCCCC"> into</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cryptic functions</font><font color="#E5E5E5"> so</font>

81
00:04:02,540 --> 00:04:08,540
what we will<font color="#CCCCCC"> see also</font><font color="#E5E5E5"> is like with that</font>

82
00:04:05,549 --> 00:04:13,200
<font color="#CCCCCC">VM is also like</font><font color="#E5E5E5"> our code via to an</font>

83
00:04:08,540 --> 00:04:15,150
crypto like functions<font color="#E5E5E5"> so each block</font>

84
00:04:13,200 --> 00:04:18,418
<font color="#CCCCCC">chain will basically be like an account</font>

85
00:04:15,150 --> 00:04:22,140
so<font color="#CCCCCC"> block chain</font><font color="#E5E5E5"> accountant</font><font color="#CCCCCC"> contractor</font>

86
00:04:18,418 --> 00:04:25,740
basically like inter changeable words<font color="#CCCCCC"> a</font>

87
00:04:22,140 --> 00:04:27,090
smart code is made of<font color="#E5E5E5"> byte card which is</font>

88
00:04:25,740 --> 00:04:29,370
<font color="#E5E5E5">what we're going to like</font>

89
00:04:27,090 --> 00:04:32,570
look during the look at during this

90
00:04:29,370 --> 00:04:37,650
presentation<font color="#CCCCCC"> and one of the specific</font>

91
00:04:32,570 --> 00:04:41,190
specificity<font color="#E5E5E5"> is that it appears a 256-bit</font>

92
00:04:37,650 --> 00:04:42,870
<font color="#E5E5E5">register they're not exactly like the</font>

93
00:04:41,190 --> 00:04:47,340
register we would know with traditional

94
00:04:42,870 --> 00:04:48,870
architecture like x86<font color="#CCCCCC"> instead it's using</font>

95
00:04:47,340 --> 00:04:52,138
like a virtual stack would keep

96
00:04:48,870 --> 00:04:56,220
<font color="#CCCCCC">purchasing</font><font color="#E5E5E5"> like those registers in the</font>

97
00:04:52,139 --> 00:04:59,030
stack and for each addresses which

98
00:04:56,220 --> 00:05:06,260
correspond to an account or contract

99
00:04:59,030 --> 00:05:09,299
<font color="#CCCCCC">those are encoded on 160 to 168 bits</font><font color="#E5E5E5"> so</font>

100
00:05:06,260 --> 00:05:13,380
just to give<font color="#CCCCCC"> you an idea of what a smart</font>

101
00:05:09,300 --> 00:05:16,020
<font color="#CCCCCC">contract</font><font color="#E5E5E5"> so here on the</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> that's</font>

102
00:05:13,380 --> 00:05:18,260
basically what<font color="#CCCCCC"> Sol EDG Texas and impute</font>

103
00:05:16,020 --> 00:05:21,659
<font color="#E5E5E5">as you can see it's very similar to</font>

104
00:05:18,260 --> 00:05:23,750
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cent tax</font><font color="#E5E5E5"> is very simple</font>

105
00:05:21,660 --> 00:05:27,930
<font color="#E5E5E5">so that's basically a smart contract</font>

106
00:05:23,750 --> 00:05:29,820
<font color="#E5E5E5">designing a coin</font><font color="#CCCCCC"> so as you can see</font><font color="#E5E5E5"> it's</font>

107
00:05:27,930 --> 00:05:32,910
like pretty<font color="#E5E5E5"> straightforward in that</font><font color="#CCCCCC"> case</font>

108
00:05:29,820 --> 00:05:38,669
it's<font color="#E5E5E5"> like 20 line of code</font><font color="#CCCCCC"> in the case of</font>

109
00:05:32,910 --> 00:05:43,260
the deal smart contract<font color="#E5E5E5"> that got robbed</font>

110
00:05:38,669 --> 00:05:45,240
<font color="#E5E5E5">last year it was like larger it was like</font>

111
00:05:43,260 --> 00:05:47,820
maybe<font color="#E5E5E5"> like 200 line of code but they</font>

112
00:05:45,240 --> 00:05:52,440
stay<font color="#E5E5E5"> like relatively small because the</font>

113
00:05:47,820 --> 00:05:55,110
idea since you have like byte cut on the

114
00:05:52,440 --> 00:05:57,570
blockchain<font color="#CCCCCC"> while you want to keep</font><font color="#E5E5E5"> it as</font>

115
00:05:55,110 --> 00:06:00,539
small<font color="#E5E5E5"> as possible right</font><font color="#CCCCCC"> but it also</font>

116
00:05:57,570 --> 00:06:02,219
means<font color="#E5E5E5"> if a contract as a VIN ability you</font>

117
00:06:00,539 --> 00:06:06,630
cannot<font color="#CCCCCC"> really patch it which is one of</font>

118
00:06:02,220 --> 00:06:09,950
<font color="#E5E5E5">the main problem like so far and that's</font>

119
00:06:06,630 --> 00:06:17,070
what result in<font color="#E5E5E5"> in a fork when the</font>

120
00:06:09,950 --> 00:06:19,080
robbery<font color="#E5E5E5"> happened last year</font><font color="#CCCCCC"> so just to go</font>

121
00:06:17,070 --> 00:06:22,860
like<font color="#E5E5E5"> shortly it through the attribute so</font>

122
00:06:19,080 --> 00:06:24,900
here at the<font color="#CCCCCC"> beginning you see the types</font>

123
00:06:22,860 --> 00:06:27,060
<font color="#CCCCCC">your we have like</font><font color="#E5E5E5"> address which is</font><font color="#CCCCCC"> like</font>

124
00:06:24,900 --> 00:06:29,549
a single<font color="#CCCCCC"> variable then we have an array</font>

125
00:06:27,060 --> 00:06:33,990
called the mapping<font color="#E5E5E5"> that does</font><font color="#CCCCCC"> Italy</font>

126
00:06:29,550 --> 00:06:36,060
translate addresses into<font color="#E5E5E5"> a value which</font>

127
00:06:33,990 --> 00:06:40,120
in<font color="#E5E5E5"> that</font><font color="#CCCCCC"> case would correspond to the</font>

128
00:06:36,060 --> 00:06:43,290
balance<font color="#E5E5E5"> and then here we have free</font>

129
00:06:40,120 --> 00:06:46,960
different functions<font color="#CCCCCC"> coin means and cent</font>

130
00:06:43,290 --> 00:06:48,760
<font color="#E5E5E5">so if you look at</font><font color="#CCCCCC"> sin it's pretty</font>

131
00:06:46,960 --> 00:06:52,510
<font color="#CCCCCC">straightforward which is basically like</font>

132
00:06:48,760 --> 00:06:56,130
an addition and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> subtraction</font><font color="#E5E5E5"> so nothing</font>

133
00:06:52,510 --> 00:06:58,210
<font color="#CCCCCC">really complicated</font><font color="#E5E5E5"> per se</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> there and</font>

134
00:06:56,130 --> 00:07:02,440
once you compile<font color="#CCCCCC"> it</font>

135
00:06:58,210 --> 00:07:04,150
so under on the right so in the top<font color="#E5E5E5"> part</font>

136
00:07:02,440 --> 00:07:05,830
<font color="#CCCCCC">you</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> select the runtime</font><font color="#E5E5E5"> part which</font>

137
00:07:04,150 --> 00:07:11,620
is<font color="#E5E5E5"> basically like the translated</font>

138
00:07:05,830 --> 00:07:12,880
<font color="#E5E5E5">bytecode which is I don't know if you</font>

139
00:07:11,620 --> 00:07:14,949
have done<font color="#CCCCCC"> like reverse engineering but</font>

140
00:07:12,880 --> 00:07:18,130
<font color="#CCCCCC">it's very similar</font><font color="#E5E5E5"> to like</font><font color="#CCCCCC"> disassembling</font>

141
00:07:14,949 --> 00:07:20,440
code once you like look at<font color="#E5E5E5"> it but in</font>

142
00:07:18,130 --> 00:07:24,130
<font color="#CCCCCC">addition of that the second</font><font color="#E5E5E5"> part with</font>

143
00:07:20,440 --> 00:07:25,750
the ABI<font color="#E5E5E5"> for the interface that will</font>

144
00:07:24,130 --> 00:07:29,650
pretty much correspond to like the

145
00:07:25,750 --> 00:07:35,310
symbols of that smart contract<font color="#E5E5E5"> and at</font>

146
00:07:29,650 --> 00:07:37,989
the end<font color="#E5E5E5"> the ashes are basically like the</font>

147
00:07:35,310 --> 00:07:42,340
like the<font color="#CCCCCC"> identifiers to each of those</font>

148
00:07:37,990 --> 00:07:48,370
function so and we<font color="#E5E5E5"> can see like all</font>

149
00:07:42,340 --> 00:07:52,150
functions at<font color="#CCCCCC"> the at the bottom so when</font>

150
00:07:48,370 --> 00:07:54,700
<font color="#E5E5E5">it comes down</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> memory management which</font>

151
00:07:52,150 --> 00:07:57,219
is<font color="#E5E5E5"> like a big part of every virtual</font>

152
00:07:54,700 --> 00:07:59,500
machine so here we're<font color="#CCCCCC"> going to</font>

153
00:07:57,220 --> 00:08:01,780
<font color="#E5E5E5">distinguish three different types of</font>

154
00:07:59,500 --> 00:08:04,960
memory<font color="#E5E5E5"> so the first one like I was</font>

155
00:08:01,780 --> 00:08:08,260
mentioning before<font color="#E5E5E5"> is what we can I call</font>

156
00:08:04,960 --> 00:08:09,460
the stack but think<font color="#E5E5E5"> of it as virtual</font>

157
00:08:08,260 --> 00:08:12,490
stack because it's kind of<font color="#E5E5E5"> like</font>

158
00:08:09,460 --> 00:08:14,859
replacing registers<font color="#E5E5E5"> and we're gonna see</font>

159
00:08:12,490 --> 00:08:17,800
after<font color="#E5E5E5"> when we're going to see all the</font>

160
00:08:14,860 --> 00:08:21,039
functions are<font color="#E5E5E5"> being called</font><font color="#CCCCCC"> oh it's being</font>

161
00:08:17,800 --> 00:08:24,789
used one<font color="#CCCCCC"> of the specificity of that</font>

162
00:08:21,039 --> 00:08:29,199
<font color="#E5E5E5">stack is basically it's limited to 1024</font>

163
00:08:24,789 --> 00:08:31,389
frames so you cannot go above<font color="#CCCCCC"> that</font><font color="#E5E5E5"> which</font>

164
00:08:29,199 --> 00:08:33,459
can also be<font color="#CCCCCC"> a problem when one contract</font>

165
00:08:31,389 --> 00:08:37,870
is calling<font color="#CCCCCC"> another contract and then you</font>

166
00:08:33,458 --> 00:08:41,978
have like your stack<font color="#E5E5E5"> struction just</font>

167
00:08:37,870 --> 00:08:45,580
growing<font color="#E5E5E5"> too quick</font><font color="#CCCCCC"> and the second one is</font>

168
00:08:41,979 --> 00:08:49,240
<font color="#E5E5E5">like the storage so it's basically like</font>

169
00:08:45,580 --> 00:08:52,060
<font color="#E5E5E5">the key value storage mapping</font><font color="#CCCCCC"> if we go</font>

170
00:08:49,240 --> 00:08:54,240
back in that contract<font color="#E5E5E5"> that would be like</font>

171
00:08:52,060 --> 00:08:57,930
the<font color="#E5E5E5"> balance at the beginning</font>

172
00:08:54,240 --> 00:09:01,329
<font color="#CCCCCC">it can be enumerated</font><font color="#E5E5E5"> in generally and</font>

173
00:08:57,930 --> 00:09:02,890
<font color="#E5E5E5">when we're going to look at the</font><font color="#CCCCCC"> SEO</font><font color="#E5E5E5"> MSM</font>

174
00:09:01,329 --> 00:09:07,930
because it's going<font color="#E5E5E5"> to be easily</font>

175
00:09:02,890 --> 00:09:10,600
recognized through the so storage store

176
00:09:07,930 --> 00:09:14,589
and storage load instructions<font color="#E5E5E5"> and the</font>

177
00:09:10,600 --> 00:09:16,300
third one is basically like the well

178
00:09:14,589 --> 00:09:20,680
what<font color="#E5E5E5"> would be like normally like the</font>

179
00:09:16,300 --> 00:09:22,839
stack<font color="#CCCCCC"> or like the hip it's a volatile</font>

180
00:09:20,680 --> 00:09:26,260
memory<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> works with like</font>

181
00:09:22,839 --> 00:09:29,380
everything<font color="#CCCCCC"> is</font><font color="#E5E5E5"> working with 256 bits of</font>

182
00:09:26,260 --> 00:09:33,430
values and same thing<font color="#CCCCCC"> here we can</font>

183
00:09:29,380 --> 00:09:41,800
<font color="#CCCCCC">recognize it</font><font color="#E5E5E5"> you through the</font><font color="#CCCCCC"> Amsterdam</font>

184
00:09:33,430 --> 00:09:43,989
load instructions so regardless<font color="#E5E5E5"> if</font>

185
00:09:41,800 --> 00:09:46,839
you're writing a<font color="#E5E5E5"> D compiler or doing</font>

186
00:09:43,990 --> 00:09:48,370
some static analysis<font color="#CCCCCC"> or dynamic analysis</font>

187
00:09:46,839 --> 00:09:50,740
one of the first thing you want to

188
00:09:48,370 --> 00:09:53,170
understand with any binary<font color="#E5E5E5"> code or</font>

189
00:09:50,740 --> 00:09:58,480
assembly code is<font color="#CCCCCC"> or do we</font><font color="#E5E5E5"> don't defy</font>

190
00:09:53,170 --> 00:10:03,579
basic blocks so here<font color="#CCCCCC"> because like</font><font color="#E5E5E5"> the VM</font>

191
00:09:58,480 --> 00:10:06,430
is very very<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> there is a</font>

192
00:10:03,579 --> 00:10:07,630
very quick trick<font color="#E5E5E5"> to recognize basic</font>

193
00:10:06,430 --> 00:10:09,969
blocks is basically there<font color="#E5E5E5"> is an</font>

194
00:10:07,630 --> 00:10:14,220
instruction<font color="#E5E5E5"> called jump test so for the</font>

195
00:10:09,970 --> 00:10:14,220
to mark the destination of jumps

196
00:10:14,230 --> 00:10:19,510
so in most<font color="#E5E5E5"> of cases not all of those</font>

197
00:10:16,209 --> 00:10:22,209
cases<font color="#E5E5E5"> each basic block is going to start</font>

198
00:10:19,510 --> 00:10:23,769
with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> instruction and then so we</font>

199
00:10:22,209 --> 00:10:26,550
<font color="#E5E5E5">have like jump instructions so there is</font>

200
00:10:23,769 --> 00:10:28,810
multiple just like<font color="#CCCCCC"> with x86 assembly</font>

201
00:10:26,550 --> 00:10:34,779
<font color="#CCCCCC">where conditional jumps real</font>

202
00:10:28,810 --> 00:10:38,670
straightforward jumps but<font color="#E5E5E5"> unlike</font><font color="#CCCCCC"> other</font>

203
00:10:34,779 --> 00:10:41,649
<font color="#E5E5E5">like</font><font color="#CCCCCC"> I would say like assembly languages</font>

204
00:10:38,670 --> 00:10:43,360
<font color="#CCCCCC">well the way we know the destination is</font>

205
00:10:41,649 --> 00:10:47,050
by<font color="#E5E5E5"> reading that virtual stack I was</font>

206
00:10:43,360 --> 00:10:48,730
mentioning<font color="#CCCCCC"> before</font><font color="#E5E5E5"> and so every time</font><font color="#CCCCCC"> I</font>

207
00:10:47,050 --> 00:10:51,640
would<font color="#CCCCCC"> see a jump</font><font color="#E5E5E5"> usually we'll see like</font>

208
00:10:48,730 --> 00:10:53,980
<font color="#CCCCCC">a Persian instruction before</font><font color="#E5E5E5"> most of the</font>

209
00:10:51,640 --> 00:10:56,829
times<font color="#E5E5E5"> not</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> is there like some</font>

210
00:10:53,980 --> 00:11:01,510
cases where the virtual stack would be

211
00:10:56,829 --> 00:11:04,479
like swept<font color="#CCCCCC"> they do</font><font color="#E5E5E5"> which like the</font>

212
00:11:01,510 --> 00:11:06,250
duplication<font color="#E5E5E5"> on the on the stack</font><font color="#CCCCCC"> itself</font>

213
00:11:04,480 --> 00:11:08,190
or even<font color="#CCCCCC"> like some pop to get their</font>

214
00:11:06,250 --> 00:11:12,670
destination address

215
00:11:08,190 --> 00:11:16,240
so<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> no concept yet of like</font>

216
00:11:12,670 --> 00:11:17,770
<font color="#CCCCCC">malicious or</font><font color="#E5E5E5"> affiliated like</font><font color="#CCCCCC"> evm card</font>

217
00:11:16,240 --> 00:11:20,710
<font color="#CCCCCC">but that's something that could be done</font>

218
00:11:17,770 --> 00:11:26,350
<font color="#CCCCCC">very easily and that could</font><font color="#E5E5E5"> confuse a lot</font>

219
00:11:20,710 --> 00:11:29,230
of the like confused<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> etherium</font>

220
00:11:26,350 --> 00:11:31,450
<font color="#CCCCCC">network because now if you look at the</font>

221
00:11:29,230 --> 00:11:33,370
actual<font color="#E5E5E5"> like on the</font><font color="#CCCCCC"> etherium website like</font>

222
00:11:31,450 --> 00:11:37,140
the number of<font color="#E5E5E5"> contract there is</font><font color="#CCCCCC"> only</font>

223
00:11:33,370 --> 00:11:41,530
like<font color="#CCCCCC"> 1000 verified contract</font><font color="#E5E5E5"> out of like</font>

224
00:11:37,140 --> 00:11:43,780
1 million account<font color="#CCCCCC"> and to be a verified</font>

225
00:11:41,530 --> 00:11:46,270
account<font color="#CCCCCC"> we need to provide source code</font>

226
00:11:43,780 --> 00:11:50,439
so that's<font color="#CCCCCC"> what they call like a verified</font>

227
00:11:46,270 --> 00:11:53,829
account<font color="#E5E5E5"> so how do we know if that's the</font>

228
00:11:50,440 --> 00:11:55,570
<font color="#CCCCCC">same source card</font><font color="#E5E5E5"> or what happened to</font>

229
00:11:53,830 --> 00:11:57,340
<font color="#E5E5E5">like all the other contracts that are</font>

230
00:11:55,570 --> 00:12:00,040
<font color="#E5E5E5">not providing source card while so far</font>

231
00:11:57,340 --> 00:12:07,390
<font color="#E5E5E5">so until now there is no like solution</font>

232
00:12:00,040 --> 00:12:11,890
to it so like the EVM<font color="#E5E5E5"> like a basic thing</font>

233
00:12:07,390 --> 00:12:13,600
before it's very<font color="#E5E5E5"> like simple</font><font color="#CCCCCC"> vm+ it also</font>

234
00:12:11,890 --> 00:12:17,140
integrates a bunch of cryptographic

235
00:12:13,600 --> 00:12:19,830
functions<font color="#E5E5E5"> like shape free we're gonna</font>

236
00:12:17,140 --> 00:12:22,720
see a<font color="#E5E5E5"> lot of the regular</font><font color="#CCCCCC"> arithmetic</font>

237
00:12:19,830 --> 00:12:27,670
instructions<font color="#E5E5E5"> comparison and also the</font>

238
00:12:22,720 --> 00:12:30,000
regular instructions the environmental

239
00:12:27,670 --> 00:12:35,099
and<font color="#CCCCCC"> block information is</font><font color="#E5E5E5"> basically the</font>

240
00:12:30,000 --> 00:12:37,870
instruction specific to read data from

241
00:12:35,100 --> 00:12:40,240
you know like on<font color="#CCCCCC"> Windows we have like</font>

242
00:12:37,870 --> 00:12:42,850
<font color="#E5E5E5">via</font><font color="#CCCCCC"> process environment block so with</font>

243
00:12:40,240 --> 00:12:45,430
<font color="#CCCCCC">EVMs it would have something similar</font>

244
00:12:42,850 --> 00:12:47,890
except<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the process it will be giving</font>

245
00:12:45,430 --> 00:12:53,709
you the<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> sender's that</font>

246
00:12:47,890 --> 00:12:57,750
sent the is like the the money<font color="#E5E5E5"> to like</font>

247
00:12:53,710 --> 00:13:02,050
the actual<font color="#E5E5E5"> contract or decoder and then</font>

248
00:12:57,750 --> 00:13:03,820
<font color="#CCCCCC">like the stack</font><font color="#E5E5E5"> and memory architectures</font>

249
00:13:02,050 --> 00:13:12,160
that<font color="#E5E5E5"> we just saw and you can also like</font>

250
00:13:03,820 --> 00:13:15,580
log operations so in the case<font color="#CCCCCC"> of an</font>

251
00:13:12,160 --> 00:13:19,360
<font color="#E5E5E5">addition for instance so that's why you</font>

252
00:13:15,580 --> 00:13:21,279
see<font color="#E5E5E5"> it's kind of like assembly code but</font>

253
00:13:19,360 --> 00:13:24,699
it can be translated<font color="#CCCCCC"> into an L</font>

254
00:13:21,279 --> 00:13:27,189
<font color="#E5E5E5">intermediate layer quite easily so here</font>

255
00:13:24,699 --> 00:13:29,979
for an addition so we<font color="#E5E5E5"> would like the two</font>

256
00:13:27,189 --> 00:13:35,529
argument to the stack<font color="#CCCCCC"> like with a</font>

257
00:13:29,980 --> 00:13:37,449
standard called procedure and<font color="#CCCCCC"> ad which</font>

258
00:13:35,529 --> 00:13:39,879
<font color="#CCCCCC">is my actual opcode would behave like a</font>

259
00:13:37,449 --> 00:13:44,219
function so in that case it takes two

260
00:13:39,879 --> 00:13:47,139
parameters<font color="#E5E5E5"> so that's a vvm of pseudocode</font>

261
00:13:44,220 --> 00:13:50,589
<font color="#E5E5E5">right there</font>

262
00:13:47,139 --> 00:13:54,009
so<font color="#E5E5E5"> usually once that instruction is</font>

263
00:13:50,589 --> 00:13:55,509
<font color="#E5E5E5">going to be executed in the first entry</font>

264
00:13:54,009 --> 00:13:58,769
of<font color="#E5E5E5"> the stack we're going to add the</font>

265
00:13:55,509 --> 00:14:02,579
result which is going<font color="#E5E5E5"> to be free and</font>

266
00:13:58,769 --> 00:14:05,290
then we<font color="#CCCCCC"> have the second type of</font>

267
00:14:02,579 --> 00:14:08,620
instruction code<font color="#E5E5E5"> so the first one comes</font>

268
00:14:05,290 --> 00:14:10,660
<font color="#E5E5E5">done</font><font color="#CCCCCC"> to instructions themselves but</font>

269
00:14:08,620 --> 00:14:12,999
there is also an instruction called<font color="#E5E5E5"> curl</font>

270
00:14:10,660 --> 00:14:18,040
which allows<font color="#CCCCCC"> to call external contracts</font>

271
00:14:12,999 --> 00:14:24,670
or external accounts<font color="#CCCCCC"> so here we see like</font>

272
00:14:18,040 --> 00:14:26,439
the the actual format for the curve so

273
00:14:24,670 --> 00:14:29,410
the first parameter will be<font color="#E5E5E5"> like the gas</font>

274
00:14:26,439 --> 00:14:35,189
<font color="#E5E5E5">limit so the one of the specificity of</font>

275
00:14:29,410 --> 00:14:37,779
<font color="#E5E5E5">the EDM is that basically you allocate</font>

276
00:14:35,189 --> 00:14:41,259
<font color="#E5E5E5">just like with instruction cycle in a</font>

277
00:14:37,779 --> 00:14:43,980
<font color="#E5E5E5">river on a regular machine</font><font color="#CCCCCC"> you can put a</font>

278
00:14:41,259 --> 00:14:50,980
limit to<font color="#CCCCCC"> it so you are sure it won't</font>

279
00:14:43,980 --> 00:14:52,930
exhaust too much<font color="#E5E5E5"> computer power and so</font>

280
00:14:50,980 --> 00:14:54,430
the second parameter is like the most

281
00:14:52,930 --> 00:14:56,349
<font color="#CCCCCC">interesting one because it basically</font>

282
00:14:54,430 --> 00:14:58,660
contents at the address we're going to

283
00:14:56,350 --> 00:15:01,139
use to call that contract so<font color="#E5E5E5"> that's at</font>

284
00:14:58,660 --> 00:15:05,829
the address of the contract itself and

285
00:15:01,139 --> 00:15:10,720
with the<font color="#E5E5E5"> exception</font><font color="#CCCCCC"> of for contracts that</font>

286
00:15:05,829 --> 00:15:13,149
are<font color="#CCCCCC"> odd coded inside the evm which is</font>

287
00:15:10,720 --> 00:15:16,929
basically like the one for<font color="#E5E5E5"> the elliptic</font>

288
00:15:13,149 --> 00:15:21,160
elliptic curve public key recovery<font color="#E5E5E5"> Shea</font>

289
00:15:16,929 --> 00:15:25,870
<font color="#CCCCCC">- and because</font><font color="#E5E5E5"> shape free is an actual</font>

290
00:15:21,160 --> 00:15:32,199
instruction by<font color="#E5E5E5"> on</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> ripe MD 160</font>

291
00:15:25,870 --> 00:15:35,139
<font color="#E5E5E5">and the identity function so the the</font>

292
00:15:32,199 --> 00:15:37,179
fact some<font color="#CCCCCC"> are even</font><font color="#E5E5E5"> like from the</font>

293
00:15:35,139 --> 00:15:39,999
<font color="#CCCCCC">insertion point of view the fact</font><font color="#E5E5E5"> it's so</font>

294
00:15:37,179 --> 00:15:42,670
<font color="#CCCCCC">easy to retrieve those instruction if</font>

295
00:15:39,999 --> 00:15:45,939
someone would just<font color="#E5E5E5"> happen to recompile</font><font color="#CCCCCC"> a</font>

296
00:15:42,670 --> 00:15:48,069
<font color="#E5E5E5">stadium</font><font color="#CCCCCC"> it would be like very</font><font color="#E5E5E5"> easy for</font>

297
00:15:45,939 --> 00:15:53,589
<font color="#E5E5E5">them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write like a nursery</font><font color="#CCCCCC"> room</font>

298
00:15:48,069 --> 00:15:56,009
rootkit or something<font color="#E5E5E5"> as such so they</font>

299
00:15:53,589 --> 00:15:58,899
would<font color="#CCCCCC"> just like intercept all the course</font>

300
00:15:56,009 --> 00:16:02,109
if they would want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> track more</font>

301
00:15:58,899 --> 00:16:09,699
information out of<font color="#E5E5E5"> it or</font><font color="#CCCCCC"> even change</font>

302
00:16:02,109 --> 00:16:12,369
like destination addresses or even

303
00:16:09,699 --> 00:16:15,339
<font color="#E5E5E5">actually like even patching the process</font>

304
00:16:12,369 --> 00:16:17,829
in memory would<font color="#CCCCCC"> be quite feasible you</font>

305
00:16:15,339 --> 00:16:24,449
<font color="#E5E5E5">just have to look like that that</font>

306
00:16:17,829 --> 00:16:26,169
<font color="#E5E5E5">specific instruction directly then so</font>

307
00:16:24,449 --> 00:16:28,868
previously we<font color="#E5E5E5"> talked about the</font>

308
00:16:26,169 --> 00:16:31,149
<font color="#CCCCCC">environment on</font><font color="#E5E5E5"> information block which</font>

309
00:16:28,869 --> 00:16:33,939
<font color="#CCCCCC">you can access using the opcode that</font>

310
00:16:31,149 --> 00:16:36,609
<font color="#E5E5E5">called data</font><font color="#CCCCCC"> alert which</font><font color="#E5E5E5"> is basically</font>

311
00:16:33,939 --> 00:16:40,689
like the equivalent of a<font color="#CCCCCC"> gate command</font>

312
00:16:36,609 --> 00:16:43,480
line call so you would read that<font color="#CCCCCC"> our</font>

313
00:16:40,689 --> 00:16:46,360
block<font color="#CCCCCC"> so the first four</font><font color="#E5E5E5"> bytes are</font>

314
00:16:43,480 --> 00:16:47,860
basically the ash<font color="#E5E5E5"> of the function we</font>

315
00:16:46,360 --> 00:16:50,049
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> cut internally inside the</font>

316
00:16:47,860 --> 00:16:53,709
contract<font color="#E5E5E5"> and then it's followed by the</font>

317
00:16:50,049 --> 00:16:55,329
arguments and the way those arguments

318
00:16:53,709 --> 00:16:58,059
are going<font color="#E5E5E5"> to be ordered is going to</font>

319
00:16:55,329 --> 00:17:03,839
<font color="#E5E5E5">depend of the actual</font><font color="#CCCCCC"> function definition</font>

320
00:16:58,059 --> 00:17:08,289
that's why if<font color="#E5E5E5"> we go back to</font><font color="#CCCCCC"> the initial</font>

321
00:17:03,839 --> 00:17:10,389
screenshot here in the middle this one

322
00:17:08,289 --> 00:17:12,220
like the ABI is very important because

323
00:17:10,388 --> 00:17:17,829
it<font color="#E5E5E5"> contains like the assembler or the</font>

324
00:17:12,220 --> 00:17:20,559
<font color="#CCCCCC">definition</font><font color="#E5E5E5"> of your actual functions but</font>

325
00:17:17,829 --> 00:17:23,529
by reversing a contract assuming you not

326
00:17:20,559 --> 00:17:29,289
have the ABI you can also extract those

327
00:17:23,529 --> 00:17:32,740
ashes<font color="#E5E5E5"> so so here it is like a basic</font>

328
00:17:29,289 --> 00:17:36,690
function so just<font color="#E5E5E5"> doing an addition here</font>

329
00:17:32,740 --> 00:17:39,820
<font color="#CCCCCC">we have like the intermediary f3m</font><font color="#E5E5E5"> code</font>

330
00:17:36,690 --> 00:17:42,100
<font color="#CCCCCC">so we read like the first argument so we</font>

331
00:17:39,820 --> 00:17:44,799
can actually<font color="#E5E5E5"> like a data</font><font color="#CCCCCC"> Accord at alert</font>

332
00:17:42,100 --> 00:17:47,820
and the second argument and we just add

333
00:17:44,799 --> 00:17:47,820
each<font color="#E5E5E5"> of them</font>

334
00:17:50,120 --> 00:17:56,370
so like I<font color="#CCCCCC"> mentioned before so when it</font>

335
00:17:54,600 --> 00:17:59,730
comes down<font color="#CCCCCC"> to type discoveries there is</font>

336
00:17:56,370 --> 00:18:01,949
two way to discover like types the first

337
00:17:59,730 --> 00:18:03,720
<font color="#E5E5E5">one will be using like the same birds</font>

338
00:18:01,950 --> 00:18:06,780
like the<font color="#CCCCCC"> ABI symbols I was mentioning</font>

339
00:18:03,720 --> 00:18:11,760
<font color="#CCCCCC">before</font><font color="#E5E5E5"> or the second one would be to</font>

340
00:18:06,780 --> 00:18:14,280
actually<font color="#E5E5E5"> look at autos like variables or</font>

341
00:18:11,760 --> 00:18:16,920
arguments<font color="#E5E5E5"> are being masks so in the case</font>

342
00:18:14,280 --> 00:18:18,810
of<font color="#E5E5E5"> addresses for instance like I was</font>

343
00:18:16,920 --> 00:18:21,080
saying<font color="#E5E5E5"> before like the specificities</font>

344
00:18:18,810 --> 00:18:25,290
<font color="#E5E5E5">even though like the EDM is working with</font>

345
00:18:21,080 --> 00:18:28,470
256 bit registers addresses themselves

346
00:18:25,290 --> 00:18:31,710
are encoded on<font color="#E5E5E5"> only 160 bits so usually</font>

347
00:18:28,470 --> 00:18:36,030
you would see an end<font color="#E5E5E5"> operation with that</font>

348
00:18:31,710 --> 00:18:38,940
<font color="#CCCCCC">following</font><font color="#E5E5E5"> mask</font><font color="#CCCCCC"> so you would</font><font color="#E5E5E5"> see it</font>

349
00:18:36,030 --> 00:18:41,450
either statically or dynamically<font color="#E5E5E5"> like in</font>

350
00:18:38,940 --> 00:18:46,650
the case<font color="#E5E5E5"> below that mask is being</font>

351
00:18:41,450 --> 00:18:47,730
computed<font color="#E5E5E5"> them dynamically but those are</font>

352
00:18:46,650 --> 00:18:51,510
like white stand downs are like

353
00:18:47,730 --> 00:18:55,530
pre-compiled already and from that you

354
00:18:51,510 --> 00:18:57,300
can<font color="#E5E5E5"> so in all the comparator porosity if</font>

355
00:18:55,530 --> 00:18:59,700
we<font color="#E5E5E5"> recognize that sequence of code we</font>

356
00:18:57,300 --> 00:19:04,470
were just like<font color="#E5E5E5"> mark the attributes of</font>

357
00:18:59,700 --> 00:19:06,930
<font color="#E5E5E5">that specific register in the virtual</font>

358
00:19:04,470 --> 00:19:11,220
stack as an<font color="#E5E5E5"> address based on those</font>

359
00:19:06,930 --> 00:19:13,820
parameters<font color="#E5E5E5"> which</font><font color="#CCCCCC"> helps later on when it</font>

360
00:19:11,220 --> 00:19:18,930
comes<font color="#CCCCCC"> down to going from an intermediate</font>

361
00:19:13,820 --> 00:19:25,470
view of the EVM cut<font color="#CCCCCC"> in to like solidity</font>

362
00:19:18,930 --> 00:19:29,690
like source code<font color="#E5E5E5"> so now regarding the</font>

363
00:19:25,470 --> 00:19:37,890
<font color="#CCCCCC">actual byte code so just to go back</font>

364
00:19:29,690 --> 00:19:40,530
initially so now<font color="#CCCCCC"> so here if you</font><font color="#E5E5E5"> look at</font>

365
00:19:37,890 --> 00:19:46,530
the top like the comment I'm using to

366
00:19:40,530 --> 00:19:48,930
consolidate<font color="#CCCCCC"> a I'm using the argument</font><font color="#E5E5E5"> - -</font>

367
00:19:46,530 --> 00:19:52,170
<font color="#E5E5E5">bind runtime so the only part I have</font>

368
00:19:48,930 --> 00:19:54,720
here is<font color="#CCCCCC"> only like</font><font color="#E5E5E5"> the runtime part</font><font color="#CCCCCC"> but</font>

369
00:19:52,170 --> 00:19:57,030
if you only<font color="#CCCCCC"> use like</font><font color="#E5E5E5"> - - bin it's going</font>

370
00:19:54,720 --> 00:19:59,190
to also<font color="#E5E5E5"> include the preloader which is</font>

371
00:19:57,030 --> 00:20:01,070
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be used</font><font color="#E5E5E5"> to cope</font><font color="#CCCCCC"> I the actual</font>

372
00:19:59,190 --> 00:20:04,590
<font color="#E5E5E5">smell contract in memory</font>

373
00:20:01,070 --> 00:20:07,379
so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> describe that preloader</font>

374
00:20:04,590 --> 00:20:08,250
<font color="#E5E5E5">which is specific</font><font color="#CCCCCC"> to most of the</font>

375
00:20:07,380 --> 00:20:12,360
contract

376
00:20:08,250 --> 00:20:14,010
so the preloader<font color="#E5E5E5"> like the name says can</font>

377
00:20:12,360 --> 00:20:16,139
be<font color="#E5E5E5"> found at the beginning</font><font color="#CCCCCC"> of each</font>

378
00:20:14,010 --> 00:20:20,070
contract<font color="#E5E5E5"> and is in</font><font color="#CCCCCC"> charge of</font>

379
00:20:16,140 --> 00:20:21,929
bootstrapping the<font color="#E5E5E5"> contracts but now it</font>

380
00:20:20,070 --> 00:20:23,490
contents like the actual size<font color="#CCCCCC"> of the</font>

381
00:20:21,929 --> 00:20:26,690
<font color="#E5E5E5">runtime card and is going to</font><font color="#CCCCCC"> compile it</font>

382
00:20:23,490 --> 00:20:31,220
in<font color="#E5E5E5"> memory and then the runtime code of</font>

383
00:20:26,690 --> 00:20:34,020
the contract starts at the execute

384
00:20:31,220 --> 00:20:37,649
instruction address like zero<font color="#CCCCCC"> offset</font>

385
00:20:34,020 --> 00:20:39,929
zero and that's where we have all the

386
00:20:37,649 --> 00:20:44,580
<font color="#CCCCCC">logical routine we've all the function</font>

387
00:20:39,929 --> 00:20:54,840
we define in our contract<font color="#E5E5E5"> and also like</font>

388
00:20:44,580 --> 00:20:57,029
the the<font color="#E5E5E5"> Oh</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> the definitions for</font>

389
00:20:54,840 --> 00:21:00,230
like the actual storage variables that

390
00:20:57,029 --> 00:21:00,230
<font color="#E5E5E5">we would see on the top</font>

391
00:21:06,840 --> 00:21:12,480
so like I<font color="#E5E5E5"> was saying so basically</font>

392
00:21:10,590 --> 00:21:15,389
contents<font color="#E5E5E5"> like the actual</font><font color="#CCCCCC"> logic flow of</font>

393
00:21:12,480 --> 00:21:19,230
the contract<font color="#E5E5E5"> so the way it works</font><font color="#CCCCCC"> is once</font>

394
00:21:15,390 --> 00:21:20,940
enter in the in the<font color="#CCCCCC"> pre order you can</font>

395
00:21:19,230 --> 00:21:22,680
have like a big like switch statement

396
00:21:20,940 --> 00:21:24,570
<font color="#E5E5E5">statement like a dispatch table that</font>

397
00:21:22,680 --> 00:21:28,530
would redirect to each of the function

398
00:21:24,570 --> 00:21:33,179
<font color="#CCCCCC">where would you find</font><font color="#E5E5E5"> so here what we see</font>

399
00:21:28,530 --> 00:21:35,040
<font color="#E5E5E5">now is basically the preloader the most</font>

400
00:21:33,180 --> 00:21:36,630
interesting like instruction here is

401
00:21:35,040 --> 00:21:38,940
basically a code copy which<font color="#CCCCCC"> is going to</font>

402
00:21:36,630 --> 00:21:41,670
<font color="#E5E5E5">be in</font><font color="#CCCCCC"> charge of reading the actual</font>

403
00:21:38,940 --> 00:21:45,540
runtime code and<font color="#CCCCCC"> co-pilot in memory to</font>

404
00:21:41,670 --> 00:21:47,540
be actually executed by the<font color="#CCCCCC"> etherium</font>

405
00:21:45,540 --> 00:21:51,600
virtual machine

406
00:21:47,540 --> 00:21:55,350
most of the instruction we see before<font color="#E5E5E5"> a</font>

407
00:21:51,600 --> 00:21:57,659
quite like standard instructions<font color="#CCCCCC"> a would</font>

408
00:21:55,350 --> 00:22:02,669
see<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> address of the actual</font>

409
00:21:57,660 --> 00:22:05,460
<font color="#E5E5E5">contract</font><font color="#CCCCCC"> why it's dot and like the size</font>

410
00:22:02,670 --> 00:22:11,640
of<font color="#E5E5E5"> the actual contract so once</font><font color="#CCCCCC"> it scope</font>

411
00:22:05,460 --> 00:22:16,320
<font color="#E5E5E5">ID in memory so then comes like the</font>

412
00:22:11,640 --> 00:22:18,770
<font color="#E5E5E5">actual dispatcher and the so here it's</font>

413
00:22:16,320 --> 00:22:22,530
an<font color="#E5E5E5"> example of a very simple contract</font>

414
00:22:18,770 --> 00:22:26,850
with two functions that<font color="#E5E5E5"> we can see here</font>

415
00:22:22,530 --> 00:22:28,710
and yellow and pink so like<font color="#E5E5E5"> I was</font>

416
00:22:26,850 --> 00:22:33,000
explaining<font color="#CCCCCC"> before due to</font><font color="#E5E5E5"> the</font>

417
00:22:28,710 --> 00:22:34,890
architecture of the actual<font color="#CCCCCC"> VM must</font>

418
00:22:33,000 --> 00:22:39,900
accept like<font color="#CCCCCC"> Persian</font><font color="#E5E5E5"> instructions</font>

419
00:22:34,890 --> 00:22:42,870
<font color="#E5E5E5">most of up cuts are</font><font color="#CCCCCC"> just like single</font>

420
00:22:39,900 --> 00:22:45,090
<font color="#CCCCCC">love don't take any parameters and we</font>

421
00:22:42,870 --> 00:22:47,760
would read from<font color="#E5E5E5"> their stack directly</font>

422
00:22:45,090 --> 00:22:50,370
which requires<font color="#CCCCCC"> in most of cases to</font>

423
00:22:47,760 --> 00:22:53,160
dynamically<font color="#E5E5E5"> like emulate most of the</font>

424
00:22:50,370 --> 00:22:55,639
instructions especially when there is<font color="#E5E5E5"> a</font>

425
00:22:53,160 --> 00:23:01,050
lot of<font color="#E5E5E5"> operation trigger</font><font color="#CCCCCC"> editing the</font>

426
00:22:55,640 --> 00:23:04,110
virtual stack<font color="#CCCCCC"> so here if</font><font color="#E5E5E5"> we look in</font>

427
00:23:01,050 --> 00:23:05,879
orange like I was explaining<font color="#E5E5E5"> before it's</font>

428
00:23:04,110 --> 00:23:09,240
<font color="#E5E5E5">going to read the environmental</font>

429
00:23:05,880 --> 00:23:14,550
information<font color="#E5E5E5"> block and it will start by</font>

430
00:23:09,240 --> 00:23:16,410
reading the<font color="#CCCCCC"> first four bytes</font><font color="#E5E5E5"> so here the</font>

431
00:23:14,550 --> 00:23:20,010
optimization is basically<font color="#E5E5E5"> it's going to</font>

432
00:23:16,410 --> 00:23:23,880
read the whole 256

433
00:23:20,010 --> 00:23:27,660
bits inside the block and then it's

434
00:23:23,880 --> 00:23:29,460
going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> these divide insertion to</font>

435
00:23:27,660 --> 00:23:31,380
basically extract those<font color="#E5E5E5"> four bytes and</font>

436
00:23:29,460 --> 00:23:33,840
then it's going to compare<font color="#CCCCCC"> those four</font>

437
00:23:31,380 --> 00:23:37,200
bites before<font color="#CCCCCC"> X switching to the actual</font>

438
00:23:33,840 --> 00:23:40,139
function and on the right but we see

439
00:23:37,200 --> 00:23:46,920
like the actual<font color="#E5E5E5"> length</font><font color="#CCCCCC"> to functions for</font>

440
00:23:40,140 --> 00:23:49,940
the for the multiplications<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in the</font>

441
00:23:46,920 --> 00:23:53,670
<font color="#CCCCCC">middle</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> there is a common a</font>

442
00:23:49,940 --> 00:23:55,890
common basic block so which is quite

443
00:23:53,670 --> 00:23:59,090
<font color="#E5E5E5">interesting because the manager of like</font>

444
00:23:55,890 --> 00:24:01,620
some sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like code optimization</font>

445
00:23:59,090 --> 00:24:04,350
which so far works pretty well with<font color="#E5E5E5"> the</font>

446
00:24:01,620 --> 00:24:05,879
EVM<font color="#E5E5E5"> even though like like I'm going to</font>

447
00:24:04,350 --> 00:24:07,399
<font color="#E5E5E5">explain at the end</font><font color="#CCCCCC"> of the presentations</font>

448
00:24:05,880 --> 00:24:13,440
you're<font color="#E5E5E5"> going to move towards the new</font>

449
00:24:07,400 --> 00:24:15,600
design<font color="#E5E5E5"> for their binary run card</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and</font>

450
00:24:13,440 --> 00:24:18,060
like I was explaining<font color="#E5E5E5"> before so here</font>

451
00:24:15,600 --> 00:24:20,370
each time<font color="#E5E5E5"> you see a jump basically you</font>

452
00:24:18,060 --> 00:24:26,310
see like a jump test to<font color="#E5E5E5"> ensure the</font>

453
00:24:20,370 --> 00:24:28,860
integrity of the destination<font color="#CCCCCC"> the</font>

454
00:24:26,310 --> 00:24:31,139
function ashes are not generated

455
00:24:28,860 --> 00:24:38,070
randomly so actually follow like<font color="#E5E5E5"> row</font>

456
00:24:31,140 --> 00:24:43,370
specific a<font color="#CCCCCC"> specific design so it will do</font>

457
00:24:38,070 --> 00:24:46,919
<font color="#E5E5E5">like a</font><font color="#CCCCCC"> chef free so I click AK 256 of</font>

458
00:24:43,370 --> 00:24:51,149
the function name and then the type of

459
00:24:46,920 --> 00:24:53,700
<font color="#E5E5E5">each parameter and from that so in that</font>

460
00:24:51,150 --> 00:24:59,670
case of double<font color="#E5E5E5"> for instance let's say it</font>

461
00:24:53,700 --> 00:25:01,590
<font color="#E5E5E5">takes only one parameter so in the</font>

462
00:24:59,670 --> 00:25:04,710
second box we would see it would<font color="#E5E5E5"> just</font>

463
00:25:01,590 --> 00:25:07,320
like extract like the first four<font color="#E5E5E5"> bytes</font>

464
00:25:04,710 --> 00:25:09,720
of that<font color="#E5E5E5"> ash and that would be the actual</font>

465
00:25:07,320 --> 00:25:16,560
<font color="#E5E5E5">ash that we would see in the</font><font color="#CCCCCC"> previous</font>

466
00:25:09,720 --> 00:25:19,440
<font color="#E5E5E5">screen so so here with its</font><font color="#CCCCCC"> et e9 and</font>

467
00:25:16,560 --> 00:25:22,429
neon yellow<font color="#CCCCCC"> which it's basically</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> nine</font>

468
00:25:19,440 --> 00:25:22,430
<font color="#E5E5E5">in backwards</font>

469
00:25:27,500 --> 00:25:32,870
so let's just like to<font color="#CCCCCC"> illustrate the</font>

470
00:25:30,650 --> 00:25:36,050
code optimization to extract the<font color="#CCCCCC"> actual</font>

471
00:25:32,870 --> 00:25:40,520
parameters<font color="#CCCCCC"> so here let's see me like you</font>

472
00:25:36,050 --> 00:25:43,040
pass<font color="#E5E5E5"> a 256 bit register containing like</font>

473
00:25:40,520 --> 00:25:47,420
the ash<font color="#E5E5E5"> one two three four five six</font>

474
00:25:43,040 --> 00:25:57,230
<font color="#E5E5E5">eight</font><font color="#CCCCCC"> so the division would just extract</font>

475
00:25:47,420 --> 00:26:00,320
it<font color="#E5E5E5"> like we saw</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> here</font>

476
00:25:57,230 --> 00:26:04,580
so that's an output generated from the

477
00:26:00,320 --> 00:26:08,020
tool<font color="#E5E5E5"> regarding the control flow graph</font><font color="#CCCCCC"> so</font>

478
00:26:04,580 --> 00:26:11,210
on the left is<font color="#CCCCCC"> basically what</font><font color="#E5E5E5"> comes out</font>

479
00:26:08,020 --> 00:26:16,850
<font color="#E5E5E5">if you just like generate the graph</font>

480
00:26:11,210 --> 00:26:20,090
aesthetically<font color="#CCCCCC"> so in most of cases</font><font color="#E5E5E5"> even</font>

481
00:26:16,850 --> 00:26:22,310
though like for<font color="#CCCCCC"> that example that was</font>

482
00:26:20,090 --> 00:26:24,260
very<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> very simple you</font>

483
00:26:22,310 --> 00:26:26,330
will still need<font color="#E5E5E5"> to emulate it to make</font>

484
00:26:24,260 --> 00:26:29,240
<font color="#E5E5E5">sure to retrieve all the parent color</font>

485
00:26:26,330 --> 00:26:32,030
for each basic block<font color="#CCCCCC"> so here</font><font color="#E5E5E5"> for</font>

486
00:26:29,240 --> 00:26:36,770
<font color="#CCCCCC">instance we</font><font color="#E5E5E5"> see like the basic block at</font>

487
00:26:32,030 --> 00:26:41,840
<font color="#E5E5E5">four F is an orphan block because of</font>

488
00:26:36,770 --> 00:26:43,850
stack manipulation operations that<font color="#E5E5E5"> I was</font>

489
00:26:41,840 --> 00:26:45,679
mentioning<font color="#E5E5E5"> before because if you see</font>

490
00:26:43,850 --> 00:26:50,090
like a jump<font color="#E5E5E5"> but before you</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> like a</font>

491
00:26:45,680 --> 00:26:51,980
<font color="#E5E5E5">pop or like another like stack operation</font>

492
00:26:50,090 --> 00:26:53,179
which is<font color="#E5E5E5"> not a push well you don't</font>

493
00:26:51,980 --> 00:26:55,400
<font color="#E5E5E5">really know where it's going to point</font>

494
00:26:53,180 --> 00:26:59,780
unless<font color="#E5E5E5"> you're like is</font><font color="#CCCCCC"> actually emulating</font>

495
00:26:55,400 --> 00:27:02,170
like each basic block<font color="#E5E5E5"> which fortunately</font>

496
00:26:59,780 --> 00:27:06,200
<font color="#E5E5E5">is something like we can do very easily</font>

497
00:27:02,170 --> 00:27:08,650
by by<font color="#CCCCCC"> reading an emulator</font><font color="#E5E5E5"> especially</font>

498
00:27:06,200 --> 00:27:11,660
since there is no concept of register

499
00:27:08,650 --> 00:27:13,400
<font color="#E5E5E5">registers to save and everything is</font>

500
00:27:11,660 --> 00:27:15,650
<font color="#E5E5E5">basically like a virtual stack it's</font>

501
00:27:13,400 --> 00:27:18,050
pretty easy like in our cow<font color="#CCCCCC"> to in our</font>

502
00:27:15,650 --> 00:27:20,560
<font color="#E5E5E5">code</font><font color="#CCCCCC"> to fuck like</font><font color="#E5E5E5"> the state of the</font>

503
00:27:18,050 --> 00:27:24,620
virtual<font color="#E5E5E5"> machine because it comes down to</font>

504
00:27:20,560 --> 00:27:26,780
<font color="#E5E5E5">mainly like the the the virtual stack</font>

505
00:27:24,620 --> 00:27:29,510
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is you know even though the</font>

506
00:27:26,780 --> 00:27:31,940
<font color="#E5E5E5">maximum is like 1,024 frames</font>

507
00:27:29,510 --> 00:27:36,920
usually it<font color="#E5E5E5"> will be like around</font><font color="#CCCCCC"> 10-ish</font>

508
00:27:31,940 --> 00:27:38,119
and when it comes<font color="#E5E5E5"> down</font><font color="#CCCCCC"> to the persistent</font>

509
00:27:36,920 --> 00:27:44,389
<font color="#E5E5E5">and the volatile memory</font>

510
00:27:38,119 --> 00:27:47,238
<font color="#E5E5E5">it's like a very small buffer</font><font color="#CCCCCC"> so if we</font>

511
00:27:44,389 --> 00:27:50,569
<font color="#E5E5E5">translate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual dispatcher into</font>

512
00:27:47,239 --> 00:27:53,299
like pseudocode<font color="#CCCCCC"> that what would come out</font>

513
00:27:50,569 --> 00:27:57,979
of<font color="#E5E5E5"> it and then on the right would be</font>

514
00:27:53,299 --> 00:28:00,259
<font color="#E5E5E5">like the while the decompile view of it</font>

515
00:27:57,979 --> 00:28:05,929
that we<font color="#E5E5E5"> would manage</font><font color="#CCCCCC"> to extract</font><font color="#E5E5E5"> from it</font>

516
00:28:00,259 --> 00:28:08,919
so most of memory operation using<font color="#E5E5E5"> like</font>

517
00:28:05,929 --> 00:28:10,969
<font color="#E5E5E5">mm stone</font><font color="#CCCCCC"> m lot would be like temporary</font>

518
00:28:08,919 --> 00:28:13,159
<font color="#E5E5E5">so that would be like the temporary</font>

519
00:28:10,969 --> 00:28:19,039
buffers we just enjoy them with<font color="#E5E5E5"> the LG</font>

520
00:28:13,159 --> 00:28:21,319
compiler<font color="#E5E5E5"> and the actual like switch like</font>

521
00:28:19,039 --> 00:28:23,179
I was<font color="#E5E5E5"> explaining each case will actually</font>

522
00:28:21,319 --> 00:28:25,819
be an<font color="#E5E5E5"> actual function so if we have</font>

523
00:28:23,179 --> 00:28:28,999
<font color="#CCCCCC">access to the API definition we can just</font>

524
00:28:25,819 --> 00:28:31,699
like do like<font color="#E5E5E5"> some sort of regression and</font>

525
00:28:28,999 --> 00:28:35,479
extract the actual function name from

526
00:28:31,699 --> 00:28:39,019
that<font color="#E5E5E5"> and then we would also have like</font>

527
00:28:35,479 --> 00:28:41,119
the type of the parameters but even

528
00:28:39,019 --> 00:28:43,339
without<font color="#E5E5E5"> the</font><font color="#CCCCCC"> symbols would get kind of</font>

529
00:28:41,119 --> 00:28:48,319
like abstract names but<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> still</font>

530
00:28:43,339 --> 00:28:52,219
like be understandable<font color="#CCCCCC"> so here let's say</font>

531
00:28:48,319 --> 00:28:54,438
the double<font color="#CCCCCC"> function had been called so</font>

532
00:28:52,219 --> 00:29:01,099
the first<font color="#E5E5E5"> four bytes will be the ash of</font>

533
00:28:54,439 --> 00:29:03,319
<font color="#E5E5E5">the double</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> then from there it</font>

534
00:29:01,099 --> 00:29:05,389
will so that<font color="#CCCCCC"> we would see like the</font>

535
00:29:03,319 --> 00:29:08,859
<font color="#E5E5E5">called data log that would read the</font>

536
00:29:05,389 --> 00:29:12,519
<font color="#CCCCCC">actual first</font><font color="#E5E5E5"> parameter at the offset for</font>

537
00:29:08,859 --> 00:29:12,519
actual the next second

538
00:29:18,200 --> 00:29:26,240
yeah<font color="#E5E5E5"> here that would be the offset where</font>

539
00:29:21,690 --> 00:29:30,299
would read<font color="#CCCCCC"> their first argument</font><font color="#E5E5E5"> and then</font>

540
00:29:26,240 --> 00:29:32,670
here we would see<font color="#E5E5E5"> like a posh</font><font color="#CCCCCC"> - and then</font>

541
00:29:30,299 --> 00:29:35,100
it would enter in the new basic<font color="#E5E5E5"> book</font>

542
00:29:32,670 --> 00:29:39,929
which is<font color="#CCCCCC"> common to the vo</font><font color="#E5E5E5"> - functions so</font>

543
00:29:35,100 --> 00:29:41,850
here it's going to be on a<font color="#E5E5E5"> gem desk</font><font color="#CCCCCC"> but</font>

544
00:29:39,929 --> 00:29:43,290
<font color="#E5E5E5">it won't do anything because there is no</font>

545
00:29:41,850 --> 00:29:46,980
gem before so that would be the

546
00:29:43,290 --> 00:29:48,960
equivalent of<font color="#E5E5E5"> an</font><font color="#CCCCCC"> OP instruction and yeah</font>

547
00:29:46,980 --> 00:29:52,110
and<font color="#E5E5E5"> just right after that it would just</font>

548
00:29:48,960 --> 00:29:56,640
like<font color="#E5E5E5"> call the so the multiplier our</font>

549
00:29:52,110 --> 00:29:59,790
instruction and here in the case of the

550
00:29:56,640 --> 00:30:03,840
triple so instead of pushing<font color="#E5E5E5"> - it's</font>

551
00:29:59,790 --> 00:30:06,059
going<font color="#E5E5E5"> to push free and then here we</font>

552
00:30:03,840 --> 00:30:10,918
would have<font color="#E5E5E5"> an actual jump that will</font>

553
00:30:06,059 --> 00:30:14,760
<font color="#CCCCCC">actually give the offset</font><font color="#E5E5E5"> and just go</font>

554
00:30:10,919 --> 00:30:20,370
there directly<font color="#E5E5E5"> and then execute</font><font color="#CCCCCC"> the</font>

555
00:30:14,760 --> 00:30:24,090
multiple instruction so here is an

556
00:30:20,370 --> 00:30:27,149
<font color="#CCCCCC">example of a</font><font color="#E5E5E5"> venerable contract so like</font>

557
00:30:24,090 --> 00:30:28,590
I was explaining before<font color="#E5E5E5"> so like the like</font>

558
00:30:27,150 --> 00:30:31,760
kind<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> the nice thing about it</font>

559
00:30:28,590 --> 00:30:34,909
like of introducing<font color="#E5E5E5"> like smart contract</font>

560
00:30:31,760 --> 00:30:37,530
<font color="#E5E5E5">like the concept of smart contract is is</font>

561
00:30:34,910 --> 00:30:40,230
interesting<font color="#CCCCCC"> from the software point of</font>

562
00:30:37,530 --> 00:30:42,540
view from<font color="#E5E5E5"> an application deployment</font>

563
00:30:40,230 --> 00:30:44,910
point of view and it would be<font color="#E5E5E5"> very</font>

564
00:30:42,540 --> 00:30:47,700
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> since</font><font color="#CCCCCC"> the introducing</font><font color="#E5E5E5"> the</font>

565
00:30:44,910 --> 00:30:50,970
concept<font color="#E5E5E5"> of a software layer well it</font>

566
00:30:47,700 --> 00:30:52,860
makes them even able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> learn</font>

567
00:30:50,970 --> 00:30:54,980
<font color="#E5E5E5">ability because everything which</font><font color="#CCCCCC"> is</font>

568
00:30:52,860 --> 00:30:59,850
software<font color="#E5E5E5"> is going to see if in abilities</font>

569
00:30:54,980 --> 00:31:03,980
anyway it's like<font color="#E5E5E5"> the Murphy's Law so</font>

570
00:30:59,850 --> 00:31:06,840
here the actual<font color="#CCCCCC"> ving ability is</font>

571
00:31:03,980 --> 00:31:13,020
basically in the<font color="#E5E5E5"> withdraw balance</font>

572
00:31:06,840 --> 00:31:14,580
<font color="#CCCCCC">function</font><font color="#E5E5E5"> so because here what we see</font><font color="#CCCCCC"> is</font>

573
00:31:13,020 --> 00:31:18,418
<font color="#CCCCCC">like the equivalent of a</font><font color="#E5E5E5"> rest condition</font>

574
00:31:14,580 --> 00:31:20,549
so where most of JavaScript developers

575
00:31:18,419 --> 00:31:22,410
have never heard of rest conditions so

576
00:31:20,549 --> 00:31:25,740
it took<font color="#E5E5E5"> them by surprise and that's</font>

577
00:31:22,410 --> 00:31:28,380
basically<font color="#E5E5E5"> what resulted in geo losing 60</font>

578
00:31:25,740 --> 00:31:30,840
million last year<font color="#E5E5E5"> but that's basically</font>

579
00:31:28,380 --> 00:31:34,320
the<font color="#E5E5E5"> type of</font><font color="#CCCCCC"> inability</font><font color="#E5E5E5"> that was in toast</font>

580
00:31:30,840 --> 00:31:36,480
contract and even conceptually since

581
00:31:34,320 --> 00:31:38,220
everything is on the blockchain<font color="#CCCCCC"> well you</font>

582
00:31:36,480 --> 00:31:41,100
have access<font color="#CCCCCC"> to all the applications that</font>

583
00:31:38,220 --> 00:31:46,290
on the<font color="#CCCCCC"> SEM</font><font color="#E5E5E5"> network so here basically</font>

584
00:31:41,100 --> 00:31:48,330
what happens is when it's taking the

585
00:31:46,290 --> 00:31:52,230
balance out of the account

586
00:31:48,330 --> 00:31:56,909
well the balance is being initialized to

587
00:31:52,230 --> 00:32:01,170
<font color="#E5E5E5">zero after so before</font><font color="#CCCCCC"> that if there is an</font>

588
00:31:56,910 --> 00:32:03,990
actual like<font color="#E5E5E5"> error</font><font color="#CCCCCC"> what can happen is the</font>

589
00:32:01,170 --> 00:32:07,170
<font color="#E5E5E5">color which is another contract can have</font>

590
00:32:03,990 --> 00:32:15,650
a<font color="#E5E5E5"> full back function which is executed</font>

591
00:32:07,170 --> 00:32:18,000
by default so that's what people in<font color="#E5E5E5"> the</font>

592
00:32:15,650 --> 00:32:20,010
etherium community called the reentrant

593
00:32:18,000 --> 00:32:25,830
vulnerability which is basically like a

594
00:32:20,010 --> 00:32:29,070
<font color="#CCCCCC">rest</font><font color="#E5E5E5"> condition so the good</font><font color="#CCCCCC"> thing is from</font>

595
00:32:25,830 --> 00:32:31,800
the decompiler point of view<font color="#E5E5E5"> because</font>

596
00:32:29,070 --> 00:32:33,960
<font color="#E5E5E5">it's also like like an emulator</font>

597
00:32:31,800 --> 00:32:38,010
<font color="#E5E5E5">basically which helped us to retrieve</font>

598
00:32:33,960 --> 00:32:40,580
all<font color="#CCCCCC"> the basic block</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can track each</font>

599
00:32:38,010 --> 00:32:42,750
block which<font color="#CCCCCC"> is doing a memory</font>

600
00:32:40,580 --> 00:32:45,449
<font color="#E5E5E5">instruction on the actual like</font>

601
00:32:42,750 --> 00:32:47,640
<font color="#CCCCCC">persistent memory so like I was</font><font color="#E5E5E5"> saying</font>

602
00:32:45,450 --> 00:32:50,720
<font color="#CCCCCC">before</font><font color="#E5E5E5"> while it comes down</font><font color="#CCCCCC"> to one single</font>

603
00:32:47,640 --> 00:32:55,560
instruction<font color="#E5E5E5"> which is called a store and</font>

604
00:32:50,720 --> 00:32:59,340
which is the one<font color="#E5E5E5"> initially initializing</font>

605
00:32:55,560 --> 00:33:02,520
the<font color="#E5E5E5"> balance so if we see like an</font>

606
00:32:59,340 --> 00:33:06,030
<font color="#E5E5E5">external call to an external contract</font>

607
00:33:02,520 --> 00:33:10,170
had been met<font color="#E5E5E5"> before that we would just</font>

608
00:33:06,030 --> 00:33:12,149
flag it because some untrusted<font color="#E5E5E5"> call had</font>

609
00:33:10,170 --> 00:33:15,319
<font color="#CCCCCC">been done right</font><font color="#E5E5E5"> before</font>

610
00:33:12,150 --> 00:33:15,319
[Music]

611
00:34:12,340 --> 00:34:15,570
can you see my<font color="#CCCCCC"> screen</font>

612
00:34:34,079 --> 00:34:46,089
so<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> that would be</font><font color="#CCCCCC"> a verbal</font>

613
00:34:36,280 --> 00:34:48,099
contract<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically we would get that</font>

614
00:34:46,089 --> 00:34:54,070
<font color="#E5E5E5">bytecode right and which is going to</font>

615
00:34:48,099 --> 00:34:56,770
pass it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the actual decompiler so on</font>

616
00:34:54,070 --> 00:35:00,640
top<font color="#E5E5E5"> so is like the actual source</font><font color="#CCCCCC"> code</font>

617
00:34:56,770 --> 00:35:03,040
and then<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to pass the byte</font>

618
00:35:00,640 --> 00:35:06,190
code<font color="#E5E5E5"> to the D compiler and that's the</font>

619
00:35:03,040 --> 00:35:09,310
translated cut out of it and we can see

620
00:35:06,190 --> 00:35:10,810
it's highlighting the<font color="#CCCCCC"> vin ability which</font>

621
00:35:09,310 --> 00:35:14,859
is<font color="#CCCCCC"> like the rest condition in the</font>

622
00:35:10,810 --> 00:35:16,029
<font color="#E5E5E5">withdraw balance code which is kind of</font>

623
00:35:14,859 --> 00:35:21,670
neat because it's<font color="#E5E5E5"> pretty straightforward</font>

624
00:35:16,030 --> 00:35:25,240
<font color="#CCCCCC">due to the</font><font color="#E5E5E5"> due to like the complexity of</font>

625
00:35:21,670 --> 00:35:27,670
<font color="#CCCCCC">ethereum which is like quite quite</font>

626
00:35:25,240 --> 00:35:29,589
straightforward<font color="#E5E5E5"> from that aspect since</font>

627
00:35:27,670 --> 00:35:33,819
<font color="#E5E5E5">it's like a</font><font color="#CCCCCC"> VM is not an actual</font><font color="#E5E5E5"> like</font>

628
00:35:29,589 --> 00:35:37,770
entire<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there's basically</font><font color="#CCCCCC"> what</font>

629
00:35:33,819 --> 00:35:40,779
we<font color="#E5E5E5"> just so now the</font><font color="#CCCCCC"> de</font><font color="#E5E5E5"> compiled code and</font>

630
00:35:37,770 --> 00:35:46,150
the vulnerability which is<font color="#E5E5E5"> flag due to</font>

631
00:35:40,780 --> 00:35:49,300
the previous parameters<font color="#CCCCCC"> so far</font><font color="#E5E5E5"> like</font>

632
00:35:46,150 --> 00:35:52,000
three main classes<font color="#CCCCCC"> of valves with</font><font color="#E5E5E5"> s am</font>

633
00:35:49,300 --> 00:35:54,520
smart contracts<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> only like the</font>

634
00:35:52,000 --> 00:35:57,430
case of ethereum<font color="#CCCCCC"> I haven't looked</font><font color="#E5E5E5"> at</font>

635
00:35:54,520 --> 00:36:01,990
other like a platform<font color="#CCCCCC"> like ipredator and</font>

636
00:35:57,430 --> 00:36:06,520
everything<font color="#E5E5E5"> but by definition is</font><font color="#CCCCCC"> like</font>

637
00:36:01,990 --> 00:36:09,220
putting some software tied to to any

638
00:36:06,520 --> 00:36:11,109
like blockchain stuff while people<font color="#E5E5E5"> are</font>

639
00:36:09,220 --> 00:36:12,759
gonna<font color="#E5E5E5"> have to chill on saying that while</font>

640
00:36:11,109 --> 00:36:14,500
we are using blockchain so we're secure

641
00:36:12,760 --> 00:36:16,510
by<font color="#CCCCCC"> default because</font><font color="#E5E5E5"> it's not the case if</font>

642
00:36:14,500 --> 00:36:19,329
you just<font color="#CCCCCC"> add some</font><font color="#E5E5E5"> software layers on</font><font color="#CCCCCC"> top</font>

643
00:36:16,510 --> 00:36:21,339
<font color="#E5E5E5">of that so the first one is</font><font color="#CCCCCC"> uh so the</font>

644
00:36:19,329 --> 00:36:24,990
rest<font color="#CCCCCC"> condition that</font><font color="#E5E5E5"> I was saying that</font>

645
00:36:21,339 --> 00:36:28,270
was used last year<font color="#E5E5E5"> to</font><font color="#CCCCCC"> steal 50</font><font color="#E5E5E5"> million</font>

646
00:36:24,990 --> 00:36:34,060
<font color="#E5E5E5">the second one is the call stack issue</font>

647
00:36:28,270 --> 00:36:38,319
<font color="#CCCCCC">so if you what if you use like all your</font>

648
00:36:34,060 --> 00:36:39,130
stack frames it can<font color="#E5E5E5"> create like some</font>

649
00:36:38,319 --> 00:36:41,200
undies

650
00:36:39,130 --> 00:36:44,650
you need to not even<font color="#E5E5E5"> generate an</font>

651
00:36:41,200 --> 00:36:47,710
exception<font color="#CCCCCC"> and time</font><font color="#E5E5E5"> dependence even</font>

652
00:36:44,650 --> 00:36:50,320
<font color="#CCCCCC">ability</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> it's pretty cool so there</font>

653
00:36:47,710 --> 00:36:52,960
is that guy<font color="#CCCCCC"> as</font><font color="#E5E5E5"> when who published some</font>

654
00:36:50,320 --> 00:36:54,790
example where basically since everything

655
00:36:52,960 --> 00:36:59,020
is on the<font color="#E5E5E5"> blockchain including the data</font>

656
00:36:54,790 --> 00:37:02,680
<font color="#E5E5E5">while you actually have what even in</font>

657
00:36:59,020 --> 00:37:05,500
general<font color="#CCCCCC"> like but by definition</font><font color="#E5E5E5"> like each</font>

658
00:37:02,680 --> 00:37:07,450
<font color="#E5E5E5">blog that would be replicated across</font>

659
00:37:05,500 --> 00:37:10,930
like the<font color="#CCCCCC"> network would also contain all</font>

660
00:37:07,450 --> 00:37:13,870
those<font color="#E5E5E5"> informations so he was giving the</font>

661
00:37:10,930 --> 00:37:17,890
<font color="#CCCCCC">example of a</font><font color="#E5E5E5"> casino so he would be able</font>

662
00:37:13,870 --> 00:37:21,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> predict</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> the random function</font>

663
00:37:17,890 --> 00:37:25,060
because<font color="#E5E5E5"> a not</font><font color="#CCCCCC"> actually randoms are using</font>

664
00:37:21,490 --> 00:37:27,120
like some some information<font color="#E5E5E5"> from the</font>

665
00:37:25,060 --> 00:37:29,890
header of<font color="#CCCCCC"> the actual</font><font color="#E5E5E5"> function and</font>

666
00:37:27,120 --> 00:37:32,140
recently so one of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> elite developer</font>

667
00:37:29,890 --> 00:37:34,420
<font color="#CCCCCC">of solidity</font><font color="#E5E5E5"> compiler just launched</font><font color="#CCCCCC"> a</font>

668
00:37:32,140 --> 00:37:36,759
<font color="#CCCCCC">contest this month called the</font>

669
00:37:34,420 --> 00:37:40,060
underhanded solidity coding contest

670
00:37:36,760 --> 00:37:41,350
<font color="#CCCCCC">which is</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> interesting like is</font><font color="#E5E5E5"> he</font>

671
00:37:40,060 --> 00:37:44,830
going to publish like the results like

672
00:37:41,350 --> 00:37:47,470
next month<font color="#CCCCCC"> but the idea is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> people</font>

673
00:37:44,830 --> 00:37:49,840
<font color="#E5E5E5">to write variable code and to put</font>

674
00:37:47,470 --> 00:37:52,299
backdoors in it but<font color="#E5E5E5"> to</font><font color="#CCCCCC"> add them</font><font color="#E5E5E5"> because</font>

675
00:37:49,840 --> 00:37:55,150
<font color="#E5E5E5">like we saw</font><font color="#CCCCCC"> before especially because of</font>

676
00:37:52,300 --> 00:37:57,370
<font color="#E5E5E5">like that</font><font color="#CCCCCC"> race condition or even like</font>

677
00:37:55,150 --> 00:38:00,340
most of<font color="#E5E5E5"> green abilities that you would</font>

678
00:37:57,370 --> 00:38:03,520
see with smart contracts<font color="#E5E5E5"> the other types</font>

679
00:38:00,340 --> 00:38:07,060
of users<font color="#CCCCCC"> like stack overflow or buffer</font>

680
00:38:03,520 --> 00:38:09,730
overflow like those things<font color="#CCCCCC"> so the old</font>

681
00:38:07,060 --> 00:38:12,400
like idea of the contest is around like

682
00:38:09,730 --> 00:38:14,950
<font color="#CCCCCC">a SEOs which had been pretty hyped over</font>

683
00:38:12,400 --> 00:38:18,130
the past few<font color="#E5E5E5"> months and to put some</font>

684
00:38:14,950 --> 00:38:19,540
<font color="#E5E5E5">backdoors in it because now we're going</font>

685
00:38:18,130 --> 00:38:21,610
<font color="#E5E5E5">to see a lot of people trying to</font><font color="#CCCCCC"> do like</font>

686
00:38:19,540 --> 00:38:22,380
<font color="#CCCCCC">ICS which is like the crypto version of</font>

687
00:38:21,610 --> 00:38:24,790
<font color="#CCCCCC">AI TOS</font>

688
00:38:22,380 --> 00:38:27,070
<font color="#CCCCCC">so they're gonna have to</font><font color="#E5E5E5"> use smart</font>

689
00:38:24,790 --> 00:38:32,500
contracts for that<font color="#CCCCCC"> which is going</font><font color="#E5E5E5"> to be</font>

690
00:38:27,070 --> 00:38:35,680
like quite interesting like the

691
00:38:32,500 --> 00:38:36,790
interesting part about<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 3m per</font><font color="#E5E5E5"> se</font><font color="#CCCCCC"> while</font>

692
00:38:35,680 --> 00:38:39,220
the next<font color="#E5E5E5"> people are still going to be</font>

693
00:38:36,790 --> 00:38:41,980
using<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cerium in five years but the</font>

694
00:38:39,220 --> 00:38:44,859
thing which<font color="#CCCCCC"> I find quite</font><font color="#E5E5E5"> relevant and</font>

695
00:38:41,980 --> 00:38:46,600
very significant with<font color="#E5E5E5"> that is basically</font>

696
00:38:44,860 --> 00:38:48,160
<font color="#E5E5E5">the other one who introduced that</font>

697
00:38:46,600 --> 00:38:52,600
concept of<font color="#E5E5E5"> software's</font>

698
00:38:48,160 --> 00:38:53,319
<font color="#E5E5E5">on top of blockchain what</font><font color="#CCCCCC"> is by</font>

699
00:38:52,600 --> 00:38:55,359
definition

700
00:38:53,319 --> 00:38:57,430
it's a good idea<font color="#E5E5E5"> nor like people of</font>

701
00:38:55,359 --> 00:38:58,839
various opinions right especially<font color="#E5E5E5"> since</font>

702
00:38:57,430 --> 00:39:01,569
you cannot<font color="#E5E5E5"> really like</font><font color="#CCCCCC"> patch</font>

703
00:38:58,839 --> 00:39:06,430
<font color="#CCCCCC">applications as easily as regular</font>

704
00:39:01,569 --> 00:39:08,140
software<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> see</font>

705
00:39:06,430 --> 00:39:10,479
like more<font color="#CCCCCC"> and more of that</font><font color="#E5E5E5"> and it</font>

706
00:39:08,140 --> 00:39:12,788
already started<font color="#E5E5E5"> because not</font><font color="#CCCCCC"> everybody's</font>

707
00:39:10,479 --> 00:39:14,468
<font color="#CCCCCC">talked like</font><font color="#E5E5E5"> especially when it comes to</font>

708
00:39:12,789 --> 00:39:17,219
enterprise blockchain more and more

709
00:39:14,469 --> 00:39:20,229
<font color="#CCCCCC">people are talking about</font><font color="#E5E5E5"> smart contracts</font>

710
00:39:17,219 --> 00:39:21,759
like I was explaining<font color="#E5E5E5"> before everybody</font>

711
00:39:20,229 --> 00:39:23,140
was talking<font color="#CCCCCC"> about it but</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> time I</font>

712
00:39:21,759 --> 00:39:25,029
was asking what's<font color="#CCCCCC"> a smart</font><font color="#E5E5E5"> contract</font>

713
00:39:23,140 --> 00:39:26,558
nobody like really<font color="#E5E5E5"> new to answer me</font>

714
00:39:25,029 --> 00:39:29,259
that's<font color="#E5E5E5"> all I ended up like looking at a</font>

715
00:39:26,559 --> 00:39:34,239
<font color="#CCCCCC">theorem and</font><font color="#E5E5E5"> discover the</font><font color="#CCCCCC"> of an actual</font>

716
00:39:29,259 --> 00:39:35,440
<font color="#E5E5E5">virtual machine so poor</font><font color="#CCCCCC"> ZT I'm going to</font>

717
00:39:34,239 --> 00:39:37,150
release that<font color="#E5E5E5"> is going to be open</font><font color="#CCCCCC"> source</font>

718
00:39:35,440 --> 00:39:41,109
I'm just going to<font color="#E5E5E5"> like release it at the</font>

719
00:39:37,150 --> 00:39:43,539
end of the month<font color="#E5E5E5"> when</font><font color="#CCCCCC"> it comes to like</font><font color="#E5E5E5"> a</font>

720
00:39:41,109 --> 00:39:45,430
<font color="#CCCCCC">cilium security and</font><font color="#E5E5E5"> Lexmark contract</font>

721
00:39:43,539 --> 00:39:47,680
security there<font color="#CCCCCC"> is that connective</font><font color="#E5E5E5"> a</font>

722
00:39:45,430 --> 00:39:51,009
growing community that happened over the

723
00:39:47,680 --> 00:39:55,419
past few months<font color="#CCCCCC"> there is also like a</font>

724
00:39:51,009 --> 00:39:57,549
tool<font color="#E5E5E5"> which does also contract analysis</font>

725
00:39:55,420 --> 00:40:01,479
called<font color="#CCCCCC"> Oriente that had been released</font>

726
00:39:57,549 --> 00:40:03,339
<font color="#E5E5E5">also like recently</font><font color="#CCCCCC"> like I was saying I'm</font>

727
00:40:01,479 --> 00:40:05,468
personally looking forward like via

728
00:40:03,339 --> 00:40:08,319
coding contest<font color="#CCCCCC"> results</font><font color="#E5E5E5"> to see what type</font>

729
00:40:05,469 --> 00:40:10,599
of vulnerabilities people are<font color="#E5E5E5"> gonna be</font>

730
00:40:08,319 --> 00:40:13,529
able<font color="#CCCCCC"> to a demonstrate or if new classes</font>

731
00:40:10,599 --> 00:40:16,869
of<font color="#E5E5E5"> bugs are going to be discovered and</font>

732
00:40:13,529 --> 00:40:20,019
we saw like some project like<font color="#E5E5E5"> quorum</font>

733
00:40:16,869 --> 00:40:23,109
which is JP morgan<font color="#CCCCCC"> fog of aetherium</font>

734
00:40:20,019 --> 00:40:27,519
adding a previous layer to blockchain

735
00:40:23,109 --> 00:40:29,348
stuff<font color="#E5E5E5"> like i was saying now like you</font>

736
00:40:27,519 --> 00:40:31,238
<font color="#E5E5E5">basically have a copy of the virtual</font>

737
00:40:29,349 --> 00:40:33,339
machine state all over<font color="#CCCCCC"> the network</font><font color="#E5E5E5"> right</font>

738
00:40:31,239 --> 00:40:37,180
so<font color="#E5E5E5"> nothing is really prevent everything</font>

739
00:40:33,339 --> 00:40:38,799
is public<font color="#E5E5E5"> which</font><font color="#CCCCCC"> again like if you're</font><font color="#E5E5E5"> a</font>

740
00:40:37,180 --> 00:40:42,219
software developer<font color="#E5E5E5"> you're like why you</font>

741
00:40:38,799 --> 00:40:44,529
know<font color="#E5E5E5"> you don't really want that so JP</font>

742
00:40:42,219 --> 00:40:47,079
<font color="#E5E5E5">Morgan like added one more</font><font color="#CCCCCC"> layer to that</font>

743
00:40:44,529 --> 00:40:52,539
<font color="#E5E5E5">to be able to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> private and encrypted</font>

744
00:40:47,079 --> 00:40:54,670
variables inside their data<font color="#E5E5E5"> and from</font><font color="#CCCCCC"> a</font>

745
00:40:52,539 --> 00:40:55,989
<font color="#CCCCCC">lower-level point of view like</font><font color="#E5E5E5"> I was</font>

746
00:40:54,670 --> 00:40:57,729
saying it's basically<font color="#E5E5E5"> a</font><font color="#CCCCCC"> virtual machine</font>

747
00:40:55,989 --> 00:40:59,920
<font color="#E5E5E5">so we have seen a cranial</font><font color="#CCCCCC"> build</font>

748
00:40:57,729 --> 00:41:04,959
<font color="#CCCCCC">abilities in queueing you even in</font><font color="#E5E5E5"> VMware</font>

749
00:40:59,920 --> 00:41:07,089
<font color="#E5E5E5">and most of AI providers</font><font color="#CCCCCC"> so the so like</font>

750
00:41:04,959 --> 00:41:09,098
there is no<font color="#E5E5E5"> reason to not see</font>

751
00:41:07,089 --> 00:41:12,609
something similar<font color="#E5E5E5"> happening with areum</font>

752
00:41:09,099 --> 00:41:14,469
VM and like the<font color="#CCCCCC"> only thing</font><font color="#E5E5E5"> that would</font>

753
00:41:12,609 --> 00:41:16,390
save them is<font color="#E5E5E5"> basically that the VM is</font>

754
00:41:14,469 --> 00:41:18,489
<font color="#E5E5E5">quite small it has</font><font color="#CCCCCC"> a limited set of</font>

755
00:41:16,390 --> 00:41:20,200
instructions<font color="#E5E5E5"> but you know it goes both</font>

756
00:41:18,489 --> 00:41:22,329
ways you know<font color="#E5E5E5"> like kind of claiming is</font>

757
00:41:20,200 --> 00:41:24,160
like pretty<font color="#CCCCCC"> Sandberg's blah blah but we</font>

758
00:41:22,329 --> 00:41:30,460
know what happens<font color="#CCCCCC"> to our sandbox train</font>

759
00:41:24,160 --> 00:41:32,499
abilities right but the interesting

760
00:41:30,460 --> 00:41:37,150
thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I discovered</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> few weeks ago</font>

761
00:41:32,499 --> 00:41:39,189
<font color="#E5E5E5">is basically</font><font color="#CCCCCC"> ethereum is planning to</font>

762
00:41:37,150 --> 00:41:44,140
replace<font color="#E5E5E5"> their SEM Virtual Machine by</font>

763
00:41:39,190 --> 00:41:46,380
next year<font color="#E5E5E5"> with webassembly</font><font color="#CCCCCC"> so first I</font>

764
00:41:44,140 --> 00:41:48,729
was<font color="#CCCCCC"> like oh what the red is webassembly</font>

765
00:41:46,380 --> 00:41:51,759
and then I was like<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> mint is pretty</font>

766
00:41:48,729 --> 00:41:53,439
<font color="#E5E5E5">nuts so so they're planning to do that</font>

767
00:41:51,759 --> 00:41:57,400
by next<font color="#E5E5E5"> year but basically like</font>

768
00:41:53,440 --> 00:41:59,680
webassembly outside of<font color="#CCCCCC"> aetherium is</font><font color="#E5E5E5"> well</font>

769
00:41:57,400 --> 00:42:02,950
allows<font color="#CCCCCC"> you to run a given like C++</font>

770
00:41:59,680 --> 00:42:05,200
application in JavaScript<font color="#E5E5E5"> like one of my</font>

771
00:42:02,950 --> 00:42:07,569
engineers send me an<font color="#CCCCCC"> actual like web</font>

772
00:42:05,200 --> 00:42:09,279
compiler where you give him a give like

773
00:42:07,569 --> 00:42:12,009
C code and<font color="#E5E5E5"> it's going to translate it</font>

774
00:42:09,279 --> 00:42:16,660
<font color="#E5E5E5">into like assembly and lunch it like</font>

775
00:42:12,009 --> 00:42:18,789
locally<font color="#CCCCCC"> well which</font><font color="#E5E5E5"> is pretty neat one</font>

776
00:42:16,660 --> 00:42:21,339
that's pretty like crazy<font color="#CCCCCC"> formal attacks</font>

777
00:42:18,789 --> 00:42:23,440
your first point<font color="#E5E5E5"> of view because so now</font>

778
00:42:21,339 --> 00:42:25,328
like<font color="#E5E5E5"> you have like the edge chakra</font><font color="#CCCCCC"> and</font>

779
00:42:23,440 --> 00:42:31,509
<font color="#E5E5E5">spider monkey actually implemented</font>

780
00:42:25,329 --> 00:42:34,869
webassembly<font color="#CCCCCC"> so</font><font color="#E5E5E5"> ACM is going to use the</font>

781
00:42:31,509 --> 00:42:37,299
same engine for like web assembly and

782
00:42:34,869 --> 00:42:40,569
it's going<font color="#E5E5E5"> to replace</font><font color="#CCCCCC"> their like virtual</font>

783
00:42:37,299 --> 00:42:42,549
machine<font color="#E5E5E5"> so from the a3 on perspective</font><font color="#CCCCCC"> I</font>

784
00:42:40,569 --> 00:42:45,308
guess<font color="#CCCCCC"> it's good because going</font><font color="#E5E5E5"> to have a</font>

785
00:42:42,549 --> 00:42:47,380
larger community<font color="#CCCCCC"> of people</font><font color="#E5E5E5"> working on</font><font color="#CCCCCC"> it</font>

786
00:42:45,309 --> 00:42:53,259
but on<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of that you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> have a more</font>

787
00:42:47,380 --> 00:42:57,519
<font color="#CCCCCC">powerful like virtual machine</font><font color="#E5E5E5"> but then</font>

788
00:42:53,259 --> 00:43:00,190
again<font color="#E5E5E5"> like yeah like executing like C++</font>

789
00:42:57,519 --> 00:43:02,140
application in a your<font color="#E5E5E5"> JavaScript engine</font>

790
00:43:00,190 --> 00:43:04,630
you know I don't<font color="#E5E5E5"> really</font><font color="#CCCCCC"> know what what's</font>

791
00:43:02,140 --> 00:43:07,150
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> come out of it</font><font color="#CCCCCC"> when it comes to</font>

792
00:43:04,630 --> 00:43:10,599
the a CRM implementation of that<font color="#E5E5E5"> so you</font>

793
00:43:07,150 --> 00:43:14,460
at the end the<font color="#E5E5E5"> ewok</font><font color="#CCCCCC"> contains</font><font color="#E5E5E5"> all the</font>

794
00:43:10,599 --> 00:43:17,499
design<font color="#CCCCCC"> information regarding to it and</font>

795
00:43:14,460 --> 00:43:19,210
yes<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> what they say so if you go</font>

796
00:43:17,499 --> 00:43:20,290
<font color="#E5E5E5">to that address actually you can see the</font>

797
00:43:19,210 --> 00:43:23,590
actual

798
00:43:20,290 --> 00:43:26,770
compiler was talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> like</font>

799
00:43:23,590 --> 00:43:28,750
a pretty<font color="#E5E5E5"> cool demonstration from</font><font color="#CCCCCC"> a like</font>

800
00:43:26,770 --> 00:43:30,730
software engineering point of<font color="#CCCCCC"> view but</font>

801
00:43:28,750 --> 00:43:34,300
<font color="#CCCCCC">some a security point of view it</font><font color="#E5E5E5"> raises</font>

802
00:43:30,730 --> 00:43:38,380
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of questions so they're planning</font>

803
00:43:34,300 --> 00:43:39,820
to<font color="#E5E5E5"> do something</font><font color="#CCCCCC"> similar</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> SEM and</font><font color="#E5E5E5"> so</font>

804
00:43:38,380 --> 00:43:41,500
like I was<font color="#E5E5E5"> saying</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> if you would</font>

805
00:43:39,820 --> 00:43:43,690
write<font color="#CCCCCC"> a</font><font color="#E5E5E5"> smart contract</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> that would be</font>

806
00:43:41,500 --> 00:43:47,200
<font color="#CCCCCC">basically like JavaScript code</font><font color="#E5E5E5"> that you</font>

807
00:43:43,690 --> 00:43:50,170
would compile with solidity<font color="#E5E5E5"> and that so</font>

808
00:43:47,200 --> 00:43:53,259
for<font color="#E5E5E5"> next year once they have the actual</font>

809
00:43:50,170 --> 00:43:55,270
port voltage of the web assembly for

810
00:43:53,260 --> 00:43:57,600
<font color="#CCCCCC">etherium ziggo now so give you the</font>

811
00:43:55,270 --> 00:44:01,540
possibility<font color="#CCCCCC"> to possibility to write</font>

812
00:43:57,600 --> 00:44:02,980
contract in<font color="#CCCCCC"> C but those are like C</font>

813
00:44:01,540 --> 00:44:06,100
applications you will<font color="#E5E5E5"> not even</font><font color="#CCCCCC"> be able</font>

814
00:44:02,980 --> 00:44:07,390
<font color="#E5E5E5">to</font><font color="#CCCCCC"> patch so</font><font color="#E5E5E5"> like an S I'm missing</font>

815
00:44:06,100 --> 00:44:10,240
something<font color="#CCCCCC"> you know I asked a bunch of</font>

816
00:44:07,390 --> 00:44:11,589
<font color="#CCCCCC">people like but that's pretty</font><font color="#E5E5E5"> that's</font>

817
00:44:10,240 --> 00:44:13,600
pretty<font color="#E5E5E5"> crazy no it does not make any</font>

818
00:44:11,590 --> 00:44:16,900
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> from a software design point of</font>

819
00:44:13,600 --> 00:44:20,049
<font color="#E5E5E5">view</font><font color="#CCCCCC"> and those are</font><font color="#E5E5E5"> like some references</font>

820
00:44:16,900 --> 00:44:22,500
if you want to read more about<font color="#E5E5E5"> it any</font>

821
00:44:20,050 --> 00:44:22,500
questions

822
00:44:29,010 --> 00:44:38,000
well bitcoins<font color="#E5E5E5"> okay well thanks</font>

823
00:44:38,640 --> 00:44:44,759
[Applause]

