1
00:00:00,800 --> 00:00:07,500
morning and welcome<font color="#CCCCCC"> to</font><font color="#E5E5E5"> our talk found in</font>

2
00:00:04,500 --> 00:00:12,059
translation<font color="#CCCCCC"> from subtitles to remote</font>

3
00:00:07,500 --> 00:00:16,160
code execution<font color="#E5E5E5"> we are a American memory</font>

4
00:00:12,059 --> 00:00:19,680
and security researchers at checkpoint

5
00:00:16,160 --> 00:00:23,910
and what we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> present today is</font>

6
00:00:19,680 --> 00:00:26,340
a new<font color="#CCCCCC"> concept</font><font color="#E5E5E5"> a new attack vector</font>

7
00:00:23,910 --> 00:00:29,730
we call it<font color="#E5E5E5"> subtitles drive-by attack and</font>

8
00:00:26,340 --> 00:00:32,399
it's important<font color="#E5E5E5"> to remember that this</font><font color="#CCCCCC"> is</font>

9
00:00:29,730 --> 00:00:36,300
not<font color="#CCCCCC"> about the vulnerabilities</font><font color="#E5E5E5"> even</font>

10
00:00:32,399 --> 00:00:39,690
though we have plenty of<font color="#E5E5E5"> those this is</font>

11
00:00:36,300 --> 00:00:41,899
<font color="#CCCCCC">the</font><font color="#E5E5E5"> notion that subtitles are considered</font>

12
00:00:39,690 --> 00:00:41,899
dangerous

13
00:00:42,020 --> 00:00:47,129
<font color="#CCCCCC">ok so let's back up a little</font><font color="#E5E5E5"> bit this</font><font color="#CCCCCC"> is</font>

14
00:00:45,090 --> 00:00:50,579
<font color="#E5E5E5">how we</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> to watch movies at the local</font>

15
00:00:47,129 --> 00:00:53,120
cinema<font color="#CCCCCC"> but as technology</font><font color="#E5E5E5"> evolved the</font>

16
00:00:50,579 --> 00:00:58,559
internet got faster<font color="#CCCCCC"> and we got lazier</font>

17
00:00:53,120 --> 00:01:02,129
<font color="#E5E5E5">movies entered our living rooms it could</font>

18
00:00:58,559 --> 00:01:04,559
be a laptop<font color="#CCCCCC"> Smart</font><font color="#E5E5E5"> TV</font><font color="#CCCCCC"> Raspberry Pi or an</font>

19
00:01:02,129 --> 00:01:08,789
actual<font color="#CCCCCC"> Media Center</font><font color="#E5E5E5"> the streaming</font>

20
00:01:04,559 --> 00:01:10,560
options are endless<font color="#E5E5E5"> design which</font><font color="#CCCCCC"> ease of</font>

21
00:01:08,790 --> 00:01:11,310
using<font color="#CCCCCC"> mind</font><font color="#E5E5E5"> they take care of everything</font>

22
00:01:10,560 --> 00:01:13,590
<font color="#CCCCCC">for</font><font color="#E5E5E5"> us</font>

23
00:01:11,310 --> 00:01:17,780
<font color="#CCCCCC">they fool all the metadata for us</font><font color="#E5E5E5"> the</font>

24
00:01:13,590 --> 00:01:22,200
trailers the thumbnails<font color="#E5E5E5"> plot info and</font>

25
00:01:17,780 --> 00:01:25,320
subtitles yeah<font color="#CCCCCC"> it's a thing</font><font color="#E5E5E5"> these are</font>

26
00:01:22,200 --> 00:01:27,330
the<font color="#CCCCCC"> statistics</font><font color="#E5E5E5"> of daily downloads from</font>

27
00:01:25,320 --> 00:01:30,720
one of the main repository<font color="#E5E5E5"> open</font>

28
00:01:27,330 --> 00:01:33,658
subtitles<font color="#E5E5E5"> ranging from</font><font color="#CCCCCC"> 7 to 10 million</font>

29
00:01:30,720 --> 00:01:37,070
<font color="#E5E5E5">daily downloads</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> definitely a thing</font>

30
00:01:33,659 --> 00:01:39,479
<font color="#CCCCCC">and</font><font color="#E5E5E5"> obviously subtitles are used for</font>

31
00:01:37,070 --> 00:01:43,470
non-native<font color="#E5E5E5"> English speakers like</font>

32
00:01:39,479 --> 00:01:45,509
ourselves<font color="#E5E5E5"> but not only and to convey the</font>

33
00:01:43,470 --> 00:01:49,170
necessity of subtitles<font color="#E5E5E5"> we'll use the</font>

34
00:01:45,509 --> 00:01:52,229
power of<font color="#E5E5E5"> memes they're used when</font>

35
00:01:49,170 --> 00:01:54,840
watching<font color="#E5E5E5"> foreign films or TV shows such</font>

36
00:01:52,229 --> 00:01:55,729
<font color="#CCCCCC">as the anime or a</font><font color="#E5E5E5"> pretentious French</font>

37
00:01:54,840 --> 00:01:58,649
film

38
00:01:55,729 --> 00:02:01,259
they're used for convenience<font color="#E5E5E5"> in case</font>

39
00:01:58,649 --> 00:02:05,159
there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> any sword or editorial sound</font>

40
00:02:01,259 --> 00:02:07,969
limitations<font color="#E5E5E5"> and they're used in Guy</font>

41
00:02:05,159 --> 00:02:07,969
Ritchie's<font color="#CCCCCC"> movies</font>

42
00:02:08,330 --> 00:02:14,010
sometimes they also provide critical

43
00:02:11,610 --> 00:02:17,490
<font color="#E5E5E5">notes for the hearing</font><font color="#CCCCCC"> impaired</font>

44
00:02:14,010 --> 00:02:21,420
as you can see a but they usually<font color="#E5E5E5"> have a</font>

45
00:02:17,490 --> 00:02:26,040
lot<font color="#CCCCCC"> more</font><font color="#E5E5E5"> than just text display let's</font>

46
00:02:21,420 --> 00:02:29,819
explore the a subtitles landscape we are

47
00:02:26,040 --> 00:02:32,370
now<font color="#CCCCCC"> sfe subject</font><font color="#E5E5E5"> X it supports very basic</font>

48
00:02:29,819 --> 00:02:36,720
set of HTML<font color="#E5E5E5"> tags such as bold italic</font>

49
00:02:32,370 --> 00:02:40,680
<font color="#E5E5E5">underline in front there's also the sub</font>

50
00:02:36,720 --> 00:02:45,019
format stands for sub view<font color="#CCCCCC"> L it supports</font>

51
00:02:40,680 --> 00:02:45,019
<font color="#CCCCCC">basic formatting like culligan phones</font><font color="#E5E5E5"> a</font>

52
00:02:45,739 --> 00:02:57,620
but sometimes sub<font color="#E5E5E5"> actually stands for MP</font>

53
00:02:49,650 --> 00:03:01,410
sub that supports<font color="#E5E5E5"> none of the above and</font>

54
00:02:57,620 --> 00:03:04,709
a different<font color="#CCCCCC"> occasion sub can also could</font>

55
00:03:01,410 --> 00:03:07,290
a<font color="#CCCCCC"> stand</font><font color="#E5E5E5"> for micro DVD subtitles these</font>

56
00:03:04,709 --> 00:03:09,750
sub supports format in color schemes<font color="#CCCCCC"> a</font>

57
00:03:07,290 --> 00:03:13,290
<font color="#E5E5E5">font configuration subtitles location</font>

58
00:03:09,750 --> 00:03:15,810
and different character sets<font color="#E5E5E5"> another</font>

59
00:03:13,290 --> 00:03:19,078
common format is the substation alpha

60
00:03:15,810 --> 00:03:21,510
<font color="#E5E5E5">it's a bit more sophisticated</font><font color="#CCCCCC"> it's</font>

61
00:03:19,079 --> 00:03:24,120
<font color="#E5E5E5">supposed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> predefined steinem's fonts</font>

62
00:03:21,510 --> 00:03:28,070
complex color palettes<font color="#E5E5E5"> outline shadow</font>

63
00:03:24,120 --> 00:03:31,769
alignment marginl falafel<font color="#E5E5E5"> and encoding</font>

64
00:03:28,070 --> 00:03:36,390
but it gets even<font color="#CCCCCC"> more impressive as we</font>

65
00:03:31,769 --> 00:03:38,760
move on to advanced substation alpha<font color="#CCCCCC"> ESS</font>

66
00:03:36,390 --> 00:03:42,500
contains all the functionality of SSA

67
00:03:38,760 --> 00:03:42,500
with some interesting<font color="#E5E5E5"> additions</font>

68
00:03:44,520 --> 00:03:54,010
the SS format supports scaling angular

69
00:03:49,720 --> 00:03:58,660
shifting binary image embedding binary

70
00:03:54,010 --> 00:04:01,120
font embedding drawing here we actually

71
00:03:58,660 --> 00:04:06,970
<font color="#E5E5E5">draw a small dinosaur as part of the</font>

72
00:04:01,120 --> 00:04:10,980
subtitles and the specification<font color="#E5E5E5"> even</font>

73
00:04:06,970 --> 00:04:10,980
mentions<font color="#E5E5E5"> a system</font><font color="#CCCCCC"> comments</font>

74
00:04:11,010 --> 00:04:17,079
it allows<font color="#E5E5E5"> execute executing a specified</font>

75
00:04:14,440 --> 00:04:19,209
program as<font color="#E5E5E5"> background tasks and we truly</font>

76
00:04:17,079 --> 00:04:23,400
<font color="#E5E5E5">hope no one ever implemented this</font>

77
00:04:19,209 --> 00:04:26,710
bizarre feature so vector subtitles

78
00:04:23,400 --> 00:04:31,359
there are actually shitload of subtitle

79
00:04:26,710 --> 00:04:34,450
formats<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ordinal</font><font color="#E5E5E5"> during</font><font color="#CCCCCC"> our research we</font>

80
00:04:31,360 --> 00:04:37,240
encountered<font color="#E5E5E5"> more than 25 subtitle</font>

81
00:04:34,450 --> 00:04:40,810
formats summer binary<font color="#CCCCCC"> salmon textual</font>

82
00:04:37,240 --> 00:04:43,570
none are well documented and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> asked</font>

83
00:04:40,810 --> 00:04:48,580
ourselves<font color="#CCCCCC"> can the unregulated</font><font color="#E5E5E5"> nature of</font>

84
00:04:43,570 --> 00:04:50,680
<font color="#CCCCCC">these</font><font color="#E5E5E5"> subtitle madness be exploited so</font>

85
00:04:48,580 --> 00:04:53,140
our first<font color="#CCCCCC"> target was</font><font color="#E5E5E5"> the most notorious</font>

86
00:04:50,680 --> 00:04:55,990
<font color="#CCCCCC">swimming platform</font><font color="#E5E5E5"> we know</font><font color="#CCCCCC"> Popkin time</font>

87
00:04:53,140 --> 00:04:58,030
and the<font color="#CCCCCC"> multi-platform</font><font color="#E5E5E5"> Netflix for</font>

88
00:04:55,990 --> 00:05:00,669
<font color="#E5E5E5">pilots integrated a deadly combination</font>

89
00:04:58,030 --> 00:05:03,179
of a BitTorrent client<font color="#E5E5E5"> a video player</font>

90
00:05:00,669 --> 00:05:06,010
and endless<font color="#E5E5E5"> skyping capabilities</font>

91
00:05:03,180 --> 00:05:08,680
<font color="#E5E5E5">they're all packed under a very friendly</font>

92
00:05:06,010 --> 00:05:11,260
graphical user interface<font color="#E5E5E5"> even my mother</font>

93
00:05:08,680 --> 00:05:14,800
<font color="#E5E5E5">uses it which is a key</font><font color="#CCCCCC"> lead in every</font>

94
00:05:11,260 --> 00:05:17,710
research we conduct the beautiful web

95
00:05:14,800 --> 00:05:20,710
<font color="#E5E5E5">Keys a is packed with</font><font color="#CCCCCC"> movie</font><font color="#E5E5E5"> information</font>

96
00:05:17,710 --> 00:05:23,080
and<font color="#E5E5E5"> metadata it presents trailers plot</font>

97
00:05:20,710 --> 00:05:26,560
summaries<font color="#CCCCCC"> caste information travel</font>

98
00:05:23,080 --> 00:05:28,990
photos IMDB ratings in much more but the

99
00:05:26,560 --> 00:05:31,450
way it doesn't so elegantly beautiful is

100
00:05:28,990 --> 00:05:36,520
using a platform<font color="#E5E5E5"> that supports</font><font color="#CCCCCC"> web</font>

101
00:05:31,450 --> 00:05:40,690
technologies technologies<font color="#E5E5E5"> as html5 css3</font>

102
00:05:36,520 --> 00:05:45,370
<font color="#E5E5E5">and JavaScript</font><font color="#CCCCCC"> built on top of a node a</font>

103
00:05:40,690 --> 00:05:48,219
<font color="#E5E5E5">no js' region the two main frameworks</font>

104
00:05:45,370 --> 00:05:51,850
that allow such beauty are mwj s and

105
00:05:48,220 --> 00:05:54,250
electron both<font color="#CCCCCC"> a</font><font color="#E5E5E5"> multi-platform</font>

106
00:05:51,850 --> 00:05:56,700
utilizing chromium and supports external

107
00:05:54,250 --> 00:05:56,700
<font color="#E5E5E5">plugins</font>

108
00:05:56,830 --> 00:06:02,859
<font color="#E5E5E5">okay so we know they look good</font><font color="#CCCCCC"> but are</font>

109
00:05:59,949 --> 00:06:04,780
they vulnerable to anything<font color="#E5E5E5"> these</font>

110
00:06:02,860 --> 00:06:06,099
underlying<font color="#E5E5E5"> technologies are very</font>

111
00:06:04,780 --> 00:06:08,289
interesting form<font color="#E5E5E5"> and attackers</font>

112
00:06:06,099 --> 00:06:10,750
perspective<font color="#CCCCCC"> especially because</font><font color="#E5E5E5"> what</font>

113
00:06:08,289 --> 00:06:12,729
might be<font color="#E5E5E5"> considered as as a weak</font>

114
00:06:10,750 --> 00:06:16,659
vulnerability at least in bug bounty

115
00:06:12,729 --> 00:06:21,550
programs such as<font color="#E5E5E5"> XSS can actually result</font>

116
00:06:16,659 --> 00:06:24,759
<font color="#E5E5E5">in remote code execution because no GF</font>

117
00:06:21,550 --> 00:06:28,060
is essentially a JavaScript engine<font color="#E5E5E5"> with</font>

118
00:06:24,759 --> 00:06:30,490
server-side capabilities<font color="#E5E5E5"> all you need to</font>

119
00:06:28,060 --> 00:06:34,960
do in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> denote GS in order to a</font>

120
00:06:30,490 --> 00:06:37,569
<font color="#CCCCCC">proper calc</font><font color="#E5E5E5"> is use this code it imports</font>

121
00:06:34,960 --> 00:06:40,628
<font color="#CCCCCC">the a child process library and uses its</font>

122
00:06:37,569 --> 00:06:43,180
<font color="#CCCCCC">exec function with calc as the arguments</font>

123
00:06:40,629 --> 00:06:45,849
we'll talk about<font color="#E5E5E5"> this in a minute but</font>

124
00:06:43,180 --> 00:06:46,440
<font color="#E5E5E5">back to</font><font color="#CCCCCC"> Pokemon time to</font><font color="#E5E5E5"> make life</font><font color="#CCCCCC"> even</font>

125
00:06:45,849 --> 00:06:48,280
easier

126
00:06:46,440 --> 00:06:50,830
subtitles<font color="#E5E5E5"> are being fetched</font>

127
00:06:48,280 --> 00:06:52,919
automatically for both the viewer

128
00:06:50,830 --> 00:06:56,050
convenience and the attacker<font color="#CCCCCC"> and the</font>

129
00:06:52,919 --> 00:06:59,500
<font color="#CCCCCC">question remains</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> this behavior be</font>

130
00:06:56,050 --> 00:07:02,830
exploited behind the scenes<font color="#CCCCCC"> popcorntime</font>

131
00:06:59,500 --> 00:07:05,800
<font color="#E5E5E5">uses open subtitles as the</font><font color="#CCCCCC"> sole subtitle</font>

132
00:07:02,830 --> 00:07:08,650
repository<font color="#E5E5E5"> with over 4 million entries</font>

133
00:07:05,800 --> 00:07:11,740
in a very convenient<font color="#CCCCCC"> API</font><font color="#E5E5E5"> it is extremely</font>

134
00:07:08,650 --> 00:07:14,710
popular<font color="#E5E5E5"> repository this API does not</font>

135
00:07:11,740 --> 00:07:17,050
<font color="#E5E5E5">only allow a so easy search and download</font>

136
00:07:14,710 --> 00:07:19,989
of subtitles<font color="#E5E5E5"> it also has a</font>

137
00:07:17,050 --> 00:07:22,750
recommendation<font color="#E5E5E5"> algorithm 12 you find the</font>

138
00:07:19,990 --> 00:07:25,810
right file for you<font color="#E5E5E5"> we'll dive deeper</font>

139
00:07:22,750 --> 00:07:28,539
<font color="#CCCCCC">into that into that</font><font color="#E5E5E5"> process a bit later</font>

140
00:07:25,810 --> 00:07:30,360
as it turns out to be<font color="#CCCCCC"> a key step in our</font>

141
00:07:28,539 --> 00:07:33,279
<font color="#E5E5E5">strive for world domination</font>

142
00:07:30,360 --> 00:07:35,560
so gaining some knowledge about local

143
00:07:33,279 --> 00:07:38,830
time let's see how the subtitles make

144
00:07:35,560 --> 00:07:40,539
the way from<font color="#E5E5E5"> downloads to the screen our</font>

145
00:07:38,830 --> 00:07:42,849
journey begins<font color="#E5E5E5"> as</font><font color="#CCCCCC"> soon as</font><font color="#E5E5E5"> the user</font>

146
00:07:40,539 --> 00:07:44,650
starts playing a<font color="#CCCCCC"> movie popcorn</font><font color="#E5E5E5"> time</font>

147
00:07:42,849 --> 00:07:47,319
download the subtitle<font color="#CCCCCC"> and converts</font>

148
00:07:44,650 --> 00:07:51,128
<font color="#CCCCCC">whatever subtitle format it gets to an</font>

149
00:07:47,319 --> 00:07:53,379
<font color="#E5E5E5">SLT</font><font color="#CCCCCC"> time coded after the</font><font color="#E5E5E5"> conversion it</font>

150
00:07:51,129 --> 00:07:56,279
is<font color="#CCCCCC"> passed to</font><font color="#E5E5E5"> the update display function</font>

151
00:07:53,379 --> 00:07:59,979
this function will create an HTML span

152
00:07:56,279 --> 00:08:02,680
containing the subtitle text<font color="#E5E5E5"> now since</font>

153
00:07:59,979 --> 00:08:05,469
the<font color="#E5E5E5"> SLT format supports HTML tags and</font>

154
00:08:02,680 --> 00:08:07,630
this is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> WebKit they</font><font color="#E5E5E5"> didn't need to</font>

155
00:08:05,469 --> 00:08:10,480
<font color="#E5E5E5">make any implementation of HTML support</font>

156
00:08:07,630 --> 00:08:13,690
<font color="#E5E5E5">for the subtitles it is obviously built</font>

157
00:08:10,480 --> 00:08:16,720
HTML<font color="#E5E5E5"> to its</font><font color="#CCCCCC"> core</font><font color="#E5E5E5"> but perhaps we can</font>

158
00:08:13,690 --> 00:08:19,900
write<font color="#E5E5E5"> other things than HTML like</font>

159
00:08:16,720 --> 00:08:24,070
JavaScript<font color="#E5E5E5"> and sanitize JavaScript</font>

160
00:08:19,900 --> 00:08:26,229
<font color="#E5E5E5">within a node WebKit application let's</font>

161
00:08:24,070 --> 00:08:29,530
try this simple<font color="#E5E5E5"> one this is how a</font>

162
00:08:26,230 --> 00:08:33,190
standard<font color="#E5E5E5"> SLT file looks like we already</font>

163
00:08:29,530 --> 00:08:37,539
<font color="#E5E5E5">know it supports HTML tags</font><font color="#CCCCCC"> but what if</font>

164
00:08:33,190 --> 00:08:40,630
we try<font color="#E5E5E5"> to load an image that doesn't</font>

165
00:08:37,539 --> 00:08:44,709
exist<font color="#CCCCCC"> and</font><font color="#E5E5E5"> provide it with the</font><font color="#CCCCCC"> anello</font>

166
00:08:40,630 --> 00:08:47,590
attribute XSS<font color="#E5E5E5"> 101 we know the</font><font color="#CCCCCC"> owner</font>

167
00:08:44,710 --> 00:08:51,700
<font color="#CCCCCC">attributes</font><font color="#E5E5E5"> Canada and JavaScript so</font>

168
00:08:47,590 --> 00:08:53,770
<font color="#CCCCCC">bless</font><font color="#E5E5E5"> yourself yes we got our first</font>

169
00:08:51,700 --> 00:08:57,130
vulnerability for<font color="#E5E5E5"> today we managed to</font>

170
00:08:53,770 --> 00:08:59,530
make subtitles<font color="#E5E5E5"> pop a message box inside</font>

171
00:08:57,130 --> 00:09:04,110
poppelen time<font color="#E5E5E5"> but that's not good enough</font>

172
00:08:59,530 --> 00:09:04,110
<font color="#E5E5E5">let's try something a bit more advanced</font>

173
00:09:05,220 --> 00:09:12,010
what if instead of<font color="#CCCCCC"> DLL we write</font><font color="#E5E5E5"> a code</font>

174
00:09:09,280 --> 00:09:14,079
to<font color="#E5E5E5"> clean things up remove the revealing</font>

175
00:09:12,010 --> 00:09:16,930
<font color="#E5E5E5">icon of the</font><font color="#CCCCCC"> broken image and append our</font>

176
00:09:14,080 --> 00:09:19,660
malicious payload to<font color="#CCCCCC"> the page which</font>

177
00:09:16,930 --> 00:09:23,430
<font color="#E5E5E5">would dynamically create a script loaded</font>

178
00:09:19,660 --> 00:09:26,560
from<font color="#E5E5E5"> a remote host</font><font color="#CCCCCC"> I will host and</font>

179
00:09:23,430 --> 00:09:29,609
needless to say just as we showed

180
00:09:26,560 --> 00:09:35,020
earlier<font color="#CCCCCC"> evil GS will utilize the node.js</font>

181
00:09:29,610 --> 00:09:37,500
capabilities to run a process let's see

182
00:09:35,020 --> 00:09:37,500
how it works

183
00:09:43,820 --> 00:09:56,940
user opens<font color="#E5E5E5"> open</font><font color="#CCCCCC"> subtitles the</font><font color="#E5E5E5"> poppin</font>

184
00:09:48,030 --> 00:10:02,370
<font color="#CCCCCC">time it chooses this service movie load</font>

185
00:09:56,940 --> 00:10:04,800
the subtitles and what happens at this

186
00:10:02,370 --> 00:10:17,250
<font color="#CCCCCC">point is</font><font color="#E5E5E5"> that the malicious subtitles</font>

187
00:10:04,800 --> 00:10:22,140
are loaded as you can see on the<font color="#E5E5E5"> article</font>

188
00:10:17,250 --> 00:10:28,500
side it now has a VNC<font color="#E5E5E5"> over the victims</font>

189
00:10:22,140 --> 00:10:31,230
computer<font color="#CCCCCC"> ok so we know how</font><font color="#E5E5E5"> to create</font>

190
00:10:28,500 --> 00:10:34,440
malicious subtitles for<font color="#CCCCCC"> Popkin time</font>

191
00:10:31,230 --> 00:10:36,930
that's cool but how<font color="#CCCCCC"> will the</font><font color="#E5E5E5"> user get</font>

192
00:10:34,440 --> 00:10:40,020
those<font color="#CCCCCC"> subtitles let's</font><font color="#E5E5E5"> talk a little</font>

193
00:10:36,930 --> 00:10:41,910
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> subtitles supply chain with an</font>

194
00:10:40,020 --> 00:10:45,449
<font color="#CCCCCC">average of 8 million daily downloads</font>

195
00:10:41,910 --> 00:10:48,199
open subtitle is the world's largest

196
00:10:45,450 --> 00:10:51,480
<font color="#E5E5E5">online community</font><font color="#CCCCCC"> for subtitles the</font>

197
00:10:48,200 --> 00:10:54,420
extensive<font color="#CCCCCC"> api is widely integrated into</font>

198
00:10:51,480 --> 00:10:56,310
many<font color="#E5E5E5"> other video players among the basic</font>

199
00:10:54,420 --> 00:10:59,010
function you would expect to find in

200
00:10:56,310 --> 00:11:01,020
such<font color="#CCCCCC"> api such as download and upload</font><font color="#E5E5E5"> of</font>

201
00:10:59,010 --> 00:11:04,380
subtitles<font color="#E5E5E5"> there's the small search</font>

202
00:11:01,020 --> 00:11:06,750
capabilities<font color="#CCCCCC"> and the smart search is</font>

203
00:11:04,380 --> 00:11:08,970
essentially a change function<font color="#E5E5E5"> requesting</font>

204
00:11:06,750 --> 00:11:12,390
all relevant<font color="#E5E5E5"> subtitles from the server</font>

205
00:11:08,970 --> 00:11:14,400
sort and rank them and return the<font color="#E5E5E5"> best</font>

206
00:11:12,390 --> 00:11:20,939
matching subtitle for your movie and

207
00:11:14,400 --> 00:11:23,459
release let's see how it works<font color="#E5E5E5"> now look</font>

208
00:11:20,940 --> 00:11:26,130
<font color="#CCCCCC">in the request a</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> small search we</font>

209
00:11:23,460 --> 00:11:28,920
can<font color="#CCCCCC"> see the only</font><font color="#E5E5E5"> argument</font><font color="#CCCCCC"> path is the</font>

210
00:11:26,130 --> 00:11:33,240
IMDB ID along<font color="#CCCCCC"> with the required language</font>

211
00:11:28,920 --> 00:11:35,969
in<font color="#E5E5E5"> this case</font><font color="#CCCCCC"> all languages</font><font color="#E5E5E5"> while the</font>

212
00:11:33,240 --> 00:11:40,320
response contains<font color="#CCCCCC"> all matching subtitles</font>

213
00:11:35,970 --> 00:11:42,450
<font color="#CCCCCC">to the IMDB ID so obviously token time</font>

214
00:11:40,320 --> 00:11:45,060
automatically<font color="#CCCCCC"> loads</font><font color="#E5E5E5"> the subtitles with</font>

215
00:11:42,450 --> 00:11:47,450
the<font color="#E5E5E5"> highest</font><font color="#CCCCCC"> length</font><font color="#E5E5E5"> but what determines</font>

216
00:11:45,060 --> 00:11:47,449
the rank

217
00:11:48,140 --> 00:11:54,050
<font color="#CCCCCC">steamin for the</font><font color="#E5E5E5"> documentation we bumped</font>

218
00:11:51,050 --> 00:11:56,109
into this ranking scheme<font color="#E5E5E5"> we can see that</font>

219
00:11:54,050 --> 00:12:01,130
<font color="#E5E5E5">this</font><font color="#CCCCCC"> call is based on five criteria</font>

220
00:11:56,110 --> 00:12:04,190
<font color="#E5E5E5">movie</font><font color="#CCCCCC"> hash-tag IMDB ad fps</font><font color="#E5E5E5"> and something</font>

221
00:12:01,130 --> 00:12:06,680
called<font color="#E5E5E5"> others also extra points are</font>

222
00:12:04,190 --> 00:12:09,770
credited for being<font color="#E5E5E5"> an admin</font><font color="#CCCCCC"> / trusted</font>

223
00:12:06,680 --> 00:12:13,790
<font color="#CCCCCC">user but since the only argument sent by</font>

224
00:12:09,770 --> 00:12:15,980
Falcone time<font color="#E5E5E5"> is the IMDB ID if we would</font>

225
00:12:13,790 --> 00:12:18,920
<font color="#E5E5E5">have wanted our malicious subtitle to be</font>

226
00:12:15,980 --> 00:12:22,550
chosen<font color="#E5E5E5"> by the API the maximum points we</font>

227
00:12:18,920 --> 00:12:26,180
couldn't get is<font color="#E5E5E5"> 5 as being anonymous</font>

228
00:12:22,550 --> 00:12:29,089
users so<font color="#E5E5E5"> a bit discouraged by the</font>

229
00:12:26,180 --> 00:12:32,719
documentation<font color="#CCCCCC"> and scores in all other</font>

230
00:12:29,090 --> 00:12:35,810
popular movies in which were higher<font color="#CCCCCC"> than</font>

231
00:12:32,720 --> 00:12:37,610
5 we turn to the source code of open

232
00:12:35,810 --> 00:12:39,709
subtitles<font color="#E5E5E5"> where we learned a valuable</font>

233
00:12:37,610 --> 00:12:41,480
lesson if<font color="#CCCCCC"> you truly</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to break</font>

234
00:12:39,710 --> 00:12:44,540
something<font color="#CCCCCC"> looking at the documentation</font>

235
00:12:41,480 --> 00:12:47,540
is not the way to go because<font color="#E5E5E5"> the source</font>

236
00:12:44,540 --> 00:12:50,630
code revealed an undocumented behavior

237
00:12:47,540 --> 00:12:55,640
the match text function is called<font color="#CCCCCC"> either</font>

238
00:12:50,630 --> 00:12:57,650
way but what is match tags the match

239
00:12:55,640 --> 00:13:01,370
text function will break the file name

240
00:12:57,650 --> 00:13:03,740
of<font color="#CCCCCC"> the movie and subtitle to tags a tag</font>

241
00:13:01,370 --> 00:13:06,050
is basically<font color="#E5E5E5"> an isolated world of a</font>

242
00:13:03,740 --> 00:13:09,560
number a found in the file name usually

243
00:13:06,050 --> 00:13:12,469
<font color="#E5E5E5">separated by dots and dashes then a</font>

244
00:13:09,560 --> 00:13:14,329
short loop checks<font color="#E5E5E5"> how many shelters</font><font color="#CCCCCC"> does</font>

245
00:13:12,470 --> 00:13:18,290
the subtitle file name and the movie

246
00:13:14,330 --> 00:13:21,320
<font color="#CCCCCC">filename have in common</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> that weird</font>

247
00:13:18,290 --> 00:13:23,930
formula is taking place the<font color="#E5E5E5"> amount of</font>

248
00:13:21,320 --> 00:13:27,290
shell tags<font color="#E5E5E5"> is then divided</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the number</font>

249
00:13:23,930 --> 00:13:30,199
of<font color="#E5E5E5"> movie tags and multiplied by a max</font>

250
00:13:27,290 --> 00:13:32,360
<font color="#E5E5E5">goal of</font><font color="#CCCCCC"> 7 which is the Mexico that</font><font color="#E5E5E5"> can</font>

251
00:13:30,200 --> 00:13:34,840
be assigned in case of full

252
00:13:32,360 --> 00:13:37,760
compatibility between<font color="#E5E5E5"> the two file names</font>

253
00:13:34,840 --> 00:13:40,490
let's see a<font color="#CCCCCC"> demonstration of this</font>

254
00:13:37,760 --> 00:13:42,950
<font color="#E5E5E5">functions behavior let's assume this is</font>

255
00:13:40,490 --> 00:13:45,140
<font color="#CCCCCC">the movie file name streamed by popcorn</font>

256
00:13:42,950 --> 00:13:48,770
<font color="#E5E5E5">time which is easily checked using</font>

257
00:13:45,140 --> 00:13:52,160
sniffle<font color="#E5E5E5"> and this is the name of the</font>

258
00:13:48,770 --> 00:13:56,270
candidate subtitle file name the code

259
00:13:52,160 --> 00:13:59,650
cells<font color="#E5E5E5"> split the file name into tags it</font>

260
00:13:56,270 --> 00:14:02,020
then splits the subtitle file name

261
00:13:59,650 --> 00:14:05,050
the match<font color="#E5E5E5"> tax function then checks how</font>

262
00:14:02,020 --> 00:14:09,010
many shell<font color="#E5E5E5"> texts they have three in this</font>

263
00:14:05,050 --> 00:14:13,290
case the API then goes<font color="#CCCCCC"> to its formula</font>

264
00:14:09,010 --> 00:14:17,230
which is shell tags<font color="#CCCCCC"> three as we just saw</font>

265
00:14:13,290 --> 00:14:20,829
<font color="#CCCCCC">/ tags</font><font color="#E5E5E5"> in the movie file name case we</font>

266
00:14:17,230 --> 00:14:23,830
see<font color="#CCCCCC"> that on the Left</font><font color="#E5E5E5"> x the</font><font color="#CCCCCC"> maxilla</font><font color="#E5E5E5"> which</font>

267
00:14:20,830 --> 00:14:27,820
is<font color="#CCCCCC"> the constant number of</font><font color="#E5E5E5"> seven this</font>

268
00:14:23,830 --> 00:14:29,650
gives us the<font color="#E5E5E5"> final score of two well</font>

269
00:14:27,820 --> 00:14:32,080
this behavior<font color="#CCCCCC"> makes</font><font color="#E5E5E5"> it trivial to</font>

270
00:14:29,650 --> 00:14:35,260
achieve full compatibility<font color="#CCCCCC"> all we have</font>

271
00:14:32,080 --> 00:14:38,230
<font color="#E5E5E5">to do is name our malicious subtitle</font>

272
00:14:35,260 --> 00:14:41,380
identically to<font color="#E5E5E5"> the movie file name in</font>

273
00:14:38,230 --> 00:14:44,110
this<font color="#E5E5E5"> case we get full compatibility</font><font color="#CCCCCC"> plus</font>

274
00:14:41,380 --> 00:14:47,710
the IMDB ID<font color="#CCCCCC"> five</font><font color="#E5E5E5"> five points we already</font>

275
00:14:44,110 --> 00:14:51,520
had and we get 12 points<font color="#E5E5E5"> but wait</font>

276
00:14:47,710 --> 00:14:54,370
there's more these are the<font color="#E5E5E5"> recommended</font>

277
00:14:51,520 --> 00:14:56,260
subtitles for some of the<font color="#E5E5E5"> most popular</font>

278
00:14:54,370 --> 00:14:59,710
<font color="#E5E5E5">content available online</font>

279
00:14:56,260 --> 00:15:03,100
Deadpool<font color="#CCCCCC"> shows an</font><font color="#E5E5E5"> inception</font><font color="#CCCCCC"> snowden and</font>

280
00:14:59,710 --> 00:15:05,770
westward season 1 episode 1<font color="#CCCCCC"> this graph</font>

281
00:15:03,100 --> 00:15:07,450
<font color="#CCCCCC">shows the score</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> 7 most popular</font>

282
00:15:05,770 --> 00:15:10,240
languages in the world<font color="#E5E5E5"> displaying the</font>

283
00:15:07,450 --> 00:15:11,770
average and highest score<font color="#CCCCCC"> scanning</font>

284
00:15:10,240 --> 00:15:13,870
<font color="#E5E5E5">automatically for a bunch of popular</font>

285
00:15:11,770 --> 00:15:17,529
subtitles<font color="#E5E5E5"> we</font><font color="#CCCCCC"> notice that the highest</font>

286
00:15:13,870 --> 00:15:22,450
<font color="#E5E5E5">score a subject subtitle</font><font color="#CCCCCC"> gasps was 14</font>

287
00:15:17,529 --> 00:15:24,180
<font color="#E5E5E5">while the average is around 10 at this</font>

288
00:15:22,450 --> 00:15:27,060
point we've showed that we can

289
00:15:24,180 --> 00:15:29,920
consistently achieve a solid score of 12

290
00:15:27,060 --> 00:15:33,729
higher than the average<font color="#E5E5E5"> but still we</font>

291
00:15:29,920 --> 00:15:38,170
<font color="#E5E5E5">were unsatisfied as we call extra points</font>

292
00:15:33,730 --> 00:15:41,709
<font color="#CCCCCC">and credited for being arranged user so</font>

293
00:15:38,170 --> 00:15:42,599
<font color="#CCCCCC">: open subtitles</font><font color="#E5E5E5"> website we found this</font>

294
00:15:41,709 --> 00:15:45,459
table

295
00:15:42,600 --> 00:15:48,910
apparently<font color="#E5E5E5"> all it takes to become a gold</font>

296
00:15:45,459 --> 00:15:52,510
member in element X 3 points is a

297
00:15:48,910 --> 00:15:55,420
<font color="#E5E5E5">hundred and one uploads so we sign up to</font>

298
00:15:52,510 --> 00:15:59,880
open<font color="#CCCCCC"> subtitles and</font><font color="#E5E5E5"> four minutes later in</font>

299
00:15:55,420 --> 00:16:02,399
<font color="#E5E5E5">40 lines of Python we will go</font><font color="#CCCCCC"> them</font>

300
00:15:59,880 --> 00:16:04,920
so we love the small<font color="#E5E5E5"> script that gets</font>

301
00:16:02,399 --> 00:16:08,430
the skull<font color="#CCCCCC"> of all subtitles</font><font color="#E5E5E5"> available for</font>

302
00:16:04,920 --> 00:16:11,969
<font color="#E5E5E5">a given movie as you can see our</font>

303
00:16:08,430 --> 00:16:15,149
subtitles<font color="#CCCCCC"> has the highest score</font><font color="#E5E5E5"> of 15</font>

304
00:16:11,970 --> 00:16:18,449
<font color="#E5E5E5">what this basically means that</font><font color="#CCCCCC"> given any</font>

305
00:16:15,149 --> 00:16:21,769
movie we<font color="#E5E5E5"> can force your player</font><font color="#CCCCCC"> to load</font>

306
00:16:18,449 --> 00:16:25,649
our crafted malicious subtitles and

307
00:16:21,769 --> 00:16:28,139
exploit<font color="#E5E5E5"> your machine okay</font>

308
00:16:25,649 --> 00:16:36,000
so let's see what else we<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> with it</font>

309
00:16:28,139 --> 00:16:38,250
<font color="#E5E5E5">oh no we'll take it</font><font color="#CCCCCC"> hi</font><font color="#E5E5E5"> a so coding which</font>

310
00:16:36,000 --> 00:16:40,050
is<font color="#E5E5E5"> formally known as XBMC is an</font>

311
00:16:38,250 --> 00:16:43,740
award-winning<font color="#CCCCCC"> open-source cross-platform</font>

312
00:16:40,050 --> 00:16:47,910
media player which<font color="#E5E5E5"> is available in all</font>

313
00:16:43,740 --> 00:16:50,970
major platforms<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> available in 72</font>

314
00:16:47,910 --> 00:16:53,430
languages<font color="#E5E5E5"> and is used by</font><font color="#CCCCCC"> over 40</font><font color="#E5E5E5"> million</font>

315
00:16:50,970 --> 00:16:56,459
people<font color="#E5E5E5"> it is probably the</font><font color="#CCCCCC"> most common</font>

316
00:16:53,430 --> 00:16:58,219
<font color="#E5E5E5">major</font><font color="#CCCCCC"> Center</font><font color="#E5E5E5"> software around and code is</font>

317
00:16:56,459 --> 00:17:00,839
<font color="#E5E5E5">also a popular combination with</font>

318
00:16:58,220 --> 00:17:02,759
raspberry PI's and<font color="#E5E5E5"> small TV making it</font>

319
00:17:00,839 --> 00:17:05,579
<font color="#E5E5E5">kind of interesting</font><font color="#CCCCCC"> from an attackers</font>

320
00:17:02,759 --> 00:17:07,260
perspective<font color="#E5E5E5"> so this is the screen</font>

321
00:17:05,579 --> 00:17:10,319
displayed when you want<font color="#E5E5E5"> to download</font>

322
00:17:07,260 --> 00:17:12,119
subtitles<font color="#CCCCCC"> using coding this</font><font color="#E5E5E5"> is the</font>

323
00:17:10,319 --> 00:17:14,849
request being sent by<font color="#CCCCCC"> coding to the</font>

324
00:17:12,119 --> 00:17:16,530
<font color="#E5E5E5">subtitle repository we recognize it as</font>

325
00:17:14,849 --> 00:17:17,250
we're already<font color="#E5E5E5"> familiar</font><font color="#CCCCCC"> with the open</font>

326
00:17:16,530 --> 00:17:20,309
subtitles

327
00:17:17,250 --> 00:17:23,400
API structure and this<font color="#E5E5E5"> is the code that</font>

328
00:17:20,309 --> 00:17:26,039
is actually fetching<font color="#CCCCCC"> the subtitles first</font>

329
00:17:23,400 --> 00:17:27,929
the<font color="#CCCCCC"> search subtitles</font><font color="#E5E5E5"> function is called</font>

330
00:17:26,039 --> 00:17:33,030
<font color="#E5E5E5">and the response is saved into a</font>

331
00:17:27,929 --> 00:17:35,210
valuable called search data then a for

332
00:17:33,030 --> 00:17:37,320
<font color="#E5E5E5">loop will iterate over these results</font>

333
00:17:35,210 --> 00:17:39,840
<font color="#E5E5E5">extracting the</font><font color="#CCCCCC"> information from them</font><font color="#E5E5E5"> and</font>

334
00:17:37,320 --> 00:17:44,309
<font color="#E5E5E5">format them into a screen a spring</font><font color="#CCCCCC"> cause</font>

335
00:17:39,840 --> 00:17:47,189
<font color="#E5E5E5">you ll then each</font><font color="#CCCCCC"> of the created others</font>

336
00:17:44,309 --> 00:17:50,360
I'll send to the directory item function

337
00:17:47,190 --> 00:17:53,340
which in turn results in this screen and

338
00:17:50,360 --> 00:17:58,500
now the user<font color="#E5E5E5"> can select his desired</font>

339
00:17:53,340 --> 00:18:01,860
subtitles let's<font color="#E5E5E5"> focus on that URL string</font>

340
00:17:58,500 --> 00:18:04,980
for a moment<font color="#E5E5E5"> since open</font><font color="#CCCCCC"> subtitles is</font>

341
00:18:01,860 --> 00:18:07,500
<font color="#E5E5E5">were open an attacker has control over</font>

342
00:18:04,980 --> 00:18:11,220
<font color="#E5E5E5">the filename parameter received under</font>

343
00:18:07,500 --> 00:18:13,500
the value of sub<font color="#E5E5E5"> file name and here we</font>

344
00:18:11,220 --> 00:18:16,440
see how each of<font color="#E5E5E5"> the four keys</font>

345
00:18:13,500 --> 00:18:22,650
in<font color="#E5E5E5"> item data formatted into that URL</font>

346
00:18:16,440 --> 00:18:24,750
<font color="#E5E5E5">string given the fact that an attacker</font>

347
00:18:22,650 --> 00:18:29,760
completely controls the<font color="#E5E5E5"> file name what</font>

348
00:18:24,750 --> 00:18:32,190
can he do with<font color="#E5E5E5"> it now usually</font><font color="#CCCCCC"> the file</font>

349
00:18:29,760 --> 00:18:35,220
name will<font color="#CCCCCC"> be something</font><font color="#E5E5E5"> like subtitle</font>

350
00:18:32,190 --> 00:18:38,940
file name dot<font color="#CCCCCC"> SLP</font><font color="#E5E5E5"> but what if afterwards</font>

351
00:18:35,220 --> 00:18:43,050
<font color="#E5E5E5">we append the ampersand sign and then</font><font color="#CCCCCC"> we</font>

352
00:18:38,940 --> 00:18:46,230
had something like<font color="#E5E5E5"> this this would</font>

353
00:18:43,050 --> 00:18:48,600
<font color="#E5E5E5">effectively overwrite the original link</font>

354
00:18:46,230 --> 00:18:51,150
<font color="#E5E5E5">NID parameters which we</font><font color="#CCCCCC"> originally</font>

355
00:18:48,600 --> 00:18:53,490
didn't have any control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> simply</font>

356
00:18:51,150 --> 00:18:56,670
<font color="#E5E5E5">because this is a string and it is being</font>

357
00:18:53,490 --> 00:18:59,250
passed by a<font color="#E5E5E5"> basic split function but how</font>

358
00:18:56,670 --> 00:19:01,110
<font color="#CCCCCC">does this</font><font color="#E5E5E5"> help us once the user chooses</font>

359
00:18:59,250 --> 00:19:06,120
his subtitles<font color="#E5E5E5"> the download function</font>

360
00:19:01,110 --> 00:19:08,459
<font color="#CCCCCC">would be called</font><font color="#E5E5E5"> the arguments to that</font>

361
00:19:06,120 --> 00:19:10,739
<font color="#E5E5E5">download</font><font color="#CCCCCC"> function I'll</font><font color="#E5E5E5"> derive form that</font>

362
00:19:08,460 --> 00:19:15,960
URL<font color="#E5E5E5"> and these are the arguments we can</font>

363
00:19:10,740 --> 00:19:19,070
now control<font color="#CCCCCC"> the ID and the link so how</font>

364
00:19:15,960 --> 00:19:19,070
does this function<font color="#CCCCCC"> behave</font>

365
00:19:19,100 --> 00:19:25,500
first<font color="#E5E5E5"> it uses open subtitles</font>

366
00:19:22,380 --> 00:19:28,380
<font color="#E5E5E5">API to try and download the subtitle</font>

367
00:19:25,500 --> 00:19:30,600
based on the ID given to it<font color="#E5E5E5"> but the</font>

368
00:19:28,380 --> 00:19:34,950
<font color="#E5E5E5">interesting part is what happens when it</font>

369
00:19:30,600 --> 00:19:37,469
<font color="#CCCCCC">fails if</font><font color="#E5E5E5"> the ID</font><font color="#CCCCCC"> does not exist then the</font>

370
00:19:34,950 --> 00:19:40,500
not<font color="#E5E5E5"> result branch is taken which</font>

371
00:19:37,470 --> 00:19:41,570
download a zip file from the link given

372
00:19:40,500 --> 00:19:44,730
<font color="#E5E5E5">to it</font>

373
00:19:41,570 --> 00:19:49,280
so by<font color="#CCCCCC"> changing this ID</font><font color="#E5E5E5"> to something that</font>

374
00:19:44,730 --> 00:19:54,630
<font color="#CCCCCC">doesn't exist</font><font color="#E5E5E5"> such</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> and</font>

375
00:19:49,280 --> 00:19:58,170
overwriting that link to point to a zip

376
00:19:54,630 --> 00:20:01,200
stored on our servers<font color="#E5E5E5"> with false Cody</font><font color="#CCCCCC"> to</font>

377
00:19:58,170 --> 00:20:03,660
download the remote zip file<font color="#E5E5E5"> and after</font>

378
00:20:01,200 --> 00:20:07,890
<font color="#E5E5E5">this download</font><font color="#CCCCCC"> the zip file will be</font><font color="#E5E5E5"> sent</font>

379
00:20:03,660 --> 00:20:10,620
to<font color="#E5E5E5"> the XBMC extract function now instead</font>

380
00:20:07,890 --> 00:20:12,570
<font color="#CCCCCC">of</font><font color="#E5E5E5"> using a standard library for zip</font>

381
00:20:10,620 --> 00:20:14,669
extraction<font color="#E5E5E5"> Cody decided to implement</font>

382
00:20:12,570 --> 00:20:17,240
<font color="#E5E5E5">their own which as we</font><font color="#CCCCCC"> all know is</font>

383
00:20:14,670 --> 00:20:19,620
usually<font color="#CCCCCC"> a great idea</font><font color="#E5E5E5"> right so</font>

384
00:20:17,240 --> 00:20:21,360
<font color="#E5E5E5">downloading an arbitrary zip archive</font>

385
00:20:19,620 --> 00:20:23,370
funding that from the internet is

386
00:20:21,360 --> 00:20:25,260
definitely careless but training<font color="#E5E5E5"> this</font>

387
00:20:23,370 --> 00:20:26,070
behavior with another vulnerability<font color="#E5E5E5"> we</font>

388
00:20:25,260 --> 00:20:28,590
found in

389
00:20:26,070 --> 00:20:32,429
<font color="#CCCCCC">this built-in extraction made it lethal</font>

390
00:20:28,590 --> 00:20:34,379
let's see what the<font color="#CCCCCC"> kodi built-in extract</font>

391
00:20:32,430 --> 00:20:36,570
<font color="#E5E5E5">archive function does is building a file</font>

392
00:20:34,380 --> 00:20:39,690
path<font color="#E5E5E5"> based on the folder names inside</font>

393
00:20:36,570 --> 00:20:41,939
the zip but what code is neglected to

394
00:20:39,690 --> 00:20:44,640
handle our folder name that<font color="#CCCCCC"> contains two</font>

395
00:20:41,940 --> 00:20:47,430
dots so that's right we<font color="#E5E5E5"> have directly</font>

396
00:20:44,640 --> 00:20:49,530
reversal here so all we have<font color="#E5E5E5"> to do is</font>

397
00:20:47,430 --> 00:20:51,930
<font color="#CCCCCC">create a zip that contains</font><font color="#E5E5E5"> dots as</font>

398
00:20:49,530 --> 00:20:53,780
folder<font color="#CCCCCC"> names and then we can make</font><font color="#E5E5E5"> the</font>

399
00:20:51,930 --> 00:20:56,910
extraction create a Python script

400
00:20:53,780 --> 00:20:59,210
<font color="#E5E5E5">instead of the add-on itself which will</font>

401
00:20:56,910 --> 00:21:02,370
be<font color="#E5E5E5"> immediately called again right thus</font>

402
00:20:59,210 --> 00:21:04,530
executing your code and this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> our</font>

403
00:21:02,370 --> 00:21:05,550
<font color="#E5E5E5">second vulnerability for today and let's</font>

404
00:21:04,530 --> 00:21:13,879
see how<font color="#CCCCCC"> that looks</font>

405
00:21:05,550 --> 00:21:13,879
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> coding this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> Emily's dogs</font>

406
00:21:34,660 --> 00:21:38,200
into the film

407
00:21:57,660 --> 00:22:08,700
now we open the subtitles menu turns to

408
00:22:03,780 --> 00:22:10,710
the API<font color="#E5E5E5"> get all the subtitles back all</font>

409
00:22:08,700 --> 00:22:20,700
top<font color="#E5E5E5"> three results are</font><font color="#CCCCCC"> our Malaysia</font>

410
00:22:10,710 --> 00:22:23,930
subtitles now dramatic<font color="#CCCCCC"> zoom out we look</font>

411
00:22:20,700 --> 00:22:23,930
at the attackers computer

412
00:22:33,000 --> 00:22:41,309
and we get<font color="#CCCCCC"> VNC</font><font color="#E5E5E5"> again and full control</font>

413
00:22:37,049 --> 00:22:43,620
over<font color="#E5E5E5"> the victims computer</font><font color="#CCCCCC"> okay on</font><font color="#E5E5E5"> to the</font>

414
00:22:41,309 --> 00:22:45,210
<font color="#CCCCCC">next</font><font color="#E5E5E5"> victim now</font><font color="#CCCCCC"> popcorntime</font>

415
00:22:43,620 --> 00:22:48,299
definitely mark the<font color="#E5E5E5"> eyes of streaming</font>

416
00:22:45,210 --> 00:22:50,640
<font color="#CCCCCC">ups but being separately</font><font color="#E5E5E5"> temporarily</font>

417
00:22:48,299 --> 00:22:53,309
shut down<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> MPAA</font><font color="#E5E5E5"> it left users</font>

418
00:22:50,640 --> 00:22:56,070
looking for alternatives<font color="#E5E5E5"> and stem</font><font color="#CCCCCC"> io</font>

419
00:22:53,309 --> 00:22:57,870
offer just that<font color="#CCCCCC"> slight pop con time it</font>

420
00:22:56,070 --> 00:23:01,289
is designed with<font color="#CCCCCC"> ease of use in mind and</font>

421
00:22:57,870 --> 00:23:02,850
has quite similar user interface by the

422
00:23:01,289 --> 00:23:05,280
way this is also the platform that both

423
00:23:02,850 --> 00:23:07,408
of<font color="#CCCCCC"> us use back home when</font><font color="#E5E5E5"> we're pirating</font>

424
00:23:05,280 --> 00:23:08,960
but don't tell anyone<font color="#E5E5E5"> so we thought it</font>

425
00:23:07,409 --> 00:23:12,240
<font color="#E5E5E5">would be fun</font><font color="#CCCCCC"> to give it a shot</font>

426
00:23:08,960 --> 00:23:14,070
interestingly<font color="#E5E5E5"> enough stream</font><font color="#CCCCCC"> io shares</font><font color="#E5E5E5"> a</font>

427
00:23:12,240 --> 00:23:16,620
few characteristics with<font color="#CCCCCC"> Popkin time</font>

428
00:23:14,070 --> 00:23:19,530
under the hood<font color="#E5E5E5"> most importantly for us</font>

429
00:23:16,620 --> 00:23:23,340
<font color="#CCCCCC">it is also and</font><font color="#E5E5E5"> know a WebKit based</font>

430
00:23:19,530 --> 00:23:26,039
<font color="#CCCCCC">application</font><font color="#E5E5E5"> and it also uses open</font>

431
00:23:23,340 --> 00:23:28,049
subtitles<font color="#E5E5E5"> as a subtitle provider so</font>

432
00:23:26,039 --> 00:23:29,908
obviously we try<font color="#E5E5E5"> the same trick that</font><font color="#CCCCCC"> we</font>

433
00:23:28,049 --> 00:23:32,100
<font color="#E5E5E5">used on popcorn time you can actually</font>

434
00:23:29,909 --> 00:23:35,789
see the broken<font color="#E5E5E5"> image icon at the bottom</font>

435
00:23:32,100 --> 00:23:38,520
and but no message box<font color="#E5E5E5"> was popped so</font>

436
00:23:35,789 --> 00:23:40,919
that didn't<font color="#CCCCCC"> work</font><font color="#E5E5E5"> because apparently our</font>

437
00:23:38,520 --> 00:23:44,668
JavaScript has been sanitized<font color="#E5E5E5"> and we</font>

438
00:23:40,919 --> 00:23:47,070
needed<font color="#CCCCCC"> to dig a little deeper style code</font>

439
00:23:44,669 --> 00:23:48,720
is<font color="#E5E5E5"> archived as an</font><font color="#CCCCCC"> iso file which is a</font>

440
00:23:47,070 --> 00:23:51,090
simple style like formats that

441
00:23:48,720 --> 00:23:53,850
concatenate all files together<font color="#E5E5E5"> just</font>

442
00:23:51,090 --> 00:23:55,949
without the compression so<font color="#CCCCCC"> using node.js</font>

443
00:23:53,850 --> 00:23:57,990
<font color="#CCCCCC">like way to extract it and</font><font color="#E5E5E5"> we got all</font>

444
00:23:55,950 --> 00:24:01,530
the<font color="#CCCCCC"> necessary files we needed in</font><font color="#E5E5E5"> order</font>

445
00:23:57,990 --> 00:24:04,590
<font color="#E5E5E5">to inspect the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and extracting the</font>

446
00:24:01,530 --> 00:24:06,809
<font color="#E5E5E5">code and prettifying it we realized that</font>

447
00:24:04,590 --> 00:24:09,928
any text edit to the<font color="#E5E5E5"> screen is passed</font>

448
00:24:06,809 --> 00:24:13,020
through angular sanitize and<font color="#E5E5E5"> this</font>

449
00:24:09,929 --> 00:24:15,240
sanitized<font color="#E5E5E5"> service will pass an HTML and</font>

450
00:24:13,020 --> 00:24:17,658
only allow for safe and<font color="#E5E5E5"> whitelisted</font>

451
00:24:15,240 --> 00:24:20,400
markup and attributes to survive<font color="#E5E5E5"> thus</font>

452
00:24:17,659 --> 00:24:22,350
sterilizing the string<font color="#E5E5E5"> so it contains no</font>

453
00:24:20,400 --> 00:24:25,140
scripting expression of dangerous

454
00:24:22,350 --> 00:24:28,889
attributes<font color="#E5E5E5"> so having to use only static</font>

455
00:24:25,140 --> 00:24:32,250
HTML really a limited or option so this

456
00:24:28,890 --> 00:24:34,289
<font color="#CCCCCC">calls for</font><font color="#E5E5E5"> kind of a creative</font><font color="#CCCCCC"> solution if</font>

457
00:24:32,250 --> 00:24:36,390
you've ever used<font color="#CCCCCC"> stem i/o</font><font color="#E5E5E5"> which is great</font>

458
00:24:34,289 --> 00:24:40,080
by the way you<font color="#E5E5E5"> must be</font><font color="#CCCCCC"> familiar with</font><font color="#E5E5E5"> the</font>

459
00:24:36,390 --> 00:24:43,080
supporters<font color="#CCCCCC"> papa banner</font><font color="#E5E5E5"> now we know that</font>

460
00:24:40,080 --> 00:24:45,090
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> use HTML</font><font color="#CCCCCC"> tags</font><font color="#E5E5E5"> right so what if we</font>

461
00:24:43,080 --> 00:24:48,270
present<font color="#E5E5E5"> the</font><font color="#CCCCCC"> supported image to the user</font>

462
00:24:45,090 --> 00:24:51,659
using the image tag<font color="#E5E5E5"> but surrounded with</font>

463
00:24:48,270 --> 00:24:53,639
<font color="#E5E5E5">an</font><font color="#CCCCCC"> HF</font><font color="#E5E5E5"> this way no job there's no</font>

464
00:24:51,660 --> 00:24:55,410
JavaScript to be sanitized

465
00:24:53,640 --> 00:24:56,940
and once the user would click the image

466
00:24:55,410 --> 00:24:59,940
in order<font color="#E5E5E5"> to close it he will be</font>

467
00:24:56,940 --> 00:25:04,820
redirected<font color="#E5E5E5"> once again to our malicious</font>

468
00:24:59,940 --> 00:25:04,820
<font color="#E5E5E5">JavaScript let's see that</font>

469
00:25:24,730 --> 00:25:27,480
<font color="#E5E5E5">all right</font>

470
00:25:36,850 --> 00:25:45,428
and<font color="#CCCCCC"> close</font><font color="#E5E5E5"> of the banner and calc</font>

471
00:25:40,990 --> 00:25:47,590
yeah so<font color="#E5E5E5"> realizing the disastrous</font>

472
00:25:45,429 --> 00:25:50,350
potential of<font color="#CCCCCC"> subtitle</font><font color="#E5E5E5"> as an attack</font>

473
00:25:47,590 --> 00:25:52,149
vector<font color="#CCCCCC"> we moved on</font><font color="#E5E5E5"> and I'm pretty</font><font color="#CCCCCC"> sure</font>

474
00:25:50,350 --> 00:25:56,168
<font color="#E5E5E5">that there is no need</font><font color="#CCCCCC"> to introduce</font><font color="#E5E5E5"> our</font>

475
00:25:52,149 --> 00:25:58,508
next<font color="#E5E5E5"> target with over 180 million users</font>

476
00:25:56,169 --> 00:26:01,360
viously is one of the most common media

477
00:25:58,509 --> 00:26:03,909
players out<font color="#CCCCCC"> there</font><font color="#E5E5E5"> this open source</font>

478
00:26:01,360 --> 00:26:06,490
portable<font color="#E5E5E5"> course platform media</font><font color="#CCCCCC"> framework</font>

479
00:26:03,909 --> 00:26:08,230
is<font color="#CCCCCC"> available for almost</font><font color="#E5E5E5"> any platform</font>

480
00:26:06,490 --> 00:26:09,909
imaginable<font color="#E5E5E5"> by the way we are not</font>

481
00:26:08,230 --> 00:26:12,690
<font color="#E5E5E5">completely sure what Tizen is but I</font>

482
00:26:09,909 --> 00:26:17,529
<font color="#E5E5E5">think my refrigerator at home runs it so</font>

483
00:26:12,690 --> 00:26:19,090
might be dangerous and<font color="#E5E5E5"> VLC is in fact a</font>

484
00:26:17,529 --> 00:26:22,179
complete<font color="#E5E5E5"> multimedia</font><font color="#CCCCCC"> fly mode just like</font>

485
00:26:19,090 --> 00:26:24,009
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual or</font><font color="#CCCCCC"> GCM oh where you can load</font>

486
00:26:22,179 --> 00:26:26,860
and<font color="#E5E5E5"> plug</font><font color="#CCCCCC"> in many modules dynamically</font>

487
00:26:24,009 --> 00:26:29,049
depending on the necessity and<font color="#CCCCCC"> the cold</font>

488
00:26:26,860 --> 00:26:31,990
<font color="#CCCCCC">flame oak is just used to</font><font color="#E5E5E5"> do the</font><font color="#CCCCCC"> wiring</font>

489
00:26:29,049 --> 00:26:34,418
and the<font color="#CCCCCC"> media processing so from inputs</font>

490
00:26:31,990 --> 00:26:38,019
<font color="#E5E5E5">like files and network streams to</font>

491
00:26:34,419 --> 00:26:40,269
outputs a<font color="#E5E5E5"> audio video</font><font color="#CCCCCC"> on-screen on a</font>

492
00:26:38,019 --> 00:26:42,519
network<font color="#E5E5E5"> it uses modules to do most of</font>

493
00:26:40,269 --> 00:26:46,629
the work at every<font color="#E5E5E5"> stage like</font><font color="#CCCCCC"> values</font>

494
00:26:42,519 --> 00:26:49,750
<font color="#CCCCCC">democracy codels or filters now being</font>

495
00:26:46,629 --> 00:26:51,969
described<font color="#E5E5E5"> even by</font><font color="#CCCCCC"> own authors as very</font>

496
00:26:49,750 --> 00:26:54,610
popular but quite large and complex

497
00:26:51,970 --> 00:26:56,679
piece of software<font color="#CCCCCC"> we were confident that</font>

498
00:26:54,610 --> 00:27:01,658
<font color="#E5E5E5">subtitles related vulnerabilities to</font>

499
00:26:56,679 --> 00:27:04,269
<font color="#CCCCCC">exist so textual subtitles are passed by</font>

500
00:27:01,659 --> 00:27:07,389
VLC in<font color="#CCCCCC"> its the muck so-called subtitles</font>

501
00:27:04,269 --> 00:27:09,309
dot<font color="#E5E5E5"> C</font><font color="#CCCCCC"> and these are all</font><font color="#E5E5E5"> the supported</font>

502
00:27:07,389 --> 00:27:12,729
formats<font color="#CCCCCC"> and the respective pulsing</font>

503
00:27:09,309 --> 00:27:14,408
function yes that's quite a lot and the

504
00:27:12,730 --> 00:27:16,389
democracy<font color="#E5E5E5"> only job is</font><font color="#CCCCCC"> to pass</font><font color="#E5E5E5"> the</font>

505
00:27:14,409 --> 00:27:19,090
<font color="#E5E5E5">different timing convention of each</font>

506
00:27:16,389 --> 00:27:23,139
<font color="#CCCCCC">formats</font><font color="#E5E5E5"> and send every</font><font color="#CCCCCC"> subtitle with</font>

507
00:27:19,090 --> 00:27:24,908
decoder<font color="#E5E5E5"> now other than SSA</font><font color="#CCCCCC"> and a SS that</font>

508
00:27:23,139 --> 00:27:27,908
<font color="#E5E5E5">are decoded</font><font color="#CCCCCC"> by a dedicated library</font>

509
00:27:24,909 --> 00:27:31,440
<font color="#E5E5E5">called</font><font color="#CCCCCC"> Lib a SS or other formats are</font>

510
00:27:27,909 --> 00:27:33,730
decoded by VLC's own decoder subjects

511
00:27:31,440 --> 00:27:38,259
inevitably things are about<font color="#CCCCCC"> to go</font>

512
00:27:33,730 --> 00:27:41,110
terribly wrong<font color="#E5E5E5"> so</font><font color="#CCCCCC"> sub deck will take</font>

513
00:27:38,259 --> 00:27:44,409
every subtitle<font color="#CCCCCC"> assert in our example</font><font color="#E5E5E5"> and</font>

514
00:27:41,110 --> 00:27:47,408
parses its<font color="#E5E5E5"> text field it then creates</font>

515
00:27:44,409 --> 00:27:48,650
<font color="#E5E5E5">two versions of it</font><font color="#CCCCCC"> the first is a plain</font>

516
00:27:47,409 --> 00:27:51,080
<font color="#CCCCCC">text version</font>

517
00:27:48,650 --> 00:27:53,270
with all tags attributes<font color="#CCCCCC"> and styling</font>

518
00:27:51,080 --> 00:27:56,240
stripped off<font color="#E5E5E5"> this will be used in case</font>

519
00:27:53,270 --> 00:27:58,490
later<font color="#CCCCCC"> rendering will fail</font><font color="#E5E5E5"> the second</font>

520
00:27:56,240 --> 00:28:02,270
<font color="#CCCCCC">more feature-rich version is referred to</font>

521
00:27:58,490 --> 00:28:04,610
as the HTML<font color="#E5E5E5"> subtitle HTML subtitles will</font>

522
00:28:02,270 --> 00:28:08,270
contain all the fancy styling attributes

523
00:28:04,610 --> 00:28:10,850
such as<font color="#E5E5E5"> fonts alignments etc and after</font>

524
00:28:08,270 --> 00:28:15,139
<font color="#E5E5E5">being decoded subtitles are sent to</font>

525
00:28:10,850 --> 00:28:17,540
<font color="#E5E5E5">their final</font><font color="#CCCCCC"> stage of rendering now going</font>

526
00:28:15,140 --> 00:28:19,850
over<font color="#E5E5E5"> the VLC subtitle</font><font color="#CCCCCC"> related code we</font>

527
00:28:17,540 --> 00:28:21,920
<font color="#E5E5E5">immediately noticed a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> passing is</font>

528
00:28:19,850 --> 00:28:24,560
being done using<font color="#E5E5E5"> raw pointers</font>

529
00:28:21,920 --> 00:28:26,510
instead of<font color="#CCCCCC"> built-in string function and</font>

530
00:28:24,560 --> 00:28:30,620
this<font color="#E5E5E5"> is generally a bad idea</font>

531
00:28:26,510 --> 00:28:33,560
<font color="#E5E5E5">so let's see an example of it and again</font>

532
00:28:30,620 --> 00:28:36,530
this is how<font color="#E5E5E5"> a basic</font><font color="#CCCCCC"> srt subtitles like</font>

533
00:28:33,560 --> 00:28:38,840
<font color="#E5E5E5">and this code uses the PSD subtitle</font>

534
00:28:36,530 --> 00:28:41,300
variable<font color="#E5E5E5"> to pass the subtitle one byte</font>

535
00:28:38,840 --> 00:28:48,290
at a time<font color="#E5E5E5"> in this case the code just</font>

536
00:28:41,300 --> 00:28:51,260
identified the<font color="#E5E5E5"> HTML fonts tags he then</font>

537
00:28:48,290 --> 00:28:54,550
<font color="#E5E5E5">moved on to consume it attributes the</font>

538
00:28:51,260 --> 00:28:56,840
<font color="#E5E5E5">face</font><font color="#CCCCCC"> attribute</font><font color="#E5E5E5"> in in this case the</font>

539
00:28:54,550 --> 00:29:01,600
<font color="#CCCCCC">decoder</font><font color="#E5E5E5"> will continue</font><font color="#CCCCCC"> reading from the</font>

540
00:28:56,840 --> 00:29:01,600
buffer<font color="#E5E5E5"> until</font><font color="#CCCCCC"> a closing bracket</font><font color="#E5E5E5"> is met</font>

541
00:29:01,810 --> 00:29:10,550
what this means is that in case<font color="#E5E5E5"> a</font>

542
00:29:04,490 --> 00:29:11,800
closing<font color="#E5E5E5"> bucket is missing then the</font>

543
00:29:10,550 --> 00:29:14,090
<font color="#CCCCCC">pulser</font><font color="#E5E5E5"> will just keep on reading</font>

544
00:29:11,800 --> 00:29:18,889
<font color="#E5E5E5">resulting in an outer boundaries</font>

545
00:29:14,090 --> 00:29:20,540
vulnerability and while we<font color="#E5E5E5"> ordered the</font>

546
00:29:18,890 --> 00:29:22,910
<font color="#E5E5E5">auditor the code manually we also</font>

547
00:29:20,540 --> 00:29:25,190
started fuzzing<font color="#E5E5E5"> VLC for subtitles</font>

548
00:29:22,910 --> 00:29:29,470
related vulnerability<font color="#E5E5E5"> and obviously our</font>

549
00:29:25,190 --> 00:29:32,510
<font color="#E5E5E5">weapon of choice was the brilliant AFL</font>

550
00:29:29,470 --> 00:29:34,610
this<font color="#CCCCCC"> security oriented father</font><font color="#E5E5E5"> employs</font>

551
00:29:32,510 --> 00:29:36,770
<font color="#CCCCCC">compile-time instrumentation and genetic</font>

552
00:29:34,610 --> 00:29:38,899
<font color="#E5E5E5">algorithms to discover new internal</font>

553
00:29:36,770 --> 00:29:41,750
<font color="#CCCCCC">states</font><font color="#E5E5E5"> and trigger edge cases in the</font>

554
00:29:38,900 --> 00:29:43,820
targeted binary so getting the first

555
00:29:41,750 --> 00:29:46,070
<font color="#E5E5E5">commando it was just a bit tricky</font>

556
00:29:43,820 --> 00:29:48,110
we created<font color="#E5E5E5"> the corpus and we also</font>

557
00:29:46,070 --> 00:29:50,450
created<font color="#CCCCCC"> a dictionary</font><font color="#E5E5E5"> but our main</font>

558
00:29:48,110 --> 00:29:54,139
obstacle was<font color="#E5E5E5"> the fact that our fuzzing</font>

559
00:29:50,450 --> 00:29:56,060
server<font color="#E5E5E5"> had no GUI so we overcame this</font>

560
00:29:54,140 --> 00:29:59,690
challenge<font color="#E5E5E5"> by using the transcode</font>

561
00:29:56,060 --> 00:30:02,000
functionality this option will make VLC

562
00:29:59,690 --> 00:30:02,490
convert any movies from<font color="#CCCCCC"> one codex</font><font color="#E5E5E5"> to</font>

563
00:30:02,000 --> 00:30:04,980
another

564
00:30:02,490 --> 00:30:06,960
attaching<font color="#E5E5E5"> the subtitles by but</font>

565
00:30:04,980 --> 00:30:11,130
displaying nothing so this was perfect

566
00:30:06,960 --> 00:30:12,780
to us so to the<font color="#CCCCCC"> corpus the corpus is</font><font color="#E5E5E5"> a</font>

567
00:30:11,130 --> 00:30:15,120
set of<font color="#CCCCCC"> initial test cases compiled</font>

568
00:30:12,780 --> 00:30:17,639
comprising<font color="#E5E5E5"> of valid files that represent</font>

569
00:30:15,120 --> 00:30:22,050
the protocol or functionality being fast

570
00:30:17,640 --> 00:30:24,809
<font color="#CCCCCC">and we plan to</font><font color="#E5E5E5"> start with a 30 and a SS</font>

571
00:30:22,050 --> 00:30:26,090
simply as these were the format formats

572
00:30:24,809 --> 00:30:28,800
that we results first

573
00:30:26,090 --> 00:30:30,959
so for<font color="#E5E5E5"> our corpus we cherry picked</font>

574
00:30:28,800 --> 00:30:33,270
various files that incorporated some of

575
00:30:30,960 --> 00:30:37,140
<font color="#CCCCCC">the</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> exotic features</font><font color="#E5E5E5"> that we</font>

576
00:30:33,270 --> 00:30:41,400
discussed earlier<font color="#CCCCCC"> and this is the basic</font>

577
00:30:37,140 --> 00:30:43,950
a time<font color="#E5E5E5"> convention of an SLC subtitles we</font>

578
00:30:41,400 --> 00:30:46,800
in<font color="#CCCCCC"> certain we intended</font><font color="#E5E5E5"> on adding</font><font color="#CCCCCC"> more</font>

579
00:30:43,950 --> 00:30:49,070
formats to the<font color="#CCCCCC"> copis as we go along</font><font color="#E5E5E5"> but</font>

580
00:30:46,800 --> 00:30:52,800
<font color="#E5E5E5">the amazing thing</font><font color="#CCCCCC"> is we didn't have to</font>

581
00:30:49,070 --> 00:30:54,780
because<font color="#E5E5E5"> AFL just blindly built valid</font>

582
00:30:52,800 --> 00:30:57,480
subtitles files of<font color="#E5E5E5"> different formats</font>

583
00:30:54,780 --> 00:31:00,710
<font color="#E5E5E5">with zero</font><font color="#CCCCCC"> knowledge in this case he</font>

584
00:30:57,480 --> 00:31:03,809
created the<font color="#CCCCCC"> JSS format all by</font><font color="#E5E5E5"> itself and</font>

585
00:31:00,710 --> 00:31:06,000
this<font color="#E5E5E5"> is a demonstration of one of effort</font>

586
00:31:03,809 --> 00:31:08,790
the itis strength which is assembly

587
00:31:06,000 --> 00:31:10,830
<font color="#CCCCCC">level implementation</font><font color="#E5E5E5"> because the odds of</font>

588
00:31:08,790 --> 00:31:13,260
a traditional<font color="#CCCCCC"> father that randomly flip</font>

589
00:31:10,830 --> 00:31:16,439
this to take one timing convention of

590
00:31:13,260 --> 00:31:19,350
<font color="#CCCCCC">SOP and turns it into</font><font color="#E5E5E5"> j SS</font><font color="#CCCCCC"> l extremely</font>

591
00:31:16,440 --> 00:31:21,900
low<font color="#E5E5E5"> however through this assembly level</font>

592
00:31:19,350 --> 00:31:24,570
instrumentation FL notices how my<font color="#E5E5E5"> no</font>

593
00:31:21,900 --> 00:31:26,850
mutations<font color="#CCCCCC"> are still getting</font><font color="#E5E5E5"> slightly</font>

594
00:31:24,570 --> 00:31:29,340
different code paths and it<font color="#E5E5E5"> uses those</font>

595
00:31:26,850 --> 00:31:30,570
as a seed for further<font color="#CCCCCC"> fuckin</font><font color="#E5E5E5"> rounds so</font>

596
00:31:29,340 --> 00:31:33,780
<font color="#CCCCCC">guy job</font>

597
00:31:30,570 --> 00:31:35,970
FL<font color="#E5E5E5"> and it didn't take it to</font><font color="#CCCCCC"> load too</font>

598
00:31:33,780 --> 00:31:40,110
<font color="#E5E5E5">long to lock down on a vulnerable</font>

599
00:31:35,970 --> 00:31:44,250
function called<font color="#CCCCCC"> path to</font><font color="#E5E5E5"> SS now</font><font color="#CCCCCC"> J</font><font color="#E5E5E5"> SS</font>

600
00:31:40,110 --> 00:31:46,620
stands for<font color="#CCCCCC"> j co subscript file and this</font>

601
00:31:44,250 --> 00:31:48,050
<font color="#E5E5E5">is a really flexible format it a lot and</font>

602
00:31:46,620 --> 00:31:50,459
<font color="#CCCCCC">helps some really interesting</font>

603
00:31:48,050 --> 00:31:53,700
functionalities<font color="#E5E5E5"> it relies heavily on</font>

604
00:31:50,460 --> 00:31:56,490
something called directives<font color="#E5E5E5"> and a</font>

605
00:31:53,700 --> 00:31:58,860
directive is a serious character code

606
00:31:56,490 --> 00:32:02,429
<font color="#E5E5E5">strung together and they determine</font>

607
00:31:58,860 --> 00:32:05,189
subtitles position<font color="#CCCCCC"> fonts color</font><font color="#E5E5E5"> and so</font>

608
00:32:02,429 --> 00:32:07,800
forth<font color="#CCCCCC"> and they can come in two forms as</font>

609
00:32:05,190 --> 00:32:11,250
a global directive<font color="#E5E5E5"> that will affect all</font>

610
00:32:07,800 --> 00:32:14,070
subtitles<font color="#E5E5E5"> below</font><font color="#CCCCCC"> it's in the text file</font><font color="#E5E5E5"> Oh</font>

611
00:32:11,250 --> 00:32:14,929
as an inline directive affecting<font color="#CCCCCC"> only</font>

612
00:32:14,070 --> 00:32:18,109
the current line

613
00:32:14,929 --> 00:32:21,169
now these are some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the more common</font>

614
00:32:18,109 --> 00:32:24,460
<font color="#CCCCCC">detective in JSF T which stands for</font>

615
00:32:21,169 --> 00:32:29,509
<font color="#E5E5E5">timer is</font><font color="#CCCCCC"> used to set the</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> resolution</font>

616
00:32:24,460 --> 00:32:31,729
<font color="#CCCCCC">100</font><font color="#E5E5E5"> units a second in this case s that</font>

617
00:32:29,509 --> 00:32:35,049
stands<font color="#E5E5E5"> for shift will cause all events</font>

618
00:32:31,729 --> 00:32:39,259
to occur<font color="#E5E5E5"> 20 time units sooner than usual</font>

619
00:32:35,049 --> 00:32:42,469
<font color="#CCCCCC">f</font><font color="#E5E5E5"> we set font number</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> because you can</font>

620
00:32:39,259 --> 00:32:45,109
<font color="#E5E5E5">predefined up to 10 fonts to Jacob font</font>

621
00:32:42,469 --> 00:32:48,019
18 which<font color="#CCCCCC"> is a mono color font that</font><font color="#E5E5E5"> is</font>

622
00:32:45,109 --> 00:32:52,639
available in<font color="#CCCCCC"> GS s and for an inline</font>

623
00:32:48,019 --> 00:32:54,830
directive<font color="#E5E5E5"> a</font><font color="#CCCCCC"> CP 2 will display the</font>

624
00:32:52,639 --> 00:32:57,998
following<font color="#E5E5E5"> text using color palette</font>

625
00:32:54,830 --> 00:33:01,549
number<font color="#CCCCCC"> 2 which can</font><font color="#E5E5E5"> be also predefined</font>

626
00:32:57,999 --> 00:33:05,799
so yes it<font color="#E5E5E5"> is very weird and</font><font color="#CCCCCC"> novia C does</font>

627
00:33:01,549 --> 00:33:08,869
not<font color="#E5E5E5"> do a great job in parsing those and</font>

628
00:33:05,799 --> 00:33:11,749
looking at the basic<font color="#E5E5E5"> pasta SS function</font>

629
00:33:08,869 --> 00:33:14,869
<font color="#E5E5E5">we can see</font><font color="#CCCCCC"> that VLC iterates over the</font>

630
00:33:11,749 --> 00:33:17,239
lines in<font color="#E5E5E5"> while loop</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> one by two the</font>

631
00:33:14,869 --> 00:33:19,339
time and it passes<font color="#E5E5E5"> the time codes and</font>

632
00:33:17,239 --> 00:33:22,399
the handful<font color="#E5E5E5"> of supported directives and</font>

633
00:33:19,339 --> 00:33:24,619
<font color="#CCCCCC">the text itself and the crush</font><font color="#E5E5E5"> found by</font>

634
00:33:22,399 --> 00:33:28,809
<font color="#E5E5E5">FL was due to an out of</font><font color="#CCCCCC"> bound read while</font>

635
00:33:24,619 --> 00:33:28,809
trying<font color="#E5E5E5"> to skip unsupported directives</font>

636
00:33:29,409 --> 00:33:34,309
here and<font color="#E5E5E5"> throughout a PSD text is</font><font color="#CCCCCC"> a</font>

637
00:33:32,539 --> 00:33:37,009
pointer to a null terminated string

638
00:33:34,309 --> 00:33:39,440
allocated on the heap<font color="#E5E5E5"> and the code</font>

639
00:33:37,009 --> 00:33:42,859
<font color="#E5E5E5">assumed a directive is always followed</font>

640
00:33:39,440 --> 00:33:45,139
by<font color="#CCCCCC"> space therefore</font><font color="#E5E5E5"> it will look for</font><font color="#CCCCCC"> that</font>

641
00:33:42,859 --> 00:33:47,869
space to<font color="#E5E5E5"> indicate the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> of a directive</font>

642
00:33:45,139 --> 00:33:50,119
in<font color="#CCCCCC"> case</font><font color="#E5E5E5"> the directive is written without</font>

643
00:33:47,869 --> 00:33:52,218
any following spaces this while loop

644
00:33:50,119 --> 00:33:56,589
would just skip the nominal<font color="#E5E5E5"> by</font>

645
00:33:52,219 --> 00:33:59,659
<font color="#CCCCCC">terminator</font><font color="#E5E5E5"> and overrun the buffer and</font>

646
00:33:56,589 --> 00:34:01,849
<font color="#CCCCCC">this gutter attention to the saw CSS</font>

647
00:33:59,659 --> 00:34:04,429
function and we soon manually found

648
00:34:01,849 --> 00:34:06,259
another<font color="#CCCCCC"> 2 out</font><font color="#E5E5E5"> of boundary issues in the</font>

649
00:34:04,429 --> 00:34:10,909
passing of the directives that<font color="#E5E5E5"> actually</font>

650
00:34:06,259 --> 00:34:14,119
were supported moving on with the<font color="#CCCCCC"> JSF</font>

651
00:34:10,909 --> 00:34:17,329
<font color="#CCCCCC">format we stumbled upon the color and</font>

652
00:34:14,119 --> 00:34:20,089
font directives<font color="#E5E5E5"> and as you can see this</font>

653
00:34:17,329 --> 00:34:22,669
code includes<font color="#CCCCCC"> a double increment to skip</font>

654
00:34:20,089 --> 00:34:24,739
<font color="#E5E5E5">from the directive over the space and</font>

655
00:34:22,668 --> 00:34:27,138
<font color="#CCCCCC">right to the arguments</font><font color="#E5E5E5"> but in case a</font>

656
00:34:24,739 --> 00:34:29,168
directive didn't<font color="#E5E5E5"> contain any argument to</font>

657
00:34:27,139 --> 00:34:31,520
follow it

658
00:34:29,168 --> 00:34:33,529
meaning it ended with<font color="#E5E5E5"> a null termination</font>

659
00:34:31,520 --> 00:34:35,599
<font color="#E5E5E5">this double</font><font color="#CCCCCC"> increments would just skip</font>

660
00:34:33,529 --> 00:34:37,609
the null<font color="#CCCCCC"> terminator but let's see this</font>

661
00:34:35,599 --> 00:34:43,609
how this<font color="#E5E5E5"> code is combined</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> the</font>

662
00:34:37,609 --> 00:34:45,918
bigger<font color="#CCCCCC"> picture so the entire chunk of</font>

663
00:34:43,609 --> 00:34:49,520
code is within<font color="#E5E5E5"> a while loop and here's a</font>

664
00:34:45,918 --> 00:34:51,020
double increment and skipping the null

665
00:34:49,520 --> 00:34:53,599
<font color="#E5E5E5">bytes we remain in this while loop</font>

666
00:34:51,020 --> 00:34:57,410
copying from PSD<font color="#E5E5E5"> text to ps3 text</font><font color="#CCCCCC"> to</font>

667
00:34:53,599 --> 00:35:00,799
however<font color="#E5E5E5"> PSD text to is only the length</font>

668
00:34:57,410 --> 00:35:03,020
of PSD text<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so while we read</font>

669
00:35:00,799 --> 00:35:06,380
out of<font color="#E5E5E5"> buffer at one point we also write</font>

670
00:35:03,020 --> 00:35:08,270
<font color="#E5E5E5">out</font><font color="#CCCCCC"> of buffer at another and this six</font>

671
00:35:06,380 --> 00:35:10,630
vulnerability<font color="#E5E5E5"> a he</font><font color="#CCCCCC"> pasted overflow</font>

672
00:35:08,270 --> 00:35:14,329
actually allowed us<font color="#CCCCCC"> to ultimately</font>

673
00:35:10,630 --> 00:35:17,000
<font color="#E5E5E5">execute arbitrary code at another case</font>

674
00:35:14,329 --> 00:35:18,740
<font color="#E5E5E5">my personal favorite</font><font color="#CCCCCC"> you can see that</font>

675
00:35:17,000 --> 00:35:21,460
when<font color="#E5E5E5"> the pulsing loop reaches a null</font>

676
00:35:18,740 --> 00:35:26,629
terminator<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> specific case it</font>

677
00:35:21,460 --> 00:35:30,829
intentionally decides to<font color="#E5E5E5"> skip it making</font>

678
00:35:26,630 --> 00:35:33,650
this number<font color="#E5E5E5"> seven</font><font color="#CCCCCC"> okay let's talk about</font>

679
00:35:30,829 --> 00:35:36,260
<font color="#CCCCCC">exploitation for</font><font color="#E5E5E5"> a second</font><font color="#CCCCCC"> and these bugs</font>

680
00:35:33,650 --> 00:35:38,539
are not<font color="#E5E5E5"> revealed to exploit however it</font>

681
00:35:36,260 --> 00:35:42,619
is interesting<font color="#CCCCCC"> to note that</font><font color="#E5E5E5"> the main</font>

682
00:35:38,539 --> 00:35:45,650
<font color="#E5E5E5">binary of VLC is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> is allowed or</font><font color="#CCCCCC"> PI</font>

683
00:35:42,619 --> 00:35:48,460
like it's called in Linux and by<font color="#E5E5E5"> design</font>

684
00:35:45,650 --> 00:35:52,069
the main binary<font color="#E5E5E5"> is just do the wiring</font>

685
00:35:48,460 --> 00:35:54,369
between<font color="#E5E5E5"> Libby LC and the plugins but it</font>

686
00:35:52,069 --> 00:35:57,259
still<font color="#CCCCCC"> offers some quite useful gadgets</font>

687
00:35:54,369 --> 00:36:00,109
for example these gadgets<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will find</font>

688
00:35:57,260 --> 00:36:02,329
the<font color="#E5E5E5"> symbol of whatever string is in LSI</font>

689
00:36:00,109 --> 00:36:04,549
and then call<font color="#CCCCCC"> it with Alby</font><font color="#E5E5E5"> X's and</font>

690
00:36:02,329 --> 00:36:07,640
<font color="#E5E5E5">arguments which is pretty useful gadget</font>

691
00:36:04,549 --> 00:36:10,849
right so for<font color="#E5E5E5"> a quick</font><font color="#CCCCCC"> PLC we had one</font><font color="#E5E5E5"> of</font>

692
00:36:07,640 --> 00:36:13,730
the team member can I<font color="#E5E5E5"> live net with also</font>

693
00:36:10,849 --> 00:36:15,529
<font color="#E5E5E5">have a</font><font color="#CCCCCC"> Linux from its father</font><font color="#E5E5E5"> side to</font>

694
00:36:13,730 --> 00:36:19,339
develop an expert for this<font color="#CCCCCC"> vulnerability</font>

695
00:36:15,529 --> 00:36:21,789
for<font color="#E5E5E5"> the moment ignoring</font><font color="#CCCCCC"> a SLR and this</font>

696
00:36:19,339 --> 00:36:21,788
is the demo

697
00:36:32,569 --> 00:36:38,940
and cook<font color="#E5E5E5"> okay</font>

698
00:36:36,360 --> 00:36:40,650
let's remove this research<font color="#E5E5E5"> we discussed</font>

699
00:36:38,940 --> 00:36:43,920
the complete madness<font color="#E5E5E5"> that is the</font>

700
00:36:40,650 --> 00:36:45,390
subtitle landscape<font color="#E5E5E5"> we saw we had over 25</font>

701
00:36:43,920 --> 00:36:48,030
subtitle formats

702
00:36:45,390 --> 00:36:50,160
none of them well documented<font color="#CCCCCC"> without any</font>

703
00:36:48,030 --> 00:36:52,800
dedicated libraries and zero

704
00:36:50,160 --> 00:36:54,600
<font color="#E5E5E5">standardization between players we</font><font color="#CCCCCC"> are</font>

705
00:36:52,800 --> 00:36:57,960
able to<font color="#E5E5E5"> gain full remote code execution</font>

706
00:36:54,600 --> 00:36:59,640
on<font color="#CCCCCC"> 4 major platforms now please note</font>

707
00:36:57,960 --> 00:37:01,920
that these were<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only platforms that</font>

708
00:36:59,640 --> 00:37:04,470
<font color="#E5E5E5">we looked at and this means that other</font>

709
00:37:01,920 --> 00:37:07,140
platforms<font color="#E5E5E5"> other I'll probably vulnerable</font>

710
00:37:04,470 --> 00:37:11,279
to subtitle<font color="#CCCCCC"> drive-by attack</font><font color="#E5E5E5"> we are also</font>

711
00:37:07,140 --> 00:37:13,319
able<font color="#CCCCCC"> to manipulate the</font><font color="#E5E5E5"> the subtitle</font>

712
00:37:11,280 --> 00:37:16,280
repository ranking scheme<font color="#E5E5E5"> thus taking</font>

713
00:37:13,320 --> 00:37:20,040
control<font color="#E5E5E5"> completely over the subtitle</font>

714
00:37:16,280 --> 00:37:22,770
supply chain<font color="#E5E5E5"> and this means that what</font><font color="#CCCCCC"> we</font>

715
00:37:20,040 --> 00:37:24,930
<font color="#CCCCCC">just presented is a new malware</font><font color="#E5E5E5"> delivery</font>

716
00:37:22,770 --> 00:37:28,140
system that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> completely transparent</font>

717
00:37:24,930 --> 00:37:31,379
<font color="#CCCCCC">and requires no user interaction</font><font color="#E5E5E5"> which</font>

718
00:37:28,140 --> 00:37:35,100
in our case included over<font color="#E5E5E5"> 220 million</font>

719
00:37:31,380 --> 00:37:37,080
potential victims and the notion of

720
00:37:35,100 --> 00:37:39,330
attackers being able to<font color="#E5E5E5"> upload malicious</font>

721
00:37:37,080 --> 00:37:41,160
subtitles to a major repository<font color="#E5E5E5"> and</font>

722
00:37:39,330 --> 00:37:42,870
forcing different players to download

723
00:37:41,160 --> 00:37:45,810
them should now be taking into<font color="#CCCCCC"> account</font>

724
00:37:42,870 --> 00:37:48,710
as a new valid attack vector<font color="#E5E5E5"> and prepare</font>

725
00:37:45,810 --> 00:37:50,700
the security vendors to mitigate it<font color="#CCCCCC"> and</font>

726
00:37:48,710 --> 00:37:51,380
now the moment<font color="#CCCCCC"> you've all been waiting</font>

727
00:37:50,700 --> 00:37:53,730
<font color="#E5E5E5">for</font>

728
00:37:51,380 --> 00:37:56,940
<font color="#CCCCCC">hombre and</font><font color="#E5E5E5"> myself we made a little bonus</font>

729
00:37:53,730 --> 00:37:58,560
<font color="#E5E5E5">for you we curated our favorite skulk</font>

730
00:37:56,940 --> 00:38:01,500
popping scenes into a beautiful

731
00:37:58,560 --> 00:38:03,960
compilation and actually on<font color="#E5E5E5"> the first</font>

732
00:38:01,500 --> 00:38:04,560
<font color="#E5E5E5">draft of this stock</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> bonus was</font>

733
00:38:03,960 --> 00:38:08,970
<font color="#E5E5E5">titled</font>

734
00:38:04,560 --> 00:38:11,490
two girls one<font color="#E5E5E5"> cock but that's almost but</font>

735
00:38:08,970 --> 00:38:14,100
that almost<font color="#CCCCCC"> got us both fired so we had</font>

736
00:38:11,490 --> 00:38:16,910
to tone it<font color="#E5E5E5"> down a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> and here it</font>

737
00:38:14,100 --> 00:38:16,910
is<font color="#CCCCCC"> enjoy</font>

738
00:38:24,930 --> 00:38:36,009
people<font color="#E5E5E5"> sometimes make mistakes</font><font color="#CCCCCC"> yes they</font>

739
00:38:31,390 --> 00:38:37,569
do<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> it's not a real hoist this box</font>

740
00:38:36,009 --> 00:38:40,119
just<font color="#E5E5E5"> interpret signals from the computer</font>

741
00:38:37,569 --> 00:38:44,739
<font color="#CCCCCC">intransitive to sound shall</font><font color="#E5E5E5"> we say and</font>

742
00:38:40,119 --> 00:38:50,709
then oh just think it miss them

743
00:38:44,739 --> 00:39:10,940
yeah weird isn't it weird is it so I

744
00:38:50,709 --> 00:39:15,098
think<font color="#E5E5E5"> is okay you</font><font color="#CCCCCC"> want a flame up</font>

745
00:39:10,940 --> 00:39:15,099
<font color="#E5E5E5">set off to my dear friend</font>

746
00:39:20,410 --> 00:39:29,990
<font color="#E5E5E5">okay and that's just a sample</font><font color="#CCCCCC"> of the</font>

747
00:39:27,410 --> 00:39:33,620
<font color="#E5E5E5">exciting exploits ahead in our first</font>

748
00:39:29,990 --> 00:39:36,649
feature<font color="#E5E5E5"> motion picture</font><font color="#CCCCCC"> fully memoranda</font>

749
00:39:33,620 --> 00:39:45,259
folks<font color="#E5E5E5"> make a note not to</font><font color="#CCCCCC"> MIT good</font>

750
00:39:36,650 --> 00:39:47,560
thinking problem thank you thank you

751
00:39:45,260 --> 00:39:47,560
<font color="#E5E5E5">guys</font>

752
00:39:47,650 --> 00:40:03,690
[Music]

753
00:39:53,960 --> 00:40:14,460
thank you any<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> depends the</font>

754
00:40:03,690 --> 00:40:24,720
<font color="#E5E5E5">committee shut down the Internet who</font>

755
00:40:14,460 --> 00:40:26,400
knows<font color="#CCCCCC"> I won't be a calculator nope</font><font color="#E5E5E5"> no</font>

756
00:40:24,720 --> 00:40:28,799
these are<font color="#E5E5E5"> the only platforms that we</font>

757
00:40:26,400 --> 00:40:34,680
looked at and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> successful</font>

758
00:40:28,799 --> 00:40:39,989
with<font color="#CCCCCC"> all of them so please do fine</font><font color="#E5E5E5"> all</font>

759
00:40:34,680 --> 00:40:42,118
<font color="#E5E5E5">right that shouldn't be an issue</font><font color="#CCCCCC"> because</font>

760
00:40:39,989 --> 00:40:51,799
it's part<font color="#CCCCCC"> of the movie</font><font color="#E5E5E5"> so it's not being</font>

761
00:40:42,119 --> 00:40:56,180
parsed by the player having tested it

762
00:40:51,799 --> 00:40:56,180
<font color="#E5E5E5">those video games have subtitles</font>

763
00:41:00,710 --> 00:41:05,919
yes

764
00:41:02,820 --> 00:41:05,919
[Music]

765
00:41:11,590 --> 00:41:17,270
with the<font color="#CCCCCC"> kodi box itself</font><font color="#E5E5E5"> now we tested</font>

766
00:41:14,870 --> 00:41:18,830
it on<font color="#E5E5E5"> the software itself</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> operating</font>

767
00:41:17,270 --> 00:41:32,630
<font color="#E5E5E5">system shouldn't really make a</font>

768
00:41:18,830 --> 00:41:36,830
difference yeah couldn't tell<font color="#CCCCCC"> you yeah</font>

769
00:41:32,630 --> 00:41:38,360
this is<font color="#E5E5E5"> just the ones who looked at safe</font>

770
00:41:36,830 --> 00:41:45,560
to assume it has vulnerabilities<font color="#CCCCCC"> other</font>

771
00:41:38,360 --> 00:41:47,100
platforms as well<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you very</font>

772
00:41:45,560 --> 00:41:48,320
much thank<font color="#E5E5E5"> you</font>

773
00:41:47,100 --> 00:41:52,499
[Applause]

774
00:41:48,320 --> 00:41:52,499
[Music]

