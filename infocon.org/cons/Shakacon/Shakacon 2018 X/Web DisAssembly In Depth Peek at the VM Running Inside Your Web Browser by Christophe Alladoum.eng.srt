1
00:00:00,740 --> 00:00:06,299
<font color="#E5E5E5">all right hi</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> thanks for</font>

2
00:00:04,259 --> 00:00:08,880
<font color="#E5E5E5">attending</font><font color="#CCCCCC"> so today I will be presenting</font>

3
00:00:06,299 --> 00:00:09,860
to<font color="#CCCCCC"> you a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about my research on</font>

4
00:00:08,880 --> 00:00:11,880
webassembly

5
00:00:09,860 --> 00:00:14,370
what it is and<font color="#E5E5E5"> what I find it</font>

6
00:00:11,880 --> 00:00:15,599
interesting<font color="#CCCCCC"> so I'll go real quick with</font>

7
00:00:14,370 --> 00:00:18,448
an intro because<font color="#E5E5E5"> there's a lot of things</font>

8
00:00:15,599 --> 00:00:21,840
to cover it's it's a pretty<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pretty big</font>

9
00:00:18,449 --> 00:00:24,810
subject<font color="#CCCCCC"> so I'm Chris</font><font color="#E5E5E5"> I go by</font>

10
00:00:21,840 --> 00:00:27,570
<font color="#CCCCCC">head Z on IRC and Twitter and forums and</font>

11
00:00:24,810 --> 00:00:30,119
I'm currently a researcher forum for

12
00:00:27,570 --> 00:00:32,130
surface labs<font color="#E5E5E5"> in Vancouver so normally</font>

13
00:00:30,119 --> 00:00:34,019
it's the<font color="#E5E5E5"> web assembly stuff is not the</font>

14
00:00:32,130 --> 00:00:35,550
<font color="#E5E5E5">kind of thing</font><font color="#CCCCCC"> that I do</font><font color="#E5E5E5"> I'm mostly</font>

15
00:00:34,020 --> 00:00:38,600
interesting in<font color="#E5E5E5"> low-level stuff so</font>

16
00:00:35,550 --> 00:00:41,578
operating<font color="#E5E5E5"> system and assembly</font><font color="#CCCCCC"> and</font>

17
00:00:38,600 --> 00:00:43,440
breaking stuff<font color="#CCCCCC"> and exploiting them but</font>

18
00:00:41,579 --> 00:00:45,600
the reason for<font color="#E5E5E5"> this research was mostly</font>

19
00:00:43,440 --> 00:00:47,730
that I<font color="#E5E5E5"> observed that there's kind of a</font>

20
00:00:45,600 --> 00:00:49,440
disconnection between people<font color="#CCCCCC"> that say</font>

21
00:00:47,730 --> 00:00:51,898
yeah I've heard of<font color="#CCCCCC"> webassembly</font>

22
00:00:49,440 --> 00:00:53,190
and people who<font color="#E5E5E5"> actually know</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> do you</font>

23
00:00:51,899 --> 00:00:55,260
know what can you<font color="#E5E5E5"> tell me in detail what</font>

24
00:00:53,190 --> 00:00:58,019
what is assembly yeah<font color="#CCCCCC"> I'm not really</font>

25
00:00:55,260 --> 00:01:00,599
<font color="#E5E5E5">sure what it is on how it works</font><font color="#CCCCCC"> the</font>

26
00:00:58,020 --> 00:01:02,899
problem is today<font color="#E5E5E5"> web assembly is</font>

27
00:01:00,600 --> 00:01:05,189
everywhere<font color="#E5E5E5"> it's if you have a device</font>

28
00:01:02,899 --> 00:01:07,670
<font color="#CCCCCC">like if you have a web browser</font><font color="#E5E5E5"> modern</font>

29
00:01:05,188 --> 00:01:09,689
web browser<font color="#E5E5E5"> you're you</font><font color="#CCCCCC"> are webassembly</font>

30
00:01:07,670 --> 00:01:12,090
<font color="#E5E5E5">capable so yeah it's definitely</font>

31
00:01:09,689 --> 00:01:14,298
<font color="#E5E5E5">something that it's worth check out a</font>

32
00:01:12,090 --> 00:01:17,430
quick<font color="#E5E5E5"> word about what we'll cover today</font>

33
00:01:14,299 --> 00:01:18,750
<font color="#CCCCCC">so this is the</font><font color="#E5E5E5"> introduction and we'll go</font>

34
00:01:17,430 --> 00:01:20,130
<font color="#CCCCCC">through a brief history of web</font>

35
00:01:18,750 --> 00:01:22,290
<font color="#E5E5E5">assemblies see where it's coming from</font>

36
00:01:20,130 --> 00:01:25,350
<font color="#E5E5E5">because there is a reason and a good</font>

37
00:01:22,290 --> 00:01:29,369
reason for web assembly<font color="#E5E5E5"> well reasons</font>

38
00:01:25,350 --> 00:01:32,880
actually<font color="#E5E5E5"> and then we'll cover the</font>

39
00:01:29,369 --> 00:01:35,040
specification version<font color="#E5E5E5"> 1.0 as it's called</font>

40
00:01:32,880 --> 00:01:37,310
it's called<font color="#E5E5E5"> the MVP</font><font color="#CCCCCC"> which has nothing to</font>

41
00:01:35,040 --> 00:01:39,960
do with<font color="#CCCCCC"> Microsoft most valuable but it's</font>

42
00:01:37,310 --> 00:01:41,670
that's the acronym that<font color="#E5E5E5"> they decided and</font>

43
00:01:39,960 --> 00:01:44,100
<font color="#E5E5E5">we'll spend a long long time covering</font>

44
00:01:41,670 --> 00:01:45,570
the attack surface because that's what I

45
00:01:44,100 --> 00:01:47,610
do<font color="#E5E5E5"> that's what I like</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> believe</font>

46
00:01:45,570 --> 00:01:50,398
what you<font color="#CCCCCC"> like as well is does</font>

47
00:01:47,610 --> 00:01:53,070
webassembly<font color="#E5E5E5"> weaken or strengthen the</font>

48
00:01:50,399 --> 00:01:55,140
security<font color="#CCCCCC"> of</font><font color="#E5E5E5"> web browser and then we'll</font>

49
00:01:53,070 --> 00:01:58,919
cover sorry<font color="#E5E5E5"> we'll cover the the future</font>

50
00:01:55,140 --> 00:02:02,939
and conclude what<font color="#CCCCCC"> we'll what</font><font color="#E5E5E5"> we will not</font>

51
00:01:58,920 --> 00:02:05,460
talk<font color="#CCCCCC"> about is everything that</font><font color="#E5E5E5"> is not web</font>

52
00:02:02,939 --> 00:02:07,619
browser related so I'll just have like

53
00:02:05,460 --> 00:02:09,720
probably<font color="#E5E5E5"> one slide just to show</font><font color="#CCCCCC"> that</font>

54
00:02:07,619 --> 00:02:11,940
it's<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> because web assembly is is</font>

55
00:02:09,720 --> 00:02:13,050
its own<font color="#CCCCCC"> environment it's not web</font>

56
00:02:11,940 --> 00:02:16,500
specific but it

57
00:02:13,050 --> 00:02:18,660
design for<font color="#E5E5E5"> web browsers</font><font color="#CCCCCC"> so but just</font><font color="#E5E5E5"> just</font>

58
00:02:16,500 --> 00:02:22,830
so you know this kind of thing exists so

59
00:02:18,660 --> 00:02:24,540
yeah<font color="#E5E5E5"> okay so if you've</font><font color="#CCCCCC"> been using web</font>

60
00:02:22,830 --> 00:02:26,430
browsers long enough<font color="#E5E5E5"> those are gonna</font>

61
00:02:24,540 --> 00:02:30,630
acronyms probably look familiar to you

62
00:02:26,430 --> 00:02:34,110
<font color="#CCCCCC">and if they don't</font><font color="#E5E5E5"> it's okay</font><font color="#CCCCCC"> but let's go</font>

63
00:02:30,630 --> 00:02:35,760
a<font color="#CCCCCC"> little bit back in time so back</font><font color="#E5E5E5"> in 96</font>

64
00:02:34,110 --> 00:02:38,190
Netscape came up with this really good

65
00:02:35,760 --> 00:02:40,160
idea<font color="#E5E5E5"> how about</font><font color="#CCCCCC"> we have some code running</font>

66
00:02:38,190 --> 00:02:43,230
on<font color="#E5E5E5"> a web browser on the client side</font>

67
00:02:40,160 --> 00:02:45,150
<font color="#E5E5E5">which is which was a good</font><font color="#CCCCCC"> idea so</font><font color="#E5E5E5"> that's</font>

68
00:02:43,230 --> 00:02:49,500
how<font color="#E5E5E5"> JavaScript came to life</font><font color="#CCCCCC"> in a first</font>

69
00:02:45,150 --> 00:02:51,210
<font color="#E5E5E5">place and then we realized that</font>

70
00:02:49,500 --> 00:02:52,500
javascript<font color="#E5E5E5"> is actually terrible for</font>

71
00:02:51,210 --> 00:02:55,050
performance<font color="#E5E5E5"> it's really good for</font>

72
00:02:52,500 --> 00:02:57,630
interaction with<font color="#CCCCCC"> users but performance</font>

73
00:02:55,050 --> 00:02:59,850
<font color="#E5E5E5">is it it's a disaster and</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> design</font><font color="#CCCCCC"> it's</font>

74
00:02:57,630 --> 00:03:02,940
kind<font color="#E5E5E5"> of very hard to to make it better</font>

75
00:02:59,850 --> 00:03:04,140
although developer<font color="#E5E5E5"> JavaScript engine</font>

76
00:03:02,940 --> 00:03:06,690
developers are<font color="#CCCCCC"> doing a pretty good job</font>

77
00:03:04,140 --> 00:03:09,209
at it<font color="#CCCCCC"> and so we've had a lot of</font>

78
00:03:06,690 --> 00:03:12,180
<font color="#E5E5E5">different technologies coming up if you</font>

79
00:03:09,210 --> 00:03:14,310
<font color="#CCCCCC">if you know some of those logos then</font>

80
00:03:12,180 --> 00:03:17,640
yeah<font color="#E5E5E5"> and some of</font><font color="#CCCCCC"> them are quite</font>

81
00:03:14,310 --> 00:03:20,670
interesting and original<font color="#E5E5E5"> ideas</font><font color="#CCCCCC"> but they</font>

82
00:03:17,640 --> 00:03:24,869
were not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> successful</font><font color="#E5E5E5"> and they had</font>

83
00:03:20,670 --> 00:03:27,690
one very very bad<font color="#E5E5E5"> issues which is they</font>

84
00:03:24,870 --> 00:03:30,030
were quite hard to control<font color="#CCCCCC"> from the web</font>

85
00:03:27,690 --> 00:03:32,250
<font color="#E5E5E5">browser so the</font><font color="#CCCCCC"> way it used</font><font color="#E5E5E5"> to work for</font>

86
00:03:30,030 --> 00:03:35,190
<font color="#E5E5E5">well the way it still works actually for</font>

87
00:03:32,250 --> 00:03:37,560
Java applets<font color="#E5E5E5"> and flash and so on is</font><font color="#CCCCCC"> that</font>

88
00:03:35,190 --> 00:03:40,050
the web browser<font color="#E5E5E5"> would just own a process</font>

89
00:03:37,560 --> 00:03:42,480
that would be the flash player<font color="#CCCCCC"> and so on</font>

90
00:03:40,050 --> 00:03:44,010
and give the data the code<font color="#E5E5E5"> to is it</font>

91
00:03:42,480 --> 00:03:46,109
shipped<font color="#E5E5E5"> directly to this process and</font>

92
00:03:44,010 --> 00:03:47,760
then it's kind of<font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> have both</font><font color="#CCCCCC"> to</font>

93
00:03:46,110 --> 00:03:49,170
<font color="#CCCCCC">have</font><font color="#E5E5E5"> the web browser saying yeah okay</font>

94
00:03:47,760 --> 00:03:50,459
what you're<font color="#E5E5E5"> doing I</font><font color="#CCCCCC"> don't really like it</font>

95
00:03:49,170 --> 00:03:52,049
so<font color="#CCCCCC"> I'm going to stop the execution</font>

96
00:03:50,459 --> 00:03:54,630
something something like<font color="#CCCCCC"> that it's more</font>

97
00:03:52,050 --> 00:03:56,489
of a<font color="#E5E5E5"> one-shot</font><font color="#CCCCCC"> thing and the worst</font>

98
00:03:54,630 --> 00:03:58,109
<font color="#E5E5E5">probably the worst thing especially in</font>

99
00:03:56,489 --> 00:04:03,030
the web environment<font color="#CCCCCC"> is that it's all</font>

100
00:03:58,110 --> 00:04:07,050
<font color="#CCCCCC">proprietary so it's not a standard but</font>

101
00:04:03,030 --> 00:04:09,690
in 2010 some engineers at Google at<font color="#E5E5E5"> yeah</font>

102
00:04:07,050 --> 00:04:11,370
<font color="#E5E5E5">working for</font><font color="#CCCCCC"> the chrome team I came</font><font color="#E5E5E5"> up</font>

103
00:04:09,690 --> 00:04:13,620
with this really<font color="#E5E5E5"> really interesting idea</font>

104
00:04:11,370 --> 00:04:17,220
which which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> NACO</font>

105
00:04:13,620 --> 00:04:19,530
<font color="#CCCCCC">4 which stands for</font><font color="#E5E5E5"> Native Client the</font>

106
00:04:17,220 --> 00:04:21,390
idea behind it it's to have code native

107
00:04:19,529 --> 00:04:23,609
code running in<font color="#E5E5E5"> a sandbox</font>

108
00:04:21,390 --> 00:04:25,280
<font color="#E5E5E5">so they said</font><font color="#CCCCCC"> javascript is bad for</font>

109
00:04:23,610 --> 00:04:28,639
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> let's have code that</font>

110
00:04:25,280 --> 00:04:31,419
actually<font color="#CCCCCC"> execute at</font><font color="#E5E5E5"> native speed for</font>

111
00:04:28,639 --> 00:04:33,230
your<font color="#CCCCCC"> your</font><font color="#E5E5E5"> machine but it's not totally</font>

112
00:04:31,420 --> 00:04:36,169
<font color="#CCCCCC">overexposed so</font><font color="#E5E5E5"> that you can</font><font color="#CCCCCC"> for you</font>

113
00:04:33,230 --> 00:04:38,510
cannot for example<font color="#CCCCCC"> long some</font><font color="#E5E5E5"> Cisco land</font>

114
00:04:36,169 --> 00:04:39,859
<font color="#E5E5E5">pop up some calc or whatever and so it</font>

115
00:04:38,510 --> 00:04:41,960
was<font color="#CCCCCC"> really good it's a really good</font><font color="#E5E5E5"> idea</font>

116
00:04:39,860 --> 00:04:43,490
<font color="#E5E5E5">a really good technology</font><font color="#CCCCCC"> but the problem</font>

117
00:04:41,960 --> 00:04:45,349
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that it never</font><font color="#E5E5E5"> became a standard and</font>

118
00:04:43,490 --> 00:04:48,620
<font color="#CCCCCC">it's chrome specific</font><font color="#E5E5E5"> so we don't really</font>

119
00:04:45,350 --> 00:04:50,300
<font color="#E5E5E5">like that still a good technology and</font>

120
00:04:48,620 --> 00:04:54,760
the performance were there<font color="#E5E5E5"> so then we</font>

121
00:04:50,300 --> 00:04:57,919
had a<font color="#E5E5E5"> s</font><font color="#CCCCCC"> MJS</font><font color="#E5E5E5"> which was an</font><font color="#CCCCCC"> idea from</font>

122
00:04:54,760 --> 00:05:00,500
<font color="#E5E5E5">Mozilla so if you've read JavaScript</font>

123
00:04:57,919 --> 00:05:03,229
code and<font color="#CCCCCC"> you use these you Street syntax</font>

124
00:05:00,500 --> 00:05:05,900
<font color="#E5E5E5">that's what well that's part of what</font>

125
00:05:03,230 --> 00:05:07,550
you're using<font color="#E5E5E5"> is asm.js</font><font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> subset</font>

126
00:05:05,900 --> 00:05:11,150
of JavaScript that is<font color="#E5E5E5"> going to optimize</font>

127
00:05:07,550 --> 00:05:13,760
the<font color="#E5E5E5"> code so that you can run it faster</font>

128
00:05:11,150 --> 00:05:16,400
<font color="#E5E5E5">but even if</font><font color="#CCCCCC"> the even</font><font color="#E5E5E5"> at the fastest</font>

129
00:05:13,760 --> 00:05:19,610
level performance<font color="#E5E5E5"> they'll show that it's</font>

130
00:05:16,400 --> 00:05:23,450
usually around<font color="#E5E5E5"> twice as fast as native</font>

131
00:05:19,610 --> 00:05:25,220
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> okay it's it's</font><font color="#E5E5E5"> still</font>

132
00:05:23,450 --> 00:05:27,979
a good idea to performance improvements

133
00:05:25,220 --> 00:05:30,710
so that's that's<font color="#E5E5E5"> good but we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> really</font>

134
00:05:27,979 --> 00:05:35,900
<font color="#E5E5E5">far from native</font><font color="#CCCCCC"> performance like what we</font>

135
00:05:30,710 --> 00:05:38,810
had in<font color="#CCCCCC"> Knakal</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> standards is more</font>

136
00:05:35,900 --> 00:05:41,390
of a big hack around<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> because</font>

137
00:05:38,810 --> 00:05:45,410
<font color="#E5E5E5">again</font><font color="#CCCCCC"> JavaScript is</font><font color="#E5E5E5"> really hard</font><font color="#CCCCCC"> to</font>

138
00:05:41,390 --> 00:05:49,430
integrate for for<font color="#E5E5E5"> having better</font>

139
00:05:45,410 --> 00:05:51,710
performance and<font color="#E5E5E5"> that's why the three</font>

140
00:05:49,430 --> 00:05:55,100
<font color="#E5E5E5">major web and row companies so Mozilla</font>

141
00:05:51,710 --> 00:05:56,810
<font color="#E5E5E5">Google and Microsoft came together and</font>

142
00:05:55,100 --> 00:05:59,600
worked for about<font color="#E5E5E5"> two years</font>

143
00:05:56,810 --> 00:06:02,330
on a unifying standard so it's a w3c

144
00:05:59,600 --> 00:06:05,210
<font color="#E5E5E5">standard the specification is out there</font>

145
00:06:02,330 --> 00:06:08,229
it's open<font color="#E5E5E5"> which this which try</font><font color="#CCCCCC"> to</font>

146
00:06:05,210 --> 00:06:10,400
combine<font color="#CCCCCC"> only the best between</font><font color="#E5E5E5"> the</font>

147
00:06:08,229 --> 00:06:11,690
lessons from the past so Nicole and

148
00:06:10,400 --> 00:06:14,090
<font color="#E5E5E5">asm.js</font>

149
00:06:11,690 --> 00:06:17,150
and what it is<font color="#E5E5E5"> in the end is you've got</font>

150
00:06:14,090 --> 00:06:19,340
this virtual<font color="#CCCCCC"> machine that</font><font color="#E5E5E5"> will be</font>

151
00:06:17,150 --> 00:06:21,289
running specific code that can<font color="#CCCCCC"> be</font>

152
00:06:19,340 --> 00:06:24,049
reinterpreted<font color="#E5E5E5"> by the web</font><font color="#CCCCCC"> browser to</font>

153
00:06:21,289 --> 00:06:26,630
<font color="#CCCCCC">produce native code we'll see</font><font color="#E5E5E5"> that in in</font>

154
00:06:24,050 --> 00:06:28,490
<font color="#E5E5E5">the detail but it's a fully contained</font>

155
00:06:26,630 --> 00:06:30,740
environment that will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> running in</font><font color="#E5E5E5"> your</font>

156
00:06:28,490 --> 00:06:32,380
browser<font color="#CCCCCC"> a totally dedicated VM which has</font>

157
00:06:30,740 --> 00:06:36,380
its own file format<font color="#E5E5E5"> and its own</font>

158
00:06:32,380 --> 00:06:38,070
instruction set and it was<font color="#E5E5E5"> good like it</font>

159
00:06:36,380 --> 00:06:43,230
<font color="#E5E5E5">was really really</font>

160
00:06:38,070 --> 00:06:45,750
<font color="#E5E5E5">it is good so in March 2017</font><font color="#CCCCCC"> after two</font>

161
00:06:43,230 --> 00:06:48,750
<font color="#E5E5E5">years in the</font><font color="#CCCCCC"> making it became a</font><font color="#E5E5E5"> standard</font>

162
00:06:45,750 --> 00:06:51,330
so that's what the MVP is now so for MVP

163
00:06:48,750 --> 00:06:54,810
which stands for Minimum Viable Product

164
00:06:51,330 --> 00:06:58,979
<font color="#CCCCCC">and it was</font><font color="#E5E5E5"> designed to be minimum enough</font>

165
00:06:54,810 --> 00:07:00,870
so that<font color="#E5E5E5"> it's it can be it's it's a good</font>

166
00:06:58,980 --> 00:07:03,090
subset to<font color="#E5E5E5"> start with but it's viable so</font>

167
00:07:00,870 --> 00:07:06,120
you can already<font color="#CCCCCC"> start using it and</font>

168
00:07:03,090 --> 00:07:08,940
<font color="#E5E5E5">create your own web assembly application</font>

169
00:07:06,120 --> 00:07:10,380
and it's working<font color="#E5E5E5"> pretty good</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use</font>

170
00:07:08,940 --> 00:07:14,280
starting already<font color="#E5E5E5"> to have some video</font>

171
00:07:10,380 --> 00:07:16,590
<font color="#E5E5E5">games that are</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> ported</font><font color="#CCCCCC"> to to</font><font color="#E5E5E5"> to</font>

172
00:07:14,280 --> 00:07:19,349
webassembly<font color="#CCCCCC"> I just last week I saw this</font>

173
00:07:16,590 --> 00:07:21,419
tweet about someone who ported them<font color="#E5E5E5"> to</font>

174
00:07:19,350 --> 00:07:24,740
to web<font color="#E5E5E5"> assemblies so that kind of</font><font color="#CCCCCC"> shows</font>

175
00:07:21,420 --> 00:07:27,950
you what can<font color="#E5E5E5"> be done in</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> future</font>

176
00:07:24,740 --> 00:07:32,130
and it's<font color="#E5E5E5"> everywhere today</font>

177
00:07:27,950 --> 00:07:34,020
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 75% of all web browsers downloaded</font>

178
00:07:32,130 --> 00:07:35,730
on<font color="#E5E5E5"> your phone on</font><font color="#CCCCCC"> your web browser is</font>

179
00:07:34,020 --> 00:07:37,049
supporting web assembly so it's

180
00:07:35,730 --> 00:07:38,790
definitely<font color="#E5E5E5"> not something that can be</font>

181
00:07:37,050 --> 00:07:41,370
<font color="#CCCCCC">left out</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> technology</font>

182
00:07:38,790 --> 00:07:42,960
this<font color="#E5E5E5"> it's going to die</font><font color="#CCCCCC"> it's actually</font>

183
00:07:41,370 --> 00:07:46,470
<font color="#E5E5E5">quite the opposite the development is</font>

184
00:07:42,960 --> 00:07:48,570
<font color="#E5E5E5">quite active so in a nutshell we've got</font>

185
00:07:46,470 --> 00:07:50,820
it takes all<font color="#E5E5E5"> the box so every other</font>

186
00:07:48,570 --> 00:07:54,000
problems<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we used to have on ASM</font>

187
00:07:50,820 --> 00:07:56,159
<font color="#CCCCCC">DOJ's and Knakal or</font><font color="#E5E5E5"> all gone now we've</font>

188
00:07:54,000 --> 00:07:58,260
got a standard<font color="#E5E5E5"> so something that's open</font>

189
00:07:56,160 --> 00:08:01,560
for everybody to implement reemployment

190
00:07:58,260 --> 00:08:04,560
<font color="#CCCCCC">play with and we've got close to</font><font color="#E5E5E5"> native</font>

191
00:08:01,560 --> 00:08:08,280
performance<font color="#E5E5E5"> so yeah that was a pretty</font>

192
00:08:04,560 --> 00:08:10,140
<font color="#E5E5E5">good deal but how fast is it exactly</font>

193
00:08:08,280 --> 00:08:13,679
so I decided one of the first part of<font color="#E5E5E5"> my</font>

194
00:08:10,140 --> 00:08:15,960
research<font color="#CCCCCC"> was</font><font color="#E5E5E5"> I saw all those article</font>

195
00:08:13,680 --> 00:08:19,290
<font color="#E5E5E5">blog</font><font color="#CCCCCC"> post webOS at least 30 times</font><font color="#E5E5E5"> faster</font>

196
00:08:15,960 --> 00:08:21,210
<font color="#E5E5E5">than JavaScript so that strikes me and I</font>

197
00:08:19,290 --> 00:08:23,850
<font color="#E5E5E5">decided</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run my</font><font color="#CCCCCC"> own tests so I created</font>

198
00:08:21,210 --> 00:08:26,580
several<font color="#E5E5E5"> files so C file javascript file</font>

199
00:08:23,850 --> 00:08:29,160
<font color="#E5E5E5">and was on file</font><font color="#CCCCCC"> that would execute</font><font color="#E5E5E5"> code</font>

200
00:08:26,580 --> 00:08:32,789
which is purely compute computational in

201
00:08:29,160 --> 00:08:34,740
this case<font color="#CCCCCC"> i reimplemented</font><font color="#E5E5E5"> shut 256 in</font><font color="#CCCCCC"> c</font>

202
00:08:32,789 --> 00:08:37,530
you<font color="#E5E5E5"> compile it in web assembly and had</font>

203
00:08:34,740 --> 00:08:40,380
the same done for<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> and the</font>

204
00:08:37,530 --> 00:08:42,478
results were<font color="#E5E5E5"> I was the first surprised</font>

205
00:08:40,380 --> 00:08:46,320
<font color="#E5E5E5">with with these with those results</font><font color="#CCCCCC"> I</font>

206
00:08:42,479 --> 00:08:50,370
don't know if you<font color="#E5E5E5"> can see but the web</font>

207
00:08:46,320 --> 00:08:53,730
assembly is way faster<font color="#E5E5E5"> than</font>

208
00:08:50,370 --> 00:08:56,040
<font color="#CCCCCC">javascript can</font><font color="#E5E5E5"> ever possibly</font><font color="#CCCCCC"> be and on</font>

209
00:08:53,730 --> 00:08:59,130
top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that if you start comparing how</font>

210
00:08:56,040 --> 00:09:02,130
fast is<font color="#CCCCCC"> it how fast</font><font color="#E5E5E5"> it is with native PE</font>

211
00:08:59,130 --> 00:09:03,840
<font color="#E5E5E5">being executed without speed</font>

212
00:09:02,130 --> 00:09:07,140
optimization<font color="#CCCCCC"> computer speed optimization</font>

213
00:09:03,840 --> 00:09:09,960
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then built in the compiler you can</font>

214
00:09:07,140 --> 00:09:11,550
see that it's<font color="#CCCCCC"> actually very</font><font color="#E5E5E5"> close so if</font>

215
00:09:09,960 --> 00:09:13,950
we're enabling<font color="#CCCCCC"> the speed optimization</font>

216
00:09:11,550 --> 00:09:16,560
<font color="#E5E5E5">then it's going</font><font color="#CCCCCC"> to be a bit more well</font>

217
00:09:13,950 --> 00:09:18,660
<font color="#CCCCCC">the difference will be will be a bit</font>

218
00:09:16,560 --> 00:09:21,150
more but without those those

219
00:09:18,660 --> 00:09:23,130
<font color="#CCCCCC">optimisation</font><font color="#E5E5E5"> yeah it's it's fast it's</font>

220
00:09:21,150 --> 00:09:25,140
<font color="#E5E5E5">really fast</font><font color="#CCCCCC"> as long as you're staying</font><font color="#E5E5E5"> in</font>

221
00:09:23,130 --> 00:09:27,450
the computational area<font color="#E5E5E5"> so as long</font><font color="#CCCCCC"> as</font>

222
00:09:25,140 --> 00:09:29,970
you're<font color="#CCCCCC"> doing pretty much on the math and</font>

223
00:09:27,450 --> 00:09:33,120
there's low level<font color="#E5E5E5"> of interaction which</font>

224
00:09:29,970 --> 00:09:34,560
<font color="#E5E5E5">webassembly cannot handle and it's not</font>

225
00:09:33,120 --> 00:09:38,160
<font color="#E5E5E5">just for the web so this is the</font><font color="#CCCCCC"> slider I</font>

226
00:09:34,560 --> 00:09:40,439
was<font color="#E5E5E5"> mentioning earlier this is showing</font>

227
00:09:38,160 --> 00:09:42,569
<font color="#E5E5E5">you</font><font color="#CCCCCC"> that some people have decided to</font><font color="#E5E5E5"> use</font>

228
00:09:40,440 --> 00:09:45,570
web assembly in a lot of other different

229
00:09:42,570 --> 00:09:47,310
<font color="#E5E5E5">area you've</font><font color="#CCCCCC"> got some dedicated virtual</font>

230
00:09:45,570 --> 00:09:49,830
<font color="#E5E5E5">machine so if you decide to</font><font color="#CCCCCC"> have your</font><font color="#E5E5E5"> C</font>

231
00:09:47,310 --> 00:09:52,050
file<font color="#E5E5E5"> write your own</font><font color="#CCCCCC"> printf hello</font><font color="#E5E5E5"> world</font>

232
00:09:49,830 --> 00:09:54,360
<font color="#E5E5E5">and have it executed natively</font><font color="#CCCCCC"> you can</font>

233
00:09:52,050 --> 00:09:57,390
use the<font color="#CCCCCC"> watt</font><font color="#E5E5E5"> VM</font><font color="#CCCCCC"> that is going to do</font><font color="#E5E5E5"> that</font>

234
00:09:54,360 --> 00:10:01,800
for you it's<font color="#E5E5E5"> embedded in smart contract</font>

235
00:09:57,390 --> 00:10:03,600
<font color="#E5E5E5">on the EOS technology and one of the</font>

236
00:10:01,800 --> 00:10:07,040
most surprisingly surprising thing for

237
00:10:03,600 --> 00:10:10,290
<font color="#CCCCCC">me was</font><font color="#E5E5E5"> it's now you can also use it in</font>

238
00:10:07,040 --> 00:10:12,390
<font color="#E5E5E5">windbag</font><font color="#CCCCCC"> so if you're familiar with the</font>

239
00:10:10,290 --> 00:10:14,069
windows debugger<font color="#CCCCCC"> since the version</font><font color="#E5E5E5"> 10</font>

240
00:10:12,390 --> 00:10:16,890
<font color="#E5E5E5">they've decided to include chakracore</font>

241
00:10:14,070 --> 00:10:19,170
<font color="#CCCCCC">and the result is that</font><font color="#E5E5E5"> now you can have</font>

242
00:10:16,890 --> 00:10:21,360
<font color="#E5E5E5">web assembly that will be running inside</font>

243
00:10:19,170 --> 00:10:23,040
<font color="#E5E5E5">inside the JavaScript</font><font color="#CCCCCC"> engine</font><font color="#E5E5E5"> of chakra</font>

244
00:10:21,360 --> 00:10:25,170
which<font color="#CCCCCC"> is running</font><font color="#E5E5E5"> inside with debug I</font>

245
00:10:23,040 --> 00:10:26,339
have no idea what to do with<font color="#CCCCCC"> that but</font>

246
00:10:25,170 --> 00:10:30,420
<font color="#CCCCCC">you can still</font><font color="#E5E5E5"> do it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's pretty</font>

247
00:10:26,340 --> 00:10:33,210
cool so<font color="#E5E5E5"> now that I hope that I've</font>

248
00:10:30,420 --> 00:10:35,310
convinced<font color="#CCCCCC"> you with how awesome web</font>

249
00:10:33,210 --> 00:10:38,730
assembly is I suggest we<font color="#E5E5E5"> move forward</font>

250
00:10:35,310 --> 00:10:42,239
<font color="#E5E5E5">and start actually</font><font color="#CCCCCC"> looking at it and see</font>

251
00:10:38,730 --> 00:10:45,510
what it is so we'll be talking about<font color="#CCCCCC"> the</font>

252
00:10:42,240 --> 00:10:48,420
MVP the Minimum Viable Product<font color="#CCCCCC"> which</font>

253
00:10:45,510 --> 00:10:53,010
once again<font color="#E5E5E5"> took approximately</font><font color="#CCCCCC"> two years</font>

254
00:10:48,420 --> 00:10:57,209
<font color="#E5E5E5">to to be completed and the the idea</font>

255
00:10:53,010 --> 00:10:59,580
behind it<font color="#CCCCCC"> was to have a</font><font color="#E5E5E5"> virtual machine</font>

256
00:10:57,210 --> 00:11:02,820
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> to ring complete at a specific</font>

257
00:10:59,580 --> 00:11:03,240
<font color="#CCCCCC">amount of instruction in this case the</font>

258
00:11:02,820 --> 00:11:06,929
<font color="#E5E5E5">MV</font>

259
00:11:03,240 --> 00:11:08,850
<font color="#CCCCCC">States</font><font color="#E5E5E5"> 172 instructions declare that</font>

260
00:11:06,929 --> 00:11:11,220
<font color="#E5E5E5">will perform all kinds of arithmetic</font>

261
00:11:08,850 --> 00:11:14,100
operation along with control<font color="#CCCCCC"> flow</font>

262
00:11:11,220 --> 00:11:16,889
manipulation<font color="#E5E5E5"> memory load and store and</font>

263
00:11:14,100 --> 00:11:19,019
so on and the virtual machine<font color="#CCCCCC"> itself is</font>

264
00:11:16,889 --> 00:11:20,879
stack<font color="#E5E5E5"> based so it's a little bit similar</font>

265
00:11:19,019 --> 00:11:22,649
<font color="#CCCCCC">to Python for example you won't have any</font>

266
00:11:20,879 --> 00:11:25,019
kind of register<font color="#E5E5E5"> it will be a little</font>

267
00:11:22,649 --> 00:11:27,170
<font color="#CCCCCC">Indian</font><font color="#E5E5E5"> virtual machine and with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 4</font>

268
00:11:25,019 --> 00:11:30,480
gigabytes of the neural dress space

269
00:11:27,170 --> 00:11:33,029
interestingly the virtual machine does

270
00:11:30,480 --> 00:11:35,730
<font color="#CCCCCC">not well</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> webassembly</font><font color="#E5E5E5"> format does not</font>

271
00:11:33,029 --> 00:11:37,920
understand what<font color="#E5E5E5"> pointers are so in this</font>

272
00:11:35,730 --> 00:11:40,949
way it's kind of awesome<font color="#E5E5E5"> because it's</font>

273
00:11:37,920 --> 00:11:44,998
going<font color="#E5E5E5"> to be killing a whole bunch of of</font>

274
00:11:40,949 --> 00:11:48,269
vulnerabilities but<font color="#E5E5E5"> also of exploitation</font>

275
00:11:44,999 --> 00:11:51,360
techniques straight in the air<font color="#E5E5E5"> and they</font>

276
00:11:48,269 --> 00:11:53,999
will be using<font color="#E5E5E5"> the vlq which is variable</font>

277
00:11:51,360 --> 00:11:55,980
<font color="#E5E5E5">length quantity for representing the</font>

278
00:11:53,999 --> 00:11:57,660
data<font color="#E5E5E5"> in the blossom format that will go</font>

279
00:11:55,980 --> 00:12:01,199
into the covering but first let's have<font color="#E5E5E5"> a</font>

280
00:11:57,660 --> 00:12:03,209
<font color="#CCCCCC">look at the instruction instructions</font><font color="#E5E5E5"> as</font>

281
00:12:01,199 --> 00:12:04,410
you<font color="#CCCCCC"> can see that's the subset</font><font color="#E5E5E5"> of all</font><font color="#CCCCCC"> the</font>

282
00:12:03,209 --> 00:12:06,540
<font color="#E5E5E5">instructions but it's a pretty good</font>

283
00:12:04,410 --> 00:12:10,949
summary to give you an idea<font color="#CCCCCC"> it's very</font>

284
00:12:06,540 --> 00:12:15,469
basic<font color="#CCCCCC"> it's it's like yeah kind of a risk</font>

285
00:12:10,949 --> 00:12:20,219
environment<font color="#CCCCCC"> and it's all all</font><font color="#E5E5E5"> those</font>

286
00:12:15,470 --> 00:12:22,649
<font color="#E5E5E5">instructions or do not as you can see do</font>

287
00:12:20,220 --> 00:12:24,540
<font color="#CCCCCC">not have any cisco</font><font color="#E5E5E5"> there is no way of</font>

288
00:12:22,649 --> 00:12:26,220
interacting<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> system that</font><font color="#E5E5E5"> doesn't</font>

289
00:12:24,540 --> 00:12:29,819
<font color="#E5E5E5">make sense</font><font color="#CCCCCC"> on webassembly</font>

290
00:12:26,220 --> 00:12:32,999
as far as the as far as web browsers<font color="#CCCCCC"> are</font>

291
00:12:29,819 --> 00:12:36,029
concerned the<font color="#CCCCCC"> only caveat to that is</font>

292
00:12:32,999 --> 00:12:38,249
those instructions<font color="#E5E5E5"> the</font><font color="#CCCCCC"> to last</font>

293
00:12:36,029 --> 00:12:41,519
instruction grow memory and current

294
00:12:38,249 --> 00:12:44,819
memory<font color="#E5E5E5"> which kind of allow a way to</font>

295
00:12:41,519 --> 00:12:46,589
allocate<font color="#E5E5E5"> another page or</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> ask for the</font>

296
00:12:44,819 --> 00:12:49,559
<font color="#E5E5E5">JavaScript engine to allocate another</font>

297
00:12:46,589 --> 00:12:55,199
page to the<font color="#E5E5E5"> webassembly engine but</font>

298
00:12:49,559 --> 00:12:56,999
besides this it's<font color="#E5E5E5"> pretty much only it's</font>

299
00:12:55,199 --> 00:12:58,618
pretty<font color="#E5E5E5"> much only done for a computation</font>

300
00:12:56,999 --> 00:13:02,269
<font color="#E5E5E5">because there is no</font><font color="#CCCCCC"> cisco there's no</font>

301
00:12:58,619 --> 00:13:04,920
interaction way so pretty simple again

302
00:13:02,269 --> 00:13:07,470
<font color="#E5E5E5">so what does it</font><font color="#CCCCCC"> look like a wasn't</font><font color="#E5E5E5"> file</font>

303
00:13:04,920 --> 00:13:10,349
<font color="#E5E5E5">you you're going to have a header which</font>

304
00:13:07,470 --> 00:13:13,259
is<font color="#E5E5E5"> a byte always start with null byte</font>

305
00:13:10,350 --> 00:13:14,330
<font color="#E5E5E5">followed by a SM and then the standard</font>

306
00:13:13,259 --> 00:13:16,190
the

307
00:13:14,330 --> 00:13:19,070
the version number<font color="#E5E5E5"> which</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> be</font>

308
00:13:16,190 --> 00:13:21,320
represented<font color="#E5E5E5"> as a little</font><font color="#CCCCCC"> endian encoded</font><font color="#E5E5E5"> D</font>

309
00:13:19,070 --> 00:13:23,420
word so in this case<font color="#E5E5E5"> today is the</font>

310
00:13:21,320 --> 00:13:25,280
<font color="#CCCCCC">version one that isn't implemented so if</font>

311
00:13:23,420 --> 00:13:27,349
you want<font color="#E5E5E5"> to create your own first</font><font color="#CCCCCC"> wasn't</font>

312
00:13:25,280 --> 00:13:29,630
<font color="#CCCCCC">file</font><font color="#E5E5E5"> well it's super easy you just use</font>

313
00:13:27,350 --> 00:13:31,130
printf<font color="#E5E5E5"> and you could be based on</font><font color="#CCCCCC"> the by</font>

314
00:13:29,630 --> 00:13:34,220
the following bytes that<font color="#CCCCCC"> I just</font>

315
00:13:31,130 --> 00:13:37,640
mentioned<font color="#E5E5E5"> and you got your first quantum</font>

316
00:13:34,220 --> 00:13:39,620
file array and following the header

317
00:13:37,640 --> 00:13:42,170
you've got sections and all sections are

318
00:13:39,620 --> 00:13:44,780
going<font color="#CCCCCC"> to dictate</font><font color="#E5E5E5"> just like any other</font>

319
00:13:42,170 --> 00:13:47,360
format<font color="#E5E5E5"> such as file format such as else</font>

320
00:13:44,780 --> 00:13:49,600
<font color="#E5E5E5">now going to dictate</font><font color="#CCCCCC"> how the binary the</font>

321
00:13:47,360 --> 00:13:53,630
module<font color="#CCCCCC"> the wiser</font><font color="#E5E5E5"> module is going to be</font>

322
00:13:49,600 --> 00:13:55,880
manipulated<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there the header must</font>

323
00:13:53,630 --> 00:13:59,210
have an identifier which is an integer

324
00:13:55,880 --> 00:14:01,790
<font color="#E5E5E5">that will state the purpose of the</font>

325
00:13:59,210 --> 00:14:03,230
<font color="#E5E5E5">current section and following the</font><font color="#CCCCCC"> the</font>

326
00:14:01,790 --> 00:14:05,030
identifier you can have<font color="#E5E5E5"> optional</font>

327
00:14:03,230 --> 00:14:08,240
information<font color="#CCCCCC"> and then the body which is</font>

328
00:14:05,030 --> 00:14:11,260
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual content and which</font><font color="#CCCCCC"> identifier</font>

329
00:14:08,240 --> 00:14:13,640
do we know today<font color="#E5E5E5"> there is 12 identifiers</font>

330
00:14:11,260 --> 00:14:15,410
implemented and they cover everything

331
00:14:13,640 --> 00:14:17,240
that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of makes sense when</font><font color="#E5E5E5"> you're</font>

332
00:14:15,410 --> 00:14:19,459
defining a new file format<font color="#E5E5E5"> so you've got</font>

333
00:14:17,240 --> 00:14:22,400
a<font color="#CCCCCC"> code section you've got function</font>

334
00:14:19,460 --> 00:14:25,190
section you've got global<font color="#E5E5E5"> you've got one</font>

335
00:14:22,400 --> 00:14:28,220
<font color="#CCCCCC">dedicated for the</font><font color="#E5E5E5"> memory and so on an</font>

336
00:14:25,190 --> 00:14:30,740
<font color="#E5E5E5">interesting one is the the ID equal to</font>

337
00:14:28,220 --> 00:14:32,800
<font color="#CCCCCC">zero which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the custom</font><font color="#E5E5E5"> one and as you</font>

338
00:14:30,740 --> 00:14:35,030
can<font color="#CCCCCC"> see the ID</font><font color="#E5E5E5"> is zero so it's kind of</font>

339
00:14:32,800 --> 00:14:37,640
it's kind of showing that<font color="#CCCCCC"> webassembly</font>

340
00:14:35,030 --> 00:14:39,829
<font color="#CCCCCC">once again was meant to be extended</font>

341
00:14:37,640 --> 00:14:43,160
while extendable and extended in the

342
00:14:39,830 --> 00:14:46,100
future and today you<font color="#CCCCCC"> can already use</font>

343
00:14:43,160 --> 00:14:49,040
those those custom sections so we'll

344
00:14:46,100 --> 00:14:51,950
cover a<font color="#CCCCCC"> little bit in well dig into a</font>

345
00:14:49,040 --> 00:14:54,790
<font color="#E5E5E5">little bit those those those sections</font>

346
00:14:51,950 --> 00:14:57,380
actually<font color="#E5E5E5"> only</font><font color="#CCCCCC"> the most interesting ones</font>

347
00:14:54,790 --> 00:15:00,010
I'll start with the function section the

348
00:14:57,380 --> 00:15:03,410
function section going it's going<font color="#E5E5E5"> to</font>

349
00:15:00,010 --> 00:15:05,689
define all the signatures<font color="#E5E5E5"> of all the</font>

350
00:15:03,410 --> 00:15:08,300
functions<font color="#E5E5E5"> inside the module so when you</font>

351
00:15:05,690 --> 00:15:11,300
when you've got let's<font color="#CCCCCC"> talk let's say a C</font>

352
00:15:08,300 --> 00:15:15,140
<font color="#E5E5E5">file which will have a function compute</font>

353
00:15:11,300 --> 00:15:19,339
<font color="#CCCCCC">PI</font><font color="#E5E5E5"> Fibonacci</font><font color="#CCCCCC"> and all that we want</font><font color="#E5E5E5"> to</font>

354
00:15:15,140 --> 00:15:20,510
expose<font color="#CCCCCC"> that to web assembly then when</font>

355
00:15:19,340 --> 00:15:23,720
you're<font color="#E5E5E5"> going to be compiling the</font><font color="#CCCCCC"> code</font>

356
00:15:20,510 --> 00:15:26,180
the compiler will<font color="#E5E5E5"> generate the function</font>

357
00:15:23,720 --> 00:15:26,720
section that holds<font color="#E5E5E5"> all that will</font><font color="#CCCCCC"> be</font>

358
00:15:26,180 --> 00:15:31,508
<font color="#E5E5E5">nothing</font>

359
00:15:26,720 --> 00:15:34,040
<font color="#E5E5E5">than a table with the type and</font><font color="#CCCCCC"> number of</font>

360
00:15:31,509 --> 00:15:36,379
arguments parameters that this function

361
00:15:34,040 --> 00:15:38,599
takes<font color="#E5E5E5"> and also the number and type of</font>

362
00:15:36,379 --> 00:15:40,939
<font color="#CCCCCC">the value after of the return value</font>

363
00:15:38,600 --> 00:15:43,069
sorry<font color="#E5E5E5"> and everything will be stored in a</font>

364
00:15:40,939 --> 00:15:44,750
temple and assigned to<font color="#E5E5E5"> it and index and</font>

365
00:15:43,069 --> 00:15:46,878
this index<font color="#E5E5E5"> is extremely important</font>

366
00:15:44,750 --> 00:15:48,769
<font color="#E5E5E5">because as</font><font color="#CCCCCC"> you may remember I mentioned</font>

367
00:15:46,879 --> 00:15:50,629
<font color="#E5E5E5">that there's no pointer in webassembly</font>

368
00:15:48,769 --> 00:15:52,399
<font color="#E5E5E5">that means that what happens when you</font>

369
00:15:50,629 --> 00:15:53,990
want to call a function<font color="#E5E5E5"> you don't you</font>

370
00:15:52,399 --> 00:15:56,540
can't call a function just<font color="#CCCCCC"> like</font><font color="#E5E5E5"> what you</font>

371
00:15:53,990 --> 00:15:58,399
<font color="#E5E5E5">would do in you know any other file</font>

372
00:15:56,540 --> 00:16:00,529
format but in this<font color="#E5E5E5"> in this instead of</font>

373
00:15:58,399 --> 00:16:02,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will be calling an index to</font>

374
00:16:00,529 --> 00:16:06,079
this function<font color="#CCCCCC"> and that provides a huge</font>

375
00:16:02,660 --> 00:16:08,029
<font color="#E5E5E5">advantage which is it's going to it's</font>

376
00:16:06,079 --> 00:16:09,439
going<font color="#E5E5E5"> to allow the loader</font><font color="#CCCCCC"> when it's</font>

377
00:16:08,029 --> 00:16:11,600
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> parsing the web assembly</font>

378
00:16:09,439 --> 00:16:13,370
code to check<font color="#CCCCCC"> okay now</font><font color="#E5E5E5"> I've got two</font>

379
00:16:11,600 --> 00:16:16,939
arguments that<font color="#E5E5E5"> are trying to be calling</font>

380
00:16:13,370 --> 00:16:21,170
function at offset at index<font color="#E5E5E5"> sorry at</font>

381
00:16:16,939 --> 00:16:23,209
index<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> do I have such index yes no and</font>

382
00:16:21,170 --> 00:16:24,889
if I do<font color="#CCCCCC"> I know</font><font color="#E5E5E5"> exactly the number</font><font color="#CCCCCC"> of</font>

383
00:16:23,209 --> 00:16:27,199
argument this function is expecting and

384
00:16:24,889 --> 00:16:29,689
also what's going to<font color="#E5E5E5"> be to what's going</font>

385
00:16:27,199 --> 00:16:32,689
<font color="#E5E5E5">to be returned so that's going to be</font>

386
00:16:29,689 --> 00:16:37,939
killing<font color="#E5E5E5"> a lot of possible kind of</font>

387
00:16:32,689 --> 00:16:40,339
<font color="#E5E5E5">control flow hijack a few extra sections</font>

388
00:16:37,939 --> 00:16:42,969
that<font color="#E5E5E5"> are important the export</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> import</font>

389
00:16:40,339 --> 00:16:47,180
will respectively be responsible for

390
00:16:42,970 --> 00:16:49,670
<font color="#E5E5E5">showing the</font><font color="#CCCCCC"> web assembly functions</font><font color="#E5E5E5"> from</font>

391
00:16:47,180 --> 00:16:52,699
<font color="#E5E5E5">the</font><font color="#CCCCCC"> web assembly module to the</font><font color="#E5E5E5"> outer</font>

392
00:16:49,670 --> 00:16:55,729
world so it can<font color="#E5E5E5"> either be</font><font color="#CCCCCC"> Verge</font><font color="#E5E5E5"> I'm</font>

393
00:16:52,699 --> 00:16:57,490
sorry<font color="#E5E5E5"> it was a module or it can also</font><font color="#CCCCCC"> be</font>

394
00:16:55,730 --> 00:17:00,319
<font color="#E5E5E5">the JavaScript engine you can call</font>

395
00:16:57,490 --> 00:17:02,360
wasn't function directly<font color="#CCCCCC"> from JavaScript</font>

396
00:17:00,319 --> 00:17:04,520
and the import it's the other way<font color="#E5E5E5"> around</font>

397
00:17:02,360 --> 00:17:06,110
<font color="#CCCCCC">it's going to allow JavaScript</font><font color="#E5E5E5"> function</font>

398
00:17:04,520 --> 00:17:11,449
or<font color="#E5E5E5"> Chavez could point</font><font color="#CCCCCC"> or and</font><font color="#E5E5E5"> object to</font>

399
00:17:06,109 --> 00:17:13,990
<font color="#CCCCCC">be passed to the bottom VM</font><font color="#E5E5E5"> start section</font>

400
00:17:11,449 --> 00:17:16,370
is pretty<font color="#CCCCCC"> much self-explanatory</font><font color="#E5E5E5"> and</font>

401
00:17:13,990 --> 00:17:18,789
global global section will hold all the

402
00:17:16,369 --> 00:17:22,520
global<font color="#E5E5E5"> variable again</font><font color="#CCCCCC"> assigned to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font>

403
00:17:18,789 --> 00:17:25,189
<font color="#CCCCCC">stored by</font><font color="#E5E5E5"> index so that might</font><font color="#CCCCCC"> be a</font>

404
00:17:22,520 --> 00:17:29,120
<font color="#E5E5E5">little bit abstract</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's go for a</font>

405
00:17:25,189 --> 00:17:31,450
<font color="#CCCCCC">quick demo of how what webassembly</font>

406
00:17:29,120 --> 00:17:35,408
<font color="#E5E5E5">actually is</font>

407
00:17:31,450 --> 00:17:43,970
so here<font color="#CCCCCC"> Karin or if you can see</font>

408
00:17:35,409 --> 00:17:47,330
that might be<font color="#E5E5E5"> better okay</font><font color="#CCCCCC"> so I wrote</font>

409
00:17:43,970 --> 00:17:49,460
this hello Chaka Khan was<font color="#E5E5E5"> m-file so the</font>

410
00:17:47,330 --> 00:17:51,980
format is called<font color="#CCCCCC"> s-expression it's a</font>

411
00:17:49,460 --> 00:17:54,740
little bit similar to<font color="#CCCCCC"> Lisp</font><font color="#E5E5E5"> for those who</font>

412
00:17:51,980 --> 00:17:58,100
know this will be<font color="#CCCCCC"> the native format</font><font color="#E5E5E5"> that</font>

413
00:17:54,740 --> 00:18:01,789
you will be able<font color="#E5E5E5"> to write what assembly</font>

414
00:17:58,100 --> 00:18:04,189
code in but there's a much easier way as

415
00:18:01,789 --> 00:18:06,200
as we will cover<font color="#E5E5E5"> and here as you can see</font>

416
00:18:04,190 --> 00:18:08,750
<font color="#CCCCCC">we've got</font><font color="#E5E5E5"> this module this new wasn't</font>

417
00:18:06,200 --> 00:18:10,789
<font color="#E5E5E5">module that we'll be importing a print</font>

418
00:18:08,750 --> 00:18:12,710
<font color="#CCCCCC">function from somewhere and</font><font color="#E5E5E5"> this print</font>

419
00:18:10,789 --> 00:18:14,539
function I have<font color="#CCCCCC"> to declare what it looks</font>

420
00:18:12,710 --> 00:18:16,130
like<font color="#E5E5E5"> and in this case it will take two</font>

421
00:18:14,539 --> 00:18:19,429
parameter and do not and won't be

422
00:18:16,130 --> 00:18:21,710
returning<font color="#E5E5E5"> anything and it has a memory</font>

423
00:18:19,429 --> 00:18:23,630
<font color="#E5E5E5">because the</font><font color="#CCCCCC"> curl</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> sorry the data has</font>

424
00:18:21,710 --> 00:18:27,230
to<font color="#E5E5E5"> live somewhere</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this memory I'm</font>

425
00:18:23,630 --> 00:18:30,289
going to have I'm going to store a

426
00:18:27,230 --> 00:18:32,029
<font color="#E5E5E5">string that is hello Chaka Khan and all</font>

427
00:18:30,289 --> 00:18:34,190
my function<font color="#CCCCCC"> Mane is going</font><font color="#E5E5E5"> to be doing in</font>

428
00:18:32,029 --> 00:18:35,960
this case will<font color="#CCCCCC"> be to</font><font color="#E5E5E5"> code the print</font>

429
00:18:34,190 --> 00:18:37,549
<font color="#E5E5E5">function which is coming from somewhere</font>

430
00:18:35,960 --> 00:18:39,950
at this point<font color="#E5E5E5"> webassembly</font>

431
00:18:37,549 --> 00:18:44,090
engine<font color="#E5E5E5"> doesn't know at all where it's</font>

432
00:18:39,950 --> 00:18:46,640
coming from<font color="#E5E5E5"> and when the function main</font>

433
00:18:44,090 --> 00:18:48,500
is being which<font color="#CCCCCC"> is loaded</font><font color="#E5E5E5"> as exportable</font>

434
00:18:46,640 --> 00:18:51,620
<font color="#CCCCCC">as you can see when it's being called</font>

435
00:18:48,500 --> 00:18:54,020
<font color="#E5E5E5">it's going to be looking up for the</font>

436
00:18:51,620 --> 00:18:59,600
inside the memory section<font color="#E5E5E5"> at offset zero</font>

437
00:18:54,020 --> 00:19:03,500
<font color="#E5E5E5">and printing 15 bytes from them so you</font>

438
00:18:59,600 --> 00:19:06,340
can<font color="#E5E5E5"> use the web assembly toolkits</font><font color="#CCCCCC"> to</font>

439
00:19:03,500 --> 00:19:06,340
compile the<font color="#CCCCCC"> code</font>

440
00:19:12,280 --> 00:19:19,940
and what's<font color="#E5E5E5"> its compiled you've got your</font>

441
00:19:15,620 --> 00:19:21,830
first wasn't file which looks<font color="#E5E5E5"> something</font>

442
00:19:19,940 --> 00:19:25,310
like this<font color="#CCCCCC"> there's not really easy to</font>

443
00:19:21,830 --> 00:19:29,990
<font color="#E5E5E5">understand easy to manipulate</font><font color="#CCCCCC"> so what</font>

444
00:19:25,310 --> 00:19:32,929
I've<font color="#E5E5E5"> done is I've used created a kitey</font>

445
00:19:29,990 --> 00:19:38,650
kitey parser<font color="#CCCCCC"> if you don't know what</font>

446
00:19:32,930 --> 00:19:42,520
Taita is then what is going<font color="#E5E5E5"> on</font>

447
00:19:38,650 --> 00:19:42,520
do<font color="#E5E5E5"> I</font><font color="#CCCCCC"> have Internet</font>

448
00:19:47,220 --> 00:19:57,700
<font color="#E5E5E5">okay that's weird okay we'll get back to</font>

449
00:19:53,590 --> 00:20:00,370
this demo<font color="#E5E5E5"> I</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> to move on so yeah</font>

450
00:19:57,700 --> 00:20:03,309
they're part<font color="#CCCCCC"> of this research</font><font color="#E5E5E5"> I had to</font>

451
00:20:00,370 --> 00:20:04,629
<font color="#E5E5E5">create some some tools because a lot of</font>

452
00:20:03,309 --> 00:20:08,139
<font color="#E5E5E5">tools that were already existing</font><font color="#CCCCCC"> were</font>

453
00:20:04,630 --> 00:20:10,480
<font color="#E5E5E5">not sufficient and yeah I will all</font>

454
00:20:08,140 --> 00:20:13,630
release<font color="#E5E5E5"> the tool at the end of this</font>

455
00:20:10,480 --> 00:20:15,610
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> so yeah time for</font><font color="#E5E5E5"> a live</font>

456
00:20:13,630 --> 00:20:18,940
demo apparently things can still go

457
00:20:15,610 --> 00:20:20,770
wrong so how will you<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to create</font>

458
00:20:18,940 --> 00:20:22,210
<font color="#E5E5E5">your C file and inject it into your</font>

459
00:20:20,770 --> 00:20:23,740
<font color="#E5E5E5">browser</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> most in straight</font>

460
00:20:22,210 --> 00:20:25,870
interesting part<font color="#E5E5E5"> and that's where we</font>

461
00:20:23,740 --> 00:20:27,549
<font color="#E5E5E5">introduce a lot of tools and the</font><font color="#CCCCCC"> most</font>

462
00:20:25,870 --> 00:20:31,750
<font color="#E5E5E5">interesting one is the Emscripten</font>

463
00:20:27,549 --> 00:20:34,120
<font color="#E5E5E5">Emscripten</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> toolkit</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> says it's a</font>

464
00:20:31,750 --> 00:20:36,580
bunch of tools that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> going to allow</font>

465
00:20:34,120 --> 00:20:39,699
you that will provide the compiler that

466
00:20:36,580 --> 00:20:43,659
<font color="#E5E5E5">will generate web assembly code directly</font>

467
00:20:39,700 --> 00:20:45,730
from your your C code<font color="#E5E5E5"> and I'm not going</font>

468
00:20:43,660 --> 00:20:46,900
to go too much<font color="#CCCCCC"> into the details but the</font>

469
00:20:45,730 --> 00:20:49,030
way it's going<font color="#E5E5E5"> to look</font><font color="#CCCCCC"> like it's going</font>

470
00:20:46,900 --> 00:20:51,429
<font color="#CCCCCC">to</font><font color="#E5E5E5"> take your C code transform it and</font>

471
00:20:49,030 --> 00:20:52,899
output as you<font color="#CCCCCC"> can see the wasone</font><font color="#E5E5E5"> code</font>

472
00:20:51,429 --> 00:20:55,030
<font color="#E5E5E5">but it's not the only</font><font color="#CCCCCC"> tool that is</font>

473
00:20:52,900 --> 00:20:58,870
capable<font color="#E5E5E5"> of</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> that not earlier than</font>

474
00:20:55,030 --> 00:21:03,040
<font color="#E5E5E5">last April go finally finally go decided</font>

475
00:20:58,870 --> 00:21:04,809
to integrate wisdom as a valid file

476
00:21:03,040 --> 00:21:06,760
format<font color="#E5E5E5"> so soon in the next</font><font color="#CCCCCC"> release</font><font color="#E5E5E5"> of</font>

477
00:21:04,809 --> 00:21:10,178
<font color="#CCCCCC">coaling you will be able to create</font><font color="#E5E5E5"> your</font>

478
00:21:06,760 --> 00:21:13,780
<font color="#E5E5E5">go file and then simply build it using</font>

479
00:21:10,179 --> 00:21:17,740
<font color="#E5E5E5">go</font><font color="#CCCCCC"> just the same way as rust</font><font color="#E5E5E5"> is already</font>

480
00:21:13,780 --> 00:21:19,510
<font color="#CCCCCC">capable of doing for the year building</font>

481
00:21:17,740 --> 00:21:20,860
<font color="#CCCCCC">tour</font><font color="#E5E5E5"> when you want to create your web</font>

482
00:21:19,510 --> 00:21:24,100
assembly code<font color="#CCCCCC"> I would highly recommend</font>

483
00:21:20,860 --> 00:21:26,889
<font color="#CCCCCC">to check out the wisdom studio which</font>

484
00:21:24,100 --> 00:21:29,830
will help you greatly<font color="#CCCCCC"> when it's a free</font>

485
00:21:26,890 --> 00:21:32,830
<font color="#E5E5E5">online IDE</font><font color="#CCCCCC"> to build to build awesome</font>

486
00:21:29,830 --> 00:21:34,510
stuff<font color="#CCCCCC"> in different format whether C or</font>

487
00:21:32,830 --> 00:21:36,730
rest and the second one I would

488
00:21:34,510 --> 00:21:38,650
recommend<font color="#CCCCCC"> is the was on Explorer and</font>

489
00:21:36,730 --> 00:21:41,590
because it has this very<font color="#E5E5E5"> interesting</font>

490
00:21:38,650 --> 00:21:44,710
<font color="#E5E5E5">property that when you input C code it</font>

491
00:21:41,590 --> 00:21:46,780
will also not<font color="#CCCCCC"> only generate the the</font><font color="#E5E5E5"> s</font>

492
00:21:44,710 --> 00:21:49,270
expression<font color="#E5E5E5"> corresponding file but</font><font color="#CCCCCC"> also</font>

493
00:21:46,780 --> 00:21:53,020
the native<font color="#E5E5E5"> code that will be executed</font>

494
00:21:49,270 --> 00:21:55,870
that<font color="#E5E5E5"> will be generated from in this case</font>

495
00:21:53,020 --> 00:21:57,908
<font color="#E5E5E5">Firefox web assembly engine so you can</font>

496
00:21:55,870 --> 00:21:59,709
<font color="#CCCCCC">actually have a visual representation of</font>

497
00:21:57,909 --> 00:22:00,730
what your<font color="#CCCCCC"> resume</font><font color="#E5E5E5"> code is going to be</font>

498
00:21:59,710 --> 00:22:02,080
looking like

499
00:22:00,730 --> 00:22:05,230
inside<font color="#CCCCCC"> the browser</font><font color="#E5E5E5"> which I found pretty</font>

500
00:22:02,080 --> 00:22:07,178
cool and again part of the tool a part

501
00:22:05,230 --> 00:22:10,210
<font color="#CCCCCC">of this research was also creating the</font>

502
00:22:07,179 --> 00:22:12,820
tools that did<font color="#E5E5E5"> not exist yet and one of</font>

503
00:22:10,210 --> 00:22:14,020
them was what was missing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> I</font>

504
00:22:12,820 --> 00:22:16,270
thought<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be interesting was to</font>

505
00:22:14,020 --> 00:22:18,970
<font color="#CCCCCC">build an either loader</font><font color="#E5E5E5"> and processor</font>

506
00:22:16,270 --> 00:22:21,760
which I did<font color="#E5E5E5"> so yeah that will all be</font>

507
00:22:18,970 --> 00:22:23,200
<font color="#CCCCCC">released</font><font color="#E5E5E5"> after this talk if you guys are</font>

508
00:22:21,760 --> 00:22:25,900
interesting in decompiling in<font color="#E5E5E5"> either</font>

509
00:22:23,200 --> 00:22:30,100
<font color="#E5E5E5">your first wasn't module then you can do</font>

510
00:22:25,900 --> 00:22:33,309
<font color="#E5E5E5">that so now we know how to transform our</font>

511
00:22:30,100 --> 00:22:34,870
C code into<font color="#CCCCCC"> wasone</font><font color="#E5E5E5"> code how do we load</font>

512
00:22:33,309 --> 00:22:37,149
<font color="#CCCCCC">that into</font><font color="#E5E5E5"> the web browser</font><font color="#CCCCCC"> well the</font>

513
00:22:34,870 --> 00:22:40,149
problem here is that the web browser<font color="#E5E5E5"> has</font>

514
00:22:37,150 --> 00:22:42,490
no idea of<font color="#E5E5E5"> what was</font><font color="#CCCCCC"> an is it's not a</font>

515
00:22:40,150 --> 00:22:44,429
valid<font color="#E5E5E5"> mime type where the web browser is</font>

516
00:22:42,490 --> 00:22:47,140
<font color="#CCCCCC">just going</font><font color="#E5E5E5"> to take</font><font color="#CCCCCC"> the bottom code and</font>

517
00:22:44,429 --> 00:22:48,970
magically execute it we need something

518
00:22:47,140 --> 00:22:52,270
to load it and<font color="#E5E5E5"> that's where</font><font color="#CCCCCC"> JavaScript</font>

519
00:22:48,970 --> 00:22:54,460
comes in the way it's gonna work is at

520
00:22:52,270 --> 00:22:57,520
some<font color="#CCCCCC"> point</font><font color="#E5E5E5"> you will need</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> to</font>

521
00:22:54,460 --> 00:23:00,570
your<font color="#E5E5E5"> JavaScript engine the wisdom code</font>

522
00:22:57,520 --> 00:23:02,950
<font color="#E5E5E5">there wasn't module as an array buffer</font>

523
00:23:00,570 --> 00:23:06,129
<font color="#E5E5E5">this can be done in two ways</font><font color="#CCCCCC"> if your</font>

524
00:23:02,950 --> 00:23:10,510
code is small enough by<font color="#CCCCCC"> its small it</font>

525
00:23:06,130 --> 00:23:12,760
<font color="#E5E5E5">means less</font><font color="#CCCCCC"> than four thousand bytes 4096</font>

526
00:23:10,510 --> 00:23:14,799
<font color="#E5E5E5">then the code can be inlined that means</font>

527
00:23:12,760 --> 00:23:17,140
that you can literally create your<font color="#E5E5E5"> jug</font>

528
00:23:14,799 --> 00:23:19,960
<font color="#E5E5E5">inside your JavaScript</font><font color="#CCCCCC"> code you</font><font color="#E5E5E5"> can</font>

529
00:23:17,140 --> 00:23:22,150
create the<font color="#E5E5E5"> code manually inserting the</font>

530
00:23:19,960 --> 00:23:24,179
bytes one by one<font color="#E5E5E5"> which makes it really</font>

531
00:23:22,150 --> 00:23:26,650
<font color="#E5E5E5">convenient if you're trying to fuzz</font>

532
00:23:24,179 --> 00:23:28,840
<font color="#CCCCCC">whether something will cover the facing</font>

533
00:23:26,650 --> 00:23:29,860
part a little<font color="#E5E5E5"> bit later and the second</font>

534
00:23:28,840 --> 00:23:33,520
part which is the<font color="#E5E5E5"> one that is</font>

535
00:23:29,860 --> 00:23:37,959
recommended<font color="#E5E5E5"> by by the MD and the by</font>

536
00:23:33,520 --> 00:23:39,610
Mozilla it's to use the MS 56 promise

537
00:23:37,960 --> 00:23:42,820
<font color="#E5E5E5">functionality so the promise</font>

538
00:23:39,610 --> 00:23:45,639
<font color="#E5E5E5">functionality is going to allow you to</font>

539
00:23:42,820 --> 00:23:49,379
<font color="#E5E5E5">create some asynchronous events on in</font>

540
00:23:45,640 --> 00:23:52,720
the<font color="#E5E5E5"> JavaScript and trigger some</font>

541
00:23:49,380 --> 00:23:54,669
functions based on the response to those

542
00:23:52,720 --> 00:23:56,500
a synchronous event so in this case you

543
00:23:54,669 --> 00:24:00,100
<font color="#E5E5E5">will call a function that is implemented</font>

544
00:23:56,500 --> 00:24:03,160
<font color="#E5E5E5">called fetch to grab a file this time</font>

545
00:24:00,100 --> 00:24:07,809
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be a real standalone file</font><font color="#E5E5E5"> called</font>

546
00:24:03,160 --> 00:24:09,309
hello world<font color="#E5E5E5"> or whatever and the</font><font color="#CCCCCC"> result</font>

547
00:24:07,809 --> 00:24:11,889
of this fetch function will be<font color="#CCCCCC"> to</font>

548
00:24:09,309 --> 00:24:13,899
provide<font color="#E5E5E5"> an array buffer so we will come</font>

549
00:24:11,890 --> 00:24:15,670
sorry it will<font color="#E5E5E5"> be to provide</font><font color="#CCCCCC"> the this</font>

550
00:24:13,900 --> 00:24:17,440
<font color="#E5E5E5">by that we will convert</font><font color="#CCCCCC"> into an array</font>

551
00:24:15,670 --> 00:24:19,270
buffer<font color="#E5E5E5"> at this point we've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> inside</font>

552
00:24:17,440 --> 00:24:22,000
our<font color="#E5E5E5"> JavaScript engine an array buffer</font>

553
00:24:19,270 --> 00:24:25,389
<font color="#E5E5E5">containing our wasn't module so we need</font>

554
00:24:22,000 --> 00:24:28,630
to invoke<font color="#CCCCCC"> the wisdom of webassembly dot</font>

555
00:24:25,390 --> 00:24:31,240
module<font color="#CCCCCC"> on this code on</font><font color="#E5E5E5"> this array buffer</font>

556
00:24:28,630 --> 00:24:33,790
to have the JavaScript<font color="#E5E5E5"> engine validate</font>

557
00:24:31,240 --> 00:24:37,690
the the file<font color="#E5E5E5"> with a module</font><font color="#CCCCCC"> that were</font>

558
00:24:33,790 --> 00:24:39,309
<font color="#CCCCCC">given</font><font color="#E5E5E5"> to it and making sure that it's it</font>

559
00:24:37,690 --> 00:24:41,020
syntactically makes sense that we've got

560
00:24:39,309 --> 00:24:42,879
<font color="#E5E5E5">all the functions all the sections</font>

561
00:24:41,020 --> 00:24:44,770
appropriate<font color="#E5E5E5"> for example make sure</font><font color="#CCCCCC"> that</font>

562
00:24:42,880 --> 00:24:48,840
if you've<font color="#CCCCCC"> got a code section you need</font><font color="#E5E5E5"> to</font>

563
00:24:44,770 --> 00:24:52,420
have the function section and<font color="#E5E5E5"> and other</font>

564
00:24:48,840 --> 00:24:54,250
checks like that<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> one of the</font>

565
00:24:52,420 --> 00:24:56,830
<font color="#E5E5E5">last thing that this this mod this</font>

566
00:24:54,250 --> 00:24:58,630
module function will do is to is to get

567
00:24:56,830 --> 00:25:01,540
the code<font color="#E5E5E5"> and that's the part where after</font>

568
00:24:58,630 --> 00:25:05,410
the validation is going to create native

569
00:25:01,540 --> 00:25:07,590
native code so now the code<font color="#E5E5E5"> is in memory</font>

570
00:25:05,410 --> 00:25:11,230
<font color="#E5E5E5">it's in</font><font color="#CCCCCC"> a totally different location</font>

571
00:25:07,590 --> 00:25:13,300
which is not writable<font color="#E5E5E5"> anymore so we're</font>

572
00:25:11,230 --> 00:25:17,070
ready ready<font color="#E5E5E5"> to</font><font color="#CCCCCC"> go all we need to provide</font>

573
00:25:13,300 --> 00:25:19,928
is<font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> our code with a simple</font>

574
00:25:17,070 --> 00:25:22,059
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> memory with the memory is nothing</font>

575
00:25:19,929 --> 00:25:24,160
more than<font color="#E5E5E5"> a number of page that</font><font color="#CCCCCC"> our</font>

576
00:25:22,059 --> 00:25:26,820
pages<font color="#E5E5E5"> that are being allocated as you</font>

577
00:25:24,160 --> 00:25:29,890
remember the a page in webassembly<font color="#CCCCCC"> is</font>

578
00:25:26,820 --> 00:25:31,899
<font color="#E5E5E5">65,000 bytes it's not like a regular</font>

579
00:25:29,890 --> 00:25:34,000
page for<font color="#E5E5E5"> there for an operating</font><font color="#CCCCCC"> system</font>

580
00:25:31,900 --> 00:25:38,050
so we're going<font color="#E5E5E5"> to be creating a memory</font>

581
00:25:34,000 --> 00:25:40,510
section<font color="#E5E5E5"> with n number</font><font color="#CCCCCC"> of page</font><font color="#E5E5E5"> and then</font>

582
00:25:38,050 --> 00:25:43,690
we'll declare<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the elements that</font><font color="#E5E5E5"> we</font>

583
00:25:40,510 --> 00:25:46,270
want<font color="#CCCCCC"> to pass to the wesam environment so</font>

584
00:25:43,690 --> 00:25:48,130
if you remember<font color="#E5E5E5"> the code we decided to</font>

585
00:25:46,270 --> 00:25:49,990
pass<font color="#E5E5E5"> a function well the code was</font>

586
00:25:48,130 --> 00:25:52,809
expecting a function was important in a

587
00:25:49,990 --> 00:25:54,460
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was coming from</font><font color="#CCCCCC"> a library</font>

588
00:25:52,809 --> 00:25:56,590
called<font color="#E5E5E5"> STD lab and the function was</font>

589
00:25:54,460 --> 00:25:59,350
called print<font color="#E5E5E5"> that's where we're going to</font>

590
00:25:56,590 --> 00:26:02,350
be<font color="#E5E5E5"> creating those object and passing</font>

591
00:25:59,350 --> 00:26:04,120
<font color="#CCCCCC">them to the wasn't</font><font color="#E5E5E5"> VM and</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> this point</font>

592
00:26:02,350 --> 00:26:07,449
everything<font color="#CCCCCC"> is</font><font color="#E5E5E5"> done so all we need to do</font>

593
00:26:04,120 --> 00:26:10,600
is instantiate the VM so ignite the

594
00:26:07,450 --> 00:26:12,610
whole the whole<font color="#CCCCCC"> thing and now we've got</font>

595
00:26:10,600 --> 00:26:15,480
our<font color="#E5E5E5"> wasn't managing that is fully</font>

596
00:26:12,610 --> 00:26:18,219
<font color="#E5E5E5">working and we can via the</font><font color="#CCCCCC"> inks export</font>

597
00:26:15,480 --> 00:26:20,500
<font color="#CCCCCC">properly we</font><font color="#E5E5E5"> can directly invoke all</font>

598
00:26:18,220 --> 00:26:23,679
functions that are marked as explode as

599
00:26:20,500 --> 00:26:26,080
<font color="#E5E5E5">explorable</font><font color="#CCCCCC"> as we saw in the in there was</font>

600
00:26:23,679 --> 00:26:36,430
an example<font color="#E5E5E5"> so if we go back</font><font color="#CCCCCC"> to</font>

601
00:26:26,080 --> 00:26:38,409
our first failed demonstration<font color="#E5E5E5"> so to</font>

602
00:26:36,430 --> 00:26:41,320
make<font color="#CCCCCC"> it a little</font><font color="#E5E5E5"> bit more clear</font>

603
00:26:38,410 --> 00:26:43,360
so I created a very<font color="#E5E5E5"> simple loader which</font>

604
00:26:41,320 --> 00:26:47,260
is exactly<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be doing what was</font>

605
00:26:43,360 --> 00:26:49,300
explained earlier<font color="#E5E5E5"> so here we've got a</font>

606
00:26:47,260 --> 00:26:51,400
log function<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going to be reading</font>

607
00:26:49,300 --> 00:26:52,930
some data from the<font color="#CCCCCC"> memory that will be</font>

608
00:26:51,400 --> 00:26:57,430
out that<font color="#E5E5E5"> will be given to the web</font>

609
00:26:52,930 --> 00:26:59,710
<font color="#E5E5E5">assembly VM and we'll read a number from</font>

610
00:26:57,430 --> 00:27:03,910
an offset<font color="#CCCCCC"> and a certain number of</font><font color="#E5E5E5"> bytes</font>

611
00:26:59,710 --> 00:27:07,120
encode that<font color="#E5E5E5"> to utf-8 and then the string</font>

612
00:27:03,910 --> 00:27:09,340
<font color="#E5E5E5">so again as you</font><font color="#CCCCCC"> can see it's not was oh</font>

613
00:27:07,120 --> 00:27:12,370
it's not<font color="#CCCCCC"> well assembly that's doing the</font>

614
00:27:09,340 --> 00:27:17,129
interaction interactional<font color="#CCCCCC"> part it's it's</font>

615
00:27:12,370 --> 00:27:22,090
left<font color="#E5E5E5"> to JavaScript then we in she</font>

616
00:27:17,130 --> 00:27:24,940
initiate the memory and provide this and

617
00:27:22,090 --> 00:27:26,919
<font color="#E5E5E5">then yeah ask for the the</font><font color="#CCCCCC"> module to be</font>

618
00:27:24,940 --> 00:27:29,560
loaded in the main function<font color="#E5E5E5"> once it's</font>

619
00:27:26,920 --> 00:27:31,240
loaded and and put inside an array

620
00:27:29,560 --> 00:27:33,730
<font color="#E5E5E5">buffer a JavaScript array buffer we</font>

621
00:27:31,240 --> 00:27:36,880
instantiate it<font color="#E5E5E5"> and then we call the</font>

622
00:27:33,730 --> 00:27:38,350
function<font color="#E5E5E5"> main and so now we've got a</font>

623
00:27:36,880 --> 00:27:40,390
JavaScript engine the only thing that we

624
00:27:38,350 --> 00:27:43,659
need is<font color="#CCCCCC"> to have a simple</font><font color="#E5E5E5"> HTML file which</font>

625
00:27:40,390 --> 00:27:51,870
could be as simple as this and if we

626
00:27:43,660 --> 00:27:51,870
<font color="#E5E5E5">decide</font><font color="#CCCCCC"> to fire it</font><font color="#E5E5E5"> we've got our work</font><font color="#CCCCCC"> ya</font>

627
00:27:52,470 --> 00:27:59,890
<font color="#E5E5E5">know doesn't work okay so we've</font><font color="#CCCCCC"> got this</font>

628
00:27:57,220 --> 00:28:02,230
<font color="#CCCCCC">pop-up hello Chaka Khan that is being</font>

629
00:27:59,890 --> 00:28:04,870
displayed<font color="#E5E5E5"> so interestingly the alert is</font>

630
00:28:02,230 --> 00:28:08,410
being is being sent by JavaScript but

631
00:28:04,870 --> 00:28:11,830
<font color="#E5E5E5">the code from from the the web what the</font>

632
00:28:08,410 --> 00:28:15,520
the actual function call was done in

633
00:28:11,830 --> 00:28:18,070
<font color="#E5E5E5">webassembly so yeah we've got our</font>

634
00:28:15,520 --> 00:28:23,340
<font color="#CCCCCC">whoever's undefined</font><font color="#E5E5E5"> and where was</font>

635
00:28:18,070 --> 00:28:23,340
somebody working working module<font color="#E5E5E5"> so okay</font>

636
00:28:24,420 --> 00:28:34,800
and what I will<font color="#E5E5E5"> show next is you can</font>

637
00:28:31,890 --> 00:28:37,620
also compile use<font color="#E5E5E5"> em script em to compile</font>

638
00:28:34,800 --> 00:28:41,030
directly from C directly<font color="#E5E5E5"> into the web</font>

639
00:28:37,620 --> 00:28:57,600
browser<font color="#E5E5E5"> and make it a lot easier</font><font color="#CCCCCC"> so</font>

640
00:28:41,030 --> 00:28:59,100
magic command<font color="#E5E5E5"> dashes and similarly we've</font>

641
00:28:57,600 --> 00:29:01,830
got again

642
00:28:59,100 --> 00:29:03,659
hello Chaka Khan<font color="#CCCCCC"> so something that</font><font color="#E5E5E5"> I</font>

643
00:29:01,830 --> 00:29:05,820
<font color="#CCCCCC">forgot to do is actually to show you</font>

644
00:29:03,660 --> 00:29:08,790
<font color="#E5E5E5">what the C file looks</font><font color="#CCCCCC"> like it's</font>

645
00:29:05,820 --> 00:29:10,350
<font color="#E5E5E5">literally the</font><font color="#CCCCCC"> simplistic file that you</font>

646
00:29:08,790 --> 00:29:12,960
can think of but what it<font color="#E5E5E5"> means from now</font>

647
00:29:10,350 --> 00:29:16,980
<font color="#E5E5E5">is that using EMCC so Emscripten</font>

648
00:29:12,960 --> 00:29:19,140
compiler<font color="#E5E5E5"> you can use your C code juice a</font>

649
00:29:16,980 --> 00:29:20,970
little bit<font color="#E5E5E5"> of modification to it and</font>

650
00:29:19,140 --> 00:29:22,320
then compile it<font color="#E5E5E5"> to have something that</font>

651
00:29:20,970 --> 00:29:24,360
<font color="#CCCCCC">works</font><font color="#E5E5E5"> in your web browser</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you've</font>

652
00:29:22,320 --> 00:29:26,280
<font color="#E5E5E5">if you saw this tweet that that was from</font>

653
00:29:24,360 --> 00:29:28,139
<font color="#E5E5E5">last week I believe about</font><font color="#CCCCCC"> beam being</font>

654
00:29:26,280 --> 00:29:32,580
ported to webassembly<font color="#E5E5E5"> that's exactly</font>

655
00:29:28,140 --> 00:29:34,170
what they're using<font color="#E5E5E5"> and last what</font><font color="#CCCCCC"> I want</font>

656
00:29:32,580 --> 00:29:37,050
to show you is<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the fact that the</font>

657
00:29:34,170 --> 00:29:41,720
code is<font color="#CCCCCC"> being treated</font><font color="#E5E5E5"> and to do that</font>

658
00:29:37,050 --> 00:29:46,710
we're going to be using<font color="#CCCCCC"> d8 which is the</font>

659
00:29:41,720 --> 00:29:50,670
the<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> command-line tool</font><font color="#E5E5E5"> that is</font>

660
00:29:46,710 --> 00:29:55,340
provided<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the by the chrome engine by</font>

661
00:29:50,670 --> 00:29:55,340
the<font color="#CCCCCC"> eight oops we're</font><font color="#E5E5E5"> not going to be</font>

662
00:30:04,130 --> 00:30:08,550
<font color="#E5E5E5">okay so first we can you can see that</font>

663
00:30:06,840 --> 00:30:10,620
the code<font color="#CCCCCC"> has been executed</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we've</font>

664
00:30:08,550 --> 00:30:14,820
<font color="#E5E5E5">got a LoJack</font><font color="#CCCCCC"> icon being displayed</font><font color="#E5E5E5"> and</font>

665
00:30:10,620 --> 00:30:17,669
then if we go up we can see the code the

666
00:30:14,820 --> 00:30:24,270
webassembly code that is being<font color="#CCCCCC"> generated</font>

667
00:30:17,670 --> 00:30:26,730
here<font color="#CCCCCC"> whereby</font><font color="#E5E5E5"> somebody</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> so from that</font>

668
00:30:24,270 --> 00:30:29,790
<font color="#E5E5E5">moment</font><font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that the JavaScript</font>

669
00:30:26,730 --> 00:30:31,950
engine<font color="#CCCCCC"> or the wasn't Engine has all the</font>

670
00:30:29,790 --> 00:30:34,800
way to optimize<font color="#E5E5E5"> the code and make sure</font>

671
00:30:31,950 --> 00:30:36,960
that not<font color="#CCCCCC"> only</font><font color="#E5E5E5"> the code the webassembly</font>

672
00:30:34,800 --> 00:30:39,780
<font color="#E5E5E5">code is valid</font><font color="#CCCCCC"> but when it's generated it</font>

673
00:30:36,960 --> 00:30:41,730
can also optimize it once again<font color="#E5E5E5"> so it</font>

674
00:30:39,780 --> 00:30:43,470
provides a lot<font color="#CCCCCC"> of way to improve the</font>

675
00:30:41,730 --> 00:30:46,380
performance<font color="#E5E5E5"> and so as you can see what</font>

676
00:30:43,470 --> 00:30:49,080
<font color="#E5E5E5">you're gonna be executing is native code</font>

677
00:30:46,380 --> 00:30:53,970
<font color="#E5E5E5">which now explains a lot better the</font>

678
00:30:49,080 --> 00:31:01,050
performance<font color="#CCCCCC"> that we had when we</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> we</font>

679
00:30:53,970 --> 00:31:05,220
<font color="#E5E5E5">were testing this on shell so now let's</font>

680
00:31:01,050 --> 00:31:08,540
cover<font color="#E5E5E5"> the attack surface because as</font>

681
00:31:05,220 --> 00:31:11,400
<font color="#E5E5E5">usual with great power come great</font>

682
00:31:08,540 --> 00:31:15,600
responsibilities here what's interesting

683
00:31:11,400 --> 00:31:18,330
is that the<font color="#E5E5E5"> security was in mind of the</font>

684
00:31:15,600 --> 00:31:22,830
developers from day one<font color="#E5E5E5"> there if you go</font>

685
00:31:18,330 --> 00:31:24,870
<font color="#E5E5E5">and</font><font color="#CCCCCC"> check out the the</font><font color="#E5E5E5"> the the</font>

686
00:31:22,830 --> 00:31:27,389
specification you've got a whole section

687
00:31:24,870 --> 00:31:30,060
<font color="#E5E5E5">dedicated</font><font color="#CCCCCC"> to the security even before</font>

688
00:31:27,390 --> 00:31:32,880
<font color="#E5E5E5">starting coding anything they had in</font>

689
00:31:30,060 --> 00:31:35,100
<font color="#CCCCCC">mind two things</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> is we want</font>

690
00:31:32,880 --> 00:31:37,170
code to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to execute in a</font>

691
00:31:35,100 --> 00:31:39,480
contained environment so there's two

692
00:31:37,170 --> 00:31:41,700
<font color="#E5E5E5">properties the first one is we want</font><font color="#CCCCCC"> this</font>

693
00:31:39,480 --> 00:31:43,740
code to be safe<font color="#CCCCCC"> so when this code is</font>

694
00:31:41,700 --> 00:31:46,710
being executed<font color="#CCCCCC"> we don't want it to be</font>

695
00:31:43,740 --> 00:31:49,470
conflicting<font color="#CCCCCC"> with any other code that is</font>

696
00:31:46,710 --> 00:31:52,310
going<font color="#CCCCCC"> to be executing so it's safe</font><font color="#E5E5E5"> in</font>

697
00:31:49,470 --> 00:31:55,710
itself<font color="#E5E5E5"> but it's also safe from the</font>

698
00:31:52,310 --> 00:31:57,690
inside<font color="#E5E5E5"> out</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you've got a web assembly</font>

699
00:31:55,710 --> 00:31:59,400
code that going to be executed<font color="#E5E5E5"> you don't</font>

700
00:31:57,690 --> 00:32:02,090
want it to be<font color="#E5E5E5"> messing with your</font>

701
00:31:59,400 --> 00:32:04,920
<font color="#E5E5E5">JavaScript engine and so on</font><font color="#CCCCCC"> unless</font>

702
00:32:02,090 --> 00:32:07,050
specifically designed to<font color="#E5E5E5"> do that so if</font>

703
00:32:04,920 --> 00:32:10,680
you decide<font color="#CCCCCC"> to</font><font color="#E5E5E5"> share an object well by</font>

704
00:32:07,050 --> 00:32:11,870
design<font color="#E5E5E5"> you allow this this</font><font color="#CCCCCC"> communication</font>

705
00:32:10,680 --> 00:32:14,720
<font color="#CCCCCC">between the two</font>

706
00:32:11,870 --> 00:32:17,090
<font color="#E5E5E5">objet so the code is strictly sandbox it</font>

707
00:32:14,720 --> 00:32:19,220
strictly isolated and they had some

708
00:32:17,090 --> 00:32:22,280
notions in<font color="#E5E5E5"> the specification</font><font color="#CCCCCC"> that were</font>

709
00:32:19,220 --> 00:32:23,960
that<font color="#E5E5E5"> are quite innovative in in my</font>

710
00:32:22,280 --> 00:32:26,480
<font color="#E5E5E5">opinion because quite recent so</font>

711
00:32:23,960 --> 00:32:28,100
immutable code<font color="#E5E5E5"> obviously but the</font>

712
00:32:26,480 --> 00:32:30,620
separated stack is something that is

713
00:32:28,100 --> 00:32:33,050
defined in<font color="#CCCCCC"> the in the</font><font color="#E5E5E5"> standard in the</font>

714
00:32:30,620 --> 00:32:35,000
specification where you're going to have

715
00:32:33,050 --> 00:32:39,470
<font color="#E5E5E5">the totally different</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> that will be</font>

716
00:32:35,000 --> 00:32:43,550
used for<font color="#E5E5E5"> the date the user data and the</font>

717
00:32:39,470 --> 00:32:45,679
<font color="#E5E5E5">the control flow return addresses so</font>

718
00:32:43,550 --> 00:32:47,990
<font color="#E5E5E5">forget</font><font color="#CCCCCC"> about all the vulnerabilities</font>

719
00:32:45,679 --> 00:32:49,429
<font color="#E5E5E5">like stack overflow or something like</font>

720
00:32:47,990 --> 00:32:51,620
<font color="#E5E5E5">that</font><font color="#CCCCCC"> even if you have a stack overflow</font>

721
00:32:49,429 --> 00:32:54,500
<font color="#CCCCCC">it doesn't mean that you're going</font><font color="#E5E5E5"> to be</font>

722
00:32:51,620 --> 00:32:56,510
able<font color="#E5E5E5"> to control the wall to hijack the</font>

723
00:32:54,500 --> 00:32:58,730
control flow<font color="#E5E5E5"> so that's a big win and</font>

724
00:32:56,510 --> 00:33:00,830
<font color="#E5E5E5">when I saw that I was very surprised</font>

725
00:32:58,730 --> 00:33:02,330
so I was<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> yes finally apparently</font>

726
00:33:00,830 --> 00:33:05,178
web<font color="#E5E5E5"> benders have learned from the past</font>

727
00:33:02,330 --> 00:33:06,919
<font color="#CCCCCC">that's that's really really good so I</font>

728
00:33:05,179 --> 00:33:10,640
was quite excited<font color="#CCCCCC"> about whether</font>

729
00:33:06,920 --> 00:33:12,559
something so I started after reading

730
00:33:10,640 --> 00:33:14,780
<font color="#CCCCCC">this specification I investigated</font><font color="#E5E5E5"> the</font>

731
00:33:12,559 --> 00:33:17,690
implementation different implementation

732
00:33:14,780 --> 00:33:21,290
in the<font color="#E5E5E5"> major web browsers and I realized</font>

733
00:33:17,690 --> 00:33:24,470
<font color="#E5E5E5">that okay</font><font color="#CCCCCC"> if the specification kind</font><font color="#E5E5E5"> of</font>

734
00:33:21,290 --> 00:33:26,960
<font color="#E5E5E5">tightens the security</font><font color="#CCCCCC"> of webassembly</font><font color="#E5E5E5"> the</font>

735
00:33:24,470 --> 00:33:28,700
problem<font color="#E5E5E5"> won't necessarily be there the</font>

736
00:33:26,960 --> 00:33:30,590
<font color="#E5E5E5">problem will</font><font color="#CCCCCC"> be in the implementations</font>

737
00:33:28,700 --> 00:33:33,740
because all the implementations will be

738
00:33:30,590 --> 00:33:36,980
in C<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> which as we all</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> are</font>

739
00:33:33,740 --> 00:33:38,540
affected by all kinds of badness<font color="#E5E5E5"> so that</font>

740
00:33:36,980 --> 00:33:42,140
would be the first<font color="#E5E5E5"> place to</font><font color="#CCCCCC"> have a look</font>

741
00:33:38,540 --> 00:33:44,178
at and as a<font color="#E5E5E5"> matter of fact a bunch of</font>

742
00:33:42,140 --> 00:33:46,990
people have come to the same conclusion

743
00:33:44,179 --> 00:33:50,660
in the past and we there's a lot of

744
00:33:46,990 --> 00:33:53,540
issues what a<font color="#E5E5E5"> lot not that many but</font>

745
00:33:50,660 --> 00:33:55,850
quite a<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of issues</font><font color="#E5E5E5"> on whether</font>

746
00:33:53,540 --> 00:33:59,360
<font color="#E5E5E5">something the most interesting</font>

747
00:33:55,850 --> 00:34:03,590
interesting<font color="#E5E5E5"> one for me was the C</font><font color="#CCCCCC"> V 2017</font>

748
00:33:59,360 --> 00:34:06,110
<font color="#CCCCCC">51 16 which was used in the full chain</font>

749
00:34:03,590 --> 00:34:08,509
compromise of the<font color="#CCCCCC"> Google pixel and they</font>

750
00:34:06,110 --> 00:34:10,580
<font color="#CCCCCC">actually used web assembly to do to</font>

751
00:34:08,510 --> 00:34:13,340
break out of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> environment what they</font>

752
00:34:10,580 --> 00:34:18,080
did is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they abused the fact</font><font color="#CCCCCC"> that as</font>

753
00:34:13,340 --> 00:34:22,550
we<font color="#CCCCCC"> sew together</font><font color="#E5E5E5"> you can use the memory</font>

754
00:34:18,080 --> 00:34:23,960
<font color="#E5E5E5">as an array buffer when you're sent when</font>

755
00:34:22,550 --> 00:34:26,330
you're using<font color="#E5E5E5"> it as an</font>

756
00:34:23,960 --> 00:34:30,280
when you initialize it<font color="#E5E5E5"> in the</font>

757
00:34:26,330 --> 00:34:32,690
<font color="#CCCCCC">webassembly</font><font color="#E5E5E5"> part of the well in the</font>

758
00:34:30,280 --> 00:34:37,159
initialization part of the web assembly

759
00:34:32,690 --> 00:34:39,530
module but what you could do<font color="#CCCCCC"> I</font><font color="#E5E5E5"> insist on</font>

760
00:34:37,159 --> 00:34:41,810
good<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> you could also back it with</font>

761
00:34:39,530 --> 00:34:43,760
a shared array buffer and a shared array

762
00:34:41,810 --> 00:34:47,629
buffer will allow two concurrent threads

763
00:34:43,760 --> 00:34:50,629
<font color="#E5E5E5">to be modifying</font><font color="#CCCCCC"> on-the-fly the code or</font>

764
00:34:47,629 --> 00:34:53,839
the<font color="#CCCCCC"> memory section that is being or that</font>

765
00:34:50,629 --> 00:34:55,699
was very recently<font color="#E5E5E5"> checked so you've had</font>

766
00:34:53,839 --> 00:34:59,450
here a race<font color="#CCCCCC"> condition because what they</font>

767
00:34:55,699 --> 00:35:01,848
did<font color="#CCCCCC"> is</font><font color="#E5E5E5"> they spot a very specific</font><font color="#CCCCCC"> point</font>

768
00:34:59,450 --> 00:35:05,540
<font color="#E5E5E5">in in the code that was calling a</font>

769
00:35:01,849 --> 00:35:08,510
function at index<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> right and so at</font>

770
00:35:05,540 --> 00:35:11,000
this point<font color="#E5E5E5"> you had another thread</font><font color="#CCCCCC"> that</font>

771
00:35:08,510 --> 00:35:13,970
<font color="#E5E5E5">will be racing and constantly helping to</font>

772
00:35:11,000 --> 00:35:16,400
overwrite the<font color="#E5E5E5"> index instead of calling</font>

773
00:35:13,970 --> 00:35:18,529
the<font color="#CCCCCC"> function at index</font><font color="#E5E5E5"> zero which exists</font>

774
00:35:16,400 --> 00:35:21,500
and is valid<font color="#CCCCCC"> will try to call a function</font>

775
00:35:18,530 --> 00:35:23,869
at another<font color="#E5E5E5"> index so it's it's a race</font>

776
00:35:21,500 --> 00:35:26,570
because<font color="#E5E5E5"> it had to be done right after</font>

777
00:35:23,869 --> 00:35:29,150
<font color="#E5E5E5">the validation but right before the time</font>

778
00:35:26,570 --> 00:35:31,430
that<font color="#CCCCCC"> the code is being</font><font color="#E5E5E5"> converted to x86</font>

779
00:35:29,150 --> 00:35:33,349
so it was quite<font color="#CCCCCC"> awesome but if</font>

780
00:35:31,430 --> 00:35:36,379
successful<font color="#E5E5E5"> and it was successful</font>

781
00:35:33,349 --> 00:35:39,730
then you had an arbitrary<font color="#E5E5E5"> we didn't</font>

782
00:35:36,380 --> 00:35:43,849
<font color="#E5E5E5">write into well into</font><font color="#CCCCCC"> your whole</font>

783
00:35:39,730 --> 00:35:46,010
<font color="#E5E5E5">JavaScript address space and it's a very</font>

784
00:35:43,849 --> 00:35:49,010
powerful vulnerability the problem is<font color="#E5E5E5"> as</font>

785
00:35:46,010 --> 00:35:51,380
<font color="#E5E5E5">you saw he was using shared array buffer</font>

786
00:35:49,010 --> 00:35:54,859
but last January thanks to meltdown

787
00:35:51,380 --> 00:35:57,980
inspector<font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> Specter</font><font color="#E5E5E5"> all web</font>

788
00:35:54,859 --> 00:35:59,598
browsers<font color="#E5E5E5"> have decided to ban shared</font>

789
00:35:57,980 --> 00:36:01,070
<font color="#E5E5E5">array buffer after one year</font><font color="#CCCCCC"> of</font>

790
00:35:59,599 --> 00:36:03,200
<font color="#E5E5E5">implementing it they finally</font><font color="#CCCCCC"> realized</font>

791
00:36:01,070 --> 00:36:05,480
it's a bad<font color="#CCCCCC"> idea because all the exploits</font>

792
00:36:03,200 --> 00:36:09,470
in<font color="#CCCCCC"> the world were</font><font color="#E5E5E5"> using it so they</font>

793
00:36:05,480 --> 00:36:11,330
stopped<font color="#E5E5E5"> the damage and at least disabled</font>

794
00:36:09,470 --> 00:36:15,560
it by default<font color="#E5E5E5"> and in some cases they</font>

795
00:36:11,330 --> 00:36:17,598
<font color="#E5E5E5">removed it for some web browser so yeah</font>

796
00:36:15,560 --> 00:36:20,330
it<font color="#E5E5E5"> was it was</font><font color="#CCCCCC"> definitely an interesting</font>

797
00:36:17,599 --> 00:36:23,839
<font color="#E5E5E5">case</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> me it kind of shows set the</font>

798
00:36:20,330 --> 00:36:25,759
bar of where the<font color="#CCCCCC"> possible</font>

799
00:36:23,839 --> 00:36:27,410
vulnerabilities that<font color="#E5E5E5"> we can be</font>

800
00:36:25,760 --> 00:36:28,790
leveraging via<font color="#E5E5E5"> web assembly will</font><font color="#CCCCCC"> be</font>

801
00:36:27,410 --> 00:36:31,250
coming from<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not a vulnerability</font>

802
00:36:28,790 --> 00:36:35,040
from<font color="#E5E5E5"> the specification itself it's a</font>

803
00:36:31,250 --> 00:36:39,010
<font color="#CCCCCC">vulnerability in the</font><font color="#E5E5E5"> implementation</font>

804
00:36:35,040 --> 00:36:42,220
so I've decided<font color="#E5E5E5"> to review all</font><font color="#CCCCCC"> the major</font>

805
00:36:39,010 --> 00:36:44,830
web browser JavaScript JavaScript engine

806
00:36:42,220 --> 00:36:47,129
<font color="#CCCCCC">was an engine</font><font color="#E5E5E5"> looking for code and the</font>

807
00:36:44,830 --> 00:36:49,360
car was<font color="#CCCCCC"> not surprisingly that</font><font color="#E5E5E5"> big</font>

808
00:36:47,130 --> 00:36:52,630
<font color="#CCCCCC">because again I think it's coming from</font>

809
00:36:49,360 --> 00:36:54,280
<font color="#E5E5E5">the simplicity of half wisdom the code</font>

810
00:36:52,630 --> 00:36:58,180
doesn't<font color="#CCCCCC"> need to be really really huge</font>

811
00:36:54,280 --> 00:37:00,970
<font color="#E5E5E5">and after about two weeks of fuzzing on</font>

812
00:36:58,180 --> 00:37:01,390
different on all the<font color="#E5E5E5"> older JavaScript</font>

813
00:37:00,970 --> 00:37:03,669
engine

814
00:37:01,390 --> 00:37:05,109
I started to have<font color="#CCCCCC"> some crash with GHC</font>

815
00:37:03,670 --> 00:37:07,840
which is the<font color="#CCCCCC"> common</font><font color="#E5E5E5"> line tool</font><font color="#CCCCCC"> from</font>

816
00:37:05,110 --> 00:37:09,760
WebKit which is used by<font color="#E5E5E5"> Safari so I was</font>

817
00:37:07,840 --> 00:37:12,370
like yeah finally I'm<font color="#E5E5E5"> going to be able</font>

818
00:37:09,760 --> 00:37:15,100
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do some fun stuff with with web</font>

819
00:37:12,370 --> 00:37:17,730
<font color="#CCCCCC">assembling and in about two weeks</font>

820
00:37:15,100 --> 00:37:19,720
I managed on yeah about<font color="#CCCCCC"> two</font><font color="#E5E5E5"> weeks after</font>

821
00:37:17,730 --> 00:37:23,610
<font color="#CCCCCC">fuzzing I managed to trigger it</font>

822
00:37:19,720 --> 00:37:26,620
<font color="#E5E5E5">approximately</font><font color="#CCCCCC"> thirty different</font><font color="#E5E5E5"> bugs on</font>

823
00:37:23,610 --> 00:37:29,650
using different<font color="#E5E5E5"> mutation strategies and</font>

824
00:37:26,620 --> 00:37:32,049
different<font color="#CCCCCC"> phasers</font><font color="#E5E5E5"> as well different</font>

825
00:37:29,650 --> 00:37:34,270
fuzzing technique so I<font color="#E5E5E5"> was I was really</font>

826
00:37:32,050 --> 00:37:37,180
excited but when I started having<font color="#E5E5E5"> a look</font>

827
00:37:34,270 --> 00:37:41,440
at<font color="#E5E5E5"> the code then I realized that it's</font>

828
00:37:37,180 --> 00:37:44,290
actually the code in JSC was actually

829
00:37:41,440 --> 00:37:46,570
killing<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> on purpose when it</font>

830
00:37:44,290 --> 00:37:48,520
<font color="#E5E5E5">started decoding</font><font color="#CCCCCC"> a web assembly code</font>

831
00:37:46,570 --> 00:37:51,580
that is<font color="#E5E5E5"> not valid so instead of risking</font>

832
00:37:48,520 --> 00:37:54,640
the fact that<font color="#E5E5E5"> they're going to be</font>

833
00:37:51,580 --> 00:37:57,100
executing something<font color="#E5E5E5"> that is unknown well</font>

834
00:37:54,640 --> 00:37:57,700
Safari<font color="#E5E5E5"> is doing</font><font color="#CCCCCC"> nothing more than a huge</font>

835
00:37:57,100 --> 00:38:00,610
harakiri

836
00:37:57,700 --> 00:38:03,100
<font color="#CCCCCC">and killing itself so I was very</font>

837
00:38:00,610 --> 00:38:04,810
<font color="#CCCCCC">disappointed at that at that moment but</font>

838
00:38:03,100 --> 00:38:09,009
<font color="#E5E5E5">it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> good news because it means that</font>

839
00:38:04,810 --> 00:38:11,290
what happened is web browsers vendors

840
00:38:09,010 --> 00:38:14,020
they've they've learned<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> past</font>

841
00:38:11,290 --> 00:38:17,140
<font color="#E5E5E5">once again so it was web assembly was</font>

842
00:38:14,020 --> 00:38:21,580
massively tested and the testing code

843
00:38:17,140 --> 00:38:23,650
for at least edge and<font color="#CCCCCC"> and chrome are</font>

844
00:38:21,580 --> 00:38:25,509
available publicly so you've got those

845
00:38:23,650 --> 00:38:27,910
AFL and<font color="#CCCCCC"> leap further</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

846
00:38:25,510 --> 00:38:32,140
start<font color="#E5E5E5"> playing with and start running</font>

847
00:38:27,910 --> 00:38:33,819
your<font color="#E5E5E5"> own father with so again</font><font color="#CCCCCC"> very</font>

848
00:38:32,140 --> 00:38:35,170
<font color="#E5E5E5">positive thing it's not it's not a bad</font>

849
00:38:33,820 --> 00:38:37,450
thing<font color="#E5E5E5"> and for me that comes from the</font>

850
00:38:35,170 --> 00:38:40,300
fact that the whole concept<font color="#CCCCCC"> of web</font>

851
00:38:37,450 --> 00:38:42,009
assembly was secure enough<font color="#E5E5E5"> it was sorry</font>

852
00:38:40,300 --> 00:38:45,490
<font color="#E5E5E5">it was simple enough to be easily</font>

853
00:38:42,010 --> 00:38:46,570
securable<font color="#E5E5E5"> so what what else could</font><font color="#CCCCCC"> we</font>

854
00:38:45,490 --> 00:38:49,180
have<font color="#E5E5E5"> a look at</font>

855
00:38:46,570 --> 00:38:52,180
so yeah<font color="#E5E5E5"> there's some other issues right</font>

856
00:38:49,180 --> 00:38:53,649
<font color="#E5E5E5">we've got a way to allocate up to</font><font color="#CCCCCC"> four</font>

857
00:38:52,180 --> 00:38:55,149
<font color="#CCCCCC">gigabyte</font><font color="#E5E5E5"> in the address space of the</font>

858
00:38:53,650 --> 00:38:56,740
JavaScript engine so the first attack

859
00:38:55,150 --> 00:38:58,780
and<font color="#E5E5E5"> stupidest attack that you can think</font>

860
00:38:56,740 --> 00:39:02,009
<font color="#E5E5E5">of is this simply</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a simple denial</font>

861
00:38:58,780 --> 00:39:04,810
<font color="#E5E5E5">of service you're going to try to simply</font>

862
00:39:02,010 --> 00:39:07,240
overwhelm the memory of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> by</font>

863
00:39:04,810 --> 00:39:09,509
trying<font color="#E5E5E5"> to allocate different modules</font>

864
00:39:07,240 --> 00:39:11,520
with a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> with a lot of memory</font>

865
00:39:09,510 --> 00:39:15,660
another<font color="#E5E5E5"> vulnerability would be</font>

866
00:39:11,520 --> 00:39:18,009
arithmetic error<font color="#E5E5E5"> and race conditions</font>

867
00:39:15,660 --> 00:39:19,660
interestingly to this day<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> still</font>

868
00:39:18,010 --> 00:39:21,520
a very interesting<font color="#E5E5E5"> arithmetic error that</font>

869
00:39:19,660 --> 00:39:23,950
exists in the chat in<font color="#E5E5E5"> the Safari</font><font color="#CCCCCC"> Engine</font>

870
00:39:21,520 --> 00:39:26,800
where they don't compute properly the

871
00:39:23,950 --> 00:39:28,779
way<font color="#E5E5E5"> how you can</font><font color="#CCCCCC"> grow the memory of the</font>

872
00:39:26,800 --> 00:39:32,890
<font color="#E5E5E5">web assembly engine and what happened is</font>

873
00:39:28,780 --> 00:39:38,460
<font color="#CCCCCC">that if you decided</font><font color="#E5E5E5"> to to have the size</font>

874
00:39:32,890 --> 00:39:42,240
of them of the the<font color="#CCCCCC"> web assembly VM being</font>

875
00:39:38,460 --> 00:39:45,730
equal to<font color="#CCCCCC"> four gigabytes minus one page</font>

876
00:39:42,240 --> 00:39:47,680
<font color="#CCCCCC">you have an access</font><font color="#E5E5E5"> to this whole address</font>

877
00:39:45,730 --> 00:39:49,480
<font color="#E5E5E5">space right so you can start</font><font color="#CCCCCC"> writing</font>

878
00:39:47,680 --> 00:39:53,350
memory in a little bit everywhere this

879
00:39:49,480 --> 00:39:55,750
is<font color="#E5E5E5"> the the Intendant intended way of</font>

880
00:39:53,350 --> 00:39:58,330
working but then if you decide<font color="#CCCCCC"> to grow</font>

881
00:39:55,750 --> 00:40:02,400
<font color="#E5E5E5">the memory by just one page then you're</font>

882
00:39:58,330 --> 00:40:05,259
going<font color="#CCCCCC"> to be hitting the 4 the 4 gig</font><font color="#E5E5E5"> of</font>

883
00:40:02,400 --> 00:40:07,330
the 4 gig limits<font color="#E5E5E5"> and interestingly</font>

884
00:40:05,260 --> 00:40:10,690
<font color="#E5E5E5">instead of saying you've got</font><font color="#CCCCCC"> 4 gigs of</font>

885
00:40:07,330 --> 00:40:13,299
<font color="#E5E5E5">memory now the the</font><font color="#CCCCCC"> web assembly engine</font>

886
00:40:10,690 --> 00:40:15,010
of Safari will say well<font color="#E5E5E5"> that you cut</font><font color="#CCCCCC"> 0</font>

887
00:40:13,300 --> 00:40:16,510
bytes<font color="#E5E5E5"> in your VM so everything</font><font color="#CCCCCC"> that</font>

888
00:40:15,010 --> 00:40:21,010
you've<font color="#E5E5E5"> been writing in this memory is</font>

889
00:40:16,510 --> 00:40:22,780
<font color="#CCCCCC">now</font><font color="#E5E5E5"> lost so funny bug</font><font color="#CCCCCC"> and on the</font>

890
00:40:21,010 --> 00:40:25,210
offensive perspective what what could

891
00:40:22,780 --> 00:40:27,760
<font color="#E5E5E5">you do with webassembly</font><font color="#CCCCCC"> web assembly</font><font color="#E5E5E5"> is</font>

892
00:40:25,210 --> 00:40:29,920
perfect for a side<font color="#E5E5E5"> channel attack it's</font>

893
00:40:27,760 --> 00:40:32,500
it's<font color="#E5E5E5"> the it's</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> dream because you</font>

894
00:40:29,920 --> 00:40:34,120
literally can have native execution

895
00:40:32,500 --> 00:40:38,380
being done in your web<font color="#CCCCCC"> browser so you</font>

896
00:40:34,120 --> 00:40:41,620
<font color="#CCCCCC">can have very precise way</font><font color="#E5E5E5"> of doing some</font>

897
00:40:38,380 --> 00:40:43,450
caching attack problem is now it going

898
00:40:41,620 --> 00:40:46,270
to be<font color="#E5E5E5"> it is much harder because of the</font>

899
00:40:43,450 --> 00:40:49,419
spectrum mitigation you can also use the

900
00:40:46,270 --> 00:40:52,660
web web assembly for obfuscating things

901
00:40:49,420 --> 00:40:56,130
and then just<font color="#CCCCCC"> have a huge eval that will</font>

902
00:40:52,660 --> 00:40:59,720
for example<font color="#E5E5E5"> call I don't know some</font>

903
00:40:56,130 --> 00:41:04,220
exercise exploitation tool

904
00:40:59,720 --> 00:41:07,100
and<font color="#CCCCCC"> bypassing the all the the wealth of</font>

905
00:41:04,220 --> 00:41:10,430
the planets<font color="#CCCCCC"> and for me one of the</font><font color="#E5E5E5"> worst</font>

906
00:41:07,100 --> 00:41:13,430
case<font color="#E5E5E5"> of use for webassembly is crypto</font>

907
00:41:10,430 --> 00:41:16,009
mining crypto mining<font color="#E5E5E5"> here what we've</font>

908
00:41:13,430 --> 00:41:17,480
<font color="#E5E5E5">seen so</font><font color="#CCCCCC"> far is stuff like</font><font color="#E5E5E5"> coin hive</font>

909
00:41:16,010 --> 00:41:19,190
where you're going to have<font color="#E5E5E5"> very poorly</font>

910
00:41:17,480 --> 00:41:23,870
written JavaScript code<font color="#CCCCCC"> that will</font><font color="#E5E5E5"> be</font>

911
00:41:19,190 --> 00:41:26,720
trying<font color="#E5E5E5"> to run code and mine on users</font>

912
00:41:23,870 --> 00:41:28,730
behalf trying to get some some some

913
00:41:26,720 --> 00:41:33,799
money out<font color="#E5E5E5"> of people visiting a targeted</font>

914
00:41:28,730 --> 00:41:36,560
page<font color="#E5E5E5"> but here</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> a way to execute</font>

915
00:41:33,800 --> 00:41:39,820
the same code but much<font color="#CCCCCC"> faster so that</font>

916
00:41:36,560 --> 00:41:42,290
<font color="#E5E5E5">what it means</font><font color="#CCCCCC"> is that now</font><font color="#E5E5E5"> attackers or</font>

917
00:41:39,820 --> 00:41:43,790
even just<font color="#CCCCCC"> people want it to make a</font>

918
00:41:42,290 --> 00:41:45,860
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of money from from</font><font color="#E5E5E5"> their</font>

919
00:41:43,790 --> 00:41:48,770
<font color="#CCCCCC">website</font><font color="#E5E5E5"> have the possibility to execute</font>

920
00:41:45,860 --> 00:41:51,500
code on<font color="#E5E5E5"> your behalf</font><font color="#CCCCCC"> on on your machine</font>

921
00:41:48,770 --> 00:41:52,880
and<font color="#E5E5E5"> use some computational resource so</font>

922
00:41:51,500 --> 00:41:57,890
<font color="#E5E5E5">that they can I don't</font><font color="#CCCCCC"> know maybe</font>

923
00:41:52,880 --> 00:42:00,320
purchase a better server or extend their

924
00:41:57,890 --> 00:42:02,240
SSL domain or<font color="#E5E5E5"> whatnot and there's</font>

925
00:42:00,320 --> 00:42:04,460
<font color="#E5E5E5">already a few</font><font color="#CCCCCC"> open-source variant in</font>

926
00:42:02,240 --> 00:42:07,040
spotted in the while<font color="#CCCCCC"> they're those tools</font>

927
00:42:04,460 --> 00:42:12,050
are on<font color="#E5E5E5"> github</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> feel free to check them</font>

928
00:42:07,040 --> 00:42:13,700
out<font color="#E5E5E5"> and once you are in the in the</font>

929
00:42:12,050 --> 00:42:16,400
<font color="#E5E5E5">JavaScript sorry in the web assembly</font>

930
00:42:13,700 --> 00:42:18,259
code<font color="#E5E5E5"> my question was what can I do so</font>

931
00:42:16,400 --> 00:42:20,840
<font color="#CCCCCC">the second</font><font color="#E5E5E5"> property if you want from the</font>

932
00:42:18,260 --> 00:42:23,330
<font color="#CCCCCC">security section was I cannot do</font>

933
00:42:20,840 --> 00:42:26,390
anything<font color="#E5E5E5"> to go from the from inside the</font>

934
00:42:23,330 --> 00:42:27,980
web<font color="#E5E5E5"> assembly code outside</font><font color="#CCCCCC"> yeah okay</font><font color="#E5E5E5"> but</font>

935
00:42:26,390 --> 00:42:29,990
I can still execute code I<font color="#CCCCCC"> can still</font>

936
00:42:27,980 --> 00:42:31,820
execute C code so all that all the

937
00:42:29,990 --> 00:42:34,759
vulnerabilities<font color="#E5E5E5"> like buffer overflow</font>

938
00:42:31,820 --> 00:42:36,470
<font color="#E5E5E5">will still work</font><font color="#CCCCCC"> I won't be able</font><font color="#E5E5E5"> to</font>

939
00:42:34,760 --> 00:42:38,210
exploit them the same way because<font color="#CCCCCC"> I</font>

940
00:42:36,470 --> 00:42:39,680
won't be correcting the stack and<font color="#E5E5E5"> I</font>

941
00:42:38,210 --> 00:42:42,320
won't be corrupting the return address

942
00:42:39,680 --> 00:42:44,089
the way we<font color="#CCCCCC"> normally do but I will</font><font color="#E5E5E5"> still</font>

943
00:42:42,320 --> 00:42:46,460
be<font color="#CCCCCC"> able to have a buffer overflow so</font>

944
00:42:44,090 --> 00:42:48,200
that still count<font color="#E5E5E5"> and also format strings</font>

945
00:42:46,460 --> 00:42:51,410
attack are still<font color="#CCCCCC"> there as well you have</font>

946
00:42:48,200 --> 00:42:54,560
<font color="#CCCCCC">ways to</font><font color="#E5E5E5"> leak pointers and information</font>

947
00:42:51,410 --> 00:42:56,779
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> web assembly</font><font color="#E5E5E5"> VM so it's not</font>

948
00:42:54,560 --> 00:42:58,160
really bad in<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> because you can't</font>

949
00:42:56,780 --> 00:42:59,990
go<font color="#E5E5E5"> anywhere</font><font color="#CCCCCC"> else it's not</font><font color="#E5E5E5"> like you can</font>

950
00:42:58,160 --> 00:43:02,990
use this information<font color="#E5E5E5"> and say</font><font color="#CCCCCC"> okay you</font>

951
00:42:59,990 --> 00:43:05,270
have<font color="#E5E5E5"> to fill it ASL are on on JavaScript</font>

952
00:43:02,990 --> 00:43:07,229
doesn't<font color="#E5E5E5"> work like that</font><font color="#CCCCCC"> it's still</font>

953
00:43:05,270 --> 00:43:09,930
<font color="#CCCCCC">interesting to</font><font color="#E5E5E5"> know</font>

954
00:43:07,230 --> 00:43:12,119
and for the defensive part now<font color="#CCCCCC"> so</font>

955
00:43:09,930 --> 00:43:15,660
whether something does not that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not a</font>

956
00:43:12,119 --> 00:43:18,109
huge<font color="#E5E5E5"> threat in itself as we saw in this</font>

957
00:43:15,660 --> 00:43:22,500
presentation but if you<font color="#E5E5E5"> decide to</font>

958
00:43:18,109 --> 00:43:22,828
disable wisdom then only<font color="#E5E5E5"> JavaScript</font>

959
00:43:22,500 --> 00:43:26,070
sorry

960
00:43:22,829 --> 00:43:29,160
only Firefox and and<font color="#CCCCCC"> chrome allow you to</font>

961
00:43:26,070 --> 00:43:31,410
do that today<font color="#E5E5E5"> maybe edge and Safari will</font>

962
00:43:29,160 --> 00:43:33,240
decide to do the<font color="#E5E5E5"> same in the future but</font>

963
00:43:31,410 --> 00:43:36,960
with<font color="#E5E5E5"> just a couple of flags</font><font color="#CCCCCC"> you can</font>

964
00:43:33,240 --> 00:43:38,399
disable that<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you're working</font><font color="#E5E5E5"> if</font>

965
00:43:36,960 --> 00:43:40,140
you're a blue team around<font color="#E5E5E5"> you just</font>

966
00:43:38,400 --> 00:43:42,660
trained to detect what's<font color="#CCCCCC"> going to happen</font>

967
00:43:40,140 --> 00:43:44,220
when<font color="#E5E5E5"> you're well if you're</font><font color="#CCCCCC"> just trying</font>

968
00:43:42,660 --> 00:43:45,569
<font color="#CCCCCC">to</font><font color="#E5E5E5"> detect that</font><font color="#CCCCCC"> webassembly code is</font><font color="#E5E5E5"> being</font>

969
00:43:44,220 --> 00:43:47,790
downloaded for<font color="#E5E5E5"> example people are</font>

970
00:43:45,570 --> 00:43:50,280
playing<font color="#E5E5E5"> video games or crypto miners or</font>

971
00:43:47,790 --> 00:43:52,859
being<font color="#CCCCCC"> or being played</font><font color="#E5E5E5"> on the on the</font>

972
00:43:50,280 --> 00:43:55,740
network well you can simply try to look

973
00:43:52,859 --> 00:43:57,598
up for<font color="#E5E5E5"> the flag</font><font color="#CCCCCC"> null</font><font color="#E5E5E5"> by ASM it's a</font>

974
00:43:55,740 --> 00:43:59,430
unique flag<font color="#CCCCCC"> so you can be sure after</font>

975
00:43:57,599 --> 00:44:01,740
<font color="#CCCCCC">that that the code will be webassembly</font>

976
00:43:59,430 --> 00:44:04,379
<font color="#E5E5E5">but other than that it's pretty</font><font color="#CCCCCC"> hard to</font>

977
00:44:01,740 --> 00:44:08,189
<font color="#E5E5E5">audit that's why we decided to write a</font>

978
00:44:04,380 --> 00:44:13,349
bunch<font color="#E5E5E5"> of other tools</font><font color="#CCCCCC"> to mostly the Ida</font>

979
00:44:08,190 --> 00:44:15,150
processor to mitigate<font color="#CCCCCC"> that which come as</font>

980
00:44:13,349 --> 00:44:19,020
<font color="#E5E5E5">which</font><font color="#CCCCCC"> ones as part of</font><font color="#E5E5E5"> the static</font>

981
00:44:15,150 --> 00:44:20,460
analysis part but complex project in the

982
00:44:19,020 --> 00:44:23,040
future<font color="#E5E5E5"> because</font><font color="#CCCCCC"> webassembly</font>

983
00:44:20,460 --> 00:44:24,750
again is here to stay complex project

984
00:44:23,040 --> 00:44:26,460
we'll be<font color="#E5E5E5"> using compilers because again</font>

985
00:44:24,750 --> 00:44:27,900
we'll be running<font color="#E5E5E5"> they will try to be</font>

986
00:44:26,460 --> 00:44:30,750
<font color="#E5E5E5">running code as fast as possible and</font>

987
00:44:27,900 --> 00:44:32,280
using<font color="#E5E5E5"> as many features as they can as</font>

988
00:44:30,750 --> 00:44:34,230
they<font color="#CCCCCC"> won't spend a</font><font color="#E5E5E5"> lot of time</font>

989
00:44:32,280 --> 00:44:36,390
reimplemented<font color="#E5E5E5"> we're implementing the</font>

990
00:44:34,230 --> 00:44:39,480
wheel so they will<font color="#CCCCCC"> use tools like</font>

991
00:44:36,390 --> 00:44:40,950
<font color="#E5E5E5">Emscripten</font><font color="#CCCCCC"> Heaven script M is super</font>

992
00:44:39,480 --> 00:44:44,550
heavy<font color="#E5E5E5"> it's really it's going to be</font>

993
00:44:40,950 --> 00:44:46,799
generating<font color="#E5E5E5"> big fat files</font><font color="#CCCCCC"> and that those</font>

994
00:44:44,550 --> 00:44:49,170
files are easy to detect<font color="#E5E5E5"> if you are</font>

995
00:44:46,800 --> 00:44:50,910
trying<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> be signatures but</font>

996
00:44:49,170 --> 00:44:53,060
other than that once you've got<font color="#E5E5E5"> the the</font>

997
00:44:50,910 --> 00:44:55,828
<font color="#CCCCCC">AV</font><font color="#E5E5E5"> I'm sorry</font><font color="#CCCCCC"> sugar</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> wasn't file</font>

998
00:44:53,060 --> 00:44:58,940
<font color="#CCCCCC">you're going to be facing the problem</font>

999
00:44:55,829 --> 00:45:03,690
that the understanding it's quite hard

1000
00:44:58,940 --> 00:45:05,910
again interestingly<font color="#E5E5E5"> I saw that the</font><font color="#CCCCCC"> PMF</font>

1001
00:45:03,690 --> 00:45:08,490
software company released a full D

1002
00:45:05,910 --> 00:45:12,690
compiler for<font color="#CCCCCC"> web assembly as part of</font>

1003
00:45:08,490 --> 00:45:15,328
their their their tool their<font color="#CCCCCC"> tool kit so</font>

1004
00:45:12,690 --> 00:45:18,270
that's that<font color="#E5E5E5"> could be one of the possible</font>

1005
00:45:15,329 --> 00:45:21,030
way to analyze better the code and so

1006
00:45:18,270 --> 00:45:23,130
we're close to the conclusion now the

1007
00:45:21,030 --> 00:45:24,930
<font color="#E5E5E5">future of web assembly because yes there</font>

1008
00:45:23,130 --> 00:45:27,390
will<font color="#E5E5E5"> be a future</font><font color="#CCCCCC"> the web assembly is</font>

1009
00:45:24,930 --> 00:45:30,540
here to stay<font color="#E5E5E5"> and there will be more</font>

1010
00:45:27,390 --> 00:45:33,569
versions we<font color="#E5E5E5"> won't be staying in the MVP</font>

1011
00:45:30,540 --> 00:45:37,290
<font color="#E5E5E5">1.0 for for very long as a matter of</font>

1012
00:45:33,569 --> 00:45:40,020
fact the the next steps of the

1013
00:45:37,290 --> 00:45:44,130
improvement of the specification are

1014
00:45:40,020 --> 00:45:47,310
already<font color="#E5E5E5"> underway</font><font color="#CCCCCC"> and on this list we can</font>

1015
00:45:44,130 --> 00:45:49,380
<font color="#E5E5E5">we can see that it's already it's</font>

1016
00:45:47,310 --> 00:45:51,480
already being implemented so some of<font color="#E5E5E5"> the</font>

1017
00:45:49,380 --> 00:45:53,130
<font color="#E5E5E5">browsers that we use for example</font><font color="#CCCCCC"> Firefox</font>

1018
00:45:51,480 --> 00:45:55,619
<font color="#E5E5E5">if you're using the bleeding edge and so</font>

1019
00:45:53,130 --> 00:45:59,430
on the<font color="#E5E5E5"> nightly builds then some of the</font>

1020
00:45:55,619 --> 00:46:01,740
features that<font color="#E5E5E5"> are going to</font><font color="#CCCCCC"> be added to</font>

1021
00:45:59,430 --> 00:46:04,169
the specification in the future<font color="#E5E5E5"> are now</font>

1022
00:46:01,740 --> 00:46:07,529
in<font color="#E5E5E5"> beta</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> in the web</font><font color="#CCCCCC"> browsers that</font>

1023
00:46:04,170 --> 00:46:11,540
<font color="#E5E5E5">you are probably using and not</font>

1024
00:46:07,530 --> 00:46:14,460
everything<font color="#E5E5E5"> is good</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> ideas are</font>

1025
00:46:11,540 --> 00:46:17,040
definitely well will<font color="#E5E5E5"> be interesting to</font>

1026
00:46:14,460 --> 00:46:20,069
check for for possible implementation

1027
00:46:17,040 --> 00:46:22,380
around<font color="#E5E5E5"> most most likely the they've</font>

1028
00:46:20,069 --> 00:46:24,930
decided<font color="#E5E5E5"> to add kind of an EM map</font>

1029
00:46:22,380 --> 00:46:27,690
mechanism so acting for asking for

1030
00:46:24,930 --> 00:46:30,598
memory on<font color="#CCCCCC"> demand and that comes with a</font>

1031
00:46:27,690 --> 00:46:32,670
whole lot<font color="#CCCCCC"> of problems when it's</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

1032
00:46:30,599 --> 00:46:35,220
<font color="#E5E5E5">be</font><font color="#CCCCCC"> when it's going to be</font><font color="#E5E5E5"> finally</font>

1033
00:46:32,670 --> 00:46:37,770
implemented<font color="#E5E5E5"> and on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that they want</font>

1034
00:46:35,220 --> 00:46:41,790
<font color="#CCCCCC">to add some</font><font color="#E5E5E5"> kind of permission</font>

1035
00:46:37,770 --> 00:46:43,200
mechanism so again how web assembly is

1036
00:46:41,790 --> 00:46:45,869
going<font color="#CCCCCC"> to be dealing</font><font color="#E5E5E5"> with that is it</font>

1037
00:46:43,200 --> 00:46:47,250
going to be<font color="#E5E5E5"> a unified way dictated by</font>

1038
00:46:45,869 --> 00:46:49,380
the<font color="#E5E5E5"> specification or is going to be</font>

1039
00:46:47,250 --> 00:46:51,630
implementation specific<font color="#E5E5E5"> we can't know</font>

1040
00:46:49,380 --> 00:46:53,400
now but<font color="#E5E5E5"> it's definitely the</font><font color="#CCCCCC"> kind of</font>

1041
00:46:51,630 --> 00:46:57,829
thing that's that are interesting<font color="#CCCCCC"> to</font>

1042
00:46:53,400 --> 00:46:59,940
keep<font color="#E5E5E5"> an eye on as of today there is no</font>

1043
00:46:57,829 --> 00:47:02,760
multi-threading<font color="#E5E5E5"> so all the code in</font><font color="#CCCCCC"> your</font>

1044
00:46:59,940 --> 00:47:05,280
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> I'm sorry in your</font><font color="#E5E5E5"> in your web</font>

1045
00:47:02,760 --> 00:47:08,730
<font color="#CCCCCC">browser that is executing wasn't</font><font color="#E5E5E5"> code is</font>

1046
00:47:05,280 --> 00:47:10,530
<font color="#E5E5E5">running on one thread so again</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is</font>

1047
00:47:08,730 --> 00:47:12,630
no<font color="#E5E5E5"> risk for possible race conditions</font>

1048
00:47:10,530 --> 00:47:15,060
they will<font color="#CCCCCC"> break</font><font color="#E5E5E5"> thread based race</font>

1049
00:47:12,630 --> 00:47:17,069
conditions because they just<font color="#E5E5E5"> not exist</font>

1050
00:47:15,060 --> 00:47:18,509
and that's something that<font color="#E5E5E5"> is actively</font>

1051
00:47:17,069 --> 00:47:21,930
implemented right<font color="#E5E5E5"> now at least on</font>

1052
00:47:18,510 --> 00:47:23,910
<font color="#CCCCCC">Firefox so yeah it's going</font><font color="#E5E5E5"> to be</font>

1053
00:47:21,930 --> 00:47:26,759
<font color="#CCCCCC">interesting to see what the future</font><font color="#E5E5E5"> keeps</font>

1054
00:47:23,910 --> 00:47:29,089
for for web<font color="#E5E5E5"> assembly I will definitely</font>

1055
00:47:26,760 --> 00:47:32,420
keep<font color="#E5E5E5"> keep an eye on it</font>

1056
00:47:29,090 --> 00:47:33,200
so I hope I didn't<font color="#CCCCCC"> make webassembly</font><font color="#E5E5E5"> too</font>

1057
00:47:32,420 --> 00:47:35,600
boring

1058
00:47:33,200 --> 00:47:37,279
the I was<font color="#E5E5E5"> very interested in this</font>

1059
00:47:35,600 --> 00:47:42,230
research<font color="#E5E5E5"> because it gave a lot of</font>

1060
00:47:37,280 --> 00:47:45,050
opportunity<font color="#CCCCCC"> to dig into into some -</font>

1061
00:47:42,230 --> 00:47:47,150
universe that don't talk to<font color="#CCCCCC"> each other</font>

1062
00:47:45,050 --> 00:47:52,070
normally<font color="#E5E5E5"> so you've got the web universe</font>

1063
00:47:47,150 --> 00:47:54,800
and them the more<font color="#CCCCCC"> lower-level</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> so it</font>

1064
00:47:52,070 --> 00:47:58,760
was<font color="#CCCCCC"> definitely interesting to to to</font><font color="#E5E5E5"> have</font>

1065
00:47:54,800 --> 00:48:01,400
a look at and mostly<font color="#E5E5E5"> because</font><font color="#CCCCCC"> webassembly</font>

1066
00:47:58,760 --> 00:48:04,130
is not going<font color="#E5E5E5"> anywhere it's implemented</font>

1067
00:48:01,400 --> 00:48:06,680
is functional and more and more web

1068
00:48:04,130 --> 00:48:08,600
developers well developers are turning

1069
00:48:06,680 --> 00:48:10,339
their application into<font color="#E5E5E5"> web assembly</font>

1070
00:48:08,600 --> 00:48:13,759
because there's<font color="#E5E5E5"> a huge potential of</font>

1071
00:48:10,340 --> 00:48:17,420
finally<font color="#CCCCCC"> having</font><font color="#E5E5E5"> some some code that being</font>

1072
00:48:13,760 --> 00:48:19,610
executed at a very high speeds and in a

1073
00:48:17,420 --> 00:48:21,560
unified<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so that's something very</font>

1074
00:48:19,610 --> 00:48:24,590
<font color="#E5E5E5">unique and</font><font color="#CCCCCC"> that will solve</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font>

1075
00:48:21,560 --> 00:48:27,890
problem but<font color="#CCCCCC"> again we need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> keep an eye</font>

1076
00:48:24,590 --> 00:48:30,320
<font color="#CCCCCC">out on every every single new release</font>

1077
00:48:27,890 --> 00:48:31,970
that will come from from<font color="#E5E5E5"> the newer</font>

1078
00:48:30,320 --> 00:48:35,210
implementation of web assembly because

1079
00:48:31,970 --> 00:48:37,700
they can bring<font color="#E5E5E5"> some new bugs so I will</font>

1080
00:48:35,210 --> 00:48:39,680
leave with just<font color="#CCCCCC"> a bunch of things</font><font color="#E5E5E5"> if</font>

1081
00:48:37,700 --> 00:48:42,410
you're interested for for having<font color="#CCCCCC"> a look</font>

1082
00:48:39,680 --> 00:48:45,020
and playing by yourself<font color="#E5E5E5"> with with</font><font color="#CCCCCC"> web</font>

1083
00:48:42,410 --> 00:48:48,270
<font color="#CCCCCC">assembly and it will be the end of my</font>

1084
00:48:45,020 --> 00:48:51,710
presentation<font color="#E5E5E5"> thank you for listening</font>

1085
00:48:48,270 --> 00:48:51,710
[Applause]

