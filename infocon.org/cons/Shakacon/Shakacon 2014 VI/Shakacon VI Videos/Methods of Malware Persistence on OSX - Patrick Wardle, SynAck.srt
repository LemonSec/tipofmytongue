1
00:00:04,050 --> 00:00:07,480
but I just quick introduction to our
next speaker I'm

2
00:00:07,480 --> 00:00:10,980
Patrick laura is the director of
research at sendak

3
00:00:10,980 --> 00:00:15,410
and I think he is going to be our only
local speaker

4
00:00:15,410 --> 00:00:19,160
so Patrika hails from now in case and I

5
00:00:19,160 --> 00:00:23,259
and flew over to join us axis a minute
to talk to both

6
00:00:23,259 --> 00:00:27,270
kind almost got picked but we didn't
wanna have taken to slot so we picked

7
00:00:27,270 --> 00:00:28,050
this one

8
00:00:28,050 --> 00:00:31,950
us really looking forward to it and come
on give me I'll be going home

9
00:00:31,950 --> 00:00:38,950
a big welcome round of applause Patrick
Roy I

10
00:00:40,969 --> 00:00:44,120
me how the guys and welcome again too i
shock on

11
00:00:44,120 --> 00:00:47,218
definitely really stoked to be here
party conference

12
00:00:47,219 --> 00:00:51,000
I mean top I get the talking now rock
slippers at the same time

13
00:00:51,000 --> 00:00:56,070
cell catechal on for today are we
talking about methods and persistence

14
00:00:56,070 --> 00:00:59,530
on Apple's latest operating system which
is our a left-back

15
00:00:59,530 --> 00:01:03,570
Mavericks all of we learning about them
interesting OS X now where

16
00:01:03,570 --> 00:01:07,470
that abuses these persistent mechanisms
now I'm gonna show you how to

17
00:01:07,470 --> 00:01:10,360
generically detect up

18
00:01:10,360 --> 00:01:14,980
the name is Patrick ward off after
graduating from the University of why

19
00:01:14,980 --> 00:01:19,690
the Warriors I I began my career at nasa
I was then hired by

20
00:01:19,690 --> 00:01:23,200
what i think is probably the only US
government agency that actually worth

21
00:01:23,200 --> 00:01:27,650
which is the essay have I that help you

22
00:01:27,650 --> 00:01:31,240
and I'll found out our ability research
labs which was a a small computer

23
00:01:31,240 --> 00:01:32,479
security company that was

24
00:01:32,480 --> 00:01:35,820
I recently acquired by I the estate

25
00:01:35,820 --> 00:01:39,960
another director R&D attack I am in
short we do

26
00:01:39,960 --> 00:01:43,759
crowdsource wanna believe discovery I
would bet its security researchers

27
00:01:43,760 --> 00:01:47,870
an awful lot of cool cybersecurity
research are we just closed

28
00:01:47,870 --> 00:01:51,130
our series aids series a fun day in our
back by

29
00:01:51,130 --> 00:01:54,570
cool ventures which is which is nice cuz
now I can afford to eat something other

30
00:01:54,570 --> 00:01:55,690
than just our

31
00:01:55,690 --> 00:01:59,240
ramen noodles today we're going to learn

32
00:01:59,240 --> 00:02:02,280
about less tax now where and persistence

33
00:02:02,280 --> 00:02:05,540
for the purposes of this talk persistent
means

34
00:02:05,540 --> 00:02:09,679
achieving reaction-diffusion when I
magnin think I think he's an hour that

35
00:02:09,679 --> 00:02:10,890
installed on your computer

36
00:02:10,889 --> 00:02:14,369
every time the computer is restarted
that now or watch the game to execution

37
00:02:14,370 --> 00:02:14,960
so I can

38
00:02:14,960 --> 00:02:18,400
you it's tough the person to talk

39
00:02:18,400 --> 00:02:21,710
our cover a technical overview of the
booth where the startup process

40
00:02:21,710 --> 00:02:24,770
now I talk about method to persistence

41
00:02:24,770 --> 00:02:28,610
on OSX maverick's after that wanna talk
about

42
00:02:28,610 --> 00:02:31,990
actual SX now where's the show you some
samples that use these various

43
00:02:31,990 --> 00:02:33,180
persistent mechanisms

44
00:02:33,180 --> 00:02:37,319
and finally I wanna introduce an open
source tool

45
00:02:37,319 --> 00:02:40,940
neck engineering we reveal persist in
our on a Mac

46
00:02:40,940 --> 00:02:45,670
before we dive into all that one first
give a little bit of background

47
00:02:45,670 --> 00:02:50,119
this is somewhat of an obvious statement
but you know max are

48
00:02:50,120 --> 00:02:53,880
pretty much everywhere our recently
Apple became the number three

49
00:02:53,880 --> 00:02:59,000
security of sorry the US computer vendor
are making up almost 15 percent felt

50
00:02:59,000 --> 00:03:04,310
and if you count I devices which I think
actually help spur the adoption at max

51
00:03:04,310 --> 00:03:07,690
Apple actually outsold Windows in q4
last year

52
00:03:07,690 --> 00:03:12,180
people that battery products and they
are

53
00:03:12,180 --> 00:03:15,319
arm and a lot of people think that one
of the best things about Max is that

54
00:03:15,319 --> 00:03:16,269
they don't get an hour

55
00:03:16,270 --> 00:03:20,190
caterers which I think it's great music
but he turns out

56
00:03:20,190 --> 00:03:23,930
first computer virus which was called
the ok loner of first gear are so that

57
00:03:23,930 --> 00:03:25,440
was discovered in the wild

58
00:03:25,440 --> 00:03:28,819
was actually a computer that infected
Mac computers felt kinda ironic

59
00:03:28,819 --> 00:03:32,589
said that since that match now I was
definitely

60
00:03:32,590 --> 00:03:36,990
worst I last year there are over 30 new
II Section our families

61
00:03:36,990 --> 00:03:40,260
that infected corporate systems of
Facebook Twitter and

62
00:03:40,260 --> 00:03:45,730
even Apple which Canberra more worrisome
least in my opinion is recently there

63
00:03:45,730 --> 00:03:48,590
have been several things successful
targeted attacks

64
00:03:48,590 --> 00:03:52,840
specifically against OS X users on there
some type an activist

65
00:03:52,840 --> 00:03:55,970
that switch to using Macs because I got
there more secure

66
00:03:55,970 --> 00:03:59,709
and somebody Chinese hours label to get
get access to them so this to me

67
00:03:59,709 --> 00:04:01,360
illustrate that it needed OSX

68
00:04:01,360 --> 00:04:07,890
can be easily penetrated by skilled
attack to Apple has recently introduced

69
00:04:07,890 --> 00:04:11,238
a myriad of job security enhancements
which to me

70
00:04:11,239 --> 00:04:14,390
confirms that hey you know i section
hours it's really a problem

71
00:04:14,390 --> 00:04:18,818
I Apple claims that this you know it's
very proactive I wanna make sure their

72
00:04:18,819 --> 00:04:19,579
users are

73
00:04:19,579 --> 00:04:22,830
our secure but in reality I think it's
more reactive

74
00:04:22,830 --> 00:04:26,039
steps they're taking but they just put a
positive spin on it

75
00:04:26,039 --> 00:04:29,378
heidi's security enhancements include

76
00:04:29,379 --> 00:04:33,990
expert act which is Apple's built an
antivirus product a keeper which

77
00:04:33,990 --> 00:04:35,710
verifies downloaded software

78
00:04:35,710 --> 00:04:40,008
sandboxing which prevents applications
from accessing

79
00:04:40,009 --> 00:04:45,029
OS for core level components and finally
sign code which is a mechanism where all

80
00:04:45,029 --> 00:04:48,308
signatures are verified in only signed
kernel extensions or

81
00:04:48,309 --> 00:04:52,099
kak are allowed to lead so

82
00:04:52,099 --> 00:04:55,719
brawl free secure right all I'm gonna
show you in the next few slides

83
00:04:55,719 --> 00:05:01,719
but the strengths and weaknesses abuse
and hats so expert act as I mentioned as

84
00:05:01,719 --> 00:05:02,860
Apple's

85
00:05:02,860 --> 00:05:06,699
attempted attack product on the slide
you can see

86
00:05:06,699 --> 00:05:11,749
an XML I have our signature from attacks
enough signatures

87
00:05:11,749 --> 00:05:14,949
so there's the Description field which
contains the name an hour and attempting

88
00:05:14,949 --> 00:05:16,759
to attack

89
00:05:16,759 --> 00:05:20,389
and then the match array details how the
Mauer will be detected

90
00:05:20,389 --> 00:05:25,499
it's either hasher binary than our and
the name of the file

91
00:05:25,499 --> 00:05:29,259
does actually really lame why's it lame
basically it means an expert act can't

92
00:05:29,259 --> 00:05:30,370
attack new

93
00:05:30,370 --> 00:05:34,529
or even modified our minutes looking for
an exact passion exact file that

94
00:05:34,529 --> 00:05:37,879
7 Thacker simply recompile an hour
changes file name:

95
00:05:37,879 --> 00:05:42,259
actual tax not be on the tactic

96
00:05:42,259 --> 00:05:45,759
the keeper is another security mechanism
that Apple introduced

97
00:05:45,759 --> 00:05:49,430
I my opinion it's a little ole miss
understood I am I saw an article

98
00:05:49,430 --> 00:05:53,180
from last year that said noticed new Mac
now our sample

99
00:05:53,180 --> 00:05:56,389
infected a keeper and bypass SXT keep

100
00:05:56,389 --> 00:06:00,029
everyone was like on my guess is there
no day and a keeper

101
00:06:00,029 --> 00:06:03,599
like what's wrong with that what turns
out you have to understand how to keep

102
00:06:03,599 --> 00:06:06,969
it works to understand its limitations

103
00:06:06,969 --> 00:06:10,879
to a gatekeeper works is for programs
that are downloaded from the Internet

104
00:06:10,879 --> 00:06:14,710
the people or validate Singh digital
signature if the download file

105
00:06:14,710 --> 00:06:19,710
and choose whether to let run based on
the user settings

106
00:06:19,710 --> 00:06:24,099
gatekeeper though only checks on find
files that have a quarantine attributes

107
00:06:24,099 --> 00:06:25,119
that

108
00:06:25,119 --> 00:06:28,430
so when the file is downloaded the
application that is responsible for

109
00:06:28,430 --> 00:06:29,339
downloading

110
00:06:29,339 --> 00:06:33,860
be I the application so maybe I iTunes
the App Store or

111
00:06:33,860 --> 00:06:38,949
more commonly a browser past the set
this quarantine bed

112
00:06:38,949 --> 00:06:42,569
let me think a keeper cannot prevent the
execution a binary talent to be an

113
00:06:42,569 --> 00:06:43,110
expert

114
00:06:43,110 --> 00:06:47,499
so if you browse all militias page it
has more ships JavaScript happy let or

115
00:06:47,499 --> 00:06:48,550
some other arm

116
00:06:48,550 --> 00:06:51,639
during a vulnerability obviously that
shell code is not gonna add

117
00:06:51,639 --> 00:06:55,809
the quarantine bit file to download so
when that file is then executed a keeper

118
00:06:55,809 --> 00:06:58,860
it's not even gonna be invoked not gonna
check out file and if I don't even know

119
00:06:58,860 --> 00:07:01,629
it unsigned and I'm trust that it's
gonna be able to

120
00:07:01,629 --> 00:07:07,619
I ask you i think is if the the binary
has a valid developer I D

121
00:07:07,619 --> 00:07:11,080
beekeeper what can it or complain about
it as well talk show you some our

122
00:07:11,080 --> 00:07:12,180
samples are actually

123
00:07:12,180 --> 00:07:18,689
sign a legitimate I develop righty that
allowed them to get around a keeper

124
00:07:18,689 --> 00:07:22,949
so after I left for sandboxed domino
effect is trying to follow suit

125
00:07:22,949 --> 00:07:26,180
a sandbox is important because it what
it can do it can limit the damage

126
00:07:26,180 --> 00:07:30,550
an application I level exploit condyle
and actually in its current

127
00:07:30,550 --> 00:07:34,479
implementation the OS X app sandboxed
ResCare

128
00:07:34,479 --> 00:07:38,119
in the past applications can access
anything the user good

129
00:07:38,119 --> 00:07:41,969
now acts or their exploited exploit code
running with and I miss

130
00:07:41,969 --> 00:07:46,149
that only strictly limited out what they
can access saw lots that are downloaded

131
00:07:46,149 --> 00:07:47,680
from the Mac App Store

132
00:07:47,680 --> 00:07:51,009
sandbox as our summer a native app black
such as

133
00:07:51,009 --> 00:07:57,389
male FaceTime which have I attack
surface is that might be exposed

134
00:07:57,389 --> 00:08:00,830
so again borrowing from my last OS X now
verifies

135
00:08:00,830 --> 00:08:03,949
all minor signatures this is really
important because

136
00:08:03,949 --> 00:08:07,460
insurers that miners have not been to
burn it for example infected with an

137
00:08:07,460 --> 00:08:07,869
hour

138
00:08:07,869 --> 00:08:12,330
or buyers so by the infection is
actually very very powerful technique

139
00:08:12,330 --> 00:08:16,119
as a fortnight after a way to persist
height and hair

140
00:08:16,119 --> 00:08:19,929
30 think about an attacker infecting
Safari every time

141
00:08:19,929 --> 00:08:23,580
that's arias launch the viral coat will
be able to execute so it's a way to

142
00:08:23,580 --> 00:08:24,889
cheaper sixth

143
00:08:24,889 --> 00:08:28,460
I'm such a release healthy because of
all the malicious or viral coat is

144
00:08:28,460 --> 00:08:32,549
on within Safari there's not gonna be
any any other external processes

145
00:08:32,549 --> 00:08:35,890
for files on the desk that the user
might notice

146
00:08:35,890 --> 00:08:39,588
finally allows an attacker malicious
code a way to inherit trust

147
00:08:39,589 --> 00:08:43,430
so he running a software-based firewall
product something like a little thatch

148
00:08:43,429 --> 00:08:46,449
on its probably not for a talk to the
network so if there's moisture

149
00:08:46,449 --> 00:08:49,889
code running with an apostle SpaceX re:
it's gonna be able to access the net

150
00:08:49,889 --> 00:08:53,529
as well what happened to

151
00:08:53,529 --> 00:08:57,410
now are tried went back to find buyer
what turned up pls loader well

152
00:08:57,410 --> 00:09:01,000
the tech the subversion and terminate
the app which is a good security posture

153
00:09:01,000 --> 00:09:02,160
you can trust the app

154
00:09:02,160 --> 00:09:06,110
just tell you may be wondering how
secure

155
00:09:06,110 --> 00:09:09,430
is this mechanism at preventing the
ocean actions

156
00:09:09,430 --> 00:09:12,609
well it turns out that unlike I last I'm
fine taps

157
00:09:12,610 --> 00:09:16,630
are allowed to select you don't know it
sucks basically what happens is the

158
00:09:16,630 --> 00:09:20,389
a less level loader look for an LC code
signature block

159
00:09:20,389 --> 00:09:24,190
in the binary but finds a signature
block it then reader I finally make sure

160
00:09:24,190 --> 00:09:26,620
there's no modifications

161
00:09:26,620 --> 00:09:30,819
alright found out that if the signature
block is removed

162
00:09:30,819 --> 00:09:33,880
the binary can be modified no
consequences so there's a number

163
00:09:33,880 --> 00:09:37,449
quick and dirty ways to remove this
block you can change I

164
00:09:37,449 --> 00:09:40,839
the typeof the signature block take
another type

165
00:09:40,839 --> 00:09:43,940
are you can actually just died after a
minute counter that says the number

166
00:09:43,940 --> 00:09:46,250
blocks and since it's the last block

167
00:09:46,250 --> 00:09:50,870
hi in the moscow file the the loader
alone even I examine

168
00:09:50,870 --> 00:09:54,410
this is rather big security issue could
well mean an attacker can simply

169
00:09:54,410 --> 00:09:57,910
I unsigned signed application for
example Safari

170
00:09:57,910 --> 00:10:01,250
and an infected with viral coat it will
still be able to text you

171
00:10:01,250 --> 00:10:04,529
so here's a little python script I wrote
are basically CB

172
00:10:04,529 --> 00:10:08,519
md5 Safari we can run the unsigned
script which unsigned to inject

173
00:10:08,519 --> 00:10:09,970
malicious code

174
00:10:09,970 --> 00:10:13,730
we we compute hash show that it's
different modifications

175
00:10:13,730 --> 00:10:16,730
that if we open safari again which has
been modified normally should be

176
00:10:16,730 --> 00:10:19,100
terminated but since we've now remove
that signature

177
00:10:19,100 --> 00:10:23,120
throughout execute I even though it
contains malicious code

178
00:10:23,120 --> 00:10:26,610
that's right Apple let that happen but
you know sometimes their security is

179
00:10:26,610 --> 00:10:28,839
lacking

180
00:10:28,839 --> 00:10:32,019
so in order to protect a colonel from
malicious code from Ricketts

181
00:10:32,019 --> 00:10:35,850
on maverick's all kernel extensions have
to decide this is similar to Windows

182
00:10:35,850 --> 00:10:39,699
off before bed where digital signatures
are are verified unsigned drivers not

183
00:10:39,699 --> 00:10:41,449
allowed

184
00:10:41,449 --> 00:10:45,969
an unsigned or modified kept a kernel
extension I will feel the lead

185
00:10:45,970 --> 00:10:49,810
think we have user mode kernel-mode the
sign for all expect

186
00:10:49,810 --> 00:10:53,160
Inc X extension is allowed to be loaded
into the car

187
00:10:53,160 --> 00:10:57,939
on the outside one is blocked and alert
it's given to a user

188
00:10:57,940 --> 00:11:00,940
so for research purposes only. I wanna
show you some ways bypasses

189
00:11:00,940 --> 00:11:04,579
show you that Apple security again
spratley I

190
00:11:04,579 --> 00:11:09,099
per week through a publicly described
technique

191
00:11:09,100 --> 00:11:13,810
com and if we look at the source code
forty years remote program that loads

192
00:11:13,810 --> 00:11:14,378
the caps

193
00:11:14,379 --> 00:11:19,000
it's called XD we can see that it is
responsible for verifying signatures

194
00:11:19,000 --> 00:11:22,190
so yes the signatures verified and use
remote this is a huge

195
00:11:22,190 --> 00:11:25,779
fail why what mean finance an attacker

196
00:11:25,779 --> 00:11:30,529
is running code on a box and try to load
unsigned colonel driver and come out

197
00:11:30,529 --> 00:11:34,199
can modify the user mode a man that's
responsible for loading

198
00:11:34,199 --> 00:11:40,120
colonels and either turn off obvious
approach exercise we patched now

199
00:11:40,120 --> 00:11:43,579
so here we can see I use the debugger to
attach to the

200
00:11:43,579 --> 00:11:47,420
paid out XT which again is a program
that lets these takoma drivers from user

201
00:11:47,420 --> 00:11:48,339
mode

202
00:11:48,339 --> 00:11:52,149
I'll and ended as i disassemble the
check text signature function and just

203
00:11:52,149 --> 00:11:55,189
passion for that are always returns 0
which means tax

204
00:11:55,189 --> 00:11:59,250
that 6f signatures without with his
patch in place we can that

205
00:11:59,250 --> 00:12:05,009
unload an unsigned taxed and I'll run be
alone in a car

206
00:12:05,009 --> 00:12:08,990
so that technique works great om it's
really well publicly known of acquired

207
00:12:08,990 --> 00:12:10,759
solo attacking you there

208
00:12:10,759 --> 00:12:15,060
our code injection or in memory patching
of I wanted to find a simpler way to

209
00:12:15,060 --> 00:12:16,008
bypass

210
00:12:16,009 --> 00:12:20,110
promo codes coincided this is not that I
uncovered earlier this year

211
00:12:20,110 --> 00:12:25,089
now pretty well known com and what it
when it works it turns out that simply

212
00:12:25,089 --> 00:12:28,569
unloading that Damon that loads a
kernel-mode drivers

213
00:12:28,569 --> 00:12:32,610
and then attempting to load the unsigned
Chrome extension directly

214
00:12:32,610 --> 00:12:36,459
allows it work basically without text
the running

215
00:12:36,459 --> 00:12:39,758
no code signing checks are Fort explode

216
00:12:39,759 --> 00:12:43,490
that the command load kernel mode driver
losing directly

217
00:12:43,490 --> 00:12:46,769
I should also be noted that there's
colonel vulnerabilities

218
00:12:46,769 --> 00:12:50,100
of for example there was a recent one
which was %uh processors attack

219
00:12:50,100 --> 00:12:53,829
5 on this also allows unsigned drivers
to be mode as well

220
00:12:53,829 --> 00:12:58,790
I'm of course either patch that
technique goes away

221
00:12:58,790 --> 00:13:02,680
so the current situation so for Apple's
one of the most valuable companies in

222
00:13:02,680 --> 00:13:03,319
the world

223
00:13:03,319 --> 00:13:07,069
but in my opinion the current situation
from a security point you with

224
00:13:07,069 --> 00:13:10,389
pretty bleak %ah there's a lot of Max
and they're just

225
00:13:10,389 --> 00:13:15,370
i know im growing others to flee at hey
I'm our protections but they're all

226
00:13:15,370 --> 00:13:15,860
pretty

227
00:13:15,860 --> 00:13:20,480
people unable to be circumvented and
there's a lot of sex now where we shall

228
00:13:20,480 --> 00:13:21,500
be talking about

229
00:13:21,500 --> 00:13:25,240
and also there's limited tools that
attacked this now I think want people to

230
00:13:25,240 --> 00:13:27,149
Macs are secure so there's a lot of

231
00:13:27,149 --> 00:13:31,420
our researcher tools out there other
with decent understanding up

232
00:13:31,420 --> 00:13:35,360
that the Mac Pro process and how it may
be abused thought process now or we can

233
00:13:35,360 --> 00:13:35,910
definitely

234
00:13:35,910 --> 00:13:39,029
protect urself a new tool which I wanna
talk about

235
00:13:39,029 --> 00:13:43,689
open source well can also help us the
tech such power

236
00:13:43,689 --> 00:13:48,040
so I want to briefly talk about what
happens when you power on a Mac

237
00:13:48,040 --> 00:13:52,180
start-up process is definitely complex
in this box been now written about it

238
00:13:52,180 --> 00:13:55,790
but on which I break it down it's more
manageable chunks

239
00:13:55,790 --> 00:13:59,839
so the various stages we're going to
talk about that include the power on

240
00:13:59,839 --> 00:14:03,829
or the boot process are talking about
the car lockout

241
00:14:03,829 --> 00:14:09,089
initialize unloaded launch the which is
the first use remote program

242
00:14:09,089 --> 00:14:12,249
I finally the log on 10 which
authenticate the user and displays the

243
00:14:12,249 --> 00:14:14,290
desktop

244
00:14:14,290 --> 00:14:17,759
as much in this is pretty high level
overview if you're interested and kinda

245
00:14:17,759 --> 00:14:21,430
getting into lower level details %ah
there's a great book by Jonathan will

246
00:14:21,430 --> 00:14:26,569
jonathan levin that I would definitely
recommend checking out

247
00:14:26,569 --> 00:14:31,149
so early start it covers everything from
power on until the car or OSX begins

248
00:14:31,149 --> 00:14:32,600
executing

249
00:14:32,600 --> 00:14:38,480
so begins with powering on what powers
present the boot ROM takes over

250
00:14:38,480 --> 00:14:41,850
following this the book not yet my
program is executed

251
00:14:41,850 --> 00:14:46,790
which load the kernel ending their legal
process

252
00:14:46,790 --> 00:14:50,610
boo wrong or firmware is the first coat
to actually execute

253
00:14:50,610 --> 00:14:55,620
when does that verifies memory begins
hardware and nationalizations

254
00:14:55,620 --> 00:14:59,499
and then select the operating system
partition

255
00:14:59,499 --> 00:15:04,220
what's the boot ROM is done %ah the
booth not yet my program is executed

256
00:15:04,220 --> 00:15:07,470
a good idea my program as in past as
well

257
00:15:07,470 --> 00:15:12,310
such as initializing the device tree
locating and looting any kernel

258
00:15:12,310 --> 00:15:17,180
I drivers Buffalo the map a massive load
the kernel into memory

259
00:15:17,180 --> 00:15:21,519
and finally jumped to the kernel to
begin execution about sex

260
00:15:21,519 --> 00:15:25,110
got interesting to note that at this
point and the boot process

261
00:15:25,110 --> 00:15:28,519
on Macs can actually execute portable
executable files so if I

262
00:15:28,519 --> 00:15:34,509
files a key files which are normally
associated with Windows some tiny

263
00:15:34,509 --> 00:15:38,620
what the early boo process is complete
OSX against a bit

264
00:15:38,620 --> 00:15:43,089
the start for the kernel then launch the

265
00:15:43,089 --> 00:15:46,279
then a login window and finally the
entire

266
00:15:46,279 --> 00:15:49,850
hot start of a process I complete with
the user

267
00:15:49,850 --> 00:15:53,649
I the user's desktop being shot

268
00:15:53,649 --> 00:15:58,009
I mention the car let the first
component %uh tax

269
00:15:58,009 --> 00:16:01,579
odd colonel was actually composed of
various subsystems so each of these have

270
00:16:01,579 --> 00:16:02,829
to be I initialize

271
00:16:02,829 --> 00:16:06,359
in order the first is the mops up system
which is loan

272
00:16:06,360 --> 00:16:09,949
initialized and then following this bio
cat

273
00:16:09,949 --> 00:16:13,209
I load all devices that are all

274
00:16:13,209 --> 00:16:18,290
for all extensions 3rd life back and
finally the PSD subsystem is initialized

275
00:16:18,290 --> 00:16:22,069
and most notably BST subsys and then
executes the first YouTube user mode

276
00:16:22,069 --> 00:16:26,089
process which launched a

277
00:16:26,089 --> 00:16:30,809
so now we're actually filing user guide
hi the mentioned user i watch the is the

278
00:16:30,809 --> 00:16:32,410
first user mode program and its

279
00:16:32,410 --> 00:16:36,559
executed directly by the cup what it
does is it launches all de Manzana

280
00:16:36,559 --> 00:16:39,730
agents I'm a talk about these little
later but if you're familiar with

281
00:16:39,730 --> 00:16:42,360
Windows services you can happen to be
psalmist

282
00:16:42,360 --> 00:16:45,370
same as the first process I

283
00:16:45,370 --> 00:16:51,379
has paid a $1 and is also the ancestor
up all other product

284
00:16:51,379 --> 00:16:55,139
for the final step before reaching the
user's desktop in completing the

285
00:16:55,139 --> 00:17:00,920
to and start a process on is the
execution of the walking across

286
00:17:00,920 --> 00:17:05,119
with the login window process does is
authenticate the user and then set up

287
00:17:05,119 --> 00:17:06,550
their environment

288
00:17:06,550 --> 00:17:10,500
when does ask for the password talk to
Open Directory authenticate them

289
00:17:10,500 --> 00:17:14,760
and then loads the desktop the login
window then hangs around two

290
00:17:14,760 --> 00:17:18,410
I managed user session so if you need a
4th kill a process for

291
00:17:18,410 --> 00:17:21,850
well login or logout this is of the
login window interacting

292
00:17:21,849 --> 00:17:25,109
user

293
00:17:25,109 --> 00:17:28,300
I so now we know what goes on when iMac
started

294
00:17:28,300 --> 00:17:31,490
on doing this I wanna now present fairly
comprehensive list

295
00:17:31,490 --> 00:17:34,750
a ways that the startup process can be
abused

296
00:17:34,750 --> 00:17:38,890
to achieve persist I remember the
persistence from our is essential

297
00:17:38,890 --> 00:17:42,300
are as it ensures that whenever the
computer is restarted an hour's

298
00:17:42,300 --> 00:17:46,639
automatically we executed by the
operating system

299
00:17:46,640 --> 00:17:49,650
again kinda starting at the lowest level
there are several options for

300
00:17:49,650 --> 00:17:50,870
persistence

301
00:17:50,870 --> 00:17:54,370
om at this point these persistent
options there are pretty complex and

302
00:17:54,370 --> 00:17:54,679
even

303
00:17:54,680 --> 00:17:57,980
maybe sometimes hard work %uh specific
how are they

304
00:17:57,980 --> 00:18:01,620
they run below or before the operating
system which makes them very difficult

305
00:18:01,620 --> 00:18:03,860
to detect

306
00:18:03,860 --> 00:18:06,889
there are several possible options for
persistence on

307
00:18:06,890 --> 00:18:11,000
at this low level in the process hot re
flashing the firmware

308
00:18:11,000 --> 00:18:14,490
installing a motion yet by component or
even infecting

309
00:18:14,490 --> 00:18:17,820
good idea I how it should be options
could

310
00:18:17,820 --> 00:18:21,800
be a talking to themselves so if you're
interested in this art is a great talk

311
00:18:21,800 --> 00:18:25,870
on paper out by Snaer that cover someone
inside

312
00:18:25,870 --> 00:18:30,469
these details about these techniques

313
00:18:30,470 --> 00:18:34,280
Cisco that runs in the kernel runs at
the highest privilege levels in turn to

314
00:18:34,280 --> 00:18:36,240
the operating system it's really good
place for a

315
00:18:36,240 --> 00:18:41,620
advanced Howard left an hour the next
here's often refer to you as a group K

316
00:18:41,620 --> 00:18:45,010
so how does one array and install a
persistent kernel extension

317
00:18:45,010 --> 00:18:48,960
actually pretty pretty easy but there's
several stops the hack for

318
00:18:48,960 --> 00:18:53,230
the first you create attacks and Xcode I
could actually have a template you say

319
00:18:53,230 --> 00:18:54,790
hello to create a kernel extension

320
00:18:54,790 --> 00:18:58,270
on it kinda feels out tough sell pretty
easy to do that

321
00:18:58,270 --> 00:19:01,860
what is compiled Ecopia into the cats
directory

322
00:19:01,860 --> 00:19:04,790
you don't have to set it so that it's
owned by root for the OS followed any

323
00:19:04,790 --> 00:19:05,399
dry

324
00:19:05,400 --> 00:19:08,650
any current tensions aren't an awfully

325
00:19:08,650 --> 00:19:14,450
I you can rebuild the car all cash so
that the new cross-section picked up

326
00:19:14,450 --> 00:19:17,570
forever you know you're supposed to
release on average this code

327
00:19:17,570 --> 00:19:20,210
in theory has to be signed but as I
should use various ways to get around

328
00:19:20,210 --> 00:19:20,750
this

329
00:19:20,750 --> 00:19:24,730
onto from attackers point of view this
stock could say requirement really is an

330
00:19:24,730 --> 00:19:27,410
issue

331
00:19:27,410 --> 00:19:31,110
to hear just the command I can see I
copy it into the library extensions

332
00:19:31,110 --> 00:19:33,100
folder which is the checks directory

333
00:19:33,100 --> 00:19:36,230
and then said it to be owned by root and
then finally I rebuild

334
00:19:36,230 --> 00:19:39,890
cash I'll let you do this a time you
reboot the computer this driver

335
00:19:39,890 --> 00:19:44,600
pearl tension will be automatically
started without any user

336
00:19:44,600 --> 00:19:47,750
now what while code that runs on a
Carlos very powerful

337
00:19:47,750 --> 00:19:50,960
odds you know difficult to get to get
right he screw something up gonna pack

338
00:19:50,960 --> 00:19:51,710
box

339
00:19:51,710 --> 00:19:54,940
heart is also limited API functions that
are available thought I'm

340
00:19:54,940 --> 00:19:58,950
running I in user mode is actually for

341
00:19:58,950 --> 00:20:02,110
so watch demands and agents are the
Apple approve way

342
00:20:02,110 --> 00:20:05,199
to persist non application by nice so

343
00:20:05,200 --> 00:20:09,040
think about of Software Updater
antivirus products pretty much things

344
00:20:09,040 --> 00:20:10,370
that are going to be running

345
00:20:10,370 --> 00:20:15,510
I not interactively in the background
all the time

346
00:20:15,510 --> 00:20:18,890
so I the thing with the agents actually
very commonly

347
00:20:18,890 --> 00:20:22,170
abused by a six hour demands are not
interactive

348
00:20:22,170 --> 00:20:26,310
and they run before like and I they live
in either of these two

349
00:20:26,310 --> 00:20:30,350
launch team and directors agents on the
other hand run once the user is logged

350
00:20:30,350 --> 00:20:30,830
and

351
00:20:30,830 --> 00:20:34,419
on and maybe interactive though
generally they're not

352
00:20:34,420 --> 00:20:39,230
and they live in several other launch
agent directors

353
00:20:39,230 --> 00:20:42,440
so how does one create persistent
launched a min for agent

354
00:20:42,440 --> 00:20:45,850
in other words a binary that will
automatically be loaded whenever the ice

355
00:20:45,850 --> 00:20:47,129
picks up

356
00:20:47,130 --> 00:20:51,190
comes out pretty easy simply create an
action of property list or

357
00:20:51,190 --> 00:20:54,480
pls that requires are that contain
several

358
00:20:54,480 --> 00:20:58,460
fired keys topper says the label which
is just stop

359
00:20:58,460 --> 00:21:02,660
the name of the the binary persist had
in the past to the binary image

360
00:21:02,660 --> 00:21:06,910
up the game-winner agent and fall this
most importantly there's the run it low

361
00:21:06,910 --> 00:21:08,770
key that he set to true

362
00:21:08,770 --> 00:21:12,190
this one sure that pls will
automatically I

363
00:21:12,190 --> 00:21:15,800
watch the agent them said he say this
fall out what to watch

364
00:21:15,800 --> 00:21:19,700
agent or Damon directories you're good
to go a time the box who

365
00:21:19,700 --> 00:21:23,410
op de binary that's despite its people
it will be automatically executed

366
00:21:23,410 --> 00:21:27,450
again without user interaction

367
00:21:27,450 --> 00:21:31,090
yes your YouTube re: connects users are
probably familiar with prime cups

368
00:21:31,090 --> 00:21:35,770
I'll SX supports crime jobs just like an
BST on it's an easy way to execute a

369
00:21:35,770 --> 00:21:36,910
commander scripts

370
00:21:36,910 --> 00:21:40,220
at certain intervals so you can do it I
reboot are

371
00:21:40,220 --> 00:21:44,090
daily or even want minute on so in this
example here on creating

372
00:21:44,090 --> 00:21:47,240
I crime job actually executes I which
met

373
00:21:47,240 --> 00:21:50,490
against another person techniques very
straightforward all

374
00:21:50,490 --> 00:21:55,620
but works another method is creating a
login or logout

375
00:21:55,620 --> 00:21:59,290
ok by creating a login or logout ok a
script or command

376
00:21:59,290 --> 00:22:03,850
can be automatically executed whenever
the user logs and were like that

377
00:22:03,850 --> 00:22:07,530
Apple states that these talks are
deprecated I but the actual work fine on

378
00:22:07,530 --> 00:22:10,020
OSX Mavericks

379
00:22:10,020 --> 00:22:14,160
to create such a hot you can use the
default command

380
00:22:14,160 --> 00:22:17,560
what you do is simply specify the i
right action

381
00:22:17,560 --> 00:22:20,570
and then the call not Apple dot lock and
key with file

382
00:22:20,570 --> 00:22:25,320
and finally the script for the command
to persist

383
00:22:25,320 --> 00:22:29,740
if you can look at the P with file I
that that you just wrote to you can

384
00:22:29,740 --> 00:22:31,190
actually see our ad hoc

385
00:22:31,190 --> 00:22:34,580
and memory so you can just stop you know
don't that policy there

386
00:22:34,580 --> 00:22:37,889
binary encoded or implant action you can
see login or logout

387
00:22:37,890 --> 00:22:41,520
against what's a set in this case is a
long and hard a time user logs and

388
00:22:41,520 --> 00:22:48,240
the user ban hoc tot message script will
be automatically executed

389
00:22:48,240 --> 00:22:53,680
so for application Login Items are the
Apple approved way to persist

390
00:22:53,680 --> 00:22:57,970
anything that's registered at the login
item is disappointing doing

391
00:22:57,970 --> 00:23:02,030
on C have things like the iTunes helper
I P P and software pretty much any

392
00:23:02,030 --> 00:23:04,060
absentee to be automatically executed

393
00:23:04,060 --> 00:23:08,379
I will be stored like item why items are
stored in other people smile

394
00:23:08,380 --> 00:23:12,790
I in this file contains the name of the
item weather should be hit or not

395
00:23:12,790 --> 00:23:16,700
an and base 64 encoded data that
contains a month things the pack

396
00:23:16,700 --> 00:23:21,320
binary our the application XQ

397
00:23:21,320 --> 00:23:25,290
so in the introduction of the Mac App
Store an app sandboxing

398
00:23:25,290 --> 00:23:30,510
on actually can't register themselves
traditional long items anymore because

399
00:23:30,510 --> 00:23:31,730
at the system level

400
00:23:31,730 --> 00:23:34,810
component they don't have operations
back

401
00:23:34,810 --> 00:23:38,120
so in order to work around this Apple
designed a new way that allows

402
00:23:38,120 --> 00:23:41,939
accent too easy steps to register
themselves are still has a long and I'm

403
00:23:41,940 --> 00:23:43,160
just in a new way

404
00:23:43,160 --> 00:23:48,680
now the best or worst part of this is
that doesn't show up in any groups

405
00:23:48,680 --> 00:23:52,110
so much interest that's required I you
need to act

406
00:23:52,110 --> 00:23:55,449
the first one is the main application
and then a helper app the

407
00:23:55,450 --> 00:23:59,360
ap the process which is the helper app
should be copied into the Login Items

408
00:23:59,360 --> 00:24:02,729
subdirectory at the minute

409
00:24:02,730 --> 00:24:05,940
in a nap then when it's I when it's
executed should invoke the

410
00:24:05,940 --> 00:24:09,620
SM Login Items set enabled function and
what this will do

411
00:24:09,620 --> 00:24:12,870
will persist the helper app and I'll
sure that every time

412
00:24:12,870 --> 00:24:16,399
the user is are logged and that this
helper app will be automatically

413
00:24:16,400 --> 00:24:18,630
executed as well

414
00:24:18,630 --> 00:24:23,770
again this is a technique that an hour
can use to person

415
00:24:23,770 --> 00:24:27,060
so you know things that that I use Macs
are probably com

416
00:24:27,060 --> 00:24:30,730
you know enjoyed a future where whenever
you log out and then log back in any app

417
00:24:30,730 --> 00:24:32,440
that you had opener automatically

418
00:24:32,440 --> 00:24:36,800
re-opened I this is the default behavior
on IX maverick's unless you uncheck

419
00:24:36,800 --> 00:24:37,610
happen

420
00:24:37,610 --> 00:24:40,949
lockout ha maps that

421
00:24:40,950 --> 00:24:45,080
are automatically are are going to be
automatically reload it are stored and

422
00:24:45,080 --> 00:24:46,379
yet another people stocking

423
00:24:46,380 --> 00:24:50,760
document now if you dump SQS you can see
information about all the App Center

424
00:24:50,760 --> 00:24:52,550
gonna be automatically reopened

425
00:24:52,550 --> 00:24:56,050
casa there's the idea the app again
whether to hide it or not

426
00:24:56,050 --> 00:24:59,320
and then of course the past the
application

427
00:24:59,320 --> 00:25:04,100
an hour maybe may abuse this technique
by modifying directly this key west

428
00:25:04,100 --> 00:25:08,040
and then whatever the user's automatic I
the up the user is logged and

429
00:25:08,040 --> 00:25:14,260
that application that's specified in
their will be automatically executed

430
00:25:14,260 --> 00:25:19,120
another deprecated technique it still
works on maverick's our startup items

431
00:25:19,120 --> 00:25:22,689
startup items again require several
steps

432
00:25:22,690 --> 00:25:25,940
are the first is to create a script that
contains what everyone to be

433
00:25:25,940 --> 00:25:29,710
I'll whatever's the automatically
executed

434
00:25:29,710 --> 00:25:33,030
then you should create a file that's
called startup parameters top US

435
00:25:33,030 --> 00:25:36,620
this file should contain provides key

436
00:25:36,620 --> 00:25:41,739
and on the cake that contains the name
of the script that you created in step 1

437
00:25:41,740 --> 00:25:45,240
both these then should be placed in a
folder that and 10 the startup item

438
00:25:45,240 --> 00:25:46,230
directories

439
00:25:46,230 --> 00:25:50,250
and it's really important that this
folder that has the name that matches

440
00:25:50,250 --> 00:25:53,350
got the script now he follow the steps
exactly

441
00:25:53,350 --> 00:25:56,560
anytime the computer is restarted the
startup item scripts will be

442
00:25:56,560 --> 00:25:58,120
automatically excuse

443
00:25:58,120 --> 00:26:02,570
to get another technique in our kid use

444
00:26:02,570 --> 00:26:05,770
and other BS the technique that actually
works on OSX I

445
00:26:05,770 --> 00:26:09,560
and I can allow scripts for again a
command to be automatically executed

446
00:26:09,560 --> 00:26:12,919
RRC script the RC common

447
00:26:12,920 --> 00:26:17,550
file is parth and processed anytime iMac
is restarted

448
00:26:17,550 --> 00:26:20,909
so if you put any malicious commands in
there they will be processed by the

449
00:26:20,910 --> 00:26:21,870
operating system

450
00:26:21,870 --> 00:26:27,590
and executed whenever computers

451
00:26:27,590 --> 00:26:31,250
another technique start there's a lot of
these I is the Launch Control Pro

452
00:26:31,250 --> 00:26:34,920
programming interfaces with launch d
when a Mac start-up

453
00:26:34,920 --> 00:26:38,980
watch control looks for file name: I
file name: launch deka

454
00:26:38,980 --> 00:26:43,340
pic and if it finds that a parse is that
an automatically executes any command

455
00:26:43,340 --> 00:26:44,629
center in there

456
00:26:44,630 --> 00:26:47,820
now this fall's not normally created but
if you create it and put command in

457
00:26:47,820 --> 00:26:50,300
there they will be processed

458
00:26:50,300 --> 00:26:54,060
now this can't be normal script or are
shell commands cuz they have to be

459
00:26:54,060 --> 00:26:55,570
launch control

460
00:26:55,570 --> 00:26:58,830
of it turns out that BS EXEC command
which

461
00:26:58,830 --> 00:27:02,230
is a launch control command can be used
and that in turn can execute

462
00:27:02,230 --> 00:27:08,070
I any scripts or or our commands

463
00:27:08,070 --> 00:27:11,850
so the final persistent technique I
wanna talk about I am is more just

464
00:27:11,850 --> 00:27:15,090
up a an old-school virus writing tech

465
00:27:15,090 --> 00:27:17,649
on your back in the day when I was
growing up buyers writers with equal

466
00:27:17,650 --> 00:27:18,330
guys

467
00:27:18,330 --> 00:27:21,730
siddig releasing all these particles
about by binary infection

468
00:27:21,730 --> 00:27:25,100
and really viruses were the most common
on our

469
00:27:25,100 --> 00:27:29,560
the virus is work by infecting files on
injecting viral code in order to

470
00:27:29,560 --> 00:27:30,620
replicate

471
00:27:30,620 --> 00:27:34,290
says we show that OSX acts can be and
find

472
00:27:34,290 --> 00:27:38,810
minor infection you know might be back
in stock which I kinda hope to be some

473
00:27:38,810 --> 00:27:43,590
nice job security so there's a lot of
different ways to in fact

474
00:27:43,590 --> 00:27:47,290
and OSX winery %ah the simplest way was
described by

475
00:27:47,290 --> 00:27:51,139
I want the old school virus writers name
right to bed and what it does is it

476
00:27:51,140 --> 00:27:53,560
inject some viral code into a target
binary

477
00:27:53,560 --> 00:27:57,379
and then hijacked entry point to point
to the viral coat

478
00:27:57,380 --> 00:28:01,280
this ensures that the virus is code is
executed whenever the applications right

479
00:28:01,280 --> 00:28:05,590
sell an attacker might I you know in
fact the user's browser their chat

480
00:28:05,590 --> 00:28:08,669
client the mail client something that is
commonly executed to ensure that the

481
00:28:08,670 --> 00:28:09,210
virus

482
00:28:09,210 --> 00:28:12,990
when the most code is executed as well

483
00:28:12,990 --> 00:28:16,640
ok it's actually this is the final
persistent talk RI technicolor talk

484
00:28:16,640 --> 00:28:17,060
about

485
00:28:17,060 --> 00:28:21,290
so many applications such as browser
support plugin architectures

486
00:28:21,290 --> 00:28:24,000
I which are dynamic libraries that are
automatically loaded when the

487
00:28:24,000 --> 00:28:26,480
application truck

488
00:28:26,480 --> 00:28:29,660
now Reuters can I have abused the
functionality to create

489
00:28:29,660 --> 00:28:33,430
motion points for some acts that are
commonly targeted

490
00:28:33,430 --> 00:28:36,570
I include a browser such as Safari

491
00:28:36,570 --> 00:28:39,830
Firefox chrome

492
00:28:39,830 --> 00:28:43,679
or even items now it's sometimes hard to

493
00:28:43,680 --> 00:28:46,930
gets the axe you automatically execute
this militia plugin

494
00:28:46,930 --> 00:28:50,690
I know some time to load it but that
won't export a certain function or

495
00:28:50,690 --> 00:28:51,130
they'll

496
00:28:51,130 --> 00:28:55,360
justified I don't like it to unload it
without executing I N E coli

497
00:28:55,360 --> 00:28:59,070
what turns out you can get around this
by exporting a constructor

498
00:28:59,070 --> 00:29:02,070
are basically what you do with can
create a dynamic library

499
00:29:02,070 --> 00:29:05,149
be specified in constructor actually to
function

500
00:29:05,150 --> 00:29:08,940
on if a file has this the loader one is
actually

501
00:29:08,940 --> 00:29:12,330
loading the dynamic library will
actually execute instructor for handing

502
00:29:12,330 --> 00:29:13,990
off control the application

503
00:29:13,990 --> 00:29:17,090
this is a really good way to ensure that
your malicious code is always executed

504
00:29:17,090 --> 00:29:17,699
even air

505
00:29:17,700 --> 00:29:23,820
he application which splitting the
plugin and I'm not like an airplane

506
00:29:23,820 --> 00:29:27,730
so want to have a rest in peace live for
persistent tech persistence techniques

507
00:29:27,730 --> 00:29:29,600
that no longer work so that you heard

508
00:29:29,600 --> 00:29:32,949
either been fully deprecated or removed
from OSX matrics

509
00:29:32,950 --> 00:29:36,780
so these include the environment .us

510
00:29:36,780 --> 00:29:40,200
the system Login Items populist the

511
00:29:40,200 --> 00:29:43,240
model launch application directory and
finally

512
00:29:43,240 --> 00:29:46,500
persisting injectable lot dynamic
libraries yet the

513
00:29:46,500 --> 00:29:51,670
I D while the insert library and buyer

514
00:29:51,670 --> 00:29:55,510
okay so we talk a lot about OSX up an
hour

515
00:29:55,510 --> 00:29:59,040
I'll start a persistent techniques I
want to show you some real world now of

516
00:29:59,040 --> 00:30:03,960
now where samples that actually a use
these techniques

517
00:30:03,960 --> 00:30:07,050
so years ago somebody Chinese who are we
kidding

518
00:30:07,050 --> 00:30:10,540
I started targeting hey I bet national
CU's backs

519
00:30:10,540 --> 00:30:13,710
I with motions were documents a payload
of these attacks

520
00:30:13,710 --> 00:30:17,460
with comment now earth are pretty basic

521
00:30:17,460 --> 00:30:21,930
on but what it does is why execute it
persists to watch them

522
00:30:21,930 --> 00:30:25,720
so you can actually observed this up by
using the FF usage tool which is kinda

523
00:30:25,720 --> 00:30:27,490
like wal-mart for Windows shows

524
00:30:27,490 --> 00:30:30,770
of I'll I'll activity and when the on

525
00:30:30,770 --> 00:30:34,170
the implant or the binary is first run
you can see it creating this

526
00:30:34,170 --> 00:30:38,340
sake with Paul to install its official
launch date

527
00:30:38,340 --> 00:30:41,830
and within hours finish installing I if
you look at the

528
00:30:41,830 --> 00:30:44,780
watch them and directory where the
launch demands are you can see that he

529
00:30:44,780 --> 00:30:45,389
was the crew

530
00:30:45,390 --> 00:30:48,530
it's created and then its binary which
is also named

531
00:30:48,530 --> 00:30:52,389
Real Player update can't match that he
left will be automatically executed

532
00:30:52,390 --> 00:30:56,550
whenever the computer is restarted

533
00:30:56,550 --> 00:30:59,820
an hour that accumulated the largest
number I sex and actions

534
00:30:59,820 --> 00:31:05,460
is flashback so flashback exported
unknown but unpatched Java vulnerability

535
00:31:05,460 --> 00:31:09,330
and its me it meant that if people who
had an older version of Java would visit

536
00:31:09,330 --> 00:31:14,129
malicious or compromise website they
could be automatically effective

537
00:31:14,130 --> 00:31:20,270
flashback persist as user-agent: which
is ironically named John up

538
00:31:20,270 --> 00:31:22,740
interesting to note that if you look at
this you can see the run at low key

539
00:31:22,740 --> 00:31:23,780
which is that true

540
00:31:23,780 --> 00:31:27,410
again this will ensure that any time the
computer is restarted

541
00:31:27,410 --> 00:31:31,310
this now or will be automatically excuse

542
00:31:31,310 --> 00:31:34,310
now according to online analysis crisis
is a piece %uh

543
00:31:34,310 --> 00:31:38,929
now are used by nation states hots
fairly sophisticated though petrol might

544
00:31:38,930 --> 00:31:39,660
disagree

545
00:31:39,660 --> 00:31:43,610
Hall but I think it's just a very
complete OS X now our sample which is

546
00:31:43,610 --> 00:31:44,350
odd kinda

547
00:31:44,350 --> 00:31:48,439
interesting on into itself it even has a
rootkit or chrome component to high

548
00:31:48,440 --> 00:31:49,290
profit for

549
00:31:49,290 --> 00:31:52,590
and files again this is fairly rare in
OSX on our

550
00:31:52,590 --> 00:31:57,129
definitely a very interesting example so
we can look at the third assembly from

551
00:31:57,130 --> 00:31:59,290
very antsy which is I believe discovered

552
00:31:59,290 --> 00:32:02,330
in January sometime this year you can
see the

553
00:32:02,330 --> 00:32:05,710
hours building a pack to a file within
the users launch

554
00:32:05,710 --> 00:32:08,980
agent record for other words is
attempting to persist

555
00:32:08,980 --> 00:32:13,910
watch it I find it kinda interesting and
it's really sophisticated OS X now we're

556
00:32:13,910 --> 00:32:15,210
happy ones really using

557
00:32:15,210 --> 00:32:18,370
a very my pain lame on Monday in person
technique but

558
00:32:18,370 --> 00:32:21,330
easy to stack but you know I guess if
that works there's not a lot of

559
00:32:21,330 --> 00:32:22,699
techniques to prevent this

560
00:32:22,700 --> 00:32:27,230
onto the attackers 12 the support

561
00:32:27,230 --> 00:32:31,230
Jenny cab is another OS X now our sample
I it's interesting that its

562
00:32:31,230 --> 00:32:34,470
written in Python now it's compiled for
distribution

563
00:32:34,470 --> 00:32:38,670
is also fine with the developer ID which
is nice because it allows it to get

564
00:32:38,670 --> 00:32:41,200
around a keeper

565
00:32:41,200 --> 00:32:44,690
sentence written in Python it's actually
really easy to analyze and figure out

566
00:32:44,690 --> 00:32:46,290
the persistence mechanism

567
00:32:46,290 --> 00:32:50,320
which is a crime job set to execute
every minute

568
00:32:50,320 --> 00:32:53,580
what's an hour is installed you can use
the crime tab dot

569
00:32:53,580 --> 00:32:58,000
welcome and to view the malicious I
crotch chop

570
00:32:58,000 --> 00:33:01,160
another interesting feature of this
that's not really related to persistent

571
00:33:01,160 --> 00:33:04,370
is that it makes use are right electric
to make me

572
00:33:04,370 --> 00:33:08,320
now where appear as a PDF document to
get this and email it can actually look

573
00:33:08,320 --> 00:33:09,040
like it has

574
00:33:09,040 --> 00:33:12,730
I the file extension adopted yeah and
use the PS icon

575
00:33:12,730 --> 00:33:16,780
I so the real expansion though is dot
and the way they get this

576
00:33:16,780 --> 00:33:20,410
what is by using special Unicode
character that transposes the characters

577
00:33:20,410 --> 00:33:21,340
around the

578
00:33:21,340 --> 00:33:24,850
the final period has also been commonly
abused

579
00:33:24,850 --> 00:33:31,360
in Windows now or best interesting to
see it transition Maxon hours while

580
00:33:31,360 --> 00:33:35,300
of these least four activists oMG
recently another piece about sex now are

581
00:33:35,300 --> 00:33:35,710
worth

582
00:33:35,710 --> 00:33:40,370
was discovered on activists computer
during the Oslo Freedom Forum workshop

583
00:33:40,370 --> 00:33:43,479
this now we're invokes the our shared
file

584
00:33:43,480 --> 00:33:47,280
answer item URL functional that you can
see in the disassembly

585
00:33:47,280 --> 00:33:50,670
so that it added to the login items at
the current user

586
00:33:50,670 --> 00:33:54,790
which bus get the persistence so if you
view the Login Items you can see the now

587
00:33:54,790 --> 00:33:55,840
we're showing up

588
00:33:55,840 --> 00:33:58,919
so again this is kinda lame persistent
technique

589
00:33:58,920 --> 00:34:05,420
yes it works but I think these now
offers I need up their game lol

590
00:34:05,420 --> 00:34:08,760
so you want to again another piece about
sex now our arm

591
00:34:08,760 --> 00:34:13,120
and this works by trying to convince
users to install itself

592
00:34:13,120 --> 00:34:17,120
I'll he claims to be a you know HD plug
in our media contacts on Sherwood

593
00:34:17,120 --> 00:34:20,620
all been to web sites that tell us we
need to install some plugin

594
00:34:20,620 --> 00:34:23,679
out to view content now you know if this
is quick am at the Apple

595
00:34:23,679 --> 00:34:26,700
Apple our website probably jet om

596
00:34:26,699 --> 00:34:29,730
but not to abuse is back tricked users
into it

597
00:34:29,730 --> 00:34:33,370
effects of and what doesn't stall

598
00:34:33,370 --> 00:34:36,739
it creates militias plugin for Safari
Firefox crop

599
00:34:36,739 --> 00:34:39,750
so uses the browser plug-ins to I

600
00:34:39,750 --> 00:34:43,949
sure pursueth to fill out an hour to be
automatically executed whenever

601
00:34:43,949 --> 00:34:47,250
the user our watches any of their
browsers

602
00:34:47,250 --> 00:34:50,790
and then love user search the web plugin
transmit information

603
00:34:50,790 --> 00:34:54,330
about uploaded pages and then also
inject ads

604
00:34:54,330 --> 00:34:58,960
up to hopefully get the user to click on

605
00:34:58,960 --> 00:35:02,580
masako can also be written entirely in
script doesn't always have to be written

606
00:35:02,580 --> 00:35:02,860
in

607
00:35:02,860 --> 00:35:08,130
see year objective-c tell Renee Powell
as an example of this

608
00:35:08,130 --> 00:35:11,140
by reading the install script which are
you not to bash script

609
00:35:11,140 --> 00:35:18,140
Cain's comments which is really nice are
we can see that it persists as a start

610
00:35:19,180 --> 00:35:22,799
another OS X on our sample is Mac
protector now this is the

611
00:35:22,800 --> 00:35:26,610
fake eighty product very common not see
this on Windows platforms

612
00:35:26,610 --> 00:35:29,770
this was one of the first widely
successful ones to

613
00:35:29,770 --> 00:35:34,480
I expect our target OS X users basically
when a malicious or compromise website

614
00:35:34,480 --> 00:35:35,580
is visited

615
00:35:35,580 --> 00:35:39,660
there's a pop-up and it pretends that
you know users computers infected in his

616
00:35:39,660 --> 00:35:41,020
office now where and then it

617
00:35:41,020 --> 00:35:44,610
provide itself I a link that says hey
you know if you download this all clean

618
00:35:44,610 --> 00:35:45,830
everything up

619
00:35:45,830 --> 00:35:49,509
on now of course if the user downloads
that binary and runs it

620
00:35:49,510 --> 00:35:52,640
only that are they really infected I
wondered

621
00:35:52,640 --> 00:35:56,609
the suspect package really work arms and
a little research and it turned out

622
00:35:56,610 --> 00:36:00,840
there was an article that they did that
AppleCare received over 50,000 call

623
00:36:00,840 --> 00:36:05,480
about about the power and how to la know
how to remove it at first they

624
00:36:05,480 --> 00:36:08,910
denied it because they didn't want to
admit that Max getting our

625
00:36:08,910 --> 00:36:13,020
I but ultimately they added protection
into their expert tech product

626
00:36:13,020 --> 00:36:16,560
also that it would the tech now of
course the attackers just we compiled

627
00:36:16,560 --> 00:36:17,590
and change that

628
00:36:17,590 --> 00:36:20,660
and an apple had to pit again so it's
interesting if you look at their

629
00:36:20,660 --> 00:36:22,140
signature definitions there's

630
00:36:22,140 --> 00:36:25,339
pop hot singers on just a sec this
one-hour

631
00:36:25,340 --> 00:36:30,870
product of here we can see a persisting
as I login item

632
00:36:30,870 --> 00:36:34,609
and then again if we don't but he left
already login items are stored

633
00:36:34,610 --> 00:36:38,010
we can see the name and then there's
that basically coding

634
00:36:38,010 --> 00:36:41,270
encoded data that if you decode will
contain the past I

635
00:36:41,270 --> 00:36:45,450
to the Mac protector I motions binary

636
00:36:45,450 --> 00:36:48,620
and a final peace and now where we're
going to look at today is

637
00:36:48,620 --> 00:36:51,810
a classic or computer viruses computer
virus that infects

638
00:36:51,810 --> 00:36:56,480
expires I works by injecting viral code
into a binary

639
00:36:56,480 --> 00:36:59,910
then Jack hijacking the entry point as
to what this does

640
00:36:59,910 --> 00:37:04,240
this gives the virus persistent because
any time now disinfected binary is

641
00:37:04,240 --> 00:37:04,959
executed

642
00:37:04,960 --> 00:37:08,640
the viral code will be automatically
exclude well

643
00:37:08,640 --> 00:37:12,339
now it turns out though that the
specific hockey Sat mahler

644
00:37:12,340 --> 00:37:15,930
actually does not unsigned applications
before

645
00:37:15,930 --> 00:37:19,060
infecting so on OSX maverick's any

646
00:37:19,060 --> 00:37:22,100
binaries for Marco applications that in
fact

647
00:37:22,100 --> 00:37:26,230
well crash at my you know the loader
will detect it has been a modification

648
00:37:26,230 --> 00:37:29,870
just killing so it's probably gonna
cause major noises and other

649
00:37:29,870 --> 00:37:33,859
as a result will be really easy just
checked I know maybe after hearing their

650
00:37:33,860 --> 00:37:37,470
this presentation L figure out they can
sign it by top

651
00:37:37,470 --> 00:37:41,689
I guess we'll see at so you're
researching all this now where

652
00:37:41,690 --> 00:37:45,340
are even though I'm not an activist or
as far as I'm aware

653
00:37:45,340 --> 00:37:49,510
personal interest to any government I
was bothered by the fact that I

654
00:37:49,510 --> 00:37:52,410
I just didn't know what was
automatically executing on my computer

655
00:37:52,410 --> 00:37:52,850
or

656
00:37:52,850 --> 00:37:56,150
there were some stopping our all you
know install their

657
00:37:56,150 --> 00:37:59,430
I consider myself the security
researcher at work on Macs for a while

658
00:37:59,430 --> 00:38:02,330
but all these processes running in
places that the from our

659
00:38:02,330 --> 00:38:05,910
live that charged in know about

660
00:38:05,910 --> 00:38:09,319
so I looked on I want to do that not to
like a fine and I did funny thing for

661
00:38:09,320 --> 00:38:10,280
maverick's that would

662
00:38:10,280 --> 00:38:13,700
to simply show me everything that was
automatically executed when my Mac

663
00:38:13,700 --> 00:38:14,359
restart

664
00:38:14,360 --> 00:38:18,040
so I decided try my own and then I
wanted to open source and released today

665
00:38:18,040 --> 00:38:22,290
so that we can I'll hopefully be I'm
more scared

666
00:38:22,290 --> 00:38:25,690
so the goal this tool is really simple
when I say knock knock

667
00:38:25,690 --> 00:38:29,710
to tell me who's there in other words
it's a show me everything that's set to

668
00:38:29,710 --> 00:38:33,730
automatically execute when my back is
rebooted

669
00:38:33,730 --> 00:38:37,910
now in terms of its design I it's open
source written in Python

670
00:38:37,910 --> 00:38:41,379
at go on an extensible plugin
architecture which will talk about it

671
00:38:41,380 --> 00:38:43,780
xlite

672
00:38:43,780 --> 00:38:46,800
should be noted though that not not
lists everything that set to

673
00:38:46,800 --> 00:38:48,050
automatically exclude

674
00:38:48,050 --> 00:38:52,470
which includes legitimate fall so this
means that users of its all have to have

675
00:38:52,470 --> 00:38:53,160
some knowledge

676
00:38:53,160 --> 00:38:56,210
a on your Mac malware OSX I

677
00:38:56,210 --> 00:39:00,370
you know processes although should point
out that signed verified Apple wineries

678
00:39:00,370 --> 00:39:00,799
are

679
00:39:00,800 --> 00:39:06,600
ignored again I want to keep some job
security here

680
00:39:06,600 --> 00:39:09,779
so I think as I I showed you there's
Thunder RSX

681
00:39:09,780 --> 00:39:13,090
persistent mechanisms that can are
abused by an hour

682
00:39:13,090 --> 00:39:17,230
now I would be naive to think that I a
comprehensive comprehensively

683
00:39:17,230 --> 00:39:21,500
I'll list them all and that new ones
wouldn't be found I'm so it seemed wise

684
00:39:21,500 --> 00:39:22,170
to

685
00:39:22,170 --> 00:39:26,060
mom you know develop knock knock based
on a plugin based approach whereas

686
00:39:26,060 --> 00:39:29,410
each plugin could stand for a particular
person technique

687
00:39:29,410 --> 00:39:33,009
manage new persistent techniques were
found not not be

688
00:39:33,010 --> 00:39:37,200
easily extended I designed knock knock

689
00:39:37,200 --> 00:39:40,250
so that the court did most of the work
so that running a plugin is actually

690
00:39:40,250 --> 00:39:41,420
really easy

691
00:39:41,420 --> 00:39:45,460
so here's a simple by plug and that new
rates launch statements you can see that

692
00:39:45,460 --> 00:39:49,050
about ten lines of code so first we
simply

693
00:39:49,050 --> 00:39:52,610
not specified the launched a min
directory so the system widely watched a

694
00:39:52,610 --> 00:39:53,070
mint

695
00:39:53,070 --> 00:39:56,660
directory and then the lime library
watch demons directory

696
00:39:56,660 --> 00:40:00,270
what we do that it's just get all the
key with files that are in strictly

697
00:40:00,270 --> 00:40:05,000
with an injury through those and see if
the run at low key is that true

698
00:40:05,000 --> 00:40:08,400
if it is we know that hey this launch
agent where this launched a man

699
00:40:08,400 --> 00:40:12,590
is gonna be automatically executed
whenever my Mac is rebooted

700
00:40:12,590 --> 00:40:16,170
so we do is we then instantiate filing
past that back to the OS X

701
00:40:16,170 --> 00:40:22,310
%uh start to the NOC NOC or so that it
can be displayed user

702
00:40:22,310 --> 00:40:26,670
so like I do get distracted by shiny
things like good thang bypasses are

703
00:40:26,670 --> 00:40:27,390
going on Twitter

704
00:40:27,390 --> 00:40:30,450
reading skarica ranting about jailbreaks
and whatnot

705
00:40:30,450 --> 00:40:34,560
have to knock knock is it's still in
Beta although I mostly just say that's

706
00:40:34,560 --> 00:40:34,890
ok

707
00:40:34,890 --> 00:40:38,150
anything goes wrong no no one yells at
me howard's

708
00:40:38,150 --> 00:40:41,590
it's definitely usable and in fact and
this is a true story

709
00:40:41,590 --> 00:40:45,320
I just last Sunday I at a friends at a
max ring flower

710
00:40:45,320 --> 00:40:48,500
fourth some sure you guys are all
familiar with that you say you know

711
00:40:48,500 --> 00:40:50,700
computers everyone wants you to think
there's

712
00:40:50,700 --> 00:40:53,750
are so whatever his house and abroad not
with me

713
00:40:53,750 --> 00:40:57,360
me I don't expect to find anything on
but I read on its back and I found you

714
00:40:57,360 --> 00:40:57,980
want to

715
00:40:57,980 --> 00:41:01,500
I was installed as a ago or chrome
plugin

716
00:41:01,500 --> 00:41:04,640
and I also found i PTO which I'd never

717
00:41:04,640 --> 00:41:08,740
seen before in the wild horse was kinda
call like proven tool which I'd

718
00:41:08,740 --> 00:41:11,850
developing a lab with no now accept
sample size actually

719
00:41:11,850 --> 00:41:15,350
you know worked in a while the best part
was that guy was like a surfboard shaper

720
00:41:15,350 --> 00:41:17,009
so he's gonna help me up with an award

721
00:41:17,010 --> 00:41:20,440
cell your writing code has some perks

722
00:41:20,440 --> 00:41:23,660
of the NOC NOC has some helpful features
I can do

723
00:41:23,660 --> 00:41:27,100
XQ all we're just one client can list
all the plugins

724
00:41:27,100 --> 00:41:30,600
and also as I mentioned by default it
will filter out

725
00:41:30,600 --> 00:41:34,150
Apple signed binary that have been their
I knock knock

726
00:41:34,150 --> 00:41:37,690
alice is important because Nini by
percentile

727
00:41:37,690 --> 00:41:40,930
persistent binaries on a Mac or going to
the Apple miners that needed for

728
00:41:40,930 --> 00:41:44,649
on the system so they can be there after
graphically verified that

729
00:41:44,650 --> 00:41:48,590
they're still signed not been modified
arm now makes sense just ignore that

730
00:41:48,590 --> 00:41:51,850
now this can be overridden if you really
want to see them but by default

731
00:41:51,850 --> 00:41:55,270
headed so here's knock-knock listing

732
00:41:55,270 --> 00:41:59,020
our crime jobs on and you can see
there's a find out that set to execute

733
00:41:59,020 --> 00:42:02,960
every minute and in this case this is
Jenny cap

734
00:42:02,960 --> 00:42:06,070
we can also with our launch day vince &
agents

735
00:42:06,070 --> 00:42:09,619
which on this pm I reveal the call me
implant

736
00:42:09,619 --> 00:42:12,710
I as again I mentioned it does list
legitimate binaries as well

737
00:42:12,710 --> 00:42:15,960
so I have little Snitch installed which
is a software-based I

738
00:42:15,960 --> 00:42:21,110
firewall party can see the Little Snitch
demand and the agent as well but then in

739
00:42:21,110 --> 00:42:22,070
the middle there's this

740
00:42:22,070 --> 00:42:25,090
saw you know we'll play update which

741
00:42:25,090 --> 00:42:28,250
watch ATL not real player install om and

742
00:42:28,250 --> 00:42:32,450
yeah like I said it turns out to be I to
be a nap

743
00:42:32,450 --> 00:42:35,740
so we covered a smaller thought about a
material that so I just wanted to

744
00:42:35,740 --> 00:42:40,089
top draw some final conclusions so first
date on the latest version

745
00:42:40,090 --> 00:42:43,970
%uh Mac OS of fully patched its really
not that secure

746
00:42:43,970 --> 00:42:48,390
on now when does has taken security
really seriously

747
00:42:48,390 --> 00:42:53,270
I don't think Apple quite there yet arm
and off the mat mauer is reality and

748
00:42:53,270 --> 00:42:58,690
a growing concern specially if bob
Chinese government doesn't like you

749
00:42:58,690 --> 00:43:01,970
hopefully though armed with this
information %ah that's presented in this

750
00:43:01,970 --> 00:43:06,049
of and by using knock knock we cannot
detect this persistent now and ensure

751
00:43:06,050 --> 00:43:06,920
that our max

752
00:43:06,920 --> 00:43:11,390
us this year I will holla for your
attention

753
00:43:11,390 --> 00:43:16,830
are there any questions

754
00:43:16,830 --> 00:43:22,600
yes in front

755
00:43:22,600 --> 00:43:26,290
yeah me

756
00:43:26,290 --> 00:43:30,050
so overall I think it's a great idea oMG
it will are prevent

757
00:43:30,050 --> 00:43:33,610
on the more common mundane our samples

758
00:43:33,610 --> 00:43:36,880
there are persistent points that are
still available are but they're not

759
00:43:36,880 --> 00:43:38,160
going to be as stealthy

760
00:43:38,160 --> 00:43:41,609
or on as advanced as if you were running
as an admin

761
00:43:41,610 --> 00:43:45,500
om there are a lot of o'day

762
00:43:45,500 --> 00:43:49,430
we profess arm around for ice axe it's
really just not

763
00:43:49,430 --> 00:43:54,368
pastors when does on in my opinion so if
there's a sophisticated attacker

764
00:43:54,369 --> 00:43:57,990
they're gonna they're gonna get root an
effective Oct but for normal users

765
00:43:57,990 --> 00:44:01,350
I you know I would I would recommend it
if it's not too much better not because

766
00:44:01,350 --> 00:44:03,020
they will definitely mitigating

767
00:44:03,020 --> 00:44:06,720
you know gets eighty percent of the know
the more common our samples that are out

768
00:44:06,720 --> 00:44:09,020
there

769
00:44:09,020 --> 00:44:09,560
and a question

