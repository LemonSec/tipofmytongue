1
00:00:10,510 --> 00:00:16,289
good morning or less so yeah I'm James
and I work for

2
00:00:16,289 --> 00:00:22,849
carotene actually awake this morning you
may see my my boss talking about Project

3
00:00:22,849 --> 00:00:28,698
Zero in the abstract but I'm a fan of
the research as specializing in in the

4
00:00:28,699 --> 00:00:32,470
Windows platform mainly local privilege
escalation this is because I have a

5
00:00:32,470 --> 00:00:37,409
particular thing about finding logical
vulnerabilities in operating systems and

6
00:00:37,409 --> 00:00:42,449
platforms and local legislation is
usually quite a good target for those

7
00:00:42,449 --> 00:00:50,199
who love and abilities so the actual
sort of description the title is social

8
00:00:50,199 --> 00:00:53,739
engineering the Windows kernel what is
it I am actually going to talk about us

9
00:00:53,739 --> 00:00:58,459
I'm gonna be talking about basically
Windows access security how he actually

10
00:00:58,460 --> 00:01:01,299
does it talking about things like the
scripture reference monitor and access

11
00:01:01,299 --> 00:01:05,400
tokens and then I'm gonna talk about
colonel token handling and the sort of

12
00:01:05,400 --> 00:01:08,770
vulnerabilities you can find in that
which can lead to local privilege

13
00:01:08,770 --> 00:01:14,079
escalation vulnerability now before I
can sort of talk about the

14
00:01:14,079 --> 00:01:17,439
vulnerabilities themselves I kind of
have to frame the discussion so I have

15
00:01:17,439 --> 00:01:22,300
to kind of give you a rough overview of
the winner security components involved

16
00:01:22,300 --> 00:01:26,890
in these sort of vulnerabilities and I
sort of class finds out of three main

17
00:01:26,890 --> 00:01:31,350
areas you couldn't look at you you must
got the curve itself which contains the

18
00:01:31,350 --> 00:01:36,479
security components of English
reinforcing Windows Azure security which

19
00:01:36,479 --> 00:01:40,830
results then say file or registry keys
those who thinks has some sort of

20
00:01:40,830 --> 00:01:45,560
associated security descriptor with them
which contains national security

21
00:01:45,560 --> 00:01:51,970
information which says who is allowed to
access what I'm finally each process has

22
00:01:51,970 --> 00:01:56,150
a identity associated with it so easy
process has something called an access

23
00:01:56,150 --> 00:02:01,310
token which is embedded as part of the
process itself there is a reference to

24
00:02:01,310 --> 00:02:05,250
it from the process structure and this
is what sort of defines the identity

25
00:02:05,250 --> 00:02:12,670
itself of that process and is therefore
how it interacts with the resources to

26
00:02:12,670 --> 00:02:16,059
discourage reference monitor is that
core components of the Windows kernel

27
00:02:16,060 --> 00:02:22,590
which is responsible for doing security
operations so one of the big checks

28
00:02:22,590 --> 00:02:27,040
don't want the big functions which they
reference monitor exports St access

29
00:02:27,040 --> 00:02:29,160
check and this is the film which
actually does

30
00:02:29,160 --> 00:02:33,960
resource access checking you basically
say I want to access this file and its

31
00:02:33,960 --> 00:02:37,950
dysfunctions Jen responsibility to
actually sort of look at all the

32
00:02:37,950 --> 00:02:44,609
parameters and decide whether yes you're
allowed to write to file and I'll check

33
00:02:44,610 --> 00:02:48,690
is a pretty simple operation at least if
you don't take into account there is

34
00:02:48,690 --> 00:02:54,270
other sort of extra both want reaches
which have been added over the years now

35
00:02:54,270 --> 00:02:59,800
eventually what happens is the SPX check
operation takes the current processes

36
00:02:59,800 --> 00:03:05,920
access token or a access token and the
security descriptor of the resort's you

37
00:03:05,920 --> 00:03:10,700
want to access to this script contains
things like the discretionary access

38
00:03:10,700 --> 00:03:15,130
control list and this is what actually
defines who is allowed to access what

39
00:03:15,130 --> 00:03:21,880
operation it goes first check something
called the integrity level of intensity

40
00:03:21,880 --> 00:03:26,460
level is just a simple manager access
control mechanism added in Windows Vista

41
00:03:26,460 --> 00:03:33,980
which allows you to do sort of simple
read-write access control if you're is

42
00:03:33,980 --> 00:03:38,730
based on a number of process has an
interactive level number and the results

43
00:03:38,730 --> 00:03:44,160
hasn't total number and if you are lower
in number than resource then basically

44
00:03:44,160 --> 00:03:47,320
you you're limited in what you can
access and that resource that's the

45
00:03:47,320 --> 00:03:52,130
first thing that happens in this access
check event as a bonus check and the

46
00:03:52,130 --> 00:03:57,680
ownership is just a simple mechanism to
allow you to bypass the fact that you

47
00:03:57,680 --> 00:04:00,989
can actually lock yourself out of a file
or lock yourself out of a school

48
00:04:00,989 --> 00:04:05,700
resource as the owner of a source you
could modify the access control lists to

49
00:04:05,700 --> 00:04:09,660
say I'm not actually allowed to access
my own file that would be kind of

50
00:04:09,660 --> 00:04:13,700
annoying if you if you did on a regular
basis so we gonna check a large effect

51
00:04:13,700 --> 00:04:18,450
we circumvent that for certain limited
missions and finally it goes into the

52
00:04:18,450 --> 00:04:23,050
actual check itself which is where it
looks like the access control lists

53
00:04:23,050 --> 00:04:29,080
matches you you're using actual groups
etc and actually returns our success or

54
00:04:29,080 --> 00:04:34,180
failure to your request if you add if
you've questioned write access and you

55
00:04:34,180 --> 00:04:38,240
don't have write access to the resource
is going to give you access denied

56
00:04:38,240 --> 00:04:45,250
itself is actually fairly complicated
objet

57
00:04:45,250 --> 00:04:49,789
contains obviously your user identity
and the israeli entity in this case is

58
00:04:49,789 --> 00:04:52,940
it doesn't store like a very simple
number like you would typically find the

59
00:04:52,940 --> 00:04:58,229
UNIX system it is its doors a relatively
complicated security identifiable said

60
00:04:58,229 --> 00:05:04,699
which then has a text text to texture
mapping which you can then go back to

61
00:05:04,699 --> 00:05:09,039
sort of your username but actually under
the hood the kernel uses the cities all

62
00:05:09,039 --> 00:05:14,800
over the place it doesn't use your name
necessarily the access token has a list

63
00:05:14,800 --> 00:05:19,199
of groups so obviously you can be in
many many different groups for you can

64
00:05:19,199 --> 00:05:21,060
in most other operating systems

65
00:05:21,060 --> 00:05:24,240
associate administrator in the
Administrators group and that is then

66
00:05:24,240 --> 00:05:26,979
used as part of the verification of
whether you're allowed to access

67
00:05:26,979 --> 00:05:32,659
resources and then if you think you can
c the Montreal able which is the

68
00:05:32,659 --> 00:05:36,259
integrity level and this one in this
case is medium that is the sort of

69
00:05:36,259 --> 00:05:40,400
standard level and then finally
privileges and I don't need to talk too

70
00:05:40,400 --> 00:05:43,799
much about provisions but it is a very
special privilege which is part of the

71
00:05:43,800 --> 00:05:48,430
access token which is done to basically
give you some additional functionality

72
00:05:48,430 --> 00:05:53,340
later on which are going to but
underneath the hood in the kernel itself

73
00:05:53,340 --> 00:05:57,270
is just another common object is just
another allocated structure with some

74
00:05:57,270 --> 00:06:02,490
sort of data inside it and just like any
other couple of you can reference it and

75
00:06:02,490 --> 00:06:08,169
gases to freeze mode but of course it
wouldn't be just simple case that have

76
00:06:08,169 --> 00:06:14,219
one single type of access token cause
that would be obviously simple one we

77
00:06:14,219 --> 00:06:18,740
need multiple though in this case
there's multiple categories of access

78
00:06:18,740 --> 00:06:23,810
token you have your normal taken which
is going to be used in 99% of operations

79
00:06:23,810 --> 00:06:28,789
if you look at USC share split token had
been so on

80
00:06:28,789 --> 00:06:33,110
USA where you just see the prompt inside
you want to click Yes or No

81
00:06:33,110 --> 00:06:37,349
that's called the link token and it it
sort of bound your existing token

82
00:06:37,349 --> 00:06:42,500
intently sort of sets it apart and then
there's two operations you can do on a

83
00:06:42,500 --> 00:06:46,880
normal token you can filter it or you
can create a what is called a low box

84
00:06:46,880 --> 00:06:51,070
token and low box tokens used for
Windows 8 Metro applications

85
00:06:51,070 --> 00:06:56,219
so and filter tokens are called
restricted tokens usually allow you to

86
00:06:56,220 --> 00:07:00,250
apply special filtering operations
remove groups remove privileges that so

87
00:07:00,250 --> 00:07:07,100
you can find all these different opens
an actual normal operation but there's

88
00:07:07,100 --> 00:07:11,650
loads of interesting field which will
come to view them as we go along

89
00:07:11,650 --> 00:07:15,719
things like the token idea apparent
OpenID obviously your group senior

90
00:07:15,720 --> 00:07:22,430
privileges except when you access this
from user mode like all kind of

91
00:07:22,430 --> 00:07:28,380
resources you need a handle you can't
just say I want to open access token at

92
00:07:28,380 --> 00:07:32,040
this kernel addressed because that would
only be a massive security floor so he

93
00:07:32,040 --> 00:07:36,330
said the colonel henry back and and and
opaque handle you can use to reference

94
00:07:36,330 --> 00:07:40,570
it using the very system course and it's
a very important right you can get some

95
00:07:40,570 --> 00:07:44,849
privileges you can get on the handle
which affect how you can interrupt how

96
00:07:44,850 --> 00:07:49,370
you can interact with that token itself
to things like duplicate so one of the

97
00:07:49,370 --> 00:07:52,800
functions you can do it you can
duplicate token and create a new token

98
00:07:52,800 --> 00:07:58,590
from it and you need a specific right on
that on a handle to actually do but I

99
00:07:58,590 --> 00:08:02,219
don't think so I signed primarily when
you're trying to create new process or a

100
00:08:02,220 --> 00:08:10,860
person a nation which he also go into it
wouldn't just stop if you had four types

101
00:08:10,860 --> 00:08:14,320
of access token of course there's
actually two types of access token

102
00:08:14,320 --> 00:08:18,500
relative to the fourth out spectacularly
had so now we've got a ton cyclist oh

103
00:08:18,500 --> 00:08:22,930
that's really the first one is probably
one of the most important and as the

104
00:08:22,930 --> 00:08:27,720
primary token the primary choking is
used for precious security so every

105
00:08:27,720 --> 00:08:32,950
process has an assigned primary token
with it the other one is an

106
00:08:32,950 --> 00:08:37,810
impersonation token an impersonation
allows a service to pretend to be

107
00:08:37,809 --> 00:08:42,270
someone so whenever you're doing and
access check if you can impersonate

108
00:08:42,270 --> 00:08:47,760
another token you can basically pretend
to be that person if you access try to

109
00:08:47,760 --> 00:08:54,110
access files it will succeed but these
are sort of 21 of a technically the same

110
00:08:54,110 --> 00:08:57,720
subtly different they just have this
difference in whether a primary on

111
00:08:57,720 --> 00:09:01,980
in-person nation of course there's no
because

112
00:09:01,980 --> 00:09:06,490
not only do identification tokens subtly
different from primary tokens you can

113
00:09:06,490 --> 00:09:11,660
also have four different types of
impersonation token for security reasons

114
00:09:11,660 --> 00:09:16,500
you kind of want to have some sort of
differentiation and in this case the

115
00:09:16,500 --> 00:09:22,080
differentiation is here for security
reasons so the top two on the right hand

116
00:09:22,080 --> 00:09:28,230
side delegation impersonation if you are
assigned a token with these levels you

117
00:09:28,230 --> 00:09:33,120
can pretend to be that person you can
access their files you can access to

118
00:09:33,120 --> 00:09:40,290
over secure resources from the Colonels
perspective you are a person however the

119
00:09:40,290 --> 00:09:45,550
bottom to do not give you that power
instead identification just basically

120
00:09:45,550 --> 00:09:52,199
allows you to say that this person is
bob smith and our trust in as far as now

121
00:09:52,200 --> 00:09:56,350
but I will actually allow him to direct
your profile you would still need to be

122
00:09:56,350 --> 00:10:01,190
able to open fire indirectly and you can
just use this as a market to say I want

123
00:10:01,190 --> 00:10:08,520
to open it finally anonymous is the like
10 of its not anonymous it is still the

124
00:10:08,520 --> 00:10:12,199
same access token but it says is an
anonymous taken that into place with

125
00:10:12,200 --> 00:10:18,490
person nation but in general we don't
have to worry about it so much when it

126
00:10:18,490 --> 00:10:23,590
comes to duplication is an important
security requirement here namely that if

127
00:10:23,590 --> 00:10:28,620
you go if you have a primary token it
should be possible to convert that into

128
00:10:28,620 --> 00:10:34,660
an impersonation and you can just call
the duplicate token function effectively

129
00:10:34,660 --> 00:10:40,520
convert between one and the other but if
you just get an identification token if

130
00:10:40,520 --> 00:10:46,120
you've just got to commit says this is
just saying who this person is not

131
00:10:46,120 --> 00:10:50,120
actually who like it you're not acting
up person because you couldn't access

132
00:10:50,120 --> 00:10:56,840
the resource well you know I go back so
unless you've got a full impersonation

133
00:10:56,840 --> 00:11:00,370
token you know how to convert that back
to a primary token of ways you could

134
00:11:00,370 --> 00:11:04,240
potentially create process under another
user account and do some decent damage

135
00:11:04,240 --> 00:11:09,630
to this is an important security
restriction on everything they do when

136
00:11:09,630 --> 00:11:14,400
you duplicate is they assign this a new
identify that taken so every token in

137
00:11:14,400 --> 00:11:15,079
the system

138
00:11:15,080 --> 00:11:21,140
has a unique identifier it is a clever
trick to generate this number it is just

139
00:11:21,140 --> 00:11:25,090
a single increment encounter in the
kernel which just for every token it

140
00:11:25,090 --> 00:11:32,670
gets incremented and discounters use for
number different things as well see now

141
00:11:32,670 --> 00:11:38,740
if you are handled with the person
nation token you actually need to play

142
00:11:38,740 --> 00:11:43,400
and the way you appliances you set the
current friends obviously in in in

143
00:11:43,400 --> 00:11:49,360
Windows purses and friends are sort of
distinct entities are both friends of

144
00:11:49,360 --> 00:11:52,910
scheduling element and processes are
just sort of containers for the sort of

145
00:11:52,910 --> 00:11:58,100
memory layout of the operation so when
you impersonate any person waiting on a

146
00:11:58,100 --> 00:12:01,580
friend level you know impersonating the
process the process still has its

147
00:12:01,580 --> 00:12:06,650
primary token you actually change the
individual fred has a few different ways

148
00:12:06,650 --> 00:12:11,189
of getting back Fred Taylor can set one
of them is direction you can just call a

149
00:12:11,190 --> 00:12:16,130
function says hey I've got this handled
with token is got in person a privilege

150
00:12:16,130 --> 00:12:22,830
can you can you sign that might read and
go yet on that then the indirect setting

151
00:12:22,830 --> 00:12:28,000
so interesting is where you have a
scenario such as named pipes named pipes

152
00:12:28,000 --> 00:12:32,400
have a special feature which allows you
to impersonate the client and of a named

153
00:12:32,400 --> 00:12:37,090
pipe and there is a special function for
that and you never actually get a direct

154
00:12:37,090 --> 00:12:41,990
handled that actually is also have
managed for you but you never said

155
00:12:41,990 --> 00:12:47,470
finally obviously you've got the curtain
itself person nation tokens using

156
00:12:47,470 --> 00:12:55,660
various different API say peers in this
may climb a very important security

157
00:12:55,660 --> 00:12:58,439
problem with in-person nation and this
problem

158
00:12:58,440 --> 00:13:03,050
manifest prior to Windows 2000 so
obviously it was a good 15 plus years

159
00:13:03,050 --> 00:13:08,050
ago when this was a major issue but you
have a problem in that if you have a

160
00:13:08,050 --> 00:13:14,000
normal user and it could arbitrarily
impersonator access token well if you

161
00:13:14,000 --> 00:13:18,510
have a named pipes going around if you
tricked and an administrator to open

162
00:13:18,510 --> 00:13:23,170
your named pipe you can impersonate that
administrator is reformed full

163
00:13:23,170 --> 00:13:25,430
impersonation level and

164
00:13:25,430 --> 00:13:30,459
you just gained admin privileges so we
don't want that to happen so obviously

165
00:13:30,460 --> 00:13:36,010
we need to sort of mitigate that risk
and the way is mitigated is by adding a

166
00:13:36,010 --> 00:13:42,060
privilege to the operating system the
impartially privilege of this is

167
00:13:42,060 --> 00:13:46,199
something which ends up in your primary
token in your process and says this

168
00:13:46,200 --> 00:13:50,800
process can impersonate any other user
and obviously this this privilege is

169
00:13:50,800 --> 00:13:52,649
quite important

170
00:13:52,649 --> 00:13:59,430
quite bad for security if its misuse so
only administrators and service accounts

171
00:13:59,430 --> 00:14:05,060
will typically get this privilege of
course if it doesn't exist there has to

172
00:14:05,060 --> 00:14:09,880
be some operation 22 kind of allow you
to do impersonations some way so what

173
00:14:09,880 --> 00:14:13,970
happens is if all of this process it
basically says if a person has

174
00:14:13,970 --> 00:14:18,149
impersonate British then you can say
that fred that's fine you can say that

175
00:14:18,149 --> 00:14:23,770
otherwise like we do in intensity level
check because obviously don't want say a

176
00:14:23,770 --> 00:14:27,399
low-intensity process in person I think
high integrity process because their new

177
00:14:27,399 --> 00:14:32,120
potential security risks so we're going
to just check every basically don't sort

178
00:14:32,120 --> 00:14:39,160
of says is the user the same as the
impersonating easier if it is true if

179
00:14:39,160 --> 00:14:44,880
all those fail what it does it doesn't
just say well I'm sorry to impersonate

180
00:14:44,880 --> 00:14:49,140
user is there is actually some sort of
usual benefits be out to get

181
00:14:49,140 --> 00:14:53,350
impersonation at least for
identification purposes what the current

182
00:14:53,350 --> 00:14:58,000
does is it says right you can
impersonate them at the level which

183
00:14:58,000 --> 00:15:02,089
could actually interact with operating
system but tell you are I'll give you an

184
00:15:02,089 --> 00:15:06,970
identification Turkestan ok I'll reduce
the level the security level and I'll

185
00:15:06,970 --> 00:15:13,940
sign you an entire identification token
instead of a full investigation so what

186
00:15:13,940 --> 00:15:18,350
can she do if you've ended up with this
in identification token well it is

187
00:15:18,350 --> 00:15:23,529
almost from a from a colonel perspective
exactly the same as a full impersonator

188
00:15:23,529 --> 00:15:27,680
Kenora primary token the only
differences like this one he would

189
00:15:27,680 --> 00:15:32,359
pretty much in in the token which is
different between one type impersonation

190
00:15:32,360 --> 00:15:37,279
token and another so there's there's
functions which take identification

191
00:15:37,279 --> 00:15:37,810
tokens

192
00:15:37,810 --> 00:15:41,920
usually from user mode and allows you to
interact with them as if you were doing

193
00:15:41,920 --> 00:15:48,270
an access request so i dnt access check
system call will happily doin access

194
00:15:48,270 --> 00:15:55,050
check against an identification taken
from his perspective it always say it's

195
00:15:55,050 --> 00:15:59,829
all the same groups as the same
privileges so it can still do it but in

196
00:15:59,830 --> 00:16:04,050
the kernel space anything which does
access checking should always call St

197
00:16:04,050 --> 00:16:09,060
access check because that's the only
woman actually does that if I Cola has

198
00:16:09,060 --> 00:16:15,180
the privileges to actually access that
result what is leads me to is the whole

199
00:16:15,180 --> 00:16:16,800
title of the talk

200
00:16:16,800 --> 00:16:20,849
the fact that identification tokens
effectively will just kind of handout

201
00:16:20,850 --> 00:16:26,360
will be handout do in most situations if
you fail to impersonate that token it

202
00:16:26,360 --> 00:16:31,080
was still and you back and
identification so I consider these sort

203
00:16:31,080 --> 00:16:35,779
of almost like fake IDs you are
effectively pretending to be someone you

204
00:16:35,779 --> 00:16:40,770
know if the heart and caused a proper
access jack is obviously gonna fail is

205
00:16:40,770 --> 00:16:46,079
gonna go to you you know ask that person
but if you if you find the security

206
00:16:46,080 --> 00:16:49,320
guards like having a bad day both the
check

207
00:16:49,320 --> 00:16:56,650
well maybe we'll let you through it
looks it looks like a RealID but we can

208
00:16:56,650 --> 00:17:06,550
tell here have some sort of set up to
the behold for the content of this

209
00:17:06,550 --> 00:17:10,550
social engineering the kernel because
you wanna find bugs where yes that

210
00:17:10,550 --> 00:17:15,000
security guard is having a bad day is
not fully checking but before we can

211
00:17:15,000 --> 00:17:19,089
actually exploit the bug like that you
need to actually get hold of one of

212
00:17:19,089 --> 00:17:21,970
these identification tokens if you
haven't got one of these tokens

213
00:17:21,970 --> 00:17:26,199
well you know do anything we also need
to kind of get one which meets some

214
00:17:26,199 --> 00:17:32,200
specific criteria whether that be needed
administrator token you need a token for

215
00:17:32,200 --> 00:17:36,840
a particular user without being able to
do that you obviously are a bit stuck

216
00:17:36,840 --> 00:17:42,800
fortunately there's a multitude of ways
you can get access to tokens and this is

217
00:17:42,800 --> 00:17:47,550
just some of the few so obviously the
first one if you know the password you

218
00:17:47,550 --> 00:17:50,389
can just lock them up now of course

219
00:17:50,390 --> 00:17:56,070
probably be game over anyway but of
course if you know that has been free so

220
00:17:56,070 --> 00:17:59,520
that means we can brute force their
password potentially you can just log on

221
00:17:59,520 --> 00:18:04,270
and what I returned that function
returns is generally a primary tokens

222
00:18:04,270 --> 00:18:08,690
well so it will give you basically full
access to that of course you can't

223
00:18:08,690 --> 00:18:11,630
necessarily impersonate that as a normal
user if you're trying to impersonate

224
00:18:11,630 --> 00:18:18,390
different user but it still potential
interesting attack better if you're

225
00:18:18,390 --> 00:18:22,520
running a spectacular admin and you need
an administrator token

226
00:18:22,520 --> 00:18:29,210
just give me the link token which is
associated with my current token they

227
00:18:29,210 --> 00:18:33,370
were returning back what is effectively
an administrator token now it's not

228
00:18:33,370 --> 00:18:36,290
stupid enough to give you back full
impersonation token is only

229
00:18:36,290 --> 00:18:41,070
identification but it's really quick and
easy way of getting an administrator can

230
00:18:41,070 --> 00:18:48,040
only user she mean you're actually
running as a split second I am a classic

231
00:18:48,040 --> 00:18:53,750
trick and this has been you been known
pretty much forever in 20 security is

232
00:18:53,750 --> 00:18:56,540
that feels like mint pipes will give you
back

233
00:18:56,540 --> 00:19:03,470
token so if you can get convince a local
system service to open your named pipe

234
00:19:03,470 --> 00:19:08,230
and point which is not that hard even
though you can't fully impersonate the

235
00:19:08,230 --> 00:19:12,660
local system you will get back and
identification total for it and so you

236
00:19:12,660 --> 00:19:19,530
can kind of pretend to be local system
similar thing with RBC Indicom you can

237
00:19:19,530 --> 00:19:24,320
do very similar thing has the same sort
of technology and it also feels like

238
00:19:24,320 --> 00:19:29,200
dental and negotiation if you can find a
local city can get away the local system

239
00:19:29,200 --> 00:19:35,090
process to negotiate NTLM tu so dnt land
challenge you can actually parlay that

240
00:19:35,090 --> 00:19:39,399
into a full token this is a full
impersonation total again you couldn't

241
00:19:39,400 --> 00:19:43,820
assign it cause it would reduce it to
identification level you can still get a

242
00:19:43,820 --> 00:19:53,100
small token and using that web that the
public documentation how you want in one

243
00:19:53,100 --> 00:19:57,830
final interesting what I found so long
when user is the sort of traditional way

244
00:19:57,830 --> 00:20:00,750
you log on a on a user on to a system

245
00:20:00,750 --> 00:20:04,660
there's also a second function called
LSA login user LSA being a local

246
00:20:04,660 --> 00:20:12,320
security security system of of windows
and this has a special mode designed

247
00:20:12,320 --> 00:20:17,010
specifically for Kerberos called
services for user and it turns out at

248
00:20:17,010 --> 00:20:24,050
least on Windows 8.1 as a normal user I
can call this API give it any local user

249
00:20:24,050 --> 00:20:29,149
or any Kerberos any two main use is
allowed to log into my current machine

250
00:20:29,150 --> 00:20:35,280
and it will return the and
identification 27 local administrator to

251
00:20:35,280 --> 00:20:39,629
say I want the administrator can have an
administration identification taken so

252
00:20:39,630 --> 00:20:43,440
on and so forth and yes it was meant as
well we do not have to provide a

253
00:20:43,440 --> 00:20:48,370
password to this is distinct from Logan
use our way you need the password you

254
00:20:48,370 --> 00:20:54,239
can just say giving and it will return
to that total so I just have to show you

255
00:20:54,240 --> 00:20:58,850
a quick little demo at all I wrote to
show you sort of catching different

256
00:20:58,850 --> 00:21:15,080
access tokens found my

257
00:21:15,080 --> 00:21:26,439
having seemingly problems with equipment
today to save some time I will live up

258
00:21:26,440 --> 00:21:28,659
to run now demo

259
00:21:28,659 --> 00:21:33,860
later when I got some of them as I can
run so we just leave that to be so ok so

260
00:21:33,860 --> 00:21:41,600
now managed to get our identification
technique can use this to try and gain

261
00:21:41,600 --> 00:21:45,959
extra privileges find ways in the
security system where they're they're a

262
00:21:45,960 --> 00:21:50,950
bit weaker in checking the security of
your token and therefore uses a fake I D

263
00:21:50,950 --> 00:21:55,809
three cities are sort of like

264
00:21:55,809 --> 00:21:59,690
discuss the sort of actual vulnerable
pattern so you can actually look look at

265
00:21:59,690 --> 00:22:04,010
these from Sasa static analysis
perspective you can say okay this piece

266
00:22:04,010 --> 00:22:07,879
of code code is there's a good chance
available to this sort of this sort of

267
00:22:07,880 --> 00:22:11,760
attack and then you obviously can't take
this sort of information stuff and you

268
00:22:11,760 --> 00:22:16,120
actually sort of play with that first we
need to know how to curl interacts with

269
00:22:16,120 --> 00:22:22,518
tokens and cells and does as you can see
quite a few different ways that access

270
00:22:22,519 --> 00:22:29,029
tokens can manifest in kernel code and
you've got the sort of public API one so

271
00:22:29,029 --> 00:22:33,720
things like the process and Fred manager
has functions to reference the Prime

272
00:22:33,720 --> 00:22:36,630
Minister has functions to reference
impersonation to himself

273
00:22:36,630 --> 00:22:42,740
system calls intentionally killed Kogut
doesn't need to call system course this

274
00:22:42,740 --> 00:22:47,409
but sometimes it will and its functions
to create tokens and will filter tokens

275
00:22:47,409 --> 00:22:51,019
and open the current process token and
in this case it worth anywhere handle

276
00:22:51,019 --> 00:22:55,840
back instead of pointed to an object but
it is still technically opening a token

277
00:22:55,840 --> 00:23:02,129
and sometimes you'll see it open a token
using say open process token and then

278
00:23:02,130 --> 00:23:07,450
call object reference by handle the
pointer to the token when they could

279
00:23:07,450 --> 00:23:11,210
have just called Pierce reference
primary token but that's beside the

280
00:23:11,210 --> 00:23:12,740
point

281
00:23:12,740 --> 00:23:16,429
things are direct access this is
reserved primarily to the kernel itself

282
00:23:16,429 --> 00:23:19,660
or the latest winter ATK

283
00:23:19,660 --> 00:23:23,870
elevation of privilege it in modifying
the current process is taken but normal

284
00:23:23,870 --> 00:23:28,770
operation you shouldn't see why drivers
munching in de proceso de Fred stretches

285
00:23:28,770 --> 00:23:37,020
but theoretically they could not find a
140 somewhat is the IR manager whenever

286
00:23:37,020 --> 00:23:42,930
you create a file manager the driver
gets a I request packet and as part of

287
00:23:42,930 --> 00:23:47,860
his I request packet data it actually
has like an access security context

288
00:23:47,860 --> 00:23:57,110
which indicates who opened it and the
access technique at the first really

289
00:23:57,110 --> 00:24:02,510
obvious bug which I described the sort
of private acres in person at all that's

290
00:24:02,510 --> 00:24:08,930
what the obvious Berg is if I open my
try to discuss check manually and I get

291
00:24:08,930 --> 00:24:12,800
a hold of an access token and I don't
generally care too much that is an

292
00:24:12,800 --> 00:24:16,350
impersonation or primary token cuz I
just want the current sort of security

293
00:24:16,350 --> 00:24:22,219
context in which I'm running if we don't
check the impersonation level is above

294
00:24:22,220 --> 00:24:27,810
his impersonation level or above the bug
generally because what happened that

295
00:24:27,810 --> 00:24:33,929
means is that code is going to sort of
operate on the assumption that the

296
00:24:33,930 --> 00:24:39,270
person calling it is that person and is
that actual impersonation level of

297
00:24:39,270 --> 00:24:43,760
course it does some security critical
operation at that point you've got

298
00:24:43,760 --> 00:24:47,980
yourself potentially an elevation of
privilege mentality is a beautiful

299
00:24:47,980 --> 00:24:54,640
variants of this the previous one is
capture subject context and this

300
00:24:54,640 --> 00:24:59,240
captures a structure which has the
primary token any impersonation token

301
00:24:59,240 --> 00:25:03,200
impersonation of limit all you can do it
manually if you like there's also an

302
00:25:03,200 --> 00:25:08,020
internal Windows kernel 14 reference
affected taken which kind of does the

303
00:25:08,020 --> 00:25:15,980
same captures security context but only
returns you one token so now I can give

304
00:25:15,980 --> 00:25:22,630
you a real world example so this was a
bug I found in the application help cash

305
00:25:22,630 --> 00:25:25,260
control which is used for

306
00:25:25,260 --> 00:25:29,570
application compatibility and is
basically a mechanism for which you can

307
00:25:29,570 --> 00:25:31,620
do

308
00:25:31,620 --> 00:25:36,360
application compatibility and and apply
fixes for processes which don't work

309
00:25:36,360 --> 00:25:41,810
quite right in the current version of
windows and I was doing and I didn't

310
00:25:41,810 --> 00:25:47,340
check is saying is the current caller an
administrator or not and the only thing

311
00:25:47,340 --> 00:25:53,550
it was doing was basically clearing
clutter free tokens user said and

312
00:25:53,550 --> 00:26:00,010
comparing it against local system so if
you have any token any identification

313
00:26:00,010 --> 00:26:06,950
token which claims to be local system
while you can bypass that check pretty

314
00:26:06,950 --> 00:26:07,620
easily

315
00:26:07,620 --> 00:26:12,179
loss of a secondary check in there which
is which is kind of interesting because

316
00:26:12,180 --> 00:26:16,730
of a difference in the operating system
but this one only specific affected when

317
00:26:16,730 --> 00:26:20,160
there's a point one in terms of actual
exploitation although I believe it was

318
00:26:20,160 --> 00:26:43,660
fixed and seven as well so hopefully if
my VMs that she beat it

319
00:26:43,660 --> 00:26:48,670
when I came up here my my machine just
killed itself completely so I had to be

320
00:26:48,670 --> 00:26:53,060
Mr Paul and running and I had everything
else running and I decided that no its

321
00:26:53,060 --> 00:27:01,690
gonna kiss

322
00:27:01,690 --> 00:27:32,090
sounds a bit on Ministry wow it's
completely new something somehow I

323
00:27:32,090 --> 00:27:40,470
apologize for this

324
00:27:40,470 --> 00:27:50,980
always compared with the snapshot which
currently running right so first thing I

325
00:27:50,980 --> 00:27:58,140
can give you a quick demo of the thing
the two of it and I was released

326
00:27:58,140 --> 00:28:01,919
sometime after the conference
unfortunately I consider it in to get it

327
00:28:01,919 --> 00:28:07,600
released procedure go with it released
but this allows you to sort of look at

328
00:28:07,600 --> 00:28:13,469
different things obviously you can look
at a process token itself and so it

329
00:28:13,470 --> 00:28:18,330
gives you like a rundown of different
things I've highlighted obviously the

330
00:28:18,330 --> 00:28:23,030
token type primary and impersonation
look none cause a primary tech and has

331
00:28:23,030 --> 00:28:31,280
no presentation of a very things that I
like groups so for example I can do the

332
00:28:31,280 --> 00:28:39,020
services for users so obviously he had
like administrative set-up but I don't

333
00:28:39,020 --> 00:28:44,408
you have killed itself but I can just
call crate and without Pat passing a

334
00:28:44,409 --> 00:28:48,570
passage my current user is crashing me a
brand new token and this will work as a

335
00:28:48,570 --> 00:28:56,439
safer administrators well it's not a
problem and some service stuff so the

336
00:28:56,440 --> 00:29:01,940
way I exploited this application cache
one you can create a you can get in

337
00:29:01,940 --> 00:29:05,590
person nation taken off a system service
running decom so I can just click that

338
00:29:05,590 --> 00:29:17,860
and it returns you local system system
but obviously if you look down its it is

339
00:29:17,860 --> 00:29:22,639
obviously an identification token it's
not actually a presentation token that's

340
00:29:22,640 --> 00:29:28,640
good enough for exploiting a
vulnerability if we actually try and run

341
00:29:28,640 --> 00:30:00,780
this so this is available on the issue
tracker the particular issue tracker

342
00:30:00,780 --> 00:30:12,000
ok so hopefully Process Explorer will
see that we've obviously got calculator

343
00:30:12,000 --> 00:30:17,520
running as a running account and we
can't access it because actually running

344
00:30:17,520 --> 00:30:23,629
as administrator so normal user we
pretended to be local system and then

345
00:30:23,630 --> 00:30:30,100
obviously managed to use that data to
elevate ourselves to an actual

346
00:30:30,100 --> 00:30:38,260
administrative

347
00:30:38,260 --> 00:30:44,300
I was another function and this is he
taking his admin so is that also bad

348
00:30:44,300 --> 00:30:49,970
well it turns out on seven yes in 70 CE
token is admin just checks whether that

349
00:30:49,970 --> 00:30:53,710
token has an administrator group never
checks that it's actually a valid

350
00:30:53,710 --> 00:30:59,180
impersonation took in a point one
however check has been added kind of

351
00:30:59,180 --> 00:31:03,430
interesting like security advancement is
actually seems to be related to low box

352
00:31:03,430 --> 00:31:08,260
tokens and the modifications under the
curve for that but yea on eight that

353
00:31:08,260 --> 00:31:14,070
funk that function would have failed but
on seven it would have succeeded so nice

354
00:31:14,070 --> 00:31:19,020
bag is crafted subject context it is
subject context itself is a public

355
00:31:19,020 --> 00:31:24,070
structures in the Windows driver kit
development at us and if you actually

356
00:31:24,070 --> 00:31:29,629
look at it has a primary tech field and
has a client ok with your impersonation

357
00:31:29,630 --> 00:31:34,000
token because it's a public structure
and things like essie access check

358
00:31:34,000 --> 00:31:39,710
require this subject context whether
this kind of incentive you know well

359
00:31:39,710 --> 00:31:44,890
let's just take one out I've been passed
an access token point if I just set the

360
00:31:44,890 --> 00:31:50,180
primary token is that that access access
token they'll be fine I can do my essay

361
00:31:50,180 --> 00:31:55,860
actual check I think works but
unfortunately there's a problem because

362
00:31:55,860 --> 00:32:00,270
I see access check only text
impersonation level of the token as long

363
00:32:00,270 --> 00:32:05,150
as a client token feel the set if you
set an impersonation taken to the

364
00:32:05,150 --> 00:32:09,930
primary token well it thinks it's
appropriate ok never actually checks

365
00:32:09,930 --> 00:32:13,220
it's a primary token interaction checks
that its

366
00:32:13,220 --> 00:32:17,450
correct impersonation that were taken by
doing this you potentially open the

367
00:32:17,450 --> 00:32:24,490
whole theater now this is a real world
example in Windows April 1 but as far as

368
00:32:24,490 --> 00:32:28,760
I can tell that has no significant
security impact but it is actually a

369
00:32:28,760 --> 00:32:33,570
bypass eventually allow is checking
whether you're allowed to read and item

370
00:32:33,570 --> 00:32:40,740
or delete an item which is a special
structure in in wind and it references

371
00:32:40,740 --> 00:32:45,760
the effective token but never actually
checks that the impersonation level

372
00:32:45,760 --> 00:32:50,129
though certain value event just the
signs that value to primary total

373
00:32:50,130 --> 00:32:57,120
crafted subject context and cause sei
first check that and so this sort of

374
00:32:57,120 --> 00:33:01,799
call might just be because that's
actually the operation which they want

375
00:33:01,799 --> 00:33:07,600
to occur he wanted to check whether that
user would be allowed to use it

376
00:33:07,600 --> 00:33:10,059
irrespective of whether you really
impersonating but it's hard to tell

377
00:33:10,059 --> 00:33:18,000
because he's been obvious security risk
but you can find in other places and

378
00:33:18,000 --> 00:33:24,409
everything is system Fred impersonation
of the curtain calls for impersonating

379
00:33:24,409 --> 00:33:29,840
user just take an access token of some
form of pointed to it and the Fred in

380
00:33:29,840 --> 00:33:34,559
which you want to impersonate and then
the level you want to set so this is

381
00:33:34,559 --> 00:33:38,809
regardless of the actual tokens level
itself actually end up with

382
00:33:38,809 --> 00:33:43,960
impersonating a process which has
impersonation permissions but take your

383
00:33:43,960 --> 00:33:45,940
token from somewhere else

384
00:33:45,940 --> 00:33:50,350
well potentially can just a sign I'm
person nation tokens something and that

385
00:33:50,350 --> 00:33:53,750
fred goes and gets elevated so well
where it ought to be trying to

386
00:33:53,750 --> 00:33:57,919
impersonate you may have actually tried
to impersonate local system and then

387
00:33:57,919 --> 00:34:03,070
something more more dangerous

388
00:34:03,070 --> 00:34:08,299
token so when you do feel like named
pipes and you try and do the

389
00:34:08,300 --> 00:34:13,869
impersonation you don't ever get direct
access to the token so even though what

390
00:34:13,869 --> 00:34:17,349
sort of token store is actually in full
impersonation token you're never allowed

391
00:34:17,349 --> 00:34:23,800
to access it and it turns out that some
code doesn't it makes the assumption

392
00:34:23,800 --> 00:34:26,550
that way I can justify get a colonel
object on

393
00:34:26,550 --> 00:34:31,750
pointed to it if someone asks Are All
Hands you back to it because why not

394
00:34:31,750 --> 00:34:37,810
this is usually in drivers rather than
the current list so so it may allow you

395
00:34:37,810 --> 00:34:41,120
to access a token you would not normally
be allowed to access an impersonation

396
00:34:41,120 --> 00:34:47,819
level the real world example of that was
in Winfield UK winners 8.1 I believe

397
00:34:47,820 --> 00:34:52,490
introduced the new system call end-user
get clipboard token which returns you

398
00:34:52,489 --> 00:34:58,089
handle to take the token which last
wrote the clipboard and this could be

399
00:34:58,090 --> 00:35:02,870
the person action taken or primary taken
and I she gave your reference directly

400
00:35:02,870 --> 00:35:08,049
to object not just copy of it not clone
of it or anything but she returned you

401
00:35:08,050 --> 00:35:13,980
back and actually instance of that and
that has actually implications because

402
00:35:13,980 --> 00:35:20,460
as a lower level user on the same
desktop which you need to do to educate

403
00:35:20,460 --> 00:35:25,780
I can usually get to read access to any
total which happens to be interacting

404
00:35:25,780 --> 00:35:32,040
with a test that read access has taken
duplicate access so one thing I can do I

405
00:35:32,040 --> 00:35:36,770
can duplicate the token to create a new
impersonation token and then I can lower

406
00:35:36,770 --> 00:35:40,910
the Isle of that effectively allows me
to bypass the majority of our

407
00:35:40,910 --> 00:35:47,960
destination check so if you think about
it in the USA USA example the USC admin

408
00:35:47,960 --> 00:35:51,920
is running as administrator is still
running as you and the only thing which

409
00:35:51,920 --> 00:35:56,520
stops impersonating that token if you
ever got hold of it with the integrity

410
00:35:56,520 --> 00:36:02,640
level it runs a high and i really normal
users medium so i cant person night but

411
00:36:02,640 --> 00:36:07,109
of course if I can get access to raw
token I can lower the level and actually

412
00:36:07,110 --> 00:36:24,359
manipulated that way I can describe
leader is and died

413
00:36:24,359 --> 00:36:28,058
this program is basically sitting there
in the loop calling this function of

414
00:36:28,059 --> 00:36:32,989
waiting for administrator to write to
the clipboard so we've got to simulate

415
00:36:32,989 --> 00:36:45,519
that what it will do is it can basically
impersonate that administrator and for

416
00:36:45,519 --> 00:36:48,939
all intensive purposes and that the
kernel now thinks its administrator just

417
00:36:48,940 --> 00:36:52,470
running as medium integrity instead of
high intensity but I don't really matter

418
00:36:52,470 --> 00:37:04,700
so we can write something to the Windows
folder copy and paste from him so he's

419
00:37:04,700 --> 00:37:14,180
got a way to leave florida could find
test up tax which has been an hour

420
00:37:14,180 --> 00:37:18,680
written by our fire permit process even
though we never actually had access to

421
00:37:18,680 --> 00:37:23,279
that so that's that's more of a UAC
bypass burger is of a sort of

422
00:37:23,279 --> 00:37:33,079
interesting aspects you can do that with
this one is also an interesting one is

423
00:37:33,079 --> 00:37:38,980
similar to that sort of impersonation
bug to basically if you have the kernel

424
00:37:38,980 --> 00:37:43,700
duplication calls arbitrarily say I was
actually just going to be this this

425
00:37:43,700 --> 00:37:48,919
token to be a primary token and if it
doesn't actually correctly check well

426
00:37:48,920 --> 00:37:53,829
then attention you've got again a
security issue because one token which

427
00:37:53,829 --> 00:37:58,849
is not valid for use can suddenly become
another taken which is valid in the case

428
00:37:58,849 --> 00:38:06,849
in which you're trying to set it so in
this case a real example was this one so

429
00:38:06,849 --> 00:38:13,259
when you create a new process you have a
mechanism to assign a primary token to

430
00:38:13,259 --> 00:38:18,700
it now again that would be a risky
maneuver to just allow anybody to do

431
00:38:18,700 --> 00:38:23,950
that but one of the things which kind of
his first then this is it's hard to get

432
00:38:23,950 --> 00:38:30,460
a primary token if you do not have a
full impersonation too so it's supposed

433
00:38:30,460 --> 00:38:35,549
to require a primary token to be
assigned to process and all you need is

434
00:38:35,549 --> 00:38:36,420
it says there

435
00:38:36,420 --> 00:38:44,680
is taking query turkey potato can assign
primary assets right but if you actually

436
00:38:44,680 --> 00:38:49,520
dig into the code so great use process
uses implements by system call auntie

437
00:38:49,520 --> 00:38:54,350
create user process its first tries to
references take a few precious few

438
00:38:54,350 --> 00:39:00,250
passes to handle the coming from user
mode he passes a handle and actually all

439
00:39:00,250 --> 00:39:04,770
it really requires token assigned
primary it turns out every impersonation

440
00:39:04,770 --> 00:39:09,570
token will give you this this right back
if you create duplicate of a handle of a

441
00:39:09,570 --> 00:39:15,660
token it will allow you to assign
primary rights to this this handle even

442
00:39:15,660 --> 00:39:20,580
though it may not actually be a primary
token which could be a sign to anything

443
00:39:20,580 --> 00:39:27,790
theoretically she been doing a bit
further so obviously we've passes check

444
00:39:27,790 --> 00:39:32,380
because we can pass an impersonation
token and identification as long as we

445
00:39:32,380 --> 00:39:37,060
have this sign primary right which we
can get very very easily but then if you

446
00:39:37,060 --> 00:39:40,840
actually look at when it actually
creates token it causes internal test

447
00:39:40,840 --> 00:39:45,630
set you back a token function and
dysfunction does the duplication but

448
00:39:45,630 --> 00:39:50,380
there's no verification check which the
normal operations would do you do not

449
00:39:50,380 --> 00:39:54,950
get verification that and identification
token is being converted to a primary

450
00:39:54,950 --> 00:39:59,930
target and so effectively it circumvents
the security of it and allows you to

451
00:39:59,930 --> 00:40:07,129
sign arbitrary impersonation tokens as
the primary taxonomy process of itself

452
00:40:07,130 --> 00:40:13,810
probably shouldn't be a major problem
because like to impersonate privilege

453
00:40:13,810 --> 00:40:17,570
you actually have a sort of
corresponding sign primary token

454
00:40:17,570 --> 00:40:23,800
privilege and only things like system
services like I S have British 2012

455
00:40:23,800 --> 00:40:27,150
things you could do with this this
vulnerability you could easily elevate

456
00:40:27,150 --> 00:40:32,670
the local system using this by capturing
a local system identification token then

457
00:40:32,670 --> 00:40:37,090
creating a new process as LocalSystem
but

458
00:40:37,090 --> 00:40:42,160
that isn't that useful you hopefully you
should you have an implicit problem if

459
00:40:42,160 --> 00:40:46,720
you've got company in service account so
I thought is there another way of using

460
00:40:46,720 --> 00:40:54,560
it and the verification like the
impersonation check does some sort of

461
00:40:54,560 --> 00:41:03,110
determination as to whether that token
is appropriate for actual use in a

462
00:41:03,110 --> 00:41:07,930
normal user can create some processes
with different user tokens just not all

463
00:41:07,930 --> 00:41:16,620
process and it's actually two checks the
first check says is this token a child

464
00:41:16,620 --> 00:41:21,150
of your current open your current
process tech essentially sort of a

465
00:41:21,150 --> 00:41:25,610
parent-child relationship and this is
sort of the case of crate restricted

466
00:41:25,610 --> 00:41:30,780
tokens or filter tokens filter tokens
always assign the parent token I D to be

467
00:41:30,780 --> 00:41:37,810
the token idea of of of the original
token the second one is it simply token

468
00:41:37,810 --> 00:41:43,890
is it the same parent OpenID and the
same authentication idea and

469
00:41:43,890 --> 00:41:48,150
authentication ideas of the logon
session unique identifier and this is

470
00:41:48,150 --> 00:41:53,040
the case of duplicate token but also
interesting leak rate low box taken now

471
00:41:53,040 --> 00:41:58,980
credible token is also used not just in
metro stations is also used in things I

472
00:41:58,980 --> 00:42:04,870
i is enhanced protection mode so
potentially as a way of getting out of i

473
00:42:04,870 --> 00:42:09,400
enhanced protection mode down to just
normal protected mode which technically

474
00:42:09,400 --> 00:42:17,560
isn't security boundary therefore even
factory sandbox lie so I can quickly

475
00:42:17,560 --> 00:42:23,009
Democrats

476
00:42:23,010 --> 00:42:40,230
followed up I just checkin should be
doing so as you can see here we've got i

477
00:42:40,230 --> 00:42:45,770
runnin Bulldogs Process Explorer as a
container so this is running inside a

478
00:42:45,770 --> 00:42:50,810
restricted enhance protect myself box
which for the most part is considered to

479
00:42:50,810 --> 00:43:07,299
be a security battery that's 3060 here
is a simple tool to inject deal our

480
00:43:07,300 --> 00:43:12,380
interview how to protect mode process
just demonstrate virtually if you had an

481
00:43:12,380 --> 00:43:17,600
RCA we can demonstrate that actually
would inject into the process and what

482
00:43:17,600 --> 00:43:21,850
we'll do is we'll try to break out and
trying to break out the enhanced protect

483
00:43:21,850 --> 00:43:28,509
my samples so we now gotta count of
leaving now see how is actually running

484
00:43:28,510 --> 00:43:32,180
as low as that of a container so if it's
really now broken out the app intense

485
00:43:32,180 --> 00:43:36,790
ambushes and that even though we never
had a sign primary total privilege there

486
00:43:36,790 --> 00:43:44,400
was still some security impact
responsibility just a few more bucks as

487
00:43:44,400 --> 00:43:49,960
I go towards the end time to check in
time you use bugs whenever you open a

488
00:43:49,960 --> 00:43:57,580
resource such as a file it will usually
check he when you try to open the file

489
00:43:57,580 --> 00:44:03,130
but of course there's a potential
operation that you can sort of you can

490
00:44:03,130 --> 00:44:07,940
switch the token between the open call
and some other operation so classic one

491
00:44:07,940 --> 00:44:13,250
is like device i/o controls the device
i/o control is a sort of want to open

492
00:44:13,250 --> 00:44:17,790
the file you can send out between
control codes and if the driver shield

493
00:44:17,790 --> 00:44:22,350
that because local system must have open
this file but local system is still

494
00:44:22,350 --> 00:44:26,700
running and is open this file you can
kind of get time to time you should open

495
00:44:26,700 --> 00:44:32,290
as a normal user and then send a control
code impersonating another user

496
00:44:32,290 --> 00:44:38,430
forget obviously I want to provide real
examples of this this one was a bug in

497
00:44:38,430 --> 00:44:44,520
the WebDAV driver support and advice i
control and all it did was it checked

498
00:44:44,520 --> 00:44:50,259
whether the current authentication
session was the local systems

499
00:44:50,260 --> 00:44:53,140
authentication session but it never made
a check

500
00:44:53,140 --> 00:44:57,129
obviously for impersonation level
because probably there was some tacit

501
00:44:57,130 --> 00:45:02,010
assumption that kind of you may have
already been opened at local systems you

502
00:45:02,010 --> 00:45:04,870
couldn't have been impersonating a
two-level you wouldn't be allowed to

503
00:45:04,870 --> 00:45:12,750
open that file the final one on this is
vulnerable system cause I showed that

504
00:45:12,750 --> 00:45:19,280
there was some system cause you can call
to make access to these tokens there was

505
00:45:19,280 --> 00:45:23,810
an earlier version of this when you are
the only documented ones are ves there

506
00:45:23,810 --> 00:45:29,430
in Sault Ste open thread token eric's
and was basically a sort of a bug in the

507
00:45:29,430 --> 00:45:34,980
system calls from colonel respective
basically colonel the current crisis

508
00:45:34,980 --> 00:45:40,360
separate handle table so any value tried
opening Kermode should have a colonel

509
00:45:40,360 --> 00:45:45,440
only handle you have to pass a specific
flag to say I want to only open a car

510
00:45:45,440 --> 00:45:49,760
door handle because if you don't specify
that flag that handled as I opened in

511
00:45:49,760 --> 00:45:54,300
the current process and that current
prices can manipulate that dough and

512
00:45:54,300 --> 00:45:59,050
knead called actually have no way of
specifying I want to open a car door

513
00:45:59,050 --> 00:46:03,810
handle to basically there's no way you
should not use initially see a Dr using

514
00:46:03,810 --> 00:46:11,350
these these functions may be a security
mentality their final little little bit

515
00:46:11,350 --> 00:46:16,250
of presentation is a few bits of changes
that have been made in in Windows 10

516
00:46:16,250 --> 00:46:21,970
specifically but also in in 1072
handling of tokens the first one is St

517
00:46:21,970 --> 00:46:27,169
token is administered sixth awesome they
now actually back ported the Integra the

518
00:46:27,170 --> 00:46:35,100
anticipation level check that he told me
that mean I don't get knowledge I don't

519
00:46:35,100 --> 00:46:39,049
know whether in video has something to
do with this because Nvidia had a

520
00:46:39,050 --> 00:46:42,810
similar buggies and its same function
and obviously did say that we talked

521
00:46:42,810 --> 00:46:43,500
much

522
00:46:43,500 --> 00:46:48,390
maybe that's that's why I fixed and when
the state itself this is a slightly

523
00:46:48,390 --> 00:46:50,310
older buildings currently available

524
00:46:50,310 --> 00:46:54,180
it also has modified the impersonation
that will check to add some new weed

525
00:46:54,180 --> 00:47:00,069
capability checks and elevation checks
first one is it started a new group to

526
00:47:00,070 --> 00:47:03,650
if you've got this group in your in your
normal group list you can impersonate

527
00:47:03,650 --> 00:47:09,020
more such tokens than just the sort of
restricted it has to be you or has to be

528
00:47:09,020 --> 00:47:13,509
a certain class of you which is kind of
interesting if you can find the scenario

529
00:47:13,510 --> 00:47:20,420
where this is used it may be interesting
but the other one would actually combat

530
00:47:20,420 --> 00:47:26,600
my by demonstrating the clipboard token
in that you can now check for is the

531
00:47:26,600 --> 00:47:31,339
current token elevated and therefore if
the process tokenism elevated as well

532
00:47:31,340 --> 00:47:37,360
you know that's interesting this is
actually behind the compatibility flag

533
00:47:37,360 --> 00:47:41,630
for currently in the current build
awareness 10 days does not get an able

534
00:47:41,630 --> 00:47:48,090
but is there can be so that's my
presentation I noticed there's quite a

535
00:47:48,090 --> 00:47:56,500
lot of stuff in there is worth looking
on icy track which Chris showed earlier

536
00:47:56,500 --> 00:47:59,940
today you can just look for my bugs on
there and have a look at some of the

537
00:47:59,940 --> 00:48:03,390
other total bugs I've actually done but
if anyone has any questions about this

538
00:48:03,390 --> 00:48:08,759
Privacy ask away or wait until we get
the lunch you can sort of bug me over

539
00:48:08,760 --> 00:48:14,740
lunch and asked us so much and I'm gonna
questions

