1
00:00:02,740 --> 00:00:07,370
other guys morning welcome to our talk
thanks for attending today we talking

2
00:00:07,370 --> 00:00:12,820
about how buggy mobile apps can allow
their users to be tracked so is Jason

3
00:00:12,820 --> 00:00:18,210
mentioned I Patrick this is my coworker
Kobe we both work at Saxo Senate does

4
00:00:18,210 --> 00:00:22,099
crowdsourced vulnerability discovery we
used that its security researchers from

5
00:00:22,099 --> 00:00:23,580
all over the world

6
00:00:23,580 --> 00:00:30,729
basically find bugs in our customers web
apps devices network endpoints mobile

7
00:00:30,730 --> 00:00:35,330
app stuff like that so I customer
security not that good so we actually

8
00:00:35,330 --> 00:00:38,430
end up paying a lot of money to our
researchers so this is something that

9
00:00:38,430 --> 00:00:44,350
interests you definitely check out
mint.com alright so today's talk can be

10
00:00:44,350 --> 00:00:49,840
divided into three parts I'm gonna start
by talking about all things D location

11
00:00:49,840 --> 00:00:54,270
least in terms of of mobile I talked
about you know how to do this

12
00:00:54,270 --> 00:00:59,940
programmatically encode and talk about
some common bug classes that we see and

13
00:00:59,940 --> 00:01:02,970
finally we look at some actual
applications that had geolocation

14
00:01:02,970 --> 00:01:08,408
vulnerabilities to turn it over to Kobe
Kobe is gonna walk us through kind of a

15
00:01:08,409 --> 00:01:12,820
case study of a very popular app that
had a myriad of geolocation

16
00:01:12,820 --> 00:01:18,559
vulnerabilities that we discovered that
only allowed us to track any of its

17
00:01:18,560 --> 00:01:24,490
users anywhere anytime in the world and
we're gonna finish up with texts and

18
00:01:24,490 --> 00:01:29,490
conclusions best practice right
saperstein overview of geolocation some

19
00:01:29,490 --> 00:01:33,919
code and some interesting bugs might be
thinking you know why are we even

20
00:01:33,920 --> 00:01:38,060
talking about geolocation in mobile apps
well it turns out that integrating

21
00:01:38,060 --> 00:01:42,789
geolocation capabilities into mobile
apps is almost the norm in about

22
00:01:42,789 --> 00:01:47,049
three-quarters of smartphone users
actually make use of geolocation in some

23
00:01:47,049 --> 00:01:52,229
way shape or form on their devices so
you're certain categories of mobile apps

24
00:01:52,229 --> 00:01:56,840
that make use of your location so first
social obviously you know Facebook

25
00:01:56,840 --> 00:02:01,409
Twitter Instagram you can upload photos
tagged where they were taken check-in

26
00:02:01,409 --> 00:02:04,579
you location recommendations

27
00:02:04,579 --> 00:02:08,699
Chaka Khan you want to use Yelp figure
out what's good around again that uses

28
00:02:08,699 --> 00:02:12,399
geolocation gonna send your current
location to Yelp Yelp gonna give you

29
00:02:12,400 --> 00:02:15,740
information about what's nearby health
and fitness

30
00:02:15,740 --> 00:02:19,770
something like RunKeeper tracks where
you run show that online again that's

31
00:02:19,770 --> 00:02:24,050
two location navigation obviously point
A to point B and finally we're seeing

32
00:02:24,050 --> 00:02:28,090
even apps that are related to commerce
commerce or banking providing

33
00:02:28,090 --> 00:02:32,930
geolocation capabilities so a stores at
my detect when you're nearby one of

34
00:02:32,930 --> 00:02:39,160
their stores and give you a popup with a
coupon sale information rights before we

35
00:02:39,160 --> 00:02:43,380
go off hunting bugs I thought it
important to understand how geolocation

36
00:02:43,380 --> 00:02:48,670
is implemented in apps code level so
they were going to be talking about so

37
00:02:48,670 --> 00:02:52,709
when I less there's four or five basic
steps that you should perform in order

38
00:02:52,710 --> 00:02:58,330
to do geolocation enact it all revolves
around the sea a location manager this

39
00:02:58,330 --> 00:03:03,500
is the framework the API that you talked
to in order to dude you location so the

40
00:03:03,500 --> 00:03:08,230
first step is you create an instance of
the see location manager what you have

41
00:03:08,230 --> 00:03:12,980
an instance of the object you set a
delegate delegate is simply method or an

42
00:03:12,980 --> 00:03:17,720
object that will get automatically
invoked by the operating system when

43
00:03:17,720 --> 00:03:21,230
there is an OSU location update to
basically have to tell the operating

44
00:03:21,230 --> 00:03:25,380
system wet object or whatever you want
to call back then start you tell the

45
00:03:25,380 --> 00:03:27,269
operating system hey I'm ready to go

46
00:03:27,270 --> 00:03:31,240
start delivering these d location
updates and then you basically weight

47
00:03:31,240 --> 00:03:35,630
and when there is a West you location
update for example when the device moves

48
00:03:35,630 --> 00:03:39,740
the OS iOS will automatically call your
delegate and you can process the

49
00:03:39,740 --> 00:03:46,850
function so this is how it looks like in
code so this is a swift that shows the

50
00:03:46,850 --> 00:03:50,750
shows how to grab the user's current
location so we can see the steps I just

51
00:03:50,750 --> 00:03:56,160
described one we can see that we're
creating an instance of the location

52
00:03:56,160 --> 00:04:00,820
manager step to resetting the delegate
resetting it to herself again just said

53
00:04:00,820 --> 00:04:05,359
when there is a geolocation update
please iOS call us back because we're

54
00:04:05,360 --> 00:04:09,690
interested in it that three we tell the
operating system ready to go to start

55
00:04:09,690 --> 00:04:13,410
collecting and then the bottom that
stuff for that the delegates to this is

56
00:04:13,410 --> 00:04:18,180
the function the method that's gonna get
called by the operating system so we run

57
00:04:18,180 --> 00:04:21,560
this compile this will see we got an app
that able to access the user's location

58
00:04:21,560 --> 00:04:25,710
now there's one thing I skipped over and
that's the thing that struggled in the

59
00:04:25,710 --> 00:04:27,590
black box and this is requesting off

60
00:04:27,590 --> 00:04:33,049
position so that makes sense but perhaps
have to explicitly request authorization

61
00:04:33,050 --> 00:04:38,400
to access the user's location obviously
geolocation something that sensitive

62
00:04:38,400 --> 00:04:42,849
might be some security things involved
with it so i cant just blindly access

63
00:04:42,850 --> 00:04:48,020
that without user's permission so on iOS
there's two ways to gain access to this

64
00:04:48,020 --> 00:04:53,060
depends on what kind of access to the
first one is for applications that one

65
00:04:53,060 --> 00:04:57,810
access to the user with the device's
location only while the application is

66
00:04:57,810 --> 00:05:02,820
in use in the foreground while the apt
is being enacted by with the user so in

67
00:05:02,820 --> 00:05:07,260
order to request this kind of
authentication two steps you set the DNS

68
00:05:07,260 --> 00:05:12,460
location when in use usage key in the
apt plist file and then at runtime you

69
00:05:12,460 --> 00:05:16,280
invoke the request when used
authorization you do this you'll get

70
00:05:16,280 --> 00:05:20,239
that OS level pop up you can see on the
slide basically allows the user to

71
00:05:20,240 --> 00:05:24,210
confirm or deny so if they denied as the
application will not be able to access

72
00:05:24,210 --> 00:05:28,330
to location information they do allow it
the app will be able to but only when

73
00:05:28,330 --> 00:05:32,280
the app is for ground though if the user
background the Apple will no longer be

74
00:05:32,280 --> 00:05:37,590
able to access the second way allows
applications to access the users or the

75
00:05:37,590 --> 00:05:41,919
devices geolocation information at all
times now this makes sense for things

76
00:05:41,919 --> 00:05:48,450
like navigation app so you think about
it you put in a point B go then switch

77
00:05:48,450 --> 00:05:54,050
to Facebook and texting while driving or
something obviously the the app in the

78
00:05:54,050 --> 00:05:57,380
background the navigation app is still
need to know your location so that when

79
00:05:57,380 --> 00:06:01,190
you come into like a fork in the road
can tell you to take it so in this case

80
00:06:01,190 --> 00:06:07,330
you basically do something similar you
request authorization at all times so

81
00:06:07,330 --> 00:06:09,469
basically you invoke the request

82
00:06:09,470 --> 00:06:13,669
always authorization method at this
point you get a similar level pop up

83
00:06:13,669 --> 00:06:14,500
again

84
00:06:14,500 --> 00:06:20,970
user click confirm or deny all rights as
I mentioned geolocation apps is you know

85
00:06:20,970 --> 00:06:23,520
pretty much the norm and it's a really
cool feature I mean it's one of the

86
00:06:23,520 --> 00:06:28,190
features that make our smart phones
smart the problem is if the applications

87
00:06:28,190 --> 00:06:32,600
are buggy the user's location can leak
is really bad for 'em

88
00:06:32,600 --> 00:06:36,980
you just wanted you for privacy and
security reasons but the good the bad

89
00:06:36,980 --> 00:06:42,410
guys rather actually you know like this
and have made useless you might be

90
00:06:42,410 --> 00:06:47,440
thinking I don't really care if someone
the government's criminal knows my

91
00:06:47,440 --> 00:06:51,150
current location and you know I surf I
go to work

92
00:06:51,150 --> 00:06:56,049
walk the dog I'm not a terrorist drug
dealer but it turns out that I simply

93
00:06:56,050 --> 00:06:59,710
knowing someone's location you can
actually build a really good da Dao

94
00:06:59,710 --> 00:07:04,109
their entire life so there's this quote
I like that articulates it does really

95
00:07:04,110 --> 00:07:09,910
well this quote says that geolocation
create a precise comprehensive record of

96
00:07:09,910 --> 00:07:14,200
a person's public movements that reflect
a wealth of detail about her familial

97
00:07:14,200 --> 00:07:19,300
political professional religious and
sexual associations forgotten just from

98
00:07:19,300 --> 00:07:22,360
knowing someone's location whether a day
today and being able to track and you

99
00:07:22,360 --> 00:07:26,350
can build a ton of information about
them which probably can be used against

100
00:07:26,350 --> 00:07:30,190
you in some form maybe to blackmail you
or if you're in a difficult situation

101
00:07:30,190 --> 00:07:35,990
may be coerced you use it against you
now there's even simpler scenarios where

102
00:07:35,990 --> 00:07:40,050
there have been cases where criminals
have used people's geolocation

103
00:07:40,050 --> 00:07:45,060
information drop their house so we're
all here in Hawaii were probably jumping

104
00:07:45,060 --> 00:07:50,650
on Facebook Twitter friends back on the
mainland how awesome it is that kind of

105
00:07:50,650 --> 00:07:54,729
stuff maybe taking some photos and if a
criminal can see this information if

106
00:07:54,730 --> 00:07:57,680
this information is public and they
wanted to rob houses now would be a

107
00:07:57,680 --> 00:08:03,900
really good time is where you know the
state right now to talk about some

108
00:08:03,900 --> 00:08:08,340
common classes of bugs and mobile apps
that may review may reveal users

109
00:08:08,340 --> 00:08:12,560
locations and then also how to find such
bugs so in the subsequent flights going

110
00:08:12,560 --> 00:08:17,930
to cover each of these categories right
the first time I talked about insecure

111
00:08:17,930 --> 00:08:22,140
network indications so it's an app
doesn't secure its network information

112
00:08:22,140 --> 00:08:27,510
communications and sensitive information
such as geolocation is transmitted a

113
00:08:27,510 --> 00:08:32,569
remote attacker may be able to sniff and
therefore access this information so

114
00:08:32,570 --> 00:08:36,390
there's obviously from user point of
view again not ideal for applications

115
00:08:36,390 --> 00:08:42,169
should not use encrypted columns they
should not allow sign certificates and

116
00:08:42,169 --> 00:08:45,300
they should also make use of something
called the cell certificate

117
00:08:45,300 --> 00:08:50,920
so the easiest way to find these kind of
bugs to look for insecure network on

118
00:08:50,920 --> 00:08:53,660
this simply sniff the network traffic

119
00:08:53,660 --> 00:08:57,430
turns out actually pretty easy to do so
what you do is you first set up a proxy

120
00:08:57,430 --> 00:09:02,729
on your host device on your laptop is
ready for you when I use birth requires

121
00:09:02,730 --> 00:09:06,410
job I was kind of software other than
that it's free and pretty pretty decent

122
00:09:06,410 --> 00:09:10,719
what you have this setup you then hopped
onto your device and configure it to

123
00:09:10,720 --> 00:09:15,339
talk to the proxy so you first install
the proxies SSL certificate on the

124
00:09:15,339 --> 00:09:19,350
device so that its trusted and then you
go into the wifi settings and set the IP

125
00:09:19,350 --> 00:09:24,390
address and the port of the proxy may
also turn off all comes from now on any

126
00:09:24,390 --> 00:09:27,610
time you fire up an app on your device
it's gonna be automatically routed

127
00:09:27,610 --> 00:09:31,690
through the proxy and you can examine
all network track the one thing we see

128
00:09:31,690 --> 00:09:35,930
in this is one of the things I always
look for first is just our the comp

129
00:09:35,930 --> 00:09:40,930
secured you know are there any
connections that are not ask itself and

130
00:09:40,930 --> 00:09:44,550
a lot of times what we see is that the
main coms between the at the apps

131
00:09:44,550 --> 00:09:46,339
servers in the cloud

132
00:09:46,339 --> 00:09:50,910
those are usually secured is usually
over HTTPS but a lot of times AppleTalk

133
00:09:50,910 --> 00:09:56,439
absolute talk to third-party services so
diagnostic services logging services and

134
00:09:56,440 --> 00:10:00,670
what time did these connections will not
be secure location information in those

135
00:10:00,670 --> 00:10:07,060
that traffic again an attacker may be a
factor out the user's location this is

136
00:10:07,060 --> 00:10:10,459
pretty easy to detect at the proxy level
you pretty much as filter out all the

137
00:10:10,459 --> 00:10:15,099
HTTPS traffic look with flat and this
will be the insecure traffic and then

138
00:10:15,100 --> 00:10:19,690
feet are there any Jew location
coordinates being transmitted by seven

139
00:10:19,690 --> 00:10:20,700
see you all the time

140
00:10:20,700 --> 00:10:24,920
another good thing to look for is to
determine if the application except

141
00:10:24,920 --> 00:10:29,930
self-signed certificate obviously if the
app does accept self-signed certificates

142
00:10:29,930 --> 00:10:33,239
this means that an attacker after will
be able to man in the middle of the

143
00:10:33,240 --> 00:10:38,100
attack even if it's over SSL just
providing their own sword so here you

144
00:10:38,100 --> 00:10:42,790
can look this is some disassembly from a
nap that did allow self-signed

145
00:10:42,790 --> 00:10:47,719
certificate and we can see that it's
invoking the set always allow HTTPS

146
00:10:47,720 --> 00:10:52,760
certificate for host now I less by
default doesn't allow applications to

147
00:10:52,760 --> 00:10:57,390
allow self-signed certificates which is
a good thing but developers can override

148
00:10:57,390 --> 00:10:58,630
this functionality by

149
00:10:58,630 --> 00:11:02,520
this method so again I'm not sure if
developers do this while they're testing

150
00:11:02,520 --> 00:11:06,710
and then this weeks into production code
but we have seen a case where there is

151
00:11:06,710 --> 00:11:09,700
this code in the application was
therefore vulnerable to a

152
00:11:09,700 --> 00:11:13,260
man-in-the-middle attack the gap then
geolocation information is being

153
00:11:13,260 --> 00:11:17,860
transmitted an attacker could man in the
middle of this in these connections and

154
00:11:17,860 --> 00:11:23,300
figure out where the user is another
thing in terms of insecure network

155
00:11:23,300 --> 00:11:28,479
communication is did the appt forget the
pain its shelters so as the cell pending

156
00:11:28,480 --> 00:11:33,220
is a layer of security that protects
against rogue CA's or social engineering

157
00:11:33,220 --> 00:11:38,300
attacks so I have an application does
not use a cell pending the following

158
00:11:38,300 --> 00:11:40,969
scenario could allow a hacker to man in
the middle

159
00:11:40,970 --> 00:11:45,610
connection to the goal here is to the
hacker to get their malicious untrusted

160
00:11:45,610 --> 00:11:49,540
certificate installed onto the user's
device user that they're targeting so

161
00:11:49,540 --> 00:11:53,680
turns out I last actually pretty easy
because I less detect certificates in

162
00:11:53,680 --> 00:11:56,930
emails and allows you to click on them
and it'll give you a warning but if you

163
00:11:56,930 --> 00:12:01,250
click yes it'll then install them into
device so you can imagine a hacker may

164
00:12:01,250 --> 00:12:04,790
be emailing an employee on the first day
of work saying hey you know in order to

165
00:12:04,790 --> 00:12:11,390
use your iPhone at work please install
the certificate that's right so at this

166
00:12:11,390 --> 00:12:14,770
point if they do that the attackers
certificate will be now installed on the

167
00:12:14,770 --> 00:12:18,829
device and if the application is not
using SSL pending the attackers

168
00:12:18,830 --> 00:12:24,260
certificate will be able to meet in the
middle if the application is using SSL

169
00:12:24,260 --> 00:12:27,090
painting it doesn't even look at the
installed certain basically says I'm

170
00:12:27,090 --> 00:12:31,770
only gonna talk to one sir which is the
application server so even if the hacker

171
00:12:31,770 --> 00:12:35,699
get that installed it doesn't impact the
communications they'll still be secured

172
00:12:35,700 --> 00:12:40,400
to the easiest way to find this is the
see basically if your app connects to

173
00:12:40,400 --> 00:12:44,930
the proxy in talks this is remember we
installed the proxy certificate on the

174
00:12:44,930 --> 00:12:48,439
device almost the same scenarios and
haggard installing third-party

175
00:12:48,440 --> 00:12:53,230
certificate on the device so the act is
using penning it won't like that proxy

176
00:12:53,230 --> 00:12:58,000
certificate and we refuse to talk to the
proxy over us so so again a very high

177
00:12:58,000 --> 00:13:01,560
tech way to figure out if the app is
pending but a good way to kind of make

178
00:13:01,560 --> 00:13:02,270
sure of that

179
00:13:02,270 --> 00:13:05,720
now there are tools and you have a
jailbroken device to override the

180
00:13:05,720 --> 00:13:10,240
pending for example if you want to do
some analysis of the traffic

181
00:13:10,240 --> 00:13:15,260
so that's kind of a good thing to be
aware of as well right the next time I

182
00:13:15,260 --> 00:13:19,870
want to talk about is insecure local
stories so the unfortunate reality is a

183
00:13:19,870 --> 00:13:24,020
lot of phones get lost or stolen and if
they're sensitive information such as

184
00:13:24,020 --> 00:13:28,670
you location coordinates that are stored
in securely if your phone is lost losses

185
00:13:28,670 --> 00:13:32,750
tunnel stolen attacker may be able to
access to figure out where you've been

186
00:13:32,750 --> 00:13:35,779
where you go on all that sort of stuff

187
00:13:35,779 --> 00:13:40,420
unfortunately we see a lot of apps that
store sensitive information like your

188
00:13:40,420 --> 00:13:45,000
location coordinates in insecure files
he lists and databases and sometimes

189
00:13:45,000 --> 00:13:51,029
even in log files so the simplest way to
determine if an app is vulnerable to

190
00:13:51,029 --> 00:13:54,820
this kind of attack is simply run at all
such as filed on and then another tool

191
00:13:54,820 --> 00:14:00,250
such as filed EP so filed on like its
name suggests will monitor file i/o

192
00:14:00,250 --> 00:14:04,790
activity so what you can do as you run
this on a jailbroken device fire up the

193
00:14:04,790 --> 00:14:09,790
app and then basically watch what files
is creating here we can see the Where's

194
00:14:09,790 --> 00:14:14,520
Waldo happens creating a location . GB
file and then also a last known location

195
00:14:14,520 --> 00:14:18,449
. people so these are the kind of files
you probably just wide open up and see

196
00:14:18,450 --> 00:14:21,600
are there is that are sensitive
information it's our geo location

197
00:14:21,600 --> 00:14:25,600
coordinates that are in these files so
if you find it interesting file file

198
00:14:25,600 --> 00:14:30,579
some interesting data you basically want
to check its file attributes so on older

199
00:14:30,579 --> 00:14:36,290
versions of iOS sure all files are
encrypted when the device is shut off

200
00:14:36,290 --> 00:14:40,199
but if the device is turned on these
files are automatically decrypted by the

201
00:14:40,200 --> 00:14:44,470
BLS even without the user's passcode to
this means that if the attacker get your

202
00:14:44,470 --> 00:14:47,390
phone and computer and access the file
system they don't even need your

203
00:14:47,390 --> 00:14:52,829
passcode to access these files to Apple
provided a second layer encryption based

204
00:14:52,829 --> 00:14:57,170
off the pass code of the PIN code of
your device and this should be used

205
00:14:57,170 --> 00:15:00,360
because this basically means that
attacker now has to gather brute force

206
00:15:00,360 --> 00:15:04,420
your passcode in order to decrypt these
files so you wanna look to see if the

207
00:15:04,420 --> 00:15:08,270
files containing the sensitive
information contained this specific

208
00:15:08,270 --> 00:15:12,500
attribute will make use of this second
layer encryption which is often so you

209
00:15:12,500 --> 00:15:16,020
can do is you basically look for a file
attribute called and asked file

210
00:15:16,020 --> 00:15:20,510
protection and if it's missing that
means the file is insecure or if the key

211
00:15:20,510 --> 00:15:23,610
is there but set to an asset protection
against me

212
00:15:23,610 --> 00:15:26,610
that the file will be automatically
decrypted by the operating system

213
00:15:26,610 --> 00:15:28,120
whenever the device is powered on

214
00:15:28,120 --> 00:15:33,420
even without the basket entered the one
place I always look for such in securely

215
00:15:33,420 --> 00:15:38,370
stored data is in the user's default so
I S has the notion of user's default

216
00:15:38,370 --> 00:15:43,420
which is an easy way for applications
the store user preferences so if you

217
00:15:43,420 --> 00:15:48,339
look at the disassembly on the slide you
can basically see we're setting a Geo

218
00:15:48,339 --> 00:15:50,529
info preference

219
00:15:50,529 --> 00:15:54,540
now if you notice here there's no file
i/o API is you don't have to open a file

220
00:15:54,540 --> 00:15:59,709
you don't have to write bytes out you
want to close the file so what I was

221
00:15:59,709 --> 00:16:03,649
done is abstracted all the way you
basically set akita dictionary and it

222
00:16:03,649 --> 00:16:08,040
takes care of all the file file i/o this
is such an easy thing to use a lot of

223
00:16:08,040 --> 00:16:12,240
developers misuse it and store certain
information here again it's only

224
00:16:12,240 --> 00:16:15,890
supposed to be storing user's
preferences like what color they want

225
00:16:15,890 --> 00:16:19,380
the background in the app or what their
time practices you should not be storing

226
00:16:19,380 --> 00:16:23,000
sensitive information like geolocation
information here so I was gonna look at

227
00:16:23,000 --> 00:16:27,160
the silence a are there any sensitive
information in here because this file is

228
00:16:27,160 --> 00:16:31,240
not encrypted so if your phone is lost
any information in this file will be

229
00:16:31,240 --> 00:16:38,570
accessible to write our talk about
locations now the key thing here is that

230
00:16:38,570 --> 00:16:44,040
developers should not trust data from
the client about their location because

231
00:16:44,040 --> 00:16:48,969
this is trivial so developers on the
server side should specifically not you

232
00:16:48,970 --> 00:16:54,060
know I use the client's location or
their other location to say things like

233
00:16:54,060 --> 00:16:58,579
I will let you off right so we see some
apps that maybe only let users login

234
00:16:58,579 --> 00:17:03,479
from while they're at work in some
geofence area or from their home state

235
00:17:03,480 --> 00:17:07,400
her hometown maybe a banking outlets and
extra layer security now you can spoof

236
00:17:07,400 --> 00:17:12,699
this location that gives no extra level
level of security also see a lot of apps

237
00:17:12,699 --> 00:17:16,990
that give access to relative data that
sensitive so obviously if you can spoof

238
00:17:16,990 --> 00:17:21,910
and change that location you can get it
under relative data applications on the

239
00:17:21,910 --> 00:17:26,760
server side should also not allow
applications to rapidly change their

240
00:17:26,760 --> 00:17:29,429
location because there's probably
something a hacker's gonna do to perform

241
00:17:29,429 --> 00:17:34,690
it so this allows for harvesting of data
so if there's an app that provides

242
00:17:34,690 --> 00:17:36,169
fading out

243
00:17:36,169 --> 00:17:38,989
provides information about people who
were nearby you you can change that

244
00:17:38,989 --> 00:17:43,889
location you can now gather information
about everyone on that similarly and

245
00:17:43,889 --> 00:17:47,519
Kobe will talk about this if you change
your location you can actually perform a

246
00:17:47,519 --> 00:17:51,429
trial adoration attack to find out
people the exact location even if the

247
00:17:51,429 --> 00:17:55,389
app only provides you relative location
like it says someone's within a quarter

248
00:17:55,389 --> 00:17:58,330
mile from you but do they tell you
exactly where they are you can use this

249
00:17:58,330 --> 00:18:03,029
to figure out exactly whether the
easiest way to figure out if the app has

250
00:18:03,029 --> 00:18:08,070
been able to do location is just to
change your location and you know see

251
00:18:08,070 --> 00:18:12,678
what it gives you a variety of ways to
do this if you have a jailbroken device

252
00:18:12,679 --> 00:18:17,669
you can use their sim city act that will
hopefully change the iPhones or the

253
00:18:17,669 --> 00:18:23,109
device's location if you can also if you
have a jailbroken device you can use the

254
00:18:23,109 --> 00:18:26,119
tool which is called script which will
allow you to inject code in the

255
00:18:26,119 --> 00:18:31,749
application runtime and manipulate the
location as well I find the easiest way

256
00:18:31,749 --> 00:18:35,179
is just a look at the network requests
going out and change the geolocation

257
00:18:35,179 --> 00:18:39,340
coordinate can see how the server-side
component of the app response so think

258
00:18:39,340 --> 00:18:43,980
about dating app lets start in Russia
gonna send our location and it's

259
00:18:43,980 --> 00:18:45,649
probably not give give us back

260
00:18:45,649 --> 00:18:50,789
matches that look brushing then if we
spoke this location and say ok now we're

261
00:18:50,789 --> 00:18:55,549
in Hawaii probably give us back you know
people who search for new york so very

262
00:18:55,549 --> 00:18:59,859
easily you can tell ok my spoofing
basically worked not super high tack

263
00:18:59,859 --> 00:19:06,059
pretty easy way to figure out if you're
basically worked I don't think I wanna

264
00:19:06,059 --> 00:19:11,749
talk about is overly precise location
now this is a bug per se but if geo

265
00:19:11,749 --> 00:19:15,779
location coordinates are being leaked or
accessible via another about a bug

266
00:19:15,779 --> 00:19:20,809
knowing exactly where the user is is a
lot worse so think about it this way if

267
00:19:20,809 --> 00:19:24,460
geo location coordinates are being
leaked but the accuracy is only with

268
00:19:24,460 --> 00:19:28,019
within one or two miles and it's not
that bad

269
00:19:28,019 --> 00:19:32,619
whereas if G location coordinates are
down to the foot level or within 10 feet

270
00:19:32,619 --> 00:19:37,320
at a lot worse than you know exactly
where the users at the main reason we

271
00:19:37,320 --> 00:19:41,799
see this in applications because by
default I less provides you the highest

272
00:19:41,799 --> 00:19:47,129
level of accuracy possible if you don't
specify what level you want so how can

273
00:19:47,129 --> 00:19:49,629
you determine if an application is used

274
00:19:49,630 --> 00:19:54,030
overly precise location again he just
way that the network traffic the

275
00:19:54,030 --> 00:19:57,379
geolocation coordinate that are being
sent up to the server just grab those

276
00:19:57,380 --> 00:20:01,270
and plug them into Google Maps and see
you know if you're doing this from your

277
00:20:01,270 --> 00:20:04,389
house to the white you within your
neighborhood that supply you with your

278
00:20:04,390 --> 00:20:07,680
house the supply you with in the room of
your house that's a really good way to

279
00:20:07,680 --> 00:20:12,010
figure out how are you can also look at
the disassembly and look for the set

280
00:20:12,010 --> 00:20:16,629
desired accuracy method to this allows
you to specify what level of accuracy

281
00:20:16,630 --> 00:20:21,870
you want what the application ones so
its third argument of this method is the

282
00:20:21,870 --> 00:20:27,679
accuracy confident and if this is set to
DL location accuracy best this means the

283
00:20:27,680 --> 00:20:31,610
a passing hey I less please give me the
most accurate geolocation information

284
00:20:31,610 --> 00:20:36,270
you have because I wanna make you sit
back and remember it's not specified

285
00:20:36,270 --> 00:20:40,560
that call is not made iOS is going to
fault the highest level are another

286
00:20:40,560 --> 00:20:45,669
common but last week a lot they can
reveal user's location our buggy

287
00:20:45,670 --> 00:20:52,100
server-side it you guys so we see a lot
of apps that assume that if their API

288
00:20:52,100 --> 00:20:57,730
endpoint is not documented no one is
gonna focus on it they also assume that

289
00:20:57,730 --> 00:21:02,780
rate limiting is not needed they assume
that help you know only applications and

290
00:21:02,780 --> 00:21:06,710
devices are gonna be talking to this API
we coded as application we know there's

291
00:21:06,710 --> 00:21:10,500
a well behaved so we don't need to any
room rate limited they don't you rate

292
00:21:10,500 --> 00:21:15,860
limited obviously you can harvest family
a lot of API's allow completely

293
00:21:15,860 --> 00:21:21,040
anonymous queries so again you can just
as an attacker can act as the API and

294
00:21:21,040 --> 00:21:24,790
I'll just give you all sorts of
information all times we see a lot of

295
00:21:24,790 --> 00:21:29,500
sensitive geolocation information and in
kobe's case study will talk a little bit

296
00:21:29,500 --> 00:21:32,130
more about this

297
00:21:32,130 --> 00:21:35,790
easiest way to find these kinds of
vulnerabilities is just to look at the

298
00:21:35,790 --> 00:21:39,860
network traffic and see what API and
points is the application talking to

299
00:21:39,860 --> 00:21:43,719
grab those and start poking around on
them from the network requests you can

300
00:21:43,720 --> 00:21:48,540
see probably what parameters takes those
change those up here we can see an

301
00:21:48,540 --> 00:21:54,190
example there is an application that is
talking to a where my API endpoint and

302
00:21:54,190 --> 00:21:58,890
it takes your username and give you back
your new location so what you can do is

303
00:21:58,890 --> 00:22:02,360
you can change the username and see if
it gives you back

304
00:22:02,360 --> 00:22:06,689
information about other users to get
into some sample we change it from Waldo

305
00:22:06,690 --> 00:22:10,740
to Carmen Sandiego and then the
application and give us back the

306
00:22:10,740 --> 00:22:16,720
location of Carmen Sandiego writes the
last class the geolocation

307
00:22:16,720 --> 00:22:22,110
vulnerabilities I wanna talk about deals
with the UI so it's funny or I guess

308
00:22:22,110 --> 00:22:26,399
more sad a lot of developers again
assume that no one is going to poke

309
00:22:26,400 --> 00:22:31,220
around under the UI try to manipulate
you I for malicious purposes so we see a

310
00:22:31,220 --> 00:22:37,470
lot of bugs you know that that have this
kind of issue so why should we see a lot

311
00:22:37,470 --> 00:22:42,040
is it will be a UI setting that user can
select but this setting is not really

312
00:22:42,040 --> 00:22:47,340
respected at the Apple so we've seen
asked where the user can turn off

313
00:22:47,340 --> 00:22:52,990
sharing within the app but we still see
that the app send location data to the

314
00:22:52,990 --> 00:22:57,000
server which is kind of
counter-intuitive but I was what I think

315
00:22:57,000 --> 00:23:01,650
is occurring is that the server-side
component is not going to share their

316
00:23:01,650 --> 00:23:05,910
location with other users but if the
geolocation information between the app

317
00:23:05,910 --> 00:23:10,240
and the server is insecure even if the
user says don't share my location it's

318
00:23:10,240 --> 00:23:14,260
still being shared so someone might be
able to sniff it and also you know do

319
00:23:14,260 --> 00:23:17,950
you really trust that app developer once
they have your geolocation information

320
00:23:17,950 --> 00:23:24,610
you know they might do something with
that letter G U I issue we see is that

321
00:23:24,610 --> 00:23:29,580
logic that should be implemented on the
server side is implemented at the level

322
00:23:29,580 --> 00:23:30,840
so again

323
00:23:30,840 --> 00:23:35,090
think of a dating app that allows you to
specify the level of accuracy that

324
00:23:35,090 --> 00:23:38,320
you're OK sharing your location with
obviously you probably want to share

325
00:23:38,320 --> 00:23:42,389
your location so that you can find
matches people nearby but you might not

326
00:23:42,390 --> 00:23:46,190
want them knowing exactly where you are
you say okay i'm ok if they know that

327
00:23:46,190 --> 00:23:52,370
within a mile but I don't want this down
to you know the sub 5:20 so he said this

328
00:23:52,370 --> 00:23:56,830
setting and we've seen cases where your
exact location information is still so

329
00:23:56,830 --> 00:24:01,830
sent to the server in the server sends
this exact your exact location to other

330
00:24:01,830 --> 00:24:07,399
users and then the instances of the app
on the other users devices are what are

331
00:24:07,400 --> 00:24:11,730
doing the rounding so they basically say
oh this person says I only want to share

332
00:24:11,730 --> 00:24:15,929
within a mile so to use their bday only
you know they do

333
00:24:15,929 --> 00:24:19,159
rounding and then only shows they're
obviously again

334
00:24:19,159 --> 00:24:23,320
coms are insecure between the original
act and the server someone can sniff

335
00:24:23,320 --> 00:24:26,418
this and get your exact location even
though you said I only want to share it

336
00:24:26,419 --> 00:24:31,970
within a 10 mile radius and worse since
the server then sending your exact

337
00:24:31,970 --> 00:24:35,830
location coordinates to other instances
of the app until late in the afternoon

338
00:24:35,830 --> 00:24:39,799
around in there if your night at her and
can talk to the API's directly you're

339
00:24:39,799 --> 00:24:44,749
gonna get user's exact location even
know they requested

340
00:24:44,749 --> 00:24:49,299
let's talk about some real-life examples
so here's some apps that were or still

341
00:24:49,299 --> 00:24:54,029
are vulnerable to a variety of
geolocation to the first the Starbucks I

342
00:24:54,029 --> 00:24:58,340
was kind of things you like to Starbucks
tracking write this kind of just shows

343
00:24:58,340 --> 00:25:00,439
the geolocation is everywhere

344
00:25:00,440 --> 00:25:04,289
fortunately older versions of the
Starbucks at had a vulnerability where

345
00:25:04,289 --> 00:25:08,259
users geo location coordinates were
stored in an unencrypted file yet it

346
00:25:08,259 --> 00:25:11,879
means if the phone is lost or stolen an
attacker would be able to access a

347
00:25:11,879 --> 00:25:15,709
user's location now this isn't the worst
bug i mean the prize figure out when and

348
00:25:15,710 --> 00:25:19,309
where you go to Starbucks but again it
shows you that you have to like

349
00:25:19,309 --> 00:25:23,200
Starbucks might be tracked tracking you
and then storing your geolocation

350
00:25:23,200 --> 00:25:27,610
instantly this was a little worse so
whisper was a secret sharing out

351
00:25:27,610 --> 00:25:34,008
basically allowed users to anonymously
whisper post secrets on how do you i bug

352
00:25:34,009 --> 00:25:38,330
or feature that even if the user opt-out
of sharing their location their

353
00:25:38,330 --> 00:25:41,970
information would still get sent to the
server including their exact location

354
00:25:41,970 --> 00:25:46,470
now this will be sent on to other users
but was still being sent to the

355
00:25:46,470 --> 00:25:52,909
developers so there's a port on this
because the Guardian found out that the

356
00:25:52,909 --> 00:25:56,749
application developers were actually
sharing this new location information

357
00:25:56,749 --> 00:26:01,210
with the government with the DoD so this
is a screenshot from the report this is

358
00:26:01,210 --> 00:26:06,159
from Fort Meade and I say so you can see
the tunnel whisper users and their

359
00:26:06,159 --> 00:26:11,049
locations were being sent to the app
developers and also been shared with the

360
00:26:11,049 --> 00:26:16,279
DoD even though the users had requested
to opt out now you know maybe the

361
00:26:16,279 --> 00:26:19,749
scenario people with real hot stuff in
the NSA the government might wanna know

362
00:26:19,749 --> 00:26:20,779
about this

363
00:26:20,779 --> 00:26:24,999
gonna pass judgment there but this
indicates again that the app was not

364
00:26:24,999 --> 00:26:28,340
respecting the UI settings and
geolocation information was being leaked

365
00:26:28,340 --> 00:26:36,260
shared with other parties and the drone
another example was tender again super

366
00:26:36,260 --> 00:26:40,450
popular dating app back in the day had a
really bad issue where it would give you

367
00:26:40,450 --> 00:26:45,130
the exact location of all the users of
that act within your location so you

368
00:26:45,130 --> 00:26:49,549
could track everyone indiscriminately
they then updated this to provide only

369
00:26:49,549 --> 00:26:52,900
relative distance so they would say ok
here are your matches are here the

370
00:26:52,900 --> 00:26:56,860
tender users and their within a mile of
you are a quarter mile or so they

371
00:26:56,860 --> 00:27:00,779
thought hey you know that doesn't give
someone enough information to figure out

372
00:27:00,779 --> 00:27:04,149
where they can because they can be a
mile in any direction what turned out

373
00:27:04,149 --> 00:27:07,879
you could still spoof your location so
you could perform a trilateral Asian tax

374
00:27:07,880 --> 00:27:11,490
code we will talk about more basic allow
you to speak your location three times

375
00:27:11,490 --> 00:27:16,020
and mathematical you could figure out
the exact location of the user

376
00:27:16,020 --> 00:27:19,620
there are other issues as well really to
privacy where since you had to use sign

377
00:27:19,620 --> 00:27:24,199
in with Facebook to access tender there
was an information that tight tender

378
00:27:24,200 --> 00:27:29,080
users to their Facebook accounts by if
you analyze the network traffic again

379
00:27:29,080 --> 00:27:31,750
this is problematic because a lot of
people share a lot more information on

380
00:27:31,750 --> 00:27:34,700
their Facebook profile so now you can
tie their tender profile to their

381
00:27:34,700 --> 00:27:38,220
Facebook profile LA Times whose phone
numbers addresses just a lot more

382
00:27:38,220 --> 00:27:42,230
information to this is all reported to
tender they patch and fixed everything

383
00:27:42,230 --> 00:27:47,190
but not before applications may or may
not have been created that would allow

384
00:27:47,190 --> 00:27:51,409
you to log in with your tender
information and then see all tender

385
00:27:51,409 --> 00:27:53,460
users in your location on a map

386
00:27:53,460 --> 00:27:57,309
down to the sub you know five ten foot
region they got this meant that any

387
00:27:57,309 --> 00:28:01,809
tender user can be tracked
indiscriminately right to the last time

388
00:28:01,809 --> 00:28:05,720
I want to talk about it again this is
how long the Starbucks app it's kind of

389
00:28:05,720 --> 00:28:09,919
interesting because you don't think this
would be one collecting your information

390
00:28:09,919 --> 00:28:15,970
and then 22 leaking but turns out that
it was again a report from the Guardian

391
00:28:15,970 --> 00:28:20,600
illustrated that some leaked document
indicated that government agencies were

392
00:28:20,600 --> 00:28:24,559
actually targeting the specific out
because it didn't leak location

393
00:28:24,559 --> 00:28:29,090
information and we're using this to
track users interests I think this

394
00:28:29,090 --> 00:28:34,250
really hits home the fact that any act
even you know stupid app that you play

395
00:28:34,250 --> 00:28:35,690
while on the back room

396
00:28:35,690 --> 00:28:40,830
can be collecting your information and
then if it is transmitting and securely

397
00:28:40,830 --> 00:28:45,610
like in this case it was the government
will be watching or maybe watching so no

398
00:28:45,610 --> 00:28:50,519
not the lake steering won by just again
reiterate the fact that you location is

399
00:28:50,519 --> 00:28:52,830
really sensitive and there are people
out there who are trying to collect

400
00:28:52,830 --> 00:28:57,779
right now is gonna talk about an app
that was vulnerable to a myriad of

401
00:28:57,779 --> 00:29:01,110
geolocation vulnerabilities kind of a
lot of the classes I just talked about

402
00:29:01,110 --> 00:29:05,379
that cumulatively allowed us to track
any of its users anytime anywhere in the

403
00:29:05,379 --> 00:29:06,809
world

404
00:29:06,809 --> 00:29:12,039
thanks Patrick so we've talked about how
these locations on Billy's occur but

405
00:29:12,039 --> 00:29:15,539
what are the real world applications so
we surveyed a lot of applications out

406
00:29:15,539 --> 00:29:19,809
there and the side of the one called
Grindr was the ideal candidate to its

407
00:29:19,809 --> 00:29:26,440
ridiculously bad use of information so
what is Grindr according to the website

408
00:29:26,440 --> 00:29:30,309
it's the largest and most popular
all-male location-based social network

409
00:29:30,309 --> 00:29:33,769
out there more than five million guys in
a hundred ninety two countries around

410
00:29:33,769 --> 00:29:37,730
the world and approximately 10,000 more
New Years new users downloading the app

411
00:29:37,730 --> 00:29:42,840
everyday bottom line the office based
completely around knowing who's near you

412
00:29:42,840 --> 00:29:46,029
extremely popular and caters to a
demographic that has a history of being

413
00:29:46,029 --> 00:29:50,149
targeted 33 to be a good look to take a
good idea to take a look from user

414
00:29:50,149 --> 00:29:55,178
privacy standpoint so to begin our
assessment will check to see if there

415
00:29:55,179 --> 00:29:57,059
are any previous owner bill is published

416
00:29:57,059 --> 00:30:02,168
publicized and sure enough there was a
while back in 2012 abnormality was

417
00:30:02,169 --> 00:30:06,070
discovered that allowed impersonation
impersonation of users as well as

418
00:30:06,070 --> 00:30:12,639
sensitive data compromise 2013 graduate
school paper revealed more concerns

419
00:30:12,639 --> 00:30:17,840
around user enumeration impersonation
and identification recently we published

420
00:30:17,840 --> 00:30:20,980
our assessment which was the first to
bring up the issue of location privacy

421
00:30:20,980 --> 00:30:25,679
and we'll talk about that for a minute
and then eventually down the road after

422
00:30:25,679 --> 00:30:30,100
all this summer and leaked a similar
vulnerability to pay spin which will

423
00:30:30,100 --> 00:30:36,399
also talk about more so one of the
developers do wrong number

424
00:30:36,399 --> 00:30:41,139
there's no telling at all in the
application so I'm animal attack is easy

425
00:30:41,139 --> 00:30:45,668
enough he was provided with way way way
too much accuracy really down to the

426
00:30:45,669 --> 00:30:48,970
foot level locations moving to the
server

427
00:30:48,970 --> 00:30:52,890
server was trivial they didn't do any
filtering and if you guys were overly

428
00:30:52,890 --> 00:30:58,600
permissive really no authentication like
that and then all data was filtered on

429
00:30:58,600 --> 00:31:02,350
the UI level as well so basically
everything everything we just talked

430
00:31:02,350 --> 00:31:09,610
about so the first bug you noticed that
I was application doesn't NSL serves as

431
00:31:09,610 --> 00:31:15,330
pastor talked about earlier this makes
it much easier to pull off an attack and

432
00:31:15,330 --> 00:31:20,030
differentials you know as we we show
here in the screenshot so using a man

433
00:31:20,030 --> 00:31:23,389
the proxy you were able to take
advantage of the slack missus opening to

434
00:31:23,390 --> 00:31:27,450
examine the application protocol and
reverse engineer it in order to build

435
00:31:27,450 --> 00:31:36,090
our own custom grounder number two on
running running the app increase our

436
00:31:36,090 --> 00:31:40,570
server and pulls down a series of JSON
blobs for every single user nearby and

437
00:31:40,570 --> 00:31:45,379
bob is the user's profile information
the problem here is that the distance

438
00:31:45,380 --> 00:31:49,490
field provides us with extremely precise
relative distance to this is shown here

439
00:31:49,490 --> 00:31:55,809
is inclined matters and it's down to the
substance I guess this opens up the

440
00:31:55,809 --> 00:32:01,908
possibility of a terrorist attack so we
report these bugs to Grindr while back

441
00:32:01,909 --> 00:32:03,179
and made some changes

442
00:32:03,179 --> 00:32:08,919
unfortunately the changes fact look at
the disassembly of the newest newest iOS

443
00:32:08,919 --> 00:32:13,760
app you can see the location accuracy is
set to 10 metres of precision the

444
00:32:13,760 --> 00:32:18,450
problem with this is is that a 10 metres
position is still enough to identify you

445
00:32:18,450 --> 00:32:22,140
know where someone lives works whatever
and with the setting your guarantee that

446
00:32:22,140 --> 00:32:27,240
the result is within 10 metres not ten
metres of error so we found that a

447
00:32:27,240 --> 00:32:32,039
generally represents about three metres
a position which is still pretty good so

448
00:32:32,039 --> 00:32:35,120
it would've been nice if some of these
mobile apps and introduce some ran

449
00:32:35,120 --> 00:32:40,110
America Canada and jitter and some
uncertainty in the results so this image

450
00:32:40,110 --> 00:32:46,289
here showing Patrick testing the app in
his office and the location was within

451
00:32:46,289 --> 00:32:52,559
about three feet so one of the bigger
problems we saw was that the FBI would

452
00:32:52,559 --> 00:32:56,850
accept our performance from an
authorized user so basically can say we

453
00:32:56,850 --> 00:33:00,820
were here and why within one minute in
Africa the next and literally made

454
00:33:00,820 --> 00:33:01,850
dozens Greece

455
00:33:01,850 --> 00:33:06,030
reduction so there's no rate limiting or
distance limiting on the changes and

456
00:33:06,030 --> 00:33:12,629
that opened up again the possibility of
coloration so for them or no

457
00:33:12,630 --> 00:33:16,120
authentication was required to talk two
grounders a guy's really like none at

458
00:33:16,120 --> 00:33:21,070
all and the amount of course is pretty
much a dream for someone who wanted to

459
00:33:21,070 --> 00:33:26,600
scrape a ton of data really really fast
and using this became trivial to renew

460
00:33:26,600 --> 00:33:30,639
my users and pull down everyone's
profile info containing name height

461
00:33:30,640 --> 00:33:35,970
weight and relative distance and social
media profiles so grandeur has since

462
00:33:35,970 --> 00:33:40,330
implemented authentication Harbor
setting up an account takes just seconds

463
00:33:40,330 --> 00:33:47,399
and there's no email confirmation and so
by passing this really is the trip so

464
00:33:47,400 --> 00:33:53,270
we'll examine the JSON data from other
users we found something on there is a

465
00:33:53,270 --> 00:33:58,320
key titled show distance and sometimes
he was set to false but distances were

466
00:33:58,320 --> 00:34:02,570
still in the JSON data so it turns out
that the UI on the phone with what was

467
00:34:02,570 --> 00:34:08,040
doing the filtering decide whether or
not to display location did so in short

468
00:34:08,040 --> 00:34:11,429
did was being broadcast and everyone
just not displayed and with a little

469
00:34:11,429 --> 00:34:18,450
sadness I was hard to do it so you can
see how upsetting was implemented in

470
00:34:18,449 --> 00:34:24,379
addition we have all these seemingly
minor vulnerabilities me out what kind

471
00:34:24,379 --> 00:34:28,040
of real-world attacker do this data so
we decided to read a framework that

472
00:34:28,040 --> 00:34:33,629
leverages bugs to just find ourselves
you know how much trouble to go any

473
00:34:33,629 --> 00:34:36,600
further I should know that the purpose
of this research was not to identify

474
00:34:36,600 --> 00:34:40,668
Grindr users but to help protect those
that wish to remain private and that

475
00:34:40,668 --> 00:34:45,350
during the final research and disclosure
no unwilling users were intentionally or

476
00:34:45,350 --> 00:34:49,589
unintentionally identified in the audit
log during this has been completely

477
00:34:49,590 --> 00:34:54,570
destroyed so based on the bugs were
found with you is that we should be able

478
00:34:54,570 --> 00:34:58,710
to track to any user at any given time
the FBI was wide open

479
00:34:58,710 --> 00:35:02,280
extremely precise geolocation
information and locations building was

480
00:35:02,280 --> 00:35:08,230
dead easy so how does a person need to
engineer the data gathering component

481
00:35:08,230 --> 00:35:11,890
interfaces basically just scrape all the
date out

482
00:35:11,890 --> 00:35:15,910
there so based on location we can down
load and parse specific data about users

483
00:35:15,910 --> 00:35:20,240
especially specifically interesting
interested in getting that distance

484
00:35:20,240 --> 00:35:26,319
parameter for different users are able
to suck down the user information to

485
00:35:26,320 --> 00:35:30,310
determine what use are nearby we we need
to wait it out to locate them as the

486
00:35:30,310 --> 00:35:34,840
trial operation comes into play to do
this we gathered distances and inform an

487
00:35:34,840 --> 00:35:40,490
operation in short duration of the
method of determining an absolute

488
00:35:40,490 --> 00:35:45,669
location based on three or more relative
distances so first we speak our location

489
00:35:45,670 --> 00:35:48,650
three times around allocation of
interest like let's say around the

490
00:35:48,650 --> 00:35:53,310
island here and we here at various
specific user is relative location from

491
00:35:53,310 --> 00:35:58,620
a lender earth earth being a spear
distances are measured longest

492
00:35:58,620 --> 00:36:02,770
conference so if you can read this
distance is accordingly may not them to

493
00:36:02,770 --> 00:36:08,420
a spherical coordinate system and
calculations ultimately after a lot of

494
00:36:08,420 --> 00:36:11,100
math teacher be happy to provide some
code or go through if you guys wanna try

495
00:36:11,100 --> 00:36:18,830
this at home were able to determine the
user's actual standard accordance so now

496
00:36:18,830 --> 00:36:22,160
that we have a way to determine location
what's running on a massive scale maps

497
00:36:22,160 --> 00:36:27,960
users so share screenshots from a things
early last year showing is San Francisco

498
00:36:27,960 --> 00:36:32,110
and the Sochi Olympics so just a sanity
check

499
00:36:32,110 --> 00:36:35,570
you can see all users fall within the
land masses and tend to be in densely

500
00:36:35,570 --> 00:36:39,520
populated areas as brings up some really
interesting privacy issues especially

501
00:36:39,520 --> 00:36:43,820
for you know prominent figures may be
granted under users you know what if

502
00:36:43,820 --> 00:36:48,890
you're an athlete at the Sochi Olympics
or a politician movie star or using

503
00:36:48,890 --> 00:36:53,109
Chinese vendor didn't honestly you might
not want the media or public to be

504
00:36:53,110 --> 00:36:56,260
involved outside life especially if you
wish for your sexual preference is to

505
00:36:56,260 --> 00:36:57,140
remain private

506
00:36:57,140 --> 00:37:01,690
it's very conceivable to think that
someone can watch specifications such as

507
00:37:01,690 --> 00:37:07,380
maybe you s capital White House to
determine specific user identities to

508
00:37:07,380 --> 00:37:11,350
turn their data from which the purposes
so but we'll talk more about that in a

509
00:37:11,350 --> 00:37:17,040
minute for tests at the area we tracked
some willing users of the times a week

510
00:37:17,040 --> 00:37:22,870
and sure enough a lot of patterns emerge
more often than not we observe that for

511
00:37:22,870 --> 00:37:24,790
each user there are dozens of data plan

512
00:37:24,790 --> 00:37:30,820
its but they tend to map to two
different locations and those tend to be

513
00:37:30,820 --> 00:37:35,640
the home and work locations occasionally
and see if it stops short look at gym or

514
00:37:35,640 --> 00:37:39,350
the grocery store so any screenshots
here you can see the kind of accuracy or

515
00:37:39,350 --> 00:37:44,259
getting I mean it really falling within
someone's house or occasionally get a

516
00:37:44,260 --> 00:37:50,430
pretty good so let's take it one step
further we know we can track you are

517
00:37:50,430 --> 00:37:55,359
some members who are you so first we
have the geolocation information which

518
00:37:55,360 --> 00:37:59,560
tends to be scary accurate let's combine
that with public record sources such as

519
00:37:59,560 --> 00:38:04,049
home ownership databases for all
occasions and LinkedIn profiles for work

520
00:38:04,050 --> 00:38:07,470
locations and becomes really is and
guess who works and lives in a specific

521
00:38:07,470 --> 00:38:08,480
area

522
00:38:08,480 --> 00:38:12,910
suitability his identity is gonna users
tend to share a lot of personal info

523
00:38:12,910 --> 00:38:18,440
including name photos age height weight
etc I'm not to mention a lot of users

524
00:38:18,440 --> 00:38:21,950
tend to share of social media profiles
as well and they're in their grandpa

525
00:38:21,950 --> 00:38:27,140
bottles so we conducted tests using this
method on summer willing to spend nearly

526
00:38:27,140 --> 00:38:30,790
a hundred percent success rate in
determining you know their identities of

527
00:38:30,790 --> 00:38:34,890
who they were so even if you wish to
remain anonymous which a lot of Grindr

528
00:38:34,890 --> 00:38:40,410
users do this method can still be used
to reveal their identity so as I

529
00:38:40,410 --> 00:38:44,319
mentioned earlier what's your public
figure using Grindr how at risk are you

530
00:38:44,320 --> 00:38:48,960
we're approached a while back by aus
government official who does upset for

531
00:38:48,960 --> 00:38:52,400
the senate and he was concerned for our
various representatives and he thought

532
00:38:52,400 --> 00:38:55,940
they needed to view this information for
any any social media and sharing out

533
00:38:55,940 --> 00:38:58,500
there looking at and sure enough he was
right

534
00:38:58,500 --> 00:39:04,040
most recently an anti-gay North Dakota
representative was found to be a grander

535
00:39:04,040 --> 00:39:08,500
user and as well as a married anti-gay
pastor who ended up resigning over the

536
00:39:08,500 --> 00:39:12,490
scandal and there they were they were
expose users so really it's conceivable

537
00:39:12,490 --> 00:39:15,689
to think that someone politically
motivated can use these techniques to

538
00:39:15,690 --> 00:39:20,180
further their agenda and damaged his
reputation as a master at a house of

539
00:39:20,180 --> 00:39:28,129
cards some killer stuff so we disclose
the grinder and stressed the urgency of

540
00:39:28,130 --> 00:39:31,790
his own abilities even provided not
right up here sees but in the end they

541
00:39:31,790 --> 00:39:35,930
refused to fix anything and end quote
them we do not view this as a security

542
00:39:35,930 --> 00:39:36,500
flaw

543
00:39:36,500 --> 00:39:41,680
so it kept silent and we went for pics
and urging them to fix it but ultimately

544
00:39:41,680 --> 00:39:44,750
as with all things about it

545
00:39:44,750 --> 00:39:49,360
Anonymous hacker posted it to post a POC
to pay its been awhile ago tired huddled

546
00:39:49,360 --> 00:39:54,790
under fails to protect our USERs and
they demoed how you can use the same

547
00:39:54,790 --> 00:39:59,110
functionality attract users to Grindr
passport a couple days and turns out

548
00:39:59,110 --> 00:40:02,890
that Egyptian officials began using the
use this bug to track down and arrest

549
00:40:02,890 --> 00:40:07,920
game since the beach it's illegal to be
in Egypt Saudi security bugs every day

550
00:40:07,920 --> 00:40:10,640
and sometimes it's hard to imagine that
there's an actual real-world impact

551
00:40:10,640 --> 00:40:15,859
people and see something like this
really drive that point home while some

552
00:40:15,860 --> 00:40:21,710
of these seemingly minor bugs are
actually quite serious so after all the

553
00:40:21,710 --> 00:40:23,610
bad news and social pressure

554
00:40:23,610 --> 00:40:27,390
undecided rather handed to fix user
settings for sharing location and data

555
00:40:27,390 --> 00:40:29,490
within the upper respected

556
00:40:29,490 --> 00:40:33,390
fencing has been implemented in Egypt in
other countries where it's illegal to be

557
00:40:33,390 --> 00:40:39,319
gay event location sharing from work
authorization is now required and their

558
00:40:39,320 --> 00:40:44,790
set their GPS accuracy to the nearest
computers but you know as our most

559
00:40:44,790 --> 00:40:48,210
recent tests indicated that's all
pending issues that need to be fixed the

560
00:40:48,210 --> 00:40:52,300
FBI's employ almost zero security
railing and special occasions it still

561
00:40:52,300 --> 00:40:56,000
possible realistically you can still do
this on some level in certain areas

562
00:40:56,000 --> 00:41:01,840
result attract users with an accuracy
and still likely find out their

563
00:41:01,840 --> 00:41:08,440
identities alright so hows location that
we're up to deliver what can you do not

564
00:41:08,440 --> 00:41:11,580
fall into this trap and for users what
can you do to protect yourself

565
00:41:11,580 --> 00:41:16,799
users you really just need to assume you
can be tracked accept that risk and act

566
00:41:16,800 --> 00:41:20,020
accordingly if you really paranoid drill
down into a location preference is my

567
00:41:20,020 --> 00:41:25,170
phone and turn off location sharing or
perhaps or for a specific level that's

568
00:41:25,170 --> 00:41:29,350
really the only way to guarantee your
privacy and developers really do

569
00:41:29,350 --> 00:41:32,770
everything to Patrick talked about you
know you secure communication and do it

570
00:41:32,770 --> 00:41:36,450
right there's no reason not to protect
your API is no think of the edge cases

571
00:41:36,450 --> 00:41:41,109
think of the abuse cases use correct you
I level object don't do your filtering

572
00:41:41,110 --> 00:41:46,370
their schedule service I'd used your
local stories lately not that hard and

573
00:41:46,370 --> 00:41:49,000
don't share any more precise geolocation
information

574
00:41:49,000 --> 00:41:56,040
need to come out I really appreciate you
telling our talk to questions and

575
00:41:56,040 --> 00:42:00,270
comments and afterwards we have over
there is an actress for giving away a

576
00:42:00,270 --> 00:42:05,430
free pair sailing trips if you guys want
that job by and take a stab at it

577
00:42:05,430 --> 00:42:13,649
thank you questions comments

578
00:42:13,650 --> 00:42:34,220
back

579
00:42:34,220 --> 00:42:37,930
yes I think conceptually a lot of the
same things up I like the insecure

580
00:42:37,930 --> 00:42:41,140
storage or securing the columns I don't
do a lot of Android devs I don't know

581
00:42:41,140 --> 00:42:44,879
exactly how that works but again I would
start by you know sniffing a network

582
00:42:44,880 --> 00:42:48,570
traffic see you know our Geolocation

583
00:42:48,570 --> 00:42:55,080
being sent and securely or what happens
if you change your location so I would

584
00:42:55,080 --> 00:42:58,619
guess the there similarly functionally
equivalent

585
00:42:58,619 --> 00:43:01,820
abilities but I think it's something
that should definitely be looked at like

586
00:43:01,820 --> 00:43:05,750
the grinder case a lot of the issues
were in the server-side API's where

587
00:43:05,750 --> 00:43:10,880
anyone can connect to them so that's the
vulnerability that you know I S or

588
00:43:10,880 --> 00:43:17,970
agnostic Android Android app military
attacks the exact same API and really

589
00:43:17,970 --> 00:43:48,848
that's where the most ultimately lies
here

590
00:43:48,849 --> 00:43:54,680
exactly like you said you don't want to
share your location the best way is to

591
00:43:54,680 --> 00:43:58,190
go into the wireless settings the OS
level settings and turn off location

592
00:43:58,190 --> 00:44:02,259
sharing for that app in the App can
access that but like you said a lot of

593
00:44:02,259 --> 00:44:06,859
apps that use your location kind of
become useless so unfortunately there's

594
00:44:06,859 --> 00:44:10,808
not this kind of level where you can
kind of pick and choose even the apps

595
00:44:10,809 --> 00:44:15,499
that might let you do that as we showed
a lot of bugs you know the precise

596
00:44:15,499 --> 00:44:19,578
information if you enjoy a broken phone
I think there's a couple apps out there

597
00:44:19,579 --> 00:44:25,269
that lets you spoof your your your GPS
location and so you can manually set

598
00:44:25,269 --> 00:44:29,109
that and just you know how to know
either relates the app and hopefully

599
00:44:29,109 --> 00:44:33,249
still use some of them optionality get
hacked his you have a jailbroken phone

600
00:44:33,249 --> 00:44:44,319
hacking team

601
00:44:44,320 --> 00:44:49,800
sure sir so we we talk about the
question was you know that Apple you

602
00:44:49,800 --> 00:44:54,810
know when they get your act tough
looking for this so that Apple and find

603
00:44:54,810 --> 00:44:58,670
out that they've pretty much only care
are you using legitimate you guys are

604
00:44:58,670 --> 00:45:01,850
you not willingly trying to do something
malicious so these are all more like

605
00:45:01,850 --> 00:45:06,160
developer shortcomings you know some
people who argue that even even teachers

606
00:45:06,160 --> 00:45:11,920
so Apple you know doesn't really care
about them because it's you know that's

607
00:45:11,920 --> 00:45:15,100
built into the app and they're not
really in the business of looking at you

608
00:45:15,100 --> 00:45:16,839
know for code level under abilities

609
00:45:16,840 --> 00:45:21,830
basically making sure do you get here to
their guidelines

610
00:45:21,830 --> 00:45:26,230
outside here that are most all out so
using occasion some way or another so

611
00:45:26,230 --> 00:45:29,400
it's really up to you to you know pick
and choose who you actually trust you

612
00:45:29,400 --> 00:45:31,770
know do you trust the random developer
to do something right

613
00:45:31,770 --> 00:45:42,690
probably not a real questions often guys
will hopefully see you all again next

614
00:45:42,690 --> 00:45:42,920
year

