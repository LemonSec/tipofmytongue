1
00:00:12,410 --> 00:00:15,540
talk

2
00:00:15,540 --> 00:00:22,200
Android boot firmware specifically in
recovery mode and hopefully learn some

3
00:00:22,200 --> 00:00:28,110
things so nice to meet you I'm drew I'm
a security consultant for NCC group

4
00:00:28,110 --> 00:00:32,879
formerly modisana security I focused
mainly and mobile security and research

5
00:00:32,880 --> 00:00:37,890
I build Android firmware for dozens of
devices probably fifty plus at this

6
00:00:37,890 --> 00:00:38,930
point

7
00:00:38,930 --> 00:00:43,320
part of the open-source side of the
CyanogenMod projects are built and

8
00:00:43,320 --> 00:00:48,950
maintained the wiki the teaches you how
to exploit your phone and puts him on it

9
00:00:48,950 --> 00:00:53,790
if you'd like or any other operating
system and Michael guy internet handle

10
00:00:53,790 --> 00:00:56,370
as you want to follow along

11
00:00:56,370 --> 00:01:03,000
get over anything like that so what is
this all about the questions is why do I

12
00:01:03,000 --> 00:01:07,079
need this what's what's interesting
about this for security

13
00:01:07,079 --> 00:01:11,158
talk about that we're going to talk
about what Google recovery is going to

14
00:01:11,159 --> 00:01:16,329
talk about how to do what we call device
mapping which means you have a device

15
00:01:16,329 --> 00:01:19,830
you are the owner may be a brand new
device that nobody's worked on and you

16
00:01:19,830 --> 00:01:25,250
want to sort of cases like figure out
how the internals work gonna do some

17
00:01:25,250 --> 00:01:29,610
firmware inspection looking at some
little firmware figure out how it works

18
00:01:29,610 --> 00:01:34,090
and then we're going to talk about how
you can flash which you just learn how

19
00:01:34,090 --> 00:01:41,820
to build on your own so what is Android
recovery this is a the stock recovery is

20
00:01:41,820 --> 00:01:45,520
on pretty much every shipping Android
device and you kind of have to do what

21
00:01:45,520 --> 00:01:49,600
we call it the grip of death to access
it there's usually a button combination

22
00:01:49,600 --> 00:01:54,080
that will boot you into the specific
mode lots of devices have multiple blue

23
00:01:54,080 --> 00:02:00,009
moves typically recovery is bound to one
of those and the socially a very

24
00:02:00,010 --> 00:02:05,600
minimalistic like Linux environment that
boots boots up the kernel typically the

25
00:02:05,600 --> 00:02:10,869
same kernel is like what boots the wrong
and it's very empathic the stock

26
00:02:10,869 --> 00:02:14,780
recovery will basically lets you do a
factory reset if you've screwed

27
00:02:14,780 --> 00:02:18,299
something up terribly with an Android
which will clear out the user data

28
00:02:18,299 --> 00:02:23,170
partition in the cache partition and
it's also used to install signed over

29
00:02:23,170 --> 00:02:24,609
the updates

30
00:02:24,610 --> 00:02:30,100
from your carrier from your OEM so
whenever you get like a new new version

31
00:02:30,100 --> 00:02:34,810
of Android it boots to recovery to
install and then boot back up sometimes

32
00:02:34,810 --> 00:02:39,670
you'll get anybody access which is the
Android debug bridge but usually not

33
00:02:39,670 --> 00:02:43,109
and even if you do it's pretty useless
because the stock recovery is very

34
00:02:43,110 --> 00:02:47,470
limited in what it lets you do so

35
00:02:47,470 --> 00:02:51,670
custom recovery is provided redox us
most importantly but they also can

36
00:02:51,670 --> 00:02:57,070
contain any useful by near that she won
so if you need a specific tool and you

37
00:02:57,070 --> 00:03:00,780
want to be able to work with Android in
a state where it's not booted but you

38
00:03:00,780 --> 00:03:04,860
still need to unpack the file systems
that run it that's a great place to do

39
00:03:04,860 --> 00:03:05,739
that

40
00:03:05,739 --> 00:03:10,380
it also allows for easy backup of a
central firmware so if you're messing

41
00:03:10,380 --> 00:03:14,380
around with your phone it's really good
to have like a standard backup of all

42
00:03:14,380 --> 00:03:17,400
the images they were messing with just
in case he breaks something and need to

43
00:03:17,400 --> 00:03:22,830
restore it back and provide sort of like
the scriptable installation platform for

44
00:03:22,830 --> 00:03:27,500
custom Android there's a there's a
scripting language called identify and

45
00:03:27,500 --> 00:03:30,560
using that you can do all sorts of
interesting things like change

46
00:03:30,560 --> 00:03:34,019
permissions on files and start things to
specific places and you can automate

47
00:03:34,019 --> 00:03:39,090
that so it's it's really useful for for
that kind of thing so why is the

48
00:03:39,090 --> 00:03:43,400
significant I think this question will
be answered the the longer the tacos on

49
00:03:43,400 --> 00:03:48,470
and it'll be the impact will be more
significant but you know right off the

50
00:03:48,470 --> 00:03:52,870
bat they provide a means to investigate
and modify and testing new firmware so

51
00:03:52,870 --> 00:03:56,940
it's a great sort of little bootstrap
platform and in many cases it gives you

52
00:03:56,940 --> 00:04:03,720
full control over device so what is this
for 10 any of the specifically this is

53
00:04:03,720 --> 00:04:07,040
great for like penetration testing it's
great to have like a snapshot of the

54
00:04:07,040 --> 00:04:10,429
platform you're working on before you
start making changes to so you know you

55
00:04:10,430 --> 00:04:15,959
can roll back if you need to screen for
forensics and data acquisition will be

56
00:04:15,959 --> 00:04:20,030
more slides on that towards the end but
also a means to bypass security controls

57
00:04:20,029 --> 00:04:24,580
so if somebody leaves her phone in a
Starbucks or whatever and they have a

58
00:04:24,580 --> 00:04:29,180
lock screen and they've elected not to
encrypt their user data partition you

59
00:04:29,180 --> 00:04:30,910
can simply just boot

60
00:04:30,910 --> 00:04:35,800
and believe that a lot of cases so by
passing this kind of controls and it's

61
00:04:35,800 --> 00:04:38,740
also really useful for testing and
development of custom Android

62
00:04:38,740 --> 00:04:43,990
installations as well so how do I make
one of these things so what we need to

63
00:04:43,990 --> 00:04:49,230
do is map out the device topology and
full we need to get the kernel source

64
00:04:49,230 --> 00:04:55,000
for or the pre-built colonel just so you
have sort of like a working on image and

65
00:04:55,000 --> 00:04:59,100
then we need to build what's called like
an Android device configuration and I'll

66
00:04:59,100 --> 00:05:07,370
show you that I'm coming here so
Blubaugh recovery I got into this

67
00:05:07,370 --> 00:05:11,330
basically because I realized I was sort
of a UNIX admin for many many years

68
00:05:11,330 --> 00:05:16,300
before getting into security and this is
basically a little Linux box so I knew

69
00:05:16,300 --> 00:05:20,870
how that sort of stuff worked and it
helped me get into a lot more thanks for

70
00:05:20,870 --> 00:05:26,550
that one life of money should be
dressing Park reference so every device

71
00:05:26,550 --> 00:05:32,350
is kind of a unique snowflake as we like
to say so they're sort of the canonical

72
00:05:32,350 --> 00:05:36,650
example of this is Samsung sold a phone
call the Galaxy S two and I think

73
00:05:36,650 --> 00:05:41,310
there's like 15 variants of that phone
so the name the salesman devices

74
00:05:41,310 --> 00:05:45,430
entirely useless and in determining like
what's actually in it because they

75
00:05:45,430 --> 00:05:49,750
resell vary vastly different hardware
and configurations under the same name

76
00:05:49,750 --> 00:05:53,580
in a lot of cases and this is sort of
changing for the better it's it's

77
00:05:53,580 --> 00:05:58,240
becoming more modern but it you can
never really trust like if someone says

78
00:05:58,240 --> 00:06:02,340
hey I have a gal test who you need to
ask more questions about it because the

79
00:06:02,340 --> 00:06:05,989
partition layout is probably different
and you will probably break it if you

80
00:06:05,990 --> 00:06:11,470
have the wrong one so it's it's
interesting to see like the variations

81
00:06:11,470 --> 00:06:16,580
that are out there so the parts and
structure of a recovery image

82
00:06:16,580 --> 00:06:20,680
talk about like the two most popular
they'll see in the wild there are a lot

83
00:06:20,680 --> 00:06:25,150
of variance out there this some very
interesting variants but the most

84
00:06:25,150 --> 00:06:29,549
typical is what we just an initial
ramdisk image what we call it a standard

85
00:06:29,550 --> 00:06:33,860
boot image it has like an end reboot
router it's got the current like the

86
00:06:33,860 --> 00:06:37,180
kernel itself and then you have like an
initial ramdisk is part of that image

87
00:06:37,180 --> 00:06:42,260
Samsung for many years of use this next
I'll called and it rang off a style

88
00:06:42,260 --> 00:06:43,590
which basically means that

89
00:06:43,590 --> 00:06:49,119
Rambis has compiled into the kernel and
you just flash the image itself there's

90
00:06:49,120 --> 00:06:54,180
no other part of the image this is
obviously like not great because the

91
00:06:54,180 --> 00:06:58,030
whole point of recovery is that you can
modify things and have a working kernel

92
00:06:58,030 --> 00:07:02,719
when you're done if you flash trying to
get a custom recovery and you fail

93
00:07:02,720 --> 00:07:06,270
you've lost your ability to boot the
wrong as well so like this was

94
00:07:06,270 --> 00:07:11,190
originally done to save space on on
flash memory where they could just share

95
00:07:11,190 --> 00:07:16,110
one partition for this but like this is
largely changed and Samsung stop doing

96
00:07:16,110 --> 00:07:22,020
this but you still run into the Sun many
many devices out there from that era in

97
00:07:22,020 --> 00:07:25,590
the majors like kind of the third
variant here that Sony still uses called

98
00:07:25,590 --> 00:07:29,679
like it it's the same ideas the NMFS
where it shared one partition but it's

99
00:07:29,680 --> 00:07:34,890
actually just a normal boot image like
you would see on most phones and again

100
00:07:34,890 --> 00:07:39,729
basically just sharing one partition to
save space here so you kind of look at

101
00:07:39,730 --> 00:07:45,220
how this is very typical images are
built you've got your boo her your

102
00:07:45,220 --> 00:07:49,010
kernel your RAM disk and then I've sort
of called out it's a little hard to read

103
00:07:49,010 --> 00:07:55,690
their like sluts 10 and 11 are used for
DB's which is like device reblogged by

104
00:07:55,690 --> 00:08:00,510
street binary depending on who you ask
but these are becoming more and more

105
00:08:00,510 --> 00:08:06,380
popular on images such that they don't
have to write an entirely new kernel

106
00:08:06,380 --> 00:08:10,680
they can just attach the interesting
bits that are different in DTD file on

107
00:08:10,680 --> 00:08:17,020
top of the image so for example the
Galaxy Note 3 what's available in many

108
00:08:17,020 --> 00:08:21,150
markets but had sort of just different
DTB files and sort of like a whole brand

109
00:08:21,150 --> 00:08:26,729
new kernel image and stuff like NFC
wi-fi differ between even these variants

110
00:08:26,730 --> 00:08:31,930
in like those things are kind of
capturing their so the the initial

111
00:08:31,930 --> 00:08:36,960
ramdisk works very you know identically
still a Linux box it loads a temporary

112
00:08:36,960 --> 00:08:41,960
root filesystem in the memory it only
has very minimal files specifically used

113
00:08:41,960 --> 00:08:46,450
for the recovery mode operation there is
a whole host of the init scripts in here

114
00:08:46,450 --> 00:08:51,830
and a packaged in a binary that that
comes as part of that and this can be

115
00:08:51,830 --> 00:08:54,910
rebuilt or modified typically

116
00:08:54,910 --> 00:09:00,199
recommends building this from source but
a lot of times you don't have kernel

117
00:09:00,200 --> 00:09:04,370
source or you're in a situation where
you have been around style where you

118
00:09:04,370 --> 00:09:08,510
can't just modify it you have to
actually rebuild it so it is possible on

119
00:09:08,510 --> 00:09:12,380
site and some very weird edge cases to
modify an existing image but almost

120
00:09:12,380 --> 00:09:17,210
always it's too happy to deal with and
you should just build from source so

121
00:09:17,210 --> 00:09:22,590
also in the recovery is a is a file
everything including and less than

122
00:09:22,590 --> 00:09:27,200
Android 422 jelly bean how to file
called recovery.gov estab- and this is

123
00:09:27,200 --> 00:09:31,500
identical to the atty office tab that
you would see on a Linux box just sort

124
00:09:31,500 --> 00:09:35,720
of maps and block devices and the
filesystem types to specific point in

125
00:09:35,720 --> 00:09:40,520
this usually lives in the AFC folder
within the ramdisk or sometimes Reds on

126
00:09:40,520 --> 00:09:47,250
an order HTC and Samsung year the newer
style is estab- . platform so examples

127
00:09:47,250 --> 00:09:52,240
of a fast abdic you calm or efforts have
done MSME 974 for that particular

128
00:09:52,240 --> 00:09:58,410
Snapdragon processor and you see this
after Andrew 4.3 is this is sort of like

129
00:09:58,410 --> 00:10:02,650
the newer style that they've moved to
pretty much works identically but

130
00:10:02,650 --> 00:10:05,280
there's a slightly different mapping
order so something to keep in mind

131
00:10:05,280 --> 00:10:10,270
depending on if you're building one of
this so it's time to begin sort of

132
00:10:10,270 --> 00:10:13,810
casing this device so that we can build
our own recovery so what's what's the

133
00:10:13,810 --> 00:10:16,180
bare minimum we need to get this thing
off the ground

134
00:10:16,180 --> 00:10:22,620
the stock firmware is is extremely
helpful for this because you know it has

135
00:10:22,620 --> 00:10:27,640
like the exact time is that your phone
is booting already you know that the Z

136
00:10:27,640 --> 00:10:31,180
imagine there is good and it's going to
boot your device so it helps to start

137
00:10:31,180 --> 00:10:33,670
with like minimal variables so you have
this working

138
00:10:33,670 --> 00:10:38,060
firmware and it's also great to just
kind of pull it apart and figure out how

139
00:10:38,060 --> 00:10:41,310
it works it's also you're coming up so
there's there's actually a lot of sites

140
00:10:41,310 --> 00:10:44,619
that host this kind of stuff or if you
have a rooted device you can deceive

141
00:10:44,620 --> 00:10:49,000
didi to dump the partition you're
interested in and you know it's really

142
00:10:49,000 --> 00:10:54,010
useful for like troubleshooting weird
facts that people have done to make

143
00:10:54,010 --> 00:10:58,620
things work and get into that more but
more so just to build yourself a device

144
00:10:58,620 --> 00:11:03,420
stop all Jeter and of course the kernel
source I just mentioned you basically

145
00:11:03,420 --> 00:11:07,310
have to have this friend around my style
images it's also really useful for

146
00:11:07,310 --> 00:11:08,130
making a card

147
00:11:08,130 --> 00:11:12,660
smaller so for example many many older
devices only gave you like five

148
00:11:12,660 --> 00:11:16,520
megabytes for recovery so if you're
trying to build something fully featured

149
00:11:16,520 --> 00:11:21,340
in a lot of interesting binaries for
whatever you need to do your not gonna

150
00:11:21,340 --> 00:11:24,600
have a lot of space on these older
devices so if you have the kernel source

151
00:11:24,600 --> 00:11:28,810
you can walk out a bunch of stuff you
don't need for recovery to make that act

152
00:11:28,810 --> 00:11:32,729
that output in the image smaller so that
you can fit more of your own tools in

153
00:11:32,730 --> 00:11:37,330
the ramdisk and you know these obviously
be modified for anything you need to do

154
00:11:37,330 --> 00:11:43,010
so that's also hopeful we'll talk about
a file called build-up prop so this is

155
00:11:43,010 --> 00:11:48,640
in the system of Andrade and this
contains certain parameters and all the

156
00:11:48,640 --> 00:11:52,260
various different options you can pass
so there's a lot of stuff in here but

157
00:11:52,260 --> 00:11:56,520
what specifically were most interested
in is the device-specific board code

158
00:11:56,520 --> 00:12:00,930
name and so this kind of goes back to
the the Galaxy S two example I mention

159
00:12:00,930 --> 00:12:04,099
where that that means nothing to us we
need to know that the board name itself

160
00:12:04,100 --> 00:12:07,970
so that's that's a perimeter called out
in this build prop file and that's how

161
00:12:07,970 --> 00:12:14,000
we identify and and and name of devices
by the Board code name if they were nice

162
00:12:14,000 --> 00:12:19,800
and left you a property MMC Europe rock
and TV you can get the partition mapping

163
00:12:19,800 --> 00:12:23,170
directly from that and that will give
you the block of ice and like what it

164
00:12:23,170 --> 00:12:25,579
does so that's really helpful for when
you're trying to build one of these

165
00:12:25,580 --> 00:12:30,310
gorgeous figure out where things are on
the device and then the property shins

166
00:12:30,310 --> 00:12:34,939
output will give you the block sizes so
you can sort of compute how big each of

167
00:12:34,940 --> 00:12:38,030
those partitions are supposed to be and
this is also really useful for making

168
00:12:38,030 --> 00:12:43,630
sure your coverage fits in the space
allocated and then you know if you can

169
00:12:43,630 --> 00:12:46,800
find the kernel source you can at least
get the death configure the device a lot

170
00:12:46,800 --> 00:12:51,040
of times I've seen them strip this out
more and more recently in but you can

171
00:12:51,040 --> 00:12:56,610
usually get it in the kernel source
dropping become much better about that

172
00:12:56,610 --> 00:12:59,850
you know a couple years ago was really
hard to get them to post kernel source

173
00:12:59,850 --> 00:13:02,670
on time or be like six months later

174
00:13:02,670 --> 00:13:08,240
bad so let's let's let's look at how to
take apart some of these former images

175
00:13:08,240 --> 00:13:11,130
here

176
00:13:11,130 --> 00:13:15,390
so here we have a look at the standard
and you can see the cold out there in

177
00:13:15,390 --> 00:13:20,090
orange is this Android bang this
basically tells tells us this is a

178
00:13:20,090 --> 00:13:25,260
bootable Android firmware image
afterwards you see if there's a kernel

179
00:13:25,260 --> 00:13:29,620
command line its past as well and I've
also highlighted that an orange this is

180
00:13:29,620 --> 00:13:32,240
something that you should definitely
replicated when you're building your own

181
00:13:32,240 --> 00:13:37,270
image because it probably won't work if
you don't pass this specific values at a

182
00:13:37,270 --> 00:13:40,170
time but if you're certain to look at
some of these image you can use

183
00:13:40,170 --> 00:13:43,550
something like bottled up to make sure
like ok we can clearly see this is an

184
00:13:43,550 --> 00:13:51,189
Android so talk about a couple tools the
first one on pat to demand justice is an

185
00:13:51,190 --> 00:13:57,010
order tool that's largely been surpassed
by its by this other tool that but still

186
00:13:57,010 --> 00:14:00,790
kind of give you this usage share so
basically taking the firmware image and

187
00:14:00,790 --> 00:14:06,630
output to wherever and then you seek at
to pump the ramdisk the cpio to explode

188
00:14:06,630 --> 00:14:10,010
it out and this will give you sort of
like the actual files that are contained

189
00:14:10,010 --> 00:14:14,600
in there and ask the newer tool that
supports much more in the way of

190
00:14:14,600 --> 00:14:19,520
different boot firmware image types is
called make boot and I'm sort of keep

191
00:14:19,520 --> 00:14:22,569
these so you can look in their efforts
to get source code for these files but

192
00:14:22,570 --> 00:14:26,810
this is essentially very similar idea
just takes the boot image breaks a

193
00:14:26,810 --> 00:14:31,040
departing gives you like the stuff they
are interested in there is also the

194
00:14:31,040 --> 00:14:34,880
impact and it ran fast shell script but
somebody wrote out there is a jerk

195
00:14:34,880 --> 00:14:38,820
struct this out of you know an older
style Samsung phone but we're kind of

196
00:14:38,820 --> 00:14:43,820
talking about that and then there's
always good all been walk if if all

197
00:14:43,820 --> 00:14:47,910
these tools are failing you can sort of
locate ok this looks like a ramdisk all

198
00:14:47,910 --> 00:14:52,380
use db2 snagless out and then look at
the files that way so I had to do that

199
00:14:52,380 --> 00:14:57,590
on a few devices that just have very
random non-standard set-ups so you're

200
00:14:57,590 --> 00:15:01,800
kind of a look at how many boot works
I've highlighted the interesting

201
00:15:01,800 --> 00:15:05,910
parameters again in orange so you always
really wanted to record the kernel page

202
00:15:05,910 --> 00:15:11,699
size because you have to make your image
follow this format most of them are 2048

203
00:15:11,700 --> 00:15:18,100
HTC specifically users 4096 and then you
have weird one off like a rocket ship

204
00:15:18,100 --> 00:15:23,330
which are like 16 384 some horrendous
I'd like that but you you definitely

205
00:15:23,330 --> 00:15:24,250
want to match that

206
00:15:24,250 --> 00:15:28,100
your imagery won't boot at all and then
the other really important thing here is

207
00:15:28,100 --> 00:15:32,410
the ramdisk offset because if if it
cannot find this renders give you time

208
00:15:32,410 --> 00:15:37,180
to get like a nice black screen and you
have a sad face that you've broken your

209
00:15:37,180 --> 00:15:40,280
ability of feature phone so you
definitely want to match that offset so

210
00:15:40,280 --> 00:15:45,370
that your renders get loads of that
address and then the DTB image I'm I

211
00:15:45,370 --> 00:15:48,460
mentioned earlier it will also extract
that blog for you so that you can

212
00:15:48,460 --> 00:15:52,190
reattach it when you build your own
image and then of course the command

213
00:15:52,190 --> 00:15:57,260
line I just mention that we saw in the
dumps there is also called out here so

214
00:15:57,260 --> 00:16:00,850
our goal is really to get the RAM disk
and a working pre-built image like

215
00:16:00,850 --> 00:16:05,100
that's the place to start if you want to
start building the stuff the ramdisk as

216
00:16:05,100 --> 00:16:08,790
I mentioned contains really important
init scripts custom scripts and binaries

217
00:16:08,790 --> 00:16:13,589
we want in order to make our device work
and as you'll see coming up the init

218
00:16:13,590 --> 00:16:17,560
scripts are very useful for finding
exploits and devices because they're not

219
00:16:17,560 --> 00:16:22,650
written very well and a lot of cases so
why are these init scripts so important

220
00:16:22,650 --> 00:16:28,199
they're great source for bugs this is
there's so many out there especially

221
00:16:28,200 --> 00:16:32,960
like in the last few years that have
these sort of classic UNIX attacks like

222
00:16:32,960 --> 00:16:38,570
some like attacks coming back and still
being very active they're very overly

223
00:16:38,570 --> 00:16:44,800
permissive permissions you'll see stuff
that's just a modest 777 or some other

224
00:16:44,800 --> 00:16:48,750
world writable you know set up there and
you also see a lot of debug

225
00:16:48,750 --> 00:16:52,800
functionality exposed you know we've
seen like just sockets that have been

226
00:16:52,800 --> 00:16:56,839
opened that are can be nothing else but
like a backdoor basically so like these

227
00:16:56,839 --> 00:17:01,510
is that it's a really interesting to
look through and look for flaws but

228
00:17:01,510 --> 00:17:04,140
they're also really useful in helping
you build your own tools because you

229
00:17:04,140 --> 00:17:07,760
sometimes you need to emulate what
they're doing in there and they're in at

230
00:17:07,760 --> 00:17:13,720
Scripps before you can move on there's
also things like watchdog demons that

231
00:17:13,720 --> 00:17:16,410
you'll see in the ramdisk and all that
kind of talk more about those coming up

232
00:17:16,410 --> 00:17:22,120
but you get a lot of parameters and and
basic information from these files so

233
00:17:22,119 --> 00:17:26,550
let's look at a couple examples here
these are reprinted with kind permission

234
00:17:26,550 --> 00:17:31,100
from my friend Jay case and these have
all been pat's I feel comfortable

235
00:17:31,100 --> 00:17:35,320
sharing these of you but here's a kind
of an example of where these things can

236
00:17:35,320 --> 00:17:36,669
fall down for you so

237
00:17:36,670 --> 00:17:42,260
there is a directory that's created with
777 permissions and there's also a file

238
00:17:42,260 --> 00:17:47,050
called middot text printed in the same
way so knowing that we have these files

239
00:17:47,050 --> 00:17:53,990
in the data file system we can push I
read export it to a local rights because

240
00:17:53,990 --> 00:17:57,590
we have full right access to that
directory because of this the sarin

241
00:17:57,590 --> 00:18:03,439
permission thing we can rename existing
file again because of its world writable

242
00:18:03,440 --> 00:18:07,340
we have the permission to change that
filing the data file system then we can

243
00:18:07,340 --> 00:18:13,280
do something like something the event
helped her to text and essentially this

244
00:18:13,280 --> 00:18:18,200
is a colonel helper that will execute
anything in the context of rude and this

245
00:18:18,200 --> 00:18:23,790
is sort of been patched to not do that
anymore but this is alive and well lots

246
00:18:23,790 --> 00:18:28,129
and lots of devices out there and so now
we just sort of basically a Kor read

247
00:18:28,130 --> 00:18:32,780
exploit into you event helper and it
excludes in the context of route and now

248
00:18:32,780 --> 00:18:39,530
have a person because of this so now you
have a call itself another example from

249
00:18:39,530 --> 00:18:44,500
HTC here again we have an overly
permissive directory of this is also

250
00:18:44,500 --> 00:18:50,320
created with some 77 and then we have a
log file in here which is 666 world

251
00:18:50,320 --> 00:18:58,000
writable inexcusable so what can we do
with this again we can remove the

252
00:18:58,000 --> 00:19:02,910
existing file because it's world
writable we can simply data local not

253
00:19:02,910 --> 00:19:06,860
proper to this log file and you know
when I mentioned that build a proper

254
00:19:06,860 --> 00:19:11,409
earlier this is how Android reason all
these parameters it will also respecting

255
00:19:11,410 --> 00:19:16,940
local data version so you can override
what's in the system with the file so

256
00:19:16,940 --> 00:19:21,480
now we can reboot to recovery where
these files are actually executed and

257
00:19:21,480 --> 00:19:26,890
there's a string here that sells ATB
that we are running an emulator so that

258
00:19:26,890 --> 00:19:34,480
anybody should restart is read so we can
echo the RO colonel Qumu 12 this file to

259
00:19:34,480 --> 00:19:39,530
retrieve and anybody will temporarily
reboot with root capabilities so this

260
00:19:39,530 --> 00:19:43,480
gives you kind of like a one-off shell
but you can use that shell to make it

261
00:19:43,480 --> 00:19:47,190
more persistent route if you like

262
00:19:47,190 --> 00:19:50,040
so you know what else is interesting in
this file so I sort of mentioned

263
00:19:50,040 --> 00:19:55,000
watchdog demons this is something that
needs to park every interval of second

264
00:19:55,000 --> 00:19:59,490
so I've seen it thirty seconds I've seen
it all up to 10 minutes if it doesn't

265
00:19:59,490 --> 00:20:03,650
check in at that time it will just rip
the car back from you and reboot so this

266
00:20:03,650 --> 00:20:07,940
is not a great thing to have happen to
you if you're doing some work on your

267
00:20:07,940 --> 00:20:11,390
device and it just shut off in the
middle of that you can can lead to bad

268
00:20:11,390 --> 00:20:15,200
things so these are things that you have
to replicate in your images there's also

269
00:20:15,200 --> 00:20:20,980
sometimes like necessary colonel objects
so the pic on rock chip a little bit

270
00:20:20,980 --> 00:20:24,690
because they're crazy but they do things
like wedge

271
00:20:24,690 --> 00:20:28,810
64 on top of lake in MTG flash Tobias
and they wrote their own light flash

272
00:20:28,810 --> 00:20:32,889
translation layer to do this this
requires their custom kernel objects to

273
00:20:32,890 --> 00:20:36,390
be learned it or you just have no
storage whatsoever so this gets a little

274
00:20:36,390 --> 00:20:41,070
hairy in terms of like making that stuff
work but you see some horrible things

275
00:20:41,070 --> 00:20:45,100
out there was also some time some
special commands are you might run

276
00:20:45,100 --> 00:20:48,560
across in these files are not always but
it's interesting to take a look at them

277
00:20:48,560 --> 00:20:54,300
anyway so what happens if I can figure
something out if your liking firmware

278
00:20:54,300 --> 00:20:59,190
and you really don't have a lot to go on
you can do a little man you

279
00:20:59,190 --> 00:21:03,600
investigation using adb shell even with
like the limited privileges that that

280
00:21:03,600 --> 00:21:08,179
will give you you can look at mount in
at least identify like three in the key

281
00:21:08,180 --> 00:21:12,130
partitions of the things that you can
get system user data and cache typically

282
00:21:12,130 --> 00:21:16,710
and then you can really just look at the
sizes and property shins and make an

283
00:21:16,710 --> 00:21:20,160
educated guess for firmware locations so
if you see something that's in like the

284
00:21:20,160 --> 00:21:24,430
five to twenty megabyte range that's a
good candidate for a boot image they're

285
00:21:24,430 --> 00:21:27,550
not going to give it more space than
that and they can't give it lasts at

286
00:21:27,550 --> 00:21:31,770
this point so you can kind of make
educated guesses on Lake ok this is

287
00:21:31,770 --> 00:21:35,270
probably what I'm looking for and then
you can dump that investigated further

288
00:21:35,270 --> 00:21:42,260
we're talking now about how to build one
of these things Android build system is

289
00:21:42,260 --> 00:21:46,070
based on that good meal ordering concept
so it's sort of like when you roll to

290
00:21:46,070 --> 00:21:51,560
McDonalds and you have like the one
through 12 combo options each device is

291
00:21:51,560 --> 00:21:55,810
a unique combo meal that we need to load
into our built environment and you

292
00:21:55,810 --> 00:21:58,010
should also know that combos can also
inherit

293
00:21:58,010 --> 00:22:02,360
from one another so if you have like a
common core that like 10 devices share

294
00:22:02,360 --> 00:22:06,010
you might need to also replicate that if
someone's already done this work for you

295
00:22:06,010 --> 00:22:09,430
look at the inheritance of these make
files and make sure that you have

296
00:22:09,430 --> 00:22:13,640
everything you need and essentially what
we're trying to do is build a new combo

297
00:22:13,640 --> 00:22:16,890
we're gonna put your favorite sandwich
on the menu so that you can start

298
00:22:16,890 --> 00:22:23,820
ordering it so how do we build one of
these you can use the CyanogenMod source

299
00:22:23,820 --> 00:22:28,950
or any a great source out there have
linked some examples here you need Linux

300
00:22:28,950 --> 00:22:32,870
or OSX to do this and I've seen people
attempt this and windows but i dont give

301
00:22:32,870 --> 00:22:38,719
myself enough to try that and we need
all of the info that we've gathered in

302
00:22:38,720 --> 00:22:44,810
his previous sections here so there's a
handy little script

303
00:22:44,810 --> 00:22:51,080
vendor that will generate a very
skeletons are bare-bones confirm config

304
00:22:51,080 --> 00:22:55,720
for you to start working with it takes
three parameters as you can see it's

305
00:22:55,720 --> 00:22:59,870
usually the OEM named the board name
that we found out earlier and then a

306
00:22:59,870 --> 00:23:03,360
bootable image of any kind so it can be
the recovery can be the kernel boot

307
00:23:03,360 --> 00:23:07,229
image whatever you want to use for that
in this particular case this is the

308
00:23:07,230 --> 00:23:14,190
tmobile edition of the Galton 03 so
unfortunately make vendor output is

309
00:23:14,190 --> 00:23:18,880
always wrong and pretty incomplete so it
gives you the files you need to get

310
00:23:18,880 --> 00:23:23,560
going but it it almost always needs like
custom attention paid to it so don't

311
00:23:23,560 --> 00:23:28,190
take what it generates for you at face
value because it's not gonna build but

312
00:23:28,190 --> 00:23:32,160
I'll talk about the three most important
files that generated here which are the

313
00:23:32,160 --> 00:23:36,620
the board config the the fstab I
mentioned earlier and then there's a

314
00:23:36,620 --> 00:23:41,860
device codenamed make file that gets
generated so here we can see this is the

315
00:23:41,860 --> 00:23:48,270
the Droid DNA I believe on Verizon and I
sort of marked with an X the files that

316
00:23:48,270 --> 00:23:50,200
make vendor generates for you

317
00:23:50,200 --> 00:23:53,170
everything else in there is something
that I added as part of trying to get

318
00:23:53,170 --> 00:23:58,560
this recovery the kind of boot up on it
but it gives you a good example of like

319
00:23:58,560 --> 00:24:03,220
here's what's yours was generated and
now go fix it basically so we'll talk

320
00:24:03,220 --> 00:24:07,120
about the port config itself this can
see contains the essential information

321
00:24:07,120 --> 00:24:09,580
about your devices board the CPU

322
00:24:09,580 --> 00:24:14,120
roots of various hardware contain like
wi-fi and Bluetooth and stuff like that

323
00:24:14,120 --> 00:24:19,889
and other device specific oddities so if
there's like sort of you see a lot of

324
00:24:19,890 --> 00:24:23,920
these hacks that vendors have put out
there that you can have to replicate in

325
00:24:23,920 --> 00:24:26,880
your board configs to make things work
properly

326
00:24:26,880 --> 00:24:30,800
this report is absolutely like the most
modification in this file continually

327
00:24:30,800 --> 00:24:33,990
grows the more you build out so if
you're if your goal is just to build a

328
00:24:33,990 --> 00:24:37,800
recovery like it's pretty minimal but if
you want to get Android built completely

329
00:24:37,800 --> 00:24:43,169
from source this is gonna continually
evolve and have more and more stuff

330
00:24:43,170 --> 00:24:46,850
added to it as time goes on and drove
through the scope of the stock I'm only

331
00:24:46,850 --> 00:24:50,169
gonna talk about the basics for recovery
but there's there's plenty more out

332
00:24:50,170 --> 00:24:56,420
there that you need so particular
interest of us are making sure that this

333
00:24:56,420 --> 00:24:59,620
renders cost that is set properly sort
of mentioned that earlier when we were

334
00:24:59,620 --> 00:25:04,110
talking about the may crude output but
the first perimeter is largely

335
00:25:04,110 --> 00:25:07,729
deprecated these days but if you working
on an older device this is the perimeter

336
00:25:07,730 --> 00:25:11,010
that you need to set and this is the
address called out by make movies you

337
00:25:11,010 --> 00:25:15,210
have to set properly the more modern
version of this is called make bernard's

338
00:25:15,210 --> 00:25:19,880
and this is really important larger
partitions where you're putting

339
00:25:19,880 --> 00:25:23,230
something smaller back so if you're
building your recovery it's not going to

340
00:25:23,230 --> 00:25:26,890
take the full extent of that partition
the Rambus is going to be totally offset

341
00:25:26,890 --> 00:25:31,720
improperly unless you force it with the
Makefile here and again as I mentioned

342
00:25:31,720 --> 00:25:35,320
that that first parameters largely dead
after four point one but you still

343
00:25:35,320 --> 00:25:41,510
sometimes see if you're building for
older phones the device-specific make

344
00:25:41,510 --> 00:25:46,230
file here lets you basically take images
and the Rambus can put them where they

345
00:25:46,230 --> 00:25:49,530
need to be in your compiler output so if
you want to put your own tools and hear

346
00:25:49,530 --> 00:25:53,470
something that's not standard or that
something you want to add to your image

347
00:25:53,470 --> 00:25:58,290
this perimeter or this file will allow
you to map where this is in the combo

348
00:25:58,290 --> 00:26:02,610
and like where it needs to be when the
image is built and so this is sort of

349
00:26:02,610 --> 00:26:06,350
essential for like emulating these OEM
specific oddities like I mentioned or

350
00:26:06,350 --> 00:26:09,899
like like a watchdog diamond for example
if you need to copy that into the

351
00:26:09,900 --> 00:26:11,900
ramdisk

352
00:26:11,900 --> 00:26:16,710
at compile time or won't work so this is
the way to do that and then we want to

353
00:26:16,710 --> 00:26:21,010
build it so using lunch to go with this
whole convo ordering

354
00:26:21,010 --> 00:26:25,680
scheme they decided on we sort of
loading the built environment we run

355
00:26:25,680 --> 00:26:29,870
lunch on the device that you just
created and then you can run make

356
00:26:29,870 --> 00:26:33,419
recovery image there's lots of other
make targets out there but for the

357
00:26:33,420 --> 00:26:37,980
purposes of the stock this is the most
common one feel free to browse that make

358
00:26:37,980 --> 00:26:43,060
filing and look at all the other stuff
you can do with those so then we want to

359
00:26:43,060 --> 00:26:46,960
test it i mean i think a lot of a lot of
like really dumb mistakes can be caught

360
00:26:46,960 --> 00:26:50,800
just by investigating the firmware you
just built similarly to how you looked

361
00:26:50,800 --> 00:26:54,639
at the stock image so if you're Rambis
has offset improperly for example

362
00:26:54,640 --> 00:26:58,680
there's no reason to flash that year to
buy some potentially break it you can

363
00:26:58,680 --> 00:27:01,630
easily catch that era before you do it
so make sure you kind of look at these

364
00:27:01,630 --> 00:27:05,890
things compared to stock and then also
make sure if it's like if you build

365
00:27:05,890 --> 00:27:08,770
something that's too big for that
partition and he tried flashing you have

366
00:27:08,770 --> 00:27:17,310
a bad time so make sure that the sizes
is working there so common issues this

367
00:27:17,310 --> 00:27:20,629
is really what it feels like to work on
one of these sometimes you just mash the

368
00:27:20,630 --> 00:27:24,860
keyboard and homeworks but you're
probably not going to get a bit on your

369
00:27:24,860 --> 00:27:28,860
first try I think more realistically you
won't and there's some common reasons

370
00:27:28,860 --> 00:27:31,689
why I won't really get too much into
these kinds of other stuff to talk about

371
00:27:31,690 --> 00:27:37,010
but you know stuff like the offsets
wrong the kernel page sizes wrong and

372
00:27:37,010 --> 00:27:41,890
it's misconfigured there some weirdo
impacting on emulating or you forgot to

373
00:27:41,890 --> 00:27:46,020
attach a DTD file or it's wrong for the
wrong device so it just won't be

374
00:27:46,020 --> 00:27:51,480
properly alright so no flashes here's
the interesting part so how do we get

375
00:27:51,480 --> 00:27:55,290
this onto a phone because I'm sure a lot
of your thinking well there's a lot of

376
00:27:55,290 --> 00:27:58,570
protections that the prevention from
writing these kind of firmware is out

377
00:27:58,570 --> 00:28:04,679
and how do we do that so there's good
old ed sort of obviously requires root

378
00:28:04,680 --> 00:28:07,880
but you can kind of refer back to the
portion of the stock for some ideas on

379
00:28:07,880 --> 00:28:10,750
how you might be able to obtain that on
your device

380
00:28:10,750 --> 00:28:15,820
the flash image binary is is pretty well
deprecated now because most devices

381
00:28:15,820 --> 00:28:20,740
don't ship with MDD / anymore but this
will basically just taken the perimeter

382
00:28:20,740 --> 00:28:26,440
of the image in the partitioning 15 sure
to do that for you and then these last

383
00:28:26,440 --> 00:28:29,910
three of them the interesting ones will
talk about there's the Samsung specific

384
00:28:29,910 --> 00:28:31,299
download mode

385
00:28:31,299 --> 00:28:35,668
there's fastboot witch hunter lot of you
may be familiar with and they're sort of

386
00:28:35,669 --> 00:28:40,080
this newcomer laugh which is named
properly because it's hilarious and this

387
00:28:40,080 --> 00:28:46,590
is for most modern LG devices at this
point are vulnerable to this silly

388
00:28:46,590 --> 00:28:51,519
little boat here so let's talk about
download mode first this is a Samsung

389
00:28:51,519 --> 00:28:57,389
specific boot mode how many guys have
samsung phones how many of you encrypt

390
00:28:57,389 --> 00:29:06,269
your data ok maybe like two after seeing
this so as I mentioned down Moses him

391
00:29:06,269 --> 00:29:11,950
some specific bootloader interface it
shipped on all of their devices requires

392
00:29:11,950 --> 00:29:15,450
specific naming of images which can be a
little tedious but it's not really that

393
00:29:15,450 --> 00:29:20,309
bad and internally Samsung use a tool
called out in to interact with this

394
00:29:20,309 --> 00:29:25,499
unfortunately this is a Windows on the
clothes horse application that leaked

395
00:29:25,499 --> 00:29:32,119
from Samsung internally and assuming you
don't have something on Verizon or AT&T

396
00:29:32,119 --> 00:29:38,789
which actually does enforce boot image
signing of their international phones

397
00:29:38,789 --> 00:29:42,869
and phones on other carriers have this
mode and this is essentially like a

398
00:29:42,869 --> 00:29:47,980
super permissible so let's take a look
at the Odeon this is a terrible piece of

399
00:29:47,980 --> 00:29:51,320
software but sometimes you need it
sometimes the device just won't work

400
00:29:51,320 --> 00:29:55,899
without this will talk about the
alternative coming up here but this

401
00:29:55,899 --> 00:29:59,408
essentially takes in the file you want
to flash and just pushes it right to the

402
00:29:59,409 --> 00:30:06,820
biller for you so interestingly requires
a you star format at our archive

403
00:30:06,820 --> 00:30:11,200
containing the desired firmware which is
kind of amusing because there's no real

404
00:30:11,200 --> 00:30:16,039
native way to do this and in Windows
which is what I wouldnt runs in so I can

405
00:30:16,039 --> 00:30:20,519
have to do this with a third party to or
Xbox or something like that and then

406
00:30:20,519 --> 00:30:25,179
transferred over but here's how to make
one so you can essentially put whatever

407
00:30:25,179 --> 00:30:30,409
file you wanna hear you just create the
new store format archive loading get

408
00:30:30,409 --> 00:30:34,389
really cranky if there's not an Indy 500
attacks sometimes sometimes it doesn't

409
00:30:34,389 --> 00:30:37,809
matter but it doesn't hurt to do this is
like a stabbing a little work either way

410
00:30:37,809 --> 00:30:43,320
so generate the summit at the end of the
tar and then rename it to talk about it

411
00:30:43,320 --> 00:30:48,740
25 and now you have a file that's ready
to go so the naming gonna say mentioned

412
00:30:48,740 --> 00:30:52,400
is very important here so recovery that
image has to be called that can't be

413
00:30:52,400 --> 00:30:56,180
called anything else if you want to do a
Buddha image similarly that has to be

414
00:30:56,180 --> 00:31:00,650
called be done and she can't name
anything else or just flip out and say

415
00:31:00,650 --> 00:31:05,600
no I'm not going to do this for you so
the alternative to open its called

416
00:31:05,600 --> 00:31:10,860
heimdal made by this Australian guy and
this is great because it's cross

417
00:31:10,860 --> 00:31:15,149
platform it was created by reversing
what does and this will work on any

418
00:31:15,150 --> 00:31:19,400
operating system it also doesn't have
silly restrictions on naming and it's

419
00:31:19,400 --> 00:31:23,740
capable flashing right images directly
so you don't need like it you start our

420
00:31:23,740 --> 00:31:27,390
file you can just break the image you're
interested in and obviously that makes

421
00:31:27,390 --> 00:31:32,560
this much more flexible and useful than
the note and so we don't see kind of the

422
00:31:32,560 --> 00:31:38,020
obvious problems here this is extremely
overly permissive most devices allowing

423
00:31:38,020 --> 00:31:41,720
direct write access to the partition in
question here there's a there's a

424
00:31:41,720 --> 00:31:46,670
handful of us' models that are protected
against this as I mentioned but that's

425
00:31:46,670 --> 00:31:50,900
definitely like the outlier but the the
majority of these you can read directly

426
00:31:50,900 --> 00:31:55,370
to the device and there are newer
protections for this to protect against

427
00:31:55,370 --> 00:32:00,280
it but they're extremely in consistently
applied so for the most part if you have

428
00:32:00,280 --> 00:32:05,420
one of these devices have something to
think about your talk about fastboot

429
00:32:05,420 --> 00:32:11,070
model but prosecutors is the most common
interface will see its found on the

430
00:32:11,070 --> 00:32:19,600
Nexus devices HTC Sony motorola's using
this now many other fast food is is

431
00:32:19,600 --> 00:32:23,919
great in that you can actually test and
image before you flash it the device so

432
00:32:23,920 --> 00:32:27,810
if you just run fast boot boot and the
name of the image it will download it

433
00:32:27,810 --> 00:32:31,690
from your PC into memory and boot it and
then you don't waste a flashlight call

434
00:32:31,690 --> 00:32:34,820
but you also more importantly don't
overwrite it was something that doesn't

435
00:32:34,820 --> 00:32:39,340
work so it's a good way to test things
unfortunately unlocking the bootloader

436
00:32:39,340 --> 00:32:44,139
to use fastboot most often erases the
user data partition which is a lot of

437
00:32:44,140 --> 00:32:50,570
times what we're interested in that is
unless you have many public use

438
00:32:50,570 --> 00:32:56,590
ability using so little colonel from
from Qualcomm has has had a lot of

439
00:32:56,590 --> 00:33:01,899
problems in the past that would allow
you to bypass this lock or various other

440
00:33:01,899 --> 00:33:08,399
things so the first one they just forgot
to check the image was assigned so that

441
00:33:08,399 --> 00:33:10,059
was an interesting one

442
00:33:10,059 --> 00:33:16,519
the next one's a little bit more cheese
to pull off uses a cube root attack sort

443
00:33:16,519 --> 00:33:19,679
of the ignition follow that up as a
little complicated excuse but you can

444
00:33:19,679 --> 00:33:22,909
forge a signature on your image and get
it to boot something that's not signed

445
00:33:22,909 --> 00:33:27,090
and the last one is relatively new

446
00:33:27,090 --> 00:33:31,279
they didn't check the balance for sparse
images so when they flash system as part

447
00:33:31,279 --> 00:33:34,100
of an image they don't actually check
like where that supposed to and so you

448
00:33:34,100 --> 00:33:41,428
can right past the barrier and impact
other partitions on the device so we've

449
00:33:41,429 --> 00:33:46,889
talked about download and fastboot so
let's look at laugh this is a relatively

450
00:33:46,889 --> 00:33:55,070
new thing there's a bootable partition
names last night was found on many LG

451
00:33:55,070 --> 00:34:00,590
devices what surprised me the most was
this is also on the Nexus 5 there is

452
00:34:00,590 --> 00:34:03,830
communication that's possible when you
get to this mode caught with with a

453
00:34:03,830 --> 00:34:07,360
binary code send command and send
command takes one perimeter which is the

454
00:34:07,360 --> 00:34:12,409
comport that your device is plugged into
and it basically drops you to original

455
00:34:12,409 --> 00:34:17,669
on the device so this is pretty clearly
a backdoor you know I think they

456
00:34:17,668 --> 00:34:21,020
probably use it for diagnostics are
flashing firmware but like if you just

457
00:34:21,020 --> 00:34:25,270
leave a root shell out there that's not
a great idea so here is like an image of

458
00:34:25,270 --> 00:34:30,069
that inaction on the Nexus 5 again sorry
that's hard to read but you basically

459
00:34:30,069 --> 00:34:36,429
just run some command past the poorer
and now you can see we have a rich so

460
00:34:36,429 --> 00:34:39,950
lastly to talk a little bit about
friends ex-cons circling back to what we

461
00:34:39,949 --> 00:34:43,819
were talking about earlier there's a
group of German guys came up with the

462
00:34:43,819 --> 00:34:49,159
store called frost which is the forensic
recovery of scrambled telephones this is

463
00:34:49,159 --> 00:34:52,829
based on a custom recovery that is very
popular based on the ClockworkMod

464
00:34:52,829 --> 00:34:58,069
recovery but this can be used to
retrieve encryption keys pin codes stuff

465
00:34:58,069 --> 00:35:01,640
stored in RAM and actually uses like
quite literally a cold

466
00:35:01,640 --> 00:35:07,200
attack they figured out that if you put
a phone in the freezer it slows down the

467
00:35:07,200 --> 00:35:10,669
degradation of RAM enough to you can
actually quickly boot into this mode and

468
00:35:10,670 --> 00:35:16,150
snag things out of out of what was left
in RAM this is the AES key find binary

469
00:35:16,150 --> 00:35:21,549
you can do this live or you can also
just dump the contents of RAM to your PC

470
00:35:21,549 --> 00:35:27,190
and run it there and this just looks
more like a key signatures and sizes and

471
00:35:27,190 --> 00:35:31,740
stuff like that there's also work being
done with like the volatility framework

472
00:35:31,740 --> 00:35:39,720
in line which is like the Linux memory
he stands for but basically you can view

473
00:35:39,720 --> 00:35:43,709
the contents of RAM so this is a in
another interesting way to potentially

474
00:35:43,710 --> 00:35:49,880
recover somebody it's like pattern or
pin lock code so what's being done about

475
00:35:49,880 --> 00:35:54,710
this sort of stuff new protections so we
now have in a context for your kind of

476
00:35:54,710 --> 00:35:58,380
seeing rolling out some things that are
executed it in time don't necessarily

477
00:35:58,380 --> 00:36:02,329
run as root anymore there's sort of
segregated into like other service

478
00:36:02,329 --> 00:36:05,619
levels so you're not gonna be able to
execute a lot of these like interesting

479
00:36:05,619 --> 00:36:10,910
attacks anymore because of that there's
things like Knox and secure boot which

480
00:36:10,910 --> 00:36:14,299
is coming out on more and more models
unfortunately this is largely useless at

481
00:36:14,299 --> 00:36:18,299
this time except for the models I
mention that are protecting verifying

482
00:36:18,299 --> 00:36:22,680
the signatures but it were still get
like a nag screen saying hey your boots

483
00:36:22,680 --> 00:36:27,180
been tampered with and you'll see it for
maybe two seconds as the phone reboot so

484
00:36:27,180 --> 00:36:30,819
let's not not something that's going to
really stick out in somebody's mind if

485
00:36:30,819 --> 00:36:36,279
if this has been done to their device
now they're they're sort of wrapping the

486
00:36:36,279 --> 00:36:40,910
device encryption key with with the idea
from trusts own or like any trusted

487
00:36:40,910 --> 00:36:45,808
execution environment so this prevents
you from attacking like off the device

488
00:36:45,809 --> 00:36:49,259
essentially like you need you need to do
it on the phone now for trying to brute

489
00:36:49,259 --> 00:36:54,049
force things because you need that you
that I D

490
00:36:54,049 --> 00:36:58,630
you know increased St Lenox presence
there doing things like blocking your

491
00:36:58,630 --> 00:37:03,180
view interest like / dev now which is
totally pointless it's going to slow you

492
00:37:03,180 --> 00:37:04,750
down a little bit but not much

493
00:37:04,750 --> 00:37:09,470
productions like p.m. varity this is

494
00:37:09,470 --> 00:37:14,000
really not ruled out in production yet
it's probably something that's coming

495
00:37:14,000 --> 00:37:20,130
but this does like a basically like a
shot 256 of every block of the system

496
00:37:20,130 --> 00:37:24,750
partition and if any of those blocks
have changed it will just refused to

497
00:37:24,750 --> 00:37:28,770
boot so this kind of kills your ability
to you modify system for a persistent

498
00:37:28,770 --> 00:37:32,460
worries however if you have the ability
to override boot images like we just

499
00:37:32,460 --> 00:37:39,960
talked about you could just fly on
without being buried in it so is also

500
00:37:39,960 --> 00:37:43,510
forcing crypt which is the sad face
because this this was supposed to roll

501
00:37:43,510 --> 00:37:48,599
out with lollipop and then Google kind
of change their mind and said well no

502
00:37:48,599 --> 00:37:52,660
it's still option also know that the OEM
is really did it I think like the next

503
00:37:52,660 --> 00:37:57,649
six and the Nexus 9 ship with this but
pretty much everything else just started

504
00:37:57,650 --> 00:38:02,220
optional so that's something you the
user would have to enable themselves

505
00:38:02,220 --> 00:38:07,299
which is not as likely unless you're
security-conscious

506
00:38:07,300 --> 00:38:11,380
getting started get hope is there for
your friend it's more than likely that

507
00:38:11,380 --> 00:38:14,849
the monarchy done this work for you
first were particularly device so you

508
00:38:14,849 --> 00:38:21,849
can find these to this combo this device
can figure out their own get home I

509
00:38:21,849 --> 00:38:26,859
mentioned many many sites hosts like
stock Android firmware images so if

510
00:38:26,859 --> 00:38:30,819
you're looking for a Samsung specific
things same firmware dot com is a good

511
00:38:30,820 --> 00:38:35,520
place for that of course the ex XDA
forums always people always post like

512
00:38:35,520 --> 00:38:40,790
stock images and stuff like that out
there so setting up your built

513
00:38:40,790 --> 00:38:43,460
environment I put like a pretty good
guys out there on the scene with the

514
00:38:43,460 --> 00:38:47,130
talks you through like all the packages
you need to get started with us you

515
00:38:47,130 --> 00:38:50,570
don't have to use him source you can use
whatever you want but this is a good

516
00:38:50,570 --> 00:38:55,030
guide for you know I'm using a Linux box
use the tools they need to do it

517
00:38:55,030 --> 00:39:01,880
successfully compile carefully review
the links in my references section some

518
00:39:01,880 --> 00:39:04,800
links to source code and more
information about some of these CDs we

519
00:39:04,800 --> 00:39:10,050
talked about and then also just want to
mention the Droid SEC community if you

520
00:39:10,050 --> 00:39:15,210
guys are interested in Android security
this is a pretty good group of guys and

521
00:39:15,210 --> 00:39:18,540
there's like an IRC channel and a site
so there's there's always really

522
00:39:18,540 --> 00:39:21,110
interesting talking like new exploits
are coming

523
00:39:21,110 --> 00:39:27,750
out or or what people are working on its
good to follow up there so here's the

524
00:39:27,750 --> 00:39:34,510
reference section yes can take a look at
that earlier or later rather so that's

525
00:39:34,510 --> 00:39:41,100
all I have just want to thank Chaka Khan
Chaka Khan for hosting and it's been a

526
00:39:41,100 --> 00:39:45,860
wonderful wonderful experience any
questions please let me know or find me

527
00:39:45,860 --> 00:39:52,950
afterwards anytime during the call and
we can chat about whatever you like any

528
00:39:52,950 --> 00:40:12,580
questions

529
00:40:12,580 --> 00:40:21,360
not really I have built to force a phone
like for example like a lot of Samsung

530
00:40:21,360 --> 00:40:26,060
phones you can force into download mode
if you can actually get it to boot that

531
00:40:26,060 --> 00:40:31,820
way by shorting like 650 kilometres
across the ground and I deepen so I have

532
00:40:31,820 --> 00:40:36,570
like a little breadboard and just kind
of USB cable and then it just boosts the

533
00:40:36,570 --> 00:40:40,060
phone immediately into download mode but
that pretty much a USB cable and a

534
00:40:40,060 --> 00:40:43,890
little bit of extra extra torso
otherwise now that's that's the main

535
00:40:43,890 --> 00:40:51,330
communication

536
00:40:51,330 --> 00:40:51,900
yes

