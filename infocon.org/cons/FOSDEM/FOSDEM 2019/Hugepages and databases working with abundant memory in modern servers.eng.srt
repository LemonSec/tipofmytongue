1
00:00:04,640 --> 00:00:10,489
so today I'm going to present<font color="#E5E5E5"> you some</font>

2
00:00:07,820 --> 00:00:14,680
some experiments I did with huge<font color="#CCCCCC"> pages</font>

3
00:00:10,490 --> 00:00:18,080
and my sequel and Postgres<font color="#E5E5E5"> mostly and</font>

4
00:00:14,680 --> 00:00:21,259
the presentation<font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> starting</font>

5
00:00:18,080 --> 00:00:24,799
with<font color="#CCCCCC"> white took me to to test this and</font>

6
00:00:21,260 --> 00:00:26,770
<font color="#CCCCCC">try this I'm going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> just do a</font><font color="#E5E5E5"> brief</font>

7
00:00:24,800 --> 00:00:31,280
review<font color="#E5E5E5"> of how memory works</font><font color="#CCCCCC"> very</font>

8
00:00:26,770 --> 00:00:34,190
simplified one just for the<font color="#E5E5E5"> context</font><font color="#CCCCCC"> then</font>

9
00:00:31,280 --> 00:00:37,550
how you<font color="#E5E5E5"> could have on application work</font>

10
00:00:34,190 --> 00:00:39,769
with youth pages how we set up large

11
00:00:37,550 --> 00:00:42,650
pages in practice<font color="#E5E5E5"> and all of these in</font>

12
00:00:39,770 --> 00:00:44,540
the context of<font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and x86 mostly</font>

13
00:00:42,650 --> 00:00:48,350
<font color="#E5E5E5">I haven't really look into anything else</font>

14
00:00:44,540 --> 00:00:50,930
but that and then I did some testing<font color="#E5E5E5"> I'm</font>

15
00:00:48,350 --> 00:00:57,190
going to discuss the<font color="#CCCCCC"> results</font><font color="#E5E5E5"> I got with</font>

16
00:00:50,930 --> 00:01:01,579
<font color="#E5E5E5">you so really my main motivation was</font><font color="#CCCCCC"> C</font>

17
00:00:57,190 --> 00:01:04,188
well<font color="#E5E5E5"> C were working with</font><font color="#CCCCCC"> talked with EB</font>

18
00:01:01,579 --> 00:01:06,770
and MongoDB and having the transparent

19
00:01:04,188 --> 00:01:08,919
huge pages<font color="#E5E5E5"> always on the way has</font><font color="#CCCCCC"> anyone</font>

20
00:01:06,770 --> 00:01:12,920
<font color="#CCCCCC">work at which talk would it be before</font>

21
00:01:08,920 --> 00:01:15,290
yeah well<font color="#E5E5E5"> okay nice</font><font color="#CCCCCC"> so you might</font>

22
00:01:12,920 --> 00:01:17,390
<font color="#E5E5E5">remember that if</font><font color="#CCCCCC"> we start</font><font color="#E5E5E5"> talk with the</font>

23
00:01:15,290 --> 00:01:18,950
B if you try to start my sequel<font color="#CCCCCC"> with the</font>

24
00:01:17,390 --> 00:01:20,600
talk with the B start engine<font color="#E5E5E5"> and you</font>

25
00:01:18,950 --> 00:01:23,390
have transparent huge tables<font color="#CCCCCC"> enabling</font>

26
00:01:20,600 --> 00:01:26,658
the server it won't start it refuses to

27
00:01:23,390 --> 00:01:29,210
start right and it<font color="#E5E5E5"> tells you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> disable</font>

28
00:01:26,659 --> 00:01:31,750
that<font color="#E5E5E5"> and then I'm started working a</font>

29
00:01:29,210 --> 00:01:35,119
little bit with MongoDB<font color="#E5E5E5"> and the manual</font>

30
00:01:31,750 --> 00:01:36,619
says well you can actually<font color="#E5E5E5"> start</font><font color="#CCCCCC"> movie</font>

31
00:01:35,119 --> 00:01:40,130
<font color="#CCCCCC">with transparent huge</font><font color="#E5E5E5"> pages but the</font>

32
00:01:36,619 --> 00:01:43,040
manual tells you not you<font color="#E5E5E5"> and it says</font>

33
00:01:40,130 --> 00:01:45,740
<font color="#E5E5E5">that database workloads often perform</font>

34
00:01:43,040 --> 00:01:48,080
poorly with transparent huge<font color="#CCCCCC"> pages right</font>

35
00:01:45,740 --> 00:01:49,908
and they say that because<font color="#E5E5E5"> they tend to</font>

36
00:01:48,080 --> 00:01:53,780
<font color="#E5E5E5">have sparse rather than</font><font color="#CCCCCC"> continuous</font>

37
00:01:49,909 --> 00:01:56,330
memory access patterns but so let's

38
00:01:53,780 --> 00:01:57,799
think<font color="#E5E5E5"> about those two databases mostly</font>

39
00:01:56,330 --> 00:02:00,770
<font color="#CCCCCC">which I am going to</font><font color="#E5E5E5"> cover today my</font>

40
00:01:57,799 --> 00:02:03,500
sequin<font color="#CCCCCC"> Bosporus the main thing on a</font>

41
00:02:00,770 --> 00:02:06,199
database it would be the database cache

42
00:02:03,500 --> 00:02:08,750
right we aim to have all the data<font color="#E5E5E5"> in</font>

43
00:02:06,200 --> 00:02:15,410
index<font color="#E5E5E5"> or at least most of that in memory</font>

44
00:02:08,750 --> 00:02:17,870
<font color="#E5E5E5">so we have a faster access and with my</font>

45
00:02:15,410 --> 00:02:18,240
<font color="#E5E5E5">Seco covering the main</font><font color="#CCCCCC"> storage engine</font>

46
00:02:17,870 --> 00:02:22,560
which

47
00:02:18,240 --> 00:02:26,090
<font color="#E5E5E5">I</font><font color="#CCCCCC"> know DB we have the manual kind of</font>

48
00:02:22,560 --> 00:02:28,950
suggesting us to use as much as<font color="#E5E5E5"> 80%</font>

49
00:02:26,090 --> 00:02:32,550
<font color="#E5E5E5">consecrated to</font><font color="#CCCCCC"> this database cache</font>

50
00:02:28,950 --> 00:02:34,739
<font color="#E5E5E5">should</font><font color="#CCCCCC"> I know to</font><font color="#E5E5E5"> be buffer pool right so</font>

51
00:02:32,550 --> 00:02:36,810
we would have something<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> this</font>

52
00:02:34,740 --> 00:02:39,870
<font color="#E5E5E5">is a rule of thumb of course but what we</font>

53
00:02:36,810 --> 00:02:42,360
want<font color="#E5E5E5"> to say is as much as as the memory</font>

54
00:02:39,870 --> 00:02:45,060
in the server we can consecrate to<font color="#E5E5E5"> the</font>

55
00:02:42,360 --> 00:02:46,950
database cache the<font color="#E5E5E5"> battery is going</font><font color="#CCCCCC"> to</font>

56
00:02:45,060 --> 00:02:49,770
<font color="#CCCCCC">be because it we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> need to</font>

57
00:02:46,950 --> 00:02:51,839
access<font color="#E5E5E5"> less the</font><font color="#CCCCCC"> disk in search of pages</font>

58
00:02:49,770 --> 00:02:56,040
right<font color="#CCCCCC"> and if you happen to fit all your</font>

59
00:02:51,840 --> 00:02:58,590
database in as much as in<font color="#CCCCCC"> the buffer</font>

60
00:02:56,040 --> 00:03:02,820
pool size then it<font color="#E5E5E5"> will be in practice</font>

61
00:02:58,590 --> 00:03:05,280
<font color="#E5E5E5">working with</font><font color="#CCCCCC"> an in-memory database 80%</font>

62
00:03:02,820 --> 00:03:06,720
but it really depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> much and</font>

63
00:03:05,280 --> 00:03:08,940
how<font color="#E5E5E5"> much memory you have in the server</font>

64
00:03:06,720 --> 00:03:13,500
right if you have a lot<font color="#CCCCCC"> of memory you</font>

65
00:03:08,940 --> 00:03:15,900
might be using<font color="#E5E5E5"> more than that with</font>

66
00:03:13,500 --> 00:03:18,510
<font color="#CCCCCC">bosphorus</font><font color="#E5E5E5"> it works a little bit</font>

67
00:03:15,900 --> 00:03:21,540
different<font color="#E5E5E5"> what we</font><font color="#CCCCCC"> can call that the</font>

68
00:03:18,510 --> 00:03:24,870
<font color="#E5E5E5">database cache is the share it buffers</font>

69
00:03:21,540 --> 00:03:27,989
and what they say is<font color="#CCCCCC"> that we shouldn't</font>

70
00:03:24,870 --> 00:03:31,860
<font color="#CCCCCC">use most of</font><font color="#E5E5E5"> the memory for the share it</font>

71
00:03:27,990 --> 00:03:33,960
buffers and that's because phosphorus<font color="#E5E5E5"> is</font>

72
00:03:31,860 --> 00:03:36,090
a little bit different<font color="#CCCCCC"> every time you</font>

73
00:03:33,960 --> 00:03:38,940
<font color="#CCCCCC">look for</font><font color="#E5E5E5"> something in the database</font><font color="#CCCCCC"> that</font>

74
00:03:36,090 --> 00:03:41,670
is not in its cache that<font color="#E5E5E5"> is not in the</font>

75
00:03:38,940 --> 00:03:44,070
in the buffer pool<font color="#CCCCCC"> in the shared buffers</font>

76
00:03:41,670 --> 00:03:46,530
<font color="#E5E5E5">it is going to look for that on disk of</font>

77
00:03:44,070 --> 00:03:50,130
course but then it needs to low to<font color="#CCCCCC"> the</font>

78
00:03:46,530 --> 00:03:52,470
last cache first and then get<font color="#E5E5E5"> that</font>

79
00:03:50,130 --> 00:03:56,100
should the<font color="#E5E5E5"> share it</font><font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> so there is</font>

80
00:03:52,470 --> 00:03:57,720
at least for<font color="#E5E5E5"> awhile</font><font color="#CCCCCC"> a double cash taking</font>

81
00:03:56,100 --> 00:03:59,670
place for<font color="#E5E5E5"> the same page you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

82
00:03:57,720 --> 00:04:01,320
find it in the<font color="#CCCCCC"> West</font><font color="#E5E5E5"> cache you're also</font>

83
00:03:59,670 --> 00:04:04,140
going to<font color="#E5E5E5"> find it in the shared buffers</font>

84
00:04:01,320 --> 00:04:06,120
it's not very well worse than what my

85
00:04:04,140 --> 00:04:09,660
<font color="#CCCCCC">Seco does is just different right and</font>

86
00:04:06,120 --> 00:04:12,540
for this reason it says well you you

87
00:04:09,660 --> 00:04:14,220
won't be<font color="#E5E5E5"> really wanting</font><font color="#CCCCCC"> to consecrate</font><font color="#E5E5E5"> as</font>

88
00:04:12,540 --> 00:04:17,279
much<font color="#CCCCCC"> memory just to the</font><font color="#E5E5E5"> Charlotte</font>

89
00:04:14,220 --> 00:04:19,858
buffers and just forget address cache<font color="#E5E5E5"> so</font>

90
00:04:17,279 --> 00:04:23,010
they say<font color="#CCCCCC"> they're opposite so you just</font>

91
00:04:19,858 --> 00:04:27,530
educate a little bit of the memory 20%

92
00:04:23,010 --> 00:04:30,900
30% 40%<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> chera buffers in practice</font>

93
00:04:27,530 --> 00:04:31,599
<font color="#E5E5E5">it really depends in Postgres as well if</font>

94
00:04:30,900 --> 00:04:33,580
you can figure

95
00:04:31,600 --> 00:04:37,750
whole database<font color="#E5E5E5"> in memory because if you</font>

96
00:04:33,580 --> 00:04:39,909
do then making<font color="#E5E5E5"> this wouldn't make sense</font>

97
00:04:37,750 --> 00:04:41,980
in fact<font color="#E5E5E5"> you would do the opposite</font><font color="#CCCCCC"> you</font>

98
00:04:39,910 --> 00:04:43,780
would do<font color="#E5E5E5"> like you do with my</font><font color="#CCCCCC"> Sifu</font>

99
00:04:41,980 --> 00:04:45,850
<font color="#E5E5E5">because if you can feature a whole</font>

100
00:04:43,780 --> 00:04:49,380
database<font color="#E5E5E5"> in memory then you won't need</font>

101
00:04:45,850 --> 00:04:51,880
to<font color="#E5E5E5"> look for the data on disk right and</font>

102
00:04:49,380 --> 00:04:54,969
<font color="#E5E5E5">traverse</font><font color="#CCCCCC"> their OS</font><font color="#E5E5E5"> cash to get into the</font>

103
00:04:51,880 --> 00:04:57,340
shared buffers<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> it could be the</font>

104
00:04:54,970 --> 00:04:59,170
opposite as well if you if you and find

105
00:04:57,340 --> 00:05:00,609
out a balance between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Sherrod</font>

106
00:04:59,170 --> 00:05:03,010
buffers and<font color="#CCCCCC"> the Weiss</font><font color="#E5E5E5"> cash for</font>

107
00:05:00,610 --> 00:05:04,720
<font color="#CCCCCC">Possible's just wanted to cover this for</font>

108
00:05:03,010 --> 00:05:07,870
the database<font color="#E5E5E5"> cache because it's part of</font>

109
00:05:04,720 --> 00:05:11,020
what<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going to discuss so how many</font>

110
00:05:07,870 --> 00:05:14,410
works but<font color="#CCCCCC"> having in mind</font><font color="#E5E5E5"> this is a very</font>

111
00:05:11,020 --> 00:05:19,419
simplified version<font color="#CCCCCC"> of the of the</font><font color="#E5E5E5"> process</font>

112
00:05:14,410 --> 00:05:21,520
right<font color="#CCCCCC"> so all the applications they</font><font color="#E5E5E5"> work</font>

113
00:05:19,420 --> 00:05:25,330
with<font color="#CCCCCC"> via phone memory nowadays it's</font>

114
00:05:21,520 --> 00:05:27,669
always like<font color="#CCCCCC"> that right so</font><font color="#E5E5E5"> the process</font>

115
00:05:25,330 --> 00:05:29,560
that<font color="#E5E5E5"> asks for memory it has</font><font color="#CCCCCC"> the</font>

116
00:05:27,670 --> 00:05:30,940
<font color="#CCCCCC">impression it is working</font><font color="#E5E5E5"> with a certain</font>

117
00:05:29,560 --> 00:05:35,290
<font color="#E5E5E5">amount of memory a certain amount of</font>

118
00:05:30,940 --> 00:05:37,930
conscious memory<font color="#E5E5E5"> even if I we really we</font>

119
00:05:35,290 --> 00:05:39,850
might have blocks<font color="#E5E5E5"> of memory from</font>

120
00:05:37,930 --> 00:05:42,310
different parts of<font color="#E5E5E5"> the physical memory</font>

121
00:05:39,850 --> 00:05:45,760
there are allocated<font color="#E5E5E5"> to this to this</font>

122
00:05:42,310 --> 00:05:47,380
application<font color="#E5E5E5"> right so there must be some</font>

123
00:05:45,760 --> 00:05:50,320
kind of mapping<font color="#E5E5E5"> between the virtual</font>

124
00:05:47,380 --> 00:05:53,969
memory<font color="#E5E5E5"> the application has access to and</font>

125
00:05:50,320 --> 00:05:57,960
<font color="#E5E5E5">the physical memory in the server and</font>

126
00:05:53,970 --> 00:06:00,850
this mapping<font color="#E5E5E5"> requires some kind</font><font color="#CCCCCC"> of</font>

127
00:05:57,960 --> 00:06:04,510
translation right<font color="#E5E5E5"> when you are</font><font color="#CCCCCC"> looking</font>

128
00:06:00,850 --> 00:06:07,300
<font color="#E5E5E5">for this block of memory here that on my</font>

129
00:06:04,510 --> 00:06:10,539
application<font color="#CCCCCC"> god</font><font color="#E5E5E5"> so I need to find out</font>

130
00:06:07,300 --> 00:06:14,980
where it is in the<font color="#E5E5E5"> physical storage in</font>

131
00:06:10,540 --> 00:06:16,960
the physical<font color="#E5E5E5"> memory and so there is</font><font color="#CCCCCC"> data</font>

132
00:06:14,980 --> 00:06:19,330
<font color="#E5E5E5">structure</font><font color="#CCCCCC"> that is called</font><font color="#E5E5E5"> the page table</font>

133
00:06:16,960 --> 00:06:21,880
that<font color="#E5E5E5"> is used for this mapping this</font>

134
00:06:19,330 --> 00:06:24,609
<font color="#E5E5E5">mapping mechanism and this is per</font>

135
00:06:21,880 --> 00:06:29,650
<font color="#CCCCCC">application and this</font><font color="#E5E5E5"> is stored in memory</font>

136
00:06:24,610 --> 00:06:32,680
<font color="#CCCCCC">as</font><font color="#E5E5E5"> well so every time I'm looking for my</font>

137
00:06:29,650 --> 00:06:34,719
page in the<font color="#CCCCCC"> application it translates</font>

138
00:06:32,680 --> 00:06:39,130
through<font color="#E5E5E5"> to a page in the physical system</font>

139
00:06:34,720 --> 00:06:42,520
<font color="#E5E5E5">and this is done at the</font><font color="#CCCCCC"> the processor at</font>

140
00:06:39,130 --> 00:06:44,290
the memory<font color="#E5E5E5"> management unit level right</font>

141
00:06:42,520 --> 00:06:49,799
<font color="#E5E5E5">and</font>

142
00:06:44,290 --> 00:06:53,980
oops<font color="#E5E5E5"> well since this is kind</font><font color="#CCCCCC"> of</font>

143
00:06:49,800 --> 00:06:55,600
<font color="#E5E5E5">expensive right take in mind the context</font>

144
00:06:53,980 --> 00:06:57,970
of expensive here every memory access

145
00:06:55,600 --> 00:06:59,200
needs to find out where is the<font color="#CCCCCC"> virtual</font>

146
00:06:57,970 --> 00:07:01,960
where is where is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> physical memory</font>

147
00:06:59,200 --> 00:07:04,780
right<font color="#E5E5E5"> so it is expensive so there is a</font>

148
00:07:01,960 --> 00:07:09,190
way to<font color="#E5E5E5"> optimize this this process</font><font color="#CCCCCC"> which</font>

149
00:07:04,780 --> 00:07:13,119
<font color="#E5E5E5">is by employing a cache at the at the at</font>

150
00:07:09,190 --> 00:07:14,770
the core level of the CPU right so again

151
00:07:13,120 --> 00:07:17,070
a simplified version there<font color="#CCCCCC"> is several</font>

152
00:07:14,770 --> 00:07:20,740
<font color="#E5E5E5">levels of cache in the CPU and just</font>

153
00:07:17,070 --> 00:07:23,469
thinking globally<font color="#E5E5E5"> here so this is this</font>

154
00:07:20,740 --> 00:07:26,380
cache<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> known as the</font><font color="#E5E5E5"> translation</font>

155
00:07:23,470 --> 00:07:31,750
lookaside buffer the TLB right so what

156
00:07:26,380 --> 00:07:34,480
happens is every<font color="#CCCCCC"> time there is</font><font color="#E5E5E5"> a memory</font>

157
00:07:31,750 --> 00:07:37,180
<font color="#CCCCCC">access request that cache is look at</font>

158
00:07:34,480 --> 00:07:39,130
first if the entry we are looking for

159
00:07:37,180 --> 00:07:42,760
the mapping<font color="#CCCCCC"> of the page we are looking</font>

160
00:07:39,130 --> 00:07:46,990
for<font color="#CCCCCC"> its there</font><font color="#E5E5E5"> then it just returns</font><font color="#CCCCCC"> the</font>

161
00:07:42,760 --> 00:07:49,719
result<font color="#E5E5E5"> and we call it a TLB hit if it is</font>

162
00:07:46,990 --> 00:07:52,180
not then<font color="#E5E5E5"> it needs to traverse the whole</font>

163
00:07:49,720 --> 00:07:54,400
page table for<font color="#E5E5E5"> that application</font><font color="#CCCCCC"> to find</font>

164
00:07:52,180 --> 00:07:58,360
the mapping<font color="#E5E5E5"> it is looking for and we</font>

165
00:07:54,400 --> 00:08:00,400
call it a TLB<font color="#E5E5E5"> miss right the real</font>

166
00:07:58,360 --> 00:08:02,890
difference between them both is that

167
00:08:00,400 --> 00:08:06,130
<font color="#E5E5E5">when we find</font><font color="#CCCCCC"> out we are</font><font color="#E5E5E5"> looking for in</font>

168
00:08:02,890 --> 00:08:08,860
the cache<font color="#E5E5E5"> it is one memory access to do</font>

169
00:08:06,130 --> 00:08:17,650
that when it is<font color="#CCCCCC"> not we have two memory</font>

170
00:08:08,860 --> 00:08:20,080
<font color="#E5E5E5">access so the tell B is quite small we</font>

171
00:08:17,650 --> 00:08:23,260
<font color="#E5E5E5">can have all the entries caches in there</font>

172
00:08:20,080 --> 00:08:26,169
like<font color="#CCCCCC"> out</font><font color="#E5E5E5"> most caches right so how</font><font color="#CCCCCC"> can we</font>

173
00:08:23,260 --> 00:08:28,270
<font color="#CCCCCC">improve the efficiency or off of this</font>

174
00:08:26,170 --> 00:08:33,640
process how can we decrease<font color="#E5E5E5"> the number</font>

175
00:08:28,270 --> 00:08:35,380
<font color="#CCCCCC">of misses we get just increasing</font><font color="#E5E5E5"> the</font>

176
00:08:33,640 --> 00:08:37,210
<font color="#CCCCCC">tail</font><font color="#E5E5E5"> decides</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> hardware level is</font>

177
00:08:35,380 --> 00:08:39,099
<font color="#E5E5E5">quite expensive and limited</font><font color="#CCCCCC"> but you can</font>

178
00:08:37,210 --> 00:08:41,830
<font color="#CCCCCC">just do it for all the</font><font color="#E5E5E5"> memory we</font><font color="#CCCCCC"> are</font>

179
00:08:39,099 --> 00:08:44,380
working<font color="#E5E5E5"> now</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> nowadays the alternative</font>

180
00:08:41,830 --> 00:08:49,900
for<font color="#CCCCCC"> that is just</font><font color="#E5E5E5"> to increase</font><font color="#CCCCCC"> the page</font>

181
00:08:44,380 --> 00:08:51,820
size now<font color="#E5E5E5"> take about this page size</font><font color="#CCCCCC"> a</font>

182
00:08:49,900 --> 00:08:55,449
regular page size in<font color="#CCCCCC"> Linux is 4</font>

183
00:08:51,820 --> 00:08:57,550
kilobytes<font color="#E5E5E5"> right but most most modern</font>

184
00:08:55,450 --> 00:08:58,060
processors they work with alternative

185
00:08:57,550 --> 00:09:03,030
<font color="#E5E5E5">size</font>

186
00:08:58,060 --> 00:09:05,770
which are<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the large pages we have</font>

187
00:09:03,030 --> 00:09:08,079
<font color="#CCCCCC">mostly in Linux we will find two</font>

188
00:09:05,770 --> 00:09:10,689
<font color="#E5E5E5">megabytes sometimes four megabytes and</font>

189
00:09:08,080 --> 00:09:14,290
one gigabyte one gigabyte off of page

190
00:09:10,690 --> 00:09:17,470
and we<font color="#CCCCCC"> can even</font><font color="#E5E5E5"> find that some some</font><font color="#CCCCCC"> more</font>

191
00:09:14,290 --> 00:09:19,990
<font color="#E5E5E5">modern ones</font><font color="#CCCCCC"> half a terabyte page in some</font>

192
00:09:17,470 --> 00:09:23,110
case if you<font color="#E5E5E5"> consider then a test several</font>

193
00:09:19,990 --> 00:09:26,560
<font color="#E5E5E5">of 256</font><font color="#CCCCCC"> gigabytes of RAM which is</font><font color="#E5E5E5"> the one</font>

194
00:09:23,110 --> 00:09:30,040
I<font color="#E5E5E5"> have used it for for my tests with</font>

195
00:09:26,560 --> 00:09:33,969
<font color="#CCCCCC">four kilobyte pages we have</font><font color="#E5E5E5"> 67 million</font>

196
00:09:30,040 --> 00:09:37,630
<font color="#E5E5E5">pages to account for so we will need to</font>

197
00:09:33,970 --> 00:09:41,230
<font color="#E5E5E5">map 67 million pages between virtual</font>

198
00:09:37,630 --> 00:09:44,080
memory and<font color="#E5E5E5"> physical address with</font><font color="#CCCCCC"> two</font>

199
00:09:41,230 --> 00:09:46,750
megabytes<font color="#E5E5E5"> we get a little better stance</font>

200
00:09:44,080 --> 00:09:49,180
right there are only<font color="#E5E5E5"> three</font><font color="#CCCCCC"> about 131</font>

201
00:09:46,750 --> 00:09:52,390
thousand pages<font color="#E5E5E5"> and one with one gigabyte</font>

202
00:09:49,180 --> 00:09:56,800
page you only have 256<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> it's</font>

203
00:09:52,390 --> 00:09:59,260
not<font color="#CCCCCC"> like well I just</font><font color="#E5E5E5"> have 256 entries</font>

204
00:09:56,800 --> 00:10:01,930
<font color="#E5E5E5">for one gigabyte pages then I can fit</font>

205
00:09:59,260 --> 00:10:04,650
then<font color="#CCCCCC"> on</font><font color="#E5E5E5"> it that'll be cash this is</font>

206
00:10:01,930 --> 00:10:06,939
really kind<font color="#E5E5E5"> of dependent of</font><font color="#CCCCCC"> the</font>

207
00:10:04,650 --> 00:10:09,760
architecture and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> processor and even</font>

208
00:10:06,940 --> 00:10:16,030
the version of<font color="#E5E5E5"> the processor it has a</font>

209
00:10:09,760 --> 00:10:19,090
capacity<font color="#CCCCCC"> for different amounts of pages</font>

210
00:10:16,030 --> 00:10:22,180
in the TLB depending on the size<font color="#E5E5E5"> but</font>

211
00:10:19,090 --> 00:10:25,270
those who are what we could call<font color="#E5E5E5"> the</font>

212
00:10:22,180 --> 00:10:27,819
large page huge<font color="#E5E5E5"> base</font><font color="#CCCCCC"> it's the name it's</font>

213
00:10:25,270 --> 00:10:29,949
used in both ways<font color="#E5E5E5"> large paying huge page</font>

214
00:10:27,820 --> 00:10:32,580
it started with<font color="#CCCCCC"> some people</font><font color="#E5E5E5"> call a large</font>

215
00:10:29,950 --> 00:10:36,040
<font color="#E5E5E5">page for a certain amount of memory then</font>

216
00:10:32,580 --> 00:10:37,960
then other people<font color="#CCCCCC"> call huge</font><font color="#E5E5E5"> pages in my</font>

217
00:10:36,040 --> 00:10:42,689
sequel<font color="#E5E5E5"> you call it large pages</font><font color="#CCCCCC"> in</font>

218
00:10:37,960 --> 00:10:47,140
<font color="#E5E5E5">phosphorous you call it huge pages now</font>

219
00:10:42,690 --> 00:10:50,440
working<font color="#E5E5E5"> with larger pages with my</font><font color="#CCCCCC"> see</font>

220
00:10:47,140 --> 00:10:54,819
<font color="#E5E5E5">point prospects again</font><font color="#CCCCCC"> why we would do</font>

221
00:10:50,440 --> 00:10:57,730
that<font color="#E5E5E5"> the thing is if we have larger</font>

222
00:10:54,820 --> 00:11:00,100
pages we will of<font color="#E5E5E5"> course of course</font>

223
00:10:57,730 --> 00:11:02,650
<font color="#CCCCCC">improve performance because the</font><font color="#E5E5E5"> number</font>

224
00:11:00,100 --> 00:11:06,310
of TLB misses we will have will be<font color="#E5E5E5"> small</font>

225
00:11:02,650 --> 00:11:08,829
right<font color="#CCCCCC"> there are less pages</font><font color="#E5E5E5"> we can fit</font>

226
00:11:06,310 --> 00:11:10,949
more<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those pages in cache in</font><font color="#CCCCCC"> the TLB</font>

227
00:11:08,830 --> 00:11:13,769
cache that<font color="#E5E5E5"> is the</font>

228
00:11:10,949 --> 00:11:15,599
one<font color="#CCCCCC"> premised of using huge papers with</font>

229
00:11:13,769 --> 00:11:19,189
my super prosperous but in general as

230
00:11:15,600 --> 00:11:22,649
<font color="#CCCCCC">well how</font><font color="#E5E5E5"> we do that there are two ways</font>

231
00:11:19,189 --> 00:11:24,748
the application needs<font color="#E5E5E5"> to have an active</font>

232
00:11:22,649 --> 00:11:30,059
support for<font color="#E5E5E5"> working with static huge</font>

233
00:11:24,749 --> 00:11:32,429
<font color="#E5E5E5">pages so my Seco</font><font color="#CCCCCC"> that has phosphorous</font>

234
00:11:30,059 --> 00:11:35,608
has<font color="#E5E5E5"> the java</font><font color="#CCCCCC"> virtual machine has as well</font>

235
00:11:32,429 --> 00:11:38,759
with my<font color="#E5E5E5"> sequel this is mostly limited to</font>

236
00:11:35,609 --> 00:11:41,100
<font color="#E5E5E5">the buffer pool and remember my</font><font color="#CCCCCC"> super</font><font color="#E5E5E5"> we</font>

237
00:11:38,759 --> 00:11:45,989
<font color="#CCCCCC">use memory</font><font color="#E5E5E5"> as well for temporary tables</font>

238
00:11:41,100 --> 00:11:48,329
for handling connections and other

239
00:11:45,989 --> 00:11:50,189
things but it's<font color="#CCCCCC"> really the buffer pool</font>

240
00:11:48,329 --> 00:11:52,618
that takes the most of the<font color="#E5E5E5"> memory so it</font>

241
00:11:50,189 --> 00:11:56,998
has support for huge tables at<font color="#CCCCCC"> the</font>

242
00:11:52,619 --> 00:11:59,009
buffer pool<font color="#E5E5E5"> lab now you did</font><font color="#CCCCCC"> you have my</font>

243
00:11:56,999 --> 00:12:01,439
super compiled it with a<font color="#E5E5E5"> huge pages</font>

244
00:11:59,009 --> 00:12:03,059
support which most of<font color="#E5E5E5"> the news these</font>

245
00:12:01,439 --> 00:12:08,849
distributions nowadays they<font color="#CCCCCC"> they</font><font color="#E5E5E5"> have</font>

246
00:12:03,059 --> 00:12:11,368
and what happens is if it sees<font color="#CCCCCC"> the rich</font>

247
00:12:08,850 --> 00:12:12,899
support<font color="#E5E5E5"> for that and you have enabled</font>

248
00:12:11,369 --> 00:12:15,540
that support in<font color="#E5E5E5"> your configuration of my</font>

249
00:12:12,899 --> 00:12:18,929
secret<font color="#E5E5E5"> like what you'll be looking later</font>

250
00:12:15,540 --> 00:12:22,410
then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> my secret try to allocate as</font>

251
00:12:18,929 --> 00:12:25,110
much memory as we have<font color="#E5E5E5"> asked during</font><font color="#CCCCCC"> the</font>

252
00:12:22,410 --> 00:12:29,569
<font color="#CCCCCC">initialization today the buffer pool</font>

253
00:12:25,110 --> 00:12:34,160
<font color="#E5E5E5">initial initialization with</font><font color="#CCCCCC"> phosphorous</font>

254
00:12:29,569 --> 00:12:37,559
<font color="#E5E5E5">the the use of huge</font><font color="#CCCCCC"> pages</font><font color="#E5E5E5"> is kind of</font>

255
00:12:34,160 --> 00:12:39,899
<font color="#E5E5E5">Donna</font><font color="#CCCCCC"> the same way except that well the</font>

256
00:12:37,559 --> 00:12:41,969
<font color="#E5E5E5">main beneficial for</font><font color="#CCCCCC"> that is also</font><font color="#E5E5E5"> the</font>

257
00:12:39,899 --> 00:12:44,669
<font color="#E5E5E5">Sherrod buffers that post-race cache</font>

258
00:12:41,970 --> 00:12:48,809
mechanism<font color="#E5E5E5"> but it could also use</font><font color="#CCCCCC"> that for</font>

259
00:12:44,669 --> 00:12:51,629
for<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things but let's keep with</font>

260
00:12:48,809 --> 00:12:55,649
Sherrod buffers in mind I<font color="#CCCCCC"> won't explain</font>

261
00:12:51,629 --> 00:12:58,259
<font color="#E5E5E5">you why in in a few months the</font>

262
00:12:55,649 --> 00:13:02,610
alternative way to use a huge<font color="#CCCCCC"> page with</font>

263
00:12:58,259 --> 00:13:05,999
Linux is what I'm kindly asking calling

264
00:13:02,610 --> 00:13:08,459
<font color="#CCCCCC">it here blindly</font><font color="#E5E5E5"> right so the application</font>

265
00:13:05,999 --> 00:13:12,029
has no knowledge of what<font color="#E5E5E5"> a huge page is</font>

266
00:13:08,459 --> 00:13:15,508
but the operating<font color="#E5E5E5"> system it does right</font>

267
00:13:12,029 --> 00:13:18,790
<font color="#E5E5E5">so it will transparently allocate huge</font>

268
00:13:15,509 --> 00:13:20,170
basis for applications<font color="#E5E5E5"> when it sees</font><font color="#CCCCCC"> fit</font>

269
00:13:18,790 --> 00:13:25,060
<font color="#E5E5E5">right and that's what we call the</font>

270
00:13:20,170 --> 00:13:27,310
transparent huge<font color="#E5E5E5"> babes now there is a</font>

271
00:13:25,060 --> 00:13:29,410
process that works in the background

272
00:13:27,310 --> 00:13:34,750
<font color="#CCCCCC">alena kernel process that you try to</font>

273
00:13:29,410 --> 00:13:39,219
<font color="#E5E5E5">find enough memory to create a huge page</font>

274
00:13:34,750 --> 00:13:41,800
and remember<font color="#CCCCCC"> it needs</font><font color="#E5E5E5"> to be contributes</font>

275
00:13:39,220 --> 00:13:44,770
of physical memory<font color="#E5E5E5"> for for a huge page</font>

276
00:13:41,800 --> 00:13:48,670
to be used then<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> try to convert</font>

277
00:13:44,770 --> 00:13:52,660
<font color="#E5E5E5">this block of of physical memory into a</font>

278
00:13:48,670 --> 00:13:57,089
huge page and then if it's his feet it

279
00:13:52,660 --> 00:14:00,160
will allocate this one huge page for a

280
00:13:57,090 --> 00:14:03,100
<font color="#CCCCCC">huge one application that is asking for</font>

281
00:14:00,160 --> 00:14:06,790
money<font color="#E5E5E5"> up for for money for for memory</font>

282
00:14:03,100 --> 00:14:09,280
<font color="#E5E5E5">almost</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> course there</font>

283
00:14:06,790 --> 00:14:12,099
must<font color="#E5E5E5"> be some some some algorithm behind</font>

284
00:14:09,280 --> 00:14:14,410
<font color="#E5E5E5">that because</font><font color="#CCCCCC"> you not want to allocate a</font>

285
00:14:12,100 --> 00:14:16,030
<font color="#E5E5E5">two megabyte large page to an</font>

286
00:14:14,410 --> 00:14:17,709
application<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is requesting just a</font>

287
00:14:16,030 --> 00:14:21,069
few kilobytes because we are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

288
00:14:17,710 --> 00:14:24,940
wasting the rest<font color="#E5E5E5"> of of the memory now I</font>

289
00:14:21,070 --> 00:14:27,610
just<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to create</font><font color="#E5E5E5"> an schema here to see</font>

290
00:14:24,940 --> 00:14:30,100
if it<font color="#E5E5E5"> helps understand the process so</font>

291
00:14:27,610 --> 00:14:33,040
all those those red blocks are the

292
00:14:30,100 --> 00:14:35,590
regular<font color="#CCCCCC"> four K pages and this green ones</font>

293
00:14:33,040 --> 00:14:37,480
are what we call large page that doesn't

294
00:14:35,590 --> 00:14:40,240
<font color="#E5E5E5">matter if it's</font><font color="#CCCCCC"> two megabyte one huge</font>

295
00:14:37,480 --> 00:14:42,580
page of one<font color="#CCCCCC"> gigabyte it's really not on</font>

296
00:14:40,240 --> 00:14:45,610
<font color="#E5E5E5">scale it's just for the context so you</font>

297
00:14:42,580 --> 00:14:49,150
see here we<font color="#E5E5E5"> don't have any conceivable</font>

298
00:14:45,610 --> 00:14:52,000
<font color="#E5E5E5">blocks of free memory that we could use</font>

299
00:14:49,150 --> 00:14:54,640
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> an another huge page so what</font>

300
00:14:52,000 --> 00:14:56,980
the kernel does in the background<font color="#CCCCCC"> is if</font>

301
00:14:54,640 --> 00:15:01,210
you<font color="#E5E5E5"> just try to see if we can move</font>

302
00:14:56,980 --> 00:15:04,120
blocks around and this moving of blocks

303
00:15:01,210 --> 00:15:07,540
around<font color="#E5E5E5"> it looks for slots where you</font>

304
00:15:04,120 --> 00:15:11,290
<font color="#CCCCCC">could just move them</font><font color="#E5E5E5"> and it will do</font><font color="#CCCCCC"> that</font>

305
00:15:07,540 --> 00:15:13,329
<font color="#E5E5E5">to free space</font><font color="#CCCCCC"> for a new huge page when</font>

306
00:15:11,290 --> 00:15:15,579
when it sees fit<font color="#CCCCCC"> well there's an</font>

307
00:15:13,330 --> 00:15:19,270
algorithm behind that right so it

308
00:15:15,580 --> 00:15:22,510
created<font color="#E5E5E5"> a new huge page</font><font color="#CCCCCC"> the problem with</font>

309
00:15:19,270 --> 00:15:25,270
<font color="#E5E5E5">that is that this process is a little</font>

310
00:15:22,510 --> 00:15:28,290
<font color="#CCCCCC">bit expensive</font><font color="#E5E5E5"> when it comes to creating</font>

311
00:15:25,270 --> 00:15:31,180
the huge page from a block<font color="#CCCCCC"> of</font><font color="#E5E5E5"> used</font>

312
00:15:28,290 --> 00:15:32,040
regular pages right because it<font color="#E5E5E5"> is going</font>

313
00:15:31,180 --> 00:15:35,010
<font color="#E5E5E5">to need</font>

314
00:15:32,040 --> 00:15:38,910
to block the access to<font color="#CCCCCC"> those four key</font>

315
00:15:35,010 --> 00:15:42,210
pages<font color="#E5E5E5"> during</font><font color="#CCCCCC"> the process</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we would see</font>

316
00:15:38,910 --> 00:15:45,540
in production<font color="#CCCCCC"> systems</font><font color="#E5E5E5"> some stalls and</font>

317
00:15:42,210 --> 00:15:47,430
sometimes not always but<font color="#CCCCCC"> sometimes they</font>

318
00:15:45,540 --> 00:15:50,930
<font color="#CCCCCC">could</font><font color="#E5E5E5"> be related to this background</font>

319
00:15:47,430 --> 00:15:54,449
<font color="#CCCCCC">process in the kernel that is</font><font color="#E5E5E5"> just</font>

320
00:15:50,930 --> 00:15:56,939
moving the<font color="#CCCCCC"> pages around</font><font color="#E5E5E5"> and that is one</font>

321
00:15:54,450 --> 00:16:00,030
<font color="#E5E5E5">of the the biggest motivation for people</font>

322
00:15:56,940 --> 00:16:06,860
<font color="#CCCCCC">to say well just disable it with my Seco</font>

323
00:16:00,030 --> 00:16:14,459
and long would it<font color="#CCCCCC"> be right okay so far</font>

324
00:16:06,860 --> 00:16:16,260
yeah good<font color="#CCCCCC"> so how do humans of</font><font color="#E5E5E5"> course the</font>

325
00:16:14,460 --> 00:16:19,950
processor<font color="#CCCCCC"> they're they're shtetl needs</font>

326
00:16:16,260 --> 00:16:23,370
to support it and looking<font color="#E5E5E5"> at an</font><font color="#CCCCCC"> action</font>

327
00:16:19,950 --> 00:16:27,090
<font color="#E5E5E5">for example this one that</font><font color="#CCCCCC"> I have worked</font>

328
00:16:23,370 --> 00:16:29,520
<font color="#E5E5E5">it with it is only compatible with two</font>

329
00:16:27,090 --> 00:16:31,980
megabytes large pages and one gigabyte

330
00:16:29,520 --> 00:16:37,350
large page and the way to know<font color="#CCCCCC"> that is</font>

331
00:16:31,980 --> 00:16:40,260
<font color="#E5E5E5">should the</font><font color="#CCCCCC"> flags implemented by / - tag</font>

332
00:16:37,350 --> 00:16:43,950
- so the PSC is denoted for<font color="#CCCCCC"> two</font>

333
00:16:40,260 --> 00:16:46,710
megabytes and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PDP a</font><font color="#CCCCCC"> 1gb</font><font color="#E5E5E5"> is for one</font>

334
00:16:43,950 --> 00:16:49,590
gigabyte<font color="#CCCCCC"> days so this</font><font color="#E5E5E5"> is how you know if</font>

335
00:16:46,710 --> 00:16:54,240
your processor it has<font color="#E5E5E5"> support for huge</font>

336
00:16:49,590 --> 00:16:57,030
<font color="#CCCCCC">pairs right one very</font><font color="#E5E5E5"> interesting thing</font>

337
00:16:54,240 --> 00:17:00,980
<font color="#CCCCCC">and I took</font><font color="#E5E5E5"> some time</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> me to realize</font>

338
00:16:57,030 --> 00:17:04,290
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> cannot have</font><font color="#CCCCCC"> those true</font>

339
00:17:00,980 --> 00:17:07,770
enabled at the same time so you either

340
00:17:04,290 --> 00:17:11,069
have one or<font color="#E5E5E5"> you have the odd one way to</font>

341
00:17:07,770 --> 00:17:15,240
find out is<font color="#E5E5E5"> looking at the proc</font><font color="#CCCCCC"> man info</font>

342
00:17:11,069 --> 00:17:18,060
right<font color="#E5E5E5"> it will tell you here it shows</font>

343
00:17:15,240 --> 00:17:22,650
that<font color="#CCCCCC"> the current</font><font color="#E5E5E5"> huge page size used by</font>

344
00:17:18,060 --> 00:17:25,050
<font color="#CCCCCC">the server is two megabytes this direct</font>

345
00:17:22,650 --> 00:17:27,030
map here references it's a little bit

346
00:17:25,050 --> 00:17:29,639
confusing<font color="#CCCCCC"> for</font><font color="#E5E5E5"> me at</font><font color="#CCCCCC"> least I couldn't</font>

347
00:17:27,030 --> 00:17:32,280
really figure<font color="#E5E5E5"> out exactly where this</font>

348
00:17:29,640 --> 00:17:35,750
<font color="#CCCCCC">metric comes comes from</font><font color="#E5E5E5"> it is related to</font>

349
00:17:32,280 --> 00:17:39,510
the TLB use right but it is<font color="#E5E5E5"> not like</font>

350
00:17:35,750 --> 00:17:43,100
stating that I have direct<font color="#E5E5E5"> I could fit</font>

351
00:17:39,510 --> 00:17:44,340
all<font color="#E5E5E5"> this memory here into the TLB cache</font>

352
00:17:43,100 --> 00:17:47,399
so this

353
00:17:44,340 --> 00:17:49,830
something for for later<font color="#E5E5E5"> now how do I</font>

354
00:17:47,400 --> 00:17:52,140
change<font color="#E5E5E5"> the huge page size if my computer</font>

355
00:17:49,830 --> 00:17:54,870
<font color="#CCCCCC">with my server</font><font color="#E5E5E5"> it says it is</font><font color="#CCCCCC"> working</font>

356
00:17:52,140 --> 00:17:57,330
<font color="#E5E5E5">with</font><font color="#CCCCCC"> 2 megabyte are large pages</font><font color="#E5E5E5"> how do I</font>

357
00:17:54,870 --> 00:18:00,899
switch<font color="#E5E5E5"> to one gigabyte if the server has</font>

358
00:17:57,330 --> 00:18:05,250
support<font color="#E5E5E5"> for that you can only do that</font>

359
00:18:00,900 --> 00:18:08,760
during boot time so there is an<font color="#E5E5E5"> option</font>

360
00:18:05,250 --> 00:18:11,520
<font color="#CCCCCC">here to state the size of the huge page</font>

361
00:18:08,760 --> 00:18:16,620
and you need to<font color="#CCCCCC"> pass</font><font color="#E5E5E5"> that to</font><font color="#CCCCCC"> the Linux</font>

362
00:18:11,520 --> 00:18:20,789
boot system<font color="#E5E5E5"> and tell it should you start</font>

363
00:18:16,620 --> 00:18:23,389
with what different huge page size<font color="#E5E5E5"> right</font>

364
00:18:20,789 --> 00:18:27,720
so you really need<font color="#CCCCCC"> to restart</font><font color="#E5E5E5"> the server</font>

365
00:18:23,390 --> 00:18:29,700
now that is only to have<font color="#E5E5E5"> to switch</font>

366
00:18:27,720 --> 00:18:32,159
between<font color="#CCCCCC"> 2 megabytes and manga bytes</font><font color="#E5E5E5"> in</font>

367
00:18:29,700 --> 00:18:34,590
this example here<font color="#E5E5E5"> now that the server</font>

368
00:18:32,159 --> 00:18:37,380
has support for<font color="#CCCCCC"> 4 huge pages</font><font color="#E5E5E5"> and I have</font>

369
00:18:34,590 --> 00:18:41,370
my huge page size<font color="#E5E5E5"> my default</font><font color="#CCCCCC"> won't set</font>

370
00:18:37,380 --> 00:18:44,700
correctly<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> step is to set up a</font>

371
00:18:41,370 --> 00:18:47,789
pool of huge pages<font color="#E5E5E5"> because that needs to</font>

372
00:18:44,700 --> 00:18:49,500
be done<font color="#CCCCCC"> beforehand</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> result is</font>

373
00:18:47,789 --> 00:18:51,720
control comma that<font color="#E5E5E5"> you can use to do</font>

374
00:18:49,500 --> 00:18:54,360
<font color="#CCCCCC">that and you do not hear the number of</font>

375
00:18:51,720 --> 00:18:58,770
huge pages<font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> allocate for the</font>

376
00:18:54,360 --> 00:19:01,500
huge pages pool<font color="#E5E5E5"> right and when you do it</font>

377
00:18:58,770 --> 00:19:05,429
it pre-allocate it allocates that memory

378
00:19:01,500 --> 00:19:08,039
on the spot<font color="#E5E5E5"> so here you can see I have</font>

379
00:19:05,429 --> 00:19:13,010
allocated like<font color="#E5E5E5"> 10 pages of one gigabyte</font>

380
00:19:08,039 --> 00:19:16,980
size<font color="#E5E5E5"> where is my default should be here</font>

381
00:19:13,010 --> 00:19:20,309
well it's one gigabyte<font color="#E5E5E5"> size Oh</font>

382
00:19:16,980 --> 00:19:23,309
huge page size here<font color="#E5E5E5"> and on the spot it</font>

383
00:19:20,309 --> 00:19:25,320
took my<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> gigabytes and consider that</font>

384
00:19:23,309 --> 00:19:28,139
memory<font color="#E5E5E5"> use it and unavailable for</font>

385
00:19:25,320 --> 00:19:33,840
anything<font color="#E5E5E5"> else right this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> static</font>

386
00:19:28,140 --> 00:19:35,820
huge page<font color="#E5E5E5"> you could also do if you have</font>

387
00:19:33,840 --> 00:19:38,639
a new assistant<font color="#CCCCCC"> you could also just</font>

388
00:19:35,820 --> 00:19:41,850
<font color="#E5E5E5">create this pool of huge</font><font color="#CCCCCC"> pages in one of</font>

389
00:19:38,640 --> 00:19:45,260
the<font color="#CCCCCC"> nodes so because if you just do</font><font color="#E5E5E5"> that</font>

390
00:19:41,850 --> 00:19:48,090
<font color="#E5E5E5">like in this</font><font color="#CCCCCC"> example here it will</font><font color="#E5E5E5"> just</font>

391
00:19:45,260 --> 00:19:51,440
<font color="#E5E5E5">balance the amount of</font><font color="#CCCCCC"> huge pages</font><font color="#E5E5E5"> you</font>

392
00:19:48,090 --> 00:19:55,189
have in all the<font color="#CCCCCC"> Numa nodes</font><font color="#E5E5E5"> the system</font>

393
00:19:51,440 --> 00:19:58,070
<font color="#E5E5E5">yes right like</font><font color="#CCCCCC"> you did</font><font color="#E5E5E5"> right here so the</font>

394
00:19:55,190 --> 00:20:00,080
way to do that<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just say hey I want</font>

395
00:19:58,070 --> 00:20:03,379
my pool of huge pays allocated to node

396
00:20:00,080 --> 00:20:05,990
<font color="#CCCCCC">one on all the zero it would be a little</font>

397
00:20:03,379 --> 00:20:08,120
bit<font color="#CCCCCC"> different but the same the same</font>

398
00:20:05,990 --> 00:20:11,899
mechanism is done right you just tell

399
00:20:08,120 --> 00:20:15,469
look<font color="#E5E5E5"> I'm assigning</font><font color="#CCCCCC"> to node</font><font color="#E5E5E5"> zero for the</font>

400
00:20:11,899 --> 00:20:18,439
one gigabyte page size<font color="#E5E5E5"> this amount of</font>

401
00:20:15,470 --> 00:20:20,899
pages<font color="#CCCCCC"> here</font><font color="#E5E5E5"> right and then it will do</font>

402
00:20:18,440 --> 00:20:25,519
just<font color="#CCCCCC"> that in this is your node</font><font color="#E5E5E5"> zero here</font>

403
00:20:20,899 --> 00:20:29,029
now this online<font color="#E5E5E5"> huge page allocation the</font>

404
00:20:25,519 --> 00:20:31,970
way we are<font color="#E5E5E5"> doing here it works</font><font color="#CCCCCC"> but it</font>

405
00:20:29,029 --> 00:20:34,580
might not<font color="#E5E5E5"> and it won't tell you you will</font>

406
00:20:31,970 --> 00:20:36,740
need to check<font color="#E5E5E5"> that out so like for</font>

407
00:20:34,580 --> 00:20:41,149
instance<font color="#E5E5E5"> here I have just tried</font><font color="#CCCCCC"> to</font>

408
00:20:36,740 --> 00:20:43,789
<font color="#E5E5E5">allocate 256 pages this is again one</font>

409
00:20:41,149 --> 00:20:47,289
gigabyte page size<font color="#E5E5E5"> and it just returned</font>

410
00:20:43,789 --> 00:20:51,950
<font color="#E5E5E5">to me this comment here</font><font color="#CCCCCC"> but in</font><font color="#E5E5E5"> practice</font>

411
00:20:47,289 --> 00:20:55,399
it in fact created a pool<font color="#E5E5E5"> of only 246</font>

412
00:20:51,950 --> 00:20:58,460
days<font color="#E5E5E5"> because it couldn't</font><font color="#CCCCCC"> just find out</font>

413
00:20:55,399 --> 00:21:00,199
<font color="#CCCCCC">the rest of the blocks aligner</font><font color="#E5E5E5"> Knievel's</font>

414
00:20:58,460 --> 00:21:02,509
blocks to create<font color="#CCCCCC"> the remaining</font><font color="#E5E5E5"> pages</font>

415
00:21:00,200 --> 00:21:06,110
they were already being used<font color="#E5E5E5"> and it</font>

416
00:21:02,509 --> 00:21:10,250
<font color="#E5E5E5">couldn't it won't just move them out all</font>

417
00:21:06,110 --> 00:21:12,139
<font color="#E5E5E5">right so what is a safe that</font><font color="#CCCCCC"> safest</font>

418
00:21:10,250 --> 00:21:14,120
<font color="#E5E5E5">match to do that particularly with one</font>

419
00:21:12,139 --> 00:21:17,418
<font color="#E5E5E5">about huge pages which is more difficult</font>

420
00:21:14,120 --> 00:21:19,729
to church or<font color="#E5E5E5"> to create day to find the</font>

421
00:21:17,419 --> 00:21:22,580
<font color="#E5E5E5">contiguous blocks is at the good time</font>

422
00:21:19,730 --> 00:21:25,480
again<font color="#CCCCCC"> so you could just specify at boot</font>

423
00:21:22,580 --> 00:21:28,460
time hey I'm working<font color="#CCCCCC"> with</font><font color="#E5E5E5"> one gigabyte</font>

424
00:21:25,480 --> 00:21:30,860
large pages and I want you<font color="#E5E5E5"> to create a</font>

425
00:21:28,460 --> 00:21:36,139
<font color="#E5E5E5">huge page spoon of one</font><font color="#CCCCCC"> heap</font><font color="#E5E5E5"> 100</font>

426
00:21:30,860 --> 00:21:39,229
gigabytes<font color="#E5E5E5"> during boot time right now</font>

427
00:21:36,139 --> 00:21:41,600
disabling the transparent huge pages<font color="#CCCCCC"> you</font>

428
00:21:39,230 --> 00:21:43,820
<font color="#E5E5E5">have seen</font><font color="#CCCCCC"> that in the previous</font><font color="#E5E5E5"> screen</font>

429
00:21:41,600 --> 00:21:47,750
shot<font color="#CCCCCC"> that there was like two megabytes</font>

430
00:21:43,820 --> 00:21:49,939
<font color="#E5E5E5">being referenced by unknown huge pages</font>

431
00:21:47,750 --> 00:21:54,309
<font color="#E5E5E5">and this unknown huge</font><font color="#CCCCCC"> pages here is</font>

432
00:21:49,940 --> 00:21:58,159
reference<font color="#E5E5E5"> 40 HP so we know that PHP is</font>

433
00:21:54,309 --> 00:22:00,500
<font color="#CCCCCC">working</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> this server</font><font color="#E5E5E5"> and you could</font>

434
00:21:58,159 --> 00:22:01,820
also<font color="#E5E5E5"> look and you find that the kernel</font>

435
00:22:00,500 --> 00:22:04,700
process<font color="#E5E5E5"> that is working in the</font>

436
00:22:01,820 --> 00:22:05,710
background<font color="#CCCCCC"> now to disable it you could</font>

437
00:22:04,700 --> 00:22:09,790
do<font color="#E5E5E5"> it at run</font>

438
00:22:05,710 --> 00:22:12,790
right like the<font color="#E5E5E5"> talk would</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> warning</font>

439
00:22:09,790 --> 00:22:16,240
the<font color="#CCCCCC"> airlock just showing how you can</font>

440
00:22:12,790 --> 00:22:20,220
just set the the<font color="#E5E5E5"> transparent huge page</font>

441
00:22:16,240 --> 00:22:23,260
to never and it's going to<font color="#E5E5E5"> disable that</font>

442
00:22:20,220 --> 00:22:26,290
<font color="#CCCCCC">but you could also do that during boot</font>

443
00:22:23,260 --> 00:22:28,180
time<font color="#E5E5E5"> so you just</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> another option</font><font color="#CCCCCC"> if</font>

444
00:22:26,290 --> 00:22:30,580
<font color="#CCCCCC">you say transparent huge page</font><font color="#E5E5E5"> never and</font>

445
00:22:28,180 --> 00:22:31,060
it won't boot<font color="#E5E5E5"> with transparent huge</font>

446
00:22:30,580 --> 00:22:32,679
<font color="#CCCCCC">Papes</font>

447
00:22:31,060 --> 00:22:35,470
the difference<font color="#CCCCCC"> between both</font><font color="#E5E5E5"> that the</font>

448
00:22:32,680 --> 00:22:38,350
<font color="#E5E5E5">true is that once it boots with with</font>

449
00:22:35,470 --> 00:22:40,150
transparent huge pages enable it will

450
00:22:38,350 --> 00:22:43,030
take this<font color="#CCCCCC"> two megabytes and</font><font color="#E5E5E5"> you just</font>

451
00:22:40,150 --> 00:22:46,030
want free it for you at least<font color="#E5E5E5"> I wasn't</font>

452
00:22:43,030 --> 00:22:47,530
able to so if<font color="#E5E5E5"> you are certain you don't</font>

453
00:22:46,030 --> 00:22:49,840
want to work with transparent huge pages

454
00:22:47,530 --> 00:22:51,149
<font color="#CCCCCC">you</font><font color="#E5E5E5"> could just have that in in the</font>

455
00:22:49,840 --> 00:22:55,060
<font color="#CCCCCC">Ingram</font>

456
00:22:51,150 --> 00:22:58,240
okay<font color="#E5E5E5"> now configuring the database the</font>

457
00:22:55,060 --> 00:23:02,230
huge pages<font color="#CCCCCC"> well both my sipping</font>

458
00:22:58,240 --> 00:23:07,840
phosphorus are mostly run by a regular

459
00:23:02,230 --> 00:23:12,360
user in<font color="#E5E5E5"> Linux right and</font><font color="#CCCCCC"> they access to</font>

460
00:23:07,840 --> 00:23:15,129
the huge<font color="#CCCCCC"> pages it is kind</font><font color="#E5E5E5"> of reserved to</font>

461
00:23:12,360 --> 00:23:19,449
users that are part<font color="#E5E5E5"> of this group here</font>

462
00:23:15,130 --> 00:23:21,220
<font color="#E5E5E5">huge TLB as a</font><font color="#CCCCCC"> Changu so the practical</font>

463
00:23:19,450 --> 00:23:23,890
<font color="#E5E5E5">way to do that is</font><font color="#CCCCCC"> just to have the my</font>

464
00:23:21,220 --> 00:23:26,560
<font color="#E5E5E5">second user or</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> user as a</font>

465
00:23:23,890 --> 00:23:34,240
member<font color="#E5E5E5"> of a given group and just set</font>

466
00:23:26,560 --> 00:23:39,090
this group here right<font color="#CCCCCC"> complementary</font><font color="#E5E5E5"> that</font>

467
00:23:34,240 --> 00:23:41,740
user needs to<font color="#E5E5E5"> have access so to lock</font>

468
00:23:39,090 --> 00:23:44,290
that amount of memory we<font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to</font>

469
00:23:41,740 --> 00:23:47,590
teach you to create and to<font color="#E5E5E5"> give table of</font>

470
00:23:44,290 --> 00:23:51,520
a boot or<font color="#E5E5E5"> shared buffers</font><font color="#CCCCCC"> so one way of</font>

471
00:23:47,590 --> 00:23:53,919
<font color="#E5E5E5">doing that is</font><font color="#CCCCCC"> by stating in during the</font>

472
00:23:51,520 --> 00:23:57,790
the initialization<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the service that</font>

473
00:23:53,920 --> 00:24:01,390
<font color="#CCCCCC">that user it has unlimited</font><font color="#E5E5E5"> access to</font>

474
00:23:57,790 --> 00:24:04,120
church you<font color="#CCCCCC"> to lock in memory in fact I</font>

475
00:24:01,390 --> 00:24:06,640
with<font color="#E5E5E5"> my secret list if you do that you</font>

476
00:24:04,120 --> 00:24:08,649
<font color="#E5E5E5">don't actually need to add my support to</font>

477
00:24:06,640 --> 00:24:11,280
that user group but that<font color="#CCCCCC"> is how it is</font>

478
00:24:08,650 --> 00:24:14,340
<font color="#CCCCCC">supposed should</font><font color="#E5E5E5"> be done</font>

479
00:24:11,280 --> 00:24:20,010
and then you just reload this<font color="#E5E5E5"> the the</font>

480
00:24:14,340 --> 00:24:22,439
<font color="#E5E5E5">the service files to</font><font color="#CCCCCC"> actually enable</font>

481
00:24:20,010 --> 00:24:25,110
that in my<font color="#E5E5E5"> secret and</font><font color="#CCCCCC"> phosphorus you</font>

482
00:24:22,440 --> 00:24:28,770
need to use the<font color="#E5E5E5"> the option large page on</font>

483
00:24:25,110 --> 00:24:31,049
in my Seco and huge page on in

484
00:24:28,770 --> 00:24:33,510
<font color="#E5E5E5">phosphorus</font><font color="#CCCCCC"> if you don't do that</font><font color="#E5E5E5"> it won't</font>

485
00:24:31,049 --> 00:24:35,100
<font color="#CCCCCC">just go and look for for memory in the</font>

486
00:24:33,510 --> 00:24:37,289
huge pages<font color="#CCCCCC"> full</font><font color="#E5E5E5"> to allocate to the</font>

487
00:24:35,100 --> 00:24:41,750
buffer porch the<font color="#CCCCCC"> sherry buffets</font><font color="#E5E5E5"> this is</font>

488
00:24:37,289 --> 00:24:48,120
the sign that<font color="#E5E5E5"> it should start using</font>

489
00:24:41,750 --> 00:24:50,159
memory<font color="#E5E5E5"> from the huge pages pool okay so</font>

490
00:24:48,120 --> 00:24:55,469
I'm going<font color="#CCCCCC"> to get back to that</font><font color="#E5E5E5"> during my</font>

491
00:24:50,159 --> 00:24:57,929
<font color="#E5E5E5">testing process and this</font><font color="#CCCCCC"> testing I want</font>

492
00:24:55,470 --> 00:25:01,230
you to remind you what I really had in

493
00:24:57,929 --> 00:25:04,320
<font color="#CCCCCC">mind</font><font color="#E5E5E5"> when I set up in this in this quest</font>

494
00:25:01,230 --> 00:25:06,720
was just to see how<font color="#E5E5E5"> having huge pages</font>

495
00:25:04,320 --> 00:25:08,760
enabled would affect the performance of

496
00:25:06,720 --> 00:25:11,580
my<font color="#CCCCCC"> supplying</font><font color="#E5E5E5"> phosphorus and</font><font color="#CCCCCC"> the way I</font>

497
00:25:08,760 --> 00:25:14,340
was planning to do that<font color="#E5E5E5"> was to</font><font color="#CCCCCC"> just run</font>

498
00:25:11,580 --> 00:25:16,860
a few benchmarks and see if I would

499
00:25:14,340 --> 00:25:20,100
realize any difference in<font color="#CCCCCC"> performs</font><font color="#E5E5E5"> right</font>

500
00:25:16,860 --> 00:25:24,559
<font color="#CCCCCC">I</font><font color="#E5E5E5"> wasn't really into looking at the TLB</font>

501
00:25:20,100 --> 00:25:29,070
improvements<font color="#E5E5E5"> Percy not at first at least</font>

502
00:25:24,559 --> 00:25:31,049
<font color="#E5E5E5">so my plan</font><font color="#CCCCCC"> was I'm going</font><font color="#E5E5E5"> to run my</font>

503
00:25:29,070 --> 00:25:34,049
<font color="#CCCCCC">sequin phosphorus</font><font color="#E5E5E5"> with some deep</font>

504
00:25:31,049 --> 00:25:37,049
benchmarks<font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> she's</font><font color="#E5E5E5"> bench TPCC which</font>

505
00:25:34,049 --> 00:25:40,770
he and his<font color="#CCCCCC"> bench OLTP to the bench the</font>

506
00:25:37,049 --> 00:25:43,139
piece you<font color="#CCCCCC"> see all of</font><font color="#E5E5E5"> them are artificial</font>

507
00:25:40,770 --> 00:25:44,400
workloads right we are not looking to

508
00:25:43,140 --> 00:25:47,370
something that<font color="#CCCCCC"> really goes into</font>

509
00:25:44,400 --> 00:25:48,690
<font color="#CCCCCC">productions just a way of testing things</font>

510
00:25:47,370 --> 00:25:50,879
<font color="#E5E5E5">and the TPCC</font>

511
00:25:48,690 --> 00:25:54,809
which is not an official at<font color="#CCCCCC"> the pcc</font>

512
00:25:50,880 --> 00:25:58,500
benchmark<font color="#E5E5E5"> it is a mix of selects inserts</font>

513
00:25:54,809 --> 00:26:00,480
updates in the same transactions<font color="#E5E5E5"> and you</font>

514
00:25:58,500 --> 00:26:05,549
will have a bunch of transactions like

515
00:26:00,480 --> 00:26:08,039
that so it's<font color="#CCCCCC"> really read right then i I</font>

516
00:26:05,549 --> 00:26:10,559
have tried<font color="#CCCCCC"> with his bench royalty P but</font>

517
00:26:08,039 --> 00:26:12,390
just the the read-only version and I

518
00:26:10,559 --> 00:26:14,460
ended up<font color="#CCCCCC"> testing PG bench with</font>

519
00:26:12,390 --> 00:26:17,970
<font color="#E5E5E5">phosphorus as well read-only</font>

520
00:26:14,460 --> 00:26:19,860
mode<font color="#E5E5E5"> and I was considering two</font>

521
00:26:17,970 --> 00:26:22,680
<font color="#E5E5E5">situations the</font><font color="#CCCCCC"> first situation</font><font color="#E5E5E5"> was when</font>

522
00:26:19,860 --> 00:26:25,889
<font color="#CCCCCC">I</font><font color="#E5E5E5"> could fit my entire litter set into</font>

523
00:26:22,680 --> 00:26:28,170
the<font color="#CCCCCC"> caching of</font><font color="#E5E5E5"> the database right and</font>

524
00:26:25,890 --> 00:26:31,680
the second situation<font color="#CCCCCC"> was when</font><font color="#E5E5E5"> I couldn't</font>

525
00:26:28,170 --> 00:26:34,860
fit my whole data set<font color="#CCCCCC"> into the the into</font>

526
00:26:31,680 --> 00:26:37,080
the<font color="#E5E5E5"> into the cache so what would happen</font>

527
00:26:34,860 --> 00:26:39,629
in this<font color="#E5E5E5"> mode here is that there would be</font>

528
00:26:37,080 --> 00:26:44,129
disk access to to to find out pages

529
00:26:39,630 --> 00:26:48,840
<font color="#E5E5E5">eventually I would run each test three</font>

530
00:26:44,130 --> 00:26:52,380
times<font color="#E5E5E5"> with</font><font color="#CCCCCC"> each page size and I would</font>

531
00:26:48,840 --> 00:26:58,260
also run each test with<font color="#CCCCCC"> different number</font>

532
00:26:52,380 --> 00:27:00,570
of<font color="#CCCCCC"> concurrent clients now each test with</font>

533
00:26:58,260 --> 00:27:03,629
a duration<font color="#E5E5E5"> of one hour so widest number</font>

534
00:27:00,570 --> 00:27:05,730
of<font color="#CCCCCC"> of concurrent clients here because</font>

535
00:27:03,630 --> 00:27:08,490
they are a multiple of the available

536
00:27:05,730 --> 00:27:09,930
<font color="#E5E5E5">treads on my testing server which was</font>

537
00:27:08,490 --> 00:27:12,780
like<font color="#CCCCCC"> an exonym</font>

538
00:27:09,930 --> 00:27:16,350
with two sockets<font color="#CCCCCC"> each socket</font><font color="#E5E5E5"> with 14</font>

539
00:27:12,780 --> 00:27:19,710
<font color="#E5E5E5">cars in each core 26 threads so in total</font>

540
00:27:16,350 --> 00:27:23,909
I would have 56 threads available in

541
00:27:19,710 --> 00:27:28,740
deserve<font color="#E5E5E5"> there it again 256 gigabyte of</font>

542
00:27:23,910 --> 00:27:30,540
<font color="#CCCCCC">run</font><font color="#E5E5E5"> as the</font><font color="#CCCCCC"> disk I tested with Ubuntu for</font>

543
00:27:28,740 --> 00:27:32,700
my Seco<font color="#CCCCCC"> I have used a pack on</font><font color="#E5E5E5"> a server</font>

544
00:27:30,540 --> 00:27:37,220
which is a drop-in replacement<font color="#E5E5E5"> for my</font>

545
00:27:32,700 --> 00:27:40,110
Seco and phosphorus phosphorus 10.6<font color="#E5E5E5"> I</font>

546
00:27:37,220 --> 00:27:42,650
<font color="#CCCCCC">compared the latest his bank and I have</font>

547
00:27:40,110 --> 00:27:47,070
used the PG<font color="#E5E5E5"> Bank that comes with</font>

548
00:27:42,650 --> 00:27:50,220
<font color="#CCCCCC">phosphorous</font><font color="#E5E5E5"> 10.6 the database</font>

549
00:27:47,070 --> 00:27:53,310
configuration<font color="#CCCCCC"> now what I have done here</font>

550
00:27:50,220 --> 00:27:55,650
was trying<font color="#E5E5E5"> to optimize that database in</font>

551
00:27:53,310 --> 00:27:58,290
both both cases for this<font color="#E5E5E5"> is bench TPCC</font>

552
00:27:55,650 --> 00:28:00,570
benchmark<font color="#E5E5E5"> right remember it was a</font>

553
00:27:58,290 --> 00:28:03,270
read/write benchmark<font color="#E5E5E5"> I haven't really</font>

554
00:28:00,570 --> 00:28:05,760
tuned that for the read-only benchmarks

555
00:28:03,270 --> 00:28:07,920
<font color="#E5E5E5">I run afterwards and what I would vary</font>

556
00:28:05,760 --> 00:28:11,940
in each test would be<font color="#E5E5E5"> those two things</font>

557
00:28:07,920 --> 00:28:14,640
here the size of the cache<font color="#CCCCCC"> and whether I</font>

558
00:28:11,940 --> 00:28:17,090
was using large pages or not in each

559
00:28:14,640 --> 00:28:21,430
test right

560
00:28:17,090 --> 00:28:24,309
so with<font color="#E5E5E5"> phosphorus</font>

561
00:28:21,430 --> 00:28:27,940
you<font color="#E5E5E5"> set huge pages to</font><font color="#CCCCCC"> all but you could</font>

562
00:28:24,309 --> 00:28:31,899
<font color="#E5E5E5">also set it to try right if you set</font><font color="#CCCCCC"> it</font>

563
00:28:27,940 --> 00:28:35,410
to try<font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact if you set it to own and</font>

564
00:28:31,900 --> 00:28:37,600
it<font color="#E5E5E5"> just doesn't have access to all that</font>

565
00:28:35,410 --> 00:28:39,790
memory<font color="#E5E5E5"> you have configured</font><font color="#CCCCCC"> Sherrod</font>

566
00:28:37,600 --> 00:28:42,580
buffers for it just<font color="#E5E5E5"> can't allocate as</font>

567
00:28:39,790 --> 00:28:44,740
much memory<font color="#E5E5E5"> it will fail to restart and</font>

568
00:28:42,580 --> 00:28:47,230
you<font color="#E5E5E5"> would say look I wasn't able to</font>

569
00:28:44,740 --> 00:28:49,330
<font color="#E5E5E5">allocate</font><font color="#CCCCCC"> that much</font><font color="#E5E5E5"> memory what what I</font>

570
00:28:47,230 --> 00:28:50,590
was actually looking<font color="#E5E5E5"> for was that much</font>

571
00:28:49,330 --> 00:28:54,909
and I<font color="#E5E5E5"> just couldn't</font>

572
00:28:50,590 --> 00:28:58,300
so it just<font color="#E5E5E5"> stops there right if I also</font>

573
00:28:54,910 --> 00:29:01,510
use huge pages<font color="#E5E5E5"> try which would say well</font>

574
00:28:58,300 --> 00:29:03,370
I have tried to<font color="#E5E5E5"> locate</font><font color="#CCCCCC"> I couldn't so I</font>

575
00:29:01,510 --> 00:29:08,559
<font color="#E5E5E5">resorted to the conventional memory pool</font>

576
00:29:03,370 --> 00:29:10,959
of<font color="#E5E5E5"> 4k pages right which you</font><font color="#CCCCCC"> either want</font>

577
00:29:08,559 --> 00:29:16,899
<font color="#E5E5E5">to use which page or you don't</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't</font>

578
00:29:10,960 --> 00:29:19,840
<font color="#E5E5E5">want to most cases</font><font color="#CCCCCC"> just try right</font><font color="#E5E5E5"> you</font>

579
00:29:16,900 --> 00:29:22,660
could if you if you use try then<font color="#CCCCCC"> you</font>

580
00:29:19,840 --> 00:29:25,030
make sure<font color="#E5E5E5"> you are</font><font color="#CCCCCC"> looking at the</font>

581
00:29:22,660 --> 00:29:28,720
bosphorus log afterwards to see if you

582
00:29:25,030 --> 00:29:32,020
are<font color="#E5E5E5"> effectively</font><font color="#CCCCCC"> using or</font><font color="#E5E5E5"> not with my</font>

583
00:29:28,720 --> 00:29:36,280
Seco it's a similar except there<font color="#CCCCCC"> is</font>

584
00:29:32,020 --> 00:29:38,139
there is<font color="#E5E5E5"> no try however it won't fail to</font>

585
00:29:36,280 --> 00:29:40,570
start if you have<font color="#E5E5E5"> said it</font><font color="#CCCCCC"> to start with</font>

586
00:29:38,140 --> 00:29:43,360
<font color="#CCCCCC">large pages and it</font><font color="#E5E5E5"> couldn't reach out</font>

587
00:29:40,570 --> 00:29:45,428
that much memory<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> continue it</font>

588
00:29:43,360 --> 00:29:48,219
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> conventional memory</font><font color="#CCCCCC"> pool</font><font color="#E5E5E5"> you</font>

589
00:29:45,429 --> 00:29:48,910
don't<font color="#E5E5E5"> think it's better but you can't</font>

590
00:29:48,220 --> 00:29:51,580
have it

591
00:29:48,910 --> 00:29:55,980
fail that they starting if it can't have

592
00:29:51,580 --> 00:29:59,740
access<font color="#E5E5E5"> to as much huge base right so</font>

593
00:29:55,980 --> 00:30:03,190
there comes<font color="#E5E5E5"> a big big barrier</font><font color="#CCCCCC"> I cross</font>

594
00:29:59,740 --> 00:30:07,570
<font color="#E5E5E5">during my tests with my Seco which was</font>

595
00:30:03,190 --> 00:30:11,230
<font color="#CCCCCC">using one gigabyte huge page right what</font>

596
00:30:07,570 --> 00:30:15,760
happened was that look<font color="#E5E5E5"> at that I had a</font>

597
00:30:11,230 --> 00:30:19,120
pool of 100 1 gigabyte huge<font color="#E5E5E5"> pages so I</font>

598
00:30:15,760 --> 00:30:23,290
had<font color="#E5E5E5"> 100 gigabyte of memory allocated to</font>

599
00:30:19,120 --> 00:30:25,780
the huge<font color="#E5E5E5"> pages</font><font color="#CCCCCC"> pool yet I was only able</font>

600
00:30:23,290 --> 00:30:27,850
to<font color="#E5E5E5"> start the biggest buffer pool I</font><font color="#CCCCCC"> was</font>

601
00:30:25,780 --> 00:30:32,020
<font color="#E5E5E5">able to start with</font><font color="#CCCCCC"> the set up was 12</font>

602
00:30:27,850 --> 00:30:34,030
<font color="#E5E5E5">giga byte buffer pool and eat</font><font color="#CCCCCC"> all my</font>

603
00:30:32,020 --> 00:30:38,800
memory here right

604
00:30:34,030 --> 00:30:41,320
so it took 97 pages<font color="#E5E5E5"> so 97 gigabytes</font>

605
00:30:38,800 --> 00:30:47,470
use it to initialize<font color="#E5E5E5"> a 12 gigabyte</font>

606
00:30:41,320 --> 00:30:50,169
buffer pool so this is my initialization

607
00:30:47,470 --> 00:30:52,990
<font color="#CCCCCC">some of the variables right so 12 mega</font>

608
00:30:50,170 --> 00:30:55,420
byte buffer pool<font color="#E5E5E5"> 8 buffer pool instances</font>

609
00:30:52,990 --> 00:30:59,200
you can you can kind<font color="#E5E5E5"> of segment a buffer</font>

610
00:30:55,420 --> 00:31:02,140
pool in many instances and the<font color="#E5E5E5"> default</font>

611
00:30:59,200 --> 00:31:04,840
chunk size of the buffer pool is 128

612
00:31:02,140 --> 00:31:08,400
megabytes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> took</font><font color="#CCCCCC"> me some</font><font color="#E5E5E5"> time but</font>

613
00:31:04,840 --> 00:31:11,679
but<font color="#E5E5E5"> I figure out</font><font color="#CCCCCC"> that you are actually</font>

614
00:31:08,400 --> 00:31:14,350
<font color="#E5E5E5">dividing the amount</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 12 gigabytes the</font>

615
00:31:11,680 --> 00:31:18,450
buffer pool size by the chunk size and

616
00:31:14,350 --> 00:31:22,629
then<font color="#E5E5E5"> you get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 96 page so in fact my</font>

617
00:31:18,450 --> 00:31:26,890
<font color="#CCCCCC">Seco won't allocate more than a chunk of</font>

618
00:31:22,630 --> 00:31:29,530
the buffer pool<font color="#E5E5E5"> per page</font><font color="#CCCCCC"> so in practices</font>

619
00:31:26,890 --> 00:31:32,440
was just<font color="#E5E5E5"> wasting the rest of the memory</font>

620
00:31:29,530 --> 00:31:36,100
here<font color="#E5E5E5"> right that's why it was allocating</font>

621
00:31:32,440 --> 00:31:39,760
96<font color="#E5E5E5"> plus 1 there is always an extra page</font>

622
00:31:36,100 --> 00:31:44,020
being<font color="#E5E5E5"> allocated with that right well</font>

623
00:31:39,760 --> 00:31:46,450
<font color="#CCCCCC">okay I thought let me just test it then</font>

624
00:31:44,020 --> 00:31:48,790
I<font color="#CCCCCC"> will just increase the chunk size</font><font color="#E5E5E5"> from</font>

625
00:31:46,450 --> 00:31:50,770
128 megabytes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> one gigabyte</font><font color="#E5E5E5"> which</font>

626
00:31:48,790 --> 00:31:54,070
makes sense<font color="#E5E5E5"> right</font><font color="#CCCCCC"> you are</font><font color="#E5E5E5"> working with a</font>

627
00:31:50,770 --> 00:31:55,000
larger page before<font color="#E5E5E5"> with 4 kilobytes and</font>

628
00:31:54,070 --> 00:31:57,490
<font color="#E5E5E5">2 megabytes</font>

629
00:31:55,000 --> 00:32:01,060
<font color="#E5E5E5">you could fit many of these into a chunk</font>

630
00:31:57,490 --> 00:32:03,430
size of 128 megabytes<font color="#E5E5E5"> so let me at least</font>

631
00:32:01,060 --> 00:32:09,399
try with<font color="#E5E5E5"> one gigabyte size with that</font>

632
00:32:03,430 --> 00:32:11,470
same logic<font color="#E5E5E5"> and well I just</font><font color="#CCCCCC"> said</font><font color="#E5E5E5"> chunk</font>

633
00:32:09,400 --> 00:32:15,670
size to<font color="#CCCCCC"> one gigabyte and started so I</font>

634
00:32:11,470 --> 00:32:18,600
should<font color="#CCCCCC"> use like ninety six gigabytes now</font>

635
00:32:15,670 --> 00:32:21,940
it's starting a buffer pool of 96

636
00:32:18,600 --> 00:32:27,149
gigabytes of size<font color="#E5E5E5"> yet it didn't started</font>

637
00:32:21,940 --> 00:32:33,820
<font color="#CCCCCC">I was able to start the same</font><font color="#E5E5E5"> set up here</font>

638
00:32:27,150 --> 00:32:37,210
<font color="#E5E5E5">but we've doubled the size of memory in</font>

639
00:32:33,820 --> 00:32:39,970
the huge base pool<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay I want to</font>

640
00:32:37,210 --> 00:32:41,590
<font color="#E5E5E5">start my buffer</font><font color="#CCCCCC"> with 96</font><font color="#E5E5E5"> gigabyte</font><font color="#CCCCCC"> I need</font>

641
00:32:39,970 --> 00:32:46,370
to have a<font color="#E5E5E5"> buffer pool that</font><font color="#CCCCCC"> is allocated</font>

642
00:32:41,590 --> 00:32:49,250
<font color="#E5E5E5">with twice the</font><font color="#CCCCCC"> size but +1 page</font>

643
00:32:46,370 --> 00:32:52,219
and then it<font color="#CCCCCC"> would just</font><font color="#E5E5E5"> reserve the</font>

644
00:32:49,250 --> 00:32:58,309
second half of of the of the huge pages

645
00:32:52,220 --> 00:32:59,900
<font color="#E5E5E5">pool right well that won't do right that</font>

646
00:32:58,309 --> 00:33:03,770
<font color="#E5E5E5">that just won't do</font>

647
00:32:59,900 --> 00:33:09,800
I tried with yet a larger chunk size and

648
00:33:03,770 --> 00:33:13,850
this time it<font color="#CCCCCC"> working so and look</font><font color="#E5E5E5"> I was</font>

649
00:33:09,800 --> 00:33:17,540
<font color="#E5E5E5">only using</font><font color="#CCCCCC"> 25 gigabytes of pages</font><font color="#E5E5E5"> for a</font>

650
00:33:13,850 --> 00:33:21,260
1960 byte buffer pool and I started

651
00:33:17,540 --> 00:33:23,928
making<font color="#E5E5E5"> more math and</font><font color="#CCCCCC"> Wow if I divide</font><font color="#E5E5E5"> 96</font>

652
00:33:21,260 --> 00:33:27,920
by 24 I have default<font color="#CCCCCC"> about chunk size</font>

653
00:33:23,929 --> 00:33:29,660
here but then anything<font color="#E5E5E5"> else didn't make</font>

654
00:33:27,920 --> 00:33:31,309
<font color="#CCCCCC">any sense</font><font color="#E5E5E5"> so it's not clear to me what</font>

655
00:33:29,660 --> 00:33:33,050
is the way that the buffer pool

656
00:33:31,309 --> 00:33:36,379
allocates memory when<font color="#E5E5E5"> it comes to one</font>

657
00:33:33,050 --> 00:33:38,510
gigabyte<font color="#E5E5E5"> a huge basement so I just got</font>

658
00:33:36,380 --> 00:33:41,300
<font color="#E5E5E5">in touch with with a friend at Oracle</font>

659
00:33:38,510 --> 00:33:43,580
and try to sort that out

660
00:33:41,300 --> 00:33:46,669
<font color="#E5E5E5">afterwards</font><font color="#CCCCCC"> but that is</font><font color="#E5E5E5"> something to</font><font color="#CCCCCC"> have</font>

661
00:33:43,580 --> 00:33:49,840
in mind if you ever<font color="#E5E5E5"> try now to</font><font color="#CCCCCC"> work with</font>

662
00:33:46,670 --> 00:33:53,770
my<font color="#CCCCCC"> sequel and one gigabyte</font><font color="#E5E5E5"> a huge page</font>

663
00:33:49,840 --> 00:33:57,290
<font color="#E5E5E5">now back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that to the benchmarks</font>

664
00:33:53,770 --> 00:34:00,950
<font color="#E5E5E5">starting with that</font><font color="#CCCCCC"> sis bench</font><font color="#E5E5E5"> which is a</font>

665
00:33:57,290 --> 00:34:02,960
mix of read and<font color="#E5E5E5"> write</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> prepared</font>

666
00:34:00,950 --> 00:34:06,470
the database with those two options<font color="#E5E5E5"> here</font>

667
00:34:02,960 --> 00:34:07,370
which will<font color="#CCCCCC"> give me a data set of 92</font>

668
00:34:06,470 --> 00:34:11,240
gigabytes

669
00:34:07,370 --> 00:34:14,239
not more or<font color="#E5E5E5"> less right and I would run</font>

670
00:34:11,239 --> 00:34:18,649
it with those conditions<font color="#CCCCCC"> that I have</font>

671
00:34:14,239 --> 00:34:20,270
<font color="#E5E5E5">explained before</font><font color="#CCCCCC"> and we've only varying</font>

672
00:34:18,649 --> 00:34:24,199
the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of threads each time for</font><font color="#CCCCCC"> each</font>

673
00:34:20,270 --> 00:34:26,389
page size each buffer pool size and the

674
00:34:24,199 --> 00:34:28,850
resulting after running<font color="#E5E5E5"> this test I</font>

675
00:34:26,389 --> 00:34:30,320
<font color="#E5E5E5">would get a 99 gigabyte data set so it</font>

676
00:34:28,850 --> 00:34:33,199
would grow<font color="#CCCCCC"> from</font><font color="#E5E5E5"> ninety</font><font color="#CCCCCC"> one point nine</font>

677
00:34:30,320 --> 00:34:36,379
point<font color="#E5E5E5"> half to 99 point now that</font><font color="#CCCCCC"> would be</font>

678
00:34:33,199 --> 00:34:39,678
<font color="#CCCCCC">the biggest</font><font color="#E5E5E5"> data set I had so I have</font>

679
00:34:36,379 --> 00:34:43,399
tested<font color="#E5E5E5"> his bench TPCC</font>

680
00:34:39,679 --> 00:34:46,639
with two buffer pool sides money was 96

681
00:34:43,399 --> 00:34:49,250
gabite and more the other one was twenty

682
00:34:46,639 --> 00:34:52,610
four gigabytes here and look I'm testing

683
00:34:49,250 --> 00:34:54,800
<font color="#CCCCCC">for kilobyte pages with each size of the</font>

684
00:34:52,610 --> 00:34:58,230
buffer pool<font color="#E5E5E5"> and I'm getting these</font>

685
00:34:54,800 --> 00:35:01,470
results<font color="#E5E5E5"> here so</font><font color="#CCCCCC"> basically</font>

686
00:34:58,230 --> 00:35:04,829
we have two groups<font color="#E5E5E5"> of lines here</font><font color="#CCCCCC"> one</font>

687
00:35:01,470 --> 00:35:08,009
group which is for the 96 gigabyte<font color="#E5E5E5"> and</font>

688
00:35:04,829 --> 00:35:11,160
one group<font color="#E5E5E5"> of lines that is for the 24</font>

689
00:35:08,010 --> 00:35:14,220
gigabytes of buffer pool<font color="#E5E5E5"> so since I</font>

690
00:35:11,160 --> 00:35:16,440
<font color="#E5E5E5">couldn't fit my buffer pool my data set</font>

691
00:35:14,220 --> 00:35:21,049
<font color="#E5E5E5">into the buffer pool in the second</font>

692
00:35:16,440 --> 00:35:23,369
<font color="#E5E5E5">option here the the results would be and</font>

693
00:35:21,050 --> 00:35:26,130
not as good<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it would need to</font>

694
00:35:23,369 --> 00:35:29,099
load the<font color="#E5E5E5"> data</font><font color="#CCCCCC"> from disk a lot</font><font color="#E5E5E5"> of the</font>

695
00:35:26,130 --> 00:35:32,040
time right<font color="#E5E5E5"> but what what really well</font>

696
00:35:29,099 --> 00:35:34,349
okay<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> it clear after</font>

697
00:35:32,040 --> 00:35:37,290
each iteration<font color="#E5E5E5"> I did recycle the data</font>

698
00:35:34,349 --> 00:35:40,710
<font color="#CCCCCC">gee which means I just</font><font color="#E5E5E5"> copied back that</font>

699
00:35:37,290 --> 00:35:42,750
initial preparation<font color="#E5E5E5"> I had made at first</font>

700
00:35:40,710 --> 00:35:45,060
and I drop at<font color="#E5E5E5"> the earliest cache</font><font color="#CCCCCC"> of</font>

701
00:35:42,750 --> 00:35:46,829
every<font color="#E5E5E5"> single time for my secret that</font>

702
00:35:45,060 --> 00:35:49,650
didn't make<font color="#E5E5E5"> any much difference but for</font>

703
00:35:46,829 --> 00:35:52,859
<font color="#CCCCCC">Postgres it does and looking at the same</font>

704
00:35:49,650 --> 00:35:56,420
graph<font color="#E5E5E5"> in a different way we see only two</font>

705
00:35:52,859 --> 00:35:59,250
lines<font color="#E5E5E5"> because</font><font color="#CCCCCC"> all the ninety six</font>

706
00:35:56,420 --> 00:36:01,589
gigabytes buffer pool lines are started

707
00:35:59,250 --> 00:36:04,619
here and<font color="#E5E5E5"> the twenty four gigabytes here</font>

708
00:36:01,589 --> 00:36:07,740
so in practice<font color="#CCCCCC"> I saw no</font><font color="#E5E5E5"> no benefit no</font>

709
00:36:04,619 --> 00:36:09,450
gain from<font color="#CCCCCC"> using about no performance</font>

710
00:36:07,740 --> 00:36:11,910
gains<font color="#E5E5E5"> from using huge base with my</font>

711
00:36:09,450 --> 00:36:17,629
<font color="#E5E5E5">sequel for this workload TPCC</font>

712
00:36:11,910 --> 00:36:20,069
<font color="#CCCCCC">we drive okay now phosphorus</font><font color="#E5E5E5"> same thing</font>

713
00:36:17,630 --> 00:36:23,010
<font color="#E5E5E5">just present in the second graph here</font>

714
00:36:20,069 --> 00:36:25,950
<font color="#E5E5E5">there is one set of lines for the bigger</font>

715
00:36:23,010 --> 00:36:28,020
<font color="#CCCCCC">Sharrod buffers and another set of line</font>

716
00:36:25,950 --> 00:36:29,960
for the<font color="#CCCCCC"> twenty-four Sharrod buffers they</font>

717
00:36:28,020 --> 00:36:34,770
actually converge at some point and<font color="#CCCCCC"> that</font>

718
00:36:29,960 --> 00:36:36,329
<font color="#CCCCCC">is again not trying</font><font color="#E5E5E5"> to compare my</font>

719
00:36:34,770 --> 00:36:38,940
<font color="#CCCCCC">suppose Postgres here right there</font><font color="#E5E5E5"> is a</font>

720
00:36:36,329 --> 00:36:42,690
lot<font color="#E5E5E5"> of things to consider</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we do know</font>

721
00:36:38,940 --> 00:36:45,150
that<font color="#CCCCCC"> Postgres for this workload</font><font color="#E5E5E5"> here</font>

722
00:36:42,690 --> 00:36:47,130
which is a bunch of small transactions

723
00:36:45,150 --> 00:36:49,050
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you create a connection each time</font>

724
00:36:47,130 --> 00:36:50,369
so if you<font color="#E5E5E5"> create a connection run a</font>

725
00:36:49,050 --> 00:36:52,020
transaction close the<font color="#CCCCCC"> connection open</font>

726
00:36:50,369 --> 00:36:54,540
<font color="#CCCCCC">other</font><font color="#E5E5E5"> another connection other</font>

727
00:36:52,020 --> 00:36:57,240
transaction so<font color="#CCCCCC"> Postgres handles this</font>

728
00:36:54,540 --> 00:36:58,890
opening closing of connections in a

729
00:36:57,240 --> 00:37:00,598
different way<font color="#CCCCCC"> because it</font><font color="#E5E5E5"> is processed</font>

730
00:36:58,890 --> 00:37:02,670
basic right so if we're<font color="#E5E5E5"> going to</font>

731
00:37:00,599 --> 00:37:04,470
actually<font color="#CCCCCC"> fork the</font><font color="#E5E5E5"> u.s.</font>

732
00:37:02,670 --> 00:37:07,380
process each<font color="#E5E5E5"> time a new connection is</font>

733
00:37:04,470 --> 00:37:09,450
made<font color="#E5E5E5"> whereas my secret threads they base</font>

734
00:37:07,380 --> 00:37:11,280
<font color="#E5E5E5">it so it won't fork the whole process</font><font color="#CCCCCC"> if</font>

735
00:37:09,450 --> 00:37:13,200
you just<font color="#E5E5E5"> create another thread</font>

736
00:37:11,280 --> 00:37:15,000
again<font color="#E5E5E5"> not trying to compare it this is</font>

737
00:37:13,200 --> 00:37:17,310
<font color="#E5E5E5">just kind of</font><font color="#CCCCCC"> different ways of doing</font>

738
00:37:15,000 --> 00:37:19,200
<font color="#CCCCCC">things so with</font><font color="#E5E5E5"> phosphorus in this</font>

739
00:37:17,310 --> 00:37:21,600
situation here<font color="#CCCCCC"> we would what we would</font>

740
00:37:19,200 --> 00:37:25,350
actually<font color="#E5E5E5"> use in practice</font><font color="#CCCCCC"> is a connection</font>

741
00:37:21,600 --> 00:37:26,850
pool right<font color="#E5E5E5"> when when it starts to have</font>

742
00:37:25,350 --> 00:37:28,650
more than a certain<font color="#CCCCCC"> number of</font>

743
00:37:26,850 --> 00:37:31,259
<font color="#CCCCCC">connections</font><font color="#E5E5E5"> depending on the workload</font>

744
00:37:28,650 --> 00:37:33,990
<font color="#E5E5E5">and depending how how fast you open and</font>

745
00:37:31,260 --> 00:37:37,410
close connections<font color="#E5E5E5"> a connection pool is</font>

746
00:37:33,990 --> 00:37:40,229
kind of a must<font color="#E5E5E5"> for football season so</font>

747
00:37:37,410 --> 00:37:44,430
now starting with<font color="#E5E5E5"> phosphorus with the</font>

748
00:37:40,230 --> 00:37:46,770
<font color="#E5E5E5">OLTP point select workload from</font><font color="#CCCCCC"> sis</font>

749
00:37:44,430 --> 00:37:50,879
bench<font color="#E5E5E5"> which is another read-only</font><font color="#CCCCCC"> right</font>

750
00:37:46,770 --> 00:37:54,300
just a read-only<font color="#CCCCCC"> benchmark</font><font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> I</font>

751
00:37:50,880 --> 00:37:56,790
have prepared the data set<font color="#CCCCCC"> I ever come</font>

752
00:37:54,300 --> 00:38:02,120
at the data set so it gets the tables

753
00:37:56,790 --> 00:38:05,550
clean and that resulted in in a bigger

754
00:38:02,120 --> 00:38:06,000
in a bigger data set so that<font color="#CCCCCC"> was on</font>

755
00:38:05,550 --> 00:38:10,920
purpose

756
00:38:06,000 --> 00:38:14,940
<font color="#E5E5E5">the the table size here was on purpose</font>

757
00:38:10,920 --> 00:38:16,890
<font color="#E5E5E5">to use as much memory as I could use in</font>

758
00:38:14,940 --> 00:38:19,170
<font color="#E5E5E5">that server not as much as I</font><font color="#CCCCCC"> could use</font>

759
00:38:16,890 --> 00:38:25,230
but way<font color="#CCCCCC"> more than</font><font color="#E5E5E5"> that I had used</font><font color="#CCCCCC"> it</font>

760
00:38:19,170 --> 00:38:27,470
before<font color="#E5E5E5"> so</font><font color="#CCCCCC"> running again each each each</font>

761
00:38:25,230 --> 00:38:32,900
test for one hour

762
00:38:27,470 --> 00:38:35,250
the results were with<font color="#E5E5E5"> this data set</font><font color="#CCCCCC"> I</font>

763
00:38:32,900 --> 00:38:38,820
wouldn't really see any difference even

764
00:38:35,250 --> 00:38:40,860
<font color="#E5E5E5">when working with a smaller shared</font>

765
00:38:38,820 --> 00:38:44,370
buffer<font color="#E5E5E5"> compared to a bigger share it</font>

766
00:38:40,860 --> 00:38:46,470
buffs<font color="#CCCCCC"> okay again this varies a lot</font>

767
00:38:44,370 --> 00:38:48,660
depending on<font color="#E5E5E5"> the workload we have right</font>

768
00:38:46,470 --> 00:38:51,930
for this workload<font color="#CCCCCC"> these worth deserts</font>

769
00:38:48,660 --> 00:38:54,240
<font color="#E5E5E5">and again no different whatsoever in</font>

770
00:38:51,930 --> 00:38:55,740
page size which was what I was<font color="#CCCCCC"> looking</font>

771
00:38:54,240 --> 00:38:57,620
for<font color="#CCCCCC"> when when I was</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> these</font>

772
00:38:55,740 --> 00:38:59,490
tests<font color="#E5E5E5"> right I was looking for some</font>

773
00:38:57,620 --> 00:39:04,920
performance different I could<font color="#CCCCCC"> actually</font>

774
00:38:59,490 --> 00:39:08,640
see and and and I didn't my<font color="#E5E5E5"> Seco same</font>

775
00:39:04,920 --> 00:39:11,340
thing except<font color="#E5E5E5"> that I couldn't run the</font>

776
00:39:08,640 --> 00:39:14,009
<font color="#E5E5E5">test for 168 buffer pool because I just</font>

777
00:39:11,340 --> 00:39:17,940
didn't had like<font color="#CCCCCC"> 360</font><font color="#E5E5E5"> something</font>

778
00:39:14,010 --> 00:39:20,250
memory on that<font color="#E5E5E5"> server right then well I</font>

779
00:39:17,940 --> 00:39:22,080
said well let me<font color="#E5E5E5"> just</font><font color="#CCCCCC"> try a different</font><font color="#E5E5E5"> a</font>

780
00:39:20,250 --> 00:39:23,989
completely different benchmark which I

781
00:39:22,080 --> 00:39:26,989
hadn't before<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is speed</font>

782
00:39:23,989 --> 00:39:28,999
so I<font color="#E5E5E5"> just took the exact same system the</font>

783
00:39:26,989 --> 00:39:31,269
same server with the<font color="#E5E5E5"> same setup same</font>

784
00:39:28,999 --> 00:39:33,828
configuration and run a<font color="#CCCCCC"> pitch</font><font color="#E5E5E5"> bench</font>

785
00:39:31,269 --> 00:39:37,279
which is<font color="#CCCCCC"> a phosphorus benchmark so it</font>

786
00:39:33,829 --> 00:39:41,599
won't<font color="#E5E5E5"> work on my Seco</font><font color="#CCCCCC"> I have prepared it</font>

787
00:39:37,279 --> 00:39:47,599
with these<font color="#E5E5E5"> settings resulting in 187</font>

788
00:39:41,599 --> 00:39:50,559
gigabyte data set<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I just run it with</font>

789
00:39:47,599 --> 00:39:54,140
no<font color="#CCCCCC"> vacuum because it is a read-only</font>

790
00:39:50,559 --> 00:39:57,979
<font color="#E5E5E5">workload and this time</font><font color="#CCCCCC"> I did get</font><font color="#E5E5E5"> some</font>

791
00:39:54,140 --> 00:40:01,640
differences<font color="#E5E5E5"> so first thing that is</font>

792
00:39:57,979 --> 00:40:04,279
<font color="#CCCCCC">interesting here is that phosphorus does</font>

793
00:40:01,640 --> 00:40:05,868
scales well for this<font color="#CCCCCC"> workload so we</font>

794
00:40:04,279 --> 00:40:08,660
increase the<font color="#CCCCCC"> number of concurrent</font>

795
00:40:05,869 --> 00:40:13,609
clients here and for all cases but one

796
00:40:08,660 --> 00:40:17,629
it does<font color="#E5E5E5"> escape as well</font><font color="#CCCCCC"> and now that case</font>

797
00:40:13,609 --> 00:40:20,808
of one it's<font color="#E5E5E5"> for fourth kilobyte page so</font>

798
00:40:17,630 --> 00:40:24,259
<font color="#E5E5E5">a ha okay so first time I use huge pages</font>

799
00:40:20,809 --> 00:40:27,170
<font color="#CCCCCC">and they make a very big difference when</font>

800
00:40:24,259 --> 00:40:29,809
compared<font color="#E5E5E5"> to huge page</font><font color="#CCCCCC"> width so with huge</font>

801
00:40:27,170 --> 00:40:32,989
<font color="#CCCCCC">page</font><font color="#E5E5E5"> and the bigger share it buffers so</font>

802
00:40:29,809 --> 00:40:37,420
<font color="#CCCCCC">the</font><font color="#E5E5E5"> shared buffers that use almost the</font>

803
00:40:32,989 --> 00:40:39,949
same size<font color="#E5E5E5"> of the data set</font>

804
00:40:37,420 --> 00:40:42,469
<font color="#CCCCCC">i-i-i-i kind</font><font color="#E5E5E5"> of get a completely</font>

805
00:40:39,949 --> 00:40:46,609
<font color="#CCCCCC">different performance when compared to</font>

806
00:40:42,469 --> 00:40:51,469
<font color="#E5E5E5">regular</font><font color="#CCCCCC"> 4k pages</font><font color="#E5E5E5"> when it goes above 112</font>

807
00:40:46,609 --> 00:40:53,269
concurrent clients<font color="#E5E5E5"> I did</font><font color="#CCCCCC"> double-check</font>

808
00:40:51,469 --> 00:40:54,859
those<font color="#CCCCCC"> numbers right</font><font color="#E5E5E5"> but it's a day let</font>

809
00:40:53,269 --> 00:40:56,419
<font color="#E5E5E5">me just give it another try with</font>

810
00:40:54,859 --> 00:40:57,920
<font color="#CCCCCC">transparent huge page the neighbor this</font>

811
00:40:56,420 --> 00:41:01,249
time just<font color="#E5E5E5"> to see if makes any difference</font>

812
00:40:57,920 --> 00:41:03,229
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I just tested with 188 gigabyte</font>

813
00:41:01,249 --> 00:41:09,738
pages<font color="#E5E5E5"> and it didn't made any difference</font>

814
00:41:03,229 --> 00:41:14,319
<font color="#CCCCCC">I again saw the</font><font color="#E5E5E5"> 4k pages</font><font color="#CCCCCC"> performing like</font>

815
00:41:09,739 --> 00:41:17,239
that so at<font color="#E5E5E5"> that point I kind of started</font>

816
00:41:14,319 --> 00:41:20,180
<font color="#E5E5E5">working well I didn't wanted to look at</font>

817
00:41:17,239 --> 00:41:22,279
TLB<font color="#E5E5E5"> but maybe I should so I started</font>

818
00:41:20,180 --> 00:41:25,149
<font color="#CCCCCC">looking at other people's research write</font>

819
00:41:22,279 --> 00:41:29,440
<font color="#CCCCCC">and then I stubbornly to</font><font color="#E5E5E5"> mark holocrons</font>

820
00:41:25,150 --> 00:41:32,529
<font color="#E5E5E5">which is a reference and he was just</font>

821
00:41:29,440 --> 00:41:35,299
pointing out what I was<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> and how</font>

822
00:41:32,529 --> 00:41:36,400
<font color="#E5E5E5">how wrong it could be right I was just</font>

823
00:41:35,299 --> 00:41:38,349
<font color="#E5E5E5">focusing on</font>

824
00:41:36,400 --> 00:41:41,410
on the throughput itself I wasn't look

825
00:41:38,349 --> 00:41:43,990
at<font color="#CCCCCC"> efficiency at all</font><font color="#E5E5E5"> what if in fact I</font>

826
00:41:41,410 --> 00:41:45,970
am getting the same throughput<font color="#E5E5E5"> so the</font>

827
00:41:43,990 --> 00:41:48,669
same amount<font color="#CCCCCC"> of transactions per second</font>

828
00:41:45,970 --> 00:41:49,720
but I'm using my<font color="#E5E5E5"> processors way less</font>

829
00:41:48,670 --> 00:41:51,880
than<font color="#CCCCCC"> before</font>

830
00:41:49,720 --> 00:41:53,740
then maybe I put scale with a<font color="#E5E5E5"> workload</font>

831
00:41:51,880 --> 00:41:56,200
that<font color="#E5E5E5"> would be more processor demanding</font>

832
00:41:53,740 --> 00:42:00,758
than<font color="#CCCCCC"> then they were the ones I was using</font>

833
00:41:56,200 --> 00:42:05,890
right<font color="#E5E5E5"> so I started looking at measuring</font>

834
00:42:00,759 --> 00:42:09,460
<font color="#E5E5E5">the efficiency of the TLB buffer with</font>

835
00:42:05,890 --> 00:42:14,049
larger page again trying to<font color="#E5E5E5"> see it at</font>

836
00:42:09,460 --> 00:42:16,480
the<font color="#E5E5E5"> CPU lab right so if I use</font><font color="#CCCCCC"> CL huge</font>

837
00:42:14,049 --> 00:42:20,529
pages<font color="#E5E5E5"> and indeed that means I am</font>

838
00:42:16,480 --> 00:42:23,920
<font color="#E5E5E5">exercising the TLB in a better way I</font>

839
00:42:20,529 --> 00:42:26,410
should have my CPU perform more

840
00:42:23,920 --> 00:42:28,059
optimized<font color="#E5E5E5"> right and here again I look at</font>

841
00:42:26,410 --> 00:42:31,629
another another researcher which<font color="#CCCCCC"> is</font>

842
00:42:28,059 --> 00:42:34,900
<font color="#CCCCCC">Alexander</font><font color="#E5E5E5"> lead</font><font color="#CCCCCC"> King and</font><font color="#E5E5E5"> I inspired most</font>

843
00:42:31,630 --> 00:42:37,960
of this part of the project<font color="#E5E5E5"> on his blog</font>

844
00:42:34,900 --> 00:42:40,089
post<font color="#E5E5E5"> and I look it at the actual</font>

845
00:42:37,960 --> 00:42:43,089
counters<font color="#E5E5E5"> that you can get with perf</font>

846
00:42:40,089 --> 00:42:46,808
<font color="#E5E5E5">looking at the at the processor level</font>

847
00:42:43,089 --> 00:42:49,328
<font color="#E5E5E5">and mostly what I'm looking here looking</font>

848
00:42:46,809 --> 00:42:52,539
<font color="#CCCCCC">for here is all</font><font color="#E5E5E5"> those counters that</font><font color="#CCCCCC"> are</font>

849
00:42:49,329 --> 00:42:54,519
related to myths<font color="#CCCCCC"> causes a walk which</font>

850
00:42:52,539 --> 00:42:58,390
<font color="#E5E5E5">actually means</font><font color="#CCCCCC"> this is the entry I am</font>

851
00:42:54,519 --> 00:43:00,848
<font color="#E5E5E5">trying to find out it's not on my TLB</font>

852
00:42:58,390 --> 00:43:03,879
cache<font color="#E5E5E5"> then I need to traverse I need to</font>

853
00:43:00,849 --> 00:43:08,079
walk across my<font color="#E5E5E5"> page table and that will</font>

854
00:43:03,880 --> 00:43:11,019
mean a miss of the<font color="#CCCCCC"> TLB</font><font color="#E5E5E5"> right another</font>

855
00:43:08,079 --> 00:43:13,569
thing he<font color="#CCCCCC"> looked at for was the actual</font>

856
00:43:11,019 --> 00:43:15,848
number<font color="#CCCCCC"> of CPU cycles spent in this</font>

857
00:43:13,569 --> 00:43:17,619
process<font color="#E5E5E5"> of missing a page in the cache</font>

858
00:43:15,849 --> 00:43:20,980
<font color="#E5E5E5">and walking through the</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the page</font>

859
00:43:17,619 --> 00:43:24,190
table and so there<font color="#E5E5E5"> are another another</font>

860
00:43:20,980 --> 00:43:26,440
another<font color="#E5E5E5"> counters that that will count</font>

861
00:43:24,190 --> 00:43:29,109
that some of them have<font color="#E5E5E5"> alliances</font><font color="#CCCCCC"> like</font>

862
00:43:26,440 --> 00:43:31,049
<font color="#E5E5E5">the first ones and this one</font><font color="#CCCCCC"> some don't</font>

863
00:43:29,109 --> 00:43:35,078
so you<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> use the code to</font>

864
00:43:31,049 --> 00:43:37,329
<font color="#CCCCCC">get</font><font color="#E5E5E5"> them and finally the number of main</font>

865
00:43:35,079 --> 00:43:41,589
memory reads<font color="#E5E5E5"> because that would be</font>

866
00:43:37,329 --> 00:43:46,749
affected by more TLB misses<font color="#E5E5E5"> five other</font>

867
00:43:41,589 --> 00:43:49,779
counters so how I did that<font color="#CCCCCC"> I brought my</font>

868
00:43:46,749 --> 00:43:53,770
<font color="#CCCCCC">tests</font><font color="#E5E5E5"> a few of the passes again</font>

869
00:43:49,780 --> 00:43:58,150
using<font color="#E5E5E5"> perv</font><font color="#CCCCCC"> and I have binded birth to</font>

870
00:43:53,770 --> 00:43:59,860
the actual database processing<font color="#CCCCCC"> the</font>

871
00:43:58,150 --> 00:44:02,260
<font color="#CCCCCC">braking system so I'm not looking at</font>

872
00:43:59,860 --> 00:44:05,500
this<font color="#E5E5E5"> bench here I'm just looking on how</font>

873
00:44:02,260 --> 00:44:11,440
my<font color="#CCCCCC"> sicko behaves</font><font color="#E5E5E5"> for the workload</font><font color="#CCCCCC"> that</font>

874
00:44:05,500 --> 00:44:14,140
is<font color="#E5E5E5"> presented during and for this point</font>

875
00:44:11,440 --> 00:44:18,340
here which was the this is being<font color="#E5E5E5"> tries</font>

876
00:44:14,140 --> 00:44:23,290
to<font color="#E5E5E5"> be read on the point select for one</font>

877
00:44:18,340 --> 00:44:29,440
gigabyte<font color="#CCCCCC"> 48 gigabyte buffer pool</font>

878
00:44:23,290 --> 00:44:34,570
compared<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> 4k point</font><font color="#E5E5E5"> in fact I would</font>

879
00:44:29,440 --> 00:44:39,340
have quite similar<font color="#CCCCCC"> statistics</font><font color="#E5E5E5"> from that</font>

880
00:44:34,570 --> 00:44:40,740
right which well<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> let me</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> something</font>

881
00:44:39,340 --> 00:44:44,710
else

882
00:44:40,740 --> 00:44:47,169
so I look at at the PG bench one when we

883
00:44:44,710 --> 00:44:51,670
actually see the discrepancy when it

884
00:44:47,170 --> 00:44:54,850
comes to these points<font color="#E5E5E5"> here which is 224</font>

885
00:44:51,670 --> 00:45:00,670
<font color="#E5E5E5">from current clients and comparing the</font>

886
00:44:54,850 --> 00:45:03,610
4k with the 1k 1 gigabyte page<font color="#CCCCCC"> so we do</font>

887
00:45:00,670 --> 00:45:06,190
<font color="#E5E5E5">see more of a difference but still it's</font>

888
00:45:03,610 --> 00:45:07,900
<font color="#CCCCCC">not that much right so I think well I</font>

889
00:45:06,190 --> 00:45:09,970
must<font color="#E5E5E5"> be looking</font><font color="#CCCCCC"> at some times</font><font color="#E5E5E5"> that is</font>

890
00:45:07,900 --> 00:45:13,360
something<font color="#E5E5E5"> you see here and then I</font>

891
00:45:09,970 --> 00:45:17,589
realize we<font color="#E5E5E5"> are comparing statistics but</font>

892
00:45:13,360 --> 00:45:20,080
for different<font color="#CCCCCC"> true puts</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> while here</font>

893
00:45:17,590 --> 00:45:24,370
I'm having<font color="#CCCCCC"> a much higher</font><font color="#E5E5E5"> throughput than</font>

894
00:45:20,080 --> 00:45:26,770
here<font color="#E5E5E5"> so if we if</font><font color="#CCCCCC"> we look</font><font color="#E5E5E5"> at that</font>

895
00:45:24,370 --> 00:45:29,560
the number<font color="#E5E5E5"> of transactions</font><font color="#CCCCCC"> that are</font>

896
00:45:26,770 --> 00:45:32,380
being<font color="#E5E5E5"> carried by each each test and if</font>

897
00:45:29,560 --> 00:45:36,790
we normalize<font color="#E5E5E5"> the results to the 4k ones</font>

898
00:45:32,380 --> 00:45:40,210
<font color="#E5E5E5">we will see that both the one gigabyte</font>

899
00:45:36,790 --> 00:45:43,050
pages and the<font color="#E5E5E5"> two megabyte pages they</font>

900
00:45:40,210 --> 00:45:47,740
perform better<font color="#E5E5E5"> in terms of TLB</font>

901
00:45:43,050 --> 00:45:50,340
utilization than the<font color="#E5E5E5"> 4k pages does right</font>

902
00:45:47,740 --> 00:45:50,339
how much<font color="#E5E5E5"> time</font>

903
00:45:50,410 --> 00:45:57,200
[Music]

904
00:45:53,140 --> 00:46:01,549
oops<font color="#CCCCCC"> so going back to that</font><font color="#E5E5E5"> looking at</font>

905
00:45:57,200 --> 00:46:05,810
the<font color="#CCCCCC"> four key pages</font><font color="#E5E5E5"> only this time</font><font color="#CCCCCC"> I'll</font>

906
00:46:01,550 --> 00:46:08,270
run<font color="#E5E5E5"> so what happened he was I got a I</font>

907
00:46:05,810 --> 00:46:10,610
got a message from from Vadim which is

908
00:46:08,270 --> 00:46:12,590
the city of<font color="#CCCCCC"> percona I I had borrowed one</font>

909
00:46:10,610 --> 00:46:14,360
of<font color="#CCCCCC"> his test service</font><font color="#E5E5E5"> right and he said</font>

910
00:46:12,590 --> 00:46:17,480
look are<font color="#CCCCCC"> you playing any test</font><font color="#E5E5E5"> right now</font>

911
00:46:14,360 --> 00:46:20,090
<font color="#CCCCCC">and I said yeah I'm running some some</font>

912
00:46:17,480 --> 00:46:22,190
some final PG<font color="#CCCCCC"> bench stuff that I hadn't</font>

913
00:46:20,090 --> 00:46:24,830
<font color="#CCCCCC">planning for before</font><font color="#E5E5E5"> and then he said</font>

914
00:46:22,190 --> 00:46:27,380
well<font color="#E5E5E5"> have you realized</font><font color="#CCCCCC"> that the server</font>

915
00:46:24,830 --> 00:46:31,490
is swapping<font color="#CCCCCC"> and I said what</font><font color="#E5E5E5"> it's</font>

916
00:46:27,380 --> 00:46:34,070
swapping<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay it was just a little</font>

917
00:46:31,490 --> 00:46:37,910
<font color="#E5E5E5">bit at first but that makes a hell of a</font>

918
00:46:34,070 --> 00:46:40,820
difference<font color="#E5E5E5"> right what happened he was my</font>

919
00:46:37,910 --> 00:46:42,589
mistake<font color="#CCCCCC"> I have just take the same</font>

920
00:46:40,820 --> 00:46:45,530
settings I have<font color="#E5E5E5"> used it for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> season</font>

921
00:46:42,590 --> 00:46:48,230
<font color="#CCCCCC">HTTP CC which a mix it work</font><font color="#E5E5E5"> load of</font>

922
00:46:45,530 --> 00:46:50,360
reads<font color="#E5E5E5"> and writes and user that with PG</font>

923
00:46:48,230 --> 00:46:53,900
bench<font color="#E5E5E5"> and the difference</font><font color="#CCCCCC"> between those</font>

924
00:46:50,360 --> 00:46:56,660
<font color="#E5E5E5">two is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> TPC see he doesn't</font>

925
00:46:53,900 --> 00:47:00,010
<font color="#CCCCCC">produce any</font><font color="#E5E5E5"> temporary tables and PG</font>

926
00:46:56,660 --> 00:47:03,529
bench produces a large amount of of<font color="#E5E5E5"> of</font>

927
00:47:00,010 --> 00:47:07,790
<font color="#CCCCCC">temporal tables so looking at the second</font>

928
00:47:03,530 --> 00:47:10,520
line here<font color="#E5E5E5"> the swap is even more evident</font>

929
00:47:07,790 --> 00:47:14,920
right so whenever you have a swap in a

930
00:47:10,520 --> 00:47:19,430
benchmark like that the results are gone

931
00:47:14,920 --> 00:47:24,260
and this is what<font color="#CCCCCC"> actually happen</font><font color="#E5E5E5"> it for</font>

932
00:47:19,430 --> 00:47:27,410
my<font color="#CCCCCC"> test so when I look at with four</font>

933
00:47:24,260 --> 00:47:30,320
kilobyte pages<font color="#CCCCCC"> I would get as much as 23</font>

934
00:47:27,410 --> 00:47:34,609
<font color="#E5E5E5">gigabytes of swapping across the</font><font color="#CCCCCC"> test</font>

935
00:47:30,320 --> 00:47:38,510
<font color="#E5E5E5">that's why we were seeing the results so</font>

936
00:47:34,610 --> 00:47:41,150
different<font color="#E5E5E5"> and if we look at the the</font><font color="#CCCCCC"> page</font>

937
00:47:38,510 --> 00:47:43,490
table the amount of memory being

938
00:47:41,150 --> 00:47:46,490
educated<font color="#E5E5E5"> to the page table with</font><font color="#CCCCCC"> four</font>

939
00:47:43,490 --> 00:47:48,799
kilobyte pages we can<font color="#E5E5E5"> actually see if it</font>

940
00:47:46,490 --> 00:47:50,810
requires much<font color="#CCCCCC"> more memory</font><font color="#E5E5E5"> just to</font>

941
00:47:48,800 --> 00:47:55,670
maintain the page table during<font color="#E5E5E5"> the tests</font>

942
00:47:50,810 --> 00:48:03,310
<font color="#E5E5E5">when compared to using larger page right</font>

943
00:47:55,670 --> 00:48:03,310
and adds to<font color="#E5E5E5"> the pressure right so</font>

944
00:48:03,550 --> 00:48:14,300
but online<font color="#E5E5E5"> benchmark</font><font color="#CCCCCC"> working great with</font>

945
00:48:07,070 --> 00:48:17,600
with huge pages<font color="#E5E5E5"> and bad with 4k pages we</font>

946
00:48:14,300 --> 00:48:19,970
saw the memory pressure<font color="#E5E5E5"> but there was</font>

947
00:48:17,600 --> 00:48:23,360
also some memory pressure we saw for for

948
00:48:19,970 --> 00:48:26,980
the others as well<font color="#CCCCCC"> why is this so much</font>

949
00:48:23,360 --> 00:48:26,980
different<font color="#E5E5E5"> any shots</font>

950
00:48:40,400 --> 00:48:51,690
<font color="#E5E5E5">okay that that is a possibility</font>

951
00:48:44,190 --> 00:48:53,370
okay<font color="#E5E5E5"> okay well mostly it means depends</font>

952
00:48:51,690 --> 00:48:56,160
on where the page<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> looking for is</font>

953
00:48:53,370 --> 00:48:57,930
actually<font color="#CCCCCC"> located</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> fact I was</font>

954
00:48:56,160 --> 00:49:00,210
discussing these results with a friend

955
00:48:57,930 --> 00:49:04,379
which used to<font color="#E5E5E5"> work with Oracle</font><font color="#CCCCCC"> the</font>

956
00:49:00,210 --> 00:49:07,340
Oracle database<font color="#E5E5E5"> and what he told me was</font>

957
00:49:04,380 --> 00:49:10,050
<font color="#E5E5E5">you know Fernando we never really saw</font>

958
00:49:07,340 --> 00:49:11,400
performance gains with using huge tables

959
00:49:10,050 --> 00:49:14,240
and at the time they were using<font color="#CCCCCC"> two</font>

960
00:49:11,400 --> 00:49:18,990
megabyte huge tables<font color="#E5E5E5"> but we did use</font><font color="#CCCCCC"> that</font>

961
00:49:14,240 --> 00:49:22,259
<font color="#E5E5E5">for some setups and you know why I said</font>

962
00:49:18,990 --> 00:49:26,430
no and said well well static huge pages

963
00:49:22,260 --> 00:49:29,490
<font color="#E5E5E5">they cannot be swapped</font><font color="#CCCCCC"> to disk</font><font color="#E5E5E5"> right if</font>

964
00:49:26,430 --> 00:49:32,970
you have your<font color="#E5E5E5"> entire shared buffer</font><font color="#CCCCCC"> in</font>

965
00:49:29,490 --> 00:49:34,979
<font color="#CCCCCC">two huge pages</font><font color="#E5E5E5"> there is no way the</font>

966
00:49:32,970 --> 00:49:36,419
server is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> swap that on disk</font>

967
00:49:34,980 --> 00:49:39,150
when there is memory<font color="#E5E5E5"> pressure is going</font>

968
00:49:36,420 --> 00:49:40,890
<font color="#E5E5E5">to swap anything else but that that</font><font color="#CCCCCC"> that</font>

969
00:49:39,150 --> 00:49:43,470
could be<font color="#CCCCCC"> brewed but could be bad as well</font>

970
00:49:40,890 --> 00:49:47,220
but there is the<font color="#E5E5E5"> takeaway from from this</font>

971
00:49:43,470 --> 00:49:49,350
lesson<font color="#E5E5E5"> here so there was a lot</font><font color="#CCCCCC"> of memory</font>

972
00:49:47,220 --> 00:49:52,680
pressure here<font color="#E5E5E5"> because of the page table</font>

973
00:49:49,350 --> 00:49:55,380
<font color="#CCCCCC">size but also because the huge pages</font>

974
00:49:52,680 --> 00:49:59,339
<font color="#CCCCCC">didn't pass it</font><font color="#E5E5E5"> to that it would affect</font>

975
00:49:55,380 --> 00:50:02,520
maybe some some isolated connections but

976
00:49:59,340 --> 00:50:06,540
not the<font color="#CCCCCC"> Sharrod buffers so yeah if you</font>

977
00:50:02,520 --> 00:50:08,130
look at<font color="#CCCCCC"> oracle recommendation from from</font>

978
00:50:06,540 --> 00:50:12,900
various experts you will see they

979
00:50:08,130 --> 00:50:17,000
actually<font color="#CCCCCC"> they actually use huge</font><font color="#E5E5E5"> pages</font>

980
00:50:12,900 --> 00:50:20,820
just for for for<font color="#E5E5E5"> for avoiding swapping</font>

981
00:50:17,000 --> 00:50:25,410
so sorry<font color="#E5E5E5"> and</font><font color="#CCCCCC"> just pass my time</font><font color="#E5E5E5"> what I</font>

982
00:50:20,820 --> 00:50:26,940
really wanted to say was<font color="#CCCCCC"> that I was I</font>

983
00:50:25,410 --> 00:50:28,529
wasn't<font color="#CCCCCC"> actually prepared for further</font>

984
00:50:26,940 --> 00:50:30,600
<font color="#CCCCCC">that venture I was looking at something</font>

985
00:50:28,530 --> 00:50:33,480
<font color="#CCCCCC">different right and I had this notion</font>

986
00:50:30,600 --> 00:50:35,279
that<font color="#E5E5E5"> the databases</font><font color="#CCCCCC"> will always benefit</font>

987
00:50:33,480 --> 00:50:37,230
<font color="#CCCCCC">from working</font><font color="#E5E5E5"> with huge</font><font color="#CCCCCC"> pages which</font><font color="#E5E5E5"> is</font>

988
00:50:35,280 --> 00:50:39,390
not necessarily<font color="#E5E5E5"> always the case of</font>

989
00:50:37,230 --> 00:50:41,310
course<font color="#E5E5E5"> I haven't</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at all</font><font color="#CCCCCC"> kinds of</font>

990
00:50:39,390 --> 00:50:45,060
workloads and<font color="#E5E5E5"> I must at least look at</font>

991
00:50:41,310 --> 00:50:47,279
more workloads do to tell this with<font color="#E5E5E5"> more</font>

992
00:50:45,060 --> 00:50:49,520
certainty<font color="#CCCCCC"> right and what</font><font color="#E5E5E5"> is certain is</font>

993
00:50:47,280 --> 00:50:52,190
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> my Seco support for one year</font>

994
00:50:49,520 --> 00:50:57,460
which page right<font color="#CCCCCC"> now it is</font><font color="#E5E5E5"> kind of kind</font>

995
00:50:52,190 --> 00:50:57,460
of broken so thank you

996
00:51:02,010 --> 00:51:04,070
<font color="#E5E5E5">you</font>

