1
00:03:04,640 --> 00:03:12,958
so so this<font color="#CCCCCC"> is the list</font><font color="#E5E5E5"> of components for</font>

2
00:03:08,040 --> 00:03:17,399
the hello world demo<font color="#CCCCCC"> which we basically</font>

3
00:03:12,959 --> 00:03:22,170
<font color="#E5E5E5">see a couple of interesting things</font><font color="#CCCCCC"> that</font>

4
00:03:17,400 --> 00:03:24,480
<font color="#E5E5E5">will be also shown later one of them is</font>

5
00:03:22,170 --> 00:03:28,140
a<font color="#CCCCCC"> so-called</font><font color="#E5E5E5"> net script which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a Lua</font>

6
00:03:24,480 --> 00:03:31,048
script which will be used<font color="#CCCCCC"> by our init</font>

7
00:03:28,140 --> 00:03:33,540
process called net which embeds a Lua

8
00:03:31,049 --> 00:03:36,810
interpreter<font color="#E5E5E5"> in itself to basically</font>

9
00:03:33,540 --> 00:03:39,319
configure<font color="#E5E5E5"> the system spawn new processes</font>

10
00:03:36,810 --> 00:03:44,400
and<font color="#E5E5E5"> interconnect them</font><font color="#CCCCCC"> via capabilities</font>

11
00:03:39,319 --> 00:03:47,069
so for the hello world program<font color="#CCCCCC"> the net</font>

12
00:03:44,400 --> 00:03:50,989
script is very<font color="#CCCCCC"> simple as you can</font><font color="#E5E5E5"> see it</font>

13
00:03:47,069 --> 00:03:53,429
basically consists of requiring<font color="#E5E5E5"> a</font><font color="#CCCCCC"> L</font><font color="#E5E5E5"> for</font>

14
00:03:50,989 --> 00:03:56,190
the<font color="#CCCCCC"> o for Lua package and then</font>

15
00:03:53,430 --> 00:03:59,610
<font color="#CCCCCC">immediately using it using</font><font color="#E5E5E5"> its</font>

16
00:03:56,190 --> 00:04:05,190
functionality to start the<font color="#CCCCCC"> ROM the hello</font>

17
00:03:59,610 --> 00:04:07,470
world<font color="#CCCCCC"> program</font><font color="#E5E5E5"> so when we visualize the</font>

18
00:04:05,190 --> 00:04:11,280
situation<font color="#CCCCCC"> there will be a couple of</font>

19
00:04:07,470 --> 00:04:14,310
entities in the running system there

20
00:04:11,280 --> 00:04:16,380
will be the<font color="#CCCCCC"> Fiasco OC microkernel on top</font>

21
00:04:14,310 --> 00:04:19,500
of which there will be<font color="#E5E5E5"> Sigma</font><font color="#CCCCCC"> 0 process</font>

22
00:04:16,380 --> 00:04:21,510
which is the<font color="#CCCCCC"> route pager</font><font color="#E5E5E5"> for the route</font>

23
00:04:19,500 --> 00:04:26,130
process<font color="#E5E5E5"> the route process itself called</font>

24
00:04:21,510 --> 00:04:29,490
<font color="#CCCCCC">mo that's</font><font color="#E5E5E5"> the process</font><font color="#CCCCCC"> which provides the</font>

25
00:04:26,130 --> 00:04:32,310
basic<font color="#CCCCCC"> Alpha primitives like data spaces</font>

26
00:04:29,490 --> 00:04:36,050
which are memory like objects that can

27
00:04:32,310 --> 00:04:38,970
<font color="#CCCCCC">be mapped into some</font><font color="#E5E5E5"> other address spaces</font>

28
00:04:36,050 --> 00:04:42,900
it also provides us<font color="#E5E5E5"> with a couple</font><font color="#CCCCCC"> of</font>

29
00:04:38,970 --> 00:04:46,590
other capabilities such as<font color="#E5E5E5"> the</font><font color="#CCCCCC"> namespace</font>

30
00:04:42,900 --> 00:04:49,650
capability called<font color="#E5E5E5"> ROM which can be</font>

31
00:04:46,590 --> 00:04:53,219
further used by the<font color="#E5E5E5"> other components to</font>

32
00:04:49,650 --> 00:04:57,870
<font color="#E5E5E5">access for</font><font color="#CCCCCC"> example the hello dotnet</font><font color="#E5E5E5"> lua</font>

33
00:04:53,220 --> 00:05:01,440
script<font color="#E5E5E5"> so net uses it to get its the</font>

34
00:04:57,870 --> 00:05:04,110
source code<font color="#E5E5E5"> that it will interpret all</font>

35
00:05:01,440 --> 00:05:07,169
<font color="#E5E5E5">the boot modules</font><font color="#CCCCCC"> also are included in</font>

36
00:05:04,110 --> 00:05:09,990
this<font color="#CCCCCC"> rom namespace</font><font color="#E5E5E5"> in form of data</font>

37
00:05:07,169 --> 00:05:13,940
spaces so that's how actually the other

38
00:05:09,990 --> 00:05:16,580
tasks can get to their content<font color="#CCCCCC"> and</font>

39
00:05:13,940 --> 00:05:20,150
another<font color="#CCCCCC"> example of</font>

40
00:05:16,580 --> 00:05:25,250
of an entity provided by<font color="#CCCCCC"> Moe is</font><font color="#E5E5E5"> the</font>

41
00:05:20,150 --> 00:05:27,409
default blog which is<font color="#E5E5E5"> the default output</font>

42
00:05:25,250 --> 00:05:28,969
if we don't provide anything else that's

43
00:05:27,409 --> 00:05:33,620
what all the components will be using

44
00:05:28,969 --> 00:05:36,650
for printing out stuff<font color="#CCCCCC"> and the L furry</font>

45
00:05:33,620 --> 00:05:39,740
component<font color="#E5E5E5"> that's a binary that will be</font>

46
00:05:36,650 --> 00:05:42,258
mapped in every tasks tasks address

47
00:05:39,740 --> 00:05:46,759
space and contains<font color="#E5E5E5"> the core alpha</font><font color="#CCCCCC"> e</font>

48
00:05:42,259 --> 00:05:50,539
functionality so now<font color="#E5E5E5"> that's time</font><font color="#CCCCCC"> for</font>

49
00:05:46,759 --> 00:05:53,449
this short demo<font color="#E5E5E5"> hopefully you can you</font>

50
00:05:50,539 --> 00:05:55,190
can see the<font color="#CCCCCC"> size of the letters</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> okay</font>

51
00:05:53,449 --> 00:05:59,360
<font color="#E5E5E5">for you okay</font>

52
00:05:55,190 --> 00:06:10,159
so everything is already<font color="#E5E5E5"> pre-built this</font>

53
00:05:59,360 --> 00:06:12,860
is just<font color="#E5E5E5"> very how how we run it in QA so</font>

54
00:06:10,159 --> 00:06:16,430
we can notice<font color="#CCCCCC"> that some lines were</font>

55
00:06:12,860 --> 00:06:17,960
printed by<font color="#CCCCCC"> moe then one line printed or</font>

56
00:06:16,430 --> 00:06:19,400
two lines painted by net and then we

57
00:06:17,960 --> 00:06:25,099
have this<font color="#CCCCCC"> HelloWorld application</font><font color="#E5E5E5"> which</font>

58
00:06:19,400 --> 00:06:28,849
just in a loop prints hello world<font color="#E5E5E5"> so</font>

59
00:06:25,099 --> 00:06:31,430
this<font color="#E5E5E5"> is a very basic basic example just</font>

60
00:06:28,849 --> 00:06:35,120
to<font color="#E5E5E5"> illustrate how</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be done now</font>

61
00:06:31,430 --> 00:06:39,409
we will make a little bit<font color="#E5E5E5"> of a jump to</font>

62
00:06:35,120 --> 00:06:42,190
something<font color="#E5E5E5"> map to something which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> much</font>

63
00:06:39,409 --> 00:06:48,680
more complex such as<font color="#CCCCCC"> running a Linux VM</font>

64
00:06:42,190 --> 00:06:52,879
<font color="#E5E5E5">on top of alpha</font><font color="#CCCCCC"> e so this time our</font>

65
00:06:48,680 --> 00:06:55,520
modules list<font color="#CCCCCC"> we will take hello binary</font>

66
00:06:52,879 --> 00:06:57,949
<font color="#E5E5E5">away and we will add some new binaries</font>

67
00:06:55,520 --> 00:07:00,529
<font color="#E5E5E5">this time it will</font><font color="#CCCCCC"> be the</font><font color="#E5E5E5"> UV</font><font color="#CCCCCC"> mm binary</font>

68
00:06:57,949 --> 00:07:04,219
which is the user space<font color="#E5E5E5"> a virtual</font>

69
00:07:00,529 --> 00:07:09,650
machine<font color="#E5E5E5"> monitor used in</font><font color="#CCCCCC"> l3</font><font color="#E5E5E5"> systems the</font>

70
00:07:04,219 --> 00:07:12,710
UV<font color="#E5E5E5"> mm net script and also a binary the</font>

71
00:07:09,650 --> 00:07:16,698
device tree which will be used<font color="#CCCCCC"> by the</font>

72
00:07:12,710 --> 00:07:21,440
Linux guest<font color="#E5E5E5"> and a ram disk and also a</font>

73
00:07:16,699 --> 00:07:24,560
Linux kernel image the next crepe<font color="#CCCCCC"> that</font>

74
00:07:21,440 --> 00:07:26,060
we will<font color="#E5E5E5"> use this time is also much more</font>

75
00:07:24,560 --> 00:07:30,020
<font color="#E5E5E5">complicated than the hello world example</font>

76
00:07:26,060 --> 00:07:30,410
<font color="#CCCCCC">later we will see</font><font color="#E5E5E5"> how to get rid of some</font>

77
00:07:30,020 --> 00:07:32,359
<font color="#CCCCCC">of the</font>

78
00:07:30,410 --> 00:07:35,170
like<font color="#E5E5E5"> city and</font><font color="#CCCCCC"> residency</font><font color="#E5E5E5"> in this script</font>

79
00:07:32,360 --> 00:07:41,090
but this is<font color="#E5E5E5"> just for illustration</font>

80
00:07:35,170 --> 00:07:46,040
purposes<font color="#CCCCCC"> so instead of hello</font>

81
00:07:41,090 --> 00:07:48,770
the script<font color="#CCCCCC"> is spawning</font><font color="#E5E5E5"> a new binary</font>

82
00:07:46,040 --> 00:07:50,870
<font color="#E5E5E5">called</font><font color="#CCCCCC"> UV</font><font color="#E5E5E5"> mmm it's passing it some</font>

83
00:07:48,770 --> 00:07:53,359
arguments such as the device tree<font color="#E5E5E5"> and</font>

84
00:07:50,870 --> 00:07:58,370
the RAM disk<font color="#E5E5E5"> and Linux kernel image and</font>

85
00:07:53,360 --> 00:08:01,490
some Linux boot command-line and besides

86
00:07:58,370 --> 00:08:05,810
of<font color="#CCCCCC"> that which is new to this example is</font>

87
00:08:01,490 --> 00:08:08,180
that we are<font color="#E5E5E5"> passing it</font><font color="#CCCCCC"> the lock</font>

88
00:08:05,810 --> 00:08:11,090
capability from the initial environment

89
00:08:08,180 --> 00:08:13,070
of net and giving it to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> newly</font>

90
00:08:11,090 --> 00:08:17,349
<font color="#E5E5E5">spawned tax so that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will be also able</font>

91
00:08:13,070 --> 00:08:20,270
<font color="#CCCCCC">to use it</font><font color="#E5E5E5"> and another one is the Rama</font>

92
00:08:17,350 --> 00:08:23,780
capability which will be known<font color="#E5E5E5"> under</font><font color="#CCCCCC"> the</font>

93
00:08:20,270 --> 00:08:26,359
string<font color="#CCCCCC"> Ram</font><font color="#E5E5E5"> inside of the newest pone</font>

94
00:08:23,780 --> 00:08:28,880
<font color="#E5E5E5">task which is a data space provided by</font>

95
00:08:26,360 --> 00:08:32,260
<font color="#CCCCCC">MOU and which will</font><font color="#E5E5E5"> be basically used by</font>

96
00:08:28,880 --> 00:08:32,260
the<font color="#E5E5E5"> guest as</font><font color="#CCCCCC"> its Rama</font>

97
00:08:34,240 --> 00:08:42,080
so when visualized it will look like

98
00:08:39,049 --> 00:08:44,179
<font color="#E5E5E5">this we see that also the</font><font color="#CCCCCC"> UV mm dotnet</font>

99
00:08:42,080 --> 00:08:48,560
is another data space in<font color="#E5E5E5"> this example</font>

100
00:08:44,179 --> 00:08:51,199
and<font color="#CCCCCC"> the RAM data space is figuring also</font>

101
00:08:48,560 --> 00:08:59,329
on the pic on<font color="#E5E5E5"> the picture as well</font><font color="#CCCCCC"> as the</font>

102
00:08:51,200 --> 00:09:02,840
log capability and also the same for<font color="#E5E5E5"> the</font>

103
00:08:59,330 --> 00:09:06,890
device tree<font color="#E5E5E5"> and all the images that the</font>

104
00:09:02,840 --> 00:09:10,330
<font color="#CCCCCC">guest will be using the picture is made</font>

105
00:09:06,890 --> 00:09:13,310
this<font color="#CCCCCC"> way to signify that the unmodified</font>

106
00:09:10,330 --> 00:09:19,670
<font color="#E5E5E5">Linux will be running on top of of the</font>

107
00:09:13,310 --> 00:09:23,050
<font color="#CCCCCC">users base virtual machine monitor so</font>

108
00:09:19,670 --> 00:09:27,770
let's let's see how<font color="#CCCCCC"> this work when when</font>

109
00:09:23,050 --> 00:09:31,420
when we run it as a demo so this time

110
00:09:27,770 --> 00:09:31,420
it's called<font color="#E5E5E5"> um</font>

111
00:09:37,780 --> 00:09:43,400
so here we see how<font color="#CCCCCC"> MO and net are</font>

112
00:09:41,690 --> 00:09:46,490
starting that we saw a<font color="#CCCCCC"> couple of lines</font>

113
00:09:43,400 --> 00:09:50,540
from<font color="#CCCCCC"> vmm which is a virtual machine</font>

114
00:09:46,490 --> 00:09:53,110
monitor and<font color="#E5E5E5"> now this is already</font><font color="#CCCCCC"> a linux</font>

115
00:09:50,540 --> 00:09:55,930
command line<font color="#CCCCCC"> so we can for instance</font>

116
00:09:53,110 --> 00:10:02,290
<font color="#E5E5E5">communicate with it and see</font><font color="#CCCCCC"> that it's</font>

117
00:09:55,930 --> 00:10:05,300
<font color="#CCCCCC">Linux four dots 19.8</font><font color="#E5E5E5"> if we for example</font>

118
00:10:02,290 --> 00:10:07,280
<font color="#E5E5E5">create a local time</font><font color="#CCCCCC"> we see</font><font color="#E5E5E5"> that it's we</font>

119
00:10:05,300 --> 00:10:10,579
are back in 1970s that's because there

120
00:10:07,280 --> 00:10:12,860
is no at this<font color="#E5E5E5"> point of the presentation</font>

121
00:10:10,580 --> 00:10:19,460
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is no hardware real-time clock</font>

122
00:10:12,860 --> 00:10:21,530
passed to the<font color="#CCCCCC"> guest so we see that we</font>

123
00:10:19,460 --> 00:10:29,330
haven't configured any network

124
00:10:21,530 --> 00:10:32,750
interfaces yet so that's running<font color="#E5E5E5"> a</font>

125
00:10:29,330 --> 00:10:36,760
single Linux VM<font color="#E5E5E5"> how about if</font><font color="#CCCCCC"> we wanted</font>

126
00:10:32,750 --> 00:10:40,280
<font color="#CCCCCC">to actually</font><font color="#E5E5E5"> run two</font><font color="#CCCCCC"> of them now</font>

127
00:10:36,760 --> 00:10:43,610
we will face a problem

128
00:10:40,280 --> 00:10:46,430
what to do with the input<font color="#CCCCCC"> output of</font><font color="#E5E5E5"> both</font>

129
00:10:43,610 --> 00:10:48,530
the ends<font color="#E5E5E5"> how they will mix or how to</font>

130
00:10:46,430 --> 00:10:51,319
prevent<font color="#CCCCCC"> them from mixing</font><font color="#E5E5E5"> so that we</font>

131
00:10:48,530 --> 00:10:53,209
can't tell one from another one and the

132
00:10:51,320 --> 00:10:57,320
answer<font color="#CCCCCC"> is we will need to</font><font color="#E5E5E5"> use another</font>

133
00:10:53,210 --> 00:10:59,960
<font color="#E5E5E5">component from alpha</font><font color="#CCCCCC"> II which is</font><font color="#E5E5E5"> called</font>

134
00:10:57,320 --> 00:11:02,990
<font color="#E5E5E5">cones which is the console multiplexer</font>

135
00:10:59,960 --> 00:11:06,920
<font color="#E5E5E5">and as another improvement to this</font>

136
00:11:02,990 --> 00:11:09,590
example we will no longer write very

137
00:11:06,920 --> 00:11:11,719
long and complex net scrapes but we will

138
00:11:09,590 --> 00:11:14,360
use<font color="#E5E5E5"> this</font><font color="#CCCCCC"> VM MDOC Lua</font>

139
00:11:11,720 --> 00:11:16,340
<font color="#CCCCCC">net script which kind</font><font color="#E5E5E5"> of wraps all this</font>

140
00:11:14,360 --> 00:11:21,130
functionality that we need and allows us

141
00:11:16,340 --> 00:11:28,850
<font color="#E5E5E5">to to configure everything in a much</font>

142
00:11:21,130 --> 00:11:33,980
<font color="#E5E5E5">concise way so besides the elf for</font>

143
00:11:28,850 --> 00:11:37,340
package<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can import the vmm Lua</font>

144
00:11:33,980 --> 00:11:40,520
package into our net script<font color="#E5E5E5"> and then use</font>

145
00:11:37,340 --> 00:11:44,030
it<font color="#CCCCCC"> for instance we can define a</font><font color="#E5E5E5"> Lua</font>

146
00:11:40,520 --> 00:11:46,960
function called function<font color="#E5E5E5"> VM around it</font>

147
00:11:44,030 --> 00:11:49,480
start<font color="#CCCCCC"> the method</font>

148
00:11:46,960 --> 00:11:52,030
and just give<font color="#CCCCCC"> it some arguments such as</font>

149
00:11:49,480 --> 00:11:55,930
the<font color="#E5E5E5"> number of the VM that we are</font>

150
00:11:52,030 --> 00:11:58,030
<font color="#E5E5E5">starting and some network capability and</font>

151
00:11:55,930 --> 00:12:02,380
some good arguments<font color="#CCCCCC"> and also capability</font>

152
00:11:58,030 --> 00:12:06,790
for accessing the<font color="#CCCCCC"> i/o devices and</font>

153
00:12:02,380 --> 00:12:08,740
besides of<font color="#CCCCCC"> that we also just pay</font>

154
00:12:06,790 --> 00:12:13,360
attention<font color="#CCCCCC"> to the line that I'm pointing</font>

155
00:12:08,740 --> 00:12:16,240
at<font color="#E5E5E5"> we can also create something which is</font>

156
00:12:13,360 --> 00:12:18,670
<font color="#E5E5E5">called a factory object so we</font><font color="#CCCCCC"> basically</font>

157
00:12:16,240 --> 00:12:23,170
create a new IP<font color="#CCCCCC"> C communication end</font>

158
00:12:18,670 --> 00:12:25,270
point which we call<font color="#E5E5E5"> like a lock factory</font>

159
00:12:23,170 --> 00:12:30,849
which<font color="#E5E5E5"> will which</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> be used to create</font>

160
00:12:25,270 --> 00:12:35,160
<font color="#CCCCCC">new instances of the console that's</font>

161
00:12:30,850 --> 00:12:38,650
depicted here<font color="#E5E5E5"> so the console mode</font>

162
00:12:35,160 --> 00:12:41,260
multiplexer uses<font color="#CCCCCC"> a pattern which is</font><font color="#E5E5E5"> very</font>

163
00:12:38,650 --> 00:12:44,170
common to all all this<font color="#CCCCCC"> al Ferrari</font>

164
00:12:41,260 --> 00:12:47,470
configuration and a Ferrari components

165
00:12:44,170 --> 00:12:53,979
which is the factory pattern<font color="#E5E5E5"> so using</font>

166
00:12:47,470 --> 00:12:56,350
the variable the the IPC<font color="#E5E5E5"> channel which</font>

167
00:12:53,980 --> 00:12:59,830
<font color="#CCCCCC">is in</font><font color="#E5E5E5"> fact a kernel object called IPC</font>

168
00:12:56,350 --> 00:13:03,040
gate<font color="#E5E5E5"> we are going to create a capability</font>

169
00:12:59,830 --> 00:13:06,820
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you IPC gate and pass it</font><font color="#E5E5E5"> to the cons</font>

170
00:13:03,040 --> 00:13:11,319
process<font color="#E5E5E5"> as a capability known under the</font>

171
00:13:06,820 --> 00:13:15,670
cons string to it and then in the<font color="#CCCCCC"> VM and</font>

172
00:13:11,320 --> 00:13:17,880
<font color="#E5E5E5">Ottawa script</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> code which uses</font>

173
00:13:15,670 --> 00:13:24,449
this<font color="#CCCCCC"> capability to create</font><font color="#E5E5E5"> a new</font>

174
00:13:17,880 --> 00:13:27,790
multiplexer and the<font color="#CCCCCC"> new multiplexer is</font>

175
00:13:24,450 --> 00:13:30,730
basically<font color="#E5E5E5"> a new IPC gate object which is</font>

176
00:13:27,790 --> 00:13:37,270
then passed to<font color="#E5E5E5"> the lock capability of</font>

177
00:13:30,730 --> 00:13:40,450
the<font color="#E5E5E5"> you</font><font color="#CCCCCC"> vmm process</font><font color="#E5E5E5"> and when we have all</font>

178
00:13:37,270 --> 00:13:44,650
that spawning new instances is as<font color="#E5E5E5"> easy</font>

179
00:13:40,450 --> 00:13:48,370
<font color="#E5E5E5">as just typing</font><font color="#CCCCCC"> vm</font><font color="#E5E5E5"> 1 and vm 2 and that</font>

180
00:13:44,650 --> 00:13:52,290
will do what we<font color="#E5E5E5"> need on the picture on</font>

181
00:13:48,370 --> 00:13:52,290
<font color="#E5E5E5">the picture</font><font color="#CCCCCC"> it will look like</font><font color="#E5E5E5"> this</font>

182
00:13:55,380 --> 00:14:01,560
<font color="#CCCCCC">well</font><font color="#E5E5E5"> what what is interesting about this</font>

183
00:13:58,230 --> 00:14:05,940
is<font color="#CCCCCC"> that while we provide</font><font color="#E5E5E5"> two new</font>

184
00:14:01,560 --> 00:14:08,189
consoles<font color="#E5E5E5"> to the two VMs</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tasks such</font>

185
00:14:05,940 --> 00:14:11,910
as<font color="#CCCCCC"> Khan's</font><font color="#E5E5E5"> itself and net</font><font color="#CCCCCC"> well continue</font>

186
00:14:08,190 --> 00:14:15,810
to use the default<font color="#E5E5E5"> clock capability but</font>

187
00:14:11,910 --> 00:14:18,360
can be of course<font color="#E5E5E5"> told to be using some</font>

188
00:14:15,810 --> 00:14:19,680
other output if we provided some other

189
00:14:18,360 --> 00:14:27,720
capability which speaks the<font color="#CCCCCC"> same</font>

190
00:14:19,680 --> 00:14:29,810
protocol so let's see what<font color="#CCCCCC"> that looks</font>

191
00:14:27,720 --> 00:14:29,810
like

192
00:14:42,730 --> 00:14:48,600
oh<font color="#CCCCCC"> let's let's know that I'm missing</font>

193
00:14:53,130 --> 00:15:01,810
<font color="#E5E5E5">okay so now it's we already see that we</font>

194
00:14:58,210 --> 00:15:05,080
have two VMs<font color="#E5E5E5"> and that the</font><font color="#CCCCCC"> UVM M is</font>

195
00:15:01,810 --> 00:15:08,709
reporting some or<font color="#E5E5E5"> logging some</font>

196
00:15:05,080 --> 00:15:11,410
information<font color="#E5E5E5"> for both of them now when</font>

197
00:15:08,710 --> 00:15:14,080
everything<font color="#E5E5E5"> is booted</font><font color="#CCCCCC"> we happen to find</font>

198
00:15:11,410 --> 00:15:15,910
<font color="#CCCCCC">out ourselves</font><font color="#E5E5E5"> in the prompt of the</font>

199
00:15:14,080 --> 00:15:19,390
<font color="#E5E5E5">console multiplexer so we are not</font>

200
00:15:15,910 --> 00:15:22,360
anymore<font color="#E5E5E5"> in in the guest but we can now</font>

201
00:15:19,390 --> 00:15:26,970
list<font color="#CCCCCC"> the attached consoles we have</font><font color="#E5E5E5"> one</font>

202
00:15:22,360 --> 00:15:36,390
<font color="#CCCCCC">for VM 1 1 4 vm</font><font color="#E5E5E5"> 2 now we can also</font>

203
00:15:26,970 --> 00:15:36,390
connect to<font color="#E5E5E5"> to either of them and</font>

204
00:15:36,720 --> 00:15:49,390
<font color="#E5E5E5">basically interact with both of them</font><font color="#CCCCCC"> so</font>

205
00:15:42,810 --> 00:15:52,739
<font color="#CCCCCC">that's that was us running to Linux VMs</font>

206
00:15:49,390 --> 00:15:55,180
on top of every but that's not<font color="#CCCCCC"> very</font>

207
00:15:52,740 --> 00:15:57,520
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> right because all like both</font>

208
00:15:55,180 --> 00:15:59,469
<font color="#CCCCCC">of them are isolated and</font><font color="#E5E5E5"> we're not even</font>

209
00:15:57,520 --> 00:16:01,810
interconnected so that's what we are

210
00:15:59,470 --> 00:16:03,880
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> do now we</font><font color="#E5E5E5"> are going to provide</font>

211
00:16:01,810 --> 00:16:07,869
some kind of network connection so that

212
00:16:03,880 --> 00:16:13,330
<font color="#CCCCCC">you can actually pink one VM and another</font>

213
00:16:07,870 --> 00:16:17,500
one<font color="#CCCCCC"> this change requires us to add into</font>

214
00:16:13,330 --> 00:16:20,620
the list<font color="#E5E5E5"> of modules process called l4v I</font>

215
00:16:17,500 --> 00:16:23,080
own at p2p which is basically a vert<font color="#CCCCCC"> is</font>

216
00:16:20,620 --> 00:16:26,650
which which has<font color="#E5E5E5"> only in this case it</font>

217
00:16:23,080 --> 00:16:29,350
will<font color="#CCCCCC"> have only two ports</font><font color="#E5E5E5"> basically is an</font>

218
00:16:26,650 --> 00:16:39,699
equivalent of a virtual crossed

219
00:16:29,350 --> 00:16:43,240
<font color="#CCCCCC">UTP wire so again in this</font><font color="#E5E5E5"> example we</font>

220
00:16:39,700 --> 00:16:45,970
<font color="#E5E5E5">will see the factory pattern used this</font>

221
00:16:43,240 --> 00:16:48,430
time it will be when when we<font color="#CCCCCC"> create</font>

222
00:16:45,970 --> 00:16:51,970
<font color="#CCCCCC">divert I</font><font color="#E5E5E5"> off switch</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> VM end of lua</font>

223
00:16:48,430 --> 00:16:54,729
<font color="#CCCCCC">repper provides us with a function</font>

224
00:16:51,970 --> 00:16:56,080
called start vertex which we just need

225
00:16:54,730 --> 00:17:01,240
to pass it a<font color="#E5E5E5"> table</font>

226
00:16:56,080 --> 00:17:05,860
which says what<font color="#CCCCCC"> our our switch ports</font>

227
00:17:01,240 --> 00:17:09,069
called<font color="#E5E5E5"> and then we create a new IPC</font>

228
00:17:05,859 --> 00:17:14,409
<font color="#E5E5E5">channel call it switch and pass it in</font>

229
00:17:09,069 --> 00:17:16,780
<font color="#CCCCCC">its server form to the to divert</font><font color="#E5E5E5"> I'll</font>

230
00:17:14,410 --> 00:17:19,780
<font color="#E5E5E5">switch process and it will be known as</font>

231
00:17:16,780 --> 00:17:22,359
<font color="#CCCCCC">the</font><font color="#E5E5E5"> SVR capability in it and at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

232
00:17:19,780 --> 00:17:23,920
time we have a modify the<font color="#E5E5E5"> ports table</font>

233
00:17:22,359 --> 00:17:27,010
which was passed to<font color="#CCCCCC"> us as an argument</font>

234
00:17:23,920 --> 00:17:33,580
<font color="#E5E5E5">and we'll</font><font color="#CCCCCC"> use the switch capability to</font>

235
00:17:27,010 --> 00:17:36,760
create<font color="#E5E5E5"> new</font><font color="#CCCCCC"> vertel net</font><font color="#E5E5E5"> port</font><font color="#CCCCCC"> that that</font>

236
00:17:33,580 --> 00:17:38,169
will of course<font color="#CCCCCC"> be known as as the key so</font>

237
00:17:36,760 --> 00:17:41,530
<font color="#CCCCCC">that like the names of those</font>

238
00:17:38,170 --> 00:17:45,720
capabilities will<font color="#CCCCCC"> be the keys</font><font color="#E5E5E5"> passed</font><font color="#CCCCCC"> as</font>

239
00:17:41,530 --> 00:17:45,720
in the argument in the<font color="#E5E5E5"> ports argument</font>

240
00:17:46,290 --> 00:17:52,899
then this is how the start<font color="#CCCCCC"> vm</font><font color="#E5E5E5"> Lua</font>

241
00:17:51,040 --> 00:17:55,629
function looks like<font color="#E5E5E5"> so we pass it some</font>

242
00:17:52,900 --> 00:17:59,040
table with some<font color="#E5E5E5"> keys and one of them is</font>

243
00:17:55,630 --> 00:18:05,010
hopefully net which<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> capability</font>

244
00:17:59,040 --> 00:18:08,290
created by by the<font color="#E5E5E5"> VM start switch and</font>

245
00:18:05,010 --> 00:18:11,620
here we can see how how this capability

246
00:18:08,290 --> 00:18:14,860
is<font color="#E5E5E5"> is actually passed to the UV</font><font color="#CCCCCC"> mmm</font>

247
00:18:11,620 --> 00:18:17,379
process and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> remember this</font><font color="#CCCCCC"> V bus</font>

248
00:18:14,860 --> 00:18:19,090
line as we will<font color="#E5E5E5"> be needing as we will</font>

249
00:18:17,380 --> 00:18:27,970
need<font color="#CCCCCC"> it</font><font color="#E5E5E5"> a little bit later than we do</font>

250
00:18:19,090 --> 00:18:31,020
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> pass through to the device so</font>

251
00:18:27,970 --> 00:18:34,270
our final net script which includes the

252
00:18:31,020 --> 00:18:36,550
import of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> V mmm dota Lua script can</font>

253
00:18:34,270 --> 00:18:40,240
look something like this<font color="#E5E5E5"> our net and the</font>

254
00:18:36,550 --> 00:18:43,930
bar port table is what we pass<font color="#E5E5E5"> to start</font>

255
00:18:40,240 --> 00:18:47,800
vertex<font color="#E5E5E5"> which</font><font color="#CCCCCC"> wrapper and as we</font><font color="#E5E5E5"> just seen</font>

256
00:18:43,930 --> 00:18:50,290
<font color="#E5E5E5">it will create the factory capability</font>

257
00:18:47,800 --> 00:18:52,180
and<font color="#CCCCCC"> also our ports capabilities and</font><font color="#E5E5E5"> both</font>

258
00:18:50,290 --> 00:18:56,860
<font color="#E5E5E5">populate the net ports table with them</font>

259
00:18:52,180 --> 00:19:00,430
and it's just we can just kind of start

260
00:18:56,860 --> 00:19:04,889
each VM by<font color="#E5E5E5"> passing it its own net over</font>

261
00:19:00,430 --> 00:19:04,890
tile<font color="#E5E5E5"> capability its port capability</font>

262
00:19:06,150 --> 00:19:11,580
<font color="#CCCCCC">there is one thing that</font><font color="#E5E5E5"> we</font>

263
00:19:08,580 --> 00:19:14,310
<font color="#CCCCCC">- in - do we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> add one extra</font>

264
00:19:11,580 --> 00:19:17,370
device<font color="#E5E5E5"> three</font><font color="#CCCCCC"> node into the device tree</font>

265
00:19:14,310 --> 00:19:21,000
that we are<font color="#E5E5E5"> passing to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> guest so that</font>

266
00:19:17,370 --> 00:19:23,639
the<font color="#E5E5E5"> guests can actually connect using a</font>

267
00:19:21,000 --> 00:19:29,010
device<font color="#CCCCCC"> called vertigo proxy to the</font>

268
00:19:23,640 --> 00:19:32,070
<font color="#E5E5E5">provided virtio switch port so that's</font>

269
00:19:29,010 --> 00:19:34,590
why the net here is highlighted and<font color="#E5E5E5"> is</font>

270
00:19:32,070 --> 00:19:40,139
<font color="#E5E5E5">basically the same net as we saw</font><font color="#CCCCCC"> on the</font>

271
00:19:34,590 --> 00:19:41,600
previous<font color="#E5E5E5"> slides this picture shows the</font>

272
00:19:40,140 --> 00:19:47,010
<font color="#E5E5E5">whole situation</font>

273
00:19:41,600 --> 00:19:49,169
the l4v o net p2p is<font color="#E5E5E5"> located between</font><font color="#CCCCCC"> the</font>

274
00:19:47,010 --> 00:19:54,290
two VMs<font color="#E5E5E5"> to signify that is basically</font>

275
00:19:49,170 --> 00:19:57,840
just<font color="#E5E5E5"> across UTP cable with the factory</font>

276
00:19:54,290 --> 00:20:07,560
capability<font color="#CCCCCC"> Ser and both vertical net</font>

277
00:19:57,840 --> 00:20:10,370
ports shown so let's see how that<font color="#E5E5E5"> works</font>

278
00:20:07,560 --> 00:20:10,370
in a demo

279
00:20:18,840 --> 00:20:24,250
you can notice<font color="#E5E5E5"> that there are some</font>

280
00:20:21,870 --> 00:20:27,610
warnings or still some warnings about

281
00:20:24,250 --> 00:20:29,770
<font color="#E5E5E5">some failure to find some devices that</font>

282
00:20:27,610 --> 00:20:31,780
has to do<font color="#E5E5E5"> with the fact that we still</font>

283
00:20:29,770 --> 00:20:34,470
haven't<font color="#E5E5E5"> passed these devices to one of</font>

284
00:20:31,780 --> 00:20:39,700
the<font color="#CCCCCC"> VMS yet</font><font color="#E5E5E5"> but we will fix that later</font>

285
00:20:34,470 --> 00:20:42,160
<font color="#CCCCCC">so right now we</font><font color="#E5E5E5"> are back</font><font color="#CCCCCC"> to the console</font>

286
00:20:39,700 --> 00:20:45,840
multiplexer console<font color="#E5E5E5"> we can list all</font>

287
00:20:42,160 --> 00:20:49,360
consoles we see that there is<font color="#CCCCCC"> one new</font>

288
00:20:45,840 --> 00:20:55,840
console<font color="#E5E5E5"> created</font><font color="#CCCCCC"> code switch</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> for</font>

289
00:20:49,360 --> 00:20:58,600
<font color="#CCCCCC">example kind of see what what</font><font color="#E5E5E5"> the switch</font>

290
00:20:55,840 --> 00:21:01,270
printed out when it was<font color="#CCCCCC"> booting so for</font>

291
00:20:58,600 --> 00:21:05,799
example here we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> how both</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

292
00:21:01,270 --> 00:21:08,710
clients<font color="#E5E5E5"> registered with the switch and</font>

293
00:21:05,799 --> 00:21:16,049
<font color="#E5E5E5">how the initialization proceeded but</font>

294
00:21:08,710 --> 00:21:20,590
more importantly we now should see that

295
00:21:16,049 --> 00:21:26,139
<font color="#CCCCCC">vm number one has its a has its</font>

296
00:21:20,590 --> 00:21:30,040
interface configured and also that vm 2

297
00:21:26,140 --> 00:21:31,990
has its interface for network

298
00:21:30,040 --> 00:21:40,570
connections and<font color="#E5E5E5"> we can ping for example</font>

299
00:21:31,990 --> 00:21:42,340
from<font color="#E5E5E5"> vm</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> at the same we can pink</font><font color="#CCCCCC"> the</font>

300
00:21:40,570 --> 00:21:47,639
first one so so they can<font color="#CCCCCC"> communicate</font>

301
00:21:42,340 --> 00:21:47,639
over a<font color="#E5E5E5"> divert</font><font color="#CCCCCC"> io provided</font><font color="#E5E5E5"> network</font>

302
00:21:51,550 --> 00:21:58,419
so this is this<font color="#E5E5E5"> is much better than just</font>

303
00:21:56,170 --> 00:22:01,420
having<font color="#CCCCCC"> two vegans that are not</font>

304
00:21:58,420 --> 00:22:03,670
interconnected<font color="#E5E5E5"> but still they you can't</font>

305
00:22:01,420 --> 00:22:05,500
really<font color="#E5E5E5"> do much except for a mutual</font>

306
00:22:03,670 --> 00:22:07,390
communication between the two<font color="#E5E5E5"> VMs that</font>

307
00:22:05,500 --> 00:22:11,590
are<font color="#E5E5E5"> still isolated</font><font color="#CCCCCC"> from the outside</font>

308
00:22:07,390 --> 00:22:13,030
world like<font color="#E5E5E5"> if you remember when I type</font>

309
00:22:11,590 --> 00:22:16,270
the date<font color="#E5E5E5"> command it showed</font><font color="#CCCCCC"> some</font>

310
00:22:13,030 --> 00:22:19,540
artificial<font color="#E5E5E5"> time and not the</font><font color="#CCCCCC"> real time so</font>

311
00:22:16,270 --> 00:22:23,050
for the purposes of<font color="#E5E5E5"> this demo</font><font color="#CCCCCC"> I chose to</font>

312
00:22:19,540 --> 00:22:28,690
pass a simple<font color="#E5E5E5"> device which is the</font><font color="#CCCCCC"> real</font>

313
00:22:23,050 --> 00:22:31,210
<font color="#CCCCCC">time clock pl0 61 or</font><font color="#E5E5E5"> 39 forgot the</font>

314
00:22:28,690 --> 00:22:34,780
<font color="#CCCCCC">number but it's a one</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> arm</font>

315
00:22:31,210 --> 00:22:37,630
<font color="#E5E5E5">devices and our goal will be to pass it</font>

316
00:22:34,780 --> 00:22:40,360
<font color="#CCCCCC">to</font><font color="#E5E5E5"> VM one so that it unlike VM</font><font color="#CCCCCC"> two will</font>

317
00:22:37,630 --> 00:22:43,000
see the real time and<font color="#E5E5E5"> we have approved</font>

318
00:22:40,360 --> 00:22:43,780
that the<font color="#E5E5E5"> VMS can communicate with the</font>

319
00:22:43,000 --> 00:22:46,780
outside<font color="#E5E5E5"> world</font>

320
00:22:43,780 --> 00:22:48,670
normally this<font color="#E5E5E5"> this is kind of artificial</font>

321
00:22:46,780 --> 00:22:50,860
<font color="#CCCCCC">example because what</font><font color="#E5E5E5"> you'd normally want</font>

322
00:22:48,670 --> 00:22:54,910
to do you would want to<font color="#E5E5E5"> give one of at</font>

323
00:22:50,860 --> 00:22:57,370
least one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> VMS a real NIC card for</font>

324
00:22:54,910 --> 00:22:59,670
example<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that you can you have network</font>

325
00:22:57,370 --> 00:23:01,780
<font color="#CCCCCC">connection to the outside world</font><font color="#E5E5E5"> and then</font>

326
00:22:59,670 --> 00:23:05,280
something might<font color="#E5E5E5"> be going on between the</font>

327
00:23:01,780 --> 00:23:10,300
<font color="#CCCCCC">two but because this</font><font color="#E5E5E5"> is 64-bit arm</font>

328
00:23:05,280 --> 00:23:12,730
<font color="#E5E5E5">running in qmo and</font><font color="#CCCCCC"> i was</font><font color="#E5E5E5"> doing the demo</font>

329
00:23:10,300 --> 00:23:15,720
<font color="#E5E5E5">it's slightly</font><font color="#CCCCCC"> problematic i would</font>

330
00:23:12,730 --> 00:23:18,700
<font color="#CCCCCC">probably have</font><font color="#E5E5E5"> to pass the whole pci</font>

331
00:23:15,720 --> 00:23:23,400
controller to it<font color="#E5E5E5"> there might be some</font>

332
00:23:18,700 --> 00:23:27,160
<font color="#E5E5E5">issues so I chose this simpler version</font>

333
00:23:23,400 --> 00:23:32,470
so what we need to<font color="#CCCCCC"> do in</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> to do a</font>

334
00:23:27,160 --> 00:23:35,320
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> pass-through</font><font color="#E5E5E5"> to to a VM which</font>

335
00:23:32,470 --> 00:23:39,610
is<font color="#E5E5E5"> running under</font><font color="#CCCCCC"> elf or</font><font color="#E5E5E5"> re we basically</font>

336
00:23:35,320 --> 00:23:41,860
need<font color="#CCCCCC"> to we need to start another</font><font color="#E5E5E5"> of</font>

337
00:23:39,610 --> 00:23:45,399
Ferrari component called IO which<font color="#E5E5E5"> is the</font>

338
00:23:41,860 --> 00:23:49,030
i/o manager<font color="#CCCCCC"> we need to pass io its own a</font>

339
00:23:45,400 --> 00:23:51,880
<font color="#E5E5E5">lua configuration in which we will tell</font>

340
00:23:49,030 --> 00:23:56,440
<font color="#E5E5E5">it basically what real hardware it has</font>

341
00:23:51,880 --> 00:23:58,860
and then we also need to<font color="#CCCCCC"> provide a lower</font>

342
00:23:56,440 --> 00:24:01,660
configuration file<font color="#E5E5E5"> in which we specify</font>

343
00:23:58,860 --> 00:24:03,500
which real hardware is actually<font color="#E5E5E5"> passed</font>

344
00:24:01,660 --> 00:24:11,470
to the guest

345
00:24:03,500 --> 00:24:16,429
and that's not all<font color="#E5E5E5"> we</font><font color="#CCCCCC"> will also need</font><font color="#E5E5E5"> to</font>

346
00:24:11,470 --> 00:24:20,990
<font color="#E5E5E5">to kind of alter the device tree which</font>

347
00:24:16,429 --> 00:24:25,039
<font color="#CCCCCC">is passed to the VM and tell</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> about</font>

348
00:24:20,990 --> 00:24:27,650
the<font color="#CCCCCC"> the device that it should look look</font>

349
00:24:25,039 --> 00:24:32,270
for right so in this<font color="#E5E5E5"> case it's that our</font>

350
00:24:27,650 --> 00:24:37,090
<font color="#E5E5E5">sir is</font><font color="#CCCCCC"> that PL</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 31 not 61 when PL 0 31</font>

351
00:24:32,270 --> 00:24:40,580
<font color="#E5E5E5">the</font><font color="#CCCCCC"> real-time clock device</font><font color="#E5E5E5"> specify what</font>

352
00:24:37,090 --> 00:24:46,100
what<font color="#CCCCCC"> interrupt</font><font color="#E5E5E5"> it uses what registers it</font>

353
00:24:40,580 --> 00:24:49,399
uses<font color="#E5E5E5"> what is what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> it known as and</font>

354
00:24:46,100 --> 00:24:51,139
then also if the device<font color="#E5E5E5"> needs some other</font>

355
00:24:49,400 --> 00:24:53,809
components<font color="#CCCCCC"> from the device 3 we</font><font color="#E5E5E5"> also</font>

356
00:24:51,140 --> 00:24:57,049
need to provide<font color="#E5E5E5"> them such as this clock</font>

357
00:24:53,809 --> 00:25:03,260
<font color="#E5E5E5">note which is necessary otherwise</font><font color="#CCCCCC"> Linux</font>

358
00:24:57,049 --> 00:25:06,158
wouldn't find it<font color="#CCCCCC"> so our net script if we</font>

359
00:25:03,260 --> 00:25:10,940
keep all the<font color="#E5E5E5"> net configuration stuff in</font>

360
00:25:06,159 --> 00:25:13,549
<font color="#CCCCCC">we just need to add to add another</font><font color="#E5E5E5"> to</font>

361
00:25:10,940 --> 00:25:17,330
<font color="#E5E5E5">our table this time called IO</font><font color="#CCCCCC"> buses in</font>

362
00:25:13,549 --> 00:25:19,418
which we specify basically keys that

363
00:25:17,330 --> 00:25:24,799
<font color="#E5E5E5">will later function as capability names</font>

364
00:25:19,419 --> 00:25:31,970
that are passed to the<font color="#E5E5E5"> VM</font><font color="#CCCCCC"> guest to the</font>

365
00:25:24,799 --> 00:25:36,460
VM so when we have<font color="#E5E5E5"> our table with the</font>

366
00:25:31,970 --> 00:25:39,950
i/o buses<font color="#CCCCCC"> we just call the</font><font color="#E5E5E5"> VM m dot Lua</font>

367
00:25:36,460 --> 00:25:42,140
<font color="#E5E5E5">function called start underbar</font><font color="#CCCCCC"> IO pass</font>

368
00:25:39,950 --> 00:25:45,429
the table to it and also specify<font color="#E5E5E5"> the</font>

369
00:25:42,140 --> 00:25:50,230
location of the i/o configuration<font color="#E5E5E5"> script</font>

370
00:25:45,429 --> 00:25:55,100
<font color="#E5E5E5">and then we must not forget to</font><font color="#CCCCCC"> also</font>

371
00:25:50,230 --> 00:25:57,380
specify<font color="#CCCCCC"> the name of the i/o bus to the</font>

372
00:25:55,100 --> 00:26:04,520
VM<font color="#E5E5E5"> which we want to have access</font><font color="#CCCCCC"> to this</font>

373
00:25:57,380 --> 00:26:06,650
bus this start<font color="#CCCCCC"> io a function it does</font>

374
00:26:04,520 --> 00:26:11,530
something<font color="#CCCCCC"> similar to what what we've</font>

375
00:26:06,650 --> 00:26:13,850
already seen in the<font color="#E5E5E5"> previous cases so it</font>

376
00:26:11,530 --> 00:26:17,059
<font color="#E5E5E5">basically goes through the table which</font>

377
00:26:13,850 --> 00:26:23,990
is<font color="#E5E5E5"> passed to it and creates a capability</font>

378
00:26:17,059 --> 00:26:25,999
server part<font color="#E5E5E5"> of it it passes to</font><font color="#CCCCCC"> IO and IO</font>

379
00:26:23,990 --> 00:26:29,480
will notice by the<font color="#E5E5E5"> way by the key which</font>

380
00:26:25,999 --> 00:26:32,269
which kind of<font color="#E5E5E5"> features in the table and</font>

381
00:26:29,480 --> 00:26:36,590
the client part of it will be<font color="#E5E5E5"> passed to</font>

382
00:26:32,269 --> 00:26:40,970
<font color="#E5E5E5">you</font><font color="#CCCCCC"> v</font><font color="#E5E5E5"> mm or to whatever client we have</font>

383
00:26:36,590 --> 00:26:44,959
<font color="#E5E5E5">here also very important part of this is</font>

384
00:26:40,970 --> 00:26:46,580
<font color="#CCCCCC">that we need to</font><font color="#E5E5E5"> start the i/o manager of</font>

385
00:26:44,960 --> 00:26:49,940
<font color="#E5E5E5">its some additional rights that the</font>

386
00:26:46,580 --> 00:26:52,369
other tasks<font color="#E5E5E5"> do not have so unlike</font><font color="#CCCCCC"> in the</font>

387
00:26:49,940 --> 00:26:55,100
<font color="#CCCCCC">previous cases</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to give it</font><font color="#E5E5E5"> access</font>

388
00:26:52,369 --> 00:26:58,509
to the<font color="#E5E5E5"> sigma0 process because Sigma 0</font>

389
00:26:55,100 --> 00:27:05,389
<font color="#E5E5E5">among other things it initially owns all</font>

390
00:26:58,509 --> 00:27:08,269
the memory and also<font color="#E5E5E5"> all the i/o port so</font>

391
00:27:05,389 --> 00:27:12,258
we need to create a new<font color="#E5E5E5"> capability which</font>

392
00:27:08,269 --> 00:27:14,450
will allow<font color="#CCCCCC"> io to access that</font><font color="#E5E5E5"> and also we</font>

393
00:27:12,259 --> 00:27:16,789
will need<font color="#E5E5E5"> to deal with interrupts so we</font>

394
00:27:14,450 --> 00:27:20,779
need to provide an interrupt controller

395
00:27:16,789 --> 00:27:22,669
<font color="#E5E5E5">you need capability which in this case</font>

396
00:27:20,779 --> 00:27:28,129
will as we will see is provided by the

397
00:27:22,669 --> 00:27:32,179
kernel<font color="#CCCCCC"> so the i/o config which is passed</font>

398
00:27:28,129 --> 00:27:37,309
<font color="#E5E5E5">to</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> looks like this we basically</font>

399
00:27:32,179 --> 00:27:40,220
create<font color="#E5E5E5"> a new device called RTC and very</font>

400
00:27:37,309 --> 00:27:43,460
<font color="#CCCCCC">similar</font><font color="#E5E5E5"> to how it is in the device tree</font>

401
00:27:40,220 --> 00:27:47,659
which<font color="#CCCCCC"> is given</font><font color="#E5E5E5"> to the Linux VM we also</font>

402
00:27:43,460 --> 00:27:52,240
<font color="#CCCCCC">specify the compatible property and</font><font color="#E5E5E5"> also</font>

403
00:27:47,659 --> 00:27:57,110
say what what IO registers and

404
00:27:52,240 --> 00:27:59,869
interrupts the device is using so when

405
00:27:57,110 --> 00:28:07,369
we do this then<font color="#CCCCCC"> io will request this</font>

406
00:27:59,869 --> 00:28:14,629
device from<font color="#E5E5E5"> Sigma 0 and the thing</font>

407
00:28:07,369 --> 00:28:19,699
missing is assigning or giving access<font color="#CCCCCC"> to</font>

408
00:28:14,629 --> 00:28:24,469
these<font color="#E5E5E5"> devices to the actual u vm m or to</font>

409
00:28:19,700 --> 00:28:25,100
the actual<font color="#CCCCCC"> vm and in order to do to do</font>

410
00:28:24,470 --> 00:28:29,169
<font color="#E5E5E5">that</font>

411
00:28:25,100 --> 00:28:30,409
io creates for<font color="#CCCCCC"> us a</font><font color="#E5E5E5"> new virtual bus</font>

412
00:28:29,169 --> 00:28:33,020
which

413
00:28:30,410 --> 00:28:37,100
this case will<font color="#CCCCCC"> be known under the name</font>

414
00:28:33,020 --> 00:28:39,379
<font color="#CCCCCC">VM underbar</font><font color="#E5E5E5"> H W then note the</font>

415
00:28:37,100 --> 00:28:42,110
correspondence with the name that<font color="#CCCCCC"> we</font>

416
00:28:39,380 --> 00:28:46,150
used in that<font color="#CCCCCC"> looat able to</font><font color="#E5E5E5"> configure</font>

417
00:28:42,110 --> 00:28:49,840
this<font color="#E5E5E5"> this virtual bus and will basically</font>

418
00:28:46,150 --> 00:28:53,330
<font color="#CCCCCC">assign the hardware device to it and</font>

419
00:28:49,840 --> 00:28:55,580
there<font color="#E5E5E5"> will be some other notes or some</font>

420
00:28:53,330 --> 00:28:59,379
other devices on this virtual bus<font color="#E5E5E5"> such</font>

421
00:28:55,580 --> 00:29:02,629
as a virtual<font color="#CCCCCC"> interrupt control unit that</font>

422
00:28:59,380 --> 00:29:11,690
the that the client will be able<font color="#CCCCCC"> to</font>

423
00:29:02,630 --> 00:29:14,470
enumerate and start handling so we<font color="#CCCCCC"> can</font>

424
00:29:11,690 --> 00:29:18,770
see<font color="#E5E5E5"> all of that on this slide including</font>

425
00:29:14,470 --> 00:29:25,070
<font color="#E5E5E5">the Sigma</font><font color="#CCCCCC"> 0 and</font><font color="#E5E5E5"> ICU capabilities and</font>

426
00:29:18,770 --> 00:29:29,090
<font color="#E5E5E5">also and also how</font><font color="#CCCCCC"> IO provides the</font>

427
00:29:25,070 --> 00:29:31,340
virtual bus object while the<font color="#CCCCCC"> VM underbar</font>

428
00:29:29,090 --> 00:29:34,340
HW capability which<font color="#CCCCCC"> is basically the</font>

429
00:29:31,340 --> 00:29:37,790
same<font color="#E5E5E5"> thing the server side of the V bus</font>

430
00:29:34,340 --> 00:29:40,490
<font color="#E5E5E5">capability provided to the UV</font><font color="#CCCCCC"> mmm we</font>

431
00:29:37,790 --> 00:29:42,800
provided<font color="#E5E5E5"> only to one of the</font><font color="#CCCCCC"> you VMs or</font>

432
00:29:40,490 --> 00:29:46,810
to one<font color="#CCCCCC"> of the VMs because we don't want</font>

433
00:29:42,800 --> 00:29:46,810
the<font color="#E5E5E5"> other one to have access to</font><font color="#CCCCCC"> it and</font>

434
00:29:50,410 --> 00:29:59,080
<font color="#CCCCCC">if we now try to run it in the demo</font>

435
00:30:03,250 --> 00:30:09,680
we now see there is slightly<font color="#E5E5E5"> more output</font>

436
00:30:06,980 --> 00:30:10,360
from some new components<font color="#CCCCCC"> in this case</font>

437
00:30:09,680 --> 00:30:19,730
from<font color="#CCCCCC"> IO</font>

438
00:30:10,360 --> 00:30:23,030
<font color="#CCCCCC">than</font><font color="#E5E5E5"> before so again finding ourselves</font>

439
00:30:19,730 --> 00:30:25,970
in<font color="#E5E5E5"> the console multiplexer we see that</font>

440
00:30:23,030 --> 00:30:29,450
now there is yet another<font color="#E5E5E5"> console for</font><font color="#CCCCCC"> IO</font>

441
00:30:25,970 --> 00:30:32,690
so we can also<font color="#E5E5E5"> take a look</font><font color="#CCCCCC"> at what IO</font>

442
00:30:29,450 --> 00:30:35,030
said when it<font color="#E5E5E5"> was starting this</font>

443
00:30:32,690 --> 00:30:43,340
<font color="#E5E5E5">corresponds to all that</font><font color="#CCCCCC"> read output that</font>

444
00:30:35,030 --> 00:30:46,700
<font color="#E5E5E5">we saw so we</font><font color="#CCCCCC"> can basically see how how</font>

445
00:30:43,340 --> 00:30:50,060
it got access to<font color="#E5E5E5"> the real hardware</font>

446
00:30:46,700 --> 00:30:53,780
<font color="#E5E5E5">device and how it passed how it created</font>

447
00:30:50,060 --> 00:30:58,690
the capability for for the<font color="#E5E5E5"> V bus and</font>

448
00:30:53,780 --> 00:31:04,040
<font color="#E5E5E5">also how</font><font color="#CCCCCC"> it then tried to to connect the</font>

449
00:30:58,690 --> 00:31:09,440
irq that we<font color="#E5E5E5"> asked it to do for us but</font>

450
00:31:04,040 --> 00:31:15,040
now what's more<font color="#CCCCCC"> interesting for</font><font color="#E5E5E5"> us is we</font>

451
00:31:09,440 --> 00:31:21,710
can grep the output of the message

452
00:31:15,040 --> 00:31:24,889
program for<font color="#CCCCCC"> pl0</font><font color="#E5E5E5"> and this time we shall</font>

453
00:31:21,710 --> 00:31:27,020
see that the<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> actually found the</font>

454
00:31:24,890 --> 00:31:30,710
real time clock device that we<font color="#CCCCCC"> passed to</font>

455
00:31:27,020 --> 00:31:34,629
<font color="#E5E5E5">it so unlike in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous cases and</font>

456
00:31:30,710 --> 00:31:40,250
<font color="#E5E5E5">also in the case of</font><font color="#CCCCCC"> vm to date should</font><font color="#E5E5E5"> be</font>

457
00:31:34,630 --> 00:31:46,450
functioning<font color="#CCCCCC"> properly so we</font><font color="#E5E5E5"> can also see</font>

458
00:31:40,250 --> 00:31:46,450
that<font color="#CCCCCC"> vm 2</font><font color="#E5E5E5"> still thinks we</font><font color="#CCCCCC"> are in 1970</font>

459
00:31:51,309 --> 00:32:11,720
<font color="#E5E5E5">okay well there is one one more thing to</font>

460
00:31:56,360 --> 00:32:14,570
<font color="#E5E5E5">show in the m1</font><font color="#CCCCCC"> I think if we now go into</font>

461
00:32:11,720 --> 00:32:16,970
<font color="#E5E5E5">the slices directory we can find the</font>

462
00:32:14,570 --> 00:32:22,990
device tree structure there and we can

463
00:32:16,970 --> 00:32:26,120
clearly see that our<font color="#CCCCCC"> pl0 31 is there and</font>

464
00:32:22,990 --> 00:32:28,330
if<font color="#CCCCCC"> you did this on vm</font><font color="#E5E5E5"> 2 it wouldn't be</font>

465
00:32:26,120 --> 00:32:28,330
there

466
00:32:35,050 --> 00:32:45,800
so that's for<font color="#E5E5E5"> the demos now I basically</font>

467
00:32:42,650 --> 00:32:48,140
<font color="#E5E5E5">deliver this presentations presentation</font>

468
00:32:45,800 --> 00:32:55,100
because over the last year there has

469
00:32:48,140 --> 00:33:02,050
been<font color="#E5E5E5"> afford to move some of</font><font color="#CCCCCC"> the l4 re4</font>

470
00:32:55,100 --> 00:33:05,719
<font color="#CCCCCC">re components on github and unlike</font>

471
00:33:02,050 --> 00:33:07,100
<font color="#E5E5E5">previously they had been available in so</font>

472
00:33:05,720 --> 00:33:09,710
<font color="#CCCCCC">called snapshots which are</font><font color="#E5E5E5"> still</font>

473
00:33:07,100 --> 00:33:12,800
available<font color="#CCCCCC"> so</font><font color="#E5E5E5"> for example if you wanted</font>

474
00:33:09,710 --> 00:33:17,180
to recreate some of<font color="#E5E5E5"> the demos</font><font color="#CCCCCC"> that I was</font>

475
00:33:12,800 --> 00:33:20,419
showing components<font color="#E5E5E5"> available</font><font color="#CCCCCC"> on github</font>

476
00:33:17,180 --> 00:33:22,700
<font color="#E5E5E5">will not be sufficient because for</font>

477
00:33:20,420 --> 00:33:23,780
<font color="#CCCCCC">instance the consul multiplexer and the</font>

478
00:33:22,700 --> 00:33:27,710
<font color="#CCCCCC">vertigo switch</font>

479
00:33:23,780 --> 00:33:28,850
are not on github<font color="#E5E5E5"> but you can go to elf</font>

480
00:33:27,710 --> 00:33:32,720
for our a.org

481
00:33:28,850 --> 00:33:36,020
download HTML and from there<font color="#E5E5E5"> download a</font>

482
00:33:32,720 --> 00:33:39,560
snapshot and copy the respective missing

483
00:33:36,020 --> 00:33:41,930
packages over to your checked<font color="#E5E5E5"> source</font>

484
00:33:39,560 --> 00:33:44,899
tree and it will just<font color="#CCCCCC"> build fine and you</font>

485
00:33:41,930 --> 00:33:48,560
<font color="#E5E5E5">can you can use them as I did in fact</font>

486
00:33:44,900 --> 00:33:52,040
that's what I've done<font color="#CCCCCC"> you will probably</font>

487
00:33:48,560 --> 00:33:54,290
<font color="#CCCCCC">also a</font><font color="#E5E5E5"> neat a tutorial so there is a</font>

488
00:33:52,040 --> 00:34:00,020
<font color="#E5E5E5">tutorial which was used</font><font color="#CCCCCC"> for creating</font><font color="#E5E5E5"> the</font>

489
00:33:54,290 --> 00:34:02,480
qmo advent calendar<font color="#CCCCCC"> kind of entry that</font>

490
00:34:00,020 --> 00:34:04,100
<font color="#CCCCCC">we had with the</font><font color="#E5E5E5"> Christmas</font><font color="#CCCCCC"> tree and if</font>

491
00:34:02,480 --> 00:34:08,210
you follow<font color="#CCCCCC"> follow that you should be</font>

492
00:34:04,100 --> 00:34:15,710
able<font color="#CCCCCC"> to also</font><font color="#E5E5E5"> run unmodified</font><font color="#CCCCCC"> Linux VM</font><font color="#E5E5E5"> on</font>

493
00:34:08,210 --> 00:34:18,740
top of<font color="#CCCCCC"> UVM and on 64-bit</font><font color="#E5E5E5"> arm in qmo and</font>

494
00:34:15,710 --> 00:34:21,500
the takeaway that I would like<font color="#E5E5E5"> to have</font>

495
00:34:18,739 --> 00:34:23,418
is that<font color="#E5E5E5"> it's all about components</font><font color="#CCCCCC"> that</font>

496
00:34:21,500 --> 00:34:26,719
are<font color="#CCCCCC"> mutually interconnected by</font>

497
00:34:23,418 --> 00:34:31,389
capabilities<font color="#E5E5E5"> and the way they are</font>

498
00:34:26,719 --> 00:34:35,418
<font color="#E5E5E5">interconnected happens or is via Lua and</font>

499
00:34:31,389 --> 00:34:38,989
that there is heavy use of<font color="#E5E5E5"> vertical</font>

500
00:34:35,418 --> 00:34:41,569
components and<font color="#E5E5E5"> Verta you stuff with that</font>

501
00:34:38,989 --> 00:34:43,629
I would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to thank you</font>

502
00:34:41,570 --> 00:34:43,630
<font color="#E5E5E5">you</font>

