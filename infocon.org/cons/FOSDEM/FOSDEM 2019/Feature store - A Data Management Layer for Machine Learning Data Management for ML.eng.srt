1
00:00:21,400 --> 00:00:25,950
I said the<font color="#E5E5E5"> hit</font>

2
00:00:35,120 --> 00:00:42,110
[Applause]

3
00:00:38,500 --> 00:00:45,080
so thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much and welcome to</font>

4
00:00:42,110 --> 00:00:47,480
<font color="#CCCCCC">this lighting talk my name</font><font color="#E5E5E5"> is Kim and</font>

5
00:00:45,080 --> 00:00:50,089
I'm a software engineer to<font color="#CCCCCC"> start up</font>

6
00:00:47,480 --> 00:00:52,610
called logic<font color="#CCCCCC"> locks</font><font color="#E5E5E5"> we are based in</font>

7
00:00:50,090 --> 00:00:55,610
Stockholm<font color="#E5E5E5"> and we are developing a</font>

8
00:00:52,610 --> 00:00:57,350
<font color="#CCCCCC">platform for doing</font><font color="#E5E5E5"> big data analysis and</font>

9
00:00:55,610 --> 00:00:59,780
<font color="#CCCCCC">machine learning at large scale called</font>

10
00:00:57,350 --> 00:01:02,120
<font color="#E5E5E5">hops</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> and this presentation I'll</font><font color="#CCCCCC"> be</font>

11
00:00:59,780 --> 00:01:03,800
talking<font color="#E5E5E5"> about feature stores and try to</font>

12
00:01:02,120 --> 00:01:05,840
convince you why you need<font color="#CCCCCC"> a feed store</font>

13
00:01:03,800 --> 00:01:07,729
<font color="#E5E5E5">to manage the data</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> your machine</font>

14
00:01:05,840 --> 00:01:11,840
<font color="#CCCCCC">learning pipelines so we slightly</font>

15
00:01:07,729 --> 00:01:13,580
<font color="#E5E5E5">different on the previous talks now if</font>

16
00:01:11,840 --> 00:01:15,950
you're a traditional machine learning

17
00:01:13,580 --> 00:01:17,510
<font color="#CCCCCC">person the way that your problems are</font>

18
00:01:15,950 --> 00:01:19,909
set up is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have these x and y</font>

19
00:01:17,510 --> 00:01:22,280
values<font color="#CCCCCC"> and then your task is the kind of</font>

20
00:01:19,909 --> 00:01:24,260
model is data and<font color="#CCCCCC"> learn relationships</font>

21
00:01:22,280 --> 00:01:27,440
between<font color="#E5E5E5"> your variables if you are</font>

22
00:01:24,260 --> 00:01:28,909
<font color="#CCCCCC">they're scientists</font><font color="#E5E5E5"> but this x and y</font>

23
00:01:27,440 --> 00:01:30,590
<font color="#CCCCCC">values</font><font color="#E5E5E5"> don't just show up clean by</font>

24
00:01:28,909 --> 00:01:32,899
<font color="#CCCCCC">themselves</font><font color="#E5E5E5"> rather they</font><font color="#CCCCCC"> have to come from</font>

25
00:01:30,590 --> 00:01:34,549
<font color="#E5E5E5">somewhere and</font><font color="#CCCCCC"> that somewhere it tends to</font>

26
00:01:32,899 --> 00:01:36,950
be a<font color="#E5E5E5"> script to some data engineer</font><font color="#CCCCCC"> are</font>

27
00:01:34,549 --> 00:01:38,719
<font color="#E5E5E5">written to extract the data may be from</font>

28
00:01:36,950 --> 00:01:41,479
a<font color="#CCCCCC"> Kafka topic or from a production</font>

29
00:01:38,719 --> 00:01:43,369
warehouse somewhere and what we're

30
00:01:41,479 --> 00:01:46,149
seeing now increasingly when<font color="#E5E5E5"> mozillian</font>

31
00:01:43,369 --> 00:01:48,920
is getting adoption in industry is that

32
00:01:46,149 --> 00:01:51,049
this<font color="#E5E5E5"> process of extracting the x and y</font>

33
00:01:48,920 --> 00:01:52,850
<font color="#CCCCCC">values and getting the data</font><font color="#E5E5E5"> in the right</font>

34
00:01:51,049 --> 00:01:55,359
format and the right time for<font color="#CCCCCC"> us doing</font>

35
00:01:52,850 --> 00:01:57,710
<font color="#E5E5E5">machine learning</font><font color="#CCCCCC"> is a very big task and</font>

36
00:01:55,359 --> 00:01:59,240
some companies even<font color="#E5E5E5"> argue</font><font color="#CCCCCC"> that this is</font>

37
00:01:57,710 --> 00:02:01,729
the hardest<font color="#E5E5E5"> problem in machine learning</font>

38
00:01:59,240 --> 00:02:03,710
right<font color="#CCCCCC"> now uber for</font><font color="#E5E5E5"> example are claiming</font>

39
00:02:01,729 --> 00:02:05,210
<font color="#E5E5E5">this and they are arguably one of the</font>

40
00:02:03,710 --> 00:02:06,919
companies in<font color="#E5E5E5"> the world that apply</font>

41
00:02:05,210 --> 00:02:08,269
machine learning at a larger scale<font color="#CCCCCC"> so</font>

42
00:02:06,920 --> 00:02:10,850
what they're<font color="#CCCCCC"> saying</font><font color="#E5E5E5"> is kind of</font>

43
00:02:08,270 --> 00:02:12,080
<font color="#E5E5E5">interesting but even if you don't</font>

44
00:02:10,850 --> 00:02:14,690
necessarily agree<font color="#E5E5E5"> with everything</font><font color="#CCCCCC"> you'll</font>

45
00:02:12,080 --> 00:02:16,460
<font color="#E5E5E5">be assessing this quote we have larger</font>

46
00:02:14,690 --> 00:02:17,560
<font color="#E5E5E5">clocks</font><font color="#CCCCCC"> I agree with you on</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> point and</font>

47
00:02:16,460 --> 00:02:20,720
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> they should</font><font color="#CCCCCC"> not be a</font>

48
00:02:17,560 --> 00:02:22,190
question<font color="#CCCCCC"> mark appear rather it should be</font>

49
00:02:20,720 --> 00:02:23,870
a standardized interface for<font color="#E5E5E5"> how you</font>

50
00:02:22,190 --> 00:02:25,970
feed the features into your<font color="#E5E5E5"> model for</font>

51
00:02:23,870 --> 00:02:27,920
<font color="#E5E5E5">training and serving a standard</font>

52
00:02:25,970 --> 00:02:30,080
interface<font color="#CCCCCC"> between data</font><font color="#E5E5E5"> engineering and</font>

53
00:02:27,920 --> 00:02:32,269
data science and that<font color="#E5E5E5"> is the feature</font>

54
00:02:30,080 --> 00:02:36,560
story which I'll be explaining<font color="#E5E5E5"> in the</font>

55
00:02:32,270 --> 00:02:38,210
remainder<font color="#CCCCCC"> of this talk so looking</font><font color="#E5E5E5"> at the</font>

56
00:02:36,560 --> 00:02:39,950
definition<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> feed store is</font><font color="#CCCCCC"> actually</font>

57
00:02:38,210 --> 00:02:42,200
surprisingly<font color="#E5E5E5"> simple it is</font>

58
00:02:39,950 --> 00:02:43,790
a storage location<font color="#CCCCCC"> within your</font>

59
00:02:42,200 --> 00:02:46,970
organization where you store documented

60
00:02:43,790 --> 00:02:48,349
and curated features but the power<font color="#CCCCCC"> of</font>

61
00:02:46,970 --> 00:02:50,390
<font color="#CCCCCC">the field store really</font><font color="#E5E5E5"> comes</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

62
00:02:48,349 --> 00:02:52,579
strong semantics that<font color="#E5E5E5"> we can enforce on</font>

63
00:02:50,390 --> 00:02:55,940
top of this feed store and abstractions

64
00:02:52,580 --> 00:02:57,019
that<font color="#E5E5E5"> we can build on</font><font color="#CCCCCC"> top</font><font color="#E5E5E5"> of it so some</font>

65
00:02:55,940 --> 00:02:58,550
of the things<font color="#CCCCCC"> that we're trying</font><font color="#E5E5E5"> to</font>

66
00:02:57,019 --> 00:03:00,349
achieve<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> feed store or things</font>

67
00:02:58,550 --> 00:03:02,950
like feature versioning automatic

68
00:03:00,349 --> 00:03:06,530
feature documentation and analysis and

69
00:03:02,950 --> 00:03:08,268
also feature<font color="#CCCCCC"> backfilling</font><font color="#E5E5E5"> but the main</font>

70
00:03:06,530 --> 00:03:09,890
point of the feed store<font color="#CCCCCC"> at least in my</font>

71
00:03:08,269 --> 00:03:12,290
opinion<font color="#E5E5E5"> is this first one in the list</font>

72
00:03:09,890 --> 00:03:14,420
<font color="#E5E5E5">which is that by using</font><font color="#CCCCCC"> a feed store it</font>

73
00:03:12,290 --> 00:03:15,890
becomes much simpler<font color="#E5E5E5"> to reuse features</font>

74
00:03:14,420 --> 00:03:18,798
across<font color="#E5E5E5"> different models and across</font>

75
00:03:15,890 --> 00:03:20,000
different<font color="#CCCCCC"> teams</font><font color="#E5E5E5"> and let me elaborate</font><font color="#CCCCCC"> on</font>

76
00:03:18,799 --> 00:03:22,239
a<font color="#E5E5E5"> little bit why that is such a big</font>

77
00:03:20,000 --> 00:03:25,099
improvement<font color="#E5E5E5"> for many</font><font color="#CCCCCC"> organizations today</font>

78
00:03:22,239 --> 00:03:27,799
<font color="#E5E5E5">so what we argue at logic looks is that</font>

79
00:03:25,099 --> 00:03:29,149
<font color="#CCCCCC">by investing in your feed store the cost</font>

80
00:03:27,799 --> 00:03:31,720
of<font color="#E5E5E5"> your machine learning products which</font>

81
00:03:29,150 --> 00:03:34,549
<font color="#E5E5E5">are to taper</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> and our point is that</font>

82
00:03:31,720 --> 00:03:35,810
instead<font color="#E5E5E5"> of doing new big investments in</font>

83
00:03:34,549 --> 00:03:38,329
each machine<font color="#CCCCCC"> learning product you take</font>

84
00:03:35,810 --> 00:03:39,950
on and build custom pipelines you can do

85
00:03:38,329 --> 00:03:42,140
can of one-time investments in the lower

86
00:03:39,950 --> 00:03:44,238
layers of<font color="#CCCCCC"> your</font><font color="#E5E5E5"> design stack such as the</font>

87
00:03:42,140 --> 00:03:45,470
feed store<font color="#CCCCCC"> and has to be locked at field</font>

88
00:03:44,239 --> 00:03:48,290
store with more and<font color="#CCCCCC"> more high quality</font>

89
00:03:45,470 --> 00:03:49,700
<font color="#CCCCCC">features</font><font color="#E5E5E5"> the cost of building new</font><font color="#CCCCCC"> models</font>

90
00:03:48,290 --> 00:03:53,090
on top of the feed store will start to

91
00:03:49,700 --> 00:03:54,350
go down<font color="#CCCCCC"> ulema now look at an example</font><font color="#E5E5E5"> to</font>

92
00:03:53,090 --> 00:03:59,540
further<font color="#E5E5E5"> make this a point of feature</font>

93
00:03:54,350 --> 00:04:01,340
reusability<font color="#E5E5E5"> so this is a like a typical</font>

94
00:03:59,540 --> 00:04:03,019
<font color="#E5E5E5">architecture at an organization today</font>

95
00:04:01,340 --> 00:04:04,400
for<font color="#E5E5E5"> doing machine learning where</font><font color="#CCCCCC"> you</font>

96
00:04:03,019 --> 00:04:05,900
have this<font color="#E5E5E5"> kind of siloed machine</font>

97
00:04:04,400 --> 00:04:09,549
learning pipelines<font color="#E5E5E5"> one for each product</font>

98
00:04:05,900 --> 00:04:11,630
<font color="#E5E5E5">and this is</font><font color="#CCCCCC"> a fairly simple</font><font color="#E5E5E5"> workflow but</font>

99
00:04:09,549 --> 00:04:13,459
when you have<font color="#E5E5E5"> this architecture is</font><font color="#CCCCCC"> very</font>

100
00:04:11,630 --> 00:04:15,100
hard<font color="#E5E5E5"> to do things like reusing features</font>

101
00:04:13,459 --> 00:04:16,820
<font color="#E5E5E5">across</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> different pipelines so</font>

102
00:04:15,100 --> 00:04:18,260
<font color="#CCCCCC">typically what you have to do actually</font>

103
00:04:16,820 --> 00:04:19,728
<font color="#CCCCCC">what I've seen</font><font color="#E5E5E5"> at organizations is that</font>

104
00:04:18,260 --> 00:04:21,918
<font color="#E5E5E5">if you have a feature here</font><font color="#CCCCCC"> that you want</font>

105
00:04:19,728 --> 00:04:25,880
<font color="#E5E5E5">to reuse here you just copy the</font>

106
00:04:21,918 --> 00:04:27,169
definition and<font color="#E5E5E5"> recompute it again and if</font>

107
00:04:25,880 --> 00:04:28,490
you want to do more complex<font color="#E5E5E5"> things like</font>

108
00:04:27,169 --> 00:04:29,900
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example feature</font><font color="#CCCCCC"> backfilling</font>

109
00:04:28,490 --> 00:04:31,970
<font color="#E5E5E5">automatic feature analysis and</font>

110
00:04:29,900 --> 00:04:35,000
documentation<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> impossible</font>

111
00:04:31,970 --> 00:04:37,190
using<font color="#E5E5E5"> this architecture so what we</font>

112
00:04:35,000 --> 00:04:39,110
suggest instead is to use what is<font color="#E5E5E5"> called</font>

113
00:04:37,190 --> 00:04:40,310
a feature store as the<font color="#CCCCCC"> common</font>

114
00:04:39,110 --> 00:04:44,330
interconnect<font color="#E5E5E5"> between all of these</font>

115
00:04:40,310 --> 00:04:46,310
pipelines<font color="#E5E5E5"> this means that a features no</font>

116
00:04:44,330 --> 00:04:48,349
longer<font color="#CCCCCC"> touched a couple</font><font color="#E5E5E5"> sub Civic model</font>

117
00:04:46,310 --> 00:04:51,650
rather features now an independent

118
00:04:48,349 --> 00:04:52,590
version<font color="#E5E5E5"> and reproducible artifacts that</font>

119
00:04:51,650 --> 00:04:54,330
can potentially span

120
00:04:52,590 --> 00:04:56,010
many different<font color="#CCCCCC"> models</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> no longer</font>

121
00:04:54,330 --> 00:04:57,210
have<font color="#CCCCCC"> this tight coupling between model</font>

122
00:04:56,010 --> 00:04:59,820
and<font color="#E5E5E5"> feature rather they</font><font color="#CCCCCC"> are kind of</font>

123
00:04:57,210 --> 00:05:02,219
<font color="#E5E5E5">disconnected now and it gives us a lot</font>

124
00:04:59,820 --> 00:05:04,920
<font color="#CCCCCC">of freedom</font><font color="#E5E5E5"> and flexibility as</font><font color="#CCCCCC"> engineers</font>

125
00:05:02,220 --> 00:05:07,890
<font color="#CCCCCC">or data scientists for example one big</font>

126
00:05:04,920 --> 00:05:10,470
benefit of<font color="#E5E5E5"> this is that now</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> this</font>

127
00:05:07,890 --> 00:05:12,000
consistency<font color="#E5E5E5"> that no matter if you're</font>

128
00:05:10,470 --> 00:05:13,920
<font color="#E5E5E5">using a feature for training or for</font>

129
00:05:12,000 --> 00:05:15,840
serving or for<font color="#E5E5E5"> a neural network or for</font>

130
00:05:13,920 --> 00:05:17,580
decision tree you're always going to<font color="#CCCCCC"> use</font>

131
00:05:15,840 --> 00:05:18,960
<font color="#E5E5E5">the</font><font color="#CCCCCC"> exact</font><font color="#E5E5E5"> this is the same definition of</font>

132
00:05:17,580 --> 00:05:20,580
that<font color="#E5E5E5"> feature because we are not</font>

133
00:05:18,960 --> 00:05:24,239
redefining it over and over<font color="#E5E5E5"> again we are</font>

134
00:05:20,580 --> 00:05:25,740
reusing<font color="#E5E5E5"> the same feature again and this</font>

135
00:05:24,240 --> 00:05:27,180
also<font color="#E5E5E5"> means that we</font><font color="#CCCCCC"> can do nice things</font>

136
00:05:25,740 --> 00:05:28,620
like<font color="#E5E5E5"> here we are all features</font>

137
00:05:27,180 --> 00:05:31,440
centralized so we can<font color="#CCCCCC"> easily analyze</font>

138
00:05:28,620 --> 00:05:34,350
them look<font color="#E5E5E5"> for the correlations we can</font>

139
00:05:31,440 --> 00:05:35,550
also do things<font color="#CCCCCC"> like feature backfilling</font>

140
00:05:34,350 --> 00:05:37,830
<font color="#E5E5E5">so we can be more efficient in how we</font>

141
00:05:35,550 --> 00:05:39,660
compute<font color="#E5E5E5"> the features and that</font><font color="#CCCCCC"> is kind of</font>

142
00:05:37,830 --> 00:05:41,849
the<font color="#CCCCCC"> promise of what</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> filter will give</font>

143
00:05:39,660 --> 00:05:42,840
you and now I'll just very<font color="#E5E5E5"> briefly going</font>

144
00:05:41,850 --> 00:05:44,100
through the more of the<font color="#E5E5E5"> technical</font>

145
00:05:42,840 --> 00:05:46,260
details<font color="#CCCCCC"> on how</font><font color="#E5E5E5"> we can be allowed this</font>

146
00:05:44,100 --> 00:05:48,000
thing<font color="#E5E5E5"> and</font><font color="#CCCCCC"> are we speaking</font><font color="#E5E5E5"> out from</font>

147
00:05:46,260 --> 00:05:53,640
experience of<font color="#CCCCCC"> building a</font><font color="#E5E5E5"> feed store on</font>

148
00:05:48,000 --> 00:05:55,670
our platform<font color="#E5E5E5"> so</font><font color="#CCCCCC"> internally</font><font color="#E5E5E5"> a feed store</font>

149
00:05:53,640 --> 00:05:57,780
consists of five different components

150
00:05:55,670 --> 00:06:00,000
starting<font color="#CCCCCC"> with the storage layer where</font><font color="#E5E5E5"> we</font>

151
00:05:57,780 --> 00:06:02,130
store<font color="#CCCCCC"> actual feature data</font><font color="#E5E5E5"> this tends to</font>

152
00:06:00,000 --> 00:06:05,150
be predominantly<font color="#E5E5E5"> numeric data like</font>

153
00:06:02,130 --> 00:06:07,620
floats and integers but it can also be

154
00:06:05,150 --> 00:06:10,349
categorical data<font color="#E5E5E5"> or binary data for</font>

155
00:06:07,620 --> 00:06:12,750
example then we have the metadata layer

156
00:06:10,350 --> 00:06:14,340
<font color="#E5E5E5">and this is in my opinion</font><font color="#CCCCCC"> the most</font>

157
00:06:12,750 --> 00:06:15,750
important layer to<font color="#E5E5E5"> get right with</font><font color="#CCCCCC"> the</font>

158
00:06:14,340 --> 00:06:17,429
<font color="#E5E5E5">field store and you'll see in our</font>

159
00:06:15,750 --> 00:06:19,440
implementation<font color="#E5E5E5"> we exploit is quite a lot</font>

160
00:06:17,430 --> 00:06:21,360
so this<font color="#E5E5E5"> is where we store things like</font>

161
00:06:19,440 --> 00:06:23,400
<font color="#E5E5E5">the version</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a feature the ownership</font>

162
00:06:21,360 --> 00:06:25,680
of the feature which models or is it

163
00:06:23,400 --> 00:06:27,330
used which your business<font color="#E5E5E5"> computer</font>

164
00:06:25,680 --> 00:06:29,460
feature and for<font color="#E5E5E5"> which</font><font color="#CCCCCC"> data set does it</font>

165
00:06:27,330 --> 00:06:31,680
originate<font color="#E5E5E5"> this means</font><font color="#CCCCCC"> that we can out</font>

166
00:06:29,460 --> 00:06:33,900
automatically<font color="#E5E5E5"> backfill features were</font>

167
00:06:31,680 --> 00:06:35,610
necessary<font color="#E5E5E5"> we also store a lot of</font>

168
00:06:33,900 --> 00:06:37,020
statistics<font color="#E5E5E5"> about our features for</font>

169
00:06:35,610 --> 00:06:38,820
helping our data<font color="#CCCCCC"> scientists understand</font>

170
00:06:37,020 --> 00:06:41,070
the features<font color="#E5E5E5"> like the distribution of</font>

171
00:06:38,820 --> 00:06:42,690
all<font color="#E5E5E5"> features over time the correlation</font>

172
00:06:41,070 --> 00:06:44,520
with each other so Spearman and<font color="#E5E5E5"> Pearson</font>

173
00:06:42,690 --> 00:06:45,960
correlations and we also store

174
00:06:44,520 --> 00:06:48,900
descriptive statistics<font color="#CCCCCC"> and clustering</font>

175
00:06:45,960 --> 00:06:50,340
analysis<font color="#E5E5E5"> and so on then we</font><font color="#CCCCCC"> have the two</font>

176
00:06:48,900 --> 00:06:51,900
final components of the field store

177
00:06:50,340 --> 00:06:54,299
which is<font color="#CCCCCC"> the feature registry and</font><font color="#E5E5E5"> the</font>

178
00:06:51,900 --> 00:06:56,700
API and this is<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> client-side</font>

179
00:06:54,300 --> 00:06:58,380
interface to the field store<font color="#E5E5E5"> and the</font>

180
00:06:56,700 --> 00:07:00,690
registry<font color="#E5E5E5"> you can think of it as the</font>

181
00:06:58,380 --> 00:07:02,280
<font color="#E5E5E5">front</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> store feed store it is a place</font>

182
00:07:00,690 --> 00:07:03,690
<font color="#CCCCCC">where we can publish our features we can</font>

183
00:07:02,280 --> 00:07:06,380
<font color="#E5E5E5">search</font><font color="#CCCCCC"> for them we</font><font color="#E5E5E5"> can browse their</font>

184
00:07:03,690 --> 00:07:09,890
metadata or documentation

185
00:07:06,380 --> 00:07:11,810
features and and<font color="#CCCCCC"> you publish your own</font>

186
00:07:09,890 --> 00:07:13,580
<font color="#E5E5E5">work basically so you can think</font><font color="#CCCCCC"> of it in</font>

187
00:07:11,810 --> 00:07:15,620
a little<font color="#CCCCCC"> way like an app store for</font>

188
00:07:13,580 --> 00:07:17,359
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> learning so it's a place where</font>

189
00:07:15,620 --> 00:07:18,680
you can discover new features within the

190
00:07:17,360 --> 00:07:20,240
organization and<font color="#E5E5E5"> you can also publish</font>

191
00:07:18,680 --> 00:07:23,510
<font color="#E5E5E5">your own work so that other people can</font>

192
00:07:20,240 --> 00:07:26,390
reuse it and<font color="#E5E5E5"> then the final component is</font>

193
00:07:23,510 --> 00:07:27,800
<font color="#E5E5E5">the API this is what we use inside</font><font color="#CCCCCC"> our</font>

194
00:07:26,390 --> 00:07:29,599
machine learning pipelines<font color="#E5E5E5"> to read and</font>

195
00:07:27,800 --> 00:07:31,640
write to<font color="#E5E5E5"> the store and this is just a</font>

196
00:07:29,600 --> 00:07:33,290
regular<font color="#CCCCCC"> client-side libraries that</font><font color="#E5E5E5"> we</font>

197
00:07:31,640 --> 00:07:36,860
use and I'll show<font color="#E5E5E5"> you a quick example of</font>

198
00:07:33,290 --> 00:07:40,100
<font color="#CCCCCC">how our API</font><font color="#E5E5E5"> looks like so here we have</font>

199
00:07:36,860 --> 00:07:41,570
two<font color="#CCCCCC"> examples of the API</font><font color="#E5E5E5"> and one for</font>

200
00:07:40,100 --> 00:07:43,700
reading<font color="#E5E5E5"> from a store and one for</font><font color="#CCCCCC"> writing</font>

201
00:07:41,570 --> 00:07:45,500
to<font color="#CCCCCC"> the store</font><font color="#E5E5E5"> and as you can see code</font>

202
00:07:43,700 --> 00:07:48,440
wise<font color="#CCCCCC"> I hope you agree</font><font color="#E5E5E5"> with me it's quite</font>

203
00:07:45,500 --> 00:07:50,120
a simple<font color="#E5E5E5"> API so to read from the story</font>

204
00:07:48,440 --> 00:07:51,920
<font color="#E5E5E5">has</font><font color="#CCCCCC"> provided</font><font color="#E5E5E5"> a list of feature names and</font>

205
00:07:50,120 --> 00:07:55,790
to write to the<font color="#E5E5E5"> story just</font><font color="#CCCCCC"> provide a</font>

206
00:07:51,920 --> 00:07:57,380
<font color="#E5E5E5">data frame of features and to make this</font>

207
00:07:55,790 --> 00:07:58,910
API so simple what we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> done is</font><font color="#CCCCCC"> that</font>

208
00:07:57,380 --> 00:08:00,320
<font color="#CCCCCC">we are abstracted out all of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> heavy</font>

209
00:07:58,910 --> 00:08:02,060
lifting into<font color="#E5E5E5"> our client-side libraries</font>

210
00:08:00,320 --> 00:08:04,520
so we<font color="#CCCCCC"> actually have a query planner</font>

211
00:08:02,060 --> 00:08:07,310
<font color="#E5E5E5">analyse your query and give you the</font>

212
00:08:04,520 --> 00:08:08,359
result<font color="#E5E5E5"> and now I'm</font><font color="#CCCCCC"> a time stop but if</font>

213
00:08:07,310 --> 00:08:09,890
you're<font color="#E5E5E5"> interested I have</font><font color="#CCCCCC"> several</font>

214
00:08:08,360 --> 00:08:11,690
references on the final slide<font color="#CCCCCC"> we can</font>

215
00:08:09,890 --> 00:08:14,930
<font color="#CCCCCC">read</font><font color="#E5E5E5"> more and</font><font color="#CCCCCC"> yes to summarize this</font>

216
00:08:11,690 --> 00:08:16,460
presentation<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> learning comes it's</font>

217
00:08:14,930 --> 00:08:18,530
a very powerful tool but<font color="#E5E5E5"> it also comes</font>

218
00:08:16,460 --> 00:08:19,640
with a<font color="#CCCCCC"> very high</font><font color="#E5E5E5"> technical cost and in</font>

219
00:08:18,530 --> 00:08:21,380
the<font color="#E5E5E5"> beginning of this</font><font color="#CCCCCC"> presentation I</font>

220
00:08:19,640 --> 00:08:22,880
mentioned is complexity<font color="#CCCCCC"> of getting the</font>

221
00:08:21,380 --> 00:08:25,159
<font color="#E5E5E5">data in the right format at the right</font>

222
00:08:22,880 --> 00:08:27,230
time for<font color="#E5E5E5"> doing machine learning</font><font color="#CCCCCC"> and our</font>

223
00:08:25,160 --> 00:08:29,210
solution<font color="#CCCCCC"> to</font><font color="#E5E5E5"> this problem is to invest in</font>

224
00:08:27,230 --> 00:08:31,430
a data management layer specifically

225
00:08:29,210 --> 00:08:33,799
designed<font color="#CCCCCC"> for machine learning</font><font color="#E5E5E5"> called a</font>

226
00:08:31,430 --> 00:08:35,390
feed store<font color="#E5E5E5"> and the world's first</font><font color="#CCCCCC"> open</font>

227
00:08:33,799 --> 00:08:38,919
<font color="#CCCCCC">source</font><font color="#E5E5E5"> feed store is available on our</font>

228
00:08:35,390 --> 00:08:47,859
platform called<font color="#CCCCCC"> hops works</font><font color="#E5E5E5"> thank you</font>

229
00:08:38,919 --> 00:08:47,859
[Applause]

230
00:08:55,440 --> 00:08:59,350
yes so the<font color="#CCCCCC"> question is what type of</font>

231
00:08:58,029 --> 00:09:01,779
features<font color="#CCCCCC"> would be</font><font color="#E5E5E5"> for natural language</font>

232
00:08:59,350 --> 00:09:03,339
processing and<font color="#CCCCCC"> tibial features could be</font>

233
00:09:01,779 --> 00:09:04,870
<font color="#E5E5E5">for example word embeddings are very</font>

234
00:09:03,339 --> 00:09:08,079
common<font color="#E5E5E5"> but it can also be features such</font>

235
00:09:04,870 --> 00:09:09,459
as<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this word a noun or a synonym or</font>

236
00:09:08,079 --> 00:09:11,349
<font color="#E5E5E5">those kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> features but word</font>

237
00:09:09,459 --> 00:09:16,449
embeddings<font color="#E5E5E5"> I think is the main feature</font>

238
00:09:11,350 --> 00:09:17,649
we're using in the NLP right now yes<font color="#E5E5E5"> you</font>

239
00:09:16,449 --> 00:09:19,359
can do that<font color="#CCCCCC"> as</font><font color="#E5E5E5"> well it depends a bit</font>

240
00:09:17,649 --> 00:09:21,399
<font color="#E5E5E5">which task you're trying to solve but</font>

241
00:09:19,360 --> 00:09:23,350
that's<font color="#E5E5E5"> that's also an option but you can</font>

242
00:09:21,399 --> 00:09:25,589
add<font color="#E5E5E5"> more features the better in most</font>

243
00:09:23,350 --> 00:09:25,589
cases

