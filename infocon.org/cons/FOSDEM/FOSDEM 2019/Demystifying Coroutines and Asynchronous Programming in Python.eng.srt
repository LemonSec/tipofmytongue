1
00:00:15,129 --> 00:00:19,490
hello hello<font color="#E5E5E5"> everybody thank you for</font>

2
00:00:18,439 --> 00:00:21,650
<font color="#CCCCCC">being here</font>

3
00:00:19,490 --> 00:00:23,288
my name is<font color="#CCCCCC"> Mariano nya I'm a software</font>

4
00:00:21,650 --> 00:00:25,400
<font color="#CCCCCC">engineer at Skyscanner</font>

5
00:00:23,289 --> 00:00:27,199
and today I'll<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> the</font>

6
00:00:25,400 --> 00:00:32,390
synchronous programming<font color="#CCCCCC"> and how it works</font>

7
00:00:27,199 --> 00:00:36,320
in more<font color="#CCCCCC"> python</font><font color="#E5E5E5"> basically the idea of</font>

8
00:00:32,390 --> 00:00:38,210
<font color="#E5E5E5">this talk is to actually revisit the</font>

9
00:00:36,320 --> 00:00:40,579
male mind stones that have<font color="#E5E5E5"> been</font>

10
00:00:38,210 --> 00:00:43,550
happening<font color="#E5E5E5"> in versions of Python that</font>

11
00:00:40,579 --> 00:00:46,399
arrived to the current state of the art

12
00:00:43,550 --> 00:00:49,280
<font color="#E5E5E5">in in our programming language basically</font>

13
00:00:46,399 --> 00:00:50,870
maybe I've been<font color="#E5E5E5"> through some</font><font color="#CCCCCC"> old peps</font><font color="#E5E5E5"> in</font>

14
00:00:49,280 --> 00:00:54,139
<font color="#CCCCCC">order to understand</font><font color="#E5E5E5"> well had been</font><font color="#CCCCCC"> the</font>

15
00:00:50,870 --> 00:00:56,510
main cornerstones<font color="#E5E5E5"> with the idea of not</font>

16
00:00:54,139 --> 00:00:58,129
<font color="#CCCCCC">just exploring</font><font color="#E5E5E5"> the API because probably</font>

17
00:00:56,510 --> 00:01:00,049
<font color="#E5E5E5">you already know that or you you know</font>

18
00:00:58,129 --> 00:01:02,239
how<font color="#E5E5E5"> to use the functions but</font><font color="#CCCCCC"> when you're</font>

19
00:01:00,049 --> 00:01:04,369
<font color="#E5E5E5">interested in knowing what's behind it</font>

20
00:01:02,239 --> 00:01:07,429
or how things work or you're curious

21
00:01:04,369 --> 00:01:09,770
<font color="#E5E5E5">about what's internally</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> so this is</font>

22
00:01:07,430 --> 00:01:11,180
a<font color="#CCCCCC"> real</font><font color="#E5E5E5"> long journey in terms of time</font>

23
00:01:09,770 --> 00:01:13,250
because it starts with<font color="#CCCCCC"> something</font><font color="#E5E5E5"> that</font>

24
00:01:11,180 --> 00:01:16,460
came<font color="#CCCCCC"> about</font><font color="#E5E5E5"> a very long time ago with</font>

25
00:01:13,250 --> 00:01:20,240
generators in<font color="#CCCCCC"> the year 2001 in a very</font>

26
00:01:16,460 --> 00:01:22,399
old version<font color="#E5E5E5"> of python 2.2</font><font color="#CCCCCC"> and the idea</font>

27
00:01:20,240 --> 00:01:25,009
was back<font color="#E5E5E5"> today to support a more</font>

28
00:01:22,400 --> 00:01:26,510
efficient way<font color="#CCCCCC"> of computation like for</font>

29
00:01:25,010 --> 00:01:28,610
<font color="#CCCCCC">instance they were created with the</font><font color="#E5E5E5"> all</font>

30
00:01:26,510 --> 00:01:32,870
<font color="#E5E5E5">AC iteration in mind so let's say you</font>

31
00:01:28,610 --> 00:01:34,820
have to process large bunch of<font color="#E5E5E5"> objects</font>

32
00:01:32,870 --> 00:01:36,980
let's say like a million numbers or a

33
00:01:34,820 --> 00:01:38,660
trillion numbers and one way of<font color="#CCCCCC"> doing so</font>

34
00:01:36,980 --> 00:01:40,670
you say<font color="#E5E5E5"> I can put everything</font><font color="#CCCCCC"> into a list</font>

35
00:01:38,660 --> 00:01:43,250
<font color="#E5E5E5">and then process the list and that would</font>

36
00:01:40,670 --> 00:01:46,370
work but you<font color="#E5E5E5"> will take a lot of memory</font>

37
00:01:43,250 --> 00:01:48,590
<font color="#E5E5E5">so or the same goes for any object so</font>

38
00:01:46,370 --> 00:01:50,540
the idea was<font color="#E5E5E5"> to okay let's provide a</font>

39
00:01:48,590 --> 00:01:53,120
mechanism in Python<font color="#E5E5E5"> to be able to</font>

40
00:01:50,540 --> 00:01:54,860
generate only<font color="#CCCCCC"> the object that I need</font><font color="#E5E5E5"> a</font>

41
00:01:53,120 --> 00:01:58,070
<font color="#E5E5E5">given point in time and no more than</font>

42
00:01:54,860 --> 00:02:01,700
that and save a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of memory</font><font color="#E5E5E5"> so the</font>

43
00:01:58,070 --> 00:02:03,619
<font color="#CCCCCC">point of</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there were</font><font color="#CCCCCC"> the VIS</font>

44
00:02:01,700 --> 00:02:05,840
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> we say memory and we support like</font>

45
00:02:03,620 --> 00:02:07,400
the iteration<font color="#CCCCCC"> pattern</font><font color="#E5E5E5"> and at the point</font>

46
00:02:05,840 --> 00:02:09,200
in<font color="#E5E5E5"> time the generator is going</font><font color="#CCCCCC"> to give</font>

47
00:02:07,400 --> 00:02:10,879
<font color="#E5E5E5">us the value we need for</font><font color="#CCCCCC"> that particular</font>

48
00:02:09,199 --> 00:02:13,040
<font color="#CCCCCC">moment and it's going</font><font color="#E5E5E5"> to suspend there</font>

49
00:02:10,878 --> 00:02:14,899
<font color="#E5E5E5">and it's going to be there until we call</font>

50
00:02:13,040 --> 00:02:18,950
it again with the<font color="#E5E5E5"> next value that we</font>

51
00:02:14,900 --> 00:02:22,130
<font color="#E5E5E5">need so a new keyword was introduced</font>

52
00:02:18,950 --> 00:02:24,679
and this works like with two very<font color="#E5E5E5"> simple</font>

53
00:02:22,130 --> 00:02:28,359
concepts you have<font color="#E5E5E5"> any function but if</font>

54
00:02:24,680 --> 00:02:31,459
<font color="#E5E5E5">that hash function happens to have a Geo</font>

55
00:02:28,360 --> 00:02:34,040
<font color="#E5E5E5">statement in any part of its</font><font color="#CCCCCC"> body is</font>

56
00:02:31,459 --> 00:02:36,080
going<font color="#E5E5E5"> to be a generator function</font><font color="#CCCCCC"> which</font>

57
00:02:34,040 --> 00:02:37,340
means<font color="#E5E5E5"> that when</font><font color="#CCCCCC"> you call it whatever</font><font color="#E5E5E5"> it</font>

58
00:02:36,080 --> 00:02:39,110
is<font color="#CCCCCC"> from the value</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> function is not</font>

59
00:02:37,340 --> 00:02:40,940
going to run instead<font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to give</font>

60
00:02:39,110 --> 00:02:42,290
you<font color="#E5E5E5"> a generator object so they were like</font>

61
00:02:40,940 --> 00:02:44,599
a factory when you call it you'll

62
00:02:42,290 --> 00:02:46,700
receive and a generator<font color="#CCCCCC"> that was just</font>

63
00:02:44,599 --> 00:02:49,220
constructed and then you start working

64
00:02:46,700 --> 00:02:52,850
<font color="#CCCCCC">with that object advancing</font><font color="#E5E5E5"> the element</font>

65
00:02:49,220 --> 00:02:54,350
one at<font color="#E5E5E5"> a time at next point</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> the</font>

66
00:02:52,850 --> 00:02:55,670
element<font color="#E5E5E5"> the generator is going to</font>

67
00:02:54,350 --> 00:02:59,299
suspend there<font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be like</font>

68
00:02:55,670 --> 00:03:01,069
<font color="#CCCCCC">frozen waiting to be cold again</font><font color="#E5E5E5"> with the</font>

69
00:02:59,299 --> 00:03:04,130
next<font color="#CCCCCC"> value and there is</font><font color="#E5E5E5"> nothing else to</font>

70
00:03:01,069 --> 00:03:06,109
<font color="#E5E5E5">produce because it got exhausted</font><font color="#CCCCCC"> and in</font>

71
00:03:04,130 --> 00:03:09,109
that case<font color="#CCCCCC"> stop iteration</font><font color="#E5E5E5"> exception is</font>

72
00:03:06,110 --> 00:03:12,650
raised which<font color="#E5E5E5"> is the mechanism to signal</font>

73
00:03:09,110 --> 00:03:15,019
that that iteration<font color="#E5E5E5"> is over so now let's</font>

74
00:03:12,650 --> 00:03:18,560
say that time<font color="#E5E5E5"> after we want to support</font>

75
00:03:15,019 --> 00:03:20,630
coroutines in<font color="#E5E5E5"> Python and I'm not even</font>

76
00:03:18,560 --> 00:03:22,400
like<font color="#CCCCCC"> at an academic</font><font color="#E5E5E5"> or like a formal</font>

77
00:03:20,630 --> 00:03:24,049
definition<font color="#CCCCCC"> of qualities which has for</font>

78
00:03:22,400 --> 00:03:26,359
the purpose<font color="#E5E5E5"> of this talk</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going to</font>

79
00:03:24,049 --> 00:03:28,030
have a more pragmatic understanding of

80
00:03:26,359 --> 00:03:31,340
qualities it will be something like

81
00:03:28,030 --> 00:03:33,470
you're able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> suspend</font><font color="#CCCCCC"> at any point in</font>

82
00:03:31,340 --> 00:03:36,200
time<font color="#CCCCCC"> but you also want to be able</font><font color="#E5E5E5"> to</font>

83
00:03:33,470 --> 00:03:38,390
resume at a later point in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> program</font>

84
00:03:36,200 --> 00:03:42,679
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to continue the execution</font>

85
00:03:38,390 --> 00:03:44,869
with different values<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if we were to</font>

86
00:03:42,680 --> 00:03:47,120
implement<font color="#E5E5E5"> this in Python like and we</font>

87
00:03:44,870 --> 00:03:51,980
start to think<font color="#CCCCCC"> okay how</font><font color="#E5E5E5"> can we have this</font>

88
00:03:47,120 --> 00:03:53,600
<font color="#CCCCCC">work</font><font color="#E5E5E5"> in do we have to let's say start</font>

89
00:03:51,980 --> 00:03:55,760
from from scratch<font color="#CCCCCC"> and implemented</font>

90
00:03:53,600 --> 00:03:57,410
<font color="#E5E5E5">everything on top or is there something</font>

91
00:03:55,760 --> 00:03:59,268
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can already take advantage of</font>

92
00:03:57,410 --> 00:04:01,400
and the<font color="#E5E5E5"> reason why I started</font><font color="#CCCCCC"> with</font>

93
00:03:59,269 --> 00:04:03,650
generators is because<font color="#CCCCCC"> ok they have</font>

94
00:04:01,400 --> 00:04:05,299
<font color="#CCCCCC">something</font><font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> use for advantage</font>

95
00:04:03,650 --> 00:04:07,910
which is<font color="#CCCCCC"> the point of suspension</font>

96
00:04:05,299 --> 00:04:09,290
remember that<font color="#E5E5E5"> a generator is suspended</font>

97
00:04:07,910 --> 00:04:12,200
at a point in terms<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interpreter</font>

98
00:04:09,290 --> 00:04:14,840
is<font color="#E5E5E5"> frozen in a part of the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and then</font>

99
00:04:12,200 --> 00:04:16,310
<font color="#E5E5E5">it can be resumed later up so this pep</font>

100
00:04:14,840 --> 00:04:18,709
came along this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> co-written by</font>

101
00:04:16,310 --> 00:04:20,358
enhanced generators because<font color="#CCCCCC"> ok there is</font>

102
00:04:18,709 --> 00:04:22,130
something<font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> advantage of</font>

103
00:04:20,358 --> 00:04:24,620
so it's not that<font color="#E5E5E5"> we have to do</font>

104
00:04:22,130 --> 00:04:26,450
everything again<font color="#E5E5E5"> so let's recap</font><font color="#CCCCCC"> how far</font>

105
00:04:24,620 --> 00:04:28,280
can<font color="#CCCCCC"> we go</font><font color="#E5E5E5"> with with generators with</font>

106
00:04:26,450 --> 00:04:30,200
simple<font color="#CCCCCC"> suspend</font>

107
00:04:28,280 --> 00:04:32,179
yes<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was the whole point of</font>

108
00:04:30,200 --> 00:04:34,280
using them in the first<font color="#E5E5E5"> place</font>

109
00:04:32,180 --> 00:04:36,590
but can we pass some data to the

110
00:04:34,280 --> 00:04:38,299
generator<font color="#CCCCCC"> Weis is suspended</font><font color="#E5E5E5"> I mean in</font>

111
00:04:36,590 --> 00:04:41,380
<font color="#E5E5E5">its simple form like in</font><font color="#CCCCCC"> a very</font><font color="#E5E5E5"> basic</font>

112
00:04:38,300 --> 00:04:43,940
<font color="#E5E5E5">form no that's not possible</font>

113
00:04:41,380 --> 00:04:46,490
what about exceptions<font color="#E5E5E5"> can</font><font color="#CCCCCC"> we send an</font>

114
00:04:43,940 --> 00:04:49,010
exception to<font color="#CCCCCC"> to our generator</font><font color="#E5E5E5"> whines is</font>

115
00:04:46,490 --> 00:04:53,270
suspended to signal<font color="#CCCCCC"> that something</font><font color="#E5E5E5"> has</font>

116
00:04:49,010 --> 00:04:55,550
going<font color="#E5E5E5"> on in the program</font><font color="#CCCCCC"> no that was not</font>

117
00:04:53,270 --> 00:04:57,950
possible<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's why the enhanced part</font>

118
00:04:55,550 --> 00:05:01,160
came so long and the interface<font color="#CCCCCC"> of</font>

119
00:04:57,950 --> 00:05:04,130
generators needed to be extended<font color="#E5E5E5"> so more</font>

120
00:05:01,160 --> 00:05:06,920
methods were added to fulfill<font color="#E5E5E5"> this</font>

121
00:05:04,130 --> 00:05:09,710
purpose<font color="#E5E5E5"> for instance the same method we</font>

122
00:05:06,920 --> 00:05:12,200
<font color="#E5E5E5">and throw through handle exceptions and</font>

123
00:05:09,710 --> 00:05:14,239
<font color="#E5E5E5">close to some cleanup in the in the core</font>

124
00:05:12,200 --> 00:05:16,219
routine or<font color="#CCCCCC"> the generator</font><font color="#E5E5E5"> but technically</font>

125
00:05:14,240 --> 00:05:18,190
that's just a particular<font color="#E5E5E5"> case of throw</font>

126
00:05:16,220 --> 00:05:20,990
because<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> hand as</font><font color="#E5E5E5"> an exception</font>

127
00:05:18,190 --> 00:05:22,670
which is generator<font color="#E5E5E5"> exit but the most</font>

128
00:05:20,990 --> 00:05:26,270
important<font color="#E5E5E5"> is</font><font color="#CCCCCC"> its end because it's what</font>

129
00:05:22,670 --> 00:05:29,510
changes the semantics a little bit so

130
00:05:26,270 --> 00:05:32,330
<font color="#E5E5E5">now let's stop for a second in this</font>

131
00:05:29,510 --> 00:05:33,770
concept<font color="#E5E5E5"> because okay we have generators</font>

132
00:05:32,330 --> 00:05:35,630
and we start to thinking<font color="#CCCCCC"> quarantines</font>

133
00:05:33,770 --> 00:05:37,669
because we can create<font color="#CCCCCC"> something that we</font>

134
00:05:35,630 --> 00:05:41,120
are able<font color="#CCCCCC"> to suspend and interact wait</font>

135
00:05:37,670 --> 00:05:42,560
<font color="#E5E5E5">and</font><font color="#CCCCCC"> point in time in the program so</font>

136
00:05:41,120 --> 00:05:44,990
syntactically<font color="#CCCCCC"> there difference there</font>

137
00:05:42,560 --> 00:05:48,410
hasn't been any changes in in coroutines

138
00:05:44,990 --> 00:05:51,050
they still use the<font color="#E5E5E5"> Jill</font><font color="#CCCCCC"> keyword as the</font>

139
00:05:48,410 --> 00:05:53,840
as<font color="#E5E5E5"> the old generators did and they were</font>

140
00:05:51,050 --> 00:05:55,820
a<font color="#E5E5E5"> beginning but semantically they are</font>

141
00:05:53,840 --> 00:05:57,979
different<font color="#E5E5E5"> because and I will come up</font>

142
00:05:55,820 --> 00:05:59,840
<font color="#E5E5E5">with this later in a few slides but just</font>

143
00:05:57,980 --> 00:06:02,090
keep in mind<font color="#E5E5E5"> that even</font><font color="#CCCCCC"> though they are</font>

144
00:05:59,840 --> 00:06:04,609
<font color="#CCCCCC">written the same and they're even</font>

145
00:06:02,090 --> 00:06:06,530
technically the<font color="#E5E5E5"> same thing conceptually</font>

146
00:06:04,610 --> 00:06:09,230
<font color="#E5E5E5">there they're</font><font color="#CCCCCC"> men with completely</font>

147
00:06:06,530 --> 00:06:11,570
<font color="#CCCCCC">different purposes and this</font><font color="#E5E5E5"> will also be</font>

148
00:06:09,230 --> 00:06:13,040
<font color="#E5E5E5">an important</font><font color="#CCCCCC"> stabilizer</font><font color="#E5E5E5"> but for now</font>

149
00:06:11,570 --> 00:06:15,349
let's say how we<font color="#E5E5E5"> can interact with</font>

150
00:06:13,040 --> 00:06:17,330
<font color="#CCCCCC">co-routines at least in a very basic</font>

151
00:06:15,350 --> 00:06:19,570
<font color="#E5E5E5">form because they were still</font><font color="#CCCCCC"> in a very</font>

152
00:06:17,330 --> 00:06:25,640
old version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Python this is still</font><font color="#CCCCCC"> to</font>

153
00:06:19,570 --> 00:06:28,370
2005 python 2.5 and now<font color="#E5E5E5"> Jill not only</font>

154
00:06:25,640 --> 00:06:33,469
produces values<font color="#E5E5E5"> to the color we also can</font>

155
00:06:28,370 --> 00:06:35,960
get some value as a result<font color="#E5E5E5"> so now Jill</font>

156
00:06:33,470 --> 00:06:37,490
for example result is<font color="#CCCCCC"> where the color</font><font color="#E5E5E5"> is</font>

157
00:06:35,960 --> 00:06:41,359
<font color="#E5E5E5">going to get when we called the</font>

158
00:06:37,490 --> 00:06:43,100
<font color="#CCCCCC">generator or coroutine Andres value in</font>

159
00:06:41,360 --> 00:06:45,290
<font color="#E5E5E5">this case</font><font color="#CCCCCC"> the variable</font><font color="#E5E5E5"> value</font><font color="#CCCCCC"> is going to</font>

160
00:06:43,100 --> 00:06:45,960
<font color="#E5E5E5">be whatever was passed from the outside</font>

161
00:06:45,290 --> 00:06:48,330
to<font color="#CCCCCC"> the core</font>

162
00:06:45,960 --> 00:06:51,020
it was going to be<font color="#E5E5E5"> capture so I prepared</font>

163
00:06:48,330 --> 00:06:53,758
<font color="#E5E5E5">a small example just to illustrate this</font>

164
00:06:51,020 --> 00:06:56,490
let's say how a quarantine that<font color="#E5E5E5"> only</font>

165
00:06:53,759 --> 00:06:59,009
iterates<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's contain some steps</font><font color="#E5E5E5"> and</font>

166
00:06:56,490 --> 00:07:01,289
<font color="#E5E5E5">in sprinting whatever God's received so</font>

167
00:06:59,009 --> 00:07:03,030
I want to<font color="#E5E5E5"> create that quarantine and</font>

168
00:07:01,289 --> 00:07:06,389
start<font color="#E5E5E5"> sending values just to see how</font>

169
00:07:03,030 --> 00:07:09,710
this now geo works in in both ways<font color="#E5E5E5"> so</font>

170
00:07:06,389 --> 00:07:12,919
the first thing I do is I'll create<font color="#CCCCCC"> the</font>

171
00:07:09,710 --> 00:07:15,830
<font color="#CCCCCC">record</font><font color="#E5E5E5"> in its</font><font color="#CCCCCC"> pause for a second wait so</font>

172
00:07:12,919 --> 00:07:17,880
once I created remember it gives me a

173
00:07:15,830 --> 00:07:21,240
generator object because it's like a

174
00:07:17,880 --> 00:07:23,039
factory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I call next the first time</font>

175
00:07:21,240 --> 00:07:25,199
<font color="#E5E5E5">this is an important</font><font color="#CCCCCC"> little because if I</font>

176
00:07:23,039 --> 00:07:27,750
<font color="#E5E5E5">don't call next I'm not able to send</font>

177
00:07:25,199 --> 00:07:30,389
<font color="#CCCCCC">anything to it</font><font color="#E5E5E5"> or I will get a type</font>

178
00:07:27,750 --> 00:07:33,150
error<font color="#E5E5E5"> this is because the next remember</font>

179
00:07:30,389 --> 00:07:35,220
<font color="#E5E5E5">that it moves the execution of the</font>

180
00:07:33,150 --> 00:07:37,380
<font color="#CCCCCC">quarantine or generator UPS</font><font color="#E5E5E5"> up to the</font>

181
00:07:35,220 --> 00:07:40,740
next<font color="#E5E5E5"> geo statement so it needs to post</font>

182
00:07:37,380 --> 00:07:43,320
there so I can send<font color="#E5E5E5"> the first element</font>

183
00:07:40,740 --> 00:07:46,289
<font color="#CCCCCC">okay so now the program outdance up to</font>

184
00:07:43,320 --> 00:07:48,750
<font color="#E5E5E5">that point where it's waiting for</font>

185
00:07:46,289 --> 00:07:51,150
something<font color="#CCCCCC"> and look at that line</font><font color="#E5E5E5"> the one</font>

186
00:07:48,750 --> 00:07:53,280
is like you can see you can think like

187
00:07:51,150 --> 00:07:57,989
<font color="#E5E5E5">that line is split in like in two ways</font>

188
00:07:53,280 --> 00:08:00,059
and<font color="#E5E5E5"> only half that stamen</font><font color="#CCCCCC"> run the part</font>

189
00:07:57,990 --> 00:08:01,680
<font color="#E5E5E5">that give me the value</font><font color="#CCCCCC"> 0 which</font><font color="#E5E5E5"> caused</font><font color="#CCCCCC"> it</font>

190
00:08:00,060 --> 00:08:03,810
<font color="#E5E5E5">yielded the first step which is started</font>

191
00:08:01,680 --> 00:08:05,550
at<font color="#E5E5E5"> 0 1 so now I can start</font><font color="#CCCCCC"> interacting</font>

192
00:08:03,810 --> 00:08:09,510
with<font color="#CCCCCC"> the generator and let's say that</font><font color="#E5E5E5"> I</font>

193
00:08:05,550 --> 00:08:11,909
will send I know 100 and the second part

194
00:08:09,510 --> 00:08:14,430
of that<font color="#E5E5E5"> statement the one that works in</font>

195
00:08:11,909 --> 00:08:15,780
<font color="#E5E5E5">words let's say towards from the outside</font>

196
00:08:14,430 --> 00:08:18,180
to<font color="#CCCCCC"> the generator is going</font><font color="#E5E5E5"> to run now</font>

197
00:08:15,780 --> 00:08:19,799
<font color="#CCCCCC">receive is going to have the value 100</font>

198
00:08:18,180 --> 00:08:21,270
because it's<font color="#CCCCCC"> hollis and then the rest</font><font color="#E5E5E5"> of</font>

199
00:08:19,800 --> 00:08:22,860
the<font color="#CCCCCC"> program is</font><font color="#E5E5E5"> going to run so it's</font>

200
00:08:21,270 --> 00:08:25,680
going<font color="#E5E5E5"> to increment the step is going to</font>

201
00:08:22,860 --> 00:08:27,720
<font color="#E5E5E5">print whatever I sent which is value 100</font>

202
00:08:25,680 --> 00:08:30,449
<font color="#CCCCCC">is</font><font color="#E5E5E5"> going to circle back</font><font color="#CCCCCC"> to the beginning</font>

203
00:08:27,720 --> 00:08:31,949
of<font color="#E5E5E5"> the loop where the rest to the true</font>

204
00:08:30,449 --> 00:08:33,450
<font color="#E5E5E5">statement and then</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to find</font>

205
00:08:31,949 --> 00:08:35,310
<font color="#CCCCCC">the next</font><font color="#E5E5E5"> deal when</font><font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to post</font>

206
00:08:33,450 --> 00:08:37,380
again and suspend there until I need<font color="#CCCCCC"> to</font>

207
00:08:35,309 --> 00:08:40,409
<font color="#E5E5E5">do something about it and it yielded</font>

208
00:08:37,380 --> 00:08:43,349
array the step now<font color="#CCCCCC"> 1 and that becomes</font>

209
00:08:40,409 --> 00:08:45,689
the result of sin<font color="#CCCCCC"> sinusoids it's similar</font>

210
00:08:43,349 --> 00:08:49,079
to next actually<font color="#CCCCCC"> now next is a</font>

211
00:08:45,690 --> 00:08:52,529
particular case<font color="#CCCCCC"> of sin so calling next</font>

212
00:08:49,079 --> 00:08:55,620
<font color="#E5E5E5">on a generator is like sending none but</font>

213
00:08:52,529 --> 00:08:57,839
<font color="#E5E5E5">a weird</font><font color="#CCCCCC"> idea that it's what works</font>

214
00:08:55,620 --> 00:08:58,630
compatible and now we have the semantics

215
00:08:57,839 --> 00:09:01,330
and<font color="#E5E5E5"> it</font>

216
00:08:58,630 --> 00:09:03,250
this is deliberate<font color="#E5E5E5"> like simple example</font>

217
00:09:01,330 --> 00:09:05,260
<font color="#CCCCCC">just to illustrate</font><font color="#E5E5E5"> how it works</font><font color="#CCCCCC"> it marks</font>

218
00:09:03,250 --> 00:09:07,060
the beginning of<font color="#CCCCCC"> coroutines</font><font color="#E5E5E5"> because now</font>

219
00:09:05,260 --> 00:09:09,010
that<font color="#CCCCCC"> we can Spain and interact with</font><font color="#E5E5E5"> the</font>

220
00:09:07,060 --> 00:09:11,770
core<font color="#E5E5E5"> routine we can do some synchronous</font>

221
00:09:09,010 --> 00:09:15,670
programming we can suspend<font color="#CCCCCC"> and do some</font>

222
00:09:11,770 --> 00:09:17,380
non-blocking i/o operation while signal

223
00:09:15,670 --> 00:09:19,390
in the program that that<font color="#CCCCCC"> but it's</font>

224
00:09:17,380 --> 00:09:24,670
waiting and<font color="#CCCCCC"> there's something</font><font color="#E5E5E5"> else that</font>

225
00:09:19,390 --> 00:09:26,560
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be run so okay</font><font color="#E5E5E5"> and now if I send or</font>

226
00:09:24,670 --> 00:09:28,329
if I throw an exception you can of

227
00:09:26,560 --> 00:09:31,150
course<font color="#CCCCCC"> get whatever</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> happen</font>

228
00:09:28,330 --> 00:09:33,520
the exception is going to be thrown at

229
00:09:31,150 --> 00:09:35,829
the point where the<font color="#E5E5E5"> core routine is</font>

230
00:09:33,520 --> 00:09:38,319
suspended and in this case is going<font color="#E5E5E5"> to</font>

231
00:09:35,830 --> 00:09:40,600
<font color="#E5E5E5">fail because it's not</font><font color="#CCCCCC"> handled but you</font>

232
00:09:38,320 --> 00:09:43,570
can add as part of<font color="#E5E5E5"> your logic to handle</font>

233
00:09:40,600 --> 00:09:45,970
the exception<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course so okay this</font>

234
00:09:43,570 --> 00:09:48,130
<font color="#CCCCCC">dish is great but let's</font><font color="#E5E5E5"> see if we can do</font>

235
00:09:45,970 --> 00:09:50,680
we<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> weather because this is not</font>

236
00:09:48,130 --> 00:09:52,480
entirely convenient<font color="#E5E5E5"> and what if we want</font>

237
00:09:50,680 --> 00:09:56,079
to<font color="#E5E5E5"> have larger programs or we want to</font>

238
00:09:52,480 --> 00:09:59,200
reflect<font color="#E5E5E5"> our core routines so this paper</font>

239
00:09:56,080 --> 00:10:01,210
came along<font color="#E5E5E5"> 380 which actually now we're</font>

240
00:09:59,200 --> 00:10:04,510
in Python 3 so we're getting closer to

241
00:10:01,210 --> 00:10:06,730
<font color="#CCCCCC">the current</font><font color="#E5E5E5"> API I said</font><font color="#CCCCCC"> 6 syntax for</font>

242
00:10:04,510 --> 00:10:09,010
delegating<font color="#E5E5E5"> to us of generators and this</font>

243
00:10:06,730 --> 00:10:12,160
is actually quite important because it

244
00:10:09,010 --> 00:10:14,380
marks like<font color="#CCCCCC"> two important improvement</font>

245
00:10:12,160 --> 00:10:16,449
first now generators can return values

246
00:10:14,380 --> 00:10:18,010
which before it was impossible<font color="#CCCCCC"> you</font>

247
00:10:16,450 --> 00:10:20,650
<font color="#CCCCCC">couldn't</font><font color="#E5E5E5"> have a return statement inside</font>

248
00:10:18,010 --> 00:10:21,010
a<font color="#E5E5E5"> generator because it will be a syntax</font>

249
00:10:20,650 --> 00:10:23,199
error

250
00:10:21,010 --> 00:10:25,210
and now the<font color="#CCCCCC"> chill from</font><font color="#E5E5E5"> syntax was</font>

251
00:10:23,200 --> 00:10:26,860
introduced which will explain<font color="#E5E5E5"> the</font>

252
00:10:25,210 --> 00:10:30,310
semantics<font color="#E5E5E5"> and how both things are</font>

253
00:10:26,860 --> 00:10:33,130
related<font color="#E5E5E5"> one has to do with</font><font color="#CCCCCC"> the other so</font>

254
00:10:30,310 --> 00:10:34,750
let's say I have another simple

255
00:10:33,130 --> 00:10:36,550
generator or<font color="#CCCCCC"> co-routine that only</font>

256
00:10:34,750 --> 00:10:38,830
<font color="#CCCCCC">produces two values and I call it</font><font color="#E5E5E5"> the</font>

257
00:10:36,550 --> 00:10:40,420
first<font color="#E5E5E5"> time I got one of course then</font>

258
00:10:38,830 --> 00:10:42,220
second time I<font color="#E5E5E5"> got the valley</font><font color="#CCCCCC"> too and</font>

259
00:10:40,420 --> 00:10:44,110
then there's<font color="#CCCCCC"> nothing else to</font><font color="#E5E5E5"> produce and</font>

260
00:10:42,220 --> 00:10:46,360
remember that stop<font color="#CCCCCC"> iteration was the</font>

261
00:10:44,110 --> 00:10:48,040
exception<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was signaling that that</font>

262
00:10:46,360 --> 00:10:50,440
generator was exhausted and<font color="#CCCCCC"> there was</font>

263
00:10:48,040 --> 00:10:53,110
nothing else to<font color="#E5E5E5"> produce</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> now the</font>

264
00:10:50,440 --> 00:10:55,510
same happens but the return value comes

265
00:10:53,110 --> 00:10:57,910
in the exception because exception are

266
00:10:55,510 --> 00:11:00,100
just<font color="#E5E5E5"> Python objects after all and we can</font>

267
00:10:57,910 --> 00:11:03,610
set any attribute to objects because

268
00:11:00,100 --> 00:11:05,230
<font color="#E5E5E5">they're dynamically added so the return</font>

269
00:11:03,610 --> 00:11:07,150
value will come in the value attribute

270
00:11:05,230 --> 00:11:09,310
<font color="#CCCCCC">or the</font><font color="#E5E5E5"> stop iteration exception and that</font>

271
00:11:07,150 --> 00:11:11,470
way whoever<font color="#E5E5E5"> is calling</font><font color="#CCCCCC"> that coroutine</font>

272
00:11:09,310 --> 00:11:11,829
can know what not<font color="#E5E5E5"> only that we finish</font>

273
00:11:11,470 --> 00:11:14,050
and

274
00:11:11,830 --> 00:11:19,270
completed but with with which value<font color="#E5E5E5"> it</font>

275
00:11:14,050 --> 00:11:22,270
<font color="#E5E5E5">completed so now we can say like Jill</font>

276
00:11:19,270 --> 00:11:24,819
from like in a<font color="#E5E5E5"> very most simple form</font>

277
00:11:22,270 --> 00:11:27,880
<font color="#CCCCCC">like whenever</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have an interval and</font>

278
00:11:24,820 --> 00:11:30,580
<font color="#E5E5E5">you Jill from that interval and then you</font>

279
00:11:27,880 --> 00:11:32,410
you can do a for<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and then she'll</font>

280
00:11:30,580 --> 00:11:34,870
every element of<font color="#CCCCCC"> theater level</font><font color="#E5E5E5"> and that</font>

281
00:11:32,410 --> 00:11:37,360
would<font color="#E5E5E5"> work but that is not the actual</font>

282
00:11:34,870 --> 00:11:39,550
reason why<font color="#CCCCCC"> they was introduced in</font><font color="#E5E5E5"> Python</font>

283
00:11:37,360 --> 00:11:41,320
<font color="#CCCCCC">it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> actually much much better use of</font>

284
00:11:39,550 --> 00:11:43,449
<font color="#E5E5E5">that and has to do with the true</font>

285
00:11:41,320 --> 00:11:47,050
previous points like first this the

286
00:11:43,450 --> 00:11:49,510
syntax is going to allow you to<font color="#CCCCCC"> change</font>

287
00:11:47,050 --> 00:11:51,880
<font color="#E5E5E5">co-routines so remember the</font><font color="#CCCCCC"> example I</font>

288
00:11:49,510 --> 00:11:53,410
just gave when you send values or your

289
00:11:51,880 --> 00:11:55,600
throw exceptions to<font color="#CCCCCC"> core</font><font color="#E5E5E5"> routine</font><font color="#CCCCCC"> what</font>

290
00:11:53,410 --> 00:11:59,110
you can do it that with multiple<font color="#E5E5E5"> levels</font>

291
00:11:55,600 --> 00:12:01,720
so<font color="#E5E5E5"> let's say like how Cordina</font><font color="#CCCCCC"> calls</font>

292
00:11:59,110 --> 00:12:04,720
<font color="#E5E5E5">another one that calls another one the</font>

293
00:12:01,720 --> 00:12:05,890
mechanism works<font color="#E5E5E5"> the same and now it's</font>

294
00:12:04,720 --> 00:12:07,780
important<font color="#E5E5E5"> to know why</font>

295
00:12:05,890 --> 00:12:09,760
<font color="#E5E5E5">quarantines can return values because</font><font color="#CCCCCC"> I</font>

296
00:12:07,780 --> 00:12:13,000
can capture the return value with the

297
00:12:09,760 --> 00:12:15,340
syntax<font color="#CCCCCC"> into</font><font color="#E5E5E5"> available</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> even if it</font>

298
00:12:13,000 --> 00:12:17,380
doesn't<font color="#E5E5E5"> look like too</font><font color="#CCCCCC"> big deal it's</font>

299
00:12:15,340 --> 00:12:19,870
actually quite<font color="#CCCCCC"> interesting because if</font>

300
00:12:17,380 --> 00:12:22,540
you<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the syntax it kind of</font>

301
00:12:19,870 --> 00:12:24,520
resembles like like a<font color="#E5E5E5"> thread like</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you</font>

302
00:12:22,540 --> 00:12:25,930
have<font color="#CCCCCC"> something running</font><font color="#E5E5E5"> there it's not a</font>

303
00:12:24,520 --> 00:12:27,579
thread<font color="#CCCCCC"> of course technically</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> no</font>

304
00:12:25,930 --> 00:12:29,859
<font color="#E5E5E5">threat but the point is you have</font>

305
00:12:27,580 --> 00:12:31,300
<font color="#E5E5E5">something there running that you don't</font>

306
00:12:29,860 --> 00:12:33,280
know which which organ is going to run

307
00:12:31,300 --> 00:12:35,020
<font color="#CCCCCC">you know how it's going</font><font color="#E5E5E5"> to run at some</font>

308
00:12:33,280 --> 00:12:37,300
point is<font color="#E5E5E5"> going to suspend and continue</font>

309
00:12:35,020 --> 00:12:38,199
and some point in the program<font color="#E5E5E5"> is going</font>

310
00:12:37,300 --> 00:12:39,609
<font color="#E5E5E5">to stop there</font>

311
00:12:38,200 --> 00:12:42,040
<font color="#CCCCCC">and it's going to</font><font color="#E5E5E5"> give me a final value</font>

312
00:12:39,610 --> 00:12:45,280
<font color="#E5E5E5">and I can</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> that in multiple multiple</font>

313
00:12:42,040 --> 00:12:47,890
levels<font color="#E5E5E5"> so this starts to</font><font color="#CCCCCC"> improve things</font>

314
00:12:45,280 --> 00:12:50,829
<font color="#E5E5E5">quite a lot and this marks something</font>

315
00:12:47,890 --> 00:12:54,939
that we are probably<font color="#E5E5E5"> more familiar with</font>

316
00:12:50,830 --> 00:12:56,740
with which is we can have<font color="#E5E5E5"> multiple of</font>

317
00:12:54,940 --> 00:12:58,390
these children from different<font color="#E5E5E5"> core</font>

318
00:12:56,740 --> 00:13:00,010
routines and do like<font color="#E5E5E5"> different</font>

319
00:12:58,390 --> 00:13:03,250
operations like for instance<font color="#E5E5E5"> reading</font>

320
00:13:00,010 --> 00:13:05,140
from a database<font color="#CCCCCC"> or</font><font color="#E5E5E5"> doing an HTTP request</font>

321
00:13:03,250 --> 00:13:07,060
<font color="#CCCCCC">something that is not blocking</font><font color="#E5E5E5"> and well</font>

322
00:13:05,140 --> 00:13:09,310
the actual i/o will the<font color="#E5E5E5"> actual operation</font>

323
00:13:07,060 --> 00:13:12,569
in the database is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to take is</font>

324
00:13:09,310 --> 00:13:16,589
taking place<font color="#E5E5E5"> the the program or some</font>

325
00:13:12,570 --> 00:13:19,330
<font color="#E5E5E5">part of the program can know that and</font>

326
00:13:16,590 --> 00:13:21,610
<font color="#CCCCCC">okay say</font><font color="#E5E5E5"> this part of the goal is</font>

327
00:13:19,330 --> 00:13:22,180
suspended<font color="#E5E5E5"> I can run something else in</font>

328
00:13:21,610 --> 00:13:23,660
the meantime

329
00:13:22,180 --> 00:13:27,620
and

330
00:13:23,660 --> 00:13:29,329
show you the<font color="#CCCCCC"> order so let's see this</font>

331
00:13:27,620 --> 00:13:32,210
with an<font color="#CCCCCC"> example let's say now I have a</font>

332
00:13:29,330 --> 00:13:34,610
generator<font color="#E5E5E5"> that I call general that calls</font>

333
00:13:32,210 --> 00:13:37,460
another<font color="#E5E5E5"> generator inside of that so it</font>

334
00:13:34,610 --> 00:13:39,410
<font color="#CCCCCC">juice from that</font><font color="#E5E5E5"> generator</font><font color="#CCCCCC"> and again it's</font>

335
00:13:37,460 --> 00:13:42,170
a simple<font color="#CCCCCC"> example just to illustrate the</font>

336
00:13:39,410 --> 00:13:44,240
mechanism but it works

337
00:13:42,170 --> 00:13:46,790
all the same with multiple levels I mean

338
00:13:44,240 --> 00:13:50,510
<font color="#CCCCCC">this</font><font color="#E5E5E5"> works at</font><font color="#CCCCCC"> all levels so it just</font>

339
00:13:46,790 --> 00:13:53,120
prints<font color="#E5E5E5"> out the loop similar to the first</font>

340
00:13:50,510 --> 00:13:56,450
example and<font color="#CCCCCC"> when</font><font color="#E5E5E5"> one part completed it</font>

341
00:13:53,120 --> 00:13:59,420
<font color="#E5E5E5">will continue with the next</font><font color="#CCCCCC"> one so ok</font>

342
00:13:56,450 --> 00:14:01,370
like I create my<font color="#CCCCCC"> core routine</font><font color="#E5E5E5"> like the</font>

343
00:13:59,420 --> 00:14:05,000
beginning<font color="#E5E5E5"> and I call next to it because</font>

344
00:14:01,370 --> 00:14:06,920
<font color="#CCCCCC">I want to</font><font color="#E5E5E5"> start sending values and of</font>

345
00:14:05,000 --> 00:14:09,320
course<font color="#CCCCCC"> I</font><font color="#E5E5E5"> get the first one but</font><font color="#CCCCCC"> then I</font>

346
00:14:06,920 --> 00:14:11,180
send something<font color="#E5E5E5"> and remember that I'm</font>

347
00:14:09,320 --> 00:14:14,300
sending<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to the first core routine</font>

348
00:14:11,180 --> 00:14:16,670
to the<font color="#E5E5E5"> general not to one of the</font>

349
00:14:14,300 --> 00:14:19,250
internals<font color="#E5E5E5"> and if you see the print</font>

350
00:14:16,670 --> 00:14:21,829
message<font color="#E5E5E5"> you'll see that what it was</font>

351
00:14:19,250 --> 00:14:23,870
<font color="#E5E5E5">printed was the</font><font color="#CCCCCC"> first one the first one</font>

352
00:14:21,830 --> 00:14:26,210
<font color="#E5E5E5">was</font><font color="#CCCCCC"> that the string so what happens is I</font>

353
00:14:23,870 --> 00:14:28,790
send something to general general<font color="#CCCCCC"> pancit</font>

354
00:14:26,210 --> 00:14:30,680
to the internal core routine<font color="#E5E5E5"> it did the</font>

355
00:14:28,790 --> 00:14:33,589
processing it printed<font color="#E5E5E5"> the value until</font>

356
00:14:30,680 --> 00:14:35,599
something that went back<font color="#E5E5E5"> to the general</font>

357
00:14:33,590 --> 00:14:39,220
and<font color="#CCCCCC"> that became the result of the</font>

358
00:14:35,600 --> 00:14:42,740
<font color="#CCCCCC">presence name</font><font color="#E5E5E5"> so now we can have more</font>

359
00:14:39,220 --> 00:14:46,850
sophisticated<font color="#CCCCCC"> code we can like refactor</font>

360
00:14:42,740 --> 00:14:49,430
and<font color="#E5E5E5"> have smaller co-routines with more</font>

361
00:14:46,850 --> 00:14:52,310
<font color="#E5E5E5">faint</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> fine-grain</font><font color="#CCCCCC"> responsibilities</font>

362
00:14:49,430 --> 00:14:55,849
<font color="#E5E5E5">and of course if</font><font color="#CCCCCC"> I keep iterating that</font>

363
00:14:52,310 --> 00:14:59,150
this will keep will continue<font color="#CCCCCC"> until</font><font color="#E5E5E5"> the</font>

364
00:14:55,850 --> 00:15:01,940
first one stops and then the second one

365
00:14:59,150 --> 00:15:03,620
will take<font color="#E5E5E5"> place and it all works like if</font>

366
00:15:01,940 --> 00:15:08,050
it were just one<font color="#E5E5E5"> core routine I will</font>

367
00:15:03,620 --> 00:15:10,910
just put all the code in<font color="#E5E5E5"> a in a single</font>

368
00:15:08,050 --> 00:15:13,370
<font color="#E5E5E5">function so this is actually quite</font>

369
00:15:10,910 --> 00:15:14,900
convenient because<font color="#E5E5E5"> actually this pep has</font>

370
00:15:13,370 --> 00:15:16,840
an example of the code<font color="#CCCCCC"> you have to write</font>

371
00:15:14,900 --> 00:15:19,490
if<font color="#E5E5E5"> you didn't have this functionality</font>

372
00:15:16,840 --> 00:15:22,220
built in in<font color="#E5E5E5"> Python so it's actually</font>

373
00:15:19,490 --> 00:15:23,540
<font color="#E5E5E5">saved saving a lot of</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> I mean and a</font>

374
00:15:22,220 --> 00:15:25,790
lot of<font color="#E5E5E5"> travel as well because there are</font>

375
00:15:23,540 --> 00:15:28,339
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of exceptions</font><font color="#E5E5E5"> I you have to handle</font>

376
00:15:25,790 --> 00:15:33,709
that stop iteration and with<font color="#E5E5E5"> different</font>

377
00:15:28,340 --> 00:15:35,900
conditions<font color="#CCCCCC"> etc so just to recap this</font>

378
00:15:33,710 --> 00:15:37,250
syntax allow us to create even<font color="#CCCCCC"> more</font>

379
00:15:35,900 --> 00:15:40,990
powerful core routines

380
00:15:37,250 --> 00:15:43,459
and change many<font color="#E5E5E5"> et levels</font><font color="#CCCCCC"> altogether</font>

381
00:15:40,990 --> 00:15:45,470
<font color="#CCCCCC">well a</font><font color="#E5E5E5"> structure in our code in a more</font>

382
00:15:43,459 --> 00:15:47,239
convenient way and with<font color="#CCCCCC"> this we can</font>

383
00:15:45,470 --> 00:15:49,220
<font color="#E5E5E5">start</font><font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> about like event loops</font>

384
00:15:47,240 --> 00:15:54,230
and some objects are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> handle</font>

385
00:15:49,220 --> 00:15:57,350
<font color="#E5E5E5">Cordys but that is not all because there</font>

386
00:15:54,230 --> 00:15:59,269
are similar to do<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean if this</font><font color="#CCCCCC"> is a</font>

387
00:15:57,350 --> 00:16:04,040
great<font color="#E5E5E5"> improvement</font><font color="#CCCCCC"> it's not everything</font>

388
00:15:59,269 --> 00:16:07,189
<font color="#E5E5E5">like remember</font><font color="#CCCCCC"> that I mentioned in the</font>

389
00:16:04,040 --> 00:16:10,639
<font color="#CCCCCC">beginning</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> worse</font><font color="#E5E5E5"> when we first</font>

390
00:16:07,189 --> 00:16:12,620
start to think about<font color="#CCCCCC"> goroutines</font><font color="#E5E5E5"> we want</font>

391
00:16:10,639 --> 00:16:14,740
to have like<font color="#E5E5E5"> we</font><font color="#CCCCCC"> willed it in top of</font>

392
00:16:12,620 --> 00:16:16,759
generators we<font color="#E5E5E5"> said like</font><font color="#CCCCCC"> okay</font>

393
00:16:14,740 --> 00:16:19,579
<font color="#E5E5E5">syntactically they're the same they use</font>

394
00:16:16,759 --> 00:16:21,410
<font color="#CCCCCC">GL the yield statement or jewel</font><font color="#E5E5E5"> from so</font>

395
00:16:19,579 --> 00:16:24,439
and actually<font color="#E5E5E5"> technically a quarantine is</font>

396
00:16:21,410 --> 00:16:25,219
<font color="#CCCCCC">a kind of generator but semantically</font>

397
00:16:24,439 --> 00:16:29,509
<font color="#CCCCCC">they're different</font>

398
00:16:25,220 --> 00:16:32,569
so generators were created with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> idea</font>

399
00:16:29,509 --> 00:16:35,149
of iteration in mind<font color="#E5E5E5"> and supporting the</font>

400
00:16:32,569 --> 00:16:37,009
iteration pattern while<font color="#CCCCCC"> coroutines were</font>

401
00:16:35,149 --> 00:16:39,050
created<font color="#CCCCCC"> we idea of a synchronous</font>

402
00:16:37,009 --> 00:16:40,610
<font color="#CCCCCC">programming in mind</font><font color="#E5E5E5"> or suspending some</font>

403
00:16:39,050 --> 00:16:43,959
part of the code<font color="#CCCCCC"> or non pre-emptive</font>

404
00:16:40,610 --> 00:16:46,279
computation<font color="#E5E5E5"> so those are two different</font>

405
00:16:43,959 --> 00:16:48,439
use cases or completely different

406
00:16:46,279 --> 00:16:51,259
<font color="#E5E5E5">computing scenarios that fall into the</font>

407
00:16:48,439 --> 00:16:53,089
same<font color="#E5E5E5"> technical detail which</font><font color="#CCCCCC"> is that down</font>

408
00:16:51,259 --> 00:16:56,089
the<font color="#E5E5E5"> line in Python there's a generator</font>

409
00:16:53,089 --> 00:16:58,600
<font color="#CCCCCC">running there so and also the Jill from</font>

410
00:16:56,089 --> 00:17:00,680
syntax works with any intervals

411
00:16:58,600 --> 00:17:03,379
<font color="#E5E5E5">generators are intervals but</font><font color="#CCCCCC"> they're</font>

412
00:17:00,680 --> 00:17:05,089
also other kind of intervals are not

413
00:17:03,379 --> 00:17:07,849
generators are not go routines for

414
00:17:05,089 --> 00:17:10,789
instance<font color="#E5E5E5"> strings or lists so and you can</font>

415
00:17:07,849 --> 00:17:12,980
do<font color="#CCCCCC"> Jill from a generator</font><font color="#E5E5E5"> or a coroutine</font>

416
00:17:10,789 --> 00:17:15,049
and that will make sense but

417
00:17:12,980 --> 00:17:17,089
synthetically that's nothing prevents

418
00:17:15,049 --> 00:17:20,990
your stops you for writing like

419
00:17:17,089 --> 00:17:23,359
something like<font color="#CCCCCC"> Jill</font><font color="#E5E5E5"> from a string or ago</font>

420
00:17:20,990 --> 00:17:25,609
when you were expecting<font color="#E5E5E5"> a quarantine in</font>

421
00:17:23,359 --> 00:17:27,379
that<font color="#E5E5E5"> place and</font><font color="#CCCCCC"> I would fail and since</font>

422
00:17:25,609 --> 00:17:30,020
<font color="#CCCCCC">Python is dynamically typed you probably</font>

423
00:17:27,380 --> 00:17:34,340
<font color="#CCCCCC">worried noticed the error until late in</font>

424
00:17:30,020 --> 00:17:37,070
<font color="#E5E5E5">the program so a more time came</font><font color="#CCCCCC"> passed</font>

425
00:17:34,340 --> 00:17:38,928
and this was<font color="#CCCCCC"> okay we need to address</font>

426
00:17:37,070 --> 00:17:41,990
these limitations<font color="#E5E5E5"> and in more modern</font>

427
00:17:38,929 --> 00:17:44,000
version of pythons<font color="#E5E5E5"> again the syntax</font>

428
00:17:41,990 --> 00:17:46,970
changed notice that since the very

429
00:17:44,000 --> 00:17:49,039
beginning<font color="#E5E5E5"> in 2001 when the Jill was</font>

430
00:17:46,970 --> 00:17:50,690
introduced there were no new keywords in

431
00:17:49,039 --> 00:17:53,780
<font color="#E5E5E5">Python and now</font>

432
00:17:50,690 --> 00:17:57,950
<font color="#E5E5E5">we're in the version of Python 3</font><font color="#CCCCCC"> of 5</font>

433
00:17:53,780 --> 00:18:00,649
and the<font color="#CCCCCC"> Year 2015 or 16 and new syntax</font>

434
00:17:57,950 --> 00:18:03,140
<font color="#E5E5E5">is</font><font color="#CCCCCC"> wintery so all that long time</font><font color="#E5E5E5"> there</font>

435
00:18:00,650 --> 00:18:04,790
was pretty much no changes syntactically

436
00:18:03,140 --> 00:18:10,070
even though<font color="#CCCCCC"> there were</font><font color="#E5E5E5"> new constructions</font>

437
00:18:04,790 --> 00:18:11,540
<font color="#E5E5E5">and the idea is with this pet for 92 we</font>

438
00:18:10,070 --> 00:18:13,879
can create<font color="#CCCCCC"> co-routines with its own</font>

439
00:18:11,540 --> 00:18:15,889
syntax<font color="#CCCCCC"> so when you instead</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> put in</font>

440
00:18:13,880 --> 00:18:17,690
death we put a sing death you're

441
00:18:15,890 --> 00:18:19,790
creating a native<font color="#CCCCCC"> co-routines before</font>

442
00:18:17,690 --> 00:18:22,040
it's not<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> kind of generator that</font>

443
00:18:19,790 --> 00:18:23,750
has<font color="#CCCCCC"> a flag in the virtual</font><font color="#E5E5E5"> machine now</font>

444
00:18:22,040 --> 00:18:26,120
they're<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pep they're</font><font color="#E5E5E5"> called native</font>

445
00:18:23,750 --> 00:18:27,890
<font color="#E5E5E5">call routines and instead of chill flow</font>

446
00:18:26,120 --> 00:18:30,379
you would use a weight<font color="#E5E5E5"> and this</font>

447
00:18:27,890 --> 00:18:33,740
<font color="#E5E5E5">addresses the</font><font color="#CCCCCC"> semantics or the problems</font>

448
00:18:30,380 --> 00:18:37,250
that<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> in the previous examples</font><font color="#E5E5E5"> for</font>

449
00:18:33,740 --> 00:18:39,080
<font color="#E5E5E5">instance now you it's harder to</font><font color="#CCCCCC"> make</font>

450
00:18:37,250 --> 00:18:40,910
mistakes<font color="#CCCCCC"> which is a good thing remember</font>

451
00:18:39,080 --> 00:18:44,179
that before<font color="#CCCCCC"> there was nothing</font><font color="#E5E5E5"> preventing</font>

452
00:18:40,910 --> 00:18:47,180
you for you doing<font color="#CCCCCC"> Jill from string when</font>

453
00:18:44,180 --> 00:18:49,040
<font color="#CCCCCC">you were respecting a coral team but now</font>

454
00:18:47,180 --> 00:18:51,710
you cannot do a<font color="#E5E5E5"> weight string</font>

455
00:18:49,040 --> 00:18:54,800
accidentally because it will fail<font color="#CCCCCC"> python</font>

456
00:18:51,710 --> 00:18:58,400
will will throw a type error saying<font color="#E5E5E5"> okay</font>

457
00:18:54,800 --> 00:19:00,919
away<font color="#CCCCCC"> it</font><font color="#E5E5E5"> only works with</font><font color="#CCCCCC"> quarantines or</font>

458
00:18:58,400 --> 00:19:02,900
<font color="#CCCCCC">it</font><font color="#E5E5E5"> allow or avoidable objects which are</font>

459
00:19:00,920 --> 00:19:07,460
objects that implement<font color="#E5E5E5"> the magic method</font>

460
00:19:02,900 --> 00:19:11,000
for a weight so with<font color="#CCCCCC"> with</font><font color="#E5E5E5"> this syntax</font>

461
00:19:07,460 --> 00:19:13,790
<font color="#E5E5E5">now things start to look</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> like in</font>

462
00:19:11,000 --> 00:19:18,050
<font color="#E5E5E5">the last version of</font><font color="#CCCCCC"> Python 3.7 or even</font>

463
00:19:13,790 --> 00:19:20,180
in the future<font color="#E5E5E5"> version of</font><font color="#CCCCCC"> Pi and now we</font>

464
00:19:18,050 --> 00:19:25,070
can take a look<font color="#CCCCCC"> okay a what what async</font>

465
00:19:20,180 --> 00:19:27,320
i/o is is<font color="#E5E5E5"> actually doing because okay</font>

466
00:19:25,070 --> 00:19:29,960
now we<font color="#E5E5E5"> great our</font><font color="#CCCCCC"> core routines with a</font>

467
00:19:27,320 --> 00:19:32,450
new syntax<font color="#E5E5E5"> and I think is just an event</font>

468
00:19:29,960 --> 00:19:34,070
<font color="#E5E5E5">loop which is an</font><font color="#CCCCCC"> object is the</font><font color="#E5E5E5"> one comes</font>

469
00:19:32,450 --> 00:19:37,010
in<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> standard</font><font color="#CCCCCC"> already but you can</font>

470
00:19:34,070 --> 00:19:38,179
use any<font color="#CCCCCC"> over event loop wherever it's</font>

471
00:19:37,010 --> 00:19:39,890
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> happen is</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> okay with the</font>

472
00:19:38,180 --> 00:19:41,990
final<font color="#E5E5E5"> coroutines and typically our</font>

473
00:19:39,890 --> 00:19:43,880
coroutines to delegate to<font color="#CCCCCC"> sum or</font>

474
00:19:41,990 --> 00:19:46,520
<font color="#E5E5E5">third-party libraries like for instance</font>

475
00:19:43,880 --> 00:19:49,610
<font color="#E5E5E5">let's say I use</font><font color="#CCCCCC"> async PC to connect to</font>

476
00:19:46,520 --> 00:19:53,750
the database and do<font color="#CCCCCC"> await our select or</font>

477
00:19:49,610 --> 00:19:55,040
<font color="#CCCCCC">or a query</font><font color="#E5E5E5"> and what happens is our the</font>

478
00:19:53,750 --> 00:19:57,650
event loop<font color="#E5E5E5"> is going to call a core</font>

479
00:19:55,040 --> 00:19:59,300
routine at some point in<font color="#CCCCCC"> time it's going</font>

480
00:19:57,650 --> 00:20:01,610
<font color="#E5E5E5">to run their call our core is going to</font>

481
00:19:59,300 --> 00:20:04,620
delegate to the<font color="#CCCCCC"> third-party library</font>

482
00:20:01,610 --> 00:20:07,629
which down the line is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> imply</font>

483
00:20:04,620 --> 00:20:10,360
the<font color="#CCCCCC"> ILO</font><font color="#E5E5E5"> at that point when we call a</font>

484
00:20:07,630 --> 00:20:12,910
<font color="#CCCCCC">wait</font><font color="#E5E5E5"> it's going to return something to</font>

485
00:20:10,360 --> 00:20:14,649
<font color="#E5E5E5">the</font><font color="#CCCCCC"> event loop so that</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> it signals</font>

486
00:20:12,910 --> 00:20:18,000
the event loop and is the way they<font color="#CCCCCC"> when</font>

487
00:20:14,650 --> 00:20:19,990
<font color="#CCCCCC">dupe knows that that co-routine is</font>

488
00:20:18,000 --> 00:20:22,240
suspended<font color="#CCCCCC"> it's waiting</font><font color="#E5E5E5"> for the i/o</font>

489
00:20:19,990 --> 00:20:23,920
<font color="#CCCCCC">operation to complete so another one</font>

490
00:20:22,240 --> 00:20:25,630
will take place and<font color="#CCCCCC"> will run and</font><font color="#E5E5E5"> the</font>

491
00:20:23,920 --> 00:20:29,050
same will happen<font color="#E5E5E5"> again</font><font color="#CCCCCC"> and again and</font>

492
00:20:25,630 --> 00:20:32,410
again<font color="#E5E5E5"> and at some at all points</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> core</font>

493
00:20:29,050 --> 00:20:35,649
routine is just<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be updating the</font>

494
00:20:32,410 --> 00:20:36,880
status<font color="#CCCCCC"> of the of the sorry the event</font>

495
00:20:35,650 --> 00:20:38,320
loop is going to<font color="#E5E5E5"> be updating the</font><font color="#CCCCCC"> status</font>

496
00:20:36,880 --> 00:20:41,500
of the<font color="#E5E5E5"> according so we're going to call</font>

497
00:20:38,320 --> 00:20:43,000
sin or throw respective<font color="#E5E5E5"> respectively as</font>

498
00:20:41,500 --> 00:20:44,680
it happens with the exceptions<font color="#E5E5E5"> you know</font>

499
00:20:43,000 --> 00:20:46,750
<font color="#CCCCCC">it's our color think</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> okay I</font>

500
00:20:44,680 --> 00:20:48,820
have to act with this<font color="#E5E5E5"> value or</font><font color="#CCCCCC"> how to</font>

501
00:20:46,750 --> 00:20:50,050
respond to<font color="#E5E5E5"> this exceptional cetera so</font>

502
00:20:48,820 --> 00:20:53,649
down the line there's nothing like

503
00:20:50,050 --> 00:20:57,250
fundamentally new or different<font color="#E5E5E5"> that it's</font>

504
00:20:53,650 --> 00:20:59,560
that is going on in<font color="#E5E5E5"> Python the idea is</font>

505
00:20:57,250 --> 00:21:04,750
like<font color="#E5E5E5"> okay technically</font><font color="#CCCCCC"> go routines are</font>

506
00:20:59,560 --> 00:21:06,879
still some type of generators which this

507
00:21:04,750 --> 00:21:08,590
is for historical and<font color="#E5E5E5"> technical reasons</font>

508
00:21:06,880 --> 00:21:11,260
remember that semantically they are

509
00:21:08,590 --> 00:21:13,149
different<font color="#CCCCCC"> and things that</font><font color="#E5E5E5"> look to</font><font color="#CCCCCC"> be</font>

510
00:21:11,260 --> 00:21:16,870
<font color="#CCCCCC">like completely different or completely</font>

511
00:21:13,150 --> 00:21:19,090
new or different stuff<font color="#CCCCCC"> or actually more</font>

512
00:21:16,870 --> 00:21:22,149
simple<font color="#E5E5E5"> constructions</font><font color="#CCCCCC"> that we have been</font>

513
00:21:19,090 --> 00:21:25,510
<font color="#E5E5E5">using in Python for quite a long</font><font color="#CCCCCC"> time it</font>

514
00:21:22,150 --> 00:21:27,250
did for a very all time remember that

515
00:21:25,510 --> 00:21:29,830
<font color="#CCCCCC">for instance that every time we call</font>

516
00:21:27,250 --> 00:21:31,990
away<font color="#E5E5E5"> will it will call something that</font>

517
00:21:29,830 --> 00:21:35,199
down the line<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will end up at</font><font color="#CCCCCC"> a Jill</font>

518
00:21:31,990 --> 00:21:38,200
stamen just as a way of<font color="#E5E5E5"> signaling that</font>

519
00:21:35,200 --> 00:21:41,080
that has<font color="#E5E5E5"> to suspend so this is probably</font>

520
00:21:38,200 --> 00:21:42,970
<font color="#E5E5E5">the way I will I wanted to show the or</font>

521
00:21:41,080 --> 00:21:47,590
explain the way a synchronous perming

522
00:21:42,970 --> 00:21:49,090
works<font color="#E5E5E5"> because it's not I perhaps</font><font color="#CCCCCC"> under</font>

523
00:21:47,590 --> 00:21:51,340
understanding what's<font color="#E5E5E5"> behind or</font>

524
00:21:49,090 --> 00:21:53,409
demystified what was actually<font color="#E5E5E5"> Python</font>

525
00:21:51,340 --> 00:21:56,020
doing every time<font color="#E5E5E5"> we program a</font>

526
00:21:53,410 --> 00:21:58,750
synchronously<font color="#E5E5E5"> in</font><font color="#CCCCCC"> operon</font>

527
00:21:56,020 --> 00:22:01,389
that's pretty<font color="#E5E5E5"> much it I think you enjoy</font>

528
00:21:58,750 --> 00:22:02,980
<font color="#E5E5E5">I really hope you enjoy the talk on the</font>

529
00:22:01,390 --> 00:22:05,640
rest of the<font color="#E5E5E5"> conference as well thank you</font>

530
00:22:02,980 --> 00:22:05,640
very<font color="#E5E5E5"> much for listening</font>

531
00:22:11,450 --> 00:22:16,610
we have<font color="#E5E5E5"> three minutes for questions if</font>

532
00:22:14,129 --> 00:22:16,610
you have<font color="#E5E5E5"> any</font>

533
00:22:25,940 --> 00:22:27,970
<font color="#E5E5E5">Oh</font>

