1
00:00:04,650 --> 00:00:10,110
<font color="#E5E5E5">hi everyone good</font><font color="#CCCCCC"> evening</font><font color="#E5E5E5"> my name is Sam</font>

2
00:00:07,500 --> 00:00:11,940
kuha<font color="#E5E5E5"> from</font><font color="#CCCCCC"> inter my</font><font color="#E5E5E5"> co-presenters</font><font color="#CCCCCC"> reader</font>

3
00:00:10,110 --> 00:00:15,000
perspire and<font color="#E5E5E5"> he couldn't make it but</font>

4
00:00:11,940 --> 00:00:16,520
I'll be<font color="#E5E5E5"> covering for</font><font color="#CCCCCC"> us boat topic are</font>

5
00:00:15,000 --> 00:00:19,800
you insured against your noisy neighbor

6
00:00:16,520 --> 00:00:22,289
<font color="#CCCCCC">say there's a</font><font color="#E5E5E5"> legal disclaimer thanks to</font>

7
00:00:19,800 --> 00:00:23,789
the team<font color="#CCCCCC"> let me start</font><font color="#E5E5E5"> off by</font><font color="#CCCCCC"> saying</font>

8
00:00:22,289 --> 00:00:27,480
thanks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the team that made this work</font>

9
00:00:23,789 --> 00:00:29,520
possible<font color="#CCCCCC"> so brief agenda</font><font color="#E5E5E5"> we look at some</font>

10
00:00:27,480 --> 00:00:31,470
<font color="#E5E5E5">of the common contention in the cloud</font>

11
00:00:29,520 --> 00:00:33,150
environment<font color="#CCCCCC"> and look at some</font><font color="#E5E5E5"> of the</font>

12
00:00:31,470 --> 00:00:36,150
hardware technologies and<font color="#E5E5E5"> software</font>

13
00:00:33,150 --> 00:00:39,680
that's<font color="#E5E5E5"> available today</font><font color="#CCCCCC"> to avoid the</font>

14
00:00:36,150 --> 00:00:42,989
contentions and increase our determinism

15
00:00:39,680 --> 00:00:44,579
<font color="#E5E5E5">so let me start by indicating the common</font>

16
00:00:42,989 --> 00:00:46,078
contentions right so in a cloud

17
00:00:44,579 --> 00:00:48,719
environment<font color="#E5E5E5"> the first one of the first</font>

18
00:00:46,079 --> 00:00:51,270
directive is about minimizing<font color="#E5E5E5"> total cost</font>

19
00:00:48,719 --> 00:00:53,520
of ownership<font color="#CCCCCC"> and more often than not in</font>

20
00:00:51,270 --> 00:00:56,370
<font color="#E5E5E5">doing that often</font><font color="#CCCCCC"> leads to over</font>

21
00:00:53,520 --> 00:00:58,230
subscription right and so here's how it

22
00:00:56,370 --> 00:01:00,899
here's where you tweak your quality<font color="#CCCCCC"> of</font>

23
00:00:58,230 --> 00:01:02,809
service requirements like<font color="#E5E5E5"> SLA is and</font>

24
00:01:00,899 --> 00:01:07,050
service availability throughput latency

25
00:01:02,809 --> 00:01:09,209
<font color="#E5E5E5">scaling etc although cloud in</font><font color="#CCCCCC"> nfe</font>

26
00:01:07,050 --> 00:01:12,240
deployments have many subtle differences

27
00:01:09,209 --> 00:01:14,700
<font color="#E5E5E5">more often optimizing these</font><font color="#CCCCCC"> hardware</font>

28
00:01:12,240 --> 00:01:17,699
resources especially<font color="#CCCCCC"> CPU resources leads</font>

29
00:01:14,700 --> 00:01:20,789
to shared resource contention these

30
00:01:17,700 --> 00:01:22,890
shared resources are mostly<font color="#E5E5E5"> or last</font>

31
00:01:20,789 --> 00:01:27,390
level cache<font color="#E5E5E5"> on a</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> memory bandwidth</font>

32
00:01:22,890 --> 00:01:28,860
PCI bandwidth<font color="#E5E5E5"> in today's deployments</font>

33
00:01:27,390 --> 00:01:31,289
like most of the orchestrators<font color="#CCCCCC"> may be</font>

34
00:01:28,860 --> 00:01:33,709
kubernetes OpenStack they don't have

35
00:01:31,289 --> 00:01:36,959
mechanisms<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to control these</font>

36
00:01:33,709 --> 00:01:40,080
<font color="#E5E5E5">it's these shared resources so that</font><font color="#CCCCCC"> you</font>

37
00:01:36,959 --> 00:01:41,970
<font color="#E5E5E5">can provide more determinism so dig into</font>

38
00:01:40,080 --> 00:01:44,520
<font color="#E5E5E5">a little</font><font color="#CCCCCC"> more to see how</font><font color="#E5E5E5"> you know you</font>

39
00:01:41,970 --> 00:01:47,399
can achieve<font color="#E5E5E5"> that now if just</font><font color="#CCCCCC"> to give you</font>

40
00:01:44,520 --> 00:01:50,250
a idea<font color="#CCCCCC"> why is last level cache important</font>

41
00:01:47,399 --> 00:01:51,720
<font color="#CCCCCC">all right so this if you</font><font color="#E5E5E5"> notice across</font>

42
00:01:50,250 --> 00:01:54,239
the<font color="#E5E5E5"> CPU you might have multiple</font>

43
00:01:51,720 --> 00:01:55,890
workloads<font color="#E5E5E5"> running but the last level</font>

44
00:01:54,239 --> 00:01:59,970
cache is always shared across these

45
00:01:55,890 --> 00:02:02,580
multiple workloads<font color="#E5E5E5"> so more often at</font>

46
00:01:59,970 --> 00:02:05,880
these<font color="#E5E5E5"> sharing of this resource often</font>

47
00:02:02,580 --> 00:02:08,280
leads to up<font color="#E5E5E5"> to 51</font><font color="#CCCCCC"> percent of throughput</font>

48
00:02:05,880 --> 00:02:11,160
degradation<font color="#CCCCCC"> comms were close</font><font color="#E5E5E5"> if you take</font>

49
00:02:08,280 --> 00:02:14,189
a simple workload<font color="#E5E5E5"> in this case spec CPU</font>

50
00:02:11,160 --> 00:02:15,859
benchmark we zip<font color="#CCCCCC"> - based on the amount</font>

51
00:02:14,189 --> 00:02:17,810
of cash<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the</font>

52
00:02:15,860 --> 00:02:21,350
but<font color="#E5E5E5"> your performance goes</font><font color="#CCCCCC"> up and down</font>

53
00:02:17,810 --> 00:02:23,630
<font color="#CCCCCC">quite a significant effect up to five</font>

54
00:02:21,350 --> 00:02:27,070
<font color="#E5E5E5">times the performance</font><font color="#CCCCCC"> difference</font><font color="#E5E5E5"> so if</font>

55
00:02:23,630 --> 00:02:29,299
you consider any<font color="#CCCCCC"> nfe or</font><font color="#E5E5E5"> real-time</font>

56
00:02:27,070 --> 00:02:33,500
<font color="#E5E5E5">deployments</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> very sensitive to</font>

57
00:02:29,300 --> 00:02:35,630
<font color="#E5E5E5">lhasa cache right so in order to avoid</font>

58
00:02:33,500 --> 00:02:38,810
that<font color="#E5E5E5"> intelligent reduce</font><font color="#CCCCCC"> research</font>

59
00:02:35,630 --> 00:02:40,850
director technology<font color="#E5E5E5"> on on a</font><font color="#CCCCCC"> cpu so</font>

60
00:02:38,810 --> 00:02:42,530
umbrella of technologies coupler

61
00:02:40,850 --> 00:02:44,989
technologies will look into today one is

62
00:02:42,530 --> 00:02:48,050
<font color="#E5E5E5">cache monitoring technology so it gives</font>

63
00:02:44,990 --> 00:02:50,990
you hardware infrastructure to get

64
00:02:48,050 --> 00:02:53,360
advanced elementary of<font color="#E5E5E5"> which application</font>

65
00:02:50,990 --> 00:02:56,180
uses amount of what amount<font color="#E5E5E5"> of cache or</font>

66
00:02:53,360 --> 00:02:59,080
which core uses the relevant amount<font color="#E5E5E5"> of</font>

67
00:02:56,180 --> 00:03:02,240
cache and based on this you<font color="#CCCCCC"> can identify</font>

68
00:02:59,080 --> 00:03:03,260
<font color="#E5E5E5">misbehaving applications and move</font><font color="#CCCCCC"> around</font>

69
00:03:02,240 --> 00:03:05,180
them

70
00:03:03,260 --> 00:03:07,640
the other one is cache allocation

71
00:03:05,180 --> 00:03:09,980
technology<font color="#E5E5E5"> just monitoring isn't</font>

72
00:03:07,640 --> 00:03:12,890
sufficient all the time<font color="#E5E5E5"> so you have a</font>

73
00:03:09,980 --> 00:03:15,619
way<font color="#CCCCCC"> now to</font><font color="#E5E5E5"> actually control your cache</font>

74
00:03:12,890 --> 00:03:17,929
or assign or allocate a<font color="#E5E5E5"> certain specific</font>

75
00:03:15,620 --> 00:03:20,180
<font color="#E5E5E5">amount of cash at your your</font>

76
00:03:17,930 --> 00:03:22,340
corresponding applications<font color="#E5E5E5"> so this way</font>

77
00:03:20,180 --> 00:03:24,590
<font color="#E5E5E5">once you identify like your high</font>

78
00:03:22,340 --> 00:03:27,080
priority versus<font color="#E5E5E5"> best effort type of</font>

79
00:03:24,590 --> 00:03:29,180
applications you<font color="#CCCCCC"> can give a dedicated</font>

80
00:03:27,080 --> 00:03:31,640
section of<font color="#E5E5E5"> cache to your high priority</font>

81
00:03:29,180 --> 00:03:33,320
application thereby ensuring that your

82
00:03:31,640 --> 00:03:36,230
performance<font color="#E5E5E5"> is guaranteed for that</font>

83
00:03:33,320 --> 00:03:38,030
<font color="#CCCCCC">application</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> cache location technology</font>

84
00:03:36,230 --> 00:03:41,209
<font color="#E5E5E5">provides you the required hardware</font>

85
00:03:38,030 --> 00:03:43,730
infrastructure to do that<font color="#E5E5E5"> so how do you</font>

86
00:03:41,209 --> 00:03:46,040
achieve this determinism that<font color="#CCCCCC"> we're</font>

87
00:03:43,730 --> 00:03:47,570
talking<font color="#CCCCCC"> about right so like we were</font>

88
00:03:46,040 --> 00:03:49,400
<font color="#E5E5E5">saying like lot of workloads are</font>

89
00:03:47,570 --> 00:03:51,680
co-located<font color="#CCCCCC"> all the time</font><font color="#E5E5E5"> you know in a</font>

90
00:03:49,400 --> 00:03:54,430
cloud deployment<font color="#E5E5E5"> while you while you're</font>

91
00:03:51,680 --> 00:03:56,810
tuning your quality<font color="#E5E5E5"> of service</font>

92
00:03:54,430 --> 00:03:58,750
<font color="#E5E5E5">especially in this case for cash</font><font color="#CCCCCC"> you're</font>

93
00:03:56,810 --> 00:04:02,330
looking at<font color="#CCCCCC"> your throughput</font><font color="#E5E5E5"> and latency</font>

94
00:03:58,750 --> 00:04:04,310
measurements<font color="#CCCCCC"> so one example</font><font color="#E5E5E5"> is in terms</font>

95
00:04:02,330 --> 00:04:06,950
of<font color="#E5E5E5"> noisy neighbor avoidance if you take</font>

96
00:04:04,310 --> 00:04:09,080
content delivery network<font color="#E5E5E5"> you have two</font>

97
00:04:06,950 --> 00:04:11,238
<font color="#CCCCCC">different media streaming applications</font>

98
00:04:09,080 --> 00:04:13,790
running<font color="#E5E5E5"> each is a noisy to each other</font>

99
00:04:11,239 --> 00:04:15,590
because<font color="#E5E5E5"> each each application have a lot</font>

100
00:04:13,790 --> 00:04:18,769
<font color="#CCCCCC">of memory reads and writes</font><font color="#E5E5E5"> a lot of</font>

101
00:04:15,590 --> 00:04:21,380
cache utilization<font color="#E5E5E5"> so each can</font><font color="#CCCCCC"> be noisy</font>

102
00:04:18,769 --> 00:04:24,590
to each other<font color="#E5E5E5"> now how would you detect</font>

103
00:04:21,380 --> 00:04:28,909
and<font color="#E5E5E5"> control and avoid workloads like</font>

104
00:04:24,590 --> 00:04:29,419
this<font color="#E5E5E5"> so we've done some analysis with</font>

105
00:04:28,910 --> 00:04:31,640
the

106
00:04:29,420 --> 00:04:33,800
<font color="#CCCCCC">vivia Smurf</font><font color="#E5E5E5"> just in the previous</font>

107
00:04:31,640 --> 00:04:36,770
presentation we<font color="#CCCCCC"> got an introduction so</font>

108
00:04:33,800 --> 00:04:39,470
<font color="#CCCCCC">with the whisper</font><font color="#E5E5E5"> if it's a fully</font>

109
00:04:36,770 --> 00:04:43,580
automated test suite that<font color="#E5E5E5"> can deploy or</font>

110
00:04:39,470 --> 00:04:46,310
<font color="#CCCCCC">nfe</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> FEI and virtual switch</font><font color="#E5E5E5"> in this</font>

111
00:04:43,580 --> 00:04:48,080
case we use the<font color="#CCCCCC"> open V switch</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> say</font>

112
00:04:46,310 --> 00:04:53,210
can<font color="#CCCCCC"> they</font><font color="#E5E5E5"> find and</font><font color="#CCCCCC"> implement your test</font>

113
00:04:48,080 --> 00:04:57,620
cases<font color="#CCCCCC"> scalar CPUs for</font><font color="#E5E5E5"> vnfs and we used</font>

114
00:04:53,210 --> 00:05:00,650
it's a<font color="#CCCCCC"> vs /</font><font color="#E5E5E5"> supports lot of traffic</font>

115
00:04:57,620 --> 00:05:04,790
generators<font color="#CCCCCC"> in this case we used XE a</font>

116
00:05:00,650 --> 00:05:06,919
traffic generator and so a<font color="#E5E5E5"> simple case</font>

117
00:05:04,790 --> 00:05:08,840
would be<font color="#E5E5E5"> you know it's a simple</font>

118
00:05:06,920 --> 00:05:10,550
<font color="#CCCCCC">application running in</font><font color="#E5E5E5"> a vnf and you</font>

119
00:05:08,840 --> 00:05:13,969
have your virtual switch and your

120
00:05:10,550 --> 00:05:17,030
dedicated<font color="#CCCCCC"> 10 gig NIC</font>

121
00:05:13,970 --> 00:05:19,550
so in our<font color="#E5E5E5"> case we used</font><font color="#CCCCCC"> Spirent cloud</font>

122
00:05:17,030 --> 00:05:21,950
stress as a<font color="#E5E5E5"> noisy neighbor noisy</font>

123
00:05:19,550 --> 00:05:24,470
neighbor is something in this example is

124
00:05:21,950 --> 00:05:26,330
<font color="#CCCCCC">that does a lot</font><font color="#E5E5E5"> of cache thrashing</font>

125
00:05:24,470 --> 00:05:30,050
<font color="#CCCCCC">there's a lot of reads and</font><font color="#E5E5E5"> writes</font>

126
00:05:26,330 --> 00:05:32,840
so spider and cloud stress<font color="#E5E5E5"> it's a nice</font>

127
00:05:30,050 --> 00:05:36,100
<font color="#E5E5E5">web-based infrastructure they can deploy</font>

128
00:05:32,840 --> 00:05:39,200
<font color="#E5E5E5">it as a VM you can configure it to</font>

129
00:05:36,100 --> 00:05:41,570
emulate a certain set of workloads<font color="#CCCCCC"> so in</font>

130
00:05:39,200 --> 00:05:43,909
this case configured it<font color="#CCCCCC"> to have a lot of</font>

131
00:05:41,570 --> 00:05:47,390
<font color="#E5E5E5">memory reads and writes it can you need</font>

132
00:05:43,910 --> 00:05:49,760
to perform as a firewall<font color="#E5E5E5"> or router so it</font>

133
00:05:47,390 --> 00:05:53,630
depends on<font color="#CCCCCC"> how you tune it</font><font color="#E5E5E5"> it can stress</font>

134
00:05:49,760 --> 00:05:59,090
your<font color="#CCCCCC"> computer memory or storage yes this</font>

135
00:05:53,630 --> 00:06:01,430
is from<font color="#CCCCCC"> spiral that</font><font color="#E5E5E5"> we run along with</font>

136
00:05:59,090 --> 00:06:03,650
the<font color="#CCCCCC"> Esper say this is deploy in a</font><font color="#E5E5E5"> VM so</font>

137
00:06:01,430 --> 00:06:05,390
along<font color="#CCCCCC"> with your workload under test you</font>

138
00:06:03,650 --> 00:06:09,320
deployed<font color="#E5E5E5"> this VM so that it acts as a</font>

139
00:06:05,390 --> 00:06:11,750
<font color="#E5E5E5">noisy neighbor and in order to get the</font>

140
00:06:09,320 --> 00:06:14,870
metrics we<font color="#CCCCCC"> use collecti</font><font color="#E5E5E5"> as a part of</font>

141
00:06:11,750 --> 00:06:16,850
<font color="#E5E5E5">barometer project mr.</font><font color="#CCCCCC"> Khiladi</font><font color="#E5E5E5"> is been</font>

142
00:06:14,870 --> 00:06:19,430
<font color="#E5E5E5">there forever</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean it's it's most</font>

143
00:06:16,850 --> 00:06:22,130
widely used statistics collection be

144
00:06:19,430 --> 00:06:24,740
mean it has a multiple<font color="#E5E5E5"> read or write</font>

145
00:06:22,130 --> 00:06:27,140
<font color="#CCCCCC">plugins</font><font color="#E5E5E5"> that gives you the required set</font>

146
00:06:24,740 --> 00:06:30,350
of data in terms of CPU<font color="#CCCCCC"> la salut cache</font>

147
00:06:27,140 --> 00:06:32,419
etc and the collection interval is

148
00:06:30,350 --> 00:06:34,850
configurable<font color="#CCCCCC"> for example in our case we</font>

149
00:06:32,420 --> 00:06:36,830
used<font color="#CCCCCC"> one second collection trouble so</font>

150
00:06:34,850 --> 00:06:38,870
what<font color="#E5E5E5"> that means is for</font><font color="#CCCCCC"> every second</font>

151
00:06:36,830 --> 00:06:42,340
you're getting<font color="#E5E5E5"> the cache utilization</font><font color="#CCCCCC"> per</font>

152
00:06:38,870 --> 00:06:45,430
workload basis per application basis

153
00:06:42,340 --> 00:06:48,270
so we used a intel r DD plugin that

154
00:06:45,430 --> 00:06:53,169
<font color="#E5E5E5">gives you this advanced</font><font color="#CCCCCC"> elementary of</font>

155
00:06:48,270 --> 00:06:55,780
<font color="#CCCCCC">cache statistics on your</font><font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> so here's</font>

156
00:06:53,169 --> 00:06:58,389
the test<font color="#E5E5E5"> setup</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have a simple</font>

157
00:06:55,780 --> 00:07:01,750
traffic<font color="#E5E5E5"> generator sending in</font><font color="#CCCCCC"> 2000 flows</font>

158
00:06:58,389 --> 00:07:05,080
on a inter platform<font color="#E5E5E5"> with 10 gig mix we</font>

159
00:07:01,750 --> 00:07:07,150
have<font color="#E5E5E5"> OBS with DP DK and deployed with vs</font>

160
00:07:05,080 --> 00:07:10,930
perf and<font color="#E5E5E5"> your VM under test</font>

161
00:07:07,150 --> 00:07:14,198
<font color="#E5E5E5">vo</font><font color="#CCCCCC"> minitest is a l2 forward test</font><font color="#E5E5E5"> VM the</font>

162
00:07:10,930 --> 00:07:18,310
application and<font color="#E5E5E5"> to noisy neighbors with</font>

163
00:07:14,199 --> 00:07:20,620
cloud stress applications so now when

164
00:07:18,310 --> 00:07:22,020
you<font color="#CCCCCC"> look at the</font><font color="#E5E5E5"> performance right so if</font>

165
00:07:20,620 --> 00:07:25,120
you<font color="#E5E5E5"> look at the baseline performance</font>

166
00:07:22,020 --> 00:07:27,120
with 4.2 million packets per second<font color="#E5E5E5"> as</font>

167
00:07:25,120 --> 00:07:29,200
soon as you have noisy neighbor

168
00:07:27,120 --> 00:07:33,010
<font color="#E5E5E5">applications running</font><font color="#CCCCCC"> the performance</font>

169
00:07:29,200 --> 00:07:35,139
goes down<font color="#E5E5E5"> by about</font><font color="#CCCCCC"> 33% most of the time</font>

170
00:07:33,010 --> 00:07:37,330
when you look<font color="#E5E5E5"> at something</font><font color="#CCCCCC"> like this a</font>

171
00:07:35,139 --> 00:07:39,789
lot of<font color="#E5E5E5"> folks start debugging ahead we'll</font>

172
00:07:37,330 --> 00:07:40,389
have enough<font color="#E5E5E5"> CPU is my application well</font>

173
00:07:39,789 --> 00:07:42,940
tuned

174
00:07:40,389 --> 00:07:44,620
is there enough memory<font color="#E5E5E5"> so these are the</font>

175
00:07:42,940 --> 00:07:47,200
first<font color="#E5E5E5"> set of</font><font color="#CCCCCC"> things that we would look</font>

176
00:07:44,620 --> 00:07:50,440
at<font color="#E5E5E5"> like kernel tracing and whatnot but</font>

177
00:07:47,200 --> 00:07:53,380
<font color="#CCCCCC">very rarely</font><font color="#E5E5E5"> that we look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> something</font>

178
00:07:50,440 --> 00:07:55,750
like<font color="#E5E5E5"> last level cache and so</font><font color="#CCCCCC"> give</font><font color="#E5E5E5"> you an</font>

179
00:07:53,380 --> 00:07:57,880
<font color="#E5E5E5">example how to kind of look through</font>

180
00:07:55,750 --> 00:08:00,190
something<font color="#CCCCCC"> like a last level cache in</font>

181
00:07:57,880 --> 00:08:04,360
<font color="#E5E5E5">order to debug performance challenges</font>

182
00:08:00,190 --> 00:08:06,370
like this it's a busy<font color="#CCCCCC"> slide and one of</font>

183
00:08:04,360 --> 00:08:08,979
the important slides let's start from

184
00:08:06,370 --> 00:08:12,520
here<font color="#CCCCCC"> so first</font><font color="#E5E5E5"> thing is constructing your</font>

185
00:08:08,979 --> 00:08:14,289
cache profile<font color="#E5E5E5"> under ideal conditions</font>

186
00:08:12,520 --> 00:08:16,719
meaning<font color="#E5E5E5"> under there's no noisy neighbor</font>

187
00:08:14,289 --> 00:08:18,520
there's no other<font color="#CCCCCC"> application under ideal</font>

188
00:08:16,720 --> 00:08:22,180
conditions we first get<font color="#CCCCCC"> the</font>

189
00:08:18,520 --> 00:08:24,580
<font color="#E5E5E5">characteristics of a cache footprint of</font>

190
00:08:22,180 --> 00:08:27,910
your<font color="#E5E5E5"> application like</font><font color="#CCCCCC"> via manner test in</font>

191
00:08:24,580 --> 00:08:29,800
this case<font color="#E5E5E5"> test</font><font color="#CCCCCC"> BMD so we see that when</font>

192
00:08:27,910 --> 00:08:32,380
<font color="#E5E5E5">we're getting the maximum performance</font>

193
00:08:29,800 --> 00:08:36,370
for that<font color="#E5E5E5"> VM the we switch daemon is</font>

194
00:08:32,380 --> 00:08:38,439
using<font color="#CCCCCC"> to point</font><font color="#E5E5E5"> less than</font><font color="#CCCCCC"> 2.5 and B it's</font>

195
00:08:36,370 --> 00:08:40,810
a the platform that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> is called</font>

196
00:08:38,440 --> 00:08:46,720
<font color="#E5E5E5">Broadwell generation which is</font><font color="#CCCCCC"> intel xeon</font>

197
00:08:40,809 --> 00:08:49,869
e5 v4 and your rpm DS about 12.5 MB per

198
00:08:46,720 --> 00:08:53,470
<font color="#E5E5E5">family</font><font color="#CCCCCC"> and forwarding</font><font color="#E5E5E5"> VM is about 2.5 MB</font>

199
00:08:49,870 --> 00:08:56,050
so under<font color="#CCCCCC"> plane conditions you get</font><font color="#E5E5E5"> your</font>

200
00:08:53,470 --> 00:08:58,450
cache profile<font color="#E5E5E5"> and now it allows you to</font>

201
00:08:56,050 --> 00:09:00,069
<font color="#E5E5E5">you construct like an understand what is</font>

202
00:08:58,450 --> 00:09:03,130
the kind amount of cash<font color="#CCCCCC"> that you need</font>

203
00:09:00,070 --> 00:09:05,980
for<font color="#E5E5E5"> your workload</font><font color="#CCCCCC"> so let's look at a</font>

204
00:09:03,130 --> 00:09:08,050
packet flow in a simple<font color="#E5E5E5"> platform</font><font color="#CCCCCC"> right</font>

205
00:09:05,980 --> 00:09:10,660
<font color="#E5E5E5">so you have packets coming in from your</font>

206
00:09:08,050 --> 00:09:12,729
<font color="#CCCCCC">NIC</font><font color="#E5E5E5"> and copied to the memory and then</font>

207
00:09:10,660 --> 00:09:15,250
your<font color="#E5E5E5"> rese which is classifying a</font>

208
00:09:12,730 --> 00:09:17,649
destination<font color="#E5E5E5"> and then they copied onto</font>

209
00:09:15,250 --> 00:09:20,560
the memory<font color="#CCCCCC"> space of</font><font color="#E5E5E5"> the VM</font><font color="#CCCCCC"> that you're</font>

210
00:09:17,649 --> 00:09:23,589
forwarding<font color="#E5E5E5"> to so in this case you have</font>

211
00:09:20,560 --> 00:09:26,800
these memory copies going on<font color="#CCCCCC"> but what</font><font color="#E5E5E5"> if</font>

212
00:09:23,589 --> 00:09:30,760
you take the DDI<font color="#E5E5E5"> yo path data direct</font><font color="#CCCCCC"> i/o</font>

213
00:09:26,800 --> 00:09:33,010
path<font color="#E5E5E5"> so if this has been platform has</font>

214
00:09:30,760 --> 00:09:35,319
<font color="#CCCCCC">been supporting later at i/o for a long</font>

215
00:09:33,010 --> 00:09:37,480
time now<font color="#E5E5E5"> so in this case the packets are</font>

216
00:09:35,320 --> 00:09:40,570
copied directly from the NIC on to the

217
00:09:37,480 --> 00:09:42,519
last level<font color="#E5E5E5"> cache so in under cache</font>

218
00:09:40,570 --> 00:09:46,240
allocation technology<font color="#E5E5E5"> what it provides</font>

219
00:09:42,519 --> 00:09:49,690
you to<font color="#CCCCCC"> is</font><font color="#E5E5E5"> dividin allocate associators</font>

220
00:09:46,240 --> 00:09:52,269
<font color="#E5E5E5">section of cash to your VMs or to</font><font color="#CCCCCC"> your</font>

221
00:09:49,690 --> 00:09:54,640
<font color="#E5E5E5">containers to your applications</font><font color="#CCCCCC"> so what</font>

222
00:09:52,269 --> 00:09:58,990
we did was<font color="#E5E5E5"> did some performance studies</font>

223
00:09:54,640 --> 00:10:02,620
<font color="#E5E5E5">so first we ensured the</font><font color="#CCCCCC"> DDI o</font><font color="#E5E5E5"> is taken</font>

224
00:09:58,990 --> 00:10:04,360
by the OBS with<font color="#E5E5E5"> BPD</font><font color="#CCCCCC"> K</font><font color="#E5E5E5"> because that's</font>

225
00:10:02,620 --> 00:10:06,820
where the<font color="#CCCCCC"> polymer drivers are doing</font><font color="#E5E5E5"> the</font>

226
00:10:04,360 --> 00:10:09,220
heavy<font color="#CCCCCC"> lifting of copying</font><font color="#E5E5E5"> tons of pockets</font>

227
00:10:06,820 --> 00:10:12,910
here so we ensure that DDI our cache

228
00:10:09,220 --> 00:10:16,690
ways is given to<font color="#E5E5E5"> PM DS and what each of</font>

229
00:10:12,910 --> 00:10:18,550
this<font color="#E5E5E5"> VM that we have here so the cloud</font>

230
00:10:16,690 --> 00:10:21,459
stress noisy neighbor and their idle

231
00:10:18,550 --> 00:10:24,750
conditions out of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> 55 MB it can take</font>

232
00:10:21,459 --> 00:10:28,270
up to 52 point 5 MB so it<font color="#E5E5E5"> can take like</font>

233
00:10:24,750 --> 00:10:30,550
<font color="#CCCCCC">95% less of your last level cache</font><font color="#E5E5E5"> so</font>

234
00:10:28,270 --> 00:10:33,010
what we did is instead<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> said that's</font>

235
00:10:30,550 --> 00:10:36,219
<font color="#E5E5E5">the main reason that you saw that</font><font color="#CCCCCC"> 32</font>

236
00:10:33,010 --> 00:10:39,819
percent performance<font color="#CCCCCC"> rock instead we kind</font>

237
00:10:36,220 --> 00:10:42,730
of constrained it to just 2.5 MB so each

238
00:10:39,820 --> 00:10:44,440
<font color="#CCCCCC">platform has the minimum segment that</font>

239
00:10:42,730 --> 00:10:46,440
<font color="#E5E5E5">you can divide</font><font color="#CCCCCC"> a cache - it's called</font>

240
00:10:44,440 --> 00:10:48,970
cache way and in this platform

241
00:10:46,440 --> 00:10:51,699
<font color="#E5E5E5">generation it's about 2.5</font><font color="#CCCCCC"> MB is the</font>

242
00:10:48,970 --> 00:10:54,640
least that<font color="#E5E5E5"> you can associate a cache to</font>

243
00:10:51,699 --> 00:10:58,240
an application<font color="#CCCCCC"> - so each of this</font><font color="#E5E5E5"> VM gets</font>

244
00:10:54,640 --> 00:11:00,790
2.5 MB and based<font color="#E5E5E5"> on if you add up</font><font color="#CCCCCC"> the</font>

245
00:10:58,240 --> 00:11:04,740
cash required for we switch

246
00:11:00,790 --> 00:11:07,329
infrastructure we gave<font color="#E5E5E5"> about rest of the</font>

247
00:11:04,740 --> 00:11:09,190
<font color="#E5E5E5">combination of that to the we switch</font>

248
00:11:07,329 --> 00:11:09,609
basically the PM DS and the V switch

249
00:11:09,190 --> 00:11:12,880
team

250
00:11:09,610 --> 00:11:15,340
and the cash allocation technology

251
00:11:12,880 --> 00:11:18,880
allows you to overlap the cash<font color="#E5E5E5"> basically</font>

252
00:11:15,340 --> 00:11:20,800
here these VMs<font color="#E5E5E5"> are isolated with for</font>

253
00:11:18,880 --> 00:11:24,460
their cash and<font color="#E5E5E5"> the we switch is</font>

254
00:11:20,800 --> 00:11:27,939
overlapping the cash with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VMS</font><font color="#E5E5E5"> so</font>

255
00:11:24,460 --> 00:11:31,780
based on that what we saw was<font color="#E5E5E5"> you know</font>

256
00:11:27,940 --> 00:11:34,950
so instead of isolating<font color="#CCCCCC"> we switch and</font>

257
00:11:31,780 --> 00:11:37,750
the VMS we find a<font color="#E5E5E5"> little bit of latency</font>

258
00:11:34,950 --> 00:11:40,030
<font color="#E5E5E5">improvement when we shared the cash so</font>

259
00:11:37,750 --> 00:11:41,560
lot<font color="#E5E5E5"> of these details are in the PDF</font>

260
00:11:40,030 --> 00:11:44,500
that's published on internet<font color="#CCCCCC"> work</font>

261
00:11:41,560 --> 00:11:46,630
builders<font color="#E5E5E5"> but let's take an example of no</font>

262
00:11:44,500 --> 00:11:50,710
overlapping we switch<font color="#E5E5E5"> cash with the VMS</font>

263
00:11:46,630 --> 00:11:52,780
and what you find<font color="#E5E5E5"> was you know the</font>

264
00:11:50,710 --> 00:11:54,940
performance<font color="#CCCCCC"> pretty good improvement</font><font color="#E5E5E5"> but</font>

265
00:11:52,780 --> 00:11:57,550
before I jump there the kind<font color="#E5E5E5"> of main</font>

266
00:11:54,940 --> 00:11:58,750
idea here<font color="#CCCCCC"> is you know if you kind of</font>

267
00:11:57,550 --> 00:12:01,449
understand this there are a lot of

268
00:11:58,750 --> 00:12:03,490
permutations and combinations of how you

269
00:12:01,450 --> 00:12:06,370
can allocate<font color="#E5E5E5"> your cash</font><font color="#CCCCCC"> over lapping</font>

270
00:12:03,490 --> 00:12:08,320
versus isolated<font color="#E5E5E5"> and that's where and if</font>

271
00:12:06,370 --> 00:12:10,780
you look at a<font color="#E5E5E5"> cloud perspective you</font>

272
00:12:08,320 --> 00:12:13,090
can't log<font color="#CCCCCC"> in to every platform and kind</font>

273
00:12:10,780 --> 00:12:16,360
<font color="#E5E5E5">of controlled the cash for</font><font color="#CCCCCC"> noumenon</font>

274
00:12:13,090 --> 00:12:18,340
basis so instead we introduced a

275
00:12:16,360 --> 00:12:20,830
resource management daemon<font color="#E5E5E5"> and this</font>

276
00:12:18,340 --> 00:12:24,670
<font color="#CCCCCC">software</font><font color="#E5E5E5"> has been open sourced</font><font color="#CCCCCC"> just</font>

277
00:12:20,830 --> 00:12:28,830
about in 20<font color="#E5E5E5"> 2017 so what happens is in a</font>

278
00:12:24,670 --> 00:12:32,079
in a cloud<font color="#CCCCCC"> network right so you have a</font>

279
00:12:28,830 --> 00:12:34,420
<font color="#E5E5E5">traditional long loop where you have</font>

280
00:12:32,080 --> 00:12:37,480
your metrics<font color="#E5E5E5"> sent to a central</font>

281
00:12:34,420 --> 00:12:40,750
controller<font color="#E5E5E5"> and based on the policy the</font>

282
00:12:37,480 --> 00:12:42,970
the relevant<font color="#E5E5E5"> control resource decisions</font>

283
00:12:40,750 --> 00:12:46,000
<font color="#E5E5E5">are applied so instead we</font><font color="#CCCCCC"> have</font>

284
00:12:42,970 --> 00:12:49,350
introduced<font color="#CCCCCC"> RMD to control these latency</font>

285
00:12:46,000 --> 00:12:51,610
<font color="#CCCCCC">sensitive no real time sensitive</font>

286
00:12:49,350 --> 00:12:54,400
workloads<font color="#E5E5E5"> in this case last level cache</font>

287
00:12:51,610 --> 00:12:56,560
<font color="#E5E5E5">so where the idea is it's carrying the</font>

288
00:12:54,400 --> 00:12:59,410
<font color="#E5E5E5">information monitoring</font><font color="#CCCCCC"> information and</font>

289
00:12:56,560 --> 00:13:03,010
based on the policy that you set within

290
00:12:59,410 --> 00:13:06,400
<font color="#E5E5E5">the</font><font color="#CCCCCC"> local</font><font color="#E5E5E5"> node they can enforce based on</font>

291
00:13:03,010 --> 00:13:08,500
<font color="#CCCCCC">their resources</font><font color="#E5E5E5"> and why is it</font><font color="#CCCCCC"> why do we</font>

292
00:13:06,400 --> 00:13:10,800
why do we care<font color="#E5E5E5"> about it because you know</font>

293
00:13:08,500 --> 00:13:14,740
it runs<font color="#E5E5E5"> on individual nodes and</font><font color="#CCCCCC"> it's a</font>

294
00:13:10,800 --> 00:13:17,380
latest one second is too long<font color="#CCCCCC"> sometimes</font>

295
00:13:14,740 --> 00:13:18,970
for something like last level cache<font color="#CCCCCC"> so</font>

296
00:13:17,380 --> 00:13:21,220
in<font color="#E5E5E5"> millisecond level</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> actually</font>

297
00:13:18,970 --> 00:13:23,320
send in a<font color="#E5E5E5"> REST API send in your policy</font>

298
00:13:21,220 --> 00:13:25,170
based on<font color="#E5E5E5"> the policy</font><font color="#CCCCCC"> you can decide</font>

299
00:13:23,320 --> 00:13:27,970
how to control<font color="#CCCCCC"> your</font><font color="#E5E5E5"> cash and</font>

300
00:13:25,170 --> 00:13:30,969
architecture is very<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> sending a</font>

301
00:13:27,970 --> 00:13:33,220
<font color="#E5E5E5">policy and there's a kernel process that</font>

302
00:13:30,970 --> 00:13:36,970
writes the relevant policy to<font color="#E5E5E5"> the file</font>

303
00:13:33,220 --> 00:13:38,640
<font color="#E5E5E5">system so with the vs / for</font>

304
00:13:36,970 --> 00:13:43,000
infrastructure we integrated both

305
00:13:38,640 --> 00:13:45,280
<font color="#CCCCCC">collecti and RM d so we send a policy to</font>

306
00:13:43,000 --> 00:13:48,640
our MD at<font color="#CCCCCC"> runtime saying I want</font><font color="#E5E5E5"> to</font>

307
00:13:45,280 --> 00:13:51,130
divide my cash<font color="#E5E5E5"> in this way with the</font>

308
00:13:48,640 --> 00:13:55,540
example that<font color="#E5E5E5"> we saw VMs versus V switch</font>

309
00:13:51,130 --> 00:13:56,980
etc and our MD sends in the<font color="#E5E5E5"> policy to</font>

310
00:13:55,540 --> 00:14:00,550
resource control<font color="#CCCCCC"> file system and</font>

311
00:13:56,980 --> 00:14:09,250
allocates the cash in this way and we

312
00:14:00,550 --> 00:14:11,380
<font color="#E5E5E5">rerun the performance test yeah that's</font>

313
00:14:09,250 --> 00:14:13,690
the idea<font color="#CCCCCC"> so so that way we get</font><font color="#E5E5E5"> the</font>

314
00:14:11,380 --> 00:14:15,939
workloads<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> Orchestrator environment</font>

315
00:14:13,690 --> 00:14:17,410
we<font color="#E5E5E5"> need a automated way to understand</font>

316
00:14:15,940 --> 00:14:21,280
what workloads they<font color="#E5E5E5"> are running so</font>

317
00:14:17,410 --> 00:14:23,469
<font color="#E5E5E5">that's coming up next so now</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you look</font>

318
00:14:21,280 --> 00:14:26,260
<font color="#CCCCCC">at the performance</font><font color="#E5E5E5"> with the policy set</font>

319
00:14:23,470 --> 00:14:28,630
with<font color="#E5E5E5"> our</font><font color="#CCCCCC"> Omni</font><font color="#E5E5E5"> there's a good jump in 40</font>

320
00:14:26,260 --> 00:14:30,100
<font color="#E5E5E5">40</font><font color="#CCCCCC"> %</font><font color="#E5E5E5"> performance compared to what we</font>

321
00:14:28,630 --> 00:14:32,680
<font color="#CCCCCC">just saw in the</font><font color="#E5E5E5"> presence of noisy</font>

322
00:14:30,100 --> 00:14:35,140
neighbor so because we constrained the

323
00:14:32,680 --> 00:14:37,660
noisy neighbor to just<font color="#E5E5E5"> one cache way</font>

324
00:14:35,140 --> 00:14:39,939
which is<font color="#E5E5E5"> about 2.5 V so it's not</font>

325
00:14:37,660 --> 00:14:42,310
affecting the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> related to your VM</font>

326
00:14:39,940 --> 00:14:44,200
under test<font color="#E5E5E5"> so thereby improving the</font>

327
00:14:42,310 --> 00:14:47,890
performance to more than<font color="#E5E5E5"> about 40</font>

328
00:14:44,200 --> 00:14:49,870
<font color="#E5E5E5">percent</font><font color="#CCCCCC"> and so in this</font><font color="#E5E5E5"> case the the</font><font color="#CCCCCC"> kind</font>

329
00:14:47,890 --> 00:14:52,180
<font color="#E5E5E5">of cache policy we set was like</font><font color="#CCCCCC"> okay</font>

330
00:14:49,870 --> 00:14:55,450
noisy neighbor you're just getting 2.5

331
00:14:52,180 --> 00:14:58,599
<font color="#E5E5E5">MV and at the same time the RMD can</font>

332
00:14:55,450 --> 00:15:00,370
allow you<font color="#E5E5E5"> to scale the amount of cash</font>

333
00:14:58,600 --> 00:15:03,280
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you want to give to</font><font color="#CCCCCC"> your workload</font>

334
00:15:00,370 --> 00:15:05,080
instead of 2.5 MB you can increase<font color="#E5E5E5"> let's</font>

335
00:15:03,280 --> 00:15:07,839
say you have more cash left<font color="#E5E5E5"> increase it</font>

336
00:15:05,080 --> 00:15:09,760
to 3 MB or 10 MB whatever size<font color="#CCCCCC"> that you</font>

337
00:15:07,840 --> 00:15:12,160
choose to<font color="#E5E5E5"> and that's the benefit of</font>

338
00:15:09,760 --> 00:15:14,380
<font color="#E5E5E5">having a</font><font color="#CCCCCC"> policy based agent like our MD</font>

339
00:15:12,160 --> 00:15:16,810
that can that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can scale based on</font><font color="#E5E5E5"> the</font>

340
00:15:14,380 --> 00:15:20,670
<font color="#E5E5E5">performance you can scale your amount of</font>

341
00:15:16,810 --> 00:15:23,979
cash<font color="#CCCCCC"> that you have allocated to so</font>

342
00:15:20,670 --> 00:15:25,719
pretty much done<font color="#E5E5E5"> so takeaways at high</font>

343
00:15:23,980 --> 00:15:28,270
level<font color="#CCCCCC"> you know it's noisy neighbor</font>

344
00:15:25,720 --> 00:15:28,780
effects it need not be your CPU or

345
00:15:28,270 --> 00:15:31,150
memory

346
00:15:28,780 --> 00:15:33,130
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> shared resources on the platform</font>

347
00:15:31,150 --> 00:15:36,880
<font color="#E5E5E5">that you have to care about like last</font>

348
00:15:33,130 --> 00:15:39,389
level cache and<font color="#CCCCCC"> rdt helps you out to do</font>

349
00:15:36,880 --> 00:15:43,990
a less inequality of service control and

350
00:15:39,389 --> 00:15:47,440
<font color="#CCCCCC">RMD said the when the opion of EVs per</font>

351
00:15:43,990 --> 00:15:49,480
page<font color="#CCCCCC"> there quite a few examples and test</font>

352
00:15:47,440 --> 00:15:51,370
<font color="#CCCCCC">cases and we have recently done a demo</font>

353
00:15:49,480 --> 00:15:54,430
<font color="#CCCCCC">that you can really see in live</font>

354
00:15:51,370 --> 00:15:56,319
<font color="#E5E5E5">real-time by changing a policy of last</font>

355
00:15:54,430 --> 00:15:59,560
<font color="#E5E5E5">level cache</font><font color="#CCCCCC"> Association</font><font color="#E5E5E5"> how your</font>

356
00:15:56,319 --> 00:16:01,839
performance<font color="#CCCCCC"> can take a big impact I said</font>

357
00:15:59,560 --> 00:16:03,540
<font color="#CCCCCC">have a lot of</font><font color="#E5E5E5"> resources and in terms of</font>

358
00:16:01,839 --> 00:16:06,190
<font color="#CCCCCC">Orchestrator</font><font color="#E5E5E5"> like we were</font><font color="#CCCCCC"> talking about</font>

359
00:16:03,540 --> 00:16:08,110
you know<font color="#E5E5E5"> so how would our MD understand</font>

360
00:16:06,190 --> 00:16:10,839
the<font color="#E5E5E5"> VMS how would an army understand</font>

361
00:16:08,110 --> 00:16:13,600
kubernetes<font color="#E5E5E5"> we have a set of blueprints</font>

362
00:16:10,839 --> 00:16:15,490
and<font color="#E5E5E5"> introduced</font><font color="#CCCCCC"> there's a lot of</font>

363
00:16:13,600 --> 00:16:17,709
discussion<font color="#CCCCCC"> going on online</font><font color="#E5E5E5"> so feel free</font>

364
00:16:15,490 --> 00:16:20,199
to review<font color="#E5E5E5"> a comment provide us feedback</font>

365
00:16:17,709 --> 00:16:23,290
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> leverage this</font>

366
00:16:20,199 --> 00:16:25,569
into your<font color="#CCCCCC"> nfe infrastructure and kind</font><font color="#E5E5E5"> of</font>

367
00:16:23,290 --> 00:16:28,120
understand<font color="#CCCCCC"> how does LLC can play an</font>

368
00:16:25,569 --> 00:16:39,130
important<font color="#CCCCCC"> role so that I'm pretty</font><font color="#E5E5E5"> much</font>

369
00:16:28,120 --> 00:16:42,750
done<font color="#CCCCCC"> find questions you can do both</font><font color="#E5E5E5"> so</font>

370
00:16:39,130 --> 00:16:46,930
<font color="#CCCCCC">colonel for 14 and</font><font color="#E5E5E5"> above supports</font>

371
00:16:42,750 --> 00:16:50,290
assigning cash to per process so you can

372
00:16:46,930 --> 00:16:52,599
<font color="#E5E5E5">actually trace</font><font color="#CCCCCC"> based</font><font color="#E5E5E5"> your process can be</font>

373
00:16:50,290 --> 00:16:55,149
moving<font color="#CCCCCC"> across the</font><font color="#E5E5E5"> course if if you want</font>

374
00:16:52,600 --> 00:17:01,709
to and it's still the<font color="#E5E5E5"> cash is guaranteed</font>

375
00:16:55,149 --> 00:17:01,709
for that process<font color="#E5E5E5"> any other questions</font>

376
00:17:02,920 --> 00:17:11,918
thank you

377
00:17:04,130 --> 00:17:11,919
[Applause]

