1
00:00:05,259 --> 00:00:11,020
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> hello my name is Alan Jude I'm a</font>

2
00:00:08,750 --> 00:00:13,940
<font color="#E5E5E5">FreeBSD and opens edifice developer and</font>

3
00:00:11,020 --> 00:00:16,730
today I'm going<font color="#E5E5E5"> to explain</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you like</font>

4
00:00:13,940 --> 00:00:21,050
you<font color="#E5E5E5"> were five how the ZFS</font><font color="#CCCCCC"> Ark</font><font color="#E5E5E5"> the</font>

5
00:00:16,730 --> 00:00:23,900
adaptive replacement cache works so like

6
00:00:21,050 --> 00:00:25,970
I<font color="#E5E5E5"> said I'm a previously core team member</font>

7
00:00:23,900 --> 00:00:28,669
and a developer as<font color="#CCCCCC"> well as an</font><font color="#E5E5E5"> open set</font>

8
00:00:25,970 --> 00:00:30,830
<font color="#E5E5E5">of</font><font color="#CCCCCC"> best developer and for my day</font><font color="#E5E5E5"> job I</font>

9
00:00:28,670 --> 00:00:32,360
work<font color="#E5E5E5"> at Clara</font><font color="#CCCCCC"> which is a FreeBSD</font>

10
00:00:30,830 --> 00:00:36,440
professional services and<font color="#E5E5E5"> support</font>

11
00:00:32,360 --> 00:00:39,979
company<font color="#CCCCCC"> so today we're gonna talk a bit</font>

12
00:00:36,440 --> 00:00:42,170
about<font color="#E5E5E5"> how the caching system in ZFS</font>

13
00:00:39,979 --> 00:00:43,879
works so we'll<font color="#E5E5E5"> start</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> very basic</font>

14
00:00:42,170 --> 00:00:46,040
<font color="#CCCCCC">overview of what zetas faces just in</font>

15
00:00:43,879 --> 00:00:48,470
case you haven't encountered it before

16
00:00:46,040 --> 00:00:52,820
<font color="#E5E5E5">and explain why you should start using</font>

17
00:00:48,470 --> 00:00:54,440
<font color="#E5E5E5">it and</font><font color="#CCCCCC"> then talk a bit about how caching</font>

18
00:00:52,820 --> 00:00:56,330
works<font color="#E5E5E5"> in general and then why the ways</font>

19
00:00:54,440 --> 00:00:59,180
<font color="#CCCCCC">edifice does it is a bit different and</font>

20
00:00:56,330 --> 00:01:02,930
then we'll get into more advanced topics

21
00:00:59,180 --> 00:01:06,080
<font color="#CCCCCC">like compressor</font><font color="#E5E5E5"> cache so starting from</font>

22
00:01:02,930 --> 00:01:07,880
the beginning<font color="#E5E5E5"> what is that if s the</font>

23
00:01:06,080 --> 00:01:10,400
biggest difference between ZFS and most

24
00:01:07,880 --> 00:01:12,289
file systems is that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> combines the</font>

25
00:01:10,400 --> 00:01:14,270
concept of<font color="#E5E5E5"> a volume manager something</font>

26
00:01:12,290 --> 00:01:17,870
like the Solaris volume manager or<font color="#E5E5E5"> ll</font>

27
00:01:14,270 --> 00:01:21,649
<font color="#E5E5E5">via or</font><font color="#CCCCCC"> LVM or MD ADM</font><font color="#E5E5E5"> into the file</font>

28
00:01:17,870 --> 00:01:23,930
system<font color="#CCCCCC"> so now you take a number</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> disks</font>

29
00:01:21,650 --> 00:01:25,790
<font color="#CCCCCC">and create a pool of free space</font><font color="#E5E5E5"> and then</font>

30
00:01:23,930 --> 00:01:27,950
you build file systems on<font color="#CCCCCC"> top of there</font>

31
00:01:25,790 --> 00:01:29,600
and each file system only<font color="#E5E5E5"> takes the free</font>

32
00:01:27,950 --> 00:01:32,030
space it needs basically<font color="#CCCCCC"> each file</font>

33
00:01:29,600 --> 00:01:33,830
system is thin provisioned<font color="#E5E5E5"> so all of</font>

34
00:01:32,030 --> 00:01:35,510
your free space is<font color="#CCCCCC"> available to</font><font color="#E5E5E5"> any one</font>

35
00:01:33,830 --> 00:01:37,340
<font color="#CCCCCC">of the file systems you create on top</font>

36
00:01:35,510 --> 00:01:39,650
and so you can<font color="#CCCCCC"> create hundreds of</font><font color="#E5E5E5"> file</font>

37
00:01:37,340 --> 00:01:41,720
systems<font color="#E5E5E5"> and they each only need take the</font>

38
00:01:39,650 --> 00:01:46,100
space they need<font color="#CCCCCC"> from the pool and then</font>

39
00:01:41,720 --> 00:01:47,870
<font color="#CCCCCC">you can expand the pool later and it can</font>

40
00:01:46,100 --> 00:01:49,520
also create what<font color="#CCCCCC"> are</font><font color="#E5E5E5"> called Z balls</font>

41
00:01:47,870 --> 00:01:51,620
which are block devices<font color="#E5E5E5"> which you can</font>

42
00:01:49,520 --> 00:01:56,350
then put other file systems<font color="#CCCCCC"> on top of or</font>

43
00:01:51,620 --> 00:01:59,270
use with something like NDB or<font color="#CCCCCC"> ice cozy</font>

44
00:01:56,350 --> 00:02:01,548
another big<font color="#E5E5E5"> difference in ZFS over most</font>

45
00:01:59,270 --> 00:02:03,350
file systems is<font color="#E5E5E5"> that every block of</font><font color="#CCCCCC"> data</font>

46
00:02:01,549 --> 00:02:06,440
<font color="#E5E5E5">that's written to the disk is also</font>

47
00:02:03,350 --> 00:02:08,628
<font color="#E5E5E5">checksum and so when you read the data</font>

48
00:02:06,440 --> 00:02:10,699
back we verify<font color="#E5E5E5"> the checksum and make</font>

49
00:02:08,628 --> 00:02:13,399
sure<font color="#E5E5E5"> that the disk hasn't accidentally</font>

50
00:02:10,699 --> 00:02:14,839
scrambled the data and ensure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> when</font>

51
00:02:13,400 --> 00:02:16,640
we give<font color="#E5E5E5"> data to an application it's</font>

52
00:02:14,840 --> 00:02:18,970
always in<font color="#E5E5E5"> exactly the</font><font color="#CCCCCC"> same format was</font>

53
00:02:16,640 --> 00:02:21,799
when<font color="#E5E5E5"> it was written to</font><font color="#CCCCCC"> the disk</font>

54
00:02:18,970 --> 00:02:24,260
and another<font color="#E5E5E5"> feature</font><font color="#CCCCCC"> that will come in to</font>

55
00:02:21,800 --> 00:02:26,540
play<font color="#E5E5E5"> during</font><font color="#CCCCCC"> the talk is the transparent</font>

56
00:02:24,260 --> 00:02:29,149
compression so optionally you<font color="#CCCCCC"> can enable</font>

57
00:02:26,540 --> 00:02:31,099
compression<font color="#CCCCCC"> in ZFS and then all the data</font>

58
00:02:29,150 --> 00:02:35,360
<font color="#E5E5E5">you write to disk will be compressed</font>

59
00:02:31,099 --> 00:02:36,940
first<font color="#E5E5E5"> in the past this wasn't that</font>

60
00:02:35,360 --> 00:02:39,860
useful<font color="#E5E5E5"> because of the performance impact</font>

61
00:02:36,940 --> 00:02:41,930
<font color="#E5E5E5">with things like gzip but with newer</font>

62
00:02:39,860 --> 00:02:45,140
algorithms like<font color="#E5E5E5"> LZ</font><font color="#CCCCCC"> poor and said</font>

63
00:02:41,930 --> 00:02:49,099
<font color="#E5E5E5">standard the compression speed is so</font>

64
00:02:45,140 --> 00:02:51,559
good<font color="#E5E5E5"> that it's still faster than</font><font color="#CCCCCC"> your</font>

65
00:02:49,099 --> 00:02:53,738
your disk<font color="#E5E5E5"> even if it's an SSD</font><font color="#CCCCCC"> and so</font>

66
00:02:51,560 --> 00:02:56,319
there's no performance<font color="#E5E5E5"> penalty</font>

67
00:02:53,739 --> 00:02:59,420
<font color="#E5E5E5">comparatively to having the compression</font>

68
00:02:56,319 --> 00:03:01,429
<font color="#CCCCCC">the ZFS is also a copy-on-write file</font>

69
00:02:59,420 --> 00:03:03,500
system so it never overrides data in

70
00:03:01,430 --> 00:03:05,540
place it always<font color="#E5E5E5"> writes the updated data</font>

71
00:03:03,500 --> 00:03:08,150
to a different location on disk<font color="#CCCCCC"> and then</font>

72
00:03:05,540 --> 00:03:10,310
updates<font color="#E5E5E5"> the pointers this way if the</font>

73
00:03:08,150 --> 00:03:11,560
<font color="#CCCCCC">system crashes or the power goes out</font><font color="#E5E5E5"> or</font>

74
00:03:10,310 --> 00:03:14,810
something happens to the<font color="#E5E5E5"> file system</font>

75
00:03:11,560 --> 00:03:16,670
<font color="#E5E5E5">when it boots back up</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> finds the</font>

76
00:03:14,810 --> 00:03:18,530
newest version of<font color="#E5E5E5"> the file system where</font>

77
00:03:16,670 --> 00:03:21,160
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> checksums match and mounts that</font>

78
00:03:18,530 --> 00:03:24,049
<font color="#E5E5E5">so you never have to</font><font color="#CCCCCC"> run fsck or</font>

79
00:03:21,160 --> 00:03:27,680
anything<font color="#CCCCCC"> to where the file system could</font>

80
00:03:24,049 --> 00:03:29,690
be damaged<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the reasons it can do</font>

81
00:03:27,680 --> 00:03:31,250
this is because<font color="#CCCCCC"> it's copy-on-write if</font>

82
00:03:29,690 --> 00:03:33,650
you're in the middle<font color="#CCCCCC"> of updating a file</font>

83
00:03:31,250 --> 00:03:35,780
<font color="#E5E5E5">when the system crashes or the power</font>

84
00:03:33,650 --> 00:03:38,030
goes<font color="#CCCCCC"> out you've not</font><font color="#E5E5E5"> overwritten half the</font>

85
00:03:35,780 --> 00:03:39,650
file and<font color="#E5E5E5"> not yet overwritten the second</font>

86
00:03:38,030 --> 00:03:41,780
half<font color="#E5E5E5"> because you're always writing data</font>

87
00:03:39,650 --> 00:03:45,260
to<font color="#CCCCCC"> the new</font><font color="#E5E5E5"> place so the original version</font>

88
00:03:41,780 --> 00:03:47,150
of the file<font color="#E5E5E5"> still exists and then the</font>

89
00:03:45,260 --> 00:03:50,120
last part<font color="#E5E5E5"> is to make administration</font>

90
00:03:47,150 --> 00:03:51,910
easier<font color="#E5E5E5"> each file system has</font><font color="#CCCCCC"> a set</font><font color="#E5E5E5"> of</font>

91
00:03:50,120 --> 00:03:54,380
<font color="#E5E5E5">properties that allow you to control</font>

92
00:03:51,910 --> 00:03:56,450
<font color="#E5E5E5">various things</font><font color="#CCCCCC"> about it like if it uses</font>

93
00:03:54,380 --> 00:03:58,130
<font color="#E5E5E5">compression or not and these are</font>

94
00:03:56,450 --> 00:04:00,230
inherited<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> create child file</font>

95
00:03:58,130 --> 00:04:02,329
systems so it allows you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> very easily</font>

96
00:04:00,230 --> 00:04:04,660
control all the parameters<font color="#CCCCCC"> of the file</font>

97
00:04:02,329 --> 00:04:04,660
<font color="#E5E5E5">system</font>

98
00:04:07,599 --> 00:04:11,200
but the main advantage to being

99
00:04:09,819 --> 00:04:13,589
copy-on-write is that you can have

100
00:04:11,200 --> 00:04:16,329
instantaneous snapshots

101
00:04:13,590 --> 00:04:17,829
unlike snapshots in<font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> there's no</font>

102
00:04:16,329 --> 00:04:22,300
<font color="#E5E5E5">performance penalty to having the</font>

103
00:04:17,829 --> 00:04:24,340
snapshots because all it's doing is not

104
00:04:22,300 --> 00:04:28,389
<font color="#E5E5E5">freeing the data when it writes the new</font>

105
00:04:24,340 --> 00:04:30,520
version<font color="#E5E5E5"> you</font><font color="#CCCCCC"> get very it takes no time to</font>

106
00:04:28,389 --> 00:04:32,949
take<font color="#CCCCCC"> a snapshot</font><font color="#E5E5E5"> and having the snapshots</font>

107
00:04:30,520 --> 00:04:37,750
doesn't impact the<font color="#CCCCCC"> performance of the</font>

108
00:04:32,949 --> 00:04:40,330
<font color="#E5E5E5">file</font><font color="#CCCCCC"> system so this</font><font color="#E5E5E5"> allows you to freeze</font>

109
00:04:37,750 --> 00:04:41,979
this<font color="#CCCCCC"> a file system</font><font color="#E5E5E5"> at a point in time</font>

110
00:04:40,330 --> 00:04:46,240
and be able<font color="#E5E5E5"> to go back</font><font color="#CCCCCC"> and reference it</font>

111
00:04:41,979 --> 00:04:52,120
<font color="#CCCCCC">later or to</font><font color="#E5E5E5"> actually serialize that and</font>

112
00:04:46,240 --> 00:04:54,160
replicate<font color="#CCCCCC"> it to another</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

113
00:04:52,120 --> 00:04:55,599
doesn't<font color="#E5E5E5"> take any</font><font color="#CCCCCC"> additional space until</font>

114
00:04:54,160 --> 00:04:57,310
<font color="#E5E5E5">you</font><font color="#CCCCCC"> actually overwrite a block</font><font color="#E5E5E5"> so if you</font>

115
00:04:55,599 --> 00:04:58,780
take a<font color="#E5E5E5"> snapshot and</font><font color="#CCCCCC"> then don't</font><font color="#E5E5E5"> modify</font>

116
00:04:57,310 --> 00:05:00,759
<font color="#CCCCCC">the</font><font color="#E5E5E5"> file system it won't actually</font>

117
00:04:58,780 --> 00:05:02,679
consume any space and when you do

118
00:05:00,759 --> 00:05:04,660
overwrite files<font color="#E5E5E5"> only</font><font color="#CCCCCC"> the blocks you</font>

119
00:05:02,680 --> 00:05:08,320
actually<font color="#E5E5E5"> overrode will start consuming</font>

120
00:05:04,660 --> 00:05:10,570
space in the<font color="#E5E5E5"> snapshot ah but snapshots</font>

121
00:05:08,320 --> 00:05:12,330
are read-only<font color="#CCCCCC"> but there's another</font>

122
00:05:10,570 --> 00:05:15,190
<font color="#CCCCCC">concept</font><font color="#E5E5E5"> called a clone</font><font color="#CCCCCC"> of a file system</font>

123
00:05:12,330 --> 00:05:17,050
<font color="#E5E5E5">where you can make a writable version</font>

124
00:05:15,190 --> 00:05:18,969
that still<font color="#E5E5E5"> shares space like a snapshot</font>

125
00:05:17,050 --> 00:05:23,409
does which effectively<font color="#E5E5E5"> allows you to</font>

126
00:05:18,970 --> 00:05:26,409
fork<font color="#CCCCCC"> a file system so you can</font><font color="#E5E5E5"> take an</font>

127
00:05:23,409 --> 00:05:29,380
image<font color="#E5E5E5"> of a database or</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> before</font>

128
00:05:26,409 --> 00:05:31,990
<font color="#CCCCCC">you upgrade it but fork it and</font><font color="#E5E5E5"> then have</font>

129
00:05:29,380 --> 00:05:33,909
the<font color="#E5E5E5"> other version</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> useful for</font><font color="#CCCCCC"> doing</font>

130
00:05:31,990 --> 00:05:35,080
development<font color="#E5E5E5"> on databases and so on where</font>

131
00:05:33,909 --> 00:05:37,960
you could snapshot a version<font color="#E5E5E5"> of the</font>

132
00:05:35,080 --> 00:05:39,880
database<font color="#E5E5E5"> test it in development and then</font>

133
00:05:37,960 --> 00:05:42,430
throw it away well the<font color="#E5E5E5"> whole time not</font>

134
00:05:39,880 --> 00:05:44,139
<font color="#E5E5E5">over writing</font><font color="#CCCCCC"> the production copy of the</font>

135
00:05:42,430 --> 00:05:47,490
database<font color="#CCCCCC"> but</font><font color="#E5E5E5"> while sharing blocks so you</font>

136
00:05:44,139 --> 00:05:47,490
<font color="#E5E5E5">don't need twice</font><font color="#CCCCCC"> as much space so</font>

137
00:05:48,210 --> 00:05:54,549
<font color="#CCCCCC">caching</font><font color="#E5E5E5"> computers have multiple</font>

138
00:05:52,870 --> 00:05:57,699
different tiers of<font color="#E5E5E5"> storage right you</font>

139
00:05:54,550 --> 00:06:00,009
have very<font color="#E5E5E5"> high speed storage like the l1</font>

140
00:05:57,699 --> 00:06:03,009
<font color="#CCCCCC">cache that's built into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> CPU and then</font>

141
00:06:00,009 --> 00:06:06,159
you have slightly<font color="#E5E5E5"> slower storage like</font>

142
00:06:03,009 --> 00:06:08,289
memory and<font color="#CCCCCC"> RAM and then now we</font><font color="#E5E5E5"> have</font>

143
00:06:06,159 --> 00:06:09,789
things<font color="#E5E5E5"> like non-volatile memory which</font>

144
00:06:08,289 --> 00:06:11,949
<font color="#CCCCCC">isn't as fast as</font><font color="#E5E5E5"> your volatile memory</font>

145
00:06:09,789 --> 00:06:15,909
<font color="#E5E5E5">but is still faster</font><font color="#CCCCCC"> than your fastest</font>

146
00:06:11,949 --> 00:06:17,680
SSD and then you have<font color="#E5E5E5"> disks that can go</font>

147
00:06:15,909 --> 00:06:20,789
all<font color="#CCCCCC"> the way down to</font><font color="#E5E5E5"> being</font><font color="#CCCCCC"> really slow</font><font color="#E5E5E5"> if</font>

148
00:06:17,680 --> 00:06:20,789
<font color="#E5E5E5">you think like SD cards</font>

149
00:06:20,870 --> 00:06:27,620
so back<font color="#CCCCCC"> in 1946</font><font color="#E5E5E5"> when describing</font>

150
00:06:24,110 --> 00:06:29,210
computers<font color="#CCCCCC"> fine</font><font color="#E5E5E5"> Newman said</font><font color="#CCCCCC"> we're</font>

151
00:06:27,620 --> 00:06:31,190
<font color="#CCCCCC">therefore forced to</font><font color="#E5E5E5"> recognize the</font>

152
00:06:29,210 --> 00:06:34,219
possibility<font color="#CCCCCC"> of constructing a hierarchy</font>

153
00:06:31,190 --> 00:06:36,440
<font color="#CCCCCC">of memories each having</font><font color="#E5E5E5"> greater capacity</font>

154
00:06:34,220 --> 00:06:41,030
than<font color="#E5E5E5"> the pleading one but being less</font>

155
00:06:36,440 --> 00:06:43,940
quickly accessible so the point of<font color="#CCCCCC"> cache</font>

156
00:06:41,030 --> 00:06:46,669
<font color="#E5E5E5">is to use that smaller but faster memory</font>

157
00:06:43,940 --> 00:06:49,460
to<font color="#E5E5E5"> keep the most commonly accessed data</font>

158
00:06:46,670 --> 00:06:53,750
so that<font color="#E5E5E5"> we spend less time going to</font>

159
00:06:49,460 --> 00:06:55,640
<font color="#E5E5E5">slower storage but the cache is just a</font>

160
00:06:53,750 --> 00:06:57,530
copy<font color="#CCCCCC"> so we can discard</font><font color="#E5E5E5"> that data at any</font>

161
00:06:55,640 --> 00:06:58,940
time<font color="#E5E5E5"> unlike on the regular hard drive</font>

162
00:06:57,530 --> 00:07:00,140
<font color="#E5E5E5">where we don't</font><font color="#CCCCCC"> want to just</font><font color="#E5E5E5"> be throwing</font>

163
00:06:58,940 --> 00:07:05,270
<font color="#E5E5E5">away data just because you're not using</font>

164
00:07:00,140 --> 00:07:06,710
it<font color="#CCCCCC"> but as you go</font><font color="#E5E5E5"> into these faster and</font>

165
00:07:05,270 --> 00:07:08,930
faster tiers the amount<font color="#CCCCCC"> of storage you</font>

166
00:07:06,710 --> 00:07:11,599
have gets smaller and<font color="#CCCCCC"> smaller and so you</font>

167
00:07:08,930 --> 00:07:14,540
have to decide which<font color="#E5E5E5"> data you want to</font>

168
00:07:11,600 --> 00:07:18,850
keep in<font color="#E5E5E5"> the cache because that faster</font>

169
00:07:14,540 --> 00:07:21,200
<font color="#E5E5E5">storage</font><font color="#CCCCCC"> is closer</font><font color="#E5E5E5"> to the CPU is precious</font>

170
00:07:18,850 --> 00:07:23,810
<font color="#E5E5E5">so you need some kind</font><font color="#CCCCCC"> of algorithm</font><font color="#E5E5E5"> to</font>

171
00:07:21,200 --> 00:07:25,630
decide which<font color="#E5E5E5"> data you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to keep and</font>

172
00:07:23,810 --> 00:07:31,850
<font color="#E5E5E5">which will be</font><font color="#CCCCCC"> the most effective for you</font>

173
00:07:25,630 --> 00:07:34,400
<font color="#E5E5E5">and so we use the main memory</font><font color="#CCCCCC"> of the</font>

174
00:07:31,850 --> 00:07:36,500
system usually<font color="#CCCCCC"> as the biggest cache and</font>

175
00:07:34,400 --> 00:07:40,489
this is why<font color="#E5E5E5"> most operating systems</font><font color="#CCCCCC"> have</font>

176
00:07:36,500 --> 00:07:43,010
a buffer cache so almost all caches that

177
00:07:40,490 --> 00:07:45,740
<font color="#E5E5E5">are in use today are based on the LRU</font>

178
00:07:43,010 --> 00:07:49,250
<font color="#E5E5E5">algorithm which</font><font color="#CCCCCC"> it means least recently</font>

179
00:07:45,740 --> 00:07:51,350
used<font color="#E5E5E5"> so the cache is basically a list of</font>

180
00:07:49,250 --> 00:07:53,090
the<font color="#E5E5E5"> commonly accessed things every time</font>

181
00:07:51,350 --> 00:07:55,040
you<font color="#E5E5E5"> access something it goes to the top</font>

182
00:07:53,090 --> 00:07:57,080
<font color="#E5E5E5">of the list and once the list is full</font>

183
00:07:55,040 --> 00:08:00,380
<font color="#E5E5E5">you delete items from the bottom to make</font>

184
00:07:57,080 --> 00:08:02,990
room to put a new item<font color="#E5E5E5"> at the top but</font>

185
00:08:00,380 --> 00:08:06,280
<font color="#E5E5E5">that algorithms</font><font color="#CCCCCC"> from 1965 and has stood</font>

186
00:08:02,990 --> 00:08:10,130
<font color="#CCCCCC">up very well</font><font color="#E5E5E5"> but isn't</font><font color="#CCCCCC"> necessarily the</font>

187
00:08:06,280 --> 00:08:14,960
<font color="#E5E5E5">only way to do it so in this diagram you</font>

188
00:08:10,130 --> 00:08:20,570
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see we have in the first step we</font>

189
00:08:14,960 --> 00:08:22,039
have data block a and then but the rest

190
00:08:20,570 --> 00:08:24,140
of<font color="#E5E5E5"> the cache was empty and we've used</font>

191
00:08:22,040 --> 00:08:26,600
the first<font color="#E5E5E5"> block so we've filled up</font><font color="#CCCCCC"> 1/4</font>

192
00:08:24,140 --> 00:08:28,760
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the cache with that and then in the</font>

193
00:08:26,600 --> 00:08:31,700
<font color="#E5E5E5">second step there's data Block B and</font>

194
00:08:28,760 --> 00:08:33,260
then C<font color="#E5E5E5"> and then we</font><font color="#CCCCCC"> keep adding to the</font>

195
00:08:31,700 --> 00:08:35,470
cache<font color="#E5E5E5"> until it's full</font>

196
00:08:33,260 --> 00:08:38,510
so once we've added<font color="#CCCCCC"> D here in step three</font>

197
00:08:35,470 --> 00:08:41,660
the<font color="#CCCCCC"> cash</font><font color="#E5E5E5"> is now full so when we want to</font>

198
00:08:38,510 --> 00:08:44,540
add a fourth<font color="#E5E5E5"> item to the cash we have to</font>

199
00:08:41,659 --> 00:08:47,420
find a victim<font color="#E5E5E5"> to evict from the cash so</font>

200
00:08:44,540 --> 00:08:50,089
we<font color="#E5E5E5"> want to find the item that was used</font>

201
00:08:47,420 --> 00:08:52,120
the<font color="#E5E5E5"> longest to go because it means it's</font>

202
00:08:50,090 --> 00:08:55,940
<font color="#E5E5E5">the one we're least likely to use again</font>

203
00:08:52,120 --> 00:08:59,630
<font color="#E5E5E5">so in this case we overwrite a with</font>

204
00:08:55,940 --> 00:09:01,850
<font color="#CCCCCC">datablock e and then in the next</font><font color="#E5E5E5"> step</font>

205
00:08:59,630 --> 00:09:05,600
<font color="#E5E5E5">what happens is we actually access the</font>

206
00:09:01,850 --> 00:09:06,590
data block<font color="#E5E5E5"> D a second time</font><font color="#CCCCCC"> and so we</font>

207
00:09:05,600 --> 00:09:09,800
refresh it and<font color="#E5E5E5"> give</font><font color="#CCCCCC"> it a newer</font>

208
00:09:06,590 --> 00:09:12,710
generation number<font color="#E5E5E5"> so that when it comes</font>

209
00:09:09,800 --> 00:09:15,620
time to<font color="#CCCCCC"> add data block</font><font color="#E5E5E5"> F we decide to</font>

210
00:09:12,710 --> 00:09:18,800
overwrite again the oldest<font color="#E5E5E5"> item in the</font>

211
00:09:15,620 --> 00:09:21,140
<font color="#E5E5E5">cache and</font><font color="#CCCCCC"> we just keep</font><font color="#E5E5E5"> doing this and</font>

212
00:09:18,800 --> 00:09:23,900
always<font color="#E5E5E5"> keeping the most recently used</font>

213
00:09:21,140 --> 00:09:28,850
data in the cache because it has the

214
00:09:23,900 --> 00:09:30,680
<font color="#E5E5E5">highest</font><font color="#CCCCCC"> chance of being</font><font color="#E5E5E5"> reused again so</font>

215
00:09:28,850 --> 00:09:33,380
there's some pros and cons to<font color="#E5E5E5"> this</font>

216
00:09:30,680 --> 00:09:34,910
simplistic algorithm<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> usually</font>

217
00:09:33,380 --> 00:09:37,189
implemented<font color="#E5E5E5"> as a doubly linked list</font>

218
00:09:34,910 --> 00:09:40,339
<font color="#E5E5E5">which means it's very low overhead and</font>

219
00:09:37,190 --> 00:09:42,320
it's not complicated<font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> you</font>

220
00:09:40,340 --> 00:09:44,060
<font color="#E5E5E5">know some LRU caches are implemented</font>

221
00:09:42,320 --> 00:09:48,080
purely in hardware so it<font color="#E5E5E5"> had</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be very</font>

222
00:09:44,060 --> 00:09:49,790
simple<font color="#CCCCCC"> and the advantage</font><font color="#E5E5E5"> is the locality</font>

223
00:09:48,080 --> 00:09:51,620
principle says that<font color="#CCCCCC"> if a process is</font>

224
00:09:49,790 --> 00:09:53,930
<font color="#E5E5E5">visiting a location in</font><font color="#CCCCCC"> memory it's</font>

225
00:09:51,620 --> 00:09:56,900
likely<font color="#CCCCCC"> to revisit that</font><font color="#E5E5E5"> same location</font><font color="#CCCCCC"> or</font>

226
00:09:53,930 --> 00:09:58,219
somewhere very near<font color="#CCCCCC"> it</font><font color="#E5E5E5"> it's more likely</font>

227
00:09:56,900 --> 00:10:01,030
that<font color="#CCCCCC"> it'll come back</font><font color="#E5E5E5"> to the same place</font>

228
00:09:58,220 --> 00:10:05,350
<font color="#CCCCCC">then to go some any other random</font><font color="#E5E5E5"> place</font>

229
00:10:01,030 --> 00:10:08,390
the downside<font color="#E5E5E5"> to something like LRU is it</font>

230
00:10:05,350 --> 00:10:10,280
somewhat ignores frequency so just

231
00:10:08,390 --> 00:10:12,110
because<font color="#E5E5E5"> I access this data once every</font>

232
00:10:10,280 --> 00:10:13,670
five minutes<font color="#E5E5E5"> it doesn't mean it's more</font>

233
00:10:12,110 --> 00:10:17,330
precious than<font color="#E5E5E5"> this other data that I</font>

234
00:10:13,670 --> 00:10:19,040
access many times a second both of those

235
00:10:17,330 --> 00:10:21,980
will stay<font color="#CCCCCC"> on top less</font><font color="#E5E5E5"> to not be purged</font>

236
00:10:19,040 --> 00:10:23,750
but it doesn't have any<font color="#CCCCCC"> consideration</font>

237
00:10:21,980 --> 00:10:26,780
<font color="#CCCCCC">for how frequently you access it</font><font color="#E5E5E5"> just</font>

238
00:10:23,750 --> 00:10:29,390
<font color="#CCCCCC">how often or</font><font color="#E5E5E5"> how how recently you've</font>

239
00:10:26,780 --> 00:10:32,900
accessed it<font color="#CCCCCC"> the other problem is</font><font color="#E5E5E5"> it</font>

240
00:10:29,390 --> 00:10:34,750
doesn't adapt over<font color="#CCCCCC"> time so it</font><font color="#E5E5E5"> doesn't</font>

241
00:10:32,900 --> 00:10:37,010
look for patterns or anything like<font color="#E5E5E5"> that</font>

242
00:10:34,750 --> 00:10:39,800
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the biggest downside to something</font>

243
00:10:37,010 --> 00:10:42,290
like LRU is it can<font color="#E5E5E5"> be disrupted by</font><font color="#CCCCCC"> a</font>

244
00:10:39,800 --> 00:10:44,359
large scan so if you take a backup<font color="#E5E5E5"> of</font>

245
00:10:42,290 --> 00:10:46,430
<font color="#CCCCCC">your whole hard drive</font><font color="#E5E5E5"> or something</font><font color="#CCCCCC"> then</font>

246
00:10:44,360 --> 00:10:47,550
your small LRU cache is constantly going

247
00:10:46,430 --> 00:10:50,339
to<font color="#E5E5E5"> be filling</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with files</font>

248
00:10:47,550 --> 00:10:52,290
accessing<font color="#CCCCCC"> one-time-only and then the</font>

249
00:10:50,339 --> 00:10:53,850
<font color="#E5E5E5">cache basically becomes useless</font><font color="#CCCCCC"> because</font>

250
00:10:52,290 --> 00:10:55,860
during a<font color="#E5E5E5"> backup you were going to read</font>

251
00:10:53,850 --> 00:11:00,950
every file once and never<font color="#E5E5E5"> read the same</font>

252
00:10:55,860 --> 00:11:03,390
block twice<font color="#CCCCCC"> and so it doesn't</font><font color="#E5E5E5"> consider</font>

253
00:11:00,950 --> 00:11:07,769
<font color="#CCCCCC">recent</font><font color="#E5E5E5"> history to</font><font color="#CCCCCC"> try to improve the</font>

254
00:11:03,390 --> 00:11:10,800
<font color="#E5E5E5">algorithm so there's a second</font><font color="#CCCCCC"> algorithm</font>

255
00:11:07,769 --> 00:11:13,140
that came<font color="#E5E5E5"> around in 1971 called</font><font color="#CCCCCC"> lfyou</font>

256
00:11:10,800 --> 00:11:16,170
which is based on<font color="#E5E5E5"> the frequency that you</font>

257
00:11:13,140 --> 00:11:18,449
<font color="#E5E5E5">use the data rather than the recency so</font>

258
00:11:16,170 --> 00:11:21,329
it's the<font color="#E5E5E5"> same idea except for instead of</font>

259
00:11:18,450 --> 00:11:23,010
keeping the timestamp of<font color="#CCCCCC"> the last time</font>

260
00:11:21,329 --> 00:11:24,689
we<font color="#E5E5E5"> access the data we just keep a</font>

261
00:11:23,010 --> 00:11:28,439
counter of how many times we've accessed

262
00:11:24,690 --> 00:11:31,500
<font color="#CCCCCC">data so each</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> we access a page or a</font>

263
00:11:28,440 --> 00:11:34,230
file<font color="#CCCCCC"> with memory then we increase</font><font color="#E5E5E5"> its</font>

264
00:11:31,500 --> 00:11:37,740
counter and the cache is basically a

265
00:11:34,230 --> 00:11:39,209
sorted list<font color="#CCCCCC"> and when it's time to make</font>

266
00:11:37,740 --> 00:11:42,930
room<font color="#E5E5E5"> in the cache we</font><font color="#CCCCCC"> delete the item</font>

267
00:11:39,209 --> 00:11:45,209
that has the lowest hit count so when<font color="#E5E5E5"> it</font>

268
00:11:42,930 --> 00:11:49,920
caches<font color="#CCCCCC"> four we evict the least</font>

269
00:11:45,209 --> 00:11:52,589
frequently used file so unlike an<font color="#E5E5E5"> LRU</font>

270
00:11:49,920 --> 00:11:54,149
cache this cache is immune to<font color="#CCCCCC"> the</font>

271
00:11:52,589 --> 00:11:57,660
scanning problem<font color="#E5E5E5"> right if you take</font><font color="#CCCCCC"> a</font>

272
00:11:54,149 --> 00:11:59,100
<font color="#CCCCCC">backup or read a whole database</font><font color="#E5E5E5"> because</font>

273
00:11:57,660 --> 00:12:01,170
you<font color="#CCCCCC"> visit</font><font color="#E5E5E5"> each of those blocks once</font>

274
00:11:59,100 --> 00:12:02,730
<font color="#CCCCCC">they're not going to move blocks that</font>

275
00:12:01,170 --> 00:12:08,849
have<font color="#E5E5E5"> been accessed many times out of</font>

276
00:12:02,730 --> 00:12:11,160
your cache<font color="#CCCCCC"> but so</font><font color="#E5E5E5"> that gives it the</font>

277
00:12:08,850 --> 00:12:14,310
<font color="#E5E5E5">advantage of being immune to large scans</font>

278
00:12:11,160 --> 00:12:16,500
<font color="#E5E5E5">and providing very good performance if</font>

279
00:12:14,310 --> 00:12:19,140
you're very frequently accessing the

280
00:12:16,500 --> 00:12:21,180
same data because the<font color="#E5E5E5"> advanced locality</font>

281
00:12:19,140 --> 00:12:23,730
principle says the probability<font color="#E5E5E5"> of</font>

282
00:12:21,180 --> 00:12:25,680
visiting a location increases<font color="#E5E5E5"> the more</font>

283
00:12:23,730 --> 00:12:27,899
times we<font color="#E5E5E5"> visit it so if we visited this</font>

284
00:12:25,680 --> 00:12:29,729
location a thousand times<font color="#CCCCCC"> it's more</font>

285
00:12:27,899 --> 00:12:33,930
<font color="#E5E5E5">likely</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> will visit the thousand one</font>

286
00:12:29,730 --> 00:12:36,240
time then visit some other<font color="#E5E5E5"> location but</font>

287
00:12:33,930 --> 00:12:39,479
because you now have<font color="#CCCCCC"> to keep the list</font>

288
00:12:36,240 --> 00:12:42,600
sorted<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> higher complexity to</font>

289
00:12:39,480 --> 00:12:44,699
implement and<font color="#E5E5E5"> again has the problem of</font>

290
00:12:42,600 --> 00:12:46,709
<font color="#E5E5E5">it doesn't consider recency so just</font>

291
00:12:44,699 --> 00:12:49,709
<font color="#E5E5E5">because I accesses this file a million</font>

292
00:12:46,709 --> 00:12:52,619
times<font color="#E5E5E5"> last week</font><font color="#CCCCCC"> and I haven't</font><font color="#E5E5E5"> touched it</font>

293
00:12:49,709 --> 00:12:55,290
<font color="#E5E5E5">in a week</font><font color="#CCCCCC"> it still has more hits in its</font>

294
00:12:52,620 --> 00:12:57,180
counter<font color="#E5E5E5"> than any new data and so the</font>

295
00:12:55,290 --> 00:12:58,890
cache<font color="#E5E5E5"> doesn't keep up with what you're</font>

296
00:12:57,180 --> 00:13:01,229
actually doing<font color="#E5E5E5"> on your system very</font><font color="#CCCCCC"> well</font>

297
00:12:58,890 --> 00:13:02,990
so it can accumulate<font color="#E5E5E5"> data that you used</font>

298
00:13:01,230 --> 00:13:06,540
to<font color="#CCCCCC"> use a lot but aren't using anymore</font>

299
00:13:02,990 --> 00:13:07,920
<font color="#E5E5E5">and then your cache hit</font><font color="#CCCCCC"> ratio is less</font>

300
00:13:06,540 --> 00:13:14,939
because<font color="#E5E5E5"> it's full of data you're not</font>

301
00:13:07,920 --> 00:13:18,420
even using<font color="#CCCCCC"> anymore so in 2003</font><font color="#E5E5E5"> two</font>

302
00:13:14,940 --> 00:13:20,940
researchers gave a paper at the<font color="#E5E5E5"> UNIX</font>

303
00:13:18,420 --> 00:13:23,579
fast conference called the<font color="#CCCCCC"> adaptive</font>

304
00:13:20,940 --> 00:13:26,400
replacement cache<font color="#E5E5E5"> and the concept here</font>

305
00:13:23,580 --> 00:13:28,890
<font color="#CCCCCC">is to combine the best of the LRU and</font>

306
00:13:26,400 --> 00:13:31,890
<font color="#CCCCCC">lfyou caches together</font><font color="#E5E5E5"> along with</font><font color="#CCCCCC"> some</font>

307
00:13:28,890 --> 00:13:35,460
novel tweaks of their own to make the

308
00:13:31,890 --> 00:13:38,370
most efficient cache possible so you

309
00:13:35,460 --> 00:13:40,440
take your cache of whatever size<font color="#CCCCCC"> the</font>

310
00:13:38,370 --> 00:13:43,260
default<font color="#E5E5E5"> is the variable in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> algorithm</font>

311
00:13:40,440 --> 00:13:45,300
is called C<font color="#E5E5E5"> and then you partition this</font>

312
00:13:43,260 --> 00:13:47,130
<font color="#E5E5E5">by default you start with partitioning</font>

313
00:13:45,300 --> 00:13:48,810
it in half<font color="#E5E5E5"> so you're going to take</font>

314
00:13:47,130 --> 00:13:51,480
<font color="#CCCCCC">however</font><font color="#E5E5E5"> much memory you have to cache</font>

315
00:13:48,810 --> 00:13:55,079
with half of it<font color="#CCCCCC"> we'll keep</font><font color="#E5E5E5"> track</font><font color="#CCCCCC"> of the</font>

316
00:13:51,480 --> 00:13:57,240
most recently<font color="#E5E5E5"> used files because the LRU</font>

317
00:13:55,080 --> 00:14:00,360
algorithm has proven to<font color="#CCCCCC"> be pretty</font><font color="#E5E5E5"> good</font>

318
00:13:57,240 --> 00:14:03,210
and every<font color="#E5E5E5"> OS buffer cache is used</font><font color="#CCCCCC"> in but</font>

319
00:14:00,360 --> 00:14:06,060
the<font color="#E5E5E5"> other half will be the</font><font color="#CCCCCC"> lfyou so that</font>

320
00:14:03,210 --> 00:14:09,180
frequently access files<font color="#E5E5E5"> can stay in the</font>

321
00:14:06,060 --> 00:14:11,819
cache and then in<font color="#CCCCCC"> addition</font><font color="#E5E5E5"> to those two</font>

322
00:14:09,180 --> 00:14:16,949
<font color="#CCCCCC">we also keep</font><font color="#E5E5E5"> ghost lists which I'll</font>

323
00:14:11,820 --> 00:14:19,350
<font color="#CCCCCC">explain more in a second and then each</font>

324
00:14:16,950 --> 00:14:21,600
time<font color="#CCCCCC"> so we have these two caches and</font>

325
00:14:19,350 --> 00:14:23,250
they're full up and then when we have to

326
00:14:21,600 --> 00:14:26,580
remove an item<font color="#E5E5E5"> from the cache</font><font color="#CCCCCC"> to make</font>

327
00:14:23,250 --> 00:14:28,500
room for something<font color="#CCCCCC"> fresher what we do is</font>

328
00:14:26,580 --> 00:14:32,060
we<font color="#E5E5E5"> throw away the data but we keep the</font>

329
00:14:28,500 --> 00:14:34,890
<font color="#E5E5E5">hash key and put it on this ghost list</font>

330
00:14:32,060 --> 00:14:36,540
<font color="#CCCCCC">so we keep track of items that</font><font color="#E5E5E5"> were</font>

331
00:14:34,890 --> 00:14:40,010
<font color="#E5E5E5">recently in the cache but we've thrown</font>

332
00:14:36,540 --> 00:14:40,010
away<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data because the cache was full</font>

333
00:14:40,250 --> 00:14:45,270
so we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> four lists the LRU and</font>

334
00:14:43,290 --> 00:14:47,730
<font color="#E5E5E5">lfyou and each of those also has the</font>

335
00:14:45,270 --> 00:14:50,189
ghost list which doesn't<font color="#CCCCCC"> in any data but</font>

336
00:14:47,730 --> 00:14:52,590
<font color="#CCCCCC">just has a list of the hashes of things</font>

337
00:14:50,190 --> 00:14:56,670
that we've recently evicted from the

338
00:14:52,590 --> 00:14:59,460
cache so if we request<font color="#E5E5E5"> a page and it</font>

339
00:14:56,670 --> 00:15:02,579
happens<font color="#E5E5E5"> to be in the LRU or lfyou cache</font>

340
00:14:59,460 --> 00:15:03,960
<font color="#E5E5E5">then that's a hit</font><font color="#CCCCCC"> we can pull the data</font>

341
00:15:02,580 --> 00:15:06,810
out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> RAM instead of having to go to</font>

342
00:15:03,960 --> 00:15:09,510
the slow disk and the cache has<font color="#E5E5E5"> done</font>

343
00:15:06,810 --> 00:15:12,479
exactly<font color="#E5E5E5"> what his job</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> provide</font>

344
00:15:09,510 --> 00:15:18,270
faster access<font color="#E5E5E5"> to that data</font>

345
00:15:12,480 --> 00:15:20,250
but net<font color="#E5E5E5"> once we have a hit that means</font>

346
00:15:18,270 --> 00:15:22,140
that that files was already in the cache

347
00:15:20,250 --> 00:15:24,870
because<font color="#E5E5E5"> we used it once and we've now</font>

348
00:15:22,140 --> 00:15:28,920
<font color="#CCCCCC">used it a second time</font><font color="#E5E5E5"> so it gets moved</font>

349
00:15:24,870 --> 00:15:30,839
from the the LRU half of the cash to the

350
00:15:28,920 --> 00:15:32,819
<font color="#E5E5E5">lfyou side because it's now been</font>

351
00:15:30,839 --> 00:15:34,470
accessed<font color="#E5E5E5"> more than once</font><font color="#CCCCCC"> so we put it on</font>

352
00:15:32,820 --> 00:15:39,350
the frequently used<font color="#CCCCCC"> list instead</font><font color="#E5E5E5"> of the</font>

353
00:15:34,470 --> 00:15:42,720
recently<font color="#CCCCCC"> used list</font><font color="#E5E5E5"> but if a page was not</font>

354
00:15:39,350 --> 00:15:47,910
on either of those<font color="#CCCCCC"> two lists</font><font color="#E5E5E5"> then we</font>

355
00:15:42,720 --> 00:15:49,110
look<font color="#E5E5E5"> at the ghost list which means if</font>

356
00:15:47,910 --> 00:15:51,029
it's on the ghost list it means<font color="#E5E5E5"> that we</font>

357
00:15:49,110 --> 00:15:54,260
used to be in cash<font color="#E5E5E5"> but our cash wasn't</font>

358
00:15:51,029 --> 00:15:58,470
<font color="#E5E5E5">big enough so we had to throw it away</font>

359
00:15:54,260 --> 00:16:00,839
<font color="#CCCCCC">and so that means if the cash had been</font>

360
00:15:58,470 --> 00:16:02,070
just<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> bigger the thing on</font>

361
00:16:00,839 --> 00:16:04,800
the<font color="#E5E5E5"> ghost list would have</font><font color="#CCCCCC"> been in the</font>

362
00:16:02,070 --> 00:16:06,720
<font color="#CCCCCC">cash and</font><font color="#E5E5E5"> we would have had a hit and so</font>

363
00:16:04,800 --> 00:16:10,649
we use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> information to actually</font>

364
00:16:06,720 --> 00:16:12,350
<font color="#E5E5E5">modify how we split up the</font><font color="#CCCCCC"> cash</font><font color="#E5E5E5"> thanks</font>

365
00:16:10,649 --> 00:16:15,500
<font color="#E5E5E5">by default we're starting with half</font>

366
00:16:12,350 --> 00:16:18,959
recently used<font color="#E5E5E5"> and half frequently used</font>

367
00:16:15,500 --> 00:16:21,420
<font color="#CCCCCC">but if we find out the block we just</font>

368
00:16:18,959 --> 00:16:23,819
tried to<font color="#E5E5E5"> read from the cache used to be</font>

369
00:16:21,420 --> 00:16:25,500
on the<font color="#E5E5E5"> recently</font><font color="#CCCCCC"> used list</font><font color="#E5E5E5"> but we had to</font>

370
00:16:23,820 --> 00:16:27,899
delete it to make room<font color="#CCCCCC"> for something</font>

371
00:16:25,500 --> 00:16:30,270
else we decide that what we'll do is

372
00:16:27,899 --> 00:16:32,910
we'll<font color="#E5E5E5"> make the</font><font color="#CCCCCC"> mru that most recently</font>

373
00:16:30,270 --> 00:16:34,199
<font color="#E5E5E5">used cash slightly bigger stealing some</font>

374
00:16:32,910 --> 00:16:37,589
of his face from the frequently<font color="#CCCCCC"> used</font>

375
00:16:34,200 --> 00:16:39,240
<font color="#CCCCCC">cache and we</font><font color="#E5E5E5"> keep doing this every time</font>

376
00:16:37,589 --> 00:16:40,560
<font color="#CCCCCC">we read a block that would</font><font color="#E5E5E5"> have been in</font>

377
00:16:39,240 --> 00:16:44,279
the<font color="#E5E5E5"> cache if the cache had just been a</font>

378
00:16:40,560 --> 00:16:46,500
<font color="#E5E5E5">little bit bigger</font><font color="#CCCCCC"> so every</font><font color="#E5E5E5"> time we did a</font>

379
00:16:44,279 --> 00:16:47,970
<font color="#E5E5E5">Miss that could have been a hit if the</font>

380
00:16:46,500 --> 00:16:50,220
<font color="#E5E5E5">recently</font><font color="#CCCCCC"> used list was bigger</font>

381
00:16:47,970 --> 00:16:51,810
we steal more from the frequently<font color="#E5E5E5"> used</font>

382
00:16:50,220 --> 00:16:55,890
<font color="#CCCCCC">list and make the recently</font><font color="#E5E5E5"> used list</font>

383
00:16:51,810 --> 00:17:00,630
<font color="#CCCCCC">larger just sliding the slider from 50%</font>

384
00:16:55,890 --> 00:17:02,880
<font color="#CCCCCC">towards 100%</font><font color="#E5E5E5"> but if the hit was</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

385
00:17:00,630 --> 00:17:05,790
frequently<font color="#E5E5E5"> used ghost list then we slide</font>

386
00:17:02,880 --> 00:17:07,890
that slider back the other way and<font color="#CCCCCC"> this</font>

387
00:17:05,790 --> 00:17:11,209
is<font color="#E5E5E5"> what makes the cache adaptive as you</font>

388
00:17:07,890 --> 00:17:13,800
your usage changes on your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> its</font>

389
00:17:11,209 --> 00:17:15,929
decides which cache is more effective

390
00:17:13,800 --> 00:17:17,609
<font color="#E5E5E5">you know if you have a database where</font>

391
00:17:15,929 --> 00:17:19,380
you're using the same<font color="#E5E5E5"> data frequently</font>

392
00:17:17,609 --> 00:17:21,240
<font color="#E5E5E5">the frequently used cache will get</font>

393
00:17:19,380 --> 00:17:24,240
bigger<font color="#E5E5E5"> and give you a better</font><font color="#CCCCCC"> hit rate</font>

394
00:17:21,240 --> 00:17:26,490
but if you vary

395
00:17:24,240 --> 00:17:28,950
don't very often<font color="#E5E5E5"> use the same data</font><font color="#CCCCCC"> over</font>

396
00:17:26,490 --> 00:17:31,559
again<font color="#E5E5E5"> but do use data that you've</font>

397
00:17:28,950 --> 00:17:36,690
recently accessed<font color="#E5E5E5"> then the recently</font><font color="#CCCCCC"> used</font>

398
00:17:31,559 --> 00:17:38,340
list will grow<font color="#E5E5E5"> and this allows the arc</font>

399
00:17:36,690 --> 00:17:41,610
to give you a better<font color="#E5E5E5"> hit rate than</font>

400
00:17:38,340 --> 00:17:44,399
either<font color="#CCCCCC"> an LRU</font><font color="#E5E5E5"> or an</font><font color="#CCCCCC"> LF you</font><font color="#E5E5E5"> cache would</font>

401
00:17:41,610 --> 00:17:46,949
<font color="#E5E5E5">have given you by giving you the hybrid</font>

402
00:17:44,400 --> 00:17:51,870
of both that best suits your<font color="#CCCCCC"> current</font>

403
00:17:46,950 --> 00:17:53,910
needs<font color="#E5E5E5"> so each time</font><font color="#CCCCCC"> we find a block that</font>

404
00:17:51,870 --> 00:17:56,340
<font color="#E5E5E5">could have been in the cache but isn't</font>

405
00:17:53,910 --> 00:17:58,800
we changed the size<font color="#E5E5E5"> of the cache until</font>

406
00:17:56,340 --> 00:18:02,840
we find the perfect<font color="#E5E5E5"> mix of the two types</font>

407
00:17:58,800 --> 00:18:02,840
of cache<font color="#E5E5E5"> that will give you the best hip</font>

408
00:18:05,809 --> 00:18:11,820
but<font color="#CCCCCC"> ZFS doesn't stop there you know you</font>

409
00:18:10,020 --> 00:18:15,090
only have<font color="#E5E5E5"> so much memory in</font><font color="#CCCCCC"> your system</font>

410
00:18:11,820 --> 00:18:16,830
and<font color="#E5E5E5"> sometimes is physically not</font><font color="#CCCCCC"> possible</font>

411
00:18:15,090 --> 00:18:20,300
<font color="#E5E5E5">to</font><font color="#CCCCCC"> install more there's only so many</font>

412
00:18:16,830 --> 00:18:23,370
<font color="#E5E5E5">slots on the motherboard for more</font><font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> so</font>

413
00:18:20,300 --> 00:18:26,010
zetta<font color="#CCCCCC"> FS</font><font color="#E5E5E5"> has a level 2 adapter</font><font color="#CCCCCC"> of</font>

414
00:18:23,370 --> 00:18:28,139
replacement cache<font color="#CCCCCC"> so this allows you</font><font color="#E5E5E5"> to</font>

415
00:18:26,010 --> 00:18:33,300
<font color="#E5E5E5">use a fast storage device like an nvme</font>

416
00:18:28,140 --> 00:18:36,240
<font color="#E5E5E5">or SSD to</font><font color="#CCCCCC"> cache data</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're</font>

417
00:18:33,300 --> 00:18:38,220
running<font color="#E5E5E5"> out of memory so rather than</font>

418
00:18:36,240 --> 00:18:40,410
<font color="#E5E5E5">waiting until it's a boat to</font><font color="#CCCCCC"> take an</font>

419
00:18:38,220 --> 00:18:40,890
item<font color="#CCCCCC"> out of the cache to</font><font color="#E5E5E5"> make room for a</font>

420
00:18:40,410 --> 00:18:44,550
new<font color="#CCCCCC"> one</font>

421
00:18:40,890 --> 00:18:48,110
it<font color="#CCCCCC"> watches the bottom third of</font><font color="#E5E5E5"> that the</font>

422
00:18:44,550 --> 00:18:49,830
two lists and as an item<font color="#E5E5E5"> gets towards</font>

423
00:18:48,110 --> 00:18:52,530
eventually it's going to<font color="#E5E5E5"> get kicked out</font>

424
00:18:49,830 --> 00:18:57,780
of<font color="#CCCCCC"> list</font><font color="#E5E5E5"> we copy it and write it</font><font color="#CCCCCC"> to that</font>

425
00:18:52,530 --> 00:19:00,960
SSD<font color="#E5E5E5"> and then we can remove the data but</font>

426
00:18:57,780 --> 00:19:03,870
keep<font color="#E5E5E5"> again the hash in the cache and</font>

427
00:19:00,960 --> 00:19:05,700
just a pointer saying<font color="#CCCCCC"> this</font><font color="#E5E5E5"> data is now</font>

428
00:19:03,870 --> 00:19:10,320
on this SSD at this address

429
00:19:05,700 --> 00:19:12,990
<font color="#CCCCCC">and it allows us to go</font><font color="#E5E5E5"> from only having</font>

430
00:19:10,320 --> 00:19:18,750
you know hundreds of gigabytes of RAM<font color="#E5E5E5"> to</font>

431
00:19:12,990 --> 00:19:20,640
having terabytes of<font color="#CCCCCC"> level-2 art so it</font>

432
00:19:18,750 --> 00:19:22,290
still<font color="#E5E5E5"> takes a small</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of RAM</font><font color="#CCCCCC"> but it</font>

433
00:19:20,640 --> 00:19:28,230
doesn't take as<font color="#CCCCCC"> much as as buffering the</font>

434
00:19:22,290 --> 00:19:30,360
actual data in memory<font color="#CCCCCC"> ah</font><font color="#E5E5E5"> to avoid the</font>

435
00:19:28,230 --> 00:19:32,880
problem with large scans again where if

436
00:19:30,360 --> 00:19:34,918
you're reading the<font color="#CCCCCC"> entire data set</font><font color="#E5E5E5"> you</font>

437
00:19:32,880 --> 00:19:37,240
don't<font color="#CCCCCC"> want to write copy all the data</font>

438
00:19:34,919 --> 00:19:39,850
you've only used<font color="#CCCCCC"> once</font><font color="#E5E5E5"> saved to the SSD</font>

439
00:19:37,240 --> 00:19:42,520
there's a rate limit on how fast you

440
00:19:39,850 --> 00:19:43,779
write to the SSD<font color="#E5E5E5"> so it won't take</font>

441
00:19:42,520 --> 00:19:45,700
everything that's<font color="#E5E5E5"> about to fall</font><font color="#CCCCCC"> out of</font>

442
00:19:43,779 --> 00:19:49,270
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cache and</font><font color="#E5E5E5"> put it on the</font><font color="#CCCCCC"> SSD it will</font>

443
00:19:45,700 --> 00:19:52,029
only take a of it to try<font color="#E5E5E5"> to give us the</font>

444
00:19:49,270 --> 00:19:53,440
<font color="#E5E5E5">the best chance of keeping the</font><font color="#CCCCCC"> data that</font>

445
00:19:52,029 --> 00:19:54,840
<font color="#E5E5E5">you're actually going to use again on</font>

446
00:19:53,440 --> 00:19:57,789
that SSD

447
00:19:54,840 --> 00:19:59,949
<font color="#E5E5E5">your SSD has limited write cycles it</font>

448
00:19:57,789 --> 00:20:02,860
will only be able<font color="#E5E5E5"> to store so much data</font>

449
00:19:59,950 --> 00:20:07,870
before<font color="#E5E5E5"> it wears out</font><font color="#CCCCCC"> and so we wanted to</font>

450
00:20:02,860 --> 00:20:10,479
put<font color="#CCCCCC"> a</font><font color="#E5E5E5"> limit on that and so with this</font>

451
00:20:07,870 --> 00:20:12,699
we've now made a very large<font color="#E5E5E5"> cache that</font>

452
00:20:10,480 --> 00:20:15,130
optimizes itself based on<font color="#E5E5E5"> our workload</font>

453
00:20:12,700 --> 00:20:22,659
<font color="#E5E5E5">even as</font><font color="#CCCCCC"> that changes over time to get</font>

454
00:20:15,130 --> 00:20:24,429
the best possible cache hit ratio<font color="#CCCCCC"> but it</font>

455
00:20:22,659 --> 00:20:26,590
turned out<font color="#CCCCCC"> even that</font><font color="#E5E5E5"> wasn't always good</font>

456
00:20:24,429 --> 00:20:29,950
<font color="#CCCCCC">enough so one of</font><font color="#E5E5E5"> the companies that</font>

457
00:20:26,590 --> 00:20:32,049
<font color="#E5E5E5">works on ZFS del phix had a customer who</font>

458
00:20:29,950 --> 00:20:35,320
<font color="#CCCCCC">had a database that had</font><font color="#E5E5E5"> grown to about a</font>

459
00:20:32,049 --> 00:20:37,360
terabyte<font color="#CCCCCC"> but they found</font><font color="#E5E5E5"> that as soon as</font>

460
00:20:35,320 --> 00:20:39,668
<font color="#E5E5E5">the database exceeded the</font><font color="#CCCCCC"> amount of cash</font>

461
00:20:37,360 --> 00:20:43,870
that<font color="#CCCCCC"> they had to keep that</font><font color="#E5E5E5"> data in RAM</font>

462
00:20:39,669 --> 00:20:45,520
the performance<font color="#E5E5E5"> got terrible but it</font>

463
00:20:43,870 --> 00:20:47,080
wasn't physically possible to<font color="#E5E5E5"> put more</font>

464
00:20:45,520 --> 00:20:49,090
<font color="#E5E5E5">than seven</font><font color="#CCCCCC"> hundred and sixty eight</font><font color="#E5E5E5"> gigs</font>

465
00:20:47,080 --> 00:20:52,809
<font color="#E5E5E5">of</font><font color="#CCCCCC"> ram in</font><font color="#E5E5E5"> the server it only had so many</font>

466
00:20:49,090 --> 00:20:54,820
<font color="#CCCCCC">slots and so what they came up with</font><font color="#E5E5E5"> was</font>

467
00:20:52,809 --> 00:20:57,879
the compressed adaptive replacement

468
00:20:54,820 --> 00:21:00,279
cache since<font color="#CCCCCC"> Santa Fest is already doing</font>

469
00:20:57,880 --> 00:21:03,130
transparent compression as we write data

470
00:21:00,279 --> 00:21:04,390
to disk<font color="#CCCCCC"> we</font><font color="#E5E5E5"> first compress it and then</font>

471
00:21:03,130 --> 00:21:07,240
<font color="#CCCCCC">store it on the disc</font><font color="#E5E5E5"> in the compressed</font>

472
00:21:04,390 --> 00:21:10,419
form as edifice has an optimization

473
00:21:07,240 --> 00:21:11,620
where if after confessing<font color="#E5E5E5"> it we find</font>

474
00:21:10,419 --> 00:21:14,440
that there's not<font color="#E5E5E5"> a gain of at least</font>

475
00:21:11,620 --> 00:21:15,879
<font color="#E5E5E5">twelve percent</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> actually throw the</font>

476
00:21:14,440 --> 00:21:18,039
compression away and store the data<font color="#E5E5E5"> on</font>

477
00:21:15,880 --> 00:21:19,299
disk<font color="#CCCCCC"> uncompressed</font><font color="#E5E5E5"> so that we won't be</font>

478
00:21:18,039 --> 00:21:22,408
<font color="#CCCCCC">spending all</font><font color="#E5E5E5"> of our time trying</font><font color="#CCCCCC"> to</font>

479
00:21:19,299 --> 00:21:26,220
<font color="#E5E5E5">uncompressed data that barely compressed</font>

480
00:21:22,409 --> 00:21:28,330
but<font color="#E5E5E5"> this means that the data on disk</font><font color="#CCCCCC"> is</font>

481
00:21:26,220 --> 00:21:31,110
almost always compressed especially when

482
00:21:28,330 --> 00:21:33,699
it's a database<font color="#E5E5E5"> because you know if your</font>

483
00:21:31,110 --> 00:21:35,620
database<font color="#E5E5E5"> is full of just text in numbers</font>

484
00:21:33,700 --> 00:21:39,700
<font color="#E5E5E5">and so on it can compress for eight</font>

485
00:21:35,620 --> 00:21:42,340
times to one<font color="#E5E5E5"> and so the way the art</font>

486
00:21:39,700 --> 00:21:43,600
worked before<font color="#E5E5E5"> this new invention we</font>

487
00:21:42,340 --> 00:21:45,789
would read the data off<font color="#CCCCCC"> the disk</font>

488
00:21:43,600 --> 00:21:47,678
<font color="#E5E5E5">decompress it and then catch that</font>

489
00:21:45,789 --> 00:21:49,779
decompressed data the original form of

490
00:21:47,679 --> 00:21:51,700
<font color="#E5E5E5">the data and then when the application</font>

491
00:21:49,779 --> 00:21:53,830
needed<font color="#E5E5E5"> it</font><font color="#CCCCCC"> we would</font>

492
00:21:51,700 --> 00:21:55,600
with the compressed<font color="#E5E5E5"> art optimization we</font>

493
00:21:53,830 --> 00:21:58,330
basically delay the decompression step

494
00:21:55,600 --> 00:22:00,909
so after we read the data<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the disk</font>

495
00:21:58,330 --> 00:22:03,639
<font color="#E5E5E5">restored the compressed version in the</font>

496
00:22:00,910 --> 00:22:06,130
cache<font color="#E5E5E5"> and then when an application</font><font color="#CCCCCC"> wants</font>

497
00:22:03,640 --> 00:22:08,530
<font color="#CCCCCC">the data we take the copy from the cache</font>

498
00:22:06,130 --> 00:22:12,430
<font color="#E5E5E5">and memory decompress it and feed it to</font>

499
00:22:08,530 --> 00:22:15,129
<font color="#E5E5E5">the</font><font color="#CCCCCC"> application so this means</font><font color="#E5E5E5"> when you</font>

500
00:22:12,430 --> 00:22:16,330
<font color="#E5E5E5">access</font><font color="#CCCCCC"> the file</font><font color="#E5E5E5"> many times even</font><font color="#CCCCCC"> though</font>

501
00:22:15,130 --> 00:22:18,310
it's<font color="#E5E5E5"> coming from the cache every time</font>

502
00:22:16,330 --> 00:22:21,820
you're still decompressing it<font color="#E5E5E5"> each of</font>

503
00:22:18,310 --> 00:22:23,379
<font color="#CCCCCC">those times</font><font color="#E5E5E5"> but because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> LZ for</font>

504
00:22:21,820 --> 00:22:26,020
compression that's used by<font color="#CCCCCC"> default for</font>

505
00:22:23,380 --> 00:22:28,510
this<font color="#E5E5E5"> is so fast and can decompress at</font>

506
00:22:26,020 --> 00:22:30,820
<font color="#CCCCCC">two to ten gigabytes per second for</font><font color="#E5E5E5"> core</font>

507
00:22:28,510 --> 00:22:34,000
depending<font color="#E5E5E5"> on the type and speed of your</font>

508
00:22:30,820 --> 00:22:35,320
<font color="#CCCCCC">CPU that's going to be faster than you</font>

509
00:22:34,000 --> 00:22:37,630
probably<font color="#E5E5E5"> could have read off the disk</font>

510
00:22:35,320 --> 00:22:40,689
<font color="#E5E5E5">anyway and so isn't actually going to</font>

511
00:22:37,630 --> 00:22:42,250
introduce<font color="#E5E5E5"> additional latency and storing</font>

512
00:22:40,690 --> 00:22:44,050
the data compress<font color="#E5E5E5"> can actually give you</font>

513
00:22:42,250 --> 00:22:47,920
lower latency<font color="#CCCCCC"> because you're</font><font color="#E5E5E5"> reading</font>

514
00:22:44,050 --> 00:22:50,950
fewer bytes off the disk so<font color="#E5E5E5"> with this</font>

515
00:22:47,920 --> 00:22:52,900
step<font color="#E5E5E5"> we now are storing the data in the</font>

516
00:22:50,950 --> 00:22:57,550
cache in the compressed form where it's

517
00:22:52,900 --> 00:23:00,040
somewhere between<font color="#CCCCCC"> 50% and hundreds</font><font color="#E5E5E5"> of</font>

518
00:22:57,550 --> 00:23:02,290
percent smaller<font color="#E5E5E5"> so now the cache can</font>

519
00:23:00,040 --> 00:23:05,710
hold that much more<font color="#E5E5E5"> data and we can get</font>

520
00:23:02,290 --> 00:23:08,350
<font color="#E5E5E5">that much higher a cache hit ratio</font><font color="#CCCCCC"> ah so</font>

521
00:23:05,710 --> 00:23:12,010
with this change that one terabyte

522
00:23:08,350 --> 00:23:15,790
database now<font color="#CCCCCC"> could fully fit in memory</font>

523
00:23:12,010 --> 00:23:17,200
<font color="#CCCCCC">in only 460 gigs of</font><font color="#E5E5E5"> RAM leaving them a</font>

524
00:23:15,790 --> 00:23:18,970
couple hundred gigs to grow in the

525
00:23:17,200 --> 00:23:20,950
future<font color="#CCCCCC"> and still having</font><font color="#E5E5E5"> a hundred</font>

526
00:23:18,970 --> 00:23:22,270
<font color="#CCCCCC">percent cache hit ratio every time they</font>

527
00:23:20,950 --> 00:23:24,340
wanted<font color="#E5E5E5"> to read any block in their</font>

528
00:23:22,270 --> 00:23:30,580
database it would always come from<font color="#CCCCCC"> the</font>

529
00:23:24,340 --> 00:23:33,280
<font color="#E5E5E5">de cache remember ah there is a slight</font>

530
00:23:30,580 --> 00:23:38,679
<font color="#E5E5E5">optimisation to this as well</font><font color="#CCCCCC"> there's a</font>

531
00:23:33,280 --> 00:23:42,129
second level<font color="#CCCCCC"> cache called the debuff</font>

532
00:23:38,680 --> 00:23:44,620
cache<font color="#E5E5E5"> that will keep commonly</font>

533
00:23:42,130 --> 00:23:46,450
decompressed blocks<font color="#CCCCCC"> basically when you</font>

534
00:23:44,620 --> 00:23:48,250
decompress<font color="#E5E5E5"> a block will keep the</font>

535
00:23:46,450 --> 00:23:51,130
<font color="#E5E5E5">uncompressed version in a very small</font>

536
00:23:48,250 --> 00:23:52,780
buffer in memory so<font color="#E5E5E5"> that we don't end up</font>

537
00:23:51,130 --> 00:23:56,320
decompressing<font color="#CCCCCC"> the same block multiple</font>

538
00:23:52,780 --> 00:23:58,210
times per second so well we can<font color="#CCCCCC"> end up</font>

539
00:23:56,320 --> 00:23:59,800
decompressing it many times<font color="#E5E5E5"> we won't do</font>

540
00:23:58,210 --> 00:24:02,250
it many times per second<font color="#E5E5E5"> because</font><font color="#CCCCCC"> that</font>

541
00:23:59,800 --> 00:24:02,250
would be wasteful

542
00:24:04,570 --> 00:24:13,789
but then even<font color="#E5E5E5"> then the algorithm wasn't</font>

543
00:24:08,960 --> 00:24:17,989
perfect<font color="#CCCCCC"> the other thing that the arc now</font>

544
00:24:13,789 --> 00:24:20,059
considers is metadata<font color="#CCCCCC"> especially in ZFS</font>

545
00:24:17,989 --> 00:24:21,440
where you need to<font color="#E5E5E5"> have things like the</font>

546
00:24:20,059 --> 00:24:23,600
hash of everywhere that one of the

547
00:24:21,440 --> 00:24:25,869
blocks and<font color="#CCCCCC"> the tree</font><font color="#E5E5E5"> of indirect blocks</font>

548
00:24:23,600 --> 00:24:28,248
that make ZFS able to do copy-on-write

549
00:24:25,869 --> 00:24:31,399
<font color="#E5E5E5">means there's a lot of metadata</font><font color="#CCCCCC"> about</font>

550
00:24:28,249 --> 00:24:34,399
each block on disk<font color="#E5E5E5"> and you need that</font>

551
00:24:31,399 --> 00:24:38,119
metadata to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> read files very</font>

552
00:24:34,399 --> 00:24:40,518
quickly<font color="#CCCCCC"> but at the same time you want</font>

553
00:24:38,119 --> 00:24:43,820
your cache to also actually<font color="#E5E5E5"> contain some</font>

554
00:24:40,519 --> 00:24:47,149
data it's so by default<font color="#CCCCCC"> Zetas fest</font>

555
00:24:43,820 --> 00:24:48,649
limits the size<font color="#E5E5E5"> of the amount of</font>

556
00:24:47,149 --> 00:24:52,248
metadata it will<font color="#E5E5E5"> keep in the cache to</font>

557
00:24:48,649 --> 00:24:54,139
<font color="#CCCCCC">one quarter of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cache although you</font>

558
00:24:52,249 --> 00:24:56,690
can tune that depending on your workload

559
00:24:54,139 --> 00:24:59,209
if you have a very large<font color="#CCCCCC"> number of files</font>

560
00:24:56,690 --> 00:25:01,159
and<font color="#E5E5E5"> you scan them frequently</font><font color="#CCCCCC"> you might</font>

561
00:24:59,210 --> 00:25:05,509
actually want<font color="#E5E5E5"> to keep more metadata</font><font color="#CCCCCC"> and</font>

562
00:25:01,159 --> 00:25:07,129
<font color="#CCCCCC">less actual data</font><font color="#E5E5E5"> but in</font><font color="#CCCCCC"> most cases</font><font color="#E5E5E5"> you</font>

563
00:25:05,509 --> 00:25:09,649
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> limit</font><font color="#E5E5E5"> the amount of metadata you</font>

564
00:25:07,129 --> 00:25:12,619
keep in the cache to avoid it starving

565
00:25:09,649 --> 00:25:20,330
of taking all of the cache space<font color="#E5E5E5"> and</font>

566
00:25:12,619 --> 00:25:22,789
leaving none for actual data<font color="#CCCCCC"> compared</font><font color="#E5E5E5"> to</font>

567
00:25:20,330 --> 00:25:26,599
the<font color="#CCCCCC"> original art algorithm described in</font>

568
00:25:22,789 --> 00:25:28,940
the<font color="#E5E5E5"> academic paper ZFS is implementation</font>

569
00:25:26,599 --> 00:25:31,428
<font color="#CCCCCC">had to be a bit different for a</font><font color="#E5E5E5"> number</font>

570
00:25:28,940 --> 00:25:34,629
of<font color="#E5E5E5"> reasons the</font><font color="#CCCCCC"> first one</font><font color="#E5E5E5"> is the size of</font>

571
00:25:31,429 --> 00:25:37,970
the cache is<font color="#CCCCCC"> not fixed</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> a fesses</font><font color="#E5E5E5"> arc</font>

572
00:25:34,629 --> 00:25:40,879
can<font color="#E5E5E5"> be shrunk if the system needs memory</font>

573
00:25:37,970 --> 00:25:42,289
<font color="#CCCCCC">by default ZFS will take a large</font>

574
00:25:40,879 --> 00:25:46,488
fraction of all the<font color="#E5E5E5"> memory on the system</font>

575
00:25:42,289 --> 00:25:47,989
<font color="#CCCCCC">up</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 95 percent</font><font color="#E5E5E5"> but depending on</font><font color="#CCCCCC"> the</font>

576
00:25:46,489 --> 00:25:50,090
machine<font color="#E5E5E5"> if it's your laptop or something</font>

577
00:25:47,989 --> 00:25:51,619
<font color="#E5E5E5">that your browser is</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> taking a</font>

578
00:25:50,090 --> 00:25:53,928
good<font color="#E5E5E5"> chunk of the available memory on</font>

579
00:25:51,619 --> 00:25:55,459
<font color="#CCCCCC">your system</font><font color="#E5E5E5"> and so zetta</font><font color="#CCCCCC"> Fest has the</font>

580
00:25:53,929 --> 00:25:57,619
ability to<font color="#E5E5E5"> shrink its cash and give</font>

581
00:25:55,460 --> 00:26:00,409
memory back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the operating system for</font>

582
00:25:57,619 --> 00:26:02,289
<font color="#E5E5E5">user applications so unlike the original</font>

583
00:26:00,409 --> 00:26:05,210
<font color="#CCCCCC">Ark algorithm described in the paper</font>

584
00:26:02,289 --> 00:26:08,090
<font color="#E5E5E5">this cache is dynamically sized as well</font>

585
00:26:05,210 --> 00:26:10,609
<font color="#E5E5E5">so in</font><font color="#CCCCCC"> addition to changing</font><font color="#E5E5E5"> the the</font>

586
00:26:08,090 --> 00:26:12,619
<font color="#E5E5E5">partition value of the p value of how</font>

587
00:26:10,609 --> 00:26:14,970
much is<font color="#CCCCCC"> for mr</font><font color="#E5E5E5"> you and how much is for m</font>

588
00:26:12,619 --> 00:26:21,570
fu<font color="#E5E5E5"> the actual size of</font><font color="#CCCCCC"> the cache</font>

589
00:26:14,970 --> 00:26:25,169
<font color="#CCCCCC">growing</font><font color="#E5E5E5"> shrink over</font><font color="#CCCCCC"> time and unlike</font><font color="#E5E5E5"> in</font>

590
00:26:21,570 --> 00:26:29,189
<font color="#CCCCCC">the original art paper you can't evict</font>

591
00:26:25,169 --> 00:26:30,270
<font color="#E5E5E5">any data that's in the arc sometimes the</font>

592
00:26:29,190 --> 00:26:32,700
data<font color="#E5E5E5"> that's in the arc is currently</font>

593
00:26:30,270 --> 00:26:34,679
being<font color="#E5E5E5"> used right if you're actually if</font>

594
00:26:32,700 --> 00:26:37,140
someone is<font color="#CCCCCC"> reading the</font><font color="#E5E5E5"> data out of the</font>

595
00:26:34,679 --> 00:26:39,120
<font color="#CCCCCC">arc right now</font><font color="#E5E5E5"> or is locked the buffer</font>

596
00:26:37,140 --> 00:26:40,980
then we can't go free that<font color="#E5E5E5"> one just</font>

597
00:26:39,120 --> 00:26:43,199
<font color="#CCCCCC">because it's the oldest on the</font><font color="#E5E5E5"> list</font><font color="#CCCCCC"> so</font>

598
00:26:40,980 --> 00:26:44,909
the<font color="#E5E5E5"> algorithm in ZFS had to be a bit</font>

599
00:26:43,200 --> 00:26:47,250
<font color="#E5E5E5">smarter to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to deal with</font><font color="#CCCCCC"> the fact</font>

600
00:26:44,909 --> 00:26:50,100
that some blocks will be in use and we

601
00:26:47,250 --> 00:26:51,780
<font color="#E5E5E5">will not be</font><font color="#CCCCCC"> able to Vic Toews ones and</font>

602
00:26:50,100 --> 00:26:54,209
<font color="#E5E5E5">we'll have to evict you know the third</font>

603
00:26:51,780 --> 00:26:57,899
least<font color="#E5E5E5"> frequently used file because the</font>

604
00:26:54,210 --> 00:27:00,020
<font color="#CCCCCC">other two</font><font color="#E5E5E5"> are still</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> use and lastly</font>

605
00:26:57,900 --> 00:27:03,960
<font color="#E5E5E5">compared to the original out algorithm</font>

606
00:27:00,020 --> 00:27:08,280
<font color="#CCCCCC">where all pages in the cache were</font><font color="#E5E5E5"> four</font>

607
00:27:03,960 --> 00:27:11,039
kilobytes the<font color="#CCCCCC"> arc turns that if s is</font>

608
00:27:08,280 --> 00:27:14,280
built out of disk sectors<font color="#E5E5E5"> which can be</font>

609
00:27:11,039 --> 00:27:16,500
<font color="#E5E5E5">anywhere from a 512 byte like a regular</font>

610
00:27:14,280 --> 00:27:19,139
<font color="#E5E5E5">hard</font><font color="#CCCCCC"> drive or the record size instead</font><font color="#E5E5E5"> of</font>

611
00:27:16,500 --> 00:27:22,500
s it goes up to 16<font color="#CCCCCC"> megabytes</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can</font>

612
00:27:19,140 --> 00:27:25,409
have very different<font color="#E5E5E5"> sized objects in the</font>

613
00:27:22,500 --> 00:27:27,539
cache and so<font color="#E5E5E5"> the arc algorithm had to be</font>

614
00:27:25,409 --> 00:27:33,090
a bit more complicated than<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original</font>

615
00:27:27,539 --> 00:27:36,360
one described in<font color="#E5E5E5"> the paper and so when I</font>

616
00:27:33,090 --> 00:27:39,959
talk<font color="#CCCCCC"> about the the compressed cash</font><font color="#E5E5E5"> in</font>

617
00:27:36,360 --> 00:27:42,000
ZFS<font color="#CCCCCC"> I often</font><font color="#E5E5E5"> ask did ask questions about</font>

618
00:27:39,960 --> 00:27:44,100
<font color="#E5E5E5">comparisons to things like compressed</font>

619
00:27:42,000 --> 00:27:45,480
<font color="#E5E5E5">memory and swap cache and so I thought</font>

620
00:27:44,100 --> 00:27:48,990
<font color="#E5E5E5">I'd talk a little bit about the</font>

621
00:27:45,480 --> 00:27:50,730
differences there<font color="#CCCCCC"> so most</font><font color="#E5E5E5"> of the memory</font>

622
00:27:48,990 --> 00:27:53,400
compression schemes like<font color="#E5E5E5"> swap cache that</font>

623
00:27:50,730 --> 00:27:55,320
<font color="#E5E5E5">are out</font><font color="#CCCCCC"> there are generally taking the</font>

624
00:27:53,400 --> 00:27:57,750
idea of<font color="#CCCCCC"> ok when the</font><font color="#E5E5E5"> system is running</font>

625
00:27:55,320 --> 00:27:59,460
<font color="#E5E5E5">low on memory we're going to find some</font>

626
00:27:57,750 --> 00:28:01,799
bit of data<font color="#E5E5E5"> that's in memory</font><font color="#CCCCCC"> that we're</font>

627
00:27:59,460 --> 00:28:04,200
not<font color="#E5E5E5"> using</font><font color="#CCCCCC"> very much</font><font color="#E5E5E5"> and compress it</font><font color="#CCCCCC"> to</font>

628
00:28:01,799 --> 00:28:08,129
free up space<font color="#E5E5E5"> to</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> other stuff in in</font>

629
00:28:04,200 --> 00:28:09,270
memory<font color="#CCCCCC"> the problem with that is when</font>

630
00:28:08,130 --> 00:28:11,039
you're<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the situation where you're</font>

631
00:28:09,270 --> 00:28:14,280
running<font color="#CCCCCC"> low on</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> the last thing you</font>

632
00:28:11,039 --> 00:28:16,140
want<font color="#CCCCCC"> to do is need more</font><font color="#E5E5E5"> memory to run</font>

633
00:28:14,280 --> 00:28:18,389
the compression algorithm<font color="#E5E5E5"> and to be able</font>

634
00:28:16,140 --> 00:28:21,750
<font color="#E5E5E5">to copy the larger data into a smaller</font>

635
00:28:18,390 --> 00:28:23,789
buffer<font color="#E5E5E5"> to compress it</font><font color="#CCCCCC"> so it's really the</font>

636
00:28:21,750 --> 00:28:25,049
<font color="#E5E5E5">worst possible time to</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to compress</font>

637
00:28:23,789 --> 00:28:28,860
memory is when you're<font color="#CCCCCC"> running out of</font>

638
00:28:25,049 --> 00:28:31,220
<font color="#CCCCCC">memory and</font><font color="#E5E5E5"> so it's a problem</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font>

639
00:28:28,860 --> 00:28:33,750
memory compression schemes run into

640
00:28:31,220 --> 00:28:35,549
<font color="#E5E5E5">visually reacting when the system is</font>

641
00:28:33,750 --> 00:28:37,639
already under stress<font color="#E5E5E5"> is only going to</font>

642
00:28:35,549 --> 00:28:40,080
<font color="#E5E5E5">make that stress worse not better</font>

643
00:28:37,639 --> 00:28:41,668
<font color="#E5E5E5">whereas what the compressed</font><font color="#CCCCCC"> art is doing</font>

644
00:28:40,080 --> 00:28:43,019
is taking the data that<font color="#E5E5E5"> was already</font>

645
00:28:41,669 --> 00:28:45,870
compressed when you wrote<font color="#E5E5E5"> it to disk</font>

646
00:28:43,019 --> 00:28:48,620
previously and just<font color="#E5E5E5"> deferring the</font>

647
00:28:45,870 --> 00:28:52,018
decompression step until later and so

648
00:28:48,620 --> 00:28:53,399
the confessed<font color="#E5E5E5"> art is only doing</font>

649
00:28:52,019 --> 00:28:56,070
compression as you're writing data to

650
00:28:53,399 --> 00:29:02,279
<font color="#E5E5E5">disk</font><font color="#CCCCCC"> rather than every time you're</font>

651
00:28:56,070 --> 00:29:04,500
<font color="#CCCCCC">modifying memory so compared to swap -</font>

652
00:29:02,279 --> 00:29:06,380
compress art is<font color="#CCCCCC"> just taking advantage of</font>

653
00:29:04,500 --> 00:29:08,610
<font color="#E5E5E5">the compression you've already done and</font>

654
00:29:06,380 --> 00:29:11,820
using decompression which<font color="#E5E5E5"> is much faster</font>

655
00:29:08,610 --> 00:29:13,019
<font color="#CCCCCC">and cheaper than</font><font color="#E5E5E5"> compression to optimize</font>

656
00:29:11,820 --> 00:29:15,799
the<font color="#E5E5E5"> amount of memory that you have</font>

657
00:29:13,019 --> 00:29:18,659
available<font color="#CCCCCC"> for caching because the game</font>

658
00:29:15,799 --> 00:29:20,580
free memory<font color="#E5E5E5"> is wasted memory if you have</font>

659
00:29:18,659 --> 00:29:22,710
free memory you might<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well use it for</font>

660
00:29:20,580 --> 00:29:24,299
cash<font color="#CCCCCC"> because if you end up</font><font color="#E5E5E5"> needing that</font>

661
00:29:22,710 --> 00:29:27,090
memory<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> always kick the things</font>

662
00:29:24,299 --> 00:29:28,950
you know<font color="#E5E5E5"> shrink the</font><font color="#CCCCCC"> cash to free</font><font color="#E5E5E5"> up that</font>

663
00:29:27,090 --> 00:29:31,559
memory<font color="#E5E5E5"> again and use it for the user</font>

664
00:29:28,950 --> 00:29:33,299
application<font color="#E5E5E5"> but in the meantime the</font>

665
00:29:31,559 --> 00:29:35,129
larger the cache is the higher<font color="#E5E5E5"> the</font>

666
00:29:33,299 --> 00:29:37,950
chances that<font color="#E5E5E5"> the data you're trying</font><font color="#CCCCCC"> to</font>

667
00:29:35,130 --> 00:29:44,639
be read<font color="#E5E5E5"> will be in memory instead of on</font>

668
00:29:37,950 --> 00:29:46,610
the<font color="#CCCCCC"> slow disk and so the last</font><font color="#E5E5E5"> thing I</font>

669
00:29:44,639 --> 00:29:50,010
want to<font color="#CCCCCC"> talk about a little</font><font color="#E5E5E5"> bit is</font>

670
00:29:46,610 --> 00:29:53,549
tuning in ZFS there's a lot of different

671
00:29:50,010 --> 00:29:55,860
<font color="#E5E5E5">knobs you</font><font color="#CCCCCC"> can tweak but</font><font color="#E5E5E5"> depending what</font>

672
00:29:53,549 --> 00:29:58,440
you're using is NFS<font color="#E5E5E5"> for there's a couple</font>

673
00:29:55,860 --> 00:30:00,408
<font color="#E5E5E5">of highlights</font><font color="#CCCCCC"> I'd like to point out so</font>

674
00:29:58,440 --> 00:30:02,429
if you're<font color="#CCCCCC"> building something that's</font>

675
00:30:00,409 --> 00:30:04,559
specifically dedicated<font color="#E5E5E5"> to</font><font color="#CCCCCC"> being a file</font>

676
00:30:02,429 --> 00:30:07,049
server<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> basically the defaults</font>

677
00:30:04,559 --> 00:30:09,210
instead of s then<font color="#E5E5E5"> you want to use as</font>

678
00:30:07,049 --> 00:30:11,190
large an<font color="#E5E5E5"> arc as possible if it's a file</font>

679
00:30:09,210 --> 00:30:12,600
server it's quite unlikely to be running

680
00:30:11,190 --> 00:30:14,070
<font color="#E5E5E5">a bunch of other applications</font><font color="#CCCCCC"> that</font>

681
00:30:12,600 --> 00:30:16,168
<font color="#E5E5E5">you're not going to have web browsers</font>

682
00:30:14,070 --> 00:30:17,760
<font color="#E5E5E5">and databases running on this</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> so</font>

683
00:30:16,169 --> 00:30:21,240
you'll be<font color="#CCCCCC"> able to use almost</font><font color="#E5E5E5"> all of the</font>

684
00:30:17,760 --> 00:30:23,908
memory for<font color="#E5E5E5"> the cache but if you have</font>

685
00:30:21,240 --> 00:30:25,620
very very<font color="#E5E5E5"> large numbers of files then</font>

686
00:30:23,909 --> 00:30:30,090
increasing the size of<font color="#E5E5E5"> the metadata</font>

687
00:30:25,620 --> 00:30:32,580
cache from<font color="#CCCCCC"> 25%</font><font color="#E5E5E5"> to say</font><font color="#CCCCCC"> 50%</font><font color="#E5E5E5"> will mean</font><font color="#CCCCCC"> that</font>

688
00:30:30,090 --> 00:30:35,010
<font color="#CCCCCC">you can cache the metadata of those</font>

689
00:30:32,580 --> 00:30:37,139
files more and it means<font color="#E5E5E5"> doing things</font>

690
00:30:35,010 --> 00:30:39,240
<font color="#CCCCCC">like directory searches or trying to run</font>

691
00:30:37,139 --> 00:30:41,668
<font color="#E5E5E5">our sink on large directories will be</font>

692
00:30:39,240 --> 00:30:42,350
much faster<font color="#E5E5E5"> because the metadata will</font>

693
00:30:41,669 --> 00:30:44,750
all

694
00:30:42,350 --> 00:30:47,600
in memory<font color="#E5E5E5"> and with the compression the</font>

695
00:30:44,750 --> 00:30:50,240
<font color="#E5E5E5">metadata confesses extremely well and</font>

696
00:30:47,600 --> 00:30:53,360
you'll see<font color="#E5E5E5"> compression</font><font color="#CCCCCC"> races</font><font color="#E5E5E5"> of three or</font>

697
00:30:50,240 --> 00:30:56,470
<font color="#E5E5E5">four to one</font><font color="#CCCCCC"> and so you can fit a lot of</font>

698
00:30:53,360 --> 00:30:59,508
metadata<font color="#E5E5E5"> in not that much memory and</font>

699
00:30:56,470 --> 00:31:00,769
optionally<font color="#E5E5E5"> if you have a working set</font>

700
00:30:59,509 --> 00:31:03,230
that's larger than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> amount of memory</font>

701
00:31:00,769 --> 00:31:06,830
<font color="#E5E5E5">you have for the cache then you can</font>

702
00:31:03,230 --> 00:31:09,860
consider the l2 are using an SSD or<font color="#E5E5E5"> nvme</font>

703
00:31:06,830 --> 00:31:13,100
<font color="#E5E5E5">or</font><font color="#CCCCCC"> nvm device to keep commonly used</font>

704
00:31:09,860 --> 00:31:14,209
files<font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little faster than the</font>

705
00:31:13,100 --> 00:31:17,600
spinning hard<font color="#CCCCCC"> drive you might be using</font>

706
00:31:14,210 --> 00:31:22,610
<font color="#E5E5E5">but that's maybe not as cheap as buying</font>

707
00:31:17,600 --> 00:31:24,049
terabytes of<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> but if you're</font><font color="#CCCCCC"> doing</font>

708
00:31:22,610 --> 00:31:26,840
<font color="#E5E5E5">something like block storage if you're</font>

709
00:31:24,049 --> 00:31:29,330
going<font color="#E5E5E5"> to do the NDB or I scuzzy</font><font color="#CCCCCC"> like the</font>

710
00:31:26,840 --> 00:31:30,769
previous<font color="#CCCCCC"> talk was talking about</font><font color="#E5E5E5"> again</font>

711
00:31:29,330 --> 00:31:34,009
<font color="#CCCCCC">you probably want to use most of</font><font color="#E5E5E5"> the</font>

712
00:31:30,769 --> 00:31:35,600
<font color="#E5E5E5">memory on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> for caching especially if</font>

713
00:31:34,009 --> 00:31:38,960
you're<font color="#CCCCCC"> backing VMware or</font><font color="#E5E5E5"> something like</font>

714
00:31:35,600 --> 00:31:40,959
<font color="#E5E5E5">that</font><font color="#CCCCCC"> or Zen</font><font color="#E5E5E5"> but one of the biggest</font>

715
00:31:38,960 --> 00:31:43,669
<font color="#E5E5E5">considerations is the block size</font>

716
00:31:40,960 --> 00:31:46,610
<font color="#CCCCCC">especially when you're using the block</font>

717
00:31:43,669 --> 00:31:48,710
device<font color="#E5E5E5"> you have to match it</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> the</font>

718
00:31:46,610 --> 00:31:52,219
layout of<font color="#E5E5E5"> your disks to make sure you</font>

719
00:31:48,710 --> 00:31:54,350
<font color="#E5E5E5">don't use a lot</font><font color="#CCCCCC"> of padding or have read</font>

720
00:31:52,220 --> 00:31:56,720
modify write cycles<font color="#E5E5E5"> if you're using a</font>

721
00:31:54,350 --> 00:31:59,299
<font color="#E5E5E5">very large virtual sector size on the</font>

722
00:31:56,720 --> 00:32:02,269
block<font color="#E5E5E5"> storage but the guest OS inside</font>

723
00:31:59,299 --> 00:32:06,470
the VM<font color="#E5E5E5"> expects to be using you know 512</font>

724
00:32:02,269 --> 00:32:09,799
or 4k sectors then you end up reading<font color="#E5E5E5"> a</font>

725
00:32:06,470 --> 00:32:10,820
32 K block modifying the middle of it

726
00:32:09,799 --> 00:32:15,799
and<font color="#E5E5E5"> then having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write that whole</font>

727
00:32:10,820 --> 00:32:17,178
<font color="#E5E5E5">block out again</font><font color="#CCCCCC"> for databases there's</font>

728
00:32:15,799 --> 00:32:20,529
actually two<font color="#E5E5E5"> different approaches</font>

729
00:32:17,179 --> 00:32:22,669
<font color="#E5E5E5">depending on your workload the</font>

730
00:32:20,529 --> 00:32:25,629
previously the the recommended way to<font color="#E5E5E5"> do</font>

731
00:32:22,669 --> 00:32:30,019
it<font color="#E5E5E5"> was to keep the</font><font color="#CCCCCC"> arc cache quite</font><font color="#E5E5E5"> small</font>

732
00:32:25,629 --> 00:32:32,539
<font color="#CCCCCC">or even by using the per file system</font>

733
00:32:30,019 --> 00:32:35,210
parameters<font color="#CCCCCC"> caching only metadata and not</font>

734
00:32:32,539 --> 00:32:38,269
actually caching the<font color="#E5E5E5"> data and then using</font>

735
00:32:35,210 --> 00:32:41,330
the databases buffer cache like Mario DB

736
00:32:38,269 --> 00:32:42,950
or Postgres would use and have the

737
00:32:41,330 --> 00:32:45,918
database<font color="#E5E5E5"> take care of the caching</font>

738
00:32:42,950 --> 00:32:47,509
<font color="#CCCCCC">because it has more knowledge about the</font>

739
00:32:45,919 --> 00:32:49,879
rows or whatever in your<font color="#CCCCCC"> database and</font>

740
00:32:47,509 --> 00:32:54,750
what's in use<font color="#E5E5E5"> and what's not then the</font>

741
00:32:49,879 --> 00:32:58,530
file system is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to because it will</font>

742
00:32:54,750 --> 00:33:02,640
understand your usage better however

743
00:32:58,530 --> 00:33:05,190
once the compressed<font color="#CCCCCC"> ark was invented now</font>

744
00:33:02,640 --> 00:33:08,159
you have the<font color="#E5E5E5"> advantage of if the</font>

745
00:33:05,190 --> 00:33:11,400
compression<font color="#CCCCCC"> on the cash is going to be</font>

746
00:33:08,159 --> 00:33:13,080
great enough<font color="#CCCCCC"> that having that much</font>

747
00:33:11,400 --> 00:33:15,720
<font color="#E5E5E5">larger of a</font><font color="#CCCCCC"> cash is actually going to be</font>

748
00:33:13,080 --> 00:33:18,178
aware you<font color="#CCCCCC"> might instead decide to have a</font>

749
00:33:15,720 --> 00:33:20,039
medium<font color="#E5E5E5"> or large</font><font color="#CCCCCC"> arc and keep the</font>

750
00:33:18,179 --> 00:33:22,830
databases<font color="#E5E5E5"> but for cash quite small and</font>

751
00:33:20,039 --> 00:33:26,400
rely on ZFS to do the caching<font color="#E5E5E5"> because</font>

752
00:33:22,830 --> 00:33:29,030
<font color="#E5E5E5">with compression they could</font><font color="#CCCCCC"> cache two or</font>

753
00:33:26,400 --> 00:33:34,049
<font color="#CCCCCC">four times as much data than the</font>

754
00:33:29,030 --> 00:33:37,260
<font color="#E5E5E5">databases buffer cache because</font><font color="#CCCCCC"> of its</font>

755
00:33:34,049 --> 00:33:39,120
higher cache hit ratio and lastly if

756
00:33:37,260 --> 00:33:41,100
you're<font color="#E5E5E5"> going to run VMs on the machine</font>

757
00:33:39,120 --> 00:33:44,789
co-resident with ZFS for your

758
00:33:41,100 --> 00:33:46,168
hyper-converged type setup then you

759
00:33:44,789 --> 00:33:48,299
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> want a relatively small arc</font>

760
00:33:46,169 --> 00:33:51,240
because it's<font color="#E5E5E5"> likely you're giving most</font>

761
00:33:48,299 --> 00:33:54,179
of the RAM on<font color="#CCCCCC"> the hypervisor to the</font>

762
00:33:51,240 --> 00:33:56,190
individual VMs and if you have ZFS

763
00:33:54,179 --> 00:33:58,830
<font color="#E5E5E5">trying to use as much RAM as it can and</font>

764
00:33:56,190 --> 00:34:00,750
then<font color="#E5E5E5"> having to give some back for the</font>

765
00:33:58,830 --> 00:34:03,990
guest and then fighting<font color="#E5E5E5"> back and</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> I</font>

766
00:34:00,750 --> 00:34:06,450
can create more contention and it's less

767
00:34:03,990 --> 00:34:09,330
<font color="#E5E5E5">good that way so it in that case it</font>

768
00:34:06,450 --> 00:34:11,460
probably<font color="#E5E5E5"> makes</font><font color="#CCCCCC"> sense to have a</font><font color="#E5E5E5"> specific</font>

769
00:34:09,330 --> 00:34:15,569
upper limit set on the size of the<font color="#E5E5E5"> zetas</font>

770
00:34:11,460 --> 00:34:17,429
<font color="#CCCCCC">fest cache and dealing with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font>

771
00:34:15,570 --> 00:34:21,149
other problem you can run into<font color="#E5E5E5"> is double</font>

772
00:34:17,429 --> 00:34:23,550
caching<font color="#CCCCCC"> you know your caching the blocks</font>

773
00:34:21,149 --> 00:34:24,179
in<font color="#CCCCCC"> the arc on the host for the</font>

774
00:34:23,550 --> 00:34:27,149
<font color="#E5E5E5">hypervisor</font>

775
00:34:24,179 --> 00:34:29,940
but then the OS inside the guest is

776
00:34:27,149 --> 00:34:32,129
maybe running ZFS or maybe<font color="#E5E5E5"> not but using</font>

777
00:34:29,940 --> 00:34:34,379
the OS buffer cache and ends<font color="#E5E5E5"> up caching</font>

778
00:34:32,129 --> 00:34:36,899
that same<font color="#E5E5E5"> data</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> now you're keeping</font>

779
00:34:34,379 --> 00:34:39,929
that data<font color="#E5E5E5"> in RAM in two places which</font>

780
00:34:36,899 --> 00:34:47,549
<font color="#E5E5E5">obviously isn't as efficient as keeping</font>

781
00:34:39,929 --> 00:34:49,260
it in only one place so now<font color="#E5E5E5"> I</font><font color="#CCCCCC"> would take</font>

782
00:34:47,550 --> 00:34:52,369
some<font color="#CCCCCC"> questions for</font><font color="#E5E5E5"> a bit and then</font><font color="#CCCCCC"> we'll</font>

783
00:34:49,260 --> 00:34:52,369
see what<font color="#E5E5E5"> else we need to talk</font>

784
00:34:52,710 --> 00:35:06,309
anybody have questions<font color="#CCCCCC"> hey how much</font>

785
00:35:04,390 --> 00:35:10,240
<font color="#E5E5E5">would you recommend is that</font><font color="#CCCCCC"> of his file</font>

786
00:35:06,309 --> 00:35:13,599
system to desktop users<font color="#E5E5E5"> sorry it is it</font>

787
00:35:10,240 --> 00:35:17,500
<font color="#CCCCCC">is edifice applicable at</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> desktop</font>

788
00:35:13,599 --> 00:35:19,180
users yes<font color="#CCCCCC"> I'm giving a talk that will</font>

789
00:35:17,500 --> 00:35:21,430
make a<font color="#E5E5E5"> lot more sense for that at</font><font color="#CCCCCC"> 5</font>

790
00:35:19,180 --> 00:35:25,899
o'clock<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the BSD dev room but the</font>

791
00:35:21,430 --> 00:35:27,879
reason<font color="#E5E5E5"> I runs NFS on my laptop</font><font color="#CCCCCC"> is for a</font>

792
00:35:25,900 --> 00:35:29,380
feature we call boot environments<font color="#E5E5E5"> being</font>

793
00:35:27,880 --> 00:35:32,980
<font color="#CCCCCC">able to snapshot</font>

794
00:35:29,380 --> 00:35:34,839
the file system<font color="#CCCCCC"> before I upgrade my</font>

795
00:35:32,980 --> 00:35:37,540
packages<font color="#E5E5E5"> or upgrade to</font><font color="#CCCCCC"> a newer version</font>

796
00:35:34,839 --> 00:35:40,599
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the OS means that if it goes wrong I</font>

797
00:35:37,540 --> 00:35:43,240
<font color="#CCCCCC">can just roll it back so for</font><font color="#E5E5E5"> example I</font>

798
00:35:40,599 --> 00:35:45,099
updated the<font color="#E5E5E5"> software on my</font><font color="#CCCCCC"> laptop and</font>

799
00:35:43,240 --> 00:35:47,740
<font color="#E5E5E5">then I came</font><font color="#CCCCCC"> to go do my presentation and</font>

800
00:35:45,099 --> 00:35:49,990
<font color="#E5E5E5">then it didn't work</font><font color="#CCCCCC"> I could just reboot</font>

801
00:35:47,740 --> 00:35:53,200
<font color="#E5E5E5">select an older version of</font><font color="#CCCCCC"> the OS from</font>

802
00:35:49,990 --> 00:35:55,089
the<font color="#E5E5E5"> freebsd boot menu based on keeping</font>

803
00:35:53,200 --> 00:35:57,868
<font color="#CCCCCC">those older versions as different set of</font>

804
00:35:55,089 --> 00:36:01,089
<font color="#CCCCCC">s file systems and just instantly</font><font color="#E5E5E5"> revert</font>

805
00:35:57,869 --> 00:36:02,829
to an older version of<font color="#E5E5E5"> the OS but my</font>

806
00:36:01,089 --> 00:36:05,078
home directory is a separate file system

807
00:36:02,829 --> 00:36:06,520
and<font color="#CCCCCC"> so it didn't go back in time so my</font>

808
00:36:05,079 --> 00:36:11,079
<font color="#E5E5E5">slides were still on</font><font color="#CCCCCC"> the laptop even</font>

809
00:36:06,520 --> 00:36:15,690
<font color="#CCCCCC">when I reverted the OS so yes I find it</font>

810
00:36:11,079 --> 00:36:15,690
extremely useful<font color="#CCCCCC"> on desktops and laptops</font>

811
00:36:22,530 --> 00:36:27,780
<font color="#E5E5E5">I perfectly understand how the</font>

812
00:36:25,140 --> 00:36:30,600
compressed<font color="#CCCCCC"> cash works</font><font color="#E5E5E5"> when an</font>

813
00:36:27,780 --> 00:36:35,370
application uses reach to read from a

814
00:36:30,600 --> 00:36:37,799
file<font color="#CCCCCC"> but how does the</font><font color="#E5E5E5"> compressed cash</font>

815
00:36:35,370 --> 00:36:41,009
deal with applications that<font color="#E5E5E5"> try to</font>

816
00:36:37,800 --> 00:36:44,700
memory map use huge ranges or files<font color="#E5E5E5"> to</font>

817
00:36:41,010 --> 00:36:47,670
access<font color="#E5E5E5"> it directly</font><font color="#CCCCCC"> so when um map the</font>

818
00:36:44,700 --> 00:36:50,609
file<font color="#E5E5E5"> it will deal with</font><font color="#CCCCCC"> the page faults</font>

819
00:36:47,670 --> 00:36:55,200
<font color="#E5E5E5">individually so when you go to read the</font>

820
00:36:50,610 --> 00:36:57,330
block it will copy it<font color="#E5E5E5"> decompress it and</font>

821
00:36:55,200 --> 00:36:58,980
<font color="#E5E5E5">write that version into a different</font>

822
00:36:57,330 --> 00:37:02,040
<font color="#E5E5E5">region</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> memory where the</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> map will be</font>

823
00:36:58,980 --> 00:37:02,580
<font color="#E5E5E5">backed by</font><font color="#CCCCCC"> ah so just as individual pages</font>

824
00:37:02,040 --> 00:37:04,050
fault

825
00:37:02,580 --> 00:37:05,670
when you're trying<font color="#E5E5E5"> to use them nmap</font><font color="#CCCCCC"> the</font>

826
00:37:04,050 --> 00:37:07,020
first time you try to<font color="#E5E5E5"> read them</font><font color="#CCCCCC"> that</font>

827
00:37:05,670 --> 00:37:09,090
will get the<font color="#E5E5E5"> data from the arc</font>

828
00:37:07,020 --> 00:37:19,470
decompress it<font color="#E5E5E5"> and put it there so that</font>

829
00:37:09,090 --> 00:37:20,730
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can retrieve it yes yes nmap is a</font>

830
00:37:19,470 --> 00:37:24,330
case where you<font color="#E5E5E5"> can end up</font><font color="#CCCCCC"> with double</font>

831
00:37:20,730 --> 00:37:26,510
cashing in ZFS<font color="#E5E5E5"> even without the</font>

832
00:37:24,330 --> 00:37:29,670
compression actually because<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> way</font>

833
00:37:26,510 --> 00:37:32,220
the compression or the way<font color="#CCCCCC"> M map</font>

834
00:37:29,670 --> 00:37:35,220
interoperates with set of s because that

835
00:37:32,220 --> 00:37:38,370
FS<font color="#E5E5E5"> the data you have</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the arc needs to</font>

836
00:37:35,220 --> 00:37:40,109
be<font color="#E5E5E5"> read only</font><font color="#CCCCCC"> if you write new data it</font>

837
00:37:38,370 --> 00:37:41,310
goes to anonymous buffers<font color="#CCCCCC"> that then get</font>

838
00:37:40,110 --> 00:37:45,150
compressed<font color="#E5E5E5"> and then stored in the arc</font>

839
00:37:41,310 --> 00:37:49,860
separately<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> M map instead of s</font><font color="#CCCCCC"> or</font>

840
00:37:45,150 --> 00:37:51,930
<font color="#E5E5E5">not they don't use the same</font><font color="#CCCCCC"> buffer cache</font>

841
00:37:49,860 --> 00:37:55,470
and so<font color="#CCCCCC"> you do get some double caching</font>

842
00:37:51,930 --> 00:37:58,620
there yes<font color="#CCCCCC"> okay so I think you refer to</font>

843
00:37:55,470 --> 00:38:01,799
as as<font color="#CCCCCC"> DS for slope devices</font><font color="#E5E5E5"> so for</font><font color="#CCCCCC"> l2 arc</font>

844
00:37:58,620 --> 00:38:03,779
yes and you said<font color="#E5E5E5"> that they are varying</font>

845
00:38:01,800 --> 00:38:06,270
out which is obviously true but is<font color="#E5E5E5"> there</font>

846
00:38:03,780 --> 00:38:09,150
also some optimization for other memory

847
00:38:06,270 --> 00:38:11,310
technologies like 3d xpoint for example

848
00:38:09,150 --> 00:38:13,920
which does<font color="#E5E5E5"> not bear out</font><font color="#CCCCCC"> that fast</font><font color="#E5E5E5"> and</font>

849
00:38:11,310 --> 00:38:15,990
you can acquire out of petabytes<font color="#E5E5E5"> so</font>

850
00:38:13,920 --> 00:38:18,870
there<font color="#E5E5E5"> are two tunable</font><font color="#CCCCCC"> zhh for that the</font>

851
00:38:15,990 --> 00:38:20,609
first one sets<font color="#E5E5E5"> how many megabytes per</font>

852
00:38:18,870 --> 00:38:22,529
second you might want to write to the

853
00:38:20,610 --> 00:38:27,240
device<font color="#E5E5E5"> and then there's a second one</font>

854
00:38:22,530 --> 00:38:29,430
<font color="#E5E5E5">called the boost which is since starting</font>

855
00:38:27,240 --> 00:38:30,870
up the device<font color="#E5E5E5"> hasn't ever been full yet</font>

856
00:38:29,430 --> 00:38:33,029
then the boo

857
00:38:30,870 --> 00:38:35,819
<font color="#E5E5E5">amount of megabytes per second is added</font>

858
00:38:33,030 --> 00:38:37,980
to<font color="#E5E5E5"> the limit</font><font color="#CCCCCC"> so by</font><font color="#E5E5E5"> default if it's only</font>

859
00:38:35,820 --> 00:38:41,190
a<font color="#CCCCCC"> write say 20 megabytes per second</font><font color="#E5E5E5"> out</font>

860
00:38:37,980 --> 00:38:43,710
to the SSD<font color="#E5E5E5"> but we're just</font><font color="#CCCCCC"> freshly booted</font>

861
00:38:41,190 --> 00:38:45,510
in the SSD<font color="#E5E5E5"> has never been fully yet</font><font color="#CCCCCC"> then</font>

862
00:38:43,710 --> 00:38:47,370
we might add a second 20 megabytes a

863
00:38:45,510 --> 00:38:48,930
second to that so that<font color="#CCCCCC"> we fill it up at</font>

864
00:38:47,370 --> 00:38:52,200
<font color="#E5E5E5">40 megabytes a second until it's full</font>

865
00:38:48,930 --> 00:38:54,629
and<font color="#E5E5E5"> then switch into a lower speed</font><font color="#CCCCCC"> and</font>

866
00:38:52,200 --> 00:38:56,339
so for if you're using a 3d crosspoint

867
00:38:54,630 --> 00:38:58,200
<font color="#CCCCCC">or opt in or something you</font><font color="#E5E5E5"> might just</font>

868
00:38:56,340 --> 00:39:00,470
decide to<font color="#CCCCCC"> add a zero to each of those</font>

869
00:38:58,200 --> 00:39:03,089
members<font color="#E5E5E5"> or something</font>

870
00:39:00,470 --> 00:39:05,450
because at the same<font color="#E5E5E5"> time you don't</font><font color="#CCCCCC"> want</font>

871
00:39:03,090 --> 00:39:08,310
to use<font color="#E5E5E5"> up all</font><font color="#CCCCCC"> the bandwidth</font><font color="#E5E5E5"> just writing</font>

872
00:39:05,450 --> 00:39:10,230
data that maybe isn't<font color="#E5E5E5"> going to be used</font>

873
00:39:08,310 --> 00:39:14,100
<font color="#E5E5E5">so having some rate limit is still</font>

874
00:39:10,230 --> 00:39:16,080
useful<font color="#E5E5E5"> just as you want the device</font>

875
00:39:14,100 --> 00:39:22,620
available<font color="#E5E5E5"> for reading more</font><font color="#CCCCCC"> than for</font>

876
00:39:16,080 --> 00:39:25,710
writing<font color="#E5E5E5"> hi yeah so your talk please</font><font color="#CCCCCC"> are</font>

877
00:39:22,620 --> 00:39:28,529
<font color="#E5E5E5">you</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that in a case with</font><font color="#CCCCCC"> baked ups you</font>

878
00:39:25,710 --> 00:39:31,200
are it's<font color="#E5E5E5"> not efficient because you are</font>

879
00:39:28,530 --> 00:39:33,780
you<font color="#E5E5E5"> but how do you avoid it with</font><font color="#CCCCCC"> an ru</font>

880
00:39:31,200 --> 00:39:35,669
<font color="#CCCCCC">and</font><font color="#E5E5E5"> MF</font><font color="#CCCCCC"> u because if you're</font><font color="#E5E5E5"> doing backups</font>

881
00:39:33,780 --> 00:39:39,300
you are just<font color="#CCCCCC"> asking for more memories</font>

882
00:39:35,670 --> 00:39:41,670
for your LRU and just yeah being<font color="#E5E5E5"> in a</font>

883
00:39:39,300 --> 00:39:43,920
case where your value is way because I

884
00:39:41,670 --> 00:39:46,380
know<font color="#CCCCCC"> is on your nephew so how do you</font>

885
00:39:43,920 --> 00:39:50,040
deal with that<font color="#CCCCCC"> you have some history</font><font color="#E5E5E5"> to</font>

886
00:39:46,380 --> 00:39:54,390
avoid too much a location for the<font color="#E5E5E5"> LRU in</font>

887
00:39:50,040 --> 00:39:59,220
a specific<font color="#CCCCCC"> case right each time we get</font>

888
00:39:54,390 --> 00:40:01,890
the ghost hit the<font color="#E5E5E5"> p</font><font color="#CCCCCC"> value only</font><font color="#E5E5E5"> moves by</font>

889
00:39:59,220 --> 00:40:03,959
one<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> so it takes a lot to actually</font>

890
00:40:01,890 --> 00:40:06,779
<font color="#CCCCCC">move that counter of many megabytes or</font>

891
00:40:03,960 --> 00:40:08,760
gigabytes<font color="#CCCCCC"> but in the case of a backup</font>

892
00:40:06,780 --> 00:40:10,620
<font color="#E5E5E5">because you access each file only once</font>

893
00:40:08,760 --> 00:40:12,360
<font color="#E5E5E5">you're not</font><font color="#CCCCCC"> gonna hit the</font><font color="#E5E5E5"> ghost list very</font>

894
00:40:10,620 --> 00:40:14,970
much so the<font color="#CCCCCC"> the p value</font><font color="#E5E5E5"> won't actually</font>

895
00:40:12,360 --> 00:40:17,640
change in the case of a<font color="#E5E5E5"> full disk</font><font color="#CCCCCC"> a nor</font>

896
00:40:14,970 --> 00:40:20,250
a<font color="#E5E5E5"> database skin and so it's not actually</font>

897
00:40:17,640 --> 00:40:23,520
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to cause your</font><font color="#CCCCCC"> mru to get really</font>

898
00:40:20,250 --> 00:40:25,710
big<font color="#E5E5E5"> it will still cycle the</font><font color="#CCCCCC"> mru and make</font>

899
00:40:23,520 --> 00:40:27,860
it less useful<font color="#E5E5E5"> but at least some</font>

900
00:40:25,710 --> 00:40:29,910
fraction<font color="#E5E5E5"> of your caches</font><font color="#CCCCCC"> mfu and</font>

901
00:40:27,860 --> 00:40:31,680
frequently<font color="#E5E5E5"> used files are not going to</font>

902
00:40:29,910 --> 00:40:37,109
suddenly drop<font color="#E5E5E5"> in performance because</font><font color="#CCCCCC"> of</font>

903
00:40:31,680 --> 00:40:40,980
<font color="#E5E5E5">the skin type</font><font color="#CCCCCC"> so how do you big stuff</font>

904
00:40:37,110 --> 00:40:42,330
from<font color="#E5E5E5"> the ghost</font><font color="#CCCCCC"> lists so the ghost list</font>

905
00:40:40,980 --> 00:40:44,910
is because it's just the keys

906
00:40:42,330 --> 00:40:47,910
take very<font color="#CCCCCC"> much space and if there's just</font>

907
00:40:44,910 --> 00:40:51,210
a size limit<font color="#E5E5E5"> and they fall off</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like</font>

908
00:40:47,910 --> 00:40:55,350
a regular it's basically a secondary LRU

909
00:40:51,210 --> 00:40:58,490
cache and<font color="#E5E5E5"> so when it gets full you</font><font color="#CCCCCC"> just</font>

910
00:40:55,350 --> 00:40:58,490
<font color="#E5E5E5">delete the oldest entries</font>

911
00:41:04,300 --> 00:41:11,160
[Music]

912
00:41:06,200 --> 00:41:14,759
hi<font color="#E5E5E5"> what's up with that standard button</font>

913
00:41:11,160 --> 00:41:16,109
what's up with your standard<font color="#E5E5E5"> work well</font>

914
00:41:14,760 --> 00:41:19,350
standard yeah

915
00:41:16,110 --> 00:41:23,360
so<font color="#CCCCCC"> I there was a little note on</font><font color="#E5E5E5"> one of</font>

916
00:41:19,350 --> 00:41:26,339
<font color="#E5E5E5">the slides there about adding the new</font>

917
00:41:23,360 --> 00:41:27,900
compression<font color="#E5E5E5"> type Zed standard it's</font>

918
00:41:26,340 --> 00:41:30,540
originally from<font color="#E5E5E5"> the author that did L</font>

919
00:41:27,900 --> 00:41:34,350
Zed for but it's much<font color="#E5E5E5"> more modern</font><font color="#CCCCCC"> and</font>

920
00:41:30,540 --> 00:41:35,670
designed<font color="#E5E5E5"> to kind of like how gzip has</font>

921
00:41:34,350 --> 00:41:38,190
levels<font color="#E5E5E5"> one through nine</font>

922
00:41:35,670 --> 00:41:41,130
Zed standard has<font color="#E5E5E5"> like negative something</font>

923
00:41:38,190 --> 00:41:42,600
<font color="#E5E5E5">all the way up to twenty</font><font color="#CCCCCC"> nine gives you</font>

924
00:41:41,130 --> 00:41:45,510
a lot more<font color="#CCCCCC"> control over the level of</font>

925
00:41:42,600 --> 00:41:47,790
compression<font color="#E5E5E5"> so I've been working</font><font color="#CCCCCC"> on</font>

926
00:41:45,510 --> 00:41:51,390
implementing that<font color="#CCCCCC"> in ZFS and it all</font>

927
00:41:47,790 --> 00:41:54,420
works<font color="#CCCCCC"> the problem is if</font><font color="#E5E5E5"> you turn the</font>

928
00:41:51,390 --> 00:41:58,710
compressed<font color="#CCCCCC"> Arc feature off and you have</font>

929
00:41:54,420 --> 00:42:02,010
an l2 arc<font color="#CCCCCC"> it means that the copy</font><font color="#E5E5E5"> of the</font>

930
00:41:58,710 --> 00:42:04,320
data in memory<font color="#E5E5E5"> is not compressed so when</font>

931
00:42:02,010 --> 00:42:06,930
you go<font color="#E5E5E5"> to write it to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> elsewhere you</font>

932
00:42:04,320 --> 00:42:08,490
first have to recompress it so that the

933
00:42:06,930 --> 00:42:11,730
checksum will match the copy that's on

934
00:42:08,490 --> 00:42:13,109
disk<font color="#E5E5E5"> which was compressed and that works</font>

935
00:42:11,730 --> 00:42:15,360
because<font color="#E5E5E5"> we store the compression</font>

936
00:42:13,110 --> 00:42:19,260
<font color="#CCCCCC">leveling</font><font color="#E5E5E5"> and do that</font><font color="#CCCCCC"> the problem comes</font>

937
00:42:15,360 --> 00:42:21,330
when you go to read<font color="#E5E5E5"> it back if</font><font color="#CCCCCC"> we</font>

938
00:42:19,260 --> 00:42:23,640
<font color="#CCCCCC">upgrade the</font><font color="#E5E5E5"> version of Zed standard in</font>

939
00:42:21,330 --> 00:42:26,340
the future for<font color="#CCCCCC"> example over</font><font color="#E5E5E5"> the course</font>

940
00:42:23,640 --> 00:42:28,319
of<font color="#E5E5E5"> the development</font><font color="#CCCCCC"> yon released a newer</font>

941
00:42:26,340 --> 00:42:30,540
version of Zed standard that all

942
00:42:28,320 --> 00:42:34,080
compression levels 10 and above<font color="#E5E5E5"> are now</font>

943
00:42:30,540 --> 00:42:36,150
like<font color="#CCCCCC"> eight percent better compression</font><font color="#E5E5E5"> so</font>

944
00:42:34,080 --> 00:42:38,850
now when you take data that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> written</font>

945
00:42:36,150 --> 00:42:41,280
before and then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> re compress it with</font>

946
00:42:38,850 --> 00:42:43,140
<font color="#CCCCCC">a newer version now when it ends up on</font>

947
00:42:41,280 --> 00:42:44,310
the l2<font color="#CCCCCC"> ARCA has a different checksum</font>

948
00:42:43,140 --> 00:42:46,950
because it's actually<font color="#CCCCCC"> eight percent</font>

949
00:42:44,310 --> 00:42:48,930
smaller<font color="#E5E5E5"> and so when we get back we see</font>

950
00:42:46,950 --> 00:42:50,850
that the checksum<font color="#E5E5E5"> is wrong and report</font>

951
00:42:48,930 --> 00:42:54,120
that<font color="#CCCCCC"> your your l2 are guesses D is</font>

952
00:42:50,850 --> 00:42:55,589
failing<font color="#E5E5E5"> when it's not so we're trying to</font>

953
00:42:54,120 --> 00:42:58,799
decide<font color="#CCCCCC"> what the best</font><font color="#E5E5E5"> way to avoid</font><font color="#CCCCCC"> that</font>

954
00:42:55,590 --> 00:43:01,980
problem<font color="#CCCCCC"> is whether it</font><font color="#E5E5E5"> is to avoid the</font>

955
00:42:58,800 --> 00:43:03,660
compression or<font color="#E5E5E5"> check for the checksum</font>

956
00:43:01,980 --> 00:43:07,410
mismatch doing the<font color="#CCCCCC"> writing phase and</font>

957
00:43:03,660 --> 00:43:09,509
skip<font color="#CCCCCC"> it in that case or what or just</font>

958
00:43:07,410 --> 00:43:11,910
pick some version of Zed standard and

959
00:43:09,510 --> 00:43:13,710
always use<font color="#CCCCCC"> that version</font><font color="#E5E5E5"> never change but</font>

960
00:43:11,910 --> 00:43:15,720
<font color="#E5E5E5">giving up the performance gains that are</font>

961
00:43:13,710 --> 00:43:18,779
<font color="#E5E5E5">coming out on a</font><font color="#CCCCCC"> regular basis</font><font color="#E5E5E5"> doesn't</font>

962
00:43:15,720 --> 00:43:21,058
seem<font color="#CCCCCC"> like the</font><font color="#E5E5E5"> best option either so</font>

963
00:43:18,779 --> 00:43:23,880
kind of hung up on solving<font color="#CCCCCC"> that</font><font color="#E5E5E5"> problem</font>

964
00:43:21,059 --> 00:43:26,419
and that's why<font color="#E5E5E5"> there hasn't been much</font>

965
00:43:23,880 --> 00:43:29,369
<font color="#E5E5E5">progress in the last six</font><font color="#CCCCCC"> months but</font>

966
00:43:26,419 --> 00:43:34,319
hoping to figure that<font color="#E5E5E5"> one</font><font color="#CCCCCC"> out and get</font>

967
00:43:29,369 --> 00:43:36,299
that feature<font color="#CCCCCC"> upstream it's so I</font>

968
00:43:34,319 --> 00:43:38,130
originally developed out on<font color="#E5E5E5"> FreeBSD but</font>

969
00:43:36,299 --> 00:43:40,619
someone has ported it to<font color="#E5E5E5"> the as a pull</font>

970
00:43:38,130 --> 00:43:43,409
request<font color="#CCCCCC"> on</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> effects on</font><font color="#E5E5E5"> Linux and so</font>

971
00:43:40,619 --> 00:43:45,900
if you<font color="#E5E5E5"> don't have an l2 arc or at least</font>

972
00:43:43,409 --> 00:43:47,789
if you leave<font color="#E5E5E5"> compressed argon it works</font>

973
00:43:45,900 --> 00:43:49,619
and you<font color="#CCCCCC"> can you could play with it today</font>

974
00:43:47,789 --> 00:43:50,880
<font color="#E5E5E5">although it's until it's committed I</font>

975
00:43:49,619 --> 00:44:04,729
probably wouldn't<font color="#E5E5E5"> want to use it in</font>

976
00:43:50,880 --> 00:44:07,890
production<font color="#CCCCCC"> right so recently I had a</font>

977
00:44:04,729 --> 00:44:12,178
Windows image and I had this running<font color="#E5E5E5"> on</font>

978
00:44:07,890 --> 00:44:14,489
edifis volume and I had a<font color="#CCCCCC"> l</font><font color="#E5E5E5"> track that</font>

979
00:44:12,179 --> 00:44:16,079
was somewhat larger than the<font color="#CCCCCC"> Windows</font>

980
00:44:14,489 --> 00:44:17,939
petition<font color="#CCCCCC"> but every</font><font color="#E5E5E5"> time I spun up the</font>

981
00:44:16,079 --> 00:44:21,059
windows and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> petition and an error</font>

982
00:44:17,939 --> 00:44:23,609
<font color="#CCCCCC">RINO's imagine and spy it back down I</font>

983
00:44:21,059 --> 00:44:25,140
kept getting hard disk<font color="#CCCCCC"> kids</font><font color="#E5E5E5"> would it be</font>

984
00:44:23,609 --> 00:44:26,909
correct<font color="#CCCCCC"> but I actually need to have</font><font color="#E5E5E5"> an L</font>

985
00:44:25,140 --> 00:44:30,390
track that's at<font color="#CCCCCC"> least twice the</font><font color="#E5E5E5"> size of</font>

986
00:44:26,909 --> 00:44:32,969
the image<font color="#CCCCCC"> to not see any hits anymore I</font>

987
00:44:30,390 --> 00:44:34,799
think likely what the<font color="#E5E5E5"> the problem of</font>

988
00:44:32,969 --> 00:44:38,909
running into there was<font color="#E5E5E5"> the fill rate</font>

989
00:44:34,799 --> 00:44:40,499
living because you<font color="#E5E5E5"> were only allowing by</font>

990
00:44:38,909 --> 00:44:43,319
default I think<font color="#CCCCCC"> 10 or 20 megabytes a</font>

991
00:44:40,499 --> 00:44:45,359
second to go up to the<font color="#CCCCCC"> l2 arc</font><font color="#E5E5E5"> but the</font>

992
00:44:43,319 --> 00:44:47,849
data in your<font color="#CCCCCC"> art was falling</font><font color="#E5E5E5"> out at a</font>

993
00:44:45,359 --> 00:44:49,828
faster<font color="#CCCCCC"> rate than that so if you just</font>

994
00:44:47,849 --> 00:44:51,390
<font color="#E5E5E5">increase the fill rate then you should</font>

995
00:44:49,829 --> 00:44:53,519
be able to fill up<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Dale's mark you</font>

996
00:44:51,390 --> 00:44:55,469
<font color="#E5E5E5">have and get closer to the hundred</font>

997
00:44:53,519 --> 00:44:57,328
<font color="#E5E5E5">percent</font><font color="#CCCCCC"> - it's interesting</font>

998
00:44:55,469 --> 00:44:59,579
thank you very<font color="#E5E5E5"> much</font><font color="#CCCCCC"> yeah it's basically</font>

999
00:44:57,329 --> 00:45:01,349
<font color="#CCCCCC">taking a fraction of the</font><font color="#E5E5E5"> data that's</font>

1000
00:44:59,579 --> 00:45:03,329
falling out of<font color="#E5E5E5"> the cache and writing it</font>

1001
00:45:01,349 --> 00:45:05,009
to the else work and if<font color="#E5E5E5"> that fraction is</font>

1002
00:45:03,329 --> 00:45:06,869
<font color="#E5E5E5">only</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> percent or something then</font>

1003
00:45:05,009 --> 00:45:08,699
<font color="#CCCCCC">you're it would take a lot of cycles</font>

1004
00:45:06,869 --> 00:45:14,549
before<font color="#E5E5E5"> you had all</font><font color="#CCCCCC"> that data on the l2</font>

1005
00:45:08,699 --> 00:45:17,099
are separately there's a another feature

1006
00:45:14,549 --> 00:45:20,249
coming<font color="#E5E5E5"> in ZFS on</font><font color="#CCCCCC"> Linux and eventually to</font>

1007
00:45:17,099 --> 00:45:22,019
<font color="#E5E5E5">FreeBSD called allocation classes that</font>

1008
00:45:20,249 --> 00:45:24,448
allow<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to have an SSD that you</font>

1009
00:45:22,019 --> 00:45:27,390
specifically define as<font color="#E5E5E5"> being for</font>

1010
00:45:24,449 --> 00:45:29,039
metadata<font color="#E5E5E5"> or four blocks that</font><font color="#CCCCCC"> are like 4k</font>

1011
00:45:27,390 --> 00:45:31,990
<font color="#E5E5E5">or something so</font><font color="#CCCCCC"> that you could for</font>

1012
00:45:29,039 --> 00:45:34,480
specific data to always be on<font color="#E5E5E5"> the SSD</font>

1013
00:45:31,990 --> 00:45:38,189
and<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> rescue</font><font color="#E5E5E5"> data beyond spinning</font>

1014
00:45:34,480 --> 00:45:42,040
<font color="#CCCCCC">discs</font><font color="#E5E5E5"> oh hello</font>

1015
00:45:38,190 --> 00:45:42,640
so I<font color="#E5E5E5"> read that post</font><font color="#CCCCCC"> West</font><font color="#E5E5E5"> well wanted to</font>

1016
00:45:42,040 --> 00:45:46,990
implement

1017
00:45:42,640 --> 00:45:49,118
IRSC<font color="#E5E5E5"> yeah 15 years ago and then they</font>

1018
00:45:46,990 --> 00:45:51,129
decided<font color="#E5E5E5"> against it</font><font color="#CCCCCC"> because of the</font>

1019
00:45:49,119 --> 00:45:55,450
<font color="#E5E5E5">pattern situation can I say a bit</font><font color="#CCCCCC"> about</font>

1020
00:45:51,130 --> 00:45:59,950
the patterns situation<font color="#CCCCCC"> I think iBM has a</font>

1021
00:45:55,450 --> 00:46:05,770
patent<font color="#E5E5E5"> on this</font><font color="#CCCCCC"> ice</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> I cannot comment</font>

1022
00:45:59,950 --> 00:46:13,950
on issues of pens not qualified and

1023
00:46:05,770 --> 00:46:13,950
really<font color="#E5E5E5"> really don't want to visit</font><font color="#CCCCCC"> yep</font>

1024
00:46:14,640 --> 00:46:20,379
over on<font color="#CCCCCC"> you're over</font><font color="#E5E5E5"> here yeah I was</font>

1025
00:46:18,640 --> 00:46:23,500
<font color="#E5E5E5">talking about the talking about the</font>

1026
00:46:20,380 --> 00:46:24,700
<font color="#CCCCCC">compressed arc</font><font color="#E5E5E5"> and obviously that pulls</font>

1027
00:46:23,500 --> 00:46:26,980
the data compressed<font color="#CCCCCC"> up for this</font><font color="#E5E5E5"> so if</font>

1028
00:46:24,700 --> 00:46:28,868
you've got<font color="#CCCCCC"> a</font><font color="#E5E5E5"> zealous volume that you've</font>

1029
00:46:26,980 --> 00:46:30,700
enabled compression on and a load<font color="#E5E5E5"> of</font>

1030
00:46:28,869 --> 00:46:32,530
existing data on there that's

1031
00:46:30,700 --> 00:46:33,790
uncompressed at the moment does that

1032
00:46:32,530 --> 00:46:35,530
<font color="#CCCCCC">thing get loaded even though you've got</font>

1033
00:46:33,790 --> 00:46:37,089
<font color="#E5E5E5">compression on your volume and compress</font>

1034
00:46:35,530 --> 00:46:38,410
<font color="#E5E5E5">start that still gets loaded into the</font>

1035
00:46:37,089 --> 00:46:40,450
arc on compressed because<font color="#CCCCCC"> it's</font>

1036
00:46:38,410 --> 00:46:42,460
uncompressed on this right<font color="#CCCCCC"> with</font>

1037
00:46:40,450 --> 00:46:45,189
compressed<font color="#E5E5E5"> start</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> copy in the arc is</font>

1038
00:46:42,460 --> 00:46:47,619
always<font color="#CCCCCC"> exactly the</font><font color="#E5E5E5"> same as the copy on</font>

1039
00:46:45,190 --> 00:46:49,180
disk<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the checksum can be</font>

1040
00:46:47,619 --> 00:46:51,190
<font color="#E5E5E5">verified each time without having to</font>

1041
00:46:49,180 --> 00:46:52,390
store<font color="#E5E5E5"> detecting checksum right so if I</font>

1042
00:46:51,190 --> 00:46:54,640
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to take</font><font color="#E5E5E5"> advantage</font><font color="#CCCCCC"> of the</font>

1043
00:46:52,390 --> 00:46:56,020
compressed<font color="#CCCCCC"> dark-eyed after say</font><font color="#E5E5E5"> making</font><font color="#CCCCCC"> me</font>

1044
00:46:54,640 --> 00:46:58,150
write<font color="#E5E5E5"> the data to make</font><font color="#CCCCCC"> sure it gets</font>

1045
00:46:56,020 --> 00:47:00,009
written compressed<font color="#E5E5E5"> yes or you could use</font>

1046
00:46:58,150 --> 00:47:02,380
the<font color="#CCCCCC"> database</font><font color="#E5E5E5"> replication to send to a</font>

1047
00:47:00,010 --> 00:47:04,410
second evolve<font color="#E5E5E5"> yeah and have written not</font>

1048
00:47:02,380 --> 00:47:07,270
a compressed all right<font color="#E5E5E5"> okay thank you</font>

1049
00:47:04,410 --> 00:47:18,040
so<font color="#E5E5E5"> protip turn confession on before you</font>

1050
00:47:07,270 --> 00:47:20,140
write any data<font color="#E5E5E5"> question suppose an nvme</font>

1051
00:47:18,040 --> 00:47:22,810
<font color="#E5E5E5">is your main story so</font><font color="#CCCCCC"> i don't</font><font color="#E5E5E5"> have any</font>

1052
00:47:20,140 --> 00:47:25,990
hard drive<font color="#E5E5E5"> how</font><font color="#CCCCCC"> would I configure ZFS in</font>

1053
00:47:22,810 --> 00:47:27,520
this case and I was thought like nvme

1054
00:47:25,990 --> 00:47:28,899
has quite different performance

1055
00:47:27,520 --> 00:47:30,940
characteristics at the hard disk so you

1056
00:47:28,900 --> 00:47:36,220
<font color="#E5E5E5">would rather store things in a different</font>

1057
00:47:30,940 --> 00:47:38,800
<font color="#E5E5E5">format</font><font color="#CCCCCC"> then in hard disk the biggest</font>

1058
00:47:36,220 --> 00:47:40,180
difference with nvme is that you can

1059
00:47:38,800 --> 00:47:42,400
actually<font color="#E5E5E5"> be</font>

1060
00:47:40,180 --> 00:47:44,770
shooting multiple<font color="#E5E5E5"> reads at once</font><font color="#CCCCCC"> or</font>

1061
00:47:42,400 --> 00:47:47,920
multiple right<font color="#E5E5E5"> so most</font><font color="#CCCCCC"> envied</font><font color="#E5E5E5"> amis can</font>

1062
00:47:44,770 --> 00:47:50,799
run<font color="#E5E5E5"> somewhere from 16</font><font color="#CCCCCC"> to 64 commands in</font>

1063
00:47:47,920 --> 00:47:52,690
parallel<font color="#E5E5E5"> whereas the SATA interface only</font>

1064
00:47:50,799 --> 00:47:54,279
<font color="#CCCCCC">does one at a time</font><font color="#E5E5E5"> you can queue a bunch</font>

1065
00:47:52,690 --> 00:47:57,039
<font color="#CCCCCC">of them up</font><font color="#E5E5E5"> but it's only</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> actually</font>

1066
00:47:54,279 --> 00:47:59,470
<font color="#CCCCCC">run one at a time</font><font color="#E5E5E5"> so you don't need to</font>

1067
00:47:57,039 --> 00:48:01,390
do anything<font color="#E5E5E5"> special in ZFS but there can</font>

1068
00:47:59,470 --> 00:48:03,788
be a big performance<font color="#CCCCCC"> gain from</font>

1069
00:48:01,390 --> 00:48:06,609
increasing<font color="#E5E5E5"> the queue sizes so instead of</font>

1070
00:48:03,789 --> 00:48:08,200
<font color="#E5E5E5">by</font><font color="#CCCCCC"> default</font><font color="#E5E5E5"> for spinning</font><font color="#CCCCCC"> discs you don't</font>

1071
00:48:06,609 --> 00:48:13,170
want to send more<font color="#E5E5E5"> than a single-digit</font>

1072
00:48:08,200 --> 00:48:16,270
number of work<font color="#E5E5E5"> items to the</font><font color="#CCCCCC"> disc</font><font color="#E5E5E5"> because</font>

1073
00:48:13,170 --> 00:48:17,740
they form a queue and if you have a

1074
00:48:16,270 --> 00:48:19,538
really<font color="#E5E5E5"> important thing</font><font color="#CCCCCC"> that comes up</font><font color="#E5E5E5"> it</font>

1075
00:48:17,740 --> 00:48:21,399
<font color="#E5E5E5">goes at the</font><font color="#CCCCCC"> end of the queue so you keep</font>

1076
00:48:19,539 --> 00:48:24,400
the queue short so<font color="#E5E5E5"> that when you have an</font>

1077
00:48:21,400 --> 00:48:27,250
important job come up it gets<font color="#E5E5E5"> to the</font>

1078
00:48:24,400 --> 00:48:29,770
front<font color="#E5E5E5"> of you</font><font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> but if the</font><font color="#CCCCCC"> thing</font>

1079
00:48:27,250 --> 00:48:32,529
can<font color="#E5E5E5"> be executing 64 different commands</font>

1080
00:48:29,770 --> 00:48:35,049
at once<font color="#E5E5E5"> having</font><font color="#CCCCCC"> a queue of four doesn't</font>

1081
00:48:32,529 --> 00:48:38,710
take<font color="#CCCCCC"> advantage of</font><font color="#E5E5E5"> that so you just</font><font color="#CCCCCC"> need</font>

1082
00:48:35,049 --> 00:48:41,288
<font color="#CCCCCC">to up the queue max to allow</font><font color="#E5E5E5"> queue say</font>

1083
00:48:38,710 --> 00:48:43,750
128 commands to the<font color="#E5E5E5"> device knowing</font><font color="#CCCCCC"> that</font>

1084
00:48:41,289 --> 00:48:45,400
because<font color="#E5E5E5"> it has 64 parallel execution</font>

1085
00:48:43,750 --> 00:48:48,640
<font color="#CCCCCC">you're never</font><font color="#E5E5E5"> going to have a queue</font>

1086
00:48:45,400 --> 00:48:50,920
<font color="#E5E5E5">that's longer than</font><font color="#CCCCCC"> 2 so just</font><font color="#E5E5E5"> some tuning</font>

1087
00:48:48,640 --> 00:48:52,359
for<font color="#CCCCCC"> mvv but you won't you don't need a</font>

1088
00:48:50,920 --> 00:48:56,700
fundamentally different file system or

1089
00:48:52,359 --> 00:48:59,819
<font color="#E5E5E5">anything thank you for an excellent</font><font color="#CCCCCC"> talk</font>

1090
00:48:56,700 --> 00:48:59,819
[Applause]

1091
00:49:03,619 --> 00:49:08,299
and if you want to know more you<font color="#CCCCCC"> can</font>

1092
00:49:06,200 --> 00:49:11,019
<font color="#CCCCCC">check out the books</font><font color="#E5E5E5"> and I do a weekly</font>

1093
00:49:08,299 --> 00:49:11,019
podcast as well

