1
00:00:05,780 --> 00:00:13,230
so hi<font color="#CCCCCC"> I am David aka Yuri and</font><font color="#E5E5E5"> I'm going</font>

2
00:00:11,760 --> 00:00:17,730
to<font color="#E5E5E5"> talk about the binary hasty the</font>

3
00:00:13,230 --> 00:00:19,740
JavaScript binary<font color="#CCCCCC"> est in est so previous</font>

4
00:00:17,730 --> 00:00:21,900
talk was about furniture<font color="#CCCCCC"> the one before</font>

5
00:00:19,740 --> 00:00:25,830
that<font color="#E5E5E5"> about components</font><font color="#CCCCCC"> I haven't heard</font>

6
00:00:21,900 --> 00:00:29,970
any took this<font color="#E5E5E5"> well this weekend about</font>

7
00:00:25,830 --> 00:00:32,369
<font color="#E5E5E5">startup performance</font><font color="#CCCCCC"> and the sad fact</font>

8
00:00:29,970 --> 00:00:34,440
about<font color="#CCCCCC"> stored performance is we are not</font>

9
00:00:32,369 --> 00:00:36,510
very<font color="#CCCCCC"> good about it I just realized that</font>

10
00:00:34,440 --> 00:00:39,570
I<font color="#E5E5E5"> forgot to give the credits so this is</font>

11
00:00:36,510 --> 00:00:42,780
about a work between Mozilla<font color="#E5E5E5"> both the</font>

12
00:00:39,570 --> 00:00:45,450
company in the community<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> a</font>

13
00:00:42,780 --> 00:00:48,379
<font color="#E5E5E5">facebook Bloomberg and CloudFlare</font><font color="#CCCCCC"> I am</font>

14
00:00:45,450 --> 00:00:55,620
at Mozilla<font color="#E5E5E5"> part of the</font><font color="#CCCCCC"> JavaScript team</font>

15
00:00:48,379 --> 00:00:57,809
so I mentioned startup<font color="#E5E5E5"> we as a web</font>

16
00:00:55,620 --> 00:00:59,930
<font color="#E5E5E5">developer community are not very good</font><font color="#CCCCCC"> at</font>

17
00:00:57,809 --> 00:00:59,930
<font color="#CCCCCC">that</font>

18
00:01:00,350 --> 00:01:05,850
how many people in this room<font color="#CCCCCC"> know how</font>

19
00:01:03,870 --> 00:01:11,610
long it takes<font color="#CCCCCC"> for their application to</font>

20
00:01:05,850 --> 00:01:17,429
<font color="#CCCCCC">start a few</font><font color="#E5E5E5"> good how many</font><font color="#CCCCCC"> fit within</font>

21
00:01:11,610 --> 00:01:23,090
<font color="#E5E5E5">three seconds great that's it</font><font color="#CCCCCC"> two other</font>

22
00:01:17,429 --> 00:01:26,130
of them over<font color="#E5E5E5"> there so a few years</font><font color="#CCCCCC"> ago</font>

23
00:01:23,090 --> 00:01:31,709
Google<font color="#E5E5E5"> both as double-click and as</font>

24
00:01:26,130 --> 00:01:33,720
actual<font color="#E5E5E5"> Google run tests on the web to</font>

25
00:01:31,709 --> 00:01:37,860
<font color="#CCCCCC">find out how fast</font><font color="#E5E5E5"> a web application</font>

26
00:01:33,720 --> 00:01:39,509
<font color="#CCCCCC">start so double-click it's an ad agency</font>

27
00:01:37,860 --> 00:01:41,759
<font color="#CCCCCC">that you all have all sorts of</font>

28
00:01:39,509 --> 00:01:43,380
<font color="#E5E5E5">interesting numbers in particular they</font>

29
00:01:41,759 --> 00:01:45,450
know if<font color="#CCCCCC"> you are looking at the page</font><font color="#E5E5E5"> or</font>

30
00:01:43,380 --> 00:01:46,679
<font color="#E5E5E5">not that doesn't</font><font color="#CCCCCC"> sound</font><font color="#E5E5E5"> good what</font><font color="#CCCCCC"> should</font>

31
00:01:45,450 --> 00:01:49,140
I do<font color="#CCCCCC"> okay</font>

32
00:01:46,679 --> 00:01:51,179
they know whether<font color="#CCCCCC"> you are looking</font><font color="#E5E5E5"> at a</font>

33
00:01:49,140 --> 00:01:53,250
page or<font color="#E5E5E5"> not and so they have numbers so</font>

34
00:01:51,179 --> 00:01:55,729
<font color="#CCCCCC">if your page takes more than three</font>

35
00:01:53,250 --> 00:01:58,709
<font color="#E5E5E5">seconds to load you have</font><font color="#CCCCCC"> already lost</font>

36
00:01:55,729 --> 00:02:03,479
<font color="#CCCCCC">53% of your visitors at least on mobile</font>

37
00:01:58,709 --> 00:02:08,640
and the<font color="#E5E5E5"> Google web performance team run</font>

38
00:02:03,479 --> 00:02:13,480
tests so either it's early it's<font color="#CCCCCC"> a median</font>

39
00:02:08,639 --> 00:02:14,950
value so on desktop most

40
00:02:13,480 --> 00:02:17,849
at least half of the applications took

41
00:02:14,950 --> 00:02:22,869
at<font color="#E5E5E5"> least</font><font color="#CCCCCC"> eight seconds</font><font color="#E5E5E5"> to start on</font>

42
00:02:17,849 --> 00:02:24,670
mobile<font color="#E5E5E5"> it was 16 seconds that's not good</font>

43
00:02:22,870 --> 00:02:27,370
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> for our users</font><font color="#E5E5E5"> and that's</font>

44
00:02:24,670 --> 00:02:32,109
not good<font color="#CCCCCC"> for our applications</font><font color="#E5E5E5"> so the</font>

45
00:02:27,370 --> 00:02:36,940
question is what can<font color="#E5E5E5"> we do about that so</font>

46
00:02:32,110 --> 00:02:40,630
the<font color="#E5E5E5"> problem is hey code well</font><font color="#CCCCCC"> ok we are</font>

47
00:02:36,940 --> 00:02:43,000
<font color="#CCCCCC">in the dead room so good thing we know a</font>

48
00:02:40,630 --> 00:02:45,970
few<font color="#CCCCCC"> things about code but the problem at</font>

49
00:02:43,000 --> 00:02:51,489
<font color="#E5E5E5">about code in that case is not code it's</font>

50
00:02:45,970 --> 00:02:53,769
that we<font color="#CCCCCC"> have lots of code so maybe the</font>

51
00:02:51,489 --> 00:02:55,000
people<font color="#E5E5E5"> who know</font><font color="#CCCCCC"> exactly how many seconds</font>

52
00:02:53,769 --> 00:02:56,849
it<font color="#CCCCCC"> takes for their application to start</font>

53
00:02:55,000 --> 00:02:59,640
<font color="#E5E5E5">know how much code they have</font><font color="#CCCCCC"> I</font>

54
00:02:56,849 --> 00:03:02,679
personally generally don't have<font color="#CCCCCC"> a clue</font>

55
00:02:59,640 --> 00:03:04,328
<font color="#E5E5E5">when you create an application you</font>

56
00:03:02,680 --> 00:03:05,950
typically<font color="#E5E5E5"> put lots of dependencies I</font>

57
00:03:04,329 --> 00:03:07,510
mean if you<font color="#CCCCCC"> if</font><font color="#E5E5E5"> it's a simple application</font>

58
00:03:05,950 --> 00:03:10,328
you can probably get<font color="#E5E5E5"> away without</font>

59
00:03:07,510 --> 00:03:12,700
dependencies<font color="#E5E5E5"> but most applications tend</font>

60
00:03:10,329 --> 00:03:14,980
<font color="#CCCCCC">to pull lots</font><font color="#E5E5E5"> of dependencies and lots of</font>

61
00:03:12,700 --> 00:03:16,839
dependencies have a cost<font color="#E5E5E5"> even if you</font>

62
00:03:14,980 --> 00:03:21,700
don't use this application<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> these</font>

63
00:03:16,840 --> 00:03:24,310
dependencies there is a cost just<font color="#E5E5E5"> to the</font>

64
00:03:21,700 --> 00:03:28,540
code code itself not<font color="#CCCCCC"> its</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> just</font>

65
00:03:24,310 --> 00:03:31,680
to downloading and preparing the code so

66
00:03:28,540 --> 00:03:34,510
part of this cost is parsing<font color="#E5E5E5"> parsing is</font>

67
00:03:31,680 --> 00:03:36,790
<font color="#E5E5E5">computer reads the source code and try</font>

68
00:03:34,510 --> 00:03:38,108
to turn<font color="#CCCCCC"> it into something that is event</font>

69
00:03:36,790 --> 00:03:41,078
<font color="#CCCCCC">it's eventually going to</font><font color="#E5E5E5"> be able to</font>

70
00:03:38,109 --> 00:03:44,230
<font color="#CCCCCC">execute those are numbers from the same</font>

71
00:03:41,079 --> 00:03:48,430
study of how long it takes<font color="#CCCCCC"> to parts 1</font>

72
00:03:44,230 --> 00:03:50,138
megabyte<font color="#CCCCCC"> of</font><font color="#E5E5E5"> JavaScript code so on a</font>

73
00:03:48,430 --> 00:03:54,299
<font color="#E5E5E5">MacBook Pro that was just a few</font>

74
00:03:50,139 --> 00:03:57,280
milliseconds and<font color="#E5E5E5"> on some platforms</font>

75
00:03:54,299 --> 00:03:59,709
<font color="#E5E5E5">that's more than</font><font color="#CCCCCC"> 6 seconds just</font><font color="#E5E5E5"> to parse</font>

76
00:03:57,280 --> 00:04:05,799
your first megabyte<font color="#E5E5E5"> of</font><font color="#CCCCCC"> javascript source</font>

77
00:03:59,709 --> 00:04:07,269
code and<font color="#E5E5E5"> I'm not going to give names but</font>

78
00:04:05,799 --> 00:04:09,549
I know some<font color="#E5E5E5"> web applications</font><font color="#CCCCCC"> that have</font>

79
00:04:07,269 --> 00:04:13,739
<font color="#E5E5E5">more than 40 megabytes of JavaScript</font>

80
00:04:09,549 --> 00:04:17,310
<font color="#E5E5E5">source code so multiply accordingly it's</font>

81
00:04:13,739 --> 00:04:17,310
mostly proportional

82
00:04:17,829 --> 00:04:23,770
before we try<font color="#CCCCCC"> to solve the problem</font><font color="#E5E5E5"> let's</font>

83
00:04:20,409 --> 00:04:34,650
like<font color="#CCCCCC"> let's take a very quick</font><font color="#E5E5E5"> look at how</font>

84
00:04:23,770 --> 00:04:37,900
<font color="#CCCCCC">general</font><font color="#E5E5E5"> script starts it death sticks so</font>

85
00:04:34,650 --> 00:04:40,448
the server<font color="#E5E5E5"> doesn't do much I'm assuming</font>

86
00:04:37,900 --> 00:04:41,888
a web<font color="#CCCCCC"> application</font><font color="#E5E5E5"> and I don't care</font>

87
00:04:40,449 --> 00:04:45,340
whether the server is<font color="#E5E5E5"> running JavaScript</font>

88
00:04:41,889 --> 00:04:47,169
<font color="#CCCCCC">I only care about the browser here</font><font color="#E5E5E5"> so</font>

89
00:04:45,340 --> 00:04:51,969
the server doesn't<font color="#E5E5E5"> do much just sends</font>

90
00:04:47,169 --> 00:04:55,258
the file the file is text<font color="#CCCCCC"> I mean it's</font>

91
00:04:51,969 --> 00:04:55,259
called<font color="#E5E5E5"> the code that you</font><font color="#CCCCCC"> have written</font>

92
00:04:55,289 --> 00:05:00,520
the<font color="#CCCCCC"> Java street journal machine any</font>

93
00:04:58,120 --> 00:05:02,800
virtual machine is going to<font color="#E5E5E5"> do a full</font>

94
00:05:00,520 --> 00:05:04,389
parsing even if it's not<font color="#E5E5E5"> called like</font>

95
00:05:02,800 --> 00:05:08,469
this but it's going<font color="#E5E5E5"> to do a full parsing</font>

96
00:05:04,389 --> 00:05:11,889
of your file<font color="#E5E5E5"> of all your files so turn</font>

97
00:05:08,469 --> 00:05:13,719
<font color="#E5E5E5">them into a data structure then it's</font>

98
00:05:11,889 --> 00:05:17,590
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run syntax analysis sorry</font>

99
00:05:13,719 --> 00:05:21,159
static analysis it's not something

100
00:05:17,590 --> 00:05:22,929
widely known but all the VMS<font color="#E5E5E5"> need to</font>

101
00:05:21,159 --> 00:05:25,090
perform static analysis before<font color="#E5E5E5"> they can</font>

102
00:05:22,930 --> 00:05:26,440
<font color="#E5E5E5">execute javascript not a lot</font><font color="#CCCCCC"> of static</font>

103
00:05:25,090 --> 00:05:28,359
analysis<font color="#E5E5E5"> most efficient</font><font color="#CCCCCC"> that it takes</font>

104
00:05:26,440 --> 00:05:32,560
time and<font color="#CCCCCC"> that it prevents lots of</font>

105
00:05:28,360 --> 00:05:35,919
optimizations this gives is a part of

106
00:05:32,560 --> 00:05:40,240
<font color="#CCCCCC">the</font><font color="#E5E5E5"> source code state in memory and this</font>

107
00:05:35,919 --> 00:05:43,719
part<font color="#CCCCCC"> is then compiled to bytecode</font><font color="#E5E5E5"> the</font>

108
00:05:40,240 --> 00:05:45,990
bytecode<font color="#E5E5E5"> can now be interpreted I'm not</font>

109
00:05:43,719 --> 00:05:50,469
going into<font color="#CCCCCC"> G thing that's just</font><font color="#E5E5E5"> before</font>

110
00:05:45,990 --> 00:05:53,080
you can start execution<font color="#E5E5E5"> older</font><font color="#CCCCCC"> versions</font>

111
00:05:50,469 --> 00:05:56,770
of<font color="#E5E5E5"> this pipeline had more operations but</font>

112
00:05:53,080 --> 00:06:00,310
that has much as browser and VM vendors

113
00:05:56,770 --> 00:06:05,770
have managed<font color="#E5E5E5"> to reduce it what does</font>

114
00:06:00,310 --> 00:06:10,800
<font color="#E5E5E5">still take lots of time so how can a web</font>

115
00:06:05,770 --> 00:06:10,799
developer<font color="#E5E5E5"> do to improve the</font><font color="#CCCCCC"> situation</font>

116
00:06:11,129 --> 00:06:15,900
there are<font color="#E5E5E5"> few things that can be done</font>

117
00:06:13,060 --> 00:06:18,279
<font color="#E5E5E5">I'm not I didn't include lazy loading</font>

118
00:06:15,900 --> 00:06:20,440
but the typical optimization that<font color="#E5E5E5"> you</font>

119
00:06:18,279 --> 00:06:25,539
<font color="#E5E5E5">can add automatically to your</font><font color="#CCCCCC"> tool chain</font>

120
00:06:20,440 --> 00:06:27,310
or application<font color="#E5E5E5"> optimized</font><font color="#CCCCCC"> ojs or</font>

121
00:06:25,539 --> 00:06:29,300
something this application is<font color="#E5E5E5"> going to</font>

122
00:06:27,310 --> 00:06:32,220
<font color="#E5E5E5">reduce the</font><font color="#CCCCCC"> size of</font><font color="#E5E5E5"> your source</font>

123
00:06:29,300 --> 00:06:39,150
optimize the<font color="#CCCCCC"> J's or</font><font color="#E5E5E5"> something similar is</font>

124
00:06:32,220 --> 00:06:41,850
<font color="#E5E5E5">going to to add</font><font color="#CCCCCC"> IIF es which are a bit</font>

125
00:06:39,150 --> 00:06:44,370
faster to parse and then you still get

126
00:06:41,850 --> 00:06:48,090
get this entire chain so thanks to

127
00:06:44,370 --> 00:06:52,290
edification<font color="#CCCCCC"> this thing is a bit smaller</font>

128
00:06:48,090 --> 00:06:56,700
<font color="#E5E5E5">not</font><font color="#CCCCCC"> much and thanks to this one this</font>

129
00:06:52,290 --> 00:06:59,630
part is a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> faster we still</font>

130
00:06:56,700 --> 00:06:59,630
have lots of work<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font>

131
00:07:00,740 --> 00:07:05,880
no look at something completely

132
00:07:02,730 --> 00:07:09,270
<font color="#CCCCCC">different I</font><font color="#E5E5E5"> took this is a rough</font><font color="#CCCCCC"> outline</font>

133
00:07:05,880 --> 00:07:10,980
of<font color="#CCCCCC"> whole dotnet applications</font><font color="#E5E5E5"> start there</font>

134
00:07:09,270 --> 00:07:12,780
start much faster<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> they don't</font>

135
00:07:10,980 --> 00:07:14,910
<font color="#E5E5E5">need to download</font><font color="#CCCCCC"> I mean you have</font>

136
00:07:12,780 --> 00:07:18,059
installed them<font color="#E5E5E5"> already so you don't need</font>

137
00:07:14,910 --> 00:07:21,240
<font color="#E5E5E5">to down on anything but also most of the</font>

138
00:07:18,060 --> 00:07:24,750
work that<font color="#CCCCCC"> we are doing on that side in</font>

139
00:07:21,240 --> 00:07:27,090
dotnet happens on this<font color="#CCCCCC"> side all the</font>

140
00:07:24,750 --> 00:07:30,240
static analysis is<font color="#E5E5E5"> be performed it</font>

141
00:07:27,090 --> 00:07:33,359
already<font color="#E5E5E5"> they have lots of other analysis</font>

142
00:07:30,240 --> 00:07:34,560
they compile and<font color="#CCCCCC"> then when you load this</font>

143
00:07:33,360 --> 00:07:37,200
is not a server anymore

144
00:07:34,560 --> 00:07:39,330
so that's your binary<font color="#E5E5E5"> on your hard drive</font>

145
00:07:37,200 --> 00:07:41,219
<font color="#E5E5E5">when you load that you don't even need</font>

146
00:07:39,330 --> 00:07:43,560
to<font color="#E5E5E5"> read the entire application</font><font color="#CCCCCC"> to memory</font>

147
00:07:41,220 --> 00:07:46,280
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> pretty quick even if your</font>

148
00:07:43,560 --> 00:07:48,270
<font color="#CCCCCC">application is</font><font color="#E5E5E5"> not uni</font><font color="#CCCCCC"> read bits</font><font color="#E5E5E5"> of it</font>

149
00:07:46,280 --> 00:07:49,799
there are still<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> still a little</font>

150
00:07:48,270 --> 00:07:52,740
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> that needs</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> done</font>

151
00:07:49,800 --> 00:07:54,900
<font color="#E5E5E5">but first you need you need it to it</font>

152
00:07:52,740 --> 00:07:57,990
when you load<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application on</font><font color="#E5E5E5"> the</font>

153
00:07:54,900 --> 00:08:02,549
part that<font color="#CCCCCC"> you actually load and most of</font>

154
00:07:57,990 --> 00:08:08,430
the work has<font color="#CCCCCC"> already been done sir so</font>

155
00:08:02,550 --> 00:08:10,380
the end result is<font color="#E5E5E5"> this is way faster so</font>

156
00:08:08,430 --> 00:08:13,850
we set<font color="#E5E5E5"> out to</font><font color="#CCCCCC"> try and</font><font color="#E5E5E5"> see if there is a</font>

157
00:08:10,380 --> 00:08:17,520
way<font color="#CCCCCC"> to change how javascript is loaded</font>

158
00:08:13,850 --> 00:08:18,380
<font color="#CCCCCC">to try and possibly get something close</font>

159
00:08:17,520 --> 00:08:23,390
to that

160
00:08:18,380 --> 00:08:27,180
so this is the<font color="#CCCCCC"> bin AST the JavaScript</font>

161
00:08:23,390 --> 00:08:28,740
binary abstract syntax tree<font color="#E5E5E5"> and you</font>

162
00:08:27,180 --> 00:08:31,140
actually<font color="#E5E5E5"> don't care about the fact that</font>

163
00:08:28,740 --> 00:08:31,880
it's a binary abstract syntax tree<font color="#E5E5E5"> don't</font>

164
00:08:31,140 --> 00:08:35,699
<font color="#E5E5E5">panic</font>

165
00:08:31,880 --> 00:08:38,090
you just need to remember that<font color="#E5E5E5"> that she</font>

166
00:08:35,700 --> 00:08:38,090
looks cute

167
00:08:38,159 --> 00:08:42,610
her name is best<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> way it's an</font>

168
00:08:40,870 --> 00:08:49,530
<font color="#E5E5E5">Egyptian goddess what</font>

169
00:08:42,610 --> 00:08:54,820
it's a rendition of Egyptian goddess so

170
00:08:49,530 --> 00:08:56,530
with best we try<font color="#E5E5E5"> to fix a number of the</font>

171
00:08:54,820 --> 00:09:02,740
points that<font color="#E5E5E5"> we have seen in the early</font>

172
00:08:56,530 --> 00:09:05,890
battle and try and make them faster so

173
00:09:02,740 --> 00:09:08,590
parsing<font color="#CCCCCC"> it'll really</font><font color="#E5E5E5"> clear on what</font>

174
00:09:05,890 --> 00:09:14,350
parsing is is there someone who needs a

175
00:09:08,590 --> 00:09:18,480
<font color="#E5E5E5">reminder</font><font color="#CCCCCC"> of what parsing is about so</font>

176
00:09:14,350 --> 00:09:20,950
apparently not<font color="#E5E5E5"> good parsing is slow</font>

177
00:09:18,480 --> 00:09:21,580
<font color="#E5E5E5">again first thing that was the earth the</font>

178
00:09:20,950 --> 00:09:24,220
Roger Rabbit

179
00:09:21,580 --> 00:09:27,460
who took<font color="#E5E5E5"> sometimes six seconds on some</font>

180
00:09:24,220 --> 00:09:29,470
platforms for<font color="#E5E5E5"> one megabyte parsing is</font>

181
00:09:27,460 --> 00:09:31,900
slow in many languages<font color="#E5E5E5"> and parsing is</font>

182
00:09:29,470 --> 00:09:34,120
even slower in JavaScript because<font color="#E5E5E5"> let's</font>

183
00:09:31,900 --> 00:09:38,500
face it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> syntax of JavaScript is a</font>

184
00:09:34,120 --> 00:09:42,640
bit weird<font color="#E5E5E5"> if you see a slash is it a</font>

185
00:09:38,500 --> 00:09:46,810
division<font color="#E5E5E5"> it's a comment is it a red X it</font>

186
00:09:42,640 --> 00:09:49,330
could<font color="#E5E5E5"> be anything if you see for eg the</font>

187
00:09:46,810 --> 00:09:51,069
<font color="#E5E5E5">key word is</font><font color="#CCCCCC"> it an identifier nice</font>

188
00:09:49,330 --> 00:09:56,170
permanent an identifier<font color="#E5E5E5"> but it could be</font>

189
00:09:51,070 --> 00:09:59,620
a property so it's not as easy as<font color="#E5E5E5"> many</font>

190
00:09:56,170 --> 00:10:03,400
languages<font color="#E5E5E5"> and it's even worse strings or</font>

191
00:09:59,620 --> 00:10:05,920
<font color="#E5E5E5">complicated because JavaScript tries to</font>

192
00:10:03,400 --> 00:10:08,650
represent<font color="#E5E5E5"> script strings for multi-lane</font>

193
00:10:05,920 --> 00:10:13,900
for multiple languages<font color="#CCCCCC"> and you do not</font>

194
00:10:08,650 --> 00:10:16,329
store in memory<font color="#E5E5E5"> ASCII or Korean with the</font>

195
00:10:13,900 --> 00:10:19,840
same memory model because it<font color="#CCCCCC"> wouldn't</font>

196
00:10:16,330 --> 00:10:22,390
<font color="#E5E5E5">just blow some applications if you use</font>

197
00:10:19,840 --> 00:10:25,890
the same model for everything so even

198
00:10:22,390 --> 00:10:29,020
strings<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to be verified and then</font>

199
00:10:25,890 --> 00:10:32,080
<font color="#E5E5E5">optimized so every time you see a string</font>

200
00:10:29,020 --> 00:10:35,970
<font color="#E5E5E5">in the source code while the parser is</font>

201
00:10:32,080 --> 00:10:39,310
going to spend precious<font color="#E5E5E5"> nanoseconds</font>

202
00:10:35,970 --> 00:10:42,610
trying to fit the string as best as

203
00:10:39,310 --> 00:10:46,180
possible<font color="#E5E5E5"> in its model verifying that</font>

204
00:10:42,610 --> 00:10:47,620
<font color="#E5E5E5">it's a valid string doing the escapes</font>

205
00:10:46,180 --> 00:10:49,660
<font color="#CCCCCC">it's ever</font>

206
00:10:47,620 --> 00:10:53,550
but all of this is<font color="#CCCCCC"> nothing in terms</font><font color="#E5E5E5"> of</font>

207
00:10:49,660 --> 00:10:56,910
complication with respect to eval eval<font color="#CCCCCC"> I</font>

208
00:10:53,550 --> 00:10:59,020
assume<font color="#E5E5E5"> that everybody</font><font color="#CCCCCC"> knows about</font><font color="#E5E5E5"> eval</font><font color="#CCCCCC"> I</font>

209
00:10:56,910 --> 00:11:01,740
assume that<font color="#E5E5E5"> most people don't know</font><font color="#CCCCCC"> how</font>

210
00:10:59,020 --> 00:11:03,699
<font color="#E5E5E5">evil ever is you don't want to know</font>

211
00:11:01,740 --> 00:11:05,500
fun fact there are actually four

212
00:11:03,700 --> 00:11:10,900
different<font color="#E5E5E5"> ever functions you really</font>

213
00:11:05,500 --> 00:11:12,820
<font color="#E5E5E5">don't want to</font><font color="#CCCCCC"> know but the eval itself</font>

214
00:11:10,900 --> 00:11:14,800
complicates parsing<font color="#E5E5E5"> just the fact that</font>

215
00:11:12,820 --> 00:11:18,730
there could<font color="#CCCCCC"> be an</font><font color="#E5E5E5"> effort somewhere in</font>

216
00:11:14,800 --> 00:11:22,839
the<font color="#E5E5E5"> file means that your parser has</font><font color="#CCCCCC"> a</font>

217
00:11:18,730 --> 00:11:26,980
lot<font color="#CCCCCC"> of work to do and lots of</font>

218
00:11:22,840 --> 00:11:30,970
optimizations that<font color="#E5E5E5"> cannot be done also</font>

219
00:11:26,980 --> 00:11:32,710
<font color="#CCCCCC">as I mentioned we so that's they by the</font>

220
00:11:30,970 --> 00:11:35,010
way one<font color="#CCCCCC"> of the static analysis that we</font>

221
00:11:32,710 --> 00:11:38,920
need to<font color="#E5E5E5"> run when we parse Travis</font><font color="#CCCCCC"> wait</font>

222
00:11:35,010 --> 00:11:41,220
also in dotnet again we can only<font color="#E5E5E5"> have</font>

223
00:11:38,920 --> 00:11:45,880
<font color="#E5E5E5">four we can afford to only parse bits of</font>

224
00:11:41,220 --> 00:11:48,460
the executable in JavaScript<font color="#CCCCCC"> we cannot</font>

225
00:11:45,880 --> 00:11:50,830
we have to throw<font color="#E5E5E5"> a</font><font color="#CCCCCC"> syntaxerror</font><font color="#E5E5E5"> as early</font>

226
00:11:48,460 --> 00:11:54,640
as possible<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that we cannot</font>

227
00:11:50,830 --> 00:11:57,070
<font color="#E5E5E5">simply skip parts of the code lots of</font>

228
00:11:54,640 --> 00:12:00,100
things that's get into our way<font color="#E5E5E5"> also</font>

229
00:11:57,070 --> 00:12:06,520
closures complicate things<font color="#E5E5E5"> static</font>

230
00:12:00,100 --> 00:12:10,060
analysis is needed<font color="#E5E5E5"> for closures we could</font>

231
00:12:06,520 --> 00:12:12,750
simplify it let's assume<font color="#CCCCCC"> that</font><font color="#E5E5E5"> our hands</font>

232
00:12:10,060 --> 00:12:15,520
are free and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we can do anything</font>

233
00:12:12,750 --> 00:12:18,310
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> permitted all is fair in</font>

234
00:12:15,520 --> 00:12:22,810
love<font color="#E5E5E5"> war and optimizing</font><font color="#CCCCCC"> JavaScript</font>

235
00:12:18,310 --> 00:12:24,400
<font color="#CCCCCC">startup so if we could redo</font><font color="#E5E5E5"> the syntax</font>

236
00:12:22,810 --> 00:12:28,180
of JavaScript<font color="#E5E5E5"> just the syntax</font><font color="#CCCCCC"> not the</font>

237
00:12:24,400 --> 00:12:31,120
language<font color="#CCCCCC"> just the way it's stored on</font><font color="#E5E5E5"> the</font>

238
00:12:28,180 --> 00:12:33,370
hard<font color="#E5E5E5"> drive we could simplify tokens we</font>

239
00:12:31,120 --> 00:12:36,100
could simplify strings<font color="#E5E5E5"> and we could</font>

240
00:12:33,370 --> 00:12:39,070
<font color="#E5E5E5">pre-process all of the things that we</font>

241
00:12:36,100 --> 00:12:43,630
need static analysis<font color="#E5E5E5"> and that's exactly</font>

242
00:12:39,070 --> 00:12:46,660
<font color="#E5E5E5">what we do or with binary</font><font color="#CCCCCC"> ast instead of</font>

243
00:12:43,630 --> 00:12:48,310
having<font color="#E5E5E5"> a function foo and a look</font>

244
00:12:46,660 --> 00:12:52,510
there is no<font color="#CCCCCC"> ever it's an empty function</font>

245
00:12:48,310 --> 00:12:55,550
so yeah there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> no Evo so we're going</font>

246
00:12:52,510 --> 00:12:59,250
to store binary representation

247
00:12:55,550 --> 00:13:01,800
that looks a bit more<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> so hey</font>

248
00:12:59,250 --> 00:13:03,630
we have a number<font color="#E5E5E5"> of names there is a</font>

249
00:13:01,800 --> 00:13:05,310
name<font color="#CCCCCC"> fool</font><font color="#E5E5E5"> there are probably plenty of</font>

250
00:13:03,630 --> 00:13:07,740
other names<font color="#E5E5E5"> but I'm not going to</font><font color="#CCCCCC"> put</font>

251
00:13:05,310 --> 00:13:10,530
them<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this slide and then we have a</font>

252
00:13:07,740 --> 00:13:12,420
<font color="#E5E5E5">function declaration</font><font color="#CCCCCC"> it's name is</font><font color="#E5E5E5"> the</font>

253
00:13:10,530 --> 00:13:15,390
<font color="#CCCCCC">first name of the lists on the</font><font color="#E5E5E5"> name</font>

254
00:13:12,420 --> 00:13:19,290
number<font color="#CCCCCC"> zero it</font><font color="#E5E5E5"> doesn't have any eval</font><font color="#CCCCCC"> it</font>

255
00:13:15,390 --> 00:13:22,010
has a body etc<font color="#E5E5E5"> just by the fact that we</font>

256
00:13:19,290 --> 00:13:25,620
have written here<font color="#CCCCCC"> there is no eval</font>

257
00:13:22,010 --> 00:13:27,990
<font color="#E5E5E5">instead of letting static analysis look</font>

258
00:13:25,620 --> 00:13:39,300
for an eval<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> yet error code we</font>

259
00:13:27,990 --> 00:13:42,330
make<font color="#E5E5E5"> things much faster</font><font color="#CCCCCC"> so just don't we</font>

260
00:13:39,300 --> 00:13:43,770
don't think we make things faster

261
00:13:42,330 --> 00:13:46,500
we actually have numbers we have a

262
00:13:43,770 --> 00:13:49,170
version<font color="#E5E5E5"> of Firefox that has hidden</font>

263
00:13:46,500 --> 00:13:54,240
<font color="#E5E5E5">behind the preference the ability</font><font color="#CCCCCC"> to use</font>

264
00:13:49,170 --> 00:13:57,540
the<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> SD instead of the in</font><font color="#E5E5E5"> addition</font>

265
00:13:54,240 --> 00:13:59,850
to<font color="#E5E5E5"> get a usual source code and parsing</font>

266
00:13:57,540 --> 00:14:02,610
<font color="#CCCCCC">plus verification goes down by</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> third</font>

267
00:13:59,850 --> 00:14:04,950
so<font color="#CCCCCC"> that's one third</font><font color="#E5E5E5"> of the six seconds</font>

268
00:14:02,610 --> 00:14:09,840
you saw in<font color="#CCCCCC"> the one</font><font color="#E5E5E5"> of the first slides</font>

269
00:14:04,950 --> 00:14:11,730
<font color="#E5E5E5">and we have lab experiments that show</font>

270
00:14:09,840 --> 00:14:15,090
that we<font color="#E5E5E5"> can do hopefully twice better</font>

271
00:14:11,730 --> 00:14:16,380
just by this simple<font color="#CCCCCC"> change so what we</font>

272
00:14:15,090 --> 00:14:18,270
have done so<font color="#CCCCCC"> far is basically</font><font color="#E5E5E5"> we've</font>

273
00:14:16,380 --> 00:14:22,890
<font color="#E5E5E5">changed the order of information inside</font>

274
00:14:18,270 --> 00:14:25,350
<font color="#CCCCCC">the file and what and replaced and use</font>

275
00:14:22,890 --> 00:14:27,140
numbers instead<font color="#E5E5E5"> of using words but</font>

276
00:14:25,350 --> 00:14:30,450
<font color="#E5E5E5">that's basically the same thing it's</font>

277
00:14:27,140 --> 00:14:31,860
basically a<font color="#CCCCCC"> compression format</font><font color="#E5E5E5"> Oh weird</font>

278
00:14:30,450 --> 00:14:33,720
compression format that changes the

279
00:14:31,860 --> 00:14:35,040
<font color="#CCCCCC">order in which</font><font color="#E5E5E5"> the information is</font>

280
00:14:33,720 --> 00:14:41,880
presented but it's still the<font color="#E5E5E5"> same</font>

281
00:14:35,040 --> 00:14:45,810
programming language no that was for the

282
00:14:41,880 --> 00:14:48,900
parsing speed but hey we talked<font color="#E5E5E5"> about</font>

283
00:14:45,810 --> 00:14:52,790
downloads<font color="#E5E5E5"> I just mentioned compression</font>

284
00:14:48,900 --> 00:14:52,790
formats so let's<font color="#E5E5E5"> talk about compression</font>

285
00:14:53,090 --> 00:14:57,330
<font color="#CCCCCC">we'd like to do</font><font color="#E5E5E5"> something better than</font>

286
00:14:55,230 --> 00:14:59,330
unification actually we<font color="#E5E5E5"> would like to</font>

287
00:14:57,330 --> 00:15:02,029
<font color="#E5E5E5">completely get rid of minification</font>

288
00:14:59,330 --> 00:15:05,690
I don't know if you've already faced

289
00:15:02,029 --> 00:15:07,970
<font color="#E5E5E5">minification bugs but minification yeah</font>

290
00:15:05,690 --> 00:15:11,269
<font color="#CCCCCC">I see someone who</font><font color="#E5E5E5"> had but minification</font>

291
00:15:07,970 --> 00:15:12,620
<font color="#E5E5E5">is an inherently unsafe operation</font><font color="#CCCCCC"> I mean</font>

292
00:15:11,269 --> 00:15:16,149
there are<font color="#E5E5E5"> a few things that you know you</font>

293
00:15:12,620 --> 00:15:18,529
can always do such as removing comments

294
00:15:16,149 --> 00:15:22,040
but many of the operations<font color="#CCCCCC"> that say</font>

295
00:15:18,529 --> 00:15:25,250
uglify or other tools are going<font color="#E5E5E5"> to do</font>

296
00:15:22,040 --> 00:15:27,140
can break sometimes<font color="#E5E5E5"> then you're not</font>

297
00:15:25,250 --> 00:15:28,850
really<font color="#E5E5E5"> happy when it breaks because you</font>

298
00:15:27,140 --> 00:15:31,160
know<font color="#E5E5E5"> someone somewhere in the tool chain</font>

299
00:15:28,850 --> 00:15:37,700
<font color="#E5E5E5">decided to apply some optimizing tool</font>

300
00:15:31,160 --> 00:15:39,620
that change the behavior<font color="#CCCCCC"> of the code so</font>

301
00:15:37,700 --> 00:15:43,279
we don't want<font color="#E5E5E5"> mini amplification but if</font>

302
00:15:39,620 --> 00:15:47,870
we lose minification<font color="#CCCCCC"> we're going to</font>

303
00:15:43,279 --> 00:15:49,790
increase our download size<font color="#E5E5E5"> so while we</font>

304
00:15:47,870 --> 00:15:53,029
are changing how javascript is

305
00:15:49,790 --> 00:15:57,199
represented let's see if we can make it

306
00:15:53,029 --> 00:15:59,200
<font color="#CCCCCC">more efficient in terms</font><font color="#E5E5E5"> of bandwidth so</font>

307
00:15:57,200 --> 00:16:02,450
this is a<font color="#E5E5E5"> random example of things that</font>

308
00:15:59,200 --> 00:16:05,980
<font color="#E5E5E5">happen</font><font color="#CCCCCC"> in quite some</font><font color="#E5E5E5"> few JavaScript</font>

309
00:16:02,450 --> 00:16:08,240
files you import things with<font color="#CCCCCC"> require</font>

310
00:16:05,980 --> 00:16:11,270
doesn't have to be<font color="#E5E5E5"> required but that's</font>

311
00:16:08,240 --> 00:16:14,029
an<font color="#E5E5E5"> example or you have the if constants</font>

312
00:16:11,270 --> 00:16:18,350
<font color="#E5E5E5">that debug do something probably some</font>

313
00:16:14,029 --> 00:16:20,360
logging or some additional<font color="#E5E5E5"> tests etc the</font>

314
00:16:18,350 --> 00:16:22,399
actual<font color="#E5E5E5"> details of this code don't matter</font>

315
00:16:20,360 --> 00:16:23,779
but<font color="#E5E5E5"> what matters is that you</font><font color="#CCCCCC"> have</font>

316
00:16:22,399 --> 00:16:26,630
probably<font color="#E5E5E5"> written code that looks like</font>

317
00:16:23,779 --> 00:16:28,820
<font color="#E5E5E5">this at</font><font color="#CCCCCC"> some point in your life</font><font color="#E5E5E5"> it may</font>

318
00:16:26,630 --> 00:16:32,209
not have<font color="#CCCCCC"> been called log it may</font><font color="#E5E5E5"> not have</font>

319
00:16:28,820 --> 00:16:37,490
<font color="#E5E5E5">been my</font><font color="#CCCCCC"> logger and my module here kind</font>

320
00:16:32,209 --> 00:16:41,170
<font color="#E5E5E5">of duplicate more generally when we look</font>

321
00:16:37,490 --> 00:16:44,060
at source code there was an entire

322
00:16:41,170 --> 00:16:46,370
session dedicated<font color="#E5E5E5"> to machine learning</font><font color="#CCCCCC"> on</font>

323
00:16:44,060 --> 00:16:49,279
source code<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you can learn many</font>

324
00:16:46,370 --> 00:16:53,089
things<font color="#E5E5E5"> I mean today I chose them there</font>

325
00:16:49,279 --> 00:16:55,370
was<font color="#E5E5E5"> one and I think</font><font color="#CCCCCC"> it's still on and as</font>

326
00:16:53,089 --> 00:16:57,320
I mentioned you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> learn many things</font>

327
00:16:55,370 --> 00:17:00,320
<font color="#CCCCCC">about the source code by looking at it</font>

328
00:16:57,320 --> 00:17:03,079
doesn't have to be deep learning but for

329
00:17:00,320 --> 00:17:06,439
instance<font color="#CCCCCC"> strings</font><font color="#E5E5E5"> tend to repeat often</font>

330
00:17:03,079 --> 00:17:08,839
both across files<font color="#CCCCCC"> HelloWorld is</font>

331
00:17:06,439 --> 00:17:12,560
something that happens<font color="#CCCCCC"> quite often</font><font color="#E5E5E5"> more</font>

332
00:17:08,839 --> 00:17:14,389
generally it's very<font color="#E5E5E5"> rare to not have</font>

333
00:17:12,560 --> 00:17:17,540
javascript<font color="#CCCCCC"> file doesn't</font><font color="#E5E5E5"> that does not</font>

334
00:17:14,390 --> 00:17:22,760
called console or if you're in<font color="#CCCCCC"> node</font>

335
00:17:17,540 --> 00:17:26,839
require prototype is a<font color="#E5E5E5"> property that</font>

336
00:17:22,760 --> 00:17:30,170
<font color="#CCCCCC">written</font><font color="#E5E5E5"> that comes</font><font color="#CCCCCC"> very often</font><font color="#E5E5E5"> and things</font>

337
00:17:26,839 --> 00:17:32,330
if you<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> verbal</font><font color="#CCCCCC"> x inside your code</font>

338
00:17:30,170 --> 00:17:33,650
<font color="#E5E5E5">if you have any clearly variable</font><font color="#CCCCCC"> x there</font>

339
00:17:32,330 --> 00:17:35,510
are pretty<font color="#E5E5E5"> good chances that are you</font>

340
00:17:33,650 --> 00:17:37,760
going to use it<font color="#CCCCCC"> at some</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> so you're</font>

341
00:17:35,510 --> 00:17:40,160
<font color="#E5E5E5">going to have several instances of the</font>

342
00:17:37,760 --> 00:17:42,340
same identifier<font color="#CCCCCC"> and you're going to have</font>

343
00:17:40,160 --> 00:17:46,280
patterns of usage of this

344
00:17:42,340 --> 00:17:50,720
similarly the structure console dot blog

345
00:17:46,280 --> 00:17:54,350
or console dot whatever that's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> dot</font>

346
00:17:50,720 --> 00:17:56,690
applied to console and to<font color="#E5E5E5"> log</font><font color="#CCCCCC"> and that's</font>

347
00:17:54,350 --> 00:18:00,949
<font color="#CCCCCC">something that happens a lot function</font>

348
00:17:56,690 --> 00:18:04,220
that<font color="#E5E5E5"> prototype dot something again</font>

349
00:18:00,950 --> 00:18:08,480
<font color="#E5E5E5">patterns and what we know what kind of</font>

350
00:18:04,220 --> 00:18:12,410
patterns<font color="#E5E5E5"> to look for</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> we can ask the</font>

351
00:18:08,480 --> 00:18:14,320
computer to<font color="#CCCCCC"> look for it</font><font color="#E5E5E5"> and we set our</font>

352
00:18:12,410 --> 00:18:16,850
computers in<font color="#CCCCCC"> front of corpus and</font>

353
00:18:14,320 --> 00:18:23,600
computers<font color="#E5E5E5"> we learned how to predict the</font>

354
00:18:16,850 --> 00:18:25,879
code that we are writing and with<font color="#E5E5E5"> these</font>

355
00:18:23,600 --> 00:18:27,770
kind of<font color="#E5E5E5"> things we can ask the computer</font>

356
00:18:25,880 --> 00:18:30,890
to predict the code and it's of course

357
00:18:27,770 --> 00:18:32,660
<font color="#CCCCCC">going to be wrong</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> often</font><font color="#E5E5E5"> but in the</font>

358
00:18:30,890 --> 00:18:35,990
cases<font color="#CCCCCC"> it's right</font><font color="#E5E5E5"> we don't even have to</font>

359
00:18:32,660 --> 00:18:37,760
write<font color="#E5E5E5"> the code in the file so with this</font>

360
00:18:35,990 --> 00:18:40,690
kind<font color="#E5E5E5"> of things for</font><font color="#CCCCCC"> the actual</font>

361
00:18:37,760 --> 00:18:46,280
constructions in the code such as

362
00:18:40,690 --> 00:18:49,010
expressions arithmetics<font color="#E5E5E5"> calling to</font>

363
00:18:46,280 --> 00:18:51,920
string things like that we managed<font color="#CCCCCC"> to</font>

364
00:18:49,010 --> 00:18:56,390
actually get down<font color="#CCCCCC"> to</font><font color="#E5E5E5"> one point two bits</font>

365
00:18:51,920 --> 00:18:59,930
<font color="#E5E5E5">in average for construction without</font>

366
00:18:56,390 --> 00:19:03,320
<font color="#E5E5E5">within our tests we still need to check</font>

367
00:18:59,930 --> 00:19:05,740
<font color="#CCCCCC">how good our tests</font><font color="#E5E5E5"> are still a work in</font>

368
00:19:03,320 --> 00:19:08,270
<font color="#CCCCCC">progress</font><font color="#E5E5E5"> but it's</font><font color="#CCCCCC"> pretty encouraging</font>

369
00:19:05,740 --> 00:19:09,890
<font color="#E5E5E5">it's a bit more</font><font color="#CCCCCC"> for Strings identifiers</font>

370
00:19:08,270 --> 00:19:14,740
<font color="#E5E5E5">on property uses but it's still two to</font>

371
00:19:09,890 --> 00:19:17,330
six bits for<font color="#E5E5E5"> each use of hello world</font>

372
00:19:14,740 --> 00:19:21,500
which is much better<font color="#E5E5E5"> than writing hello</font>

373
00:19:17,330 --> 00:19:22,639
world so it's different<font color="#CCCCCC"> metalwork this</font>

374
00:19:21,500 --> 00:19:25,029
<font color="#E5E5E5">compression is very much a work in</font>

375
00:19:22,640 --> 00:19:29,139
<font color="#E5E5E5">progress</font><font color="#CCCCCC"> I landed a patch come</font>

376
00:19:25,029 --> 00:19:32,409
this morning but with a good<font color="#CCCCCC"> dictionary</font>

377
00:19:29,139 --> 00:19:35,678
<font color="#E5E5E5">that we have obtained</font><font color="#CCCCCC"> by learning</font><font color="#E5E5E5"> things</font>

378
00:19:32,409 --> 00:19:37,629
are large enough corpus<font color="#E5E5E5"> we obtain</font>

379
00:19:35,679 --> 00:19:40,359
performance confession performance

380
00:19:37,629 --> 00:19:42,639
<font color="#E5E5E5">that's basically the same thing as</font>

381
00:19:40,359 --> 00:19:46,269
minification<font color="#CCCCCC"> crossbow</font><font color="#E5E5E5"> broadly except we</font>

382
00:19:42,639 --> 00:19:49,779
did not minify the code<font color="#E5E5E5"> we remove the</font>

383
00:19:46,269 --> 00:19:53,109
<font color="#CCCCCC">Campins okay but besides the comments</font>

384
00:19:49,779 --> 00:19:54,549
who did<font color="#E5E5E5"> not mean if I</font><font color="#CCCCCC"> the code and</font><font color="#E5E5E5"> we</font>

385
00:19:53,109 --> 00:19:58,389
know we were pretty<font color="#E5E5E5"> sure that we're</font>

386
00:19:54,549 --> 00:20:00,749
<font color="#E5E5E5">going to be</font><font color="#CCCCCC"> able to improve it for so so</font>

387
00:19:58,389 --> 00:20:03,758
far we<font color="#CCCCCC"> have started</font><font color="#E5E5E5"> that much faster</font>

388
00:20:00,749 --> 00:20:05,919
download that's the comparable to

389
00:20:03,759 --> 00:20:07,899
broadly<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> magnification so we have</font>

390
00:20:05,919 --> 00:20:13,989
not lost anything<font color="#CCCCCC"> and we have gains</font>

391
00:20:07,899 --> 00:20:20,619
performance<font color="#CCCCCC"> not</font><font color="#E5E5E5"> done we have a new safe</font>

392
00:20:13,989 --> 00:20:22,959
few more things in store so one thing

393
00:20:20,619 --> 00:20:26,289
that happens quite often<font color="#E5E5E5"> in source code</font>

394
00:20:22,959 --> 00:20:27,909
<font color="#CCCCCC">is big surprise you have code that</font><font color="#E5E5E5"> is</font>

395
00:20:26,289 --> 00:20:30,809
executed now and you have code that

396
00:20:27,909 --> 00:20:30,809
<font color="#E5E5E5">executed later</font>

397
00:20:31,229 --> 00:20:41,319
yeah<font color="#E5E5E5"> probably not such big surprise as I</font>

398
00:20:36,519 --> 00:20:43,179
mentioned in initially<font color="#E5E5E5"> in slides well</font>

399
00:20:41,319 --> 00:20:45,999
right now which are<font color="#CCCCCC"> a script source code</font>

400
00:20:43,179 --> 00:20:48,699
we need<font color="#CCCCCC"> to parse and static analysis</font>

401
00:20:45,999 --> 00:20:50,619
<font color="#CCCCCC">instead you can</font><font color="#E5E5E5"> listen everything but</font>

402
00:20:48,699 --> 00:20:54,659
turns out that we did the<font color="#CCCCCC"> information we</font>

403
00:20:50,619 --> 00:20:57,668
already shipped in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Indian</font><font color="#E5E5E5"> ast invest</font>

404
00:20:54,659 --> 00:21:00,339
we actually don't<font color="#E5E5E5"> need to render static</font>

405
00:20:57,669 --> 00:21:03,849
analysis on everything<font color="#E5E5E5"> and in fact we</font>

406
00:21:00,339 --> 00:21:07,589
<font color="#CCCCCC">actually don't need</font><font color="#E5E5E5"> to parse rather so</font>

407
00:21:03,849 --> 00:21:09,968
instead of this we're going<font color="#CCCCCC"> to store</font>

408
00:21:07,589 --> 00:21:14,139
separately or if not in the same place

409
00:21:09,969 --> 00:21:16,479
in the<font color="#E5E5E5"> file that's something we need</font><font color="#CCCCCC"> to</font>

410
00:21:14,139 --> 00:21:21,158
start and that's<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that we're</font>

411
00:21:16,479 --> 00:21:24,609
going<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> later so we again we have</font>

412
00:21:21,159 --> 00:21:26,019
reordered<font color="#E5E5E5"> things in the file and with</font>

413
00:21:24,609 --> 00:21:28,259
the additional<font color="#CCCCCC"> information that</font><font color="#E5E5E5"> we have</font>

414
00:21:26,019 --> 00:21:28,259
stored

415
00:21:30,840 --> 00:21:36,110
with the<font color="#E5E5E5"> additional information</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

416
00:21:32,639 --> 00:21:39,658
have stored<font color="#E5E5E5"> we have the ability to</font>

417
00:21:36,110 --> 00:21:42,059
<font color="#E5E5E5">restrict what</font><font color="#CCCCCC"> we are doing to the code</font>

418
00:21:39,659 --> 00:21:43,830
<font color="#CCCCCC">that we are actually using we don't need</font>

419
00:21:42,059 --> 00:21:47,249
to run the static analysis<font color="#E5E5E5"> on code that</font>

420
00:21:43,830 --> 00:21:48,840
were not using even the words that you

421
00:21:47,249 --> 00:21:51,840
can<font color="#CCCCCC"> use this is faster</font><font color="#E5E5E5"> but we</font><font color="#CCCCCC"> don't even</font>

422
00:21:48,840 --> 00:21:55,199
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> read it at all in many cases or</font>

423
00:21:51,840 --> 00:21:56,580
at least we<font color="#CCCCCC"> don't need to run it</font><font color="#E5E5E5"> yet we</font>

424
00:21:55,200 --> 00:22:00,230
don't<font color="#CCCCCC"> need to parse</font><font color="#E5E5E5"> we don't need to</font>

425
00:21:56,580 --> 00:22:00,230
compile things that we<font color="#E5E5E5"> don't use yet</font>

426
00:22:00,860 --> 00:22:12,240
ideally we could parse compile and

427
00:22:06,929 --> 00:22:16,230
execute<font color="#E5E5E5"> while we are receiving so we</font>

428
00:22:12,240 --> 00:22:17,869
could there is<font color="#E5E5E5"> a big other of you issues</font>

429
00:22:16,230 --> 00:22:22,070
to<font color="#CCCCCC"> hear that we have not solved yet but</font>

430
00:22:17,869 --> 00:22:24,600
some of it works<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> it's not let's</font>

431
00:22:22,070 --> 00:22:26,519
<font color="#E5E5E5">imagine a world in</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> we can start</font>

432
00:22:24,600 --> 00:22:30,748
executing JavaScript<font color="#CCCCCC"> while we're</font><font color="#E5E5E5"> still</font>

433
00:22:26,519 --> 00:22:36,450
downloading<font color="#E5E5E5"> it in this world we would be</font>

434
00:22:30,749 --> 00:22:38,249
effectively<font color="#E5E5E5"> streaming source code and so</font>

435
00:22:36,450 --> 00:22:40,889
it's not<font color="#CCCCCC"> that surprising</font><font color="#E5E5E5"> if you look at</font>

436
00:22:38,249 --> 00:22:43,499
how native or almost native executables

437
00:22:40,889 --> 00:22:45,990
work<font color="#E5E5E5"> the only node what's needed from</font>

438
00:22:43,499 --> 00:22:48,539
the disk ideally<font color="#E5E5E5"> we would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font>

439
00:22:45,990 --> 00:22:53,039
this from<font color="#CCCCCC"> the network</font><font color="#E5E5E5"> so just the way</font>

440
00:22:48,539 --> 00:22:54,749
the same<font color="#CCCCCC"> way we stream video or audio</font><font color="#E5E5E5"> we</font>

441
00:22:53,039 --> 00:22:57,658
would be streaming code and executing it

442
00:22:54,749 --> 00:22:59,129
<font color="#E5E5E5">as we receive it there are few</font>

443
00:22:57,659 --> 00:23:01,499
complications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have not solved</font>

444
00:22:59,129 --> 00:23:05,340
yet<font color="#E5E5E5"> but some subsets of it we already</font>

445
00:23:01,499 --> 00:23:10,080
<font color="#E5E5E5">have in hidden somewhere in an</font>

446
00:23:05,340 --> 00:23:12,209
experimental version<font color="#E5E5E5"> of Firefox so with</font>

447
00:23:10,080 --> 00:23:14,189
numbers that<font color="#E5E5E5"> need to be confirmed</font><font color="#CCCCCC"> we</font>

448
00:23:12,210 --> 00:23:16,619
have not checked these numbers yet so

449
00:23:14,190 --> 00:23:20,159
the other<font color="#E5E5E5"> numbers so far were checked</font>

450
00:23:16,619 --> 00:23:23,369
<font color="#E5E5E5">these ones are not but we expect that</font><font color="#CCCCCC"> we</font>

451
00:23:20,159 --> 00:23:26,759
can divide by<font color="#E5E5E5"> for the time spent parsing</font>

452
00:23:23,369 --> 00:23:29,720
during startup<font color="#E5E5E5"> and completely get</font><font color="#CCCCCC"> rid</font>

453
00:23:26,759 --> 00:23:31,590
basically of the time spent compiling

454
00:23:29,720 --> 00:23:34,700
because we're going<font color="#E5E5E5"> to happen at the</font>

455
00:23:31,590 --> 00:23:34,699
<font color="#E5E5E5">same time on a different</font><font color="#CCCCCC"> thread</font>

456
00:23:39,190 --> 00:23:49,730
so hello<font color="#CCCCCC"> game best so that's the new</font>

457
00:23:46,460 --> 00:23:52,370
scheme of this<font color="#E5E5E5"> idea world in which</font>

458
00:23:49,730 --> 00:23:53,840
everything works again we have not

459
00:23:52,370 --> 00:23:55,580
<font color="#E5E5E5">finished everything it's still</font><font color="#CCCCCC"> a work in</font>

460
00:23:53,840 --> 00:24:00,409
<font color="#CCCCCC">progress very encouraging</font><font color="#E5E5E5"> but still a</font>

461
00:23:55,580 --> 00:24:02,030
work in progress<font color="#CCCCCC"> but with best match of</font>

462
00:24:00,410 --> 00:24:04,850
<font color="#CCCCCC">the work that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> were doing in the</font>

463
00:24:02,030 --> 00:24:07,550
<font color="#E5E5E5">browser during the startup of the</font>

464
00:24:04,850 --> 00:24:11,199
application is now done on<font color="#E5E5E5"> the server or</font>

465
00:24:07,550 --> 00:24:11,200
in actually in the tool chain

466
00:24:11,560 --> 00:24:20,060
we ran the full parsing<font color="#CCCCCC"> static</font><font color="#E5E5E5"> analysis</font>

467
00:24:16,460 --> 00:24:24,010
laziness analysis and compression<font color="#CCCCCC"> in a</font>

468
00:24:20,060 --> 00:24:27,830
<font color="#E5E5E5">spot on the tool chain send small chunks</font>

469
00:24:24,010 --> 00:24:31,250
<font color="#E5E5E5">once we have a large enough chunk we can</font>

470
00:24:27,830 --> 00:24:34,490
start doing getting our<font color="#CCCCCC"> powerful</font><font color="#E5E5E5"> or</font>

471
00:24:31,250 --> 00:24:37,220
presentation our powerful<font color="#E5E5E5"> compilation</font>

472
00:24:34,490 --> 00:24:40,400
doing little parsing little analysis

473
00:24:37,220 --> 00:24:43,040
little compilation<font color="#CCCCCC"> and execute and we</font>

474
00:24:40,400 --> 00:24:48,080
<font color="#CCCCCC">are very hopeful that this is going</font><font color="#E5E5E5"> to</font>

475
00:24:43,040 --> 00:24:51,139
make the web a much nicer place an

476
00:24:48,080 --> 00:24:52,429
important<font color="#CCCCCC"> fun part is that this requires</font>

477
00:24:51,140 --> 00:24:55,610
no coding

478
00:24:52,430 --> 00:24:57,440
it's not like the refactoring a big

479
00:24:55,610 --> 00:25:01,129
application<font color="#CCCCCC"> to do have lazy loading</font>

480
00:24:57,440 --> 00:25:03,920
which is a funny complicated and often

481
00:25:01,130 --> 00:25:06,290
backfires<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you have to be exactly</font>

482
00:25:03,920 --> 00:25:10,880
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> of what is lazy loaded in which</font>

483
00:25:06,290 --> 00:25:12,290
order otherwise you just<font color="#E5E5E5"> spend</font><font color="#CCCCCC"> your last</font>

484
00:25:10,880 --> 00:25:14,930
<font color="#E5E5E5">two months making</font><font color="#CCCCCC"> your application</font>

485
00:25:12,290 --> 00:25:16,850
slower to load up to you<font color="#E5E5E5"> you want you to</font>

486
00:25:14,930 --> 00:25:22,250
make it faster<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is something that</font>

487
00:25:16,850 --> 00:25:27,679
<font color="#E5E5E5">just replaces well whatever is the last</font>

488
00:25:22,250 --> 00:25:29,240
part of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> coaching say</font><font color="#E5E5E5"> web pack we</font>

489
00:25:27,680 --> 00:25:30,950
<font color="#E5E5E5">have not changed the language</font><font color="#CCCCCC"> it's not a</font>

490
00:25:29,240 --> 00:25:32,390
competitor<font color="#CCCCCC"> to wisdom it's not a new</font>

491
00:25:30,950 --> 00:25:35,060
programming language<font color="#E5E5E5"> it's just a</font>

492
00:25:32,390 --> 00:25:36,860
<font color="#E5E5E5">compression format it's a very very</font>

493
00:25:35,060 --> 00:25:39,800
dedicated compression format that<font color="#E5E5E5"> tries</font>

494
00:25:36,860 --> 00:25:43,159
very hard to be<font color="#E5E5E5"> good for JavaScript but</font>

495
00:25:39,800 --> 00:25:46,520
it's a<font color="#E5E5E5"> compression format and with this</font>

496
00:25:43,160 --> 00:25:47,270
so<font color="#E5E5E5"> just already the 30%</font><font color="#CCCCCC"> that we can</font>

497
00:25:46,520 --> 00:25:52,280
confirm

498
00:25:47,270 --> 00:25:57,379
already a<font color="#E5E5E5"> pretty good game</font><font color="#CCCCCC"> we reduce the</font>

499
00:25:52,280 --> 00:26:05,720
total world<font color="#CCCCCC"> and well hopefully also the</font>

500
00:25:57,380 --> 00:26:07,990
<font color="#E5E5E5">energy used um here's the</font><font color="#CCCCCC"> code thank you</font>

501
00:26:05,720 --> 00:26:07,990
for listening

502
00:26:08,640 --> 00:26:16,009
[Applause]

