1
00:00:17,080 --> 00:00:21,139
<font color="#CCCCCC">alright next</font><font color="#E5E5E5"> up we've got Taekwondo son</font>

2
00:00:19,609 --> 00:00:23,199
<font color="#CCCCCC">who's gonna be talking to us about an</font>

3
00:00:21,140 --> 00:00:26,900
approach<font color="#CCCCCC"> eccentric way of updating</font>

4
00:00:23,199 --> 00:00:29,240
<font color="#E5E5E5">application containers maybe</font><font color="#CCCCCC"> yeah</font>

5
00:00:26,900 --> 00:00:31,698
<font color="#CCCCCC">alright cool I can hear myself even</font><font color="#E5E5E5"> hi</font>

6
00:00:29,240 --> 00:00:35,150
<font color="#E5E5E5">everyone my name is Tycho Anderson I</font>

7
00:00:31,699 --> 00:00:38,180
work at Cisco<font color="#E5E5E5"> on sort of a Linux</font><font color="#CCCCCC"> /</font>

8
00:00:35,150 --> 00:00:39,559
container platform and what I'm<font color="#CCCCCC"> gonna</font>

9
00:00:38,180 --> 00:00:42,620
talk<font color="#CCCCCC"> to you about</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> are basically</font>

10
00:00:39,559 --> 00:00:45,649
<font color="#E5E5E5">some ideas we have</font><font color="#CCCCCC"> about how to to do</font>

11
00:00:42,620 --> 00:00:47,718
<font color="#E5E5E5">this better</font><font color="#CCCCCC"> how did how to do updates</font>

12
00:00:45,649 --> 00:00:48,920
better and in particular a lot<font color="#E5E5E5"> of this</font>

13
00:00:47,719 --> 00:00:53,090
is a work in progress

14
00:00:48,920 --> 00:00:54,890
so I there's a slide at the<font color="#E5E5E5"> end where</font>

15
00:00:53,090 --> 00:00:57,800
it's like here's<font color="#CCCCCC"> some links to github</font>

16
00:00:54,890 --> 00:01:00,019
<font color="#E5E5E5">please come help but I'll try</font><font color="#CCCCCC"> and point</font>

17
00:00:57,800 --> 00:01:02,269
<font color="#E5E5E5">out like what we're thinking about and</font>

18
00:01:00,019 --> 00:01:04,730
then I think the<font color="#E5E5E5"> last thing I should</font><font color="#CCCCCC"> say</font>

19
00:01:02,269 --> 00:01:05,960
<font color="#E5E5E5">my boss would</font><font color="#CCCCCC"> be pissed if I flew all</font>

20
00:01:04,730 --> 00:01:12,229
the way<font color="#CCCCCC"> here and</font><font color="#E5E5E5"> didn't say we're hiring</font>

21
00:01:05,960 --> 00:01:14,149
<font color="#E5E5E5">so we're hiring check</font><font color="#CCCCCC"> so it was just</font><font color="#E5E5E5"> a</font>

22
00:01:12,229 --> 00:01:17,689
<font color="#CCCCCC">little bit of history</font><font color="#E5E5E5"> so first there</font>

23
00:01:14,150 --> 00:01:20,270
were system containers<font color="#CCCCCC"> Alexi used tar</font>

24
00:01:17,689 --> 00:01:23,809
<font color="#CCCCCC">bowls openvz had this runtime thing</font>

25
00:01:20,270 --> 00:01:26,119
where you<font color="#E5E5E5"> could do some fancy stuff with</font>

26
00:01:23,810 --> 00:01:28,220
a thing called<font color="#CCCCCC"> P loop</font><font color="#E5E5E5"> but it was mostly</font>

27
00:01:26,119 --> 00:01:31,009
<font color="#CCCCCC">just</font><font color="#E5E5E5"> a tar ball for at least for image</font>

28
00:01:28,220 --> 00:01:32,630
distribution and building<font color="#E5E5E5"> route if SS</font>

29
00:01:31,009 --> 00:01:34,100
people<font color="#E5E5E5"> generally found</font><font color="#CCCCCC"> painful there</font>

30
00:01:32,630 --> 00:01:37,820
wasn't really a lot<font color="#CCCCCC"> of tooling built</font>

31
00:01:34,100 --> 00:01:40,640
around<font color="#E5E5E5"> creating a ridah</font><font color="#CCCCCC"> fests</font>

32
00:01:37,820 --> 00:01:44,869
Alexi runs them openvz would run them

33
00:01:40,640 --> 00:01:46,670
with<font color="#E5E5E5"> this fancy</font><font color="#CCCCCC"> p loop thing but if you</font>

34
00:01:44,869 --> 00:01:49,719
will if you<font color="#E5E5E5"> as a user wanted to create</font>

35
00:01:46,670 --> 00:01:53,539
your<font color="#CCCCCC"> own accrued FS it wasn't super</font><font color="#E5E5E5"> easy</font>

36
00:01:49,719 --> 00:01:58,780
and then application<font color="#E5E5E5"> camp containers</font>

37
00:01:53,539 --> 00:02:01,009
came along and there's<font color="#E5E5E5"> kind of two</font>

38
00:01:58,780 --> 00:02:04,430
application container formats which<font color="#E5E5E5"> look</font>

39
00:02:01,009 --> 00:02:07,509
mostly the same<font color="#E5E5E5"> and they sort of made</font>

40
00:02:04,430 --> 00:02:10,160
building<font color="#E5E5E5"> Ruda fesses easy and this is</font>

41
00:02:07,509 --> 00:02:11,660
people<font color="#E5E5E5"> really liked docker because they</font>

42
00:02:10,160 --> 00:02:13,160
had the docker file and you could

43
00:02:11,660 --> 00:02:15,530
install stuff and

44
00:02:13,160 --> 00:02:18,040
in a nice<font color="#E5E5E5"> way</font><font color="#CCCCCC"> and it would</font><font color="#E5E5E5"> give</font><font color="#CCCCCC"> you an</font>

45
00:02:15,530 --> 00:02:23,500
image<font color="#E5E5E5"> at the end and that</font><font color="#CCCCCC"> was very</font><font color="#E5E5E5"> nice</font>

46
00:02:18,040 --> 00:02:26,540
<font color="#CCCCCC">and so that's sort of where we are today</font>

47
00:02:23,500 --> 00:02:29,600
is<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have both the</font><font color="#E5E5E5"> doctor</font><font color="#CCCCCC"> and OCI</font>

48
00:02:26,540 --> 00:02:32,320
formats<font color="#E5E5E5"> and people use them and they can</font>

49
00:02:29,600 --> 00:02:34,489
<font color="#E5E5E5">build containers and that's very nice</font>

50
00:02:32,320 --> 00:02:37,880
<font color="#CCCCCC">but</font><font color="#E5E5E5"> we sort of have</font><font color="#CCCCCC"> a problem about</font>

51
00:02:34,490 --> 00:02:40,940
<font color="#E5E5E5">updating and just general management of</font>

52
00:02:37,880 --> 00:02:45,650
these<font color="#E5E5E5"> things because</font><font color="#CCCCCC"> tar</font><font color="#E5E5E5"> is kind of an</font>

53
00:02:40,940 --> 00:02:48,800
old format<font color="#E5E5E5"> and so anyway</font><font color="#CCCCCC"> just some</font>

54
00:02:45,650 --> 00:02:51,560
basics before<font color="#CCCCCC"> we move on so that I can</font>

55
00:02:48,800 --> 00:02:53,510
<font color="#E5E5E5">kind of start</font><font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is I'm</font>

56
00:02:51,560 --> 00:02:56,900
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to describe the all</font><font color="#CCCCCC"> of this and</font>

57
00:02:53,510 --> 00:02:58,640
the OCI format<font color="#CCCCCC"> because that's the</font>

58
00:02:56,900 --> 00:03:02,300
tooling<font color="#CCCCCC"> that I've that</font><font color="#E5E5E5"> we've implemented</font>

59
00:02:58,640 --> 00:03:05,420
<font color="#E5E5E5">as all has to do with the OCI format but</font>

60
00:03:02,300 --> 00:03:07,430
the<font color="#CCCCCC"> docker</font><font color="#E5E5E5"> format that this is roughly</font>

61
00:03:05,420 --> 00:03:11,239
<font color="#E5E5E5">the same so anyway</font><font color="#CCCCCC"> what it looks like is</font>

62
00:03:07,430 --> 00:03:17,720
there's an index which has<font color="#CCCCCC"> a say a list</font>

63
00:03:11,240 --> 00:03:21,920
of manifests<font color="#CCCCCC"> oh all</font><font color="#E5E5E5"> my things are off</font>

64
00:03:17,720 --> 00:03:26,720
because<font color="#CCCCCC"> I've had to</font><font color="#E5E5E5"> switch from 16 to 9</font>

65
00:03:21,920 --> 00:03:28,549
with<font color="#E5E5E5"> 43 so anyway the the first</font><font color="#CCCCCC"> OCI</font>

66
00:03:26,720 --> 00:03:30,920
<font color="#CCCCCC">layout you</font><font color="#E5E5E5"> imagine the arrow pointing</font>

67
00:03:28,550 --> 00:03:33,350
<font color="#E5E5E5">from index that JSON to the bottom thing</font>

68
00:03:30,920 --> 00:03:36,559
that's it's basically<font color="#E5E5E5"> what it is is it's</font>

69
00:03:33,350 --> 00:03:39,829
a content addressed hash of a JSON blob

70
00:03:36,560 --> 00:03:42,860
that describes information about the

71
00:03:39,830 --> 00:03:45,980
<font color="#E5E5E5">image then there's config shift that</font><font color="#CCCCCC"> and</font>

72
00:03:42,860 --> 00:03:48,560
your mind up one and the config

73
00:03:45,980 --> 00:03:52,250
describes properties about<font color="#E5E5E5"> the image</font>

74
00:03:48,560 --> 00:03:53,660
<font color="#CCCCCC">like what environment variables to set</font>

75
00:03:52,250 --> 00:03:56,420
what the<font color="#E5E5E5"> entry point is things like</font><font color="#CCCCCC"> that</font>

76
00:03:53,660 --> 00:03:59,239
<font color="#CCCCCC">and then there's the</font><font color="#E5E5E5"> two layers which</font>

77
00:03:56,420 --> 00:04:02,958
are have actual bits on the<font color="#CCCCCC"> disk in the</font>

78
00:03:59,239 --> 00:04:07,459
container image<font color="#E5E5E5"> and in particular each</font>

79
00:04:02,959 --> 00:04:13,270
layer is a tar or optionally<font color="#E5E5E5"> gzip</font>

80
00:04:07,459 --> 00:04:16,670
compressed tar file and the

81
00:04:13,270 --> 00:04:19,760
the image is basically<font color="#E5E5E5"> made up of these</font>

82
00:04:16,670 --> 00:04:23,210
sets of manifests config layers these

83
00:04:19,760 --> 00:04:25,550
sorts of things<font color="#CCCCCC"> and so one of</font><font color="#E5E5E5"> the</font>

84
00:04:23,210 --> 00:04:27,200
drawbacks actually so there's basics and

85
00:04:25,550 --> 00:04:30,320
drawbacks and one of the drawbacks is

86
00:04:27,200 --> 00:04:33,170
that<font color="#CCCCCC"> it is indeed</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a tower that gzip</font>

87
00:04:30,320 --> 00:04:35,150
file<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the reasons is there's</font>

88
00:04:33,170 --> 00:04:38,500
no deduplication so the way these things

89
00:04:35,150 --> 00:04:41,989
<font color="#CCCCCC">are typically constructed</font><font color="#E5E5E5"> you build one</font>

90
00:04:38,500 --> 00:04:43,850
layer at the bottom<font color="#E5E5E5"> and then you make</font>

91
00:04:41,990 --> 00:04:45,710
<font color="#CCCCCC">some changes in</font><font color="#E5E5E5"> the next layer and for</font>

92
00:04:43,850 --> 00:04:48,950
<font color="#E5E5E5">example if you make a one byte change in</font>

93
00:04:45,710 --> 00:04:51,680
a<font color="#E5E5E5"> one gigabyte file</font><font color="#CCCCCC"> OCR the tooling says</font>

94
00:04:48,950 --> 00:04:53,510
oh this<font color="#E5E5E5"> is different</font><font color="#CCCCCC"> I'll recompress</font>

95
00:04:51,680 --> 00:04:55,130
this whole one gigabyte<font color="#E5E5E5"> file so for that</font>

96
00:04:53,510 --> 00:04:58,400
one byte changed you basically end<font color="#CCCCCC"> up</font>

97
00:04:55,130 --> 00:05:02,210
with<font color="#CCCCCC"> two gigabytes</font><font color="#E5E5E5"> of data</font><font color="#CCCCCC"> where you</font>

98
00:04:58,400 --> 00:05:04,510
<font color="#E5E5E5">really only need one</font><font color="#CCCCCC"> so there's no</font>

99
00:05:02,210 --> 00:05:08,539
deduplication like this at all of files

100
00:05:04,510 --> 00:05:12,860
<font color="#CCCCCC">or even similar bits across different</font>

101
00:05:08,540 --> 00:05:15,770
files<font color="#CCCCCC"> the white outs are kind of painful</font>

102
00:05:12,860 --> 00:05:18,350
so tar doesn't really have any concept

103
00:05:15,770 --> 00:05:20,900
<font color="#E5E5E5">of lower layers so what happens is this</font>

104
00:05:18,350 --> 00:05:26,330
<font color="#CCCCCC">the OCI standard advanced this thing</font>

105
00:05:20,900 --> 00:05:28,909
that's<font color="#E5E5E5"> called</font><font color="#CCCCCC"> wh foo and so if a</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> in</font>

106
00:05:26,330 --> 00:05:32,030
<font color="#CCCCCC">it one of the upper layers has a prefix</font>

107
00:05:28,910 --> 00:05:34,130
<font color="#E5E5E5">that's named this then it when during</font>

108
00:05:32,030 --> 00:05:36,140
<font color="#E5E5E5">the extraction process it deletes that</font>

109
00:05:34,130 --> 00:05:40,730
<font color="#E5E5E5">file and anything underneath it if it's</font>

110
00:05:36,140 --> 00:05:42,169
a directory<font color="#E5E5E5"> which is fine but then you</font>

111
00:05:40,730 --> 00:05:43,430
still have<font color="#E5E5E5"> all that data and the lower</font>

112
00:05:42,169 --> 00:05:44,930
layers<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though you're never going to</font>

113
00:05:43,430 --> 00:05:48,080
<font color="#E5E5E5">use it</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is again it's not</font>

114
00:05:44,930 --> 00:05:52,310
deduplication but it's you know<font color="#CCCCCC"> it's</font>

115
00:05:48,080 --> 00:05:53,510
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> not awesome</font><font color="#E5E5E5"> so large layers are</font>

116
00:05:52,310 --> 00:05:55,669
painful

117
00:05:53,510 --> 00:05:59,960
so in particular we have layers that are

118
00:05:55,669 --> 00:06:02,450
<font color="#E5E5E5">between 8 and</font><font color="#CCCCCC"> 10 gigabytes and gzip you</font>

119
00:05:59,960 --> 00:06:04,700
can compress<font color="#E5E5E5"> it in parallel if you're</font>

120
00:06:02,450 --> 00:06:07,340
clever<font color="#CCCCCC"> but you really can't decompress</font>

121
00:06:04,700 --> 00:06:08,750
<font color="#CCCCCC">it in parallel</font><font color="#E5E5E5"> and so that means there's</font>

122
00:06:07,340 --> 00:06:10,460
basically one<font color="#E5E5E5"> core that has to</font>

123
00:06:08,750 --> 00:06:12,710
decompress<font color="#CCCCCC"> eight gigabytes of data</font>

124
00:06:10,460 --> 00:06:17,570
<font color="#E5E5E5">because it's just one big long tar file</font>

125
00:06:12,710 --> 00:06:21,260
and so that's not<font color="#E5E5E5"> ideal</font><font color="#CCCCCC"> it can be slow</font>

126
00:06:17,570 --> 00:06:23,210
and<font color="#CCCCCC"> turns out I'm not the only one who's</font>

127
00:06:21,260 --> 00:06:25,430
observed this and this is like<font color="#CCCCCC"> a</font>

128
00:06:23,210 --> 00:06:26,150
gigantic blog post that<font color="#CCCCCC"> goes into lots</font>

129
00:06:25,430 --> 00:06:29,480
of detail

130
00:06:26,150 --> 00:06:32,000
about<font color="#E5E5E5"> what what else is wrong these are</font>

131
00:06:29,480 --> 00:06:34,580
sort of major drawbacks from<font color="#E5E5E5"> my</font>

132
00:06:32,000 --> 00:06:36,080
perspective<font color="#E5E5E5"> but there are others and</font>

133
00:06:34,580 --> 00:06:38,990
<font color="#E5E5E5">there's also a lot of history</font><font color="#CCCCCC"> about how</font>

134
00:06:36,080 --> 00:06:40,039
<font color="#CCCCCC">tarp evolved to be the way it is if</font>

135
00:06:38,990 --> 00:06:41,870
you're<font color="#E5E5E5"> interested in that sort of thing</font>

136
00:06:40,040 --> 00:06:45,770
<font color="#CCCCCC">like a lot of Munich's spelunking and</font>

137
00:06:41,870 --> 00:06:47,480
<font color="#E5E5E5">whatnot</font><font color="#CCCCCC"> so let's take a step</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> and</font>

138
00:06:45,770 --> 00:06:52,250
think<font color="#CCCCCC"> about what</font><font color="#E5E5E5"> would actually be</font>

139
00:06:47,480 --> 00:06:53,810
useful<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> particular</font><font color="#CCCCCC"> it's cisco we're</font>

140
00:06:52,250 --> 00:06:55,280
<font color="#E5E5E5">interested in image providence</font>

141
00:06:53,810 --> 00:06:58,580
so basically when the build system

142
00:06:55,280 --> 00:07:01,789
builds an image it should sign that

143
00:06:58,580 --> 00:07:03,890
image and then from then on<font color="#E5E5E5"> we can take</font>

144
00:07:01,790 --> 00:07:05,570
<font color="#E5E5E5">the signature and validate it</font><font color="#CCCCCC"> and we can</font>

145
00:07:03,890 --> 00:07:07,789
figure out<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> this is really</font><font color="#CCCCCC"> the image</font>

146
00:07:05,570 --> 00:07:10,630
<font color="#E5E5E5">that the build server built</font><font color="#CCCCCC"> it's okay to</font>

147
00:07:07,790 --> 00:07:13,780
run<font color="#E5E5E5"> nothing's nothing bad has happened</font>

148
00:07:10,630 --> 00:07:17,750
<font color="#CCCCCC">we also want auditability</font>

149
00:07:13,780 --> 00:07:20,390
<font color="#CCCCCC">so</font><font color="#E5E5E5"> basically we want some way to say the</font>

150
00:07:17,750 --> 00:07:22,220
thing that's running<font color="#E5E5E5"> on like if we have</font>

151
00:07:20,390 --> 00:07:23,960
a running machine<font color="#E5E5E5"> with a bunch of</font>

152
00:07:22,220 --> 00:07:26,420
containers deployed<font color="#E5E5E5"> we want to be able</font>

153
00:07:23,960 --> 00:07:30,229
<font color="#E5E5E5">to ask that machine are you running what</font>

154
00:07:26,420 --> 00:07:31,550
was signed at<font color="#CCCCCC"> build time and there's a</font>

155
00:07:30,230 --> 00:07:33,170
<font color="#E5E5E5">number of ways</font><font color="#CCCCCC"> to implement that I'll</font>

156
00:07:31,550 --> 00:07:35,510
talk<font color="#E5E5E5"> about it a little bit and the last</font>

157
00:07:33,170 --> 00:07:38,960
thing is or not<font color="#E5E5E5"> the last thing but one</font>

158
00:07:35,510 --> 00:07:41,000
<font color="#E5E5E5">other thing is update ability so and</font>

159
00:07:38,960 --> 00:07:45,500
this<font color="#CCCCCC"> is sort of the work-in-progress</font>

160
00:07:41,000 --> 00:07:48,080
part we would<font color="#E5E5E5"> like to be able</font><font color="#CCCCCC"> to swap</font>

161
00:07:45,500 --> 00:07:49,460
out some dependencies<font color="#E5E5E5"> without actually</font>

162
00:07:48,080 --> 00:07:53,419
having to<font color="#CCCCCC"> go back to the developer and</font>

163
00:07:49,460 --> 00:07:56,630
<font color="#E5E5E5">say hey can you can you rebuild us a new</font>

164
00:07:53,420 --> 00:07:59,030
container because we need a new<font color="#CCCCCC"> version</font>

165
00:07:56,630 --> 00:08:01,610
because there's this<font color="#CCCCCC"> CVE</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> SSL or</font>

166
00:07:59,030 --> 00:08:04,070
whatever<font color="#E5E5E5"> so we'd like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able to swap</font>

167
00:08:01,610 --> 00:08:08,870
out SSL<font color="#E5E5E5"> but still maintaining all this</font>

168
00:08:04,070 --> 00:08:10,820
<font color="#E5E5E5">other</font><font color="#CCCCCC"> stuff and then there's the last</font>

169
00:08:08,870 --> 00:08:12,200
one<font color="#E5E5E5"> is sort of</font><font color="#CCCCCC"> used less space</font><font color="#E5E5E5"> so all</font>

170
00:08:10,820 --> 00:08:13,909
<font color="#E5E5E5">the problems</font><font color="#CCCCCC"> I was just talking about</font>

171
00:08:12,200 --> 00:08:15,770
<font color="#CCCCCC">about deduplication and</font><font color="#E5E5E5"> all this stuff</font>

172
00:08:13,910 --> 00:08:17,150
<font color="#CCCCCC">if we</font><font color="#E5E5E5"> have an image</font><font color="#CCCCCC"> we don't we</font>

173
00:08:15,770 --> 00:08:18,530
<font color="#CCCCCC">shouldn't be</font><font color="#E5E5E5"> shipping around these bits</font>

174
00:08:17,150 --> 00:08:26,810
in production and nobody's<font color="#E5E5E5"> ever going to</font>

175
00:08:18,530 --> 00:08:30,919
use yeah<font color="#E5E5E5"> so if we look at image</font>

176
00:08:26,810 --> 00:08:32,690
provenance<font color="#E5E5E5"> basically you can because of</font>

177
00:08:30,920 --> 00:08:35,570
<font color="#E5E5E5">this clever thing you only have to sign</font>

178
00:08:32,690 --> 00:08:37,700
<font color="#E5E5E5">the index JSON</font><font color="#CCCCCC"> you don't have to sign</font>

179
00:08:35,570 --> 00:08:39,490
<font color="#CCCCCC">anything else</font><font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> for that is</font>

180
00:08:37,700 --> 00:08:41,919
all these layers

181
00:08:39,490 --> 00:08:45,550
else's<font color="#E5E5E5"> content</font><font color="#CCCCCC"> add rests</font><font color="#E5E5E5"> so if the index</font>

182
00:08:41,919 --> 00:08:47,589
JSON has<font color="#CCCCCC"> a sha-256 hash of the content</font>

183
00:08:45,550 --> 00:08:52,240
if somebody<font color="#E5E5E5"> changes</font><font color="#CCCCCC"> a bit all you have</font>

184
00:08:47,589 --> 00:08:54,360
<font color="#CCCCCC">to do is go verify</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the hash matches</font>

185
00:08:52,240 --> 00:08:56,830
the<font color="#CCCCCC"> filename</font><font color="#E5E5E5"> and if it doesn't then</font>

186
00:08:54,360 --> 00:08:59,410
things are<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> and you can throw an</font>

187
00:08:56,830 --> 00:09:02,020
error or whatever so<font color="#CCCCCC"> image provenance</font>

188
00:08:59,410 --> 00:09:04,089
isn't really that<font color="#E5E5E5"> hard and sort of the</font>

189
00:09:02,020 --> 00:09:08,290
image the image format design supports

190
00:09:04,089 --> 00:09:09,550
<font color="#CCCCCC">us very nicely and</font><font color="#E5E5E5"> for audibility you'd</font>

191
00:09:08,290 --> 00:09:14,349
sort of like to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to do the same</font>

192
00:09:09,550 --> 00:09:17,380
thing<font color="#CCCCCC"> because the image format</font><font color="#E5E5E5"> could</font>

193
00:09:14,350 --> 00:09:19,810
lend itself to this except<font color="#CCCCCC"> that you have</font>

194
00:09:17,380 --> 00:09:21,040
<font color="#CCCCCC">to extract all these tar files and so as</font>

195
00:09:19,810 --> 00:09:22,989
<font color="#E5E5E5">soon as you write that</font><font color="#CCCCCC"> onto a</font><font color="#E5E5E5"> file</font>

196
00:09:21,040 --> 00:09:24,819
<font color="#E5E5E5">system</font><font color="#CCCCCC"> there's you can't put the genie</font>

197
00:09:22,990 --> 00:09:27,010
<font color="#E5E5E5">back in the bottle</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so what that</font>

198
00:09:24,820 --> 00:09:29,080
<font color="#E5E5E5">means</font><font color="#CCCCCC"> is there's no way to go from a</font>

199
00:09:27,010 --> 00:09:31,120
file<font color="#CCCCCC"> system that</font><font color="#E5E5E5"> you've extracted back</font>

200
00:09:29,080 --> 00:09:34,270
into the tar format<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

201
00:09:31,120 --> 00:09:36,070
<font color="#E5E5E5">check all</font><font color="#CCCCCC"> of this stuff</font><font color="#E5E5E5"> to make sure</font>

202
00:09:34,270 --> 00:09:40,540
that the<font color="#E5E5E5"> signature</font><font color="#CCCCCC"> is valid</font><font color="#E5E5E5"> and even if</font>

203
00:09:36,070 --> 00:09:42,670
you could<font color="#E5E5E5"> you would still have</font><font color="#CCCCCC"> to keep</font>

204
00:09:40,540 --> 00:09:44,439
another copy of the tar file around<font color="#E5E5E5"> just</font>

205
00:09:42,670 --> 00:09:48,729
to<font color="#E5E5E5"> make sure that everything was there</font>

206
00:09:44,440 --> 00:09:51,520
so that's not awesome<font color="#E5E5E5"> so there is a way</font>

207
00:09:48,730 --> 00:09:53,500
actually<font color="#E5E5E5"> to do this</font><font color="#CCCCCC"> that's supported in</font>

208
00:09:51,520 --> 00:09:55,000
<font color="#E5E5E5">Linux in the kernel today which is</font><font color="#CCCCCC"> a</font>

209
00:09:53,500 --> 00:09:59,110
feature called<font color="#CCCCCC"> imma</font>

210
00:09:55,000 --> 00:10:00,279
or<font color="#E5E5E5"> ima depending on who you ask</font><font color="#CCCCCC"> and it</font>

211
00:09:59,110 --> 00:10:02,440
stands for<font color="#E5E5E5"> integrity management</font>

212
00:10:00,279 --> 00:10:05,140
<font color="#CCCCCC">architecture but what it really</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> is</font>

213
00:10:02,440 --> 00:10:08,399
you can put a hash or a signature<font color="#E5E5E5"> and</font>

214
00:10:05,140 --> 00:10:11,649
<font color="#E5E5E5">the extended attribute</font><font color="#CCCCCC"> of a file</font><font color="#E5E5E5"> and</font>

215
00:10:08,399 --> 00:10:14,529
then at<font color="#E5E5E5"> runtime the kernel will look for</font>

216
00:10:11,649 --> 00:10:17,140
<font color="#E5E5E5">this</font><font color="#CCCCCC"> special extended</font><font color="#E5E5E5"> attribute and hash</font>

217
00:10:14,529 --> 00:10:20,320
the whole file<font color="#CCCCCC"> during the open call so</font>

218
00:10:17,140 --> 00:10:21,819
that<font color="#CCCCCC"> you can you</font><font color="#E5E5E5"> can be sure that when</font>

219
00:10:20,320 --> 00:10:23,890
<font color="#E5E5E5">the kernel hands you back a valid file</font>

220
00:10:21,820 --> 00:10:26,020
descriptor that<font color="#E5E5E5"> the hash is matched and</font>

221
00:10:23,890 --> 00:10:29,010
<font color="#E5E5E5">know now that the data has been tampered</font>

222
00:10:26,020 --> 00:10:31,930
with<font color="#E5E5E5"> and that's very nice</font>

223
00:10:29,010 --> 00:10:34,300
because tar supports extended attributes

224
00:10:31,930 --> 00:10:39,670
so we could actually shoehorn<font color="#E5E5E5"> use of</font>

225
00:10:34,300 --> 00:10:42,040
<font color="#CCCCCC">imma into into the the OCI image format</font>

226
00:10:39,670 --> 00:10:43,719
without<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of changes and it would</font>

227
00:10:42,040 --> 00:10:45,130
sort of<font color="#CCCCCC"> just work</font><font color="#E5E5E5"> as long as you</font>

228
00:10:43,720 --> 00:10:47,050
distribute a policy and there's a few

229
00:10:45,130 --> 00:10:48,610
other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> but for the most</font><font color="#CCCCCC"> part you</font>

230
00:10:47,050 --> 00:10:52,329
<font color="#CCCCCC">can put the</font><font color="#E5E5E5"> metadata in the existing</font>

231
00:10:48,610 --> 00:10:53,220
format<font color="#E5E5E5"> so yeah the check sums are stored</font>

232
00:10:52,329 --> 00:10:56,430
on

233
00:10:53,220 --> 00:10:58,920
yes<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> question is why why</font><font color="#E5E5E5"> don't we</font>

234
00:10:56,430 --> 00:11:02,849
just do<font color="#E5E5E5"> this because</font><font color="#CCCCCC"> that that seems</font>

235
00:10:58,920 --> 00:11:05,250
easy<font color="#CCCCCC"> first</font><font color="#E5E5E5"> reason is</font><font color="#CCCCCC"> because then you</font>

236
00:11:02,850 --> 00:11:09,720
have<font color="#CCCCCC"> to use it</font><font color="#E5E5E5"> and if you've ever dealt</font>

237
00:11:05,250 --> 00:11:13,290
<font color="#E5E5E5">with this before it's sort of painful</font><font color="#CCCCCC"> so</font>

238
00:11:09,720 --> 00:11:15,710
the policy language<font color="#E5E5E5"> is a little bit</font>

239
00:11:13,290 --> 00:11:17,969
funky<font color="#CCCCCC"> they use a lot of very specific</font>

240
00:11:15,710 --> 00:11:20,370
<font color="#E5E5E5">terminology that really is only specific</font>

241
00:11:17,970 --> 00:11:22,890
<font color="#CCCCCC">to them so they talk the</font><font color="#E5E5E5"> way they</font><font color="#CCCCCC"> talk</font>

242
00:11:20,370 --> 00:11:24,900
about<font color="#E5E5E5"> key rings and all this sorts of</font>

243
00:11:22,890 --> 00:11:26,430
thing is kind of different<font color="#E5E5E5"> than the way</font>

244
00:11:24,900 --> 00:11:31,860
everyone<font color="#E5E5E5"> else in the whole world</font>

245
00:11:26,430 --> 00:11:34,349
understands<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> it's really not</font>

246
00:11:31,860 --> 00:11:37,290
<font color="#E5E5E5">necessary</font><font color="#CCCCCC"> so if we just sign that</font>

247
00:11:34,350 --> 00:11:39,780
<font color="#E5E5E5">manifest if we if we had a better design</font>

248
00:11:37,290 --> 00:11:42,360
we only need one<font color="#CCCCCC"> signature we just we</font>

249
00:11:39,780 --> 00:11:45,420
already have the information<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> so</font>

250
00:11:42,360 --> 00:11:48,690
we<font color="#CCCCCC"> could we</font><font color="#E5E5E5"> could do this</font><font color="#CCCCCC"> for free and</font>

251
00:11:45,420 --> 00:11:50,640
given<font color="#CCCCCC"> that the tower file</font><font color="#E5E5E5"> isn't really</font>

252
00:11:48,690 --> 00:11:52,740
ideal<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this sort of thing anyway</font>

253
00:11:50,640 --> 00:11:55,830
<font color="#CCCCCC">if we're gonna throw</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> away maybe</font><font color="#E5E5E5"> we</font>

254
00:11:52,740 --> 00:12:00,960
can be more clever<font color="#E5E5E5"> and get this for free</font>

255
00:11:55,830 --> 00:12:04,470
<font color="#CCCCCC">so so we can use</font><font color="#E5E5E5"> squash</font><font color="#CCCCCC"> efest</font><font color="#E5E5E5"> instead of</font>

256
00:12:00,960 --> 00:12:06,870
a tar file for<font color="#E5E5E5"> this and that sort of</font>

257
00:12:04,470 --> 00:12:10,620
gets us most<font color="#E5E5E5"> of the way</font><font color="#CCCCCC"> there so what is</font>

258
00:12:06,870 --> 00:12:13,800
squash efest<font color="#CCCCCC"> it's a mountable read-only</font>

259
00:12:10,620 --> 00:12:15,480
file system<font color="#E5E5E5"> and in particular</font><font color="#CCCCCC"> if you</font>

260
00:12:13,800 --> 00:12:17,160
read the kernel documentation<font color="#E5E5E5"> it says</font>

261
00:12:15,480 --> 00:12:20,550
squash FS is intended for<font color="#CCCCCC"> general</font>

262
00:12:17,160 --> 00:12:23,280
read-only file system use for archival

263
00:12:20,550 --> 00:12:26,120
use in particular<font color="#CCCCCC"> in cases where</font><font color="#E5E5E5"> a tar</font>

264
00:12:23,280 --> 00:12:28,199
gzip file<font color="#E5E5E5"> may be used</font><font color="#CCCCCC"> okay sounds good</font>

265
00:12:26,120 --> 00:12:31,140
<font color="#E5E5E5">kernel developers wrote that there's</font>

266
00:12:28,200 --> 00:12:34,170
<font color="#E5E5E5">more people maybe we should use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

267
00:12:31,140 --> 00:12:35,910
one<font color="#E5E5E5"> of the advantages of squash FS is</font>

268
00:12:34,170 --> 00:12:38,189
that the metadata is<font color="#CCCCCC"> stored separately</font>

269
00:12:35,910 --> 00:12:41,040
so if<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> how a tar file works it's</font>

270
00:12:38,190 --> 00:12:42,960
basically<font color="#CCCCCC"> just a concatenation of first</font>

271
00:12:41,040 --> 00:12:44,310
there's a header and then the header

272
00:12:42,960 --> 00:12:46,620
describes if there's going to be any

273
00:12:44,310 --> 00:12:48,359
data there's the data and then there's

274
00:12:46,620 --> 00:12:50,940
another header and then there's<font color="#E5E5E5"> another</font>

275
00:12:48,360 --> 00:12:53,520
more<font color="#E5E5E5"> data</font><font color="#CCCCCC"> and so if you want to</font><font color="#E5E5E5"> open the</font>

276
00:12:50,940 --> 00:12:54,930
last file<font color="#CCCCCC"> on</font><font color="#E5E5E5"> at our archive you'd have</font>

277
00:12:53,520 --> 00:12:58,199
to seek all the way through the whole

278
00:12:54,930 --> 00:12:59,310
thing and then you'd figure out<font color="#E5E5E5"> okay</font>

279
00:12:58,200 --> 00:13:01,470
this<font color="#CCCCCC"> is the file I want and then you</font>

280
00:12:59,310 --> 00:13:02,939
open<font color="#E5E5E5"> it and then if you know the next</font>

281
00:13:01,470 --> 00:13:04,260
file that somebody tries<font color="#CCCCCC"> to open</font><font color="#E5E5E5"> is the</font>

282
00:13:02,940 --> 00:13:05,610
<font color="#E5E5E5">second-to-last file then you</font><font color="#CCCCCC"> have to</font>

283
00:13:04,260 --> 00:13:06,959
<font color="#CCCCCC">seek all the way again</font>

284
00:13:05,610 --> 00:13:09,839
to the<font color="#E5E5E5"> second-last file you can imagine</font>

285
00:13:06,959 --> 00:13:11,219
building<font color="#E5E5E5"> some index but these guys</font>

286
00:13:09,839 --> 00:13:14,730
already did it the<font color="#E5E5E5"> metadata is stored</font>

287
00:13:11,220 --> 00:13:16,529
separately with pointers into into the

288
00:13:14,730 --> 00:13:21,329
various points<font color="#E5E5E5"> where the file data is</font>

289
00:13:16,529 --> 00:13:24,570
actually stored<font color="#E5E5E5"> so it's C Keable and if</font>

290
00:13:21,329 --> 00:13:26,099
the last<font color="#E5E5E5"> thing is they support parallel</font>

291
00:13:24,570 --> 00:13:30,149
compression so this<font color="#E5E5E5"> problem I described</font>

292
00:13:26,100 --> 00:13:31,740
earlier<font color="#E5E5E5"> about because you it's one big</font>

293
00:13:30,149 --> 00:13:33,269
thing you have to decompress it<font color="#E5E5E5"> all on</font>

294
00:13:31,740 --> 00:13:37,170
<font color="#E5E5E5">one</font><font color="#CCCCCC"> core you don't have to do that</font><font color="#E5E5E5"> with</font>

295
00:13:33,269 --> 00:13:40,140
squash<font color="#CCCCCC"> FS so how what would</font><font color="#E5E5E5"> this</font>

296
00:13:37,170 --> 00:13:42,479
<font color="#CCCCCC">actually look like so basically we just</font>

297
00:13:40,140 --> 00:13:46,709
<font color="#E5E5E5">use a squash of s file system instead of</font>

298
00:13:42,480 --> 00:13:50,040
the<font color="#E5E5E5"> tar blobs and so then we can mount</font>

299
00:13:46,709 --> 00:13:52,619
each layer as a as a squash<font color="#CCCCCC"> efest thing</font>

300
00:13:50,040 --> 00:13:54,870
just directly<font color="#E5E5E5"> out of the</font><font color="#CCCCCC"> image and then</font>

301
00:13:52,620 --> 00:13:58,560
we can map the<font color="#CCCCCC"> whole thing with an</font>

302
00:13:54,870 --> 00:14:01,910
overlay FS and thus we only have one

303
00:13:58,560 --> 00:14:04,140
copy<font color="#CCCCCC"> of the data it's C Keable it's fast</font>

304
00:14:01,910 --> 00:14:09,180
<font color="#E5E5E5">we can do the signature</font><font color="#CCCCCC"> verification</font>

305
00:14:04,140 --> 00:14:11,370
<font color="#E5E5E5">because the blobs aren't being extracted</font>

306
00:14:09,180 --> 00:14:12,810
they're put<font color="#CCCCCC"> onto</font><font color="#E5E5E5"> some file system or</font>

307
00:14:11,370 --> 00:14:15,890
really mutated in<font color="#E5E5E5"> any way they're just</font>

308
00:14:12,810 --> 00:14:19,979
<font color="#CCCCCC">mounted straight</font><font color="#E5E5E5"> out of the image and</font>

309
00:14:15,890 --> 00:14:25,829
everyone's happy<font color="#E5E5E5"> except there's some</font>

310
00:14:19,980 --> 00:14:29,209
issues<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> overlook one issue would</font>

311
00:14:25,829 --> 00:14:32,120
overlay is that the way<font color="#E5E5E5"> that you pass</font>

312
00:14:29,209 --> 00:14:36,630
directories the way that you describe

313
00:14:32,120 --> 00:14:38,940
<font color="#E5E5E5">put the layers in this order is with</font>

314
00:14:36,630 --> 00:14:41,760
mount options<font color="#E5E5E5"> and mount options are</font>

315
00:14:38,940 --> 00:14:44,640
currently limited<font color="#E5E5E5"> to 4096 characters or</font>

316
00:14:41,760 --> 00:14:46,079
one<font color="#E5E5E5"> page so I guess</font><font color="#CCCCCC"> unarmed</font><font color="#E5E5E5"> probably</font>

317
00:14:44,640 --> 00:14:51,420
it's this<font color="#E5E5E5"> isn't a problem but if you're</font>

318
00:14:46,079 --> 00:14:53,160
on x86<font color="#E5E5E5"> this is a problem and roughly</font>

319
00:14:51,420 --> 00:14:55,110
what that means is you get<font color="#E5E5E5"> about 55</font>

320
00:14:53,160 --> 00:14:57,000
layers<font color="#CCCCCC"> so if your</font><font color="#E5E5E5"> container has more</font>

321
00:14:55,110 --> 00:14:59,160
<font color="#E5E5E5">than 55 layers this strategy won't work</font>

322
00:14:57,000 --> 00:15:02,010
<font color="#E5E5E5">for you and it's I say approximately</font>

323
00:14:59,160 --> 00:15:04,050
because<font color="#CCCCCC"> it depends on you</font><font color="#E5E5E5"> know kind of</font>

324
00:15:02,010 --> 00:15:05,430
what the path you're mounting out of

325
00:15:04,050 --> 00:15:07,199
course if you're mounting it's some<font color="#CCCCCC"> very</font>

326
00:15:05,430 --> 00:15:08,130
deep<font color="#E5E5E5"> path then you get a lot less but if</font>

327
00:15:07,199 --> 00:15:11,459
you're mounting<font color="#CCCCCC"> it's something</font>

328
00:15:08,130 --> 00:15:13,470
reasonable<font color="#CCCCCC"> VAR</font><font color="#E5E5E5"> Lib whatever</font><font color="#CCCCCC"> OCI</font>

329
00:15:11,459 --> 00:15:15,270
<font color="#E5E5E5">something something the math works out</font>

330
00:15:13,470 --> 00:15:17,930
to<font color="#CCCCCC"> be 55 layers</font>

331
00:15:15,270 --> 00:15:21,350
roughly so

332
00:15:17,930 --> 00:15:22,849
and I<font color="#E5E5E5"> don't know if anybody hears has</font>

333
00:15:21,350 --> 00:15:24,910
containers or images<font color="#CCCCCC"> that they're</font>

334
00:15:22,850 --> 00:15:30,170
<font color="#E5E5E5">building with more than</font><font color="#CCCCCC"> 55</font><font color="#E5E5E5"> layers but we</font>

335
00:15:24,910 --> 00:15:31,370
we have<font color="#E5E5E5"> roughly 200 so we've we can work</font>

336
00:15:30,170 --> 00:15:33,979
<font color="#CCCCCC">around this but it's kind of a</font>

337
00:15:31,370 --> 00:15:37,670
limitation they also have a non custom

338
00:15:33,980 --> 00:15:40,040
<font color="#CCCCCC">ol</font><font color="#E5E5E5"> customizable</font><font color="#CCCCCC"> wite-out format so in</font>

339
00:15:37,670 --> 00:15:44,689
<font color="#E5E5E5">particular they do</font><font color="#CCCCCC"> whiteouts differently</font>

340
00:15:40,040 --> 00:15:48,680
than<font color="#CCCCCC"> OCI does so</font><font color="#E5E5E5"> the way they do it is</font>

341
00:15:44,690 --> 00:15:51,800
with a device node that's of<font color="#CCCCCC"> major/minor</font>

342
00:15:48,680 --> 00:15:57,680
type<font color="#E5E5E5"> 0 0 whereas those high specs says</font>

343
00:15:51,800 --> 00:15:59,990
do with this<font color="#CCCCCC"> wh dot prefix and so if you</font>

344
00:15:57,680 --> 00:16:02,359
generate an image<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> it's it's</font>

345
00:15:59,990 --> 00:16:03,590
not exactly<font color="#E5E5E5"> an</font><font color="#CCCCCC"> OCI image because a it's</font>

346
00:16:02,360 --> 00:16:06,440
using<font color="#E5E5E5"> squash</font><font color="#CCCCCC"> of us in the first place</font>

347
00:16:03,590 --> 00:16:08,090
<font color="#CCCCCC">but B if you if you want to</font><font color="#E5E5E5"> use squash</font>

348
00:16:06,440 --> 00:16:13,220
<font color="#CCCCCC">effects in</font><font color="#E5E5E5"> this way you have</font><font color="#CCCCCC"> to use</font>

349
00:16:08,090 --> 00:16:15,590
these<font color="#E5E5E5"> these device nodes instead of the</font>

350
00:16:13,220 --> 00:16:17,210
<font color="#E5E5E5">white out prefixes</font><font color="#CCCCCC"> so that's sort</font><font color="#E5E5E5"> of</font>

351
00:16:15,590 --> 00:16:20,600
annoying<font color="#E5E5E5"> and that's hard-coded in the</font>

352
00:16:17,210 --> 00:16:23,930
kernel<font color="#E5E5E5"> so it's difficult</font><font color="#CCCCCC"> to change</font><font color="#E5E5E5"> so</font>

353
00:16:20,600 --> 00:16:25,790
that's<font color="#CCCCCC"> not awesome this is a minor thing</font>

354
00:16:23,930 --> 00:16:27,410
<font color="#CCCCCC">but it doesn't support exactly</font><font color="#E5E5E5"> one layer</font>

355
00:16:25,790 --> 00:16:30,610
<font color="#CCCCCC">so if you have a container</font><font color="#E5E5E5"> with exactly</font>

356
00:16:27,410 --> 00:16:32,719
one layer<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to do some some</font>

357
00:16:30,610 --> 00:16:34,520
fiddling around<font color="#E5E5E5"> with it in order to get</font>

358
00:16:32,720 --> 00:16:37,190
it<font color="#E5E5E5"> to work so the tooling I've written</font>

359
00:16:34,520 --> 00:16:41,660
does all that but<font color="#E5E5E5"> just it's a it's a</font>

360
00:16:37,190 --> 00:16:43,790
thing<font color="#E5E5E5"> to remember</font><font color="#CCCCCC"> yeah and so this is</font>

361
00:16:41,660 --> 00:16:46,699
relevant<font color="#E5E5E5"> because base images have this</font>

362
00:16:43,790 --> 00:16:51,199
format<font color="#CCCCCC"> there's also some issues</font><font color="#E5E5E5"> with</font>

363
00:16:46,700 --> 00:16:52,700
squash<font color="#CCCCCC"> effects so when we're looking</font><font color="#E5E5E5"> at</font>

364
00:16:51,200 --> 00:16:55,310
playing around with this<font color="#E5E5E5"> the first thing</font>

365
00:16:52,700 --> 00:16:56,960
is it's not really<font color="#E5E5E5"> active</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the last</font>

366
00:16:55,310 --> 00:17:02,510
commit in the kernel tree was from

367
00:16:56,960 --> 00:17:03,860
<font color="#E5E5E5">August of 2018 so people are not sending</font>

368
00:17:02,510 --> 00:17:07,160
a lot of<font color="#CCCCCC"> patches</font><font color="#E5E5E5"> and maybe that means</font>

369
00:17:03,860 --> 00:17:09,380
it's<font color="#E5E5E5"> done</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> don't think so</font><font color="#CCCCCC"> because</font>

370
00:17:07,160 --> 00:17:11,839
there's also<font color="#E5E5E5"> really no user space</font>

371
00:17:09,380 --> 00:17:14,000
libraries for generating blobs<font color="#CCCCCC"> in</font>

372
00:17:11,839 --> 00:17:15,589
particular<font color="#E5E5E5"> the way that you generate a</font>

373
00:17:14,000 --> 00:17:19,849
squatch of s is with this tool called

374
00:17:15,589 --> 00:17:21,109
make squash<font color="#E5E5E5"> FS and</font><font color="#CCCCCC"> basically there's</font>

375
00:17:19,849 --> 00:17:24,079
just<font color="#CCCCCC"> a whole bunch</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> command-line</font>

376
00:17:21,109 --> 00:17:25,429
arguments you can pass this thing<font color="#E5E5E5"> so if</font>

377
00:17:24,079 --> 00:17:27,829
you look in the code<font color="#CCCCCC"> for what I've done</font>

378
00:17:25,430 --> 00:17:28,470
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do this we basically build up this</font>

379
00:17:27,829 --> 00:17:30,539
<font color="#E5E5E5">massive</font>

380
00:17:28,470 --> 00:17:33,990
<font color="#E5E5E5">command-line argument of exclude these</font>

381
00:17:30,539 --> 00:17:36,929
<font color="#E5E5E5">files but include these ones</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that we</font>

382
00:17:33,990 --> 00:17:38,970
can<font color="#E5E5E5"> generate exactly the</font><font color="#CCCCCC"> laird</font><font color="#E5E5E5"> if that</font>

383
00:17:36,929 --> 00:17:44,070
we want<font color="#E5E5E5"> for a particular layer which</font>

384
00:17:38,970 --> 00:17:48,570
isn't really awesome<font color="#CCCCCC"> so it's yeah it's</font>

385
00:17:44,070 --> 00:17:50,129
kind of a brutal hack<font color="#CCCCCC"> so it doesn't</font>

386
00:17:48,570 --> 00:17:51,928
<font color="#CCCCCC">support some file system</font><font color="#E5E5E5"> printed</font>

387
00:17:50,130 --> 00:17:54,510
primitives that containers use the

388
00:17:51,929 --> 00:18:00,480
<font color="#E5E5E5">biggest one is</font><font color="#CCCCCC"> ACLs so for example</font><font color="#E5E5E5"> we</font>

389
00:17:54,510 --> 00:18:03,510
are<font color="#E5E5E5"> sometimes we use sent to us and sent</font>

390
00:18:00,480 --> 00:18:07,460
to<font color="#E5E5E5"> us uses ACLs</font><font color="#CCCCCC"> and various places</font><font color="#E5E5E5"> to in</font>

391
00:18:03,510 --> 00:18:11,760
order<font color="#E5E5E5"> so a classic example is ping ping</font>

392
00:18:07,460 --> 00:18:14,640
<font color="#E5E5E5">needs to have cap net raw in order to be</font>

393
00:18:11,760 --> 00:18:18,690
able<font color="#E5E5E5"> to send the right kind of packets</font>

394
00:18:14,640 --> 00:18:20,730
out<font color="#CCCCCC"> and everyone used to have it as set</font>

395
00:18:18,690 --> 00:18:22,049
UID<font color="#CCCCCC"> and then there's</font><font color="#E5E5E5"> all this discussion</font>

396
00:18:20,730 --> 00:18:26,130
about why the hell do we have ping is

397
00:18:22,049 --> 00:18:27,960
set UID so they started using ACLs<font color="#E5E5E5"> and</font>

398
00:18:26,130 --> 00:18:29,760
capabilities and<font color="#E5E5E5"> stuff so anyway</font>

399
00:18:27,960 --> 00:18:31,110
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> matter it</font><font color="#CCCCCC"> doesn't</font>

400
00:18:29,760 --> 00:18:36,720
support<font color="#E5E5E5"> ACL that's sort</font><font color="#CCCCCC"> of annoying</font>

401
00:18:31,110 --> 00:18:39,149
<font color="#CCCCCC">there are others</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so there probably</font>

402
00:18:36,720 --> 00:18:43,039
<font color="#CCCCCC">does need to be some</font><font color="#E5E5E5"> work on squash of s</font>

403
00:18:39,150 --> 00:18:46,370
if we work to continue<font color="#E5E5E5"> down this path</font>

404
00:18:43,039 --> 00:18:52,740
<font color="#CCCCCC">but we're doing this anyway</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> though</font>

405
00:18:46,370 --> 00:18:55,530
there are<font color="#CCCCCC"> all these</font><font color="#E5E5E5"> problems and</font><font color="#CCCCCC"> I guess</font>

406
00:18:52,740 --> 00:18:57,360
<font color="#CCCCCC">one thing to say here is we're doing</font><font color="#E5E5E5"> it</font>

407
00:18:55,530 --> 00:18:58,770
kind of in the way I've described which

408
00:18:57,360 --> 00:18:59,850
<font color="#CCCCCC">is sort of</font><font color="#E5E5E5"> trying to thread all these</font>

409
00:18:58,770 --> 00:19:02,580
hacks<font color="#CCCCCC"> together because we're</font><font color="#E5E5E5"> really</font>

410
00:18:59,850 --> 00:19:06,149
<font color="#E5E5E5">trying to see if this will work</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

411
00:19:02,580 --> 00:19:09,030
one of<font color="#CCCCCC"> these places where</font><font color="#E5E5E5"> other people's</font>

412
00:19:06,150 --> 00:19:11,340
input<font color="#CCCCCC"> would be appreciated I think I</font>

413
00:19:09,030 --> 00:19:14,039
have a slide later<font color="#E5E5E5"> but there's some talk</font>

414
00:19:11,340 --> 00:19:16,289
about<font color="#E5E5E5"> an</font><font color="#CCCCCC"> OC ivy - and what was that</font><font color="#E5E5E5"> look</font>

415
00:19:14,039 --> 00:19:18,179
like I know there's been<font color="#CCCCCC"> a lot of work</font>

416
00:19:16,289 --> 00:19:20,190
in<font color="#CCCCCC"> systemd</font><font color="#E5E5E5"> and this tool called see</font>

417
00:19:18,179 --> 00:19:21,530
<font color="#E5E5E5">async which is content addressable sync</font>

418
00:19:20,190 --> 00:19:24,059
that addresses a lot of the

419
00:19:21,530 --> 00:19:26,549
deduplication issues but doesn't

420
00:19:24,059 --> 00:19:31,320
<font color="#CCCCCC">necessarily address the sort of signing</font>

421
00:19:26,549 --> 00:19:34,168
and<font color="#E5E5E5"> audited auditing issues so if you're</font>

422
00:19:31,320 --> 00:19:36,120
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this sort of problem come</font>

423
00:19:34,169 --> 00:19:38,010
talk to me we'd be<font color="#CCCCCC"> interested in</font>

424
00:19:36,120 --> 00:19:38,800
<font color="#E5E5E5">collaborating on potentially designing a</font>

425
00:19:38,010 --> 00:19:40,270
new image form

426
00:19:38,800 --> 00:19:44,649
I don't I don't<font color="#E5E5E5"> know exactly what</font><font color="#CCCCCC"> that</font>

427
00:19:40,270 --> 00:19:46,570
<font color="#E5E5E5">looks</font><font color="#CCCCCC"> like but</font><font color="#E5E5E5"> anyway I've sort of this</font>

428
00:19:44,650 --> 00:19:49,660
is all<font color="#CCCCCC"> sighs and sort of</font><font color="#E5E5E5"> in the weeds</font>

429
00:19:46,570 --> 00:19:51,970
<font color="#CCCCCC">but one of the things that we're</font><font color="#E5E5E5"> really</font>

430
00:19:49,660 --> 00:19:54,010
interested in is updating containers and

431
00:19:51,970 --> 00:19:58,180
sort of the<font color="#E5E5E5"> original pitch of this talk</font>

432
00:19:54,010 --> 00:20:01,470
is is operator centric way to update

433
00:19:58,180 --> 00:20:04,900
containers so what does<font color="#CCCCCC"> that look like</font>

434
00:20:01,470 --> 00:20:07,930
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you think of sort of the ways</font><font color="#CCCCCC"> to</font>

435
00:20:04,900 --> 00:20:11,500
implement containers as a spectrum or

436
00:20:07,930 --> 00:20:14,980
implement<font color="#E5E5E5"> rather I guess like code</font>

437
00:20:11,500 --> 00:20:17,730
<font color="#CCCCCC">management as a spectrum there on on one</font>

438
00:20:14,980 --> 00:20:20,980
end of the spectrum there's docker or

439
00:20:17,730 --> 00:20:22,540
<font color="#CCCCCC">OCI images which are bit</font><font color="#E5E5E5"> 4-bit exactly</font>

440
00:20:20,980 --> 00:20:24,460
what the developer built you get exactly

441
00:20:22,540 --> 00:20:27,310
<font color="#CCCCCC">those same bits so in particular</font><font color="#E5E5E5"> you get</font>

442
00:20:24,460 --> 00:20:28,810
the same version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> SSL you get the same</font>

443
00:20:27,310 --> 00:20:30,280
version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Python you get the same</font>

444
00:20:28,810 --> 00:20:32,409
version<font color="#CCCCCC"> of Java you get the same version</font>

445
00:20:30,280 --> 00:20:34,870
<font color="#E5E5E5">of all the dependencies in the whole</font>

446
00:20:32,410 --> 00:20:36,430
world<font color="#E5E5E5"> that the developer</font><font color="#CCCCCC"> used so you</font>

447
00:20:34,870 --> 00:20:39,340
know<font color="#CCCCCC"> exactly that that's</font><font color="#E5E5E5"> going to run</font>

448
00:20:36,430 --> 00:20:40,360
and that's very nice<font color="#CCCCCC"> but then it you</font>

449
00:20:39,340 --> 00:20:41,800
<font color="#CCCCCC">know you</font><font color="#E5E5E5"> have all these</font><font color="#CCCCCC"> problems where</font>

450
00:20:40,360 --> 00:20:43,120
you<font color="#E5E5E5"> have to go back hat in hand to the</font>

451
00:20:41,800 --> 00:20:45,610
guy and<font color="#CCCCCC"> ask him can you build</font><font color="#E5E5E5"> us another</font>

452
00:20:43,120 --> 00:20:48,760
version<font color="#E5E5E5"> with an updated dependency of</font>

453
00:20:45,610 --> 00:20:50,530
<font color="#E5E5E5">SSL or whatever because well you got the</font>

454
00:20:48,760 --> 00:20:52,629
<font color="#E5E5E5">exactly the same bits that that guy had</font>

455
00:20:50,530 --> 00:20:54,340
<font color="#CCCCCC">that means you have all the same bugs</font>

456
00:20:52,630 --> 00:20:56,290
that he had and there's software bugs

457
00:20:54,340 --> 00:20:59,040
and security<font color="#E5E5E5"> stuff and whatever so you</font>

458
00:20:56,290 --> 00:21:01,480
got a patch stuff<font color="#CCCCCC"> and at the other end</font>

459
00:20:59,040 --> 00:21:07,060
<font color="#E5E5E5">there's traditional application</font>

460
00:21:01,480 --> 00:21:09,760
packaging<font color="#E5E5E5"> so that's like if the way we</font>

461
00:21:07,060 --> 00:21:11,800
used<font color="#E5E5E5"> to do it where you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> build some</font>

462
00:21:09,760 --> 00:21:14,170
container or<font color="#E5E5E5"> you would build some thing</font>

463
00:21:11,800 --> 00:21:18,790
outside<font color="#E5E5E5"> of a container you would you</font>

464
00:21:14,170 --> 00:21:21,310
know install it somehow<font color="#CCCCCC"> or you you know</font>

465
00:21:18,790 --> 00:21:23,230
<font color="#E5E5E5">build a Deb package or something</font><font color="#CCCCCC"> that</font>

466
00:21:21,310 --> 00:21:25,600
Deb packet would<font color="#E5E5E5"> list its dependencies</font>

467
00:21:23,230 --> 00:21:28,900
you<font color="#CCCCCC"> get some version that isn't exactly</font>

468
00:21:25,600 --> 00:21:30,399
<font color="#CCCCCC">the</font><font color="#E5E5E5"> right match</font><font color="#CCCCCC"> because you know</font>

469
00:21:28,900 --> 00:21:32,020
whatever you were<font color="#CCCCCC"> using on your local</font>

470
00:21:30,400 --> 00:21:34,840
<font color="#CCCCCC">machine is different</font><font color="#E5E5E5"> when you built the</font>

471
00:21:32,020 --> 00:21:37,600
Deb than the<font color="#E5E5E5"> production environments and</font>

472
00:21:34,840 --> 00:21:39,189
so some little<font color="#E5E5E5"> bug somewhere causes</font>

473
00:21:37,600 --> 00:21:40,689
things to<font color="#CCCCCC"> screw up and that's</font><font color="#E5E5E5"> annoying</font>

474
00:21:39,190 --> 00:21:43,810
and that's why we all<font color="#E5E5E5"> switch to docker</font>

475
00:21:40,690 --> 00:21:46,390
in the first place so this is a

476
00:21:43,810 --> 00:21:49,960
continuum and I guess the insight here

477
00:21:46,390 --> 00:21:52,630
<font color="#CCCCCC">is that you you probably want something</font>

478
00:21:49,960 --> 00:21:55,570
<font color="#E5E5E5">in the middle in particular</font>

479
00:21:52,630 --> 00:21:57,850
you may know<font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay I really</font><font color="#CCCCCC"> depend</font>

480
00:21:55,570 --> 00:22:00,220
on<font color="#E5E5E5"> this exact version of Python because</font>

481
00:21:57,850 --> 00:22:01,959
you know we you know I don't know the

482
00:22:00,220 --> 00:22:03,759
garbage collector has this<font color="#E5E5E5"> particular</font>

483
00:22:01,960 --> 00:22:06,639
<font color="#CCCCCC">behavior and we really care about that</font>

484
00:22:03,759 --> 00:22:10,779
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we're a cool hft firm and we</font>

485
00:22:06,639 --> 00:22:12,939
care<font color="#CCCCCC"> about things</font><font color="#E5E5E5"> like that</font><font color="#CCCCCC"> so maybe you</font>

486
00:22:10,779 --> 00:22:16,360
really know<font color="#CCCCCC"> that Python</font><font color="#E5E5E5"> super important</font>

487
00:22:12,940 --> 00:22:18,220
<font color="#E5E5E5">but you know if you're over here in</font><font color="#CCCCCC"> your</font>

488
00:22:16,360 --> 00:22:21,449
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about some library</font><font color="#E5E5E5"> that nobody</font>

489
00:22:18,220 --> 00:22:27,370
really<font color="#CCCCCC"> I don't know isn't</font><font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> that</font>

490
00:22:21,450 --> 00:22:30,580
important or<font color="#E5E5E5"> is mostly unused or</font>

491
00:22:27,370 --> 00:22:33,129
whatever<font color="#E5E5E5"> or you</font><font color="#CCCCCC"> know is like SSL where</font>

492
00:22:30,580 --> 00:22:34,658
there's maybe<font color="#CCCCCC"> not a lot of functionality</font>

493
00:22:33,129 --> 00:22:37,600
updates but there's definitely<font color="#CCCCCC"> some</font>

494
00:22:34,659 --> 00:22:39,429
security updates<font color="#CCCCCC"> you don't necessarily</font>

495
00:22:37,600 --> 00:22:42,789
care<font color="#E5E5E5"> exactly what version of SSL you are</font>

496
00:22:39,429 --> 00:22:45,070
using<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just want the</font><font color="#E5E5E5"> latest one</font><font color="#CCCCCC"> so</font>

497
00:22:42,789 --> 00:22:50,649
what you'd<font color="#CCCCCC"> really like to</font><font color="#E5E5E5"> do is in some</font>

498
00:22:45,070 --> 00:22:52,689
cases<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to use that the the exact</font>

499
00:22:50,649 --> 00:22:55,299
same version<font color="#E5E5E5"> and in other cases you</font>

500
00:22:52,690 --> 00:22:57,250
<font color="#E5E5E5">don't and you want to use kind</font><font color="#CCCCCC"> of</font>

501
00:22:55,299 --> 00:23:00,179
whatever the latest<font color="#E5E5E5"> is and allow people</font>

502
00:22:57,250 --> 00:23:04,690
<font color="#E5E5E5">to kind of update it out from under you</font>

503
00:23:00,179 --> 00:23:07,120
<font color="#CCCCCC">and so one of</font><font color="#E5E5E5"> the tools that I wrote is</font>

504
00:23:04,690 --> 00:23:08,559
called<font color="#E5E5E5"> stacker and it has this it's sort</font>

505
00:23:07,120 --> 00:23:10,508
<font color="#E5E5E5">of you can think</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it like docker for</font>

506
00:23:08,559 --> 00:23:13,120
<font color="#E5E5E5">the purposes of this and this is sort of</font>

507
00:23:10,509 --> 00:23:14,500
the basic format<font color="#CCCCCC"> I'm not gonna</font><font color="#E5E5E5"> explain a</font>

508
00:23:13,120 --> 00:23:16,559
lot of<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> basically what you can</font><font color="#E5E5E5"> see</font>

509
00:23:14,500 --> 00:23:19,720
<font color="#CCCCCC">is there's two applications a and B and</font>

510
00:23:16,559 --> 00:23:23,200
they both depend<font color="#E5E5E5"> on open</font><font color="#CCCCCC"> SSL and Python</font>

511
00:23:19,720 --> 00:23:25,000
3 and there's some you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> way that you</font>

512
00:23:23,200 --> 00:23:27,820
install them<font color="#E5E5E5"> you clone the repo and you</font>

513
00:23:25,000 --> 00:23:29,649
run some install<font color="#CCCCCC"> script but the first</font>

514
00:23:27,820 --> 00:23:34,029
thing<font color="#E5E5E5"> you do is you yum</font><font color="#CCCCCC"> install those</font>

515
00:23:29,649 --> 00:23:35,889
two libraries<font color="#CCCCCC"> and so in this in</font><font color="#E5E5E5"> this</font>

516
00:23:34,029 --> 00:23:39,070
<font color="#E5E5E5">world there's really not a great way to</font>

517
00:23:35,889 --> 00:23:40,779
say<font color="#E5E5E5"> I'm gonna rip this layer out and I'm</font>

518
00:23:39,070 --> 00:23:43,870
gonna<font color="#E5E5E5"> stick this</font><font color="#CCCCCC"> other one in</font><font color="#E5E5E5"> so when I</font>

519
00:23:40,779 --> 00:23:46,000
when there is a open<font color="#E5E5E5"> SSL bug</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> not</font>

520
00:23:43,870 --> 00:23:47,830
a great way to say<font color="#E5E5E5"> oh this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the layer</font>

521
00:23:46,000 --> 00:23:50,679
<font color="#CCCCCC">that corresponds to the open SSL package</font>

522
00:23:47,830 --> 00:23:53,740
if<font color="#E5E5E5"> I want to change the</font><font color="#CCCCCC"> image</font><font color="#E5E5E5"> as an</font>

523
00:23:50,679 --> 00:23:56,860
operator<font color="#E5E5E5"> I can yank out the SSL and</font>

524
00:23:53,740 --> 00:23:58,750
<font color="#E5E5E5">stick in my new one that's</font><font color="#CCCCCC"> patched</font><font color="#E5E5E5"> so</font>

525
00:23:56,860 --> 00:24:01,299
you might<font color="#E5E5E5"> imagine thinking about this</font>

526
00:23:58,750 --> 00:24:03,970
problem<font color="#E5E5E5"> slightly differently</font><font color="#CCCCCC"> in</font>

527
00:24:01,299 --> 00:24:05,120
particular<font color="#E5E5E5"> doing it like this so and the</font>

528
00:24:03,970 --> 00:24:07,070
colors<font color="#E5E5E5"> I'm</font>

529
00:24:05,120 --> 00:24:10,459
<font color="#E5E5E5">do some diagrams of the layers</font><font color="#CCCCCC"> layers so</font>

530
00:24:07,070 --> 00:24:12,679
<font color="#E5E5E5">the colors are</font><font color="#CCCCCC"> relevant</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> so</font>

531
00:24:10,460 --> 00:24:14,780
anyway you might write your application

532
00:24:12,680 --> 00:24:16,010
install script like this<font color="#CCCCCC"> where on the</font>

533
00:24:14,780 --> 00:24:17,870
<font color="#E5E5E5">left hand side you have these two</font>

534
00:24:16,010 --> 00:24:19,970
<font color="#CCCCCC">specifications for this is how to build</font>

535
00:24:17,870 --> 00:24:22,669
something called<font color="#E5E5E5"> SSL this is how to</font>

536
00:24:19,970 --> 00:24:25,400
build<font color="#E5E5E5"> something called Python 3</font><font color="#CCCCCC"> and then</font>

537
00:24:22,670 --> 00:24:28,130
on the right you<font color="#CCCCCC"> would say</font><font color="#E5E5E5"> start from</font>

538
00:24:25,400 --> 00:24:30,110
<font color="#E5E5E5">this base and then add this other thing</font>

539
00:24:28,130 --> 00:24:32,059
that<font color="#E5E5E5"> somebody built called</font><font color="#CCCCCC"> SSL and</font><font color="#E5E5E5"> then</font>

540
00:24:30,110 --> 00:24:34,159
add<font color="#E5E5E5"> this third thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> somebody built</font>

541
00:24:32,059 --> 00:24:39,110
<font color="#E5E5E5">called Python 3 and then install my</font>

542
00:24:34,160 --> 00:24:39,980
application on top of that and so what

543
00:24:39,110 --> 00:24:44,870
that<font color="#CCCCCC"> looks like</font>

544
00:24:39,980 --> 00:24:47,090
so the SSL layer is built the<font color="#E5E5E5"> the bottom</font>

545
00:24:44,870 --> 00:24:49,580
to say are the<font color="#E5E5E5"> sent to s base layer and</font>

546
00:24:47,090 --> 00:24:52,550
then<font color="#CCCCCC"> we SSL layer is</font><font color="#E5E5E5"> built on top and</font>

547
00:24:49,580 --> 00:24:54,169
then similarly the Python 3 layer looks

548
00:24:52,550 --> 00:24:56,530
identical because<font color="#E5E5E5"> it starts from the</font>

549
00:24:54,170 --> 00:24:59,420
same sent to<font color="#CCCCCC"> us</font><font color="#E5E5E5"> base but then we stick</font>

550
00:24:56,530 --> 00:25:04,580
<font color="#E5E5E5">we stick a Python layer on the top of</font>

551
00:24:59,420 --> 00:25:07,040
there<font color="#E5E5E5"> and then this end result of our</font>

552
00:25:04,580 --> 00:25:11,689
total<font color="#E5E5E5"> build so if you remember there's</font>

553
00:25:07,040 --> 00:25:13,250
the apply syntax so we apply the<font color="#CCCCCC"> SSL</font>

554
00:25:11,690 --> 00:25:15,350
latest we see that the bottom two layers

555
00:25:13,250 --> 00:25:17,270
<font color="#E5E5E5">are the same so we just apply the layer</font>

556
00:25:15,350 --> 00:25:19,370
<font color="#E5E5E5">that was different then we similarly</font>

557
00:25:17,270 --> 00:25:20,270
<font color="#CCCCCC">apply the Python latest layer the only</font>

558
00:25:19,370 --> 00:25:22,850
layer that was different

559
00:25:20,270 --> 00:25:25,610
<font color="#E5E5E5">and then we install our application on</font>

560
00:25:22,850 --> 00:25:28,370
top so<font color="#E5E5E5"> we end up with something that</font>

561
00:25:25,610 --> 00:25:31,010
<font color="#CCCCCC">looks like</font><font color="#E5E5E5"> this where the bottom was</font><font color="#CCCCCC"> the</font>

562
00:25:28,370 --> 00:25:32,780
<font color="#CCCCCC">base image we have these two layers that</font>

563
00:25:31,010 --> 00:25:38,809
we layered on top<font color="#E5E5E5"> that were just the</font>

564
00:25:32,780 --> 00:25:41,240
<font color="#E5E5E5">deltas for</font><font color="#CCCCCC"> ssl and python and then we</font>

565
00:25:38,809 --> 00:25:43,220
have application<font color="#CCCCCC"> Delta on top and the</font>

566
00:25:41,240 --> 00:25:46,970
nice<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> then if I want to do</font>

567
00:25:43,220 --> 00:25:47,929
<font color="#CCCCCC">Python latest</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> all I do is I the</font>

568
00:25:46,970 --> 00:25:53,090
<font color="#CCCCCC">only thing I have to do is I've changed</font>

569
00:25:47,929 --> 00:25:55,010
<font color="#CCCCCC">this</font><font color="#E5E5E5"> one layer</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> and then it's happy</font>

570
00:25:53,090 --> 00:25:56,360
and<font color="#E5E5E5"> so that's the</font><font color="#CCCCCC"> idea is to</font><font color="#E5E5E5"> build some</font>

571
00:25:55,010 --> 00:25:57,830
tooling and we so<font color="#E5E5E5"> we have some runtime</font>

572
00:25:56,360 --> 00:26:01,250
tooling but unfortunately it's not<font color="#E5E5E5"> open</font>

573
00:25:57,830 --> 00:26:02,750
<font color="#CCCCCC">source to do this but anyway that's</font><font color="#E5E5E5"> the</font>

574
00:26:01,250 --> 00:26:04,970
idea and<font color="#CCCCCC"> the last thing I'll just talk</font>

575
00:26:02,750 --> 00:26:11,929
<font color="#CCCCCC">about is size that</font><font color="#E5E5E5"> was another complaint</font>

576
00:26:04,970 --> 00:26:13,640
<font color="#E5E5E5">and we basically punt on this</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we just</font>

577
00:26:11,929 --> 00:26:14,330
didn't<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about this mostly</font><font color="#CCCCCC"> because</font>

578
00:26:13,640 --> 00:26:17,240
<font color="#CCCCCC">of the</font>

579
00:26:14,330 --> 00:26:20,720
<font color="#E5E5E5">problems are more important</font><font color="#CCCCCC"> to us so</font>

580
00:26:17,240 --> 00:26:26,120
<font color="#CCCCCC">yeah this is</font><font color="#E5E5E5"> my call to action</font><font color="#CCCCCC"> there's</font>

581
00:26:20,720 --> 00:26:28,190
an issue<font color="#E5E5E5"> about on some thing called you</font>

582
00:26:26,120 --> 00:26:29,780
know<font color="#CCCCCC"> a</font><font color="#E5E5E5"> no CI implementation there's some</font>

583
00:26:28,190 --> 00:26:31,460
discussion<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> thread</font><font color="#CCCCCC"> I guess</font>

584
00:26:29,780 --> 00:26:33,350
there's some<font color="#CCCCCC"> discussion on twitter</font><font color="#E5E5E5"> i'm</font>

585
00:26:31,460 --> 00:26:36,290
not a Twitter user unfortunately so I

586
00:26:33,350 --> 00:26:37,610
can't<font color="#CCCCCC"> help you there but I guess the</font>

587
00:26:36,290 --> 00:26:39,050
question<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> would a new container</font>

588
00:26:37,610 --> 00:26:40,399
image format look like we're<font color="#E5E5E5"> sort of</font>

589
00:26:39,050 --> 00:26:42,950
<font color="#E5E5E5">doing this now because</font><font color="#CCCCCC"> we're interested</font>

590
00:26:40,400 --> 00:26:46,370
<font color="#E5E5E5">in it now but I can</font><font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> that we can</font>

591
00:26:42,950 --> 00:26:48,440
solve both the size problem and the and

592
00:26:46,370 --> 00:26:51,830
the provenance problem if we come<font color="#CCCCCC"> up</font>

593
00:26:48,440 --> 00:26:53,210
with<font color="#E5E5E5"> a clever solution</font><font color="#CCCCCC"> but we you know</font>

594
00:26:51,830 --> 00:26:55,639
we<font color="#E5E5E5"> need help to come up with a clever</font>

595
00:26:53,210 --> 00:26:57,710
<font color="#CCCCCC">solution and</font><font color="#E5E5E5"> that's where you come in so</font>

596
00:26:55,640 --> 00:27:01,000
thank you<font color="#CCCCCC"> if there's questions</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I</font>

597
00:26:57,710 --> 00:27:01,000
have like<font color="#E5E5E5"> three minutes or</font><font color="#CCCCCC"> something</font>

598
00:27:06,700 --> 00:27:15,260
yeah you did not<font color="#CCCCCC"> open source</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> easy</font>

599
00:27:12,860 --> 00:27:18,649
we have open<font color="#CCCCCC"> source the tools for</font>

600
00:27:15,260 --> 00:27:20,900
<font color="#CCCCCC">building it here</font><font color="#E5E5E5"> so there's</font><font color="#CCCCCC"> two the</font>

601
00:27:18,650 --> 00:27:23,420
stacker is<font color="#E5E5E5"> the tool to build images with</font>

602
00:27:20,900 --> 00:27:25,460
this special apply syntax<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

603
00:27:23,420 --> 00:27:28,730
described and<font color="#E5E5E5"> then Adam</font><font color="#CCCCCC"> FS is</font><font color="#E5E5E5"> the file</font>

604
00:27:25,460 --> 00:27:31,760
system to<font color="#CCCCCC"> mount this the OCI images is</font>

605
00:27:28,730 --> 00:27:35,300
squash of s so that's<font color="#E5E5E5"> that's part of the</font>

606
00:27:31,760 --> 00:27:36,920
<font color="#CCCCCC">runtime but that we have a bunch of code</font>

607
00:27:35,300 --> 00:27:42,020
<font color="#CCCCCC">that actually U is built on</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> of this</font>

608
00:27:36,920 --> 00:27:45,830
even that<font color="#E5E5E5"> also</font><font color="#CCCCCC"> is is not open source</font>

609
00:27:42,020 --> 00:27:47,930
<font color="#E5E5E5">right now okay so one of the reasons</font>

610
00:27:45,830 --> 00:27:49,550
<font color="#CCCCCC">that not every word</font><font color="#E5E5E5"> but with that</font>

611
00:27:47,930 --> 00:27:52,310
containers<font color="#E5E5E5"> or these kind of things</font><font color="#CCCCCC"> are</font>

612
00:27:49,550 --> 00:27:54,230
<font color="#E5E5E5">used is</font><font color="#CCCCCC"> to for preserving software which</font>

613
00:27:52,310 --> 00:27:57,440
obviously<font color="#E5E5E5"> if you start</font><font color="#CCCCCC"> specifying your</font>

614
00:27:54,230 --> 00:27:58,370
layer as latest means that chances are

615
00:27:57,440 --> 00:28:00,170
you will<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get something</font>

616
00:27:58,370 --> 00:28:02,090
<font color="#CCCCCC">completely different</font><font color="#E5E5E5"> if you write try to</font>

617
00:28:00,170 --> 00:28:04,460
<font color="#E5E5E5">rebuild your numerical</font><font color="#CCCCCC"> computation</font>

618
00:28:02,090 --> 00:28:06,860
platforms five years later so if they

619
00:28:04,460 --> 00:28:09,770
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> about in the way of I know</font>

620
00:28:06,860 --> 00:28:11,810
specifying what it's like latest but the

621
00:28:09,770 --> 00:28:13,850
preferred versions was something like

622
00:28:11,810 --> 00:28:17,690
<font color="#CCCCCC">that or whoa</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> good what you mean</font>

623
00:28:13,850 --> 00:28:20,929
<font color="#E5E5E5">yes so we mostly actually use semantic</font>

624
00:28:17,690 --> 00:28:22,970
versioning<font color="#CCCCCC"> for our layers so</font><font color="#E5E5E5"> and it</font>

625
00:28:20,930 --> 00:28:25,520
<font color="#E5E5E5">functions exactly</font><font color="#CCCCCC"> the same way you you</font>

626
00:28:22,970 --> 00:28:28,110
would think<font color="#CCCCCC"> semantic versions function</font>

627
00:28:25,520 --> 00:28:29,490
and then if you want<font color="#E5E5E5"> to</font>

628
00:28:28,110 --> 00:28:31,709
we don't actually do this<font color="#E5E5E5"> now but</font><font color="#CCCCCC"> you</font>

629
00:28:29,490 --> 00:28:34,380
could presumably<font color="#E5E5E5"> do some globbing like</font>

630
00:28:31,710 --> 00:28:36,929
fancy packages and managers<font color="#E5E5E5"> fancy</font>

631
00:28:34,380 --> 00:28:38,640
package managers like cargo and the go

632
00:28:36,929 --> 00:28:41,130
module system and stuff<font color="#CCCCCC"> to you where</font>

633
00:28:38,640 --> 00:28:42,330
they take the<font color="#E5E5E5"> latest of some minor</font>

634
00:28:41,130 --> 00:28:44,520
version you could do a<font color="#E5E5E5"> bunch of math</font>

635
00:28:42,330 --> 00:28:46,049
there but basically<font color="#E5E5E5"> semantic version is</font>

636
00:28:44,520 --> 00:29:04,559
the way we're handling it internally

637
00:28:46,049 --> 00:29:08,070
I know questions<font color="#CCCCCC"> alright understood</font>

638
00:29:04,559 --> 00:29:10,889
<font color="#CCCCCC">correctly that sticker do something</font>

639
00:29:08,070 --> 00:29:16,139
similar<font color="#E5E5E5"> that section files from</font>

640
00:29:10,890 --> 00:29:19,020
packaging do so<font color="#E5E5E5"> calculate</font><font color="#CCCCCC"> pops</font><font color="#E5E5E5"> which for</font>

641
00:29:16,140 --> 00:29:22,140
files we should be a part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this layer</font>

642
00:29:19,020 --> 00:29:26,809
<font color="#E5E5E5">it's possible I don't actually know what</font>

643
00:29:22,140 --> 00:29:29,910
section files do so just<font color="#E5E5E5"> list the files</font>

644
00:29:26,809 --> 00:29:32,460
yeah yeah I mean exactly so it's it's

645
00:29:29,910 --> 00:29:37,169
this idea of basically computing a

646
00:29:32,460 --> 00:29:38,549
binary diff over the layers yeah<font color="#E5E5E5"> just</font>

647
00:29:37,169 --> 00:29:44,100
<font color="#E5E5E5">for I think one more maybe there was</font><font color="#CCCCCC"> one</font>

648
00:29:38,549 --> 00:29:46,639
more yeah is it possible<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> a</font>

649
00:29:44,100 --> 00:29:51,240
scratch<font color="#E5E5E5"> surface inside username species</font>

650
00:29:46,640 --> 00:29:55,350
I don't<font color="#E5E5E5"> think so</font><font color="#CCCCCC"> I don't think</font><font color="#E5E5E5"> it has FS</font>

651
00:29:51,240 --> 00:29:56,940
user in<font color="#CCCCCC"> S</font><font color="#E5E5E5"> you can use</font><font color="#CCCCCC"> Scott fuse</font><font color="#E5E5E5"> but you</font>

652
00:29:55,350 --> 00:29:59,100
need<font color="#CCCCCC"> to wash yes so you</font><font color="#E5E5E5"> can do it</font>

653
00:29:56,940 --> 00:30:02,340
through<font color="#E5E5E5"> squash</font><font color="#CCCCCC"> fuse but not squash of</font>

654
00:29:59,100 --> 00:30:04,439
his proper yes what we do in being open

655
00:30:02,340 --> 00:30:05,879
<font color="#CCCCCC">to know this Jo's we run snaps not the</font>

656
00:30:04,440 --> 00:30:08,010
whole squash that's based and we use

657
00:30:05,880 --> 00:30:09,809
<font color="#CCCCCC">squash feels about</font><font color="#E5E5E5"> what's going on yeah</font>

658
00:30:08,010 --> 00:30:12,510
<font color="#E5E5E5">and like I say squad service isn't</font>

659
00:30:09,809 --> 00:30:15,030
really the greatest format except for

660
00:30:12,510 --> 00:30:17,340
<font color="#CCCCCC">its it's one that works for</font><font color="#E5E5E5"> this use</font>

661
00:30:15,030 --> 00:30:18,809
case<font color="#E5E5E5"> right now today and we don't have</font>

662
00:30:17,340 --> 00:30:20,909
to spend<font color="#E5E5E5"> a lot of time inventing</font><font color="#CCCCCC"> a new</font>

663
00:30:18,809 --> 00:30:23,549
format<font color="#E5E5E5"> but if we're gonna do all this</font>

664
00:30:20,910 --> 00:30:26,010
other stuff you<font color="#E5E5E5"> know implementing ideas</font>

665
00:30:23,549 --> 00:30:28,320
<font color="#CCCCCC">from</font><font color="#E5E5E5"> see a sink or</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> potentially</font>

666
00:30:26,010 --> 00:30:31,650
when we do that format we could do

667
00:30:28,320 --> 00:30:35,820
something<font color="#CCCCCC"> better and also</font><font color="#E5E5E5"> maybe make it</font>

668
00:30:31,650 --> 00:30:36,820
<font color="#E5E5E5">safe for user name spaces but yeah come</font>

669
00:30:35,820 --> 00:30:40,330
help

670
00:30:36,820 --> 00:30:40,330
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> thanks</font>

671
00:30:40,510 --> 00:30:45,069
[Applause]

