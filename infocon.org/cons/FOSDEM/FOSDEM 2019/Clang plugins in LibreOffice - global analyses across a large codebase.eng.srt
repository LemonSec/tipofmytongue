1
00:00:04,870 --> 00:00:10,070
<font color="#CCCCCC">okay I'm</font><font color="#E5E5E5"> sorry if anybody came here</font><font color="#CCCCCC"> -</font>

2
00:00:07,960 --> 00:00:13,179
<font color="#CCCCCC">I've still</font><font color="#E5E5E5"> got the wrong</font><font color="#CCCCCC"> title up there</font>

3
00:00:10,070 --> 00:00:15,740
I put the wrong abstract in<font color="#E5E5E5"> in</font>

4
00:00:13,179 --> 00:00:17,480
conference notes<font color="#E5E5E5"> this is actually going</font>

5
00:00:15,740 --> 00:00:19,460
to be an update<font color="#CCCCCC"> on</font><font color="#E5E5E5"> my last talk which</font>

6
00:00:17,480 --> 00:00:21,529
was about indeed about global analyses

7
00:00:19,460 --> 00:00:22,760
across<font color="#CCCCCC"> a large code base so what I'm</font>

8
00:00:21,529 --> 00:00:24,198
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> talking about largely today</font>

9
00:00:22,760 --> 00:00:26,539
is the things I've been<font color="#E5E5E5"> busy with in</font>

10
00:00:24,199 --> 00:00:30,140
<font color="#CCCCCC">Klang plugins since the</font><font color="#E5E5E5"> last time I was</font>

11
00:00:26,539 --> 00:00:32,269
here to give you some context<font color="#E5E5E5"> I largely</font>

12
00:00:30,140 --> 00:00:36,320
write<font color="#CCCCCC"> client plug-ins</font><font color="#E5E5E5"> for Libre Office</font>

13
00:00:32,269 --> 00:00:38,059
<font color="#E5E5E5">and that means that</font><font color="#CCCCCC"> I build little</font>

14
00:00:36,320 --> 00:00:40,580
<font color="#E5E5E5">pieces of code plug into the clang</font>

15
00:00:38,059 --> 00:00:43,699
compiler<font color="#E5E5E5"> and</font><font color="#CCCCCC"> make use of the clang ast</font>

16
00:00:40,580 --> 00:00:47,180
api's<font color="#E5E5E5"> and they enable</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to implement</font>

17
00:00:43,699 --> 00:00:49,070
various<font color="#E5E5E5"> verification checks and to do</font>

18
00:00:47,180 --> 00:00:51,440
some<font color="#E5E5E5"> large-scale rewriting across our</font>

19
00:00:49,070 --> 00:00:53,180
code<font color="#E5E5E5"> base so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> these plugins have in</font>

20
00:00:51,440 --> 00:00:55,879
the past enabled us to clean up<font color="#E5E5E5"> things</font>

21
00:00:53,180 --> 00:00:58,909
<font color="#CCCCCC">like the</font><font color="#E5E5E5"> fact that we've we started our</font>

22
00:00:55,879 --> 00:01:01,610
life<font color="#E5E5E5"> with about seven different string</font>

23
00:00:58,909 --> 00:01:04,610
classes and we've done<font color="#E5E5E5"> pretty well we're</font>

24
00:01:01,610 --> 00:01:06,080
down<font color="#E5E5E5"> to</font><font color="#CCCCCC"> about three or four and</font><font color="#E5E5E5"> it</font>

25
00:01:04,610 --> 00:01:07,790
enabled<font color="#E5E5E5"> us to clean</font><font color="#CCCCCC"> up all sorts</font><font color="#E5E5E5"> of</font>

26
00:01:06,080 --> 00:01:10,100
<font color="#E5E5E5">little bits and pieces along the way and</font>

27
00:01:07,790 --> 00:01:16,130
<font color="#CCCCCC">it's enabled</font><font color="#E5E5E5"> us to move to more modern</font>

28
00:01:10,100 --> 00:01:17,390
usage of C++<font color="#E5E5E5"> my current status some</font>

29
00:01:16,130 --> 00:01:19,940
people will be happy to<font color="#E5E5E5"> hear that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have</font>

30
00:01:17,390 --> 00:01:22,280
in fact<font color="#E5E5E5"> run out of ideas my pipeline is</font>

31
00:01:19,940 --> 00:01:25,070
rather<font color="#E5E5E5"> empty which means</font><font color="#CCCCCC"> that there's</font>

32
00:01:22,280 --> 00:01:28,040
<font color="#E5E5E5">not a lot of large</font><font color="#CCCCCC"> scale changes coming</font>

33
00:01:25,070 --> 00:01:29,809
coming<font color="#E5E5E5"> down my pipeline the the</font>

34
00:01:28,040 --> 00:01:33,140
<font color="#CCCCCC">flattened plugin which is there</font><font color="#E5E5E5"> to</font>

35
00:01:29,810 --> 00:01:37,070
reduce<font color="#E5E5E5"> the indentation largely of code</font>

36
00:01:33,140 --> 00:01:39,350
by reorganizing<font color="#E5E5E5"> methods so</font><font color="#CCCCCC"> that they do</font>

37
00:01:37,070 --> 00:01:42,440
<font color="#E5E5E5">early exits</font><font color="#CCCCCC"> who has a fair</font><font color="#E5E5E5"> number of</font>

38
00:01:39,350 --> 00:01:45,949
stuff coming but I don't<font color="#E5E5E5"> have any new</font>

39
00:01:42,440 --> 00:01:49,190
plugins coming<font color="#E5E5E5"> I</font><font color="#CCCCCC"> tracked clean</font><font color="#E5E5E5"> upstream</font>

40
00:01:45,950 --> 00:01:50,750
<font color="#E5E5E5">on a fairly regular basis occasionally</font>

41
00:01:49,190 --> 00:01:52,490
the plugins need<font color="#CCCCCC"> tweaking in order to</font>

42
00:01:50,750 --> 00:01:54,700
accommodate<font color="#CCCCCC"> mild changes in clang</font>

43
00:01:52,490 --> 00:01:57,619
clangs actually become really stable<font color="#E5E5E5"> and</font>

44
00:01:54,700 --> 00:01:59,060
<font color="#E5E5E5">plug-in api's are actually really nice</font>

45
00:01:57,620 --> 00:02:01,280
<font color="#CCCCCC">to use they're pretty reliable these</font>

46
00:01:59,060 --> 00:02:03,799
days<font color="#E5E5E5"> occasionally I still run into</font>

47
00:02:01,280 --> 00:02:07,070
<font color="#E5E5E5">issues with source locations being</font>

48
00:02:03,799 --> 00:02:10,460
slightly art ranges of<font color="#CCCCCC"> sorts</font>

49
00:02:07,070 --> 00:02:12,079
being a little<font color="#CCCCCC"> bit iffy but 95% of the</font>

50
00:02:10,460 --> 00:02:17,270
playing stuff these<font color="#E5E5E5"> days if something</font>

51
00:02:12,080 --> 00:02:22,280
goes<font color="#CCCCCC"> wrong it's typically my fault</font><font color="#E5E5E5"> okay</font>

52
00:02:17,270 --> 00:02:26,120
<font color="#E5E5E5">unique</font><font color="#CCCCCC"> Peter is a</font><font color="#E5E5E5"> plug-in just largely</font>

53
00:02:22,280 --> 00:02:27,980
finished<font color="#E5E5E5"> pushing changes for the point</font>

54
00:02:26,120 --> 00:02:29,210
of<font color="#E5E5E5"> unique Peter was to find places in</font>

55
00:02:27,980 --> 00:02:31,640
our code base where<font color="#E5E5E5"> we could</font>

56
00:02:29,210 --> 00:02:34,550
productively use the standard unique

57
00:02:31,640 --> 00:02:36,500
<font color="#CCCCCC">pointer a smart pointer</font><font color="#E5E5E5"> class the point</font>

58
00:02:34,550 --> 00:02:37,760
of using<font color="#E5E5E5"> the unique</font><font color="#CCCCCC"> matter is</font><font color="#E5E5E5"> that it</font>

59
00:02:36,500 --> 00:02:39,650
makes<font color="#E5E5E5"> obvious something that is</font>

60
00:02:37,760 --> 00:02:41,810
otherwise just implicit in your<font color="#E5E5E5"> code the</font>

61
00:02:39,650 --> 00:02:43,640
fact that<font color="#E5E5E5"> a given</font><font color="#CCCCCC"> class or a</font><font color="#E5E5E5"> given</font>

62
00:02:41,810 --> 00:02:46,670
variable is the exclusive owner of

63
00:02:43,640 --> 00:02:49,070
another object<font color="#E5E5E5"> so my plugin started out</font>

64
00:02:46,670 --> 00:02:51,829
using<font color="#CCCCCC"> my favorite onion peeling strategy</font>

65
00:02:49,070 --> 00:02:53,900
onion peeling means<font color="#E5E5E5"> I look for very</font>

66
00:02:51,830 --> 00:02:56,030
simple approaches and then I run the

67
00:02:53,900 --> 00:02:58,820
<font color="#CCCCCC">plug-in across the entire code base so I</font>

68
00:02:56,030 --> 00:03:00,170
look for very specific<font color="#CCCCCC"> patterns so my</font>

69
00:02:58,820 --> 00:03:03,590
<font color="#CCCCCC">plugin started out looking for patterns</font>

70
00:03:00,170 --> 00:03:06,829
<font color="#E5E5E5">that look pretty much</font><font color="#CCCCCC"> like that we class</font>

71
00:03:03,590 --> 00:03:09,320
<font color="#E5E5E5">clearly is deleting a member field that</font>

72
00:03:06,830 --> 00:03:10,910
it owns itself in its destructor<font color="#E5E5E5"> and I</font>

73
00:03:09,320 --> 00:03:13,400
ran it<font color="#CCCCCC"> across our</font><font color="#E5E5E5"> entire code base of 10</font>

74
00:03:10,910 --> 00:03:15,260
<font color="#E5E5E5">million lines look for stuff fixed it</font>

75
00:03:13,400 --> 00:03:16,910
and then I extended<font color="#E5E5E5"> the pattern matching</font>

76
00:03:15,260 --> 00:03:20,720
<font color="#E5E5E5">and I've been gradually making the</font>

77
00:03:16,910 --> 00:03:22,250
pattern matching<font color="#CCCCCC"> more</font><font color="#E5E5E5"> extensive I've</font>

78
00:03:20,720 --> 00:03:24,830
looked for more and more<font color="#E5E5E5"> different</font>

79
00:03:22,250 --> 00:03:28,730
<font color="#E5E5E5">patterns of owning and deleting pointers</font>

80
00:03:24,830 --> 00:03:30,440
<font color="#CCCCCC">and as I as I've</font><font color="#E5E5E5"> kind of cleared out one</font>

81
00:03:28,730 --> 00:03:32,420
set of changes<font color="#E5E5E5"> in</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> cut in our code</font>

82
00:03:30,440 --> 00:03:34,160
base I've then made the<font color="#E5E5E5"> pattern matching</font>

83
00:03:32,420 --> 00:03:35,510
a little bit more flexible<font color="#CCCCCC"> I've got to</font>

84
00:03:34,160 --> 00:03:39,079
the stage now where<font color="#CCCCCC"> the pattern matching</font>

85
00:03:35,510 --> 00:03:40,519
in fact is so<font color="#CCCCCC"> flexible that it points up</font>

86
00:03:39,080 --> 00:03:42,019
a lot<font color="#E5E5E5"> of false</font><font color="#CCCCCC"> positives</font><font color="#E5E5E5"> which means my</font>

87
00:03:40,519 --> 00:03:44,239
<font color="#CCCCCC">plug-in now has an awful</font><font color="#E5E5E5"> lot of manual</font>

88
00:03:42,019 --> 00:03:46,790
exclusions but I consider<font color="#CCCCCC"> that a</font>

89
00:03:44,239 --> 00:03:50,420
worthwhile<font color="#E5E5E5"> trade-off</font><font color="#CCCCCC"> I don't aim to make</font>

90
00:03:46,790 --> 00:03:52,910
these plugins<font color="#E5E5E5"> completely robust they're</font>

91
00:03:50,420 --> 00:03:55,160
not<font color="#CCCCCC"> made to be absolutely perfect</font>

92
00:03:52,910 --> 00:03:58,100
<font color="#CCCCCC">plug-ins that is just in my opinion</font>

93
00:03:55,160 --> 00:04:00,980
<font color="#CCCCCC">largely a fool's errand C++ just has</font><font color="#E5E5E5"> a</font>

94
00:03:58,100 --> 00:04:02,780
<font color="#E5E5E5">ste too many corner cases if you want to</font>

95
00:04:00,980 --> 00:04:05,090
make a<font color="#E5E5E5"> plug-in like this that's looking</font>

96
00:04:02,780 --> 00:04:06,140
for issues<font color="#E5E5E5"> completely robust you will</font>

97
00:04:05,090 --> 00:04:09,320
find yourself on or<font color="#E5E5E5"> hiding to nothing</font>

98
00:04:06,140 --> 00:04:12,109
exploring all<font color="#CCCCCC"> kinds of weird sub parts</font>

99
00:04:09,320 --> 00:04:14,820
of the C++ ast<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Mac</font>

100
00:04:12,110 --> 00:04:17,520
and all sorts of other<font color="#E5E5E5"> weird stuff so I</font>

101
00:04:14,820 --> 00:04:18,659
<font color="#E5E5E5">don't aim to do that</font><font color="#CCCCCC"> I just aim to</font><font color="#E5E5E5"> get</font>

102
00:04:17,519 --> 00:04:20,669
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> that's useful for seed for</font>

103
00:04:18,660 --> 00:04:22,200
<font color="#CCCCCC">LibreOffice that being said these</font>

104
00:04:20,670 --> 00:04:25,530
plugins are<font color="#CCCCCC"> there the source codes if</font>

105
00:04:22,200 --> 00:04:27,300
anyone wants to try<font color="#CCCCCC"> and extend</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> will</font>

106
00:04:25,530 --> 00:04:28,469
<font color="#CCCCCC">upstream them or do</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> with</font>

107
00:04:27,300 --> 00:04:31,530
them you're welcome to I'm always<font color="#E5E5E5"> happy</font>

108
00:04:28,470 --> 00:04:33,120
<font color="#CCCCCC">to give assistance but I have</font>

109
00:04:31,530 --> 00:04:36,059
deliberately not tried<font color="#E5E5E5"> to upstream these</font>

110
00:04:33,120 --> 00:04:37,560
<font color="#CCCCCC">two LLVM because I know that they will</font>

111
00:04:36,060 --> 00:04:39,270
inevitably come back to me and say<font color="#CCCCCC"> but</font>

112
00:04:37,560 --> 00:04:41,220
what if and<font color="#E5E5E5"> what if and what if n</font>

113
00:04:39,270 --> 00:04:44,520
<font color="#CCCCCC">they're right</font><font color="#E5E5E5"> it generates false</font>

114
00:04:41,220 --> 00:04:49,110
positives<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we're happy with</font><font color="#CCCCCC"> that so</font>

115
00:04:44,520 --> 00:04:51,539
we<font color="#E5E5E5"> just keep</font><font color="#CCCCCC"> tracking method cycles is a</font>

116
00:04:49,110 --> 00:04:54,110
<font color="#E5E5E5">plugin</font><font color="#CCCCCC"> that I that are</font><font color="#E5E5E5"> fairly recently</font>

117
00:04:51,540 --> 00:04:56,250
<font color="#E5E5E5">wrote and I'm very proud of this one and</font>

118
00:04:54,110 --> 00:04:57,960
it<font color="#E5E5E5"> took me a long time to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> to the</font>

119
00:04:56,250 --> 00:05:00,210
point<font color="#E5E5E5"> in time where I understood their</font>

120
00:04:57,960 --> 00:05:01,710
<font color="#CCCCCC">clang ast and I understood C++ well</font>

121
00:05:00,210 --> 00:05:03,989
enough to be<font color="#CCCCCC"> able to write it what it</font>

122
00:05:01,710 --> 00:05:07,650
does<font color="#E5E5E5"> is it constructs graph over</font><font color="#CCCCCC"> our</font>

123
00:05:03,990 --> 00:05:09,750
<font color="#E5E5E5">entire code base of of method calls</font><font color="#CCCCCC"> so</font>

124
00:05:07,650 --> 00:05:11,789
basically I have a map of pairs<font color="#E5E5E5"> from</font>

125
00:05:09,750 --> 00:05:12,960
source method to destination<font color="#CCCCCC"> mystical</font>

126
00:05:11,790 --> 00:05:16,050
actually from<font color="#E5E5E5"> source function to</font>

127
00:05:12,960 --> 00:05:17,849
destination function and I remap it

128
00:05:16,050 --> 00:05:20,310
<font color="#CCCCCC">massages slightly so if you call a</font>

129
00:05:17,850 --> 00:05:22,110
virtual<font color="#E5E5E5"> method to walk</font><font color="#CCCCCC"> acceptor walks up</font>

130
00:05:20,310 --> 00:05:24,480
the<font color="#CCCCCC"> hierarchy to potentially multiple</font>

131
00:05:22,110 --> 00:05:26,640
parents<font color="#E5E5E5"> and tags all of those with calls</font>

132
00:05:24,480 --> 00:05:28,620
<font color="#E5E5E5">and then we generate an entire graph</font>

133
00:05:26,640 --> 00:05:31,229
this takes two or<font color="#CCCCCC"> three times</font><font color="#E5E5E5"> longer</font>

134
00:05:28,620 --> 00:05:33,690
than<font color="#E5E5E5"> my normal runs do it generates 40</font>

135
00:05:31,230 --> 00:05:35,790
or gigabytes worth of log file data and

136
00:05:33,690 --> 00:05:37,469
then takes<font color="#E5E5E5"> roughly half an hour of</font>

137
00:05:35,790 --> 00:05:39,960
processing with<font color="#E5E5E5"> the Python</font><font color="#CCCCCC"> script to</font>

138
00:05:37,470 --> 00:05:42,210
<font color="#E5E5E5">spit out results it</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> found about</font>

139
00:05:39,960 --> 00:05:43,620
<font color="#E5E5E5">seven things because I have other</font>

140
00:05:42,210 --> 00:05:45,390
plugins<font color="#E5E5E5"> that look for</font><font color="#CCCCCC"> and used code as</font>

141
00:05:43,620 --> 00:05:47,640
<font color="#E5E5E5">well but it found seven things that my</font>

142
00:05:45,390 --> 00:05:49,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> my unused code plug-in was unable</font>

143
00:05:47,640 --> 00:05:51,419
to find<font color="#E5E5E5"> because they were cycles the</font>

144
00:05:49,740 --> 00:05:52,250
methods were calling<font color="#E5E5E5"> each other and a</font>

145
00:05:51,420 --> 00:05:54,800
nice<font color="#E5E5E5"> little loop</font>

146
00:05:52,250 --> 00:05:58,080
much like the two loops up there<font color="#CCCCCC"> and</font>

147
00:05:54,800 --> 00:05:59,340
<font color="#E5E5E5">consequently the</font><font color="#CCCCCC"> Jade code has been</font><font color="#E5E5E5"> had</font>

148
00:05:58,080 --> 00:06:02,159
been present in our code base<font color="#E5E5E5"> for a long</font>

149
00:05:59,340 --> 00:06:06,390
time and it hadn't been<font color="#E5E5E5"> found so I was</font>

150
00:06:02,160 --> 00:06:09,090
<font color="#CCCCCC">very</font><font color="#E5E5E5"> happy</font><font color="#CCCCCC"> with that one</font><font color="#E5E5E5"> unused fields</font>

151
00:06:06,390 --> 00:06:12,030
<font color="#E5E5E5">is a global analysis plugin I've been</font>

152
00:06:09,090 --> 00:06:14,280
extending it<font color="#CCCCCC"> lately to look for fields</font>

153
00:06:12,030 --> 00:06:16,169
that<font color="#E5E5E5"> are unused</font><font color="#CCCCCC"> in the sense of they're</font>

154
00:06:14,280 --> 00:06:17,580
not<font color="#CCCCCC"> generating any useful work</font><font color="#E5E5E5"> so for</font>

155
00:06:16,170 --> 00:06:19,080
<font color="#E5E5E5">example an</font><font color="#CCCCCC"> example up there we've got a</font>

156
00:06:17,580 --> 00:06:20,529
<font color="#E5E5E5">standard vector we're pushing</font>

157
00:06:19,080 --> 00:06:22,899
<font color="#CCCCCC">information into it but</font>

158
00:06:20,529 --> 00:06:24,609
<font color="#CCCCCC">that we're doing nothing with</font><font color="#E5E5E5"> it my</font>

159
00:06:22,899 --> 00:06:26,579
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> analyses don't find us</font><font color="#E5E5E5"> because</font>

160
00:06:24,609 --> 00:06:29,138
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> in fact we are in fact calling a</font>

161
00:06:26,579 --> 00:06:32,319
non-constant method on it<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> are</font>

162
00:06:29,139 --> 00:06:33,819
actually modifying the object<font color="#E5E5E5"> but other</font>

163
00:06:32,319 --> 00:06:35,159
<font color="#E5E5E5">than</font><font color="#CCCCCC"> that we're doing nothing useful</font><font color="#E5E5E5"> to</font>

164
00:06:33,819 --> 00:06:37,659
it surprisingly there were<font color="#E5E5E5"> quite a few</font>

165
00:06:35,159 --> 00:06:38,829
<font color="#CCCCCC">incidents of this in our</font><font color="#E5E5E5"> code base which</font>

166
00:06:37,659 --> 00:06:40,748
I<font color="#E5E5E5"> suppose is not a surprise when you've</font>

167
00:06:38,829 --> 00:06:42,669
got<font color="#CCCCCC"> ten million lines of old code</font><font color="#E5E5E5"> you</font>

168
00:06:40,749 --> 00:06:44,379
find a lot of<font color="#E5E5E5"> stuff so</font><font color="#CCCCCC"> I started</font><font color="#E5E5E5"> with</font>

169
00:06:42,669 --> 00:06:48,489
<font color="#E5E5E5">this</font><font color="#CCCCCC"> idea and I extended it to a variety</font>

170
00:06:44,379 --> 00:06:51,339
of other calls on various STL collection

171
00:06:48,489 --> 00:06:56,859
<font color="#CCCCCC">classes and finalists</font><font color="#E5E5E5"> found as a bunch</font>

172
00:06:51,339 --> 00:06:59,049
of dead code single<font color="#E5E5E5"> battlefields is I've</font>

173
00:06:56,859 --> 00:07:01,688
<font color="#E5E5E5">extended that one as well</font><font color="#CCCCCC"> too</font>

174
00:06:59,049 --> 00:07:04,448
it<font color="#CCCCCC"> used to</font><font color="#E5E5E5"> be only full fields that we</font>

175
00:07:01,689 --> 00:07:08,289
declared on classes now it looks<font color="#E5E5E5"> for any</font>

176
00:07:04,449 --> 00:07:10,749
statically allocated<font color="#E5E5E5"> of any</font><font color="#CCCCCC"> valid values</font>

177
00:07:08,289 --> 00:07:13,509
<font color="#E5E5E5">that looks for kind of primitive type</font>

178
00:07:10,749 --> 00:07:15,369
<font color="#E5E5E5">bellies I into our pointers sorts of</font>

179
00:07:13,509 --> 00:07:16,989
things it also looks for our string

180
00:07:15,369 --> 00:07:18,459
classes and it looks<font color="#E5E5E5"> for</font><font color="#CCCCCC"> places where</font>

181
00:07:16,989 --> 00:07:20,289
those<font color="#E5E5E5"> things are only ever assigned a</font>

182
00:07:18,459 --> 00:07:22,179
single<font color="#E5E5E5"> value</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> which case is not</font>

183
00:07:20,289 --> 00:07:24,219
really mutable data you can either be

184
00:07:22,179 --> 00:07:24,789
declared concert if<font color="#CCCCCC"> Utley</font><font color="#E5E5E5"> or it can be</font>

185
00:07:24,219 --> 00:07:27,399
inlined

186
00:07:24,789 --> 00:07:31,149
into the relevant<font color="#E5E5E5"> modules</font><font color="#CCCCCC"> either way</font>

187
00:07:27,399 --> 00:07:35,169
<font color="#E5E5E5">it's I'm effectively extracting latent</font>

188
00:07:31,149 --> 00:07:36,939
information and making it concrete it

189
00:07:35,169 --> 00:07:38,709
<font color="#E5E5E5">versus work was not my idea at all</font><font color="#CCCCCC"> I'm</font>

190
00:07:36,939 --> 00:07:41,110
<font color="#CCCCCC">tackle Mike korchinsky</font><font color="#E5E5E5"> very</font>

191
00:07:38,709 --> 00:07:43,659
interestingly pointed out that code

192
00:07:41,110 --> 00:07:45,459
where you are comparing an integer and a

193
00:07:43,659 --> 00:07:47,139
floating-point value can<font color="#E5E5E5"> never be true</font>

194
00:07:45,459 --> 00:07:50,349
and is generally indicative of somebody

195
00:07:47,139 --> 00:07:52,659
<font color="#CCCCCC">making a mistake in this</font><font color="#E5E5E5"> particular case</font>

196
00:07:50,349 --> 00:07:55,989
he<font color="#E5E5E5"> found that mistake John and I believe</font>

197
00:07:52,659 --> 00:07:58,239
it<font color="#E5E5E5"> was our drawing ml import code so</font>

198
00:07:55,989 --> 00:08:00,099
we've been rendered<font color="#E5E5E5"> using a client</font>

199
00:07:58,239 --> 00:08:02,229
<font color="#E5E5E5">plug-in that was an interesting</font><font color="#CCCCCC"> case we</font>

200
00:08:00,099 --> 00:08:04,179
wrote the<font color="#E5E5E5"> plug-in and then</font><font color="#CCCCCC"> we had to</font>

201
00:08:02,229 --> 00:08:06,639
pocket<font color="#E5E5E5"> it was using an API called</font>

202
00:08:04,179 --> 00:08:08,649
evaluate as float inside<font color="#E5E5E5"> playing and at</font>

203
00:08:06,639 --> 00:08:10,049
the time evaluators<font color="#E5E5E5"> float would throw</font>

204
00:08:08,649 --> 00:08:12,879
its hands up in the air and crash on

205
00:08:10,049 --> 00:08:15,489
<font color="#E5E5E5">about half of the classes in</font><font color="#CCCCCC"> Libre</font>

206
00:08:12,879 --> 00:08:17,259
<font color="#CCCCCC">Office so we parked</font><font color="#E5E5E5"> it and six months</font>

207
00:08:15,489 --> 00:08:20,018
later<font color="#E5E5E5"> I tried it again</font><font color="#CCCCCC"> and learn be home</font>

208
00:08:17,259 --> 00:08:22,359
<font color="#E5E5E5">clang fixed so that</font><font color="#CCCCCC"> works quite nicely I</font>

209
00:08:20,019 --> 00:08:26,259
only found a<font color="#CCCCCC"> few</font><font color="#E5E5E5"> places but it's nice to</font>

210
00:08:22,359 --> 00:08:28,929
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> clang is moving so fast</font><font color="#CCCCCC"> I need</font>

211
00:08:26,259 --> 00:08:30,819
<font color="#CCCCCC">anam constants I</font><font color="#E5E5E5"> initially</font><font color="#CCCCCC"> wrote this to</font>

212
00:08:28,929 --> 00:08:31,599
look<font color="#CCCCCC"> 14</font><font color="#E5E5E5"> am constants where you've got an</font>

213
00:08:30,819 --> 00:08:34,510
<font color="#E5E5E5">and you know</font>

214
00:08:31,600 --> 00:08:35,650
and one of<font color="#CCCCCC"> the constant one or more of</font>

215
00:08:34,510 --> 00:08:37,890
the constants is not touched at all

216
00:08:35,650 --> 00:08:41,770
<font color="#CCCCCC">that's a relatively straightforward case</font>

217
00:08:37,890 --> 00:08:45,189
so I cleaned out all of the<font color="#CCCCCC"> dead</font><font color="#E5E5E5"> cases</font>

218
00:08:41,770 --> 00:08:47,439
where they made sense to do so<font color="#CCCCCC"> again</font>

219
00:08:45,190 --> 00:08:50,130
there's an idea from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> mic against key</font>

220
00:08:47,440 --> 00:08:54,340
<font color="#E5E5E5">and then we started</font><font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> places</font>

221
00:08:50,130 --> 00:08:57,250
<font color="#CCCCCC">where I hadn't idea in my head</font><font color="#E5E5E5"> that</font>

222
00:08:54,340 --> 00:08:59,500
there<font color="#E5E5E5"> was</font><font color="#CCCCCC"> a readwrite analogy here as in</font>

223
00:08:57,250 --> 00:09:00,850
some<font color="#E5E5E5"> cases you read information</font><font color="#CCCCCC"> in some</font>

224
00:08:59,500 --> 00:09:02,500
cases<font color="#E5E5E5"> you write</font><font color="#CCCCCC"> information and if</font>

225
00:09:00,850 --> 00:09:04,480
you've<font color="#E5E5E5"> got</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> only information</font><font color="#CCCCCC"> or</font>

226
00:09:02,500 --> 00:09:07,990
read<font color="#E5E5E5"> only</font><font color="#CCCCCC"> information that's generally</font>

227
00:09:04,480 --> 00:09:09,760
indicative of some<font color="#E5E5E5"> kind of dead code but</font>

228
00:09:07,990 --> 00:09:12,190
it took<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> long time</font><font color="#CCCCCC"> for me to find</font>

229
00:09:09,760 --> 00:09:14,980
a mental model in that<font color="#E5E5E5"> I could use to</font>

230
00:09:12,190 --> 00:09:16,390
<font color="#E5E5E5">analyze the ast so in this context</font><font color="#CCCCCC"> write</font>

231
00:09:14,980 --> 00:09:18,400
means we generate and store new

232
00:09:16,390 --> 00:09:20,800
information so if you want write<font color="#E5E5E5"> only</font>

233
00:09:18,400 --> 00:09:23,280
code you're storing an enum value<font color="#CCCCCC"> into</font>

234
00:09:20,800 --> 00:09:25,540
stuff but you never ever<font color="#E5E5E5"> look for it</font>

235
00:09:23,280 --> 00:09:28,150
read means that we just check for<font color="#CCCCCC"> the</font>

236
00:09:25,540 --> 00:09:30,760
information<font color="#E5E5E5"> we need but</font><font color="#CCCCCC"> we never store</font>

237
00:09:28,150 --> 00:09:32,709
it now as it<font color="#E5E5E5"> turns out right is better</font>

238
00:09:30,760 --> 00:09:34,210
to find<font color="#CCCCCC"> them read which means I've</font>

239
00:09:32,710 --> 00:09:36,430
actually managed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the right</font>

240
00:09:34,210 --> 00:09:39,130
analysis to find<font color="#E5E5E5"> useful dead code the</font>

241
00:09:36,430 --> 00:09:40,689
read<font color="#E5E5E5"> analysis however it largely spits</font>

242
00:09:39,130 --> 00:09:42,760
out too many<font color="#CCCCCC"> false positives</font><font color="#E5E5E5"> mostly</font>

243
00:09:40,690 --> 00:09:44,350
because<font color="#CCCCCC"> of things like costs we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> an</font>

244
00:09:42,760 --> 00:09:46,150
<font color="#E5E5E5">information you have</font><font color="#CCCCCC"> oh you load a file</font>

245
00:09:44,350 --> 00:09:47,320
and<font color="#CCCCCC"> you cost</font><font color="#E5E5E5"> the data type in the file</font>

246
00:09:46,150 --> 00:09:50,319
into<font color="#CCCCCC"> an</font><font color="#E5E5E5"> Ino</font>

247
00:09:47,320 --> 00:09:54,100
so you're not you're not really<font color="#E5E5E5"> the cost</font>

248
00:09:50,320 --> 00:09:56,230
is acting as a as a as a writer which

249
00:09:54,100 --> 00:09:59,440
means you've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> a read right field so</font>

250
00:09:56,230 --> 00:10:02,040
it doesn't work very<font color="#E5E5E5"> well but the</font>

251
00:09:59,440 --> 00:10:05,680
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> produced nice stuff in the end</font>

252
00:10:02,040 --> 00:10:07,660
redundant functional cost is<font color="#E5E5E5"> a an</font>

253
00:10:05,680 --> 00:10:10,449
extension<font color="#E5E5E5"> of another another another</font>

254
00:10:07,660 --> 00:10:14,319
plugin<font color="#E5E5E5"> that we were looking for normal</font>

255
00:10:10,450 --> 00:10:16,170
redundant costs<font color="#E5E5E5"> in this case we often</font>

256
00:10:14,320 --> 00:10:19,510
had code that was<font color="#E5E5E5"> accidentally</font>

257
00:10:16,170 --> 00:10:20,860
constructing a<font color="#CCCCCC"> new string from an</font>

258
00:10:19,510 --> 00:10:22,720
existing ru string and then passing it

259
00:10:20,860 --> 00:10:24,820
<font color="#E5E5E5">into a method</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the method in this case</font>

260
00:10:22,720 --> 00:10:26,830
was taking a<font color="#CCCCCC"> Const wreck so there was no</font>

261
00:10:24,820 --> 00:10:30,550
point<font color="#E5E5E5"> in doing that so the</font><font color="#CCCCCC"> plug-in looks</font>

262
00:10:26,830 --> 00:10:32,680
for looks for cases like<font color="#CCCCCC"> that collapse</font>

263
00:10:30,550 --> 00:10:35,199
if was looking for odd code where we<font color="#E5E5E5"> had</font>

264
00:10:32,680 --> 00:10:37,449
<font color="#E5E5E5">two very small if conditions and they</font>

265
00:10:35,200 --> 00:10:42,010
could<font color="#CCCCCC"> profitably profitably</font><font color="#E5E5E5"> be combined</font>

266
00:10:37,450 --> 00:10:43,570
<font color="#E5E5E5">into a single if condition I ran this</font>

267
00:10:42,010 --> 00:10:44,920
myself<font color="#E5E5E5"> and it's not on by default</font>

268
00:10:43,570 --> 00:10:46,300
because

269
00:10:44,920 --> 00:10:50,740
quite<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> to find a balance</font><font color="#E5E5E5"> and I</font>

270
00:10:46,300 --> 00:10:52,660
didn't want to<font color="#E5E5E5"> annoy people static there</font>

271
00:10:50,740 --> 00:10:56,829
looks<font color="#CCCCCC"> full</font><font color="#E5E5E5"> things that can be declared</font>

272
00:10:52,660 --> 00:10:57,969
constant static ie they can be in which

273
00:10:56,829 --> 00:11:00,670
case<font color="#E5E5E5"> they're they're stored in the</font>

274
00:10:57,970 --> 00:11:01,930
<font color="#E5E5E5">read-only part of the segment when the</font>

275
00:11:00,670 --> 00:11:03,250
<font color="#CCCCCC">card is</font><font color="#E5E5E5"> compiled and they can be</font>

276
00:11:01,930 --> 00:11:10,930
usefully shared between different

277
00:11:03,250 --> 00:11:14,320
processes Const field<font color="#E5E5E5"> was a failure it</font>

278
00:11:10,930 --> 00:11:16,839
was a good idea<font color="#CCCCCC"> the idea was that we</font><font color="#E5E5E5"> can</font>

279
00:11:14,320 --> 00:11:20,350
declare fields Const<font color="#E5E5E5"> and</font><font color="#CCCCCC"> thereby</font><font color="#E5E5E5"> mark</font>

280
00:11:16,839 --> 00:11:22,899
those fields as<font color="#E5E5E5"> as being effectively</font>

281
00:11:20,350 --> 00:11:26,019
safe for multiple<font color="#E5E5E5"> threads to access</font>

282
00:11:22,899 --> 00:11:28,300
however when you mark fields<font color="#E5E5E5"> as Const it</font>

283
00:11:26,019 --> 00:11:30,399
tends to interact with other<font color="#CCCCCC"> C++</font>

284
00:11:28,300 --> 00:11:32,199
features for example<font color="#CCCCCC"> you end up with</font>

285
00:11:30,399 --> 00:11:33,940
implicitly deleted copy and movement

286
00:11:32,199 --> 00:11:35,680
assignment operators<font color="#E5E5E5"> even though you</font>

287
00:11:33,940 --> 00:11:37,329
have non deleted copy and<font color="#E5E5E5"> move</font>

288
00:11:35,680 --> 00:11:39,069
constructors so it tends to<font color="#E5E5E5"> produce</font>

289
00:11:37,329 --> 00:11:41,380
rather weird outcomes here and in the

290
00:11:39,070 --> 00:11:44,260
code<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that one got abandoned which is</font>

291
00:11:41,380 --> 00:11:45,850
a which is<font color="#CCCCCC"> a bit of a pity but you know</font>

292
00:11:44,260 --> 00:11:52,560
you try some stuff<font color="#E5E5E5"> and sometimes</font><font color="#CCCCCC"> things</font>

293
00:11:45,850 --> 00:11:55,449
don't work out simplify construct was

294
00:11:52,560 --> 00:11:58,029
effectively a cut-down version of a of a

295
00:11:55,449 --> 00:11:59,560
clang<font color="#E5E5E5"> tidy</font><font color="#CCCCCC"> check there's</font><font color="#E5E5E5"> already an</font>

296
00:11:58,029 --> 00:12:01,209
existing<font color="#CCCCCC"> client ID ticker</font><font color="#E5E5E5"> does something</font>

297
00:11:59,560 --> 00:12:02,920
<font color="#E5E5E5">quite similar but it tends to be a lot</font>

298
00:12:01,209 --> 00:12:06,099
more<font color="#CCCCCC"> aggressive so I</font><font color="#E5E5E5"> implemented just</font>

299
00:12:02,920 --> 00:12:08,229
<font color="#E5E5E5">the simplest case we we have things like</font>

300
00:12:06,100 --> 00:12:09,790
unique better and other things that<font color="#CCCCCC"> take</font>

301
00:12:08,230 --> 00:12:12,130
<font color="#E5E5E5">the whole pointer and don't need they</font>

302
00:12:09,790 --> 00:12:17,140
<font color="#CCCCCC">all have default constructors already</font><font color="#E5E5E5"> so</font>

303
00:12:12,130 --> 00:12:19,439
there's no need<font color="#E5E5E5"> to do that we have a</font>

304
00:12:17,140 --> 00:12:22,689
<font color="#E5E5E5">class with</font><font color="#CCCCCC"> ru string buffer which is a</font>

305
00:12:19,440 --> 00:12:26,560
mutable<font color="#E5E5E5"> string class internally manages</font>

306
00:12:22,690 --> 00:12:28,779
<font color="#E5E5E5">memory dynamically and as you can</font><font color="#CCCCCC"> see</font>

307
00:12:26,560 --> 00:12:30,760
people were often<font color="#E5E5E5"> calling the code</font>

308
00:12:28,779 --> 00:12:32,829
that's<font color="#E5E5E5"> got an a pen method</font><font color="#CCCCCC"> to add</font><font color="#E5E5E5"> stuff</font>

309
00:12:30,760 --> 00:12:34,329
to<font color="#E5E5E5"> it but if you if you're doing</font><font color="#CCCCCC"> it if</font>

310
00:12:32,829 --> 00:12:35,680
<font color="#E5E5E5">you're adding two strings together and</font>

311
00:12:34,329 --> 00:12:36,790
then a pending into the string<font color="#CCCCCC"> buff</font>

312
00:12:35,680 --> 00:12:38,050
you're not really<font color="#E5E5E5"> using the string</font>

313
00:12:36,790 --> 00:12:39,640
<font color="#E5E5E5">buffer</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> weight it the way it's</font><font color="#CCCCCC"> made</font>

314
00:12:38,050 --> 00:12:41,560
to<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to constructing an</font>

315
00:12:39,640 --> 00:12:43,180
unnecessary temporary<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> plug-in</font>

316
00:12:41,560 --> 00:12:45,399
goes looking<font color="#CCCCCC"> for places</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that and in</font>

317
00:12:43,180 --> 00:12:47,109
fact<font color="#E5E5E5"> I think I did a rewriter here so</font><font color="#CCCCCC"> I</font>

318
00:12:45,399 --> 00:12:49,269
automatically rewrote a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font>

319
00:12:47,110 --> 00:12:50,560
code<font color="#CCCCCC"> so we then don't</font><font color="#E5E5E5"> bother we don't</font>

320
00:12:49,269 --> 00:12:52,690
need to construct<font color="#E5E5E5"> the temper anymore</font><font color="#CCCCCC"> so</font>

321
00:12:50,560 --> 00:12:56,859
we're<font color="#E5E5E5"> losing a bunch of temporary</font>

322
00:12:52,690 --> 00:12:58,990
creations should return<font color="#CCCCCC"> boom actually we</font>

323
00:12:56,860 --> 00:13:01,029
had a surprising<font color="#E5E5E5"> number of methods</font>

324
00:12:58,990 --> 00:13:05,050
floating around in writer<font color="#E5E5E5"> which appear</font>

325
00:13:01,029 --> 00:13:08,170
<font color="#E5E5E5">to predate the presence of pool as a C++</font>

326
00:13:05,050 --> 00:13:10,209
<font color="#CCCCCC">datatype and</font><font color="#E5E5E5"> consequently those methods</font>

327
00:13:08,170 --> 00:13:13,060
were returning<font color="#E5E5E5"> in too long and they were</font>

328
00:13:10,209 --> 00:13:15,369
only ever<font color="#E5E5E5"> returning one of zero and they</font>

329
00:13:13,060 --> 00:13:16,989
were being<font color="#CCCCCC"> used as bull methods</font><font color="#E5E5E5"> so the</font>

330
00:13:15,370 --> 00:13:18,819
<font color="#CCCCCC">plug-in</font><font color="#E5E5E5"> looked for methods that only</font>

331
00:13:16,990 --> 00:13:21,399
ever<font color="#E5E5E5"> returned the constants</font><font color="#CCCCCC"> 1 or 0 and</font>

332
00:13:18,819 --> 00:13:24,130
we converted those to<font color="#E5E5E5"> return bull so</font>

333
00:13:21,399 --> 00:13:26,980
it's no more more obvious<font color="#E5E5E5"> what those</font>

334
00:13:24,130 --> 00:13:29,890
methods are<font color="#CCCCCC"> actually being used for I</font>

335
00:13:26,980 --> 00:13:32,709
then took my<font color="#E5E5E5"> unused fields analysis and</font>

336
00:13:29,890 --> 00:13:34,029
I extended it unused variables so I

337
00:13:32,709 --> 00:13:36,579
<font color="#CCCCCC">looked for the same some of the kinds of</font>

338
00:13:34,029 --> 00:13:39,069
<font color="#E5E5E5">things in that case we have a sequence</font>

339
00:13:36,579 --> 00:13:42,640
which is<font color="#E5E5E5"> a collection class and it</font>

340
00:13:39,069 --> 00:13:44,170
contains strings of string class<font color="#E5E5E5"> and we</font>

341
00:13:42,640 --> 00:13:45,279
<font color="#E5E5E5">are modifying</font><font color="#CCCCCC"> it but other than that</font>

342
00:13:44,170 --> 00:13:47,740
we're not doing<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> with it</font><font color="#CCCCCC"> so</font>

343
00:13:45,279 --> 00:13:49,180
<font color="#CCCCCC">that's effectively dead code so my</font>

344
00:13:47,740 --> 00:13:50,620
unused variables more<font color="#E5E5E5"> plugin</font>

345
00:13:49,180 --> 00:13:54,430
goes looking<font color="#CCCCCC"> for a bunch of</font><font color="#E5E5E5"> patterns</font>

346
00:13:50,620 --> 00:13:57,819
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that in</font><font color="#E5E5E5"> our code and complaints</font>

347
00:13:54,430 --> 00:13:59,979
<font color="#E5E5E5">like that then we have tools rectangle</font>

348
00:13:57,819 --> 00:14:03,099
we<font color="#CCCCCC"> have a class in the tools namespace</font>

349
00:13:59,980 --> 00:14:05,439
called rectangle<font color="#E5E5E5"> and point in size and</font>

350
00:14:03,100 --> 00:14:09,550
those had event has had methods that

351
00:14:05,439 --> 00:14:10,990
were returning non constant references

352
00:14:09,550 --> 00:14:13,689
<font color="#E5E5E5">which makes the code a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

353
00:14:10,990 --> 00:14:15,490
awkward<font color="#CCCCCC"> to read it can</font><font color="#E5E5E5"> be particularly</font>

354
00:14:13,689 --> 00:14:18,310
<font color="#CCCCCC">Windows that</font><font color="#E5E5E5"> back when we have code like</font>

355
00:14:15,490 --> 00:14:19,899
<font color="#CCCCCC">that</font><font color="#E5E5E5"> yeah the point dot X and then you</font>

356
00:14:18,310 --> 00:14:21,219
adding to<font color="#CCCCCC"> it which</font><font color="#E5E5E5"> actually modifies the</font>

357
00:14:19,899 --> 00:14:23,319
object but<font color="#E5E5E5"> it's not very obvious that</font>

358
00:14:21,220 --> 00:14:25,630
<font color="#CCCCCC">you're you're</font><font color="#E5E5E5"> modifying the object</font>

359
00:14:23,319 --> 00:14:26,709
itself<font color="#E5E5E5"> rather than you know modifying a</font>

360
00:14:25,630 --> 00:14:28,300
temporary of anything<font color="#E5E5E5"> and particular</font>

361
00:14:26,709 --> 00:14:29,380
when<font color="#E5E5E5"> it was buried inside other inside</font>

362
00:14:28,300 --> 00:14:32,800
other statements<font color="#E5E5E5"> that could be quite</font>

363
00:14:29,380 --> 00:14:34,540
hard<font color="#CCCCCC"> to read so I wrote a plug-in that</font>

364
00:14:32,800 --> 00:14:36,459
not only<font color="#CCCCCC"> find</font><font color="#E5E5E5"> these cases that</font>

365
00:14:34,540 --> 00:14:39,160
automatically rewrites them so we ran

366
00:14:36,459 --> 00:14:41,890
out across the<font color="#CCCCCC"> codebase to make the code</font>

367
00:14:39,160 --> 00:14:43,240
easier to read<font color="#E5E5E5"> then I spotted an</font>

368
00:14:41,890 --> 00:14:46,510
interesting error case where somebody

369
00:14:43,240 --> 00:14:48,550
<font color="#E5E5E5">was somebody passed a</font><font color="#CCCCCC"> pointer into</font><font color="#E5E5E5"> a</font>

370
00:14:46,510 --> 00:14:51,189
parameter<font color="#E5E5E5"> that was actually a boolean</font>

371
00:14:48,550 --> 00:14:53,890
<font color="#E5E5E5">and C++ does a silent conversion for you</font>

372
00:14:51,189 --> 00:14:56,829
<font color="#CCCCCC">it does a</font><font color="#E5E5E5"> it as a pointer not equal to</font>

373
00:14:53,890 --> 00:14:59,110
null conversion for you and that<font color="#E5E5E5"> and it</font>

374
00:14:56,829 --> 00:15:01,010
was clearly<font color="#E5E5E5"> not what was</font><font color="#CCCCCC"> intended</font><font color="#E5E5E5"> the</font>

375
00:14:59,110 --> 00:15:02,960
type system<font color="#CCCCCC"> doesn't pick this up so</font>

376
00:15:01,010 --> 00:15:05,480
<font color="#E5E5E5">I wrote a plug-in</font><font color="#CCCCCC"> that goes looking</font><font color="#E5E5E5"> for</font>

377
00:15:02,960 --> 00:15:07,210
<font color="#CCCCCC">places where you</font><font color="#E5E5E5"> are passing pointers</font>

378
00:15:05,480 --> 00:15:10,070
and other similar<font color="#CCCCCC"> auto converted things</font>

379
00:15:07,210 --> 00:15:14,600
into bull parameters and it spits out a

380
00:15:10,070 --> 00:15:18,380
warning cell call was an annotation we

381
00:15:14,600 --> 00:15:22,520
had that modifies the linkage it it

382
00:15:18,380 --> 00:15:24,530
modifies whether<font color="#E5E5E5"> a method is is</font>

383
00:15:22,520 --> 00:15:26,329
internally linked into a<font color="#E5E5E5"> library whether</font>

384
00:15:24,530 --> 00:15:28,069
<font color="#E5E5E5">it's externally visible and we were</font>

385
00:15:26,330 --> 00:15:29,630
using<font color="#E5E5E5"> in a lot</font><font color="#CCCCCC"> of places that</font><font color="#E5E5E5"> it didn't</font>

386
00:15:28,070 --> 00:15:32,540
make<font color="#CCCCCC"> sense this</font><font color="#E5E5E5"> was mostly</font><font color="#CCCCCC"> leftover curd</font>

387
00:15:29,630 --> 00:15:37,100
<font color="#E5E5E5">so we went</font><font color="#CCCCCC"> through it and and eliminated</font>

388
00:15:32,540 --> 00:15:54,199
a bunch of it<font color="#CCCCCC"> and that is what I've</font><font color="#E5E5E5"> been</font>

389
00:15:37,100 --> 00:15:56,510
up to<font color="#E5E5E5"> any questions yes the</font><font color="#CCCCCC"> question is</font>

390
00:15:54,200 --> 00:15:58,640
<font color="#E5E5E5">about using these plugins on on other</font>

391
00:15:56,510 --> 00:16:00,080
<font color="#CCCCCC">other</font><font color="#E5E5E5"> code bases I think they'd be fine</font>

392
00:15:58,640 --> 00:16:02,930
<font color="#E5E5E5">there'd be a nice extension to the</font>

393
00:16:00,080 --> 00:16:06,740
<font color="#CCCCCC">clanked ID set of stuff there's</font><font color="#E5E5E5"> about</font>

394
00:16:02,930 --> 00:16:08,449
<font color="#CCCCCC">110 of them</font><font color="#E5E5E5"> now they probably need some</font>

395
00:16:06,740 --> 00:16:10,520
<font color="#E5E5E5">tweaking to run on</font><font color="#CCCCCC"> your code base but</font>

396
00:16:08,450 --> 00:16:12,710
I'm happy<font color="#CCCCCC"> to help out</font><font color="#E5E5E5"> if you want to if</font>

397
00:16:10,520 --> 00:16:17,829
you<font color="#E5E5E5"> want to ask me questions or do stuff</font>

398
00:16:12,710 --> 00:16:17,830
<font color="#E5E5E5">no</font><font color="#CCCCCC"> sir</font>

399
00:16:29,530 --> 00:16:47,810
<font color="#E5E5E5">no</font><font color="#CCCCCC"> we'd c+ pastor short-circuit</font>

400
00:16:32,780 --> 00:16:49,220
evaluation we<font color="#E5E5E5"> do Bosch used to do that</font>

401
00:16:47,810 --> 00:16:51,680
does he still do it and<font color="#CCCCCC"> you wouldn't</font>

402
00:16:49,220 --> 00:16:53,000
<font color="#E5E5E5">remember we did do it</font><font color="#CCCCCC"> somebody'd</font>

403
00:16:51,680 --> 00:16:59,510
<font color="#E5E5E5">somebody was doing</font><font color="#CCCCCC"> it at one point I'm</font>

404
00:16:53,000 --> 00:17:01,660
not<font color="#E5E5E5"> sure if I still doing it yeah yes</font>

405
00:16:59,510 --> 00:17:01,660
<font color="#E5E5E5">sir</font>

406
00:17:03,910 --> 00:17:09,170
<font color="#CCCCCC">Mukesh has upstream one of them the</font>

407
00:17:06,319 --> 00:17:10,579
macro check<font color="#E5E5E5"> it that he wrote other than</font>

408
00:17:09,170 --> 00:17:12,800
<font color="#CCCCCC">that no I</font><font color="#E5E5E5"> haven't upstream be any of</font>

409
00:17:10,579 --> 00:17:14,089
these the ones that are the ones that

410
00:17:12,800 --> 00:17:15,500
<font color="#E5E5E5">are most proud</font><font color="#CCCCCC"> of all the</font><font color="#E5E5E5"> ones</font><font color="#CCCCCC"> that are</font>

411
00:17:14,089 --> 00:17:22,970
least able<font color="#E5E5E5"> to be up streamed because</font>

412
00:17:15,500 --> 00:17:24,349
they are yeah yeah but this sorry<font color="#E5E5E5"> yes</font>

413
00:17:22,970 --> 00:17:26,510
they're part of<font color="#E5E5E5"> the libreoffice</font>

414
00:17:24,349 --> 00:17:31,540
repository so anybody's welcome<font color="#E5E5E5"> to grab</font>

415
00:17:26,510 --> 00:17:31,540
them yes<font color="#E5E5E5"> sir</font>

416
00:17:33,050 --> 00:17:37,950
they're all in if you look in the<font color="#CCCCCC"> libre</font>

417
00:17:35,670 --> 00:18:02,090
<font color="#CCCCCC">office</font><font color="#E5E5E5"> get tree</font><font color="#CCCCCC"> there under compiler</font>

418
00:17:37,950 --> 00:18:02,090
plugins sorry thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

419
00:18:06,730 --> 00:18:09,819
[Applause]

