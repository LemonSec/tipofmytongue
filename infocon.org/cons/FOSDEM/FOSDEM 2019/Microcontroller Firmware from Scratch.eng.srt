1
00:00:05,229 --> 00:00:13,940
<font color="#CCCCCC">okay hello everyone thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> coming</font>

2
00:00:08,510 --> 00:00:18,020
<font color="#E5E5E5">I make</font><font color="#CCCCCC"> like under</font><font color="#E5E5E5"> shelf just</font><font color="#CCCCCC"> waiting for</font>

3
00:00:13,940 --> 00:00:21,680
a sound<font color="#E5E5E5"> check this</font><font color="#CCCCCC"> is working</font><font color="#E5E5E5"> okay</font>

4
00:00:18,020 --> 00:00:25,369
I'm<font color="#E5E5E5"> Nicola Condor chef and I'm here to</font>

5
00:00:21,680 --> 00:00:27,439
present to<font color="#E5E5E5"> you how to very quickly how</font>

6
00:00:25,369 --> 00:00:28,698
<font color="#CCCCCC">to produce a film layer for a</font>

7
00:00:27,439 --> 00:00:31,490
microcontroller from scratch<font color="#E5E5E5"> without</font>

8
00:00:28,699 --> 00:00:33,430
using any libraries<font color="#CCCCCC"> I only got 25</font>

9
00:00:31,490 --> 00:00:36,830
<font color="#CCCCCC">minutes so I'm going</font><font color="#E5E5E5"> to go very fast</font>

10
00:00:33,430 --> 00:00:39,559
<font color="#CCCCCC">these</font><font color="#E5E5E5"> slides are available</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> force them</font>

11
00:00:36,830 --> 00:00:42,739
page and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> on my</font><font color="#E5E5E5"> Twitter page right</font>

12
00:00:39,559 --> 00:00:45,980
now<font color="#E5E5E5"> if you'd</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to see them closer so</font>

13
00:00:42,739 --> 00:00:47,809
I do this stuff<font color="#E5E5E5"> far as my hobby I'm I</font>

14
00:00:45,980 --> 00:00:49,760
have not studied at<font color="#CCCCCC"> the University</font>

15
00:00:47,809 --> 00:00:52,129
actually<font color="#E5E5E5"> I dropped out twice and haven't</font>

16
00:00:49,760 --> 00:00:56,420
finished my<font color="#CCCCCC"> university</font><font color="#E5E5E5"> so if I can do it</font>

17
00:00:52,129 --> 00:01:00,430
you<font color="#CCCCCC"> can certainly do it so what we're</font>

18
00:00:56,420 --> 00:01:02,690
<font color="#E5E5E5">going to be talking about I've had I</font>

19
00:01:00,430 --> 00:01:05,479
just was<font color="#CCCCCC"> playing with BeagleBone black</font>

20
00:01:02,690 --> 00:01:07,940
and trying some assembly stuff<font color="#E5E5E5"> then I</font>

21
00:01:05,479 --> 00:01:12,140
decided to<font color="#E5E5E5"> build something</font><font color="#CCCCCC"> and bought</font><font color="#E5E5E5"> an</font>

22
00:01:07,940 --> 00:01:14,950
<font color="#E5E5E5">Arduino and I burned it</font><font color="#CCCCCC"> and I thought</font>

23
00:01:12,140 --> 00:01:17,599
that's a bit<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> I buy it again</font>

24
00:01:14,950 --> 00:01:19,970
<font color="#CCCCCC">original order enos I found</font><font color="#E5E5E5"> these little</font>

25
00:01:17,599 --> 00:01:22,729
boards which<font color="#CCCCCC"> have this</font><font color="#E5E5E5"> microcontroller</font>

26
00:01:19,970 --> 00:01:24,020
<font color="#CCCCCC">on them and they cost</font><font color="#E5E5E5"> with the stuff</font>

27
00:01:22,729 --> 00:01:26,899
that<font color="#CCCCCC"> you need to program</font><font color="#E5E5E5"> it cost like</font>

28
00:01:24,020 --> 00:01:28,789
three and<font color="#E5E5E5"> a half euros with delivery so</font>

29
00:01:26,899 --> 00:01:30,709
<font color="#E5E5E5">you can start easily you can buy</font><font color="#CCCCCC"> ten of</font>

30
00:01:28,789 --> 00:01:35,810
<font color="#E5E5E5">them and burn them all and one from the</font>

31
00:01:30,709 --> 00:01:38,000
other<font color="#E5E5E5"> so this is the stuff that I was</font>

32
00:01:35,810 --> 00:01:40,369
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> build with it this</font><font color="#E5E5E5"> is out of</font>

33
00:01:38,000 --> 00:01:43,759
<font color="#E5E5E5">Lego and scanner and printer parts and</font>

34
00:01:40,369 --> 00:01:47,270
then some EEPROM<font color="#E5E5E5"> dumping and then this</font>

35
00:01:43,759 --> 00:01:48,800
<font color="#E5E5E5">little Christmas present</font><font color="#CCCCCC"> for my wife and</font>

36
00:01:47,270 --> 00:01:52,399
this is what I'm working<font color="#E5E5E5"> on right now</font>

37
00:01:48,800 --> 00:01:56,390
<font color="#CCCCCC">this is a printer interface</font><font color="#E5E5E5"> for the ZX</font>

38
00:01:52,399 --> 00:01:59,690
<font color="#CCCCCC">Spectrum for the boss of</font><font color="#E5E5E5"> the spectrum</font>

39
00:01:56,390 --> 00:02:01,940
not the serial one<font color="#E5E5E5"> you will still need</font>

40
00:01:59,690 --> 00:02:05,209
one library and the stuffs your library

41
00:02:01,940 --> 00:02:06,649
<font color="#E5E5E5">that you're going to use and or rather I</font>

42
00:02:05,209 --> 00:02:10,190
should<font color="#E5E5E5"> call the documentation stack</font>

43
00:02:06,649 --> 00:02:12,530
because this there are layers and<font color="#E5E5E5"> layers</font>

44
00:02:10,190 --> 00:02:15,620
<font color="#CCCCCC">of it so the</font><font color="#E5E5E5"> first of course</font><font color="#CCCCCC"> is the</font>

45
00:02:12,530 --> 00:02:17,180
<font color="#E5E5E5">board documentation and by the way</font><font color="#CCCCCC"> are</font>

46
00:02:15,620 --> 00:02:21,200
have anybody<font color="#E5E5E5"> program that</font>

47
00:02:17,180 --> 00:02:23,709
microcontroller here before<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> anybody</font>

48
00:02:21,200 --> 00:02:26,149
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> except Audrina</font>

49
00:02:23,709 --> 00:02:30,110
the<font color="#CCCCCC"> thought of</font><font color="#E5E5E5"> why did</font><font color="#CCCCCC"> you come</font>

50
00:02:26,150 --> 00:02:35,030
<font color="#E5E5E5">okay so I hope I will be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> tell</font>

51
00:02:30,110 --> 00:02:38,239
you something new<font color="#E5E5E5"> so so starting with</font>

52
00:02:35,030 --> 00:02:39,680
the board documentation<font color="#E5E5E5"> you can find it</font>

53
00:02:38,239 --> 00:02:41,450
on<font color="#E5E5E5"> the way up with this name of the</font>

54
00:02:39,680 --> 00:02:43,730
board and there is a manufacturer's

55
00:02:41,450 --> 00:02:46,099
website there<font color="#CCCCCC"> is some some stuff then</font>

56
00:02:43,730 --> 00:02:49,929
there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> of course the datasheet for the</font>

57
00:02:46,099 --> 00:02:53,569
for the microcontroller<font color="#CCCCCC"> on board and the</font>

58
00:02:49,930 --> 00:02:56,420
microcontroller family<font color="#E5E5E5"> a reference</font>

59
00:02:53,569 --> 00:02:57,950
manual<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> there the biggest one</font>

60
00:02:56,420 --> 00:02:59,390
here and this is the one<font color="#CCCCCC"> that you will</font>

61
00:02:57,950 --> 00:03:01,040
<font color="#E5E5E5">use</font><font color="#CCCCCC"> the most because it has the</font>

62
00:02:59,390 --> 00:03:02,179
description of how everything<font color="#E5E5E5"> works</font><font color="#CCCCCC"> all</font>

63
00:03:01,040 --> 00:03:03,980
the peripherals how they are connected

64
00:03:02,180 --> 00:03:06,049
<font color="#CCCCCC">and what to do with them</font>

65
00:03:03,980 --> 00:03:08,599
then there's the programmers manual

66
00:03:06,049 --> 00:03:11,840
which gives you like programming<font color="#E5E5E5"> tricks</font>

67
00:03:08,599 --> 00:03:13,369
and things and of course the<font color="#E5E5E5"> technical</font>

68
00:03:11,840 --> 00:03:15,290
reference manual for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cortex times 3</font>

69
00:03:13,370 --> 00:03:17,000
which is the<font color="#E5E5E5"> CPU on that</font><font color="#CCCCCC"> that</font>

70
00:03:15,290 --> 00:03:19,519
microcontroller<font color="#E5E5E5"> and then the finally the</font>

71
00:03:17,000 --> 00:03:20,959
architecture reference manual to find

72
00:03:19,519 --> 00:03:23,329
out all the<font color="#CCCCCC"> things</font><font color="#E5E5E5"> that you need this is</font>

73
00:03:20,959 --> 00:03:27,139
<font color="#CCCCCC">a basically all that</font><font color="#E5E5E5"> you need maybe just</font>

74
00:03:23,329 --> 00:03:29,630
a little<font color="#E5E5E5"> extra and then this is a lot of</font>

75
00:03:27,139 --> 00:03:32,630
<font color="#CCCCCC">documentation like two and a half two</font>

76
00:03:29,630 --> 00:03:33,950
and<font color="#CCCCCC"> a half thousands of pages but don't</font>

77
00:03:32,630 --> 00:03:35,720
be<font color="#E5E5E5"> afraid of them they are very well</font>

78
00:03:33,950 --> 00:03:37,130
<font color="#E5E5E5">written these specific ones and I expect</font>

79
00:03:35,720 --> 00:03:38,420
many<font color="#E5E5E5"> microcontrollers have very well</font>

80
00:03:37,130 --> 00:03:42,880
written documentation which tell you

81
00:03:38,420 --> 00:03:45,918
what to do<font color="#CCCCCC"> so the board</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the top is</font>

82
00:03:42,880 --> 00:03:48,560
use<font color="#E5E5E5"> B socket</font><font color="#CCCCCC"> boot configuration pins</font>

83
00:03:45,919 --> 00:03:51,440
reset button MCU the<font color="#CCCCCC"> eight megahertz</font>

84
00:03:48,560 --> 00:03:54,680
system clock crystal 32 kilohertz<font color="#CCCCCC"> real</font>

85
00:03:51,440 --> 00:03:59,299
<font color="#CCCCCC">real-time clock</font><font color="#E5E5E5"> and power and user</font><font color="#CCCCCC"> LED</font>

86
00:03:54,680 --> 00:04:00,440
and<font color="#E5E5E5"> the set of wire debug header so if</font>

87
00:03:59,299 --> 00:04:02,359
you look at the<font color="#CCCCCC"> first page of the</font>

88
00:04:00,440 --> 00:04:06,340
<font color="#E5E5E5">datasheet</font><font color="#CCCCCC"> you could see</font><font color="#E5E5E5"> that it's a</font>

89
00:04:02,359 --> 00:04:10,310
maximum speed is 72 megahertz which has

90
00:04:06,340 --> 00:04:12,680
1.25<font color="#E5E5E5"> MIPS per megahertz which is 180</font>

91
00:04:10,310 --> 00:04:15,560
<font color="#E5E5E5">times more than that</font><font color="#CCCCCC"> spectrum that you</font>

92
00:04:12,680 --> 00:04:17,840
saw before<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it also has single cycle</font>

93
00:04:15,560 --> 00:04:21,440
multiplication<font color="#E5E5E5"> and hardware division</font>

94
00:04:17,839 --> 00:04:24,380
which is amazing<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> not that much</font>

95
00:04:21,440 --> 00:04:27,620
memory<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> less than when the first</font>

96
00:04:24,380 --> 00:04:29,300
<font color="#E5E5E5">spec</font><font color="#CCCCCC"> detects spectrum head but it's in</font>

97
00:04:27,620 --> 00:04:31,190
enough for the<font color="#E5E5E5"> microcontroller</font>

98
00:04:29,300 --> 00:04:34,129
and the lots of pins<font color="#CCCCCC"> although this</font>

99
00:04:31,190 --> 00:04:35,629
specific chip has not<font color="#CCCCCC"> 80 but less but</font>

100
00:04:34,129 --> 00:04:37,400
still<font color="#CCCCCC"> there most of them are 5 volt</font>

101
00:04:35,629 --> 00:04:40,159
tolerant which is great for experiments

102
00:04:37,400 --> 00:04:45,258
and<font color="#E5E5E5"> for 5-volt logic and of course the</font>

103
00:04:40,159 --> 00:04:47,210
plenty of peripherals<font color="#CCCCCC"> so how</font><font color="#E5E5E5"> to get your</font>

104
00:04:45,259 --> 00:04:50,150
<font color="#E5E5E5">program so you got a look at the data</font>

105
00:04:47,210 --> 00:04:52,128
sheet first and it says that<font color="#CCCCCC"> bootloader</font>

106
00:04:50,150 --> 00:04:55,400
<font color="#E5E5E5">is located in system memory</font><font color="#CCCCCC"> whatever</font>

107
00:04:52,129 --> 00:04:59,569
that is<font color="#E5E5E5"> and it is you can reprogram the</font>

108
00:04:55,400 --> 00:05:01,878
flesh by you start one<font color="#CCCCCC"> it doesn't say</font>

109
00:04:59,569 --> 00:05:06,469
anything else but reference manual says

110
00:05:01,879 --> 00:05:09,020
<font color="#CCCCCC">that there are</font><font color="#E5E5E5"> you can affect what</font>

111
00:05:06,469 --> 00:05:14,300
memory is mapped and which memory is

112
00:05:09,020 --> 00:05:16,789
used<font color="#E5E5E5"> for booting using the boot pins and</font>

113
00:05:14,300 --> 00:05:19,430
then this specific configuration will

114
00:05:16,789 --> 00:05:21,469
boot us the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> memory which is the</font>

115
00:05:19,430 --> 00:05:24,110
<font color="#CCCCCC">query</font><font color="#E5E5E5"> the bootloader</font><font color="#CCCCCC"> is and if you look</font>

116
00:05:21,469 --> 00:05:26,240
at the board documentation<font color="#E5E5E5"> it also</font>

117
00:05:24,110 --> 00:05:31,849
repeats this table here<font color="#E5E5E5"> and it says that</font>

118
00:05:26,240 --> 00:05:34,779
the<font color="#CCCCCC"> ISP which is an in circuit system</font>

119
00:05:31,849 --> 00:05:37,400
programmer in system program I'm sorry

120
00:05:34,779 --> 00:05:40,099
<font color="#CCCCCC">it's basically the</font><font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> as the</font>

121
00:05:37,400 --> 00:05:41,840
bootloader<font color="#CCCCCC"> in this case and if you take</font>

122
00:05:40,099 --> 00:05:45,860
a look<font color="#E5E5E5"> at the default configuration</font><font color="#CCCCCC"> you</font>

123
00:05:41,840 --> 00:05:48,049
<font color="#E5E5E5">need to change just this jumper then</font>

124
00:05:45,860 --> 00:05:50,539
finally you need<font color="#E5E5E5"> to know you find out</font>

125
00:05:48,050 --> 00:05:52,279
<font color="#E5E5E5">where to actually connect where's the</font>

126
00:05:50,539 --> 00:05:55,250
bootloader<font color="#E5E5E5"> is listening for</font><font color="#CCCCCC"> you sort and</font>

127
00:05:52,279 --> 00:05:57,800
that's<font color="#CCCCCC"> visible in the separate document</font>

128
00:05:55,250 --> 00:05:59,569
<font color="#E5E5E5">not mentioned before it's a big document</font>

129
00:05:57,800 --> 00:06:01,039
summarizing all the configurations of

130
00:05:59,569 --> 00:06:03,860
<font color="#CCCCCC">the boot loaders and</font><font color="#E5E5E5"> all the boards</font><font color="#CCCCCC"> that</font>

131
00:06:01,039 --> 00:06:08,150
<font color="#CCCCCC">st produces</font><font color="#E5E5E5"> from this family and it says</font>

132
00:06:03,860 --> 00:06:13,129
that there's the<font color="#CCCCCC"> paroxysm PPA</font><font color="#E5E5E5"> 10 and</font>

133
00:06:08,150 --> 00:06:15,219
<font color="#E5E5E5">texas on PA 9 and here's the here's the</font>

134
00:06:13,129 --> 00:06:18,949
<font color="#CCCCCC">P now it's basically mapped out for</font><font color="#E5E5E5"> you</font>

135
00:06:15,219 --> 00:06:21,110
and don't<font color="#E5E5E5"> forget to cross the serial</font><font color="#CCCCCC"> Tex</font>

136
00:06:18,949 --> 00:06:23,240
and<font color="#CCCCCC"> Durex as usual and you can supply</font>

137
00:06:21,110 --> 00:06:24,889
<font color="#E5E5E5">the power from the serial cable but I</font>

138
00:06:23,240 --> 00:06:29,389
found<font color="#CCCCCC"> that it's for some reason</font><font color="#E5E5E5"> doesn't</font>

139
00:06:24,889 --> 00:06:31,460
work very<font color="#E5E5E5"> reliably and sometimes doesn't</font>

140
00:06:29,389 --> 00:06:34,129
<font color="#CCCCCC">turn on I don't know maybe the cable is</font>

141
00:06:31,460 --> 00:06:35,810
<font color="#E5E5E5">not</font><font color="#CCCCCC"> very good done or there's the</font>

142
00:06:34,129 --> 00:06:37,520
voltage<font color="#E5E5E5"> regulator doesn't work very well</font>

143
00:06:35,810 --> 00:06:39,770
so<font color="#CCCCCC"> in that case you</font><font color="#E5E5E5"> can just take a</font>

144
00:06:37,520 --> 00:06:41,448
separate<font color="#E5E5E5"> to use mini USB cable a micro</font>

145
00:06:39,770 --> 00:06:42,139
USB cable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> connected but</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> forget</font>

146
00:06:41,449 --> 00:06:45,050
to<font color="#CCCCCC"> disk</font>

147
00:06:42,139 --> 00:06:46,699
like the<font color="#E5E5E5"> VCC right away if you</font><font color="#CCCCCC"> manage to</font>

148
00:06:45,050 --> 00:06:48,949
<font color="#E5E5E5">give me any questions there</font><font color="#CCCCCC"> is a fair</font>

149
00:06:46,699 --> 00:06:53,300
present for the<font color="#E5E5E5"> best question as one</font>

150
00:06:48,949 --> 00:06:54,979
development kid<font color="#CCCCCC"> so that's how it will</font>

151
00:06:53,300 --> 00:06:59,539
look<font color="#E5E5E5"> if you connect</font><font color="#CCCCCC"> a wreckin and power</font>

152
00:06:54,979 --> 00:07:01,340
<font color="#E5E5E5">it on then</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> to do what how to flash</font>

153
00:06:59,539 --> 00:07:04,370
it you can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> basically look for</font><font color="#CCCCCC"> it in</font>

154
00:07:01,340 --> 00:07:05,960
your<font color="#CCCCCC"> Linux distros and you go find stm32</font>

155
00:07:04,370 --> 00:07:08,180
flash which<font color="#CCCCCC"> is exactly the tool</font><font color="#E5E5E5"> that you</font>

156
00:07:05,960 --> 00:07:12,138
could use<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> and it has a ton of</font>

157
00:07:08,180 --> 00:07:15,590
features and it works<font color="#CCCCCC"> very reliably for</font>

158
00:07:12,139 --> 00:07:17,599
me so while we don't<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> program yet</font>

159
00:07:15,590 --> 00:07:19,188
we can already<font color="#E5E5E5"> use that tool</font><font color="#CCCCCC"> to find to</font>

160
00:07:17,599 --> 00:07:21,050
verify that<font color="#E5E5E5"> everything is connected</font>

161
00:07:19,189 --> 00:07:23,090
right<font color="#E5E5E5"> and everything works and find out</font>

162
00:07:21,050 --> 00:07:25,729
the port parameters<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> can see that</font>

163
00:07:23,090 --> 00:07:29,090
this one is 128 kilobytes of memory

164
00:07:25,729 --> 00:07:34,878
which is<font color="#E5E5E5"> a normal</font><font color="#CCCCCC"> for like for the old</font>

165
00:07:29,090 --> 00:07:36,169
recent boards<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> then before</font><font color="#CCCCCC"> I go</font>

166
00:07:34,879 --> 00:07:39,229
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next section you have to</font>

167
00:07:36,169 --> 00:07:40,698
remember this this<font color="#E5E5E5"> one thing so I guess</font>

168
00:07:39,229 --> 00:07:43,360
the embedded engineers don't<font color="#E5E5E5"> often say</font>

169
00:07:40,699 --> 00:07:46,960
<font color="#E5E5E5">this but this</font><font color="#CCCCCC"> is easy</font><font color="#E5E5E5"> and fun</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do this</font>

170
00:07:43,360 --> 00:07:52,009
<font color="#E5E5E5">well of</font><font color="#CCCCCC"> course unless</font><font color="#E5E5E5"> you're paid</font><font color="#CCCCCC"> for it</font>

171
00:07:46,960 --> 00:07:55,669
so so there's<font color="#E5E5E5"> the initial like very very</font>

172
00:07:52,009 --> 00:07:57,349
very<font color="#E5E5E5"> steep ramp in knowledge but once</font>

173
00:07:55,669 --> 00:07:59,628
you get<font color="#E5E5E5"> past</font><font color="#CCCCCC"> the basics its it's really</font>

174
00:07:57,349 --> 00:08:03,620
<font color="#CCCCCC">easy and fun and</font><font color="#E5E5E5"> if you don't have a</font>

175
00:07:59,629 --> 00:08:05,229
deadline<font color="#CCCCCC"> it's very satisfying so</font><font color="#E5E5E5"> of</font>

176
00:08:03,620 --> 00:08:07,729
course we're going to<font color="#CCCCCC"> blink</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> LED and</font>

177
00:08:05,229 --> 00:08:09,258
we're start by finding where<font color="#E5E5E5"> the light</font>

178
00:08:07,729 --> 00:08:11,300
is connected<font color="#E5E5E5"> and this is their</font>

179
00:08:09,259 --> 00:08:13,849
manufacturer schematics this is all of

180
00:08:11,300 --> 00:08:16,550
it<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> and there is the light and</font>

181
00:08:13,849 --> 00:08:21,889
the Google<font color="#E5E5E5"> Translate says that it says</font>

182
00:08:16,550 --> 00:08:24,560
<font color="#E5E5E5">d2 is programmable so this is the this</font>

183
00:08:21,889 --> 00:08:27,979
is<font color="#CCCCCC"> the one we need</font><font color="#E5E5E5"> but it's a very</font>

184
00:08:24,560 --> 00:08:30,169
curiously connected that it's<font color="#CCCCCC"> anode is</font>

185
00:08:27,979 --> 00:08:33,500
connected<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> power</font><font color="#E5E5E5"> directly and this</font>

186
00:08:30,169 --> 00:08:35,328
cathode<font color="#E5E5E5"> is connected to the</font><font color="#CCCCCC"> m2 PC</font><font color="#E5E5E5"> 13</font>

187
00:08:33,500 --> 00:08:37,969
<font color="#E5E5E5">which means that certain to turn this</font>

188
00:08:35,328 --> 00:08:40,189
led on we need<font color="#E5E5E5"> to pull the pull</font><font color="#CCCCCC"> the pin</font>

189
00:08:37,969 --> 00:08:41,810
down which would<font color="#E5E5E5"> be like</font><font color="#CCCCCC"> you know</font>

190
00:08:40,190 --> 00:08:43,610
<font color="#E5E5E5">counterproductive you write one you</font>

191
00:08:41,809 --> 00:08:45,859
<font color="#CCCCCC">expect the LED to light up but we need</font>

192
00:08:43,610 --> 00:08:49,279
to do the reverse here and that's

193
00:08:45,860 --> 00:08:51,490
<font color="#E5E5E5">because as the pin pin table in</font>

194
00:08:49,279 --> 00:08:54,769
description table in the datasheet says

195
00:08:51,490 --> 00:08:55,880
you got a<font color="#CCCCCC"> there's there's a little</font>

196
00:08:54,769 --> 00:08:58,070
footnote there

197
00:08:55,880 --> 00:09:02,090
<font color="#CCCCCC">this pin description number</font><font color="#E5E5E5"> five and it</font>

198
00:08:58,070 --> 00:09:03,740
says that this this<font color="#E5E5E5"> is connected to the</font>

199
00:09:02,090 --> 00:09:05,810
power<font color="#E5E5E5"> switch which</font><font color="#CCCCCC"> ozone has</font><font color="#E5E5E5"> only very</font>

200
00:09:03,740 --> 00:09:07,220
limited<font color="#CCCCCC"> current capacity 3 milliamperes</font>

201
00:09:05,810 --> 00:09:09,349
<font color="#CCCCCC">which is not enough</font><font color="#E5E5E5"> to drive the let's</font>

202
00:09:07,220 --> 00:09:10,550
see you should not do that<font color="#E5E5E5"> to use it as</font>

203
00:09:09,350 --> 00:09:14,210
the<font color="#E5E5E5"> current source and you should also</font>

204
00:09:10,550 --> 00:09:15,380
limit<font color="#E5E5E5"> the speed to 2 megahertz</font><font color="#CCCCCC"> and must</font>

205
00:09:14,210 --> 00:09:19,040
<font color="#E5E5E5">not be used to the current source to</font>

206
00:09:15,380 --> 00:09:21,470
<font color="#E5E5E5">drive an LED and</font><font color="#CCCCCC"> so they so the board</font>

207
00:09:19,040 --> 00:09:23,150
creators were very economical<font color="#CCCCCC"> and they</font>

208
00:09:21,470 --> 00:09:24,890
used one of<font color="#E5E5E5"> the most useless pins to</font>

209
00:09:23,150 --> 00:09:26,300
drive the LED<font color="#E5E5E5"> because it doesn't say</font>

210
00:09:24,890 --> 00:09:32,510
that<font color="#CCCCCC"> you cannot use it</font><font color="#E5E5E5"> as the current</font>

211
00:09:26,300 --> 00:09:35,180
<font color="#E5E5E5">sink next</font><font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> ready to sketch out</font>

212
00:09:32,510 --> 00:09:37,460
our program<font color="#E5E5E5"> what we need to do is to</font>

213
00:09:35,180 --> 00:09:39,579
configure<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PC certain pins for open</font>

214
00:09:37,460 --> 00:09:43,100
drain output 2 megahertz max speed and

215
00:09:39,580 --> 00:09:45,020
we need to do an infinite<font color="#E5E5E5"> loop and wait</font>

216
00:09:43,100 --> 00:09:46,400
a little<font color="#E5E5E5"> bit and then toggle the LED</font>

217
00:09:45,020 --> 00:09:48,140
that's<font color="#E5E5E5"> what we need to do</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> there's a</font>

218
00:09:46,400 --> 00:09:48,530
little<font color="#CCCCCC"> more but we'll see just</font><font color="#E5E5E5"> in a</font>

219
00:09:48,140 --> 00:09:51,290
moment

220
00:09:48,530 --> 00:09:53,449
so we have our<font color="#E5E5E5"> well program but we need</font>

221
00:09:51,290 --> 00:09:55,730
to tell the microcontroller<font color="#E5E5E5"> to run it</font>

222
00:09:53,450 --> 00:09:57,980
somehow so the vector table comes in<font color="#E5E5E5"> but</font>

223
00:09:55,730 --> 00:10:00,560
<font color="#E5E5E5">first before that we</font><font color="#CCCCCC"> need to see the arm</font>

224
00:09:57,980 --> 00:10:02,000
CPU<font color="#E5E5E5"> our asset behavior and we're not</font>

225
00:10:00,560 --> 00:10:04,550
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> all of that as it</font><font color="#E5E5E5"> is</font>

226
00:10:02,000 --> 00:10:06,830
just a piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the end here and it says</font>

227
00:10:04,550 --> 00:10:08,540
<font color="#E5E5E5">that the CPU gets the vector table</font>

228
00:10:06,830 --> 00:10:09,710
address from<font color="#E5E5E5"> the detour register well</font>

229
00:10:08,540 --> 00:10:12,439
actually there's some some of the

230
00:10:09,710 --> 00:10:13,820
highest bit then it takes from that

231
00:10:12,440 --> 00:10:16,970
vector address the first entry which is

232
00:10:13,820 --> 00:10:19,880
<font color="#E5E5E5">4 bytes and puts it into the stack</font>

233
00:10:16,970 --> 00:10:21,620
pointer which is the stack is full

234
00:10:19,880 --> 00:10:23,030
descendants that that means<font color="#CCCCCC"> that this</font>

235
00:10:21,620 --> 00:10:25,340
tech pointer<font color="#E5E5E5"> should point right above</font>

236
00:10:23,030 --> 00:10:28,579
the stack<font color="#CCCCCC"> area and it always points</font><font color="#E5E5E5"> to</font>

237
00:10:25,340 --> 00:10:30,740
the<font color="#CCCCCC"> last and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> entry that is pushed</font>

238
00:10:28,580 --> 00:10:32,720
last so our stack pointer should point

239
00:10:30,740 --> 00:10:34,340
right above the stack pointer<font color="#E5E5E5"> then it</font>

240
00:10:32,720 --> 00:10:37,040
takes the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> 4 byte entry from the</font>

241
00:10:34,340 --> 00:10:41,060
vector<font color="#CCCCCC"> table</font><font color="#E5E5E5"> and branches to</font><font color="#CCCCCC"> it that's</font>

242
00:10:37,040 --> 00:10:43,490
our<font color="#E5E5E5"> reset handler so what we need to do</font>

243
00:10:41,060 --> 00:10:45,319
is we need to<font color="#E5E5E5"> somehow</font><font color="#CCCCCC"> okay the stack we</font>

244
00:10:43,490 --> 00:10:47,110
put this right here<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> even</font>

245
00:10:45,320 --> 00:10:49,970
normally done that but<font color="#E5E5E5"> we can do that</font>

246
00:10:47,110 --> 00:10:51,860
<font color="#E5E5E5">there's the vector table so we put our</font>

247
00:10:49,970 --> 00:10:56,000
stack address<font color="#E5E5E5"> that is above the stack</font>

248
00:10:51,860 --> 00:10:58,160
and<font color="#E5E5E5"> we put our reset handler but next we</font>

249
00:10:56,000 --> 00:11:01,520
don't know what's the actual vector

250
00:10:58,160 --> 00:11:02,719
<font color="#CCCCCC">vitro</font><font color="#E5E5E5"> registered</font><font color="#CCCCCC"> the reset</font><font color="#E5E5E5"> and we don't</font>

251
00:11:01,520 --> 00:11:05,750
know where we should<font color="#CCCCCC"> put the</font><font color="#E5E5E5"> vector</font>

252
00:11:02,720 --> 00:11:07,400
table we don't<font color="#CCCCCC"> know how so if we take a</font>

253
00:11:05,750 --> 00:11:11,150
<font color="#E5E5E5">look at the architecture</font>

254
00:11:07,400 --> 00:11:12,890
manual<font color="#E5E5E5"> it</font><font color="#CCCCCC"> says that it is</font><font color="#E5E5E5"> zero normally</font>

255
00:11:11,150 --> 00:11:14,900
but it can be overridden by<font color="#E5E5E5"> a bloomin</font>

256
00:11:12,890 --> 00:11:16,760
<font color="#CCCCCC">tation</font><font color="#E5E5E5"> so we checked the implementation</font>

257
00:11:14,900 --> 00:11:18,470
and<font color="#E5E5E5"> it says</font><font color="#CCCCCC"> my system reset the vector</font>

258
00:11:16,760 --> 00:11:20,960
table is fixed at address<font color="#E5E5E5"> zero which is</font>

259
00:11:18,470 --> 00:11:22,460
great<font color="#E5E5E5"> for us so let's look at what's</font>

260
00:11:20,960 --> 00:11:25,850
happening at address zero<font color="#CCCCCC"> it's memory</font>

261
00:11:22,460 --> 00:11:29,180
map from the<font color="#E5E5E5"> datasheet and here we see</font>

262
00:11:25,850 --> 00:11:31,400
<font color="#E5E5E5">that</font><font color="#CCCCCC"> at address</font><font color="#E5E5E5"> zero we can have either</font>

263
00:11:29,180 --> 00:11:32,569
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> or system memory remember that</font>

264
00:11:31,400 --> 00:11:34,610
system memory<font color="#E5E5E5"> that's where the</font>

265
00:11:32,570 --> 00:11:36,200
bootloader<font color="#E5E5E5"> lives but we can also have</font>

266
00:11:34,610 --> 00:11:39,200
<font color="#E5E5E5">flash and it's dependent on the boot</font>

267
00:11:36,200 --> 00:11:40,700
pins from<font color="#E5E5E5"> that table which means that</font>

268
00:11:39,200 --> 00:11:42,080
<font color="#CCCCCC">basically what we</font><font color="#E5E5E5"> need to do is to put</font>

269
00:11:40,700 --> 00:11:45,710
our vector<font color="#CCCCCC"> table at the start of</font><font color="#E5E5E5"> the</font>

270
00:11:42,080 --> 00:11:47,960
flash<font color="#CCCCCC"> address zero but we also see that</font>

271
00:11:45,710 --> 00:11:51,260
flash memory is normally<font color="#E5E5E5"> living at zero</font>

272
00:11:47,960 --> 00:11:53,480
<font color="#E5E5E5">eight and all zeros so we need to make</font>

273
00:11:51,260 --> 00:11:57,650
our code be aware that<font color="#CCCCCC"> its location will</font>

274
00:11:53,480 --> 00:11:59,420
be<font color="#E5E5E5"> there and furthermore we</font><font color="#CCCCCC"> can while</font>

275
00:11:57,650 --> 00:12:01,160
we're here we can<font color="#CCCCCC"> check where our</font><font color="#E5E5E5"> SRAM</font>

276
00:11:59,420 --> 00:12:04,969
is that's where we should<font color="#E5E5E5"> put our</font><font color="#CCCCCC"> stack</font>

277
00:12:01,160 --> 00:12:07,310
<font color="#CCCCCC">and our</font><font color="#E5E5E5"> global global variables so we</font>

278
00:12:04,970 --> 00:12:07,760
<font color="#CCCCCC">can sell that to</font><font color="#E5E5E5"> link our using a linker</font>

279
00:12:07,310 --> 00:12:09,619
script

280
00:12:07,760 --> 00:12:11,569
so first we'll define<font color="#E5E5E5"> the memory regions</font>

281
00:12:09,620 --> 00:12:13,610
in the flash where it starts how long it

282
00:12:11,570 --> 00:12:15,080
<font color="#E5E5E5">is</font><font color="#CCCCCC"> they've</font><font color="#E5E5E5"> been safe saying that 64</font>

283
00:12:13,610 --> 00:12:17,870
kilobytes that's that's what which

284
00:12:15,080 --> 00:12:20,900
certainly get but usually 128<font color="#E5E5E5"> they tell</font>

285
00:12:17,870 --> 00:12:23,300
it that it's a read-only<font color="#E5E5E5"> executable</font>

286
00:12:20,900 --> 00:12:25,550
region and then<font color="#E5E5E5"> we tell that SRAM is</font>

287
00:12:23,300 --> 00:12:27,620
<font color="#E5E5E5">write read write and non-executive</font><font color="#CCCCCC"> where</font>

288
00:12:25,550 --> 00:12:29,660
it starts<font color="#CCCCCC"> and how long it is then we can</font>

289
00:12:27,620 --> 00:12:32,240
start<font color="#E5E5E5"> putting</font><font color="#CCCCCC"> in sections</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> this</font>

290
00:12:29,660 --> 00:12:33,620
special<font color="#E5E5E5"> section vectors that goes to</font>

291
00:12:32,240 --> 00:12:35,780
flash first because it has to<font color="#E5E5E5"> be at the</font>

292
00:12:33,620 --> 00:12:37,190
<font color="#E5E5E5">start then we put the code</font><font color="#CCCCCC"> next then we</font>

293
00:12:35,780 --> 00:12:41,089
<font color="#E5E5E5">put the read-only data which we don't</font>

294
00:12:37,190 --> 00:12:45,200
<font color="#E5E5E5">have</font><font color="#CCCCCC"> yet and then we have the</font><font color="#E5E5E5"> global</font>

295
00:12:41,090 --> 00:12:47,180
variables going<font color="#E5E5E5"> into SRAM so now we need</font>

296
00:12:45,200 --> 00:12:50,330
<font color="#E5E5E5">to be still need to tell the compiler to</font>

297
00:12:47,180 --> 00:12:51,920
put them to put our<font color="#CCCCCC"> vector stable into</font>

298
00:12:50,330 --> 00:12:53,840
the<font color="#CCCCCC"> vector</font><font color="#E5E5E5"> section and we use</font><font color="#CCCCCC"> that with</font>

299
00:12:51,920 --> 00:12:55,370
using<font color="#E5E5E5"> the GCC attributes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> material</font>

300
00:12:53,840 --> 00:12:57,290
like put it into<font color="#CCCCCC"> the vector</font><font color="#E5E5E5"> section so</font>

301
00:12:55,370 --> 00:13:01,460
it ends up at<font color="#E5E5E5"> the start of the flash</font>

302
00:12:57,290 --> 00:13:04,130
now<font color="#E5E5E5"> next</font><font color="#CCCCCC"> so arm uses memory mapped i/o</font>

303
00:13:01,460 --> 00:13:06,380
which means that you talk<font color="#CCCCCC"> to peripherals</font>

304
00:13:04,130 --> 00:13:07,880
by writing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> addresses using the same</font>

305
00:13:06,380 --> 00:13:11,689
instructions<font color="#E5E5E5"> that he would use for</font>

306
00:13:07,880 --> 00:13:13,850
<font color="#E5E5E5">accessing memory and this</font><font color="#CCCCCC"> is the area</font>

307
00:13:11,690 --> 00:13:16,310
where<font color="#CCCCCC"> all the STM peripherals leave this</font>

308
00:13:13,850 --> 00:13:17,090
little<font color="#E5E5E5"> piece in address space at this</font>

309
00:13:16,310 --> 00:13:19,849
address

310
00:13:17,090 --> 00:13:22,990
and here they are

311
00:13:19,850 --> 00:13:25,550
all of them there will be several

312
00:13:22,990 --> 00:13:27,560
instances<font color="#E5E5E5"> of the same of the same</font>

313
00:13:25,550 --> 00:13:29,019
peripheral type and there would be the

314
00:13:27,560 --> 00:13:32,959
<font color="#E5E5E5">same good they would have the same</font>

315
00:13:29,019 --> 00:13:34,250
register set and the same semantics and

316
00:13:32,959 --> 00:13:39,109
everything just<font color="#E5E5E5"> different based</font>

317
00:13:34,250 --> 00:13:40,639
<font color="#E5E5E5">addresses so this they don't</font><font color="#CCCCCC"> sell it say</font>

318
00:13:39,110 --> 00:13:42,440
it in anywhere<font color="#E5E5E5"> in manual that's that's</font>

319
00:13:40,639 --> 00:13:43,970
normal but<font color="#E5E5E5"> you actually have</font><font color="#CCCCCC"> to enable</font>

320
00:13:42,440 --> 00:13:46,130
<font color="#E5E5E5">your peripherals before you use them</font>

321
00:13:43,970 --> 00:13:48,589
<font color="#CCCCCC">which is not there's not the</font><font color="#E5E5E5"> same for</font>

322
00:13:46,130 --> 00:13:50,029
all microcontrollers and<font color="#E5E5E5"> CPUs like for</font>

323
00:13:48,589 --> 00:13:51,589
example<font color="#CCCCCC"> for a there are as far as I</font>

324
00:13:50,029 --> 00:13:53,750
could see you<font color="#E5E5E5"> don't have to enable much</font>

325
00:13:51,589 --> 00:13:57,199
to start using<font color="#E5E5E5"> peripheral we just can go</font>

326
00:13:53,750 --> 00:13:59,329
at it but<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> m33 5x and</font>

327
00:13:57,199 --> 00:14:01,279
<font color="#CCCCCC">BeagleBone black you</font><font color="#E5E5E5"> have to enable</font>

328
00:13:59,329 --> 00:14:02,599
power as well as<font color="#E5E5E5"> clock and for this</font>

329
00:14:01,279 --> 00:14:04,910
<font color="#E5E5E5">microcontroller you just have to enable</font>

330
00:14:02,600 --> 00:14:07,750
clock<font color="#E5E5E5"> so what you see</font><font color="#CCCCCC"> here is the clock</font>

331
00:14:04,910 --> 00:14:12,199
tree<font color="#CCCCCC"> don't be scared it's not too bad</font>

332
00:14:07,750 --> 00:14:15,410
<font color="#CCCCCC">and what it says in the in the manual is</font>

333
00:14:12,199 --> 00:14:18,290
<font color="#CCCCCC">that at reset the</font><font color="#E5E5E5"> microcontroller is</font>

334
00:14:15,410 --> 00:14:20,199
running from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> internal oscillator is</font>

335
00:14:18,290 --> 00:14:22,969
called a<font color="#CCCCCC"> high speed internal oscillator</font>

336
00:14:20,199 --> 00:14:24,410
which is basically an RC oscillator here

337
00:14:22,970 --> 00:14:26,689
it's running at eight megahertz<font color="#CCCCCC"> that's</font>

338
00:14:24,410 --> 00:14:28,370
how we are<font color="#E5E5E5"> able to start executing</font>

339
00:14:26,689 --> 00:14:32,120
anything<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we have the clock</font>

340
00:14:28,370 --> 00:14:35,600
configured so it doesn't say where where

341
00:14:32,120 --> 00:14:38,540
<font color="#CCCCCC">our GPIO seaport is</font><font color="#E5E5E5"> connected here on</font>

342
00:14:35,600 --> 00:14:40,100
this diagram<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can dig further</font><font color="#E5E5E5"> at</font>

343
00:14:38,540 --> 00:14:42,370
the system<font color="#CCCCCC"> architecture and we can see</font>

344
00:14:40,100 --> 00:14:46,130
<font color="#E5E5E5">that the GPIO</font><font color="#CCCCCC"> see is located here</font>

345
00:14:42,370 --> 00:14:48,589
<font color="#E5E5E5">connected via a</font><font color="#CCCCCC"> PB 2 bus we are</font><font color="#E5E5E5"> HB</font>

346
00:14:46,130 --> 00:14:50,360
system bus<font color="#E5E5E5"> so that's where it's probably</font>

347
00:14:48,589 --> 00:14:56,480
on the clock diagram<font color="#E5E5E5"> and if you look</font>

348
00:14:50,360 --> 00:14:59,300
here<font color="#E5E5E5"> still closer here</font><font color="#CCCCCC"> it says that it's</font>

349
00:14:56,480 --> 00:15:02,449
connected here<font color="#E5E5E5"> and we can try to trace</font>

350
00:14:59,300 --> 00:15:05,000
out the how the clock gets there so what

351
00:15:02,449 --> 00:15:08,209
we need to<font color="#E5E5E5"> do is</font><font color="#CCCCCC"> probably control a PD -</font>

352
00:15:05,000 --> 00:15:11,209
<font color="#E5E5E5">boss settings to enable the peripheral</font>

353
00:15:08,209 --> 00:15:13,189
and<font color="#E5E5E5"> we didn't actually need to know all</font>

354
00:15:11,209 --> 00:15:15,619
that<font color="#E5E5E5"> we can just look at the registers</font>

355
00:15:13,189 --> 00:15:17,540
for the certain clock control<font color="#E5E5E5"> peripheral</font>

356
00:15:15,620 --> 00:15:20,600
and see that there is<font color="#E5E5E5"> an edit register</font>

357
00:15:17,540 --> 00:15:24,069
at this address<font color="#E5E5E5"> and this bit and it</font>

358
00:15:20,600 --> 00:15:26,089
controls<font color="#CCCCCC"> how the</font><font color="#E5E5E5"> power</font><font color="#CCCCCC"> the clock 2.4 see</font>

359
00:15:24,069 --> 00:15:28,069
<font color="#E5E5E5">finally we</font><font color="#CCCCCC"> need to determine where the</font>

360
00:15:26,089 --> 00:15:31,639
peripheral<font color="#E5E5E5"> leaves and it's this address</font>

361
00:15:28,069 --> 00:15:32,949
here<font color="#E5E5E5"> now we can enable actually enable</font>

362
00:15:31,639 --> 00:15:35,439
our port

363
00:15:32,949 --> 00:15:37,299
we take<font color="#E5E5E5"> that the register the peripheral</font>

364
00:15:35,439 --> 00:15:40,089
address at the<font color="#CCCCCC"> register</font><font color="#E5E5E5"> address and then</font>

365
00:15:37,299 --> 00:15:41,559
we<font color="#E5E5E5"> write</font><font color="#CCCCCC"> the bit for</font><font color="#E5E5E5"> their our port is</font>

366
00:15:40,089 --> 00:15:45,249
enabled<font color="#CCCCCC"> now we start can start</font>

367
00:15:41,559 --> 00:15:47,049
configuring it<font color="#E5E5E5"> so I could</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> usually read</font>

368
00:15:45,249 --> 00:15:48,489
the whole peripheral<font color="#CCCCCC"> manual before</font><font color="#E5E5E5"> using</font>

369
00:15:47,049 --> 00:15:51,489
<font color="#E5E5E5">it but we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> ran through the register</font>

370
00:15:48,489 --> 00:15:53,769
<font color="#E5E5E5">so there are two configuration registers</font>

371
00:15:51,489 --> 00:15:55,449
because<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> sixteen sixteen pins</font>

372
00:15:53,769 --> 00:15:56,889
and they she requires<font color="#E5E5E5"> four pins for</font>

373
00:15:55,449 --> 00:15:59,339
<font color="#E5E5E5">configuration so this configuration</font>

374
00:15:56,889 --> 00:16:02,559
register<font color="#E5E5E5"> log</font><font color="#CCCCCC"> the figuration register</font><font color="#E5E5E5"> hi</font>

375
00:15:59,339 --> 00:16:04,720
<font color="#CCCCCC">then we have the input register to read</font>

376
00:16:02,559 --> 00:16:06,579
the<font color="#E5E5E5"> data from the port output data</font>

377
00:16:04,720 --> 00:16:08,529
register to output data to the<font color="#CCCCCC"> port and</font>

378
00:16:06,579 --> 00:16:10,988
then<font color="#CCCCCC"> we have the set reset register</font><font color="#E5E5E5"> to</font>

379
00:16:08,529 --> 00:16:13,749
atomically cetera set register the pins

380
00:16:10,989 --> 00:16:16,089
and<font color="#CCCCCC"> the set register</font><font color="#E5E5E5"> probably legacy</font>

381
00:16:13,749 --> 00:16:17,919
just for resetting<font color="#CCCCCC"> deans and finally</font>

382
00:16:16,089 --> 00:16:20,079
<font color="#CCCCCC">they the</font><font color="#E5E5E5"> lock register which allows us</font>

383
00:16:17,919 --> 00:16:22,600
to<font color="#CCCCCC"> log</font><font color="#E5E5E5"> configuration</font><font color="#CCCCCC"> tab for example to</font>

384
00:16:20,079 --> 00:16:26,108
avoid<font color="#CCCCCC"> damaging hardware if our program</font>

385
00:16:22,600 --> 00:16:27,459
goes haywire so there is also a table

386
00:16:26,109 --> 00:16:29,980
<font color="#CCCCCC">describing all</font><font color="#E5E5E5"> the possible</font>

387
00:16:27,459 --> 00:16:31,868
configurations<font color="#CCCCCC"> of the pins</font><font color="#E5E5E5"> but we just</font>

388
00:16:29,980 --> 00:16:35,339
<font color="#E5E5E5">need the general purpose output</font><font color="#CCCCCC"> opened</font>

389
00:16:31,869 --> 00:16:39,759
drain<font color="#CCCCCC"> we need to set these bits in this</font>

390
00:16:35,339 --> 00:16:41,980
in these fields in the register<font color="#E5E5E5"> for</font><font color="#CCCCCC"> two</font>

391
00:16:39,759 --> 00:16:45,009
megahertz and then we can use<font color="#CCCCCC"> all the</font>

392
00:16:41,980 --> 00:16:47,559
<font color="#CCCCCC">our register to control the output</font><font color="#E5E5E5"> so on</font>

393
00:16:45,009 --> 00:16:49,629
the on the<font color="#CCCCCC"> typical IO pin diagram will</font>

394
00:16:47,559 --> 00:16:51,189
<font color="#E5E5E5">be right</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> output data register</font>

395
00:16:49,629 --> 00:16:56,040
<font color="#E5E5E5">reading from it</font><font color="#CCCCCC"> because we're totaling</font>

396
00:16:51,189 --> 00:16:59,410
it will be controlling<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output by</font>

397
00:16:56,040 --> 00:17:01,929
turning on and off this and most here so

398
00:16:59,410 --> 00:17:05,260
and<font color="#E5E5E5"> most</font><font color="#CCCCCC"> transistors so when when we</font>

399
00:17:01,929 --> 00:17:07,689
<font color="#E5E5E5">have one will have high high impedance</font>

400
00:17:05,260 --> 00:17:09,129
on the pin like like<font color="#E5E5E5"> nothing is</font>

401
00:17:07,689 --> 00:17:11,889
connected that's what we need for<font color="#E5E5E5"> the</font>

402
00:17:09,130 --> 00:17:13,870
<font color="#CCCCCC">LED</font><font color="#E5E5E5"> to prevent any</font><font color="#CCCCCC"> damage to the pin</font><font color="#E5E5E5"> and</font>

403
00:17:11,888 --> 00:17:15,428
when it's<font color="#E5E5E5"> zero it connects it</font><font color="#CCCCCC"> to ground</font>

404
00:17:13,869 --> 00:17:19,658
<font color="#E5E5E5">allowing the current to flow and light</font>

405
00:17:15,429 --> 00:17:21,939
the<font color="#CCCCCC"> LED so this is the configuration</font>

406
00:17:19,659 --> 00:17:24,329
register<font color="#E5E5E5"> high because it's a pin number</font>

407
00:17:21,939 --> 00:17:27,699
<font color="#E5E5E5">13 so the hot it gets the</font><font color="#CCCCCC"> high register</font>

408
00:17:24,329 --> 00:17:31,029
<font color="#E5E5E5">this is its address and we need</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> two</font>

409
00:17:27,699 --> 00:17:36,370
fields number 13 mode and 13

410
00:17:31,029 --> 00:17:38,980
configuration and<font color="#E5E5E5"> we need the output</font>

411
00:17:36,370 --> 00:17:41,760
<font color="#E5E5E5">output mode</font><font color="#CCCCCC"> max speed to</font><font color="#E5E5E5"> megahertz as I</font>

412
00:17:38,980 --> 00:17:44,139
said before<font color="#E5E5E5"> and we need the</font>

413
00:17:41,760 --> 00:17:46,720
<font color="#E5E5E5">general-purpose output</font><font color="#CCCCCC"> open drain</font>

414
00:17:44,139 --> 00:17:49,120
configuration and finally the poor

415
00:17:46,720 --> 00:17:51,480
peripheral<font color="#CCCCCC"> addresses here in the memory</font>

416
00:17:49,120 --> 00:17:57,100
map<font color="#E5E5E5"> now we are able</font><font color="#CCCCCC"> to configure our</font>

417
00:17:51,480 --> 00:18:00,879
port<font color="#E5E5E5"> we write the register address and</font>

418
00:17:57,100 --> 00:18:02,289
this<font color="#CCCCCC"> is a bit of math here for</font><font color="#E5E5E5"> for you</font>

419
00:18:00,879 --> 00:18:03,039
didn't have to be like<font color="#CCCCCC"> that it's just</font>

420
00:18:02,289 --> 00:18:06,158
<font color="#E5E5E5">offensive</font>

421
00:18:03,039 --> 00:18:08,440
so finally we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> control the pin</font>

422
00:18:06,159 --> 00:18:13,210
this is our output<font color="#E5E5E5"> data</font><font color="#CCCCCC"> register</font><font color="#E5E5E5"> this</font>

423
00:18:08,440 --> 00:18:16,120
address<font color="#E5E5E5"> and we need the bit</font><font color="#CCCCCC"> 13 to</font>

424
00:18:13,210 --> 00:18:17,980
control it<font color="#E5E5E5"> and we can write it</font><font color="#CCCCCC"> down the</font>

425
00:18:16,120 --> 00:18:20,799
register address<font color="#CCCCCC"> and here we are</font>

426
00:18:17,980 --> 00:18:22,480
totaling<font color="#E5E5E5"> the bit what's left is just</font><font color="#CCCCCC"> the</font>

427
00:18:20,799 --> 00:18:27,220
<font color="#E5E5E5">weight and we can shortcut here and just</font>

428
00:18:22,480 --> 00:18:29,620
just<font color="#E5E5E5"> do the weight like this so then we</font>

429
00:18:27,220 --> 00:18:32,529
<font color="#E5E5E5">need to build it</font><font color="#CCCCCC"> so you need the bare</font>

430
00:18:29,620 --> 00:18:35,350
metal<font color="#E5E5E5"> to arm to chain this is</font><font color="#CCCCCC"> available</font>

431
00:18:32,529 --> 00:18:38,139
for<font color="#E5E5E5"> example in Debian install it and</font>

432
00:18:35,350 --> 00:18:41,500
then we can<font color="#E5E5E5"> ask the compiler to</font><font color="#CCCCCC"> use the</font>

433
00:18:38,139 --> 00:18:44,229
cortex m3<font color="#CCCCCC"> CP to build</font><font color="#E5E5E5"> for cortex m3 CPU</font>

434
00:18:41,500 --> 00:18:46,659
just compile don't<font color="#E5E5E5"> link because it</font><font color="#CCCCCC"> will</font>

435
00:18:44,230 --> 00:18:49,149
<font color="#CCCCCC">just use its linker linker script</font>

436
00:18:46,659 --> 00:18:52,570
instead<font color="#CCCCCC"> and then we tell the linker used</font>

437
00:18:49,149 --> 00:18:55,570
this<font color="#E5E5E5"> our linker script and output an elf</font>

438
00:18:52,570 --> 00:18:57,700
file and then while is through here we

439
00:18:55,570 --> 00:18:59,799
can take a look at our elf file and see

440
00:18:57,700 --> 00:19:03,730
where everything<font color="#E5E5E5"> went so our vector</font>

441
00:18:59,799 --> 00:19:06,179
stable went right to the start of<font color="#E5E5E5"> the</font>

442
00:19:03,730 --> 00:19:10,600
<font color="#CCCCCC">flash over there and it's 8 bytes long</font>

443
00:19:06,179 --> 00:19:13,929
our reset routine went right after<font color="#E5E5E5"> that</font>

444
00:19:10,600 --> 00:19:17,860
in flash<font color="#E5E5E5"> and our stack is allocated to</font>

445
00:19:13,929 --> 00:19:20,889
be in them<font color="#E5E5E5"> and at</font><font color="#CCCCCC"> the start</font><font color="#E5E5E5"> of SRAM so</font>

446
00:19:17,860 --> 00:19:24,070
now we can<font color="#E5E5E5"> convert that elf file to a</font>

447
00:19:20,889 --> 00:19:26,529
binary like pure binary<font color="#E5E5E5"> basically what</font>

448
00:19:24,070 --> 00:19:28,809
we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to be flashing we can take</font>

449
00:19:26,529 --> 00:19:33,159
a look<font color="#E5E5E5"> at it again and see</font><font color="#CCCCCC"> that the</font>

450
00:19:28,809 --> 00:19:36,158
first entry<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the end of</font><font color="#E5E5E5"> our stack and</font>

451
00:19:33,159 --> 00:19:38,470
the second entry is our reset handler

452
00:19:36,159 --> 00:19:41,259
and<font color="#E5E5E5"> that has a bit</font><font color="#CCCCCC"> one set</font><font color="#E5E5E5"> to indicate</font>

453
00:19:38,470 --> 00:19:44,409
<font color="#CCCCCC">that it's a</font><font color="#E5E5E5"> thumb mode which is the only</font>

454
00:19:41,259 --> 00:19:47,500
mode<font color="#CCCCCC"> available for this</font><font color="#E5E5E5"> CPU and</font><font color="#CCCCCC"> finally</font>

455
00:19:44,409 --> 00:19:49,240
the rest is our our set handler so to

456
00:19:47,500 --> 00:19:51,340
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> it we use the</font><font color="#CCCCCC"> same set it to flash</font>

457
00:19:49,240 --> 00:19:53,980
which<font color="#CCCCCC"> rabbit flash that</font><font color="#E5E5E5"> binary file and</font>

458
00:19:51,340 --> 00:19:57,639
verify whatever<font color="#CCCCCC"> you right there's our</font>

459
00:19:53,980 --> 00:19:59,200
board on USB<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> it takes very little</font>

460
00:19:57,639 --> 00:20:00,310
while<font color="#E5E5E5"> because it's very short</font><font color="#CCCCCC"> and now</font>

461
00:19:59,200 --> 00:20:04,780
we're able<font color="#E5E5E5"> to run it but</font>

462
00:20:00,310 --> 00:20:08,020
we need to switch the<font color="#E5E5E5"> boot pins back to</font>

463
00:20:04,780 --> 00:20:10,990
have the flash<font color="#CCCCCC"> mapped at the boot up so</font>

464
00:20:08,020 --> 00:20:13,960
that our our<font color="#E5E5E5"> program can be there at the</font>

465
00:20:10,990 --> 00:20:16,420
<font color="#E5E5E5">zero and our vector table so we just put</font>

466
00:20:13,960 --> 00:20:22,800
it back<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the default position</font><font color="#E5E5E5"> and</font>

467
00:20:16,420 --> 00:20:22,800
that's how it would<font color="#E5E5E5"> look</font><font color="#CCCCCC"> exciting</font>

468
00:20:29,620 --> 00:20:36,129
not another<font color="#E5E5E5"> take</font><font color="#CCCCCC"> away another take away</font>

469
00:20:32,980 --> 00:20:37,450
is that<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> worked</font>

470
00:20:36,130 --> 00:20:38,920
hard on<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and they had</font><font color="#E5E5E5"> lots of</font>

471
00:20:37,450 --> 00:20:41,260
customers before<font color="#E5E5E5"> you and</font><font color="#CCCCCC"> also for</font>

472
00:20:38,920 --> 00:20:43,450
<font color="#E5E5E5">engineers before</font><font color="#CCCCCC"> you and they tailored</font>

473
00:20:41,260 --> 00:20:45,220
it<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> to your default use</font>

474
00:20:43,450 --> 00:20:47,370
<font color="#E5E5E5">case is exactly what you want to try to</font>

475
00:20:45,220 --> 00:20:50,260
do when you just start<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> hardware so</font>

476
00:20:47,370 --> 00:20:52,270
and in<font color="#E5E5E5"> the end you will need to tweak</font>

477
00:20:50,260 --> 00:20:53,830
<font color="#E5E5E5">just a little a few bits to start</font>

478
00:20:52,270 --> 00:20:57,150
working to start your peripheral going

479
00:20:53,830 --> 00:20:59,800
so it is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> you very</font><font color="#CCCCCC"> far</font>

480
00:20:57,150 --> 00:21:02,950
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so obviously you don't</font><font color="#CCCCCC"> want to</font>

481
00:20:59,800 --> 00:21:04,810
<font color="#CCCCCC">always copy those register addresses and</font>

482
00:21:02,950 --> 00:21:06,840
all the layouts<font color="#CCCCCC"> all the time in your</font>

483
00:21:04,810 --> 00:21:09,760
program so<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> write the library and</font>

484
00:21:06,840 --> 00:21:11,409
different people<font color="#E5E5E5"> do it differently some</font>

485
00:21:09,760 --> 00:21:13,379
people do it very in a<font color="#CCCCCC"> very weird</font><font color="#E5E5E5"> way</font>

486
00:21:11,410 --> 00:21:16,420
<font color="#E5E5E5">especially hardware engineers I'm sorry</font>

487
00:21:13,380 --> 00:21:19,210
but it's up<font color="#CCCCCC"> to them and somebody will</font>

488
00:21:16,420 --> 00:21:21,460
see my way<font color="#E5E5E5"> as very weird one</font><font color="#CCCCCC"> so I just</font>

489
00:21:19,210 --> 00:21:23,620
take put<font color="#E5E5E5"> the register location</font><font color="#CCCCCC"> into</font>

490
00:21:21,460 --> 00:21:25,810
structure and store the peripheral

491
00:21:23,620 --> 00:21:29,290
addresses and<font color="#E5E5E5"> then I describe all the</font>

492
00:21:25,810 --> 00:21:30,730
bits all the bit locations in<font color="#CCCCCC"> there work</font>

493
00:21:29,290 --> 00:21:33,520
and using<font color="#CCCCCC"> management</font><font color="#E5E5E5"> that's probably the</font>

494
00:21:30,730 --> 00:21:35,830
<font color="#E5E5E5">most boring part of making things work</font>

495
00:21:33,520 --> 00:21:37,780
from<font color="#CCCCCC"> scratch very you have to copy this</font>

496
00:21:35,830 --> 00:21:40,330
cryptic register names from the manuals

497
00:21:37,780 --> 00:21:42,160
and everything and it reminds me of<font color="#E5E5E5"> how</font>

498
00:21:40,330 --> 00:21:48,070
I used<font color="#CCCCCC"> to type in programs from</font><font color="#E5E5E5"> the</font>

499
00:21:42,160 --> 00:21:50,080
<font color="#E5E5E5">magazines in there deposit so next the</font>

500
00:21:48,070 --> 00:21:51,879
default clock is<font color="#E5E5E5"> 8 megahertz and the</font>

501
00:21:50,080 --> 00:21:53,679
<font color="#E5E5E5">maximum is 72 megahertz if you want to</font>

502
00:21:51,880 --> 00:21:55,450
do<font color="#E5E5E5"> something fast you got to change that</font>

503
00:21:53,680 --> 00:21:58,720
we are<font color="#CCCCCC"> not going to explain how to do</font>

504
00:21:55,450 --> 00:22:00,280
that but here is<font color="#CCCCCC"> approximately how it</font>

505
00:21:58,720 --> 00:22:02,170
would<font color="#CCCCCC"> look you</font><font color="#E5E5E5"> go through the external</font>

506
00:22:00,280 --> 00:22:03,639
oscillator<font color="#CCCCCC"> and it's stable</font><font color="#E5E5E5"> more stable</font>

507
00:22:02,170 --> 00:22:06,430
than<font color="#E5E5E5"> their siesta later you go through</font>

508
00:22:03,640 --> 00:22:09,280
the PLL and tell it to multiply by by 9

509
00:22:06,430 --> 00:22:11,110
to get 72 megahertz and switch to<font color="#E5E5E5"> PLL</font>

510
00:22:09,280 --> 00:22:13,600
when it's ready<font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> have your</font>

511
00:22:11,110 --> 00:22:16,299
72 megahertz clock

512
00:22:13,600 --> 00:22:19,209
there are a<font color="#E5E5E5"> couple</font><font color="#CCCCCC"> coaches like</font><font color="#E5E5E5"> this one</font>

513
00:22:16,299 --> 00:22:21,250
so if<font color="#E5E5E5"> you go very fast with your</font><font color="#CCCCCC"> cloak</font>

514
00:22:19,210 --> 00:22:22,570
<font color="#E5E5E5">the flesh won't be able to keep up and</font>

515
00:22:21,250 --> 00:22:24,370
<font color="#E5E5E5">then you have</font><font color="#CCCCCC"> to configure flesh that</font>

516
00:22:22,570 --> 00:22:26,500
tells the<font color="#E5E5E5"> CPU to wait while</font><font color="#CCCCCC"> it fetches</font>

517
00:22:24,370 --> 00:22:28,479
the data<font color="#CCCCCC"> otherwise the CPU won't be able</font>

518
00:22:26,500 --> 00:22:31,210
<font color="#E5E5E5">to read your code and won't be able</font><font color="#CCCCCC"> to</font>

519
00:22:28,480 --> 00:22:33,340
execute<font color="#E5E5E5"> anything which has actually</font>

520
00:22:31,210 --> 00:22:36,010
<font color="#CCCCCC">happened to me I was scratching my head</font>

521
00:22:33,340 --> 00:22:38,949
and this<font color="#E5E5E5"> was one little thing</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> able</font>

522
00:22:36,010 --> 00:22:41,260
to find eventually so and then for

523
00:22:38,950 --> 00:22:42,940
<font color="#CCCCCC">example</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> app1 boss it has the maximum</font>

524
00:22:41,260 --> 00:22:45,129
speed<font color="#CCCCCC"> of thirty six megahertz you have</font>

525
00:22:42,940 --> 00:22:48,370
to set up dividers<font color="#CCCCCC"> to lower the clock</font>

526
00:22:45,130 --> 00:22:50,409
speed for<font color="#E5E5E5"> that boss</font><font color="#CCCCCC"> this is the this is</font>

527
00:22:48,370 --> 00:22:52,299
<font color="#E5E5E5">all the code that it takes to get to</font>

528
00:22:50,409 --> 00:22:54,610
<font color="#CCCCCC">seventy two megahertz from my library</font>

529
00:22:52,299 --> 00:22:56,710
<font color="#E5E5E5">I'm not going to talk about</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not</font>

530
00:22:54,610 --> 00:23:00,149
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> want more peripherals</font>

531
00:22:56,710 --> 00:23:02,320
<font color="#E5E5E5">remember the documentation specifies</font>

532
00:23:00,150 --> 00:23:04,419
<font color="#E5E5E5">lots of steps that</font><font color="#CCCCCC"> you need to take</font>

533
00:23:02,320 --> 00:23:06,370
exactly the<font color="#E5E5E5"> registers you need to modify</font>

534
00:23:04,419 --> 00:23:09,700
<font color="#E5E5E5">to get the specific application like</font>

535
00:23:06,370 --> 00:23:11,739
<font color="#E5E5E5">communicating with</font><font color="#CCCCCC"> me I</font><font color="#E5E5E5"> use art with DMA</font>

536
00:23:09,700 --> 00:23:14,590
<font color="#E5E5E5">or things like that and each peripheral</font>

537
00:23:11,740 --> 00:23:17,140
has descriptions how to how<font color="#E5E5E5"> to do this</font>

538
00:23:14,590 --> 00:23:18,850
application<font color="#CCCCCC"> up</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that application and</font>

539
00:23:17,140 --> 00:23:20,409
they usually go to great lengths and

540
00:23:18,850 --> 00:23:22,689
more<font color="#E5E5E5"> complex case then you need</font>

541
00:23:20,409 --> 00:23:26,080
initially and which means like this

542
00:23:22,690 --> 00:23:28,030
this has<font color="#CCCCCC"> transmitter</font><font color="#E5E5E5"> procedure than</font>

543
00:23:26,080 --> 00:23:29,799
<font color="#E5E5E5">received procedure</font><font color="#CCCCCC"> but it boils down to</font>

544
00:23:28,030 --> 00:23:32,080
this if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to just receive a bit</font>

545
00:23:29,799 --> 00:23:33,730
<font color="#E5E5E5">receive a byte and</font><font color="#CCCCCC"> send a</font><font color="#E5E5E5"> byte and this</font>

546
00:23:32,080 --> 00:23:35,470
is all configuration like from enabling

547
00:23:33,730 --> 00:23:38,020
the clock<font color="#E5E5E5"> and everything so do you need</font>

548
00:23:35,470 --> 00:23:39,700
I didn't test it but there is<font color="#CCCCCC"> a this</font>

549
00:23:38,020 --> 00:23:41,049
yellow<font color="#CCCCCC"> lines</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> little links you</font>

550
00:23:39,700 --> 00:23:44,440
<font color="#E5E5E5">can</font><font color="#CCCCCC"> go and</font><font color="#E5E5E5"> take a look at the code and</font>

551
00:23:41,049 --> 00:23:46,539
<font color="#CCCCCC">trade yourself similarly with the timers</font>

552
00:23:44,440 --> 00:23:48,390
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the PWM for example very popular</font>

553
00:23:46,539 --> 00:23:50,860
application

554
00:23:48,390 --> 00:23:52,510
it describes<font color="#CCCCCC"> everything that you need</font><font color="#E5E5E5"> to</font>

555
00:23:50,860 --> 00:23:55,389
do all the registers and<font color="#E5E5E5"> everything and</font>

556
00:23:52,510 --> 00:24:01,360
then<font color="#E5E5E5"> this is all it takes to</font><font color="#CCCCCC"> blink an</font>

557
00:23:55,390 --> 00:24:04,240
LED<font color="#E5E5E5"> on the pin using PWM and</font><font color="#CCCCCC"> ATC</font><font color="#E5E5E5"> very</font>

558
00:24:01,360 --> 00:24:05,889
simple<font color="#E5E5E5"> again single conversion mode and</font>

559
00:24:04,240 --> 00:24:07,600
the continuous<font color="#CCCCCC"> conversion is also not</font>

560
00:24:05,890 --> 00:24:09,850
<font color="#CCCCCC">that hard</font><font color="#E5E5E5"> so that's all the code</font>

561
00:24:07,600 --> 00:24:12,219
including calibration<font color="#E5E5E5"> and enable and</font>

562
00:24:09,850 --> 00:24:14,320
everything<font color="#E5E5E5"> and receiving a value from</font><font color="#CCCCCC"> a</font>

563
00:24:12,220 --> 00:24:16,809
<font color="#CCCCCC">DC SPI</font>

564
00:24:14,320 --> 00:24:18,908
same thing<font color="#CCCCCC"> very</font><font color="#E5E5E5"> well very</font><font color="#CCCCCC"> well described</font>

565
00:24:16,809 --> 00:24:21,070
transmission reception<font color="#E5E5E5"> and that's all</font>

566
00:24:18,909 --> 00:24:23,649
the code<font color="#E5E5E5"> configures are a bit of</font><font color="#CCCCCC"> a lot</font>

567
00:24:21,070 --> 00:24:24,809
<font color="#E5E5E5">of bits there but you just copied that</font>

568
00:24:23,649 --> 00:24:29,309
<font color="#E5E5E5">from the menu</font>

569
00:24:24,809 --> 00:24:34,440
and finally go<font color="#CCCCCC"> an experiment okay any</font>

570
00:24:29,309 --> 00:24:35,850
questions<font color="#E5E5E5"> yeah so what kind of tools or</font>

571
00:24:34,440 --> 00:24:40,259
techniques that you use in<font color="#E5E5E5"> order to</font>

572
00:24:35,850 --> 00:24:43,289
debug<font color="#CCCCCC"> your programs well you can you can</font>

573
00:24:40,259 --> 00:24:50,279
always to toggle pin or light an LED

574
00:24:43,289 --> 00:24:54,990
that's that's what I do I just<font color="#E5E5E5"> put if</font>

575
00:24:50,279 --> 00:24:56,730
you have to<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of them and then</font><font color="#CCCCCC"> rewire</font>

576
00:24:54,990 --> 00:25:00,299
<font color="#E5E5E5">the butter and you have like a fool he</font>

577
00:24:56,730 --> 00:25:01,980
be using<font color="#CCCCCC"> that thing yeah yeah this B is</font>

578
00:25:00,299 --> 00:25:04,499
<font color="#E5E5E5">zero Y debug of course you can use but</font>

579
00:25:01,980 --> 00:25:06,090
idea I<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> bother</font><font color="#E5E5E5"> I just light on LED</font>

580
00:25:04,499 --> 00:25:06,869
because<font color="#E5E5E5"> my programs are</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> that</font>

581
00:25:06,090 --> 00:25:09,658
<font color="#E5E5E5">complicated</font>

582
00:25:06,869 --> 00:25:11,279
<font color="#CCCCCC">or I use</font><font color="#E5E5E5"> the toggle opinon wash with the</font>

583
00:25:09,659 --> 00:25:20,190
scope<font color="#E5E5E5"> and see</font><font color="#CCCCCC"> like what's the timing and</font>

584
00:25:11,279 --> 00:25:22,259
things<font color="#E5E5E5"> like that okay yes I think so</font>

585
00:25:20,190 --> 00:25:23,940
<font color="#CCCCCC">yeah I think I think you can read the it</font>

586
00:25:22,259 --> 00:25:27,990
<font color="#CCCCCC">that comes by default</font><font color="#E5E5E5"> with something</font>

587
00:25:23,940 --> 00:25:34,700
that blinks so you can read that if you

588
00:25:27,990 --> 00:25:34,700
want anybody yes

589
00:25:41,840 --> 00:25:51,809
yeah there's very simple<font color="#E5E5E5"> reason I</font><font color="#CCCCCC"> don't</font>

590
00:25:45,299 --> 00:25:53,879
<font color="#E5E5E5">like suppose possible</font><font color="#CCCCCC"> I know it's very</font>

591
00:25:51,809 --> 00:25:55,350
useful but it's<font color="#CCCCCC"> just my personal</font>

592
00:25:53,879 --> 00:25:56,998
preference maybe I'll come<font color="#E5E5E5"> around</font>

593
00:25:55,350 --> 00:25:58,649
I started<font color="#E5E5E5"> this suppose</font><font color="#CCCCCC"> boss</font><font color="#E5E5E5"> I was using</font>

594
00:25:56,999 --> 00:26:14,850
<font color="#E5E5E5">brand beyond</font><font color="#CCCCCC"> styles</font><font color="#E5E5E5"> job for the night</font>

595
00:25:58,649 --> 00:26:17,299
you<font color="#E5E5E5"> know like so anybody else okay thank</font>

596
00:26:14,850 --> 00:26:17,299
<font color="#E5E5E5">you</font><font color="#CCCCCC"> very much</font>

597
00:26:22,740 --> 00:26:25,849
[Applause]

