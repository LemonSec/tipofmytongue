1
00:00:04,990 --> 00:00:10,480
<font color="#E5E5E5">all right so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> prepared too much</font>

2
00:00:07,790 --> 00:00:13,879
<font color="#CCCCCC">material so I'm going to talk too fast</font>

3
00:00:10,480 --> 00:00:16,759
<font color="#CCCCCC">so the topic of</font><font color="#E5E5E5"> this this talk is Java</font>

4
00:00:13,880 --> 00:00:19,369
futures 2019<font color="#E5E5E5"> edition thank you for</font>

5
00:00:16,759 --> 00:00:21,350
<font color="#CCCCCC">catching the</font><font color="#E5E5E5"> typo</font><font color="#CCCCCC"> rummy and this is</font>

6
00:00:19,369 --> 00:00:24,320
about<font color="#E5E5E5"> where's</font><font color="#CCCCCC"> the Java</font><font color="#E5E5E5"> language going in</font>

7
00:00:21,350 --> 00:00:26,090
the next<font color="#E5E5E5"> few years</font><font color="#CCCCCC"> so I'm going</font><font color="#E5E5E5"> to be</font>

8
00:00:24,320 --> 00:00:27,500
talking<font color="#CCCCCC"> about some things that are about</font>

9
00:00:26,090 --> 00:00:29,720
<font color="#E5E5E5">to</font><font color="#CCCCCC"> release and</font><font color="#E5E5E5"> some things</font><font color="#CCCCCC"> that are</font>

10
00:00:27,500 --> 00:00:32,299
coming<font color="#E5E5E5"> a little bit farther down the</font>

11
00:00:29,720 --> 00:00:34,150
road<font color="#CCCCCC"> I work</font><font color="#E5E5E5"> for Oracle everything I say</font>

12
00:00:32,299 --> 00:00:37,879
is a<font color="#CCCCCC"> lie</font>

13
00:00:34,150 --> 00:00:40,940
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so why do we bother evolving the</font>

14
00:00:37,879 --> 00:00:43,549
<font color="#E5E5E5">Java language at all Java</font><font color="#CCCCCC"> is has been</font>

15
00:00:40,940 --> 00:00:45,080
around for<font color="#E5E5E5"> more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 20 years</font><font color="#CCCCCC"> and as</font>

16
00:00:43,549 --> 00:00:47,809
<font color="#E5E5E5">Mark</font><font color="#CCCCCC"> said earlier it's</font><font color="#E5E5E5"> been declared</font>

17
00:00:45,080 --> 00:00:50,000
<font color="#E5E5E5">dead over and over and</font><font color="#CCCCCC"> over again and a</font>

18
00:00:47,809 --> 00:00:52,760
lot of people are kind<font color="#E5E5E5"> of rooting for</font>

19
00:00:50,000 --> 00:00:55,100
Java to be dead and we plan to confound

20
00:00:52,760 --> 00:00:57,589
these expectations<font color="#CCCCCC"> as we have done</font><font color="#E5E5E5"> in</font>

21
00:00:55,100 --> 00:01:01,309
the past and the way<font color="#E5E5E5"> we plan to do</font><font color="#CCCCCC"> that</font>

22
00:00:57,589 --> 00:01:03,470
is is really<font color="#E5E5E5"> very straightforward stay</font>

23
00:01:01,309 --> 00:01:06,200
relevant<font color="#E5E5E5"> stay relevant to the problems</font>

24
00:01:03,470 --> 00:01:07,820
people<font color="#E5E5E5"> want to solve stay</font><font color="#CCCCCC"> prot relevant</font>

25
00:01:06,200 --> 00:01:10,790
to the hardware people<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> run on</font>

26
00:01:07,820 --> 00:01:12,289
and keep the<font color="#E5E5E5"> promises we</font><font color="#CCCCCC"> made we've made</font>

27
00:01:10,790 --> 00:01:14,810
to our users

28
00:01:12,290 --> 00:01:18,140
so there's no big secret to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's</font>

29
00:01:14,810 --> 00:01:19,760
it's just to make<font color="#CCCCCC"> sure people</font><font color="#E5E5E5"> want to</font>

30
00:01:18,140 --> 00:01:23,780
keep<font color="#E5E5E5"> using javac sits the best way to</font>

31
00:01:19,760 --> 00:01:25,400
solve<font color="#E5E5E5"> their problem so as you heard</font>

32
00:01:23,780 --> 00:01:28,160
we've switched to a<font color="#E5E5E5"> more rapid release</font>

33
00:01:25,400 --> 00:01:29,900
cadence and that affects<font color="#E5E5E5"> the way we</font>

34
00:01:28,160 --> 00:01:32,360
evolve the<font color="#E5E5E5"> language in some ways that</font>

35
00:01:29,900 --> 00:01:34,250
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of surprised us so we obviously</font>

36
00:01:32,360 --> 00:01:36,500
have more opportunities to<font color="#E5E5E5"> deliver</font>

37
00:01:34,250 --> 00:01:38,060
functionality<font color="#CCCCCC"> and that's great</font>

38
00:01:36,500 --> 00:01:40,210
but it's<font color="#E5E5E5"> also changed the kind of</font>

39
00:01:38,060 --> 00:01:43,340
features that<font color="#CCCCCC"> we've been</font><font color="#E5E5E5"> working</font><font color="#CCCCCC"> on</font>

40
00:01:40,210 --> 00:01:45,530
<font color="#CCCCCC">it'll it's given us permission to work</font>

41
00:01:43,340 --> 00:01:49,670
on some smaller features when you<font color="#E5E5E5"> had a</font>

42
00:01:45,530 --> 00:01:51,710
<font color="#E5E5E5">three or four</font><font color="#CCCCCC"> year release cycle you</font>

43
00:01:49,670 --> 00:01:54,110
tended to focus<font color="#CCCCCC"> all of your energy</font><font color="#E5E5E5"> on</font>

44
00:01:51,710 --> 00:01:56,539
the big stuff lambdas generics modules

45
00:01:54,110 --> 00:01:59,060
<font color="#E5E5E5">and the little stuff just got crowded</font>

46
00:01:56,540 --> 00:02:01,400
<font color="#E5E5E5">out and there are a lot of good little</font>

47
00:01:59,060 --> 00:02:03,560
features that<font color="#CCCCCC"> are worth doing but</font>

48
00:02:01,400 --> 00:02:05,840
<font color="#CCCCCC">somehow always</font><font color="#E5E5E5"> took second place behind</font>

49
00:02:03,560 --> 00:02:08,598
the<font color="#E5E5E5"> bigger stuff and so we found that</font>

50
00:02:05,840 --> 00:02:11,599
<font color="#E5E5E5">the more that the six-month cadence has</font>

51
00:02:08,598 --> 00:02:14,269
allowed us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> balance out working</font><font color="#E5E5E5"> on</font>

52
00:02:11,599 --> 00:02:17,569
smaller features and bigger features<font color="#E5E5E5"> I</font>

53
00:02:14,270 --> 00:02:19,549
think<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> better way it's also incurred</font>

54
00:02:17,569 --> 00:02:21,409
to us<font color="#E5E5E5"> to learn</font><font color="#CCCCCC"> how to and we're still</font><font color="#E5E5E5"> in</font>

55
00:02:19,549 --> 00:02:23,540
the process<font color="#E5E5E5"> of learning break up bigger</font>

56
00:02:21,409 --> 00:02:25,548
<font color="#CCCCCC">features into smaller features and do</font>

57
00:02:23,540 --> 00:02:27,650
things<font color="#E5E5E5"> like lay the groundwork</font><font color="#CCCCCC"> for</font>

58
00:02:25,549 --> 00:02:30,469
future features in a current release

59
00:02:27,650 --> 00:02:33,230
like issuing warnings on something that

60
00:02:30,469 --> 00:02:35,420
we think may change in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> so</font>

61
00:02:33,230 --> 00:02:39,108
that it's less disruptive<font color="#E5E5E5"> when that when</font>

62
00:02:35,420 --> 00:02:41,089
the<font color="#E5E5E5"> change gets there that said with</font>

63
00:02:39,109 --> 00:02:42,439
more opportunities to<font color="#E5E5E5"> release you</font><font color="#CCCCCC"> have</font>

64
00:02:41,090 --> 00:02:44,299
more opportunities to release something

65
00:02:42,439 --> 00:02:46,489
<font color="#E5E5E5">too early that you're then stuck with</font>

66
00:02:44,299 --> 00:02:49,099
for the<font color="#CCCCCC"> rest of</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> and so there's also</font>

67
00:02:46,489 --> 00:02:51,530
a risk<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the new release cadence</font>

68
00:02:49,099 --> 00:02:54,518
gives us and so one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the ways that</font><font color="#CCCCCC"> we</font>

69
00:02:51,530 --> 00:02:57,049
<font color="#E5E5E5">want to mitigate that</font><font color="#CCCCCC"> risk</font><font color="#E5E5E5"> is to</font>

70
00:02:54,519 --> 00:02:58,819
lengthen<font color="#E5E5E5"> the pipeline</font><font color="#CCCCCC"> out a little</font><font color="#E5E5E5"> bit</font>

71
00:02:57,049 --> 00:03:00,469
we've shortened<font color="#E5E5E5"> the pipeline a lot we're</font>

72
00:02:58,819 --> 00:03:02,719
sort of<font color="#CCCCCC"> back</font><font color="#E5E5E5"> backing off a little bit</font>

73
00:03:00,469 --> 00:03:03,829
<font color="#E5E5E5">and having each language feature go</font>

74
00:03:02,719 --> 00:03:05,750
through a round of what we're calling

75
00:03:03,829 --> 00:03:07,909
preview features<font color="#E5E5E5"> so this is a feature</font>

76
00:03:05,750 --> 00:03:12,199
that<font color="#CCCCCC"> is fully complete specified</font>

77
00:03:07,909 --> 00:03:14,899
implemented but the paint's not<font color="#E5E5E5"> quite</font>

78
00:03:12,199 --> 00:03:17,659
<font color="#E5E5E5">dry and we want to give ourselves one</font>

79
00:03:14,900 --> 00:03:21,889
<font color="#E5E5E5">cycle maybe two cycles in some cases to</font>

80
00:03:17,659 --> 00:03:23,810
gather feedback from<font color="#E5E5E5"> real users</font><font color="#CCCCCC"> to spot</font>

81
00:03:21,889 --> 00:03:26,030
<font color="#E5E5E5">things that maybe we missed in our</font>

82
00:03:23,810 --> 00:03:28,849
analysis<font color="#E5E5E5"> and our initial feedback</font><font color="#CCCCCC"> while</font>

83
00:03:26,030 --> 00:03:32,239
we have a<font color="#E5E5E5"> chance to make small</font><font color="#CCCCCC"> changes</font>

84
00:03:28,849 --> 00:03:34,429
<font color="#CCCCCC">and so we're</font><font color="#E5E5E5"> calling these preview</font>

85
00:03:32,239 --> 00:03:36,259
features they're not really<font color="#E5E5E5"> just data</font>

86
00:03:34,430 --> 00:03:38,150
<font color="#E5E5E5">features I mean they're really the bar</font>

87
00:03:36,259 --> 00:03:40,790
for a preview feature is very very high

88
00:03:38,150 --> 00:03:44,720
it<font color="#E5E5E5"> has to be complete it has to be fully</font>

89
00:03:40,790 --> 00:03:46,250
specified and you know you have to<font color="#E5E5E5"> have</font>

90
00:03:44,720 --> 00:03:52,370
a high<font color="#CCCCCC"> degree of confidence</font><font color="#E5E5E5"> that it</font>

91
00:03:46,250 --> 00:03:54,099
really is ready<font color="#CCCCCC"> so in in</font><font color="#E5E5E5"> 12 we actually</font>

92
00:03:52,370 --> 00:03:56,810
a<font color="#E5E5E5"> shift our first preview feature</font>

93
00:03:54,099 --> 00:03:58,488
<font color="#CCCCCC">there's a lot of projects that are going</font>

94
00:03:56,810 --> 00:04:00,919
<font color="#E5E5E5">on the pipeline</font><font color="#CCCCCC"> Marc talked about some</font>

95
00:03:58,489 --> 00:04:03,949
of<font color="#CCCCCC"> these earlier</font><font color="#E5E5E5"> there's others that</font>

96
00:04:00,919 --> 00:04:05,840
<font color="#CCCCCC">aren't either</font><font color="#E5E5E5"> on the slide</font><font color="#CCCCCC"> I can't talk</font>

97
00:04:03,949 --> 00:04:07,939
<font color="#CCCCCC">about everything that's going on but but</font>

98
00:04:05,840 --> 00:04:10,549
<font color="#E5E5E5">one of the things that the more rapid</font>

99
00:04:07,939 --> 00:04:12,409
cadence has done for us is<font color="#E5E5E5"> our pipeline</font>

100
00:04:10,549 --> 00:04:14,659
is better than it's ever been<font color="#CCCCCC"> when we</font>

101
00:04:12,409 --> 00:04:17,048
were<font color="#CCCCCC"> doing multi-year big bang releases</font>

102
00:04:14,659 --> 00:04:20,570
when we got to the end of<font color="#E5E5E5"> a Java</font><font color="#CCCCCC"> eight</font>

103
00:04:17,048 --> 00:04:23,539
we had kind of spent what we what we<font color="#E5E5E5"> had</font>

104
00:04:20,570 --> 00:04:25,280
been<font color="#E5E5E5"> working on and then it was a slow</font>

105
00:04:23,539 --> 00:04:27,260
<font color="#E5E5E5">startup process to figure out what we're</font>

106
00:04:25,280 --> 00:04:30,469
<font color="#E5E5E5">going to do next with the more rapid</font>

107
00:04:27,260 --> 00:04:30,950
cadence we're able<font color="#E5E5E5"> to balance between</font>

108
00:04:30,469 --> 00:04:33,290
<font color="#E5E5E5">sure</font>

109
00:04:30,950 --> 00:04:36,250
term and<font color="#CCCCCC"> long-term work and as a result</font>

110
00:04:33,290 --> 00:04:40,670
the pipeline is really fantastic

111
00:04:36,250 --> 00:04:42,170
so<font color="#E5E5E5"> project amber is the the sort of</font>

112
00:04:40,670 --> 00:04:44,270
umbrella<font color="#CCCCCC"> project for this sort of small</font>

113
00:04:42,170 --> 00:04:46,280
productivity oriented language features

114
00:04:44,270 --> 00:04:48,919
a lot<font color="#E5E5E5"> of the things that have gotten</font>

115
00:04:46,280 --> 00:04:50,359
left<font color="#E5E5E5"> left behind by by the bigger</font>

116
00:04:48,920 --> 00:04:52,850
features<font color="#CCCCCC"> that we used to work on and</font>

117
00:04:50,360 --> 00:04:54,860
<font color="#E5E5E5">would talk about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font><font color="#CCCCCC"> of those</font><font color="#E5E5E5"> the</font>

118
00:04:52,850 --> 00:04:56,720
the the first<font color="#E5E5E5"> preview feature we're</font>

119
00:04:54,860 --> 00:05:00,100
delivering<font color="#E5E5E5"> is enhancements to the switch</font>

120
00:04:56,720 --> 00:05:02,840
statement<font color="#CCCCCC"> this is also an example of a</font>

121
00:05:00,100 --> 00:05:04,400
smaller feature that sedimented out of a

122
00:05:02,840 --> 00:05:06,440
bigger feature we started looking<font color="#E5E5E5"> at the</font>

123
00:05:04,400 --> 00:05:07,820
problems of<font color="#CCCCCC"> Swift's when we started</font>

124
00:05:06,440 --> 00:05:09,170
<font color="#E5E5E5">looking at pattern matching which is a</font>

125
00:05:07,820 --> 00:05:11,270
bigger feature we'll be working on<font color="#CCCCCC"> for a</font>

126
00:05:09,170 --> 00:05:13,250
<font color="#E5E5E5">while and then we realized that some</font><font color="#CCCCCC"> of</font>

127
00:05:11,270 --> 00:05:15,109
<font color="#CCCCCC">the pieces</font><font color="#E5E5E5"> could be factored out and</font>

128
00:05:13,250 --> 00:05:17,990
delivered earlier and we're generally

129
00:05:15,110 --> 00:05:19,820
useful<font color="#E5E5E5"> not just in the context they</font>

130
00:05:17,990 --> 00:05:23,600
originally designed but - everybody's

131
00:05:19,820 --> 00:05:26,150
code<font color="#CCCCCC"> and so this this</font><font color="#E5E5E5"> I think this</font><font color="#CCCCCC"> is a</font>

132
00:05:23,600 --> 00:05:27,410
success<font color="#E5E5E5"> in a couple of ways and I'll run</font>

133
00:05:26,150 --> 00:05:31,219
through<font color="#CCCCCC"> a quick example of it it's not</font><font color="#E5E5E5"> a</font>

134
00:05:27,410 --> 00:05:33,170
not earth-shattering but it does it<font color="#E5E5E5"> does</font>

135
00:05:31,220 --> 00:05:34,640
address<font color="#CCCCCC"> a pain that we sort</font><font color="#E5E5E5"> of all live</font>

136
00:05:33,170 --> 00:05:36,320
with every day<font color="#CCCCCC"> so here's a typical</font>

137
00:05:34,640 --> 00:05:38,210
switch statement in Java<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> our</font>

138
00:05:36,320 --> 00:05:41,690
statements which means that if<font color="#E5E5E5"> you want</font>

139
00:05:38,210 --> 00:05:44,479
<font color="#E5E5E5">to use a switch to effectively compute a</font>

140
00:05:41,690 --> 00:05:47,120
function<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> cheat by you know</font>

141
00:05:44,480 --> 00:05:48,770
sticking a value in a variable<font color="#E5E5E5"> you know</font>

142
00:05:47,120 --> 00:05:51,770
in the in each case and<font color="#E5E5E5"> you better hope</font>

143
00:05:48,770 --> 00:05:53,780
<font color="#CCCCCC">that you did that for</font><font color="#E5E5E5"> every case</font><font color="#CCCCCC"> so this</font>

144
00:05:51,770 --> 00:05:57,070
is a<font color="#E5E5E5"> typical</font><font color="#CCCCCC"> use of</font><font color="#E5E5E5"> a switch to simulate</font>

145
00:05:53,780 --> 00:06:00,349
<font color="#E5E5E5">an expression</font><font color="#CCCCCC"> it stinks in a lot of ways</font>

146
00:05:57,070 --> 00:06:02,210
it's a overly general control construct

147
00:06:00,350 --> 00:06:04,030
which means you<font color="#E5E5E5"> know for the problem</font>

148
00:06:02,210 --> 00:06:06,859
which<font color="#E5E5E5"> means that it's more</font><font color="#CCCCCC"> error-prone</font>

149
00:06:04,030 --> 00:06:08,539
<font color="#E5E5E5">there's this annoying need to break here</font>

150
00:06:06,860 --> 00:06:11,300
there's this<font color="#E5E5E5"> annoying need to say</font>

151
00:06:08,540 --> 00:06:12,620
default when we know for a fact<font color="#CCCCCC"> that</font>

152
00:06:11,300 --> 00:06:15,740
<font color="#E5E5E5">these are</font><font color="#CCCCCC"> the only</font><font color="#E5E5E5"> seven days and the</font>

153
00:06:12,620 --> 00:06:17,920
week<font color="#CCCCCC"> it's it's not</font><font color="#E5E5E5"> it's not the code you</font>

154
00:06:15,740 --> 00:06:21,200
really<font color="#E5E5E5"> want it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> right so there's a</font>

155
00:06:17,920 --> 00:06:23,420
there's this operation by mutation yuck

156
00:06:21,200 --> 00:06:26,719
there's all there's<font color="#E5E5E5"> this estranged</font>

157
00:06:23,420 --> 00:06:28,580
control flow you know there's the baking

158
00:06:26,720 --> 00:06:30,440
exhausted<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> often</font><font color="#CCCCCC"> missing</font><font color="#E5E5E5"> yourself</font>

159
00:06:28,580 --> 00:06:32,390
<font color="#E5E5E5">and this is what it looks like as an</font>

160
00:06:30,440 --> 00:06:33,650
expression switch which<font color="#E5E5E5"> is kind of a</font>

161
00:06:32,390 --> 00:06:34,820
code you had in your<font color="#CCCCCC"> head when you sat</font>

162
00:06:33,650 --> 00:06:36,679
<font color="#CCCCCC">down to write</font><font color="#E5E5E5"> this thing</font><font color="#CCCCCC"> in the first</font>

163
00:06:34,820 --> 00:06:39,140
<font color="#E5E5E5">place right you wanted an expression you</font>

164
00:06:36,680 --> 00:06:40,730
didn't want a statement<font color="#E5E5E5"> and you wanted</font>

165
00:06:39,140 --> 00:06:42,479
<font color="#E5E5E5">to be able to say if it's Monday Friday</font>

166
00:06:40,730 --> 00:06:44,279
<font color="#E5E5E5">or Sunday then the number of letters</font>

167
00:06:42,479 --> 00:06:46,438
and you'd<font color="#E5E5E5"> like for the compiler to know</font>

168
00:06:44,279 --> 00:06:49,139
that well<font color="#CCCCCC"> des is an enum you've covered</font>

169
00:06:46,439 --> 00:06:53,490
all of<font color="#E5E5E5"> them why make me write a default</font>

170
00:06:49,139 --> 00:06:56,189
<font color="#E5E5E5">clause that throws a you know I I can't</font>

171
00:06:53,490 --> 00:06:58,439
find my hat<font color="#E5E5E5"> exception when the compiler</font>

172
00:06:56,189 --> 00:07:01,710
can darn<font color="#E5E5E5"> well put</font><font color="#CCCCCC"> that in for you right</font>

173
00:06:58,439 --> 00:07:04,349
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is a simplification in a lot of</font>

174
00:07:01,710 --> 00:07:06,388
ways it's less typing<font color="#E5E5E5"> yay but the real</font>

175
00:07:04,349 --> 00:07:08,069
benefit is is it's<font color="#E5E5E5"> less error-prone and</font>

176
00:07:06,389 --> 00:07:11,219
it's clearer it's closer<font color="#E5E5E5"> to the code you</font>

177
00:07:08,069 --> 00:07:14,009
had in<font color="#E5E5E5"> your head when you started and</font>

178
00:07:11,219 --> 00:07:16,680
we've actually done<font color="#CCCCCC"> this as two separate</font>

179
00:07:14,009 --> 00:07:18,089
enhancements to switch<font color="#E5E5E5"> one is it can</font>

180
00:07:16,680 --> 00:07:21,120
either<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a statement or an expression</font>

181
00:07:18,089 --> 00:07:24,539
and the other<font color="#E5E5E5"> is a sort of streamlined</font>

182
00:07:21,120 --> 00:07:26,909
control flow<font color="#CCCCCC"> where in the very common</font>

183
00:07:24,539 --> 00:07:28,729
<font color="#E5E5E5">case where each case has one action or</font>

184
00:07:26,909 --> 00:07:31,229
<font color="#E5E5E5">one value that's associated with it</font>

185
00:07:28,729 --> 00:07:34,110
<font color="#E5E5E5">there's a simpler control flow where</font><font color="#CCCCCC"> you</font>

186
00:07:31,229 --> 00:07:36,899
can just say case value<font color="#CCCCCC"> arrow expression</font>

187
00:07:34,110 --> 00:07:38,520
or arrow statement and not have to bake

188
00:07:36,899 --> 00:07:45,449
back in the you know<font color="#E5E5E5"> the breaking</font>

189
00:07:38,520 --> 00:07:47,789
yourself<font color="#CCCCCC"> oops</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so and you</font><font color="#E5E5E5"> can mix</font>

190
00:07:45,449 --> 00:07:49,469
and<font color="#E5E5E5"> match these you could use one</font><font color="#CCCCCC"> or the</font>

191
00:07:47,789 --> 00:07:52,289
other<font color="#E5E5E5"> or</font><font color="#CCCCCC"> both the example I just</font><font color="#E5E5E5"> showed</font>

192
00:07:49,469 --> 00:07:54,029
<font color="#CCCCCC">you use both but</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> could use the the</font>

193
00:07:52,289 --> 00:07:55,318
benefit of<font color="#E5E5E5"> the streamline labels with an</font>

194
00:07:54,029 --> 00:08:00,149
<font color="#E5E5E5">ordinary switch</font><font color="#CCCCCC"> state mode fall through</font>

195
00:07:55,319 --> 00:08:01,770
if you wanted okay so the switch

196
00:08:00,149 --> 00:08:03,060
expression<font color="#E5E5E5"> feature sort of sedimented</font>

197
00:08:01,770 --> 00:08:05,818
out of this bigger feature which we

198
00:08:03,060 --> 00:08:07,110
which is<font color="#E5E5E5"> called pattern matching pattern</font>

199
00:08:05,819 --> 00:08:08,669
matching is a pretty deep feature I'm

200
00:08:07,110 --> 00:08:11,339
not going to be able<font color="#CCCCCC"> to do justice to it</font>

201
00:08:08,669 --> 00:08:13,649
<font color="#CCCCCC">in the time I have so I'm just gonna</font><font color="#E5E5E5"> try</font>

202
00:08:11,339 --> 00:08:15,479
to<font color="#E5E5E5"> give you the flavor of it and an</font>

203
00:08:13,649 --> 00:08:18,419
<font color="#E5E5E5">example of something we do all</font><font color="#CCCCCC"> the time</font>

204
00:08:15,479 --> 00:08:21,719
<font color="#E5E5E5">is test and extract does this objects</font>

205
00:08:18,419 --> 00:08:23,310
have this<font color="#E5E5E5"> characteristic if so do do</font>

206
00:08:21,719 --> 00:08:25,469
something<font color="#CCCCCC"> to extract a certain value</font>

207
00:08:23,310 --> 00:08:27,899
<font color="#CCCCCC">cast it to</font><font color="#E5E5E5"> something pluck out its</font>

208
00:08:25,469 --> 00:08:29,430
<font color="#CCCCCC">fields something like that</font><font color="#E5E5E5"> and put them</font>

209
00:08:27,899 --> 00:08:30,990
in variable so I can use them<font color="#E5E5E5"> to do</font>

210
00:08:29,430 --> 00:08:33,000
<font color="#E5E5E5">something with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we do these</font><font color="#CCCCCC"> things</font>

211
00:08:30,990 --> 00:08:37,440
all the<font color="#CCCCCC"> time when we program and we do</font>

212
00:08:33,000 --> 00:08:39,328
them together<font color="#E5E5E5"> and it would be nice to to</font>

213
00:08:37,440 --> 00:08:41,279
fuse these into one operation because

214
00:08:39,328 --> 00:08:43,198
they are logically one<font color="#E5E5E5"> operation so when</font>

215
00:08:41,279 --> 00:08:45,269
we say if object instance of integer and

216
00:08:43,198 --> 00:08:46,170
the next thing we do is<font color="#CCCCCC"> cast it to</font><font color="#E5E5E5"> an</font>

217
00:08:45,269 --> 00:08:49,310
<font color="#E5E5E5">integer that's really disappointing</font>

218
00:08:46,170 --> 00:08:52,529
<font color="#CCCCCC">because what else would</font><font color="#E5E5E5"> we do next</font><font color="#CCCCCC"> right</font>

219
00:08:49,310 --> 00:08:54,479
<font color="#CCCCCC">the only thing we could do next is make</font>

220
00:08:52,529 --> 00:08:55,800
<font color="#CCCCCC">a mistake by cutting and pasting from</font>

221
00:08:54,480 --> 00:08:56,010
<font color="#E5E5E5">somewhere</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> and casting it to the</font>

222
00:08:55,800 --> 00:08:58,170
wrong

223
00:08:56,010 --> 00:09:00,870
type right so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not the language</font>

224
00:08:58,170 --> 00:09:02,729
helping you<font color="#CCCCCC"> write</font><font color="#E5E5E5"> error free code it's</font>

225
00:09:00,870 --> 00:09:07,740
the<font color="#CCCCCC"> language like daring you to make a</font>

226
00:09:02,730 --> 00:09:09,630
stupid<font color="#CCCCCC"> mistake right and so that's</font><font color="#E5E5E5"> not a</font>

227
00:09:07,740 --> 00:09:12,960
<font color="#E5E5E5">great way</font><font color="#CCCCCC"> to do things so let's make</font>

228
00:09:09,630 --> 00:09:14,700
<font color="#CCCCCC">that better there's a lot</font><font color="#E5E5E5"> of ways</font><font color="#CCCCCC"> that</font>

229
00:09:12,960 --> 00:09:16,740
<font color="#E5E5E5">this particular problem</font><font color="#CCCCCC"> can be solved</font>

230
00:09:14,700 --> 00:09:19,470
but I think pattern matching<font color="#E5E5E5"> is more</font>

231
00:09:16,740 --> 00:09:21,600
powerful than most of the others and

232
00:09:19,470 --> 00:09:26,040
<font color="#E5E5E5">basically what a pattern match does is</font>

233
00:09:21,600 --> 00:09:27,810
it fuses<font color="#CCCCCC"> those three</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> test</font><font color="#CCCCCC"> a</font>

234
00:09:26,040 --> 00:09:31,829
conditional extraction and<font color="#E5E5E5"> a binding</font>

235
00:09:27,810 --> 00:09:33,000
into one<font color="#E5E5E5"> one operation</font><font color="#CCCCCC"> and so this is</font>

236
00:09:31,830 --> 00:09:35,250
what instance of looks<font color="#E5E5E5"> like with a</font>

237
00:09:33,000 --> 00:09:36,690
pattern on<font color="#E5E5E5"> the right side instead of</font>

238
00:09:35,250 --> 00:09:38,820
<font color="#E5E5E5">saying instance of integer we say</font>

239
00:09:36,690 --> 00:09:42,450
instance of integer and then<font color="#E5E5E5"> a variable</font>

240
00:09:38,820 --> 00:09:44,550
name and that fuses the<font color="#CCCCCC"> Ru an integer</font><font color="#E5E5E5"> if</font>

241
00:09:42,450 --> 00:09:47,460
you're an integer cast it<font color="#CCCCCC"> to integer and</font>

242
00:09:44,550 --> 00:09:51,329
stick the result in this fresh variable

243
00:09:47,460 --> 00:09:54,240
<font color="#E5E5E5">so I can just use</font><font color="#CCCCCC"> it right and this is</font>

244
00:09:51,330 --> 00:09:56,520
<font color="#E5E5E5">just a very simple kind of pattern there</font>

245
00:09:54,240 --> 00:09:57,900
there<font color="#E5E5E5"> there are other kinds of patterns</font>

246
00:09:56,520 --> 00:09:59,430
and there are other constructs<font color="#E5E5E5"> like</font>

247
00:09:57,900 --> 00:10:01,620
switch that can<font color="#E5E5E5"> use</font><font color="#CCCCCC"> patterns so it's a</font>

248
00:09:59,430 --> 00:10:04,079
feature<font color="#E5E5E5"> that goes pretty deep</font><font color="#CCCCCC"> but even</font>

249
00:10:01,620 --> 00:10:05,910
this simple<font color="#CCCCCC"> thing will eliminate like</font>

250
00:10:04,080 --> 00:10:08,010
almost<font color="#CCCCCC"> a</font><font color="#E5E5E5"> hundred percent of the cast in</font>

251
00:10:05,910 --> 00:10:12,209
<font color="#CCCCCC">Java code</font><font color="#E5E5E5"> so that's pretty nice in and</font>

252
00:10:08,010 --> 00:10:14,310
of itself<font color="#CCCCCC"> and and it interacts very</font>

253
00:10:12,210 --> 00:10:15,690
nicely with boolean expressions for

254
00:10:14,310 --> 00:10:18,839
<font color="#CCCCCC">example so if you're writing an equals</font>

255
00:10:15,690 --> 00:10:22,470
method<font color="#CCCCCC"> if I say if instance of this</font>

256
00:10:18,840 --> 00:10:24,450
class<font color="#CCCCCC"> T</font><font color="#E5E5E5"> if that succeeds it binds T and</font>

257
00:10:22,470 --> 00:10:26,250
then I can<font color="#CCCCCC"> use it</font><font color="#E5E5E5"> in the remainder of</font>

258
00:10:24,450 --> 00:10:27,810
<font color="#E5E5E5">that expression</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> if you if you look at</font>

259
00:10:26,250 --> 00:10:30,660
the control flow of an equals method as

260
00:10:27,810 --> 00:10:33,150
generated by a typical<font color="#E5E5E5"> IDE it's all over</font>

261
00:10:30,660 --> 00:10:34,920
the place<font color="#CCCCCC"> if this is you know if this</font>

262
00:10:33,150 --> 00:10:37,590
condition is<font color="#CCCCCC"> true then return false</font>

263
00:10:34,920 --> 00:10:39,510
<font color="#CCCCCC">otherwise</font><font color="#E5E5E5"> return true otherwise</font><font color="#CCCCCC"> do this</font>

264
00:10:37,590 --> 00:10:41,220
complicated<font color="#CCCCCC"> thing and return that it's</font>

265
00:10:39,510 --> 00:10:43,260
kind of hard<font color="#CCCCCC"> to follow</font><font color="#E5E5E5"> this is a lot</font>

266
00:10:41,220 --> 00:10:45,090
<font color="#CCCCCC">easier</font><font color="#E5E5E5"> to follow</font><font color="#CCCCCC"> they're equal if the</font>

267
00:10:43,260 --> 00:10:47,160
other thing is<font color="#E5E5E5"> this class and his size</font>

268
00:10:45,090 --> 00:10:51,690
matches<font color="#E5E5E5"> my size and</font><font color="#CCCCCC"> his name matches my</font>

269
00:10:47,160 --> 00:10:54,810
name much more clear what's<font color="#E5E5E5"> going on so</font>

270
00:10:51,690 --> 00:10:58,020
here's a another another<font color="#CCCCCC"> example of</font>

271
00:10:54,810 --> 00:11:00,839
<font color="#CCCCCC">using pattern matching</font><font color="#E5E5E5"> in in the switch</font>

272
00:10:58,020 --> 00:11:02,970
statement<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> kind of code that</font>

273
00:11:00,840 --> 00:11:05,070
we often<font color="#E5E5E5"> find ourselves writing if</font>

274
00:11:02,970 --> 00:11:06,210
something is an instance of integer cast

275
00:11:05,070 --> 00:11:08,730
it to<font color="#CCCCCC"> an integer too</font><font color="#E5E5E5"> will do this</font>

276
00:11:06,210 --> 00:11:09,840
otherwise<font color="#CCCCCC"> is it a baitcaster to a</font><font color="#E5E5E5"> byte</font>

277
00:11:08,730 --> 00:11:12,810
do something else

278
00:11:09,840 --> 00:11:15,150
we've all<font color="#E5E5E5"> written this code</font><font color="#CCCCCC"> and it has</font>

279
00:11:12,810 --> 00:11:16,890
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> all kinds</font><font color="#CCCCCC"> of repetition that</font>

280
00:11:15,150 --> 00:11:19,529
<font color="#CCCCCC">has the repetition of the test and</font><font color="#E5E5E5"> the</font>

281
00:11:16,890 --> 00:11:21,750
cast<font color="#E5E5E5"> it has the repetition of how many</font>

282
00:11:19,529 --> 00:11:23,250
times can i say instance of it has the

283
00:11:21,750 --> 00:11:24,810
repetition of<font color="#E5E5E5"> assigning to</font><font color="#CCCCCC"> the same</font>

284
00:11:23,250 --> 00:11:25,890
variable<font color="#CCCCCC"> and i hope i'm assigning the</font>

285
00:11:24,810 --> 00:11:27,239
same<font color="#E5E5E5"> variable and every one of those</font>

286
00:11:25,890 --> 00:11:31,890
arms but the<font color="#CCCCCC"> compiler doesn't</font>

287
00:11:27,240 --> 00:11:34,500
necessarily check that for me<font color="#CCCCCC"> and if I</font>

288
00:11:31,890 --> 00:11:35,850
turn my case label into patterns<font color="#E5E5E5"> some of</font>

289
00:11:34,500 --> 00:11:38,310
the boilerplate goes away<font color="#CCCCCC"> immediately</font>

290
00:11:35,850 --> 00:11:40,200
which is<font color="#E5E5E5"> great</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> the the</font>

291
00:11:38,310 --> 00:11:42,510
redundancy<font color="#CCCCCC"> of the tests and casts go</font>

292
00:11:40,200 --> 00:11:44,550
away and the code<font color="#CCCCCC"> is starting to look a</font>

293
00:11:42,510 --> 00:11:46,290
little bit<font color="#E5E5E5"> more clear but if I combine</font>

294
00:11:44,550 --> 00:11:48,180
<font color="#CCCCCC">it with what I showed you before</font><font color="#E5E5E5"> which</font>

295
00:11:46,290 --> 00:11:50,939
<font color="#CCCCCC">is the Express which</font><font color="#E5E5E5"> as an expression I</font>

296
00:11:48,180 --> 00:11:52,800
<font color="#E5E5E5">can write it like</font><font color="#CCCCCC"> this which is again</font>

297
00:11:50,940 --> 00:11:54,570
<font color="#E5E5E5">the code you probably had in your head</font>

298
00:11:52,800 --> 00:11:57,870
when you sat down<font color="#E5E5E5"> to write it so why not</font>

299
00:11:54,570 --> 00:12:00,630
<font color="#E5E5E5">let you actually</font><font color="#CCCCCC"> write that</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> so the</font>

300
00:11:57,870 --> 00:12:03,029
when<font color="#E5E5E5"> you say case pattern it combines</font>

301
00:12:00,630 --> 00:12:04,110
the does the thing match the pattern if

302
00:12:03,029 --> 00:12:06,660
so<font color="#CCCCCC"> extreme</font>

303
00:12:04,110 --> 00:12:08,460
<font color="#CCCCCC">you know extract the the</font><font color="#E5E5E5"> relevant stuff</font>

304
00:12:06,660 --> 00:12:12,270
<font color="#CCCCCC">for</font><font color="#E5E5E5"> at bind it to variables that have a</font>

305
00:12:08,460 --> 00:12:13,620
scope that<font color="#E5E5E5"> makes sense okay so this is a</font>

306
00:12:12,270 --> 00:12:15,000
<font color="#E5E5E5">pretty neat feature and the patterns</font>

307
00:12:13,620 --> 00:12:18,180
<font color="#CCCCCC">rabbit hole actually</font><font color="#E5E5E5"> goes</font><font color="#CCCCCC"> pretty deep</font>

308
00:12:15,000 --> 00:12:19,770
I'm not<font color="#E5E5E5"> gonna I'm not I'm not gonna dive</font>

309
00:12:18,180 --> 00:12:21,270
into it because<font color="#E5E5E5"> I would definitely run</font>

310
00:12:19,770 --> 00:12:23,189
out of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> definitely</font>

311
00:12:21,270 --> 00:12:25,800
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> we can deliver in little</font>

312
00:12:23,190 --> 00:12:27,570
bits<font color="#E5E5E5"> over time so we'll do type patterns</font>

313
00:12:25,800 --> 00:12:29,699
<font color="#E5E5E5">an instance of first and then we'll</font>

314
00:12:27,570 --> 00:12:30,870
probably do type patterns and switch and

315
00:12:29,700 --> 00:12:35,070
they will probably<font color="#E5E5E5"> do deconstruction</font>

316
00:12:30,870 --> 00:12:36,720
patterns and move on<font color="#CCCCCC"> from</font><font color="#E5E5E5"> there so</font><font color="#CCCCCC"> okay</font>

317
00:12:35,070 --> 00:12:39,870
so I'm gonna switch<font color="#CCCCCC"> gears and talk about</font>

318
00:12:36,720 --> 00:12:41,370
a much<font color="#E5E5E5"> bigger project that some of you</font>

319
00:12:39,870 --> 00:12:42,960
<font color="#E5E5E5">will know it I've been talking about and</font>

320
00:12:41,370 --> 00:12:46,020
not delivering<font color="#E5E5E5"> for a very long time and</font>

321
00:12:42,960 --> 00:12:47,400
this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> nature of the kind of you</font>

322
00:12:46,020 --> 00:12:50,280
<font color="#E5E5E5">know big research and development</font>

323
00:12:47,400 --> 00:12:52,350
projects<font color="#CCCCCC"> that are reboots</font><font color="#E5E5E5"> to big chunks</font>

324
00:12:50,280 --> 00:12:53,970
of<font color="#E5E5E5"> the of the platform we've been</font>

325
00:12:52,350 --> 00:12:56,160
working on<font color="#CCCCCC"> Valhalla almost</font><font color="#E5E5E5"> five years</font>

326
00:12:53,970 --> 00:12:58,890
<font color="#CCCCCC">we've done</font><font color="#E5E5E5"> five rounds of prototypes</font>

327
00:12:56,160 --> 00:13:00,510
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we're finally getting close enough</font>

328
00:12:58,890 --> 00:13:02,640
<font color="#CCCCCC">to understanding the problem that we</font>

329
00:13:00,510 --> 00:13:04,500
think we<font color="#E5E5E5"> can transition from the</font>

330
00:13:02,640 --> 00:13:06,110
research phase of the program<font color="#CCCCCC"> to the</font>

331
00:13:04,500 --> 00:13:08,370
<font color="#E5E5E5">development phase of the program and</font>

332
00:13:06,110 --> 00:13:10,140
that's<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> although</font>

333
00:13:08,370 --> 00:13:14,760
some of<font color="#E5E5E5"> you are tired of hearing</font><font color="#CCCCCC"> me talk</font>

334
00:13:10,140 --> 00:13:17,790
about<font color="#E5E5E5"> it so why is project Valhalla so</font>

335
00:13:14,760 --> 00:13:20,189
important so the goal is rebooting the

336
00:13:17,790 --> 00:13:22,219
way the JVM lays out memory<font color="#E5E5E5"> data in</font>

337
00:13:20,190 --> 00:13:24,080
memory<font color="#E5E5E5"> and this is important because</font>

338
00:13:22,220 --> 00:13:26,090
the last 25 30<font color="#E5E5E5"> years</font><font color="#CCCCCC"> hardware has</font>

339
00:13:24,080 --> 00:13:27,680
changed drastically

340
00:13:26,090 --> 00:13:29,600
you know the<font color="#E5E5E5"> relative cost of an</font>

341
00:13:27,680 --> 00:13:32,810
arithmetic<font color="#CCCCCC"> operation and a memory</font>

342
00:13:29,600 --> 00:13:36,440
operation were<font color="#CCCCCC"> one-to-one 30 years ago</font>

343
00:13:32,810 --> 00:13:37,969
and you<font color="#E5E5E5"> know now a full cash mess</font><font color="#CCCCCC"> can</font>

344
00:13:36,440 --> 00:13:40,430
<font color="#E5E5E5">cost you a thousand instruction issue</font>

345
00:13:37,970 --> 00:13:44,480
<font color="#CCCCCC">slots so with the reality changing out</font>

346
00:13:40,430 --> 00:13:45,920
from under us<font color="#CCCCCC"> by such a degree it stands</font>

347
00:13:44,480 --> 00:13:48,350
to reason<font color="#E5E5E5"> the way we were laying things</font>

348
00:13:45,920 --> 00:13:51,290
out in memory probably isn't optimal for

349
00:13:48,350 --> 00:13:53,060
today's<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> and you know if you</font>

350
00:13:51,290 --> 00:13:55,310
look at the the data structures we put

351
00:13:53,060 --> 00:13:57,140
in the heap<font color="#E5E5E5"> there's a lot of little</font>

352
00:13:55,310 --> 00:13:59,900
<font color="#E5E5E5">nodes with pointers to other nodes</font><font color="#CCCCCC"> and</font>

353
00:13:57,140 --> 00:14:02,660
those pointers mean in directions<font color="#E5E5E5"> in</font>

354
00:13:59,900 --> 00:14:04,430
directions means cache misses<font color="#E5E5E5"> and you</font>

355
00:14:02,660 --> 00:14:05,569
know that<font color="#E5E5E5"> that is something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

356
00:14:04,430 --> 00:14:08,569
<font color="#E5E5E5">know has the potential to hurt</font>

357
00:14:05,570 --> 00:14:10,580
performance<font color="#E5E5E5"> across the board and the</font>

358
00:14:08,570 --> 00:14:12,020
root of<font color="#E5E5E5"> this is the philosophy</font><font color="#CCCCCC"> and</font>

359
00:14:10,580 --> 00:14:15,320
everything is an object<font color="#CCCCCC"> which made</font>

360
00:14:12,020 --> 00:14:17,120
perfect sense<font color="#E5E5E5"> in like 1990 but the</font>

361
00:14:15,320 --> 00:14:19,790
result is a lot of programs are paying

362
00:14:17,120 --> 00:14:22,490
for<font color="#E5E5E5"> a benefit they're not getting so if</font>

363
00:14:19,790 --> 00:14:24,890
I have you<font color="#E5E5E5"> know a point class and I have</font>

364
00:14:22,490 --> 00:14:26,720
an array<font color="#CCCCCC"> of points</font><font color="#E5E5E5"> this is what it looks</font>

365
00:14:24,890 --> 00:14:28,640
like<font color="#CCCCCC"> in memory each one</font><font color="#E5E5E5"> of those</font>

366
00:14:26,720 --> 00:14:30,920
elements of my array is really a pointer

367
00:14:28,640 --> 00:14:35,420
to<font color="#CCCCCC"> an object</font><font color="#E5E5E5"> with a header and a small</font>

368
00:14:30,920 --> 00:14:37,579
payload<font color="#CCCCCC"> and so every you</font><font color="#E5E5E5"> know I'm using</font>

369
00:14:35,420 --> 00:14:39,560
<font color="#E5E5E5">if you look at if you look at memory</font>

370
00:14:37,580 --> 00:14:41,480
efficiency<font color="#CCCCCC"> I'm losing here because I'm</font>

371
00:14:39,560 --> 00:14:44,150
using up a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> space for headers and</font>

372
00:14:41,480 --> 00:14:47,750
arrows<font color="#CCCCCC"> compared</font><font color="#E5E5E5"> to the amount of space</font>

373
00:14:44,150 --> 00:14:50,420
I'm using for<font color="#E5E5E5"> actual X Y numbers and I'm</font>

374
00:14:47,750 --> 00:14:52,730
paying in time because as I walk through

375
00:14:50,420 --> 00:14:56,209
<font color="#CCCCCC">this list I'm risking</font><font color="#E5E5E5"> a cache miss</font><font color="#CCCCCC"> every</font>

376
00:14:52,730 --> 00:14:57,710
<font color="#CCCCCC">one I look at now sometimes</font><font color="#E5E5E5"> what</font>

377
00:14:56,210 --> 00:15:00,380
developers will do when they<font color="#E5E5E5"> figure this</font>

378
00:14:57,710 --> 00:15:02,840
out is they will like hand<font color="#CCCCCC"> Shred their</font>

379
00:15:00,380 --> 00:15:04,760
code to<font color="#CCCCCC"> try</font><font color="#E5E5E5"> to like shred their objects</font>

380
00:15:02,840 --> 00:15:07,100
into arrays which is exactly what we

381
00:15:04,760 --> 00:15:08,960
don't<font color="#E5E5E5"> want people doing because this</font>

382
00:15:07,100 --> 00:15:11,320
kind<font color="#E5E5E5"> of code is much harder to</font><font color="#CCCCCC"> maintain</font>

383
00:15:08,960 --> 00:15:13,580
it's less readable<font color="#E5E5E5"> it's more error-prone</font>

384
00:15:11,320 --> 00:15:15,380
<font color="#CCCCCC">but it's our fault</font><font color="#E5E5E5"> it's our fault</font>

385
00:15:13,580 --> 00:15:18,110
because we<font color="#E5E5E5"> gave developers a choice of</font>

386
00:15:15,380 --> 00:15:20,750
either<font color="#E5E5E5"> maintainable code or fast code</font>

387
00:15:18,110 --> 00:15:22,070
and developers will always choose<font color="#CCCCCC"> the</font>

388
00:15:20,750 --> 00:15:24,200
fast code<font color="#E5E5E5"> even when their performance</font>

389
00:15:22,070 --> 00:15:26,870
<font color="#CCCCCC">they don't have performance requirements</font>

390
00:15:24,200 --> 00:15:28,820
or tests or anything like<font color="#E5E5E5"> that that but</font>

391
00:15:26,870 --> 00:15:31,850
you know so this<font color="#E5E5E5"> is the problem</font><font color="#CCCCCC"> that we</font>

392
00:15:28,820 --> 00:15:34,850
<font color="#E5E5E5">get and the</font><font color="#CCCCCC"> Funt this fundamentally goes</font>

393
00:15:31,850 --> 00:15:36,080
back to every object<font color="#CCCCCC"> has an identity so</font>

394
00:15:34,850 --> 00:15:37,730
this is the data<font color="#CCCCCC"> layout</font>

395
00:15:36,080 --> 00:15:39,740
want<font color="#E5E5E5"> most of the time right</font><font color="#CCCCCC"> I have an</font>

396
00:15:37,730 --> 00:15:43,730
array of XY points<font color="#CCCCCC"> I</font><font color="#E5E5E5"> should lay it out</font>

397
00:15:39,740 --> 00:15:45,980
<font color="#CCCCCC">in memory XY XY XY XY so the question is</font>

398
00:15:43,730 --> 00:15:50,690
what kind<font color="#CCCCCC"> of code do I want to write</font><font color="#E5E5E5"> to</font>

399
00:15:45,980 --> 00:15:53,930
<font color="#E5E5E5">get this layout and our claim is to say</font>

400
00:15:50,690 --> 00:15:55,790
that point is a value a<font color="#CCCCCC"> value is an</font>

401
00:15:53,930 --> 00:15:57,500
aggregate like<font color="#E5E5E5"> a class but it doesn't</font>

402
00:15:55,790 --> 00:15:59,959
have identity<font color="#E5E5E5"> it's just its data</font><font color="#CCCCCC"> it's</font>

403
00:15:57,500 --> 00:16:02,750
<font color="#E5E5E5">just a wrapper</font><font color="#CCCCCC"> for its data two points</font>

404
00:15:59,960 --> 00:16:03,890
are equal<font color="#E5E5E5"> if they have the same</font><font color="#CCCCCC"> XY value</font>

405
00:16:02,750 --> 00:16:06,860
that's the<font color="#E5E5E5"> whole story</font>

406
00:16:03,890 --> 00:16:08,540
<font color="#E5E5E5">and when you tell the DM that that you</font>

407
00:16:06,860 --> 00:16:10,250
don't care<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the identity you're</font>

408
00:16:08,540 --> 00:16:11,569
never gonna lock on it<font color="#E5E5E5"> you're not going</font>

409
00:16:10,250 --> 00:16:15,470
to extend<font color="#E5E5E5"> it you're not going to mutate</font>

410
00:16:11,570 --> 00:16:17,810
it the VM can repay you by saying<font color="#CCCCCC"> AHA I</font>

411
00:16:15,470 --> 00:16:20,240
can give you this<font color="#E5E5E5"> data layout in the</font>

412
00:16:17,810 --> 00:16:22,069
previous case<font color="#E5E5E5"> the VM always was set it</font>

413
00:16:20,240 --> 00:16:23,480
was<font color="#CCCCCC"> guessing of like well you haven't</font>

414
00:16:22,070 --> 00:16:25,190
locked on it yet but you<font color="#E5E5E5"> might lock on</font>

415
00:16:23,480 --> 00:16:27,890
it later<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so it had</font><font color="#CCCCCC"> to</font>

416
00:16:25,190 --> 00:16:31,310
pessimistically lay things out in a less

417
00:16:27,890 --> 00:16:32,689
than optimal way and so you<font color="#CCCCCC"> know there's</font>

418
00:16:31,310 --> 00:16:34,880
there's a trade that<font color="#CCCCCC"> you're making as a</font>

419
00:16:32,690 --> 00:16:36,500
programmer you're<font color="#E5E5E5"> saying I don't</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> as</font>

420
00:16:34,880 --> 00:16:38,840
<font color="#E5E5E5">much from my object model for this</font>

421
00:16:36,500 --> 00:16:40,760
particular class it's just a dumb

422
00:16:38,840 --> 00:16:43,520
numeric class<font color="#E5E5E5"> it's a complex number and</font>

423
00:16:40,760 --> 00:16:46,580
in return<font color="#E5E5E5"> for giving up that flexibility</font>

424
00:16:43,520 --> 00:16:48,949
you<font color="#CCCCCC"> can be you know repaid with better</font>

425
00:16:46,580 --> 00:16:51,730
<font color="#E5E5E5">performance these can be flattened into</font>

426
00:16:48,950 --> 00:16:56,290
<font color="#E5E5E5">other objects other values into arrays</font>

427
00:16:51,730 --> 00:16:56,290
<font color="#CCCCCC">denser flatter</font><font color="#E5E5E5"> memory better performance</font>

428
00:16:56,320 --> 00:17:04,160
<font color="#CCCCCC">so value types kind of have some of the</font>

429
00:17:01,850 --> 00:17:05,900
behavior of<font color="#E5E5E5"> classes in that</font><font color="#CCCCCC"> they have</font>

430
00:17:04,160 --> 00:17:07,820
fields and methods<font color="#E5E5E5"> and constructors and</font>

431
00:17:05,900 --> 00:17:11,120
type variables and a lot of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> things</font>

432
00:17:07,819 --> 00:17:12,740
<font color="#E5E5E5">that classes have but they have the sort</font>

433
00:17:11,119 --> 00:17:14,469
<font color="#E5E5E5">of when they when the rubber hits the</font>

434
00:17:12,740 --> 00:17:17,449
road they behave more like primitives

435
00:17:14,470 --> 00:17:18,680
<font color="#CCCCCC">and you know this</font><font color="#E5E5E5"> is deliberate we're</font>

436
00:17:17,449 --> 00:17:21,860
trying to get the best of both<font color="#CCCCCC"> worlds</font>

437
00:17:18,680 --> 00:17:23,930
<font color="#CCCCCC">and you know</font><font color="#E5E5E5"> our our our mantra here</font><font color="#CCCCCC"> is</font>

438
00:17:21,859 --> 00:17:25,939
codes like<font color="#E5E5E5"> a class works like</font><font color="#CCCCCC"> a knit</font><font color="#E5E5E5"> now</font>

439
00:17:23,930 --> 00:17:28,190
<font color="#E5E5E5">it codes like a restricted form of class</font>

440
00:17:25,940 --> 00:17:29,660
there<font color="#E5E5E5"> are things you can't do but if you</font>

441
00:17:28,190 --> 00:17:33,680
can<font color="#CCCCCC"> fit within those trade-offs you can</font>

442
00:17:29,660 --> 00:17:35,450
get the benefits<font color="#E5E5E5"> so</font><font color="#CCCCCC"> ok who cares who's</font>

443
00:17:33,680 --> 00:17:37,790
this good for well my claim is this<font color="#E5E5E5"> is</font>

444
00:17:35,450 --> 00:17:39,140
good for everybody<font color="#CCCCCC"> if you're writing an</font>

445
00:17:37,790 --> 00:17:41,659
application<font color="#E5E5E5"> that's working with large</font>

446
00:17:39,140 --> 00:17:44,090
<font color="#CCCCCC">datasets you get first</font><font color="#E5E5E5"> of all much</font>

447
00:17:41,660 --> 00:17:47,840
better<font color="#E5E5E5"> memory density and second of all</font>

448
00:17:44,090 --> 00:17:48,860
better better locality so application

449
00:17:47,840 --> 00:17:51,320
writers can

450
00:17:48,860 --> 00:17:54,139
or<font color="#E5E5E5"> directly control the</font><font color="#CCCCCC"> layout of</font><font color="#E5E5E5"> their</font>

451
00:17:51,320 --> 00:17:55,639
code in memory library<font color="#E5E5E5"> writers can do</font>

452
00:17:54,140 --> 00:17:58,880
<font color="#E5E5E5">really cool</font><font color="#CCCCCC"> things with</font><font color="#E5E5E5"> this we can make</font>

453
00:17:55,640 --> 00:18:02,090
hash map faster<font color="#E5E5E5"> by using values in the</font>

454
00:17:58,880 --> 00:18:05,390
implementation<font color="#CCCCCC"> instead of</font><font color="#E5E5E5"> linked nodes</font>

455
00:18:02,090 --> 00:18:07,129
that are full-blown objects<font color="#CCCCCC"> and so that</font>

456
00:18:05,390 --> 00:18:10,220
means every application<font color="#CCCCCC"> that uses</font><font color="#E5E5E5"> hash</font>

457
00:18:07,130 --> 00:18:12,830
map which is<font color="#E5E5E5"> every application will just</font>

458
00:18:10,220 --> 00:18:15,410
get<font color="#CCCCCC"> faster</font><font color="#E5E5E5"> so that's cool</font>

459
00:18:12,830 --> 00:18:17,899
compiler writers love this<font color="#E5E5E5"> the scholar</font>

460
00:18:15,410 --> 00:18:20,630
<font color="#CCCCCC">you know think of</font><font color="#E5E5E5"> all the stuff that</font><font color="#CCCCCC"> the</font>

461
00:18:17,900 --> 00:18:22,520
Scala compiler has<font color="#CCCCCC"> to do because</font><font color="#E5E5E5"> it's</font>

462
00:18:20,630 --> 00:18:25,240
<font color="#E5E5E5">not exactly like Java and it has to</font>

463
00:18:22,520 --> 00:18:27,679
simulate<font color="#E5E5E5"> things with objects you know</font>

464
00:18:25,240 --> 00:18:30,679
<font color="#CCCCCC">Ruby has the same problem Ruby fixed</font>

465
00:18:27,679 --> 00:18:32,390
<font color="#E5E5E5">nums</font><font color="#CCCCCC"> has to</font><font color="#E5E5E5"> be represented as objects so</font>

466
00:18:30,679 --> 00:18:35,470
compiler writers can use this as a

467
00:18:32,390 --> 00:18:38,840
compilation target and you know

468
00:18:35,470 --> 00:18:39,950
languages other than Java<font color="#CCCCCC"> on the JVM are</font>

469
00:18:38,840 --> 00:18:41,870
probably<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see a much bigger</font>

470
00:18:39,950 --> 00:18:43,400
boost from this because<font color="#CCCCCC"> right now</font>

471
00:18:41,870 --> 00:18:46,219
they're<font color="#E5E5E5"> paying an</font><font color="#CCCCCC"> enormous simulation</font>

472
00:18:43,400 --> 00:18:49,910
penalty to make their non<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> language</font>

473
00:18:46,220 --> 00:18:51,320
work on the<font color="#E5E5E5"> JVM</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so I think this is</font>

474
00:18:49,910 --> 00:18:54,620
something<font color="#E5E5E5"> that's going to make everybody</font>

475
00:18:51,320 --> 00:18:56,480
<font color="#E5E5E5">happy either directly</font><font color="#CCCCCC"> or indirectly so</font>

476
00:18:54,620 --> 00:18:58,399
like I said<font color="#E5E5E5"> we've been running running</font>

477
00:18:56,480 --> 00:19:01,580
<font color="#CCCCCC">this project you</font><font color="#E5E5E5"> know for almost</font><font color="#CCCCCC"> five</font>

478
00:18:58,400 --> 00:19:03,919
years<font color="#E5E5E5"> and in that time we've built five</font>

479
00:19:01,580 --> 00:19:05,510
different<font color="#E5E5E5"> prototypes</font><font color="#CCCCCC"> each aimed at</font>

480
00:19:03,919 --> 00:19:07,669
<font color="#CCCCCC">answering a different aspect</font><font color="#E5E5E5"> of the</font>

481
00:19:05,510 --> 00:19:09,679
<font color="#CCCCCC">question</font><font color="#E5E5E5"> let's hold the problem constant</font>

482
00:19:07,669 --> 00:19:10,940
except<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this little aspect</font><font color="#E5E5E5"> we'll do a</font>

483
00:19:09,679 --> 00:19:13,610
prototype we'll see what we can learn

484
00:19:10,940 --> 00:19:16,760
<font color="#CCCCCC">from</font><font color="#E5E5E5"> that and the latest</font><font color="#CCCCCC"> prototype which</font>

485
00:19:13,610 --> 00:19:17,959
we're<font color="#CCCCCC"> calling a world</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> I think we've</font>

486
00:19:16,760 --> 00:19:20,900
turned the<font color="#CCCCCC"> corner that we've validated</font>

487
00:19:17,960 --> 00:19:22,820
<font color="#CCCCCC">the</font><font color="#E5E5E5"> VM underpinnings to get us</font><font color="#CCCCCC"> flattened</font>

488
00:19:20,900 --> 00:19:24,890
layout to get us the JIT optimizations

489
00:19:22,820 --> 00:19:27,260
<font color="#E5E5E5">to get us calling convention</font>

490
00:19:24,890 --> 00:19:28,850
optimization<font color="#E5E5E5"> scalar ization and enough</font>

491
00:19:27,260 --> 00:19:31,570
language<font color="#E5E5E5"> support that you can</font><font color="#CCCCCC"> actually</font>

492
00:19:28,850 --> 00:19:35,139
write a program<font color="#CCCCCC"> that uses</font><font color="#E5E5E5"> these things</font>

493
00:19:31,570 --> 00:19:37,850
<font color="#CCCCCC">so we're hoping that the</font><font color="#E5E5E5"> next prototype</font>

494
00:19:35,140 --> 00:19:40,280
<font color="#E5E5E5">you know which is coming you know in the</font>

495
00:19:37,850 --> 00:19:41,689
<font color="#E5E5E5">next year ish time frame is something</font>

496
00:19:40,280 --> 00:19:43,610
that you know<font color="#CCCCCC"> people in this room</font><font color="#E5E5E5"> could</font>

497
00:19:41,690 --> 00:19:48,410
actually<font color="#E5E5E5"> try out and write programs with</font>

498
00:19:43,610 --> 00:19:50,750
value types and give us feedback<font color="#CCCCCC"> so as</font>

499
00:19:48,410 --> 00:19:53,299
an<font color="#CCCCCC"> example</font><font color="#E5E5E5"> you know here's an example of</font>

500
00:19:50,750 --> 00:19:55,190
how this pays off<font color="#CCCCCC"> let's say you want to</font>

501
00:19:53,299 --> 00:19:57,650
<font color="#E5E5E5">do matrix multiplication over complex</font>

502
00:19:55,190 --> 00:20:00,470
values<font color="#E5E5E5"> so you do it the obvious way you</font>

503
00:19:57,650 --> 00:20:02,540
have a class that<font color="#CCCCCC"> represents complex you</font>

504
00:20:00,470 --> 00:20:04,310
have<font color="#E5E5E5"> arrays of complex and two</font>

505
00:20:02,540 --> 00:20:05,899
<font color="#CCCCCC">raise with complex to represent matrices</font>

506
00:20:04,310 --> 00:20:07,730
and<font color="#CCCCCC"> you write addition and</font>

507
00:20:05,900 --> 00:20:09,770
multiplication in the obvious way and

508
00:20:07,730 --> 00:20:12,380
the only<font color="#CCCCCC"> thing that's not good about</font><font color="#E5E5E5"> it</font>

509
00:20:09,770 --> 00:20:13,490
<font color="#CCCCCC">is look</font><font color="#E5E5E5"> at all that allocation</font><font color="#CCCCCC"> right so</font>

510
00:20:12,380 --> 00:20:15,500
you're<font color="#CCCCCC"> going to be spending</font><font color="#E5E5E5"> more time</font>

511
00:20:13,490 --> 00:20:17,780
allocating than you will be<font color="#CCCCCC"> actually</font>

512
00:20:15,500 --> 00:20:19,910
multiplying<font color="#E5E5E5"> things and similarly if you</font>

513
00:20:17,780 --> 00:20:21,740
<font color="#CCCCCC">want to implement</font><font color="#E5E5E5"> a matrix multiply you</font>

514
00:20:19,910 --> 00:20:28,850
do it in the obvious way and you pay the

515
00:20:21,740 --> 00:20:31,070
obvious penalties<font color="#CCCCCC"> so we we ran this both</font>

516
00:20:28,850 --> 00:20:33,290
the version I just showed<font color="#CCCCCC"> you</font><font color="#E5E5E5"> and the</font>

517
00:20:31,070 --> 00:20:35,570
version<font color="#E5E5E5"> that was modified</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> adding one</font>

518
00:20:33,290 --> 00:20:39,070
word which is value in front<font color="#E5E5E5"> of the</font>

519
00:20:35,570 --> 00:20:42,970
<font color="#CCCCCC">declaration of</font><font color="#E5E5E5"> class complex and we saw</font>

520
00:20:39,070 --> 00:20:45,050
factor of<font color="#E5E5E5"> 12 performance difference and</font>

521
00:20:42,970 --> 00:20:46,430
wit now where did<font color="#E5E5E5"> we think that</font>

522
00:20:45,050 --> 00:20:48,409
<font color="#E5E5E5">performance difference was going to come</font>

523
00:20:46,430 --> 00:20:51,320
from well some of<font color="#CCCCCC"> the was not doing</font>

524
00:20:48,410 --> 00:20:53,000
boxing at all and some of it was<font color="#CCCCCC"> not</font>

525
00:20:51,320 --> 00:20:55,399
doing<font color="#E5E5E5"> as much in direction so you could</font>

526
00:20:53,000 --> 00:20:57,080
keep<font color="#CCCCCC"> your</font><font color="#E5E5E5"> arithmetic pipelines</font><font color="#CCCCCC"> stead</font>

527
00:20:55,400 --> 00:21:00,170
<font color="#E5E5E5">with data instead</font><font color="#CCCCCC"> of waiting for</font><font color="#E5E5E5"> data</font>

528
00:20:57,080 --> 00:21:03,560
<font color="#E5E5E5">from the cache and if you look at the</font>

529
00:21:00,170 --> 00:21:04,490
instructions per cycle metric<font color="#E5E5E5"> you see</font>

530
00:21:03,560 --> 00:21:06,139
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> that</font>

531
00:21:04,490 --> 00:21:08,450
instructions per cycle in the boxed

532
00:21:06,140 --> 00:21:11,950
version<font color="#E5E5E5"> was about one on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> four</font><font color="#CCCCCC"> four</font>

533
00:21:08,450 --> 00:21:14,510
core<font color="#E5E5E5"> machine and it was almost three</font>

534
00:21:11,950 --> 00:21:17,060
with the value version which meant<font color="#CCCCCC"> that</font>

535
00:21:14,510 --> 00:21:19,340
yes we were keeping<font color="#E5E5E5"> those you know</font>

536
00:21:17,060 --> 00:21:21,770
keeping those arithmetic units<font color="#CCCCCC"> stayed</font>

537
00:21:19,340 --> 00:21:23,959
<font color="#E5E5E5">with data keeping them busy</font><font color="#CCCCCC"> and not just</font>

538
00:21:21,770 --> 00:21:26,330
having<font color="#E5E5E5"> them sit and wait</font><font color="#CCCCCC"> for data</font><font color="#E5E5E5"> coming</font>

539
00:21:23,960 --> 00:21:28,190
in through the pipeline<font color="#CCCCCC"> so we think this</font>

540
00:21:26,330 --> 00:21:30,290
<font color="#CCCCCC">is a you know</font><font color="#E5E5E5"> good validation that we're</font>

541
00:21:28,190 --> 00:21:33,290
<font color="#E5E5E5">moving in the right</font><font color="#CCCCCC"> direction</font><font color="#E5E5E5"> and</font>

542
00:21:30,290 --> 00:21:38,330
<font color="#E5E5E5">there's lots more to</font><font color="#CCCCCC"> come here and so</font>

543
00:21:33,290 --> 00:21:40,460
summing up you know<font color="#E5E5E5"> our pipeline is it's</font>

544
00:21:38,330 --> 00:21:42,500
the only<font color="#E5E5E5"> thing I'm sad about is I can't</font>

545
00:21:40,460 --> 00:21:45,500
deliver<font color="#E5E5E5"> it fast enough we have all this</font>

546
00:21:42,500 --> 00:21:47,960
<font color="#E5E5E5">great stuff we're</font><font color="#CCCCCC"> working on in so</font><font color="#E5E5E5"> many</font>

547
00:21:45,500 --> 00:21:50,570
categories<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> language</font>

548
00:21:47,960 --> 00:21:54,070
<font color="#E5E5E5">productivity features fundamental</font><font color="#CCCCCC"> vm</font>

549
00:21:50,570 --> 00:21:57,530
<font color="#E5E5E5">performance features native Interop</font>

550
00:21:54,070 --> 00:21:59,899
concurrency models<font color="#E5E5E5"> you know these are</font>

551
00:21:57,530 --> 00:22:02,149
<font color="#CCCCCC">all starting to</font><font color="#E5E5E5"> bear fruit you know and</font>

552
00:21:59,900 --> 00:22:05,300
there's really<font color="#CCCCCC"> lots lots</font><font color="#E5E5E5"> of really good</font>

553
00:22:02,150 --> 00:22:06,590
stuff<font color="#E5E5E5"> coming so next year I hope to be</font>

554
00:22:05,300 --> 00:22:09,230
talking about<font color="#CCCCCC"> different stuff some of</font>

555
00:22:06,590 --> 00:22:11,540
<font color="#CCCCCC">the</font><font color="#E5E5E5"> same but a lot difference so you</font>

556
00:22:09,230 --> 00:22:14,540
know<font color="#E5E5E5"> come back next year keep me honest</font>

557
00:22:11,540 --> 00:22:16,930
<font color="#E5E5E5">or better yet come get involved thank</font>

558
00:22:14,540 --> 00:22:16,930
you<font color="#E5E5E5"> very much</font>

559
00:22:21,810 --> 00:22:26,379
did I actually talk fast<font color="#E5E5E5"> enough to fit</font>

560
00:22:24,760 --> 00:22:30,850
that in my budget<font color="#E5E5E5"> or we just taking pity</font>

561
00:22:26,380 --> 00:22:36,400
on me<font color="#E5E5E5"> that was really really remarkable</font>

562
00:22:30,850 --> 00:22:37,750
<font color="#E5E5E5">performance thank you</font><font color="#CCCCCC"> very much</font>

563
00:22:36,400 --> 00:22:39,430
do we have<font color="#CCCCCC"> a few minutes</font><font color="#E5E5E5"> for questions</font>

564
00:22:37,750 --> 00:22:40,750
<font color="#E5E5E5">or go on let's</font><font color="#CCCCCC"> have a couple of</font><font color="#E5E5E5"> minutes</font>

565
00:22:39,430 --> 00:22:46,450
for<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> and then we'll go into the</font>

566
00:22:40,750 --> 00:22:48,760
GP meeting all right looks like<font color="#CCCCCC"> I'm Jo</font>

567
00:22:46,450 --> 00:22:52,090
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> how do I best help consider I'm not</font>

568
00:22:48,760 --> 00:22:55,240
a<font color="#CCCCCC"> v-necks but you're not</font><font color="#E5E5E5"> Joe Java</font><font color="#CCCCCC"> Thank</font>

569
00:22:52,090 --> 00:22:59,290
<font color="#CCCCCC">You</font><font color="#E5E5E5"> Joe Java this question is how can</font>

570
00:22:55,240 --> 00:23:03,340
<font color="#CCCCCC">you best tell so the the kind of</font>

571
00:22:59,290 --> 00:23:07,480
feedback<font color="#CCCCCC"> we need is show up on amber dev</font>

572
00:23:03,340 --> 00:23:10,270
<font color="#CCCCCC">ojala dev try out the prototypes</font><font color="#E5E5E5"> write a</font>

573
00:23:07,480 --> 00:23:11,890
toy<font color="#CCCCCC"> program</font><font color="#E5E5E5"> and say this is what I was</font>

574
00:23:10,270 --> 00:23:15,120
<font color="#E5E5E5">able to get</font><font color="#CCCCCC"> working this is what I</font>

575
00:23:11,890 --> 00:23:20,230
wasn't<font color="#E5E5E5"> able to get working right tests</font>

576
00:23:15,120 --> 00:23:24,699
<font color="#CCCCCC">you know identify things</font><font color="#E5E5E5"> that you know</font>

577
00:23:20,230 --> 00:23:26,200
we might<font color="#CCCCCC"> have</font><font color="#E5E5E5"> missed try using these</font>

578
00:23:24,700 --> 00:23:28,510
<font color="#CCCCCC">features in your programs I think is the</font>

579
00:23:26,200 --> 00:23:31,000
best way to do it<font color="#E5E5E5"> you know cuz because</font>

580
00:23:28,510 --> 00:23:32,590
<font color="#E5E5E5">the we can think</font><font color="#CCCCCC"> about it and bash our</font>

581
00:23:31,000 --> 00:23:35,710
heads against the<font color="#CCCCCC"> whiteboard you know</font>

582
00:23:32,590 --> 00:23:37,270
for as long<font color="#CCCCCC"> as we</font><font color="#E5E5E5"> want and we do but we</font>

583
00:23:35,710 --> 00:23:39,340
can't see a<font color="#E5E5E5"> hundred percent of the</font>

584
00:23:37,270 --> 00:23:42,460
implications and so we need<font color="#E5E5E5"> help from</font>

585
00:23:39,340 --> 00:23:44,679
people<font color="#E5E5E5"> to point out here's something I</font>

586
00:23:42,460 --> 00:23:46,510
<font color="#CCCCCC">noticed when I actually tried to</font><font color="#E5E5E5"> migrate</font>

587
00:23:44,680 --> 00:23:55,240
my code<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> do they use this</font>

588
00:23:46,510 --> 00:23:57,640
<font color="#E5E5E5">feature okay well what's about logic and</font>

589
00:23:55,240 --> 00:24:00,520
<font color="#E5E5E5">openness</font><font color="#CCCCCC"> houses</font><font color="#E5E5E5"> go on what's about</font>

590
00:23:57,640 --> 00:24:01,990
<font color="#E5E5E5">orchard project monopolist project</font>

591
00:24:00,520 --> 00:24:03,460
metropolis<font color="#E5E5E5"> okay so that was one of the</font>

592
00:24:01,990 --> 00:24:05,620
features that we didn't have<font color="#E5E5E5"> time to</font>

593
00:24:03,460 --> 00:24:09,220
<font color="#E5E5E5">even talk</font><font color="#CCCCCC"> about so project metropolis is</font>

594
00:24:05,620 --> 00:24:11,169
about<font color="#E5E5E5"> adopting components of the</font><font color="#CCCCCC"> Gras</font>

595
00:24:09,220 --> 00:24:14,470
project in<font color="#CCCCCC"> particular the growl JIT</font>

596
00:24:11,170 --> 00:24:19,180
compiler and using growl as an<font color="#CCCCCC"> äôt</font>

597
00:24:14,470 --> 00:24:21,910
compiler into<font color="#E5E5E5"> open JDK</font><font color="#CCCCCC"> and so we've got</font>

598
00:24:19,180 --> 00:24:24,610
an experimental version<font color="#E5E5E5"> of a ot</font>

599
00:24:21,910 --> 00:24:27,340
compilation<font color="#E5E5E5"> in the JDK we have an</font>

600
00:24:24,610 --> 00:24:29,770
experimental<font color="#CCCCCC"> version of growl as a JIT</font>

601
00:24:27,340 --> 00:24:33,129
compiler<font color="#E5E5E5"> in the</font>

602
00:24:29,770 --> 00:24:34,950
and project metropolis is about<font color="#CCCCCC"> turning</font>

603
00:24:33,130 --> 00:24:38,170
these into<font color="#E5E5E5"> something that isn't</font>

604
00:24:34,950 --> 00:24:40,600
experimental<font color="#E5E5E5"> putting us on a</font><font color="#CCCCCC"> path where</font>

605
00:24:38,170 --> 00:24:43,000
it would<font color="#E5E5E5"> be credible</font><font color="#CCCCCC"> to replace the c2</font>

606
00:24:40,600 --> 00:24:45,219
compiler<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> growl compiler</font><font color="#E5E5E5"> we're</font>

607
00:24:43,000 --> 00:24:50,200
not there<font color="#CCCCCC"> yet but</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> hope we'll get</font>

608
00:24:45,220 --> 00:24:52,090
there someday<font color="#CCCCCC"> I work in a</font><font color="#E5E5E5"> very big</font>

609
00:24:50,200 --> 00:24:55,030
company<font color="#E5E5E5"> where Java is very popular and</font>

610
00:24:52,090 --> 00:24:57,939
it was<font color="#E5E5E5"> very popular and widespread the</font>

611
00:24:55,030 --> 00:25:00,610
<font color="#E5E5E5">uses</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Lombok</font><font color="#CCCCCC"> which is a sort of heck</font>

612
00:24:57,940 --> 00:25:03,160
to do basic metaprogramming in<font color="#CCCCCC"> java</font><font color="#E5E5E5"> is</font>

613
00:25:00,610 --> 00:25:06,399
there any plan to<font color="#E5E5E5"> avoid having to</font><font color="#CCCCCC"> use</font>

614
00:25:03,160 --> 00:25:10,120
<font color="#CCCCCC">Lombok yeah so one of the features I</font>

615
00:25:06,400 --> 00:25:12,550
didn't<font color="#E5E5E5"> talk about here was for</font><font color="#CCCCCC"> want of</font><font color="#E5E5E5"> a</font>

616
00:25:10,120 --> 00:25:14,500
better<font color="#E5E5E5"> term algebraic data types</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> in</font>

617
00:25:12,550 --> 00:25:15,790
product types<font color="#E5E5E5"> records and sealed types</font>

618
00:25:14,500 --> 00:25:17,530
<font color="#CCCCCC">there's a lot a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> different things</font>

619
00:25:15,790 --> 00:25:20,080
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can call them there there are a lot</font>

620
00:25:17,530 --> 00:25:23,770
of things<font color="#E5E5E5"> that we do</font><font color="#CCCCCC"> like when we're</font>

621
00:25:20,080 --> 00:25:25,990
declaring<font color="#E5E5E5"> data wrapper classes that are</font>

622
00:25:23,770 --> 00:25:27,700
unnecessary<font color="#E5E5E5"> boilerplate and we care a</font>

623
00:25:25,990 --> 00:25:30,190
<font color="#E5E5E5">lot about eliminating that boilerplate</font>

624
00:25:27,700 --> 00:25:32,170
<font color="#E5E5E5">not because we think you</font><font color="#CCCCCC"> should spend</font>

625
00:25:30,190 --> 00:25:34,380
less<font color="#E5E5E5"> time typing I mean you should but</font>

626
00:25:32,170 --> 00:25:36,790
that's<font color="#E5E5E5"> not why we do</font><font color="#CCCCCC"> it it's</font><font color="#E5E5E5"> because</font>

627
00:25:34,380 --> 00:25:39,670
<font color="#E5E5E5">having</font><font color="#CCCCCC"> to write all this stuff</font><font color="#E5E5E5"> out</font>

628
00:25:36,790 --> 00:25:41,740
longhand<font color="#CCCCCC"> that the compiler could figure</font>

629
00:25:39,670 --> 00:25:44,530
out<font color="#E5E5E5"> on its own is an opportunity</font><font color="#CCCCCC"> for you</font>

630
00:25:41,740 --> 00:25:47,920
to<font color="#E5E5E5"> make a</font><font color="#CCCCCC"> mistake</font><font color="#E5E5E5"> right and so we look</font>

631
00:25:44,530 --> 00:25:50,410
at boilerplate reduction not as make my

632
00:25:47,920 --> 00:25:52,270
code smaller but make my code more

633
00:25:50,410 --> 00:25:52,810
obvious what it does make my code less

634
00:25:52,270 --> 00:25:55,330
error-prone

635
00:25:52,810 --> 00:25:58,320
and we have that<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of</font>

636
00:25:55,330 --> 00:26:01,570
<font color="#E5E5E5">things along those lines in the pipeline</font>

637
00:25:58,320 --> 00:26:04,870
um I was<font color="#CCCCCC"> looking at your slide I</font><font color="#E5E5E5"> think</font>

638
00:26:01,570 --> 00:26:09,220
what we consider<font color="#E5E5E5"> policy of no preview</font>

639
00:26:04,870 --> 00:26:10,689
features on<font color="#E5E5E5"> LTS release</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> Capri</font><font color="#CCCCCC"> view</font>

640
00:26:09,220 --> 00:26:11,290
features<font color="#E5E5E5"> in LTS are completely</font>

641
00:26:10,690 --> 00:26:16,090
orthogonal

642
00:26:11,290 --> 00:26:20,620
LTS is a support mechanism<font color="#E5E5E5"> Oracle has</font>

643
00:26:16,090 --> 00:26:22,510
happened to decide that<font color="#E5E5E5"> that we're going</font>

644
00:26:20,620 --> 00:26:24,639
to<font color="#E5E5E5"> make certain support commitments</font>

645
00:26:22,510 --> 00:26:26,680
<font color="#E5E5E5">other companies can make their own</font>

646
00:26:24,640 --> 00:26:28,720
<font color="#E5E5E5">support commitments Azul could decide</font>

647
00:26:26,680 --> 00:26:30,010
that<font color="#E5E5E5"> they're gonna support Java</font><font color="#CCCCCC"> 9 for</font>

648
00:26:28,720 --> 00:26:32,560
the next<font color="#E5E5E5"> hundred and thirty seven</font><font color="#CCCCCC"> years</font>

649
00:26:30,010 --> 00:26:35,320
right that's that's<font color="#E5E5E5"> a choice they</font><font color="#CCCCCC"> can</font>

650
00:26:32,560 --> 00:26:38,139
make probably will<font color="#CCCCCC"> oracle hasn't made</font>

651
00:26:35,320 --> 00:26:42,250
<font color="#CCCCCC">that choice but</font><font color="#E5E5E5"> LCS is about commercial</font>

652
00:26:38,140 --> 00:26:44,440
support<font color="#CCCCCC"> preview features is about</font>

653
00:26:42,250 --> 00:26:46,210
not pushing features out before we've

654
00:26:44,440 --> 00:26:48,610
gotten<font color="#E5E5E5"> enough feedback from people</font><font color="#CCCCCC"> who</font>

655
00:26:46,210 --> 00:26:50,950
have<font color="#E5E5E5"> used the feature in anger</font><font color="#CCCCCC"> they're</font>

656
00:26:48,610 --> 00:26:54,100
just they're just orthogonal<font color="#E5E5E5"> and we</font>

657
00:26:50,950 --> 00:26:56,860
don't want to<font color="#E5E5E5"> make feature selection</font>

658
00:26:54,100 --> 00:27:00,879
decisions based on what the support

659
00:26:56,860 --> 00:27:03,189
model might be<font color="#E5E5E5"> for a given version thank</font>

660
00:27:00,880 --> 00:27:04,120
you<font color="#CCCCCC"> very much</font><font color="#E5E5E5"> that was justly popular</font>

661
00:27:03,190 --> 00:27:14,049
thank you

662
00:27:04,120 --> 00:27:14,049
[Applause]

