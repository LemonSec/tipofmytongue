1
00:00:05,740 --> 00:00:10,870
good afternoon everyone<font color="#CCCCCC"> I hope you're</font>

2
00:00:10,340 --> 00:00:14,160
all<font color="#E5E5E5"> in</font>

3
00:00:10,870 --> 00:00:16,299
for some learning<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> stuff</font>

4
00:00:14,160 --> 00:00:18,990
<font color="#E5E5E5">hopefully and also enjoying a lot of</font>

5
00:00:16,299 --> 00:00:21,820
peace I'll be talking<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bit about</font>

6
00:00:18,990 --> 00:00:25,028
extending number<font color="#CCCCCC"> and so the goal</font><font color="#E5E5E5"> of my</font>

7
00:00:21,820 --> 00:00:28,630
talk is<font color="#E5E5E5"> to give you an overview on</font><font color="#CCCCCC"> how</font>

8
00:00:25,029 --> 00:00:33,430
<font color="#CCCCCC">you can extend</font><font color="#E5E5E5"> number to better solve</font>

9
00:00:28,630 --> 00:00:35,410
your problems so let's first start<font color="#E5E5E5"> with</font>

10
00:00:33,430 --> 00:00:37,059
<font color="#E5E5E5">the beginning so give a short</font>

11
00:00:35,410 --> 00:00:38,980
introduction<font color="#E5E5E5"> what number is for those</font>

12
00:00:37,059 --> 00:00:42,809
<font color="#E5E5E5">who</font><font color="#CCCCCC"> don't know which yet</font><font color="#E5E5E5"> or will need</font>

13
00:00:38,980 --> 00:00:45,190
some refreshing<font color="#E5E5E5"> so number is a</font>

14
00:00:42,809 --> 00:00:47,709
just-in-time compiler you see here an

15
00:00:45,190 --> 00:00:48,940
<font color="#CCCCCC">example</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I shamelessly</font><font color="#E5E5E5"> stole from</font>

16
00:00:47,710 --> 00:00:53,940
<font color="#E5E5E5">the website from number</font>

17
00:00:48,940 --> 00:00:57,998
it's a<font color="#E5E5E5"> project supported by anaconda so</font>

18
00:00:53,940 --> 00:01:01,570
its goal is to<font color="#E5E5E5"> accelerate scientific</font>

19
00:00:57,999 --> 00:01:03,579
<font color="#E5E5E5">Python so you see here this is basically</font>

20
00:01:01,570 --> 00:01:05,890
<font color="#E5E5E5">how it</font><font color="#CCCCCC"> works you have</font><font color="#E5E5E5"> a decorator just</font>

21
00:01:03,579 --> 00:01:08,010
<font color="#E5E5E5">in tank up a decorator</font>

22
00:01:05,890 --> 00:01:12,520
<font color="#CCCCCC">it says nope I thing is true which means</font>

23
00:01:08,010 --> 00:01:15,160
<font color="#CCCCCC">that in the generated code no button is</font>

24
00:01:12,520 --> 00:01:19,570
involved<font color="#E5E5E5"> - no brightened the Python</font>

25
00:01:15,160 --> 00:01:21,729
interpreter<font color="#E5E5E5"> is not called what's what's</font>

26
00:01:19,570 --> 00:01:24,669
nice about<font color="#CCCCCC"> to namah</font><font color="#E5E5E5"> is that it has very</font>

27
00:01:21,730 --> 00:01:29,550
<font color="#CCCCCC">good numpy support it is also</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

28
00:01:24,670 --> 00:01:33,310
generate code for CUDA and also it<font color="#E5E5E5"> is</font>

29
00:01:29,550 --> 00:01:38,500
extensible<font color="#E5E5E5"> which is exactly the topic of</font>

30
00:01:33,310 --> 00:01:45,400
this talk anything else<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> that's</font>

31
00:01:38,500 --> 00:01:48,190
it<font color="#E5E5E5"> so I'll give you</font><font color="#CCCCCC"> a bit of context on</font>

32
00:01:45,400 --> 00:01:50,080
<font color="#E5E5E5">what I've been working on in</font><font color="#CCCCCC"> my day</font><font color="#E5E5E5"> job</font>

33
00:01:48,190 --> 00:01:52,179
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> want to talk too much about</font><font color="#E5E5E5"> it</font>

34
00:01:50,080 --> 00:01:55,600
<font color="#E5E5E5">but it gives you an</font><font color="#CCCCCC"> idea of what</font>

35
00:01:52,180 --> 00:01:58,030
problems you can solve so what you see

36
00:01:55,600 --> 00:02:00,880
here<font color="#CCCCCC"> is a photonic integrated circuit</font><font color="#E5E5E5"> so</font>

37
00:01:58,030 --> 00:02:05,170
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> basically just a regular</font>

38
00:02:00,880 --> 00:02:08,049
electronics chip which<font color="#CCCCCC"> is only special</font>

39
00:02:05,170 --> 00:02:11,530
<font color="#CCCCCC">because</font><font color="#E5E5E5"> you can connect an optical fiber</font>

40
00:02:08,050 --> 00:02:14,590
to it so true this fiber light will come

41
00:02:11,530 --> 00:02:18,670
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the chip and will be guided into</font>

42
00:02:14,590 --> 00:02:21,249
the chip<font color="#E5E5E5"> we at Waseda we actually try to</font>

43
00:02:18,670 --> 00:02:22,790
<font color="#E5E5E5">build software to be able to build and</font>

44
00:02:21,249 --> 00:02:26,269
design those us

45
00:02:22,790 --> 00:02:28,790
it's part<font color="#E5E5E5"> of this is an optical circuit</font>

46
00:02:26,269 --> 00:02:32,209
simulator so in which we try to simulate

47
00:02:28,790 --> 00:02:34,670
the behavior of<font color="#E5E5E5"> those circuits</font><font color="#CCCCCC"> and we</font>

48
00:02:32,209 --> 00:02:37,189
want our<font color="#E5E5E5"> users to be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> build</font>

49
00:02:34,670 --> 00:02:38,869
models of<font color="#E5E5E5"> their components so the</font><font color="#CCCCCC"> people</font>

50
00:02:37,189 --> 00:02:42,790
<font color="#E5E5E5">who have a bit of background in</font>

51
00:02:38,870 --> 00:02:45,799
electronics might know spice which is

52
00:02:42,790 --> 00:02:48,500
circuits simulator for electronics<font color="#E5E5E5"> so</font>

53
00:02:45,799 --> 00:02:51,530
it's<font color="#CCCCCC"> very similar</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so we want</font><font color="#CCCCCC"> our</font>

54
00:02:48,500 --> 00:02:55,010
users to build<font color="#E5E5E5"> models in</font><font color="#CCCCCC"> peyten</font>

55
00:02:51,530 --> 00:02:58,010
<font color="#CCCCCC">so a</font><font color="#E5E5E5"> high level API but at the same time</font>

56
00:02:55,010 --> 00:02:59,569
it has to<font color="#CCCCCC"> be really really fast</font><font color="#E5E5E5"> we don't</font>

57
00:02:58,010 --> 00:03:02,060
want to we want<font color="#CCCCCC"> to run a lot of</font>

58
00:02:59,569 --> 00:03:04,760
simulations<font color="#E5E5E5"> in a very short time so that</font>

59
00:03:02,060 --> 00:03:07,819
we can figure out how to<font color="#CCCCCC"> better build</font>

60
00:03:04,760 --> 00:03:09,530
our circuits so you see<font color="#CCCCCC"> all right some</font>

61
00:03:07,819 --> 00:03:12,458
problems here so<font color="#E5E5E5"> this calculate</font>

62
00:03:09,530 --> 00:03:16,909
<font color="#E5E5E5">asthmatic it has to be called by our</font>

63
00:03:12,459 --> 00:03:20,950
solver<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> written in C</font><font color="#E5E5E5"> C++ we have</font>

64
00:03:16,909 --> 00:03:24,828
here a sort<font color="#E5E5E5"> of dictionary like structure</font>

65
00:03:20,950 --> 00:03:27,409
<font color="#CCCCCC">and we have some C++ objects that</font><font color="#E5E5E5"> we</font>

66
00:03:24,829 --> 00:03:30,169
want to use from our simulator<font color="#E5E5E5"> so these</font>

67
00:03:27,409 --> 00:03:32,478
are all stuff and things<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> not</font>

68
00:03:30,169 --> 00:03:35,720
<font color="#CCCCCC">directly supported by</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> number so</font>

69
00:03:32,479 --> 00:03:39,319
dictionaries are not supported<font color="#E5E5E5"> there's</font>

70
00:03:35,720 --> 00:03:41,150
in the latest version some some basic

71
00:03:39,319 --> 00:03:45,738
support for<font color="#CCCCCC"> Strings</font><font color="#E5E5E5"> but even there it's</font>

72
00:03:41,150 --> 00:03:51,040
<font color="#E5E5E5">limited but luckily you can extend a</font>

73
00:03:45,739 --> 00:03:51,040
number okay<font color="#E5E5E5"> let's go to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next slide</font>

74
00:03:51,250 --> 00:03:59,150
number<font color="#CCCCCC"> it's a compiler</font><font color="#E5E5E5"> and it's</font>

75
00:03:54,829 --> 00:04:01,879
basically a<font color="#CCCCCC"> very boring</font><font color="#E5E5E5"> compiler but</font>

76
00:03:59,150 --> 00:04:05,359
<font color="#E5E5E5">it's good</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> software we want things to</font>

77
00:04:01,879 --> 00:04:07,328
be boring boring is good in software<font color="#CCCCCC"> but</font>

78
00:04:05,359 --> 00:04:10,099
<font color="#E5E5E5">basically what we do as software</font>

79
00:04:07,329 --> 00:04:12,560
engineers<font color="#E5E5E5"> we take bunch of</font><font color="#CCCCCC"> boring</font><font color="#E5E5E5"> stuff</font>

80
00:04:10,099 --> 00:04:16,909
<font color="#E5E5E5">and we turn it together in something</font>

81
00:04:12,560 --> 00:04:19,880
very<font color="#E5E5E5"> exciting but the one thing that</font>

82
00:04:16,909 --> 00:04:22,099
<font color="#CCCCCC">makes it special is as I said extensible</font>

83
00:04:19,880 --> 00:04:24,849
so you have a few extension points here

84
00:04:22,099 --> 00:04:29,120
<font color="#CCCCCC">so</font><font color="#E5E5E5"> one two</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> four</font>

85
00:04:24,849 --> 00:04:30,560
but with those extension points you can

86
00:04:29,120 --> 00:04:34,130
add your own stuff to the compiler

87
00:04:30,560 --> 00:04:36,770
<font color="#E5E5E5">pipeline so</font><font color="#CCCCCC"> let's start at</font><font color="#E5E5E5"> the beginning</font>

88
00:04:34,130 --> 00:04:39,289
so you start with pythons Oscar

89
00:04:36,770 --> 00:04:42,080
<font color="#E5E5E5">this will be translated into Python</font>

90
00:04:39,289 --> 00:04:44,419
<font color="#CCCCCC">bytecode and then number</font><font color="#E5E5E5"> will transform</font>

91
00:04:42,080 --> 00:04:46,568
this item bytecode in its own

92
00:04:44,419 --> 00:04:48,500
representation<font color="#E5E5E5"> so this is number</font>

93
00:04:46,569 --> 00:04:51,530
<font color="#E5E5E5">intermediate representation</font>

94
00:04:48,500 --> 00:04:55,550
it's basically an abstraction<font color="#CCCCCC"> over a</font>

95
00:04:51,530 --> 00:04:58,419
<font color="#CCCCCC">bytecode</font><font color="#E5E5E5"> next you have the opportunity</font>

96
00:04:55,550 --> 00:05:01,660
to rewrite<font color="#E5E5E5"> this</font><font color="#CCCCCC"> Internet intermediate</font>

97
00:04:58,419 --> 00:05:04,008
<font color="#E5E5E5">representation for example to do</font>

98
00:05:01,660 --> 00:05:06,949
parallelization<font color="#CCCCCC"> to do all kinds of</font>

99
00:05:04,009 --> 00:05:12,759
optimizations<font color="#E5E5E5"> and you can you at your</font>

100
00:05:06,949 --> 00:05:16,280
own rewriters<font color="#E5E5E5"> so then the next</font><font color="#CCCCCC"> step</font><font color="#E5E5E5"> is</font>

101
00:05:12,759 --> 00:05:19,250
type inference<font color="#CCCCCC"> where you can also add</font>

102
00:05:16,280 --> 00:05:22,070
<font color="#E5E5E5">your own types and do type inference of</font>

103
00:05:19,250 --> 00:05:24,080
your own functions then you have another

104
00:05:22,070 --> 00:05:27,009
<font color="#CCCCCC">opportunity to</font><font color="#E5E5E5"> do an orderly you write</font>

105
00:05:24,080 --> 00:05:30,229
<font color="#CCCCCC">face but this time with the actual</font><font color="#E5E5E5"> types</font>

106
00:05:27,009 --> 00:05:33,169
and then when all that is<font color="#E5E5E5"> finished you</font>

107
00:05:30,229 --> 00:05:36,409
<font color="#E5E5E5">can actually get to the</font><font color="#CCCCCC"> point and start</font>

108
00:05:33,169 --> 00:05:39,169
<font color="#E5E5E5">generating the</font><font color="#CCCCCC"> code so that it's</font>

109
00:05:36,409 --> 00:05:41,990
important to<font color="#CCCCCC"> remark that</font><font color="#E5E5E5"> num a number</font>

110
00:05:39,169 --> 00:05:43,639
does not<font color="#E5E5E5"> directly generate machine code</font>

111
00:05:41,990 --> 00:05:45,650
itself

112
00:05:43,639 --> 00:05:48,830
but it generates<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> VM</font>

113
00:05:45,650 --> 00:05:52,460
intermediate representation which<font color="#E5E5E5"> is</font>

114
00:05:48,830 --> 00:05:57,789
taken by<font color="#CCCCCC"> LLVM to actually generate the</font>

115
00:05:52,460 --> 00:06:03,948
<font color="#E5E5E5">machine code for your for</font><font color="#CCCCCC"> your machine</font>

116
00:05:57,789 --> 00:06:05,509
<font color="#CCCCCC">okay so also there in</font><font color="#E5E5E5"> the in a</font><font color="#CCCCCC"> lowering</font>

117
00:06:03,949 --> 00:06:07,789
<font color="#CCCCCC">face you</font><font color="#E5E5E5"> have the possibility to add</font>

118
00:06:05,509 --> 00:06:11,870
<font color="#E5E5E5">your own stuff so you can add custom</font>

119
00:06:07,789 --> 00:06:16,969
data models custom<font color="#E5E5E5"> code generation so</font>

120
00:06:11,870 --> 00:06:19,940
and after<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have very fast</font><font color="#CCCCCC"> new</font>

121
00:06:16,969 --> 00:06:22,610
native speed of your Python code<font color="#E5E5E5"> so I</font>

122
00:06:19,940 --> 00:06:26,690
will now go to bit more detail of all

123
00:06:22,610 --> 00:06:28,759
those extension points<font color="#CCCCCC"> let's start</font><font color="#E5E5E5"> with</font>

124
00:06:26,690 --> 00:06:35,060
the<font color="#E5E5E5"> beginning so I was talking about the</font>

125
00:06:28,759 --> 00:06:37,159
rewrite<font color="#E5E5E5"> phaser number likes decorators</font>

126
00:06:35,060 --> 00:06:40,430
very much so this is basically how all

127
00:06:37,159 --> 00:06:45,009
the extensions<font color="#E5E5E5"> work so you here we say</font>

128
00:06:40,430 --> 00:06:45,009
<font color="#E5E5E5">okay we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to register</font><font color="#CCCCCC"> or rewrite</font>

129
00:06:45,600 --> 00:06:50,760
and we say<font color="#CCCCCC"> okay it's before inferences I</font>

130
00:06:47,970 --> 00:06:53,370
said before you<font color="#E5E5E5"> have a step early</font><font color="#CCCCCC"> right</font>

131
00:06:50,760 --> 00:06:56,580
up before inference<font color="#E5E5E5"> before</font><font color="#CCCCCC"> typing</font><font color="#E5E5E5"> first</font>

132
00:06:53,370 --> 00:06:59,340
and then one after inference basically a

133
00:06:56,580 --> 00:07:01,859
rewrite<font color="#E5E5E5"> consists of two steps</font><font color="#CCCCCC"> so you</font>

134
00:06:59,340 --> 00:07:04,380
have a much<font color="#CCCCCC"> match</font><font color="#E5E5E5"> where you're going to</font>

135
00:07:01,860 --> 00:07:07,010
look for the expressions<font color="#E5E5E5"> the statements</font>

136
00:07:04,380 --> 00:07:10,440
the instructions you want<font color="#E5E5E5"> to replace and</font>

137
00:07:07,010 --> 00:07:13,289
then when<font color="#CCCCCC"> you return true the apply</font>

138
00:07:10,440 --> 00:07:16,530
<font color="#CCCCCC">method is invoked</font><font color="#E5E5E5"> and in that face you</font>

139
00:07:13,290 --> 00:07:20,250
can actually<font color="#E5E5E5"> replace the function block</font>

140
00:07:16,530 --> 00:07:28,320
of<font color="#E5E5E5"> your with a new one in which you do</font>

141
00:07:20,250 --> 00:07:32,310
an optimization for example next you

142
00:07:28,320 --> 00:07:36,960
<font color="#E5E5E5">have the type inference so there you</font>

143
00:07:32,310 --> 00:07:39,210
have something concept of types so maybe

144
00:07:36,960 --> 00:07:41,520
<font color="#CCCCCC">I've to clarify here so unnumbered type</font>

145
00:07:39,210 --> 00:07:45,239
is a bit different<font color="#CCCCCC"> than what</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would</font>

146
00:07:41,520 --> 00:07:47,969
<font color="#CCCCCC">have in up</font><font color="#E5E5E5"> then in just a regular Python</font>

147
00:07:45,240 --> 00:07:50,820
<font color="#E5E5E5">type so you</font><font color="#CCCCCC"> can compare</font><font color="#E5E5E5"> it more with</font>

148
00:07:47,970 --> 00:07:53,010
what<font color="#E5E5E5"> the</font><font color="#CCCCCC"> mypie project offers</font><font color="#E5E5E5"> so where</font>

149
00:07:50,820 --> 00:07:55,050
you<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> opportunity to add type</font>

150
00:07:53,010 --> 00:07:58,890
annotations to your functions so you

151
00:07:55,050 --> 00:08:01,440
have to compare<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with left so you have</font>

152
00:07:58,890 --> 00:08:04,409
the<font color="#CCCCCC"> possibility here</font><font color="#E5E5E5"> to add my point</font>

153
00:08:01,440 --> 00:08:06,510
type so this example<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a point</font>

154
00:08:04,410 --> 00:08:12,200
which has basically an x and

155
00:08:06,510 --> 00:08:14,940
y-coordinate<font color="#E5E5E5"> then you can use</font><font color="#CCCCCC"> that to do</font>

156
00:08:12,200 --> 00:08:18,510
type inference for your own function so

157
00:08:14,940 --> 00:08:22,260
<font color="#CCCCCC">here we have callable my point</font>

158
00:08:18,510 --> 00:08:26,539
constructor which if you use it in<font color="#CCCCCC"> your</font>

159
00:08:22,260 --> 00:08:29,490
Python code<font color="#E5E5E5"> will create</font><font color="#CCCCCC"> my point object</font>

160
00:08:26,540 --> 00:08:33,300
and this type callable is basically

161
00:08:29,490 --> 00:08:37,229
going<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to infer</font><font color="#CCCCCC"> the</font>

162
00:08:33,299 --> 00:08:40,349
types of my point constructor this<font color="#E5E5E5"> is</font>

163
00:08:37,229 --> 00:08:44,310
going to<font color="#CCCCCC"> generate your typer and for</font>

164
00:08:40,350 --> 00:08:48,060
given<font color="#CCCCCC"> x and y argument you want to say</font>

165
00:08:44,310 --> 00:08:50,790
<font color="#E5E5E5">okay the return value is going to be of</font>

166
00:08:48,060 --> 00:08:55,829
a type my point type<font color="#E5E5E5"> as basically how it</font>

167
00:08:50,790 --> 00:08:58,699
<font color="#CCCCCC">works so that's the possibilities you</font>

168
00:08:55,830 --> 00:09:03,180
<font color="#CCCCCC">have during</font><font color="#E5E5E5"> type inference</font>

169
00:08:58,699 --> 00:09:05,550
next one that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> finished</font><font color="#CCCCCC"> so again you</font>

170
00:09:03,180 --> 00:09:10,380
have a rewrite<font color="#CCCCCC"> phase where</font><font color="#E5E5E5"> you are able</font>

171
00:09:05,550 --> 00:09:11,819
<font color="#E5E5E5">to reuse types and when all</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

172
00:09:10,380 --> 00:09:14,430
finished<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can start with actually</font>

173
00:09:11,819 --> 00:09:18,959
<font color="#CCCCCC">lowering so that means generating a</font><font color="#E5E5E5"> lot</font>

174
00:09:14,430 --> 00:09:21,870
<font color="#CCCCCC">VM intermediate representation so again</font>

175
00:09:18,959 --> 00:09:24,149
a decorator<font color="#CCCCCC"> same principle we have my</font>

176
00:09:21,870 --> 00:09:29,730
point type<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to register a</font>

177
00:09:24,149 --> 00:09:32,730
model to a certain type in this case for

178
00:09:29,730 --> 00:09:36,589
our<font color="#E5E5E5"> point we want to use a strut like a</font>

179
00:09:32,730 --> 00:09:41,009
<font color="#E5E5E5">see strut like model with x and y</font>

180
00:09:36,589 --> 00:09:44,190
attribute of which we here assume that

181
00:09:41,009 --> 00:09:46,949
it's an integer<font color="#CCCCCC"> and that's basically</font><font color="#E5E5E5"> the</font>

182
00:09:44,190 --> 00:09:50,220
data<font color="#E5E5E5"> layout of your of</font><font color="#CCCCCC"> your point so</font>

183
00:09:46,949 --> 00:09:53,939
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> telling number okay I have here</font>

184
00:09:50,220 --> 00:09:56,040
<font color="#CCCCCC">a data structure</font><font color="#E5E5E5"> with this data layout</font>

185
00:09:53,940 --> 00:09:59,610
as you also see this is a list<font color="#E5E5E5"> because</font>

186
00:09:56,040 --> 00:10:02,550
the order is<font color="#E5E5E5"> important and then this</font>

187
00:09:59,610 --> 00:10:04,939
information<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be used when you're</font>

188
00:10:02,550 --> 00:10:07,949
going<font color="#CCCCCC"> to actually lower the</font>

189
00:10:04,939 --> 00:10:10,410
implementation<font color="#E5E5E5"> of your color balls so as</font>

190
00:10:07,949 --> 00:10:12,810
<font color="#E5E5E5">you said as</font><font color="#CCCCCC"> we had</font><font color="#E5E5E5"> before we had</font><font color="#CCCCCC"> for my</font>

191
00:10:10,410 --> 00:10:15,839
<font color="#E5E5E5">pond constructor which takes two</font>

192
00:10:12,810 --> 00:10:20,790
arguments so we have an integer argument

193
00:10:15,839 --> 00:10:22,949
<font color="#E5E5E5">the X and then the Y so the lower</font>

194
00:10:20,790 --> 00:10:26,160
building<font color="#E5E5E5"> is a decorator to say okay I</font>

195
00:10:22,949 --> 00:10:27,569
<font color="#CCCCCC">have a callable</font><font color="#E5E5E5"> that I want to lower I</font>

196
00:10:26,160 --> 00:10:30,660
have an instruction<font color="#CCCCCC"> that I want to lower</font>

197
00:10:27,569 --> 00:10:34,620
this can also<font color="#E5E5E5"> be a setter I get utter an</font>

198
00:10:30,660 --> 00:10:37,050
addition basically any operation<font color="#CCCCCC"> and</font>

199
00:10:34,620 --> 00:10:41,069
you're going to say<font color="#CCCCCC"> okay for</font><font color="#E5E5E5"> this</font>

200
00:10:37,050 --> 00:10:46,859
particle signature this<font color="#E5E5E5"> is the</font>

201
00:10:41,069 --> 00:10:49,500
<font color="#CCCCCC">implementation of the</font><font color="#E5E5E5"> the LLVM code but</font>

202
00:10:46,860 --> 00:10:52,019
what is important is<font color="#CCCCCC"> that for LLVM</font><font color="#E5E5E5"> a</font>

203
00:10:49,500 --> 00:10:55,170
<font color="#CCCCCC">four number you're never ever going</font><font color="#E5E5E5"> to</font>

204
00:10:52,019 --> 00:10:57,689
<font color="#E5E5E5">or very rarely</font><font color="#CCCCCC"> or going to</font><font color="#E5E5E5"> generate a</font>

205
00:10:55,170 --> 00:11:01,019
lot of<font color="#CCCCCC"> am intermediate</font><font color="#E5E5E5"> representation</font>

206
00:10:57,689 --> 00:11:03,810
yourself<font color="#E5E5E5"> so what makes number very nice</font>

207
00:11:01,019 --> 00:11:08,550
is that you they<font color="#CCCCCC"> provide a lot of</font>

208
00:11:03,810 --> 00:11:10,199
functionality<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to easily</font>

209
00:11:08,550 --> 00:11:11,430
generate

210
00:11:10,200 --> 00:11:12,870
a lot<font color="#CCCCCC"> of young intermediate</font>

211
00:11:11,430 --> 00:11:19,199
representation so this is a nice<font color="#E5E5E5"> example</font>

212
00:11:12,870 --> 00:11:21,899
so as I said<font color="#E5E5E5"> before you</font><font color="#CCCCCC"> have we had the</font>

213
00:11:19,200 --> 00:11:25,829
the point which for<font color="#E5E5E5"> which we</font><font color="#CCCCCC"> use a</font>

214
00:11:21,899 --> 00:11:28,110
struct like model and there is this in

215
00:11:25,829 --> 00:11:31,680
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Cochin utilities you have this</font>

216
00:11:28,110 --> 00:11:33,480
create struct proxy which generates like

217
00:11:31,680 --> 00:11:36,989
this kind of syntactic<font color="#CCCCCC"> sugar that you</font>

218
00:11:33,480 --> 00:11:40,019
can use<font color="#E5E5E5"> here so it looks here here at</font>

219
00:11:36,990 --> 00:11:42,029
that we assign a value<font color="#E5E5E5"> X to point of X</font>

220
00:11:40,019 --> 00:11:45,990
but what it actually does in<font color="#E5E5E5"> a</font>

221
00:11:42,029 --> 00:11:50,070
background is using the Builder<font color="#CCCCCC"> to at</font>

222
00:11:45,990 --> 00:11:52,529
the same time generate<font color="#CCCCCC"> the correct code</font>

223
00:11:50,070 --> 00:11:54,360
for doing<font color="#CCCCCC"> this operation</font><font color="#E5E5E5"> so it looks</font>

224
00:11:52,529 --> 00:11:58,790
<font color="#CCCCCC">like you're actually assigning</font><font color="#E5E5E5"> the value</font>

225
00:11:54,360 --> 00:12:02,820
but in reality<font color="#CCCCCC"> it's generating the</font><font color="#E5E5E5"> code</font>

226
00:11:58,790 --> 00:12:05,339
so that's basically<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so summarize a</font>

227
00:12:02,820 --> 00:12:10,290
<font color="#E5E5E5">bit so so we have first rewrite step</font>

228
00:12:05,339 --> 00:12:14,790
then we have type inference<font color="#CCCCCC"> and then we</font>

229
00:12:10,290 --> 00:12:18,390
have the actual<font color="#CCCCCC"> globally</font><font color="#E5E5E5"> so these are</font>

230
00:12:14,790 --> 00:12:20,930
the extension points you have then I

231
00:12:18,390 --> 00:12:25,610
come back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a bit to my problem</font><font color="#CCCCCC"> so</font>

232
00:12:20,930 --> 00:12:28,979
remember we had to integrate<font color="#E5E5E5"> with C C++</font>

233
00:12:25,610 --> 00:12:30,930
<font color="#CCCCCC">and in reality</font><font color="#E5E5E5"> that's going to be a very</font>

234
00:12:28,980 --> 00:12:33,000
often<font color="#CCCCCC"> the case when you're working on</font>

235
00:12:30,930 --> 00:12:36,569
definitely scientific computing you

236
00:12:33,000 --> 00:12:38,910
already have<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> solver</font><font color="#E5E5E5"> that has been</font>

237
00:12:36,570 --> 00:12:42,269
<font color="#E5E5E5">going around university or</font><font color="#CCCCCC"> ring in your</font>

238
00:12:38,910 --> 00:12:44,040
<font color="#E5E5E5">company for a long time you don't want</font>

239
00:12:42,269 --> 00:12:48,240
to throw<font color="#CCCCCC"> all that away because</font><font color="#E5E5E5"> you've</font>

240
00:12:44,040 --> 00:12:50,519
put all your experience in<font color="#CCCCCC"> that starting</font>

241
00:12:48,240 --> 00:12:52,800
from<font color="#CCCCCC"> scratch would be very difficult</font><font color="#E5E5E5"> so</font>

242
00:12:50,519 --> 00:12:57,000
it is important to be able<font color="#E5E5E5"> to integrate</font>

243
00:12:52,800 --> 00:13:01,050
<font color="#E5E5E5">with</font><font color="#CCCCCC"> other languages but luckily we have</font>

244
00:12:57,000 --> 00:13:03,720
this very nice<font color="#CCCCCC"> love triangle</font><font color="#E5E5E5"> we have non</font>

245
00:13:01,050 --> 00:13:07,109
<font color="#E5E5E5">non PI and the C programming language</font>

246
00:13:03,720 --> 00:13:10,949
<font color="#E5E5E5">and they all love each other so let me</font>

247
00:13:07,110 --> 00:13:11,490
clarify a<font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit so for people we</font>

248
00:13:10,949 --> 00:13:15,329
don't know

249
00:13:11,490 --> 00:13:19,589
but numpy internally it stores its data

250
00:13:15,329 --> 00:13:20,489
as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> c contiguous array which means that</font>

251
00:13:19,589 --> 00:13:23,670
you can<font color="#CCCCCC"> I</font>

252
00:13:20,490 --> 00:13:26,760
cities from<font color="#CCCCCC"> see and do all operations</font>

253
00:13:23,670 --> 00:13:29,310
from<font color="#CCCCCC"> see as well and</font><font color="#E5E5E5"> as this very nice</font>

254
00:13:26,760 --> 00:13:34,670
library<font color="#E5E5E5"> the ste types library which you</font>

255
00:13:29,310 --> 00:13:34,670
<font color="#CCCCCC">can use to</font><font color="#E5E5E5"> generate</font><font color="#CCCCCC"> all the student data</font>

256
00:13:34,880 --> 00:13:44,390
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> same thing a bit for a number so</font>

257
00:13:41,190 --> 00:13:52,709
number<font color="#E5E5E5"> has actually quite good</font>

258
00:13:44,390 --> 00:13:57,510
<font color="#E5E5E5">integration</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> C so the</font><font color="#CCCCCC"> CRA</font><font color="#E5E5E5"> for exact</font>

259
00:13:52,709 --> 00:13:59,609
instructions to<font color="#E5E5E5"> wrap a</font><font color="#CCCCCC"> CLA and</font><font color="#E5E5E5"> pretend</font>

260
00:13:57,510 --> 00:14:04,290
as if it was an umpire<font color="#CCCCCC"> race so that</font>

261
00:13:59,610 --> 00:14:08,790
<font color="#CCCCCC">means</font><font color="#E5E5E5"> that you can apply slicing</font><font color="#CCCCCC"> use all</font>

262
00:14:04,290 --> 00:14:14,899
the numpy the numpy operations to be

263
00:14:08,790 --> 00:14:14,899
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to use a c array as as if it was a</font>

264
00:14:14,990 --> 00:14:22,620
non<font color="#CCCCCC"> PRA</font><font color="#E5E5E5"> so this works actually pretty</font>

265
00:14:19,080 --> 00:14:24,600
<font color="#E5E5E5">well then we have the</font><font color="#CCCCCC"> c funk decorator</font>

266
00:14:22,620 --> 00:14:26,550
which is very similar<font color="#CCCCCC"> to the</font>

267
00:14:24,600 --> 00:14:31,620
just-in-time decorated<font color="#CCCCCC"> that we typically</font>

268
00:14:26,550 --> 00:14:34,099
use<font color="#E5E5E5"> when using number but the main</font>

269
00:14:31,620 --> 00:14:37,980
difference there is<font color="#CCCCCC"> that you have to</font>

270
00:14:34,100 --> 00:14:41,640
<font color="#CCCCCC">upfront</font><font color="#E5E5E5"> provide the types that you</font><font color="#CCCCCC"> want</font>

271
00:14:37,980 --> 00:14:44,100
your function to invoke<font color="#E5E5E5"> with which means</font>

272
00:14:41,640 --> 00:14:47,430
<font color="#E5E5E5">that at that</font><font color="#CCCCCC"> time when you</font><font color="#E5E5E5"> use the</font>

273
00:14:44,100 --> 00:14:50,520
decorator<font color="#E5E5E5"> it's going to be already</font>

274
00:14:47,430 --> 00:14:52,649
compiled to machine code<font color="#E5E5E5"> and then you</font>

275
00:14:50,520 --> 00:14:55,350
can get<font color="#E5E5E5"> back an address to the</font><font color="#CCCCCC"> actual</font>

276
00:14:52,649 --> 00:15:00,750
code this underneath so you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> bet can</font>

277
00:14:55,350 --> 00:15:04,680
get back<font color="#E5E5E5"> a pointer to the actual address</font>

278
00:15:00,750 --> 00:15:08,010
<font color="#E5E5E5">in</font><font color="#CCCCCC"> in your</font><font color="#E5E5E5"> memory where the function is</font>

279
00:15:04,680 --> 00:15:10,680
located that's<font color="#E5E5E5"> very nice because now we</font>

280
00:15:08,010 --> 00:15:16,980
<font color="#E5E5E5">can take that pointer give it to a</font>

281
00:15:10,680 --> 00:15:19,439
simulator<font color="#E5E5E5"> and</font><font color="#CCCCCC"> call the the the generated</font>

282
00:15:16,980 --> 00:15:21,270
<font color="#CCCCCC">code from a C program</font><font color="#E5E5E5"> so that's</font>

283
00:15:19,440 --> 00:15:27,630
<font color="#E5E5E5">basically what we also do in our solver</font>

284
00:15:21,270 --> 00:15:30,329
so we pass the pointer<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the function</font>

285
00:15:27,630 --> 00:15:32,900
generated by number to the solver we

286
00:15:30,329 --> 00:15:32,900
also pass

287
00:15:33,140 --> 00:15:39,709
the<font color="#E5E5E5"> pointers to the C++ objects</font><font color="#CCCCCC"> that we</font>

288
00:15:36,500 --> 00:15:48,230
<font color="#E5E5E5">want to call we</font><font color="#CCCCCC"> rub</font><font color="#E5E5E5"> them and then using</font>

289
00:15:39,709 --> 00:15:52,040
<font color="#E5E5E5">CF</font><font color="#CCCCCC"> fi we are able to do called the</font>

290
00:15:48,230 --> 00:15:57,140
functions from<font color="#E5E5E5"> our solver itself so</font>

291
00:15:52,040 --> 00:15:59,480
that's<font color="#E5E5E5"> basically how it</font><font color="#CCCCCC"> works of also of</font>

292
00:15:57,140 --> 00:16:04,300
course<font color="#E5E5E5"> see you are able</font><font color="#CCCCCC"> to call numpy</font>

293
00:15:59,480 --> 00:16:11,720
<font color="#CCCCCC">numb by number using</font><font color="#E5E5E5"> the Python C API</font>

294
00:16:04,300 --> 00:16:14,930
<font color="#E5E5E5">Kim did it</font>

295
00:16:11,720 --> 00:16:20,990
you have also prepared examples they are

296
00:16:14,930 --> 00:16:24,380
on the<font color="#CCCCCC"> website</font><font color="#E5E5E5"> so it will be a bit short</font>

297
00:16:20,990 --> 00:16:26,200
to go to over them but if you<font color="#E5E5E5"> what is in</font>

298
00:16:24,380 --> 00:16:29,779
here<font color="#CCCCCC"> it's very interesting to you</font><font color="#E5E5E5"> I</font>

299
00:16:26,200 --> 00:16:32,589
highly recommend you to go<font color="#CCCCCC"> through there</font>

300
00:16:29,779 --> 00:16:35,480
if something<font color="#CCCCCC"> is not clear contact</font><font color="#E5E5E5"> me</font>

301
00:16:32,589 --> 00:16:40,070
<font color="#CCCCCC">I'll also</font><font color="#E5E5E5"> be around to talk</font><font color="#CCCCCC"> about it so</font>

302
00:16:35,480 --> 00:16:42,410
and of course we<font color="#E5E5E5"> are on still quite some</font>

303
00:16:40,070 --> 00:16:43,430
time<font color="#E5E5E5"> for</font><font color="#CCCCCC"> questions so</font><font color="#E5E5E5"> please if there</font>

304
00:16:42,410 --> 00:16:45,969
are some<font color="#CCCCCC"> questions</font>

305
00:16:43,430 --> 00:16:45,969
go<font color="#E5E5E5"> ahead</font>

306
00:16:52,019 --> 00:16:55,500
no questions

307
00:16:59,440 --> 00:17:07,409
I am<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I will probably not</font><font color="#E5E5E5"> be able to</font>

308
00:17:04,209 --> 00:17:07,409
<font color="#E5E5E5">run on this computer but</font>

309
00:17:30,830 --> 00:17:37,970
so this is basically the example there

310
00:17:34,700 --> 00:17:42,230
are the rewrite so as I said so<font color="#E5E5E5"> there's</font>

311
00:17:37,970 --> 00:17:45,730
a very<font color="#CCCCCC"> very unusual</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> obviously</font>

312
00:17:42,230 --> 00:17:49,970
but so we<font color="#E5E5E5"> have here a very meaningful</font>

313
00:17:45,730 --> 00:17:52,520
<font color="#E5E5E5">variable that we want to be replaced</font><font color="#CCCCCC"> so</font>

314
00:17:49,970 --> 00:17:55,640
as you see<font color="#CCCCCC"> here so you</font><font color="#E5E5E5"> have the function</font>

315
00:17:52,520 --> 00:17:59,690
block and you can<font color="#CCCCCC"> search for instances</font>

316
00:17:55,640 --> 00:18:03,320
of a sign<font color="#E5E5E5"> expression so this is an</font>

317
00:17:59,690 --> 00:18:08,060
assign expression you will search<font color="#CCCCCC"> for</font>

318
00:18:03,320 --> 00:18:10,700
<font color="#E5E5E5">any sign expression that has the target</font>

319
00:18:08,060 --> 00:18:13,760
<font color="#E5E5E5">name so this is the target meaningful</font>

320
00:18:10,700 --> 00:18:18,580
<font color="#CCCCCC">var we return true</font><font color="#E5E5E5"> if we have any</font>

321
00:18:13,760 --> 00:18:18,580
matches<font color="#CCCCCC"> and then you can replace it with</font>

322
00:18:19,600 --> 00:18:30,939
a constant<font color="#CCCCCC"> of 242</font><font color="#E5E5E5"> and then we can run it</font>

323
00:18:26,930 --> 00:18:44,740
<font color="#E5E5E5">and this will believe me it will return</font>

324
00:18:30,940 --> 00:18:44,740
43 because 42 plus<font color="#E5E5E5"> 1 is 43 it's a Mac</font>

325
00:18:46,990 --> 00:18:49,990
yes

326
00:18:57,280 --> 00:19:02,420
so this is an example of the<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that the</font>

327
00:19:02,000 --> 00:19:04,190
point

328
00:19:02,420 --> 00:19:07,580
basically the point example that<font color="#E5E5E5"> I also</font>

329
00:19:04,190 --> 00:19:10,520
explained<font color="#E5E5E5"> during the presentation</font><font color="#CCCCCC"> so we</font>

330
00:19:07,580 --> 00:19:13,210
have here<font color="#CCCCCC"> are my point</font><font color="#E5E5E5"> constructor so</font>

331
00:19:10,520 --> 00:19:13,210
it's my point

332
00:19:14,140 --> 00:19:21,890
<font color="#E5E5E5">so with x and y which are supposed to be</font>

333
00:19:17,960 --> 00:19:25,280
an integer<font color="#E5E5E5"> and here we have the</font><font color="#CCCCCC"> Python</font>

334
00:19:21,890 --> 00:19:27,410
type<font color="#E5E5E5"> 2 that corresponds with this the</font>

335
00:19:25,280 --> 00:19:29,860
number type sorry that corresponds with

336
00:19:27,410 --> 00:19:32,920
the my point constructor

337
00:19:29,860 --> 00:19:46,000
this is a<font color="#E5E5E5"> type</font><font color="#CCCCCC"> error I was talking about</font>

338
00:19:32,920 --> 00:19:46,000
<font color="#CCCCCC">and then we have its</font><font color="#E5E5E5"> scroll</font>

339
00:19:47,550 --> 00:20:03,750
so this is the<font color="#E5E5E5"> binary data</font><font color="#CCCCCC"> layout and</font>

340
00:19:55,110 --> 00:20:06,149
then the actual<font color="#E5E5E5"> implementation when you</font>

341
00:20:03,750 --> 00:20:09,480
only<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is something I</font>

342
00:20:06,150 --> 00:20:11,370
didn't talk<font color="#CCCCCC"> about yet but so you</font><font color="#E5E5E5"> were</font>

343
00:20:09,480 --> 00:20:13,200
<font color="#CCCCCC">actually at this point</font><font color="#E5E5E5"> you can do very</font>

344
00:20:11,370 --> 00:20:17,129
little with<font color="#E5E5E5"> your point so we basically</font>

345
00:20:13,200 --> 00:20:20,610
okay you can<font color="#CCCCCC"> create a point it will be</font>

346
00:20:17,130 --> 00:20:23,760
allocated<font color="#E5E5E5"> in your memory</font><font color="#CCCCCC"> you can add it</font>

347
00:20:20,610 --> 00:20:26,070
to<font color="#E5E5E5"> a</font><font color="#CCCCCC"> list and then you</font><font color="#E5E5E5"> can return the</font>

348
00:20:23,760 --> 00:20:29,790
length of the<font color="#E5E5E5"> list</font><font color="#CCCCCC"> that's obviously very</font>

349
00:20:26,070 --> 00:20:33,720
not<font color="#CCCCCC"> very useful but what you still need</font>

350
00:20:29,790 --> 00:20:36,570
to add is like support<font color="#CCCCCC"> for</font><font color="#E5E5E5"> getting the</font>

351
00:20:33,720 --> 00:20:38,880
attributes<font color="#E5E5E5"> so this is basically here</font>

352
00:20:36,570 --> 00:20:41,520
<font color="#E5E5E5">something I didn't explain during the</font>

353
00:20:38,880 --> 00:20:44,670
presentation<font color="#CCCCCC"> but you can use something</font>

354
00:20:41,520 --> 00:20:47,129
like<font color="#E5E5E5"> a template which allows you</font><font color="#CCCCCC"> to do</font>

355
00:20:44,670 --> 00:20:50,040
inference<font color="#E5E5E5"> for the attributes and</font><font color="#CCCCCC"> also</font>

356
00:20:47,130 --> 00:20:54,960
other instructions so<font color="#E5E5E5"> it's basically</font>

357
00:20:50,040 --> 00:21:01,940
here if my attribute name is either X or

358
00:20:54,960 --> 00:21:06,870
Y<font color="#E5E5E5"> I want to return a type of integer 64</font>

359
00:21:01,940 --> 00:21:11,070
so and then I can again lower this<font color="#E5E5E5"> so</font>

360
00:21:06,870 --> 00:21:15,510
for this<font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> I can generate</font>

361
00:21:11,070 --> 00:21:20,870
again<font color="#E5E5E5"> byte code use the create struct</font>

362
00:21:15,510 --> 00:21:25,710
proxy<font color="#E5E5E5"> the same name so I do get utter on</font>

363
00:21:20,870 --> 00:21:29,340
the actual struct<font color="#E5E5E5"> and this will using</font>

364
00:21:25,710 --> 00:21:35,610
<font color="#E5E5E5">the Builder generate the LLVM code and</font>

365
00:21:29,340 --> 00:21:39,030
then you use you<font color="#CCCCCC"> use utilities from</font>

366
00:21:35,610 --> 00:21:41,750
<font color="#E5E5E5">number to say how it should keep track</font>

367
00:21:39,030 --> 00:21:41,750
<font color="#E5E5E5">of the memory</font>

368
00:21:45,410 --> 00:21:52,200
<font color="#CCCCCC">so that once you've done that you</font><font color="#E5E5E5"> are</font>

369
00:21:49,080 --> 00:21:54,770
able<font color="#E5E5E5"> to access the attributes of your</font>

370
00:21:52,200 --> 00:21:59,929
<font color="#E5E5E5">point</font>

371
00:21:54,770 --> 00:22:14,090
so it will<font color="#E5E5E5"> create using the Lobert yes</font>

372
00:21:59,929 --> 00:22:18,140
there's a<font color="#CCCCCC"> question so the question was</font>

373
00:22:14,090 --> 00:22:21,559
if you can use structured data

374
00:22:18,140 --> 00:22:25,370
structures<font color="#CCCCCC"> for your for your</font><font color="#E5E5E5"> fields the</font>

375
00:22:21,559 --> 00:22:27,170
answer is yes so there's actually on the

376
00:22:25,370 --> 00:22:29,330
<font color="#E5E5E5">the number documentation there are some</font>

377
00:22:27,170 --> 00:22:33,410
<font color="#E5E5E5">examples</font><font color="#CCCCCC"> or at</font><font color="#E5E5E5"> least in a development</font>

378
00:22:29,330 --> 00:22:35,960
<font color="#CCCCCC">branch of the the latest versions number</font>

379
00:22:33,410 --> 00:22:42,080
there is some explanation on how you can

380
00:22:35,960 --> 00:22:43,790
make records and use<font color="#E5E5E5"> so use new types so</font>

381
00:22:42,080 --> 00:22:50,419
basically<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> able to use any type</font>

382
00:22:43,790 --> 00:22:53,559
there and because number supports the

383
00:22:50,420 --> 00:22:57,910
numpy array so it<font color="#E5E5E5"> has a lot of in built</font>

384
00:22:53,559 --> 00:23:01,190
types for<font color="#E5E5E5"> numpy arrays also for</font><font color="#CCCCCC"> cff i</font>

385
00:22:57,910 --> 00:23:04,220
yes<font color="#E5E5E5"> native support for c FF i so which</font>

386
00:23:01,190 --> 00:23:08,990
will take the c FF<font color="#CCCCCC"> i representations</font>

387
00:23:04,220 --> 00:23:13,030
<font color="#E5E5E5">turn those into native number types so</font>

388
00:23:08,990 --> 00:23:15,980
that<font color="#E5E5E5"> it's all able to directly work with</font>

389
00:23:13,030 --> 00:23:18,760
with those types yes another question

390
00:23:15,980 --> 00:23:18,760
<font color="#CCCCCC">narrator back</font>

391
00:23:31,219 --> 00:23:35,899
so the question is about the time that

392
00:23:33,989 --> 00:23:46,349
<font color="#CCCCCC">it takes and the complexity of</font>

393
00:23:35,899 --> 00:23:47,820
understanding<font color="#E5E5E5"> num is that correct</font><font color="#CCCCCC"> well</font>

394
00:23:46,349 --> 00:23:50,458
I'll be honest it<font color="#CCCCCC"> took me a time to</font>

395
00:23:47,820 --> 00:23:52,439
figure<font color="#CCCCCC"> out how</font><font color="#E5E5E5"> numb</font><font color="#CCCCCC"> worked</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this one</font>

396
00:23:50,459 --> 00:23:58,139
<font color="#CCCCCC">of</font><font color="#E5E5E5"> us one of the reasons why I wanted to</font>

397
00:23:52,440 --> 00:24:01,799
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about it today</font><font color="#E5E5E5"> so definitely did so</font>

398
00:23:58,139 --> 00:24:03,359
the<font color="#E5E5E5"> last half year they've been putting</font>

399
00:24:01,799 --> 00:24:07,139
<font color="#E5E5E5">a lot of effort in the documentation but</font>

400
00:24:03,359 --> 00:24:11,999
before<font color="#E5E5E5"> the documentation on this was</font>

401
00:24:07,139 --> 00:24:14,369
sparse so<font color="#E5E5E5"> but what is very nice about it</font>

402
00:24:11,999 --> 00:24:17,219
so<font color="#CCCCCC"> numba uses all</font><font color="#E5E5E5"> this also to implement</font>

403
00:24:14,369 --> 00:24:19,948
number itself<font color="#E5E5E5"> so which is also always a</font>

404
00:24:17,219 --> 00:24:21,419
very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea to build</font><font color="#E5E5E5"> your and use</font>

405
00:24:19,949 --> 00:24:24,839
your own<font color="#E5E5E5"> stuff to build your own stuff</font>

406
00:24:21,419 --> 00:24:27,599
so so that means<font color="#E5E5E5"> that you can look at</font><font color="#CCCCCC"> a</font>

407
00:24:24,839 --> 00:24:32,099
<font color="#E5E5E5">code so as</font><font color="#CCCCCC"> I was talking about an umpire</font>

408
00:24:27,599 --> 00:24:34,589
support<font color="#CCCCCC"> its advanced because numpy is</font>

409
00:24:32,099 --> 00:24:37,109
quite a complex<font color="#CCCCCC"> thing so building a</font>

410
00:24:34,589 --> 00:24:40,408
<font color="#E5E5E5">just-in-time compiler for it will take a</font>

411
00:24:37,109 --> 00:24:44,399
lot of time but you<font color="#CCCCCC"> can really use all</font>

412
00:24:40,409 --> 00:24:47,699
<font color="#E5E5E5">that work and</font><font color="#CCCCCC"> you will by reading that</font>

413
00:24:44,399 --> 00:24:52,399
<font color="#CCCCCC">close by reading</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> coach you learn</font>

414
00:24:47,699 --> 00:24:55,319
how to use<font color="#CCCCCC"> all</font><font color="#E5E5E5"> those things</font><font color="#CCCCCC"> as well so</font>

415
00:24:52,399 --> 00:24:59,849
<font color="#E5E5E5">so the number project itself is</font><font color="#CCCCCC"> a very</font>

416
00:24:55,319 --> 00:25:01,979
good documentation<font color="#E5E5E5"> for for number of on</font>

417
00:24:59,849 --> 00:25:04,259
how to use<font color="#E5E5E5"> number so it's actually if</font>

418
00:25:01,979 --> 00:25:10,379
you<font color="#E5E5E5"> are really interested</font><font color="#CCCCCC"> in using</font><font color="#E5E5E5"> this</font>

419
00:25:04,259 --> 00:25:13,409
<font color="#E5E5E5">I propose really that you get into</font>

420
00:25:10,379 --> 00:25:16,439
reading<font color="#E5E5E5"> the number code so okay my time</font>

421
00:25:13,409 --> 00:25:17,819
is up so<font color="#E5E5E5"> thank you all</font><font color="#CCCCCC"> for listening if</font>

422
00:25:16,440 --> 00:25:20,310
there's any follow-up questions I'll be

423
00:25:17,819 --> 00:25:29,569
glad<font color="#E5E5E5"> to talk to you</font>

424
00:25:20,310 --> 00:25:29,569
[Applause]

