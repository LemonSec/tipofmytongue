1
00:00:44,310 --> 00:00:57,690
<font color="#E5E5E5">all right so</font><font color="#CCCCCC"> I'm Ron Festa I work at</font>

2
00:00:55,570 --> 00:01:00,930
Oracle and I'm the technical<font color="#CCCCCC"> lead for</font>

3
00:00:57,690 --> 00:01:05,700
<font color="#CCCCCC">project</font><font color="#E5E5E5"> bloom which is</font><font color="#CCCCCC"> about adding</font>

4
00:01:00,930 --> 00:01:08,049
fibers and continuations<font color="#E5E5E5"> to Java and JVM</font>

5
00:01:05,700 --> 00:01:11,079
<font color="#CCCCCC">and that's what I'm</font><font color="#E5E5E5"> gonna talk</font><font color="#CCCCCC"> about</font>

6
00:01:08,049 --> 00:01:14,649
today<font color="#CCCCCC"> everything</font><font color="#E5E5E5"> we're gonna say for</font>

7
00:01:11,079 --> 00:01:16,658
<font color="#E5E5E5">we're looking statements so for those of</font>

8
00:01:14,649 --> 00:01:19,840
<font color="#E5E5E5">you who are not familiar familiar with</font>

9
00:01:16,659 --> 00:01:23,799
<font color="#CCCCCC">project bloom</font><font color="#E5E5E5"> we first review</font><font color="#CCCCCC"> why we</font>

10
00:01:19,840 --> 00:01:25,780
need it<font color="#CCCCCC"> why we believe we need it so the</font>

11
00:01:23,799 --> 00:01:28,749
<font color="#E5E5E5">main problem</font><font color="#CCCCCC"> domain is concurrent</font>

12
00:01:25,780 --> 00:01:31,479
<font color="#E5E5E5">applications</font><font color="#CCCCCC"> normally servers</font><font color="#E5E5E5"> that serve</font>

13
00:01:28,749 --> 00:01:34,030
a lot of concurrent requests<font color="#E5E5E5"> and right</font>

14
00:01:31,479 --> 00:01:37,810
now developers<font color="#E5E5E5"> are faced with a binary</font>

15
00:01:34,030 --> 00:01:41,950
choice either<font color="#CCCCCC"> rights very simple</font>

16
00:01:37,810 --> 00:01:44,310
straightforward code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's</font>

17
00:01:41,950 --> 00:01:47,679
blocking<font color="#E5E5E5"> code like ordinary servlets</font>

18
00:01:44,310 --> 00:01:49,779
that pretty much assigns a kernel thread

19
00:01:47,679 --> 00:01:52,600
for the<font color="#CCCCCC"> duration of some requests or</font>

20
00:01:49,779 --> 00:01:55,929
some operation<font color="#CCCCCC"> but the problem with that</font>

21
00:01:52,600 --> 00:01:58,630
is<font color="#CCCCCC"> that modern machines and modern</font>

22
00:01:55,929 --> 00:02:00,609
operating systems<font color="#E5E5E5"> can only support a</font>

23
00:01:58,630 --> 00:02:02,979
much smaller<font color="#CCCCCC"> number of kernel threads</font>

24
00:02:00,609 --> 00:02:04,779
<font color="#E5E5E5">than the number of open TCP connections</font>

25
00:02:02,979 --> 00:02:08,288
they have<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that becomes a very</font>

26
00:02:04,779 --> 00:02:12,250
limiting factor or other developers go

27
00:02:08,288 --> 00:02:16,179
the async route and use callbacks or

28
00:02:12,250 --> 00:02:17,290
completable futures or<font color="#E5E5E5"> rx Java or any</font><font color="#CCCCCC"> of</font>

29
00:02:16,180 --> 00:02:20,400
the many

30
00:02:17,290 --> 00:02:24,099
asynchronous<font color="#CCCCCC"> planta</font>

31
00:02:20,400 --> 00:02:27,250
libraries for the<font color="#CCCCCC"> JDK for Java in</font><font color="#E5E5E5"> other</font>

32
00:02:24,099 --> 00:02:29,379
languages<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> very scalable but</font>

33
00:02:27,250 --> 00:02:32,200
<font color="#E5E5E5">it's harder to write more importantly</font>

34
00:02:29,379 --> 00:02:33,370
it's harder to debug<font color="#E5E5E5"> you lose context if</font>

35
00:02:32,200 --> 00:02:35,410
<font color="#E5E5E5">you get an</font><font color="#CCCCCC"> exception you don't see</font>

36
00:02:33,370 --> 00:02:39,370
exactly<font color="#E5E5E5"> the context of the computation</font>

37
00:02:35,410 --> 00:02:41,620
you are<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very hard to profile for</font>

38
00:02:39,370 --> 00:02:43,720
the same reason<font color="#CCCCCC"> and one of the</font><font color="#E5E5E5"> biggest</font>

39
00:02:41,620 --> 00:02:45,940
issues is<font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> virtually non</font>

40
00:02:43,720 --> 00:02:48,060
interoperable with<font color="#CCCCCC"> legacy code or other</font>

41
00:02:45,940 --> 00:02:49,959
<font color="#E5E5E5">code that say you you must choose either</font>

42
00:02:48,060 --> 00:02:52,870
<font color="#E5E5E5">synchronous or asynchronous and it's</font>

43
00:02:49,959 --> 00:02:55,269
very hard<font color="#CCCCCC"> to mix the two so we want to</font>

44
00:02:52,870 --> 00:02:57,640
help<font color="#E5E5E5"> people enjoy</font><font color="#CCCCCC"> the best</font><font color="#E5E5E5"> of both</font>

45
00:02:55,269 --> 00:02:58,840
<font color="#CCCCCC">worlds so the simplest way to do is it's</font>

46
00:02:57,640 --> 00:03:02,858
<font color="#CCCCCC">just to increase</font><font color="#E5E5E5"> the number of threads</font>

47
00:02:58,840 --> 00:03:04,900
that<font color="#E5E5E5"> they can run but</font><font color="#CCCCCC"> that means that we</font>

48
00:03:02,859 --> 00:03:08,109
no longer<font color="#E5E5E5"> rely in the operating system</font>

49
00:03:04,900 --> 00:03:10,180
for threads<font color="#CCCCCC"> we create</font><font color="#E5E5E5"> lightweight</font>

50
00:03:08,109 --> 00:03:12,579
threads<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> runtime we call them</font>

51
00:03:10,180 --> 00:03:15,220
fibers but sometimes I've just<font color="#E5E5E5"> referred</font>

52
00:03:12,579 --> 00:03:16,780
to<font color="#E5E5E5"> them as lightweight threads</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

53
00:03:15,220 --> 00:03:19,030
way you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> have as many threads as you</font>

54
00:03:16,780 --> 00:03:23,829
want<font color="#E5E5E5"> and the reason it helps is because</font>

55
00:03:19,030 --> 00:03:26,349
you can now<font color="#CCCCCC"> represent</font><font color="#E5E5E5"> the domain unit of</font>

56
00:03:23,829 --> 00:03:28,829
concurrency<font color="#E5E5E5"> like a session</font><font color="#CCCCCC"> or request or</font>

57
00:03:26,349 --> 00:03:35,638
user with a software unit of<font color="#E5E5E5"> concurrency</font>

58
00:03:28,829 --> 00:03:37,959
so that makes the<font color="#E5E5E5"> code much simpler</font><font color="#CCCCCC"> so</font>

59
00:03:35,639 --> 00:03:39,489
from the user<font color="#E5E5E5"> from the programmers</font>

60
00:03:37,959 --> 00:03:40,840
perspective<font color="#E5E5E5"> the programming model is</font>

61
00:03:39,489 --> 00:03:43,180
<font color="#E5E5E5">just like ordinary threads</font>

62
00:03:40,840 --> 00:03:46,030
it looks blocking<font color="#CCCCCC"> looks synchronous but</font>

63
00:03:43,180 --> 00:03:47,470
to the operating<font color="#CCCCCC"> system it appears as if</font>

64
00:03:46,030 --> 00:03:50,380
you were writing<font color="#CCCCCC"> asynchronous code so if</font>

65
00:03:47,470 --> 00:03:52,329
you do an i/o operation<font color="#CCCCCC"> to you it</font><font color="#E5E5E5"> seems</font>

66
00:03:50,380 --> 00:03:56,220
like<font color="#E5E5E5"> blocking but under the covers</font><font color="#CCCCCC"> it's</font>

67
00:03:52,329 --> 00:03:59,560
going to use<font color="#E5E5E5"> the asynchronous i/o of the</font>

68
00:03:56,220 --> 00:04:01,810
of the operating system<font color="#E5E5E5"> and it's not</font>

69
00:03:59,560 --> 00:04:03,190
<font color="#CCCCCC">just helpful because you can</font><font color="#E5E5E5"> create as</font>

70
00:04:01,810 --> 00:04:05,769
many threads and<font color="#E5E5E5"> many of these</font>

71
00:04:03,190 --> 00:04:08,250
<font color="#CCCCCC">lightweight threads as you like but also</font>

72
00:04:05,769 --> 00:04:11,530
we're<font color="#CCCCCC"> now trying to</font><font color="#E5E5E5"> make it even easier</font>

73
00:04:08,250 --> 00:04:14,470
by<font color="#E5E5E5"> helping you weave all these fibers</font>

74
00:04:11,530 --> 00:04:17,079
together into some<font color="#E5E5E5"> coherent whole</font><font color="#CCCCCC"> and</font>

75
00:04:14,470 --> 00:04:19,810
<font color="#CCCCCC">make</font><font color="#E5E5E5"> it easier to organize concurrency</font>

76
00:04:17,079 --> 00:04:23,830
<font color="#CCCCCC">as you'll see so before we get to these</font>

77
00:04:19,810 --> 00:04:26,320
these<font color="#E5E5E5"> fibers</font><font color="#CCCCCC"> we start with a lower-level</font>

78
00:04:23,830 --> 00:04:29,770
building block that's now<font color="#E5E5E5"> built in a</font>

79
00:04:26,320 --> 00:04:31,000
<font color="#E5E5E5">prototype into hotspot</font><font color="#CCCCCC"> and that's called</font>

80
00:04:29,770 --> 00:04:34,210
continuation so continuation

81
00:04:31,000 --> 00:04:35,650
are a low-level construct<font color="#E5E5E5"> as application</font>

82
00:04:34,210 --> 00:04:37,570
<font color="#CCCCCC">developers are not expected to use it</font>

83
00:04:35,650 --> 00:04:40,239
but it's used by<font color="#E5E5E5"> fibers and</font><font color="#CCCCCC"> maybe other</font>

84
00:04:37,570 --> 00:04:42,159
constructs<font color="#CCCCCC"> we'll add later on but if you</font>

85
00:04:40,240 --> 00:04:44,200
were to use them<font color="#E5E5E5"> directly this is what</font>

86
00:04:42,160 --> 00:04:47,080
they<font color="#E5E5E5"> would look like</font>

87
00:04:44,200 --> 00:04:48,820
so they're<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> they're like a</font>

88
00:04:47,080 --> 00:04:51,400
runnable<font color="#E5E5E5"> so they don't have any</font>

89
00:04:48,820 --> 00:04:51,820
intrinsic notion of running<font color="#CCCCCC"> things in</font>

90
00:04:51,400 --> 00:04:53,530
<font color="#E5E5E5">parallel</font>

91
00:04:51,820 --> 00:04:57,070
<font color="#E5E5E5">so they're a runnable they run in line</font>

92
00:04:53,530 --> 00:04:59,320
but<font color="#E5E5E5"> runnable runs when you started to</font>

93
00:04:57,070 --> 00:05:01,810
completion<font color="#E5E5E5"> so until it</font><font color="#CCCCCC"> returns normally</font>

94
00:04:59,320 --> 00:05:03,219
of frozen exception with continuations

95
00:05:01,810 --> 00:05:06,790
you have<font color="#E5E5E5"> another option</font><font color="#CCCCCC"> a continuation</font>

96
00:05:03,220 --> 00:05:08,919
can say yield and what that means is

97
00:05:06,790 --> 00:05:11,470
that it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> return to the caller</font>

98
00:05:08,919 --> 00:05:13,990
but next<font color="#E5E5E5"> time</font><font color="#CCCCCC"> you run it instead</font><font color="#E5E5E5"> of</font>

99
00:05:11,470 --> 00:05:16,090
<font color="#E5E5E5">starting from the</font><font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> it remembers</font>

100
00:05:13,990 --> 00:05:19,210
its state and continues from<font color="#E5E5E5"> where it</font>

101
00:05:16,090 --> 00:05:21,219
left<font color="#E5E5E5"> off</font><font color="#CCCCCC"> so in this example we have</font><font color="#E5E5E5"> this</font>

102
00:05:19,210 --> 00:05:24,039
loop that<font color="#CCCCCC"> occasionally yields and we</font>

103
00:05:21,220 --> 00:05:26,020
create this continuation<font color="#CCCCCC"> and now we loop</font>

104
00:05:24,040 --> 00:05:28,600
and<font color="#E5E5E5"> we can ask whether it actually</font>

105
00:05:26,020 --> 00:05:30,370
<font color="#E5E5E5">completed or just yielded and every time</font>

106
00:05:28,600 --> 00:05:34,240
you run it is going<font color="#E5E5E5"> to continue</font><font color="#CCCCCC"> from the</font>

107
00:05:30,370 --> 00:05:37,090
last yield<font color="#E5E5E5"> point</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> scope parameter</font>

108
00:05:34,240 --> 00:05:39,010
<font color="#E5E5E5">there just tells it helps us nest</font>

109
00:05:37,090 --> 00:05:41,820
<font color="#E5E5E5">continuations inside one</font><font color="#CCCCCC"> another and to</font>

110
00:05:39,010 --> 00:05:44,409
tell which one<font color="#E5E5E5"> you want to go back to</font>

111
00:05:41,820 --> 00:05:45,969
the very important thing here is<font color="#CCCCCC"> that</font>

112
00:05:44,410 --> 00:05:47,860
<font color="#E5E5E5">even though this appears in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

113
00:05:45,970 --> 00:05:52,120
method<font color="#CCCCCC"> in the same</font><font color="#E5E5E5"> lambda expression</font>

114
00:05:47,860 --> 00:05:53,440
here this can be<font color="#E5E5E5"> deep in the stack</font><font color="#CCCCCC"> so</font>

115
00:05:52,120 --> 00:05:55,240
<font color="#CCCCCC">you can call</font><font color="#E5E5E5"> other methods</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> other</font>

116
00:05:53,440 --> 00:05:59,530
<font color="#CCCCCC">methods and somewhere</font><font color="#E5E5E5"> down the line</font><font color="#CCCCCC"> that</font>

117
00:05:55,240 --> 00:06:02,260
would call yield<font color="#CCCCCC"> so to do that so this</font>

118
00:05:59,530 --> 00:06:06,190
<font color="#E5E5E5">is currently the the API</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the more or</font>

119
00:06:02,260 --> 00:06:07,690
less<font color="#E5E5E5"> the</font><font color="#CCCCCC"> API and</font><font color="#E5E5E5"> the prototype so we've</font>

120
00:06:06,190 --> 00:06:11,320
<font color="#E5E5E5">seen all these these are the main</font>

121
00:06:07,690 --> 00:06:14,620
operations<font color="#CCCCCC"> because you can yield deep</font><font color="#E5E5E5"> in</font>

122
00:06:11,320 --> 00:06:17,140
the stack and<font color="#E5E5E5"> we need to remember the</font>

123
00:06:14,620 --> 00:06:21,070
<font color="#CCCCCC">state</font><font color="#E5E5E5"> you were so that you can continue</font>

124
00:06:17,140 --> 00:06:22,780
<font color="#E5E5E5">it later</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a continuation needs to</font>

125
00:06:21,070 --> 00:06:24,280
<font color="#E5E5E5">capture a portion</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the stack so</font>

126
00:06:22,780 --> 00:06:26,289
basically a continuation has its own

127
00:06:24,280 --> 00:06:28,900
stack and you<font color="#E5E5E5"> can imagine that</font><font color="#CCCCCC"> when you</font>

128
00:06:26,290 --> 00:06:30,700
continue<font color="#E5E5E5"> it is as if the stack of the</font>

129
00:06:28,900 --> 00:06:32,770
<font color="#CCCCCC">continuation gets appended to the</font>

130
00:06:30,700 --> 00:06:35,860
current thread stack and once you yield

131
00:06:32,770 --> 00:06:38,448
<font color="#E5E5E5">it gets moved to the side</font><font color="#CCCCCC"> again so we</font>

132
00:06:35,860 --> 00:06:41,870
also have some methods to<font color="#E5E5E5"> walk the</font>

133
00:06:38,449 --> 00:06:46,419
a continuation<font color="#CCCCCC"> snack so far the example</font>

134
00:06:41,870 --> 00:06:50,599
I've showed is a kind<font color="#E5E5E5"> of a collaborative</font>

135
00:06:46,419 --> 00:06:54,229
yielding<font color="#CCCCCC"> that the continuation has to</font>

136
00:06:50,599 --> 00:06:56,090
<font color="#E5E5E5">request to yield itself</font><font color="#CCCCCC"> but a</font><font color="#E5E5E5"> something</font>

137
00:06:54,229 --> 00:06:58,669
very<font color="#CCCCCC"> experimental we just added is that</font>

138
00:06:56,090 --> 00:07:00,739
<font color="#CCCCCC">from the outside</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> make</font>

139
00:06:58,669 --> 00:07:04,039
the continuation yield<font color="#CCCCCC"> it's that's going</font>

140
00:07:00,740 --> 00:07:06,110
to happen<font color="#E5E5E5"> at the next safe</font><font color="#CCCCCC"> point so this</font>

141
00:07:04,039 --> 00:07:09,080
helps if you if you want<font color="#E5E5E5"> to do</font>

142
00:07:06,110 --> 00:07:12,020
preemption<font color="#E5E5E5"> finally we have some some</font>

143
00:07:09,080 --> 00:07:14,568
technical<font color="#CCCCCC"> limitations</font><font color="#E5E5E5"> that do not allow</font>

144
00:07:12,020 --> 00:07:16,370
<font color="#CCCCCC">us to yield</font><font color="#E5E5E5"> at any point in time there</font>

145
00:07:14,569 --> 00:07:20,810
are<font color="#E5E5E5"> some states that we don't allow</font>

146
00:07:16,370 --> 00:07:23,060
yielding in<font color="#E5E5E5"> one example is that if you</font>

147
00:07:20,810 --> 00:07:24,529
run inside<font color="#CCCCCC"> the continuation and you have</font>

148
00:07:23,060 --> 00:07:27,169
some<font color="#CCCCCC"> Java code that</font><font color="#E5E5E5"> then calls out to</font>

149
00:07:24,529 --> 00:07:29,719
<font color="#E5E5E5">native code through J&I which then calls</font>

150
00:07:27,169 --> 00:07:31,370
<font color="#E5E5E5">back into</font><font color="#CCCCCC"> java and then you try to yield</font>

151
00:07:29,719 --> 00:07:33,439
<font color="#E5E5E5">that would mean</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> would be a</font>

152
00:07:31,370 --> 00:07:34,729
native frame on the stack<font color="#E5E5E5"> on the</font>

153
00:07:33,439 --> 00:07:37,639
configuration stack when you yield and

154
00:07:34,729 --> 00:07:38,930
<font color="#E5E5E5">we do not allow yielding at that time</font><font color="#CCCCCC"> we</font>

155
00:07:37,639 --> 00:07:42,250
could<font color="#E5E5E5"> we say that</font><font color="#CCCCCC"> the continuation is</font>

156
00:07:38,930 --> 00:07:45,139
pinned<font color="#E5E5E5"> and by default</font><font color="#CCCCCC"> the continuation</font>

157
00:07:42,250 --> 00:07:46,969
<font color="#CCCCCC">so when that happens</font><font color="#E5E5E5"> this a method is</font>

158
00:07:45,139 --> 00:07:49,039
going<font color="#E5E5E5"> to get called in by default it's</font>

159
00:07:46,969 --> 00:07:51,110
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> throw an exception that's not</font>

160
00:07:49,039 --> 00:07:57,529
what happens with fibers because fibers

161
00:07:51,110 --> 00:07:59,839
overwrite<font color="#CCCCCC"> that</font><font color="#E5E5E5"> some missing features we</font>

162
00:07:57,529 --> 00:08:01,250
so<font color="#E5E5E5"> configuration is a very</font><font color="#CCCCCC"> low-level</font>

163
00:07:59,839 --> 00:08:02,419
constructor you can build some more

164
00:08:01,250 --> 00:08:04,639
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> on top of them like</font>

165
00:08:02,419 --> 00:08:06,729
integrations<font color="#CCCCCC"> that can pass</font><font color="#E5E5E5"> values from</font>

166
00:08:04,639 --> 00:08:09,259
the run method<font color="#E5E5E5"> to the yield point see</font>

167
00:08:06,729 --> 00:08:10,699
<font color="#E5E5E5">you can say run with some with some</font>

168
00:08:09,259 --> 00:08:13,150
value that would<font color="#E5E5E5"> be returned from the</font>

169
00:08:10,699 --> 00:08:16,819
yield when the<font color="#E5E5E5"> continuation is continued</font>

170
00:08:13,150 --> 00:08:19,219
<font color="#E5E5E5">we may want to allow them</font><font color="#CCCCCC"> to be cloned</font>

171
00:08:16,819 --> 00:08:21,349
<font color="#E5E5E5">so a continuation remembers its own</font>

172
00:08:19,219 --> 00:08:24,319
<font color="#E5E5E5">state</font><font color="#CCCCCC"> and you continue the computation</font>

173
00:08:21,349 --> 00:08:28,430
<font color="#CCCCCC">but once you continue it it states</font><font color="#E5E5E5"> its</font>

174
00:08:24,319 --> 00:08:30,080
state mutates<font color="#CCCCCC"> so but if you clone it you</font>

175
00:08:28,430 --> 00:08:31,789
can remember where<font color="#E5E5E5"> you were and go back</font>

176
00:08:30,080 --> 00:08:33,140
in time and try<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same computation</font>

177
00:08:31,789 --> 00:08:35,659
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the same point multiple times</font>

178
00:08:33,140 --> 00:08:37,039
<font color="#E5E5E5">another thing we want to do is serialize</font>

179
00:08:35,659 --> 00:08:39,198
<font color="#E5E5E5">continuation so you can do some</font>

180
00:08:37,039 --> 00:08:41,229
computation<font color="#CCCCCC"> stop it send</font><font color="#E5E5E5"> it maybe to</font>

181
00:08:39,198 --> 00:08:45,560
another<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> and continue it there</font>

182
00:08:41,229 --> 00:08:47,750
<font color="#CCCCCC">and this sort of annoying technical</font>

183
00:08:45,560 --> 00:08:50,390
limitation we have right now is<font color="#E5E5E5"> that if</font>

184
00:08:47,750 --> 00:08:52,100
inside the continuation you're currently

185
00:08:50,390 --> 00:08:55,640
holding on to a native<font color="#CCCCCC"> mono</font>

186
00:08:52,100 --> 00:08:58,850
with a synchronized method or or a

187
00:08:55,640 --> 00:09:00,740
synchronized block<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> also pinned</font><font color="#CCCCCC"> so</font>

188
00:08:58,850 --> 00:09:04,420
that is<font color="#E5E5E5"> something that you</font><font color="#CCCCCC"> cannot</font>

189
00:09:00,740 --> 00:09:04,420
currently yield while<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are holding</font>

190
00:09:06,490 --> 00:09:13,700
okay so we have continuations<font color="#CCCCCC"> and that's</font>

191
00:09:10,610 --> 00:09:15,709
the only<font color="#E5E5E5"> thing that the VM provides</font><font color="#CCCCCC"> we</font>

192
00:09:13,700 --> 00:09:18,230
build fibers entirely in the<font color="#CCCCCC"> JDK</font>

193
00:09:15,709 --> 00:09:22,069
libraries on top of them<font color="#E5E5E5"> by combining</font>

194
00:09:18,230 --> 00:09:25,339
continuations<font color="#CCCCCC"> with</font><font color="#E5E5E5"> java schedulers</font><font color="#CCCCCC"> right</font>

195
00:09:22,070 --> 00:09:27,410
now we're using<font color="#CCCCCC"> fork/join pool and a</font>

196
00:09:25,339 --> 00:09:29,149
fiber or<font color="#E5E5E5"> even if you think about any</font>

197
00:09:27,410 --> 00:09:31,640
<font color="#CCCCCC">kind of thread is really</font><font color="#E5E5E5"> something that</font>

198
00:09:29,149 --> 00:09:34,040
<font color="#CCCCCC">has so each fiber has a continuation has</font>

199
00:09:31,640 --> 00:09:36,560
a scheduler<font color="#CCCCCC"> you need the</font><font color="#E5E5E5"> ability to</font>

200
00:09:34,040 --> 00:09:38,660
<font color="#E5E5E5">pause the computation and</font><font color="#CCCCCC"> you need some</font>

201
00:09:36,560 --> 00:09:40,430
ability to<font color="#E5E5E5"> assign the computation to</font>

202
00:09:38,660 --> 00:09:42,439
different<font color="#E5E5E5"> CPU core is when it's runnable</font>

203
00:09:40,430 --> 00:09:44,359
what if so if it's waiting<font color="#E5E5E5"> for something</font>

204
00:09:42,440 --> 00:09:48,649
he's<font color="#E5E5E5"> going to continue</font><font color="#CCCCCC"> it and to show</font>

205
00:09:44,360 --> 00:09:51,890
how that's done this<font color="#E5E5E5"> is a simplification</font>

206
00:09:48,649 --> 00:09:54,620
a gross simplification of the code in

207
00:09:51,890 --> 00:09:56,360
the current<font color="#CCCCCC"> prototype so I said that</font>

208
00:09:54,620 --> 00:09:58,700
every fiber has<font color="#E5E5E5"> a continuation in the</font>

209
00:09:56,360 --> 00:10:01,640
scheduler and if you're familiar<font color="#CCCCCC"> with</font>

210
00:09:58,700 --> 00:10:04,730
the<font color="#E5E5E5"> job</font><font color="#CCCCCC"> util concurrent constructs</font><font color="#E5E5E5"> for</font>

211
00:10:01,640 --> 00:10:07,579
example it has locks<font color="#E5E5E5"> so every time you</font>

212
00:10:04,730 --> 00:10:10,459
grab a lot if you<font color="#E5E5E5"> try to grab a lock and</font>

213
00:10:07,579 --> 00:10:12,319
it's not<font color="#E5E5E5"> available</font><font color="#CCCCCC"> eventually what's</font>

214
00:10:10,459 --> 00:10:15,050
going<font color="#CCCCCC"> to happen is that this method</font><font color="#E5E5E5"> this</font>

215
00:10:12,320 --> 00:10:16,910
<font color="#E5E5E5">is today the the the JDK that's out</font>

216
00:10:15,050 --> 00:10:18,319
there it's going<font color="#CCCCCC"> to call a</font><font color="#E5E5E5"> classical</font>

217
00:10:16,910 --> 00:10:21,290
<font color="#E5E5E5">lock support and it's</font><font color="#CCCCCC"> going to get to a</font>

218
00:10:18,320 --> 00:10:25,490
method called<font color="#E5E5E5"> Park in the prototype so</font>

219
00:10:21,290 --> 00:10:29,630
this<font color="#E5E5E5"> it in the prototype first we check</font>

220
00:10:25,490 --> 00:10:31,670
to see<font color="#CCCCCC"> if whether we're running in an</font>

221
00:10:29,630 --> 00:10:33,170
ordinary thread or a fiber<font color="#E5E5E5"> if we're on</font>

222
00:10:31,670 --> 00:10:35,630
your ordinary<font color="#E5E5E5"> thread the same thing as</font>

223
00:10:33,170 --> 00:10:38,060
happens today<font color="#CCCCCC"> will happen we call unsafe</font>

224
00:10:35,630 --> 00:10:40,520
<font color="#E5E5E5">top part and</font><font color="#CCCCCC"> that asks the operating</font>

225
00:10:38,060 --> 00:10:43,339
system to<font color="#E5E5E5"> block the thread but if it's a</font>

226
00:10:40,520 --> 00:10:46,970
fiber<font color="#E5E5E5"> what we do is we just yield its</font>

227
00:10:43,339 --> 00:10:49,399
<font color="#CCCCCC">continuation so part or fibers</font><font color="#E5E5E5"> if you</font>

228
00:10:46,970 --> 00:10:52,550
try to block<font color="#E5E5E5"> what happens is really that</font>

229
00:10:49,399 --> 00:10:54,380
<font color="#CCCCCC">there</font><font color="#E5E5E5"> continuation is yielded and if</font>

230
00:10:52,550 --> 00:10:57,800
you're now holding<font color="#E5E5E5"> into the lock onto</font>

231
00:10:54,380 --> 00:11:01,130
<font color="#E5E5E5">the lock and you want to release</font><font color="#CCCCCC"> it what</font>

232
00:10:57,800 --> 00:11:03,800
you do then is you<font color="#E5E5E5"> see</font><font color="#CCCCCC"> who's</font><font color="#E5E5E5"> waiting for</font>

233
00:11:01,130 --> 00:11:05,330
<font color="#CCCCCC">it and you wait the next</font><font color="#E5E5E5"> guy off and you</font>

234
00:11:03,800 --> 00:11:07,219
do that<font color="#E5E5E5"> by calling</font><font color="#CCCCCC"> unpark</font>

235
00:11:05,330 --> 00:11:09,680
so the same thing<font color="#CCCCCC"> happens here if it is</font>

236
00:11:07,220 --> 00:11:11,959
a kernel thread it's going to ask the

237
00:11:09,680 --> 00:11:14,660
operating<font color="#CCCCCC"> system to wake it up but if</font>

238
00:11:11,959 --> 00:11:17,089
it's a fiber<font color="#E5E5E5"> it's just going</font><font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> the</font>

239
00:11:14,660 --> 00:11:20,060
for the fiber scheduler<font color="#E5E5E5"> and just</font><font color="#CCCCCC"> submit</font>

240
00:11:17,089 --> 00:11:21,440
the<font color="#E5E5E5"> fibers continuation to the scheduler</font>

241
00:11:20,060 --> 00:11:25,399
and that means that it's going to<font color="#E5E5E5"> get</font>

242
00:11:21,440 --> 00:11:26,930
put in some scheduler<font color="#CCCCCC"> queue and when the</font>

243
00:11:25,399 --> 00:11:28,579
scheduler says<font color="#CCCCCC"> ok now it's time to run</font>

244
00:11:26,930 --> 00:11:30,349
<font color="#E5E5E5">it's gonna call the run method but then</font>

245
00:11:28,579 --> 00:11:32,120
it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> continue the continuation</font>

246
00:11:30,350 --> 00:11:36,490
for liftoff and it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> behave</font>

247
00:11:32,120 --> 00:11:39,380
just<font color="#CCCCCC"> like threads do with</font><font color="#E5E5E5"> walking so</font>

248
00:11:36,490 --> 00:11:41,120
fibers right now<font color="#CCCCCC"> the</font><font color="#E5E5E5"> API and the</font>

249
00:11:39,380 --> 00:11:42,649
prototype<font color="#E5E5E5"> is deliberately minimal</font>

250
00:11:41,120 --> 00:11:45,050
explain why later

251
00:11:42,649 --> 00:11:48,079
this is how you can start and start a

252
00:11:45,050 --> 00:11:50,569
fiber<font color="#CCCCCC"> currently fibers can also return</font>

253
00:11:48,079 --> 00:11:52,310
values<font color="#E5E5E5"> so you can wait for them to</font>

254
00:11:50,570 --> 00:11:56,630
terminate and that would<font color="#E5E5E5"> return the</font>

255
00:11:52,310 --> 00:11:58,640
<font color="#CCCCCC">results the all</font><font color="#E5E5E5"> the classes</font><font color="#CCCCCC"> in Java till</font>

256
00:11:56,630 --> 00:12:00,890
concurrent<font color="#CCCCCC"> in the prototype have been</font>

257
00:11:58,640 --> 00:12:03,230
adapted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work with fibers all of the</font>

258
00:12:00,890 --> 00:12:08,209
i/o<font color="#E5E5E5"> in the JDK has</font><font color="#CCCCCC"> been adapted</font><font color="#E5E5E5"> with a</font>

259
00:12:03,230 --> 00:12:09,890
very few<font color="#E5E5E5"> exceptions for files I think so</font>

260
00:12:08,209 --> 00:12:12,079
they're all now<font color="#E5E5E5"> fiber blocking so if you</font>

261
00:12:09,890 --> 00:12:13,610
try to<font color="#E5E5E5"> do any sort of i/o on a JDK in</font>

262
00:12:12,079 --> 00:12:16,550
the<font color="#E5E5E5"> prototype and you</font><font color="#CCCCCC"> do it</font><font color="#E5E5E5"> from a fiber</font>

263
00:12:13,610 --> 00:12:18,260
<font color="#CCCCCC">you're not going to block any kernel</font>

264
00:12:16,550 --> 00:12:22,060
threads<font color="#E5E5E5"> even though you're still</font><font color="#CCCCCC"> using</font>

265
00:12:18,260 --> 00:12:24,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> old blocking api's</font><font color="#E5E5E5"> and fibers also</font>

266
00:12:22,060 --> 00:12:30,439
can can work nicely with<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that uses</font>

267
00:12:24,950 --> 00:12:32,839
<font color="#E5E5E5">futures</font><font color="#CCCCCC"> ok so we want to have many</font>

268
00:12:30,440 --> 00:12:35,329
fibers that's the purpose<font color="#E5E5E5"> so how are</font><font color="#CCCCCC"> we</font>

269
00:12:32,839 --> 00:12:37,339
<font color="#CCCCCC">doing comparison to threads so there are</font>

270
00:12:35,329 --> 00:12:38,779
two<font color="#E5E5E5"> things</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider</font><font color="#CCCCCC"> foot memory</font>

271
00:12:37,339 --> 00:12:42,250
<font color="#CCCCCC">footprints and</font><font color="#E5E5E5"> task switching</font>

272
00:12:38,779 --> 00:12:45,490
performance<font color="#E5E5E5"> so ordinary Java threads</font>

273
00:12:42,250 --> 00:12:47,570
<font color="#E5E5E5">have about</font><font color="#CCCCCC"> two kilobytes of metadata and</font>

274
00:12:45,490 --> 00:12:50,209
<font color="#E5E5E5">most of time by default they have one</font>

275
00:12:47,570 --> 00:12:53,690
megabyte of<font color="#E5E5E5"> stack in contrast</font><font color="#CCCCCC"> fibers</font>

276
00:12:50,209 --> 00:12:56,180
have only<font color="#E5E5E5"> two currently 200 to 300 bytes</font>

277
00:12:53,690 --> 00:12:58,279
of metadata and the stack is<font color="#E5E5E5"> basically</font>

278
00:12:56,180 --> 00:13:00,109
it grows and<font color="#E5E5E5"> shrinks could be a few</font>

279
00:12:58,279 --> 00:13:02,930
bytes it can be a few kilobytes<font color="#CCCCCC"> can be a</font>

280
00:13:00,110 --> 00:13:04,850
few megabytes<font color="#CCCCCC"> in terms of task switching</font>

281
00:13:02,930 --> 00:13:07,339
costs<font color="#E5E5E5"> so we all learned that blocking is</font>

282
00:13:04,850 --> 00:13:09,920
expensive and<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> for threads it can</font>

283
00:13:07,339 --> 00:13:12,079
be<font color="#CCCCCC"> one microsecond to ten sometimes even</font>

284
00:13:09,920 --> 00:13:14,689
more<font color="#E5E5E5"> for fibers that we don't know yet</font>

285
00:13:12,079 --> 00:13:16,729
<font color="#CCCCCC">because what we're working</font><font color="#E5E5E5"> on right now</font>

286
00:13:14,690 --> 00:13:17,750
<font color="#E5E5E5">is performance but it's going to be</font>

287
00:13:16,730 --> 00:13:22,550
<font color="#E5E5E5">significantly less</font>

288
00:13:17,750 --> 00:13:24,110
one microsecond<font color="#E5E5E5"> okay so you think what</font>

289
00:13:22,550 --> 00:13:25,880
<font color="#CCCCCC">are fibers fibers are just spreads</font>

290
00:13:24,110 --> 00:13:29,330
<font color="#E5E5E5">they're not implemented by the kernel</font>

291
00:13:25,880 --> 00:13:31,100
they're implemented in the<font color="#E5E5E5"> JDK</font><font color="#CCCCCC"> so the</font>

292
00:13:29,330 --> 00:13:32,780
simplest thing<font color="#CCCCCC"> to do would suggest you</font>

293
00:13:31,100 --> 00:13:36,740
<font color="#E5E5E5">know reuse the thread</font><font color="#CCCCCC"> API maybe add a</font>

294
00:13:32,780 --> 00:13:38,900
new constructor<font color="#E5E5E5"> and instead</font><font color="#CCCCCC"> of you still</font>

295
00:13:36,740 --> 00:13:41,210
have a<font color="#CCCCCC"> java.lang thread but it would be</font>

296
00:13:38,900 --> 00:13:43,970
a fiber<font color="#CCCCCC"> rather than rather than a kernel</font>

297
00:13:41,210 --> 00:13:46,640
thread but when the Loom<font color="#E5E5E5"> team presents</font>

298
00:13:43,970 --> 00:13:48,710
<font color="#E5E5E5">present this to the</font><font color="#CCCCCC"> architects Mark</font>

299
00:13:46,640 --> 00:13:49,939
<font color="#CCCCCC">Bryan and John they say</font><font color="#E5E5E5"> well this is</font>

300
00:13:48,710 --> 00:13:52,850
actually a great<font color="#CCCCCC"> opportunity after</font>

301
00:13:49,940 --> 00:13:56,270
<font color="#CCCCCC">20-plus years</font><font color="#E5E5E5"> to go back to the drawing</font>

302
00:13:52,850 --> 00:13:57,530
<font color="#CCCCCC">board</font><font color="#E5E5E5"> and if we are doing something</font>

303
00:13:56,270 --> 00:13:59,150
<font color="#E5E5E5">that's going</font><font color="#CCCCCC"> to affect how people</font><font color="#E5E5E5"> write</font>

304
00:13:57,530 --> 00:14:01,850
<font color="#E5E5E5">concurrent programs maybe it's time</font><font color="#CCCCCC"> to</font>

305
00:13:59,150 --> 00:14:05,900
rethink threads and how we want to<font color="#E5E5E5"> do it</font>

306
00:14:01,850 --> 00:14:07,130
<font color="#CCCCCC">so at</font><font color="#E5E5E5"> first we thought like what</font><font color="#CCCCCC"> really</font>

307
00:14:05,900 --> 00:14:09,470
can you do would probably<font color="#CCCCCC"> end</font><font color="#E5E5E5"> up where</font>

308
00:14:07,130 --> 00:14:13,250
we<font color="#CCCCCC"> started but shortly</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> we had that</font>

309
00:14:09,470 --> 00:14:15,580
<font color="#CCCCCC">conversation we happen to</font><font color="#E5E5E5"> find a blog</font>

310
00:14:13,250 --> 00:14:17,480
post<font color="#E5E5E5"> by I called</font><font color="#CCCCCC"> on Nathaniel J Smith</font>

311
00:14:15,580 --> 00:14:20,360
<font color="#CCCCCC">you may</font><font color="#E5E5E5"> have heard of it it's</font><font color="#CCCCCC"> called</font>

312
00:14:17,480 --> 00:14:21,800
notes and structured concurrency where

313
00:14:20,360 --> 00:14:24,200
he<font color="#E5E5E5"> describes something called structured</font>

314
00:14:21,800 --> 00:14:26,060
concurrency<font color="#CCCCCC"> it was not his invention it</font>

315
00:14:24,200 --> 00:14:29,570
was probably due to<font color="#E5E5E5"> this guy Martin so</font>

316
00:14:26,060 --> 00:14:32,959
strike<font color="#E5E5E5"> in a library called</font><font color="#CCCCCC"> Lib dil who</font>

317
00:14:29,570 --> 00:14:36,230
<font color="#E5E5E5">invented it but these two blog posts</font><font color="#CCCCCC"> are</font>

318
00:14:32,960 --> 00:14:38,270
terrific<font color="#CCCCCC"> and it was one of</font><font color="#E5E5E5"> the very rare</font>

319
00:14:36,230 --> 00:14:41,870
occasions at least my career that<font color="#E5E5E5"> I read</font>

320
00:14:38,270 --> 00:14:45,230
a<font color="#E5E5E5"> blog post and said yeah that's that's</font>

321
00:14:41,870 --> 00:14:46,850
the way<font color="#CCCCCC"> to do it so sorry the idea</font>

322
00:14:45,230 --> 00:14:49,730
behind<font color="#CCCCCC"> structured concurrency is that</font>

323
00:14:46,850 --> 00:14:51,560
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> launching spawning a thread</font>

324
00:14:49,730 --> 00:14:53,540
which is<font color="#E5E5E5"> a fire-and-forget you just</font>

325
00:14:51,560 --> 00:14:56,449
start<font color="#E5E5E5"> it and it runs for</font><font color="#CCCCCC"> as long as it</font>

326
00:14:53,540 --> 00:15:00,079
<font color="#CCCCCC">wants you try to control</font><font color="#E5E5E5"> the lifetime</font><font color="#CCCCCC"> of</font>

327
00:14:56,450 --> 00:15:02,240
threads in<font color="#CCCCCC"> a more structured way so in</font>

328
00:15:00,080 --> 00:15:05,390
<font color="#CCCCCC">our current</font><font color="#E5E5E5"> prototype the way it looks</font>

329
00:15:02,240 --> 00:15:06,650
<font color="#CCCCCC">like we have something</font><font color="#E5E5E5"> called a</font><font color="#CCCCCC"> five or</font>

330
00:15:05,390 --> 00:15:08,600
<font color="#E5E5E5">scope and I'm sorry we have a lot of</font>

331
00:15:06,650 --> 00:15:10,310
scopes at least three<font color="#CCCCCC"> different types of</font>

332
00:15:08,600 --> 00:15:14,480
scopes right now in<font color="#E5E5E5"> loon</font>

333
00:15:10,310 --> 00:15:16,729
so inside<font color="#CCCCCC"> a</font><font color="#E5E5E5"> fiber scope you can start</font>

334
00:15:14,480 --> 00:15:19,850
new fibers but they have the<font color="#E5E5E5"> following</font>

335
00:15:16,730 --> 00:15:21,980
invariance you cannot exit this block

336
00:15:19,850 --> 00:15:25,070
<font color="#CCCCCC">until all the fibers launched inside</font><font color="#E5E5E5"> it</font>

337
00:15:21,980 --> 00:15:26,870
have terminated<font color="#E5E5E5"> so the program because</font>

338
00:15:25,070 --> 00:15:27,980
<font color="#E5E5E5">is going</font><font color="#CCCCCC"> to block here until</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them</font>

339
00:15:26,870 --> 00:15:30,510
have terminated<font color="#E5E5E5"> and again when I say</font>

340
00:15:27,980 --> 00:15:32,100
<font color="#CCCCCC">block it</font><font color="#E5E5E5"> does not necessarily</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> that</font>

341
00:15:30,510 --> 00:15:33,990
<font color="#CCCCCC">threat is block it could be</font><font color="#E5E5E5"> it's just</font>

342
00:15:32,100 --> 00:15:36,930
that this is<font color="#E5E5E5"> another fiber so just the</font>

343
00:15:33,990 --> 00:15:40,200
fiber blocks<font color="#E5E5E5"> you can nest them you can</font>

344
00:15:36,930 --> 00:15:43,800
create trees of these of these of these

345
00:15:40,200 --> 00:15:45,600
fibers<font color="#CCCCCC"> and because their lifetime is</font>

346
00:15:43,800 --> 00:15:48,930
constrained if they throw exceptions

347
00:15:45,600 --> 00:15:50,970
<font color="#CCCCCC">then the exceptions can propagate to</font><font color="#E5E5E5"> the</font>

348
00:15:48,930 --> 00:15:54,180
thread<font color="#E5E5E5"> that created them</font>

349
00:15:50,970 --> 00:15:55,560
you can cancel<font color="#E5E5E5"> an entire scope and</font><font color="#CCCCCC"> that</font>

350
00:15:54,180 --> 00:15:57,209
would cancel all the fibers<font color="#CCCCCC"> and if</font>

351
00:15:55,560 --> 00:15:59,069
they're currently blocked<font color="#CCCCCC"> they would get</font>

352
00:15:57,210 --> 00:16:05,280
unblocked<font color="#E5E5E5"> and signal it somehow maybe</font>

353
00:15:59,070 --> 00:16:08,640
<font color="#CCCCCC">for an</font><font color="#E5E5E5"> exception</font><font color="#CCCCCC"> so what are some things</font>

354
00:16:05,280 --> 00:16:11,010
you can do with it<font color="#CCCCCC"> so say we want to</font><font color="#E5E5E5"> run</font>

355
00:16:08,640 --> 00:16:13,260
a bunch of<font color="#E5E5E5"> tasks in</font><font color="#CCCCCC"> parallel</font><font color="#E5E5E5"> but we only</font>

356
00:16:11,010 --> 00:16:18,600
<font color="#E5E5E5">want to wait for the first one of them</font>

357
00:16:13,260 --> 00:16:21,810
to finish it's like a race<font color="#E5E5E5"> so we start a</font>

358
00:16:18,600 --> 00:16:25,020
<font color="#CCCCCC">cancelable scope and</font><font color="#E5E5E5"> for each of the</font>

359
00:16:21,810 --> 00:16:26,930
tasks<font color="#E5E5E5"> we spawn a fiber if we just did</font>

360
00:16:25,020 --> 00:16:29,310
<font color="#E5E5E5">that and if we were to close the scope</font>

361
00:16:26,930 --> 00:16:31,050
<font color="#E5E5E5">there well it would do we just wait for</font>

362
00:16:29,310 --> 00:16:33,630
all<font color="#E5E5E5"> of them to complete but</font><font color="#CCCCCC"> we just</font><font color="#E5E5E5"> want</font>

363
00:16:31,050 --> 00:16:36,089
the first<font color="#E5E5E5"> one so whenever a fiber</font>

364
00:16:33,630 --> 00:16:40,140
terminates<font color="#E5E5E5"> it adds itself in its result</font>

365
00:16:36,090 --> 00:16:41,880
<font color="#E5E5E5">to termination</font><font color="#CCCCCC"> q of</font><font color="#E5E5E5"> the scope and</font><font color="#CCCCCC"> you</font>

366
00:16:40,140 --> 00:16:45,360
can block<font color="#CCCCCC"> on that termination Q</font><font color="#E5E5E5"> and ask</font>

367
00:16:41,880 --> 00:16:47,730
<font color="#E5E5E5">for the first one that's</font><font color="#CCCCCC"> finished</font><font color="#E5E5E5"> and</font>

368
00:16:45,360 --> 00:16:50,130
you<font color="#E5E5E5"> don't you wait for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to finish</font><font color="#CCCCCC"> so</font>

369
00:16:47,730 --> 00:16:52,830
now you got<font color="#E5E5E5"> the first one and you no</font>

370
00:16:50,130 --> 00:16:54,540
longer<font color="#E5E5E5"> care but you no longer care about</font>

371
00:16:52,830 --> 00:16:55,800
<font color="#E5E5E5">any of the others</font><font color="#CCCCCC"> but you</font><font color="#E5E5E5"> still</font><font color="#CCCCCC"> can't</font>

372
00:16:54,540 --> 00:16:57,870
<font color="#E5E5E5">exit the block until they've all</font>

373
00:16:55,800 --> 00:17:00,510
<font color="#E5E5E5">terminated</font><font color="#CCCCCC"> you don't want to wait for</font>

374
00:16:57,870 --> 00:17:04,619
<font color="#E5E5E5">them so you just cancel all the rest</font><font color="#CCCCCC"> and</font>

375
00:17:00,510 --> 00:17:07,530
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can do the exact same thing</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> also</font>

376
00:17:04,619 --> 00:17:09,750
<font color="#E5E5E5">add a deadline so if none of</font><font color="#CCCCCC"> fibers</font>

377
00:17:07,530 --> 00:17:11,160
finish the<font color="#E5E5E5"> task by that deadline they</font>

378
00:17:09,750 --> 00:17:14,310
would all be<font color="#CCCCCC"> cancelled automatically by</font>

379
00:17:11,160 --> 00:17:16,680
the scope so<font color="#CCCCCC"> this is structure</font>

380
00:17:14,310 --> 00:17:19,319
concurrency one of the ways in<font color="#CCCCCC"> which we</font>

381
00:17:16,680 --> 00:17:22,829
are<font color="#E5E5E5"> rethinking threads and concurrency</font>

382
00:17:19,319 --> 00:17:26,730
in general another way was an idea by

383
00:17:22,829 --> 00:17:30,180
John<font color="#E5E5E5"> Rose</font><font color="#CCCCCC"> and that has to do with</font><font color="#E5E5E5"> thread</font>

384
00:17:26,730 --> 00:17:31,890
locals so<font color="#E5E5E5"> in the same vein is as all</font>

385
00:17:30,180 --> 00:17:32,790
threads thread locals are kind<font color="#E5E5E5"> of</font>

386
00:17:31,890 --> 00:17:34,560
<font color="#CCCCCC">fire-and-forget</font>

387
00:17:32,790 --> 00:17:37,520
you can create<font color="#E5E5E5"> them assign them of value</font>

388
00:17:34,560 --> 00:17:39,790
and that value<font color="#CCCCCC"> remain sets until</font>

389
00:17:37,520 --> 00:17:42,010
whatever<font color="#E5E5E5"> until someone</font>

390
00:17:39,790 --> 00:17:45,610
<font color="#E5E5E5">to</font><font color="#CCCCCC"> change it back or set</font><font color="#E5E5E5"> into another</font>

391
00:17:42,010 --> 00:17:47,320
value<font color="#CCCCCC"> so we want to do the same thing to</font>

392
00:17:45,610 --> 00:17:51,729
<font color="#CCCCCC">control the lifetime of these thread</font>

393
00:17:47,320 --> 00:17:53,350
locals in a more structured way<font color="#CCCCCC"> and the</font>

394
00:17:51,730 --> 00:17:55,090
current working<font color="#E5E5E5"> title for them is</font><font color="#CCCCCC"> cope</font>

395
00:17:53,350 --> 00:17:58,360
<font color="#CCCCCC">tidal scope locals they're very similar</font>

396
00:17:55,090 --> 00:18:02,290
<font color="#E5E5E5">to dynamic variables and scheme that's</font>

397
00:17:58,360 --> 00:18:04,149
the<font color="#E5E5E5"> inspiration</font><font color="#CCCCCC"> they are not in the</font>

398
00:18:02,290 --> 00:18:07,930
<font color="#E5E5E5">prototype yet so this</font><font color="#CCCCCC"> is a purely</font>

399
00:18:04,150 --> 00:18:10,510
speculative API<font color="#CCCCCC"> but it looks</font><font color="#E5E5E5"> like this</font>

400
00:18:07,930 --> 00:18:12,790
<font color="#E5E5E5">so you create a scope local it has some</font>

401
00:18:10,510 --> 00:18:16,600
<font color="#E5E5E5">initial value and then you have another</font>

402
00:18:12,790 --> 00:18:19,180
<font color="#CCCCCC">block</font><font color="#E5E5E5"> and you set the value</font><font color="#CCCCCC"> de belen</font>

403
00:18:16,600 --> 00:18:20,679
inside the block<font color="#CCCCCC"> and everywhere</font><font color="#E5E5E5"> everyone</font>

404
00:18:19,180 --> 00:18:23,860
inside<font color="#E5E5E5"> that</font><font color="#CCCCCC"> block would see that value</font>

405
00:18:20,680 --> 00:18:25,900
<font color="#E5E5E5">and that also goes to so it's not</font><font color="#CCCCCC"> just</font>

406
00:18:23,860 --> 00:18:27,429
<font color="#E5E5E5">in the same method</font><font color="#CCCCCC"> but all of your</font>

407
00:18:25,900 --> 00:18:28,810
<font color="#E5E5E5">colleagues it can be deep in the stack</font>

408
00:18:27,430 --> 00:18:31,270
you<font color="#CCCCCC"> can call</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> methods they would</font>

409
00:18:28,810 --> 00:18:34,510
get<font color="#E5E5E5"> this value</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> but once you exit this</font>

410
00:18:31,270 --> 00:18:41,410
block<font color="#E5E5E5"> it would automatically revert to</font>

411
00:18:34,510 --> 00:18:43,540
the<font color="#CCCCCC"> old value now because fibers are now</font>

412
00:18:41,410 --> 00:18:45,910
<font color="#E5E5E5">also structured and constrained to a</font>

413
00:18:43,540 --> 00:18:50,379
fiber scope we can combine the two

414
00:18:45,910 --> 00:18:52,150
<font color="#E5E5E5">features and say that all fibers that</font>

415
00:18:50,380 --> 00:18:54,790
would be launched inside a scope<font color="#E5E5E5"> that</font>

416
00:18:52,150 --> 00:18:57,450
<font color="#CCCCCC">can see</font><font color="#E5E5E5"> this value would inherit that</font>

417
00:18:54,790 --> 00:18:59,700
value<font color="#E5E5E5"> so this is sort of similar</font><font color="#CCCCCC"> to</font>

418
00:18:57,450 --> 00:19:01,450
<font color="#E5E5E5">inheritable thread locals but</font>

419
00:18:59,700 --> 00:19:02,170
inheritable thread locals are also

420
00:19:01,450 --> 00:19:04,240
fire-and-forget

421
00:19:02,170 --> 00:19:06,040
they inherit the value of the thread

422
00:19:04,240 --> 00:19:07,180
that created them but they can outlive

423
00:19:06,040 --> 00:19:08,980
the thread that created them<font color="#CCCCCC"> with</font>

424
00:19:07,180 --> 00:19:11,530
<font color="#CCCCCC">structured concurrency this is no longer</font>

425
00:19:08,980 --> 00:19:15,220
<font color="#E5E5E5">possible every thread is or</font>

426
00:19:11,530 --> 00:19:18,070
every fiber is<font color="#CCCCCC"> only alive no longer</font><font color="#E5E5E5"> than</font>

427
00:19:15,220 --> 00:19:19,990
the<font color="#E5E5E5"> scope that created it</font><font color="#CCCCCC"> so we can</font>

428
00:19:18,070 --> 00:19:23,050
ensure<font color="#CCCCCC"> that they only see a</font><font color="#E5E5E5"> value that</font>

429
00:19:19,990 --> 00:19:25,120
we want<font color="#E5E5E5"> them to see</font><font color="#CCCCCC"> we may need</font><font color="#E5E5E5"> to make</font>

430
00:19:23,050 --> 00:19:26,860
some language changes<font color="#E5E5E5"> to this because we</font>

431
00:19:25,120 --> 00:19:28,929
want<font color="#E5E5E5"> to absolutely ensure clean up and</font>

432
00:19:26,860 --> 00:19:31,060
right now<font color="#CCCCCC"> this tribe with resources</font>

433
00:19:28,930 --> 00:19:33,130
block is voluntary<font color="#CCCCCC"> so may introduce</font>

434
00:19:31,060 --> 00:19:37,360
something<font color="#E5E5E5"> that says</font><font color="#CCCCCC"> is for particular</font>

435
00:19:33,130 --> 00:19:41,410
<font color="#CCCCCC">constants</font><font color="#E5E5E5"> it is mandatory</font><font color="#CCCCCC"> and that is</font>

436
00:19:37,360 --> 00:19:44,379
all I<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to say oh you can go to the</font>

437
00:19:41,410 --> 00:19:46,450
<font color="#CCCCCC">loom wiki page and right now we don't</font>

438
00:19:44,380 --> 00:19:47,890
<font color="#CCCCCC">have</font><font color="#E5E5E5"> binary you know</font><font color="#CCCCCC"> alexey shavelev</font>

439
00:19:46,450 --> 00:19:50,780
builds them

440
00:19:47,890 --> 00:19:52,220
but you can download the sources and

441
00:19:50,780 --> 00:20:23,360
<font color="#E5E5E5">build them and play with them</font><font color="#CCCCCC"> and we're</font>

442
00:19:52,220 --> 00:20:25,670
<font color="#E5E5E5">waiting</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your feedback thank</font><font color="#CCCCCC"> you so</font>

443
00:20:23,360 --> 00:20:28,370
if<font color="#E5E5E5"> if it's yielded</font><font color="#CCCCCC"> it behaves</font><font color="#E5E5E5"> the same</font>

444
00:20:25,670 --> 00:20:30,890
way<font color="#E5E5E5"> right right</font><font color="#CCCCCC"> the question is what</font>

445
00:20:28,370 --> 00:20:33,679
happens how<font color="#E5E5E5"> does this interact with</font>

446
00:20:30,890 --> 00:20:36,170
<font color="#E5E5E5">garbage collection</font><font color="#CCCCCC"> if a fiber is yield</font>

447
00:20:33,680 --> 00:20:39,590
it's not fiber is blocked<font color="#CCCCCC"> continuation</font>

448
00:20:36,170 --> 00:20:40,880
is yielded subtle<font color="#CCCCCC"> but a</font><font color="#E5E5E5"> block fiber or</font>

449
00:20:39,590 --> 00:20:43,879
yield a continuation of the same as the

450
00:20:40,880 --> 00:20:46,700
block thread they're still alive<font color="#CCCCCC"> but if</font>

451
00:20:43,880 --> 00:20:48,860
a continuation becomes unreachable<font color="#E5E5E5"> you</font>

452
00:20:46,700 --> 00:20:50,990
<font color="#E5E5E5">you suspend it and then you forget</font><font color="#CCCCCC"> about</font>

453
00:20:48,860 --> 00:20:52,490
it<font color="#E5E5E5"> never terminates then it would get</font>

454
00:20:50,990 --> 00:21:00,100
collected and everything at<font color="#E5E5E5"> references</font>

455
00:20:52,490 --> 00:21:00,100
which get collected yeah

456
00:21:03,240 --> 00:21:07,690
<font color="#CCCCCC">no I can tell you so the question is</font>

457
00:21:06,669 --> 00:21:09,639
what do we<font color="#CCCCCC"> want to releasing to you</font>

458
00:21:07,690 --> 00:21:11,380
waiting without<font color="#CCCCCC"> fibers I think the main</font>

459
00:21:09,639 --> 00:21:12,668
concern<font color="#E5E5E5"> is once we have continuations</font>

460
00:21:11,380 --> 00:21:14,830
people are<font color="#E5E5E5"> going to start writing fibers</font>

461
00:21:12,669 --> 00:21:18,490
on top of them<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you're gonna get a</font>

462
00:21:14,830 --> 00:21:20,769
hundred fiber libraries<font color="#E5E5E5"> so it's best to</font>

463
00:21:18,490 --> 00:21:21,820
just do it<font color="#CCCCCC"> and say ok this is a if</font><font color="#E5E5E5"> you</font>

464
00:21:20,769 --> 00:21:23,259
want somebody<font color="#E5E5E5"> else you can do something</font>

465
00:21:21,820 --> 00:21:26,678
<font color="#E5E5E5">else you</font><font color="#CCCCCC"> would still be</font><font color="#E5E5E5"> able to</font>

466
00:21:23,259 --> 00:21:28,870
<font color="#E5E5E5">implement your own your own fibers but</font>

467
00:21:26,679 --> 00:21:39,090
at least<font color="#E5E5E5"> we'll show the right</font><font color="#CCCCCC"> way to do</font>

468
00:21:28,870 --> 00:21:47,530
<font color="#E5E5E5">it that we</font><font color="#CCCCCC"> so thank you</font>

469
00:21:39,090 --> 00:21:47,530
[Applause]

470
00:22:06,669 --> 00:22:16,230
I started releasing

471
00:22:50,700 --> 00:22:54,570
can<font color="#CCCCCC"> i</font><font color="#E5E5E5"> mirror the display</font>

472
00:24:00,580 --> 00:24:03,659
<font color="#CCCCCC">they only to</font>

473
00:24:03,940 --> 00:24:22,240
<font color="#CCCCCC">you lie swap monitors</font><font color="#E5E5E5"> it's got my it's</font>

474
00:24:07,730 --> 00:24:22,240
got my<font color="#E5E5E5"> view up there and I think is</font>

475
00:24:26,190 --> 00:24:29,210
<font color="#E5E5E5">that's a breezy</font>

476
00:24:29,980 --> 00:24:33,099
[Music]

477
00:24:37,530 --> 00:25:04,580
yeah yeah yeah but<font color="#CCCCCC"> I can't I can't do it</font>

