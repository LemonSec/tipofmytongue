1
00:00:04,860 --> 00:00:12,209
<font color="#E5E5E5">okay I'm Hannah - Cisco system and I'm</font>

2
00:00:08,400 --> 00:00:15,840
going to<font color="#E5E5E5"> present to</font><font color="#CCCCCC"> you a</font><font color="#E5E5E5"> small project</font>

3
00:00:12,209 --> 00:00:19,230
<font color="#E5E5E5">that we created to test our routers in</font>

4
00:00:15,840 --> 00:00:24,090
our feature on the router

5
00:00:19,230 --> 00:00:26,220
it's called<font color="#CCCCCC"> 2x and</font><font color="#E5E5E5"> actually it was my</font>

6
00:00:24,090 --> 00:00:27,210
first journey in the<font color="#CCCCCC"> open-source because</font>

7
00:00:26,220 --> 00:00:31,679
my friend asked

8
00:00:27,210 --> 00:00:35,210
told me try to<font color="#E5E5E5"> open source it don't put</font>

9
00:00:31,679 --> 00:00:40,049
<font color="#E5E5E5">it in your drawer and</font><font color="#CCCCCC"> this is the result</font>

10
00:00:35,210 --> 00:00:43,680
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to talk about traffic</font>

11
00:00:40,049 --> 00:00:46,890
<font color="#CCCCCC">generation how we are</font><font color="#E5E5E5"> doing it in Cisco</font>

12
00:00:43,680 --> 00:00:49,440
to test our routers<font color="#E5E5E5"> and it's all based</font>

13
00:00:46,890 --> 00:00:51,390
on<font color="#E5E5E5"> software</font><font color="#CCCCCC"> okay today there is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> DP DK</font>

14
00:00:49,440 --> 00:00:53,309
library and I will<font color="#E5E5E5"> talk about that so</font>

15
00:00:51,390 --> 00:00:55,170
because I have very very short<font color="#CCCCCC"> time I</font>

16
00:00:53,309 --> 00:01:00,140
will<font color="#E5E5E5"> talk about stateless and advanced</font>

17
00:00:55,170 --> 00:01:02,909
stateful mode of the traffic generator

18
00:01:00,140 --> 00:01:04,769
<font color="#E5E5E5">let me start with the result the result</font>

19
00:01:02,909 --> 00:01:07,860
after<font color="#E5E5E5"> we open source the traffic</font>

20
00:01:04,769 --> 00:01:10,530
generation<font color="#E5E5E5"> it seems that many has the</font>

21
00:01:07,860 --> 00:01:12,900
same problem many needed traffic

22
00:01:10,530 --> 00:01:14,730
generator to test the routers so for

23
00:01:12,900 --> 00:01:17,550
example<font color="#E5E5E5"> many open source started to</font><font color="#CCCCCC"> your</font>

24
00:01:14,730 --> 00:01:21,840
<font color="#CCCCCC">TX like opening a</font><font color="#E5E5E5"> VDP decay if you want</font>

25
00:01:17,550 --> 00:01:25,590
a<font color="#CCCCCC"> fight or Cisco internally</font><font color="#E5E5E5"> and many</font>

26
00:01:21,840 --> 00:01:30,780
<font color="#CCCCCC">time in</font><font color="#E5E5E5"> Cisco and Intel and Mellanox and</font>

27
00:01:25,590 --> 00:01:34,440
rather small this<font color="#CCCCCC"> is say from analytical</font>

28
00:01:30,780 --> 00:01:39,060
our documentation<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see that it's</font>

29
00:01:34,440 --> 00:01:42,270
growing<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 1,000 users actively and</font>

30
00:01:39,060 --> 00:01:46,380
this is the mode<font color="#CCCCCC"> of operation</font><font color="#E5E5E5"> because</font>

31
00:01:42,270 --> 00:01:49,050
there are many<font color="#CCCCCC"> type</font><font color="#E5E5E5"> of modes that</font><font color="#CCCCCC"> you</font>

32
00:01:46,380 --> 00:01:50,640
need to test the need to be modes of

33
00:01:49,050 --> 00:01:53,039
operation from<font color="#CCCCCC"> the traffic generation</font>

34
00:01:50,640 --> 00:01:55,290
for example<font color="#CCCCCC"> you don't need realistic</font>

35
00:01:53,040 --> 00:01:57,930
traffic to test<font color="#E5E5E5"> a switch</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> because</font>

36
00:01:55,290 --> 00:02:01,110
there is only a switching of packet of

37
00:01:57,930 --> 00:02:04,440
simple<font color="#CCCCCC"> lookup</font><font color="#E5E5E5"> but when you want to</font><font color="#CCCCCC"> test</font>

38
00:02:01,110 --> 00:02:08,669
<font color="#E5E5E5">snow</font><font color="#CCCCCC"> the doing inspection and</font>

39
00:02:04,440 --> 00:02:10,949
normalization and<font color="#E5E5E5"> dpi and you need to</font>

40
00:02:08,669 --> 00:02:13,708
create a realistic traffic something

41
00:02:10,949 --> 00:02:17,829
that with layer 7 that simulate<font color="#E5E5E5"> client</font>

42
00:02:13,709 --> 00:02:20,260
<font color="#E5E5E5">server and application</font><font color="#CCCCCC"> if</font>

43
00:02:17,830 --> 00:02:24,070
<font color="#CCCCCC">really to evaluate the performance</font><font color="#E5E5E5"> of</font>

44
00:02:20,260 --> 00:02:27,370
the of the gear<font color="#E5E5E5"> that you want to test so</font>

45
00:02:24,070 --> 00:02:30,489
there are in general two<font color="#CCCCCC"> modes of</font>

46
00:02:27,370 --> 00:02:33,910
<font color="#E5E5E5">operation stateless and stateful with</font>

47
00:02:30,490 --> 00:02:35,890
more<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> them I will</font><font color="#E5E5E5"> talk about</font>

48
00:02:33,910 --> 00:02:42,400
<font color="#E5E5E5">advanced</font><font color="#CCCCCC"> eight fool</font><font color="#E5E5E5"> and I will talk</font>

49
00:02:35,890 --> 00:02:46,329
<font color="#E5E5E5">about stateless okay the problem that we</font>

50
00:02:42,400 --> 00:02:49,870
try to solve again is to estimate<font color="#E5E5E5"> the</font>

51
00:02:46,330 --> 00:02:52,080
performance<font color="#E5E5E5"> of stateful features on the</font>

52
00:02:49,870 --> 00:02:55,750
router stateful feature on the router

53
00:02:52,080 --> 00:02:58,570
<font color="#E5E5E5">behaving in a weird way</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> for</font>

54
00:02:55,750 --> 00:03:01,030
every flow we open the<font color="#CCCCCC"> context we cache</font>

55
00:02:58,570 --> 00:03:03,549
<font color="#E5E5E5">the clients cache the server</font><font color="#CCCCCC"> try to</font>

56
00:03:01,030 --> 00:03:07,450
normalize<font color="#E5E5E5"> the traffic and so forth and</font>

57
00:03:03,550 --> 00:03:10,750
by bumping a UDP packet in<font color="#CCCCCC"> short packet</font>

58
00:03:07,450 --> 00:03:14,230
it we won't<font color="#E5E5E5"> get any reasonable number</font>

59
00:03:10,750 --> 00:03:16,270
it's not it's not it<font color="#E5E5E5"> won't give us</font>

60
00:03:14,230 --> 00:03:18,970
anything<font color="#E5E5E5"> but because of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we need to</font>

61
00:03:16,270 --> 00:03:22,300
<font color="#E5E5E5">generate realistic taxes realistic</font>

62
00:03:18,970 --> 00:03:25,359
traffic the problem is<font color="#E5E5E5"> that realistic</font>

63
00:03:22,300 --> 00:03:30,130
traffic really<font color="#E5E5E5"> cost really expensive</font>

64
00:03:25,360 --> 00:03:32,709
like 500k<font color="#CCCCCC"> 450 gig or 100 gig</font><font color="#E5E5E5"> and it's</font>

65
00:03:30,130 --> 00:03:36,250
not<font color="#CCCCCC"> flexible and this is the</font><font color="#E5E5E5"> reason that</font>

66
00:03:32,709 --> 00:03:38,350
we open source this<font color="#E5E5E5"> so what is t-rex</font>

67
00:03:36,250 --> 00:03:40,810
<font color="#CCCCCC">t-rex is a</font><font color="#E5E5E5"> software it's an application</font>

68
00:03:38,350 --> 00:03:44,410
it is<font color="#E5E5E5"> a Linux application in sit on top</font>

69
00:03:40,810 --> 00:03:46,510
of DP DK and it's exposed a free way of

70
00:03:44,410 --> 00:03:50,890
<font color="#CCCCCC">off</font><font color="#E5E5E5"> mode that I've already talked about</font>

71
00:03:46,510 --> 00:03:54,970
<font color="#E5E5E5">and using that it can come with a</font>

72
00:03:50,890 --> 00:03:59,260
container and<font color="#E5E5E5"> it's scalable everything</font>

73
00:03:54,970 --> 00:04:02,170
is about scale<font color="#CCCCCC"> and virtualization this</font>

74
00:03:59,260 --> 00:04:04,510
is how you know I perceive it it's

75
00:04:02,170 --> 00:04:08,530
really really fast<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> is from</font>

76
00:04:04,510 --> 00:04:10,780
bottom<font color="#E5E5E5"> up is scale and this is the slide</font>

77
00:04:08,530 --> 00:04:15,550
I'm using in Europe<font color="#E5E5E5"> there is another</font>

78
00:04:10,780 --> 00:04:20,858
slide<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> US okay let's</font><font color="#E5E5E5"> talk about</font>

79
00:04:15,550 --> 00:04:27,910
stateless stateless is a way to generate

80
00:04:20,858 --> 00:04:29,780
<font color="#CCCCCC">traffic</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> switches</font><font color="#CCCCCC"> it composed the</font>

81
00:04:27,910 --> 00:04:33,830
building block is

82
00:04:29,780 --> 00:04:37,130
is a stream<font color="#E5E5E5"> we call it a stream and you</font>

83
00:04:33,830 --> 00:04:40,430
<font color="#E5E5E5">can add more stream remove swim and the</font>

84
00:04:37,130 --> 00:04:44,900
API is json-rpc<font color="#CCCCCC"> and we created a</font><font color="#E5E5E5"> Python</font>

85
00:04:40,430 --> 00:04:46,910
that<font color="#CCCCCC"> simplify</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> way that you can</font><font color="#E5E5E5"> walk</font>

86
00:04:44,900 --> 00:04:48,950
<font color="#E5E5E5">with it so there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> side</font><font color="#E5E5E5"> you</font>

87
00:04:46,910 --> 00:04:52,520
<font color="#E5E5E5">install the to excel and then</font><font color="#CCCCCC"> you</font>

88
00:04:48,950 --> 00:04:54,800
interact with it<font color="#E5E5E5"> with the client moves</font>

89
00:04:52,520 --> 00:04:57,919
the Python you add stream remove stream

90
00:04:54,800 --> 00:05:00,230
<font color="#E5E5E5">get statistics</font><font color="#CCCCCC"> started to remove and</font>

91
00:04:57,919 --> 00:05:03,740
everything else<font color="#E5E5E5"> there is a nice GUI that</font>

92
00:05:00,230 --> 00:05:09,820
<font color="#E5E5E5">works on top of this API on JSON RPC API</font>

93
00:05:03,740 --> 00:05:14,720
and let's see what is stream which<font color="#CCCCCC"> is</font>

94
00:05:09,820 --> 00:05:17,659
the traffic<font color="#CCCCCC"> mix that we are using</font><font color="#E5E5E5"> so you</font>

95
00:05:14,720 --> 00:05:20,210
can build a profile<font color="#E5E5E5"> that built from</font>

96
00:05:17,660 --> 00:05:23,120
streams in this example there is three

97
00:05:20,210 --> 00:05:26,469
streams<font color="#E5E5E5"> the blue one the green one and</font>

98
00:05:23,120 --> 00:05:29,330
the yellow one<font color="#E5E5E5"> so the blue</font><font color="#CCCCCC"> one is a</font>

99
00:05:26,470 --> 00:05:33,290
packet that<font color="#CCCCCC"> I can generate</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> Scapa</font>

100
00:05:29,330 --> 00:05:35,510
anyone knows copy<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so you can build</font>

101
00:05:33,290 --> 00:05:38,000
a packet<font color="#E5E5E5"> a template of a packet and then</font>

102
00:05:35,510 --> 00:05:40,969
you can build<font color="#E5E5E5"> a program that change the</font>

103
00:05:38,000 --> 00:05:43,669
packet over<font color="#E5E5E5"> time for example</font><font color="#CCCCCC"> I I want to</font>

104
00:05:40,970 --> 00:05:46,430
create a<font color="#E5E5E5"> range of</font><font color="#CCCCCC"> salt IP to destination</font>

105
00:05:43,669 --> 00:05:49,159
IP and then<font color="#CCCCCC"> I can choose the mode the</font>

106
00:05:46,430 --> 00:05:51,440
the right the<font color="#E5E5E5"> the blue one is continuous</font>

107
00:05:49,160 --> 00:05:55,220
<font color="#E5E5E5">just bump the packet in specific right</font>

108
00:05:51,440 --> 00:05:57,890
the green one<font color="#CCCCCC"> is a burst</font><font color="#E5E5E5"> of packet let's</font>

109
00:05:55,220 --> 00:06:00,620
say I want<font color="#CCCCCC"> only three packet and the</font>

110
00:05:57,890 --> 00:06:03,020
yellow one<font color="#E5E5E5"> is the multi burst with inter</font>

111
00:06:00,620 --> 00:06:04,700
packet gap<font color="#CCCCCC"> inter burst gap and I can</font>

112
00:06:03,020 --> 00:06:07,250
connect them<font color="#E5E5E5"> I can create a program</font>

113
00:06:04,700 --> 00:06:09,620
<font color="#CCCCCC">let's say when the green one</font><font color="#E5E5E5"> finished</font>

114
00:06:07,250 --> 00:06:11,660
<font color="#CCCCCC">starved the yellow one</font><font color="#E5E5E5"> and then point to</font>

115
00:06:09,620 --> 00:06:14,270
another stream<font color="#E5E5E5"> it's like a program that</font>

116
00:06:11,660 --> 00:06:17,510
you can<font color="#E5E5E5"> build on pipe using Python let's</font>

117
00:06:14,270 --> 00:06:18,890
see how simple<font color="#E5E5E5"> it is before</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so this</font>

118
00:06:17,510 --> 00:06:21,469
<font color="#CCCCCC">is the architecture</font><font color="#E5E5E5"> the eye level</font>

119
00:06:18,890 --> 00:06:26,240
architecture<font color="#CCCCCC"> there is a server there</font><font color="#E5E5E5"> is</font>

120
00:06:21,470 --> 00:06:30,229
<font color="#CCCCCC">an RPC using JSON RPC</font><font color="#E5E5E5"> there is a data</font>

121
00:06:26,240 --> 00:06:32,180
path that I talk later on that<font color="#E5E5E5"> is</font>

122
00:06:30,229 --> 00:06:34,490
scalable<font color="#E5E5E5"> with if the number of scope as</font>

123
00:06:32,180 --> 00:06:36,200
you add more cause you will get linear

124
00:06:34,490 --> 00:06:39,349
<font color="#E5E5E5">scale with the performance which is</font>

125
00:06:36,200 --> 00:06:42,870
<font color="#E5E5E5">really high and then come the Python</font>

126
00:06:39,349 --> 00:06:46,440
that encapsulate all<font color="#CCCCCC"> the JSON RPC</font><font color="#E5E5E5"> in</font>

127
00:06:42,870 --> 00:06:50,400
nice API<font color="#E5E5E5"> and there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Java API for</font>

128
00:06:46,440 --> 00:06:53,480
someone<font color="#CCCCCC"> Ericsson is supporting that and</font>

129
00:06:50,400 --> 00:06:57,349
there<font color="#E5E5E5"> is a GUI and there is a console</font>

130
00:06:53,480 --> 00:07:03,300
there is<font color="#E5E5E5"> the API</font><font color="#CCCCCC"> okay you</font><font color="#E5E5E5"> just brought</font>

131
00:06:57,350 --> 00:07:05,640
wrapping<font color="#CCCCCC"> everything for the users</font><font color="#E5E5E5"> so we</font>

132
00:07:03,300 --> 00:07:08,250
<font color="#CCCCCC">separated the definition of the profile</font>

133
00:07:05,640 --> 00:07:10,409
<font color="#E5E5E5">from what to do with the profile this is</font>

134
00:07:08,250 --> 00:07:12,810
a<font color="#E5E5E5"> definition of the profile</font><font color="#CCCCCC"> I define</font>

135
00:07:10,410 --> 00:07:16,650
<font color="#CCCCCC">this</font><font color="#E5E5E5"> day</font><font color="#CCCCCC"> Lord of a profile</font><font color="#E5E5E5"> of stateless</font>

136
00:07:12,810 --> 00:07:21,590
we defined<font color="#E5E5E5"> really a simple continuous</font>

137
00:07:16,650 --> 00:07:25,590
<font color="#CCCCCC">but continuous stream with this</font>

138
00:07:21,590 --> 00:07:28,770
definition<font color="#E5E5E5"> Ethernet of</font><font color="#CCCCCC"> the IP over UDP</font>

139
00:07:25,590 --> 00:07:32,340
<font color="#CCCCCC">over 10</font><font color="#E5E5E5"> axis okay this is the packet</font>

140
00:07:28,770 --> 00:07:34,919
there will be a different type<font color="#E5E5E5"> of packet</font>

141
00:07:32,340 --> 00:07:38,010
<font color="#E5E5E5">from different direction from one</font>

142
00:07:34,920 --> 00:07:39,480
<font color="#CCCCCC">direction it</font><font color="#E5E5E5"> will be 1600 one to 4800</font>

143
00:07:38,010 --> 00:07:42,930
<font color="#E5E5E5">one and the other direction into the</font>

144
00:07:39,480 --> 00:07:45,360
opposite<font color="#E5E5E5"> this way we can create be</font>

145
00:07:42,930 --> 00:07:48,600
directional traffic so<font color="#CCCCCC"> this is the</font>

146
00:07:45,360 --> 00:07:51,060
profile and then we can manipulate the

147
00:07:48,600 --> 00:07:52,410
profile<font color="#E5E5E5"> load it so there is a console</font>

148
00:07:51,060 --> 00:07:54,960
<font color="#CCCCCC">that you can start the profile oh the</font>

149
00:07:52,410 --> 00:07:57,690
<font color="#E5E5E5">profile get statistic about</font><font color="#CCCCCC"> the profile</font>

150
00:07:54,960 --> 00:07:59,159
and so forth and there is the API<font color="#E5E5E5"> this</font>

151
00:07:57,690 --> 00:07:59,850
<font color="#E5E5E5">is the API impact on that we run</font>

152
00:07:59,160 --> 00:08:02,580
everything

153
00:07:59,850 --> 00:08:05,100
so in this way we<font color="#CCCCCC"> are connecting to the</font>

154
00:08:02,580 --> 00:08:06,810
<font color="#E5E5E5">clock to the server and then reset</font>

155
00:08:05,100 --> 00:08:08,930
everything<font color="#E5E5E5"> restore</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> statistics</font>

156
00:08:06,810 --> 00:08:11,940
<font color="#E5E5E5">add the stream that I showed already</font>

157
00:08:08,930 --> 00:08:15,360
<font color="#E5E5E5">clear the statistic start the traffic</font>

158
00:08:11,940 --> 00:08:17,280
and here I can<font color="#CCCCCC"> multiplied and say that</font>

159
00:08:15,360 --> 00:08:19,860
the traffic<font color="#E5E5E5"> that I want is</font><font color="#CCCCCC"> five mega</font>

160
00:08:17,280 --> 00:08:23,820
packet per second for<font color="#E5E5E5"> the duration of 10</font>

161
00:08:19,860 --> 00:08:26,010
seconds and<font color="#E5E5E5"> then I can wait after I wait</font>

162
00:08:23,820 --> 00:08:28,320
I can<font color="#CCCCCC"> get</font><font color="#E5E5E5"> the statistics</font><font color="#CCCCCC"> how much</font>

163
00:08:26,010 --> 00:08:33,360
bracket<font color="#CCCCCC"> well how many</font><font color="#E5E5E5"> drops how many</font>

164
00:08:28,320 --> 00:08:37,830
packets were sent and so forth<font color="#CCCCCC"> okay so</font>

165
00:08:33,360 --> 00:08:41,520
really really<font color="#CCCCCC"> simple API and qyx do the</font>

166
00:08:37,830 --> 00:08:45,480
hard work<font color="#E5E5E5"> to separate what you</font><font color="#CCCCCC"> asked</font><font color="#E5E5E5"> it</font>

167
00:08:41,520 --> 00:08:48,270
what we're asking<font color="#E5E5E5"> to multiple</font><font color="#CCCCCC"> Co it's by</font>

168
00:08:45,480 --> 00:08:51,870
<font color="#CCCCCC">magic that under you don't need to</font>

169
00:08:48,270 --> 00:08:57,300
separate<font color="#E5E5E5"> their profile so</font><font color="#CCCCCC"> this is the</font>

170
00:08:51,870 --> 00:09:00,720
the<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> that we do</font><font color="#CCCCCC"> for you</font><font color="#E5E5E5"> this is the</font>

171
00:08:57,300 --> 00:09:04,260
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> visits on the XL 7:10 on</font><font color="#E5E5E5"> one</font>

172
00:09:00,720 --> 00:09:07,020
core<font color="#E5E5E5"> you can see that we</font><font color="#CCCCCC"> can reach to 13</font>

173
00:09:04,260 --> 00:09:10,560
<font color="#CCCCCC">13 mega</font><font color="#E5E5E5"> packet per second in one</font><font color="#CCCCCC"> quo and</font>

174
00:09:07,020 --> 00:09:12,650
<font color="#CCCCCC">it's linear scale so it's all about the</font>

175
00:09:10,560 --> 00:09:16,170
<font color="#E5E5E5">performance</font>

176
00:09:12,650 --> 00:09:21,240
so let's<font color="#CCCCCC"> bet let's</font><font color="#E5E5E5"> talk about stateful</font>

177
00:09:16,170 --> 00:09:24,209
stateful is more for feature that

178
00:09:21,240 --> 00:09:28,380
inspect the traffic like<font color="#E5E5E5"> dpi like snort</font>

179
00:09:24,210 --> 00:09:31,470
like firewalls like<font color="#CCCCCC"> NAT they need</font><font color="#E5E5E5"> to</font>

180
00:09:28,380 --> 00:09:33,750
<font color="#CCCCCC">generate stateful traffic in this</font>

181
00:09:31,470 --> 00:09:36,600
example TX can act like a server<font color="#CCCCCC"> or like</font>

182
00:09:33,750 --> 00:09:40,980
a client<font color="#E5E5E5"> and generate traffic on top of</font>

183
00:09:36,600 --> 00:09:43,590
TCP stack that<font color="#CCCCCC"> we wrote the reason</font><font color="#E5E5E5"> that</font>

184
00:09:40,980 --> 00:09:45,420
we<font color="#E5E5E5"> wrote the TCP stack is that if you</font>

185
00:09:43,590 --> 00:09:47,490
will take a TCP stack from Linux it

186
00:09:45,420 --> 00:09:48,990
won't scale it<font color="#CCCCCC"> won't it will</font><font color="#E5E5E5"> scale</font><font color="#CCCCCC"> to 1</font>

187
00:09:47,490 --> 00:09:52,170
million<font color="#CCCCCC"> packet per second and we needed</font>

188
00:09:48,990 --> 00:09:56,010
<font color="#E5E5E5">much</font><font color="#CCCCCC"> more we needed 10 million 40</font>

189
00:09:52,170 --> 00:09:59,990
million active flow generating 200<font color="#E5E5E5"> gig</font>

190
00:09:56,010 --> 00:10:03,540
<font color="#E5E5E5">and this is how we did we took a BSD</font>

191
00:09:59,990 --> 00:10:05,880
native<font color="#E5E5E5"> BSD</font><font color="#CCCCCC"> stock and we changing in a</font>

192
00:10:03,540 --> 00:10:08,730
way<font color="#E5E5E5"> that it would</font><font color="#CCCCCC"> be multi</font><font color="#E5E5E5"> Co every</font>

193
00:10:05,880 --> 00:10:12,750
instance<font color="#E5E5E5"> of this every thread instance</font>

194
00:10:08,730 --> 00:10:14,880
had in separate stack and we did through

195
00:10:12,750 --> 00:10:18,120
<font color="#CCCCCC">the API</font><font color="#E5E5E5"> for the control</font><font color="#CCCCCC"> plane separated</font>

196
00:10:14,880 --> 00:10:20,460
the application to each<font color="#E5E5E5"> code and we</font>

197
00:10:18,120 --> 00:10:25,560
<font color="#CCCCCC">manager from</font><font color="#E5E5E5"> the perspective of the user</font>

198
00:10:20,460 --> 00:10:27,270
<font color="#CCCCCC">you</font><font color="#E5E5E5"> see one box that do one thing</font><font color="#CCCCCC"> ok so</font>

199
00:10:25,560 --> 00:10:30,150
there<font color="#E5E5E5"> is a layer</font><font color="#CCCCCC"> of emulation</font><font color="#E5E5E5"> of</font>

200
00:10:27,270 --> 00:10:32,730
application on top of the TCP stack on

201
00:10:30,150 --> 00:10:33,390
top<font color="#E5E5E5"> of</font><font color="#CCCCCC"> DP DK</font><font color="#E5E5E5"> and everything is</font>

202
00:10:32,730 --> 00:10:36,240
event-driven

203
00:10:33,390 --> 00:10:40,380
every call<font color="#E5E5E5"> as an event you even look no</font>

204
00:10:36,240 --> 00:10:43,560
thread nothing no locks no interaction

205
00:10:40,380 --> 00:10:45,360
between<font color="#CCCCCC"> them it's only a messaging</font>

206
00:10:43,560 --> 00:10:48,750
between<font color="#CCCCCC"> the</font><font color="#E5E5E5"> core</font><font color="#CCCCCC"> and by that we can</font>

207
00:10:45,360 --> 00:10:52,950
<font color="#E5E5E5">reach really high</font><font color="#CCCCCC"> scale</font><font color="#E5E5E5"> this is an</font>

208
00:10:48,750 --> 00:10:55,350
<font color="#E5E5E5">example for the emulation</font><font color="#CCCCCC"> layer ok the</font>

209
00:10:52,950 --> 00:10:57,390
clients for<font color="#E5E5E5"> example do a request and</font>

210
00:10:55,350 --> 00:10:59,460
<font color="#CCCCCC">then</font><font color="#E5E5E5"> write for response and then can do</font>

211
00:10:57,390 --> 00:11:02,040
a delay of<font color="#E5E5E5"> random and then send another</font>

212
00:10:59,460 --> 00:11:04,410
request<font color="#CCCCCC"> wait for response and</font><font color="#E5E5E5"> close the</font>

213
00:11:02,040 --> 00:11:05,400
<font color="#E5E5E5">server-side</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> the opposite</font><font color="#CCCCCC"> you wait</font><font color="#E5E5E5"> for</font>

214
00:11:04,410 --> 00:11:09,089
the request

215
00:11:05,400 --> 00:11:11,660
<font color="#CCCCCC">and</font><font color="#E5E5E5"> response and so forth okay this is</font>

216
00:11:09,090 --> 00:11:16,320
just<font color="#E5E5E5"> them at their low world of the</font>

217
00:11:11,660 --> 00:11:18,630
<font color="#E5E5E5">lower level microcode that we have in</font>

218
00:11:16,320 --> 00:11:21,870
the<font color="#E5E5E5"> emulation layer let me show you a</font>

219
00:11:18,630 --> 00:11:24,780
real<font color="#E5E5E5"> profile remember the profile of the</font>

220
00:11:21,870 --> 00:11:27,360
stateless<font color="#E5E5E5"> it was Python</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> talk it's</font>

221
00:11:24,780 --> 00:11:31,110
talk<font color="#CCCCCC"> about streams here we are</font><font color="#E5E5E5"> talking</font>

222
00:11:27,360 --> 00:11:33,120
about<font color="#CCCCCC"> application on</font><font color="#E5E5E5"> top of TCP</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> so</font>

223
00:11:31,110 --> 00:11:36,180
in this example and we<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> utility</font>

224
00:11:33,120 --> 00:11:38,640
that<font color="#E5E5E5"> can take a</font><font color="#CCCCCC"> pickup file convert it</font>

225
00:11:36,180 --> 00:11:40,770
<font color="#CCCCCC">to the instruction that they the</font>

226
00:11:38,640 --> 00:11:43,890
emulation<font color="#CCCCCC"> layer understand and then</font>

227
00:11:40,770 --> 00:11:46,170
replay it on<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of the TCP stack from</font>

228
00:11:43,890 --> 00:11:49,439
the client<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> server and so forth</font>

229
00:11:46,170 --> 00:11:51,540
and by that reaching millions of levels

230
00:11:49,440 --> 00:11:55,500
millions of client talking to each<font color="#E5E5E5"> other</font>

231
00:11:51,540 --> 00:11:57,900
<font color="#CCCCCC">and</font><font color="#E5E5E5"> exercise</font><font color="#CCCCCC"> the device on</font><font color="#E5E5E5"> the test with</font>

232
00:11:55,500 --> 00:12:01,950
millions of flows<font color="#CCCCCC"> I will show</font>

233
00:11:57,900 --> 00:12:04,280
performance so just to drive in what we

234
00:12:01,950 --> 00:12:07,230
are<font color="#CCCCCC"> doing inside so from amulet from</font>

235
00:12:04,280 --> 00:12:09,270
simulation point of view from<font color="#E5E5E5"> the client</font>

236
00:12:07,230 --> 00:12:12,630
<font color="#CCCCCC">side we</font><font color="#E5E5E5"> are simulating creating a</font><font color="#CCCCCC"> socket</font>

237
00:12:09,270 --> 00:12:15,120
connect<font color="#E5E5E5"> once we got the syn synack we</font>

238
00:12:12,630 --> 00:12:17,820
are writing a<font color="#E5E5E5"> buffer to</font><font color="#CCCCCC"> the TCP stack</font>

239
00:12:15,120 --> 00:12:20,130
and then reading<font color="#E5E5E5"> this is an example of</font>

240
00:12:17,820 --> 00:12:23,130
<font color="#CCCCCC">write and then read and then</font><font color="#E5E5E5"> we close</font>

241
00:12:20,130 --> 00:12:25,200
the<font color="#CCCCCC"> flow from the server side</font><font color="#E5E5E5"> we don't</font>

242
00:12:23,130 --> 00:12:26,850
open<font color="#E5E5E5"> all the flow or the server side of</font>

243
00:12:25,200 --> 00:12:29,550
time because we<font color="#E5E5E5"> cannot do</font><font color="#CCCCCC"> that like</font>

244
00:12:26,850 --> 00:12:32,550
let's say we have a<font color="#CCCCCC"> medium</font><font color="#E5E5E5"> server we</font>

245
00:12:29,550 --> 00:12:35,810
won't do the bind and socket because we

246
00:12:32,550 --> 00:12:39,150
might not need<font color="#E5E5E5"> all of them so</font><font color="#CCCCCC"> we have a</font>

247
00:12:35,810 --> 00:12:43,349
special API to them because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> rewrote</font>

248
00:12:39,150 --> 00:12:45,600
the TCP stack from<font color="#CCCCCC"> BSD</font><font color="#E5E5E5"> we had a lazy</font>

249
00:12:43,350 --> 00:12:48,900
allocation once we get a packet<font color="#CCCCCC"> to a</font>

250
00:12:45,600 --> 00:12:51,630
server<font color="#E5E5E5"> we dynamically simulate</font>

251
00:12:48,900 --> 00:12:54,230
everything<font color="#CCCCCC"> like it created the socket</font>

252
00:12:51,630 --> 00:12:56,670
<font color="#E5E5E5">bind listen and then start the program</font>

253
00:12:54,230 --> 00:12:59,130
<font color="#E5E5E5">but you don't need to do that</font><font color="#CCCCCC"> right this</font>

254
00:12:56,670 --> 00:13:01,589
is internal<font color="#CCCCCC"> you just need to define what</font>

255
00:12:59,130 --> 00:13:04,800
you want<font color="#E5E5E5"> to do to provide the pickup</font><font color="#CCCCCC"> and</font>

256
00:13:01,590 --> 00:13:07,050
we<font color="#CCCCCC"> will do</font><font color="#E5E5E5"> it for you and get all the</font>

257
00:13:04,800 --> 00:13:10,560
statistics with this example is<font color="#CCCCCC"> to</font>

258
00:13:07,050 --> 00:13:13,410
template there is taunt of stone of

259
00:13:10,560 --> 00:13:16,140
<font color="#CCCCCC">statistics statistic is the God here</font>

260
00:13:13,410 --> 00:13:18,760
right we cannot miss even one packet<font color="#E5E5E5"> so</font>

261
00:13:16,140 --> 00:13:21,130
you can take a JSON<font color="#CCCCCC"> of all the counters</font>

262
00:13:18,760 --> 00:13:25,630
from the TCP stack from the flow<font color="#E5E5E5"> table</font>

263
00:13:21,130 --> 00:13:28,630
start from UDP<font color="#E5E5E5"> and from other layers of</font>

264
00:13:25,630 --> 00:13:32,860
the traffic generator<font color="#CCCCCC"> I want to touch</font>

265
00:13:28,630 --> 00:13:35,470
really one point of the complexity what

266
00:13:32,860 --> 00:13:39,130
we did<font color="#CCCCCC"> finish the real engine by the way</font>

267
00:13:35,470 --> 00:13:42,250
of the car<font color="#E5E5E5"> that I showed this before so</font>

268
00:13:39,130 --> 00:13:46,140
let's see what is the<font color="#E5E5E5"> problem with scale</font>

269
00:13:42,250 --> 00:13:49,060
with TCP<font color="#E5E5E5"> with this one flow of participe</font>

270
00:13:46,140 --> 00:13:54,100
<font color="#CCCCCC">okay in the transmit side</font><font color="#E5E5E5"> you have a</font>

271
00:13:49,060 --> 00:13:56,380
sliding<font color="#CCCCCC"> window let's say 32k 64k it is</font>

272
00:13:54,100 --> 00:13:58,660
how<font color="#E5E5E5"> the</font><font color="#CCCCCC"> M buff and buff is the layer</font>

273
00:13:56,380 --> 00:14:01,060
inside the<font color="#CCCCCC"> kernel that manage</font><font color="#E5E5E5"> the</font>

274
00:13:58,660 --> 00:14:04,930
<font color="#E5E5E5">pointer inside the packet which</font><font color="#CCCCCC"> is how a</font>

275
00:14:01,060 --> 00:14:06,729
<font color="#E5E5E5">packet look like</font><font color="#CCCCCC"> okay it's</font><font color="#E5E5E5"> knit 32k in</font>

276
00:14:04,930 --> 00:14:10,920
the worst case if we need ten millions

277
00:14:06,730 --> 00:14:15,760
flow let's do the math 10 million slow x

278
00:14:10,920 --> 00:14:19,089
<font color="#CCCCCC">32 k it's about close to</font><font color="#E5E5E5"> half a gig of</font>

279
00:14:15,760 --> 00:14:21,400
memory<font color="#E5E5E5"> but we cannot have half a gig</font><font color="#CCCCCC"> of</font>

280
00:14:19,090 --> 00:14:26,350
memory<font color="#CCCCCC"> for</font><font color="#E5E5E5"> ten millions flow we support</font>

281
00:14:21,400 --> 00:14:29,560
40 million flows<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so what we did is</font>

282
00:14:26,350 --> 00:14:33,100
we<font color="#CCCCCC"> changed the api of the stack</font><font color="#E5E5E5"> instead</font>

283
00:14:29,560 --> 00:14:35,469
<font color="#CCCCCC">of pushing</font><font color="#E5E5E5"> the data to the stack the</font>

284
00:14:33,100 --> 00:14:35,890
stack is asking<font color="#CCCCCC"> us</font><font color="#E5E5E5"> asking the data from</font>

285
00:14:35,470 --> 00:14:38,260
us

286
00:14:35,890 --> 00:14:40,360
from<font color="#E5E5E5"> the upper layer and by that we are</font>

287
00:14:38,260 --> 00:14:43,510
<font color="#E5E5E5">saving a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> see we can use</font>

288
00:14:40,360 --> 00:14:47,020
for<font color="#E5E5E5"> 10 million flow only dot one gig of</font>

289
00:14:43,510 --> 00:14:50,730
<font color="#CCCCCC">memory and you don't need</font><font color="#E5E5E5"> to do anything</font>

290
00:14:47,020 --> 00:14:53,890
<font color="#E5E5E5">you just need</font><font color="#CCCCCC"> to write</font><font color="#E5E5E5"> to use one of the</font>

291
00:14:50,730 --> 00:14:56,470
the profiles<font color="#E5E5E5"> that already have and</font><font color="#CCCCCC"> you</font>

292
00:14:53,890 --> 00:14:58,630
change<font color="#E5E5E5"> it a bit</font><font color="#CCCCCC"> and we will do</font><font color="#E5E5E5"> it for</font>

293
00:14:56,470 --> 00:15:00,910
you the same problem happened in the<font color="#E5E5E5"> RX</font>

294
00:14:58,630 --> 00:15:03,340
<font color="#CCCCCC">ID</font><font color="#E5E5E5"> when there is a drop there is a</font>

295
00:15:00,910 --> 00:15:08,829
<font color="#CCCCCC">windows that try to accumulate</font>

296
00:15:03,340 --> 00:15:12,820
everything<font color="#CCCCCC"> ok and just to</font><font color="#E5E5E5"> show you the</font>

297
00:15:08,830 --> 00:15:17,110
last comparison we<font color="#E5E5E5"> compare Ingenix with</font>

298
00:15:12,820 --> 00:15:21,250
t-rex to<font color="#E5E5E5"> t-rex client and server and the</font>

299
00:15:17,110 --> 00:15:22,870
performance is<font color="#CCCCCC"> facto</font><font color="#E5E5E5"> 100 faster and from</font>

300
00:15:21,250 --> 00:15:25,790
memory<font color="#E5E5E5"> perspective is free order</font><font color="#CCCCCC"> of</font>

301
00:15:22,870 --> 00:15:26,200
magnitude that's it

302
00:15:25,790 --> 00:15:33,598
<font color="#E5E5E5">you</font>

303
00:15:26,200 --> 00:15:33,599
[Applause]

