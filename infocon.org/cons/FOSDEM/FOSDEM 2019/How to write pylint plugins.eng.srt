1
00:00:04,859 --> 00:00:11,080
hello good morning<font color="#E5E5E5"> okay now that you're</font>

2
00:00:08,830 --> 00:00:13,840
awake<font color="#E5E5E5"> my name is Alex and I'm going to</font>

3
00:00:11,080 --> 00:00:16,329
<font color="#E5E5E5">talk about</font><font color="#CCCCCC"> violent</font><font color="#E5E5E5"> plugins I'm going to</font>

4
00:00:13,840 --> 00:00:18,240
talk a little bit<font color="#CCCCCC"> about</font><font color="#E5E5E5"> tokenization a</font>

5
00:00:16,329 --> 00:00:21,459
little bit about abstract syntax trees

6
00:00:18,240 --> 00:00:24,310
but the question is why do we<font color="#E5E5E5"> need to</font>

7
00:00:21,460 --> 00:00:26,380
have customized<font color="#E5E5E5"> plugins</font><font color="#CCCCCC"> why do we need</font>

8
00:00:24,310 --> 00:00:29,320
<font color="#E5E5E5">to have even more linters on top of</font>

9
00:00:26,380 --> 00:00:30,880
whatever<font color="#E5E5E5"> we are already using and why do</font>

10
00:00:29,320 --> 00:00:33,010
we<font color="#CCCCCC"> need to have to link which will</font>

11
00:00:30,880 --> 00:00:36,219
ultimately<font color="#E5E5E5"> tell you your source code is</font>

12
00:00:33,010 --> 00:00:37,899
wrong you have<font color="#E5E5E5"> to fix this and my answer</font>

13
00:00:36,219 --> 00:00:40,629
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the existing tools are not</font>

14
00:00:37,899 --> 00:00:43,839
always enough and static<font color="#E5E5E5"> analysis tools</font>

15
00:00:40,629 --> 00:00:46,149
like<font color="#CCCCCC"> plug-in like</font><font color="#E5E5E5"> pilant are very easy</font>

16
00:00:43,839 --> 00:00:47,979
to extend<font color="#E5E5E5"> they can help you make your</font>

17
00:00:46,149 --> 00:00:52,569
<font color="#CCCCCC">software better</font><font color="#E5E5E5"> and I will show you some</font>

18
00:00:47,979 --> 00:00:55,179
<font color="#E5E5E5">examples so one use cases you</font><font color="#CCCCCC"> want to</font>

19
00:00:52,569 --> 00:00:56,920
enforce particular coding style<font color="#E5E5E5"> this can</font>

20
00:00:55,179 --> 00:00:59,049
be something which is not valid<font color="#CCCCCC"> for the</font>

21
00:00:56,920 --> 00:01:01,420
broader Python community<font color="#E5E5E5"> this can be</font>

22
00:00:59,049 --> 00:01:03,190
only valid<font color="#CCCCCC"> for your own company or</font><font color="#E5E5E5"> maybe</font>

23
00:01:01,420 --> 00:01:06,700
only<font color="#E5E5E5"> in the team that</font><font color="#CCCCCC"> you work in</font><font color="#E5E5E5"> or</font>

24
00:01:03,190 --> 00:01:08,229
more<font color="#CCCCCC"> more commonly</font><font color="#E5E5E5"> valid only in the</font>

25
00:01:06,700 --> 00:01:09,820
<font color="#E5E5E5">current project</font><font color="#CCCCCC"> and that can be</font>

26
00:01:08,229 --> 00:01:13,750
different<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> of the projects</font>

27
00:01:09,820 --> 00:01:16,329
in the company in QT CMS that's an<font color="#E5E5E5"> open</font>

28
00:01:13,750 --> 00:01:18,430
source project<font color="#E5E5E5"> I work on we like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

29
00:01:16,329 --> 00:01:19,990
documentation strings with three<font color="#E5E5E5"> double</font>

30
00:01:18,430 --> 00:01:21,609
quotes<font color="#E5E5E5"> and we don't like to have the</font>

31
00:01:19,990 --> 00:01:23,979
rest of the<font color="#E5E5E5"> styles which are perfectly</font>

32
00:01:21,609 --> 00:01:25,329
<font color="#E5E5E5">valid Python stands for documentation</font>

33
00:01:23,979 --> 00:01:27,670
strings which is like three double

34
00:01:25,329 --> 00:01:30,070
quotes<font color="#E5E5E5"> and we have a customized</font><font color="#CCCCCC"> pilot</font>

35
00:01:27,670 --> 00:01:32,079
<font color="#E5E5E5">plug-in which we discover this for us we</font>

36
00:01:30,070 --> 00:01:35,079
can fix<font color="#E5E5E5"> it and we can keep all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

37
00:01:32,079 --> 00:01:37,419
source code<font color="#E5E5E5"> in the same way so you can</font>

38
00:01:35,079 --> 00:01:39,969
do things<font color="#CCCCCC"> like let's say you have client</font>

39
00:01:37,420 --> 00:01:42,070
and server<font color="#E5E5E5"> relationships in your</font>

40
00:01:39,969 --> 00:01:44,649
application<font color="#CCCCCC"> you may want to name them</font>

41
00:01:42,070 --> 00:01:46,898
the<font color="#CCCCCC"> same way so both the client both the</font>

42
00:01:44,649 --> 00:01:49,659
server start with the same name and then

43
00:01:46,899 --> 00:01:51,490
you have client at the<font color="#E5E5E5"> end server at the</font>

44
00:01:49,659 --> 00:01:53,469
end<font color="#E5E5E5"> easy to find easy to</font><font color="#CCCCCC"> grip</font><font color="#E5E5E5"> in the</font>

45
00:01:51,490 --> 00:01:57,460
<font color="#CCCCCC">source code if you like you can do all</font>

46
00:01:53,469 --> 00:01:59,259
<font color="#CCCCCC">sorts of stuff</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> example is you</font>

47
00:01:57,460 --> 00:02:02,169
<font color="#E5E5E5">are using a lot of</font><font color="#CCCCCC"> frameworks a lot of</font>

48
00:01:59,259 --> 00:02:04,719
libraries<font color="#CCCCCC"> they have best practices they</font>

49
00:02:02,170 --> 00:02:06,640
have<font color="#E5E5E5"> some recommendations that you need</font>

50
00:02:04,719 --> 00:02:10,739
to<font color="#CCCCCC"> follow</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example if you're using</font>

51
00:02:06,640 --> 00:02:13,210
<font color="#E5E5E5">jungle</font><font color="#CCCCCC"> disturbs you don't hard-code</font>

52
00:02:10,740 --> 00:02:15,690
<font color="#E5E5E5">authentication user as a foreign key</font>

53
00:02:13,210 --> 00:02:17,980
relationship because<font color="#E5E5E5"> this can be changed</font>

54
00:02:15,690 --> 00:02:20,440
<font color="#CCCCCC">you should be using a setting</font>

55
00:02:17,980 --> 00:02:23,319
for that and also<font color="#E5E5E5"> jungle tells you don't</font>

56
00:02:20,440 --> 00:02:25,480
<font color="#E5E5E5">issue queries directly against</font><font color="#CCCCCC"> the user</font>

57
00:02:23,319 --> 00:02:27,640
model because<font color="#CCCCCC"> that can be changed we</font>

58
00:02:25,480 --> 00:02:30,010
have a helper function which will give

59
00:02:27,640 --> 00:02:33,488
you<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual model</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> runtime and you</font>

60
00:02:30,010 --> 00:02:35,230
can query that and all<font color="#E5E5E5"> of this is</font>

61
00:02:33,489 --> 00:02:38,440
designed<font color="#CCCCCC"> to facilitate downstream</font>

62
00:02:35,230 --> 00:02:40,298
applications<font color="#CCCCCC"> who may wish</font><font color="#E5E5E5"> to change the</font>

63
00:02:38,440 --> 00:02:44,230
stock user model and provide<font color="#CCCCCC"> something</font>

64
00:02:40,299 --> 00:02:47,319
else<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the default so this is</font>

65
00:02:44,230 --> 00:02:49,238
one way<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> your application aware</font>

66
00:02:47,319 --> 00:02:52,540
of these things<font color="#E5E5E5"> make it follow the</font>

67
00:02:49,239 --> 00:02:54,879
practices<font color="#E5E5E5"> another</font><font color="#CCCCCC"> example is we are</font>

68
00:02:52,540 --> 00:02:57,239
using<font color="#E5E5E5"> a jungle simple simple history to</font>

69
00:02:54,879 --> 00:03:00,370
keep track<font color="#E5E5E5"> of changes to some objects</font>

70
00:02:57,239 --> 00:03:03,340
<font color="#CCCCCC">and jungle simple history works with</font>

71
00:03:00,370 --> 00:03:07,079
model safe<font color="#E5E5E5"> so if you're using objects</font>

72
00:03:03,340 --> 00:03:09,730
<font color="#E5E5E5">dot update or bulk create this doesn't</font>

73
00:03:07,079 --> 00:03:11,530
use the safe method so we skip history

74
00:03:09,730 --> 00:03:13,720
we don't<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> use these methods</font><font color="#CCCCCC"> again</font>

75
00:03:11,530 --> 00:03:17,890
<font color="#CCCCCC">customize file in plugins so we are</font>

76
00:03:13,720 --> 00:03:21,190
aware<font color="#E5E5E5"> not doing this another</font><font color="#CCCCCC"> example is</font>

77
00:03:17,890 --> 00:03:24,358
this is especially<font color="#E5E5E5"> true in big projects</font>

78
00:03:21,190 --> 00:03:27,099
in legacy<font color="#E5E5E5"> projects</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> all source code</font>

79
00:03:24,359 --> 00:03:29,739
you can use static analysis tools to

80
00:03:27,099 --> 00:03:33,220
help you<font color="#E5E5E5"> find possible sources</font><font color="#CCCCCC"> of</font>

81
00:03:29,739 --> 00:03:35,260
<font color="#E5E5E5">problems of bugs and we have had the</font>

82
00:03:33,220 --> 00:03:38,769
problem<font color="#E5E5E5"> of missing</font><font color="#CCCCCC"> permission</font><font color="#E5E5E5"> so we have</font>

83
00:03:35,260 --> 00:03:41,048
views which process<font color="#E5E5E5"> requests from the</font>

84
00:03:38,769 --> 00:03:43,720
<font color="#E5E5E5">from the browser and they are missing</font>

85
00:03:41,049 --> 00:03:45,489
<font color="#E5E5E5">the permission required decorator so</font>

86
00:03:43,720 --> 00:03:48,310
that's that's really<font color="#E5E5E5"> bad and we've seen</font>

87
00:03:45,489 --> 00:03:50,889
this a<font color="#CCCCCC"> few times figured</font><font color="#E5E5E5"> ok let's create</font>

88
00:03:48,310 --> 00:03:52,569
a plug-in<font color="#CCCCCC"> for pilant and find all the</font>

89
00:03:50,889 --> 00:03:55,000
places<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the source code that</font><font color="#E5E5E5"> may be</font>

90
00:03:52,569 --> 00:03:57,250
missing these permissions and so we have

91
00:03:55,000 --> 00:03:59,769
a list of them we can go<font color="#CCCCCC"> check them out</font>

92
00:03:57,250 --> 00:04:02,769
<font color="#E5E5E5">and figure out what's going</font><font color="#CCCCCC"> on if</font><font color="#E5E5E5"> we add</font>

93
00:03:59,769 --> 00:04:05,200
a new view later and forget to add the

94
00:04:02,769 --> 00:04:08,639
permissions to that<font color="#E5E5E5"> the plug-in</font><font color="#CCCCCC"> would</font>

95
00:04:05,200 --> 00:04:12,369
have us so it's like nice mechanism<font color="#E5E5E5"> to</font>

96
00:04:08,639 --> 00:04:17,228
<font color="#E5E5E5">do very easily very</font><font color="#CCCCCC"> quickly find some</font>

97
00:04:12,370 --> 00:04:19,239
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> before we</font><font color="#E5E5E5"> continue to things</font>

98
00:04:17,228 --> 00:04:22,630
that<font color="#CCCCCC"> are important you just</font><font color="#E5E5E5"> need to know</font>

99
00:04:19,238 --> 00:04:24,760
that<font color="#CCCCCC"> they happen it</font><font color="#E5E5E5"> it's not necessary</font>

100
00:04:22,630 --> 00:04:27,849
<font color="#CCCCCC">to know how</font><font color="#E5E5E5"> they work in details under</font>

101
00:04:24,760 --> 00:04:29,680
the<font color="#E5E5E5"> hood this is</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> first thing is</font>

102
00:04:27,849 --> 00:04:30,900
parsing or<font color="#E5E5E5"> lexical analysis or</font>

103
00:04:29,680 --> 00:04:33,090
tokenization

104
00:04:30,900 --> 00:04:38,190
the other thing is building<font color="#E5E5E5"> abstract</font>

105
00:04:33,090 --> 00:04:42,210
syntax trees from the source code<font color="#E5E5E5"> so</font>

106
00:04:38,190 --> 00:04:45,060
first you<font color="#E5E5E5"> have input which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the files</font>

107
00:04:42,210 --> 00:04:47,130
of your<font color="#E5E5E5"> program this is all character</font>

108
00:04:45,060 --> 00:04:50,820
<font color="#E5E5E5">input</font><font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> mean</font><font color="#CCCCCC"> anything to the to</font>

109
00:04:47,130 --> 00:04:53,280
link<font color="#CCCCCC"> it goes through this box which is</font>

110
00:04:50,820 --> 00:04:55,229
parsing tokenization lexical analysis

111
00:04:53,280 --> 00:04:57,780
<font color="#E5E5E5">and we get another data structure with</font>

112
00:04:55,229 --> 00:04:59,340
<font color="#E5E5E5">which has a little</font><font color="#CCCCCC"> bit more meaning so</font>

113
00:04:57,780 --> 00:05:01,979
in my example you see we have a<font color="#CCCCCC"> keyword</font>

114
00:04:59,340 --> 00:05:04,349
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> identifiers we have operators</font><font color="#E5E5E5"> we</font>

115
00:05:01,979 --> 00:05:06,300
have numeric constants<font color="#E5E5E5"> this is something</font>

116
00:05:04,350 --> 00:05:08,580
that static analysis tooling can work

117
00:05:06,300 --> 00:05:11,039
with a lot<font color="#E5E5E5"> more easily and you can</font><font color="#CCCCCC"> use</font>

118
00:05:08,580 --> 00:05:14,789
this information<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> decisions about</font>

119
00:05:11,039 --> 00:05:17,190
<font color="#E5E5E5">your source code the organization is</font>

120
00:05:14,789 --> 00:05:18,719
Python<font color="#CCCCCC"> is very easy</font><font color="#E5E5E5"> we have the</font>

121
00:05:17,190 --> 00:05:20,490
<font color="#E5E5E5">tokenized module which provides the</font>

122
00:05:18,720 --> 00:05:23,460
tokenized function this function

123
00:05:20,490 --> 00:05:26,430
receives<font color="#E5E5E5"> a single</font><font color="#CCCCCC"> argument which must</font>

124
00:05:23,460 --> 00:05:28,260
behave like the red line method<font color="#E5E5E5"> so if</font>

125
00:05:26,430 --> 00:05:30,599
you're working<font color="#E5E5E5"> with</font><font color="#CCCCCC"> raw objects then</font>

126
00:05:28,260 --> 00:05:33,030
file object dot readline<font color="#CCCCCC"> should work</font><font color="#E5E5E5"> if</font>

127
00:05:30,599 --> 00:05:36,150
you're working<font color="#E5E5E5"> with strings</font><font color="#CCCCCC"> you have to</font>

128
00:05:33,030 --> 00:05:38,489
wrap them in a<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> say your object and</font>

129
00:05:36,150 --> 00:05:40,979
use<font color="#E5E5E5"> the red line method the result of</font>

130
00:05:38,490 --> 00:05:42,599
<font color="#E5E5E5">tokenize is a generator which we will</font>

131
00:05:40,979 --> 00:05:45,810
<font color="#E5E5E5">return talking in future</font><font color="#CCCCCC"> Bo objects</font>

132
00:05:42,599 --> 00:05:48,780
talking<font color="#E5E5E5"> it with a</font><font color="#CCCCCC"> named tuple type it</font>

133
00:05:45,810 --> 00:05:51,570
has<font color="#E5E5E5"> five elements so token type is an</font>

134
00:05:48,780 --> 00:05:54,239
integer constant<font color="#E5E5E5"> and also these names in</font>

135
00:05:51,570 --> 00:05:56,099
the brackets<font color="#CCCCCC"> these are constants</font><font color="#E5E5E5"> defined</font>

136
00:05:54,240 --> 00:05:59,130
in the<font color="#CCCCCC"> tokenize module</font><font color="#E5E5E5"> so you can use</font>

137
00:05:56,099 --> 00:06:02,280
them as well<font color="#E5E5E5"> you have the token</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> as</font>

138
00:05:59,130 --> 00:06:04,979
a string<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> start and end position</font>

139
00:06:02,280 --> 00:06:07,169
of this token in<font color="#CCCCCC"> D in the input</font>

140
00:06:04,979 --> 00:06:10,110
character stream<font color="#CCCCCC"> a stupa so these are</font>

141
00:06:07,169 --> 00:06:12,510
starting<font color="#E5E5E5"> row starting column and row and</font>

142
00:06:10,110 --> 00:06:15,120
column<font color="#E5E5E5"> of this token and then</font><font color="#CCCCCC"> you have</font>

143
00:06:12,510 --> 00:06:17,880
the entire line<font color="#E5E5E5"> which is currently being</font>

144
00:06:15,120 --> 00:06:20,220
inspected by the<font color="#E5E5E5"> tokenizer so this is</font>

145
00:06:17,880 --> 00:06:22,080
all the output<font color="#E5E5E5"> the tokenize gives you</font>

146
00:06:20,220 --> 00:06:24,150
this is how the hello world example

147
00:06:22,080 --> 00:06:29,010
looks like<font color="#E5E5E5"> and you can experiment with</font>

148
00:06:24,150 --> 00:06:32,010
<font color="#E5E5E5">it so it is very easy</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> experiment with</font>

149
00:06:29,010 --> 00:06:34,500
<font color="#E5E5E5">that</font><font color="#CCCCCC"> see how</font><font color="#E5E5E5"> different pieces of source</font>

150
00:06:32,010 --> 00:06:37,080
code look like to the tokenizer

151
00:06:34,500 --> 00:06:38,729
<font color="#CCCCCC">this is the first step that all static</font>

152
00:06:37,080 --> 00:06:43,380
analysis tools do this is also<font color="#E5E5E5"> done</font>

153
00:06:38,729 --> 00:06:44,430
<font color="#CCCCCC">internally by</font><font color="#E5E5E5"> Python as well so next</font>

154
00:06:43,380 --> 00:06:47,490
<font color="#E5E5E5">thing is a</font>

155
00:06:44,430 --> 00:06:49,350
<font color="#CCCCCC">Struck's industries sounds very</font>

156
00:06:47,490 --> 00:06:52,220
complicated again used internally<font color="#E5E5E5"> by a</font>

157
00:06:49,350 --> 00:06:55,169
lot of tooling used internally by<font color="#CCCCCC"> Python</font>

158
00:06:52,220 --> 00:06:56,789
<font color="#E5E5E5">but if you want to work with</font><font color="#CCCCCC"> them you</font>

159
00:06:55,169 --> 00:06:59,789
<font color="#CCCCCC">don't really</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> how they are</font>

160
00:06:56,789 --> 00:07:01,259
<font color="#E5E5E5">constructed</font><font color="#CCCCCC"> or all the details behind</font>

161
00:06:59,789 --> 00:07:03,210
out you just<font color="#E5E5E5"> need to know that</font><font color="#CCCCCC"> it's a</font>

162
00:07:01,259 --> 00:07:05,430
three<font color="#E5E5E5"> base structure it's very similar</font>

163
00:07:03,210 --> 00:07:09,150
to<font color="#E5E5E5"> Dom trees in the browser or to XML</font>

164
00:07:05,430 --> 00:07:11,520
trees<font color="#E5E5E5"> you have child nodes parent nodes</font>

165
00:07:09,150 --> 00:07:13,169
you have<font color="#CCCCCC"> siblings you have different</font>

166
00:07:11,520 --> 00:07:15,030
types of nodes<font color="#CCCCCC"> they have different types</font>

167
00:07:13,169 --> 00:07:18,960
types of attributes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can work</font>

168
00:07:15,030 --> 00:07:21,780
<font color="#E5E5E5">with them pretty much very easily</font><font color="#CCCCCC"> all</font>

169
00:07:18,960 --> 00:07:23,820
<font color="#E5E5E5">these different colors they are objects</font>

170
00:07:21,780 --> 00:07:26,219
from different<font color="#CCCCCC"> types in</font><font color="#E5E5E5"> Python and this</font>

171
00:07:23,820 --> 00:07:30,810
is how you can recognize<font color="#E5E5E5"> them internally</font>

172
00:07:26,220 --> 00:07:33,449
<font color="#CCCCCC">when you're writing plug-ins creating</font>

173
00:07:30,810 --> 00:07:36,060
<font color="#CCCCCC">abstract syntax trees again very easy we</font>

174
00:07:33,449 --> 00:07:38,310
have the<font color="#CCCCCC"> ast model which is built-in in</font>

175
00:07:36,060 --> 00:07:40,620
Python<font color="#E5E5E5"> that is used by Python internally</font>

176
00:07:38,310 --> 00:07:43,650
also<font color="#CCCCCC"> used by some other tooling like</font>

177
00:07:40,620 --> 00:07:47,340
cosmic ray however pilant<font color="#E5E5E5"> does not use</font>

178
00:07:43,650 --> 00:07:49,919
<font color="#CCCCCC">AST</font><font color="#E5E5E5"> pilant uses</font><font color="#CCCCCC"> astro</font><font color="#E5E5E5"> ID which</font><font color="#CCCCCC"> is an</font>

179
00:07:47,340 --> 00:07:51,659
external dependency very similar<font color="#E5E5E5"> to the</font>

180
00:07:49,919 --> 00:07:53,430
<font color="#CCCCCC">built-in</font><font color="#E5E5E5"> module almost everything is</font>

181
00:07:51,660 --> 00:07:56,460
named in the same way but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to be</font>

182
00:07:53,430 --> 00:07:58,650
aware that it's a different<font color="#CCCCCC"> module so</font><font color="#E5E5E5"> we</font>

183
00:07:56,460 --> 00:08:01,320
have the parse function<font color="#E5E5E5"> provided by</font>

184
00:07:58,650 --> 00:08:04,198
<font color="#CCCCCC">Astro ID this will receive a string</font><font color="#E5E5E5"> can</font>

185
00:08:01,320 --> 00:08:06,719
we return<font color="#E5E5E5"> asteroid</font><font color="#CCCCCC"> inode the root node</font>

186
00:08:04,199 --> 00:08:09,030
is<font color="#CCCCCC"> the module so everything that</font>

187
00:08:06,720 --> 00:08:10,979
Australia<font color="#CCCCCC"> parsed this is represented as</font>

188
00:08:09,030 --> 00:08:14,570
a module which contains<font color="#E5E5E5"> something else</font>

189
00:08:10,979 --> 00:08:17,250
inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it so we</font><font color="#E5E5E5"> have in this</font><font color="#CCCCCC"> example</font>

190
00:08:14,570 --> 00:08:18,659
the module<font color="#CCCCCC"> does have a very</font><font color="#E5E5E5"> interesting</font>

191
00:08:17,250 --> 00:08:20,250
attributes<font color="#E5E5E5"> because it doesn't come from</font>

192
00:08:18,659 --> 00:08:22,710
<font color="#CCCCCC">the file system it doesn't have a name</font>

193
00:08:20,250 --> 00:08:25,070
<font color="#E5E5E5">but it has a body which is a list of</font>

194
00:08:22,710 --> 00:08:27,690
expressions<font color="#E5E5E5"> or expressions in the module</font>

195
00:08:25,070 --> 00:08:29,940
<font color="#E5E5E5">and we have a single expression in this</font>

196
00:08:27,690 --> 00:08:32,099
list which is a call<font color="#CCCCCC"> to a function with</font>

197
00:08:29,940 --> 00:08:34,860
the name print<font color="#E5E5E5"> this function receives</font>

198
00:08:32,099 --> 00:08:36,599
<font color="#E5E5E5">arguments which is again a list and we</font>

199
00:08:34,860 --> 00:08:38,849
have<font color="#E5E5E5"> only one argument which is a string</font>

200
00:08:36,599 --> 00:08:41,729
constant<font color="#E5E5E5"> in this example and we don't</font>

201
00:08:38,849 --> 00:08:43,589
have<font color="#E5E5E5"> any keyword arguments so again you</font>

202
00:08:41,729 --> 00:08:45,690
can experiment<font color="#E5E5E5"> in the interactive</font>

203
00:08:43,589 --> 00:08:47,970
interpreter or you can create<font color="#CCCCCC"> a small</font>

204
00:08:45,690 --> 00:08:54,060
<font color="#E5E5E5">stripling experiment see how different</font>

205
00:08:47,970 --> 00:08:56,459
pieces of<font color="#E5E5E5"> code look like to ast this is</font>

206
00:08:54,060 --> 00:08:57,969
<font color="#E5E5E5">relatively well documented library what</font>

207
00:08:56,459 --> 00:09:01,388
you're going<font color="#CCCCCC"> to need most of</font><font color="#E5E5E5"> the time</font>

208
00:08:57,970 --> 00:09:04,089
is the list<font color="#E5E5E5"> of four</font><font color="#CCCCCC"> classes you need</font><font color="#E5E5E5"> to</font>

209
00:09:01,389 --> 00:09:05,769
know their<font color="#E5E5E5"> names and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will see why in</font>

210
00:09:04,089 --> 00:09:06,489
a second<font color="#E5E5E5"> and you need to know their</font>

211
00:09:05,769 --> 00:09:08,259
attributes

212
00:09:06,489 --> 00:09:11,019
there are also some helper<font color="#CCCCCC"> methods some</font>

213
00:09:08,259 --> 00:09:11,470
helper functions that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> may want to</font>

214
00:09:11,019 --> 00:09:13,269
use

215
00:09:11,470 --> 00:09:16,470
they are usually<font color="#E5E5E5"> defined in in the base</font>

216
00:09:13,269 --> 00:09:20,709
<font color="#E5E5E5">classes so again experiment with that</font>

217
00:09:16,470 --> 00:09:23,109
<font color="#E5E5E5">you figure out how it works makes this</font>

218
00:09:20,709 --> 00:09:25,169
<font color="#CCCCCC">pilant check our interfaces</font><font color="#E5E5E5"> this is the</font>

219
00:09:23,109 --> 00:09:28,019
internal<font color="#E5E5E5"> machinery that</font><font color="#CCCCCC"> Pyland</font><font color="#E5E5E5"> provides</font>

220
00:09:25,169 --> 00:09:32,319
for you the developer to hook into the

221
00:09:28,019 --> 00:09:34,119
analysis<font color="#E5E5E5"> process and be</font><font color="#CCCCCC"> able to to</font>

222
00:09:32,319 --> 00:09:35,949
create<font color="#CCCCCC"> the</font><font color="#E5E5E5"> plugins this is also the</font>

223
00:09:34,119 --> 00:09:38,409
machinery<font color="#E5E5E5"> that pilant itself uses</font>

224
00:09:35,949 --> 00:09:40,329
internally so all the checks<font color="#E5E5E5"> that you</font>

225
00:09:38,409 --> 00:09:41,919
have all the errors<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you see when</font>

226
00:09:40,329 --> 00:09:44,199
you work with<font color="#CCCCCC"> pilant they are</font>

227
00:09:41,919 --> 00:09:47,470
implemented<font color="#CCCCCC"> with these four interfaces</font>

228
00:09:44,199 --> 00:09:51,899
<font color="#E5E5E5">and they are also implemented under as</font>

229
00:09:47,470 --> 00:09:53,649
if they were plugins<font color="#E5E5E5"> so the same thing</font>

230
00:09:51,899 --> 00:09:56,559
the names are pretty much

231
00:09:53,649 --> 00:09:58,119
self-explanatory<font color="#CCCCCC"> so we have open</font><font color="#E5E5E5"> and</font>

232
00:09:56,559 --> 00:10:00,969
<font color="#CCCCCC">closed which are</font><font color="#E5E5E5"> executed at the</font>

233
00:09:58,119 --> 00:10:03,789
<font color="#E5E5E5">beginning and at the end then</font><font color="#CCCCCC"> you have</font>

234
00:10:00,970 --> 00:10:05,739
the role checker interface<font color="#E5E5E5"> this is not</font>

235
00:10:03,789 --> 00:10:10,239
<font color="#E5E5E5">very often used only in a few places</font>

236
00:10:05,739 --> 00:10:13,359
used<font color="#E5E5E5"> process modules receives the result</font>

237
00:10:10,239 --> 00:10:14,889
of a straight<font color="#E5E5E5"> pars so you can scan the</font>

238
00:10:13,359 --> 00:10:16,779
entire<font color="#E5E5E5"> module as a whole if you wish</font>

239
00:10:14,889 --> 00:10:19,209
<font color="#E5E5E5">then you have the token checker</font>

240
00:10:16,779 --> 00:10:21,669
interface which provides<font color="#CCCCCC"> process tokens</font>

241
00:10:19,209 --> 00:10:25,419
<font color="#CCCCCC">method this receives the result of</font>

242
00:10:21,669 --> 00:10:27,579
tokenize<font color="#E5E5E5"> and the most commonly used more</font>

243
00:10:25,419 --> 00:10:30,699
than<font color="#E5E5E5"> 90% of the time is the</font><font color="#CCCCCC"> Astro ad</font>

244
00:10:27,579 --> 00:10:33,309
checker interface this will respond<font color="#E5E5E5"> to</font>

245
00:10:30,699 --> 00:10:35,319
visit and<font color="#E5E5E5"> leaf methods and the exact</font>

246
00:10:33,309 --> 00:10:39,519
name<font color="#CCCCCC"> of these methods</font><font color="#E5E5E5"> is depending only</font>

247
00:10:35,319 --> 00:10:42,098
on the class name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> object of</font><font color="#E5E5E5"> the</font>

248
00:10:39,519 --> 00:10:43,539
<font color="#CCCCCC">node that</font><font color="#E5E5E5"> you want to inspect so for</font>

249
00:10:42,099 --> 00:10:46,119
<font color="#E5E5E5">example if you want to inspect a</font>

250
00:10:43,539 --> 00:10:48,879
function the<font color="#CCCCCC"> asteroid know</font><font color="#E5E5E5"> is function</font>

251
00:10:46,119 --> 00:10:50,439
<font color="#E5E5E5">deff so you can define a</font><font color="#CCCCCC"> metal visit</font>

252
00:10:48,879 --> 00:10:53,109
underscore function<font color="#E5E5E5"> therefore leave</font>

253
00:10:50,439 --> 00:10:55,029
underscore<font color="#CCCCCC"> function</font><font color="#E5E5E5"> deff or if you want</font>

254
00:10:53,109 --> 00:10:57,339
<font color="#E5E5E5">to inspect the class definition this is</font>

255
00:10:55,029 --> 00:10:59,470
visit underscore class there<font color="#E5E5E5"> with leave</font>

256
00:10:57,339 --> 00:11:02,319
underscore class def so that's why you

257
00:10:59,470 --> 00:11:06,179
need<font color="#CCCCCC"> to know the names and the order of</font>

258
00:11:02,319 --> 00:11:08,738
execution is this so<font color="#E5E5E5"> from top to bottom</font>

259
00:11:06,179 --> 00:11:11,289
you<font color="#E5E5E5"> can implement more than one</font>

260
00:11:08,739 --> 00:11:12,190
<font color="#E5E5E5">interface in your</font><font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> and the order</font>

261
00:11:11,289 --> 00:11:14,930
is important

262
00:11:12,190 --> 00:11:17,240
another important<font color="#CCCCCC"> thing the order of</font>

263
00:11:14,930 --> 00:11:19,910
execution of visit methods<font color="#E5E5E5"> live</font><font color="#CCCCCC"> map this</font>

264
00:11:17,240 --> 00:11:22,100
is depth first and this<font color="#E5E5E5"> is important</font>

265
00:11:19,910 --> 00:11:23,709
<font color="#E5E5E5">because you can use it and build some</font>

266
00:11:22,100 --> 00:11:26,150
sort<font color="#E5E5E5"> of state machine in your</font><font color="#CCCCCC"> plugin</font>

267
00:11:23,710 --> 00:11:28,280
collect some information<font color="#CCCCCC"> in the children</font>

268
00:11:26,150 --> 00:11:30,980
<font color="#E5E5E5">and when you are leaving the parent node</font>

269
00:11:28,280 --> 00:11:32,959
<font color="#E5E5E5">you note that all the children</font><font color="#CCCCCC"> have been</font>

270
00:11:30,980 --> 00:11:38,270
visited<font color="#E5E5E5"> and you have all the</font><font color="#CCCCCC"> information</font>

271
00:11:32,960 --> 00:11:41,240
for them you<font color="#E5E5E5"> can make decision next</font>

272
00:11:38,270 --> 00:11:43,520
<font color="#E5E5E5">let's create a</font><font color="#CCCCCC"> pilant plug-in skeleton</font>

273
00:11:41,240 --> 00:11:46,460
<font color="#E5E5E5">so this is the hello world of violent</font>

274
00:11:43,520 --> 00:11:48,319
<font color="#CCCCCC">plugins every module</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is valid</font>

275
00:11:46,460 --> 00:11:50,570
valid Python module that provides a

276
00:11:48,320 --> 00:11:52,970
register function with<font color="#E5E5E5"> one argument will</font>

277
00:11:50,570 --> 00:11:55,070
be considered a violent<font color="#E5E5E5"> plug-in pilant</font>

278
00:11:52,970 --> 00:11:57,080
will import the module try to execute

279
00:11:55,070 --> 00:11:59,780
this function<font color="#E5E5E5"> you can put anything you</font>

280
00:11:57,080 --> 00:12:02,270
like this function<font color="#CCCCCC"> now usually what goes</font>

281
00:11:59,780 --> 00:12:04,220
inside is something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> linter dot</font>

282
00:12:02,270 --> 00:12:06,319
register checker<font color="#E5E5E5"> and you create an</font>

283
00:12:04,220 --> 00:12:10,490
<font color="#E5E5E5">object from something which violent</font>

284
00:12:06,320 --> 00:12:13,030
<font color="#E5E5E5">calls a checker class this is how the</font>

285
00:12:10,490 --> 00:12:14,930
checker class looks like this is all

286
00:12:13,030 --> 00:12:18,140
<font color="#CCCCCC">boilerplate code</font><font color="#E5E5E5"> this is the bare</font>

287
00:12:14,930 --> 00:12:20,750
<font color="#CCCCCC">minimum that you need to have</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> pal</font>

288
00:12:18,140 --> 00:12:24,020
<font color="#CCCCCC">Institute to be able to</font><font color="#E5E5E5"> execute this</font>

289
00:12:20,750 --> 00:12:26,570
class<font color="#CCCCCC"> this is where</font><font color="#E5E5E5"> all the logic about</font>

290
00:12:24,020 --> 00:12:28,480
discovering coding patterns<font color="#E5E5E5"> and deciding</font>

291
00:12:26,570 --> 00:12:33,740
if something is an error or not<font color="#E5E5E5"> an error</font>

292
00:12:28,480 --> 00:12:35,630
is done so you need you need<font color="#E5E5E5"> this</font>

293
00:12:33,740 --> 00:12:38,240
attribute this is double underscore

294
00:12:35,630 --> 00:12:40,790
<font color="#E5E5E5">implements double underscore and you</font>

295
00:12:38,240 --> 00:12:43,250
give<font color="#CCCCCC"> it a list of what interfaces you're</font>

296
00:12:40,790 --> 00:12:45,709
going to implement usually it's<font color="#CCCCCC"> only one</font>

297
00:12:43,250 --> 00:12:48,710
but<font color="#CCCCCC"> I can be more you need the</font><font color="#E5E5E5"> name</font>

298
00:12:45,710 --> 00:12:51,560
attribute<font color="#CCCCCC"> most of the time this is</font><font color="#E5E5E5"> not</font>

299
00:12:48,710 --> 00:12:54,980
used but it's mandatory<font color="#E5E5E5"> and you need the</font>

300
00:12:51,560 --> 00:12:57,979
messages dictionary notice the name<font color="#E5E5E5"> so</font>

301
00:12:54,980 --> 00:13:00,500
that's how it needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be written</font><font color="#CCCCCC"> the</font>

302
00:12:57,980 --> 00:13:04,220
key in this dictionary is an

303
00:13:00,500 --> 00:13:07,040
alphanumeric ID this must be unique

304
00:13:04,220 --> 00:13:08,210
across the entire<font color="#E5E5E5"> pilant installation</font>

305
00:13:07,040 --> 00:13:10,280
and all the<font color="#CCCCCC"> plugins</font><font color="#E5E5E5"> that you want to</font>

306
00:13:08,210 --> 00:13:12,200
enable<font color="#E5E5E5"> the good thing is that if it's</font>

307
00:13:10,280 --> 00:13:13,699
<font color="#E5E5E5">not unique point will</font><font color="#CCCCCC"> crashing will give</font>

308
00:13:12,200 --> 00:13:16,010
you a nice trace back and you will

309
00:13:13,700 --> 00:13:18,620
figure out<font color="#E5E5E5"> that this is duplicate and</font>

310
00:13:16,010 --> 00:13:21,500
then<font color="#CCCCCC"> you have the value in this</font>

311
00:13:18,620 --> 00:13:23,750
<font color="#E5E5E5">dictionary is</font><font color="#CCCCCC"> two or three elements</font><font color="#E5E5E5"> so</font>

312
00:13:21,500 --> 00:13:25,059
this defines your error message<font color="#E5E5E5"> the</font>

313
00:13:23,750 --> 00:13:26,589
first<font color="#CCCCCC"> one is the short</font>

314
00:13:25,059 --> 00:13:28,809
message which you<font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to see on</font>

315
00:13:26,589 --> 00:13:31,119
the<font color="#E5E5E5"> terminal</font><font color="#CCCCCC"> if you use pilant it's</font><font color="#E5E5E5"> only</font>

316
00:13:28,809 --> 00:13:34,179
one line the second one is the human

317
00:13:31,119 --> 00:13:36,299
<font color="#CCCCCC">readable</font><font color="#E5E5E5"> message ID</font><font color="#CCCCCC"> this is what you're</font>

318
00:13:34,179 --> 00:13:38,348
going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> to enable/disable</font>

319
00:13:36,299 --> 00:13:40,959
particular checkers on the<font color="#E5E5E5"> command line</font>

320
00:13:38,349 --> 00:13:42,489
<font color="#E5E5E5">so for example disable missing</font><font color="#CCCCCC"> dock this</font>

321
00:13:40,959 --> 00:13:46,238
is something<font color="#CCCCCC"> that we do almost</font><font color="#E5E5E5"> all the</font>

322
00:13:42,489 --> 00:13:48,009
<font color="#E5E5E5">time and the last one is</font><font color="#CCCCCC"> the longer help</font>

323
00:13:46,239 --> 00:13:50,379
message<font color="#E5E5E5"> this can be several lines long</font>

324
00:13:48,009 --> 00:13:52,149
<font color="#CCCCCC">you cannot you can also see this</font><font color="#E5E5E5"> on the</font>

325
00:13:50,379 --> 00:13:53,919
<font color="#CCCCCC">terminal with additional options</font><font color="#E5E5E5"> this</font>

326
00:13:52,149 --> 00:13:56,139
<font color="#E5E5E5">issue you also compile this</font><font color="#CCCCCC"> HTML</font>

327
00:13:53,919 --> 00:13:57,909
documentation<font color="#CCCCCC"> that is the place to</font>

328
00:13:56,139 --> 00:13:59,499
explain to the to the developer that

329
00:13:57,909 --> 00:14:03,039
<font color="#E5E5E5">sees the message why that is a problem</font>

330
00:13:59,499 --> 00:14:05,079
<font color="#E5E5E5">how to fix it maybe and you</font><font color="#CCCCCC"> need to</font>

331
00:14:03,039 --> 00:14:08,259
<font color="#CCCCCC">implement some method from these</font>

332
00:14:05,079 --> 00:14:11,169
interfaces so you<font color="#E5E5E5"> scan some source</font><font color="#CCCCCC"> code</font>

333
00:14:08,259 --> 00:14:13,239
and decide<font color="#E5E5E5"> ok that's an error</font><font color="#CCCCCC"> self</font><font color="#E5E5E5"> dot</font>

334
00:14:11,169 --> 00:14:15,429
<font color="#CCCCCC">add message</font><font color="#E5E5E5"> give it a human readable</font>

335
00:14:13,239 --> 00:14:17,679
message<font color="#CCCCCC"> ad and rest of the arguments are</font>

336
00:14:15,429 --> 00:14:19,959
used to annotate where this message this

337
00:14:17,679 --> 00:14:21,399
error appears in the<font color="#E5E5E5"> source code so</font><font color="#CCCCCC"> this</font>

338
00:14:19,959 --> 00:14:23,679
<font color="#CCCCCC">module that particular line that</font>

339
00:14:21,399 --> 00:14:28,839
<font color="#E5E5E5">particular column and pilot will print</font>

340
00:14:23,679 --> 00:14:31,478
this information<font color="#E5E5E5"> nicely for you invoking</font>

341
00:14:28,839 --> 00:14:32,889
the plugins with -<font color="#E5E5E5"> -</font><font color="#CCCCCC"> load plugins</font><font color="#E5E5E5"> the</font>

342
00:14:31,479 --> 00:14:35,229
only thing that you need<font color="#CCCCCC"> to be aware of</font>

343
00:14:32,889 --> 00:14:37,689
<font color="#CCCCCC">his point</font><font color="#E5E5E5"> is looking in the standard</font>

344
00:14:35,229 --> 00:14:39,519
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> pod for this place so if they are</font>

345
00:14:37,689 --> 00:14:41,439
<font color="#E5E5E5">not there you either you have to</font><font color="#CCCCCC"> move</font>

346
00:14:39,519 --> 00:14:45,389
them<font color="#E5E5E5"> there or modify the Python pod</font>

347
00:14:41,439 --> 00:14:48,309
settings<font color="#E5E5E5"> and that does it nothing else</font>

348
00:14:45,389 --> 00:14:50,649
now I'm going to show<font color="#E5E5E5"> you a few</font><font color="#CCCCCC"> examples</font>

349
00:14:48,309 --> 00:14:52,839
from our open<font color="#CCCCCC"> source project all</font><font color="#E5E5E5"> of them</font>

350
00:14:50,649 --> 00:14:55,719
are<font color="#CCCCCC"> on github we do have a lot more</font>

351
00:14:52,839 --> 00:14:58,599
<font color="#E5E5E5">available these are things that we use</font>

352
00:14:55,719 --> 00:15:00,609
to<font color="#CCCCCC"> make</font><font color="#E5E5E5"> our project better so</font>

353
00:14:58,599 --> 00:15:03,879
<font color="#E5E5E5">documentation string checker this is how</font>

354
00:15:00,609 --> 00:15:06,189
it looks<font color="#E5E5E5"> like the essence of it it</font>

355
00:15:03,879 --> 00:15:08,349
implements two<font color="#CCCCCC"> interfaces so in process</font>

356
00:15:06,189 --> 00:15:11,919
tokens we basically scan through<font color="#CCCCCC"> all the</font>

357
00:15:08,349 --> 00:15:13,779
token in the module<font color="#E5E5E5"> find odd string</font>

358
00:15:11,919 --> 00:15:15,879
constants<font color="#E5E5E5"> and keep reference to them in</font>

359
00:15:13,779 --> 00:15:17,799
a dictionary<font color="#CCCCCC"> key in the dictionary is</font>

360
00:15:15,879 --> 00:15:19,119
<font color="#E5E5E5">the string</font><font color="#CCCCCC"> without the quotes</font><font color="#E5E5E5"> and the</font>

361
00:15:17,799 --> 00:15:23,519
value in the dictionary is the<font color="#E5E5E5"> string</font>

362
00:15:19,119 --> 00:15:27,099
<font color="#E5E5E5">which the quotes then we</font><font color="#CCCCCC"> implement these</font>

363
00:15:23,519 --> 00:15:29,019
<font color="#E5E5E5">asteroid based methods so when visiting</font>

364
00:15:27,099 --> 00:15:30,549
modules<font color="#E5E5E5"> class definitions and function</font>

365
00:15:29,019 --> 00:15:32,439
definitions we want to<font color="#E5E5E5"> inspect the</font>

366
00:15:30,549 --> 00:15:35,919
documentation string<font color="#E5E5E5"> and what we</font>

367
00:15:32,439 --> 00:15:38,439
basically do is a<font color="#E5E5E5"> dictionary lookup we</font>

368
00:15:35,919 --> 00:15:40,269
find this<font color="#E5E5E5"> thing in the dictionary</font>

369
00:15:38,440 --> 00:15:41,529
if it starts with<font color="#E5E5E5"> three double quotes</font>

370
00:15:40,269 --> 00:15:43,500
that's<font color="#E5E5E5"> fine</font>

371
00:15:41,529 --> 00:15:49,420
otherwise we consider it an error

372
00:15:43,500 --> 00:15:53,529
<font color="#E5E5E5">trigger a message for the developer the</font>

373
00:15:49,420 --> 00:15:56,349
checker for jungle<font color="#E5E5E5"> so again visit</font><font color="#CCCCCC"> cost</font>

374
00:15:53,529 --> 00:15:58,269
<font color="#CCCCCC">look for hard-coded strings</font><font color="#E5E5E5"> we don't</font>

375
00:15:56,350 --> 00:16:02,199
really<font color="#E5E5E5"> care</font><font color="#CCCCCC"> if this</font><font color="#E5E5E5"> is inside of</font><font color="#CCCCCC"> a</font>

376
00:15:58,269 --> 00:16:03,970
foreign key<font color="#E5E5E5"> definition or someplace else</font>

377
00:16:02,199 --> 00:16:05,920
<font color="#CCCCCC">if that is a</font><font color="#E5E5E5"> hard-coded string we're</font>

378
00:16:03,970 --> 00:16:07,660
item<font color="#E5E5E5"> where as an error message for the</font>

379
00:16:05,920 --> 00:16:10,628
developer<font color="#E5E5E5"> that easy</font>

380
00:16:07,660 --> 00:16:12,129
and also we inspect the imports<font color="#E5E5E5"> if we</font>

381
00:16:10,629 --> 00:16:14,860
see something<font color="#E5E5E5"> like from join your</font>

382
00:16:12,129 --> 00:16:16,990
country<font color="#E5E5E5"> port Morris import user or do a</font>

383
00:16:14,860 --> 00:16:19,389
<font color="#CCCCCC">wild-card</font><font color="#E5E5E5"> import again error for</font>

384
00:16:16,990 --> 00:16:23,199
developer to inspect this figure out

385
00:16:19,389 --> 00:16:25,089
<font color="#E5E5E5">what's going on missing permissions</font>

386
00:16:23,199 --> 00:16:27,490
checker<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> probably the biggest one</font>

387
00:16:25,089 --> 00:16:32,019
that we<font color="#E5E5E5"> have which fits</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> slides</font>

388
00:16:27,490 --> 00:16:33,759
unfortunately so first visit module<font color="#E5E5E5"> we</font>

389
00:16:32,019 --> 00:16:36,480
try to<font color="#E5E5E5"> figure out if this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> views</font>

390
00:16:33,759 --> 00:16:39,189
module<font color="#E5E5E5"> and in our project we have</font>

391
00:16:36,480 --> 00:16:41,889
application slash<font color="#CCCCCC"> views dot PI another</font>

392
00:16:39,189 --> 00:16:43,750
<font color="#E5E5E5">application slash views dot pi that's</font>

393
00:16:41,889 --> 00:16:47,230
<font color="#E5E5E5">the structure and we just inspect the</font>

394
00:16:43,750 --> 00:16:51,399
module name<font color="#E5E5E5"> keep this in a in a boolean</font>

395
00:16:47,230 --> 00:16:53,680
flag next<font color="#E5E5E5"> visit function</font><font color="#CCCCCC"> deff we try to</font>

396
00:16:51,399 --> 00:16:56,019
figure<font color="#E5E5E5"> out if this function</font><font color="#CCCCCC"> that is in a</font>

397
00:16:53,680 --> 00:16:58,359
<font color="#CCCCCC">jungle view file is this</font><font color="#E5E5E5"> a helper</font>

398
00:16:56,019 --> 00:17:01,240
function or is this function based view

399
00:16:58,360 --> 00:17:03,040
something<font color="#E5E5E5"> that responds to HTTP requests</font>

400
00:17:01,240 --> 00:17:05,199
and the way we<font color="#E5E5E5"> check</font><font color="#CCCCCC"> for that</font><font color="#E5E5E5"> is if the</font>

401
00:17:03,040 --> 00:17:06,819
<font color="#E5E5E5">first argument is named</font><font color="#CCCCCC"> request then</font>

402
00:17:05,199 --> 00:17:08,679
this<font color="#E5E5E5"> must be a function based view from</font>

403
00:17:06,819 --> 00:17:12,158
jungle and we continue with<font color="#CCCCCC"> further</font>

404
00:17:08,679 --> 00:17:16,329
inspection for classes<font color="#E5E5E5"> we do a similar</font>

405
00:17:12,159 --> 00:17:17,829
thing we want to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure that the</font>

406
00:17:16,329 --> 00:17:19,569
thing the class we<font color="#CCCCCC"> are inspecting</font><font color="#E5E5E5"> this</font>

407
00:17:17,829 --> 00:17:21,129
<font color="#E5E5E5">is a class based view in Django this is</font>

408
00:17:19,569 --> 00:17:23,319
not some helper class which is defined

409
00:17:21,130 --> 00:17:26,439
in<font color="#E5E5E5"> the same module and the way we do</font>

410
00:17:23,319 --> 00:17:28,750
this<font color="#CCCCCC"> is we inspect the list of</font><font color="#E5E5E5"> base</font>

411
00:17:26,439 --> 00:17:31,390
classes so because when you when you

412
00:17:28,750 --> 00:17:33,270
<font color="#CCCCCC">when you use class-based views in Django</font>

413
00:17:31,390 --> 00:17:35,980
they always inherit<font color="#E5E5E5"> from something else</font>

414
00:17:33,270 --> 00:17:38,559
so we<font color="#E5E5E5"> use this to make</font><font color="#CCCCCC"> a simple check</font>

415
00:17:35,980 --> 00:17:41,500
it's not<font color="#E5E5E5"> very robust sometimes but it</font>

416
00:17:38,559 --> 00:17:43,899
works for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> most important</font>

417
00:17:41,500 --> 00:17:45,909
<font color="#E5E5E5">thing the inspection part is we</font>

418
00:17:43,900 --> 00:17:48,309
<font color="#CCCCCC">basically scan</font><font color="#E5E5E5"> through the list of</font>

419
00:17:45,909 --> 00:17:50,409
decorators for the<font color="#E5E5E5"> method or for the</font>

420
00:17:48,309 --> 00:17:51,830
class and search for some<font color="#E5E5E5"> well-known</font>

421
00:17:50,409 --> 00:17:53,390
names<font color="#E5E5E5"> so</font>

422
00:17:51,830 --> 00:17:55,760
if you don't have any decorators that's

423
00:17:53,390 --> 00:17:57,680
a problem for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> if we do have some</font>

424
00:17:55,760 --> 00:17:59,570
search for the<font color="#CCCCCC"> well-known names and some</font>

425
00:17:57,680 --> 00:18:01,430
combinations<font color="#CCCCCC"> between them</font>

426
00:17:59,570 --> 00:18:04,280
if we find<font color="#E5E5E5"> I'm fine if</font><font color="#CCCCCC"> we don't find</font>

427
00:18:01,430 --> 00:18:09,440
them again error<font color="#CCCCCC"> the developer must</font>

428
00:18:04,280 --> 00:18:11,780
figure<font color="#E5E5E5"> it out we do have other checkers</font>

429
00:18:09,440 --> 00:18:13,370
in the project so for example we're

430
00:18:11,780 --> 00:18:15,770
looking for empty modules we're looking

431
00:18:13,370 --> 00:18:18,679
for nested function definitions<font color="#CCCCCC"> unlisted</font>

432
00:18:15,770 --> 00:18:20,810
class definitions<font color="#E5E5E5"> because it's that's</font>

433
00:18:18,680 --> 00:18:23,660
<font color="#CCCCCC">the legacy code base</font><font color="#E5E5E5"> it's been written</font>

434
00:18:20,810 --> 00:18:26,419
<font color="#E5E5E5">in not very good way and we don't like</font>

435
00:18:23,660 --> 00:18:28,610
<font color="#E5E5E5">to have these</font><font color="#CCCCCC"> things when we see these</font>

436
00:18:26,420 --> 00:18:30,650
<font color="#E5E5E5">things they usually mean there are more</font>

437
00:18:28,610 --> 00:18:34,669
<font color="#E5E5E5">problems inside so that's why we have</font>

438
00:18:30,650 --> 00:18:36,710
<font color="#E5E5E5">these checkers</font><font color="#CCCCCC"> searching for raw SQL so</font>

439
00:18:34,670 --> 00:18:38,360
Django is<font color="#CCCCCC"> Oran based unfortunately we</font>

440
00:18:36,710 --> 00:18:40,730
did have a lot of<font color="#CCCCCC"> hard-coded SQL</font>

441
00:18:38,360 --> 00:18:42,500
statements in the source code<font color="#E5E5E5"> which were</font>

442
00:18:40,730 --> 00:18:46,160
not compatible with<font color="#CCCCCC"> different types of</font>

443
00:18:42,500 --> 00:18:48,050
<font color="#E5E5E5">databases</font><font color="#CCCCCC"> again we have a checker we</font>

444
00:18:46,160 --> 00:18:50,830
have checkers for the libraries<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

445
00:18:48,050 --> 00:18:53,149
use for<font color="#CCCCCC"> example this thing tags dot pi</font>

446
00:18:50,830 --> 00:18:55,399
this<font color="#E5E5E5"> is something internal that we have</font>

447
00:18:53,150 --> 00:18:58,190
internal<font color="#E5E5E5"> behavior in the application and</font>

448
00:18:55,400 --> 00:18:59,960
we don't want to use objects<font color="#E5E5E5"> that get or</font>

449
00:18:58,190 --> 00:19:02,030
create we want to use an internal<font color="#E5E5E5"> method</font>

450
00:18:59,960 --> 00:19:04,310
which will enforce some permission<font color="#CCCCCC"> and</font>

451
00:19:02,030 --> 00:19:08,210
some other logic<font color="#E5E5E5"> so that's why we have</font>

452
00:19:04,310 --> 00:19:11,179
this and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> we have had some checkers</font>

453
00:19:08,210 --> 00:19:12,650
which started life<font color="#CCCCCC"> inside of our project</font>

454
00:19:11,180 --> 00:19:14,930
and<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> were later able to</font>

455
00:19:12,650 --> 00:19:17,180
<font color="#E5E5E5">contribute to piling and piling jungle</font>

456
00:19:14,930 --> 00:19:21,020
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they they</font><font color="#E5E5E5"> were valid for other</font>

457
00:19:17,180 --> 00:19:25,190
people as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> so and the last thing is</font>

458
00:19:21,020 --> 00:19:27,230
we do<font color="#E5E5E5"> have ideas</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> other items like</font>

459
00:19:25,190 --> 00:19:30,470
other plugins<font color="#E5E5E5"> other checkers to create</font>

460
00:19:27,230 --> 00:19:32,390
which are important<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us so if you</font>

461
00:19:30,470 --> 00:19:34,070
want to<font color="#E5E5E5"> experiment if you want to get</font>

462
00:19:32,390 --> 00:19:36,350
your hands dirty<font color="#CCCCCC"> and start writing pile</font>

463
00:19:34,070 --> 00:19:40,909
<font color="#CCCCCC">in plugins this</font><font color="#E5E5E5"> is a good place for you</font>

464
00:19:36,350 --> 00:19:43,730
to<font color="#E5E5E5"> start we can</font><font color="#CCCCCC"> give</font><font color="#E5E5E5"> you exact examples</font>

465
00:19:40,910 --> 00:19:45,920
of pieces<font color="#CCCCCC"> of source code which we don't</font>

466
00:19:43,730 --> 00:19:47,930
<font color="#E5E5E5">like and why we think is</font><font color="#CCCCCC"> problematic and</font>

467
00:19:45,920 --> 00:19:49,880
you can try to<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> for that</font>

468
00:19:47,930 --> 00:19:54,290
and contribute<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to our project</font><font color="#E5E5E5"> if</font>

469
00:19:49,880 --> 00:19:56,870
you<font color="#E5E5E5"> want to so the last thing I have to</font>

470
00:19:54,290 --> 00:19:58,909
tell<font color="#E5E5E5"> you is that we are also</font><font color="#CCCCCC"> having an a</font>

471
00:19:56,870 --> 00:20:01,040
project stand here at first<font color="#E5E5E5"> time so if</font>

472
00:19:58,910 --> 00:20:03,470
you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> visit us and say hi</font>

473
00:20:01,040 --> 00:20:05,340
<font color="#E5E5E5">talk a little bit</font><font color="#CCCCCC"> more about you know</font>

474
00:20:03,470 --> 00:20:07,410
<font color="#E5E5E5">why why or how</font>

475
00:20:05,340 --> 00:20:10,649
using these plugins<font color="#CCCCCC"> I will be there</font>

476
00:20:07,410 --> 00:20:13,090
<font color="#E5E5E5">after</font><font color="#CCCCCC"> this presentation</font><font color="#E5E5E5"> and now we have</font>

477
00:20:10,650 --> 00:20:22,059
five minutes for<font color="#CCCCCC"> questions thank</font><font color="#E5E5E5"> you</font>

478
00:20:13,090 --> 00:20:30,260
[Applause]

479
00:20:22,059 --> 00:20:34,100
okay first question okay do<font color="#E5E5E5"> you use</font>

480
00:20:30,260 --> 00:20:39,740
<font color="#CCCCCC">pilings</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> person to person</font>

481
00:20:34,100 --> 00:20:45,439
five people<font color="#CCCCCC"> Oh everybody okay okay fly</font>

482
00:20:39,740 --> 00:20:50,150
<font color="#CCCCCC">Kate okay what I didn't</font><font color="#E5E5E5"> hear a black</font>

483
00:20:45,440 --> 00:20:53,960
okay okay<font color="#E5E5E5"> but the thing about black is</font>

484
00:20:50,150 --> 00:20:57,200
it's nice<font color="#CCCCCC"> to however it's</font><font color="#E5E5E5"> more like for</font>

485
00:20:53,960 --> 00:20:59,120
formatting<font color="#E5E5E5"> so especially in the latest</font>

486
00:20:57,200 --> 00:21:01,250
versions of piling and piling<font color="#CCCCCC"> jungle</font>

487
00:20:59,120 --> 00:21:02,659
they they have checkers<font color="#E5E5E5"> to show you</font>

488
00:21:01,250 --> 00:21:11,110
things<font color="#E5E5E5"> which are just considered bad</font>

489
00:21:02,660 --> 00:21:11,110
practice yeah

490
00:21:26,049 --> 00:21:34,460
<font color="#E5E5E5">okay so yeah the question is how</font><font color="#CCCCCC"> many</font>

491
00:21:32,390 --> 00:21:35,870
things<font color="#E5E5E5"> we put</font><font color="#CCCCCC"> in a check and and because</font>

492
00:21:34,460 --> 00:21:40,340
developers don't<font color="#E5E5E5"> always agree</font><font color="#CCCCCC"> with</font>

493
00:21:35,870 --> 00:21:43,340
something<font color="#CCCCCC"> if you're going</font><font color="#E5E5E5"> to so first of</font>

494
00:21:40,340 --> 00:21:46,820
<font color="#E5E5E5">all I</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> big fan</font><font color="#CCCCCC"> of satisfying all</font>

495
00:21:43,340 --> 00:21:48,830
possible<font color="#CCCCCC"> checks that come from pilant</font>

496
00:21:46,820 --> 00:21:51,500
<font color="#CCCCCC">I think they</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> well-designed and they</font>

497
00:21:48,830 --> 00:21:52,990
are created for a purpose<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make your</font>

498
00:21:51,500 --> 00:21:55,669
life easier

499
00:21:52,990 --> 00:21:58,039
but but then if you're<font color="#CCCCCC"> going to create</font>

500
00:21:55,669 --> 00:22:00,620
your<font color="#E5E5E5"> own customized plug-ins for your</font>

501
00:21:58,039 --> 00:22:04,010
<font color="#E5E5E5">team and you</font><font color="#CCCCCC"> have people to don't agree</font>

502
00:22:00,620 --> 00:22:07,129
then you then maybe it's a good<font color="#CCCCCC"> time to</font>

503
00:22:04,010 --> 00:22:09,890
<font color="#E5E5E5">sit</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> and make some</font><font color="#CCCCCC"> policies about</font>

504
00:22:07,130 --> 00:22:11,779
you know coding<font color="#E5E5E5"> style within the team</font>

505
00:22:09,890 --> 00:22:13,940
<font color="#E5E5E5">why you consider something to be a</font>

506
00:22:11,779 --> 00:22:15,500
<font color="#E5E5E5">problem and why not</font><font color="#CCCCCC"> and when you have</font>

507
00:22:13,940 --> 00:22:23,029
this<font color="#CCCCCC"> agreement then you can create a</font>

508
00:22:15,500 --> 00:22:25,070
<font color="#CCCCCC">plugins and people will be happy yeah</font>

509
00:22:23,029 --> 00:22:28,580
how many false-positive do we have in

510
00:22:25,070 --> 00:22:33,320
our plugins<font color="#E5E5E5"> answer is quite a few I</font>

511
00:22:28,580 --> 00:22:38,059
<font color="#E5E5E5">haven't counted them and this is for a</font>

512
00:22:33,320 --> 00:22:41,570
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> it is it</font><font color="#E5E5E5"> is relatively easy to</font>

513
00:22:38,059 --> 00:22:45,559
<font color="#E5E5E5">create a</font><font color="#CCCCCC"> plugin that will detect the</font>

514
00:22:41,570 --> 00:22:49,789
most common<font color="#E5E5E5"> cases and it is relatively</font>

515
00:22:45,559 --> 00:22:52,820
<font color="#E5E5E5">hard to to create a</font><font color="#CCCCCC"> plug-in that will</font>

516
00:22:49,789 --> 00:22:55,460
take into<font color="#E5E5E5"> account</font><font color="#CCCCCC"> all the edge cases</font><font color="#E5E5E5"> so</font>

517
00:22:52,820 --> 00:22:58,520
<font color="#CCCCCC">we</font><font color="#E5E5E5"> prefer to to have very simple plugins</font>

518
00:22:55,460 --> 00:23:00,830
and have more<font color="#E5E5E5"> false-positive just</font>

519
00:22:58,520 --> 00:23:03,879
disable them with a comment<font color="#E5E5E5"> and ignore</font>

520
00:23:00,830 --> 00:23:12,340
them<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> spending a lot of time</font>

521
00:23:03,880 --> 00:23:12,340
fine-tuning the<font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> yes</font>

522
00:23:13,450 --> 00:23:19,580
can you elaborate a little bit on<font color="#E5E5E5"> how</font>

523
00:23:17,120 --> 00:23:23,959
you would now fix<font color="#CCCCCC"> the code actually us</font>

524
00:23:19,580 --> 00:23:31,399
with pilant plugins how can<font color="#CCCCCC"> I</font><font color="#E5E5E5"> fix the</font>

525
00:23:23,960 --> 00:23:33,049
code when I see a problem<font color="#E5E5E5"> okay so the</font>

526
00:23:31,399 --> 00:23:36,399
<font color="#CCCCCC">question is</font><font color="#E5E5E5"> basically can we change the</font>

527
00:23:33,049 --> 00:23:39,520
abstract syntax<font color="#E5E5E5"> trees with violent and</font>

528
00:23:36,399 --> 00:23:43,939
the the answer is<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> yes and no</font>

529
00:23:39,520 --> 00:23:47,870
there are two<font color="#E5E5E5"> linked</font><font color="#CCCCCC"> which use ast</font><font color="#E5E5E5"> 2 to</font>

530
00:23:43,940 --> 00:23:49,640
do dynamic<font color="#E5E5E5"> replacement of of nodes so</font>

531
00:23:47,870 --> 00:23:52,090
for example cosmic-ray is<font color="#CCCCCC"> a 2</font><font color="#E5E5E5"> for</font>

532
00:23:49,640 --> 00:23:54,110
mutation testing which is<font color="#E5E5E5"> based on</font>

533
00:23:52,090 --> 00:23:56,750
automatically<font color="#E5E5E5"> changing the source code</font>

534
00:23:54,110 --> 00:23:58,879
and<font color="#E5E5E5"> running your test suite</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can</font>

535
00:23:56,750 --> 00:24:01,399
you<font color="#E5E5E5"> can do this you can</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> save this</font>

536
00:23:58,880 --> 00:24:02,750
into<font color="#CCCCCC"> a file when you</font><font color="#E5E5E5"> build an abstract</font>

537
00:24:01,399 --> 00:24:04,610
<font color="#E5E5E5">syntax tree it's relatively easy to</font>

538
00:24:02,750 --> 00:24:07,279
export<font color="#E5E5E5"> this into Python source code and</font>

539
00:24:04,610 --> 00:24:11,120
it's almost<font color="#E5E5E5"> the same as what was the</font>

540
00:24:07,279 --> 00:24:15,049
input file it doesn't have the machinery

541
00:24:11,120 --> 00:24:17,350
to change<font color="#CCCCCC"> abstract syntax trees no nodes</font>

542
00:24:15,049 --> 00:24:20,389
<font color="#E5E5E5">and then save them to</font><font color="#CCCCCC"> the file system</font>

543
00:24:17,350 --> 00:24:22,549
<font color="#CCCCCC">this can</font><font color="#E5E5E5"> be added of course</font><font color="#CCCCCC"> I mean it</font>

544
00:24:20,390 --> 00:24:24,230
will<font color="#CCCCCC"> be relatively</font><font color="#E5E5E5"> easy to</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> but it's</font>

545
00:24:22,549 --> 00:24:26,090
not existing at the moment that the<font color="#CCCCCC"> to</font>

546
00:24:24,230 --> 00:24:28,539
is not designed to do<font color="#E5E5E5"> these things but</font>

547
00:24:26,090 --> 00:24:28,539
<font color="#E5E5E5">it is possible</font>

548
00:24:32,470 --> 00:24:42,489
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> thank you</font>

549
00:24:34,920 --> 00:24:42,489
[Applause]

