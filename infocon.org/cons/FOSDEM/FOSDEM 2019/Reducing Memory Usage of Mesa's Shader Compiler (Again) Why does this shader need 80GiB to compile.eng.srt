1
00:00:04,620 --> 00:00:11,700
hi<font color="#CCCCCC"> suni hi my name is</font><font color="#E5E5E5"> Ian</font><font color="#CCCCCC"> Romanick</font><font color="#E5E5E5"> I</font>

2
00:00:08,280 --> 00:00:13,350
work on the team<font color="#CCCCCC"> I work</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> team</font><font color="#E5E5E5"> at</font>

3
00:00:11,700 --> 00:00:16,439
at<font color="#E5E5E5"> Intel that does the</font><font color="#CCCCCC"> open-source</font>

4
00:00:13,350 --> 00:00:18,810
<font color="#E5E5E5">drivers for</font><font color="#CCCCCC"> all of our GPUs and I've</font>

5
00:00:16,439 --> 00:00:22,170
been working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Mesa and other drivers</font>

6
00:00:18,810 --> 00:00:23,820
<font color="#CCCCCC">since 2001</font><font color="#E5E5E5"> and today I'm going to talk</font>

7
00:00:22,170 --> 00:00:27,480
<font color="#E5E5E5">about some</font><font color="#CCCCCC"> recent work that we did to</font>

8
00:00:23,820 --> 00:00:32,489
reduce peak memory usage in a couple of

9
00:00:27,480 --> 00:00:34,410
the the compiler paths<font color="#E5E5E5"> for the compiler</font>

10
00:00:32,488 --> 00:00:37,559
<font color="#E5E5E5">paths for the shading language compiler</font>

11
00:00:34,410 --> 00:00:41,190
<font color="#E5E5E5">so this is basically a talk about</font>

12
00:00:37,559 --> 00:00:44,010
<font color="#CCCCCC">optimization so I'll bring up a</font><font color="#E5E5E5"> couple</font>

13
00:00:41,190 --> 00:00:45,180
<font color="#E5E5E5">of the rules</font><font color="#CCCCCC"> of optimization and I think</font>

14
00:00:44,010 --> 00:00:50,160
everyone knows the first rule of

15
00:00:45,180 --> 00:00:52,290
optimization is don't or<font color="#E5E5E5"> maybe don't</font>

16
00:00:50,160 --> 00:00:55,319
<font color="#E5E5E5">unless you you know really really have</font>

17
00:00:52,290 --> 00:00:56,760
<font color="#CCCCCC">to because at some point things are</font>

18
00:00:55,320 --> 00:00:58,230
<font color="#E5E5E5">gonna happen in</font><font color="#CCCCCC"> your project</font><font color="#E5E5E5"> people are</font>

19
00:00:56,760 --> 00:01:01,968
gonna start<font color="#E5E5E5"> using it in different ways</font>

20
00:00:58,230 --> 00:01:05,700
trying to do more things<font color="#E5E5E5"> with it and</font>

21
00:01:01,969 --> 00:01:07,890
you'll<font color="#E5E5E5"> have to but any work</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

22
00:01:05,700 --> 00:01:10,380
would do on<font color="#E5E5E5"> optimization before you</font>

23
00:01:07,890 --> 00:01:14,759
reach that point is<font color="#E5E5E5"> going to be</font>

24
00:01:10,380 --> 00:01:15,179
<font color="#E5E5E5">speculative and it will probably be</font><font color="#CCCCCC"> walk</font>

25
00:01:14,759 --> 00:01:17,490
<font color="#CCCCCC">I</font>

26
00:01:15,179 --> 00:01:20,099
oh you'll do the wheel do the wrong

27
00:01:17,490 --> 00:01:22,919
optimizations<font color="#E5E5E5"> and so in the best case</font>

28
00:01:20,099 --> 00:01:25,470
<font color="#E5E5E5">you'll either you'll waste your time and</font>

29
00:01:22,920 --> 00:01:27,810
in the<font color="#E5E5E5"> worst case you'll be optimizing</font>

30
00:01:25,470 --> 00:01:33,060
for things and making the stuff that's

31
00:01:27,810 --> 00:01:37,020
actually<font color="#E5E5E5"> important worse so we</font><font color="#CCCCCC"> ran into</font>

32
00:01:33,060 --> 00:01:40,530
<font color="#E5E5E5">a case where we we had to do some</font>

33
00:01:37,020 --> 00:01:44,039
optimization recently<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> our new</font>

34
00:01:40,530 --> 00:01:46,560
GPUs that<font color="#CCCCCC"> are coming out for</font><font color="#E5E5E5"> Gen 11 they</font>

35
00:01:44,039 --> 00:01:49,380
have removed<font color="#E5E5E5"> on some of the lower power</font>

36
00:01:46,560 --> 00:01:53,720
<font color="#E5E5E5">parts they've removed support for double</font>

37
00:01:49,380 --> 00:01:57,238
precision<font color="#E5E5E5"> math in the execution units</font>

38
00:01:53,720 --> 00:01:59,970
but<font color="#E5E5E5"> FP 64 is still required for OpenGL</font>

39
00:01:57,239 --> 00:02:02,310
<font color="#E5E5E5">4.0 and all the later versions so we're</font>

40
00:01:59,970 --> 00:02:05,399
not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> dump from you know OpenGL</font>

41
00:02:02,310 --> 00:02:09,630
4.6 or 4.5 all the way back to 3.2

42
00:02:05,399 --> 00:02:13,200
because there's no double precision<font color="#E5E5E5"> so</font>

43
00:02:09,630 --> 00:02:14,700
we're<font color="#E5E5E5"> going to implement it in software</font>

44
00:02:13,200 --> 00:02:16,579
<font color="#E5E5E5">just just like you used to do in the</font>

45
00:02:14,700 --> 00:02:21,859
olden days before CPUs<font color="#CCCCCC"> have</font>

46
00:02:16,580 --> 00:02:22,670
at<font color="#CCCCCC"> fps and</font><font color="#E5E5E5"> the performance isn't gonna</font>

47
00:02:21,860 --> 00:02:26,390
be great

48
00:02:22,670 --> 00:02:28,970
but so far we've literally encountered

49
00:02:26,390 --> 00:02:33,410
zero applications that use this feature

50
00:02:28,970 --> 00:02:36,020
of<font color="#CCCCCC"> GLSL</font><font color="#E5E5E5"> so I mean okay see see first</font>

51
00:02:33,410 --> 00:02:38,480
rule of<font color="#E5E5E5"> optimization like nobody cares</font>

52
00:02:36,020 --> 00:02:42,140
about<font color="#E5E5E5"> this feature so it's okay if it's</font>

53
00:02:38,480 --> 00:02:44,149
if<font color="#E5E5E5"> it's slow and that's a big part</font><font color="#CCCCCC"> of</font>

54
00:02:42,140 --> 00:02:46,339
the reason<font color="#CCCCCC"> why it's not a required</font>

55
00:02:44,150 --> 00:02:53,480
feature for Vulcan<font color="#E5E5E5"> because just nobody</font>

56
00:02:46,340 --> 00:02:56,450
actually wants it<font color="#CCCCCC"> so late in 2018</font><font color="#E5E5E5"> work</font>

57
00:02:53,480 --> 00:02:59,000
on soft FP 64 was getting<font color="#E5E5E5"> pretty close</font>

58
00:02:56,450 --> 00:03:00,890
<font color="#CCCCCC">to done</font><font color="#E5E5E5"> pretty much all the test</font><font color="#CCCCCC"> cases</font>

59
00:02:59,000 --> 00:03:03,170
were passing<font color="#E5E5E5"> but the guy</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was</font>

60
00:03:00,890 --> 00:03:06,079
<font color="#E5E5E5">working on it noticed huh there's a</font>

61
00:03:03,170 --> 00:03:07,250
handful of<font color="#E5E5E5"> these tests</font><font color="#CCCCCC"> that I'll</font><font color="#E5E5E5"> start</font>

62
00:03:06,080 --> 00:03:09,170
<font color="#CCCCCC">him running they're gonna run for a</font>

63
00:03:07,250 --> 00:03:10,640
while<font color="#CCCCCC"> and you know</font><font color="#E5E5E5"> I'll go make a</font>

64
00:03:09,170 --> 00:03:13,399
<font color="#E5E5E5">sandwich or</font><font color="#CCCCCC"> something and come back and</font>

65
00:03:10,640 --> 00:03:16,459
<font color="#CCCCCC">rune killer has just wrecked my system</font>

66
00:03:13,400 --> 00:03:19,150
like what the hell<font color="#CCCCCC"> and we tracked it</font>

67
00:03:16,460 --> 00:03:23,090
<font color="#E5E5E5">down to a couple of test cases that</font>

68
00:03:19,150 --> 00:03:25,160
seemed<font color="#E5E5E5"> pretty innocuous</font><font color="#CCCCCC"> so we mocked</font>

69
00:03:23,090 --> 00:03:28,370
<font color="#E5E5E5">those tests tests up and ran them we</font>

70
00:03:25,160 --> 00:03:30,650
have this big like 80 core server that

71
00:03:28,370 --> 00:03:33,230
we have for<font color="#E5E5E5"> doing big compiles and and</font>

72
00:03:30,650 --> 00:03:39,380
some shader DB runs and some<font color="#E5E5E5"> other</font>

73
00:03:33,230 --> 00:03:42,109
things on<font color="#E5E5E5"> has 80 cores and think it's</font>

74
00:03:39,380 --> 00:03:45,260
putting<font color="#E5E5E5"> the site's 128 gigs of ram which</font>

75
00:03:42,110 --> 00:03:47,120
i think is<font color="#E5E5E5"> right</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> actually got</font><font color="#CCCCCC"> the</font>

76
00:03:45,260 --> 00:03:50,630
test case to<font color="#E5E5E5"> run to completion on that</font>

77
00:03:47,120 --> 00:03:54,410
and it peaked at<font color="#CCCCCC"> 80% memory usage so you</font>

78
00:03:50,630 --> 00:04:00,709
know like it was like I think 85 gigs of

79
00:03:54,410 --> 00:04:01,970
<font color="#E5E5E5">ram which seems really bad</font><font color="#CCCCCC"> so we kind of</font>

80
00:04:00,709 --> 00:04:03,950
dug around and tried to figure<font color="#E5E5E5"> out what</font>

81
00:04:01,970 --> 00:04:06,170
was<font color="#CCCCCC"> going on</font><font color="#E5E5E5"> because we looked at the</font>

82
00:04:03,950 --> 00:04:10,190
shader<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was in this in this program</font>

83
00:04:06,170 --> 00:04:13,720
<font color="#E5E5E5">in this particular test case it has a</font>

84
00:04:10,190 --> 00:04:16,519
<font color="#E5E5E5">bunch of uniforms of every possible</font>

85
00:04:13,720 --> 00:04:19,220
<font color="#E5E5E5">double precision type so the</font><font color="#CCCCCC"> scaler</font><font color="#E5E5E5"> all</font>

86
00:04:16,519 --> 00:04:22,840
the vector types and all

87
00:04:19,220 --> 00:04:25,760
the square<font color="#E5E5E5"> and rectangular matrix types</font>

88
00:04:22,840 --> 00:04:27,890
<font color="#CCCCCC">but</font><font color="#E5E5E5"> then it has to actually use all of</font>

89
00:04:25,760 --> 00:04:30,200
those or the compiler is supposed to

90
00:04:27,890 --> 00:04:32,000
dead code eliminate<font color="#E5E5E5"> anything that</font><font color="#CCCCCC"> isn't</font>

91
00:04:30,200 --> 00:04:35,060
used so there's you know<font color="#E5E5E5"> a bunch of math</font>

92
00:04:32,000 --> 00:04:39,980
using<font color="#E5E5E5"> these the shader would fit on a</font>

93
00:04:35,060 --> 00:04:42,890
<font color="#E5E5E5">single slide but the compiler right now</font>

94
00:04:39,980 --> 00:04:46,550
<font color="#E5E5E5">in lines every single function</font><font color="#CCCCCC"> so this</font>

95
00:04:42,890 --> 00:04:50,690
<font color="#E5E5E5">tiny little shader just explodes into</font>

96
00:04:46,550 --> 00:04:52,610
<font color="#E5E5E5">this huge pile of code</font><font color="#CCCCCC"> the thing</font><font color="#E5E5E5"> that</font>

97
00:04:50,690 --> 00:04:55,130
turns out<font color="#CCCCCC"> to be the real</font><font color="#E5E5E5"> disaster of it</font>

98
00:04:52,610 --> 00:04:57,680
is this tiny shader<font color="#CCCCCC"> that starts off</font><font color="#E5E5E5"> with</font>

99
00:04:55,130 --> 00:05:00,890
no flow control ends up with a little

100
00:04:57,680 --> 00:05:04,460
<font color="#E5E5E5">over 16,000 basic blocks in it because</font>

101
00:05:00,890 --> 00:05:06,229
each of<font color="#E5E5E5"> those functions for doing FP 64</font>

102
00:05:04,460 --> 00:05:09,880
operations they all have to check<font color="#CCCCCC"> for</font>

103
00:05:06,230 --> 00:05:12,200
<font color="#E5E5E5">things like should it generate man did</font>

104
00:05:09,880 --> 00:05:13,969
did you end up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> addy norm that needs</font>

105
00:05:12,200 --> 00:05:15,800
to<font color="#CCCCCC"> be flushed there's all these sort</font><font color="#E5E5E5"> of</font>

106
00:05:13,970 --> 00:05:18,620
exceptional cases that it has to check

107
00:05:15,800 --> 00:05:21,230
for so all<font color="#CCCCCC"> these functions have hidden</font>

108
00:05:18,620 --> 00:05:26,419
flow control in them so<font color="#E5E5E5"> that all just</font>

109
00:05:21,230 --> 00:05:29,930
explodes<font color="#E5E5E5"> out</font><font color="#CCCCCC"> so you know most shaders</font>

110
00:05:26,419 --> 00:05:32,330
that<font color="#E5E5E5"> come from real</font><font color="#CCCCCC"> applications aren't</font>

111
00:05:29,930 --> 00:05:34,490
<font color="#CCCCCC">usually that</font><font color="#E5E5E5"> big and even</font><font color="#CCCCCC"> the ones</font><font color="#E5E5E5"> that</font>

112
00:05:32,330 --> 00:05:37,550
are big people<font color="#CCCCCC"> have tried to optimize</font>

113
00:05:34,490 --> 00:05:39,710
<font color="#E5E5E5">them to not have flow control because</font>

114
00:05:37,550 --> 00:05:42,919
generally lots of flow control performs

115
00:05:39,710 --> 00:05:46,190
poorly on GPUs so we have<font color="#E5E5E5"> this</font>

116
00:05:42,919 --> 00:05:48,070
extraordinarily huge shader<font color="#E5E5E5"> that</font><font color="#CCCCCC"> doesn't</font>

117
00:05:46,190 --> 00:05:50,180
look<font color="#E5E5E5"> like other huge shaders that</font>

118
00:05:48,070 --> 00:05:52,340
<font color="#E5E5E5">applications would normally give us I</font>

119
00:05:50,180 --> 00:05:53,540
guess no one should have<font color="#CCCCCC"> been surprised</font>

120
00:05:52,340 --> 00:05:58,070
that there was<font color="#E5E5E5"> going to be some kind of</font>

121
00:05:53,540 --> 00:06:01,010
problems with it so the second rule<font color="#CCCCCC"> of</font>

122
00:05:58,070 --> 00:06:03,550
optimization is you know optimize the

123
00:06:01,010 --> 00:06:03,550
right thing

124
00:06:10,729 --> 00:06:12,789
you

125
00:06:21,669 --> 00:06:26,740
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> and I sort</font><font color="#CCCCCC"> of condense</font><font color="#E5E5E5"> it down to</font><font color="#CCCCCC"> a</font>

126
00:06:24,159 --> 00:06:30,400
little<font color="#CCCCCC"> bit simpler</font><font color="#E5E5E5"> test case</font><font color="#CCCCCC"> that I</font>

127
00:06:26,740 --> 00:06:34,840
ended up submitting<font color="#CCCCCC"> to piglet</font><font color="#E5E5E5"> for for</font>

128
00:06:30,400 --> 00:06:37,599
inclusion in piglet<font color="#CCCCCC"> that is able</font><font color="#E5E5E5"> to hit</font>

129
00:06:34,840 --> 00:06:40,628
the problematic paths<font color="#CCCCCC"> without having to</font>

130
00:06:37,599 --> 00:06:43,120
rely<font color="#CCCCCC"> on the fp6 the soft FP 64 code</font>

131
00:06:40,629 --> 00:06:45,939
because I hadn't landed yet and also

132
00:06:43,120 --> 00:06:49,330
<font color="#E5E5E5">that I could run on my laptop without</font>

133
00:06:45,939 --> 00:06:51,999
<font color="#E5E5E5">you know needing 85 gigs of</font><font color="#CCCCCC"> ram</font><font color="#E5E5E5"> it's one</font>

134
00:06:49,330 --> 00:06:53,680
thing to<font color="#E5E5E5"> have a pessimal test case</font><font color="#CCCCCC"> and</font>

135
00:06:51,999 --> 00:06:57,219
it's one thing to<font color="#CCCCCC"> just wreck everyone's</font>

136
00:06:53,680 --> 00:07:00,419
systems<font color="#E5E5E5"> and also an entirely different</font>

137
00:06:57,219 --> 00:07:02,650
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> if I completely wreck our</font>

138
00:07:00,419 --> 00:07:04,299
continuous integration system<font color="#E5E5E5"> because</font>

139
00:07:02,650 --> 00:07:13,479
the guy who maintains that will come

140
00:07:04,300 --> 00:07:18,779
find<font color="#E5E5E5"> me everything why so for collecting</font>

141
00:07:13,479 --> 00:07:22,779
<font color="#CCCCCC">data I turn</font><font color="#E5E5E5"> to a valgrind massive tool</font>

142
00:07:18,779 --> 00:07:24,069
which is a like<font color="#E5E5E5"> all I'm going to expect</font>

143
00:07:22,779 --> 00:07:27,449
that<font color="#E5E5E5"> most people are at least a little</font>

144
00:07:24,069 --> 00:07:32,680
<font color="#E5E5E5">bit familiar with valgrind</font><font color="#CCCCCC"> you've you</font>

145
00:07:27,449 --> 00:07:36,520
run it to run your app and it kind of

146
00:07:32,680 --> 00:07:38,529
inserts itself in in pads in<font color="#E5E5E5"> your</font>

147
00:07:36,520 --> 00:07:42,159
application so that<font color="#E5E5E5"> it can collect data</font>

148
00:07:38,529 --> 00:07:45,729
<font color="#CCCCCC">and so what massive does is it collects</font>

149
00:07:42,159 --> 00:07:47,710
data<font color="#E5E5E5"> through time about every memory</font>

150
00:07:45,729 --> 00:07:49,919
allocation so that then at the<font color="#CCCCCC"> end it</font>

151
00:07:47,710 --> 00:07:52,479
<font color="#E5E5E5">can sort of show you this timeline of</font>

152
00:07:49,919 --> 00:07:53,859
<font color="#E5E5E5">here's how much memory you</font><font color="#CCCCCC"> were using</font>

153
00:07:52,479 --> 00:07:59,969
and when and I'm actually going<font color="#E5E5E5"> to show</font>

154
00:07:53,860 --> 00:07:59,969
some of<font color="#CCCCCC"> that here</font>

155
00:08:02,050 --> 00:08:07,789
<font color="#E5E5E5">all right so here's the so you you run</font>

156
00:08:06,169 --> 00:08:10,280
massive and it collects some data and

157
00:08:07,789 --> 00:08:12,860
then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> another tool called ms</font>

158
00:08:10,280 --> 00:08:17,330
print that<font color="#E5E5E5"> used to actually display the</font>

159
00:08:12,860 --> 00:08:21,560
the data in a in a human human readable

160
00:08:17,330 --> 00:08:24,889
might be an<font color="#E5E5E5"> overstatement</font><font color="#CCCCCC"> but human</font>

161
00:08:21,560 --> 00:08:27,620
puzzle<font color="#E5E5E5"> out a</font><font color="#CCCCCC"> bowl or something so the</font>

162
00:08:24,889 --> 00:08:29,300
important bit here is the first<font color="#E5E5E5"> thing</font>

163
00:08:27,620 --> 00:08:32,870
<font color="#CCCCCC">that you get</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> this timeline</font>

164
00:08:29,300 --> 00:08:35,599
<font color="#E5E5E5">showing how much memory usage you had</font>

165
00:08:32,870 --> 00:08:37,789
through the<font color="#CCCCCC"> lifetime of the program and</font>

166
00:08:35,599 --> 00:08:40,700
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can see right at the beginning</font><font color="#E5E5E5"> there</font>

167
00:08:37,789 --> 00:08:43,098
<font color="#CCCCCC">was this huge</font><font color="#E5E5E5"> spike up to around</font><font color="#CCCCCC"> five</font>

168
00:08:40,700 --> 00:08:44,990
gigs<font color="#CCCCCC"> that then dropped off and then it</font>

169
00:08:43,099 --> 00:08:49,040
was a couple<font color="#E5E5E5"> of smaller spikes a little</font>

170
00:08:44,990 --> 00:08:51,500
bit later on<font color="#E5E5E5"> but the the the big peak is</font>

171
00:08:49,040 --> 00:08:55,099
is the important one<font color="#E5E5E5"> we can go down and</font>

172
00:08:51,500 --> 00:09:00,800
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> look at the output where it will</font>

173
00:08:55,100 --> 00:09:03,350
sort of show<font color="#E5E5E5"> where memory got allocated</font>

174
00:09:00,800 --> 00:09:06,189
so you can see who the who the big

175
00:09:03,350 --> 00:09:09,140
consumers are and so right<font color="#E5E5E5"> here you know</font>

176
00:09:06,190 --> 00:09:13,100
<font color="#CCCCCC">98%</font><font color="#E5E5E5"> of the memory that's allocated was</font>

177
00:09:09,140 --> 00:09:15,380
<font color="#E5E5E5">allocated I guess known</font><font color="#CCCCCC"> 93% was</font>

178
00:09:13,100 --> 00:09:19,399
<font color="#E5E5E5">allocated out of this same</font><font color="#CCCCCC"> function a</font>

179
00:09:15,380 --> 00:09:22,160
nerve<font color="#E5E5E5"> nervy builder add value</font><font color="#CCCCCC"> out some</font>

180
00:09:19,399 --> 00:09:25,579
reason that was<font color="#E5E5E5"> hard to say so that</font>

181
00:09:22,160 --> 00:09:28,270
seems like<font color="#CCCCCC"> a smoking gun of</font><font color="#E5E5E5"> mmm maybe</font>

182
00:09:25,579 --> 00:09:28,270
<font color="#E5E5E5">look here</font>

183
00:09:32,740 --> 00:09:35,740
<font color="#E5E5E5">okay</font>

184
00:09:45,450 --> 00:09:57,480
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> fee builder</font><font color="#E5E5E5"> is nur is the the</font>

185
00:09:54,590 --> 00:10:02,040
kind of<font color="#E5E5E5"> the mid-level I are used in</font>

186
00:09:57,480 --> 00:10:06,000
<font color="#E5E5E5">mesas shader compiler</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> SSA based and</font>

187
00:10:02,040 --> 00:10:08,699
and so fee builder is one of the is the

188
00:10:06,000 --> 00:10:13,280
<font color="#E5E5E5">data data flow analysis</font><font color="#CCCCCC"> passed that</font>

189
00:10:08,700 --> 00:10:18,630
inserts the fee nodes<font color="#E5E5E5"> in the SSA form</font><font color="#CCCCCC"> of</font>

190
00:10:13,280 --> 00:10:20,339
the program so we've got a<font color="#E5E5E5"> couple of</font>

191
00:10:18,630 --> 00:10:22,110
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> could spend</font><font color="#CCCCCC"> some time</font>

192
00:10:20,340 --> 00:10:23,880
optimizing like we know where<font color="#CCCCCC"> all the</font>

193
00:10:22,110 --> 00:10:26,580
memories<font color="#CCCCCC"> going but then that doesn't</font>

194
00:10:23,880 --> 00:10:29,060
necessarily<font color="#CCCCCC"> tell us what to go start you</font>

195
00:10:26,580 --> 00:10:32,880
know where to go start writing<font color="#CCCCCC"> code and</font>

196
00:10:29,060 --> 00:10:35,099
when<font color="#E5E5E5"> deciding what to do it's not as</font>

197
00:10:32,880 --> 00:10:37,470
easy<font color="#E5E5E5"> as</font><font color="#CCCCCC"> just you know apply</font><font color="#E5E5E5"> Amdahl's law</font>

198
00:10:35,100 --> 00:10:40,350
<font color="#CCCCCC">and go work on whatever thing that</font>

199
00:10:37,470 --> 00:10:43,500
points out because in a<font color="#CCCCCC"> real project</font>

200
00:10:40,350 --> 00:10:46,110
there's there's other concerns<font color="#CCCCCC"> risk</font>

201
00:10:43,500 --> 00:10:49,740
amount of<font color="#CCCCCC"> effort involved</font><font color="#E5E5E5"> schedule</font>

202
00:10:46,110 --> 00:10:54,180
issues<font color="#E5E5E5"> all those things matter so we</font>

203
00:10:49,740 --> 00:10:57,810
kind of had three places<font color="#CCCCCC"> to look we</font>

204
00:10:54,180 --> 00:10:59,969
could optimize<font color="#E5E5E5"> the input shader which in</font>

205
00:10:57,810 --> 00:11:03,479
this case is the mangled input shader

206
00:10:59,970 --> 00:11:05,870
with all of our soft<font color="#CCCCCC"> FP 64 stuff</font>

207
00:11:03,480 --> 00:11:10,440
inserted into it and we looked at<font color="#E5E5E5"> that</font>

208
00:11:05,870 --> 00:11:14,640
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> was really unclear if adjusting</font>

209
00:11:10,440 --> 00:11:18,060
the fp6 the soft<font color="#CCCCCC"> FP 64 code would have</font>

210
00:11:14,640 --> 00:11:20,130
that much effect<font color="#E5E5E5"> on the final memory</font>

211
00:11:18,060 --> 00:11:23,069
usage we could<font color="#CCCCCC"> probably adjust</font><font color="#E5E5E5"> a few</font>

212
00:11:20,130 --> 00:11:25,920
<font color="#E5E5E5">things</font><font color="#CCCCCC"> and bring it down a bit but that</font>

213
00:11:23,070 --> 00:11:28,260
<font color="#E5E5E5">codes actually</font><font color="#CCCCCC"> fairly</font><font color="#E5E5E5"> complicated and it</font>

214
00:11:25,920 --> 00:11:31,740
has a lot of twitchy<font color="#E5E5E5"> edge cases that it</font>

215
00:11:28,260 --> 00:11:33,630
has to handle<font color="#E5E5E5"> so it seemed like even if</font>

216
00:11:31,740 --> 00:11:37,140
we could get a<font color="#E5E5E5"> good amount of benefit</font>

217
00:11:33,630 --> 00:11:40,220
from<font color="#E5E5E5"> that that by adjusting that code</font>

218
00:11:37,140 --> 00:11:44,220
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we're not</font><font color="#E5E5E5"> floating-point experts</font>

219
00:11:40,220 --> 00:11:47,400
<font color="#E5E5E5">that we might suddenly break things so</font>

220
00:11:44,220 --> 00:11:49,560
we didn't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do that and strictly</font>

221
00:11:47,400 --> 00:11:50,939
<font color="#E5E5E5">speaking the</font><font color="#CCCCCC"> reason that so much memory</font>

222
00:11:49,560 --> 00:11:52,750
is used in the<font color="#E5E5E5"> first place is because</font>

223
00:11:50,940 --> 00:11:56,500
<font color="#E5E5E5">every</font><font color="#CCCCCC"> single function</font>

224
00:11:52,750 --> 00:11:59,680
it's<font color="#E5E5E5"> in line always so we thought</font><font color="#CCCCCC"> about</font>

225
00:11:56,500 --> 00:12:01,800
well you<font color="#E5E5E5"> know if we stop punching the</font>

226
00:11:59,680 --> 00:12:04,300
fee builder in<font color="#E5E5E5"> the face by giving it</font>

227
00:12:01,800 --> 00:12:06,699
<font color="#CCCCCC">16,000 basic</font><font color="#E5E5E5"> blocks</font><font color="#CCCCCC"> cuz we in line to</font>

228
00:12:04,300 --> 00:12:10,479
the whole<font color="#E5E5E5"> universe</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> maybe that</font>

229
00:12:06,700 --> 00:12:12,130
<font color="#E5E5E5">would just make the problem go away</font><font color="#CCCCCC"> but</font>

230
00:12:10,480 --> 00:12:15,700
once we get<font color="#E5E5E5"> down to a</font><font color="#CCCCCC"> certain</font><font color="#E5E5E5"> point in</font>

231
00:12:12,130 --> 00:12:17,439
the compiler stack functions have never

232
00:12:15,700 --> 00:12:20,620
existed<font color="#E5E5E5"> beyond that point</font>

233
00:12:17,440 --> 00:12:22,390
so there's a<font color="#CCCCCC"> whole hole through the</font>

234
00:12:20,620 --> 00:12:25,420
whole<font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> compiler and all the</font>

235
00:12:22,390 --> 00:12:27,430
instruction generation there's no

236
00:12:25,420 --> 00:12:29,199
support<font color="#E5E5E5"> for functions at all</font><font color="#CCCCCC"> so there's</font>

237
00:12:27,430 --> 00:12:33,280
a huge<font color="#E5E5E5"> amount</font><font color="#CCCCCC"> of code that we would have</font>

238
00:12:29,200 --> 00:12:36,160
<font color="#E5E5E5">to go</font><font color="#CCCCCC"> write to support that</font><font color="#E5E5E5"> and you know</font>

239
00:12:33,280 --> 00:12:39,939
we<font color="#E5E5E5"> needed to ship something so we</font>

240
00:12:36,160 --> 00:12:42,430
decided I will take you know<font color="#E5E5E5"> the obvious</font>

241
00:12:39,940 --> 00:12:48,180
<font color="#CCCCCC">approach</font><font color="#E5E5E5"> and we'll go work on</font><font color="#CCCCCC"> optimizing</font>

242
00:12:42,430 --> 00:12:51,040
the memory<font color="#E5E5E5"> usage of the fee builder so</font>

243
00:12:48,180 --> 00:12:54,489
I'm not<font color="#E5E5E5"> really gonna</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> to me much</font>

244
00:12:51,040 --> 00:12:58,150
<font color="#E5E5E5">about the process of going into putting</font>

245
00:12:54,490 --> 00:13:00,370
a<font color="#E5E5E5"> program into SSA form and adding fee</font>

246
00:12:58,150 --> 00:13:05,530
notes because it's<font color="#E5E5E5"> complicated and I</font>

247
00:13:00,370 --> 00:13:08,770
don't understand it<font color="#CCCCCC"> even that great</font><font color="#E5E5E5"> but</font>

248
00:13:05,530 --> 00:13:11,350
<font color="#CCCCCC">at sort of</font><font color="#E5E5E5"> the high level what the</font>

249
00:13:08,770 --> 00:13:13,750
process of inserting fee<font color="#E5E5E5"> notes involves</font>

250
00:13:11,350 --> 00:13:15,190
is you're going<font color="#E5E5E5"> to analyze each variable</font>

251
00:13:13,750 --> 00:13:17,260
in the program and you're going<font color="#E5E5E5"> to look</font>

252
00:13:15,190 --> 00:13:21,670
at every basic block where that variable

253
00:13:17,260 --> 00:13:23,980
<font color="#CCCCCC">might get</font><font color="#E5E5E5"> modified and then at the</font>

254
00:13:21,670 --> 00:13:27,280
points where<font color="#E5E5E5"> through the flow control</font>

255
00:13:23,980 --> 00:13:29,710
graph where multiple paths of those

256
00:13:27,280 --> 00:13:31,810
modifications<font color="#E5E5E5"> could come together you're</font>

257
00:13:29,710 --> 00:13:33,460
going<font color="#E5E5E5"> to insert a fee note because</font>

258
00:13:31,810 --> 00:13:35,020
<font color="#E5E5E5">eventually what's going</font><font color="#CCCCCC"> to happen is</font>

259
00:13:33,460 --> 00:13:36,310
those won't be rights to the same

260
00:13:35,020 --> 00:13:38,410
variable they're going to be<font color="#E5E5E5"> rights to</font>

261
00:13:36,310 --> 00:13:40,800
new variables<font color="#E5E5E5"> and then when you get</font><font color="#CCCCCC"> to</font>

262
00:13:38,410 --> 00:13:43,990
that<font color="#E5E5E5"> that join in the control flow based</font>

263
00:13:40,800 --> 00:13:46,439
<font color="#E5E5E5">on which route you actually took the</font>

264
00:13:43,990 --> 00:13:46,440
compilers

265
00:13:52,600 --> 00:13:54,660
you

266
00:14:03,150 --> 00:14:06,560
<font color="#E5E5E5">Grahame where that variable gets</font>

267
00:14:04,650 --> 00:14:10,079
<font color="#E5E5E5">modified now</font>

268
00:14:06,560 --> 00:14:13,500
you can assign an<font color="#E5E5E5"> ordering to basic</font>

269
00:14:10,080 --> 00:14:15,540
blocks in a program<font color="#E5E5E5"> and nor does this</font>

270
00:14:13,500 --> 00:14:18,420
and it sort of science an index to<font color="#E5E5E5"> each</font>

271
00:14:15,540 --> 00:14:21,050
basic block<font color="#E5E5E5"> so the fee builder just says</font>

272
00:14:18,420 --> 00:14:24,120
well I'll use a simple<font color="#CCCCCC"> data structure</font>

273
00:14:21,050 --> 00:14:27,779
<font color="#CCCCCC">that I can index with a unique value so</font>

274
00:14:24,120 --> 00:14:30,240
it just has an array of at<font color="#E5E5E5"> the bottom of</font>

275
00:14:27,779 --> 00:14:31,770
the basic blocks<font color="#E5E5E5"> essentially of the</font>

276
00:14:30,240 --> 00:14:35,540
basic blocks it's actually the the

277
00:14:31,770 --> 00:14:40,829
<font color="#CCCCCC">writes</font><font color="#E5E5E5"> in the basic blocks and</font><font color="#CCCCCC"> just</font>

278
00:14:35,540 --> 00:14:44,370
<font color="#E5E5E5">indexes it by basic block so this works</font>

279
00:14:40,830 --> 00:14:47,130
great<font color="#E5E5E5"> when you have normal programs when</font>

280
00:14:44,370 --> 00:14:49,950
you've got programs<font color="#E5E5E5"> with 16,000 basic</font>

281
00:14:47,130 --> 00:14:52,860
blocks now you've got an array of<font color="#E5E5E5"> 16,000</font>

282
00:14:49,950 --> 00:14:57,000
pointers for each variable<font color="#E5E5E5"> in the</font>

283
00:14:52,860 --> 00:14:58,500
program<font color="#E5E5E5"> and almost you know fifteen</font>

284
00:14:57,000 --> 00:15:02,210
thousand nine hundred<font color="#CCCCCC"> and</font><font color="#E5E5E5"> ninety of</font>

285
00:14:58,500 --> 00:15:02,210
those pointers are going to be null

286
00:15:02,810 --> 00:15:12,420
so replaced that simple array with a

287
00:15:08,850 --> 00:15:15,330
hash table<font color="#CCCCCC"> and it slashed the memory</font>

288
00:15:12,420 --> 00:15:17,189
usage<font color="#CCCCCC"> we went from</font><font color="#E5E5E5"> just a little over</font>

289
00:15:15,330 --> 00:15:19,740
like<font color="#E5E5E5"> like around five point four</font>

290
00:15:17,190 --> 00:15:21,930
gigabytes<font color="#E5E5E5"> to about one point three I was</font>

291
00:15:19,740 --> 00:15:23,580
<font color="#E5E5E5">going to show the the massive output</font>

292
00:15:21,930 --> 00:15:25,650
<font color="#E5E5E5">after the change but I'm running a</font>

293
00:15:23,580 --> 00:15:31,020
little bit low on time<font color="#E5E5E5"> I might come</font><font color="#CCCCCC"> to</font>

294
00:15:25,650 --> 00:15:35,069
that<font color="#E5E5E5"> but the cool thing</font><font color="#CCCCCC"> that shows up in</font>

295
00:15:31,020 --> 00:15:38,699
that in the after massive output<font color="#E5E5E5"> is that</font>

296
00:15:35,070 --> 00:15:41,550
first peak is basically gone and that

297
00:15:38,700 --> 00:15:43,860
part of<font color="#E5E5E5"> the program</font><font color="#CCCCCC"> is no longer</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font>

298
00:15:41,550 --> 00:15:48,240
long pole so there's a couple other

299
00:15:43,860 --> 00:15:51,620
<font color="#CCCCCC">peaks later on but fee builder is is not</font>

300
00:15:48,240 --> 00:15:55,050
<font color="#E5E5E5">the critical memory usage path anymore</font>

301
00:15:51,620 --> 00:15:56,520
so at this<font color="#E5E5E5"> point we had cut the memory</font>

302
00:15:55,050 --> 00:16:00,120
<font color="#E5E5E5">usage enough that we probably could</font><font color="#CCCCCC"> have</font>

303
00:15:56,520 --> 00:16:03,600
stopped but I continued<font color="#CCCCCC"> on to look for</font>

304
00:16:00,120 --> 00:16:08,850
some<font color="#E5E5E5"> more low-hanging fruit</font><font color="#CCCCCC"> and found</font><font color="#E5E5E5"> it</font>

305
00:16:03,600 --> 00:16:10,200
so we have a fairly<font color="#E5E5E5"> complex system in in</font>

306
00:16:08,850 --> 00:16:11,820
Mesa

307
00:16:10,200 --> 00:16:15,720
throughout the compiler<font color="#CCCCCC"> stack where we</font>

308
00:16:11,820 --> 00:16:17,910
have sort<font color="#CCCCCC"> of a a self implemented</font>

309
00:16:15,720 --> 00:16:21,150
mark-and-sweep garbage collector it's

310
00:16:17,910 --> 00:16:24,689
not that exactly<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> roughly</font>

311
00:16:21,150 --> 00:16:27,270
analogous so we don't we<font color="#E5E5E5"> won't ever</font>

312
00:16:24,690 --> 00:16:31,580
<font color="#CCCCCC">actually leak</font><font color="#E5E5E5"> memory but we can have</font>

313
00:16:27,270 --> 00:16:34,110
transient leaks<font color="#E5E5E5"> so along with</font><font color="#CCCCCC"> a program</font>

314
00:16:31,580 --> 00:16:36,360
<font color="#E5E5E5">nerve will track a bunch of metadata</font>

315
00:16:34,110 --> 00:16:38,490
that<font color="#E5E5E5"> gets used</font><font color="#CCCCCC"> by optimization passes so</font>

316
00:16:36,360 --> 00:16:41,250
one of<font color="#E5E5E5"> the things that attracts is live</font>

317
00:16:38,490 --> 00:16:44,880
<font color="#E5E5E5">ranges for a value doing what range of</font>

318
00:16:41,250 --> 00:16:47,180
the program<font color="#E5E5E5"> does this value need to</font>

319
00:16:44,880 --> 00:16:50,250
exist<font color="#CCCCCC"> because it might be read and</font>

320
00:16:47,180 --> 00:16:52,920
various passes will change the approach

321
00:16:50,250 --> 00:16:56,460
<font color="#CCCCCC">Ange</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> shape of the program and will</font>

322
00:16:52,920 --> 00:16:59,189
invalidate that<font color="#E5E5E5"> data so if you have live</font>

323
00:16:56,460 --> 00:17:01,140
range data and you delete a read<font color="#CCCCCC"> of a</font>

324
00:16:59,190 --> 00:17:01,950
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> because you can optimize out an</font>

325
00:17:01,140 --> 00:17:04,290
instruction

326
00:17:01,950 --> 00:17:08,699
well now the live range changes<font color="#E5E5E5"> so the</font>

327
00:17:04,290 --> 00:17:10,680
<font color="#E5E5E5">library shader becomes invalid</font><font color="#CCCCCC"> so there</font>

328
00:17:08,699 --> 00:17:12,630
were a bunch<font color="#E5E5E5"> of these passes</font><font color="#CCCCCC"> a bunch of</font>

329
00:17:10,680 --> 00:17:17,880
the optimization passes that would mark

330
00:17:12,630 --> 00:17:19,800
this piece of metadata is invalid but

331
00:17:17,880 --> 00:17:25,500
<font color="#E5E5E5">then the data would continue to exist</font>

332
00:17:19,800 --> 00:17:29,340
<font color="#CCCCCC">and by looking at by really digging down</font>

333
00:17:25,500 --> 00:17:31,080
pretty far into the<font color="#E5E5E5"> massive data I found</font>

334
00:17:29,340 --> 00:17:35,879
I'd kept noticing that there<font color="#E5E5E5"> was some of</font>

335
00:17:31,080 --> 00:17:37,889
the metadata that<font color="#CCCCCC"> showed up at points in</font>

336
00:17:35,880 --> 00:17:40,410
compilation where we were never going to

337
00:17:37,890 --> 00:17:42,630
<font color="#E5E5E5">need that metadata again and it turned</font>

338
00:17:40,410 --> 00:17:44,850
out<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it still existed there because</font>

339
00:17:42,630 --> 00:17:49,400
it got marked as invalid<font color="#E5E5E5"> and then no one</font>

340
00:17:44,850 --> 00:17:52,199
released the memory so changing

341
00:17:49,400 --> 00:17:54,870
literally added four lines of<font color="#E5E5E5"> code and</font>

342
00:17:52,200 --> 00:17:58,350
that cut<font color="#E5E5E5"> another third of a gigabyte out</font>

343
00:17:54,870 --> 00:18:03,750
of the peak memory usage from the worst

344
00:17:58,350 --> 00:18:06,750
case shader and then just to continue on

345
00:18:03,750 --> 00:18:11,760
<font color="#E5E5E5">looking at low-hanging fruit I did a</font>

346
00:18:06,750 --> 00:18:13,890
couple of micro optimizations<font color="#CCCCCC"> using PA</font>

347
00:18:11,760 --> 00:18:17,010
<font color="#CCCCCC">hole or POW hole or however you want to</font>

348
00:18:13,890 --> 00:18:18,770
pronounce it<font color="#E5E5E5"> it's it's kind of a cool</font>

349
00:18:17,010 --> 00:18:21,980
program<font color="#E5E5E5"> you</font>

350
00:18:18,770 --> 00:18:24,379
run it on<font color="#E5E5E5"> your object files and it will</font>

351
00:18:21,980 --> 00:18:26,840
analyze<font color="#CCCCCC"> your structures</font><font color="#E5E5E5"> and tell you</font>

352
00:18:24,380 --> 00:18:29,600
<font color="#E5E5E5">exactly how the compiler actually laid</font>

353
00:18:26,840 --> 00:18:31,340
<font color="#E5E5E5">that structure out and so it'll tell you</font>

354
00:18:29,600 --> 00:18:34,580
where there's holes in your data

355
00:18:31,340 --> 00:18:37,520
structure<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example here after the</font>

356
00:18:34,580 --> 00:18:39,679
type field of the structure<font color="#E5E5E5"> to get</font>

357
00:18:37,520 --> 00:18:42,260
proper alignment of the pointer<font color="#CCCCCC"> that</font>

358
00:18:39,680 --> 00:18:44,510
follows that the compiler inserted<font color="#CCCCCC"> four</font>

359
00:18:42,260 --> 00:18:50,300
<font color="#E5E5E5">four bytes of padding so it's just dead</font>

360
00:18:44,510 --> 00:18:53,030
space<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> rearrange the structure</font>

361
00:18:50,300 --> 00:18:56,710
a little<font color="#E5E5E5"> bit you won't have any of that</font>

362
00:18:53,030 --> 00:19:00,500
<font color="#E5E5E5">those those dead holes</font><font color="#CCCCCC"> and it's</font>

363
00:18:56,710 --> 00:19:02,540
<font color="#E5E5E5">definitely a micro optimization</font><font color="#CCCCCC"> in this</font>

364
00:19:00,500 --> 00:19:06,040
case it ended up being<font color="#E5E5E5"> pretty useful I</font>

365
00:19:02,540 --> 00:19:09,379
don't didn't have any data about<font color="#E5E5E5"> it</font>

366
00:19:06,040 --> 00:19:12,170
<font color="#CCCCCC">which I should have collected</font><font color="#E5E5E5"> because</font>

367
00:19:09,380 --> 00:19:16,310
the<font color="#CCCCCC"> nura instruction is the base</font><font color="#E5E5E5"> of</font>

368
00:19:12,170 --> 00:19:18,500
every single<font color="#CCCCCC"> instruction in the IR so at</font>

369
00:19:16,310 --> 00:19:20,360
<font color="#CCCCCC">if you've</font><font color="#E5E5E5"> got a thousand instructions in</font>

370
00:19:18,500 --> 00:19:23,210
your shader<font color="#E5E5E5"> you've got a thousand of</font>

371
00:19:20,360 --> 00:19:26,959
these so having<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> know four bytes</font>

372
00:19:23,210 --> 00:19:29,450
just<font color="#E5E5E5"> waste it everywhere</font><font color="#CCCCCC"> adds you know</font>

373
00:19:26,960 --> 00:19:34,630
<font color="#E5E5E5">it's death by a thousand really tiny</font>

374
00:19:29,450 --> 00:19:38,240
cuts<font color="#CCCCCC"> so in this case what I did is I</font>

375
00:19:34,630 --> 00:19:40,340
marked the enum<font color="#E5E5E5"> Fortner</font><font color="#CCCCCC"> instead type as</font>

376
00:19:38,240 --> 00:19:43,480
packed<font color="#CCCCCC"> so that instead of</font><font color="#E5E5E5"> taking</font><font color="#CCCCCC"> up a</font>

377
00:19:40,340 --> 00:19:46,310
full<font color="#CCCCCC"> INT</font><font color="#E5E5E5"> it would only be a bite and I</font>

378
00:19:43,480 --> 00:19:48,140
shuffled some things around I think<font color="#CCCCCC"> I</font>

379
00:19:46,310 --> 00:19:51,379
moved<font color="#E5E5E5"> the block pointer up to right</font>

380
00:19:48,140 --> 00:19:53,660
after<font color="#CCCCCC"> the exact node</font><font color="#E5E5E5"> and then they</font>

381
00:19:51,380 --> 00:19:56,300
basically sorted all of the fields by

382
00:19:53,660 --> 00:19:58,250
<font color="#E5E5E5">the size of the underlying type and</font><font color="#CCCCCC"> that</font>

383
00:19:56,300 --> 00:20:04,610
eliminated<font color="#E5E5E5"> all the padding and I think a</font>

384
00:19:58,250 --> 00:20:07,220
cut what did it do<font color="#CCCCCC"> it cut eight bytes</font>

385
00:20:04,610 --> 00:20:10,879
off the size of the structure<font color="#CCCCCC"> I want to</font>

386
00:20:07,220 --> 00:20:12,900
say<font color="#CCCCCC"> four eight because up because of</font>

387
00:20:10,880 --> 00:20:18,780
padding

388
00:20:12,900 --> 00:20:23,520
and it you know<font color="#CCCCCC"> it adds</font><font color="#E5E5E5"> up so</font><font color="#CCCCCC"> possible</font>

389
00:20:18,780 --> 00:20:25,670
future work<font color="#CCCCCC"> there's still a bunch</font><font color="#E5E5E5"> of</font>

390
00:20:23,520 --> 00:20:28,889
places<font color="#E5E5E5"> where we use way too much</font><font color="#CCCCCC"> memory</font>

391
00:20:25,670 --> 00:20:31,710
<font color="#E5E5E5">we</font><font color="#CCCCCC"> could implement real functions and I</font>

392
00:20:28,890 --> 00:20:33,570
suspect we're gonna have to but that's

393
00:20:31,710 --> 00:20:36,510
<font color="#E5E5E5">going to be a huge bunch of work</font>

394
00:20:33,570 --> 00:20:39,090
there's also another data flow analysis

395
00:20:36,510 --> 00:20:41,070
<font color="#E5E5E5">pass way way down in the in the</font><font color="#CCCCCC"> backend</font>

396
00:20:39,090 --> 00:20:45,750
<font color="#CCCCCC">that</font><font color="#E5E5E5"> operates on at the machine code</font>

397
00:20:41,070 --> 00:20:48,830
level<font color="#E5E5E5"> that does a very very textbook</font>

398
00:20:45,750 --> 00:20:52,260
implementation of the<font color="#E5E5E5"> data flow analysis</font>

399
00:20:48,830 --> 00:20:55,889
algorithm and so it has these<font color="#E5E5E5"> these huge</font>

400
00:20:52,260 --> 00:20:58,230
bit vectors with one bit per<font color="#E5E5E5"> variable in</font>

401
00:20:55,890 --> 00:21:00,750
the program that and then you have a

402
00:20:58,230 --> 00:21:04,710
copy of<font color="#E5E5E5"> each bit vector for each basic</font>

403
00:21:00,750 --> 00:21:06,240
block in the program<font color="#E5E5E5"> there's other</font>

404
00:21:04,710 --> 00:21:09,120
algorithms<font color="#E5E5E5"> that you can use for that</font>

405
00:21:06,240 --> 00:21:14,000
that don't need<font color="#E5E5E5"> to have these massive</font>

406
00:21:09,120 --> 00:21:18,300
bit vectors<font color="#CCCCCC"> I had looked</font><font color="#E5E5E5"> a little bit at</font>

407
00:21:14,000 --> 00:21:21,120
because most variables won't be live or

408
00:21:18,300 --> 00:21:23,010
accessed during in most basic blocks<font color="#E5E5E5"> a</font>

409
00:21:21,120 --> 00:21:26,428
lot of the bits<font color="#E5E5E5"> in the vectors are</font>

410
00:21:23,010 --> 00:21:30,420
either all zeros or all ones<font color="#CCCCCC"> so I tried</font>

411
00:21:26,429 --> 00:21:33,480
using a sparse<font color="#E5E5E5"> data structure</font><font color="#CCCCCC"> to track</font>

412
00:21:30,420 --> 00:21:35,840
<font color="#E5E5E5">that more compactly and it shaved off</font>

413
00:21:33,480 --> 00:21:39,059
about<font color="#CCCCCC"> seven percent of the memory usage</font>

414
00:21:35,840 --> 00:21:41,340
<font color="#E5E5E5">because but since it was a more complex</font>

415
00:21:39,059 --> 00:21:44,850
<font color="#E5E5E5">data structure</font><font color="#CCCCCC"> instead of just</font><font color="#E5E5E5"> a simple</font>

416
00:21:41,340 --> 00:21:46,889
big flat array<font color="#E5E5E5"> I the</font><font color="#CCCCCC"> seven</font><font color="#E5E5E5"> percent</font>

417
00:21:44,850 --> 00:21:50,070
<font color="#E5E5E5">memory savings came with a seven percent</font>

418
00:21:46,890 --> 00:21:53,540
runtime cost<font color="#CCCCCC"> so</font><font color="#E5E5E5"> wasn't it wasn't the</font>

419
00:21:50,070 --> 00:21:56,070
trade-off that<font color="#CCCCCC"> I that I wanted</font><font color="#E5E5E5"> but if we</font>

420
00:21:53,540 --> 00:21:57,840
basically chucked that<font color="#CCCCCC"> algorithm</font><font color="#E5E5E5"> and</font>

421
00:21:56,070 --> 00:22:02,370
<font color="#E5E5E5">replaced it with something that's not</font>

422
00:21:57,840 --> 00:22:04,379
<font color="#E5E5E5">just you know from compilers 101 we</font>

423
00:22:02,370 --> 00:22:06,389
won't have<font color="#CCCCCC"> that we would take the the</font>

424
00:22:04,380 --> 00:22:08,520
<font color="#E5E5E5">performance penalty and it would use a</font>

425
00:22:06,390 --> 00:22:10,670
<font color="#E5E5E5">lot less memory 20 minutes do I have</font>

426
00:22:08,520 --> 00:22:10,670
left

427
00:22:12,010 --> 00:22:25,970
-<font color="#CCCCCC"> okay all right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> all my</font><font color="#E5E5E5"> pointer so so</font>

428
00:22:23,000 --> 00:22:29,030
then here's the after<font color="#CCCCCC"> graph so the first</font>

429
00:22:25,970 --> 00:22:33,100
spike is completely gone<font color="#CCCCCC"> and there's</font>

430
00:22:29,030 --> 00:22:37,550
just a couple of<font color="#E5E5E5"> spikes later on the</font>

431
00:22:33,100 --> 00:22:40,610
peak spike is actually during register

432
00:22:37,550 --> 00:22:43,159
allocation<font color="#CCCCCC"> there's a shared component in</font>

433
00:22:40,610 --> 00:22:44,899
Mesa for<font color="#CCCCCC"> a graph</font><font color="#E5E5E5"> coloring register</font>

434
00:22:43,160 --> 00:22:47,510
allocator<font color="#CCCCCC"> and it has some big data</font>

435
00:22:44,900 --> 00:22:49,760
structures in it<font color="#CCCCCC"> -</font><font color="#E5E5E5"> especially when</font>

436
00:22:47,510 --> 00:22:53,600
<font color="#E5E5E5">you've</font><font color="#CCCCCC"> got lots and</font><font color="#E5E5E5"> lots and lots of</font>

437
00:22:49,760 --> 00:22:55,730
<font color="#E5E5E5">basic blocks</font><font color="#CCCCCC"> i haven't analyzed that</font>

438
00:22:53,600 --> 00:22:58,909
code to see<font color="#E5E5E5"> if there if that can be</font>

439
00:22:55,730 --> 00:23:01,220
<font color="#E5E5E5">helped very</font><font color="#CCCCCC"> much but it's it's really</font>

440
00:22:58,910 --> 00:23:07,400
<font color="#E5E5E5">complicated code and</font><font color="#CCCCCC"> i'd rather not</font><font color="#E5E5E5"> go</font>

441
00:23:01,220 --> 00:23:08,000
in there if I don't<font color="#E5E5E5"> have to but okay</font>

442
00:23:07,400 --> 00:23:11,530
<font color="#E5E5E5">yeah</font>

443
00:23:08,000 --> 00:23:11,530
so<font color="#E5E5E5"> that was what I</font><font color="#CCCCCC"> had for that</font>

444
00:23:17,130 --> 00:23:24,600
<font color="#E5E5E5">okay any questions</font><font color="#CCCCCC"> we'll start here</font>

445
00:23:22,070 --> 00:23:27,168
<font color="#CCCCCC">saying to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> guys again can we</font>

446
00:23:24,600 --> 00:23:27,168
<font color="#E5E5E5">enable it</font>

447
00:23:28,009 --> 00:23:33,840
no no because<font color="#E5E5E5"> I'd rather have</font><font color="#CCCCCC"> that chip</font>

448
00:23:31,259 --> 00:23:35,789
space used for stuff to<font color="#E5E5E5"> actually make</font>

449
00:23:33,840 --> 00:23:43,918
programs that<font color="#CCCCCC"> people care about go</font>

450
00:23:35,789 --> 00:23:45,509
faster and and especially<font color="#E5E5E5"> for those are</font>

451
00:23:43,919 --> 00:23:48,299
the<font color="#E5E5E5"> really lower power parts they're</font>

452
00:23:45,509 --> 00:23:55,049
mostly targeting<font color="#E5E5E5"> OpenGL ES that doesn't</font>

453
00:23:48,299 --> 00:23:56,789
have FP 64<font color="#CCCCCC"> so I mean we it's frustrating</font>

454
00:23:55,049 --> 00:23:59,789
that we had to do all<font color="#CCCCCC"> this work and then</font>

455
00:23:56,789 --> 00:24:04,980
<font color="#E5E5E5">had to do a bunch of other stuff to make</font>

456
00:23:59,789 --> 00:24:08,850
<font color="#E5E5E5">the work</font><font color="#CCCCCC"> actually work</font><font color="#E5E5E5"> but I think</font><font color="#CCCCCC"> it</font>

457
00:24:04,980 --> 00:24:12,120
was the right<font color="#CCCCCC"> choice</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then do I have</font>

458
00:24:08,850 --> 00:24:16,279
time<font color="#CCCCCC"> for the one more</font><font color="#E5E5E5"> question okay</font><font color="#CCCCCC"> all</font>

459
00:24:12,120 --> 00:24:16,279
<font color="#CCCCCC">right</font><font color="#E5E5E5"> then you get the same answer</font>

460
00:24:16,390 --> 00:24:19,509
[Applause]

461
00:24:22,789 --> 00:24:26,240
the<font color="#E5E5E5"> hostage</font>

