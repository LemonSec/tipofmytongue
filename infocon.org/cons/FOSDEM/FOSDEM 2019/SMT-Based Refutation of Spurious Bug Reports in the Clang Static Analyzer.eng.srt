1
00:00:04,610 --> 00:00:10,280
okay who<font color="#CCCCCC"> wants to use the</font><font color="#E5E5E5"> clinks</font>

2
00:00:06,680 --> 00:00:13,730
analyzer<font color="#CCCCCC"> okay excellent</font><font color="#E5E5E5"> so let's start</font>

3
00:00:10,280 --> 00:00:15,739
it<font color="#E5E5E5"> let's start</font><font color="#CCCCCC"> with some motivation</font><font color="#E5E5E5"> why</font>

4
00:00:13,730 --> 00:00:17,599
do we<font color="#E5E5E5"> need to validate softer right why</font>

5
00:00:15,740 --> 00:00:20,000
do you need to test to simulate to

6
00:00:17,599 --> 00:00:22,340
analyze it anyway<font color="#CCCCCC"> and there's very</font>

7
00:00:20,000 --> 00:00:24,980
simple<font color="#CCCCCC"> right we have bugs</font><font color="#E5E5E5"> and we want to</font>

8
00:00:22,340 --> 00:00:27,320
get rid<font color="#E5E5E5"> of bugs unless in those rare</font>

9
00:00:24,980 --> 00:00:30,380
situations they become features<font color="#E5E5E5"> we want</font>

10
00:00:27,320 --> 00:00:33,170
to get rid of<font color="#E5E5E5"> bugs right this is a</font>

11
00:00:30,380 --> 00:00:34,970
really<font color="#CCCCCC"> nice image I'm not really sure</font>

12
00:00:33,170 --> 00:00:37,040
it's real or not<font color="#E5E5E5"> but it's supposed</font><font color="#CCCCCC"> to be</font>

13
00:00:34,970 --> 00:00:39,140
the first bug report<font color="#E5E5E5"> ever created by</font>

14
00:00:37,040 --> 00:00:43,870
<font color="#E5E5E5">Grace Hopper</font><font color="#CCCCCC"> so that's the bug that</font>

15
00:00:39,140 --> 00:00:47,150
wasn't<font color="#E5E5E5"> the first in their computer</font><font color="#CCCCCC"> and</font>

16
00:00:43,870 --> 00:00:48,589
we still have bugs<font color="#E5E5E5"> right it's since the</font>

17
00:00:47,150 --> 00:00:50,239
first computer we still have<font color="#E5E5E5"> bugs so</font>

18
00:00:48,589 --> 00:00:54,290
<font color="#CCCCCC">we'll just give you</font><font color="#E5E5E5"> a present you some</font>

19
00:00:50,239 --> 00:00:57,739
some<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> they're around</font><font color="#E5E5E5"> for long time</font>

20
00:00:54,290 --> 00:01:00,199
<font color="#E5E5E5">and sometimes we just learn how to live</font>

21
00:00:57,739 --> 00:01:02,479
with them<font color="#E5E5E5"> and sometimes it</font><font color="#CCCCCC"> takes a while</font>

22
00:01:00,199 --> 00:01:05,298
<font color="#E5E5E5">just to find how</font><font color="#CCCCCC"> to how to</font><font color="#E5E5E5"> fix it</font>

23
00:01:02,479 --> 00:01:09,470
<font color="#E5E5E5">so</font><font color="#CCCCCC"> there is an 11</font><font color="#E5E5E5"> years old in Firefox a</font>

24
00:01:05,299 --> 00:01:14,290
<font color="#CCCCCC">4 years old bug with in wine a 17 years</font>

25
00:01:09,470 --> 00:01:16,940
old<font color="#CCCCCC"> and react</font><font color="#E5E5E5"> OS and so the question is</font>

26
00:01:14,290 --> 00:01:21,380
<font color="#E5E5E5">this works are there they are really</font>

27
00:01:16,940 --> 00:01:25,130
<font color="#E5E5E5">hard to</font><font color="#CCCCCC"> to spot so we need to we need</font><font color="#E5E5E5"> to</font>

28
00:01:21,380 --> 00:01:27,080
actually find them right<font color="#E5E5E5"> so ultimate</font>

29
00:01:25,130 --> 00:01:28,360
automatic bug trying to come to the

30
00:01:27,080 --> 00:01:33,710
<font color="#CCCCCC">rescue</font>

31
00:01:28,360 --> 00:01:36,260
kind<font color="#E5E5E5"> of not really yet but we we</font><font color="#CCCCCC"> have a</font>

32
00:01:33,710 --> 00:01:39,380
<font color="#E5E5E5">lot of good</font><font color="#CCCCCC"> results recently</font><font color="#E5E5E5"> so this</font>

33
00:01:36,260 --> 00:01:43,040
<font color="#CCCCCC">one's</font><font color="#E5E5E5"> from 14 is a tool called</font><font color="#CCCCCC"> CPP check</font>

34
00:01:39,380 --> 00:01:48,140
<font color="#CCCCCC">that found a bug that was 13</font><font color="#E5E5E5"> years old</font>

35
00:01:43,040 --> 00:01:50,780
in<font color="#E5E5E5"> xorg so those are improving and we</font>

36
00:01:48,140 --> 00:01:53,030
<font color="#CCCCCC">want them to</font><font color="#E5E5E5"> find bugs and actually</font>

37
00:01:50,780 --> 00:01:56,090
report them in a nice<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so we can fix</font>

38
00:01:53,030 --> 00:01:59,540
them<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so what's the difference</font>

39
00:01:56,090 --> 00:02:04,010
<font color="#E5E5E5">between doing some kind of analysis and</font>

40
00:01:59,540 --> 00:02:05,810
testing<font color="#E5E5E5"> so testing</font><font color="#CCCCCC"> let's suppose</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font>

41
00:02:04,010 --> 00:02:09,080
our<font color="#E5E5E5"> state space of the program over</font>

42
00:02:05,810 --> 00:02:11,180
there so testing usually<font color="#E5E5E5"> checks one path</font>

43
00:02:09,080 --> 00:02:12,650
right<font color="#E5E5E5"> we're going to give some</font><font color="#CCCCCC"> imports</font>

44
00:02:11,180 --> 00:02:14,480
some concrete imports we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> run</font>

45
00:02:12,650 --> 00:02:16,550
the tool and usually the checks won't

46
00:02:14,480 --> 00:02:18,470
pass it might check some other<font color="#E5E5E5"> passes</font>

47
00:02:16,550 --> 00:02:23,240
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we have</font>

48
00:02:18,470 --> 00:02:25,550
in in branches<font color="#E5E5E5"> etc it may miss arrows</font>

49
00:02:23,240 --> 00:02:28,460
<font color="#E5E5E5">but it's fast</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can do it</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

50
00:02:25,550 --> 00:02:31,340
times a lot<font color="#E5E5E5"> of a lot of tests and we</font>

51
00:02:28,460 --> 00:02:32,960
<font color="#E5E5E5">they get on</font><font color="#CCCCCC"> ok ok you there's no bug</font>

52
00:02:31,340 --> 00:02:36,680
here in this path you checked<font color="#E5E5E5"> oh there</font>

53
00:02:32,960 --> 00:02:38,990
is an arrow<font color="#CCCCCC"> on the other hand when we</font>

54
00:02:36,680 --> 00:02:42,140
<font color="#E5E5E5">are talking</font><font color="#CCCCCC"> about that canal Isis we</font>

55
00:02:38,990 --> 00:02:45,140
<font color="#E5E5E5">have a specification</font><font color="#CCCCCC"> princess we have it</font>

56
00:02:42,140 --> 00:02:48,709
LCL and we actually<font color="#CCCCCC"> check in the whole</font>

57
00:02:45,140 --> 00:02:51,769
state space<font color="#CCCCCC"> of the program and</font><font color="#E5E5E5"> after the</font>

58
00:02:48,710 --> 00:02:53,240
analysis we have either<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case</font>

59
00:02:51,770 --> 00:02:55,610
model checking<font color="#E5E5E5"> is one</font><font color="#CCCCCC"> what kind of</font>

60
00:02:53,240 --> 00:02:58,210
<font color="#CCCCCC">technology so we have there ok</font><font color="#E5E5E5"> there's</font>

61
00:02:55,610 --> 00:03:02,240
no bug or there's a bug in<font color="#CCCCCC"> his a trace</font>

62
00:02:58,210 --> 00:03:05,020
<font color="#CCCCCC">so he</font><font color="#E5E5E5"> actually shows</font><font color="#CCCCCC"> the path where how</font>

63
00:03:02,240 --> 00:03:08,470
to how they<font color="#CCCCCC"> did well there</font><font color="#E5E5E5"> was triggered</font>

64
00:03:05,020 --> 00:03:10,970
<font color="#CCCCCC">it's nice because explorers every single</font>

65
00:03:08,470 --> 00:03:13,600
path in<font color="#CCCCCC"> your program</font><font color="#E5E5E5"> but it doesn't</font>

66
00:03:10,970 --> 00:03:16,880
scale because well we explore everything

67
00:03:13,600 --> 00:03:18,769
<font color="#CCCCCC">so these are the the adventure</font><font color="#E5E5E5"> this</font>

68
00:03:16,880 --> 00:03:21,170
adventure<font color="#E5E5E5"> just one is fast it doesn't</font>

69
00:03:18,770 --> 00:03:27,440
explore all the paths<font color="#E5E5E5"> one is it slow and</font>

70
00:03:21,170 --> 00:03:29,929
explore everything<font color="#E5E5E5"> so this we have</font><font color="#CCCCCC"> to</font>

71
00:03:27,440 --> 00:03:32,300
come<font color="#CCCCCC"> up with ways to try to avoid this</font>

72
00:03:29,930 --> 00:03:34,010
<font color="#CCCCCC">exposure right this path explosion</font>

73
00:03:32,300 --> 00:03:36,800
exploring<font color="#E5E5E5"> or the best so there are two</font>

74
00:03:34,010 --> 00:03:40,100
main techniques<font color="#E5E5E5"> there and how to explore</font>

75
00:03:36,800 --> 00:03:42,290
<font color="#E5E5E5">the the state space there</font><font color="#CCCCCC"> BMC</font><font color="#E5E5E5"> and simple</font>

76
00:03:40,100 --> 00:03:45,920
execution<font color="#E5E5E5"> I'm going to focus in symbolic</font>

77
00:03:42,290 --> 00:03:49,609
execution<font color="#CCCCCC"> because it's how the clang</font>

78
00:03:45,920 --> 00:03:52,760
stack analyzer works so the<font color="#CCCCCC"> symbolic</font>

79
00:03:49,610 --> 00:03:54,380
execution<font color="#E5E5E5"> it we have our state space</font>

80
00:03:52,760 --> 00:03:58,090
right and<font color="#E5E5E5"> it we explore the paths</font>

81
00:03:54,380 --> 00:04:01,340
individually try looking<font color="#E5E5E5"> for violations</font>

82
00:03:58,090 --> 00:04:05,120
so let's say we have one path there and

83
00:04:01,340 --> 00:04:08,200
then<font color="#E5E5E5"> and look for the third node from</font>

84
00:04:05,120 --> 00:04:11,270
from the end to<font color="#CCCCCC"> the back and it's a</font>

85
00:04:08,200 --> 00:04:12,950
sorry the fourth<font color="#E5E5E5"> or the fifth one so</font>

86
00:04:11,270 --> 00:04:14,810
it's a branch there so what it<font color="#E5E5E5"> does</font><font color="#CCCCCC"> it's</font>

87
00:04:12,950 --> 00:04:17,298
follow this path then go back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that</font>

88
00:04:14,810 --> 00:04:19,608
branch<font color="#E5E5E5"> and follow the other</font><font color="#CCCCCC"> pair and you</font>

89
00:04:17,298 --> 00:04:21,620
<font color="#E5E5E5">go back to</font><font color="#CCCCCC"> the previous one</font><font color="#E5E5E5"> follows one</font>

90
00:04:19,608 --> 00:04:23,140
path and so it keeps<font color="#CCCCCC"> doing that and it</font>

91
00:04:21,620 --> 00:04:27,800
does it to

92
00:04:23,140 --> 00:04:30,419
<font color="#CCCCCC">Chuo</font><font color="#E5E5E5"> pass it will explore all</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> at</font>

93
00:04:27,800 --> 00:04:33,450
the state space maybe in a few cases

94
00:04:30,420 --> 00:04:35,040
but we have some small queries instead

95
00:04:33,450 --> 00:04:37,289
of<font color="#E5E5E5"> analyze everything is a whole week</font>

96
00:04:35,040 --> 00:04:40,320
<font color="#E5E5E5">and allows everything is</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> chunks</font><font color="#CCCCCC"> so</font>

97
00:04:37,290 --> 00:04:43,230
<font color="#CCCCCC">this will make the analysis a little</font><font color="#E5E5E5"> bit</font>

98
00:04:40,320 --> 00:04:45,719
faster<font color="#E5E5E5"> and this is how the</font><font color="#CCCCCC"> declines that</font>

99
00:04:43,230 --> 00:04:48,030
<font color="#CCCCCC">sunrise works so the concessional eyes</font>

100
00:04:45,720 --> 00:04:49,530
it's built<font color="#E5E5E5"> on</font><font color="#CCCCCC"> top of crank</font><font color="#E5E5E5"> it supports</font>

101
00:04:48,030 --> 00:04:52,049
<font color="#E5E5E5">all the other language their client</font>

102
00:04:49,530 --> 00:04:53,369
supports people perform<font color="#CCCCCC"> this</font>

103
00:04:52,050 --> 00:04:56,880
context-sensitive interprocedural

104
00:04:53,370 --> 00:04:59,070
analysis<font color="#E5E5E5"> and this is something</font><font color="#CCCCCC"> that we</font>

105
00:04:56,880 --> 00:05:00,960
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> to stress</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> just look at</font>

106
00:04:59,070 --> 00:05:04,950
<font color="#CCCCCC">translation unit</font><font color="#E5E5E5"> one translation unit</font>

107
00:05:00,960 --> 00:05:06,419
per time which might wreak some false

108
00:05:04,950 --> 00:05:08,820
positives<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> so you have a function</font>

109
00:05:06,420 --> 00:05:10,680
defined<font color="#E5E5E5"> another file it will might it</font>

110
00:05:08,820 --> 00:05:12,420
might<font color="#E5E5E5"> report some some false positive</font>

111
00:05:10,680 --> 00:05:17,340
bugs<font color="#E5E5E5"> something that is being worked on</font>

112
00:05:12,420 --> 00:05:20,120
by another<font color="#E5E5E5"> groups and it offers a wide</font>

113
00:05:17,340 --> 00:05:23,039
<font color="#CCCCCC">range of checkers so you have even for</font>

114
00:05:20,120 --> 00:05:25,830
pattern<font color="#E5E5E5"> matching jackets</font><font color="#CCCCCC"> all using off</font>

115
00:05:23,040 --> 00:05:28,910
unsafe<font color="#CCCCCC"> as</font><font color="#E5E5E5"> their core CPI</font><font color="#CCCCCC"> for instance</font>

116
00:05:25,830 --> 00:05:30,930
and<font color="#CCCCCC"> path sensitive checks which are the</font>

117
00:05:28,910 --> 00:05:33,060
the checkers that<font color="#CCCCCC"> I worked</font><font color="#E5E5E5"> in this</font>

118
00:05:30,930 --> 00:05:35,130
project<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it looks for the paths and</font>

119
00:05:33,060 --> 00:05:38,610
see if one proper<font color="#CCCCCC"> violaceous triggered</font>

120
00:05:35,130 --> 00:05:41,430
in that path<font color="#CCCCCC"> window point that the</font>

121
00:05:38,610 --> 00:05:44,580
reference is one one<font color="#CCCCCC"> example I'm</font><font color="#E5E5E5"> going</font>

122
00:05:41,430 --> 00:05:46,770
<font color="#E5E5E5">to show you in a</font><font color="#CCCCCC"> bit so the idea</font><font color="#E5E5E5"> is</font>

123
00:05:44,580 --> 00:05:50,010
we're gonna sacrifice precision for

124
00:05:46,770 --> 00:05:52,349
<font color="#CCCCCC">speech</font><font color="#E5E5E5"> the concern</font><font color="#CCCCCC"> alight so the</font><font color="#E5E5E5"> idea</font>

125
00:05:50,010 --> 00:05:55,080
behind is it's going to<font color="#E5E5E5"> analyze your</font>

126
00:05:52,350 --> 00:05:57,960
project it might<font color="#E5E5E5"> report some wrong</font>

127
00:05:55,080 --> 00:06:00,030
results on false bugs in my<font color="#E5E5E5"> me some bugs</font>

128
00:05:57,960 --> 00:06:03,419
<font color="#CCCCCC">but will give</font><font color="#E5E5E5"> you something so that's a</font>

129
00:06:00,030 --> 00:06:06,659
more industrial<font color="#E5E5E5"> expect</font><font color="#CCCCCC"> or the state</font>

130
00:06:03,420 --> 00:06:08,940
<font color="#E5E5E5">analyzer we we want to provide something</font>

131
00:06:06,660 --> 00:06:10,770
<font color="#E5E5E5">right it might not be the best results</font>

132
00:06:08,940 --> 00:06:13,650
but it's something<font color="#CCCCCC"> that the developer</font>

133
00:06:10,770 --> 00:06:17,280
can can have a look and understand so

134
00:06:13,650 --> 00:06:20,460
let's not wait for example here<font color="#E5E5E5"> so it's</font>

135
00:06:17,280 --> 00:06:23,549
very<font color="#E5E5E5"> simple function and we have</font><font color="#CCCCCC"> a</font>

136
00:06:20,460 --> 00:06:25,530
pointer to<font color="#CCCCCC"> zero we have a branch and</font><font color="#E5E5E5"> at</font>

137
00:06:23,550 --> 00:06:29,310
the<font color="#E5E5E5"> heifers otherwise it returns you is</font>

138
00:06:25,530 --> 00:06:33,059
this<font color="#E5E5E5"> program safe surprisingly enough</font>

139
00:06:29,310 --> 00:06:36,330
this program is safe because this is

140
00:06:33,060 --> 00:06:39,480
never true so we are<font color="#E5E5E5"> just selecting the</font>

141
00:06:36,330 --> 00:06:42,210
first the first bit<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> and selecting</font>

142
00:06:39,480 --> 00:06:44,400
<font color="#E5E5E5">the inverse today so it's always false</font>

143
00:06:42,210 --> 00:06:46,440
<font color="#CCCCCC">this is also</font><font color="#E5E5E5"> it's fragile</font><font color="#CCCCCC"> I agree</font>

144
00:06:44,400 --> 00:06:47,909
you guys is it something<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> don't</font>

145
00:06:46,440 --> 00:06:51,180
want to<font color="#E5E5E5"> have in your program but it's is</font>

146
00:06:47,910 --> 00:06:54,810
safe<font color="#CCCCCC"> so this is a very small</font><font color="#E5E5E5"> example</font>

147
00:06:51,180 --> 00:06:56,789
<font color="#CCCCCC">that</font><font color="#E5E5E5"> crying</font><font color="#CCCCCC"> when analyzing it</font>

148
00:06:54,810 --> 00:06:59,550
<font color="#CCCCCC">clanky doesn't support bitwise</font>

149
00:06:56,789 --> 00:07:01,680
operations so it just assumed that<font color="#E5E5E5"> this</font>

150
00:06:59,550 --> 00:07:05,970
condition might be true<font color="#E5E5E5"> and then he</font>

151
00:07:01,680 --> 00:07:07,410
reports<font color="#CCCCCC"> the bug so if you run clang and</font>

152
00:07:05,970 --> 00:07:13,460
then the second lies that you have this

153
00:07:07,410 --> 00:07:17,070
there is no point in<font color="#CCCCCC"> line for column</font><font color="#E5E5E5"> 12</font>

154
00:07:13,460 --> 00:07:19,109
and he also generates this nice<font color="#E5E5E5"> HTML</font>

155
00:07:17,070 --> 00:07:22,099
report<font color="#E5E5E5"> field so if you have a look there</font>

156
00:07:19,110 --> 00:07:25,380
you have this the steps<font color="#E5E5E5"> that he took to</font>

157
00:07:22,100 --> 00:07:28,440
to trigger the<font color="#E5E5E5"> denote point to the</font>

158
00:07:25,380 --> 00:07:30,600
<font color="#E5E5E5">Heffron so start with</font><font color="#CCCCCC"> Zed then assume in</font>

159
00:07:28,440 --> 00:07:32,460
the first part of the if condition the

160
00:07:30,600 --> 00:07:34,530
second part of<font color="#E5E5E5"> the composition</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> the</font>

161
00:07:32,460 --> 00:07:36,989
two branch of if and then they have

162
00:07:34,530 --> 00:07:38,340
<font color="#E5E5E5">friends so and this this is really nice</font>

163
00:07:36,990 --> 00:07:40,710
it's one of the best things about the

164
00:07:38,340 --> 00:07:43,679
<font color="#CCCCCC">Clemson Eliza the bug report because you</font>

165
00:07:40,710 --> 00:07:45,870
you just you<font color="#CCCCCC"> generate see</font><font color="#E5E5E5"> you the</font><font color="#CCCCCC"> dish</font>

166
00:07:43,680 --> 00:07:49,020
<font color="#CCCCCC">ml you open your browser</font><font color="#E5E5E5"> and you can use</font>

167
00:07:45,870 --> 00:07:50,699
the arrows<font color="#E5E5E5"> to just walk on the path so</font>

168
00:07:49,020 --> 00:07:54,090
it's quite<font color="#E5E5E5"> nice to</font><font color="#CCCCCC"> follow and try to</font>

169
00:07:50,699 --> 00:08:00,000
understand the<font color="#E5E5E5"> bug report itself</font><font color="#CCCCCC"> yes so</font>

170
00:07:54,090 --> 00:08:03,510
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the the wrong</font><font color="#E5E5E5"> assumption that I</font>

171
00:08:00,000 --> 00:08:05,880
was<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do a demo but my laptop</font>

172
00:08:03,510 --> 00:08:08,990
didn't work<font color="#CCCCCC"> so we're gonna try again</font><font color="#E5E5E5"> by</font>

173
00:08:05,880 --> 00:08:14,729
the<font color="#E5E5E5"> end hopefully</font><font color="#CCCCCC"> we can get it to work</font>

174
00:08:08,990 --> 00:08:17,639
<font color="#CCCCCC">okay so we have a precise analysis in</font>

175
00:08:14,729 --> 00:08:21,990
the<font color="#CCCCCC"> declarants analyzer</font><font color="#E5E5E5"> so why don't we</font>

176
00:08:17,639 --> 00:08:23,520
replace<font color="#CCCCCC"> it with more precise</font><font color="#E5E5E5"> yeah why</font>

177
00:08:21,990 --> 00:08:26,909
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> we replace with a precise over</font>

178
00:08:23,520 --> 00:08:28,799
right it's wrong then<font color="#CCCCCC"> so that was</font>

179
00:08:26,909 --> 00:08:32,309
something<font color="#CCCCCC"> that was done in 2017 by</font>

180
00:08:28,800 --> 00:08:35,070
<font color="#E5E5E5">Dominic Chang</font><font color="#CCCCCC"> so he used something</font>

181
00:08:32,309 --> 00:08:37,799
called<font color="#E5E5E5"> SMT solvers the one he</font>

182
00:08:35,070 --> 00:08:41,010
implemented it was<font color="#CCCCCC"> z3 from Microsoft</font><font color="#E5E5E5"> is</font>

183
00:08:37,799 --> 00:08:43,348
<font color="#E5E5E5">an open source SMT solver and it's it's</font>

184
00:08:41,010 --> 00:08:45,480
it's full precision<font color="#E5E5E5"> you encode</font>

185
00:08:43,349 --> 00:08:48,510
everything they ever<font color="#CCCCCC"> constrained</font><font color="#E5E5E5"> using</font>

186
00:08:45,480 --> 00:08:51,779
this theory of SMG<font color="#E5E5E5"> and you a new</font>

187
00:08:48,510 --> 00:08:54,870
analyzer project the problem is it was

188
00:08:51,779 --> 00:08:57,290
up<font color="#E5E5E5"> to 20 times</font><font color="#CCCCCC"> it's lower than the cost</font>

189
00:08:54,870 --> 00:09:00,830
<font color="#CCCCCC">rate so far so it kind of defeats our</font>

190
00:08:57,290 --> 00:09:03,140
initial idea of<font color="#E5E5E5"> producing something so</font>

191
00:09:00,830 --> 00:09:06,320
we are so slow that<font color="#E5E5E5"> in the end the user</font>

192
00:09:03,140 --> 00:09:08,210
<font color="#E5E5E5">just don't want to use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so we</font>

193
00:09:06,320 --> 00:09:10,910
still<font color="#CCCCCC"> want to be fast and</font><font color="#E5E5E5"> we still want</font>

194
00:09:08,210 --> 00:09:15,830
<font color="#E5E5E5">to produce some results some bug reports</font>

195
00:09:10,910 --> 00:09:19,030
there<font color="#E5E5E5"> so the user can use it right</font><font color="#CCCCCC"> so we</font>

196
00:09:15,830 --> 00:09:23,750
<font color="#E5E5E5">propose something else instead</font><font color="#CCCCCC"> of</font>

197
00:09:19,030 --> 00:09:25,400
<font color="#E5E5E5">replacing this and precise</font><font color="#CCCCCC"> silver in the</font>

198
00:09:23,750 --> 00:09:28,970
<font color="#E5E5E5">clinks analyzer</font><font color="#CCCCCC"> we're just going to add</font>

199
00:09:25,400 --> 00:09:31,040
this precise analysis as a processing

200
00:09:28,970 --> 00:09:32,770
step<font color="#E5E5E5"> so we're going to generate the</font>

201
00:09:31,040 --> 00:09:34,849
<font color="#E5E5E5">other bug reports with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> UM precise</font>

202
00:09:32,770 --> 00:09:36,860
solver and then we're gonna put

203
00:09:34,850 --> 00:09:39,200
processing them<font color="#E5E5E5"> in coding</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> precision</font>

204
00:09:36,860 --> 00:09:41,260
<font color="#E5E5E5">and check for such variability we check</font>

205
00:09:39,200 --> 00:09:43,580
if<font color="#CCCCCC"> those bugs are actually feasible</font><font color="#E5E5E5"> and</font>

206
00:09:41,260 --> 00:09:45,890
surprisingly<font color="#CCCCCC"> enough</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> adding an</font>

207
00:09:43,580 --> 00:09:48,710
extra<font color="#E5E5E5"> step and it makes the analysis</font>

208
00:09:45,890 --> 00:09:51,610
faster yeah I know it<font color="#E5E5E5"> sounds</font><font color="#CCCCCC"> weird</font><font color="#E5E5E5"> but</font>

209
00:09:48,710 --> 00:09:58,190
I'm gonna show you the and explain why

210
00:09:51,610 --> 00:10:01,460
briefly<font color="#E5E5E5"> so we are only</font><font color="#CCCCCC"> interested in</font><font color="#E5E5E5"> the</font>

211
00:09:58,190 --> 00:10:02,570
<font color="#CCCCCC">person sitive</font><font color="#E5E5E5"> checkers because we are</font>

212
00:10:01,460 --> 00:10:04,520
we're not<font color="#E5E5E5"> looking for pattern matching</font>

213
00:10:02,570 --> 00:10:05,840
<font color="#CCCCCC">so we are looking for the constraints</font>

214
00:10:04,520 --> 00:10:09,040
<font color="#CCCCCC">and a path and we are going to</font><font color="#E5E5E5"> call this</font>

215
00:10:05,840 --> 00:10:12,920
<font color="#E5E5E5">constraints and see if they</font><font color="#CCCCCC"> are feasible</font>

216
00:10:09,040 --> 00:10:14,900
<font color="#CCCCCC">so we are</font><font color="#E5E5E5"> used as</font><font color="#CCCCCC"> limited solvers we</font>

217
00:10:12,920 --> 00:10:18,170
code as I said encode and check for such

218
00:10:14,900 --> 00:10:20,540
variability<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> currently we have</font>

219
00:10:18,170 --> 00:10:22,490
<font color="#E5E5E5">five different solvers so that</font><font color="#CCCCCC"> rebel</font>

220
00:10:20,540 --> 00:10:27,380
like too much<font color="#CCCCCC"> sorry Isis and CBC for</font>

221
00:10:22,490 --> 00:10:30,590
only<font color="#CCCCCC"> salary</font><font color="#E5E5E5"> it is in the</font><font color="#CCCCCC"> in declaimed</font>

222
00:10:27,380 --> 00:10:32,270
main repo<font color="#CCCCCC"> main main repository</font><font color="#E5E5E5"> the</font>

223
00:10:30,590 --> 00:10:34,370
reason why is that<font color="#E5E5E5"> we implemented the</font>

224
00:10:32,270 --> 00:10:37,280
five of them and<font color="#CCCCCC"> basically have the we</font>

225
00:10:34,370 --> 00:10:40,160
had the<font color="#E5E5E5"> same results</font><font color="#CCCCCC"> so right now there</font>

226
00:10:37,280 --> 00:10:42,680
is no clear<font color="#E5E5E5"> adventure of having demo it</font>

227
00:10:40,160 --> 00:10:44,240
was<font color="#CCCCCC"> just it</font><font color="#E5E5E5"> will be just more</font><font color="#CCCCCC"> co2 and</font>

228
00:10:42,680 --> 00:10:47,239
things so right<font color="#E5E5E5"> now there's no</font>

229
00:10:44,240 --> 00:10:50,450
adventures of<font color="#CCCCCC"> hand</font><font color="#E5E5E5"> and if someone finds</font>

230
00:10:47,240 --> 00:10:52,220
<font color="#E5E5E5">a need for them in the future it's it's</font>

231
00:10:50,450 --> 00:10:55,610
<font color="#CCCCCC">they're ready</font><font color="#E5E5E5"> the patches are up it's</font>

232
00:10:52,220 --> 00:10:59,330
<font color="#E5E5E5">just a matter of merging them so this</font><font color="#CCCCCC"> is</font>

233
00:10:55,610 --> 00:11:03,590
the brief<font color="#E5E5E5"> overview</font><font color="#CCCCCC"> of the of the static</font>

234
00:10:59,330 --> 00:11:05,150
analyzer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the extra step so on the on</font>

235
00:11:03,590 --> 00:11:07,430
<font color="#E5E5E5">the left you have the</font><font color="#CCCCCC"> simple</font>

236
00:11:05,150 --> 00:11:10,340
executioner's<font color="#E5E5E5"> so basically what it works</font>

237
00:11:07,430 --> 00:11:10,880
is the symbolic<font color="#E5E5E5"> execution will look a</font>

238
00:11:10,340 --> 00:11:14,120
<font color="#E5E5E5">stand there</font>

239
00:11:10,880 --> 00:11:16,040
<font color="#CCCCCC">clang est we'll give this ast despair to</font>

240
00:11:14,120 --> 00:11:18,200
<font color="#CCCCCC">these checkers</font><font color="#E5E5E5"> the checkers will</font>

241
00:11:16,040 --> 00:11:21,230
generate some constraints so values that

242
00:11:18,200 --> 00:11:23,240
we have branches<font color="#CCCCCC"> in etc</font><font color="#E5E5E5"> and just</font><font color="#CCCCCC"> give to</font>

243
00:11:21,230 --> 00:11:25,880
this constraints over<font color="#E5E5E5"> it which is is no</font>

244
00:11:23,240 --> 00:11:27,770
wonder<font color="#E5E5E5"> it's not precise the solver will</font>

245
00:11:25,880 --> 00:11:30,710
try to solve this this<font color="#E5E5E5"> constraint and we</font>

246
00:11:27,770 --> 00:11:32,720
<font color="#E5E5E5">say</font><font color="#CCCCCC"> okay this</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> satisfied but this</font>

247
00:11:30,710 --> 00:11:34,880
bug is real<font color="#E5E5E5"> and it would generate a bug</font>

248
00:11:32,720 --> 00:11:38,420
report so<font color="#E5E5E5"> this is basically how how the</font>

249
00:11:34,880 --> 00:11:42,260
<font color="#E5E5E5">stack neither</font><font color="#CCCCCC"> worked</font><font color="#E5E5E5"> and now this next</font>

250
00:11:38,420 --> 00:11:43,670
step<font color="#CCCCCC"> called SMT reputation</font><font color="#E5E5E5"> we have for</font>

251
00:11:42,260 --> 00:11:45,319
each bug report which is going<font color="#E5E5E5"> to look</font>

252
00:11:43,670 --> 00:11:47,839
at the<font color="#E5E5E5"> cosines</font><font color="#CCCCCC"> we're gonna code in the</font>

253
00:11:45,320 --> 00:11:50,360
solvers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and check for such privilege</font>

254
00:11:47,840 --> 00:11:52,610
again<font color="#CCCCCC"> and then we're just gonna</font><font color="#E5E5E5"> report</font>

255
00:11:50,360 --> 00:11:54,800
the ones that we did<font color="#E5E5E5"> this over said okay</font>

256
00:11:52,610 --> 00:11:59,360
this is<font color="#CCCCCC"> satisfiable</font><font color="#E5E5E5"> this is feasible</font>

257
00:11:54,800 --> 00:12:01,760
this might happen<font color="#CCCCCC"> so this is the SME T</font>

258
00:11:59,360 --> 00:12:05,830
formula<font color="#CCCCCC"> for that program</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> the first</font>

259
00:12:01,760 --> 00:12:08,150
one that I showed<font color="#CCCCCC"> you so just real quick</font>

260
00:12:05,830 --> 00:12:10,340
<font color="#CCCCCC">they said there was a function of Arabic</font>

261
00:12:08,150 --> 00:12:12,740
all<font color="#E5E5E5"> right it was so this is converted to</font>

262
00:12:10,340 --> 00:12:15,850
star<font color="#CCCCCC"> zero and</font><font color="#E5E5E5"> basically what this</font>

263
00:12:12,740 --> 00:12:20,920
<font color="#E5E5E5">formula is checking is get the the</font><font color="#CCCCCC"> beat</font>

264
00:12:15,850 --> 00:12:24,110
from<font color="#E5E5E5"> zero to zero of stuff variable star</font>

265
00:12:20,920 --> 00:12:28,280
sorry don't let<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font>

266
00:12:24,110 --> 00:12:30,830
<font color="#CCCCCC">one and get zero the the first beat</font><font color="#E5E5E5"> of</font>

267
00:12:28,280 --> 00:12:33,380
dollar zero<font color="#E5E5E5"> and then should be zero so</font>

268
00:12:30,830 --> 00:12:36,470
<font color="#E5E5E5">basically what this is is doing is give</font>

269
00:12:33,380 --> 00:12:38,930
me<font color="#E5E5E5"> a bit vector right</font><font color="#CCCCCC"> effect of</font><font color="#E5E5E5"> bits</font>

270
00:12:36,470 --> 00:12:41,930
where the first one is<font color="#E5E5E5"> zero and the</font>

271
00:12:38,930 --> 00:12:43,280
first one is is one so this cannot

272
00:12:41,930 --> 00:12:44,810
happen<font color="#E5E5E5"> because we are dealing with</font>

273
00:12:43,280 --> 00:12:47,660
binary<font color="#E5E5E5"> variables so this is not such</font>

274
00:12:44,810 --> 00:12:49,369
viable and for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> reason when we do</font>

275
00:12:47,660 --> 00:12:51,230
this more precise<font color="#CCCCCC"> analysis in that first</font>

276
00:12:49,370 --> 00:12:56,030
project<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> program it will not</font>

277
00:12:51,230 --> 00:12:59,240
report the book<font color="#E5E5E5"> so we evaluated this</font>

278
00:12:56,030 --> 00:13:01,670
analysis in<font color="#CCCCCC"> twelve projects so you</font><font color="#E5E5E5"> see</font>

279
00:12:59,240 --> 00:13:04,100
some big projects there<font color="#CCCCCC"> I think the</font>

280
00:13:01,670 --> 00:13:07,880
biggest<font color="#E5E5E5"> one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> xn note the</font><font color="#CCCCCC"> network's</font>

281
00:13:04,100 --> 00:13:11,000
<font color="#E5E5E5">kernel so we have those five different</font>

282
00:13:07,880 --> 00:13:15,850
service that I told you and so<font color="#E5E5E5"> all the</font>

283
00:13:11,000 --> 00:13:15,850
instructions to reproduce this<font color="#E5E5E5"> these</font>

284
00:13:16,510 --> 00:13:21,380
results that<font color="#CCCCCC"> we had in there if you guys</font>

285
00:13:19,490 --> 00:13:22,970
you can check<font color="#CCCCCC"> there they're all the</font>

286
00:13:21,380 --> 00:13:24,110
results<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the versions of the of the</font>

287
00:13:22,970 --> 00:13:28,279
tools that<font color="#E5E5E5"> we used</font>

288
00:13:24,110 --> 00:13:31,610
and everything<font color="#CCCCCC"> so these are the results</font>

289
00:13:28,279 --> 00:13:35,689
<font color="#CCCCCC">I know a lot of numbers let's go through</font>

290
00:13:31,610 --> 00:13:37,970
them quickly<font color="#CCCCCC"> just</font><font color="#E5E5E5"> heads up these are</font>

291
00:13:35,690 --> 00:13:39,620
their<font color="#CCCCCC"> rich time of all</font><font color="#E5E5E5"> the sofas they're</font>

292
00:13:37,970 --> 00:13:42,170
basically performed the same so I just

293
00:13:39,620 --> 00:13:48,200
used the average day<font color="#E5E5E5"> so out of the</font>

294
00:13:42,170 --> 00:13:49,939
<font color="#CCCCCC">twelve in eight projects we removed</font><font color="#E5E5E5"> the</font>

295
00:13:48,200 --> 00:13:52,459
<font color="#E5E5E5">pucks right so this more precise</font>

296
00:13:49,940 --> 00:13:55,850
analysis was worth a and<font color="#CCCCCC"> remove the</font><font color="#E5E5E5"> bugs</font>

297
00:13:52,459 --> 00:13:58,518
<font color="#E5E5E5">and on average about</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> percent of the</font>

298
00:13:55,850 --> 00:14:01,339
<font color="#CCCCCC">bugs were removed all of them were</font><font color="#E5E5E5"> false</font>

299
00:13:58,519 --> 00:14:06,920
bugs we we are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> removing any real</font>

300
00:14:01,339 --> 00:14:11,300
real bug and on<font color="#E5E5E5"> average this is</font><font color="#CCCCCC"> 6</font>

301
00:14:06,920 --> 00:14:15,620
<font color="#CCCCCC">percent FASTA which is confusing</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> know</font>

302
00:14:11,300 --> 00:14:17,839
but the reason is<font color="#E5E5E5"> that's the</font><font color="#CCCCCC"> the funny</font>

303
00:14:15,620 --> 00:14:22,100
reason so the<font color="#E5E5E5"> gangsta analyzer generates</font>

304
00:14:17,839 --> 00:14:24,380
the HTML<font color="#E5E5E5"> reports and they are big right</font>

305
00:14:22,100 --> 00:14:27,320
so for that<font color="#E5E5E5"> small project</font><font color="#CCCCCC"> that I showed</font>

306
00:14:24,380 --> 00:14:29,300
<font color="#CCCCCC">you is about hundred K so for every</font>

307
00:14:27,320 --> 00:14:32,149
project<font color="#CCCCCC"> traffic bug report you just have</font>

308
00:14:29,300 --> 00:14:34,250
to generate this this bug<font color="#CCCCCC"> report so the</font>

309
00:14:32,149 --> 00:14:36,350
reason why we are<font color="#E5E5E5"> faster is that</font><font color="#CCCCCC"> we are</font>

310
00:14:34,250 --> 00:14:41,480
safe<font color="#CCCCCC"> from there you so there</font><font color="#E5E5E5"> is no write</font>

311
00:14:36,350 --> 00:14:43,519
<font color="#E5E5E5">to the disk of those HTML yeah so that's</font>

312
00:14:41,480 --> 00:14:44,779
why it's not<font color="#CCCCCC"> a huge gains there</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> 6</font>

313
00:14:43,519 --> 00:14:49,459
percent faster

314
00:14:44,779 --> 00:14:51,410
<font color="#E5E5E5">all right so oops on the project there</font>

315
00:14:49,459 --> 00:14:57,140
<font color="#CCCCCC">other</font><font color="#E5E5E5"> projects that we didn't remove any</font>

316
00:14:51,410 --> 00:14:59,810
bug on averages of<font color="#E5E5E5"> 1% slow down so these</font>

317
00:14:57,140 --> 00:15:02,240
are really<font color="#E5E5E5"> good results because</font><font color="#CCCCCC"> we when</font>

318
00:14:59,810 --> 00:15:05,359
we can do<font color="#E5E5E5"> something when we remove bad</font>

319
00:15:02,240 --> 00:15:08,480
results we actually faster and when we

320
00:15:05,360 --> 00:15:14,050
don't<font color="#CCCCCC"> they overhead is minimal</font><font color="#E5E5E5"> it's 1%</font>

321
00:15:08,480 --> 00:15:18,709
<font color="#CCCCCC">slowdown</font><font color="#E5E5E5"> so on total were 89 bugs</font>

322
00:15:14,050 --> 00:15:21,800
<font color="#E5E5E5">referred refuted on average there was a</font>

323
00:15:18,709 --> 00:15:25,849
test 5%<font color="#E5E5E5"> speed-up pet project is around</font>

324
00:15:21,800 --> 00:15:29,829
six point twenty five percent<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I 25 35</font>

325
00:15:25,850 --> 00:15:32,300
seconds<font color="#E5E5E5"> and when there are</font><font color="#CCCCCC"> no bugs</font>

326
00:15:29,829 --> 00:15:35,839
<font color="#CCCCCC">there's one second</font><font color="#E5E5E5"> slow down that's</font>

327
00:15:32,300 --> 00:15:37,130
usually one percent<font color="#CCCCCC"> slowed sorry one</font>

328
00:15:35,839 --> 00:15:39,550
second yeah

329
00:15:37,130 --> 00:15:43,720
<font color="#E5E5E5">it's one point two twenty four</font><font color="#CCCCCC"> percent</font>

330
00:15:39,550 --> 00:15:49,099
<font color="#E5E5E5">that</font><font color="#CCCCCC"> was going to be my second demo</font>

331
00:15:43,720 --> 00:15:52,490
<font color="#E5E5E5">these are we gonna try to delete to make</font>

332
00:15:49,100 --> 00:15:53,660
it work later but all the instructions I

333
00:15:52,490 --> 00:15:55,850
was going to give here they are

334
00:15:53,660 --> 00:15:58,040
<font color="#E5E5E5">available line so basically it's gonna</font>

335
00:15:55,850 --> 00:16:01,070
<font color="#E5E5E5">show you how to if you have a small</font>

336
00:15:58,040 --> 00:16:03,380
program and you<font color="#CCCCCC"> just want</font><font color="#E5E5E5"> to check your</font>

337
00:16:01,070 --> 00:16:06,530
small program<font color="#E5E5E5"> there's a nice</font><font color="#CCCCCC"> command</font>

338
00:16:03,380 --> 00:16:09,020
<font color="#E5E5E5">line</font><font color="#CCCCCC"> that you can use if you want</font><font color="#E5E5E5"> to use</font>

339
00:16:06,530 --> 00:16:11,839
some<font color="#CCCCCC"> kind of automated every night</font><font color="#E5E5E5"> run</font>

340
00:16:09,020 --> 00:16:13,850
the<font color="#E5E5E5"> clinic sterilizer the the claim in</font>

341
00:16:11,840 --> 00:16:16,280
<font color="#E5E5E5">the repository there are some scripts to</font>

342
00:16:13,850 --> 00:16:18,920
do that<font color="#E5E5E5"> so you just set the path to your</font>

343
00:16:16,280 --> 00:16:21,199
project<font color="#CCCCCC"> and then create a chrome tech a</font>

344
00:16:18,920 --> 00:16:23,120
cron job and every night we just run

345
00:16:21,200 --> 00:16:25,300
<font color="#CCCCCC">everything and every night</font><font color="#E5E5E5"> analyze</font>

346
00:16:23,120 --> 00:16:28,960
generate bug reports for your<font color="#E5E5E5"> to</font>

347
00:16:25,300 --> 00:16:36,260
<font color="#E5E5E5">hopefully we can get it to work later</font>

348
00:16:28,960 --> 00:16:41,930
<font color="#CCCCCC">okay so we have this SMT support</font><font color="#E5E5E5"> in the</font>

349
00:16:36,260 --> 00:16:44,510
in the claim in clanked right<font color="#E5E5E5"> and it was</font>

350
00:16:41,930 --> 00:16:50,839
released<font color="#E5E5E5"> as</font><font color="#CCCCCC"> part of</font><font color="#E5E5E5"> clang seven so a</font>

351
00:16:44,510 --> 00:16:52,939
wire go we<font color="#CCCCCC"> don't in</font><font color="#E5E5E5"> this project</font><font color="#CCCCCC"> I we</font>

352
00:16:50,840 --> 00:16:55,040
had to refactor a lot of code<font color="#E5E5E5"> from the</font>

353
00:16:52,940 --> 00:16:57,590
from the from the<font color="#E5E5E5"> Saturday back end and</font>

354
00:16:55,040 --> 00:17:02,959
now we have a proper SMT API in and of

355
00:16:57,590 --> 00:17:05,360
VM and as I<font color="#CCCCCC"> said we have patches</font><font color="#E5E5E5"> for the</font>

356
00:17:02,960 --> 00:17:08,240
<font color="#E5E5E5">surface but since they are there's no</font>

357
00:17:05,359 --> 00:17:11,599
clear advantage of having<font color="#E5E5E5"> them we we</font>

358
00:17:08,240 --> 00:17:15,380
<font color="#CCCCCC">just haven't submitted so what's the</font>

359
00:17:11,599 --> 00:17:19,129
<font color="#CCCCCC">future now</font><font color="#E5E5E5"> so the futures start with</font>

360
00:17:15,380 --> 00:17:21,920
dead patch<font color="#CCCCCC"> detached</font><font color="#E5E5E5"> called the deep</font>

361
00:17:19,130 --> 00:17:24,380
fifty four nine seven eight

362
00:17:21,920 --> 00:17:26,930
so it was too late<font color="#CCCCCC"> for engage</font>

363
00:17:24,380 --> 00:17:31,520
<font color="#E5E5E5">unfortunately but basically it's moving</font>

364
00:17:26,930 --> 00:17:34,280
the SMT API to all of them and what does

365
00:17:31,520 --> 00:17:37,550
<font color="#CCCCCC">it what does it</font><font color="#E5E5E5"> bring</font><font color="#CCCCCC"> to us</font><font color="#E5E5E5"> so the first</font>

366
00:17:34,280 --> 00:17:40,700
one is<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> people already</font><font color="#E5E5E5"> using it</font>

367
00:17:37,550 --> 00:17:44,450
to<font color="#E5E5E5"> validate transformation</font><font color="#CCCCCC"> paths in the</font>

368
00:17:40,700 --> 00:17:46,460
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> elephant elephant back</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> so so</font>

369
00:17:44,450 --> 00:17:49,820
in this case it's<font color="#E5E5E5"> call evolution is</font>

370
00:17:46,460 --> 00:17:53,010
generate formulas for the original

371
00:17:49,820 --> 00:17:54,809
be cold<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> optimized one and</font><font color="#E5E5E5"> just</font>

372
00:17:53,010 --> 00:17:57,900
try to<font color="#CCCCCC"> validate if the transformations</font>

373
00:17:54,809 --> 00:18:02,399
are actually real<font color="#CCCCCC"> if they are if they</font>

374
00:17:57,900 --> 00:18:04,770
<font color="#CCCCCC">are</font><font color="#E5E5E5"> if they hold in the future who knows</font>

375
00:18:02,400 --> 00:18:07,710
<font color="#E5E5E5">we might have an SMT back-end in a VM</font>

376
00:18:04,770 --> 00:18:10,379
<font color="#E5E5E5">there are some problems</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> need to be</font>

377
00:18:07,710 --> 00:18:13,290
fixed<font color="#E5E5E5"> software so memory handling how we</font>

378
00:18:10,380 --> 00:18:19,680
gonna handle loops there<font color="#CCCCCC"> so what you</font><font color="#E5E5E5"> can</font>

379
00:18:13,290 --> 00:18:22,710
<font color="#E5E5E5">try is no</font><font color="#CCCCCC"> summon acknowledgments this</font>

380
00:18:19,680 --> 00:18:26,280
this project was done part of the G<font color="#E5E5E5"> sock</font>

381
00:18:22,710 --> 00:18:30,720
and all of these<font color="#E5E5E5"> people helped me</font><font color="#CCCCCC"> in a</font>

382
00:18:26,280 --> 00:18:33,600
<font color="#E5E5E5">Rico to achieve</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> and that's it well</font>

383
00:18:30,720 --> 00:18:35,460
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very much so this is me the</font>

384
00:18:33,600 --> 00:18:37,830
experiments if you guys want<font color="#E5E5E5"> to take a</font>

385
00:18:35,460 --> 00:18:40,080
picture<font color="#CCCCCC"> there are all these</font><font color="#E5E5E5"> functions to</font>

386
00:18:37,830 --> 00:18:42,689
run their claims<font color="#CCCCCC"> Technol Iser</font><font color="#E5E5E5"> that was</font>

387
00:18:40,080 --> 00:18:45,809
going to show here<font color="#CCCCCC"> there so</font><font color="#E5E5E5"> you don't</font>

388
00:18:42,690 --> 00:18:47,520
actually need<font color="#CCCCCC"> to do I don't need</font><font color="#E5E5E5"> to</font>

389
00:18:45,809 --> 00:18:50,700
actually<font color="#E5E5E5"> to explain it but let's try to</font>

390
00:18:47,520 --> 00:18:53,879
do<font color="#E5E5E5"> it the clink second</font><font color="#CCCCCC"> eliezer webpage</font>

391
00:18:50,700 --> 00:18:56,040
and this is a<font color="#CCCCCC"> five-minute video just</font>

392
00:18:53,880 --> 00:18:58,380
showing<font color="#E5E5E5"> you</font><font color="#CCCCCC"> how to</font><font color="#E5E5E5"> run the second</font>

393
00:18:56,040 --> 00:19:01,700
<font color="#E5E5E5">eliezer on the owner term in our way so</font>

394
00:18:58,380 --> 00:19:03,800
you can follow it apply<font color="#E5E5E5"> to your project</font>

395
00:19:01,700 --> 00:19:08,570
yeah thank you

396
00:19:03,800 --> 00:19:14,120
[Applause]

397
00:19:08,570 --> 00:19:14,120
let's try to let's see if it works

398
00:19:24,000 --> 00:19:32,500
yeah it's not<font color="#E5E5E5"> working</font>

399
00:19:26,040 --> 00:19:35,230
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> yeah sorry</font><font color="#CCCCCC"> guys it's not work do</font>

400
00:19:32,500 --> 00:19:44,730
you want<font color="#CCCCCC"> to try him no there's nothing</font>

401
00:19:35,230 --> 00:19:44,730
<font color="#E5E5E5">not even the any video thing yeah yeah</font>

402
00:20:00,720 --> 00:20:08,530
yes<font color="#CCCCCC"> so the the question was</font><font color="#E5E5E5"> why we</font>

403
00:20:04,990 --> 00:20:13,030
didn't<font color="#CCCCCC"> integrate the the</font><font color="#E5E5E5"> the SMT in the</font>

404
00:20:08,530 --> 00:20:15,670
simple<font color="#CCCCCC"> execution</font><font color="#E5E5E5"> so so that was the</font><font color="#CCCCCC"> the</font>

405
00:20:13,030 --> 00:20:18,490
thing<font color="#CCCCCC"> that I said they would</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> 20</font>

406
00:20:15,670 --> 00:20:21,910
up<font color="#E5E5E5"> to 20 times lower and the reason was</font>

407
00:20:18,490 --> 00:20:25,720
because<font color="#CCCCCC"> how the</font><font color="#E5E5E5"> the clinks technologies</font>

408
00:20:21,910 --> 00:20:28,060
was created<font color="#E5E5E5"> it's every every</font><font color="#CCCCCC"> time we</font>

409
00:20:25,720 --> 00:20:29,560
generate a<font color="#E5E5E5"> new state so every time we we</font>

410
00:20:28,060 --> 00:20:33,250
are doing<font color="#CCCCCC"> the same execution generate a</font>

411
00:20:29,560 --> 00:20:36,730
<font color="#E5E5E5">new state we query the the sofa and this</font>

412
00:20:33,250 --> 00:20:39,610
is<font color="#E5E5E5"> extremely expensive to</font><font color="#CCCCCC"> query the</font>

413
00:20:36,730 --> 00:20:41,170
<font color="#E5E5E5">that's empty sofa and to change that in</font>

414
00:20:39,610 --> 00:20:43,240
<font color="#E5E5E5">the clink sighs</font><font color="#CCCCCC"> analyzer we require a</font>

415
00:20:41,170 --> 00:20:46,600
lot of<font color="#CCCCCC"> work</font><font color="#E5E5E5"> so that's why we moved to</font>

416
00:20:43,240 --> 00:20:50,970
<font color="#E5E5E5">this faster solution which was just</font>

417
00:20:46,600 --> 00:20:50,969
using<font color="#E5E5E5"> it as a post processing step</font>

418
00:20:56,200 --> 00:21:08,469
let me go back<font color="#E5E5E5"> this one oh sorry yeah oh</font>

419
00:21:08,499 --> 00:21:14,119
okay yeah that's<font color="#CCCCCC"> a good question</font><font color="#E5E5E5"> that's</font>

420
00:21:11,029 --> 00:21:17,479
<font color="#E5E5E5">a good question</font><font color="#CCCCCC"> so he asked I remove I</font>

421
00:21:14,119 --> 00:21:20,738
said that I removed where is it<font color="#CCCCCC"> on</font>

422
00:21:17,479 --> 00:21:23,330
average<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> percent right</font><font color="#CCCCCC"> so how many</font>

423
00:21:20,739 --> 00:21:26,989
more false positives<font color="#CCCCCC"> I still there</font>

424
00:21:23,330 --> 00:21:28,728
so<font color="#E5E5E5"> we doubt the reputation the numbers</font>

425
00:21:26,989 --> 00:21:30,739
are high<font color="#E5E5E5"> the false positives are right</font><font color="#CCCCCC"> a</font>

426
00:21:28,729 --> 00:21:32,839
<font color="#E5E5E5">high mostly because of the</font><font color="#CCCCCC"> lack of</font>

427
00:21:30,739 --> 00:21:37,129
course translation<font color="#CCCCCC"> unit support</font><font color="#E5E5E5"> so it's</font>

428
00:21:32,839 --> 00:21:39,499
around<font color="#CCCCCC"> 40% 50%</font><font color="#E5E5E5"> so this this removes one</font>

429
00:21:37,129 --> 00:21:42,769
part<font color="#E5E5E5"> of the problem of the problem</font><font color="#CCCCCC"> so</font>

430
00:21:39,499 --> 00:21:45,409
there is another another approach to<font color="#CCCCCC"> try</font>

431
00:21:42,769 --> 00:21:48,529
to remove those those false positives

432
00:21:45,409 --> 00:21:52,269
<font color="#CCCCCC">laughs so it's still under</font><font color="#E5E5E5"> development</font><font color="#CCCCCC"> I</font>

433
00:21:48,529 --> 00:21:55,940
didn't<font color="#E5E5E5"> even put it here but the idea</font><font color="#CCCCCC"> is</font>

434
00:21:52,269 --> 00:21:58,249
when we generate<font color="#E5E5E5"> the formula dry it will</font>

435
00:21:55,940 --> 00:22:01,549
generate for<font color="#E5E5E5"> me a</font><font color="#CCCCCC"> contra</font><font color="#E5E5E5"> example so</font>

436
00:21:58,249 --> 00:22:04,629
every assignment to the inputs of the<font color="#E5E5E5"> of</font>

437
00:22:01,549 --> 00:22:07,158
the functions and<font color="#E5E5E5"> everything that will</font>

438
00:22:04,629 --> 00:22:10,009
that will trigger this this proper

439
00:22:07,159 --> 00:22:12,859
<font color="#CCCCCC">solution</font><font color="#E5E5E5"> this bug so one idea is we can</font>

440
00:22:10,009 --> 00:22:15,619
<font color="#CCCCCC">use this information generate</font><font color="#E5E5E5"> test and</font>

441
00:22:12,859 --> 00:22:17,928
then we<font color="#E5E5E5"> just run the test the test that</font>

442
00:22:15,619 --> 00:22:20,599
don't crash don't don't give any<font color="#E5E5E5"> error</font>

443
00:22:17,929 --> 00:22:23,389
it will<font color="#E5E5E5"> just remove those but this is</font>

444
00:22:20,599 --> 00:22:25,249
not it's<font color="#CCCCCC"> not implemented yet</font><font color="#E5E5E5"> we haven't</font>

445
00:22:23,389 --> 00:22:28,968
<font color="#CCCCCC">started to</font><font color="#E5E5E5"> do it</font>

446
00:22:25,249 --> 00:22:31,299
this<font color="#E5E5E5"> is one approach</font><font color="#CCCCCC"> because right</font><font color="#E5E5E5"> now</font>

447
00:22:28,969 --> 00:22:33,919
<font color="#CCCCCC">we don't have a good</font><font color="#E5E5E5"> idea how to</font>

448
00:22:31,299 --> 00:22:38,210
implement the the course translation

449
00:22:33,919 --> 00:22:41,509
<font color="#E5E5E5">support effectively so I think the test</font>

450
00:22:38,210 --> 00:22:43,369
<font color="#E5E5E5">generation it will be a little bit</font>

451
00:22:41,509 --> 00:22:47,679
better<font color="#E5E5E5"> it will give a better results for</font>

452
00:22:43,369 --> 00:22:47,678
now okay

453
00:23:19,300 --> 00:23:25,580
right so the<font color="#E5E5E5"> first square the first</font>

454
00:23:22,310 --> 00:23:30,290
<font color="#E5E5E5">question was the second one was is there</font>

455
00:23:25,580 --> 00:23:31,850
any<font color="#E5E5E5"> way of restarting</font><font color="#CCCCCC"> cirthree</font><font color="#E5E5E5"> to make</font>

456
00:23:30,290 --> 00:23:36,580
<font color="#E5E5E5">it faster the first one sorry can you</font>

457
00:23:31,850 --> 00:23:39,679
repeat the<font color="#CCCCCC"> first one of the procedure</font>

458
00:23:36,580 --> 00:23:42,199
right<font color="#E5E5E5"> and the first one is about</font><font color="#CCCCCC"> how can</font>

459
00:23:39,680 --> 00:23:48,140
<font color="#CCCCCC">we</font><font color="#E5E5E5"> control the precision in that way so</font>

460
00:23:42,200 --> 00:23:50,900
the first<font color="#CCCCCC"> one I'd say we don't want</font><font color="#E5E5E5"> to</font>

461
00:23:48,140 --> 00:23:53,810
be less precise<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> already</font>

462
00:23:50,900 --> 00:23:57,950
running<font color="#E5E5E5"> a less precise analysis and we</font>

463
00:23:53,810 --> 00:23:59,990
want to actually<font color="#E5E5E5"> remove the</font><font color="#CCCCCC"> false</font><font color="#E5E5E5"> box so</font>

464
00:23:57,950 --> 00:24:02,840
we want to be as precise as<font color="#CCCCCC"> you can be</font>

465
00:23:59,990 --> 00:24:06,980
right<font color="#CCCCCC"> the second</font><font color="#E5E5E5"> question is about</font>

466
00:24:02,840 --> 00:24:11,590
trying<font color="#E5E5E5"> to restart sofa to improve the</font>

467
00:24:06,980 --> 00:24:15,100
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> we've tried that</font><font color="#CCCCCC"> we also try</font>

468
00:24:11,590 --> 00:24:19,040
<font color="#E5E5E5">do something called incremental solving</font>

469
00:24:15,100 --> 00:24:21,709
<font color="#E5E5E5">but the results were not great because</font>

470
00:24:19,040 --> 00:24:26,450
<font color="#E5E5E5">the sofa as it is implemented</font>

471
00:24:21,710 --> 00:24:28,790
it's stateless so we did it<font color="#CCCCCC"> there was a</font>

472
00:24:26,450 --> 00:24:31,300
lot<font color="#CCCCCC"> of hack involved in the code it was</font>

473
00:24:28,790 --> 00:24:34,810
<font color="#E5E5E5">not pretty and we didn't get any</font>

474
00:24:31,300 --> 00:24:34,810
performance improvement

475
00:24:37,020 --> 00:24:39,770
<font color="#E5E5E5">okay</font>

476
00:24:40,420 --> 00:24:48,769
[Applause]

