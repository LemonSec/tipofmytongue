1
00:00:08,660 --> 00:00:13,150
it's on<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> okay</font>

2
00:00:18,600 --> 00:00:21,670
[Music]

3
00:00:24,029 --> 00:00:27,329
please stay

4
00:00:30,700 --> 00:00:33,970
<font color="#E5E5E5">okay cool</font>

5
00:00:37,160 --> 00:00:49,459
<font color="#CCCCCC">where I guess I have to scream</font><font color="#E5E5E5"> that's</font>

6
00:00:46,980 --> 00:00:49,459
weird

7
00:00:57,739 --> 00:01:01,309
yeah maybe<font color="#E5E5E5"> that's better</font>

8
00:01:10,060 --> 00:01:17,009
[Music]

9
00:01:12,350 --> 00:01:18,809
hello<font color="#E5E5E5"> so um yeah my name is Max and I'm</font>

10
00:01:17,009 --> 00:01:21,659
a software<font color="#CCCCCC"> engineer</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> beam</font><font color="#E5E5E5"> project</font>

11
00:01:18,810 --> 00:01:24,360
<font color="#CCCCCC">and I want to tell you about being today</font>

12
00:01:21,659 --> 00:01:27,090
and how<font color="#CCCCCC"> beam realized its vision for</font>

13
00:01:24,360 --> 00:01:29,070
<font color="#CCCCCC">portability</font><font color="#E5E5E5"> and what do I mean by</font>

14
00:01:27,090 --> 00:01:31,140
portability because<font color="#E5E5E5"> portability can mean</font>

15
00:01:29,070 --> 00:01:32,939
a<font color="#E5E5E5"> lot of things well first of all and</font>

16
00:01:31,140 --> 00:01:36,810
you<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> listen carefully to</font>

17
00:01:32,939 --> 00:01:39,029
understand but<font color="#CCCCCC"> hey called but the short</font>

18
00:01:36,810 --> 00:01:40,740
<font color="#E5E5E5">answer is</font><font color="#CCCCCC"> that it enables you to run</font>

19
00:01:39,030 --> 00:01:42,690
<font color="#E5E5E5">your data processing jobs on top of</font>

20
00:01:40,740 --> 00:01:44,068
various execution engines<font color="#E5E5E5"> like spark or</font>

21
00:01:42,690 --> 00:01:46,380
<font color="#CCCCCC">flick or</font><font color="#E5E5E5"> Samsung or Google Cloud</font>

22
00:01:44,069 --> 00:01:48,509
dataflow<font color="#E5E5E5"> and you can do that in the</font>

23
00:01:46,380 --> 00:01:50,580
<font color="#E5E5E5">programming language</font><font color="#CCCCCC"> of your choice</font><font color="#E5E5E5"> so</font>

24
00:01:48,509 --> 00:01:53,670
<font color="#E5E5E5">that sounds</font><font color="#CCCCCC"> pretty good doesn't it</font>

25
00:01:50,580 --> 00:01:55,679
so I've put this<font color="#E5E5E5"> agenda together so</font>

26
00:01:53,670 --> 00:01:57,720
first<font color="#E5E5E5"> of all I mean some of you might</font>

27
00:01:55,679 --> 00:01:59,819
know<font color="#E5E5E5"> beam</font><font color="#CCCCCC"> BAM I will give like a short</font>

28
00:01:57,720 --> 00:02:01,350
introduction<font color="#E5E5E5"> then we will talk about you</font>

29
00:01:59,819 --> 00:02:04,920
know a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more about portability</font>

30
00:02:01,350 --> 00:02:06,568
<font color="#CCCCCC">and then how we</font><font color="#E5E5E5"> can actually</font><font color="#CCCCCC"> achieve it</font>

31
00:02:04,920 --> 00:02:09,750
<font color="#E5E5E5">because there</font><font color="#CCCCCC"> are multiple ways to do</font>

32
00:02:06,569 --> 00:02:12,060
that and then we let's recap and see<font color="#CCCCCC"> um</font>

33
00:02:09,750 --> 00:02:15,720
how<font color="#CCCCCC"> far</font><font color="#E5E5E5"> we are actually with portability</font>

34
00:02:12,060 --> 00:02:18,209
<font color="#CCCCCC">so what is beam so first of all beam is</font>

35
00:02:15,720 --> 00:02:20,400
an<font color="#E5E5E5"> open</font><font color="#CCCCCC"> source project at the Apache</font>

36
00:02:18,209 --> 00:02:22,019
Software Foundation<font color="#CCCCCC"> so I don't know if</font>

37
00:02:20,400 --> 00:02:23,280
you know the pipe<font color="#CCCCCC"> Apache Software - but</font>

38
00:02:22,019 --> 00:02:27,329
it's like<font color="#E5E5E5"> a</font><font color="#CCCCCC"> framework for developing</font>

39
00:02:23,280 --> 00:02:29,579
open<font color="#E5E5E5"> source</font><font color="#CCCCCC"> software which they</font><font color="#E5E5E5"> provide</font>

40
00:02:27,329 --> 00:02:32,420
<font color="#E5E5E5">infrastructure and kind of a guide how</font>

41
00:02:29,579 --> 00:02:35,609
<font color="#E5E5E5">to develop software and open source</font><font color="#CCCCCC"> and</font>

42
00:02:32,420 --> 00:02:37,230
<font color="#E5E5E5">beam is a project there and it focuses</font>

43
00:02:35,609 --> 00:02:39,959
on parallel<font color="#E5E5E5"> and distribute data</font>

44
00:02:37,230 --> 00:02:42,149
processing so and you typically run<font color="#E5E5E5"> your</font>

45
00:02:39,959 --> 00:02:44,340
beam<font color="#E5E5E5"> job on like multiple machines and</font>

46
00:02:42,150 --> 00:02:46,709
and you have probably a lot you<font color="#CCCCCC"> have</font>

47
00:02:44,340 --> 00:02:48,079
mostly<font color="#E5E5E5"> large data but you</font><font color="#CCCCCC"> can also run</font>

48
00:02:46,709 --> 00:02:50,700
<font color="#CCCCCC">it on a single machine if you</font><font color="#E5E5E5"> want and</font>

49
00:02:48,079 --> 00:02:52,170
it has a really<font color="#CCCCCC"> cool API which can do</font>

50
00:02:50,700 --> 00:02:54,390
better<font color="#CCCCCC"> and stream processing at the same</font>

51
00:02:52,170 --> 00:02:56,608
time so often like you have like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> batch</font>

52
00:02:54,390 --> 00:02:59,279
<font color="#CCCCCC">in stream API which are separate and you</font>

53
00:02:56,609 --> 00:03:01,850
have to like port your<font color="#CCCCCC"> bachelor up to</font>

54
00:02:59,280 --> 00:03:05,069
streaming<font color="#E5E5E5"> but in beam it's all the same</font>

55
00:03:01,850 --> 00:03:07,350
<font color="#CCCCCC">so and and once you've written your</font><font color="#E5E5E5"> job</font>

56
00:03:05,069 --> 00:03:09,810
<font color="#E5E5E5">you can actually run it on like multiple</font>

57
00:03:07,350 --> 00:03:12,269
executions engines that's<font color="#CCCCCC"> why sometimes</font>

58
00:03:09,810 --> 00:03:14,190
we say it's like<font color="#E5E5E5"> an uber API because I</font>

59
00:03:12,269 --> 00:03:15,480
use one API but you can execute with

60
00:03:14,190 --> 00:03:18,420
multiple back

61
00:03:15,480 --> 00:03:20,510
or<font color="#E5E5E5"> execution engine and now you can also</font>

62
00:03:18,420 --> 00:03:24,540
use<font color="#CCCCCC"> your favorite</font><font color="#E5E5E5"> programming language</font>

63
00:03:20,510 --> 00:03:26,310
<font color="#CCCCCC">so a little</font><font color="#E5E5E5"> bit more</font><font color="#CCCCCC"> detail on this so</font>

64
00:03:24,540 --> 00:03:30,060
we<font color="#E5E5E5"> have I mean this is the vision of</font>

65
00:03:26,310 --> 00:03:33,540
beam we have<font color="#E5E5E5"> the SDKs here on the left</font>

66
00:03:30,060 --> 00:03:37,050
side<font color="#E5E5E5"> and so that's like Java go Python</font>

67
00:03:33,540 --> 00:03:39,329
scholar and sequel and then we have some

68
00:03:37,050 --> 00:03:40,980
magic happening and beam which are the

69
00:03:39,330 --> 00:03:43,080
runners there's a runner for every

70
00:03:40,980 --> 00:03:46,700
execution<font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> and the runner</font>

71
00:03:43,080 --> 00:03:50,630
translates the beam job in the SDK into

72
00:03:46,700 --> 00:03:53,119
the language of<font color="#E5E5E5"> the execution engine and</font>

73
00:03:50,630 --> 00:03:57,329
you can see<font color="#CCCCCC"> there a bunch of them and</font>

74
00:03:53,120 --> 00:03:59,069
more<font color="#E5E5E5"> and more are coming and yeah I mean</font>

75
00:03:57,330 --> 00:04:02,459
<font color="#E5E5E5">that's really nice to have</font><font color="#CCCCCC"> that choice</font>

76
00:03:59,069 --> 00:04:05,760
<font color="#E5E5E5">right so how does the API work like just</font>

77
00:04:02,459 --> 00:04:09,630
<font color="#E5E5E5">concept wise so in beam</font><font color="#CCCCCC"> they're they're</font>

78
00:04:05,760 --> 00:04:11,040
called<font color="#CCCCCC"> they're RP collections</font><font color="#E5E5E5"> so the</font>

79
00:04:09,630 --> 00:04:13,500
first<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> there there's the pipeline</font>

80
00:04:11,040 --> 00:04:15,750
the pipeline is like the the<font color="#E5E5E5"> object that</font>

81
00:04:13,500 --> 00:04:17,279
holds<font color="#CCCCCC"> all your</font><font color="#E5E5E5"> job information so you</font>

82
00:04:15,750 --> 00:04:20,190
create that from some options which you

83
00:04:17,279 --> 00:04:22,169
<font color="#E5E5E5">can pass in there and then you am create</font>

84
00:04:20,190 --> 00:04:24,870
P collections P collections are created

85
00:04:22,169 --> 00:04:26,940
by<font color="#CCCCCC"> applying transforms to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pipeline</font>

86
00:04:24,870 --> 00:04:28,830
<font color="#E5E5E5">so you do always like apply transform so</font>

87
00:04:26,940 --> 00:04:31,050
it's really<font color="#CCCCCC"> easy and this can be like</font>

88
00:04:28,830 --> 00:04:33,330
you can do multiple<font color="#E5E5E5"> transforms after</font>

89
00:04:31,050 --> 00:04:36,750
each other<font color="#E5E5E5"> or you can do you can also</font>

90
00:04:33,330 --> 00:04:39,180
branch like here where you create this<font color="#E5E5E5"> P</font>

91
00:04:36,750 --> 00:04:42,900
call<font color="#CCCCCC"> two which is like you</font><font color="#E5E5E5"> know a branch</font>

92
00:04:39,180 --> 00:04:45,840
of people<font color="#E5E5E5"> one so and then you can you</font>

93
00:04:42,900 --> 00:04:46,440
<font color="#CCCCCC">can run that and that pipeline</font><font color="#E5E5E5"> it's</font>

94
00:04:45,840 --> 00:04:48,840
pretty<font color="#E5E5E5"> sweet</font>

95
00:04:46,440 --> 00:04:51,510
so transforms are actually quite nice

96
00:04:48,840 --> 00:04:53,729
<font color="#CCCCCC">abstraction because transforms can</font><font color="#E5E5E5"> be</font>

97
00:04:51,510 --> 00:04:56,669
either primitive<font color="#CCCCCC"> or</font><font color="#E5E5E5"> composite what does</font>

98
00:04:53,729 --> 00:04:59,520
it mean actually<font color="#CCCCCC"> in beam we only have a</font>

99
00:04:56,669 --> 00:05:02,099
few<font color="#CCCCCC"> primitive transforms we only have</font>

100
00:04:59,520 --> 00:05:04,890
like<font color="#CCCCCC"> pardhu</font><font color="#E5E5E5"> group by key</font><font color="#CCCCCC"> assign Windows</font>

101
00:05:02,100 --> 00:05:07,229
and<font color="#CCCCCC"> flatten so I will</font><font color="#E5E5E5"> explain two of</font>

102
00:05:04,890 --> 00:05:08,789
them in a bit but so<font color="#E5E5E5"> basically what that</font>

103
00:05:07,229 --> 00:05:11,960
<font color="#CCCCCC">means you can define like composer</font>

104
00:05:08,789 --> 00:05:13,830
transforms would use<font color="#E5E5E5"> these and then</font>

105
00:05:11,960 --> 00:05:15,840
these<font color="#CCCCCC"> are actually the composer</font>

106
00:05:13,830 --> 00:05:17,310
transforms like expanded to<font color="#CCCCCC"> this</font>

107
00:05:15,840 --> 00:05:19,169
primitive<font color="#E5E5E5"> ones which is really easy</font>

108
00:05:17,310 --> 00:05:21,660
because we just<font color="#E5E5E5"> need to I mean</font><font color="#CCCCCC"> as a</font>

109
00:05:19,169 --> 00:05:24,570
runner<font color="#CCCCCC"> creator you just need to</font>

110
00:05:21,660 --> 00:05:27,060
implement<font color="#CCCCCC"> those for primitive transforms</font>

111
00:05:24,570 --> 00:05:28,980
and we can we<font color="#E5E5E5"> can do optimizations</font><font color="#CCCCCC"> for</font>

112
00:05:27,060 --> 00:05:31,320
<font color="#E5E5E5">composite transforms but it's enough to</font>

113
00:05:28,980 --> 00:05:32,880
<font color="#E5E5E5">that primitive transform so of course</font>

114
00:05:31,320 --> 00:05:35,490
because this<font color="#CCCCCC"> is like a big data</font>

115
00:05:32,880 --> 00:05:38,640
framework<font color="#E5E5E5"> we have to do a little word</font>

116
00:05:35,490 --> 00:05:40,140
count<font color="#E5E5E5"> and for those</font><font color="#CCCCCC"> of you who don't</font>

117
00:05:38,640 --> 00:05:42,030
<font color="#E5E5E5">know what count is basically you're</font>

118
00:05:40,140 --> 00:05:44,370
<font color="#E5E5E5">trying to you have a list of words like</font>

119
00:05:42,030 --> 00:05:47,099
to be or not<font color="#CCCCCC"> to be and you try</font><font color="#E5E5E5"> to count</font>

120
00:05:44,370 --> 00:05:49,740
how<font color="#CCCCCC"> often is like a unique word</font><font color="#E5E5E5"> distinct</font>

121
00:05:47,100 --> 00:05:52,170
word appears<font color="#CCCCCC"> in that list</font><font color="#E5E5E5"> it's a way</font><font color="#CCCCCC"> to</font>

122
00:05:49,740 --> 00:05:54,390
do that is you to use if we<font color="#CCCCCC"> are talking</font>

123
00:05:52,170 --> 00:05:57,210
<font color="#CCCCCC">about beam then use a pardhu which</font>

124
00:05:54,390 --> 00:05:59,340
stands<font color="#E5E5E5"> for parallel do and you would you</font>

125
00:05:57,210 --> 00:06:01,140
would<font color="#E5E5E5"> assign like a key value you would</font>

126
00:05:59,340 --> 00:06:03,539
transform your words into a key value

127
00:06:01,140 --> 00:06:05,909
object with like<font color="#E5E5E5"> one which stands</font><font color="#CCCCCC"> for</font>

128
00:06:03,540 --> 00:06:08,880
number<font color="#E5E5E5"> of occurrences and</font><font color="#CCCCCC"> then you would</font>

129
00:06:05,910 --> 00:06:12,060
do a group by key which basically well

130
00:06:08,880 --> 00:06:15,000
shuffles the data and gives you a list

131
00:06:12,060 --> 00:06:16,950
of all<font color="#E5E5E5"> the values for every distinct key</font>

132
00:06:15,000 --> 00:06:19,680
and then you can sum<font color="#E5E5E5"> them up</font><font color="#CCCCCC"> and you</font>

133
00:06:16,950 --> 00:06:24,140
know that<font color="#CCCCCC"> two is twice in this list and</font>

134
00:06:19,680 --> 00:06:27,000
<font color="#CCCCCC">B also</font><font color="#E5E5E5"> and the others</font><font color="#CCCCCC"> just once and so</font>

135
00:06:24,140 --> 00:06:29,460
don't don't<font color="#E5E5E5"> get confused now this is</font>

136
00:06:27,000 --> 00:06:31,440
this<font color="#E5E5E5"> looks really ugly</font><font color="#CCCCCC"> and this is</font>

137
00:06:29,460 --> 00:06:33,510
actually<font color="#E5E5E5"> how you would do it in beam but</font>

138
00:06:31,440 --> 00:06:36,450
we will see we can simplify it a lot so

139
00:06:33,510 --> 00:06:38,099
we we have the pipeline<font color="#E5E5E5"> we created we</font>

140
00:06:36,450 --> 00:06:40,950
have<font color="#E5E5E5"> our list of words in this case like</font>

141
00:06:38,100 --> 00:06:42,930
hello hello<font color="#CCCCCC"> foster and we we have this</font>

142
00:06:40,950 --> 00:06:45,630
power<font color="#E5E5E5"> do this first one with the signs</font>

143
00:06:42,930 --> 00:06:47,970
like the<font color="#E5E5E5"> one and then we do a group by</font>

144
00:06:45,630 --> 00:06:50,180
key and then<font color="#E5E5E5"> we have this loop here in</font>

145
00:06:47,970 --> 00:06:54,300
the second<font color="#E5E5E5"> part which sums it all up</font>

146
00:06:50,180 --> 00:06:57,390
yeah I mean<font color="#E5E5E5"> that was pretty ugly</font><font color="#CCCCCC"> I agree</font>

147
00:06:54,300 --> 00:07:01,070
<font color="#CCCCCC">I mean I don't know</font><font color="#E5E5E5"> a better way to</font>

148
00:06:57,390 --> 00:07:04,430
write this any non comprehensible so

149
00:07:01,070 --> 00:07:07,950
luckily<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> composer transforms so</font>

150
00:07:04,430 --> 00:07:10,320
we we can simplify this<font color="#E5E5E5"> now further so</font>

151
00:07:07,950 --> 00:07:13,409
instead of<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> the the first pardhu</font>

152
00:07:10,320 --> 00:07:15,240
which<font color="#E5E5E5"> we're where we do this</font><font color="#CCCCCC"> do the end</font>

153
00:07:13,410 --> 00:07:17,250
function<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just use a map elements</font>

154
00:07:15,240 --> 00:07:20,220
function which is slightly some more

155
00:07:17,250 --> 00:07:22,140
simple<font color="#E5E5E5"> and we do like an integers perky</font>

156
00:07:20,220 --> 00:07:26,280
<font color="#CCCCCC">composer transforms but which does</font>

157
00:07:22,140 --> 00:07:29,060
basically it<font color="#E5E5E5"> sounds up the value the</font>

158
00:07:26,280 --> 00:07:33,599
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> occurrences for each key</font><font color="#E5E5E5"> and</font>

159
00:07:29,060 --> 00:07:35,310
we can<font color="#E5E5E5"> simplify this even further by by</font>

160
00:07:33,600 --> 00:07:37,170
just<font color="#CCCCCC"> using this count per</font><font color="#E5E5E5"> element from</font>

161
00:07:35,310 --> 00:07:38,620
<font color="#CCCCCC">posit transform so that looks pretty</font>

162
00:07:37,170 --> 00:07:42,080
simple<font color="#E5E5E5"> right</font>

163
00:07:38,620 --> 00:07:43,670
so<font color="#CCCCCC"> they're love these transforms and</font>

164
00:07:42,080 --> 00:07:45,680
beam and if you read the documentation

165
00:07:43,670 --> 00:07:47,780
<font color="#E5E5E5">you can you can write really readable</font>

166
00:07:45,680 --> 00:07:51,470
<font color="#E5E5E5">code even</font><font color="#CCCCCC"> in Java</font><font color="#E5E5E5"> because that is that</font>

167
00:07:47,780 --> 00:07:53,299
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> Java API and we have of course</font>

168
00:07:51,470 --> 00:07:56,720
fortunately also a Python API which

169
00:07:53,300 --> 00:07:59,360
which looks so much nicer<font color="#CCCCCC"> so here this</font>

170
00:07:56,720 --> 00:08:02,180
<font color="#E5E5E5">would be the same initial example we</font>

171
00:07:59,360 --> 00:08:06,560
just<font color="#CCCCCC"> use Lambor functions</font><font color="#E5E5E5"> to that do</font>

172
00:08:02,180 --> 00:08:08,540
that<font color="#E5E5E5"> work count and also in</font><font color="#CCCCCC"> Python we</font>

173
00:08:06,560 --> 00:08:11,240
have of<font color="#CCCCCC"> course these composer transforms</font>

174
00:08:08,540 --> 00:08:13,010
so this is maybe slightly<font color="#E5E5E5"> simpler where</font>

175
00:08:11,240 --> 00:08:16,240
we have the combined cookie function and

176
00:08:13,010 --> 00:08:19,610
we passed some<font color="#E5E5E5"> same</font><font color="#CCCCCC"> sum as an argument</font>

177
00:08:16,240 --> 00:08:21,200
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just a like a very quick look</font>

178
00:08:19,610 --> 00:08:24,080
into<font color="#E5E5E5"> the beam API</font><font color="#CCCCCC"> I thought it would be</font>

179
00:08:21,200 --> 00:08:25,729
useful<font color="#E5E5E5"> there's lots of more</font><font color="#CCCCCC"> Composer</font>

180
00:08:24,080 --> 00:08:28,099
transforms you can create your<font color="#CCCCCC"> own we</font>

181
00:08:25,730 --> 00:08:31,340
have<font color="#E5E5E5"> lots of</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> we have windowing event</font>

182
00:08:28,100 --> 00:08:33,500
time watermark<font color="#CCCCCC"> sight inputs I mean state</font>

183
00:08:31,340 --> 00:08:35,089
and timers which is it<font color="#E5E5E5"> doesn't make</font>

184
00:08:33,500 --> 00:08:37,429
sense<font color="#E5E5E5"> to you at the moment maybe if you</font>

185
00:08:35,090 --> 00:08:40,490
haven't tried<font color="#CCCCCC"> it but it's really useful</font>

186
00:08:37,429 --> 00:08:43,299
concept once you learn more about beam

187
00:08:40,490 --> 00:08:46,580
and your pipeline gets more complicated

188
00:08:43,299 --> 00:08:49,760
<font color="#CCCCCC">so what does portability mean now I</font><font color="#E5E5E5"> mean</font>

189
00:08:46,580 --> 00:08:51,890
I<font color="#E5E5E5"> showed you Java</font><font color="#CCCCCC"> I showed you - where</font>

190
00:08:49,760 --> 00:08:55,400
does I<font color="#CCCCCC"> mean it's I</font><font color="#E5E5E5"> mean that should</font>

191
00:08:51,890 --> 00:08:57,860
<font color="#E5E5E5">already be</font><font color="#CCCCCC"> working right so let's see</font>

192
00:08:55,400 --> 00:08:59,780
first what is I<font color="#E5E5E5"> mean what are the two</font>

193
00:08:57,860 --> 00:09:01,520
different<font color="#CCCCCC"> kinds of portability</font><font color="#E5E5E5"> in the</font>

194
00:08:59,780 --> 00:09:04,069
beam context<font color="#E5E5E5"> so we have the engine</font>

195
00:09:01,520 --> 00:09:06,590
portability<font color="#E5E5E5"> which is like the ability</font><font color="#CCCCCC"> to</font>

196
00:09:04,070 --> 00:09:09,080
run it<font color="#E5E5E5"> on different execution engines</font>

197
00:09:06,590 --> 00:09:11,810
and we have the language portability

198
00:09:09,080 --> 00:09:17,210
which is like using<font color="#E5E5E5"> different SDKs for</font>

199
00:09:11,810 --> 00:09:18,560
<font color="#E5E5E5">composing the pipeline and if we look</font>

200
00:09:17,210 --> 00:09:20,810
back at<font color="#CCCCCC"> the vision which I showed</font><font color="#E5E5E5"> you at</font>

201
00:09:18,560 --> 00:09:25,479
the beginning<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is really I</font><font color="#E5E5E5"> mean how</font>

202
00:09:20,810 --> 00:09:29,000
it should<font color="#CCCCCC"> work right and in terms of</font>

203
00:09:25,480 --> 00:09:32,660
engine portability<font color="#CCCCCC"> it is actually true</font>

204
00:09:29,000 --> 00:09:34,700
<font color="#E5E5E5">like we</font><font color="#CCCCCC"> own the Java</font><font color="#E5E5E5"> API we</font><font color="#CCCCCC"> we just</font><font color="#E5E5E5"> you</font>

205
00:09:32,660 --> 00:09:36,770
know<font color="#E5E5E5"> these options which we pass to the</font>

206
00:09:34,700 --> 00:09:39,650
pipeline<font color="#CCCCCC"> we just said run off link</font>

207
00:09:36,770 --> 00:09:42,230
<font color="#E5E5E5">runner and then we do run and it really</font>

208
00:09:39,650 --> 00:09:43,910
runs on flink that's pretty amazing so

209
00:09:42,230 --> 00:09:48,410
we have that part covered already<font color="#E5E5E5"> and</font>

210
00:09:43,910 --> 00:09:51,250
now what about language portability<font color="#CCCCCC"> why</font>

211
00:09:48,410 --> 00:09:54,699
would we<font color="#E5E5E5"> use other languages well kind</font>

212
00:09:51,250 --> 00:09:57,279
I mean clear I guess<font color="#E5E5E5"> syntax expression</font>

213
00:09:54,699 --> 00:09:59,109
of communities<font color="#E5E5E5"> is a big point because</font>

214
00:09:57,279 --> 00:10:01,000
there are a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people simply</font><font color="#CCCCCC"> don't</font>

215
00:09:59,110 --> 00:10:02,649
like Java for various reasons which<font color="#E5E5E5"> I</font>

216
00:10:01,000 --> 00:10:05,110
can understand I mean<font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> really like to</font>

217
00:10:02,649 --> 00:10:07,660
<font color="#E5E5E5">have a but it's</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> but we also have a</font>

218
00:10:05,110 --> 00:10:09,370
lot of<font color="#CCCCCC"> libraries</font><font color="#E5E5E5"> which is like an</font>

219
00:10:07,660 --> 00:10:11,199
important factor like<font color="#CCCCCC"> tensorflow are</font>

220
00:10:09,370 --> 00:10:15,220
really like huge libraries which<font color="#CCCCCC"> are</font>

221
00:10:11,199 --> 00:10:18,969
simply not available<font color="#CCCCCC"> in in in Java so</font>

222
00:10:15,220 --> 00:10:22,389
that's a<font color="#E5E5E5"> good</font><font color="#CCCCCC"> reason to use Python</font><font color="#E5E5E5"> so I</font>

223
00:10:18,970 --> 00:10:24,519
was<font color="#E5E5E5"> actually lying a bit to you</font><font color="#CCCCCC"> this</font>

224
00:10:22,389 --> 00:10:26,769
<font color="#E5E5E5">whole this whole portability</font>

225
00:10:24,519 --> 00:10:29,439
<font color="#CCCCCC">language-wise doesn't really or didn't</font>

226
00:10:26,769 --> 00:10:32,470
really work<font color="#CCCCCC"> so it used to be the case</font>

227
00:10:29,439 --> 00:10:35,889
<font color="#CCCCCC">that we just</font><font color="#E5E5E5"> I mean basically</font><font color="#CCCCCC"> only we're</font>

228
00:10:32,470 --> 00:10:38,620
supporting Java and Scala<font color="#CCCCCC"> in in the open</font>

229
00:10:35,889 --> 00:10:40,389
source world<font color="#E5E5E5"> and we had like when you</font>

230
00:10:38,620 --> 00:10:44,560
use like the<font color="#E5E5E5"> Google cloud you could run</font>

231
00:10:40,389 --> 00:10:48,189
Python<font color="#E5E5E5"> which is like not so cool right</font><font color="#CCCCCC"> I</font>

232
00:10:44,560 --> 00:10:50,888
mean it kind of breaks<font color="#E5E5E5"> the promise</font><font color="#CCCCCC"> so</font>

233
00:10:48,189 --> 00:10:53,800
what we<font color="#E5E5E5"> what we need is and what we</font>

234
00:10:50,889 --> 00:10:57,490
worked on in the past like almost<font color="#E5E5E5"> two</font>

235
00:10:53,800 --> 00:11:00,579
years<font color="#E5E5E5"> is to build a language portability</font>

236
00:10:57,490 --> 00:11:04,120
framework into beam and<font color="#E5E5E5"> it's runners so</font>

237
00:11:00,579 --> 00:11:11,079
that we<font color="#E5E5E5"> actually can do</font><font color="#CCCCCC"> the full realize</font>

238
00:11:04,120 --> 00:11:15,100
<font color="#E5E5E5">the full vision so how do we achieve how</font>

239
00:11:11,079 --> 00:11:18,729
do we achieve it if we look at sort<font color="#E5E5E5"> of</font>

240
00:11:15,100 --> 00:11:21,670
the<font color="#E5E5E5"> very abstract translation process of</font>

241
00:11:18,730 --> 00:11:24,759
a<font color="#E5E5E5"> pipeline it used to be like</font><font color="#CCCCCC"> this where</font>

242
00:11:21,670 --> 00:11:28,899
we had Java<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of runners</font>

243
00:11:24,759 --> 00:11:31,000
and they all executed in Java<font color="#E5E5E5"> so they</font>

244
00:11:28,899 --> 00:11:33,279
need<font color="#E5E5E5"> to implement their own translation</font>

245
00:11:31,000 --> 00:11:36,879
way but once they translated it<font color="#E5E5E5"> was fine</font>

246
00:11:33,279 --> 00:11:42,069
now that we have<font color="#CCCCCC"> language portability it</font>

247
00:11:36,879 --> 00:11:44,769
seems like well maybe<font color="#E5E5E5"> not very good idea</font>

248
00:11:42,069 --> 00:11:48,128
but it's presently possible to just you

249
00:11:44,769 --> 00:11:51,309
know<font color="#CCCCCC"> let every SDK</font><font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out a way</font><font color="#E5E5E5"> to</font>

250
00:11:48,129 --> 00:11:52,809
<font color="#E5E5E5">translate to every execution engine then</font>

251
00:11:51,309 --> 00:11:54,939
the execution<font color="#E5E5E5"> engine has like various</font>

252
00:11:52,809 --> 00:11:57,730
their own various ways of supporting

253
00:11:54,939 --> 00:11:59,829
<font color="#E5E5E5">that language but</font><font color="#CCCCCC"> just that just</font><font color="#E5E5E5"> seems</font>

254
00:11:57,730 --> 00:12:02,709
<font color="#E5E5E5">like a terrible</font><font color="#CCCCCC"> idea very</font><font color="#E5E5E5"> complicated</font>

255
00:11:59,829 --> 00:12:04,290
and replicating a lot of work<font color="#E5E5E5"> so what</font>

256
00:12:02,709 --> 00:12:07,829
what we did is

257
00:12:04,290 --> 00:12:11,910
we introduced the the runner<font color="#E5E5E5"> API which</font>

258
00:12:07,829 --> 00:12:13,888
takes the pipeline from<font color="#E5E5E5"> the SDK</font><font color="#CCCCCC"> and sort</font>

259
00:12:11,910 --> 00:12:16,709
of transforms it into a language

260
00:12:13,889 --> 00:12:19,439
<font color="#E5E5E5">agnostic format</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> call it a runner</font>

261
00:12:16,709 --> 00:12:20,518
<font color="#E5E5E5">API so it's it's based on protobuf</font><font color="#CCCCCC"> I</font>

262
00:12:19,439 --> 00:12:23,549
mean<font color="#E5E5E5"> doesn't really matter it's just</font>

263
00:12:20,519 --> 00:12:27,389
<font color="#CCCCCC">like a format that</font><font color="#E5E5E5"> is consistent</font><font color="#CCCCCC"> across</font>

264
00:12:23,549 --> 00:12:30,119
languages so and then what we<font color="#CCCCCC"> also need</font>

265
00:12:27,389 --> 00:12:32,429
it is during execution we have like this

266
00:12:30,119 --> 00:12:34,079
language<font color="#E5E5E5"> dependent parts like when the</font>

267
00:12:32,429 --> 00:12:35,579
execution engines<font color="#E5E5E5"> or most of them are</font>

268
00:12:34,079 --> 00:12:37,709
actually<font color="#E5E5E5"> all of them are written in Java</font>

269
00:12:35,579 --> 00:12:41,669
so when you have<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> you need to</font>

270
00:12:37,709 --> 00:12:44,699
figure<font color="#E5E5E5"> out</font><font color="#CCCCCC"> a way to send data to</font><font color="#E5E5E5"> to that</font>

271
00:12:41,669 --> 00:12:48,949
Python<font color="#E5E5E5"> process and access state and on</font>

272
00:12:44,699 --> 00:12:53,449
all that<font color="#E5E5E5"> and this is called the Sun API</font>

273
00:12:48,949 --> 00:12:56,389
FN API yeah and that way we pretty much

274
00:12:53,449 --> 00:12:59,728
only<font color="#E5E5E5"> have these two extra layers and</font>

275
00:12:56,389 --> 00:13:01,859
just<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to make sure the runners are</font>

276
00:12:59,729 --> 00:13:02,100
compatible<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that and then we're good</font>

277
00:13:01,859 --> 00:13:06,959
<font color="#E5E5E5">to go</font>

278
00:13:02,100 --> 00:13:09,929
so let me<font color="#E5E5E5"> simplify this a lot so we have</font>

279
00:13:06,959 --> 00:13:12,479
the if the old way<font color="#E5E5E5"> was like we have the</font>

280
00:13:09,929 --> 00:13:14,699
SDK and<font color="#CCCCCC"> the Runner</font><font color="#E5E5E5"> and we have for</font>

281
00:13:12,480 --> 00:13:16,319
example<font color="#CCCCCC"> a execution engine like linked</font>

282
00:13:14,699 --> 00:13:18,269
with a bunch of<font color="#E5E5E5"> tasks and</font><font color="#CCCCCC"> they all these</font>

283
00:13:16,319 --> 00:13:21,959
were in Java<font color="#E5E5E5"> so and that worked pretty</font>

284
00:13:18,269 --> 00:13:25,529
<font color="#E5E5E5">well</font><font color="#CCCCCC"> the new way is a bit different so</font>

285
00:13:21,959 --> 00:13:28,108
in the new way<font color="#E5E5E5"> we have the SDK here</font>

286
00:13:25,529 --> 00:13:31,739
which uses to run our API to produce

287
00:13:28,109 --> 00:13:36,689
this<font color="#E5E5E5"> Universal pipeline format and then</font>

288
00:13:31,739 --> 00:13:41,309
we actually have<font color="#CCCCCC"> the job</font><font color="#E5E5E5"> API which is a</font>

289
00:13:36,689 --> 00:13:43,349
way<font color="#CCCCCC"> to send this pipeline</font><font color="#E5E5E5"> to the job</font>

290
00:13:41,309 --> 00:13:45,389
server<font color="#E5E5E5"> and the job server is really a</font>

291
00:13:43,350 --> 00:13:47,730
beam concept now it used to be that

292
00:13:45,389 --> 00:13:49,139
every runner had you know every

293
00:13:47,730 --> 00:13:51,329
execution<font color="#E5E5E5"> and had its own way</font><font color="#CCCCCC"> of</font>

294
00:13:49,139 --> 00:13:54,119
submitting applications and but we

295
00:13:51,329 --> 00:13:55,888
wanted<font color="#E5E5E5"> to you</font><font color="#CCCCCC"> know really get everything</font>

296
00:13:54,119 --> 00:13:58,350
<font color="#E5E5E5">portable so we created the job server</font>

297
00:13:55,889 --> 00:14:02,279
and in the job server the<font color="#E5E5E5"> runner</font>

298
00:13:58,350 --> 00:14:06,539
translates this runner<font color="#CCCCCC"> API</font><font color="#E5E5E5"> pipeline and</font>

299
00:14:02,279 --> 00:14:10,999
then it executed on the<font color="#CCCCCC"> engine of</font><font color="#E5E5E5"> your</font>

300
00:14:06,539 --> 00:14:13,649
<font color="#CCCCCC">choice but of course we have these like</font>

301
00:14:10,999 --> 00:14:15,089
<font color="#E5E5E5">Python blobs or go blobs in between</font>

302
00:14:13,649 --> 00:14:17,370
which we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> really understand and</font>

303
00:14:15,089 --> 00:14:19,980
whenever we have that we

304
00:14:17,370 --> 00:14:22,590
we have a special<font color="#E5E5E5"> well</font><font color="#CCCCCC"> tasked I called</font>

305
00:14:19,980 --> 00:14:25,020
executable stage<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a fancy name</font>

306
00:14:22,590 --> 00:14:26,760
<font color="#CCCCCC">for we</font><font color="#E5E5E5"> don't know what to do with this</font>

307
00:14:25,020 --> 00:14:30,090
so we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to send it</font><font color="#CCCCCC"> to an external</font>

308
00:14:26,760 --> 00:14:32,580
process<font color="#E5E5E5"> which is called the SDK harness</font>

309
00:14:30,090 --> 00:14:34,710
and<font color="#CCCCCC"> that harness exists for</font><font color="#E5E5E5"> every</font>

310
00:14:32,580 --> 00:14:40,860
language like for Java Python and go

311
00:14:34,710 --> 00:14:43,260
so<font color="#CCCCCC"> whenever</font><font color="#E5E5E5"> so whenever we I</font><font color="#CCCCCC"> mean so we</font>

312
00:14:40,860 --> 00:14:45,060
put the we create the harness when we

313
00:14:43,260 --> 00:14:47,490
start a job with the Python code for

314
00:14:45,060 --> 00:14:50,939
instance and then whenever<font color="#E5E5E5"> we receive</font>

315
00:14:47,490 --> 00:14:52,560
data in that task we we send that to<font color="#CCCCCC"> the</font>

316
00:14:50,940 --> 00:14:54,630
external process the external process

317
00:14:52,560 --> 00:14:58,589
does its processing<font color="#CCCCCC"> in sense</font><font color="#E5E5E5"> that back</font>

318
00:14:54,630 --> 00:15:00,030
<font color="#E5E5E5">you know it's very simplified and this</font>

319
00:14:58,590 --> 00:15:03,540
<font color="#E5E5E5">there are some challenges to</font><font color="#CCCCCC"> that</font>

320
00:15:00,030 --> 00:15:05,189
because there<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> a great cost but</font>

321
00:15:03,540 --> 00:15:06,930
<font color="#CCCCCC">there</font><font color="#E5E5E5"> are some costs when</font><font color="#CCCCCC"> you send data</font>

322
00:15:05,190 --> 00:15:08,870
to<font color="#E5E5E5"> an external process right because you</font>

323
00:15:06,930 --> 00:15:11,430
need to serialize the data and

324
00:15:08,870 --> 00:15:13,950
deserialize it again<font color="#CCCCCC"> so we build in some</font>

325
00:15:11,430 --> 00:15:16,800
optimization called<font color="#E5E5E5"> fusion which tries</font>

326
00:15:13,950 --> 00:15:20,460
to<font color="#E5E5E5"> combine as many of these Python</font>

327
00:15:16,800 --> 00:15:23,760
stages for instance<font color="#E5E5E5"> into one SDK harness</font>

328
00:15:20,460 --> 00:15:28,260
<font color="#E5E5E5">so we don't do any like</font><font color="#CCCCCC"> the duplicate</font>

329
00:15:23,760 --> 00:15:32,850
serialization work how does<font color="#E5E5E5"> the SDK</font>

330
00:15:28,260 --> 00:15:34,410
harness work so first of all<font color="#E5E5E5"> the SDK</font>

331
00:15:32,850 --> 00:15:38,250
<font color="#CCCCCC">owners needs to be</font><font color="#E5E5E5"> bootstrapped somehow</font>

332
00:15:34,410 --> 00:15:38,699
right<font color="#E5E5E5"> so what we typically do is we</font><font color="#CCCCCC"> use</font>

333
00:15:38,250 --> 00:15:41,190
<font color="#E5E5E5">docker</font>

334
00:15:38,700 --> 00:15:43,050
<font color="#E5E5E5">so we have an environment which contains</font>

335
00:15:41,190 --> 00:15:46,320
all<font color="#E5E5E5"> the dependencies</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> tensor</font><font color="#E5E5E5"> flow</font>

336
00:15:43,050 --> 00:15:48,120
<font color="#CCCCCC">or</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> lamp I and and just use this</font>

337
00:15:46,320 --> 00:15:50,010
docker image directly we<font color="#CCCCCC"> can specify</font>

338
00:15:48,120 --> 00:15:52,260
<font color="#E5E5E5">that in</font><font color="#CCCCCC"> the options</font><font color="#E5E5E5"> that's a really easy</font>

339
00:15:50,010 --> 00:15:54,960
<font color="#E5E5E5">way of deploying because you you have</font>

340
00:15:52,260 --> 00:15:56,430
image registry and<font color="#E5E5E5"> you just download</font>

341
00:15:54,960 --> 00:15:58,500
<font color="#CCCCCC">that image automatically</font><font color="#E5E5E5"> and start it</font>

342
00:15:56,430 --> 00:16:04,260
but some<font color="#CCCCCC"> people don't</font><font color="#E5E5E5"> want to use docker</font>

343
00:15:58,500 --> 00:16:06,090
<font color="#E5E5E5">because for various reasons and so you</font>

344
00:16:04,260 --> 00:16:07,439
can also start like a<font color="#E5E5E5"> process based</font>

345
00:16:06,090 --> 00:16:10,320
execution<font color="#E5E5E5"> but then you have to make sure</font>

346
00:16:07,440 --> 00:16:13,320
<font color="#E5E5E5">you set up the environment</font><font color="#CCCCCC"> thank you the</font>

347
00:16:10,320 --> 00:16:15,600
environment like manually and it's also

348
00:16:13,320 --> 00:16:22,080
possible<font color="#E5E5E5"> to run this embedded in case</font>

349
00:16:15,600 --> 00:16:24,210
your you are using Java and so there's I

350
00:16:22,080 --> 00:16:26,220
mean<font color="#E5E5E5"> there's a lot of happening</font><font color="#CCCCCC"> with of</font>

351
00:16:24,210 --> 00:16:28,470
communication between like the<font color="#CCCCCC"> backend</font>

352
00:16:26,220 --> 00:16:30,630
<font color="#E5E5E5">and the SDK harness like obviously</font><font color="#CCCCCC"> we</font>

353
00:16:28,470 --> 00:16:31,329
need to<font color="#E5E5E5"> control like we have like</font>

354
00:16:30,630 --> 00:16:33,129
control play

355
00:16:31,329 --> 00:16:36,609
<font color="#CCCCCC">a data plane we have a way</font><font color="#E5E5E5"> to access</font>

356
00:16:33,129 --> 00:16:38,319
<font color="#E5E5E5">State and report progress and also</font>

357
00:16:36,610 --> 00:16:40,239
logging I mean everything is locked so

358
00:16:38,319 --> 00:16:41,860
you you<font color="#CCCCCC"> know actually was</font><font color="#E5E5E5"> what is</font>

359
00:16:40,239 --> 00:16:43,540
happening<font color="#CCCCCC"> inside external process</font>

360
00:16:41,860 --> 00:16:48,670
because otherwise debugging it would be

361
00:16:43,540 --> 00:16:52,809
would be<font color="#E5E5E5"> really</font><font color="#CCCCCC"> hard so what is now</font>

362
00:16:48,670 --> 00:16:58,689
<font color="#E5E5E5">missing is and kind of a problem it is</font>

363
00:16:52,809 --> 00:17:00,549
<font color="#CCCCCC">not</font><font color="#E5E5E5"> only I mean a runner is is like SDK</font>

364
00:16:58,689 --> 00:17:04,209
is only complete<font color="#E5E5E5"> if you can read and</font>

365
00:17:00,549 --> 00:17:06,398
write<font color="#CCCCCC"> data</font><font color="#E5E5E5"> right because it's not really</font>

366
00:17:04,209 --> 00:17:08,769
worth anything<font color="#E5E5E5"> if we can support all the</font>

367
00:17:06,398 --> 00:17:13,089
primitive<font color="#E5E5E5"> transforms we also have to be</font>

368
00:17:08,769 --> 00:17:16,240
able<font color="#CCCCCC"> to actually have that</font><font color="#E5E5E5"> connectors</font>

369
00:17:13,089 --> 00:17:18,428
which we have in Java<font color="#E5E5E5"> in in any SDK</font>

370
00:17:16,240 --> 00:17:20,589
available<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can see there a lot of</font>

371
00:17:18,429 --> 00:17:22,299
<font color="#E5E5E5">them</font><font color="#CCCCCC"> available</font><font color="#E5E5E5"> now it would be</font><font color="#CCCCCC"> kind of a</font>

372
00:17:20,589 --> 00:17:25,599
lot of<font color="#E5E5E5"> work to replicate them and the</font>

373
00:17:22,299 --> 00:17:27,819
language support<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example when you</font>

374
00:17:25,599 --> 00:17:29,830
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a</font><font color="#CCCCCC"> Kafka connector in</font>

375
00:17:27,819 --> 00:17:32,649
<font color="#CCCCCC">Python the language support is not so</font>

376
00:17:29,830 --> 00:17:35,260
good in Java it's really good<font color="#E5E5E5"> so ideally</font>

377
00:17:32,649 --> 00:17:39,250
we would we<font color="#CCCCCC"> would just use the Java</font>

378
00:17:35,260 --> 00:17:43,179
connector in Python and not<font color="#CCCCCC"> you</font>

379
00:17:39,250 --> 00:17:44,950
recreated in in<font color="#E5E5E5"> Python and turns out we</font>

380
00:17:43,179 --> 00:17:48,100
can actually<font color="#E5E5E5"> do that and that's a pretty</font>

381
00:17:44,950 --> 00:17:49,659
<font color="#E5E5E5">amazing solution we can simply use</font><font color="#CCCCCC"> that</font>

382
00:17:48,100 --> 00:17:53,199
process<font color="#E5E5E5"> which I've described to run</font>

383
00:17:49,659 --> 00:17:53,529
cross language pipelines<font color="#CCCCCC"> so how does it</font>

384
00:17:53,200 --> 00:17:55,600
<font color="#CCCCCC">work</font>

385
00:17:53,529 --> 00:17:57,460
theoretically I mean we're finalizing

386
00:17:55,600 --> 00:17:59,260
like<font color="#E5E5E5"> the specification at the moment but</font>

387
00:17:57,460 --> 00:18:01,809
it's sort of<font color="#E5E5E5"> like this so you have a</font>

388
00:17:59,260 --> 00:18:04,419
Python job<font color="#E5E5E5"> and I mean probably it's not</font>

389
00:18:01,809 --> 00:18:06,370
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be named</font><font color="#E5E5E5"> IO expansion but it's</font>

390
00:18:04,419 --> 00:18:08,679
kind of<font color="#E5E5E5"> like it like a demure</font><font color="#CCCCCC"> object</font>

391
00:18:06,370 --> 00:18:11,260
where<font color="#CCCCCC"> you specify</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> IO like</font><font color="#E5E5E5"> cough</font>

392
00:18:08,679 --> 00:18:13,090
<font color="#CCCCCC">kayo</font><font color="#E5E5E5"> or maybe the full</font><font color="#CCCCCC"> Java name I mean</font>

393
00:18:11,260 --> 00:18:16,690
though it will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> made a bit simpler and</font>

394
00:18:13,090 --> 00:18:18,519
<font color="#CCCCCC">you pass some configuration</font><font color="#E5E5E5"> and then of</font>

395
00:18:16,690 --> 00:18:21,220
course<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> Python doesn't understand</font>

396
00:18:18,519 --> 00:18:23,440
this but when<font color="#E5E5E5"> we do the translation to</font>

397
00:18:21,220 --> 00:18:25,389
<font color="#CCCCCC">the runner API we actually have like an</font>

398
00:18:23,440 --> 00:18:28,299
expansion<font color="#E5E5E5"> service a Java expansion</font>

399
00:18:25,389 --> 00:18:31,570
service<font color="#E5E5E5"> running if we want</font><font color="#CCCCCC"> to in</font><font color="#E5E5E5"> the</font>

400
00:18:28,299 --> 00:18:34,690
<font color="#E5E5E5">case of Java and we so we take that stop</font>

401
00:18:31,570 --> 00:18:40,379
this<font color="#E5E5E5"> placeholder and expand it into like</font>

402
00:18:34,690 --> 00:18:44,320
like<font color="#E5E5E5"> a native Java Kafka transform so</font>

403
00:18:40,380 --> 00:18:45,100
and then when then we do the rest<font color="#E5E5E5"> of the</font>

404
00:18:44,320 --> 00:18:47,860
translation

405
00:18:45,100 --> 00:18:50,020
and during the when the job runs we

406
00:18:47,860 --> 00:18:52,418
actually have now two different<font color="#E5E5E5"> kinds of</font>

407
00:18:50,020 --> 00:18:55,650
<font color="#CCCCCC">SDK harness running so we have a</font><font color="#E5E5E5"> Java</font>

408
00:18:52,419 --> 00:18:58,059
one for our<font color="#E5E5E5"> Kafka sauce and then we have</font>

409
00:18:55,650 --> 00:18:59,679
maybe some<font color="#CCCCCC"> Python data</font><font color="#E5E5E5"> processing</font>

410
00:18:58,059 --> 00:19:01,840
afterwards we<font color="#E5E5E5"> will do some map and count</font>

411
00:18:59,679 --> 00:19:04,270
<font color="#E5E5E5">and we of</font><font color="#CCCCCC"> course also have the native</font>

412
00:19:01,840 --> 00:19:06,309
trends like<font color="#E5E5E5"> native</font><font color="#CCCCCC"> link</font><font color="#E5E5E5"> or whatever</font>

413
00:19:04,270 --> 00:19:08,410
you're using<font color="#E5E5E5"> execution engine transform</font>

414
00:19:06,309 --> 00:19:11,230
like a group by key which which just

415
00:19:08,410 --> 00:19:13,030
doesn't<font color="#E5E5E5"> need an SDK harness or</font><font color="#CCCCCC"> anything</font>

416
00:19:11,230 --> 00:19:19,570
<font color="#E5E5E5">because it's supported by the execution</font>

417
00:19:13,030 --> 00:19:21,220
engine yeah<font color="#E5E5E5"> so this is sort of how</font>

418
00:19:19,570 --> 00:19:22,928
portability works<font color="#CCCCCC"> there are a lot of</font>

419
00:19:21,220 --> 00:19:28,659
<font color="#E5E5E5">details of course but it's a twenty</font>

420
00:19:22,929 --> 00:19:32,909
minutes talk so how how far<font color="#E5E5E5"> are we so we</font>

421
00:19:28,659 --> 00:19:36,850
have the engine portability and we have

422
00:19:32,909 --> 00:19:39,490
the language portability<font color="#E5E5E5"> almost I</font><font color="#CCCCCC"> would</font>

423
00:19:36,850 --> 00:19:41,289
<font color="#CCCCCC">say I mean</font><font color="#E5E5E5"> for developers</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> try it</font>

424
00:19:39,490 --> 00:19:44,110
out<font color="#CCCCCC"> yourself</font><font color="#E5E5E5"> I have a link</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> in</font>

425
00:19:41,289 --> 00:19:46,570
<font color="#E5E5E5">the end you can try it out it works we</font>

426
00:19:44,110 --> 00:19:48,760
just<font color="#CCCCCC"> have to make it a bit better</font><font color="#E5E5E5"> you</font>

427
00:19:46,570 --> 00:19:50,559
know<font color="#E5E5E5"> there are some some like we have to</font>

428
00:19:48,760 --> 00:19:52,600
tune a bit<font color="#E5E5E5"> of performance although we</font>

429
00:19:50,559 --> 00:19:56,020
have estimated<font color="#CCCCCC"> five to ten percent only</font>

430
00:19:52,600 --> 00:19:57,370
overhead in most cases and then<font color="#E5E5E5"> cross</font>

431
00:19:56,020 --> 00:19:59,320
<font color="#E5E5E5">language</font><font color="#CCCCCC"> pipeline support needs a bit</font>

432
00:19:57,370 --> 00:20:01,449
more<font color="#E5E5E5"> and specification but that's</font><font color="#CCCCCC"> going</font>

433
00:19:59,320 --> 00:20:02,950
<font color="#CCCCCC">to</font><font color="#E5E5E5"> happen in next week's there's also</font>

434
00:20:01,450 --> 00:20:05,919
this fancy thing<font color="#E5E5E5"> called</font><font color="#CCCCCC"> bootable</font><font color="#E5E5E5"> do</font>

435
00:20:02,950 --> 00:20:08,020
<font color="#CCCCCC">event which you can read up but that's</font>

436
00:20:05,919 --> 00:20:12,820
not so important<font color="#CCCCCC"> there's a compatibility</font>

437
00:20:08,020 --> 00:20:15,010
<font color="#E5E5E5">matrix which tracks like the status for</font>

438
00:20:12,820 --> 00:20:17,200
portability of<font color="#E5E5E5"> all runners there's a</font>

439
00:20:15,010 --> 00:20:19,360
link<font color="#E5E5E5"> here and sling actually it's like</font>

440
00:20:17,200 --> 00:20:21,640
the best<font color="#E5E5E5"> runner I would say because it</font>

441
00:20:19,360 --> 00:20:24,240
it supports<font color="#E5E5E5"> most features at the moment</font>

442
00:20:21,640 --> 00:20:27,780
<font color="#E5E5E5">and the others are going to catch up and</font>

443
00:20:24,240 --> 00:20:31,179
that brings<font color="#E5E5E5"> me</font><font color="#CCCCCC"> to the end</font><font color="#E5E5E5"> of my talk</font>

444
00:20:27,780 --> 00:20:33,340
<font color="#E5E5E5">please check out the portability</font><font color="#CCCCCC"> website</font>

445
00:20:31,179 --> 00:20:35,200
or<font color="#E5E5E5"> just go to the normal</font><font color="#CCCCCC"> beam website if</font>

446
00:20:33,340 --> 00:20:37,629
you want<font color="#E5E5E5"> to learn more about beam we</font>

447
00:20:35,200 --> 00:20:39,880
have mailing lists<font color="#E5E5E5"> and an awesome select</font>

448
00:20:37,630 --> 00:20:42,659
channel which<font color="#CCCCCC"> is where were there a lot</font>

449
00:20:39,880 --> 00:20:43,990
of<font color="#CCCCCC"> help for</font><font color="#E5E5E5"> people yeah and that's it</font>

450
00:20:42,659 --> 00:20:51,839
thank<font color="#E5E5E5"> you</font>

451
00:20:43,990 --> 00:20:51,839
[Applause]

452
00:21:12,010 --> 00:21:19,810
<font color="#E5E5E5">to compile</font><font color="#CCCCCC"> to what</font><font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> common bytecode</font>

453
00:21:16,590 --> 00:21:23,169
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> so the question is why not use</font>

454
00:21:19,810 --> 00:21:25,840
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> Apache tinker tinker pop</font>

455
00:21:23,170 --> 00:21:27,510
which uses like an intermediate common

456
00:21:25,840 --> 00:21:30,129
intermediate<font color="#E5E5E5"> format between</font><font color="#CCCCCC"> the</font>

457
00:21:27,510 --> 00:21:31,950
languages<font color="#E5E5E5"> and then or which is like</font>

458
00:21:30,130 --> 00:21:35,140
<font color="#E5E5E5">bytecode which</font><font color="#CCCCCC"> can then be executed</font>

459
00:21:31,950 --> 00:21:37,420
there are a lot of other frameworks<font color="#E5E5E5"> with</font>

460
00:21:35,140 --> 00:21:40,090
do that for example<font color="#CCCCCC"> flink as a Python</font>

461
00:21:37,420 --> 00:21:41,710
<font color="#CCCCCC">API which uses item</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> sort of</font>

462
00:21:40,090 --> 00:21:43,870
<font color="#E5E5E5">like the same idea</font><font color="#CCCCCC"> you can generate</font>

463
00:21:41,710 --> 00:21:46,810
bytecode from Python<font color="#E5E5E5"> we want to be able</font>

464
00:21:43,870 --> 00:21:48,489
<font color="#E5E5E5">to support all kinds</font><font color="#CCCCCC"> of libraries</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> x</font>

465
00:21:46,810 --> 00:21:50,590
<font color="#E5E5E5">the flow which is like a native</font><font color="#CCCCCC"> c</font>

466
00:21:48,490 --> 00:21:53,470
library and that you can only achieve if

467
00:21:50,590 --> 00:21:56,230
<font color="#CCCCCC">you run like a c python interpreter and</font>

468
00:21:53,470 --> 00:21:58,440
not like some custom version<font color="#E5E5E5"> of python</font>

469
00:21:56,230 --> 00:22:01,830
which only<font color="#E5E5E5"> supports a subset</font><font color="#CCCCCC"> of python</font>

470
00:21:58,440 --> 00:22:01,830
that's a reason

471
00:22:20,970 --> 00:22:28,950
I have em so yeah I repeat the question

472
00:22:26,400 --> 00:22:32,610
<font color="#CCCCCC">so how is the debugging experience like</font>

473
00:22:28,950 --> 00:22:34,800
in these<font color="#E5E5E5"> Python libraries when when you</font>

474
00:22:32,610 --> 00:22:36,990
run into<font color="#CCCCCC"> an error in python like how</font>

475
00:22:34,800 --> 00:22:39,800
fast<font color="#E5E5E5"> you see it and when you execute on</font>

476
00:22:36,990 --> 00:22:42,210
a on a well essentially<font color="#CCCCCC"> java</font><font color="#E5E5E5"> runtime</font>

477
00:22:39,800 --> 00:22:44,790
<font color="#CCCCCC">it's actually</font><font color="#E5E5E5"> pretty good and it's been</font>

478
00:22:42,210 --> 00:22:46,590
part<font color="#CCCCCC"> of the design so when in</font><font color="#E5E5E5"> python you</font>

479
00:22:44,790 --> 00:22:50,580
see an exception<font color="#E5E5E5"> it will be like</font>

480
00:22:46,590 --> 00:22:53,310
forwarded directly to to the to the<font color="#CCCCCC"> op</font>

481
00:22:50,580 --> 00:22:56,399
<font color="#E5E5E5">like java operator and it will catch an</font>

482
00:22:53,310 --> 00:22:58,320
arrow there<font color="#E5E5E5"> and so and use you do to the</font>

483
00:22:56,400 --> 00:23:01,080
logging and stuff like that<font color="#E5E5E5"> you actually</font>

484
00:22:58,320 --> 00:23:02,520
<font color="#E5E5E5">see immediately what</font><font color="#CCCCCC"> cat and the</font><font color="#E5E5E5"> errors</font>

485
00:23:01,080 --> 00:23:04,320
also<font color="#E5E5E5"> sent back it's like</font><font color="#CCCCCC"> so you see the</font>

486
00:23:02,520 --> 00:23:06,810
error message<font color="#E5E5E5"> immediately there and your</font>

487
00:23:04,320 --> 00:23:11,929
pipeline will fail<font color="#E5E5E5"> because if the runner</font>

488
00:23:06,810 --> 00:23:11,929
receives a failure<font color="#E5E5E5"> it should fail yeah</font>

489
00:23:15,980 --> 00:23:22,770
<font color="#CCCCCC">good question</font>

490
00:23:17,850 --> 00:23:25,980
I'm not<font color="#E5E5E5"> working on yeah so the Python 3</font>

491
00:23:22,770 --> 00:23:30,930
is it supported or<font color="#CCCCCC"> not it is</font><font color="#E5E5E5"> supported</font>

492
00:23:25,980 --> 00:23:33,330
but it is like<font color="#E5E5E5"> 99% done so it is there</font>

493
00:23:30,930 --> 00:23:35,220
<font color="#E5E5E5">you can use it there are test cases and</font>

494
00:23:33,330 --> 00:23:38,399
everything it's<font color="#CCCCCC"> just not you know</font>

495
00:23:35,220 --> 00:23:41,880
officially<font color="#CCCCCC"> been released because I'm not</font>

496
00:23:38,400 --> 00:23:44,700
<font color="#E5E5E5">working</font><font color="#CCCCCC"> on the Python site myself</font><font color="#E5E5E5"> so I'm</font>

497
00:23:41,880 --> 00:23:46,020
expected to be done<font color="#CCCCCC"> actually in the 211</font>

498
00:23:44,700 --> 00:23:51,170
release which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> bean release</font>

499
00:23:46,020 --> 00:23:51,170
should<font color="#E5E5E5"> be out next month yeah</font>

500
00:23:51,320 --> 00:23:54,429
[Music]

501
00:23:59,380 --> 00:24:06,229
thank you

502
00:24:02,460 --> 00:24:06,229
[Applause]

503
00:24:12,429 --> 00:24:14,490
you

504
00:24:20,559 --> 00:24:22,620
you

505
00:25:01,430 --> 00:25:03,490
<font color="#E5E5E5">you</font>

506
00:25:08,740 --> 00:25:10,800
you

