1
00:00:05,109 --> 00:00:12,020
karma points for you<font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> then I</font>

2
00:00:09,200 --> 00:00:16,369
guess that we can start<font color="#E5E5E5"> your 49</font>

3
00:00:12,020 --> 00:00:17,330
<font color="#CCCCCC">typically yeah I guess yeah yeah yeah</font>

4
00:00:16,369 --> 00:00:20,210
sure

5
00:00:17,330 --> 00:00:21,889
so<font color="#E5E5E5"> steel congratulation</font><font color="#CCCCCC"> for being here</font>

6
00:00:20,210 --> 00:00:23,300
on<font color="#E5E5E5"> Sunday morning still doing well</font>

7
00:00:21,890 --> 00:00:25,310
<font color="#CCCCCC">perfect</font>

8
00:00:23,300 --> 00:00:28,310
<font color="#E5E5E5">we're gonna go for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> foretold</font><font color="#CCCCCC"> so we</font>

9
00:00:25,310 --> 00:00:30,019
have here<font color="#E5E5E5"> and Rio and jelly</font><font color="#CCCCCC"> and they're</font>

10
00:00:28,310 --> 00:00:31,310
gonna talk us about<font color="#E5E5E5"> like software</font>

11
00:00:30,019 --> 00:00:34,910
engineering practices in<font color="#E5E5E5"> brass</font>

12
00:00:31,310 --> 00:00:37,180
specifically so applause for them and

13
00:00:34,910 --> 00:00:37,180
let's go

14
00:00:41,080 --> 00:00:47,720
hi<font color="#CCCCCC"> I'm Harbor or Anna and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> my</font>

15
00:00:45,590 --> 00:00:50,030
<font color="#CCCCCC">friend Jay</font><font color="#E5E5E5"> or busy Jay as you can</font>

16
00:00:47,720 --> 00:00:51,650
imagine he's very<font color="#E5E5E5"> busy I'm gonna talk</font>

17
00:00:50,030 --> 00:00:53,630
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first half he's gonna talk the</font>

18
00:00:51,650 --> 00:00:55,610
second half<font color="#E5E5E5"> we work at a company called</font>

19
00:00:53,630 --> 00:00:59,270
pink app which makes<font color="#E5E5E5"> distributed</font>

20
00:00:55,610 --> 00:01:01,640
databases we maintain<font color="#CCCCCC"> high</font><font color="#E5E5E5"> K V which</font><font color="#CCCCCC"> is</font>

21
00:00:59,270 --> 00:01:04,190
a<font color="#E5E5E5"> CNC</font><font color="#CCCCCC"> F project it's a</font><font color="#E5E5E5"> distributed</font>

22
00:01:01,640 --> 00:01:06,680
transactional key value store those are

23
00:01:04,190 --> 00:01:10,100
some big words<font color="#E5E5E5"> doesn't matter we operate</font>

24
00:01:06,680 --> 00:01:12,830
at a really big scale<font color="#CCCCCC"> we were one of</font><font color="#E5E5E5"> the</font>

25
00:01:10,100 --> 00:01:14,360
<font color="#E5E5E5">first major</font><font color="#CCCCCC"> Rus projects in production</font>

26
00:01:12,830 --> 00:01:17,960
and we've been in production for<font color="#E5E5E5"> over</font>

27
00:01:14,360 --> 00:01:21,229
<font color="#E5E5E5">three years</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> responsible for 15</font>

28
00:01:17,960 --> 00:01:23,899
petabytes of data at over 300<font color="#CCCCCC"> customers</font>

29
00:01:21,229 --> 00:01:26,179
worldwide<font color="#CCCCCC"> as you can imagine we do a lot</font>

30
00:01:23,899 --> 00:01:28,940
of<font color="#CCCCCC"> engineering some of our</font><font color="#E5E5E5"> customers are</font>

31
00:01:26,180 --> 00:01:31,100
<font color="#CCCCCC">the largest</font><font color="#E5E5E5"> companies in China we're</font>

32
00:01:28,940 --> 00:01:34,330
used in commerce<font color="#E5E5E5"> we're some of our</font>

33
00:01:31,100 --> 00:01:37,100
customers have<font color="#E5E5E5"> over 290 million users in</font>

34
00:01:34,330 --> 00:01:39,850
banks where<font color="#CCCCCC"> we offer really good SaaS</font>

35
00:01:37,100 --> 00:01:42,380
with no data<font color="#E5E5E5"> loss and on</font><font color="#CCCCCC"> ride-sharing</font>

36
00:01:39,850 --> 00:01:46,130
<font color="#E5E5E5">platforms that are consuming over 30</font>

37
00:01:42,380 --> 00:01:47,960
terabytes of data every day<font color="#CCCCCC"> this is a</font>

38
00:01:46,130 --> 00:01:50,960
very high-performance

39
00:01:47,960 --> 00:01:55,369
<font color="#CCCCCC">safety-critical</font><font color="#E5E5E5"> system and we really</font>

40
00:01:50,960 --> 00:01:57,949
like<font color="#E5E5E5"> Russ here it's perfect</font><font color="#CCCCCC"> so how do we</font>

41
00:01:55,369 --> 00:02:00,770
<font color="#E5E5E5">go from beginning with rust</font><font color="#CCCCCC"> to actually</font>

42
00:01:57,950 --> 00:02:02,270
doing<font color="#E5E5E5"> some proper engineering now you</font>

43
00:02:00,770 --> 00:02:03,530
might have been at the<font color="#E5E5E5"> point where</font>

44
00:02:02,270 --> 00:02:05,149
you've read the<font color="#CCCCCC"> Russ book you've</font>

45
00:02:03,530 --> 00:02:07,760
published your<font color="#E5E5E5"> first grade you're pretty</font>

46
00:02:05,150 --> 00:02:10,700
happy<font color="#E5E5E5"> but now you get the big questions</font>

47
00:02:07,760 --> 00:02:13,250
<font color="#E5E5E5">how do I share my work how do i migrate</font>

48
00:02:10,699 --> 00:02:15,290
to Russ 2018 how do<font color="#CCCCCC"> I do all of these</font>

49
00:02:13,250 --> 00:02:17,780
other<font color="#CCCCCC"> things I don't really want to do</font>

50
00:02:15,290 --> 00:02:20,620
because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just want to hack and you're</font>

51
00:02:17,780 --> 00:02:22,760
<font color="#E5E5E5">probably going like this guy over</font><font color="#CCCCCC"> here</font>

52
00:02:20,620 --> 00:02:24,920
<font color="#E5E5E5">so we're gonna go</font><font color="#CCCCCC"> on a bit of</font><font color="#E5E5E5"> a</font>

53
00:02:22,760 --> 00:02:27,350
whirlwind tour I'm not gonna deep dive

54
00:02:24,920 --> 00:02:31,179
on<font color="#CCCCCC"> anything if you want we can talk</font>

55
00:02:27,350 --> 00:02:31,180
about<font color="#E5E5E5"> it after outside</font>

56
00:02:31,799 --> 00:02:36,939
so first connecting and sharing<font color="#CCCCCC"> your</font>

57
00:02:34,719 --> 00:02:38,590
<font color="#E5E5E5">work I've had the pleasure</font><font color="#CCCCCC"> of helping</font>

58
00:02:36,939 --> 00:02:41,620
<font color="#E5E5E5">organize quite a few of these</font>

59
00:02:38,590 --> 00:02:44,109
conferences<font color="#CCCCCC"> and</font><font color="#E5E5E5"> events</font><font color="#CCCCCC"> or being at them</font>

60
00:02:41,620 --> 00:02:46,569
<font color="#CCCCCC">the Rusk community has over</font><font color="#E5E5E5"> 90 meetups</font>

61
00:02:44,109 --> 00:02:49,209
worldwide and<font color="#E5E5E5"> over six well six</font>

62
00:02:46,569 --> 00:02:52,480
conferences<font color="#CCCCCC"> as you can see there's some</font>

63
00:02:49,209 --> 00:02:54,090
in Europe<font color="#CCCCCC"> Russia and Asia and a couple</font>

64
00:02:52,480 --> 00:02:56,349
<font color="#E5E5E5">in the US but they don't really matter</font>

65
00:02:54,090 --> 00:02:59,409
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> generally an event</font><font color="#CCCCCC"> every few</font>

66
00:02:56,349 --> 00:03:01,659
days<font color="#CCCCCC"> so most of them are really</font>

67
00:02:59,409 --> 00:03:03,489
<font color="#CCCCCC">welcoming to newcomers especially if you</font>

68
00:03:01,659 --> 00:03:04,298
have a<font color="#E5E5E5"> project or</font><font color="#CCCCCC"> something interesting</font>

69
00:03:03,489 --> 00:03:07,510
to talk about

70
00:03:04,299 --> 00:03:12,310
so please do we want more people<font color="#CCCCCC"> in more</font>

71
00:03:07,510 --> 00:03:15,010
speaker slots<font color="#E5E5E5"> okay next one how do you</font>

72
00:03:12,310 --> 00:03:16,599
get the<font color="#CCCCCC"> RUS 2018 from Rus 2015</font><font color="#E5E5E5"> because</font>

73
00:03:15,010 --> 00:03:18,879
you<font color="#E5E5E5"> probably didn't start your project</font>

74
00:03:16,599 --> 00:03:21,189
<font color="#E5E5E5">in the last month it's really easy</font>

75
00:03:18,879 --> 00:03:24,000
<font color="#E5E5E5">because it</font><font color="#CCCCCC"> operates on</font><font color="#E5E5E5"> the crate bound</font>

76
00:03:21,189 --> 00:03:27,069
<font color="#E5E5E5">not on some other bound like Python does</font>

77
00:03:24,000 --> 00:03:28,870
you can just use cargo fix and it will

78
00:03:27,069 --> 00:03:31,480
do most<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> work for</font><font color="#E5E5E5"> you</font>

79
00:03:28,870 --> 00:03:33,430
<font color="#E5E5E5">the best part is if you're on</font><font color="#CCCCCC"> 2018 you</font>

80
00:03:31,480 --> 00:03:35,798
<font color="#E5E5E5">don't really need to</font><font color="#CCCCCC"> worry about people</font>

81
00:03:33,430 --> 00:03:38,639
<font color="#E5E5E5">on 2015 because they can still</font><font color="#CCCCCC"> use your</font>

82
00:03:35,799 --> 00:03:40,989
stuff if they've used<font color="#CCCCCC"> a recent compiler</font>

83
00:03:38,639 --> 00:03:43,239
it's a little bit different<font color="#CCCCCC"> when we're</font>

84
00:03:40,989 --> 00:03:46,500
talking about release level<font color="#E5E5E5"> because we</font>

85
00:03:43,239 --> 00:03:49,989
don't provide<font color="#E5E5E5"> the same guarantees</font><font color="#CCCCCC"> as you</font>

86
00:03:46,500 --> 00:03:53,109
may see Travis lets you configure to

87
00:03:49,989 --> 00:03:54,939
test<font color="#E5E5E5"> multiple versions please do so and</font>

88
00:03:53,109 --> 00:03:56,769
<font color="#E5E5E5">please test on nightly it's very</font>

89
00:03:54,939 --> 00:03:59,650
important<font color="#E5E5E5"> we want to know when things</font>

90
00:03:56,769 --> 00:04:01,569
break<font color="#CCCCCC"> and tell people</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> look</font>

91
00:03:59,650 --> 00:04:03,930
<font color="#E5E5E5">at your CI script to see which versions</font>

92
00:04:01,569 --> 00:04:07,060
you support<font color="#E5E5E5"> okay</font>

93
00:04:03,930 --> 00:04:09,189
<font color="#E5E5E5">designing your AP is when you first make</font>

94
00:04:07,060 --> 00:04:11,139
your API<font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably just go for the</font>

95
00:04:09,189 --> 00:04:15,099
simplest<font color="#CCCCCC"> possible and that's good</font>

96
00:04:11,139 --> 00:04:17,259
<font color="#E5E5E5">simples best but a lot</font><font color="#CCCCCC"> of things when</font>

97
00:04:15,099 --> 00:04:20,668
<font color="#CCCCCC">you're trying</font><font color="#E5E5E5"> to move into</font><font color="#CCCCCC"> real-world</font>

98
00:04:17,259 --> 00:04:23,620
<font color="#E5E5E5">use</font><font color="#CCCCCC"> russ is a lot of</font><font color="#E5E5E5"> trade-offs</font>

99
00:04:20,668 --> 00:04:26,310
<font color="#CCCCCC">nothing's a silver bullet you're gonna</font>

100
00:04:23,620 --> 00:04:29,190
fight from complexity versus convenience

101
00:04:26,310 --> 00:04:33,820
<font color="#E5E5E5">readable errors versus flexibility and</font>

102
00:04:29,190 --> 00:04:38,110
speed<font color="#E5E5E5"> verse costs there's not always a</font>

103
00:04:33,820 --> 00:04:40,300
right<font color="#E5E5E5"> answer so for example if you just</font>

104
00:04:38,110 --> 00:04:42,700
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to accept references to strings and</font>

105
00:04:40,300 --> 00:04:44,559
I want to<font color="#E5E5E5"> emphasize if you're actually</font>

106
00:04:42,700 --> 00:04:47,498
cloning the string internally

107
00:04:44,559 --> 00:04:49,929
take a string do not clone<font color="#E5E5E5"> without the</font>

108
00:04:47,499 --> 00:04:52,359
user knowing<font color="#CCCCCC"> it's really mean they'll</font>

109
00:04:49,929 --> 00:04:55,419
hate you but if you're taking<font color="#CCCCCC"> a string</font>

110
00:04:52,359 --> 00:04:57,849
reference<font color="#CCCCCC"> you can go in play as ref SCR</font>

111
00:04:55,419 --> 00:05:00,609
<font color="#E5E5E5">and then in your code you can just go as</font>

112
00:04:57,849 --> 00:05:02,498
ref this means you can pass a string a

113
00:05:00,609 --> 00:05:06,659
string reference or<font color="#CCCCCC"> something else</font>

114
00:05:02,499 --> 00:05:09,489
<font color="#CCCCCC">anything that implements</font><font color="#E5E5E5"> as ref STR</font>

115
00:05:06,659 --> 00:05:11,769
similar with collections<font color="#CCCCCC"> your first</font>

116
00:05:09,489 --> 00:05:14,438
attempt you might accept an iterator<font color="#E5E5E5"> and</font>

117
00:05:11,769 --> 00:05:18,189
<font color="#E5E5E5">then you're gonna try and write and pass</font>

118
00:05:14,439 --> 00:05:19,839
<font color="#E5E5E5">a Veck</font><font color="#CCCCCC"> and you're gonna realize that</font>

119
00:05:18,189 --> 00:05:24,009
<font color="#E5E5E5">doesn't work and you're gonna look like</font>

120
00:05:19,839 --> 00:05:26,679
this<font color="#CCCCCC"> guy the proper</font><font color="#E5E5E5"> way to do it you can</font>

121
00:05:24,009 --> 00:05:28,659
<font color="#E5E5E5">try this using into iterator and now you</font>

122
00:05:26,679 --> 00:05:31,539
can pass a vector<font color="#CCCCCC"> or an iterator</font>

123
00:05:28,659 --> 00:05:37,299
<font color="#CCCCCC">that's because iterators implement into</font>

124
00:05:31,539 --> 00:05:38,829
into iterator<font color="#E5E5E5"> what a surprise now when</font>

125
00:05:37,299 --> 00:05:41,349
you've<font color="#E5E5E5"> been writing</font><font color="#CCCCCC"> Russ you've probably</font>

126
00:05:38,829 --> 00:05:44,649
seen this error message<font color="#E5E5E5"> when you call</font>

127
00:05:41,349 --> 00:05:47,739
the function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> returned a result now</font>

128
00:05:44,649 --> 00:05:49,959
you can actually make<font color="#E5E5E5"> your own if you've</font>

129
00:05:47,739 --> 00:05:53,018
got<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that needs to be</font><font color="#E5E5E5"> used you</font>

130
00:05:49,959 --> 00:05:56,409
<font color="#CCCCCC">can put</font><font color="#E5E5E5"> this must use attribute on your</font>

131
00:05:53,019 --> 00:05:58,899
code<font color="#E5E5E5"> that's great because now when</font>

132
00:05:56,409 --> 00:06:00,819
someone<font color="#E5E5E5"> goes to use it</font><font color="#CCCCCC"> incorrectly</font><font color="#E5E5E5"> they</font>

133
00:05:58,899 --> 00:06:02,279
get the same error<font color="#CCCCCC"> message and</font><font color="#E5E5E5"> they go</font>

134
00:06:00,819 --> 00:06:06,969
<font color="#E5E5E5">damn it</font>

135
00:06:02,279 --> 00:06:11,499
so if they<font color="#E5E5E5"> consume it it goes away</font>

136
00:06:06,969 --> 00:06:13,949
great<font color="#E5E5E5"> now quite often you'll have</font>

137
00:06:11,499 --> 00:06:17,379
functions that<font color="#CCCCCC"> take</font><font color="#E5E5E5"> optional arguments</font>

138
00:06:13,949 --> 00:06:19,659
generally it's best to use a builder but

139
00:06:17,379 --> 00:06:23,979
<font color="#CCCCCC">that's not always a good solution for</font>

140
00:06:19,659 --> 00:06:26,949
<font color="#E5E5E5">your problem remember trade-offs</font><font color="#CCCCCC"> if you</font>

141
00:06:23,979 --> 00:06:30,099
accept an<font color="#CCCCCC"> into option you 64</font><font color="#E5E5E5"> or into</font>

142
00:06:26,949 --> 00:06:32,739
option T you're gonna find that when you

143
00:06:30,099 --> 00:06:34,748
call<font color="#CCCCCC"> into in there that you can get your</font>

144
00:06:32,739 --> 00:06:38,709
option out and<font color="#CCCCCC"> it this means you can</font>

145
00:06:34,749 --> 00:06:41,529
call with the value or an option or your

146
00:06:38,709 --> 00:06:43,359
<font color="#CCCCCC">your happy little</font><font color="#E5E5E5"> none this means your</font>

147
00:06:41,529 --> 00:06:47,499
user doesn't<font color="#E5E5E5"> have to worry about writing</font>

148
00:06:43,359 --> 00:06:51,549
<font color="#CCCCCC">some this</font><font color="#E5E5E5"> is quite handy you can do</font>

149
00:06:47,499 --> 00:06:54,759
similar<font color="#E5E5E5"> with very attic arguments which</font>

150
00:06:51,549 --> 00:06:56,919
we don't<font color="#E5E5E5"> have but if you're okay</font><font color="#CCCCCC"> with</font>

151
00:06:54,759 --> 00:06:57,510
<font color="#CCCCCC">having some really ugly in your</font>

152
00:06:56,919 --> 00:07:00,909
code

153
00:06:57,510 --> 00:07:03,280
you can you<font color="#E5E5E5"> can simulate it with</font><font color="#CCCCCC"> tuples</font>

154
00:07:00,910 --> 00:07:05,890
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> going to show you a couple slides on</font>

155
00:07:03,280 --> 00:07:08,320
<font color="#CCCCCC">how this works</font><font color="#E5E5E5"> first you</font><font color="#CCCCCC"> define some</font>

156
00:07:05,890 --> 00:07:09,969
structure because you can't implement

157
00:07:08,320 --> 00:07:13,540
<font color="#CCCCCC">things for</font><font color="#E5E5E5"> things you don't define and</font>

158
00:07:09,970 --> 00:07:15,540
then<font color="#CCCCCC"> you do some from implementations on</font>

159
00:07:13,540 --> 00:07:20,380
what you want to<font color="#E5E5E5"> support being passed in</font>

160
00:07:15,540 --> 00:07:22,630
then you can<font color="#E5E5E5"> accept an</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> whatever now</font>

161
00:07:20,380 --> 00:07:27,040
<font color="#E5E5E5">all of these things over</font><font color="#CCCCCC"> here they work</font>

162
00:07:22,630 --> 00:07:29,170
<font color="#CCCCCC">just fine</font><font color="#E5E5E5"> it's really ugly</font><font color="#CCCCCC"> so don't use</font>

163
00:07:27,040 --> 00:07:32,320
<font color="#E5E5E5">it all the time please</font><font color="#CCCCCC"> it's not for</font>

164
00:07:29,170 --> 00:07:35,500
abuse<font color="#CCCCCC"> one cool trick</font><font color="#E5E5E5"> with that we found</font>

165
00:07:32,320 --> 00:07:38,770
in the last<font color="#E5E5E5"> little while with</font><font color="#CCCCCC"> Russ</font><font color="#E5E5E5"> 2018</font>

166
00:07:35,500 --> 00:07:42,400
is you can now actually<font color="#E5E5E5"> D structure and</font>

167
00:07:38,770 --> 00:07:44,740
take from arrays<font color="#E5E5E5"> this was much harder in</font>

168
00:07:42,400 --> 00:07:47,710
<font color="#E5E5E5">Russ 2015 and this is thanks</font><font color="#CCCCCC"> to non</font>

169
00:07:44,740 --> 00:07:51,490
lexical lifetimes<font color="#E5E5E5"> this makes designing</font>

170
00:07:47,710 --> 00:07:53,500
api's that take fixed sized arrays<font color="#E5E5E5"> much</font>

171
00:07:51,490 --> 00:07:56,170
easier and<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> do some really cool</font>

172
00:07:53,500 --> 00:07:58,180
optimizations around that so this seems

173
00:07:56,170 --> 00:07:59,680
really<font color="#E5E5E5"> harmless and if you're a beginner</font>

174
00:07:58,180 --> 00:08:01,900
<font color="#E5E5E5">you</font><font color="#CCCCCC"> might be</font><font color="#E5E5E5"> going what the hell's</font>

175
00:07:59,680 --> 00:08:03,250
special about this<font color="#E5E5E5"> but if you've been</font>

176
00:08:01,900 --> 00:08:07,510
writing rest for<font color="#E5E5E5"> a while</font>

177
00:08:03,250 --> 00:08:09,280
this might surprise you wish we'll

178
00:08:07,510 --> 00:08:13,599
actually<font color="#CCCCCC"> be</font><font color="#E5E5E5"> talking about this later on</font>

179
00:08:09,280 --> 00:08:16,450
<font color="#CCCCCC">in his metrics talk at I believe one a</font>

180
00:08:13,600 --> 00:08:19,090
lot of<font color="#CCCCCC"> people ask us about how we</font><font color="#E5E5E5"> deal</font>

181
00:08:16,450 --> 00:08:21,340
with<font color="#E5E5E5"> errors</font><font color="#CCCCCC"> and we're doing</font><font color="#E5E5E5"> some really</font>

182
00:08:19,090 --> 00:08:23,289
<font color="#E5E5E5">nasty things with errors</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're</font>

183
00:08:21,340 --> 00:08:25,810
trying to<font color="#E5E5E5"> move to using the failure</font>

184
00:08:23,290 --> 00:08:27,550
library<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> found that the</font>

185
00:08:25,810 --> 00:08:31,349
standard error traits<font color="#E5E5E5"> a little bit</font>

186
00:08:27,550 --> 00:08:34,390
insufficient<font color="#E5E5E5"> and a lot of people agree</font>

187
00:08:31,349 --> 00:08:35,848
why because you can't<font color="#E5E5E5"> down cast the</font>

188
00:08:34,390 --> 00:08:39,010
<font color="#E5E5E5">cause of an error</font>

189
00:08:35,849 --> 00:08:42,669
<font color="#E5E5E5">you also can't get back traces that</font>

190
00:08:39,010 --> 00:08:44,410
sucks<font color="#CCCCCC"> the failure</font><font color="#E5E5E5"> crate allows you to</font>

191
00:08:42,669 --> 00:08:46,660
have both of these things<font color="#CCCCCC"> and it's</font>

192
00:08:44,410 --> 00:08:49,390
<font color="#CCCCCC">really</font><font color="#E5E5E5"> well documented it goes out of</font>

193
00:08:46,660 --> 00:08:51,040
<font color="#E5E5E5">its way to describe</font><font color="#CCCCCC"> four different ways</font>

194
00:08:49,390 --> 00:08:55,319
<font color="#E5E5E5">of dealing with errors in your code</font>

195
00:08:51,040 --> 00:08:55,319
<font color="#CCCCCC">three of them I think</font><font color="#E5E5E5"> are good ideas</font>

196
00:08:56,190 --> 00:09:00,490
<font color="#E5E5E5">you've got the prototyping way where you</font>

197
00:08:58,900 --> 00:09:02,350
just<font color="#E5E5E5"> pass around some strings</font>

198
00:09:00,490 --> 00:09:04,690
<font color="#CCCCCC">you've got the lazy way where you just</font>

199
00:09:02,350 --> 00:09:06,160
<font color="#E5E5E5">have a normal error type and if you're</font>

200
00:09:04,690 --> 00:09:08,440
writing<font color="#E5E5E5"> some really high reliability</font>

201
00:09:06,160 --> 00:09:09,469
software it describes this other way

202
00:09:08,440 --> 00:09:12,530
called the air

203
00:09:09,470 --> 00:09:14,270
a kind method the first<font color="#CCCCCC"> two you can</font>

204
00:09:12,530 --> 00:09:17,000
probably figure<font color="#E5E5E5"> out how they work</font><font color="#CCCCCC"> just</font>

205
00:09:14,270 --> 00:09:18,470
from<font color="#E5E5E5"> hearing</font><font color="#CCCCCC"> about them and this</font><font color="#E5E5E5"> link</font>

206
00:09:17,000 --> 00:09:20,300
will take<font color="#CCCCCC"> you to the book which will</font>

207
00:09:18,470 --> 00:09:21,230
<font color="#E5E5E5">describe them all in excruciating detail</font>

208
00:09:20,300 --> 00:09:22,969
for you

209
00:09:21,230 --> 00:09:25,190
I'm<font color="#E5E5E5"> gonna give you a little bit of a</font>

210
00:09:22,970 --> 00:09:26,780
demo<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> error error kind you just</font><font color="#CCCCCC"> so</font>

211
00:09:25,190 --> 00:09:31,220
<font color="#E5E5E5">you get an</font><font color="#CCCCCC"> idea of what it is and</font><font color="#E5E5E5"> I</font>

212
00:09:26,780 --> 00:09:34,280
don't<font color="#CCCCCC"> have time for more so first we</font>

213
00:09:31,220 --> 00:09:36,860
just define this error<font color="#E5E5E5"> and it contains</font>

214
00:09:34,280 --> 00:09:37,699
this context thing which comes from

215
00:09:36,860 --> 00:09:41,090
failure

216
00:09:37,700 --> 00:09:44,390
now<font color="#E5E5E5"> it's gonna hold an enum which we</font>

217
00:09:41,090 --> 00:09:47,120
<font color="#E5E5E5">define down here this doesn't</font><font color="#CCCCCC"> hold this</font>

218
00:09:44,390 --> 00:09:49,490
is not a<font color="#CCCCCC"> fat enum it's just labels and</font>

219
00:09:47,120 --> 00:09:52,760
they have these<font color="#E5E5E5"> attributes</font><font color="#CCCCCC"> which gives</font>

220
00:09:49,490 --> 00:09:55,910
some display message and you can<font color="#E5E5E5"> see we</font>

221
00:09:52,760 --> 00:09:57,319
have to<font color="#E5E5E5"> derive fail on it okay you've</font>

222
00:09:55,910 --> 00:09:59,240
all looked<font color="#E5E5E5"> at</font><font color="#CCCCCC"> it long enough</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font>

223
00:09:57,320 --> 00:10:01,430
change the slide<font color="#E5E5E5"> now we're going to</font>

224
00:09:59,240 --> 00:10:03,410
<font color="#E5E5E5">implement fail for our error and we have</font>

225
00:10:01,430 --> 00:10:06,170
to define<font color="#E5E5E5"> these two functions where we</font>

226
00:10:03,410 --> 00:10:08,780
take<font color="#E5E5E5"> a</font><font color="#CCCCCC"> back-trace and a cause right now</font>

227
00:10:06,170 --> 00:10:12,410
we're just proxying to the inner but you

228
00:10:08,780 --> 00:10:14,060
might do more in your implementation<font color="#E5E5E5"> you</font>

229
00:10:12,410 --> 00:10:17,900
also have to<font color="#CCCCCC"> implement display</font><font color="#E5E5E5"> but</font>

230
00:10:14,060 --> 00:10:19,699
that's not a<font color="#E5E5E5"> surprise to you and then we</font>

231
00:10:17,900 --> 00:10:24,020
implement some<font color="#CCCCCC"> Fromm's as you can tell</font>

232
00:10:19,700 --> 00:10:25,820
<font color="#CCCCCC">from an</font><font color="#E5E5E5"> int or just crazy useful</font><font color="#CCCCCC"> it's</font>

233
00:10:24,020 --> 00:10:28,970
important that you implement both for

234
00:10:25,820 --> 00:10:32,060
the enum<font color="#E5E5E5"> and the context because this is</font>

235
00:10:28,970 --> 00:10:35,060
important on<font color="#E5E5E5"> this slide</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> the next</font>

236
00:10:32,060 --> 00:10:40,310
slide sorry<font color="#E5E5E5"> we also provide some way to</font>

237
00:10:35,060 --> 00:10:42,650
get at that context now we can call

238
00:10:40,310 --> 00:10:45,589
something<font color="#E5E5E5"> that gives you an error and</font>

239
00:10:42,650 --> 00:10:48,439
<font color="#E5E5E5">you can actually add some context that's</font>

240
00:10:45,590 --> 00:10:50,540
specific<font color="#CCCCCC"> to your library and</font><font color="#E5E5E5"> the user</font>

241
00:10:48,440 --> 00:10:52,610
will be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to down cast and get that</font>

242
00:10:50,540 --> 00:10:55,130
original<font color="#E5E5E5"> error and all of the context</font>

243
00:10:52,610 --> 00:10:58,190
<font color="#E5E5E5">that comes along with it this means if</font>

244
00:10:55,130 --> 00:11:01,189
<font color="#E5E5E5">you if your user</font><font color="#CCCCCC"> actually cares about</font>

245
00:10:58,190 --> 00:11:03,080
<font color="#CCCCCC">their</font><font color="#E5E5E5"> they can dig down really</font><font color="#CCCCCC"> deep and</font>

246
00:11:01,190 --> 00:11:04,670
figure<font color="#CCCCCC"> out what's wrong if they don't</font>

247
00:11:03,080 --> 00:11:07,190
care they can<font color="#E5E5E5"> still just unwrap it and</font>

248
00:11:04,670 --> 00:11:09,860
crash that's fine<font color="#CCCCCC"> if they don't</font><font color="#E5E5E5"> care you</font>

249
00:11:07,190 --> 00:11:12,230
<font color="#CCCCCC">don't have to care you also</font><font color="#E5E5E5"> you don't</font>

250
00:11:09,860 --> 00:11:14,390
need<font color="#E5E5E5"> context so you can just use the</font>

251
00:11:12,230 --> 00:11:18,260
enum that's where we have those two from

252
00:11:14,390 --> 00:11:20,150
implementations<font color="#CCCCCC"> okay now let's talk</font>

253
00:11:18,260 --> 00:11:22,630
about fuzzing<font color="#E5E5E5"> and I know you all like</font>

254
00:11:20,150 --> 00:11:24,640
fuzzy things<font color="#E5E5E5"> I did not bring in</font>

255
00:11:22,630 --> 00:11:25,840
<font color="#CCCCCC">fuzzy</font><font color="#E5E5E5"> crabs for you I'm sorry</font><font color="#CCCCCC"> I'm</font>

256
00:11:24,640 --> 00:11:29,260
actually talking<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> programming</font>

257
00:11:25,840 --> 00:11:31,330
technique now fuzzing doesn't replace

258
00:11:29,260 --> 00:11:34,300
your unit tests<font color="#E5E5E5"> but it does complement</font>

259
00:11:31,330 --> 00:11:37,000
them because it<font color="#E5E5E5"> finds out if you've</font>

260
00:11:34,300 --> 00:11:43,660
forgotten<font color="#E5E5E5"> tests or you didn't know about</font>

261
00:11:37,000 --> 00:11:45,160
them<font color="#E5E5E5"> because you weren't that smart</font><font color="#CCCCCC"> but</font>

262
00:11:43,660 --> 00:11:47,290
please note when<font color="#E5E5E5"> you're implementing</font>

263
00:11:45,160 --> 00:11:49,900
fuzzing<font color="#CCCCCC"> it shouldn't</font><font color="#E5E5E5"> be part of your</font>

264
00:11:47,290 --> 00:11:52,890
<font color="#E5E5E5">normal CI test runs when a new</font>

265
00:11:49,900 --> 00:11:56,020
contributor makes a PR that's<font color="#E5E5E5"> mean</font>

266
00:11:52,890 --> 00:11:58,000
because if you get<font color="#E5E5E5"> a failure which they</font>

267
00:11:56,020 --> 00:12:02,020
<font color="#E5E5E5">don't always happen</font><font color="#CCCCCC"> that poor</font>

268
00:11:58,000 --> 00:12:05,740
contributor is very confused<font color="#E5E5E5"> so Travis</font>

269
00:12:02,020 --> 00:12:07,810
<font color="#E5E5E5">lets you define the determinant event</font>

270
00:12:05,740 --> 00:12:10,450
type<font color="#CCCCCC"> if it's a cron job which you can</font>

271
00:12:07,810 --> 00:12:12,489
you can<font color="#CCCCCC"> make them they're not hard you</font>

272
00:12:10,450 --> 00:12:15,580
can detect<font color="#E5E5E5"> it and that's when you should</font>

273
00:12:12,490 --> 00:12:17,890
run<font color="#CCCCCC"> your fuzzing that way every night or</font>

274
00:12:15,580 --> 00:12:19,720
<font color="#CCCCCC">every morning when</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> wake up you</font><font color="#E5E5E5"> get a</font>

275
00:12:17,890 --> 00:12:25,420
<font color="#E5E5E5">nice failure report saying how bad your</font>

276
00:12:19,720 --> 00:12:27,970
code is so fuzzing is<font color="#E5E5E5"> a way to randomly</font>

277
00:12:25,420 --> 00:12:31,750
explore the<font color="#CCCCCC"> spate the state space of</font>

278
00:12:27,970 --> 00:12:34,300
<font color="#E5E5E5">your code this means</font><font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> not</font>

279
00:12:31,750 --> 00:12:36,790
<font color="#CCCCCC">always going</font><font color="#E5E5E5"> to run over the entire</font>

280
00:12:34,300 --> 00:12:40,089
<font color="#E5E5E5">space and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a good thing</font><font color="#CCCCCC"> because</font>

281
00:12:36,790 --> 00:12:44,680
if you're running<font color="#E5E5E5"> say over a you 64</font>

282
00:12:40,090 --> 00:12:47,680
state space<font color="#E5E5E5"> this could take forever to</font>

283
00:12:44,680 --> 00:12:49,930
find one edge case fuzzing is only<font color="#E5E5E5"> gonna</font>

284
00:12:47,680 --> 00:12:51,449
<font color="#CCCCCC">run a few thousand</font><font color="#E5E5E5"> every time you run it</font>

285
00:12:49,930 --> 00:12:56,439
so it's a great way to<font color="#E5E5E5"> find bugs</font>

286
00:12:51,450 --> 00:12:58,330
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> and as you get</font><font color="#E5E5E5"> more and</font><font color="#CCCCCC"> more</font>

287
00:12:56,440 --> 00:13:01,000
complex with your fuzzing<font color="#E5E5E5"> you're gonna</font>

288
00:12:58,330 --> 00:13:02,860
have a bigger and bigger<font color="#E5E5E5"> state space so</font>

289
00:13:01,000 --> 00:13:05,320
you might think<font color="#CCCCCC"> oh it's no problem</font><font color="#E5E5E5"> to</font>

290
00:13:02,860 --> 00:13:11,170
run through<font color="#E5E5E5"> you</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> and I agree but a you</font>

291
00:13:05,320 --> 00:13:13,390
64<font color="#CCCCCC"> is a lot bigger</font><font color="#E5E5E5"> than a you 32</font><font color="#CCCCCC"> we</font>

292
00:13:11,170 --> 00:13:15,069
<font color="#CCCCCC">recommend</font><font color="#E5E5E5"> that you explore prop</font><font color="#CCCCCC"> test</font>

293
00:13:13,390 --> 00:13:17,290
which is kind of the newest<font color="#E5E5E5"> one out</font>

294
00:13:15,070 --> 00:13:19,570
<font color="#E5E5E5">we're actually not using it yet but it's</font>

295
00:13:17,290 --> 00:13:21,099
a<font color="#E5E5E5"> really great kraid and we've been</font>

296
00:13:19,570 --> 00:13:24,280
playing with<font color="#E5E5E5"> it and we'd like to adopt</font>

297
00:13:21,100 --> 00:13:27,790
<font color="#CCCCCC">that it's from the quickcheck</font><font color="#E5E5E5"> family of</font>

298
00:13:24,280 --> 00:13:30,040
fuzzers<font color="#CCCCCC"> so</font><font color="#E5E5E5"> essentially the way</font><font color="#CCCCCC"> you use</font>

299
00:13:27,790 --> 00:13:33,010
them is you<font color="#E5E5E5"> define some properties</font><font color="#CCCCCC"> that</font>

300
00:13:30,040 --> 00:13:35,709
get<font color="#E5E5E5"> fussed over it supports this idea</font><font color="#CCCCCC"> of</font>

301
00:13:33,010 --> 00:13:37,870
minimization<font color="#CCCCCC"> so when you're</font>

302
00:13:35,710 --> 00:13:39,910
over say a string and it finds one<font color="#CCCCCC"> that</font>

303
00:13:37,870 --> 00:13:41,950
doesn't<font color="#E5E5E5"> work that's really long and</font>

304
00:13:39,910 --> 00:13:44,350
crazy<font color="#CCCCCC"> it will go</font><font color="#E5E5E5"> through a whole bunch</font>

305
00:13:41,950 --> 00:13:46,570
<font color="#CCCCCC">more iterations to find the most minimal</font>

306
00:13:44,350 --> 00:13:48,970
example it can so<font color="#CCCCCC"> that you're only</font>

307
00:13:46,570 --> 00:13:52,360
<font color="#E5E5E5">testing very simple examples that break</font>

308
00:13:48,970 --> 00:13:54,310
things<font color="#E5E5E5"> it also remembers regressions for</font>

309
00:13:52,360 --> 00:13:56,730
you and keeps testing<font color="#E5E5E5"> them</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure</font>

310
00:13:54,310 --> 00:13:59,829
you fixed it<font color="#CCCCCC"> so you can't be lazy</font>

311
00:13:56,730 --> 00:14:03,910
<font color="#CCCCCC">because we all like to</font><font color="#E5E5E5"> be lazy and tools</font>

312
00:13:59,830 --> 00:14:06,790
<font color="#E5E5E5">that</font><font color="#CCCCCC"> keep us honest</font><font color="#E5E5E5"> or good</font><font color="#CCCCCC"> the way you</font>

313
00:14:03,910 --> 00:14:09,069
define<font color="#E5E5E5"> how to fuzz over things is quite</font>

314
00:14:06,790 --> 00:14:11,110
a bit different<font color="#CCCCCC"> in prop tests compared</font>

315
00:14:09,070 --> 00:14:12,760
<font color="#E5E5E5">to the other</font><font color="#CCCCCC"> quick</font><font color="#E5E5E5"> check family things</font>

316
00:14:11,110 --> 00:14:16,660
you actually<font color="#E5E5E5"> define these strategies</font>

317
00:14:12,760 --> 00:14:19,060
which you can<font color="#E5E5E5"> customize quite closely</font><font color="#CCCCCC"> I</font>

318
00:14:16,660 --> 00:14:22,260
think it's a really<font color="#E5E5E5"> good</font><font color="#CCCCCC"> alternative to</font>

319
00:14:19,060 --> 00:14:24,579
<font color="#CCCCCC">lib</font><font color="#E5E5E5"> buzzer or</font><font color="#CCCCCC"> AFL or quick check</font><font color="#E5E5E5"> itself</font>

320
00:14:22,260 --> 00:14:25,840
<font color="#CCCCCC">you might</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> different opinions that's</font>

321
00:14:24,580 --> 00:14:29,380
<font color="#E5E5E5">great I support that</font>

322
00:14:25,840 --> 00:14:31,840
I like opinions<font color="#CCCCCC"> here's a little bit of a</font>

323
00:14:29,380 --> 00:14:34,300
demo on<font color="#CCCCCC"> how process works this is the</font>

324
00:14:31,840 --> 00:14:35,740
most basic one<font color="#CCCCCC"> I could think of</font><font color="#E5E5E5"> and it's</font>

325
00:14:34,300 --> 00:14:37,630
actually<font color="#E5E5E5"> part of their documentation</font>

326
00:14:35,740 --> 00:14:40,870
<font color="#E5E5E5">because it's the most basic</font><font color="#CCCCCC"> one you can</font>

327
00:14:37,630 --> 00:14:43,510
<font color="#CCCCCC">think</font><font color="#E5E5E5"> of we define some add trait or add</font>

328
00:14:40,870 --> 00:14:47,080
function and then we use this<font color="#CCCCCC"> mock macro</font>

329
00:14:43,510 --> 00:14:50,439
called prop<font color="#E5E5E5"> test and we define some</font>

330
00:14:47,080 --> 00:14:53,860
ranges you<font color="#CCCCCC"> can see a in zero to a</font>

331
00:14:50,440 --> 00:14:56,500
thousand<font color="#CCCCCC"> P in zero to a thousand</font><font color="#E5E5E5"> this</font>

332
00:14:53,860 --> 00:14:58,300
means the fuzzer can pick any numbers

333
00:14:56,500 --> 00:15:01,360
between<font color="#E5E5E5"> zero and a thousand for both a</font>

334
00:14:58,300 --> 00:15:05,140
and<font color="#CCCCCC"> B try to add them together and make</font>

335
00:15:01,360 --> 00:15:07,150
some<font color="#CCCCCC"> assertions</font><font color="#E5E5E5"> so when I run this and I</font>

336
00:15:05,140 --> 00:15:08,680
run<font color="#CCCCCC"> cargo</font><font color="#E5E5E5"> tests it's gonna run a whole</font>

337
00:15:07,150 --> 00:15:11,530
bunch of them<font color="#E5E5E5"> and this state</font><font color="#CCCCCC"> space is</font>

338
00:15:08,680 --> 00:15:14,680
<font color="#E5E5E5">actually quite small</font><font color="#CCCCCC"> so it will probably</font>

339
00:15:11,530 --> 00:15:17,380
<font color="#E5E5E5">only take me maybe five or ten fuzz runs</font>

340
00:15:14,680 --> 00:15:19,120
to<font color="#E5E5E5"> get through the whole state space as</font>

341
00:15:17,380 --> 00:15:24,400
you<font color="#E5E5E5"> can tell though this code has no</font>

342
00:15:19,120 --> 00:15:27,340
problems it's very<font color="#E5E5E5"> simple but if we were</font>

343
00:15:24,400 --> 00:15:29,290
<font color="#E5E5E5">exploring all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the IP</font><font color="#CCCCCC"> 32 state space I</font>

344
00:15:27,340 --> 00:15:34,930
might have some problems because<font color="#E5E5E5"> there's</font>

345
00:15:29,290 --> 00:15:36,610
such a<font color="#CCCCCC"> thing as overflow but you're</font>

346
00:15:34,930 --> 00:15:39,189
<font color="#E5E5E5">probably like yeah I don't really care</font>

347
00:15:36,610 --> 00:15:42,220
about<font color="#E5E5E5"> testing</font><font color="#CCCCCC"> over you thirty twos I use</font>

348
00:15:39,190 --> 00:15:45,610
a whole bunch<font color="#CCCCCC"> of complex types so what</font>

349
00:15:42,220 --> 00:15:47,350
about<font color="#E5E5E5"> like a key value so</font><font color="#CCCCCC"> a non simple</font>

350
00:15:45,610 --> 00:15:52,300
<font color="#E5E5E5">type that holds</font>

351
00:15:47,350 --> 00:15:54,730
<font color="#E5E5E5">to</font><font color="#CCCCCC"> byte arrays</font><font color="#E5E5E5"> you can go and you can</font>

352
00:15:52,300 --> 00:15:59,829
<font color="#E5E5E5">implement a</font><font color="#CCCCCC"> function which returns this</font>

353
00:15:54,730 --> 00:16:01,990
strategy thing and here or here on that

354
00:15:59,830 --> 00:16:05,110
tupple<font color="#E5E5E5"> you can see I have this these reg</font>

355
00:16:01,990 --> 00:16:07,600
X's and I can define these reg X's to be

356
00:16:05,110 --> 00:16:09,490
whatever reg X I want<font color="#E5E5E5"> and there's</font>

357
00:16:07,600 --> 00:16:12,010
various<font color="#E5E5E5"> other things such as ranges I</font>

358
00:16:09,490 --> 00:16:14,830
can use<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> then I call prop map</font>

359
00:16:12,010 --> 00:16:19,990
and I<font color="#E5E5E5"> can use it</font><font color="#CCCCCC"> to map to these this</font>

360
00:16:14,830 --> 00:16:22,090
new structure<font color="#CCCCCC"> I defined so this function</font>

361
00:16:19,990 --> 00:16:25,380
<font color="#E5E5E5">will actually</font><font color="#CCCCCC"> return to me an arbitrary</font>

362
00:16:22,090 --> 00:16:30,880
<font color="#CCCCCC">kv value with some vectors to vectors</font>

363
00:16:25,380 --> 00:16:34,030
<font color="#E5E5E5">with random garbage in them now when I</font>

364
00:16:30,880 --> 00:16:35,920
write<font color="#CCCCCC"> my prop test</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> say kV in this</font>

365
00:16:34,030 --> 00:16:38,470
arbitrary<font color="#E5E5E5"> function and it will go and</font>

366
00:16:35,920 --> 00:16:40,839
get<font color="#E5E5E5"> out random ones a whole bunch this</font>

367
00:16:38,470 --> 00:16:43,810
is great as you can<font color="#E5E5E5"> guess though the</font>

368
00:16:40,840 --> 00:16:45,430
state space on this is gigantic<font color="#E5E5E5"> so I</font>

369
00:16:43,810 --> 00:16:49,719
could<font color="#E5E5E5"> probably run this a million times</font>

370
00:16:45,430 --> 00:16:51,310
<font color="#E5E5E5">and still have new outputs so it doesn't</font>

371
00:16:49,720 --> 00:16:57,900
explore the whole state space it's<font color="#E5E5E5"> not a</font>

372
00:16:51,310 --> 00:17:00,579
silver bullet<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> thank you Anna</font>

373
00:16:57,900 --> 00:17:03,970
<font color="#E5E5E5">and I just introduced some methods to</font>

374
00:17:00,580 --> 00:17:06,300
<font color="#CCCCCC">help you to</font><font color="#E5E5E5"> five bucks actually it's</font>

375
00:17:03,970 --> 00:17:08,620
quite easy to find<font color="#CCCCCC"> out</font><font color="#E5E5E5"> that an</font>

376
00:17:06,300 --> 00:17:12,730
application doesn't<font color="#E5E5E5"> work because in my</font>

377
00:17:08,619 --> 00:17:15,329
panic<font color="#E5E5E5"> or evil</font><font color="#CCCCCC"> we poor</font><font color="#E5E5E5"> Ellis but</font><font color="#CCCCCC"> two</font>

378
00:17:12,730 --> 00:17:18,699
reasoning the back usually<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be hard</font>

379
00:17:15,329 --> 00:17:23,069
because bugs can be<font color="#CCCCCC"> unpretty bail</font>

380
00:17:18,699 --> 00:17:25,510
it may be<font color="#CCCCCC"> reproduce</font><font color="#E5E5E5"> in may not and</font>

381
00:17:23,069 --> 00:17:29,470
usually you will need more informations

382
00:17:25,510 --> 00:17:33,580
to<font color="#E5E5E5"> recent in a box I have been into some</font>

383
00:17:29,470 --> 00:17:38,080
situations<font color="#E5E5E5"> that I is some print and we</font>

384
00:17:33,580 --> 00:17:42,280
run it again<font color="#CCCCCC"> and and this</font><font color="#E5E5E5"> procedure away</font>

385
00:17:38,080 --> 00:17:45,220
<font color="#E5E5E5">I work in so it also Ming</font><font color="#CCCCCC"> Lux so you</font>

386
00:17:42,280 --> 00:17:48,580
might<font color="#CCCCCC"> think that I wish that</font><font color="#E5E5E5"> time can</font>

387
00:17:45,220 --> 00:17:51,280
just tip back so that I can I can<font color="#CCCCCC"> class</font>

388
00:17:48,580 --> 00:17:54,310
<font color="#E5E5E5">map as much as informations that</font><font color="#CCCCCC"> I need</font>

389
00:17:51,280 --> 00:17:56,020
and fortunately<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> the tools that</font>

390
00:17:54,310 --> 00:18:01,620
can do this<font color="#CCCCCC"> for you is haha</font>

391
00:17:56,020 --> 00:18:01,620
and it's true produced by the<font color="#E5E5E5"> Mozilla</font>

392
00:18:01,740 --> 00:18:08,370
awesome rust<font color="#E5E5E5"> and he can they can</font><font color="#CCCCCC"> record</font>

393
00:18:05,160 --> 00:18:12,360
the failure<font color="#E5E5E5"> once in the back that</font>

394
00:18:08,370 --> 00:18:15,060
recording deterministically<font color="#E5E5E5"> and you can</font>

395
00:18:12,360 --> 00:18:20,520
set breakpoints<font color="#E5E5E5"> and watch</font><font color="#CCCCCC"> points and</font>

396
00:18:15,060 --> 00:18:23,010
escalate and<font color="#CCCCCC"> we're asking the commands</font>

397
00:18:20,520 --> 00:18:26,790
who the command to use this<font color="#CCCCCC"> sure is</font>

398
00:18:23,010 --> 00:18:30,270
quite simple just<font color="#E5E5E5"> are we call and once</font>

399
00:18:26,790 --> 00:18:32,970
you find<font color="#E5E5E5"> failure then just</font><font color="#CCCCCC"> repeat</font><font color="#E5E5E5"> I will</font>

400
00:18:30,270 --> 00:18:39,260
show you an example about<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to use our</font>

401
00:18:32,970 --> 00:18:39,260
<font color="#CCCCCC">to debugger as</font><font color="#E5E5E5"> Russ what's program</font>

402
00:18:49,310 --> 00:18:52,149
let me<font color="#CCCCCC"> go</font>

403
00:18:52,980 --> 00:19:06,750
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I implement a</font><font color="#E5E5E5"> simple program</font><font color="#CCCCCC"> that</font>

404
00:18:57,980 --> 00:19:10,950
just simulate a situation that<font color="#E5E5E5"> has race</font>

405
00:19:06,750 --> 00:19:13,110
condition a<font color="#E5E5E5"> fan that is that Russ when</font>

406
00:19:10,950 --> 00:19:17,430
you write code<font color="#E5E5E5"> in say</font><font color="#CCCCCC"> Frost is gravity</font>

407
00:19:13,110 --> 00:19:22,709
that<font color="#CCCCCC"> pays no data race</font><font color="#E5E5E5"> but race</font>

408
00:19:17,430 --> 00:19:27,990
condition is unavoidable<font color="#E5E5E5"> and so we have</font>

409
00:19:22,710 --> 00:19:30,890
an account account has name and<font color="#E5E5E5"> and the</font>

410
00:19:27,990 --> 00:19:33,750
data<font color="#E5E5E5"> directory</font><font color="#CCCCCC"> when you need to</font>

411
00:19:30,890 --> 00:19:38,310
initialize an<font color="#E5E5E5"> account if you write it</font>

412
00:19:33,750 --> 00:19:47,010
hard to<font color="#CCCCCC"> the right</font><font color="#E5E5E5"> is remaining money to</font>

413
00:19:38,310 --> 00:19:50,100
the data directory so sensitive<font color="#E5E5E5"> and you</font>

414
00:19:47,010 --> 00:19:54,660
can<font color="#CCCCCC"> query</font><font color="#E5E5E5"> the remaining and you can also</font>

415
00:19:50,100 --> 00:19:59,850
set<font color="#E5E5E5"> the remaining and what we are going</font>

416
00:19:54,660 --> 00:20:02,580
<font color="#E5E5E5">to do is the transfer transfer will</font>

417
00:19:59,850 --> 00:20:05,340
first check if the sauce account have

418
00:20:02,580 --> 00:20:09,810
enough money<font color="#E5E5E5"> if</font><font color="#CCCCCC"> in if it's not if we</font>

419
00:20:05,340 --> 00:20:13,649
return<font color="#E5E5E5"> false</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> if we do if it does it</font>

420
00:20:09,810 --> 00:20:16,110
will set the<font color="#E5E5E5"> remaining about to the</font>

421
00:20:13,650 --> 00:20:18,980
source<font color="#E5E5E5"> and the target</font><font color="#CCCCCC"> as you can see</font>

422
00:20:16,110 --> 00:20:22,800
this<font color="#CCCCCC"> program is</font><font color="#E5E5E5"> just written for the</font>

423
00:20:18,980 --> 00:20:27,510
just everything<font color="#CCCCCC"> SNe simple so the logic</font>

424
00:20:22,800 --> 00:20:29,870
is<font color="#E5E5E5"> quite simple and we can try to run</font>

425
00:20:27,510 --> 00:20:29,870
this code

426
00:20:36,690 --> 00:20:47,130
<font color="#CCCCCC">aha well surprised if aromaticity</font><font color="#E5E5E5"> but as</font>

427
00:20:43,060 --> 00:20:52,169
you can<font color="#E5E5E5"> see we are not okay</font>

428
00:20:47,130 --> 00:20:56,130
usually we are<font color="#E5E5E5"> not that's the lucky but</font>

429
00:20:52,170 --> 00:20:57,610
but<font color="#E5E5E5"> this Howie is a good day today</font><font color="#CCCCCC"> for</font>

430
00:20:56,130 --> 00:21:02,550
<font color="#CCCCCC">Easter Sunday</font>

431
00:20:57,610 --> 00:21:02,550
right<font color="#E5E5E5"> okay yeah</font><font color="#CCCCCC"> sunday seems a good</font><font color="#E5E5E5"> day</font>

432
00:21:02,940 --> 00:21:08,920
the point is once we we find<font color="#CCCCCC"> out that it</font>

433
00:21:06,400 --> 00:21:11,950
is hard to reproduce the back<font color="#CCCCCC"> he always</font>

434
00:21:08,920 --> 00:21:17,740
<font color="#E5E5E5">passed how can we do it how can</font><font color="#CCCCCC"> we solve</font>

435
00:21:11,950 --> 00:21:19,870
the problem<font color="#E5E5E5"> when using our</font><font color="#CCCCCC"> are due to</font>

436
00:21:17,740 --> 00:21:23,200
the uncertainty of the<font color="#E5E5E5"> network</font><font color="#CCCCCC"> I'm not</font>

437
00:21:19,870 --> 00:21:25,090
going<font color="#E5E5E5"> to run the in life so I just</font><font color="#CCCCCC"> show</font>

438
00:21:23,200 --> 00:21:29,680
you some pictures to show how how you

439
00:21:25,090 --> 00:21:33,399
work the command you<font color="#E5E5E5"> can see is I use</font><font color="#CCCCCC"> R</font>

440
00:21:29,680 --> 00:21:36,460
to<font color="#E5E5E5"> record a program with H flag H frame</font>

441
00:21:33,400 --> 00:21:38,440
means that enable the chaos chaos<font color="#E5E5E5"> mode</font>

442
00:21:36,460 --> 00:21:41,320
to the<font color="#CCCCCC"> aha</font>

443
00:21:38,440 --> 00:21:46,630
it means that you because I actually

444
00:21:41,320 --> 00:21:49,300
will<font color="#E5E5E5"> emulate a single call machine so it</font>

445
00:21:46,630 --> 00:21:53,940
<font color="#E5E5E5">will try to switch to other</font><font color="#CCCCCC"> press</font><font color="#E5E5E5"> when</font>

446
00:21:49,300 --> 00:21:58,899
there is some like<font color="#CCCCCC"> six-course or some</font>

447
00:21:53,940 --> 00:22:01,720
some instrument<font color="#CCCCCC"> counts is is rich</font><font color="#E5E5E5"> so the</font>

448
00:21:58,900 --> 00:22:04,750
chaos mode is<font color="#CCCCCC"> that just switch just</font>

449
00:22:01,720 --> 00:22:07,120
switch<font color="#E5E5E5"> it whenever you</font><font color="#CCCCCC"> can so that we</font>

450
00:22:04,750 --> 00:22:11,200
can<font color="#CCCCCC"> replace</font><font color="#E5E5E5"> the box very easily as you</font>

451
00:22:07,120 --> 00:22:13,689
<font color="#E5E5E5">can see that they place a 78 in the end</font>

452
00:22:11,200 --> 00:22:17,680
<font color="#E5E5E5">that means I try 78 time to reproduce</font>

453
00:22:13,690 --> 00:22:21,070
this<font color="#E5E5E5"> bug</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally I will close I will</font>

454
00:22:17,680 --> 00:22:24,370
produced<font color="#CCCCCC"> the</font><font color="#E5E5E5"> back then I can repay it to</font>

455
00:22:21,070 --> 00:22:29,159
see what's happening<font color="#E5E5E5"> and just</font><font color="#CCCCCC"> type our</font>

456
00:22:24,370 --> 00:22:31,899
replay<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see it</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> shows up</font>

457
00:22:29,160 --> 00:22:38,850
<font color="#E5E5E5">interface that is very similar to gdb</font>

458
00:22:31,900 --> 00:22:42,190
<font color="#E5E5E5">actually I use gdb in the in the hook so</font>

459
00:22:38,850 --> 00:22:46,530
when you replay<font color="#E5E5E5"> the replay the failure</font>

460
00:22:42,190 --> 00:22:49,350
<font color="#CCCCCC">it will pause at the very beginning so</font>

461
00:22:46,530 --> 00:22:51,840
and when you have<font color="#CCCCCC"> si si means</font><font color="#E5E5E5"> continue</font>

462
00:22:49,350 --> 00:22:58,800
<font color="#E5E5E5">if we will just</font><font color="#CCCCCC"> refused back we just</font>

463
00:22:51,840 --> 00:23:05,730
<font color="#CCCCCC">recall so I panic</font><font color="#E5E5E5"> I panic</font>

464
00:22:58,800 --> 00:23:10,080
<font color="#CCCCCC">ly 73 which is which is</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> anna</font><font color="#E5E5E5"> has a</font>

465
00:23:05,730 --> 00:23:13,770
nice it's better to have<font color="#E5E5E5"> no</font><font color="#CCCCCC"> money but it</font>

466
00:23:10,080 --> 00:23:21,240
has 20 so let's check out a transfer

467
00:23:13,770 --> 00:23:25,139
function it turns<font color="#E5E5E5"> out that the value set</font>

468
00:23:21,240 --> 00:23:28,850
here is 20 so we<font color="#E5E5E5"> can add a break point</font>

469
00:23:25,140 --> 00:23:32,780
to the<font color="#E5E5E5"> two that lie that</font><font color="#CCCCCC"> is a</font>

470
00:23:28,850 --> 00:23:37,020
conditional<font color="#E5E5E5"> breakpoint if the remaining</font>

471
00:23:32,780 --> 00:23:40,470
<font color="#E5E5E5">-</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> is equal 20 then break then</font>

472
00:23:37,020 --> 00:23:43,379
stop it I used a special command here is

473
00:23:40,470 --> 00:23:48,320
<font color="#CCCCCC">reversed continue because</font><font color="#E5E5E5"> the program is</font>

474
00:23:43,380 --> 00:23:52,350
panic and we need to reverse<font color="#E5E5E5"> it to the</font>

475
00:23:48,320 --> 00:23:55,560
very point<font color="#E5E5E5"> it just that the very point</font>

476
00:23:52,350 --> 00:23:58,620
error happens so after we<font color="#E5E5E5"> was continue</font>

477
00:23:55,560 --> 00:24:02,970
we see that<font color="#E5E5E5"> fret to hit that very point</font>

478
00:23:58,620 --> 00:24:04,800
<font color="#CCCCCC">and we just</font><font color="#E5E5E5"> enter a empty command which</font>

479
00:24:02,970 --> 00:24:07,170
is repeat last<font color="#E5E5E5"> command just reverse</font>

480
00:24:04,800 --> 00:24:09,389
collinear<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it shows</font><font color="#CCCCCC"> that there's two</font>

481
00:24:07,170 --> 00:24:13,790
frets different<font color="#CCCCCC"> frets he distinct</font><font color="#E5E5E5"> free</font>

482
00:24:09,390 --> 00:24:19,470
point<font color="#E5E5E5"> that means that's the very place</font>

483
00:24:13,790 --> 00:24:23,510
<font color="#CCCCCC">raced</font><font color="#E5E5E5"> risk condition happening</font><font color="#CCCCCC"> that's</font>

484
00:24:19,470 --> 00:24:26,250
how we use our as we just said<font color="#E5E5E5"> that in</font>

485
00:24:23,510 --> 00:24:28,950
emulates<font color="#E5E5E5"> a single call machines so if</font>

486
00:24:26,250 --> 00:24:32,250
you are debugging<font color="#E5E5E5"> a multi if you</font>

487
00:24:28,950 --> 00:24:35,930
debugging a fret<font color="#E5E5E5"> be a precaution</font><font color="#CCCCCC"> if you</font>

488
00:24:32,250 --> 00:24:38,550
have some decrease in performance and

489
00:24:35,930 --> 00:24:40,830
the second limitation is it<font color="#E5E5E5"> only works</font>

490
00:24:38,550 --> 00:24:44,879
on<font color="#E5E5E5"> leanest</font><font color="#CCCCCC"> of course it shouldn't</font><font color="#E5E5E5"> be a</font>

491
00:24:40,830 --> 00:24:47,370
<font color="#E5E5E5">problem at all okay and so if you use</font>

492
00:24:44,880 --> 00:24:50,150
<font color="#CCCCCC">our</font><font color="#E5E5E5"> to debug our prop debug an</font>

493
00:24:47,370 --> 00:24:53,250
application and you find out<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> so and</font>

494
00:24:50,150 --> 00:24:53,990
and you believe<font color="#CCCCCC"> that you fix it for how</font>

495
00:24:53,250 --> 00:24:57,030
to prove it

496
00:24:53,990 --> 00:24:59,720
usually we should we should<font color="#E5E5E5"> write a test</font>

497
00:24:57,030 --> 00:25:02,750
case to to check

498
00:24:59,720 --> 00:25:06,259
<font color="#CCCCCC">to check it will never</font><font color="#E5E5E5"> fail again and to</font>

499
00:25:02,750 --> 00:25:11,059
prevent<font color="#E5E5E5"> is it's bringing back</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> Tony</font><font color="#CCCCCC"> s</font>

500
00:25:06,259 --> 00:25:13,279
technology<font color="#E5E5E5"> in the future but stable test</font>

501
00:25:11,059 --> 00:25:16,090
case can<font color="#CCCCCC"> be hard of course</font><font color="#E5E5E5"> if you are</font>

502
00:25:13,279 --> 00:25:21,620
<font color="#E5E5E5">lucky in love it will be easy</font>

503
00:25:16,090 --> 00:25:24,740
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> someday</font><font color="#E5E5E5"> so to stabilize the back of</font>

504
00:25:21,620 --> 00:25:26,870
you just said we may need<font color="#CCCCCC"> to when we</font>

505
00:25:24,740 --> 00:25:29,179
made a<font color="#E5E5E5"> special</font><font color="#CCCCCC"> scheduled Posse to the</font>

506
00:25:26,870 --> 00:25:31,899
<font color="#CCCCCC">France unfortunately we can't we can't</font>

507
00:25:29,179 --> 00:25:37,190
<font color="#E5E5E5">enjoy this</font><font color="#CCCCCC"> it depends on the operator</font>

508
00:25:31,899 --> 00:25:40,250
operating system so how can we do<font color="#E5E5E5"> it</font><font color="#CCCCCC"> we</font>

509
00:25:37,190 --> 00:25:44,870
write a crate<font color="#E5E5E5"> to to these wings in name</font>

510
00:25:40,250 --> 00:25:47,570
<font color="#CCCCCC">fair is free improvement</font><font color="#E5E5E5"> in rust and the</font>

511
00:25:44,870 --> 00:25:50,389
<font color="#E5E5E5">and this thing is inspired by</font><font color="#CCCCCC"> the</font>

512
00:25:47,570 --> 00:25:52,668
<font color="#CCCCCC">FreeBSD s fair points waste fair point</font>

513
00:25:50,389 --> 00:25:54,559
fair part<font color="#CCCCCC"> Co instrument</font><font color="#E5E5E5"> Co</font>

514
00:25:52,669 --> 00:25:56,629
instrumentations there are<font color="#E5E5E5"> all errors</font>

515
00:25:54,559 --> 00:25:59,840
and other behavior to be injected

516
00:25:56,629 --> 00:26:03,949
dynamically at runtime<font color="#CCCCCC"> that means you</font>

517
00:25:59,840 --> 00:26:07,220
can you can just<font color="#E5E5E5"> use some like you just</font>

518
00:26:03,950 --> 00:26:11,440
<font color="#CCCCCC">you'll use this library</font><font color="#E5E5E5"> to make</font><font color="#CCCCCC"> some</font>

519
00:26:07,220 --> 00:26:14,059
<font color="#E5E5E5">fresh like</font><font color="#CCCCCC"> pause</font><font color="#E5E5E5"> or sleep</font><font color="#CCCCCC"> oh yeah</font>

520
00:26:11,440 --> 00:26:18,320
<font color="#E5E5E5">whenever you want to simulate some</font>

521
00:26:14,059 --> 00:26:21,980
failures<font color="#E5E5E5"> like</font><font color="#CCCCCC"> IO IO failure or Cisco</font>

522
00:26:18,320 --> 00:26:23,658
failure or anything else<font color="#E5E5E5"> and this is the</font>

523
00:26:21,980 --> 00:26:27,200
<font color="#E5E5E5">key hub yeah</font>

524
00:26:23,659 --> 00:26:29,720
<font color="#CCCCCC">welcome to star and so let's see how</font><font color="#E5E5E5"> to</font>

525
00:26:27,200 --> 00:26:32,360
define<font color="#E5E5E5"> finger points there are</font><font color="#CCCCCC"> freeway</font>

526
00:26:29,720 --> 00:26:33,980
<font color="#CCCCCC">there are three</font><font color="#E5E5E5"> methods to define fail</font>

527
00:26:32,360 --> 00:26:37,250
points the first<font color="#E5E5E5"> one is pretty</font><font color="#CCCCCC"> simple</font>

528
00:26:33,980 --> 00:26:41,840
<font color="#E5E5E5">just define a fair point using some</font>

529
00:26:37,250 --> 00:26:43,759
unique name and generally when when

530
00:26:41,840 --> 00:26:46,789
application<font color="#CCCCCC"> right</font><font color="#E5E5E5"> into the fair point</font>

531
00:26:43,759 --> 00:26:50,360
if you just omit the<font color="#E5E5E5"> fair points just</font>

532
00:26:46,789 --> 00:26:53,149
like as if<font color="#CCCCCC"> is never defined</font><font color="#E5E5E5"> and the</font>

533
00:26:50,360 --> 00:26:55,309
second one<font color="#E5E5E5"> there is a caution</font><font color="#CCCCCC"> here and I</font>

534
00:26:53,149 --> 00:26:57,590
will try<font color="#CCCCCC"> to I will talk about</font><font color="#E5E5E5"> it later</font>

535
00:26:55,309 --> 00:27:01,970
<font color="#E5E5E5">because it's used in a very unique case</font>

536
00:26:57,590 --> 00:27:04,610
and the third way is that we condition

537
00:27:01,970 --> 00:27:06,200
in the middle<font color="#E5E5E5"> pace and the condition</font>

538
00:27:04,610 --> 00:27:09,350
means<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> final</font><font color="#E5E5E5"> point we</font><font color="#CCCCCC"> only be</font>

539
00:27:06,200 --> 00:27:11,629
<font color="#CCCCCC">trigger if the condition is true</font><font color="#E5E5E5"> so like</font>

540
00:27:09,350 --> 00:27:13,370
if you<font color="#E5E5E5"> run some test days concurrently</font>

541
00:27:11,629 --> 00:27:16,070
<font color="#E5E5E5">you can just</font>

542
00:27:13,370 --> 00:27:21,669
the<font color="#CCCCCC"> FairPoint</font><font color="#E5E5E5"> say getting fat if the</font>

543
00:27:16,070 --> 00:27:25,550
test is is the specific you want to run

544
00:27:21,670 --> 00:27:27,650
so you<font color="#CCCCCC"> have to fire fair point then how</font>

545
00:27:25,550 --> 00:27:33,020
can you configure the<font color="#E5E5E5"> essence about</font><font color="#CCCCCC"> the</font>

546
00:27:27,650 --> 00:27:35,990
fair points you can you<font color="#E5E5E5"> can do it either</font>

547
00:27:33,020 --> 00:27:39,620
<font color="#CCCCCC">while the environment environment by</font>

548
00:27:35,990 --> 00:27:42,440
ribose<font color="#CCCCCC"> or</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> use using the</font>

549
00:27:39,620 --> 00:27:46,040
interface API interface<font color="#CCCCCC"> input</font><font color="#E5E5E5"> just using</font>

550
00:27:42,440 --> 00:27:48,820
the API and it is quite simple<font color="#CCCCCC"> just a</font>

551
00:27:46,040 --> 00:27:52,909
pair of the name and their essence

552
00:27:48,820 --> 00:27:57,100
essence artifice<font color="#E5E5E5"> in in the</font><font color="#CCCCCC"> in the form X</font>

553
00:27:52,910 --> 00:28:02,000
like this<font color="#E5E5E5"> there can be many actions and</font>

554
00:27:57,100 --> 00:28:04,070
only<font color="#E5E5E5"> only when the first action is not</font>

555
00:28:02,000 --> 00:28:10,100
sugar then the second action will be

556
00:28:04,070 --> 00:28:13,820
<font color="#E5E5E5">sugar and every action is defined as P</font>

557
00:28:10,100 --> 00:28:17,649
and<font color="#E5E5E5"> count and has arguments P means that</font>

558
00:28:13,820 --> 00:28:21,800
the probability<font color="#CCCCCC"> that action is</font><font color="#E5E5E5"> sugar and</font>

559
00:28:17,650 --> 00:28:24,830
<font color="#E5E5E5">the count means that the mass the mass</font>

560
00:28:21,800 --> 00:28:26,389
times<font color="#E5E5E5"> the that</font><font color="#CCCCCC"> huskily basket li and</font>

561
00:28:24,830 --> 00:28:31,939
currently the support need to ask

562
00:28:26,390 --> 00:28:35,300
include this<font color="#E5E5E5"> many I think</font><font color="#CCCCCC"> that has</font><font color="#E5E5E5"> name</font>

563
00:28:31,940 --> 00:28:37,340
is raised<font color="#CCCCCC"> themself we</font><font color="#E5E5E5"> are the only truth</font>

564
00:28:35,300 --> 00:28:40,700
needs to is<font color="#CCCCCC"> very here is the delay and</font>

565
00:28:37,340 --> 00:28:45,649
<font color="#E5E5E5">the sleep delay means that you can just</font>

566
00:28:40,700 --> 00:28:48,770
<font color="#CCCCCC">pause the fret for the given seconds and</font>

567
00:28:45,650 --> 00:28:54,740
delay whilst being the<font color="#CCCCCC"> breath is pacy</font>

568
00:28:48,770 --> 00:28:56,750
<font color="#CCCCCC">waiting so let's let's</font><font color="#E5E5E5"> take a look to</font>

569
00:28:54,740 --> 00:28:59,360
<font color="#E5E5E5">the example about a fair point</font>

570
00:28:56,750 --> 00:29:03,260
configuration<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that the fair</font>

571
00:28:59,360 --> 00:29:07,040
point<font color="#E5E5E5"> has</font><font color="#CCCCCC"> 20% probability</font><font color="#E5E5E5"> to bring a lie</font>

572
00:29:03,260 --> 00:29:11,090
to you alive and<font color="#CCCCCC"> have 80% probability</font><font color="#E5E5E5"> to</font>

573
00:29:07,040 --> 00:29:15,730
just panic if it<font color="#CCCCCC"> prints still alive it</font>

574
00:29:11,090 --> 00:29:15,730
will bring as many as<font color="#CCCCCC"> three</font><font color="#E5E5E5"> times</font>

575
00:29:17,550 --> 00:29:27,899
let's see how to stable the race

576
00:29:20,700 --> 00:29:35,100
condition we just<font color="#E5E5E5"> described here and we</font>

577
00:29:27,900 --> 00:29:46,250
can see<font color="#CCCCCC"> that I define a fair point</font>

578
00:29:35,100 --> 00:29:46,250
oh my god

579
00:29:49,520 --> 00:29:57,810
slow update here because we know that

580
00:29:53,510 --> 00:29:58,590
the race condition is that the<font color="#CCCCCC"> live 40</font>

581
00:29:57,810 --> 00:30:03,830
<font color="#CCCCCC">night</font>

582
00:29:58,590 --> 00:30:10,320
fetch<font color="#E5E5E5"> remaining can be can</font><font color="#CCCCCC"> be built 80</font>

583
00:30:03,830 --> 00:30:12,480
<font color="#CCCCCC">before like 44 so actually we should we</font>

584
00:30:10,320 --> 00:30:15,389
should<font color="#E5E5E5"> hold</font><font color="#CCCCCC"> a lock the hope in the hope</font>

585
00:30:12,480 --> 00:30:25,140
<font color="#E5E5E5">function but it's not so we put a fair</font>

586
00:30:15,390 --> 00:30:30,690
point here<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it sleep 100</font>

587
00:30:25,140 --> 00:30:39,420
milliseconds so that in<font color="#E5E5E5"> general if</font>

588
00:30:30,690 --> 00:30:42,570
there's no bugs in the<font color="#E5E5E5"> kernel France</font>

589
00:30:39,420 --> 00:30:46,290
will all block at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> at this point so</font>

590
00:30:42,570 --> 00:30:49,980
that<font color="#E5E5E5"> the stale read will will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> always</font>

591
00:30:46,290 --> 00:30:52,280
hold so we can run a test<font color="#E5E5E5"> to see how it</font>

592
00:30:49,980 --> 00:30:52,280
happened

593
00:31:10,630 --> 00:31:18,250
I think something to<font color="#E5E5E5"> sell wrong in the</font>

594
00:31:17,470 --> 00:31:32,890
same<font color="#E5E5E5"> to you actually</font>

595
00:31:18,250 --> 00:31:42,970
oh it's not my<font color="#CCCCCC"> computer so yeah</font><font color="#E5E5E5"> okay</font>

596
00:31:32,890 --> 00:31:45,010
<font color="#CCCCCC">okay what they so it works yeah and so</font>

597
00:31:42,970 --> 00:31:48,010
no matter<font color="#CCCCCC"> how many times I try</font><font color="#E5E5E5"> it always</font>

598
00:31:45,010 --> 00:31:50,890
panic<font color="#E5E5E5"> and this is what Bobby wants we</font>

599
00:31:48,010 --> 00:31:54,220
<font color="#CCCCCC">use fail point to make a test stable</font><font color="#E5E5E5"> so</font>

600
00:31:50,890 --> 00:31:57,070
when we fix the fix the chance for it

601
00:31:54,220 --> 00:32:04,750
should<font color="#E5E5E5"> be no panic again but how to fix</font>

602
00:31:57,070 --> 00:32:07,178
it it's beyond<font color="#CCCCCC"> the stock</font><font color="#E5E5E5"> so you how does</font>

603
00:32:04,750 --> 00:32:10,450
<font color="#CCCCCC">fair point work under the hood</font><font color="#E5E5E5"> actually</font>

604
00:32:07,179 --> 00:32:12,580
<font color="#CCCCCC">it</font><font color="#E5E5E5"> will maintain a global registry to</font>

605
00:32:10,450 --> 00:32:15,370
map the<font color="#CCCCCC"> failed point to each</font>

606
00:32:12,580 --> 00:32:17,230
configuration<font color="#E5E5E5"> so every time the film</font>

607
00:32:15,370 --> 00:32:20,168
point is sqt

608
00:32:17,230 --> 00:32:21,820
<font color="#CCCCCC">it will query if if there is any</font>

609
00:32:20,169 --> 00:32:23,890
configuration<font color="#E5E5E5"> for the failure</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> if</font>

610
00:32:21,820 --> 00:32:25,990
it<font color="#E5E5E5"> is if you ask you to the</font>

611
00:32:23,890 --> 00:32:29,140
configuration<font color="#CCCCCC"> if not if you</font><font color="#E5E5E5"> just in</font>

612
00:32:25,990 --> 00:32:31,480
<font color="#E5E5E5">knock so you may wonder that if I</font>

613
00:32:29,140 --> 00:32:33,730
<font color="#CCCCCC">defined so many</font><font color="#E5E5E5"> fair points in my source</font>

614
00:32:31,480 --> 00:32:38,799
code<font color="#CCCCCC"> it may affect</font><font color="#E5E5E5"> the performance of</font>

615
00:32:33,730 --> 00:32:42,039
<font color="#E5E5E5">the application it's true so we offer a</font>

616
00:32:38,799 --> 00:32:45,850
feature gate we offer a feature<font color="#E5E5E5"> car that</font>

617
00:32:42,039 --> 00:32:49,960
can make you<font color="#E5E5E5"> these disabled all the fair</font>

618
00:32:45,850 --> 00:32:51,428
points at compile time<font color="#CCCCCC"> so his</font><font color="#E5E5E5"> is also</font>

619
00:32:49,960 --> 00:32:55,500
<font color="#E5E5E5">one of the</font><font color="#CCCCCC"> Russ</font>

620
00:32:51,429 --> 00:32:55,500
philosophy just pay<font color="#CCCCCC"> for what you use</font>

621
00:32:56,460 --> 00:33:01,330
yeah so it seems<font color="#E5E5E5"> we</font><font color="#CCCCCC"> both</font><font color="#E5E5E5"> timed ourselves</font>

622
00:32:59,650 --> 00:33:04,870
out to<font color="#CCCCCC"> be about twenty minutes and we</font>

623
00:33:01,330 --> 00:33:06,939
were both<font color="#E5E5E5"> about 12 minutes so thank you</font>

624
00:33:04,870 --> 00:33:09,309
<font color="#CCCCCC">very much we we</font><font color="#E5E5E5"> hope to see what you can</font>

625
00:33:06,940 --> 00:33:12,970
build<font color="#E5E5E5"> with our some of</font><font color="#CCCCCC"> these tips and</font>

626
00:33:09,309 --> 00:33:15,639
tools<font color="#CCCCCC"> we're hiring distributed systems</font>

627
00:33:12,970 --> 00:33:20,230
engineers<font color="#E5E5E5"> you can email me if</font><font color="#CCCCCC"> you want a</font>

628
00:33:15,640 --> 00:33:22,299
job<font color="#CCCCCC"> we really like remote people</font><font color="#E5E5E5"> we</font>

629
00:33:20,230 --> 00:33:23,650
really<font color="#E5E5E5"> like open source we like to read</font>

630
00:33:22,299 --> 00:33:28,480
research papers

631
00:33:23,650 --> 00:33:30,310
<font color="#E5E5E5">we</font><font color="#CCCCCC"> write Rusco and C++ we hire anyone</font><font color="#E5E5E5"> we</font>

632
00:33:28,480 --> 00:33:32,530
<font color="#CCCCCC">don't really care</font><font color="#E5E5E5"> what you look like or</font>

633
00:33:30,310 --> 00:33:36,190
<font color="#E5E5E5">how you identify we like creativity</font>

634
00:33:32,530 --> 00:33:37,750
<font color="#E5E5E5">passion and teamwork</font><font color="#CCCCCC"> but we have some</font>

635
00:33:36,190 --> 00:33:40,900
time<font color="#CCCCCC"> for</font><font color="#E5E5E5"> questions we have a whole</font><font color="#CCCCCC"> 10</font>

636
00:33:37,750 --> 00:33:43,000
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> so if you have questions</font><font color="#CCCCCC"> please</font>

637
00:33:40,900 --> 00:33:45,570
ask them<font color="#E5E5E5"> if you have comments we</font><font color="#CCCCCC"> can</font>

638
00:33:43,000 --> 00:33:45,570
talk in<font color="#E5E5E5"> the hall</font>

639
00:33:47,750 --> 00:33:58,140
[Applause]

640
00:34:24,629 --> 00:34:29,168
so the question was<font color="#E5E5E5"> there's some tools</font>

641
00:34:27,339 --> 00:34:32,909
that exists that<font color="#E5E5E5"> will actually mutate</font>

642
00:34:29,168 --> 00:34:35,408
<font color="#E5E5E5">the code to see</font><font color="#CCCCCC"> how robust your code is</font>

643
00:34:32,909 --> 00:34:37,240
<font color="#E5E5E5">those are that sounds really cool I</font>

644
00:34:35,409 --> 00:34:47,470
<font color="#E5E5E5">haven't actually encountered any for</font>

645
00:34:37,239 --> 00:34:49,149
rust<font color="#CCCCCC"> have you okay I think oh I think</font>

646
00:34:47,469 --> 00:34:54,939
that sounds really<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> and I really</font>

647
00:34:49,149 --> 00:34:57,118
<font color="#CCCCCC">want to try</font><font color="#E5E5E5"> that now so thank you</font><font color="#CCCCCC"> more</font>

648
00:34:54,940 --> 00:34:57,119
questions

649
00:35:08,730 --> 00:35:13,839
so the question is is it<font color="#CCCCCC"> easy to</font>

650
00:35:11,589 --> 00:35:16,140
<font color="#CCCCCC">automate some of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> practices that we</font>

651
00:35:13,839 --> 00:35:20,770
talked<font color="#CCCCCC"> about using</font><font color="#E5E5E5"> tools</font>

652
00:35:16,140 --> 00:35:22,480
<font color="#CCCCCC">Clippy will get you quite far as</font><font color="#E5E5E5"> I kind</font>

653
00:35:20,770 --> 00:35:25,329
<font color="#CCCCCC">of</font><font color="#E5E5E5"> discussed at the beginning a lot of</font>

654
00:35:22,480 --> 00:35:28,210
<font color="#E5E5E5">these are trade offs</font><font color="#CCCCCC"> for example if</font>

655
00:35:25,329 --> 00:35:30,579
you're<font color="#CCCCCC"> using some of the into tricks</font><font color="#E5E5E5"> you</font>

656
00:35:28,210 --> 00:35:32,200
<font color="#E5E5E5">should try and minimize their surface so</font>

657
00:35:30,579 --> 00:35:35,529
that<font color="#CCCCCC"> they're only</font><font color="#E5E5E5"> existing in the public</font>

658
00:35:32,200 --> 00:35:38,348
<font color="#CCCCCC">API</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> there is a compile time</font><font color="#E5E5E5"> cost</font>

659
00:35:35,529 --> 00:35:41,710
associated with them<font color="#E5E5E5"> and some of them do</font>

660
00:35:38,349 --> 00:35:43,420
have a small<font color="#CCCCCC"> runtime cost so</font><font color="#E5E5E5"> you do need</font>

661
00:35:41,710 --> 00:35:45,309
<font color="#E5E5E5">to be aware if you're just throwing</font>

662
00:35:43,420 --> 00:35:48,520
these<font color="#E5E5E5"> everywhere you're gonna be paying</font>

663
00:35:45,309 --> 00:35:51,369
<font color="#E5E5E5">for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> so a lot of these work best when</font>

664
00:35:48,520 --> 00:35:54,359
you limit<font color="#E5E5E5"> them only to public API</font><font color="#CCCCCC"> so I</font>

665
00:35:51,369 --> 00:35:57,160
<font color="#CCCCCC">think a lot of tools might not do that</font>

666
00:35:54,359 --> 00:36:00,598
<font color="#E5E5E5">definitely</font><font color="#CCCCCC"> I highly recommend you run</font>

667
00:35:57,160 --> 00:36:00,598
<font color="#CCCCCC">Clippy on every build though</font>

668
00:36:24,170 --> 00:36:30,390
so in Thai KB itself we're currently

669
00:36:27,269 --> 00:36:32,698
using<font color="#E5E5E5"> lib buzzer which does not provide</font>

670
00:36:30,390 --> 00:36:34,709
<font color="#CCCCCC">the same level</font><font color="#E5E5E5"> of abstractions and</font>

671
00:36:32,699 --> 00:36:36,739
tooling so we have to do a lot of

672
00:36:34,709 --> 00:36:39,629
implementation<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> it work properly</font>

673
00:36:36,739 --> 00:36:41,519
<font color="#CCCCCC">it's very</font><font color="#E5E5E5"> useful in tools like databases</font>

674
00:36:39,630 --> 00:36:44,069
though<font color="#E5E5E5"> because</font><font color="#CCCCCC"> when you're storing</font>

675
00:36:41,519 --> 00:36:45,419
arbitrary strings and byte arrays you

676
00:36:44,069 --> 00:36:49,019
need to be very careful you're not

677
00:36:45,420 --> 00:36:51,359
mutating them<font color="#CCCCCC"> certainly they you only</font>

678
00:36:49,019 --> 00:36:54,269
get<font color="#E5E5E5"> so much mileage out of fuzzers</font>

679
00:36:51,359 --> 00:36:56,609
though there are other tools<font color="#CCCCCC"> that you</font>

680
00:36:54,269 --> 00:36:58,288
might want to explore when you're doing

681
00:36:56,609 --> 00:37:01,619
multi-threaded programming such as

682
00:36:58,289 --> 00:37:03,299
namazu which will go and chaotically

683
00:37:01,619 --> 00:37:06,660
change how some of the threads<font color="#E5E5E5"> are</font>

684
00:37:03,299 --> 00:37:10,279
scheduled to<font color="#CCCCCC"> help you find bugs in logic</font>

685
00:37:06,660 --> 00:37:10,279
<font color="#E5E5E5">instead of just in properties</font>

686
00:37:22,859 --> 00:37:29,109
so the question is are<font color="#CCCCCC"> we aware of any</font>

687
00:37:25,800 --> 00:37:32,680
thing<font color="#E5E5E5"> that reads contracts and helps us</font>

688
00:37:29,109 --> 00:37:34,660
<font color="#CCCCCC">define properties automatically</font>

689
00:37:32,680 --> 00:37:37,750
unfortunately<font color="#CCCCCC"> rust does not have</font>

690
00:37:34,660 --> 00:37:41,049
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> whore notation similar to</font>

691
00:37:37,750 --> 00:37:43,300
what you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> find in a DES so it's</font>

692
00:37:41,050 --> 00:37:47,859
kind of hard<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> assumptions about</font>

693
00:37:43,300 --> 00:37:50,350
what<font color="#CCCCCC"> the contracts is are I have seen</font>

694
00:37:47,859 --> 00:37:54,730
some libraries trying to add things<font color="#CCCCCC"> like</font>

695
00:37:50,350 --> 00:37:57,520
<font color="#E5E5E5">contracts to functions</font><font color="#CCCCCC"> but most of them</font>

696
00:37:54,730 --> 00:37:59,800
aren't<font color="#E5E5E5"> really at this stage where I</font>

697
00:37:57,520 --> 00:38:02,859
think<font color="#E5E5E5"> they're kind of usable in</font>

698
00:37:59,800 --> 00:38:05,290
production that's certainly something

699
00:38:02,859 --> 00:38:08,440
<font color="#E5E5E5">that would be very</font><font color="#CCCCCC"> useful to</font><font color="#E5E5E5"> a lot of</font>

700
00:38:05,290 --> 00:38:10,300
<font color="#E5E5E5">people so if anyone's</font><font color="#CCCCCC"> interested in</font>

701
00:38:08,440 --> 00:38:12,570
<font color="#E5E5E5">implementing</font><font color="#CCCCCC"> that please do and</font><font color="#E5E5E5"> tell me</font>

702
00:38:10,300 --> 00:38:12,570
about<font color="#E5E5E5"> it</font>

703
00:38:21,730 --> 00:38:30,320
so the question is how do we choose the

704
00:38:24,470 --> 00:38:32,779
language we use on projects because you

705
00:38:30,320 --> 00:38:37,780
know we are<font color="#CCCCCC"> writing cycle</font><font color="#E5E5E5"> V and actually</font>

706
00:38:32,780 --> 00:38:40,640
we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> in a mo</font><font color="#E5E5E5"> big project is</font><font color="#CCCCCC"> tidy B</font><font color="#E5E5E5"> for</font>

707
00:38:37,780 --> 00:38:44,320
<font color="#CCCCCC">tagowit is the underlying storage for</font>

708
00:38:40,640 --> 00:38:47,540
the tidy B and we want<font color="#E5E5E5"> it to be to be</font>

709
00:38:44,320 --> 00:38:49,430
multi-domestic<font color="#E5E5E5"> for example if actually</font>

710
00:38:47,540 --> 00:38:51,109
it had to be is written in code but<font color="#E5E5E5"> if</font>

711
00:38:49,430 --> 00:38:54,049
we use in<font color="#E5E5E5"> use code</font>

712
00:38:51,109 --> 00:38:57,859
integral<font color="#E5E5E5"> V</font><font color="#CCCCCC"> it has the lightest a problem</font>

713
00:38:54,050 --> 00:39:00,369
and<font color="#CCCCCC"> it's it's combination</font><font color="#E5E5E5"> is his</font>

714
00:38:57,859 --> 00:39:03,380
performance<font color="#CCCCCC"> is not as good as Rus and</font>

715
00:39:00,369 --> 00:39:06,050
also because the storage<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

716
00:39:03,380 --> 00:39:11,780
fundamental of<font color="#E5E5E5"> the database so we</font><font color="#CCCCCC"> want</font>

717
00:39:06,050 --> 00:39:16,119
<font color="#E5E5E5">it to be safe and fast and and that's</font>

718
00:39:11,780 --> 00:39:16,119
why we choose rust<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to give me</font>

719
00:39:17,500 --> 00:39:24,200
yeah I think I think rust<font color="#CCCCCC"> the way that</font>

720
00:39:20,450 --> 00:39:26,020
drop semantics works<font color="#E5E5E5"> is extremely useful</font>

721
00:39:24,200 --> 00:39:29,029
<font color="#CCCCCC">when you need predictable performance</font>

722
00:39:26,020 --> 00:39:33,130
<font color="#CCCCCC">because</font><font color="#E5E5E5"> you always kind of get really</font>

723
00:39:29,030 --> 00:39:33,130
<font color="#E5E5E5">reliable function call runs</font>

724
00:39:53,370 --> 00:39:58,720
so the question is what would<font color="#CCCCCC"> make it</font><font color="#E5E5E5"> so</font>

725
00:39:56,680 --> 00:40:02,980
that<font color="#E5E5E5"> we would choose Russ for writing</font>

726
00:39:58,720 --> 00:40:07,839
<font color="#E5E5E5">teddy be the thing on top</font><font color="#CCCCCC"> of us instead</font>

727
00:40:02,980 --> 00:40:10,840
<font color="#CCCCCC">of go I think we can both</font><font color="#E5E5E5"> agree it would</font>

728
00:40:07,840 --> 00:40:14,200
<font color="#E5E5E5">be it's easier to hire</font><font color="#CCCCCC"> go engineers than</font>

729
00:40:10,840 --> 00:40:16,540
<font color="#E5E5E5">Russ engineers right now particularly in</font>

730
00:40:14,200 --> 00:40:18,700
<font color="#CCCCCC">the</font><font color="#E5E5E5"> distributed system space because a</font>

731
00:40:16,540 --> 00:40:20,410
lot of go engineers are out there

732
00:40:18,700 --> 00:40:22,899
slinging<font color="#E5E5E5"> and distributed systems</font><font color="#CCCCCC"> code</font>

733
00:40:20,410 --> 00:40:29,279
<font color="#CCCCCC">and not a lot of rust people are writing</font>

734
00:40:22,900 --> 00:40:32,110
distributed systems and I would say that

735
00:40:29,280 --> 00:40:34,300
<font color="#E5E5E5">although I</font><font color="#CCCCCC"> don't want to automate it but</font>

736
00:40:32,110 --> 00:40:36,760
go is<font color="#E5E5E5"> really fast about the unrest</font>

737
00:40:34,300 --> 00:40:39,400
<font color="#E5E5E5">because you you don't meet too much</font>

738
00:40:36,760 --> 00:40:42,580
<font color="#E5E5E5">combined</font><font color="#CCCCCC"> Asian</font><font color="#E5E5E5"> errors in go so you can</font>

739
00:40:39,400 --> 00:40:44,350
get things<font color="#E5E5E5"> done very quickly and in the</font>

740
00:40:42,580 --> 00:40:47,710
stokehole area there is many functions

741
00:40:44,350 --> 00:40:51,069
in many other curse that<font color="#CCCCCC"> you need to</font>

742
00:40:47,710 --> 00:40:54,580
keep compatible with my circle so usko

743
00:40:51,070 --> 00:41:03,580
will be a mop a popular choice in in

744
00:40:54,580 --> 00:41:05,640
this case we got time<font color="#E5E5E5"> for maybe two more</font>

745
00:41:03,580 --> 00:41:05,640
<font color="#CCCCCC">questions</font>

746
00:41:07,990 --> 00:41:17,259
I would be<font color="#E5E5E5"> very happy to chat with you</font>

747
00:41:14,710 --> 00:41:19,450
and just give you a huge<font color="#E5E5E5"> list because</font>

748
00:41:17,260 --> 00:41:21,330
like we work on this stuff all day<font color="#E5E5E5"> and</font>

749
00:41:19,450 --> 00:41:23,950
it's our<font color="#CCCCCC"> favorite thing in the world</font>

750
00:41:21,330 --> 00:41:26,589
<font color="#CCCCCC">certainly there's lots of great blogs</font>

751
00:41:23,950 --> 00:41:30,549
out<font color="#E5E5E5"> there you can look at Nick Cameron's</font>

752
00:41:26,589 --> 00:41:32,619
blog<font color="#E5E5E5"> without</font><font color="#CCCCCC"> boat</font><font color="#E5E5E5"> cies blog Aaron</font>

753
00:41:30,550 --> 00:41:34,330
<font color="#CCCCCC">Turin's blog they all talk about a lot</font>

754
00:41:32,619 --> 00:41:35,770
<font color="#E5E5E5">of tools that are coming</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> and they</font>

755
00:41:34,330 --> 00:41:39,580
try and<font color="#E5E5E5"> highlight some really cool</font>

756
00:41:35,770 --> 00:41:44,020
things<font color="#CCCCCC"> but</font><font color="#E5E5E5"> definitely</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> the rust</font>

757
00:41:39,580 --> 00:41:46,420
blogging ecosystem is really really

758
00:41:44,020 --> 00:41:50,050
vibrant<font color="#CCCCCC"> matthias actually runs a great</font>

759
00:41:46,420 --> 00:41:52,030
blog he just presented<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can find</font>

760
00:41:50,050 --> 00:41:57,040
out<font color="#CCCCCC"> I find out most of the cool tech we</font>

761
00:41:52,030 --> 00:41:59,740
find from blogs<font color="#E5E5E5"> and certainly there's a</font>

762
00:41:57,040 --> 00:42:02,259
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> effort right now</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> rust</font>

763
00:41:59,740 --> 00:42:04,810
things and research<font color="#E5E5E5"> papers as you may be</font>

764
00:42:02,260 --> 00:42:06,460
<font color="#CCCCCC">aware</font><font color="#E5E5E5"> there's a Rust Belt project that's</font>

765
00:42:04,810 --> 00:42:08,529
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to formalize rusts and</font><font color="#CCCCCC"> things</font>

766
00:42:06,460 --> 00:42:11,980
like<font color="#E5E5E5"> that and they're discovering a lot</font>

767
00:42:08,530 --> 00:42:13,720
<font color="#CCCCCC">of</font><font color="#E5E5E5"> cool stuff</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do so certainly I</font>

768
00:42:11,980 --> 00:42:16,180
think<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> the most beautiful</font><font color="#CCCCCC"> things</font>

769
00:42:13,720 --> 00:42:18,990
about<font color="#E5E5E5"> Russ is the really heavy research</font>

770
00:42:16,180 --> 00:42:18,990
<font color="#E5E5E5">Bend on it</font>

771
00:42:28,599 --> 00:42:33,199
so the question is does adding a lot of

772
00:42:31,099 --> 00:42:40,180
fail points make it hard<font color="#E5E5E5"> to maintain</font>

773
00:42:33,199 --> 00:42:42,219
your testing suite<font color="#E5E5E5"> yes it does</font>

774
00:42:40,180 --> 00:42:46,428
[Applause]

775
00:42:42,219 --> 00:42:50,660
so actually we use we use<font color="#E5E5E5"> a</font><font color="#CCCCCC"> few</font><font color="#E5E5E5"> point in</font>

776
00:42:46,429 --> 00:42:53,179
production integrity there we we<font color="#E5E5E5"> ask you</font>

777
00:42:50,660 --> 00:42:56,649
all the fair point fair point<font color="#CCCCCC"> asses</font><font color="#E5E5E5"> in</font>

778
00:42:53,179 --> 00:42:59,209
sequence so<font color="#CCCCCC"> there's no racism</font><font color="#E5E5E5"> in</font>

779
00:42:56,650 --> 00:43:01,670
<font color="#E5E5E5">distillation</font><font color="#CCCCCC"> but we are planning</font><font color="#E5E5E5"> a</font>

780
00:42:59,209 --> 00:43:05,448
feature to fail point is that supports

781
00:43:01,670 --> 00:43:07,549
like<font color="#CCCCCC"> contessa where fair points</font><font color="#E5E5E5"> so that</font>

782
00:43:05,449 --> 00:43:09,559
every fair point is bound to specific

783
00:43:07,549 --> 00:43:14,179
test cases so<font color="#CCCCCC"> they can work concurrently</font>

784
00:43:09,559 --> 00:43:16,429
<font color="#CCCCCC">so I think in this case there</font><font color="#E5E5E5"> will be no</font>

785
00:43:14,179 --> 00:43:19,459
more<font color="#CCCCCC"> headache</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> too much fair points</font>

786
00:43:16,429 --> 00:43:24,609
<font color="#CCCCCC">I think this feature will will come</font>

787
00:43:19,459 --> 00:43:27,649
before<font color="#E5E5E5"> the release of 1.0</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> fail fails</font>

788
00:43:24,609 --> 00:43:29,569
so we're at we're at 43 minutes so we

789
00:43:27,650 --> 00:43:31,880
<font color="#CCCCCC">should probably stop it's been a real</font>

790
00:43:29,569 --> 00:43:33,288
pleasure<font color="#E5E5E5"> and we can definitely continue</font>

791
00:43:31,880 --> 00:43:35,350
the conversation to the<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of you</font>

792
00:43:33,289 --> 00:43:42,940
<font color="#E5E5E5">on</font>

793
00:43:35,350 --> 00:43:42,940
[Applause]

