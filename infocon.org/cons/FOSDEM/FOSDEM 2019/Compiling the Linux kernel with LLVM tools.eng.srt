1
00:00:04,620 --> 00:00:11,040
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> hi</font><font color="#E5E5E5"> everyone my</font><font color="#CCCCCC"> name is</font>

2
00:00:08,460 --> 00:00:13,920
<font color="#E5E5E5">Nick</font><font color="#CCCCCC"> I work on the</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> kernel and the</font>

3
00:00:11,040 --> 00:00:14,879
LLVM compiler<font color="#E5E5E5"> project at Google in</font>

4
00:00:13,920 --> 00:00:22,039
Mountain View<font color="#E5E5E5"> California</font>

5
00:00:14,880 --> 00:00:26,330
<font color="#E5E5E5">oh hi my name is Bill and I also work on</font>

6
00:00:22,039 --> 00:00:32,669
Linux but<font color="#E5E5E5"> like I'm the prodigal side and</font>

7
00:00:26,330 --> 00:00:35,790
also with<font color="#E5E5E5"> Ella VM as well so so some</font><font color="#CCCCCC"> of</font>

8
00:00:32,668 --> 00:00:39,779
the goals of this project<font color="#CCCCCC"> I I would say</font>

9
00:00:35,790 --> 00:00:41,550
that<font color="#CCCCCC"> whenever you</font><font color="#E5E5E5"> have a a maybe a</font>

10
00:00:39,780 --> 00:00:43,230
newish compiler<font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> pointing at</font>

11
00:00:41,550 --> 00:00:46,110
<font color="#CCCCCC">at a code base that hasn't used</font><font color="#E5E5E5"> that</font>

12
00:00:43,230 --> 00:00:48,180
compiler before<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of both the</font>

13
00:00:46,110 --> 00:00:51,149
compiler and the<font color="#E5E5E5"> code base stand to</font>

14
00:00:48,180 --> 00:00:52,680
benefit<font color="#CCCCCC"> from that so on the on the</font>

15
00:00:51,149 --> 00:00:54,270
source side<font color="#CCCCCC"> of things</font>

16
00:00:52,680 --> 00:00:56,579
the latest kernel benefits by getting

17
00:00:54,270 --> 00:00:58,379
kind of<font color="#E5E5E5"> an additional warning coverage</font><font color="#CCCCCC"> I</font>

18
00:00:56,579 --> 00:01:00,870
<font color="#E5E5E5">I would say</font><font color="#CCCCCC"> there's there's quite a few</font>

19
00:00:58,379 --> 00:01:03,059
patches<font color="#E5E5E5"> that we've sent as far as just</font>

20
00:01:00,870 --> 00:01:04,550
<font color="#E5E5E5">trying to drive the warning count when</font>

21
00:01:03,059 --> 00:01:07,470
compiling the kernel was clang<font color="#E5E5E5"> to zero</font>

22
00:01:04,550 --> 00:01:09,929
<font color="#E5E5E5">so we're still have work</font><font color="#CCCCCC"> to do there but</font>

23
00:01:07,470 --> 00:01:12,330
but we've already up streamed<font color="#CCCCCC"> over like</font>

24
00:01:09,929 --> 00:01:14,789
a few hundreds of patches related to

25
00:01:12,330 --> 00:01:17,789
<font color="#E5E5E5">that trying to reduce undefined behavior</font>

26
00:01:14,789 --> 00:01:20,520
<font color="#E5E5E5">in in the kernel there's there's not a</font>

27
00:01:17,789 --> 00:01:24,660
large<font color="#E5E5E5"> amount</font><font color="#CCCCCC"> of it but there's a lot of</font>

28
00:01:20,520 --> 00:01:26,429
<font color="#E5E5E5">code so you always have</font><font color="#CCCCCC"> issues there the</font>

29
00:01:24,660 --> 00:01:27,959
earlier talk on static analysis is

30
00:01:26,429 --> 00:01:29,490
actually<font color="#CCCCCC"> kind of why I</font><font color="#E5E5E5"> got into this</font>

31
00:01:27,959 --> 00:01:31,099
<font color="#E5E5E5">whole project was I was</font><font color="#CCCCCC"> just trying to</font>

32
00:01:29,490 --> 00:01:33,240
<font color="#E5E5E5">run scan build on the compiler</font>

33
00:01:31,099 --> 00:01:35,280
unfortunately static analysis needs to

34
00:01:33,240 --> 00:01:37,470
know<font color="#E5E5E5"> like what how exactly are</font><font color="#CCCCCC"> things</font>

35
00:01:35,280 --> 00:01:40,470
defined via the pre preprocessor and

36
00:01:37,470 --> 00:01:44,009
what symbols get included or<font color="#E5E5E5"> not via</font>

37
00:01:40,470 --> 00:01:45,630
like -<font color="#E5E5E5"> D flags and stuff and so you kind</font>

38
00:01:44,009 --> 00:01:48,330
of<font color="#E5E5E5"> basically need</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to compile</font>

39
00:01:45,630 --> 00:01:50,818
the<font color="#E5E5E5"> source code</font><font color="#CCCCCC"> in the first place</font><font color="#E5E5E5"> - to</font>

40
00:01:48,330 --> 00:01:53,399
do then the static<font color="#E5E5E5"> analysis</font>

41
00:01:50,819 --> 00:01:55,440
<font color="#E5E5E5">so I basically got into this rabbit</font><font color="#CCCCCC"> hole</font>

42
00:01:53,399 --> 00:01:56,759
of<font color="#E5E5E5"> okay well let's get it building first</font>

43
00:01:55,440 --> 00:01:59,009
and then we can go do the static

44
00:01:56,759 --> 00:02:00,239
analysis later<font color="#E5E5E5"> so maybe at some</font><font color="#CCCCCC"> point in</font>

45
00:01:59,009 --> 00:02:02,550
the<font color="#E5E5E5"> future I'll be able to revisit that</font>

46
00:02:00,239 --> 00:02:04,470
<font color="#CCCCCC">but some of the others stuff I'm really</font>

47
00:02:02,550 --> 00:02:06,390
<font color="#E5E5E5">excited about is kind of the thread</font>

48
00:02:04,470 --> 00:02:09,538
safety annotations we use quite<font color="#E5E5E5"> heavily</font>

49
00:02:06,390 --> 00:02:13,379
<font color="#E5E5E5">in Google 3 C++ code for kind</font><font color="#CCCCCC"> of</font>

50
00:02:09,538 --> 00:02:14,670
statically verifying thread safety<font color="#E5E5E5"> you</font>

51
00:02:13,379 --> 00:02:16,560
<font color="#E5E5E5">can kind of annotate</font><font color="#CCCCCC"> your code and say</font>

52
00:02:14,670 --> 00:02:18,420
like<font color="#E5E5E5"> you must acquire this mutex or</font>

53
00:02:16,560 --> 00:02:20,310
these mutexes in this order

54
00:02:18,420 --> 00:02:23,040
to protect<font color="#E5E5E5"> these members</font><font color="#CCCCCC"> of the struct</font>

55
00:02:20,310 --> 00:02:25,980
<font color="#E5E5E5">or 0.2 values and stuff like that</font>

56
00:02:23,040 --> 00:02:27,720
otherwise the dynamic analysis via like

57
00:02:25,980 --> 00:02:29,970
address sanitizer<font color="#E5E5E5"> undefined behavior</font>

58
00:02:27,720 --> 00:02:31,950
sanitizer<font color="#CCCCCC"> or thread sanitizer all have</font>

59
00:02:29,970 --> 00:02:34,160
kernel<font color="#E5E5E5"> variants as well</font><font color="#CCCCCC"> that are</font>

60
00:02:31,950 --> 00:02:37,170
implemented in<font color="#E5E5E5"> LOM are really nice</font>

61
00:02:34,160 --> 00:02:40,079
<font color="#CCCCCC">there's some some cool new newish stuff</font>

62
00:02:37,170 --> 00:02:41,700
that we're looking<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do in the kernel</font><font color="#CCCCCC"> a</font>

63
00:02:40,080 --> 00:02:43,290
lot of<font color="#E5E5E5"> issues we're still working</font>

64
00:02:41,700 --> 00:02:45,420
through a<font color="#CCCCCC"> lot of them</font><font color="#E5E5E5"> but things like</font>

65
00:02:43,290 --> 00:02:49,019
link time optimization<font color="#CCCCCC"> and even lately</font>

66
00:02:45,420 --> 00:02:51,780
there's been<font color="#E5E5E5"> some research kind</font><font color="#CCCCCC"> of post</font>

67
00:02:49,020 --> 00:02:53,430
<font color="#E5E5E5">link optimization stuff that that</font><font color="#CCCCCC"> we're</font>

68
00:02:51,780 --> 00:02:56,910
playing<font color="#E5E5E5"> around with a little bit</font><font color="#CCCCCC"> on our</font>

69
00:02:53,430 --> 00:02:58,320
<font color="#E5E5E5">kernels and and ideally we want to lower</font>

70
00:02:56,910 --> 00:03:00,780
the switching<font color="#E5E5E5"> cost between compilers</font>

71
00:02:58,320 --> 00:03:02,130
right just like going<font color="#E5E5E5"> back to economics</font>

72
00:03:00,780 --> 00:03:04,770
<font color="#CCCCCC">right you have this like notion of</font>

73
00:03:02,130 --> 00:03:07,890
substitute<font color="#CCCCCC"> Goods and in order</font><font color="#E5E5E5"> to kind of</font>

74
00:03:04,770 --> 00:03:09,690
have substitute compilers<font color="#CCCCCC"> you need to</font>

75
00:03:07,890 --> 00:03:12,029
lower the<font color="#E5E5E5"> friction</font><font color="#CCCCCC"> between swapping them</font>

76
00:03:09,690 --> 00:03:13,650
in and out right and so that<font color="#CCCCCC"> kind of</font>

77
00:03:12,030 --> 00:03:16,470
puts<font color="#E5E5E5"> this constraint on clang that it</font>

78
00:03:13,650 --> 00:03:20,940
needs<font color="#E5E5E5"> to compile almost the same code as</font>

79
00:03:16,470 --> 00:03:22,739
GCC<font color="#CCCCCC"> now</font><font color="#E5E5E5"> exactly but you kind of can't</font>

80
00:03:20,940 --> 00:03:24,510
even compete<font color="#CCCCCC"> you can't come</font><font color="#E5E5E5"> to the table</font>

81
00:03:22,739 --> 00:03:26,459
<font color="#E5E5E5">unless you can compile the same code so</font>

82
00:03:24,510 --> 00:03:28,170
if we can lower the<font color="#CCCCCC"> cost</font><font color="#E5E5E5"> of switching</font>

83
00:03:26,459 --> 00:03:30,390
compilers that<font color="#E5E5E5"> makes it easy for</font><font color="#CCCCCC"> other</font>

84
00:03:28,170 --> 00:03:32,399
people<font color="#CCCCCC"> to then like report bugs and the</font>

85
00:03:30,390 --> 00:03:33,929
compiler and try<font color="#CCCCCC"> things out and</font><font color="#E5E5E5"> see how</font>

86
00:03:32,400 --> 00:03:37,260
<font color="#E5E5E5">it works for them</font>

87
00:03:33,930 --> 00:03:39,450
for improving<font color="#CCCCCC"> LLVM we basically have a</font>

88
00:03:37,260 --> 00:03:41,070
whole brand new customer to both give us

89
00:03:39,450 --> 00:03:43,048
kind<font color="#E5E5E5"> of feature requests and help us</font>

90
00:03:41,070 --> 00:03:45,030
figure<font color="#E5E5E5"> out what features were missing</font>

91
00:03:43,049 --> 00:03:50,700
from<font color="#E5E5E5"> either the the</font><font color="#CCCCCC"> C language standard</font>

92
00:03:45,030 --> 00:03:52,260
<font color="#E5E5E5">or the various</font><font color="#CCCCCC"> canoe extensions we can't</font>

93
00:03:50,700 --> 00:03:54,208
compete with GCC if we can't<font color="#E5E5E5"> build the</font>

94
00:03:52,260 --> 00:03:56,609
same code<font color="#E5E5E5"> kind of thing so that that's</font>

95
00:03:54,209 --> 00:03:58,290
kind of<font color="#E5E5E5"> a non-starter</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then finally</font>

96
00:03:56,610 --> 00:03:59,519
just having more<font color="#E5E5E5"> and more code to throw</font>

97
00:03:58,290 --> 00:04:03,179
at your compiler helps you find<font color="#E5E5E5"> more</font>

98
00:03:59,519 --> 00:04:05,820
compiler bugs<font color="#CCCCCC"> so some of</font><font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that</font>

99
00:04:03,180 --> 00:04:07,620
we're<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to do is actually create</font>

100
00:04:05,820 --> 00:04:12,090
<font color="#E5E5E5">Linux distributions</font><font color="#CCCCCC"> that are entirely</font>

101
00:04:07,620 --> 00:04:13,920
built with clang and<font color="#CCCCCC"> LLVM so</font><font color="#E5E5E5"> Android is</font>

102
00:04:12,090 --> 00:04:15,510
in the process<font color="#CCCCCC"> of moving</font><font color="#E5E5E5"> there if you</font>

103
00:04:13,920 --> 00:04:18,779
have like a pixel phone those are

104
00:04:15,510 --> 00:04:23,580
already<font color="#CCCCCC"> all entirely built with with</font>

105
00:04:18,779 --> 00:04:25,349
with clang<font color="#E5E5E5"> even the kernel</font><font color="#CCCCCC"> so we're in</font>

106
00:04:23,580 --> 00:04:26,580
the process<font color="#CCCCCC"> working with Android OMS</font><font color="#E5E5E5"> and</font>

107
00:04:25,350 --> 00:04:29,940
vendors now on<font color="#E5E5E5"> getting the whole</font>

108
00:04:26,580 --> 00:04:32,698
ecosystem moved over to clang built

109
00:04:29,940 --> 00:04:35,840
kernels as well<font color="#CCCCCC"> chrome OS</font>

110
00:04:32,699 --> 00:04:40,110
is entirely all<font color="#CCCCCC"> cladding built as well</font>

111
00:04:35,840 --> 00:04:42,239
<font color="#E5E5E5">open</font><font color="#CCCCCC"> Mandriva is more of more I guess</font>

112
00:04:40,110 --> 00:04:43,800
traditional Linux packages and is the

113
00:04:42,240 --> 00:04:45,300
<font color="#CCCCCC">product working through trying to get</font>

114
00:04:43,800 --> 00:04:48,960
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> that code poured it over and</font>

115
00:04:45,300 --> 00:04:50,040
buildable<font color="#E5E5E5"> with clang</font><font color="#CCCCCC"> and then Bill will</font>

116
00:04:48,960 --> 00:04:51,299
talk a little<font color="#E5E5E5"> bit about some of the work</font>

117
00:04:50,040 --> 00:04:52,830
he's been<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Google's production</font>

118
00:04:51,300 --> 00:04:55,400
servers that are serving<font color="#E5E5E5"> your traffic</font>

119
00:04:52,830 --> 00:04:58,710
<font color="#E5E5E5">when you visit various Google properties</font>

120
00:04:55,400 --> 00:05:00,989
<font color="#CCCCCC">so their earliest history I could</font><font color="#E5E5E5"> find</font>

121
00:04:58,710 --> 00:05:03,599
was there's a<font color="#E5E5E5"> project</font><font color="#CCCCCC"> called lll project</font>

122
00:05:00,990 --> 00:05:05,250
that has a few commits<font color="#E5E5E5"> in 2011 I don't</font>

123
00:05:03,600 --> 00:05:07,380
really know too much<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> but that's</font>

124
00:05:05,250 --> 00:05:09,600
like some proof<font color="#CCCCCC"> that someone</font><font color="#E5E5E5"> here was</font>

125
00:05:07,380 --> 00:05:11,580
trying<font color="#CCCCCC"> to build the Linux kernel with</font>

126
00:05:09,600 --> 00:05:13,949
clang so they have patches<font color="#E5E5E5"> on</font><font color="#CCCCCC"> top</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a26</font>

127
00:05:11,580 --> 00:05:16,919
kernel which<font color="#E5E5E5"> is like I don't know</font>

128
00:05:13,949 --> 00:05:20,370
ancient<font color="#E5E5E5"> history</font><font color="#CCCCCC"> to me</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of thing then</font>

129
00:05:16,919 --> 00:05:22,729
<font color="#E5E5E5">from 2012</font><font color="#CCCCCC"> to 2016 was the LLVM linux</font>

130
00:05:20,370 --> 00:05:25,830
project<font color="#E5E5E5"> they have</font><font color="#CCCCCC"> a large set of patches</font>

131
00:05:22,729 --> 00:05:26,880
<font color="#CCCCCC">that they that is actually a lot of the</font>

132
00:05:25,830 --> 00:05:28,710
work that<font color="#CCCCCC"> I started doing was</font><font color="#E5E5E5"> kind of</font>

133
00:05:26,880 --> 00:05:30,870
<font color="#E5E5E5">based like finding their patches and</font>

134
00:05:28,710 --> 00:05:33,570
applying those rebasing them cleaning

135
00:05:30,870 --> 00:05:37,229
them up<font color="#E5E5E5"> and then in the process</font><font color="#CCCCCC"> kind of</font>

136
00:05:33,570 --> 00:05:38,400
up<font color="#E5E5E5"> streaming them as well</font><font color="#CCCCCC"> and and they</font>

137
00:05:37,229 --> 00:05:41,130
did a lot<font color="#E5E5E5"> of good</font><font color="#CCCCCC"> they did a lot of</font>

138
00:05:38,400 --> 00:05:43,919
<font color="#E5E5E5">really good work</font><font color="#CCCCCC"> and found</font><font color="#E5E5E5"> a lot of kind</font>

139
00:05:41,130 --> 00:05:45,930
<font color="#CCCCCC">of standing issues in clang and LVM</font><font color="#E5E5E5"> I</font>

140
00:05:43,919 --> 00:05:48,599
think part of the<font color="#CCCCCC"> issue that</font><font color="#E5E5E5"> that they</font>

141
00:05:45,930 --> 00:05:51,450
were having<font color="#E5E5E5"> was both up streaming of</font>

142
00:05:48,599 --> 00:05:53,520
patches into<font color="#E5E5E5"> the the kernel itself</font><font color="#CCCCCC"> and</font>

143
00:05:51,450 --> 00:05:58,380
then also getting fixes in on the clang

144
00:05:53,520 --> 00:06:01,349
and<font color="#CCCCCC"> LVM side of things so around 2016 my</font>

145
00:05:58,380 --> 00:06:03,150
coworker<font color="#CCCCCC"> Greg Hackman and</font><font color="#E5E5E5"> I were looking</font>

146
00:06:01,349 --> 00:06:04,800
<font color="#E5E5E5">into kind of getting this up and running</font>

147
00:06:03,150 --> 00:06:06,419
<font color="#CCCCCC">on the on the Google pixel right</font><font color="#E5E5E5"> I was</font>

148
00:06:04,800 --> 00:06:11,520
looking into<font color="#E5E5E5"> it for stack analysis of</font>

149
00:06:06,419 --> 00:06:13,500
the kernels<font color="#CCCCCC"> and around that</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> Greg</font>

150
00:06:11,520 --> 00:06:14,760
came<font color="#E5E5E5"> to me it was like hey I got this</font>

151
00:06:13,500 --> 00:06:16,470
like up and running like it's building

152
00:06:14,760 --> 00:06:19,289
<font color="#CCCCCC">can you test and see if</font><font color="#E5E5E5"> it's booting</font>

153
00:06:16,470 --> 00:06:22,380
<font color="#E5E5E5">kind of thing and at that same time I</font>

154
00:06:19,289 --> 00:06:26,190
noticed<font color="#CCCCCC"> matthias kalki on the</font><font color="#E5E5E5"> chrome OS</font>

155
00:06:22,380 --> 00:06:28,349
kernel<font color="#E5E5E5"> team submitting fixes upstream to</font>

156
00:06:26,190 --> 00:06:30,300
<font color="#CCCCCC">l kml for like fixing warnings reported</font>

157
00:06:28,349 --> 00:06:32,370
by clang<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> i kind of went</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> to</font>

158
00:06:30,300 --> 00:06:33,930
<font color="#CCCCCC">Mattias and and showed him like what we</font>

159
00:06:32,370 --> 00:06:35,430
were trying<font color="#CCCCCC"> to do and then</font><font color="#E5E5E5"> we started</font>

160
00:06:33,930 --> 00:06:37,650
<font color="#CCCCCC">kind of collaborating on this stuff and</font>

161
00:06:35,430 --> 00:06:38,460
and we kind<font color="#E5E5E5"> of figured out</font><font color="#CCCCCC"> like hey you</font>

162
00:06:37,650 --> 00:06:40,020
know there's a lot<font color="#E5E5E5"> of really good</font>

163
00:06:38,460 --> 00:06:42,090
patches from<font color="#E5E5E5"> the LOV M</font><font color="#CCCCCC"> Linux project</font><font color="#E5E5E5"> we</font>

164
00:06:40,020 --> 00:06:43,109
should actually get those<font color="#E5E5E5"> up streamed or</font>

165
00:06:42,090 --> 00:06:45,090
work through whatever<font color="#CCCCCC"> issue is up</font>

166
00:06:43,110 --> 00:06:46,050
shooting maintainer<font color="#CCCCCC"> x' have and get</font><font color="#E5E5E5"> that</font>

167
00:06:45,090 --> 00:06:47,549
all up and<font color="#CCCCCC"> running so we</font>

168
00:06:46,050 --> 00:06:50,310
we had it up and running for a pixel<font color="#E5E5E5"> one</font>

169
00:06:47,550 --> 00:06:52,379
<font color="#E5E5E5">but due to the way feature releases and</font>

170
00:06:50,310 --> 00:06:54,389
product cycles work<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were asked to</font>

171
00:06:52,379 --> 00:06:55,949
<font color="#E5E5E5">kind of like give it more soak time so</font>

172
00:06:54,389 --> 00:06:58,020
we ended up shipping<font color="#E5E5E5"> it in pixel to was</font>

173
00:06:55,949 --> 00:07:01,530
the first device<font color="#CCCCCC"> I think we</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> Clank</font>

174
00:06:58,020 --> 00:07:04,620
<font color="#E5E5E5">for to build the full is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> arm 64</font>

175
00:07:01,530 --> 00:07:08,789
<font color="#E5E5E5">Linux kernel for that</font><font color="#CCCCCC"> so that was the</font>

176
00:07:04,620 --> 00:07:10,590
first<font color="#E5E5E5"> one then</font><font color="#CCCCCC"> 2018</font><font color="#E5E5E5"> Chrome OS this in</font>

177
00:07:08,789 --> 00:07:12,509
the I have two<font color="#CCCCCC"> links in there the first</font>

178
00:07:10,590 --> 00:07:14,638
ones like I<font color="#CCCCCC"> think in March was they</font>

179
00:07:12,509 --> 00:07:18,000
started flipping it on for their<font color="#E5E5E5"> various</font>

180
00:07:14,639 --> 00:07:20,690
LTS kernels<font color="#CCCCCC"> and then by October flipped</font>

181
00:07:18,000 --> 00:07:22,889
it to<font color="#E5E5E5"> be the default compiler so all all</font>

182
00:07:20,690 --> 00:07:27,330
<font color="#CCCCCC">kernels going forward for Chrome OS are</font>

183
00:07:22,889 --> 00:07:29,789
built with clang as well<font color="#E5E5E5"> in 2018 for</font>

184
00:07:27,330 --> 00:07:31,530
pixel<font color="#CCCCCC"> three</font><font color="#E5E5E5"> we got</font><font color="#CCCCCC"> LTI working in the</font>

185
00:07:29,789 --> 00:07:34,800
kernel<font color="#E5E5E5"> and then control flow integrity</font>

186
00:07:31,530 --> 00:07:38,638
analysis up and running<font color="#E5E5E5"> that</font><font color="#CCCCCC"> CFI helps</font>

187
00:07:34,800 --> 00:07:42,509
with<font color="#E5E5E5"> trying to prevent</font><font color="#CCCCCC"> rock chains in</font>

188
00:07:38,639 --> 00:07:45,509
the kernel and<font color="#CCCCCC"> then so 2019 what are we</font>

189
00:07:42,509 --> 00:07:47,340
what are we<font color="#E5E5E5"> working on I would say</font><font color="#CCCCCC"> LOD</font>

190
00:07:45,509 --> 00:07:49,969
support is is<font color="#E5E5E5"> imminent at least for arm</font>

191
00:07:47,340 --> 00:07:52,948
64 on my day<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> flying out here</font>

192
00:07:49,969 --> 00:07:54,240
<font color="#CCCCCC">project manager was kind</font><font color="#E5E5E5"> of bashing me</font>

193
00:07:52,949 --> 00:07:55,919
over the head saying like how<font color="#E5E5E5"> come these</font>

194
00:07:54,240 --> 00:07:57,569
patches<font color="#E5E5E5"> aren't in yet and I'm like oh I</font>

195
00:07:55,919 --> 00:07:58,680
gotta clean up<font color="#E5E5E5"> the commit messages and</font>

196
00:07:57,569 --> 00:08:00,150
you know there's still some work<font color="#E5E5E5"> I</font><font color="#CCCCCC"> need</font>

197
00:07:58,680 --> 00:08:01,949
to<font color="#E5E5E5"> do to properly kind of upstream them</font>

198
00:08:00,150 --> 00:08:04,109
and get them reviewed properly kind of

199
00:08:01,949 --> 00:08:06,029
thing<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> know there it's there it's</font>

200
00:08:04,110 --> 00:08:08,520
working a little<font color="#CCCCCC"> bit more work for x86</font>

201
00:08:06,029 --> 00:08:11,009
but arm 64 is ready to go

202
00:08:08,520 --> 00:08:13,650
Azzam go to the patches<font color="#E5E5E5"> are are posted</font>

203
00:08:11,009 --> 00:08:16,849
is this is a feature that's used in in

204
00:08:13,650 --> 00:08:20,159
the<font color="#E5E5E5"> Linux kernel x86 kind of requires it</font>

205
00:08:16,849 --> 00:08:22,080
<font color="#CCCCCC">so support patches up are</font><font color="#E5E5E5"> up for both</font>

206
00:08:20,159 --> 00:08:23,729
the clang side the<font color="#E5E5E5"> LLVM side</font><font color="#CCCCCC"> I have been</font>

207
00:08:22,080 --> 00:08:26,370
hammering on them non-stop<font color="#E5E5E5"> in the past</font>

208
00:08:23,729 --> 00:08:28,258
two weeks<font color="#CCCCCC"> using C</font><font color="#E5E5E5"> reduce I'll talk about</font>

209
00:08:26,370 --> 00:08:29,430
<font color="#CCCCCC">later</font><font color="#E5E5E5"> to basically find bugs in the</font>

210
00:08:28,259 --> 00:08:31,379
implementation<font color="#E5E5E5"> and make sure we have a</font>

211
00:08:29,430 --> 00:08:34,169
high<font color="#CCCCCC"> quality implementation before it</font>

212
00:08:31,379 --> 00:08:37,440
lands<font color="#E5E5E5"> in a bug free one I would say</font>

213
00:08:34,169 --> 00:08:39,689
clangs integrated assembler so<font color="#CCCCCC"> LVM tools</font>

214
00:08:37,440 --> 00:08:41,550
right has a<font color="#CCCCCC"> alluvium has a lot of kind</font>

215
00:08:39,690 --> 00:08:43,769
of substitutes<font color="#E5E5E5"> not just for the compiler</font>

216
00:08:41,549 --> 00:08:46,260
<font color="#CCCCCC">GCC</font><font color="#E5E5E5"> but also for bin utils so the</font>

217
00:08:43,769 --> 00:08:48,060
assembler<font color="#CCCCCC"> and the linker and an M and</font>

218
00:08:46,260 --> 00:08:51,149
<font color="#CCCCCC">Reed elf</font><font color="#E5E5E5"> and all these other like</font><font color="#CCCCCC"> hobbs</font>

219
00:08:48,060 --> 00:08:52,709
<font color="#CCCCCC">to</font><font color="#E5E5E5"> labs dumb strip kind of thing</font><font color="#CCCCCC"> so</font>

220
00:08:51,149 --> 00:08:54,510
there's definitely a long tail of all

221
00:08:52,709 --> 00:08:55,770
the tools I<font color="#E5E5E5"> would say integrated</font>

222
00:08:54,510 --> 00:08:58,230
<font color="#E5E5E5">assembler</font><font color="#CCCCCC"> is the one I'm most</font><font color="#E5E5E5"> worried</font>

223
00:08:55,770 --> 00:08:59,410
about<font color="#E5E5E5"> I think has basically the longest</font>

224
00:08:58,230 --> 00:09:01,420
tail things

225
00:08:59,410 --> 00:09:03,279
that we need<font color="#CCCCCC"> we're in the process</font><font color="#E5E5E5"> moving</font>

226
00:09:01,420 --> 00:09:05,378
<font color="#E5E5E5">all of Android over I'm working with</font>

227
00:09:03,279 --> 00:09:06,459
OEMs on issues<font color="#E5E5E5"> that they're seeing with</font>

228
00:09:05,379 --> 00:09:08,230
<font color="#E5E5E5">it</font>

229
00:09:06,459 --> 00:09:10,569
<font color="#CCCCCC">prod</font><font color="#E5E5E5"> kernel which bill will talk a</font>

230
00:09:08,230 --> 00:09:12,519
<font color="#E5E5E5">little bit</font><font color="#CCCCCC"> more about</font><font color="#E5E5E5"> part the other</font>

231
00:09:10,569 --> 00:09:15,670
part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> CFI is</font><font color="#E5E5E5"> shadow call stack is</font>

232
00:09:12,519 --> 00:09:17,860
another part of the<font color="#CCCCCC"> rap chain prevention</font>

233
00:09:15,670 --> 00:09:20,319
third safety<font color="#E5E5E5"> analysis trying to get an</font>

234
00:09:17,860 --> 00:09:21,519
intern this summer to help<font color="#E5E5E5"> out see if we</font>

235
00:09:20,319 --> 00:09:23,410
can get this<font color="#CCCCCC"> working in the kernel</font>

236
00:09:21,519 --> 00:09:24,939
<font color="#CCCCCC">because that would be nice a lot of the</font>

237
00:09:23,410 --> 00:09:27,069
bugs that<font color="#CCCCCC"> I was fixing when I worked</font>

238
00:09:24,939 --> 00:09:30,459
primarily<font color="#E5E5E5"> on the Nexus and pixel kernel</font>

239
00:09:27,069 --> 00:09:34,449
team<font color="#CCCCCC"> came down</font><font color="#E5E5E5"> to like concurrency bugs</font>

240
00:09:30,459 --> 00:09:37,660
<font color="#E5E5E5">in third-party drivers</font><font color="#CCCCCC"> auto</font><font color="#E5E5E5"> FTO is kind</font>

241
00:09:34,449 --> 00:09:40,180
<font color="#CCCCCC">of like the next generation of pgo we</font>

242
00:09:37,660 --> 00:09:44,319
want to do kind<font color="#E5E5E5"> of low overhead sampling</font>

243
00:09:40,180 --> 00:09:47,800
<font color="#E5E5E5">for</font><font color="#CCCCCC"> arm that requires ETM or on x86 it's</font>

244
00:09:44,319 --> 00:09:48,939
last branch records<font color="#CCCCCC"> then bolt is like</font>

245
00:09:47,800 --> 00:09:50,949
this cool thing<font color="#CCCCCC"> that just</font><font color="#E5E5E5"> came out of</font>

246
00:09:48,939 --> 00:09:52,870
<font color="#CCCCCC">Facebook research</font><font color="#E5E5E5"> is post link</font>

247
00:09:50,949 --> 00:09:54,189
optimization there's some other<font color="#CCCCCC"> things</font>

248
00:09:52,870 --> 00:09:56,439
people are<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> trying to see can we</font>

249
00:09:54,189 --> 00:09:57,879
<font color="#CCCCCC">move that</font><font color="#E5E5E5"> into the compiler or</font><font color="#CCCCCC"> does it</font>

250
00:09:56,439 --> 00:09:59,949
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be like done after the link</font>

251
00:09:57,879 --> 00:10:01,509
stage and one of the<font color="#E5E5E5"> issues there and</font>

252
00:09:59,949 --> 00:10:03,758
<font color="#E5E5E5">then trying to trying to get clang</font>

253
00:10:01,509 --> 00:10:06,220
integrated into the upstream<font color="#E5E5E5"> Linux</font>

254
00:10:03,759 --> 00:10:09,040
kernel continuous integrations<font color="#CCCCCC"> system so</font>

255
00:10:06,220 --> 00:10:10,810
kernel CI<font color="#CCCCCC"> I would say support</font><font color="#E5E5E5"> for clang</font>

256
00:10:09,040 --> 00:10:12,130
is imminent<font color="#E5E5E5"> they just really are</font>

257
00:10:10,810 --> 00:10:14,229
<font color="#CCCCCC">connected it to</font><font color="#E5E5E5"> support multiple</font>

258
00:10:12,130 --> 00:10:15,759
different<font color="#E5E5E5"> compilers in order to report</font>

259
00:10:14,230 --> 00:10:18,100
bugs or regressions in different

260
00:10:15,759 --> 00:10:19,870
<font color="#E5E5E5">versions of GCC and then for them now</font>

261
00:10:18,100 --> 00:10:22,810
<font color="#CCCCCC">it's generic</font><font color="#E5E5E5"> enough to just add clang to</font>

262
00:10:19,870 --> 00:10:25,240
it<font color="#CCCCCC"> zero-day</font><font color="#E5E5E5"> bot we were like this</font><font color="#CCCCCC"> close</font>

263
00:10:22,810 --> 00:10:26,709
from<font color="#E5E5E5"> getting it integrated and then x86</font>

264
00:10:25,240 --> 00:10:28,689
<font color="#E5E5E5">maintainer is like forced the use of</font>

265
00:10:26,709 --> 00:10:30,609
<font color="#CCCCCC">thousand go to the week I was talking</font>

266
00:10:28,689 --> 00:10:33,160
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> zero day bot team so that</font><font color="#CCCCCC"> was a</font>

267
00:10:30,610 --> 00:10:34,750
little<font color="#E5E5E5"> unfortunate</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> once we have</font>

268
00:10:33,160 --> 00:10:37,389
<font color="#CCCCCC">Azzam go to landed wheels</font><font color="#E5E5E5"> start up those</font>

269
00:10:34,750 --> 00:10:39,100
talks again<font color="#CCCCCC"> if you want to try</font><font color="#E5E5E5"> it out</font>

270
00:10:37,389 --> 00:10:41,019
usually when you build your kernel<font color="#CCCCCC"> you</font>

271
00:10:39,100 --> 00:10:42,519
end<font color="#E5E5E5"> up doing like some you play</font><font color="#CCCCCC"> around</font>

272
00:10:41,019 --> 00:10:44,290
<font color="#E5E5E5">with your kernel configuration</font><font color="#CCCCCC"> like a</font>

273
00:10:42,519 --> 00:10:46,750
make local mod config is kind of the

274
00:10:44,290 --> 00:10:48,189
basic target but make has variables you

275
00:10:46,750 --> 00:10:50,559
<font color="#E5E5E5">can set</font><font color="#CCCCCC"> it command line you set C C</font>

276
00:10:48,189 --> 00:10:53,410
equals clang and you're off to<font color="#CCCCCC"> the races</font>

277
00:10:50,559 --> 00:10:55,839
you can set LD is equal equal to LD L LD

278
00:10:53,410 --> 00:10:58,360
to start trying<font color="#CCCCCC"> to link there's</font><font color="#E5E5E5"> some</font>

279
00:10:55,839 --> 00:11:00,100
<font color="#E5E5E5">issues I need</font><font color="#CCCCCC"> to fix</font><font color="#E5E5E5"> upstream but that's</font>

280
00:10:58,360 --> 00:11:02,259
going<font color="#E5E5E5"> to be the command right how to</font>

281
00:11:00,100 --> 00:11:03,879
invoke<font color="#E5E5E5"> L LD and then when you cross</font>

282
00:11:02,259 --> 00:11:06,519
<font color="#E5E5E5">compile one of things I like about kind</font>

283
00:11:03,879 --> 00:11:08,769
of clang is kind of<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> default</font>

284
00:11:06,519 --> 00:11:10,809
build of clang is has all of<font color="#E5E5E5"> the</font>

285
00:11:08,769 --> 00:11:12,380
different<font color="#CCCCCC"> backends built into it so with</font>

286
00:11:10,809 --> 00:11:14,780
<font color="#CCCCCC">bin utils</font>

287
00:11:12,380 --> 00:11:17,090
GCC<font color="#E5E5E5"> you typically install like a cross</font>

288
00:11:14,780 --> 00:11:20,300
tool version<font color="#E5E5E5"> that has a prefix in front</font>

289
00:11:17,090 --> 00:11:22,670
<font color="#CCCCCC">of it and so because we're not using</font>

290
00:11:20,300 --> 00:11:27,260
clangs integrated assembler<font color="#CCCCCC"> we still</font>

291
00:11:22,670 --> 00:11:28,490
<font color="#E5E5E5">kind of shell out to canoe</font><font color="#CCCCCC"> AAS then when</font>

292
00:11:27,260 --> 00:11:31,400
<font color="#E5E5E5">you're cross compiling you need to know</font>

293
00:11:28,490 --> 00:11:33,500
that<font color="#E5E5E5"> target triple so if you were gonna</font>

294
00:11:31,400 --> 00:11:35,990
cross compile for<font color="#CCCCCC"> armed 64 which I do</font>

295
00:11:33,500 --> 00:11:38,000
commonly<font color="#E5E5E5"> from my x86 workstation</font>

296
00:11:35,990 --> 00:11:39,620
I'll those are the environmental

297
00:11:38,000 --> 00:11:43,430
<font color="#E5E5E5">variables you set kind of thing to do</font>

298
00:11:39,620 --> 00:11:46,160
the cross compile<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are very rough</font>

299
00:11:43,430 --> 00:11:48,770
measurements<font color="#CCCCCC"> I don't know if if get grep</font>

300
00:11:46,160 --> 00:11:50,390
supports<font color="#CCCCCC"> parole reg X's probably would</font>

301
00:11:48,770 --> 00:11:52,490
have<font color="#CCCCCC"> been nicer but these are like very</font>

302
00:11:50,390 --> 00:11:55,630
<font color="#E5E5E5">rough counts of of commit messages that</font>

303
00:11:52,490 --> 00:11:58,190
mentioned clang or<font color="#CCCCCC"> LLVM in the kernel</font>

304
00:11:55,630 --> 00:12:00,590
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> lots of the ones that</font><font color="#CCCCCC"> just</font>

305
00:11:58,190 --> 00:12:02,570
<font color="#E5E5E5">mentioned clang may be related to EB PF</font>

306
00:12:00,590 --> 00:12:05,750
<font color="#E5E5E5">I didn't really do any very scientific</font>

307
00:12:02,570 --> 00:12:08,600
measurements there but then<font color="#CCCCCC"> LLVM as well</font>

308
00:12:05,750 --> 00:12:10,010
has quite a few commits now in it that

309
00:12:08,600 --> 00:12:12,170
say like<font color="#E5E5E5"> hey this is</font><font color="#CCCCCC"> something that</font><font color="#E5E5E5"> we</font>

310
00:12:10,010 --> 00:12:19,270
fixed or implemented because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Linux</font>

311
00:12:12,170 --> 00:12:22,099
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> was is making use of this</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> Mike</font>

312
00:12:19,270 --> 00:12:24,920
<font color="#E5E5E5">okay so first off I'm going to apologize</font>

313
00:12:22,100 --> 00:12:28,850
I'm fighting a<font color="#CCCCCC"> cold</font><font color="#E5E5E5"> so I may start</font>

314
00:12:24,920 --> 00:12:33,110
<font color="#CCCCCC">coughing so the production kernel is</font>

315
00:12:28,850 --> 00:12:35,810
basically a<font color="#E5E5E5"> different beast from what</font>

316
00:12:33,110 --> 00:12:38,270
he's working on which is<font color="#E5E5E5"> Android the</font>

317
00:12:35,810 --> 00:12:41,599
Android tends to work more towards<font color="#E5E5E5"> the</font>

318
00:12:38,270 --> 00:12:45,980
top<font color="#CCCCCC"> of tree</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> the production</font>

319
00:12:41,600 --> 00:12:52,100
<font color="#CCCCCC">kernel has various different what do you</font>

320
00:12:45,980 --> 00:12:54,920
call them<font color="#CCCCCC"> long term yeah LTS branches so</font>

321
00:12:52,100 --> 00:12:58,420
the one that I'm using<font color="#E5E5E5"> is kind of an</font>

322
00:12:54,920 --> 00:13:04,010
ancient one I think<font color="#E5E5E5"> it's like pre 4.5</font>

323
00:12:58,420 --> 00:13:07,939
<font color="#E5E5E5">but anyway it's it's it's all kind of a</font>

324
00:13:04,010 --> 00:13:09,050
more<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> experimental type situation</font>

325
00:13:07,940 --> 00:13:12,740
right<font color="#E5E5E5"> now</font>

326
00:13:09,050 --> 00:13:15,410
well<font color="#CCCCCC"> asterisks it's it's more than just</font>

327
00:13:12,740 --> 00:13:18,050
experimental we really want to<font color="#E5E5E5"> do it but</font>

328
00:13:15,410 --> 00:13:19,069
we<font color="#E5E5E5"> need to get like performance there</font>

329
00:13:18,050 --> 00:13:20,689
<font color="#E5E5E5">for instance</font>

330
00:13:19,070 --> 00:13:25,750
and I'll go I'll<font color="#CCCCCC"> go into that in</font><font color="#E5E5E5"> a bit</font>

331
00:13:20,690 --> 00:13:28,490
<font color="#CCCCCC">I'm here</font><font color="#E5E5E5"> so what I</font><font color="#CCCCCC"> did is</font>

332
00:13:25,750 --> 00:13:32,060
<font color="#E5E5E5">I went to the I got to the team about</font><font color="#CCCCCC"> a</font>

333
00:13:28,490 --> 00:13:36,530
year<font color="#CCCCCC"> ago and luckily</font><font color="#E5E5E5"> the Android team</font>

334
00:13:32,060 --> 00:13:40,060
had<font color="#E5E5E5"> already done</font><font color="#CCCCCC"> LTO</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> and so I</font>

335
00:13:36,530 --> 00:13:42,980
was able<font color="#CCCCCC"> to use their patches</font><font color="#E5E5E5"> and get</font>

336
00:13:40,060 --> 00:13:47,209
our kernel<font color="#E5E5E5"> you know to compile with</font>

337
00:13:42,980 --> 00:13:50,330
Linux<font color="#E5E5E5"> I'm sorry but with</font><font color="#CCCCCC"> LTO</font><font color="#E5E5E5"> basically</font>

338
00:13:47,210 --> 00:13:53,630
it<font color="#CCCCCC"> just took a bunch</font><font color="#E5E5E5"> of changes in the</font>

339
00:13:50,330 --> 00:13:56,500
build system<font color="#CCCCCC"> mostly it has to do with</font>

340
00:13:53,630 --> 00:13:59,210
the fact that<font color="#E5E5E5"> during</font><font color="#CCCCCC"> LTO you generate</font>

341
00:13:56,500 --> 00:14:03,710
you know<font color="#E5E5E5"> Olivia my</font><font color="#CCCCCC"> are files instead of</font>

342
00:13:59,210 --> 00:14:06,230
elf files so you can you really don't

343
00:14:03,710 --> 00:14:09,500
generate elf files until<font color="#E5E5E5"> you start</font>

344
00:14:06,230 --> 00:14:12,830
linking the VM Linux<font color="#CCCCCC"> go file and that's</font>

345
00:14:09,500 --> 00:14:18,140
when you do<font color="#CCCCCC"> all of the LTO optimizations</font>

346
00:14:12,830 --> 00:14:24,380
<font color="#E5E5E5">so the built in Auto files that are</font>

347
00:14:18,140 --> 00:14:26,569
generated<font color="#E5E5E5"> are not really well they're</font>

348
00:14:24,380 --> 00:14:28,070
<font color="#E5E5E5">just</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> really archives at all</font><font color="#CCCCCC"> so</font>

349
00:14:26,570 --> 00:14:30,650
basically what you're<font color="#CCCCCC"> doing is you're</font>

350
00:14:28,070 --> 00:14:33,200
<font color="#CCCCCC">creating a thin archive</font><font color="#E5E5E5"> so that just</font>

351
00:14:30,650 --> 00:14:36,110
lists<font color="#E5E5E5"> all of the files that you</font><font color="#CCCCCC"> want to</font>

352
00:14:33,200 --> 00:14:38,150
then shove to the linker and<font color="#E5E5E5"> then the</font>

353
00:14:36,110 --> 00:14:42,460
linker will take all of those<font color="#E5E5E5"> and do its</font>

354
00:14:38,150 --> 00:14:45,380
magic<font color="#E5E5E5"> and create the dot o file</font><font color="#CCCCCC"> I</font>

355
00:14:42,460 --> 00:14:49,960
started by using<font color="#E5E5E5"> the gold linker because</font>

356
00:14:45,380 --> 00:14:53,210
that's what you're<font color="#CCCCCC"> supposed to use and</font>

357
00:14:49,960 --> 00:14:56,240
you know then in order<font color="#E5E5E5"> to get the actual</font>

358
00:14:53,210 --> 00:15:00,380
finals of VM Linux I linked it<font color="#E5E5E5"> with the</font>

359
00:14:56,240 --> 00:15:03,710
<font color="#CCCCCC">BFD linker there is some issues however</font>

360
00:15:00,380 --> 00:15:06,350
<font color="#E5E5E5">with the gold linker and our teams</font>

361
00:15:03,710 --> 00:15:09,260
<font color="#E5E5E5">internally at Google no longer support</font>

362
00:15:06,350 --> 00:15:13,340
the<font color="#E5E5E5"> gold linker so basically they said</font>

363
00:15:09,260 --> 00:15:16,870
use<font color="#CCCCCC"> lld and so about a</font><font color="#E5E5E5"> month ago I would</font>

364
00:15:13,340 --> 00:15:16,870
have<font color="#CCCCCC"> had to switch this over to LD</font>

365
00:15:18,490 --> 00:15:23,390
excuse me

366
00:15:19,990 --> 00:15:25,310
so anyway<font color="#E5E5E5"> um like I said the gold linker</font>

367
00:15:23,390 --> 00:15:28,930
had bugs<font color="#E5E5E5"> in</font><font color="#CCCCCC"> fact it was asserting on me</font>

368
00:15:25,310 --> 00:15:31,989
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> elodie have worked great</font><font color="#E5E5E5"> however</font>

369
00:15:28,930 --> 00:15:36,079
<font color="#E5E5E5">it turns out with that when you use</font><font color="#CCCCCC"> LTO</font>

370
00:15:31,990 --> 00:15:37,790
and you're also<font color="#CCCCCC"> making elf o files with</font>

371
00:15:36,080 --> 00:15:40,410
it the

372
00:15:37,790 --> 00:15:43,980
LTO files will<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> just be</font>

373
00:15:40,410 --> 00:15:45,689
generated as one huge dot o file dot o<font color="#CCCCCC"> l</font>

374
00:15:43,980 --> 00:15:47,880
file and then the other ones<font color="#E5E5E5"> are</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

375
00:15:45,690 --> 00:15:51,180
<font color="#CCCCCC">scattered here and that wouldn't be</font>

376
00:15:47,880 --> 00:15:53,850
necessarily an issue however with<font color="#E5E5E5"> Linux</font>

377
00:15:51,180 --> 00:15:57,000
they have this section<font color="#CCCCCC"> called init data</font>

378
00:15:53,850 --> 00:15:59,340
<font color="#E5E5E5">and in there they have a list of init</font>

379
00:15:57,000 --> 00:16:02,040
calls and<font color="#E5E5E5"> those have to be in a specific</font>

380
00:15:59,340 --> 00:16:04,260
order<font color="#CCCCCC"> because you know they're</font>

381
00:16:02,040 --> 00:16:09,180
initializing structures and so<font color="#CCCCCC"> on before</font>

382
00:16:04,260 --> 00:16:14,790
other ones and we were just not<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

383
00:16:09,180 --> 00:16:16,949
replicate<font color="#CCCCCC"> that so I I had I basically</font>

384
00:16:14,790 --> 00:16:21,959
had<font color="#CCCCCC"> to come up with</font><font color="#E5E5E5"> a kind of a hack get</font>

385
00:16:16,950 --> 00:16:24,680
around it<font color="#CCCCCC"> so first off</font><font color="#E5E5E5"> this is kind of</font>

386
00:16:21,960 --> 00:16:27,120
where you define<font color="#E5E5E5"> an</font><font color="#CCCCCC"> inner call here</font><font color="#E5E5E5"> and</font>

387
00:16:24,680 --> 00:16:31,099
so what<font color="#CCCCCC"> i do is i'm popping it into a</font>

388
00:16:27,120 --> 00:16:36,660
section<font color="#E5E5E5"> that's named you know after the</font>

389
00:16:31,100 --> 00:16:40,200
the file that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> occurs in and Entering</font>

390
00:16:36,660 --> 00:16:44,010
linking<font color="#CCCCCC"> i create a really massive</font><font color="#E5E5E5"> linker</font>

391
00:16:40,200 --> 00:16:49,860
script that will go<font color="#CCCCCC"> through and reorder</font>

392
00:16:44,010 --> 00:16:51,540
all of the sections<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> so that</font>

393
00:16:49,860 --> 00:16:53,400
<font color="#E5E5E5">they are</font><font color="#CCCCCC"> in the quote unquote</font><font color="#E5E5E5"> correct</font>

394
00:16:51,540 --> 00:16:59,089
order as they were as they appear on<font color="#E5E5E5"> the</font>

395
00:16:53,400 --> 00:17:02,130
<font color="#E5E5E5">command line this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> absolutely horrible</font>

396
00:16:59,090 --> 00:17:05,160
<font color="#CCCCCC">it actually causes</font><font color="#E5E5E5"> the compilation are</font>

397
00:17:02,130 --> 00:17:09,960
the linking to increase from<font color="#E5E5E5"> about you</font>

398
00:17:05,160 --> 00:17:12,210
know<font color="#E5E5E5"> 1.2 minutes to over</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> and there are</font>

399
00:17:09,960 --> 00:17:15,810
<font color="#E5E5E5">kind of ways I can maybe get around that</font>

400
00:17:12,210 --> 00:17:22,260
but in<font color="#E5E5E5"> general it's just kind of bad so</font>

401
00:17:15,810 --> 00:17:24,750
please<font color="#E5E5E5"> don't tell anybody</font><font color="#CCCCCC"> and so now</font>

402
00:17:22,260 --> 00:17:26,490
we're<font color="#CCCCCC"> gonna discuss a few interesting</font>

403
00:17:24,750 --> 00:17:28,440
<font color="#E5E5E5">issues that we kind of came across while</font>

404
00:17:26,490 --> 00:17:31,650
while developing<font color="#E5E5E5"> this so I'll let him</font><font color="#CCCCCC"> go</font>

405
00:17:28,440 --> 00:17:33,900
first<font color="#CCCCCC"> sure so just in the interest of</font>

406
00:17:31,650 --> 00:17:35,250
time I won't<font color="#E5E5E5"> get into all these but the</font>

407
00:17:33,900 --> 00:17:37,140
very<font color="#E5E5E5"> first one which was which was</font>

408
00:17:35,250 --> 00:17:38,460
interesting was so if you see this

409
00:17:37,140 --> 00:17:41,760
<font color="#E5E5E5">statement here you're declaring</font><font color="#CCCCCC"> a</font>

410
00:17:38,460 --> 00:17:44,450
variable foo<font color="#E5E5E5"> it's a long long so we had</font>

411
00:17:41,760 --> 00:17:47,660
this<font color="#CCCCCC"> issue in clang on 32-bit hosts</font>

412
00:17:44,450 --> 00:17:51,280
<font color="#CCCCCC">we're along where according</font><font color="#E5E5E5"> to their ABI</font>

413
00:17:47,660 --> 00:17:52,990
<font color="#E5E5E5">long long should be 64 bits</font><font color="#CCCCCC"> and so</font>

414
00:17:51,280 --> 00:17:55,180
you're saying<font color="#E5E5E5"> like</font><font color="#CCCCCC"> please use register</font>

415
00:17:52,990 --> 00:17:57,730
<font color="#CCCCCC">EDX for instance so</font><font color="#E5E5E5"> you can guess which</font>

416
00:17:55,180 --> 00:18:00,490
<font color="#E5E5E5">architecture this is please store it in</font>

417
00:17:57,730 --> 00:18:02,200
a<font color="#E5E5E5"> register kind of thing</font><font color="#CCCCCC"> the thing</font>

418
00:18:00,490 --> 00:18:05,350
<font color="#E5E5E5">that's curious is if you're on a 32-bit</font>

419
00:18:02,200 --> 00:18:07,330
<font color="#E5E5E5">host and you say use EDX which is a</font>

420
00:18:05,350 --> 00:18:09,969
32-bit register and you're<font color="#E5E5E5"> saying you</font>

421
00:18:07,330 --> 00:18:12,760
want a<font color="#E5E5E5"> long long well where's the other</font>

422
00:18:09,970 --> 00:18:16,930
<font color="#CCCCCC">32 bits of</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> 64-bit variable does</font>

423
00:18:12,760 --> 00:18:18,160
<font color="#E5E5E5">anyone know</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> okay well basically you</font>

424
00:18:16,930 --> 00:18:20,410
have to implement bug for bug

425
00:18:18,160 --> 00:18:22,600
compatibility with GCC<font color="#E5E5E5"> on how does it</font>

426
00:18:20,410 --> 00:18:25,270
<font color="#E5E5E5">choose</font><font color="#CCCCCC"> the next 32-bit register and if</font>

427
00:18:22,600 --> 00:18:29,260
you say like<font color="#CCCCCC"> e ESP it'll just like crash</font>

428
00:18:25,270 --> 00:18:30,490
<font color="#E5E5E5">so yeah that</font><font color="#CCCCCC"> was kind of</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> one</font>

429
00:18:29,260 --> 00:18:32,620
of the bugs that<font color="#E5E5E5"> we ran through with</font><font color="#CCCCCC"> AR</font>

430
00:18:30,490 --> 00:18:33,910
64 that was kind of<font color="#E5E5E5"> clever</font><font color="#CCCCCC"> the kernel</font>

431
00:18:32,620 --> 00:18:35,350
few tax code which is like a

432
00:18:33,910 --> 00:18:37,480
<font color="#E5E5E5">synchronization primitive would</font>

433
00:18:35,350 --> 00:18:39,550
explicitly dereference null to see like

434
00:18:37,480 --> 00:18:42,310
how<font color="#CCCCCC"> does the hardware</font><font color="#E5E5E5"> perform and how</font>

435
00:18:39,550 --> 00:18:43,570
does<font color="#E5E5E5"> it behave and select this in select</font>

436
00:18:42,310 --> 00:18:47,950
<font color="#E5E5E5">this implementation otherwise this</font>

437
00:18:43,570 --> 00:18:50,080
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they are 64 has an</font>

438
00:18:47,950 --> 00:18:52,030
explicit<font color="#CCCCCC"> zero register which is nice so</font>

439
00:18:50,080 --> 00:18:55,330
<font color="#CCCCCC">clang was trying to generate code that</font>

440
00:18:52,030 --> 00:18:57,820
said like dereference the<font color="#E5E5E5"> xzr is like a</font>

441
00:18:55,330 --> 00:19:00,699
zero register<font color="#E5E5E5"> the issue is that there is</font>

442
00:18:57,820 --> 00:19:02,169
no one valid encoding for that<font color="#E5E5E5"> so like</font>

443
00:19:00,700 --> 00:19:03,580
you can<font color="#E5E5E5"> write that in assembly and</font><font color="#CCCCCC"> then</font>

444
00:19:02,170 --> 00:19:05,770
your assembler will choke<font color="#E5E5E5"> and say like</font>

445
00:19:03,580 --> 00:19:08,139
there's no bit pattern<font color="#E5E5E5"> to represent this</font>

446
00:19:05,770 --> 00:19:10,450
<font color="#E5E5E5">so that was kind of funny</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> inline</font>

447
00:19:08,140 --> 00:19:12,640
is like if someone asks you like what

448
00:19:10,450 --> 00:19:16,470
<font color="#E5E5E5">are the semantic differences between</font><font color="#CCCCCC"> C</font>

449
00:19:12,640 --> 00:19:19,410
<font color="#E5E5E5">89 and c 99 like how</font><font color="#CCCCCC"> extern inline works</font>

450
00:19:16,470 --> 00:19:22,690
<font color="#E5E5E5">that's one the kernel makes use of this</font>

451
00:19:19,410 --> 00:19:23,830
<font color="#E5E5E5">I wrote the documentation on this and</font>

452
00:19:22,690 --> 00:19:26,710
like have the patch in the kernel for

453
00:19:23,830 --> 00:19:28,030
this I'm not<font color="#E5E5E5"> really proud</font><font color="#CCCCCC"> of it</font><font color="#E5E5E5"> but that</font>

454
00:19:26,710 --> 00:19:30,340
<font color="#CCCCCC">that's something</font><font color="#E5E5E5"> you can go look up if</font>

455
00:19:28,030 --> 00:19:31,540
you're<font color="#E5E5E5"> interested single symbol clashes</font>

456
00:19:30,340 --> 00:19:34,540
with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> c standard library</font>

457
00:19:31,540 --> 00:19:37,000
it's like header file like<font color="#CCCCCC"> I don't know</font>

458
00:19:34,540 --> 00:19:38,590
if you were to pound include stood<font color="#CCCCCC"> IO or</font>

459
00:19:37,000 --> 00:19:40,660
<font color="#E5E5E5">something and like the kernel itself</font>

460
00:19:38,590 --> 00:19:43,570
doesn't<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> C runtime it implements</font>

461
00:19:40,660 --> 00:19:46,440
its own kind<font color="#CCCCCC"> of helper functions and</font>

462
00:19:43,570 --> 00:19:48,340
then there was<font color="#E5E5E5"> like collisions there</font>

463
00:19:46,440 --> 00:19:51,220
<font color="#E5E5E5">custom calling conventions</font>

464
00:19:48,340 --> 00:19:52,449
<font color="#CCCCCC">VLA is is a variable length array and</font>

465
00:19:51,220 --> 00:19:54,850
then you can also<font color="#E5E5E5"> put a variable length</font>

466
00:19:52,450 --> 00:19:56,320
array in the middle of a struct<font color="#E5E5E5"> not at</font>

467
00:19:54,850 --> 00:19:58,959
the at the<font color="#CCCCCC"> end of a struct but in the</font>

468
00:19:56,320 --> 00:20:01,179
middle kind<font color="#E5E5E5"> of thing was an issue I</font>

469
00:19:58,960 --> 00:20:03,820
think<font color="#E5E5E5"> the one that I</font><font color="#CCCCCC"> would be</font><font color="#E5E5E5"> most</font>

470
00:20:01,180 --> 00:20:04,630
interested in showing you is is<font color="#E5E5E5"> this one</font>

471
00:20:03,820 --> 00:20:06,309
so

472
00:20:04,630 --> 00:20:09,490
quick interview question how can<font color="#CCCCCC"> you</font>

473
00:20:06,309 --> 00:20:14,470
write code<font color="#E5E5E5"> that is valid at o2 and not</font>

474
00:20:09,490 --> 00:20:17,529
at<font color="#E5E5E5"> a zero think about it</font><font color="#CCCCCC"> okay did anyone</font>

475
00:20:14,470 --> 00:20:19,450
<font color="#E5E5E5">get this might be hard to see here but</font>

476
00:20:17,529 --> 00:20:21,820
<font color="#E5E5E5">basically we have a static inline</font>

477
00:20:19,450 --> 00:20:23,620
function inline function has<font color="#E5E5E5"> some inline</font>

478
00:20:21,820 --> 00:20:25,480
assembly<font color="#E5E5E5"> it has some constraints on</font><font color="#CCCCCC"> it</font>

479
00:20:23,620 --> 00:20:29,979
<font color="#E5E5E5">saying this is</font><font color="#CCCCCC"> going to be an immediate</font>

480
00:20:25,480 --> 00:20:31,899
<font color="#E5E5E5">value</font><font color="#CCCCCC"> like the number 42 and</font><font color="#E5E5E5"> so when we</font>

481
00:20:29,980 --> 00:20:33,940
compile this at o2<font color="#E5E5E5"> everything's</font>

482
00:20:31,899 --> 00:20:38,320
semantically valid<font color="#E5E5E5"> but if we don't</font>

483
00:20:33,940 --> 00:20:40,059
inline that<font color="#E5E5E5"> static inline function it is</font>

484
00:20:38,320 --> 00:20:43,299
no longer<font color="#E5E5E5"> semantically valid</font><font color="#CCCCCC"> kind of</font>

485
00:20:40,059 --> 00:20:46,450
thing<font color="#CCCCCC"> the the kernel is using this in a</font>

486
00:20:43,299 --> 00:20:49,269
few places<font color="#CCCCCC"> coincidentally everywhere</font>

487
00:20:46,450 --> 00:20:50,889
where<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> azzam goto</font><font color="#E5E5E5"> is wrapped in</font>

488
00:20:49,269 --> 00:20:54,340
this pattern<font color="#CCCCCC"> so it's making testing</font>

489
00:20:50,889 --> 00:20:56,709
<font color="#CCCCCC">azzam goto very difficult</font><font color="#E5E5E5"> especially if</font>

490
00:20:54,340 --> 00:20:58,539
you<font color="#E5E5E5"> want to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> like in</font><font color="#CCCCCC"> lining</font><font color="#E5E5E5"> or</font>

491
00:20:56,710 --> 00:21:00,789
especially<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the initial instance</font>

492
00:20:58,539 --> 00:21:03,669
of patches of<font color="#CCCCCC"> azzam go to skip in</font><font color="#E5E5E5"> lining</font>

493
00:21:00,789 --> 00:21:05,740
<font color="#E5E5E5">support so one of the things that's</font><font color="#CCCCCC"> kind</font>

494
00:21:03,669 --> 00:21:06,669
of interesting<font color="#E5E5E5"> is if you use attribute</font>

495
00:21:05,740 --> 00:21:08,320
<font color="#E5E5E5">always in line</font>

496
00:21:06,669 --> 00:21:09,909
it doesn't<font color="#CCCCCC"> mean always</font><font color="#E5E5E5"> in line because</font>

497
00:21:08,320 --> 00:21:11,559
<font color="#E5E5E5">the compiler needs to know how to do the</font>

498
00:21:09,909 --> 00:21:14,350
in<font color="#E5E5E5"> lining and a lot of times you'll see</font>

499
00:21:11,559 --> 00:21:16,389
<font color="#CCCCCC">like fix me to do implement later not</font>

500
00:21:14,350 --> 00:21:18,309
needed for<font color="#E5E5E5"> correctness kind of thing so</font>

501
00:21:16,389 --> 00:21:20,559
like<font color="#E5E5E5"> these need to be macros if you want</font>

502
00:21:18,309 --> 00:21:23,980
it to always be inlined kind of thing

503
00:21:20,559 --> 00:21:25,960
<font color="#E5E5E5">and I don't know</font><font color="#CCCCCC"> Bill we'll talk about</font>

504
00:21:23,980 --> 00:21:28,080
some these<font color="#E5E5E5"> two other ones in a little</font>

505
00:21:25,960 --> 00:21:28,080
bit

506
00:21:31,640 --> 00:21:41,990
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> so there were a couple of issues</font><font color="#CCCCCC"> one</font>

507
00:21:38,360 --> 00:21:43,580
<font color="#E5E5E5">of them actually this would have not</font>

508
00:21:41,990 --> 00:21:48,200
been a<font color="#CCCCCC"> problem if I was using a more</font>

509
00:21:43,580 --> 00:21:49,790
recent kernel because<font color="#E5E5E5"> the patch as what</font>

510
00:21:48,200 --> 00:21:50,990
was already<font color="#CCCCCC"> existing in an upstream</font>

511
00:21:49,790 --> 00:21:54,250
kernel

512
00:21:50,990 --> 00:21:57,320
but basically what was<font color="#CCCCCC"> happening is we</font>

513
00:21:54,250 --> 00:22:01,730
during one of<font color="#E5E5E5"> our tests that the machine</font>

514
00:21:57,320 --> 00:22:04,189
<font color="#E5E5E5">would just simply assert but and I I</font>

515
00:22:01,730 --> 00:22:08,390
whittled the the test cases down and I

516
00:22:04,190 --> 00:22:12,230
found out that like in one of<font color="#E5E5E5"> the crypto</font>

517
00:22:08,390 --> 00:22:15,320
<font color="#CCCCCC">yeah crypto library r dot o files if you</font>

518
00:22:12,230 --> 00:22:16,460
compiled it with<font color="#E5E5E5"> oh one everything</font><font color="#CCCCCC"> went</font>

519
00:22:15,320 --> 00:22:20,059
fine if<font color="#CCCCCC"> it compiled it with</font><font color="#E5E5E5"> though</font><font color="#CCCCCC"> two</font>

520
00:22:16,460 --> 00:22:24,280
everything crashed and so it happened it

521
00:22:20,059 --> 00:22:27,260
it had<font color="#E5E5E5"> to do with</font><font color="#CCCCCC"> inlining actually</font><font color="#E5E5E5"> and</font>

522
00:22:24,280 --> 00:22:33,080
it wasn't<font color="#CCCCCC"> a bug in clang which is what I</font>

523
00:22:27,260 --> 00:22:36,440
thought initially<font color="#CCCCCC"> it was some weird some</font>

524
00:22:33,080 --> 00:22:39,199
weird<font color="#E5E5E5"> lining issues so basically because</font>

525
00:22:36,440 --> 00:22:43,910
<font color="#E5E5E5">Linux does just horrible</font><font color="#CCCCCC"> things with</font>

526
00:22:39,200 --> 00:22:49,120
pointers it has these this<font color="#E5E5E5"> thing called</font>

527
00:22:43,910 --> 00:22:52,580
s GE set buff<font color="#CCCCCC"> and what</font><font color="#E5E5E5"> this does is you</font>

528
00:22:49,120 --> 00:22:57,889
<font color="#E5E5E5">are basically setting a buffer inside of</font>

529
00:22:52,580 --> 00:23:00,530
this structure<font color="#E5E5E5"> and it's going to be</font>

530
00:22:57,890 --> 00:23:05,780
aligned at a certain place<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> so</font>

531
00:23:00,530 --> 00:23:09,740
inside of<font color="#E5E5E5"> SG set buff it's the offset</font>

532
00:23:05,780 --> 00:23:16,600
<font color="#E5E5E5">here is a 12</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> 12 bit of</font><font color="#CCCCCC"> wine as you</font>

533
00:23:09,740 --> 00:23:18,980
<font color="#E5E5E5">can see so when it's not in line</font>

534
00:23:16,600 --> 00:23:21,530
clang is looking at that<font color="#E5E5E5"> and it doesn't</font>

535
00:23:18,980 --> 00:23:23,240
<font color="#E5E5E5">really try and calculate the</font><font color="#CCCCCC"> value or</font>

536
00:23:21,530 --> 00:23:28,790
anything like<font color="#E5E5E5"> that so</font><font color="#CCCCCC"> it just leaves the</font>

537
00:23:23,240 --> 00:23:32,929
<font color="#E5E5E5">zero ffff alone</font><font color="#CCCCCC"> however when you do in</font>

538
00:23:28,790 --> 00:23:36,590
line it you get the bottom four bits

539
00:23:32,929 --> 00:23:39,380
<font color="#E5E5E5">turned into zeros and because you have</font>

540
00:23:36,590 --> 00:23:43,340
<font color="#E5E5E5">this variable variable length array</font>

541
00:23:39,380 --> 00:23:45,080
being defined like this<font color="#CCCCCC"> and S&D are</font>

542
00:23:43,340 --> 00:23:46,668
actually defined

543
00:23:45,080 --> 00:23:49,939
towards the<font color="#CCCCCC"> end there's one variable</font>

544
00:23:46,669 --> 00:23:54,499
afterwards but it's a it's<font color="#E5E5E5"> not allocated</font>

545
00:23:49,940 --> 00:23:57,499
in<font color="#CCCCCC"> E stack so basically D here is the</font>

546
00:23:54,499 --> 00:24:03,860
last<font color="#E5E5E5"> thing on the stack</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> right here</font>

547
00:23:57,499 --> 00:24:08,330
<font color="#CCCCCC">and what was</font><font color="#E5E5E5"> happening is after</font><font color="#CCCCCC"> it's set</font>

548
00:24:03,860 --> 00:24:10,008
this buffer like this<font color="#E5E5E5"> it would put a</font>

549
00:24:08,330 --> 00:24:13,610
whole bunch<font color="#CCCCCC"> of data in there of course</font>

550
00:24:10,009 --> 00:24:16,869
<font color="#CCCCCC">and it would end up</font><font color="#E5E5E5"> overriding the</font>

551
00:24:13,610 --> 00:24:20,748
return address<font color="#E5E5E5"> because of the</font>

552
00:24:16,869 --> 00:24:22,189
misalignment basically<font color="#CCCCCC"> all the you know</font>

553
00:24:20,749 --> 00:24:25,369
lower bits there would just be cleared

554
00:24:22,190 --> 00:24:29,600
out<font color="#E5E5E5"> and it would be off by</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> and you</font>

555
00:24:25,369 --> 00:24:31,459
know everything was<font color="#CCCCCC"> blow up</font><font color="#E5E5E5"> so that was</font>

556
00:24:29,600 --> 00:24:37,330
that was kind<font color="#E5E5E5"> of an interesting</font><font color="#CCCCCC"> bug to</font>

557
00:24:31,460 --> 00:24:41,080
find but let's see<font color="#CCCCCC"> Oh in the in the</font>

558
00:24:37,330 --> 00:24:44,559
resolution<font color="#CCCCCC"> is basically to specify the</font>

559
00:24:41,080 --> 00:24:48,739
stack alignment<font color="#E5E5E5"> on the command line</font>

560
00:24:44,559 --> 00:24:51,769
which had like I said had been fixed by

561
00:24:48,739 --> 00:24:55,850
a patch<font color="#E5E5E5"> probably couples look last year</font>

562
00:24:51,769 --> 00:24:57,679
<font color="#CCCCCC">or something</font><font color="#E5E5E5"> like that or yeah but it</font>

563
00:24:55,850 --> 00:25:08,689
just<font color="#CCCCCC"> hadn't made it into one of</font><font color="#E5E5E5"> our LTS</font>

564
00:24:57,679 --> 00:25:11,259
kernels yet I think<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> he had</font>

565
00:25:08,690 --> 00:25:15,139
mentioned<font color="#E5E5E5"> earlier that there had</font><font color="#CCCCCC"> been</font>

566
00:25:11,259 --> 00:25:17,779
kind<font color="#E5E5E5"> of like lacking support for some of</font>

567
00:25:15,139 --> 00:25:22,100
the GCC features and clang<font color="#E5E5E5"> and one of</font>

568
00:25:17,779 --> 00:25:23,570
the big ones was<font color="#E5E5E5"> built in constant P it</font>

569
00:25:22,100 --> 00:25:29,168
wasn't that we were<font color="#CCCCCC"> getting it wrong</font>

570
00:25:23,570 --> 00:25:39,049
it's just<font color="#E5E5E5"> that GCC was oh</font><font color="#CCCCCC"> geez doing</font>

571
00:25:29,169 --> 00:25:44,029
what GCC does<font color="#E5E5E5"> and well basically</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> duck</font>

572
00:25:39,049 --> 00:25:46,158
the definition are the basically<font color="#CCCCCC"> the</font>

573
00:25:44,029 --> 00:25:52,450
definition<font color="#E5E5E5"> of what a built-in does for</font>

574
00:25:46,159 --> 00:25:56,869
GCC<font color="#E5E5E5"> is what does GCC do and so that's it</font>

575
00:25:52,450 --> 00:25:58,390
<font color="#E5E5E5">so basically after</font><font color="#CCCCCC"> inlining happens</font><font color="#E5E5E5"> GCC</font>

576
00:25:56,869 --> 00:26:02,889
is still able<font color="#E5E5E5"> to say</font>

577
00:25:58,390 --> 00:26:04,990
oh is this you know<font color="#CCCCCC"> as the variable to</font>

578
00:26:02,890 --> 00:26:07,810
<font color="#E5E5E5">our the argument to the</font><font color="#CCCCCC"> built-in</font>

579
00:26:04,990 --> 00:26:09,310
<font color="#CCCCCC">constant P is an integer if</font><font color="#E5E5E5"> our you</font><font color="#CCCCCC"> know</font>

580
00:26:07,810 --> 00:26:14,139
constant if it is<font color="#E5E5E5"> we'll just go ahead</font>

581
00:26:09,310 --> 00:26:15,730
<font color="#E5E5E5">and say yes</font><font color="#CCCCCC"> it is otherwise</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> and in</font>

582
00:26:14,140 --> 00:26:17,830
the vast<font color="#E5E5E5"> majority of cases this is used</font>

583
00:26:15,730 --> 00:26:22,510
<font color="#E5E5E5">to take the slow path as opposed to the</font>

584
00:26:17,830 --> 00:26:24,639
quick path<font color="#CCCCCC"> in one of the newer kernels</font>

585
00:26:22,510 --> 00:26:26,560
<font color="#CCCCCC">it turns</font><font color="#E5E5E5"> out that kernel hardening</font>

586
00:26:24,640 --> 00:26:29,620
actually kind of fails you would get

587
00:26:26,560 --> 00:26:31,139
<font color="#E5E5E5">this you know scary message here without</font>

588
00:26:29,620 --> 00:26:36,030
it

589
00:26:31,140 --> 00:26:39,010
so actually both<font color="#CCCCCC"> to James night and I</font>

590
00:26:36,030 --> 00:26:43,510
kind<font color="#E5E5E5"> of tackled this James</font><font color="#CCCCCC"> might did the</font>

591
00:26:39,010 --> 00:26:49,629
LOV<font color="#CCCCCC"> Mir</font><font color="#E5E5E5"> transfer our addition using this</font>

592
00:26:43,510 --> 00:26:51,700
is constant<font color="#E5E5E5"> intrinsic and I went ahead</font>

593
00:26:49,630 --> 00:26:55,840
<font color="#E5E5E5">and modified the front at the clang</font>

594
00:26:51,700 --> 00:26:58,690
<font color="#E5E5E5">fronton which is not actually</font><font color="#CCCCCC"> the code</font>

595
00:26:55,840 --> 00:27:01,000
base<font color="#CCCCCC"> that I'm most used to but I became</font>

596
00:26:58,690 --> 00:27:06,670
<font color="#E5E5E5">used to it because my god I had to touch</font>

597
00:27:01,000 --> 00:27:09,520
every part<font color="#E5E5E5"> of it so Richard Smith asked</font>

598
00:27:06,670 --> 00:27:13,570
me to are one of the main maintainer<font color="#CCCCCC"> zuv</font>

599
00:27:09,520 --> 00:27:15,250
clang asked me to<font color="#E5E5E5"> implement a more or</font>

600
00:27:13,570 --> 00:27:19,659
less a wrapper class called<font color="#E5E5E5"> the called</font>

601
00:27:15,250 --> 00:27:22,060
constant expert<font color="#E5E5E5"> and it is the correct</font>

602
00:27:19,660 --> 00:27:25,690
<font color="#E5E5E5">way of</font><font color="#CCCCCC"> doing it is just the long way</font><font color="#E5E5E5"> of</font>

603
00:27:22,060 --> 00:27:28,000
doing it but the benefit<font color="#CCCCCC"> of it is that</font>

604
00:27:25,690 --> 00:27:32,560
it's kind of<font color="#E5E5E5"> a more natural</font><font color="#CCCCCC"> way of doing</font>

605
00:27:28,000 --> 00:27:34,960
it and<font color="#E5E5E5"> also it allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to support</font><font color="#CCCCCC"> c++</font>

606
00:27:32,560 --> 00:27:37,419
features in the<font color="#E5E5E5"> future and essentially</font>

607
00:27:34,960 --> 00:27:41,470
what it<font color="#CCCCCC"> does is</font><font color="#E5E5E5"> kind of what the name</font>

608
00:27:37,420 --> 00:27:43,240
says is if<font color="#E5E5E5"> you are in a constant</font>

609
00:27:41,470 --> 00:27:46,120
expression then you<font color="#CCCCCC"> are assuming</font><font color="#E5E5E5"> that</font>

610
00:27:43,240 --> 00:27:48,430
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> in a constant context and that</font>

611
00:27:46,120 --> 00:27:52,330
<font color="#E5E5E5">can be and that can determine whether</font>

612
00:27:48,430 --> 00:27:56,200
<font color="#E5E5E5">you're going to evaluate it early in the</font>

613
00:27:52,330 --> 00:28:01,060
<font color="#CCCCCC">clang front end</font><font color="#E5E5E5"> or late in the</font><font color="#CCCCCC"> LOV m ir</font>

614
00:27:56,200 --> 00:28:06,130
<font color="#E5E5E5">are you know</font><font color="#CCCCCC"> midland</font><font color="#E5E5E5"> and so yeah</font><font color="#CCCCCC"> we were</font>

615
00:28:01,060 --> 00:28:08,020
<font color="#CCCCCC">able to get</font><font color="#E5E5E5"> past that and now we are but</font>

616
00:28:06,130 --> 00:28:10,240
compatible at least with<font color="#CCCCCC"> that in with</font>

617
00:28:08,020 --> 00:28:15,549
<font color="#E5E5E5">our DCC so</font>

618
00:28:10,240 --> 00:28:18,070
and I think<font color="#E5E5E5"> you are that's you</font><font color="#CCCCCC"> yeah so</font>

619
00:28:15,549 --> 00:28:19,869
if you're<font color="#E5E5E5"> interested in how you might be</font>

620
00:28:18,070 --> 00:28:21,460
able<font color="#CCCCCC"> to help</font><font color="#E5E5E5"> so I highly recommend this</font>

621
00:28:19,869 --> 00:28:22,990
project<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> how I was able to start</font>

622
00:28:21,460 --> 00:28:26,350
kind<font color="#E5E5E5"> of contributing</font><font color="#CCCCCC"> to the upstream</font>

623
00:28:22,990 --> 00:28:27,820
<font color="#E5E5E5">Linux kernel and to</font><font color="#CCCCCC"> LLVM itself so we</font>

624
00:28:26,350 --> 00:28:29,860
have a bug tracker<font color="#CCCCCC"> I try</font><font color="#E5E5E5"> to like</font>

625
00:28:27,820 --> 00:28:31,299
<font color="#CCCCCC">highlight like good first issues so</font>

626
00:28:29,860 --> 00:28:33,340
we're<font color="#E5E5E5"> happy to hand out bugs if you're</font>

627
00:28:31,299 --> 00:28:34,779
looking to either start contributing to

628
00:28:33,340 --> 00:28:36,340
either one of these code bases I'm more

629
00:28:34,779 --> 00:28:38,649
than happy to help<font color="#E5E5E5"> you shoot me an email</font>

630
00:28:36,340 --> 00:28:40,809
is<font color="#E5E5E5"> on the first slide</font><font color="#CCCCCC"> I'm more</font><font color="#E5E5E5"> than</font>

631
00:28:38,649 --> 00:28:42,158
<font color="#CCCCCC">that's you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> just my thing is like</font>

632
00:28:40,809 --> 00:28:44,110
<font color="#E5E5E5">how do I</font><font color="#CCCCCC"> get people</font><font color="#E5E5E5"> involved in</font>

633
00:28:42,159 --> 00:28:45,669
contributing<font color="#CCCCCC"> to the open source software</font>

634
00:28:44,110 --> 00:28:46,869
that<font color="#E5E5E5"> they love and use every day this is</font>

635
00:28:45,669 --> 00:28:47,649
something<font color="#CCCCCC"> that's personally important to</font>

636
00:28:46,869 --> 00:28:50,199
<font color="#E5E5E5">me</font>

637
00:28:47,649 --> 00:28:53,049
we're running continuous integration<font color="#E5E5E5"> for</font>

638
00:28:50,200 --> 00:28:59,549
various architectures<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> arm 64</font>

639
00:28:53,049 --> 00:29:03,220
x86 64<font color="#CCCCCC"> arm v7 arm</font><font color="#E5E5E5"> v6</font><font color="#CCCCCC"> r</font><font color="#E5E5E5"> v5 PowerPC</font>

640
00:28:59,549 --> 00:29:07,809
PowerPC 64<font color="#CCCCCC"> little-endian and</font><font color="#E5E5E5"> PowerPC</font>

641
00:29:03,220 --> 00:29:10,090
32-bit running continuously the mainline

642
00:29:07,809 --> 00:29:14,110
Linux kernel Linux next

643
00:29:10,090 --> 00:29:18,490
LTS branches<font color="#CCCCCC"> for 19</font><font color="#E5E5E5"> for 14</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> nine</font>

644
00:29:14,110 --> 00:29:20,949
<font color="#E5E5E5">four four</font><font color="#CCCCCC"> so it's a poor man see I like</font>

645
00:29:18,490 --> 00:29:23,259
cron job running<font color="#E5E5E5"> every night kind of</font>

646
00:29:20,950 --> 00:29:24,820
thing but<font color="#E5E5E5"> for all these various like I</font>

647
00:29:23,259 --> 00:29:27,700
<font color="#E5E5E5">don't know 30 something targets kind of</font>

648
00:29:24,820 --> 00:29:30,100
thing<font color="#CCCCCC"> so you can check that</font><font color="#E5E5E5"> out it's</font>

649
00:29:27,700 --> 00:29:31,929
just<font color="#E5E5E5"> running on Travis</font><font color="#CCCCCC"> we have a link</font><font color="#E5E5E5"> to</font>

650
00:29:30,100 --> 00:29:33,279
<font color="#E5E5E5">other talks and other kind</font><font color="#CCCCCC"> of material</font>

651
00:29:31,929 --> 00:29:35,200
if you're interested in<font color="#E5E5E5"> finding out what</font>

652
00:29:33,279 --> 00:29:37,960
<font color="#CCCCCC">kind of more</font><font color="#E5E5E5"> about the history</font><font color="#CCCCCC"> and the</font>

653
00:29:35,200 --> 00:29:39,549
project and stuff<font color="#E5E5E5"> god bolt org is</font>

654
00:29:37,960 --> 00:29:41,769
<font color="#E5E5E5">amazing</font><font color="#CCCCCC"> that's the link I showed</font><font color="#E5E5E5"> you</font>

655
00:29:39,549 --> 00:29:43,480
earlier<font color="#CCCCCC"> with the the code</font><font color="#E5E5E5"> that was only</font>

656
00:29:41,769 --> 00:29:45,070
inlinable<font color="#E5E5E5"> that's like if you want to</font>

657
00:29:43,480 --> 00:29:47,649
<font color="#CCCCCC">communicate to a compiler developer</font><font color="#E5E5E5"> a</font>

658
00:29:45,070 --> 00:29:49,600
bug like send them a god bolt link<font color="#CCCCCC"> okay</font>

659
00:29:47,649 --> 00:29:51,758
that is like the shared language<font color="#E5E5E5"> that</font>

660
00:29:49,600 --> 00:29:54,279
compiler people understand like here is

661
00:29:51,759 --> 00:29:56,919
a clear<font color="#E5E5E5"> case here's what GCC does this</font>

662
00:29:54,279 --> 00:29:59,679
is what<font color="#CCCCCC"> I want and clang</font><font color="#E5E5E5"> or here's what</font>

663
00:29:56,919 --> 00:30:01,809
I code<font color="#CCCCCC"> and here's how it crashes</font>

664
00:29:59,679 --> 00:30:03,879
clanging<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> kind of thing</font>

665
00:30:01,809 --> 00:30:05,080
<font color="#CCCCCC">see reduce</font><font color="#E5E5E5"> I just wrote a blog post</font><font color="#CCCCCC"> on</font>

666
00:30:03,879 --> 00:30:07,449
<font color="#CCCCCC">it</font><font color="#E5E5E5"> it's incredible</font>

667
00:30:05,080 --> 00:30:10,840
I've it I have<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> at least</font><font color="#CCCCCC"> 10</font>

668
00:30:07,450 --> 00:30:12,730
compiler bugs that<font color="#E5E5E5"> I've found with it</font><font color="#CCCCCC"> it</font>

669
00:30:10,840 --> 00:30:14,529
you kind<font color="#CCCCCC"> of give it</font><font color="#E5E5E5"> a shell script</font><font color="#CCCCCC"> where</font>

670
00:30:12,730 --> 00:30:17,529
you put whatever you<font color="#CCCCCC"> want in</font><font color="#E5E5E5"> it and then</font>

671
00:30:14,529 --> 00:30:19,090
you say like in source file<font color="#E5E5E5"> and it</font>

672
00:30:17,529 --> 00:30:20,669
mutates<font color="#E5E5E5"> the source file paring it down</font>

673
00:30:19,090 --> 00:30:23,959
until you<font color="#E5E5E5"> have like a nice concise</font>

674
00:30:20,669 --> 00:30:27,110
reproducer<font color="#CCCCCC"> so I found like error</font>

675
00:30:23,960 --> 00:30:28,820
<font color="#CCCCCC">that link time you can say</font><font color="#E5E5E5"> like the this</font>

676
00:30:27,110 --> 00:30:30,830
the script<font color="#E5E5E5"> returns a different</font><font color="#CCCCCC"> return</font>

677
00:30:28,820 --> 00:30:33,290
code based on if this symbol is found

678
00:30:30,830 --> 00:30:35,389
<font color="#E5E5E5">after</font><font color="#CCCCCC"> running nm or not or something on</font>

679
00:30:33,290 --> 00:30:37,780
a on a binary or does<font color="#CCCCCC"> it crash the</font>

680
00:30:35,390 --> 00:30:41,170
compiler<font color="#E5E5E5"> or does a compiler produce</font>

681
00:30:37,780 --> 00:30:44,389
strange output or<font color="#E5E5E5"> strange this assembly</font>

682
00:30:41,170 --> 00:30:46,250
<font color="#CCCCCC">bear is this utility that hooks make</font><font color="#E5E5E5"> for</font>

683
00:30:44,390 --> 00:30:47,780
and it kind of spits out a<font color="#CCCCCC"> compiled</font>

684
00:30:46,250 --> 00:30:49,520
commands<font color="#E5E5E5"> that JSON file which you can</font>

685
00:30:47,780 --> 00:30:55,540
<font color="#E5E5E5">then feed into static analysis tools</font>

686
00:30:49,520 --> 00:30:58,910
like scan build clang static analyzer<font color="#E5E5E5"> or</font>

687
00:30:55,540 --> 00:31:01,100
was it clang<font color="#E5E5E5"> cpp check</font><font color="#CCCCCC"> write was the</font>

688
00:30:58,910 --> 00:31:03,500
other utility<font color="#CCCCCC"> I think that uses it or</font>

689
00:31:01,100 --> 00:31:05,780
alternatively<font color="#E5E5E5"> the kernel will spit out</font>

690
00:31:03,500 --> 00:31:08,120
these dot o dot CMD files that have all

691
00:31:05,780 --> 00:31:10,250
the commands for<font color="#E5E5E5"> each translation unit</font>

692
00:31:08,120 --> 00:31:12,169
when you build the<font color="#CCCCCC"> issue with that is it</font>

693
00:31:10,250 --> 00:31:15,050
only<font color="#E5E5E5"> produces them I believe if</font>

694
00:31:12,170 --> 00:31:17,390
compilation is successful which we could

695
00:31:15,050 --> 00:31:20,060
probably<font color="#E5E5E5"> fix that in K build but that</font>

696
00:31:17,390 --> 00:31:22,430
that's helpful as well<font color="#CCCCCC"> just because like</font>

697
00:31:20,060 --> 00:31:24,260
when<font color="#CCCCCC"> C reducing a bug</font><font color="#E5E5E5"> you sometimes</font><font color="#CCCCCC"> need</font>

698
00:31:22,430 --> 00:31:25,820
to know<font color="#E5E5E5"> exactly like what</font><font color="#CCCCCC"> flags were</font>

699
00:31:24,260 --> 00:31:28,010
passed to<font color="#E5E5E5"> the compiler to reproduce a</font>

700
00:31:25,820 --> 00:31:29,570
given issue and so like<font color="#E5E5E5"> getting the</font>

701
00:31:28,010 --> 00:31:31,940
<font color="#CCCCCC">coast flags out of compiled commands</font>

702
00:31:29,570 --> 00:31:33,860
<font color="#E5E5E5">like JSON or</font><font color="#CCCCCC"> the dot CMD file is</font>

703
00:31:31,940 --> 00:31:36,410
critical<font color="#E5E5E5"> same thing with stack analysis</font>

704
00:31:33,860 --> 00:31:38,719
is different<font color="#CCCCCC"> command line flags will</font>

705
00:31:36,410 --> 00:31:41,290
change your translation unit<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

706
00:31:38,720 --> 00:31:44,750
once it's been pre processed

707
00:31:41,290 --> 00:31:46,340
yes yep so<font color="#CCCCCC"> yep I've had</font><font color="#E5E5E5"> that issue</font>

708
00:31:44,750 --> 00:31:48,650
<font color="#E5E5E5">before where I</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> say like grep for</font>

709
00:31:46,340 --> 00:31:51,320
like a crash<font color="#E5E5E5"> and then it paired it</font><font color="#CCCCCC"> down</font>

710
00:31:48,650 --> 00:31:54,860
to some like bizarro C syntax thing that

711
00:31:51,320 --> 00:31:57,530
like and and kind of kind of the clangs

712
00:31:54,860 --> 00:31:59,629
maintainer is like well do we<font color="#E5E5E5"> need to</font>

713
00:31:57,530 --> 00:32:02,270
fuzz this this the C front end<font color="#E5E5E5"> to like</font>

714
00:31:59,630 --> 00:32:04,010
if it it's not valid C code like<font color="#CCCCCC"> but the</font>

715
00:32:02,270 --> 00:32:06,730
compiler<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> or not right</font><font color="#E5E5E5"> is it</font>

716
00:32:04,010 --> 00:32:09,740
really a bug I don't know

717
00:32:06,730 --> 00:32:11,850
cool so that's all we have thank you

718
00:32:09,740 --> 00:32:15,380
<font color="#E5E5E5">very much</font>

719
00:32:11,850 --> 00:32:15,379
[Applause]

720
00:32:17,650 --> 00:32:26,140
and we're<font color="#E5E5E5"> happy to take questions now</font>

721
00:32:21,140 --> 00:32:26,140
<font color="#E5E5E5">this time</font><font color="#CCCCCC"> oh sorry I guess it's time up</font>

722
00:32:33,920 --> 00:32:39,240
yep so the<font color="#CCCCCC"> questioners was around</font><font color="#E5E5E5"> what</font>

723
00:32:37,410 --> 00:32:41,460
<font color="#E5E5E5">set of Colonel configuration options do</font>

724
00:32:39,240 --> 00:32:43,320
<font color="#CCCCCC">we use so the kernel</font><font color="#E5E5E5"> itself has a build</font>

725
00:32:41,460 --> 00:32:45,720
system called<font color="#CCCCCC"> K builds that</font><font color="#E5E5E5"> is highly</font>

726
00:32:43,320 --> 00:32:47,010
configurable<font color="#CCCCCC"> right so it depends on the</font>

727
00:32:45,720 --> 00:32:49,380
<font color="#CCCCCC">distribution right like you'll have</font>

728
00:32:47,010 --> 00:32:50,640
distributions of Linux where there's no

729
00:32:49,380 --> 00:32:52,320
guarantee what kind<font color="#CCCCCC"> of hardware they're</font>

730
00:32:50,640 --> 00:32:54,480
gonna<font color="#E5E5E5"> run on so they're gonna compile a</font>

731
00:32:52,320 --> 00:32:56,340
big kernel image that has tons of

732
00:32:54,480 --> 00:32:58,170
drivers in it<font color="#CCCCCC"> because someone's gonna</font>

733
00:32:56,340 --> 00:33:00,389
try to put Debian on their toaster or

734
00:32:58,170 --> 00:33:02,220
their faucet or something right<font color="#E5E5E5"> so just</font>

735
00:33:00,390 --> 00:33:04,320
turn<font color="#E5E5E5"> everything on for Android</font>

736
00:33:02,220 --> 00:33:06,090
particularly for pixel<font color="#E5E5E5"> you know we have</font>

737
00:33:04,320 --> 00:33:07,350
one hardware configuration<font color="#E5E5E5"> right so</font>

738
00:33:06,090 --> 00:33:09,120
we're gonna pair our kernels down and

739
00:33:07,350 --> 00:33:10,800
know exactly<font color="#CCCCCC"> what</font><font color="#E5E5E5"> we're running but then</font>

740
00:33:09,120 --> 00:33:12,360
like we may have<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of tree drivers</font>

741
00:33:10,800 --> 00:33:14,909
that<font color="#E5E5E5"> are problematic and things as well</font>

742
00:33:12,360 --> 00:33:16,770
<font color="#CCCCCC">and so that's definitely an issue of</font>

743
00:33:14,910 --> 00:33:18,330
does<font color="#E5E5E5"> it build or not right so someone</font>

744
00:33:16,770 --> 00:33:19,860
might come to me and say like well can

745
00:33:18,330 --> 00:33:21,240
<font color="#CCCCCC">it build a kernel outright and</font><font color="#E5E5E5"> my</font>

746
00:33:19,860 --> 00:33:23,340
questions usually<font color="#E5E5E5"> like well what are</font>

747
00:33:21,240 --> 00:33:25,320
your configs<font color="#E5E5E5"> right because the hard</font>

748
00:33:23,340 --> 00:33:26,970
thing with the kernel like baseline what

749
00:33:25,320 --> 00:33:28,649
we run in CI is we want<font color="#CCCCCC"> to make sure</font>

750
00:33:26,970 --> 00:33:30,420
<font color="#E5E5E5">that the def configs build so each</font>

751
00:33:28,650 --> 00:33:33,450
architecture has a recommended kind of

752
00:33:30,420 --> 00:33:37,490
set of configurations<font color="#CCCCCC"> so so that's</font><font color="#E5E5E5"> kind</font>

753
00:33:33,450 --> 00:33:41,970
<font color="#CCCCCC">of what we cover continuously</font><font color="#E5E5E5"> from there</font>

754
00:33:37,490 --> 00:33:43,710
<font color="#E5E5E5">we try to run all yes can all yes config</font>

755
00:33:41,970 --> 00:33:45,360
builds every so often the issue with all

756
00:33:43,710 --> 00:33:46,890
yes config which turns on lots of

757
00:33:45,360 --> 00:33:48,330
configs<font color="#E5E5E5"> is the kernel has a lot of</font>

758
00:33:46,890 --> 00:33:51,510
configs that are<font color="#E5E5E5"> mutually exclusive</font><font color="#CCCCCC"> and</font>

759
00:33:48,330 --> 00:33:52,919
so like you get<font color="#E5E5E5"> this implementation</font><font color="#CCCCCC"> of</font>

760
00:33:51,510 --> 00:33:55,320
<font color="#E5E5E5">this function or</font><font color="#CCCCCC"> that depending on the</font>

761
00:33:52,920 --> 00:33:57,030
config so all yes doesn't<font color="#E5E5E5"> mean like all</font>

762
00:33:55,320 --> 00:33:58,500
the code in the kernel<font color="#E5E5E5"> so there's</font>

763
00:33:57,030 --> 00:34:00,720
probably code hidden<font color="#E5E5E5"> somewhere in the</font>

764
00:33:58,500 --> 00:34:02,430
kernel<font color="#CCCCCC"> that will crash clang or clang</font>

765
00:34:00,720 --> 00:34:03,690
can't compile and it's like a matter<font color="#CCCCCC"> of</font>

766
00:34:02,430 --> 00:34:06,270
<font color="#E5E5E5">finding it</font><font color="#CCCCCC"> so the kernel</font><font color="#E5E5E5"> has something</font>

767
00:34:03,690 --> 00:34:07,890
called<font color="#E5E5E5"> Rand config which kernel CI does</font>

768
00:34:06,270 --> 00:34:09,270
run so once they<font color="#E5E5E5"> have claim support</font>

769
00:34:07,890 --> 00:34:10,740
they'll probably help us find it it's

770
00:34:09,270 --> 00:34:14,100
<font color="#E5E5E5">just a random coin flip so</font><font color="#CCCCCC"> you have to</font>

771
00:34:10,739 --> 00:34:19,500
flip that coin a lot to find all the

772
00:34:14,100 --> 00:34:23,699
<font color="#E5E5E5">bugs and stuff so they're on fabricator</font>

773
00:34:19,500 --> 00:34:24,780
<font color="#CCCCCC">I</font><font color="#E5E5E5"> link to them from</font><font color="#CCCCCC"> the slides if not if</font>

774
00:34:23,699 --> 00:34:26,549
you go to an art issue tracker

775
00:34:24,780 --> 00:34:28,500
they're like posted over there<font color="#CCCCCC"> the kind</font>

776
00:34:26,550 --> 00:34:30,780
of<font color="#E5E5E5"> thing as well</font><font color="#CCCCCC"> so if you you can pull</font>

777
00:34:28,500 --> 00:34:32,580
<font color="#E5E5E5">them down on top of main line</font><font color="#CCCCCC"> clang</font>

778
00:34:30,780 --> 00:34:34,410
rebuild clang and<font color="#E5E5E5"> then try it out in the</font>

779
00:34:32,580 --> 00:34:36,989
kernel<font color="#CCCCCC"> you'll run into</font><font color="#E5E5E5"> the issue with</font>

780
00:34:34,409 --> 00:34:39,389
the static always in line<font color="#CCCCCC"> I have a patch</font>

781
00:34:36,989 --> 00:34:43,439
for x86 that converts<font color="#E5E5E5"> converts those all</font>

782
00:34:39,389 --> 00:34:44,949
to<font color="#CCCCCC"> 2 macros for arm 64</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> rabbit-hole</font>

783
00:34:43,440 --> 00:34:48,220
got really deep<font color="#E5E5E5"> and I never</font>

784
00:34:44,949 --> 00:34:53,168
that<font color="#E5E5E5"> pouch</font><font color="#CCCCCC"> but it's a starting</font><font color="#E5E5E5"> point if</font>

785
00:34:48,219 --> 00:34:54,668
you're interested<font color="#E5E5E5"> you'll still need the</font>

786
00:34:53,168 --> 00:34:56,290
out of tree patch<font color="#E5E5E5"> because in lining</font>

787
00:34:54,668 --> 00:34:58,629
<font color="#E5E5E5">support is not implemented in the</font><font color="#CCCCCC"> Assam</font>

788
00:34:56,290 --> 00:35:03,009
go<font color="#E5E5E5"> to patches yet so so that</font><font color="#CCCCCC"> the plan is</font>

789
00:34:58,630 --> 00:35:05,500
<font color="#CCCCCC">to land</font><font color="#E5E5E5"> yes yes that is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> plan is like</font>

790
00:35:03,010 --> 00:35:07,359
once clang has support<font color="#CCCCCC"> fry um go to then</font>

791
00:35:05,500 --> 00:35:09,520
we're gonna work on getting<font color="#E5E5E5"> it to be</font>

792
00:35:07,359 --> 00:35:12,009
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> inline</font><font color="#E5E5E5"> basic blocks that have</font>

793
00:35:09,520 --> 00:35:14,109
has<font color="#E5E5E5"> them go to statements in them kind</font>

794
00:35:12,010 --> 00:35:15,730
of thing and then<font color="#E5E5E5"> the goal is</font>

795
00:35:14,109 --> 00:35:17,380
theoretically there should be no other

796
00:35:15,730 --> 00:35:19,510
<font color="#E5E5E5">bugs but sometimes you don't have</font>

797
00:35:17,380 --> 00:35:21,040
<font color="#CCCCCC">visibility beyond like one bug so you're</font>

798
00:35:19,510 --> 00:35:22,540
like yes<font color="#E5E5E5"> I fixed it and then you try</font><font color="#CCCCCC"> it</font>

799
00:35:21,040 --> 00:35:25,960
<font color="#E5E5E5">out and then something else is</font><font color="#CCCCCC"> broken</font><font color="#E5E5E5"> so</font>

800
00:35:22,540 --> 00:35:29,140
I can't<font color="#CCCCCC"> promise you but I think</font><font color="#E5E5E5"> it</font>

801
00:35:25,960 --> 00:35:34,630
should<font color="#CCCCCC"> work Oh</font>

802
00:35:29,140 --> 00:35:37,029
I mean alternatively<font color="#CCCCCC"> like</font><font color="#E5E5E5"> alternatively</font>

803
00:35:34,630 --> 00:35:39,070
<font color="#E5E5E5">you can revert the kernels use of</font><font color="#CCCCCC"> azzam</font>

804
00:35:37,030 --> 00:35:41,800
<font color="#E5E5E5">go to forcing it kind of thing it's not</font>

805
00:35:39,070 --> 00:36:22,780
not a real solution<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know it you</font>

806
00:35:41,800 --> 00:36:24,910
still get<font color="#E5E5E5"> a working kernel so so</font>

807
00:36:22,780 --> 00:36:27,339
eventually we're looking to like get

808
00:36:24,910 --> 00:36:29,140
help from kernel CI<font color="#E5E5E5"> and zero</font><font color="#CCCCCC"> day bot for</font>

809
00:36:27,339 --> 00:36:32,828
<font color="#E5E5E5">spotting these regressions and kernel</font><font color="#CCCCCC"> C</font>

810
00:36:29,140 --> 00:36:34,180
<font color="#CCCCCC">eyes is doing like they pin the the</font>

811
00:36:32,829 --> 00:36:35,560
kernel version and then try with

812
00:36:34,180 --> 00:36:37,299
different<font color="#CCCCCC"> versions of clang like top of</font>

813
00:36:35,560 --> 00:36:39,130
tree clang<font color="#E5E5E5"> and like they'll report to us</font>

814
00:36:37,300 --> 00:36:41,160
<font color="#E5E5E5">when people</font><font color="#CCCCCC"> break the clanging LLVM</font>

815
00:36:39,130 --> 00:36:43,150
trees which is<font color="#CCCCCC"> like pretty frequently</font>

816
00:36:41,160 --> 00:36:44,410
<font color="#E5E5E5">which is kind of frustrating</font><font color="#CCCCCC"> but it's</font>

817
00:36:43,150 --> 00:36:46,420
good<font color="#CCCCCC"> that we're getting eyes and</font>

818
00:36:44,410 --> 00:36:48,460
coverage<font color="#E5E5E5"> and stuff so usually like I'll</font>

819
00:36:46,420 --> 00:36:50,710
kind<font color="#E5E5E5"> of forward</font><font color="#CCCCCC"> these reports to LLVM</font>

820
00:36:48,460 --> 00:36:52,270
developers saying<font color="#E5E5E5"> hey you probably</font>

821
00:36:50,710 --> 00:36:54,460
already know this someone probably poked

822
00:36:52,270 --> 00:36:56,410
you but in case they didn't<font color="#E5E5E5"> we're you're</font>

823
00:36:54,460 --> 00:36:58,690
<font color="#E5E5E5">breaking the Linux kernel right now</font>

824
00:36:56,410 --> 00:36:59,649
kind of<font color="#E5E5E5"> thing calm then I would say on</font>

825
00:36:58,690 --> 00:37:01,390
the<font color="#CCCCCC"> Colonel's side like we're trying to</font>

826
00:36:59,650 --> 00:37:05,500
do like always have<font color="#E5E5E5"> patches upstream</font>

827
00:37:01,390 --> 00:37:06,730
have zero or like minimize the Delta as

828
00:37:05,500 --> 00:37:08,680
much as<font color="#CCCCCC"> possible so we're</font><font color="#E5E5E5"> not carrying</font>

829
00:37:06,730 --> 00:37:09,910
patches<font color="#CCCCCC"> around</font><font color="#E5E5E5"> kind of thing so it's</font>

830
00:37:08,680 --> 00:37:12,730
like as<font color="#E5E5E5"> soon as we have a fix it goes</font>

831
00:37:09,910 --> 00:37:14,828
upstream and and we work with<font color="#E5E5E5"> the kernel</font>

832
00:37:12,730 --> 00:37:23,680
maintainer<font color="#CCCCCC"> x' to make sure we get</font><font color="#E5E5E5"> a fix</font>

833
00:37:14,829 --> 00:37:25,630
and so we<font color="#CCCCCC"> disabled</font><font color="#E5E5E5"> we disabled no</font>

834
00:37:23,680 --> 00:37:28,240
integrated<font color="#E5E5E5"> AAS kind of thing for our</font>

835
00:37:25,630 --> 00:37:30,279
builds<font color="#E5E5E5"> for now for for the kernel makes</font>

836
00:37:28,240 --> 00:37:32,200
use of assembly both external sort

837
00:37:30,279 --> 00:37:34,059
assembly files<font color="#E5E5E5"> but then also the inline</font>

838
00:37:32,200 --> 00:37:35,410
assembly which is even more<font color="#E5E5E5"> complicated</font>

839
00:37:34,059 --> 00:37:50,710
<font color="#E5E5E5">because it has a</font><font color="#CCCCCC"> whole constraint</font>

840
00:37:35,410 --> 00:37:52,839
language with it and and<font color="#E5E5E5"> so like abuse</font>

841
00:37:50,710 --> 00:37:55,240
is an accurate term when talking about

842
00:37:52,839 --> 00:37:57,359
the code base<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> okay any other</font>

843
00:37:55,240 --> 00:37:57,359
questions

844
00:37:59,670 --> 00:38:05,650
<font color="#CCCCCC">good question so the question is about</font>

845
00:38:01,779 --> 00:38:08,170
what<font color="#E5E5E5"> is the plan for plugins so the</font>

846
00:38:05,650 --> 00:38:10,359
kernel<font color="#E5E5E5"> has I think</font><font color="#CCCCCC"> checked into the</font>

847
00:38:08,170 --> 00:38:12,490
source even like some some GCC plugins

848
00:38:10,359 --> 00:38:16,180
and then<font color="#E5E5E5"> some are maintained externally</font>

849
00:38:12,490 --> 00:38:17,709
so<font color="#CCCCCC"> LLVM does have a plug-in system when</font>

850
00:38:16,180 --> 00:38:19,029
<font color="#E5E5E5">I think back</font><font color="#CCCCCC"> to the earlier talk today</font>

851
00:38:17,710 --> 00:38:21,039
<font color="#CCCCCC">that was</font><font color="#E5E5E5"> an excellent talk that was</font>

852
00:38:19,029 --> 00:38:24,039
<font color="#E5E5E5">about tooling and and how to support</font>

853
00:38:21,039 --> 00:38:25,630
<font color="#E5E5E5">kind of this ABI instability in</font><font color="#CCCCCC"> LLVM I</font>

854
00:38:24,039 --> 00:38:27,849
think that<font color="#E5E5E5"> that's probably like a good</font>

855
00:38:25,630 --> 00:38:29,380
thing<font color="#E5E5E5"> to point to as far as like now you</font>

856
00:38:27,849 --> 00:38:30,849
you have a<font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> but how do you</font>

857
00:38:29,380 --> 00:38:32,680
<font color="#CCCCCC">guarantee it</font><font color="#E5E5E5"> works with the given</font>

858
00:38:30,849 --> 00:38:34,089
compiler<font color="#CCCCCC"> version that a user</font><font color="#E5E5E5"> has</font>

859
00:38:32,680 --> 00:38:39,779
especially<font color="#CCCCCC"> if the compiler doesn't have</font>

860
00:38:34,089 --> 00:38:42,460
a stable API itself<font color="#CCCCCC"> so from a</font><font color="#E5E5E5"> plug-in</font>

861
00:38:39,779 --> 00:38:44,500
<font color="#E5E5E5">maintenance perspective it makes my skin</font>

862
00:38:42,460 --> 00:38:46,839
crawl a little<font color="#CCCCCC"> bit but it's</font><font color="#E5E5E5"> not possible</font>

863
00:38:44,500 --> 00:38:49,299
<font color="#CCCCCC">it does have a</font><font color="#E5E5E5"> plug-in system</font><font color="#CCCCCC"> and I</font>

864
00:38:46,839 --> 00:38:52,089
<font color="#E5E5E5">think plugins are useful I think anyone</font>

865
00:38:49,299 --> 00:38:55,000
<font color="#E5E5E5">who thinks of reaching for a plug-in as</font>

866
00:38:52,089 --> 00:38:55,599
a tool needs<font color="#E5E5E5"> to sit down and really</font>

867
00:38:55,000 --> 00:38:57,579
<font color="#CCCCCC">think hard</font>

868
00:38:55,599 --> 00:38:59,890
should this be<font color="#E5E5E5"> implemented as a plug-in</font>

869
00:38:57,579 --> 00:39:02,710
<font color="#E5E5E5">or in the compiler itself so for</font>

870
00:38:59,890 --> 00:39:04,720
instance I'll give a case a recent talk

871
00:39:02,710 --> 00:39:07,180
at<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> cafe you was saying hey we use</font>

872
00:39:04,720 --> 00:39:09,819
a GCC<font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> to default initialize all</font>

873
00:39:07,180 --> 00:39:11,078
variables<font color="#CCCCCC"> i think</font>

874
00:39:09,819 --> 00:39:12,519
personally<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that's better</font>

875
00:39:11,079 --> 00:39:13,779
implemented just<font color="#CCCCCC"> in the compiler and</font>

876
00:39:12,519 --> 00:39:15,519
there's actually discussion about this

877
00:39:13,779 --> 00:39:17,709
for C++ and there's actually

878
00:39:15,519 --> 00:39:20,198
disagreement within<font color="#E5E5E5"> the LLVM community</font>

879
00:39:17,709 --> 00:39:22,118
people<font color="#E5E5E5"> saying oh you're gonna fork C++</font>

880
00:39:20,199 --> 00:39:24,609
and create<font color="#E5E5E5"> another dialect</font><font color="#CCCCCC"> you can't do</font>

881
00:39:22,119 --> 00:39:27,519
this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I feel like saying well for</font><font color="#CCCCCC"> see</font>

882
00:39:24,609 --> 00:39:29,859
which<font color="#E5E5E5"> development has kind of stopped on</font>

883
00:39:27,519 --> 00:39:31,180
like can<font color="#CCCCCC"> we please</font><font color="#E5E5E5"> have this since we</font>

884
00:39:29,859 --> 00:39:33,940
<font color="#CCCCCC">already have our own dialect</font>

885
00:39:31,180 --> 00:39:37,448
<font color="#CCCCCC">anyways</font><font color="#E5E5E5"> that we use in the kernel</font><font color="#CCCCCC"> like</font>

886
00:39:33,940 --> 00:39:39,369
kind<font color="#CCCCCC"> of every</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> flag you add like to</font>

887
00:39:37,449 --> 00:39:42,249
me this<font color="#E5E5E5"> could be another - F default</font>

888
00:39:39,369 --> 00:39:43,809
initialize<font color="#E5E5E5"> right and there's no need</font><font color="#CCCCCC"> for</font>

889
00:39:42,249 --> 00:39:45,069
<font color="#CCCCCC">a plugin</font><font color="#E5E5E5"> plugins are great if you want</font>

890
00:39:43,809 --> 00:39:46,449
to like hack something<font color="#E5E5E5"> up and play with</font>

891
00:39:45,069 --> 00:39:48,459
the compiler and<font color="#E5E5E5"> get something working</font><font color="#CCCCCC"> I</font>

892
00:39:46,449 --> 00:39:50,859
would say the<font color="#E5E5E5"> best case where I say</font>

893
00:39:48,459 --> 00:39:53,288
plugins make the most sense is when you

894
00:39:50,859 --> 00:39:55,690
have you need compiler technology<font color="#CCCCCC"> for</font>

895
00:39:53,289 --> 00:39:57,069
one given project<font color="#E5E5E5"> because then if you</font>

896
00:39:55,690 --> 00:39:59,410
were<font color="#CCCCCC"> going to say like to</font><font color="#E5E5E5"> submit this to</font>

897
00:39:57,069 --> 00:40:01,900
<font color="#E5E5E5">the compiler vendor and say this is only</font>

898
00:39:59,410 --> 00:40:03,308
used in<font color="#E5E5E5"> this one code codebase they're</font>

899
00:40:01,900 --> 00:40:04,479
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> tell you to get lost</font><font color="#CCCCCC"> they're not</font>

900
00:40:03,309 --> 00:40:06,699
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to want to</font><font color="#CCCCCC"> maintain this plug-in</font>

901
00:40:04,479 --> 00:40:29,799
system<font color="#E5E5E5"> because whatever whatever</font>

902
00:40:06,699 --> 00:40:32,130
maintenance<font color="#E5E5E5"> overhead there is thank you</font>

903
00:40:29,799 --> 00:40:32,130
<font color="#E5E5E5">so much</font>

904
00:40:34,430 --> 00:40:36,490
<font color="#E5E5E5">you</font>

