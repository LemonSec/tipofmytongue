1
00:00:04,700 --> 00:00:11,770
hi everyone<font color="#E5E5E5"> welcome my name's Martin and</font>

2
00:00:08,290 --> 00:00:14,899
this<font color="#E5E5E5"> is my collaborator Ricardo and</font>

3
00:00:11,770 --> 00:00:17,150
we're going to<font color="#CCCCCC"> be talking about solo 5</font>

4
00:00:14,900 --> 00:00:19,820
which<font color="#CCCCCC"> is something we're calling</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> real</font>

5
00:00:17,150 --> 00:00:21,168
targetable sandbox execution environment

6
00:00:19,820 --> 00:00:26,060
for<font color="#E5E5E5"> unicode also</font><font color="#CCCCCC"> that's a lot of</font><font color="#E5E5E5"> words</font>

7
00:00:21,169 --> 00:00:33,860
<font color="#E5E5E5">so we'll go and try and</font><font color="#CCCCCC"> explain some of</font>

8
00:00:26,060 --> 00:00:38,839
the concepts if if I can switch to<font color="#E5E5E5"> the</font>

9
00:00:33,860 --> 00:00:41,090
<font color="#E5E5E5">next slide</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so actually Ricardo told</font>

10
00:00:38,840 --> 00:00:43,100
me that in<font color="#E5E5E5"> the unit craft talk which was</font>

11
00:00:41,090 --> 00:00:45,829
just<font color="#CCCCCC"> before a bunch</font><font color="#E5E5E5"> of people were</font>

12
00:00:43,100 --> 00:00:47,989
<font color="#E5E5E5">asking what is a eunuch</font><font color="#CCCCCC"> and also that's</font>

13
00:00:45,829 --> 00:00:51,859
good that<font color="#CCCCCC"> I we</font><font color="#E5E5E5"> have some background</font><font color="#CCCCCC"> to</font>

14
00:00:47,989 --> 00:00:56,000
this<font color="#E5E5E5"> there are two separate terms that</font>

15
00:00:51,859 --> 00:00:58,039
people use here there are two separate

16
00:00:56,000 --> 00:01:00,980
<font color="#E5E5E5">terms that people use that are kind of</font>

17
00:00:58,039 --> 00:01:02,149
<font color="#E5E5E5">similar related</font><font color="#CCCCCC"> to each other</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

18
00:01:00,980 --> 00:01:04,759
<font color="#E5E5E5">think it's important to show some</font>

19
00:01:02,149 --> 00:01:06,770
<font color="#E5E5E5">distinction between them so a library</font>

20
00:01:04,760 --> 00:01:09,820
<font color="#E5E5E5">operating system these</font><font color="#CCCCCC"> are things that</font>

21
00:01:06,770 --> 00:01:13,158
have<font color="#CCCCCC"> been</font><font color="#E5E5E5"> around since the early 90s</font>

22
00:01:09,820 --> 00:01:15,589
<font color="#E5E5E5">they actually come from</font><font color="#CCCCCC"> even older</font>

23
00:01:13,159 --> 00:01:17,479
technologies<font color="#CCCCCC"> Butler Lampson had some</font>

24
00:01:15,590 --> 00:01:21,049
papers I think in the 70s<font color="#CCCCCC"> that were kind</font>

25
00:01:17,479 --> 00:01:22,908
<font color="#CCCCCC">of using similar concepts a library</font>

26
00:01:21,049 --> 00:01:25,430
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> is essentially just a</font>

27
00:01:22,909 --> 00:01:28,820
collection of libraries except those

28
00:01:25,430 --> 00:01:30,710
libraries<font color="#E5E5E5"> do traditional OAC kind of</font>

29
00:01:28,820 --> 00:01:33,439
things that you'd normally expect<font color="#CCCCCC"> to</font>

30
00:01:30,710 --> 00:01:36,048
have you know in<font color="#CCCCCC"> or</font><font color="#E5E5E5"> in your monolithic</font>

31
00:01:33,439 --> 00:01:38,658
kernel it's it's it's in the sacred

32
00:01:36,049 --> 00:01:41,750
kernel space<font color="#E5E5E5"> and you have file systems</font>

33
00:01:38,659 --> 00:01:43,840
TCP stacks and<font color="#E5E5E5"> so on with micro kernels</font>

34
00:01:41,750 --> 00:01:47,680
that's a bit different<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's still</font>

35
00:01:43,840 --> 00:01:50,630
part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> microkernel component</font>

36
00:01:47,680 --> 00:01:55,070
whereas here that it<font color="#E5E5E5"> really is just a</font>

37
00:01:50,630 --> 00:01:57,408
<font color="#E5E5E5">collection of libraries generally there</font>

38
00:01:55,070 --> 00:02:01,398
<font color="#CCCCCC">is</font><font color="#E5E5E5"> no concept of</font><font color="#CCCCCC"> process isolation or</font>

39
00:01:57,409 --> 00:02:05,500
the<font color="#CCCCCC"> Lovaas that's not really its</font><font color="#E5E5E5"> job and</font>

40
00:02:01,399 --> 00:02:05,500
are they also use cooperative scheduling

41
00:02:05,859 --> 00:02:12,290
for<font color="#E5E5E5"> the non OAC people in the room that</font>

42
00:02:09,919 --> 00:02:16,250
basically means applications are<font color="#E5E5E5"> more</font>

43
00:02:12,290 --> 00:02:17,660
like event loops rather than getting

44
00:02:16,250 --> 00:02:20,390
preempted

45
00:02:17,660 --> 00:02:22,400
internally so you take the<font color="#E5E5E5"> solution of</font>

46
00:02:20,390 --> 00:02:25,190
libraries and then you combine<font color="#CCCCCC"> it at</font>

47
00:02:22,400 --> 00:02:26,930
compile time<font color="#CCCCCC"> and out pops a eunuch</font>

48
00:02:25,190 --> 00:02:28,609
<font color="#CCCCCC">colonel</font><font color="#E5E5E5"> that's the distinction I'd like</font>

49
00:02:26,930 --> 00:02:32,540
to make between<font color="#E5E5E5"> these terms</font><font color="#CCCCCC"> the colonel</font>

50
00:02:28,610 --> 00:02:34,460
is the is the artifact<font color="#CCCCCC"> which is made up</font>

51
00:02:32,540 --> 00:02:39,670
of<font color="#CCCCCC"> your library operating system and</font>

52
00:02:34,460 --> 00:02:43,700
your application code unit<font color="#CCCCCC"> Colonel's</font>

53
00:02:39,670 --> 00:02:45,260
then you<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> process of being</font><font color="#E5E5E5"> built</font>

54
00:02:43,700 --> 00:02:46,910
out<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> collection of libraries we</font>

55
00:02:45,260 --> 00:02:50,390
can<font color="#E5E5E5"> minimize the code that goes into</font>

56
00:02:46,910 --> 00:02:53,240
<font color="#E5E5E5">them so you have</font><font color="#CCCCCC"> minimal</font><font color="#E5E5E5"> code size which</font>

57
00:02:50,390 --> 00:02:54,649
implies a minimal<font color="#E5E5E5"> 24 horizontal attack</font>

58
00:02:53,240 --> 00:02:57,950
surface there's not very much stuff that

59
00:02:54,650 --> 00:02:59,480
<font color="#CCCCCC">goes into this thing</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can think of</font>

60
00:02:57,950 --> 00:03:02,299
<font color="#E5E5E5">them as single purpose single</font>

61
00:02:59,480 --> 00:03:04,850
application operating systems though

62
00:03:02,300 --> 00:03:06,410
<font color="#E5E5E5">then people tend</font><font color="#CCCCCC"> to think oh it's</font>

63
00:03:04,850 --> 00:03:09,670
<font color="#CCCCCC">actually a kernel it has to run in</font>

64
00:03:06,410 --> 00:03:14,240
kernel space<font color="#CCCCCC"> that's not true</font>

65
00:03:09,670 --> 00:03:17,480
conceptually<font color="#CCCCCC"> I would my favorite way of</font>

66
00:03:14,240 --> 00:03:22,700
looking at it is it's<font color="#CCCCCC"> just a process</font>

67
00:03:17,480 --> 00:03:32,649
that does more so it does more operating

68
00:03:22,700 --> 00:03:38,329
<font color="#E5E5E5">system type things so what is solo</font><font color="#CCCCCC"> 5</font>

69
00:03:32,650 --> 00:03:41,420
<font color="#CCCCCC">this is the</font><font color="#E5E5E5"> shape of solo 5 and the top</font>

70
00:03:38,330 --> 00:03:45,860
<font color="#CCCCCC">bit so is where your unique kernel</font><font color="#E5E5E5"> and</font>

71
00:03:41,420 --> 00:03:48,470
library<font color="#E5E5E5"> Alice go</font><font color="#CCCCCC"> and the bottom triangle</font>

72
00:03:45,860 --> 00:03:54,380
<font color="#CCCCCC">pointing up which is much bigger</font><font color="#E5E5E5"> in this</font>

73
00:03:48,470 --> 00:03:56,090
<font color="#E5E5E5">case is some host thing right</font><font color="#CCCCCC"> and so if</font>

74
00:03:54,380 --> 00:03:59,019
I've occupies the space<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the blue</font>

75
00:03:56,090 --> 00:03:59,020
circle in the<font color="#CCCCCC"> middle</font>

76
00:04:03,680 --> 00:04:09,269
okay what is this thing so it's there

77
00:04:07,560 --> 00:04:12,840
<font color="#E5E5E5">there are three three important parts</font><font color="#CCCCCC"> to</font>

78
00:04:09,269 --> 00:04:15,420
<font color="#E5E5E5">it one</font><font color="#CCCCCC"> is a minimalist</font><font color="#E5E5E5"> legacy free</font>

79
00:04:12,840 --> 00:04:18,000
interface right so so really really

80
00:04:15,420 --> 00:04:19,889
<font color="#E5E5E5">small</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> by interface</font><font color="#CCCCCC"> as I'll go to</font>

81
00:04:18,000 --> 00:04:22,259
show later it's basically a bunch of

82
00:04:19,889 --> 00:04:25,320
<font color="#CCCCCC">seed function calls</font><font color="#E5E5E5"> then we have some</font>

83
00:04:22,259 --> 00:04:29,610
bindings which are the<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> of</font>

84
00:04:25,320 --> 00:04:31,469
that interface<font color="#CCCCCC"> and in this picture here</font>

85
00:04:29,610 --> 00:04:33,930
the bindings would be roughly the top

86
00:04:31,470 --> 00:04:38,760
bits<font color="#E5E5E5"> the top part of the intersection of</font>

87
00:04:33,930 --> 00:04:40,860
the circle with<font color="#E5E5E5"> the triangle and we have</font>

88
00:04:38,760 --> 00:04:43,979
bindings for microkernels for separation

89
00:04:40,860 --> 00:04:47,070
kernels<font color="#E5E5E5"> so for a</font><font color="#CCCCCC"> tire base hypervisors</font>

90
00:04:43,979 --> 00:04:51,599
so<font color="#CCCCCC"> Cloud hypervisors basically and</font>

91
00:04:47,070 --> 00:04:54,210
existing monolithic kernels<font color="#CCCCCC"> additionally</font>

92
00:04:51,600 --> 00:04:55,740
on<font color="#E5E5E5"> a mala that can all we have a third</font>

93
00:04:54,210 --> 00:04:59,549
concept<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a component</font><font color="#E5E5E5"> we call a</font>

94
00:04:55,740 --> 00:05:01,530
tender and that's used to strongly

95
00:04:59,550 --> 00:05:03,900
sandbox the unit kernel further away

96
00:05:01,530 --> 00:05:06,030
<font color="#CCCCCC">from this big bad monolithic kernel with</font>

97
00:05:03,900 --> 00:05:08,969
its huge interfaces as all<font color="#CCCCCC"> to show in a</font>

98
00:05:06,030 --> 00:05:10,770
bit<font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> two tenders there's a</font>

99
00:05:08,970 --> 00:05:15,660
<font color="#E5E5E5">hardware virtualized ender and a sandbox</font>

100
00:05:10,770 --> 00:05:17,940
<font color="#E5E5E5">process tender from the library</font>

101
00:05:15,660 --> 00:05:19,740
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and although</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

102
00:05:17,940 --> 00:05:22,020
application and library operating system

103
00:05:19,740 --> 00:05:24,840
developers<font color="#E5E5E5"> point of view seller 5 is</font>

104
00:05:22,020 --> 00:05:26,639
just middleware so it ideally<font color="#CCCCCC"> it's</font>

105
00:05:24,840 --> 00:05:28,830
integrated directly<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> boss</font>

106
00:05:26,639 --> 00:05:32,849
build system and you don't<font color="#CCCCCC"> actually</font>

107
00:05:28,830 --> 00:05:35,820
interact with<font color="#E5E5E5"> it directly</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> example for</font>

108
00:05:32,849 --> 00:05:38,190
Mirage OS is it is just<font color="#CCCCCC"> a different</font>

109
00:05:35,820 --> 00:05:40,590
parameter to<font color="#E5E5E5"> Mirage configure where you</font>

110
00:05:38,190 --> 00:05:43,860
can say which of these<font color="#CCCCCC"> targets I want</font>

111
00:05:40,590 --> 00:05:44,630
and out pops the unit<font color="#CCCCCC"> kernel that's the</font>

112
00:05:43,860 --> 00:05:47,820
way it should<font color="#E5E5E5"> be</font>

113
00:05:44,630 --> 00:05:52,010
<font color="#E5E5E5">other</font><font color="#CCCCCC"> libo aces are not quite</font><font color="#E5E5E5"> up to that</font>

114
00:05:47,820 --> 00:05:52,010
state yet but hopefully<font color="#CCCCCC"> we'll get there</font>

115
00:05:52,190 --> 00:05:59,699
so comparing the solar<font color="#E5E5E5"> 5 shape to other</font>

116
00:05:57,330 --> 00:06:03,900
<font color="#E5E5E5">common isolation interfaces and and some</font>

117
00:05:59,699 --> 00:06:09,120
units of execution again bottom side is

118
00:06:03,900 --> 00:06:11,460
<font color="#E5E5E5">always some host and the top part is the</font>

119
00:06:09,120 --> 00:06:14,450
<font color="#E5E5E5">unit of execution that we're comparing</font>

120
00:06:11,460 --> 00:06:14,450
<font color="#E5E5E5">certified against now</font>

121
00:06:16,350 --> 00:06:22,930
what I want to show you here<font color="#CCCCCC"> is both</font>

122
00:06:20,370 --> 00:06:25,390
horizontally in the<font color="#E5E5E5"> middle where where</font>

123
00:06:22,930 --> 00:06:27,450
these where they meet at this line<font color="#E5E5E5"> there</font>

124
00:06:25,390 --> 00:06:32,370
is something<font color="#CCCCCC"> that represents with</font>

125
00:06:27,450 --> 00:06:37,479
relative width of these interfaces<font color="#CCCCCC"> also</font>

126
00:06:32,370 --> 00:06:40,660
vertically<font color="#E5E5E5"> I'm roughly</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> roughly not</font>

127
00:06:37,480 --> 00:06:42,970
entirely to scale comparing that<font color="#E5E5E5"> unit</font>

128
00:06:40,660 --> 00:06:45,390
<font color="#E5E5E5">kernels are small containers are</font>

129
00:06:42,970 --> 00:06:47,560
generally larger and the VM well a

130
00:06:45,390 --> 00:06:54,700
traditional VM can just be as big as

131
00:06:47,560 --> 00:06:59,950
your<font color="#E5E5E5"> host</font><font color="#CCCCCC"> or bigger so so the width of</font>

132
00:06:54,700 --> 00:07:04,150
<font color="#E5E5E5">this interface in the container case I'm</font>

133
00:06:59,950 --> 00:07:08,020
actually showing that<font color="#CCCCCC"> the interface is</font>

134
00:07:04,150 --> 00:07:11,260
<font color="#CCCCCC">the entire host interface</font><font color="#E5E5E5"> now people may</font>

135
00:07:08,020 --> 00:07:14,289
<font color="#E5E5E5">say well okay but</font><font color="#CCCCCC"> it's namespaced</font><font color="#E5E5E5"> and we</font>

136
00:07:11,260 --> 00:07:17,050
have<font color="#E5E5E5"> C groups and whatever</font><font color="#CCCCCC"> actually</font>

137
00:07:14,290 --> 00:07:18,790
<font color="#CCCCCC">that's just</font><font color="#E5E5E5"> adding more logic to this</font>

138
00:07:17,050 --> 00:07:21,150
interface<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is just as wide as it</font>

139
00:07:18,790 --> 00:07:21,150
was before

140
00:07:21,600 --> 00:07:27,160
you can switch bits of it off<font color="#CCCCCC"> which some</font>

141
00:07:25,270 --> 00:07:30,159
<font color="#E5E5E5">people do with seconds we'll talk about</font>

142
00:07:27,160 --> 00:07:31,720
<font color="#E5E5E5">that</font><font color="#CCCCCC"> in a bit but most of the time in</font>

143
00:07:30,160 --> 00:07:37,000
your<font color="#E5E5E5"> general container case you still</font>

144
00:07:31,720 --> 00:07:40,360
<font color="#E5E5E5">have access to</font><font color="#CCCCCC"> 350 calls in the case</font>

145
00:07:37,000 --> 00:07:45,700
with the traditional VM<font color="#E5E5E5"> talking to some</font>

146
00:07:40,360 --> 00:07:48,310
kind of hosts hosts or hypervisor<font color="#E5E5E5"> the</font>

147
00:07:45,700 --> 00:07:50,349
entire interface<font color="#CCCCCC"> between the VM and the</font>

148
00:07:48,310 --> 00:07:52,960
<font color="#CCCCCC">host is actually quite</font><font color="#E5E5E5"> big</font><font color="#CCCCCC"> so you've got</font>

149
00:07:50,350 --> 00:07:58,720
tons<font color="#E5E5E5"> of stuff in you've got a CPI device</font>

150
00:07:52,960 --> 00:08:02,289
discovery<font color="#CCCCCC"> Verte io PCI whatever all</font><font color="#E5E5E5"> of</font>

151
00:07:58,720 --> 00:08:06,720
these things are in themselves<font color="#CCCCCC"> quite</font>

152
00:08:02,290 --> 00:08:06,720
wide and complicated and stateful

153
00:08:10,889 --> 00:08:18,009
so the guiding<font color="#E5E5E5"> philosophy of</font><font color="#CCCCCC"> Soler</font><font color="#E5E5E5"> 5 is</font>

154
00:08:14,350 --> 00:08:21,270
that the interface<font color="#E5E5E5"> must be minimal that</font>

155
00:08:18,009 --> 00:08:23,680
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think is a fairly straightforward term</font>

156
00:08:21,270 --> 00:08:25,810
<font color="#CCCCCC">States</font><font color="#E5E5E5"> lists which is something I've</font>

157
00:08:23,680 --> 00:08:28,660
appropriated for this purpose<font color="#CCCCCC"> so I'll go</font>

158
00:08:25,810 --> 00:08:32,708
on<font color="#CCCCCC"> to explain what that</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

159
00:08:28,660 --> 00:08:35,560
should also be portable<font color="#CCCCCC"> and then the</font>

160
00:08:32,708 --> 00:08:37,419
implementation<font color="#CCCCCC"> should be clearly layered</font>

161
00:08:35,559 --> 00:08:38,799
it should do one thing into<font color="#CCCCCC"> it well it</font>

162
00:08:37,419 --> 00:08:43,029
should be an engine for<font color="#E5E5E5"> running any</font>

163
00:08:38,799 --> 00:08:44,680
<font color="#E5E5E5">kernels</font><font color="#CCCCCC"> other things like orchestration</font>

164
00:08:43,029 --> 00:08:46,750
configuration management monitoring

165
00:08:44,680 --> 00:08:50,319
whatever those those<font color="#CCCCCC"> are done by layers</font>

166
00:08:46,750 --> 00:08:53,200
higher up the stack<font color="#CCCCCC"> so we're at the</font>

167
00:08:50,320 --> 00:08:54,820
we're at the<font color="#E5E5E5"> lowest layer try to</font>

168
00:08:53,200 --> 00:08:56,860
<font color="#CCCCCC">integrate all we</font><font color="#E5E5E5"> don't get in the way of</font>

169
00:08:54,820 --> 00:09:04,360
other people integrating us into higher

170
00:08:56,860 --> 00:09:06,850
layers but that's not our<font color="#CCCCCC"> job so in</font>

171
00:09:04,360 --> 00:09:09,660
terms of<font color="#E5E5E5"> minimalism</font><font color="#CCCCCC"> we want to provide</font>

172
00:09:06,850 --> 00:09:13,480
the simplest useful abstraction

173
00:09:09,660 --> 00:09:20,199
importantly that means we're<font color="#E5E5E5"> not trying</font>

174
00:09:13,480 --> 00:09:24,089
<font color="#E5E5E5">to be Linux so this is not an exercise</font>

175
00:09:20,200 --> 00:09:26,320
<font color="#E5E5E5">in reimplemented Linux or POSIX</font><font color="#CCCCCC"> it's</font>

176
00:09:24,089 --> 00:09:27,970
let's try the smallest thing which is

177
00:09:26,320 --> 00:09:30,160
<font color="#E5E5E5">actually useful and still lets us get</font>

178
00:09:27,970 --> 00:09:32,230
some work done

179
00:09:30,160 --> 00:09:34,810
one thing that<font color="#E5E5E5"> pops out</font><font color="#CCCCCC"> of minimal</font>

180
00:09:32,230 --> 00:09:40,209
minimalism is also that<font color="#CCCCCC"> we don't do any</font>

181
00:09:34,810 --> 00:09:43,170
<font color="#CCCCCC">kind of device discovery</font><font color="#E5E5E5"> this leads to a</font>

182
00:09:40,209 --> 00:09:46,000
very<font color="#CCCCCC"> small implementation sighs a</font>

183
00:09:43,170 --> 00:09:49,930
typical configuration by that I mean

184
00:09:46,000 --> 00:09:51,640
<font color="#CCCCCC">solar five compiled into one target</font>

185
00:09:49,930 --> 00:09:53,920
<font color="#E5E5E5">that's a that has a tender and</font><font color="#CCCCCC"> some</font>

186
00:09:51,640 --> 00:09:55,240
bindings<font color="#E5E5E5"> some of which</font><font color="#CCCCCC"> go in the in your</font>

187
00:09:53,920 --> 00:09:58,349
you know kernel some of which live<font color="#CCCCCC"> on</font>

188
00:09:55,240 --> 00:10:02,140
the host is about<font color="#E5E5E5"> 3,000 lines of C</font>

189
00:09:58,350 --> 00:10:03,579
<font color="#CCCCCC">12,000</font><font color="#E5E5E5"> lines C is in total the whole</font>

190
00:10:02,140 --> 00:10:07,149
code base with all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> different</font>

191
00:10:03,579 --> 00:10:10,810
combinations<font color="#E5E5E5"> of tenders and bindings</font>

192
00:10:07,149 --> 00:10:12,850
that<font color="#E5E5E5"> we have minimalism also gives us</font>

193
00:10:10,810 --> 00:10:15,160
clarity<font color="#CCCCCC"> of implementation so we don't</font>

194
00:10:12,850 --> 00:10:18,700
try<font color="#E5E5E5"> to do very much and we prefer</font><font color="#CCCCCC"> to do</font>

195
00:10:15,160 --> 00:10:22,569
what we do correctly<font color="#E5E5E5"> rather than add</font><font color="#CCCCCC"> new</font>

196
00:10:18,700 --> 00:10:23,800
<font color="#CCCCCC">features</font><font color="#E5E5E5"> and it gives us free first</font>

197
00:10:22,570 --> 00:10:26,980
<font color="#E5E5E5">startup time</font>

198
00:10:23,800 --> 00:10:30,459
comparable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what a normal user process</font>

199
00:10:26,980 --> 00:10:32,830
would have so with solar<font color="#CCCCCC"> 5hv T</font><font color="#E5E5E5"> or s PT</font>

200
00:10:30,460 --> 00:10:37,210
we get<font color="#E5E5E5"> something of less</font><font color="#CCCCCC"> than 50</font>

201
00:10:32,830 --> 00:10:39,340
milliseconds<font color="#CCCCCC"> q mu a traditional</font><font color="#E5E5E5"> Q mu</font>

202
00:10:37,210 --> 00:10:43,240
will typically take when starting a

203
00:10:39,340 --> 00:10:46,570
Linux VM up<font color="#CCCCCC"> to seconds before you get</font>

204
00:10:43,240 --> 00:10:48,040
<font color="#E5E5E5">say to a first</font><font color="#CCCCCC"> Network packet a lot</font><font color="#E5E5E5"> of</font>

205
00:10:46,570 --> 00:10:50,320
that time<font color="#CCCCCC"> is spent</font><font color="#E5E5E5"> precisely doing</font>

206
00:10:48,040 --> 00:10:53,110
things<font color="#CCCCCC"> like device discovery and then</font>

207
00:10:50,320 --> 00:10:56,380
actually bootstrapping the kernel<font color="#E5E5E5"> but</font>

208
00:10:53,110 --> 00:10:59,140
yeah and<font color="#E5E5E5"> then for cloud managed VMs with</font>

209
00:10:56,380 --> 00:11:00,610
<font color="#E5E5E5">traditional hypervisors so things like</font>

210
00:10:59,140 --> 00:11:08,040
Google compute engine I mean<font color="#E5E5E5"> on take</font>

211
00:11:00,610 --> 00:11:10,570
<font color="#CCCCCC">them takes seconds so stateless</font>

212
00:11:08,040 --> 00:11:11,890
<font color="#CCCCCC">millicent by</font><font color="#E5E5E5"> itself or a minimal</font>

213
00:11:10,570 --> 00:11:14,910
interface by itself that's<font color="#E5E5E5"> just saying</font>

214
00:11:11,890 --> 00:11:14,910
okay we<font color="#E5E5E5"> don't do very</font><font color="#CCCCCC"> much</font>

215
00:11:15,810 --> 00:11:22,750
<font color="#CCCCCC">babs</font><font color="#E5E5E5"> that is not necessarily all we want</font>

216
00:11:20,140 --> 00:11:27,760
<font color="#E5E5E5">a stateless I mean that there's very</font>

217
00:11:22,750 --> 00:11:29,290
little<font color="#CCCCCC"> state</font><font color="#E5E5E5"> inside this interface</font><font color="#CCCCCC"> so</font>

218
00:11:27,760 --> 00:11:31,480
<font color="#E5E5E5">that means both there's little there's</font>

219
00:11:29,290 --> 00:11:34,650
very little<font color="#CCCCCC"> stake transferred in any of</font>

220
00:11:31,480 --> 00:11:38,970
the calls<font color="#E5E5E5"> you could think of them as as</font>

221
00:11:34,650 --> 00:11:41,470
idempotent as possible I suppose<font color="#CCCCCC"> and the</font>

222
00:11:38,970 --> 00:11:45,130
<font color="#E5E5E5">guest the</font><font color="#CCCCCC"> you know kernel cannot change</font>

223
00:11:41,470 --> 00:11:50,920
host<font color="#E5E5E5"> state right so there is no dynamic</font>

224
00:11:45,130 --> 00:11:53,800
resource allocation<font color="#E5E5E5"> conversely the host</font>

225
00:11:50,920 --> 00:11:57,599
cannot change get<font color="#CCCCCC"> state so there are no</font>

226
00:11:53,800 --> 00:12:00,640
interrupts going<font color="#E5E5E5"> across this interface</font>

227
00:11:57,600 --> 00:12:02,890
<font color="#CCCCCC">this gives us a system that's very</font>

228
00:12:00,640 --> 00:12:07,720
deterministic and easy to<font color="#E5E5E5"> reason about</font>

229
00:12:02,890 --> 00:12:12,930
<font color="#E5E5E5">and it's also essentially a static</font>

230
00:12:07,720 --> 00:12:16,150
<font color="#CCCCCC">system</font><font color="#E5E5E5"> so you get some resources some</font>

231
00:12:12,930 --> 00:12:19,180
things from<font color="#CCCCCC"> the hosts up front</font><font color="#E5E5E5"> memory</font>

232
00:12:16,150 --> 00:12:24,880
access to devices so on<font color="#E5E5E5"> and that's it</font>

233
00:12:19,180 --> 00:12:28,540
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can never get more and I think</font><font color="#CCCCCC"> that</font>

234
00:12:24,880 --> 00:12:32,380
<font color="#CCCCCC">the stateless property is also</font><font color="#E5E5E5"> what very</font>

235
00:12:28,540 --> 00:12:35,050
much helps us to<font color="#CCCCCC"> actually strongly</font>

236
00:12:32,380 --> 00:12:36,490
isolate this interface<font color="#E5E5E5"> and do that both</font>

237
00:12:35,050 --> 00:12:38,500
on

238
00:12:36,490 --> 00:12:40,990
existing monolithic kernels<font color="#E5E5E5"> and on</font>

239
00:12:38,500 --> 00:12:44,589
component-based<font color="#CCCCCC"> and high sharon's</font>

240
00:12:40,990 --> 00:12:46,990
<font color="#E5E5E5">microphones so so it's it's it's this</font>

241
00:12:44,589 --> 00:12:49,390
this way of<font color="#CCCCCC"> thinking about what the</font>

242
00:12:46,990 --> 00:12:55,209
interface<font color="#E5E5E5"> should</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> that helps</font><font color="#E5E5E5"> us</font>

243
00:12:49,390 --> 00:12:57,520
to<font color="#CCCCCC"> get to strong isolation so and the</font>

244
00:12:55,209 --> 00:13:01,329
third part of the<font color="#CCCCCC"> philosophy is that</font><font color="#E5E5E5"> we</font>

245
00:12:57,520 --> 00:13:04,180
want to<font color="#E5E5E5"> be portable that includes easily</font>

246
00:13:01,330 --> 00:13:07,420
porting existing library<font color="#E5E5E5"> Oasis to sulla</font>

247
00:13:04,180 --> 00:13:11,589
<font color="#CCCCCC">5 and we currently have Mirage Ellis</font>

248
00:13:07,420 --> 00:13:15,069
which was the original<font color="#E5E5E5"> library oh is</font>

249
00:13:11,589 --> 00:13:17,140
that<font color="#E5E5E5"> where so if I've got started as a</font>

250
00:13:15,070 --> 00:13:20,350
way of<font color="#CCCCCC"> getting</font><font color="#E5E5E5"> Mirage is to run on other</font>

251
00:13:17,140 --> 00:13:24,010
things<font color="#CCCCCC"> and Ricardo here has also done</font>

252
00:13:20,350 --> 00:13:26,950
<font color="#E5E5E5">support for um include OS which</font><font color="#CCCCCC"> is a C++</font>

253
00:13:24,010 --> 00:13:30,640
based library operating system<font color="#E5E5E5"> and run</font>

254
00:13:26,950 --> 00:13:36,880
run<font color="#CCCCCC"> which is a POSIX II like thinking</font>

255
00:13:30,640 --> 00:13:38,319
using<font color="#E5E5E5"> net</font><font color="#CCCCCC"> bsd romped kernels so</font>

256
00:13:36,880 --> 00:13:41,620
conversely it should be easy to port

257
00:13:38,320 --> 00:13:45,940
solar<font color="#E5E5E5"> 5 to new targets and interestingly</font>

258
00:13:41,620 --> 00:13:49,420
since<font color="#E5E5E5"> the project started we've had open</font>

259
00:13:45,940 --> 00:13:53,470
BSD<font color="#CCCCCC"> vmm support contributed which I'll</font>

260
00:13:49,420 --> 00:13:56,610
show by a guy who's<font color="#E5E5E5"> basically an open</font>

261
00:13:53,470 --> 00:13:59,970
BSD user definitely not a<font color="#CCCCCC"> solo 5</font><font color="#E5E5E5"> experts</font>

262
00:13:56,610 --> 00:14:04,300
<font color="#CCCCCC">Adrian from</font><font color="#E5E5E5"> the moon separation kernel</font>

263
00:13:59,970 --> 00:14:08,610
contributed reports to<font color="#CCCCCC"> target's moon</font>

264
00:14:04,300 --> 00:14:13,870
native subjects as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> solo 5 target and</font>

265
00:14:08,610 --> 00:14:17,649
<font color="#CCCCCC">Emery who's here in</font><font color="#E5E5E5"> this room just last</font>

266
00:14:13,870 --> 00:14:19,690
year contributed report to run or

267
00:14:17,649 --> 00:14:21,670
implement the solar 5 interface so so

268
00:14:19,690 --> 00:14:24,959
bindings to the<font color="#E5E5E5"> cellar 5 interface as a</font>

269
00:14:21,670 --> 00:14:24,959
GNote component

270
00:14:30,360 --> 00:14:37,360
so let's be honest there are some

271
00:14:32,500 --> 00:14:39,130
<font color="#CCCCCC">limitations or you might</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> call</font>

272
00:14:37,360 --> 00:14:40,990
this<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> non goals I mean these are</font>

273
00:14:39,130 --> 00:14:45,580
these<font color="#CCCCCC"> are kind of the</font><font color="#E5E5E5"> inherently</font>

274
00:14:40,990 --> 00:14:48,940
inherent limitations<font color="#CCCCCC"> as I already</font><font color="#E5E5E5"> said</font>

275
00:14:45,580 --> 00:14:50,800
it's not Linux<font color="#CCCCCC"> we don't intend</font><font color="#E5E5E5"> to to</font>

276
00:14:48,940 --> 00:14:55,360
become<font color="#E5E5E5"> Linux if you want Linux you know</font>

277
00:14:50,800 --> 00:14:58,060
where to find it but there are<font color="#E5E5E5"> library</font>

278
00:14:55,360 --> 00:14:58,840
<font color="#CCCCCC">OS</font><font color="#E5E5E5"> is that late you get quite a lot</font><font color="#CCCCCC"> of</font>

279
00:14:58,060 --> 00:15:02,020
the way there

280
00:14:58,840 --> 00:15:04,930
<font color="#E5E5E5">so</font><font color="#CCCCCC"> romp run lkl is something called I</font>

281
00:15:02,020 --> 00:15:08,350
<font color="#CCCCCC">think</font><font color="#E5E5E5"> the Linux kernel library yep</font>

282
00:15:04,930 --> 00:15:10,449
which is which<font color="#CCCCCC"> is a similar project</font>

283
00:15:08,350 --> 00:15:16,320
trying<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> what run kernels did for</font>

284
00:15:10,450 --> 00:15:19,390
<font color="#CCCCCC">MIT BSD but with Linux so if you want</font>

285
00:15:16,320 --> 00:15:22,270
you can build your POSIX application

286
00:15:19,390 --> 00:15:23,350
<font color="#E5E5E5">against a libous semantically it might</font>

287
00:15:22,270 --> 00:15:30,120
be a bit different you've got to be a

288
00:15:23,350 --> 00:15:30,120
bit careful but generally it'll work<font color="#CCCCCC"> so</font>

289
00:15:30,900 --> 00:15:37,959
keeping the interface stateless<font color="#E5E5E5"> well no</font>

290
00:15:34,660 --> 00:15:47,469
interrupts implies it's a single<font color="#CCCCCC"> core</font><font color="#E5E5E5"> no</font>

291
00:15:37,960 --> 00:15:50,410
SMP<font color="#E5E5E5"> the answer to that is run more than</font>

292
00:15:47,470 --> 00:15:57,100
<font color="#CCCCCC">one instance of your thing and paralyze</font>

293
00:15:50,410 --> 00:15:59,230
your work and pass messages around<font color="#E5E5E5"> it's</font>

294
00:15:57,100 --> 00:16:02,890
not<font color="#E5E5E5"> intended for interfacing to hardware</font>

295
00:15:59,230 --> 00:16:05,620
that is possibly a<font color="#E5E5E5"> bigger limitation but</font>

296
00:16:02,890 --> 00:16:10,180
then we see<font color="#CCCCCC"> solar</font><font color="#E5E5E5"> fibers something which</font>

297
00:16:05,620 --> 00:16:14,530
is components as part of a<font color="#E5E5E5"> wider</font>

298
00:16:10,180 --> 00:16:16,900
disaggregated system and then drivers

299
00:16:14,530 --> 00:16:18,640
become<font color="#E5E5E5"> some other components</font><font color="#CCCCCC"> problems</font><font color="#E5E5E5"> so</font>

300
00:16:16,900 --> 00:16:21,610
you<font color="#E5E5E5"> can do that both</font><font color="#CCCCCC"> in the microkernel</font>

301
00:16:18,640 --> 00:16:25,530
<font color="#E5E5E5">case where you have other microkernel</font>

302
00:16:21,610 --> 00:16:30,370
components providing access to<font color="#E5E5E5"> hardware</font>

303
00:16:25,530 --> 00:16:33,400
<font color="#E5E5E5">or in the monolithic kernel case you</font>

304
00:16:30,370 --> 00:16:35,530
have the monolithic kernel itself<font color="#E5E5E5"> in an</font>

305
00:16:33,400 --> 00:16:38,230
in a kind of<font color="#E5E5E5"> in the type 2 hypervisor</font>

306
00:16:35,530 --> 00:16:41,470
approach providing access to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> to the</font>

307
00:16:38,230 --> 00:16:42,400
hardware then it's not isolated<font color="#CCCCCC"> or you</font>

308
00:16:41,470 --> 00:16:45,930
have a<font color="#CCCCCC"> disagrees</font>

309
00:16:42,400 --> 00:16:50,380
<font color="#CCCCCC">some like cubes or something based on</font>

310
00:16:45,930 --> 00:16:58,839
<font color="#CCCCCC">housing hardware directly</font><font color="#E5E5E5"> to isolated</font>

311
00:16:50,380 --> 00:17:00,610
components<font color="#CCCCCC"> portability implies that we</font>

312
00:16:58,840 --> 00:17:06,339
<font color="#E5E5E5">have some copying semantics in the</font>

313
00:17:00,610 --> 00:17:09,460
interface<font color="#E5E5E5"> and also we have things like</font>

314
00:17:06,339 --> 00:17:12,310
one call per packet<font color="#E5E5E5"> that's not very nice</font>

315
00:17:09,460 --> 00:17:15,700
<font color="#CCCCCC">but well actually we found is pretty</font>

316
00:17:12,310 --> 00:17:17,319
<font color="#E5E5E5">good but the main thing I'd point out</font>

317
00:17:15,700 --> 00:17:18,370
there<font color="#E5E5E5"> is it's not intended for scenarios</font>

318
00:17:17,319 --> 00:17:21,220
<font color="#E5E5E5">where you're trying to do</font>

319
00:17:18,369 --> 00:17:23,949
<font color="#CCCCCC">high-performance computing or</font><font color="#E5E5E5"> house</font>

320
00:17:21,220 --> 00:17:26,050
millions of packets per second<font color="#CCCCCC"> if you're</font>

321
00:17:23,950 --> 00:17:29,050
doing<font color="#CCCCCC"> that generally</font><font color="#E5E5E5"> you will want</font>

322
00:17:26,050 --> 00:17:30,850
Hardware<font color="#E5E5E5"> pass-through anyway and trying</font>

323
00:17:29,050 --> 00:17:32,230
to<font color="#E5E5E5"> implement an interface alongside of</font>

324
00:17:30,850 --> 00:17:33,969
these goals for something like how<font color="#E5E5E5"> they</font>

325
00:17:32,230 --> 00:17:37,150
pass through<font color="#E5E5E5"> is I think just a fool's</font>

326
00:17:33,970 --> 00:17:40,420
errand<font color="#E5E5E5"> I mean you will end up with bits</font>

327
00:17:37,150 --> 00:17:43,570
of the interface<font color="#CCCCCC"> taken typical Hardware</font>

328
00:17:40,420 --> 00:17:44,860
interface ripple wine<font color="#E5E5E5"> down the middle</font>

329
00:17:43,570 --> 00:17:58,149
and you'll have<font color="#E5E5E5"> bits kind of sticking</font>

330
00:17:44,860 --> 00:18:01,139
out<font color="#CCCCCC"> so having shown the philosophy I'd</font>

331
00:17:58,150 --> 00:18:04,360
like to show<font color="#E5E5E5"> you the actual interface</font>

332
00:18:01,140 --> 00:18:06,030
and I'll leave this up on<font color="#E5E5E5"> on here for</font>

333
00:18:04,360 --> 00:18:07,500
you for a bit to read through<font color="#E5E5E5"> it</font>

334
00:18:06,030 --> 00:18:09,910
[Music]

335
00:18:07,500 --> 00:18:11,080
originally I had<font color="#E5E5E5"> one slide with all</font><font color="#CCCCCC"> of</font>

336
00:18:09,910 --> 00:18:12,550
the interface<font color="#E5E5E5"> because I thought it would</font>

337
00:18:11,080 --> 00:18:14,740
be cool to<font color="#CCCCCC"> just fit the whole interface</font>

338
00:18:12,550 --> 00:18:17,770
<font color="#E5E5E5">in one slide but then maybe that's</font><font color="#CCCCCC"> too</font>

339
00:18:14,740 --> 00:18:20,280
much text to read in one go so I've

340
00:18:17,770 --> 00:18:23,020
split<font color="#E5E5E5"> it up into two</font><font color="#CCCCCC"> groups</font>

341
00:18:20,280 --> 00:18:28,860
<font color="#CCCCCC">top</font><font color="#E5E5E5"> quality you can see is basically an</font>

342
00:18:23,020 --> 00:18:32,680
entry point into<font color="#CCCCCC"> the unique</font><font color="#E5E5E5"> kernel guest</font>

343
00:18:28,860 --> 00:18:36,280
<font color="#CCCCCC">this also</font><font color="#E5E5E5"> shows that the fact</font><font color="#CCCCCC"> that there</font>

344
00:18:32,680 --> 00:18:38,950
is a static<font color="#CCCCCC"> system so you get</font><font color="#E5E5E5"> given some</font>

345
00:18:36,280 --> 00:18:42,910
<font color="#E5E5E5">heap memory with some size and that's it</font>

346
00:18:38,950 --> 00:18:46,480
and<font color="#CCCCCC"> you get</font><font color="#E5E5E5"> told here it is go for your</font>

347
00:18:42,910 --> 00:18:49,300
life<font color="#CCCCCC"> there is an exit</font><font color="#E5E5E5"> and an</font><font color="#CCCCCC"> ab what</font>

348
00:18:46,480 --> 00:18:52,330
call those are separate calls the abort

349
00:18:49,300 --> 00:18:55,720
call<font color="#E5E5E5"> is something that's intended to say</font>

350
00:18:52,330 --> 00:18:57,850
<font color="#CCCCCC">oh I'm giving</font><font color="#E5E5E5"> up</font>

351
00:18:55,720 --> 00:19:00,370
could the<font color="#E5E5E5"> host thing whatever it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> if</font>

352
00:18:57,850 --> 00:19:03,340
it's configured to do things<font color="#E5E5E5"> like core</font>

353
00:19:00,370 --> 00:19:07,059
<font color="#E5E5E5">dance or page someone or whatever I</font><font color="#CCCCCC"> mean</font>

354
00:19:03,340 --> 00:19:09,280
do something abnormal happened<font color="#E5E5E5"> if you</font>

355
00:19:07,059 --> 00:19:11,799
care about<font color="#CCCCCC"> that then</font><font color="#E5E5E5"> treat</font><font color="#CCCCCC"> it</font>

356
00:19:09,280 --> 00:19:14,530
differently<font color="#CCCCCC"> I don't I don't</font><font color="#E5E5E5"> like</font>

357
00:19:11,799 --> 00:19:16,059
overloading<font color="#E5E5E5"> exits and status codes for</font>

358
00:19:14,530 --> 00:19:17,830
something which i think is conceptually

359
00:19:16,059 --> 00:19:22,178
<font color="#E5E5E5">slightly different so that's why</font><font color="#CCCCCC"> there</font>

360
00:19:17,830 --> 00:19:26,080
<font color="#CCCCCC">are two</font><font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> console</font><font color="#E5E5E5"> the console is</font>

361
00:19:22,179 --> 00:19:29,260
intended mainly for debugging<font color="#E5E5E5"> type stuff</font>

362
00:19:26,080 --> 00:19:31,780
<font color="#E5E5E5">or some simple logging but generally</font>

363
00:19:29,260 --> 00:19:33,970
you'd want<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that over protocols and</font>

364
00:19:31,780 --> 00:19:36,250
<font color="#E5E5E5">networks or somewhere</font><font color="#CCCCCC"> else so it's a</font>

365
00:19:33,970 --> 00:19:38,500
console nothing<font color="#E5E5E5"> particularly</font><font color="#CCCCCC"> interesting</font>

366
00:19:36,250 --> 00:19:39,700
about<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have monotonic time we</font>

367
00:19:38,500 --> 00:19:42,460
have wall clock time

368
00:19:39,700 --> 00:19:45,610
those are<font color="#CCCCCC"> 64-bit types they are</font>

369
00:19:42,460 --> 00:19:48,059
nanoseconds<font color="#E5E5E5"> so I'll run out</font><font color="#CCCCCC"> in five</font>

370
00:19:45,610 --> 00:19:49,340
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> and something years from now</font><font color="#CCCCCC"> Oh</font>

371
00:19:48,059 --> 00:19:53,158
too bad

372
00:19:49,340 --> 00:19:57,520
[Laughter]

373
00:19:53,159 --> 00:20:04,600
<font color="#CCCCCC">then there</font><font color="#E5E5E5"> is a yield function so what</font>

374
00:19:57,520 --> 00:20:07,080
<font color="#CCCCCC">this</font><font color="#E5E5E5"> does is it essentially says please</font>

375
00:20:04,600 --> 00:20:16,330
<font color="#E5E5E5">yield to the host until some deadline</font>

376
00:20:07,080 --> 00:20:20,500
comes and then I'll show the second part

377
00:20:16,330 --> 00:20:23,610
where I'll repeat the yield so we

378
00:20:20,500 --> 00:20:26,860
actually<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to talk to some devices</font><font color="#E5E5E5"> so</font>

379
00:20:23,610 --> 00:20:30,299
what we have<font color="#CCCCCC"> here is we have a network</font>

380
00:20:26,860 --> 00:20:35,260
<font color="#CCCCCC">api which is a very simple</font><font color="#E5E5E5"> layer to</font>

381
00:20:30,299 --> 00:20:38,940
network with layer<font color="#E5E5E5"> two semantics so you</font>

382
00:20:35,260 --> 00:20:44,379
push<font color="#CCCCCC"> your packets</font><font color="#E5E5E5"> packets can get ROPS</font>

383
00:20:38,940 --> 00:20:47,200
<font color="#CCCCCC">read is always</font><font color="#E5E5E5"> non blocking so it will</font>

384
00:20:44,380 --> 00:20:51,039
return<font color="#CCCCCC"> again if there isn't anything to</font>

385
00:20:47,200 --> 00:20:56,230
<font color="#E5E5E5">read</font><font color="#CCCCCC"> and this ties</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> seller</font><font color="#E5E5E5"> five</font>

386
00:20:51,039 --> 00:20:58,629
yields which will give you<font color="#E5E5E5"> back a ball</font>

387
00:20:56,230 --> 00:21:01,240
<font color="#E5E5E5">that says do I have work to do or is</font>

388
00:20:58,630 --> 00:21:04,770
there nothing to<font color="#E5E5E5"> do and it's just the</font>

389
00:21:01,240 --> 00:21:04,770
fact that the deadline was reached

390
00:21:05,340 --> 00:21:08,570
[Music]

391
00:21:06,980 --> 00:21:12,220
then we have a block interface<font color="#E5E5E5"> which is</font>

392
00:21:08,570 --> 00:21:14,419
<font color="#E5E5E5">basically block i/o again calls our</font>

393
00:21:12,220 --> 00:21:19,090
idempotent in themselves<font color="#E5E5E5"> so there is</font>

394
00:21:14,420 --> 00:21:19,090
<font color="#E5E5E5">always an offset and a buffer together</font>

395
00:21:19,660 --> 00:21:26,420
the<font color="#E5E5E5"> interfaces intended to read and</font>

396
00:21:23,570 --> 00:21:32,350
write<font color="#CCCCCC"> only at some minimum block size</font>

397
00:21:26,420 --> 00:21:32,350
that you get out of block info<font color="#CCCCCC"> and it's</font>

398
00:21:33,040 --> 00:21:39,020
yeah<font color="#E5E5E5"> so you will you will either get</font>

399
00:21:35,660 --> 00:21:49,070
back<font color="#CCCCCC"> in okay and what you asked to write</font>

400
00:21:39,020 --> 00:21:52,550
was written or not<font color="#E5E5E5"> so there</font><font color="#CCCCCC"> are a</font><font color="#E5E5E5"> couple</font>

401
00:21:49,070 --> 00:21:55,040
of<font color="#E5E5E5"> things missing here no time saw</font>

402
00:21:52,550 --> 00:21:59,060
observant<font color="#E5E5E5"> people will be asking</font>

403
00:21:55,040 --> 00:22:01,639
themselves<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now which is where</font>

404
00:21:59,060 --> 00:22:05,780
where do you say which of these devices

405
00:22:01,640 --> 00:22:09,520
<font color="#CCCCCC">you want to talk to and also</font><font color="#E5E5E5"> more</font>

406
00:22:05,780 --> 00:22:12,139
obviously<font color="#E5E5E5"> in the block API there is no</font>

407
00:22:09,520 --> 00:22:13,730
flush that is just missing<font color="#CCCCCC"> that is</font>

408
00:22:12,140 --> 00:22:18,370
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we need to</font><font color="#E5E5E5"> add so there</font>

409
00:22:13,730 --> 00:22:18,370
will<font color="#CCCCCC"> likely be a flush end of</font><font color="#E5E5E5"> this card</font>

410
00:22:19,210 --> 00:22:25,940
so the multiple devices<font color="#E5E5E5"> think at the</font>

411
00:22:22,340 --> 00:22:29,060
moment<font color="#CCCCCC"> the implementation is rather</font>

412
00:22:25,940 --> 00:22:33,230
naive and<font color="#E5E5E5"> you can only have one</font><font color="#CCCCCC"> zero or</font>

413
00:22:29,060 --> 00:22:35,330
<font color="#E5E5E5">one of these this is something</font><font color="#CCCCCC"> that we</font>

414
00:22:33,230 --> 00:22:37,310
want<font color="#CCCCCC"> to change</font><font color="#E5E5E5"> I'll go into a bit more</font>

415
00:22:35,330 --> 00:22:39,020
detail<font color="#E5E5E5"> later about why it hasn't</font>

416
00:22:37,310 --> 00:22:42,530
<font color="#E5E5E5">happened</font><font color="#CCCCCC"> yet but fundamentally</font><font color="#E5E5E5"> this</font>

417
00:22:39,020 --> 00:22:44,150
interface will not change hugely even in

418
00:22:42,530 --> 00:22:46,310
the presence of multiple<font color="#CCCCCC"> devices the</font>

419
00:22:44,150 --> 00:22:48,950
difference will probably be<font color="#E5E5E5"> that block</font>

420
00:22:46,310 --> 00:22:51,320
info and net info will give you back

421
00:22:48,950 --> 00:22:53,390
some<font color="#E5E5E5"> kind of handle so you'll pass in an</font>

422
00:22:51,320 --> 00:22:56,240
identifier some name of the device

423
00:22:53,390 --> 00:22:59,780
you'll get a handle out<font color="#CCCCCC"> and then read</font>

424
00:22:56,240 --> 00:23:04,580
and write<font color="#E5E5E5"> accept to handle yield</font>

425
00:22:59,780 --> 00:23:07,460
<font color="#E5E5E5">interestingly will not change much</font><font color="#CCCCCC"> its</font>

426
00:23:04,580 --> 00:23:09,379
might give you back a mask of bit<font color="#E5E5E5"> saying</font>

427
00:23:07,460 --> 00:23:11,810
which<font color="#CCCCCC"> of the handles</font><font color="#E5E5E5"> have worked for</font>

428
00:23:09,380 --> 00:23:16,700
them<font color="#E5E5E5"> but I don't expect to have again</font>

429
00:23:11,810 --> 00:23:20,110
with the not changing host<font color="#CCCCCC"> states</font><font color="#E5E5E5"> you</font>

430
00:23:16,700 --> 00:23:20,110
will always ask for

431
00:23:20,400 --> 00:23:24,450
is there any work at all<font color="#CCCCCC"> so you don't go</font>

432
00:23:22,470 --> 00:23:26,070
saying<font color="#E5E5E5"> oh I'm no longer interested</font><font color="#CCCCCC"> in</font>

433
00:23:24,450 --> 00:23:28,410
<font color="#E5E5E5">net zero well no you asked for in the</font>

434
00:23:26,070 --> 00:23:29,939
<font color="#CCCCCC">first place in the beginning so if</font>

435
00:23:28,410 --> 00:23:51,780
there's any work then I'll tell<font color="#E5E5E5"> you</font>

436
00:23:29,940 --> 00:23:55,020
there's work on it well but no<font color="#E5E5E5"> one will</font>

437
00:23:51,780 --> 00:24:09,270
<font color="#E5E5E5">hear you on</font><font color="#CCCCCC"> the stream so it's I can</font>

438
00:23:55,020 --> 00:24:10,889
just kind of hold<font color="#CCCCCC"> it before that I</font><font color="#E5E5E5"> just</font>

439
00:24:09,270 --> 00:24:13,260
<font color="#E5E5E5">wanted to add something to</font><font color="#CCCCCC"> what Matt was</font>

440
00:24:10,890 --> 00:24:15,200
saying which is<font color="#CCCCCC"> that even though the</font>

441
00:24:13,260 --> 00:24:19,050
interface looks very very minimalistic

442
00:24:15,200 --> 00:24:21,330
<font color="#E5E5E5">it's surprisingly enough to run a lot of</font>

443
00:24:19,050 --> 00:24:23,340
<font color="#CCCCCC">stuff for example we'd run run we can</font>

444
00:24:21,330 --> 00:24:25,260
run Python<font color="#CCCCCC"> note a lot</font><font color="#E5E5E5"> of things which</font>

445
00:24:23,340 --> 00:24:27,510
which at least to<font color="#E5E5E5"> me it's really</font><font color="#CCCCCC"> amazing</font>

446
00:24:25,260 --> 00:24:34,160
that<font color="#E5E5E5"> such a simple interface is it's</font>

447
00:24:27,510 --> 00:24:34,160
able<font color="#E5E5E5"> to do so now again</font>

448
00:24:48,640 --> 00:24:58,870
<font color="#E5E5E5">okay so let's say you have a actually</font>

449
00:24:55,440 --> 00:25:01,000
let's say you you want to<font color="#CCCCCC"> implement</font>

450
00:24:58,870 --> 00:25:02,678
<font color="#CCCCCC">small web server as a unique kernel</font><font color="#E5E5E5"> that</font>

451
00:25:01,000 --> 00:25:06,340
just<font color="#CCCCCC"> returns something</font><font color="#E5E5E5"> like a pretty</font>

452
00:25:02,679 --> 00:25:09,280
camel and it stores first counts<font color="#E5E5E5"> and it</font>

453
00:25:06,340 --> 00:25:11,770
<font color="#E5E5E5">stores a counter in persistent storage</font>

454
00:25:09,280 --> 00:25:13,750
just to count the number<font color="#CCCCCC"> of requests so</font>

455
00:25:11,770 --> 00:25:15,400
you need storage you need<font color="#E5E5E5"> a file</font><font color="#CCCCCC"> system</font>

456
00:25:13,750 --> 00:25:18,070
with a key value<font color="#E5E5E5"> store and you need an</font>

457
00:25:15,400 --> 00:25:19,390
HTTP<font color="#E5E5E5"> server basically so one way of</font>

458
00:25:18,070 --> 00:25:21,879
implementing this would be to use

459
00:25:19,390 --> 00:25:23,740
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> Mirage and because you</font>

460
00:25:21,880 --> 00:25:25,270
wanna even<font color="#E5E5E5"> spray my camels so you would</font>

461
00:25:23,740 --> 00:25:27,549
use<font color="#CCCCCC"> something like a</font><font color="#E5E5E5"> camel right make</font>

462
00:25:25,270 --> 00:25:28,960
sense so you would go<font color="#E5E5E5"> into Mirage I need</font>

463
00:25:27,549 --> 00:25:31,600
you you<font color="#CCCCCC"> would write a bit of a bit</font><font color="#E5E5E5"> of a</font>

464
00:25:28,960 --> 00:25:34,480
<font color="#CCCCCC">camel and you would use an HTTP library</font>

465
00:25:31,600 --> 00:25:36,309
and<font color="#E5E5E5"> also a networks like library and</font>

466
00:25:34,480 --> 00:25:38,980
also<font color="#CCCCCC"> something</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a key value</font><font color="#E5E5E5"> store as</font>

467
00:25:36,309 --> 00:25:41,049
a library and then you<font color="#CCCCCC"> would tell the</font>

468
00:25:38,980 --> 00:25:44,380
Mirage build system<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> want to</font>

469
00:25:41,049 --> 00:25:47,200
construct<font color="#E5E5E5"> a unique kernel using some</font>

470
00:25:44,380 --> 00:25:49,570
target let's say a solo<font color="#CCCCCC"> 5 target</font><font color="#E5E5E5"> and</font>

471
00:25:47,200 --> 00:25:56,350
more specifically<font color="#CCCCCC"> let's say a solo 5</font>

472
00:25:49,570 --> 00:25:57,850
micro<font color="#CCCCCC"> vmm target so in that case you</font>

473
00:25:56,350 --> 00:26:10,149
would do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will make and you will</font>

474
00:25:57,850 --> 00:26:11,799
<font color="#E5E5E5">get something like this</font><font color="#CCCCCC"> you would build</font>

475
00:26:10,150 --> 00:26:15,790
and you will get the unicorn which<font color="#CCCCCC"> would</font>

476
00:26:11,799 --> 00:26:18,280
be this one<font color="#E5E5E5"> dot</font><font color="#CCCCCC"> H V T which is actually</font>

477
00:26:15,790 --> 00:26:21,399
it's not<font color="#CCCCCC"> that small aceite</font><font color="#E5E5E5"> and also the</font>

478
00:26:18,280 --> 00:26:23,889
fender<font color="#E5E5E5"> which will be the equivalent of</font>

479
00:26:21,400 --> 00:26:27,190
<font color="#CCCCCC">qmu for example if you were running a</font>

480
00:26:23,890 --> 00:26:31,570
typical<font color="#E5E5E5"> VN in now the way you would run</font>

481
00:26:27,190 --> 00:26:34,630
<font color="#E5E5E5">this is just like just</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> cameo</font>

482
00:26:31,570 --> 00:26:36,850
you<font color="#E5E5E5"> would say H VP now because we need a</font>

483
00:26:34,630 --> 00:26:39,610
<font color="#CCCCCC">disk</font><font color="#E5E5E5"> to store the key value store</font>

484
00:26:36,850 --> 00:26:48,000
information<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to specify the basic</font>

485
00:26:39,610 --> 00:26:55,769
and we would say this<font color="#E5E5E5"> disk image let tap</font>

486
00:26:48,000 --> 00:26:59,710
and<font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> treaty yeah</font><font color="#E5E5E5"> that's huge</font>

487
00:26:55,769 --> 00:27:04,359
<font color="#CCCCCC">okay and then</font><font color="#E5E5E5"> just to</font><font color="#CCCCCC"> show you that</font>

488
00:26:59,710 --> 00:27:07,479
actually works<font color="#CCCCCC"> so we could cool</font>

489
00:27:04,359 --> 00:27:13,119
another possible target is the process

490
00:27:07,479 --> 00:27:13,869
one which is called<font color="#E5E5E5"> SPT and so you would</font>

491
00:27:13,119 --> 00:27:15,428
again

492
00:27:13,869 --> 00:27:17,080
tell<font color="#E5E5E5"> me</font><font color="#CCCCCC"> Nashville system to</font><font color="#E5E5E5"> build</font>

493
00:27:15,429 --> 00:27:20,559
another<font color="#CCCCCC"> unicameral</font><font color="#E5E5E5"> you will tell it now</font>

494
00:27:17,080 --> 00:27:32,320
I want SPT and it will output<font color="#E5E5E5"> something</font>

495
00:27:20,559 --> 00:27:46,479
<font color="#E5E5E5">like this SPT SPT which is also pretty</font>

496
00:27:32,320 --> 00:27:56,830
large<font color="#E5E5E5"> makes a lot of space will give me</font>

497
00:27:46,479 --> 00:28:02,979
from number yeah<font color="#CCCCCC"> it still</font><font color="#E5E5E5"> pretty large</font>

498
00:27:56,830 --> 00:28:06,309
anyway yeah<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you would use</font><font color="#E5E5E5"> the SPT</font>

499
00:28:02,979 --> 00:28:11,889
<font color="#CCCCCC">once something like these</font><font color="#E5E5E5"> exactly the</font>

500
00:28:06,309 --> 00:28:17,080
same just<font color="#E5E5E5"> to show you as</font><font color="#CCCCCC"> well that it</font>

501
00:28:11,889 --> 00:28:20,879
works data 195 camels so the country<font color="#E5E5E5"> is</font>

502
00:28:17,080 --> 00:28:23,049
working<font color="#E5E5E5"> and not to give you a more</font>

503
00:28:20,879 --> 00:28:25,809
in-depth view of<font color="#E5E5E5"> what this</font><font color="#CCCCCC"> thing is</font>

504
00:28:23,049 --> 00:28:28,570
doing<font color="#E5E5E5"> let's take a look at the as the</font>

505
00:28:25,809 --> 00:28:32,759
<font color="#CCCCCC">air strays so for example</font><font color="#E5E5E5"> for the HVT</font>

506
00:28:28,570 --> 00:28:35,139
<font color="#E5E5E5">one the SVT tender is kind of</font>

507
00:28:32,759 --> 00:28:37,989
implementing the<font color="#E5E5E5"> solo</font><font color="#CCCCCC"> 5 interface by</font>

508
00:28:35,139 --> 00:28:40,359
using Cisco so we would map a<font color="#E5E5E5"> solo</font><font color="#CCCCCC"> 5 API</font>

509
00:28:37,989 --> 00:28:42,009
call for example<font color="#CCCCCC"> i yealed</font>

510
00:28:40,359 --> 00:28:47,470
into a pole<font color="#E5E5E5"> into specific file</font>

511
00:28:42,009 --> 00:28:56,159
descriptor into the hosts<font color="#E5E5E5"> okay sorry</font>

512
00:28:47,470 --> 00:28:56,159
sorry sorry<font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> is a nice</font><font color="#CCCCCC"> phrase</font>

513
00:28:58,299 --> 00:29:04,279
yeah well<font color="#E5E5E5"> just boot and now it's just</font>

514
00:29:01,880 --> 00:29:05,690
<font color="#E5E5E5">falling it's just an event loop and take</font>

515
00:29:04,279 --> 00:29:09,919
a look at what happens when<font color="#E5E5E5"> we actually</font>

516
00:29:05,690 --> 00:29:14,299
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> we see a bunch of</font><font color="#CCCCCC"> KVM stuff</font>

517
00:29:09,919 --> 00:29:17,299
<font color="#E5E5E5">reading to the this is</font><font color="#CCCCCC"> the tap</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> poles</font>

518
00:29:14,299 --> 00:29:19,700
<font color="#CCCCCC">I</font><font color="#E5E5E5"> mean it's really very</font><font color="#CCCCCC"> very minimal</font>

519
00:29:17,299 --> 00:29:21,408
it's basically reads and writes<font color="#E5E5E5"> into the</font>

520
00:29:19,700 --> 00:29:24,350
<font color="#CCCCCC">these file descriptor and reads</font>

521
00:29:21,409 --> 00:29:28,029
<font color="#E5E5E5">reference into the into the</font><font color="#CCCCCC"> tab</font><font color="#E5E5E5"> for the</font>

522
00:29:24,350 --> 00:29:37,039
script and not<font color="#E5E5E5"> to compare against the</font>

523
00:29:28,029 --> 00:29:40,730
DSP t1<font color="#E5E5E5"> let's do the same on SPT yeah</font>

524
00:29:37,039 --> 00:29:43,220
that does<font color="#CCCCCC"> booting down the way</font><font color="#E5E5E5"> so that's</font>

525
00:29:40,730 --> 00:29:49,639
<font color="#E5E5E5">pretty much exactly the same except that</font>

526
00:29:43,220 --> 00:29:51,830
<font color="#E5E5E5">it doesn't</font><font color="#CCCCCC"> have the K VMI Actos yeah and</font>

527
00:29:49,639 --> 00:29:55,158
again<font color="#E5E5E5"> that's just to give you a rough</font>

528
00:29:51,830 --> 00:29:57,860
idea of the minimalism<font color="#E5E5E5"> and also that we</font>

529
00:29:55,159 --> 00:30:00,529
<font color="#CCCCCC">have</font><font color="#E5E5E5"> a even more minimal interface which</font>

530
00:29:57,860 --> 00:30:02,269
is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> SBT that is pretty much like</font>

531
00:30:00,529 --> 00:30:05,240
<font color="#E5E5E5">the kvn one but without doing</font><font color="#CCCCCC"> all the</font>

532
00:30:02,269 --> 00:30:08,919
<font color="#CCCCCC">KVM stuff you know black</font><font color="#E5E5E5"> tomato to give</font>

533
00:30:05,240 --> 00:30:08,919
<font color="#E5E5E5">to tell you more about how this works</font>

534
00:30:28,520 --> 00:30:36,750
so<font color="#E5E5E5"> Ricardo showed a couple of the</font><font color="#CCCCCC"> seller</font>

535
00:30:34,020 --> 00:30:39,270
<font color="#CCCCCC">five targets that use tenders to run on</font>

536
00:30:36,750 --> 00:30:42,929
monolithic kernels

537
00:30:39,270 --> 00:30:44,850
what<font color="#CCCCCC"> do these actually</font><font color="#E5E5E5"> do so there's the</font>

538
00:30:42,929 --> 00:30:48,360
HVT which is the hardware virtualized

539
00:30:44,850 --> 00:30:52,168
tender<font color="#E5E5E5"> which uses hardware</font>

540
00:30:48,360 --> 00:30:55,649
virtualization<font color="#E5E5E5"> Leslie from the name it</font>

541
00:30:52,169 --> 00:30:59,760
runs on<font color="#E5E5E5"> a VM on Linux on FreeBSD on</font>

542
00:30:55,650 --> 00:31:02,850
<font color="#E5E5E5">beehive</font><font color="#CCCCCC"> and on open BSD on the VM M</font>

543
00:30:59,760 --> 00:31:05,580
api's<font color="#E5E5E5"> so this is this is not a</font>

544
00:31:02,850 --> 00:31:09,689
traditional<font color="#CCCCCC"> vm m</font><font color="#E5E5E5"> not even close it has</font>

545
00:31:05,580 --> 00:31:11,879
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 10 hyper calls itself the</font><font color="#E5E5E5"> code</font>

546
00:31:09,690 --> 00:31:15,179
<font color="#E5E5E5">base is modular again a typical</font>

547
00:31:11,880 --> 00:31:18,059
configuration so a<font color="#CCCCCC"> seller 5 HVT on Linux</font>

548
00:31:15,179 --> 00:31:23,100
on<font color="#E5E5E5"> x86 64 would be about one and a half</font>

549
00:31:18,059 --> 00:31:24,600
<font color="#E5E5E5">thousand lines of code</font><font color="#CCCCCC"> so again right</font>

550
00:31:23,100 --> 00:31:27,389
we're<font color="#E5E5E5"> talking about the tender which is</font>

551
00:31:24,600 --> 00:31:29,668
this<font color="#CCCCCC"> pouch it's</font><font color="#E5E5E5"> the bottom intersection</font>

552
00:31:27,390 --> 00:31:34,440
of the bottom triangle<font color="#E5E5E5"> with the blue</font>

553
00:31:29,669 --> 00:31:38,850
circle<font color="#E5E5E5"> comparing to something like</font><font color="#CCCCCC"> Q mu</font>

554
00:31:34,440 --> 00:31:40,590
<font color="#CCCCCC">L Q mu</font><font color="#E5E5E5"> I tried to be nice to them so I</font>

555
00:31:38,850 --> 00:31:42,750
ignored the one and a half million lines

556
00:31:40,590 --> 00:31:44,879
of code that<font color="#CCCCCC"> was just random blobs</font><font color="#E5E5E5"> of</font>

557
00:31:42,750 --> 00:31:48,559
firmware<font color="#E5E5E5"> and stuff and that still leaves</font>

558
00:31:44,880 --> 00:31:48,559
another roughly<font color="#CCCCCC"> million lines of code</font>

559
00:31:48,830 --> 00:31:54,750
<font color="#CCCCCC">something like cross VM</font><font color="#E5E5E5"> this may be a</font>

560
00:31:51,570 --> 00:31:57,570
<font color="#E5E5E5">little bit unfair but I didn't</font><font color="#CCCCCC"> S</font><font color="#E5E5E5"> lock</font>

561
00:31:54,750 --> 00:31:59,490
counts doesn't<font color="#CCCCCC"> understand rust so but I</font>

562
00:31:57,570 --> 00:32:03,510
came<font color="#CCCCCC"> up with something</font><font color="#E5E5E5"> which looks like</font>

563
00:31:59,490 --> 00:32:05,179
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> it's an order of magnitude smaller</font>

564
00:32:03,510 --> 00:32:08,280
[Music]

565
00:32:05,179 --> 00:32:10,230
<font color="#CCCCCC">HVT is</font><font color="#E5E5E5"> also something that we've was the</font>

566
00:32:08,280 --> 00:32:13,280
first tender that we<font color="#E5E5E5"> implemented so it's</font>

567
00:32:10,230 --> 00:32:15,720
been around<font color="#CCCCCC"> since</font><font color="#E5E5E5"> 2015 it works then got</font>

568
00:32:13,280 --> 00:32:18,658
freebsd added into<font color="#CCCCCC"> it and then open BSD</font>

569
00:32:15,720 --> 00:32:21,840
<font color="#CCCCCC">contributors later as well</font>

570
00:32:18,659 --> 00:32:23,880
it was formerly known<font color="#CCCCCC"> as UK</font><font color="#E5E5E5"> VM which</font>

571
00:32:21,840 --> 00:32:30,120
some<font color="#E5E5E5"> people here may</font><font color="#CCCCCC"> be familiar with</font>

572
00:32:23,880 --> 00:32:32,400
<font color="#CCCCCC">that</font><font color="#E5E5E5"> name so what is the tender</font>

573
00:32:30,120 --> 00:32:37,320
responsible for well it loads the<font color="#CCCCCC"> unique</font>

574
00:32:32,400 --> 00:32:40,049
on all<font color="#E5E5E5"> artifacts into the V CPUs memory</font>

575
00:32:37,320 --> 00:32:41,560
it sets up access<font color="#CCCCCC"> to the host resources</font>

576
00:32:40,049 --> 00:32:44,889
that the unit kernel

577
00:32:41,560 --> 00:32:48,760
asking for<font color="#CCCCCC"> so the network tap device or</font>

578
00:32:44,890 --> 00:32:50,350
the disk block device does some<font color="#CCCCCC"> vcp you</font>

579
00:32:48,760 --> 00:32:52,930
set<font color="#E5E5E5"> up sets up page tables for the</font>

580
00:32:50,350 --> 00:32:56,649
<font color="#CCCCCC">guests which are very simple</font><font color="#E5E5E5"> just one to</font>

581
00:32:52,930 --> 00:33:00,880
one page tables<font color="#E5E5E5"> so there's no no virtual</font>

582
00:32:56,650 --> 00:33:06,400
memory is<font color="#E5E5E5"> being used at the at the guest</font>

583
00:33:00,880 --> 00:33:10,390
<font color="#E5E5E5">level and then it needs to hang around</font>

584
00:33:06,400 --> 00:33:18,660
to handle<font color="#CCCCCC"> guest hyper calls which handle</font>

585
00:33:10,390 --> 00:33:18,660
VM exits to<font color="#E5E5E5"> actually perform some IO so</font>

586
00:33:18,780 --> 00:33:27,940
hyper calls<font color="#CCCCCC"> what do they actually look</font>

587
00:33:22,810 --> 00:33:30,280
like<font color="#E5E5E5"> what we do is we transfer a 32-bit</font>

588
00:33:27,940 --> 00:33:31,810
pointer to a struct<font color="#E5E5E5"> which contains the</font>

589
00:33:30,280 --> 00:33:36,250
hyper called

590
00:33:31,810 --> 00:33:39,129
parameters<font color="#CCCCCC"> the reason there is this</font>

591
00:33:36,250 --> 00:33:42,130
hybrid approach is we<font color="#CCCCCC"> actually want to</font>

592
00:33:39,130 --> 00:33:44,860
run on existing deployed<font color="#CCCCCC"> KVM systems so</font>

593
00:33:42,130 --> 00:33:46,960
I think that's indeed<font color="#CCCCCC"> ski I don't know</font>

594
00:33:44,860 --> 00:33:49,840
if he's here mentioned<font color="#CCCCCC"> VM funk</font>

595
00:33:46,960 --> 00:33:52,780
there is also an instruction called VM

596
00:33:49,840 --> 00:33:55,419
call which you could<font color="#CCCCCC"> use on x86 for this</font>

597
00:33:52,780 --> 00:33:58,690
except that<font color="#CCCCCC"> k vm</font><font color="#E5E5E5"> steals that for its own</font>

598
00:33:55,420 --> 00:34:01,900
purposes<font color="#CCCCCC"> so too</font><font color="#E5E5E5"> bad so we figured out</font>

599
00:33:58,690 --> 00:34:04,660
this approach which on x86 basically

600
00:34:01,900 --> 00:34:09,909
does an ounce<font color="#CCCCCC"> - some ports which causes</font>

601
00:34:04,660 --> 00:34:12,490
the<font color="#CCCCCC"> VM exit and on our 64 we do an M</font><font color="#E5E5E5"> mio</font>

602
00:34:09,909 --> 00:34:15,159
<font color="#E5E5E5">- some region which also causes</font><font color="#CCCCCC"> VM exit</font>

603
00:34:12,489 --> 00:34:17,319
<font color="#E5E5E5">at that point the tender just fishes the</font>

604
00:34:15,159 --> 00:34:24,550
data out of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> guest memory and</font>

605
00:34:17,320 --> 00:34:26,679
operates on<font color="#CCCCCC"> it</font><font color="#E5E5E5"> directly so</font><font color="#CCCCCC"> the HVT</font>

606
00:34:24,550 --> 00:34:28,960
<font color="#E5E5E5">bindings then implement the</font><font color="#CCCCCC"> seller v</font>

607
00:34:26,679 --> 00:34:31,240
interface on using these hyper calls to

608
00:34:28,960 --> 00:34:32,949
talk to the tender<font color="#CCCCCC"> part</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> that they</font>

609
00:34:31,239 --> 00:34:35,979
don't do<font color="#CCCCCC"> very much so</font><font color="#E5E5E5"> there's some</font>

610
00:34:32,949 --> 00:34:39,638
handling of<font color="#CCCCCC"> V CPU trap vectors which</font>

611
00:34:35,980 --> 00:34:45,340
basically just<font color="#CCCCCC"> say</font><font color="#E5E5E5"> oh we got a trap</font><font color="#CCCCCC"> I</font>

612
00:34:39,639 --> 00:34:48,580
<font color="#CCCCCC">bought sorry and the only</font><font color="#E5E5E5"> other thing</font>

613
00:34:45,340 --> 00:34:50,020
<font color="#CCCCCC">they do is provide</font><font color="#E5E5E5"> monotonic time using</font>

614
00:34:48,580 --> 00:34:53,139
a timestamp counter or an equivalent

615
00:34:50,020 --> 00:34:55,449
mechanism so<font color="#E5E5E5"> you can see an entire</font>

616
00:34:53,139 --> 00:34:58,150
implementation<font color="#CCCCCC"> of sulla</font><font color="#E5E5E5"> 5</font><font color="#CCCCCC"> NIT right</font>

617
00:34:55,449 --> 00:35:01,629
for<font color="#CCCCCC"> HVT which is basically just</font><font color="#E5E5E5"> putting</font>

618
00:34:58,150 --> 00:35:05,320
<font color="#E5E5E5">stuff into a structure and then invoking</font>

619
00:35:01,630 --> 00:35:07,690
the hyper call<font color="#CCCCCC"> the mucking about with</font>

620
00:35:05,320 --> 00:35:09,609
<font color="#E5E5E5">return codes here is because these two</font>

621
00:35:07,690 --> 00:35:17,530
interfaces actually need to be aligned

622
00:35:09,609 --> 00:35:19,299
but we haven't<font color="#CCCCCC"> done that</font><font color="#E5E5E5"> yet so Ricardo</font>

623
00:35:17,530 --> 00:35:21,520
showed you<font color="#CCCCCC"> HVT but we also have</font>

624
00:35:19,300 --> 00:35:25,510
something called<font color="#E5E5E5"> SPT which we're calling</font>

625
00:35:21,520 --> 00:35:27,160
a sandbox process tender<font color="#CCCCCC"> the</font><font color="#E5E5E5"> interesting</font>

626
00:35:25,510 --> 00:35:31,290
<font color="#E5E5E5">thing about this notice</font><font color="#CCCCCC"> that the blue</font>

627
00:35:27,160 --> 00:35:31,290
circle suddenly got much much smaller

628
00:35:31,380 --> 00:35:38,619
so what SPT does is instead<font color="#CCCCCC"> of using</font>

629
00:35:36,520 --> 00:35:40,660
<font color="#E5E5E5">hardware virtualization which is great</font>

630
00:35:38,619 --> 00:35:42,760
if you have<font color="#CCCCCC"> it but you</font><font color="#E5E5E5"> don't always have</font>

631
00:35:40,660 --> 00:35:45,609
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that but just for example you</font>

632
00:35:42,760 --> 00:35:48,220
might<font color="#CCCCCC"> be running</font><font color="#E5E5E5"> into clouds</font><font color="#CCCCCC"> where</font>

633
00:35:45,609 --> 00:35:50,828
you're already virtualized<font color="#CCCCCC"> while nested</font>

634
00:35:48,220 --> 00:35:52,509
<font color="#E5E5E5">virtualization exists it's not something</font>

635
00:35:50,829 --> 00:35:57,130
I would<font color="#CCCCCC"> actually use</font><font color="#E5E5E5"> to isolate things</font>

636
00:35:52,510 --> 00:36:00,760
with<font color="#E5E5E5"> so instead we had this realization</font>

637
00:35:57,130 --> 00:36:03,099
that's oh we could just we already know

638
00:36:00,760 --> 00:36:06,790
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> the calls we need to implement</font>

639
00:36:03,099 --> 00:36:08,470
this interface<font color="#E5E5E5"> so</font><font color="#CCCCCC"> why not just use a</font>

640
00:36:06,790 --> 00:36:12,759
system call filter you use a strict

641
00:36:08,470 --> 00:36:17,160
system<font color="#CCCCCC"> call filter and turn off all the</font>

642
00:36:12,760 --> 00:36:20,020
api's that the host<font color="#E5E5E5"> kernel is providing</font>

643
00:36:17,160 --> 00:36:24,279
and it turns out<font color="#E5E5E5"> that this is</font><font color="#CCCCCC"> exactly</font>

644
00:36:20,020 --> 00:36:26,349
what SBT does currently we only<font color="#E5E5E5"> have</font>

645
00:36:24,280 --> 00:36:30,180
<font color="#E5E5E5">this implemented for</font><font color="#CCCCCC"> Linux using second</font>

646
00:36:26,349 --> 00:36:33,520
BPF but it should be<font color="#CCCCCC"> possible to port to</font>

647
00:36:30,180 --> 00:36:38,259
<font color="#E5E5E5">FreeBSD and</font><font color="#CCCCCC"> OpenBSD</font><font color="#E5E5E5"> there's also</font><font color="#CCCCCC"> a link</font>

648
00:36:33,520 --> 00:36:41,490
<font color="#CCCCCC">to our</font><font color="#E5E5E5"> paper from last</font><font color="#CCCCCC"> year which talks</font>

649
00:36:38,260 --> 00:36:44,109
a bit more about quantifying<font color="#E5E5E5"> the this</font>

650
00:36:41,490 --> 00:36:46,828
difference in the TCB<font color="#E5E5E5"> where we actually</font>

651
00:36:44,109 --> 00:36:50,109
make<font color="#E5E5E5"> some things where we say they're</font>

652
00:36:46,829 --> 00:36:52,859
using something like<font color="#CCCCCC"> HVT which touches</font>

653
00:36:50,109 --> 00:36:55,328
hardware virtualization and KVM and

654
00:36:52,859 --> 00:36:58,598
actually ends<font color="#E5E5E5"> up using more of the</font><font color="#CCCCCC"> host</font>

655
00:36:55,329 --> 00:37:01,119
kernel code than the approach where we

656
00:36:58,599 --> 00:37:05,410
switch<font color="#E5E5E5"> off all but these</font><font color="#CCCCCC"> seven system</font>

657
00:37:01,119 --> 00:37:08,140
calls<font color="#E5E5E5"> so similarly to</font><font color="#CCCCCC"> HVT spt loads the</font>

658
00:37:05,410 --> 00:37:09,910
you do kernel into its process address

659
00:37:08,140 --> 00:37:11,940
space

660
00:37:09,910 --> 00:37:14,319
sets up access to<font color="#CCCCCC"> the host resources</font>

661
00:37:11,940 --> 00:37:16,650
applies the sandbox and<font color="#E5E5E5"> then basically</font>

662
00:37:14,320 --> 00:37:18,850
<font color="#CCCCCC">gets out of</font><font color="#E5E5E5"> the way</font>

663
00:37:16,650 --> 00:37:21,430
so the blue circle<font color="#E5E5E5"> should actually</font>

664
00:37:18,850 --> 00:37:31,210
disappear at this point but I<font color="#E5E5E5"> don't have</font>

665
00:37:21,430 --> 00:37:34,569
animations and in there<font color="#E5E5E5"> so what this</font>

666
00:37:31,210 --> 00:37:36,220
<font color="#E5E5E5">does is you've now taken the your you</font>

667
00:37:34,570 --> 00:37:38,800
know<font color="#CCCCCC"> kernel recompile the same code</font>

668
00:37:36,220 --> 00:37:41,020
against a<font color="#E5E5E5"> different targets</font><font color="#CCCCCC"> and you're</font>

669
00:37:38,800 --> 00:37:42,490
now<font color="#CCCCCC"> running as essentially a user</font>

670
00:37:41,020 --> 00:37:45,070
process so that's<font color="#E5E5E5"> coming back to the</font>

671
00:37:42,490 --> 00:37:46,839
<font color="#E5E5E5">original slide where I say just</font><font color="#CCCCCC"> unique</font>

672
00:37:45,070 --> 00:37:49,720
<font color="#CCCCCC">and also just</font><font color="#E5E5E5"> like processes that do</font>

673
00:37:46,840 --> 00:37:52,690
<font color="#E5E5E5">more and here we're</font><font color="#CCCCCC"> basically treating</font>

674
00:37:49,720 --> 00:37:54,850
the micro<font color="#E5E5E5"> the</font><font color="#CCCCCC"> monolithic kernel</font><font color="#E5E5E5"> as kind</font>

675
00:37:52,690 --> 00:38:02,320
of<font color="#E5E5E5"> as a hypervisor so</font><font color="#CCCCCC"> you switch off</font>

676
00:37:54,850 --> 00:38:05,080
<font color="#E5E5E5">everything so some more about the the</font>

677
00:38:02,320 --> 00:38:07,840
<font color="#E5E5E5">binding sides those who are interested</font>

678
00:38:05,080 --> 00:38:09,640
<font color="#E5E5E5">so the bindings basically end up</font>

679
00:38:07,840 --> 00:38:11,650
directly invoking system calls but they

680
00:38:09,640 --> 00:38:13,540
are now inside<font color="#E5E5E5"> this sandbox which they</font>

681
00:38:11,650 --> 00:38:18,490
cannot change

682
00:38:13,540 --> 00:38:22,570
there's no<font color="#CCCCCC"> Lib C</font><font color="#E5E5E5"> involved in there yep</font>

683
00:38:18,490 --> 00:38:25,120
<font color="#E5E5E5">we have it for x86 64</font><font color="#CCCCCC"> hour now</font><font color="#E5E5E5"> and 64</font>

684
00:38:22,570 --> 00:38:26,560
<font color="#E5E5E5">it's for</font><font color="#CCCCCC"> SPT it's pretty trivial to add</font>

685
00:38:25,120 --> 00:38:29,830
<font color="#E5E5E5">basically anything that</font><font color="#CCCCCC"> the host</font>

686
00:38:26,560 --> 00:38:31,450
supports for<font color="#CCCCCC"> HVT not sure if I mentioned</font>

687
00:38:29,830 --> 00:38:33,340
<font color="#CCCCCC">that we also have these two</font>

688
00:38:31,450 --> 00:38:43,310
architectures<font color="#E5E5E5"> it's a little bit more</font>

689
00:38:33,340 --> 00:38:53,210
<font color="#E5E5E5">work but yeah what just happened</font>

690
00:38:43,310 --> 00:38:53,210
<font color="#E5E5E5">hmm</font><font color="#CCCCCC"> oh I clicked on something and okay</font>

691
00:38:54,619 --> 00:39:06,150
so as I mentioned we<font color="#E5E5E5"> have targets for</font>

692
00:39:00,260 --> 00:39:07,980
<font color="#E5E5E5">microkernels as well as well so you earn</font>

693
00:39:06,150 --> 00:39:09,660
<font color="#E5E5E5">is a rather</font><font color="#CCCCCC"> interesting it's actually</font>

694
00:39:07,980 --> 00:39:12,630
<font color="#E5E5E5">technically called the separation</font>

695
00:39:09,660 --> 00:39:16,290
<font color="#E5E5E5">colonel</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> for people that are not</font>

696
00:39:12,630 --> 00:39:18,060
familiar with<font color="#CCCCCC"> the distinction separation</font>

697
00:39:16,290 --> 00:39:20,250
<font color="#E5E5E5">can all gives you much</font><font color="#CCCCCC"> I mean a</font>

698
00:39:18,060 --> 00:39:25,890
simplified<font color="#CCCCCC"> way gives you much stronger</font>

699
00:39:20,250 --> 00:39:28,560
guarantees<font color="#E5E5E5"> about how your components can</font>

700
00:39:25,890 --> 00:39:31,799
<font color="#CCCCCC">can communicate so about the data flow</font>

701
00:39:28,560 --> 00:39:34,170
between the things in the system<font color="#CCCCCC"> it's</font>

702
00:39:31,800 --> 00:39:36,750
also I<font color="#E5E5E5"> mean the original term is used as</font>

703
00:39:34,170 --> 00:39:39,300
a way<font color="#CCCCCC"> of saying that the componentized</font>

704
00:39:36,750 --> 00:39:41,940
system should look<font color="#E5E5E5"> exactly like as if it</font>

705
00:39:39,300 --> 00:39:43,980
were a distributed system you can you

706
00:39:41,940 --> 00:39:49,730
can<font color="#E5E5E5"> look up the</font><font color="#CCCCCC"> term and there's some</font>

707
00:39:43,980 --> 00:39:52,050
more<font color="#CCCCCC"> discussion about it there so men</font>

708
00:39:49,730 --> 00:39:54,869
provides isolation<font color="#E5E5E5"> using hardware</font>

709
00:39:52,050 --> 00:39:57,690
virtualization<font color="#E5E5E5"> it's implemented in in a</font>

710
00:39:54,869 --> 00:39:59,430
<font color="#E5E5E5">dos back and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> formally proven to</font>

711
00:39:57,690 --> 00:40:01,790
contain no runtime errors at the source

712
00:39:59,430 --> 00:40:01,790
<font color="#CCCCCC">code level</font>

713
00:40:02,180 --> 00:40:09,859
the shape is<font color="#E5E5E5"> now a bit different</font><font color="#CCCCCC"> so the</font>

714
00:40:06,119 --> 00:40:16,920
blue circle has moved more or less into

715
00:40:09,859 --> 00:40:20,700
the<font color="#CCCCCC"> eunich on all and and moon</font><font color="#E5E5E5"> is much</font>

716
00:40:16,920 --> 00:40:24,050
much more there aren't any hyper calls

717
00:40:20,700 --> 00:40:26,129
<font color="#E5E5E5">communication is done via shared memory</font>

718
00:40:24,050 --> 00:40:30,060
<font color="#CCCCCC">Verto was the first</font><font color="#E5E5E5"> solar 5</font>

719
00:40:26,130 --> 00:40:32,130
implementation shape<font color="#E5E5E5"> doesn't really</font>

720
00:40:30,060 --> 00:40:35,369
match up<font color="#E5E5E5"> we still have it there because</font>

721
00:40:32,130 --> 00:40:37,230
well<font color="#E5E5E5"> people find it useful</font><font color="#CCCCCC"> I mean it</font>

722
00:40:35,369 --> 00:40:39,329
runs<font color="#E5E5E5"> on Google compute engine that's</font>

723
00:40:37,230 --> 00:40:41,099
great but yeah it's you know like

724
00:40:39,329 --> 00:40:44,130
student<font color="#CCCCCC"> 1/2 thousand lines of</font><font color="#E5E5E5"> code in</font>

725
00:40:41,099 --> 00:40:45,960
there just to divert<font color="#CCCCCC"> her stuff anyone</font>

726
00:40:44,130 --> 00:40:49,560
want to implement Verto<font color="#CCCCCC"> scuzzy not</font>

727
00:40:45,960 --> 00:40:51,630
really<font color="#CCCCCC"> debugging this is the special</font>

728
00:40:49,560 --> 00:40:54,240
slides<font color="#CCCCCC"> there is this myth that you</font>

729
00:40:51,630 --> 00:40:55,040
<font color="#CCCCCC">Nicole's</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> debugger ball just use</font>

730
00:40:54,240 --> 00:40:57,939
gdb

731
00:40:55,040 --> 00:40:59,920
[Laughter]

732
00:40:57,940 --> 00:41:02,740
and you can do it<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> Unicode all</font>

733
00:40:59,920 --> 00:41:10,330
hidden<font color="#E5E5E5"> inside an</font><font color="#CCCCCC"> hv TVM</font><font color="#E5E5E5"> or with</font><font color="#CCCCCC"> SPT as</font>

734
00:41:02,740 --> 00:41:12,700
well<font color="#E5E5E5"> some lessons learned</font><font color="#CCCCCC"> okay this is a</font>

735
00:41:10,330 --> 00:41:16,420
bit complicated<font color="#CCCCCC"> I have only five minutes</font>

736
00:41:12,700 --> 00:41:18,970
but originally<font color="#E5E5E5"> we with UK VM we wanted</font>

737
00:41:16,420 --> 00:41:21,550
to specialize the tender to<font color="#CCCCCC"> the inner</font>

738
00:41:18,970 --> 00:41:23,859
kernel it turns out that and we did that

739
00:41:21,550 --> 00:41:25,660
at compile time<font color="#CCCCCC"> that's not</font><font color="#E5E5E5"> practical the</font>

740
00:41:23,860 --> 00:41:27,130
supply chain doesn't<font color="#CCCCCC"> make sense you're</font>

741
00:41:25,660 --> 00:41:29,290
<font color="#CCCCCC">not going</font><font color="#E5E5E5"> to be supplying the tender and</font>

742
00:41:27,130 --> 00:41:34,840
<font color="#CCCCCC">the inner kernel at the same time it's</font>

743
00:41:29,290 --> 00:41:36,580
now gone but we<font color="#CCCCCC"> still want to</font><font color="#E5E5E5"> it's gone</font>

744
00:41:34,840 --> 00:41:39,040
for SBT we still haven't removed<font color="#E5E5E5"> it for</font>

745
00:41:36,580 --> 00:41:40,840
<font color="#CCCCCC">HVT but it needs</font><font color="#E5E5E5"> to go we still want to</font>

746
00:41:39,040 --> 00:41:44,650
enforce<font color="#CCCCCC"> contract between the</font><font color="#E5E5E5"> tenor and</font>

747
00:41:40,840 --> 00:41:48,040
<font color="#CCCCCC">the</font><font color="#E5E5E5"> eunich kernel so the you know kernel</font>

748
00:41:44,650 --> 00:41:49,840
want some resources tender should match

749
00:41:48,040 --> 00:41:52,529
those and<font color="#E5E5E5"> not accidentally provide</font>

750
00:41:49,840 --> 00:41:54,910
<font color="#E5E5E5">something else possible solution is to</font>

751
00:41:52,530 --> 00:41:58,330
embed a manifest into the unit kernel

752
00:41:54,910 --> 00:42:02,620
<font color="#E5E5E5">artifacts but can we still specialize</font>

753
00:41:58,330 --> 00:42:05,560
the tender<font color="#E5E5E5"> some plans and challenges</font>

754
00:42:02,620 --> 00:42:08,319
security we gradually implementing more

755
00:42:05,560 --> 00:42:13,320
best<font color="#CCCCCC"> practices like a SLR stack smashing</font>

756
00:42:08,320 --> 00:42:15,760
protection write or execute<font color="#CCCCCC"> batts</font><font color="#E5E5E5"> again</font>

757
00:42:13,320 --> 00:42:17,560
stack smashing protection the compiler a

758
00:42:15,760 --> 00:42:18,970
<font color="#E5E5E5">be eyes are completely undocumented you</font>

759
00:42:17,560 --> 00:42:20,799
have to go and<font color="#E5E5E5"> read</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> compiler source</font>

760
00:42:18,970 --> 00:42:24,220
to<font color="#E5E5E5"> find out what it's doing</font><font color="#CCCCCC"> that Oh on</font>

761
00:42:20,800 --> 00:42:28,920
x86 it always<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> descent</font><font color="#E5E5E5"> FS :</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> X</font>

762
00:42:24,220 --> 00:42:28,919
<font color="#CCCCCC">28</font><font color="#E5E5E5"> why isn't that specified somewhere</font>

763
00:42:30,180 --> 00:42:35,950
from so there's some hypervisor support

764
00:42:33,520 --> 00:42:38,740
lacking on<font color="#CCCCCC"> freebsd and OpenBSD</font><font color="#E5E5E5"> where if</font>

765
00:42:35,950 --> 00:42:41,169
you do a<font color="#E5E5E5"> name</font><font color="#CCCCCC"> protects on memory that's</font>

766
00:42:38,740 --> 00:42:43,870
owned by<font color="#CCCCCC"> the guest by</font><font color="#E5E5E5"> the hypervisor</font>

767
00:42:41,170 --> 00:42:46,000
<font color="#CCCCCC">that</font><font color="#E5E5E5"> does not update the EPT tables it's</font>

768
00:42:43,870 --> 00:42:51,299
just an<font color="#E5E5E5"> OP</font><font color="#CCCCCC"> avium actually does this</font>

769
00:42:46,000 --> 00:42:54,730
right<font color="#CCCCCC"> and some defense defense and debts</font>

770
00:42:51,300 --> 00:42:56,800
<font color="#E5E5E5">portability can we do dynamic linking</font>

771
00:42:54,730 --> 00:42:58,330
safely and get<font color="#E5E5E5"> a tender independent you</font>

772
00:42:56,800 --> 00:43:00,520
<font color="#E5E5E5">know kernel binary so none of this</font><font color="#CCCCCC"> ahead</font>

773
00:42:58,330 --> 00:43:03,700
of time<font color="#E5E5E5"> choosing if do I want this or</font>

774
00:43:00,520 --> 00:43:06,730
that isolation<font color="#E5E5E5"> mechanism</font><font color="#CCCCCC"> that's a very</font>

775
00:43:03,700 --> 00:43:08,569
good<font color="#E5E5E5"> question</font><font color="#CCCCCC"> can we define an interface</font>

776
00:43:06,730 --> 00:43:11,059
that<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> async</font>

777
00:43:08,569 --> 00:43:13,130
but is consistent with our<font color="#E5E5E5"> philosophy if</font>

778
00:43:11,059 --> 00:43:15,319
someone can define one for me on<font color="#CCCCCC"> a back</font>

779
00:43:13,130 --> 00:43:18,440
<font color="#CCCCCC">of a beer mat and there's later this</font>

780
00:43:15,319 --> 00:43:21,670
evening then you are definitely<font color="#CCCCCC"> god</font>

781
00:43:18,440 --> 00:43:21,670
[Laughter]

782
00:43:22,089 --> 00:43:31,308
please contribute we would like more

783
00:43:26,569 --> 00:43:33,949
languages and<font color="#CCCCCC"> LeBeau essays portage</font><font color="#E5E5E5"> also</font>

784
00:43:31,309 --> 00:43:36,799
more targets<font color="#CCCCCC"> HVT should run on</font><font color="#E5E5E5"> Mac</font>

785
00:43:33,949 --> 00:43:39,650
coughs you<font color="#E5E5E5"> should be able to build a</font>

786
00:43:36,799 --> 00:43:48,429
nest<font color="#E5E5E5"> gxn clave out of this using keeping</font>

787
00:43:39,650 --> 00:43:52,009
the same interface webassembly<font color="#CCCCCC"> okay</font>

788
00:43:48,429 --> 00:43:55,759
related work<font color="#E5E5E5"> how much time do I have two</font>

789
00:43:52,009 --> 00:43:58,429
<font color="#E5E5E5">minutes this should be on a spectrum</font>

790
00:43:55,759 --> 00:44:01,929
<font color="#CCCCCC">solo</font><font color="#E5E5E5"> five is somewhere here like the</font>

791
00:43:58,429 --> 00:44:07,130
most radical<font color="#CCCCCC"> thing qmu is somewhere here</font>

792
00:44:01,929 --> 00:44:09,289
<font color="#CCCCCC">drawbridge is somewhere here</font><font color="#E5E5E5"> France VM</font>

793
00:44:07,130 --> 00:44:11,479
firecracker the air there<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> sort</font>

794
00:44:09,289 --> 00:44:13,369
<font color="#E5E5E5">of going towards</font><font color="#CCCCCC"> the right</font><font color="#E5E5E5"> G visor is</font>

795
00:44:11,479 --> 00:44:15,078
just weird that's up there<font color="#E5E5E5"> that's trying</font>

796
00:44:13,369 --> 00:44:19,809
<font color="#CCCCCC">to re-implement the</font><font color="#E5E5E5"> Linux Cisco</font>

797
00:44:15,079 --> 00:44:23,119
interface it go I mean yeah<font color="#CCCCCC"> it's strange</font>

798
00:44:19,809 --> 00:44:25,939
<font color="#E5E5E5">so we can do a lot with minimalism</font><font color="#CCCCCC"> we</font>

799
00:44:23,119 --> 00:44:29,839
have a tiny<font color="#E5E5E5"> API its legacy free</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> IC</font>

800
00:44:25,939 --> 00:44:32,509
licensed you can run<font color="#E5E5E5"> 1500</font><font color="#CCCCCC"> HVT things on</font>

801
00:44:29,839 --> 00:44:36,788
your three-year-old laptop<font color="#E5E5E5"> we want to</font>

802
00:44:32,509 --> 00:44:38,689
apply<font color="#CCCCCC"> UD kernels everywhere both on</font>

803
00:44:36,789 --> 00:44:40,219
monolithic systems because there are<font color="#E5E5E5"> a</font>

804
00:44:38,689 --> 00:44:42,589
<font color="#CCCCCC">lot of them around</font><font color="#E5E5E5"> but you should</font>

805
00:44:40,219 --> 00:44:45,369
trivially move to recompile your code

806
00:44:42,589 --> 00:44:49,489
and run<font color="#CCCCCC"> it and G nodes right on moon and</font>

807
00:44:45,369 --> 00:44:52,819
at the same time no compromises<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

808
00:44:49,489 --> 00:44:55,659
still get strong isolation<font color="#E5E5E5"> across the</font>

809
00:44:52,819 --> 00:44:55,659
spectrum of targets

810
00:45:05,810 --> 00:45:31,070
any questions<font color="#CCCCCC"> okay so what you're saying</font>

811
00:45:25,740 --> 00:45:34,350
is should<font color="#E5E5E5"> we sandbox</font><font color="#CCCCCC"> HVT even more</font><font color="#E5E5E5"> I</font>

812
00:45:31,070 --> 00:45:37,890
mean<font color="#CCCCCC"> so one of the things that we we</font>

813
00:45:34,350 --> 00:45:40,670
will do is extend the set<font color="#E5E5E5"> set content</font>

814
00:45:37,890 --> 00:45:44,190
box to the<font color="#E5E5E5"> HV</font><font color="#CCCCCC"> Jeetendra itself</font><font color="#E5E5E5"> right so</font>

815
00:45:40,670 --> 00:46:07,020
<font color="#CCCCCC">I think</font><font color="#E5E5E5"> that's that's kind of what you</font>

816
00:45:44,190 --> 00:46:27,770
<font color="#CCCCCC">were</font><font color="#E5E5E5"> you were touching on</font><font color="#CCCCCC"> no yeah it's</font>

817
00:46:07,020 --> 00:46:30,770
not recursive sorry any other questions

818
00:46:27,770 --> 00:46:30,770
yes

819
00:46:40,140 --> 00:46:46,710
that one<font color="#E5E5E5"> that was the</font><font color="#CCCCCC"> riff that was the</font>

820
00:46:42,850 --> 00:46:46,710
real code you will get so there's some

821
00:46:50,460 --> 00:46:56,200
<font color="#E5E5E5">there's no reason</font><font color="#CCCCCC"> you should get entry</font>

822
00:46:53,980 --> 00:46:58,540
into because there<font color="#E5E5E5"> aren't any signals</font>

823
00:46:56,200 --> 00:47:00,549
being<font color="#CCCCCC"> handles in</font><font color="#E5E5E5"> especially not in there</font>

824
00:46:58,540 --> 00:47:02,020
in the set comp case because you we

825
00:47:00,550 --> 00:47:04,510
<font color="#E5E5E5">don't even have sig</font><font color="#CCCCCC"> return and the</font>

826
00:47:02,020 --> 00:47:06,430
second filter<font color="#E5E5E5"> so if you get a signal</font>

827
00:47:04,510 --> 00:47:09,220
then<font color="#E5E5E5"> you can't handle it sorry</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> the</font>

828
00:47:06,430 --> 00:47:11,740
process just<font color="#E5E5E5"> dies</font><font color="#CCCCCC"> I haven't actually</font>

829
00:47:09,220 --> 00:47:13,959
seen<font color="#E5E5E5"> so I haven't really seen</font><font color="#CCCCCC"> Ian to</font>

830
00:47:11,740 --> 00:47:15,339
happen in any other<font color="#E5E5E5"> case in practice I</font>

831
00:47:13,960 --> 00:47:18,160
mean<font color="#CCCCCC"> if you're not</font><font color="#E5E5E5"> handling signals then</font>

832
00:47:15,340 --> 00:47:44,050
why would why should you<font color="#E5E5E5"> get that but a</font>

833
00:47:18,160 --> 00:47:45,220
good<font color="#CCCCCC"> point yeah</font><font color="#E5E5E5"> the other questions you</font>

834
00:47:44,050 --> 00:47:47,560
<font color="#CCCCCC">know you know you're not the first</font>

835
00:47:45,220 --> 00:47:49,689
<font color="#CCCCCC">person that's asked about</font><font color="#E5E5E5"> so can can</font>

836
00:47:47,560 --> 00:47:53,380
this be<font color="#CCCCCC"> used</font><font color="#E5E5E5"> for the sandboxing desktop</font>

837
00:47:49,690 --> 00:47:56,020
applications with actual UI<font color="#E5E5E5"> the question</font>

838
00:47:53,380 --> 00:47:58,650
is what would that<font color="#E5E5E5"> interface be because</font>

839
00:47:56,020 --> 00:48:01,420
then then you run into<font color="#CCCCCC"> the problem of</font>

840
00:47:58,650 --> 00:48:04,150
<font color="#E5E5E5">well if you want performance you want at</font>

841
00:48:01,420 --> 00:48:06,370
least<font color="#E5E5E5"> some kind of at least a frame</font>

842
00:48:04,150 --> 00:48:08,530
buffer<font color="#E5E5E5"> but then that's very low level so</font>

843
00:48:06,370 --> 00:48:10,299
it's like<font color="#E5E5E5"> where how do you decide</font><font color="#CCCCCC"> that</font>

844
00:48:08,530 --> 00:48:12,670
abstraction<font color="#CCCCCC"> right I mean how would</font><font color="#E5E5E5"> this</font>

845
00:48:10,300 --> 00:48:15,520
run across this interface I mean potat

846
00:48:12,670 --> 00:48:18,970
you could of course<font color="#E5E5E5"> certainly run like</font>

847
00:48:15,520 --> 00:48:21,640
an X 11 client inside this thing right

848
00:48:18,970 --> 00:48:24,819
and have that talking to<font color="#E5E5E5"> an X server</font>

849
00:48:21,640 --> 00:48:28,270
somewhere<font color="#E5E5E5"> else right so so that would be</font>

850
00:48:24,820 --> 00:48:30,970
one<font color="#CCCCCC"> way of accomplishing that but yeah I</font>

851
00:48:28,270 --> 00:48:33,310
<font color="#CCCCCC">mean possibly</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> they're not the</font>

852
00:48:30,970 --> 00:48:35,200
cleanest approach I'm not sure<font color="#CCCCCC"> I know</font>

853
00:48:33,310 --> 00:48:38,140
<font color="#E5E5E5">that there are people that did things</font>

854
00:48:35,200 --> 00:48:39,370
<font color="#E5E5E5">with I mean even that</font><font color="#CCCCCC"> even the</font><font color="#E5E5E5"> GNote</font>

855
00:48:38,140 --> 00:48:41,109
folks have been<font color="#CCCCCC"> doing things</font><font color="#E5E5E5"> with</font>

856
00:48:39,370 --> 00:48:43,779
virtualizing graphics hardware but it's

857
00:48:41,110 --> 00:48:46,410
<font color="#E5E5E5">really quite a different area which I</font>

858
00:48:43,780 --> 00:48:46,410
<font color="#CCCCCC">don't know that</font><font color="#E5E5E5"> much about</font>

859
00:48:47,260 --> 00:48:51,300
but yeah you could do the x11 thing or

860
00:48:53,630 --> 00:48:59,139
[Applause]

