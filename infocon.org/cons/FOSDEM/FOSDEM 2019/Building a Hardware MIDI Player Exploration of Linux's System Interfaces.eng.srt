1
00:00:04,630 --> 00:00:11,950
<font color="#E5E5E5">Hey so I'll be talking about</font><font color="#CCCCCC"> go and MIDI</font>

2
00:00:08,760 --> 00:00:15,910
<font color="#CCCCCC">but really</font><font color="#E5E5E5"> really talking about calling</font>

3
00:00:11,950 --> 00:00:18,759
to the Linux system from go<font color="#CCCCCC"> MIDI is just</font>

4
00:00:15,910 --> 00:00:21,759
a great example<font color="#E5E5E5"> of ancient stuff that's</font>

5
00:00:18,760 --> 00:00:24,010
<font color="#E5E5E5">still great</font><font color="#CCCCCC"> so there's a couple</font>

6
00:00:21,760 --> 00:00:26,020
<font color="#E5E5E5">different tracks here</font><font color="#CCCCCC"> six tracks we're</font>

7
00:00:24,010 --> 00:00:28,690
currently<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> track</font><font color="#CCCCCC"> that's the</font>

8
00:00:26,020 --> 00:00:33,070
presentation header<font color="#E5E5E5"> will be moving into</font>

9
00:00:28,690 --> 00:00:37,300
what MIDI is<font color="#CCCCCC"> then</font><font color="#E5E5E5"> on to Linux hardware</font>

10
00:00:33,070 --> 00:00:43,420
for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> a demo maybe</font><font color="#E5E5E5"> and a conclusion</font>

11
00:00:37,300 --> 00:00:45,699
<font color="#CCCCCC">so if you don't know MIDI is not just a</font>

12
00:00:43,420 --> 00:00:49,839
train station<font color="#CCCCCC"> you guys got here on it's</font>

13
00:00:45,699 --> 00:00:51,309
a protocol from the early 1980s<font color="#E5E5E5"> used to</font>

14
00:00:49,839 --> 00:00:53,789
connect computers and musical

15
00:00:51,309 --> 00:00:55,989
<font color="#CCCCCC">instruments with synthesizers and</font>

16
00:00:53,789 --> 00:00:59,229
effects and all sorts of<font color="#E5E5E5"> wonderful</font>

17
00:00:55,989 --> 00:01:03,578
things<font color="#CCCCCC"> it's so an active use it's at the</font>

18
00:00:59,229 --> 00:01:07,450
<font color="#E5E5E5">21 K</font><font color="#CCCCCC"> bits for a second support 16</font>

19
00:01:03,579 --> 00:01:10,390
channels multiplexed<font color="#CCCCCC"> and</font><font color="#E5E5E5"> no audio data</font>

20
00:01:07,450 --> 00:01:13,869
is transmitted it's just triggering

21
00:01:10,390 --> 00:01:19,299
notes on remote devices so it's like<font color="#CCCCCC"> G</font>

22
00:01:13,869 --> 00:01:20,979
<font color="#CCCCCC">RPC but a long</font><font color="#E5E5E5"> time ago so live messages</font>

23
00:01:19,299 --> 00:01:22,630
<font color="#E5E5E5">be like you're in an actual performance</font>

24
00:01:20,979 --> 00:01:24,460
there's really two types<font color="#E5E5E5"> of messages</font>

25
00:01:22,630 --> 00:01:26,979
that<font color="#CCCCCC"> you would be working with</font><font color="#E5E5E5"> channel</font>

26
00:01:24,460 --> 00:01:29,288
messages which<font color="#CCCCCC"> is voice or note data</font><font color="#E5E5E5"> and</font>

27
00:01:26,979 --> 00:01:31,750
a mode which pretty much is about

28
00:01:29,289 --> 00:01:34,450
silencing or changing how particular

29
00:01:31,750 --> 00:01:37,780
channels work in system messages<font color="#E5E5E5"> which</font>

30
00:01:34,450 --> 00:01:39,490
<font color="#CCCCCC">is real-time</font><font color="#E5E5E5"> clock information</font><font color="#CCCCCC"> common</font>

31
00:01:37,780 --> 00:01:40,990
messages about timing code there's two

32
00:01:39,490 --> 00:01:45,429
different<font color="#E5E5E5"> ways of doing timing and</font><font color="#CCCCCC"> MIDI</font>

33
00:01:40,990 --> 00:01:47,619
<font color="#E5E5E5">it's great that way</font><font color="#CCCCCC"> changing banks and</font>

34
00:01:45,429 --> 00:01:50,530
exclusive which is just a stream<font color="#E5E5E5"> of</font>

35
00:01:47,619 --> 00:01:52,210
bytes that<font color="#E5E5E5"> most devices will ignore and</font>

36
00:01:50,530 --> 00:01:56,469
then some<font color="#E5E5E5"> the one device you care about</font>

37
00:01:52,210 --> 00:01:59,320
<font color="#E5E5E5">appalled</font><font color="#CCCCCC"> we misinterpret</font><font color="#E5E5E5"> then we have</font>

38
00:01:56,469 --> 00:02:01,240
the file version of MIDI which is<font color="#CCCCCC"> you're</font>

39
00:01:59,320 --> 00:02:04,658
<font color="#E5E5E5">not live you're working with it you know</font>

40
00:02:01,240 --> 00:02:07,749
<font color="#E5E5E5">on a computer or back in the old days on</font>

41
00:02:04,659 --> 00:02:10,210
a physical device and<font color="#CCCCCC"> there's pretty</font>

42
00:02:07,749 --> 00:02:12,940
<font color="#CCCCCC">much contain the many</font><font color="#E5E5E5"> messages that then</font>

43
00:02:10,210 --> 00:02:14,050
you can do<font color="#E5E5E5"> a different order</font><font color="#CCCCCC"> its source</font>

44
00:02:12,940 --> 00:02:15,670
of<font color="#E5E5E5"> those messages along</font><font color="#CCCCCC"> with their</font>

45
00:02:14,050 --> 00:02:18,280
position<font color="#E5E5E5"> and there's three different</font>

46
00:02:15,670 --> 00:02:20,350
<font color="#CCCCCC">versions the first</font><font color="#E5E5E5"> version is</font><font color="#CCCCCC"> C</font>

47
00:02:18,280 --> 00:02:22,990
<font color="#E5E5E5">tract so you only have one track of data</font>

48
00:02:20,350 --> 00:02:24,850
that<font color="#CCCCCC"> can</font><font color="#E5E5E5"> contain 16 channels which is</font>

49
00:02:22,990 --> 00:02:25,810
really<font color="#E5E5E5"> useful for old</font><font color="#CCCCCC"> equipment because</font>

50
00:02:24,850 --> 00:02:28,269
they could start the beginning<font color="#CCCCCC"> of the</font>

51
00:02:25,810 --> 00:02:30,060
file and work sequentially through<font color="#CCCCCC"> the</font>

52
00:02:28,270 --> 00:02:35,050
<font color="#E5E5E5">file and</font><font color="#CCCCCC"> after worry about anything</font>

53
00:02:30,060 --> 00:02:36,459
<font color="#CCCCCC">multitrack allows you to do more work</font>

54
00:02:35,050 --> 00:02:38,200
<font color="#CCCCCC">with sequences and have different</font>

55
00:02:36,459 --> 00:02:40,150
<font color="#CCCCCC">channels and</font><font color="#E5E5E5"> different tracks to work</font>

56
00:02:38,200 --> 00:02:43,269
with things a bit<font color="#E5E5E5"> easier there's a</font>

57
00:02:40,150 --> 00:02:45,850
synchronous mode which is<font color="#CCCCCC"> version</font><font color="#E5E5E5"> 2 it</font>

58
00:02:43,270 --> 00:02:47,530
version<font color="#E5E5E5"> 1 sorry</font><font color="#CCCCCC"> which is the one you're</font>

59
00:02:45,850 --> 00:02:50,320
more likely to<font color="#CCCCCC"> find in an asynchronous</font>

60
00:02:47,530 --> 00:02:54,370
mode version<font color="#CCCCCC"> 2 which I've never</font><font color="#E5E5E5"> seen in</font>

61
00:02:50,320 --> 00:02:55,959
the<font color="#CCCCCC"> wild an important thing</font><font color="#E5E5E5"> to note</font><font color="#CCCCCC"> here</font>

62
00:02:54,370 --> 00:02:57,760
is since there's no audio data here it

63
00:02:55,959 --> 00:02:59,500
sounds<font color="#E5E5E5"> only as good as the hardware</font>

64
00:02:57,760 --> 00:03:02,170
synthesizing it<font color="#E5E5E5"> so you can have really</font>

65
00:02:59,500 --> 00:03:04,180
bad synthesizers<font color="#E5E5E5"> found in your</font><font color="#CCCCCC"> 90's</font>

66
00:03:02,170 --> 00:03:06,640
computer that are really bad sounding

67
00:03:04,180 --> 00:03:12,880
<font color="#E5E5E5">and then you can have much more sense of</font>

68
00:03:06,640 --> 00:03:14,380
synthesizers<font color="#CCCCCC"> that</font><font color="#E5E5E5"> sound very</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> in</font>

69
00:03:12,880 --> 00:03:16,390
these<font color="#E5E5E5"> files there's three</font><font color="#CCCCCC"> different</font>

70
00:03:14,380 --> 00:03:20,290
<font color="#E5E5E5">types of</font><font color="#CCCCCC"> messages that you</font><font color="#E5E5E5"> can find meta</font>

71
00:03:16,390 --> 00:03:23,589
messages<font color="#E5E5E5"> things you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> find later in</font>

72
00:03:20,290 --> 00:03:26,040
IE 3 for music files<font color="#E5E5E5"> such as title</font>

73
00:03:23,590 --> 00:03:29,470
copyright lyrics<font color="#CCCCCC"> and time signature</font>

74
00:03:26,040 --> 00:03:32,019
tempo and key<font color="#CCCCCC"> those are important</font>

75
00:03:29,470 --> 00:03:37,359
because in MIDI files<font color="#E5E5E5"> the positions are</font>

76
00:03:32,019 --> 00:03:40,900
based<font color="#E5E5E5"> on pretty much changes in tempo</font>

77
00:03:37,360 --> 00:03:42,160
and the time signature<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> computes</font>

78
00:03:40,900 --> 00:03:44,650
on the fly when it should play the next

79
00:03:42,160 --> 00:03:47,530
note in a fun way<font color="#CCCCCC"> of</font><font color="#E5E5E5"> conserving space</font>

80
00:03:44,650 --> 00:03:52,299
from the 80s<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then channel messages</font>

81
00:03:47,530 --> 00:03:54,579
and system messages<font color="#E5E5E5"> from before there's</font>

82
00:03:52,299 --> 00:03:57,220
also a 2.0 that came out<font color="#E5E5E5"> earlier this</font>

83
00:03:54,579 --> 00:03:59,560
<font color="#CCCCCC">year last</font><font color="#E5E5E5"> month</font>

84
00:03:57,220 --> 00:04:01,030
well the draft came out<font color="#E5E5E5"> they haven't</font>

85
00:03:59,560 --> 00:04:04,390
<font color="#E5E5E5">really told us what's gonna be in it</font>

86
00:04:01,030 --> 00:04:08,079
other than pretty<font color="#E5E5E5"> much everything in</font><font color="#CCCCCC"> the</font>

87
00:04:04,390 --> 00:04:09,518
rest<font color="#E5E5E5"> of my talk is now all dated except</font>

88
00:04:08,079 --> 00:04:13,299
it's backwards compatible<font color="#E5E5E5"> but they</font>

89
00:04:09,519 --> 00:04:14,769
haven't explained<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to Linux which</font><font color="#E5E5E5"> is</font>

90
00:04:13,299 --> 00:04:18,160
probably<font color="#E5E5E5"> the more interesting part of my</font>

91
00:04:14,769 --> 00:04:20,168
talk<font color="#CCCCCC"> trying to set the stage here I'm</font>

92
00:04:18,160 --> 00:04:24,370
using a Linux<font color="#E5E5E5"> distribution for raspberry</font>

93
00:04:20,168 --> 00:04:26,740
<font color="#CCCCCC">PI's called go crazy it's</font><font color="#E5E5E5"> only has a go</font>

94
00:04:24,370 --> 00:04:29,740
runtime<font color="#E5E5E5"> there's no C except for the</font>

95
00:04:26,740 --> 00:04:31,450
kernel which is<font color="#E5E5E5"> fun because you don't</font>

96
00:04:29,740 --> 00:04:32,169
<font color="#E5E5E5">have to worry about C causing SEC faults</font>

97
00:04:31,450 --> 00:04:34,688
or anything

98
00:04:32,169 --> 00:04:37,258
but just a<font color="#E5E5E5"> bit sad because</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> to do</font>

99
00:04:34,689 --> 00:04:37,259
<font color="#CCCCCC">everything from scratch</font>

100
00:04:39,120 --> 00:04:43,900
so there's<font color="#E5E5E5"> syscalls simplest way of</font>

101
00:04:42,250 --> 00:04:46,000
<font color="#E5E5E5">calling it to the</font><font color="#CCCCCC"> kernel is to directly</font>

102
00:04:43,900 --> 00:04:47,460
<font color="#E5E5E5">call</font><font color="#CCCCCC"> them to</font><font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's a</font>

103
00:04:46,000 --> 00:04:52,270
lot<font color="#E5E5E5"> of stuff that's exposed this way</font>

104
00:04:47,460 --> 00:04:54,698
here's the UNIX package<font color="#CCCCCC"> it's not the</font>

105
00:04:52,270 --> 00:04:57,758
entire<font color="#E5E5E5"> table of contents this is there's</font>

106
00:04:54,699 --> 00:05:01,060
a<font color="#CCCCCC"> five megabyte limit</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> chrome creating</font>

107
00:04:57,759 --> 00:05:03,189
a picture of a page so that's where the

108
00:05:01,060 --> 00:05:08,289
<font color="#CCCCCC">five megabyte limit is there's more</font>

109
00:05:03,189 --> 00:05:09,280
things<font color="#E5E5E5"> in the table of</font><font color="#CCCCCC"> contents three</font>

110
00:05:08,289 --> 00:05:11,740
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are probably</font><font color="#CCCCCC"> the most</font>

111
00:05:09,280 --> 00:05:13,628
<font color="#E5E5E5">important in here is the</font><font color="#CCCCCC"> syscall this is</font>

112
00:05:11,740 --> 00:05:15,969
called<font color="#CCCCCC"> six and this is called no air</font>

113
00:05:13,629 --> 00:05:17,469
<font color="#E5E5E5">functions and there's a bunch of</font>

114
00:05:15,969 --> 00:05:19,750
wrapping functions to make<font color="#E5E5E5"> this way</font>

115
00:05:17,469 --> 00:05:23,979
easier<font color="#E5E5E5"> to use especially</font><font color="#CCCCCC"> across</font><font color="#E5E5E5"> multiple</font>

116
00:05:19,750 --> 00:05:25,210
architectures<font color="#CCCCCC"> first to</font><font color="#E5E5E5"> our differences</font>

117
00:05:23,979 --> 00:05:27,190
<font color="#E5E5E5">based on the number of</font><font color="#CCCCCC"> parameters you</font>

118
00:05:25,210 --> 00:05:29,739
pass through the to the kernel and the

119
00:05:27,190 --> 00:05:31,930
last one is if you<font color="#E5E5E5"> don't want the</font>

120
00:05:29,740 --> 00:05:36,550
<font color="#E5E5E5">message you're sending doesn't have an</font>

121
00:05:31,930 --> 00:05:40,690
<font color="#E5E5E5">error code return from the kernel as you</font>

122
00:05:36,550 --> 00:05:43,569
see<font color="#CCCCCC"> everything is you went pointer so</font>

123
00:05:40,690 --> 00:05:47,770
where I use this in my<font color="#CCCCCC"> MIDI project</font><font color="#E5E5E5"> for</font>

124
00:05:43,569 --> 00:05:50,949
a while<font color="#CCCCCC"> I didn't have a go MIDI library</font>

125
00:05:47,770 --> 00:05:54,508
so I was just<font color="#CCCCCC"> using one</font><font color="#E5E5E5"> from C and kind</font>

126
00:05:50,949 --> 00:05:58,060
<font color="#E5E5E5">of cheating and throwing in a CD runtime</font>

127
00:05:54,509 --> 00:06:01,210
so I wanted a file<font color="#E5E5E5"> that I had in memory</font>

128
00:05:58,060 --> 00:06:02,589
to be played<font color="#E5E5E5"> by the C program and I</font>

129
00:06:01,210 --> 00:06:05,859
could option one is<font color="#E5E5E5"> to create a</font>

130
00:06:02,589 --> 00:06:07,870
temporary file on disk<font color="#CCCCCC"> but you might</font><font color="#E5E5E5"> not</font>

131
00:06:05,860 --> 00:06:09,550
<font color="#E5E5E5">have permissions to</font><font color="#CCCCCC"> vary directory</font><font color="#E5E5E5"> does</font>

132
00:06:07,870 --> 00:06:11,650
not<font color="#E5E5E5"> guaranteed to exist</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to</font>

133
00:06:09,550 --> 00:06:13,599
remember to clean it up<font color="#E5E5E5"> at the end</font><font color="#CCCCCC"> do</font>

134
00:06:11,650 --> 00:06:17,409
you<font color="#E5E5E5"> have to in some environments care</font>

135
00:06:13,599 --> 00:06:20,080
about allocations and<font color="#E5E5E5"> you're using</font>

136
00:06:17,409 --> 00:06:22,810
<font color="#E5E5E5">memory but not counting for it and it's</font>

137
00:06:20,080 --> 00:06:25,270
a big mess option<font color="#CCCCCC"> 2 is ask the colonel</font>

138
00:06:22,810 --> 00:06:28,180
<font color="#E5E5E5">hey give me a file descriptor that's</font>

139
00:06:25,270 --> 00:06:31,359
backed<font color="#E5E5E5"> by memory you do that with MIM</font><font color="#CCCCCC"> FD</font>

140
00:06:28,180 --> 00:06:33,610
create which is from the the UNIX

141
00:06:31,360 --> 00:06:35,889
package<font color="#E5E5E5"> give it a string which is used</font>

142
00:06:33,610 --> 00:06:40,240
only in<font color="#CCCCCC"> case something</font><font color="#E5E5E5"> goes wrong and</font>

143
00:06:35,889 --> 00:06:41,949
<font color="#CCCCCC">you need to look at kernel memory and</font>

144
00:06:40,240 --> 00:06:44,110
flags which is used for<font color="#E5E5E5"> this cool</font><font color="#CCCCCC"> thing</font>

145
00:06:41,949 --> 00:06:46,030
about sealing<font color="#E5E5E5"> things and making sure you</font>

146
00:06:44,110 --> 00:06:50,080
can only do certain<font color="#CCCCCC"> operations on it</font>

147
00:06:46,030 --> 00:06:55,780
<font color="#CCCCCC">I</font><font color="#E5E5E5"> just ignore</font><font color="#CCCCCC"> F truncate to set the size</font>

148
00:06:50,080 --> 00:06:58,030
of that<font color="#E5E5E5"> file and</font><font color="#CCCCCC"> then M map to map that</font>

149
00:06:55,780 --> 00:07:00,729
memory for the file into<font color="#CCCCCC"> our program</font><font color="#E5E5E5"> so</font>

150
00:06:58,030 --> 00:07:02,679
that we can then<font color="#E5E5E5"> change the byte array</font>

151
00:07:00,730 --> 00:07:04,690
<font color="#E5E5E5">and that will change what the file looks</font>

152
00:07:02,680 --> 00:07:08,680
<font color="#CCCCCC">like to a program that's using that</font><font color="#E5E5E5"> file</font>

153
00:07:04,690 --> 00:07:10,810
descriptor<font color="#E5E5E5"> and then the cool thing in</font>

154
00:07:08,680 --> 00:07:12,220
here is<font color="#E5E5E5"> when we stop having any open</font>

155
00:07:10,810 --> 00:07:14,020
file descriptors<font color="#CCCCCC"> that memory just goes</font>

156
00:07:12,220 --> 00:07:20,080
<font color="#CCCCCC">away and you</font><font color="#E5E5E5"> don't remember to clean up</font>

157
00:07:14,020 --> 00:07:22,240
<font color="#E5E5E5">and remove</font><font color="#CCCCCC"> the file second way that</font><font color="#E5E5E5"> you</font>

158
00:07:20,080 --> 00:07:24,580
<font color="#CCCCCC">can interact with the kernel is with IO</font>

159
00:07:22,240 --> 00:07:28,630
control<font color="#E5E5E5"> or I'll cuddle if</font><font color="#CCCCCC"> you're a</font>

160
00:07:24,580 --> 00:07:32,050
kubernetes person in this case we want

161
00:07:28,630 --> 00:07:34,140
<font color="#CCCCCC">to</font><font color="#E5E5E5"> look at the information about the</font>

162
00:07:32,050 --> 00:07:36,370
ethernet device<font color="#CCCCCC"> e0</font>

163
00:07:34,140 --> 00:07:38,409
<font color="#CCCCCC">we wouldn't be talking</font><font color="#E5E5E5"> to the Linux</font>

164
00:07:36,370 --> 00:07:42,430
kernel if at some point<font color="#E5E5E5"> in</font><font color="#CCCCCC"> these slides</font>

165
00:07:38,410 --> 00:07:46,210
<font color="#E5E5E5">we didn't find an unsafe pointer so here</font>

166
00:07:42,430 --> 00:07:49,690
we're setting<font color="#E5E5E5"> up a struck</font><font color="#CCCCCC"> he exists in C</font>

167
00:07:46,210 --> 00:07:55,599
library or kernel<font color="#CCCCCC"> petyr's we're opening</font>

168
00:07:49,690 --> 00:07:58,390
up a UNIX socket for<font color="#CCCCCC"> the ipv4 interface</font>

169
00:07:55,600 --> 00:08:01,300
<font color="#E5E5E5">and we're calling the i/o control</font>

170
00:07:58,390 --> 00:08:04,229
syscall<font color="#E5E5E5"> with these parameters and then</font>

171
00:08:01,300 --> 00:08:08,280
we get<font color="#CCCCCC"> back in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> stock populated</font>

172
00:08:04,229 --> 00:08:08,280
information about that even<font color="#CCCCCC"> a device</font>

173
00:08:11,150 --> 00:08:17,359
so a little<font color="#E5E5E5"> bit more higher level</font><font color="#CCCCCC"> is we</font>

174
00:08:15,020 --> 00:08:21,169
can use<font color="#E5E5E5"> sockets similar to how</font><font color="#CCCCCC"> we just</font>

175
00:08:17,360 --> 00:08:24,620
use it<font color="#CCCCCC"> but with passing data</font><font color="#E5E5E5"> directly</font>

176
00:08:21,169 --> 00:08:30,889
over the<font color="#CCCCCC"> socket and here we're</font><font color="#E5E5E5"> looking</font>

177
00:08:24,620 --> 00:08:36,140
at<font color="#CCCCCC"> ve</font><font color="#E5E5E5"> information about the NAT table in</font>

178
00:08:30,889 --> 00:08:39,500
the IP tables<font color="#E5E5E5"> and so we open a socket as</font>

179
00:08:36,140 --> 00:08:43,610
before this time it's<font color="#CCCCCC"> aa crawl and</font><font color="#E5E5E5"> IP ve</font>

180
00:08:39,500 --> 00:08:49,970
<font color="#E5E5E5">or IP raw and we're asking</font><font color="#CCCCCC"> the kernel to</font>

181
00:08:43,610 --> 00:08:52,610
populate a<font color="#E5E5E5"> stark with the</font><font color="#CCCCCC"> IP e get info</font>

182
00:08:49,970 --> 00:08:54,560
command<font color="#E5E5E5"> and then we can look up in that</font>

183
00:08:52,610 --> 00:08:58,760
struck how many entries are in<font color="#CCCCCC"> that IP</font>

184
00:08:54,560 --> 00:08:59,869
tables table<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> probably a person</font>

185
00:08:58,760 --> 00:09:03,950
at<font color="#E5E5E5"> this conference who just had a heart</font>

186
00:08:59,870 --> 00:09:05,240
<font color="#CCCCCC">attack do not do this especially when</font>

187
00:09:03,950 --> 00:09:07,010
<font color="#E5E5E5">you want to</font><font color="#CCCCCC"> iterate on</font><font color="#E5E5E5"> the table later</font>

188
00:09:05,240 --> 00:09:08,990
and you find<font color="#E5E5E5"> out that the memory you</font>

189
00:09:07,010 --> 00:09:11,779
care about is that<font color="#E5E5E5"> it is after the</font>

190
00:09:08,990 --> 00:09:13,550
struct in then you<font color="#CCCCCC"> make go sat by am</font>

191
00:09:11,779 --> 00:09:17,630
currently memory<font color="#CCCCCC"> passed what it knows</font>

192
00:09:13,550 --> 00:09:19,490
<font color="#CCCCCC">about so these previous ways have some</font>

193
00:09:17,630 --> 00:09:22,760
problems mostly that<font color="#E5E5E5"> were passing memory</font>

194
00:09:19,490 --> 00:09:25,550
<font color="#E5E5E5">around and that's fine</font><font color="#CCCCCC"> for small</font><font color="#E5E5E5"> values</font>

195
00:09:22,760 --> 00:09:27,140
such as an individual number<font color="#E5E5E5"> but kind of</font>

196
00:09:25,550 --> 00:09:30,229
<font color="#E5E5E5">annoying for stocks</font><font color="#CCCCCC"> especially as they</font>

197
00:09:27,140 --> 00:09:33,199
<font color="#E5E5E5">get</font><font color="#CCCCCC"> more complicated</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font>

198
00:09:30,230 --> 00:09:36,650
<font color="#E5E5E5">options here one I prefer is Linux</font><font color="#CCCCCC"> net</font>

199
00:09:33,200 --> 00:09:37,910
<font color="#CCCCCC">link which</font><font color="#E5E5E5"> is an IPC mechanism</font><font color="#CCCCCC"> between</font>

200
00:09:36,650 --> 00:09:40,610
the kernel user space or between

201
00:09:37,910 --> 00:09:45,589
<font color="#E5E5E5">multiple user space programs they never</font>

202
00:09:40,610 --> 00:09:49,370
leave the<font color="#CCCCCC"> localhost and they are pretty</font>

203
00:09:45,589 --> 00:09:52,400
<font color="#CCCCCC">much a list of attributes</font><font color="#E5E5E5"> and those</font>

204
00:09:49,370 --> 00:09:54,050
athletes<font color="#E5E5E5"> may be nested and for each</font>

205
00:09:52,400 --> 00:09:55,010
<font color="#E5E5E5">family which is a type of thing</font><font color="#CCCCCC"> that you</font>

206
00:09:54,050 --> 00:09:58,390
<font color="#E5E5E5">might be carrying them out there's a</font>

207
00:09:55,010 --> 00:09:58,390
separate bus that you<font color="#E5E5E5"> would connect</font><font color="#CCCCCC"> to</font>

208
00:09:59,160 --> 00:10:05,550
it's a cool library<font color="#CCCCCC"> that I use to</font><font color="#E5E5E5"> help</font>

209
00:10:03,120 --> 00:10:07,410
with<font color="#CCCCCC"> the encoding</font><font color="#E5E5E5"> and decoding of those</font>

210
00:10:05,550 --> 00:10:10,920
attributes<font color="#E5E5E5"> managing those underlying</font>

211
00:10:07,410 --> 00:10:14,699
sockets<font color="#E5E5E5"> and managing sequence IDs</font><font color="#CCCCCC"> so you</font>

212
00:10:10,920 --> 00:10:16,020
don't really<font color="#E5E5E5"> have to care about them on</font>

213
00:10:14,700 --> 00:10:18,270
top<font color="#E5E5E5"> of</font><font color="#CCCCCC"> net</font><font color="#E5E5E5"> link is a thing called</font>

214
00:10:16,020 --> 00:10:21,329
generic net link which is<font color="#E5E5E5"> makes it</font>

215
00:10:18,270 --> 00:10:23,790
easier<font color="#CCCCCC"> for kernel modules to expose</font>

216
00:10:21,330 --> 00:10:26,070
<font color="#E5E5E5">things to net link but instead</font><font color="#CCCCCC"> of having</font>

217
00:10:23,790 --> 00:10:28,170
each<font color="#E5E5E5"> kernel module make its own bus just</font>

218
00:10:26,070 --> 00:10:32,640
<font color="#E5E5E5">using a generic bus with a node message</font>

219
00:10:28,170 --> 00:10:34,290
<font color="#E5E5E5">format and we can query the kernel</font>

220
00:10:32,640 --> 00:10:38,689
didn't it<font color="#E5E5E5"> to learn</font><font color="#CCCCCC"> about what generic</font>

221
00:10:34,290 --> 00:10:38,689
<font color="#E5E5E5">net link families it knows about</font>

222
00:10:39,170 --> 00:10:46,829
surprise surprise the same person has a

223
00:10:41,670 --> 00:10:49,170
useful library so here we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

224
00:10:46,830 --> 00:10:53,040
about the Wi-Fi interfaces on our

225
00:10:49,170 --> 00:10:55,979
computer so we can<font color="#E5E5E5"> create a generic net</font>

226
00:10:53,040 --> 00:10:59,520
link client<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> look up the</font>

227
00:10:55,980 --> 00:11:04,230
family ID for it and then once we have

228
00:10:59,520 --> 00:11:09,000
the<font color="#E5E5E5"> family ID we construct a message for</font>

229
00:11:04,230 --> 00:11:13,140
<font color="#E5E5E5">to the n1 802 11 command get interface</font>

230
00:11:09,000 --> 00:11:14,580
command with that<font color="#CCCCCC"> family</font><font color="#E5E5E5"> and then that</font>

231
00:11:13,140 --> 00:11:17,460
will give us<font color="#E5E5E5"> back a bunch of messages</font>

232
00:11:14,580 --> 00:11:19,290
if a person's<font color="#E5E5E5"> messages which is really</font>

233
00:11:17,460 --> 00:11:21,870
easy we're just<font color="#E5E5E5"> pretty much doing a</font>

234
00:11:19,290 --> 00:11:24,630
switch and populating a struct<font color="#E5E5E5"> then we</font>

235
00:11:21,870 --> 00:11:28,680
can get all the<font color="#CCCCCC"> Wi-Fi devices</font><font color="#E5E5E5"> on the</font>

236
00:11:24,630 --> 00:11:30,630
device for<font color="#CCCCCC"> running on it's a little a</font>

237
00:11:28,680 --> 00:11:32,939
lot<font color="#E5E5E5"> easier than constructing</font><font color="#CCCCCC"> Struck's</font>

238
00:11:30,630 --> 00:11:35,700
for every type that could possibly<font color="#CCCCCC"> exist</font>

239
00:11:32,940 --> 00:11:41,070
in C and then making<font color="#CCCCCC"> sure you get</font><font color="#E5E5E5"> the</font>

240
00:11:35,700 --> 00:11:45,480
<font color="#CCCCCC">right types on those so</font><font color="#E5E5E5"> a quick aside to</font>

241
00:11:41,070 --> 00:11:49,230
Desktop Linux<font color="#CCCCCC"> I want to know about disks</font>

242
00:11:45,480 --> 00:11:52,020
being changed<font color="#E5E5E5"> in my mini player</font><font color="#CCCCCC"> in on</font>

243
00:11:49,230 --> 00:11:54,330
this<font color="#CCCCCC"> off Linux there's a user</font><font color="#E5E5E5"> space</font>

244
00:11:52,020 --> 00:11:57,030
daemon that would listen to events from

245
00:11:54,330 --> 00:11:58,830
the kernel<font color="#E5E5E5"> and those would apply</font>

246
00:11:57,030 --> 00:12:02,040
policies or create some links on dev

247
00:11:58,830 --> 00:12:04,290
temp FS and<font color="#CCCCCC"> maintain metadata</font><font color="#E5E5E5"> and you</font>

248
00:12:02,040 --> 00:12:09,329
<font color="#E5E5E5">probably know those by names a system D</font>

249
00:12:04,290 --> 00:12:12,030
or<font color="#E5E5E5"> you you dev or V dev they maintain</font>

250
00:12:09,330 --> 00:12:13,890
the metadata in memory<font color="#E5E5E5"> you</font>

251
00:12:12,030 --> 00:12:18,180
also writing<font color="#E5E5E5"> this</font><font color="#CCCCCC"> up to disk somewhere</font>

252
00:12:13,890 --> 00:12:20,580
<font color="#E5E5E5">run and then</font><font color="#CCCCCC"> emitting those out</font><font color="#E5E5E5"> to D bus</font>

253
00:12:18,180 --> 00:12:23,099
so that<font color="#CCCCCC"> other things could</font><font color="#E5E5E5"> farther</font>

254
00:12:20,580 --> 00:12:26,250
process those<font color="#E5E5E5"> events such as you see you</font>

255
00:12:23,100 --> 00:12:29,460
<font color="#CCCCCC">disks - exposing our</font><font color="#E5E5E5"> pcs over</font><font color="#CCCCCC"> D bus</font>

256
00:12:26,250 --> 00:12:33,080
specifically about<font color="#E5E5E5"> disks or you devil</font>

257
00:12:29,460 --> 00:12:33,080
which automatically<font color="#E5E5E5"> will mount them</font>

258
00:12:34,370 --> 00:12:41,730
those are all written<font color="#E5E5E5"> in C so I can't</font>

259
00:12:37,020 --> 00:12:43,650
use them<font color="#E5E5E5"> but fortunately they are using</font>

260
00:12:41,730 --> 00:12:46,710
<font color="#E5E5E5">things that are exposed</font><font color="#CCCCCC"> such as you</font>

261
00:12:43,650 --> 00:12:48,390
event<font color="#E5E5E5"> in K object so Linux creates and</font>

262
00:12:46,710 --> 00:12:50,970
manages K objects

263
00:12:48,390 --> 00:12:53,970
whenever devices are are pretty<font color="#E5E5E5"> much</font>

264
00:12:50,970 --> 00:12:56,960
<font color="#E5E5E5">added to the system</font><font color="#CCCCCC"> and updates them and</font>

265
00:12:53,970 --> 00:13:00,350
<font color="#E5E5E5">more removes them when they are changed</font>

266
00:12:56,960 --> 00:13:06,120
and then those changes are also

267
00:13:00,350 --> 00:13:07,170
announced<font color="#E5E5E5"> over net link and K object so</font>

268
00:13:06,120 --> 00:13:11,250
<font color="#E5E5E5">that we could listen</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> them in</font><font color="#CCCCCC"> our</font>

269
00:13:07,170 --> 00:13:14,339
program and then the values for<font color="#E5E5E5"> each</font>

270
00:13:11,250 --> 00:13:20,430
devices last event are also exposed in

271
00:13:14,340 --> 00:13:22,520
Sisyphus surprise there's a<font color="#CCCCCC"> library for</font>

272
00:13:20,430 --> 00:13:26,339
<font color="#E5E5E5">this</font>

273
00:13:22,520 --> 00:13:28,319
so since with all the<font color="#CCCCCC"> devices all</font><font color="#E5E5E5"> the</font>

274
00:13:26,339 --> 00:13:29,430
events<font color="#CCCCCC"> we get or after we start</font>

275
00:13:28,320 --> 00:13:32,190
<font color="#CCCCCC">listening we need to know about the</font>

276
00:13:29,430 --> 00:13:36,660
devices<font color="#CCCCCC"> that already</font><font color="#E5E5E5"> exist</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can</font>

277
00:13:32,190 --> 00:13:39,300
walk<font color="#E5E5E5"> sis FS r edu event file and</font><font color="#CCCCCC"> parse</font>

278
00:13:36,660 --> 00:13:43,589
the key pair from<font color="#E5E5E5"> each line it's pretty</font>

279
00:13:39,300 --> 00:13:46,740
simple function<font color="#CCCCCC"> pretty much</font><font color="#E5E5E5"> is splitting</font>

280
00:13:43,589 --> 00:13:49,010
on the equal sign<font color="#CCCCCC"> and then populating a</font>

281
00:13:46,740 --> 00:13:49,010
struct

282
00:13:49,720 --> 00:13:55,920
more<font color="#E5E5E5"> interesting now hardware so back in</font>

283
00:13:53,530 --> 00:13:58,060
the 90s<font color="#CCCCCC"> rollin made this cool device</font>

284
00:13:55,920 --> 00:13:59,110
allowed you to play<font color="#E5E5E5"> mini files from a</font>

285
00:13:58,060 --> 00:14:00,670
floppy disk

286
00:13:59,110 --> 00:14:02,710
it was meant for teaching people how to

287
00:14:00,670 --> 00:14:04,270
<font color="#E5E5E5">play music because you could slow</font><font color="#CCCCCC"> down</font>

288
00:14:02,710 --> 00:14:07,330
<font color="#CCCCCC">the tempo and it'd</font><font color="#E5E5E5"> be one click for</font>

289
00:14:04,270 --> 00:14:11,110
whatever<font color="#CCCCCC"> Division you want</font><font color="#E5E5E5"> I just wanted</font>

290
00:14:07,330 --> 00:14:14,110
to play at normal speed<font color="#CCCCCC"> so I thought</font>

291
00:14:11,110 --> 00:14:15,490
<font color="#E5E5E5">about</font><font color="#CCCCCC"> buying one of these but they're</font>

292
00:14:14,110 --> 00:14:18,280
slightly more<font color="#CCCCCC"> expensive than I want</font><font color="#E5E5E5"> to</font>

293
00:14:15,490 --> 00:14:20,980
<font color="#E5E5E5">pay for one</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> prices are actually</font>

294
00:14:18,280 --> 00:14:22,180
<font color="#E5E5E5">down</font><font color="#CCCCCC"> from when I last looked they</font><font color="#E5E5E5"> were</font>

295
00:14:20,980 --> 00:14:27,280
going for<font color="#E5E5E5"> like a hundred</font><font color="#CCCCCC"> and fifty</font>

296
00:14:22,180 --> 00:14:30,609
<font color="#CCCCCC">dollars a couple months</font><font color="#E5E5E5"> ago so I'll</font>

297
00:14:27,280 --> 00:14:32,370
build my own<font color="#E5E5E5"> using</font><font color="#CCCCCC"> raspberry pi MIDI</font>

298
00:14:30,610 --> 00:14:35,410
synthesizer<font color="#E5E5E5"> attached to the serial port</font>

299
00:14:32,370 --> 00:14:39,790
<font color="#CCCCCC">floppy drive over USB</font><font color="#E5E5E5"> and a player</font>

300
00:14:35,410 --> 00:14:41,680
written<font color="#CCCCCC"> in go y go well there's a lot of</font>

301
00:14:39,790 --> 00:14:44,140
great reasons<font color="#CCCCCC"> for go cross-compilation</font>

302
00:14:41,680 --> 00:14:47,079
so it's easy to compile for<font color="#E5E5E5"> Raspberry Pi</font>

303
00:14:44,140 --> 00:14:49,990
concurrency primitives<font color="#E5E5E5"> fast code reuse</font>

304
00:14:47,080 --> 00:14:51,880
I say it's not see I<font color="#E5E5E5"> don't really know</font>

305
00:14:49,990 --> 00:14:53,770
it very well<font color="#CCCCCC"> I can read</font><font color="#E5E5E5"> it can't write</font>

306
00:14:51,880 --> 00:14:57,880
it well I can write it but then it

307
00:14:53,770 --> 00:15:00,189
doesn't<font color="#CCCCCC"> work and out-of-the-box</font>

308
00:14:57,880 --> 00:15:01,780
<font color="#CCCCCC">toolchain so that it's really easy to</font>

309
00:15:00,190 --> 00:15:06,850
test<font color="#E5E5E5"> things so you know that they work</font>

310
00:15:01,780 --> 00:15:10,240
because<font color="#E5E5E5"> you can just run to go test</font><font color="#CCCCCC"> so</font>

311
00:15:06,850 --> 00:15:14,260
the hardware<font color="#CCCCCC"> I'm using is wave bust or</font>

312
00:15:10,240 --> 00:15:15,970
<font color="#E5E5E5">compatible</font><font color="#CCCCCC"> midi synthesizer</font><font color="#E5E5E5"> back in the</font>

313
00:15:14,260 --> 00:15:18,220
day<font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of names you've probably</font>

314
00:15:15,970 --> 00:15:21,040
heard of if you're in<font color="#E5E5E5"> music made these</font>

315
00:15:18,220 --> 00:15:22,540
devices and there's a couple modern ones

316
00:15:21,040 --> 00:15:26,589
that are available<font color="#E5E5E5"> that were made right</font>

317
00:15:22,540 --> 00:15:31,079
here<font color="#E5E5E5"> in Belgium that</font><font color="#CCCCCC"> is a picture of the</font>

318
00:15:26,590 --> 00:15:36,520
original<font color="#E5E5E5"> one</font><font color="#CCCCCC"> I made a Raspberry Pi</font><font color="#E5E5E5"> hat</font>

319
00:15:31,080 --> 00:15:40,000
to interface with<font color="#E5E5E5"> these</font><font color="#CCCCCC"> wave table or</font>

320
00:15:36,520 --> 00:15:43,329
<font color="#CCCCCC">wave blaster cards and then have an</font>

321
00:15:40,000 --> 00:15:44,380
output for the audio this<font color="#E5E5E5"> is what it</font>

322
00:15:43,330 --> 00:15:49,310
looks like<font color="#E5E5E5"> when it was working</font>

323
00:15:44,380 --> 00:15:54,300
oh I should<font color="#E5E5E5"> have said that yet</font>

324
00:15:49,310 --> 00:15:59,640
and now the demo well<font color="#E5E5E5"> the demo God's got</font>

325
00:15:54,300 --> 00:16:01,769
me<font color="#CCCCCC"> I made the</font><font color="#E5E5E5"> mistake of looking at it</font>

326
00:15:59,640 --> 00:16:05,790
<font color="#E5E5E5">or sneezing in the wrong direction</font><font color="#CCCCCC"> and</font>

327
00:16:01,769 --> 00:16:10,140
it doesn't work anymore but<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to</font>

328
00:16:05,790 --> 00:16:13,439
try and fix it<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> I have a floppy</font>

329
00:16:10,140 --> 00:16:15,569
drive floppy disk with with doom music

330
00:16:13,440 --> 00:16:21,000
ready to play for<font color="#E5E5E5"> this demo and not</font>

331
00:16:15,570 --> 00:16:22,769
<font color="#E5E5E5">working it's a conclusion I'll go to</font>

332
00:16:21,000 --> 00:16:27,930
<font color="#E5E5E5">next</font><font color="#CCCCCC"> slide really fast some point I have</font>

333
00:16:22,769 --> 00:16:29,880
to<font color="#CCCCCC"> say we're hiring at</font><font color="#E5E5E5"> CloudFlare</font><font color="#CCCCCC"> thanks</font>

334
00:16:27,930 --> 00:16:34,349
to<font color="#E5E5E5"> a developer of all the libraries I'm</font>

335
00:16:29,880 --> 00:16:36,600
using<font color="#CCCCCC"> mat</font><font color="#E5E5E5"> good crazy</font><font color="#CCCCCC"> Michael</font><font color="#E5E5E5"> and a chill</font>

336
00:16:34,350 --> 00:16:39,300
who has a large collection of<font color="#E5E5E5"> we</font>

337
00:16:36,600 --> 00:16:40,680
<font color="#E5E5E5">plastered all</font><font color="#CCCCCC"> upwards and answered a</font>

338
00:16:39,300 --> 00:16:45,269
bunch of questions about how they work

339
00:16:40,680 --> 00:16:48,120
<font color="#E5E5E5">under the hood I have a blog</font>

340
00:16:45,269 --> 00:16:51,420
I've blogged about this project once you

341
00:16:48,120 --> 00:16:53,399
can get<font color="#E5E5E5"> the code for this project on my</font>

342
00:16:51,420 --> 00:17:02,360
<font color="#E5E5E5">website or and you can ask</font><font color="#CCCCCC"> for questions</font>

343
00:16:53,399 --> 00:17:07,670
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Twitter or now I guess any questions</font>

344
00:17:02,360 --> 00:17:07,670
[Applause]

345
00:17:08,480 --> 00:17:22,490
I don't bite

346
00:17:13,519 --> 00:17:26,029
yes yeah the question<font color="#CCCCCC"> was</font><font color="#E5E5E5"> why do I</font><font color="#CCCCCC"> need</font>

347
00:17:22,490 --> 00:17:28,220
<font color="#CCCCCC">to use that like mostly I wanted to know</font>

348
00:17:26,029 --> 00:17:30,350
when a floppy<font color="#E5E5E5"> disk was inserted and</font>

349
00:17:28,220 --> 00:17:35,299
removed<font color="#E5E5E5"> and that's available from</font><font color="#CCCCCC"> K</font>

350
00:17:30,350 --> 00:17:37,789
object which was on top<font color="#E5E5E5"> of net link or I</font>

351
00:17:35,299 --> 00:17:38,929
could continually pull and see if the

352
00:17:37,789 --> 00:17:44,230
<font color="#CCCCCC">disc is in there but then</font><font color="#E5E5E5"> the drive</font>

353
00:17:38,929 --> 00:17:44,230
makes lots of noise<font color="#E5E5E5"> yes</font>

354
00:18:01,230 --> 00:18:07,330
now the question was how do I plan<font color="#E5E5E5"> on</font>

355
00:18:03,580 --> 00:18:09,730
using<font color="#E5E5E5"> this device</font><font color="#CCCCCC"> I think correct me</font><font color="#E5E5E5"> if</font>

356
00:18:07,330 --> 00:18:12,520
I'm wrong<font color="#E5E5E5"> pretty much I</font><font color="#CCCCCC"> just wanted to</font>

357
00:18:09,730 --> 00:18:14,170
put<font color="#E5E5E5"> it in the back of</font><font color="#CCCCCC"> a vehement</font><font color="#E5E5E5"> and</font>

358
00:18:12,520 --> 00:18:16,900
occasionally<font color="#E5E5E5"> full floppy disk off the</font>

359
00:18:14,170 --> 00:18:20,500
shelf and<font color="#CCCCCC"> put it in and listen to songs</font>

360
00:18:16,900 --> 00:18:22,299
from<font color="#E5E5E5"> video games I like and I could do</font>

361
00:18:20,500 --> 00:18:26,559
that with a computer<font color="#CCCCCC"> but that's not very</font>

362
00:18:22,299 --> 00:18:33,790
fun they don't invite you if<font color="#E5E5E5"> that's all</font>

363
00:18:26,559 --> 00:18:35,678
you do<font color="#CCCCCC"> well I have some of those</font><font color="#E5E5E5"> PCBs</font>

364
00:18:33,790 --> 00:18:38,940
outside if anyone has any other

365
00:18:35,679 --> 00:18:42,620
questions<font color="#CCCCCC"> Thanks</font>

366
00:18:38,940 --> 00:18:45,790
[Applause]

367
00:18:42,620 --> 00:18:45,790
[Music]

