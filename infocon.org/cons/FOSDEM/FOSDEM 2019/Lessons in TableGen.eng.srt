1
00:00:05,240 --> 00:00:12,540
<font color="#E5E5E5">all right hello everybody</font><font color="#CCCCCC"> my name is</font>

2
00:00:08,760 --> 00:00:15,269
<font color="#E5E5E5">Nicola Hanley</font><font color="#CCCCCC"> I work at</font><font color="#E5E5E5"> AMD on the GPU</font>

3
00:00:12,540 --> 00:00:18,689
<font color="#E5E5E5">side of the company where we</font><font color="#CCCCCC"> developed</font>

4
00:00:15,269 --> 00:00:22,320
the AMD GPU target in<font color="#CCCCCC"> LLVM which is</font>

5
00:00:18,689 --> 00:00:24,448
<font color="#CCCCCC">upstream and we use</font><font color="#E5E5E5"> to compile compute</font>

6
00:00:22,320 --> 00:00:26,820
kernels and graphics traders<font color="#E5E5E5"> directly</font>

7
00:00:24,449 --> 00:00:28,619
into<font color="#E5E5E5"> binary that runs on the GPU but</font>

8
00:00:26,820 --> 00:00:31,198
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> is not about that</font><font color="#E5E5E5"> this talk is</font>

9
00:00:28,619 --> 00:00:34,110
<font color="#CCCCCC">about table</font><font color="#E5E5E5"> gen which is the</font>

10
00:00:31,199 --> 00:00:37,590
domain-specific language that is used<font color="#E5E5E5"> in</font>

11
00:00:34,110 --> 00:00:39,660
part to build<font color="#CCCCCC"> LLVM itself now my own</font>

12
00:00:37,590 --> 00:00:41,550
personal history<font color="#E5E5E5"> with table gen is</font>

13
00:00:39,660 --> 00:00:43,679
probably fairly standard initially I

14
00:00:41,550 --> 00:00:45,899
mean I started working<font color="#E5E5E5"> on the back end</font>

15
00:00:43,680 --> 00:00:48,719
and<font color="#E5E5E5"> you just have to use it</font><font color="#CCCCCC"> at some</font>

16
00:00:45,899 --> 00:00:51,540
point<font color="#CCCCCC"> I copied and pasted stuff</font><font color="#E5E5E5"> and then</font>

17
00:00:48,719 --> 00:00:53,610
last year there was something that<font color="#E5E5E5"> I</font>

18
00:00:51,540 --> 00:00:55,800
worked on in our back end that<font color="#CCCCCC"> really</font>

19
00:00:53,610 --> 00:00:58,579
ran into the limitations<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> table</font>

20
00:00:55,800 --> 00:01:01,589
ten<font color="#CCCCCC"> front end like ran into weird errors</font>

21
00:00:58,579 --> 00:01:05,970
<font color="#E5E5E5">crashes and so on so I dug in more</font>

22
00:01:01,590 --> 00:01:08,460
<font color="#E5E5E5">deeply and in part this talk is my</font>

23
00:01:05,970 --> 00:01:10,679
attempt<font color="#CCCCCC"> to you know spread</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the</font>

24
00:01:08,460 --> 00:01:12,479
<font color="#CCCCCC">knowledge</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I gained while</font><font color="#E5E5E5"> looking</font>

25
00:01:10,679 --> 00:01:16,350
deeply into<font color="#E5E5E5"> tables and fixing some of</font>

26
00:01:12,479 --> 00:01:18,539
these problems that<font color="#CCCCCC"> I encountered so the</font>

27
00:01:16,350 --> 00:01:20,640
<font color="#CCCCCC">agenda is you know</font><font color="#E5E5E5"> brief overview of</font>

28
00:01:18,539 --> 00:01:24,090
<font color="#E5E5E5">what</font><font color="#CCCCCC"> is table gen</font><font color="#E5E5E5"> where it is used very</font>

29
00:01:20,640 --> 00:01:25,800
<font color="#E5E5E5">roughly and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> really look at what are</font>

30
00:01:24,090 --> 00:01:28,289
<font color="#CCCCCC">the</font><font color="#E5E5E5"> features of the tables in language</font>

31
00:01:25,800 --> 00:01:29,700
what can you do with it<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> you'll</font>

32
00:01:28,289 --> 00:01:31,649
learn about some<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> patterns</font>

33
00:01:29,700 --> 00:01:34,229
that you can<font color="#CCCCCC"> use in your own</font><font color="#E5E5E5"> tables and</font>

34
00:01:31,649 --> 00:01:37,410
sources and depending<font color="#E5E5E5"> on how time</font>

35
00:01:34,229 --> 00:01:40,020
permits at the end I want<font color="#CCCCCC"> to take a bit</font>

36
00:01:37,410 --> 00:01:42,720
of<font color="#E5E5E5"> a more deep dive into one of the more</font>

37
00:01:40,020 --> 00:01:46,080
advanced uses<font color="#E5E5E5"> of tables and language</font>

38
00:01:42,720 --> 00:01:47,819
features in our<font color="#CCCCCC"> backend the nature of</font>

39
00:01:46,080 --> 00:01:49,590
<font color="#CCCCCC">this talk</font><font color="#E5E5E5"> is such that</font><font color="#CCCCCC"> you may have</font>

40
00:01:47,819 --> 00:01:51,959
questions<font color="#CCCCCC"> that it makes sense to ask</font>

41
00:01:49,590 --> 00:01:56,610
right then and there<font color="#CCCCCC"> so don't</font><font color="#E5E5E5"> hesitate</font>

42
00:01:51,959 --> 00:02:01,289
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> when it makes sense all right</font>

43
00:01:56,610 --> 00:02:04,800
<font color="#E5E5E5">so what is table</font><font color="#CCCCCC"> Jen so</font><font color="#E5E5E5"> table Jen is a</font>

44
00:02:01,289 --> 00:02:06,959
tool<font color="#CCCCCC"> LLVM - table general</font><font color="#E5E5E5"> into which you</font>

45
00:02:04,800 --> 00:02:08,459
<font color="#E5E5E5">can feed table Jen source like the</font>

46
00:02:06,959 --> 00:02:11,340
examples you see on the left<font color="#E5E5E5"> hand side</font>

47
00:02:08,459 --> 00:02:13,829
<font color="#E5E5E5">and it spits you out some automatically</font>

48
00:02:11,340 --> 00:02:17,819
generated C++ code<font color="#E5E5E5"> that you then include</font>

49
00:02:13,829 --> 00:02:18,300
in your<font color="#E5E5E5"> handwritten C++ code</font><font color="#CCCCCC"> it is used</font>

50
00:02:17,819 --> 00:02:20,670
<font color="#E5E5E5">for also</font>

51
00:02:18,300 --> 00:02:22,700
lots of things<font color="#E5E5E5"> in in backends</font><font color="#CCCCCC"> so for</font>

52
00:02:20,670 --> 00:02:26,010
<font color="#E5E5E5">example machine instruction descriptions</font>

53
00:02:22,700 --> 00:02:28,769
<font color="#E5E5E5">register descriptions scheduling</font>

54
00:02:26,010 --> 00:02:31,530
properties of the microarchitectures of

55
00:02:28,770 --> 00:02:34,410
the machines<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're targeting</font><font color="#CCCCCC"> it</font>

56
00:02:31,530 --> 00:02:37,500
automatically<font color="#CCCCCC"> generates you know byte</font>

57
00:02:34,410 --> 00:02:40,049
<font color="#CCCCCC">code</font><font color="#E5E5E5"> for instruction selection</font><font color="#CCCCCC"> assembly</font>

58
00:02:37,500 --> 00:02:44,130
parsers and emitters disassemblers etc

59
00:02:40,050 --> 00:02:45,750
and it all does this based on on these

60
00:02:44,130 --> 00:02:47,940
kind of<font color="#E5E5E5"> sources that</font><font color="#CCCCCC"> you see here in</font>

61
00:02:45,750 --> 00:02:49,500
this<font color="#CCCCCC"> example</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just the definition of</font>

62
00:02:47,940 --> 00:02:51,600
<font color="#CCCCCC">four machine instructions</font><font color="#E5E5E5"> that we have</font>

63
00:02:49,500 --> 00:03:00,210
in<font color="#E5E5E5"> our back ends you know scaler</font><font color="#CCCCCC"> a</font>

64
00:02:51,600 --> 00:03:02,579
<font color="#E5E5E5">bitwise and an or in 32 and 64 bits so I</font>

65
00:03:00,210 --> 00:03:04,260
said<font color="#CCCCCC"> that's one tool LLVM - table gen</font>

66
00:03:02,580 --> 00:03:06,150
that's a bit of a lie<font color="#E5E5E5"> I know actually of</font>

67
00:03:04,260 --> 00:03:08,820
two tables<font color="#CCCCCC"> and tools one in</font><font color="#E5E5E5"> LLVM</font><font color="#CCCCCC"> and one</font>

68
00:03:06,150 --> 00:03:11,190
in clang they use the same<font color="#E5E5E5"> front end</font>

69
00:03:08,820 --> 00:03:14,310
which is just<font color="#CCCCCC"> a library that is reusable</font>

70
00:03:11,190 --> 00:03:16,200
<font color="#CCCCCC">part</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> LLVM and they have different</font>

71
00:03:14,310 --> 00:03:19,350
backends<font color="#CCCCCC"> you know for</font><font color="#E5E5E5"> different purposes</font>

72
00:03:16,200 --> 00:03:23,119
<font color="#CCCCCC">so in</font><font color="#E5E5E5"> general the flow of what table</font><font color="#CCCCCC"> gen</font>

73
00:03:19,350 --> 00:03:27,540
does is it reads your table gen sources

74
00:03:23,120 --> 00:03:30,780
the<font color="#E5E5E5"> front end parses it does some</font>

75
00:03:27,540 --> 00:03:33,630
evaluation on it and produces a big list

76
00:03:30,780 --> 00:03:36,930
of record definitions<font color="#E5E5E5"> which I'll show</font>

77
00:03:33,630 --> 00:03:38,160
<font color="#E5E5E5">you later</font><font color="#CCCCCC"> and then the back ends they</font>

78
00:03:36,930 --> 00:03:40,260
don't care about the original<font color="#CCCCCC"> source</font>

79
00:03:38,160 --> 00:03:42,989
<font color="#E5E5E5">anymore they just look at this set of</font>

80
00:03:40,260 --> 00:03:44,100
<font color="#E5E5E5">records they</font><font color="#CCCCCC"> maybe filter them to look</font>

81
00:03:42,989 --> 00:03:46,170
at only<font color="#E5E5E5"> the records that they are</font>

82
00:03:44,100 --> 00:03:48,720
<font color="#E5E5E5">interested in which depends on the</font><font color="#CCCCCC"> back</font>

83
00:03:46,170 --> 00:03:51,540
<font color="#E5E5E5">end interpret what is in those records</font>

84
00:03:48,720 --> 00:03:56,250
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then use that to generate</font><font color="#CCCCCC"> the</font>

85
00:03:51,540 --> 00:03:57,660
purpose specific<font color="#E5E5E5"> auto-generated C++</font><font color="#CCCCCC"> you</font>

86
00:03:56,250 --> 00:03:59,489
<font color="#E5E5E5">specify the back end</font><font color="#CCCCCC"> that you want to</font>

87
00:03:57,660 --> 00:04:02,070
use on a table<font color="#CCCCCC"> gen</font><font color="#E5E5E5"> command line and if</font>

88
00:03:59,489 --> 00:04:04,260
you don't specify any then<font color="#E5E5E5"> it'll just</font>

89
00:04:02,070 --> 00:04:06,120
<font color="#E5E5E5">dump all the record definitions that's</font>

90
00:04:04,260 --> 00:04:08,370
extremely verbose<font color="#E5E5E5"> but it's also</font>

91
00:04:06,120 --> 00:04:10,440
<font color="#E5E5E5">extremely</font><font color="#CCCCCC"> helpful sometimes</font><font color="#E5E5E5"> if you want</font>

92
00:04:08,370 --> 00:04:11,760
to kind<font color="#E5E5E5"> of debug some gnarly problem</font>

93
00:04:10,440 --> 00:04:14,640
that you have<font color="#CCCCCC"> with your table gen source</font>

94
00:04:11,760 --> 00:04:16,168
so if there is<font color="#CCCCCC"> one lesson</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> one</font>

95
00:04:14,640 --> 00:04:17,880
lesson<font color="#E5E5E5"> to take away from</font><font color="#CCCCCC"> this talk it</font>

96
00:04:16,168 --> 00:04:19,260
<font color="#CCCCCC">should actually</font><font color="#E5E5E5"> be this that if you're</font>

97
00:04:17,880 --> 00:04:21,329
<font color="#CCCCCC">running into problems with table gen</font>

98
00:04:19,260 --> 00:04:23,250
don't be afraid to just<font color="#E5E5E5"> dump all the</font>

99
00:04:21,329 --> 00:04:25,500
records<font color="#E5E5E5"> and use you know record searches</font>

100
00:04:23,250 --> 00:04:28,440
in what you<font color="#E5E5E5"> get to figure out in detail</font>

101
00:04:25,500 --> 00:04:30,660
<font color="#E5E5E5">what's going on but usually</font><font color="#CCCCCC"> you don't</font>

102
00:04:28,440 --> 00:04:33,260
<font color="#E5E5E5">invoke tables</font><font color="#CCCCCC"> and yourself you let see</font>

103
00:04:30,660 --> 00:04:35,340
<font color="#CCCCCC">make to it</font><font color="#E5E5E5"> it's all integrate</font>

104
00:04:33,260 --> 00:04:36,960
usually you don't<font color="#E5E5E5"> have to worry about it</font>

105
00:04:35,340 --> 00:04:39,359
too much there's some snippet of how it

106
00:04:36,960 --> 00:04:41,430
is<font color="#E5E5E5"> integrated as an example the one</font>

107
00:04:39,360 --> 00:04:44,340
lesson<font color="#E5E5E5"> that you should take away from</font>

108
00:04:41,430 --> 00:04:45,570
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that there is</font><font color="#E5E5E5"> this setting</font><font color="#CCCCCC"> LLVM</font>

109
00:04:44,340 --> 00:04:47,789
<font color="#E5E5E5">up to my stable</font><font color="#CCCCCC"> gender which you should</font>

110
00:04:45,570 --> 00:04:49,980
absolutely<font color="#E5E5E5"> use in debug builds because</font>

111
00:04:47,790 --> 00:04:52,110
even if you do a debug build of<font color="#CCCCCC"> LVM</font>

112
00:04:49,980 --> 00:04:54,510
usually you don't<font color="#E5E5E5"> want a debug build of</font>

113
00:04:52,110 --> 00:04:57,320
table<font color="#E5E5E5"> Jen right so optimize that it</font>

114
00:04:54,510 --> 00:04:57,320
helps you build times

115
00:04:57,540 --> 00:05:01,950
okay so<font color="#CCCCCC"> records so what are what</font><font color="#E5E5E5"> are</font>

116
00:04:59,610 --> 00:05:03,690
records<font color="#CCCCCC"> well they're basically just key</font>

117
00:05:01,950 --> 00:05:07,560
value dictionaries usually with<font color="#E5E5E5"> a name</font>

118
00:05:03,690 --> 00:05:09,710
<font color="#E5E5E5">so on the right</font><font color="#CCCCCC"> hand side</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> see at the</font>

119
00:05:07,560 --> 00:05:12,420
<font color="#E5E5E5">top this little snippet that</font><font color="#CCCCCC"> I showed</font>

120
00:05:09,710 --> 00:05:14,609
<font color="#E5E5E5">two slides</font><font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> and this little</font>

121
00:05:12,420 --> 00:05:17,190
snippet actually gets<font color="#CCCCCC"> expanded into this</font>

122
00:05:14,610 --> 00:05:18,900
you know big record definition and this

123
00:05:17,190 --> 00:05:23,969
<font color="#E5E5E5">is actually</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a small excerpt</font><font color="#E5E5E5"> of</font>

124
00:05:18,900 --> 00:05:27,599
it<font color="#E5E5E5"> and the way that this this expansion</font>

125
00:05:23,970 --> 00:05:29,520
<font color="#E5E5E5">happens is table Jen has a notion</font><font color="#CCCCCC"> of</font>

126
00:05:27,600 --> 00:05:32,880
classes which are basically templates

127
00:05:29,520 --> 00:05:36,599
for records<font color="#E5E5E5"> so at the top you see this</font>

128
00:05:32,880 --> 00:05:39,690
you<font color="#CCCCCC"> know s and B</font><font color="#E5E5E5"> 32</font><font color="#CCCCCC"> colon stop 232 stop</font>

129
00:05:36,600 --> 00:05:42,180
232 is a class table<font color="#CCCCCC"> join class</font><font color="#E5E5E5"> which is</font>

130
00:05:39,690 --> 00:05:44,880
defined in our<font color="#E5E5E5"> back ends</font><font color="#CCCCCC"> table Jen</font>

131
00:05:42,180 --> 00:05:48,060
sources which then<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> you know</font>

132
00:05:44,880 --> 00:05:50,550
derives from other<font color="#E5E5E5"> classes and and once</font>

133
00:05:48,060 --> 00:05:54,990
all<font color="#E5E5E5"> the transitive inheritance is done</font>

134
00:05:50,550 --> 00:05:56,460
you get this<font color="#E5E5E5"> this big record</font><font color="#CCCCCC"> you have at</font>

135
00:05:54,990 --> 00:05:58,410
the top this<font color="#CCCCCC"> is something that</font><font color="#E5E5E5"> the</font>

136
00:05:56,460 --> 00:06:02,070
record dumping prints out<font color="#E5E5E5"> in these</font>

137
00:05:58,410 --> 00:06:04,380
double slash comments a list of all the

138
00:06:02,070 --> 00:06:07,770
<font color="#E5E5E5">classes that were transitively inherited</font>

139
00:06:04,380 --> 00:06:09,510
so most of these are target specific but

140
00:06:07,770 --> 00:06:12,150
in particular there<font color="#CCCCCC"> is this class called</font>

141
00:06:09,510 --> 00:06:14,460
<font color="#E5E5E5">instruction so instruction is a target</font>

142
00:06:12,150 --> 00:06:15,840
independent class which all the<font color="#E5E5E5"> back</font>

143
00:06:14,460 --> 00:06:18,239
<font color="#E5E5E5">ends that are interested in machine</font>

144
00:06:15,840 --> 00:06:20,190
instructions use to filter<font color="#CCCCCC"> out</font><font color="#E5E5E5"> the</font>

145
00:06:18,240 --> 00:06:22,380
record definitions so they look at all

146
00:06:20,190 --> 00:06:24,419
the record definitions that<font color="#E5E5E5"> somehow</font>

147
00:06:22,380 --> 00:06:27,270
directly<font color="#E5E5E5"> or indirectly inherit from</font>

148
00:06:24,419 --> 00:06:30,409
instruction and then they they work with

149
00:06:27,270 --> 00:06:32,700
those and yeah like<font color="#E5E5E5"> I said usually</font>

150
00:06:30,410 --> 00:06:34,680
records are named<font color="#E5E5E5"> so in this case we</font>

151
00:06:32,700 --> 00:06:37,260
have a name that<font color="#CCCCCC"> actually appears as you</font>

152
00:06:34,680 --> 00:06:39,419
know the<font color="#CCCCCC"> the enum in C++ to refer to</font>

153
00:06:37,260 --> 00:06:41,250
<font color="#CCCCCC">that machine instructions not all</font><font color="#E5E5E5"> of</font>

154
00:06:39,419 --> 00:06:42,930
them have to be<font color="#E5E5E5"> named like if you have</font>

155
00:06:41,250 --> 00:06:44,760
<font color="#E5E5E5">standalone instruction selection</font>

156
00:06:42,930 --> 00:06:46,020
patterns they don't need<font color="#E5E5E5"> a name although</font>

157
00:06:44,760 --> 00:06:51,180
just giving them a name kind

158
00:06:46,020 --> 00:06:52,948
<font color="#E5E5E5">helpful for debugging issues yeah and so</font>

159
00:06:51,180 --> 00:06:55,500
<font color="#E5E5E5">table Jen is not just a tool</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> also</font>

160
00:06:52,949 --> 00:06:57,840
this domain-specific language<font color="#E5E5E5"> and it has</font>

161
00:06:55,500 --> 00:06:59,849
a kind of a core language<font color="#E5E5E5"> which is used</font>

162
00:06:57,840 --> 00:07:03,780
to<font color="#E5E5E5"> write down record definitions and</font>

163
00:06:59,849 --> 00:07:07,319
then<font color="#CCCCCC"> a larger set of features</font><font color="#E5E5E5"> around it</font>

164
00:07:03,780 --> 00:07:09,419
<font color="#CCCCCC">that allow you to generate</font><font color="#E5E5E5"> kind of</font>

165
00:07:07,319 --> 00:07:12,449
regular sets of<font color="#E5E5E5"> records fairly easily</font>

166
00:07:09,419 --> 00:07:14,128
<font color="#CCCCCC">right like you saw</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> in the example</font>

167
00:07:12,449 --> 00:07:15,479
we have this you know<font color="#E5E5E5"> scalar and and</font>

168
00:07:14,129 --> 00:07:16,710
scalar or and obviously these

169
00:07:15,479 --> 00:07:19,830
instructions are<font color="#CCCCCC"> going to be very</font>

170
00:07:16,710 --> 00:07:21,599
similar<font color="#E5E5E5"> so we have tools to</font><font color="#CCCCCC"> generate</font>

171
00:07:19,830 --> 00:07:28,068
these<font color="#E5E5E5"> big records that are mostly</font><font color="#CCCCCC"> the</font>

172
00:07:21,599 --> 00:07:30,960
same<font color="#CCCCCC"> in an easy way so this</font><font color="#E5E5E5"> is kind of a</font>

173
00:07:28,069 --> 00:07:33,509
sketch of<font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> tables and</font><font color="#E5E5E5"> source</font>

174
00:07:30,960 --> 00:07:37,440
files<font color="#CCCCCC"> that</font><font color="#E5E5E5"> live in</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> and how they</font>

175
00:07:33,509 --> 00:07:40,139
include each other<font color="#CCCCCC"> so the main bulk is</font>

176
00:07:37,440 --> 00:07:41,909
typically in interest targets<font color="#CCCCCC"> back end</font>

177
00:07:40,139 --> 00:07:44,069
definitions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you usually</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> one</font>

178
00:07:41,909 --> 00:07:45,930
<font color="#CCCCCC">top-level</font><font color="#E5E5E5"> file that includes everything</font>

179
00:07:44,069 --> 00:07:50,219
<font color="#E5E5E5">else because you can have textual</font>

180
00:07:45,930 --> 00:07:53,639
inclusion but not really<font color="#E5E5E5"> include guards</font>

181
00:07:50,219 --> 00:07:55,440
<font color="#E5E5E5">and also yeah there</font><font color="#CCCCCC"> were some editions</font>

182
00:07:53,639 --> 00:07:58,639
fairly recently but that's the way

183
00:07:55,440 --> 00:08:00,810
things work you<font color="#E5E5E5"> include all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> various</font>

184
00:07:58,639 --> 00:08:03,180
files in<font color="#CCCCCC"> your in your back-end that</font>

185
00:08:00,810 --> 00:08:05,490
define<font color="#E5E5E5"> instruction scheduling and</font><font color="#CCCCCC"> etc</font>

186
00:08:03,180 --> 00:08:07,889
<font color="#E5E5E5">and you include the target independent</font>

187
00:08:05,490 --> 00:08:11,159
stuff and the<font color="#E5E5E5"> other big chunk is is the</font>

188
00:08:07,889 --> 00:08:17,330
intrinsic definitions<font color="#E5E5E5"> and there is some</font>

189
00:08:11,159 --> 00:08:19,860
random<font color="#E5E5E5"> other things as well all right so</font>

190
00:08:17,330 --> 00:08:23,219
so much<font color="#E5E5E5"> for the very brief overview</font><font color="#CCCCCC"> and</font>

191
00:08:19,860 --> 00:08:26,250
<font color="#E5E5E5">now I want to go into this tables in</font>

192
00:08:23,219 --> 00:08:32,429
language features and there is a list of

193
00:08:26,250 --> 00:08:34,159
them<font color="#E5E5E5"> that I want to cover</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> very</font>

194
00:08:32,429 --> 00:08:36,838
brief look<font color="#E5E5E5"> at the types of cements</font>

195
00:08:34,159 --> 00:08:40,169
fairly standard although<font color="#E5E5E5"> I mean a bit</font>

196
00:08:36,839 --> 00:08:42,570
quirky<font color="#E5E5E5"> you have bits and integer types</font>

197
00:08:40,169 --> 00:08:45,510
the integers are<font color="#E5E5E5"> 64 bit only your bit</font>

198
00:08:42,570 --> 00:08:49,529
sequences you can<font color="#CCCCCC"> cast</font><font color="#E5E5E5"> between them you</font>

199
00:08:45,510 --> 00:08:52,079
<font color="#E5E5E5">can slice bit sequences there is a</font>

200
00:08:49,529 --> 00:08:54,779
string type there is also<font color="#CCCCCC"> a code type</font>

201
00:08:52,079 --> 00:08:56,969
which is a bit strange<font color="#CCCCCC"> but you know</font>

202
00:08:54,779 --> 00:08:58,829
there<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> notation with the square</font>

203
00:08:56,970 --> 00:08:59,970
and curly<font color="#CCCCCC"> brackets to have like a</font>

204
00:08:58,829 --> 00:09:02,609
convenient way

205
00:08:59,970 --> 00:09:05,089
<font color="#E5E5E5">to have</font><font color="#CCCCCC"> C++ fragments in your</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> Jen</font>

206
00:09:02,610 --> 00:09:09,089
source which then gets pasted into some

207
00:09:05,089 --> 00:09:10,589
auto-generated larger<font color="#CCCCCC"> function really</font>

208
00:09:09,089 --> 00:09:13,079
<font color="#CCCCCC">you'd only need one time for that but</font>

209
00:09:10,589 --> 00:09:16,769
whatever<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a list type which is</font>

210
00:09:13,079 --> 00:09:20,069
you know<font color="#E5E5E5"> just a homogeneous list table</font>

211
00:09:16,769 --> 00:09:22,019
Jen does some some type inference<font color="#E5E5E5"> but</font>

212
00:09:20,069 --> 00:09:25,439
the tables in front<font color="#CCCCCC"> end is basically one</font>

213
00:09:22,019 --> 00:09:27,660
single pass through the source<font color="#E5E5E5"> so there</font>

214
00:09:25,439 --> 00:09:29,250
is no you<font color="#E5E5E5"> know like type inferencing</font>

215
00:09:27,660 --> 00:09:32,459
pass or anything<font color="#E5E5E5"> so there are some cases</font>

216
00:09:29,250 --> 00:09:36,240
where you<font color="#E5E5E5"> need to help out and put the</font>

217
00:09:32,459 --> 00:09:38,729
type in in these angle<font color="#CCCCCC"> brackets as the</font>

218
00:09:36,240 --> 00:09:41,069
<font color="#CCCCCC">second example shows we don't need that</font>

219
00:09:38,730 --> 00:09:43,500
often<font color="#E5E5E5"> but sometimes you need it you can</font>

220
00:09:41,069 --> 00:09:45,899
index into<font color="#E5E5E5"> lists but only with literal</font>

221
00:09:43,500 --> 00:09:48,720
constants<font color="#E5E5E5"> at the moment and then there</font>

222
00:09:45,899 --> 00:09:51,209
<font color="#CCCCCC">are some other unset</font><font color="#E5E5E5"> tag and and class</font>

223
00:09:48,720 --> 00:09:54,019
record<font color="#E5E5E5"> types that have will explain in</font>

224
00:09:51,209 --> 00:09:54,018
<font color="#CCCCCC">the next</font><font color="#E5E5E5"> few slides</font>

225
00:09:55,579 --> 00:10:01,079
okay so unset values this is<font color="#E5E5E5"> an</font>

226
00:09:59,790 --> 00:10:03,209
interesting<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> because of</font><font color="#E5E5E5"> course</font>

227
00:10:01,079 --> 00:10:04,829
<font color="#CCCCCC">usually all</font><font color="#E5E5E5"> the key values like the</font>

228
00:10:03,209 --> 00:10:07,439
values in your dictionaries in your

229
00:10:04,829 --> 00:10:09,029
records should be<font color="#E5E5E5"> defined right</font><font color="#CCCCCC"> but</font>

230
00:10:07,439 --> 00:10:11,550
sometimes they're not<font color="#CCCCCC"> and there is</font>

231
00:10:09,029 --> 00:10:14,399
actually<font color="#CCCCCC"> one so at the top right you see</font>

232
00:10:11,550 --> 00:10:18,689
an example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> how these variables or</font>

233
00:10:14,399 --> 00:10:20,579
values can end up and unset<font color="#CCCCCC"> both of them</font>

234
00:10:18,689 --> 00:10:21,689
are unset in the same way one explicitly

235
00:10:20,579 --> 00:10:24,719
<font color="#E5E5E5">with the question</font><font color="#CCCCCC"> mark the other</font>

236
00:10:21,689 --> 00:10:26,490
implicitly<font color="#CCCCCC"> but there is</font><font color="#E5E5E5"> one nice</font>

237
00:10:24,720 --> 00:10:29,579
<font color="#CCCCCC">application</font><font color="#E5E5E5"> having</font><font color="#CCCCCC"> to do with</font>

238
00:10:26,490 --> 00:10:33,029
instruction encoding for having unset

239
00:10:29,579 --> 00:10:35,219
values on purpose so what you see on the

240
00:10:33,029 --> 00:10:37,680
<font color="#E5E5E5">left hand side is just</font><font color="#CCCCCC"> a short extract</font>

241
00:10:35,220 --> 00:10:41,189
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> table gent source of</font><font color="#E5E5E5"> our back end</font>

242
00:10:37,680 --> 00:10:43,109
which defines one<font color="#E5E5E5"> encoding type</font>

243
00:10:41,189 --> 00:10:46,110
<font color="#CCCCCC">alright so 32-bit instructions and the</font>

244
00:10:43,110 --> 00:10:47,910
egg 32 it has this instable which is a

245
00:10:46,110 --> 00:10:50,300
placeholder for<font color="#CCCCCC"> the 32 bits</font><font color="#E5E5E5"> of the</font>

246
00:10:47,910 --> 00:10:54,420
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> and then there is a an</font>

247
00:10:50,300 --> 00:10:56,670
encoding called<font color="#CCCCCC"> v interp which defines</font>

248
00:10:54,420 --> 00:10:59,610
<font color="#E5E5E5">the fields of the encoding</font><font color="#CCCCCC"> alright you</font>

249
00:10:56,670 --> 00:11:01,410
see that<font color="#CCCCCC"> the top so</font><font color="#E5E5E5"> the bits 31 to 26</font>

250
00:10:59,610 --> 00:11:04,589
they're assigned<font color="#E5E5E5"> to a constant value</font>

251
00:11:01,410 --> 00:11:08,040
<font color="#CCCCCC">right that's what defines this</font><font color="#E5E5E5"> encoding</font>

252
00:11:04,589 --> 00:11:11,370
class and then other bits out<font color="#CCCCCC"> of these</font>

253
00:11:08,040 --> 00:11:12,870
32<font color="#E5E5E5"> are parceled out</font><font color="#CCCCCC"> to variables that</font>

254
00:11:11,370 --> 00:11:13,410
are<font color="#CCCCCC"> they're defined at the top like the</font>

255
00:11:12,870 --> 00:11:16,110
<font color="#CCCCCC">VDS</font>

256
00:11:13,410 --> 00:11:18,209
which is just undefined<font color="#CCCCCC"> or the the up</font>

257
00:11:16,110 --> 00:11:19,740
which is the opcode<font color="#CCCCCC"> which is actually</font>

258
00:11:18,209 --> 00:11:24,359
passed in as a kind of a template

259
00:11:19,740 --> 00:11:26,850
<font color="#E5E5E5">argument to this</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> interrupt class and</font>

260
00:11:24,360 --> 00:11:28,680
on the right<font color="#E5E5E5"> hand side you see one of</font>

261
00:11:26,850 --> 00:11:30,629
the machine instructions<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the record</font>

262
00:11:28,680 --> 00:11:34,229
corresponding to it that uses<font color="#CCCCCC"> this</font>

263
00:11:30,629 --> 00:11:36,089
encoding<font color="#E5E5E5"> and you see that now this in</font>

264
00:11:34,230 --> 00:11:38,579
<font color="#E5E5E5">steeled with</font><font color="#CCCCCC"> its 32 bits has been</font>

265
00:11:36,089 --> 00:11:42,000
expanded<font color="#E5E5E5"> so there are there should be</font>

266
00:11:38,579 --> 00:11:44,219
eight<font color="#E5E5E5"> entries in each row there</font><font color="#CCCCCC"> and you</font>

267
00:11:42,000 --> 00:11:45,839
see that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example in blue the two</font>

268
00:11:44,220 --> 00:11:48,449
bits that correspond to the opcode have

269
00:11:45,839 --> 00:11:52,019
been filled in to<font color="#CCCCCC"> 0-0 but a lot of</font><font color="#E5E5E5"> the</font>

270
00:11:48,449 --> 00:11:55,199
other bits actually<font color="#E5E5E5"> still refer to</font><font color="#CCCCCC"> these</font>

271
00:11:52,019 --> 00:12:00,360
<font color="#CCCCCC">fields like Vedas</font><font color="#E5E5E5"> resource etc which are</font>

272
00:11:55,199 --> 00:12:02,810
just unset bit sequences<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the whole</font>

273
00:12:00,360 --> 00:12:06,600
machinery for instruction encoding and

274
00:12:02,810 --> 00:12:08,310
disassembly<font color="#CCCCCC"> is built based on these</font>

275
00:12:06,600 --> 00:12:12,029
relations so the relations<font color="#E5E5E5"> of which</font>

276
00:12:08,310 --> 00:12:14,160
fields that defining registers etc are

277
00:12:12,029 --> 00:12:16,920
<font color="#E5E5E5">where is read</font><font color="#CCCCCC"> out of</font><font color="#E5E5E5"> this and it's also</font>

278
00:12:14,160 --> 00:12:19,680
tied to you see<font color="#CCCCCC"> there the dag out</font>

279
00:12:16,920 --> 00:12:23,329
operand<font color="#E5E5E5"> list for example it mentions the</font>

280
00:12:19,680 --> 00:12:26,910
<font color="#E5E5E5">name</font><font color="#CCCCCC"> B test which is matched to</font><font color="#E5E5E5"> the</font>

281
00:12:23,329 --> 00:12:29,550
<font color="#E5E5E5">variable name B test to tie the</font>

282
00:12:26,910 --> 00:12:36,990
<font color="#E5E5E5">representation of operands in your</font>

283
00:12:29,550 --> 00:12:39,719
<font color="#E5E5E5">machine instruction to be encoding</font><font color="#CCCCCC"> then</font>

284
00:12:36,990 --> 00:12:42,240
there<font color="#E5E5E5"> is the back type so it's called</font>

285
00:12:39,720 --> 00:12:43,920
dag like directed as a cyclic graph

286
00:12:42,240 --> 00:12:45,750
because it's used in instruction

287
00:12:43,920 --> 00:12:47,459
selection<font color="#E5E5E5"> but I think the best way to</font>

288
00:12:45,750 --> 00:12:50,250
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it is really that's the kind</font>

289
00:12:47,459 --> 00:12:52,849
of<font color="#E5E5E5"> s expression</font><font color="#CCCCCC"> where you have in an</font>

290
00:12:50,250 --> 00:12:55,110
operator and then a list of<font color="#CCCCCC"> arguments</font>

291
00:12:52,850 --> 00:12:58,649
<font color="#CCCCCC">except that each of the arguments</font><font color="#E5E5E5"> can</font>

292
00:12:55,110 --> 00:13:00,930
optionally<font color="#E5E5E5"> also be assigned a name it's</font>

293
00:12:58,649 --> 00:13:01,889
a convenient<font color="#CCCCCC"> way of</font><font color="#E5E5E5"> having you know</font>

294
00:13:00,930 --> 00:13:06,209
<font color="#CCCCCC">heterogenous</font>

295
00:13:01,889 --> 00:13:07,649
nested structures<font color="#E5E5E5"> and like I said most</font>

296
00:13:06,209 --> 00:13:09,180
it's used for<font color="#E5E5E5"> instruction selection</font>

297
00:13:07,649 --> 00:13:11,550
patterns so<font color="#CCCCCC"> there is an example</font><font color="#E5E5E5"> down</font>

298
00:13:09,180 --> 00:13:15,899
here<font color="#E5E5E5"> also from our back end the first</font>

299
00:13:11,550 --> 00:13:18,870
row in there describes a pattern<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

300
00:13:15,899 --> 00:13:21,149
looked<font color="#CCCCCC"> for in</font><font color="#E5E5E5"> the selection dag and the</font>

301
00:13:18,870 --> 00:13:23,180
row<font color="#CCCCCC"> below is the</font><font color="#E5E5E5"> machine instruction</font>

302
00:13:21,149 --> 00:13:26,910
that should be generated for<font color="#E5E5E5"> that</font>

303
00:13:23,180 --> 00:13:29,099
<font color="#E5E5E5">pattern and so on the top row you</font><font color="#CCCCCC"> see</font>

304
00:13:26,910 --> 00:13:32,189
in a thing is<font color="#E5E5E5"> an</font><font color="#CCCCCC"> bitwise xor</font><font color="#E5E5E5"> that is</font>

305
00:13:29,100 --> 00:13:36,300
used once<font color="#CCCCCC"> XOR is</font><font color="#E5E5E5"> something that is named</font>

306
00:13:32,190 --> 00:13:38,760
<font color="#CCCCCC">store 0 with a constant this</font><font color="#E5E5E5"> is then</font>

307
00:13:36,300 --> 00:13:40,910
converted or interpreted as a 16-bit

308
00:13:38,760 --> 00:13:44,370
float and convert it to a 32-bit float

309
00:13:40,910 --> 00:13:46,829
and it so happens if you XOR<font color="#E5E5E5"> that value</font>

310
00:13:44,370 --> 00:13:50,730
to a 16-bit float well it flips<font color="#CCCCCC"> the sign</font>

311
00:13:46,830 --> 00:13:54,060
bit<font color="#E5E5E5"> right and in our I saw many</font>

312
00:13:50,730 --> 00:13:56,490
instructions have the ability to aside

313
00:13:54,060 --> 00:13:58,140
from<font color="#E5E5E5"> whatever else they're</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> to flip</font>

314
00:13:56,490 --> 00:13:59,490
the sign bit<font color="#E5E5E5"> right and so we just</font>

315
00:13:58,140 --> 00:14:02,250
<font color="#E5E5E5">replace it</font><font color="#CCCCCC"> by this conversion</font>

316
00:13:59,490 --> 00:14:12,000
instruction with<font color="#E5E5E5"> the modifier</font><font color="#CCCCCC"> that says</font>

317
00:14:02,250 --> 00:14:13,500
negate the source right yeah yeah even

318
00:14:12,000 --> 00:14:15,660
though the name is<font color="#CCCCCC"> tag it really more</font>

319
00:14:13,500 --> 00:14:17,300
represents a tree than a dag so that's

320
00:14:15,660 --> 00:14:22,020
why I<font color="#E5E5E5"> said the name is a bit misleading</font>

321
00:14:17,300 --> 00:14:23,459
<font color="#E5E5E5">yeah I mean you can't really express the</font>

322
00:14:22,020 --> 00:14:31,770
dag in the source language with this

323
00:14:23,460 --> 00:14:33,600
with this<font color="#CCCCCC"> syntax alright</font><font color="#E5E5E5"> and and then of</font>

324
00:14:31,770 --> 00:14:35,340
<font color="#CCCCCC">course there's there's classes right as</font>

325
00:14:33,600 --> 00:14:39,290
I already said classes are basically

326
00:14:35,340 --> 00:14:41,400
templates for records they have

327
00:14:39,290 --> 00:14:43,860
inheritance<font color="#E5E5E5"> although I actually don't</font>

328
00:14:41,400 --> 00:14:45,510
have<font color="#CCCCCC"> an example</font><font color="#E5E5E5"> of that here on the</font>

329
00:14:43,860 --> 00:14:49,290
slide but the syntax<font color="#E5E5E5"> is basically the</font>

330
00:14:45,510 --> 00:14:53,490
same as<font color="#CCCCCC"> C++ for</font><font color="#E5E5E5"> the for the inheritance</font>

331
00:14:49,290 --> 00:14:56,160
<font color="#CCCCCC">and so on the right-hand side right in</font>

332
00:14:53,490 --> 00:14:58,380
the example<font color="#E5E5E5"> above you see some source</font>

333
00:14:56,160 --> 00:15:01,260
<font color="#E5E5E5">that's not taken from anything real</font>

334
00:14:58,380 --> 00:15:03,260
<font color="#E5E5E5">that's just a random example and at the</font>

335
00:15:01,260 --> 00:15:06,540
bottom<font color="#E5E5E5"> you have what it's expanded to</font>

336
00:15:03,260 --> 00:15:08,370
<font color="#E5E5E5">okay so so there are two records that</font>

337
00:15:06,540 --> 00:15:10,020
<font color="#CCCCCC">are explicitly defined right my record</font>

338
00:15:08,370 --> 00:15:16,170
derives from both<font color="#CCCCCC"> of these classes that</font>

339
00:15:10,020 --> 00:15:17,939
are defined<font color="#E5E5E5"> and I think the main thing</font>

340
00:15:16,170 --> 00:15:19,319
<font color="#CCCCCC">to point out here is</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> interesting</font>

341
00:15:17,940 --> 00:15:22,920
feature which is in the other record

342
00:15:19,320 --> 00:15:25,110
<font color="#E5E5E5">which has this be angle bracket 3 which</font>

343
00:15:22,920 --> 00:15:27,180
<font color="#CCCCCC">is</font><font color="#E5E5E5"> actually an anonymous instantiation</font>

344
00:15:25,110 --> 00:15:29,640
of<font color="#E5E5E5"> the class so you see here this you</font>

345
00:15:27,180 --> 00:15:32,010
know anonymous<font color="#E5E5E5"> 0 record which is</font>

346
00:15:29,640 --> 00:15:34,020
generated automatically which is quite a

347
00:15:32,010 --> 00:15:35,550
useful feature<font color="#E5E5E5"> and the the other thing</font>

348
00:15:34,020 --> 00:15:37,650
<font color="#E5E5E5">that's interesting to notice that every</font>

349
00:15:35,550 --> 00:15:39,449
class has<font color="#E5E5E5"> an implicit template argument</font>

350
00:15:37,650 --> 00:15:40,610
<font color="#E5E5E5">called name which is replaced by the</font>

351
00:15:39,450 --> 00:15:47,720
name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the record</font><font color="#CCCCCC"> that</font>

352
00:15:40,610 --> 00:15:50,329
being instantiated<font color="#CCCCCC"> alright so when</font><font color="#E5E5E5"> you</font>

353
00:15:47,720 --> 00:15:52,700
know<font color="#E5E5E5"> about classes and records</font><font color="#CCCCCC"> it's very</font>

354
00:15:50,329 --> 00:15:54,649
<font color="#E5E5E5">tempting to</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to define all the</font>

355
00:15:52,700 --> 00:15:56,690
variables in your records<font color="#E5E5E5"> as functions</font>

356
00:15:54,649 --> 00:15:59,750
of template arguments<font color="#E5E5E5"> class template</font>

357
00:15:56,690 --> 00:16:02,570
arguments this works but it tends<font color="#E5E5E5"> to</font>

358
00:15:59,750 --> 00:16:04,100
<font color="#E5E5E5">lead</font><font color="#CCCCCC"> to a design of your tables and</font>

359
00:16:02,570 --> 00:16:06,019
classes where they have lots<font color="#E5E5E5"> and lots of</font>

360
00:16:04,100 --> 00:16:10,550
template arguments<font color="#E5E5E5"> and it becomes a bit</font>

361
00:16:06,019 --> 00:16:12,890
of<font color="#E5E5E5"> a mess for these things it's better</font>

362
00:16:10,550 --> 00:16:16,760
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> let statements</font><font color="#E5E5E5"> so let statements</font>

363
00:16:12,890 --> 00:16:18,949
are a way to<font color="#E5E5E5"> override values that are</font>

364
00:16:16,760 --> 00:16:23,120
defined<font color="#E5E5E5"> in the classes that you're</font>

365
00:16:18,950 --> 00:16:24,620
inherit from for example<font color="#CCCCCC"> and one</font><font color="#E5E5E5"> very</font>

366
00:16:23,120 --> 00:16:28,250
interesting thing<font color="#CCCCCC"> about this is that</font>

367
00:16:24,620 --> 00:16:30,320
<font color="#E5E5E5">actually expressions are evaluated late</font>

368
00:16:28,250 --> 00:16:33,320
<font color="#CCCCCC">so if you have here the class</font><font color="#E5E5E5"> a again on</font>

369
00:16:30,320 --> 00:16:35,660
<font color="#CCCCCC">the left is an example</font><font color="#E5E5E5"> source it has a</font>

370
00:16:33,320 --> 00:16:37,550
template P<font color="#E5E5E5"> a template</font><font color="#CCCCCC"> are go P is</font>

371
00:16:35,660 --> 00:16:39,680
assigned<font color="#E5E5E5"> to a variable X and then X is</font>

372
00:16:37,550 --> 00:16:42,019
<font color="#E5E5E5">assigned</font><font color="#CCCCCC"> to Y this assignment doesn't</font>

373
00:16:39,680 --> 00:16:44,810
<font color="#E5E5E5">happen immediately</font><font color="#CCCCCC"> it's delayed and as</font>

374
00:16:42,019 --> 00:16:47,600
late<font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> means that below</font>

375
00:16:44,810 --> 00:16:53,000
when you instantiate a<font color="#CCCCCC"> two for</font><font color="#E5E5E5"> example</font>

376
00:16:47,600 --> 00:16:54,500
and then say let X equal<font color="#E5E5E5"> 17 in the fully</font>

377
00:16:53,000 --> 00:16:57,980
evaluated instantiation on the<font color="#E5E5E5"> right</font>

378
00:16:54,500 --> 00:17:02,240
<font color="#E5E5E5">hand side you see</font><font color="#CCCCCC"> that Y both x and y</font><font color="#E5E5E5"> I</font>

379
00:16:57,980 --> 00:17:06,020
get<font color="#E5E5E5"> this value 17 okay rather than you</font>

380
00:17:02,240 --> 00:17:07,220
know having<font color="#CCCCCC"> you know the value 2</font><font color="#E5E5E5"> that</font>

381
00:17:06,020 --> 00:17:10,609
would<font color="#E5E5E5"> be implied</font><font color="#CCCCCC"> by the template</font>

382
00:17:07,220 --> 00:17:11,929
parameter<font color="#CCCCCC"> that you passed in it's</font>

383
00:17:10,609 --> 00:17:13,428
important to remember<font color="#CCCCCC"> that the last</font>

384
00:17:11,929 --> 00:17:15,260
<font color="#E5E5E5">statement</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not the one that</font><font color="#CCCCCC"> you know</font>

385
00:17:13,429 --> 00:17:17,660
from an arrest or functional languages

386
00:17:15,260 --> 00:17:21,280
<font color="#E5E5E5">it doesn't define a new variable it just</font>

387
00:17:17,660 --> 00:17:21,280
allows you<font color="#E5E5E5"> to override an existing one</font>

388
00:17:22,089 --> 00:17:29,720
<font color="#CCCCCC">so classes I said are basically</font>

389
00:17:26,660 --> 00:17:33,590
templates for records multi classes are

390
00:17:29,720 --> 00:17:35,750
templates<font color="#E5E5E5"> for sets of</font><font color="#CCCCCC"> records</font><font color="#E5E5E5"> okay so</font>

391
00:17:33,590 --> 00:17:38,780
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> best to</font><font color="#CCCCCC"> look at an example</font><font color="#E5E5E5"> there</font>

392
00:17:35,750 --> 00:17:41,600
on the on the<font color="#E5E5E5"> bottom left this is part</font>

393
00:17:38,780 --> 00:17:44,570
of a<font color="#E5E5E5"> definition of intrinsics we have a</font>

394
00:17:41,600 --> 00:17:47,689
def<font color="#CCCCCC"> M so def M is used to instantiate</font>

395
00:17:44,570 --> 00:17:49,460
multi classes which<font color="#E5E5E5"> is given a name</font>

396
00:17:47,690 --> 00:17:50,150
<font color="#E5E5E5">which is kind of a base name for</font>

397
00:17:49,460 --> 00:17:54,020
intrinsics

398
00:17:50,150 --> 00:17:54,410
<font color="#CCCCCC">am DDC n work group ID it instantiates</font>

399
00:17:54,020 --> 00:17:56,000
this

400
00:17:54,410 --> 00:17:57,770
<font color="#E5E5E5">multi-class that is defined above and</font>

401
00:17:56,000 --> 00:17:59,360
this<font color="#CCCCCC"> multi-class defines three</font><font color="#E5E5E5"> records</font>

402
00:17:57,770 --> 00:18:01,460
with names<font color="#E5E5E5"> you know underscore X</font>

403
00:17:59,360 --> 00:18:04,280
<font color="#E5E5E5">underscore</font><font color="#CCCCCC"> Y underscore Z which are</font>

404
00:18:01,460 --> 00:18:08,390
concatenated<font color="#CCCCCC"> with the base name and each</font>

405
00:18:04,280 --> 00:18:10,490
of those then inherits<font color="#CCCCCC"> from you know</font>

406
00:18:08,390 --> 00:18:12,950
some<font color="#E5E5E5"> class helper class that we defined</font>

407
00:18:10,490 --> 00:18:14,840
which in turn derives from a<font color="#E5E5E5"> target</font>

408
00:18:12,950 --> 00:18:16,700
independent intrinsic class<font color="#E5E5E5"> which means</font>

409
00:18:14,840 --> 00:18:21,220
that we're<font color="#E5E5E5"> defining intrinsics here so</font>

410
00:18:16,700 --> 00:18:23,990
we're<font color="#E5E5E5"> defining three records and at once</font>

411
00:18:21,220 --> 00:18:26,780
<font color="#CCCCCC">like classes multi classes have this</font>

412
00:18:23,990 --> 00:18:28,370
implicit<font color="#CCCCCC"> name</font><font color="#E5E5E5"> argument so by default</font><font color="#CCCCCC"> the</font>

413
00:18:26,780 --> 00:18:29,780
names that<font color="#E5E5E5"> are instantiated</font><font color="#CCCCCC"> are just</font>

414
00:18:28,370 --> 00:18:32,510
like the base name that<font color="#E5E5E5"> comes from the</font>

415
00:18:29,780 --> 00:18:34,100
DEF<font color="#E5E5E5"> in the FM concatenated from the name</font>

416
00:18:32,510 --> 00:18:36,110
that<font color="#CCCCCC"> the record has inside the multi</font>

417
00:18:34,100 --> 00:18:37,459
<font color="#CCCCCC">class but you can play around</font><font color="#E5E5E5"> with this</font>

418
00:18:36,110 --> 00:18:39,740
like the example on the<font color="#E5E5E5"> right hand side</font>

419
00:18:37,460 --> 00:18:42,890
shows if you look at<font color="#E5E5E5"> this def of the rec</font>

420
00:18:39,740 --> 00:18:44,780
<font color="#CCCCCC">3 the rectory is actually prefixed</font><font color="#E5E5E5"> to</font>

421
00:18:42,890 --> 00:18:47,210
<font color="#E5E5E5">the base name so the rule is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if you</font>

422
00:18:44,780 --> 00:18:50,540
<font color="#E5E5E5">explicitly mention the name template</font>

423
00:18:47,210 --> 00:18:53,950
argument then<font color="#E5E5E5"> that overrides the default</font>

424
00:18:50,540 --> 00:18:56,960
concatenation that can be useful in some

425
00:18:53,950 --> 00:18:59,600
<font color="#E5E5E5">in some</font><font color="#CCCCCC"> Isis where you have like</font>

426
00:18:56,960 --> 00:19:03,130
instruction families where some of<font color="#E5E5E5"> the</font>

427
00:18:59,600 --> 00:19:05,510
instructions are<font color="#E5E5E5"> prefixed with something</font>

428
00:19:03,130 --> 00:19:07,220
there's some interesting<font color="#E5E5E5"> corner</font><font color="#CCCCCC"> cases so</font>

429
00:19:05,510 --> 00:19:09,080
interestingly<font color="#E5E5E5"> multi</font><font color="#CCCCCC"> classes also</font><font color="#E5E5E5"> support</font>

430
00:19:07,220 --> 00:19:12,320
inheritance from other multi classes

431
00:19:09,080 --> 00:19:14,750
which<font color="#E5E5E5"> is really basically the same as</font>

432
00:19:12,320 --> 00:19:16,220
just<font color="#E5E5E5"> putting a def</font><font color="#CCCCCC"> m of</font><font color="#E5E5E5"> the base multi</font>

433
00:19:14,750 --> 00:19:17,840
class<font color="#E5E5E5"> as</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> shown there while</font>

434
00:19:16,220 --> 00:19:21,620
preparing the slides I noticed that

435
00:19:17,840 --> 00:19:26,240
<font color="#E5E5E5">that's not entirely true</font><font color="#CCCCCC"> and maybe that</font>

436
00:19:21,620 --> 00:19:29,179
should be<font color="#E5E5E5"> changed but yeah if you have a</font>

437
00:19:26,240 --> 00:19:31,100
def M so the<font color="#E5E5E5"> DEF</font><font color="#CCCCCC"> M instance is a multi</font>

438
00:19:29,180 --> 00:19:33,380
class right<font color="#E5E5E5"> but it can also actually</font>

439
00:19:31,100 --> 00:19:34,879
<font color="#E5E5E5">inherit from classes which can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> useful</font>

440
00:19:33,380 --> 00:19:36,350
for tagging the records that<font color="#CCCCCC"> you're</font>

441
00:19:34,880 --> 00:19:39,070
<font color="#E5E5E5">instantiated with something like</font>

442
00:19:36,350 --> 00:19:41,540
instruction mappings and<font color="#E5E5E5"> stuff like that</font>

443
00:19:39,070 --> 00:19:46,490
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it cannot have a body so if you want</font>

444
00:19:41,540 --> 00:19:49,159
<font color="#E5E5E5">to override anything that that is you</font>

445
00:19:46,490 --> 00:19:50,540
<font color="#E5E5E5">know any variable that is defined</font><font color="#CCCCCC"> in the</font>

446
00:19:49,160 --> 00:19:54,770
records that<font color="#E5E5E5"> you instantiate you need to</font>

447
00:19:50,540 --> 00:19:58,250
use<font color="#E5E5E5"> global</font><font color="#CCCCCC"> edge statements</font><font color="#E5E5E5"> okay so multi</font>

448
00:19:54,770 --> 00:19:59,990
class<font color="#E5E5E5"> is one way</font><font color="#CCCCCC"> of generating</font><font color="#E5E5E5"> many</font>

449
00:19:58,250 --> 00:20:02,300
regular records<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> another way of</font>

450
00:19:59,990 --> 00:20:04,220
<font color="#CCCCCC">doing that which</font><font color="#E5E5E5"> is for each and for</font>

451
00:20:02,300 --> 00:20:05,690
each is<font color="#E5E5E5"> yeah is</font><font color="#CCCCCC"> it's it's a for each</font>

452
00:20:04,220 --> 00:20:07,670
loop<font color="#E5E5E5"> like you loop over a list or a</font>

453
00:20:05,690 --> 00:20:09,240
range of integers<font color="#E5E5E5"> so there is nothing</font>

454
00:20:07,670 --> 00:20:10,800
too special

455
00:20:09,240 --> 00:20:12,390
in case I<font color="#E5E5E5"> haven't mentioned it here in</font>

456
00:20:10,800 --> 00:20:15,060
the<font color="#CCCCCC"> example at the top you know that the</font>

457
00:20:12,390 --> 00:20:17,490
hash is a<font color="#E5E5E5"> concatenation operator</font><font color="#CCCCCC"> string</font>

458
00:20:15,060 --> 00:20:19,649
<font color="#CCCCCC">concatenation just good to know and</font>

459
00:20:17,490 --> 00:20:21,750
there is also this exclamation<font color="#CCCCCC"> mark</font><font color="#E5E5E5"> ad</font>

460
00:20:19,650 --> 00:20:24,510
which<font color="#E5E5E5"> is a built-in function to add</font>

461
00:20:21,750 --> 00:20:26,250
integers<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just part</font><font color="#CCCCCC"> of the</font>

462
00:20:24,510 --> 00:20:26,640
encoding of the register in the in the

463
00:20:26,250 --> 00:20:29,160
<font color="#CCCCCC">eisah</font>

464
00:20:26,640 --> 00:20:30,920
<font color="#CCCCCC">one interesting thing about for each is</font>

465
00:20:29,160 --> 00:20:35,520
that you can<font color="#E5E5E5"> use it as an if statement</font>

466
00:20:30,920 --> 00:20:38,880
<font color="#E5E5E5">so this is an example from from our</font>

467
00:20:35,520 --> 00:20:40,350
<font color="#CCCCCC">back-end as well so we</font><font color="#E5E5E5"> have a family of</font>

468
00:20:38,880 --> 00:20:42,540
instructions I recall just<font color="#CCCCCC"> one</font>

469
00:20:40,350 --> 00:20:44,760
instructions and they have multiple

470
00:20:42,540 --> 00:20:48,290
<font color="#E5E5E5">incarnations right they have the</font><font color="#CCCCCC"> basic</font>

471
00:20:44,760 --> 00:20:50,790
<font color="#CCCCCC">ether T</font><font color="#E5E5E5"> to pop one there is an extended</font>

472
00:20:48,290 --> 00:20:52,590
<font color="#CCCCCC">64-bit encoding there's</font><font color="#E5E5E5"> something that</font>

473
00:20:50,790 --> 00:20:54,840
<font color="#E5E5E5">has a feature called SDWA</font>

474
00:20:52,590 --> 00:20:57,060
<font color="#E5E5E5">for all of them but then for</font><font color="#CCCCCC"> some of</font>

475
00:20:54,840 --> 00:21:00,570
<font color="#E5E5E5">them there is also an incarnation that</font>

476
00:20:57,060 --> 00:21:02,790
<font color="#E5E5E5">uses a feature</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> DPP and now if you</font>

477
00:21:00,570 --> 00:21:04,379
<font color="#E5E5E5">have a class of instructions that</font><font color="#CCCCCC"> is</font>

478
00:21:02,790 --> 00:21:06,540
regular in that way except for<font color="#E5E5E5"> this one</font>

479
00:21:04,380 --> 00:21:09,090
<font color="#E5E5E5">thing you have multiple options for</font>

480
00:21:06,540 --> 00:21:10,889
<font color="#CCCCCC">realizing that in table generate one way</font>

481
00:21:09,090 --> 00:21:12,659
would be to just<font color="#CCCCCC"> have</font><font color="#E5E5E5"> different multi</font>

482
00:21:10,890 --> 00:21:14,340
classes right multi class<font color="#E5E5E5"> for</font><font color="#CCCCCC"> what one</font>

483
00:21:12,660 --> 00:21:17,250
<font color="#CCCCCC">width and multi class</font><font color="#E5E5E5"> for what one</font>

484
00:21:14,340 --> 00:21:18,659
without the problem is with this<font color="#E5E5E5"> kind of</font>

485
00:21:17,250 --> 00:21:20,700
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> that you can easily</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> a</font>

486
00:21:18,660 --> 00:21:25,260
combinatorial<font color="#E5E5E5"> explosion</font><font color="#CCCCCC"> of multi classes</font>

487
00:21:20,700 --> 00:21:28,860
so what we do here<font color="#E5E5E5"> instead is this this</font>

488
00:21:25,260 --> 00:21:30,990
if statement basically so we have this

489
00:21:28,860 --> 00:21:32,939
notion of a<font color="#E5E5E5"> bob profile which is passed</font>

490
00:21:30,990 --> 00:21:36,810
as a template argument to the multi

491
00:21:32,940 --> 00:21:38,040
class and it has a bit<font color="#E5E5E5"> that tells us</font>

492
00:21:36,810 --> 00:21:40,379
whether the instruction<font color="#E5E5E5"> should have this</font>

493
00:21:38,040 --> 00:21:41,670
TPP or<font color="#E5E5E5"> not and then there is an</font>

494
00:21:40,380 --> 00:21:44,490
<font color="#CCCCCC">interesting pattern here</font><font color="#E5E5E5"> which is</font>

495
00:21:41,670 --> 00:21:46,950
basically<font color="#E5E5E5"> using table gen classes as</font>

496
00:21:44,490 --> 00:21:50,490
functions<font color="#CCCCCC"> right this bool to list class</font>

497
00:21:46,950 --> 00:21:53,550
it takes<font color="#E5E5E5"> this bit value as a as an</font>

498
00:21:50,490 --> 00:21:55,860
argument and<font color="#CCCCCC"> then it has a variable</font>

499
00:21:53,550 --> 00:21:59,220
called ret<font color="#E5E5E5"> which is the</font><font color="#CCCCCC"> return value of</font>

500
00:21:55,860 --> 00:22:00,870
<font color="#E5E5E5">the function</font><font color="#CCCCCC"> that we're defining and you</font>

501
00:21:59,220 --> 00:22:03,750
know if the bit<font color="#CCCCCC"> is</font><font color="#E5E5E5"> 0 then</font><font color="#CCCCCC"> it will</font><font color="#E5E5E5"> return</font>

502
00:22:00,870 --> 00:22:05,879
an<font color="#CCCCCC"> empty list</font><font color="#E5E5E5"> which means that the for</font>

503
00:22:03,750 --> 00:22:08,340
each will not do<font color="#CCCCCC"> nothing or we return a</font>

504
00:22:05,880 --> 00:22:10,500
one element<font color="#E5E5E5"> list and the for each will</font>

505
00:22:08,340 --> 00:22:12,870
do<font color="#E5E5E5"> something so that's that's a pattern</font>

506
00:22:10,500 --> 00:22:18,600
<font color="#CCCCCC">that we use quite extensively and it's</font>

507
00:22:12,870 --> 00:22:21,090
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> useful yeah for each versus multi</font>

508
00:22:18,600 --> 00:22:22,139
class<font color="#CCCCCC"> both of them</font><font color="#E5E5E5"> serve kind of similar</font>

509
00:22:21,090 --> 00:22:23,760
purposes

510
00:22:22,140 --> 00:22:26,160
I would say that multi<font color="#E5E5E5"> class is more</font>

511
00:22:23,760 --> 00:22:28,590
idiomatic for table<font color="#E5E5E5"> Jen and it's often</font>

512
00:22:26,160 --> 00:22:31,320
easier<font color="#CCCCCC"> to reuse</font><font color="#E5E5E5"> but for each has some</font>

513
00:22:28,590 --> 00:22:33,629
programmability<font color="#E5E5E5"> advantages so both have</font>

514
00:22:31,320 --> 00:22:39,929
their place<font color="#E5E5E5"> and use them as it makes</font>

515
00:22:33,630 --> 00:22:42,420
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> nice feature</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

516
00:22:39,930 --> 00:22:45,330
<font color="#CCCCCC">deaf set which as the example on the top</font>

517
00:22:42,420 --> 00:22:49,800
right shows<font color="#CCCCCC"> you allows you to capture</font>

518
00:22:45,330 --> 00:22:52,290
all the records<font color="#E5E5E5"> that are defined inside</font>

519
00:22:49,800 --> 00:22:54,780
you know the<font color="#CCCCCC"> outer curly braces</font><font color="#E5E5E5"> into a</font>

520
00:22:52,290 --> 00:22:57,420
list that<font color="#CCCCCC"> you can then later</font><font color="#E5E5E5"> reference</font>

521
00:22:54,780 --> 00:23:05,149
<font color="#E5E5E5">and use in a for each for example to</font>

522
00:22:57,420 --> 00:23:07,980
iterate over<font color="#E5E5E5"> them</font><font color="#CCCCCC"> we use this in</font><font color="#E5E5E5"> AMD GPU</font>

523
00:23:05,150 --> 00:23:11,610
<font color="#E5E5E5">to define for these intrinsics that are</font>

524
00:23:07,980 --> 00:23:15,270
up<font color="#E5E5E5"> there a generic</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> so generic</font>

525
00:23:11,610 --> 00:23:20,129
table<font color="#E5E5E5"> is generic searchable tables is</font>

526
00:23:15,270 --> 00:23:23,310
one<font color="#CCCCCC"> back-end that is a fairly versatile</font>

527
00:23:20,130 --> 00:23:25,050
way of exporting data<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> tables</font><font color="#CCCCCC"> and</font>

528
00:23:23,310 --> 00:23:27,210
without<font color="#E5E5E5"> writing your own custom back-end</font>

529
00:23:25,050 --> 00:23:28,800
<font color="#CCCCCC">so what's happening here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we just</font>

530
00:23:27,210 --> 00:23:30,270
<font color="#E5E5E5">define a generic</font><font color="#CCCCCC"> table and you really</font>

531
00:23:28,800 --> 00:23:34,110
should think<font color="#CCCCCC"> of it as like a</font><font color="#E5E5E5"> database</font>

532
00:23:30,270 --> 00:23:37,080
table<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> called resource</font>

533
00:23:34,110 --> 00:23:40,649
intrinsics the fields are listed there

534
00:23:37,080 --> 00:23:44,490
<font color="#E5E5E5">you know three fields</font><font color="#CCCCCC"> the rows of</font><font color="#E5E5E5"> the</font>

535
00:23:40,650 --> 00:23:49,350
table come from records that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> derived</font>

536
00:23:44,490 --> 00:23:51,900
from the<font color="#CCCCCC"> given filter class and a table</font>

537
00:23:49,350 --> 00:23:56,669
<font color="#CCCCCC">gen</font><font color="#E5E5E5"> the the searchable tables</font><font color="#CCCCCC"> back-end</font>

538
00:23:51,900 --> 00:23:59,760
<font color="#E5E5E5">will give you a function which you pass</font>

539
00:23:56,670 --> 00:24:02,720
in a a key of your<font color="#E5E5E5"> choice and it will</font>

540
00:23:59,760 --> 00:24:05,879
search the table and produce the

541
00:24:02,720 --> 00:24:08,100
<font color="#E5E5E5">corresponding struct if it exists and</font>

542
00:24:05,880 --> 00:24:10,530
you can actually<font color="#E5E5E5"> also define multiple</font>

543
00:24:08,100 --> 00:24:13,439
keys over generic tables which is nice

544
00:24:10,530 --> 00:24:17,070
for<font color="#CCCCCC"> mapping</font><font color="#E5E5E5"> from between</font><font color="#CCCCCC"> two things back</font>

545
00:24:13,440 --> 00:24:20,130
and<font color="#E5E5E5"> forth in both directions</font><font color="#CCCCCC"> so so here</font>

546
00:24:17,070 --> 00:24:22,980
we<font color="#E5E5E5"> use the for each based on lists that</font>

547
00:24:20,130 --> 00:24:26,130
we<font color="#E5E5E5"> previously captured to define the</font>

548
00:24:22,980 --> 00:24:27,990
rows<font color="#CCCCCC"> of this table</font><font color="#E5E5E5"> and now again you</font>

549
00:24:26,130 --> 00:24:29,220
might ask so def set is<font color="#E5E5E5"> really it's</font>

550
00:24:27,990 --> 00:24:31,020
<font color="#CCCCCC">really an issue Peter and even though I</font>

551
00:24:29,220 --> 00:24:33,450
added in myself<font color="#E5E5E5"> I have to say that it's</font>

552
00:24:31,020 --> 00:24:35,549
<font color="#E5E5E5">not very idiomatic for table</font><font color="#CCCCCC"> Jen</font><font color="#E5E5E5"> in most</font>

553
00:24:33,450 --> 00:24:39,090
cases you'll probably want<font color="#E5E5E5"> to</font>

554
00:24:35,549 --> 00:24:40,860
instead<font color="#E5E5E5"> use like multi classes or</font>

555
00:24:39,090 --> 00:24:43,519
possibly heterogeneous multi classes

556
00:24:40,860 --> 00:24:45,840
where you<font color="#CCCCCC"> define maybe some intrinsic</font>

557
00:24:43,519 --> 00:24:48,929
<font color="#CCCCCC">sorry some instruct machine instructions</font>

558
00:24:45,840 --> 00:24:51,629
and then some other class<font color="#E5E5E5"> maybe for</font>

559
00:24:48,929 --> 00:24:53,340
<font color="#E5E5E5">those tables at the same time</font><font color="#CCCCCC"> but in</font>

560
00:24:51,629 --> 00:24:54,928
this particular<font color="#E5E5E5"> case so something</font>

561
00:24:53,340 --> 00:24:57,238
interesting<font color="#E5E5E5"> happens right because the</font>

562
00:24:54,929 --> 00:24:59,879
intrinsics are defined in target

563
00:24:57,239 --> 00:25:02,210
independent<font color="#CCCCCC"> tables and sources which are</font>

564
00:24:59,879 --> 00:25:05,449
<font color="#CCCCCC">included by all</font><font color="#E5E5E5"> backends by all targets</font>

565
00:25:02,210 --> 00:25:07,889
right and they have to be defined<font color="#CCCCCC"> there</font>

566
00:25:05,450 --> 00:25:09,809
<font color="#E5E5E5">because it's a global enum that is the</font>

567
00:25:07,889 --> 00:25:14,248
same for<font color="#CCCCCC"> all</font><font color="#E5E5E5"> targets it's not target</font>

568
00:25:09,809 --> 00:25:15,720
specific but the table like if we were

569
00:25:14,249 --> 00:25:17,940
to define<font color="#E5E5E5"> the table in the same place</font>

570
00:25:15,720 --> 00:25:19,559
then every target<font color="#E5E5E5"> would get this this</font>

571
00:25:17,940 --> 00:25:21,720
table which is<font color="#E5E5E5"> really</font><font color="#CCCCCC"> specific</font><font color="#E5E5E5"> to our</font>

572
00:25:19,559 --> 00:25:25,649
<font color="#CCCCCC">back-end right that that</font><font color="#E5E5E5"> doesn't make</font>

573
00:25:21,720 --> 00:25:30,659
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> so instead we do</font><font color="#E5E5E5"> this separation</font>

574
00:25:25,649 --> 00:25:32,729
<font color="#E5E5E5">using the deficit feature</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> already saw</font>

575
00:25:30,659 --> 00:25:34,109
one<font color="#E5E5E5"> built-in function this exclamation</font>

576
00:25:32,730 --> 00:25:38,700
mark<font color="#E5E5E5"> ad there are a whole bunch of</font>

577
00:25:34,109 --> 00:25:40,859
others the the<font color="#CCCCCC"> most</font><font color="#E5E5E5"> interesting ones are</font>

578
00:25:38,700 --> 00:25:42,899
probably<font color="#E5E5E5"> the</font><font color="#CCCCCC"> castes so you are able to</font>

579
00:25:40,859 --> 00:25:45,749
<font color="#E5E5E5">cast between strings and records</font>

580
00:25:42,899 --> 00:25:46,949
<font color="#CCCCCC">actually which means that if</font><font color="#E5E5E5"> you cast</font><font color="#CCCCCC"> a</font>

581
00:25:45,749 --> 00:25:49,409
record to a string it gives you the name

582
00:25:46,950 --> 00:25:50,970
<font color="#CCCCCC">if you cast</font><font color="#E5E5E5"> a string to a record then it</font>

583
00:25:49,409 --> 00:25:52,409
looks for a record of<font color="#E5E5E5"> that name and</font>

584
00:25:50,970 --> 00:25:55,850
gives it<font color="#E5E5E5"> back to you if it has been</font>

585
00:25:52,409 --> 00:26:00,299
<font color="#E5E5E5">defined</font><font color="#CCCCCC"> previously in the source file</font>

586
00:25:55,850 --> 00:26:03,299
and and then so<font color="#E5E5E5"> there is for each which</font>

587
00:26:00,299 --> 00:26:04,529
<font color="#E5E5E5">is basically a map function is what it</font>

588
00:26:03,299 --> 00:26:06,480
would<font color="#E5E5E5"> be called in like Haskell</font><font color="#CCCCCC"> or</font>

589
00:26:04,529 --> 00:26:12,269
something and there is a left<font color="#E5E5E5"> fold which</font>

590
00:26:06,480 --> 00:26:14,879
<font color="#E5E5E5">is also nice to have alright so this</font><font color="#CCCCCC"> is</font>

591
00:26:12,269 --> 00:26:19,019
what we went<font color="#CCCCCC"> over</font><font color="#E5E5E5"> we went over most of</font>

592
00:26:14,879 --> 00:26:21,350
<font color="#E5E5E5">the stuff now I said we could maybe do a</font>

593
00:26:19,019 --> 00:26:24,389
deep dive<font color="#E5E5E5"> into some more advanced</font>

594
00:26:21,350 --> 00:26:25,769
application of table<font color="#CCCCCC"> Jen if we have the</font>

595
00:26:24,389 --> 00:26:33,959
time we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have that much time</font>

596
00:26:25,769 --> 00:26:36,330
<font color="#E5E5E5">anymore so I wonder which part might</font><font color="#CCCCCC"> be</font>

597
00:26:33,960 --> 00:26:38,429
best<font color="#E5E5E5"> to fit so we have this very complex</font>

598
00:26:36,330 --> 00:26:42,928
family of intrinsic<font color="#E5E5E5"> for image operations</font>

599
00:26:38,429 --> 00:26:45,210
<font color="#CCCCCC">in our</font><font color="#E5E5E5"> back end right</font><font color="#CCCCCC"> there is a lot of</font>

600
00:26:42,929 --> 00:26:46,679
orthogonality<font color="#E5E5E5"> here where part of these</font>

601
00:26:45,210 --> 00:26:48,720
image instructions is the dimensionality

602
00:26:46,679 --> 00:26:52,230
of the image<font color="#E5E5E5"> right if it's 1d to the</font>

603
00:26:48,720 --> 00:26:54,120
<font color="#E5E5E5">to D and</font><font color="#CCCCCC"> then the arguments of</font><font color="#E5E5E5"> the</font>

604
00:26:52,230 --> 00:26:55,890
intrinsic<font color="#E5E5E5"> depends on that dimensionality</font>

605
00:26:54,120 --> 00:26:58,020
<font color="#CCCCCC">of course it's either</font><font color="#E5E5E5"> only an S</font>

606
00:26:55,890 --> 00:26:59,789
<font color="#E5E5E5">coordinate or it's an S and a tea and</font><font color="#CCCCCC"> a</font>

607
00:26:58,020 --> 00:27:03,150
slice in the<font color="#E5E5E5"> array</font><font color="#CCCCCC"> or it's just an SMT</font>

608
00:26:59,789 --> 00:27:04,890
<font color="#E5E5E5">etc</font><font color="#CCCCCC"> you may have this dot D which stands</font>

609
00:27:03,150 --> 00:27:06,659
<font color="#E5E5E5">for partial</font><font color="#CCCCCC"> derivatives in</font><font color="#E5E5E5"> which case</font>

610
00:27:04,890 --> 00:27:09,270
you have<font color="#CCCCCC"> all this green you</font><font color="#E5E5E5"> know D s</font>

611
00:27:06,659 --> 00:27:10,559
<font color="#E5E5E5">over</font><font color="#CCCCCC"> d HD T over</font><font color="#E5E5E5"> the H which</font><font color="#CCCCCC"> are partial</font>

612
00:27:09,270 --> 00:27:16,100
<font color="#E5E5E5">derivatives of coordinates with respect</font>

613
00:27:10,559 --> 00:27:18,330
to screen coordinates<font color="#E5E5E5"> and and this this</font>

614
00:27:16,100 --> 00:27:21,570
really large number of intrinsics we

615
00:27:18,330 --> 00:27:27,960
want to define<font color="#E5E5E5"> some way and and we do</font>

616
00:27:21,570 --> 00:27:31,500
all of this in in table<font color="#CCCCCC"> gen</font><font color="#E5E5E5"> so you get</font>

617
00:27:27,960 --> 00:27:34,230
code like<font color="#E5E5E5"> this which at the bottom left</font>

618
00:27:31,500 --> 00:27:38,520
you<font color="#CCCCCC"> see it defines</font><font color="#E5E5E5"> the notion of a 2d</font>

619
00:27:34,230 --> 00:27:40,620
array dimensionality<font color="#CCCCCC"> of an image gives</font>

620
00:27:38,520 --> 00:27:42,210
it a<font color="#E5E5E5"> name to the array and says okay</font>

621
00:27:40,620 --> 00:27:44,158
there are<font color="#E5E5E5"> two coordinates that are</font>

622
00:27:42,210 --> 00:27:47,220
<font color="#E5E5E5">relevant for derivatives namely s and T</font>

623
00:27:44,159 --> 00:27:51,150
and<font color="#CCCCCC"> one coordinate</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> isn't and then</font>

624
00:27:47,220 --> 00:27:53,820
in this<font color="#E5E5E5"> this class that</font><font color="#CCCCCC"> we define above</font>

625
00:27:51,150 --> 00:27:55,830
we define a variable gradient args<font color="#E5E5E5"> which</font>

626
00:27:53,820 --> 00:27:58,590
is the list of gradient arguments for

627
00:27:55,830 --> 00:28:00,780
intrinsics that need them<font color="#CCCCCC"> which are</font>

628
00:27:58,590 --> 00:28:02,549
defined<font color="#E5E5E5"> basically using function calls</font>

629
00:28:00,780 --> 00:28:04,678
right we<font color="#E5E5E5"> first iterate over the given</font>

630
00:28:02,549 --> 00:28:06,780
coordinate names<font color="#E5E5E5"> and use string</font>

631
00:28:04,679 --> 00:28:10,890
concatenation<font color="#CCCCCC"> to define these names the</font>

632
00:28:06,780 --> 00:28:12,720
<font color="#CCCCCC">sdh</font><font color="#E5E5E5"> etc and then we pass that to that</font>

633
00:28:10,890 --> 00:28:14,640
class which has<font color="#E5E5E5"> really</font><font color="#CCCCCC"> a roll</font><font color="#E5E5E5"> of a</font>

634
00:28:12,720 --> 00:28:17,220
function which is<font color="#CCCCCC"> defined above</font><font color="#E5E5E5"> make</font>

635
00:28:14,640 --> 00:28:20,370
argument<font color="#E5E5E5"> list and it produces</font><font color="#CCCCCC"> what is</font>

636
00:28:17,220 --> 00:28:21,990
there<font color="#CCCCCC"> on the right in the box so why do</font>

637
00:28:20,370 --> 00:28:25,189
we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> so what is that that we have on</font>

638
00:28:21,990 --> 00:28:27,600
the right and why do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want it well</font>

639
00:28:25,190 --> 00:28:30,299
<font color="#CCCCCC">when we</font><font color="#E5E5E5"> define intrinsics we have to</font>

640
00:28:27,600 --> 00:28:33,570
define<font color="#E5E5E5"> the types of the arguments of the</font>

641
00:28:30,299 --> 00:28:36,000
intrinsics right and there are we<font color="#E5E5E5"> can</font>

642
00:28:33,570 --> 00:28:39,658
give a type explicitly such as 32-bit

643
00:28:36,000 --> 00:28:42,030
float<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> want to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

644
00:28:39,659 --> 00:28:45,539
<font color="#E5E5E5">pass not just 32-bit floats but</font><font color="#CCCCCC"> also</font>

645
00:28:42,030 --> 00:28:49,428
half precision floats<font color="#CCCCCC"> so we need an any</font>

646
00:28:45,539 --> 00:28:51,809
float type for the<font color="#E5E5E5"> D</font><font color="#CCCCCC"> sdh argument and</font>

647
00:28:49,429 --> 00:28:55,530
then the arguments that come after that

648
00:28:51,809 --> 00:28:57,690
should be constrained by<font color="#CCCCCC"> the IR verifier</font>

649
00:28:55,530 --> 00:29:00,908
to be of the same<font color="#CCCCCC"> type so that's what</font>

650
00:28:57,690 --> 00:29:02,649
the<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> match type is for</font>

651
00:29:00,909 --> 00:29:04,809
and what this make argument list

652
00:29:02,649 --> 00:29:07,238
<font color="#E5E5E5">function does is is precisely generate</font>

653
00:29:04,809 --> 00:29:08,918
an array of this form by taking<font color="#E5E5E5"> you know</font>

654
00:29:07,239 --> 00:29:10,629
the first name combining it with<font color="#CCCCCC"> the</font>

655
00:29:08,919 --> 00:29:12,940
base type and then doing a mapping which

656
00:29:10,629 --> 00:29:18,059
<font color="#E5E5E5">maps all the names to this AMD GPU</font><font color="#CCCCCC"> are</font>

657
00:29:12,940 --> 00:29:20,769
care of<font color="#E5E5E5"> match type and an argument</font><font color="#CCCCCC"> name</font>

658
00:29:18,059 --> 00:29:26,590
<font color="#CCCCCC">okay and any questions about this this</font>

659
00:29:20,769 --> 00:29:28,210
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a lot of -</font><font color="#E5E5E5"> oh those are</font><font color="#CCCCCC"> things that</font>

660
00:29:26,590 --> 00:29:29,799
<font color="#E5E5E5">we use it we don't use them for much</font>

661
00:29:28,210 --> 00:29:31,419
internally they're<font color="#E5E5E5"> convenient for</font>

662
00:29:29,799 --> 00:29:35,580
<font color="#E5E5E5">debugging and</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> plans for other</font>

663
00:29:31,419 --> 00:29:35,580
<font color="#E5E5E5">things that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can do with them but yeah</font>

664
00:29:36,869 --> 00:29:44,949
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> other other questions about</font>

665
00:29:42,070 --> 00:29:50,349
this<font color="#CCCCCC"> I will upload the slides of course</font>

666
00:29:44,950 --> 00:29:52,269
you can look at it later we do more

667
00:29:50,349 --> 00:29:53,889
stuff<font color="#CCCCCC"> like this so for example if you</font>

668
00:29:52,269 --> 00:29:56,229
have if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have two of these arrays of</font>

669
00:29:53,889 --> 00:29:58,389
arguments you need<font color="#CCCCCC"> to and all of them</font>

670
00:29:56,229 --> 00:30:00,009
use<font color="#E5E5E5"> oliviere match types you need to</font>

671
00:29:58,389 --> 00:30:01,869
adjust the<font color="#E5E5E5"> index that the match type</font>

672
00:30:00,009 --> 00:30:03,729
refers to that's what that stuff<font color="#E5E5E5"> is</font>

673
00:30:01,869 --> 00:30:05,439
about especially<font color="#E5E5E5"> that stuff on that</font>

674
00:30:03,729 --> 00:30:09,549
<font color="#E5E5E5">slide but that we don't really have the</font>

675
00:30:05,440 --> 00:30:11,830
<font color="#E5E5E5">time</font><font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> it in detail</font><font color="#CCCCCC"> all right</font>

676
00:30:09,549 --> 00:30:13,869
so I<font color="#E5E5E5"> just want to close</font><font color="#CCCCCC"> with some</font><font color="#E5E5E5"> final</font>

677
00:30:11,830 --> 00:30:15,549
thoughts<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> a brief look at what we</font>

678
00:30:13,869 --> 00:30:15,908
covered you know<font color="#E5E5E5"> a brief overview</font><font color="#CCCCCC"> table</font>

679
00:30:15,549 --> 00:30:18,609
<font color="#CCCCCC">Jen</font>

680
00:30:15,909 --> 00:30:20,759
quick run-through<font color="#E5E5E5"> of pretty</font><font color="#CCCCCC"> much all the</font>

681
00:30:18,609 --> 00:30:22,809
features of the<font color="#E5E5E5"> front end language</font>

682
00:30:20,759 --> 00:30:26,739
<font color="#E5E5E5">except the</font><font color="#CCCCCC"> built-in functions</font><font color="#E5E5E5"> not in</font>

683
00:30:22,809 --> 00:30:30,789
detail<font color="#E5E5E5"> and and a brief example of of</font>

684
00:30:26,739 --> 00:30:32,859
what you can<font color="#E5E5E5"> use what</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> do with it</font>

685
00:30:30,789 --> 00:30:34,359
<font color="#CCCCCC">you know some some</font><font color="#E5E5E5"> things to keep in</font>

686
00:30:32,859 --> 00:30:37,599
<font color="#CCCCCC">mind you know multi class versus for</font>

687
00:30:34,359 --> 00:30:38,889
each calling table table Jen directly if

688
00:30:37,599 --> 00:30:41,559
you<font color="#CCCCCC"> have problems to dump all the</font>

689
00:30:38,889 --> 00:30:46,359
records<font color="#E5E5E5"> these are kind of things</font><font color="#CCCCCC"> that I</font>

690
00:30:41,559 --> 00:30:48,158
<font color="#E5E5E5">think you should</font><font color="#CCCCCC"> take home</font><font color="#E5E5E5"> some possible</font>

691
00:30:46,359 --> 00:30:49,749
things to improve in<font color="#CCCCCC"> tables and in the</font>

692
00:30:48,159 --> 00:30:52,539
<font color="#E5E5E5">future I'm not going to work on them</font>

693
00:30:49,749 --> 00:30:54,309
because well priorities<font color="#E5E5E5"> just aren't like</font>

694
00:30:52,539 --> 00:30:55,749
<font color="#CCCCCC">that but there</font><font color="#E5E5E5"> are still some</font><font color="#CCCCCC"> cleanups</font>

695
00:30:54,309 --> 00:30:59,649
that could be done in<font color="#E5E5E5"> the in the type</font>

696
00:30:55,749 --> 00:31:02,499
system<font color="#CCCCCC"> right</font><font color="#E5E5E5"> to smooth some of these</font>

697
00:30:59,649 --> 00:31:04,748
corner cases<font color="#E5E5E5"> it will be convenient to</font>

698
00:31:02,499 --> 00:31:06,789
have the the hash operator not just work

699
00:31:04,749 --> 00:31:09,940
for<font color="#CCCCCC"> Strings but also for lists and</font><font color="#E5E5E5"> and</font>

700
00:31:06,789 --> 00:31:11,529
tags<font color="#E5E5E5"> that would be a convenient</font><font color="#CCCCCC"> the</font>

701
00:31:09,940 --> 00:31:14,410
thing with multi class inheritance<font color="#E5E5E5"> that</font>

702
00:31:11,529 --> 00:31:16,510
I mentioned<font color="#E5E5E5"> and then you know</font>

703
00:31:14,410 --> 00:31:18,850
<font color="#E5E5E5">backends</font><font color="#CCCCCC"> I mean it used to be like last</font>

704
00:31:16,510 --> 00:31:20,230
year<font color="#E5E5E5"> when I when I</font><font color="#CCCCCC"> started diving deep</font>

705
00:31:18,850 --> 00:31:21,730
into tables<font color="#E5E5E5"> and my problem was that</font><font color="#CCCCCC"> I</font>

706
00:31:20,230 --> 00:31:23,980
<font color="#CCCCCC">always ran into crashes</font><font color="#E5E5E5"> and errors in</font>

707
00:31:21,730 --> 00:31:25,510
the front end<font color="#E5E5E5"> this at least for me this</font>

708
00:31:23,980 --> 00:31:28,630
doesn't<font color="#E5E5E5"> happen anymore if it happens for</font>

709
00:31:25,510 --> 00:31:31,900
<font color="#E5E5E5">you to talk to me</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> now the problem is</font>

710
00:31:28,630 --> 00:31:33,820
<font color="#E5E5E5">that the main</font><font color="#CCCCCC"> problem is that</font><font color="#E5E5E5"> I do</font>

711
00:31:31,900 --> 00:31:35,560
<font color="#E5E5E5">something with selection bag you know</font>

712
00:31:33,820 --> 00:31:37,000
the<font color="#CCCCCC"> I sales patterns and I just get</font>

713
00:31:35,560 --> 00:31:38,409
weird<font color="#E5E5E5"> error messages</font><font color="#CCCCCC"> that are super</font>

714
00:31:37,000 --> 00:31:40,090
<font color="#CCCCCC">difficult to understand at least</font><font color="#E5E5E5"> for me</font>

715
00:31:38,410 --> 00:31:42,490
and<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think there are</font><font color="#E5E5E5"> some things there</font>

716
00:31:40,090 --> 00:31:45,250
that<font color="#E5E5E5"> are also in the feature set</font><font color="#CCCCCC"> that</font>

717
00:31:42,490 --> 00:31:47,530
could<font color="#E5E5E5"> maybe be more orthogonal but yeah</font>

718
00:31:45,250 --> 00:31:49,450
<font color="#E5E5E5">that's that</font><font color="#CCCCCC"> would be something</font><font color="#E5E5E5"> probably</font>

719
00:31:47,530 --> 00:31:53,510
<font color="#CCCCCC">another big project</font><font color="#E5E5E5"> and not for this</font>

720
00:31:49,450 --> 00:32:02,089
talk<font color="#CCCCCC"> so with that thank you</font><font color="#E5E5E5"> very much</font>

721
00:31:53,510 --> 00:32:02,089
[Applause]

722
00:32:19,680 --> 00:32:26,050
<font color="#CCCCCC">okay so the question is can you I said</font>

723
00:32:22,660 --> 00:32:28,900
<font color="#E5E5E5">you can run tabled in itself</font><font color="#CCCCCC"> too so you</font>

724
00:32:26,050 --> 00:32:36,550
can dump<font color="#E5E5E5"> the records can you then go</font>

725
00:32:28,900 --> 00:32:38,380
from there<font color="#E5E5E5"> to the to the generating so</font>

726
00:32:36,550 --> 00:32:39,790
of course you<font color="#E5E5E5"> can go</font><font color="#CCCCCC"> to the generated</font>

727
00:32:38,380 --> 00:32:42,070
include files directly by just invoking

728
00:32:39,790 --> 00:32:43,620
the<font color="#E5E5E5"> backend directly but if you want to</font>

729
00:32:42,070 --> 00:32:49,659
like edit<font color="#E5E5E5"> the stuff that's in between</font>

730
00:32:43,620 --> 00:32:51,399
<font color="#E5E5E5">that's currently not</font><font color="#CCCCCC"> possible because so</font>

731
00:32:49,660 --> 00:32:53,680
you could just<font color="#CCCCCC"> cut out</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> record</font>

732
00:32:51,400 --> 00:32:56,920
definitions<font color="#E5E5E5"> and feed them back into</font>

733
00:32:53,680 --> 00:32:58,570
table<font color="#CCCCCC"> Jen as input I think there there</font>

734
00:32:56,920 --> 00:33:00,850
are<font color="#E5E5E5"> two problems that you run</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> one</font>

735
00:32:58,570 --> 00:33:03,850
problem<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> I don't think the output</font>

736
00:33:00,850 --> 00:33:06,580
of the dump is is in like you have to

737
00:33:03,850 --> 00:33:08,500
define<font color="#E5E5E5"> a variable</font><font color="#CCCCCC"> before you refer to it</font>

738
00:33:06,580 --> 00:33:10,360
and I don't<font color="#E5E5E5"> think</font><font color="#CCCCCC"> the dumping makes sure</font>

739
00:33:08,500 --> 00:33:12,730
<font color="#CCCCCC">to preserve</font><font color="#E5E5E5"> that order I think it just</font>

740
00:33:10,360 --> 00:33:14,620
dumps alphabetically that's one thing

741
00:33:12,730 --> 00:33:16,360
the<font color="#CCCCCC"> other thing</font><font color="#E5E5E5"> is that the backends</font>

742
00:33:14,620 --> 00:33:18,280
filter the records<font color="#CCCCCC"> out based on the</font>

743
00:33:16,360 --> 00:33:19,810
classes that<font color="#E5E5E5"> they inherit and the way</font>

744
00:33:18,280 --> 00:33:21,760
that the records are done currently<font color="#E5E5E5"> you</font>

745
00:33:19,810 --> 00:33:24,100
get the information<font color="#E5E5E5"> of the the</font>

746
00:33:21,760 --> 00:33:26,770
inheritance<font color="#CCCCCC"> in a comment</font><font color="#E5E5E5"> and not as</font>

747
00:33:24,100 --> 00:33:27,820
actual<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> inheritance</font><font color="#E5E5E5"> in the</font>

748
00:33:26,770 --> 00:33:29,080
tables in language

749
00:33:27,820 --> 00:33:40,059
so I think<font color="#E5E5E5"> those would be the two major</font>

750
00:33:29,080 --> 00:33:41,799
hurdles to enable that yeah so you

751
00:33:40,059 --> 00:33:44,350
obviously<font color="#E5E5E5"> can generate other stuff than</font>

752
00:33:41,799 --> 00:33:46,720
C++<font color="#CCCCCC"> from a back-end and in fact somebody</font>

753
00:33:44,350 --> 00:33:50,529
<font color="#E5E5E5">not so long ago added</font><font color="#CCCCCC"> a back-end</font><font color="#E5E5E5"> that</font>

754
00:33:46,720 --> 00:33:53,919
dumps the records in JSON format<font color="#CCCCCC"> so you</font>

755
00:33:50,529 --> 00:33:57,519
<font color="#CCCCCC">know you could</font><font color="#E5E5E5"> then use some other some</font>

756
00:33:53,919 --> 00:34:00,759
<font color="#CCCCCC">other tool</font><font color="#E5E5E5"> but yeah you could dump other</font>

757
00:33:57,519 --> 00:34:03,029
things<font color="#E5E5E5"> then</font><font color="#CCCCCC"> other things and suppose</font>

758
00:34:00,759 --> 00:34:05,320
plus if you wanted to<font color="#E5E5E5"> yeah yeah</font>

759
00:34:03,029 --> 00:34:22,960
but the backends<font color="#E5E5E5"> are written in C++ you</font>

760
00:34:05,320 --> 00:34:25,989
<font color="#E5E5E5">can do whatever the</font><font color="#CCCCCC"> question was I out</font>

761
00:34:22,960 --> 00:34:27,849
how you can kind<font color="#E5E5E5"> of abuse classes as as</font>

762
00:34:25,989 --> 00:34:30,879
functions<font color="#E5E5E5"> and wouldn't it be better to</font>

763
00:34:27,849 --> 00:34:33,190
<font color="#CCCCCC">have a dedicated</font><font color="#E5E5E5"> syntax for</font><font color="#CCCCCC"> that I been</font>

764
00:34:30,879 --> 00:34:36,040
<font color="#CCCCCC">I've thought</font><font color="#E5E5E5"> about this</font><font color="#CCCCCC"> myself</font>

765
00:34:33,190 --> 00:34:38,649
I didn't back when I did<font color="#E5E5E5"> all this work I</font>

766
00:34:36,040 --> 00:34:44,230
didn't find a solution to it that I<font color="#E5E5E5"> was</font>

767
00:34:38,649 --> 00:34:45,549
completely<font color="#E5E5E5"> convinced off</font><font color="#CCCCCC"> but it's it's</font>

768
00:34:44,230 --> 00:34:50,230
certainly<font color="#E5E5E5"> something</font><font color="#CCCCCC"> to think about you</font>

769
00:34:45,549 --> 00:34:52,659
<font color="#CCCCCC">know maybe maybe there maybe keep keep</font>

770
00:34:50,230 --> 00:34:56,290
it as classes but allow invoking it with

771
00:34:52,659 --> 00:34:58,319
the exclamation<font color="#CCCCCC"> mark</font><font color="#E5E5E5"> syntax to make it</font>

772
00:34:56,290 --> 00:35:02,759
at least<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more approachable</font>

773
00:34:58,319 --> 00:35:02,759
<font color="#E5E5E5">I mean</font>

774
00:35:18,540 --> 00:35:26,320
yeah it might it might<font color="#E5E5E5"> help the</font>

775
00:35:22,210 --> 00:35:28,920
understandability<font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah to have a</font>

776
00:35:26,320 --> 00:35:34,120
like a dedicated defined function syntax

777
00:35:28,920 --> 00:35:36,730
you it's it's it's a thought<font color="#CCCCCC"> that I was</font>

778
00:35:34,120 --> 00:35:38,799
also<font color="#CCCCCC"> thinking about this but it would</font>

779
00:35:36,730 --> 00:35:42,250
have to be because because this<font color="#E5E5E5"> pattern</font>

780
00:35:38,800 --> 00:35:43,720
isn't<font color="#E5E5E5"> so isn't used that</font><font color="#CCCCCC"> often today</font><font color="#E5E5E5"> so</font>

781
00:35:42,250 --> 00:35:46,090
<font color="#CCCCCC">so it would have</font><font color="#E5E5E5"> to be something that's</font>

782
00:35:43,720 --> 00:35:50,459
very<font color="#E5E5E5"> intuitive</font><font color="#CCCCCC"> but also fit well with</font>

783
00:35:46,090 --> 00:35:50,460
the other stuff in table<font color="#E5E5E5"> Jensen I mean</font>

784
00:36:10,680 --> 00:36:15,100
yeah<font color="#E5E5E5"> so the question</font><font color="#CCCCCC"> was is there scope</font>

785
00:36:13,180 --> 00:36:18,879
to to add better documentation<font color="#E5E5E5"> or</font>

786
00:36:15,100 --> 00:36:21,370
tutorial<font color="#CCCCCC"> to LVN</font><font color="#E5E5E5"> I wish I had the time</font>

787
00:36:18,880 --> 00:36:23,560
you know I<font color="#E5E5E5"> started a series</font><font color="#CCCCCC"> of blog</font>

788
00:36:21,370 --> 00:36:25,359
posts<font color="#CCCCCC"> on my blog where the idea</font><font color="#E5E5E5"> was that</font>

789
00:36:23,560 --> 00:36:27,790
<font color="#E5E5E5">maybe that could one</font><font color="#CCCCCC"> day lead to</font>

790
00:36:25,360 --> 00:36:34,710
something<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> but then</font><font color="#E5E5E5"> I just like</font>

791
00:36:27,790 --> 00:36:37,930
yeah it's<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time yeah yeah</font>

792
00:36:34,710 --> 00:36:41,460
this tables and turing-complete<font color="#E5E5E5"> not</font>

793
00:36:37,930 --> 00:36:43,990
<font color="#E5E5E5">intentionally I don't know I don't</font><font color="#CCCCCC"> know</font>

794
00:36:41,460 --> 00:36:45,640
<font color="#E5E5E5">so so there are some places like you</font>

795
00:36:43,990 --> 00:36:47,410
<font color="#E5E5E5">know with the with these function calls</font>

796
00:36:45,640 --> 00:36:50,200
and<font color="#CCCCCC"> everything where the question</font>

797
00:36:47,410 --> 00:36:51,850
<font color="#CCCCCC">actually arises</font><font color="#E5E5E5"> but at least last year</font>

798
00:36:50,200 --> 00:36:55,210
<font color="#E5E5E5">whenever I was at a point where I</font>

799
00:36:51,850 --> 00:36:56,980
thought well<font color="#CCCCCC"> maybe it would be nice to</font>

800
00:36:55,210 --> 00:36:59,710
have arbitrary recursion or something in

801
00:36:56,980 --> 00:37:02,980
there<font color="#CCCCCC"> I went the way of</font><font color="#E5E5E5"> not adding it so</font>

802
00:36:59,710 --> 00:37:08,350
I don't<font color="#CCCCCC"> think it is</font><font color="#E5E5E5"> but maybe you will</font>

803
00:37:02,980 --> 00:37:12,730
prove me wrong so<font color="#E5E5E5"> you can there</font><font color="#CCCCCC"> is a</font>

804
00:37:08,350 --> 00:37:16,330
very limited<font color="#E5E5E5"> scope for self references</font>

805
00:37:12,730 --> 00:37:21,580
in that<font color="#E5E5E5"> when you define a record you can</font>

806
00:37:16,330 --> 00:37:23,440
define a variable which you<font color="#E5E5E5"> assign a</font>

807
00:37:21,580 --> 00:37:23,900
cast from the<font color="#E5E5E5"> name of the record and</font>

808
00:37:23,440 --> 00:37:25,640
<font color="#E5E5E5">then</font>

809
00:37:23,900 --> 00:37:30,380
record will<font color="#CCCCCC"> contain</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> reference to</font>

810
00:37:25,640 --> 00:37:32,538
itself<font color="#E5E5E5"> that is the only way like that</font>

811
00:37:30,380 --> 00:37:34,670
was stuff like<font color="#E5E5E5"> that was actually being</font>

812
00:37:32,539 --> 00:37:44,890
<font color="#E5E5E5">used in</font><font color="#CCCCCC"> existing table</font><font color="#E5E5E5"> Jen</font><font color="#CCCCCC"> when I</font>

813
00:37:34,670 --> 00:37:48,859
started looking yeah I mean go<font color="#CCCCCC"> ahead</font>

814
00:37:44,890 --> 00:37:52,970
<font color="#E5E5E5">next next for them you present table</font>

815
00:37:48,859 --> 00:37:55,069
<font color="#CCCCCC">Dennis turing-complete yeah yeah</font><font color="#E5E5E5"> I don't</font>

816
00:37:52,970 --> 00:38:01,299
<font color="#E5E5E5">think so but I would not be super</font>

817
00:37:55,069 --> 00:38:12,619
surprised if it were other questions

818
00:38:01,299 --> 00:38:14,660
yeah yeah<font color="#E5E5E5"> because I was lazy</font><font color="#CCCCCC"> and there</font>

819
00:38:12,619 --> 00:38:16,250
were at the<font color="#CCCCCC"> time</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I first</font><font color="#E5E5E5"> thought</font>

820
00:38:14,660 --> 00:38:18,649
about<font color="#E5E5E5"> it there was like one place where</font>

821
00:38:16,250 --> 00:38:20,779
I wanted<font color="#E5E5E5"> to use it</font><font color="#CCCCCC"> by now I</font><font color="#E5E5E5"> think there</font>

822
00:38:18,650 --> 00:38:24,140
are<font color="#CCCCCC"> a few more places where it's used so</font>

823
00:38:20,779 --> 00:38:27,890
maybe<font color="#E5E5E5"> maybe yeah oh sorry the question</font>

824
00:38:24,140 --> 00:38:29,089
was<font color="#E5E5E5"> I I showed how to abuse for each as</font>

825
00:38:27,890 --> 00:38:30,650
an if statement and<font color="#E5E5E5"> the question was</font>

826
00:38:29,089 --> 00:38:32,779
whether maybe there should be<font color="#CCCCCC"> an</font>

827
00:38:30,650 --> 00:38:41,000
<font color="#CCCCCC">actually statement in the table in</font>

828
00:38:32,779 --> 00:38:45,619
<font color="#CCCCCC">foreign language</font><font color="#E5E5E5"> or for textual</font>

829
00:38:41,000 --> 00:38:47,180
conditional parsing yeah yeah I don't

830
00:38:45,619 --> 00:38:49,099
<font color="#CCCCCC">think that would know that that's very</font>

831
00:38:47,180 --> 00:38:51,520
far away from from<font color="#E5E5E5"> the kind of thing</font>

832
00:38:49,099 --> 00:38:51,520
that<font color="#E5E5E5"> I don't</font>

833
00:38:54,770 --> 00:39:00,449
[Applause]

