1
00:00:05,230 --> 00:00:10,430
the last talk for<font color="#E5E5E5"> today and</font>

2
00:00:07,960 --> 00:00:12,379
<font color="#E5E5E5">unfortunately it means we are coming</font>

3
00:00:10,430 --> 00:00:15,469
toward<font color="#E5E5E5"> ends</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> first M so how many of</font>

4
00:00:12,379 --> 00:00:18,470
<font color="#E5E5E5">you</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> been to post mpg day which</font>

5
00:00:15,469 --> 00:00:20,660
happened<font color="#E5E5E5"> on Friday awesome so if you</font>

6
00:00:18,470 --> 00:00:22,520
<font color="#E5E5E5">haven't heard before</font><font color="#CCCCCC"> we every year just</font>

7
00:00:20,660 --> 00:00:25,400
before<font color="#CCCCCC"> first time the organized post mpg</font>

8
00:00:22,520 --> 00:00:28,220
day one day for<font color="#E5E5E5"> Postgres if this is not</font>

9
00:00:25,400 --> 00:00:31,729
<font color="#E5E5E5">enough for you and then just just just</font>

10
00:00:28,220 --> 00:00:32,930
just visit<font color="#CCCCCC"> full time</font><font color="#E5E5E5"> TG day dot org for</font>

11
00:00:31,730 --> 00:00:36,680
<font color="#E5E5E5">more details so we</font><font color="#CCCCCC"> will be here again</font>

12
00:00:32,930 --> 00:00:39,860
<font color="#E5E5E5">next year so the final of talk of today</font>

13
00:00:36,680 --> 00:00:52,280
<font color="#E5E5E5">is from</font><font color="#CCCCCC"> Ilya one of our most famous</font>

14
00:00:39,860 --> 00:00:53,780
speakers in the community so he's<font color="#E5E5E5"> going</font>

15
00:00:52,280 --> 00:00:56,089
<font color="#E5E5E5">to speak about the latest evolution of</font>

16
00:00:53,780 --> 00:01:01,629
<font color="#E5E5E5">Linux</font><font color="#CCCCCC"> OS take explain</font><font color="#E5E5E5"> for the database</font>

17
00:00:56,089 --> 00:01:06,049
people not hackers<font color="#CCCCCC"> Thank You Darren</font>

18
00:01:01,629 --> 00:01:08,000
<font color="#E5E5E5">hello everyone</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> a last talk my</font>

19
00:01:06,049 --> 00:01:11,260
congratulations<font color="#CCCCCC"> you've pretty much</font>

20
00:01:08,000 --> 00:01:15,850
survive this<font color="#CCCCCC"> which is good sign probably</font>

21
00:01:11,260 --> 00:01:18,380
the best side that<font color="#E5E5E5"> s last talk</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to</font>

22
00:01:15,850 --> 00:01:21,710
almost<font color="#CCCCCC"> free</font><font color="#E5E5E5"> day marathon it would be</font>

23
00:01:18,380 --> 00:01:25,910
about boring<font color="#E5E5E5"> Linux things but I</font><font color="#CCCCCC"> try to</font>

24
00:01:21,710 --> 00:01:29,059
<font color="#E5E5E5">do that not that boring probably and</font>

25
00:01:25,910 --> 00:01:32,210
<font color="#E5E5E5">well the main problem with such talks</font>

26
00:01:29,060 --> 00:01:34,540
<font color="#E5E5E5">could be that you need to cover too many</font>

27
00:01:32,210 --> 00:01:38,539
things like you need to<font color="#E5E5E5"> explain how</font>

28
00:01:34,540 --> 00:01:41,210
databases works<font color="#CCCCCC"> how possible spokes for</font>

29
00:01:38,540 --> 00:01:44,960
<font color="#E5E5E5">example then how Linux works and then</font>

30
00:01:41,210 --> 00:01:48,889
how it comes together<font color="#CCCCCC"> so I try to solve</font>

31
00:01:44,960 --> 00:01:52,190
this<font color="#E5E5E5"> not easy task</font>

32
00:01:48,890 --> 00:01:54,950
let's go<font color="#E5E5E5"> so why was talk first of all</font>

33
00:01:52,190 --> 00:01:58,310
Linux is quite important<font color="#CCCCCC"> for the</font>

34
00:01:54,950 --> 00:02:01,909
databases<font color="#E5E5E5"> I would say today is</font><font color="#CCCCCC"> actually</font>

35
00:01:58,310 --> 00:02:05,390
<font color="#E5E5E5">the default operating system for</font>

36
00:02:01,909 --> 00:02:08,840
database use a long time<font color="#E5E5E5"> it was not like</font>

37
00:02:05,390 --> 00:02:11,780
that<font color="#E5E5E5"> Solaris</font><font color="#CCCCCC"> which Peaks</font><font color="#E5E5E5"> sometimes so</font>

38
00:02:08,840 --> 00:02:16,310
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> many operating systems are used</font>

39
00:02:11,780 --> 00:02:18,209
for databases now actually like it works

40
00:02:16,310 --> 00:02:20,760
usually<font color="#E5E5E5"> an open source war</font>

41
00:02:18,209 --> 00:02:23,310
many even commercial database companies

42
00:02:20,760 --> 00:02:25,040
investing in<font color="#CCCCCC"> Linux to achieve the better</font>

43
00:02:23,310 --> 00:02:29,390
performance<font color="#E5E5E5"> for their database and</font>

44
00:02:25,040 --> 00:02:32,840
<font color="#E5E5E5">Postgres regret to say may before</font>

45
00:02:29,390 --> 00:02:36,690
<font color="#CCCCCC">FreeBSD project of from OpenBSD project</font>

46
00:02:32,840 --> 00:02:39,900
<font color="#CCCCCC">now somehow</font><font color="#E5E5E5"> aimed just to improve</font>

47
00:02:36,690 --> 00:02:42,690
performance<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> not because those</font>

48
00:02:39,900 --> 00:02:47,549
operating system are worse but because

49
00:02:42,690 --> 00:02:50,790
well<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> is what</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> want to run</font>

50
00:02:47,549 --> 00:02:54,060
prosperous<font color="#E5E5E5"> and then the central thing</font>

51
00:02:50,790 --> 00:02:58,078
for database workload is fast<font color="#CCCCCC"> IO because</font>

52
00:02:54,060 --> 00:03:01,560
<font color="#E5E5E5">you know sometimes we run into</font><font color="#CCCCCC"> cpu</font>

53
00:02:58,079 --> 00:03:04,889
problems<font color="#E5E5E5"> sometimes we run</font><font color="#CCCCCC"> into this and</font>

54
00:03:01,560 --> 00:03:07,470
<font color="#E5E5E5">that but well if we have intensive</font>

55
00:03:04,889 --> 00:03:12,109
workloads<font color="#CCCCCC"> I am most likely a common</font>

56
00:03:07,470 --> 00:03:14,700
problem which we need<font color="#CCCCCC"> to fight with</font><font color="#E5E5E5"> well</font>

57
00:03:12,109 --> 00:03:17,220
another<font color="#E5E5E5"> problem is then you try to</font>

58
00:03:14,700 --> 00:03:20,190
figure<font color="#E5E5E5"> out what to do with Linux and it</font>

59
00:03:17,220 --> 00:03:23,239
<font color="#E5E5E5">syas tech to improve your</font><font color="#CCCCCC"> PostgreSQL</font><font color="#E5E5E5"> my</font>

60
00:03:20,190 --> 00:03:27,919
sequel performance for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> is that</font>

61
00:03:23,239 --> 00:03:32,819
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can find some posts on linux network</font>

62
00:03:27,919 --> 00:03:35,370
<font color="#E5E5E5">some emails into some mailing lists like</font>

63
00:03:32,819 --> 00:03:37,948
<font color="#E5E5E5">posters hackers or kernel mailing lists</font>

64
00:03:35,370 --> 00:03:41,959
<font color="#E5E5E5">and all the information you can</font><font color="#CCCCCC"> find</font>

65
00:03:37,949 --> 00:03:47,220
there is actually made by developers and

66
00:03:41,959 --> 00:03:48,840
the language like they use requires a

67
00:03:47,220 --> 00:03:51,599
lot of<font color="#CCCCCC"> knowledge and it's written</font>

68
00:03:48,840 --> 00:03:55,109
basically<font color="#E5E5E5"> for kernel developers so not</font>

69
00:03:51,599 --> 00:03:59,119
<font color="#E5E5E5">for</font><font color="#CCCCCC"> debase and that task I</font><font color="#E5E5E5"> tried to</font>

70
00:03:55,109 --> 00:04:02,040
solve I<font color="#E5E5E5"> tried to get some clue in which</font>

71
00:03:59,120 --> 00:04:05,280
direction<font color="#E5E5E5"> you need to go for</font><font color="#CCCCCC"> a Google</font>

72
00:04:02,040 --> 00:04:09,000
for to dig for<font color="#E5E5E5"> information</font><font color="#CCCCCC"> and another</font>

73
00:04:05,280 --> 00:04:12,599
problem<font color="#E5E5E5"> is actually that Linux</font><font color="#CCCCCC"> iOS Tech</font>

74
00:04:09,000 --> 00:04:15,780
recently redeveloped quite intensively

75
00:04:12,599 --> 00:04:17,639
<font color="#E5E5E5">because for a long time it was really</font>

76
00:04:15,780 --> 00:04:21,329
lots of problems inside the Linux<font color="#E5E5E5"> I</font>

77
00:04:17,639 --> 00:04:24,960
<font color="#E5E5E5">stack row different</font><font color="#CCCCCC"> other problems which</font>

78
00:04:21,329 --> 00:04:27,479
kernel developers need<font color="#CCCCCC"> to solve</font><font color="#E5E5E5"> so for a</font>

79
00:04:24,960 --> 00:04:30,138
<font color="#E5E5E5">long time it</font><font color="#CCCCCC"> was like nothing happened</font>

80
00:04:27,479 --> 00:04:34,909
nothing<font color="#E5E5E5"> happened</font><font color="#CCCCCC"> and recently</font>

81
00:04:30,139 --> 00:04:38,690
during the development cycle of version

82
00:04:34,909 --> 00:04:41,479
3 and version 4 and now version 5<font color="#CCCCCC"> it's</font>

83
00:04:38,690 --> 00:04:46,849
really everything<font color="#E5E5E5"> changes and wall</font>

84
00:04:41,479 --> 00:04:50,180
systems are overhauled<font color="#E5E5E5"> etc so what we</font>

85
00:04:46,849 --> 00:04:54,110
are<font color="#CCCCCC"> talking today about very brief</font>

86
00:04:50,180 --> 00:04:58,180
introduction<font color="#CCCCCC"> especially for the first</font>

87
00:04:54,110 --> 00:05:04,819
line<font color="#E5E5E5"> how was Greece</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> disk</font><font color="#E5E5E5"> and</font>

88
00:04:58,180 --> 00:05:08,780
then slightly<font color="#E5E5E5"> historical part what was</font>

89
00:05:04,819 --> 00:05:12,259
in<font color="#E5E5E5"> Linux with IO</font><font color="#CCCCCC"> in old good</font><font color="#E5E5E5"> times</font><font color="#CCCCCC"> of</font>

90
00:05:08,780 --> 00:05:15,440
old<font color="#E5E5E5"> kernels and then brief introduction</font>

91
00:05:12,259 --> 00:05:17,389
what was new<font color="#CCCCCC"> so basically maybe you will</font>

92
00:05:15,440 --> 00:05:21,860
not<font color="#E5E5E5"> have the complete picture after this</font>

93
00:05:17,389 --> 00:05:24,530
talk but at<font color="#E5E5E5"> least you need to</font><font color="#CCCCCC"> put down</font>

94
00:05:21,860 --> 00:05:27,020
the<font color="#CCCCCC"> keywords where to find the</font>

95
00:05:24,530 --> 00:05:32,448
information<font color="#E5E5E5"> after that so a very typical</font>

96
00:05:27,020 --> 00:05:34,609
database<font color="#CCCCCC"> based on</font><font color="#E5E5E5"> these two things you</font>

97
00:05:32,449 --> 00:05:38,349
<font color="#CCCCCC">will guess that this typical database is</font>

98
00:05:34,610 --> 00:05:41,810
typical<font color="#CCCCCC"> PostgreSQL database works in</font>

99
00:05:38,349 --> 00:05:43,969
with<font color="#E5E5E5"> the kernel space with the kernel</font>

100
00:05:41,810 --> 00:05:47,509
memory<font color="#E5E5E5"> the page cache free kernel buffer</font>

101
00:05:43,969 --> 00:05:51,469
and it works with<font color="#E5E5E5"> the user space its own</font>

102
00:05:47,509 --> 00:05:55,250
<font color="#E5E5E5">shared memory segments so</font><font color="#CCCCCC"> linux</font><font color="#E5E5E5"> takes</font>

103
00:05:51,469 --> 00:05:59,090
care of<font color="#E5E5E5"> this part and database code</font>

104
00:05:55,250 --> 00:06:03,740
takes care on this part<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically</font>

105
00:05:59,090 --> 00:06:05,779
the same idea<font color="#CCCCCC"> this page model is for</font>

106
00:06:03,740 --> 00:06:07,940
many years here and that's very

107
00:06:05,779 --> 00:06:10,849
convenient then you read some

108
00:06:07,940 --> 00:06:14,800
information<font color="#CCCCCC"> from the disk</font><font color="#E5E5E5"> you just put</font>

109
00:06:10,849 --> 00:06:18,500
the<font color="#CCCCCC"> whole page in memory</font><font color="#E5E5E5"> and then if you</font>

110
00:06:14,800 --> 00:06:21,349
change if you do not change something

111
00:06:18,500 --> 00:06:25,360
<font color="#CCCCCC">it's quite easy it</font><font color="#E5E5E5"> just like modern</font>

112
00:06:21,349 --> 00:06:28,009
<font color="#E5E5E5">in-memory database you just can read</font>

113
00:06:25,360 --> 00:06:31,219
some information<font color="#CCCCCC"> return this</font>

114
00:06:28,009 --> 00:06:35,150
<font color="#E5E5E5">it's select but when it comes to updates</font>

115
00:06:31,219 --> 00:06:38,240
you can<font color="#E5E5E5"> mark some of the pages as dirty</font>

116
00:06:35,150 --> 00:06:42,529
<font color="#CCCCCC">pages and then the i/o problem starts</font>

117
00:06:38,240 --> 00:06:43,660
usually so if you<font color="#CCCCCC"> update something</font><font color="#E5E5E5"> you</font>

118
00:06:42,529 --> 00:06:47,680
need to

119
00:06:43,660 --> 00:06:49,870
right<font color="#E5E5E5"> right head log and actually at</font>

120
00:06:47,680 --> 00:06:54,070
some<font color="#E5E5E5"> point</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have your information</font>

121
00:06:49,870 --> 00:06:58,380
<font color="#E5E5E5">about your recent updates in your</font><font color="#CCCCCC"> right</font>

122
00:06:54,070 --> 00:07:03,610
ahead<font color="#E5E5E5"> log and this memory snapshot is</font>

123
00:06:58,380 --> 00:07:07,090
<font color="#E5E5E5">inconsistent</font><font color="#CCCCCC"> comparing to the disk</font><font color="#E5E5E5"> image</font>

124
00:07:03,610 --> 00:07:12,940
<font color="#E5E5E5">so from time to time you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> issue</font>

125
00:07:07,090 --> 00:07:16,570
the nightmare<font color="#CCCCCC"> of any DBA especially</font><font color="#E5E5E5"> ten</font>

126
00:07:12,940 --> 00:07:20,200
years ago the checkpoint<font color="#E5E5E5"> and all the</font>

127
00:07:16,570 --> 00:07:22,599
dirty pages<font color="#E5E5E5"> are going down to</font><font color="#CCCCCC"> the disk</font>

128
00:07:20,200 --> 00:07:26,830
<font color="#E5E5E5">and that's that are your problem you</font>

129
00:07:22,600 --> 00:07:29,770
usually hit<font color="#CCCCCC"> so basically if you had only</font>

130
00:07:26,830 --> 00:07:33,820
<font color="#CCCCCC">read</font><font color="#E5E5E5"> workload</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not that bad</font>

131
00:07:29,770 --> 00:07:37,810
then you have rights that<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> can</font>

132
00:07:33,820 --> 00:07:39,550
be a problem<font color="#CCCCCC"> for you if we're</font><font color="#E5E5E5"> talking</font>

133
00:07:37,810 --> 00:07:42,190
<font color="#CCCCCC">about data base because</font><font color="#E5E5E5"> we can talk</font>

134
00:07:39,550 --> 00:07:47,680
about full-text searchable file server

135
00:07:42,190 --> 00:07:52,020
<font color="#E5E5E5">for a database were very specific key</font>

136
00:07:47,680 --> 00:07:58,050
features<font color="#CCCCCC"> for its workload shared memory</font>

137
00:07:52,020 --> 00:08:02,020
today<font color="#CCCCCC"> well could be</font><font color="#E5E5E5"> defined with the</font>

138
00:07:58,050 --> 00:08:05,110
<font color="#CCCCCC">prices of</font><font color="#E5E5E5"> RAM and then I started to</font>

139
00:08:02,020 --> 00:08:08,409
perform<font color="#E5E5E5"> talks about how to turn Linux</font>

140
00:08:05,110 --> 00:08:11,680
for<font color="#CCCCCC"> Posterous I used to say well now 32</font>

141
00:08:08,410 --> 00:08:14,260
gigs of memory<font color="#CCCCCC"> cheap some people</font>

142
00:08:11,680 --> 00:08:17,830
<font color="#CCCCCC">starting to laugh because it was quite</font>

143
00:08:14,260 --> 00:08:20,020
expensive that time<font color="#CCCCCC"> now</font><font color="#E5E5E5"> actually I would</font>

144
00:08:17,830 --> 00:08:23,680
say<font color="#E5E5E5"> that one terabyte of memory is not</font>

145
00:08:20,020 --> 00:08:26,530
that<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> so basically you can</font><font color="#E5E5E5"> have</font>

146
00:08:23,680 --> 00:08:30,400
<font color="#E5E5E5">a lot of memory on your database server</font>

147
00:08:26,530 --> 00:08:34,030
<font color="#E5E5E5">and you need to use specific settings</font>

148
00:08:30,400 --> 00:08:35,520
and well<font color="#E5E5E5"> Linux and database your</font>

149
00:08:34,030 --> 00:08:38,559
database your favorite database

150
00:08:35,520 --> 00:08:41,978
<font color="#CCCCCC">Possible's I hope should</font><font color="#E5E5E5"> adopt</font><font color="#CCCCCC"> two to</font>

151
00:08:38,559 --> 00:08:44,939
that<font color="#CCCCCC"> so it can</font><font color="#E5E5E5"> be really a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> data</font>

152
00:08:41,979 --> 00:08:48,640
and then you synchronize in those pages

153
00:08:44,940 --> 00:08:49,540
<font color="#CCCCCC">this huge amount of data</font><font color="#E5E5E5"> travels down</font>

154
00:08:48,640 --> 00:08:52,990
and up

155
00:08:49,540 --> 00:08:56,319
so basically<font color="#E5E5E5"> cures they are your</font>

156
00:08:52,990 --> 00:08:59,620
problems<font color="#CCCCCC"> besides that</font>

157
00:08:56,320 --> 00:09:03,700
different things with<font color="#E5E5E5"> IO which can be</font>

158
00:08:59,620 --> 00:09:06,880
not that bad like checkpoint spikes<font color="#CCCCCC"> but</font>

159
00:09:03,700 --> 00:09:10,060
well they can be still troublesome<font color="#CCCCCC"> like</font>

160
00:09:06,880 --> 00:09:12,820
<font color="#E5E5E5">right</font><font color="#CCCCCC"> headlock should be written</font><font color="#E5E5E5"> quite</font>

161
00:09:10,060 --> 00:09:15,640
good<font color="#E5E5E5"> that have some limitations on</font>

162
00:09:12,820 --> 00:09:19,600
copy-on-write<font color="#E5E5E5"> file system sometimes and</font>

163
00:09:15,640 --> 00:09:22,180
well pretty much every point of this

164
00:09:19,600 --> 00:09:25,390
<font color="#E5E5E5">ayah stack should be optimized for</font><font color="#CCCCCC"> that</font>

165
00:09:22,180 --> 00:09:31,229
<font color="#E5E5E5">exactly type of workload then we put</font>

166
00:09:25,390 --> 00:09:35,199
lots of<font color="#E5E5E5"> dirty pages down to the</font><font color="#CCCCCC"> disks</font>

167
00:09:31,230 --> 00:09:38,470
<font color="#CCCCCC">what generates most of our</font><font color="#E5E5E5"> problems in</font>

168
00:09:35,200 --> 00:09:42,460
<font color="#E5E5E5">Postgres as I said this patronization</font>

169
00:09:38,470 --> 00:09:44,590
<font color="#CCCCCC">when we need</font><font color="#E5E5E5"> to write a lot</font><font color="#CCCCCC"> besides of</font>

170
00:09:42,460 --> 00:09:48,040
this<font color="#CCCCCC"> outer welcome can be sometimes</font>

171
00:09:44,590 --> 00:09:50,400
troublesome but well it it depends<font color="#E5E5E5"> of</font>

172
00:09:48,040 --> 00:09:53,439
exactly how your workload<font color="#E5E5E5"> works</font>

173
00:09:50,400 --> 00:09:56,939
sometimes<font color="#CCCCCC"> cash refill can</font><font color="#E5E5E5"> be bad but</font>

174
00:09:53,440 --> 00:10:01,750
<font color="#CCCCCC">well today many of you I'm sure using</font>

175
00:09:56,940 --> 00:10:04,810
SSDs SSD disks which is much better<font color="#CCCCCC"> and</font>

176
00:10:01,750 --> 00:10:09,460
sometimes<font color="#CCCCCC"> you can have</font><font color="#E5E5E5"> lots of problems</font>

177
00:10:04,810 --> 00:10:12,369
<font color="#CCCCCC">with</font><font color="#E5E5E5"> normal</font><font color="#CCCCCC"> phosphorus workers with</font>

178
00:10:09,460 --> 00:10:14,700
their<font color="#CCCCCC"> ion</font><font color="#E5E5E5"> but this is out of scope of</font>

179
00:10:12,370 --> 00:10:18,580
this talk<font color="#E5E5E5"> and basically I can say</font><font color="#CCCCCC"> then</font>

180
00:10:14,700 --> 00:10:20,530
your ordinary possible scale processes

181
00:10:18,580 --> 00:10:22,720
performing some IO operations

182
00:10:20,530 --> 00:10:25,449
<font color="#CCCCCC">that's generally</font><font color="#E5E5E5"> bet and you need to</font>

183
00:10:22,720 --> 00:10:28,810
<font color="#E5E5E5">avoid that</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> those processes are not</font>

184
00:10:25,450 --> 00:10:32,290
designed<font color="#CCCCCC"> to make checkpoints for example</font>

185
00:10:28,810 --> 00:10:34,030
if they try<font color="#E5E5E5"> to dump the dirty pages to</font>

186
00:10:32,290 --> 00:10:37,540
the disk<font color="#E5E5E5"> that means that actually</font>

187
00:10:34,030 --> 00:10:39,310
<font color="#E5E5E5">something is quite wrong in your</font>

188
00:10:37,540 --> 00:10:44,260
database setup that's an emergency

189
00:10:39,310 --> 00:10:49,180
<font color="#CCCCCC">measure it's not like</font><font color="#E5E5E5"> normal process</font><font color="#CCCCCC"> so</font>

190
00:10:44,260 --> 00:10:52,000
for<font color="#CCCCCC"> a long time for databases</font><font color="#E5E5E5"> the huge</font>

191
00:10:49,180 --> 00:10:55,329
problem was how to maximize the

192
00:10:52,000 --> 00:10:58,540
throughput<font color="#CCCCCC"> this word fruit</font><font color="#E5E5E5"> boot was</font>

193
00:10:55,330 --> 00:11:01,650
quite common for<font color="#E5E5E5"> all talks about</font>

194
00:10:58,540 --> 00:11:04,630
database performance<font color="#CCCCCC"> in terms of</font><font color="#E5E5E5"> i/o and</font>

195
00:11:01,650 --> 00:11:06,370
well then you're<font color="#E5E5E5"> talking about</font>

196
00:11:04,630 --> 00:11:08,050
throughput<font color="#E5E5E5"> from the user space from</font>

197
00:11:06,370 --> 00:11:12,820
database<font color="#CCCCCC"> to the</font>

198
00:11:08,050 --> 00:11:17,620
every part of this stack could<font color="#CCCCCC"> be</font>

199
00:11:12,820 --> 00:11:22,000
involved<font color="#CCCCCC"> and most likely we were talking</font>

200
00:11:17,620 --> 00:11:23,050
<font color="#E5E5E5">about</font><font color="#CCCCCC"> frou put because</font><font color="#E5E5E5"> this part of the</font>

201
00:11:22,000 --> 00:11:27,030
<font color="#CCCCCC">stair steak</font>

202
00:11:23,050 --> 00:11:30,819
well of the stack was quite vulnerable

203
00:11:27,030 --> 00:11:35,860
<font color="#CCCCCC">the disk was slow so because the</font><font color="#E5E5E5"> disk</font>

204
00:11:30,820 --> 00:11:41,110
was<font color="#E5E5E5"> discs were quite slow</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of words</font>

205
00:11:35,860 --> 00:11:43,870
and<font color="#E5E5E5"> time of developers of</font><font color="#CCCCCC"> Linux kernel</font>

206
00:11:41,110 --> 00:11:48,670
of<font color="#CCCCCC"> Postgres were actually concentrated</font>

207
00:11:43,870 --> 00:11:53,710
around<font color="#E5E5E5"> how to maximize throughput in the</font>

208
00:11:48,670 --> 00:11:55,689
rest of the this stack because latency

209
00:11:53,710 --> 00:11:58,510
of<font color="#E5E5E5"> the disk was quite high</font><font color="#CCCCCC"> we need to</font>

210
00:11:55,690 --> 00:12:02,620
move the heads on the disk and so on

211
00:11:58,510 --> 00:12:05,590
<font color="#E5E5E5">which could not be improved</font><font color="#CCCCCC"> and most</font>

212
00:12:02,620 --> 00:12:10,260
<font color="#E5E5E5">people were looking on these not on</font>

213
00:12:05,590 --> 00:12:14,680
these but technology<font color="#E5E5E5"> actually don't stay</font>

214
00:12:10,260 --> 00:12:20,020
in one<font color="#CCCCCC"> place</font><font color="#E5E5E5"> and some evolution actually</font>

215
00:12:14,680 --> 00:12:22,959
<font color="#CCCCCC">goes on and the station change why I</font>

216
00:12:20,020 --> 00:12:27,670
actually<font color="#E5E5E5"> concentrate on throughput and</font>

217
00:12:22,960 --> 00:12:31,000
latency<font color="#CCCCCC"> if we have like so complicated</font>

218
00:12:27,670 --> 00:12:35,770
<font color="#CCCCCC">ayuh stack it's actually</font><font color="#E5E5E5"> sometimes</font>

219
00:12:31,000 --> 00:12:39,070
easier to maximize throughput<font color="#E5E5E5"> like using</font>

220
00:12:35,770 --> 00:12:40,930
parallelism<font color="#E5E5E5"> where we can the typical</font>

221
00:12:39,070 --> 00:12:45,390
example of this

222
00:12:40,930 --> 00:12:48,699
well not correctly parallelism but some

223
00:12:45,390 --> 00:12:51,760
helper process was like then possibly

224
00:12:48,700 --> 00:12:54,430
<font color="#E5E5E5">SQL check pointer cannot manage of the</font>

225
00:12:51,760 --> 00:12:58,089
<font color="#CCCCCC">check points</font><font color="#E5E5E5"> the dumping of all those</font>

226
00:12:54,430 --> 00:13:01,390
dirty pages<font color="#CCCCCC"> post Brusco</font><font color="#E5E5E5"> people come up</font>

227
00:12:58,089 --> 00:13:03,040
<font color="#E5E5E5">and invented</font><font color="#CCCCCC"> the background writer</font>

228
00:13:01,390 --> 00:13:05,610
so between<font color="#E5E5E5"> checkpoints we can use</font>

229
00:13:03,040 --> 00:13:09,459
background<font color="#E5E5E5"> Frater to help check pointer</font>

230
00:13:05,610 --> 00:13:11,890
<font color="#CCCCCC">that's a typical example of maximizing</font>

231
00:13:09,460 --> 00:13:15,490
throughput<font color="#E5E5E5"> because we could not minimize</font>

232
00:13:11,890 --> 00:13:17,939
a lot and say<font color="#CCCCCC"> anymore because yeah</font>

233
00:13:15,490 --> 00:13:21,630
<font color="#E5E5E5">minimizing what and see is quite tricky</font>

234
00:13:17,940 --> 00:13:27,140
but now the situation changed<font color="#CCCCCC"> and now we</font>

235
00:13:21,630 --> 00:13:33,540
have<font color="#E5E5E5"> SSDs which probably do not make the</font>

236
00:13:27,140 --> 00:13:37,260
<font color="#CCCCCC">DBA job</font><font color="#E5E5E5"> obsolete but they can actually</font>

237
00:13:33,540 --> 00:13:41,250
reduce this<font color="#E5E5E5"> a lot and say component in</font>

238
00:13:37,260 --> 00:13:47,210
the<font color="#CCCCCC"> AIA stack and</font><font color="#E5E5E5"> the wall system need</font>

239
00:13:41,250 --> 00:13:52,080
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be adopted for this modern situation</font>

240
00:13:47,210 --> 00:13:57,390
so because of high latency<font color="#E5E5E5"> of rotating</font>

241
00:13:52,080 --> 00:13:59,310
<font color="#E5E5E5">disk that's some historical part</font><font color="#CCCCCC"> there</font>

242
00:13:57,390 --> 00:14:02,250
<font color="#CCCCCC">were</font><font color="#E5E5E5"> lots of</font><font color="#CCCCCC"> report how to improve the</font>

243
00:13:59,310 --> 00:14:05,430
<font color="#CCCCCC">performance of this stack in terms of</font>

244
00:14:02,250 --> 00:14:09,410
throughput<font color="#CCCCCC"> and you know probably all</font>

245
00:14:05,430 --> 00:14:14,310
<font color="#E5E5E5">these recipes like you need to</font><font color="#CCCCCC"> turn VM</font>

246
00:14:09,410 --> 00:14:18,810
<font color="#CCCCCC">just the ratio and</font><font color="#E5E5E5"> those things</font><font color="#CCCCCC"> that was</font>

247
00:14:14,310 --> 00:14:21,530
the times of rotating<font color="#E5E5E5"> disks as well as</font>

248
00:14:18,810 --> 00:14:28,739
better effect<font color="#E5E5E5"> cache and things like this</font>

249
00:14:21,530 --> 00:14:31,860
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is like the DBA</font><font color="#CCCCCC"> task to turn</font>

250
00:14:28,740 --> 00:14:34,320
those parameters<font color="#CCCCCC"> and so on but</font><font color="#E5E5E5"> inside</font>

251
00:14:31,860 --> 00:14:37,290
the Linux kernel<font color="#E5E5E5"> there are lots of</font>

252
00:14:34,320 --> 00:14:41,010
internal optimizations<font color="#CCCCCC"> like that we're</font>

253
00:14:37,290 --> 00:14:45,839
using SSDs but the methods inside the

254
00:14:41,010 --> 00:14:47,970
Linux kernel<font color="#E5E5E5"> are designed to move the</font>

255
00:14:45,840 --> 00:14:51,510
heads on the disk efficiently<font color="#E5E5E5"> but this</font>

256
00:14:47,970 --> 00:14:55,950
is<font color="#CCCCCC"> d has no heads</font><font color="#E5E5E5"> basically and it is</font>

257
00:14:51,510 --> 00:15:03,680
much more parallel aware thing<font color="#E5E5E5"> comparing</font>

258
00:14:55,950 --> 00:15:06,930
<font color="#E5E5E5">to even disk array so this</font><font color="#CCCCCC"> is ania stack</font>

259
00:15:03,680 --> 00:15:08,729
<font color="#CCCCCC">we can use direct i/o we can use page</font>

260
00:15:06,930 --> 00:15:11,550
cache in terms of possible<font color="#CCCCCC"> use page</font>

261
00:15:08,730 --> 00:15:16,290
cache but we need to go through all<font color="#CCCCCC"> this</font>

262
00:15:11,550 --> 00:15:18,660
stack<font color="#E5E5E5"> well</font><font color="#CCCCCC"> power system that's nothing</font>

263
00:15:16,290 --> 00:15:22,230
interesting here probably<font color="#E5E5E5"> but there are</font>

264
00:15:18,660 --> 00:15:25,050
lots of benchmarks about this<font color="#E5E5E5"> worth</font>

265
00:15:22,230 --> 00:15:26,580
<font color="#E5E5E5">several approaches how to improve file</font>

266
00:15:25,050 --> 00:15:29,410
system performance for<font color="#CCCCCC"> example do not</font>

267
00:15:26,580 --> 00:15:33,699
<font color="#E5E5E5">use write barrier</font><font color="#CCCCCC"> on</font>

268
00:15:29,410 --> 00:15:37,809
<font color="#CCCCCC">x4 but we actually look deeper into</font><font color="#E5E5E5"> the</font>

269
00:15:33,699 --> 00:15:42,368
<font color="#E5E5E5">kernel in the kernel</font><font color="#CCCCCC"> various</font><font color="#E5E5E5"> circled by</font>

270
00:15:37,809 --> 00:15:45,549
<font color="#CCCCCC">a layer or block input/output</font><font color="#E5E5E5"> where and</font>

271
00:15:42,369 --> 00:15:48,639
the<font color="#E5E5E5"> task of this part of the kernel is</font>

272
00:15:45,549 --> 00:15:52,598
actually to form input/output<font color="#E5E5E5"> requests</font>

273
00:15:48,639 --> 00:15:56,619
<font color="#E5E5E5">so this is basically by</font><font color="#CCCCCC"> let's see</font>

274
00:15:52,599 --> 00:15:59,859
structure<font color="#CCCCCC"> and we take those blocks like</font>

275
00:15:56,619 --> 00:16:03,699
like in database practically and we form

276
00:15:59,859 --> 00:16:08,199
some vector of those blocks to put<font color="#E5E5E5"> it</font>

277
00:16:03,699 --> 00:16:12,639
finally to the<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> the interesting</font>

278
00:16:08,199 --> 00:16:16,049
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is that we operate</font><font color="#E5E5E5"> pages</font>

279
00:16:12,639 --> 00:16:19,389
inside our database and in user space

280
00:16:16,049 --> 00:16:22,329
<font color="#CCCCCC">and on the disk on the old disk we</font>

281
00:16:19,389 --> 00:16:28,089
operating with cylinders sectors and

282
00:16:22,329 --> 00:16:31,569
those rotating things heritage which was

283
00:16:28,089 --> 00:16:36,239
quite obvious than people were program

284
00:16:31,569 --> 00:16:40,029
and<font color="#CCCCCC"> was SD driver</font><font color="#E5E5E5"> skies a and so on and</font>

285
00:16:36,239 --> 00:16:42,549
this part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Linux tire stack was</font>

286
00:16:40,029 --> 00:16:44,919
specially designed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make some smooth</font>

287
00:16:42,549 --> 00:16:49,529
and efficient transition from the<font color="#E5E5E5"> pages</font>

288
00:16:44,919 --> 00:16:54,659
to the cylinders sectors<font color="#E5E5E5"> and those</font>

289
00:16:49,529 --> 00:16:54,659
old-school things with<font color="#E5E5E5"> rotating disks</font>

290
00:16:55,139 --> 00:17:03,009
then we<font color="#E5E5E5"> actually form the request which</font>

291
00:16:59,019 --> 00:17:07,378
goes for I or and instructs driver<font color="#E5E5E5"> like</font>

292
00:17:03,009 --> 00:17:12,009
put this piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> data there and so on</font>

293
00:17:07,378 --> 00:17:14,829
<font color="#CCCCCC">we</font><font color="#E5E5E5"> can optimize the input and output</font><font color="#CCCCCC"> in</font>

294
00:17:12,009 --> 00:17:18,429
some way<font color="#E5E5E5"> and basically if a long time</font>

295
00:17:14,829 --> 00:17:22,750
<font color="#CCCCCC">all this optimization was about where we</font>

296
00:17:18,429 --> 00:17:26,949
store this data if we can just dump this

297
00:17:22,750 --> 00:17:30,850
data to the disk using<font color="#E5E5E5"> single movement</font>

298
00:17:26,949 --> 00:17:33,850
of the disk head<font color="#E5E5E5"> that's efficient so all</font>

299
00:17:30,850 --> 00:17:38,668
the optimization here was based to like

300
00:17:33,850 --> 00:17:40,719
merge and sort<font color="#E5E5E5"> these vectors</font><font color="#CCCCCC"> of blocks</font>

301
00:17:38,669 --> 00:17:42,639
<font color="#E5E5E5">to fit</font><font color="#CCCCCC"> two</font>

302
00:17:40,720 --> 00:17:45,610
<font color="#CCCCCC">disk</font><font color="#E5E5E5"> if they for</font><font color="#CCCCCC"> example can be stored</font>

303
00:17:42,639 --> 00:17:48,639
<font color="#E5E5E5">together</font><font color="#CCCCCC"> and that's why I emerged this</font>

304
00:17:45,610 --> 00:17:52,479
idea to have an elevator or i/o

305
00:17:48,639 --> 00:17:57,250
scheduler which can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> help with</font>

306
00:17:52,480 --> 00:17:59,320
sorting<font color="#CCCCCC"> of all those pages and putting</font>

307
00:17:57,250 --> 00:18:04,690
<font color="#E5E5E5">them to the disk</font><font color="#CCCCCC"> in most efficient</font>

308
00:17:59,320 --> 00:18:09,789
manner<font color="#CCCCCC"> before the kernel two-point-six</font>

309
00:18:04,690 --> 00:18:11,080
quite all time<font color="#CCCCCC"> there was just a</font><font color="#E5E5E5"> single</font>

310
00:18:09,789 --> 00:18:15,070
elevator<font color="#CCCCCC"> so</font><font color="#E5E5E5"> called</font>

311
00:18:11,080 --> 00:18:18,210
<font color="#CCCCCC">- elevator and well it was like many</font>

312
00:18:15,070 --> 00:18:20,649
<font color="#E5E5E5">things which wine was made himself</font>

313
00:18:18,210 --> 00:18:25,110
<font color="#CCCCCC">consider it as a perfect thing</font><font color="#E5E5E5"> very</font>

314
00:18:20,649 --> 00:18:28,570
<font color="#E5E5E5">simple and very good working but in fact</font>

315
00:18:25,110 --> 00:18:32,678
nobody<font color="#E5E5E5"> just cares if it works so it's</font>

316
00:18:28,570 --> 00:18:35,110
<font color="#E5E5E5">just it does something if it does</font><font color="#CCCCCC"> that</font>

317
00:18:32,679 --> 00:18:37,090
efficient<font color="#E5E5E5"> nobody knows we have disk</font>

318
00:18:35,110 --> 00:18:41,590
latency<font color="#E5E5E5"> and well to optimize disk</font>

319
00:18:37,090 --> 00:18:46,330
latency<font color="#E5E5E5"> it's difficult physical</font>

320
00:18:41,590 --> 00:18:49,000
limitation<font color="#E5E5E5"> so we just use something</font><font color="#CCCCCC"> and</font>

321
00:18:46,330 --> 00:18:52,870
this type of elevator had lots of

322
00:18:49,000 --> 00:18:55,679
problems<font color="#E5E5E5"> mostly</font><font color="#CCCCCC"> because it doesn't fit</font>

323
00:18:52,870 --> 00:19:00,570
<font color="#E5E5E5">the job even for rotating disks but for</font>

324
00:18:55,679 --> 00:19:01,779
modern<font color="#CCCCCC"> disks</font><font color="#E5E5E5"> that simply wouldn't</font><font color="#CCCCCC"> work</font>

325
00:19:00,570 --> 00:19:04,720
<font color="#CCCCCC">starvation</font>

326
00:19:01,779 --> 00:19:06,820
then you<font color="#E5E5E5"> rule then</font><font color="#CCCCCC"> you write some</font>

327
00:19:04,720 --> 00:19:08,830
<font color="#CCCCCC">information you need to read information</font>

328
00:19:06,820 --> 00:19:12,240
<font color="#E5E5E5">from another part of the disk and cetera</font>

329
00:19:08,830 --> 00:19:19,509
et cetera<font color="#CCCCCC"> so</font><font color="#E5E5E5"> lots of problems between</font>

330
00:19:12,240 --> 00:19:20,559
kernel<font color="#E5E5E5"> 2.6 and early versions of third</font>

331
00:19:19,509 --> 00:19:22,960
kernel

332
00:19:20,559 --> 00:19:27,240
some people come<font color="#E5E5E5"> up and invented some</font>

333
00:19:22,960 --> 00:19:29,679
different schedules but actually inside

334
00:19:27,240 --> 00:19:32,200
<font color="#CCCCCC">the logic of those schedules there's</font>

335
00:19:29,679 --> 00:19:36,009
still pretty much some improvements over

336
00:19:32,200 --> 00:19:39,389
the<font color="#E5E5E5"> old - elevator</font><font color="#CCCCCC"> the first of them</font>

337
00:19:36,009 --> 00:19:43,299
<font color="#E5E5E5">more Universal and more typical was like</font>

338
00:19:39,389 --> 00:19:47,289
complete fair queuing the idea behind

339
00:19:43,299 --> 00:19:50,840
this type of elevator is like you<font color="#E5E5E5"> have</font>

340
00:19:47,289 --> 00:19:54,500
processes and for<font color="#E5E5E5"> each process you</font>

341
00:19:50,840 --> 00:19:59,990
provides<font color="#E5E5E5"> input output</font><font color="#CCCCCC"> queue which</font>

342
00:19:54,500 --> 00:19:59,990
basically provides<font color="#E5E5E5"> fair access to</font>

343
00:20:00,320 --> 00:20:07,320
<font color="#CCCCCC">input/output but when we have</font><font color="#E5E5E5"> Postgres</font>

344
00:20:04,620 --> 00:20:10,860
just imagine how efficient it would be

345
00:20:07,320 --> 00:20:13,470
for example<font color="#CCCCCC"> you have some connection to</font>

346
00:20:10,860 --> 00:20:18,120
<font color="#E5E5E5">the database</font><font color="#CCCCCC"> you never have some</font><font color="#E5E5E5"> percent</font>

347
00:20:13,470 --> 00:20:20,970
<font color="#E5E5E5">of i/o when we have also work on process</font>

348
00:20:18,120 --> 00:20:24,179
it basically have the<font color="#CCCCCC"> same access to</font><font color="#E5E5E5"> the</font>

349
00:20:20,970 --> 00:20:26,880
<font color="#CCCCCC">ayah then we have check pointer and it</font>

350
00:20:24,180 --> 00:20:29,010
has the same access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the ayah this is</font>

351
00:20:26,880 --> 00:20:31,440
<font color="#E5E5E5">pretty much not</font><font color="#CCCCCC"> very efficient because</font>

352
00:20:29,010 --> 00:20:34,320
for<font color="#E5E5E5"> cheap pointer we need a lot</font><font color="#CCCCCC"> of i/o</font>

353
00:20:31,440 --> 00:20:36,360
<font color="#E5E5E5">for a normal possible</font><font color="#CCCCCC"> scope process</font>

354
00:20:34,320 --> 00:20:38,909
which performs on select we probably do

355
00:20:36,360 --> 00:20:43,370
not need any ayah<font color="#E5E5E5"> at all maybe it just</font>

356
00:20:38,910 --> 00:20:47,220
takes<font color="#CCCCCC"> the data from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cache or just</font>

357
00:20:43,370 --> 00:20:50,219
handles the connection<font color="#E5E5E5"> of the DBA</font><font color="#CCCCCC"> which</font>

358
00:20:47,220 --> 00:20:53,340
is idle<font color="#E5E5E5"> so we don't know so for a</font>

359
00:20:50,220 --> 00:20:56,250
specific<font color="#E5E5E5"> workload like database this</font>

360
00:20:53,340 --> 00:20:58,470
scanner was always not that<font color="#CCCCCC"> Universal</font>

361
00:20:56,250 --> 00:21:01,260
not that good<font color="#CCCCCC"> maybe for</font><font color="#E5E5E5"> desktop</font>

362
00:20:58,470 --> 00:21:03,840
<font color="#CCCCCC">environment it</font><font color="#E5E5E5"> was better then emerged</font>

363
00:21:01,260 --> 00:21:07,670
the<font color="#E5E5E5"> deadline scheduler dead when</font>

364
00:21:03,840 --> 00:21:10,919
scheduler was like some<font color="#E5E5E5"> sort of</font>

365
00:21:07,670 --> 00:21:14,100
improving the the idea for<font color="#E5E5E5"> improving the</font>

366
00:21:10,920 --> 00:21:17,220
situation<font color="#CCCCCC"> basically it has two types</font><font color="#E5E5E5"> of</font>

367
00:21:14,100 --> 00:21:21,060
cues like<font color="#E5E5E5"> queue for reading queue for</font>

368
00:21:17,220 --> 00:21:25,130
writing and it just starts to read or<font color="#CCCCCC"> to</font>

369
00:21:21,060 --> 00:21:29,909
<font color="#CCCCCC">write</font><font color="#E5E5E5"> but all the requests are actually</font>

370
00:21:25,130 --> 00:21:30,750
<font color="#E5E5E5">take it with</font><font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> and that</font>

371
00:21:29,910 --> 00:21:34,830
<font color="#CCCCCC">timestamp</font>

372
00:21:30,750 --> 00:21:38,460
allows kernel to figure out if this

373
00:21:34,830 --> 00:21:40,830
request timeout it or not and if it is

374
00:21:38,460 --> 00:21:43,500
timeout it like we have<font color="#CCCCCC"> huge</font><font color="#E5E5E5"> amount of</font>

375
00:21:40,830 --> 00:21:47,460
information to<font color="#E5E5E5"> write it takes a long</font>

376
00:21:43,500 --> 00:21:52,350
time we hit<font color="#E5E5E5"> the timeout then the kernel</font>

377
00:21:47,460 --> 00:21:55,190
changes the priority<font color="#CCCCCC"> of this quill</font><font color="#E5E5E5"> so</font>

378
00:21:52,350 --> 00:21:58,230
basically if we<font color="#CCCCCC"> have a lot of</font>

379
00:21:55,190 --> 00:22:02,250
<font color="#CCCCCC">input/output finally it would rise in</font>

380
00:21:58,230 --> 00:22:04,169
priority and work more efficiently<font color="#E5E5E5"> it</font>

381
00:22:02,250 --> 00:22:07,109
did it actually<font color="#E5E5E5"> forward</font>

382
00:22:04,169 --> 00:22:10,830
<font color="#E5E5E5">disc with normal rate controllers it was</font>

383
00:22:07,109 --> 00:22:13,529
much better<font color="#E5E5E5"> than cfq but still not</font>

384
00:22:10,830 --> 00:22:16,739
perfect<font color="#E5E5E5"> and well especially not perfect</font>

385
00:22:13,529 --> 00:22:22,429
twice as this and some<font color="#CCCCCC"> people come up</font>

386
00:22:16,739 --> 00:22:26,389
<font color="#E5E5E5">with idea of no op or none scheduled for</font>

387
00:22:22,429 --> 00:22:30,960
devices which allows much more parallel

388
00:22:26,389 --> 00:22:33,988
execution of<font color="#CCCCCC"> Io like disk arrays SSDs</font>

389
00:22:30,960 --> 00:22:37,889
the main<font color="#CCCCCC"> differences like a allows much</font>

390
00:22:33,989 --> 00:22:41,549
more parallelism<font color="#E5E5E5"> and this idea was like</font>

391
00:22:37,889 --> 00:22:44,549
<font color="#E5E5E5">basically this scheduler doesn't change</font>

392
00:22:41,549 --> 00:22:47,908
anything<font color="#CCCCCC"> it doesn't perform merging</font>

393
00:22:44,549 --> 00:22:51,739
sorting things<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> it just do</font>

394
00:22:47,909 --> 00:22:54,480
<font color="#CCCCCC">nothing so it's like</font><font color="#E5E5E5"> a placeholder for</font><font color="#CCCCCC"> a</font>

395
00:22:51,739 --> 00:22:58,590
scheduler<font color="#E5E5E5"> and it was turns out it was</font>

396
00:22:54,480 --> 00:23:00,960
much<font color="#E5E5E5"> more efficient for hyper local</font>

397
00:22:58,590 --> 00:23:05,730
storage<font color="#CCCCCC"> --is in</font><font color="#E5E5E5"> compare comparing to</font>

398
00:23:00,960 --> 00:23:08,399
other<font color="#CCCCCC"> two</font><font color="#E5E5E5"> and probably that point</font><font color="#CCCCCC"> or</font>

399
00:23:05,730 --> 00:23:13,730
slightly earlier many people started<font color="#E5E5E5"> to</font>

400
00:23:08,399 --> 00:23:18,238
work on real improvements of i/o stack

401
00:23:13,730 --> 00:23:22,460
and<font color="#E5E5E5"> now we actually hit some terminology</font>

402
00:23:18,239 --> 00:23:28,799
problems<font color="#CCCCCC"> because as you remember on that</font>

403
00:23:22,460 --> 00:23:31,350
<font color="#E5E5E5">diagram with stack</font><font color="#CCCCCC"> there was</font><font color="#E5E5E5"> I Oh</font>

404
00:23:28,799 --> 00:23:35,340
<font color="#E5E5E5">scatterer which was some part of the</font>

405
00:23:31,350 --> 00:23:38,248
kernel<font color="#E5E5E5"> working with</font><font color="#CCCCCC"> request layer</font><font color="#E5E5E5"> there</font>

406
00:23:35,340 --> 00:23:39,119
are lots of<font color="#CCCCCC"> discussions</font><font color="#E5E5E5"> if we need to</font>

407
00:23:38,249 --> 00:23:42,600
improve<font color="#E5E5E5"> this</font>

408
00:23:39,119 --> 00:23:45,269
but finally<font color="#CCCCCC"> Linux developers came up</font>

409
00:23:42,600 --> 00:23:48,658
with idea that<font color="#E5E5E5"> we need substitute</font>

410
00:23:45,269 --> 00:23:51,090
practically a lot of these so basically

411
00:23:48,659 --> 00:23:55,580
<font color="#E5E5E5">not</font><font color="#CCCCCC"> only substitute the wool request</font>

412
00:23:51,090 --> 00:23:58,830
wire<font color="#CCCCCC"> and add</font><font color="#E5E5E5"> some elevator here but</font>

413
00:23:55,580 --> 00:24:02,309
adopt the device driver to work with a

414
00:23:58,830 --> 00:24:09,059
new analog<font color="#E5E5E5"> of request layer and probably</font>

415
00:24:02,309 --> 00:24:14,249
change many<font color="#CCCCCC"> things here so after the new</font>

416
00:24:09,059 --> 00:24:17,360
approach emerged<font color="#CCCCCC"> we practically have a</font>

417
00:24:14,249 --> 00:24:21,680
new<font color="#CCCCCC"> input-output stack</font>

418
00:24:17,360 --> 00:24:26,479
part of this is<font color="#E5E5E5"> envy me or non-volatile</font>

419
00:24:21,680 --> 00:24:30,760
memory<font color="#CCCCCC"> driver and part of this is</font>

420
00:24:26,480 --> 00:24:35,860
<font color="#CCCCCC">so-called bulk and Q which is the</font>

421
00:24:30,760 --> 00:24:38,360
<font color="#E5E5E5">scheduler and the requests were</font>

422
00:24:35,860 --> 00:24:42,169
simultaneously and now it<font color="#CCCCCC"> actually has</font>

423
00:24:38,360 --> 00:24:45,889
<font color="#CCCCCC">some new schedulers inside</font><font color="#E5E5E5"> because of</font>

424
00:24:42,170 --> 00:24:49,100
<font color="#E5E5E5">effectiveness of this knob just the idea</font>

425
00:24:45,890 --> 00:24:53,180
was we need the iodine which is

426
00:24:49,100 --> 00:24:57,409
initially designed to support lots of

427
00:24:53,180 --> 00:25:02,570
parallelism<font color="#E5E5E5"> first this thing was</font>

428
00:24:57,410 --> 00:25:05,710
introduced in 3.13<font color="#E5E5E5"> and I think the</font>

429
00:25:02,570 --> 00:25:12,409
latest<font color="#E5E5E5"> version was merged into the</font>

430
00:25:05,710 --> 00:25:14,900
kernel 4.10 together with nvme so before

431
00:25:12,410 --> 00:25:19,070
that it was not that<font color="#E5E5E5"> efficient but you</font>

432
00:25:14,900 --> 00:25:22,970
can probably run<font color="#CCCCCC"> into it</font><font color="#E5E5E5"> and probably</font>

433
00:25:19,070 --> 00:25:27,800
<font color="#CCCCCC">use that</font><font color="#E5E5E5"> together with late third</font>

434
00:25:22,970 --> 00:25:31,010
kernels<font color="#CCCCCC"> if you use in the me</font><font color="#E5E5E5"> because in</font>

435
00:25:27,800 --> 00:25:33,790
<font color="#E5E5E5">the me it says that it's nope</font><font color="#CCCCCC"> but</font>

436
00:25:31,010 --> 00:25:38,120
<font color="#CCCCCC">basically in late third kernels it was</font>

437
00:25:33,790 --> 00:25:43,270
<font color="#CCCCCC">Envy me in spite of</font><font color="#E5E5E5"> what you can see in</font>

438
00:25:38,120 --> 00:25:48,139
<font color="#CCCCCC">your grub or whatever</font><font color="#E5E5E5"> so idea is that</font>

439
00:25:43,270 --> 00:25:51,080
<font color="#CCCCCC">scuzzy is not Pirlo</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you cannot scale</font>

440
00:25:48,140 --> 00:25:53,990
your<font color="#E5E5E5"> input-output</font><font color="#CCCCCC"> request so basically</font>

441
00:25:51,080 --> 00:25:56,990
if from user space<font color="#E5E5E5"> Possible's with have</font>

442
00:25:53,990 --> 00:26:00,530
seen in check pointer you initiate<font color="#E5E5E5"> the</font>

443
00:25:56,990 --> 00:26:05,500
<font color="#E5E5E5">write request</font><font color="#CCCCCC"> it goes straight to the</font>

444
00:26:00,530 --> 00:26:08,420
<font color="#E5E5E5">disk driver whatever you have beneath</font>

445
00:26:05,500 --> 00:26:10,670
and this is a problem<font color="#E5E5E5"> basically because</font>

446
00:26:08,420 --> 00:26:13,190
<font color="#E5E5E5">you issue</font><font color="#CCCCCC"> input-output</font><font color="#E5E5E5"> requests it</font>

447
00:26:10,670 --> 00:26:18,220
doesn't scale it basically goes through

448
00:26:13,190 --> 00:26:21,140
<font color="#CCCCCC">the hardware how to improve those things</font>

449
00:26:18,220 --> 00:26:25,220
the old<font color="#E5E5E5"> approach to elevators was like</font>

450
00:26:21,140 --> 00:26:27,410
we have a CPU<font color="#E5E5E5"> a queue and the disk</font><font color="#CCCCCC"> and</font>

451
00:26:25,220 --> 00:26:29,750
that's just<font color="#CCCCCC"> straightforward so we</font>

452
00:26:27,410 --> 00:26:35,420
<font color="#E5E5E5">basically go through</font>

453
00:26:29,750 --> 00:26:39,710
if we are busy we<font color="#CCCCCC"> are busy then at</font><font color="#E5E5E5"> some</font>

454
00:26:35,420 --> 00:26:42,620
point<font color="#E5E5E5"> there were some special</font><font color="#CCCCCC"> queues for</font>

455
00:26:39,710 --> 00:26:44,420
single process for<font color="#CCCCCC"> example which tends</font>

456
00:26:42,620 --> 00:26:47,870
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> slightly more</font><font color="#CCCCCC"> effective but still</font>

457
00:26:44,420 --> 00:26:52,550
<font color="#E5E5E5">not the game change for Vulcan queue</font>

458
00:26:47,870 --> 00:26:53,570
approach was that<font color="#CCCCCC"> it basically</font><font color="#E5E5E5"> paralyzed</font>

459
00:26:52,550 --> 00:26:57,919
<font color="#E5E5E5">the eschewing</font>

460
00:26:53,570 --> 00:27:01,970
and now<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Linux we have</font><font color="#CCCCCC"> for example CPU</font>

461
00:26:57,920 --> 00:27:04,910
on Numa node which has each<font color="#E5E5E5"> special</font>

462
00:27:01,970 --> 00:27:07,160
software query and through this software

463
00:27:04,910 --> 00:27:10,520
queue<font color="#CCCCCC"> we can actually put a lots of</font>

464
00:27:07,160 --> 00:27:13,640
input output<font color="#E5E5E5"> and in this software queue</font>

465
00:27:10,520 --> 00:27:16,460
you can<font color="#CCCCCC"> do any optimization like taking</font>

466
00:27:13,640 --> 00:27:20,660
<font color="#CCCCCC">four specific</font><font color="#E5E5E5"> processes of a specific</font>

467
00:27:16,460 --> 00:27:22,880
<font color="#E5E5E5">virtual machine like sorting merging</font>

468
00:27:20,660 --> 00:27:26,120
things like that which tends<font color="#E5E5E5"> to improve</font>

469
00:27:22,880 --> 00:27:29,390
the<font color="#E5E5E5"> performance and input and output and</font>

470
00:27:26,120 --> 00:27:33,439
then all of<font color="#E5E5E5"> those things</font><font color="#CCCCCC"> I ended up in</font>

471
00:27:29,390 --> 00:27:36,530
queue<font color="#CCCCCC"> in queues</font><font color="#E5E5E5"> on the hardware and in</font>

472
00:27:33,440 --> 00:27:39,770
case if we have an SSD<font color="#E5E5E5"> we usually have</font>

473
00:27:36,530 --> 00:27:41,990
more than one<font color="#E5E5E5"> Hardware queue and this is</font>

474
00:27:39,770 --> 00:27:45,260
much more efficient<font color="#CCCCCC"> so basically we got</font>

475
00:27:41,990 --> 00:27:47,390
the<font color="#CCCCCC"> Perl</font><font color="#E5E5E5"> ISM on the level of request</font>

476
00:27:45,260 --> 00:27:51,350
layer<font color="#E5E5E5"> that's why it's substitution of</font>

477
00:27:47,390 --> 00:27:58,730
<font color="#E5E5E5">request layer not just schedule schedule</font>

478
00:27:51,350 --> 00:28:04,310
<font color="#E5E5E5">which works aside</font><font color="#CCCCCC"> so basically then we</font>

479
00:27:58,730 --> 00:28:06,260
rebuilt the<font color="#E5E5E5"> this part of the step</font><font color="#CCCCCC"> people</font>

480
00:28:04,310 --> 00:28:09,110
<font color="#CCCCCC">start</font><font color="#E5E5E5"> to think that we</font><font color="#CCCCCC"> actually need</font><font color="#E5E5E5"> a</font>

481
00:28:06,260 --> 00:28:14,990
<font color="#E5E5E5">novice scheduler but</font><font color="#CCCCCC"> the scheduler which</font>

482
00:28:09,110 --> 00:28:19,120
can be aware of modern SSDs<font color="#CCCCCC"> currently</font>

483
00:28:14,990 --> 00:28:24,680
there are two major schedulers for

484
00:28:19,120 --> 00:28:29,330
<font color="#CCCCCC">Vulcan</font><font color="#E5E5E5"> Q and V me aware kernels newer</font>

485
00:28:24,680 --> 00:28:32,810
kernels one of them<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is more</font>

486
00:28:29,330 --> 00:28:37,040
<font color="#CCCCCC">complicated</font><font color="#E5E5E5"> and some people tend to</font>

487
00:28:32,810 --> 00:28:40,520
compare it to<font color="#CCCCCC"> see if Q is bfq or budget</font>

488
00:28:37,040 --> 00:28:43,909
<font color="#CCCCCC">fair queuing the idea is</font>

489
00:28:40,520 --> 00:28:46,220
it has a month behind<font color="#CCCCCC"> which allows to</font>

490
00:28:43,910 --> 00:28:48,650
<font color="#E5E5E5">figure out that we have of this input</font>

491
00:28:46,220 --> 00:28:54,410
<font color="#CCCCCC">and output budget for this application</font>

492
00:28:48,650 --> 00:28:58,730
for this device<font color="#E5E5E5"> and based on this budget</font>

493
00:28:54,410 --> 00:29:02,830
<font color="#E5E5E5">it actually increase or decrease their</font>

494
00:28:58,730 --> 00:29:05,210
priority for this input<font color="#E5E5E5"> output</font><font color="#CCCCCC"> I</font>

495
00:29:02,830 --> 00:29:08,210
wouldn't say it's quite efficient from

496
00:29:05,210 --> 00:29:12,560
my<font color="#CCCCCC"> observation</font><font color="#E5E5E5"> so it's complicated but</font>

497
00:29:08,210 --> 00:29:15,050
well it works<font color="#CCCCCC"> the keeper is a different</font>

498
00:29:12,560 --> 00:29:21,320
<font color="#E5E5E5">approach is just like a very simple</font>

499
00:29:15,050 --> 00:29:24,080
<font color="#E5E5E5">scheduler which tries not to mess up</font>

500
00:29:21,320 --> 00:29:26,480
with lots of mathematics<font color="#E5E5E5"> around here</font>

501
00:29:24,080 --> 00:29:30,230
with<font color="#E5E5E5"> merchants sorting and things like</font>

502
00:29:26,480 --> 00:29:32,390
<font color="#E5E5E5">that</font><font color="#CCCCCC"> whichever you prefer I have</font>

503
00:29:30,230 --> 00:29:35,720
<font color="#E5E5E5">actually no recommendation right now</font>

504
00:29:32,390 --> 00:29:38,630
<font color="#E5E5E5">because it's really</font><font color="#CCCCCC"> new thing I would</font>

505
00:29:35,720 --> 00:29:42,440
say<font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> use the default</font><font color="#E5E5E5"> with</font>

506
00:29:38,630 --> 00:29:47,150
your<font color="#E5E5E5"> current modern</font><font color="#CCCCCC"> Linux kernel most</font>

507
00:29:42,440 --> 00:29:49,280
likely<font color="#CCCCCC"> it would</font><font color="#E5E5E5"> work better so from my</font>

508
00:29:47,150 --> 00:29:53,510
experience there is no such drastical

509
00:29:49,280 --> 00:29:57,310
changes comparing<font color="#E5E5E5"> to like if you use</font>

510
00:29:53,510 --> 00:30:02,840
<font color="#CCCCCC">deadline or no bonuses</font><font color="#E5E5E5"> this so basically</font>

511
00:29:57,310 --> 00:30:06,620
not that important after<font color="#CCCCCC"> that we have</font>

512
00:30:02,840 --> 00:30:10,189
<font color="#E5E5E5">envy me driver and then sometimes we</font>

513
00:30:06,620 --> 00:30:17,560
have improved<font color="#CCCCCC"> parallels</font><font color="#E5E5E5"> has a driver for</font>

514
00:30:10,190 --> 00:30:21,320
<font color="#E5E5E5">that there is a good upgradeable which</font>

515
00:30:17,560 --> 00:30:24,770
maintains keep current diagram of a

516
00:30:21,320 --> 00:30:28,460
linen<font color="#CCCCCC"> Linux input/output stack</font><font color="#E5E5E5"> you can</font>

517
00:30:24,770 --> 00:30:32,660
take a<font color="#E5E5E5"> look and figure out much more</font>

518
00:30:28,460 --> 00:30:35,450
details when<font color="#E5E5E5"> I can put on the slide it's</font>

519
00:30:32,660 --> 00:30:39,740
basically not that up to<font color="#CCCCCC"> date about</font>

520
00:30:35,450 --> 00:30:43,520
<font color="#CCCCCC">Vulcan pew</font><font color="#E5E5E5"> but well actually it's up to</font>

521
00:30:39,740 --> 00:30:46,310
date<font color="#E5E5E5"> like for two years ago</font><font color="#CCCCCC"> one year ago</font>

522
00:30:43,520 --> 00:30:48,680
so basically it's fresh<font color="#CCCCCC"> enough to figure</font>

523
00:30:46,310 --> 00:30:53,169
<font color="#E5E5E5">out what is</font><font color="#CCCCCC"> going on and I hope the guys</font>

524
00:30:48,680 --> 00:30:53,170
will update that<font color="#E5E5E5"> soon</font>

525
00:30:54,519 --> 00:31:00,919
what is<font color="#E5E5E5"> actually in the meme envy me</font>

526
00:30:58,880 --> 00:31:04,580
it's not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a driver</font>

527
00:31:00,919 --> 00:31:07,100
it's a set of<font color="#E5E5E5"> standards for</font><font color="#CCCCCC"> input-output</font>

528
00:31:04,580 --> 00:31:09,769
drivers which<font color="#E5E5E5"> is quite good</font><font color="#CCCCCC"> currently</font>

529
00:31:07,100 --> 00:31:16,610
and well<font color="#CCCCCC"> we'll appreciate</font><font color="#E5E5E5"> that</font>

530
00:31:09,769 --> 00:31:21,110
finally major producers<font color="#E5E5E5"> did that for</font>

531
00:31:16,610 --> 00:31:24,010
Linux<font color="#CCCCCC"> it's just a driver</font><font color="#E5E5E5"> and set of</font>

532
00:31:21,110 --> 00:31:36,740
<font color="#E5E5E5">standards how other parts of the stack</font>

533
00:31:24,010 --> 00:31:38,960
<font color="#CCCCCC">interact</font><font color="#E5E5E5"> with IO scheduler for industry</font>

534
00:31:36,740 --> 00:31:42,409
now it's actually<font color="#CCCCCC"> the new standard which</font>

535
00:31:38,960 --> 00:31:45,679
is<font color="#CCCCCC"> under construction</font><font color="#E5E5E5"> so basically we</font>

536
00:31:42,409 --> 00:31:49,039
have only<font color="#E5E5E5"> Envy me currently working in</font>

537
00:31:45,679 --> 00:31:52,399
stable for local<font color="#CCCCCC"> disk if you will put</font>

538
00:31:49,039 --> 00:31:55,070
something<font color="#E5E5E5"> into PCIe that works perfectly</font>

539
00:31:52,399 --> 00:31:57,949
well fast and so on but there are a<font color="#CCCCCC"> lot</font>

540
00:31:55,070 --> 00:32:00,350
of work to make<font color="#E5E5E5"> this</font><font color="#CCCCCC"> real for</font><font color="#E5E5E5"> fibre</font>

541
00:31:57,950 --> 00:32:03,049
channel for disk arrays and that's

542
00:32:00,350 --> 00:32:06,830
really future because<font color="#E5E5E5"> there that part</font>

543
00:32:03,049 --> 00:32:09,200
needs lots of parallelism<font color="#CCCCCC"> - so currently</font>

544
00:32:06,830 --> 00:32:12,610
industry works<font color="#CCCCCC"> in that direction and</font>

545
00:32:09,200 --> 00:32:17,059
results are<font color="#E5E5E5"> quite good so stable now is</font>

546
00:32:12,610 --> 00:32:22,719
version<font color="#CCCCCC"> 3 of this standard and</font><font color="#E5E5E5"> the</font>

547
00:32:17,059 --> 00:32:26,029
<font color="#E5E5E5">already</font><font color="#CCCCCC"> pre-production version</font><font color="#E5E5E5"> 5 can</font>

548
00:32:22,720 --> 00:32:32,240
<font color="#E5E5E5">basically allows more than 32 gigs per</font>

549
00:32:26,029 --> 00:32:34,399
second for one<font color="#E5E5E5"> channel</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> fiber which</font>

550
00:32:32,240 --> 00:32:36,740
connects you to the disk array so it's

551
00:32:34,399 --> 00:32:41,120
very impressive<font color="#CCCCCC"> this</font><font color="#E5E5E5"> performance I would</font>

552
00:32:36,740 --> 00:32:44,480
say<font color="#E5E5E5"> but the next problem is like with</font>

553
00:32:41,120 --> 00:32:47,239
that latency change do the other

554
00:32:44,480 --> 00:32:51,380
database<font color="#E5E5E5"> actually aware of that</font>

555
00:32:47,240 --> 00:32:55,330
<font color="#E5E5E5">development</font><font color="#CCCCCC"> and is it ok just to put the</font>

556
00:32:51,380 --> 00:32:58,490
database on this extra fast<font color="#E5E5E5"> storage</font>

557
00:32:55,330 --> 00:33:01,460
<font color="#CCCCCC">would</font><font color="#E5E5E5"> it use</font><font color="#CCCCCC"> that good I would say</font>

558
00:32:58,490 --> 00:33:03,940
<font color="#CCCCCC">that's a actually a difficult question</font>

559
00:33:01,460 --> 00:33:03,940
<font color="#CCCCCC">and</font>

560
00:33:04,530 --> 00:33:11,879
we still for<font color="#CCCCCC"> example and Postgres have</font>

561
00:33:06,720 --> 00:33:13,530
no real<font color="#CCCCCC"> / ilysm in bulk input/output</font>

562
00:33:11,880 --> 00:33:16,860
operations so basically we have a check

563
00:33:13,530 --> 00:33:20,460
pointer which is not<font color="#E5E5E5"> quite parallel and</font>

564
00:33:16,860 --> 00:33:23,908
we have a background<font color="#E5E5E5"> writer which is non</font>

565
00:33:20,460 --> 00:33:26,940
parallel<font color="#CCCCCC"> and that's it</font>

566
00:33:23,909 --> 00:33:30,150
so basically the improvement of current

567
00:33:26,940 --> 00:33:33,299
storages<font color="#E5E5E5"> are all based on high</font>

568
00:33:30,150 --> 00:33:37,500
parallelism<font color="#E5E5E5"> store / in storage and well</font>

569
00:33:33,299 --> 00:33:41,039
<font color="#E5E5E5">the database cannot handle this so</font>

570
00:33:37,500 --> 00:33:43,409
probably it should be a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

571
00:33:41,039 --> 00:33:49,080
improved<font color="#E5E5E5"> before we can</font><font color="#CCCCCC"> actually benefit</font>

572
00:33:43,409 --> 00:33:52,380
but well<font color="#E5E5E5"> if you move from nope to modern</font>

573
00:33:49,080 --> 00:33:54,590
kernel with Vulcan<font color="#CCCCCC"> queue I saw there are</font>

574
00:33:52,380 --> 00:33:58,260
performance improvements<font color="#CCCCCC"> like four times</font>

575
00:33:54,590 --> 00:34:00,840
<font color="#E5E5E5">so it can be actually quite good quite</font>

576
00:33:58,260 --> 00:34:04,940
good<font color="#CCCCCC"> for you but I'm</font><font color="#E5E5E5"> not sure because I</font>

577
00:34:00,840 --> 00:34:07,740
don't<font color="#E5E5E5"> know your workload so well</font>

578
00:34:04,940 --> 00:34:11,668
<font color="#E5E5E5">situation could be improved</font><font color="#CCCCCC"> maybe not so</font>

579
00:34:07,740 --> 00:34:17,489
drastically<font color="#E5E5E5"> like excited developers</font><font color="#CCCCCC"> on</font>

580
00:34:11,668 --> 00:34:23,190
<font color="#CCCCCC">nvme reporter what's the latest</font><font color="#E5E5E5"> things</font>

581
00:34:17,489 --> 00:34:26,299
<font color="#CCCCCC">in envy</font><font color="#E5E5E5"> me and Vulcan queue during the</font>

582
00:34:23,190 --> 00:34:29,760
development<font color="#E5E5E5"> cycle of kernel version</font><font color="#CCCCCC"> 4</font>

583
00:34:26,300 --> 00:34:31,230
the first thing was I are pulling my

584
00:34:29,760 --> 00:34:35,909
appalling

585
00:34:31,230 --> 00:34:38,639
that's an interesting<font color="#CCCCCC"> example</font><font color="#E5E5E5"> for a long</font>

586
00:34:35,909 --> 00:34:42,750
<font color="#E5E5E5">time the</font><font color="#CCCCCC"> idea was like if</font><font color="#E5E5E5"> you form an</font>

587
00:34:38,639 --> 00:34:46,169
input-output request you send it to the

588
00:34:42,750 --> 00:34:50,119
disk and then this driver takes care

589
00:34:46,168 --> 00:34:55,710
about the results so you<font color="#CCCCCC"> have an</font><font color="#E5E5E5"> IQ and</font>

590
00:34:50,119 --> 00:35:00,300
you handle it then the operation of<font color="#CCCCCC"> i/o</font>

591
00:34:55,710 --> 00:35:04,950
ended and then you<font color="#CCCCCC"> return to the kernel</font>

592
00:35:00,300 --> 00:35:08,820
to the user space at<font color="#E5E5E5"> zone for low</font>

593
00:35:04,950 --> 00:35:12,290
<font color="#CCCCCC">latency disk this is actually not</font><font color="#E5E5E5"> very</font>

594
00:35:08,820 --> 00:35:14,820
optimal because<font color="#E5E5E5"> you need to wait for the</font>

595
00:35:12,290 --> 00:35:17,099
interrupt<font color="#E5E5E5"> and this is a long time</font>

596
00:35:14,820 --> 00:35:18,690
<font color="#CCCCCC">probably your operation</font><font color="#E5E5E5"> will end up</font>

597
00:35:17,099 --> 00:35:22,250
sooner

598
00:35:18,690 --> 00:35:22,250
and you have the huge overhead

599
00:35:22,610 --> 00:35:30,120
<font color="#CCCCCC">immediately</font><font color="#E5E5E5"> come up the idea of polling</font>

600
00:35:26,570 --> 00:35:33,240
<font color="#CCCCCC">so basically then you</font><font color="#E5E5E5"> send the right</font>

601
00:35:30,120 --> 00:35:38,850
request through<font color="#CCCCCC"> the stack to the</font><font color="#E5E5E5"> disk</font>

602
00:35:33,240 --> 00:35:41,339
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can constantly pull your device and</font>

603
00:35:38,850 --> 00:35:47,339
figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> if it finish or not</font>

604
00:35:41,340 --> 00:35:49,650
and because SSDs are quite fast<font color="#E5E5E5"> we run</font>

605
00:35:47,340 --> 00:35:54,750
into another<font color="#CCCCCC"> problem on this polling you</font>

606
00:35:49,650 --> 00:35:57,930
can actually have spent lots of<font color="#E5E5E5"> CPU</font>

607
00:35:54,750 --> 00:36:01,440
resources and your CPU is busy and well

608
00:35:57,930 --> 00:36:05,640
your database is<font color="#E5E5E5"> not happy so after the</font>

609
00:36:01,440 --> 00:36:07,590
first naive approach<font color="#E5E5E5"> the so-called</font>

610
00:36:05,640 --> 00:36:11,279
hybrid polling was introduced

611
00:36:07,590 --> 00:36:14,040
so basically current idea is that you

612
00:36:11,280 --> 00:36:17,850
send<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> right request and at some</font>

613
00:36:14,040 --> 00:36:20,190
point you pull the device and trying to

614
00:36:17,850 --> 00:36:23,339
<font color="#E5E5E5">figure out if it finished then you</font><font color="#CCCCCC"> sleep</font>

615
00:36:20,190 --> 00:36:26,820
for for a<font color="#E5E5E5"> while and then you</font><font color="#CCCCCC"> actually</font>

616
00:36:23,340 --> 00:36:29,060
pull again and most<font color="#CCCCCC"> likely it would</font><font color="#E5E5E5"> be</font>

617
00:36:26,820 --> 00:36:31,980
<font color="#E5E5E5">much more efficient than wait for</font>

618
00:36:29,060 --> 00:36:34,680
<font color="#E5E5E5">interrupt so that was a huge</font><font color="#CCCCCC"> improvement</font>

619
00:36:31,980 --> 00:36:37,020
of a performance<font color="#E5E5E5"> of</font><font color="#CCCCCC"> balking view and</font>

620
00:36:34,680 --> 00:36:39,359
<font color="#CCCCCC">nvme together</font>

621
00:36:37,020 --> 00:36:44,580
there are no new<font color="#CCCCCC"> schedulers like</font>

622
00:36:39,360 --> 00:36:49,860
<font color="#CCCCCC">basically Kuber for 4.10 or 4.12</font><font color="#E5E5E5"> here I</font>

623
00:36:44,580 --> 00:36:53,580
think 4.12<font color="#E5E5E5"> is much more correct I</font><font color="#CCCCCC"> 'taken</font>

624
00:36:49,860 --> 00:36:56,580
was introduced<font color="#E5E5E5"> so basically you can move</font>

625
00:36:53,580 --> 00:36:59,480
the request from<font color="#E5E5E5"> one queue or to another</font>

626
00:36:56,580 --> 00:37:02,850
<font color="#E5E5E5">queue and based on those</font><font color="#CCCCCC"> texts you can</font>

627
00:36:59,480 --> 00:37:06,780
manage the priorities<font color="#CCCCCC"> of</font><font color="#E5E5E5"> input/output</font>

628
00:37:02,850 --> 00:37:08,420
<font color="#E5E5E5">that was specifically good for virtual</font>

629
00:37:06,780 --> 00:37:11,220
machines but I think<font color="#E5E5E5"> actually for</font>

630
00:37:08,420 --> 00:37:14,010
databases it can be<font color="#E5E5E5"> also quite</font><font color="#CCCCCC"> useful</font>

631
00:37:11,220 --> 00:37:18,270
<font color="#E5E5E5">because different processes have a</font>

632
00:37:14,010 --> 00:37:20,610
different IO profile<font color="#E5E5E5"> and besides of</font><font color="#CCCCCC"> that</font>

633
00:37:18,270 --> 00:37:25,860
there<font color="#E5E5E5"> are some direct i/o improvements</font>

634
00:37:20,610 --> 00:37:29,420
in the nvme connected to the internal

635
00:37:25,860 --> 00:37:29,420
optimizations of SSDs

636
00:37:30,400 --> 00:37:37,280
and a final small<font color="#CCCCCC"> note on the</font><font color="#E5E5E5"> directory</font>

637
00:37:34,820 --> 00:37:40,190
<font color="#E5E5E5">because we're talking about databases we</font>

638
00:37:37,280 --> 00:37:43,580
are it's possible<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> if room and</font>

639
00:37:40,190 --> 00:37:46,810
well that's<font color="#E5E5E5"> a question people constantly</font>

640
00:37:43,580 --> 00:37:47,960
ask what is<font color="#CCCCCC"> the current situation with</font>

641
00:37:46,810 --> 00:37:52,910
directio

642
00:37:47,960 --> 00:37:56,420
in<font color="#E5E5E5"> Postgres and why not just grab all</font>

643
00:37:52,910 --> 00:37:59,359
the source and open<font color="#CCCCCC"> every file before</font>

644
00:37:56,420 --> 00:38:02,590
directed simple why you don't do this<font color="#E5E5E5"> so</font>

645
00:37:59,360 --> 00:38:06,800
currently<font color="#CCCCCC"> PostgreSQL doesn't support</font>

646
00:38:02,590 --> 00:38:10,610
<font color="#E5E5E5">directio for anything useful in</font>

647
00:38:06,800 --> 00:38:13,640
production<font color="#E5E5E5"> I would put</font><font color="#CCCCCC"> that in</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> wet</font>

648
00:38:10,610 --> 00:38:16,880
way so we basically can use director

649
00:38:13,640 --> 00:38:19,040
<font color="#E5E5E5">your for</font><font color="#CCCCCC"> right and right head log but</font>

650
00:38:16,880 --> 00:38:22,430
here's<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> and explanation why</font>

651
00:38:19,040 --> 00:38:26,750
<font color="#E5E5E5">Postgres do not use that for something</font>

652
00:38:22,430 --> 00:38:30,339
useful<font color="#CCCCCC"> if you open</font><font color="#E5E5E5"> the file with or</font>

653
00:38:26,750 --> 00:38:33,410
direct<font color="#CCCCCC"> you need to work</font><font color="#E5E5E5"> with this file</font>

654
00:38:30,340 --> 00:38:35,750
<font color="#E5E5E5">exceptionally with or direct because if</font>

655
00:38:33,410 --> 00:38:39,879
you open<font color="#CCCCCC"> the file with or direct and</font>

656
00:38:35,750 --> 00:38:42,560
then I don't know<font color="#E5E5E5"> our chief command or</font>

657
00:38:39,880 --> 00:38:45,920
something like<font color="#E5E5E5"> Peter</font><font color="#CCCCCC"> dump or something</font>

658
00:38:42,560 --> 00:38:48,710
<font color="#CCCCCC">like this</font><font color="#E5E5E5"> handles will</font><font color="#CCCCCC"> they've handles</font>

659
00:38:45,920 --> 00:38:51,860
<font color="#CCCCCC">this file</font><font color="#E5E5E5"> without or direct you</font><font color="#CCCCCC"> will</font>

660
00:38:48,710 --> 00:38:58,210
have a problems<font color="#E5E5E5"> most likely some crash</font>

661
00:38:51,860 --> 00:38:58,210
or<font color="#E5E5E5"> something like this and if</font><font color="#CCCCCC"> Postgres</font>

662
00:38:58,360 --> 00:39:05,060
works just like a standalone database

663
00:39:01,340 --> 00:39:07,730
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> okay to write</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> ahead lock</font>

664
00:39:05,060 --> 00:39:11,410
with or direct<font color="#E5E5E5"> but if you enable</font>

665
00:39:07,730 --> 00:39:15,170
replication<font color="#CCCCCC"> you probably will have an</font>

666
00:39:11,410 --> 00:39:19,720
<font color="#E5E5E5">archive command which is impossible can</font>

667
00:39:15,170 --> 00:39:22,610
be like just bar script or something

668
00:39:19,720 --> 00:39:25,850
<font color="#CCCCCC">completely</font><font color="#E5E5E5"> unaware</font><font color="#CCCCCC"> of how you open the</font>

669
00:39:22,610 --> 00:39:29,680
file and well<font color="#E5E5E5"> you will run into the</font>

670
00:39:25,850 --> 00:39:34,910
problems and<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> Postgres</font>

671
00:39:29,680 --> 00:39:39,879
automatically switch to buffer it<font color="#CCCCCC"> io for</font>

672
00:39:34,910 --> 00:39:43,970
right<font color="#CCCCCC"> headlock if even if you try to use</font>

673
00:39:39,880 --> 00:39:47,120
<font color="#CCCCCC">director in this case the main problem</font>

674
00:39:43,970 --> 00:39:49,100
<font color="#E5E5E5">from my point of view is that director</font>

675
00:39:47,120 --> 00:39:51,700
<font color="#E5E5E5">is</font><font color="#CCCCCC"> very little specific thing</font><font color="#E5E5E5"> and you</font>

676
00:39:49,100 --> 00:39:55,670
need to<font color="#E5E5E5"> invest lots of efforts</font><font color="#CCCCCC"> to</font>

677
00:39:51,700 --> 00:39:59,509
introduce<font color="#E5E5E5"> and maintain platform</font>

678
00:39:55,670 --> 00:40:01,580
dependent<font color="#E5E5E5"> code so basically even if</font>

679
00:39:59,510 --> 00:40:06,320
<font color="#CCCCCC">progress no community will agree to do</font>

680
00:40:01,580 --> 00:40:08,509
this that<font color="#E5E5E5"> would be like not easy task</font>

681
00:40:06,320 --> 00:40:11,510
<font color="#CCCCCC">because you need to write lots of code</font>

682
00:40:08,510 --> 00:40:15,650
specifically<font color="#E5E5E5"> for Linux and generally</font>

683
00:40:11,510 --> 00:40:18,980
possible<font color="#E5E5E5"> community is not quite easy</font>

684
00:40:15,650 --> 00:40:24,920
about bringing<font color="#E5E5E5"> into the project very</font>

685
00:40:18,980 --> 00:40:27,200
<font color="#CCCCCC">always</font><font color="#E5E5E5"> specific things</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> general</font>

686
00:40:24,920 --> 00:40:30,350
director you<font color="#CCCCCC"> may be is the best solution</font>

687
00:40:27,200 --> 00:40:34,580
we have now in spite of<font color="#E5E5E5"> many people</font>

688
00:40:30,350 --> 00:40:36,460
talking<font color="#CCCCCC"> that it's not quite good in</font>

689
00:40:34,580 --> 00:40:40,220
<font color="#CCCCCC">terms of for implementation and</font><font color="#E5E5E5"> so on</font>

690
00:40:36,460 --> 00:40:44,060
<font color="#CCCCCC">but well I think finally Possible's will</font>

691
00:40:40,220 --> 00:40:46,640
move towards this<font color="#CCCCCC"> direction because now</font>

692
00:40:44,060 --> 00:40:49,700
it's<font color="#CCCCCC"> like basically the only classical</font>

693
00:40:46,640 --> 00:40:53,779
database which doesn't use that<font color="#E5E5E5"> I don't</font>

694
00:40:49,700 --> 00:40:56,450
know<font color="#CCCCCC"> actually it actually</font><font color="#E5E5E5"> is good idea</font>

695
00:40:53,780 --> 00:40:59,570
if<font color="#CCCCCC"> we try to figure out</font><font color="#E5E5E5"> if a Linux</font>

696
00:40:56,450 --> 00:41:01,879
<font color="#E5E5E5">version</font><font color="#CCCCCC"> of mssql several uses</font><font color="#E5E5E5"> that but</font>

697
00:40:59,570 --> 00:41:04,220
well<font color="#E5E5E5"> the only exception is ms SQL server</font>

698
00:41:01,880 --> 00:41:08,390
for<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> because they do not have</font>

699
00:41:04,220 --> 00:41:12,319
direct<font color="#E5E5E5"> our MySQL uses Oracle uses db2</font>

700
00:41:08,390 --> 00:41:17,660
users<font color="#CCCCCC"> so that's all about direct</font><font color="#E5E5E5"> IO and</font>

701
00:41:12,320 --> 00:41:20,240
all about<font color="#CCCCCC"> recent changes in</font><font color="#E5E5E5"> Linux stack</font>

702
00:41:17,660 --> 00:41:23,870
and if you have<font color="#E5E5E5"> questions it's time to</font>

703
00:41:20,240 --> 00:41:31,348
toss them thank<font color="#E5E5E5"> you</font>

704
00:41:23,870 --> 00:41:37,749
[Applause]

705
00:41:31,349 --> 00:41:39,940
question in<font color="#E5E5E5"> your talk you</font><font color="#CCCCCC"> described only</font>

706
00:41:37,749 --> 00:41:42,640
<font color="#E5E5E5">like</font><font color="#CCCCCC"> bare-metal implementations of</font>

707
00:41:39,940 --> 00:41:44,799
<font color="#CCCCCC">PostgreSQL</font><font color="#E5E5E5"> which means like private</font>

708
00:41:42,640 --> 00:41:47,200
cloud private cloud where you can

709
00:41:44,799 --> 00:41:51,609
negotiate certain<font color="#E5E5E5"> things with a provider</font>

710
00:41:47,200 --> 00:41:54,879
and the public cloud has certain has

711
00:41:51,609 --> 00:41:56,109
those things inside of<font color="#CCCCCC"> it but</font><font color="#E5E5E5"> cannot</font>

712
00:41:54,880 --> 00:41:59,920
<font color="#CCCCCC">total</font><font color="#E5E5E5"> in different way</font>

713
00:41:56,109 --> 00:42:02,288
well I would say that most likely<font color="#E5E5E5"> they</font>

714
00:41:59,920 --> 00:42:05,009
all have the same<font color="#E5E5E5"> things inside</font><font color="#CCCCCC"> because</font>

715
00:42:02,289 --> 00:42:07,450
even if you deal with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> public cloud</font>

716
00:42:05,009 --> 00:42:09,839
<font color="#CCCCCC">they have serious</font><font color="#E5E5E5"> problems with</font>

717
00:42:07,450 --> 00:42:12,848
improving performance and I don't

718
00:42:09,839 --> 00:42:15,538
<font color="#E5E5E5">believe they do not use this achievement</font>

719
00:42:12,849 --> 00:42:17,890
<font color="#E5E5E5">of Linux kernel but with public cloud</font>

720
00:42:15,539 --> 00:42:21,489
<font color="#E5E5E5">basically you can never be</font><font color="#CCCCCC"> sure what</font>

721
00:42:17,890 --> 00:42:26,348
exactly<font color="#CCCCCC"> they do and that's</font><font color="#E5E5E5"> a part of the</font>

722
00:42:21,489 --> 00:42:28,420
game but we with so but it stops being a

723
00:42:26,349 --> 00:42:30,239
possibly<font color="#E5E5E5"> SPL problem it becomes a</font>

724
00:42:28,420 --> 00:42:33,069
question of choosing the flavor

725
00:42:30,239 --> 00:42:36,460
well I still<font color="#CCCCCC"> believe that</font><font color="#E5E5E5"> many people</font>

726
00:42:33,069 --> 00:42:39,069
use private cloud or bare metal

727
00:42:36,460 --> 00:42:44,200
installation actually and for<font color="#CCCCCC"> them it's</font>

728
00:42:39,069 --> 00:42:48,999
problem<font color="#CCCCCC"> so</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> we are not</font><font color="#E5E5E5"> talking about</font>

729
00:42:44,200 --> 00:42:51,489
<font color="#E5E5E5">maybe private clouds here but for public</font>

730
00:42:48,999 --> 00:42:53,439
<font color="#E5E5E5">clouds here but for private clouds it's</font>

731
00:42:51,489 --> 00:42:55,150
still a<font color="#CCCCCC"> problem you need</font><font color="#E5E5E5"> to tune your</font>

732
00:42:53,440 --> 00:42:59,980
<font color="#E5E5E5">Linux you need to figure out what's</font>

733
00:42:55,150 --> 00:43:01,509
going<font color="#E5E5E5"> on so basically many many of those</font>

734
00:42:59,980 --> 00:43:05,739
<font color="#E5E5E5">improvements were actually introduced</font>

735
00:43:01,509 --> 00:43:08,319
for private clouds like<font color="#CCCCCC"> butt</font><font color="#E5E5E5"> so a little</font>

736
00:43:05,739 --> 00:43:10,599
<font color="#E5E5E5">bit on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so the thing is you are</font>

737
00:43:08,319 --> 00:43:12,249
provided with<font color="#E5E5E5"> vertical</font><font color="#CCCCCC"> BLK device in</font>

738
00:43:10,599 --> 00:43:15,789
case you're lucky you might negotiate

739
00:43:12,249 --> 00:43:19,118
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Erte OBL</font><font color="#E5E5E5"> key not with multi cue</font>

740
00:43:15,789 --> 00:43:20,980
support yeah but it's still<font color="#CCCCCC"> different</font>

741
00:43:19,119 --> 00:43:26,289
from<font color="#E5E5E5"> what you described because virtual</font>

742
00:43:20,980 --> 00:43:28,869
BLK device is not SSD or HDD or nvme<font color="#E5E5E5"> yes</font>

743
00:43:26,289 --> 00:43:31,930
as a thing on its own<font color="#E5E5E5"> yeah well I</font>

744
00:43:28,869 --> 00:43:36,029
wouldn't I would say that the idea<font color="#CCCCCC"> of</font>

745
00:43:31,930 --> 00:43:41,049
how<font color="#E5E5E5"> to improve</font><font color="#CCCCCC"> performance of</font><font color="#E5E5E5"> Postgres</font>

746
00:43:36,029 --> 00:43:43,390
on virtual<font color="#E5E5E5"> IO ne will show it's quite</font>

747
00:43:41,050 --> 00:43:45,550
different problem<font color="#E5E5E5"> because for</font><font color="#CCCCCC"> example</font>

748
00:43:43,390 --> 00:43:47,500
here we're talking about the<font color="#CCCCCC"> lacking of</font>

749
00:43:45,550 --> 00:43:50,740
parallelism in the Linux kernel

750
00:43:47,500 --> 00:43:53,370
infrastructure to handle<font color="#E5E5E5"> SSDs that's one</font>

751
00:43:50,740 --> 00:43:56,709
<font color="#E5E5E5">problem but</font><font color="#CCCCCC"> if we talk about</font>

752
00:43:53,370 --> 00:43:59,350
virtualization<font color="#CCCCCC"> for example immediately</font>

753
00:43:56,710 --> 00:44:02,440
merge the problem of unstable latency

754
00:43:59,350 --> 00:44:05,319
which is quite different<font color="#E5E5E5"> story and well</font>

755
00:44:02,440 --> 00:44:07,210
it's outside the<font color="#E5E5E5"> scope of this talk</font><font color="#CCCCCC"> it's</font>

756
00:44:05,320 --> 00:44:09,130
also<font color="#E5E5E5"> the problem and quite serious</font>

757
00:44:07,210 --> 00:44:14,290
problem but well it's it's a<font color="#CCCCCC"> different</font>

758
00:44:09,130 --> 00:44:14,980
story<font color="#E5E5E5"> yeah yeah</font><font color="#CCCCCC"> thanks thanks</font><font color="#E5E5E5"> for the</font>

759
00:44:14,290 --> 00:44:17,890
talk

760
00:44:14,980 --> 00:44:21,070
have you seen<font color="#E5E5E5"> much demand attraction for</font>

761
00:44:17,890 --> 00:44:23,950
open channel<font color="#E5E5E5"> SSDs and</font><font color="#CCCCCC"> if so like</font><font color="#E5E5E5"> how far</font>

762
00:44:21,070 --> 00:44:26,470
out do you think<font color="#CCCCCC"> that might be well I</font>

763
00:44:23,950 --> 00:44:28,680
would say I have heard about<font color="#E5E5E5"> that</font>

764
00:44:26,470 --> 00:44:35,339
<font color="#CCCCCC">because I was interested in the topic</font>

765
00:44:28,680 --> 00:44:38,410
<font color="#CCCCCC">but regret to say</font><font color="#E5E5E5"> I did not see that</font>

766
00:44:35,340 --> 00:44:40,120
much in<font color="#CCCCCC"> projection</font><font color="#E5E5E5"> because well my</font>

767
00:44:38,410 --> 00:44:42,100
primary job I'm working<font color="#CCCCCC"> for the</font>

768
00:44:40,120 --> 00:44:46,420
customers<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> the customers</font><font color="#E5E5E5"> run in</font>

769
00:44:42,100 --> 00:44:48,819
databases<font color="#CCCCCC"> they tend to</font><font color="#E5E5E5"> buy goods SSDs</font>

770
00:44:46,420 --> 00:44:52,300
<font color="#E5E5E5">and use a vendor</font><font color="#CCCCCC"> specific things for</font>

771
00:44:48,820 --> 00:44:55,330
<font color="#CCCCCC">them that's it adjusts real life so I</font>

772
00:44:52,300 --> 00:44:58,060
will quite appreciate to have some

773
00:44:55,330 --> 00:45:03,549
feedback<font color="#E5E5E5"> if someone use and well I I</font>

774
00:44:58,060 --> 00:45:06,180
will take a look<font color="#CCCCCC"> in</font><font color="#E5E5E5"> it yeah in other</font>

775
00:45:03,550 --> 00:45:06,180
questions<font color="#E5E5E5"> please</font>

776
00:45:10,260 --> 00:45:16,390
in just in your<font color="#E5E5E5"> last slide you have</font>

777
00:45:13,570 --> 00:45:22,990
atomic flag<font color="#E5E5E5"> may you give some details</font>

778
00:45:16,390 --> 00:45:27,160
about atomic he talks about well you

779
00:45:22,990 --> 00:45:31,350
<font color="#CCCCCC">know some is this have another option</font><font color="#E5E5E5"> or</font>

780
00:45:27,160 --> 00:45:34,060
atomic which is quite<font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> writes</font>

781
00:45:31,350 --> 00:45:37,299
but<font color="#E5E5E5"> the problem is you cannot use</font>

782
00:45:34,060 --> 00:45:39,970
automic without a direct so basically

783
00:45:37,300 --> 00:45:43,420
you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> or direct to benefit</font>

784
00:45:39,970 --> 00:45:46,980
<font color="#E5E5E5">from such low level optimization</font><font color="#CCCCCC"> for</font>

785
00:45:43,420 --> 00:45:52,620
<font color="#CCCCCC">SSDs but will you support it</font><font color="#E5E5E5"> for any</font>

786
00:45:46,980 --> 00:45:55,390
block size 16<font color="#CCCCCC"> K 64 K or only for K</font><font color="#E5E5E5"> I</font>

787
00:45:52,620 --> 00:45:57,670
don't know to<font color="#CCCCCC"> be honest</font><font color="#E5E5E5"> because well</font>

788
00:45:55,390 --> 00:46:01,390
pause which doesn't support<font color="#E5E5E5"> that I don't</font>

789
00:45:57,670 --> 00:46:05,860
know<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> is the smallest block</font><font color="#E5E5E5"> for</font>

790
00:46:01,390 --> 00:46:09,490
<font color="#E5E5E5">directio acceptable yes you speak about</font>

791
00:46:05,860 --> 00:46:11,530
blocks but your<font color="#CCCCCC"> filesystem right</font><font color="#E5E5E5"> so even</font>

792
00:46:09,490 --> 00:46:15,879
<font color="#E5E5E5">you write one byte it will be still</font><font color="#CCCCCC"> 4 K</font>

793
00:46:11,530 --> 00:46:16,870
today<font color="#E5E5E5"> well Postgres operates 8 k if you</font>

794
00:46:15,880 --> 00:46:19,570
don't wreck impale it

795
00:46:16,870 --> 00:46:23,140
so basically<font color="#E5E5E5"> io can bring benefits on</font>

796
00:46:19,570 --> 00:46:25,630
that block size and basically<font color="#E5E5E5"> I</font><font color="#CCCCCC"> believe</font>

797
00:46:23,140 --> 00:46:28,750
it also will bring lots of<font color="#E5E5E5"> benefits on</font>

798
00:46:25,630 --> 00:46:30,730
larger sizes of the blocks<font color="#E5E5E5"> because well</font>

799
00:46:28,750 --> 00:46:33,100
the<font color="#E5E5E5"> old mechanism was introduced</font>

800
00:46:30,730 --> 00:46:35,200
partially for databases and many

801
00:46:33,100 --> 00:46:38,560
analytic databases tend to have a larger

802
00:46:35,200 --> 00:46:40,720
<font color="#E5E5E5">block size okay</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> any plant then we</font>

803
00:46:38,560 --> 00:46:42,730
don't need to<font color="#CCCCCC"> call</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> sync</font><font color="#E5E5E5"> when you use</font>

804
00:46:40,720 --> 00:46:46,080
the rectangle because right<font color="#E5E5E5"> now it's</font>

805
00:46:42,730 --> 00:46:49,210
it's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> story</font>

806
00:46:46,080 --> 00:46:53,110
it doesn't depend basically<font color="#E5E5E5"> Postgres</font>

807
00:46:49,210 --> 00:46:57,010
heavily relies on<font color="#E5E5E5"> F sync I don't know if</font>

808
00:46:53,110 --> 00:47:00,040
you<font color="#E5E5E5"> probably visit Thomas</font><font color="#CCCCCC"> talk yesterday</font>

809
00:46:57,010 --> 00:47:02,260
yeah<font color="#CCCCCC"> believe you about different</font>

810
00:47:00,040 --> 00:47:04,920
<font color="#CCCCCC">problems you will</font><font color="#E5E5E5"> see that basically</font><font color="#CCCCCC"> all</font>

811
00:47:02,260 --> 00:47:10,000
<font color="#E5E5E5">mechanism is about F sync so basically</font>

812
00:47:04,920 --> 00:47:13,330
it's like<font color="#E5E5E5"> POSIX standard as we</font>

813
00:47:10,000 --> 00:47:16,510
understand that and anyway you know<font color="#E5E5E5"> you</font>

814
00:47:13,330 --> 00:47:19,910
need<font color="#E5E5E5"> to issue everything but why if you</font>

815
00:47:16,510 --> 00:47:21,940
already own or direct so 20 years<font color="#E5E5E5"> ago</font>

816
00:47:19,910 --> 00:47:26,328
<font color="#CCCCCC">Solaris user</font><font color="#E5E5E5"> direct without have seen</font>

817
00:47:21,940 --> 00:47:29,020
while<font color="#CCCCCC"> enum</font><font color="#E5E5E5"> still you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> think it's</font>

818
00:47:26,329 --> 00:47:29,020
a<font color="#E5E5E5"> good</font><font color="#CCCCCC"> question actually</font>

819
00:47:32,920 --> 00:47:37,400
yeah probably

820
00:47:35,210 --> 00:47:39,440
we have several right persons to answer

821
00:47:37,400 --> 00:47:42,319
that<font color="#E5E5E5"> low-level question yeah the reason</font>

822
00:47:39,440 --> 00:47:44,599
<font color="#E5E5E5">is that there is a development cost of</font>

823
00:47:42,319 --> 00:47:47,150
implementing direct<font color="#CCCCCC"> IO on all operating</font>

824
00:47:44,599 --> 00:47:50,119
<font color="#CCCCCC">systems</font><font color="#E5E5E5"> so we don't have the manpower to</font>

825
00:47:47,150 --> 00:47:54,789
do it<font color="#E5E5E5"> yet we may next year or the year</font>

826
00:47:50,119 --> 00:47:54,789
after that<font color="#E5E5E5"> but that's the only reason</font>

827
00:47:56,859 --> 00:48:03,799
Cancellara<font color="#E5E5E5"> in other questions please so</font>

828
00:48:02,299 --> 00:48:11,259
thank you yeah<font color="#CCCCCC"> thank you</font>

829
00:48:03,800 --> 00:48:11,260
[Applause]

