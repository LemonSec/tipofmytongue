1
00:00:04,610 --> 00:00:09,080
so hello<font color="#E5E5E5"> everyone so first thing who</font>

2
00:00:07,399 --> 00:00:11,719
knows about data structures<font color="#E5E5E5"> in the room</font>

3
00:00:09,080 --> 00:00:15,230
<font color="#E5E5E5">and you show your hand okay that's fine</font>

4
00:00:11,719 --> 00:00:17,330
so<font color="#CCCCCC"> so this talk is called developing</font>

5
00:00:15,230 --> 00:00:19,099
data structures for<font color="#E5E5E5"> JavaScript and so</font>

6
00:00:17,330 --> 00:00:21,470
I'm really<font color="#E5E5E5"> glad to be</font><font color="#CCCCCC"> here on the back</font>

7
00:00:19,099 --> 00:00:23,509
<font color="#CCCCCC">again the JavaScript Deb room and so I</font>

8
00:00:21,470 --> 00:00:27,229
hope I will<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to entertain you</font>

9
00:00:23,510 --> 00:00:35,030
during<font color="#E5E5E5"> those next 20 minutes so Who am I</font>

10
00:00:27,230 --> 00:00:37,909
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> messing up ah</font><font color="#CCCCCC"> okay</font>

11
00:00:35,030 --> 00:00:40,220
so the subject of this<font color="#E5E5E5"> talk is why and</font>

12
00:00:37,909 --> 00:00:42,170
how to implement data structures for

13
00:00:40,220 --> 00:00:46,190
<font color="#E5E5E5">JavaScript and why is that a thing</font>

14
00:00:42,170 --> 00:00:48,440
<font color="#E5E5E5">so Who am I I'm Gil so I go on</font><font color="#CCCCCC"> the</font>

15
00:00:46,190 --> 00:00:49,879
alternate<font color="#E5E5E5"> by the infamous name of young</font>

16
00:00:48,440 --> 00:00:52,250
<font color="#E5E5E5">Villarreal which is a shitty name but</font>

17
00:00:49,879 --> 00:00:55,430
that's<font color="#E5E5E5"> life and</font><font color="#CCCCCC"> I am a research engineer</font>

18
00:00:52,250 --> 00:00:58,640
<font color="#E5E5E5">working from for a research lab in Paris</font>

19
00:00:55,430 --> 00:01:00,320
which is called the Media Lab so what's

20
00:00:58,640 --> 00:01:02,330
the data structure<font color="#E5E5E5"> just</font><font color="#CCCCCC"> to be sure we</font>

21
00:01:00,320 --> 00:01:04,519
<font color="#E5E5E5">agree on the same ground so that</font><font color="#CCCCCC"> a</font>

22
00:01:02,330 --> 00:01:06,890
structure is actually<font color="#CCCCCC"> a way</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> organize</font>

23
00:01:04,519 --> 00:01:08,990
and move data around in the computer so

24
00:01:06,890 --> 00:01:11,720
<font color="#E5E5E5">we are able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> query and update it</font>

25
00:01:08,990 --> 00:01:13,940
efficiently<font color="#E5E5E5"> so basically when you deal</font>

26
00:01:11,720 --> 00:01:16,190
<font color="#CCCCCC">with computer you can sometimes try it</font>

27
00:01:13,940 --> 00:01:18,980
<font color="#E5E5E5">off some memory space to be able to do</font>

28
00:01:16,190 --> 00:01:21,080
computation faster and so basically this

29
00:01:18,980 --> 00:01:23,180
is<font color="#CCCCCC"> what I can come pass is that a</font>

30
00:01:21,080 --> 00:01:24,560
structure so for instance in JavaScript

31
00:01:23,180 --> 00:01:27,170
you have a lot of<font color="#E5E5E5"> data structures you</font>

32
00:01:24,560 --> 00:01:30,790
have arrays you've got object set<font color="#CCCCCC"> Maps</font>

33
00:01:27,170 --> 00:01:33,530
and so on so we<font color="#E5E5E5"> will start with some</font>

34
00:01:30,790 --> 00:01:35,180
quotes from<font color="#E5E5E5"> the internet so web</font>

35
00:01:33,530 --> 00:01:39,230
development is not filled development

36
00:01:35,180 --> 00:01:42,530
<font color="#E5E5E5">isn't is ends</font><font color="#CCCCCC"> forth</font><font color="#E5E5E5"> easier so this is</font>

37
00:01:39,230 --> 00:01:43,909
<font color="#CCCCCC"> web development is</font><font color="#E5E5E5"> trillion web</font>

38
00:01:42,530 --> 00:01:45,710
developers don't<font color="#E5E5E5"> need fancy data</font>

39
00:01:43,909 --> 00:01:48,920
structures or any solid knowledge<font color="#CCCCCC"> in</font>

40
00:01:45,710 --> 00:01:51,259
<font color="#CCCCCC">algorithmic so someone obviously</font><font color="#E5E5E5"> still</font>

41
00:01:48,920 --> 00:01:53,360
wrong<font color="#E5E5E5"> so the point of my talk here is to</font>

42
00:01:51,260 --> 00:01:54,950
show<font color="#CCCCCC"> you that we can use data structure</font>

43
00:01:53,360 --> 00:01:57,380
in JavaScript<font color="#E5E5E5"> and that's a good</font><font color="#CCCCCC"> thing</font>

44
00:01:54,950 --> 00:02:02,000
and if<font color="#E5E5E5"> you do</font><font color="#CCCCCC"> all do that you will lead</font>

45
00:01:57,380 --> 00:02:03,470
a happier life so the question is<font color="#E5E5E5"> don't</font>

46
00:02:02,000 --> 00:02:05,450
we have already data structures in

47
00:02:03,470 --> 00:02:07,940
JavaScript<font color="#CCCCCC"> like for</font><font color="#E5E5E5"> instance we have</font>

48
00:02:05,450 --> 00:02:10,190
arrays we have objects<font color="#E5E5E5"> and now with es6</font>

49
00:02:07,940 --> 00:02:12,200
<font color="#E5E5E5">we've got maps we've got set so why the</font>

50
00:02:10,190 --> 00:02:16,550
hell do we<font color="#E5E5E5"> bother about custom data</font>

51
00:02:12,200 --> 00:02:19,970
structures<font color="#E5E5E5"> isn't this really enough</font>

52
00:02:16,550 --> 00:02:23,180
so why do<font color="#E5E5E5"> we want other data</font><font color="#CCCCCC"> chatter is</font>

53
00:02:19,970 --> 00:02:25,460
<font color="#E5E5E5">structure so the first point is because</font>

54
00:02:23,180 --> 00:02:27,290
<font color="#E5E5E5">it's convenient</font><font color="#CCCCCC"> like any other kind of</font>

55
00:02:25,460 --> 00:02:29,450
abstraction<font color="#CCCCCC"> having data structure is</font>

56
00:02:27,290 --> 00:02:30,950
convenient<font color="#E5E5E5"> and it's easy for you</font><font color="#CCCCCC"> to do</font>

57
00:02:29,450 --> 00:02:33,380
like some kind of heavy bookkeeping

58
00:02:30,950 --> 00:02:35,209
using those custom data structure<font color="#E5E5E5"> so I</font>

59
00:02:33,380 --> 00:02:37,250
<font color="#CCCCCC">really use an</font><font color="#E5E5E5"> example to clarify</font><font color="#CCCCCC"> this</font>

60
00:02:35,210 --> 00:02:39,050
<font color="#CCCCCC">point</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance you can implement</font>

61
00:02:37,250 --> 00:02:41,630
something<font color="#E5E5E5"> which is called a multi set a</font>

62
00:02:39,050 --> 00:02:44,540
multi<font color="#CCCCCC"> set is actually a set in which you</font>

63
00:02:41,630 --> 00:02:45,950
can store<font color="#CCCCCC"> an</font><font color="#E5E5E5"> an item more than once</font><font color="#CCCCCC"> so</font>

64
00:02:44,540 --> 00:02:48,049
for<font color="#E5E5E5"> instance if you do some basic</font>

65
00:02:45,950 --> 00:02:49,730
<font color="#E5E5E5">JavaScript and</font><font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> count the</font>

66
00:02:48,050 --> 00:02:52,010
number of<font color="#CCCCCC"> occurrences of an item</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font>

67
00:02:49,730 --> 00:02:54,320
sequence<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> do is</font><font color="#CCCCCC"> nasty code you're</font>

68
00:02:52,010 --> 00:02:56,810
going<font color="#CCCCCC"> to iterate on</font><font color="#E5E5E5"> this list and then</font>

69
00:02:54,320 --> 00:02:58,459
<font color="#E5E5E5">you have to check if</font><font color="#CCCCCC"> your it item</font>

70
00:02:56,810 --> 00:03:01,250
already<font color="#E5E5E5"> exists in</font><font color="#CCCCCC"> the list and</font><font color="#E5E5E5"> then you</font>

71
00:02:58,460 --> 00:03:02,840
set up the item to<font color="#CCCCCC"> be zero</font><font color="#E5E5E5"> and then you</font>

72
00:03:01,250 --> 00:03:04,520
increment it and so on so this<font color="#E5E5E5"> is</font>

73
00:03:02,840 --> 00:03:06,290
<font color="#CCCCCC">bookkeeping you have to track a lot of</font>

74
00:03:04,520 --> 00:03:08,660
things and so on<font color="#E5E5E5"> whereas if you have a</font>

75
00:03:06,290 --> 00:03:11,090
multi set you can just<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> you have</font>

76
00:03:08,660 --> 00:03:12,950
abstracted<font color="#E5E5E5"> this complexity away and then</font>

77
00:03:11,090 --> 00:03:15,470
you are able<font color="#CCCCCC"> to delegate the bookkeeping</font>

78
00:03:12,950 --> 00:03:19,609
<font color="#E5E5E5">to the custom data structure so this is</font>

79
00:03:15,470 --> 00:03:21,320
a first example<font color="#E5E5E5"> another</font><font color="#CCCCCC"> example would be</font>

80
00:03:19,610 --> 00:03:22,970
like more complex data<font color="#CCCCCC"> structures</font>

81
00:03:21,320 --> 00:03:26,150
because the multi<font color="#CCCCCC"> set is actually</font><font color="#E5E5E5"> really</font>

82
00:03:22,970 --> 00:03:27,650
<font color="#CCCCCC">really easy</font><font color="#E5E5E5"> and straightforward but for</font>

83
00:03:26,150 --> 00:03:30,170
instance<font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to implement a</font>

84
00:03:27,650 --> 00:03:32,030
graph<font color="#E5E5E5"> so a graph is nodes connected by</font>

85
00:03:30,170 --> 00:03:34,309
<font color="#CCCCCC">edges</font><font color="#E5E5E5"> and so this is actually</font><font color="#CCCCCC"> quite</font>

86
00:03:32,030 --> 00:03:36,650
doable if you only use<font color="#CCCCCC"> RS and objects</font>

87
00:03:34,310 --> 00:03:39,350
but you have to keep<font color="#E5E5E5"> a lot of indexation</font>

88
00:03:36,650 --> 00:03:42,110
<font color="#E5E5E5">running correctly</font><font color="#CCCCCC"> and smoothly for</font>

89
00:03:39,350 --> 00:03:43,820
instance if you want to check who which

90
00:03:42,110 --> 00:03:46,190
are the neighbors of<font color="#E5E5E5"> a node you have to</font>

91
00:03:43,820 --> 00:03:48,140
index that and so if you do it by<font color="#CCCCCC"> hand</font>

92
00:03:46,190 --> 00:03:50,510
<font color="#E5E5E5">and you can do it I won't prevent you</font>

93
00:03:48,140 --> 00:03:52,040
from doing<font color="#E5E5E5"> stuff it's a bit messy it's a</font>

94
00:03:50,510 --> 00:03:54,230
bit hard to do<font color="#E5E5E5"> and you will forget thing</font>

95
00:03:52,040 --> 00:03:55,880
you will<font color="#E5E5E5"> stumble on issues and</font><font color="#CCCCCC"> so on</font><font color="#E5E5E5"> so</font>

96
00:03:54,230 --> 00:03:57,950
<font color="#E5E5E5">you can like delegate the</font><font color="#CCCCCC"> bookkeeping to</font>

97
00:03:55,880 --> 00:04:00,890
a custom structure and it will do<font color="#CCCCCC"> that</font>

98
00:03:57,950 --> 00:04:02,690
<font color="#E5E5E5">for you and what's more it's usually</font>

99
00:04:00,890 --> 00:04:04,429
better<font color="#CCCCCC"> to have a good and legible</font>

100
00:04:02,690 --> 00:04:06,020
interface so for instance here<font color="#E5E5E5"> you got</font>

101
00:04:04,430 --> 00:04:07,790
an<font color="#CCCCCC"> example</font><font color="#E5E5E5"> which is taken</font><font color="#CCCCCC"> from the</font>

102
00:04:06,020 --> 00:04:09,920
library graphology which implements

103
00:04:07,790 --> 00:04:12,530
graphs in<font color="#E5E5E5"> JavaScript and so you can just</font>

104
00:04:09,920 --> 00:04:15,290
ask the out neighbors of a node<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

105
00:04:12,530 --> 00:04:18,350
just<font color="#E5E5E5"> iterate</font><font color="#CCCCCC"> of the edges</font><font color="#E5E5E5"> of a node etc</font>

106
00:04:15,290 --> 00:04:19,849
<font color="#E5E5E5">etc so it's quite easy and all this is</font>

107
00:04:18,350 --> 00:04:24,800
done in constant<font color="#E5E5E5"> time so you don't have</font>

108
00:04:19,850 --> 00:04:26,570
to bother about indexing things yeah so

109
00:04:24,800 --> 00:04:28,400
the first<font color="#CCCCCC"> point is it's good because</font>

110
00:04:26,570 --> 00:04:30,050
abstraction is good thing<font color="#E5E5E5"> the second</font>

111
00:04:28,400 --> 00:04:32,239
point is<font color="#CCCCCC"> actually if</font>

112
00:04:30,050 --> 00:04:34,569
only use our<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> object you will mess</font>

113
00:04:32,240 --> 00:04:36,800
up<font color="#E5E5E5"> because it's not good enough</font>

114
00:04:34,569 --> 00:04:39,949
sometimes you have<font color="#CCCCCC"> to develop things</font>

115
00:04:36,800 --> 00:04:42,199
<font color="#E5E5E5">which are a bit more complex</font><font color="#CCCCCC"> so that's</font>

116
00:04:39,949 --> 00:04:43,610
just<font color="#E5E5E5"> because like</font><font color="#CCCCCC"> nowadays</font><font color="#E5E5E5"> JavaScript</font>

117
00:04:42,199 --> 00:04:46,310
and the web is<font color="#CCCCCC"> not something for</font><font color="#E5E5E5"> script</font>

118
00:04:43,610 --> 00:04:48,139
kiddies anymore<font color="#CCCCCC"> so not GS became a thing</font>

119
00:04:46,310 --> 00:04:51,169
<font color="#E5E5E5">we have to process a lot of data on the</font>

120
00:04:48,139 --> 00:04:53,360
client<font color="#CCCCCC"> to be able to like power useful</font>

121
00:04:51,169 --> 00:04:54,979
applications and sometimes you have

122
00:04:53,360 --> 00:04:57,800
algorithm which cannot<font color="#CCCCCC"> be implemented</font>

123
00:04:54,979 --> 00:05:00,020
<font color="#E5E5E5">without the use of custom algorithm in</font>

124
00:04:57,800 --> 00:05:03,229
data structures<font color="#E5E5E5"> Dijkstra for instance</font>

125
00:05:00,020 --> 00:05:05,359
<font color="#E5E5E5">for the one who knows and I will show</font>

126
00:05:03,229 --> 00:05:08,000
<font color="#E5E5E5">you a concrete example</font><font color="#CCCCCC"> for instance you</font>

127
00:05:05,360 --> 00:05:10,879
<font color="#E5E5E5">have let's say you have a canvas so</font><font color="#CCCCCC"> when</font>

128
00:05:08,000 --> 00:05:12,919
html5 canvas<font color="#E5E5E5"> and you will draw points on</font>

129
00:05:10,879 --> 00:05:15,860
the canvas<font color="#E5E5E5"> and now you just want to</font>

130
00:05:12,919 --> 00:05:18,049
<font color="#CCCCCC">answer this precise</font><font color="#E5E5E5"> question my user has</font>

131
00:05:15,860 --> 00:05:20,180
his mouse on the screen<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want to</font>

132
00:05:18,050 --> 00:05:22,460
know if the mouse<font color="#CCCCCC"> is on</font><font color="#E5E5E5"> a node or a</font>

133
00:05:20,180 --> 00:05:25,190
point<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this seems trivial and in the</font>

134
00:05:22,460 --> 00:05:27,620
Dom it's really easy to<font color="#CCCCCC"> do but in canvas</font>

135
00:05:25,190 --> 00:05:29,870
the naive approach is to test in an

136
00:05:27,620 --> 00:05:32,509
array all your points<font color="#CCCCCC"> as they is this</font>

137
00:05:29,870 --> 00:05:34,789
node under<font color="#E5E5E5"> my cursor</font><font color="#CCCCCC"> no is this node</font>

138
00:05:32,509 --> 00:05:36,710
under<font color="#E5E5E5"> my cursor no and so on and so</font>

139
00:05:34,789 --> 00:05:39,860
forth<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the more points</font><font color="#E5E5E5"> you have the</font>

140
00:05:36,710 --> 00:05:41,568
longest<font color="#E5E5E5"> it will take so then you will</font>

141
00:05:39,860 --> 00:05:42,560
<font color="#CCCCCC">have to implement a structure which is</font>

142
00:05:41,569 --> 00:05:45,560
<font color="#CCCCCC">called a quadtree</font>

143
00:05:42,560 --> 00:05:47,659
which is actually a<font color="#E5E5E5"> recursive partition</font>

144
00:05:45,560 --> 00:05:50,180
of<font color="#CCCCCC"> the space</font><font color="#E5E5E5"> and so you will just like</font>

145
00:05:47,659 --> 00:05:54,409
<font color="#E5E5E5">distant recursively into the tree to</font>

146
00:05:50,180 --> 00:05:56,210
find<font color="#E5E5E5"> the nodes you need to to check so</font>

147
00:05:54,409 --> 00:05:57,949
basically it will change your linear

148
00:05:56,210 --> 00:06:01,818
time access into something which is<font color="#E5E5E5"> more</font>

149
00:05:57,949 --> 00:06:04,190
like logarithmic time<font color="#CCCCCC"> access so that was</font>

150
00:06:01,819 --> 00:06:06,349
the second point so<font color="#CCCCCC"> first</font><font color="#E5E5E5"> point is</font>

151
00:06:04,190 --> 00:06:08,240
bookkeeping<font color="#CCCCCC"> and abstraction is good the</font>

152
00:06:06,349 --> 00:06:10,370
second point is<font color="#CCCCCC"> arrays an object will</font>

153
00:06:08,240 --> 00:06:15,860
only get you<font color="#CCCCCC"> so far</font><font color="#E5E5E5"> and you will need</font>

154
00:06:10,370 --> 00:06:17,659
custom data structures so the<font color="#E5E5E5"> question</font>

155
00:06:15,860 --> 00:06:19,310
is what<font color="#CCCCCC"> are the challenges here when you</font>

156
00:06:17,659 --> 00:06:21,620
try to<font color="#E5E5E5"> implement data structures on</font>

157
00:06:19,310 --> 00:06:23,719
JavaScript<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you could implement</font>

158
00:06:21,620 --> 00:06:25,849
<font color="#E5E5E5">data structures the old way like in C</font>

159
00:06:23,719 --> 00:06:27,199
C++ and<font color="#E5E5E5"> so on and it's quite easy to do</font>

160
00:06:25,849 --> 00:06:28,909
<font color="#E5E5E5">but in JavaScript</font><font color="#CCCCCC"> you have got some</font>

161
00:06:27,199 --> 00:06:32,029
you've got some traps and some<font color="#E5E5E5"> pitfalls</font>

162
00:06:28,909 --> 00:06:33,529
<font color="#E5E5E5">that you need to avoid</font><font color="#CCCCCC"> and try to take a</font>

163
00:06:32,029 --> 00:06:35,960
step back to be<font color="#E5E5E5"> sure what are the</font>

164
00:06:33,529 --> 00:06:39,409
challenges here so the first one<font color="#E5E5E5"> is that</font>

165
00:06:35,960 --> 00:06:41,899
we JavaScript developers are handling<font color="#E5E5E5"> a</font>

166
00:06:39,409 --> 00:06:43,670
language which<font color="#E5E5E5"> is interpreted</font><font color="#CCCCCC"> it's not</font>

167
00:06:41,899 --> 00:06:45,320
compiled so

168
00:06:43,670 --> 00:06:48,080
we are far from<font color="#E5E5E5"> the metal so we can't</font>

169
00:06:45,320 --> 00:06:50,659
<font color="#E5E5E5">really</font><font color="#CCCCCC"> know what's happening</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only</font>

170
00:06:48,080 --> 00:06:52,580
thing is we<font color="#CCCCCC"> have no control over the</font>

171
00:06:50,660 --> 00:06:55,820
<font color="#CCCCCC">memory layout and how the memory is</font>

172
00:06:52,580 --> 00:06:58,490
organized by the<font color="#E5E5E5"> interpreter</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also we</font>

173
00:06:55,820 --> 00:07:00,170
have no control<font color="#CCCCCC"> ish over</font><font color="#E5E5E5"> garbage</font>

174
00:06:58,490 --> 00:07:02,450
collection garbage<font color="#E5E5E5"> collection is a</font>

175
00:07:00,170 --> 00:07:04,700
system<font color="#CCCCCC"> that will like clean a news</font>

176
00:07:02,450 --> 00:07:07,130
memory<font color="#E5E5E5"> automatically for you and it's</font>

177
00:07:04,700 --> 00:07:09,289
quite painful<font color="#CCCCCC"> to do something which can</font>

178
00:07:07,130 --> 00:07:12,290
control<font color="#CCCCCC"> the logic of</font><font color="#E5E5E5"> this because it</font>

179
00:07:09,290 --> 00:07:13,940
will slow down<font color="#CCCCCC"> your code another</font>

180
00:07:12,290 --> 00:07:16,820
<font color="#E5E5E5">challenge is that we all use</font>

181
00:07:13,940 --> 00:07:18,860
just-in-time compilation schemes<font color="#E5E5E5"> and</font>

182
00:07:16,820 --> 00:07:21,409
optimizing engines such as gecko<font color="#E5E5E5"> and</font>

183
00:07:18,860 --> 00:07:23,330
Firefox and v8<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Chrome</font><font color="#E5E5E5"> and those have</font>

184
00:07:21,410 --> 00:07:24,710
their<font color="#E5E5E5"> own logic and they will transform</font>

185
00:07:23,330 --> 00:07:26,539
your code<font color="#E5E5E5"> into something that is really</font>

186
00:07:24,710 --> 00:07:28,789
<font color="#CCCCCC">alien to you and you don't</font><font color="#E5E5E5"> have any</font>

187
00:07:26,540 --> 00:07:30,740
control<font color="#E5E5E5"> on</font><font color="#CCCCCC"> what they will do</font><font color="#E5E5E5"> so how do</font>

188
00:07:28,790 --> 00:07:33,170
you do

189
00:07:30,740 --> 00:07:35,870
do you like implement<font color="#CCCCCC"> something which is</font>

190
00:07:33,170 --> 00:07:37,610
efficient<font color="#E5E5E5"> so basically the thing is the</font>

191
00:07:35,870 --> 00:07:40,720
<font color="#E5E5E5">gist here is that benchmarking code</font>

192
00:07:37,610 --> 00:07:43,670
accurately in<font color="#E5E5E5"> JavaScript is pretty hard</font>

193
00:07:40,720 --> 00:07:45,470
but it doesn't mean<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we cannot do it</font>

194
00:07:43,670 --> 00:07:47,240
and it<font color="#E5E5E5"> doesn't mean that</font><font color="#CCCCCC"> we cannot be</font>

195
00:07:45,470 --> 00:07:49,280
clever about it<font color="#E5E5E5"> there is a lot of people</font>

196
00:07:47,240 --> 00:07:51,680
and<font color="#CCCCCC"> in internet</font><font color="#E5E5E5"> that will argue that</font>

197
00:07:49,280 --> 00:07:53,179
<font color="#E5E5E5">since we cannot know anything it doesn't</font>

198
00:07:51,680 --> 00:07:54,590
matter anymore and you don't<font color="#CCCCCC"> have to</font>

199
00:07:53,180 --> 00:07:56,390
optimize code because all this<font color="#E5E5E5"> is</font>

200
00:07:54,590 --> 00:07:59,840
pointless<font color="#E5E5E5"> and we are all going to</font><font color="#CCCCCC"> die in</font>

201
00:07:56,390 --> 00:08:01,880
the void<font color="#CCCCCC"> and</font><font color="#E5E5E5"> oblivion so don't do that</font>

202
00:07:59,840 --> 00:08:03,890
<font color="#E5E5E5">so I'm going to give you some</font>

203
00:08:01,880 --> 00:08:06,230
implementation tips<font color="#E5E5E5"> so generic</font>

204
00:08:03,890 --> 00:08:08,539
information<font color="#E5E5E5"> implementing implementation</font>

205
00:08:06,230 --> 00:08:10,280
tips on how<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to like implement</font>

206
00:08:08,540 --> 00:08:13,580
data structures efficiently in

207
00:08:10,280 --> 00:08:15,619
JavaScript<font color="#E5E5E5"> without being killed by</font><font color="#CCCCCC"> the</font>

208
00:08:13,580 --> 00:08:20,510
engine and we<font color="#CCCCCC"> are going to</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font>

209
00:08:15,620 --> 00:08:24,140
outsmart<font color="#E5E5E5"> the ng anyway so first thing is</font>

210
00:08:20,510 --> 00:08:26,060
minimize your lookups so look up what is

211
00:08:24,140 --> 00:08:27,800
<font color="#E5E5E5">the look up look up is if you need to</font>

212
00:08:26,060 --> 00:08:30,590
<font color="#CCCCCC">access an object property if you need to</font>

213
00:08:27,800 --> 00:08:32,930
<font color="#CCCCCC">access</font><font color="#E5E5E5"> to access for instance a key in a</font>

214
00:08:30,590 --> 00:08:34,880
map or in a set<font color="#E5E5E5"> etcetera those things</font>

215
00:08:32,929 --> 00:08:37,640
are the most costly thing in

216
00:08:34,880 --> 00:08:39,860
JavaScript<font color="#CCCCCC"> so if you minimize</font><font color="#E5E5E5"> this you</font>

217
00:08:37,640 --> 00:08:41,600
will go<font color="#CCCCCC"> up in performance</font><font color="#E5E5E5"> for instance</font>

218
00:08:39,860 --> 00:08:43,430
here you've got an<font color="#E5E5E5"> example where in the</font>

219
00:08:41,600 --> 00:08:45,320
graph I just want to check some

220
00:08:43,429 --> 00:08:47,260
attribute<font color="#E5E5E5"> of a node and the nodes are</font>

221
00:08:45,320 --> 00:08:50,510
stored in a map<font color="#E5E5E5"> so what I do is that I</font>

222
00:08:47,260 --> 00:08:52,069
first<font color="#E5E5E5"> check that</font><font color="#CCCCCC"> the map has the node to</font>

223
00:08:50,510 --> 00:08:55,189
be sure I'm not<font color="#E5E5E5"> doing something which</font><font color="#CCCCCC"> is</font>

224
00:08:52,070 --> 00:08:56,910
<font color="#E5E5E5">not</font><font color="#CCCCCC"> possible and then I get the node so</font>

225
00:08:55,190 --> 00:08:59,340
there I did two lookups

226
00:08:56,910 --> 00:09:02,459
this is bad<font color="#CCCCCC"> so here</font><font color="#E5E5E5"> I only made one</font>

227
00:08:59,340 --> 00:09:04,910
because I<font color="#E5E5E5"> just get the note</font><font color="#CCCCCC"> I infer from</font>

228
00:09:02,460 --> 00:09:07,620
the fact that the<font color="#E5E5E5"> data is undefined that</font>

229
00:09:04,910 --> 00:09:10,230
<font color="#CCCCCC">the note</font><font color="#E5E5E5"> doesn't exist in</font><font color="#CCCCCC"> that song</font><font color="#E5E5E5"> so I</font>

230
00:09:07,620 --> 00:09:12,270
made one look up and if you do a quick

231
00:09:10,230 --> 00:09:13,890
benchmark about it<font color="#E5E5E5"> you will see that</font>

232
00:09:12,270 --> 00:09:16,800
it's<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> straightforward to</font>

233
00:09:13,890 --> 00:09:20,270
<font color="#CCCCCC">look</font><font color="#E5E5E5"> ups is 30 milliseconds and</font><font color="#CCCCCC"> one look</font>

234
00:09:16,800 --> 00:09:23,609
up is 15 so it's quite half of the time

235
00:09:20,270 --> 00:09:26,010
<font color="#CCCCCC">so the point here is that</font><font color="#E5E5E5"> the engine is</font>

236
00:09:23,610 --> 00:09:28,560
<font color="#E5E5E5">really clever but it's not that lever</font>

237
00:09:26,010 --> 00:09:30,660
<font color="#CCCCCC">it's a bit</font><font color="#E5E5E5"> dumb still so it improves</font>

238
00:09:28,560 --> 00:09:32,069
<font color="#E5E5E5">frequently though so you have to</font>

239
00:09:30,660 --> 00:09:34,740
benchmark things to be sure<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> are</font>

240
00:09:32,070 --> 00:09:37,770
not<font color="#CCCCCC"> making</font><font color="#E5E5E5"> something which is stupid so</font>

241
00:09:34,740 --> 00:09:41,610
the approach which is like oh I'm going

242
00:09:37,770 --> 00:09:43,199
<font color="#E5E5E5">to go to code like</font><font color="#CCCCCC"> a Dirk</font><font color="#E5E5E5"> or just I will</font>

243
00:09:41,610 --> 00:09:45,470
make<font color="#E5E5E5"> bat code and the engine will clean</font>

244
00:09:43,200 --> 00:09:50,240
<font color="#CCCCCC">up for</font><font color="#E5E5E5"> me and do things which are like</font>

245
00:09:45,470 --> 00:09:50,240
blazing fast<font color="#E5E5E5"> is stupid it won't work</font>

246
00:09:51,290 --> 00:09:57,959
so first thing<font color="#E5E5E5"> don't use too much</font>

247
00:09:54,720 --> 00:09:59,850
<font color="#E5E5E5">lookups the second tip here is creating</font>

248
00:09:57,960 --> 00:10:01,860
objects and allocating memory<font color="#E5E5E5"> in</font>

249
00:09:59,850 --> 00:10:05,400
JavaScript like in any language is very

250
00:10:01,860 --> 00:10:07,650
<font color="#E5E5E5">costly so</font><font color="#CCCCCC"> avoid allocating object when</font>

251
00:10:05,400 --> 00:10:10,020
<font color="#E5E5E5">you don't need to allocate</font><font color="#CCCCCC"> objects avoid</font>

252
00:10:07,650 --> 00:10:11,910
recreating<font color="#CCCCCC"> reg X's for instance if you</font>

253
00:10:10,020 --> 00:10:15,150
create reg X's in<font color="#E5E5E5"> the function you will</font>

254
00:10:11,910 --> 00:10:17,730
have bad issues and avoid nesting

255
00:10:15,150 --> 00:10:18,900
function when<font color="#E5E5E5"> you can so concretely this</font>

256
00:10:17,730 --> 00:10:22,500
look<font color="#CCCCCC"> left like this</font>

257
00:10:18,900 --> 00:10:24,300
this is bad<font color="#CCCCCC"> this is good so just upload</font>

258
00:10:22,500 --> 00:10:26,180
the reg<font color="#E5E5E5"> X outside the function</font><font color="#CCCCCC"> so that</font>

259
00:10:24,300 --> 00:10:30,359
the engine won't be created each time

260
00:10:26,180 --> 00:10:32,790
here it's very<font color="#CCCCCC"> very bad so you have an</font>

261
00:10:30,360 --> 00:10:34,560
area<font color="#CCCCCC"> for it</font><font color="#E5E5E5"> you iterate in here just</font>

262
00:10:32,790 --> 00:10:37,079
here because<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are nesting the loop</font>

263
00:10:34,560 --> 00:10:43,109
you are<font color="#E5E5E5"> going to create one function or</font>

264
00:10:37,080 --> 00:10:45,420
 element in your array so third

265
00:10:43,110 --> 00:10:47,190
thing mixing types is really bad<font color="#CCCCCC"> in</font>

266
00:10:45,420 --> 00:10:48,870
<font color="#E5E5E5">JavaScript you don't mix type here</font>

267
00:10:47,190 --> 00:10:53,550
you've got an<font color="#E5E5E5"> example which is a bit</font>

268
00:10:48,870 --> 00:10:56,010
distorted<font color="#E5E5E5"> so oh that's too bad</font>

269
00:10:53,550 --> 00:10:58,310
<font color="#CCCCCC">okay so that's a GTR anyway so get an</font>

270
00:10:56,010 --> 00:11:00,990
<font color="#E5E5E5">array which contains number strings</font>

271
00:10:58,310 --> 00:11:03,599
strings looking a lot like numbers<font color="#E5E5E5"> and</font>

272
00:11:00,990 --> 00:11:04,200
this will mess up v8 for instance you've

273
00:11:03,600 --> 00:11:06,930
got<font color="#CCCCCC"> a</font><font color="#E5E5E5"> regex</font>

274
00:11:04,200 --> 00:11:09,540
<font color="#E5E5E5">a</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> pattern object so if someone does</font>

275
00:11:06,930 --> 00:11:10,829
that<font color="#E5E5E5"> here I want to meet you honestly</font>

276
00:11:09,540 --> 00:11:14,819
<font color="#E5E5E5">because I don't understand</font>

277
00:11:10,830 --> 00:11:16,500
you would<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> so next</font><font color="#CCCCCC"> tip</font>

278
00:11:14,820 --> 00:11:19,320
and this<font color="#E5E5E5"> is actually my favorite</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> is</font>

279
00:11:16,500 --> 00:11:21,769
the poor man's<font color="#CCCCCC"> Malik so Malik in</font><font color="#E5E5E5"> C is a</font>

280
00:11:19,320 --> 00:11:25,350
way to like to allocate some piece of

281
00:11:21,769 --> 00:11:27,660
contiguous memory<font color="#E5E5E5"> and so the gist is the</font>

282
00:11:25,350 --> 00:11:29,640
following<font color="#CCCCCC"> so in JavaScript recently we</font>

283
00:11:27,660 --> 00:11:31,890
had a new thing and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> shine anything</font>

284
00:11:29,640 --> 00:11:34,079
which are byte arrays and typed by the

285
00:11:31,890 --> 00:11:37,620
<font color="#E5E5E5">Rays which means that you can allocate</font>

286
00:11:34,079 --> 00:11:39,479
an array of<font color="#E5E5E5"> n</font><font color="#CCCCCC"> elements using</font><font color="#E5E5E5"> the given</font>

287
00:11:37,620 --> 00:11:44,010
number type you<font color="#E5E5E5"> want for instance you</font>

288
00:11:39,480 --> 00:11:46,290
have<font color="#E5E5E5"> you unsigned integer</font><font color="#CCCCCC"> eight array</font>

289
00:11:44,010 --> 00:11:49,380
you've got float 32<font color="#E5E5E5"> array and you have a</font>

290
00:11:46,290 --> 00:11:51,449
lot<font color="#CCCCCC"> of types</font><font color="#E5E5E5"> and you can like simulate a</font>

291
00:11:49,380 --> 00:11:53,220
kind of memory<font color="#E5E5E5"> allocation with that and</font>

292
00:11:51,450 --> 00:11:57,240
so you can be clever about it<font color="#E5E5E5"> and cheat</font>

293
00:11:53,220 --> 00:12:00,930
a little<font color="#CCCCCC"> bit so my my point here is we</font>

294
00:11:57,240 --> 00:12:02,850
can<font color="#E5E5E5"> implement our own pointer systems so</font>

295
00:12:00,930 --> 00:12:05,550
you can have your<font color="#E5E5E5"> own like</font><font color="#CCCCCC"> C in</font>

296
00:12:02,850 --> 00:12:06,959
JavaScript<font color="#E5E5E5"> your own way and this will</font>

297
00:12:05,550 --> 00:12:11,579
speed<font color="#E5E5E5"> up things and this will make</font>

298
00:12:06,959 --> 00:12:13,469
memory really lighter so let's use a

299
00:12:11,579 --> 00:12:15,839
<font color="#E5E5E5">concrete example to explain that because</font>

300
00:12:13,470 --> 00:12:19,950
<font color="#E5E5E5">I guess it's a bit obscure so who knows</font>

301
00:12:15,839 --> 00:12:22,440
here what a linked list<font color="#E5E5E5"> is okay that's a</font>

302
00:12:19,950 --> 00:12:25,529
fine thing<font color="#CCCCCC"> so a linked list</font><font color="#E5E5E5"> is just like</font>

303
00:12:22,440 --> 00:12:27,690
<font color="#E5E5E5">nodes linked to the one another with the</font>

304
00:12:25,529 --> 00:12:29,730
pointer here<font color="#E5E5E5"> which points to the</font><font color="#CCCCCC"> next</font>

305
00:12:27,690 --> 00:12:32,670
item so here you've got<font color="#CCCCCC"> a</font><font color="#E5E5E5"> basic list so</font>

306
00:12:29,730 --> 00:12:34,890
A<font color="#CCCCCC"> to B</font><font color="#E5E5E5"> to C to the void in the</font><font color="#CCCCCC"> oblivion</font>

307
00:12:32,670 --> 00:12:37,740
of life<font color="#CCCCCC"> and so under it you've got</font>

308
00:12:34,890 --> 00:12:39,149
object references as pointers because<font color="#CCCCCC"> in</font>

309
00:12:37,740 --> 00:12:40,829
<font color="#CCCCCC">JavaScript you don't have pointers you</font>

310
00:12:39,149 --> 00:12:43,050
<font color="#E5E5E5">don't have C pointers and so on so the</font>

311
00:12:40,829 --> 00:12:47,459
<font color="#CCCCCC">only way</font><font color="#E5E5E5"> to simulate this is actually to</font>

312
00:12:43,050 --> 00:12:49,979
use object properties so basically any

313
00:12:47,459 --> 00:12:51,510
<font color="#E5E5E5">JavaScript the person would do it in</font>

314
00:12:49,980 --> 00:12:54,209
this way<font color="#E5E5E5"> so create a node which is</font><font color="#CCCCCC"> a</font>

315
00:12:51,510 --> 00:12:57,270
class<font color="#E5E5E5"> a kind of class and have next</font>

316
00:12:54,209 --> 00:13:00,510
<font color="#CCCCCC">property which will</font><font color="#E5E5E5"> be a reference to</font>

317
00:12:57,270 --> 00:13:02,640
<font color="#CCCCCC">the next to the next node and</font><font color="#E5E5E5"> so if you</font>

318
00:13:00,510 --> 00:13:05,130
need<font color="#E5E5E5"> to change the pointer</font><font color="#CCCCCC"> you just do</font>

319
00:13:02,640 --> 00:13:08,010
<font color="#CCCCCC">not tap next and you allocate the thing</font>

320
00:13:05,130 --> 00:13:09,990
this<font color="#E5E5E5"> is the same way to do things this</font>

321
00:13:08,010 --> 00:13:12,810
is<font color="#E5E5E5"> the insane way to do things but it's</font>

322
00:13:09,990 --> 00:13:14,579
way faster<font color="#E5E5E5"> so basically we are</font><font color="#CCCCCC"> going to</font>

323
00:13:12,810 --> 00:13:18,119
do a linked list<font color="#E5E5E5"> but we are going to</font>

324
00:13:14,579 --> 00:13:21,689
roll our own pointers so you have to

325
00:13:18,120 --> 00:13:24,330
keep an index which will be the head<font color="#E5E5E5"> and</font>

326
00:13:21,690 --> 00:13:25,740
<font color="#E5E5E5">you will keep an array in which</font>

327
00:13:24,330 --> 00:13:29,130
you will have your values for instance

328
00:13:25,740 --> 00:13:31,170
<font color="#CCCCCC">nbac and in another array which will be</font>

329
00:13:29,130 --> 00:13:33,600
a<font color="#CCCCCC"> battery for instance and here you</font><font color="#E5E5E5"> only</font>

330
00:13:31,170 --> 00:13:36,810
need the UN you<font color="#E5E5E5"> int</font><font color="#CCCCCC"> 8ra</font>

331
00:13:33,600 --> 00:13:38,760
you will have an index<font color="#E5E5E5"> pointing toward</font>

332
00:13:36,810 --> 00:13:42,150
the<font color="#E5E5E5"> next item in the list so for</font>

333
00:13:38,760 --> 00:13:43,860
instance<font color="#CCCCCC"> 1 2 0</font><font color="#E5E5E5"> so this means that if</font><font color="#CCCCCC"> you</font>

334
00:13:42,150 --> 00:13:46,860
need<font color="#CCCCCC"> to check which is</font><font color="#E5E5E5"> the next</font><font color="#CCCCCC"> item</font>

335
00:13:43,860 --> 00:13:50,250
after<font color="#E5E5E5"> B you check the index of be in</font>

336
00:13:46,860 --> 00:13:54,170
next<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is 2 and</font><font color="#E5E5E5"> then you check here</font>

337
00:13:50,250 --> 00:13:57,180
<font color="#E5E5E5">index 2 it's here so the next item is C</font>

338
00:13:54,170 --> 00:14:00,650
so this<font color="#CCCCCC"> is how you can try to</font><font color="#E5E5E5"> implement</font>

339
00:13:57,180 --> 00:14:04,949
your own<font color="#E5E5E5"> C pointers in JavaScript</font><font color="#CCCCCC"> so</font>

340
00:14:00,650 --> 00:14:06,540
<font color="#CCCCCC">let's use more concrete example to tell</font>

341
00:14:04,950 --> 00:14:08,220
you why you<font color="#E5E5E5"> would do that because linked</font>

342
00:14:06,540 --> 00:14:10,319
lists are quite useless in most

343
00:14:08,220 --> 00:14:12,600
languages<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do nice things</font>

344
00:14:10,320 --> 00:14:15,210
<font color="#E5E5E5">with this so I don't</font><font color="#CCCCCC"> know if you know</font>

345
00:14:12,600 --> 00:14:18,240
about<font color="#E5E5E5"> a structure which is called an LRU</font>

346
00:14:15,210 --> 00:14:21,060
cache<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> LRU cache is actually an</font>

347
00:14:18,240 --> 00:14:23,940
<font color="#CCCCCC">object</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> has a which has a fixed size</font>

348
00:14:21,060 --> 00:14:26,459
capacity<font color="#E5E5E5"> in which you cannot like set</font>

349
00:14:23,940 --> 00:14:28,290
more than<font color="#E5E5E5"> a fixed number of keys it's a</font>

350
00:14:26,460 --> 00:14:30,720
good thing when<font color="#E5E5E5"> you have like a</font>

351
00:14:28,290 --> 00:14:33,150
<font color="#CCCCCC">constrain environment when memory is</font>

352
00:14:30,720 --> 00:14:35,850
actually<font color="#CCCCCC"> really critical and you need to</font>

353
00:14:33,150 --> 00:14:38,189
save up<font color="#CCCCCC"> some RAM</font><font color="#E5E5E5"> the idea here</font><font color="#CCCCCC"> is that</font>

354
00:14:35,850 --> 00:14:40,050
you only want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep the most frequent</font>

355
00:14:38,190 --> 00:14:42,030
key in the<font color="#CCCCCC"> dictionary or in the object</font>

356
00:14:40,050 --> 00:14:44,969
so<font color="#E5E5E5"> you can like alleviate the other one</font>

357
00:14:42,030 --> 00:14:47,850
in<font color="#E5E5E5"> the in the map so for instance if we</font>

358
00:14:44,970 --> 00:14:50,280
<font color="#CCCCCC">had a new key</font><font color="#E5E5E5"> and the object is already</font>

359
00:14:47,850 --> 00:14:52,980
<font color="#E5E5E5">full we are going to throw away the list</font>

360
00:14:50,280 --> 00:14:56,880
<font color="#E5E5E5">recently used one and this is why it's</font>

361
00:14:52,980 --> 00:14:59,190
called<font color="#E5E5E5"> an LRU cache so to implement an</font>

362
00:14:56,880 --> 00:15:02,280
LRU cache what you have to do is to is

363
00:14:59,190 --> 00:15:04,440
to maintain an object key to value and

364
00:15:02,280 --> 00:15:06,390
you<font color="#E5E5E5"> have to maintain a doubly linked</font>

365
00:15:04,440 --> 00:15:08,430
list when you can go<font color="#E5E5E5"> forward and</font>

366
00:15:06,390 --> 00:15:09,960
backward<font color="#E5E5E5"> because when you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to</font>

367
00:15:08,430 --> 00:15:11,939
like<font color="#E5E5E5"> add a new thing and you need to</font>

368
00:15:09,960 --> 00:15:14,220
<font color="#E5E5E5">throw away away</font><font color="#CCCCCC"> something you are going</font>

369
00:15:11,940 --> 00:15:17,010
to take the last<font color="#CCCCCC"> element and tuck it</font>

370
00:15:14,220 --> 00:15:20,100
away<font color="#E5E5E5"> and take the first</font><font color="#CCCCCC"> element and put</font>

371
00:15:17,010 --> 00:15:21,750
it on top<font color="#CCCCCC"> of the list</font><font color="#E5E5E5"> and in the same</font>

372
00:15:20,100 --> 00:15:23,580
way<font color="#CCCCCC"> if you are</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> an element</font>

373
00:15:21,750 --> 00:15:25,410
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> list you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to take it</font>

374
00:15:23,580 --> 00:15:27,600
away from<font color="#E5E5E5"> the list put it back on front</font>

375
00:15:25,410 --> 00:15:31,170
<font color="#E5E5E5">and so on and so you can maintain a list</font>

376
00:15:27,600 --> 00:15:34,080
of used items based on<font color="#E5E5E5"> the least</font>

377
00:15:31,170 --> 00:15:36,000
recently<font color="#CCCCCC"> used etc</font><font color="#E5E5E5"> so what you would do</font>

378
00:15:34,080 --> 00:15:37,440
in this precise case you would have<font color="#CCCCCC"> a</font>

379
00:15:36,000 --> 00:15:41,010
pointer to<font color="#CCCCCC"> the head</font>

380
00:15:37,440 --> 00:15:42,000
to<font color="#CCCCCC"> detail an array of pointer pointed to</font>

381
00:15:41,010 --> 00:15:44,670
next<font color="#CCCCCC"> an array</font>

382
00:15:42,000 --> 00:15:48,480
pointing<font color="#E5E5E5"> to the previous item</font><font color="#CCCCCC"> and you</font>

383
00:15:44,670 --> 00:15:50,339
would actually<font color="#CCCCCC"> manage to do that</font><font color="#E5E5E5"> and so</font>

384
00:15:48,480 --> 00:15:53,100
you only<font color="#E5E5E5"> keep items</font><font color="#CCCCCC"> at the JavaScript</font>

385
00:15:50,340 --> 00:15:55,650
<font color="#CCCCCC">object pointing</font><font color="#E5E5E5"> the key to the pointer</font>

386
00:15:53,100 --> 00:15:58,800
<font color="#E5E5E5">and the pointer is just the index and</font>

387
00:15:55,650 --> 00:16:01,439
<font color="#E5E5E5">you</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> your values in an array and</font><font color="#CCCCCC"> so</font>

388
00:15:58,800 --> 00:16:05,040
it may<font color="#CCCCCC"> seem pointless but it's not so</font>

389
00:16:01,440 --> 00:16:07,680
here you've got<font color="#E5E5E5"> this approach used there</font>

390
00:16:05,040 --> 00:16:10,110
<font color="#E5E5E5">so it kind of beats everything that was</font>

391
00:16:07,680 --> 00:16:11,760
made<font color="#CCCCCC"> before</font><font color="#E5E5E5"> and the really good</font>

392
00:16:10,110 --> 00:16:13,740
<font color="#E5E5E5">advantage is that it does not allocate</font>

393
00:16:11,760 --> 00:16:15,569
<font color="#E5E5E5">it does not garbage collect you don't</font>

394
00:16:13,740 --> 00:16:19,200
have garbage<font color="#E5E5E5"> collection and it's really</font>

395
00:16:15,570 --> 00:16:22,590
really<font color="#CCCCCC"> light in memory so that's what</font>

396
00:16:19,200 --> 00:16:25,950
the<font color="#E5E5E5"> third and most interesting tips so</font>

397
00:16:22,590 --> 00:16:27,990
to go fast on the last tips<font color="#CCCCCC"> function</font>

398
00:16:25,950 --> 00:16:30,330
calls<font color="#E5E5E5"> are costly</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> JavaScript like in</font>

399
00:16:27,990 --> 00:16:32,850
any languages<font color="#E5E5E5"> so everything is costly in</font>

400
00:16:30,330 --> 00:16:35,550
<font color="#E5E5E5">life is hard so don't worry</font><font color="#CCCCCC"> so this</font>

401
00:16:32,850 --> 00:16:38,310
means that<font color="#E5E5E5"> usually a recursion is a</font>

402
00:16:35,550 --> 00:16:41,359
worse<font color="#E5E5E5"> idea than using iterative versions</font>

403
00:16:38,310 --> 00:16:44,130
<font color="#E5E5E5">using stacks so this for</font><font color="#CCCCCC"> instance</font>

404
00:16:41,360 --> 00:16:46,860
<font color="#E5E5E5">recursion scheme to traverse a binary</font>

405
00:16:44,130 --> 00:16:51,030
<font color="#CCCCCC">tree is</font><font color="#E5E5E5"> actually slower than doing this</font>

406
00:16:46,860 --> 00:16:53,400
strange alien but<font color="#E5E5E5"> your male mileage may</font>

407
00:16:51,030 --> 00:16:55,500
vary so please benchmark it because

408
00:16:53,400 --> 00:16:57,720
<font color="#E5E5E5">sometimes it is the case sometimes it's</font>

409
00:16:55,500 --> 00:17:02,070
not that's pointing back to<font color="#CCCCCC"> the</font>

410
00:16:57,720 --> 00:17:02,340
challenges<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> okay and so last</font>

411
00:17:02,070 --> 00:17:04,199
thing

412
00:17:02,340 --> 00:17:05,699
what about web<font color="#CCCCCC"> assembiy and so on</font>

413
00:17:04,199 --> 00:17:07,319
<font color="#E5E5E5">because we are</font><font color="#CCCCCC"> like oh yeah just</font><font color="#E5E5E5"> to be</font>

414
00:17:05,699 --> 00:17:09,240
<font color="#CCCCCC">served us but we have the faster things</font>

415
00:17:07,319 --> 00:17:12,030
<font color="#E5E5E5">so you've got a lots of shiny options</font>

416
00:17:09,240 --> 00:17:13,920
you have a<font color="#CCCCCC"> SMGs</font><font color="#E5E5E5"> you've got webassembly</font>

417
00:17:12,030 --> 00:17:16,470
and in<font color="#E5E5E5"> node.js for instance you can just</font>

418
00:17:13,920 --> 00:17:18,810
<font color="#E5E5E5">use like native C++ code and optimize</font>

419
00:17:16,470 --> 00:17:20,610
<font color="#E5E5E5">things but for data structure if you</font>

420
00:17:18,810 --> 00:17:23,639
need to keep a bridge to JavaScript<font color="#E5E5E5"> and</font>

421
00:17:20,609 --> 00:17:26,760
be able<font color="#CCCCCC"> to like use asset under</font>

422
00:17:23,640 --> 00:17:27,959
Jacqueline<font color="#E5E5E5"> dev and JavaScript</font><font color="#CCCCCC"> side the</font>

423
00:17:26,760 --> 00:17:30,510
issue is that communication<font color="#CCCCCC"> between</font>

424
00:17:27,959 --> 00:17:32,520
<font color="#E5E5E5">those and JavaScript has a really heavy</font>

425
00:17:30,510 --> 00:17:34,620
cost<font color="#E5E5E5"> so if you need to</font><font color="#CCCCCC"> do a lot</font><font color="#E5E5E5"> of</font>

426
00:17:32,520 --> 00:17:37,080
<font color="#E5E5E5">computation</font><font color="#CCCCCC"> on the web assembly side it</font>

427
00:17:34,620 --> 00:17:39,360
might<font color="#E5E5E5"> be a good perf boost if you need</font>

428
00:17:37,080 --> 00:17:40,980
to call<font color="#E5E5E5"> back and forth between the well</font>

429
00:17:39,360 --> 00:17:43,199
assembly<font color="#CCCCCC"> in JavaScript really really</font>

430
00:17:40,980 --> 00:17:45,060
fast<font color="#E5E5E5"> it will slow you down</font><font color="#CCCCCC"> it's</font>

431
00:17:43,200 --> 00:17:46,980
improving and for<font color="#E5E5E5"> instance in Firefox</font>

432
00:17:45,060 --> 00:17:50,399
<font color="#E5E5E5">those kind of performance when really up</font>

433
00:17:46,980 --> 00:17:51,420
but we<font color="#E5E5E5"> are not there</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> there yet so</font>

434
00:17:50,400 --> 00:17:56,880
either you do

435
00:17:51,420 --> 00:17:58,830
webassembly or you don't<font color="#E5E5E5"> okay so as a</font>

436
00:17:56,880 --> 00:18:01,680
conclusion<font color="#CCCCCC"> and to wrap up all we said</font>

437
00:17:58,830 --> 00:18:05,639
and<font color="#E5E5E5"> learn yes some parting</font><font color="#CCCCCC"> words</font>

438
00:18:01,680 --> 00:18:07,290
so yes<font color="#E5E5E5"> optimizing javascript is hard but</font>

439
00:18:05,640 --> 00:18:09,030
it does not mean<font color="#E5E5E5"> we cannot do it and</font>

440
00:18:07,290 --> 00:18:12,570
<font color="#E5E5E5">please do it we can do it</font>

441
00:18:09,030 --> 00:18:15,210
so<font color="#E5E5E5"> most tips I show you I show you here</font>

442
00:18:12,570 --> 00:18:19,080
are applicable to any kind of<font color="#CCCCCC"> high level</font>

443
00:18:15,210 --> 00:18:22,260
languages mostly but<font color="#CCCCCC"> javascript has its</font>

444
00:18:19,080 --> 00:18:24,990
own very kinks<font color="#CCCCCC"> I first since the battery</font>

445
00:18:22,260 --> 00:18:26,790
tips does not work in fact<font color="#CCCCCC"> on</font><font color="#E5E5E5"> if you try</font>

446
00:18:24,990 --> 00:18:28,950
to use<font color="#CCCCCC"> lists invitin to simulate this</font>

447
00:18:26,790 --> 00:18:30,450
kind<font color="#E5E5E5"> of pointer it will go bad</font><font color="#CCCCCC"> and if</font>

448
00:18:28,950 --> 00:18:32,760
you use numpy it's even worse<font color="#E5E5E5"> because</font>

449
00:18:30,450 --> 00:18:38,250
<font color="#CCCCCC">you have like the bridge between native</font>

450
00:18:32,760 --> 00:18:41,340
code and<font color="#CCCCCC"> python code and so the gist be</font>

451
00:18:38,250 --> 00:18:43,080
is as a conclusion<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> efficient your</font>

452
00:18:41,340 --> 00:18:45,720
code must be<font color="#CCCCCC"> stressed statically</font>

453
00:18:43,080 --> 00:18:47,879
interpretable<font color="#CCCCCC"> if you do that the engine</font>

454
00:18:45,720 --> 00:18:50,250
we will<font color="#CCCCCC"> have no hard decision to make</font>

455
00:18:47,880 --> 00:18:52,410
and if the engine<font color="#CCCCCC"> has no</font><font color="#E5E5E5"> hard decision</font>

456
00:18:50,250 --> 00:18:56,790
<font color="#CCCCCC">to make the engine will safely choose</font>

457
00:18:52,410 --> 00:18:58,530
the<font color="#E5E5E5"> best path to optimizer code so we</font>

458
00:18:56,790 --> 00:19:01,379
phrased<font color="#E5E5E5"> optimizing javascript is</font>

459
00:18:58,530 --> 00:19:04,410
squinting<font color="#E5E5E5"> a little and pretending really</font>

460
00:19:01,380 --> 00:19:06,990
hard<font color="#E5E5E5"> that the language is statically</font>

461
00:19:04,410 --> 00:19:10,740
typed and that the<font color="#E5E5E5"> language is</font><font color="#CCCCCC"> low-level</font>

462
00:19:06,990 --> 00:19:12,360
<font color="#E5E5E5">if you do that you will go fast so just</font>

463
00:19:10,740 --> 00:19:16,560
<font color="#CCCCCC">pretend</font><font color="#E5E5E5"> that javascript is</font><font color="#CCCCCC"> c and</font>

464
00:19:12,360 --> 00:19:17,729
everything will roll<font color="#CCCCCC"> okay and so</font><font color="#E5E5E5"> the</font>

465
00:19:16,560 --> 00:19:21,510
next frontier if you want to like

466
00:19:17,730 --> 00:19:23,550
improve text data structure is<font color="#CCCCCC"> that for</font>

467
00:19:21,510 --> 00:19:26,100
now<font color="#E5E5E5"> nobody has been able to beat</font>

468
00:19:23,550 --> 00:19:27,870
associative arrays in JavaScript<font color="#E5E5E5"> it</font>

469
00:19:26,100 --> 00:19:29,639
means that you cannot go faster<font color="#E5E5E5"> than the</font>

470
00:19:27,870 --> 00:19:32,879
map you cannot go faster<font color="#E5E5E5"> than the object</font>

471
00:19:29,640 --> 00:19:35,010
it's not<font color="#E5E5E5"> possible yet when do we</font><font color="#CCCCCC"> keep</font>

472
00:19:32,880 --> 00:19:36,870
<font color="#CCCCCC">alyou</font><font color="#E5E5E5"> Association but maybe with some</font>

473
00:19:35,010 --> 00:19:38,550
kind<font color="#E5E5E5"> of trees or some clever hashing</font>

474
00:19:36,870 --> 00:19:41,040
schemes we may be able<font color="#E5E5E5"> to beat</font><font color="#CCCCCC"> some</font>

475
00:19:38,550 --> 00:19:43,490
native optimization on the JavaScript

476
00:19:41,040 --> 00:19:46,440
<font color="#CCCCCC">side</font><font color="#E5E5E5"> by being clever</font>

477
00:19:43,490 --> 00:19:49,440
so please implement<font color="#CCCCCC"> away and use all the</font>

478
00:19:46,440 --> 00:19:52,080
<font color="#CCCCCC">steps</font><font color="#E5E5E5"> you like flourish and make a new</font>

479
00:19:49,440 --> 00:19:56,970
data<font color="#E5E5E5"> structure so we</font><font color="#CCCCCC"> can all go</font><font color="#E5E5E5"> lead a</font>

480
00:19:52,080 --> 00:19:59,520
happier<font color="#CCCCCC"> life so some references to end</font>

481
00:19:56,970 --> 00:20:01,770
and wrap<font color="#CCCCCC"> up</font><font color="#E5E5E5"> all those things so all the</font>

482
00:19:59,520 --> 00:20:04,290
examples<font color="#CCCCCC"> you've shown we're actually</font>

483
00:20:01,770 --> 00:20:05,158
taken from<font color="#E5E5E5"> the following libraries so if</font>

484
00:20:04,290 --> 00:20:06,869
you have<font color="#E5E5E5"> memorized</font>

485
00:20:05,159 --> 00:20:09,899
is a library implementing a<font color="#E5E5E5"> lot of data</font>

486
00:20:06,869 --> 00:20:13,649
structures in<font color="#E5E5E5"> JavaScript with the fancy</font>

487
00:20:09,899 --> 00:20:15,928
in impotent a fancy API is<font color="#E5E5E5"> in typescript</font>

488
00:20:13,649 --> 00:20:18,539
<font color="#E5E5E5">you've got</font><font color="#CCCCCC"> Bravo</font><font color="#E5E5E5"> G which deal with</font>

489
00:20:15,929 --> 00:20:20,460
graphs<font color="#CCCCCC"> and Sigma J</font><font color="#E5E5E5"> s which</font><font color="#CCCCCC"> is actually</font>

490
00:20:18,539 --> 00:20:23,609
graph rendering<font color="#CCCCCC"> engineered browser using</font>

491
00:20:20,460 --> 00:20:33,359
WebGL<font color="#CCCCCC"> as</font><font color="#E5E5E5"> in and so on so that's it</font>

492
00:20:23,609 --> 00:20:33,779
<font color="#CCCCCC">basically so thank you</font><font color="#E5E5E5"> for your thank</font>

493
00:20:33,359 --> 00:20:41,668
you<font color="#CCCCCC"> a lot</font>

494
00:20:33,779 --> 00:20:47,639
any questions what yeah this one this

495
00:20:41,669 --> 00:20:49,559
one<font color="#CCCCCC"> this one yeah thank you very</font><font color="#E5E5E5"> much</font>

496
00:20:47,639 --> 00:20:51,959
for the presentation<font color="#CCCCCC"> I get</font><font color="#E5E5E5"> to question</font>

497
00:20:49,559 --> 00:21:03,899
what's<font color="#E5E5E5"> your opinion about</font><font color="#CCCCCC"> babo</font><font color="#E5E5E5"> and</font>

498
00:20:51,960 --> 00:21:05,849
typescript<font color="#CCCCCC"> because it's - yeah so</font><font color="#E5E5E5"> I hear</font>

499
00:21:03,899 --> 00:21:08,699
I heard about typescript that what what

500
00:21:05,849 --> 00:21:12,928
<font color="#E5E5E5">was bum bubble bubble what is this</font><font color="#CCCCCC"> it</font>

501
00:21:08,700 --> 00:21:15,090
<font color="#CCCCCC">stands for</font><font color="#E5E5E5"> what okay so basically the</font>

502
00:21:12,929 --> 00:21:17,759
gist is a typescript will have no impact

503
00:21:15,090 --> 00:21:20,309
<font color="#E5E5E5">on your runtime because it's just on the</font>

504
00:21:17,759 --> 00:21:22,619
translation<font color="#E5E5E5"> time but basically if you</font>

505
00:21:20,309 --> 00:21:25,289
want<font color="#E5E5E5"> to write perform encode don't use</font>

506
00:21:22,619 --> 00:21:26,849
bubble because bubble will use by

507
00:21:25,289 --> 00:21:28,109
<font color="#CCCCCC">default some kind of helpers to ensure</font>

508
00:21:26,849 --> 00:21:29,729
that<font color="#E5E5E5"> the specs are respected and</font>

509
00:21:28,109 --> 00:21:31,080
sometimes those<font color="#E5E5E5"> helpers are function</font>

510
00:21:29,729 --> 00:21:33,450
which are<font color="#CCCCCC"> costly and you don't</font><font color="#E5E5E5"> have to</font>

511
00:21:31,080 --> 00:21:35,939
do that so either you transpile using

512
00:21:33,450 --> 00:21:37,739
the loose option in<font color="#E5E5E5"> bubble or you don't</font>

513
00:21:35,940 --> 00:21:41,940
<font color="#E5E5E5">choose it and you write ACMA</font><font color="#CCCCCC"> five</font>

514
00:21:37,739 --> 00:21:44,099
<font color="#CCCCCC">squares because basically and my second</font>

515
00:21:41,940 --> 00:21:46,320
question<font color="#E5E5E5"> is what's your opinion because</font>

516
00:21:44,099 --> 00:21:49,799
from medium<font color="#CCCCCC"> case</font><font color="#E5E5E5"> a lot of articles about</font>

517
00:21:46,320 --> 00:21:55,229
how<font color="#CCCCCC"> Eggman scripts kills performance if</font>

518
00:21:49,799 --> 00:21:55,559
<font color="#CCCCCC">you only a transcript 5</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> your</font>

519
00:21:55,229 --> 00:21:57,960
<font color="#CCCCCC">ticket</font>

520
00:21:55,559 --> 00:22:01,408
your point would be<font color="#CCCCCC"> some people say that</font>

521
00:21:57,960 --> 00:22:04,769
<font color="#E5E5E5">if you use a class with</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> it yes here's</font>

522
00:22:01,409 --> 00:22:09,330
what out goes for example if<font color="#CCCCCC"> use</font><font color="#E5E5E5"> for the</font>

523
00:22:04,769 --> 00:22:11,429
each<font color="#CCCCCC"> one says</font><font color="#E5E5E5"> yeah yeah it's not about</font><font color="#CCCCCC"> X</font>

524
00:22:09,330 --> 00:22:12,899
<font color="#E5E5E5">max</font><font color="#CCCCCC"> for it 5 it's it's more generic</font>

525
00:22:11,429 --> 00:22:15,330
thing which is if you use for it

526
00:22:12,899 --> 00:22:17,518
performances<font color="#E5E5E5"> usually are bad</font><font color="#CCCCCC"> because the</font>

527
00:22:15,330 --> 00:22:18,509
loop will<font color="#CCCCCC"> always be faster</font><font color="#E5E5E5"> but it's not</font>

528
00:22:17,519 --> 00:22:21,839
<font color="#E5E5E5">related to weakness</font>

529
00:22:18,509 --> 00:22:24,659
<font color="#E5E5E5">six or five it's more like function</font>

530
00:22:21,839 --> 00:22:27,208
calls are<font color="#E5E5E5"> costly so don't</font><font color="#CCCCCC"> use them</font><font color="#E5E5E5"> they</font>

531
00:22:24,659 --> 00:22:30,599
follow up on<font color="#CCCCCC"> that functions coarsely</font>

532
00:22:27,209 --> 00:22:32,789
<font color="#E5E5E5">should we not use MapReduce</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> often I</font>

533
00:22:30,599 --> 00:22:34,559
use<font color="#CCCCCC"> it in application</font><font color="#E5E5E5"> code because I'm</font>

534
00:22:32,789 --> 00:22:36,929
like<font color="#E5E5E5"> everyone I don't like to do for</font>

535
00:22:34,559 --> 00:22:39,690
loops<font color="#E5E5E5"> it's a harsh way to do so</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> when</font>

536
00:22:36,929 --> 00:22:42,929
<font color="#E5E5E5">I write like optimization critical code</font>

537
00:22:39,690 --> 00:22:44,969
<font color="#E5E5E5">I don't but it's it's bit weird because</font>

538
00:22:42,929 --> 00:22:47,159
<font color="#CCCCCC">like in v8</font><font color="#E5E5E5"> like recently</font><font color="#CCCCCC"> Matt became</font>

539
00:22:44,969 --> 00:22:48,989
<font color="#E5E5E5">really fast and so it's okay but if you</font>

540
00:22:47,159 --> 00:22:51,329
<font color="#CCCCCC">need to shift code which will work in</font>

541
00:22:48,989 --> 00:22:53,579
different<font color="#E5E5E5"> node versions or in gecko or</font>

542
00:22:51,329 --> 00:23:04,979
<font color="#E5E5E5">so on you don't use</font><font color="#CCCCCC"> mad face</font><font color="#E5E5E5"> okay that's</font>

543
00:22:53,579 --> 00:23:07,289
all any other question<font color="#E5E5E5"> okay thank you</font>

544
00:23:04,979 --> 00:23:09,839
<font color="#CCCCCC">for presentation just one</font><font color="#E5E5E5"> question</font>

545
00:23:07,289 --> 00:23:12,779
regarding<font color="#E5E5E5"> a similar question</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the one</font>

546
00:23:09,839 --> 00:23:15,989
person already<font color="#E5E5E5"> asked about Babel</font>

547
00:23:12,779 --> 00:23:17,909
transpiler<font color="#E5E5E5"> so yes if we use transparent</font>

548
00:23:15,989 --> 00:23:20,969
like that it<font color="#CCCCCC"> really</font><font color="#E5E5E5"> hurt our</font>

549
00:23:17,909 --> 00:23:23,819
performances<font color="#E5E5E5"> but could be more</font>

550
00:23:20,969 --> 00:23:27,929
<font color="#E5E5E5">maintainable</font><font color="#CCCCCC"> so yeah and</font><font color="#E5E5E5"> also some other</font>

551
00:23:23,819 --> 00:23:30,899
of your solutions look smart and but

552
00:23:27,929 --> 00:23:32,489
where's the boundary between performance

553
00:23:30,899 --> 00:23:34,369
and maintainability<font color="#E5E5E5"> of project</font>

554
00:23:32,489 --> 00:23:37,679
<font color="#CCCCCC">especially if more people</font><font color="#E5E5E5"> are working on</font>

555
00:23:34,369 --> 00:23:40,978
sure the boundary<font color="#E5E5E5"> is yours to draw but</font>

556
00:23:37,679 --> 00:23:43,679
<font color="#E5E5E5">basically the like data structures need</font>

557
00:23:40,979 --> 00:23:45,599
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be optimized like really optimized</font><font color="#CCCCCC"> so</font>

558
00:23:43,679 --> 00:23:47,999
I will write code which is less<font color="#CCCCCC"> mental</font>

559
00:23:45,599 --> 00:23:50,189
<font color="#E5E5E5">maintainable in a way</font><font color="#CCCCCC"> but that's because</font>

560
00:23:47,999 --> 00:23:51,929
I have to pay to<font color="#E5E5E5"> be sure that it's the</font>

561
00:23:50,190 --> 00:23:53,489
<font color="#CCCCCC">best but</font><font color="#E5E5E5"> for instance if I write</font>

562
00:23:51,929 --> 00:23:56,419
application code<font color="#E5E5E5"> I will never do those</font>

563
00:23:53,489 --> 00:23:58,679
kind of silly<font color="#CCCCCC"> things I don't</font><font color="#E5E5E5"> do that so</font>

564
00:23:56,419 --> 00:24:01,049
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> a structure it's okay to have</font>

565
00:23:58,679 --> 00:24:05,899
<font color="#E5E5E5">this kind</font><font color="#CCCCCC"> of weird code but for anything</font>

566
00:24:01,049 --> 00:24:05,899
over<font color="#E5E5E5"> that I guess it's not</font><font color="#CCCCCC"> initiative</font>

567
00:24:07,369 --> 00:24:12,408
<font color="#CCCCCC">last question somebody okay</font>

568
00:24:21,180 --> 00:24:26,490
<font color="#E5E5E5">hey do you use like some</font>

