1
00:00:04,730 --> 00:00:10,070
good morning and thank you all<font color="#CCCCCC"> for</font>

2
00:00:06,800 --> 00:00:13,430
coming<font color="#CCCCCC"> on a Sunday morning my name is</font>

3
00:00:10,070 --> 00:00:15,559
got a lair and I would like<font color="#E5E5E5"> to start</font>

4
00:00:13,430 --> 00:00:17,990
<font color="#E5E5E5">with a quick raise of hands from those</font>

5
00:00:15,559 --> 00:00:23,060
of you who have used<font color="#E5E5E5"> persistent storage</font>

6
00:00:17,990 --> 00:00:24,459
<font color="#E5E5E5">in your</font><font color="#CCCCCC"> container workloads it should be</font>

7
00:00:23,060 --> 00:00:28,009
on<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> thanks</font>

8
00:00:24,460 --> 00:00:30,530
<font color="#CCCCCC">okay so seen that many racing hats</font>

9
00:00:28,010 --> 00:00:33,200
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> I'm not the only one that</font>

10
00:00:30,530 --> 00:00:37,910
<font color="#CCCCCC">thinks that it's a</font><font color="#E5E5E5"> little bit of mass</font>

11
00:00:33,200 --> 00:00:40,430
the we have way too many interfaces<font color="#E5E5E5"> to</font>

12
00:00:37,910 --> 00:00:43,699
connect our storage<font color="#E5E5E5"> to our container</font>

13
00:00:40,430 --> 00:00:48,200
workloads<font color="#E5E5E5"> and sure some of the</font>

14
00:00:43,700 --> 00:00:53,000
<font color="#E5E5E5">interfaces are nicer than</font><font color="#CCCCCC"> others</font><font color="#E5E5E5"> but it</font>

15
00:00:48,200 --> 00:00:56,030
seems like the<font color="#E5E5E5"> the interfaces well not</font>

16
00:00:53,000 --> 00:00:58,370
all that well<font color="#CCCCCC"> thought off</font><font color="#E5E5E5"> from the start</font>

17
00:00:56,030 --> 00:01:01,309
<font color="#E5E5E5">at the beginning we</font><font color="#CCCCCC"> thought that we</font>

18
00:00:58,370 --> 00:01:05,059
didn't need persistent storage in our

19
00:01:01,309 --> 00:01:07,310
containers and later on we started

20
00:01:05,059 --> 00:01:16,520
adding them adding them as we<font color="#CCCCCC"> need it</font>

21
00:01:07,310 --> 00:01:19,220
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we ended up like this which and</font>

22
00:01:16,520 --> 00:01:23,539
storage vendors that have<font color="#E5E5E5"> to have a lot</font>

23
00:01:19,220 --> 00:01:28,039
of<font color="#E5E5E5"> different drivers so it's</font><font color="#CCCCCC"> anytime</font><font color="#E5E5E5"> we</font>

24
00:01:23,540 --> 00:01:31,869
simplify this and this is where the CSI

25
00:01:28,040 --> 00:01:36,229
or container storage<font color="#CCCCCC"> interface comes in</font>

26
00:01:31,869 --> 00:01:39,049
it aims to<font color="#E5E5E5"> be the</font><font color="#CCCCCC"> sole interface for a</font>

27
00:01:36,229 --> 00:01:44,750
storage<font color="#E5E5E5"> in any container platform that's</font>

28
00:01:39,049 --> 00:01:49,460
<font color="#CCCCCC">its same so but having we heard this</font>

29
00:01:44,750 --> 00:01:52,250
<font color="#CCCCCC">before like</font><font color="#E5E5E5"> a standard it suddenly comes</font>

30
00:01:49,460 --> 00:01:55,699
a new standard<font color="#E5E5E5"> that tries</font><font color="#CCCCCC"> to be d1</font><font color="#E5E5E5"> and</font>

31
00:01:52,250 --> 00:01:57,320
fails to<font color="#CCCCCC"> do so and</font><font color="#E5E5E5"> a year after</font><font color="#CCCCCC"> you find</font>

32
00:01:55,700 --> 00:01:59,720
out<font color="#E5E5E5"> that it's just another one that</font>

33
00:01:57,320 --> 00:02:03,380
<font color="#E5E5E5">comes into a list so the question is</font>

34
00:01:59,720 --> 00:02:05,298
should<font color="#CCCCCC"> we care about</font><font color="#E5E5E5"> CSI is it actually</font>

35
00:02:03,380 --> 00:02:07,820
going to make a difference<font color="#E5E5E5"> and is it</font>

36
00:02:05,299 --> 00:02:11,709
here to stay and that's<font color="#E5E5E5"> what</font><font color="#CCCCCC"> I'm going</font>

37
00:02:07,820 --> 00:02:16,670
to<font color="#CCCCCC"> try to March for this</font><font color="#E5E5E5"> presentation</font>

38
00:02:11,709 --> 00:02:17,960
over<font color="#E5E5E5"> the CSI spec the first release that</font>

39
00:02:16,670 --> 00:02:21,950
<font color="#E5E5E5">came out in</font>

40
00:02:17,960 --> 00:02:27,770
<font color="#E5E5E5">remember and we'll see how</font><font color="#CCCCCC"> its it works</font>

41
00:02:21,950 --> 00:02:30,589
<font color="#E5E5E5">and what are it chances to make it one</font>

42
00:02:27,770 --> 00:02:32,630
of<font color="#CCCCCC"> the things that CSI is actually</font>

43
00:02:30,590 --> 00:02:39,820
trying really hard to<font color="#E5E5E5"> do is to</font><font color="#CCCCCC"> be a</font>

44
00:02:32,630 --> 00:02:43,280
<font color="#E5E5E5">storage agnostic storage vendors their</font>

45
00:02:39,820 --> 00:02:47,709
deployment options their features and in

46
00:02:43,280 --> 00:02:51,320
this effort<font color="#CCCCCC"> it supports many different</font>

47
00:02:47,710 --> 00:02:54,890
infrastructure options<font color="#E5E5E5"> we'll go over the</font>

48
00:02:51,320 --> 00:02:58,310
two most common one the first one<font color="#E5E5E5"> is an</font>

49
00:02:54,890 --> 00:03:00,679
architecture where all the<font color="#E5E5E5"> storage</font>

50
00:02:58,310 --> 00:03:05,690
well the storage can<font color="#CCCCCC"> be accessed</font><font color="#E5E5E5"> from</font>

51
00:03:00,680 --> 00:03:09,170
all your notes<font color="#CCCCCC"> so every node can access</font>

52
00:03:05,690 --> 00:03:12,790
<font color="#CCCCCC">to</font><font color="#E5E5E5"> create</font><font color="#CCCCCC"> delete and</font><font color="#E5E5E5"> also connect the</font>

53
00:03:09,170 --> 00:03:16,940
volumes in this deployment<font color="#E5E5E5"> we will have</font>

54
00:03:12,790 --> 00:03:22,880
<font color="#E5E5E5">CSI plug-in service running</font><font color="#CCCCCC"> constantly</font>

55
00:03:16,940 --> 00:03:25,370
on your nodes instead of having common

56
00:03:22,880 --> 00:03:27,320
<font color="#E5E5E5">line calls that are called from the</font>

57
00:03:25,370 --> 00:03:31,130
orchestrator<font color="#CCCCCC"> The Container Orchestrator</font>

58
00:03:27,320 --> 00:03:35,209
or Co you have<font color="#CCCCCC"> a service</font><font color="#E5E5E5"> and using</font>

59
00:03:31,130 --> 00:03:38,329
Google's RPC the orchestrator can make

60
00:03:35,210 --> 00:03:41,300
the<font color="#E5E5E5"> request this way this way we</font>

61
00:03:38,330 --> 00:03:44,150
decouple the implementation<font color="#E5E5E5"> and also</font>

62
00:03:41,300 --> 00:03:46,640
makes<font color="#E5E5E5"> it</font><font color="#CCCCCC"> possible to for the plug-in to</font>

63
00:03:44,150 --> 00:03:49,340
<font color="#CCCCCC">be more efficient it is</font><font color="#E5E5E5"> the</font>

64
00:03:46,640 --> 00:03:52,970
responsibility of the CSI<font color="#CCCCCC"> plug-in to</font>

65
00:03:49,340 --> 00:03:56,000
support the management<font color="#E5E5E5"> of the resources</font>

66
00:03:52,970 --> 00:04:00,200
as well<font color="#E5E5E5"> at making them accessible</font><font color="#CCCCCC"> to the</font>

67
00:03:56,000 --> 00:04:03,110
nodes this is a simple architecture<font color="#E5E5E5"> but</font>

68
00:04:00,200 --> 00:04:05,929
in many cases our<font color="#CCCCCC"> deployments are a</font>

69
00:04:03,110 --> 00:04:08,810
little<font color="#E5E5E5"> bit more complex so</font><font color="#CCCCCC"> we have our</font>

70
00:04:05,930 --> 00:04:12,410
storage<font color="#E5E5E5"> that have has different networks</font>

71
00:04:08,810 --> 00:04:16,959
for<font color="#CCCCCC"> the management</font><font color="#E5E5E5"> and done from the</font>

72
00:04:12,410 --> 00:04:19,790
data path so<font color="#E5E5E5"> we will also have in our</font>

73
00:04:16,959 --> 00:04:21,858
<font color="#CCCCCC">Orchestrator deployment different types</font>

74
00:04:19,790 --> 00:04:24,290
of<font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> we will have infrastructure</font>

75
00:04:21,858 --> 00:04:26,419
nodes that<font color="#E5E5E5"> can actually access the</font>

76
00:04:24,290 --> 00:04:29,570
management to create<font color="#E5E5E5"> and delete</font>

77
00:04:26,419 --> 00:04:31,580
resources from the storage<font color="#E5E5E5"> and we will</font>

78
00:04:29,570 --> 00:04:36,250
have container<font color="#E5E5E5"> workload</font>

79
00:04:31,580 --> 00:04:39,349
notes which only need to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> about the</font>

80
00:04:36,250 --> 00:04:43,009
storage transport protocol<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able to</font>

81
00:04:39,349 --> 00:04:45,770
connect to<font color="#CCCCCC"> the 2-day data paths</font><font color="#E5E5E5"> for</font>

82
00:04:43,009 --> 00:04:47,900
example if we have a<font color="#E5E5E5"> s</font><font color="#CCCCCC"> kasi they only</font>

83
00:04:45,770 --> 00:04:50,270
need<font color="#E5E5E5"> to have the ice</font><font color="#CCCCCC"> cuss</font><font color="#E5E5E5"> initiated they</font>

84
00:04:47,900 --> 00:04:52,609
don't<font color="#E5E5E5"> really need to know what back</font><font color="#CCCCCC"> end</font>

85
00:04:50,270 --> 00:04:54,919
they<font color="#E5E5E5"> are using just that it says</font><font color="#CCCCCC"> kasi</font>

86
00:04:52,610 --> 00:04:58,090
this is your connection<font color="#E5E5E5"> information go</font>

87
00:04:54,919 --> 00:05:02,330
connect these<font color="#E5E5E5"> are the two most common</font>

88
00:04:58,090 --> 00:05:03,619
deployment architectures<font color="#E5E5E5"> in CSI and now</font>

89
00:05:02,330 --> 00:05:07,609
we're going to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a look at the</font>

90
00:05:03,620 --> 00:05:11,479
<font color="#E5E5E5">features the features were</font><font color="#CCCCCC"> the developed</font>

91
00:05:07,610 --> 00:05:15,110
or<font color="#E5E5E5"> chosen between the orchestrator</font>

92
00:05:11,479 --> 00:05:19,190
<font color="#CCCCCC">developers the vendor</font><font color="#E5E5E5"> the syringe</font><font color="#CCCCCC"> vendor</font>

93
00:05:15,110 --> 00:05:22,789
developers and third parties that were

94
00:05:19,190 --> 00:05:26,479
also<font color="#CCCCCC"> interested in the CSI spec so it is</font>

95
00:05:22,789 --> 00:05:28,250
a joint effort<font color="#CCCCCC"> between all the parts it</font>

96
00:05:26,479 --> 00:05:30,560
<font color="#CCCCCC">is not only the orchestrator that</font>

97
00:05:28,250 --> 00:05:33,500
decided<font color="#E5E5E5"> a we're going to be doing this</font>

98
00:05:30,560 --> 00:05:38,990
so everybody's interests are represented

99
00:05:33,500 --> 00:05:43,969
<font color="#CCCCCC">in</font><font color="#E5E5E5"> here sorry in here these are the</font>

100
00:05:38,990 --> 00:05:47,360
<font color="#E5E5E5">features in we can think of them</font><font color="#CCCCCC"> as two</font>

101
00:05:43,969 --> 00:05:50,659
<font color="#CCCCCC">different groups one</font><font color="#E5E5E5"> group is the</font>

102
00:05:47,360 --> 00:05:53,839
features that<font color="#E5E5E5"> are meant</font><font color="#CCCCCC"> to assist the</font>

103
00:05:50,659 --> 00:05:59,360
orchestrator<font color="#E5E5E5"> in doing its job when</font>

104
00:05:53,839 --> 00:06:01,879
interacting with CSI<font color="#CCCCCC"> plug-ins and the</font>

105
00:05:59,360 --> 00:06:04,129
other group would be the<font color="#E5E5E5"> features that</font>

106
00:06:01,879 --> 00:06:09,469
<font color="#E5E5E5">are meant to manage the</font><font color="#CCCCCC"> actual resources</font>

107
00:06:04,129 --> 00:06:11,719
<font color="#E5E5E5">that we want in the assistant or in the</font>

108
00:06:09,469 --> 00:06:14,930
helping features we have<font color="#E5E5E5"> an info feature</font>

109
00:06:11,719 --> 00:06:17,360
that helps<font color="#CCCCCC"> identify the different</font>

110
00:06:14,930 --> 00:06:20,800
<font color="#CCCCCC">plugins</font><font color="#E5E5E5"> so that the orchestrator can</font>

111
00:06:17,360 --> 00:06:23,539
know which controller goes with which

112
00:06:20,800 --> 00:06:25,849
<font color="#E5E5E5">node plugin because you can have</font>

113
00:06:23,539 --> 00:06:28,370
multiple CSI<font color="#E5E5E5"> plugins running and it</font>

114
00:06:25,849 --> 00:06:30,680
needs to<font color="#E5E5E5"> match them so that the</font><font color="#CCCCCC"> requests</font>

115
00:06:28,370 --> 00:06:33,190
go to the right place

116
00:06:30,680 --> 00:06:36,190
then we have a capabilities feature

117
00:06:33,190 --> 00:06:36,190
because

118
00:06:36,710 --> 00:06:40,239
CSI actually

119
00:06:41,319 --> 00:06:46,059
well most<font color="#E5E5E5"> of the most if not all the</font>

120
00:06:44,020 --> 00:06:47,948
features in CSI are optional

121
00:06:46,059 --> 00:06:51,129
that way it can<font color="#E5E5E5"> adapt</font><font color="#CCCCCC"> to all the</font>

122
00:06:47,949 --> 00:06:55,569
different storage solutions<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> need a</font>

123
00:06:51,129 --> 00:06:57,490
<font color="#E5E5E5">way to check the the plugins and see</font>

124
00:06:55,569 --> 00:06:59,529
what<font color="#CCCCCC"> features are actually available in</font>

125
00:06:57,490 --> 00:07:02,979
a specific<font color="#E5E5E5"> plugin that it's deployed</font>

126
00:06:59,529 --> 00:07:05,439
<font color="#CCCCCC">then we have a probe system</font><font color="#E5E5E5"> that allows</font>

127
00:07:02,979 --> 00:07:11,080
us<font color="#E5E5E5"> to check</font><font color="#CCCCCC"> the health of each of the</font>

128
00:07:05,439 --> 00:07:13,119
different plugins they<font color="#E5E5E5"> are a way to find</font>

129
00:07:11,080 --> 00:07:18,279
out how<font color="#E5E5E5"> much available storage we have</font>

130
00:07:13,119 --> 00:07:22,029
<font color="#CCCCCC">in a topology feature</font><font color="#E5E5E5"> because we need to</font>

131
00:07:18,279 --> 00:07:24,550
<font color="#E5E5E5">know which nodes can access what which</font>

132
00:07:22,029 --> 00:07:29,110
storage<font color="#E5E5E5"> you wouldn't want to for example</font>

133
00:07:24,550 --> 00:07:33,039
<font color="#E5E5E5">try to</font><font color="#CCCCCC"> create a container</font><font color="#E5E5E5"> in in a node</font>

134
00:07:29,110 --> 00:07:35,979
<font color="#E5E5E5">and connect it</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> fiber channel volume</font>

135
00:07:33,039 --> 00:07:37,869
<font color="#E5E5E5">when the node doesn't have an</font><font color="#CCCCCC"> HPA and it</font>

136
00:07:35,979 --> 00:07:39,938
cannot connect<font color="#CCCCCC"> it doesn't make sense</font>

137
00:07:37,869 --> 00:07:43,479
so we have a topology feature that

138
00:07:39,939 --> 00:07:45,939
allows the orchestrator to do smart

139
00:07:43,479 --> 00:07:48,870
scheduling of the<font color="#E5E5E5"> containers according</font>

140
00:07:45,939 --> 00:07:51,819
<font color="#CCCCCC">to their volumes</font><font color="#E5E5E5"> it's going to be using</font>

141
00:07:48,870 --> 00:07:54,399
finally for the results type of

142
00:07:51,819 --> 00:07:57,519
operations<font color="#E5E5E5"> we have two different</font><font color="#CCCCCC"> type of</font>

143
00:07:54,399 --> 00:08:02,919
<font color="#E5E5E5">resources and we can create delete and</font>

144
00:07:57,519 --> 00:08:05,830
<font color="#E5E5E5">list volumes and a</font><font color="#CCCCCC"> snapshot and also we</font>

145
00:08:02,919 --> 00:08:08,830
can get<font color="#CCCCCC"> the stats</font><font color="#E5E5E5"> on a</font><font color="#CCCCCC"> specific</font><font color="#E5E5E5"> volume</font>

146
00:08:05,830 --> 00:08:12,308
<font color="#CCCCCC">to see how much</font><font color="#E5E5E5"> available space is there</font>

147
00:08:08,830 --> 00:08:14,469
and also<font color="#E5E5E5"> attach and detach the volumes</font>

148
00:08:12,309 --> 00:08:16,930
<font color="#E5E5E5">these are basically all the operations</font>

149
00:08:14,469 --> 00:08:21,189
that<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> currencies I expect</font>

150
00:08:16,930 --> 00:08:23,529
but the CSS spec is<font color="#E5E5E5"> alive we already</font>

151
00:08:21,189 --> 00:08:26,379
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> version</font><font color="#CCCCCC"> one but we</font><font color="#E5E5E5"> already have</font>

152
00:08:23,529 --> 00:08:28,389
new features<font color="#CCCCCC"> in there for example</font><font color="#E5E5E5"> we can</font>

153
00:08:26,379 --> 00:08:30,729
already<font color="#E5E5E5"> increase the size of a volume</font>

154
00:08:28,389 --> 00:08:35,019
which<font color="#CCCCCC"> is not here</font><font color="#E5E5E5"> but it will be</font>

155
00:08:30,729 --> 00:08:37,179
released on the<font color="#CCCCCC"> next version we don't</font>

156
00:08:35,019 --> 00:08:39,729
have time to go over<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them so I'm</font>

157
00:08:37,179 --> 00:08:41,828
going<font color="#CCCCCC"> to focus on three</font><font color="#E5E5E5"> that I think</font>

158
00:08:39,729 --> 00:08:45,550
<font color="#CCCCCC">you'll stay</font><font color="#E5E5E5"> pretty well the different</font>

159
00:08:41,828 --> 00:08:50,859
mechanism of CSI the first one<font color="#CCCCCC"> it's the</font>

160
00:08:45,550 --> 00:08:53,859
volume creation which like<font color="#E5E5E5"> all storage</font>

161
00:08:50,860 --> 00:08:57,430
related CSI

162
00:08:53,860 --> 00:08:59,050
<font color="#E5E5E5">functionality it must be idempotent this</font>

163
00:08:57,430 --> 00:09:00,670
means<font color="#E5E5E5"> that you can receive multiple</font>

164
00:08:59,050 --> 00:09:03,819
<font color="#CCCCCC">tanks the same request from the</font>

165
00:09:00,670 --> 00:09:06,219
orchestrator<font color="#E5E5E5"> and the CSI plugin must</font>

166
00:09:03,820 --> 00:09:08,590
make sure<font color="#CCCCCC"> that it</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> creates one</font>

167
00:09:06,220 --> 00:09:11,140
volume in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case and it always</font>

168
00:09:08,590 --> 00:09:12,820
returned the same volume so the

169
00:09:11,140 --> 00:09:17,560
orchestrator will pass seven different

170
00:09:12,820 --> 00:09:19,390
arguments to the<font color="#E5E5E5"> to the CSI plugin the</font>

171
00:09:17,560 --> 00:09:22,959
first one it's called name and<font color="#E5E5E5"> you can</font>

172
00:09:19,390 --> 00:09:25,870
<font color="#E5E5E5">think of it as a request ID because it</font>

173
00:09:22,960 --> 00:09:28,660
will be unique for each request<font color="#E5E5E5"> and if</font>

174
00:09:25,870 --> 00:09:32,290
you receive multiple<font color="#E5E5E5"> times the same call</font>

175
00:09:28,660 --> 00:09:35,589
you gonna have the same name this<font color="#E5E5E5"> is</font>

176
00:09:32,290 --> 00:09:40,030
<font color="#E5E5E5">what it's used by the by the plugins to</font>

177
00:09:35,590 --> 00:09:47,110
actually attain idempotency thank<font color="#E5E5E5"> you</font>

178
00:09:40,030 --> 00:09:50,170
meters which is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> mapping that allows</font>

179
00:09:47,110 --> 00:09:53,560
the CSI<font color="#E5E5E5"> plugins and the storage vendors</font>

180
00:09:50,170 --> 00:09:56,709
to expose their advanced features<font color="#E5E5E5"> this</font>

181
00:09:53,560 --> 00:09:59,349
<font color="#CCCCCC">is how</font><font color="#E5E5E5"> they support beam storage</font>

182
00:09:56,710 --> 00:10:03,520
agnostic while at the same time<font color="#E5E5E5"> allowed</font>

183
00:09:59,350 --> 00:10:05,680
<font color="#E5E5E5">the storage to show their fancy features</font>

184
00:10:03,520 --> 00:10:08,590
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> if you have a</font><font color="#E5E5E5"> storage that</font>

185
00:10:05,680 --> 00:10:11,380
supports compression in<font color="#CCCCCC"> the CSI plugin</font>

186
00:10:08,590 --> 00:10:14,680
says in the documentation<font color="#E5E5E5"> hey you can</font>

187
00:10:11,380 --> 00:10:16,330
use a key called compression<font color="#E5E5E5"> pass it</font>

188
00:10:14,680 --> 00:10:19,900
through and your volumes will be

189
00:10:16,330 --> 00:10:22,750
compressed<font color="#E5E5E5"> then the CSI can expose that</font>

190
00:10:19,900 --> 00:10:25,360
<font color="#E5E5E5">and it will come as a parameter this</font>

191
00:10:22,750 --> 00:10:27,610
parameter<font color="#E5E5E5"> are opaque to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> orchestrator</font>

192
00:10:25,360 --> 00:10:30,760
so the orchestrator doesn't care just

193
00:10:27,610 --> 00:10:34,240
take them and give it gives them to the

194
00:10:30,760 --> 00:10:36,970
<font color="#E5E5E5">CSI plugin so they will be different</font>

195
00:10:34,240 --> 00:10:39,640
<font color="#CCCCCC">from CSI</font><font color="#E5E5E5"> plug-in to CSI plugin and you</font>

196
00:10:36,970 --> 00:10:42,220
have to go to the documentation<font color="#E5E5E5"> to check</font>

197
00:10:39,640 --> 00:10:45,400
what you have<font color="#E5E5E5"> available then we have the</font>

198
00:10:42,220 --> 00:10:48,760
source argument which allows<font color="#E5E5E5"> it to</font>

199
00:10:45,400 --> 00:10:50,949
define what<font color="#CCCCCC"> type what type of what kind</font>

200
00:10:48,760 --> 00:10:52,930
of<font color="#CCCCCC"> volume we</font><font color="#E5E5E5"> want we can create three</font>

201
00:10:50,950 --> 00:10:55,690
different<font color="#E5E5E5"> types of volumes empty volumes</font>

202
00:10:52,930 --> 00:10:59,170
<font color="#CCCCCC">glom volumes which are volumes created</font>

203
00:10:55,690 --> 00:11:01,950
from<font color="#E5E5E5"> another volume and bonds created</font>

204
00:10:59,170 --> 00:11:05,979
<font color="#E5E5E5">from a snapshot then we have</font>

205
00:11:01,950 --> 00:11:07,700
capabilities which is the way of<font color="#E5E5E5"> how the</font>

206
00:11:05,980 --> 00:11:10,670
orchestrator tells the

207
00:11:07,700 --> 00:11:13,400
the CSI<font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> how these volumes are</font>

208
00:11:10,670 --> 00:11:17,209
going to be used<font color="#E5E5E5"> are they going to be</font>

209
00:11:13,400 --> 00:11:19,189
mounted used as a block device<font color="#CCCCCC"> are</font><font color="#E5E5E5"> they</font>

210
00:11:17,210 --> 00:11:21,800
<font color="#E5E5E5">going to be mounted as a file system</font>

211
00:11:19,190 --> 00:11:24,260
<font color="#CCCCCC">what kind of file system do</font><font color="#E5E5E5"> we want to</font>

212
00:11:21,800 --> 00:11:28,099
be there<font color="#E5E5E5"> is it</font><font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> used by a</font>

213
00:11:24,260 --> 00:11:31,100
<font color="#E5E5E5">single reader single writer</font><font color="#CCCCCC"> real writer</font>

214
00:11:28,100 --> 00:11:31,400
<font color="#E5E5E5">multiple reader single writer you name</font>

215
00:11:31,100 --> 00:11:34,960
it

216
00:11:31,400 --> 00:11:38,689
so the orchestrator must ask the

217
00:11:34,960 --> 00:11:41,260
controller<font color="#E5E5E5"> what it wants and if the</font>

218
00:11:38,690 --> 00:11:46,040
controller is<font color="#E5E5E5"> able to do it it will</font>

219
00:11:41,260 --> 00:11:49,850
return the<font color="#CCCCCC"> ID of</font><font color="#E5E5E5"> the volume to get the</font>

220
00:11:46,040 --> 00:11:52,670
<font color="#CCCCCC">actual size and also accessibility to</font>

221
00:11:49,850 --> 00:11:55,790
make it to be to tell where this volume

222
00:11:52,670 --> 00:11:59,000
is<font color="#CCCCCC"> actually accessible from this is a</font>

223
00:11:55,790 --> 00:12:01,520
simple flow<font color="#CCCCCC"> it's a synchronous call you</font>

224
00:11:59,000 --> 00:12:05,990
call it creates and when it's<font color="#CCCCCC"> created</font>

225
00:12:01,520 --> 00:12:08,060
you get<font color="#E5E5E5"> a return value for a little more</font>

226
00:12:05,990 --> 00:12:11,480
complex flow we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> attach the</font>

227
00:12:08,060 --> 00:12:14,510
touch operation<font color="#E5E5E5"> which if you read the</font>

228
00:12:11,480 --> 00:12:15,950
the<font color="#E5E5E5"> CSI spec</font><font color="#CCCCCC"> you will find out that</font><font color="#E5E5E5"> they</font>

229
00:12:14,510 --> 00:12:18,830
<font color="#CCCCCC">don't talk</font><font color="#E5E5E5"> about attaching and detaching</font>

230
00:12:15,950 --> 00:12:22,130
<font color="#CCCCCC">they talk about</font><font color="#E5E5E5"> publishing and and</font>

231
00:12:18,830 --> 00:12:24,920
publishing volumes<font color="#CCCCCC"> and that's how they</font>

232
00:12:22,130 --> 00:12:27,410
refer to it<font color="#E5E5E5"> first we will see a flow in</font>

233
00:12:24,920 --> 00:12:31,189
the first architecture architecture we

234
00:12:27,410 --> 00:12:34,579
saw where every<font color="#E5E5E5"> single node can access</font>

235
00:12:31,190 --> 00:12:37,580
the the<font color="#E5E5E5"> back end and so the container we</font>

236
00:12:34,580 --> 00:12:40,240
will the orchestrator<font color="#E5E5E5"> we will call the</font>

237
00:12:37,580 --> 00:12:43,760
CSI<font color="#E5E5E5"> plugin first to check the</font>

238
00:12:40,240 --> 00:12:45,800
<font color="#CCCCCC">capabilities</font><font color="#E5E5E5"> and see</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you are using</font>

239
00:12:43,760 --> 00:12:49,370
architecture one every<font color="#E5E5E5"> single node can</font>

240
00:12:45,800 --> 00:12:52,010
access the<font color="#E5E5E5"> backend</font><font color="#CCCCCC"> so immediately</font><font color="#E5E5E5"> goes</font>

241
00:12:49,370 --> 00:12:54,860
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the node where it's going to create a</font>

242
00:12:52,010 --> 00:12:57,470
container<font color="#CCCCCC"> and it tells please publish</font>

243
00:12:54,860 --> 00:13:01,550
this specific<font color="#CCCCCC"> volume and</font><font color="#E5E5E5"> make it</font>

244
00:12:57,470 --> 00:13:04,460
<font color="#E5E5E5">available on this target</font><font color="#CCCCCC"> and then that's</font>

245
00:13:01,550 --> 00:13:08,329
it<font color="#E5E5E5"> it is exposed so it is the node</font>

246
00:13:04,460 --> 00:13:11,720
published obligation to make it

247
00:13:08,330 --> 00:13:13,400
accessible<font color="#E5E5E5"> on a specific target but what</font>

248
00:13:11,720 --> 00:13:16,430
<font color="#E5E5E5">about architecture to where we had</font>

249
00:13:13,400 --> 00:13:19,579
displayed the functionality between<font color="#E5E5E5"> the</font>

250
00:13:16,430 --> 00:13:21,290
manager and<font color="#CCCCCC"> the nodes</font><font color="#E5E5E5"> now we have</font>

251
00:13:19,580 --> 00:13:23,480
additional function

252
00:13:21,290 --> 00:13:26,089
first the control<font color="#E5E5E5"> capabilities and you</font>

253
00:13:23,480 --> 00:13:29,660
find out<font color="#E5E5E5"> that you firstnet need to call</font>

254
00:13:26,090 --> 00:13:31,670
the controller<font color="#E5E5E5"> so you get a little</font><font color="#CCCCCC"> more</font>

255
00:13:29,660 --> 00:13:34,160
info<font color="#CCCCCC"> because the controller</font><font color="#E5E5E5"> doesn't know</font>

256
00:13:31,670 --> 00:13:38,180
where it's going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> publishing</font><font color="#CCCCCC"> this</font>

257
00:13:34,160 --> 00:13:40,520
volume so you<font color="#E5E5E5"> first querying the note</font>

258
00:13:38,180 --> 00:13:43,280
what you're going<font color="#E5E5E5"> to do place the con in</font>

259
00:13:40,520 --> 00:13:45,290
the container<font color="#CCCCCC"> get information</font><font color="#E5E5E5"> and with</font>

260
00:13:43,280 --> 00:13:47,510
<font color="#E5E5E5">the idea of the note you then call the</font>

261
00:13:45,290 --> 00:13:51,160
controller and you tell it<font color="#CCCCCC"> hey please</font>

262
00:13:47,510 --> 00:13:56,950
publish this volume<font color="#E5E5E5"> to this specific</font>

263
00:13:51,160 --> 00:14:00,800
node for example<font color="#CCCCCC"> if you were create a</font>

264
00:13:56,950 --> 00:14:04,490
publishing<font color="#E5E5E5"> nice Casa volume here is</font>

265
00:14:00,800 --> 00:14:08,060
where you would<font color="#E5E5E5"> be in exporting and</font>

266
00:14:04,490 --> 00:14:10,910
mapping the the<font color="#E5E5E5"> volume to the specific</font>

267
00:14:08,060 --> 00:14:15,170
node with the initiator name and the IP

268
00:14:10,910 --> 00:14:19,040
address<font color="#E5E5E5"> and from the controller then we</font>

269
00:14:15,170 --> 00:14:26,030
call the node publish and make the final

270
00:14:19,040 --> 00:14:29,270
<font color="#CCCCCC">connection but the node publish</font><font color="#E5E5E5"> if you</font>

271
00:14:26,030 --> 00:14:33,709
have a multi<font color="#CCCCCC"> reader multi writer can be</font>

272
00:14:29,270 --> 00:14:37,160
<font color="#E5E5E5">called multiple</font><font color="#CCCCCC"> times on the same</font><font color="#E5E5E5"> node</font>

273
00:14:33,710 --> 00:14:40,760
<font color="#E5E5E5">so if you publish first you publish for</font>

274
00:14:37,160 --> 00:14:44,180
one container<font color="#E5E5E5"> you get one call then you</font>

275
00:14:40,760 --> 00:14:46,189
<font color="#CCCCCC">call create a second container accessing</font>

276
00:14:44,180 --> 00:14:48,680
the same volume<font color="#E5E5E5"> you will get a second</font>

277
00:14:46,190 --> 00:14:51,590
published call so this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that</font>

278
00:14:48,680 --> 00:14:54,260
<font color="#E5E5E5">the expect is very clear you may receive</font>

279
00:14:51,590 --> 00:14:57,140
multiple<font color="#E5E5E5"> calls for node publish on the</font>

280
00:14:54,260 --> 00:15:01,760
same node<font color="#E5E5E5"> for different volumes</font><font color="#CCCCCC"> so to</font>

281
00:14:57,140 --> 00:15:07,220
assist the CSI plugin<font color="#E5E5E5"> what you have is</font>

282
00:15:01,760 --> 00:15:10,160
an an extra an optional<font color="#E5E5E5"> call that can be</font>

283
00:15:07,220 --> 00:15:12,950
made if the CSI plugin<font color="#E5E5E5"> asked for it</font><font color="#CCCCCC"> if</font>

284
00:15:10,160 --> 00:15:15,620
it's called not a stage and it will go

285
00:15:12,950 --> 00:15:19,250
between<font color="#E5E5E5"> the controller publish and they</font>

286
00:15:15,620 --> 00:15:21,440
and the node<font color="#E5E5E5"> publish calls right in the</font>

287
00:15:19,250 --> 00:15:24,080
<font color="#CCCCCC">middle it will always be called</font><font color="#E5E5E5"> on the</font>

288
00:15:21,440 --> 00:15:28,430
node where we are going to be run in the

289
00:15:24,080 --> 00:15:31,850
container and this allows<font color="#E5E5E5"> drivers for</font>

290
00:15:28,430 --> 00:15:34,099
example that use NFS to make the actual

291
00:15:31,850 --> 00:15:35,899
mount of the<font color="#E5E5E5"> volume on the</font>

292
00:15:34,100 --> 00:15:38,540
<font color="#CCCCCC">staiin face because they know that this</font>

293
00:15:35,899 --> 00:15:41,779
<font color="#E5E5E5">is going to</font><font color="#CCCCCC"> be called one and</font><font color="#E5E5E5"> only once</font>

294
00:15:38,540 --> 00:15:44,899
per<font color="#E5E5E5"> no</font><font color="#CCCCCC"> damper</font><font color="#E5E5E5"> volume and they can make</font>

295
00:15:41,779 --> 00:15:46,970
it they can mount it<font color="#E5E5E5"> in a staging</font><font color="#CCCCCC"> path</font>

296
00:15:44,899 --> 00:15:49,790
that<font color="#E5E5E5"> is passed by the orchestrator and</font>

297
00:15:46,970 --> 00:15:51,800
then when they receive a<font color="#CCCCCC"> call to the</font>

298
00:15:49,790 --> 00:15:54,250
<font color="#CCCCCC">node publish as many calls that</font><font color="#E5E5E5"> they</font>

299
00:15:51,800 --> 00:15:57,500
want<font color="#E5E5E5"> all they have to do is be mount</font>

300
00:15:54,250 --> 00:15:59,870
<font color="#E5E5E5">they stay in path and they are done so</font>

301
00:15:57,500 --> 00:16:02,959
they don't<font color="#E5E5E5"> have to to keep any kind of</font>

302
00:15:59,870 --> 00:16:04,220
tracking how many<font color="#E5E5E5"> containers are using</font>

303
00:16:02,959 --> 00:16:07,790
this volume on the<font color="#CCCCCC"> node</font>

304
00:16:04,220 --> 00:16:09,230
they just<font color="#E5E5E5"> know first I will get a note a</font>

305
00:16:07,790 --> 00:16:13,339
call<font color="#E5E5E5"> to know the stage</font>

306
00:16:09,230 --> 00:16:16,250
i mounted there then<font color="#CCCCCC"> B mount and the</font>

307
00:16:13,339 --> 00:16:19,449
unpublished<font color="#CCCCCC"> is the exact opposite</font><font color="#E5E5E5"> you</font>

308
00:16:16,250 --> 00:16:23,060
<font color="#CCCCCC">get a node unpublished</font><font color="#E5E5E5"> they just need to</font>

309
00:16:19,449 --> 00:16:25,609
<font color="#E5E5E5">amount the beam mounts and then when</font>

310
00:16:23,060 --> 00:16:28,399
they get<font color="#E5E5E5"> a call to the node at any stage</font>

311
00:16:25,610 --> 00:16:32,930
<font color="#E5E5E5">it is</font><font color="#CCCCCC"> when they actually amount</font><font color="#E5E5E5"> the</font>

312
00:16:28,399 --> 00:16:36,250
external storage this<font color="#E5E5E5"> is a little bit</font>

313
00:16:32,930 --> 00:16:39,319
more<font color="#E5E5E5"> complex if you have all the</font><font color="#CCCCCC"> early</font>

314
00:16:36,250 --> 00:16:44,870
in architecture<font color="#E5E5E5"> to plus</font><font color="#CCCCCC"> notice staging</font>

315
00:16:39,319 --> 00:16:47,290
it is more complex<font color="#CCCCCC"> and finally we have</font><font color="#E5E5E5"> I</font>

316
00:16:44,870 --> 00:16:52,040
have chosen the snapshot creation

317
00:16:47,290 --> 00:16:53,959
because<font color="#E5E5E5"> in for</font><font color="#CCCCCC"> most drivers</font><font color="#E5E5E5"> for most</font>

318
00:16:52,040 --> 00:16:57,349
plugins did will<font color="#E5E5E5"> be this will</font><font color="#CCCCCC"> be a</font>

319
00:16:53,959 --> 00:17:00,709
simple synchronous call the orchestrator

320
00:16:57,350 --> 00:17:03,259
calls and say hey create a snapshot<font color="#E5E5E5"> the</font>

321
00:17:00,709 --> 00:17:05,809
driver<font color="#E5E5E5"> cuts there's nap shot it is saved</font>

322
00:17:03,259 --> 00:17:07,849
<font color="#E5E5E5">and it returns it is a single skull and</font>

323
00:17:05,809 --> 00:17:11,289
the snapshot is ready to use

324
00:17:07,849 --> 00:17:14,510
but the CSI spec introduces one

325
00:17:11,289 --> 00:17:17,720
additional feature which is post card

326
00:17:14,510 --> 00:17:21,919
processing<font color="#E5E5E5"> this means that your snapshot</font>

327
00:17:17,720 --> 00:17:24,319
can be cut<font color="#E5E5E5"> it is ready</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> return to the</font>

328
00:17:21,919 --> 00:17:27,350
<font color="#E5E5E5">color as a synchronous call and tell it</font>

329
00:17:24,319 --> 00:17:28,820
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> I have made a cut but the snapshot</font>

330
00:17:27,349 --> 00:17:31,850
is not ready I have to do<font color="#E5E5E5"> additional</font>

331
00:17:28,820 --> 00:17:34,908
<font color="#E5E5E5">work so it returns in ready to use a</font>

332
00:17:31,850 --> 00:17:36,949
false value<font color="#CCCCCC"> so the the orchestrator</font>

333
00:17:34,909 --> 00:17:39,530
knows that it<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> going to be in a</font>

334
00:17:36,950 --> 00:17:41,659
synchronous scope and it is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font>

335
00:17:39,530 --> 00:17:45,080
<font color="#E5E5E5">running in the</font><font color="#CCCCCC"> background</font><font color="#E5E5E5"> in the plugin</font>

336
00:17:41,659 --> 00:17:47,710
<font color="#E5E5E5">and it can take</font><font color="#CCCCCC"> hours to</font><font color="#E5E5E5"> complete let's</font>

337
00:17:45,080 --> 00:17:49,689
say if you are<font color="#CCCCCC"> updating</font><font color="#E5E5E5"> a</font>

338
00:17:47,710 --> 00:17:53,769
your is<font color="#CCCCCC"> an upshot</font><font color="#E5E5E5"> to the cloud for</font>

339
00:17:49,690 --> 00:17:56,440
example<font color="#CCCCCC"> I suppose that processing</font><font color="#E5E5E5"> and it</font>

340
00:17:53,769 --> 00:17:59,320
is the orchestrator responsibility to

341
00:17:56,440 --> 00:18:02,440
<font color="#E5E5E5">pull and check is it already ready to</font>

342
00:17:59,320 --> 00:18:05,320
<font color="#E5E5E5">use can I use it</font><font color="#CCCCCC"> can it use it and since</font>

343
00:18:02,440 --> 00:18:08,259
we like all<font color="#E5E5E5"> the resource operation this</font>

344
00:18:05,320 --> 00:18:10,178
<font color="#E5E5E5">is idempotent</font><font color="#CCCCCC"> we have a very simple</font>

345
00:18:08,259 --> 00:18:12,009
<font color="#E5E5E5">interface because you will be receiving</font>

346
00:18:10,179 --> 00:18:14,500
the same parameters and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can easily</font>

347
00:18:12,009 --> 00:18:17,860
<font color="#E5E5E5">check with the name</font><font color="#CCCCCC"> if the</font><font color="#E5E5E5"> operation has</font>

348
00:18:14,500 --> 00:18:21,730
actually<font color="#CCCCCC"> completed this concludes the</font>

349
00:18:17,860 --> 00:18:25,090
overview<font color="#E5E5E5"> of the CSI</font><font color="#CCCCCC"> spec that I had in</font>

350
00:18:21,730 --> 00:18:29,470
mind<font color="#CCCCCC"> and now you like</font><font color="#E5E5E5"> to show you a</font>

351
00:18:25,090 --> 00:18:33,399
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of the specifics in in the</font>

352
00:18:29,470 --> 00:18:37,059
<font color="#E5E5E5">orchestrator platforms right now the CSI</font>

353
00:18:33,399 --> 00:18:42,008
is supported in<font color="#E5E5E5"> docker kubernetes cloud</font>

354
00:18:37,059 --> 00:18:45,389
<font color="#E5E5E5">foundry and messes and I'm going</font><font color="#CCCCCC"> to give</font>

355
00:18:42,009 --> 00:18:49,809
a<font color="#E5E5E5"> brief overview of how kubernetes</font>

356
00:18:45,389 --> 00:18:52,990
implements<font color="#CCCCCC"> ESI kubernetes has decided to</font>

357
00:18:49,809 --> 00:18:56,470
<font color="#CCCCCC">implement it as a mix of sidecar</font>

358
00:18:52,990 --> 00:19:00,639
containers<font color="#E5E5E5"> many</font><font color="#CCCCCC"> cycler containers in in</font>

359
00:18:56,470 --> 00:19:03,309
a cubelet the the kubernetes<font color="#E5E5E5"> agent</font>

360
00:19:00,639 --> 00:19:06,189
so it has code in<font color="#CCCCCC"> a cubelet and it has</font>

361
00:19:03,309 --> 00:19:08,860
side<font color="#E5E5E5"> cards that you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> include in</font>

362
00:19:06,190 --> 00:19:10,570
your pod so in for the architecture

363
00:19:08,860 --> 00:19:13,719
number<font color="#CCCCCC"> 2 where we</font><font color="#E5E5E5"> have the controller</font>

364
00:19:10,570 --> 00:19:17,620
and<font color="#E5E5E5"> the node we would have a part in the</font>

365
00:19:13,720 --> 00:19:20,139
<font color="#CCCCCC">nodes</font><font color="#E5E5E5"> running the your CSI</font><font color="#CCCCCC"> plugin code</font>

366
00:19:17,620 --> 00:19:23,049
as a service then<font color="#CCCCCC"> you will have the</font><font color="#E5E5E5"> no</font>

367
00:19:20,139 --> 00:19:26,110
driver<font color="#CCCCCC"> racer which is in charge of</font>

368
00:19:23,049 --> 00:19:28,658
registering the CSI plugging into

369
00:19:26,110 --> 00:19:32,500
cubelet<font color="#E5E5E5"> so it knows that it's actually</font>

370
00:19:28,659 --> 00:19:36,940
running<font color="#E5E5E5"> on that node in a</font><font color="#CCCCCC"> likeness frog</font>

371
00:19:32,500 --> 00:19:40,149
<font color="#E5E5E5">that can hoop the</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> to govern a dispro</font>

372
00:19:36,940 --> 00:19:43,659
<font color="#CCCCCC">system to report</font><font color="#E5E5E5"> the health of the whole</font>

373
00:19:40,149 --> 00:19:46,629
<font color="#CCCCCC">pod the lightness probe is basically a</font>

374
00:19:43,659 --> 00:19:50,909
gateway<font color="#E5E5E5"> that receives HTTP requests and</font>

375
00:19:46,629 --> 00:19:53,580
<font color="#E5E5E5">makes calls to be a G RPC to the probe</font>

376
00:19:50,909 --> 00:19:57,220
feature that we described<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> so</font>

377
00:19:53,580 --> 00:20:00,070
HTTP<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> check the GRP see the</font>

378
00:19:57,220 --> 00:20:01,240
status of<font color="#E5E5E5"> the plugin and we turn it via</font>

379
00:20:00,070 --> 00:20:04,629
<font color="#E5E5E5">HTTP</font>

380
00:20:01,240 --> 00:20:08,590
on the controller or infrastructure

381
00:20:04,630 --> 00:20:13,419
<font color="#CCCCCC">notes we will have our controller side</font>

382
00:20:08,590 --> 00:20:15,639
of the CSI plugin optionally also<font color="#E5E5E5"> the</font>

383
00:20:13,419 --> 00:20:18,159
lightness probe and then we start with

384
00:20:15,640 --> 00:20:21,190
the external provisioner<font color="#E5E5E5"> which is in</font>

385
00:20:18,159 --> 00:20:25,059
<font color="#E5E5E5">charge of watching your persistent</font>

386
00:20:21,190 --> 00:20:27,789
volume<font color="#CCCCCC"> claims and triggered of workflow</font>

387
00:20:25,059 --> 00:20:29,649
of creating of the<font color="#CCCCCC"> or deleting them</font><font color="#E5E5E5"> if</font>

388
00:20:27,789 --> 00:20:33,490
it is<font color="#E5E5E5"> creating it will check</font><font color="#CCCCCC"> the</font>

389
00:20:29,649 --> 00:20:35,799
persistent volume claim or PVC<font color="#E5E5E5"> and check</font>

390
00:20:33,490 --> 00:20:38,289
the<font color="#E5E5E5"> storage class join the information</font>

391
00:20:35,799 --> 00:20:42,879
from<font color="#E5E5E5"> the two and pass it along to</font><font color="#CCCCCC"> the</font>

392
00:20:38,289 --> 00:20:46,120
CSI plugin they if you<font color="#E5E5E5"> remember we had</font>

393
00:20:42,880 --> 00:20:49,120
the parameters in the in the create

394
00:20:46,120 --> 00:20:53,379
volume call that expose<font color="#CCCCCC"> the extra</font>

395
00:20:49,120 --> 00:20:55,870
features of the of the vendors they come

396
00:20:53,380 --> 00:20:57,940
in the story they<font color="#CCCCCC"> are specified in the</font>

397
00:20:55,870 --> 00:21:00,340
<font color="#CCCCCC">storage class</font><font color="#E5E5E5"> so you can specify your</font>

398
00:20:57,940 --> 00:21:02,679
compression equals true in the storage

399
00:21:00,340 --> 00:21:06,240
class and external provisioner<font color="#E5E5E5"> will pass</font>

400
00:21:02,679 --> 00:21:11,020
it to the controller CSI plugin<font color="#E5E5E5"> and then</font>

401
00:21:06,240 --> 00:21:14,289
we'll create a<font color="#E5E5E5"> PV will bound it and it</font>

402
00:21:11,020 --> 00:21:18,120
will do<font color="#E5E5E5"> the whole operation to attach we</font>

403
00:21:14,289 --> 00:21:20,970
have the external<font color="#E5E5E5"> attacher</font><font color="#CCCCCC"> C sidecar</font>

404
00:21:18,120 --> 00:21:28,330
that monitors volume<font color="#E5E5E5"> attachment and</font>

405
00:21:20,970 --> 00:21:30,159
calls the controller publish<font color="#E5E5E5"> call so</font>

406
00:21:28,330 --> 00:21:32,340
this is<font color="#E5E5E5"> only necessary if you have</font>

407
00:21:30,159 --> 00:21:35,260
architecture number<font color="#CCCCCC"> two where you have</font>

408
00:21:32,340 --> 00:21:39,370
published on the controller side and on

409
00:21:35,260 --> 00:21:41,320
the node side and this<font color="#E5E5E5"> is the first part</font>

410
00:21:39,370 --> 00:21:45,580
of the attachment<font color="#E5E5E5"> the second part is</font>

411
00:21:41,320 --> 00:21:49,720
done by cubelet which thanks to<font color="#CCCCCC"> a no</font>

412
00:21:45,580 --> 00:21:52,809
driver<font color="#E5E5E5"> racer knows how to what is the</font>

413
00:21:49,720 --> 00:21:56,470
<font color="#E5E5E5">socket</font><font color="#CCCCCC"> to talk to the node CSI plug in</font>

414
00:21:52,809 --> 00:22:00,970
and makes the<font color="#CCCCCC"> G RPC calls from that node</font>

415
00:21:56,470 --> 00:22:06,279
to<font color="#CCCCCC"> complete the attachment call in</font>

416
00:22:00,970 --> 00:22:08,590
<font color="#E5E5E5">publish or staging calls finally for the</font>

417
00:22:06,279 --> 00:22:11,559
snapshot we have the external<font color="#CCCCCC"> a snap</font>

418
00:22:08,590 --> 00:22:14,110
<font color="#E5E5E5">shutter which monitors the volume is not</font>

419
00:22:11,559 --> 00:22:15,570
is not shot<font color="#E5E5E5"> and the volume is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> short</font>

420
00:22:14,110 --> 00:22:19,469
class

421
00:22:15,570 --> 00:22:22,389
basically does the<font color="#E5E5E5"> equivalent</font><font color="#CCCCCC"> of the</font>

422
00:22:19,470 --> 00:22:25,240
external provisioner<font color="#E5E5E5"> it joins all</font>

423
00:22:22,390 --> 00:22:28,720
information<font color="#E5E5E5"> parameters from the from the</font>

424
00:22:25,240 --> 00:22:30,790
snapshot<font color="#E5E5E5"> class a the request from the</font>

425
00:22:28,720 --> 00:22:34,060
volume<font color="#CCCCCC"> snapshot</font><font color="#E5E5E5"> and makes the call to</font>

426
00:22:30,790 --> 00:22:38,260
<font color="#E5E5E5">the controller CSI plugin right now we</font>

427
00:22:34,060 --> 00:22:42,310
have this is version<font color="#CCCCCC"> one now we have the</font>

428
00:22:38,260 --> 00:22:47,190
resize so we have yet another<font color="#CCCCCC"> sidebar</font>

429
00:22:42,310 --> 00:22:52,389
which<font color="#CCCCCC"> is the the I think it's resizer</font>

430
00:22:47,190 --> 00:22:57,070
external<font color="#E5E5E5"> resizer and now</font><font color="#CCCCCC"> you'd like to</font>

431
00:22:52,390 --> 00:23:01,450
do a quick demo of<font color="#CCCCCC"> ember CSI which is</font>

432
00:22:57,070 --> 00:23:06,700
CSI<font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> that implements supports</font>

433
00:23:01,450 --> 00:23:09,880
like<font color="#E5E5E5"> 80</font><font color="#CCCCCC"> different backends it's it</font>

434
00:23:06,700 --> 00:23:14,380
<font color="#E5E5E5">supports CSI 2.3 and once here on the</font>

435
00:23:09,880 --> 00:23:16,960
same container and the example it's one

436
00:23:14,380 --> 00:23:21,400
<font color="#E5E5E5">one of the that are included in the</font>

437
00:23:16,960 --> 00:23:27,580
repository it it launches kubernetes 113

438
00:23:21,400 --> 00:23:32,200
with ember CSI 1.0 and using an LVN

439
00:23:27,580 --> 00:23:36,639
<font color="#CCCCCC">backing</font><font color="#E5E5E5"> I used</font><font color="#CCCCCC"> LVM because I don't want</font>

440
00:23:32,200 --> 00:23:39,430
to favor<font color="#E5E5E5"> any storage vendor and it</font>

441
00:23:36,640 --> 00:23:45,630
deploys<font color="#E5E5E5"> one infrastructure node and to</font>

442
00:23:39,430 --> 00:23:49,650
work<font color="#CCCCCC"> low notes it's recording</font><font color="#E5E5E5"> because I</font>

443
00:23:45,630 --> 00:23:56,940
didn't want<font color="#E5E5E5"> to risk it and hopefully</font>

444
00:23:49,650 --> 00:23:56,940
just<font color="#CCCCCC"> a second because it is a</font><font color="#E5E5E5"> physical</font>

445
00:23:57,030 --> 00:24:01,920
<font color="#CCCCCC">quality and</font><font color="#E5E5E5"> know why it's terrible</font>

446
00:24:04,060 --> 00:24:12,750
<font color="#E5E5E5">all right let's see if it's uh this is</font>

447
00:24:09,610 --> 00:24:16,750
not going yep this is not going well

448
00:24:12,750 --> 00:24:24,190
anybody can see<font color="#E5E5E5"> anything nah</font>

449
00:24:16,750 --> 00:24:28,150
<font color="#E5E5E5">all right awesome I cannot make</font><font color="#CCCCCC"> it</font>

450
00:24:24,190 --> 00:24:31,470
bigger<font color="#E5E5E5"> let's see if I could get it's</font>

451
00:24:28,150 --> 00:24:31,470
just<font color="#CCCCCC"> a second</font>

452
00:24:43,990 --> 00:24:56,500
<font color="#CCCCCC">mm no same</font><font color="#E5E5E5"> thing here right just</font><font color="#CCCCCC"> a</font>

453
00:24:50,950 --> 00:24:59,670
second and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> slightly better</font><font color="#CCCCCC"> or if</font>

454
00:24:56,500 --> 00:25:02,260
it's the same<font color="#E5E5E5"> sorry about that</font>

455
00:24:59,670 --> 00:25:06,190
basically I'm going<font color="#E5E5E5"> to describe it</font>

456
00:25:02,260 --> 00:25:09,100
<font color="#CCCCCC">seeing as nobody can see it clowns the</font>

457
00:25:06,190 --> 00:25:11,920
repository<font color="#E5E5E5"> changes that the directory</font>

458
00:25:09,100 --> 00:25:14,560
into the examples one in runs<font color="#CCCCCC"> a little</font>

459
00:25:11,920 --> 00:25:20,080
<font color="#E5E5E5">script that uses vagrant</font>

460
00:25:14,560 --> 00:25:22,899
<font color="#CCCCCC">Libert KVM</font><font color="#E5E5E5"> and unstable</font><font color="#CCCCCC"> to deployed to</font>

461
00:25:20,080 --> 00:25:25,179
make the deployment<font color="#CCCCCC"> I have sped up</font><font color="#E5E5E5"> the</font>

462
00:25:22,900 --> 00:25:30,700
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ansible part</font><font color="#E5E5E5"> because it takes like</font>

463
00:25:25,180 --> 00:25:34,860
20 minutes<font color="#CCCCCC"> so now we have completed</font><font color="#E5E5E5"> the</font>

464
00:25:30,700 --> 00:25:38,920
deployment we<font color="#E5E5E5"> SSH into the master node</font>

465
00:25:34,860 --> 00:25:40,990
and now we're going to<font color="#E5E5E5"> check that the</font>

466
00:25:38,920 --> 00:25:47,710
pots are actually running we have<font color="#CCCCCC"> the</font>

467
00:25:40,990 --> 00:25:50,010
controller<font color="#E5E5E5"> in two node pots on the</font>

468
00:25:47,710 --> 00:25:53,230
controller we<font color="#CCCCCC"> have five</font><font color="#E5E5E5"> different</font>

469
00:25:50,010 --> 00:25:55,830
containers<font color="#CCCCCC"> I'm not running</font><font color="#E5E5E5"> the lightness</font>

470
00:25:53,230 --> 00:26:00,220
<font color="#CCCCCC">Pro container so it's provisioner</font>

471
00:25:55,830 --> 00:26:03,580
attacher<font color="#E5E5E5"> is nap shutter the</font><font color="#CCCCCC"> actual CSI</font>

472
00:26:00,220 --> 00:26:07,450
plugin and instead<font color="#CCCCCC"> of the lightness</font><font color="#E5E5E5"> and</font>

473
00:26:03,580 --> 00:26:10,360
<font color="#E5E5E5">run in</font><font color="#CCCCCC"> CSC which is a command-line tool</font>

474
00:26:07,450 --> 00:26:13,150
that allows you to<font color="#E5E5E5"> make requests to your</font>

475
00:26:10,360 --> 00:26:15,010
CSI<font color="#E5E5E5"> plugins directly you don't</font><font color="#CCCCCC"> need to</font>

476
00:26:13,150 --> 00:26:17,020
go through kubernetes this is useful<font color="#E5E5E5"> for</font>

477
00:26:15,010 --> 00:26:19,150
debugging<font color="#CCCCCC"> like for example</font><font color="#E5E5E5"> you can run</font>

478
00:26:17,020 --> 00:26:22,660
our list volumes<font color="#E5E5E5"> without actually going</font>

479
00:26:19,150 --> 00:26:26,110
through kubernetes<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> we are</font>

480
00:26:22,660 --> 00:26:32,080
running the driver<font color="#E5E5E5"> racer as I mentioned</font>

481
00:26:26,110 --> 00:26:37,990
the<font color="#E5E5E5"> Ember CSI container running</font><font color="#CCCCCC"> on node</font>

482
00:26:32,080 --> 00:26:43,750
mode and again<font color="#CCCCCC"> the CSI</font><font color="#E5E5E5"> container the CSC</font>

483
00:26:37,990 --> 00:26:46,240
container the tool now we have the

484
00:26:43,750 --> 00:26:51,730
driver racer register with kubernetes

485
00:26:46,240 --> 00:26:56,380
<font color="#E5E5E5">use with cubelet using right now it's a</font>

486
00:26:51,730 --> 00:26:57,700
<font color="#E5E5E5">CR</font><font color="#CCCCCC"> D which is</font><font color="#E5E5E5"> CSI node info dot</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> side</font>

487
00:26:56,380 --> 00:27:02,320
<font color="#E5E5E5">of the story dot</font>

488
00:26:57,700 --> 00:27:04,660
okay<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> at eight s dot</font><font color="#E5E5E5"> IO and here we</font>

489
00:27:02,320 --> 00:27:06,879
can see<font color="#CCCCCC"> that it has register</font><font color="#E5E5E5"> the two</font>

490
00:27:04,660 --> 00:27:11,410
notes<font color="#E5E5E5"> that we have and that</font><font color="#CCCCCC"> the</font>

491
00:27:06,880 --> 00:27:13,990
controller is not<font color="#CCCCCC"> registered there</font><font color="#E5E5E5"> now</font>

492
00:27:11,410 --> 00:27:17,950
we are going<font color="#E5E5E5"> to split</font><font color="#CCCCCC"> the screen to see</font>

493
00:27:13,990 --> 00:27:21,790
on the lower<font color="#E5E5E5"> half the logs from</font><font color="#CCCCCC"> the</font>

494
00:27:17,950 --> 00:27:24,100
controller<font color="#E5E5E5"> and we can see that we have</font>

495
00:27:21,790 --> 00:27:27,370
received<font color="#E5E5E5"> multiple probes we</font><font color="#CCCCCC"> receive</font>

496
00:27:24,100 --> 00:27:30,070
multiple probes<font color="#CCCCCC"> because each</font><font color="#E5E5E5"> there is a</font>

497
00:27:27,370 --> 00:27:33,219
snap<font color="#CCCCCC"> shutter</font><font color="#E5E5E5"> and they attach</font><font color="#CCCCCC"> here each</font>

498
00:27:30,070 --> 00:27:35,439
one probe the the plugin to check that

499
00:27:33,220 --> 00:27:42,580
it's<font color="#E5E5E5"> working so they are coming from</font>

500
00:27:35,440 --> 00:27:47,080
different<font color="#E5E5E5"> side carts and now we are</font>

501
00:27:42,580 --> 00:27:51,040
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to create a PVC</font><font color="#CCCCCC"> yeah see that the</font>

502
00:27:47,080 --> 00:27:54,100
new<font color="#CCCCCC"> cause all right we get a request</font><font color="#E5E5E5"> to</font>

503
00:27:51,040 --> 00:27:56,500
get capabilities<font color="#E5E5E5"> because to confirm that</font>

504
00:27:54,100 --> 00:27:58,300
the controller can actually create the

505
00:27:56,500 --> 00:28:01,810
volumes<font color="#CCCCCC"> we get a little</font><font color="#E5E5E5"> more</font>

506
00:27:58,300 --> 00:28:05,830
capabilities<font color="#E5E5E5"> plugging info and finally</font>

507
00:28:01,810 --> 00:28:10,179
we receive the RPC create volume<font color="#E5E5E5"> request</font>

508
00:28:05,830 --> 00:28:12,879
with that is the name<font color="#CCCCCC"> the what we call</font>

509
00:28:10,180 --> 00:28:14,830
the request ID the name argument<font color="#CCCCCC"> which</font>

510
00:28:12,880 --> 00:28:17,440
was the<font color="#E5E5E5"> request ID which we use for</font>

511
00:28:14,830 --> 00:28:23,080
idempotency<font color="#E5E5E5"> and then we create a volume</font>

512
00:28:17,440 --> 00:28:28,930
and<font color="#CCCCCC"> we return there that ID so we</font><font color="#E5E5E5"> have</font>

513
00:28:23,080 --> 00:28:32,050
now<font color="#E5E5E5"> PVC that it's bound and now we're</font>

514
00:28:28,930 --> 00:28:37,210
<font color="#CCCCCC">going this is a the gate volumes is an</font>

515
00:28:32,050 --> 00:28:40,360
internal representation for<font color="#CCCCCC"> ember CSI to</font>

516
00:28:37,210 --> 00:28:43,510
to store<font color="#E5E5E5"> the metadata</font><font color="#CCCCCC"> of the volumes in</font>

517
00:28:40,360 --> 00:28:46,590
kubernetes<font color="#E5E5E5"> now we create</font><font color="#CCCCCC"> an app that</font>

518
00:28:43,510 --> 00:28:50,500
it's<font color="#E5E5E5"> going to be using that if you see</font>

519
00:28:46,590 --> 00:28:55,689
we receive the controller<font color="#E5E5E5"> publish call</font>

520
00:28:50,500 --> 00:28:59,320
and we return the<font color="#E5E5E5"> value we will return</font>

521
00:28:55,690 --> 00:29:04,090
<font color="#E5E5E5">that that the volume</font><font color="#CCCCCC"> has been</font><font color="#E5E5E5"> exported</font>

522
00:28:59,320 --> 00:29:06,010
and mapped by the by the CSI plugin

523
00:29:04,090 --> 00:29:11,060
so it can be used<font color="#E5E5E5"> for from that specific</font>

524
00:29:06,010 --> 00:29:15,050
<font color="#CCCCCC">node then on the upper half we</font>

525
00:29:11,060 --> 00:29:17,629
the login of<font color="#CCCCCC"> the note site</font><font color="#E5E5E5"> that where</font>

526
00:29:15,050 --> 00:29:21,139
the<font color="#E5E5E5"> control in the container is going to</font>

527
00:29:17,630 --> 00:29:24,530
be started<font color="#E5E5E5"> and we see that the</font><font color="#CCCCCC"> driver</font><font color="#E5E5E5"> is</font>

528
00:29:21,140 --> 00:29:30,530
using<font color="#E5E5E5"> a stake in</font><font color="#CCCCCC"> face so we get a call</font>

529
00:29:24,530 --> 00:29:39,110
or<font color="#CCCCCC"> - not a staged volume and it</font><font color="#E5E5E5"> returns</font>

530
00:29:30,530 --> 00:29:41,810
now it is request the request come get

531
00:29:39,110 --> 00:29:44,389
the<font color="#CCCCCC"> state's volume then a published</font>

532
00:29:41,810 --> 00:29:48,129
volume and the volume at this stage is

533
00:29:44,390 --> 00:29:51,410
<font color="#E5E5E5">already published in the target path so</font>

534
00:29:48,130 --> 00:29:53,900
kubernetes can already use it<font color="#E5E5E5"> we check</font>

535
00:29:51,410 --> 00:29:58,550
the status of the<font color="#CCCCCC"> port and we see that</font>

536
00:29:53,900 --> 00:30:02,840
the application<font color="#CCCCCC"> hasn't is not ready in</font>

537
00:29:58,550 --> 00:30:06,350
we wait a<font color="#E5E5E5"> little bit and the application</font>

538
00:30:02,840 --> 00:30:10,580
is<font color="#E5E5E5"> running we can check the volume</font>

539
00:30:06,350 --> 00:30:13,429
attachment<font color="#CCCCCC"> then that is the object</font><font color="#E5E5E5"> that</font>

540
00:30:10,580 --> 00:30:16,070
<font color="#E5E5E5">they're at attacher sidecar is</font>

541
00:30:13,430 --> 00:30:19,010
monitoring<font color="#E5E5E5"> and we see that it it is</font>

542
00:30:16,070 --> 00:30:23,810
there and this<font color="#CCCCCC"> concludes the present day</font>

543
00:30:19,010 --> 00:30:26,230
<font color="#E5E5E5">the demo</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> second let me take it out</font>

544
00:30:23,810 --> 00:30:26,230
from there

545
00:30:29,330 --> 00:30:38,460
so to conclude at<font color="#E5E5E5"> the beginning we were</font>

546
00:30:35,820 --> 00:30:40,019
asking should<font color="#E5E5E5"> we care</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> CSI is it</font>

547
00:30:38,460 --> 00:30:43,440
going to make it is it<font color="#CCCCCC"> going to make</font><font color="#E5E5E5"> a</font>

548
00:30:40,019 --> 00:30:46,139
difference if you have<font color="#CCCCCC"> a look and see</font>

549
00:30:43,440 --> 00:30:49,380
the support<font color="#E5E5E5"> that it's getting from the</font>

550
00:30:46,139 --> 00:30:52,620
orchestrator and the storage<font color="#E5E5E5"> vendors the</font>

551
00:30:49,380 --> 00:30:56,639
number of<font color="#CCCCCC"> Orchestrator platforms that</font>

552
00:30:52,620 --> 00:30:58,889
already support it<font color="#CCCCCC"> and the fact that all</font>

553
00:30:56,639 --> 00:31:01,590
the new features are<font color="#E5E5E5"> coming through CSI</font>

554
00:30:58,889 --> 00:31:03,750
and the orchestrator<font color="#E5E5E5"> are not bothering</font>

555
00:31:01,590 --> 00:31:06,418
<font color="#CCCCCC">to add these</font><font color="#E5E5E5"> features to their other</font>

556
00:31:03,750 --> 00:31:09,299
interfaces<font color="#E5E5E5"> only CSI is getting these</font>

557
00:31:06,419 --> 00:31:11,639
features it is clear<font color="#CCCCCC"> that they are</font>

558
00:31:09,299 --> 00:31:13,320
betting<font color="#E5E5E5"> on this and we already have</font>

559
00:31:11,639 --> 00:31:19,370
support from the orchestrator we have a

560
00:31:13,320 --> 00:31:22,529
good number of<font color="#E5E5E5"> plugins so in my opinion</font>

561
00:31:19,370 --> 00:31:25,709
<font color="#E5E5E5">it is going to make it this is what it's</font>

562
00:31:22,529 --> 00:31:28,919
going to<font color="#CCCCCC"> look like</font><font color="#E5E5E5"> storage in the future</font>

563
00:31:25,710 --> 00:31:32,370
for containers<font color="#E5E5E5"> and if you want to check</font>

564
00:31:28,919 --> 00:31:37,950
it out<font color="#CCCCCC"> easily you can go to member CSI</font>

565
00:31:32,370 --> 00:31:39,539
and try it<font color="#CCCCCC"> thanks and if there are any</font>

566
00:31:37,950 --> 00:31:42,679
questions<font color="#E5E5E5"> I think we have like two</font>

567
00:31:39,539 --> 00:31:42,679
minutes<font color="#CCCCCC"> for four minutes</font>

568
00:31:46,420 --> 00:32:11,590
<font color="#E5E5E5">okay okay the question</font><font color="#CCCCCC"> was how can we</font>

569
00:32:07,450 --> 00:32:14,650
track for example<font color="#CCCCCC"> as a CSI</font><font color="#E5E5E5"> plugin</font>

570
00:32:11,590 --> 00:32:20,080
implementer<font color="#CCCCCC"> determine the</font><font color="#E5E5E5"> the devolution</font>

571
00:32:14,650 --> 00:32:23,200
of<font color="#CCCCCC"> the CSI spec they the development is</font>

572
00:32:20,080 --> 00:32:25,659
being done in a github repository<font color="#CCCCCC"> they</font>

573
00:32:23,200 --> 00:32:27,760
have a mailing list<font color="#E5E5E5"> and they have now I</font>

574
00:32:25,660 --> 00:32:29,650
<font color="#E5E5E5">don't I think they have increased the</font>

575
00:32:27,760 --> 00:32:32,110
gardens to<font color="#CCCCCC"> by quickly</font><font color="#E5E5E5"> or monthly</font>

576
00:32:29,650 --> 00:32:34,450
<font color="#E5E5E5">meetings everything</font><font color="#CCCCCC"> is open to everybody</font>

577
00:32:32,110 --> 00:32:37,719
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> check the</font><font color="#CCCCCC"> status of the pull</font>

578
00:32:34,450 --> 00:32:41,500
<font color="#E5E5E5">request</font><font color="#CCCCCC"> how they</font><font color="#E5E5E5"> are advancing and check</font>

579
00:32:37,720 --> 00:32:43,000
also<font color="#E5E5E5"> the the meeting agenda</font><font color="#CCCCCC"> to see if</font>

580
00:32:41,500 --> 00:32:45,310
they are discussing a topic you<font color="#E5E5E5"> can</font>

581
00:32:43,000 --> 00:32:49,360
attend the<font color="#E5E5E5"> meetings so usually the best</font>

582
00:32:45,310 --> 00:32:52,330
way<font color="#CCCCCC"> to if you</font><font color="#E5E5E5"> are not as much interested</font>

583
00:32:49,360 --> 00:32:55,330
<font color="#CCCCCC">in contributing to a CSI but implemented</font>

584
00:32:52,330 --> 00:32:58,210
it<font color="#E5E5E5"> the best way is to just once a</font><font color="#CCCCCC"> week</font>

585
00:32:55,330 --> 00:33:00,370
<font color="#E5E5E5">to go check they did hub repository see</font>

586
00:32:58,210 --> 00:33:03,100
the new<font color="#CCCCCC"> patches that art went in and say</font>

587
00:33:00,370 --> 00:33:05,649
<font color="#CCCCCC">ok these are the</font><font color="#E5E5E5"> changes now we have a</font>

588
00:33:03,100 --> 00:33:07,750
way to resize and we can resize offline

589
00:33:05,650 --> 00:33:10,960
on<font color="#E5E5E5"> online let's see what my</font><font color="#CCCCCC"> backing can</font>

590
00:33:07,750 --> 00:33:12,930
<font color="#E5E5E5">do and just implement</font><font color="#CCCCCC"> it does</font><font color="#E5E5E5"> that</font>

591
00:33:10,960 --> 00:33:19,170
answer the question

592
00:33:12,930 --> 00:33:19,170
<font color="#CCCCCC">ok anybody else</font>

593
00:33:21,350 --> 00:33:30,139
I don't think<font color="#CCCCCC"> they</font><font color="#E5E5E5"> publish it sorry the</font>

594
00:33:27,679 --> 00:33:33,889
question<font color="#E5E5E5"> was whether they publish a road</font>

595
00:33:30,139 --> 00:33:38,149
<font color="#E5E5E5">map or not and I don't</font><font color="#CCCCCC"> think they they</font>

596
00:33:33,889 --> 00:33:40,100
do<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> found it I know they when</font>

597
00:33:38,149 --> 00:33:42,439
they<font color="#E5E5E5"> are in during the meetings at some</font>

598
00:33:40,100 --> 00:33:44,750
point<font color="#E5E5E5"> they decide</font><font color="#CCCCCC"> okay we</font><font color="#E5E5E5"> won this</font>

599
00:33:42,440 --> 00:33:47,899
<font color="#E5E5E5">feature this is</font><font color="#CCCCCC"> a blocker they decide</font>

600
00:33:44,750 --> 00:33:50,029
the priorities<font color="#CCCCCC"> but it is not published</font>

601
00:33:47,899 --> 00:33:55,428
<font color="#E5E5E5">as such you can probably you can check</font>

602
00:33:50,029 --> 00:33:58,220
the the the levels on<font color="#E5E5E5"> the PRS and see if</font>

603
00:33:55,429 --> 00:34:00,379
they what little they have been<font color="#E5E5E5"> assigned</font>

604
00:33:58,220 --> 00:34:03,100
as a<font color="#CCCCCC"> blocker</font><font color="#E5E5E5"> as a nice-to-have</font>

605
00:34:00,379 --> 00:34:05,899
or us this is<font color="#E5E5E5"> going on the next release</font>

606
00:34:03,100 --> 00:34:11,319
<font color="#E5E5E5">you don't have a page or something with</font>

607
00:34:05,899 --> 00:34:11,319
this disorient you have to query the PRS

608
00:34:12,040 --> 00:34:24,009
yep I'm<font color="#E5E5E5"> out of time</font><font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much</font>

609
00:34:15,030 --> 00:34:24,010
[Applause]

