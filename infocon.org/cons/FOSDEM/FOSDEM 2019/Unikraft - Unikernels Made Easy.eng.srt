1
00:00:04,610 --> 00:00:09,290
so unique craft is actually an

2
00:00:07,069 --> 00:00:12,500
<font color="#CCCCCC">open-source project that we started at</font>

3
00:00:09,290 --> 00:00:16,480
NEC while we were<font color="#CCCCCC"> experimenting and</font>

4
00:00:12,500 --> 00:00:19,369
playing around with unicorns in<font color="#E5E5E5"> the past</font>

5
00:00:16,480 --> 00:00:21,050
<font color="#CCCCCC">some also from that</font><font color="#E5E5E5"> research lab</font><font color="#CCCCCC"> we're</font>

6
00:00:19,369 --> 00:00:23,448
coming from so it's in Heidelberg based

7
00:00:21,050 --> 00:00:25,220
in Germany and I'm a senior researcher

8
00:00:23,449 --> 00:00:34,760
there and also<font color="#E5E5E5"> the lead maintainer of</font>

9
00:00:25,220 --> 00:00:37,909
<font color="#E5E5E5">that open source project so you've</font>

10
00:00:34,760 --> 00:00:41,540
<font color="#E5E5E5">probably are aware that VMs are around</font>

11
00:00:37,909 --> 00:00:44,989
for a while<font color="#CCCCCC"> and they were really good</font><font color="#E5E5E5"> in</font>

12
00:00:41,540 --> 00:00:48,350
<font color="#E5E5E5">features like consolidation migration</font>

13
00:00:44,989 --> 00:00:50,209
and isolation<font color="#CCCCCC"> and then this hive of</font>

14
00:00:48,350 --> 00:00:52,220
containers happened and they became much

15
00:00:50,210 --> 00:00:55,190
<font color="#CCCCCC">more popular</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> using them now and</font>

16
00:00:52,220 --> 00:00:58,280
<font color="#CCCCCC">they actually pretty</font><font color="#E5E5E5"> great but what you</font>

17
00:00:55,190 --> 00:01:00,619
hear them from<font color="#E5E5E5"> these people is they are</font>

18
00:00:58,280 --> 00:01:04,159
much<font color="#E5E5E5"> easier to use because I have this</font>

19
00:01:00,619 --> 00:01:07,100
talk<font color="#CCCCCC"> of</font><font color="#E5E5E5"> file and I go my containers are</font>

20
00:01:04,159 --> 00:01:09,440
much smaller than<font color="#E5E5E5"> your VMs my VM usually</font>

21
00:01:07,100 --> 00:01:12,619
is<font color="#CCCCCC"> 10 gigabytes</font><font color="#E5E5E5"> but my</font><font color="#CCCCCC"> containers just a</font>

22
00:01:09,440 --> 00:01:15,770
hundreds of megabytes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> also</font>

23
00:01:12,620 --> 00:01:17,750
much<font color="#CCCCCC"> faster to bring up the</font><font color="#E5E5E5"> VM takes</font>

24
00:01:15,770 --> 00:01:21,080
minutes to board<font color="#E5E5E5"> by the container is up</font>

25
00:01:17,750 --> 00:01:22,430
in<font color="#E5E5E5"> a few seconds and then we say usually</font>

26
00:01:21,080 --> 00:01:24,770
<font color="#E5E5E5">wait wait wait</font>

27
00:01:22,430 --> 00:01:27,770
<font color="#E5E5E5">maybe all correct but actually did you</font>

28
00:01:24,770 --> 00:01:31,310
hear about<font color="#E5E5E5"> unique URLs because it should</font>

29
00:01:27,770 --> 00:01:35,390
be aware<font color="#CCCCCC"> that VM still have some some</font>

30
00:01:31,310 --> 00:01:37,670
advantages that not necessarily get from

31
00:01:35,390 --> 00:01:43,720
container environments<font color="#E5E5E5"> and most</font>

32
00:01:37,670 --> 00:01:46,280
importantly is strong isolation<font color="#E5E5E5"> so let's</font>

33
00:01:43,720 --> 00:01:49,729
let's give you a give you a<font color="#CCCCCC"> very short</font>

34
00:01:46,280 --> 00:01:52,510
<font color="#E5E5E5">overview what a unicorn is let's take</font>

35
00:01:49,729 --> 00:01:54,890
this<font color="#E5E5E5"> example on the</font><font color="#CCCCCC"> left side you see</font><font color="#E5E5E5"> an</font>

36
00:01:52,510 --> 00:01:59,330
cloud service deployed with virtual

37
00:01:54,890 --> 00:02:02,540
machines<font color="#CCCCCC"> and each service entity is one</font>

38
00:01:59,330 --> 00:02:05,600
<font color="#E5E5E5">application running in</font><font color="#CCCCCC"> a known isolation</font>

39
00:02:02,540 --> 00:02:07,909
box<font color="#E5E5E5"> so in in an own virtual machine you</font>

40
00:02:05,600 --> 00:02:09,560
have then a standard<font color="#E5E5E5"> operating system</font>

41
00:02:07,909 --> 00:02:11,360
<font color="#E5E5E5">underneath meaning</font><font color="#CCCCCC"> off most</font><font color="#E5E5E5"> of the time</font>

42
00:02:09,560 --> 00:02:13,970
it's a Linux kernel<font color="#E5E5E5"> you run on a</font>

43
00:02:11,360 --> 00:02:17,030
hypervisor<font color="#E5E5E5"> it might be a VM Zen or</font>

44
00:02:13,970 --> 00:02:20,359
VMware<font color="#CCCCCC"> or</font><font color="#E5E5E5"> whatever you deploy</font>

45
00:02:17,030 --> 00:02:22,160
and yeah it's quite a<font color="#CCCCCC"> heavyweight right</font>

46
00:02:20,360 --> 00:02:25,370
this<font color="#E5E5E5"> tag is quite big</font><font color="#CCCCCC"> so what do we</font><font color="#E5E5E5"> do</font>

47
00:02:22,160 --> 00:02:28,250
in<font color="#CCCCCC"> unicorns so first of all</font><font color="#E5E5E5"> we want to</font>

48
00:02:25,370 --> 00:02:30,560
<font color="#E5E5E5">keep the same service as before so we</font>

49
00:02:28,250 --> 00:02:33,250
take that<font color="#E5E5E5"> application</font><font color="#CCCCCC"> keep it still in</font>

50
00:02:30,560 --> 00:02:35,660
the isolation boundary but what we do is

51
00:02:33,250 --> 00:02:40,130
<font color="#E5E5E5">replacing that general-purpose kernel</font>

52
00:02:35,660 --> 00:02:42,620
and<font color="#E5E5E5"> put a purpose-built kernel towards</font>

53
00:02:40,130 --> 00:02:44,120
that application underneath so you<font color="#E5E5E5"> see</font>

54
00:02:42,620 --> 00:02:48,500
that service<font color="#E5E5E5"> a has a different color</font>

55
00:02:44,120 --> 00:02:52,190
underneath<font color="#CCCCCC"> than application B that whole</font>

56
00:02:48,500 --> 00:02:55,280
thing is a monolithic binary that

57
00:02:52,190 --> 00:02:58,970
contains<font color="#E5E5E5"> just a few kernel layers and</font>

58
00:02:55,280 --> 00:03:00,910
the application and also<font color="#CCCCCC"> only features</font>

59
00:02:58,970 --> 00:03:04,100
<font color="#E5E5E5">that the application needs</font>

60
00:03:00,910 --> 00:03:05,420
<font color="#CCCCCC">you don't need isolation</font><font color="#E5E5E5"> anymore if you</font>

61
00:03:04,100 --> 00:03:07,640
have that assumption<font color="#CCCCCC"> that you have</font>

62
00:03:05,420 --> 00:03:10,100
<font color="#CCCCCC">anyway just one application</font><font color="#E5E5E5"> in one</font>

63
00:03:07,640 --> 00:03:11,899
virtual machine<font color="#E5E5E5"> so you don't separate</font>

64
00:03:10,100 --> 00:03:13,840
between<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> and kernel space</font>

65
00:03:11,900 --> 00:03:16,220
anymore

66
00:03:13,840 --> 00:03:19,340
which gives you also the advantage that

67
00:03:16,220 --> 00:03:21,980
<font color="#CCCCCC">you have further freedom in further</font>

68
00:03:19,340 --> 00:03:24,440
specializing the the kernel towards your

69
00:03:21,980 --> 00:03:27,590
application right you can't we can tune

70
00:03:24,440 --> 00:03:29,859
it<font color="#E5E5E5"> so that it performs that task quite</font>

71
00:03:27,590 --> 00:03:29,860
well

72
00:03:36,060 --> 00:03:41,220
so the gains that we<font color="#E5E5E5"> found with</font><font color="#CCCCCC"> our</font>

73
00:03:39,120 --> 00:03:43,380
previous research doing that mainly

74
00:03:41,220 --> 00:03:46,350
coming from<font color="#E5E5E5"> network function</font>

75
00:03:43,380 --> 00:03:48,240
virtualization space is fast

76
00:03:46,350 --> 00:03:51,750
instantiation<font color="#E5E5E5"> destruction in migration</font>

77
00:03:48,240 --> 00:03:54,060
times in<font color="#E5E5E5"> order of tens of milliseconds</font><font color="#CCCCCC"> a</font>

78
00:03:51,750 --> 00:03:56,520
really low memory<font color="#E5E5E5"> footprint of few</font>

79
00:03:54,060 --> 00:03:59,040
megabytes of<font color="#E5E5E5"> RAM you</font><font color="#CCCCCC"> could achieve</font>

80
00:03:56,520 --> 00:04:01,830
extremely high density of<font color="#CCCCCC"> these services</font>

81
00:03:59,040 --> 00:04:05,160
<font color="#CCCCCC">so we were able on a</font><font color="#E5E5E5"> singer</font><font color="#CCCCCC"> hardware</font>

82
00:04:01,830 --> 00:04:09,420
server x86<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> 10,000 guests and then</font>

83
00:04:05,160 --> 00:04:11,760
we run<font color="#E5E5E5"> out of RAM</font><font color="#CCCCCC"> we could achieve high</font>

84
00:04:09,420 --> 00:04:15,000
performance by by just<font color="#E5E5E5"> using a single</font>

85
00:04:11,760 --> 00:04:17,219
<font color="#CCCCCC">gasp</font><font color="#E5E5E5"> CPUs who were easily able to cope</font>

86
00:04:15,000 --> 00:04:18,660
<font color="#CCCCCC">with</font><font color="#E5E5E5"> 10 or 40 gigabits</font><font color="#CCCCCC"> network</font>

87
00:04:17,220 --> 00:04:21,150
throughput at that time so it's kind of

88
00:04:18,660 --> 00:04:24,060
<font color="#E5E5E5">that</font><font color="#CCCCCC"> dump is already two-three years old</font>

89
00:04:21,149 --> 00:04:28,020
<font color="#E5E5E5">but even</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> demonstrated</font><font color="#CCCCCC"> already how</font>

90
00:04:24,060 --> 00:04:29,970
fast this stuff can go and last<font color="#E5E5E5"> but not</font>

91
00:04:28,020 --> 00:04:32,190
least you have also and reduce the tax

92
00:04:29,970 --> 00:04:33,690
service because<font color="#CCCCCC"> you have the argument</font>

93
00:04:32,190 --> 00:04:37,590
that<font color="#E5E5E5"> you have much less components</font><font color="#CCCCCC"> in a</font>

94
00:04:33,690 --> 00:04:39,419
<font color="#E5E5E5">unicrone and next to it the strong</font>

95
00:04:37,590 --> 00:04:43,859
<font color="#CCCCCC">isolation is provided by your hypervisor</font>

96
00:04:39,419 --> 00:04:47,250
environment so what I want to<font color="#E5E5E5"> do is give</font>

97
00:04:43,860 --> 00:04:50,669
you just a few<font color="#CCCCCC"> graphs</font><font color="#E5E5E5"> you know to</font>

98
00:04:47,250 --> 00:04:54,270
demonstrate what<font color="#CCCCCC"> we found there and from</font>

99
00:04:50,669 --> 00:04:56,430
our<font color="#CCCCCC"> research work so let's talk about</font>

100
00:04:54,270 --> 00:04:59,359
the instantiation<font color="#E5E5E5"> times</font><font color="#CCCCCC"> so you see on</font>

101
00:04:56,430 --> 00:05:02,940
the horizontal axis<font color="#CCCCCC"> the number of</font>

102
00:04:59,360 --> 00:05:05,490
simultaneous<font color="#E5E5E5"> running instances in the</font>

103
00:05:02,940 --> 00:05:09,000
system what we take here is because<font color="#E5E5E5"> it's</font>

104
00:05:05,490 --> 00:05:10,590
a baseline<font color="#E5E5E5"> measurement</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> application</font>

105
00:05:09,000 --> 00:05:12,990
<font color="#E5E5E5">that actually does nothing just comes up</font>

106
00:05:10,590 --> 00:05:16,400
<font color="#E5E5E5">and tells</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> no I'm here and then it</font>

107
00:05:12,990 --> 00:05:19,680
just<font color="#E5E5E5"> stays in the system</font><font color="#CCCCCC"> and on</font><font color="#E5E5E5"> the</font>

108
00:05:16,400 --> 00:05:24,060
vertical<font color="#E5E5E5"> axis you</font><font color="#CCCCCC"> see the</font><font color="#E5E5E5"> instantiation</font>

109
00:05:19,680 --> 00:05:25,950
time of the enth<font color="#E5E5E5"> guess that was created</font>

110
00:05:24,060 --> 00:05:29,610
and also please aware this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

111
00:05:25,950 --> 00:05:31,800
logarithmic scale<font color="#CCCCCC"> so we start with</font><font color="#E5E5E5"> that</font>

112
00:05:29,610 --> 00:05:35,789
application<font color="#CCCCCC"> as a standard Linux process</font>

113
00:05:31,800 --> 00:05:37,680
<font color="#E5E5E5">and we get numbers like</font><font color="#CCCCCC"> 0.7 to</font><font color="#E5E5E5"> 10</font>

114
00:05:35,789 --> 00:05:41,070
milliseconds<font color="#E5E5E5"> of creation time if we</font>

115
00:05:37,680 --> 00:05:44,789
create<font color="#E5E5E5"> like</font><font color="#CCCCCC"> 1000 on the</font><font color="#E5E5E5"> machine if you</font>

116
00:05:41,070 --> 00:05:48,090
put that into docker that is still good

117
00:05:44,789 --> 00:05:49,979
<font color="#E5E5E5">but this is increasing already to 150 to</font>

118
00:05:48,090 --> 00:05:52,258
500<font color="#E5E5E5"> 50 milliseconds</font>

119
00:05:49,979 --> 00:05:54,240
but if<font color="#CCCCCC"> we take</font><font color="#E5E5E5"> now a standard VM so</font>

120
00:05:52,259 --> 00:05:56,939
let's say<font color="#E5E5E5"> you've just do bootstrap</font>

121
00:05:54,240 --> 00:06:00,210
Debian<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then wait until their</font>

122
00:05:56,939 --> 00:06:02,580
<font color="#E5E5E5">application is up</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> especially if</font>

123
00:06:00,210 --> 00:06:06,438
there are<font color="#CCCCCC"> lots of</font><font color="#E5E5E5"> VMs in the system that</font>

124
00:06:02,580 --> 00:06:08,909
that time goes up<font color="#E5E5E5"> to 82 seconds and then</font>

125
00:06:06,439 --> 00:06:09,990
let's take a<font color="#CCCCCC"> unique honor</font><font color="#E5E5E5"> doing the same</font>

126
00:06:08,909 --> 00:06:12,900
<font color="#E5E5E5">thing right</font>

127
00:06:09,990 --> 00:06:19,590
and then also<font color="#E5E5E5"> running as a VM and we are</font>

128
00:06:12,900 --> 00:06:22,109
<font color="#E5E5E5">around 63 to 1.4 seconds and I want to</font>

129
00:06:19,590 --> 00:06:24,330
add<font color="#E5E5E5"> here as well</font><font color="#CCCCCC"> that this measurement</font>

130
00:06:22,110 --> 00:06:26,310
didn't modify<font color="#CCCCCC"> any</font><font color="#E5E5E5"> anything on the tool</font>

131
00:06:24,330 --> 00:06:27,840
stack which we also did in our research

132
00:06:26,310 --> 00:06:32,099
so if you're interested<font color="#CCCCCC"> I can point you</font>

133
00:06:27,840 --> 00:06:33,750
<font color="#E5E5E5">to some papers</font><font color="#CCCCCC"> where we replaced the</font>

134
00:06:32,099 --> 00:06:35,069
<font color="#CCCCCC">tools start with something</font><font color="#E5E5E5"> written from</font>

135
00:06:33,750 --> 00:06:37,259
<font color="#CCCCCC">scratch which is much more lightweight</font>

136
00:06:35,069 --> 00:06:40,129
than standard<font color="#E5E5E5"> then and then we could put</font>

137
00:06:37,259 --> 00:06:44,090
<font color="#E5E5E5">even in 30 milliseconds or</font><font color="#CCCCCC"> less that</font>

138
00:06:40,129 --> 00:06:48,599
<font color="#CCCCCC">único know but so far so good in</font>

139
00:06:44,090 --> 00:06:50,400
performance<font color="#E5E5E5"> to show</font><font color="#CCCCCC"> you a purpose-built</font>

140
00:06:48,599 --> 00:06:55,440
<font color="#E5E5E5">HTTP web server so it's completely</font>

141
00:06:50,400 --> 00:06:58,650
purpose-built nothing<font color="#CCCCCC"> ports it in terms</font>

142
00:06:55,440 --> 00:07:01,500
of<font color="#E5E5E5"> throughput you have here a Debian</font>

143
00:06:58,650 --> 00:07:04,830
virtual machine running nginx so this is

144
00:07:01,500 --> 00:07:08,819
<font color="#E5E5E5">this is the DN you have a Debian virtual</font>

145
00:07:04,830 --> 00:07:11,849
machine like running light httpd the<font color="#E5E5E5"> T</font>

146
00:07:08,819 --> 00:07:14,580
means here it's<font color="#CCCCCC"> it's tiny-g's</font><font color="#E5E5E5"> which is</font>

147
00:07:11,849 --> 00:07:16,800
actually a small compiled<font color="#E5E5E5"> Linux kernel</font>

148
00:07:14,580 --> 00:07:19,979
<font color="#CCCCCC">than just running the process directly</font>

149
00:07:16,800 --> 00:07:24,659
from the<font color="#CCCCCC"> in a dram disk</font><font color="#E5E5E5"> they all getting</font>

150
00:07:19,979 --> 00:07:26,758
<font color="#E5E5E5">one CPU assigned and the same amount</font><font color="#CCCCCC"> of</font>

151
00:07:24,659 --> 00:07:30,659
RAM<font color="#CCCCCC"> assigned I</font><font color="#E5E5E5"> think was 500 megabytes</font>

152
00:07:26,759 --> 00:07:33,689
or<font color="#E5E5E5"> something and and the the the</font>

153
00:07:30,659 --> 00:07:37,379
<font color="#E5E5E5">filesystem</font><font color="#CCCCCC"> is off from</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Ram disk</font><font color="#E5E5E5"> if</font>

154
00:07:33,689 --> 00:07:39,750
there is any so in terms of<font color="#E5E5E5"> throughput</font>

155
00:07:37,379 --> 00:07:41,939
<font color="#E5E5E5">you see here not</font><font color="#CCCCCC"> that much of an</font>

156
00:07:39,750 --> 00:07:43,889
<font color="#E5E5E5">advantage</font><font color="#CCCCCC"> as soon as we go more up</font><font color="#E5E5E5"> to</font>

157
00:07:41,939 --> 00:07:45,779
parallel connections because the

158
00:07:43,889 --> 00:07:47,610
bottleneck here is the actual<font color="#CCCCCC"> hardware</font>

159
00:07:45,779 --> 00:07:48,629
<font color="#CCCCCC">NIC because you have so many offloading</font>

160
00:07:47,610 --> 00:07:50,819
features in the meantime like

161
00:07:48,629 --> 00:07:53,069
segmentation<font color="#CCCCCC"> over and so forth</font><font color="#E5E5E5"> the</font>

162
00:07:50,819 --> 00:07:56,729
<font color="#E5E5E5">interesting part is dealing</font><font color="#CCCCCC"> with</font>

163
00:07:53,069 --> 00:07:59,370
requests per second and the yellow part

164
00:07:56,729 --> 00:08:01,889
<font color="#E5E5E5">is our actually our unique</font><font color="#CCCCCC"> owner and we</font>

165
00:07:59,370 --> 00:08:04,260
are<font color="#E5E5E5"> six times faster the same resources</font>

166
00:08:01,889 --> 00:08:06,720
<font color="#E5E5E5">in in that virtual</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> environment</font>

167
00:08:04,260 --> 00:08:14,520
just being<font color="#E5E5E5"> extremely purpose-built to</font>

168
00:08:06,720 --> 00:08:16,830
that use case so<font color="#E5E5E5"> application domains so</font>

169
00:08:14,520 --> 00:08:20,729
unique<font color="#CCCCCC"> owners</font><font color="#E5E5E5"> can actually have in a</font>

170
00:08:16,830 --> 00:08:23,370
white big area and<font color="#E5E5E5"> fields and it's also</font>

171
00:08:20,730 --> 00:08:27,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we found that</font><font color="#E5E5E5"> the properties that</font>

172
00:08:23,370 --> 00:08:31,050
<font color="#CCCCCC">unicorns give you each use case makes</font>

173
00:08:27,660 --> 00:08:32,520
use of a different<font color="#CCCCCC"> set let's say so what</font>

174
00:08:31,050 --> 00:08:35,880
do<font color="#E5E5E5"> we have we have actually fast</font>

175
00:08:32,520 --> 00:08:38,098
migration and<font color="#E5E5E5"> destroy time there we</font>

176
00:08:35,880 --> 00:08:40,140
would go in<font color="#E5E5E5"> something like reactive</font><font color="#CCCCCC"> NFV</font>

177
00:08:38,099 --> 00:08:42,150
so imagine web servers<font color="#CCCCCC"> that just pop up</font>

178
00:08:40,140 --> 00:08:45,180
when your request is<font color="#CCCCCC"> coming in to</font><font color="#E5E5E5"> your</font>

179
00:08:42,150 --> 00:08:46,980
server or server<font color="#CCCCCC"> les or</font><font color="#E5E5E5"> Amazon lambda</font>

180
00:08:45,180 --> 00:08:49,410
and you know this these kinds of<font color="#E5E5E5"> things</font>

181
00:08:46,980 --> 00:08:53,970
we have extremely high resource

182
00:08:49,410 --> 00:08:55,650
efficiency<font color="#E5E5E5"> also good for server</font><font color="#CCCCCC"> less</font><font color="#E5E5E5"> if</font>

183
00:08:53,970 --> 00:08:57,780
you if you consider<font color="#E5E5E5"> you have high</font>

184
00:08:55,650 --> 00:09:00,480
consolidation lots of service<font color="#E5E5E5"> tasks you</font>

185
00:08:57,780 --> 00:09:02,459
<font color="#E5E5E5">know on a machine</font><font color="#CCCCCC"> are UT and mobilize</font>

186
00:09:00,480 --> 00:09:06,000
computing where you go into<font color="#CCCCCC"> an</font><font color="#E5E5E5"> area</font>

187
00:09:02,460 --> 00:09:08,220
where<font color="#E5E5E5"> you have more resource constrained</font>

188
00:09:06,000 --> 00:09:11,400
devices that<font color="#E5E5E5"> host your services on the</font>

189
00:09:08,220 --> 00:09:13,650
edge of<font color="#E5E5E5"> the network high performance</font>

190
00:09:11,400 --> 00:09:15,630
really important for<font color="#E5E5E5"> network function</font>

191
00:09:13,650 --> 00:09:19,040
virtualization<font color="#E5E5E5"> also mobile edge</font>

192
00:09:15,630 --> 00:09:22,189
computing<font color="#CCCCCC"> and then mission-critical</font>

193
00:09:19,040 --> 00:09:24,540
because we have a<font color="#CCCCCC"> lower attack surface</font>

194
00:09:22,190 --> 00:09:26,550
potentially we would have cheaper

195
00:09:24,540 --> 00:09:29,160
verification which is then getting

196
00:09:26,550 --> 00:09:34,800
interesting for even industrial

197
00:09:29,160 --> 00:09:36,930
<font color="#E5E5E5">IOT cases or even automotive and you may</font>

198
00:09:34,800 --> 00:09:39,630
ask here now so this<font color="#CCCCCC"> is all great so we</font>

199
00:09:36,930 --> 00:09:43,620
<font color="#CCCCCC">have similar</font><font color="#E5E5E5"> speed and sizes containers</font>

200
00:09:39,630 --> 00:09:45,720
or even less<font color="#CCCCCC"> we have then even strong</font>

201
00:09:43,620 --> 00:09:48,240
isolation security but why is<font color="#E5E5E5"> not</font>

202
00:09:45,720 --> 00:09:50,550
everybody<font color="#CCCCCC"> actually using it that's be</font>

203
00:09:48,240 --> 00:09:52,980
<font color="#E5E5E5">weird</font><font color="#CCCCCC"> and the problem is actually the</font>

204
00:09:50,550 --> 00:09:56,030
<font color="#CCCCCC">development of</font><font color="#E5E5E5"> these unique URLs</font><font color="#CCCCCC"> so each</font>

205
00:09:52,980 --> 00:10:02,130
of these highly optimized unicron's<font color="#E5E5E5"> is</font>

206
00:09:56,030 --> 00:10:04,949
until<font color="#CCCCCC"> now a manual task it takes</font><font color="#E5E5E5"> really</font>

207
00:10:02,130 --> 00:10:07,290
months<font color="#E5E5E5"> or even</font><font color="#CCCCCC"> longer so if you let's</font>

208
00:10:04,950 --> 00:10:08,940
say<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> the target to to create</font><font color="#CCCCCC"> a</font>

209
00:10:07,290 --> 00:10:10,829
web server<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the unique kernel you</font>

210
00:10:08,940 --> 00:10:13,530
start you know developing here then a

211
00:10:10,830 --> 00:10:15,570
driver there and then you choose choose

212
00:10:13,530 --> 00:10:17,640
a hypervisor where you want to support

213
00:10:15,570 --> 00:10:21,750
<font color="#E5E5E5">it and then you make use of there</font>

214
00:10:17,640 --> 00:10:23,339
of some specialization<font color="#E5E5E5"> features so</font><font color="#CCCCCC"> that</font>

215
00:10:21,750 --> 00:10:26,459
it runs<font color="#E5E5E5"> quite well on that</font><font color="#CCCCCC"> platform</font><font color="#E5E5E5"> and</font>

216
00:10:23,339 --> 00:10:27,930
then somebody<font color="#E5E5E5"> else comes along cool</font><font color="#CCCCCC"> but</font>

217
00:10:26,459 --> 00:10:30,089
now I want to<font color="#E5E5E5"> run it on</font><font color="#CCCCCC"> KVM and you're</font>

218
00:10:27,930 --> 00:10:31,589
like<font color="#E5E5E5"> okay I can start from the beginning</font>

219
00:10:30,089 --> 00:10:33,180
<font color="#CCCCCC">because you have different drivers you</font>

220
00:10:31,589 --> 00:10:35,190
have<font color="#CCCCCC"> a different vegetation environment</font>

221
00:10:33,180 --> 00:10:39,479
so forth<font color="#E5E5E5"> so it's a</font><font color="#CCCCCC"> throwaway</font><font color="#E5E5E5"> in the end</font>

222
00:10:35,190 --> 00:10:40,760
<font color="#E5E5E5">right so then even imagine you come now</font>

223
00:10:39,480 --> 00:10:42,899
<font color="#CCCCCC">with a</font><font color="#E5E5E5"> different application like</font>

224
00:10:40,760 --> 00:10:45,779
database server or<font color="#E5E5E5"> something you start</font>

225
00:10:42,899 --> 00:10:48,810
the whole process<font color="#CCCCCC"> again and again and</font>

226
00:10:45,779 --> 00:10:50,880
that's in fact not<font color="#E5E5E5"> something you</font>

227
00:10:48,810 --> 00:10:55,050
actually want<font color="#E5E5E5"> in</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> more production</font>

228
00:10:50,880 --> 00:10:57,120
environment so and this<font color="#E5E5E5"> is where we come</font>

229
00:10:55,050 --> 00:11:00,660
along with this unique raft<font color="#CCCCCC"> where we</font>

230
00:10:57,120 --> 00:11:04,709
<font color="#E5E5E5">actually want to provide a bit like a</font>

231
00:11:00,660 --> 00:11:07,290
unique kernel<font color="#CCCCCC"> build framework so the</font>

232
00:11:04,709 --> 00:11:09,750
<font color="#E5E5E5">motivation that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> set us is we want to</font>

233
00:11:07,290 --> 00:11:11,839
support a<font color="#E5E5E5"> really wide</font><font color="#CCCCCC"> range of use cases</font>

234
00:11:09,750 --> 00:11:13,860
meaning<font color="#E5E5E5"> also supporting wide range of</font>

235
00:11:11,839 --> 00:11:15,390
specialization techniques or whatever

236
00:11:13,860 --> 00:11:18,660
you want to do in<font color="#CCCCCC"> your unicron</font>

237
00:11:15,390 --> 00:11:21,300
environment meaning also<font color="#E5E5E5"> to us probably</font>

238
00:11:18,660 --> 00:11:23,430
<font color="#E5E5E5">don't know what the end users actually</font>

239
00:11:21,300 --> 00:11:26,490
are the the unique kernel developers

240
00:11:23,430 --> 00:11:29,579
actually using<font color="#CCCCCC"> for optimizing his use</font>

241
00:11:26,490 --> 00:11:32,060
case<font color="#E5E5E5"> so we should be open</font><font color="#CCCCCC"> both for</font><font color="#E5E5E5"> that</font>

242
00:11:29,579 --> 00:11:34,500
and<font color="#E5E5E5"> not dictate any any design decisions</font>

243
00:11:32,060 --> 00:11:37,859
we want to<font color="#E5E5E5"> simplify the building and</font>

244
00:11:34,500 --> 00:11:39,360
<font color="#CCCCCC">optimising process simplify porting of</font>

245
00:11:37,860 --> 00:11:42,050
existing applications<font color="#E5E5E5"> so most</font>

246
00:11:39,360 --> 00:11:46,050
applications luckily use something like

247
00:11:42,050 --> 00:11:49,800
for<font color="#CCCCCC"> instance the POSIX API so</font><font color="#E5E5E5"> that</font>

248
00:11:46,050 --> 00:11:54,029
that's a good<font color="#CCCCCC"> share point</font><font color="#E5E5E5"> and then also</font>

249
00:11:49,800 --> 00:11:56,810
for lots of these<font color="#CCCCCC"> unicron projects to</font>

250
00:11:54,029 --> 00:11:59,850
get rid of this throw away argument or a

251
00:11:56,810 --> 00:12:03,060
problem<font color="#E5E5E5"> we want to have a more common</font>

252
00:11:59,850 --> 00:12:04,709
<font color="#E5E5E5">and shared code base for all these</font>

253
00:12:03,060 --> 00:12:08,518
<font color="#CCCCCC">unicode projects that they can you know</font>

254
00:12:04,709 --> 00:12:10,739
<font color="#CCCCCC">just</font><font color="#E5E5E5"> reuse and with one</font><font color="#CCCCCC"> compile we want</font>

255
00:12:08,519 --> 00:12:15,269
to<font color="#E5E5E5"> also support different hypervisor and</font>

256
00:12:10,740 --> 00:12:18,959
<font color="#CCCCCC">CPU architectures and this is</font><font color="#E5E5E5"> actually</font>

257
00:12:15,269 --> 00:12:21,180
unique<font color="#E5E5E5"> raft where we use it's a quite</font>

258
00:12:18,959 --> 00:12:23,609
<font color="#CCCCCC">well-known</font><font color="#E5E5E5"> concept like where we say</font>

259
00:12:21,180 --> 00:12:26,339
everything<font color="#E5E5E5"> is a library but in our case</font>

260
00:12:23,610 --> 00:12:28,949
also<font color="#CCCCCC"> OS functionalities</font><font color="#E5E5E5"> are libraries</font>

261
00:12:26,339 --> 00:12:31,110
and we provide<font color="#CCCCCC"> multiple</font><font color="#E5E5E5"> implementations</font>

262
00:12:28,949 --> 00:12:36,029
for schedulers for instance or memory

263
00:12:31,110 --> 00:12:38,700
locators<font color="#CCCCCC"> and</font><font color="#E5E5E5"> unique</font><font color="#CCCCCC"> craft actually</font>

264
00:12:36,029 --> 00:12:40,980
consists of<font color="#CCCCCC"> two main components one is</font>

265
00:12:38,700 --> 00:12:45,630
<font color="#E5E5E5">the library</font><font color="#CCCCCC"> pool and the other thing is</font>

266
00:12:40,980 --> 00:12:48,870
the build tool itself so let's give you

267
00:12:45,630 --> 00:12:50,939
<font color="#E5E5E5">an overview</font><font color="#CCCCCC"> in the library pool we</font>

268
00:12:48,870 --> 00:12:54,300
<font color="#CCCCCC">decide we</font><font color="#E5E5E5"> distinguish actually into</font>

269
00:12:50,940 --> 00:12:56,040
three types<font color="#E5E5E5"> of libraries</font><font color="#CCCCCC"> one is the the</font>

270
00:12:54,300 --> 00:12:58,949
main libraries which are kind<font color="#E5E5E5"> of</font>

271
00:12:56,040 --> 00:13:00,899
<font color="#CCCCCC">independent of actually any target</font>

272
00:12:58,950 --> 00:13:03,240
execution environments<font color="#E5E5E5"> this could be</font>

273
00:13:00,899 --> 00:13:06,829
<font color="#E5E5E5">network stacks</font><font color="#CCCCCC"> this could be file</font>

274
00:13:03,240 --> 00:13:09,480
systems<font color="#CCCCCC"> scheduled implementations</font>

275
00:13:06,829 --> 00:13:13,469
Lipsey's drivers and so forth and<font color="#E5E5E5"> so</font>

276
00:13:09,480 --> 00:13:18,510
<font color="#CCCCCC">forth</font><font color="#E5E5E5"> then we have the libraries that</font>

277
00:13:13,470 --> 00:13:21,630
<font color="#E5E5E5">are specialized for an hypothesis</font>

278
00:13:18,510 --> 00:13:25,519
execution environment like Zen or<font color="#CCCCCC"> KVM or</font>

279
00:13:21,630 --> 00:13:28,050
<font color="#E5E5E5">VMware</font><font color="#CCCCCC"> or whatever you want</font><font color="#E5E5E5"> and then</font>

280
00:13:25,519 --> 00:13:30,019
architecture<font color="#E5E5E5"> lobbies that is like the</font>

281
00:13:28,050 --> 00:13:34,740
<font color="#E5E5E5">last piece</font><font color="#CCCCCC"> of missing pieces for</font>

282
00:13:30,019 --> 00:13:37,649
implementing CPU requirements<font color="#E5E5E5"> for your</font>

283
00:13:34,740 --> 00:13:41,100
<font color="#E5E5E5">unique</font><font color="#CCCCCC"> home so when you take or you</font>

284
00:13:37,649 --> 00:13:43,500
create or build your<font color="#E5E5E5"> application select</font>

285
00:13:41,100 --> 00:13:48,720
and configure the libraries<font color="#CCCCCC"> you want to</font>

286
00:13:43,500 --> 00:13:50,699
use in that<font color="#E5E5E5"> case type make and the build</font>

287
00:13:48,720 --> 00:13:53,699
system is then creating you multiple

288
00:13:50,699 --> 00:13:55,859
unique kernel images each<font color="#E5E5E5"> fitted to or</font>

289
00:13:53,699 --> 00:13:59,939
specialized to the target<font color="#CCCCCC"> platform that</font>

290
00:13:55,860 --> 00:14:02,430
<font color="#CCCCCC">you're gonna running</font><font color="#E5E5E5"> on also I what I</font>

291
00:13:59,940 --> 00:14:04,350
need to add here<font color="#E5E5E5"> is that the system is</font>

292
00:14:02,430 --> 00:14:08,189
<font color="#CCCCCC">also built so that you can come and</font>

293
00:14:04,350 --> 00:14:10,380
replace libraries in that pool or<font color="#CCCCCC"> even</font>

294
00:14:08,190 --> 00:14:14,370
add your<font color="#CCCCCC"> own libraries to it as well</font>

295
00:14:10,380 --> 00:14:16,140
<font color="#E5E5E5">let's say one might say like way IP is a</font>

296
00:14:14,370 --> 00:14:18,060
nice<font color="#CCCCCC"> Network stack because it's small</font>

297
00:14:16,140 --> 00:14:19,589
but it doesn't give<font color="#CCCCCC"> me all the TCP</font>

298
00:14:18,060 --> 00:14:23,010
features that<font color="#E5E5E5"> I need for</font><font color="#CCCCCC"> my application</font>

299
00:14:19,589 --> 00:14:25,649
<font color="#E5E5E5">so a rather get for something big</font><font color="#CCCCCC"> would</font>

300
00:14:23,010 --> 00:14:27,510
like<font color="#E5E5E5"> to run a ported</font><font color="#CCCCCC"> bsd</font><font color="#E5E5E5"> network stack</font>

301
00:14:25,649 --> 00:14:29,279
so then he would<font color="#CCCCCC"> to like select the</font>

302
00:14:27,510 --> 00:14:30,720
different<font color="#CCCCCC"> network sec or maybe he has an</font>

303
00:14:29,279 --> 00:14:34,760
own virtual network<font color="#CCCCCC"> stick so you would</font>

304
00:14:30,720 --> 00:14:38,820
you know<font color="#E5E5E5"> just take his</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> instead</font>

305
00:14:34,760 --> 00:14:41,310
an example system<font color="#CCCCCC"> imagine you have a</font>

306
00:14:38,820 --> 00:14:44,029
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> script you that you want a</font>

307
00:14:41,310 --> 00:14:44,029
unicorn lies

308
00:14:44,970 --> 00:14:49,350
it would just<font color="#E5E5E5"> select a language</font>

309
00:14:47,700 --> 00:14:52,320
environment in this case this would be

310
00:14:49,350 --> 00:14:55,440
you<font color="#E5E5E5"> know micro Python</font><font color="#CCCCCC"> coming from the</font>

311
00:14:52,320 --> 00:14:59,520
embedded<font color="#CCCCCC"> world network sag</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> Affairs</font>

312
00:14:55,440 --> 00:15:01,410
and whatever you need and you<font color="#E5E5E5"> get your</font>

313
00:14:59,520 --> 00:15:05,660
unique<font color="#CCCCCC"> you're not just running executing</font>

314
00:15:01,410 --> 00:15:10,439
<font color="#E5E5E5">your Python script the build tool is</font>

315
00:15:05,660 --> 00:15:12,420
quite<font color="#E5E5E5"> close to what you're used</font><font color="#CCCCCC"> to when</font>

316
00:15:10,440 --> 00:15:15,240
<font color="#CCCCCC">you use Linux so it's Kay config based</font>

317
00:15:12,420 --> 00:15:18,569
and has also lots of make file magic

318
00:15:15,240 --> 00:15:22,040
behind but the workflow is actually make

319
00:15:18,570 --> 00:15:24,060
menu config then you see like<font color="#E5E5E5"> you know</font>

320
00:15:22,040 --> 00:15:27,240
<font color="#E5E5E5">different</font><font color="#CCCCCC"> options where you</font><font color="#E5E5E5"> can then</font>

321
00:15:24,060 --> 00:15:30,630
start selecting the libraries that<font color="#CCCCCC"> you</font>

322
00:15:27,240 --> 00:15:33,630
need configure them<font color="#E5E5E5"> choose your target</font>

323
00:15:30,630 --> 00:15:37,790
platforms<font color="#E5E5E5"> and after afterwards it was</font><font color="#CCCCCC"> a</font>

324
00:15:33,630 --> 00:15:37,790
simple make and you have your images to

325
00:15:38,150 --> 00:15:43,829
<font color="#CCCCCC">give you some</font><font color="#E5E5E5"> numbers as a baseline</font>

326
00:15:41,010 --> 00:15:46,490
example so<font color="#E5E5E5"> I will show you after after</font>

327
00:15:43,830 --> 00:15:49,340
the slides<font color="#CCCCCC"> actually a bit more</font>

328
00:15:46,490 --> 00:15:53,610
<font color="#CCCCCC">real-world</font><font color="#E5E5E5"> demo with with a small</font>

329
00:15:49,340 --> 00:15:57,450
<font color="#E5E5E5">network stack that replies to HTTP with</font>

330
00:15:53,610 --> 00:16:00,780
HTTP requests of HTTP replies<font color="#E5E5E5"> to give</font>

331
00:15:57,450 --> 00:16:03,450
you a baseline<font color="#E5E5E5"> when we started the</font>

332
00:16:00,780 --> 00:16:04,860
project we could compile a small unique

333
00:16:03,450 --> 00:16:06,990
owner that there's<font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> else and just</font>

334
00:16:04,860 --> 00:16:15,600
<font color="#E5E5E5">come up say</font><font color="#CCCCCC"> Here I am and shuts down</font>

335
00:16:06,990 --> 00:16:17,340
afterwards with 32.7 kilobytes<font color="#E5E5E5"> and also</font>

336
00:16:15,600 --> 00:16:19,890
you had only to assign<font color="#CCCCCC"> two and eight</font>

337
00:16:17,340 --> 00:16:21,900
kilobytes<font color="#E5E5E5"> of RAM to get that thing</font>

338
00:16:19,890 --> 00:16:25,410
running<font color="#E5E5E5"> although</font><font color="#CCCCCC"> we had to modify</font><font color="#E5E5E5"> the</font>

339
00:16:21,900 --> 00:16:27,990
tool stack because hypervisor<font color="#E5E5E5"> builders</font>

340
00:16:25,410 --> 00:16:32,459
thought less than four megabytes<font color="#E5E5E5"> you</font>

341
00:16:27,990 --> 00:16:36,020
will never have right so even<font color="#E5E5E5"> there you</font>

342
00:16:32,460 --> 00:16:39,570
had to<font color="#E5E5E5"> remove</font><font color="#CCCCCC"> this hard-coded limits</font>

343
00:16:36,020 --> 00:16:42,030
what is going to<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> soon so be</font>

344
00:16:39,570 --> 00:16:45,210
around now since one<font color="#E5E5E5"> year so I announced</font>

345
00:16:42,030 --> 00:16:47,370
actually<font color="#CCCCCC"> in last post M this the start</font>

346
00:16:45,210 --> 00:16:50,870
of the project<font color="#E5E5E5"> so we have now an</font>

347
00:16:47,370 --> 00:16:57,330
upcoming release in the upcoming week

348
00:16:50,870 --> 00:17:00,540
<font color="#E5E5E5">which gets a new version tax</font><font color="#CCCCCC"> 2.3</font>

349
00:16:57,330 --> 00:17:04,020
what you will have in there already<font color="#E5E5E5"> is</font>

350
00:17:00,540 --> 00:17:06,750
support for Xen KVM<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> and even a bit</font>

351
00:17:04,020 --> 00:17:10,889
experimental<font color="#CCCCCC"> bi-metal</font><font color="#E5E5E5"> port for various</font>

352
00:17:06,750 --> 00:17:13,260
architectures<font color="#CCCCCC"> as core functionality we</font>

353
00:17:10,890 --> 00:17:15,600
provide you<font color="#E5E5E5"> a copy scheduler library</font>

354
00:17:13,260 --> 00:17:20,510
<font color="#CCCCCC">although a pre-emptive</font><font color="#E5E5E5"> schedule</font><font color="#CCCCCC"> our way</font>

355
00:17:15,599 --> 00:17:23,069
is in<font color="#CCCCCC"> work currently then a binary body</font>

356
00:17:20,510 --> 00:17:24,480
<font color="#CCCCCC">managed heap</font><font color="#E5E5E5"> a locator although you</font>

357
00:17:23,069 --> 00:17:28,439
could also replace that one if<font color="#CCCCCC"> you don't</font>

358
00:17:24,480 --> 00:17:32,580
<font color="#E5E5E5">want</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have pretty new and that</font>

359
00:17:28,440 --> 00:17:35,250
release<font color="#E5E5E5"> and</font><font color="#CCCCCC"> networking which is where we</font>

360
00:17:32,580 --> 00:17:38,699
introduced an API which is pretty<font color="#E5E5E5"> close</font>

361
00:17:35,250 --> 00:17:41,670
but<font color="#E5E5E5"> you may know from interleave decay</font>

362
00:17:38,700 --> 00:17:44,190
<font color="#CCCCCC">it's still interrupt-driven</font><font color="#E5E5E5"> but it's it</font>

363
00:17:41,670 --> 00:17:46,050
provides you you know specialization

364
00:17:44,190 --> 00:17:49,020
features like you can batch number of

365
00:17:46,050 --> 00:17:52,379
packets and<font color="#E5E5E5"> so forth library IP as a</font>

366
00:17:49,020 --> 00:17:55,530
first tcp/ip stack to the system we have

367
00:17:52,380 --> 00:17:57,240
a DFS implementation where we<font color="#E5E5E5"> then can</font>

368
00:17:55,530 --> 00:17:58,800
<font color="#E5E5E5">move on later to add file systems</font>

369
00:17:57,240 --> 00:18:02,910
underneath that we can mount<font color="#E5E5E5"> in there</font>

370
00:17:58,800 --> 00:18:06,659
and then the<font color="#CCCCCC"> Tulip sees that we have for</font>

371
00:18:02,910 --> 00:18:08,790
<font color="#CCCCCC">now is know Lipsy which is a</font><font color="#E5E5E5"> vitamin in</font>

372
00:18:06,660 --> 00:18:11,880
the<font color="#CCCCCC"> uni craft ecosystem to support you</font>

373
00:18:08,790 --> 00:18:15,500
know<font color="#E5E5E5"> more minimalistic built but most</font>

374
00:18:11,880 --> 00:18:17,640
<font color="#E5E5E5">application use some more fancy POSIX</font>

375
00:18:15,500 --> 00:18:22,950
<font color="#CCCCCC">functions so for that</font><font color="#E5E5E5"> purpose we have</font>

376
00:18:17,640 --> 00:18:26,820
<font color="#E5E5E5">also</font><font color="#CCCCCC"> newly available on the roadmap we</font>

377
00:18:22,950 --> 00:18:29,970
have we<font color="#E5E5E5"> have they want to concentrate</font>

378
00:18:26,820 --> 00:18:32,550
our effort on getting more complete arm

379
00:18:29,970 --> 00:18:37,640
64 support<font color="#E5E5E5"> actually it's the</font><font color="#CCCCCC"> young folks</font>

380
00:18:32,550 --> 00:18:37,639
<font color="#E5E5E5">by themselves providing us the arm 64</font>

381
00:18:38,240 --> 00:18:47,310
architecture<font color="#CCCCCC"> and platform support for 4k</font>

382
00:18:41,370 --> 00:18:49,290
<font color="#CCCCCC">VM we have started</font><font color="#E5E5E5"> internally</font><font color="#CCCCCC"> playing</font>

383
00:18:47,310 --> 00:18:52,409
<font color="#E5E5E5">around with more</font><font color="#CCCCCC"> libraries like muscle</font>

384
00:18:49,290 --> 00:18:53,970
libuv easily<font color="#E5E5E5"> open</font><font color="#CCCCCC"> SSL and</font><font color="#E5E5E5"> so forth which</font>

385
00:18:52,410 --> 00:18:55,890
<font color="#E5E5E5">are more like for</font><font color="#CCCCCC"> folk light of cloud</font>

386
00:18:53,970 --> 00:18:57,950
environments more standard components

387
00:18:55,890 --> 00:19:02,760
that you need<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> software stack</font>

388
00:18:57,950 --> 00:19:05,640
since we have a focus on service we also

389
00:19:02,760 --> 00:19:10,410
<font color="#CCCCCC">looking in language runtimes like</font>

390
00:19:05,640 --> 00:19:13,170
JavaScript Python Ruby C++ and so forth

391
00:19:10,410 --> 00:19:16,260
we want to come<font color="#E5E5E5"> up with an</font><font color="#CCCCCC"> OC I</font>

392
00:19:13,170 --> 00:19:19,440
<font color="#CCCCCC">container target support</font><font color="#E5E5E5"> so so that you</font>

393
00:19:16,260 --> 00:19:21,090
can even<font color="#E5E5E5"> build and</font><font color="#CCCCCC"> Cortana</font><font color="#E5E5E5"> image that</font>

394
00:19:19,440 --> 00:19:23,100
you could just launch in your container

395
00:19:21,090 --> 00:19:27,830
environment instead<font color="#E5E5E5"> of just having a</font>

396
00:19:23,100 --> 00:19:30,870
<font color="#CCCCCC">virtual machine</font><font color="#E5E5E5"> image file systems who</font>

397
00:19:27,830 --> 00:19:34,139
come up with with first of<font color="#E5E5E5"> all with an</font>

398
00:19:30,870 --> 00:19:35,909
in<font color="#CCCCCC"> RAM of</font><font color="#E5E5E5"> file system but then also with</font>

399
00:19:34,140 --> 00:19:38,640
block drivers to support actually

400
00:19:35,910 --> 00:19:42,870
<font color="#E5E5E5">reading something from virtual disks or</font>

401
00:19:38,640 --> 00:19:46,800
<font color="#CCCCCC">nine PFS</font><font color="#E5E5E5"> actually then network drivers</font>

402
00:19:42,870 --> 00:19:49,020
since we have vertigo<font color="#CCCCCC"> for</font><font color="#E5E5E5"> now only we</font>

403
00:19:46,800 --> 00:19:52,710
have in the pipe then with<font color="#E5E5E5"> net front and</font>

404
00:19:49,020 --> 00:19:55,379
for<font color="#E5E5E5"> the Linux target a tap driver and</font>

405
00:19:52,710 --> 00:19:58,230
then also<font color="#CCCCCC"> wanna</font><font color="#E5E5E5"> support frameworks like</font>

406
00:19:55,380 --> 00:20:00,890
you know<font color="#E5E5E5"> no</font><font color="#CCCCCC"> Diaz PI torch for maybe</font>

407
00:19:58,230 --> 00:20:03,240
machine learning tasks on in the network

408
00:20:00,890 --> 00:20:05,430
<font color="#CCCCCC">Intel DVD cave in</font><font color="#E5E5E5"> which actually would</font>

409
00:20:03,240 --> 00:20:08,490
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> plot</font><font color="#E5E5E5"> the whole framework to uni</font>

410
00:20:05,430 --> 00:20:12,780
<font color="#CCCCCC">craft so that he would build</font><font color="#E5E5E5"> unique</font>

411
00:20:08,490 --> 00:20:16,440
<font color="#CCCCCC">corner</font><font color="#E5E5E5"> nav boxes directly yeah and it's</font>

412
00:20:12,780 --> 00:20:18,389
open source<font color="#CCCCCC"> and actually we still need</font>

413
00:20:16,440 --> 00:20:22,350
support<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> have actually quite a</font>

414
00:20:18,390 --> 00:20:28,620
lot<font color="#E5E5E5"> of stuff to do</font><font color="#CCCCCC"> so as I said actually</font>

415
00:20:22,350 --> 00:20:31,050
<font color="#E5E5E5">started December 2017 and actually as an</font>

416
00:20:28,620 --> 00:20:33,689
incubator<font color="#E5E5E5"> project in from the Zen</font>

417
00:20:31,050 --> 00:20:35,250
project<font color="#E5E5E5"> so it's also covered by the</font>

418
00:20:33,690 --> 00:20:38,220
<font color="#E5E5E5">Linux Foundation we get actually quite</font>

419
00:20:35,250 --> 00:20:43,050
nice support for them<font color="#CCCCCC"> the community grew</font>

420
00:20:38,220 --> 00:20:47,880
since then<font color="#CCCCCC"> so we started with two</font>

421
00:20:43,050 --> 00:20:50,430
contributors<font color="#CCCCCC"> we are now at</font><font color="#E5E5E5"> 23 mainly we</font>

422
00:20:47,880 --> 00:20:52,200
have<font color="#E5E5E5"> to mention the big contributions</font>

423
00:20:50,430 --> 00:20:54,680
from Romania we got networking

424
00:20:52,200 --> 00:20:57,180
scheduling support which from from

425
00:20:54,680 --> 00:21:01,140
<font color="#E5E5E5">professor and students from University</font>

426
00:20:57,180 --> 00:21:03,930
in Bucharest<font color="#E5E5E5"> from Israel we had someone</font>

427
00:21:01,140 --> 00:21:05,910
<font color="#E5E5E5">that was looking in inter bare metal</font>

428
00:21:03,930 --> 00:21:08,310
support and was providing a VGA driver

429
00:21:05,910 --> 00:21:10,290
so<font color="#CCCCCC"> that he could</font><font color="#E5E5E5"> actually without any</font>

430
00:21:08,310 --> 00:21:13,530
hypervisor underneath run unique<font color="#E5E5E5"> craft</font>

431
00:21:10,290 --> 00:21:16,020
<font color="#E5E5E5">directly on hardware and from China</font>

432
00:21:13,530 --> 00:21:19,860
there is<font color="#E5E5E5"> a lab from arm that actively</font>

433
00:21:16,020 --> 00:21:23,960
works in contributes for<font color="#E5E5E5"> the 64-bit</font>

434
00:21:19,860 --> 00:21:23,959
support for arm which<font color="#CCCCCC"> is quite nice</font>

435
00:21:24,590 --> 00:21:30,929
we're here<font color="#E5E5E5"> mailing this</font><font color="#CCCCCC"> based our</font>

436
00:21:27,960 --> 00:21:34,290
<font color="#E5E5E5">projects we have actually we hijack the</font>

437
00:21:30,930 --> 00:21:37,830
minimize<font color="#CCCCCC"> devel mailing list</font><font color="#E5E5E5"> from then</font>

438
00:21:34,290 --> 00:21:40,740
maybe you<font color="#E5E5E5"> heard</font><font color="#CCCCCC"> about that the idea is</font>

439
00:21:37,830 --> 00:21:44,580
also<font color="#E5E5E5"> maybe in longer</font><font color="#CCCCCC"> term we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

440
00:21:40,740 --> 00:21:48,210
replace<font color="#CCCCCC"> that minimus</font><font color="#E5E5E5"> unique</font><font color="#CCCCCC"> kernel base</font>

441
00:21:44,580 --> 00:21:51,870
there so that also<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Zen folks have</font>

442
00:21:48,210 --> 00:21:54,150
something to<font color="#E5E5E5"> build their</font><font color="#CCCCCC"> their stop</font>

443
00:21:51,870 --> 00:21:56,159
domains to something for<font color="#E5E5E5"> that then we</font>

444
00:21:54,150 --> 00:22:00,990
have an IRC channel<font color="#CCCCCC"> on freenode</font><font color="#E5E5E5"> called</font>

445
00:21:56,160 --> 00:22:03,150
<font color="#E5E5E5">unique raft and yeah probably I flush</font>

446
00:22:00,990 --> 00:22:06,630
you know<font color="#E5E5E5"> let's go for</font><font color="#CCCCCC"> a bit demo time</font>

447
00:22:03,150 --> 00:22:09,660
and then you get some more<font color="#CCCCCC"> references</font>

448
00:22:06,630 --> 00:22:16,110
and points<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can also then</font><font color="#E5E5E5"> do a</font>

449
00:22:09,660 --> 00:22:21,750
question<font color="#CCCCCC"> round so what I want to</font><font color="#E5E5E5"> do</font>

450
00:22:16,110 --> 00:22:24,360
going<font color="#CCCCCC"> to show you is actually probably</font>

451
00:22:21,750 --> 00:22:27,210
all had had a textbook<font color="#E5E5E5"> that explained</font>

452
00:22:24,360 --> 00:22:31,350
you how to program a socket<font color="#E5E5E5"> on a UNIX</font>

453
00:22:27,210 --> 00:22:34,880
system so that<font color="#E5E5E5"> you need to have a socket</font>

454
00:22:31,350 --> 00:22:37,590
call you to set addresses<font color="#E5E5E5"> bind</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

455
00:22:34,880 --> 00:22:42,260
this is now<font color="#E5E5E5"> being a socket server that</font>

456
00:22:37,590 --> 00:22:44,970
is going to listen<font color="#E5E5E5"> on on on a port and</font>

457
00:22:42,260 --> 00:22:47,760
you<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> simple wire loop that then</font>

458
00:22:44,970 --> 00:22:50,130
<font color="#CCCCCC">will</font><font color="#E5E5E5"> just as soon there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> connection</font>

459
00:22:47,760 --> 00:22:54,240
and the first<font color="#CCCCCC"> byte arriving it will just</font>

460
00:22:50,130 --> 00:22:57,030
send<font color="#E5E5E5"> a static string which is by chance</font>

461
00:22:54,240 --> 00:23:02,460
<font color="#CCCCCC">something that is HTTP 1.1 compatible</font>

462
00:22:57,030 --> 00:23:07,710
here<font color="#E5E5E5"> and sends</font><font color="#CCCCCC"> out a</font><font color="#E5E5E5"> web page so this</font>

463
00:23:02,460 --> 00:23:10,380
should demonstrate you a bit<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

464
00:23:07,710 --> 00:23:14,160
targets that we want<font color="#E5E5E5"> to have a unicorn</font>

465
00:23:10,380 --> 00:23:15,810
<font color="#E5E5E5">that is kind of the</font><font color="#CCCCCC"> same way as you</font>

466
00:23:14,160 --> 00:23:20,250
<font color="#CCCCCC">would run or develop your application</font>

467
00:23:15,810 --> 00:23:27,840
for a standard operating system so let's

468
00:23:20,250 --> 00:23:30,390
go here<font color="#CCCCCC"> you have here may not see this</font>

469
00:23:27,840 --> 00:23:33,178
is the program<font color="#CCCCCC"> you have a make file that</font>

470
00:23:30,390 --> 00:23:36,869
I can show you

471
00:23:33,179 --> 00:23:40,049
that looks like quite similar to<font color="#E5E5E5"> Linux</font>

472
00:23:36,869 --> 00:23:42,178
external<font color="#CCCCCC"> news kernel modules so</font><font color="#E5E5E5"> you get</font>

473
00:23:40,049 --> 00:23:44,099
to get another<font color="#E5E5E5"> make</font><font color="#CCCCCC"> call invoked</font><font color="#E5E5E5"> that</font>

474
00:23:42,179 --> 00:23:47,039
then kicks in the<font color="#CCCCCC"> unit craft</font><font color="#E5E5E5"> build</font>

475
00:23:44,099 --> 00:23:49,229
system<font color="#E5E5E5"> and then you have a make file dot</font>

476
00:23:47,039 --> 00:23:51,299
uk' which actually describes<font color="#CCCCCC"> for uni</font>

477
00:23:49,229 --> 00:23:52,739
<font color="#E5E5E5">craft which modules do you have</font><font color="#CCCCCC"> or</font>

478
00:23:51,299 --> 00:23:55,859
actually which source files do you have

479
00:23:52,739 --> 00:24:00,690
and so forth<font color="#CCCCCC"> which actually just</font><font color="#E5E5E5"> may</font><font color="#CCCCCC"> not</font>

480
00:23:55,859 --> 00:24:05,639
see to the build and registers<font color="#CCCCCC"> a library</font>

481
00:24:00,690 --> 00:24:10,399
which we call here now app HTTP<font color="#CCCCCC"> reply</font><font color="#E5E5E5"> so</font>

482
00:24:05,639 --> 00:24:13,199
<font color="#E5E5E5">if you type make I just</font><font color="#CCCCCC"> make already</font>

483
00:24:10,399 --> 00:24:20,488
it's<font color="#CCCCCC"> too clean so that I</font><font color="#E5E5E5"> can prove</font><font color="#CCCCCC"> you</font>

484
00:24:13,200 --> 00:24:23,839
it builds<font color="#E5E5E5"> it's now building</font><font color="#CCCCCC"> a KVM</font>

485
00:24:20,489 --> 00:24:28,249
virtual machine image<font color="#E5E5E5"> the</font><font color="#CCCCCC"> networks</font><font color="#E5E5E5"> tag</font>

486
00:24:23,839 --> 00:24:33,979
<font color="#CCCCCC">and at last</font>

487
00:24:28,249 --> 00:24:39,059
<font color="#CCCCCC">okay some some ellipses scheduling and</font>

488
00:24:33,979 --> 00:24:43,489
then you have the final<font color="#CCCCCC"> KVM image in the</font>

489
00:24:39,059 --> 00:24:43,489
menu config oops

490
00:24:49,820 --> 00:24:59,489
yes yeah that's a<font color="#E5E5E5"> that's a funny kid</font>

491
00:24:55,679 --> 00:25:01,679
<font color="#E5E5E5">config thing so you see here you have a</font>

492
00:24:59,489 --> 00:25:03,570
menu for architecture selection<font color="#E5E5E5"> so I</font>

493
00:25:01,679 --> 00:25:05,839
build enough for x86 but you can choose

494
00:25:03,570 --> 00:25:09,029
also<font color="#E5E5E5"> you know other architectures</font>

495
00:25:05,839 --> 00:25:10,678
platform is very<font color="#CCCCCC"> clear</font><font color="#E5E5E5"> once then</font><font color="#CCCCCC"> KVM so</font>

496
00:25:09,029 --> 00:25:14,009
forth<font color="#CCCCCC"> although we have only you</font>

497
00:25:10,679 --> 00:25:16,950
<font color="#CCCCCC">networking support</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> KTM for now on the</font>

498
00:25:14,009 --> 00:25:19,139
libraries you<font color="#CCCCCC"> see here is like</font><font color="#E5E5E5"> where IP</font>

499
00:25:16,950 --> 00:25:20,669
we could go in<font color="#CCCCCC"> here and select features</font>

500
00:25:19,139 --> 00:25:23,339
in there we could even build a network

501
00:25:20,669 --> 00:25:27,960
<font color="#E5E5E5">stack without</font><font color="#CCCCCC"> tcp support such a funny</font>

502
00:25:23,339 --> 00:25:29,849
to call<font color="#E5E5E5"> it and still tcp/ip stack and so</font>

503
00:25:27,960 --> 00:25:32,519
forth<font color="#E5E5E5"> right you see it's quite of</font>

504
00:25:29,849 --> 00:25:38,250
<font color="#E5E5E5">library sorry in there we have some</font>

505
00:25:32,519 --> 00:25:42,570
<font color="#E5E5E5">build options and and that's it right</font>

506
00:25:38,250 --> 00:25:48,720
and if I run<font color="#CCCCCC"> that now is KVM guests</font><font color="#E5E5E5"> so</font>

507
00:25:42,570 --> 00:25:55,230
do you see that<font color="#E5E5E5"> line</font><font color="#CCCCCC"> I looked at kernel</font>

508
00:25:48,720 --> 00:25:57,630
image HTTP reply to em and I need to

509
00:25:55,230 --> 00:26:02,039
attach<font color="#E5E5E5"> it because it has not working to</font>

510
00:25:57,630 --> 00:26:09,539
a network bridge<font color="#E5E5E5"> uh-huh wonderful</font>

511
00:26:02,039 --> 00:26:11,760
<font color="#E5E5E5">I have</font><font color="#CCCCCC"> mistyped here so now it's</font><font color="#E5E5E5"> up</font>

512
00:26:09,539 --> 00:26:13,408
already you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> it was going through the</font>

513
00:26:11,760 --> 00:26:16,650
virtual<font color="#E5E5E5"> buyers was loading the image</font>

514
00:26:13,409 --> 00:26:19,559
this is still chemo<font color="#E5E5E5"> and then from this</font>

515
00:26:16,650 --> 00:26:21,330
<font color="#E5E5E5">point</font><font color="#CCCCCC"> on it was</font><font color="#E5E5E5"> the unicrone</font><font color="#CCCCCC"> er</font><font color="#E5E5E5"> we found</font>

516
00:26:19,559 --> 00:26:23,549
<font color="#E5E5E5">this network device brought it up and</font>

517
00:26:21,330 --> 00:26:26,280
then the<font color="#E5E5E5"> DHCP server in in background</font>

518
00:26:23,549 --> 00:26:30,850
<font color="#E5E5E5">replied with this</font><font color="#CCCCCC"> address so what we can</font>

519
00:26:26,280 --> 00:26:33,990
do here<font color="#CCCCCC"> now we can</font><font color="#E5E5E5"> ping</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> a host to</font>

520
00:26:30,850 --> 00:26:33,990
[Music]

521
00:26:37,130 --> 00:26:44,250
<font color="#E5E5E5">see the response that you believe me</font><font color="#CCCCCC"> I</font>

522
00:26:40,440 --> 00:26:45,419
will kill now the guest it's not

523
00:26:44,250 --> 00:26:52,440
responding<font color="#E5E5E5"> anymore</font>

524
00:26:45,419 --> 00:26:54,900
nothing happens<font color="#CCCCCC"> i reboot it and he it's</font>

525
00:26:52,440 --> 00:26:58,890
back<font color="#CCCCCC"> again</font>

526
00:26:54,900 --> 00:27:03,180
right and then if you want<font color="#E5E5E5"> you can see</font>

527
00:26:58,890 --> 00:27:06,200
<font color="#CCCCCC">also the</font><font color="#E5E5E5"> webpage surfed oops</font>

528
00:27:03,180 --> 00:27:06,200
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> God</font>

529
00:27:09,830 --> 00:27:18,169
I think next time I will<font color="#CCCCCC"> clone the</font>

530
00:27:11,630 --> 00:27:30,010
screen so I see the console<font color="#E5E5E5"> here</font><font color="#CCCCCC"> - wait</font>

531
00:27:18,170 --> 00:27:30,010
proxy configuration yes

532
00:27:32,210 --> 00:27:44,420
so it came<font color="#CCCCCC"> cuts conserved and it's that</font>

533
00:27:37,490 --> 00:27:47,030
string that<font color="#CCCCCC"> God sent right</font><font color="#E5E5E5"> so the kernel</font>

534
00:27:44,420 --> 00:27:53,570
image itself<font color="#CCCCCC"> or let's say the unique</font>

535
00:27:47,030 --> 00:27:57,889
<font color="#E5E5E5">kernel is just</font><font color="#CCCCCC"> 222</font><font color="#E5E5E5"> kilobytes in size so</font>

536
00:27:53,570 --> 00:27:59,840
quite small actually<font color="#CCCCCC"> and now to show you</font>

537
00:27:57,890 --> 00:28:02,870
that it's the<font color="#E5E5E5"> same program you can just</font>

538
00:27:59,840 --> 00:28:07,040
go and you know take GCC and<font color="#E5E5E5"> build it as</font>

539
00:28:02,870 --> 00:28:09,379
a Linux application now we have<font color="#E5E5E5"> a turd</font>

540
00:28:07,040 --> 00:28:11,120
<font color="#E5E5E5">outright which is of course smaller</font>

541
00:28:09,380 --> 00:28:14,360
<font color="#E5E5E5">because we don't have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> vertigo</font><font color="#CCCCCC"> driver</font>

542
00:28:11,120 --> 00:28:29,540
<font color="#CCCCCC">in here and</font><font color="#E5E5E5"> so forth</font><font color="#CCCCCC"> but it does does</font>

543
00:28:14,360 --> 00:28:51,800
the same thing right right so open<font color="#CCCCCC"> for</font>

544
00:28:29,540 --> 00:28:53,060
questions<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> have a bit of time so</font>

545
00:28:51,800 --> 00:28:56,629
yeah<font color="#E5E5E5"> that's actually a good</font><font color="#CCCCCC"> question</font>

546
00:28:53,060 --> 00:28:58,370
because the thing<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> depends what you</font>

547
00:28:56,630 --> 00:29:00,290
<font color="#E5E5E5">built into your unit</font><font color="#CCCCCC"> code right you</font>

548
00:28:58,370 --> 00:29:02,600
could say<font color="#E5E5E5"> I</font><font color="#CCCCCC"> do it as minimalistic</font><font color="#E5E5E5"> as</font>

549
00:29:00,290 --> 00:29:05,030
possible is it actually<font color="#E5E5E5"> our main target</font>

550
00:29:02,600 --> 00:29:07,010
but then you<font color="#E5E5E5"> don't have like a shell or</font>

551
00:29:05,030 --> 00:29:10,760
<font color="#E5E5E5">something in there anymore so you can't</font>

552
00:29:07,010 --> 00:29:13,280
<font color="#E5E5E5">SSH into it so you're kind of forced</font><font color="#CCCCCC"> to</font>

553
00:29:10,760 --> 00:29:17,090
use the tool<font color="#E5E5E5"> that the hypervisor</font>

554
00:29:13,280 --> 00:29:20,120
environment provides you but at the same

555
00:29:17,090 --> 00:29:23,240
time we could still say in and it's also

556
00:29:20,120 --> 00:29:25,939
what we have a<font color="#CCCCCC"> bitten in our mind on the</font>

557
00:29:23,240 --> 00:29:28,820
<font color="#CCCCCC">agenda it's</font><font color="#E5E5E5"> not written actually is to</font>

558
00:29:25,940 --> 00:29:31,580
provide a library that<font color="#CCCCCC"> gives you kind of</font>

559
00:29:28,820 --> 00:29:33,169
remote access maybe with the<font color="#E5E5E5"> REST API or</font>

560
00:29:31,580 --> 00:29:35,689
whatever so<font color="#CCCCCC"> that you can even look</font>

561
00:29:33,170 --> 00:29:38,650
what's going inside<font color="#E5E5E5"> what's what's</font>

562
00:29:35,690 --> 00:29:38,650
happening<font color="#CCCCCC"> inside the unit</font>

563
00:29:41,570 --> 00:29:54,619
basically<font color="#CCCCCC"> from</font><font color="#E5E5E5"> everything in the federal</font>

564
00:29:43,549 --> 00:29:57,168
<font color="#E5E5E5">space and I guess</font><font color="#CCCCCC"> yes right yeah</font>

565
00:29:54,619 --> 00:29:59,840
actually<font color="#E5E5E5"> a provincial repeat what he</font>

566
00:29:57,169 --> 00:30:02,869
said<font color="#CCCCCC"> for the recording right right</font><font color="#E5E5E5"> so so</font>

567
00:29:59,840 --> 00:30:05,928
the<font color="#CCCCCC"> question was</font><font color="#E5E5E5"> or actually more</font>

568
00:30:02,869 --> 00:30:08,090
<font color="#CCCCCC">confirmation that we run everything in</font>

569
00:30:05,929 --> 00:30:11,059
super user mode so<font color="#CCCCCC"> it's current space in</font>

570
00:30:08,090 --> 00:30:13,849
our perspective<font color="#CCCCCC"> and calling something</font>

571
00:30:11,059 --> 00:30:17,269
<font color="#E5E5E5">from from the POSIX API is</font><font color="#CCCCCC"> just for us a</font>

572
00:30:13,849 --> 00:30:24,499
function<font color="#E5E5E5"> call there's no system call so</font>

573
00:30:17,269 --> 00:30:28,009
my question so so the<font color="#E5E5E5"> question is how</font>

574
00:30:24,499 --> 00:30:29,619
<font color="#E5E5E5">hard is the driver</font><font color="#CCCCCC"> how I this is</font><font color="#E5E5E5"> to pour</font>

575
00:30:28,009 --> 00:30:32,149
the drive from from the Linux corner

576
00:30:29,619 --> 00:30:35,049
here need<font color="#CCCCCC"> to say it's pretty hard</font>

577
00:30:32,149 --> 00:30:38,779
because<font color="#E5E5E5"> if we have a different license</font>

578
00:30:35,049 --> 00:30:42,889
<font color="#E5E5E5">videos we use BSD</font><font color="#CCCCCC"> and actually you know</font>

579
00:30:38,779 --> 00:30:46,429
<font color="#E5E5E5">to allow you also you know build up some</font>

580
00:30:42,889 --> 00:30:49,549
some unique<font color="#E5E5E5"> kernels that use non GPL</font>

581
00:30:46,429 --> 00:30:51,470
software or a library that<font color="#E5E5E5"> is non GPL so</font>

582
00:30:49,549 --> 00:30:54,950
yeah Linux<font color="#E5E5E5"> is for as a no-go but</font>

583
00:30:51,470 --> 00:30:57,979
actually we would look into BSD these

584
00:30:54,950 --> 00:31:00,309
these<font color="#E5E5E5"> services to put something that</font>

585
00:30:57,979 --> 00:31:04,220
kind of depends<font color="#E5E5E5"> what you want to port</font><font color="#CCCCCC"> so</font>

586
00:31:00,309 --> 00:31:07,609
for now we have just<font color="#E5E5E5"> a a networking</font>

587
00:31:04,220 --> 00:31:10,909
subsystem with you know defined<font color="#CCCCCC"> API is</font>

588
00:31:07,609 --> 00:31:12,678
for the drivers and we on purpose<font color="#E5E5E5"> you</font>

589
00:31:10,909 --> 00:31:14,479
<font color="#E5E5E5">know looked at</font><font color="#CCCCCC"> deep DK because they're</font>

590
00:31:12,679 --> 00:31:16,879
everything<font color="#CCCCCC"> wants</font><font color="#E5E5E5"> a user space they have</font>

591
00:31:14,479 --> 00:31:19,879
kind of a similar<font color="#CCCCCC"> thing of a</font><font color="#E5E5E5"> library</font>

592
00:31:16,879 --> 00:31:22,668
system<font color="#E5E5E5"> there and we thought</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> maybe</font>

593
00:31:19,879 --> 00:31:24,009
can you<font color="#CCCCCC"> reuse those Network drivers how</font>

594
00:31:22,669 --> 00:31:26,450
this will look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> other drivers</font>

595
00:31:24,009 --> 00:31:29,419
<font color="#E5E5E5">let's see it depends which API is people</font>

596
00:31:26,450 --> 00:31:31,249
<font color="#E5E5E5">to come up but on the other hand since</font>

597
00:31:29,419 --> 00:31:33,409
your target on virtualized environments

598
00:31:31,249 --> 00:31:36,799
it's not that you need<font color="#E5E5E5"> you know a whole</font>

599
00:31:33,409 --> 00:31:39,710
<font color="#CCCCCC">bunch of tons of drivers but you need to</font>

600
00:31:36,799 --> 00:31:42,879
support is the virtual driver model of

601
00:31:39,710 --> 00:31:42,879
your hypervisor moment

602
00:32:16,840 --> 00:32:20,629
so what are the speed the question is

603
00:32:19,220 --> 00:32:22,399
what<font color="#E5E5E5"> are the experience with like</font><font color="#CCCCCC"> over P</font>

604
00:32:20,629 --> 00:32:25,759
<font color="#E5E5E5">they are need to agree it's a quite</font>

605
00:32:22,399 --> 00:32:27,289
limited in<font color="#CCCCCC"> that sense if you run</font><font color="#E5E5E5"> you</font>

606
00:32:25,759 --> 00:32:29,149
know<font color="#E5E5E5"> multiple threats or whatever this</font>

607
00:32:27,289 --> 00:32:33,559
can be quickly a bottleneck also

608
00:32:29,149 --> 00:32:35,748
features what I'm missing<font color="#CCCCCC"> still</font><font color="#E5E5E5"> are you</font>

609
00:32:33,559 --> 00:32:39,080
know<font color="#E5E5E5"> supporting segmentation of loading</font>

610
00:32:35,749 --> 00:32:40,789
for instance to make<font color="#CCCCCC"> use of you know 64</font>

611
00:32:39,080 --> 00:32:43,279
kilobyte packets that<font color="#CCCCCC"> you can send to</font>

612
00:32:40,789 --> 00:32:44,809
<font color="#E5E5E5">you to your to your actually NIC driver</font>

613
00:32:43,279 --> 00:32:48,200
that<font color="#E5E5E5"> once on the hypervisor</font><font color="#CCCCCC"> horse and</font>

614
00:32:44,809 --> 00:32:53,240
then the NIC is<font color="#E5E5E5"> struct</font><font color="#CCCCCC"> shopping the TCP</font>

615
00:32:48,200 --> 00:32:54,889
<font color="#E5E5E5">segment into smaller packets</font><font color="#CCCCCC"> so what for</font>

616
00:32:53,240 --> 00:32:59,029
that<font color="#E5E5E5"> we actually have on the</font><font color="#CCCCCC"> roadmap</font>

617
00:32:54,889 --> 00:33:03,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we want to port a network stack</font>

618
00:32:59,029 --> 00:33:05,690
from<font color="#E5E5E5"> bsd let's see if probably if you</font>

619
00:33:03,740 --> 00:33:07,999
can also do the shortcut<font color="#E5E5E5"> to go through</font>

620
00:33:05,690 --> 00:33:11,210
OS<font color="#CCCCCC"> VI was also a unique kernel project</font>

621
00:33:07,999 --> 00:33:14,840
and they ported it already<font color="#CCCCCC"> so we have</font>

622
00:33:11,210 --> 00:33:16,789
maybe<font color="#E5E5E5"> a</font><font color="#CCCCCC"> mid more new environment so that</font>

623
00:33:14,840 --> 00:33:20,709
the extraction<font color="#E5E5E5"> from an existing kernel</font>

624
00:33:16,789 --> 00:33:20,710
environment is a bit bit easier for<font color="#E5E5E5"> us</font>

625
00:33:28,160 --> 00:33:34,430
within<font color="#E5E5E5"> your so the question is about</font>

626
00:33:32,270 --> 00:33:36,440
<font color="#E5E5E5">language support for components of the</font>

627
00:33:34,430 --> 00:33:39,050
system<font color="#CCCCCC"> or also</font><font color="#E5E5E5"> applications and this is</font>

628
00:33:36,440 --> 00:33:41,960
what we are actually<font color="#CCCCCC"> after that release</font>

629
00:33:39,050 --> 00:33:43,370
really<font color="#CCCCCC"> trying to focus on</font><font color="#E5E5E5"> especially</font><font color="#CCCCCC"> you</font>

630
00:33:41,960 --> 00:33:45,080
know languages that<font color="#CCCCCC"> are really popular</font>

631
00:33:43,370 --> 00:33:49,010
<font color="#E5E5E5">like Java Script and so forth on these</font>

632
00:33:45,080 --> 00:33:51,889
cloud environments let's say probably

633
00:33:49,010 --> 00:33:54,500
it's still someone looking a bit deeper

634
00:33:51,890 --> 00:33:57,200
in order to make even system libraries

635
00:33:54,500 --> 00:34:00,380
be able to be compiled with the<font color="#CCCCCC"> with the</font>

636
00:33:57,200 --> 00:34:02,540
whole system<font color="#CCCCCC"> I'm not sure</font><font color="#E5E5E5"> yet where</font>

637
00:34:00,380 --> 00:34:05,030
where where there are pitfalls or<font color="#CCCCCC"> knots</font>

638
00:34:02,540 --> 00:34:08,060
<font color="#E5E5E5">but</font><font color="#CCCCCC"> I could still imagine at</font><font color="#E5E5E5"> least for</font>

639
00:34:05,030 --> 00:34:10,250
C++ is quite easy<font color="#CCCCCC"> to bind</font><font color="#E5E5E5"> that to to C</font>

640
00:34:08,060 --> 00:34:11,960
code<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that some of</font><font color="#CCCCCC"> the system</font>

641
00:34:10,250 --> 00:34:16,310
libraries could be in C++ and<font color="#CCCCCC"> then you</font>

642
00:34:11,960 --> 00:34:18,050
need you know this is extra small code

643
00:34:16,310 --> 00:34:20,690
that you need<font color="#E5E5E5"> for exception handling and</font>

644
00:34:18,050 --> 00:34:22,280
so forth<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> C++ comes but I could</font>

645
00:34:20,690 --> 00:34:24,830
also imagine something<font color="#CCCCCC"> like go which is</font>

646
00:34:22,280 --> 00:34:27,710
<font color="#E5E5E5">also compiled I</font><font color="#CCCCCC"> mention is easy to link</font>

647
00:34:24,830 --> 00:34:29,239
<font color="#E5E5E5">with with</font><font color="#CCCCCC"> Z code a garbage collector we</font>

648
00:34:27,710 --> 00:34:33,350
<font color="#E5E5E5">wouldn't need</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> which if you don't</font>

649
00:34:29,239 --> 00:34:36,529
<font color="#E5E5E5">like but</font><font color="#CCCCCC"> that language requires it</font><font color="#E5E5E5"> yeah</font>

650
00:34:33,350 --> 00:34:38,779
<font color="#E5E5E5">so I guess this</font><font color="#CCCCCC"> is more that can</font><font color="#E5E5E5"> be</font>

651
00:34:36,530 --> 00:34:40,940
<font color="#E5E5E5">answered when we have some more</font><font color="#CCCCCC"> language</font>

652
00:34:38,780 --> 00:34:48,500
environment supports it and then it's

653
00:34:40,940 --> 00:34:51,290
trying out and see what's missing so we

654
00:34:48,500 --> 00:34:52,909
just started with Python<font color="#CCCCCC"> so we actually</font>

655
00:34:51,290 --> 00:34:57,320
<font color="#E5E5E5">took the micro Python project that is</font>

656
00:34:52,909 --> 00:35:01,990
down there and<font color="#E5E5E5"> got a nice unique kernel</font>

657
00:34:57,320 --> 00:35:05,630
running<font color="#E5E5E5"> Python programs running we also</font>

658
00:35:01,990 --> 00:35:08,180
looked into v8 which is the<font color="#CCCCCC"> node GS</font>

659
00:35:05,630 --> 00:35:10,490
JavaScript engine there we're still

660
00:35:08,180 --> 00:35:13,250
missing some some POSIX functionality to

661
00:35:10,490 --> 00:35:15,589
get it<font color="#E5E5E5"> actually working but I think we</font>

662
00:35:13,250 --> 00:35:18,740
probably this<font color="#E5E5E5"> year</font><font color="#CCCCCC"> we might be able</font><font color="#E5E5E5"> to</font>

663
00:35:15,590 --> 00:35:20,540
<font color="#CCCCCC">to reach</font><font color="#E5E5E5"> that point and also you know</font>

664
00:35:18,740 --> 00:35:25,459
<font color="#E5E5E5">Ruby</font><font color="#CCCCCC"> with a student that</font><font color="#E5E5E5"> is interested</font>

665
00:35:20,540 --> 00:35:28,090
in importing will be<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> so we need to</font>

666
00:35:25,460 --> 00:35:28,090
be developed

667
00:35:28,960 --> 00:35:38,090
<font color="#E5E5E5">okay</font>

668
00:35:30,310 --> 00:35:38,090
[Applause]

