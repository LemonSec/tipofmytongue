1
00:00:04,880 --> 00:00:08,780
thank you<font color="#E5E5E5"> thank you very much thank you</font>

2
00:00:07,310 --> 00:00:13,450
<font color="#E5E5E5">for</font><font color="#CCCCCC"> having me in the search</font>

3
00:00:08,780 --> 00:00:13,450
I'm for coming here I will talk about

4
00:00:13,510 --> 00:00:20,930
library that we created<font color="#E5E5E5"> at work to be</font>

5
00:00:17,510 --> 00:00:23,870
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to assess performance on elastic</font>

6
00:00:20,930 --> 00:00:25,759
search queries<font color="#E5E5E5"> that is called discover</font>

7
00:00:23,870 --> 00:00:29,330
which is a<font color="#CCCCCC"> wordplay</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Spanish</font><font color="#E5E5E5"> and</font>

8
00:00:25,760 --> 00:00:32,840
<font color="#CCCCCC">Portuguese which is a broom but</font><font color="#E5E5E5"> without</font>

9
00:00:29,330 --> 00:00:34,280
further<font color="#CCCCCC"> alum I wanted to say that this</font>

10
00:00:32,840 --> 00:00:36,079
is my<font color="#E5E5E5"> first time speaking up for him so</font>

11
00:00:34,280 --> 00:00:39,409
every kind of<font color="#E5E5E5"> feedback</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have on</font>

12
00:00:36,079 --> 00:00:40,850
this talk would<font color="#CCCCCC"> be very appreciated I'm</font>

13
00:00:39,409 --> 00:00:41,269
a free software<font color="#CCCCCC"> and functional</font>

14
00:00:40,850 --> 00:00:43,550
programming

15
00:00:41,269 --> 00:00:46,039
juciest<font color="#E5E5E5"> and I'm maintainer of some</font>

16
00:00:43,550 --> 00:00:48,828
projects<font color="#E5E5E5"> in github and also in the real</font>

17
00:00:46,039 --> 00:00:51,819
world<font color="#CCCCCC"> people is a</font><font color="#E5E5E5"> nonprofit that we have</font>

18
00:00:48,829 --> 00:00:54,260
in<font color="#CCCCCC"> in Spain in in the northwest</font><font color="#E5E5E5"> with</font>

19
00:00:51,819 --> 00:00:55,999
where we do a<font color="#CCCCCC"> four-string of free</font>

20
00:00:54,260 --> 00:00:58,339
<font color="#CCCCCC">software and such and Dracula is a</font>

21
00:00:55,999 --> 00:01:00,109
project<font color="#CCCCCC"> for keeping privacy and</font>

22
00:00:58,339 --> 00:01:02,329
educating about<font color="#E5E5E5"> it and I'm working for</font>

23
00:01:00,109 --> 00:01:05,089
<font color="#E5E5E5">open</font><font color="#CCCCCC"> shine which is who sponsored this</font>

24
00:01:02,329 --> 00:01:07,190
work<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are small</font><font color="#E5E5E5"> consultancy firm based</font>

25
00:01:05,089 --> 00:01:08,690
out<font color="#CCCCCC"> of Madrid and</font><font color="#E5E5E5"> we have some remote</font>

26
00:01:07,190 --> 00:01:14,179
opportunities available at some point at

27
00:01:08,690 --> 00:01:18,679
some<font color="#E5E5E5"> points so I encourage you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> check</font>

28
00:01:14,180 --> 00:01:21,590
it<font color="#E5E5E5"> out so what one day will what</font><font color="#CCCCCC"> won't</font>

29
00:01:18,680 --> 00:01:24,859
we here to<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> what's the problem</font>

30
00:01:21,590 --> 00:01:26,390
with assessing elasticsearch<font color="#E5E5E5"> ways at</font>

31
00:01:24,859 --> 00:01:28,579
some point<font color="#E5E5E5"> I'm talking here about</font>

32
00:01:26,390 --> 00:01:31,880
aggregations on on a data set that you

33
00:01:28,579 --> 00:01:33,740
<font color="#CCCCCC">have an elastic search so when you have</font>

34
00:01:31,880 --> 00:01:36,530
some aggregation that<font color="#E5E5E5"> are nested</font><font color="#CCCCCC"> and</font>

35
00:01:33,740 --> 00:01:38,810
that are somehow complicated sometimes

36
00:01:36,530 --> 00:01:41,659
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to assess how well the</font>

37
00:01:38,810 --> 00:01:43,280
<font color="#E5E5E5">cluster should will behave with some of</font>

38
00:01:41,659 --> 00:01:45,369
those queries<font color="#E5E5E5"> especially if you do not</font>

39
00:01:43,280 --> 00:01:47,499
trust the user that inputs those<font color="#E5E5E5"> queries</font>

40
00:01:45,369 --> 00:01:51,200
and<font color="#E5E5E5"> we were</font><font color="#CCCCCC"> building an application</font>

41
00:01:47,499 --> 00:01:53,060
<font color="#E5E5E5">where we had to allow users</font><font color="#CCCCCC"> to be able</font>

42
00:01:51,200 --> 00:01:55,909
<font color="#E5E5E5">to interface with parts of the elastic</font>

43
00:01:53,060 --> 00:01:57,289
search query engine<font color="#E5E5E5"> so at some</font><font color="#CCCCCC"> point we</font>

44
00:01:55,909 --> 00:01:59,509
were not<font color="#CCCCCC"> sure whether the cluster will</font>

45
00:01:57,289 --> 00:02:04,329
hold up<font color="#E5E5E5"> to the kind of queries that</font><font color="#CCCCCC"> they</font>

46
00:01:59,509 --> 00:02:04,329
would want<font color="#E5E5E5"> to perform on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> dataset and</font>

47
00:02:05,229 --> 00:02:10,639
<font color="#E5E5E5">so how do we what ways do we have</font>

48
00:02:08,270 --> 00:02:13,970
currently to assess query impact on an

49
00:02:10,639 --> 00:02:15,769
elastic search cluster<font color="#E5E5E5"> what for example</font>

50
00:02:13,970 --> 00:02:17,180
we have<font color="#CCCCCC"> this</font><font color="#E5E5E5"> triggers that elastic</font>

51
00:02:15,770 --> 00:02:19,790
search put that

52
00:02:17,180 --> 00:02:22,189
the the cutting<font color="#E5E5E5"> mechanism so that if</font>

53
00:02:19,790 --> 00:02:25,760
<font color="#E5E5E5">something takes too long then it breaks</font>

54
00:02:22,189 --> 00:02:27,379
their<font color="#E5E5E5"> secret breakers there's the key</font><font color="#CCCCCC"> on</font>

55
00:02:25,760 --> 00:02:29,060
a profiler<font color="#E5E5E5"> although when we</font><font color="#CCCCCC"> started</font>

56
00:02:27,379 --> 00:02:32,599
looking<font color="#E5E5E5"> at this it was not</font><font color="#CCCCCC"> available on</font>

57
00:02:29,060 --> 00:02:35,269
<font color="#CCCCCC">5.1 yet</font><font color="#E5E5E5"> and we can do load</font><font color="#CCCCCC"> testing for</font>

58
00:02:32,599 --> 00:02:40,700
the queries<font color="#CCCCCC"> and make sure that there's</font>

59
00:02:35,269 --> 00:02:42,769
<font color="#E5E5E5">some</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of stable way of testing all</font>

60
00:02:40,700 --> 00:02:44,720
of that but what<font color="#CCCCCC"> about queries that are</font>

61
00:02:42,769 --> 00:02:47,120
giant that<font color="#E5E5E5"> are dynamic</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can't</font>

62
00:02:44,720 --> 00:02:50,230
know ahead of<font color="#E5E5E5"> time which will the police</font>

63
00:02:47,120 --> 00:02:54,530
be because at the time they are<font color="#E5E5E5"> used</font>

64
00:02:50,230 --> 00:02:57,828
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> already there could we know before</font>

65
00:02:54,530 --> 00:03:01,129
we run the<font color="#CCCCCC"> queries this</font><font color="#E5E5E5"> is what the</font>

66
00:02:57,829 --> 00:03:02,569
<font color="#E5E5E5">project is about because also the</font>

67
00:03:01,129 --> 00:03:04,760
cluster was shared by multiple tenants

68
00:03:02,569 --> 00:03:07,280
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we didn't</font><font color="#E5E5E5"> want to impact the</font>

69
00:03:04,760 --> 00:03:09,530
performance<font color="#E5E5E5"> of one users to others in</font>

70
00:03:07,280 --> 00:03:11,420
the cluster<font color="#CCCCCC"> so we wanted to be quite</font>

71
00:03:09,530 --> 00:03:14,450
<font color="#E5E5E5">conservative about the usage</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

72
00:03:11,420 --> 00:03:16,129
resources<font color="#E5E5E5"> because that it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> low</font>

73
00:03:14,450 --> 00:03:17,480
overhead<font color="#E5E5E5"> system so we did not want</font><font color="#CCCCCC"> to</font>

74
00:03:16,129 --> 00:03:22,340
spend<font color="#E5E5E5"> too much money on</font><font color="#CCCCCC"> building more</font>

75
00:03:17,480 --> 00:03:26,000
clusters<font color="#CCCCCC"> and it was it</font><font color="#E5E5E5"> was good for the</font>

76
00:03:22,340 --> 00:03:28,549
business purpose<font color="#E5E5E5"> that it served so we</font>

77
00:03:26,000 --> 00:03:31,430
wanted<font color="#E5E5E5"> to go back to to</font><font color="#CCCCCC"> the theoretical</font>

78
00:03:28,549 --> 00:03:33,970
<font color="#CCCCCC">side of things</font><font color="#E5E5E5"> and go to</font><font color="#CCCCCC"> static analysis</font>

79
00:03:31,430 --> 00:03:36,109
that the analysis is the discipline<font color="#E5E5E5"> of</font>

80
00:03:33,970 --> 00:03:39,199
answering<font color="#CCCCCC"> questions about code without</font>

81
00:03:36,109 --> 00:03:41,480
<font color="#E5E5E5">having to run</font><font color="#CCCCCC"> the code so what</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> we</font>

82
00:03:39,199 --> 00:03:43,370
answer<font color="#E5E5E5"> about this we can</font><font color="#CCCCCC"> answer whether</font>

83
00:03:41,480 --> 00:03:44,899
some<font color="#CCCCCC"> called terminate</font><font color="#E5E5E5"> this does</font><font color="#CCCCCC"> not</font>

84
00:03:43,370 --> 00:03:47,959
apply to queries<font color="#CCCCCC"> because they are not</font>

85
00:03:44,900 --> 00:03:50,419
<font color="#CCCCCC">too incomplete but it can answer</font>

86
00:03:47,959 --> 00:03:52,099
questions<font color="#E5E5E5"> such as how much memory is</font>

87
00:03:50,419 --> 00:03:54,139
needed for<font color="#E5E5E5"> a program or what are the</font>

88
00:03:52,099 --> 00:03:56,149
output<font color="#E5E5E5"> of all the kind of the kinds of</font>

89
00:03:54,139 --> 00:03:58,819
output for<font color="#CCCCCC"> a given input</font><font color="#E5E5E5"> or whether</font><font color="#CCCCCC"> a</font>

90
00:03:56,150 --> 00:04:02,239
some variable is initialized in route or

91
00:03:58,819 --> 00:04:06,138
whether we run<font color="#E5E5E5"> this or not at all</font>

92
00:04:02,239 --> 00:04:08,989
whether<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> dead code or typing things</font>

93
00:04:06,139 --> 00:04:13,010
<font color="#E5E5E5">also but we can do more things</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> just</font>

94
00:04:08,989 --> 00:04:15,829
<font color="#E5E5E5">analyzing stuff we can modify things</font>

95
00:04:13,010 --> 00:04:18,978
based on<font color="#E5E5E5"> static analysis for example</font><font color="#CCCCCC"> if</font>

96
00:04:15,829 --> 00:04:21,220
you<font color="#CCCCCC"> are familiar</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> DCC then there's</font>

97
00:04:18,978 --> 00:04:24,469
this<font color="#E5E5E5"> all flux or one or two</font><font color="#CCCCCC"> or three</font>

98
00:04:21,220 --> 00:04:26,659
that allow you<font color="#CCCCCC"> to change how the</font>

99
00:04:24,470 --> 00:04:28,880
compiler optimizes stuff<font color="#E5E5E5"> like for</font>

100
00:04:26,659 --> 00:04:31,200
example<font color="#E5E5E5"> reusing</font>

101
00:04:28,880 --> 00:04:33,060
reusing registers on the processor some

102
00:04:31,200 --> 00:04:34,740
way or another<font color="#CCCCCC"> or extracting constants</font>

103
00:04:33,060 --> 00:04:36,870
that are a mathematical expression<font color="#CCCCCC"> that</font>

104
00:04:34,740 --> 00:04:39,540
can get in<font color="#CCCCCC"> line before getting compiled</font>

105
00:04:36,870 --> 00:04:41,910
<font color="#E5E5E5">or even type inference in other in other</font>

106
00:04:39,540 --> 00:04:43,890
languages<font color="#E5E5E5"> and you could do for</font><font color="#CCCCCC"> your</font>

107
00:04:41,910 --> 00:04:45,420
optimization<font color="#CCCCCC"> maybe nothing in lastik</font>

108
00:04:43,890 --> 00:04:49,469
<font color="#CCCCCC">search but you could do</font><font color="#E5E5E5"> that in SQL for</font>

109
00:04:45,420 --> 00:04:51,630
<font color="#E5E5E5">example or code</font><font color="#CCCCCC"> rearrangements</font><font color="#E5E5E5"> fusing</font>

110
00:04:49,470 --> 00:04:53,190
loops or change in<font color="#CCCCCC"> the loop order but</font>

111
00:04:51,630 --> 00:04:55,260
you<font color="#E5E5E5"> can also do cost analysis and cost</font>

112
00:04:53,190 --> 00:05:00,630
optimization<font color="#CCCCCC"> now this is done</font><font color="#E5E5E5"> in GCC for</font>

113
00:04:55,260 --> 00:05:03,360
example<font color="#CCCCCC"> so about static cost analysis</font>

114
00:05:00,630 --> 00:05:06,180
there's papers<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> there's a paper</font>

115
00:05:03,360 --> 00:05:09,810
from the you can<font color="#CCCCCC"> produce</font><font color="#E5E5E5"> University of</font>

116
00:05:06,180 --> 00:05:13,620
Madrid<font color="#E5E5E5"> about how we can run cost</font>

117
00:05:09,810 --> 00:05:15,600
analysis on the<font color="#CCCCCC"> java bytecode but on GCC</font>

118
00:05:13,620 --> 00:05:17,790
we already have these flags for example

119
00:05:15,600 --> 00:05:20,490
we have<font color="#CCCCCC"> m</font><font color="#E5E5E5"> art and</font><font color="#CCCCCC"> m tune</font><font color="#E5E5E5"> which are the</font>

120
00:05:17,790 --> 00:05:24,030
flags<font color="#CCCCCC"> that target your code for a given</font>

121
00:05:20,490 --> 00:05:25,560
Earth architecture<font color="#E5E5E5"> impart is a flag that</font>

122
00:05:24,030 --> 00:05:26,969
<font color="#E5E5E5">restricts the set of instructions that</font>

123
00:05:25,560 --> 00:05:28,740
you can use to the ones that<font color="#CCCCCC"> are</font>

124
00:05:26,970 --> 00:05:31,200
specific to<font color="#E5E5E5"> I will get to like to search</font>

125
00:05:28,740 --> 00:05:34,530
in a moment these<font color="#CCCCCC"> are the kind of</font>

126
00:05:31,200 --> 00:05:37,770
<font color="#CCCCCC">instructions that that restrict you to</font>

127
00:05:34,530 --> 00:05:41,280
to a certain type of processor and<font color="#CCCCCC"> M</font>

128
00:05:37,770 --> 00:05:43,260
<font color="#E5E5E5">tune is another flag which says that</font><font color="#CCCCCC"> ok</font>

129
00:05:41,280 --> 00:05:46,049
from these<font color="#E5E5E5"> flags that are general to all</font>

130
00:05:43,260 --> 00:05:47,430
our architectures let's choose the

131
00:05:46,050 --> 00:05:49,800
<font color="#E5E5E5">specific instructions that perform</font>

132
00:05:47,430 --> 00:05:52,440
better<font color="#E5E5E5"> on a certain processor so</font>

133
00:05:49,800 --> 00:05:54,900
graphically<font color="#E5E5E5"> if we have the x86 64</font>

134
00:05:52,440 --> 00:05:56,910
architecture<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have this</font><font color="#CCCCCC"> 2 processor as</font>

135
00:05:54,900 --> 00:05:58,409
a as an example<font color="#E5E5E5"> which have some</font>

136
00:05:56,910 --> 00:06:00,030
different instructions that they can

137
00:05:58,410 --> 00:06:04,169
perform<font color="#E5E5E5"> but they also have a common core</font>

138
00:06:00,030 --> 00:06:06,510
set so if we had<font color="#CCCCCC"> m arch specifically</font>

139
00:06:04,169 --> 00:06:08,340
tuned for the Intel<font color="#CCCCCC"> processor</font><font color="#E5E5E5"> then we</font>

140
00:06:06,510 --> 00:06:11,669
could use<font color="#E5E5E5"> these other instructions that</font>

141
00:06:08,340 --> 00:06:14,099
are<font color="#E5E5E5"> not part of the x86 64 X</font>

142
00:06:11,669 --> 00:06:17,280
pacification<font color="#CCCCCC"> but are extensions to it</font>

143
00:06:14,100 --> 00:06:19,590
that run on that processor but if we

144
00:06:17,280 --> 00:06:22,710
didn't if we targeted the mainstream x86

145
00:06:19,590 --> 00:06:25,229
64<font color="#E5E5E5"> platform we could still empty on this</font>

146
00:06:22,710 --> 00:06:26,909
for a specific processor which have

147
00:06:25,230 --> 00:06:29,160
<font color="#E5E5E5">better alignment on one of those</font>

148
00:06:26,910 --> 00:06:31,260
<font color="#E5E5E5">instructions that perform better than</font>

149
00:06:29,160 --> 00:06:34,890
<font color="#E5E5E5">the alternative instructions that could</font>

150
00:06:31,260 --> 00:06:36,990
<font color="#E5E5E5">do the same things so in some way this</font>

151
00:06:34,890 --> 00:06:40,940
<font color="#E5E5E5">is he is doing cost analysis and cost</font>

152
00:06:36,990 --> 00:06:40,940
optimization for us as a compiler

153
00:06:41,040 --> 00:06:45,970
however<font color="#E5E5E5"> elastic search queries are not</font>

154
00:06:43,480 --> 00:06:49,240
exactly compiled<font color="#E5E5E5"> they are transformed at</font>

155
00:06:45,970 --> 00:06:52,230
some point<font color="#E5E5E5"> into inter query to loosen</font>

156
00:06:49,240 --> 00:06:54,310
the<font color="#CCCCCC"> underline search engine</font>

157
00:06:52,230 --> 00:06:56,590
however elastic does not provide

158
00:06:54,310 --> 00:06:59,890
documentation and how the internals work

159
00:06:56,590 --> 00:07:01,630
at such deep level or does an<font color="#CCCCCC"> EC</font><font color="#E5E5E5"> API</font>

160
00:06:59,890 --> 00:07:04,810
<font color="#E5E5E5">access to the internals that happened</font>

161
00:07:01,630 --> 00:07:07,690
before execution so what we came up

162
00:07:04,810 --> 00:07:09,670
doing was from the parse tree that

163
00:07:07,690 --> 00:07:12,490
elastic search generates<font color="#E5E5E5"> from the query</font>

164
00:07:09,670 --> 00:07:14,470
we<font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> that and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> traverse it</font><font color="#E5E5E5"> we</font>

165
00:07:12,490 --> 00:07:15,910
could have optimized it maybe and we

166
00:07:14,470 --> 00:07:17,560
could run better queries but we're not

167
00:07:15,910 --> 00:07:19,180
at that<font color="#E5E5E5"> point</font><font color="#CCCCCC"> yet this is more of a</font>

168
00:07:17,560 --> 00:07:22,690
prototype of<font color="#E5E5E5"> what we could do in the</font>

169
00:07:19,180 --> 00:07:24,610
future<font color="#E5E5E5"> so our cost tree analysis is</font>

170
00:07:22,690 --> 00:07:27,790
generated from from the from the<font color="#CCCCCC"> partial</font>

171
00:07:24,610 --> 00:07:30,400
the parsed query in our case this is

172
00:07:27,790 --> 00:07:33,010
<font color="#CCCCCC">efficient</font><font color="#E5E5E5"> because a tree</font><font color="#CCCCCC"> is a recursive</font>

173
00:07:30,400 --> 00:07:35,500
data structure where in this<font color="#CCCCCC"> case we are</font>

174
00:07:33,010 --> 00:07:37,420
<font color="#CCCCCC">only</font><font color="#E5E5E5"> using the child node in order to</font>

175
00:07:35,500 --> 00:07:40,270
compute the parent<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> only need to</font>

176
00:07:37,420 --> 00:07:41,680
traverse<font color="#E5E5E5"> each node once so in</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> case</font>

177
00:07:40,270 --> 00:07:43,270
this<font color="#E5E5E5"> is a very efficient cost analysis</font>

178
00:07:41,680 --> 00:07:45,760
because it<font color="#E5E5E5"> only runs on the amount of</font>

179
00:07:43,270 --> 00:07:47,320
nodes<font color="#E5E5E5"> that we use as aggregations but</font>

180
00:07:45,760 --> 00:07:49,150
there's of course<font color="#E5E5E5"> more sophisticated</font>

181
00:07:47,320 --> 00:07:52,240
analysis possible and that would depend

182
00:07:49,150 --> 00:07:54,099
<font color="#E5E5E5">on the kind of structure of grammar</font>

183
00:07:52,240 --> 00:07:55,810
structure that you use<font color="#E5E5E5"> for cost analysis</font>

184
00:07:54,100 --> 00:07:57,580
the kind of relationships<font color="#CCCCCC"> that you have</font>

185
00:07:55,810 --> 00:08:00,280
between<font color="#E5E5E5"> the nodes in our case we only</font>

186
00:07:57,580 --> 00:08:03,070
wanted to have children<font color="#CCCCCC"> but maybe if</font><font color="#E5E5E5"> we</font>

187
00:08:00,280 --> 00:08:05,679
had some<font color="#CCCCCC"> better information about</font><font color="#E5E5E5"> the</font>

188
00:08:03,070 --> 00:08:08,020
cost<font color="#CCCCCC"> model of</font><font color="#E5E5E5"> elastic search like what</font>

189
00:08:05,680 --> 00:08:10,210
caching happens in the middle what kind

190
00:08:08,020 --> 00:08:11,979
of network<font color="#CCCCCC"> transmission happened when we</font>

191
00:08:10,210 --> 00:08:14,140
<font color="#CCCCCC">had the</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> between the different nodes</font>

192
00:08:11,980 --> 00:08:16,750
of<font color="#E5E5E5"> the cluster and the</font><font color="#CCCCCC"> reduction steps</font>

193
00:08:14,140 --> 00:08:18,550
<font color="#CCCCCC">that happen when</font><font color="#E5E5E5"> we're competing the</font>

194
00:08:16,750 --> 00:08:21,400
aggregation<font color="#E5E5E5"> how all of that happens</font>

195
00:08:18,550 --> 00:08:22,630
that's not<font color="#E5E5E5"> directly exposed in the query</font>

196
00:08:21,400 --> 00:08:25,960
<font color="#CCCCCC">that's something</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> elastic search</font>

197
00:08:22,630 --> 00:08:28,540
does after<font color="#E5E5E5"> the</font><font color="#CCCCCC"> acquiesce input so that</font>

198
00:08:25,960 --> 00:08:30,909
<font color="#E5E5E5">it gets to the</font><font color="#CCCCCC"> losing search engine</font><font color="#E5E5E5"> of</font>

199
00:08:28,540 --> 00:08:33,849
each instance that is not available

200
00:08:30,910 --> 00:08:35,950
<font color="#CCCCCC">directly on</font><font color="#E5E5E5"> the API servers as we as</font><font color="#CCCCCC"> we</font>

201
00:08:33,849 --> 00:08:37,840
have<font color="#E5E5E5"> come to it maybe there are some</font>

202
00:08:35,950 --> 00:08:39,550
<font color="#CCCCCC">underlying techniques but but we didn't</font>

203
00:08:37,840 --> 00:08:43,690
find any documentation<font color="#E5E5E5"> to get to them</font>

204
00:08:39,549 --> 00:08:45,520
yet<font color="#E5E5E5"> so if we wanted to have this kind</font><font color="#CCCCCC"> of</font>

205
00:08:43,690 --> 00:08:50,020
better cost analysis<font color="#E5E5E5"> we would need some</font>

206
00:08:45,520 --> 00:08:53,410
<font color="#CCCCCC">way to expose these</font><font color="#E5E5E5"> this better model</font>

207
00:08:50,020 --> 00:08:55,089
cost model so that

208
00:08:53,410 --> 00:08:56,500
<font color="#E5E5E5">that we could get and the optimization</font>

209
00:08:55,089 --> 00:08:59,129
things that elasticsearch does and

210
00:08:56,500 --> 00:09:01,720
compute them<font color="#E5E5E5"> also</font><font color="#CCCCCC"> intermodal</font><font color="#E5E5E5"> and this is</font>

211
00:08:59,129 --> 00:09:04,300
ready<font color="#CCCCCC"> to implement but we don't know how</font>

212
00:09:01,720 --> 00:09:06,970
<font color="#E5E5E5">to do that yet but this could be in a</font>

213
00:09:04,300 --> 00:09:10,060
way somehow like the catalyst optimizer

214
00:09:06,970 --> 00:09:11,829
does<font color="#E5E5E5"> with a spark SQL in the way that</font>

215
00:09:10,060 --> 00:09:15,939
from a<font color="#E5E5E5"> query you get other sets of</font>

216
00:09:11,829 --> 00:09:18,910
queries there but how is this<font color="#E5E5E5"> really</font>

217
00:09:15,939 --> 00:09:21,790
implemented how do we how did we came up

218
00:09:18,910 --> 00:09:24,009
with this we used a scholar as

219
00:09:21,790 --> 00:09:25,779
<font color="#E5E5E5">technology because it's easier to make</font>

220
00:09:24,009 --> 00:09:28,029
<font color="#CCCCCC">functional programming with it just by</font>

221
00:09:25,779 --> 00:09:30,579
<font color="#CCCCCC">Java's functionality to do that in</font>

222
00:09:28,029 --> 00:09:32,410
<font color="#E5E5E5">recent versions and we used when</font><font color="#CCCCCC"> we</font>

223
00:09:30,579 --> 00:09:33,040
needed<font color="#E5E5E5"> to power station we used JSON</font>

224
00:09:32,410 --> 00:09:34,480
<font color="#CCCCCC">forest-</font>

225
00:09:33,040 --> 00:09:37,329
because we did not<font color="#CCCCCC"> want to conflict with</font>

226
00:09:34,480 --> 00:09:40,000
<font color="#E5E5E5">any of elasticsearch libraries that</font><font color="#CCCCCC"> they</font>

227
00:09:37,329 --> 00:09:41,800
used so that<font color="#E5E5E5"> our goal set was mostly</font>

228
00:09:40,000 --> 00:09:43,750
independent<font color="#CCCCCC"> in the class path of the</font><font color="#E5E5E5"> of</font>

229
00:09:41,800 --> 00:09:47,560
the JVM<font color="#CCCCCC"> as compared with</font><font color="#E5E5E5"> last research</font>

230
00:09:43,750 --> 00:09:50,199
and we use<font color="#CCCCCC"> config libraries that are</font>

231
00:09:47,560 --> 00:09:52,180
<font color="#CCCCCC">already implemented for Scala so that we</font>

232
00:09:50,199 --> 00:09:54,430
can take a case class<font color="#E5E5E5"> and directly look</font>

233
00:09:52,180 --> 00:09:57,239
<font color="#E5E5E5">at the information from a</font><font color="#CCCCCC"> gem in erratum</font>

234
00:09:54,430 --> 00:09:59,649
file<font color="#E5E5E5"> direct into the case class</font><font color="#CCCCCC"> and</font>

235
00:09:57,240 --> 00:10:01,630
there's some use case for akka<font color="#E5E5E5"> that we</font>

236
00:09:59,649 --> 00:10:04,569
will get<font color="#E5E5E5"> back in a moment</font>

237
00:10:01,630 --> 00:10:07,540
white color<font color="#E5E5E5"> I've just mentioned that so</font>

238
00:10:04,569 --> 00:10:09,310
the ast nodes are pretty basic<font color="#CCCCCC"> it the</font>

239
00:10:07,540 --> 00:10:11,709
interfaces are just the ones of a tree

240
00:10:09,310 --> 00:10:13,719
and there's the route aggregation which

241
00:10:11,709 --> 00:10:15,579
<font color="#E5E5E5">aggregates of the nodes and then the sub</font>

242
00:10:13,720 --> 00:10:17,649
aggregations<font color="#E5E5E5"> are the this is a classic</font>

243
00:10:15,579 --> 00:10:20,138
composite pattern where<font color="#CCCCCC"> we have multiple</font>

244
00:10:17,649 --> 00:10:23,110
<font color="#E5E5E5">sub aggregations until the leaf node and</font>

245
00:10:20,139 --> 00:10:25,410
each of the sub aggregations have a

246
00:10:23,110 --> 00:10:29,019
<font color="#E5E5E5">reference to the note that elasticsearch</font>

247
00:10:25,410 --> 00:10:32,500
parsed<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> query</font><font color="#E5E5E5"> and where we get</font>

248
00:10:29,019 --> 00:10:34,930
the<font color="#E5E5E5"> parameters from it however</font><font color="#CCCCCC"> as I said</font>

249
00:10:32,500 --> 00:10:37,329
<font color="#E5E5E5">before last</font><font color="#CCCCCC"> research does not</font><font color="#E5E5E5"> directly</font>

250
00:10:34,930 --> 00:10:40,569
provide this facility to plugins

251
00:10:37,329 --> 00:10:46,120
directly<font color="#E5E5E5"> we needed to make a bit</font><font color="#CCCCCC"> of a</font>

252
00:10:40,569 --> 00:10:47,769
change with<font color="#E5E5E5"> the visibility in some of</font>

253
00:10:46,120 --> 00:10:51,279
the<font color="#E5E5E5"> fields which are private and do not</font>

254
00:10:47,769 --> 00:10:53,399
have getters<font color="#CCCCCC"> for them in</font><font color="#E5E5E5"> this case the</font>

255
00:10:51,279 --> 00:10:56,949
<font color="#E5E5E5">problem was getting the parse tree</font>

256
00:10:53,399 --> 00:10:59,410
complete<font color="#E5E5E5"> because we did not</font><font color="#CCCCCC"> have from</font>

257
00:10:56,949 --> 00:11:01,329
<font color="#E5E5E5">from the from this kind of note that</font>

258
00:10:59,410 --> 00:11:05,240
<font color="#CCCCCC">elastic search provides</font><font color="#E5E5E5"> we don't have</font>

259
00:11:01,329 --> 00:11:09,609
the<font color="#CCCCCC"> cyber creations</font><font color="#E5E5E5"> method to get the</font>

260
00:11:05,240 --> 00:11:14,209
the nested trees<font color="#E5E5E5"> so we had to implement</font>

261
00:11:09,610 --> 00:11:15,920
something<font color="#E5E5E5"> that run on a higher</font><font color="#CCCCCC"> security</font>

262
00:11:14,209 --> 00:11:18,618
context because<font color="#CCCCCC"> the last</font><font color="#E5E5E5"> research by</font>

263
00:11:15,920 --> 00:11:22,189
default<font color="#E5E5E5"> runs and does</font><font color="#CCCCCC"> very well with a</font>

264
00:11:18,619 --> 00:11:23,779
restricted<font color="#E5E5E5"> and set of operations so that</font>

265
00:11:22,189 --> 00:11:27,248
you can do for example reflection and

266
00:11:23,779 --> 00:11:30,829
<font color="#E5E5E5">get to the core without doing some</font>

267
00:11:27,249 --> 00:11:33,079
things so that the plugins can't hijack

268
00:11:30,829 --> 00:11:34,998
your cluster but we<font color="#E5E5E5"> need to hijack the</font>

269
00:11:33,079 --> 00:11:37,670
cluster so that we could<font color="#E5E5E5"> get to these</font>

270
00:11:34,999 --> 00:11:39,889
<font color="#E5E5E5">fields and for that we need</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> under</font>

271
00:11:37,670 --> 00:11:43,550
a very high permission level of security

272
00:11:39,889 --> 00:11:48,259
<font color="#CCCCCC">so you have to either trust</font><font color="#E5E5E5"> the code or</font>

273
00:11:43,550 --> 00:11:49,849
read it because<font color="#E5E5E5"> it's open source</font><font color="#CCCCCC"> and at</font>

274
00:11:48,259 --> 00:11:52,129
the end we we do some analysis<font color="#E5E5E5"> of</font>

275
00:11:49,850 --> 00:11:55,490
<font color="#E5E5E5">certain kinds of aggregation</font><font color="#CCCCCC"> that we</font>

276
00:11:52,129 --> 00:12:00,079
need to come with a<font color="#E5E5E5"> specific cost model</font>

277
00:11:55,490 --> 00:12:01,519
but in the case that<font color="#E5E5E5"> we don't have good</font>

278
00:12:00,079 --> 00:12:04,309
cost model on them yet<font color="#CCCCCC"> or it's</font><font color="#E5E5E5"> not</font>

279
00:12:01,519 --> 00:12:06,199
implemented<font color="#E5E5E5"> we rely on a default</font><font color="#CCCCCC"> cost</font>

280
00:12:04,309 --> 00:12:09,139
<font color="#E5E5E5">for each type of</font><font color="#CCCCCC"> aggregation that</font>

281
00:12:06,199 --> 00:12:10,819
<font color="#E5E5E5">happens and then we do some mathematical</font>

282
00:12:09,139 --> 00:12:14,329
recreations of the child<font color="#E5E5E5"> and</font><font color="#CCCCCC"> order</font>

283
00:12:10,819 --> 00:12:16,670
parent for configuring<font color="#E5E5E5"> it we use the</font>

284
00:12:14,329 --> 00:12:19,160
<font color="#CCCCCC">same kind</font><font color="#E5E5E5"> of configuration wherever you</font>

285
00:12:16,670 --> 00:12:22,878
deploy this<font color="#E5E5E5"> I will talk about that in a</font>

286
00:12:19,160 --> 00:12:25,490
moment<font color="#E5E5E5"> there's a default configuration</font>

287
00:12:22,879 --> 00:12:28,549
for every node<font color="#CCCCCC"> that is not</font><font color="#E5E5E5"> a specific</font>

288
00:12:25,490 --> 00:12:30,079
<font color="#E5E5E5">specific configure which can have some</font>

289
00:12:28,549 --> 00:12:32,209
default properties and then for<font color="#CCCCCC"> each</font>

290
00:12:30,079 --> 00:12:33,829
type of aggregation that<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> on the</font>

291
00:12:32,209 --> 00:12:35,628
<font color="#CCCCCC">elasticsearch</font><font color="#E5E5E5"> you can have some specific</font>

292
00:12:33,829 --> 00:12:37,699
<font color="#E5E5E5">configuration for each of them</font><font color="#CCCCCC"> and this</font>

293
00:12:35,629 --> 00:12:39,110
allows you<font color="#E5E5E5"> to get a cost model for each</font>

294
00:12:37,699 --> 00:12:42,199
type of<font color="#E5E5E5"> operation</font><font color="#CCCCCC"> that you have an</font>

295
00:12:39,110 --> 00:12:45,259
elastic search and even for what can

296
00:12:42,199 --> 00:12:47,359
subrogation have<font color="#E5E5E5"> been underneath some</font>

297
00:12:45,259 --> 00:12:50,179
other things<font color="#E5E5E5"> so that for example in this</font>

298
00:12:47,360 --> 00:12:53,019
<font color="#E5E5E5">example you can't get anything that is</font>

299
00:12:50,179 --> 00:12:56,269
not at terms sub aggregation under any

300
00:12:53,019 --> 00:12:58,790
Datagram so that you can't run more

301
00:12:56,269 --> 00:13:04,730
complex things than<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font>

302
00:12:58,790 --> 00:13:06,230
allow the user<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> we built this as a</font>

303
00:13:04,730 --> 00:13:09,069
library so<font color="#CCCCCC"> that you can look at</font><font color="#E5E5E5"> this</font>

304
00:13:06,230 --> 00:13:12,199
wherever you<font color="#E5E5E5"> want in in your projects</font>

305
00:13:09,069 --> 00:13:14,449
but there's sub<font color="#E5E5E5"> projects to make</font>

306
00:13:12,199 --> 00:13:15,919
examples<font color="#E5E5E5"> of how you would deploy this as</font>

307
00:13:14,449 --> 00:13:18,449
different stuff for<font color="#E5E5E5"> example you can</font>

308
00:13:15,919 --> 00:13:20,399
<font color="#E5E5E5">deploy this as an elastic search plugin</font>

309
00:13:18,450 --> 00:13:23,430
hosted in<font color="#E5E5E5"> the elasticsearch cluster and</font>

310
00:13:20,399 --> 00:13:24,930
in<font color="#E5E5E5"> this case you would run the libraries</font>

311
00:13:23,430 --> 00:13:28,260
of elasticsearch in the version that<font color="#E5E5E5"> the</font>

312
00:13:24,930 --> 00:13:29,969
<font color="#CCCCCC">cluster is running on so you</font><font color="#E5E5E5"> could you</font>

313
00:13:28,260 --> 00:13:31,260
would have<font color="#E5E5E5"> perfect compatibility with</font>

314
00:13:29,970 --> 00:13:34,680
<font color="#E5E5E5">you between the parse tree that we are</font>

315
00:13:31,260 --> 00:13:36,959
generating<font color="#E5E5E5"> and the configuration but you</font>

316
00:13:34,680 --> 00:13:40,469
can also run<font color="#CCCCCC"> it independently as</font><font color="#E5E5E5"> a micro</font>

317
00:13:36,959 --> 00:13:43,349
<font color="#CCCCCC">service with</font><font color="#E5E5E5"> and in this case we're</font>

318
00:13:40,470 --> 00:13:45,000
using akka for that and you can<font color="#CCCCCC"> use it</font>

319
00:13:43,350 --> 00:13:46,949
as a proxy for<font color="#CCCCCC"> elasticsearch</font><font color="#E5E5E5"> so that all</font>

320
00:13:45,000 --> 00:13:48,389
<font color="#CCCCCC">Alquist come to this micro service and</font>

321
00:13:46,949 --> 00:13:51,199
then it distributed<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> elasticsearch</font>

322
00:13:48,389 --> 00:13:55,019
<font color="#E5E5E5">backing or you can just have it run the</font>

323
00:13:51,199 --> 00:13:57,479
cost analysis on<font color="#E5E5E5"> it on them as a plugin</font>

324
00:13:55,019 --> 00:14:00,209
<font color="#CCCCCC">we</font><font color="#E5E5E5"> created the SBT structure the</font>

325
00:13:57,480 --> 00:14:01,560
scalability<font color="#CCCCCC"> structure for building</font>

326
00:14:00,209 --> 00:14:03,779
<font color="#E5E5E5">elasticsearch plugins based on the</font>

327
00:14:01,560 --> 00:14:06,510
Gradle code that elasticsearch provides

328
00:14:03,779 --> 00:14:08,820
for that<font color="#E5E5E5"> because we we had all our code</font>

329
00:14:06,510 --> 00:14:11,519
base<font color="#E5E5E5"> based on SBT and we wanted</font><font color="#CCCCCC"> to keep</font>

330
00:14:08,820 --> 00:14:12,750
<font color="#E5E5E5">that so if you are using Scala for any</font>

331
00:14:11,519 --> 00:14:15,060
of your projects<font color="#E5E5E5"> and you want to build</font>

332
00:14:12,750 --> 00:14:17,699
<font color="#CCCCCC">an elastic search plugin you can use</font>

333
00:14:15,060 --> 00:14:19,859
this as an example<font color="#CCCCCC"> of how</font><font color="#E5E5E5"> to how to</font>

334
00:14:17,699 --> 00:14:24,599
begin to to create<font color="#CCCCCC"> a plug-in from</font><font color="#E5E5E5"> SVT</font>

335
00:14:19,860 --> 00:14:26,550
<font color="#E5E5E5">and also there</font><font color="#CCCCCC"> is the capability of</font>

336
00:14:24,600 --> 00:14:29,730
running<font color="#E5E5E5"> this as just web front-end based</font>

337
00:14:26,550 --> 00:14:32,310
on akka HTTP and it's also a project<font color="#E5E5E5"> of</font>

338
00:14:29,730 --> 00:14:36,000
how you would run this on your own<font color="#E5E5E5"> and</font>

339
00:14:32,310 --> 00:14:39,989
including<font color="#CCCCCC"> escobar</font><font color="#E5E5E5"> as a library so that</font>

340
00:14:36,000 --> 00:14:44,970
how you<font color="#E5E5E5"> would interact with its</font><font color="#CCCCCC"> api in</font>

341
00:14:39,990 --> 00:14:46,110
an HTTP service and of course this<font color="#E5E5E5"> can</font>

342
00:14:44,970 --> 00:14:48,600
be<font color="#E5E5E5"> deployed on communities because</font>

343
00:14:46,110 --> 00:14:51,380
that's also<font color="#E5E5E5"> how we're deploying it</font>

344
00:14:48,600 --> 00:14:54,510
internally but it's it's a cool feature

345
00:14:51,380 --> 00:14:57,750
<font color="#E5E5E5">and in this case we already provide a</font>

346
00:14:54,510 --> 00:15:00,510
sample chart which lists the

347
00:14:57,750 --> 00:15:02,610
<font color="#E5E5E5">configuration as part of what you can</font>

348
00:15:00,510 --> 00:15:06,329
express directly in the values of<font color="#CCCCCC"> Jamel</font>

349
00:15:02,610 --> 00:15:08,040
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> file so that</font><font color="#E5E5E5"> you can directly</font>

350
00:15:06,329 --> 00:15:13,620
configure everything<font color="#E5E5E5"> in in one single</font>

351
00:15:08,040 --> 00:15:16,079
place next<font color="#CCCCCC"> step</font><font color="#E5E5E5"> we we are going</font><font color="#CCCCCC"> to need</font>

352
00:15:13,620 --> 00:15:18,810
<font color="#E5E5E5">a logo because as you said as you as you</font>

353
00:15:16,079 --> 00:15:20,790
have seen we<font color="#CCCCCC"> don't have any</font><font color="#E5E5E5"> visual way</font>

354
00:15:18,810 --> 00:15:23,250
of<font color="#E5E5E5"> referencing this but we need to be</font>

355
00:15:20,790 --> 00:15:27,149
<font color="#E5E5E5">future-proof this to elasticsearch 72</font>

356
00:15:23,250 --> 00:15:28,529
because<font color="#E5E5E5"> we we do not</font><font color="#CCCCCC"> have any ways to</font>

357
00:15:27,149 --> 00:15:30,350
<font color="#CCCCCC">ensure that this will run on future</font>

358
00:15:28,529 --> 00:15:32,189
versions of<font color="#E5E5E5"> elasticsearch and how this</font>

359
00:15:30,350 --> 00:15:34,829
mechanism<font color="#E5E5E5"> will continue</font>

360
00:15:32,190 --> 00:15:36,810
to perform<font color="#E5E5E5"> we are using some things that</font>

361
00:15:34,829 --> 00:15:39,359
we wouldn't<font color="#E5E5E5"> we</font><font color="#CCCCCC"> wouldn't like to</font><font color="#E5E5E5"> like</font>

362
00:15:36,810 --> 00:15:41,219
accessing private<font color="#E5E5E5"> method private</font><font color="#CCCCCC"> feels</font>

363
00:15:39,360 --> 00:15:45,750
<font color="#CCCCCC">directly we would like to</font><font color="#E5E5E5"> have some kind</font>

364
00:15:41,220 --> 00:15:47,940
of API for for doing<font color="#E5E5E5"> this and make make</font>

365
00:15:45,750 --> 00:15:50,790
<font color="#CCCCCC">it more feasible to</font><font color="#E5E5E5"> other plugins to run</font>

366
00:15:47,940 --> 00:15:54,269
in the same way and and have this kind

367
00:15:50,790 --> 00:15:57,329
<font color="#CCCCCC">of is it</font><font color="#E5E5E5"> and we would love to have some</font>

368
00:15:54,269 --> 00:15:59,670
way of<font color="#E5E5E5"> analyzing data from the</font><font color="#CCCCCC"> dynamic</font>

369
00:15:57,329 --> 00:16:02,279
usage of this blind<font color="#E5E5E5"> so that when you run</font>

370
00:15:59,670 --> 00:16:06,120
queries that go through the static cost

371
00:16:02,279 --> 00:16:08,970
analysis we could we could<font color="#E5E5E5"> compare</font>

372
00:16:06,120 --> 00:16:10,860
what's happening with the static cost

373
00:16:08,970 --> 00:16:13,500
analysis and what the for example<font color="#E5E5E5"> given</font>

374
00:16:10,860 --> 00:16:17,069
a profiler<font color="#E5E5E5"> would give us so that we</font><font color="#CCCCCC"> can</font>

375
00:16:13,500 --> 00:16:19,079
tune our cost our static cost parameters

376
00:16:17,069 --> 00:16:21,569
to those that actually<font color="#CCCCCC"> happen in</font><font color="#E5E5E5"> the</font>

377
00:16:19,079 --> 00:16:24,000
cluster<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that way we could get a much</font>

378
00:16:21,569 --> 00:16:26,550
better fit for<font color="#E5E5E5"> the static cost analysis</font>

379
00:16:24,000 --> 00:16:29,639
so<font color="#E5E5E5"> that the default cost analysis that</font>

380
00:16:26,550 --> 00:16:32,459
we get on github is much better tuned<font color="#E5E5E5"> to</font>

381
00:16:29,639 --> 00:16:37,500
water and<font color="#E5E5E5"> a real</font><font color="#CCCCCC"> elasticsearch cluster</font>

382
00:16:32,459 --> 00:16:39,869
<font color="#E5E5E5">performance and from that also improving</font>

383
00:16:37,500 --> 00:16:41,189
<font color="#E5E5E5">the static analysis methods so that it's</font>

384
00:16:39,870 --> 00:16:43,790
more accurate to<font color="#E5E5E5"> what's actually</font>

385
00:16:41,189 --> 00:16:46,529
happening including caching and<font color="#E5E5E5"> so on</font>

386
00:16:43,790 --> 00:16:51,390
and this<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> I had</font><font color="#E5E5E5"> for the talk so</font>

387
00:16:46,529 --> 00:16:58,540
please<font color="#CCCCCC"> any questions are very welcome</font>

388
00:16:51,390 --> 00:17:14,180
[Applause]

389
00:16:58,540 --> 00:17:16,250
okay<font color="#E5E5E5"> okay wait yes</font>

390
00:17:14,180 --> 00:17:18,500
yeah the<font color="#CCCCCC"> question is whether I provide</font>

391
00:17:16,250 --> 00:17:20,750
whether the<font color="#E5E5E5"> plugin provides any kind of</font>

392
00:17:18,500 --> 00:17:22,010
static analysis<font color="#E5E5E5"> over the query part of</font>

393
00:17:20,750 --> 00:17:23,810
the query<font color="#CCCCCC"> itself and not</font><font color="#E5E5E5"> just</font>

394
00:17:22,010 --> 00:17:26,150
aggregators currently not because our

395
00:17:23,810 --> 00:17:33,860
use case didn't need<font color="#E5E5E5"> to do that but it's</font>

396
00:17:26,150 --> 00:17:39,080
<font color="#CCCCCC">very easy</font><font color="#E5E5E5"> to do so we would</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need to</font>

397
00:17:33,860 --> 00:17:41,179
<font color="#E5E5E5">add a different a different interface so</font>

398
00:17:39,080 --> 00:17:52,689
that<font color="#E5E5E5"> we could have both aggregations and</font>

399
00:17:41,180 --> 00:17:58,730
queries but yeah however so<font color="#CCCCCC"> that you can</font>

400
00:17:52,690 --> 00:18:00,890
<font color="#E5E5E5">think of more</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> you can you can</font>

401
00:17:58,730 --> 00:18:02,180
do that<font color="#E5E5E5"> but in queries it's not as much</font>

402
00:18:00,890 --> 00:18:05,410
<font color="#CCCCCC">of a problem</font><font color="#E5E5E5"> because you're always</font>

403
00:18:02,180 --> 00:18:07,670
restricting the<font color="#CCCCCC"> dataset so even though</font>

404
00:18:05,410 --> 00:18:09,500
<font color="#CCCCCC">there's a chute and you can have</font>

405
00:18:07,670 --> 00:18:11,930
multiple<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that work at the same</font>

406
00:18:09,500 --> 00:18:14,230
time you're always you're always cutting

407
00:18:11,930 --> 00:18:15,860
datasets<font color="#E5E5E5"> you're not necessarily</font>

408
00:18:14,230 --> 00:18:23,680
<font color="#CCCCCC">expanding the data that you're</font>

409
00:18:15,860 --> 00:18:23,679
generating<font color="#E5E5E5"> yes yes</font>

410
00:18:24,950 --> 00:18:28,019
[Music]

411
00:18:32,840 --> 00:18:37,769
<font color="#CCCCCC">okay the question</font><font color="#E5E5E5"> is whether there's any</font>

412
00:18:35,279 --> 00:18:40,500
<font color="#E5E5E5">need for whether it's useful or why it's</font>

413
00:18:37,769 --> 00:18:42,720
useful<font color="#E5E5E5"> to use the internal structures</font><font color="#CCCCCC"> of</font>

414
00:18:40,500 --> 00:18:44,220
the parse tree<font color="#E5E5E5"> yeah if there's any</font>

415
00:18:42,720 --> 00:18:45,480
benefit<font color="#E5E5E5"> from using</font><font color="#CCCCCC"> the internal data</font>

416
00:18:44,220 --> 00:18:50,779
structures<font color="#CCCCCC"> over parsing the JSON</font>

417
00:18:45,480 --> 00:18:57,179
directly<font color="#E5E5E5"> that's a tricky question</font>

418
00:18:50,779 --> 00:18:59,460
<font color="#E5E5E5">because it's a trade-off</font><font color="#CCCCCC"> you could we</font>

419
00:18:57,179 --> 00:18:59,879
could<font color="#E5E5E5"> have our own</font><font color="#CCCCCC"> JSON</font><font color="#E5E5E5"> parser for</font><font color="#CCCCCC"> the</font>

420
00:18:59,460 --> 00:19:02,549
queries

421
00:18:59,879 --> 00:19:04,830
but then if<font color="#E5E5E5"> elasticsearch changes the</font>

422
00:19:02,549 --> 00:19:07,559
way that aggregations are handled or how

423
00:19:04,830 --> 00:19:09,269
this and the grammar is done on JSON

424
00:19:07,559 --> 00:19:10,769
<font color="#E5E5E5">then we would have to rework that for</font>

425
00:19:09,269 --> 00:19:13,200
<font color="#E5E5E5">future versions of elasticsearch and in</font>

426
00:19:10,769 --> 00:19:16,259
<font color="#E5E5E5">this way unless</font><font color="#CCCCCC"> they change the names or</font>

427
00:19:13,200 --> 00:19:19,049
<font color="#E5E5E5">the path of the of the names of the</font>

428
00:19:16,259 --> 00:19:21,809
aggregation<font color="#E5E5E5"> then it's done and it's much</font>

429
00:19:19,049 --> 00:19:24,330
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> to change that because</font><font color="#E5E5E5"> since Java</font>

430
00:19:21,809 --> 00:19:26,428
is<font color="#E5E5E5"> a statically compiled language we can</font>

431
00:19:24,330 --> 00:19:28,678
have we can<font color="#E5E5E5"> know whether something has</font>

432
00:19:26,429 --> 00:19:29,759
changed<font color="#CCCCCC"> in a static way so that when</font><font color="#E5E5E5"> we</font>

433
00:19:28,679 --> 00:19:32,700
compile with<font color="#E5E5E5"> a new version of</font>

434
00:19:29,759 --> 00:19:34,830
elasticsearch we would get that<font color="#E5E5E5"> compiler</font>

435
00:19:32,700 --> 00:19:37,409
<font color="#E5E5E5">and it's easy to change because we just</font>

436
00:19:34,830 --> 00:19:39,269
<font color="#E5E5E5">need to go to all to completion</font><font color="#CCCCCC"> on the</font>

437
00:19:37,409 --> 00:19:43,519
editor and<font color="#E5E5E5"> find out what the new name</font>

438
00:19:39,269 --> 00:19:47,730
<font color="#E5E5E5">for that so that's the main reason but</font>

439
00:19:43,519 --> 00:19:51,539
<font color="#E5E5E5">also because the elasticsearch can have</font>

440
00:19:47,730 --> 00:19:54,179
multiple<font color="#E5E5E5"> ways of analyzing a</font><font color="#CCCCCC"> query</font><font color="#E5E5E5"> for</font>

441
00:19:51,539 --> 00:19:56,549
<font color="#CCCCCC">example in elasticsearch six you</font>

442
00:19:54,179 --> 00:19:58,710
recognize both Alice and aggregations<font color="#CCCCCC"> as</font>

443
00:19:56,549 --> 00:20:00,539
a name<font color="#E5E5E5"> for the sub aggregations so we</font>

444
00:19:58,710 --> 00:20:03,919
could have to go<font color="#E5E5E5"> into this kind of</font>

445
00:20:00,539 --> 00:20:03,919
<font color="#E5E5E5">caveats and</font><font color="#CCCCCC"> works</font>

446
00:20:21,120 --> 00:20:31,268
<font color="#E5E5E5">okay</font>

447
00:20:22,690 --> 00:20:31,269
[Applause]

