1
00:00:06,650 --> 00:00:13,019
yeah<font color="#E5E5E5"> okay hello everyone thank you</font><font color="#CCCCCC"> for</font>

2
00:00:11,850 --> 00:00:15,780
coming it's really nice to<font color="#CCCCCC"> see so</font><font color="#E5E5E5"> many</font>

3
00:00:13,019 --> 00:00:17,849
<font color="#E5E5E5">people here and my name</font><font color="#CCCCCC"> is Andrea and</font>

4
00:00:15,780 --> 00:00:21,049
what I'm doing<font color="#CCCCCC"> today</font><font color="#E5E5E5"> I realized that I'm</font>

5
00:00:17,849 --> 00:00:23,940
doing<font color="#CCCCCC"> Perl for 20 years since 1999 and</font>

6
00:00:21,050 --> 00:00:26,910
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> also igniting the</font><font color="#CCCCCC"> Perl conference so</font>

7
00:00:23,940 --> 00:00:29,160
it<font color="#CCCCCC"> spoken this year in in August so you</font>

8
00:00:26,910 --> 00:00:31,500
can take a look<font color="#E5E5E5"> I'm not going to promote</font>

9
00:00:29,160 --> 00:00:34,800
<font color="#CCCCCC">pearl here</font><font color="#E5E5E5"> what I'm going to do I'm</font>

10
00:00:31,500 --> 00:00:37,050
going<font color="#E5E5E5"> to talk about one</font><font color="#CCCCCC"> specific part</font><font color="#E5E5E5"> of</font>

11
00:00:34,800 --> 00:00:40,050
Perl 6 which is<font color="#E5E5E5"> really interesting</font>

12
00:00:37,050 --> 00:00:43,199
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> in this audience for creating</font>

13
00:00:40,050 --> 00:00:45,328
some compilers<font color="#E5E5E5"> parsers translators</font>

14
00:00:43,200 --> 00:00:47,640
whatever interpreters for other

15
00:00:45,329 --> 00:00:51,809
languages<font color="#E5E5E5"> so I will demonstrate how pill</font>

16
00:00:47,640 --> 00:00:53,760
<font color="#CCCCCC">6 can do this stuff</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> so basically</font>

17
00:00:51,809 --> 00:00:58,110
just<font color="#E5E5E5"> a couple of words about what Perl 6</font>

18
00:00:53,760 --> 00:01:01,129
is so a few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago well three</font><font color="#CCCCCC"> years</font>

19
00:00:58,110 --> 00:01:04,649
ago<font color="#CCCCCC"> like worldly creative Perl self</font>

20
00:01:01,129 --> 00:01:06,720
<font color="#CCCCCC">announced that this Perl 6 is point zero</font>

21
00:01:04,649 --> 00:01:08,910
<font color="#CCCCCC">zero release and it was done here at</font>

22
00:01:06,720 --> 00:01:11,130
<font color="#E5E5E5">toss them and season since then</font>

23
00:01:08,910 --> 00:01:13,380
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> we have this table version of</font>

24
00:01:11,130 --> 00:01:15,810
the language<font color="#E5E5E5"> specification and you also</font>

25
00:01:13,380 --> 00:01:19,110
have really<font color="#CCCCCC"> a nice nicely working</font>

26
00:01:15,810 --> 00:01:20,789
compiler<font color="#CCCCCC"> you have to realize that po5</font>

27
00:01:19,110 --> 00:01:22,380
and<font color="#E5E5E5"> Perl 6 are basically different</font>

28
00:01:20,789 --> 00:01:24,660
<font color="#E5E5E5">languages of course they have many</font>

29
00:01:22,380 --> 00:01:26,429
things<font color="#CCCCCC"> in common the same</font><font color="#E5E5E5"> spirit of the</font>

30
00:01:24,660 --> 00:01:28,770
language but<font color="#E5E5E5"> still it's a separate</font>

31
00:01:26,429 --> 00:01:31,950
language<font color="#E5E5E5"> and all that I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font>

32
00:01:28,770 --> 00:01:35,610
<font color="#CCCCCC">about is only about Perl 6 so it's</font>

33
00:01:31,950 --> 00:01:38,759
<font color="#CCCCCC">different language there's only one</font>

34
00:01:35,610 --> 00:01:39,690
compiler<font color="#E5E5E5"> at the moment which</font><font color="#CCCCCC"> you can use</font>

35
00:01:38,759 --> 00:01:42,030
it's<font color="#CCCCCC"> called rikudou</font>

36
00:01:39,690 --> 00:01:45,840
and you can<font color="#E5E5E5"> download it from recorded</font>

37
00:01:42,030 --> 00:01:48,030
<font color="#E5E5E5">org and you can use this compiler to run</font>

38
00:01:45,840 --> 00:01:50,729
all<font color="#E5E5E5"> the examples that</font><font color="#CCCCCC"> I will</font><font color="#E5E5E5"> demonstrate</font>

39
00:01:48,030 --> 00:01:53,039
later<font color="#E5E5E5"> the interesting thing about Perl 6</font>

40
00:01:50,729 --> 00:01:55,619
is that this compiler is also written in

41
00:01:53,039 --> 00:01:58,050
Perl 6 so it's<font color="#E5E5E5"> self hosting language and</font>

42
00:01:55,619 --> 00:02:00,780
that's one<font color="#E5E5E5"> of the reasons were white</font>

43
00:01:58,050 --> 00:02:03,330
took so long to to bootstrap the the

44
00:02:00,780 --> 00:02:06,539
<font color="#E5E5E5">language and also there's the</font><font color="#CCCCCC"> mqp not</font>

45
00:02:03,330 --> 00:02:08,520
quite Perl it's a subset of Perl 6 which

46
00:02:06,539 --> 00:02:11,130
was developed to<font color="#E5E5E5"> help to build this</font>

47
00:02:08,520 --> 00:02:13,159
bootstrapping process<font color="#E5E5E5"> and this is just a</font>

48
00:02:11,130 --> 00:02:16,019
random really<font color="#CCCCCC"> random I just took some</font>

49
00:02:13,159 --> 00:02:18,329
random code from<font color="#CCCCCC"> repository this is the</font>

50
00:02:16,019 --> 00:02:21,030
source<font color="#E5E5E5"> code of till 6</font>

51
00:02:18,330 --> 00:02:25,380
<font color="#CCCCCC">the sweetened pill</font><font color="#E5E5E5"> 6</font><font color="#CCCCCC"> plus from UC nqp</font>

52
00:02:21,030 --> 00:02:26,760
somewhere<font color="#E5E5E5"> which uses some</font><font color="#CCCCCC"> NTP calls to</font>

53
00:02:25,380 --> 00:02:30,090
do some low stuff

54
00:02:26,760 --> 00:02:33,450
<font color="#E5E5E5">low level stuff but this this image is</font>

55
00:02:30,090 --> 00:02:35,850
<font color="#E5E5E5">not aimed to show</font><font color="#CCCCCC"> you how difficult Perl</font>

56
00:02:33,450 --> 00:02:38,220
6 is it's<font color="#E5E5E5"> not a noise language its</font>

57
00:02:35,850 --> 00:02:40,920
internals of<font color="#CCCCCC"> the compiler so it has to</font>

58
00:02:38,220 --> 00:02:42,990
be something difficult<font color="#CCCCCC"> basically in 206</font>

59
00:02:40,920 --> 00:02:44,820
you can do things<font color="#CCCCCC"> like this so you</font><font color="#E5E5E5"> can</font>

60
00:02:42,990 --> 00:02:48,440
use<font color="#E5E5E5"> Unicode characters you can use for</font>

61
00:02:44,820 --> 00:02:51,810
<font color="#E5E5E5">example superscripts you create the</font>

62
00:02:48,440 --> 00:02:53,609
power the<font color="#CCCCCC"> QA</font><font color="#E5E5E5"> the the power of</font><font color="#CCCCCC"> variable</font>

63
00:02:51,810 --> 00:02:55,800
<font color="#E5E5E5">instead of using two stars for</font><font color="#CCCCCC"> example</font>

64
00:02:53,610 --> 00:02:58,590
<font color="#E5E5E5">but that that's</font><font color="#CCCCCC"> a side story</font>

65
00:02:55,800 --> 00:03:01,230
so what's<font color="#CCCCCC"> interested in Perl</font><font color="#E5E5E5"> 6 for</font>

66
00:02:58,590 --> 00:03:03,900
creating<font color="#E5E5E5"> other languages is that</font><font color="#CCCCCC"> they</font>

67
00:03:01,230 --> 00:03:06,060
have the updated<font color="#E5E5E5"> regular expression</font>

68
00:03:03,900 --> 00:03:07,920
engine and the regular expressions<font color="#E5E5E5"> are</font>

69
00:03:06,060 --> 00:03:09,750
not called regular expressions<font color="#E5E5E5"> well they</font>

70
00:03:07,920 --> 00:03:12,030
are not regular that regular then I'm

71
00:03:09,750 --> 00:03:15,180
called<font color="#CCCCCC"> brag axis or reg axis</font><font color="#E5E5E5"> whatever</font>

72
00:03:12,030 --> 00:03:20,400
likes you read it<font color="#E5E5E5"> and the second part is</font>

73
00:03:15,180 --> 00:03:22,530
<font color="#CCCCCC">that felsic has kind of extended version</font>

74
00:03:20,400 --> 00:03:25,920
of reg regular expressions which are

75
00:03:22,530 --> 00:03:30,030
called grammars and<font color="#CCCCCC"> that's the end of</font>

76
00:03:25,920 --> 00:03:32,640
the slides<font color="#E5E5E5"> so what I'm going to do next</font>

77
00:03:30,030 --> 00:03:36,330
<font color="#CCCCCC">I'm going to</font><font color="#E5E5E5"> show you how how quickly</font>

78
00:03:32,640 --> 00:03:38,220
you can<font color="#CCCCCC"> create</font><font color="#E5E5E5"> a compiler</font><font color="#CCCCCC"> well not</font>

79
00:03:36,330 --> 00:03:40,680
<font color="#E5E5E5">necessarily it should be compiler by</font>

80
00:03:38,220 --> 00:03:42,330
compiler I mean that it's some program

81
00:03:40,680 --> 00:03:43,800
that translate that<font color="#E5E5E5"> reads that</font>

82
00:03:42,330 --> 00:03:46,470
understand<font color="#CCCCCC"> language don't necessarily</font>

83
00:03:43,800 --> 00:03:49,950
compiles it to a an executive<font color="#CCCCCC"> ball file</font>

84
00:03:46,470 --> 00:03:51,770
in binary<font color="#E5E5E5"> code so here's the empty file</font>

85
00:03:49,950 --> 00:03:56,488
and what I'm going to do<font color="#E5E5E5"> I'm going to</font>

86
00:03:51,770 --> 00:04:01,200
create a program<font color="#CCCCCC"> that will be able</font><font color="#E5E5E5"> to</font>

87
00:03:56,489 --> 00:04:03,540
understand<font color="#E5E5E5"> this program for example</font><font color="#CCCCCC"> it's</font>

88
00:04:01,200 --> 00:04:09,810
<font color="#CCCCCC">just the random language it's not</font>

89
00:04:03,540 --> 00:04:12,930
language<font color="#E5E5E5"> I'm big enough and I'm going</font><font color="#CCCCCC"> to</font>

90
00:04:09,810 --> 00:04:14,940
<font color="#E5E5E5">print it so imagine that this this line</font>

91
00:04:12,930 --> 00:04:17,040
is<font color="#CCCCCC"> the line in language which is</font><font color="#E5E5E5"> the</font>

92
00:04:14,940 --> 00:04:19,769
minimal minimalistic language and I'm

93
00:04:17,040 --> 00:04:24,030
going to parse and execute it using<font color="#E5E5E5"> Perl</font>

94
00:04:19,769 --> 00:04:26,220
6 grammars so what I'm going<font color="#E5E5E5"> to do I</font>

95
00:04:24,030 --> 00:04:28,679
have<font color="#CCCCCC"> to create the grammar so I have to</font>

96
00:04:26,220 --> 00:04:31,680
<font color="#E5E5E5">describe the</font><font color="#CCCCCC"> language it's somehow</font>

97
00:04:28,680 --> 00:04:35,970
<font color="#E5E5E5">similar to what BNF</font>

98
00:04:31,680 --> 00:04:38,460
is<font color="#E5E5E5"> using so I create the grammar</font><font color="#CCCCCC"> I can</font>

99
00:04:35,970 --> 00:04:40,710
call it whatever I want<font color="#CCCCCC"> and that's</font>

100
00:04:38,460 --> 00:04:42,719
basically<font color="#E5E5E5"> the class so the</font><font color="#CCCCCC"> syntax really</font>

101
00:04:40,710 --> 00:04:44,909
resembles how you define class is in

102
00:04:42,720 --> 00:04:48,479
other programming languages<font color="#CCCCCC"> but instead</font>

103
00:04:44,910 --> 00:04:50,729
<font color="#CCCCCC">of methods you have rules and tokens so</font>

104
00:04:48,479 --> 00:04:55,800
my first rule<font color="#E5E5E5"> and it should be called</font>

105
00:04:50,729 --> 00:04:58,380
top so the<font color="#E5E5E5"> beginning my first rule is</font><font color="#CCCCCC"> to</font>

106
00:04:55,800 --> 00:05:01,830
pass<font color="#E5E5E5"> the whole sentence the whole</font>

107
00:04:58,380 --> 00:05:05,250
program<font color="#E5E5E5"> so my program</font><font color="#CCCCCC"> is basically a</font>

108
00:05:01,830 --> 00:05:08,760
list<font color="#E5E5E5"> of statements</font><font color="#CCCCCC"> a list of statements</font>

109
00:05:05,250 --> 00:05:12,180
<font color="#E5E5E5">and what I'm typing now this line 5 is</font>

110
00:05:08,760 --> 00:05:15,240
actually the regular expression which<font color="#CCCCCC"> is</font>

111
00:05:12,180 --> 00:05:18,449
embedded<font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> Perl 6 code</font><font color="#E5E5E5"> so</font>

112
00:05:15,240 --> 00:05:21,270
grammar<font color="#E5E5E5"> line 3 rule</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> for our</font><font color="#CCCCCC"> pill</font><font color="#E5E5E5"> 6</font>

113
00:05:18,449 --> 00:05:24,000
code inside<font color="#E5E5E5"> line 5 is basically already</font>

114
00:05:21,270 --> 00:05:29,698
<font color="#E5E5E5">a</font><font color="#CCCCCC"> regular expression</font><font color="#E5E5E5"> not irregular a</font>

115
00:05:24,000 --> 00:05:32,430
regular so I'm going<font color="#E5E5E5"> to have more than</font>

116
00:05:29,699 --> 00:05:34,949
<font color="#E5E5E5">one statement</font><font color="#CCCCCC"> or actually it's</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> if</font>

117
00:05:32,430 --> 00:05:37,650
<font color="#CCCCCC">syntax is really like a regular regular</font>

118
00:05:34,949 --> 00:05:40,740
expression so the star quantifier means

119
00:05:37,650 --> 00:05:45,840
there can<font color="#CCCCCC"> be zero or more repetitions</font><font color="#E5E5E5"> of</font>

120
00:05:40,740 --> 00:05:48,870
something on<font color="#E5E5E5"> the left and then I tell</font>

121
00:05:45,840 --> 00:05:52,049
<font color="#CCCCCC">that these</font><font color="#E5E5E5"> statements are separated by a</font>

122
00:05:48,870 --> 00:05:55,919
semicolon<font color="#CCCCCC"> so that's simple</font><font color="#E5E5E5"> what I have</font>

123
00:05:52,050 --> 00:05:57,750
to do now so I<font color="#CCCCCC"> described</font><font color="#E5E5E5"> this grammar to</font>

124
00:05:55,919 --> 00:06:02,698
some extent and now I can use<font color="#E5E5E5"> this</font>

125
00:05:57,750 --> 00:06:04,650
grammar<font color="#E5E5E5"> to pass the string containing</font>

126
00:06:02,699 --> 00:06:06,360
this program in<font color="#E5E5E5"> this programming</font>

127
00:06:04,650 --> 00:06:10,729
<font color="#E5E5E5">language that's it after there are for</font>

128
00:06:06,360 --> 00:06:17,970
<font color="#CCCCCC">example can say say is</font><font color="#E5E5E5"> operator to print</font>

129
00:06:10,729 --> 00:06:22,949
in<font color="#CCCCCC"> twelve six so I can use this test dot</font>

130
00:06:17,970 --> 00:06:24,270
PL no such yeah of course because there

131
00:06:22,949 --> 00:06:27,210
are no statements<font color="#E5E5E5"> so I have to define</font>

132
00:06:24,270 --> 00:06:31,099
them<font color="#E5E5E5"> so a statement actually</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> in the</font>

133
00:06:27,210 --> 00:06:35,760
next rule which I have to implement

134
00:06:31,099 --> 00:06:38,370
statement start and what is the

135
00:06:35,760 --> 00:06:41,700
statement<font color="#CCCCCC"> a statement is in my example</font>

136
00:06:38,370 --> 00:06:45,449
it's either either at vertical<font color="#E5E5E5"> bar bar</font><font color="#CCCCCC"> 4</font>

137
00:06:41,700 --> 00:06:51,120
or either a variable declaration<font color="#E5E5E5"> so</font>

138
00:06:45,449 --> 00:06:53,490
I can type variable declaration or the

139
00:06:51,120 --> 00:06:55,319
printed instruction<font color="#CCCCCC"> some well actually</font>

140
00:06:53,490 --> 00:06:59,520
we can call it just a function call

141
00:06:55,319 --> 00:07:00,839
right and from this moment<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> to</font>

142
00:06:59,520 --> 00:07:03,270
define<font color="#E5E5E5"> what is a variable declaration</font>

143
00:07:00,839 --> 00:07:08,719
what is a function call<font color="#E5E5E5"> and again it's</font>

144
00:07:03,270 --> 00:07:14,669
<font color="#E5E5E5">really simple</font><font color="#CCCCCC"> so I can variable</font><font color="#E5E5E5"> a</font>

145
00:07:08,719 --> 00:07:21,259
declaration<font color="#CCCCCC"> what is it it's a string var</font>

146
00:07:14,669 --> 00:07:24,330
forward<font color="#E5E5E5"> by variable name variable name</font>

147
00:07:21,259 --> 00:07:29,719
followed by equal sign followed by some

148
00:07:24,330 --> 00:07:32,878
number and so on<font color="#E5E5E5"> so I have to also</font>

149
00:07:29,719 --> 00:07:35,310
explain<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Perl to</font><font color="#E5E5E5"> Bill</font><font color="#CCCCCC"> 6 what is a</font>

150
00:07:32,879 --> 00:07:37,529
variable<font color="#CCCCCC"> name so I create another rule</font>

151
00:07:35,310 --> 00:07:42,449
but<font color="#E5E5E5"> this time it will be with</font><font color="#CCCCCC"> no it will</font>

152
00:07:37,529 --> 00:07:44,159
<font color="#E5E5E5">not be a rule it will be a token why a</font>

153
00:07:42,449 --> 00:07:46,649
token<font color="#CCCCCC"> because the variable name is</font>

154
00:07:44,159 --> 00:07:49,319
something<font color="#CCCCCC"> that do</font><font color="#E5E5E5"> not contain that does</font>

155
00:07:46,649 --> 00:07:51,539
<font color="#E5E5E5">not contain spaces inside so</font><font color="#CCCCCC"> Perl</font><font color="#E5E5E5"> 6</font>

156
00:07:49,319 --> 00:07:54,719
understands that for example in the line

157
00:07:51,539 --> 00:07:57,060
<font color="#CCCCCC">1 I</font><font color="#E5E5E5"> will omit spaces around the equal</font>

158
00:07:54,719 --> 00:08:00,120
sign it will still<font color="#CCCCCC"> work so I don't</font><font color="#E5E5E5"> have</font>

159
00:07:57,060 --> 00:08:01,050
to do any extra<font color="#CCCCCC"> work</font><font color="#E5E5E5"> to explain that it</font>

160
00:08:00,120 --> 00:08:03,360
<font color="#E5E5E5">is allowed there</font>

161
00:08:01,050 --> 00:08:05,819
so Perl 6 will understand<font color="#E5E5E5"> as soon as is</font>

162
00:08:03,360 --> 00:08:07,860
I'm using the room keyword it will

163
00:08:05,819 --> 00:08:11,129
understand the spaces<font color="#E5E5E5"> around parts of</font>

164
00:08:07,860 --> 00:08:13,229
the expressions are valid things<font color="#E5E5E5"> so what</font>

165
00:08:11,129 --> 00:08:17,099
is a<font color="#E5E5E5"> variable name basically it's</font><font color="#CCCCCC"> just</font>

166
00:08:13,229 --> 00:08:21,959
some some letters or whatever some would

167
00:08:17,099 --> 00:08:26,399
word characters<font color="#E5E5E5"> more than one</font><font color="#CCCCCC"> the same</font>

168
00:08:21,959 --> 00:08:30,629
for the number<font color="#E5E5E5"> let's do a simple thing</font>

169
00:08:26,399 --> 00:08:32,969
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> numbers are</font><font color="#CCCCCC"> only digits so</font>

170
00:08:30,629 --> 00:08:35,190
it's integers positive<font color="#E5E5E5"> but for our</font>

171
00:08:32,969 --> 00:08:36,089
<font color="#CCCCCC">example is more</font><font color="#E5E5E5"> than love and</font><font color="#CCCCCC"> what else</font>

172
00:08:35,190 --> 00:08:38,940
we have

173
00:08:36,089 --> 00:08:42,709
you know this<font color="#E5E5E5"> function</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> thing so</font>

174
00:08:38,940 --> 00:08:46,920
let's<font color="#E5E5E5"> create another rule function call</font>

175
00:08:42,708 --> 00:08:49,290
which will expect a function name<font color="#E5E5E5"> in our</font>

176
00:08:46,920 --> 00:08:52,589
<font color="#E5E5E5">case it's only print so we</font><font color="#CCCCCC"> are only a</font>

177
00:08:49,290 --> 00:08:56,880
<font color="#E5E5E5">heaven single function in this language</font>

178
00:08:52,589 --> 00:08:59,660
<font color="#E5E5E5">followed by the</font><font color="#CCCCCC"> variable name so more or</font>

179
00:08:56,880 --> 00:08:59,660
less<font color="#CCCCCC"> that's it so I</font>

180
00:09:05,180 --> 00:09:20,790
<font color="#E5E5E5">all right yes</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> I also</font><font color="#CCCCCC"> wants to</font>

181
00:09:17,390 --> 00:09:23,370
you to<font color="#E5E5E5"> take a look at so for example</font>

182
00:09:20,790 --> 00:09:28,050
line 13 rule variable - declaration<font color="#E5E5E5"> in</font>

183
00:09:23,370 --> 00:09:30,060
Perl 6<font color="#E5E5E5"> - is a valid character for it can</font>

184
00:09:28,050 --> 00:09:31,979
be<font color="#E5E5E5"> used inside the identifier of the for</font>

185
00:09:30,060 --> 00:09:35,459
<font color="#CCCCCC">example variable or function or a method</font>

186
00:09:31,980 --> 00:09:38,910
name<font color="#CCCCCC"> okay so it looks like</font><font color="#E5E5E5"> okay let's</font>

187
00:09:35,459 --> 00:09:41,189
try<font color="#E5E5E5"> running it no still no method</font>

188
00:09:38,910 --> 00:09:43,649
statements<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it has to</font><font color="#E5E5E5"> be</font>

189
00:09:41,190 --> 00:09:47,490
statement and<font color="#E5E5E5"> s is like yeah it's the</font>

190
00:09:43,649 --> 00:09:49,440
star<font color="#CCCCCC"> Yahoo</font><font color="#E5E5E5"> okay so let's take a look</font><font color="#CCCCCC"> at</font>

191
00:09:47,490 --> 00:09:54,420
the output<font color="#CCCCCC"> of this program so what</font><font color="#E5E5E5"> it</font>

192
00:09:49,440 --> 00:09:57,029
<font color="#E5E5E5">says it</font><font color="#CCCCCC"> says that it managed to pass the</font>

193
00:09:54,420 --> 00:09:59,250
top line containing<font color="#E5E5E5"> the program and</font>

194
00:09:57,029 --> 00:10:02,670
basically it done demonstrate so it

195
00:09:59,250 --> 00:10:04,800
contains<font color="#E5E5E5"> the statement bar X is 20 the</font>

196
00:10:02,670 --> 00:10:07,529
second statement is print X and each

197
00:10:04,800 --> 00:10:09,719
statement has some details<font color="#CCCCCC"> about what it</font>

198
00:10:07,529 --> 00:10:11,279
<font color="#E5E5E5">is in the first</font><font color="#CCCCCC"> time in the</font><font color="#E5E5E5"> first case</font>

199
00:10:09,720 --> 00:10:12,540
<font color="#CCCCCC">it's a variable declaration</font><font color="#E5E5E5"> with the</font>

200
00:10:11,279 --> 00:10:14,430
variable name and<font color="#CCCCCC"> the number that is</font>

201
00:10:12,540 --> 00:10:16,290
assigned to<font color="#E5E5E5"> this variable in the second</font>

202
00:10:14,430 --> 00:10:17,969
case is again the function<font color="#E5E5E5"> call the</font>

203
00:10:16,290 --> 00:10:19,170
function name while the<font color="#CCCCCC"> function name</font><font color="#E5E5E5"> is</font>

204
00:10:17,970 --> 00:10:21,390
missing here because we didn't<font color="#E5E5E5"> create</font>

205
00:10:19,170 --> 00:10:24,360
this<font color="#CCCCCC"> special rule or token for the</font>

206
00:10:21,390 --> 00:10:27,750
function name<font color="#CCCCCC"> but still we have the</font>

207
00:10:24,360 --> 00:10:29,790
variable name at extract<font color="#E5E5E5"> hit so</font>

208
00:10:27,750 --> 00:10:32,130
basically here we already<font color="#E5E5E5"> pass in the</font>

209
00:10:29,790 --> 00:10:34,349
program so<font color="#E5E5E5"> Perl 6 understands</font><font color="#CCCCCC"> well my</font>

210
00:10:32,130 --> 00:10:36,959
program my<font color="#E5E5E5"> test program understands what</font>

211
00:10:34,350 --> 00:10:41,610
the structure of<font color="#E5E5E5"> this program and the</font>

212
00:10:36,959 --> 00:10:44,790
next step<font color="#E5E5E5"> is just to execute this so</font>

213
00:10:41,610 --> 00:10:46,709
yeah<font color="#E5E5E5"> and also notice</font><font color="#CCCCCC"> that unlike</font>

214
00:10:44,790 --> 00:10:49,709
traditional approaches<font color="#CCCCCC"> to create in</font>

215
00:10:46,709 --> 00:10:52,709
compilers<font color="#E5E5E5"> there's no separation for like</font>

216
00:10:49,709 --> 00:10:55,319
lexer and parser<font color="#E5E5E5"> everything goes in a</font>

217
00:10:52,709 --> 00:10:58,410
single grammar<font color="#E5E5E5"> so my variable</font>

218
00:10:55,320 --> 00:11:01,649
declaration my numbers and<font color="#CCCCCC"> like equal</font>

219
00:10:58,410 --> 00:11:04,589
sign<font color="#CCCCCC"> or var keyword</font><font color="#E5E5E5"> are living here</font>

220
00:11:01,649 --> 00:11:08,490
<font color="#CCCCCC">there's no special lecture which</font>

221
00:11:04,589 --> 00:11:09,900
extracts<font color="#E5E5E5"> the parts of language</font><font color="#CCCCCC"> first so</font>

222
00:11:08,490 --> 00:11:11,710
now the second part<font color="#CCCCCC"> the second part</font><font color="#E5E5E5"> is</font>

223
00:11:09,900 --> 00:11:14,529
<font color="#E5E5E5">to execute this</font>

224
00:11:11,710 --> 00:11:18,730
so what I want I wanted<font color="#E5E5E5"> to print 20 in</font>

225
00:11:14,529 --> 00:11:22,839
the console<font color="#E5E5E5"> and what I will do I will</font>

226
00:11:18,730 --> 00:11:27,040
add actions so called actions to my

227
00:11:22,839 --> 00:11:28,360
grammar<font color="#E5E5E5"> so this is the</font><font color="#CCCCCC"> you know</font>

228
00:11:27,040 --> 00:11:31,300
<font color="#CCCCCC">placeholder</font><font color="#E5E5E5"> for the action</font>

229
00:11:28,360 --> 00:11:33,100
so again<font color="#E5E5E5"> line 15 starts with some fill</font>

230
00:11:31,300 --> 00:11:36,069
code inside which we have some<font color="#E5E5E5"> regular</font>

231
00:11:33,100 --> 00:11:38,020
expression inside which we have again<font color="#CCCCCC"> a</font>

232
00:11:36,070 --> 00:11:41,860
block which<font color="#CCCCCC"> contains</font><font color="#E5E5E5"> both six codes so</font>

233
00:11:38,020 --> 00:11:45,010
here where the<font color="#E5E5E5"> line 15</font><font color="#CCCCCC"> is I will type</font>

234
00:11:41,860 --> 00:11:48,160
some<font color="#CCCCCC"> Perl code and I will just save this</font>

235
00:11:45,010 --> 00:11:49,990
variable in some variable storage so

236
00:11:48,160 --> 00:11:55,990
this is how I<font color="#E5E5E5"> can do it</font>

237
00:11:49,990 --> 00:11:58,630
<font color="#E5E5E5">variable name is number I will explain</font>

238
00:11:55,990 --> 00:12:01,959
this<font color="#CCCCCC"> plus and of course I have to create</font>

239
00:11:58,630 --> 00:12:04,720
some storage<font color="#E5E5E5"> for this so I can create</font>

240
00:12:01,959 --> 00:12:06,369
the hash bar which will contain my

241
00:12:04,720 --> 00:12:10,810
variables<font color="#E5E5E5"> and after the program</font><font color="#CCCCCC"> is</font>

242
00:12:06,370 --> 00:12:14,140
paused<font color="#CCCCCC"> I can just type it and see what's</font>

243
00:12:10,810 --> 00:12:17,040
<font color="#E5E5E5">there inside so what's there inside you</font>

244
00:12:14,140 --> 00:12:25,270
see<font color="#E5E5E5"> this line the last line yes sorry</font>

245
00:12:17,040 --> 00:12:30,910
<font color="#CCCCCC">this line so forth like Perl so this</font>

246
00:12:25,270 --> 00:12:33,670
line demonstrates the content of this

247
00:12:30,910 --> 00:12:36,640
variable storage<font color="#CCCCCC"> after I passed and</font>

248
00:12:33,670 --> 00:12:40,990
executed<font color="#E5E5E5"> the action so</font><font color="#CCCCCC"> we see so X</font>

249
00:12:36,640 --> 00:12:43,390
contains<font color="#E5E5E5"> 20 and now actually I can</font>

250
00:12:40,990 --> 00:12:46,870
create another<font color="#E5E5E5"> action which will use</font>

251
00:12:43,390 --> 00:12:51,390
this value to<font color="#E5E5E5"> print it</font><font color="#CCCCCC"> so I have</font><font color="#E5E5E5"> to go</font>

252
00:12:46,870 --> 00:12:54,820
to the function call<font color="#E5E5E5"> brew and here I</font>

253
00:12:51,390 --> 00:12:57,699
will<font color="#CCCCCC"> just print so the impulses there</font>

254
00:12:54,820 --> 00:12:58,560
are two<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> that print well</font>

255
00:12:57,700 --> 00:13:01,930
actually there's more

256
00:12:58,560 --> 00:13:05,050
<font color="#CCCCCC">so there's print but also</font><font color="#E5E5E5"> there's three</font>

257
00:13:01,930 --> 00:13:06,670
letters say<font color="#E5E5E5"> which also adds the new line</font>

258
00:13:05,050 --> 00:13:08,529
at the end<font color="#E5E5E5"> of the output which is really</font>

259
00:13:06,670 --> 00:13:11,290
handy in many cases so what I'm going to

260
00:13:08,529 --> 00:13:16,380
do<font color="#E5E5E5"> I am just going to print this exact</font>

261
00:13:11,290 --> 00:13:21,839
value that's it

262
00:13:16,380 --> 00:13:24,780
so you see just<font color="#E5E5E5"> above there's things</font>

263
00:13:21,840 --> 00:13:26,940
here in the output<font color="#CCCCCC"> so it works</font><font color="#E5E5E5"> and of</font>

264
00:13:24,780 --> 00:13:29,790
course<font color="#E5E5E5"> it is not limited</font><font color="#CCCCCC"> to this program</font>

265
00:13:26,940 --> 00:13:33,570
only<font color="#E5E5E5"> I can extend it I can add example</font>

266
00:13:29,790 --> 00:13:40,319
<font color="#E5E5E5">Wow another variable</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is 42 and I</font>

267
00:13:33,570 --> 00:13:43,110
can print<font color="#E5E5E5"> it and I see so 42 is here and</font>

268
00:13:40,320 --> 00:13:47,790
I also see what<font color="#E5E5E5"> the structure of this</font>

269
00:13:43,110 --> 00:13:50,250
<font color="#E5E5E5">program is so basically that's a real</font>

270
00:13:47,790 --> 00:13:52,199
<font color="#E5E5E5">demonstration of what you can do with</font>

271
00:13:50,250 --> 00:13:54,720
grammars and you can do<font color="#E5E5E5"> really quickly</font>

272
00:13:52,200 --> 00:13:57,570
<font color="#E5E5E5">so like it took me</font><font color="#CCCCCC"> five minutes to type</font>

273
00:13:54,720 --> 00:14:00,150
<font color="#E5E5E5">this and it's already a working</font>

274
00:13:57,570 --> 00:14:02,540
prototype of<font color="#E5E5E5"> what you can expect of</font>

275
00:14:00,150 --> 00:14:06,090
course<font color="#CCCCCC"> the bigger the language becomes</font>

276
00:14:02,540 --> 00:14:08,459
the more is<font color="#E5E5E5"> your desire to split</font><font color="#CCCCCC"> Perl 6</font>

277
00:14:06,090 --> 00:14:11,970
<font color="#E5E5E5">and a regular</font><font color="#CCCCCC"> expression the</font><font color="#E5E5E5"> part of</font>

278
00:14:08,460 --> 00:14:16,170
this grammar<font color="#CCCCCC"> so what can be done</font><font color="#E5E5E5"> you can</font>

279
00:14:11,970 --> 00:14:20,340
extract these parts of the grammar<font color="#CCCCCC"> to a</font>

280
00:14:16,170 --> 00:14:23,490
separate<font color="#CCCCCC"> class yeah Class A for example</font>

281
00:14:20,340 --> 00:14:27,630
and what you have to<font color="#CCCCCC"> do so</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going</font>

282
00:14:23,490 --> 00:14:30,210
<font color="#CCCCCC">to move this to the</font><font color="#E5E5E5"> methods of this</font>

283
00:14:27,630 --> 00:14:32,490
class and the name<font color="#CCCCCC"> of the method should</font>

284
00:14:30,210 --> 00:14:35,010
<font color="#E5E5E5">be the same so it's method this time</font>

285
00:14:32,490 --> 00:14:39,150
<font color="#E5E5E5">should</font><font color="#CCCCCC"> be the same as the method at the</font>

286
00:14:35,010 --> 00:14:41,460
<font color="#CCCCCC">rule name that is activating this</font><font color="#E5E5E5"> action</font>

287
00:14:39,150 --> 00:14:45,390
<font color="#CCCCCC">so</font><font color="#E5E5E5"> it's variable declaration method</font>

288
00:14:41,460 --> 00:14:49,040
variable the<font color="#CCCCCC"> Declaration and</font><font color="#E5E5E5"> it's just</font>

289
00:14:45,390 --> 00:14:54,270
the<font color="#CCCCCC"> pill</font><font color="#E5E5E5"> code which okay I have these</font>

290
00:14:49,040 --> 00:14:58,110
<font color="#E5E5E5">which does what</font><font color="#CCCCCC"> it did before</font><font color="#E5E5E5"> but you</font>

291
00:14:54,270 --> 00:14:59,340
also will expect something in this info

292
00:14:58,110 --> 00:15:04,460
variable which is passed to<font color="#E5E5E5"> this method</font>

293
00:14:59,340 --> 00:15:08,790
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> I can move the function call</font>

294
00:15:04,460 --> 00:15:11,100
function call action to a separate

295
00:15:08,790 --> 00:15:14,329
method<font color="#E5E5E5"> so I will just remove it from the</font>

296
00:15:11,100 --> 00:15:16,680
grammar<font color="#E5E5E5"> and I will move</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> the</font>

297
00:15:14,330 --> 00:15:19,980
function call<font color="#CCCCCC"> and then when I am passing</font>

298
00:15:16,680 --> 00:15:24,630
<font color="#CCCCCC">the screen I can</font><font color="#E5E5E5"> pass in the named</font>

299
00:15:19,980 --> 00:15:27,600
attribute actions<font color="#CCCCCC"> these class continue</font>

300
00:15:24,630 --> 00:15:28,860
actions and if everything<font color="#E5E5E5"> is</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you</font>

301
00:15:27,600 --> 00:15:30,030
will get exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same behavior so</font>

302
00:15:28,860 --> 00:15:31,860
nothing changed

303
00:15:30,030 --> 00:15:33,660
from the user perspective but from<font color="#E5E5E5"> the</font>

304
00:15:31,860 --> 00:15:36,360
perspective<font color="#CCCCCC"> of the developer</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a</font>

305
00:15:33,660 --> 00:15:38,790
separate class with<font color="#CCCCCC"> pill six skill they</font>

306
00:15:36,360 --> 00:15:42,240
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> separate grammar described in the</font>

307
00:15:38,790 --> 00:15:45,329
<font color="#CCCCCC">language and also</font><font color="#E5E5E5"> so I promised you tap</font>

308
00:15:42,240 --> 00:15:48,120
<font color="#CCCCCC">update so basically this dollar slash</font>

309
00:15:45,330 --> 00:15:52,560
variable<font color="#E5E5E5"> you can name it differently</font><font color="#CCCCCC"> you</font>

310
00:15:48,120 --> 00:15:54,450
<font color="#CCCCCC">can</font><font color="#E5E5E5"> just have dollar something</font><font color="#CCCCCC"> I mean</font>

311
00:15:52,560 --> 00:15:57,619
you can type letters there<font color="#E5E5E5"> it will</font>

312
00:15:54,450 --> 00:16:01,440
contain<font color="#E5E5E5"> the</font><font color="#CCCCCC"> information which contains</font>

313
00:15:57,620 --> 00:16:03,900
some information<font color="#CCCCCC"> similar to what we have</font>

314
00:16:01,440 --> 00:16:04,620
here this<font color="#CCCCCC"> parse tree</font><font color="#E5E5E5"> the the fragment</font>

315
00:16:03,900 --> 00:16:06,569
which is passed

316
00:16:04,620 --> 00:16:08,670
<font color="#E5E5E5">at this moment like function</font><font color="#CCCCCC"> cool</font>

317
00:16:06,570 --> 00:16:11,070
variable declaration is passed further

318
00:16:08,670 --> 00:16:13,439
in this<font color="#CCCCCC"> method</font><font color="#E5E5E5"> and you can use it so</font>

319
00:16:11,070 --> 00:16:14,850
<font color="#E5E5E5">basically when you type this you are</font>

320
00:16:13,440 --> 00:16:17,010
<font color="#CCCCCC">referring to</font><font color="#E5E5E5"> this variable you</font><font color="#CCCCCC"> are</font>

321
00:16:14,850 --> 00:16:20,040
taking it like an element from the<font color="#E5E5E5"> hash</font>

322
00:16:17,010 --> 00:16:22,730
<font color="#E5E5E5">and the key for this element is variable</font>

323
00:16:20,040 --> 00:16:27,990
name and on the right<font color="#E5E5E5"> side is the number</font>

324
00:16:22,730 --> 00:16:30,900
this which is selected is a object of<font color="#E5E5E5"> a</font>

325
00:16:27,990 --> 00:16:32,970
grammar class<font color="#E5E5E5"> the</font><font color="#CCCCCC"> so called match object</font>

326
00:16:30,900 --> 00:16:35,040
<font color="#E5E5E5">if you type plus before</font><font color="#CCCCCC"> you will just</font>

327
00:16:32,970 --> 00:16:35,490
<font color="#CCCCCC">ask</font><font color="#E5E5E5"> bill to make a number</font><font color="#CCCCCC"> out of it</font>

328
00:16:35,040 --> 00:16:37,890
somehow

329
00:16:35,490 --> 00:16:39,690
<font color="#CCCCCC">so pill six knows how to convert this</font>

330
00:16:37,890 --> 00:16:41,520
match object to number<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

331
00:16:39,690 --> 00:16:45,380
<font color="#CCCCCC">exactly what</font><font color="#E5E5E5"> we need and actually here</font>

332
00:16:41,520 --> 00:16:48,569
<font color="#E5E5E5">it converts</font><font color="#CCCCCC"> the match object to a string</font>

333
00:16:45,380 --> 00:16:51,360
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> accept</font><font color="#E5E5E5"> it like you can type the</font>

334
00:16:48,570 --> 00:16:54,120
<font color="#E5E5E5">tilde before this but you don't have to</font>

335
00:16:51,360 --> 00:16:58,200
do it<font color="#CCCCCC"> till</font><font color="#E5E5E5"> six</font><font color="#CCCCCC"> we'll we'll do that so</font>

336
00:16:54,120 --> 00:17:02,910
that's that's the short example and if

337
00:16:58,200 --> 00:17:07,230
you<font color="#CCCCCC"> I can also show</font><font color="#E5E5E5"> you so this</font>

338
00:17:02,910 --> 00:17:11,369
github.com /<font color="#E5E5E5"> ash slash lingua is an</font>

339
00:17:07,230 --> 00:17:12,480
example of much bigger<font color="#E5E5E5"> language</font><font color="#CCCCCC"> its uses</font>

340
00:17:11,369 --> 00:17:16,800
the same technique<font color="#CCCCCC"> that I just</font>

341
00:17:12,480 --> 00:17:20,790
demonstrated<font color="#E5E5E5"> what it contained</font><font color="#CCCCCC"> it can</font>

342
00:17:16,800 --> 00:17:24,710
say contains<font color="#E5E5E5"> few files so there's the</font>

343
00:17:20,790 --> 00:17:24,710
grammar<font color="#E5E5E5"> oh my god</font>

344
00:17:25,500 --> 00:17:31,260
yeah you<font color="#CCCCCC"> can go it itself</font><font color="#E5E5E5"> if you have</font>

345
00:17:28,319 --> 00:17:38,220
internet<font color="#CCCCCC"> here but nevertheless it's just</font>

346
00:17:31,260 --> 00:17:42,590
the bigger thing<font color="#CCCCCC"> if for example we go to</font>

347
00:17:38,220 --> 00:17:45,020
the test<font color="#CCCCCC"> dr3 of this</font>

348
00:17:42,590 --> 00:17:48,289
I created some tests for<font color="#CCCCCC"> example there's</font>

349
00:17:45,020 --> 00:17:50,120
if if statement implementing<font color="#CCCCCC"> this</font>

350
00:17:48,289 --> 00:17:52,640
language<font color="#E5E5E5"> and</font><font color="#CCCCCC"> again you can find it in</font>

351
00:17:50,120 --> 00:17:54,529
the actions<font color="#E5E5E5"> and in the grammar class how</font>

352
00:17:52,640 --> 00:17:56,779
I do it it's really<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> really easy</font>

353
00:17:54,529 --> 00:17:58,130
<font color="#E5E5E5">just step by</font><font color="#CCCCCC"> step to increase</font><font color="#E5E5E5"> your</font>

354
00:17:56,779 --> 00:17:59,840
language starting with the example I

355
00:17:58,130 --> 00:18:02,690
demonstrated earlier<font color="#E5E5E5"> and finally you</font>

356
00:17:59,840 --> 00:18:04,639
<font color="#E5E5E5">will</font><font color="#CCCCCC"> have to deal from how with for</font>

357
00:18:02,690 --> 00:18:07,220
<font color="#CCCCCC">example</font><font color="#E5E5E5"> functions so we</font><font color="#CCCCCC"> have to put the</font>

358
00:18:04,640 --> 00:18:09,620
function<font color="#CCCCCC"> to</font><font color="#E5E5E5"> so you have to understand</font>

359
00:18:07,220 --> 00:18:11,809
<font color="#E5E5E5">that this is a definitional function you</font>

360
00:18:09,620 --> 00:18:16,399
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to put the past</font><font color="#CCCCCC"> three somewhere and</font>

361
00:18:11,809 --> 00:18:21,799
then you have to<font color="#E5E5E5"> evaluate it</font><font color="#CCCCCC"> so if you</font>

362
00:18:16,399 --> 00:18:24,379
will on that<font color="#E5E5E5"> github</font><font color="#CCCCCC"> link</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you see</font>

363
00:18:21,799 --> 00:18:28,250
there's the grammar<font color="#E5E5E5"> and my top rule</font>

364
00:18:24,380 --> 00:18:30,350
states<font color="#E5E5E5"> that it's not only statements</font>

365
00:18:28,250 --> 00:18:33,770
it's only<font color="#CCCCCC"> also can be a comment for</font>

366
00:18:30,350 --> 00:18:36,408
example and<font color="#E5E5E5"> also I'm clearly separate</font>

367
00:18:33,770 --> 00:18:38,980
and different type<font color="#CCCCCC"> of statements just to</font>

368
00:18:36,409 --> 00:18:45,950
make the<font color="#CCCCCC"> rest</font><font color="#E5E5E5"> of the grammar simpler</font>

369
00:18:38,980 --> 00:18:48,200
yeah so so it means that<font color="#E5E5E5"> instead of so I</font>

370
00:18:45,950 --> 00:18:50,419
can have the<font color="#E5E5E5"> vertical bar means or so</font>

371
00:18:48,200 --> 00:18:51,230
it's either<font color="#E5E5E5"> this or these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> these but</font>

372
00:18:50,419 --> 00:18:54,169
inside

373
00:18:51,230 --> 00:18:58,880
<font color="#E5E5E5">remember on the previous screen I showed</font>

374
00:18:54,169 --> 00:19:00,830
you the this thing<font color="#E5E5E5"> dollar something so</font>

375
00:18:58,880 --> 00:19:04,279
when you are inside an action or inside

376
00:19:00,830 --> 00:19:06,230
the<font color="#E5E5E5"> grammar rule you can refer</font><font color="#CCCCCC"> to one of</font>

377
00:19:04,279 --> 00:19:09,080
<font color="#E5E5E5">those alternatives using the single name</font>

378
00:19:06,230 --> 00:19:11,299
<font color="#E5E5E5">so it's much much easier than you don't</font>

379
00:19:09,080 --> 00:19:14,510
<font color="#E5E5E5">have to create like if this is a</font>

380
00:19:11,299 --> 00:19:16,760
statement<font color="#E5E5E5"> if it's assignment</font><font color="#CCCCCC"> if it's</font>

381
00:19:14,510 --> 00:19:18,350
something so yeah<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay the final</font>

382
00:19:16,760 --> 00:19:21,980
<font color="#E5E5E5">thing I would</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> recommend you to</font>

383
00:19:18,350 --> 00:19:24,260
<font color="#CCCCCC">read this book</font><font color="#E5E5E5"> it contains a lot</font><font color="#CCCCCC"> of</font>

384
00:19:21,980 --> 00:19:26,270
examples<font color="#E5E5E5"> of how</font><font color="#CCCCCC"> you can really use</font>

385
00:19:24,260 --> 00:19:28,850
grammars<font color="#E5E5E5"> and also there's something in</font>

386
00:19:26,270 --> 00:19:30,260
this book written by me<font color="#E5E5E5"> you can buy</font>

387
00:19:28,850 --> 00:19:33,620
these books downstairs of the pill booth

388
00:19:30,260 --> 00:19:35,539
<font color="#E5E5E5">so thanks a</font><font color="#CCCCCC"> lot for listening I hope it</font>

389
00:19:33,620 --> 00:19:38,439
was interesting<font color="#E5E5E5"> and yeah success was</font>

390
00:19:35,539 --> 00:19:56,710
<font color="#E5E5E5">politics and languages</font>

391
00:19:38,440 --> 00:20:00,970
I will take picture so I<font color="#E5E5E5"> don't yeah yeah</font>

392
00:19:56,710 --> 00:20:03,400
I would<font color="#CCCCCC"> I would recommend to you to</font><font color="#E5E5E5"> what</font>

393
00:20:00,970 --> 00:20:05,730
type of<font color="#E5E5E5"> gramma is it ll one this one you</font>

394
00:20:03,400 --> 00:20:05,730
<font color="#E5E5E5">mean right</font>

395
00:20:08,070 --> 00:20:13,570
that's the question<font color="#CCCCCC"> to developers of all</font>

396
00:20:10,240 --> 00:20:16,360
<font color="#E5E5E5">more</font><font color="#CCCCCC"> than done to me</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> I think</font>

397
00:20:13,570 --> 00:20:18,040
<font color="#E5E5E5">that in the documentation</font><font color="#CCCCCC"> of l6</font><font color="#E5E5E5"> you</font>

398
00:20:16,360 --> 00:20:22,500
don't have the<font color="#E5E5E5"> explicit answer to this</font>

399
00:20:18,040 --> 00:20:38,889
question if I create so basically yeah

400
00:20:22,500 --> 00:20:40,570
if it satisfies<font color="#E5E5E5"> yes yes</font><font color="#CCCCCC"> it's when you're</font>

401
00:20:38,890 --> 00:20:43,240
using the rule he would if he isn't

402
00:20:40,570 --> 00:20:44,679
token<font color="#CCCCCC"> that it's not</font><font color="#E5E5E5"> allowed but you</font><font color="#CCCCCC"> also</font>

403
00:20:43,240 --> 00:20:48,310
can<font color="#CCCCCC"> redefined</font>

404
00:20:44,680 --> 00:20:51,670
so that's the<font color="#E5E5E5"> default in rule called WS</font>

405
00:20:48,310 --> 00:20:53,620
white space<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> explaining what</font>

406
00:20:51,670 --> 00:20:55,450
white space is so it's not just<font color="#CCCCCC"> a space</font>

407
00:20:53,620 --> 00:20:56,860
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> like new I'm whatever</font><font color="#E5E5E5"> and you can</font>

408
00:20:55,450 --> 00:21:03,930
redefine it for example<font color="#CCCCCC"> to implement</font>

409
00:20:56,860 --> 00:21:11,219
comments yeah<font color="#CCCCCC"> okay then thanks a lot</font>

410
00:21:03,930 --> 00:21:11,220
[Applause]

