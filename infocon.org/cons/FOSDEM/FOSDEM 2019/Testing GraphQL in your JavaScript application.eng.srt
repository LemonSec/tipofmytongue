1
00:00:05,070 --> 00:00:11,490
we start is somebody here<font color="#E5E5E5"> and not</font>

2
00:00:06,900 --> 00:00:13,799
familiar<font color="#CCCCCC"> ready to cook</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> that's like</font>

3
00:00:11,490 --> 00:00:16,200
half of you<font color="#CCCCCC"> okay</font>

4
00:00:13,799 --> 00:00:18,509
<font color="#E5E5E5">I will tell maybe a little bit about</font>

5
00:00:16,200 --> 00:00:21,359
<font color="#CCCCCC">Groff grill so Groff quails a query</font>

6
00:00:18,510 --> 00:00:23,550
<font color="#E5E5E5">language for</font><font color="#CCCCCC"> your data collections it's</font>

7
00:00:21,359 --> 00:00:25,769
a little bit different from like

8
00:00:23,550 --> 00:00:27,689
collecting data from<font color="#E5E5E5"> rest IPRs rest</font><font color="#CCCCCC"> api</font>

9
00:00:25,769 --> 00:00:29,580
is usually of a single<font color="#CCCCCC"> endpoint with</font>

10
00:00:27,689 --> 00:00:31,679
like fixed data structures so if you

11
00:00:29,580 --> 00:00:33,780
want<font color="#E5E5E5"> to get like a collection of your</font>

12
00:00:31,679 --> 00:00:37,410
products or<font color="#CCCCCC"> your users you're going to</font>

13
00:00:33,780 --> 00:00:39,930
<font color="#E5E5E5">access one REST API endpoint and in the</font>

14
00:00:37,410 --> 00:00:41,459
case<font color="#E5E5E5"> of Kafka well you can combine</font><font color="#CCCCCC"> all</font>

15
00:00:39,930 --> 00:00:44,039
those collections<font color="#E5E5E5"> into one single</font>

16
00:00:41,460 --> 00:00:46,230
endpoints<font color="#CCCCCC"> that there's flexible data</font>

17
00:00:44,039 --> 00:00:47,789
structures so we're going<font color="#E5E5E5"> to look at</font>

18
00:00:46,230 --> 00:00:49,550
some graph<font color="#E5E5E5"> coil queries later for the</font>

19
00:00:47,789 --> 00:00:52,199
people<font color="#CCCCCC"> that aren't</font><font color="#E5E5E5"> familiar with this</font>

20
00:00:49,550 --> 00:00:57,120
<font color="#E5E5E5">throughout these slides</font><font color="#CCCCCC"> I will use an</font>

21
00:00:52,199 --> 00:01:01,230
example<font color="#CCCCCC"> with react</font><font color="#E5E5E5"> people are using he</font>

22
00:00:57,120 --> 00:01:05,570
react or<font color="#CCCCCC"> okay that's better okay so I</font>

23
00:01:01,230 --> 00:01:08,310
will<font color="#E5E5E5"> use</font><font color="#CCCCCC"> reactor</font><font color="#E5E5E5"> most in code examples</font>

24
00:01:05,570 --> 00:01:10,258
so it's always an important thing to add

25
00:01:08,310 --> 00:01:11,610
testing to your to<font color="#CCCCCC"> your code especially</font>

26
00:01:10,259 --> 00:01:14,580
<font color="#CCCCCC">when</font><font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> JavaScript application</font>

27
00:01:11,610 --> 00:01:16,170
<font color="#CCCCCC">without a dynamic with a dynamic</font><font color="#E5E5E5"> type</font>

28
00:01:14,580 --> 00:01:18,450
system not like something like

29
00:01:16,170 --> 00:01:20,939
typescript<font color="#E5E5E5"> then it's really important to</font>

30
00:01:18,450 --> 00:01:23,759
have<font color="#E5E5E5"> testing scale testing scheduled</font>

31
00:01:20,939 --> 00:01:26,579
into your development process<font color="#CCCCCC"> so this is</font>

32
00:01:23,759 --> 00:01:28,280
a meme about<font color="#CCCCCC"> a guy from Futurama was</font>

33
00:01:26,579 --> 00:01:30,929
wondering if<font color="#CCCCCC"> its code is working or just</font>

34
00:01:28,280 --> 00:01:32,820
<font color="#E5E5E5">his</font><font color="#CCCCCC"> tester broken</font><font color="#E5E5E5"> like the people in</font>

35
00:01:30,930 --> 00:01:35,640
<font color="#E5E5E5">here that are using they're having like</font>

36
00:01:32,820 --> 00:01:38,130
test coverage levels inside<font color="#E5E5E5"> the</font>

37
00:01:35,640 --> 00:01:40,020
deployment<font color="#CCCCCC"> phase we'll probably know you</font>

38
00:01:38,130 --> 00:01:42,119
need to<font color="#CCCCCC"> have working</font><font color="#E5E5E5"> tests and tests</font>

39
00:01:40,020 --> 00:01:45,090
above a certain coverage to<font color="#E5E5E5"> make sure</font>

40
00:01:42,119 --> 00:01:48,840
your code<font color="#E5E5E5"> is</font><font color="#CCCCCC"> working or just your tests</font>

41
00:01:45,090 --> 00:01:51,990
<font color="#E5E5E5">are really wrong so</font><font color="#CCCCCC"> boom I my name is</font>

42
00:01:48,840 --> 00:01:55,619
<font color="#E5E5E5">Rory I I'm from Amsterdam I work with</font>

43
00:01:51,990 --> 00:01:57,839
JavaScript a lot both professionally at

44
00:01:55,619 --> 00:01:59,939
the city<font color="#E5E5E5"> of Amsterdam but also as</font>

45
00:01:57,840 --> 00:02:03,060
conferences and meetups<font color="#E5E5E5"> or workshops a</font>

46
00:01:59,939 --> 00:02:06,658
house about react you can find me on

47
00:02:03,060 --> 00:02:09,360
<font color="#CCCCCC">Twitter as well</font><font color="#E5E5E5"> it's epic a tech team</font>

48
00:02:06,659 --> 00:02:12,210
and then I tweet a lot about JavaScript

49
00:02:09,360 --> 00:02:15,120
or react react native and<font color="#CCCCCC"> growth well as</font>

50
00:02:12,210 --> 00:02:17,430
well this presentation is about for

51
00:02:15,120 --> 00:02:18,450
everyone that's using react applications

52
00:02:17,430 --> 00:02:21,750
<font color="#CCCCCC">JavaScript</font>

53
00:02:18,450 --> 00:02:25,019
or maybe<font color="#CCCCCC"> broth</font><font color="#E5E5E5"> well I will show both how</font>

54
00:02:21,750 --> 00:02:27,209
<font color="#E5E5E5">to test you have script applications the</font>

55
00:02:25,020 --> 00:02:30,209
juice graph quail and graph<font color="#E5E5E5"> quail</font>

56
00:02:27,209 --> 00:02:32,810
queries invitations<font color="#E5E5E5"> out of the box</font><font color="#CCCCCC"> so if</font>

57
00:02:30,209 --> 00:02:35,069
we small look<font color="#E5E5E5"> at this testing pyramid</font>

58
00:02:32,810 --> 00:02:37,319
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is like the traditional testing</font>

59
00:02:35,069 --> 00:02:40,260
pyramid with the<font color="#E5E5E5"> unit tests on the</font>

60
00:02:37,319 --> 00:02:41,549
bottom<font color="#E5E5E5"> the integration tests</font><font color="#CCCCCC"> in the</font>

61
00:02:40,260 --> 00:02:44,790
middle and end-to-end tests in the end

62
00:02:41,550 --> 00:02:47,370
and this also like in level of

63
00:02:44,790 --> 00:02:49,590
<font color="#E5E5E5">complexity unit tests</font><font color="#CCCCCC"> are fairly</font><font color="#E5E5E5"> easy to</font>

64
00:02:47,370 --> 00:02:51,090
<font color="#E5E5E5">create integration tests are a bit</font>

65
00:02:49,590 --> 00:02:53,670
harder because you're<font color="#E5E5E5"> not testing single</font>

66
00:02:51,090 --> 00:02:55,680
components or single pieces of code but

67
00:02:53,670 --> 00:02:57,660
how code connects<font color="#E5E5E5"> with each other and</font>

68
00:02:55,680 --> 00:02:59,970
end-to-end<font color="#CCCCCC"> test is</font><font color="#E5E5E5"> usually the</font><font color="#CCCCCC"> most</font>

69
00:02:57,660 --> 00:03:02,579
<font color="#E5E5E5">difficult one as you would usually mark</font>

70
00:02:59,970 --> 00:03:05,400
a browser or use something<font color="#CCCCCC"> like Cyprus</font>

71
00:03:02,580 --> 00:03:07,470
<font color="#CCCCCC">to do it and</font><font color="#E5E5E5"> really see</font><font color="#CCCCCC"> how user will</font>

72
00:03:05,400 --> 00:03:10,830
<font color="#E5E5E5">interact with your application from page</font>

73
00:03:07,470 --> 00:03:12,359
to page<font color="#CCCCCC"> and so this will focus</font><font color="#E5E5E5"> mostly on</font>

74
00:03:10,830 --> 00:03:13,799
unit<font color="#E5E5E5"> tests because it's a bit hard to</font>

75
00:03:12,360 --> 00:03:17,120
explain<font color="#E5E5E5"> integration and end-to-end</font>

76
00:03:13,799 --> 00:03:19,920
testing one one<font color="#CCCCCC"> single presentation</font>

77
00:03:17,120 --> 00:03:21,989
<font color="#E5E5E5">before to have some criticals</font><font color="#CCCCCC"> before we</font>

78
00:03:19,920 --> 00:03:24,059
have<font color="#E5E5E5"> some</font><font color="#CCCCCC"> criticals there's</font><font color="#E5E5E5"> a new</font>

79
00:03:21,989 --> 00:03:25,890
approach<font color="#E5E5E5"> for testing is usually</font>

80
00:03:24,060 --> 00:03:30,690
something like<font color="#E5E5E5"> this</font>

81
00:03:25,890 --> 00:03:34,140
it's like<font color="#CCCCCC"> upside-down diamonds or what</font>

82
00:03:30,690 --> 00:03:35,310
is it a<font color="#E5E5E5"> five-point polygon and as you</font>

83
00:03:34,140 --> 00:03:37,410
can see unit tests<font color="#E5E5E5"> are on the bottom</font>

84
00:03:35,310 --> 00:03:40,049
<font color="#E5E5E5">integration tests are in the middle</font>

85
00:03:37,410 --> 00:03:42,329
end-to-end tests are on top making<font color="#E5E5E5"> enter</font>

86
00:03:40,049 --> 00:03:44,790
in tests and<font color="#E5E5E5"> integrations tests much</font>

87
00:03:42,329 --> 00:03:47,070
<font color="#E5E5E5">more important</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> like I said we will</font>

88
00:03:44,790 --> 00:03:48,510
<font color="#E5E5E5">focus on unit tests for now and maybe if</font>

89
00:03:47,070 --> 00:03:51,030
we<font color="#E5E5E5"> have time for questions we can</font>

90
00:03:48,510 --> 00:03:55,530
<font color="#CCCCCC">discuss how to do</font><font color="#E5E5E5"> integration tests as</font>

91
00:03:51,030 --> 00:03:58,140
well so why is we to write<font color="#E5E5E5"> tests</font><font color="#CCCCCC"> like I</font>

92
00:03:55,530 --> 00:04:01,049
<font color="#E5E5E5">said</font><font color="#CCCCCC"> before tests are important to see</font>

93
00:03:58,140 --> 00:04:02,578
if your code<font color="#CCCCCC"> is stable</font><font color="#E5E5E5"> and usually it's</font>

94
00:04:01,049 --> 00:04:06,750
an indication if your code<font color="#E5E5E5"> is working as</font>

95
00:04:02,579 --> 00:04:09,359
<font color="#E5E5E5">well so you will test if your code will</font>

96
00:04:06,750 --> 00:04:11,940
<font color="#CCCCCC">work as expected so</font><font color="#E5E5E5"> usually when you</font>

97
00:04:09,359 --> 00:04:13,799
have<font color="#E5E5E5"> a project</font><font color="#CCCCCC"> with good with good</font>

98
00:04:11,940 --> 00:04:16,289
testing<font color="#CCCCCC"> sides</font><font color="#E5E5E5"> you can see all the</font>

99
00:04:13,799 --> 00:04:18,870
functions from the project<font color="#E5E5E5"> by just</font>

100
00:04:16,289 --> 00:04:21,029
<font color="#E5E5E5">looking at descriptions of the tests and</font>

101
00:04:18,870 --> 00:04:23,580
you<font color="#CCCCCC"> would also see if</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> even</font>

102
00:04:21,029 --> 00:04:27,150
<font color="#E5E5E5">handle errors and educators correctly</font>

103
00:04:23,580 --> 00:04:29,789
and this<font color="#E5E5E5"> all</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> also something I will</font>

104
00:04:27,150 --> 00:04:31,260
show<font color="#E5E5E5"> an</font><font color="#CCCCCC"> example and you will also</font><font color="#E5E5E5"> test</font>

105
00:04:29,789 --> 00:04:33,120
your syntax a single<font color="#E5E5E5"> correct</font>

106
00:04:31,260 --> 00:04:35,940
especially with JavaScript<font color="#E5E5E5"> as we have a</font>

107
00:04:33,120 --> 00:04:37,890
dynamic type system<font color="#E5E5E5"> unless you use</font>

108
00:04:35,940 --> 00:04:40,380
typescript<font color="#CCCCCC"> or maybe flow if you're using</font>

109
00:04:37,890 --> 00:04:41,969
react<font color="#E5E5E5"> you're not always sure if a</font>

110
00:04:40,380 --> 00:04:44,460
<font color="#CCCCCC">variable you're pulsing</font><font color="#E5E5E5"> always is</font>

111
00:04:41,970 --> 00:04:47,730
integral or a float or<font color="#CCCCCC"> abilene it could</font>

112
00:04:44,460 --> 00:04:49,770
be the case that<font color="#CCCCCC"> your integer is instead</font>

113
00:04:47,730 --> 00:04:52,110
<font color="#E5E5E5">of float or you're expecting a string</font>

114
00:04:49,770 --> 00:04:54,450
and sending an object<font color="#E5E5E5"> so usually if you</font>

115
00:04:52,110 --> 00:04:56,880
have unit tests<font color="#E5E5E5"> in</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> you will notice</font>

116
00:04:54,450 --> 00:04:58,950
when you're testing<font color="#CCCCCC"> that your code isn't</font>

117
00:04:56,880 --> 00:05:02,310
working as predicted<font color="#CCCCCC"> because one of</font><font color="#E5E5E5"> your</font>

118
00:04:58,950 --> 00:05:03,680
variables<font color="#E5E5E5"> has a different syntax for</font>

119
00:05:02,310 --> 00:05:06,030
testing<font color="#CCCCCC"> JavaScript there are a lot of</font>

120
00:05:03,680 --> 00:05:07,920
frameworks<font color="#E5E5E5"> or applications that are</font>

121
00:05:06,030 --> 00:05:11,340
available<font color="#E5E5E5"> already</font><font color="#CCCCCC"> I will mention some</font>

122
00:05:07,920 --> 00:05:14,280
and maybe if some people<font color="#E5E5E5"> will recognize</font>

123
00:05:11,340 --> 00:05:17,520
them<font color="#E5E5E5"> at first we have mojo which is a</font>

124
00:05:14,280 --> 00:05:19,020
<font color="#E5E5E5">JavaScript test framework people</font><font color="#CCCCCC"> use the</font>

125
00:05:17,520 --> 00:05:21,450
lot when they are running<font color="#CCCCCC"> nodejs</font>

126
00:05:19,020 --> 00:05:25,549
applications or want to test something

127
00:05:21,450 --> 00:05:28,140
right in the browser<font color="#E5E5E5"> we also have enzyme</font>

128
00:05:25,550 --> 00:05:30,480
which<font color="#CCCCCC"> is a JavaScript testing utility</font>

129
00:05:28,140 --> 00:05:34,380
usually for react and simulates the

130
00:05:30,480 --> 00:05:36,950
react demand react components and this

131
00:05:34,380 --> 00:05:39,300
is a much<font color="#E5E5E5"> more advanced version of the</font>

132
00:05:36,950 --> 00:05:41,880
<font color="#E5E5E5">code level</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> our using the react</font>

133
00:05:39,300 --> 00:05:45,270
test<font color="#E5E5E5"> to tails whenever in examples and</font>

134
00:05:41,880 --> 00:05:47,880
enzyme is a more advanced version<font color="#CCCCCC"> of</font>

135
00:05:45,270 --> 00:05:50,190
this<font color="#E5E5E5"> one iosef</font><font color="#CCCCCC"> jar which is in a certain</font>

136
00:05:47,880 --> 00:05:53,310
<font color="#E5E5E5">library so if you expect stuff to be</font>

137
00:05:50,190 --> 00:05:55,770
equal to<font color="#CCCCCC"> each other</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> not equal</font><font color="#E5E5E5"> or you</font>

138
00:05:53,310 --> 00:05:57,480
want to know if one<font color="#E5E5E5"> of your</font><font color="#CCCCCC"> actions has</font>

139
00:05:55,770 --> 00:05:59,780
been called over<font color="#E5E5E5"> an</font><font color="#CCCCCC"> API has been called</font>

140
00:05:57,480 --> 00:06:02,640
<font color="#E5E5E5">then you can use junctions for that and</font>

141
00:05:59,780 --> 00:06:05,280
in the end<font color="#E5E5E5"> we have just which is sort of</font>

142
00:06:02,640 --> 00:06:07,979
into the<font color="#E5E5E5"> box with react and it was</font>

143
00:06:05,280 --> 00:06:10,349
created by Facebook and the examples are

144
00:06:07,980 --> 00:06:11,670
will<font color="#CCCCCC"> show our using just now you also</font>

145
00:06:10,350 --> 00:06:14,580
have stuff<font color="#CCCCCC"> like I mentioned before like</font>

146
00:06:11,670 --> 00:06:16,680
<font color="#E5E5E5">Cypress and</font><font color="#CCCCCC"> Cypress it runs</font><font color="#E5E5E5"> in the</font>

147
00:06:14,580 --> 00:06:18,750
<font color="#E5E5E5">browser and is it mocks the browser</font>

148
00:06:16,680 --> 00:06:20,430
<font color="#CCCCCC">behavioral puppeteer</font><font color="#E5E5E5"> and then you can</font>

149
00:06:18,750 --> 00:06:22,830
see how<font color="#E5E5E5"> people click to</font><font color="#CCCCCC"> the application</font>

150
00:06:20,430 --> 00:06:24,810
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> far beyond unit testing we</font>

151
00:06:22,830 --> 00:06:26,940
will discuss today<font color="#CCCCCC"> it might be good to</font>

152
00:06:24,810 --> 00:06:29,310
<font color="#E5E5E5">know if your I want to integrate testing</font>

153
00:06:26,940 --> 00:06:33,150
in your<font color="#E5E5E5"> project</font><font color="#CCCCCC"> so we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> look</font>

154
00:06:29,310 --> 00:06:35,760
at an<font color="#CCCCCC"> example that</font><font color="#E5E5E5"> uses graph</font><font color="#CCCCCC"> QL</font><font color="#E5E5E5"> and I'm</font>

155
00:06:33,150 --> 00:06:37,799
<font color="#E5E5E5">gonna show the schema first so we have</font>

156
00:06:35,760 --> 00:06:40,610
<font color="#CCCCCC">the schema with a product review and</font>

157
00:06:37,800 --> 00:06:44,390
offer<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see the review and</font>

158
00:06:40,610 --> 00:06:46,040
<font color="#CCCCCC">offer our dependence of products</font>

159
00:06:44,390 --> 00:06:48,050
for people<font color="#CCCCCC"> that aren't familiar with</font>

160
00:06:46,040 --> 00:06:50,240
<font color="#CCCCCC">golf quell this scheme has the basis of</font>

161
00:06:48,050 --> 00:06:52,210
<font color="#E5E5E5">your application and we're going to find</font>

162
00:06:50,240 --> 00:06:55,190
each type like we would define our

163
00:06:52,210 --> 00:06:57,650
database scheme in example so all the

164
00:06:55,190 --> 00:07:00,110
<font color="#E5E5E5">variables will have this</font><font color="#CCCCCC"> format although</font>

165
00:06:57,650 --> 00:07:01,690
<font color="#CCCCCC">the IDS who always be integral tied as</font>

166
00:07:00,110 --> 00:07:05,420
well as with strings and<font color="#E5E5E5"> so forth and</font>

167
00:07:01,690 --> 00:07:07,370
the review and offer types are also

168
00:07:05,420 --> 00:07:10,490
described and linked<font color="#E5E5E5"> to the product</font><font color="#CCCCCC"> type</font>

169
00:07:07,370 --> 00:07:13,130
<font color="#E5E5E5">so throughout the entire application we</font>

170
00:07:10,490 --> 00:07:14,900
have a real clear idea<font color="#E5E5E5"> and what</font>

171
00:07:13,130 --> 00:07:16,670
<font color="#CCCCCC">structure data will be so we don't</font>

172
00:07:14,900 --> 00:07:19,340
really<font color="#E5E5E5"> have to test anymore</font>

173
00:07:16,670 --> 00:07:23,000
if<font color="#E5E5E5"> we're thumbnail really is a string or</font>

174
00:07:19,340 --> 00:07:24,799
it<font color="#CCCCCC"> actually could be</font><font color="#E5E5E5"> like object and the</font>

175
00:07:23,000 --> 00:07:27,800
right you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> two other types I've</font>

176
00:07:24,800 --> 00:07:29,570
defined in the schema<font color="#E5E5E5"> one is query we're</font>

177
00:07:27,800 --> 00:07:32,180
gonna query<font color="#CCCCCC"> two things</font><font color="#E5E5E5"> like the products</font>

178
00:07:29,570 --> 00:07:34,550
<font color="#E5E5E5">altogether and a product separately and</font>

179
00:07:32,180 --> 00:07:37,550
we also have a<font color="#E5E5E5"> mutation where we will</font>

180
00:07:34,550 --> 00:07:39,740
add an offer to a<font color="#E5E5E5"> product so this is if</font>

181
00:07:37,550 --> 00:07:41,270
<font color="#E5E5E5">we for example like an Amazon sort of</font>

182
00:07:39,740 --> 00:07:43,720
application<font color="#CCCCCC"> where</font><font color="#E5E5E5"> your products and</font>

183
00:07:41,270 --> 00:07:49,330
products are<font color="#CCCCCC"> offered by multiple people</font>

184
00:07:43,720 --> 00:07:49,330
<font color="#E5E5E5">so I'm going</font><font color="#CCCCCC"> to see if I can switch</font><font color="#E5E5E5"> that</font>

185
00:07:49,990 --> 00:07:55,570
yes so you<font color="#E5E5E5"> will have to code for</font><font color="#CCCCCC"> our</font>

186
00:07:52,880 --> 00:07:55,570
<font color="#CCCCCC">projects</font>

187
00:08:21,130 --> 00:08:25,480
<font color="#E5E5E5">yes so the application we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

188
00:08:22,900 --> 00:08:27,640
test<font color="#E5E5E5"> is this one so we have an offer</font>

189
00:08:25,480 --> 00:08:30,070
that's<font color="#E5E5E5"> way for product it's this guy's a</font>

190
00:08:27,640 --> 00:08:33,159
blue<font color="#E5E5E5"> t-shirts and it's offered by three</font>

191
00:08:30,070 --> 00:08:37,960
companies<font color="#E5E5E5"> and we can add offers to this</font>

192
00:08:33,159 --> 00:08:41,829
one so if we want to<font color="#E5E5E5"> add a reseller</font><font color="#CCCCCC"> with</font>

193
00:08:37,960 --> 00:08:45,040
a<font color="#CCCCCC"> prize we can add</font><font color="#E5E5E5"> it like this and</font><font color="#CCCCCC"> we</font>

194
00:08:41,830 --> 00:08:46,750
<font color="#CCCCCC">see</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> new resellers</font><font color="#E5E5E5"> edit with the</font>

195
00:08:45,040 --> 00:08:49,900
<font color="#CCCCCC">prize and</font><font color="#E5E5E5"> this all works through our</font>

196
00:08:46,750 --> 00:08:52,540
graphic we have schema that<font color="#E5E5E5"> we have</font>

197
00:08:49,900 --> 00:08:57,010
<font color="#CCCCCC">described here so this is the entry</font>

198
00:08:52,540 --> 00:08:58,810
point<font color="#CCCCCC"> of replication and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> page you</font>

199
00:08:57,010 --> 00:09:00,990
just<font color="#E5E5E5"> saw was</font><font color="#CCCCCC"> the products page</font><font color="#E5E5E5"> showing</font>

200
00:08:58,810 --> 00:09:04,060
an<font color="#CCCCCC"> overview the</font><font color="#E5E5E5"> products we have and</font>

201
00:09:00,990 --> 00:09:06,880
below you can see there's a form

202
00:09:04,060 --> 00:09:09,969
component right<font color="#CCCCCC"> here and of lettuce</font><font color="#E5E5E5"> at</font>

203
00:09:06,880 --> 00:09:13,260
the offer to the<font color="#E5E5E5"> to the product and the</font>

204
00:09:09,970 --> 00:09:13,260
form component is right here

205
00:09:20,090 --> 00:09:24,560
yes<font color="#E5E5E5"> like I said before we have a query</font>

206
00:09:23,240 --> 00:09:26,900
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we get to the product so the</font>

207
00:09:24,560 --> 00:09:29,660
<font color="#E5E5E5">overview just saw</font><font color="#CCCCCC"> of all the products</font>

208
00:09:26,900 --> 00:09:31,880
with<font color="#E5E5E5"> the forms</font><font color="#CCCCCC"> we could retrieve it by</font>

209
00:09:29,660 --> 00:09:34,630
querying<font color="#E5E5E5"> all the products and in</font>

210
00:09:31,880 --> 00:09:38,590
<font color="#CCCCCC">mutation so adding</font><font color="#E5E5E5"> another offer to</font><font color="#CCCCCC"> form</font>

211
00:09:34,630 --> 00:09:41,210
was done by this graph<font color="#CCCCCC"> coiled mutation</font>

212
00:09:38,590 --> 00:09:43,580
if we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> test this component then</font>

213
00:09:41,210 --> 00:09:44,870
there are there<font color="#E5E5E5"> multiple options like I</font>

214
00:09:43,580 --> 00:09:46,400
said before we can you have the

215
00:09:44,870 --> 00:09:48,200
integration<font color="#E5E5E5"> test the unit test or the</font>

216
00:09:46,400 --> 00:09:51,050
<font color="#E5E5E5">end-to-end test and we're going to see</font>

217
00:09:48,200 --> 00:09:52,910
how the in 20s will work testing

218
00:09:51,050 --> 00:09:56,329
<font color="#E5E5E5">Rothwell is a little bit different than</font>

219
00:09:52,910 --> 00:09:57,860
<font color="#CCCCCC">just testing react components so as you</font>

220
00:09:56,330 --> 00:09:59,780
could see<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we just want to test the</font>

221
00:09:57,860 --> 00:10:01,820
product<font color="#CCCCCC"> compile the</font><font color="#E5E5E5"> products component</font>

222
00:09:59,780 --> 00:10:04,880
then<font color="#E5E5E5"> we would have done something</font><font color="#CCCCCC"> like</font>

223
00:10:01,820 --> 00:10:08,240
<font color="#CCCCCC">this we use the react test renderer to</font>

224
00:10:04,880 --> 00:10:10,640
see if the component renders<font color="#E5E5E5"> however</font>

225
00:10:08,240 --> 00:10:14,540
this<font color="#E5E5E5"> will give you an error as we were</font>

226
00:10:10,640 --> 00:10:16,340
missing<font color="#CCCCCC"> the whole graph quelle set up so</font>

227
00:10:14,540 --> 00:10:23,540
we somehow<font color="#CCCCCC"> we have to include</font><font color="#E5E5E5"> to graph</font>

228
00:10:16,340 --> 00:10:25,430
<font color="#CCCCCC">coil</font><font color="#E5E5E5"> setup as you can see here yes</font>

229
00:10:23,540 --> 00:10:28,099
<font color="#CCCCCC">you're in our index file with a pull up</font>

230
00:10:25,430 --> 00:10:31,430
provider and<font color="#CCCCCC"> Apollo lets you edit graph</font>

231
00:10:28,100 --> 00:10:33,800
<font color="#CCCCCC">quell to your project</font><font color="#E5E5E5"> and we have a</font>

232
00:10:31,430 --> 00:10:36,979
<font color="#E5E5E5">Apollo client setup which</font><font color="#CCCCCC"> is our glove</font>

233
00:10:33,800 --> 00:10:39,140
<font color="#E5E5E5">quell server and we're also we wrapped</font>

234
00:10:36,980 --> 00:10:41,180
our products component inside<font color="#E5E5E5"> this</font>

235
00:10:39,140 --> 00:10:43,400
Apollo provider with Apollo<font color="#E5E5E5"> client</font>

236
00:10:41,180 --> 00:10:45,500
attached to it<font color="#CCCCCC"> so when we're testing the</font>

237
00:10:43,400 --> 00:10:48,230
products component we also need to

238
00:10:45,500 --> 00:10:49,760
include<font color="#CCCCCC"> that graph quell Apollo provided</font>

239
00:10:48,230 --> 00:10:57,500
component otherwise<font color="#CCCCCC"> our</font><font color="#E5E5E5"> test will fail</font>

240
00:10:49,760 --> 00:10:58,850
obviously so this is<font color="#E5E5E5"> something we we can</font>

241
00:10:57,500 --> 00:11:00,920
also<font color="#E5E5E5"> mock it entirely</font>

242
00:10:58,850 --> 00:11:03,350
so<font color="#E5E5E5"> I have a small example where you can</font>

243
00:11:00,920 --> 00:11:05,209
<font color="#CCCCCC">see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> reading or Apollo client in</font>

244
00:11:03,350 --> 00:11:08,630
<font color="#E5E5E5">our test file as well although this</font>

245
00:11:05,210 --> 00:11:11,120
<font color="#E5E5E5">isn't really maintainable and</font><font color="#CCCCCC"> also cause</font>

246
00:11:08,630 --> 00:11:13,370
<font color="#CCCCCC">we're directly including Apollo client</font>

247
00:11:11,120 --> 00:11:16,190
inside our disk files we will<font color="#E5E5E5"> also test</font>

248
00:11:13,370 --> 00:11:17,810
against<font color="#E5E5E5"> real life data so for server is</font>

249
00:11:16,190 --> 00:11:19,400
<font color="#E5E5E5">we're not running or don't have network</font>

250
00:11:17,810 --> 00:11:21,489
<font color="#CCCCCC">connection then your</font><font color="#E5E5E5"> test will</font>

251
00:11:19,400 --> 00:11:24,020
automatically<font color="#E5E5E5"> fail because you can't</font>

252
00:11:21,490 --> 00:11:27,470
check your ski mask and<font color="#E5E5E5"> your queries</font>

253
00:11:24,020 --> 00:11:30,260
against the real<font color="#E5E5E5"> data from the server so</font>

254
00:11:27,470 --> 00:11:32,740
this is<font color="#E5E5E5"> something we also</font><font color="#CCCCCC"> contest with</font>

255
00:11:30,260 --> 00:11:34,810
<font color="#E5E5E5">this</font><font color="#CCCCCC"> behavior so that's why</font><font color="#E5E5E5"> Apple</font>

256
00:11:32,740 --> 00:11:37,390
created the<font color="#CCCCCC"> teamwork</font><font color="#E5E5E5"> provider</font><font color="#CCCCCC"> it's</font>

257
00:11:34,810 --> 00:11:40,689
<font color="#E5E5E5">especially for react components and it</font>

258
00:11:37,390 --> 00:11:43,810
lets you that you<font color="#CCCCCC"> add your</font><font color="#E5E5E5"> schema and</font>

259
00:11:40,690 --> 00:11:45,250
your more queries and mutations<font color="#CCCCCC"> directly</font>

260
00:11:43,810 --> 00:11:48,969
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> components so you can use them</font>

261
00:11:45,250 --> 00:11:50,470
<font color="#E5E5E5">and this way you can you can test</font>

262
00:11:48,970 --> 00:11:52,810
against mock data as<font color="#E5E5E5"> you can see we</font>

263
00:11:50,470 --> 00:11:55,750
insert the mock data to see<font color="#E5E5E5"> if our</font>

264
00:11:52,810 --> 00:11:58,390
project<font color="#E5E5E5"> is working fine and you can</font><font color="#CCCCCC"> see</font>

265
00:11:55,750 --> 00:12:00,970
or products component is wrapped inside

266
00:11:58,390 --> 00:12:03,699
the mock provider which is<font color="#E5E5E5"> basically the</font>

267
00:12:00,970 --> 00:12:08,530
mock version of the Apollo provider<font color="#E5E5E5"> we</font>

268
00:12:03,700 --> 00:12:11,080
saw before<font color="#CCCCCC"> and that way we will test</font>

269
00:12:08,530 --> 00:12:12,610
against<font color="#E5E5E5"> the mock data so if you have</font>

270
00:12:11,080 --> 00:12:14,710
your graphical query<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font>

271
00:12:12,610 --> 00:12:16,660
turn products and we don't<font color="#E5E5E5"> need to real</font>

272
00:12:14,710 --> 00:12:19,600
<font color="#E5E5E5">data you can just insert data in the</font>

273
00:12:16,660 --> 00:12:21,819
mocks and it will also have<font color="#CCCCCC"> the same</font>

274
00:12:19,600 --> 00:12:26,890
JSON format as<font color="#E5E5E5"> your real data but then</font>

275
00:12:21,820 --> 00:12:28,810
with with<font color="#CCCCCC"> mocks</font><font color="#E5E5E5"> fair values another</font>

276
00:12:26,890 --> 00:12:31,500
thing we<font color="#E5E5E5"> can do is test schemas but I</font>

277
00:12:28,810 --> 00:12:43,420
will show you the mock files for the

278
00:12:31,500 --> 00:12:46,680
components first yes<font color="#E5E5E5"> yes so at first we</font>

279
00:12:43,420 --> 00:12:49,120
can test our<font color="#CCCCCC"> or query against the</font>

280
00:12:46,680 --> 00:12:51,489
against<font color="#E5E5E5"> the components as you can see</font>

281
00:12:49,120 --> 00:12:53,700
this is<font color="#E5E5E5"> our actual component fall on via</font>

282
00:12:51,490 --> 00:12:56,110
<font color="#E5E5E5">for</font><font color="#CCCCCC"> graph well query defined here and</font>

283
00:12:53,700 --> 00:12:58,420
<font color="#CCCCCC">your going</font><font color="#E5E5E5"> to query all the products</font>

284
00:12:56,110 --> 00:13:00,760
with<font color="#E5E5E5"> the variables and also</font><font color="#CCCCCC"> their</font>

285
00:12:58,420 --> 00:13:03,339
related collections which are refused

286
00:13:00,760 --> 00:13:06,430
<font color="#E5E5E5">offers and as you can</font><font color="#CCCCCC"> see we do nothing</font>

287
00:13:03,340 --> 00:13:08,530
<font color="#E5E5E5">more</font><font color="#CCCCCC"> than just mapping</font><font color="#E5E5E5"> out the data we</font>

288
00:13:06,430 --> 00:13:10,540
<font color="#CCCCCC">could pick from Guelph guell</font><font color="#E5E5E5"> and we get</font>

289
00:13:08,530 --> 00:13:13,750
<font color="#E5E5E5">us data back from</font><font color="#CCCCCC"> this query component</font>

290
00:13:10,540 --> 00:13:15,339
<font color="#E5E5E5">from below and people just map it</font><font color="#CCCCCC"> out</font>

291
00:13:13,750 --> 00:13:18,070
here and as you can<font color="#CCCCCC"> see we have the</font>

292
00:13:15,340 --> 00:13:22,030
<font color="#E5E5E5">title and the offers and it offers all</font>

293
00:13:18,070 --> 00:13:24,430
have their own variables and we also

294
00:13:22,030 --> 00:13:26,650
have the form component if you look at

295
00:13:24,430 --> 00:13:28,870
the testing for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> products component</font>

296
00:13:26,650 --> 00:13:31,720
you<font color="#E5E5E5"> can see if you can see instantly</font>

297
00:13:28,870 --> 00:13:34,210
from how we<font color="#CCCCCC"> describe their tests what</font>

298
00:13:31,720 --> 00:13:35,890
the<font color="#E5E5E5"> components you do so the component</font>

299
00:13:34,210 --> 00:13:37,420
<font color="#CCCCCC">should render without an error</font><font color="#E5E5E5"> that's</font>

300
00:13:35,890 --> 00:13:39,760
something we can test<font color="#E5E5E5"> really easy we</font>

301
00:13:37,420 --> 00:13:41,530
don't<font color="#E5E5E5"> need to add any mock data because</font>

302
00:13:39,760 --> 00:13:43,540
<font color="#CCCCCC">we don't need to move data at first</font>

303
00:13:41,530 --> 00:13:45,069
because<font color="#CCCCCC"> the component</font><font color="#E5E5E5"> does need any data</font>

304
00:13:43,540 --> 00:13:47,139
to<font color="#CCCCCC"> render</font>

305
00:13:45,070 --> 00:13:49,870
and as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see we wrapped it inside</font>

306
00:13:47,139 --> 00:13:51,970
<font color="#E5E5E5">the this</font><font color="#CCCCCC"> trailer</font><font color="#E5E5E5"> from react</font><font color="#CCCCCC"> we have a</font>

307
00:13:49,870 --> 00:13:54,699
<font color="#CCCCCC">mock provider</font><font color="#E5E5E5"> and our produce</font><font color="#CCCCCC"> component</font>

308
00:13:51,970 --> 00:13:55,990
and this test should work<font color="#E5E5E5"> we also have a</font>

309
00:13:54,699 --> 00:13:59,380
test where we would test the loading

310
00:13:55,990 --> 00:14:01,300
<font color="#CCCCCC">States we're gonna</font><font color="#E5E5E5"> see if or component</font>

311
00:13:59,380 --> 00:14:03,160
<font color="#CCCCCC">actually shows a</font><font color="#E5E5E5"> loading indicator or a</font>

312
00:14:01,300 --> 00:14:05,319
loading text<font color="#E5E5E5"> I've ever retrieving data</font>

313
00:14:03,160 --> 00:14:09,189
from<font color="#E5E5E5"> Kafka well for this we still don't</font>

314
00:14:05,319 --> 00:14:11,050
<font color="#E5E5E5">need to mock any data because this is</font>

315
00:14:09,190 --> 00:14:14,139
<font color="#E5E5E5">just testing the connection with the</font>

316
00:14:11,050 --> 00:14:16,300
<font color="#CCCCCC">prety provider and for the third</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> we</font>

317
00:14:14,139 --> 00:14:18,639
<font color="#CCCCCC">need to actually insert any</font><font color="#E5E5E5"> mocks so as</font>

318
00:14:16,300 --> 00:14:20,800
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see we mock the entire work well</font>

319
00:14:18,639 --> 00:14:22,930
<font color="#E5E5E5">request by adding the query and the</font>

320
00:14:20,800 --> 00:14:26,019
<font color="#CCCCCC">query is the same one we use</font><font color="#E5E5E5"> an actual</font>

321
00:14:22,930 --> 00:14:28,388
component and we just imported<font color="#E5E5E5"> and we're</font>

322
00:14:26,019 --> 00:14:30,550
going<font color="#E5E5E5"> to check if the result data</font>

323
00:14:28,389 --> 00:14:32,560
matches our schema and matches your

324
00:14:30,550 --> 00:14:34,839
query something that we have to find on

325
00:14:32,560 --> 00:14:36,430
the<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> and this is a test that</font>

326
00:14:34,839 --> 00:14:40,440
<font color="#E5E5E5">also should work and</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to test</font>

327
00:14:36,430 --> 00:14:43,839
<font color="#E5E5E5">that by seeing if there actually is</font>

328
00:14:40,440 --> 00:14:46,680
<font color="#CCCCCC">product that</font><font color="#E5E5E5"> has the</font><font color="#CCCCCC"> name</font><font color="#E5E5E5"> test that</font>

329
00:14:43,839 --> 00:14:50,230
matches<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> name test in our result</font>

330
00:14:46,680 --> 00:14:52,870
<font color="#E5E5E5">and last but not least we can also test</font>

331
00:14:50,230 --> 00:15:00,670
for<font color="#CCCCCC"> our</font><font color="#E5E5E5"> message</font><font color="#CCCCCC"> and as you can see from</font>

332
00:14:52,870 --> 00:15:05,620
the running example it just disappear

333
00:15:00,670 --> 00:15:07,540
see<font color="#E5E5E5"> for tests are working as you can see</font>

334
00:15:05,620 --> 00:15:10,839
<font color="#E5E5E5">they all the</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> from products</font>

335
00:15:07,540 --> 00:15:12,819
components passed<font color="#E5E5E5"> and we also test the</font>

336
00:15:10,839 --> 00:15:16,720
form component which<font color="#CCCCCC"> is basically tested</font>

337
00:15:12,819 --> 00:15:18,969
on the same way as we<font color="#CCCCCC"> tested or produced</font>

338
00:15:16,720 --> 00:15:21,279
component as you can see we have

339
00:15:18,970 --> 00:15:22,540
described<font color="#E5E5E5"> the mutation in the form and</font>

340
00:15:21,279 --> 00:15:25,449
as you can see it's a mutation<font color="#E5E5E5"> with</font>

341
00:15:22,540 --> 00:15:29,230
variables that we sent<font color="#E5E5E5"> our graph</font><font color="#CCCCCC"> quail</font>

342
00:15:25,449 --> 00:15:32,589
server<font color="#E5E5E5"> and which returns data if we edit</font>

343
00:15:29,230 --> 00:15:35,380
our product successfully and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> can see</font>

344
00:15:32,589 --> 00:15:40,240
<font color="#E5E5E5">use the form submit that uses the react</font>

345
00:15:35,380 --> 00:15:45,220
<font color="#E5E5E5">create</font><font color="#CCCCCC"> ref future which we can also test</font>

346
00:15:40,240 --> 00:15:46,689
by mocking mocking those reps as you<font color="#E5E5E5"> can</font>

347
00:15:45,220 --> 00:15:49,269
<font color="#E5E5E5">see I</font><font color="#CCCCCC"> mocked those</font><font color="#E5E5E5"> webs right here</font>

348
00:15:46,689 --> 00:15:51,670
inside<font color="#E5E5E5"> the testing of her firm component</font>

349
00:15:49,269 --> 00:15:54,370
and we do it basically<font color="#E5E5E5"> the same way so</font>

350
00:15:51,670 --> 00:15:57,339
we wrapped our<font color="#E5E5E5"> firm component inside the</font>

351
00:15:54,370 --> 00:15:58,280
provider<font color="#E5E5E5"> component from Apollo to test</font>

352
00:15:57,339 --> 00:16:00,380
if it's<font color="#CCCCCC"> working</font>

353
00:15:58,280 --> 00:16:03,110
do the same<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> loading</font><font color="#E5E5E5"> state we're</font>

354
00:16:00,380 --> 00:16:05,180
gonna see<font color="#E5E5E5"> four components the loading</font>

355
00:16:03,110 --> 00:16:07,850
indicator when we're sending<font color="#E5E5E5"> the</font>

356
00:16:05,180 --> 00:16:11,030
mutation to the<font color="#E5E5E5"> cough</font><font color="#CCCCCC"> quelle server</font><font color="#E5E5E5"> and</font>

357
00:16:07,850 --> 00:16:13,940
<font color="#E5E5E5">lots</font><font color="#CCCCCC"> from the least gonna</font><font color="#E5E5E5"> check if we</font>

358
00:16:11,030 --> 00:16:16,100
get a<font color="#E5E5E5"> success message after</font><font color="#CCCCCC"> our product</font>

359
00:16:13,940 --> 00:16:18,380
or<font color="#E5E5E5"> offer is added to the product</font><font color="#CCCCCC"> and</font>

360
00:16:16,100 --> 00:16:21,020
this<font color="#E5E5E5"> is how you can test components and</font>

361
00:16:18,380 --> 00:16:22,840
if it all<font color="#E5E5E5"> went</font><font color="#CCCCCC"> too fast</font><font color="#E5E5E5"> it's on get up</font>

362
00:16:21,020 --> 00:16:25,370
as<font color="#E5E5E5"> well of a show the link later</font>

363
00:16:22,840 --> 00:16:28,460
<font color="#E5E5E5">something else we can do with graph</font>

364
00:16:25,370 --> 00:16:30,710
<font color="#CCCCCC">Corral</font><font color="#E5E5E5"> is testing or schemas directly so</font>

365
00:16:28,460 --> 00:16:33,080
if you're familiar with<font color="#CCCCCC"> redux for</font>

366
00:16:30,710 --> 00:16:34,670
example you can test<font color="#CCCCCC"> Redux action</font>

367
00:16:33,080 --> 00:16:37,570
creators directly and see if<font color="#E5E5E5"> that</font>

368
00:16:34,670 --> 00:16:40,069
mutates your reducer correctly and

369
00:16:37,570 --> 00:16:41,980
schemas we can test with<font color="#E5E5E5"> a small</font><font color="#CCCCCC"> upper</font>

370
00:16:40,070 --> 00:16:44,990
source premier package that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> called</font>

371
00:16:41,980 --> 00:16:47,510
easy<font color="#CCCCCC"> graft well tester</font><font color="#E5E5E5"> and with</font><font color="#CCCCCC"> easy</font>

372
00:16:44,990 --> 00:16:49,490
graph QL tester we can directly test or

373
00:16:47,510 --> 00:16:51,860
graph<font color="#E5E5E5"> well queries imitations against</font>

374
00:16:49,490 --> 00:16:53,630
the graph<font color="#CCCCCC"> guell server as</font><font color="#E5E5E5"> you can see</font>

375
00:16:51,860 --> 00:16:56,090
it's a small<font color="#E5E5E5"> example how we should do</font>

376
00:16:53,630 --> 00:16:59,930
that<font color="#E5E5E5"> so you could</font><font color="#CCCCCC"> just gonna impair the</font>

377
00:16:56,090 --> 00:17:01,820
easy graph QL tester<font color="#E5E5E5"> and you can define</font>

378
00:16:59,930 --> 00:17:03,290
<font color="#CCCCCC">your schema so either up to nature if</font>

379
00:17:01,820 --> 00:17:06,050
<font color="#CCCCCC">you scheme on the front end to test on</font>

380
00:17:03,290 --> 00:17:09,139
the front end or use easy<font color="#E5E5E5"> graphical</font><font color="#CCCCCC"> test</font>

381
00:17:06,050 --> 00:17:11,089
<font color="#E5E5E5">directly on your graph QL server and</font>

382
00:17:09,140 --> 00:17:12,500
you're<font color="#E5E5E5"> just gonna input the schema in</font>

383
00:17:11,089 --> 00:17:15,399
there and then you can<font color="#E5E5E5"> test if your</font>

384
00:17:12,500 --> 00:17:19,510
query will work and this last exemption

385
00:17:15,400 --> 00:17:22,120
<font color="#CCCCCC">now you can</font><font color="#E5E5E5"> test directly to the schema</font>

386
00:17:19,510 --> 00:17:25,369
<font color="#CCCCCC">so this will mean you get the real</font>

387
00:17:22,119 --> 00:17:27,020
situation<font color="#E5E5E5"> because in this case I'm</font>

388
00:17:25,369 --> 00:17:29,449
importing the schema<font color="#E5E5E5"> from my back-end</font>

389
00:17:27,020 --> 00:17:32,389
graph QL<font color="#CCCCCC"> server survivor always need to</font>

390
00:17:29,450 --> 00:17:34,520
have to serve<font color="#CCCCCC"> laughs and you can also</font>

391
00:17:32,390 --> 00:17:36,470
test with invalid values<font color="#E5E5E5"> so in this case</font>

392
00:17:34,520 --> 00:17:38,810
we're going<font color="#E5E5E5"> to test if our mutation</font>

393
00:17:36,470 --> 00:17:41,090
should return<font color="#CCCCCC"> a success message or an</font>

394
00:17:38,810 --> 00:17:43,909
error<font color="#CCCCCC"> message</font><font color="#E5E5E5"> so par example if I would</font>

395
00:17:41,090 --> 00:17:46,580
<font color="#E5E5E5">insert a wrongfully variable I would</font>

396
00:17:43,910 --> 00:17:48,290
insert and float my integer<font color="#E5E5E5"> then I</font>

397
00:17:46,580 --> 00:17:51,439
should let<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know that my test case</font>

398
00:17:48,290 --> 00:17:55,159
should fail because the<font color="#CCCCCC"> format's of</font><font color="#E5E5E5"> the</font>

399
00:17:51,440 --> 00:17:59,480
variable isn't<font color="#CCCCCC"> a</font><font color="#E5E5E5"> correct one</font><font color="#CCCCCC"> and you can</font>

400
00:17:55,160 --> 00:18:01,910
do the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> for mutation for ya to test</font>

401
00:17:59,480 --> 00:18:03,470
if it returns<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also use</font><font color="#E5E5E5"> mock</font>

402
00:18:01,910 --> 00:18:05,840
<font color="#E5E5E5">schemas so instead</font><font color="#CCCCCC"> of your real scheme</font>

403
00:18:03,470 --> 00:18:07,550
as you can mock them to see if<font color="#E5E5E5"> your the</font>

404
00:18:05,840 --> 00:18:11,000
queries you've defined are really

405
00:18:07,550 --> 00:18:11,539
working<font color="#E5E5E5"> and you can test</font><font color="#CCCCCC"> both stuff in</font>

406
00:18:11,000 --> 00:18:15,289
<font color="#E5E5E5">this case</font>

407
00:18:11,539 --> 00:18:16,789
to test if our products<font color="#E5E5E5"> yeah for</font>

408
00:18:15,289 --> 00:18:18,649
products query will return products

409
00:18:16,789 --> 00:18:21,470
informative array and we're<font color="#E5E5E5"> going to</font>

410
00:18:18,649 --> 00:18:23,928
<font color="#E5E5E5">test it to be true</font><font color="#CCCCCC"> so if you're</font>

411
00:18:21,470 --> 00:18:26,389
interesting to see more about this<font color="#CCCCCC"> this</font>

412
00:18:23,929 --> 00:18:29,470
project<font color="#CCCCCC"> you can find it on my my get up</font>

413
00:18:26,389 --> 00:18:32,059
<font color="#CCCCCC">here</font><font color="#E5E5E5"> and you will need the actual Apollo</font>

414
00:18:29,470 --> 00:18:34,399
<font color="#E5E5E5">graphical server running</font><font color="#CCCCCC"> but the link to</font>

415
00:18:32,059 --> 00:18:37,070
<font color="#CCCCCC">that one</font><font color="#E5E5E5"> is also in</font><font color="#CCCCCC"> the index file I</font>

416
00:18:34,399 --> 00:18:39,258
believe so you can<font color="#E5E5E5"> just go and start</font><font color="#CCCCCC"> to</font>

417
00:18:37,070 --> 00:18:46,908
<font color="#E5E5E5">cough</font><font color="#CCCCCC"> quell</font><font color="#E5E5E5"> and start testing</font><font color="#CCCCCC"> it in your</font>

418
00:18:39,259 --> 00:18:50,720
browser<font color="#E5E5E5"> yes so if we look at</font><font color="#CCCCCC"> the code</font>

419
00:18:46,909 --> 00:18:54,799
example<font color="#E5E5E5"> again thank you see I've</font><font color="#CCCCCC"> editing</font>

420
00:18:50,720 --> 00:18:56,809
schema testing<font color="#E5E5E5"> a Verity schema testing</font>

421
00:18:54,799 --> 00:18:58,668
<font color="#E5E5E5">into a different directory because we're</font>

422
00:18:56,809 --> 00:19:00,229
testing<font color="#E5E5E5"> we're not really testing</font>

423
00:18:58,669 --> 00:19:04,099
<font color="#CCCCCC">components we're just gonna test</font><font color="#E5E5E5"> the for</font>

424
00:19:00,229 --> 00:19:06,080
queries work so in<font color="#E5E5E5"> the component fall so</font>

425
00:19:04,099 --> 00:19:07,489
this<font color="#E5E5E5"> is the form component and we're</font>

426
00:19:06,080 --> 00:19:10,309
going to<font color="#E5E5E5"> test it for actual components</font>

427
00:19:07,489 --> 00:19:12,440
will render<font color="#CCCCCC"> already</font><font color="#E5E5E5"> mock data and inside</font>

428
00:19:10,309 --> 00:19:16,369
the other file I'm going<font color="#CCCCCC"> to test the</font>

429
00:19:12,440 --> 00:19:18,349
schemas so that's inside this fall<font color="#CCCCCC"> at</font>

430
00:19:16,369 --> 00:19:21,379
first<font color="#E5E5E5"> I retrieve the schema</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> my</font>

431
00:19:18,349 --> 00:19:23,989
graph QL server which is hosted on<font color="#E5E5E5"> code</font>

432
00:19:21,379 --> 00:19:25,459
<font color="#E5E5E5">sandbox so if you would find the project</font>

433
00:19:23,989 --> 00:19:28,369
<font color="#E5E5E5">can get up and</font><font color="#CCCCCC"> go to this store</font><font color="#E5E5E5"> this</font>

434
00:19:25,460 --> 00:19:31,999
link you<font color="#CCCCCC"> will find actual polar graph QL</font>

435
00:19:28,369 --> 00:19:33,499
<font color="#E5E5E5">server I'm using and so important</font><font color="#CCCCCC"> this</font>

436
00:19:31,999 --> 00:19:38,629
<font color="#CCCCCC">schema and testing against the real-life</font>

437
00:19:33,499 --> 00:19:39,919
<font color="#CCCCCC">data in this fall where</font><font color="#E5E5E5"> I'm yes where</font>

438
00:19:38,629 --> 00:19:41,899
I'm import the schema right here<font color="#E5E5E5"> or</font>

439
00:19:39,919 --> 00:19:45,109
<font color="#E5E5E5">input my queries from the components and</font>

440
00:19:41,899 --> 00:19:47,629
I'm<font color="#E5E5E5"> testing against the real data to see</font>

441
00:19:45,109 --> 00:19:51,710
<font color="#E5E5E5">if it works</font><font color="#CCCCCC"> so my third test would see</font>

442
00:19:47,629 --> 00:19:53,478
if my query matches everything<font color="#CCCCCC"> that I've</font>

443
00:19:51,710 --> 00:19:55,609
<font color="#E5E5E5">defined</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> schema which is basically the</font>

444
00:19:53,479 --> 00:19:57,679
quorum<font color="#CCCCCC"> call quell</font><font color="#E5E5E5"> the Keystone makes the</font>

445
00:19:55,609 --> 00:19:58,820
schema<font color="#E5E5E5"> you</font><font color="#CCCCCC"> won't</font><font color="#E5E5E5"> get any results so</font>

446
00:19:57,679 --> 00:19:59,889
that's<font color="#E5E5E5"> something we need to test it</font>

447
00:19:58,820 --> 00:20:03,109
first

448
00:19:59,889 --> 00:20:06,709
secondly I will<font color="#E5E5E5"> return if the corrected</font>

449
00:20:03,109 --> 00:20:09,080
<font color="#CCCCCC">data is in right format so product</font>

450
00:20:06,710 --> 00:20:10,879
<font color="#E5E5E5">should be</font><font color="#CCCCCC"> an array and we can test if it</font>

451
00:20:09,080 --> 00:20:14,330
<font color="#E5E5E5">really should be</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> array by having</font>

452
00:20:10,879 --> 00:20:17,509
these<font color="#CCCCCC"> Shia sump</font><font color="#E5E5E5"> shins</font><font color="#CCCCCC"> we want to know if</font>

453
00:20:14,330 --> 00:20:19,879
the result<font color="#CCCCCC"> actually is a result we are</font>

454
00:20:17,509 --> 00:20:24,440
expecting and in the last one<font color="#E5E5E5"> I'm</font>

455
00:20:19,879 --> 00:20:25,610
testing the actual mutation so I

456
00:20:24,440 --> 00:20:27,770
<font color="#CCCCCC">described your</font><font color="#E5E5E5"> test</font>

457
00:20:25,610 --> 00:20:29,780
in the<font color="#CCCCCC"> forum component at first I'm</font>

458
00:20:27,770 --> 00:20:33,530
going<font color="#E5E5E5"> to test if my mutation would</font>

459
00:20:29,780 --> 00:20:35,510
actually return me the<font color="#CCCCCC"> offer I just</font>

460
00:20:33,530 --> 00:20:38,960
inserted<font color="#CCCCCC"> we're going to see if the</font>

461
00:20:35,510 --> 00:20:41,030
violation<font color="#E5E5E5"> is true we import our mutation</font>

462
00:20:38,960 --> 00:20:43,820
and we test it and we're<font color="#E5E5E5"> going to see if</font>

463
00:20:41,030 --> 00:20:45,770
<font color="#CCCCCC">we</font><font color="#E5E5E5"> to turn to this data and it's the</font>

464
00:20:43,820 --> 00:20:48,379
case is we<font color="#E5E5E5"> just saw the test works and</font>

465
00:20:45,770 --> 00:20:50,720
in a<font color="#E5E5E5"> final version I'm</font><font color="#CCCCCC"> going to see if</font>

466
00:20:48,380 --> 00:20:53,120
our mutation would feel if we insert

467
00:20:50,720 --> 00:20:55,280
something order for<font color="#E5E5E5"> products so you can</font>

468
00:20:53,120 --> 00:20:59,418
see we've found product<font color="#E5E5E5"> Eddie it's to</font>

469
00:20:55,280 --> 00:21:01,070
<font color="#E5E5E5">find an or schema as a as an integer</font><font color="#CCCCCC"> and</font>

470
00:20:59,419 --> 00:21:08,059
<font color="#E5E5E5">we've defined</font><font color="#CCCCCC"> it the year as a string so</font>

471
00:21:01,070 --> 00:21:10,010
this should feel obviously yes so again

472
00:21:08,059 --> 00:21:12,080
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> find more information</font><font color="#CCCCCC"> on this</font>

473
00:21:10,010 --> 00:21:16,129
<font color="#E5E5E5">get a</font><font color="#CCCCCC"> purple</font><font color="#E5E5E5"> story to actually</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> this</font>

474
00:21:12,080 --> 00:21:17,540
<font color="#E5E5E5">product running and if you want to know</font>

475
00:21:16,130 --> 00:21:20,419
more<font color="#E5E5E5"> about this you</font><font color="#CCCCCC"> can also go to</font>

476
00:21:17,540 --> 00:21:23,149
Twitter and<font color="#E5E5E5"> just ask me a question if</font>

477
00:21:20,419 --> 00:21:30,679
you would like so thank you very<font color="#E5E5E5"> much</font>

478
00:21:23,150 --> 00:21:33,980
<font color="#E5E5E5">for your time thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> so if you have</font><font color="#CCCCCC"> a</font>

479
00:21:30,679 --> 00:21:35,720
question<font color="#CCCCCC"> raise</font><font color="#E5E5E5"> your hand</font><font color="#CCCCCC"> I mean you have</font>

480
00:21:33,980 --> 00:21:42,980
a question that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> the first we're</font>

481
00:21:35,720 --> 00:21:45,610
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> ask it just want</font><font color="#E5E5E5"> to look at me</font>

482
00:21:42,980 --> 00:21:45,610
<font color="#CCCCCC">looking strange</font>

483
00:21:46,050 --> 00:21:53,370
maybe they understood everything right

484
00:21:50,600 --> 00:21:55,889
<font color="#CCCCCC">no</font><font color="#E5E5E5"> no questions well if you little</font><font color="#CCCCCC"> bit</font>

485
00:21:53,370 --> 00:21:57,959
shy maybe you'll be outside<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the room</font>

486
00:21:55,890 --> 00:21:59,910
<font color="#CCCCCC">yeah I will be outside the</font><font color="#E5E5E5"> room</font><font color="#CCCCCC"> and you</font>

487
00:21:57,960 --> 00:22:01,950
<font color="#E5E5E5">can just go to Twitter or</font><font color="#CCCCCC"> my handle is</font>

488
00:21:59,910 --> 00:22:04,550
right there in the<font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font>

489
00:22:01,950 --> 00:22:08,420
send me<font color="#CCCCCC"> a message</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> just an 8-week</font>

490
00:22:04,550 --> 00:22:08,419
<font color="#E5E5E5">thank you thank you</font>

