1
00:00:05,960 --> 00:00:09,959
<font color="#E5E5E5">okay so we're going to start so the</font>

2
00:00:08,610 --> 00:00:24,000
first speaker<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> very excited cuz</font>

3
00:00:09,959 --> 00:00:26,160
<font color="#E5E5E5">basically every paper that every thanks</font>

4
00:00:24,000 --> 00:00:29,460
Serena thanks for waking up early on a

5
00:00:26,160 --> 00:00:31,469
Sunday<font color="#CCCCCC"> so my name is</font><font color="#E5E5E5"> Milton researcher</font>

6
00:00:29,460 --> 00:00:35,460
in the Microsoft<font color="#CCCCCC"> research in Cambridge</font>

7
00:00:31,469 --> 00:00:37,649
in the UK<font color="#E5E5E5"> Cambridge and overall I've</font>

8
00:00:35,460 --> 00:00:39,719
been working in research and machine

9
00:00:37,649 --> 00:00:41,850
<font color="#CCCCCC">learning</font><font color="#E5E5E5"> and software during programming</font>

10
00:00:39,719 --> 00:00:44,760
language research around<font color="#E5E5E5"> this area</font><font color="#CCCCCC"> for</font>

11
00:00:41,850 --> 00:00:47,070
<font color="#CCCCCC">the last maybe seven years so what I</font>

12
00:00:44,760 --> 00:00:49,409
wanted to<font color="#E5E5E5"> discuss today</font><font color="#CCCCCC"> is more give you</font>

13
00:00:47,070 --> 00:00:51,059
a brief overview<font color="#CCCCCC"> of</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the research</font>

14
00:00:49,409 --> 00:00:53,539
things that are coming<font color="#CCCCCC"> up there</font><font color="#E5E5E5"> are not</font>

15
00:00:51,059 --> 00:00:57,209
<font color="#E5E5E5">necessarily things that will be</font>

16
00:00:53,539 --> 00:01:00,059
applicable<font color="#E5E5E5"> things that you will go home</font>

17
00:00:57,210 --> 00:01:02,069
<font color="#E5E5E5">and use them right</font><font color="#CCCCCC"> away</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I think it's</font>

18
00:01:00,059 --> 00:01:05,220
kind of give us an overview of<font color="#E5E5E5"> where we</font>

19
00:01:02,069 --> 00:01:07,050
see things going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and now of course</font>

20
00:01:05,220 --> 00:01:09,780
<font color="#E5E5E5">the first question when it</font><font color="#CCCCCC"> comes to mind</font>

21
00:01:07,050 --> 00:01:12,060
is why can<font color="#CCCCCC"> we even use machine learning</font>

22
00:01:09,780 --> 00:01:14,850
for source code like what is the<font color="#E5E5E5"> thing</font>

23
00:01:12,060 --> 00:01:16,950
that allows<font color="#CCCCCC"> us to understand to use</font>

24
00:01:14,850 --> 00:01:19,169
machine learning to<font color="#E5E5E5"> get aspects of</font>

25
00:01:16,950 --> 00:01:21,350
source code<font color="#E5E5E5"> and the answer here</font><font color="#CCCCCC"> is that</font>

26
00:01:19,170 --> 00:01:23,340
we have this<font color="#CCCCCC"> property</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> as</font>

27
00:01:21,350 --> 00:01:25,169
<font color="#CCCCCC">research community some of us</font><font color="#E5E5E5"> in</font>

28
00:01:23,340 --> 00:01:27,210
research community call it a by modality

29
00:01:25,170 --> 00:01:29,130
so it's the<font color="#CCCCCC"> notion that yes of course</font>

30
00:01:27,210 --> 00:01:31,770
you write your<font color="#CCCCCC"> code to tell to your</font>

31
00:01:29,130 --> 00:01:34,800
computer what to do to your<font color="#E5E5E5"> GPU to your</font>

32
00:01:31,770 --> 00:01:36,600
<font color="#E5E5E5">CPU</font><font color="#CCCCCC"> what is the exact instructions but</font>

33
00:01:34,800 --> 00:01:39,990
<font color="#E5E5E5">within the code because</font><font color="#CCCCCC"> you write it for</font>

34
00:01:36,600 --> 00:01:43,410
<font color="#CCCCCC">other people</font><font color="#E5E5E5"> to read to understand to</font>

35
00:01:39,990 --> 00:01:45,360
extend to maintain to debug you have all

36
00:01:43,410 --> 00:01:47,280
this kind<font color="#E5E5E5"> of hints that you give from</font>

37
00:01:45,360 --> 00:01:49,500
better variable names so<font color="#CCCCCC"> that people can</font>

38
00:01:47,280 --> 00:01:51,990
understand<font color="#CCCCCC"> what a</font><font color="#E5E5E5"> variable is trying to</font>

39
00:01:49,500 --> 00:01:53,880
do<font color="#E5E5E5"> for good method names like function</font>

40
00:01:51,990 --> 00:01:56,250
names<font color="#E5E5E5"> all these kind of things</font>

41
00:01:53,880 --> 00:01:59,339
so essentially<font color="#CCCCCC"> Co source code has</font><font color="#E5E5E5"> these</font>

42
00:01:56,250 --> 00:02:02,340
two forms<font color="#E5E5E5"> of audiences the machine of</font>

43
00:01:59,340 --> 00:02:04,650
course<font color="#CCCCCC"> and ask humans and because of</font>

44
00:02:02,340 --> 00:02:06,630
those<font color="#E5E5E5"> things because it's</font><font color="#CCCCCC"> so costly</font><font color="#E5E5E5"> for</font>

45
00:02:04,650 --> 00:02:10,229
<font color="#CCCCCC">us humans to read to understand the code</font>

46
00:02:06,630 --> 00:02:14,780
we add a lot of<font color="#CCCCCC"> units a human level</font>

47
00:02:10,229 --> 00:02:14,780
information<font color="#E5E5E5"> so yeah</font>

48
00:02:15,230 --> 00:02:24,599
yeah<font color="#E5E5E5"> so a a lot of human information</font>

49
00:02:21,930 --> 00:02:27,090
<font color="#E5E5E5">this is we've got magic patterns both in</font>

50
00:02:24,599 --> 00:02:30,060
the way we think<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way we</font><font color="#E5E5E5"> write code</font>

51
00:02:27,090 --> 00:02:32,340
these<font color="#E5E5E5"> are patterns that we add in our</font>

52
00:02:30,060 --> 00:02:33,989
source code<font color="#CCCCCC"> and because we have patterns</font>

53
00:02:32,340 --> 00:02:37,530
we can<font color="#CCCCCC"> do machine learning</font>

54
00:02:33,989 --> 00:02:39,799
so maybe the poster kind of story of

55
00:02:37,530 --> 00:02:41,430
machine learning<font color="#CCCCCC"> for source code</font><font color="#E5E5E5"> is</font>

56
00:02:39,799 --> 00:02:44,819
<font color="#E5E5E5">coded</font><font color="#CCCCCC"> to completion</font>

57
00:02:41,430 --> 00:02:48,030
<font color="#E5E5E5">both</font><font color="#CCCCCC"> Eclipse visual studio</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Visual</font>

58
00:02:44,819 --> 00:02:50,190
<font color="#CCCCCC">Studio</font><font color="#E5E5E5"> code now when you suggest I code</font>

59
00:02:48,030 --> 00:02:52,470
when<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> text dot something</font><font color="#CCCCCC"> passed</font>

60
00:02:50,190 --> 00:02:55,049
<font color="#CCCCCC">out</font><font color="#E5E5E5"> something instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> just offering</font>

61
00:02:52,470 --> 00:02:58,109
<font color="#CCCCCC">you a list</font><font color="#E5E5E5"> of suggestions but that are</font>

62
00:02:55,049 --> 00:03:01,019
valid<font color="#CCCCCC"> for this location they will</font><font color="#E5E5E5"> learn</font>

63
00:02:58,109 --> 00:03:03,120
about<font color="#E5E5E5"> your context or about the context</font>

64
00:03:01,019 --> 00:03:05,849
<font color="#CCCCCC">that you are currently typing</font><font color="#E5E5E5"> in and</font>

65
00:03:03,120 --> 00:03:08,489
<font color="#CCCCCC">will say that well</font><font color="#E5E5E5"> given the current</font>

66
00:03:05,849 --> 00:03:11,310
context of the code let's say here you

67
00:03:08,489 --> 00:03:13,769
just<font color="#CCCCCC"> replace</font><font color="#E5E5E5"> something with a path now</font>

68
00:03:11,310 --> 00:03:16,230
you are inside<font color="#CCCCCC"> an if well probably</font>

69
00:03:13,769 --> 00:03:18,090
you're trying to see whether the path

70
00:03:16,230 --> 00:03:20,638
starts with something<font color="#CCCCCC"> or ends with</font>

71
00:03:18,090 --> 00:03:22,530
something<font color="#E5E5E5"> so essentially they go</font><font color="#CCCCCC"> or we</font>

72
00:03:20,639 --> 00:03:24,329
go and get<font color="#CCCCCC"> help but we scrape all of</font>

73
00:03:22,530 --> 00:03:26,400
github let's say and we find what are

74
00:03:24,329 --> 00:03:30,060
the common patterns of how people write

75
00:03:26,400 --> 00:03:32,160
code<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> get this in a form of</font>

76
00:03:30,060 --> 00:03:34,919
<font color="#CCCCCC">auto</font><font color="#E5E5E5"> completion where instead of getting</font>

77
00:03:32,160 --> 00:03:37,349
this long list<font color="#E5E5E5"> of all possible</font><font color="#CCCCCC"> options</font>

78
00:03:34,919 --> 00:03:39,720
<font color="#E5E5E5">of you know what what are</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> going to do</font>

79
00:03:37,349 --> 00:03:41,790
here<font color="#E5E5E5"> you get them sorted by some</font>

80
00:03:39,720 --> 00:03:45,629
probability<font color="#CCCCCC"> probability based</font><font color="#E5E5E5"> on how</font>

81
00:03:41,790 --> 00:03:47,849
<font color="#E5E5E5">people have used code before so this is</font>

82
00:03:45,629 --> 00:03:50,638
<font color="#E5E5E5">currently</font><font color="#CCCCCC"> deployed in many</font><font color="#E5E5E5"> places and</font>

83
00:03:47,849 --> 00:03:52,078
you probably can use it<font color="#E5E5E5"> already but</font>

84
00:03:50,639 --> 00:03:54,629
there have been<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things that have</font>

85
00:03:52,079 --> 00:03:58,829
<font color="#E5E5E5">been going have been going on in the</font>

86
00:03:54,629 --> 00:04:01,319
last maybe five six years<font color="#E5E5E5"> so one thing I</font>

87
00:03:58,829 --> 00:04:04,109
wanted to<font color="#E5E5E5"> show here is this idea</font><font color="#CCCCCC"> of</font>

88
00:04:01,319 --> 00:04:06,738
predicting<font color="#CCCCCC"> type so JavaScript is</font><font color="#E5E5E5"> very</font>

89
00:04:04,109 --> 00:04:09,180
common nowadays as you probably<font color="#E5E5E5"> know and</font>

90
00:04:06,739 --> 00:04:11,609
there<font color="#E5E5E5"> are a few</font><font color="#CCCCCC"> pieces of work that</font>

91
00:04:09,180 --> 00:04:15,239
<font color="#CCCCCC">essentially what they try</font><font color="#E5E5E5"> to do is they</font>

92
00:04:11,609 --> 00:04:16,978
take an untyped<font color="#E5E5E5"> snippet of code and they</font>

93
00:04:15,239 --> 00:04:21,570
try<font color="#E5E5E5"> to predict let's say the most</font>

94
00:04:16,978 --> 00:04:23,010
probable types for for your code and you

95
00:04:21,570 --> 00:04:24,870
<font color="#CCCCCC">can imagine</font><font color="#E5E5E5"> we have a for</font><font color="#CCCCCC"> loop maybe</font>

96
00:04:23,010 --> 00:04:28,558
that's too small<font color="#E5E5E5"> to see in the back and</font>

97
00:04:24,870 --> 00:04:31,289
you use for I equals<font color="#E5E5E5"> 0 well you probably</font>

98
00:04:28,559 --> 00:04:33,449
that<font color="#E5E5E5"> I is an integer</font><font color="#CCCCCC"> so you get these</font>

99
00:04:31,289 --> 00:04:35,759
<font color="#E5E5E5">patterns that you can learn</font><font color="#CCCCCC"> from data</font>

100
00:04:33,449 --> 00:04:37,649
<font color="#E5E5E5">and you can start predicting types so</font>

101
00:04:35,759 --> 00:04:41,129
<font color="#CCCCCC">that you can start migrating let's say</font>

102
00:04:37,649 --> 00:04:44,279
from JavaScript to typescript to flow or

103
00:04:41,129 --> 00:04:46,169
to other typed typed equivalents<font color="#E5E5E5"> and</font>

104
00:04:44,279 --> 00:04:47,969
this is an interesting part<font color="#CCCCCC"> because it</font>

105
00:04:46,169 --> 00:04:51,209
means<font color="#CCCCCC"> that machine learning is starting</font>

106
00:04:47,969 --> 00:04:54,209
to understand the nuances of<font color="#E5E5E5"> of how we</font>

107
00:04:51,209 --> 00:04:56,339
use the code and what things mean about

108
00:04:54,209 --> 00:04:57,599
this about the code and<font color="#E5E5E5"> also adding</font>

109
00:04:56,339 --> 00:05:00,029
types is<font color="#E5E5E5"> a ninja</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is an interesting</font>

110
00:04:57,599 --> 00:05:02,669
<font color="#E5E5E5">paper that came out by some colleagues</font>

111
00:05:00,029 --> 00:05:05,369
<font color="#E5E5E5">in from UCL and Microsoft researching in</font>

112
00:05:02,669 --> 00:05:07,979
the<font color="#E5E5E5"> US where they found essentially that</font>

113
00:05:05,369 --> 00:05:11,429
if you take<font color="#CCCCCC"> a</font><font color="#E5E5E5"> JavaScript program</font><font color="#CCCCCC"> and you</font>

114
00:05:07,979 --> 00:05:15,269
<font color="#E5E5E5">manually add type annotations about 15%</font>

115
00:05:11,429 --> 00:05:19,378
<font color="#E5E5E5">of the bugs that that were eventually</font>

116
00:05:15,269 --> 00:05:21,569
caught in<font color="#E5E5E5"> somehow would have become if</font>

117
00:05:19,379 --> 00:05:24,359
you had type annotations to start with

118
00:05:21,569 --> 00:05:26,099
so<font color="#E5E5E5"> you see that we're</font><font color="#CCCCCC"> getting this this</font>

119
00:05:24,359 --> 00:05:28,919
<font color="#CCCCCC">idea that machine learning kind</font><font color="#E5E5E5"> is</font>

120
00:05:26,099 --> 00:05:30,989
moving us<font color="#E5E5E5"> moving the needle in cases</font>

121
00:05:28,919 --> 00:05:33,539
where we have some form of ambiguity we

122
00:05:30,989 --> 00:05:35,518
don't necessarily know<font color="#CCCCCC"> how what the code</font>

123
00:05:33,539 --> 00:05:37,860
is or what the functions are doing in

124
00:05:35,519 --> 00:05:40,259
JavaScript but we learn those<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

125
00:05:37,860 --> 00:05:43,889
hints statistically about<font color="#E5E5E5"> their types</font>

126
00:05:40,259 --> 00:05:45,899
<font color="#E5E5E5">which we can use later to</font><font color="#CCCCCC"> find bugs</font><font color="#E5E5E5"> we</font>

127
00:05:43,889 --> 00:05:49,110
also had recently there's some some

128
00:05:45,899 --> 00:05:50,519
<font color="#E5E5E5">other work again mostly</font><font color="#CCCCCC"> research</font><font color="#E5E5E5"> things</font>

129
00:05:49,110 --> 00:05:53,339
not something that you<font color="#E5E5E5"> can apply</font>

130
00:05:50,519 --> 00:05:57,239
necessarily<font color="#E5E5E5"> in in your everyday life</font>

131
00:05:53,339 --> 00:06:00,059
<font color="#E5E5E5">where you as humans you we write code</font>

132
00:05:57,239 --> 00:06:02,128
but<font color="#CCCCCC"> we often use a lot of our primitive</font>

133
00:06:00,059 --> 00:06:04,439
types so you can you have a string which

134
00:06:02,129 --> 00:06:07,229
represents a password<font color="#CCCCCC"> and you define it</font>

135
00:06:04,439 --> 00:06:09,689
of type string<font color="#E5E5E5"> password</font><font color="#CCCCCC"> or a JSON string</font>

136
00:06:07,229 --> 00:06:13,469
<font color="#CCCCCC">that you still define is another string</font>

137
00:06:09,689 --> 00:06:16,589
or something else<font color="#E5E5E5"> so now what this means</font>

138
00:06:13,469 --> 00:06:19,199
<font color="#CCCCCC">is that we start</font><font color="#E5E5E5"> getting these things</font>

139
00:06:16,589 --> 00:06:20,939
that we have<font color="#CCCCCC"> a latent notion that we</font>

140
00:06:19,199 --> 00:06:24,029
don't<font color="#CCCCCC"> write it down explicitly</font><font color="#E5E5E5"> it's</font>

141
00:06:20,939 --> 00:06:27,029
hidden in<font color="#E5E5E5"> behind our mind that you know</font>

142
00:06:24,029 --> 00:06:29,459
we shouldn't probably assign to the

143
00:06:27,029 --> 00:06:31,469
variable that is called password<font color="#E5E5E5"> and</font>

144
00:06:29,459 --> 00:06:32,549
it's a string<font color="#E5E5E5"> adjacent thing that that</font>

145
00:06:31,469 --> 00:06:36,449
would sound odd

146
00:06:32,549 --> 00:06:39,089
so one thing we we looked at is well how

147
00:06:36,449 --> 00:06:40,829
can<font color="#CCCCCC"> we</font><font color="#E5E5E5"> essentially use the concepts the</font>

148
00:06:39,089 --> 00:06:41,849
names of the variables the names of the

149
00:06:40,829 --> 00:06:44,309
methods<font color="#CCCCCC"> this</font>

150
00:06:41,849 --> 00:06:46,289
structure<font color="#CCCCCC"> of the program</font><font color="#E5E5E5"> to go towards</font>

151
00:06:44,309 --> 00:06:48,599
splitting those things and eventually

152
00:06:46,289 --> 00:06:51,058
<font color="#E5E5E5">catching box we're not there yet</font><font color="#CCCCCC"> but I</font>

153
00:06:48,599 --> 00:06:53,339
<font color="#E5E5E5">think this is kind of again it</font><font color="#CCCCCC"> points</font>

154
00:06:51,059 --> 00:06:55,050
out that these<font color="#E5E5E5"> these natural language</font>

155
00:06:53,339 --> 00:06:57,839
<font color="#CCCCCC">information</font><font color="#E5E5E5"> the names of the variables</font>

156
00:06:55,050 --> 00:07:00,809
for<font color="#CCCCCC"> example is very</font><font color="#E5E5E5"> useful</font><font color="#CCCCCC"> for doing</font>

157
00:06:57,839 --> 00:07:03,089
program analysis that we care about<font color="#E5E5E5"> and</font>

158
00:07:00,809 --> 00:07:04,499
<font color="#E5E5E5">understanding the code in a way that we</font>

159
00:07:03,089 --> 00:07:07,050
can help the developers in the

160
00:07:04,499 --> 00:07:09,330
<font color="#CCCCCC">semi-automatic</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> there is also this</font>

161
00:07:07,050 --> 00:07:12,270
interesting<font color="#E5E5E5"> tool from Google as far as I</font>

162
00:07:09,330 --> 00:07:14,818
understand<font color="#E5E5E5"> they use it internally and</font>

163
00:07:12,270 --> 00:07:17,969
what they're<font color="#CCCCCC"> doing is that</font><font color="#E5E5E5"> they want to</font>

164
00:07:14,819 --> 00:07:20,699
say<font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> arguments</font>

165
00:07:17,969 --> 00:07:24,748
<font color="#CCCCCC">wrappings</font><font color="#E5E5E5"> you have a function that like</font>

166
00:07:20,699 --> 00:07:27,569
take<font color="#CCCCCC"> Java's or c-sharp substring and you</font>

167
00:07:24,749 --> 00:07:29,909
say that it's you want a substring<font color="#E5E5E5"> and</font>

168
00:07:27,569 --> 00:07:32,339
you say string dot substring<font color="#CCCCCC"> parentheses</font>

169
00:07:29,909 --> 00:07:33,719
and then you say first the offset<font color="#CCCCCC"> and</font>

170
00:07:32,339 --> 00:07:36,599
then the<font color="#E5E5E5"> length or maybe it's</font><font color="#CCCCCC"> the other</font>

171
00:07:33,719 --> 00:07:39,089
<font color="#CCCCCC">way around so what</font><font color="#E5E5E5"> the what they've</font>

172
00:07:36,599 --> 00:07:41,429
tried to<font color="#E5E5E5"> do is that the when you define</font>

173
00:07:39,089 --> 00:07:43,199
a function<font color="#E5E5E5"> like substring you define it</font>

174
00:07:41,429 --> 00:07:46,708
the formal<font color="#E5E5E5"> parameters the formal</font>

175
00:07:43,199 --> 00:07:49,019
arguments are our length and offset<font color="#E5E5E5"> and</font>

176
00:07:46,709 --> 00:07:53,009
then you pass in a<font color="#E5E5E5"> variable</font><font color="#CCCCCC"> let's call</font>

177
00:07:49,019 --> 00:07:55,019
<font color="#CCCCCC">off and</font><font color="#E5E5E5"> size so you've just swapped them</font>

178
00:07:53,009 --> 00:07:58,019
and what they were<font color="#E5E5E5"> doing and this is our</font>

179
00:07:55,019 --> 00:08:01,589
real<font color="#E5E5E5"> Google</font><font color="#CCCCCC"> code as far as they say in</font>

180
00:07:58,019 --> 00:08:05,399
their paper that the official function

181
00:08:01,589 --> 00:08:07,529
the ID<font color="#E5E5E5"> in the declaration says that the</font>

182
00:08:05,399 --> 00:08:10,289
first<font color="#E5E5E5"> argument is response</font><font color="#CCCCCC"> the second</font>

183
00:08:07,529 --> 00:08:13,709
one is frequency<font color="#CCCCCC"> the third one is is</font>

184
00:08:10,289 --> 00:08:15,479
this list<font color="#E5E5E5"> let's not bother but then the</font>

185
00:08:13,709 --> 00:08:17,429
one<font color="#E5E5E5"> of the developer invoke this</font>

186
00:08:15,479 --> 00:08:19,979
function<font color="#CCCCCC"> they don't give the name</font><font color="#E5E5E5"> of</font>

187
00:08:17,429 --> 00:08:22,378
this function<font color="#CCCCCC"> they with the developer</font>

188
00:08:19,979 --> 00:08:24,929
used frequency first<font color="#E5E5E5"> and</font><font color="#CCCCCC"> response second</font>

189
00:08:22,379 --> 00:08:28,139
and you<font color="#E5E5E5"> see the types are again the same</font>

190
00:08:24,929 --> 00:08:30,289
so the<font color="#CCCCCC"> type system says yeah that seems</font>

191
00:08:28,139 --> 00:08:33,299
fine<font color="#CCCCCC"> but this</font><font color="#E5E5E5"> is there is an</font>

192
00:08:30,289 --> 00:08:35,848
<font color="#E5E5E5">inconsistency between</font><font color="#CCCCCC"> the formal and the</font>

193
00:08:33,299 --> 00:08:39,240
actual parameters<font color="#E5E5E5"> and essentially this</font>

194
00:08:35,849 --> 00:08:41,389
were swapped so again more<font color="#CCCCCC"> and</font><font color="#E5E5E5"> more kind</font>

195
00:08:39,240 --> 00:08:44,639
<font color="#E5E5E5">of information</font><font color="#CCCCCC"> are from natural language</font>

196
00:08:41,389 --> 00:08:46,500
from these soft<font color="#CCCCCC"> up aspects of source</font>

197
00:08:44,639 --> 00:08:48,269
code<font color="#E5E5E5"> and this is where again machine</font>

198
00:08:46,500 --> 00:08:50,490
learning<font color="#E5E5E5"> a comes in and you can look at</font>

199
00:08:48,269 --> 00:08:53,760
they pay on<font color="#E5E5E5"> this paper</font>

200
00:08:50,490 --> 00:08:56,340
in this in<font color="#E5E5E5"> this location so overall I</font>

201
00:08:53,760 --> 00:09:00,210
think the the broad perspective<font color="#CCCCCC"> here is</font>

202
00:08:56,340 --> 00:09:01,680
that where do we see that<font color="#E5E5E5"> machine</font>

203
00:09:00,210 --> 00:09:03,930
<font color="#CCCCCC">learning for</font><font color="#E5E5E5"> source code will start</font>

204
00:09:01,680 --> 00:09:05,939
<font color="#E5E5E5">appearing there are many cases where</font><font color="#CCCCCC"> we</font>

205
00:09:03,930 --> 00:09:07,650
want to infer<font color="#CCCCCC"> the latent intent of the</font>

206
00:09:05,940 --> 00:09:10,410
<font color="#CCCCCC">user that's</font><font color="#E5E5E5"> the auto completion case we</font>

207
00:09:07,650 --> 00:09:13,020
don't<font color="#E5E5E5"> want the</font><font color="#CCCCCC"> user to</font><font color="#E5E5E5"> tell us well I'm</font>

208
00:09:10,410 --> 00:09:16,439
typing here and what I actually want to

209
00:09:13,020 --> 00:09:18,210
do is that so<font color="#CCCCCC"> now help me but</font><font color="#E5E5E5"> the the</font>

210
00:09:16,440 --> 00:09:21,420
<font color="#CCCCCC">intent their intent is latent</font><font color="#E5E5E5"> it's</font>

211
00:09:18,210 --> 00:09:23,520
<font color="#E5E5E5">hidden behind the keyboard and we want</font>

212
00:09:21,420 --> 00:09:26,520
to use a machine learning<font color="#CCCCCC"> a machine</font>

213
00:09:23,520 --> 00:09:29,040
learning<font color="#E5E5E5"> model</font><font color="#CCCCCC"> that essentially infers</font>

214
00:09:26,520 --> 00:09:30,990
this late in it and what<font color="#E5E5E5"> did the does</font>

215
00:09:29,040 --> 00:09:33,380
the user wanted to work what did the

216
00:09:30,990 --> 00:09:35,730
<font color="#E5E5E5">user want to do in case of</font><font color="#CCCCCC"> finding bugs</font>

217
00:09:33,380 --> 00:09:37,380
<font color="#E5E5E5">there are other cases where we have</font>

218
00:09:35,730 --> 00:09:39,600
<font color="#E5E5E5">ambiguous information this is most</font>

219
00:09:37,380 --> 00:09:43,860
commonly natural language which is by

220
00:09:39,600 --> 00:09:47,400
definition ambiguous<font color="#CCCCCC"> and when we want to</font>

221
00:09:43,860 --> 00:09:49,740
get the the<font color="#E5E5E5"> information in an ambiguous</font>

222
00:09:47,400 --> 00:09:51,510
form and understand it<font color="#E5E5E5"> in some way this</font>

223
00:09:49,740 --> 00:09:54,450
<font color="#E5E5E5">is where we want to use machine</font><font color="#CCCCCC"> learning</font>

224
00:09:51,510 --> 00:09:57,600
and then and of course<font color="#CCCCCC"> heuristic since</font>

225
00:09:54,450 --> 00:10:00,210
<font color="#CCCCCC">out our code that a lot of us use</font>

226
00:09:57,600 --> 00:10:01,710
<font color="#E5E5E5">because we have to and in many cases we</font>

227
00:10:00,210 --> 00:10:03,060
want<font color="#E5E5E5"> to replace those things with a</font>

228
00:10:01,710 --> 00:10:06,270
machine learning<font color="#E5E5E5"> component that</font><font color="#CCCCCC"> is</font>

229
00:10:03,060 --> 00:10:09,510
adaptive that<font color="#E5E5E5"> is learning as we</font><font color="#CCCCCC"> go</font>

230
00:10:06,270 --> 00:10:12,329
through so in an academic kind of sense

231
00:10:09,510 --> 00:10:13,920
I've written a survey a survey<font color="#E5E5E5"> of the</font>

232
00:10:12,330 --> 00:10:17,370
research things that have been<font color="#E5E5E5"> happening</font>

233
00:10:13,920 --> 00:10:21,300
sourced also has a great<font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> website</font>

234
00:10:17,370 --> 00:10:23,910
<font color="#CCCCCC">on</font><font color="#E5E5E5"> github</font><font color="#CCCCCC"> with his with his links but</font>

235
00:10:21,300 --> 00:10:26,490
this is a very broad<font color="#E5E5E5"> perspective of</font>

236
00:10:23,910 --> 00:10:30,420
let's say where research<font color="#E5E5E5"> stands so I</font>

237
00:10:26,490 --> 00:10:33,030
want<font color="#E5E5E5"> to spend the</font><font color="#CCCCCC"> next maybe 15 to 20</font>

238
00:10:30,420 --> 00:10:35,760
minutes<font color="#E5E5E5"> going deeper into one specific</font>

239
00:10:33,030 --> 00:10:39,360
<font color="#E5E5E5">kind of work we had in Microsoft</font>

240
00:10:35,760 --> 00:10:43,500
<font color="#E5E5E5">Research which is called detecting</font>

241
00:10:39,360 --> 00:10:45,540
variable misuse bugs so the<font color="#CCCCCC"> high-level</font>

242
00:10:43,500 --> 00:10:47,540
<font color="#CCCCCC">idea is the following let's take this</font>

243
00:10:45,540 --> 00:10:51,810
<font color="#CCCCCC">labor</font><font color="#E5E5E5"> this is from an open source</font>

244
00:10:47,540 --> 00:10:53,699
database<font color="#E5E5E5"> system in c-sharp</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> I'm</font>

245
00:10:51,810 --> 00:10:55,079
going to do and this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> same game</font>

246
00:10:53,700 --> 00:10:57,090
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> play with my machine</font>

247
00:10:55,080 --> 00:11:00,990
learning algorithm<font color="#E5E5E5"> is I'm going</font><font color="#CCCCCC"> to blank</font>

248
00:10:57,090 --> 00:11:04,640
out this variable usage here now you can

249
00:11:00,990 --> 00:11:07,040
<font color="#CCCCCC">read the code maybe not in the back but</font>

250
00:11:04,640 --> 00:11:10,189
the idea here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> define this</font>

251
00:11:07,040 --> 00:11:12,469
class variable and somehow<font color="#E5E5E5"> that you get</font>

252
00:11:10,190 --> 00:11:15,980
the values then<font color="#CCCCCC"> you assert</font><font color="#E5E5E5"> it's not now</font>

253
00:11:12,470 --> 00:11:18,080
<font color="#CCCCCC">then you define</font><font color="#E5E5E5"> the first variable if</font>

254
00:11:15,980 --> 00:11:21,140
you get it<font color="#E5E5E5"> again somehow and you</font><font color="#CCCCCC"> assert</font>

255
00:11:18,080 --> 00:11:23,090
what is not now<font color="#CCCCCC"> and you continue your</font>

256
00:11:21,140 --> 00:11:24,890
unit<font color="#E5E5E5"> test now</font>

257
00:11:23,090 --> 00:11:28,160
<font color="#E5E5E5">obviously you would probably say that</font>

258
00:11:24,890 --> 00:11:29,569
<font color="#E5E5E5">first</font><font color="#CCCCCC"> a is is what should go in here</font>

259
00:11:28,160 --> 00:11:32,209
because<font color="#E5E5E5"> that's what</font><font color="#CCCCCC"> probably the</font>

260
00:11:29,570 --> 00:11:34,070
developer intended to do<font color="#E5E5E5"> but probably</font>

261
00:11:32,210 --> 00:11:36,290
because<font color="#CCCCCC"> they</font><font color="#E5E5E5"> got here they took the</font>

262
00:11:34,070 --> 00:11:38,180
<font color="#E5E5E5">first two lines</font><font color="#CCCCCC"> pasted over</font><font color="#E5E5E5"> there those</font>

263
00:11:36,290 --> 00:11:39,770
<font color="#E5E5E5">two lines changed a few</font><font color="#CCCCCC"> things on the</font>

264
00:11:38,180 --> 00:11:42,349
first<font color="#E5E5E5"> line and then they forgot to</font>

265
00:11:39,770 --> 00:11:44,510
<font color="#E5E5E5">change the second line so now this is</font>

266
00:11:42,350 --> 00:11:47,090
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> very odd and this</font><font color="#E5E5E5"> is</font>

267
00:11:44,510 --> 00:11:51,200
something<font color="#E5E5E5"> a real</font><font color="#CCCCCC"> bug that our system</font>

268
00:11:47,090 --> 00:11:54,110
actually<font color="#E5E5E5"> caught in in source code you</font>

269
00:11:51,200 --> 00:11:56,000
could say that<font color="#E5E5E5"> yes I can use a linter to</font>

270
00:11:54,110 --> 00:11:58,340
do this and yes of course you<font color="#E5E5E5"> can create</font>

271
00:11:56,000 --> 00:12:01,040
<font color="#E5E5E5">a linked rule that says we I have a</font>

272
00:11:58,340 --> 00:12:02,960
certain<font color="#E5E5E5"> note not now and well I haven't</font>

273
00:12:01,040 --> 00:12:05,390
<font color="#E5E5E5">changed class again so I shouldn't be</font>

274
00:12:02,960 --> 00:12:07,340
checking<font color="#E5E5E5"> this but the problem here is</font>

275
00:12:05,390 --> 00:12:08,900
that we have so<font color="#CCCCCC"> many rules that</font><font color="#E5E5E5"> one</font>

276
00:12:07,340 --> 00:12:11,180
would need to maintain<font color="#E5E5E5"> if you want to do</font>

277
00:12:08,900 --> 00:12:13,670
this in a such a fine grain way that

278
00:12:11,180 --> 00:12:16,310
this would be<font color="#E5E5E5"> very hard and maybe the</font>

279
00:12:13,670 --> 00:12:18,050
specific case happens in another<font color="#CCCCCC"> eye</font>

280
00:12:16,310 --> 00:12:21,020
after<font color="#CCCCCC"> another million lines of code</font>

281
00:12:18,050 --> 00:12:22,849
<font color="#E5E5E5">that's not really good you can</font><font color="#CCCCCC"> say you</font>

282
00:12:21,020 --> 00:12:24,079
can<font color="#CCCCCC"> write formal verifications that's</font>

283
00:12:22,850 --> 00:12:25,690
something<font color="#E5E5E5"> that's programming language</font>

284
00:12:24,080 --> 00:12:28,130
research<font color="#E5E5E5"> has been</font><font color="#CCCCCC"> doing a lot so</font>

285
00:12:25,690 --> 00:12:31,490
<font color="#CCCCCC">mathematical formulas that</font><font color="#E5E5E5"> very vile I</font>

286
00:12:28,130 --> 00:12:34,010
<font color="#E5E5E5">think or you can run unit tests but no</font>

287
00:12:31,490 --> 00:12:36,500
one tests the tests<font color="#CCCCCC"> so in that sense</font>

288
00:12:34,010 --> 00:12:39,170
that's we need<font color="#E5E5E5"> machine learning to catch</font>

289
00:12:36,500 --> 00:12:41,230
these all the<font color="#E5E5E5"> mistakes that are maybe</font>

290
00:12:39,170 --> 00:12:44,089
you know you can<font color="#E5E5E5"> see that's it's not</font>

291
00:12:41,230 --> 00:12:46,280
<font color="#E5E5E5">once you</font><font color="#CCCCCC"> see it it's</font><font color="#E5E5E5"> obvious but in many</font>

292
00:12:44,090 --> 00:12:49,040
cases<font color="#CCCCCC"> when you're writing code you're</font>

293
00:12:46,280 --> 00:12:51,170
stuck<font color="#E5E5E5"> in this mode and cannot see some</font>

294
00:12:49,040 --> 00:12:53,270
some things that once you<font color="#E5E5E5"> find them yes</font>

295
00:12:51,170 --> 00:12:55,430
I<font color="#CCCCCC"> spend my whole day</font><font color="#E5E5E5"> obviously instead</font>

296
00:12:53,270 --> 00:12:57,140
of I should have been<font color="#E5E5E5"> J but you know</font>

297
00:12:55,430 --> 00:12:58,849
these<font color="#CCCCCC"> things take time</font>

298
00:12:57,140 --> 00:13:02,540
so can we use<font color="#CCCCCC"> machine learning to</font>

299
00:12:58,850 --> 00:13:05,990
<font color="#E5E5E5">improve this so the idea is there is the</font>

300
00:13:02,540 --> 00:13:08,599
<font color="#E5E5E5">following we start we start by blanking</font>

301
00:13:05,990 --> 00:13:10,700
out this<font color="#E5E5E5"> variable and we're going to say</font>

302
00:13:08,600 --> 00:13:12,530
<font color="#E5E5E5">big we're in</font><font color="#CCCCCC"> c-sharp land</font><font color="#E5E5E5"> you can</font>

303
00:13:10,700 --> 00:13:14,870
imagine doing<font color="#E5E5E5"> this in other languages</font>

304
00:13:12,530 --> 00:13:17,030
too of course we're going<font color="#E5E5E5"> to say well</font>

305
00:13:14,870 --> 00:13:18,830
given this location from

306
00:13:17,030 --> 00:13:21,050
<font color="#CCCCCC">all the variables that are</font><font color="#E5E5E5"> in scope at</font>

307
00:13:18,830 --> 00:13:23,750
this location and<font color="#E5E5E5"> type correct so the</font>

308
00:13:21,050 --> 00:13:25,849
type<font color="#CCCCCC"> system would not complain</font><font color="#E5E5E5"> which one</font>

309
00:13:23,750 --> 00:13:27,800
should we place here<font color="#E5E5E5"> so in this case</font>

310
00:13:25,850 --> 00:13:30,710
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> we're only</font><font color="#E5E5E5"> only these two</font>

311
00:13:27,800 --> 00:13:32,420
options<font color="#CCCCCC"> so our</font><font color="#E5E5E5"> system needs to pick</font>

312
00:13:30,710 --> 00:13:35,150
among<font color="#E5E5E5"> those two options and</font><font color="#CCCCCC"> as I said</font>

313
00:13:32,420 --> 00:13:37,250
<font color="#CCCCCC">earlier this is not</font><font color="#E5E5E5"> something that is</font>

314
00:13:35,150 --> 00:13:40,730
<font color="#E5E5E5">easy to</font><font color="#CCCCCC"> catch with a static analysis</font>

315
00:13:37,250 --> 00:13:42,680
tool<font color="#CCCCCC"> so here's another example</font><font color="#E5E5E5"> that when</font>

316
00:13:40,730 --> 00:13:44,870
we dogfooding things with<font color="#E5E5E5"> within</font>

317
00:13:42,680 --> 00:13:47,390
<font color="#E5E5E5">Microsoft</font><font color="#CCCCCC"> within the Intel</font><font color="#E5E5E5"> code program</font>

318
00:13:44,870 --> 00:13:50,240
and you see here again<font color="#E5E5E5"> another similar</font>

319
00:13:47,390 --> 00:13:54,080
example you<font color="#E5E5E5"> create a rectangular from</font>

320
00:13:50,240 --> 00:13:56,990
from some coordinates<font color="#E5E5E5"> you say x1 y1 and</font>

321
00:13:54,080 --> 00:14:01,370
then the<font color="#CCCCCC"> height and width</font>

322
00:13:56,990 --> 00:14:04,220
well it's x2 minus x1 y2 minus x1 again

323
00:14:01,370 --> 00:14:08,890
that seems<font color="#CCCCCC"> off so again you can get this</font>

324
00:14:04,220 --> 00:14:12,050
<font color="#E5E5E5">kind of analysis and trying to get this</font>

325
00:14:08,890 --> 00:14:14,660
<font color="#E5E5E5">this in into the in the developers yes</font>

326
00:14:12,050 --> 00:14:17,420
this is once you<font color="#E5E5E5"> see it it's obvious but</font>

327
00:14:14,660 --> 00:14:19,640
in some cases it's not so now the

328
00:14:17,420 --> 00:14:21,589
question<font color="#E5E5E5"> and I'm going to go slightly</font>

329
00:14:19,640 --> 00:14:25,130
deeper<font color="#E5E5E5"> into the machine learning aspects</font>

330
00:14:21,590 --> 00:14:28,940
of things is that is the question how do

331
00:14:25,130 --> 00:14:32,600
we<font color="#E5E5E5"> attack this</font><font color="#CCCCCC"> problem and if</font><font color="#E5E5E5"> you look</font>

332
00:14:28,940 --> 00:14:34,760
at this a<font color="#E5E5E5"> simple snippet of code the</font>

333
00:14:32,600 --> 00:14:36,350
first<font color="#E5E5E5"> approach</font><font color="#CCCCCC"> that research</font><font color="#E5E5E5"> tools let's</font>

334
00:14:34,760 --> 00:14:38,810
treat this as a<font color="#CCCCCC"> natural language</font><font color="#E5E5E5"> let's</font>

335
00:14:36,350 --> 00:14:41,750
take that<font color="#CCCCCC"> this is a series of tokens</font>

336
00:14:38,810 --> 00:14:44,599
just a big long sequence<font color="#E5E5E5"> and from that</font>

337
00:14:41,750 --> 00:14:47,000
let's<font color="#CCCCCC"> try to apply</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> apply some</font>

338
00:14:44,600 --> 00:14:48,740
standard machine<font color="#CCCCCC"> learning methods now</font>

339
00:14:47,000 --> 00:14:50,480
the problem with that<font color="#E5E5E5"> is that you lose a</font>

340
00:14:48,740 --> 00:14:53,360
lot<font color="#E5E5E5"> of context</font><font color="#CCCCCC"> you lose the for example</font>

341
00:14:50,480 --> 00:14:57,080
<font color="#CCCCCC">that this if statement is within this</font>

342
00:14:53,360 --> 00:14:59,960
for statement<font color="#CCCCCC"> or that that there</font><font color="#E5E5E5"> is this</font>

343
00:14:57,080 --> 00:15:02,630
<font color="#E5E5E5">I variable which is used to iterate so</font>

344
00:14:59,960 --> 00:15:05,210
<font color="#CCCCCC">you lose a lot</font><font color="#E5E5E5"> of the structure</font><font color="#CCCCCC"> you can</font>

345
00:15:02,630 --> 00:15:06,920
also may also<font color="#E5E5E5"> want to do this you can</font>

346
00:15:05,210 --> 00:15:09,500
parse the code and compared to<font color="#E5E5E5"> natural</font>

347
00:15:06,920 --> 00:15:11,540
<font color="#CCCCCC">language</font><font color="#E5E5E5"> and NLP and natural</font><font color="#CCCCCC"> language</font>

348
00:15:09,500 --> 00:15:13,700
processing and machine<font color="#CCCCCC"> learning has</font><font color="#E5E5E5"> been</font>

349
00:15:11,540 --> 00:15:17,750
used quite<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot their parsing code</font><font color="#E5E5E5"> is</font>

350
00:15:13,700 --> 00:15:20,120
unambiguous<font color="#CCCCCC"> most of the cases so</font><font color="#E5E5E5"> we can</font>

351
00:15:17,750 --> 00:15:22,370
we<font color="#E5E5E5"> can parse the code create a tree but</font>

352
00:15:20,120 --> 00:15:24,830
and get the abstract syntax<font color="#E5E5E5"> tree out of</font>

353
00:15:22,370 --> 00:15:27,470
<font color="#E5E5E5">here but again we're still missing</font>

354
00:15:24,830 --> 00:15:29,730
<font color="#E5E5E5">something</font><font color="#CCCCCC"> in the other day what we want</font>

355
00:15:27,470 --> 00:15:31,589
to do is we want<font color="#CCCCCC"> to explore this very</font>

356
00:15:29,730 --> 00:15:34,079
each form of structure<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have</font>

357
00:15:31,589 --> 00:15:36,540
things<font color="#E5E5E5"> like you</font><font color="#CCCCCC"> see here</font><font color="#E5E5E5"> like data flow</font>

358
00:15:34,079 --> 00:15:38,729
<font color="#E5E5E5">data flow</font><font color="#CCCCCC"> is very informative that well</font>

359
00:15:36,540 --> 00:15:41,040
we<font color="#CCCCCC"> have I which flows from here to here</font>

360
00:15:38,730 --> 00:15:43,500
to<font color="#E5E5E5"> here to</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> and then maybe once we</font>

361
00:15:41,040 --> 00:15:47,399
do another loop then we<font color="#E5E5E5"> go back and so</font>

362
00:15:43,500 --> 00:15:50,810
<font color="#E5E5E5">on so the idea</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> to encode a</font>

363
00:15:47,399 --> 00:15:53,040
program by a graph and then use a

364
00:15:50,810 --> 00:15:54,810
relatively new machine learning

365
00:15:53,040 --> 00:15:57,660
component called graph neural networks

366
00:15:54,810 --> 00:16:01,469
<font color="#CCCCCC">that essentially can process</font><font color="#E5E5E5"> and</font>

367
00:15:57,660 --> 00:16:05,000
understand<font color="#E5E5E5"> graphs so let's discuss</font><font color="#CCCCCC"> how</font>

368
00:16:01,470 --> 00:16:07,800
we get<font color="#E5E5E5"> to those to</font><font color="#CCCCCC"> those graphs and</font>

369
00:16:05,000 --> 00:16:09,630
again<font color="#E5E5E5"> the many things in machine</font>

370
00:16:07,800 --> 00:16:13,290
learning<font color="#CCCCCC"> is special in deep learning are</font>

371
00:16:09,630 --> 00:16:14,820
design<font color="#E5E5E5"> choices so I'm going to this the</font>

372
00:16:13,290 --> 00:16:17,579
way<font color="#E5E5E5"> that I'm going to describe the graph</font>

373
00:16:14,820 --> 00:16:19,170
is design choices we made this doesn't

374
00:16:17,579 --> 00:16:21,569
mean<font color="#CCCCCC"> that they are</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> unique and the</font>

375
00:16:19,170 --> 00:16:23,639
best choice is<font color="#E5E5E5"> to make this means that</font>

376
00:16:21,570 --> 00:16:26,399
in this design space we pick this point

377
00:16:23,639 --> 00:16:28,709
so let's start constructing<font color="#E5E5E5"> a graph for</font>

378
00:16:26,399 --> 00:16:31,170
<font color="#E5E5E5">this very very simple snippet of code</font>

379
00:16:28,709 --> 00:16:34,290
here<font color="#E5E5E5"> that came up from</font><font color="#CCCCCC"> the previous</font>

380
00:16:31,170 --> 00:16:36,599
previous slide<font color="#CCCCCC"> well first of all these</font>

381
00:16:34,290 --> 00:16:39,689
<font color="#E5E5E5">are my are my tokens I can connect them</font>

382
00:16:36,600 --> 00:16:42,240
<font color="#E5E5E5">into a boring chain of well assert now</font>

383
00:16:39,690 --> 00:16:43,769
like here<font color="#CCCCCC"> a boring chain and they're a</font>

384
00:16:42,240 --> 00:16:46,769
special<font color="#E5E5E5"> type of edge called</font>

385
00:16:43,769 --> 00:16:49,560
next<font color="#E5E5E5"> token that's a bit boring</font><font color="#CCCCCC"> we can</font>

386
00:16:46,769 --> 00:16:51,779
also parse<font color="#E5E5E5"> things and yes that's an</font>

387
00:16:49,560 --> 00:16:53,849
ambiguous so we can create the tree and

388
00:16:51,779 --> 00:16:57,649
we<font color="#E5E5E5"> can connect all the nodes here</font>

389
00:16:53,850 --> 00:17:00,959
<font color="#CCCCCC">through this extra type of edge called</font>

390
00:16:57,649 --> 00:17:03,540
<font color="#CCCCCC">ast child for example so</font><font color="#E5E5E5"> now we have</font>

391
00:17:00,959 --> 00:17:05,428
encoded<font color="#E5E5E5"> the graph the the parts of the</font>

392
00:17:03,540 --> 00:17:08,399
syntactic parts of the graph but still

393
00:17:05,429 --> 00:17:12,630
we are missing many many things<font color="#E5E5E5"> about</font>

394
00:17:08,400 --> 00:17:12,990
<font color="#E5E5E5">these see the semantics of the code over</font>

395
00:17:12,630 --> 00:17:15,540
here

396
00:17:12,990 --> 00:17:17,520
so forget<font color="#CCCCCC"> where about this edges they</font>

397
00:17:15,540 --> 00:17:18,928
will be in they will<font color="#E5E5E5"> be in the graph but</font>

398
00:17:17,520 --> 00:17:21,809
they will stop showing<font color="#CCCCCC"> them in the next</font>

399
00:17:18,929 --> 00:17:25,290
<font color="#E5E5E5">slide and we go to a slightly simpler</font>

400
00:17:21,809 --> 00:17:27,959
example<font color="#E5E5E5"> I'm that doesn't do anything</font>

401
00:17:25,290 --> 00:17:30,330
<font color="#E5E5E5">real but you it has a loop and it will</font>

402
00:17:27,959 --> 00:17:33,360
help<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> describe how to construct why</font>

403
00:17:30,330 --> 00:17:36,059
<font color="#E5E5E5">these semantic aspects semantic features</font>

404
00:17:33,360 --> 00:17:38,399
within<font color="#E5E5E5"> our graphs so the first thing is</font>

405
00:17:36,059 --> 00:17:39,990
we can add a title an extra type of edge

406
00:17:38,400 --> 00:17:42,670
<font color="#CCCCCC">the previous ones are still included</font>

407
00:17:39,990 --> 00:17:45,220
here that is called last right

408
00:17:42,670 --> 00:17:48,760
even a<font color="#CCCCCC"> specific position</font><font color="#E5E5E5"> within our</font>

409
00:17:45,220 --> 00:17:52,270
program like this<font color="#E5E5E5"> why</font><font color="#CCCCCC"> when was the last</font>

410
00:17:48,760 --> 00:17:56,200
time<font color="#E5E5E5"> that</font><font color="#CCCCCC"> y ou got</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this</font>

411
00:17:52,270 --> 00:17:59,190
case Y is just here<font color="#CCCCCC"> it was written just</font>

412
00:17:56,200 --> 00:18:02,290
once<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> you are on</font><font color="#CCCCCC"> X for example</font>

413
00:17:59,190 --> 00:18:05,410
<font color="#CCCCCC">well</font><font color="#E5E5E5"> the first time that X might have</font>

414
00:18:02,290 --> 00:18:07,899
been written<font color="#CCCCCC"> might have</font><font color="#E5E5E5"> been written is</font>

415
00:18:05,410 --> 00:18:11,380
well it depends on really<font color="#E5E5E5"> where you are</font>

416
00:18:07,900 --> 00:18:14,140
right if<font color="#CCCCCC"> you are here</font><font color="#E5E5E5"> the last time you</font>

417
00:18:11,380 --> 00:18:15,910
<font color="#CCCCCC">were you wrote</font><font color="#E5E5E5"> X could</font><font color="#CCCCCC"> be if</font><font color="#E5E5E5"> you're just</font>

418
00:18:14,140 --> 00:18:17,800
entered the loop<font color="#CCCCCC"> it could be</font><font color="#E5E5E5"> just here</font>

419
00:18:15,910 --> 00:18:19,690
<font color="#E5E5E5">but if you're still looping it was the</font>

420
00:18:17,800 --> 00:18:21,460
previous<font color="#E5E5E5"> time you're here so you include</font>

421
00:18:19,690 --> 00:18:23,920
this information<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the graph again</font>

422
00:18:21,460 --> 00:18:26,140
<font color="#CCCCCC">just one way to encode this this</font>

423
00:18:23,920 --> 00:18:30,090
information<font color="#CCCCCC"> the same thing with last</font>

424
00:18:26,140 --> 00:18:33,580
year's when was X for example<font color="#E5E5E5"> last used</font>

425
00:18:30,090 --> 00:18:36,250
<font color="#E5E5E5">used in my program again the same</font><font color="#CCCCCC"> thing</font>

426
00:18:33,580 --> 00:18:38,199
<font color="#E5E5E5">if we're just entering</font><font color="#CCCCCC"> and entering like</font>

427
00:18:36,250 --> 00:18:40,600
<font color="#E5E5E5">Y let's take again that's the simplest</font>

428
00:18:38,200 --> 00:18:43,060
one if we just enter the loop well it

429
00:18:40,600 --> 00:18:46,030
was this instance here but if<font color="#E5E5E5"> we are</font>

430
00:18:43,060 --> 00:18:48,220
looping<font color="#E5E5E5"> well its itself so we can</font>

431
00:18:46,030 --> 00:18:50,320
<font color="#E5E5E5">construct this complex and</font><font color="#CCCCCC"> more complex</font>

432
00:18:48,220 --> 00:18:52,060
graph and add more<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> of semantic</font>

433
00:18:50,320 --> 00:18:54,179
features like computed from<font color="#E5E5E5"> you can</font>

434
00:18:52,060 --> 00:18:57,010
imagine adding more<font color="#E5E5E5"> of those things and</font>

435
00:18:54,180 --> 00:19:00,100
what happens is<font color="#CCCCCC"> that in the end</font><font color="#E5E5E5"> of the</font>

436
00:18:57,010 --> 00:19:02,980
day we have encoded<font color="#E5E5E5"> as much</font><font color="#CCCCCC"> information</font>

437
00:19:00,100 --> 00:19:06,370
as we<font color="#E5E5E5"> think we care at least in our</font>

438
00:19:02,980 --> 00:19:08,980
graph<font color="#E5E5E5"> about our source code</font><font color="#CCCCCC"> so if we</font>

439
00:19:06,370 --> 00:19:11,560
look like<font color="#CCCCCC"> a program like</font><font color="#E5E5E5"> a simple graph</font>

440
00:19:08,980 --> 00:19:13,030
of<font color="#E5E5E5"> a so for this example the graph would</font>

441
00:19:11,560 --> 00:19:14,770
actually look<font color="#CCCCCC"> something like this this</font>

442
00:19:13,030 --> 00:19:17,260
<font color="#CCCCCC">is not meant for</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to read</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> you see</font>

443
00:19:14,770 --> 00:19:20,260
this<font color="#E5E5E5"> already becomes quite complicated</font>

444
00:19:17,260 --> 00:19:23,290
<font color="#CCCCCC">so there</font><font color="#E5E5E5"> are a</font><font color="#CCCCCC"> lot of things to to parse</font>

445
00:19:20,260 --> 00:19:25,150
and what we hope<font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use machine</font>

446
00:19:23,290 --> 00:19:27,520
learning to answer the variable<font color="#CCCCCC"> misuse</font>

447
00:19:25,150 --> 00:19:29,650
problem<font color="#CCCCCC"> I was discussing earlier I'll</font>

448
00:19:27,520 --> 00:19:30,129
get to the point<font color="#CCCCCC"> how we do it in the</font>

449
00:19:29,650 --> 00:19:33,040
next<font color="#E5E5E5"> slide</font>

450
00:19:30,130 --> 00:19:35,500
<font color="#E5E5E5">but on</font><font color="#CCCCCC"> average and</font><font color="#E5E5E5"> this is a very simple</font>

451
00:19:33,040 --> 00:19:37,540
example<font color="#CCCCCC"> our graphs</font><font color="#E5E5E5"> each graph is a</font>

452
00:19:35,500 --> 00:19:39,970
single<font color="#E5E5E5"> example a single piece</font><font color="#CCCCCC"> of code a</font>

453
00:19:37,540 --> 00:19:42,159
single variable<font color="#CCCCCC"> museo systems</font><font color="#E5E5E5"> and you</font>

454
00:19:39,970 --> 00:19:44,620
get<font color="#E5E5E5"> about 900 good notes for graph and</font>

455
00:19:42,160 --> 00:19:46,660
about<font color="#E5E5E5"> 8,000 edges so the graphs are</font><font color="#CCCCCC"> not</font>

456
00:19:44,620 --> 00:19:49,120
huge they're not like the<font color="#CCCCCC"> Facebook graph</font>

457
00:19:46,660 --> 00:19:52,750
of the billion people<font color="#E5E5E5"> but they are</font><font color="#CCCCCC"> not</font>

458
00:19:49,120 --> 00:19:54,520
small either<font color="#E5E5E5"> so this is this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> kind</font>

459
00:19:52,750 --> 00:19:56,429
of the<font color="#E5E5E5"> problem setting where you are at</font>

460
00:19:54,520 --> 00:19:59,100
and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> how we try</font><font color="#E5E5E5"> to</font>

461
00:19:56,429 --> 00:20:00,840
programs within<font color="#E5E5E5"> graphs and of course the</font>

462
00:19:59,100 --> 00:20:02,428
goal here is<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> these graphs push</font>

463
00:20:00,840 --> 00:20:04,918
them into<font color="#E5E5E5"> machine learning component</font>

464
00:20:02,429 --> 00:20:08,399
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we'll discuss in</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> and then get</font>

465
00:20:04,919 --> 00:20:10,590
magically our answer<font color="#E5E5E5"> so how do we</font><font color="#CCCCCC"> encode</font>

466
00:20:08,399 --> 00:20:13,379
specifically the variable misuse problem

467
00:20:10,590 --> 00:20:15,539
<font color="#E5E5E5">and other problems other issues can</font><font color="#CCCCCC"> be</font>

468
00:20:13,379 --> 00:20:17,248
encoded in different ways so we had this

469
00:20:15,539 --> 00:20:19,429
problem here<font color="#CCCCCC"> we blanked out</font><font color="#E5E5E5"> this</font>

470
00:20:17,249 --> 00:20:23,190
variable<font color="#CCCCCC"> so we want to create one graph</font>

471
00:20:19,429 --> 00:20:25,499
<font color="#E5E5E5">one graph for this case here what we're</font>

472
00:20:23,190 --> 00:20:29,190
gonna do is<font color="#E5E5E5"> that well we need to predict</font>

473
00:20:25,499 --> 00:20:32,399
class but that's<font color="#E5E5E5"> not necessarily the the</font>

474
00:20:29,190 --> 00:20:35,490
point here we want you to replace this

475
00:20:32,399 --> 00:20:38,008
syntactical<font color="#CCCCCC"> in the whatever token was</font>

476
00:20:35,490 --> 00:20:41,159
here we<font color="#CCCCCC"> replace it</font><font color="#E5E5E5"> with a slot node in</font>

477
00:20:38,009 --> 00:20:43,740
<font color="#E5E5E5">that is placed in in this location so</font>

478
00:20:41,159 --> 00:20:46,679
now magically<font color="#E5E5E5"> we</font><font color="#CCCCCC"> removed any information</font>

479
00:20:43,740 --> 00:20:49,769
about<font color="#E5E5E5"> what this what this variable</font>

480
00:20:46,679 --> 00:20:51,480
contained here<font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't know what was</font>

481
00:20:49,769 --> 00:20:53,279
originally<font color="#CCCCCC"> here we</font><font color="#E5E5E5"> don't know what it</font>

482
00:20:51,480 --> 00:20:55,740
will be<font color="#CCCCCC"> here this is</font><font color="#E5E5E5"> going to be our</font>

483
00:20:53,279 --> 00:20:57,539
task<font color="#E5E5E5"> let's try to predict that and we're</font>

484
00:20:55,740 --> 00:21:00,059
going to<font color="#E5E5E5"> create extra edges we're going</font>

485
00:20:57,539 --> 00:21:02,369
to cut these Condit symbols as we call

486
00:21:00,059 --> 00:21:04,049
it so<font color="#E5E5E5"> for everything that is</font><font color="#CCCCCC"> good be in</font>

487
00:21:02,369 --> 00:21:06,149
<font color="#E5E5E5">scope and type correct within the slot</font>

488
00:21:04,049 --> 00:21:07,470
location we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> connect it back</font>

489
00:21:06,149 --> 00:21:09,178
to the rest of<font color="#E5E5E5"> the graph we're going</font><font color="#CCCCCC"> to</font>

490
00:21:07,470 --> 00:21:11,610
create<font color="#E5E5E5"> one node so the key in this case</font>

491
00:21:09,179 --> 00:21:13,799
<font color="#E5E5E5">we have two things first</font><font color="#CCCCCC"> and class and</font>

492
00:21:11,610 --> 00:21:15,990
we're going to<font color="#E5E5E5"> do a speculative</font><font color="#CCCCCC"> data</font>

493
00:21:13,799 --> 00:21:18,809
<font color="#CCCCCC">flow analysis</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to say if</font>

494
00:21:15,990 --> 00:21:21,990
first<font color="#E5E5E5"> was in here in a slot how good</font>

495
00:21:18,809 --> 00:21:24,149
data flow around it<font color="#E5E5E5"> if class was in</font><font color="#CCCCCC"> a</font>

496
00:21:21,990 --> 00:21:26,179
slot how would<font color="#CCCCCC"> they to flow</font><font color="#E5E5E5"> around it</font>

497
00:21:24,149 --> 00:21:29,639
<font color="#E5E5E5">and we connect everything here and there</font>

498
00:21:26,179 --> 00:21:34,440
so now we are going so this gives us

499
00:21:29,639 --> 00:21:36,869
essentially<font color="#E5E5E5"> a form of a form of</font><font color="#CCCCCC"> an</font>

500
00:21:34,440 --> 00:21:38,639
objective<font color="#E5E5E5"> what we want to do is we want</font>

501
00:21:36,869 --> 00:21:40,529
<font color="#CCCCCC">to learn</font><font color="#E5E5E5"> something called</font><font color="#CCCCCC"> the</font>

502
00:21:38,639 --> 00:21:41,879
<font color="#E5E5E5">representation in machine learning</font><font color="#CCCCCC"> and I</font>

503
00:21:40,529 --> 00:21:44,759
will discuss a distributed vector

504
00:21:41,879 --> 00:21:48,539
<font color="#E5E5E5">representation I'll get to that in</font><font color="#CCCCCC"> the</font>

505
00:21:44,759 --> 00:21:50,549
next<font color="#E5E5E5"> five five minutes so such that the</font>

506
00:21:48,539 --> 00:21:53,249
representation<font color="#E5E5E5"> of the correct variable</font>

507
00:21:50,549 --> 00:21:54,899
<font color="#E5E5E5">first is as close as possible to the</font>

508
00:21:53,249 --> 00:21:57,210
representation<font color="#CCCCCC"> of the slot variable and</font>

509
00:21:54,899 --> 00:21:59,789
as<font color="#E5E5E5"> far away as possible from the class</font>

510
00:21:57,210 --> 00:22:02,669
variable so<font color="#E5E5E5"> this is what we're going</font>

511
00:21:59,789 --> 00:22:06,600
we're trying to go<font color="#E5E5E5"> to do with machine</font>

512
00:22:02,669 --> 00:22:09,240
<font color="#CCCCCC">learning so this is the problem setting</font>

513
00:22:06,600 --> 00:22:10,029
the our data<font color="#E5E5E5"> is graphs</font><font color="#CCCCCC"> now the question</font>

514
00:22:09,240 --> 00:22:11,710
is

515
00:22:10,029 --> 00:22:15,549
what<font color="#E5E5E5"> are what's in the machine learning</font>

516
00:22:11,710 --> 00:22:17,950
toolkit that<font color="#E5E5E5"> we that can help us with</font>

517
00:22:15,549 --> 00:22:20,889
this problem<font color="#E5E5E5"> so in the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> few minutes</font>

518
00:22:17,950 --> 00:22:22,659
<font color="#E5E5E5">I'll give an overview of the of this</font>

519
00:22:20,889 --> 00:22:26,109
machine learning components I won't<font color="#CCCCCC"> get</font>

520
00:22:22,659 --> 00:22:29,859
<font color="#E5E5E5">into</font><font color="#CCCCCC"> great details</font><font color="#E5E5E5"> because there is not</font>

521
00:22:26,109 --> 00:22:31,899
a sufficient<font color="#E5E5E5"> time so in the in the</font>

522
00:22:29,859 --> 00:22:33,580
beginning of machine learning<font color="#CCCCCC"> if</font><font color="#E5E5E5"> people</font>

523
00:22:31,899 --> 00:22:36,279
have this idea<font color="#CCCCCC"> of local representation</font>

524
00:22:33,580 --> 00:22:38,859
<font color="#E5E5E5">so you have a huge vector where</font>

525
00:22:36,279 --> 00:22:41,969
everything is<font color="#E5E5E5"> zeros but one element one</font>

526
00:22:38,859 --> 00:22:44,349
<font color="#E5E5E5">component is one and now this helps us</font>

527
00:22:41,969 --> 00:22:46,629
<font color="#E5E5E5">discriminate</font><font color="#CCCCCC"> that the first if the first</font>

528
00:22:44,349 --> 00:22:48,999
element<font color="#CCCCCC"> is 1 then our item will be</font><font color="#E5E5E5"> a</font>

529
00:22:46,629 --> 00:22:52,209
<font color="#E5E5E5">banana</font><font color="#CCCCCC"> or the other one will be a mango</font>

530
00:22:48,999 --> 00:22:54,549
and so on so<font color="#E5E5E5"> forth but this is not</font>

531
00:22:52,210 --> 00:22:56,979
necessarily<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most efficient way</font><font color="#CCCCCC"> of</font>

532
00:22:54,549 --> 00:22:58,719
learning<font color="#E5E5E5"> this so with machine learning</font>

533
00:22:56,979 --> 00:23:00,519
with deep learning specifically<font color="#E5E5E5"> we've</font>

534
00:22:58,719 --> 00:23:02,469
moved the<font color="#CCCCCC"> 2 towards</font><font color="#E5E5E5"> these distributed</font>

535
00:23:00,519 --> 00:23:05,619
representations representations that<font color="#CCCCCC"> are</font>

536
00:23:02,469 --> 00:23:07,109
learned<font color="#E5E5E5"> across our data and the idea</font>

537
00:23:05,619 --> 00:23:10,570
<font color="#E5E5E5">here is</font><font color="#CCCCCC"> that we have a much smaller</font>

538
00:23:07,109 --> 00:23:13,589
dimension here but these vectors are

539
00:23:10,570 --> 00:23:17,019
<font color="#E5E5E5">real vectors in a d-dimensional space</font>

540
00:23:13,589 --> 00:23:18,849
and what they do is that they encode in

541
00:23:17,019 --> 00:23:21,580
each of their components some of their

542
00:23:18,849 --> 00:23:24,009
attributes<font color="#E5E5E5"> so the meaning is distributed</font>

543
00:23:21,580 --> 00:23:26,439
across<font color="#CCCCCC"> the components whereas here it's</font>

544
00:23:24,009 --> 00:23:28,359
localized so we can get<font color="#E5E5E5"> these</font>

545
00:23:26,440 --> 00:23:31,029
distributed representations and you can

546
00:23:28,359 --> 00:23:32,619
you<font color="#E5E5E5"> can get this to</font><font color="#CCCCCC"> be anything</font><font color="#E5E5E5"> maybe</font>

547
00:23:31,029 --> 00:23:35,289
<font color="#E5E5E5">you have heard of war - back where -</font>

548
00:23:32,619 --> 00:23:38,439
back<font color="#E5E5E5"> is one of the distributed</font><font color="#CCCCCC"> learning</font>

549
00:23:35,289 --> 00:23:40,658
of representation methods so now we're

550
00:23:38,440 --> 00:23:42,700
going to<font color="#E5E5E5"> graph</font><font color="#CCCCCC"> in real networks and this</font>

551
00:23:40,659 --> 00:23:45,159
is essentially<font color="#E5E5E5"> the core component that</font>

552
00:23:42,700 --> 00:23:48,729
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> us to understand graph to use</font>

553
00:23:45,159 --> 00:23:49,989
graphs<font color="#E5E5E5"> with the machine learning</font><font color="#CCCCCC"> so at</font>

554
00:23:48,729 --> 00:23:52,179
the<font color="#CCCCCC"> very high level</font><font color="#E5E5E5"> look what the</font>

555
00:23:49,989 --> 00:23:54,429
<font color="#CCCCCC">graphical</font><font color="#E5E5E5"> network is is that you have a</font>

556
00:23:52,179 --> 00:23:57,279
graph representation of your problem

557
00:23:54,429 --> 00:23:59,289
that's up to<font color="#E5E5E5"> you what it is also</font><font color="#CCCCCC"> you</font>

558
00:23:57,279 --> 00:24:02,679
have an initial<font color="#E5E5E5"> a set of information</font>

559
00:23:59,289 --> 00:24:04,989
<font color="#CCCCCC">about</font><font color="#E5E5E5"> each node local information about</font>

560
00:24:02,679 --> 00:24:07,059
node a B or C<font color="#CCCCCC"> and these are</font><font color="#E5E5E5"> distributed</font>

561
00:24:04,989 --> 00:24:10,179
vector representations<font color="#CCCCCC"> I showed</font><font color="#E5E5E5"> you</font>

562
00:24:07,059 --> 00:24:12,489
earlier<font color="#CCCCCC"> and by the end of whatever the</font>

563
00:24:10,179 --> 00:24:14,440
<font color="#CCCCCC">graphical data</font><font color="#E5E5E5"> will do what I want to do</font>

564
00:24:12,489 --> 00:24:17,320
is to get representations for those

565
00:24:14,440 --> 00:24:19,720
nodes that say not give me information

566
00:24:17,320 --> 00:24:21,639
<font color="#E5E5E5">not just</font><font color="#CCCCCC"> about the node</font><font color="#E5E5E5"> but how it</font>

567
00:24:19,720 --> 00:24:24,010
belongs<font color="#E5E5E5"> within</font>

568
00:24:21,640 --> 00:24:26,470
within the broader with the broader

569
00:24:24,010 --> 00:24:28,480
graph so how<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is done it is</font><font color="#E5E5E5"> done</font>

570
00:24:26,470 --> 00:24:30,700
through something<font color="#CCCCCC"> called a neural</font>

571
00:24:28,480 --> 00:24:32,590
message passing<font color="#E5E5E5"> the idea is let's take</font>

572
00:24:30,700 --> 00:24:34,480
this part of the graph<font color="#CCCCCC"> here that we have</font>

573
00:24:32,590 --> 00:24:36,610
F D and E<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you have the</font>

574
00:24:34,480 --> 00:24:39,490
representations over<font color="#E5E5E5"> here and the idea</font>

575
00:24:36,610 --> 00:24:41,439
<font color="#CCCCCC">is that if</font><font color="#E5E5E5"> F originally has a current</font>

576
00:24:39,490 --> 00:24:44,410
representation its current state if you

577
00:24:41,440 --> 00:24:47,350
wish<font color="#E5E5E5"> it gets as input</font><font color="#CCCCCC"> it get messages</font>

578
00:24:44,410 --> 00:24:50,020
from its neighbors<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> combine them</font>

579
00:24:47,350 --> 00:24:52,780
somehow<font color="#CCCCCC"> doesn't matter at this</font><font color="#E5E5E5"> point</font>

580
00:24:50,020 --> 00:24:54,700
<font color="#E5E5E5">and you can update your current</font>

581
00:24:52,780 --> 00:24:57,309
representation<font color="#E5E5E5"> so at this point you</font><font color="#CCCCCC"> have</font>

582
00:24:54,700 --> 00:24:59,770
as a node if you are a<font color="#E5E5E5"> single node</font><font color="#CCCCCC"> your</font>

583
00:24:57,309 --> 00:25:01,780
<font color="#CCCCCC">your the node</font><font color="#E5E5E5"> you receive</font><font color="#CCCCCC"> information</font>

584
00:24:59,770 --> 00:25:04,418
from<font color="#E5E5E5"> your direct neighbors you update</font>

585
00:25:01,780 --> 00:25:10,030
your own<font color="#E5E5E5"> state that's a graph a graph a</font>

586
00:25:04,419 --> 00:25:12,220
graph<font color="#CCCCCC"> neural networks so this is maybe</font>

587
00:25:10,030 --> 00:25:14,889
with a bit more<font color="#CCCCCC"> concrete equations I</font>

588
00:25:12,220 --> 00:25:17,890
don't<font color="#E5E5E5"> think we have a lot</font><font color="#CCCCCC"> of time to go</font>

589
00:25:14,890 --> 00:25:19,510
in there the main component is this<font color="#E5E5E5"> gru</font>

590
00:25:17,890 --> 00:25:24,400
this is a type<font color="#CCCCCC"> of an a recurrent neural</font>

591
00:25:19,510 --> 00:25:27,419
network<font color="#E5E5E5"> that is about little updating</font>

592
00:25:24,400 --> 00:25:30,880
<font color="#CCCCCC">states and giving more information so</font>

593
00:25:27,419 --> 00:25:33,309
this<font color="#E5E5E5"> is a graph and then at the first</font>

594
00:25:30,880 --> 00:25:36,490
<font color="#E5E5E5">time step are my node here have just</font>

595
00:25:33,309 --> 00:25:38,350
<font color="#E5E5E5">received information from its distance</font>

596
00:25:36,490 --> 00:25:40,720
<font color="#E5E5E5">one neighborhood the same thing for</font>

597
00:25:38,350 --> 00:25:42,428
<font color="#E5E5E5">every other node because all nodes send</font>

598
00:25:40,720 --> 00:25:43,809
and receive<font color="#CCCCCC"> messages synchronously in</font>

599
00:25:42,429 --> 00:25:46,390
this version<font color="#E5E5E5"> of graph neural networks</font>

600
00:25:43,809 --> 00:25:50,110
<font color="#CCCCCC">and the next step</font><font color="#E5E5E5"> this thing broadens</font>

601
00:25:46,390 --> 00:25:51,940
now my node<font color="#E5E5E5"> my my</font><font color="#CCCCCC"> know to receive</font>

602
00:25:50,110 --> 00:25:53,409
another message<font color="#CCCCCC"> from its neighbor</font><font color="#E5E5E5"> but</font>

603
00:25:51,940 --> 00:25:55,840
its neighbor has already received<font color="#E5E5E5"> their</font>

604
00:25:53,410 --> 00:25:58,120
<font color="#E5E5E5">methods from its own neighbors so now it</font>

605
00:25:55,840 --> 00:26:00,850
has<font color="#E5E5E5"> information about its distance</font><font color="#CCCCCC"> to</font>

606
00:25:58,120 --> 00:26:02,889
neighborhood<font color="#E5E5E5"> so in that sense we are</font>

607
00:26:00,850 --> 00:26:05,049
<font color="#E5E5E5">getting more and</font><font color="#CCCCCC"> more contextual</font>

608
00:26:02,890 --> 00:26:08,590
information as we keep repeating<font color="#E5E5E5"> this</font>

609
00:26:05,049 --> 00:26:10,660
neural message passing algorithm<font color="#E5E5E5"> so</font>

610
00:26:08,590 --> 00:26:12,549
another way<font color="#CCCCCC"> of viewing it is that you</font>

611
00:26:10,660 --> 00:26:15,940
have the graph and you<font color="#E5E5E5"> have it through</font>

612
00:26:12,549 --> 00:26:17,980
time steps<font color="#E5E5E5"> and what happens is</font><font color="#CCCCCC"> DNA</font><font color="#E5E5E5"> pass</font>

613
00:26:15,940 --> 00:26:20,440
<font color="#CCCCCC">messages to</font><font color="#E5E5E5"> F they also may receive</font>

614
00:26:17,980 --> 00:26:23,559
messages and this keeps repeating again

615
00:26:20,440 --> 00:26:25,600
and<font color="#E5E5E5"> again in time and what the idea is</font>

616
00:26:23,559 --> 00:26:28,660
<font color="#E5E5E5">that at the</font><font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the day what's</font>

617
00:26:25,600 --> 00:26:31,209
happening is that<font color="#CCCCCC"> you're you're stuck</font>

618
00:26:28,660 --> 00:26:33,340
here<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output of the</font><font color="#E5E5E5"> graphical network</font>

619
00:26:31,210 --> 00:26:35,350
is H node has a representation<font color="#CCCCCC"> a</font>

620
00:26:33,340 --> 00:26:37,570
<font color="#E5E5E5">distributed the vector representation</font>

621
00:26:35,350 --> 00:26:39,189
and the goal here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you can do</font>

622
00:26:37,570 --> 00:26:41,050
<font color="#E5E5E5">anything with</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> have used for</font>

623
00:26:39,190 --> 00:26:42,430
<font color="#E5E5E5">many things like saying which</font><font color="#CCCCCC"> of those</font>

624
00:26:41,050 --> 00:26:45,580
<font color="#E5E5E5">nodes</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> they pick for example</font>

625
00:26:42,430 --> 00:26:46,930
that's similar<font color="#E5E5E5"> to our problem and like</font>

626
00:26:45,580 --> 00:26:49,870
<font color="#E5E5E5">no classification</font>

627
00:26:46,930 --> 00:26:53,140
<font color="#E5E5E5">should this have a label it should be</font>

628
00:26:49,870 --> 00:26:54,969
blue or red<font color="#CCCCCC"> things like that or managing</font>

629
00:26:53,140 --> 00:26:57,460
<font color="#E5E5E5">I like averaging everything here or</font>

630
00:26:54,970 --> 00:26:59,710
summarizing<font color="#E5E5E5"> it somehow and</font><font color="#CCCCCC"> saying does</font>

631
00:26:57,460 --> 00:27:01,720
<font color="#CCCCCC">this graph have property</font><font color="#E5E5E5"> a or X this has</font>

632
00:26:59,710 --> 00:27:04,000
<font color="#E5E5E5">been used a lot in chemistry about</font>

633
00:27:01,720 --> 00:27:07,060
<font color="#E5E5E5">classifying molecules and molecules can</font>

634
00:27:04,000 --> 00:27:11,320
be<font color="#E5E5E5"> described with graphs going</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font>

635
00:27:07,060 --> 00:27:14,560
variable<font color="#E5E5E5"> Macias the idea here is</font><font color="#CCCCCC"> that we</font>

636
00:27:11,320 --> 00:27:17,439
go and github<font color="#E5E5E5"> scrapes a</font><font color="#CCCCCC"> shop code blank</font>

637
00:27:14,560 --> 00:27:19,750
out each variable<font color="#E5E5E5"> ask whether there any</font>

638
00:27:17,440 --> 00:27:22,210
of the in scope type correct options

639
00:27:19,750 --> 00:27:24,370
<font color="#E5E5E5">which one should we use assuming there</font>

640
00:27:22,210 --> 00:27:26,790
is more than one<font color="#E5E5E5"> and what happens here</font>

641
00:27:24,370 --> 00:27:30,399
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we do get an accuracy of about</font>

642
00:27:26,790 --> 00:27:31,840
85% on projects where we've trained<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a</font>

643
00:27:30,400 --> 00:27:34,360
<font color="#E5E5E5">portion</font><font color="#CCCCCC"> of them and tested another</font>

644
00:27:31,840 --> 00:27:37,600
portion<font color="#E5E5E5"> of them but we also generalize</font>

645
00:27:34,360 --> 00:27:39,879
quite well compared<font color="#E5E5E5"> to some baselines so</font>

646
00:27:37,600 --> 00:27:41,409
maybe this<font color="#CCCCCC"> is a snippet</font><font color="#E5E5E5"> of code a real</font>

647
00:27:39,880 --> 00:27:45,970
snippet of code and<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the task</font>

648
00:27:41,410 --> 00:27:48,250
<font color="#CCCCCC">that our model needs</font><font color="#E5E5E5"> to get so we've</font>

649
00:27:45,970 --> 00:27:50,860
<font color="#CCCCCC">plugged</font><font color="#E5E5E5"> out this variable and now the</font>

650
00:27:48,250 --> 00:27:52,930
<font color="#E5E5E5">question is from the variables that</font><font color="#CCCCCC"> are</font>

651
00:27:50,860 --> 00:27:55,120
in scope and type correct<font color="#E5E5E5"> which one</font>

652
00:27:52,930 --> 00:27:57,400
should we<font color="#CCCCCC"> use so</font><font color="#E5E5E5"> clearly there are</font>

653
00:27:55,120 --> 00:28:00,909
string variables three of them base

654
00:27:57,400 --> 00:28:02,500
directory full path and path now I<font color="#E5E5E5"> won't</font>

655
00:28:00,910 --> 00:28:05,380
ask you<font color="#E5E5E5"> to it's because it's</font><font color="#CCCCCC"> fairly</font>

656
00:28:02,500 --> 00:28:07,120
early morning<font color="#CCCCCC"> to</font><font color="#E5E5E5"> usually ask people can</font>

657
00:28:05,380 --> 00:28:10,240
you can you think<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this if you</font>

658
00:28:07,120 --> 00:28:11,620
think<font color="#CCCCCC"> about it it's not</font><font color="#E5E5E5"> too too hard to</font>

659
00:28:10,240 --> 00:28:13,480
think<font color="#CCCCCC"> about this you need</font><font color="#E5E5E5"> to reason a</font>

660
00:28:11,620 --> 00:28:16,510
bit about the<font color="#E5E5E5"> data flow how things are</font>

661
00:28:13,480 --> 00:28:18,940
are abused<font color="#E5E5E5"> and then you come</font><font color="#CCCCCC"> up with</font>

662
00:28:16,510 --> 00:28:21,400
full path and they did that's<font color="#E5E5E5"> what a</font>

663
00:28:18,940 --> 00:28:22,900
lagoon also says that full path should

664
00:28:21,400 --> 00:28:25,180
be here<font color="#E5E5E5"> it does that in a few</font>

665
00:28:22,900 --> 00:28:28,210
milliseconds though<font color="#E5E5E5"> so in that sense</font>

666
00:28:25,180 --> 00:28:30,040
that's that's something<font color="#E5E5E5"> that help gets</font>

667
00:28:28,210 --> 00:28:35,260
us closer<font color="#E5E5E5"> to understanding the source</font>

668
00:28:30,040 --> 00:28:38,540
<font color="#CCCCCC">code so</font><font color="#E5E5E5"> so this is this is essentially</font>

669
00:28:35,260 --> 00:28:41,810
<font color="#E5E5E5">how our model kind of works in</font>

670
00:28:38,540 --> 00:28:44,510
in many cases<font color="#CCCCCC"> and of course it makes</font>

671
00:28:41,810 --> 00:28:46,730
<font color="#CCCCCC">mistakes in some cases so we don't</font>

672
00:28:44,510 --> 00:28:49,280
<font color="#CCCCCC">further</font><font color="#E5E5E5"> this internally within Microsoft</font>

673
00:28:46,730 --> 00:28:51,890
within<font color="#CCCCCC"> the centella</font><font color="#E5E5E5"> code program and</font>

674
00:28:49,280 --> 00:28:54,920
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a real bug that that we caught</font>

675
00:28:51,890 --> 00:28:58,130
someone was logging something<font color="#E5E5E5"> but then</font>

676
00:28:54,920 --> 00:29:00,800
here they decided<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use well added</font>

677
00:28:58,130 --> 00:29:02,960
existing document<font color="#CCCCCC"> really no you wanted</font>

678
00:29:00,800 --> 00:29:05,210
<font color="#E5E5E5">to use added new document</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> so you</font>

679
00:29:02,960 --> 00:29:08,270
get<font color="#E5E5E5"> this</font><font color="#CCCCCC"> kind of errors that people</font><font color="#E5E5E5"> did</font>

680
00:29:05,210 --> 00:29:10,730
make<font color="#E5E5E5"> and in many cases this</font><font color="#CCCCCC"> is this</font><font color="#E5E5E5"> a</font>

681
00:29:08,270 --> 00:29:12,560
good<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> overall I think</font><font color="#E5E5E5"> we found we</font>

682
00:29:10,730 --> 00:29:14,570
learned a lot of lessons and that's<font color="#E5E5E5"> my</font>

683
00:29:12,560 --> 00:29:17,360
<font color="#E5E5E5">next</font><font color="#CCCCCC"> slide but we've</font><font color="#E5E5E5"> decided to</font>

684
00:29:14,570 --> 00:29:19,429
discontinue<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dogfooding dogfooding</font>

685
00:29:17,360 --> 00:29:22,639
that has been happening for<font color="#CCCCCC"> the past</font>

686
00:29:19,430 --> 00:29:25,460
<font color="#E5E5E5">year so the main thing is</font><font color="#CCCCCC"> that first</font><font color="#E5E5E5"> of</font>

687
00:29:22,640 --> 00:29:27,500
<font color="#E5E5E5">all we haven't solved</font><font color="#CCCCCC"> the user</font>

688
00:29:25,460 --> 00:29:29,960
<font color="#E5E5E5">experience we haven't solved how to</font>

689
00:29:27,500 --> 00:29:32,060
communicate<font color="#CCCCCC"> to developers</font><font color="#E5E5E5"> that maybe</font>

690
00:29:29,960 --> 00:29:34,730
don't<font color="#E5E5E5"> have any experience with machine</font>

691
00:29:32,060 --> 00:29:37,429
learning<font color="#CCCCCC"> that our decisions</font><font color="#E5E5E5"> first of all</font>

692
00:29:34,730 --> 00:29:41,450
are probabilistic<font color="#E5E5E5"> as you saw here we had</font>

693
00:29:37,430 --> 00:29:43,850
<font color="#CCCCCC">an 92% confidence but it's never 100% it</font>

694
00:29:41,450 --> 00:29:45,680
will<font color="#E5E5E5"> never be with machine learning and</font>

695
00:29:43,850 --> 00:29:48,020
also<font color="#CCCCCC"> at the same time it's really hard</font>

696
00:29:45,680 --> 00:29:51,320
<font color="#CCCCCC">to tell people</font><font color="#E5E5E5"> you're wrong so in that</font>

697
00:29:48,020 --> 00:29:53,750
sense we need we<font color="#CCCCCC"> need to be to</font><font color="#E5E5E5"> be to be</font>

698
00:29:51,320 --> 00:29:56,240
better as a community<font color="#CCCCCC"> in finding ways to</font>

699
00:29:53,750 --> 00:29:57,860
say this of course there are<font color="#E5E5E5"> the</font>

700
00:29:56,240 --> 00:29:59,780
questions of false positives how do you

701
00:29:57,860 --> 00:30:02,389
explain false positives how do you let

702
00:29:59,780 --> 00:30:04,940
the users believe<font color="#CCCCCC"> that in some</font><font color="#E5E5E5"> cases you</font>

703
00:30:02,390 --> 00:30:06,830
<font color="#CCCCCC">have false positives that's fine it's up</font>

704
00:30:04,940 --> 00:30:09,140
<font color="#E5E5E5">to you to judge and of course</font><font color="#CCCCCC"> the</font>

705
00:30:06,830 --> 00:30:11,330
developers don't want many false

706
00:30:09,140 --> 00:30:13,880
<font color="#E5E5E5">positives the other thing is machine</font>

707
00:30:11,330 --> 00:30:16,370
learning capabilities<font color="#E5E5E5"> yes in this local</font>

708
00:30:13,880 --> 00:30:20,150
<font color="#E5E5E5">setting of reasoning about code we get</font><font color="#CCCCCC"> a</font>

709
00:30:16,370 --> 00:30:23,540
lot of<font color="#E5E5E5"> things but it's it's not</font>

710
00:30:20,150 --> 00:30:26,750
something<font color="#E5E5E5"> that we you</font><font color="#CCCCCC"> can do at a much</font>

711
00:30:23,540 --> 00:30:29,000
much<font color="#E5E5E5"> larger scale</font><font color="#CCCCCC"> so you cannot take</font>

712
00:30:26,750 --> 00:30:31,130
<font color="#CCCCCC">your full program</font><font color="#E5E5E5"> you're a few billion</font>

713
00:30:29,000 --> 00:30:33,230
<font color="#E5E5E5">lines of code use machine learning</font><font color="#CCCCCC"> and</font>

714
00:30:31,130 --> 00:30:35,270
magically understand all the billions of

715
00:30:33,230 --> 00:30:37,430
lines of code<font color="#E5E5E5"> how they contribute to a</font>

716
00:30:35,270 --> 00:30:39,320
specific<font color="#E5E5E5"> point in your program so I</font>

717
00:30:37,430 --> 00:30:41,360
don't<font color="#E5E5E5"> think as machine learning</font>

718
00:30:39,320 --> 00:30:46,070
researchers we still have a way<font color="#E5E5E5"> to</font>

719
00:30:41,360 --> 00:30:48,110
understand and distill the this<font color="#E5E5E5"> special</font>

720
00:30:46,070 --> 00:30:50,659
form<font color="#CCCCCC"> that source code data has the</font>

721
00:30:48,110 --> 00:30:52,649
structure<font color="#CCCCCC"> the size of all these things</font>

722
00:30:50,660 --> 00:30:55,350
so these are open<font color="#CCCCCC"> questions</font>

723
00:30:52,650 --> 00:30:58,110
that are still<font color="#E5E5E5"> are still bothering us</font>

724
00:30:55,350 --> 00:30:59,730
<font color="#E5E5E5">then there is metrics and this is the</font>

725
00:30:58,110 --> 00:31:02,879
I'm going<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> at this</font><font color="#E5E5E5"> into the next</font>

726
00:30:59,730 --> 00:31:05,250
slide a bit<font color="#E5E5E5"> but in in machine</font><font color="#CCCCCC"> learning</font>

727
00:31:02,880 --> 00:31:07,260
<font color="#E5E5E5">you have a loss function</font><font color="#CCCCCC"> you have an</font>

728
00:31:05,250 --> 00:31:09,300
something you're trying<font color="#CCCCCC"> to optimize</font><font color="#E5E5E5"> you</font>

729
00:31:07,260 --> 00:31:12,660
want to be as accurate at predicting<font color="#CCCCCC"> X</font>

730
00:31:09,300 --> 00:31:15,180
you want to have the minimal loss over

731
00:31:12,660 --> 00:31:17,460
something<font color="#E5E5E5"> in software engineering we</font>

732
00:31:15,180 --> 00:31:20,700
don't always have that<font color="#E5E5E5"> what is how do</font>

733
00:31:17,460 --> 00:31:22,170
you<font color="#CCCCCC"> measure quality</font><font color="#E5E5E5"> of a project yes</font>

734
00:31:20,700 --> 00:31:24,480
there are some metrics<font color="#E5E5E5"> but these are</font>

735
00:31:22,170 --> 00:31:26,670
very<font color="#CCCCCC"> high</font><font color="#E5E5E5"> level things how do you use</font>

736
00:31:24,480 --> 00:31:28,560
machine learning<font color="#CCCCCC"> how do you measure</font>

737
00:31:26,670 --> 00:31:30,150
things so that you can optimize<font color="#E5E5E5"> them</font>

738
00:31:28,560 --> 00:31:33,389
with machine<font color="#CCCCCC"> learning</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> that's</font>

739
00:31:30,150 --> 00:31:35,670
another<font color="#E5E5E5"> big and</font><font color="#CCCCCC"> open problem and in</font><font color="#E5E5E5"> the</font>

740
00:31:33,390 --> 00:31:38,250
end we are<font color="#E5E5E5"> we live in a low resource</font>

741
00:31:35,670 --> 00:31:42,150
world<font color="#E5E5E5"> yes there</font><font color="#CCCCCC"> are billions of lines of</font>

742
00:31:38,250 --> 00:31:45,030
code<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> maybe the source code</font>

743
00:31:42,150 --> 00:31:47,940
for<font color="#E5E5E5"> 10 operating systems you don't have</font>

744
00:31:45,030 --> 00:31:50,399
like image net where you<font color="#E5E5E5"> have a thousand</font>

745
00:31:47,940 --> 00:31:52,440
<font color="#E5E5E5">a hundred thousand images and you can</font>

746
00:31:50,400 --> 00:31:55,080
use this to generalize to<font color="#CCCCCC"> the next one</font>

747
00:31:52,440 --> 00:31:57,240
image we have just 10 operating systems

748
00:31:55,080 --> 00:31:59,370
let's say<font color="#E5E5E5"> code of database</font><font color="#CCCCCC"> systems</font><font color="#E5E5E5"> and</font>

749
00:31:57,240 --> 00:32:01,620
we need to generalize on the next one

750
00:31:59,370 --> 00:32:04,350
that's that's<font color="#E5E5E5"> already a problem</font><font color="#CCCCCC"> like we</font>

751
00:32:01,620 --> 00:32:06,149
<font color="#CCCCCC">don't we're not</font><font color="#E5E5E5"> this number 10 is</font>

752
00:32:04,350 --> 00:32:08,399
<font color="#E5E5E5">actually small because</font><font color="#CCCCCC"> our software</font>

753
00:32:06,150 --> 00:32:11,160
<font color="#CCCCCC">engineers we try to be smart we will use</font>

754
00:32:08,400 --> 00:32:12,840
things so that's that's a problem<font color="#E5E5E5"> so</font>

755
00:32:11,160 --> 00:32:16,170
going back to<font color="#CCCCCC"> the learning signals which</font>

756
00:32:12,840 --> 00:32:18,540
<font color="#CCCCCC">I think is</font><font color="#E5E5E5"> the main kind of question</font>

757
00:32:16,170 --> 00:32:20,370
here is we<font color="#E5E5E5"> mostly are used in the</font>

758
00:32:18,540 --> 00:32:22,860
supervised learning we<font color="#CCCCCC"> have some input</font>

759
00:32:20,370 --> 00:32:26,010
<font color="#E5E5E5">data we have our model this spherical</font>

760
00:32:22,860 --> 00:32:28,439
cow of our problem and<font color="#E5E5E5"> we try</font><font color="#CCCCCC"> to make a</font>

761
00:32:26,010 --> 00:32:31,080
<font color="#E5E5E5">target prediction and we minimize using</font>

762
00:32:28,440 --> 00:32:35,760
<font color="#CCCCCC">input-output examples</font><font color="#E5E5E5"> x and y this would</font>

763
00:32:31,080 --> 00:32:37,949
be<font color="#CCCCCC"> 0 and we</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to minimize some</font><font color="#E5E5E5"> loss so</font>

764
00:32:35,760 --> 00:32:40,260
essentially something that that says

765
00:32:37,950 --> 00:32:43,830
well<font color="#E5E5E5"> I want to be able to classify</font><font color="#CCCCCC"> this</font>

766
00:32:40,260 --> 00:32:45,930
as<font color="#E5E5E5"> closely as</font><font color="#CCCCCC"> to my real data and it</font>

767
00:32:43,830 --> 00:32:47,790
doesn't seem<font color="#CCCCCC"> that we always have this</font>

768
00:32:45,930 --> 00:32:49,110
with<font color="#CCCCCC"> software engineering and this is an</font>

769
00:32:47,790 --> 00:32:51,210
interesting question interesting

770
00:32:49,110 --> 00:32:54,659
<font color="#E5E5E5">challenge for</font><font color="#CCCCCC"> a for research for</font>

771
00:32:51,210 --> 00:32:57,150
practitioners how can we tweak<font color="#E5E5E5"> our</font>

772
00:32:54,660 --> 00:33:00,000
systems what<font color="#E5E5E5"> do we need to change</font><font color="#CCCCCC"> how do</font>

773
00:32:57,150 --> 00:33:02,520
we measure<font color="#E5E5E5"> things so instead of a</font>

774
00:33:00,000 --> 00:33:04,110
<font color="#E5E5E5">conclusion I think is just to tell you</font>

775
00:33:02,520 --> 00:33:06,359
<font color="#E5E5E5">that there I think</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> promise here is</font>

776
00:33:04,110 --> 00:33:08,939
that machine<font color="#E5E5E5"> learning</font><font color="#CCCCCC"> can help</font>

777
00:33:06,359 --> 00:33:12,478
create those tools<font color="#E5E5E5"> that help developers</font>

778
00:33:08,940 --> 00:33:14,399
<font color="#E5E5E5">by removing</font><font color="#CCCCCC"> some small maybe boring slow</font>

779
00:33:12,479 --> 00:33:16,259
<font color="#E5E5E5">tasks that allow the developers to</font><font color="#CCCCCC"> focus</font>

780
00:33:14,399 --> 00:33:19,199
on the actual<font color="#CCCCCC"> software products that</font>

781
00:33:16,259 --> 00:33:21,899
they<font color="#E5E5E5"> are going to build</font><font color="#CCCCCC"> and I think the</font>

782
00:33:19,200 --> 00:33:24,659
<font color="#E5E5E5">idea here is</font><font color="#CCCCCC"> that we need to</font><font color="#E5E5E5"> think of</font>

783
00:33:21,899 --> 00:33:27,539
this as adding an other virtual maybe

784
00:33:24,659 --> 00:33:29,879
member in our team<font color="#E5E5E5"> that initially with</font>

785
00:33:27,539 --> 00:33:33,090
baby steps<font color="#CCCCCC"> will start</font><font color="#E5E5E5"> pushing forward</font>

786
00:33:29,879 --> 00:33:34,859
towards<font color="#CCCCCC"> building greater software so</font>

787
00:33:33,090 --> 00:33:37,320
there<font color="#E5E5E5"> is a lot</font><font color="#CCCCCC"> of work to be done but</font><font color="#E5E5E5"> I</font>

788
00:33:34,859 --> 00:33:39,689
think<font color="#E5E5E5"> it's a very</font><font color="#CCCCCC"> exciting area</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be in</font>

789
00:33:37,320 --> 00:33:52,460
<font color="#E5E5E5">and again thank you for all for</font><font color="#CCCCCC"> being</font>

790
00:33:39,690 --> 00:33:52,460
<font color="#CCCCCC">here</font><font color="#E5E5E5"> this early</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> morning questions</font>

791
00:34:07,350 --> 00:34:14,918
yes<font color="#E5E5E5"> so the question was whether</font><font color="#CCCCCC"> the</font>

792
00:34:11,639 --> 00:34:16,330
weather<font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all the graph neural</font>

793
00:34:14,918 --> 00:34:18,790
network<font color="#CCCCCC"> how do we initialize the</font>

794
00:34:16,330 --> 00:34:22,480
<font color="#E5E5E5">information within the notes and whether</font>

795
00:34:18,790 --> 00:34:24,850
it's let's say<font color="#E5E5E5"> robust to removing bits</font>

796
00:34:22,480 --> 00:34:28,060
and pieces of of the graphical<font color="#CCCCCC"> network</font>

797
00:34:24,850 --> 00:34:31,330
<font color="#E5E5E5">in our case the way we initialize the</font>

798
00:34:28,060 --> 00:34:33,040
the new graphical<font color="#E5E5E5"> network is that we</font>

799
00:34:31,330 --> 00:34:36,159
have<font color="#E5E5E5"> natural language</font><font color="#CCCCCC"> information like</font>

800
00:34:33,040 --> 00:34:37,989
the variable name or the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a type</font>

801
00:34:36,159 --> 00:34:40,090
or the fact that<font color="#CCCCCC"> something I know</font>

802
00:34:37,989 --> 00:34:42,250
there's a dot<font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

803
00:34:40,090 --> 00:34:44,379
<font color="#E5E5E5">we essentially learn these</font><font color="#CCCCCC"> distribute</font>

804
00:34:42,250 --> 00:34:48,668
<font color="#E5E5E5">vector representations for all possible</font>

805
00:34:44,379 --> 00:34:52,719
names<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> possible kind of</font><font color="#E5E5E5"> bits and</font>

806
00:34:48,668 --> 00:34:56,469
pieces of of<font color="#E5E5E5"> whatever these nodes</font>

807
00:34:52,719 --> 00:34:58,060
represents<font color="#CCCCCC"> we in in the C sharp land we</font>

808
00:34:56,469 --> 00:34:59,859
add type<font color="#E5E5E5"> information because we have</font>

809
00:34:58,060 --> 00:35:01,509
that<font color="#E5E5E5"> if you imagine a Python or</font>

810
00:34:59,859 --> 00:35:03,790
<font color="#E5E5E5">JavaScript land that we</font><font color="#CCCCCC"> wouldn't others</font>

811
00:35:01,510 --> 00:35:06,970
<font color="#E5E5E5">so there is a lot</font><font color="#CCCCCC"> of flexibility this</font><font color="#E5E5E5"> is</font>

812
00:35:03,790 --> 00:35:10,480
our design choice<font color="#E5E5E5"> so now with regards to</font>

813
00:35:06,970 --> 00:35:12,549
<font color="#E5E5E5">the other question in practice if you</font>

814
00:35:10,480 --> 00:35:14,859
remove things<font color="#E5E5E5"> that are far away from the</font>

815
00:35:12,550 --> 00:35:16,690
<font color="#E5E5E5">point you care about because in</font><font color="#CCCCCC"> in this</font>

816
00:35:14,859 --> 00:35:20,380
case<font color="#E5E5E5"> we care</font><font color="#CCCCCC"> about a single</font><font color="#E5E5E5"> point a</font>

817
00:35:16,690 --> 00:35:22,990
<font color="#E5E5E5">single place yes that will be fairly</font>

818
00:35:20,380 --> 00:35:25,780
robust<font color="#CCCCCC"> overall there's a lot of research</font>

819
00:35:22,990 --> 00:35:28,689
<font color="#E5E5E5">on adversarial attacks on on graphical</font>

820
00:35:25,780 --> 00:35:32,260
networks<font color="#CCCCCC"> there are cases</font><font color="#E5E5E5"> to trick them</font>

821
00:35:28,690 --> 00:35:33,790
like most neural networks<font color="#E5E5E5"> so they get</font>

822
00:35:32,260 --> 00:35:36,670
the robustness kind of our eyes

823
00:35:33,790 --> 00:35:38,500
depending on the application and<font color="#CCCCCC"> the</font>

824
00:35:36,670 --> 00:35:47,619
data<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> the training</font><font color="#E5E5E5"> method and so</font>

825
00:35:38,500 --> 00:35:49,359
<font color="#CCCCCC">on so</font><font color="#E5E5E5"> the question</font><font color="#CCCCCC"> was why this</font><font color="#E5E5E5"> we</font>

826
00:35:47,619 --> 00:35:53,020
discontinued the variable misuse

827
00:35:49,359 --> 00:35:56,319
dogfooding<font color="#E5E5E5"> I was saying so the first the</font>

828
00:35:53,020 --> 00:35:58,390
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> thing was that it's the</font>

829
00:35:56,320 --> 00:36:02,440
question of<font color="#E5E5E5"> explain ability we cannot</font>

830
00:35:58,390 --> 00:36:05,230
necessarily<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 100%</font><font color="#CCCCCC"> the</font>

831
00:36:02,440 --> 00:36:07,480
developers why we made<font color="#E5E5E5"> the suggestion</font>

832
00:36:05,230 --> 00:36:09,640
even if it's a wrong suggestion in many

833
00:36:07,480 --> 00:36:11,560
cases there is a good reason<font color="#CCCCCC"> or</font><font color="#E5E5E5"> is there</font>

834
00:36:09,640 --> 00:36:13,270
not suggestion<font color="#E5E5E5"> but I know it because I</font>

835
00:36:11,560 --> 00:36:15,750
developed the algorithm<font color="#E5E5E5"> I understand its</font>

836
00:36:13,270 --> 00:36:19,180
internals most software engineers won't

837
00:36:15,750 --> 00:36:20,020
understand it or won't<font color="#CCCCCC"> be bother to read</font>

838
00:36:19,180 --> 00:36:22,240
everything

839
00:36:20,020 --> 00:36:24,670
my<font color="#CCCCCC"> paper to understand why one single</font>

840
00:36:22,240 --> 00:36:38,680
code<font color="#E5E5E5"> review</font><font color="#CCCCCC"> common is</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the I</font><font color="#E5E5E5"> think</font>

841
00:36:24,670 --> 00:36:40,630
<font color="#CCCCCC">that's that's the</font><font color="#E5E5E5"> main problem so we</font>

842
00:36:38,680 --> 00:36:43,419
parse the code with<font color="#E5E5E5"> as an abstract</font>

843
00:36:40,630 --> 00:36:48,400
syntax tree yeah sorry the question<font color="#E5E5E5"> is</font>

844
00:36:43,420 --> 00:36:49,750
whether do we whether we<font color="#CCCCCC"> reduced just</font>

845
00:36:48,400 --> 00:36:52,330
<font color="#E5E5E5">the parse tree or we use the natural</font>

846
00:36:49,750 --> 00:36:53,830
<font color="#CCCCCC">language information so the natural</font>

847
00:36:52,330 --> 00:36:56,940
languages<font color="#E5E5E5"> or within our graphical</font>

848
00:36:53,830 --> 00:36:59,619
network<font color="#E5E5E5"> so there are the graph itself</font>

849
00:36:56,940 --> 00:37:03,340
represents all structural information

850
00:36:59,619 --> 00:37:05,740
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> given deterministically</font><font color="#E5E5E5"> is the</font>

851
00:37:03,340 --> 00:37:08,110
data flow control flow all these kind of

852
00:37:05,740 --> 00:37:10,600
things<font color="#E5E5E5"> but the</font><font color="#CCCCCC"> nodes have the</font>

853
00:37:08,110 --> 00:37:13,540
<font color="#E5E5E5">information like names of variables</font>

854
00:37:10,600 --> 00:37:17,368
names of<font color="#E5E5E5"> methods things like that this</font>

855
00:37:13,540 --> 00:37:19,840
<font color="#E5E5E5">is essentially the this</font><font color="#CCCCCC"> is essentially</font>

856
00:37:17,369 --> 00:37:21,010
<font color="#E5E5E5">how we embed natural language</font>

857
00:37:19,840 --> 00:37:24,010
information<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> add things like</font>

858
00:37:21,010 --> 00:37:25,480
<font color="#CCCCCC">comments</font><font color="#E5E5E5"> we don't add anything anything</font>

859
00:37:24,010 --> 00:37:28,450
<font color="#E5E5E5">else but variable names are very</font>

860
00:37:25,480 --> 00:37:30,250
<font color="#E5E5E5">indicative so that's that's the</font><font color="#CCCCCC"> only</font>

861
00:37:28,450 --> 00:37:32,259
part of the natural language<font color="#CCCCCC"> pirate</font>

862
00:37:30,250 --> 00:37:35,280
aspects we get well I<font color="#CCCCCC"> think we don't</font>

863
00:37:32,260 --> 00:37:35,280
<font color="#E5E5E5">have time I mean</font>

864
00:37:40,700 --> 00:37:42,759
<font color="#E5E5E5">you</font>

