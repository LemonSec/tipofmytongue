1
00:00:19,080 --> 00:00:22,240
[Music]

2
00:00:30,329 --> 00:00:35,890
they<font color="#E5E5E5"> gave how much</font><font color="#CCCCCC"> and welcome</font><font color="#E5E5E5"> everybody</font>

3
00:00:33,030 --> 00:00:38,440
to the second day<font color="#CCCCCC"> of fasting I hope</font>

4
00:00:35,890 --> 00:00:39,970
you're<font color="#E5E5E5"> enjoying it I have to be honest I</font>

5
00:00:38,440 --> 00:00:41,620
had issues<font color="#E5E5E5"> finding like all the</font>

6
00:00:39,970 --> 00:00:45,100
interesting talks<font color="#CCCCCC"> yesterday because</font>

7
00:00:41,620 --> 00:00:47,110
<font color="#E5E5E5">there's so many which is a good sign</font>

8
00:00:45,100 --> 00:00:50,260
obviously so today we'll talk<font color="#E5E5E5"> a little</font>

9
00:00:47,110 --> 00:00:54,909
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> Rapids which is an initiative</font>

10
00:00:50,260 --> 00:00:57,070
by<font color="#E5E5E5"> Nvidia so I work for</font><font color="#CCCCCC"> Nvidia an open</font>

11
00:00:54,909 --> 00:01:00,190
source initiative for doing<font color="#CCCCCC"> data</font><font color="#E5E5E5"> science</font>

12
00:00:57,070 --> 00:01:02,109
<font color="#E5E5E5">as you probably are aware Nvidia is</font>

13
00:01:00,190 --> 00:01:04,378
doing a<font color="#E5E5E5"> sort of neural network based</font>

14
00:01:02,109 --> 00:01:07,330
machine learning for<font color="#E5E5E5"> quite a while now</font>

15
00:01:04,379 --> 00:01:08,860
<font color="#E5E5E5">with</font><font color="#CCCCCC"> Rapids we are also now looking into</font>

16
00:01:07,330 --> 00:01:11,280
more traditional machine learning

17
00:01:08,860 --> 00:01:14,890
algorithms so<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> focus</font><font color="#E5E5E5"> now</font>

18
00:01:11,280 --> 00:01:17,110
and also<font color="#E5E5E5"> sort of everything that goes</font>

19
00:01:14,890 --> 00:01:19,000
<font color="#E5E5E5">around you know not only the machine</font>

20
00:01:17,110 --> 00:01:20,700
<font color="#CCCCCC">learning itself</font><font color="#E5E5E5"> but sort of the the</font>

21
00:01:19,000 --> 00:01:24,820
pre-processing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> post-processing steps</font>

22
00:01:20,700 --> 00:01:26,440
<font color="#CCCCCC">I hope to give</font><font color="#E5E5E5"> you a sort of an idea</font><font color="#CCCCCC"> of</font>

23
00:01:24,820 --> 00:01:31,389
<font color="#E5E5E5">what Rapids is how we can contribute</font>

24
00:01:26,440 --> 00:01:32,560
<font color="#CCCCCC">it's open</font><font color="#E5E5E5"> source and in the end we will</font>

25
00:01:31,390 --> 00:01:34,239
have<font color="#E5E5E5"> for a couple of minutes for</font>

26
00:01:32,560 --> 00:01:36,039
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> I've been told</font><font color="#E5E5E5"> so if you have</font>

27
00:01:34,239 --> 00:01:36,369
<font color="#E5E5E5">questions or anything we can come to me</font>

28
00:01:36,039 --> 00:01:38,319
either

29
00:01:36,369 --> 00:01:42,550
<font color="#E5E5E5">after the talk and we do it offline or</font>

30
00:01:38,319 --> 00:01:45,399
you can ask<font color="#E5E5E5"> obviously so why is this</font>

31
00:01:42,550 --> 00:01:50,050
interesting<font color="#CCCCCC"> as I said it is investing a</font>

32
00:01:45,399 --> 00:01:53,619
lot of<font color="#CCCCCC"> time</font><font color="#E5E5E5"> in in machine learning and</font>

33
00:01:50,050 --> 00:01:56,759
artificial intelligence<font color="#CCCCCC"> the reason being</font>

34
00:01:53,619 --> 00:01:59,379
that it's<font color="#E5E5E5"> been sort of shown at least</font>

35
00:01:56,759 --> 00:02:02,140
you know with by example I mean there's

36
00:01:59,379 --> 00:02:06,129
no proof obviously but by example<font color="#E5E5E5"> that</font>

37
00:02:02,140 --> 00:02:08,530
AI is transforming<font color="#E5E5E5"> industry sort of</font>

38
00:02:06,129 --> 00:02:11,170
<font color="#E5E5E5">across</font><font color="#CCCCCC"> the board</font><font color="#E5E5E5"> right so it's there are</font>

39
00:02:08,530 --> 00:02:12,730
really<font color="#E5E5E5"> products coming</font><font color="#CCCCCC"> out that are</font>

40
00:02:11,170 --> 00:02:15,630
actually<font color="#CCCCCC"> doing things that have</font><font color="#E5E5E5"> been</font>

41
00:02:12,730 --> 00:02:18,420
<font color="#E5E5E5">unthinkable a couple years ago it</font>

42
00:02:15,630 --> 00:02:21,980
to take<font color="#CCCCCC"> healthcare loan you know doing</font>

43
00:02:18,420 --> 00:02:25,290
doing<font color="#E5E5E5"> prediction and and analyzing</font>

44
00:02:21,980 --> 00:02:29,730
x-rays and MRI<font color="#CCCCCC"> scans</font><font color="#E5E5E5"> detecting cancer</font>

45
00:02:25,290 --> 00:02:31,769
early<font color="#CCCCCC"> which has been if possible then</font>

46
00:02:29,730 --> 00:02:33,720
only<font color="#E5E5E5"> with a lot of effort before so as</font>

47
00:02:31,770 --> 00:02:36,450
<font color="#CCCCCC">inhuman</font><font color="#E5E5E5"> people looking at all the MRI</font>

48
00:02:33,720 --> 00:02:39,480
scans and now set of machines<font color="#CCCCCC"> take over</font>

49
00:02:36,450 --> 00:02:40,920
<font color="#E5E5E5">a bulk of the scanning and</font><font color="#CCCCCC"> then the</font>

50
00:02:39,480 --> 00:02:44,910
doctors in the loop of<font color="#E5E5E5"> course for the</font>

51
00:02:40,920 --> 00:02:48,660
final diagnosis<font color="#CCCCCC"> in normal industries you</font>

52
00:02:44,910 --> 00:02:50,670
know<font color="#CCCCCC"> a defect detection</font><font color="#E5E5E5"> just material</font>

53
00:02:48,660 --> 00:02:53,609
science all those things<font color="#E5E5E5"> is sort of</font>

54
00:02:50,670 --> 00:02:55,140
disrupting<font color="#E5E5E5"> a lot of the industries for</font>

55
00:02:53,610 --> 00:02:57,030
making lighter weight cars for example

56
00:02:55,140 --> 00:02:59,399
<font color="#CCCCCC">either</font><font color="#E5E5E5"> with airplanes</font>

57
00:02:57,030 --> 00:03:01,710
finding new composites for fuels<font color="#CCCCCC"> that</font>

58
00:02:59,400 --> 00:03:02,790
burn<font color="#E5E5E5"> bad hands on I don't have to go</font>

59
00:03:01,710 --> 00:03:04,980
through all of them<font color="#E5E5E5"> you can I hope</font>

60
00:03:02,790 --> 00:03:06,840
imagine what the other ones would<font color="#E5E5E5"> be but</font>

61
00:03:04,980 --> 00:03:11,329
of course<font color="#CCCCCC"> come sooner people automotive</font>

62
00:03:06,840 --> 00:03:15,150
self-driving cars<font color="#CCCCCC"> are</font><font color="#E5E5E5"> very popular or</font>

63
00:03:11,330 --> 00:03:16,950
very heavily researched area<font color="#E5E5E5"> where now</font>

64
00:03:15,150 --> 00:03:19,260
common<font color="#E5E5E5"> effectors are actually coming out</font>

65
00:03:16,950 --> 00:03:20,850
with the<font color="#E5E5E5"> first announcements for cars</font>

66
00:03:19,260 --> 00:03:23,340
<font color="#E5E5E5">that are not fully self-driving yet but</font>

67
00:03:20,850 --> 00:03:27,690
have self-driving<font color="#E5E5E5"> or close to</font>

68
00:03:23,340 --> 00:03:29,610
self-driving capabilities<font color="#E5E5E5"> and then for</font>

69
00:03:27,690 --> 00:03:32,960
app it's probably more interesting<font color="#CCCCCC"> is</font>

70
00:03:29,610 --> 00:03:35,370
more on the right side<font color="#E5E5E5"> so retail</font>

71
00:03:32,960 --> 00:03:37,320
financial<font color="#E5E5E5"> industries</font><font color="#CCCCCC"> at tag</font><font color="#E5E5E5"> and so on</font>

72
00:03:35,370 --> 00:03:40,770
<font color="#E5E5E5">those are all industries that use</font>

73
00:03:37,320 --> 00:03:45,870
machine learning already<font color="#E5E5E5"> for for quite a</font>

74
00:03:40,770 --> 00:03:47,370
while<font color="#CCCCCC"> and they tend to use the</font><font color="#E5E5E5"> more</font>

75
00:03:45,870 --> 00:03:50,760
traditional machine learning approaches

76
00:03:47,370 --> 00:03:53,160
right so clustering<font color="#CCCCCC"> EB scan things like</font>

77
00:03:50,760 --> 00:03:55,560
that<font color="#CCCCCC"> or</font><font color="#E5E5E5"> just you know linear regression</font>

78
00:03:53,160 --> 00:03:57,540
those types of algorithms<font color="#E5E5E5"> they are not</font>

79
00:03:55,560 --> 00:03:58,950
really necessarily jumping on neuro

80
00:03:57,540 --> 00:04:01,769
networks<font color="#CCCCCC"> and and</font><font color="#E5E5E5"> that's funny</font>

81
00:03:58,950 --> 00:04:04,980
but with<font color="#CCCCCC"> rapid we hope sort of</font><font color="#E5E5E5"> to to</font>

82
00:04:01,770 --> 00:04:06,510
help those industries<font color="#E5E5E5"> in addition now</font>

83
00:04:04,980 --> 00:04:08,880
the thing<font color="#CCCCCC"> is the data</font><font color="#E5E5E5"> science what makes</font>

84
00:04:06,510 --> 00:04:10,560
it<font color="#CCCCCC"> interesting is</font><font color="#E5E5E5"> the data science</font><font color="#CCCCCC"> is</font>

85
00:04:08,880 --> 00:04:12,950
<font color="#CCCCCC">obviously not a linear</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> not sure</font>

86
00:04:10,560 --> 00:04:15,450
who does the actual<font color="#E5E5E5"> data science</font>

87
00:04:12,950 --> 00:04:17,640
professionally or as a hobbyist<font color="#CCCCCC"> in this</font>

88
00:04:15,450 --> 00:04:19,200
room<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> probably know that</font><font color="#E5E5E5"> it's not</font>

89
00:04:17,640 --> 00:04:20,640
<font color="#E5E5E5">you know it's not that you sit down you</font>

90
00:04:19,200 --> 00:04:22,108
<font color="#E5E5E5">write</font><font color="#CCCCCC"> the code you press play</font><font color="#E5E5E5"> I mean</font>

91
00:04:20,640 --> 00:04:25,729
that doesn't<font color="#E5E5E5"> work with code anyway but</font>

92
00:04:22,108 --> 00:04:27,500
for<font color="#CCCCCC"> data science you have</font><font color="#E5E5E5"> like this</font>

93
00:04:25,730 --> 00:04:29,780
<font color="#E5E5E5">big loop that it going through all the</font>

94
00:04:27,500 --> 00:04:32,180
time right<font color="#E5E5E5"> so you you</font><font color="#CCCCCC"> have data you sort</font>

95
00:04:29,780 --> 00:04:33,830
of have<font color="#CCCCCC"> to prepare it then you tried out</font>

96
00:04:32,180 --> 00:04:35,420
you<font color="#CCCCCC"> know we are networking</font><font color="#E5E5E5"> and machine</font>

97
00:04:33,830 --> 00:04:37,280
learning approach then<font color="#E5E5E5"> you have to tune</font>

98
00:04:35,420 --> 00:04:38,660
the hyper parameters and<font color="#E5E5E5"> then you know</font>

99
00:04:37,280 --> 00:04:39,979
you try it again and then maybe you

100
00:04:38,660 --> 00:04:42,350
prepare your<font color="#CCCCCC"> data a little</font><font color="#E5E5E5"> differently</font>

101
00:04:39,980 --> 00:04:44,000
or you<font color="#E5E5E5"> get more data in more you</font><font color="#CCCCCC"> tried</font>

102
00:04:42,350 --> 00:04:45,050
<font color="#E5E5E5">without the one piece of</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> because</font>

103
00:04:44,000 --> 00:04:47,240
<font color="#E5E5E5">you have to feeling</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> that it's</font>

104
00:04:45,050 --> 00:04:49,280
disrupting<font color="#E5E5E5"> your prediction</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> on so you</font>

105
00:04:47,240 --> 00:04:52,940
<font color="#E5E5E5">have it's not like linear it's like a</font>

106
00:04:49,280 --> 00:04:55,640
lot<font color="#E5E5E5"> of going in a circle</font><font color="#CCCCCC"> and now the</font>

107
00:04:52,940 --> 00:04:57,770
thing<font color="#CCCCCC"> is if you look</font><font color="#E5E5E5"> at those green</font>

108
00:04:55,640 --> 00:05:00,680
boxes<font color="#E5E5E5"> which is data preparation model</font>

109
00:04:57,770 --> 00:05:03,560
training<font color="#E5E5E5"> and</font><font color="#CCCCCC"> visualization and</font><font color="#E5E5E5"> those</font>

110
00:05:00,680 --> 00:05:05,720
three<font color="#E5E5E5"> if model so the training of the</font>

111
00:05:03,560 --> 00:05:10,190
model and<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> the inference of</font>

112
00:05:05,720 --> 00:05:11,690
<font color="#E5E5E5">or the predicting of outcomes is of</font>

113
00:05:10,190 --> 00:05:13,370
course the big piece in<font color="#E5E5E5"> this in the</font>

114
00:05:11,690 --> 00:05:15,560
circle but it's not<font color="#E5E5E5"> everything right</font><font color="#CCCCCC"> so</font>

115
00:05:13,370 --> 00:05:18,650
it means if<font color="#E5E5E5"> you reduce the</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> of this</font>

116
00:05:15,560 --> 00:05:20,120
model training box<font color="#E5E5E5"> that's helpful but it</font>

117
00:05:18,650 --> 00:05:21,739
don't get that doesn't get you<font color="#E5E5E5"> all the</font>

118
00:05:20,120 --> 00:05:25,840
<font color="#E5E5E5">way because the data preparation can be</font>

119
00:05:21,740 --> 00:05:28,580
<font color="#E5E5E5">as well see in a second very significant</font>

120
00:05:25,840 --> 00:05:30,409
so how if you if it became<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dieter</font>

121
00:05:28,580 --> 00:05:33,680
<font color="#CCCCCC">scientist</font><font color="#E5E5E5"> and you've done</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> a while</font>

122
00:05:30,410 --> 00:05:35,690
<font color="#E5E5E5">I'm not sure how many went through this</font>

123
00:05:33,680 --> 00:05:38,360
experience<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> they have a different</font>

124
00:05:35,690 --> 00:05:40,250
experience<font color="#CCCCCC"> feel free to speak</font><font color="#E5E5E5"> up but</font>

125
00:05:38,360 --> 00:05:41,990
from my<font color="#CCCCCC"> experience it's you know you</font>

126
00:05:40,250 --> 00:05:45,350
became a data scientist<font color="#CCCCCC"> because</font><font color="#E5E5E5"> one of</font>

127
00:05:41,990 --> 00:05:47,060
<font color="#E5E5E5">work with data you want</font><font color="#CCCCCC"> to discover new</font>

128
00:05:45,350 --> 00:05:48,680
<font color="#CCCCCC">things right</font><font color="#E5E5E5"> but in reality it</font><font color="#CCCCCC"> looks</font>

129
00:05:47,060 --> 00:05:51,260
like<font color="#E5E5E5"> a day of</font><font color="#CCCCCC"> your life</font><font color="#E5E5E5"> so it started</font>

130
00:05:48,680 --> 00:05:53,750
<font color="#E5E5E5">nine let's say over the overnight</font><font color="#CCCCCC"> is</font>

131
00:05:51,260 --> 00:05:55,880
sort of<font color="#E5E5E5"> brand your latest prediction</font>

132
00:05:53,750 --> 00:05:57,440
from<font color="#E5E5E5"> the infamous today well you know</font><font color="#CCCCCC"> we</font>

133
00:05:55,880 --> 00:05:59,690
<font color="#CCCCCC">tell you download you datasets or</font>

134
00:05:57,440 --> 00:06:00,600
whatever you're<font color="#E5E5E5"> doing and then</font><font color="#CCCCCC"> you start</font>

135
00:05:59,690 --> 00:06:02,340
out<font color="#CCCCCC"> with like doing</font>

136
00:06:00,600 --> 00:06:04,710
analysis what happened overnight sort<font color="#E5E5E5"> of</font>

137
00:06:02,340 --> 00:06:06,810
but then those green parts are the ones

138
00:06:04,710 --> 00:06:08,310
right<font color="#E5E5E5"> to ETL it's called so extract</font>

139
00:06:06,810 --> 00:06:10,230
transform load sort of means<font color="#E5E5E5"> you too</font>

140
00:06:08,310 --> 00:06:11,970
<font color="#E5E5E5">maybe the training you do maybe do the</font>

141
00:06:10,230 --> 00:06:13,620
preparation of a data you have<font color="#E5E5E5"> to join</font>

142
00:06:11,970 --> 00:06:16,800
it with<font color="#E5E5E5"> other data and so on and so</font>

143
00:06:13,620 --> 00:06:18,630
starting<font color="#E5E5E5"> at you know</font><font color="#CCCCCC"> 9:45 your first can</font>

144
00:06:16,800 --> 00:06:20,370
go through your first three<font color="#CCCCCC"> or</font><font color="#E5E5E5"> four</font>

145
00:06:18,630 --> 00:06:23,400
<font color="#CCCCCC">coffees</font><font color="#E5E5E5"> while you're sort of waiting</font><font color="#CCCCCC"> for</font>

146
00:06:20,370 --> 00:06:25,230
the for the one<font color="#E5E5E5"> wrong to go and then</font>

147
00:06:23,400 --> 00:06:27,179
<font color="#E5E5E5">maybe you know it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> twelve you</font>

148
00:06:25,230 --> 00:06:28,650
realize<font color="#CCCCCC"> oh dang</font><font color="#E5E5E5"> it but forgot those five</font>

149
00:06:27,180 --> 00:06:30,840
<font color="#CCCCCC">new features</font><font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> I had last night</font>

150
00:06:28,650 --> 00:06:33,090
<font color="#CCCCCC">in and I forgot</font><font color="#E5E5E5"> to change it in this one</font>

151
00:06:30,840 --> 00:06:34,140
<font color="#E5E5E5">line in this one file right and then you</font>

152
00:06:33,090 --> 00:06:35,849
<font color="#E5E5E5">sort of have to start from the</font><font color="#CCCCCC"> beginning</font>

153
00:06:34,140 --> 00:06:37,440
<font color="#E5E5E5">and and so on so it's it can be a very</font>

154
00:06:35,850 --> 00:06:41,430
frustrating process<font color="#CCCCCC"> right</font><font color="#E5E5E5"> because it's</font>

155
00:06:37,440 --> 00:06:43,170
slow<font color="#CCCCCC"> and obviously data scientists are</font>

156
00:06:41,430 --> 00:06:45,420
very valued resources that highly sought

157
00:06:43,170 --> 00:06:47,250
after<font color="#CCCCCC"> so it doesn't make sense</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

158
00:06:45,420 --> 00:06:51,720
to to<font color="#CCCCCC"> give them</font><font color="#E5E5E5"> the tools they need</font><font color="#CCCCCC"> and</font>

159
00:06:47,250 --> 00:06:53,280
they they deserve and require<font color="#CCCCCC"> that gets</font>

160
00:06:51,720 --> 00:06:55,140
even<font color="#CCCCCC"> more and more</font><font color="#E5E5E5"> important and you</font>

161
00:06:53,280 --> 00:06:57,119
probably see when you work<font color="#E5E5E5"> in data</font>

162
00:06:55,140 --> 00:06:59,760
science<font color="#CCCCCC"> you know how much what this sort</font>

163
00:06:57,120 --> 00:07:01,800
of uptake is and how many<font color="#E5E5E5"> companies that</font>

164
00:06:59,760 --> 00:07:03,150
<font color="#CCCCCC">it may not even have thought that they</font>

165
00:07:01,800 --> 00:07:05,520
<font color="#CCCCCC">are doing</font><font color="#E5E5E5"> data science are suddenly</font>

166
00:07:03,150 --> 00:07:07,049
<font color="#E5E5E5">looking for data scientists most likely</font>

167
00:07:05,520 --> 00:07:09,840
<font color="#E5E5E5">they're all</font><font color="#CCCCCC"> did data science before</font><font color="#E5E5E5"> but</font>

168
00:07:07,050 --> 00:07:12,060
not<font color="#CCCCCC"> in the day</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> scale</font><font color="#E5E5E5"> and one of</font>

169
00:07:09,840 --> 00:07:15,030
the reasons<font color="#CCCCCC"> that on the right side that</font>

170
00:07:12,060 --> 00:07:18,480
<font color="#CCCCCC">just the data the amount</font><font color="#E5E5E5"> of data</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

171
00:07:15,030 --> 00:07:19,770
collect is continuing<font color="#E5E5E5"> to grow</font><font color="#CCCCCC"> depending</font>

172
00:07:18,480 --> 00:07:21,480
<font color="#E5E5E5">on who you believe potentially</font>

173
00:07:19,770 --> 00:07:23,760
exponentially but<font color="#E5E5E5"> at least it's you know</font>

174
00:07:21,480 --> 00:07:27,360
<font color="#E5E5E5">so massive that it usually</font><font color="#CCCCCC"> cannot just</font>

175
00:07:23,760 --> 00:07:29,219
sift through<font color="#CCCCCC"> all the data</font><font color="#E5E5E5"> now there are</font>

176
00:07:27,360 --> 00:07:30,510
some<font color="#CCCCCC"> or</font><font color="#E5E5E5"> my assumptions that most of this</font>

177
00:07:29,220 --> 00:07:33,210
data that<font color="#CCCCCC"> is produced I mean that</font>

178
00:07:30,510 --> 00:07:34,920
includes you<font color="#CCCCCC"> know like can't really read</font>

179
00:07:33,210 --> 00:07:37,409
<font color="#E5E5E5">that but it says like voice over IP and</font>

180
00:07:34,920 --> 00:07:38,940
social<font color="#CCCCCC"> media and web and so on so a lot</font>

181
00:07:37,410 --> 00:07:41,820
<font color="#CCCCCC">of the data that</font><font color="#E5E5E5"> is produced</font><font color="#CCCCCC"> in social</font>

182
00:07:38,940 --> 00:07:44,160
media is maybe not the<font color="#CCCCCC"> most you know</font>

183
00:07:41,820 --> 00:07:46,620
<font color="#E5E5E5">valuable</font><font color="#CCCCCC"> that you need to necessarily</font>

184
00:07:44,160 --> 00:07:48,690
analyze<font color="#E5E5E5"> but the problem is there is</font>

185
00:07:46,620 --> 00:07:49,950
<font color="#E5E5E5">valuable data in there so that means you</font>

186
00:07:48,690 --> 00:07:53,070
still have<font color="#CCCCCC"> to go through all the data</font>

187
00:07:49,950 --> 00:07:54,570
<font color="#E5E5E5">and and to find the valuable</font><font color="#CCCCCC"> data so</font>

188
00:07:53,070 --> 00:07:55,290
even if the<font color="#E5E5E5"> signal-to-noise where you</font>

189
00:07:54,570 --> 00:07:57,030
<font color="#E5E5E5">sure is going</font>

190
00:07:55,290 --> 00:07:58,950
like crazy<font color="#E5E5E5"> that still doesn't make a</font>

191
00:07:57,030 --> 00:08:00,059
data science trap<font color="#E5E5E5"> easier because</font><font color="#CCCCCC"> they</font>

192
00:07:58,950 --> 00:08:04,650
still have to find<font color="#CCCCCC"> the valuable data</font>

193
00:08:00,060 --> 00:08:07,980
<font color="#CCCCCC">wait in the noise and then at the same</font>

194
00:08:04,650 --> 00:08:09,929
<font color="#CCCCCC">time of course</font><font color="#E5E5E5"> the famous Moore's law is</font>

195
00:08:07,980 --> 00:08:11,820
sort of at least<font color="#E5E5E5"> slowing down if not</font>

196
00:08:09,930 --> 00:08:14,400
depending on<font color="#E5E5E5"> who you believe I came to</font>

197
00:08:11,820 --> 00:08:17,040
an<font color="#CCCCCC"> ant by now so that means</font><font color="#E5E5E5"> the this</font>

198
00:08:14,400 --> 00:08:18,479
automatic it just gets faster by by

199
00:08:17,040 --> 00:08:20,940
waiting another year for for the next

200
00:08:18,480 --> 00:08:25,260
<font color="#CCCCCC">computer and that's not or working</font>

201
00:08:20,940 --> 00:08:27,690
anymore<font color="#CCCCCC"> so if you look and you sort</font><font color="#E5E5E5"> of</font>

202
00:08:25,260 --> 00:08:31,830
see this effect<font color="#E5E5E5"> in a traditional data</font>

203
00:08:27,690 --> 00:08:33,270
science<font color="#E5E5E5"> you know basement mature like</font>

204
00:08:31,830 --> 00:08:35,220
you may<font color="#E5E5E5"> have seen</font><font color="#CCCCCC"> that was like you</font>

205
00:08:33,270 --> 00:08:38,640
sometimes<font color="#CCCCCC"> you can probably to</font><font color="#E5E5E5"> university</font>

206
00:08:35,220 --> 00:08:41,160
<font color="#CCCCCC">ones</font><font color="#E5E5E5"> you see</font><font color="#CCCCCC"> lacks</font><font color="#E5E5E5"> after exit</font><font color="#CCCCCC"> racks of</font>

207
00:08:38,640 --> 00:08:42,990
server computers and<font color="#CCCCCC"> deflowered</font><font color="#E5E5E5"> in noisy</font>

208
00:08:41,159 --> 00:08:45,270
and so on<font color="#E5E5E5"> and this would be is</font>

209
00:08:42,990 --> 00:08:48,300
essentially<font color="#E5E5E5"> the equivalent that can</font>

210
00:08:45,270 --> 00:08:52,020
handle a data set<font color="#CCCCCC"> that's from</font><font color="#E5E5E5"> Fannie Mae</font>

211
00:08:48,300 --> 00:08:53,699
the mortgage data set<font color="#CCCCCC"> and those</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font>

212
00:08:52,020 --> 00:08:57,079
three<font color="#E5E5E5"> hundred servers was like three</font>

213
00:08:53,700 --> 00:09:00,150
<font color="#CCCCCC">million dollars</font><font color="#E5E5E5"> runs at 180 kilowatts</font>

214
00:08:57,080 --> 00:09:03,440
<font color="#CCCCCC">and you can replace like this whole</font>

215
00:09:00,150 --> 00:09:06,120
<font color="#E5E5E5">machinery with essentially this are djx</font>

216
00:09:03,440 --> 00:09:09,210
<font color="#E5E5E5">to box a teacher acts as sort of an</font>

217
00:09:06,120 --> 00:09:11,160
<font color="#E5E5E5">immediate appliance you can buy similar</font>

218
00:09:09,210 --> 00:09:13,860
appliances from from other vendors<font color="#CCCCCC"> that</font>

219
00:09:11,160 --> 00:09:16,610
also<font color="#E5E5E5"> use</font><font color="#CCCCCC"> nvidia gpus</font><font color="#E5E5E5"> in them but that is</font>

220
00:09:13,860 --> 00:09:20,280
sort<font color="#CCCCCC"> of our</font><font color="#E5E5E5"> pro our model platform rate</font>

221
00:09:16,610 --> 00:09:22,770
<font color="#E5E5E5">and this whole thing sort of replaces</font>

222
00:09:20,280 --> 00:09:24,150
<font color="#E5E5E5">you know this whole wall</font><font color="#CCCCCC"> of computers is</font>

223
00:09:22,770 --> 00:09:26,760
actually in speed and<font color="#E5E5E5"> it's even</font>

224
00:09:24,150 --> 00:09:29,120
significant fast<font color="#E5E5E5"> I feel look down here</font>

225
00:09:26,760 --> 00:09:31,650
so it's not only speeding up but even

226
00:09:29,120 --> 00:09:33,690
you cannot really<font color="#E5E5E5"> get to the same speed</font>

227
00:09:31,650 --> 00:09:35,189
<font color="#CCCCCC">no matter how many CPUs they</font><font color="#E5E5E5"> add because</font>

228
00:09:33,690 --> 00:09:37,020
<font color="#CCCCCC">they're just flattening out in your</font>

229
00:09:35,190 --> 00:09:38,820
performance<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> reason is of</font><font color="#E5E5E5"> course</font>

230
00:09:37,020 --> 00:09:41,160
<font color="#E5E5E5">if they have</font><font color="#CCCCCC"> serviced each X</font><font color="#E5E5E5"> two parts</font>

231
00:09:38,820 --> 00:09:43,950
<font color="#CCCCCC">are sixteen</font><font color="#E5E5E5"> high-performance you know</font>

232
00:09:41,160 --> 00:09:46,110
server great<font color="#E5E5E5"> cheap using them so that is</font>

233
00:09:43,950 --> 00:09:47,880
a very<font color="#CCCCCC"> dense computer</font><font color="#E5E5E5"> unit and you can</font>

234
00:09:46,110 --> 00:09:49,940
<font color="#CCCCCC">imagine that at some point just</font><font color="#E5E5E5"> data</font>

235
00:09:47,880 --> 00:09:52,850
communication takes over if you

236
00:09:49,940 --> 00:09:54,350
you can't scale out arbitrarily<font color="#E5E5E5"> and with</font>

237
00:09:52,850 --> 00:09:56,510
the DJ<font color="#CCCCCC"> xbox</font><font color="#E5E5E5"> because it's such a dense</font>

238
00:09:54,350 --> 00:09:58,310
<font color="#CCCCCC">complete piece of compute machinery</font><font color="#E5E5E5"> I</font>

239
00:09:56,510 --> 00:10:00,680
mean<font color="#CCCCCC"> we sort of stay in this one machine</font>

240
00:09:58,310 --> 00:10:02,150
<font color="#E5E5E5">and the GPUs have</font><font color="#CCCCCC"> our very high-speed</font>

241
00:10:00,680 --> 00:10:04,660
interconnect that<font color="#CCCCCC"> is called</font><font color="#E5E5E5"> every</font>

242
00:10:02,150 --> 00:10:07,640
<font color="#CCCCCC">Lincoln and usage where the GPUs can</font>

243
00:10:04,660 --> 00:10:10,630
communicate extremely fast<font color="#E5E5E5"> that's why we</font>

244
00:10:07,640 --> 00:10:14,270
get this sort of super linear speed-up

245
00:10:10,630 --> 00:10:16,220
<font color="#E5E5E5">if you look at it the numbers from from</font>

246
00:10:14,270 --> 00:10:18,410
partners that they're experiencing<font color="#E5E5E5"> I'm</font>

247
00:10:16,220 --> 00:10:20,570
not necessarily saying that<font color="#E5E5E5"> all machine</font>

248
00:10:18,410 --> 00:10:24,079
learning<font color="#CCCCCC"> you know if you put it</font><font color="#E5E5E5"> on a GPU</font>

249
00:10:20,570 --> 00:10:26,660
will suddenly get<font color="#CCCCCC"> 200x</font><font color="#E5E5E5"> faster but the</font>

250
00:10:24,080 --> 00:10:28,370
<font color="#CCCCCC">ones</font><font color="#E5E5E5"> like we have partners</font><font color="#CCCCCC"> that actually</font>

251
00:10:26,660 --> 00:10:31,790
get those<font color="#E5E5E5"> speed ups already in</font>

252
00:10:28,370 --> 00:10:34,040
production<font color="#E5E5E5"> so from</font><font color="#CCCCCC"> aquage for example</font>

253
00:10:31,790 --> 00:10:35,599
they're<font color="#E5E5E5"> using extra boost actually boost</font>

254
00:10:34,040 --> 00:10:37,189
<font color="#E5E5E5">as a framework for</font><font color="#CCCCCC"> gradient boost the</font>

255
00:10:35,600 --> 00:10:38,990
trees<font color="#E5E5E5"> open source and we are</font><font color="#CCCCCC"> heavily</font>

256
00:10:37,190 --> 00:10:41,660
contributing to them to make sure<font color="#E5E5E5"> that</font>

257
00:10:38,990 --> 00:10:44,870
that<font color="#CCCCCC"> runs well on GPUs they</font><font color="#E5E5E5"> experience</font>

258
00:10:41,660 --> 00:10:48,350
<font color="#CCCCCC">at 259</font><font color="#E5E5E5"> speed-up</font><font color="#CCCCCC"> there's a global</font>

259
00:10:44,870 --> 00:10:50,120
retailer Walmart<font color="#CCCCCC"> that not only was able</font>

260
00:10:48,350 --> 00:10:52,880
<font color="#CCCCCC">to</font><font color="#E5E5E5"> increase its prediction error but</font>

261
00:10:50,120 --> 00:10:55,180
they can also run like improved<font color="#E5E5E5"> the</font>

262
00:10:52,880 --> 00:10:58,430
<font color="#E5E5E5">proof decryption also reduce</font><font color="#CCCCCC"> the errors</font>

263
00:10:55,180 --> 00:11:01,489
<font color="#E5E5E5">but they can run more often</font><font color="#CCCCCC"> and faster</font>

264
00:10:58,430 --> 00:11:03,650
to do the predictions<font color="#E5E5E5"> and of course you</font>

265
00:11:01,490 --> 00:11:06,920
know and every little so if they have to

266
00:11:03,650 --> 00:11:09,230
<font color="#CCCCCC">throw away fewer produce because they</font>

267
00:11:06,920 --> 00:11:15,229
<font color="#E5E5E5">can predict better how much people will</font>

268
00:11:09,230 --> 00:11:16,820
buy the more they save obviously so how

269
00:11:15,230 --> 00:11:22,130
does the data<font color="#E5E5E5"> science workflow look with</font>

270
00:11:16,820 --> 00:11:25,040
rapid<font color="#E5E5E5"> it's hopefully not different to</font><font color="#CCCCCC"> a</font>

271
00:11:22,130 --> 00:11:26,630
traditional<font color="#E5E5E5"> CPU based workflow that's</font>

272
00:11:25,040 --> 00:11:28,490
the whole<font color="#E5E5E5"> point behind this so you in</font>

273
00:11:26,630 --> 00:11:31,010
<font color="#E5E5E5">the ideal case</font><font color="#CCCCCC"> as a data scientist you</font>

274
00:11:28,490 --> 00:11:32,990
wouldn't even know sort of that you're

275
00:11:31,010 --> 00:11:35,600
using<font color="#CCCCCC"> rabbits with the exception that</font>

276
00:11:32,990 --> 00:11:36,680
it's significantly faster hopefully so

277
00:11:35,600 --> 00:11:39,080
you have the three<font color="#E5E5E5"> steps data</font>

278
00:11:36,680 --> 00:11:39,640
preparation<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is you can</font><font color="#E5E5E5"> imagine you</font>

279
00:11:39,080 --> 00:11:41,890
have<font color="#CCCCCC"> data</font>

280
00:11:39,640 --> 00:11:44,920
<font color="#E5E5E5">sources from various</font><font color="#CCCCCC"> while you have data</font>

281
00:11:41,890 --> 00:11:46,750
coming<font color="#CCCCCC"> from various</font><font color="#E5E5E5"> sources</font><font color="#CCCCCC"> you know you</font>

282
00:11:44,920 --> 00:11:49,120
may have<font color="#E5E5E5"> like your company database that</font>

283
00:11:46,750 --> 00:11:50,680
has you know<font color="#CCCCCC"> housing but let's take the</font>

284
00:11:49,120 --> 00:11:53,590
supermarket as an example<font color="#E5E5E5"> you know how</font>

285
00:11:50,680 --> 00:11:55,540
many bananas<font color="#E5E5E5"> did a</font><font color="#CCCCCC"> cell over what period</font>

286
00:11:53,590 --> 00:11:58,150
of<font color="#CCCCCC"> time is up and</font><font color="#E5E5E5"> now you may have a</font>

287
00:11:55,540 --> 00:12:00,400
suspicion or maybe<font color="#E5E5E5"> that has to do with</font>

288
00:11:58,150 --> 00:12:02,020
partially the<font color="#E5E5E5"> weather you know like if</font>

289
00:12:00,400 --> 00:12:04,480
it's nice out maybe people<font color="#E5E5E5"> buy more</font>

290
00:12:02,020 --> 00:12:06,069
<font color="#E5E5E5">bananas because they go picnic if it's</font>

291
00:12:04,480 --> 00:12:09,790
more cold outside or<font color="#CCCCCC"> a meal</font><font color="#E5E5E5"> maybe they</font>

292
00:12:06,070 --> 00:12:12,100
buy fewer bananas<font color="#CCCCCC"> and it can have to do</font>

293
00:12:09,790 --> 00:12:14,140
with<font color="#CCCCCC"> maybe events you know like there</font>

294
00:12:12,100 --> 00:12:15,940
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a big holiday</font><font color="#E5E5E5"> coming up by any</font>

295
00:12:14,140 --> 00:12:17,350
of<font color="#E5E5E5"> those so this other data is most</font>

296
00:12:15,940 --> 00:12:18,810
<font color="#E5E5E5">likely not like the weather is most</font>

297
00:12:17,350 --> 00:12:20,770
likely<font color="#CCCCCC"> not stored</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> your supermarket</font>

298
00:12:18,810 --> 00:12:22,329
<font color="#CCCCCC">database right so that you would maybe</font>

299
00:12:20,770 --> 00:12:24,910
use<font color="#E5E5E5"> a web service</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> all the weather</font>

300
00:12:22,330 --> 00:12:27,520
data to<font color="#CCCCCC"> the predictions over</font><font color="#E5E5E5"> the next</font>

301
00:12:24,910 --> 00:12:29,709
two months<font color="#CCCCCC"> let's see and so you have</font>

302
00:12:27,520 --> 00:12:32,560
like different<font color="#E5E5E5"> data</font><font color="#CCCCCC"> sources that it ends</font>

303
00:12:29,710 --> 00:12:34,840
sort<font color="#E5E5E5"> of have to first combine we have to</font>

304
00:12:32,560 --> 00:12:37,000
make<font color="#E5E5E5"> sure that you match sort of the the</font>

305
00:12:34,840 --> 00:12:38,590
date format<font color="#E5E5E5"> that your weather prediction</font>

306
00:12:37,000 --> 00:12:40,690
service<font color="#E5E5E5"> uses to the date format that</font><font color="#CCCCCC"> a</font>

307
00:12:38,590 --> 00:12:42,340
<font color="#E5E5E5">database uses and</font><font color="#CCCCCC"> maybe data is</font>

308
00:12:40,690 --> 00:12:43,390
incomplete in<font color="#CCCCCC"> noisy or usually it is</font>

309
00:12:42,340 --> 00:12:45,700
sort of means<font color="#E5E5E5"> you have to fill</font><font color="#CCCCCC"> in</font>

310
00:12:43,390 --> 00:12:47,260
<font color="#CCCCCC">missing data and</font><font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> handle all</font>

311
00:12:45,700 --> 00:12:51,760
<font color="#E5E5E5">those things that's all part of the data</font>

312
00:12:47,260 --> 00:12:53,170
preparation<font color="#CCCCCC"> and that is usually done I</font>

313
00:12:51,760 --> 00:12:56,439
think<font color="#CCCCCC"> I have a slide about</font><font color="#E5E5E5"> this but I</font>

314
00:12:53,170 --> 00:12:58,810
can see now you<font color="#CCCCCC"> have sort of an</font>

315
00:12:56,440 --> 00:13:00,490
abstraction<font color="#CCCCCC"> if you're using Python</font><font color="#E5E5E5"> an</font>

316
00:12:58,810 --> 00:13:02,469
abstraction<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is called a</font><font color="#E5E5E5"> data frame</font>

317
00:13:00,490 --> 00:13:04,810
<font color="#E5E5E5">the data frame is sort of almost like a</font>

318
00:13:02,470 --> 00:13:07,120
it's a table<font color="#E5E5E5"> of formats or almost like a</font>

319
00:13:04,810 --> 00:13:08,560
<font color="#E5E5E5">database table to come in imagine it and</font>

320
00:13:07,120 --> 00:13:10,870
<font color="#E5E5E5">they have different operations that</font><font color="#CCCCCC"> he</font>

321
00:13:08,560 --> 00:13:12,579
can use on those data frames so that

322
00:13:10,870 --> 00:13:13,690
<font color="#E5E5E5">means</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have one table of your product</font>

323
00:13:12,580 --> 00:13:15,030
<font color="#E5E5E5">and one table of your weather for</font>

324
00:13:13,690 --> 00:13:17,470
example and then you<font color="#E5E5E5"> may</font><font color="#CCCCCC"> want to join</font>

325
00:13:15,030 --> 00:13:19,480
those<font color="#CCCCCC"> two data tables into new data</font>

326
00:13:17,470 --> 00:13:21,550
<font color="#E5E5E5">tables</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very data PC as you see and</font>

327
00:13:19,480 --> 00:13:23,410
then you<font color="#E5E5E5"> may want a group individual</font>

328
00:13:21,550 --> 00:13:25,280
entries in there by certain categories

329
00:13:23,410 --> 00:13:28,069
and then you may want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> sort</font>

330
00:13:25,280 --> 00:13:33,530
and fill in the blanks<font color="#E5E5E5"> those are typical</font>

331
00:13:28,070 --> 00:13:35,030
data preparation pipeline and then once

332
00:13:33,530 --> 00:13:37,490
you have<font color="#E5E5E5"> all the data in sort of a</font>

333
00:13:35,030 --> 00:13:38,600
numeric format like<font color="#E5E5E5"> you that's sort of</font>

334
00:13:37,490 --> 00:13:42,020
the goal<font color="#CCCCCC"> of the data preparation</font>

335
00:13:38,600 --> 00:13:43,940
<font color="#E5E5E5">pipeline is to get to usually is some</font>

336
00:13:42,020 --> 00:13:45,079
form of a matrix with numbers right all

337
00:13:43,940 --> 00:13:47,620
the strings<font color="#E5E5E5"> then they have to be</font>

338
00:13:45,080 --> 00:13:49,460
replaced<font color="#CCCCCC"> with</font><font color="#E5E5E5"> some form of a number</font>

339
00:13:47,620 --> 00:13:51,650
representations<font color="#E5E5E5"> or that machine learning</font>

340
00:13:49,460 --> 00:13:53,930
<font color="#E5E5E5">algorithm</font><font color="#CCCCCC"> can work on that</font><font color="#E5E5E5"> once you have</font>

341
00:13:51,650 --> 00:13:56,449
<font color="#E5E5E5">that you start whatever machine learning</font>

342
00:13:53,930 --> 00:13:58,790
algorithm of your choice<font color="#CCCCCC"> you know could</font>

343
00:13:56,450 --> 00:14:01,400
use actually<font color="#E5E5E5"> pose the principal</font>

344
00:13:58,790 --> 00:14:03,380
component analysis k-means<font color="#CCCCCC"> gain and PB</font>

345
00:14:01,400 --> 00:14:05,420
<font color="#CCCCCC">scan</font><font color="#E5E5E5"> TSU te and</font><font color="#CCCCCC"> you're those who could</font>

346
00:14:03,380 --> 00:14:08,450
also cause<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> try on</font><font color="#E5E5E5"> our traditional</font>

347
00:14:05,420 --> 00:14:11,870
<font color="#CCCCCC">north or</font><font color="#E5E5E5"> newer newer neural network</font>

348
00:14:08,450 --> 00:14:13,460
based<font color="#E5E5E5"> architecture if you wanted to and</font>

349
00:14:11,870 --> 00:14:17,120
<font color="#E5E5E5">then of course you have to sort</font><font color="#CCCCCC"> of</font>

350
00:14:13,460 --> 00:14:18,920
explore and visualize the data because

351
00:14:17,120 --> 00:14:20,300
unless you're sort of in the matrix you

352
00:14:18,920 --> 00:14:22,160
probably won't be<font color="#E5E5E5"> able to</font><font color="#CCCCCC"> look at the</font>

353
00:14:20,300 --> 00:14:24,740
numbers and<font color="#E5E5E5"> know what's going on so</font><font color="#CCCCCC"> you</font>

354
00:14:22,160 --> 00:14:27,939
may have<font color="#E5E5E5"> diagrams and you know</font>

355
00:14:24,740 --> 00:14:30,290
presentations and<font color="#E5E5E5"> you know the</font>

356
00:14:27,940 --> 00:14:32,000
development of<font color="#CCCCCC"> ALR loss for example over</font>

357
00:14:30,290 --> 00:14:33,740
time and so<font color="#E5E5E5"> on so that all those</font>

358
00:14:32,000 --> 00:14:35,540
visualization features<font color="#E5E5E5"> in what if we use</font>

359
00:14:33,740 --> 00:14:37,720
<font color="#E5E5E5">the data scientists will then sort of</font>

360
00:14:35,540 --> 00:14:41,900
estimate<font color="#CCCCCC"> in</font><font color="#E5E5E5"> charge and get a feel</font><font color="#CCCCCC"> for</font>

361
00:14:37,720 --> 00:14:46,580
where your data is science<font color="#E5E5E5"> algorithm me</font>

362
00:14:41,900 --> 00:14:49,220
<font color="#E5E5E5">get improvement from so if you look at</font>

363
00:14:46,580 --> 00:14:51,290
the<font color="#E5E5E5"> effects of</font><font color="#CCCCCC"> wallows and that's the</font>

364
00:14:49,220 --> 00:14:53,270
one<font color="#CCCCCC"> of the big</font><font color="#E5E5E5"> pieces and</font><font color="#CCCCCC"> rapid is that</font>

365
00:14:51,290 --> 00:14:57,050
we not<font color="#E5E5E5"> only look at sort of the model</font>

366
00:14:53,270 --> 00:14:58,699
and training<font color="#CCCCCC"> which with neural networks</font>

367
00:14:57,050 --> 00:15:00,380
that's definitely what<font color="#CCCCCC"> Nvidia focused on</font>

368
00:14:58,700 --> 00:15:04,310
<font color="#E5E5E5">but now we also look at the</font><font color="#CCCCCC"> data</font>

369
00:15:00,380 --> 00:15:05,930
preparation<font color="#E5E5E5"> pipeline and so we call that</font>

370
00:15:04,310 --> 00:15:07,430
an<font color="#E5E5E5"> end-to-end acceleration so in the</font>

371
00:15:05,930 --> 00:15:09,650
ideal<font color="#CCCCCC"> case theta</font><font color="#E5E5E5"> comes out of the</font>

372
00:15:07,430 --> 00:15:11,959
database<font color="#E5E5E5"> or the data source let's call</font>

373
00:15:09,650 --> 00:15:14,180
it and it's immediately<font color="#E5E5E5"> going onto</font><font color="#CCCCCC"> the</font>

374
00:15:11,960 --> 00:15:16,730
GPU<font color="#CCCCCC"> might</font><font color="#E5E5E5"> distribute it and you then</font>

375
00:15:14,180 --> 00:15:18,439
stay on<font color="#E5E5E5"> the GPU and we'll do</font><font color="#CCCCCC"> everything</font>

376
00:15:16,730 --> 00:15:20,360
on the GPU from string processing to

377
00:15:18,440 --> 00:15:21,980
database the operation to<font color="#E5E5E5"> the actual</font>

378
00:15:20,360 --> 00:15:25,370
<font color="#CCCCCC">machine learning if you look at</font><font color="#E5E5E5"> sort of</font>

379
00:15:21,980 --> 00:15:26,900
the<font color="#E5E5E5"> effects that this has is you know if</font>

380
00:15:25,370 --> 00:15:27,770
<font color="#E5E5E5">you're on the very top you may have</font><font color="#CCCCCC"> the</font>

381
00:15:26,900 --> 00:15:29,959
<font color="#E5E5E5">machine</font>

382
00:15:27,770 --> 00:15:32,090
and training part which<font color="#CCCCCC"> is a significant</font>

383
00:15:29,960 --> 00:15:34,880
block but if<font color="#E5E5E5"> you reduce</font><font color="#CCCCCC"> that you know</font>

384
00:15:32,090 --> 00:15:37,100
let's say by 4 X 5 X<font color="#E5E5E5"> whatever this</font><font color="#CCCCCC"> whole</font>

385
00:15:34,880 --> 00:15:38,540
<font color="#CCCCCC">about thing that</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> knows smaller so</font>

386
00:15:37,100 --> 00:15:40,430
that's<font color="#E5E5E5"> good of course but you still have</font>

387
00:15:38,540 --> 00:15:42,439
all<font color="#CCCCCC"> the carrying</font><font color="#E5E5E5"> and the you have to</font>

388
00:15:40,430 --> 00:15:44,479
write to<font color="#CCCCCC"> a distribute trial</font><font color="#E5E5E5"> system and</font>

389
00:15:42,440 --> 00:15:46,360
so on<font color="#E5E5E5"> you have to do the ETL so he tell</font>

390
00:15:44,480 --> 00:15:49,370
<font color="#CCCCCC">us again</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pre-processing</font><font color="#E5E5E5"> of a data</font>

391
00:15:46,360 --> 00:15:50,990
and all those<font color="#E5E5E5"> blocks would remain right</font>

392
00:15:49,370 --> 00:15:53,570
if you don't<font color="#E5E5E5"> move that</font><font color="#CCCCCC"> onto the chip you</font>

393
00:15:50,990 --> 00:15:56,030
<font color="#CCCCCC">to and because we're on distributed on</font>

394
00:15:53,570 --> 00:15:58,190
and stay on<font color="#E5E5E5"> the GPU sort of</font><font color="#CCCCCC"> front-end</font>

395
00:15:56,030 --> 00:15:59,890
<font color="#CCCCCC">they can't get rid of a lot of those</font>

396
00:15:58,190 --> 00:16:05,930
blocks<font color="#E5E5E5"> and get like an overall</font>

397
00:15:59,890 --> 00:16:08,900
significant speed up from that now of

398
00:16:05,930 --> 00:16:12,020
<font color="#CCCCCC">course not</font><font color="#E5E5E5"> sure if anybody tried to</font>

399
00:16:08,900 --> 00:16:14,120
program GPUs<font color="#CCCCCC"> that it's not hard so I you</font>

400
00:16:12,020 --> 00:16:16,130
<font color="#CCCCCC">know if you do parallel programming in</font>

401
00:16:14,120 --> 00:16:18,650
one way<font color="#CCCCCC"> another I would even say it's</font>

402
00:16:16,130 --> 00:16:22,730
often easier than<font color="#CCCCCC"> than</font><font color="#E5E5E5"> a lot of our</font>

403
00:16:18,650 --> 00:16:24,620
<font color="#E5E5E5">other paralyzation strategies to just</font>

404
00:16:22,730 --> 00:16:27,080
write CUDA right away however<font color="#E5E5E5"> there's</font>

405
00:16:24,620 --> 00:16:28,490
still you<font color="#CCCCCC"> know you don't want</font><font color="#E5E5E5"> the data</font>

406
00:16:27,080 --> 00:16:31,060
<font color="#E5E5E5">scientist to be</font><font color="#CCCCCC"> a parallel programming</font>

407
00:16:28,490 --> 00:16:34,880
expert obviously<font color="#CCCCCC"> so you sort</font><font color="#E5E5E5"> of want to</font>

408
00:16:31,060 --> 00:16:36,290
to make<font color="#CCCCCC"> it as easy as possible</font><font color="#E5E5E5"> and so</font>

409
00:16:34,880 --> 00:16:39,950
there are certain<font color="#CCCCCC"> challenges and</font>

410
00:16:36,290 --> 00:16:41,360
especially you have<font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with sort</font><font color="#E5E5E5"> of</font>

411
00:16:39,950 --> 00:16:42,680
<font color="#E5E5E5">the data movement data movement is</font>

412
00:16:41,360 --> 00:16:43,940
<font color="#E5E5E5">always bad because it doesn't do</font>

413
00:16:42,680 --> 00:16:46,160
<font color="#E5E5E5">anything useful for you right you're</font>

414
00:16:43,940 --> 00:16:49,790
<font color="#E5E5E5">just</font><font color="#CCCCCC"> moving data</font><font color="#E5E5E5"> and especially it's</font>

415
00:16:46,160 --> 00:16:51,860
then you know that the slowdown<font color="#CCCCCC"> of the</font>

416
00:16:49,790 --> 00:16:53,209
data movement<font color="#E5E5E5"> operations</font><font color="#CCCCCC"> then always the</font>

417
00:16:51,860 --> 00:16:55,130
weakest link<font color="#E5E5E5"> and especially if you go</font>

418
00:16:53,210 --> 00:16:56,960
<font color="#E5E5E5">distributed in a whole data center</font><font color="#CCCCCC"> and</font>

419
00:16:55,130 --> 00:16:58,010
one node over there's to communicate

420
00:16:56,960 --> 00:16:59,930
with the other node<font color="#E5E5E5"> over there over</font>

421
00:16:58,010 --> 00:17:04,930
multiple<font color="#E5E5E5"> hops you</font><font color="#CCCCCC"> can imagine</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> that</font>

422
00:16:59,930 --> 00:17:07,460
just trashes your your speed up of<font color="#CCCCCC"> all</font>

423
00:17:04,930 --> 00:17:10,940
<font color="#E5E5E5">then another problem is</font><font color="#CCCCCC"> that there are</font>

424
00:17:07,460 --> 00:17:12,650
too many in the<font color="#E5E5E5"> data science world too</font>

425
00:17:10,940 --> 00:17:14,900
many sort<font color="#E5E5E5"> of makeshift data formats that</font>

426
00:17:12,650 --> 00:17:16,970
are very close to<font color="#E5E5E5"> each other but</font><font color="#CCCCCC"> just</font>

427
00:17:14,900 --> 00:17:18,830
not binary<font color="#E5E5E5"> compatible and of course that</font>

428
00:17:16,970 --> 00:17:22,130
means<font color="#E5E5E5"> in every step you then has to</font>

429
00:17:18,829 --> 00:17:25,849
transfer from this<font color="#CCCCCC"> ndle</font><font color="#E5E5E5"> format to this</font>

430
00:17:22,130 --> 00:17:27,200
other frameworks<font color="#E5E5E5"> and Eve</font><font color="#CCCCCC"> array format</font>

431
00:17:25,849 --> 00:17:29,209
which<font color="#CCCCCC"> is almost</font><font color="#E5E5E5"> doing the same but you</font>

432
00:17:27,200 --> 00:17:31,490
know they<font color="#CCCCCC"> manage the</font><font color="#E5E5E5"> fusillade livin and</font>

433
00:17:29,210 --> 00:17:32,260
so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> go across and then you have to</font>

434
00:17:31,490 --> 00:17:35,160
out transfer

435
00:17:32,260 --> 00:17:38,140
data<font color="#E5E5E5"> all the time</font><font color="#CCCCCC"> and that</font><font color="#E5E5E5"> is again a</font>

436
00:17:35,160 --> 00:17:39,940
performance<font color="#E5E5E5"> problem because transforming</font>

437
00:17:38,140 --> 00:17:42,010
data<font color="#E5E5E5"> is essentially done</font><font color="#CCCCCC"> from them copy</font>

438
00:17:39,940 --> 00:17:43,960
operation with a little bit<font color="#E5E5E5"> of you know</font>

439
00:17:42,010 --> 00:17:47,710
switching<font color="#CCCCCC"> a couple of things</font><font color="#E5E5E5"> around a</font>

440
00:17:43,960 --> 00:17:49,870
<font color="#E5E5E5">little bit</font><font color="#CCCCCC"> metadata</font><font color="#E5E5E5"> and that is also</font>

441
00:17:47,710 --> 00:17:52,690
<font color="#E5E5E5">useless essentially if you don't need to</font>

442
00:17:49,870 --> 00:17:54,879
do it<font color="#CCCCCC"> you would</font><font color="#E5E5E5"> prefer not to do and</font>

443
00:17:52,690 --> 00:17:56,680
then of<font color="#CCCCCC"> course you</font><font color="#E5E5E5"> wouldn't want your</font>

444
00:17:54,880 --> 00:17:58,180
data scientists actually<font color="#E5E5E5"> write CUDA</font>

445
00:17:56,680 --> 00:17:59,800
right so the means you have to<font color="#E5E5E5"> have all</font>

446
00:17:58,180 --> 00:18:05,170
<font color="#CCCCCC">this operations also algorithm to</font>

447
00:17:59,800 --> 00:18:06,700
implement<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and then which</font><font color="#CCCCCC"> Nvidia does</font>

448
00:18:05,170 --> 00:18:09,550
not have as much experience<font color="#E5E5E5"> as we</font>

449
00:18:06,700 --> 00:18:11,980
probably should you of course want a

450
00:18:09,550 --> 00:18:13,570
<font color="#E5E5E5">Python API to that</font><font color="#CCCCCC"> rate and GPUs</font>

451
00:18:11,980 --> 00:18:15,610
traditionally I mean there are<font color="#E5E5E5"> open</font>

452
00:18:13,570 --> 00:18:19,780
<font color="#CCCCCC">source projects out there that make the</font>

453
00:18:15,610 --> 00:18:24,550
<font color="#CCCCCC">cheapy available in the Python world</font><font color="#E5E5E5"> but</font>

454
00:18:19,780 --> 00:18:28,090
it's not<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of them is Nvidia backed so</font>

455
00:18:24,550 --> 00:18:29,409
for the data movement<font color="#CCCCCC"> you can imagine</font>

456
00:18:28,090 --> 00:18:32,050
you know<font color="#CCCCCC"> you have a CPU</font><font color="#E5E5E5"> when you have</font>

457
00:18:29,410 --> 00:18:33,640
some application a and P and<font color="#CCCCCC"> you sort</font><font color="#E5E5E5"> of</font>

458
00:18:32,050 --> 00:18:38,040
need<font color="#E5E5E5"> to get the thing over if you now</font>

459
00:18:33,640 --> 00:18:40,900
move things<font color="#CCCCCC"> onto the GPU</font><font color="#E5E5E5"> if you don't</font>

460
00:18:38,040 --> 00:18:42,580
and you<font color="#E5E5E5"> are in a multi node environment</font>

461
00:18:40,900 --> 00:18:44,140
or at least<font color="#E5E5E5"> even if it's a single node</font>

462
00:18:42,580 --> 00:18:46,629
but you have multiple GPUs in<font color="#E5E5E5"> that if</font>

463
00:18:44,140 --> 00:18:48,190
you don't make the GPUs talk to each

464
00:18:46,630 --> 00:18:49,720
other directly in the application<font color="#CCCCCC"> you</font><font color="#E5E5E5"> do</font>

465
00:18:48,190 --> 00:18:52,240
a straightforward porting and<font color="#E5E5E5"> say</font><font color="#CCCCCC"> okay</font>

466
00:18:49,720 --> 00:18:53,980
this piece I move from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> GPU on to the</font>

467
00:18:52,240 --> 00:18:55,900
GPU and<font color="#E5E5E5"> I just copy all the data over</font>

468
00:18:53,980 --> 00:18:57,640
<font color="#E5E5E5">and then you know I copy all the data</font>

469
00:18:55,900 --> 00:18:58,810
back<font color="#CCCCCC"> and then CPU does a little bit and</font>

470
00:18:57,640 --> 00:19:00,250
then I move everything<font color="#E5E5E5"> over again and</font>

471
00:18:58,810 --> 00:19:01,929
move everything back again you can

472
00:19:00,250 --> 00:19:03,940
imagine<font color="#E5E5E5"> that it going over the PCI</font>

473
00:19:01,930 --> 00:19:06,280
<font color="#CCCCCC">Express pass the lottery</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is not</font>

474
00:19:03,940 --> 00:19:08,620
the fastest<font color="#E5E5E5"> option obviously so what you</font>

475
00:19:06,280 --> 00:19:13,720
would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to do ideally</font><font color="#E5E5E5"> is that you</font>

476
00:19:08,620 --> 00:19:16,840
don't<font color="#CCCCCC"> ready essentially for as long</font><font color="#E5E5E5"> as</font>

477
00:19:13,720 --> 00:19:18,520
<font color="#CCCCCC">possible keep the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> CPU out of the</font>

478
00:19:16,840 --> 00:19:21,100
loop<font color="#CCCCCC"> either the CPU is still sort of</font><font color="#E5E5E5"> the</font>

479
00:19:18,520 --> 00:19:22,690
the main driver so the CPU<font color="#CCCCCC"> has the main</font>

480
00:19:21,100 --> 00:19:24,219
program and<font color="#E5E5E5"> says the GPUs what they are</font>

481
00:19:22,690 --> 00:19:27,040
supposed<font color="#CCCCCC"> to do but</font><font color="#E5E5E5"> you want to keep them</font>

482
00:19:24,220 --> 00:19:32,830
<font color="#E5E5E5">the bulk of the data on the GPU it's on</font>

483
00:19:27,040 --> 00:19:34,750
under in the GPU main memory<font color="#E5E5E5"> and as I</font>

484
00:19:32,830 --> 00:19:35,460
said<font color="#CCCCCC"> the GPUs can talk to each other</font>

485
00:19:34,750 --> 00:19:37,260
with

486
00:19:35,460 --> 00:19:39,330
<font color="#E5E5E5">Lincoln and research was like super</font>

487
00:19:37,260 --> 00:19:41,399
<font color="#CCCCCC">high-speed and faster than like way</font>

488
00:19:39,330 --> 00:19:43,439
faster than the PCI<font color="#CCCCCC"> Express possible</font>

489
00:19:41,399 --> 00:19:45,029
<font color="#CCCCCC">bezel so the GPUs can still communicate</font>

490
00:19:43,440 --> 00:19:47,730
with each<font color="#E5E5E5"> other sync with each other</font>

491
00:19:45,029 --> 00:19:49,080
<font color="#CCCCCC">move data back</font><font color="#E5E5E5"> and forth and the CPU is</font>

492
00:19:47,730 --> 00:19:50,669
sort of the main driver telling<font color="#E5E5E5"> the</font>

493
00:19:49,080 --> 00:19:53,428
cheapest<font color="#E5E5E5"> what to do so the coordinator</font>

494
00:19:50,669 --> 00:19:58,500
<font color="#E5E5E5">but you try to avoid actual data copies</font>

495
00:19:53,429 --> 00:20:01,080
over<font color="#E5E5E5"> there over this narrow link the</font>

496
00:19:58,500 --> 00:20:04,770
second part<font color="#E5E5E5"> was too many makeshift data</font>

497
00:20:01,080 --> 00:20:07,139
formats<font color="#E5E5E5"> in my my list if you remember</font><font color="#CCCCCC"> so</font>

498
00:20:04,770 --> 00:20:09,960
here's an example for<font color="#E5E5E5"> that right and how</font>

499
00:20:07,140 --> 00:20:12,720
Apache<font color="#CCCCCC"> arrow sort of is addressing that</font>

500
00:20:09,960 --> 00:20:14,549
<font color="#E5E5E5">and we are we are sort of how do you say</font>

501
00:20:12,720 --> 00:20:18,419
like<font color="#E5E5E5"> using Apache arrow piggybacking on</font>

502
00:20:14,549 --> 00:20:19,529
Apache arrow<font color="#CCCCCC"> and so on the left side</font><font color="#E5E5E5"> you</font>

503
00:20:18,419 --> 00:20:21,720
see<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> have like a lot</font><font color="#CCCCCC"> of</font>

504
00:20:19,529 --> 00:20:24,059
different<font color="#CCCCCC"> applications or</font><font color="#E5E5E5"> frameworks and</font>

505
00:20:21,720 --> 00:20:26,010
they want<font color="#E5E5E5"> to talk to each other and each</font>

506
00:20:24,059 --> 00:20:27,960
of them has to<font color="#CCCCCC"> sort of copy data back</font>

507
00:20:26,010 --> 00:20:29,220
and<font color="#E5E5E5"> forth with each other and everybody</font>

508
00:20:27,960 --> 00:20:31,830
<font color="#E5E5E5">would</font><font color="#CCCCCC"> have to understand everybody</font>

509
00:20:29,220 --> 00:20:33,539
<font color="#E5E5E5">else's format right</font><font color="#CCCCCC"> as I said they're</font>

510
00:20:31,830 --> 00:20:35,309
often<font color="#CCCCCC"> very similar</font><font color="#E5E5E5"> but that</font><font color="#CCCCCC"> does not</font>

511
00:20:33,539 --> 00:20:38,760
<font color="#E5E5E5">binary compatible so there is some</font><font color="#CCCCCC"> work</font>

512
00:20:35,309 --> 00:20:40,500
that<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to do and now with Apache</font>

513
00:20:38,760 --> 00:20:43,860
<font color="#CCCCCC">get all the</font><font color="#E5E5E5"> ideas that Apache</font><font color="#CCCCCC"> arrow</font>

514
00:20:40,500 --> 00:20:47,520
defines an<font color="#E5E5E5"> in-memory layout of your data</font>

515
00:20:43,860 --> 00:20:50,158
a<font color="#E5E5E5"> columnar layout and for all</font>

516
00:20:47,520 --> 00:20:54,299
applications that sort of that Apache

517
00:20:50,159 --> 00:20:55,710
<font color="#E5E5E5">arrow</font><font color="#CCCCCC"> they can</font><font color="#E5E5E5"> then seamlessly</font><font color="#CCCCCC"> you know</font>

518
00:20:54,299 --> 00:20:59,129
talk to<font color="#CCCCCC"> each other because we go through</font>

519
00:20:55,710 --> 00:21:01,440
<font color="#CCCCCC">this common format you don't need to use</font>

520
00:20:59,130 --> 00:21:03,480
Apache<font color="#CCCCCC"> arrows sort of as your internal</font>

521
00:21:01,440 --> 00:21:04,860
while you're processing format but at

522
00:21:03,480 --> 00:21:06,510
least you<font color="#E5E5E5"> want it sort of at</font><font color="#CCCCCC"> the</font>

523
00:21:04,860 --> 00:21:09,750
<font color="#CCCCCC">boundaries right where you</font><font color="#E5E5E5"> interest data</font>

524
00:21:06,510 --> 00:21:11,730
and where you give data<font color="#E5E5E5"> out</font><font color="#CCCCCC"> whenever</font><font color="#E5E5E5"> you</font>

525
00:21:09,750 --> 00:21:13,770
use Apache arrow at this at this

526
00:21:11,730 --> 00:21:21,000
connections then the other applications

527
00:21:13,770 --> 00:21:24,240
<font color="#CCCCCC">can just adapt and attach to you and</font>

528
00:21:21,000 --> 00:21:26,760
then the third<font color="#E5E5E5"> one was like the data</font>

529
00:21:24,240 --> 00:21:31,399
<font color="#CCCCCC">scientist shouldn't need</font><font color="#E5E5E5"> to or should</font><font color="#CCCCCC"> be</font>

530
00:21:26,760 --> 00:21:36,270
required<font color="#E5E5E5"> to write CUDA and</font><font color="#CCCCCC"> you want it -</font>

531
00:21:31,399 --> 00:21:39,029
sort of I will accessible<font color="#CCCCCC"> so are all</font><font color="#E5E5E5"> of</font>

532
00:21:36,270 --> 00:21:39,670
Rapids has an exposed Python<font color="#E5E5E5"> API we try</font>

533
00:21:39,029 --> 00:21:41,560
to be

534
00:21:39,670 --> 00:21:43,980
I have a little<font color="#E5E5E5"> bit about that later</font><font color="#CCCCCC"> I</font>

535
00:21:41,560 --> 00:21:46,179
<font color="#E5E5E5">think</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> try to be compatible to</font>

536
00:21:43,980 --> 00:21:47,830
<font color="#CCCCCC">well-known are not compatible but</font><font color="#E5E5E5"> at</font>

537
00:21:46,180 --> 00:21:51,580
least<font color="#E5E5E5"> inspired if not even</font><font color="#CCCCCC"> proper</font>

538
00:21:47,830 --> 00:21:56,070
<font color="#E5E5E5">replacement</font><font color="#CCCCCC"> to compare</font><font color="#E5E5E5"> to famous or</font>

539
00:21:51,580 --> 00:22:00,909
popular data science<font color="#CCCCCC"> API is in</font><font color="#E5E5E5"> Python so</font>

540
00:21:56,070 --> 00:22:03,909
<font color="#CCCCCC">for the ETL part we sort of do we</font><font color="#E5E5E5"> have a</font>

541
00:22:00,910 --> 00:22:06,790
data frame approach similar to like

542
00:22:03,910 --> 00:22:08,260
spark or pandas<font color="#E5E5E5"> and then so data frames</font>

543
00:22:06,790 --> 00:22:10,659
if you remember would be those tables

544
00:22:08,260 --> 00:22:12,129
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can then like on the left side</font>

545
00:22:10,660 --> 00:22:14,440
<font color="#E5E5E5">we</font><font color="#CCCCCC"> see you have</font><font color="#E5E5E5"> like different operators</font>

546
00:22:12,130 --> 00:22:16,450
you<font color="#CCCCCC"> can run on</font><font color="#E5E5E5"> those tables right to</font>

547
00:22:14,440 --> 00:22:19,750
select<font color="#E5E5E5"> and to filter and to mutate</font><font color="#CCCCCC"> so</font>

548
00:22:16,450 --> 00:22:21,250
<font color="#CCCCCC">and</font><font color="#E5E5E5"> in a sequel like operator that</font><font color="#CCCCCC"> you</font>

549
00:22:19,750 --> 00:22:23,410
have sort of<font color="#E5E5E5"> something like that so</font>

550
00:22:21,250 --> 00:22:25,320
you're sort<font color="#E5E5E5"> of writing interactive</font>

551
00:22:23,410 --> 00:22:27,580
sequel in your<font color="#E5E5E5"> Python ipython notebook</font>

552
00:22:25,320 --> 00:22:28,960
<font color="#E5E5E5">on the right side you would see sort of</font>

553
00:22:27,580 --> 00:22:31,360
<font color="#CCCCCC">how that looks in code right you would</font>

554
00:22:28,960 --> 00:22:33,160
say some data frame with column you pick

555
00:22:31,360 --> 00:22:35,649
some<font color="#E5E5E5"> column so</font><font color="#CCCCCC"> you select a column and</font>

556
00:22:33,160 --> 00:22:37,180
<font color="#E5E5E5">you do some little operator in there and</font>

557
00:22:35,650 --> 00:22:39,070
you<font color="#CCCCCC"> multiply the age by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> fare and</font>

558
00:22:37,180 --> 00:22:40,770
<font color="#CCCCCC">then you show it</font><font color="#E5E5E5"> and then you see it in</font>

559
00:22:39,070 --> 00:22:44,470
<font color="#E5E5E5">your iPad's notebook that's how you'll</font>

560
00:22:40,770 --> 00:22:46,480
work with<font color="#E5E5E5"> that and if with our data</font>

561
00:22:44,470 --> 00:22:48,430
frames<font color="#CCCCCC"> the data is actually</font><font color="#E5E5E5"> on the GPUs</font>

562
00:22:46,480 --> 00:22:50,230
and you know typing your<font color="#E5E5E5"> iPad notebook</font>

563
00:22:48,430 --> 00:22:53,580
and stuff<font color="#E5E5E5"> happens on the GPU so that's</font>

564
00:22:50,230 --> 00:22:56,410
why I wrote GPUs at your fingertips<font color="#CCCCCC"> and</font>

565
00:22:53,580 --> 00:22:57,240
for the machine learning part we we are

566
00:22:56,410 --> 00:23:00,100
very<font color="#E5E5E5"> inspired by</font>

567
00:22:57,240 --> 00:23:02,320
<font color="#E5E5E5">scikit-learn the</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> so in the</font><font color="#CCCCCC"> ideal</font>

568
00:23:00,100 --> 00:23:03,669
case<font color="#E5E5E5"> most of the time it's really</font><font color="#CCCCCC"> a</font>

569
00:23:02,320 --> 00:23:05,520
<font color="#E5E5E5">drop-in replacements instead of</font>

570
00:23:03,670 --> 00:23:10,000
<font color="#E5E5E5">importing scikit-learn you import pen</font>

571
00:23:05,520 --> 00:23:14,590
<font color="#E5E5E5">rabbits and then we should be fine so</font>

572
00:23:10,000 --> 00:23:18,460
what does the<font color="#E5E5E5"> rabbits the sort of the</font>

573
00:23:14,590 --> 00:23:21,129
software package contained<font color="#E5E5E5"> so we decided</font>

574
00:23:18,460 --> 00:23:22,960
<font color="#CCCCCC">to go open-source with rabbits so you</font>

575
00:23:21,130 --> 00:23:25,690
can go to rapid than<font color="#CCCCCC"> AI I have a</font><font color="#E5E5E5"> link</font>

576
00:23:22,960 --> 00:23:28,780
later and you should get all the<font color="#E5E5E5"> code</font>

577
00:23:25,690 --> 00:23:29,980
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> on the left side</font><font color="#E5E5E5"> you see sort</font><font color="#CCCCCC"> of</font>

578
00:23:28,780 --> 00:23:31,060
you know<font color="#E5E5E5"> it's like a whole</font><font color="#CCCCCC"> software</font>

579
00:23:29,980 --> 00:23:33,610
stack obviously<font color="#E5E5E5"> right you have</font>

580
00:23:31,060 --> 00:23:35,290
algorithms<font color="#E5E5E5"> machine learning algorithms</font>

581
00:23:33,610 --> 00:23:38,530
<font color="#E5E5E5">and implementations</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> DWC</font>

582
00:23:35,290 --> 00:23:40,120
operators<font color="#E5E5E5"> and so on that ultimately of</font>

583
00:23:38,530 --> 00:23:43,120
course runs<font color="#E5E5E5"> on top of</font><font color="#CCCCCC"> CUDA</font><font color="#E5E5E5"> one run</font>

584
00:23:40,120 --> 00:23:43,600
either because if it<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> a GPUs needs</font>

585
00:23:43,120 --> 00:23:50,350
to run

586
00:23:43,600 --> 00:23:52,389
<font color="#CCCCCC">CUDA so the components those three</font>

587
00:23:50,350 --> 00:23:53,679
<font color="#E5E5E5">things on top the data preparation model</font>

588
00:23:52,390 --> 00:23:55,570
<font color="#E5E5E5">training</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> visualization of the same</font>

589
00:23:53,680 --> 00:23:57,670
blocks I started out with<font color="#E5E5E5"> if you</font>

590
00:23:55,570 --> 00:23:59,020
remember so that's sort<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> cycle</font>

591
00:23:57,670 --> 00:24:02,220
<font color="#E5E5E5">that a data scientist usually goes</font><font color="#CCCCCC"> to</font>

592
00:23:59,020 --> 00:24:04,810
<font color="#E5E5E5">and for each of those we have sort of</font>

593
00:24:02,220 --> 00:24:10,630
softer packages that those are the<font color="#E5E5E5"> green</font>

594
00:24:04,810 --> 00:24:13,210
pieces that that<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of implement this</font>

595
00:24:10,630 --> 00:24:15,760
this<font color="#E5E5E5"> was</font><font color="#CCCCCC"> step let's</font><font color="#E5E5E5"> start out</font><font color="#CCCCCC"> with like</font>

596
00:24:13,210 --> 00:24:18,730
those<font color="#E5E5E5"> two</font><font color="#CCCCCC"> qml and cout graph</font><font color="#E5E5E5"> those are</font>

597
00:24:15,760 --> 00:24:20,260
essentially libraries<font color="#E5E5E5"> that we provide</font>

598
00:24:18,730 --> 00:24:22,510
<font color="#CCCCCC">for doing machine learning</font><font color="#E5E5E5"> so that's</font>

599
00:24:20,260 --> 00:24:24,940
<font color="#E5E5E5">what BQ maltose implementations of</font><font color="#CCCCCC"> two</font>

600
00:24:22,510 --> 00:24:29,890
different machine<font color="#CCCCCC"> learning algorithms</font>

601
00:24:24,940 --> 00:24:33,790
and<font color="#E5E5E5"> crew graph provides implementation</font>

602
00:24:29,890 --> 00:24:38,190
of graph analytics algorithms so for<font color="#E5E5E5"> Q</font>

603
00:24:33,790 --> 00:24:41,950
<font color="#CCCCCC">sorry for q ml and pro graph</font><font color="#E5E5E5"> you have</font>

604
00:24:38,190 --> 00:24:43,750
<font color="#E5E5E5">essentially you know</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of algorithms</font>

605
00:24:41,950 --> 00:24:46,360
<font color="#CCCCCC">so here's a list</font><font color="#E5E5E5"> of algorithms and the</font>

606
00:24:43,750 --> 00:24:48,340
second column that we provide so you

607
00:24:46,360 --> 00:24:49,899
have decision trees random forests

608
00:24:48,340 --> 00:24:51,520
linear regression<font color="#CCCCCC"> logistic regression</font>

609
00:24:49,900 --> 00:24:54,460
k-means k nearest neighbor DB scan

610
00:24:51,520 --> 00:24:57,280
common filtering<font color="#CCCCCC"> pca single value</font>

611
00:24:54,460 --> 00:24:58,720
decomposition and vision<font color="#CCCCCC"> some of them</font>

612
00:24:57,280 --> 00:25:00,639
are<font color="#CCCCCC"> on the development at the moment</font><font color="#E5E5E5"> so</font>

613
00:24:58,720 --> 00:25:02,590
if you keep<font color="#E5E5E5"> up to date they will</font>

614
00:25:00,640 --> 00:25:03,100
eventually<font color="#E5E5E5"> get them some</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> are out</font>

615
00:25:02,590 --> 00:25:05,590
<font color="#E5E5E5">there already</font>

616
00:25:03,100 --> 00:25:07,090
one version<font color="#CCCCCC"> another</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of them so it's</font>

617
00:25:05,590 --> 00:25:09,459
a wide field obviously<font color="#E5E5E5"> right some of</font>

618
00:25:07,090 --> 00:25:11,409
<font color="#E5E5E5">them like common filtering for example</font>

619
00:25:09,460 --> 00:25:13,780
has so many variants<font color="#CCCCCC"> that we of course</font>

620
00:25:11,410 --> 00:25:15,880
focus<font color="#E5E5E5"> on one two three important ones</font>

621
00:25:13,780 --> 00:25:17,879
for now but there's so many other

622
00:25:15,880 --> 00:25:19,680
variants<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on so that is a</font>

623
00:25:17,880 --> 00:25:22,740
<font color="#E5E5E5">normos field but we sort of tried to</font>

624
00:25:19,680 --> 00:25:24,780
<font color="#E5E5E5">pick the interesting pieces</font><font color="#CCCCCC"> if you want</font>

625
00:25:22,740 --> 00:25:27,030
to<font color="#CCCCCC"> either contribute</font><font color="#E5E5E5"> or you have you</font>

626
00:25:24,780 --> 00:25:29,660
know a need for a specific<font color="#CCCCCC"> algorithm you</font>

627
00:25:27,030 --> 00:25:35,660
can<font color="#E5E5E5"> obviously always contact us in and</font>

628
00:25:29,660 --> 00:25:35,660
<font color="#E5E5E5">collaborate for graph analytics we have</font>

629
00:25:35,690 --> 00:25:42,300
sort of<font color="#CCCCCC"> PageRank</font><font color="#E5E5E5"> and and breadth-first</font>

630
00:25:38,580 --> 00:25:46,320
search and<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> which is also in</font><font color="#E5E5E5"> the</font>

631
00:25:42,300 --> 00:25:48,659
rapids<font color="#CCCCCC"> dot di repository and if</font><font color="#E5E5E5"> you just</font>

632
00:25:46,320 --> 00:25:51,480
as a example for extra boost so<font color="#E5E5E5"> we also</font>

633
00:25:48,660 --> 00:25:53,130
you know<font color="#E5E5E5"> we try to collaborate</font><font color="#CCCCCC"> with open</font>

634
00:25:51,480 --> 00:25:54,540
source frameworks when they exist and we

635
00:25:53,130 --> 00:25:55,200
try to<font color="#E5E5E5"> implement it ourselves if it</font>

636
00:25:54,540 --> 00:25:58,409
doesn't<font color="#E5E5E5"> exist</font>

637
00:25:55,200 --> 00:26:00,450
<font color="#E5E5E5">for random forests and decision</font><font color="#CCCCCC"> trees or</font>

638
00:25:58,410 --> 00:26:03,590
gradient boosted trees<font color="#CCCCCC"> we are</font>

639
00:26:00,450 --> 00:26:07,440
<font color="#E5E5E5">collaborating mostly with extra boost</font>

640
00:26:03,590 --> 00:26:09,330
and like contributing code<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to that</font>

641
00:26:07,440 --> 00:26:11,430
code to their code<font color="#E5E5E5"> base to make sure</font>

642
00:26:09,330 --> 00:26:14,550
that<font color="#CCCCCC"> they run as efficiently as possible</font>

643
00:26:11,430 --> 00:26:19,470
<font color="#CCCCCC">and we have</font><font color="#E5E5E5"> like a good success with</font>

644
00:26:14,550 --> 00:26:20,760
<font color="#CCCCCC">that but it's not only actually boost</font>

645
00:26:19,470 --> 00:26:22,950
<font color="#E5E5E5">like some we're also like working</font><font color="#CCCCCC"> with</font>

646
00:26:20,760 --> 00:26:24,750
with cat boost and<font color="#CCCCCC"> are</font><font color="#E5E5E5"> in contact with</font>

647
00:26:22,950 --> 00:26:26,670
<font color="#E5E5E5">their developers right to them so it's</font>

648
00:26:24,750 --> 00:26:28,770
<font color="#CCCCCC">not</font><font color="#E5E5E5"> we're not singling out their own</font>

649
00:26:26,670 --> 00:26:30,690
dividual one but we try<font color="#E5E5E5"> to pick the good</font>

650
00:26:28,770 --> 00:26:34,560
pieces<font color="#E5E5E5"> and and combine them</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> a</font>

651
00:26:30,690 --> 00:26:35,760
<font color="#E5E5E5">software package</font><font color="#CCCCCC"> again that</font><font color="#E5E5E5"> is sort of a</font>

652
00:26:34,560 --> 00:26:37,620
very similar graph to what I showed

653
00:26:35,760 --> 00:26:40,320
<font color="#CCCCCC">before so an interest</font><font color="#E5E5E5"> of time I don't go</font>

654
00:26:37,620 --> 00:26:42,120
into<font color="#CCCCCC"> too much detail but he is he again</font>

655
00:26:40,320 --> 00:26:45,689
even if you scale up<font color="#CCCCCC"> to like hundreds of</font>

656
00:26:42,120 --> 00:26:47,489
CPU notes<font color="#CCCCCC"> you're still not getting to</font>

657
00:26:45,690 --> 00:26:51,870
the<font color="#E5E5E5"> point where</font><font color="#CCCCCC"> you can beat a single</font>

658
00:26:47,490 --> 00:26:55,770
<font color="#E5E5E5">dgx</font><font color="#CCCCCC"> to in</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> Python in those examples</font>

659
00:26:51,870 --> 00:26:57,179
that<font color="#CCCCCC"> we're showing here and so the</font>

660
00:26:55,770 --> 00:27:00,060
reason is<font color="#E5E5E5"> again because you just get</font>

661
00:26:57,180 --> 00:27:01,380
overhead<font color="#E5E5E5"> when you add more CPU</font><font color="#CCCCCC"> notes</font>

662
00:27:00,060 --> 00:27:04,129
you're not necessarily<font color="#CCCCCC"> at some point</font>

663
00:27:01,380 --> 00:27:04,130
getting<font color="#E5E5E5"> fast anymore</font>

664
00:27:04,670 --> 00:27:09,840
<font color="#CCCCCC">and those are a couple of benchmarks for</font>

665
00:27:08,070 --> 00:27:12,120
initial algorithms<font color="#E5E5E5"> where you see the</font>

666
00:27:09,840 --> 00:27:14,370
speed-up in the in the<font color="#E5E5E5"> y-direction</font><font color="#CCCCCC"> and</font>

667
00:27:12,120 --> 00:27:17,040
sort<font color="#E5E5E5"> of the size of your problem in the</font>

668
00:27:14,370 --> 00:27:18,929
<font color="#E5E5E5">X</font><font color="#CCCCCC"> Direction 40s VD and</font><font color="#E5E5E5"> PCA and DB scan</font>

669
00:27:17,040 --> 00:27:20,490
<font color="#E5E5E5">so it looks</font><font color="#CCCCCC"> very promising for</font><font color="#E5E5E5"> a lot of</font>

670
00:27:18,930 --> 00:27:22,350
those and then again you have<font color="#CCCCCC"> the</font>

671
00:27:20,490 --> 00:27:24,750
<font color="#E5E5E5">synergy effect with staying on the GPU</font>

672
00:27:22,350 --> 00:27:26,159
because do<font color="#E5E5E5"> you do the ETL pipeline on</font>

673
00:27:24,750 --> 00:27:27,540
there too<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know the overall</font>

674
00:27:26,160 --> 00:27:30,410
speed-up then is potentially even

675
00:27:27,540 --> 00:27:30,409
<font color="#E5E5E5">superlinear to that</font>

676
00:27:31,519 --> 00:27:35,690
<font color="#E5E5E5">I probably also</font><font color="#CCCCCC"> skipped that but those</font>

677
00:27:34,159 --> 00:27:38,860
are<font color="#CCCCCC"> as I said like</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> working on a</font>

678
00:27:35,690 --> 00:27:43,429
lot of<font color="#E5E5E5"> those actively</font><font color="#CCCCCC"> if you follow the</font>

679
00:27:38,860 --> 00:27:45,428
<font color="#CCCCCC">rapids AI repository on github it'll</font>

680
00:27:43,429 --> 00:27:48,019
ever get up on the show either<font color="#E5E5E5"> one</font>

681
00:27:45,429 --> 00:27:49,760
<font color="#E5E5E5">you'll see sort</font><font color="#CCCCCC"> of when the new things</font>

682
00:27:48,019 --> 00:27:52,549
come in right and you can can also

683
00:27:49,760 --> 00:27:56,419
obviously<font color="#E5E5E5"> contribute to the bug tracker</font>

684
00:27:52,549 --> 00:27:59,418
<font color="#E5E5E5">and feature tracking and so on for</font><font color="#CCCCCC"> ku</font>

685
00:27:56,419 --> 00:28:02,539
graph<font color="#E5E5E5"> similar so we have a whole but</font>

686
00:27:59,419 --> 00:28:06,950
that's for<font color="#CCCCCC"> PageRank specifically now</font>

687
00:28:02,539 --> 00:28:09,470
<font color="#E5E5E5">with over a couple of benchmarks</font><font color="#CCCCCC"> we are</font>

688
00:28:06,950 --> 00:28:11,269
obviously<font color="#E5E5E5"> always looking for real world</font>

689
00:28:09,470 --> 00:28:13,549
data<font color="#E5E5E5"> set so it's more interesting to</font>

690
00:28:11,269 --> 00:28:14,750
<font color="#E5E5E5">have solve real world problems than</font>

691
00:28:13,549 --> 00:28:16,700
benchmarks if we don't have anything

692
00:28:14,750 --> 00:28:18,620
else we go for benchmarks obviously so

693
00:28:16,700 --> 00:28:20,600
if you have you<font color="#E5E5E5"> know a need or good</font>

694
00:28:18,620 --> 00:28:23,120
ideas of<font color="#CCCCCC"> what you could</font><font color="#E5E5E5"> do with</font><font color="#CCCCCC"> that and</font>

695
00:28:20,600 --> 00:28:26,750
<font color="#CCCCCC">try to that then feel free to sort of</font>

696
00:28:23,120 --> 00:28:31,010
get<font color="#E5E5E5"> involved and practice so those were</font>

697
00:28:26,750 --> 00:28:34,309
<font color="#CCCCCC">the model training</font><font color="#E5E5E5"> part now we look a</font>

698
00:28:31,010 --> 00:28:36,799
<font color="#E5E5E5">little bit at</font><font color="#CCCCCC"> qtf so the cubed</font><font color="#E5E5E5"> data</font>

699
00:28:34,309 --> 00:28:39,289
frame implementation which<font color="#CCCCCC"> is sort of</font>

700
00:28:36,799 --> 00:28:41,330
the<font color="#E5E5E5"> API</font><font color="#CCCCCC"> that you would use in an iPad</font>

701
00:28:39,289 --> 00:28:43,549
notebook interactive session right the

702
00:28:41,330 --> 00:28:49,970
one so that's<font color="#E5E5E5"> the thing you talk to</font>

703
00:28:43,549 --> 00:28:51,559
really so<font color="#CCCCCC"> an acute EF we adapted</font><font color="#E5E5E5"> Apache</font>

704
00:28:49,970 --> 00:28:53,830
<font color="#E5E5E5">arrow as I said I stood in memory</font>

705
00:28:51,559 --> 00:28:58,220
database<font color="#CCCCCC"> sorry in the as the in-memory</font>

706
00:28:53,830 --> 00:29:01,760
data format<font color="#CCCCCC"> and we provide a pandas like</font>

707
00:28:58,220 --> 00:29:04,039
API for<font color="#E5E5E5"> qtf because there's also many</font>

708
00:29:01,760 --> 00:29:06,080
data frame implementations<font color="#E5E5E5"> of spark as</font>

709
00:29:04,039 --> 00:29:08,450
one vendor<font color="#E5E5E5"> says one the couple others</font>

710
00:29:06,080 --> 00:29:11,779
and you know there's<font color="#E5E5E5"> not the one</font>

711
00:29:08,450 --> 00:29:13,549
<font color="#CCCCCC">standard so that's why we we don't we</font>

712
00:29:11,779 --> 00:29:14,960
take a little bit<font color="#E5E5E5"> more lenient approach</font>

713
00:29:13,549 --> 00:29:16,879
and say we don't<font color="#E5E5E5"> have to be a top into</font>

714
00:29:14,960 --> 00:29:19,010
<font color="#E5E5E5">place and we'll just switch pandas to</font><font color="#CCCCCC"> to</font>

715
00:29:16,880 --> 00:29:21,590
<font color="#CCCCCC">rapids and it all works but</font><font color="#E5E5E5"> you may</font><font color="#CCCCCC"> have</font>

716
00:29:19,010 --> 00:29:22,700
<font color="#CCCCCC">to adapt a couple of syntax syntactic</font>

717
00:29:21,590 --> 00:29:23,840
things here and there but<font color="#E5E5E5"> it's</font>

718
00:29:22,700 --> 00:29:25,399
essentially<font color="#E5E5E5"> it's pandas like so if you</font>

719
00:29:23,840 --> 00:29:29,720
<font color="#E5E5E5">know pandas then you should be able to</font>

720
00:29:25,399 --> 00:29:32,570
<font color="#E5E5E5">use CUDA data frames and the important</font>

721
00:29:29,720 --> 00:29:34,760
operations that we're<font color="#CCCCCC"> working</font><font color="#E5E5E5"> on unary</font>

722
00:29:32,570 --> 00:29:36,740
binary operations of course<font color="#CCCCCC"> joins merges</font>

723
00:29:34,760 --> 00:29:38,450
<font color="#CCCCCC">group eyes filters and so on so that</font>

724
00:29:36,740 --> 00:29:39,620
means you can<font color="#CCCCCC"> write for example if you</font>

725
00:29:38,450 --> 00:29:41,360
have<font color="#E5E5E5"> two data frames and you want to</font>

726
00:29:39,620 --> 00:29:44,060
<font color="#E5E5E5">join them or if you want to apply</font>

727
00:29:41,360 --> 00:29:46,250
a<font color="#CCCCCC"> lambda2</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> a column in</font><font color="#E5E5E5"> the</font>

728
00:29:44,060 --> 00:29:49,760
<font color="#E5E5E5">database you can write it in pandas or</font>

729
00:29:46,250 --> 00:29:59,260
sorry in<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it then will all run</font>

730
00:29:49,760 --> 00:30:03,950
<font color="#CCCCCC">on the GPU on your data so we have</font>

731
00:29:59,260 --> 00:30:06,050
<font color="#CCCCCC">qtf today it's essentially an API that</font>

732
00:30:03,950 --> 00:30:09,080
<font color="#CCCCCC">runs on CUDA so it's written</font><font color="#E5E5E5"> in C C++</font>

733
00:30:06,050 --> 00:30:11,260
<font color="#E5E5E5">because that's where CUDA runs and but</font>

734
00:30:09,080 --> 00:30:15,139
we have<font color="#E5E5E5"> provided</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the Python bindings</font>

735
00:30:11,260 --> 00:30:17,030
<font color="#CCCCCC">potentially if the need arises we could</font>

736
00:30:15,140 --> 00:30:25,310
also<font color="#E5E5E5"> look at other languages like like</font>

737
00:30:17,030 --> 00:30:27,020
<font color="#E5E5E5">no Julia or Lou or whatever</font><font color="#CCCCCC"> and but at</font>

738
00:30:25,310 --> 00:30:30,260
the moment<font color="#E5E5E5"> we are focusing in CUDA sort</font>

739
00:30:27,020 --> 00:30:32,030
of with<font color="#E5E5E5"> Python bindings all the</font>

740
00:30:30,260 --> 00:30:37,580
low-level pieces are<font color="#CCCCCC"> written in highly</font>

741
00:30:32,030 --> 00:30:39,230
optimized CUDA<font color="#CCCCCC"> C C++ and</font><font color="#E5E5E5"> we use the</font>

742
00:30:37,580 --> 00:30:41,929
<font color="#CCCCCC">apache error format to a sort of empire</font>

743
00:30:39,230 --> 00:30:43,910
<font color="#E5E5E5">for import and export the data and</font>

744
00:30:41,930 --> 00:30:45,530
inside like when the GPUs talk to each

745
00:30:43,910 --> 00:30:49,100
other we use CUDA IPC that's the

746
00:30:45,530 --> 00:30:51,139
inter-process communication mechanism<font color="#E5E5E5"> so</font>

747
00:30:49,100 --> 00:30:54,790
that<font color="#CCCCCC"> the chip use can sort of change</font>

748
00:30:51,140 --> 00:30:59,660
<font color="#E5E5E5">data exchange data talk to each other</font>

749
00:30:54,790 --> 00:31:02,000
yeah<font color="#E5E5E5"> and from the from the on the</font><font color="#CCCCCC"> Python</font>

750
00:30:59,660 --> 00:31:04,750
side the interesting line is<font color="#E5E5E5"> probably</font>

751
00:31:02,000 --> 00:31:07,490
the second to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last so</font><font color="#CCCCCC"> that means you</font>

752
00:31:04,750 --> 00:31:09,080
you can take an umpire<font color="#CCCCCC"> race for</font><font color="#E5E5E5"> example</font>

753
00:31:07,490 --> 00:31:11,120
and just<font color="#CCCCCC"> say okay now take this numpy</font>

754
00:31:09,080 --> 00:31:13,310
array<font color="#E5E5E5"> and make it into a</font><font color="#CCCCCC"> qdf data frame</font>

755
00:31:11,120 --> 00:31:14,840
and<font color="#E5E5E5"> then all the you know management</font><font color="#CCCCCC"> of</font>

756
00:31:13,310 --> 00:31:16,820
the chip use and the<font color="#CCCCCC"> chibios that are</font>

757
00:31:14,840 --> 00:31:18,290
<font color="#CCCCCC">available and who gets what data and so</font>

758
00:31:16,820 --> 00:31:23,030
<font color="#CCCCCC">on that's all then</font><font color="#E5E5E5"> we've done</font><font color="#CCCCCC"> in the</font>

759
00:31:18,290 --> 00:31:24,889
<font color="#E5E5E5">background</font><font color="#CCCCCC"> you have as that like you can</font>

760
00:31:23,030 --> 00:31:27,139
pass lambdas for example if you want<font color="#E5E5E5"> to</font>

761
00:31:24,890 --> 00:31:30,590
do a point wise operation on each of the

762
00:31:27,140 --> 00:31:31,910
data elements<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> you can pass</font>

763
00:31:30,590 --> 00:31:37,340
lambdas<font color="#CCCCCC"> and then we're using JIT</font>

764
00:31:31,910 --> 00:31:39,800
compilation<font color="#E5E5E5"> through number</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> big</font>

765
00:31:37,340 --> 00:31:42,919
piece of<font color="#E5E5E5"> the data preparation is</font>

766
00:31:39,800 --> 00:31:44,389
obviously<font color="#CCCCCC"> a string processing so if you</font>

767
00:31:42,920 --> 00:31:47,420
imagine you<font color="#E5E5E5"> as</font><font color="#CCCCCC"> that in the beginning</font>

768
00:31:44,390 --> 00:31:49,010
<font color="#E5E5E5">data is usually</font><font color="#CCCCCC"> noisy so that means when</font>

769
00:31:47,420 --> 00:31:51,200
<font color="#CCCCCC">incomplete</font><font color="#E5E5E5"> so if you imagine you have</font>

770
00:31:49,010 --> 00:31:54,860
<font color="#E5E5E5">like data database that contains you</font>

771
00:31:51,200 --> 00:31:58,100
know some form of company<font color="#CCCCCC"> names that say</font>

772
00:31:54,860 --> 00:31:59,809
<font color="#E5E5E5">I do soluble sell stuff to</font><font color="#CCCCCC"> people and</font>

773
00:31:58,100 --> 00:32:02,389
<font color="#E5E5E5">you're right in like what company is</font>

774
00:31:59,809 --> 00:32:04,730
<font color="#E5E5E5">sold</font><font color="#CCCCCC"> to for example you know some of</font>

775
00:32:02,390 --> 00:32:06,770
those<font color="#E5E5E5"> may</font><font color="#CCCCCC"> be very noise like understory</font>

776
00:32:04,730 --> 00:32:08,570
string so you may have you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> beam W</font>

777
00:32:06,770 --> 00:32:10,520
and all uppercase and the<font color="#E5E5E5"> next guy</font>

778
00:32:08,570 --> 00:32:13,879
writes BMW all lowercase<font color="#E5E5E5"> and next one</font>

779
00:32:10,520 --> 00:32:15,440
writes BMW<font color="#CCCCCC"> ink and</font><font color="#E5E5E5"> the next one beam whe</font>

780
00:32:13,880 --> 00:32:17,270
or whatever so there are many<font color="#E5E5E5"> different</font>

781
00:32:15,440 --> 00:32:19,640
spellings<font color="#CCCCCC"> so somebody may</font><font color="#E5E5E5"> even spell it</font>

782
00:32:17,270 --> 00:32:21,889
<font color="#E5E5E5">out completely and you sort of have to</font>

783
00:32:19,640 --> 00:32:23,660
<font color="#E5E5E5">combine them all so that</font><font color="#CCCCCC"> the machine</font>

784
00:32:21,890 --> 00:32:25,370
learning algorithm knows<font color="#E5E5E5"> that's all the</font>

785
00:32:23,660 --> 00:32:27,440
same BMW<font color="#CCCCCC"> you're talking about</font><font color="#E5E5E5"> it</font>

786
00:32:25,370 --> 00:32:29,780
so that<font color="#E5E5E5"> means you need</font><font color="#CCCCCC"> to power strings</font>

787
00:32:27,440 --> 00:32:30,440
you need to make strings to<font color="#E5E5E5"> uppercase a</font>

788
00:32:29,780 --> 00:32:33,049
<font color="#E5E5E5">lowercase</font>

789
00:32:30,440 --> 00:32:34,669
you may combine them<font color="#CCCCCC"> you may do</font>

790
00:32:33,049 --> 00:32:37,070
<font color="#E5E5E5">substring matches and</font><font color="#CCCCCC"> Wells things</font><font color="#E5E5E5"> and</font>

791
00:32:34,669 --> 00:32:40,669
we are<font color="#CCCCCC"> providing a library now that's</font>

792
00:32:37,070 --> 00:32:42,649
called<font color="#E5E5E5"> cue string with</font><font color="#CCCCCC"> NV string</font><font color="#E5E5E5"> that</font>

793
00:32:40,669 --> 00:32:44,210
can do all this<font color="#E5E5E5"> sort of means it's a</font>

794
00:32:42,650 --> 00:32:46,910
string<font color="#CCCCCC"> processing library of course</font>

795
00:32:44,210 --> 00:32:48,410
<font color="#CCCCCC">there's so many these</font><font color="#E5E5E5"> things you can do</font>

796
00:32:46,910 --> 00:32:49,820
with drinks that we are<font color="#E5E5E5"> not there yet</font>

797
00:32:48,410 --> 00:32:51,559
<font color="#CCCCCC">right</font><font color="#E5E5E5"> we're still building</font><font color="#CCCCCC"> up the</font>

798
00:32:49,820 --> 00:32:55,540
<font color="#E5E5E5">library but for a lot of those</font>

799
00:32:51,559 --> 00:32:58,010
<font color="#E5E5E5">operations actually we see very</font>

800
00:32:55,540 --> 00:33:00,559
significant<font color="#E5E5E5"> and promising speed-up the</font>

801
00:32:58,010 --> 00:33:02,570
reason being that a string processing<font color="#E5E5E5"> is</font>

802
00:33:00,559 --> 00:33:04,730
often<font color="#CCCCCC"> very memory bound but the</font><font color="#E5E5E5"> GPU has</font>

803
00:33:02,570 --> 00:33:08,480
very high bandwidth<font color="#E5E5E5"> main memory access</font>

804
00:33:04,730 --> 00:33:10,820
so there<font color="#CCCCCC"> were the CPU DRAM</font><font color="#E5E5E5"> and the speed</font>

805
00:33:08,480 --> 00:33:14,660
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> GPU processing units can talk</font>

806
00:33:10,820 --> 00:33:16,159
to this DRAM<font color="#E5E5E5"> is usually very high higher</font>

807
00:33:14,660 --> 00:33:19,130
<font color="#CCCCCC">than the CPU would have and</font><font color="#E5E5E5"> that's why</font>

808
00:33:16,160 --> 00:33:20,840
if you kind<font color="#E5E5E5"> of you know can leverage</font>

809
00:33:19,130 --> 00:33:24,070
this that you get<font color="#E5E5E5"> actually also very</font>

810
00:33:20,840 --> 00:33:29,600
<font color="#E5E5E5">good CUDA sorry a string processing</font>

811
00:33:24,070 --> 00:33:30,950
<font color="#E5E5E5">numbers so the last box</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to talk</font>

812
00:33:29,600 --> 00:33:32,059
about on<font color="#E5E5E5"> this thing</font>

813
00:33:30,950 --> 00:33:34,700
I'm not going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

814
00:33:32,059 --> 00:33:37,910
visualization<font color="#CCCCCC"> that's usually making some</font>

815
00:33:34,700 --> 00:33:39,830
graphs and things<font color="#E5E5E5"> like that but the last</font>

816
00:33:37,910 --> 00:33:45,860
interesting<font color="#E5E5E5"> box on here would be</font><font color="#CCCCCC"> tasks</font>

817
00:33:39,830 --> 00:33:48,070
which<font color="#E5E5E5"> is sort of the the process library</font>

818
00:33:45,860 --> 00:33:50,510
we use to scale out to multiple<font color="#CCCCCC"> nodes</font>

819
00:33:48,070 --> 00:33:53,750
and we are collaborating<font color="#CCCCCC"> very closely</font>

820
00:33:50,510 --> 00:33:56,960
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> tasks developers</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> tasks you</font>

821
00:33:53,750 --> 00:33:58,850
can<font color="#E5E5E5"> mature who is familiar with MPI and</font>

822
00:33:56,960 --> 00:34:00,260
does not<font color="#E5E5E5"> know tasks so because it will</font>

823
00:33:58,850 --> 00:34:02,030
be a<font color="#CCCCCC"> little imprecise what I'm gonna</font><font color="#E5E5E5"> say</font>

824
00:34:00,260 --> 00:34:04,460
now<font color="#CCCCCC"> but if you're</font><font color="#E5E5E5"> familiar with MPI on</font>

825
00:34:02,030 --> 00:34:06,740
one<font color="#CCCCCC"> of those</font><font color="#E5E5E5"> and don't know what task is</font>

826
00:34:04,460 --> 00:34:07,540
then<font color="#CCCCCC"> you can imagine tasks to be</font><font color="#E5E5E5"> sort of</font>

827
00:34:06,740 --> 00:34:09,820
the MPI

828
00:34:07,540 --> 00:34:11,949
<font color="#CCCCCC">mpi exit executable that sets up</font>

829
00:34:09,820 --> 00:34:14,560
processes across multiple<font color="#E5E5E5"> genes</font><font color="#CCCCCC"> way</font>

830
00:34:11,949 --> 00:34:16,899
that's sort<font color="#CCCCCC"> of where the analogy</font><font color="#E5E5E5"> ants</font>

831
00:34:14,560 --> 00:34:18,820
those of the rest<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very different but</font>

832
00:34:16,899 --> 00:34:20,888
<font color="#E5E5E5">it's essentially a way</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> many</font>

833
00:34:18,820 --> 00:34:22,540
processes<font color="#E5E5E5"> across a cluster for example</font>

834
00:34:20,889 --> 00:34:24,040
of machines and then make the<font color="#CCCCCC"> Machine</font>

835
00:34:22,540 --> 00:34:27,610
sort of find each other<font color="#E5E5E5"> and talk</font><font color="#CCCCCC"> to each</font>

836
00:34:24,040 --> 00:34:29,918
other<font color="#CCCCCC"> the nice thing is</font><font color="#E5E5E5"> all the</font>

837
00:34:27,610 --> 00:34:32,110
scheduler<font color="#E5E5E5"> is like written in Python</font><font color="#CCCCCC"> and</font>

838
00:34:29,918 --> 00:34:34,719
it's like very<font color="#CCCCCC"> modular</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> means it</font>

839
00:34:32,110 --> 00:34:37,239
fits<font color="#CCCCCC"> very well in</font><font color="#E5E5E5"> our in our whole</font>

840
00:34:34,719 --> 00:34:39,689
ecosystem that we are<font color="#CCCCCC"> working it</font>

841
00:34:37,239 --> 00:34:44,620
[Music]

842
00:34:39,690 --> 00:34:46,980
so it's essentially you're using<font color="#CCCCCC"> you're</font>

843
00:34:44,620 --> 00:34:49,719
doing sort of a MapReduce style

844
00:34:46,980 --> 00:34:54,460
computation<font color="#E5E5E5"> when you use to ask</font>

845
00:34:49,719 --> 00:34:56,799
and so<font color="#CCCCCC"> QTL qdf implementation sort of is</font>

846
00:34:54,460 --> 00:35:02,200
designed to work well<font color="#E5E5E5"> in this setting</font>

847
00:34:56,800 --> 00:35:04,390
<font color="#E5E5E5">and you can especially easily if you</font><font color="#CCCCCC"> are</font>

848
00:35:02,200 --> 00:35:07,509
once you go from detail pipeline<font color="#CCCCCC"> onto</font>

849
00:35:04,390 --> 00:35:10,690
the<font color="#E5E5E5"> ml pipeline</font><font color="#CCCCCC"> when you do the machine</font>

850
00:35:07,510 --> 00:35:12,700
learning<font color="#E5E5E5"> you may like a communication</font>

851
00:35:10,690 --> 00:35:14,410
library has sort of different

852
00:35:12,700 --> 00:35:16,569
<font color="#E5E5E5">requirements right that you need to do</font>

853
00:35:14,410 --> 00:35:18,670
so<font color="#E5E5E5"> and the ETL side you say</font><font color="#CCCCCC"> okay I want</font>

854
00:35:16,570 --> 00:35:21,670
<font color="#CCCCCC">to be failure redundant and I want to be</font>

855
00:35:18,670 --> 00:35:23,530
or resilient and I want to sort<font color="#E5E5E5"> of scale</font>

856
00:35:21,670 --> 00:35:25,510
out and I have to coordinate those guys

857
00:35:23,530 --> 00:35:28,330
once an ml it's much more traditional

858
00:35:25,510 --> 00:35:32,680
<font color="#E5E5E5">HPC application which they can eat fast</font>

859
00:35:28,330 --> 00:35:34,720
<font color="#E5E5E5">you know reduce some all operations and</font>

860
00:35:32,680 --> 00:35:37,750
that's<font color="#E5E5E5"> all where MPI comes in or it's</font>

861
00:35:34,720 --> 00:35:41,830
very<font color="#E5E5E5"> helpful</font><font color="#CCCCCC"> or an MPI similar to MPI</font>

862
00:35:37,750 --> 00:35:45,040
library which we call<font color="#CCCCCC"> Nico</font><font color="#E5E5E5"> and CCL which</font>

863
00:35:41,830 --> 00:35:48,630
is sort of an MPI inspired library<font color="#E5E5E5"> also</font>

864
00:35:45,040 --> 00:35:52,590
open source that has<font color="#CCCCCC"> high-performance</font>

865
00:35:48,630 --> 00:35:55,000
<font color="#E5E5E5">GPU into like collaborative GPU</font>

866
00:35:52,590 --> 00:35:58,900
operations like<font color="#E5E5E5"> you know all reduce and</font>

867
00:35:55,000 --> 00:36:00,520
things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that and so we have sort of</font>

868
00:35:58,900 --> 00:36:04,320
bridge when<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to go out of</font><font color="#CCCCCC"> the</font>

869
00:36:00,520 --> 00:36:06,880
<font color="#E5E5E5">ass into sort of the ML style</font>

870
00:36:04,320 --> 00:36:08,770
<font color="#E5E5E5">communication which is not ask</font><font color="#CCCCCC"> anymore</font>

871
00:36:06,880 --> 00:36:11,140
that you<font color="#CCCCCC"> hand over or you instantiate</font>

872
00:36:08,770 --> 00:36:14,290
from within to ask you know instantiate

873
00:36:11,140 --> 00:36:17,500
sort of the communication between all

874
00:36:14,290 --> 00:36:19,090
<font color="#CCCCCC">the</font><font color="#E5E5E5"> participating GPUs and then you can</font>

875
00:36:17,500 --> 00:36:19,780
<font color="#E5E5E5">switch</font><font color="#CCCCCC"> over to</font><font color="#E5E5E5"> sort of an eco styler</font>

876
00:36:19,090 --> 00:36:25,240
<font color="#CCCCCC">MPI's</font>

877
00:36:19,780 --> 00:36:29,290
communication so if you look into the

878
00:36:25,240 --> 00:36:31,209
<font color="#E5E5E5">future for the</font><font color="#CCCCCC"> next few months</font><font color="#E5E5E5"> is that</font>

879
00:36:29,290 --> 00:36:33,820
<font color="#E5E5E5">like it's a continuous process so if you</font>

880
00:36:31,210 --> 00:36:35,860
<font color="#E5E5E5">follow the open source project you'll</font>

881
00:36:33,820 --> 00:36:38,410
see sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> what you know whenever new</font>

882
00:36:35,860 --> 00:36:40,420
commits come in<font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> but our goals</font>

883
00:36:38,410 --> 00:36:42,069
<font color="#CCCCCC">are so a lot of</font><font color="#E5E5E5"> those things are still</font>

884
00:36:40,420 --> 00:36:44,680
<font color="#CCCCCC">very single GPU not all of them but</font>

885
00:36:42,070 --> 00:36:48,610
especially<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> queue the dataframe</font>

886
00:36:44,680 --> 00:36:50,620
<font color="#CCCCCC">site and we are working hard on</font><font color="#E5E5E5"> sort of</font>

887
00:36:48,610 --> 00:36:52,690
<font color="#E5E5E5">getting it not only single</font><font color="#CCCCCC"> node multi</font>

888
00:36:50,620 --> 00:36:54,850
GPUs or<font color="#CCCCCC"> djx</font><font color="#E5E5E5"> boxes is that your single</font>

889
00:36:52,690 --> 00:36:57,870
node that has energy<font color="#E5E5E5"> checks one case</font>

890
00:36:54,850 --> 00:37:00,250
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> GPUs and it ejects</font><font color="#CCCCCC"> to sixteen CPU</font>

891
00:36:57,870 --> 00:37:02,290
<font color="#CCCCCC">but it's</font><font color="#E5E5E5"> still one node right so there's</font>

892
00:37:00,250 --> 00:37:05,260
one CPU<font color="#E5E5E5"> and they can talk to</font><font color="#CCCCCC"> all the</font>

893
00:37:02,290 --> 00:37:11,410
<font color="#CCCCCC">tributes to</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> actual multi node sort</font>

894
00:37:05,260 --> 00:37:13,240
cluster based approach and<font color="#CCCCCC"> then stream</font>

895
00:37:11,410 --> 00:37:15,790
support of<font color="#E5E5E5"> course is getting gradually</font>

896
00:37:13,240 --> 00:37:17,410
better and better and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font>

897
00:37:15,790 --> 00:37:20,890
accelerated data loading in the<font color="#E5E5E5"> pipeline</font>

898
00:37:17,410 --> 00:37:22,779
<font color="#E5E5E5">so parsing file formats can often like</font>

899
00:37:20,890 --> 00:37:24,759
in some of<font color="#CCCCCC"> our benchmarks by now ninety</font>

900
00:37:22,780 --> 00:37:27,160
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> is actually reading the</font>

901
00:37:24,760 --> 00:37:29,020
<font color="#CCCCCC">comma-separated</font><font color="#E5E5E5"> value file that the</font>

902
00:37:27,160 --> 00:37:30,670
benchmark<font color="#CCCCCC"> comes in and then the rest of</font>

903
00:37:29,020 --> 00:37:33,759
the<font color="#CCCCCC"> ten percent is all the rest</font><font color="#E5E5E5"> and so</font>

904
00:37:30,670 --> 00:37:36,280
<font color="#CCCCCC">we are</font><font color="#E5E5E5"> going to to look at those file</font>

905
00:37:33,760 --> 00:37:39,160
formats<font color="#E5E5E5"> like parsing and perky so CSV</font>

906
00:37:36,280 --> 00:37:43,360
parsing<font color="#CCCCCC"> perky and so on to ingest the</font>

907
00:37:39,160 --> 00:37:46,120
data faster<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that we have a couple of</font>

908
00:37:43,360 --> 00:37:48,550
preliminary numbers<font color="#E5E5E5"> they look</font><font color="#CCCCCC"> very</font>

909
00:37:46,120 --> 00:37:50,589
promising again as is<font color="#CCCCCC"> that like one of</font>

910
00:37:48,550 --> 00:37:52,930
the the biggest<font color="#E5E5E5"> effects is not only the</font>

911
00:37:50,590 --> 00:37:54,850
<font color="#CCCCCC">speed-up of the parsing itself which</font>

912
00:37:52,930 --> 00:37:57,370
hopefully will will<font color="#CCCCCC"> be very significant</font>

913
00:37:54,850 --> 00:37:59,470
<font color="#E5E5E5">but also if you have a big</font><font color="#CCCCCC"> pipeline and</font>

914
00:37:57,370 --> 00:38:01,750
that<font color="#CCCCCC"> is sort of left over</font><font color="#E5E5E5"> a piece if you</font>

915
00:37:59,470 --> 00:38:03,160
<font color="#E5E5E5">are</font><font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Emeril's law</font><font color="#E5E5E5"> you know</font>

916
00:38:01,750 --> 00:38:07,980
that's<font color="#E5E5E5"> sort of what you need to attack</font>

917
00:38:03,160 --> 00:38:07,980
<font color="#CCCCCC">to get on a good overall speed-up</font>

918
00:38:08,130 --> 00:38:12,670
<font color="#CCCCCC">there's also</font><font color="#E5E5E5"> very interesting</font>

919
00:38:10,440 --> 00:38:16,450
development now which is a<font color="#CCCCCC"> python cuda</font>

920
00:38:12,670 --> 00:38:18,460
<font color="#E5E5E5">array interface</font><font color="#CCCCCC"> so as an</font><font color="#E5E5E5"> N dimensional</font>

921
00:38:16,450 --> 00:38:23,950
array<font color="#E5E5E5"> essentially so we talked about</font>

922
00:38:18,460 --> 00:38:26,590
<font color="#E5E5E5">before about Apache arrow which is a</font>

923
00:38:23,950 --> 00:38:30,779
columnar layout right<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case it's</font>

924
00:38:26,590 --> 00:38:33,339
now<font color="#E5E5E5"> dense in</font><font color="#CCCCCC"> diaries'</font><font color="#E5E5E5"> where a couple of</font>

925
00:38:30,780 --> 00:38:37,239
<font color="#E5E5E5">people that have decided on</font>

926
00:38:33,339 --> 00:38:40,420
<font color="#E5E5E5">a CUDA error interface and collaborating</font>

927
00:38:37,239 --> 00:38:43,599
to sort of come<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> sanchez</font>

928
00:38:40,420 --> 00:38:47,109
specification and the first projects

929
00:38:43,599 --> 00:38:48,849
already is including those that<font color="#CCCCCC"> brings</font>

930
00:38:47,109 --> 00:38:50,650
it to<font color="#E5E5E5"> my concluding remarks</font><font color="#CCCCCC"> so in the</font>

931
00:38:48,849 --> 00:38:52,660
beginning<font color="#E5E5E5"> I had this you</font><font color="#CCCCCC"> know why did I</font>

932
00:38:50,650 --> 00:38:54,400
become a data scientist if you were you

933
00:38:52,660 --> 00:38:55,930
<font color="#E5E5E5">know think back and then you actually</font>

934
00:38:54,400 --> 00:38:57,249
<font color="#E5E5E5">are</font><font color="#CCCCCC"> doing your data science and</font><font color="#E5E5E5"> you see</font>

935
00:38:55,930 --> 00:38:59,200
<font color="#E5E5E5">that a lot of those green parts are</font>

936
00:38:57,249 --> 00:39:03,098
<font color="#E5E5E5">essentially is sitting around and</font>

937
00:38:59,200 --> 00:39:04,899
possibly<font color="#E5E5E5"> drinking coffee with</font><font color="#CCCCCC"> Rapids</font>

938
00:39:03,099 --> 00:39:06,039
hopefully you know we're<font color="#CCCCCC"> getting</font><font color="#E5E5E5"> more to</font>

939
00:39:04,900 --> 00:39:10,329
the point<font color="#CCCCCC"> where</font><font color="#E5E5E5"> you have more</font><font color="#CCCCCC"> of those</font>

940
00:39:06,039 --> 00:39:12,190
red pieces<font color="#E5E5E5"> which is actually work so</font><font color="#CCCCCC"> you</font>

941
00:39:10,329 --> 00:39:15,910
can actually<font color="#E5E5E5"> try</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> try on your</font>

942
00:39:12,190 --> 00:39:17,079
ideas and and iterate much faster

943
00:39:15,910 --> 00:39:18,759
<font color="#CCCCCC">because you don't have to wait this long</font>

944
00:39:17,079 --> 00:39:22,479
<font color="#E5E5E5">so it means when you know what you did</font>

945
00:39:18,759 --> 00:39:27,789
<font color="#E5E5E5">in a day</font><font color="#CCCCCC"> or two</font><font color="#E5E5E5"> sort of the development</font>

946
00:39:22,479 --> 00:39:30,819
cycles you can<font color="#CCCCCC"> now do within</font><font color="#E5E5E5"> a day yeah</font>

947
00:39:27,789 --> 00:39:33,329
<font color="#E5E5E5">so the interesting piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> GPS of</font>

948
00:39:30,819 --> 00:39:36,160
course<font color="#CCCCCC"> before</font><font color="#E5E5E5"> I conclude</font><font color="#CCCCCC"> for real is</font>

949
00:39:33,329 --> 00:39:39,549
<font color="#E5E5E5">that we are as you may know coding</font>

950
00:39:36,160 --> 00:39:43,140
graphics obviously but we also have a

951
00:39:39,549 --> 00:39:46,029
pretty<font color="#E5E5E5"> long history by</font><font color="#CCCCCC"> now in HPC and</font>

952
00:39:43,140 --> 00:39:47,859
now more<font color="#CCCCCC"> and more with</font><font color="#E5E5E5"> neural networks</font>

953
00:39:46,029 --> 00:39:51,309
but<font color="#CCCCCC"> also</font><font color="#E5E5E5"> with with</font><font color="#CCCCCC"> rapid now more and</font>

954
00:39:47,859 --> 00:39:54,160
more<font color="#E5E5E5"> also data analytics</font><font color="#CCCCCC"> and those three</font>

955
00:39:51,309 --> 00:39:55,960
<font color="#CCCCCC">things is sort of my my understanding my</font>

956
00:39:54,160 --> 00:39:59,618
prediction<font color="#E5E5E5"> and my hope will sort of grow</font>

957
00:39:55,960 --> 00:40:01,719
<font color="#CCCCCC">together into a</font><font color="#E5E5E5"> bigger single one right</font>

958
00:39:59,619 --> 00:40:04,420
so then now there are HPC applications

959
00:40:01,719 --> 00:40:07,089
that do simulation and then run data

960
00:40:04,420 --> 00:40:09,219
analytics<font color="#CCCCCC"> odden actually the simulated</font>

961
00:40:07,089 --> 00:40:11,019
<font color="#E5E5E5">data for example for scientific</font>

962
00:40:09,219 --> 00:40:12,910
discovery<font color="#E5E5E5"> and then of</font><font color="#CCCCCC"> course they have</font>

963
00:40:11,019 --> 00:40:14,319
to<font color="#CCCCCC"> visualize it in order</font><font color="#E5E5E5"> to tell</font><font color="#CCCCCC"> the</font>

964
00:40:12,910 --> 00:40:17,348
<font color="#E5E5E5">scientist what's going on right so that</font>

965
00:40:14,319 --> 00:40:19,450
is sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the new area that</font><font color="#CCCCCC"> that we're</font>

966
00:40:17,349 --> 00:40:21,009
<font color="#CCCCCC">working in and then all the individual</font>

967
00:40:19,450 --> 00:40:25,718
<font color="#CCCCCC">components GPUs</font><font color="#E5E5E5"> are actually very</font>

968
00:40:21,009 --> 00:40:27,549
<font color="#CCCCCC">helpful</font><font color="#E5E5E5"> and provide a lot of benefit if</font>

969
00:40:25,719 --> 00:40:29,499
you<font color="#E5E5E5"> want to get involved how to get the</font>

970
00:40:27,549 --> 00:40:31,150
software<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that if you just</font><font color="#CCCCCC"> go to rapid</font>

971
00:40:29,499 --> 00:40:33,959
dot<font color="#E5E5E5"> AI that will lead you to everything</font>

972
00:40:31,150 --> 00:40:33,960
and

973
00:40:36,170 --> 00:40:43,530
and yeah go to rapid<font color="#CCCCCC"> today I and that</font>

974
00:40:41,940 --> 00:40:46,859
should<font color="#CCCCCC"> lead you to all the</font><font color="#E5E5E5"> other places</font>

975
00:40:43,530 --> 00:40:49,200
with<font color="#E5E5E5"> and if you want to join you know</font>

976
00:40:46,859 --> 00:40:52,980
<font color="#CCCCCC">Apache</font><font color="#E5E5E5"> arrow the GPU open analytics</font>

977
00:40:49,200 --> 00:40:54,960
initiative<font color="#E5E5E5"> that go AI and then rapid at</font>

978
00:40:52,980 --> 00:40:56,940
AI are the pieces you should have a look

979
00:40:54,960 --> 00:40:59,540
at and yeah get<font color="#E5E5E5"> involved get in touch</font>

980
00:40:56,940 --> 00:41:09,260
<font color="#CCCCCC">and thank</font><font color="#E5E5E5"> you for your attention</font>

981
00:40:59,540 --> 00:41:09,259
[Applause]

982
00:41:27,529 --> 00:41:35,729
but accumulate<font color="#CCCCCC"> or what did</font><font color="#E5E5E5"> already say</font>

983
00:41:29,969 --> 00:41:37,499
Oh Cooper oh yeah I only got it half

984
00:41:35,729 --> 00:41:39,529
myself<font color="#CCCCCC"> I think I</font><font color="#E5E5E5"> come a little closer</font>

985
00:41:37,499 --> 00:41:48,959
there<font color="#E5E5E5"> was somebody standing</font><font color="#CCCCCC"> up side only</font>

986
00:41:39,529 --> 00:41:50,549
<font color="#CCCCCC">so again</font><font color="#E5E5E5"> okay for coop</font><font color="#CCCCCC"> flow if</font><font color="#E5E5E5"> we plan</font>

987
00:41:48,959 --> 00:41:52,169
on integrating with that essentially

988
00:41:50,549 --> 00:41:54,479
<font color="#CCCCCC">writer</font><font color="#E5E5E5"> using yeah</font>

989
00:41:52,169 --> 00:41:58,439
<font color="#E5E5E5">I think so too I'm not familiar with the</font>

990
00:41:54,479 --> 00:42:01,618
details<font color="#CCCCCC"> but whatever sort of make</font><font color="#E5E5E5"> sense</font>

991
00:41:58,439 --> 00:42:04,529
and it's helpful we are very happy to to

992
00:42:01,619 --> 00:42:12,479
you know work<font color="#CCCCCC"> with I think that is work</font>

993
00:42:04,529 --> 00:42:14,069
going on but I would live is<font color="#E5E5E5"> he it's</font>

994
00:42:12,479 --> 00:42:17,359
interesting I mean we are working<font color="#E5E5E5"> on</font>

995
00:42:14,069 --> 00:42:20,099
their own<font color="#CCCCCC"> no network</font><font color="#E5E5E5"> side very much with</font>

996
00:42:17,359 --> 00:42:22,319
<font color="#E5E5E5">kubernetes now and with also docker</font>

997
00:42:20,099 --> 00:42:24,630
<font color="#E5E5E5">container sort of our container thing of</font>

998
00:42:22,319 --> 00:42:27,749
choice<font color="#E5E5E5"> because it you know like every</font>

999
00:42:24,630 --> 00:42:29,279
other container of vendor is<font color="#CCCCCC"> able to</font>

1000
00:42:27,749 --> 00:42:30,988
read darker formats that<font color="#CCCCCC"> is sort of our</font>

1001
00:42:29,279 --> 00:42:32,849
deployment<font color="#E5E5E5"> strategies given</font><font color="#CCCCCC"> a DS and</font>

1002
00:42:30,989 --> 00:42:35,669
then docker 14<font color="#E5E5E5"> so it's definitely will</font>

1003
00:42:32,849 --> 00:42:39,869
become very important once people start

1004
00:42:35,669 --> 00:42:43,219
rolling out that more is exactly first

1005
00:42:39,869 --> 00:42:43,219
you have to<font color="#CCCCCC"> have the code running</font>

1006
00:43:11,140 --> 00:43:15,950
so the question was how<font color="#CCCCCC"> easy is it to</font>

1007
00:43:13,759 --> 00:43:18,229
<font color="#E5E5E5">integrate Rapids</font><font color="#CCCCCC"> in existing pipelines</font>

1008
00:43:15,950 --> 00:43:20,808
like for<font color="#CCCCCC"> example if you have spark</font><font color="#E5E5E5"> using</font>

1009
00:43:18,229 --> 00:43:22,700
spark already and you then for a certain

1010
00:43:20,809 --> 00:43:24,200
part<font color="#E5E5E5"> when</font><font color="#CCCCCC"> I go parallel and then use</font>

1011
00:43:22,700 --> 00:43:25,788
<font color="#CCCCCC">Rapids and</font><font color="#E5E5E5"> then maybe you have to write</font>

1012
00:43:24,200 --> 00:43:27,710
it back in a way that spark understands

1013
00:43:25,789 --> 00:43:30,049
<font color="#E5E5E5">it can read so we're collaborating</font><font color="#CCCCCC"> very</font>

1014
00:43:27,710 --> 00:43:33,950
closely with spark<font color="#CCCCCC"> to so</font><font color="#E5E5E5"> there will be</font>

1015
00:43:30,049 --> 00:43:36,619
<font color="#CCCCCC">announcement soon or</font><font color="#E5E5E5"> later - you know</font>

1016
00:43:33,950 --> 00:43:38,720
how the actual<font color="#E5E5E5"> integration looks like we</font>

1017
00:43:36,619 --> 00:43:40,789
definitely<font color="#E5E5E5"> our goal is that</font><font color="#CCCCCC"> it's all</font>

1018
00:43:38,720 --> 00:43:42,799
seamless<font color="#E5E5E5"> so if you are you know you're</font>

1019
00:43:40,789 --> 00:43:45,319
the data scientists writing<font color="#E5E5E5"> Python in</font>

1020
00:43:42,799 --> 00:43:46,670
your<font color="#E5E5E5"> notebook</font><font color="#CCCCCC"> you should be able</font><font color="#E5E5E5"> to</font>

1021
00:43:45,319 --> 00:43:48,470
switch back and forth this entry you

1022
00:43:46,670 --> 00:43:49,430
know<font color="#E5E5E5"> maybe you have a line</font><font color="#CCCCCC"> in here</font><font color="#E5E5E5"> and</font>

1023
00:43:48,470 --> 00:43:51,169
there<font color="#E5E5E5"> where you</font><font color="#CCCCCC"> have to do some</font>

1024
00:43:49,430 --> 00:43:53,660
conversion<font color="#E5E5E5"> but it should be completely</font>

1025
00:43:51,170 --> 00:43:55,519
seamless<font color="#E5E5E5"> it's most</font><font color="#CCCCCC"> likely I would assume</font>

1026
00:43:53,660 --> 00:43:57,799
not seamless yet<font color="#CCCCCC"> you know it's all still</font>

1027
00:43:55,519 --> 00:43:59,269
<font color="#CCCCCC">here like currently with</font><font color="#E5E5E5"> 0.5 I think</font>

1028
00:43:57,799 --> 00:44:01,670
version so it's not you know<font color="#E5E5E5"> it's not</font>

1029
00:43:59,269 --> 00:44:03,288
<font color="#CCCCCC">necessarily a production quality</font><font color="#E5E5E5"> thing</font>

1030
00:44:01,670 --> 00:44:04,849
yet where I could say like<font color="#E5E5E5"> just switch</font>

1031
00:44:03,289 --> 00:44:07,160
<font color="#CCCCCC">over and everything will run faster so</font>

1032
00:44:04,849 --> 00:44:08,779
we're not<font color="#E5E5E5"> there yet</font><font color="#CCCCCC"> but for the ones</font>

1033
00:44:07,160 --> 00:44:10,519
like all our collaborators<font color="#E5E5E5"> are very</font>

1034
00:44:08,779 --> 00:44:15,799
happy<font color="#E5E5E5"> with the with the</font><font color="#CCCCCC"> speed-up Stacy</font>

1035
00:44:10,519 --> 00:44:18,200
so it seems<font color="#E5E5E5"> to be good enough</font><font color="#CCCCCC"> for now to</font>

1036
00:44:15,799 --> 00:44:21,200
be integratable<font color="#E5E5E5"> in existing pipelines</font>

1037
00:44:18,200 --> 00:44:23,058
but I would assume<font color="#CCCCCC"> since its new you</font>

1038
00:44:21,200 --> 00:44:26,828
know<font color="#E5E5E5"> realistically that's always a</font>

1039
00:44:23,059 --> 00:44:26,829
little<font color="#E5E5E5"> bit of thing involved</font>

1040
00:44:30,260 --> 00:44:34,539
[Applause]

