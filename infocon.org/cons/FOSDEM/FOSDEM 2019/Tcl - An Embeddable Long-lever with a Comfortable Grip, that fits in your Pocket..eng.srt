1
00:00:04,610 --> 00:00:10,850
thank you sorry about the the wine there

2
00:00:09,080 --> 00:00:15,320
I don't<font color="#CCCCCC"> know what's going on I'm</font><font color="#E5E5E5"> going</font>

3
00:00:10,850 --> 00:00:18,410
<font color="#CCCCCC">to talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> TCL as a minimalist</font>

4
00:00:15,320 --> 00:00:21,470
language in the sense<font color="#E5E5E5"> that as a language</font>

5
00:00:18,410 --> 00:00:25,939
<font color="#CCCCCC">it sort of has no syntax</font><font color="#E5E5E5"> or not no</font>

6
00:00:21,470 --> 00:00:30,409
<font color="#CCCCCC">syntax but no keywords and a minimalist</font>

7
00:00:25,939 --> 00:00:32,360
<font color="#E5E5E5">syntax that lets you inject your own</font>

8
00:00:30,410 --> 00:00:35,780
commands and in fact the things that

9
00:00:32,360 --> 00:00:37,000
ship out of<font color="#E5E5E5"> the box</font><font color="#CCCCCC"> are the same sorts</font>

10
00:00:35,780 --> 00:00:39,559
of commands<font color="#CCCCCC"> that you can make yourself</font>

11
00:00:37,000 --> 00:00:41,390
and so<font color="#E5E5E5"> you can make it be whatever you</font>

12
00:00:39,559 --> 00:00:43,370
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be and this is the long lever</font>

13
00:00:41,390 --> 00:00:47,420
with an easy grip<font color="#E5E5E5"> because you can make</font>

14
00:00:43,370 --> 00:00:49,220
<font color="#E5E5E5">it feel however you like and then do</font>

15
00:00:47,420 --> 00:00:50,900
whatever you want<font color="#E5E5E5"> so I've got enough</font>

16
00:00:49,220 --> 00:00:53,600
slides to show I've got<font color="#E5E5E5"> some</font>

17
00:00:50,900 --> 00:00:55,250
demonstrations to show<font color="#E5E5E5"> I'll talk briefly</font>

18
00:00:53,600 --> 00:00:57,530
a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> about the history</font><font color="#CCCCCC"> of it and</font>

19
00:00:55,250 --> 00:01:01,280
then get into a<font color="#E5E5E5"> couple of the features</font>

20
00:00:57,530 --> 00:01:02,750
<font color="#E5E5E5">and specifically get into tweaking some</font>

21
00:01:01,280 --> 00:01:06,140
<font color="#E5E5E5">of those features</font><font color="#CCCCCC"> to show what you can</font>

22
00:01:02,750 --> 00:01:08,510
do with it<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all I guess how</font><font color="#CCCCCC"> many</font>

23
00:01:06,140 --> 00:01:12,980
<font color="#E5E5E5">people are already familiar with TCL as</font>

24
00:01:08,510 --> 00:01:14,960
a as a language small<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> less</font><font color="#CCCCCC"> than</font>

25
00:01:12,980 --> 00:01:21,830
half<font color="#E5E5E5"> how many people program with the C</font>

26
00:01:14,960 --> 00:01:24,639
<font color="#E5E5E5">API Julie three get into some see just a</font>

27
00:01:21,830 --> 00:01:29,870
heads up but it's<font color="#CCCCCC"> it's good it's fun</font>

28
00:01:24,640 --> 00:01:32,600
<font color="#CCCCCC">first of</font><font color="#E5E5E5"> all so TCL was started</font><font color="#CCCCCC"> was</font>

29
00:01:29,870 --> 00:01:38,120
launched<font color="#CCCCCC"> into the world in</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 1987</font>

30
00:01:32,600 --> 00:01:40,339
<font color="#CCCCCC">and what brought it there was the</font>

31
00:01:38,120 --> 00:01:43,040
inventors<font color="#E5E5E5"> frustration working with</font>

32
00:01:40,340 --> 00:01:45,170
command languages<font color="#E5E5E5"> leading up to that so</font>

33
00:01:43,040 --> 00:01:49,010
what he did was design integrated

34
00:01:45,170 --> 00:01:52,040
circuits<font color="#E5E5E5"> and built tooling for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> work</font>

35
00:01:49,010 --> 00:01:53,810
for the<font color="#E5E5E5"> integrated circuit work and they</font>

36
00:01:52,040 --> 00:01:57,680
had specific<font color="#E5E5E5"> tools that</font><font color="#CCCCCC"> they wanted to</font>

37
00:01:53,810 --> 00:01:59,690
<font color="#E5E5E5">build and commands to drive their tools</font>

38
00:01:57,680 --> 00:02:02,360
<font color="#CCCCCC">and every time that</font><font color="#E5E5E5"> they were doing</font>

39
00:01:59,690 --> 00:02:05,330
their work<font color="#E5E5E5"> ad hoc they would build the</font>

40
00:02:02,360 --> 00:02:06,710
control languages that they want and end

41
00:02:05,330 --> 00:02:07,130
up<font color="#CCCCCC"> building something</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> slightly</font>

42
00:02:06,710 --> 00:02:09,288
different

43
00:02:07,130 --> 00:02:13,329
<font color="#E5E5E5">time after time and compatible time</font>

44
00:02:09,288 --> 00:02:17,299
after time and<font color="#E5E5E5"> ad hoc</font><font color="#CCCCCC"> from time</font><font color="#E5E5E5"> to time</font>

45
00:02:13,330 --> 00:02:18,330
<font color="#CCCCCC">on sabbatical from</font><font color="#E5E5E5"> his work at the UC</font>

46
00:02:17,300 --> 00:02:20,670
Berkeley

47
00:02:18,330 --> 00:02:23,790
he it occurred to<font color="#E5E5E5"> him why not</font><font color="#CCCCCC"> write a</font>

48
00:02:20,670 --> 00:02:26,369
<font color="#E5E5E5">standard kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a thing to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> this that</font>

49
00:02:23,790 --> 00:02:27,989
would<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> simple kind of a shim that</font>

50
00:02:26,370 --> 00:02:29,610
<font color="#E5E5E5">you can inject into whatever the tool</font>

51
00:02:27,990 --> 00:02:32,220
the specific work the things that

52
00:02:29,610 --> 00:02:35,490
they're interested<font color="#CCCCCC"> in and have a</font>

53
00:02:32,220 --> 00:02:37,470
standard<font color="#E5E5E5"> library</font><font color="#CCCCCC"> that would do</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> at</font>

54
00:02:35,490 --> 00:02:39,390
the time this<font color="#E5E5E5"> was before the wide</font>

55
00:02:37,470 --> 00:02:41,940
<font color="#CCCCCC">distribution of</font><font color="#E5E5E5"> gooeys as far as tools</font>

56
00:02:39,390 --> 00:02:47,220
<font color="#E5E5E5">go so people were</font><font color="#CCCCCC"> typing all of their</font>

57
00:02:41,940 --> 00:02:51,410
commands and this was the<font color="#E5E5E5"> conception of</font>

58
00:02:47,220 --> 00:02:54,570
TCL<font color="#CCCCCC"> it was launched on the world in 1988</font>

59
00:02:51,410 --> 00:02:55,680
<font color="#E5E5E5">so developed conceptually in 87 and</font>

60
00:02:54,570 --> 00:02:58,170
launched in 88<font color="#CCCCCC"> so</font><font color="#E5E5E5"> at about this time</font>

61
00:02:55,680 --> 00:03:00,180
<font color="#CCCCCC">Perl one was out Python I think still</font>

62
00:02:58,170 --> 00:03:02,730
had about<font color="#E5E5E5"> six years to come</font>

63
00:03:00,180 --> 00:03:06,660
ruby was<font color="#E5E5E5"> still in the future</font><font color="#CCCCCC"> bash was in</font>

64
00:03:02,730 --> 00:03:09,390
the<font color="#E5E5E5"> future so often I</font><font color="#CCCCCC"> think that</font><font color="#E5E5E5"> TCL is</font>

65
00:03:06,660 --> 00:03:11,250
lumped in with languages as a scripting

66
00:03:09,390 --> 00:03:14,399
language which is fair<font color="#CCCCCC"> its interactive</font>

67
00:03:11,250 --> 00:03:17,850
it's got a read eval print loop<font color="#CCCCCC"> it's got</font>

68
00:03:14,400 --> 00:03:19,680
the quick sort<font color="#E5E5E5"> of prototyping I guess</font>

69
00:03:17,850 --> 00:03:20,160
that people<font color="#E5E5E5"> associate with a scripting</font>

70
00:03:19,680 --> 00:03:24,510
language

71
00:03:20,160 --> 00:03:29,400
so you could say Ruby Perl Python<font color="#E5E5E5"> TCL</font><font color="#CCCCCC"> as</font>

72
00:03:24,510 --> 00:03:31,200
far as languages<font color="#E5E5E5"> but it is unique</font><font color="#CCCCCC"> in the</font>

73
00:03:29,400 --> 00:03:35,790
<font color="#E5E5E5">sense that it doesn't have any keywords</font>

74
00:03:31,200 --> 00:03:37,799
<font color="#CCCCCC">and it's built to be injected into a</font>

75
00:03:35,790 --> 00:03:42,269
thing that is more interesting<font color="#CCCCCC"> than what</font>

76
00:03:37,800 --> 00:03:45,480
it is<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> it provides kind</font><font color="#CCCCCC"> of a</font>

77
00:03:42,269 --> 00:03:46,970
substrate<font color="#E5E5E5"> to have the interesting thing</font>

78
00:03:45,480 --> 00:03:49,679
that<font color="#E5E5E5"> you're working</font><font color="#CCCCCC"> on</font>

79
00:03:46,970 --> 00:03:52,410
put commands into it and then make them

80
00:03:49,680 --> 00:03:54,480
available<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example what it would</font>

81
00:03:52,410 --> 00:03:56,640
do is give you things like looping

82
00:03:54,480 --> 00:03:59,250
constructs and decision and variable

83
00:03:56,640 --> 00:04:02,369
<font color="#CCCCCC">assignment</font><font color="#E5E5E5"> and and simple things</font><font color="#CCCCCC"> like</font>

84
00:03:59,250 --> 00:04:06,180
<font color="#E5E5E5">that</font><font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> have a tool that</font><font color="#CCCCCC"> does an</font>

85
00:04:02,370 --> 00:04:08,070
interesting<font color="#E5E5E5"> thing and leave driving that</font>

86
00:04:06,180 --> 00:04:10,290
tool to something else<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is all very</font>

87
00:04:08,070 --> 00:04:12,239
<font color="#CCCCCC">abstract but we'll let's not not</font>

88
00:04:10,290 --> 00:04:15,630
abstract but<font color="#E5E5E5"> we'll get into some</font>

89
00:04:12,239 --> 00:04:20,579
<font color="#E5E5E5">specific examples</font><font color="#CCCCCC"> later on</font><font color="#E5E5E5"> one of the</font>

90
00:04:15,630 --> 00:04:22,530
things that is interesting about TCL is

91
00:04:20,579 --> 00:04:24,960
that it's what's called<font color="#CCCCCC"> homo iconic</font>

92
00:04:22,530 --> 00:04:28,500
<font color="#E5E5E5">which means that the icon is the</font>

93
00:04:24,960 --> 00:04:30,780
representation<font color="#CCCCCC"> of what it works with</font>

94
00:04:28,500 --> 00:04:31,169
which is<font color="#E5E5E5"> to say that in this</font><font color="#CCCCCC"> case code</font>

95
00:04:30,780 --> 00:04:33,809
is

96
00:04:31,169 --> 00:04:37,068
is code<font color="#CCCCCC"> you'll be familiar with this</font>

97
00:04:33,810 --> 00:04:40,650
<font color="#E5E5E5">from lisps for example where it runs as</font>

98
00:04:37,069 --> 00:04:42,449
lists and it parses lists and<font color="#E5E5E5"> so we can</font>

99
00:04:40,650 --> 00:04:46,758
<font color="#CCCCCC">omit</font><font color="#E5E5E5"> a thing and run that thing</font>

100
00:04:42,449 --> 00:04:52,289
TCL is the same way but<font color="#E5E5E5"> it uses strings</font>

101
00:04:46,759 --> 00:04:54,810
<font color="#CCCCCC">indeed</font><font color="#E5E5E5"> it used to be pure</font><font color="#CCCCCC"> string run as</font>

102
00:04:52,289 --> 00:04:57,599
a language<font color="#E5E5E5"> so it would be shooting</font>

103
00:04:54,810 --> 00:05:01,469
strings<font color="#E5E5E5"> or arrays of characters around</font>

104
00:04:57,599 --> 00:05:04,680
as the method of<font color="#E5E5E5"> its operation</font><font color="#CCCCCC"> that's</font>

105
00:05:01,469 --> 00:05:06,270
<font color="#E5E5E5">different now but conceptually it's the</font>

106
00:05:04,680 --> 00:05:09,330
same thing everything<font color="#E5E5E5"> is representable</font>

107
00:05:06,270 --> 00:05:12,270
<font color="#E5E5E5">as a string so what that means is that</font>

108
00:05:09,330 --> 00:05:13,770
commands<font color="#CCCCCC"> emit strings and strings are</font>

109
00:05:12,270 --> 00:05:17,159
the things that you run so<font color="#E5E5E5"> you can have</font>

110
00:05:13,770 --> 00:05:20,270
the emitted<font color="#E5E5E5"> part of a command as a</font>

111
00:05:17,159 --> 00:05:20,270
runnable thing

112
00:05:21,199 --> 00:05:27,839
the commands are<font color="#E5E5E5"> also I was thinking</font>

113
00:05:26,129 --> 00:05:31,229
about it<font color="#E5E5E5"> in the sense</font><font color="#CCCCCC"> that it's kind of</font>

114
00:05:27,839 --> 00:05:36,000
like<font color="#CCCCCC"> a socket pair in the sense</font><font color="#E5E5E5"> to try</font>

115
00:05:31,229 --> 00:05:37,710
to figure<font color="#E5E5E5"> out what a command is where</font>

116
00:05:36,000 --> 00:05:40,979
with a socket<font color="#E5E5E5"> for example you've got</font><font color="#CCCCCC"> an</font>

117
00:05:37,710 --> 00:05:42,930
IP<font color="#E5E5E5"> and you've got a port</font><font color="#CCCCCC"> or a pair</font>

118
00:05:40,979 --> 00:05:46,378
another<font color="#E5E5E5"> IP and another port and</font><font color="#CCCCCC"> that is</font>

119
00:05:42,930 --> 00:05:48,899
a unique<font color="#CCCCCC"> identifier between two machines</font>

120
00:05:46,379 --> 00:05:54,060
<font color="#E5E5E5">and there's no other thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is like</font>

121
00:05:48,899 --> 00:05:57,029
<font color="#CCCCCC">that as well</font><font color="#E5E5E5"> with the commands they have</font>

122
00:05:54,060 --> 00:05:59,729
a name but they also have a little piece

123
00:05:57,029 --> 00:06:01,379
of<font color="#E5E5E5"> data that comes along with them they</font>

124
00:05:59,729 --> 00:06:02,818
also have an implementation<font color="#E5E5E5"> that could</font>

125
00:06:01,379 --> 00:06:06,529
be separate from<font color="#E5E5E5"> the name and in this</font>

126
00:06:02,819 --> 00:06:12,270
sense it's<font color="#CCCCCC"> almost like the Magritte</font>

127
00:06:06,529 --> 00:06:14,339
painting<font color="#CCCCCC"> Cecina</font><font color="#E5E5E5"> paws and</font><font color="#CCCCCC"> deep where</font><font color="#E5E5E5"> you</font>

128
00:06:12,270 --> 00:06:16,049
you you you might<font color="#E5E5E5"> wonder what what it's</font>

129
00:06:14,339 --> 00:06:19,219
doing or what's<font color="#E5E5E5"> going on and indeed you</font>

130
00:06:16,050 --> 00:06:23,249
<font color="#E5E5E5">can take like</font><font color="#CCCCCC"> the standard commands and</font>

131
00:06:19,219 --> 00:06:25,409
rename them or delete<font color="#CCCCCC"> them because</font><font color="#E5E5E5"> there</font>

132
00:06:23,249 --> 00:06:27,930
are<font color="#E5E5E5"> no keywords in TCL so it is a</font>

133
00:06:25,409 --> 00:06:30,659
substrate<font color="#CCCCCC"> that runs a thing and that's</font>

134
00:06:27,930 --> 00:06:32,490
it<font color="#E5E5E5"> so it provides a substrate it ships a</font>

135
00:06:30,659 --> 00:06:34,498
bunch of<font color="#E5E5E5"> commands but you don't need to</font>

136
00:06:32,490 --> 00:06:37,680
use them<font color="#E5E5E5"> and indeed a lot of people</font>

137
00:06:34,499 --> 00:06:42,300
rewrite some example looping structures

138
00:06:37,680 --> 00:06:46,710
you have<font color="#CCCCCC"> wiles and</font><font color="#E5E5E5"> fours or for each</font><font color="#CCCCCC"> two</font>

139
00:06:42,300 --> 00:06:48,840
run<font color="#E5E5E5"> across a list and it does the</font>

140
00:06:46,710 --> 00:06:51,239
obvious thing you can say for<font color="#CCCCCC"> X in</font><font color="#E5E5E5"> list</font>

141
00:06:48,840 --> 00:06:53,250
of<font color="#E5E5E5"> things do some stuff and it will</font>

142
00:06:51,240 --> 00:06:57,840
properly<font color="#E5E5E5"> do those things iterate over it</font>

143
00:06:53,250 --> 00:07:03,500
<font color="#E5E5E5">but I've written things for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> that</font>

144
00:06:57,840 --> 00:07:08,429
<font color="#E5E5E5">would take a JSON blob</font><font color="#CCCCCC"> as a command</font><font color="#E5E5E5"> and</font>

145
00:07:03,500 --> 00:07:11,910
iterate over<font color="#E5E5E5"> all of the the peer nodes</font>

146
00:07:08,430 --> 00:07:16,220
or recurse down the children no nodes<font color="#E5E5E5"> as</font>

147
00:07:11,910 --> 00:07:19,530
a structure a looping structure right so

148
00:07:16,220 --> 00:07:23,730
the<font color="#CCCCCC"> json parser you can take any minimal</font>

149
00:07:19,530 --> 00:07:29,369
<font color="#E5E5E5">c version of it and quickly write a nice</font>

150
00:07:23,730 --> 00:07:31,410
little<font color="#E5E5E5"> interface to TCL for it and turn</font>

151
00:07:29,370 --> 00:07:35,550
it<font color="#CCCCCC"> into a</font><font color="#E5E5E5"> first-class looping kind of a</font>

152
00:07:31,410 --> 00:07:41,730
thing<font color="#E5E5E5"> within TCL because what a command</font>

153
00:07:35,550 --> 00:07:45,630
<font color="#E5E5E5">in and TCL is really really basic what</font>

154
00:07:41,730 --> 00:07:49,100
I'll do I think is launched a couple

155
00:07:45,630 --> 00:07:53,520
demos<font color="#E5E5E5"> and so I'll show you some the</font>

156
00:07:49,100 --> 00:07:56,700
<font color="#CCCCCC">loops and command evocations and we can</font>

157
00:07:53,520 --> 00:08:01,049
show<font color="#E5E5E5"> some substitution as well how a</font>

158
00:07:56,700 --> 00:08:04,289
<font color="#E5E5E5">command can have its output be another</font>

159
00:08:01,050 --> 00:08:08,040
command and<font color="#E5E5E5"> run that and rewrite some</font>

160
00:08:04,290 --> 00:08:09,570
looping<font color="#E5E5E5"> and do a</font><font color="#CCCCCC"> little bit of</font>

161
00:08:08,040 --> 00:08:12,300
<font color="#CCCCCC">introspection as well which is</font><font color="#E5E5E5"> another</font>

162
00:08:09,570 --> 00:08:15,630
<font color="#E5E5E5">good thing as as simple as what the</font>

163
00:08:12,300 --> 00:08:18,120
substrate for TCL is it has really<font color="#E5E5E5"> great</font>

164
00:08:15,630 --> 00:08:22,159
facilities for introspection<font color="#CCCCCC"> which is to</font>

165
00:08:18,120 --> 00:08:24,960
say<font color="#E5E5E5"> you can tell you what</font><font color="#CCCCCC"> it knows and</font>

166
00:08:22,160 --> 00:08:28,920
<font color="#CCCCCC">as</font><font color="#E5E5E5"> far as commands go for example and</font>

167
00:08:24,960 --> 00:08:32,100
within each command<font color="#E5E5E5"> you can say of what</font>

168
00:08:28,920 --> 00:08:37,500
type are<font color="#E5E5E5"> you which may sound interesting</font>

169
00:08:32,100 --> 00:08:39,480
because<font color="#E5E5E5"> TCL is often one</font><font color="#CCCCCC"> of its</font>

170
00:08:37,500 --> 00:08:43,380
mattresses everything is a string which

171
00:08:39,480 --> 00:08:46,260
means<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it parses strings and it</font>

172
00:08:43,380 --> 00:08:49,050
<font color="#E5E5E5">omits strings strings are generally</font>

173
00:08:46,260 --> 00:08:51,420
considered<font color="#CCCCCC"> type less and and duck typing</font>

174
00:08:49,050 --> 00:08:53,130
for example where<font color="#E5E5E5"> you just instantiate a</font>

175
00:08:51,420 --> 00:08:56,880
variable and have it do the right thing

176
00:08:53,130 --> 00:09:01,769
or do something<font color="#E5E5E5"> I guess</font>

177
00:08:56,880 --> 00:09:03,839
is both<font color="#CCCCCC"> attractive and can also be</font><font color="#E5E5E5"> a</font>

178
00:09:01,769 --> 00:09:06,170
cause<font color="#E5E5E5"> for consternation or a write</font>

179
00:09:03,839 --> 00:09:08,610
errors<font color="#CCCCCC"> for example if you're</font><font color="#E5E5E5"> trying to</font>

180
00:09:06,170 --> 00:09:10,709
work with<font color="#CCCCCC"> something</font><font color="#E5E5E5"> as an integer and</font>

181
00:09:08,610 --> 00:09:15,990
you feed it<font color="#E5E5E5"> something goes not an editor</font>

182
00:09:10,709 --> 00:09:18,390
<font color="#E5E5E5">and internally interestingly I think we</font>

183
00:09:15,990 --> 00:09:21,200
might touch on<font color="#E5E5E5"> it</font><font color="#CCCCCC"> there definitely are</font>

184
00:09:18,390 --> 00:09:24,640
types in TCL but everything is still

185
00:09:21,200 --> 00:09:25,760
representable as a string so it's the

186
00:09:24,640 --> 00:09:35,959
[Music]

187
00:09:25,760 --> 00:09:40,160
kind<font color="#E5E5E5"> of default default</font><font color="#CCCCCC"> marshaling</font>

188
00:09:35,959 --> 00:09:40,160
method<font color="#E5E5E5"> maybe I should have left that off</font>

189
00:09:40,550 --> 00:09:46,019
<font color="#CCCCCC">method so the</font><font color="#E5E5E5"> strings come and go</font>

190
00:09:44,339 --> 00:09:51,060
<font color="#E5E5E5">there are inferences that</font><font color="#CCCCCC"> you can make</font>

191
00:09:46,019 --> 00:09:57,720
with<font color="#E5E5E5"> the types as well but let me load</font>

192
00:09:51,060 --> 00:10:06,170
up some code and show off some<font color="#CCCCCC"> of this</font>

193
00:09:57,720 --> 00:10:06,170
<font color="#E5E5E5">some type stuff that</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> talking about</font>

194
00:10:37,060 --> 00:10:49,569
so what I've got<font color="#CCCCCC"> here is some C code</font>

195
00:10:41,040 --> 00:10:52,480
<font color="#E5E5E5">I've got 400 lines 425 lines and this</font>

196
00:10:49,570 --> 00:10:56,140
I'm<font color="#E5E5E5"> gonna load it into a default TCL</font>

197
00:10:52,480 --> 00:11:00,340
interpreter which I can launch like this

198
00:10:56,140 --> 00:11:03,910
and for example<font color="#E5E5E5"> with the introspection I</font>

199
00:11:00,340 --> 00:11:06,790
can do<font color="#E5E5E5"> something like this and get a</font>

200
00:11:03,910 --> 00:11:08,140
list of the things<font color="#E5E5E5"> that it knows</font><font color="#CCCCCC"> these</font>

201
00:11:06,790 --> 00:11:10,689
<font color="#E5E5E5">are the things that ship out of the box</font>

202
00:11:08,140 --> 00:11:15,010
so<font color="#CCCCCC"> it's tell socket subs to open</font>

203
00:11:10,690 --> 00:11:18,490
etcetera etcetera<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> that I've got</font>

204
00:11:15,010 --> 00:11:25,000
<font color="#CCCCCC">over here I can load that</font><font color="#E5E5E5"> up as a module</font>

205
00:11:18,490 --> 00:11:28,030
<font color="#E5E5E5">and what that looks like is</font><font color="#CCCCCC"> package</font>

206
00:11:25,000 --> 00:11:29,590
require and I called this one number

207
00:11:28,030 --> 00:11:33,610
like because I was working<font color="#CCCCCC"> with some</font>

208
00:11:29,590 --> 00:11:36,550
numerical stuff as an initial<font color="#E5E5E5"> example so</font>

209
00:11:33,610 --> 00:11:40,890
this<font color="#E5E5E5"> module is loaded</font><font color="#CCCCCC"> now and if I go</font>

210
00:11:36,550 --> 00:11:43,870
<font color="#E5E5E5">back over here what I've</font><font color="#CCCCCC"> got is a</font><font color="#E5E5E5"> a</font>

211
00:11:40,890 --> 00:11:46,810
command<font color="#E5E5E5"> that's called number like and</font>

212
00:11:43,870 --> 00:11:50,980
then<font color="#E5E5E5"> one so this is my own registered</font>

213
00:11:46,810 --> 00:11:56,819
command<font color="#CCCCCC"> and somewhere in that list it's</font>

214
00:11:50,980 --> 00:12:03,550
going<font color="#E5E5E5"> to show up what does it do though</font>

215
00:11:56,820 --> 00:12:06,460
it is<font color="#CCCCCC"> identity I've got another one that</font>

216
00:12:03,550 --> 00:12:15,449
<font color="#E5E5E5">is the same and what is interesting</font>

217
00:12:06,460 --> 00:12:20,020
about<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> that from here this</font><font color="#E5E5E5"> is the</font>

218
00:12:15,450 --> 00:12:24,700
prototype<font color="#E5E5E5"> and this is the actual code</font>

219
00:12:20,020 --> 00:12:26,770
for<font color="#CCCCCC"> it this</font><font color="#E5E5E5"> is the that one command is</font>

220
00:12:24,700 --> 00:12:29,130
registered here<font color="#CCCCCC"> I've got two sub</font>

221
00:12:26,770 --> 00:12:31,750
commands<font color="#E5E5E5"> that it will take and this is</font>

222
00:12:29,130 --> 00:12:33,370
<font color="#CCCCCC">the like I said</font><font color="#E5E5E5"> TCL</font><font color="#CCCCCC"> doesn't have any key</font>

223
00:12:31,750 --> 00:12:36,130
<font color="#CCCCCC">words it's got a few simple parsing</font>

224
00:12:33,370 --> 00:12:37,750
rules<font color="#CCCCCC"> I won't get into</font><font color="#E5E5E5"> them there are 12</font>

225
00:12:36,130 --> 00:12:39,960
of them<font color="#E5E5E5"> once you know those 12 you know</font>

226
00:12:37,750 --> 00:12:43,570
everything that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is to know</font>

227
00:12:39,960 --> 00:12:49,860
so I've got<font color="#E5E5E5"> a sub command here that will</font>

228
00:12:43,570 --> 00:12:49,860
do<font color="#E5E5E5"> add and delete</font>

229
00:12:50,350 --> 00:13:01,449
it tells you what it wants it does the

230
00:12:58,329 --> 00:13:04,508
obvious thing<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are also composable</font>

231
00:13:01,449 --> 00:13:07,089
so what I can<font color="#CCCCCC"> do is this three gets</font>

232
00:13:04,509 --> 00:13:15,179
returned as a thing<font color="#E5E5E5"> but I could say</font>

233
00:13:07,089 --> 00:13:22,359
number like to add number like<font color="#E5E5E5"> one</font><font color="#CCCCCC"> add</font>

234
00:13:15,179 --> 00:13:27,970
three<font color="#E5E5E5"> let's number like to add number</font>

235
00:13:22,359 --> 00:13:41,699
like<font color="#CCCCCC"> one</font><font color="#E5E5E5"> add three and</font><font color="#CCCCCC"> it does the</font><font color="#E5E5E5"> right</font>

236
00:13:27,970 --> 00:13:41,699
thing<font color="#E5E5E5"> I'm gonna do this and load up</font>

237
00:13:41,910 --> 00:13:49,228
something else

238
00:13:43,299 --> 00:13:56,108
I've<font color="#E5E5E5"> got with respect to the</font>

239
00:13:49,229 --> 00:14:02,579
introspection this series of commands

240
00:13:56,109 --> 00:14:06,309
here make one<font color="#CCCCCC"> XYZ and a let's you</font>

241
00:14:02,579 --> 00:14:08,858
instead<font color="#CCCCCC"> of having</font><font color="#E5E5E5"> C code</font><font color="#CCCCCC"> to make a</font>

242
00:14:06,309 --> 00:14:12,069
command what I've<font color="#E5E5E5"> got is a command that</font>

243
00:14:08,859 --> 00:14:21,669
makes commands so this one was<font color="#E5E5E5"> cold make</font>

244
00:14:12,069 --> 00:14:26,949
one so this right here<font color="#CCCCCC"> takes an argument</font>

245
00:14:21,669 --> 00:14:28,869
<font color="#E5E5E5">and takes two arguments actually it</font>

246
00:14:26,949 --> 00:14:31,358
takes<font color="#E5E5E5"> the name of whatever you want</font><font color="#CCCCCC"> to</font>

247
00:14:28,869 --> 00:14:34,959
give it and a base<font color="#CCCCCC"> value this is another</font>

248
00:14:31,359 --> 00:14:40,419
number emitting<font color="#E5E5E5"> kind of a thing and it</font>

249
00:14:34,959 --> 00:14:42,488
will create<font color="#E5E5E5"> the command right here and</font>

250
00:14:40,419 --> 00:14:44,499
it gets injected<font color="#E5E5E5"> into the interpreter</font>

251
00:14:42,489 --> 00:14:48,039
<font color="#E5E5E5">and it's instantly a first-class kind of</font>

252
00:14:44,499 --> 00:14:51,069
an<font color="#E5E5E5"> object so</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> make four of</font>

253
00:14:48,039 --> 00:14:54,299
them and what I'm going<font color="#CCCCCC"> to do actually</font>

254
00:14:51,069 --> 00:14:54,299
<font color="#CCCCCC">is edit</font><font color="#E5E5E5"> this a bit</font>

255
00:15:14,230 --> 00:15:26,020
so you can see here there are the

256
00:15:21,700 --> 00:15:34,510
commands that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> created here</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> Y &</font>

257
00:15:26,020 --> 00:15:37,060
<font color="#E5E5E5">Z but aside from that with the commands</font>

258
00:15:34,510 --> 00:15:40,870
<font color="#E5E5E5">they let themselves be</font><font color="#CCCCCC"> introspected as</font>

259
00:15:37,060 --> 00:15:44,530
well so I know<font color="#E5E5E5"> from a command what</font><font color="#CCCCCC"> it's</font>

260
00:15:40,870 --> 00:15:47,530
<font color="#E5E5E5">backing</font><font color="#CCCCCC"> see structure or see code is and</font>

261
00:15:44,530 --> 00:15:49,870
that is the the signature of the the<font color="#CCCCCC"> see</font>

262
00:15:47,530 --> 00:15:52,480
function<font color="#CCCCCC"> that it gets</font><font color="#E5E5E5"> called with and I</font>

263
00:15:49,870 --> 00:15:56,830
can also determine what a<font color="#CCCCCC"> specific piece</font>

264
00:15:52,480 --> 00:15:59,050
<font color="#CCCCCC">of client data like</font><font color="#E5E5E5"> discrete specific</font>

265
00:15:56,830 --> 00:16:01,110
information<font color="#E5E5E5"> belongs with each command so</font>

266
00:15:59,050 --> 00:16:04,449
for example if I've got a thing that

267
00:16:01,110 --> 00:16:06,490
emits a number<font color="#E5E5E5"> the number that it is</font>

268
00:16:04,450 --> 00:16:09,310
emitting is going to be carried<font color="#CCCCCC"> with it</font>

269
00:16:06,490 --> 00:16:11,500
<font color="#E5E5E5">in memory and between with those two</font>

270
00:16:09,310 --> 00:16:14,920
<font color="#E5E5E5">different things the the backing</font>

271
00:16:11,500 --> 00:16:19,810
function and the unique client data that

272
00:16:14,920 --> 00:16:24,969
it has I can<font color="#CCCCCC"> identify things</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are of</font>

273
00:16:19,810 --> 00:16:35,910
a type so example I've got a command

274
00:16:24,970 --> 00:16:39,160
called<font color="#E5E5E5"> like me and what it does is loads</font>

275
00:16:35,910 --> 00:16:41,050
<font color="#E5E5E5">it takes two arguments it takes</font><font color="#CCCCCC"> a</font>

276
00:16:39,160 --> 00:16:43,870
reference command<font color="#E5E5E5"> and a list of</font>

277
00:16:41,050 --> 00:16:46,750
candidate commands which are the things

278
00:16:43,870 --> 00:16:48,700
<font color="#E5E5E5">that it wants</font><font color="#CCCCCC"> to compare is anything in</font>

279
00:16:46,750 --> 00:16:53,220
this list<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same as the first</font>

280
00:16:48,700 --> 00:16:53,220
reference piece so

281
00:16:59,070 --> 00:17:08,130
if I run<font color="#E5E5E5"> it I've</font><font color="#CCCCCC"> made commands here that</font>

282
00:17:02,579 --> 00:17:10,918
are X Y Z and<font color="#CCCCCC"> a</font><font color="#E5E5E5"> there of a class of</font>

283
00:17:08,130 --> 00:17:14,640
commands that<font color="#E5E5E5"> just emit numbers if I run</font>

284
00:17:10,919 --> 00:17:18,449
like<font color="#E5E5E5"> me and I see which</font><font color="#CCCCCC"> things are like</font>

285
00:17:14,640 --> 00:17:22,620
X X Y Z<font color="#E5E5E5"> and a are all of the same kind</font>

286
00:17:18,449 --> 00:17:24,630
<font color="#E5E5E5">of command</font><font color="#CCCCCC"> so they're all</font><font color="#E5E5E5"> like X and I</font>

287
00:17:22,619 --> 00:17:25,708
run<font color="#E5E5E5"> that against info commands which is</font>

288
00:17:24,630 --> 00:17:29,960
a list<font color="#E5E5E5"> of everything that the</font>

289
00:17:25,709 --> 00:17:33,990
interpreter<font color="#E5E5E5"> knows about what it does is</font>

290
00:17:29,960 --> 00:17:37,559
properly identifies what those commands

291
00:17:33,990 --> 00:17:45,570
are it<font color="#CCCCCC"> you might notice that X itself is</font>

292
00:17:37,559 --> 00:17:49,320
missing<font color="#CCCCCC"> and that is the case mmm</font><font color="#E5E5E5"> right</font>

293
00:17:45,570 --> 00:17:51,270
here<font color="#E5E5E5"> we with the commands there's</font>

294
00:17:49,320 --> 00:17:54,000
information<font color="#E5E5E5"> that is associated with the</font>

295
00:17:51,270 --> 00:17:57,570
commands<font color="#E5E5E5"> and I chest to see is the</font>

296
00:17:54,000 --> 00:17:59,520
backing procedure for<font color="#E5E5E5"> any command that</font>

297
00:17:57,570 --> 00:18:02,399
we're testing<font color="#E5E5E5"> in the list the same as</font>

298
00:17:59,520 --> 00:18:04,200
what the reference<font color="#E5E5E5"> command is if it is</font>

299
00:18:02,400 --> 00:18:07,320
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to move on and do some more</font>

300
00:18:04,200 --> 00:18:09,270
<font color="#E5E5E5">testing here we're going to filter</font><font color="#CCCCCC"> out</font>

301
00:18:07,320 --> 00:18:12,658
other commands and so we're going to say

302
00:18:09,270 --> 00:18:14,490
if the object data<font color="#CCCCCC"> the special piece of</font>

303
00:18:12,659 --> 00:18:22,470
<font color="#E5E5E5">memory that's associated with</font><font color="#CCCCCC"> the</font>

304
00:18:14,490 --> 00:18:24,929
command is not the same as what we're

305
00:18:22,470 --> 00:18:27,419
testing against then that means<font color="#E5E5E5"> that</font>

306
00:18:24,929 --> 00:18:30,169
it's<font color="#E5E5E5"> not the exact same command because</font>

307
00:18:27,419 --> 00:18:33,330
<font color="#E5E5E5">if the special memory is the same</font>

308
00:18:30,169 --> 00:18:34,770
between the<font color="#E5E5E5"> reference command and the</font>

309
00:18:33,330 --> 00:18:36,750
one that's<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the candidate list that</font>

310
00:18:34,770 --> 00:18:38,190
<font color="#E5E5E5">means that the special command is in the</font>

311
00:18:36,750 --> 00:18:43,440
candidate<font color="#E5E5E5"> list and we don't need to say</font>

312
00:18:38,190 --> 00:18:47,880
that<font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> itself so we if it's not</font>

313
00:18:43,440 --> 00:18:50,970
the same<font color="#E5E5E5"> then we go and append the list</font>

314
00:18:47,880 --> 00:18:53,220
of the element from<font color="#E5E5E5"> the list</font><font color="#CCCCCC"> that we're</font>

315
00:18:50,970 --> 00:18:55,020
testing because it passed<font color="#E5E5E5"> two tests it's</font>

316
00:18:53,220 --> 00:18:59,010
the same kind of thing<font color="#E5E5E5"> but it's got a</font>

317
00:18:55,020 --> 00:19:05,220
<font color="#E5E5E5">different memory</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is just an</font>

318
00:18:59,010 --> 00:19:08,030
<font color="#CCCCCC">example of</font><font color="#E5E5E5"> the command sitting on the</font>

319
00:19:05,220 --> 00:19:08,030
substrate and

320
00:19:14,360 --> 00:19:23,219
sure yeah<font color="#E5E5E5"> no that's got it we've let</font>

321
00:19:19,920 --> 00:19:37,140
<font color="#CCCCCC">syrup pretty quickly but you know no</font>

322
00:19:23,220 --> 00:19:39,890
there any questions comments<font color="#CCCCCC"> practically</font>

323
00:19:37,140 --> 00:19:41,970
<font color="#CCCCCC">speaking it's often hidden in in</font>

324
00:19:39,890 --> 00:19:44,970
enterprise networks<font color="#CCCCCC"> its office</font><font color="#E5E5E5"> very</font>

325
00:19:41,970 --> 00:19:47,490
often buried<font color="#E5E5E5"> and f5s and</font><font color="#CCCCCC"> 810</font><font color="#E5E5E5"> network</font>

326
00:19:44,970 --> 00:19:50,220
edge appliances<font color="#CCCCCC"> it's used</font><font color="#E5E5E5"> with storage</font>

327
00:19:47,490 --> 00:19:52,740
companies as<font color="#E5E5E5"> well 3par and</font><font color="#CCCCCC"> he let</font>

328
00:19:50,220 --> 00:19:58,490
<font color="#E5E5E5">Packard use it for their work in the</font>

329
00:19:52,740 --> 00:20:01,260
industry it's also used with<font color="#CCCCCC"> with</font>

330
00:19:58,490 --> 00:20:03,390
computing<font color="#E5E5E5"> like</font><font color="#CCCCCC"> competing</font><font color="#E5E5E5"> design so</font>

331
00:20:01,260 --> 00:20:05,220
cadence and Mentor Graphics for example

332
00:20:03,390 --> 00:20:10,100
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> in your computer has</font>

333
00:20:05,220 --> 00:20:12,600
been<font color="#E5E5E5"> touched by TCL</font><font color="#CCCCCC"> with electronic cad</font>

334
00:20:10,100 --> 00:20:14,969
<font color="#CCCCCC">often used in prototyping as well it's</font>

335
00:20:12,600 --> 00:20:17,399
and and the joke<font color="#E5E5E5"> is that it's it's easy</font>

336
00:20:14,970 --> 00:20:20,070
to prototype so things often get whipped

337
00:20:17,400 --> 00:20:21,840
up in TCL<font color="#E5E5E5"> and then work well enough that</font>

338
00:20:20,070 --> 00:20:26,520
they<font color="#CCCCCC"> just</font><font color="#E5E5E5"> get rolled into production as</font>

339
00:20:21,840 --> 00:20:27,899
well<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> also drove</font><font color="#E5E5E5"> the orc army and</font>

340
00:20:26,520 --> 00:20:30,950
the Lord<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Rings so if you enjoyed</font>

341
00:20:27,900 --> 00:20:30,950
<font color="#CCCCCC">that you enjoy</font><font color="#E5E5E5"> to seal</font>

342
00:20:35,050 --> 00:20:52,899
yes I do<font color="#E5E5E5"> and the way that I came to</font><font color="#CCCCCC"> it</font>

343
00:20:48,790 --> 00:20:55,360
to<font color="#E5E5E5"> begin with was as oh the question is</font>

344
00:20:52,900 --> 00:21:00,360
whether or not<font color="#E5E5E5"> I enjoy writing things in</font>

345
00:20:55,360 --> 00:21:04,439
TCL<font color="#CCCCCC"> I think it's it's fine it starts out</font>

346
00:21:00,360 --> 00:21:06,580
<font color="#E5E5E5">it's I find it very legible and then I</font>

347
00:21:04,440 --> 00:21:09,850
<font color="#E5E5E5">think that the worry is that it's going</font>

348
00:21:06,580 --> 00:21:13,139
<font color="#E5E5E5">to be like using</font><font color="#CCCCCC"> Duplo blocks or crayons</font>

349
00:21:09,850 --> 00:21:15,219
<font color="#CCCCCC">later on because it seems</font><font color="#E5E5E5"> so easy to use</font>

350
00:21:13,140 --> 00:21:16,990
<font color="#E5E5E5">but you're going to outgrow it but the</font>

351
00:21:15,220 --> 00:21:18,850
good<font color="#CCCCCC"> thing about the malleability</font><font color="#E5E5E5"> of it</font>

352
00:21:16,990 --> 00:21:25,060
is that you can extend it<font color="#E5E5E5"> as you feel</font>

353
00:21:18,850 --> 00:21:31,060
<font color="#E5E5E5">fit and I came to it</font><font color="#CCCCCC"> out of</font><font color="#E5E5E5"> pearl which</font>

354
00:21:25,060 --> 00:21:36,370
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> pearl and so very very strict full</font>

355
00:21:31,060 --> 00:21:40,270
of special<font color="#CCCCCC"> signals and and variables and</font>

356
00:21:36,370 --> 00:21:41,560
<font color="#CCCCCC">things like that</font><font color="#E5E5E5"> that are you</font><font color="#CCCCCC"> have to</font>

357
00:21:40,270 --> 00:21:43,450
<font color="#E5E5E5">know some</font><font color="#CCCCCC"> of the the deeper inner</font>

358
00:21:41,560 --> 00:21:45,510
workings<font color="#E5E5E5"> and I find that the TCL is</font>

359
00:21:43,450 --> 00:21:50,170
enough of<font color="#E5E5E5"> a blank</font><font color="#CCCCCC"> slate with a few rules</font>

360
00:21:45,510 --> 00:21:55,480
<font color="#CCCCCC">that once you know those it doesn't get</font>

361
00:21:50,170 --> 00:21:57,070
in<font color="#CCCCCC"> your way at all</font><font color="#E5E5E5"> but it's sufficiently</font>

362
00:21:55,480 --> 00:22:01,150
malleable<font color="#CCCCCC"> but it's that it's interesting</font>

363
00:21:57,070 --> 00:22:02,740
I've used it<font color="#E5E5E5"> to do system administration</font>

364
00:22:01,150 --> 00:22:05,980
for like hundreds or thousands<font color="#E5E5E5"> of</font>

365
00:22:02,740 --> 00:22:08,140
machines at a time to like do network

366
00:22:05,980 --> 00:22:09,790
connections and and pull<font color="#E5E5E5"> databases and</font>

367
00:22:08,140 --> 00:22:12,690
and turn those<font color="#CCCCCC"> things into commands</font><font color="#E5E5E5"> and</font>

368
00:22:09,790 --> 00:22:12,690
make it do<font color="#CCCCCC"> something interesting</font>

369
00:22:17,620 --> 00:22:24,199
[Applause]

