1
00:00:17,930 --> 00:00:28,170
<font color="#E5E5E5">okay it's the right time</font><font color="#CCCCCC"> okay good</font><font color="#E5E5E5"> luck</font>

2
00:00:23,400 --> 00:00:31,198
<font color="#E5E5E5">anyway okay good morning</font><font color="#CCCCCC"> everybody</font>

3
00:00:28,170 --> 00:00:33,989
my name is Diego Chaka Ali and I'm here

4
00:00:31,199 --> 00:00:35,340
<font color="#E5E5E5">with some of Qatari and today we're</font>

5
00:00:33,989 --> 00:00:39,989
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> learning</font><font color="#CCCCCC"> to rank</font>

6
00:00:35,340 --> 00:00:43,140
<font color="#CCCCCC">explain for dinosaurs</font><font color="#E5E5E5"> so before we go</font>

7
00:00:39,989 --> 00:00:45,269
<font color="#CCCCCC">into the learning</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> about us</font>

8
00:00:43,140 --> 00:00:48,660
we're both software engineers at

9
00:00:45,270 --> 00:00:52,559
Bloomberg<font color="#E5E5E5"> and we work on search</font>

10
00:00:48,660 --> 00:00:53,190
relevance for news and this talk is

11
00:00:52,559 --> 00:00:54,780
<font color="#E5E5E5">called</font>

12
00:00:53,190 --> 00:00:57,180
<font color="#E5E5E5">learning to rank</font><font color="#CCCCCC"> explain for dinosaurs</font>

13
00:00:54,780 --> 00:01:01,680
because the team where we<font color="#E5E5E5"> work is called</font>

14
00:00:57,180 --> 00:01:04,410
<font color="#E5E5E5">NSR</font><font color="#CCCCCC"> X this stands</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> new search</font>

15
00:01:01,680 --> 00:01:07,140
experience<font color="#E5E5E5"> and we basically work on</font>

16
00:01:04,410 --> 00:01:10,050
making<font color="#E5E5E5"> the user experience</font><font color="#CCCCCC"> in news</font>

17
00:01:07,140 --> 00:01:12,000
better for the<font color="#E5E5E5"> user</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> own all these</font>

18
00:01:10,050 --> 00:01:14,190
services that improve the<font color="#E5E5E5"> quality</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

19
00:01:12,000 --> 00:01:16,830
<font color="#E5E5E5">results that</font><font color="#CCCCCC"> help users to find better</font>

20
00:01:14,190 --> 00:01:21,539
news and to browse the<font color="#CCCCCC"> collection that</font>

21
00:01:16,830 --> 00:01:24,810
<font color="#CCCCCC">we have yeah so</font><font color="#E5E5E5"> here we are a dancer so</font>

22
00:01:21,539 --> 00:01:28,380
just a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> numbers about our engine we</font>

23
00:01:24,810 --> 00:01:32,160
have<font color="#E5E5E5"> around</font><font color="#CCCCCC"> 300 thousand users and we</font>

24
00:01:28,380 --> 00:01:34,770
receive 16<font color="#E5E5E5"> million queries per day we</font>

25
00:01:32,160 --> 00:01:38,190
have really tight constraint on latency

26
00:01:34,770 --> 00:01:39,840
<font color="#CCCCCC">because some of</font><font color="#E5E5E5"> the user used do trading</font>

27
00:01:38,190 --> 00:01:42,030
on that so they really<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> know when</font>

28
00:01:39,840 --> 00:01:45,929
something up and as<font color="#E5E5E5"> soon as possible so</font>

29
00:01:42,030 --> 00:01:48,209
we<font color="#E5E5E5"> have 100 milliseconds timeout</font><font color="#CCCCCC"> for</font>

30
00:01:45,929 --> 00:01:49,950
indexing<font color="#CCCCCC"> so like the story when</font><font color="#E5E5E5"> we</font>

31
00:01:48,209 --> 00:01:52,020
<font color="#E5E5E5">receive the story</font><font color="#CCCCCC"> the constraint is that</font>

32
00:01:49,950 --> 00:01:55,950
<font color="#E5E5E5">in 100 milliseconds</font><font color="#CCCCCC"> has to be searchable</font>

33
00:01:52,020 --> 00:02:00,899
<font color="#E5E5E5">and a query has to take less than 200</font>

34
00:01:55,950 --> 00:02:03,750
millisecond as for volume we you know

35
00:02:00,899 --> 00:02:06,450
<font color="#CCCCCC">journalist</font><font color="#E5E5E5"> as Bloomberg as a journalist</font>

36
00:02:03,750 --> 00:02:08,729
<font color="#E5E5E5">which is a recent</font><font color="#CCCCCC"> department and so</font>

37
00:02:06,450 --> 00:02:10,440
there<font color="#E5E5E5"> are journalists journalists all</font>

38
00:02:08,729 --> 00:02:13,590
around the world writing news but they

39
00:02:10,440 --> 00:02:15,730
also acquire news from other<font color="#E5E5E5"> news wires</font>

40
00:02:13,590 --> 00:02:18,520
like the New York<font color="#CCCCCC"> Times or</font>

41
00:02:15,730 --> 00:02:21,399
is they also have an agreement<font color="#E5E5E5"> with</font>

42
00:02:18,520 --> 00:02:24,250
Twitter so like wheels or index<font color="#E5E5E5"> the full</font>

43
00:02:21,400 --> 00:02:26,110
stream of tweets and<font color="#E5E5E5"> this makes a lot of</font>

44
00:02:24,250 --> 00:02:31,120
<font color="#E5E5E5">news so every day we receive around</font><font color="#CCCCCC"> two</font>

45
00:02:26,110 --> 00:02:34,390
million<font color="#CCCCCC"> news stories and at peak time we</font>

46
00:02:31,120 --> 00:02:37,390
can we add to<font color="#CCCCCC"> index 500 stories per</font>

47
00:02:34,390 --> 00:02:40,899
second<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> total at the moment we</font>

48
00:02:37,390 --> 00:02:43,988
have six six<font color="#E5E5E5"> hundred fifty fifty million</font>

49
00:02:40,900 --> 00:02:45,849
<font color="#E5E5E5">stories</font><font color="#CCCCCC"> in the index search comes in two</font>

50
00:02:43,989 --> 00:02:48,970
different flavors<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have the normal</font>

51
00:02:45,849 --> 00:02:51,310
<font color="#E5E5E5">search Google style</font><font color="#CCCCCC"> while you go search</font>

52
00:02:48,970 --> 00:02:54,579
for<font color="#CCCCCC"> a company or search for the country</font>

53
00:02:51,310 --> 00:02:57,610
and<font color="#E5E5E5"> you get back</font><font color="#CCCCCC"> top ten results let's</font>

54
00:02:54,579 --> 00:03:00,010
say and then we have the what<font color="#E5E5E5"> we call</font>

55
00:02:57,610 --> 00:03:03,400
alerting<font color="#E5E5E5"> that is more Twitter style</font>

56
00:03:00,010 --> 00:03:06,609
<font color="#E5E5E5">search where</font><font color="#CCCCCC"> you subscribe to a query</font>

57
00:03:03,400 --> 00:03:08,440
<font color="#E5E5E5">and any real-time</font><font color="#CCCCCC"> you get the news</font><font color="#E5E5E5"> as</font>

58
00:03:06,610 --> 00:03:10,180
soon<font color="#CCCCCC"> as they</font><font color="#E5E5E5"> happen</font><font color="#CCCCCC"> so like you</font><font color="#E5E5E5"> can</font>

59
00:03:08,440 --> 00:03:14,920
follow<font color="#E5E5E5"> a company and</font><font color="#CCCCCC"> seeing</font><font color="#E5E5E5"> real-time</font>

60
00:03:10,180 --> 00:03:17,799
news about I don't<font color="#CCCCCC"> know IBM</font><font color="#E5E5E5"> and for this</font>

61
00:03:14,920 --> 00:03:19,929
we<font color="#CCCCCC"> have like 1 million and</font><font color="#E5E5E5"> 500 thousand</font>

62
00:03:17,799 --> 00:03:23,650
subscriptions so<font color="#CCCCCC"> they</font><font color="#E5E5E5"> in every moment we</font>

63
00:03:19,930 --> 00:03:28,420
have to notify<font color="#E5E5E5"> more than 1 million</font><font color="#CCCCCC"> users</font>

64
00:03:23,650 --> 00:03:31,420
<font color="#E5E5E5">with news so that's all about new search</font>

65
00:03:28,420 --> 00:03:35,380
today we're going to talk about<font color="#E5E5E5"> learning</font>

66
00:03:31,420 --> 00:03:37,988
<font color="#CCCCCC">to rank and short</font><font color="#E5E5E5"> overview how many of</font>

67
00:03:35,380 --> 00:03:41,590
you use learning<font color="#CCCCCC"> to rank</font><font color="#E5E5E5"> for search here</font>

68
00:03:37,989 --> 00:03:44,889
can you raise your<font color="#E5E5E5"> hands one</font><font color="#CCCCCC"> two yeah</font>

69
00:03:41,590 --> 00:03:47,170
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so good so we're gonna talk about</font>

70
00:03:44,889 --> 00:03:49,090
<font color="#E5E5E5">how this technique called learning</font><font color="#CCCCCC"> to</font>

71
00:03:47,170 --> 00:03:51,190
rank works<font color="#E5E5E5"> from scratch you don't need</font>

72
00:03:49,090 --> 00:03:52,569
to know anything<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only thing that you</font>

73
00:03:51,190 --> 00:03:55,120
need<font color="#CCCCCC"> to know is that</font><font color="#E5E5E5"> when you do a</font>

74
00:03:52,569 --> 00:03:57,250
search on<font color="#E5E5E5"> a search engine you get a</font>

75
00:03:55,120 --> 00:03:58,959
ranked list of results<font color="#CCCCCC"> right when you</font>

76
00:03:57,250 --> 00:04:01,359
search on<font color="#CCCCCC"> Google you get</font><font color="#E5E5E5"> results one two</font>

77
00:03:58,959 --> 00:04:05,250
three four five and this<font color="#CCCCCC"> is achieved</font>

78
00:04:01,359 --> 00:04:09,519
<font color="#CCCCCC">because the engine gives a score to each</font>

79
00:04:05,250 --> 00:04:11,500
document that<font color="#E5E5E5"> is just a</font><font color="#CCCCCC"> number and then</font>

80
00:04:09,519 --> 00:04:14,319
so it gives a score and<font color="#E5E5E5"> then the</font>

81
00:04:11,500 --> 00:04:16,238
documents are sorted by the<font color="#CCCCCC"> chrétien</font>

82
00:04:14,319 --> 00:04:18,760
score<font color="#E5E5E5"> that's all the only</font><font color="#CCCCCC"> thing that you</font>

83
00:04:16,238 --> 00:04:20,620
need<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so and</font><font color="#E5E5E5"> we're going to</font>

84
00:04:18,760 --> 00:04:22,360
explain<font color="#CCCCCC"> them into ranking for steps</font><font color="#E5E5E5"> so</font>

85
00:04:20,620 --> 00:04:25,210
there<font color="#E5E5E5"> are four</font><font color="#CCCCCC"> steps that I'm going to</font>

86
00:04:22,360 --> 00:04:27,370
<font color="#E5E5E5">describe and then after somebody is</font>

87
00:04:25,210 --> 00:04:29,260
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to show you a demo that shows all</font>

88
00:04:27,370 --> 00:04:31,780
the<font color="#CCCCCC"> step so you'll see how</font>

89
00:04:29,260 --> 00:04:36,039
to build learning<font color="#E5E5E5"> relevance with</font>

90
00:04:31,780 --> 00:04:38,099
learning<font color="#E5E5E5"> to rank from the beginning so</font>

91
00:04:36,040 --> 00:04:40,450
what is Marshall what<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> learning Trek</font>

92
00:04:38,100 --> 00:04:44,640
<font color="#E5E5E5">learning to rank is basically using</font>

93
00:04:40,450 --> 00:04:47,890
mushrooming to improve the relevance of

94
00:04:44,640 --> 00:04:51,400
the results of a search engine

95
00:04:47,890 --> 00:04:54,070
<font color="#E5E5E5">okay and why we want</font><font color="#CCCCCC"> to do this I have a</font>

96
00:04:51,400 --> 00:04:56,799
nice example<font color="#CCCCCC"> so some time ago I was</font>

97
00:04:54,070 --> 00:05:00,400
<font color="#E5E5E5">writing his lies about learning to rank</font>

98
00:04:56,800 --> 00:05:04,270
and when<font color="#CCCCCC"> implementing to rank in Lucene</font>

99
00:05:00,400 --> 00:05:07,030
<font color="#E5E5E5">and solar or elasticsearch</font><font color="#CCCCCC"> one of the</font>

100
00:05:04,270 --> 00:05:09,430
core<font color="#E5E5E5"> point of the code is this object in</font>

101
00:05:07,030 --> 00:05:11,530
the scene that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> called query query dot</font>

102
00:05:09,430 --> 00:05:13,000
<font color="#CCCCCC">Java so I wanted to</font><font color="#E5E5E5"> check something in</font>

103
00:05:11,530 --> 00:05:15,460
the<font color="#CCCCCC"> implementation of the class</font><font color="#E5E5E5"> so I</font>

104
00:05:13,000 --> 00:05:17,470
went on this website<font color="#E5E5E5"> that is quite</font>

105
00:05:15,460 --> 00:05:19,690
famous<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> liked it</font><font color="#CCCCCC"> a lot we use it at</font>

106
00:05:17,470 --> 00:05:20,890
<font color="#CCCCCC">work as well and I</font><font color="#E5E5E5"> search for query</font>

107
00:05:19,690 --> 00:05:22,750
because<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> looking for that</font>

108
00:05:20,890 --> 00:05:25,570
<font color="#CCCCCC">particular class and I got these results</font>

109
00:05:22,750 --> 00:05:27,400
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that was not what I was looking</font><font color="#CCCCCC"> for</font>

110
00:05:25,570 --> 00:05:30,190
was looking for the class query the<font color="#E5E5E5"> Java</font>

111
00:05:27,400 --> 00:05:33,580
<font color="#E5E5E5">so I refined my query</font><font color="#CCCCCC"> I change</font><font color="#E5E5E5"> it a bit</font>

112
00:05:30,190 --> 00:05:37,210
<font color="#E5E5E5">to try to get the result I queried dot</font>

113
00:05:33,580 --> 00:05:39,909
Java<font color="#E5E5E5"> and I got this</font><font color="#CCCCCC"> okay again not what</font>

114
00:05:37,210 --> 00:05:42,159
I'm looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> so I try to do what I do</font>

115
00:05:39,910 --> 00:05:44,260
usually<font color="#CCCCCC"> in Google I put it in quotes so</font>

116
00:05:42,160 --> 00:05:47,350
that it means like I want<font color="#E5E5E5"> to magic</font>

117
00:05:44,260 --> 00:05:50,620
subtly<font color="#CCCCCC"> this string</font><font color="#E5E5E5"> and I got this</font><font color="#CCCCCC"> okay</font>

118
00:05:47,350 --> 00:05:53,050
and and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> like yeah I mean it's</font>

119
00:05:50,620 --> 00:05:55,630
it's funny but<font color="#CCCCCC"> like it happens to</font>

120
00:05:53,050 --> 00:05:57,580
everyone in search right when you put<font color="#E5E5E5"> on</font>

121
00:05:55,630 --> 00:06:00,280
a search engine<font color="#E5E5E5"> this will happen it</font>

122
00:05:57,580 --> 00:06:05,200
happened to us<font color="#E5E5E5"> it happens to that but</font>

123
00:06:00,280 --> 00:06:08,770
it's it's totally<font color="#CCCCCC"> natural and it's bad</font>

124
00:06:05,200 --> 00:06:10,180
but happens a lot and<font color="#E5E5E5"> that's why there</font>

125
00:06:08,770 --> 00:06:12,940
<font color="#E5E5E5">is learning</font><font color="#CCCCCC"> to rank and</font><font color="#E5E5E5"> that's what</font>

126
00:06:10,180 --> 00:06:16,630
learning<font color="#E5E5E5"> to rank is trying to solve</font><font color="#CCCCCC"> okay</font>

127
00:06:12,940 --> 00:06:20,469
so what is the point<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so I have a</font>

128
00:06:16,630 --> 00:06:22,510
search<font color="#CCCCCC"> engine ok and so what</font><font color="#E5E5E5"> happens is</font>

129
00:06:20,470 --> 00:06:24,580
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I had my query so this is the</font>

130
00:06:22,510 --> 00:06:26,920
<font color="#CCCCCC">normal flow I have a query a search for</font>

131
00:06:24,580 --> 00:06:29,050
something<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I decide that</font><font color="#E5E5E5"> some results</font>

132
00:06:26,920 --> 00:06:30,730
are<font color="#CCCCCC"> relevant and some results are not</font>

133
00:06:29,050 --> 00:06:33,520
relevant<font color="#E5E5E5"> so in this case we have in</font>

134
00:06:30,730 --> 00:06:35,950
green<font color="#E5E5E5"> the relevant results and in red</font>

135
00:06:33,520 --> 00:06:39,549
not relevant<font color="#CCCCCC"> results okay and in this</font>

136
00:06:35,950 --> 00:06:43,060
case how I sign the score to my

137
00:06:39,550 --> 00:06:45,250
documents I use this formula<font color="#CCCCCC"> here</font>

138
00:06:43,060 --> 00:06:48,700
that is called<font color="#CCCCCC"> tf-idf</font><font color="#E5E5E5"> and it's a</font>

139
00:06:45,250 --> 00:06:50,890
standard like the default way that

140
00:06:48,700 --> 00:06:53,500
<font color="#CCCCCC">leucine</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> solar</font><font color="#E5E5E5"> used to run to the</font>

141
00:06:50,890 --> 00:06:55,539
document and it's a very base<font color="#CCCCCC"> core that</font>

142
00:06:53,500 --> 00:06:57,100
<font color="#CCCCCC">is basically</font><font color="#E5E5E5"> looks at the frequency of</font>

143
00:06:55,540 --> 00:06:58,960
the term in<font color="#E5E5E5"> the document so</font><font color="#CCCCCC"> this term</font>

144
00:06:57,100 --> 00:07:02,440
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> contains 10 times the term</font>

145
00:06:58,960 --> 00:07:04,690
solar so it ranks higher now solar and

146
00:07:02,440 --> 00:07:06,340
<font color="#E5E5E5">the scene and solar don't use</font><font color="#CCCCCC"> ef ef</font><font color="#E5E5E5"> do</font>

147
00:07:04,690 --> 00:07:10,360
something similar<font color="#CCCCCC"> but it's the same</font>

148
00:07:06,340 --> 00:07:13,390
<font color="#E5E5E5">concept</font><font color="#CCCCCC"> so base core I got this result</font>

149
00:07:10,360 --> 00:07:15,520
<font color="#E5E5E5">and I decided</font><font color="#CCCCCC"> to tweak it</font><font color="#E5E5E5"> because I'm</font>

150
00:07:13,390 --> 00:07:19,080
<font color="#CCCCCC">not happy</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> these results at the end</font>

151
00:07:15,520 --> 00:07:21,520
<font color="#E5E5E5">of the list so I</font><font color="#CCCCCC"> multiply this core by</font>

152
00:07:19,080 --> 00:07:24,159
to the tree it<font color="#E5E5E5"> doesn't change anything</font>

153
00:07:21,520 --> 00:07:25,810
because<font color="#CCCCCC"> I'm just increasing</font><font color="#E5E5E5"> this course</font>

154
00:07:24,160 --> 00:07:27,280
all the documents will<font color="#E5E5E5"> fill up the same</font>

155
00:07:25,810 --> 00:07:32,490
score but I try<font color="#E5E5E5"> to do this it</font><font color="#CCCCCC"> doesn't</font>

156
00:07:27,280 --> 00:07:35,710
<font color="#E5E5E5">really work</font><font color="#CCCCCC"> so what I can do easily in</font>

157
00:07:32,490 --> 00:07:38,020
solar on elasticsearch is that I combine

158
00:07:35,710 --> 00:07:40,570
it<font color="#CCCCCC"> with other</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> can say I</font>

159
00:07:38,020 --> 00:07:43,930
compute the score of the query<font color="#E5E5E5"> on the</font>

160
00:07:40,570 --> 00:07:46,300
title<font color="#E5E5E5"> and the score of the query for</font>

161
00:07:43,930 --> 00:07:48,250
just the description<font color="#CCCCCC"> of the document and</font>

162
00:07:46,300 --> 00:07:50,830
I combine these three things together

163
00:07:48,250 --> 00:07:53,530
<font color="#E5E5E5">multiplying by different factors</font><font color="#CCCCCC"> there</font>

164
00:07:50,830 --> 00:07:55,870
<font color="#E5E5E5">this core and by combining these three</font>

165
00:07:53,530 --> 00:07:58,929
<font color="#CCCCCC">together I get a different</font><font color="#E5E5E5"> score for</font>

166
00:07:55,870 --> 00:08:00,729
each<font color="#E5E5E5"> document so that</font><font color="#CCCCCC"> effects my ranking</font>

167
00:07:58,930 --> 00:08:02,590
and now I get<font color="#E5E5E5"> the relevant result here</font>

168
00:08:00,729 --> 00:08:05,140
in the<font color="#CCCCCC"> relevant result here</font><font color="#E5E5E5"> and I can</font>

169
00:08:02,590 --> 00:08:06,640
keep doing<font color="#E5E5E5"> that I cannot like</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> let me</font>

170
00:08:05,140 --> 00:08:09,070
<font color="#CCCCCC">look at the previous</font><font color="#E5E5E5"> click that people</font>

171
00:08:06,640 --> 00:08:11,289
did<font color="#CCCCCC"> let</font><font color="#E5E5E5"> me look at the recency of the</font>

172
00:08:09,070 --> 00:08:13,450
document<font color="#E5E5E5"> and I can end up with</font><font color="#CCCCCC"> something</font>

173
00:08:11,290 --> 00:08:15,970
<font color="#CCCCCC">that looks</font><font color="#E5E5E5"> nice where I have the two</font>

174
00:08:13,450 --> 00:08:21,150
<font color="#E5E5E5">relevant result on the top and I</font><font color="#CCCCCC"> am at</font>

175
00:08:15,970 --> 00:08:23,740
with<font color="#CCCCCC"> that send my new ranking score in</font>

176
00:08:21,150 --> 00:08:25,810
production and release to<font color="#CCCCCC"> all the user</font>

177
00:08:23,740 --> 00:08:29,080
and then what is going<font color="#CCCCCC"> to happen</font><font color="#E5E5E5"> is this</font>

178
00:08:25,810 --> 00:08:32,589
that I<font color="#E5E5E5"> am for my query</font><font color="#CCCCCC"> solar I get the</font>

179
00:08:29,080 --> 00:08:34,000
top<font color="#E5E5E5"> two relevant result on the top but</font>

180
00:08:32,589 --> 00:08:36,570
then when I start to<font color="#E5E5E5"> look for other</font>

181
00:08:34,000 --> 00:08:39,250
queries<font color="#CCCCCC"> I get like for this</font><font color="#E5E5E5"> query</font>

182
00:08:36,570 --> 00:08:42,880
everything<font color="#E5E5E5"> red on</font><font color="#CCCCCC"> top and and so on</font>

183
00:08:39,250 --> 00:08:45,540
right<font color="#E5E5E5"> so and this happens a lot like</font>

184
00:08:42,880 --> 00:08:48,689
<font color="#CCCCCC">people try to tweak the ranking function</font>

185
00:08:45,540 --> 00:08:51,400
manually and they get these results<font color="#CCCCCC"> so</font>

186
00:08:48,690 --> 00:08:54,490
that's what learning<font color="#E5E5E5"> to rank is trying</font>

187
00:08:51,400 --> 00:08:56,800
to solve<font color="#E5E5E5"> it's a make this automatic</font><font color="#CCCCCC"> okay</font>

188
00:08:54,490 --> 00:08:58,930
<font color="#CCCCCC">because the problem with</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> there</font>

189
00:08:56,800 --> 00:09:00,609
you really need<font color="#CCCCCC"> to be an expert to</font><font color="#E5E5E5"> know</font>

190
00:08:58,930 --> 00:09:03,430
how to<font color="#E5E5E5"> tweak you really need to know</font>

191
00:09:00,610 --> 00:09:07,420
<font color="#CCCCCC">your domain like I work on financial</font>

192
00:09:03,430 --> 00:09:09,160
<font color="#E5E5E5">news and I didn't study finance so not I</font>

193
00:09:07,420 --> 00:09:12,520
can't really tweak the the ranking

194
00:09:09,160 --> 00:09:16,060
function money okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what are the</font>

195
00:09:12,520 --> 00:09:19,090
goals<font color="#E5E5E5"> of learning to bank</font><font color="#CCCCCC"> dawn tune</font>

196
00:09:16,060 --> 00:09:22,449
relevance<font color="#CCCCCC"> manually but just let</font><font color="#E5E5E5"> the</font>

197
00:09:19,090 --> 00:09:25,900
machine do everything<font color="#E5E5E5"> for you and and</font>

198
00:09:22,450 --> 00:09:29,680
<font color="#E5E5E5">also so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Bloomberg we decided to</font>

199
00:09:25,900 --> 00:09:32,020
implement<font color="#E5E5E5"> this for solar when I join a</font>

200
00:09:29,680 --> 00:09:34,630
company<font color="#E5E5E5"> and they took one of the target</font>

201
00:09:32,020 --> 00:09:36,310
when we wrote the this<font color="#CCCCCC"> plugin that</font>

202
00:09:34,630 --> 00:09:40,030
<font color="#CCCCCC">allows</font><font color="#E5E5E5"> to do learning today and course</font>

203
00:09:36,310 --> 00:09:42,160
to also make easy to experiment so have

204
00:09:40,030 --> 00:09:45,250
the possibility to plug different types

205
00:09:42,160 --> 00:09:49,870
of techniques<font color="#E5E5E5"> to do learning to rank and</font>

206
00:09:45,250 --> 00:09:51,910
make the thing easy<font color="#E5E5E5"> okay so we're going</font>

207
00:09:49,870 --> 00:09:54,760
to start<font color="#E5E5E5"> out with the four steps before</font>

208
00:09:51,910 --> 00:09:57,130
<font color="#CCCCCC">we</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> just an overview of</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> land</font>

209
00:09:54,760 --> 00:10:00,400
<font color="#E5E5E5">rank works so this is a</font><font color="#CCCCCC"> normal search</font>

210
00:09:57,130 --> 00:10:02,950
pipeline<font color="#E5E5E5"> we have a user waiting for</font>

211
00:10:00,400 --> 00:10:06,370
<font color="#CCCCCC">something the query goes to the index</font>

212
00:10:02,950 --> 00:10:09,190
the dissolution index and then<font color="#E5E5E5"> solar</font>

213
00:10:06,370 --> 00:10:12,520
applies this<font color="#E5E5E5"> machine solar machine</font>

214
00:10:09,190 --> 00:10:14,110
applies this<font color="#CCCCCC"> tf-idf</font><font color="#E5E5E5"> scoring that is the</font>

215
00:10:12,520 --> 00:10:17,079
score<font color="#E5E5E5"> that just looks at the frequency</font>

216
00:10:14,110 --> 00:10:19,510
<font color="#E5E5E5">of the terms and then it retrieves the</font>

217
00:10:17,080 --> 00:10:22,180
documents with the highest score<font color="#CCCCCC"> so in</font>

218
00:10:19,510 --> 00:10:25,689
general<font color="#CCCCCC"> I like Google use case</font><font color="#E5E5E5"> ten top</font>

219
00:10:22,180 --> 00:10:28,329
results and<font color="#E5E5E5"> in the it returns the</font>

220
00:10:25,690 --> 00:10:30,550
documents to<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> in learning</font>

221
00:10:28,330 --> 00:10:33,820
to rank these things it changed<font color="#CCCCCC"> so</font>

222
00:10:30,550 --> 00:10:37,329
instead of retrieving top ten<font color="#E5E5E5"> result we</font>

223
00:10:33,820 --> 00:10:41,980
retrieve let's say<font color="#E5E5E5"> 1000 results for the</font>

224
00:10:37,330 --> 00:10:45,310
query<font color="#E5E5E5"> and then this one</font><font color="#CCCCCC"> a 1000 results</font>

225
00:10:41,980 --> 00:10:48,670
<font color="#CCCCCC">they go</font><font color="#E5E5E5"> through this block that</font><font color="#CCCCCC"> is</font>

226
00:10:45,310 --> 00:10:50,650
called feature<font color="#CCCCCC"> structure</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font>

227
00:10:48,670 --> 00:10:52,689
<font color="#E5E5E5">describe what is it feature extraction</font>

228
00:10:50,650 --> 00:10:55,660
<font color="#CCCCCC">and then they go through a</font><font color="#E5E5E5"> learning to</font>

229
00:10:52,690 --> 00:10:59,260
<font color="#E5E5E5">rank model and</font><font color="#CCCCCC"> this learn each rank</font>

230
00:10:55,660 --> 00:11:02,530
model will look<font color="#CCCCCC"> at the documents</font><font color="#E5E5E5"> and</font>

231
00:10:59,260 --> 00:11:04,780
produce new scores and so we<font color="#CCCCCC"> reorder</font>

232
00:11:02,530 --> 00:11:07,420
<font color="#CCCCCC">this</font><font color="#E5E5E5"> 1000 document according to the new</font>

233
00:11:04,780 --> 00:11:09,339
scores<font color="#E5E5E5"> we select the top ten documents</font>

234
00:11:07,420 --> 00:11:10,770
in the new ranking<font color="#E5E5E5"> and this is their</font>

235
00:11:09,340 --> 00:11:13,210
results<font color="#E5E5E5"> okay</font>

236
00:11:10,770 --> 00:11:17,620
so I'm gonna go<font color="#E5E5E5"> through</font><font color="#CCCCCC"> all these</font><font color="#E5E5E5"> steps</font>

237
00:11:13,210 --> 00:11:20,950
now and so the first<font color="#E5E5E5"> one</font><font color="#CCCCCC"> is not feature</font>

238
00:11:17,620 --> 00:11:23,380
but is training data<font color="#E5E5E5"> because if you want</font>

239
00:11:20,950 --> 00:11:28,180
<font color="#E5E5E5">to train your model you need examples</font>

240
00:11:23,380 --> 00:11:30,580
<font color="#CCCCCC">and this is how you're gonna learn</font><font color="#E5E5E5"> how</font>

241
00:11:28,180 --> 00:11:31,180
to give better<font color="#CCCCCC"> results so how does it</font>

242
00:11:30,580 --> 00:11:35,020
<font color="#CCCCCC">work</font>

243
00:11:31,180 --> 00:11:38,439
what is a<font color="#E5E5E5"> training data</font><font color="#CCCCCC"> training data is</font>

244
00:11:35,020 --> 00:11:40,930
<font color="#E5E5E5">just a set of queries and for each query</font>

245
00:11:38,440 --> 00:11:42,640
you need to know which documents<font color="#CCCCCC"> were</font>

246
00:11:40,930 --> 00:11:44,680
relevant<font color="#E5E5E5"> and which documents were</font><font color="#CCCCCC"> not</font>

247
00:11:42,640 --> 00:11:47,680
relevant<font color="#CCCCCC"> okay so it's just this you have</font>

248
00:11:44,680 --> 00:11:49,449
a set of<font color="#CCCCCC"> queries</font><font color="#E5E5E5"> for each query</font><font color="#CCCCCC"> a bunch</font>

249
00:11:47,680 --> 00:11:51,310
of<font color="#E5E5E5"> documents that were important and</font>

250
00:11:49,450 --> 00:11:54,190
documents<font color="#CCCCCC"> that were not important</font><font color="#E5E5E5"> okay</font>

251
00:11:51,310 --> 00:11:57,939
<font color="#E5E5E5">how do you produce this data there are</font>

252
00:11:54,190 --> 00:12:01,240
two major ways<font color="#CCCCCC"> to do that one way is</font>

253
00:11:57,940 --> 00:12:04,540
using explicit<font color="#E5E5E5"> data so you create an</font>

254
00:12:01,240 --> 00:12:07,120
interface you ask some annotators to

255
00:12:04,540 --> 00:12:08,829
type some queries and to tell you<font color="#CCCCCC"> which</font>

256
00:12:07,120 --> 00:12:12,580
documents are relevant<font color="#E5E5E5"> or not relevant</font>

257
00:12:08,830 --> 00:12:15,340
<font color="#E5E5E5">for each query you can use like you can</font>

258
00:12:12,580 --> 00:12:18,970
pay<font color="#E5E5E5"> people</font><font color="#CCCCCC"> you can pay X</font><font color="#E5E5E5"> pair to do that</font>

259
00:12:15,340 --> 00:12:21,280
<font color="#E5E5E5">in the domain there are websites like on</font>

260
00:12:18,970 --> 00:12:26,530
<font color="#E5E5E5">Amazon is possible to spin jobs where</font>

261
00:12:21,280 --> 00:12:28,770
you<font color="#E5E5E5"> ask</font><font color="#CCCCCC"> users to</font><font color="#E5E5E5"> annotate it is in</font>

262
00:12:26,530 --> 00:12:32,500
general<font color="#CCCCCC"> very expensive to do that and</font>

263
00:12:28,770 --> 00:12:34,540
the other<font color="#E5E5E5"> way is using implicit data so</font>

264
00:12:32,500 --> 00:12:36,430
if you have users in your search<font color="#CCCCCC"> engine</font>

265
00:12:34,540 --> 00:12:38,530
<font color="#E5E5E5">you can look at the interaction right if</font>

266
00:12:36,430 --> 00:12:40,420
I search for<font color="#E5E5E5"> something</font><font color="#CCCCCC"> and then I keep</font>

267
00:12:38,530 --> 00:12:42,790
refining my query<font color="#E5E5E5"> that's not a good sign</font>

268
00:12:40,420 --> 00:12:45,550
<font color="#E5E5E5">it means that all the documents</font><font color="#CCCCCC"> that I</font>

269
00:12:42,790 --> 00:12:48,219
<font color="#CCCCCC">skipped by refining the query were not</font>

270
00:12:45,550 --> 00:12:50,560
<font color="#E5E5E5">relevant</font><font color="#CCCCCC"> and was not looking for that if</font>

271
00:12:48,220 --> 00:12:53,320
a user click on<font color="#E5E5E5"> a document</font><font color="#CCCCCC"> and spend</font>

272
00:12:50,560 --> 00:12:55,270
some<font color="#E5E5E5"> time</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that it's in</font>

273
00:12:53,320 --> 00:12:57,100
<font color="#E5E5E5">its interested in the results so that</font>

274
00:12:55,270 --> 00:12:59,800
might<font color="#E5E5E5"> be considered</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> relevant results</font>

275
00:12:57,100 --> 00:13:02,470
so there<font color="#E5E5E5"> are these</font><font color="#CCCCCC"> two approaches</font><font color="#E5E5E5"> they</font>

276
00:12:59,800 --> 00:13:05,290
all have pros<font color="#CCCCCC"> and cons as I said</font>

277
00:13:02,470 --> 00:13:07,000
explicit data is very clean because the

278
00:13:05,290 --> 00:13:10,900
annotators will tell you exactly<font color="#CCCCCC"> what is</font>

279
00:13:07,000 --> 00:13:14,110
<font color="#CCCCCC">relevant or</font><font color="#E5E5E5"> not but it's quite expensive</font>

280
00:13:10,900 --> 00:13:16,180
while implicit data is easy to produce

281
00:13:14,110 --> 00:13:18,400
if you have users but it's<font color="#E5E5E5"> very noisy</font>

282
00:13:16,180 --> 00:13:19,780
<font color="#CCCCCC">and sometimes it's so noisy</font><font color="#E5E5E5"> that you</font>

283
00:13:18,400 --> 00:13:23,740
can't<font color="#E5E5E5"> really learn anything from that</font>

284
00:13:19,780 --> 00:13:25,030
<font color="#E5E5E5">okay so moving forward</font>

285
00:13:23,740 --> 00:13:27,460
<font color="#E5E5E5">search</font><font color="#CCCCCC"> pipeline we have</font><font color="#E5E5E5"> feature</font>

286
00:13:25,030 --> 00:13:28,959
<font color="#E5E5E5">destruction so this is the first thing</font>

287
00:13:27,460 --> 00:13:32,950
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you do after that</font><font color="#E5E5E5"> you retrieve</font>

288
00:13:28,960 --> 00:13:35,110
<font color="#CCCCCC">1,000 documents and you need to extract</font>

289
00:13:32,950 --> 00:13:37,650
<font color="#E5E5E5">these features now what is a feature a</font>

290
00:13:35,110 --> 00:13:40,870
feature is just<font color="#CCCCCC"> a number that describe</font>

291
00:13:37,650 --> 00:13:42,939
something in your document<font color="#E5E5E5"> okay so it</font>

292
00:13:40,870 --> 00:13:46,390
can be<font color="#E5E5E5"> like if the query matches the</font>

293
00:13:42,940 --> 00:13:49,750
title<font color="#CCCCCC"> so just a boolean it can be the</font>

294
00:13:46,390 --> 00:13:52,840
length of the document<font color="#E5E5E5"> in terms or a</font>

295
00:13:49,750 --> 00:13:55,060
<font color="#E5E5E5">popularity score okay so how</font><font color="#CCCCCC"> many views</font>

296
00:13:52,840 --> 00:13:58,350
these documents got in the past for

297
00:13:55,060 --> 00:14:02,680
example<font color="#CCCCCC"> okay so just</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> give an example</font>

298
00:13:58,350 --> 00:14:05,170
<font color="#E5E5E5">here I have a query the ticker of Apple</font>

299
00:14:02,680 --> 00:14:07,449
and I got two<font color="#E5E5E5"> documents for my query and</font>

300
00:14:05,170 --> 00:14:10,510
I<font color="#E5E5E5"> asked</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> I produced a feature for</font>

301
00:14:07,450 --> 00:14:13,060
these two<font color="#E5E5E5"> documents okay so we have the</font>

302
00:14:10,510 --> 00:14:15,370
feature<font color="#CCCCCC"> query matches the title</font><font color="#E5E5E5"> here is</font>

303
00:14:13,060 --> 00:14:16,959
zero because<font color="#E5E5E5"> it's false here is one</font>

304
00:14:15,370 --> 00:14:20,530
because it's true at policing<font color="#E5E5E5"> in the</font>

305
00:14:16,960 --> 00:14:23,260
title we have<font color="#CCCCCC"> a feature like it's the</font>

306
00:14:20,530 --> 00:14:25,630
document from<font color="#E5E5E5"> Bloomberg calm and here is</font>

307
00:14:23,260 --> 00:14:28,450
<font color="#CCCCCC">zero and</font><font color="#E5E5E5"> here is one we</font><font color="#CCCCCC"> have this</font>

308
00:14:25,630 --> 00:14:31,650
<font color="#E5E5E5">feature with the popularity score</font><font color="#CCCCCC"> we can</font>

309
00:14:28,450 --> 00:14:34,810
see this is more popular<font color="#E5E5E5"> we go 3,000</font>

310
00:14:31,650 --> 00:14:37,510
views<font color="#E5E5E5"> and so on so it's just like coming</font>

311
00:14:34,810 --> 00:14:40,119
out with features that<font color="#CCCCCC"> you think</font><font color="#E5E5E5"> micro</font>

312
00:14:37,510 --> 00:14:42,370
relate with the fact that the document

313
00:14:40,120 --> 00:14:46,030
<font color="#E5E5E5">is relevant</font><font color="#CCCCCC"> so for example in the</font>

314
00:14:42,370 --> 00:14:48,130
example with github<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can have that's</font>

315
00:14:46,030 --> 00:14:52,300
<font color="#E5E5E5">the query match the name of the class as</font>

316
00:14:48,130 --> 00:14:55,150
a feature<font color="#E5E5E5"> okay so these are</font><font color="#CCCCCC"> features</font><font color="#E5E5E5"> and</font>

317
00:14:52,300 --> 00:14:56,770
then the next<font color="#E5E5E5"> step once that you extract</font>

318
00:14:55,150 --> 00:15:00,790
all your feature vectors for<font color="#CCCCCC"> the</font>

319
00:14:56,770 --> 00:15:03,370
<font color="#CCCCCC">documents is to train a model</font><font color="#E5E5E5"> now what</font>

320
00:15:00,790 --> 00:15:06,550
is<font color="#E5E5E5"> a learning to rank model it's just</font><font color="#CCCCCC"> a</font>

321
00:15:03,370 --> 00:15:09,310
way<font color="#E5E5E5"> to combine together the values</font><font color="#CCCCCC"> of</font>

322
00:15:06,550 --> 00:15:10,959
your<font color="#E5E5E5"> feature to get</font><font color="#CCCCCC"> the score so it's</font>

323
00:15:09,310 --> 00:15:14,290
similar to<font color="#E5E5E5"> what it did at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> by</font>

324
00:15:10,960 --> 00:15:17,320
tweaking the ranking function but it's

325
00:15:14,290 --> 00:15:19,300
done automatically so<font color="#CCCCCC"> you a model for</font>

326
00:15:17,320 --> 00:15:23,530
example<font color="#CCCCCC"> might be the one in</font><font color="#E5E5E5"> the first</font>

327
00:15:19,300 --> 00:15:25,560
slide<font color="#CCCCCC"> okay I'm just getting multiplied</font>

328
00:15:23,530 --> 00:15:29,439
<font color="#CCCCCC">by seven if the query matches the title</font>

329
00:15:25,560 --> 00:15:31,540
<font color="#E5E5E5">summing 42 plus is exact is and then</font>

330
00:15:29,440 --> 00:15:34,150
another<font color="#CCCCCC"> number for</font><font color="#E5E5E5"> her</font><font color="#CCCCCC"> multiplied by</font>

331
00:15:31,540 --> 00:15:36,130
popularity<font color="#E5E5E5"> okay this is a very simple</font>

332
00:15:34,150 --> 00:15:37,119
example<font color="#CCCCCC"> it's called a linear</font><font color="#E5E5E5"> a linear</font>

333
00:15:36,130 --> 00:15:39,339
model

334
00:15:37,119 --> 00:15:42,939
<font color="#E5E5E5">there there are much</font><font color="#CCCCCC"> more complicated</font>

335
00:15:39,339 --> 00:15:44,889
way<font color="#CCCCCC"> to train a model</font><font color="#E5E5E5"> and the way it rain</font>

336
00:15:42,939 --> 00:15:47,289
is that you get<font color="#E5E5E5"> your training set</font><font color="#CCCCCC"> and</font>

337
00:15:44,889 --> 00:15:50,589
for your training<font color="#E5E5E5"> set you try to predict</font>

338
00:15:47,289 --> 00:15:53,229
<font color="#E5E5E5">the label according</font><font color="#CCCCCC"> to the by combining</font>

339
00:15:50,589 --> 00:15:55,239
together<font color="#E5E5E5"> the features</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so you have</font>

340
00:15:53,229 --> 00:15:58,749
labels that might go from<font color="#CCCCCC"> zero to four</font>

341
00:15:55,239 --> 00:16:00,609
<font color="#CCCCCC">and then you try to find the best way to</font>

342
00:15:58,749 --> 00:16:02,619
fit the feature together over the

343
00:16:00,609 --> 00:16:04,959
training<font color="#E5E5E5"> set and predict the school</font>

344
00:16:02,619 --> 00:16:07,199
there<font color="#E5E5E5"> are multiple ways to</font><font color="#CCCCCC"> train as I</font>

345
00:16:04,959 --> 00:16:10,089
said and there are three big families

346
00:16:07,199 --> 00:16:11,889
<font color="#E5E5E5">there's a family called point wise that</font>

347
00:16:10,089 --> 00:16:15,939
was the first approach proposed for

348
00:16:11,889 --> 00:16:17,769
learning to<font color="#CCCCCC"> rank in the 90s and point</font>

349
00:16:15,939 --> 00:16:22,629
wise is basically this you try to

350
00:16:17,769 --> 00:16:24,369
predict<font color="#E5E5E5"> the score</font><font color="#CCCCCC"> by looking one</font>

351
00:16:22,629 --> 00:16:26,919
document at a time so<font color="#CCCCCC"> you just look at a</font>

352
00:16:24,369 --> 00:16:28,689
document<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you try to predict the</font>

353
00:16:26,919 --> 00:16:31,419
label<font color="#CCCCCC"> it's like if it was relevant</font><font color="#E5E5E5"> or</font>

354
00:16:28,689 --> 00:16:33,218
not<font color="#CCCCCC"> then there</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> another big family</font>

355
00:16:31,419 --> 00:16:38,019
that came<font color="#E5E5E5"> and it was much more better</font>

356
00:16:33,219 --> 00:16:41,079
<font color="#E5E5E5">that it's called point wise sorry pair</font>

357
00:16:38,019 --> 00:16:43,569
wise method<font color="#E5E5E5"> so here in pair wise methods</font>

358
00:16:41,079 --> 00:16:45,728
you don't look at the<font color="#CCCCCC"> score but you look</font>

359
00:16:43,569 --> 00:16:48,549
at two documents<font color="#CCCCCC"> and you want to predict</font>

360
00:16:45,729 --> 00:16:50,529
which one is coming before<font color="#E5E5E5"> so you're</font>

361
00:16:48,549 --> 00:16:52,779
trying<font color="#E5E5E5"> to predict the father if I give</font>

362
00:16:50,529 --> 00:16:54,399
two<font color="#E5E5E5"> documents for a query which one is</font>

363
00:16:52,779 --> 00:16:56,559
the best one<font color="#CCCCCC"> and</font><font color="#E5E5E5"> once</font><font color="#CCCCCC"> that you have the</font>

364
00:16:54,399 --> 00:16:57,939
<font color="#CCCCCC">comparison function</font><font color="#E5E5E5"> you can rank the</font>

365
00:16:56,559 --> 00:17:00,129
document<font color="#E5E5E5"> because you have a function</font>

366
00:16:57,939 --> 00:17:02,799
that predicts<font color="#E5E5E5"> who comes first</font><font color="#CCCCCC"> okay and</font>

367
00:17:00,129 --> 00:17:04,539
<font color="#E5E5E5">then there is the</font><font color="#CCCCCC"> final method I mean</font>

368
00:17:02,799 --> 00:17:07,029
the<font color="#E5E5E5"> final family that is the one used</font>

369
00:17:04,539 --> 00:17:10,480
now<font color="#CCCCCC"> by search engine like Google or</font>

370
00:17:07,029 --> 00:17:12,429
being that they are<font color="#CCCCCC"> leastwise</font><font color="#E5E5E5"> method and</font>

371
00:17:10,480 --> 00:17:14,949
they just look at<font color="#E5E5E5"> their own list and</font>

372
00:17:12,429 --> 00:17:17,100
they try to optimize<font color="#CCCCCC"> the global ranking</font>

373
00:17:14,949 --> 00:17:19,689
<font color="#E5E5E5">okay</font>

374
00:17:17,099 --> 00:17:21,128
so as I<font color="#E5E5E5"> said like this method</font><font color="#CCCCCC"> that are</font>

375
00:17:19,689 --> 00:17:23,110
<font color="#E5E5E5">least wise we're going to show you</font><font color="#CCCCCC"> a</font>

376
00:17:21,128 --> 00:17:26,019
<font color="#CCCCCC">list</font><font color="#E5E5E5"> wise method and they're usually</font>

377
00:17:23,109 --> 00:17:29,799
based based on families of trees<font color="#E5E5E5"> so you</font>

378
00:17:26,019 --> 00:17:32,230
have many<font color="#E5E5E5"> trees and each tree say</font>

379
00:17:29,799 --> 00:17:34,090
something<font color="#E5E5E5"> that is simple</font><font color="#CCCCCC"> like if the</font>

380
00:17:32,230 --> 00:17:37,119
query matches<font color="#E5E5E5"> the title is greater than</font>

381
00:17:34,090 --> 00:17:40,029
<font color="#E5E5E5">one and the popularity is greater than</font>

382
00:17:37,119 --> 00:17:41,740
<font color="#CCCCCC">thirty</font><font color="#E5E5E5"> one assigned a score so they are</font>

383
00:17:40,029 --> 00:17:45,369
like they<font color="#CCCCCC"> combine together multiple</font>

384
00:17:41,740 --> 00:17:46,840
feature and they work together to

385
00:17:45,369 --> 00:17:48,639
produce a final scores they have much

386
00:17:46,840 --> 00:17:52,360
<font color="#E5E5E5">more expressive</font><font color="#CCCCCC"> 'ti than</font>

387
00:17:48,640 --> 00:17:55,060
<font color="#CCCCCC">your mode</font><font color="#E5E5E5"> and finally the last step</font><font color="#CCCCCC"> is</font>

388
00:17:52,360 --> 00:17:57,100
the<font color="#E5E5E5"> evaluation</font><font color="#CCCCCC"> so you want to say if</font>

389
00:17:55,060 --> 00:18:00,070
your model is good or<font color="#CCCCCC"> not and there are</font>

390
00:17:57,100 --> 00:18:02,590
<font color="#E5E5E5">multiple metrics that tells you if your</font>

391
00:18:00,070 --> 00:18:04,689
search<font color="#CCCCCC"> it's good or not you still need a</font>

392
00:18:02,590 --> 00:18:06,909
notation<font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> so you need to know</font>

393
00:18:04,690 --> 00:18:08,740
for some queries which documents are

394
00:18:06,910 --> 00:18:10,950
relevant<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> and here there are the</font>

395
00:18:08,740 --> 00:18:13,960
main<font color="#CCCCCC"> matrix that</font><font color="#E5E5E5"> people use to evaluate</font>

396
00:18:10,950 --> 00:18:16,180
learning to read<font color="#E5E5E5"> there is precision that</font>

397
00:18:13,960 --> 00:18:19,630
<font color="#E5E5E5">basically says how many relevant</font>

398
00:18:16,180 --> 00:18:21,040
<font color="#E5E5E5">document I retrieved for my query with</font>

399
00:18:19,630 --> 00:18:23,650
<font color="#E5E5E5">respect of all the</font><font color="#CCCCCC"> documents that I</font>

400
00:18:21,040 --> 00:18:25,930
retrieve so if I retrieve my<font color="#CCCCCC"> 10</font>

401
00:18:23,650 --> 00:18:27,940
documents for the query<font color="#E5E5E5"> and only</font><font color="#CCCCCC"> five</font>

402
00:18:25,930 --> 00:18:31,750
<font color="#E5E5E5">are relevant in the query my precision</font>

403
00:18:27,940 --> 00:18:34,180
<font color="#E5E5E5">is 0.5 then there is recall that is how</font>

404
00:18:31,750 --> 00:18:36,580
much<font color="#E5E5E5"> you are covering of the relevant</font>

405
00:18:34,180 --> 00:18:39,130
<font color="#CCCCCC">documents in</font><font color="#E5E5E5"> your query so before your</font>

406
00:18:36,580 --> 00:18:42,639
query in all the collection that<font color="#CCCCCC"> you</font>

407
00:18:39,130 --> 00:18:44,890
have in the index you<font color="#CCCCCC"> have 100 documents</font>

408
00:18:42,640 --> 00:18:47,350
that are relevant<font color="#E5E5E5"> and with your query</font>

409
00:18:44,890 --> 00:18:51,310
<font color="#E5E5E5">you retrieve ten relevant document your</font>

410
00:18:47,350 --> 00:18:53,679
recall is 0.1<font color="#CCCCCC"> you're returning</font><font color="#E5E5E5"> only 10%</font>

411
00:18:51,310 --> 00:18:56,860
of the relevant document in the

412
00:18:53,680 --> 00:19:00,280
collection and and usually it's

413
00:18:56,860 --> 00:19:01,870
important to<font color="#E5E5E5"> have this</font><font color="#CCCCCC"> tomb matrix good</font>

414
00:19:00,280 --> 00:19:03,160
so precision I recall are the main

415
00:19:01,870 --> 00:19:05,530
things that you<font color="#E5E5E5"> want in a search engine</font>

416
00:19:03,160 --> 00:19:09,130
<font color="#E5E5E5">so before when I was looking for the</font>

417
00:19:05,530 --> 00:19:11,050
query class that's a problem of the<font color="#CCCCCC"> coal</font>

418
00:19:09,130 --> 00:19:12,700
in that case there<font color="#E5E5E5"> is only one document</font>

419
00:19:11,050 --> 00:19:14,850
irrelevant in the collection<font color="#E5E5E5"> because I'm</font>

420
00:19:12,700 --> 00:19:17,650
looking exactly<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that document and</font>

421
00:19:14,850 --> 00:19:20,080
and I'm trying<font color="#E5E5E5"> to retrieve it and I</font>

422
00:19:17,650 --> 00:19:22,090
can't so it's a<font color="#CCCCCC"> problem of record</font><font color="#E5E5E5"> so you</font>

423
00:19:20,080 --> 00:19:24,100
<font color="#CCCCCC">won't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> this tool so basically when</font>

424
00:19:22,090 --> 00:19:26,620
you want<font color="#CCCCCC"> to measure</font><font color="#E5E5E5"> the overall quality</font>

425
00:19:24,100 --> 00:19:28,360
of your<font color="#E5E5E5"> search system you use app score</font>

426
00:19:26,620 --> 00:19:30,370
that is just the harmonic mean of

427
00:19:28,360 --> 00:19:34,689
precision recall so you want to have

428
00:19:30,370 --> 00:19:36,729
both them<font color="#E5E5E5"> good and finally we</font><font color="#CCCCCC"> have NDC G</font>

429
00:19:34,690 --> 00:19:39,580
<font color="#E5E5E5">that is another metric that look at the</font>

430
00:19:36,730 --> 00:19:41,890
whole result list for a query and it

431
00:19:39,580 --> 00:19:44,169
returns<font color="#CCCCCC"> score</font><font color="#E5E5E5"> that tells you how much</font>

432
00:19:41,890 --> 00:19:46,090
<font color="#E5E5E5">the ranking is good so the more you push</font>

433
00:19:44,170 --> 00:19:53,530
relevant document on the top of the list

434
00:19:46,090 --> 00:19:56,199
<font color="#E5E5E5">the</font><font color="#CCCCCC"> I a dis</font><font color="#E5E5E5"> and ECG</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> okay so we</font>

435
00:19:53,530 --> 00:19:59,170
decided some years ago to<font color="#E5E5E5"> implement all</font>

436
00:19:56,200 --> 00:20:01,960
this logic<font color="#E5E5E5"> inside solar and the reason</font>

437
00:19:59,170 --> 00:20:02,320
why we did that<font color="#E5E5E5"> was that we were kind of</font>

438
00:20:01,960 --> 00:20:05,799
<font color="#E5E5E5">doing</font>

439
00:20:02,320 --> 00:20:08,470
outside from solar but it was heavy from

440
00:20:05,799 --> 00:20:10,418
the performance<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also from the</font><font color="#E5E5E5"> point</font>

441
00:20:08,470 --> 00:20:12,880
of view<font color="#CCCCCC"> of developing so we decided</font><font color="#E5E5E5"> to</font>

442
00:20:10,419 --> 00:20:15,340
<font color="#E5E5E5">put it inside to make it faster and to</font>

443
00:20:12,880 --> 00:20:17,139
make<font color="#CCCCCC"> it easy to work with that</font><font color="#E5E5E5"> so before</font>

444
00:20:15,340 --> 00:20:19,649
this used to<font color="#E5E5E5"> be a feature</font><font color="#CCCCCC"> it was a</font>

445
00:20:17,139 --> 00:20:22,539
Python function computing a value and

446
00:20:19,649 --> 00:20:24,489
storing it somewhere<font color="#CCCCCC"> this is now a</font>

447
00:20:22,539 --> 00:20:27,158
feature in solar<font color="#E5E5E5"> so a feature is just</font>

448
00:20:24,490 --> 00:20:29,769
<font color="#CCCCCC">adjacent</font><font color="#E5E5E5"> snippet where you have the name</font>

449
00:20:27,159 --> 00:20:31,720
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the feature type that is a Java class</font>

450
00:20:29,769 --> 00:20:35,590
that<font color="#CCCCCC"> implemented particular feature and</font>

451
00:20:31,720 --> 00:20:38,639
then some free parameters<font color="#E5E5E5"> and in this</font>

452
00:20:35,590 --> 00:20:42,879
case<font color="#CCCCCC"> we're using solar feature that</font>

453
00:20:38,639 --> 00:20:45,610
allows us to<font color="#CCCCCC"> reuse the solar Lucie</font><font color="#E5E5E5"> in</font>

454
00:20:42,879 --> 00:20:47,350
query syntax<font color="#CCCCCC"> to specify the value of</font>

455
00:20:45,610 --> 00:20:50,979
that<font color="#E5E5E5"> we want for that feature</font><font color="#CCCCCC"> so in this</font>

456
00:20:47,350 --> 00:20:53,139
case<font color="#E5E5E5"> checking if the person they could</font>

457
00:20:50,980 --> 00:20:56,470
document contain an executive person<font color="#CCCCCC"> is</font>

458
00:20:53,139 --> 00:20:58,990
<font color="#E5E5E5">just checking if the query person</font>

459
00:20:56,470 --> 00:21:01,659
<font color="#CCCCCC">matched</font><font color="#E5E5E5"> in to fill the category and if</font>

460
00:20:58,990 --> 00:21:05,200
they feel the<font color="#E5E5E5"> primary position contains</font>

461
00:21:01,659 --> 00:21:08,559
one<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> turns</font><font color="#E5E5E5"> and that's all so</font>

462
00:21:05,200 --> 00:21:11,950
<font color="#E5E5E5">they the engine will compute the</font><font color="#CCCCCC"> score</font>

463
00:21:08,559 --> 00:21:15,428
of the query<font color="#E5E5E5"> for the document and</font><font color="#CCCCCC"> that</font>

464
00:21:11,950 --> 00:21:17,440
<font color="#CCCCCC">would be the</font><font color="#E5E5E5"> value of the feature this</font>

465
00:21:15,429 --> 00:21:19,120
<font color="#E5E5E5">is how you plug the new</font><font color="#CCCCCC"> Trank inside</font>

466
00:21:17,440 --> 00:21:22,480
solar at the moment so it's<font color="#E5E5E5"> just adding</font>

467
00:21:19,120 --> 00:21:25,899
<font color="#E5E5E5">these two fields inside the</font><font color="#CCCCCC"> sort</font>

468
00:21:22,480 --> 00:21:28,409
configuration and this<font color="#E5E5E5"> is an example of</font>

469
00:21:25,899 --> 00:21:31,840
<font color="#E5E5E5">a model so this is a linear model</font><font color="#CCCCCC"> and</font>

470
00:21:28,409 --> 00:21:34,870
again it's just a JSON snippet<font color="#E5E5E5"> that</font><font color="#CCCCCC"> as a</font>

471
00:21:31,840 --> 00:21:38,980
<font color="#E5E5E5">Java class that</font><font color="#CCCCCC"> describe how to</font><font color="#E5E5E5"> compute</font>

472
00:21:34,870 --> 00:21:41,258
the model and<font color="#E5E5E5"> the feature that</font><font color="#CCCCCC"> the model</font>

473
00:21:38,980 --> 00:21:44,169
<font color="#E5E5E5">is using and then how to combine them</font>

474
00:21:41,259 --> 00:21:47,250
together<font color="#E5E5E5"> so in this case we just have</font>

475
00:21:44,169 --> 00:21:50,679
the weights for for our feature

476
00:21:47,250 --> 00:21:52,570
<font color="#CCCCCC">so benefits of food a learning</font><font color="#E5E5E5"> tool and</font>

477
00:21:50,679 --> 00:21:56,259
<font color="#CCCCCC">plugin</font><font color="#E5E5E5"> as I said simple feature</font>

478
00:21:52,570 --> 00:21:58,600
engineering<font color="#E5E5E5"> will use the solar search</font>

479
00:21:56,259 --> 00:22:00,429
functionality so like the syntax<font color="#E5E5E5"> can</font>

480
00:21:58,600 --> 00:22:03,519
reuse all the feature<font color="#E5E5E5"> that</font><font color="#CCCCCC"> solar already</font>

481
00:22:00,429 --> 00:22:09,669
has and it makes easy to model feature

482
00:22:03,519 --> 00:22:12,460
by doing that<font color="#E5E5E5"> we add some improvement</font><font color="#CCCCCC"> by</font>

483
00:22:09,669 --> 00:22:13,990
<font color="#E5E5E5">doing that in we wanted improvement in</font>

484
00:22:12,460 --> 00:22:16,059
the search<font color="#CCCCCC"> quality and we wanted</font><font color="#E5E5E5"> to do</font>

485
00:22:13,990 --> 00:22:19,779
relevance to me so we didn't<font color="#E5E5E5"> want to</font>

486
00:22:16,059 --> 00:22:21,759
tune the<font color="#E5E5E5"> relevance by hand anymore</font>

487
00:22:19,779 --> 00:22:25,809
so now<font color="#CCCCCC"> our son</font><font color="#E5E5E5"> Bob is going to show you</font>

488
00:22:21,759 --> 00:22:29,710
a quick<font color="#E5E5E5"> demo on learning</font><font color="#CCCCCC"> to rank for the</font>

489
00:22:25,809 --> 00:22:32,440
demo<font color="#E5E5E5"> we use simple Wikipedia JSON dump</font>

490
00:22:29,710 --> 00:22:34,960
<font color="#CCCCCC">so you know that is</font><font color="#E5E5E5"> this simple</font><font color="#CCCCCC"> dump</font><font color="#E5E5E5"> it</font>

491
00:22:32,440 --> 00:22:37,749
just<font color="#CCCCCC"> contains</font><font color="#E5E5E5"> the most important</font>

492
00:22:34,960 --> 00:22:40,029
Wikipedia article<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> 150,000</font>

493
00:22:37,749 --> 00:22:43,389
<font color="#E5E5E5">documents</font><font color="#CCCCCC"> so we are going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> index in</font>

494
00:22:40,029 --> 00:22:45,820
<font color="#E5E5E5">into solar and then we're gonna set up</font>

495
00:22:43,389 --> 00:23:06,849
some<font color="#E5E5E5"> stuff that</font><font color="#CCCCCC"> somebody's going to</font><font color="#E5E5E5"> show</font>

496
00:22:45,820 --> 00:23:08,889
you<font color="#CCCCCC"> Thanks hey so so first of</font><font color="#E5E5E5"> all you</font>

497
00:23:06,849 --> 00:23:19,928
can<font color="#E5E5E5"> find all the code related</font><font color="#CCCCCC"> to this</font>

498
00:23:08,889 --> 00:23:22,330
demo at this repository so the entire

499
00:23:19,929 --> 00:23:24,759
repository<font color="#E5E5E5"> is doc arised we wanted to</font>

500
00:23:22,330 --> 00:23:27,580
make the demo reproducible so that it's

501
00:23:24,759 --> 00:23:30,519
easy<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> take a look</font><font color="#CCCCCC"> at how we</font>

502
00:23:27,580 --> 00:23:33,218
did this and it's very<font color="#E5E5E5"> simple code</font><font color="#CCCCCC"> we</font>

503
00:23:30,519 --> 00:23:35,440
have<font color="#CCCCCC"> outlined</font><font color="#E5E5E5"> all the steps and I'm</font>

504
00:23:33,219 --> 00:23:36,700
<font color="#CCCCCC">going to follow them exactly</font><font color="#E5E5E5"> so you can</font>

505
00:23:35,440 --> 00:23:43,629
just when you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to go back and</font>

506
00:23:36,700 --> 00:23:46,269
reproduce<font color="#E5E5E5"> this demo you can okay so</font>

507
00:23:43,629 --> 00:23:48,309
first<font color="#E5E5E5"> of</font><font color="#CCCCCC"> all what we want</font><font color="#E5E5E5"> to do is we</font>

508
00:23:46,269 --> 00:23:51,839
want to<font color="#E5E5E5"> bring up a solar instance which</font>

509
00:23:48,309 --> 00:24:03,070
has the learning to rank<font color="#E5E5E5"> plug-in enabled</font>

510
00:23:51,839 --> 00:24:05,200
<font color="#CCCCCC">v so let's do that</font><font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see I</font>

511
00:24:03,070 --> 00:24:09,339
just<font color="#E5E5E5"> run a docker command which brings</font>

512
00:24:05,200 --> 00:24:14,739
up a container that runs solar<font color="#E5E5E5"> it is</font>

513
00:24:09,339 --> 00:24:17,769
reachable<font color="#E5E5E5"> using this URL so we have</font>

514
00:24:14,739 --> 00:24:21,219
learning<font color="#E5E5E5"> to rank enabled on this and</font>

515
00:24:17,769 --> 00:24:24,070
since<font color="#E5E5E5"> our goal is to</font><font color="#CCCCCC"> actually search the</font>

516
00:24:21,219 --> 00:24:26,499
Wikipedia data<font color="#E5E5E5"> dump</font><font color="#CCCCCC"> I have added a</font>

517
00:24:24,070 --> 00:24:29,919
schema for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> that matches the actual</font>

518
00:24:26,499 --> 00:24:32,320
<font color="#E5E5E5">data dump so as you can</font><font color="#CCCCCC"> see we have some</font>

519
00:24:29,920 --> 00:24:36,220
<font color="#E5E5E5">one eighty thousand documents indexed</font>

520
00:24:32,320 --> 00:24:42,939
and<font color="#E5E5E5"> let's actually take a</font><font color="#CCCCCC"> look at some</font>

521
00:24:36,220 --> 00:24:46,179
<font color="#E5E5E5">of the documents we have so as you can</font>

522
00:24:42,940 --> 00:24:49,480
<font color="#E5E5E5">see</font><font color="#CCCCCC"> this schema contains</font><font color="#E5E5E5"> for example the</font>

523
00:24:46,179 --> 00:24:52,150
title<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Wikipedia document</font><font color="#CCCCCC"> the wiki</font>

524
00:24:49,480 --> 00:24:55,660
title which<font color="#CCCCCC"> is like the link it contains</font>

525
00:24:52,150 --> 00:24:58,480
links<font color="#CCCCCC"> to other</font><font color="#E5E5E5"> Wikipedia documents which</font>

526
00:24:55,660 --> 00:25:03,100
it references<font color="#E5E5E5"> it has the</font><font color="#CCCCCC"> actual</font>

527
00:24:58,480 --> 00:25:04,960
<font color="#E5E5E5">description of the</font><font color="#CCCCCC"> document and like</font>

528
00:25:03,100 --> 00:25:08,320
this<font color="#E5E5E5"> is the first</font><font color="#CCCCCC"> paragraph of the</font>

529
00:25:04,960 --> 00:25:18,429
document<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see we have a bunch</font>

530
00:25:08,320 --> 00:25:21,309
of these now when you actually<font color="#E5E5E5"> query for</font>

531
00:25:18,429 --> 00:25:23,980
something like<font color="#E5E5E5"> Brussels we get a list of</font>

532
00:25:21,309 --> 00:25:26,830
<font color="#CCCCCC">documents that it matches</font><font color="#E5E5E5"> and we get it</font>

533
00:25:23,980 --> 00:25:29,740
along with the score<font color="#E5E5E5"> so this is using</font>

534
00:25:26,830 --> 00:25:33,178
<font color="#CCCCCC">like the default solar tf-idf methods</font>

535
00:25:29,740 --> 00:25:33,179
it's not using any learning to rank

536
00:25:36,809 --> 00:25:44,530
so let's<font color="#CCCCCC"> actually let's try to</font><font color="#E5E5E5"> think of</font>

537
00:25:42,220 --> 00:25:47,080
some<font color="#E5E5E5"> of the features</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the more</font>

538
00:25:44,530 --> 00:25:50,340
important documents might have for

539
00:25:47,080 --> 00:25:52,889
<font color="#CCCCCC">example if you take</font><font color="#E5E5E5"> a look at these</font>

540
00:25:50,340 --> 00:25:55,090
fields and what<font color="#E5E5E5"> Diego described earlier</font>

541
00:25:52,890 --> 00:25:56,919
can you<font color="#E5E5E5"> try and come</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with some</font>

542
00:25:55,090 --> 00:25:59,379
<font color="#E5E5E5">features that might be more important</font>

543
00:25:56,919 --> 00:26:05,040
<font color="#E5E5E5">for</font><font color="#CCCCCC"> a document</font><font color="#E5E5E5"> like which more important</font>

544
00:25:59,380 --> 00:26:05,040
documents might have<font color="#E5E5E5"> yes way</font>

545
00:26:11,510 --> 00:26:22,640
yeah the number of incoming<font color="#E5E5E5"> links yeah</font>

546
00:26:17,270 --> 00:26:27,070
yeah sure that's<font color="#E5E5E5"> a good feature yeah</font>

547
00:26:22,640 --> 00:26:27,070
sure<font color="#CCCCCC"> anything anyone else</font>

548
00:26:28,840 --> 00:26:33,290
yes popularity<font color="#E5E5E5"> but right now in the</font>

549
00:26:31,460 --> 00:26:37,100
schema we don't have something<font color="#E5E5E5"> like the</font>

550
00:26:33,290 --> 00:26:38,420
<font color="#E5E5E5">clicks or reads so if you had that data</font>

551
00:26:37,100 --> 00:26:42,379
stored<font color="#CCCCCC"> somewhere that could</font><font color="#E5E5E5"> be a feature</font>

552
00:26:38,420 --> 00:26:47,200
but for this particular<font color="#CCCCCC"> data set we</font>

553
00:26:42,380 --> 00:26:57,860
cannot use that<font color="#CCCCCC"> any other ideas</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> oh</font>

554
00:26:47,200 --> 00:27:02,750
yeah sure<font color="#E5E5E5"> oh so that's a good one yeah</font>

555
00:26:57,860 --> 00:27:05,810
sure<font color="#E5E5E5"> that's another good one yeah let's</font>

556
00:27:02,750 --> 00:27:07,430
do good what<font color="#CCCCCC"> so yeah</font>

557
00:27:05,810 --> 00:27:11,300
all of these are<font color="#CCCCCC"> features we were able</font>

558
00:27:07,430 --> 00:27:13,190
<font color="#CCCCCC">to</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with and surprisingly they</font>

559
00:27:11,300 --> 00:27:15,440
are very similar<font color="#CCCCCC"> to the features I</font>

560
00:27:13,190 --> 00:27:17,240
actually had written<font color="#E5E5E5"> so you see these</font>

561
00:27:15,440 --> 00:27:19,130
features<font color="#CCCCCC"> are</font><font color="#E5E5E5"> very intuitive you can like</font>

562
00:27:17,240 --> 00:27:22,460
think of<font color="#E5E5E5"> them on the spot and they're</font>

563
00:27:19,130 --> 00:27:25,610
very<font color="#E5E5E5"> relevant to how these documents</font>

564
00:27:22,460 --> 00:27:30,020
will look like so if we<font color="#E5E5E5"> actually take a</font>

565
00:27:25,610 --> 00:27:32,330
look at<font color="#E5E5E5"> the feature store which</font><font color="#CCCCCC"> has the</font>

566
00:27:30,020 --> 00:27:36,850
definitions<font color="#E5E5E5"> of the feature we see we</font>

567
00:27:32,330 --> 00:27:39,439
<font color="#CCCCCC">have something like the like the</font>

568
00:27:36,850 --> 00:27:40,490
frequent like the number<font color="#E5E5E5"> of words in the</font>

569
00:27:39,440 --> 00:27:43,720
query<font color="#CCCCCC"> that are contained in</font><font color="#E5E5E5"> the</font>

570
00:27:40,490 --> 00:27:47,650
<font color="#E5E5E5">description the freshness for example</font>

571
00:27:43,720 --> 00:27:50,570
the number of<font color="#CCCCCC"> incoming links that it has</font>

572
00:27:47,650 --> 00:27:54,350
<font color="#E5E5E5">we have the</font><font color="#CCCCCC"> original score that is</font>

573
00:27:50,570 --> 00:27:57,260
provided by solar and again like<font color="#CCCCCC"> we have</font>

574
00:27:54,350 --> 00:27:59,600
the the<font color="#CCCCCC"> T if I give score in the title</font>

575
00:27:57,260 --> 00:28:01,220
instead<font color="#E5E5E5"> of description so you were able</font>

576
00:27:59,600 --> 00:28:03,080
to come up<font color="#CCCCCC"> with all</font><font color="#E5E5E5"> these features on</font>

577
00:28:01,220 --> 00:28:05,120
<font color="#CCCCCC">support</font><font color="#E5E5E5"> and surprisingly they're very</font>

578
00:28:03,080 --> 00:28:07,070
close to the original feature store that

579
00:28:05,120 --> 00:28:09,709
we had implemented<font color="#E5E5E5"> so you can see these</font>

580
00:28:07,070 --> 00:28:11,570
features<font color="#CCCCCC"> are</font><font color="#E5E5E5"> very intuitive</font><font color="#CCCCCC"> and you're</font>

581
00:28:09,710 --> 00:28:14,990
you basically need<font color="#CCCCCC"> to just write them</font>

582
00:28:11,570 --> 00:28:17,840
it's a<font color="#E5E5E5"> very</font><font color="#CCCCCC"> simple it's just a JSON file</font>

583
00:28:14,990 --> 00:28:19,400
you can<font color="#CCCCCC"> easily write them and learning</font>

584
00:28:17,840 --> 00:28:22,449
<font color="#E5E5E5">to</font><font color="#CCCCCC"> wrangle helps you</font><font color="#E5E5E5"> actually extract</font>

585
00:28:19,400 --> 00:28:22,450
these values very easily

586
00:28:24,190 --> 00:28:32,809
so let's see an example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> how these</font>

587
00:28:29,990 --> 00:28:35,660
feature values<font color="#E5E5E5"> look like so for example</font>

588
00:28:32,809 --> 00:28:37,220
we have the same documents we had in the

589
00:28:35,660 --> 00:28:40,280
earlier search<font color="#E5E5E5"> but we have the actual</font>

590
00:28:37,220 --> 00:28:43,910
values of<font color="#E5E5E5"> the features for</font><font color="#CCCCCC"> example we</font>

591
00:28:40,280 --> 00:28:47,178
can see<font color="#E5E5E5"> that query brussels has</font><font color="#CCCCCC"> a</font>

592
00:28:43,910 --> 00:28:51,410
freshness<font color="#CCCCCC"> core</font><font color="#E5E5E5"> it has the number of</font>

593
00:28:47,179 --> 00:28:53,540
links<font color="#CCCCCC"> that this document</font><font color="#E5E5E5"> has the</font><font color="#CCCCCC"> score</font>

594
00:28:51,410 --> 00:28:56,900
<font color="#E5E5E5">of the actual query in the description</font>

595
00:28:53,540 --> 00:29:00,200
<font color="#E5E5E5">and the title so the</font><font color="#CCCCCC"> description</font><font color="#E5E5E5"> score</font>

596
00:28:56,900 --> 00:29:01,910
and the title score<font color="#E5E5E5"> so you can see it's</font>

597
00:29:00,200 --> 00:29:04,190
very easy<font color="#E5E5E5"> to extract these features once</font>

598
00:29:01,910 --> 00:29:15,020
you have<font color="#E5E5E5"> just provided that jacent</font>

599
00:29:04,190 --> 00:29:18,650
definition<font color="#CCCCCC"> and next</font><font color="#E5E5E5"> let's so what I did</font>

600
00:29:15,020 --> 00:29:21,800
<font color="#CCCCCC">is now we</font><font color="#E5E5E5"> have the features we have</font><font color="#CCCCCC"> the</font>

601
00:29:18,650 --> 00:29:24,140
documents what we want<font color="#E5E5E5"> to do now</font><font color="#CCCCCC"> is get</font>

602
00:29:21,800 --> 00:29:27,440
<font color="#CCCCCC">the features</font><font color="#E5E5E5"> out train a model on it and</font>

603
00:29:24,140 --> 00:29:31,040
evaluate<font color="#CCCCCC"> the results so</font><font color="#E5E5E5"> I wrote a simple</font>

604
00:29:27,440 --> 00:29:33,620
web UI<font color="#E5E5E5"> so that you can give them</font><font color="#CCCCCC"> to</font>

605
00:29:31,040 --> 00:29:35,600
judges or people who are experts in<font color="#E5E5E5"> the</font>

606
00:29:33,620 --> 00:29:37,550
domain to<font color="#E5E5E5"> mark the documents as relevant</font>

607
00:29:35,600 --> 00:29:43,159
or not<font color="#E5E5E5"> so this is where we will get a</font>

608
00:29:37,550 --> 00:29:46,159
<font color="#E5E5E5">training data set from and it also has a</font>

609
00:29:43,160 --> 00:29:48,290
bunch<font color="#E5E5E5"> of screens for actually taking a</font>

610
00:29:46,160 --> 00:29:52,090
look at how our<font color="#E5E5E5"> model performs like the</font>

611
00:29:48,290 --> 00:29:56,210
evaluation<font color="#E5E5E5"> part so for example we can</font>

612
00:29:52,090 --> 00:29:59,959
<font color="#CCCCCC">type the same query again and we see</font>

613
00:29:56,210 --> 00:30:02,870
like<font color="#E5E5E5"> a list of it's the</font><font color="#CCCCCC"> same list</font><font color="#E5E5E5"> of</font>

614
00:29:59,960 --> 00:30:05,420
<font color="#E5E5E5">results</font><font color="#CCCCCC"> and you can see there's a button</font>

615
00:30:02,870 --> 00:30:10,189
<font color="#E5E5E5">here where they can mark the document as</font>

616
00:30:05,420 --> 00:30:12,230
<font color="#E5E5E5">relevant or not so for example this</font>

617
00:30:10,190 --> 00:30:14,929
seems like<font color="#E5E5E5"> a relevant document</font><font color="#CCCCCC"> I'm just</font>

618
00:30:12,230 --> 00:30:17,960
marking<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> relevant and it's saving</font>

619
00:30:14,929 --> 00:30:20,240
that particular document<font color="#E5E5E5"> as a relevant</font>

620
00:30:17,960 --> 00:30:23,210
<font color="#CCCCCC">document so this is how you can build</font><font color="#E5E5E5"> up</font>

621
00:30:20,240 --> 00:30:26,240
a training set<font color="#E5E5E5"> by giving it to people</font>

622
00:30:23,210 --> 00:30:27,830
<font color="#CCCCCC">who</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> just like look at</font><font color="#E5E5E5"> your type in a</font>

623
00:30:26,240 --> 00:30:30,800
query<font color="#E5E5E5"> and then mark</font><font color="#CCCCCC"> the documents as</font>

624
00:30:27,830 --> 00:30:32,629
relevant<font color="#E5E5E5"> or not and also you can see</font>

625
00:30:30,800 --> 00:30:34,340
this this<font color="#CCCCCC"> particular documents comes</font>

626
00:30:32,630 --> 00:30:37,160
<font color="#E5E5E5">third in the result it's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> the top</font>

627
00:30:34,340 --> 00:30:39,080
result<font color="#E5E5E5"> and you see a lot of</font>

628
00:30:37,160 --> 00:30:47,690
results that<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> relevant to the</font>

629
00:30:39,080 --> 00:30:50,090
<font color="#E5E5E5">actual query so let's take a look at the</font>

630
00:30:47,690 --> 00:30:54,380
baseline solar model where we haven't

631
00:30:50,090 --> 00:30:56,899
<font color="#E5E5E5">implemented any we don't have a learning</font>

632
00:30:54,380 --> 00:30:59,210
to rank model at all and we'll<font color="#CCCCCC"> evaluate</font>

633
00:30:56,900 --> 00:31:00,860
it<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> same matrix</font><font color="#E5E5E5"> that Diego</font>

634
00:30:59,210 --> 00:31:02,660
described earlier<font color="#CCCCCC"> we'll check the</font>

635
00:31:00,860 --> 00:31:06,039
precision we'll check the recall and

636
00:31:02,660 --> 00:31:06,039
we'll check<font color="#E5E5E5"> the F score</font>

637
00:31:30,220 --> 00:31:32,909
<font color="#E5E5E5">okay</font>

638
00:31:49,419 --> 00:31:55,869
so yeah as<font color="#CCCCCC"> you can see for the original</font>

639
00:31:52,779 --> 00:31:57,129
model for the top five documents<font color="#CCCCCC"> if you</font>

640
00:31:55,869 --> 00:31:59,499
just take<font color="#E5E5E5"> a look at the top five</font>

641
00:31:57,129 --> 00:32:02,109
documents<font color="#E5E5E5"> returned by the query we see</font>

642
00:31:59,499 --> 00:32:05,499
it has an F score of 0.38 a precision<font color="#CCCCCC"> of</font>

643
00:32:02,109 --> 00:32:08,199
0.4 one<font color="#CCCCCC"> not equal of 0.49</font><font color="#E5E5E5"> all of these</font>

644
00:32:05,499 --> 00:32:10,719
matrix the higher they are<font color="#E5E5E5"> the better</font>

645
00:32:08,200 --> 00:32:13,989
kind<font color="#E5E5E5"> of results</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> your real search</font>

646
00:32:10,719 --> 00:32:16,989
engine is returning<font color="#E5E5E5"> so we can also take</font>

647
00:32:13,989 --> 00:32:19,119
<font color="#E5E5E5">a look at how this like the original</font>

648
00:32:16,989 --> 00:32:21,909
baseline solar model performs for each

649
00:32:19,119 --> 00:32:23,439
query<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> check for each query the F</font>

650
00:32:21,909 --> 00:32:25,629
<font color="#CCCCCC">score precision and recall</font><font color="#E5E5E5"> and you can</font>

651
00:32:23,440 --> 00:32:30,190
actually<font color="#E5E5E5"> check</font><font color="#CCCCCC"> the documents that your</font>

652
00:32:25,629 --> 00:32:33,759
annotators marked as relevant<font color="#E5E5E5"> or not so</font>

653
00:32:30,190 --> 00:32:39,759
now let's try<font color="#E5E5E5"> and use learning to rank</font>

654
00:32:33,759 --> 00:32:42,489
<font color="#E5E5E5">to improve these results so first thing</font>

655
00:32:39,759 --> 00:32:45,579
we'll do is<font color="#E5E5E5"> we'll try to train and</font>

656
00:32:42,489 --> 00:32:47,379
evaluate a linear model<font color="#CCCCCC"> a linear model</font>

657
00:32:45,579 --> 00:32:52,359
<font color="#E5E5E5">we'll just take a look at the features</font>

658
00:32:47,379 --> 00:32:54,570
<font color="#E5E5E5">we had a real put like describe and it</font>

659
00:32:52,359 --> 00:32:57,009
will combine<font color="#E5E5E5"> them using some weights</font>

660
00:32:54,570 --> 00:33:01,029
<font color="#E5E5E5">by assigning some weights to each of the</font>

661
00:32:57,009 --> 00:33:05,709
features<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> you need to</font>

662
00:33:01,029 --> 00:33:07,089
do is run the script<font color="#CCCCCC"> so it it gives you</font>

663
00:33:05,709 --> 00:33:09,399
two options<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can either train a</font>

664
00:33:07,089 --> 00:33:11,469
linear model or a lambda<font color="#CCCCCC"> Mott model we</font>

665
00:33:09,399 --> 00:33:16,918
<font color="#E5E5E5">want to train and upload the linear</font>

666
00:33:11,469 --> 00:33:16,919
model so that's done

667
00:33:20,970 --> 00:33:27,180
so as you can<font color="#CCCCCC"> see a linear model right</font>

668
00:33:24,840 --> 00:33:29,250
<font color="#E5E5E5">out of the box is</font><font color="#CCCCCC"> not performing that</font>

669
00:33:27,180 --> 00:33:31,440
well against the original solar model

670
00:33:29,250 --> 00:33:34,410
<font color="#E5E5E5">now this might</font><font color="#CCCCCC"> be due to</font><font color="#E5E5E5"> a number</font><font color="#CCCCCC"> of</font>

671
00:33:31,440 --> 00:33:37,140
reasons<font color="#CCCCCC"> maybe the data set</font><font color="#E5E5E5"> we have</font>

672
00:33:34,410 --> 00:33:39,300
doesn't<font color="#E5E5E5"> have enough examples it's also</font>

673
00:33:37,140 --> 00:33:41,640
because right now we<font color="#CCCCCC"> have not normalized</font>

674
00:33:39,300 --> 00:33:44,159
our features so different features might

675
00:33:41,640 --> 00:33:46,410
have different<font color="#E5E5E5"> distributions</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're</font>

676
00:33:44,160 --> 00:33:48,930
<font color="#E5E5E5">not combining them together in a</font>

677
00:33:46,410 --> 00:33:50,250
meaningful<font color="#E5E5E5"> way</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> achieve</font>

678
00:33:48,930 --> 00:33:53,340
better performance<font color="#CCCCCC"> with your Linum</font>

679
00:33:50,250 --> 00:33:56,820
linear model you can like<font color="#E5E5E5"> basically try</font>

680
00:33:53,340 --> 00:33:58,379
to reduce<font color="#E5E5E5"> your feature set there might</font>

681
00:33:56,820 --> 00:34:01,649
be some features that<font color="#CCCCCC"> are very noisy</font>

682
00:33:58,380 --> 00:34:04,170
that<font color="#CCCCCC"> are like basically</font><font color="#E5E5E5"> deviating the</font>

683
00:34:01,650 --> 00:34:06,420
model from<font color="#E5E5E5"> achieving ideal results or</font>

684
00:34:04,170 --> 00:34:11,130
maybe<font color="#E5E5E5"> some of the features are</font>

685
00:34:06,420 --> 00:34:15,350
overpowering the other ones so we can

686
00:34:11,130 --> 00:34:15,350
actually compare how both these models

687
00:34:25,650 --> 00:34:29,670
look like for each<font color="#E5E5E5"> particular query for</font>

688
00:34:28,050 --> 00:34:31,650
example<font color="#CCCCCC"> here we have</font><font color="#E5E5E5"> the linear model on</font>

689
00:34:29,670 --> 00:34:36,180
the<font color="#CCCCCC"> left side and the original model on</font>

690
00:34:31,650 --> 00:34:38,670
the right we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that it's not</font>

691
00:34:36,179 --> 00:34:40,319
performing<font color="#CCCCCC"> that well so for example the</font>

692
00:34:38,670 --> 00:34:41,700
linear model puts the<font color="#E5E5E5"> first relevant</font>

693
00:34:40,320 --> 00:34:44,340
result and<font color="#CCCCCC"> maybe the sixth or the</font>

694
00:34:41,699 --> 00:34:47,279
seventh position<font color="#E5E5E5"> here it's in the second</font>

695
00:34:44,340 --> 00:34:51,450
<font color="#CCCCCC">position so let's</font><font color="#E5E5E5"> try and improve on</font>

696
00:34:47,280 --> 00:34:53,760
that<font color="#E5E5E5"> as Diego said</font><font color="#CCCCCC"> we have better models</font>

697
00:34:51,449 --> 00:34:56,219
<font color="#E5E5E5">right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> free based models which</font>

698
00:34:53,760 --> 00:34:59,300
take a look at the<font color="#E5E5E5"> features and then</font>

699
00:34:56,219 --> 00:35:01,950
basically<font color="#E5E5E5"> go</font><font color="#CCCCCC"> through a set of decisions</font>

700
00:34:59,300 --> 00:35:04,140
<font color="#E5E5E5">for an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if they see</font><font color="#CCCCCC"> that the</font>

701
00:35:01,950 --> 00:35:06,750
number of<font color="#E5E5E5"> links if a document</font><font color="#CCCCCC"> has a lot</font>

702
00:35:04,140 --> 00:35:09,480
of<font color="#CCCCCC"> links</font><font color="#E5E5E5"> go down this</font><font color="#CCCCCC"> particular path</font>

703
00:35:06,750 --> 00:35:11,790
which checks the<font color="#E5E5E5"> score of the query in</font>

704
00:35:09,480 --> 00:35:13,320
the title and then so on so it's able to

705
00:35:11,790 --> 00:35:15,390
<font color="#E5E5E5">combine the features in a much more</font>

706
00:35:13,320 --> 00:35:22,350
<font color="#E5E5E5">meaningful way than just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple linear</font>

707
00:35:15,390 --> 00:35:27,240
model<font color="#CCCCCC"> with weights attached to it before</font>

708
00:35:22,350 --> 00:35:34,350
<font color="#CCCCCC">we do that there's something interesting</font>

709
00:35:27,240 --> 00:35:36,870
I want<font color="#CCCCCC"> to show with</font><font color="#E5E5E5"> the linear model so</font>

710
00:35:34,350 --> 00:35:41,160
we had trained linear model and<font color="#E5E5E5"> we know</font>

711
00:35:36,870 --> 00:35:44,130
<font color="#CCCCCC">about</font><font color="#E5E5E5"> the features</font><font color="#CCCCCC"> so what do you think</font>

712
00:35:41,160 --> 00:35:46,410
like if if there's a feature like the

713
00:35:44,130 --> 00:35:47,760
number of<font color="#E5E5E5"> incoming links what kind of</font>

714
00:35:46,410 --> 00:35:51,589
<font color="#CCCCCC">weight</font><font color="#E5E5E5"> should it have should it have a</font>

715
00:35:47,760 --> 00:35:51,590
<font color="#E5E5E5">positive eight negative eight any ideas</font>

716
00:35:54,050 --> 00:35:57,050
anyone

717
00:35:58,570 --> 00:36:04,990
yeah obviously and what about<font color="#E5E5E5"> so what</font>

718
00:36:03,220 --> 00:36:11,290
about any<font color="#E5E5E5"> other features that we had</font>

719
00:36:04,990 --> 00:36:13,359
discussed what about freshness do you

720
00:36:11,290 --> 00:36:15,880
think you'd<font color="#E5E5E5"> prefer a fresher document</font><font color="#CCCCCC"> an</font>

721
00:36:13,360 --> 00:36:18,730
older one<font color="#E5E5E5"> yeah so it's a gain of</font>

722
00:36:15,880 --> 00:36:25,860
positive weight<font color="#CCCCCC"> what about things like</font>

723
00:36:18,730 --> 00:36:25,860
the<font color="#CCCCCC"> length of the document</font><font color="#E5E5E5"> any ideas</font>

724
00:36:26,190 --> 00:36:32,110
I'll be doing<font color="#CCCCCC"> Annie I know it's just</font>

725
00:36:30,490 --> 00:36:33,490
taking a look it's not normalizing the

726
00:36:32,110 --> 00:36:34,630
<font color="#E5E5E5">lens at all it's just taking a look at</font>

727
00:36:33,490 --> 00:36:36,729
the length of the document<font color="#CCCCCC"> how do you</font>

728
00:36:34,630 --> 00:36:37,900
<font color="#E5E5E5">think what can't new feature</font><font color="#CCCCCC"> that like</font>

729
00:36:36,730 --> 00:36:43,750
<font color="#E5E5E5">would that be a positive</font><font color="#CCCCCC"> feature a</font>

730
00:36:37,900 --> 00:36:47,020
negative feature yeah yeah sure<font color="#E5E5E5"> so if we</font>

731
00:36:43,750 --> 00:36:49,060
<font color="#E5E5E5">take a look at linear model and the</font>

732
00:36:47,020 --> 00:36:50,500
weights<font color="#E5E5E5"> are actually learned we see that</font>

733
00:36:49,060 --> 00:36:52,990
for something<font color="#CCCCCC"> like description length</font>

734
00:36:50,500 --> 00:36:55,330
<font color="#E5E5E5">it's learned</font><font color="#CCCCCC"> the negative weight so it</font>

735
00:36:52,990 --> 00:36:57,700
knows to<font color="#E5E5E5"> penalize documents that have a</font>

736
00:36:55,330 --> 00:36:59,860
very<font color="#E5E5E5"> large description for something</font>

737
00:36:57,700 --> 00:37:01,839
like links<font color="#E5E5E5"> length it gave it a very high</font>

738
00:36:59,860 --> 00:37:04,540
<font color="#CCCCCC">positive score to give it like a plus 31</font>

739
00:37:01,840 --> 00:37:06,330
weight<font color="#E5E5E5"> so it knows</font><font color="#CCCCCC"> that it was</font><font color="#E5E5E5"> able to</font>

740
00:37:04,540 --> 00:37:08,560
learn and extract the fact that

741
00:37:06,330 --> 00:37:11,350
documents with more links<font color="#E5E5E5"> are more</font>

742
00:37:08,560 --> 00:37:13,600
important so you can<font color="#CCCCCC"> see it was able to</font>

743
00:37:11,350 --> 00:37:16,779
<font color="#E5E5E5">do that with very little</font><font color="#CCCCCC"> we were able to</font>

744
00:37:13,600 --> 00:37:22,120
<font color="#E5E5E5">set all of this up enough like in very</font>

745
00:37:16,780 --> 00:37:24,850
easily so yeah that's a linear<font color="#E5E5E5"> model</font><font color="#CCCCCC"> now</font>

746
00:37:22,120 --> 00:37:29,410
let's try and train our train a free

747
00:37:24,850 --> 00:37:32,440
base<font color="#E5E5E5"> model so</font><font color="#CCCCCC"> we're using a tree based</font>

748
00:37:29,410 --> 00:37:36,970
<font color="#E5E5E5">model called lambda</font><font color="#CCCCCC"> mod it is available</font>

749
00:37:32,440 --> 00:37:44,350
in a library<font color="#CCCCCC"> called ranked lib let's try</font>

750
00:37:36,970 --> 00:37:46,959
and train a very basic model so this

751
00:37:44,350 --> 00:37:49,839
<font color="#CCCCCC">fee-based model it looks at a matrix</font>

752
00:37:46,960 --> 00:37:52,780
<font color="#E5E5E5">optimized right now what it's trying to</font>

753
00:37:49,840 --> 00:37:54,310
optimize is the top<font color="#E5E5E5"> ten results so it's</font>

754
00:37:52,780 --> 00:37:56,260
basically<font color="#E5E5E5"> trying to put the most</font>

755
00:37:54,310 --> 00:37:57,910
<font color="#E5E5E5">relevant result in the first position</font>

756
00:37:56,260 --> 00:38:00,490
the second most one at the second

757
00:37:57,910 --> 00:38:02,710
position<font color="#E5E5E5"> and so on it's not just looking</font>

758
00:38:00,490 --> 00:38:05,979
<font color="#E5E5E5">at</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> ten documents out of</font>

759
00:38:02,710 --> 00:38:08,680
order and just figuring out if there is

760
00:38:05,980 --> 00:38:12,190
<font color="#CCCCCC">a document that it from positions</font><font color="#E5E5E5"> five</font>

761
00:38:08,680 --> 00:38:13,868
to<font color="#E5E5E5"> ten those are marked</font>

762
00:38:12,190 --> 00:38:15,640
the lower relevance of the relevant

763
00:38:13,869 --> 00:38:18,280
<font color="#E5E5E5">documents were in the positions one</font>

764
00:38:15,640 --> 00:38:20,310
through five<font color="#E5E5E5"> so we have trained this</font>

765
00:38:18,280 --> 00:38:27,460
module<font color="#E5E5E5"> and we have uploaded it to solar</font>

766
00:38:20,310 --> 00:38:29,680
<font color="#E5E5E5">and let's check how it performs so we</font>

767
00:38:27,460 --> 00:38:31,240
can see that the tree<font color="#CCCCCC"> base</font><font color="#E5E5E5"> model</font>

768
00:38:29,680 --> 00:38:36,339
actually<font color="#E5E5E5"> performs much better</font><font color="#CCCCCC"> than the</font>

769
00:38:31,240 --> 00:38:39,279
original solar model you get like better

770
00:38:36,339 --> 00:38:42,940
metrics across<font color="#E5E5E5"> the board and if you</font>

771
00:38:39,280 --> 00:38:45,420
check it like a query<font color="#CCCCCC"> level how it was</font>

772
00:38:42,940 --> 00:38:45,420
performing

773
00:38:55,240 --> 00:39:00,040
so here<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have the lambda</font>

774
00:38:58,390 --> 00:39:01,900
<font color="#CCCCCC">mark model on the left</font><font color="#E5E5E5"> and the original</font>

775
00:39:00,040 --> 00:39:03,940
solar model on the right you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> it's</font>

776
00:39:01,900 --> 00:39:07,150
put all the relevant results on the top

777
00:39:03,940 --> 00:39:08,589
and that's typically<font color="#E5E5E5"> what we want and we</font>

778
00:39:07,150 --> 00:39:10,570
didn't<font color="#E5E5E5"> have to tune any of these weights</font>

779
00:39:08,589 --> 00:39:12,820
manually<font color="#E5E5E5"> it was able</font><font color="#CCCCCC"> to learn all of</font>

780
00:39:10,570 --> 00:39:14,589
these weights<font color="#E5E5E5"> and it was able</font><font color="#CCCCCC"> to</font>

781
00:39:12,820 --> 00:39:16,630
generalize it across all the documents

782
00:39:14,589 --> 00:39:19,630
so it's not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one if we</font>

783
00:39:16,630 --> 00:39:23,020
take any of the other queries we made

784
00:39:19,630 --> 00:39:25,690
for example<font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> we see that it's still</font>

785
00:39:23,020 --> 00:39:28,180
<font color="#E5E5E5">it's tried to learn the</font><font color="#CCCCCC"> general</font><font color="#E5E5E5"> formula</font>

786
00:39:25,690 --> 00:39:30,970
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> it works</font><font color="#E5E5E5"> better across the</font><font color="#CCCCCC"> board</font>

787
00:39:28,180 --> 00:39:33,310
not<font color="#E5E5E5"> just for one</font><font color="#CCCCCC"> particular query now</font>

788
00:39:30,970 --> 00:39:34,868
this typically if you're<font color="#CCCCCC"> doing it</font>

789
00:39:33,310 --> 00:39:37,690
manually this would be very hard<font color="#CCCCCC"> to do</font>

790
00:39:34,869 --> 00:39:39,750
<font color="#E5E5E5">but right now</font><font color="#CCCCCC"> all you have</font><font color="#E5E5E5"> to give it is</font>

791
00:39:37,690 --> 00:39:41,680
a data set<font color="#CCCCCC"> and a bunch of annotations</font>

792
00:39:39,750 --> 00:39:44,020
<font color="#E5E5E5">marked as relevant or not Anil</font>

793
00:39:41,680 --> 00:39:53,500
automatically learn how to rank<font color="#E5E5E5"> the</font>

794
00:39:44,020 --> 00:39:55,869
documents<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let's try and see how</font>

795
00:39:53,500 --> 00:40:02,320
<font color="#CCCCCC">it performs</font><font color="#E5E5E5"> for a query it</font><font color="#CCCCCC"> has never</font>

796
00:39:55,869 --> 00:40:04,060
<font color="#E5E5E5">actually seen before yeah can you let's</font>

797
00:40:02,320 --> 00:40:12,369
try a<font color="#E5E5E5"> nano date a new query can you give</font>

798
00:40:04,060 --> 00:40:19,810
me a query any query yeah like we don't

799
00:40:12,369 --> 00:40:28,200
know how it<font color="#CCCCCC"> was</font><font color="#E5E5E5"> actually what Wikipedia</font>

800
00:40:19,810 --> 00:40:28,200
so it has Sweden<font color="#E5E5E5"> okay</font>

801
00:40:28,560 --> 00:40:34,869
so we see<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> have a bunch</font><font color="#E5E5E5"> of</font>

802
00:40:31,510 --> 00:40:41,890
<font color="#E5E5E5">documents from Sweden</font><font color="#CCCCCC"> let's try to mark</font>

803
00:40:34,869 --> 00:40:45,070
something<font color="#CCCCCC"> relevant that</font><font color="#E5E5E5"> we see so Sweden</font>

804
00:40:41,890 --> 00:40:48,160
is all the way<font color="#E5E5E5"> in</font><font color="#CCCCCC"> like some 18th</font><font color="#E5E5E5"> or 16th</font>

805
00:40:45,070 --> 00:40:50,010
position here okay now this is a query

806
00:40:48,160 --> 00:40:52,598
that<font color="#E5E5E5"> we have never seen before</font><font color="#CCCCCC"> our</font>

807
00:40:50,010 --> 00:40:56,859
module hasn't like doesn't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font>

808
00:40:52,599 --> 00:40:58,720
at<font color="#E5E5E5"> all that's not being trained on it so</font>

809
00:40:56,859 --> 00:41:04,509
let's<font color="#E5E5E5"> just for now mark this particular</font>

810
00:40:58,720 --> 00:41:06,669
document<font color="#CCCCCC"> as relevant</font><font color="#E5E5E5"> so yeah so we see</font>

811
00:41:04,510 --> 00:41:08,989
<font color="#E5E5E5">it's here let's go back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> our</font>

812
00:41:06,670 --> 00:41:13,380
evaluation<font color="#CCCCCC"> UI</font>

813
00:41:08,989 --> 00:41:15,989
and the moment<font color="#E5E5E5"> of truth let's see how it</font>

814
00:41:13,380 --> 00:41:17,609
does<font color="#E5E5E5"> whoa</font>

815
00:41:15,989 --> 00:41:19,739
so it actually<font color="#CCCCCC"> got it in the first</font><font color="#E5E5E5"> place</font>

816
00:41:17,609 --> 00:41:22,949
<font color="#E5E5E5">now it never knew about this particular</font>

817
00:41:19,739 --> 00:41:24,509
query and this is the first time<font color="#CCCCCC"> it saw</font>

818
00:41:22,949 --> 00:41:26,130
<font color="#E5E5E5">it and it actually put it in the first</font>

819
00:41:24,509 --> 00:41:28,819
<font color="#E5E5E5">place</font><font color="#CCCCCC"> whereas the original solar model</font>

820
00:41:26,130 --> 00:41:32,999
put it all the<font color="#E5E5E5"> way in like the lower 20s</font>

821
00:41:28,819 --> 00:41:36,900
<font color="#CCCCCC">so yeah that's the power of learning</font><font color="#E5E5E5"> to</font>

822
00:41:32,999 --> 00:41:41,660
rank<font color="#E5E5E5"> you can also do something some</font>

823
00:41:36,900 --> 00:41:41,660
other<font color="#E5E5E5"> cool things with it for example</font>

824
00:41:43,039 --> 00:41:50,519
now<font color="#E5E5E5"> what I'm if you take a look at the</font>

825
00:41:46,589 --> 00:41:52,890
<font color="#CCCCCC">parameters that this script accepts it</font>

826
00:41:50,519 --> 00:41:54,899
basically asks<font color="#E5E5E5"> for the number of trees</font><font color="#CCCCCC"> a</font>

827
00:41:52,890 --> 00:41:56,879
<font color="#E5E5E5">matrix to optimize and the number of</font>

828
00:41:54,900 --> 00:41:59,429
<font color="#E5E5E5">documents for that matrix</font><font color="#CCCCCC"> optimized out</font>

829
00:41:56,880 --> 00:42:02,759
so basically<font color="#CCCCCC"> if you have something like</font>

830
00:41:59,429 --> 00:42:04,619
<font color="#E5E5E5">a UI where a user types in a query and</font>

831
00:42:02,759 --> 00:42:07,140
<font color="#CCCCCC">that</font><font color="#E5E5E5"> automatically directs them to like</font>

832
00:42:04,619 --> 00:42:09,630
<font color="#E5E5E5">the top first document that</font><font color="#CCCCCC"> the two that</font>

833
00:42:07,140 --> 00:42:13,288
is<font color="#E5E5E5"> returned by the search engine then</font>

834
00:42:09,630 --> 00:42:17,299
you basically<font color="#E5E5E5"> want to optimize the</font>

835
00:42:13,289 --> 00:42:17,299
precision<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the first document</font>

836
00:42:28,460 --> 00:42:34,980
now even<font color="#E5E5E5"> though we</font><font color="#CCCCCC"> see that it's not</font>

837
00:42:33,000 --> 00:42:37,349
performing<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> as our</font><font color="#E5E5E5"> other model</font>

838
00:42:34,980 --> 00:42:40,529
but it specializes<font color="#E5E5E5"> in something</font><font color="#CCCCCC"> that it</font>

839
00:42:37,349 --> 00:42:42,269
does so it<font color="#CCCCCC"> will try</font><font color="#E5E5E5"> and boost the most</font>

840
00:42:40,529 --> 00:42:43,950
relevant document always at the first

841
00:42:42,269 --> 00:42:46,140
position<font color="#CCCCCC"> it will make sure that the</font>

842
00:42:43,950 --> 00:42:49,589
first document you have<font color="#E5E5E5"> is always the</font>

843
00:42:46,140 --> 00:42:51,710
relevant one<font color="#E5E5E5"> so if we</font><font color="#CCCCCC"> actually take</font><font color="#E5E5E5"> a</font>

844
00:42:49,589 --> 00:42:55,049
<font color="#E5E5E5">look at the queries and</font><font color="#CCCCCC"> the documents</font>

845
00:42:51,710 --> 00:42:59,069
you'll find that the<font color="#E5E5E5"> first document will</font>

846
00:42:55,049 --> 00:43:01,319
always be<font color="#CCCCCC"> relevant so for</font><font color="#E5E5E5"> example Apple</font>

847
00:42:59,069 --> 00:43:05,509
<font color="#CCCCCC">first document is relevant well</font><font color="#E5E5E5"> then</font>

848
00:43:01,319 --> 00:43:05,509
again<font color="#E5E5E5"> first is relevant and so on</font>

849
00:43:05,990 --> 00:43:12,899
so yeah this<font color="#CCCCCC"> is like</font><font color="#E5E5E5"> a basic demo of</font><font color="#CCCCCC"> how</font>

850
00:43:09,779 --> 00:43:15,750
easy learning<font color="#CCCCCC"> to rank is to use and how</font>

851
00:43:12,900 --> 00:43:17,940
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> basically do away with a lot of</font>

852
00:43:15,750 --> 00:43:22,650
<font color="#E5E5E5">manual</font><font color="#CCCCCC"> labor manually tweaking the rank</font>

853
00:43:17,940 --> 00:43:26,880
or function<font color="#E5E5E5"> with learning</font><font color="#CCCCCC"> to rank yeah</font>

854
00:43:22,650 --> 00:43:36,769
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are open to questions thank you</font>

855
00:43:26,880 --> 00:43:36,769
[Applause]

856
00:43:42,420 --> 00:43:56,349
yeah yeah<font color="#E5E5E5"> also that was basically yeah</font>

857
00:43:50,979 --> 00:43:58,868
<font color="#E5E5E5">so the question is we had in the UI</font><font color="#CCCCCC"> when</font>

858
00:43:56,349 --> 00:44:00,400
<font color="#E5E5E5">we searched</font><font color="#CCCCCC"> for Sweden</font><font color="#E5E5E5"> we had a bunch of</font>

859
00:43:58,869 --> 00:44:01,749
<font color="#E5E5E5">queries</font><font color="#CCCCCC"> that were mark</font><font color="#E5E5E5"> does not relevant</font>

860
00:44:00,400 --> 00:44:03,970
<font color="#E5E5E5">and then we clicked on it it became</font>

861
00:44:01,749 --> 00:44:08,558
relevant<font color="#CCCCCC"> so what's the</font><font color="#E5E5E5"> front</font><font color="#CCCCCC"> end behind</font>

862
00:44:03,970 --> 00:44:10,868
<font color="#E5E5E5">them yeah that was something we built</font>

863
00:44:08,559 --> 00:44:13,749
<font color="#E5E5E5">ourselves so what we tried to</font><font color="#CCCCCC"> build was</font>

864
00:44:10,869 --> 00:44:17,349
a basic annotation tool<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can give</font>

865
00:44:13,749 --> 00:44:19,029
the users a UI where you can let's say

866
00:44:17,349 --> 00:44:23,289
<font color="#CCCCCC">pre populate certain queries that you</font>

867
00:44:19,029 --> 00:44:25,390
want them<font color="#E5E5E5"> to evaluate then</font><font color="#CCCCCC"> they'll look</font>

868
00:44:23,289 --> 00:44:27,369
at<font color="#E5E5E5"> the query they'll get a list of</font>

869
00:44:25,390 --> 00:44:42,069
<font color="#CCCCCC">documents and they can simply click on</font>

870
00:44:27,369 --> 00:44:43,690
the document they think is relevant yeah

871
00:44:42,069 --> 00:44:46,140
okay yeah<font color="#E5E5E5"> yeah that's</font><font color="#CCCCCC"> that definitely</font>

872
00:44:43,690 --> 00:44:46,140
<font color="#E5E5E5">makes</font><font color="#CCCCCC"> sense</font>

873
00:44:51,510 --> 00:45:16,660
yeah yeah<font color="#E5E5E5"> that's true so sorry yeah so</font>

874
00:45:14,620 --> 00:45:18,100
the<font color="#CCCCCC"> question is why didn't we do any</font>

875
00:45:16,660 --> 00:45:23,290
cross validation for<font color="#E5E5E5"> our machine</font>

876
00:45:18,100 --> 00:45:26,860
<font color="#CCCCCC">learning modules</font><font color="#E5E5E5"> maybe and why we didn't</font>

877
00:45:23,290 --> 00:45:28,720
mention<font color="#E5E5E5"> it so for the purposes</font><font color="#CCCCCC"> of this</font>

878
00:45:26,860 --> 00:45:30,490
demo we just wanted<font color="#CCCCCC"> to showcase</font><font color="#E5E5E5"> what</font>

879
00:45:28,720 --> 00:45:32,770
learning<font color="#E5E5E5"> to rank is capable of and how</font>

880
00:45:30,490 --> 00:46:04,359
easy it<font color="#E5E5E5"> is to set up we didn't want to</font>

881
00:45:32,770 --> 00:46:07,270
get<font color="#E5E5E5"> into yeah yeah yeah how</font><font color="#CCCCCC"> do you train</font>

882
00:46:04,360 --> 00:46:10,510
a model<font color="#E5E5E5"> but is how the whole framework</font>

883
00:46:07,270 --> 00:46:12,730
<font color="#E5E5E5">works and how like it</font><font color="#CCCCCC"> makes cellphones</font>

884
00:46:10,510 --> 00:46:15,040
better<font color="#CCCCCC"> then you can do like there is</font>

885
00:46:12,730 --> 00:46:16,900
much<font color="#E5E5E5"> to learning course and could</font><font color="#CCCCCC"> share</font>

886
00:46:15,040 --> 00:46:19,360
<font color="#CCCCCC">about</font><font color="#E5E5E5"> much learning if you want to know</font>

887
00:46:16,900 --> 00:46:21,130
more<font color="#E5E5E5"> about how to</font><font color="#CCCCCC"> train a model</font><font color="#E5E5E5"> you can</font>

888
00:46:19,360 --> 00:46:23,290
do the course<font color="#E5E5E5"> learn about</font>

889
00:46:21,130 --> 00:46:25,330
<font color="#CCCCCC">cross-validation</font><font color="#E5E5E5"> and why should learning</font>

890
00:46:23,290 --> 00:46:28,470
techniques but that we require alone

891
00:46:25,330 --> 00:46:28,470
like semester course

892
00:46:37,550 --> 00:46:52,650
<font color="#E5E5E5">yeah so in the interest of okay so the</font>

893
00:46:50,700 --> 00:46:54,660
question<font color="#CCCCCC"> is how do we know when to get</font>

894
00:46:52,650 --> 00:46:56,610
more training<font color="#E5E5E5"> data or rather than</font>

895
00:46:54,660 --> 00:47:07,379
tweaking<font color="#CCCCCC"> our actual algorithms and the</font>

896
00:46:56,610 --> 00:47:10,020
ranking function like the guy over<font color="#E5E5E5"> there</font>

897
00:47:07,380 --> 00:47:12,870
<font color="#E5E5E5">was saying like the problem with adding</font>

898
00:47:10,020 --> 00:47:15,540
<font color="#CCCCCC">a lot of features</font><font color="#E5E5E5"> is that the risk is</font>

899
00:47:12,870 --> 00:47:19,109
that<font color="#E5E5E5"> you are over feet so that like</font>

900
00:47:15,540 --> 00:47:22,050
<font color="#E5E5E5">basically your model learn like really</font>

901
00:47:19,110 --> 00:47:25,950
how to be good<font color="#CCCCCC"> on your</font><font color="#E5E5E5"> training set but</font>

902
00:47:22,050 --> 00:47:27,540
not<font color="#E5E5E5"> like on doesn't generate a lot so it</font>

903
00:47:25,950 --> 00:47:30,060
doesn't need at<font color="#E5E5E5"> that point it's not able</font>

904
00:47:27,540 --> 00:47:31,890
to predict so that understanding when

905
00:47:30,060 --> 00:47:34,529
you<font color="#CCCCCC"> are like have too many</font><font color="#E5E5E5"> features and</font>

906
00:47:31,890 --> 00:47:37,020
<font color="#CCCCCC">you're overfitting it can be done by</font>

907
00:47:34,530 --> 00:47:38,580
using like a validation data<font color="#E5E5E5"> test that</font>

908
00:47:37,020 --> 00:47:41,100
contains query that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> never seen</font>

909
00:47:38,580 --> 00:47:42,990
<font color="#E5E5E5">before and and then you</font><font color="#CCCCCC"> evaluate your</font>

910
00:47:41,100 --> 00:47:45,240
matrix on this new data set and<font color="#E5E5E5"> you</font>

911
00:47:42,990 --> 00:47:47,279
<font color="#CCCCCC">check the</font><font color="#E5E5E5"> matrix like</font><font color="#CCCCCC"> if the matrix like</font>

912
00:47:45,240 --> 00:47:49,109
<font color="#CCCCCC">drop</font><font color="#E5E5E5"> down and the</font><font color="#CCCCCC"> validation that's it</font>

913
00:47:47,280 --> 00:47:51,270
<font color="#E5E5E5">it means that</font><font color="#CCCCCC"> your model didn't</font>

914
00:47:49,110 --> 00:47:53,790
generalize so it didn't<font color="#CCCCCC"> really learn how</font>

915
00:47:51,270 --> 00:47:55,830
in<font color="#CCCCCC"> general to thank the documents but</font>

916
00:47:53,790 --> 00:47:57,960
it's<font color="#E5E5E5"> just like memorize your training</font>

917
00:47:55,830 --> 00:48:00,960
set<font color="#E5E5E5"> so by doing that you</font><font color="#CCCCCC"> can understand</font>

918
00:47:57,960 --> 00:48:02,940
if you have too many feature<font color="#E5E5E5"> reduce the</font>

919
00:48:00,960 --> 00:48:04,770
feature and then check<font color="#E5E5E5"> the</font><font color="#CCCCCC"> performance</font>

920
00:48:02,940 --> 00:48:11,750
of the model<font color="#E5E5E5"> again if they are not good</font>

921
00:48:04,770 --> 00:48:14,849
you<font color="#E5E5E5"> want to add new examples okay yeah</font>

922
00:48:11,750 --> 00:48:14,849
[Music]

923
00:48:27,600 --> 00:48:33,759
so the question is right now whatever we

924
00:48:31,090 --> 00:48:35,920
demonstrated was on a<font color="#E5E5E5"> document level how</font>

925
00:48:33,760 --> 00:48:39,220
easy it is to extend<font color="#E5E5E5"> it to parts of the</font>

926
00:48:35,920 --> 00:48:40,810
<font color="#CCCCCC">document so</font><font color="#E5E5E5"> most of those things would</font>

927
00:48:39,220 --> 00:48:43,959
depend on how you have actually

928
00:48:40,810 --> 00:48:48,130
structured your<font color="#E5E5E5"> schema if your schema is</font>

929
00:48:43,960 --> 00:48:50,200
structured<font color="#E5E5E5"> that in in your</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> the</font>

930
00:48:48,130 --> 00:48:52,990
document<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> wanna return is like</font>

931
00:48:50,200 --> 00:48:55,750
parts of<font color="#E5E5E5"> the document</font><font color="#CCCCCC"> you can basically</font>

932
00:48:52,990 --> 00:48:57,669
<font color="#E5E5E5">create a field for that and then you can</font>

933
00:48:55,750 --> 00:49:01,300
create<font color="#E5E5E5"> features based on that so that</font>

934
00:48:57,670 --> 00:49:03,730
when you search for<font color="#CCCCCC"> a query whatever</font>

935
00:49:01,300 --> 00:49:07,450
future<font color="#CCCCCC"> value is computed</font><font color="#E5E5E5"> it gets boosted</font>

936
00:49:03,730 --> 00:49:11,140
for<font color="#E5E5E5"> whatever you think is relevant for</font>

937
00:49:07,450 --> 00:49:13,810
example let's say you wanna you have a

938
00:49:11,140 --> 00:49:16,089
part of<font color="#E5E5E5"> the document called as the links</font>

939
00:49:13,810 --> 00:49:18,310
and you one only<font color="#E5E5E5"> want to search on the</font>

940
00:49:16,090 --> 00:49:21,090
links and<font color="#E5E5E5"> not on the rest of the content</font>

941
00:49:18,310 --> 00:49:23,650
of<font color="#E5E5E5"> the document you</font><font color="#CCCCCC"> can basically</font><font color="#E5E5E5"> have a</font>

942
00:49:21,090 --> 00:49:25,840
field in the schema<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> like a list</font>

943
00:49:23,650 --> 00:49:29,380
<font color="#E5E5E5">of links and you can have a feature</font><font color="#CCCCCC"> that</font>

944
00:49:25,840 --> 00:49:32,410
only<font color="#E5E5E5"> looks at the links and you can make</font>

945
00:49:29,380 --> 00:49:35,440
<font color="#E5E5E5">it like maybe</font><font color="#CCCCCC"> so when you're</font><font color="#E5E5E5"> marking the</font>

946
00:49:32,410 --> 00:49:36,670
documents as relevant<font color="#E5E5E5"> you only mark</font><font color="#CCCCCC"> the</font>

947
00:49:35,440 --> 00:49:38,230
documents which have<font color="#E5E5E5"> the link as well</font>

948
00:49:36,670 --> 00:49:42,150
<font color="#CCCCCC">even</font><font color="#E5E5E5"> so it will try to pick</font><font color="#CCCCCC"> up on the</font>

949
00:49:38,230 --> 00:49:42,150
fact<font color="#E5E5E5"> that you're looking at the links</font>

950
00:49:50,550 --> 00:49:55,240
<font color="#E5E5E5">but done inside</font><font color="#CCCCCC"> the blocks of</font><font color="#E5E5E5"> the</font>

951
00:49:53,290 --> 00:49:56,800
document so<font color="#CCCCCC"> you basically retrieve the</font>

952
00:49:55,240 --> 00:49:58,810
document and<font color="#E5E5E5"> then you go you have</font>

953
00:49:56,800 --> 00:50:00,880
another<font color="#E5E5E5"> model that will rank the blocks</font>

954
00:49:58,810 --> 00:50:03,759
inside the documents so<font color="#E5E5E5"> we</font><font color="#CCCCCC"> would rank</font>

955
00:50:00,880 --> 00:50:07,080
them and we'll put hopefully<font color="#CCCCCC"> the block</font>

956
00:50:03,760 --> 00:50:07,080
that<font color="#CCCCCC"> is the one that you want</font>

