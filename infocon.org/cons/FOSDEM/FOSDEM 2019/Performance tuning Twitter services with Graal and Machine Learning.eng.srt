1
00:00:04,640 --> 00:00:10,309
my name is Chris I work for Twitter<font color="#E5E5E5"> this</font>

2
00:00:08,389 --> 00:00:13,879
is a very long<font color="#CCCCCC"> presentation but you know</font>

3
00:00:10,309 --> 00:00:15,200
I just show<font color="#E5E5E5"> you the second</font><font color="#CCCCCC"> half of</font><font color="#E5E5E5"> it</font>

4
00:00:13,880 --> 00:00:16,820
<font color="#E5E5E5">because that's the interesting part so</font>

5
00:00:15,200 --> 00:00:19,520
I'm assuming<font color="#E5E5E5"> everyone in the room knows</font>

6
00:00:16,820 --> 00:00:22,720
<font color="#E5E5E5">what Bayesian optimization is</font><font color="#CCCCCC"> very good</font>

7
00:00:19,520 --> 00:00:22,720
<font color="#E5E5E5">so I don't have to explain it</font>

8
00:00:23,380 --> 00:00:28,549
yes<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to skip a lot of slides</font>

9
00:00:26,840 --> 00:00:30,650
here<font color="#CCCCCC"> so you guys know what</font><font color="#E5E5E5"> Twitter is</font>

10
00:00:28,550 --> 00:00:34,180
we've run on micro<font color="#E5E5E5"> services and we have</font>

11
00:00:30,650 --> 00:00:39,589
<font color="#CCCCCC">a lot of them and so</font><font color="#E5E5E5"> this talk is</font><font color="#CCCCCC"> about</font>

12
00:00:34,180 --> 00:00:42,920
<font color="#E5E5E5">we're using</font><font color="#CCCCCC"> draw to run our</font><font color="#E5E5E5"> mostly and</font>

13
00:00:39,589 --> 00:00:45,970
<font color="#E5E5E5">Scala written services and with and and</font>

14
00:00:42,920 --> 00:00:48,350
by using<font color="#E5E5E5"> draw we we save a lot</font><font color="#CCCCCC"> of CPU so</font>

15
00:00:45,970 --> 00:00:50,659
what we also<font color="#CCCCCC"> have is something</font><font color="#E5E5E5"> called</font>

16
00:00:48,350 --> 00:00:52,070
<font color="#CCCCCC">I'm not sure if that</font><font color="#E5E5E5"> will come</font><font color="#CCCCCC"> up yeah</font>

17
00:00:50,659 --> 00:00:55,449
<font color="#E5E5E5">so we have something that's called</font>

18
00:00:52,070 --> 00:00:59,030
<font color="#CCCCCC">auto-tune it's basically a framework</font>

19
00:00:55,449 --> 00:01:01,699
<font color="#E5E5E5">that's using the evasion optimization as</font>

20
00:00:59,030 --> 00:01:05,000
a machine<font color="#E5E5E5"> learning framework to tune JVM</font>

21
00:01:01,699 --> 00:01:06,830
parameters and so we can pass in to

22
00:01:05,000 --> 00:01:09,440
<font color="#E5E5E5">auto-tune we say Oh tune this parameter</font>

23
00:01:06,830 --> 00:01:11,990
for me and then auto-tune talks to the

24
00:01:09,440 --> 00:01:14,899
Bayesian optimization part which is wet

25
00:01:11,990 --> 00:01:17,240
<font color="#CCCCCC">lap that's there's also an open-source</font>

26
00:01:14,900 --> 00:01:19,130
version of it<font color="#CCCCCC"> called spearmint</font><font color="#E5E5E5"> if ever</font>

27
00:01:17,240 --> 00:01:21,890
anyone has ever heard of it

28
00:01:19,130 --> 00:01:30,110
and so then spearmint or wet lab figures

29
00:01:21,890 --> 00:01:32,360
out the<font color="#E5E5E5"> next the next you confuse</font><font color="#CCCCCC"> me the</font>

30
00:01:30,110 --> 00:01:34,130
neck the next<font color="#E5E5E5"> value of the parameter to</font>

31
00:01:32,360 --> 00:01:35,929
try to explore the<font color="#E5E5E5"> space and then find</font>

32
00:01:34,130 --> 00:01:38,990
<font color="#E5E5E5">the optimum via the optimal</font>

33
00:01:35,930 --> 00:01:40,880
configuration<font color="#E5E5E5"> so it's a driver</font><font color="#CCCCCC"> auto tune</font>

34
00:01:38,990 --> 00:01:44,690
is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> drive it to run these experiments</font>

35
00:01:40,880 --> 00:01:47,750
<font color="#E5E5E5">and people know what growl is so I skip</font>

36
00:01:44,690 --> 00:01:49,310
that<font color="#E5E5E5"> you can watch this</font><font color="#CCCCCC"> on youtube if</font>

37
00:01:47,750 --> 00:01:50,780
you<font color="#CCCCCC"> want and so these are</font><font color="#E5E5E5"> the parameters</font>

38
00:01:49,310 --> 00:01:52,400
<font color="#CCCCCC">that iTunes</font>

39
00:01:50,780 --> 00:01:54,680
there's there's<font color="#CCCCCC"> one called trivial</font>

40
00:01:52,400 --> 00:01:57,650
<font color="#CCCCCC">inlining</font><font color="#E5E5E5"> size so that's the size it's</font>

41
00:01:54,680 --> 00:01:59,630
<font color="#CCCCCC">the default it's ten if a</font><font color="#E5E5E5"> graphic</font>

42
00:01:57,650 --> 00:02:01,280
<font color="#CCCCCC">compiler</font><font color="#E5E5E5"> graph of an inline</font><font color="#CCCCCC"> e is smaller</font>

43
00:01:59,630 --> 00:02:03,920
than<font color="#CCCCCC"> ten nodes it just in lines it</font>

44
00:02:01,280 --> 00:02:05,420
<font color="#E5E5E5">without looking</font><font color="#CCCCCC"> at any</font><font color="#E5E5E5"> other data then</font>

45
00:02:03,920 --> 00:02:07,700
there's a maximum<font color="#CCCCCC"> in line size</font><font color="#E5E5E5"> so it's</font>

46
00:02:05,420 --> 00:02:10,128
the<font color="#E5E5E5"> other end basically if it's bigger</font>

47
00:02:07,700 --> 00:02:11,420
than 300 doesn't<font color="#CCCCCC"> inline it and then</font>

48
00:02:10,128 --> 00:02:14,899
there's<font color="#CCCCCC"> something called small compared</font>

49
00:02:11,420 --> 00:02:16,910
to low level graph size it's similar<font color="#E5E5E5"> to</font>

50
00:02:14,900 --> 00:02:17,670
<font color="#E5E5E5">the second one but it's just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> low-level</font>

51
00:02:16,910 --> 00:02:19,230
graph

52
00:02:17,670 --> 00:02:21,929
so don't<font color="#E5E5E5"> worry too</font><font color="#CCCCCC"> much about</font><font color="#E5E5E5"> it what it</font>

53
00:02:19,230 --> 00:02:26,160
<font color="#CCCCCC">does</font><font color="#E5E5E5"> but these three parameters</font><font color="#CCCCCC"> are the</font>

54
00:02:21,930 --> 00:02:29,220
ones<font color="#CCCCCC"> that</font><font color="#E5E5E5"> affect in lining the most all</font>

55
00:02:26,160 --> 00:02:31,590
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so I did</font><font color="#CCCCCC"> some previous work I have</font>

56
00:02:29,220 --> 00:02:34,560
<font color="#E5E5E5">another talk where I explain</font><font color="#CCCCCC"> how cool</font>

57
00:02:31,590 --> 00:02:36,150
<font color="#E5E5E5">growl is and how much CPU</font><font color="#CCCCCC"> we're saving</font>

58
00:02:34,560 --> 00:02:40,890
and so these<font color="#CCCCCC"> are</font><font color="#E5E5E5"> two slides from my</font>

59
00:02:36,150 --> 00:02:45,269
<font color="#E5E5E5">previous talk a look at blue and orange</font>

60
00:02:40,890 --> 00:02:48,750
basically so this one<font color="#E5E5E5"> and down here</font><font color="#CCCCCC"> like</font>

61
00:02:45,269 --> 00:02:52,530
<font color="#E5E5E5">just using draw instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> C to running</font>

62
00:02:48,750 --> 00:02:57,060
our our stuff we can reduce parallel<font color="#CCCCCC"> GC</font>

63
00:02:52,530 --> 00:02:59,519
cycles by about 3.8 4.2 percent<font color="#E5E5E5"> no</font>

64
00:02:57,060 --> 00:03:03,180
actually no yes<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> four one two and</font>

65
00:02:59,519 --> 00:03:07,200
what I did when<font color="#CCCCCC"> I ran this</font><font color="#E5E5E5"> a year ago I</font>

66
00:03:03,180 --> 00:03:09,600
<font color="#CCCCCC">think I manually tried to change the</font>

67
00:03:07,200 --> 00:03:12,119
<font color="#E5E5E5">three</font><font color="#CCCCCC"> parameters you just saw</font><font color="#E5E5E5"> to figure</font>

68
00:03:09,600 --> 00:03:14,100
<font color="#E5E5E5">out if we</font><font color="#CCCCCC"> can get better performance out</font>

69
00:03:12,120 --> 00:03:15,780
of it and so what I was able to do by

70
00:03:14,100 --> 00:03:18,150
<font color="#CCCCCC">sitting down an afternoon and trying</font>

71
00:03:15,780 --> 00:03:22,910
this for<font color="#CCCCCC"> two</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> hours I could reduce</font>

72
00:03:18,150 --> 00:03:26,549
it by<font color="#E5E5E5"> 1.5 percent and I did the same for</font>

73
00:03:22,910 --> 00:03:29,340
<font color="#E5E5E5">CPU time so basically by just running</font>

74
00:03:26,549 --> 00:03:31,530
<font color="#E5E5E5">raw we can reduce CPU utilization by</font><font color="#CCCCCC"> 13%</font>

75
00:03:29,340 --> 00:03:34,440
which<font color="#E5E5E5"> is a lot and saves us a lot</font><font color="#CCCCCC"> of</font>

76
00:03:31,530 --> 00:03:36,239
money<font color="#E5E5E5"> and I could squeeze out</font><font color="#CCCCCC"> another 2%</font>

77
00:03:34,440 --> 00:03:38,040
<font color="#CCCCCC">by</font><font color="#E5E5E5"> manually fiddling around with these</font>

78
00:03:36,239 --> 00:03:40,799
but you<font color="#E5E5E5"> don't want to do this manually</font>

79
00:03:38,040 --> 00:03:42,810
for every service you want<font color="#E5E5E5"> a machine</font>

80
00:03:40,799 --> 00:03:47,160
learning framework to do<font color="#E5E5E5"> this for you</font>

81
00:03:42,810 --> 00:03:49,380
right<font color="#E5E5E5"> so that's exactly</font><font color="#CCCCCC"> what this</font><font color="#E5E5E5"> is so</font>

82
00:03:47,160 --> 00:03:51,329
this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> configuration but it's</font><font color="#CCCCCC"> a</font>

83
00:03:49,380 --> 00:03:53,850
<font color="#CCCCCC">JSON file that you pass</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> to Autotune</font>

84
00:03:51,329 --> 00:03:56,790
<font color="#E5E5E5">that's basically the parameter and then</font>

85
00:03:53,850 --> 00:03:58,560
you tell it<font color="#CCCCCC"> the range from where to</font>

86
00:03:56,790 --> 00:04:01,620
where it should<font color="#E5E5E5"> you know explore the</font>

87
00:03:58,560 --> 00:04:03,660
space you<font color="#E5E5E5"> don't really have to specify</font>

88
00:04:01,620 --> 00:04:06,540
<font color="#E5E5E5">that you could</font><font color="#CCCCCC"> i've ran experiments</font>

89
00:04:03,660 --> 00:04:08,579
<font color="#CCCCCC">after this where I</font><font color="#E5E5E5"> just said</font><font color="#CCCCCC"> 1 to 1000</font>

90
00:04:06,540 --> 00:04:10,739
right<font color="#E5E5E5"> because it doesn't</font><font color="#CCCCCC"> matter the the</font>

91
00:04:08,579 --> 00:04:15,000
<font color="#E5E5E5">framework will figure out what the right</font>

92
00:04:10,739 --> 00:04:17,639
parameters<font color="#E5E5E5"> are I just used a range here</font>

93
00:04:15,000 --> 00:04:19,829
<font color="#E5E5E5">because I wanted it to work</font><font color="#CCCCCC"> for the talk</font>

94
00:04:17,639 --> 00:04:22,169
but I'll<font color="#E5E5E5"> probably rerun the experiments</font>

95
00:04:19,829 --> 00:04:24,450
and just set<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to 1 to 1000 and let it</font>

96
00:04:22,169 --> 00:04:27,930
figure it<font color="#E5E5E5"> out itself so the test setup</font>

97
00:04:24,450 --> 00:04:29,760
is I have dedicated<font color="#E5E5E5"> machines there's</font>

98
00:04:27,930 --> 00:04:31,560
nothing else running<font color="#E5E5E5"> on them because</font>

99
00:04:29,760 --> 00:04:33,139
crosstalk is a big issue when

100
00:04:31,560 --> 00:04:37,290
when I do this performance<font color="#E5E5E5"> evaluations</font>

101
00:04:33,139 --> 00:04:39,389
<font color="#CCCCCC">all instances receive the exact same</font>

102
00:04:37,290 --> 00:04:41,430
requests<font color="#E5E5E5"> that's important it's</font><font color="#CCCCCC"> not the</font>

103
00:04:39,389 --> 00:04:43,200
same number<font color="#CCCCCC"> of requests it's exact same</font>

104
00:04:41,430 --> 00:04:45,600
<font color="#E5E5E5">request because</font><font color="#CCCCCC"> a tweet could</font>

105
00:04:43,200 --> 00:04:47,190
potentially be<font color="#E5E5E5"> one character 280 long</font>

106
00:04:45,600 --> 00:04:49,200
and then that would affect<font color="#E5E5E5"> memory</font>

107
00:04:47,190 --> 00:04:51,330
allocation a lot and it would change<font color="#E5E5E5"> the</font>

108
00:04:49,200 --> 00:04:53,880
outcome<font color="#CCCCCC"> we're running with</font><font color="#E5E5E5"> this version</font>

109
00:04:51,330 --> 00:04:55,919
<font color="#E5E5E5">of growl default tiered</font><font color="#CCCCCC"> setup c1</font><font color="#E5E5E5"> and</font>

110
00:04:53,880 --> 00:04:59,730
growl so that's there's nothing we

111
00:04:55,919 --> 00:05:01,620
change here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the first experiment is</font>

112
00:04:59,730 --> 00:05:02,669
the tweet service I have to<font color="#E5E5E5"> experience</font>

113
00:05:01,620 --> 00:05:05,310
I'm not<font color="#CCCCCC"> sure if I can</font><font color="#E5E5E5"> show you the</font>

114
00:05:02,669 --> 00:05:06,900
second one<font color="#CCCCCC"> too</font><font color="#E5E5E5"> because of time the tweet</font>

115
00:05:05,310 --> 00:05:10,710
service<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically reading and writing</font>

116
00:05:06,900 --> 00:05:12,630
tweets<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> built in on</font><font color="#CCCCCC"> fin naval it's a</font>

117
00:05:10,710 --> 00:05:14,159
framework<font color="#E5E5E5"> an</font><font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> framework that</font>

118
00:05:12,630 --> 00:05:16,889
we developed and<font color="#E5E5E5"> you can get it on</font>

119
00:05:14,160 --> 00:05:18,600
github<font color="#E5E5E5"> if you want it's an extensive RPC</font>

120
00:05:16,889 --> 00:05:20,010
system for the TV<font color="#CCCCCC"> am used</font><font color="#E5E5E5"> to construct</font><font color="#CCCCCC"> a</font>

121
00:05:18,600 --> 00:05:21,720
<font color="#E5E5E5">concurrency service blah blah blah</font><font color="#CCCCCC"> I</font>

122
00:05:20,010 --> 00:05:24,900
have no idea what it is<font color="#CCCCCC"> but the most</font>

123
00:05:21,720 --> 00:05:28,500
<font color="#E5E5E5">important part is</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> 92</font><font color="#CCCCCC"> percent</font><font color="#E5E5E5"> written</font>

124
00:05:24,900 --> 00:05:32,219
in Scala and<font color="#CCCCCC"> grog can handle scallop</font>

125
00:05:28,500 --> 00:05:35,100
very well because color allocates a lot

126
00:05:32,220 --> 00:05:37,919
of<font color="#E5E5E5"> temporary objects and grows in lining</font>

127
00:05:35,100 --> 00:05:40,050
<font color="#E5E5E5">and escape analysis are just better</font><font color="#CCCCCC"> than</font>

128
00:05:37,919 --> 00:05:43,500
what<font color="#CCCCCC"> c2 has and</font><font color="#E5E5E5"> that's why we can reduce</font>

129
00:05:40,050 --> 00:05:46,700
the memory<font color="#E5E5E5"> allocation rate reduced</font><font color="#CCCCCC"> UC</font>

130
00:05:43,500 --> 00:05:49,620
cycles reduce CPU utilization and<font color="#E5E5E5"> so on</font>

131
00:05:46,700 --> 00:05:53,340
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so you have to pass in an objective</font>

132
00:05:49,620 --> 00:05:56,760
<font color="#E5E5E5">right in this case</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> time</font>

133
00:05:53,340 --> 00:06:00,750
<font color="#E5E5E5">and since the</font><font color="#CCCCCC"> auto-tuned framework looks</font>

134
00:05:56,760 --> 00:06:02,789
<font color="#E5E5E5">for a Maxima we invert this one to find</font>

135
00:06:00,750 --> 00:06:06,570
you know<font color="#E5E5E5"> the configuration that uses the</font>

136
00:06:02,789 --> 00:06:09,060
least CPU and then you can specify<font color="#E5E5E5"> some</font>

137
00:06:06,570 --> 00:06:13,560
constraints in this case it's<font color="#CCCCCC"> something</font>

138
00:06:09,060 --> 00:06:17,039
<font color="#E5E5E5">so we run on Aurora</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> mesas or the</font>

139
00:06:13,560 --> 00:06:18,389
other<font color="#E5E5E5"> one in Aurora on mesas and there's</font>

140
00:06:17,039 --> 00:06:19,889
something<font color="#E5E5E5"> called when you get throttled</font>

141
00:06:18,389 --> 00:06:22,500
it's basically because<font color="#E5E5E5"> you're using too</font>

142
00:06:19,889 --> 00:06:24,440
much<font color="#CCCCCC"> CPU then it kills you and so that's</font>

143
00:06:22,500 --> 00:06:28,229
<font color="#CCCCCC">basically our constraint we say</font><font color="#E5E5E5"> if</font>

144
00:06:24,440 --> 00:06:29,880
because if you<font color="#CCCCCC"> tuned sometimes you and</font><font color="#E5E5E5"> I</font>

145
00:06:28,229 --> 00:06:33,120
<font color="#E5E5E5">noticed that when I was tuning it</font>

146
00:06:29,880 --> 00:06:35,310
manually<font color="#E5E5E5"> that sometimes you specify some</font>

147
00:06:33,120 --> 00:06:37,650
values<font color="#E5E5E5"> where the service doesn't even</font>

148
00:06:35,310 --> 00:06:41,940
come<font color="#CCCCCC"> up because</font><font color="#E5E5E5"> they're just too wild</font>

149
00:06:37,650 --> 00:06:44,090
<font color="#CCCCCC">and so we have to put in a constraint so</font>

150
00:06:41,940 --> 00:06:47,660
that we know if we<font color="#E5E5E5"> win</font>

151
00:06:44,090 --> 00:06:50,960
too<font color="#E5E5E5"> far so this is 24 hours of</font><font color="#CCCCCC"> doing an</font>

152
00:06:47,660 --> 00:06:52,820
<font color="#E5E5E5">experiment an experiment what one is</font>

153
00:06:50,960 --> 00:06:57,530
<font color="#E5E5E5">only 30 minutes long it's called an</font>

154
00:06:52,820 --> 00:06:59,599
evaluation and I I picked 30 minutes

155
00:06:57,530 --> 00:07:01,388
because<font color="#E5E5E5"> it's long</font><font color="#CCCCCC"> enough for the tweet</font>

156
00:06:59,600 --> 00:07:05,180
service to actually reach a steady state

157
00:07:01,389 --> 00:07:08,360
<font color="#CCCCCC">and I wanted</font><font color="#E5E5E5"> to have a lot of</font><font color="#CCCCCC"> evaluation</font>

158
00:07:05,180 --> 00:07:10,600
<font color="#CCCCCC">so that we see how auto-tune really</font>

159
00:07:08,360 --> 00:07:12,650
works<font color="#CCCCCC"> so as you can see</font><font color="#E5E5E5"> this is just</font>

160
00:07:10,600 --> 00:07:15,800
<font color="#E5E5E5">request for a second and it's the same</font>

161
00:07:12,650 --> 00:07:18,560
<font color="#E5E5E5">fall services for the two instances</font><font color="#CCCCCC"> and</font>

162
00:07:15,800 --> 00:07:20,720
this is use of CPU time<font color="#E5E5E5"> so the</font>

163
00:07:18,560 --> 00:07:23,690
<font color="#E5E5E5">experiment this blue and the control</font>

164
00:07:20,720 --> 00:07:25,700
which doesn't change<font color="#CCCCCC"> is orange</font><font color="#E5E5E5"> and if</font>

165
00:07:23,690 --> 00:07:27,590
blue the blue line is<font color="#CCCCCC"> below the orange</font>

166
00:07:25,700 --> 00:07:30,020
one that<font color="#CCCCCC"> means</font><font color="#E5E5E5"> we see an improvement</font><font color="#CCCCCC"> and</font>

167
00:07:27,590 --> 00:07:31,638
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> above</font><font color="#E5E5E5"> and it's worse</font><font color="#CCCCCC"> I have the</font>

168
00:07:30,020 --> 00:07:34,070
same graph slightly different here<font color="#CCCCCC"> it's</font>

169
00:07:31,639 --> 00:07:35,450
a little easier<font color="#E5E5E5"> to see you know every</font>

170
00:07:34,070 --> 00:07:37,810
<font color="#E5E5E5">time when it's</font><font color="#CCCCCC"> below it's better when</font>

171
00:07:35,450 --> 00:07:42,169
it's above it's worse<font color="#E5E5E5"> and the result</font>

172
00:07:37,810 --> 00:07:43,700
when this was done<font color="#E5E5E5"> looks like this it's</font>

173
00:07:42,169 --> 00:07:45,919
a web page it<font color="#E5E5E5"> shows you all</font><font color="#CCCCCC"> the</font>

174
00:07:43,700 --> 00:07:49,010
experiments<font color="#E5E5E5"> and then this one's the</font><font color="#CCCCCC"> best</font>

175
00:07:45,919 --> 00:07:51,469
one<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you see the objectives is one</font>

176
00:07:49,010 --> 00:07:54,289
point<font color="#CCCCCC"> zero eight three eight that means</font>

177
00:07:51,470 --> 00:07:57,440
<font color="#E5E5E5">we could improve CPU utilization by over</font>

178
00:07:54,289 --> 00:07:59,750
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> percent and these are the</font>

179
00:07:57,440 --> 00:08:01,550
<font color="#CCCCCC">parameters you remember you know I said</font>

180
00:07:59,750 --> 00:08:04,400
<font color="#CCCCCC">ten to twenty five this</font><font color="#E5E5E5"> was by default</font>

181
00:08:01,550 --> 00:08:06,680
<font color="#CCCCCC">ten</font><font color="#E5E5E5"> this was default 300 and this was</font>

182
00:08:04,400 --> 00:08:09,349
default 300 so if you use these

183
00:08:06,680 --> 00:08:12,830
<font color="#CCCCCC">parameters then</font><font color="#E5E5E5"> you get eight percent</font>

184
00:08:09,350 --> 00:08:15,169
less CPU<font color="#E5E5E5"> and the bottom of the pay of</font>

185
00:08:12,830 --> 00:08:17,330
the<font color="#E5E5E5"> table looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this we have three</font>

186
00:08:15,169 --> 00:08:18,710
ones that violated<font color="#E5E5E5"> the constraint</font><font color="#CCCCCC"> with</font>

187
00:08:17,330 --> 00:08:21,050
one<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> still in progress when I shut</font>

188
00:08:18,710 --> 00:08:22,849
down<font color="#E5E5E5"> the experiment and as you can</font><font color="#CCCCCC"> see</font>

189
00:08:21,050 --> 00:08:24,620
there are these that were worse like

190
00:08:22,850 --> 00:08:29,960
this one's almost<font color="#CCCCCC"> five</font><font color="#E5E5E5"> percent worse and</font>

191
00:08:24,620 --> 00:08:32,240
like three percent worse now these these

192
00:08:29,960 --> 00:08:35,208
are charts<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> three parameters it's</font>

193
00:08:32,240 --> 00:08:37,250
a I'm showing them<font color="#E5E5E5"> it's not perfect</font>

194
00:08:35,208 --> 00:08:38,689
<font color="#E5E5E5">because it's a</font><font color="#CCCCCC"> three dimensional space</font>

195
00:08:37,250 --> 00:08:40,070
we're exploring<font color="#CCCCCC"> because we have three</font>

196
00:08:38,690 --> 00:08:41,510
parameters<font color="#E5E5E5"> and you know with the</font><font color="#CCCCCC"> n</font>

197
00:08:40,070 --> 00:08:44,750
<font color="#CCCCCC">dimensional if you have</font><font color="#E5E5E5"> whatever</font>

198
00:08:41,510 --> 00:08:48,560
parameters<font color="#CCCCCC"> but it can give you a picture</font>

199
00:08:44,750 --> 00:08:51,080
<font color="#E5E5E5">every point in here every data point all</font>

200
00:08:48,560 --> 00:08:53,839
depends on two other parameters<font color="#CCCCCC"> so you</font>

201
00:08:51,080 --> 00:08:55,880
<font color="#E5E5E5">know keep that in mind but if you squint</font>

202
00:08:53,839 --> 00:08:57,589
a little<font color="#CCCCCC"> bit you can see that there's</font>

203
00:08:55,880 --> 00:08:58,010
actually<font color="#CCCCCC"> a trend</font><font color="#E5E5E5"> going up so if</font><font color="#CCCCCC"> you</font>

204
00:08:57,589 --> 00:09:00,470
increase

205
00:08:58,010 --> 00:09:03,260
trivial<font color="#CCCCCC"> inlining sighs you you get a</font>

206
00:09:00,470 --> 00:09:05,660
little<font color="#E5E5E5"> faster if you if you do more but</font>

207
00:09:03,260 --> 00:09:10,340
at some point<font color="#CCCCCC"> that's too much and it's</font>

208
00:09:05,660 --> 00:09:14,900
coming back<font color="#E5E5E5"> down and this is maximum</font><font color="#CCCCCC"> in</font>

209
00:09:10,340 --> 00:09:17,600
<font color="#CCCCCC">lining size</font><font color="#E5E5E5"> it's kind of flat and then</font>

210
00:09:14,900 --> 00:09:19,520
<font color="#E5E5E5">this one we do you don't really have to</font>

211
00:09:17,600 --> 00:09:22,670
squint to<font color="#CCCCCC"> see what's</font><font color="#E5E5E5"> going on so if you</font>

212
00:09:19,520 --> 00:09:25,970
and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> one's by default 300s we</font><font color="#E5E5E5"> would</font>

213
00:09:22,670 --> 00:09:28,189
be in<font color="#E5E5E5"> that</font><font color="#CCCCCC"> area and we can</font><font color="#E5E5E5"> improve</font><font color="#CCCCCC"> it by</font>

214
00:09:25,970 --> 00:09:30,320
that<font color="#E5E5E5"> much if we</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> increase that</font>

215
00:09:28,190 --> 00:09:32,720
value<font color="#CCCCCC"> I didn't look at the</font><font color="#E5E5E5"> time how much</font>

216
00:09:30,320 --> 00:09:36,230
<font color="#CCCCCC">tender have left with all the stuff in</font>

217
00:09:32,720 --> 00:09:40,730
the beginning<font color="#CCCCCC"> okay so what I what I did</font>

218
00:09:36,230 --> 00:09:43,790
then<font color="#E5E5E5"> to verify the result was I</font><font color="#CCCCCC"> took the</font>

219
00:09:40,730 --> 00:09:45,890
parameters<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> the top one and ran</font>

220
00:09:43,790 --> 00:09:47,449
a<font color="#CCCCCC"> 24-hour experiment I also call it</font>

221
00:09:45,890 --> 00:09:50,240
experiment but<font color="#CCCCCC"> basically a verification</font>

222
00:09:47,450 --> 00:09:53,120
experiment<font color="#E5E5E5"> I just ran the tweet service</font>

223
00:09:50,240 --> 00:09:56,080
for 24 hours with<font color="#E5E5E5"> c2 growl and then</font><font color="#CCCCCC"> Gras</font>

224
00:09:53,120 --> 00:09:59,870
with the<font color="#CCCCCC"> auto-tune</font><font color="#E5E5E5"> parameters in red</font>

225
00:09:56,080 --> 00:10:03,050
this<font color="#E5E5E5"> is again PS scavenge cycles because</font>

226
00:09:59,870 --> 00:10:05,750
tweet services using parallel GC<font color="#E5E5E5"> and as</font>

227
00:10:03,050 --> 00:10:09,589
you've<font color="#CCCCCC"> seen earlier</font><font color="#E5E5E5"> in this particular</font>

228
00:10:05,750 --> 00:10:11,260
run it was<font color="#E5E5E5"> 3.4 percent less GCS and with</font>

229
00:10:09,590 --> 00:10:17,090
the<font color="#E5E5E5"> auto-tune parameters we could</font>

230
00:10:11,260 --> 00:10:19,430
increase<font color="#CCCCCC"> that</font><font color="#E5E5E5"> by 3.5 so in total</font><font color="#CCCCCC"> we can</font>

231
00:10:17,090 --> 00:10:21,500
<font color="#E5E5E5">roughly reduce GC cycles for</font><font color="#CCCCCC"> seven</font>

232
00:10:19,430 --> 00:10:23,839
<font color="#E5E5E5">percent and the funny</font><font color="#CCCCCC"> thing here is that</font>

233
00:10:21,500 --> 00:10:28,160
we that auto-tune actually squeeze more

234
00:10:23,840 --> 00:10:31,370
out of it than it<font color="#CCCCCC"> did by default and the</font>

235
00:10:28,160 --> 00:10:33,709
same graph yeah it's it's<font color="#E5E5E5"> it's basically</font>

236
00:10:31,370 --> 00:10:35,930
<font color="#E5E5E5">the same graph as</font><font color="#CCCCCC"> the one before I'm</font>

237
00:10:33,710 --> 00:10:39,080
just<font color="#E5E5E5"> showing this one it's allocated</font>

238
00:10:35,930 --> 00:10:42,079
<font color="#E5E5E5">bytes per tweet and it's very flat over</font>

239
00:10:39,080 --> 00:10:43,490
24 hours<font color="#CCCCCC"> and you see</font><font color="#E5E5E5"> the obviously the</font>

240
00:10:42,080 --> 00:10:47,450
exact same improvement here through your

241
00:10:43,490 --> 00:10:50,390
<font color="#E5E5E5">advisor bhun</font><font color="#CCCCCC"> for 7% roughly and this is</font>

242
00:10:47,450 --> 00:10:53,630
<font color="#CCCCCC">user CPU time as you've seen in</font><font color="#E5E5E5"> the</font>

243
00:10:50,390 --> 00:10:55,730
<font color="#CCCCCC">beginning that's about 12% ish in that</font>

244
00:10:53,630 --> 00:10:57,800
particular run well it varies a little

245
00:10:55,730 --> 00:11:01,160
bit<font color="#E5E5E5"> and with autotune</font>

246
00:10:57,800 --> 00:11:06,439
we can bring that<font color="#CCCCCC"> down and not</font><font color="#E5E5E5"> a 6.2</font>

247
00:11:01,160 --> 00:11:08,569
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> which gets us</font><font color="#CCCCCC"> to 18%</font><font color="#E5E5E5"> less CPU we</font>

248
00:11:06,440 --> 00:11:11,820
<font color="#CCCCCC">have</font><font color="#E5E5E5"> our own data centers we have we own</font>

249
00:11:08,570 --> 00:11:14,280
our own<font color="#E5E5E5"> machines but even in the cloud</font>

250
00:11:11,820 --> 00:11:17,580
if here if you can run your<font color="#CCCCCC"> business</font>

251
00:11:14,280 --> 00:11:19,560
with 18%<font color="#E5E5E5"> less machines it's a lot</font><font color="#CCCCCC"> of</font>

252
00:11:17,580 --> 00:11:21,360
money<font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> have to spend and also</font>

253
00:11:19,560 --> 00:11:23,010
<font color="#E5E5E5">you know you save electricity you're</font>

254
00:11:21,360 --> 00:11:24,930
safe<font color="#E5E5E5"> on cooling Bob about</font><font color="#CCCCCC"> all that</font><font color="#E5E5E5"> stuff</font>

255
00:11:23,010 --> 00:11:29,970
<font color="#CCCCCC">so we're actually trying</font><font color="#E5E5E5"> to save the</font>

256
00:11:24,930 --> 00:11:33,930
world<font color="#E5E5E5"> here right then</font>

257
00:11:29,970 --> 00:11:37,440
this is latency p99 latency for for

258
00:11:33,930 --> 00:11:39,660
tweets<font color="#E5E5E5"> and you can see it's it's</font>

259
00:11:37,440 --> 00:11:42,030
<font color="#E5E5E5">certainly growl is certainly better it's</font>

260
00:11:39,660 --> 00:11:45,000
a little hard<font color="#E5E5E5"> to tell how much it really</font>

261
00:11:42,030 --> 00:11:47,730
<font color="#E5E5E5">is auto-tune looks like this it's</font>

262
00:11:45,000 --> 00:11:49,170
certainly better but you know<font color="#E5E5E5"> again hard</font>

263
00:11:47,730 --> 00:11:52,380
to tell how<font color="#E5E5E5"> much it is so what I did was</font>

264
00:11:49,170 --> 00:11:54,810
I was integrating over the over the<font color="#CCCCCC"> GC</font>

265
00:11:52,380 --> 00:11:57,390
<font color="#E5E5E5">times of 24 hours and that's that's the</font>

266
00:11:54,810 --> 00:12:00,719
graph of that<font color="#CCCCCC"> and as</font><font color="#E5E5E5"> you can see we can</font>

267
00:11:57,390 --> 00:12:04,290
reduce<font color="#E5E5E5"> p99</font><font color="#CCCCCC"> late and</font><font color="#E5E5E5"> C's by 19% but just</font>

268
00:12:00,720 --> 00:12:07,650
using<font color="#CCCCCC"> draw</font><font color="#E5E5E5"> and then another 8% by using</font>

269
00:12:04,290 --> 00:12:12,150
the auto-tune parameters so<font color="#E5E5E5"> 28% means</font>

270
00:12:07,650 --> 00:12:14,449
you get<font color="#E5E5E5"> your tweet 20% faster and you</font>

271
00:12:12,150 --> 00:12:17,880
should tweet<font color="#CCCCCC"> that</font>

272
00:12:14,450 --> 00:12:20,520
so I<font color="#E5E5E5"> think I have</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> minutes left so I'll</font>

273
00:12:17,880 --> 00:12:24,210
skip this<font color="#CCCCCC"> one it's</font><font color="#E5E5E5"> basically the same</font>

274
00:12:20,520 --> 00:12:25,890
with a different service<font color="#E5E5E5"> let's just go</font>

275
00:12:24,210 --> 00:12:27,240
through<font color="#E5E5E5"> these so you've seen all that</font>

276
00:12:25,890 --> 00:12:27,780
<font color="#E5E5E5">blah blah blah I would say the same</font>

277
00:12:27,240 --> 00:12:35,220
<font color="#CCCCCC">thing</font>

278
00:12:27,780 --> 00:12:37,770
you 7.6%<font color="#CCCCCC"> and yeah these graphs you've</font>

279
00:12:35,220 --> 00:12:41,100
seen them before<font color="#E5E5E5"> looks similar the run</font>

280
00:12:37,770 --> 00:12:44,520
<font color="#E5E5E5">one point six three point five that's</font>

281
00:12:41,100 --> 00:12:46,080
interesting that<font color="#E5E5E5"> just draw reduces</font><font color="#CCCCCC"> it GC</font>

282
00:12:44,520 --> 00:12:48,120
cycles only<font color="#E5E5E5"> by one point six percent but</font>

283
00:12:46,080 --> 00:13:02,030
<font color="#E5E5E5">then auto-tune gets another 3.5 out</font><font color="#CCCCCC"> of</font>

284
00:12:48,120 --> 00:13:04,110
it yes it did<font color="#E5E5E5"> it did here no here 23 398</font>

285
00:13:02,030 --> 00:13:08,220
646 I can't remember<font color="#E5E5E5"> that once before</font>

286
00:13:04,110 --> 00:13:13,290
but yeah they were<font color="#E5E5E5"> different</font><font color="#CCCCCC"> scroll</font>

287
00:13:08,220 --> 00:13:17,880
Scroll scroll we've seen this<font color="#E5E5E5"> GC</font><font color="#CCCCCC"> cycles</font>

288
00:13:13,290 --> 00:13:19,560
CPU time<font color="#E5E5E5"> so if that graph that</font><font color="#CCCCCC"> a service</font>

289
00:13:17,880 --> 00:13:25,439
is<font color="#E5E5E5"> also built on top of finding but</font>

290
00:13:19,560 --> 00:13:25,949
certainly not<font color="#E5E5E5"> as CPU sensitive I'm not</font>

291
00:13:25,440 --> 00:13:29,550
sure<font color="#E5E5E5"> what</font>

292
00:13:25,950 --> 00:13:31,710
but we could<font color="#CCCCCC"> only reduce CPU by</font><font color="#E5E5E5"> 5.5 but</font>

293
00:13:29,550 --> 00:13:35,040
just<font color="#E5E5E5"> using</font><font color="#CCCCCC"> Gras you know compared to 12</font>

294
00:13:31,710 --> 00:13:37,320
for<font color="#E5E5E5"> the tweet service and without a</font><font color="#CCCCCC"> tool</font>

295
00:13:35,040 --> 00:13:39,480
we could reduce<font color="#CCCCCC"> that by</font><font color="#E5E5E5"> 7 point 8</font>

296
00:13:37,320 --> 00:13:41,430
percent<font color="#E5E5E5"> and I think the reason why this</font>

297
00:13:39,480 --> 00:13:43,830
<font color="#CCCCCC">is actually</font><font color="#E5E5E5"> higher</font><font color="#CCCCCC"> than just</font><font color="#E5E5E5"> drawl it's</font>

298
00:13:41,430 --> 00:13:47,069
the same as the cheese see graph<font color="#E5E5E5"> because</font>

299
00:13:43,830 --> 00:13:49,050
we can reduce<font color="#E5E5E5"> GC cycles by more and</font><font color="#CCCCCC"> that</font>

300
00:13:47,070 --> 00:13:50,580
automatically means<font color="#E5E5E5"> that we don't have</font>

301
00:13:49,050 --> 00:13:54,060
to allocate memory we don't have to<font color="#CCCCCC"> Chi</font>

302
00:13:50,580 --> 00:13:58,020
<font color="#CCCCCC">C</font><font color="#E5E5E5"> it and</font><font color="#CCCCCC"> that reduces CPU</font><font color="#E5E5E5"> okay</font>

303
00:13:54,060 --> 00:14:02,250
<font color="#CCCCCC">30% questions yes there's one question</font>

304
00:13:58,020 --> 00:14:02,670
that everyone<font color="#CCCCCC"> has correct</font><font color="#E5E5E5"> yeah of course</font>

305
00:14:02,250 --> 00:14:04,890
I did

306
00:14:02,670 --> 00:14:08,969
I couldn't come<font color="#CCCCCC"> up</font><font color="#E5E5E5"> here and not have</font>

307
00:14:04,890 --> 00:14:10,860
done<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so I picked these three</font>

308
00:14:08,970 --> 00:14:12,720
they're very similar<font color="#CCCCCC"> to the other ones</font>

309
00:14:10,860 --> 00:14:14,730
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Groth</font><font color="#E5E5E5"> has its max</font><font color="#CCCCCC"> inline level</font>

310
00:14:12,720 --> 00:14:18,300
<font color="#E5E5E5">growl doesn't have that it's the depth</font>

311
00:14:14,730 --> 00:14:20,550
of<font color="#E5E5E5"> inlining that c22 us at</font><font color="#CCCCCC"> 9 it stops</font><font color="#E5E5E5"> so</font>

312
00:14:18,300 --> 00:14:22,079
if if you<font color="#CCCCCC"> if you call more than nine</font>

313
00:14:20,550 --> 00:14:25,920
methods it's just not<font color="#CCCCCC"> inlining anymore</font>

314
00:14:22,080 --> 00:14:27,480
max<font color="#E5E5E5"> in line size 35</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> as T the</font>

315
00:14:25,920 --> 00:14:30,689
<font color="#CCCCCC">the Grob her ammeter basically the only</font>

316
00:14:27,480 --> 00:14:33,540
<font color="#E5E5E5">difference is</font><font color="#CCCCCC"> growl is looking at</font><font color="#E5E5E5"> nodes</font>

317
00:14:30,690 --> 00:14:36,540
in the compiler graph while this 35 is

318
00:14:33,540 --> 00:14:39,209
byte code size there's a funny story

319
00:14:36,540 --> 00:14:41,069
<font color="#CCCCCC">about</font><font color="#E5E5E5"> this you know if you have assert</font>

320
00:14:39,210 --> 00:14:42,990
statements that actually is counted<font color="#E5E5E5"> in</font>

321
00:14:41,070 --> 00:14:46,140
that 35 so it's stupid

322
00:14:42,990 --> 00:14:48,870
we never fixed<font color="#E5E5E5"> it but Jason</font>

323
00:14:46,140 --> 00:14:51,090
configuration<font color="#E5E5E5"> kind of the same 5 to 20</font>

324
00:14:48,870 --> 00:14:53,730
you know I wanted<font color="#CCCCCC"> to see we've actually</font>

325
00:14:51,090 --> 00:14:59,480
<font color="#CCCCCC">lessen lining level</font><font color="#E5E5E5"> change it changes</font>

326
00:14:53,730 --> 00:15:03,480
things experiment<font color="#CCCCCC"> that's the outcome</font>

327
00:14:59,480 --> 00:15:08,550
<font color="#E5E5E5">same graph that's a</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> so the best</font>

328
00:15:03,480 --> 00:15:11,460
we could do is<font color="#CCCCCC"> 5% and and that's kind of</font>

329
00:15:08,550 --> 00:15:12,719
I think<font color="#E5E5E5"> an outlier</font><font color="#CCCCCC"> because we see here</font>

330
00:15:11,460 --> 00:15:15,240
three point<font color="#E5E5E5"> eight hundred five three</font>

331
00:15:12,720 --> 00:15:17,400
point three I think<font color="#CCCCCC"> that's more deranged</font>

332
00:15:15,240 --> 00:15:20,610
that if I would<font color="#E5E5E5"> run the experiment which</font>

333
00:15:17,400 --> 00:15:22,860
I didn't do yet the verification

334
00:15:20,610 --> 00:15:25,410
experiment we would see a rough three

335
00:15:22,860 --> 00:15:28,830
point five percent improvement that

336
00:15:25,410 --> 00:15:30,740
audit<font color="#CCCCCC"> even can get out of situ nice</font>

337
00:15:28,830 --> 00:15:33,570
right so auto-tuned<font color="#E5E5E5"> does a very good job</font>

338
00:15:30,740 --> 00:15:35,790
<font color="#E5E5E5">but compared to</font><font color="#CCCCCC"> Gras it's just nothing</font>

339
00:15:33,570 --> 00:15:38,070
<font color="#CCCCCC">because this the suite service and we</font>

340
00:15:35,790 --> 00:15:39,660
had what an<font color="#E5E5E5"> 18</font><font color="#CCCCCC"> percent improvement by</font>

341
00:15:38,070 --> 00:15:41,400
using<font color="#E5E5E5"> Rob without</font><font color="#CCCCCC"> a tune</font>

342
00:15:39,660 --> 00:15:48,990
and the most we<font color="#E5E5E5"> can get here is roughly</font>

343
00:15:41,400 --> 00:15:54,209
<font color="#E5E5E5">let's say because</font><font color="#CCCCCC"> I'm nice</font><font color="#E5E5E5"> 4% so no it's</font>

344
00:15:48,990 --> 00:15:55,320
<font color="#E5E5E5">not no it's not because this is Scala</font><font color="#CCCCCC"> c2</font>

345
00:15:54,210 --> 00:15:57,780
<font color="#E5E5E5">is not tuned for Scala</font>

346
00:15:55,320 --> 00:16:00,000
that's an<font color="#CCCCCC"> interesting chart the max</font><font color="#E5E5E5"> in</font>

347
00:15:57,780 --> 00:16:02,480
line<font color="#E5E5E5"> level you can see it goes up</font><font color="#CCCCCC"> so 9</font>

348
00:16:00,000 --> 00:16:05,420
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> default</font><font color="#CCCCCC"> right so we're round here</font>

349
00:16:02,480 --> 00:16:09,750
we can certainly it<font color="#CCCCCC"> should</font><font color="#E5E5E5"> be probably</font>

350
00:16:05,420 --> 00:16:14,479
<font color="#E5E5E5">17 to be honest and then this graph</font>

351
00:16:09,750 --> 00:16:17,520
flat flat<font color="#E5E5E5"> so they don't change a lot</font>

352
00:16:14,480 --> 00:16:19,950
<font color="#CCCCCC">yeah that was it my summary is always</font>

353
00:16:17,520 --> 00:16:24,390
very simple<font color="#CCCCCC"> and I always just ask</font><font color="#E5E5E5"> people</font>

354
00:16:19,950 --> 00:16:25,440
<font color="#E5E5E5">please try draw as you saw especially</font>

355
00:16:24,390 --> 00:16:29,010
when you run Scala code you should

356
00:16:25,440 --> 00:16:31,710
<font color="#E5E5E5">certainly try grow it can reduce you</font>

357
00:16:29,010 --> 00:16:35,550
<font color="#E5E5E5">know the the cost of your whatever</font>

358
00:16:31,710 --> 00:16:37,710
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> doing business and I want people</font>

359
00:16:35,550 --> 00:16:39,329
<font color="#CCCCCC">to try it so that we find more bugs and</font>

360
00:16:37,710 --> 00:16:42,000
can make rather better compilers or if

361
00:16:39,330 --> 00:16:44,460
you try to run your pet project or I

362
00:16:42,000 --> 00:16:47,120
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> you go to work</font><font color="#CCCCCC"> at Monday and</font>

363
00:16:44,460 --> 00:16:51,060
put it in<font color="#CCCCCC"> production that would</font><font color="#E5E5E5"> be cool</font>

364
00:16:47,120 --> 00:16:54,060
we do it so if you get a crash that

365
00:16:51,060 --> 00:16:56,160
<font color="#CCCCCC">would be nice file a bug if something</font>

366
00:16:54,060 --> 00:16:58,739
doesn't<font color="#E5E5E5"> work as expected or as</font><font color="#CCCCCC"> slower</font>

367
00:16:56,160 --> 00:17:02,310
<font color="#CCCCCC">than C</font><font color="#E5E5E5"> - yeah</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> a bug if it's better</font>

368
00:16:58,740 --> 00:17:04,800
<font color="#E5E5E5">tweet about it and ask me I would love</font>

369
00:17:02,310 --> 00:17:06,948
to hear it so that was it<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font>

370
00:17:04,800 --> 00:17:06,948
much

371
00:17:11,720 --> 00:17:26,429
any questions yeah so did<font color="#E5E5E5"> you run these</font>

372
00:17:23,638 --> 00:17:28,769
<font color="#E5E5E5">experiments only for 24 hours yes okay</font>

373
00:17:26,429 --> 00:17:31,440
because if<font color="#CCCCCC"> you look</font><font color="#E5E5E5"> at the parameter</font>

374
00:17:28,769 --> 00:17:33,019
<font color="#E5E5E5">space it would be over dream with the</font>

375
00:17:31,440 --> 00:17:35,639
<font color="#CCCCCC">parameters you showed it could be over</font>

376
00:17:33,019 --> 00:17:40,980
everyone right 3 million<font color="#E5E5E5"> configurations</font>

377
00:17:35,639 --> 00:17:42,178
<font color="#CCCCCC">yeah possibly yes</font><font color="#E5E5E5"> the problem is you</font>

378
00:17:40,980 --> 00:17:44,220
didn't see the<font color="#CCCCCC"> first half</font><font color="#E5E5E5"> of the</font>

379
00:17:42,179 --> 00:17:47,249
presentation<font color="#CCCCCC"> yeah but I know</font><font color="#E5E5E5"> of Asian</font>

380
00:17:44,220 --> 00:17:49,259
optimization is yes<font color="#CCCCCC"> so if you know what</font>

381
00:17:47,249 --> 00:17:51,989
it is<font color="#CCCCCC"> then you know how</font><font color="#E5E5E5"> it works so</font><font color="#CCCCCC"> it's</font>

382
00:17:49,259 --> 00:17:55,859
also<font color="#E5E5E5"> sometimes very fragile so not</font>

383
00:17:51,989 --> 00:17:58,769
really<font color="#CCCCCC"> huh</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I mean you saw</font><font color="#E5E5E5"> yeah but</font>

384
00:17:55,859 --> 00:18:01,529
there are a<font color="#E5E5E5"> lot of other things out</font>

385
00:17:58,769 --> 00:18:03,690
<font color="#CCCCCC">there like how do you batch this can you</font>

386
00:18:01,529 --> 00:18:05,159
batch it like there's a post by Facebook

387
00:18:03,690 --> 00:18:07,529
where they used the same technique for

388
00:18:05,159 --> 00:18:10,409
<font color="#CCCCCC">their hack compiler I guess</font><font color="#E5E5E5"> was recently</font>

389
00:18:07,529 --> 00:18:12,570
posed<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and they didn't show that you</font>

390
00:18:10,409 --> 00:18:14,639
quite<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> quite some</font><font color="#CCCCCC"> informations</font>

391
00:18:12,570 --> 00:18:17,460
<font color="#E5E5E5">needed</font><font color="#CCCCCC"> so I was wondering is it</font><font color="#E5E5E5"> feasible</font>

392
00:18:14,639 --> 00:18:19,619
for<font color="#CCCCCC"> everyone like besides</font><font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> to</font>

393
00:18:17,460 --> 00:18:22,200
like if you have a production workloads

394
00:18:19,619 --> 00:18:25,259
<font color="#E5E5E5">right to try this</font><font color="#CCCCCC"> oh absolutely</font>

395
00:18:22,200 --> 00:18:28,200
so I you I did 40 iterations<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> right</font>

396
00:18:25,259 --> 00:18:29,789
<font color="#CCCCCC">okay that's that's</font><font color="#E5E5E5"> a very good size I'd</font>

397
00:18:28,200 --> 00:18:31,590
have to say if you<font color="#E5E5E5"> look at the table</font><font color="#CCCCCC"> the</font>

398
00:18:29,789 --> 00:18:34,139
results<font color="#E5E5E5"> table you'll see</font><font color="#CCCCCC"> that the top</font>

399
00:18:31,590 --> 00:18:36,149
<font color="#E5E5E5">you know it kind of your explored</font><font color="#CCCCCC"> the</font>

400
00:18:34,139 --> 00:18:39,600
space<font color="#E5E5E5"> enough so that you have a good</font>

401
00:18:36,149 --> 00:18:43,189
result<font color="#CCCCCC"> the the goal we're not there yet</font>

402
00:18:39,600 --> 00:18:45,869
<font color="#CCCCCC">but the goal is to have</font><font color="#E5E5E5"> this always on</font>

403
00:18:43,190 --> 00:18:47,460
<font color="#E5E5E5">for every service so</font><font color="#CCCCCC"> that the services</font>

404
00:18:45,869 --> 00:18:50,609
are tuning themselves automatically<font color="#E5E5E5"> all</font>

405
00:18:47,460 --> 00:18:51,989
the<font color="#E5E5E5"> time and then you</font><font color="#CCCCCC"> can run 30-day</font>

406
00:18:50,609 --> 00:18:53,189
experiments or something right<font color="#E5E5E5"> you don't</font>

407
00:18:51,989 --> 00:18:54,899
have<font color="#CCCCCC"> to tune it every day</font>

408
00:18:53,190 --> 00:18:56,879
the code is changing yes everyone is

409
00:18:54,899 --> 00:18:59,189
deploying<font color="#E5E5E5"> multiple times a week</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font>

410
00:18:56,879 --> 00:19:02,459
not<font color="#E5E5E5"> that</font><font color="#CCCCCC"> much right only</font><font color="#E5E5E5"> once a month</font>

411
00:18:59,190 --> 00:19:04,950
<font color="#E5E5E5">it's still a hundred times more than you</font>

412
00:19:02,460 --> 00:19:06,450
would manually<font color="#E5E5E5"> tune it</font><font color="#CCCCCC"> right you</font><font color="#E5E5E5"> only</font>

413
00:19:04,950 --> 00:19:09,539
<font color="#CCCCCC">tune it</font><font color="#E5E5E5"> manually when someone gets upset</font>

414
00:19:06,450 --> 00:19:11,879
<font color="#E5E5E5">and then he Tunes it and then yeah I</font>

415
00:19:09,539 --> 00:19:12,960
have to sit at Twitter I got there and<font color="#E5E5E5"> I</font>

416
00:19:11,879 --> 00:19:14,158
<font color="#CCCCCC">said hey when</font><font color="#E5E5E5"> was the last time you</font>

417
00:19:12,960 --> 00:19:15,659
filmed the parameters for the tweet

418
00:19:14,159 --> 00:19:17,429
<font color="#CCCCCC">service I</font><font color="#E5E5E5"> said three</font><font color="#CCCCCC"> years ago</font><font color="#E5E5E5"> right</font>

419
00:19:15,659 --> 00:19:19,499
<font color="#CCCCCC">that's basically what</font><font color="#E5E5E5"> happened so we</font>

420
00:19:17,429 --> 00:19:22,490
want this always-on and then we can run

421
00:19:19,499 --> 00:19:25,490
<font color="#E5E5E5">and a thirty-day experiments and run it</font>

422
00:19:22,490 --> 00:19:27,230
for one evaluation<font color="#CCCCCC"> one full</font><font color="#E5E5E5"> of is there</font>

423
00:19:25,490 --> 00:19:29,780
any<font color="#E5E5E5"> intention to make this</font><font color="#CCCCCC"> OSHA tune</font>

424
00:19:27,230 --> 00:19:34,100
<font color="#CCCCCC">ferric open source yes there is</font>

425
00:19:29,780 --> 00:19:36,440
so the problem<font color="#E5E5E5"> the wet lab vision</font>

426
00:19:34,100 --> 00:19:37,820
optimization<font color="#E5E5E5"> part that probably we can't</font>

427
00:19:36,440 --> 00:19:40,280
<font color="#E5E5E5">open source because we bought that</font>

428
00:19:37,820 --> 00:19:42,710
company and you know complicated<font color="#E5E5E5"> but</font>

429
00:19:40,280 --> 00:19:45,440
there's the<font color="#E5E5E5"> Spearmint framework which</font><font color="#CCCCCC"> is</font>

430
00:19:42,710 --> 00:19:47,390
open source<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> auto-tune we wrote</font>

431
00:19:45,440 --> 00:19:49,580
ourselves our team so yeah we can<font color="#CCCCCC"> open</font>

432
00:19:47,390 --> 00:19:52,190
source it it's just<font color="#E5E5E5"> at this point it's</font>

433
00:19:49,580 --> 00:19:55,310
not<font color="#E5E5E5"> very</font><font color="#CCCCCC"> user-friendly ok I have to I</font>

434
00:19:52,190 --> 00:19:58,450
have<font color="#CCCCCC"> to curl chase and</font><font color="#E5E5E5"> files student URL</font>

435
00:19:55,310 --> 00:20:01,490
and then you know<font color="#E5E5E5"> and you can only kill</font>

436
00:19:58,450 --> 00:20:03,560
all the experiments<font color="#E5E5E5"> you cannot kill one</font>

437
00:20:01,490 --> 00:20:04,880
of<font color="#E5E5E5"> them so it's you know it's working</font>

438
00:20:03,560 --> 00:20:14,659
<font color="#E5E5E5">progress but yeah we</font><font color="#CCCCCC"> went to open</font><font color="#E5E5E5"> source</font>

439
00:20:04,880 --> 00:20:17,480
it microphone so there exists about<font color="#E5E5E5"> 1000</font>

440
00:20:14,660 --> 00:20:20,180
<font color="#CCCCCC">X X parameters how many can you</font><font color="#E5E5E5"> tune at</font>

441
00:20:17,480 --> 00:20:23,840
once<font color="#E5E5E5"> and how do they interact</font><font color="#CCCCCC"> with each</font>

442
00:20:20,180 --> 00:20:25,880
other<font color="#E5E5E5"> so</font><font color="#CCCCCC"> how much time</font><font color="#E5E5E5"> do you have right</font>

443
00:20:23,840 --> 00:20:29,270
<font color="#E5E5E5">you can do all</font><font color="#CCCCCC"> of them if you want the</font>

444
00:20:25,880 --> 00:20:31,790
the<font color="#CCCCCC"> attitude was written to tune GC</font>

445
00:20:29,270 --> 00:20:34,190
parameters that's why<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> time likes</font>

446
00:20:31,790 --> 00:20:36,290
<font color="#CCCCCC">likes we or</font><font color="#E5E5E5"> you know you can as many as</font>

447
00:20:34,190 --> 00:20:39,200
you want<font color="#CCCCCC"> okay yeah it's like the space</font>

448
00:20:36,290 --> 00:20:42,770
will be<font color="#CCCCCC"> a little bit bigger but yeah you</font>

449
00:20:39,200 --> 00:20:45,290
<font color="#E5E5E5">can do as many as you</font><font color="#CCCCCC"> want yeah repping</font>

450
00:20:42,770 --> 00:20:47,379
up<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that was</font><font color="#CCCCCC"> it ask me later thank</font>

451
00:20:45,290 --> 00:20:47,379
you

452
00:20:50,690 --> 00:20:52,750
<font color="#E5E5E5">you</font>

