1
00:00:10,840 --> 00:00:26,810
<font color="#CCCCCC">alright alright</font>

2
00:00:17,240 --> 00:00:28,759
<font color="#E5E5E5">Oh yo yo yo yo</font><font color="#CCCCCC"> e yeah hi thanks</font><font color="#E5E5E5"> for</font>

3
00:00:26,810 --> 00:00:31,700
thanks for<font color="#E5E5E5"> coming thanks for</font><font color="#CCCCCC"> for hanging</font>

4
00:00:28,759 --> 00:00:33,260
out here<font color="#CCCCCC"> my name is Andy Wingo and I co</font>

5
00:00:31,700 --> 00:00:35,329
<font color="#CCCCCC">maintained I</font><font color="#E5E5E5"> along with little bit</font>

6
00:00:33,260 --> 00:00:37,730
<font color="#CCCCCC">quartets in</font><font color="#E5E5E5"> mark Weaver and I've been</font>

7
00:00:35,329 --> 00:00:40,010
mostly working<font color="#E5E5E5"> on compiler runtime stuff</font>

8
00:00:37,730 --> 00:00:42,319
and I've been<font color="#E5E5E5"> I'm the worst maintainer</font>

9
00:00:40,010 --> 00:00:45,379
in terms of bugs<font color="#E5E5E5"> like don't don't</font><font color="#CCCCCC"> ask me</font>

10
00:00:42,320 --> 00:00:47,870
about bugs<font color="#E5E5E5"> right so this talk is gonna</font>

11
00:00:45,380 --> 00:00:49,460
be about guile<font color="#E5E5E5"> 3 it's an upcoming new</font>

12
00:00:47,870 --> 00:00:52,010
major release and guile

13
00:00:49,460 --> 00:00:54,920
<font color="#E5E5E5">right now we're Kyle - - it's the next</font>

14
00:00:52,010 --> 00:00:57,530
incremental<font color="#E5E5E5"> step it's essentially source</font>

15
00:00:54,920 --> 00:01:00,710
compatible your programs will run in<font color="#E5E5E5"> the</font>

16
00:00:57,530 --> 00:01:02,540
same way only faster so then we're<font color="#E5E5E5"> gonna</font>

17
00:01:00,710 --> 00:01:04,129
talk a little bit<font color="#E5E5E5"> more about how we got</font>

18
00:01:02,540 --> 00:01:05,209
there<font color="#E5E5E5"> and what we're going next but</font><font color="#CCCCCC"> I'm</font>

19
00:01:04,129 --> 00:01:09,200
<font color="#E5E5E5">gonna skip to the end of the talk</font>

20
00:01:05,209 --> 00:01:11,809
already<font color="#E5E5E5"> with some results so like if</font>

21
00:01:09,200 --> 00:01:14,150
you're summing a<font color="#CCCCCC"> 10 million element</font>

22
00:01:11,810 --> 00:01:18,260
vector<font color="#E5E5E5"> of</font><font color="#CCCCCC"> pack floats or something it</font>

23
00:01:14,150 --> 00:01:20,590
runs 2.7 times as fast as<font color="#CCCCCC"> scale - -</font><font color="#E5E5E5"> if</font>

24
00:01:18,260 --> 00:01:23,540
you take a task which<font color="#CCCCCC"> is less</font>

25
00:01:20,590 --> 00:01:26,020
computational in terms of tight loops

26
00:01:23,540 --> 00:01:30,020
but still very<font color="#E5E5E5"> general purpose like</font>

27
00:01:26,020 --> 00:01:33,080
running the macro expander on this<font color="#CCCCCC"> sx</font>

28
00:01:30,020 --> 00:01:34,789
source file it's about 1/2 times as fast

29
00:01:33,080 --> 00:01:37,100
<font color="#E5E5E5">and that was going to give it</font><font color="#CCCCCC"> a try with</font>

30
00:01:34,790 --> 00:01:38,479
geeks and<font color="#E5E5E5"> I think I got about I don't</font>

31
00:01:37,100 --> 00:01:40,490
<font color="#E5E5E5">really</font><font color="#CCCCCC"> understand what I'm testing so</font>

32
00:01:38,479 --> 00:01:42,470
I'm<font color="#CCCCCC"> still I don't know how fast it is</font>

33
00:01:40,490 --> 00:01:44,210
there yeah<font color="#E5E5E5"> but but the</font><font color="#CCCCCC"> thing is it's</font>

34
00:01:42,470 --> 00:01:46,580
only gonna get faster from<font color="#E5E5E5"> here</font><font color="#CCCCCC"> on so</font>

35
00:01:44,210 --> 00:01:48,770
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> really the the deliverable</font><font color="#E5E5E5"> of</font>

36
00:01:46,580 --> 00:01:51,259
<font color="#CCCCCC">guile 3 so to speak it's just same thing</font>

37
00:01:48,770 --> 00:01:53,600
<font color="#CCCCCC">but bit faster</font><font color="#E5E5E5"> and how do we do that</font>

38
00:01:51,260 --> 00:01:57,049
<font color="#CCCCCC">alright and and what how what how how</font>

39
00:01:53,600 --> 00:01:59,270
are we here<font color="#E5E5E5"> so I I didn't study computer</font>

40
00:01:57,049 --> 00:02:02,420
science<font color="#CCCCCC"> I just had</font><font color="#E5E5E5"> guile programs that</font>

41
00:01:59,270 --> 00:02:04,880
were running slow<font color="#E5E5E5"> and this around 2006 I</font>

42
00:02:02,420 --> 00:02:07,100
had audio synthesizers<font color="#CCCCCC"> and different</font>

43
00:02:04,880 --> 00:02:09,049
stuff and<font color="#E5E5E5"> I looked</font><font color="#CCCCCC"> into it</font><font color="#E5E5E5"> and I tried</font>

44
00:02:07,100 --> 00:02:11,780
everything<font color="#E5E5E5"> you know I you know would</font>

45
00:02:09,049 --> 00:02:13,879
<font color="#CCCCCC">cache results like just be</font><font color="#E5E5E5"> very lazy</font>

46
00:02:11,780 --> 00:02:15,889
about computing stuff would drop<font color="#E5E5E5"> out and</font>

47
00:02:13,879 --> 00:02:16,859
to see if I needed<font color="#E5E5E5"> to do particular</font>

48
00:02:15,889 --> 00:02:19,140
things

49
00:02:16,860 --> 00:02:22,260
you know built a statistical profiler

50
00:02:19,140 --> 00:02:24,359
and<font color="#E5E5E5"> in the end it turned out that the</font>

51
00:02:22,260 --> 00:02:26,579
<font color="#CCCCCC">problem with my programs was that</font><font color="#E5E5E5"> guy'll</font>

52
00:02:24,360 --> 00:02:29,190
simply ran scheme code<font color="#CCCCCC"> too slow and</font><font color="#E5E5E5"> gal</font>

53
00:02:26,580 --> 00:02:31,200
should run<font color="#E5E5E5"> scheme code</font><font color="#CCCCCC"> faster</font><font color="#E5E5E5"> and that's</font>

54
00:02:29,190 --> 00:02:35,340
how I picked up some compiler work that

55
00:02:31,200 --> 00:02:36,929
was kind of<font color="#E5E5E5"> sitting around unmerged and</font>

56
00:02:35,340 --> 00:02:41,730
ended up<font color="#CCCCCC"> maintaining the compiler in</font>

57
00:02:36,930 --> 00:02:43,380
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Kyle</font><font color="#CCCCCC"> so a the to give you a</font>

58
00:02:41,730 --> 00:02:44,489
sort<font color="#CCCCCC"> of sense I know that there's some</font>

59
00:02:43,380 --> 00:02:47,930
small text here

60
00:02:44,490 --> 00:02:51,870
that guy'll in 2006 which is about<font color="#CCCCCC"> gal</font>

61
00:02:47,930 --> 00:02:53,460
1.8 1.6<font color="#CCCCCC"> that this time you have your</font>

62
00:02:51,870 --> 00:02:55,140
scheme source code on the top<font color="#E5E5E5"> and what</font>

63
00:02:53,460 --> 00:02:56,160
would<font color="#E5E5E5"> happen is at runtime you always</font>

64
00:02:55,140 --> 00:02:58,350
start<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the source code you</font><font color="#CCCCCC"> would</font>

65
00:02:56,160 --> 00:03:00,180
never cache any kind<font color="#E5E5E5"> of compiled</font>

66
00:02:58,350 --> 00:03:02,519
analysis<font color="#CCCCCC"> about what your source</font><font color="#E5E5E5"> code was</font>

67
00:03:00,180 --> 00:03:04,830
so<font color="#CCCCCC"> you'd go through</font><font color="#E5E5E5"> an expansion phase</font>

68
00:03:02,520 --> 00:03:07,709
in which all your macros were expanded

69
00:03:04,830 --> 00:03:09,480
out and then you would have<font color="#E5E5E5"> this kind of</font>

70
00:03:07,709 --> 00:03:11,310
primitive scheme form that's the second

71
00:03:09,480 --> 00:03:12,690
box there and<font color="#E5E5E5"> their</font><font color="#CCCCCC"> run time you just</font>

72
00:03:11,310 --> 00:03:14,610
<font color="#E5E5E5">keep interpreting these primitive scheme</font>

73
00:03:12,690 --> 00:03:16,140
forms and we were very proud of our

74
00:03:14,610 --> 00:03:19,260
interpreter then we felt like<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> a</font>

75
00:03:16,140 --> 00:03:20,820
fast interpreter and and we felt like<font color="#E5E5E5"> we</font>

76
00:03:19,260 --> 00:03:22,290
<font color="#CCCCCC">were at some</font><font color="#E5E5E5"> kind of local maximum and I</font>

77
00:03:20,820 --> 00:03:27,209
guess we were but it was<font color="#CCCCCC"> very local and</font>

78
00:03:22,290 --> 00:03:29,700
<font color="#CCCCCC">not very maximum you know so we</font><font color="#E5E5E5"> ended up</font>

79
00:03:27,209 --> 00:03:31,080
<font color="#E5E5E5">adding was we separated things into</font>

80
00:03:29,700 --> 00:03:33,619
<font color="#CCCCCC">compile time in</font><font color="#E5E5E5"> run time</font><font color="#CCCCCC"> and I know this</font>

81
00:03:31,080 --> 00:03:36,840
is you<font color="#CCCCCC"> know incredibly basic</font><font color="#E5E5E5"> here but a</font>

82
00:03:33,620 --> 00:03:39,030
on this primitive scheme form<font color="#CCCCCC"> well</font><font color="#E5E5E5"> we</font>

83
00:03:36,840 --> 00:03:41,970
would expand at compile time so you

84
00:03:39,030 --> 00:03:43,500
wouldn't<font color="#E5E5E5"> have to also in old</font><font color="#CCCCCC"> guile</font><font color="#E5E5E5"> you</font>

85
00:03:41,970 --> 00:03:45,930
had to write your macros<font color="#E5E5E5"> with</font>

86
00:03:43,500 --> 00:03:47,790
performance in mind<font color="#E5E5E5"> you what you had to</font>

87
00:03:45,930 --> 00:03:49,230
you know write these programs that<font color="#E5E5E5"> run</font>

88
00:03:47,790 --> 00:03:50,489
on your programs knowing that they're

89
00:03:49,230 --> 00:03:52,920
going<font color="#E5E5E5"> to run every time you</font><font color="#CCCCCC"> run the</font>

90
00:03:50,489 --> 00:03:54,120
<font color="#CCCCCC">program well as</font><font color="#E5E5E5"> an actuality it's a</font>

91
00:03:52,920 --> 00:03:55,559
program<font color="#E5E5E5"> that runs on</font><font color="#CCCCCC"> your program it's a</font>

92
00:03:54,120 --> 00:03:58,709
function of<font color="#E5E5E5"> your program not of when you</font>

93
00:03:55,560 --> 00:04:00,239
run it so with<font color="#E5E5E5"> with adding a compilation</font>

94
00:03:58,709 --> 00:04:02,730
<font color="#E5E5E5">phase we were</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> run macro</font>

95
00:04:00,239 --> 00:04:05,010
expansion and analysis and optimization

96
00:04:02,730 --> 00:04:07,440
at compile time<font color="#CCCCCC"> so that at runtime you</font>

97
00:04:05,010 --> 00:04:10,350
<font color="#CCCCCC">would have a bytecode which would then</font>

98
00:04:07,440 --> 00:04:12,359
be interpreted<font color="#E5E5E5"> right so I know we have</font><font color="#CCCCCC"> a</font>

99
00:04:10,350 --> 00:04:15,000
<font color="#CCCCCC">red-green</font><font color="#E5E5E5"> accessibility issues here but</font>

100
00:04:12,360 --> 00:04:16,620
<font color="#E5E5E5">the green things would be the expansion</font>

101
00:04:15,000 --> 00:04:18,000
phase optimization phase the code

102
00:04:16,620 --> 00:04:19,978
generation<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the bytecode all this</font>

103
00:04:18,000 --> 00:04:23,820
happens at compile time<font color="#CCCCCC"> and at runtime</font>

104
00:04:19,978 --> 00:04:27,870
<font color="#E5E5E5">you just interpret that bytecode and I</font>

105
00:04:23,820 --> 00:04:30,650
say interpret<font color="#E5E5E5"> it's there's levels of</font>

106
00:04:27,870 --> 00:04:33,229
interpretation<font color="#CCCCCC"> in your system</font><font color="#E5E5E5"> so</font>

107
00:04:30,650 --> 00:04:34,669
was a bytecode<font color="#E5E5E5"> interpreter interpreting</font>

108
00:04:33,229 --> 00:04:37,699
<font color="#E5E5E5">your program and I know you've all seen</font>

109
00:04:34,669 --> 00:04:40,570
those diagrams<font color="#CCCCCC"> of ideal</font><font color="#E5E5E5"> Turing machines</font>

110
00:04:37,699 --> 00:04:43,340
with you know the<font color="#E5E5E5"> thing and the strip of</font>

111
00:04:40,570 --> 00:04:45,409
images and whatever so here the<font color="#CCCCCC"> machine</font>

112
00:04:43,340 --> 00:04:47,750
<font color="#E5E5E5">is the the virtual machine and</font><font color="#CCCCCC"> guy-land</font>

113
00:04:45,410 --> 00:04:50,300
<font color="#E5E5E5">the strip of images is your bytecode</font>

114
00:04:47,750 --> 00:04:53,419
<font color="#E5E5E5">right and and that machine was</font>

115
00:04:50,300 --> 00:04:55,370
implemented<font color="#CCCCCC"> by VNC and interpreting</font><font color="#E5E5E5"> your</font>

116
00:04:53,419 --> 00:04:57,320
program and<font color="#CCCCCC"> sometimes that machine is</font>

117
00:04:55,370 --> 00:04:59,090
<font color="#E5E5E5">called a</font><font color="#CCCCCC"> virtual machine</font><font color="#E5E5E5"> because the</font>

118
00:04:57,320 --> 00:05:01,430
instructions<font color="#CCCCCC"> it operates on are not</font>

119
00:04:59,090 --> 00:05:04,039
machine instructions<font color="#E5E5E5"> they're somehow at</font>

120
00:05:01,430 --> 00:05:05,389
a higher<font color="#CCCCCC"> level and</font><font color="#E5E5E5"> and you'll see like</font>

121
00:05:04,039 --> 00:05:06,860
<font color="#CCCCCC">the as Kyle develops we just keep</font>

122
00:05:05,389 --> 00:05:09,410
<font color="#CCCCCC">dropping these levels down and down it's</font>

123
00:05:06,860 --> 00:05:11,900
<font color="#CCCCCC">still all virtual and even to</font><font color="#E5E5E5"> your CPU</font>

124
00:05:09,410 --> 00:05:14,090
the x86<font color="#E5E5E5"> instructions aren't really what</font>

125
00:05:11,900 --> 00:05:16,780
your CPU runs right those<font color="#CCCCCC"> are expanded</font>

126
00:05:14,090 --> 00:05:20,599
out as well<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> similar fashion right</font>

127
00:05:16,780 --> 00:05:22,609
<font color="#E5E5E5">so the thing is is</font><font color="#CCCCCC"> that when gal becomes</font>

128
00:05:20,600 --> 00:05:24,530
faster you<font color="#E5E5E5"> can write more things in God</font>

129
00:05:22,610 --> 00:05:27,289
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and that's I got kind of</font>

130
00:05:24,530 --> 00:05:29,030
interested<font color="#E5E5E5"> in this the expands the set</font>

131
00:05:27,289 --> 00:05:32,900
of programs<font color="#E5E5E5"> that</font><font color="#CCCCCC"> God could could deal</font>

132
00:05:29,030 --> 00:05:34,880
with<font color="#E5E5E5"> like I don't</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> geeks a program</font>

133
00:05:32,900 --> 00:05:36,799
of half a million lines<font color="#E5E5E5"> of code could</font><font color="#CCCCCC"> be</font>

134
00:05:34,880 --> 00:05:39,380
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> up as fast it does right</font>

135
00:05:36,800 --> 00:05:40,430
<font color="#CCCCCC">now if in the old kind of</font><font color="#E5E5E5"> guile</font><font color="#CCCCCC"> and then</font>

136
00:05:39,380 --> 00:05:44,810
the other thing that happened is<font color="#E5E5E5"> I</font>

137
00:05:40,430 --> 00:05:47,659
worked on this is I I got hooked so

138
00:05:44,810 --> 00:05:49,880
happily for<font color="#CCCCCC"> me that my work on on the</font>

139
00:05:47,659 --> 00:05:51,110
<font color="#CCCCCC">guile compiler has you know that's what</font>

140
00:05:49,880 --> 00:05:53,539
I do<font color="#E5E5E5"> now</font><font color="#CCCCCC"> professionally not bad</font>

141
00:05:51,110 --> 00:05:57,110
currently I'm working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> spider monkey</font>

142
00:05:53,539 --> 00:06:00,199
<font color="#CCCCCC">in Firefox</font><font color="#E5E5E5"> right so kept on kept on</font>

143
00:05:57,110 --> 00:06:02,240
<font color="#CCCCCC">about</font><font color="#E5E5E5"> you know evolving and a couple</font>

144
00:06:00,199 --> 00:06:04,039
<font color="#E5E5E5">years ago we released</font><font color="#CCCCCC"> gal 2.2 which</font><font color="#E5E5E5"> is</font>

145
00:06:02,240 --> 00:06:06,289
the one<font color="#CCCCCC"> that's out right</font><font color="#E5E5E5"> so one that the</font>

146
00:06:04,039 --> 00:06:08,419
folks are using especially<font color="#CCCCCC"> in geeks and</font>

147
00:06:06,289 --> 00:06:09,909
we added<font color="#E5E5E5"> just one more phase in here it</font>

148
00:06:08,419 --> 00:06:12,770
turned<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that the primitive scheme</font>

149
00:06:09,909 --> 00:06:14,090
language<font color="#E5E5E5"> that we did optimizations</font><font color="#CCCCCC"> on in</font>

150
00:06:12,770 --> 00:06:16,310
the past wasn't actually a great

151
00:06:14,090 --> 00:06:18,729
language for<font color="#E5E5E5"> doing optimizations</font><font color="#CCCCCC"> so we</font>

152
00:06:16,310 --> 00:06:20,810
have a continuation<font color="#E5E5E5"> passing style</font>

153
00:06:18,729 --> 00:06:23,750
<font color="#CCCCCC">intermediate representation which</font><font color="#E5E5E5"> we</font>

154
00:06:20,810 --> 00:06:25,490
call CPS soup and it's kind of<font color="#E5E5E5"> like as I</font>

155
00:06:23,750 --> 00:06:27,830
say<font color="#CCCCCC"> for people that work on compilers</font>

156
00:06:25,490 --> 00:06:29,330
<font color="#CCCCCC">and so you do that that</font><font color="#E5E5E5"> level of</font>

157
00:06:27,830 --> 00:06:32,030
optimization we still<font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> out in</font>

158
00:06:29,330 --> 00:06:34,159
<font color="#CCCCCC">bytecode but it's a lower-level bytecode</font>

159
00:06:32,030 --> 00:06:36,710
so it's a different kind<font color="#CCCCCC"> of bytecode in</font>

160
00:06:34,159 --> 00:06:38,389
gal 2.2<font color="#CCCCCC"> versus</font><font color="#E5E5E5"> to dotto but otherwise</font>

161
00:06:36,710 --> 00:06:40,549
it's it's similar<font color="#E5E5E5"> you can you see that</font>

162
00:06:38,389 --> 00:06:43,190
the tower<font color="#CCCCCC"> is getting taller</font><font color="#E5E5E5"> that's</font>

163
00:06:40,550 --> 00:06:45,680
<font color="#CCCCCC">that's kind of where we're going</font><font color="#E5E5E5"> here</font>

164
00:06:43,190 --> 00:06:47,180
<font color="#E5E5E5">if you think about Gala 2.2 like what</font>

165
00:06:45,680 --> 00:06:48,440
<font color="#E5E5E5">where we need to go what do we need to</font>

166
00:06:47,180 --> 00:06:50,479
what<font color="#E5E5E5"> do we need to do in the language</font>

167
00:06:48,440 --> 00:06:53,300
like what's our what's our goal<font color="#CCCCCC"> is our</font>

168
00:06:50,479 --> 00:06:55,280
direction<font color="#CCCCCC"> with our</font><font color="#E5E5E5"> purpose</font><font color="#CCCCCC"> I think on</font>

169
00:06:53,300 --> 00:06:57,159
one<font color="#CCCCCC"> side the language itself needs</font><font color="#E5E5E5"> to do</font>

170
00:06:55,280 --> 00:06:59,210
a bit of evolving we haven't<font color="#E5E5E5"> really</font>

171
00:06:57,159 --> 00:07:02,539
changed the language that guy'll

172
00:06:59,210 --> 00:07:04,638
implements<font color="#E5E5E5"> in a long time</font><font color="#CCCCCC"> and so we need</font>

173
00:07:02,539 --> 00:07:07,099
to<font color="#CCCCCC"> update a bit and I think</font><font color="#E5E5E5"> probably for</font>

174
00:07:04,639 --> 00:07:09,229
me we<font color="#CCCCCC"> need to approach racket we need to</font>

175
00:07:07,099 --> 00:07:11,900
be closer<font color="#CCCCCC"> to</font><font color="#E5E5E5"> racket somehow that's all</font>

176
00:07:09,229 --> 00:07:13,699
<font color="#E5E5E5">front-end work mostly I've been working</font>

177
00:07:11,900 --> 00:07:16,638
mostly on the<font color="#E5E5E5"> backend</font><font color="#CCCCCC"> garlotte self</font>

178
00:07:13,699 --> 00:07:18,139
could<font color="#E5E5E5"> be faster</font><font color="#CCCCCC"> I think more kinds of</font>

179
00:07:16,639 --> 00:07:19,370
programs could<font color="#E5E5E5"> be written guile if</font><font color="#CCCCCC"> God</font>

180
00:07:18,139 --> 00:07:22,669
were faster and<font color="#E5E5E5"> that's what I've</font><font color="#CCCCCC"> been</font>

181
00:07:19,370 --> 00:07:25,759
working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and because girls compiler</font>

182
00:07:22,669 --> 00:07:28,039
<font color="#CCCCCC">write</font><font color="#E5E5E5"> Allah many of you</font><font color="#CCCCCC"> experienced</font>

183
00:07:25,759 --> 00:07:30,830
guile in the form of geeks<font color="#E5E5E5"> how many of</font>

184
00:07:28,039 --> 00:07:32,990
these<font color="#E5E5E5"> geeks here know when you run geeks</font>

185
00:07:30,830 --> 00:07:34,878
pull and it has to compile all<font color="#CCCCCC"> those</font>

186
00:07:32,990 --> 00:07:35,539
damn things<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you were waiting for a</font>

187
00:07:34,879 --> 00:07:36,919
<font color="#E5E5E5">long time</font>

188
00:07:35,539 --> 00:07:39,650
<font color="#E5E5E5">all right many of you have this</font>

189
00:07:36,919 --> 00:07:41,508
<font color="#CCCCCC">experience I think</font><font color="#E5E5E5"> wait specifically</font>

190
00:07:39,650 --> 00:07:43,520
when when geeks is compiling the set of

191
00:07:41,509 --> 00:07:45,229
packages<font color="#E5E5E5"> that it has in his</font><font color="#CCCCCC"> library</font>

192
00:07:43,520 --> 00:07:47,150
which are<font color="#E5E5E5"> implemented</font><font color="#CCCCCC"> in scheme that's</font>

193
00:07:45,229 --> 00:07:49,340
running<font color="#CCCCCC"> Geils compiler which has been in</font>

194
00:07:47,150 --> 00:07:51,799
guile itself so speeding up<font color="#CCCCCC"> GAO's</font>

195
00:07:49,340 --> 00:07:55,039
compiler will speed up all instances<font color="#CCCCCC"> of</font>

196
00:07:51,800 --> 00:07:57,229
compilation<font color="#E5E5E5"> users of</font><font color="#CCCCCC"> God right now have</font>

197
00:07:55,039 --> 00:07:59,180
sometimes<font color="#E5E5E5"> a feeling of slow</font><font color="#CCCCCC"> compilations</font>

198
00:07:57,229 --> 00:08:01,400
so<font color="#E5E5E5"> speeding up God</font><font color="#CCCCCC"> will make that</font>

199
00:07:59,180 --> 00:08:03,380
experience better<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then otherwise I</font>

200
00:08:01,400 --> 00:08:06,859
just<font color="#CCCCCC"> keep working</font><font color="#E5E5E5"> on it</font><font color="#CCCCCC"> because I'm kind</font>

201
00:08:03,380 --> 00:08:08,870
of a junkie right so<font color="#E5E5E5"> gallant</font><font color="#CCCCCC"> way 19</font>

202
00:08:06,860 --> 00:08:13,219
which is<font color="#E5E5E5"> gal</font><font color="#CCCCCC"> 3 we released a pre-release</font>

203
00:08:08,870 --> 00:08:14,240
<font color="#CCCCCC">a couple months</font><font color="#E5E5E5"> ago</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> and this gal</font><font color="#CCCCCC"> 3</font>

204
00:08:13,219 --> 00:08:16,009
will<font color="#E5E5E5"> come out at</font><font color="#CCCCCC"> some point</font><font color="#E5E5E5"> it's just</font>

205
00:08:14,240 --> 00:08:19,729
another<font color="#CCCCCC"> level and</font><font color="#E5E5E5"> so instead</font><font color="#CCCCCC"> of stopping</font>

206
00:08:16,009 --> 00:08:21,789
<font color="#E5E5E5">a bytecode we we</font><font color="#CCCCCC"> stopped at a lower</font>

207
00:08:19,729 --> 00:08:24,590
level<font color="#CCCCCC"> by code and then</font><font color="#E5E5E5"> emit</font>

208
00:08:21,789 --> 00:08:28,159
corresponding machine<font color="#CCCCCC"> codes so simply</font>

209
00:08:24,590 --> 00:08:30,919
adding a JIT<font color="#CCCCCC"> to the tower</font><font color="#E5E5E5"> but the fact</font>

210
00:08:28,159 --> 00:08:34,250
getting<font color="#CCCCCC"> this to</font><font color="#E5E5E5"> work in a maintainable</font>

211
00:08:30,919 --> 00:08:35,659
way<font color="#E5E5E5"> involved a number of compromises</font><font color="#CCCCCC"> so</font>

212
00:08:34,250 --> 00:08:37,789
I want<font color="#E5E5E5"> to explain them because they will</font>

213
00:08:35,659 --> 00:08:41,059
affect how you how<font color="#E5E5E5"> you work with with</font>

214
00:08:37,789 --> 00:08:42,679
Kyle<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> and once you emphasize</font>

215
00:08:41,059 --> 00:08:44,839
again that<font color="#E5E5E5"> it's just a an incremental</font>

216
00:08:42,679 --> 00:08:49,099
step<font color="#E5E5E5"> on a language level you won't</font>

217
00:08:44,839 --> 00:08:52,250
perceive essentially any change<font color="#E5E5E5"> okay so</font>

218
00:08:49,100 --> 00:08:54,500
if you want to<font color="#E5E5E5"> stop interpreting virtual</font>

219
00:08:52,250 --> 00:08:56,600
instructions and instead emit native

220
00:08:54,500 --> 00:08:56,720
instructions to have<font color="#E5E5E5"> the CPU interpret</font>

221
00:08:56,600 --> 00:08:58,670
the

222
00:08:56,720 --> 00:09:03,199
instructions because<font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU is</font>

223
00:08:58,670 --> 00:09:04,849
interpreting in the end then<font color="#E5E5E5"> it's</font>

224
00:09:03,199 --> 00:09:06,469
challenging in a small project<font color="#E5E5E5"> like ours</font>

225
00:09:04,850 --> 00:09:08,660
<font color="#CCCCCC">right</font><font color="#E5E5E5"> because you</font><font color="#CCCCCC"> don't want to have a</font>

226
00:09:06,470 --> 00:09:09,560
lot of code duplication<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the compiler</font>

227
00:09:08,660 --> 00:09:10,759
you don't want to add a<font color="#E5E5E5"> lot of</font>

228
00:09:09,560 --> 00:09:11,899
complexity you want to keep<font color="#E5E5E5"> things</font>

229
00:09:10,759 --> 00:09:14,240
<font color="#CCCCCC">simple</font>

230
00:09:11,899 --> 00:09:16,850
at the same time<font color="#CCCCCC"> guile is a very</font>

231
00:09:14,240 --> 00:09:18,860
cross-platform<font color="#E5E5E5"> project people use it on</font>

232
00:09:16,850 --> 00:09:20,779
<font color="#E5E5E5">really weird machines and I want to</font>

233
00:09:18,860 --> 00:09:24,110
actually<font color="#E5E5E5"> keep this I don't want to force</font>

234
00:09:20,779 --> 00:09:25,790
those users away<font color="#CCCCCC"> so to implement</font><font color="#E5E5E5"> this</font>

235
00:09:24,110 --> 00:09:27,620
<font color="#E5E5E5">and</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> you don't want</font><font color="#CCCCCC"> to generate too</font>

236
00:09:25,790 --> 00:09:30,920
much native code<font color="#CCCCCC"> many of you remember</font>

237
00:09:27,620 --> 00:09:33,500
<font color="#E5E5E5">the Python unladen swallow projects from</font>

238
00:09:30,920 --> 00:09:34,849
back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the day and in the end it failed</font>

239
00:09:33,500 --> 00:09:37,069
to succeed<font color="#E5E5E5"> as far as I understand</font>

240
00:09:34,850 --> 00:09:37,959
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of complexity and because of</font>

241
00:09:37,069 --> 00:09:40,189
code bloat

242
00:09:37,959 --> 00:09:42,469
this is a thing<font color="#CCCCCC"> that can happen two</font>

243
00:09:40,189 --> 00:09:45,769
language implementations<font color="#E5E5E5"> so in order to</font>

244
00:09:42,470 --> 00:09:48,889
to meet these goals we had two steps one

245
00:09:45,769 --> 00:09:52,699
to lower to a<font color="#E5E5E5"> lower level byte code then</font>

246
00:09:48,889 --> 00:09:53,899
<font color="#E5E5E5">we had in</font><font color="#CCCCCC"> gal two to two and then second</font>

247
00:09:52,699 --> 00:09:56,209
to<font color="#CCCCCC"> actually generate corresponding</font>

248
00:09:53,899 --> 00:09:58,100
native code the<font color="#E5E5E5"> first part took much</font>

249
00:09:56,209 --> 00:10:02,180
<font color="#CCCCCC">more time</font><font color="#E5E5E5"> the second part was quite easy</font>

250
00:09:58,100 --> 00:10:04,069
right so as an example this is at the

251
00:10:02,180 --> 00:10:05,689
<font color="#E5E5E5">guy'll repple</font><font color="#CCCCCC"> I know it's a little bit</font>

252
00:10:04,069 --> 00:10:08,000
hard to read I think the height of it is

253
00:10:05,689 --> 00:10:10,129
going to be the salient fact though at

254
00:10:08,000 --> 00:10:11,809
the prompt above<font color="#E5E5E5"> I</font><font color="#CCCCCC"> disassemble a</font>

255
00:10:10,129 --> 00:10:14,540
function that<font color="#CCCCCC"> just references the</font><font color="#E5E5E5"> first</font>

256
00:10:11,809 --> 00:10:16,250
element of a vector and and got 2.2 we

257
00:10:14,540 --> 00:10:19,519
assert that we<font color="#E5E5E5"> have the right number of</font>

258
00:10:16,250 --> 00:10:22,519
arguments<font color="#E5E5E5"> coming in we do the vector F</font>

259
00:10:19,519 --> 00:10:25,790
<font color="#E5E5E5">we handle any interrupts if needed which</font>

260
00:10:22,519 --> 00:10:27,110
is<font color="#CCCCCC"> like the</font><font color="#E5E5E5"> stack check in JSP</font><font color="#CCCCCC"> ms for</font>

261
00:10:25,790 --> 00:10:29,599
example<font color="#E5E5E5"> and then we return the</font><font color="#CCCCCC"> value</font>

262
00:10:27,110 --> 00:10:32,029
<font color="#E5E5E5">right so pretty</font><font color="#CCCCCC"> straightforward</font><font color="#E5E5E5"> and got</font>

263
00:10:29,600 --> 00:10:33,470
all three it's horrible or good

264
00:10:32,029 --> 00:10:34,720
depending on you know<font color="#E5E5E5"> your perspective</font>

265
00:10:33,470 --> 00:10:36,769
here<font color="#E5E5E5"> right it's not really</font>

266
00:10:34,720 --> 00:10:39,129
<font color="#E5E5E5">understandable that it's taller right</font>

267
00:10:36,769 --> 00:10:42,980
<font color="#E5E5E5">what it means is that each of these</font>

268
00:10:39,129 --> 00:10:45,379
instructions<font color="#E5E5E5"> does less right the</font><font color="#CCCCCC"> set of</font>

269
00:10:42,980 --> 00:10:49,939
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> is more orthogonal</font><font color="#E5E5E5"> so that</font>

270
00:10:45,379 --> 00:10:51,529
the native code<font color="#E5E5E5"> emission can be that</font>

271
00:10:49,939 --> 00:10:53,899
that JIT compiler can be smaller because

272
00:10:51,529 --> 00:10:55,939
<font color="#E5E5E5">it has to do less reach instruction</font>

273
00:10:53,899 --> 00:10:57,519
<font color="#E5E5E5">additionally it exposes some more</font>

274
00:10:55,939 --> 00:11:01,180
control flow<font color="#E5E5E5"> that wasn't there before</font>

275
00:10:57,519 --> 00:11:05,240
<font color="#E5E5E5">and it's all just</font><font color="#CCCCCC"> at a much lower level</font>

276
00:11:01,180 --> 00:11:08,679
<font color="#E5E5E5">and so you have instructions which are</font>

277
00:11:05,240 --> 00:11:10,520
closer to machine code it's closer to a

278
00:11:08,679 --> 00:11:15,079
<font color="#E5E5E5">low-level virtual machine</font>

279
00:11:10,520 --> 00:11:18,050
if you will<font color="#CCCCCC"> LLVM you have more</font>

280
00:11:15,080 --> 00:11:19,880
<font color="#CCCCCC">instructions for a given</font><font color="#E5E5E5"> program in that</font>

281
00:11:18,050 --> 00:11:21,740
bytecode you have more control<font color="#E5E5E5"> flow the</font>

282
00:11:19,880 --> 00:11:22,970
compiler can do<font color="#CCCCCC"> more though</font><font color="#E5E5E5"> so for</font>

283
00:11:21,740 --> 00:11:25,190
<font color="#E5E5E5">example in that vector</font><font color="#CCCCCC"> of ref</font>

284
00:11:22,970 --> 00:11:26,900
instruction<font color="#E5E5E5"> it has to do a number of</font>

285
00:11:25,190 --> 00:11:28,460
<font color="#E5E5E5">things I subjected it that the vector is</font>

286
00:11:26,900 --> 00:11:30,530
a heap object it has<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> that it</font>

287
00:11:28,460 --> 00:11:32,480
has<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right vector type tag it has</font>

288
00:11:30,530 --> 00:11:34,910
to check that the index<font color="#E5E5E5"> is within bounds</font>

289
00:11:32,480 --> 00:11:38,480
for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vector</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> to check that the</font>

290
00:11:34,910 --> 00:11:40,760
index is actually<font color="#E5E5E5"> an integer all these</font>

291
00:11:38,480 --> 00:11:42,830
sort of things<font color="#E5E5E5"> in gal 3.0</font><font color="#CCCCCC"> bytecode this</font>

292
00:11:40,760 --> 00:11:46,010
is all separate and<font color="#E5E5E5"> so it means</font><font color="#CCCCCC"> that if</font>

293
00:11:42,830 --> 00:11:48,410
you<font color="#CCCCCC"> have a hot part of</font><font color="#E5E5E5"> your code then</font>

294
00:11:46,010 --> 00:11:50,120
<font color="#CCCCCC">the compiler can</font><font color="#E5E5E5"> emit certain parts of</font>

295
00:11:48,410 --> 00:11:53,660
<font color="#E5E5E5">these you don't have to repeat them on</font>

296
00:11:50,120 --> 00:11:55,670
so this prevents code bloat but it does

297
00:11:53,660 --> 00:11:58,219
mean that the optimizer<font color="#E5E5E5"> has a bigger</font>

298
00:11:55,670 --> 00:12:01,490
program<font color="#E5E5E5"> to work on and so it there's</font>

299
00:11:58,220 --> 00:12:03,560
more work for the optimizer to do so on

300
00:12:01,490 --> 00:12:06,200
the<font color="#E5E5E5"> downside compile time could</font><font color="#CCCCCC"> be</font>

301
00:12:03,560 --> 00:12:07,640
longer did we succeed maybe not<font color="#E5E5E5"> because</font>

302
00:12:06,200 --> 00:12:10,790
more instructions in the program<font color="#CCCCCC"> a</font>

303
00:12:07,640 --> 00:12:12,590
bigger<font color="#CCCCCC"> lower-level</font><font color="#E5E5E5"> intermediate</font>

304
00:12:10,790 --> 00:12:14,660
representation means that it's more<font color="#E5E5E5"> work</font>

305
00:12:12,590 --> 00:12:16,490
for the<font color="#E5E5E5"> compiler and the runtime could</font>

306
00:12:14,660 --> 00:12:19,130
be longer also because if you think<font color="#E5E5E5"> if</font>

307
00:12:16,490 --> 00:12:21,770
<font color="#E5E5E5">you in a virtual machine where you're</font>

308
00:12:19,130 --> 00:12:23,390
interpreting<font color="#CCCCCC"> bytecode</font><font color="#E5E5E5"> every bytecode you</font>

309
00:12:21,770 --> 00:12:25,610
execute has a bit<font color="#CCCCCC"> of overhead</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

310
00:12:23,390 --> 00:12:27,710
<font color="#E5E5E5">interpretation for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> dispatch and so</font>

311
00:12:25,610 --> 00:12:29,000
if you add more<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> be</font>

312
00:12:27,710 --> 00:12:31,150
slowing<font color="#E5E5E5"> your program down even though</font>

313
00:12:29,000 --> 00:12:35,420
each one of them is smaller

314
00:12:31,150 --> 00:12:36,590
however<font color="#E5E5E5"> we generate it's easy to</font>

315
00:12:35,420 --> 00:12:38,479
generate<font color="#CCCCCC"> native code for</font><font color="#E5E5E5"> this so for</font>

316
00:12:36,590 --> 00:12:39,920
example this this<font color="#E5E5E5"> is to augment ations</font>

317
00:12:38,480 --> 00:12:41,660
of the same thing the top is the

318
00:12:39,920 --> 00:12:44,420
bytecode<font color="#E5E5E5"> interpreter for loading a</font>

319
00:12:41,660 --> 00:12:47,300
constant small constant<font color="#E5E5E5"> and the bottom</font>

320
00:12:44,420 --> 00:12:49,160
is emitting<font color="#E5E5E5"> machine code for</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> so I</font>

321
00:12:47,300 --> 00:12:51,829
put a<font color="#E5E5E5"> couple things in bold it's hard to</font>

322
00:12:49,160 --> 00:12:54,500
see basically<font color="#E5E5E5"> we you have an incoming</font>

323
00:12:51,830 --> 00:12:56,570
instruction<font color="#E5E5E5"> which is encoded as</font><font color="#CCCCCC"> a 32-bit</font>

324
00:12:54,500 --> 00:12:58,160
<font color="#CCCCCC">word</font><font color="#E5E5E5"> you have to parse out which</font>

325
00:12:56,570 --> 00:13:00,410
constant you're going to load and where

326
00:12:58,160 --> 00:13:02,329
you're going to put<font color="#CCCCCC"> it whereas at and</font>

327
00:13:00,410 --> 00:13:03,380
JIT compilation time you know exactly

328
00:13:02,330 --> 00:13:06,250
which constant you're going to

329
00:13:03,380 --> 00:13:07,939
materialize<font color="#E5E5E5"> into the native machine</font>

330
00:13:06,250 --> 00:13:09,140
instruction sequence and you<font color="#E5E5E5"> know</font>

331
00:13:07,940 --> 00:13:13,070
exactly what you're going to<font color="#E5E5E5"> put it</font>

332
00:13:09,140 --> 00:13:14,330
likewise<font color="#CCCCCC"> you have to dispatch to the</font>

333
00:13:13,070 --> 00:13:15,830
next instruction in the interpreter

334
00:13:14,330 --> 00:13:18,700
whereas with native<font color="#CCCCCC"> code you don't you</font>

335
00:13:15,830 --> 00:13:22,190
just fall through<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the next</font><font color="#CCCCCC"> thing so</font>

336
00:13:18,700 --> 00:13:24,290
although the optimizer<font color="#CCCCCC"> and compiler has</font>

337
00:13:22,190 --> 00:13:24,620
<font color="#CCCCCC">to do more work the underlying</font><font color="#E5E5E5"> engine is</font>

338
00:13:24,290 --> 00:13:27,770
<font color="#E5E5E5">going to</font>

339
00:13:24,620 --> 00:13:29,270
a lot faster<font color="#E5E5E5"> once</font><font color="#CCCCCC"> cheat</font><font color="#E5E5E5"> codes generated</font>

340
00:13:27,770 --> 00:13:33,319
and so the bet is that<font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> pay</font>

341
00:13:29,270 --> 00:13:35,300
off<font color="#CCCCCC"> always</font><font color="#E5E5E5"> and in my test it that's</font>

342
00:13:33,320 --> 00:13:39,140
almost<font color="#E5E5E5"> always true</font><font color="#CCCCCC"> and I'll get to that</font>

343
00:13:35,300 --> 00:13:41,900
<font color="#CCCCCC">in just a minute we use</font><font color="#E5E5E5"> I decided long</font>

344
00:13:39,140 --> 00:13:45,410
<font color="#CCCCCC">okay we use the new lightning</font><font color="#E5E5E5"> pretty</font>

345
00:13:41,900 --> 00:13:49,100
lightning is a project<font color="#E5E5E5"> which exposes</font><font color="#CCCCCC"> an</font>

346
00:13:45,410 --> 00:13:51,650
API when you run<font color="#CCCCCC"> JIT underscore Mavi in</font>

347
00:13:49,100 --> 00:13:54,890
it emits corresponding machine code to

348
00:13:51,650 --> 00:13:57,290
load<font color="#CCCCCC"> an immediate into a register and it</font>

349
00:13:54,890 --> 00:13:59,210
has backends<font color="#CCCCCC"> for every architecture</font>

350
00:13:57,290 --> 00:14:02,750
that's used today<font color="#E5E5E5"> and so on that side</font>

351
00:13:59,210 --> 00:14:03,110
it's really<font color="#E5E5E5"> good</font><font color="#CCCCCC"> the native code that</font>

352
00:14:02,750 --> 00:14:06,290
guy'll

353
00:14:03,110 --> 00:14:09,080
emits right now<font color="#E5E5E5"> does the corresponding</font>

354
00:14:06,290 --> 00:14:12,199
operations on the<font color="#E5E5E5"> guy'll stack that the</font>

355
00:14:09,080 --> 00:14:14,630
interpreter would and<font color="#CCCCCC"> i don't have time</font>

356
00:14:12,200 --> 00:14:16,700
<font color="#E5E5E5">to go into how the guy'll stack is</font>

357
00:14:14,630 --> 00:14:19,220
represented but<font color="#E5E5E5"> it means that</font><font color="#CCCCCC"> every</font>

358
00:14:16,700 --> 00:14:22,160
instruction<font color="#E5E5E5"> if it takes operands it will</font>

359
00:14:19,220 --> 00:14:23,780
load<font color="#E5E5E5"> them from memory</font><font color="#CCCCCC"> and if it produces</font>

360
00:14:22,160 --> 00:14:25,910
<font color="#E5E5E5">results it will write them back to</font>

361
00:14:23,780 --> 00:14:27,800
corresponding slots<font color="#E5E5E5"> currently there's no</font>

362
00:14:25,910 --> 00:14:30,370
register allocation<font color="#E5E5E5"> it's it's a next</font>

363
00:14:27,800 --> 00:14:33,979
<font color="#E5E5E5">step and</font><font color="#CCCCCC"> and it's a necessary</font><font color="#E5E5E5"> next step</font>

364
00:14:30,370 --> 00:14:35,210
<font color="#E5E5E5">however this does mean that you because</font>

365
00:14:33,980 --> 00:14:37,670
there is this correspondence between

366
00:14:35,210 --> 00:14:40,850
every interpretation<font color="#CCCCCC"> of an instruction</font>

367
00:14:37,670 --> 00:14:42,410
<font color="#E5E5E5">and every</font><font color="#CCCCCC"> JIT corresponding native code</font>

368
00:14:40,850 --> 00:14:43,730
for that<font color="#CCCCCC"> instruction it means you can</font>

369
00:14:42,410 --> 00:14:45,560
switch between the two<font color="#E5E5E5"> at any time you</font>

370
00:14:43,730 --> 00:14:47,120
want<font color="#E5E5E5"> so at any time do you determine</font>

371
00:14:45,560 --> 00:14:50,150
<font color="#E5E5E5">that a function is hot and you need to</font>

372
00:14:47,120 --> 00:14:52,160
<font color="#E5E5E5">admit native code you can do so and then</font>

373
00:14:50,150 --> 00:14:54,110
jump<font color="#E5E5E5"> into the corresponding place in</font>

374
00:14:52,160 --> 00:14:55,969
that<font color="#E5E5E5"> emitted machine code and if at any</font>

375
00:14:54,110 --> 00:14:57,050
time you determine actually<font color="#E5E5E5"> I need to do</font>

376
00:14:55,970 --> 00:14:58,850
some debugging<font color="#E5E5E5"> I need to set a</font>

377
00:14:57,050 --> 00:15:01,280
<font color="#E5E5E5">breakpoint I need to do whatever you can</font>

378
00:14:58,850 --> 00:15:04,250
<font color="#E5E5E5">jump down from machine code into the</font>

379
00:15:01,280 --> 00:15:05,990
<font color="#E5E5E5">corresponding byte code so on that side</font>

380
00:15:04,250 --> 00:15:08,180
we preserve a bit of simplicity<font color="#E5E5E5"> on the</font>

381
00:15:05,990 --> 00:15:10,280
<font color="#CCCCCC">imitation</font><font color="#E5E5E5"> side and the JIT itself is</font>

382
00:15:08,180 --> 00:15:12,859
only<font color="#CCCCCC"> 5,000 lines</font><font color="#E5E5E5"> of code not even source</font>

383
00:15:10,280 --> 00:15:14,500
lines like no physical lines of code<font color="#E5E5E5"> and</font>

384
00:15:12,860 --> 00:15:16,520
and we<font color="#E5E5E5"> did pretty good</font><font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of</font>

385
00:15:14,500 --> 00:15:17,540
number of<font color="#E5E5E5"> reserved registers there's</font>

386
00:15:16,520 --> 00:15:20,960
only one that<font color="#CCCCCC"> really</font><font color="#E5E5E5"> needs to be</font>

387
00:15:17,540 --> 00:15:22,219
preserved and there's a stack<font color="#E5E5E5"> register</font>

388
00:15:20,960 --> 00:15:24,530
which<font color="#E5E5E5"> is a sort of base pointer for</font>

389
00:15:22,220 --> 00:15:27,350
writing values that would<font color="#E5E5E5"> to be reloaded</font>

390
00:15:24,530 --> 00:15:29,870
<font color="#E5E5E5">but it's usually always there as well</font><font color="#CCCCCC"> so</font>

391
00:15:27,350 --> 00:15:33,440
<font color="#CCCCCC">the thing is when you generate native</font>

392
00:15:29,870 --> 00:15:34,640
code<font color="#E5E5E5"> when do you do</font><font color="#CCCCCC"> it right the you</font>

393
00:15:33,440 --> 00:15:36,980
have lots of choices

394
00:15:34,640 --> 00:15:38,580
<font color="#E5E5E5">and you generate native code with GCC</font>

395
00:15:36,980 --> 00:15:40,230
<font color="#E5E5E5">for example I had</font>

396
00:15:38,580 --> 00:15:42,240
you and your compile phase and then at

397
00:15:40,230 --> 00:15:44,250
<font color="#E5E5E5">runtime there's no code generation we</font>

398
00:15:42,240 --> 00:15:46,700
can<font color="#CCCCCC"> do this and this</font><font color="#E5E5E5"> is entirely</font>

399
00:15:44,250 --> 00:15:49,830
possible<font color="#E5E5E5"> it's not yet implemented but as</font>

400
00:15:46,700 --> 00:15:51,750
I mentioned currently the native code

401
00:15:49,830 --> 00:15:53,550
that we generate is a pure function of

402
00:15:51,750 --> 00:15:56,279
the<font color="#CCCCCC"> bytecode</font><font color="#E5E5E5"> that to which it</font>

403
00:15:53,550 --> 00:15:59,339
corresponds and so we can simply cache

404
00:15:56,279 --> 00:16:01,260
this<font color="#E5E5E5"> emitted code in the elf file that</font>

405
00:15:59,339 --> 00:16:05,010
we produce already in a separate section

406
00:16:01,260 --> 00:16:06,630
as<font color="#CCCCCC"> galahs object file format is elf and</font>

407
00:16:05,010 --> 00:16:07,500
it's one<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> format see</font><font color="#E5E5E5"> you can</font>

408
00:16:06,630 --> 00:16:12,839
have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of different sections</font>

409
00:16:07,500 --> 00:16:14,880
<font color="#E5E5E5">that's fine and the the bytecode that</font>

410
00:16:12,839 --> 00:16:19,140
<font color="#CCCCCC">guard limits</font><font color="#E5E5E5"> is done in such a way</font><font color="#CCCCCC"> that</font>

411
00:16:14,880 --> 00:16:20,399
this<font color="#E5E5E5"> is not really a linking hazard you</font>

412
00:16:19,140 --> 00:16:23,100
don't have to do a lot of relocations

413
00:16:20,399 --> 00:16:25,820
when you load the<font color="#E5E5E5"> code at runtime but as</font>

414
00:16:23,100 --> 00:16:29,279
I mentioned it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> yet implemented</font>

415
00:16:25,820 --> 00:16:31,529
<font color="#CCCCCC">currently what we have is just in time</font>

416
00:16:29,279 --> 00:16:33,839
code emission<font color="#E5E5E5"> write code emission</font>

417
00:16:31,529 --> 00:16:36,390
meaning at some point we determined that

418
00:16:33,839 --> 00:16:38,700
<font color="#E5E5E5">it</font><font color="#CCCCCC"> would be a good idea to emit native</font>

419
00:16:36,390 --> 00:16:40,439
code for this piece of<font color="#E5E5E5"> bytecode for</font><font color="#CCCCCC"> this</font>

420
00:16:38,700 --> 00:16:43,170
function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> its corresponding byte code</font>

421
00:16:40,440 --> 00:16:46,560
and we do that and and specifically we

422
00:16:43,170 --> 00:16:48,569
do this we<font color="#E5E5E5"> need to avoid</font><font color="#CCCCCC"> emitting JIT</font>

423
00:16:46,560 --> 00:16:51,479
code for code that's only run once<font color="#CCCCCC"> for</font>

424
00:16:48,570 --> 00:16:53,700
example<font color="#CCCCCC"> because if we emit JIT code</font><font color="#E5E5E5"> for</font>

425
00:16:51,480 --> 00:16:56,459
everything<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> system it means that</font>

426
00:16:53,700 --> 00:16:58,320
stuff that's not important<font color="#E5E5E5"> will undergo</font>

427
00:16:56,459 --> 00:16:59,670
<font color="#E5E5E5">the cost of emitting the JIT code plus</font>

428
00:16:58,320 --> 00:17:01,410
the<font color="#E5E5E5"> cost of running the instruction</font>

429
00:16:59,670 --> 00:17:03,120
which<font color="#CCCCCC"> is usually more than</font><font color="#E5E5E5"> the cost of</font>

430
00:17:01,410 --> 00:17:05,819
simply interpreting an instruction<font color="#E5E5E5"> and</font>

431
00:17:03,120 --> 00:17:07,260
that leads to<font color="#E5E5E5"> slower startup time and I</font>

432
00:17:05,819 --> 00:17:09,720
want to<font color="#E5E5E5"> keep things you know in the 10</font>

433
00:17:07,260 --> 00:17:11,369
millisecond 15 millisecond range<font color="#E5E5E5"> and a</font>

434
00:17:09,720 --> 00:17:14,010
lot of<font color="#E5E5E5"> guile is written in itself also</font>

435
00:17:11,369 --> 00:17:15,599
this is a this<font color="#CCCCCC"> is a fundamental bit of</font>

436
00:17:14,010 --> 00:17:17,910
this that it doesn't apply to a lot of

437
00:17:15,599 --> 00:17:21,240
<font color="#E5E5E5">other language imitations like</font><font color="#CCCCCC"> Mike Josh</font>

438
00:17:17,910 --> 00:17:22,709
<font color="#CCCCCC">JavaScript fermentations for example</font><font color="#E5E5E5"> so</font>

439
00:17:21,240 --> 00:17:25,199
what we what<font color="#CCCCCC"> we have is a counter</font>

440
00:17:22,709 --> 00:17:27,270
associated<font color="#E5E5E5"> with each function the</font>

441
00:17:25,199 --> 00:17:28,919
<font color="#E5E5E5">function is the unit for</font><font color="#CCCCCC"> which we emit</font>

442
00:17:27,270 --> 00:17:30,540
<font color="#E5E5E5">byte code and this counter is</font>

443
00:17:28,919 --> 00:17:33,240
<font color="#E5E5E5">incremented every time a function</font><font color="#CCCCCC"> is</font>

444
00:17:30,540 --> 00:17:35,790
called<font color="#E5E5E5"> and additionally at any loop back</font>

445
00:17:33,240 --> 00:17:37,679
edge or<font color="#E5E5E5"> any target of a loop package</font>

446
00:17:35,790 --> 00:17:39,870
rather and so when<font color="#E5E5E5"> this counter</font>

447
00:17:37,679 --> 00:17:42,210
overflows some threshold then<font color="#E5E5E5"> that</font>

448
00:17:39,870 --> 00:17:44,699
function<font color="#E5E5E5"> gets its corresponding native</font>

449
00:17:42,210 --> 00:17:46,919
code emitted and we jump into<font color="#CCCCCC"> that to</font>

450
00:17:44,700 --> 00:17:49,770
the corresponding native code<font color="#CCCCCC"> and</font>

451
00:17:46,919 --> 00:17:51,870
<font color="#CCCCCC">currently that that that</font><font color="#E5E5E5"> cheer-up</font>

452
00:17:49,770 --> 00:17:52,410
threshold it's called tearing up<font color="#CCCCCC"> when</font>

453
00:17:51,870 --> 00:17:54,419
you move

454
00:17:52,410 --> 00:17:56,370
from the bytecode<font color="#E5E5E5"> interpreter into</font>

455
00:17:54,420 --> 00:18:00,890
corresponding native code and<font color="#E5E5E5"> tuned down</font>

456
00:17:56,370 --> 00:18:04,860
otherwise<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> configurable threshold</font>

457
00:18:00,890 --> 00:18:07,290
<font color="#CCCCCC">so status where we at we have some</font>

458
00:18:04,860 --> 00:18:10,139
impedance problems with<font color="#CCCCCC"> new lightning</font>

459
00:18:07,290 --> 00:18:12,000
unfortunately<font color="#E5E5E5"> so good new lightning when</font>

460
00:18:10,140 --> 00:18:14,460
I remembered it<font color="#E5E5E5"> when I thought</font><font color="#CCCCCC"> about</font>

461
00:18:12,000 --> 00:18:17,130
<font color="#E5E5E5">what it was it was</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> project where it</font>

462
00:18:14,460 --> 00:18:21,330
<font color="#CCCCCC">was almost</font><font color="#E5E5E5"> written entirely in C++</font>

463
00:18:17,130 --> 00:18:23,070
macros or<font color="#E5E5E5"> C macros CPP macros</font><font color="#CCCCCC"> they would</font>

464
00:18:21,330 --> 00:18:25,919
just<font color="#CCCCCC"> omit code into a buffer</font><font color="#E5E5E5"> when you</font>

465
00:18:23,070 --> 00:18:28,439
run the thing but it turns out<font color="#CCCCCC"> that new</font>

466
00:18:25,920 --> 00:18:31,620
<font color="#CCCCCC">lightning had a major</font><font color="#E5E5E5"> version change in</font>

467
00:18:28,440 --> 00:18:33,840
which the API was kept mostly<font color="#E5E5E5"> the same</font>

468
00:18:31,620 --> 00:18:35,729
but<font color="#CCCCCC"> instead of emitting code directly it</font>

469
00:18:33,840 --> 00:18:37,409
built<font color="#E5E5E5"> up a graph of nodes which it would</font>

470
00:18:35,730 --> 00:18:40,100
then<font color="#E5E5E5"> proceed to optimize and do</font><font color="#CCCCCC"> register</font>

471
00:18:37,410 --> 00:18:43,260
allocation for in order to optimize

472
00:18:40,100 --> 00:18:44,939
<font color="#E5E5E5">especially calls and unfortunately</font>

473
00:18:43,260 --> 00:18:46,500
that's<font color="#E5E5E5"> just now we need I don't need</font>

474
00:18:44,940 --> 00:18:47,850
<font color="#E5E5E5">this</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to do register allocation I</font>

475
00:18:46,500 --> 00:18:49,890
don't<font color="#E5E5E5"> want this complexity</font><font color="#CCCCCC"> you know</font>

476
00:18:47,850 --> 00:18:52,080
lying underneath<font color="#E5E5E5"> what I'm working on</font><font color="#CCCCCC"> and</font>

477
00:18:49,890 --> 00:18:55,020
<font color="#E5E5E5">it crashes</font><font color="#CCCCCC"> and I don't understand why I</font>

478
00:18:52,080 --> 00:19:00,179
spend a<font color="#CCCCCC"> lot of time on</font><font color="#E5E5E5"> this and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> takes</font>

479
00:18:55,020 --> 00:19:02,040
time<font color="#E5E5E5"> so I need to abandon lightning</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> I</font>

480
00:19:00,180 --> 00:19:05,340
would go back<font color="#CCCCCC"> to one except it doesn't</font>

481
00:19:02,040 --> 00:19:07,139
<font color="#E5E5E5">have a lot of platform support so</font>

482
00:19:05,340 --> 00:19:11,100
currently unfortunately I'm looking at

483
00:19:07,140 --> 00:19:14,250
<font color="#E5E5E5">writing another stupid chip library</font><font color="#CCCCCC"> and</font>

484
00:19:11,100 --> 00:19:17,550
if anyone knows<font color="#E5E5E5"> of good appropriate</font>

485
00:19:14,250 --> 00:19:18,870
libraries<font color="#CCCCCC"> talk to me afterwards</font><font color="#E5E5E5"> and we</font>

486
00:19:17,550 --> 00:19:23,730
<font color="#E5E5E5">can and I'd be interested in</font><font color="#CCCCCC"> hearing</font>

487
00:19:18,870 --> 00:19:25,770
your experiences right<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so next the</font>

488
00:19:23,730 --> 00:19:27,120
quality of the code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we admit is not</font>

489
00:19:25,770 --> 00:19:30,600
great<font color="#E5E5E5"> and partly</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is because of</font>

490
00:19:27,120 --> 00:19:32,969
lightning but it's mostly<font color="#CCCCCC"> because of</font>

491
00:19:30,600 --> 00:19:34,649
lack of<font color="#E5E5E5"> good register allocation and so</font>

492
00:19:32,970 --> 00:19:37,590
that's that's a definite next step<font color="#E5E5E5"> and</font>

493
00:19:34,650 --> 00:19:39,540
this<font color="#CCCCCC"> is a totally well trodden path for</font>

494
00:19:37,590 --> 00:19:44,310
for<font color="#E5E5E5"> VMs like doing register allocation</font>

495
00:19:39,540 --> 00:19:46,170
over function<font color="#E5E5E5"> unit</font><font color="#CCCCCC"> bytecode and I I want</font>

496
00:19:44,310 --> 00:19:48,270
to<font color="#E5E5E5"> get us to a point at which</font><font color="#CCCCCC"> we have</font>

497
00:19:46,170 --> 00:19:51,570
<font color="#E5E5E5">consistently comparable performance</font>

498
00:19:48,270 --> 00:19:52,710
<font color="#CCCCCC">touche we beat them only a couple of</font>

499
00:19:51,570 --> 00:19:54,810
<font color="#E5E5E5">times in a couple of the standard</font>

500
00:19:52,710 --> 00:19:57,330
benchmarks now but<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> we're four to</font>

501
00:19:54,810 --> 00:19:59,879
<font color="#E5E5E5">ten times</font><font color="#CCCCCC"> slower</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> Shea and so I want</font>

502
00:19:57,330 --> 00:20:02,610
to be consistently within<font color="#E5E5E5"> you know a</font>

503
00:19:59,880 --> 00:20:05,060
factor of<font color="#CCCCCC"> 1 in terms</font><font color="#E5E5E5"> of speed compared</font>

504
00:20:02,610 --> 00:20:05,060
to Shea scheme

505
00:20:05,250 --> 00:20:08,220
if the compiler<font color="#CCCCCC"> has a lower-level</font>

506
00:20:06,600 --> 00:20:09,389
<font color="#CCCCCC">bytecode a lower level</font><font color="#E5E5E5"> intermediate</font>

507
00:20:08,220 --> 00:20:11,640
representation it works with your

508
00:20:09,390 --> 00:20:13,799
programs on a lower level<font color="#E5E5E5"> another</font>

509
00:20:11,640 --> 00:20:16,830
<font color="#E5E5E5">obvious thing is we don't always run</font>

510
00:20:13,799 --> 00:20:19,980
programs these days<font color="#E5E5E5"> in the form of you</font>

511
00:20:16,830 --> 00:20:21,689
know<font color="#E5E5E5"> compiled C code for</font><font color="#CCCCCC"> example most</font><font color="#E5E5E5"> of</font>

512
00:20:19,980 --> 00:20:23,669
programs many of<font color="#E5E5E5"> us run our written in</font>

513
00:20:21,690 --> 00:20:26,340
JavaScript and deployed via<font color="#CCCCCC"> web browser</font>

514
00:20:23,669 --> 00:20:28,289
and it seems<font color="#E5E5E5"> pretty obvious to target</font>

515
00:20:26,340 --> 00:20:30,059
the web assembly standard that probably

516
00:20:28,289 --> 00:20:31,919
<font color="#E5E5E5">most of you all know</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> there's a</font>

517
00:20:30,059 --> 00:20:34,230
proposal which I have to<font color="#E5E5E5"> check on its</font>

518
00:20:31,919 --> 00:20:38,370
status<font color="#E5E5E5"> called the GC proposal which</font>

519
00:20:34,230 --> 00:20:39,299
introduces<font color="#CCCCCC"> a typed heap to web assembly</font>

520
00:20:38,370 --> 00:20:41,399
which is<font color="#E5E5E5"> something that webassembly</font>

521
00:20:39,299 --> 00:20:43,440
doesn't have yet<font color="#E5E5E5"> and I would like to</font>

522
00:20:41,400 --> 00:20:46,980
depend on<font color="#CCCCCC"> that if that manages</font><font color="#E5E5E5"> to</font>

523
00:20:43,440 --> 00:20:48,570
<font color="#E5E5E5">progress obviously I think we need to</font>

524
00:20:46,980 --> 00:20:50,669
evolve the<font color="#CCCCCC"> length I</font><font color="#E5E5E5"> don't know if it's</font>

525
00:20:48,570 --> 00:20:52,340
obvious<font color="#E5E5E5"> to me wait</font><font color="#CCCCCC"> I would like to</font>

526
00:20:50,669 --> 00:20:54,690
evolve<font color="#CCCCCC"> guy'll a bit more and that means</font>

527
00:20:52,340 --> 00:20:56,699
<font color="#E5E5E5">moving closer to racket in some way and</font>

528
00:20:54,690 --> 00:20:58,260
<font color="#E5E5E5">what that means and how</font><font color="#CCCCCC"> to do it is a</font>

529
00:20:56,700 --> 00:21:02,190
<font color="#E5E5E5">long term project but but I want to do</font>

530
00:20:58,260 --> 00:21:05,450
and then otherwise<font color="#CCCCCC"> guile is this</font><font color="#E5E5E5"> project</font>

531
00:21:02,190 --> 00:21:08,700
that I'm kind of<font color="#CCCCCC"> a solitary teacher and</font>

532
00:21:05,450 --> 00:21:11,250
<font color="#CCCCCC">III have</font><font color="#E5E5E5"> had some support from work on</font>

533
00:21:08,700 --> 00:21:14,700
this and<font color="#E5E5E5"> it kind of</font><font color="#CCCCCC"> 20 percent 20 30 %</font>

534
00:21:11,250 --> 00:21:18,240
time<font color="#CCCCCC"> but it's it's a project</font><font color="#E5E5E5"> that I</font>

535
00:21:14,700 --> 00:21:22,830
<font color="#CCCCCC">enjoy doing</font><font color="#E5E5E5"> for myself</font><font color="#CCCCCC"> and and I and I I</font>

536
00:21:18,240 --> 00:21:24,179
perceive communication as as emotional

537
00:21:22,830 --> 00:21:25,470
<font color="#CCCCCC">labor because emotional</font><font color="#E5E5E5"> labor is</font>

538
00:21:24,179 --> 00:21:26,760
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> you don't want to</font><font color="#E5E5E5"> do in</font><font color="#CCCCCC"> self</font>

539
00:21:25,470 --> 00:21:29,250
<font color="#CCCCCC">care is</font><font color="#E5E5E5"> the things you do want to do</font>

540
00:21:26,760 --> 00:21:30,809
right<font color="#E5E5E5"> so I need to figure out how this</font>

541
00:21:29,250 --> 00:21:33,270
can scale better than just you know<font color="#E5E5E5"> some</font>

542
00:21:30,809 --> 00:21:34,710
dude<font color="#CCCCCC"> hacking on the thing</font><font color="#E5E5E5"> but I'm really</font>

543
00:21:33,270 --> 00:21:36,059
gratified especially about the geeks

544
00:21:34,710 --> 00:21:37,350
community that y'all<font color="#E5E5E5"> are just doing so</font>

545
00:21:36,059 --> 00:21:40,100
many amazing<font color="#CCCCCC"> things to it with</font><font color="#E5E5E5"> Kyle</font>

546
00:21:37,350 --> 00:21:44,039
without without my being there at all

547
00:21:40,100 --> 00:21:45,928
right<font color="#E5E5E5"> so yeah any any questions</font><font color="#CCCCCC"> check it</font>

548
00:21:44,039 --> 00:21:48,510
out we we're on<font color="#E5E5E5"> guile on on freenode</font><font color="#CCCCCC"> I</font>

549
00:21:45,929 --> 00:21:49,890
am there<font color="#E5E5E5"> you can ping me as we go and</font>

550
00:21:48,510 --> 00:21:53,100
otherwise we'll be<font color="#E5E5E5"> trying to get out</font>

551
00:21:49,890 --> 00:21:56,850
some<font color="#CCCCCC"> pre releases</font><font color="#E5E5E5"> I said in the talk</font>

552
00:21:53,100 --> 00:22:00,539
summary<font color="#E5E5E5"> in spring</font><font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> became I</font>

553
00:21:56,850 --> 00:22:02,309
<font color="#E5E5E5">think it might</font><font color="#CCCCCC"> be maybe</font><font color="#E5E5E5"> fall yeah but</font>

554
00:22:00,539 --> 00:22:04,940
but yeah that<font color="#E5E5E5"> that's it so I'll take any</font>

555
00:22:02,309 --> 00:22:04,940
<font color="#E5E5E5">questions thank you</font>

556
00:22:05,640 --> 00:22:11,839
[Applause]

557
00:22:12,809 --> 00:22:34,059
in back<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> question was in the</font>

558
00:22:30,759 --> 00:22:36,399
in the switch from gal<font color="#E5E5E5"> 1:8</font><font color="#CCCCCC"> to 2-0 among</font>

559
00:22:34,059 --> 00:22:38,710
the things<font color="#E5E5E5"> that changed was we adopted</font>

560
00:22:36,399 --> 00:22:41,979
the Bone Collector<font color="#CCCCCC"> and if anyone this</font><font color="#E5E5E5"> is</font>

561
00:22:38,710 --> 00:22:45,490
<font color="#CCCCCC">a conservative garbage collector I think</font>

562
00:22:41,980 --> 00:22:47,620
we I am satisfied<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it right now</font>

563
00:22:45,490 --> 00:22:50,590
I'm unsatisfied with it on a peak

564
00:22:47,620 --> 00:22:53,340
performance level and on on a polished

565
00:22:50,590 --> 00:22:58,629
I'm level so<font color="#E5E5E5"> this is like my performance</font>

566
00:22:53,340 --> 00:23:00,459
<font color="#CCCCCC">junkie talking here but I think these</font>

567
00:22:58,629 --> 00:23:03,519
things<font color="#CCCCCC"> can be fixed</font><font color="#E5E5E5"> in the future</font><font color="#CCCCCC"> as we</font>

568
00:23:00,460 --> 00:23:06,970
get<font color="#CCCCCC"> less</font><font color="#E5E5E5"> C code</font><font color="#CCCCCC"> change becomes more</font>

569
00:23:03,519 --> 00:23:09,850
possible<font color="#E5E5E5"> I think it was the right there</font>

570
00:23:06,970 --> 00:23:10,899
<font color="#E5E5E5">the</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> choice then but it's a</font>

571
00:23:09,850 --> 00:23:11,320
personal<font color="#E5E5E5"> pin I'd be happy to talk</font><font color="#CCCCCC"> about</font>

572
00:23:10,899 --> 00:23:38,379
<font color="#E5E5E5">that later</font>

573
00:23:11,320 --> 00:23:40,870
yeah<font color="#E5E5E5"> yes the question is why not because</font>

574
00:23:38,379 --> 00:23:42,850
we're interested moving to closer to

575
00:23:40,870 --> 00:23:45,699
record<font color="#E5E5E5"> which I think Chris will have</font>

576
00:23:42,850 --> 00:23:46,928
<font color="#E5E5E5">many thoughts on and the record itself</font>

577
00:23:45,700 --> 00:23:48,610
is rebasing

578
00:23:46,929 --> 00:23:51,639
<font color="#CCCCCC">its implantation on top of shade mine</font>

579
00:23:48,610 --> 00:23:54,490
why not<font color="#CCCCCC"> rebase on top of shake for</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> i</font>

580
00:23:51,639 --> 00:23:57,279
I enjoy the language<font color="#CCCCCC"> invitation work</font><font color="#E5E5E5"> and</font>

581
00:23:54,490 --> 00:23:59,649
I want to beat<font color="#CCCCCC"> Shay I think I can but</font>

582
00:23:57,279 --> 00:24:01,149
<font color="#E5E5E5">we'll see</font><font color="#CCCCCC"> but the back end is not</font><font color="#E5E5E5"> the</font>

583
00:23:59,649 --> 00:24:03,129
incredibly interesting thing I mean<font color="#E5E5E5"> I</font>

584
00:24:01,149 --> 00:24:08,379
think it's from<font color="#E5E5E5"> a user perspective it's</font>

585
00:24:03,129 --> 00:24:10,750
<font color="#CCCCCC">the language</font><font color="#E5E5E5"> you implement so I I want</font>

586
00:24:08,379 --> 00:24:13,120
to make the<font color="#E5E5E5"> language itself</font><font color="#CCCCCC"> I think</font>

587
00:24:10,750 --> 00:24:15,220
<font color="#CCCCCC">that's a higher</font><font color="#E5E5E5"> priority than what's</font>

588
00:24:13,120 --> 00:24:17,139
<font color="#E5E5E5">running underneath is kind of invitation</font>

589
00:24:15,220 --> 00:24:18,290
detail in some way whether it's a good

590
00:24:17,139 --> 00:24:20,870
or bad<font color="#E5E5E5"> invitation</font>

591
00:24:18,290 --> 00:24:22,580
choices<font color="#E5E5E5"> wow that's that's arguable</font>

592
00:24:20,870 --> 00:24:42,080
<font color="#CCCCCC">alright but it's</font><font color="#E5E5E5"> not it's</font><font color="#CCCCCC"> not essential</font>

593
00:24:22,580 --> 00:24:44,540
I don't think yeah oh no no no no<font color="#E5E5E5"> I mean</font>

594
00:24:42,080 --> 00:24:46,990
we have a bit<font color="#CCCCCC"> of an idea in terms of</font>

595
00:24:44,540 --> 00:24:49,010
<font color="#E5E5E5">calling convention between scheme code</font>

596
00:24:46,990 --> 00:24:51,260
<font color="#E5E5E5">obviously you need the native colleague</font>

597
00:24:49,010 --> 00:24:55,640
convention when you call out to<font color="#E5E5E5"> generic</font>

598
00:24:51,260 --> 00:24:58,400
runtime routines<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the common</font>

599
00:24:55,640 --> 00:25:03,410
convention kind of forces a bit<font color="#E5E5E5"> how you</font>

600
00:24:58,400 --> 00:25:06,350
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it yeah</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> it did this</font>

601
00:25:03,410 --> 00:25:09,520
<font color="#CCCCCC">earlier for related presentation I don't</font>

602
00:25:06,350 --> 00:25:12,020
<font color="#CCCCCC">have I don't have huge ideas no yeah I</font>

603
00:25:09,520 --> 00:25:14,330
keep getting convinced by various people

604
00:25:12,020 --> 00:25:16,100
saying oh I like linear<font color="#E5E5E5"> scan ooh I like</font>

605
00:25:14,330 --> 00:25:19,240
graph<font color="#E5E5E5"> coil</font><font color="#CCCCCC"> a saying oh I like iterative</font>

606
00:25:16,100 --> 00:25:21,860
whatever<font color="#E5E5E5"> so I don't right</font><font color="#CCCCCC"> now</font>

607
00:25:19,240 --> 00:25:24,190
<font color="#E5E5E5">okay manifesto my career Chris thank you</font>

608
00:25:21,860 --> 00:25:24,189
<font color="#E5E5E5">very much</font>

609
00:25:24,600 --> 00:25:29,329
[Applause]

