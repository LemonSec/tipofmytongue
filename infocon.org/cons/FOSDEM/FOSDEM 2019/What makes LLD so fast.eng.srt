1
00:00:06,640 --> 00:00:13,039
<font color="#CCCCCC">okay right</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> may as well get</font>

2
00:00:10,670 --> 00:00:15,500
going<font color="#CCCCCC"> so I'm here to tell you talk</font><font color="#E5E5E5"> to</font>

3
00:00:13,039 --> 00:00:17,630
you about<font color="#E5E5E5"> erm what makes</font><font color="#CCCCCC"> lld so</font><font color="#E5E5E5"> fast I</font>

4
00:00:15,500 --> 00:00:20,810
apologize<font color="#CCCCCC"> for</font><font color="#E5E5E5"> somewhat clickbait title</font>

5
00:00:17,630 --> 00:00:23,390
on<font color="#CCCCCC"> that one lld as a linkers</font><font color="#E5E5E5"> got a</font>

6
00:00:20,810 --> 00:00:26,839
reputation for being faster than<font color="#CCCCCC"> so</font>

7
00:00:23,390 --> 00:00:29,869
similarly similarly<font color="#CCCCCC"> linkers on</font><font color="#E5E5E5"> UNIX</font>

8
00:00:26,839 --> 00:00:32,960
<font color="#CCCCCC">systems and the</font><font color="#E5E5E5"> equivalent one on the</font>

9
00:00:29,869 --> 00:00:34,790
Microsoft<font color="#E5E5E5"> emulated one</font><font color="#CCCCCC"> L ugly cough I'm</font>

10
00:00:32,960 --> 00:00:36,290
going to be<font color="#E5E5E5"> sticking</font><font color="#CCCCCC"> to the elf one for</font>

11
00:00:34,790 --> 00:00:38,780
<font color="#E5E5E5">this particular talk that's</font><font color="#CCCCCC"> where most</font>

12
00:00:36,290 --> 00:00:41,329
<font color="#CCCCCC">of</font><font color="#E5E5E5"> my experiences</font><font color="#CCCCCC"> okay sorry I need to</font>

13
00:00:38,780 --> 00:00:43,969
<font color="#E5E5E5">speak</font><font color="#CCCCCC"> louder</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so I'm going to</font>

14
00:00:41,329 --> 00:00:46,340
cover today<font color="#CCCCCC"> so I have to</font><font color="#E5E5E5"> before I can</font>

15
00:00:43,969 --> 00:00:48,649
<font color="#E5E5E5">talk about why</font><font color="#CCCCCC"> LOD is so fast I have to</font>

16
00:00:46,340 --> 00:00:50,179
<font color="#E5E5E5">tell you a little bit</font><font color="#CCCCCC"> about what it</font><font color="#E5E5E5"> does</font>

17
00:00:48,649 --> 00:00:52,010
I know to some<font color="#CCCCCC"> people in the room this</font>

18
00:00:50,179 --> 00:00:53,780
they'll<font color="#E5E5E5"> be sort of quite intimately</font>

19
00:00:52,010 --> 00:00:55,339
familiar with<font color="#E5E5E5"> what a linker does so I</font>

20
00:00:53,780 --> 00:00:56,899
<font color="#CCCCCC">apologies for that</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> going to go</font>

21
00:00:55,340 --> 00:00:58,850
<font color="#E5E5E5">into the actual details</font><font color="#CCCCCC"> just give a</font>

22
00:00:56,899 --> 00:01:00,649
high-level overview<font color="#E5E5E5"> of what sort</font><font color="#CCCCCC"> of job</font>

23
00:00:58,850 --> 00:01:02,300
it's doing so I can<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of explain why</font>

24
00:01:00,649 --> 00:01:05,180
different<font color="#E5E5E5"> stages take different amounts</font>

25
00:01:02,300 --> 00:01:08,450
of<font color="#CCCCCC"> time and give you a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font>

26
00:01:05,180 --> 00:01:11,900
numbers<font color="#CCCCCC"> um</font><font color="#E5E5E5"> know how much faster</font><font color="#CCCCCC"> lld will</font>

27
00:01:08,450 --> 00:01:14,810
be than the new LD<font color="#E5E5E5"> which I might call LD</font>

28
00:01:11,900 --> 00:01:17,659
BFD or<font color="#CCCCCC"> M gold which I sometimes might</font>

29
00:01:14,810 --> 00:01:19,009
say LD gold that's sort of them but

30
00:01:17,659 --> 00:01:20,320
those<font color="#CCCCCC"> are</font><font color="#E5E5E5"> sort of the linkers</font><font color="#CCCCCC"> that</font>

31
00:01:19,009 --> 00:01:23,420
you're getting<font color="#E5E5E5"> binutils</font>

32
00:01:20,320 --> 00:01:26,689
<font color="#E5E5E5">I'll then go into some reasons</font><font color="#CCCCCC"> as why</font>

33
00:01:23,420 --> 00:01:28,490
that might be I don't<font color="#CCCCCC"> think I've</font><font color="#E5E5E5"> got all</font>

34
00:01:26,689 --> 00:01:31,939
<font color="#E5E5E5">the answers on that I've certainly got</font>

35
00:01:28,490 --> 00:01:33,829
<font color="#CCCCCC">some</font><font color="#E5E5E5"> ideas it's generally not one thing</font>

36
00:01:31,939 --> 00:01:35,148
it's lots and lots of little things<font color="#CCCCCC"> all</font>

37
00:01:33,829 --> 00:01:37,339
sort of going<font color="#E5E5E5"> through at</font><font color="#CCCCCC"> that particular</font>

38
00:01:35,149 --> 00:01:39,290
point and some of the non-technical

39
00:01:37,340 --> 00:01:41,329
<font color="#CCCCCC">factors why that might be the case and</font>

40
00:01:39,290 --> 00:01:42,950
you<font color="#CCCCCC"> know within every project there's</font>

41
00:01:41,329 --> 00:01:44,779
the<font color="#CCCCCC"> actual source code</font><font color="#E5E5E5"> executive</font><font color="#CCCCCC"> board</font>

42
00:01:42,950 --> 00:01:46,939
but<font color="#E5E5E5"> then there's also</font><font color="#CCCCCC"> the people that</font>

43
00:01:44,780 --> 00:01:48,560
maintain<font color="#CCCCCC"> lld and the sort of user</font>

44
00:01:46,939 --> 00:01:51,770
community behind<font color="#E5E5E5"> it that drive it in a</font>

45
00:01:48,560 --> 00:01:53,810
particular<font color="#E5E5E5"> direction</font><font color="#CCCCCC"> and my own brief</font>

46
00:01:51,770 --> 00:01:56,240
history with linkers is I've been and

47
00:01:53,810 --> 00:01:58,280
I'm working<font color="#E5E5E5"> at</font><font color="#CCCCCC"> llanera which is a sort</font>

48
00:01:56,240 --> 00:02:02,240
of an open<font color="#CCCCCC"> source</font><font color="#E5E5E5"> foundation doing work</font>

49
00:01:58,280 --> 00:02:05,119
<font color="#E5E5E5">for a out 64 type type areas so I've</font>

50
00:02:02,240 --> 00:02:07,699
made some<font color="#E5E5E5"> contributions to</font><font color="#CCCCCC"> L LD</font><font color="#E5E5E5"> and sort</font>

51
00:02:05,119 --> 00:02:09,889
<font color="#E5E5E5">of them mostly adding extra support for</font>

52
00:02:07,700 --> 00:02:14,019
<font color="#CCCCCC">our mandate at 64 and I've previously</font>

53
00:02:09,889 --> 00:02:18,220
worked<font color="#E5E5E5"> at our</font><font color="#CCCCCC"> Mong and embedded linkers</font>

54
00:02:14,019 --> 00:02:20,380
okay so what job does<font color="#E5E5E5"> a linker action</font>

55
00:02:18,220 --> 00:02:22,960
do so what we're going<font color="#E5E5E5"> to look about</font>

56
00:02:20,380 --> 00:02:25,359
here<font color="#E5E5E5"> is some of the contents of the elf</font>

57
00:02:22,960 --> 00:02:27,490
object file<font color="#CCCCCC"> format</font><font color="#E5E5E5"> because what a linker</font>

58
00:02:25,360 --> 00:02:30,640
does is intimate intimately tied to<font color="#E5E5E5"> the</font>

59
00:02:27,490 --> 00:02:31,870
actual object<font color="#CCCCCC"> file format</font><font color="#E5E5E5"> they're sort</font>

60
00:02:30,640 --> 00:02:35,290
<font color="#E5E5E5">of what you would call</font><font color="#CCCCCC"> the generic</font>

61
00:02:31,870 --> 00:02:36,670
linker design<font color="#E5E5E5"> it's kind of like there's</font>

62
00:02:35,290 --> 00:02:39,040
not that many ways you could actually

63
00:02:36,670 --> 00:02:41,980
write a linker<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would make any sense</font>

64
00:02:39,040 --> 00:02:44,560
so most linkers will follow one form<font color="#E5E5E5"> of</font>

65
00:02:41,980 --> 00:02:46,179
that design<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a little about little</font>

66
00:02:44,560 --> 00:02:47,710
bit<font color="#E5E5E5"> about the individual steps so</font>

67
00:02:46,180 --> 00:02:49,780
apologies are going to run<font color="#E5E5E5"> through this</font>

68
00:02:47,710 --> 00:02:51,790
stuff relatively quickly<font color="#E5E5E5"> because it's</font>

69
00:02:49,780 --> 00:02:54,160
you<font color="#E5E5E5"> know relatively obvious to a lot</font><font color="#CCCCCC"> of</font>

70
00:02:51,790 --> 00:02:56,950
you so first thing<font color="#CCCCCC"> about what a linker</font>

71
00:02:54,160 --> 00:02:58,420
is binds<font color="#E5E5E5"> more abstract names</font><font color="#CCCCCC"> to more</font>

72
00:02:56,950 --> 00:03:00,760
concrete names which is the definition

73
00:02:58,420 --> 00:03:03,579
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> only book you can buy on linkers</font>

74
00:03:00,760 --> 00:03:05,950
<font color="#CCCCCC">and loaders</font><font color="#E5E5E5"> it's probably about</font><font color="#CCCCCC"> eighteen</font>

75
00:03:03,580 --> 00:03:07,990
<font color="#CCCCCC">years</font><font color="#E5E5E5"> old I can pretty</font><font color="#CCCCCC"> much only use now</font>

76
00:03:05,950 --> 00:03:12,519
is to taunt graduates that it's older

77
00:03:07,990 --> 00:03:13,660
<font color="#CCCCCC">than them but but anyhow is if</font><font color="#E5E5E5"> actually</font>

78
00:03:12,520 --> 00:03:15,280
is<font color="#E5E5E5"> actually quite an</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> book</font>

79
00:03:13,660 --> 00:03:17,260
and<font color="#CCCCCC"> it certainly got</font><font color="#E5E5E5"> a lot of references</font>

80
00:03:15,280 --> 00:03:19,180
to<font color="#E5E5E5"> how things came to</font><font color="#CCCCCC"> be and if you want</font>

81
00:03:17,260 --> 00:03:20,769
to know why some things called something

82
00:03:19,180 --> 00:03:23,410
then this<font color="#E5E5E5"> book might have the answer</font><font color="#CCCCCC"> for</font>

83
00:03:20,770 --> 00:03:24,700
<font color="#CCCCCC">you but</font><font color="#E5E5E5"> typically a lot of</font><font color="#CCCCCC"> ink linkers</font>

84
00:03:23,410 --> 00:03:27,820
have moved to<font color="#E5E5E5"> little more towards elf</font>

85
00:03:24,700 --> 00:03:30,250
<font color="#E5E5E5">and here but in this in essence the cert</font>

86
00:03:27,820 --> 00:03:32,410
the summary<font color="#E5E5E5"> of it is that linkers are</font>

87
00:03:30,250 --> 00:03:34,780
<font color="#E5E5E5">kind of like glorified versions of cat</font>

88
00:03:32,410 --> 00:03:36,370
they've got<font color="#E5E5E5"> lots and lots of things</font><font color="#CCCCCC"> that</font>

89
00:03:34,780 --> 00:03:37,660
<font color="#CCCCCC">are coming from the compiler in terms of</font>

90
00:03:36,370 --> 00:03:39,519
objects it's got to glue them<font color="#E5E5E5"> all</font>

91
00:03:37,660 --> 00:03:43,060
together and resolve all the references

92
00:03:39,519 --> 00:03:44,590
between<font color="#E5E5E5"> all the bits okay so the three</font>

93
00:03:43,060 --> 00:03:48,540
<font color="#CCCCCC">main things if you're</font><font color="#E5E5E5"> going to remember</font>

94
00:03:44,590 --> 00:03:52,180
<font color="#E5E5E5">anything about</font><font color="#CCCCCC"> atop an elf file are</font>

95
00:03:48,540 --> 00:03:54,250
sections relocations and symbols so

96
00:03:52,180 --> 00:03:57,519
sections are kind of like the atoms<font color="#E5E5E5"> of</font>

97
00:03:54,250 --> 00:03:59,650
linking the<font color="#E5E5E5"> linker is generally not</font>

98
00:03:57,519 --> 00:04:01,690
allowed<font color="#E5E5E5"> to split these things up because</font>

99
00:03:59,650 --> 00:04:04,720
<font color="#CCCCCC">it doesn't really understand what goes</font>

100
00:04:01,690 --> 00:04:06,609
<font color="#CCCCCC">into them there are</font><font color="#E5E5E5"> exceptions to</font><font color="#CCCCCC"> that</font>

101
00:04:04,720 --> 00:04:08,320
particular case<font color="#E5E5E5"> for certain platforms</font>

102
00:04:06,610 --> 00:04:09,640
whatever but in general you<font color="#E5E5E5"> don't want</font>

103
00:04:08,320 --> 00:04:11,500
your linker<font color="#CCCCCC"> to actually have to</font>

104
00:04:09,640 --> 00:04:13,899
understand what's<font color="#E5E5E5"> intersections it</font>

105
00:04:11,500 --> 00:04:16,029
allows the<font color="#CCCCCC"> compiler to</font><font color="#E5E5E5"> basically emit</font>

106
00:04:13,900 --> 00:04:19,600
stuff that it knows that the<font color="#CCCCCC"> blink is</font>

107
00:04:16,029 --> 00:04:21,399
<font color="#E5E5E5">not going to</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> sections are just</font>

108
00:04:19,600 --> 00:04:23,070
think of them<font color="#E5E5E5"> as building</font><font color="#CCCCCC"> blocks that</font>

109
00:04:21,399 --> 00:04:26,049
the linker glues together and

110
00:04:23,070 --> 00:04:27,820
<font color="#E5E5E5">relocations are various points</font><font color="#CCCCCC"> where the</font>

111
00:04:26,050 --> 00:04:30,760
link is instructed<font color="#CCCCCC"> to fix up a reference</font>

112
00:04:27,820 --> 00:04:31,449
<font color="#E5E5E5">and the relocation will tell the linker</font>

113
00:04:30,760 --> 00:04:33,430
precisely

114
00:04:31,449 --> 00:04:35,080
what calculation it needs to do<font color="#E5E5E5"> and it's</font>

115
00:04:33,430 --> 00:04:37,210
that<font color="#E5E5E5"> precision in</font><font color="#CCCCCC"> the calculation that</font>

116
00:04:35,080 --> 00:04:39,609
<font color="#E5E5E5">needs to do enable</font><font color="#CCCCCC"> some Lincoln not</font><font color="#E5E5E5"> to</font>

117
00:04:37,210 --> 00:04:41,859
understand any of<font color="#E5E5E5"> the contents and</font>

118
00:04:39,610 --> 00:04:43,509
symbols<font color="#E5E5E5"> are kind of like labels in there</font>

119
00:04:41,860 --> 00:04:45,879
so in that particular<font color="#CCCCCC"> example</font><font color="#E5E5E5"> you've</font><font color="#CCCCCC"> got</font>

120
00:04:43,509 --> 00:04:47,919
something like<font color="#CCCCCC"> main the actual function</font>

121
00:04:45,879 --> 00:04:49,930
name well that<font color="#E5E5E5"> will get put out as a</font>

122
00:04:47,919 --> 00:04:51,998
symbol<font color="#CCCCCC"> so typically these things are</font>

123
00:04:49,930 --> 00:04:54,909
linked in<font color="#CCCCCC"> that set</font><font color="#E5E5E5"> you define your</font>

124
00:04:51,999 --> 00:04:57,339
symbols in<font color="#E5E5E5"> section as in sections so</font>

125
00:04:54,909 --> 00:05:00,219
main will might be offset<font color="#CCCCCC"> 0 in the dot</font>

126
00:04:57,339 --> 00:05:02,800
text section<font color="#CCCCCC"> and relocations refer to</font>

127
00:05:00,219 --> 00:05:04,389
symbols and relocations are associated

128
00:05:02,800 --> 00:05:06,400
<font color="#E5E5E5">with sections</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> all kind of this</font>

129
00:05:04,389 --> 00:05:10,629
three-way thing<font color="#E5E5E5"> that's going on there</font>

130
00:05:06,400 --> 00:05:13,239
<font color="#E5E5E5">okay so in an executive</font><font color="#CCCCCC"> ball elf file</font>

131
00:05:10,629 --> 00:05:15,120
all the<font color="#CCCCCC"> same sort of components are used</font>

132
00:05:13,240 --> 00:05:17,439
except you have some extra<font color="#CCCCCC"> things called</font>

133
00:05:15,120 --> 00:05:19,719
segments<font color="#E5E5E5"> that might have flags like</font>

134
00:05:17,439 --> 00:05:22,749
<font color="#E5E5E5">loadable that type of thing</font><font color="#CCCCCC"> so in effect</font>

135
00:05:19,719 --> 00:05:26,439
what a standard linker will do<font color="#E5E5E5"> and for a</font>

136
00:05:22,749 --> 00:05:29,139
sort<font color="#CCCCCC"> of elf like sorry linux</font><font color="#E5E5E5"> like so</font><font color="#CCCCCC"> svr</font>

137
00:05:26,439 --> 00:05:31,029
for where<font color="#E5E5E5"> you're paging the elf file</font>

138
00:05:29,139 --> 00:05:32,409
into memory to load it is that it's

139
00:05:31,029 --> 00:05:35,379
basically job is to<font color="#E5E5E5"> take all of these</font>

140
00:05:32,409 --> 00:05:37,990
<font color="#CCCCCC">little text sections from</font><font color="#E5E5E5"> the object</font>

141
00:05:35,379 --> 00:05:40,210
file glue them<font color="#E5E5E5"> into one big text section</font>

142
00:05:37,990 --> 00:05:42,580
<font color="#E5E5E5">in the sort of final executive</font><font color="#CCCCCC"> board</font>

143
00:05:40,210 --> 00:05:44,289
file so it's kind of like<font color="#E5E5E5"> slicing lots</font>

144
00:05:42,580 --> 00:05:45,789
of little bits<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> input files and</font>

145
00:05:44,289 --> 00:05:47,770
<font color="#E5E5E5">combined in the mount one bit at the end</font>

146
00:05:45,789 --> 00:05:49,270
and the job of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sort of a fast linker</font>

147
00:05:47,770 --> 00:05:52,299
is how to do that job<font color="#E5E5E5"> in the minimal</font>

148
00:05:49,270 --> 00:05:54,520
<font color="#CCCCCC">amount of time ok so here's what you</font>

149
00:05:52,300 --> 00:05:57,729
might call<font color="#E5E5E5"> your generic linker design is</font>

150
00:05:54,520 --> 00:06:00,609
very much<font color="#E5E5E5"> a pipeline type structure in</font>

151
00:05:57,729 --> 00:06:03,399
that<font color="#E5E5E5"> you've got the inputs on on the</font>

152
00:06:00,610 --> 00:06:05,949
<font color="#E5E5E5">right-hand side there lots</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> lots of</font>

153
00:06:03,399 --> 00:06:08,319
dot o files<font color="#E5E5E5"> some static archives where</font>

154
00:06:05,949 --> 00:06:10,870
the link has<font color="#CCCCCC"> to fetch the objects out of</font>

155
00:06:08,319 --> 00:06:12,939
<font color="#E5E5E5">them and the shared objects are files</font>

156
00:06:10,870 --> 00:06:15,550
and<font color="#CCCCCC"> that's so the first job that a link</font>

157
00:06:12,939 --> 00:06:17,560
<font color="#E5E5E5">has to do is that it's not given all the</font>

158
00:06:15,550 --> 00:06:19,930
files it<font color="#CCCCCC"> needs to look</font><font color="#E5E5E5"> for on the</font>

159
00:06:17,560 --> 00:06:22,419
<font color="#E5E5E5">command</font><font color="#CCCCCC"> line</font><font color="#E5E5E5"> it's sort of given usually</font>

160
00:06:19,930 --> 00:06:24,279
just find this stuff in this<font color="#CCCCCC"> lot in</font><font color="#E5E5E5"> in</font>

161
00:06:22,419 --> 00:06:26,409
these<font color="#E5E5E5"> libraries so the first</font><font color="#CCCCCC"> job is</font><font color="#E5E5E5"> to</font>

162
00:06:24,279 --> 00:06:29,349
<font color="#CCCCCC">actually go and look for all the various</font>

163
00:06:26,409 --> 00:06:31,240
content that it needs to load at that

164
00:06:29,349 --> 00:06:33,849
particular point<font color="#E5E5E5"> so once it's</font><font color="#CCCCCC"> loaded</font>

165
00:06:31,240 --> 00:06:35,649
everything<font color="#E5E5E5"> it can do what I call call</font>

166
00:06:33,849 --> 00:06:37,930
here global transforms these are things

167
00:06:35,649 --> 00:06:39,879
where things like garbage collection

168
00:06:37,930 --> 00:06:42,009
where in<font color="#E5E5E5"> order to throw something away</font>

169
00:06:39,879 --> 00:06:44,930
you need to know if<font color="#E5E5E5"> anything in the</font>

170
00:06:42,009 --> 00:06:46,729
program references<font color="#CCCCCC"> it and you can</font><font color="#E5E5E5"> only</font>

171
00:06:44,930 --> 00:06:48,680
that<font color="#E5E5E5"> some that nothing references</font>

172
00:06:46,729 --> 00:06:50,270
something<font color="#E5E5E5"> if you've read everything so</font>

173
00:06:48,680 --> 00:06:53,150
that's<font color="#E5E5E5"> the point where you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

174
00:06:50,270 --> 00:06:55,099
to the end<font color="#E5E5E5"> there</font><font color="#CCCCCC"> linkage generated</font>

175
00:06:53,150 --> 00:06:57,799
content<font color="#E5E5E5"> the is things like your</font>

176
00:06:55,100 --> 00:06:59,690
procedure linkage table PLT got that

177
00:06:57,800 --> 00:07:01,400
type of thing<font color="#CCCCCC"> I</font><font color="#E5E5E5"> won't be going into any</font>

178
00:06:59,690 --> 00:07:03,259
detail of those because they take<font color="#CCCCCC"> up a</font>

179
00:07:01,400 --> 00:07:06,739
<font color="#E5E5E5">fairly small proportion of the link time</font>

180
00:07:03,259 --> 00:07:09,500
overall<font color="#E5E5E5"> layout is where the link has got</font>

181
00:07:06,740 --> 00:07:10,639
all the<font color="#E5E5E5"> contents all ready to go but it</font>

182
00:07:09,500 --> 00:07:13,100
<font color="#CCCCCC">just</font><font color="#E5E5E5"> needs to assemble it in the right</font>

183
00:07:10,639 --> 00:07:15,620
<font color="#E5E5E5">order and give give things addresses</font>

184
00:07:13,100 --> 00:07:17,060
again<font color="#E5E5E5"> this is this can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> an interesting</font>

185
00:07:15,620 --> 00:07:19,190
<font color="#CCCCCC">thing for liquid performance because</font>

186
00:07:17,060 --> 00:07:19,820
once you've assigned<font color="#E5E5E5"> something</font><font color="#CCCCCC"> in</font>

187
00:07:19,190 --> 00:07:21,440
<font color="#CCCCCC">address</font>

188
00:07:19,820 --> 00:07:23,990
if you then<font color="#E5E5E5"> have to grow something</font>

189
00:07:21,440 --> 00:07:25,460
shrink something remove something<font color="#E5E5E5"> then</font>

190
00:07:23,990 --> 00:07:27,470
you've<font color="#E5E5E5"> got to recalculate</font><font color="#CCCCCC"> all your</font>

191
00:07:25,460 --> 00:07:29,180
addresses so there can be certain

192
00:07:27,470 --> 00:07:31,160
transformations towards the end of

193
00:07:29,180 --> 00:07:34,370
<font color="#E5E5E5">linking where you can end up</font><font color="#CCCCCC"> with sort</font>

194
00:07:31,160 --> 00:07:36,830
<font color="#E5E5E5">of having</font><font color="#CCCCCC"> to make a change</font><font color="#E5E5E5"> recalculate</font>

195
00:07:34,370 --> 00:07:39,770
all your addresses redo the change that

196
00:07:36,830 --> 00:07:41,539
type<font color="#CCCCCC"> of thing</font><font color="#E5E5E5"> and then finally you have</font>

197
00:07:39,770 --> 00:07:44,570
<font color="#CCCCCC">to copy</font><font color="#E5E5E5"> you all of the bits from</font><font color="#CCCCCC"> the</font>

198
00:07:41,539 --> 00:07:45,889
input into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output and fix up all the</font>

199
00:07:44,570 --> 00:07:48,320
differences<font color="#CCCCCC"> that sort of things actually</font>

200
00:07:45,889 --> 00:07:49,789
<font color="#E5E5E5">think that the</font><font color="#CCCCCC"> linker</font><font color="#E5E5E5"> does last to start</font>

201
00:07:48,320 --> 00:07:52,159
with<font color="#CCCCCC"> it's sort of</font><font color="#E5E5E5"> mostly just sucking</font>

202
00:07:49,789 --> 00:07:54,380
things in<font color="#E5E5E5"> at a</font><font color="#CCCCCC"> particular point in</font>

203
00:07:52,160 --> 00:07:56,210
general things get less symbolic and

204
00:07:54,380 --> 00:07:58,490
more concrete<font color="#CCCCCC"> that's sort of further to</font>

205
00:07:56,210 --> 00:08:00,138
the right you<font color="#E5E5E5"> go and one of the things</font>

206
00:07:58,490 --> 00:08:02,389
I'm<font color="#E5E5E5"> going to highlight here</font><font color="#CCCCCC"> is then the</font>

207
00:08:00,139 --> 00:08:05,270
order of the order<font color="#CCCCCC"> of processing that</font>

208
00:08:02,389 --> 00:08:08,120
<font color="#CCCCCC">you do things is significant</font><font color="#E5E5E5"> so if you</font>

209
00:08:05,270 --> 00:08:10,909
put one file before<font color="#E5E5E5"> the other in the</font>

210
00:08:08,120 --> 00:08:12,560
<font color="#E5E5E5">link line</font><font color="#CCCCCC"> you may get a different</font><font color="#E5E5E5"> you'll</font>

211
00:08:10,909 --> 00:08:14,240
get a different<font color="#E5E5E5"> binary out if you swap</font>

212
00:08:12,560 --> 00:08:17,840
those files around<font color="#E5E5E5"> on your command line</font>

213
00:08:14,240 --> 00:08:19,610
<font color="#E5E5E5">so that sort of ordering difference can</font>

214
00:08:17,840 --> 00:08:20,840
mean that it can limit<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the</font>

215
00:08:19,610 --> 00:08:25,669
things<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> might</font><font color="#E5E5E5"> be able to do in</font>

216
00:08:20,840 --> 00:08:26,719
<font color="#E5E5E5">parallel for example right so this is</font>

217
00:08:25,669 --> 00:08:28,130
going<font color="#E5E5E5"> to go through this incredibly</font>

218
00:08:26,720 --> 00:08:30,020
<font color="#E5E5E5">quickly don't worry about the slides</font>

219
00:08:28,130 --> 00:08:31,729
there but<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just static libraries</font>

220
00:08:30,020 --> 00:08:33,468
<font color="#CCCCCC">typically what you have is a list of</font>

221
00:08:31,729 --> 00:08:35,208
undefined symbols things that<font color="#CCCCCC"> linker</font>

222
00:08:33,469 --> 00:08:37,640
<font color="#CCCCCC">doesn't the program's</font><font color="#E5E5E5"> asked for</font>

223
00:08:35,208 --> 00:08:39,439
references<font color="#CCCCCC"> to doesn't know what what</font>

224
00:08:37,640 --> 00:08:42,110
they are<font color="#CCCCCC"> linked has to go through each</font>

225
00:08:39,440 --> 00:08:44,890
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> objects symbol tables say</font><font color="#CCCCCC"> does</font>

226
00:08:42,110 --> 00:08:47,570
this library define this symbol if so

227
00:08:44,890 --> 00:08:49,370
extract the library that library might

228
00:08:47,570 --> 00:08:50,959
have yet more undefined symbols so it's

229
00:08:49,370 --> 00:08:54,079
basically iterates until there are no

230
00:08:50,959 --> 00:08:55,459
more<font color="#E5E5E5"> symbols unresolved</font><font color="#CCCCCC"> and at that</font>

231
00:08:54,079 --> 00:08:57,680
point<font color="#E5E5E5"> you either give an error if</font>

232
00:08:55,459 --> 00:08:58,560
there's undefined symbols or you<font color="#E5E5E5"> carry</font>

233
00:08:57,680 --> 00:09:00,120
on to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next stage</font>

234
00:08:58,560 --> 00:09:01,709
linking<font color="#E5E5E5"> but that's just a sort</font><font color="#CCCCCC"> of</font>

235
00:09:00,120 --> 00:09:03,150
showing<font color="#CCCCCC"> you roughly</font><font color="#E5E5E5"> sort of the things</font>

236
00:09:01,710 --> 00:09:06,660
that we'll be<font color="#CCCCCC"> doing in</font><font color="#E5E5E5"> terms of</font><font color="#CCCCCC"> archive</font>

237
00:09:03,150 --> 00:09:08,400
files<font color="#CCCCCC"> okay so this</font><font color="#E5E5E5"> is what the sort of</font>

238
00:09:06,660 --> 00:09:11,219
internal state of<font color="#CCCCCC"> a linker will look</font>

239
00:09:08,400 --> 00:09:14,279
like after<font color="#CCCCCC"> it's read in</font><font color="#E5E5E5"> all of the stuff</font>

240
00:09:11,220 --> 00:09:16,500
<font color="#E5E5E5">it's kind</font><font color="#CCCCCC"> of like</font><font color="#E5E5E5"> this and a directed</font>

241
00:09:14,279 --> 00:09:18,270
graph<font color="#CCCCCC"> I deliberately say not I say</font>

242
00:09:16,500 --> 00:09:22,500
<font color="#E5E5E5">cyclic because you've planned get cycles</font>

243
00:09:18,270 --> 00:09:25,140
within<font color="#CCCCCC"> here of sort</font><font color="#E5E5E5"> of input sections</font>

244
00:09:22,500 --> 00:09:28,080
that reference<font color="#E5E5E5"> other sections so one</font><font color="#CCCCCC"> of</font>

245
00:09:25,140 --> 00:09:29,760
<font color="#E5E5E5">those might</font><font color="#CCCCCC"> be your main function</font><font color="#E5E5E5"> in one</font>

246
00:09:28,080 --> 00:09:31,830
of the<font color="#CCCCCC"> sections it might call out to</font>

247
00:09:29,760 --> 00:09:34,740
printf which will be in<font color="#E5E5E5"> another</font><font color="#CCCCCC"> section</font>

248
00:09:31,830 --> 00:09:36,720
that<font color="#CCCCCC"> type of thing and I've put an a</font>

249
00:09:34,740 --> 00:09:39,750
section<font color="#E5E5E5"> up the top right there that's</font>

250
00:09:36,720 --> 00:09:41,490
unreachable<font color="#E5E5E5"> this is kind of how</font><font color="#CCCCCC"> linker</font>

251
00:09:39,750 --> 00:09:44,040
garbage collection works<font color="#E5E5E5"> it'll start</font>

252
00:09:41,490 --> 00:09:48,660
from an entry<font color="#E5E5E5"> point trace out all</font><font color="#CCCCCC"> the</font>

253
00:09:44,040 --> 00:09:50,670
relocation see if it can find a well see

254
00:09:48,660 --> 00:09:52,469
how many<font color="#E5E5E5"> sections it can reach and the</font>

255
00:09:50,670 --> 00:09:54,150
sections<font color="#E5E5E5"> that it can't reach</font><font color="#CCCCCC"> that</font>

256
00:09:52,470 --> 00:09:56,610
there's no way your program<font color="#CCCCCC"> can get</font><font color="#E5E5E5"> to</font>

257
00:09:54,150 --> 00:09:58,860
them so<font color="#E5E5E5"> or at least</font><font color="#CCCCCC"> not by any legal</font>

258
00:09:56,610 --> 00:10:01,110
<font color="#E5E5E5">means other than say having to know the</font>

259
00:09:58,860 --> 00:10:03,060
<font color="#E5E5E5">addresses and random and</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> jumping to</font>

260
00:10:01,110 --> 00:10:04,530
<font color="#E5E5E5">it the link generally you're on your own</font>

261
00:10:03,060 --> 00:10:07,469
<font color="#E5E5E5">if you do</font><font color="#CCCCCC"> template sub-site that's</font><font color="#E5E5E5"> an</font>

262
00:10:04,530 --> 00:10:09,180
<font color="#E5E5E5">enable garbage collection but yeah so</font>

263
00:10:07,470 --> 00:10:10,260
this<font color="#E5E5E5"> particular stage link has no idea</font>

264
00:10:09,180 --> 00:10:12,449
what the<font color="#E5E5E5"> address of any of these</font>

265
00:10:10,260 --> 00:10:14,220
sections<font color="#E5E5E5"> are if you take one</font><font color="#CCCCCC"> out it</font>

266
00:10:12,450 --> 00:10:15,600
<font color="#E5E5E5">doesn't</font><font color="#CCCCCC"> really matter in terms</font><font color="#E5E5E5"> of</font>

267
00:10:14,220 --> 00:10:19,980
performance<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just connect up</font>

268
00:10:15,600 --> 00:10:22,140
<font color="#CCCCCC">three locations and go there</font><font color="#E5E5E5"> okay layout</font>

269
00:10:19,980 --> 00:10:23,339
this<font color="#E5E5E5"> is just a sort of a general</font><font color="#CCCCCC"> idea of</font>

270
00:10:22,140 --> 00:10:26,130
<font color="#E5E5E5">what it does I</font><font color="#CCCCCC"> don't want to go into the</font>

271
00:10:23,339 --> 00:10:28,170
<font color="#CCCCCC">process in detail</font><font color="#E5E5E5"> but generally what</font>

272
00:10:26,130 --> 00:10:30,150
happens<font color="#E5E5E5"> is that you'll start with an</font>

273
00:10:28,170 --> 00:10:32,520
output section<font color="#CCCCCC"> and then you'll put all</font>

274
00:10:30,150 --> 00:10:34,589
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the input sections which match</font><font color="#CCCCCC"> it's a</font>

275
00:10:32,520 --> 00:10:36,210
particular pattern<font color="#E5E5E5"> you start with the</font>

276
00:10:34,589 --> 00:10:38,280
<font color="#E5E5E5">address at the</font><font color="#CCCCCC"> top and then you</font>

277
00:10:36,210 --> 00:10:40,290
basically just add<font color="#E5E5E5"> things address</font>

278
00:10:38,280 --> 00:10:42,449
offsets<font color="#E5E5E5"> from</font><font color="#CCCCCC"> that particular</font><font color="#E5E5E5"> base as you</font>

279
00:10:40,290 --> 00:10:43,490
<font color="#CCCCCC">go with various alignment constraints</font>

280
00:10:42,450 --> 00:10:45,390
that's generally a fairly

281
00:10:43,490 --> 00:10:51,120
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> process for a linker to</font>

282
00:10:45,390 --> 00:10:52,800
<font color="#E5E5E5">do okay relocation just so they give you</font>

283
00:10:51,120 --> 00:10:55,920
an<font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> what it might actually be</font>

284
00:10:52,800 --> 00:10:57,750
it's it's it's kind<font color="#CCCCCC"> of an a particular</font>

285
00:10:55,920 --> 00:10:59,819
calculation will sort of give you a

286
00:10:57,750 --> 00:11:02,550
<font color="#E5E5E5">symbol to go look up find its address</font>

287
00:10:59,820 --> 00:11:06,089
and it<font color="#E5E5E5"> will give you an</font><font color="#CCCCCC"> odd end and it</font>

288
00:11:02,550 --> 00:11:08,099
will<font color="#E5E5E5"> just say to the linker either do an</font>

289
00:11:06,089 --> 00:11:10,440
absolute or<font color="#E5E5E5"> a relative calculation based</font>

290
00:11:08,100 --> 00:11:11,880
on that so<font color="#E5E5E5"> an absolute collection is</font>

291
00:11:10,440 --> 00:11:12,180
just<font color="#E5E5E5"> put</font><font color="#CCCCCC"> the value of the symbol in</font>

292
00:11:11,880 --> 00:11:14,339
there

293
00:11:12,180 --> 00:11:16,170
so if you say if you<font color="#E5E5E5"> say get me the</font>

294
00:11:14,339 --> 00:11:17,160
<font color="#E5E5E5">address of this global variable</font><font color="#CCCCCC"> and</font>

295
00:11:16,170 --> 00:11:19,740
you're not doing<font color="#E5E5E5"> position independent</font>

296
00:11:17,160 --> 00:11:22,469
code it can just say the link<font color="#E5E5E5"> it can</font>

297
00:11:19,740 --> 00:11:24,630
just splat the value of the<font color="#E5E5E5"> address</font>

298
00:11:22,470 --> 00:11:26,700
directly<font color="#E5E5E5"> into that</font><font color="#CCCCCC"> location if you're</font>

299
00:11:24,630 --> 00:11:31,589
<font color="#E5E5E5">doing a position</font><font color="#CCCCCC"> independent one</font><font color="#E5E5E5"> it has</font>

300
00:11:26,700 --> 00:11:33,779
to<font color="#E5E5E5"> add various offsets</font><font color="#CCCCCC"> to that okay so</font>

301
00:11:31,589 --> 00:11:35,940
we're now sort<font color="#E5E5E5"> of gone through what a</font>

302
00:11:33,779 --> 00:11:40,140
linker does<font color="#E5E5E5"> I can now move on</font><font color="#CCCCCC"> to how</font>

303
00:11:35,940 --> 00:11:41,459
fast<font color="#CCCCCC"> lld is okay so the</font><font color="#E5E5E5"> next sort of</font>

304
00:11:40,140 --> 00:11:43,080
section I'm<font color="#E5E5E5"> going to give you a bit</font><font color="#CCCCCC"> of a</font>

305
00:11:41,459 --> 00:11:46,410
<font color="#E5E5E5">warning on the numbers these sort of</font>

306
00:11:43,080 --> 00:11:48,600
things<font color="#E5E5E5"> the differences between the</font>

307
00:11:46,410 --> 00:11:51,660
actual<font color="#E5E5E5"> and</font><font color="#CCCCCC"> measurements that I've done</font>

308
00:11:48,600 --> 00:11:54,360
<font color="#E5E5E5">are quite large so I've not really done</font>

309
00:11:51,660 --> 00:11:57,569
a huge<font color="#CCCCCC"> in depth benchmarking study with</font>

310
00:11:54,360 --> 00:11:59,520
scientific<font color="#E5E5E5"> conditions generally</font><font color="#CCCCCC"> the</font>

311
00:11:57,570 --> 00:12:01,070
variable<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> variable misses it</font>

312
00:11:59,520 --> 00:12:02,970
sufficiently<font color="#E5E5E5"> huh</font><font color="#CCCCCC"> well the actual</font>

313
00:12:01,070 --> 00:12:04,740
<font color="#E5E5E5">differences are sufficiently high</font><font color="#CCCCCC"> that</font>

314
00:12:02,970 --> 00:12:06,390
any sort<font color="#CCCCCC"> of form of Machine jitter and</font>

315
00:12:04,740 --> 00:12:08,279
variance is not going to be<font color="#E5E5E5"> that</font>

316
00:12:06,390 --> 00:12:10,920
significant in there so that's<font color="#E5E5E5"> the</font>

317
00:12:08,279 --> 00:12:13,589
<font color="#E5E5E5">Machine I ran most of my benchmarks on</font>

318
00:12:10,920 --> 00:12:15,180
it's a fairly fast machine<font color="#E5E5E5"> and it's got</font>

319
00:12:13,589 --> 00:12:16,920
a lot of memory your<font color="#E5E5E5"> mileage will</font>

320
00:12:15,180 --> 00:12:19,500
obviously vary if you have<font color="#CCCCCC"> small</font>

321
00:12:16,920 --> 00:12:22,829
machines lower core count<font color="#E5E5E5"> lower memory</font><font color="#CCCCCC"> I</font>

322
00:12:19,500 --> 00:12:26,190
have done some tests<font color="#E5E5E5"> on a Thunder x1</font>

323
00:12:22,830 --> 00:12:28,680
which<font color="#CCCCCC"> is an</font><font color="#E5E5E5"> a out 64 machine with quite</font>

324
00:12:26,190 --> 00:12:30,450
low single thread performance<font color="#CCCCCC"> it in</font>

325
00:12:28,680 --> 00:12:34,319
relation to<font color="#E5E5E5"> a Pentium but it's got an</font>

326
00:12:30,450 --> 00:12:36,060
awful<font color="#CCCCCC"> lot of cause and I certainly see</font>

327
00:12:34,320 --> 00:12:38,040
similar differences and in some cases

328
00:12:36,060 --> 00:12:39,959
more differences depending on how

329
00:12:38,040 --> 00:12:43,800
depending on<font color="#E5E5E5"> how much multi-threading</font>

330
00:12:39,959 --> 00:12:46,709
the actual program can do<font color="#E5E5E5"> okay so so</font>

331
00:12:43,800 --> 00:12:48,359
this<font color="#E5E5E5"> is kind of a table showing some</font>

332
00:12:46,709 --> 00:12:51,569
results<font color="#CCCCCC"> that I got</font><font color="#E5E5E5"> it's quite confusing</font>

333
00:12:48,360 --> 00:12:53,820
<font color="#CCCCCC">type thing to read at first so</font><font color="#E5E5E5"> the</font>

334
00:12:51,570 --> 00:12:56,130
programs that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> and sort of chose to</font>

335
00:12:53,820 --> 00:12:58,560
look at were<font color="#E5E5E5"> basically some things that</font>

336
00:12:56,130 --> 00:13:03,300
I had lying around at the time<font color="#E5E5E5"> that I</font>

337
00:12:58,560 --> 00:13:05,790
know to<font color="#E5E5E5"> be large so clang itself is</font>

338
00:13:03,300 --> 00:13:07,500
statically linked against a lot of

339
00:13:05,790 --> 00:13:09,930
libraries<font color="#CCCCCC"> and it can come to about</font>

340
00:13:07,500 --> 00:13:13,680
<font color="#E5E5E5">probably about</font><font color="#CCCCCC"> 30 to 40 megabytes of</font>

341
00:13:09,930 --> 00:13:16,770
code and I've deliberately included

342
00:13:13,680 --> 00:13:18,270
clang<font color="#E5E5E5"> and plan with debug just to sort</font>

343
00:13:16,770 --> 00:13:21,360
of show<font color="#CCCCCC"> the impact of adding debug</font>

344
00:13:18,270 --> 00:13:23,730
information has so clang might have

345
00:13:21,360 --> 00:13:25,589
about<font color="#E5E5E5"> 40 megabytes of</font>

346
00:13:23,730 --> 00:13:27,269
code<font color="#E5E5E5"> but it might end up with six or</font>

347
00:13:25,589 --> 00:13:30,089
<font color="#CCCCCC">seven</font><font color="#E5E5E5"> hundred megabytes worth a debug</font>

348
00:13:27,269 --> 00:13:32,970
data<font color="#E5E5E5"> to go through</font><font color="#CCCCCC"> the difference</font>

349
00:13:30,089 --> 00:13:36,209
between<font color="#CCCCCC"> O</font><font color="#E5E5E5"> 2 and O one is that when you</font>

350
00:13:32,970 --> 00:13:39,449
go to<font color="#E5E5E5"> and</font><font color="#CCCCCC"> lld</font><font color="#E5E5E5"> will try and optimize</font>

351
00:13:36,209 --> 00:13:42,750
strings to do<font color="#CCCCCC"> tale merging and that</font>

352
00:13:39,449 --> 00:13:45,120
process<font color="#E5E5E5"> is</font><font color="#CCCCCC"> quite expensive o 1 it will</font>

353
00:13:42,750 --> 00:13:46,769
just say merge identical strings<font color="#E5E5E5"> and</font>

354
00:13:45,120 --> 00:13:49,019
<font color="#E5E5E5">that can be done in parallel</font><font color="#CCCCCC"> so you'll</font>

355
00:13:46,769 --> 00:13:51,600
see that there's a jump between in speed

356
00:13:49,019 --> 00:13:53,430
between o 1 and O<font color="#CCCCCC"> 2 and that jump is</font>

357
00:13:51,600 --> 00:13:55,350
higher<font color="#E5E5E5"> for debug sections because</font>

358
00:13:53,430 --> 00:13:58,560
<font color="#E5E5E5">there's a lot of merciful strings and</font>

359
00:13:55,350 --> 00:14:00,750
debug sections to comparison to compare

360
00:13:58,560 --> 00:14:03,479
that with I've also looked at turn Lib

361
00:14:00,750 --> 00:14:06,660
<font color="#E5E5E5">chrome so on a out 64 so that's actually</font>

362
00:14:03,480 --> 00:14:08,670
<font color="#CCCCCC">building Chrome for Android and so</font>

363
00:14:06,660 --> 00:14:11,219
that's just<font color="#CCCCCC"> to show you a a different</font>

364
00:14:08,670 --> 00:14:13,680
program so that it has different

365
00:14:11,220 --> 00:14:16,410
<font color="#CCCCCC">characteristics</font><font color="#E5E5E5"> it kind of them is not</font>

366
00:14:13,680 --> 00:14:19,170
<font color="#CCCCCC">that much bigger than then playing</font>

367
00:14:16,410 --> 00:14:21,660
<font color="#E5E5E5">itself but it has it compiled</font>

368
00:14:19,170 --> 00:14:24,930
differently<font color="#CCCCCC"> and has a lot more a lot</font>

369
00:14:21,660 --> 00:14:26,069
<font color="#E5E5E5">more smaller files</font><font color="#CCCCCC"> ok</font>

370
00:14:24,930 --> 00:14:28,469
so<font color="#E5E5E5"> just to give you sort of a general</font>

371
00:14:26,070 --> 00:14:31,649
<font color="#E5E5E5">idea in the speed though and you can see</font>

372
00:14:28,470 --> 00:14:35,459
that<font color="#E5E5E5"> even with turning threading off</font><font color="#CCCCCC"> and</font>

373
00:14:31,649 --> 00:14:38,370
<font color="#CCCCCC">you're sort of finding</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and lld can</font>

374
00:14:35,459 --> 00:14:41,579
be about round about twice as fast as

375
00:14:38,370 --> 00:14:45,899
gold<font color="#E5E5E5"> and can be AB up to 3 to 5 times</font>

376
00:14:41,579 --> 00:14:46,649
<font color="#CCCCCC">faster than than new LD BFD that type of</font>

377
00:14:45,899 --> 00:14:50,010
<font color="#E5E5E5">thing</font>

378
00:14:46,649 --> 00:14:52,680
and with threading in the many<font color="#E5E5E5"> cases</font>

379
00:14:50,010 --> 00:14:55,050
clang<font color="#E5E5E5"> so</font><font color="#CCCCCC"> lld can get more performance</font>

380
00:14:52,680 --> 00:14:58,189
<font color="#CCCCCC">than gold does with with threading</font>

381
00:14:55,050 --> 00:15:01,199
enabled<font color="#CCCCCC"> I used 4 threads there because</font>

382
00:14:58,190 --> 00:15:03,810
the gold threading architecture seems to

383
00:15:01,199 --> 00:15:05,399
top out about<font color="#E5E5E5"> that much and</font><font color="#CCCCCC"> sometimes</font>

384
00:15:03,810 --> 00:15:06,329
can actually regress in performance when

385
00:15:05,399 --> 00:15:09,690
you add<font color="#E5E5E5"> more threads</font>

386
00:15:06,329 --> 00:15:11,489
<font color="#CCCCCC">I used the value</font><font color="#E5E5E5"> that the chrome linker</font>

387
00:15:09,690 --> 00:15:12,870
scripts used<font color="#E5E5E5"> there on the assumption</font>

388
00:15:11,490 --> 00:15:14,670
that they've<font color="#E5E5E5"> done their benchmarking and</font>

389
00:15:12,870 --> 00:15:19,220
decided that<font color="#CCCCCC"> 4 was</font><font color="#E5E5E5"> the best one to</font><font color="#CCCCCC"> go</font>

390
00:15:14,670 --> 00:15:21,380
for for that particular program so

391
00:15:19,220 --> 00:15:23,900
it would be really<font color="#E5E5E5"> great if every single</font>

392
00:15:21,380 --> 00:15:25,670
<font color="#E5E5E5">program had exactly the</font><font color="#CCCCCC"> same pattern</font><font color="#E5E5E5"> of</font>

393
00:15:23,900 --> 00:15:27,459
accesses so<font color="#CCCCCC"> I could say this bit of that</font>

394
00:15:25,670 --> 00:15:29,959
<font color="#CCCCCC">linker</font><font color="#E5E5E5"> is where the problem is</font>

395
00:15:27,460 --> 00:15:32,420
unfortunately there's various<font color="#CCCCCC"> different</font>

396
00:15:29,960 --> 00:15:37,130
<font color="#CCCCCC">stages and that</font><font color="#E5E5E5"> are sort of basically</font>

397
00:15:32,420 --> 00:15:39,949
<font color="#E5E5E5">hit by different programs</font><font color="#CCCCCC"> so for example</font>

398
00:15:37,130 --> 00:15:42,140
if you do F function sections which

399
00:15:39,950 --> 00:15:44,510
basically compiles every function<font color="#CCCCCC"> in its</font>

400
00:15:42,140 --> 00:15:46,910
own section<font color="#CCCCCC"> which makes it easier for</font>

401
00:15:44,510 --> 00:15:51,350
the linker to<font color="#E5E5E5"> throw away on new section</font>

402
00:15:46,910 --> 00:15:53,449
and unused functions that can if you've

403
00:15:51,350 --> 00:15:55,550
got say<font color="#CCCCCC"> ten functions</font><font color="#E5E5E5"> and the job in</font>

404
00:15:53,450 --> 00:15:57,080
each object file that can multiply the

405
00:15:55,550 --> 00:16:00,199
number of<font color="#E5E5E5"> sections a link has</font><font color="#CCCCCC"> to deal</font>

406
00:15:57,080 --> 00:16:02,750
<font color="#CCCCCC">with by ten</font><font color="#E5E5E5"> and so it does change the</font>

407
00:16:00,200 --> 00:16:05,210
<font color="#E5E5E5">characteristics somewhat and debug data</font>

408
00:16:02,750 --> 00:16:08,630
<font color="#E5E5E5">as I said before adds a huge amount of</font>

409
00:16:05,210 --> 00:16:11,380
actual<font color="#CCCCCC"> and generally quite simple</font>

410
00:16:08,630 --> 00:16:14,630
information<font color="#E5E5E5"> to process but it also</font>

411
00:16:11,380 --> 00:16:18,140
consider them affect various different

412
00:16:14,630 --> 00:16:19,580
<font color="#CCCCCC">points of link time</font><font color="#E5E5E5"> and C++ can C++</font>

413
00:16:18,140 --> 00:16:22,189
programs are generally<font color="#CCCCCC"> more challenging</font>

414
00:16:19,580 --> 00:16:25,700
to link than than C due to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> extra</font>

415
00:16:22,190 --> 00:16:28,970
sort<font color="#CCCCCC"> of them l facilities they use</font><font color="#E5E5E5"> okay</font>

416
00:16:25,700 --> 00:16:30,920
<font color="#E5E5E5">so what</font><font color="#CCCCCC"> i've got</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is a very rough</font>

417
00:16:28,970 --> 00:16:34,040
<font color="#E5E5E5">indication of some of the numbers of</font>

418
00:16:30,920 --> 00:16:36,260
<font color="#E5E5E5">components</font><font color="#CCCCCC"> here so</font><font color="#E5E5E5"> this is just these</font>

419
00:16:34,040 --> 00:16:38,870
are approximations and<font color="#CCCCCC"> i've rounded</font><font color="#E5E5E5"> them</font>

420
00:16:36,260 --> 00:16:41,270
very aggressively here but of the order

421
00:16:38,870 --> 00:16:44,240
of<font color="#CCCCCC"> 2,000 object files you might get</font>

422
00:16:41,270 --> 00:16:47,329
<font color="#E5E5E5">round about</font><font color="#CCCCCC"> 500,000 symbols</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> if you</font>

423
00:16:44,240 --> 00:16:49,250
think<font color="#E5E5E5"> that you've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> for every every</font>

424
00:16:47,330 --> 00:16:50,930
file there<font color="#CCCCCC"> might be say five</font><font color="#E5E5E5"> functions</font>

425
00:16:49,250 --> 00:16:53,330
each of<font color="#E5E5E5"> those but</font><font color="#CCCCCC"> we'll have</font><font color="#E5E5E5"> a symbol</font>

426
00:16:50,930 --> 00:16:54,770
each section will<font color="#E5E5E5"> have a symbol</font><font color="#CCCCCC"> that</font>

427
00:16:53,330 --> 00:16:57,460
type of<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> see how these</font>

428
00:16:54,770 --> 00:16:59,480
things<font color="#CCCCCC"> might</font><font color="#E5E5E5"> scale in that sort of way</font>

429
00:16:57,460 --> 00:17:01,850
<font color="#E5E5E5">you'll notice that the real number of</font>

430
00:16:59,480 --> 00:17:03,950
relocations<font color="#CCCCCC"> is very much higher than the</font>

431
00:17:01,850 --> 00:17:06,050
number<font color="#E5E5E5"> of symbols typically that will be</font>

432
00:17:03,950 --> 00:17:07,760
that<font color="#E5E5E5"> each function might call</font><font color="#CCCCCC"> say three</font>

433
00:17:06,050 --> 00:17:10,879
<font color="#E5E5E5">or four functions might reference some</font>

434
00:17:07,760 --> 00:17:12,800
global<font color="#E5E5E5"> data so you might end</font><font color="#CCCCCC"> up with you</font>

435
00:17:10,880 --> 00:17:14,959
have you've gone<font color="#E5E5E5"> out</font><font color="#CCCCCC"> averaged more more</font>

436
00:17:12,800 --> 00:17:19,240
<font color="#E5E5E5">of those per function</font><font color="#CCCCCC"> than you</font><font color="#E5E5E5"> will and</font>

437
00:17:14,959 --> 00:17:21,709
symbols<font color="#E5E5E5"> and there you go in the actual</font>

438
00:17:19,240 --> 00:17:23,300
final<font color="#E5E5E5"> amounts in turn in terms of data</font>

439
00:17:21,709 --> 00:17:25,160
attitude probably underestimated how

440
00:17:23,300 --> 00:17:28,790
much<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual size of</font><font color="#E5E5E5"> the program was</font>

441
00:17:25,160 --> 00:17:30,090
it says<font color="#CCCCCC"> 18 here</font><font color="#E5E5E5"> okay so when I add debug</font>

442
00:17:28,790 --> 00:17:32,310
data on here

443
00:17:30,090 --> 00:17:34,560
I've gained about<font color="#E5E5E5"> a hundred thousand</font>

444
00:17:32,310 --> 00:17:37,290
extra sections<font color="#CCCCCC"> a hundred thousand</font>

445
00:17:34,560 --> 00:17:40,770
symbols and a hundred million

446
00:17:37,290 --> 00:17:42,810
relocations<font color="#E5E5E5"> and one point six gigabytes</font>

447
00:17:40,770 --> 00:17:44,129
worth of data<font color="#CCCCCC"> so if you if you're</font>

448
00:17:42,810 --> 00:17:45,510
wondering why your link has suddenly<font color="#E5E5E5"> got</font>

449
00:17:44,130 --> 00:17:48,420
slow<font color="#E5E5E5"> which chances are you've enabled</font>

450
00:17:45,510 --> 00:17:50,550
debug and and and it's often if you if

451
00:17:48,420 --> 00:17:52,230
anyone's<font color="#E5E5E5"> ever tried to build</font><font color="#CCCCCC"> LLVM by</font>

452
00:17:50,550 --> 00:17:55,830
default<font color="#E5E5E5"> or with a machine with multiple</font>

453
00:17:52,230 --> 00:17:58,260
cores<font color="#E5E5E5"> and and basically</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> and the make</font>

454
00:17:55,830 --> 00:18:01,350
system will use<font color="#CCCCCC"> as many</font><font color="#E5E5E5"> calls as it can</font>

455
00:17:58,260 --> 00:18:02,370
and because<font color="#CCCCCC"> LLVM is linked statically</font>

456
00:18:01,350 --> 00:18:03,990
and all the libraries are linked

457
00:18:02,370 --> 00:18:06,179
statically and there's lots of<font color="#E5E5E5"> things</font>

458
00:18:03,990 --> 00:18:08,490
<font color="#CCCCCC">that look they're</font><font color="#E5E5E5"> almost as</font><font color="#CCCCCC"> big as clang</font>

459
00:18:06,180 --> 00:18:10,470
you'll basically saturate even the<font color="#E5E5E5"> 32</font>

460
00:18:08,490 --> 00:18:12,540
<font color="#CCCCCC">kick machine and bring it to its knees</font>

461
00:18:10,470 --> 00:18:14,370
<font color="#E5E5E5">horribly so there are special facilities</font>

462
00:18:12,540 --> 00:18:15,930
in the LLVM build system to limit the

463
00:18:14,370 --> 00:18:20,100
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> parallel links that you can</font><font color="#CCCCCC"> do</font>

464
00:18:15,930 --> 00:18:21,510
<font color="#CCCCCC">as okay so</font><font color="#E5E5E5"> look chrome this is just a</font>

465
00:18:20,100 --> 00:18:23,179
sort<font color="#CCCCCC"> of comparison</font><font color="#E5E5E5"> you can see instead</font>

466
00:18:21,510 --> 00:18:27,090
<font color="#E5E5E5">of two thousand files we've suddenly got</font>

467
00:18:23,180 --> 00:18:29,610
<font color="#CCCCCC">21,000 files and and we've got</font><font color="#E5E5E5"> millions</font>

468
00:18:27,090 --> 00:18:31,230
of sections<font color="#E5E5E5"> and symbols but</font><font color="#CCCCCC"> a similar</font>

469
00:18:29,610 --> 00:18:32,939
<font color="#E5E5E5">number of relocations so</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> this</font>

470
00:18:31,230 --> 00:18:34,560
<font color="#CCCCCC">just means</font><font color="#E5E5E5"> it's compiled their function</font>

471
00:18:32,940 --> 00:18:36,810
sections so that's the things a bit

472
00:18:34,560 --> 00:18:38,820
different<font color="#CCCCCC"> okay but wissen we've got</font>

473
00:18:36,810 --> 00:18:41,879
about<font color="#CCCCCC"> the similar size of program maybe</font>

474
00:18:38,820 --> 00:18:45,929
slightly bigger<font color="#CCCCCC"> okay so this is what</font>

475
00:18:41,880 --> 00:18:48,810
happens with clang<font color="#E5E5E5"> and debug so this is</font>

476
00:18:45,930 --> 00:18:51,720
a sort of a basically me putting some

477
00:18:48,810 --> 00:18:52,950
timers into<font color="#CCCCCC"> lld to find out some of</font>

478
00:18:51,720 --> 00:18:55,710
<font color="#E5E5E5">these things</font><font color="#CCCCCC"> that I've highlighted</font><font color="#E5E5E5"> some</font>

479
00:18:52,950 --> 00:18:57,150
of the bigger issues<font color="#E5E5E5"> so I don't know</font>

480
00:18:55,710 --> 00:18:59,610
whether I've caught absolutely

481
00:18:57,150 --> 00:19:01,230
everything<font color="#E5E5E5"> here so there may be some</font>

482
00:18:59,610 --> 00:19:03,899
times<font color="#E5E5E5"> where</font><font color="#CCCCCC"> this doesn't add up to 100%</font>

483
00:19:01,230 --> 00:19:05,940
<font color="#E5E5E5">or whatever so</font><font color="#CCCCCC"> just so if anyone wants</font>

484
00:19:03,900 --> 00:19:07,770
<font color="#CCCCCC">to call</font><font color="#E5E5E5"> me out</font><font color="#CCCCCC"> on that I</font><font color="#E5E5E5"> do know yeah</font>

485
00:19:05,940 --> 00:19:09,240
I'm aware<font color="#CCCCCC"> of some</font><font color="#E5E5E5"> of the things that in</font>

486
00:19:07,770 --> 00:19:11,340
<font color="#E5E5E5">that sort of</font><font color="#CCCCCC"> area but an interesting</font>

487
00:19:09,240 --> 00:19:13,800
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> to observe is that</font><font color="#E5E5E5"> the first link</font>

488
00:19:11,340 --> 00:19:16,709
is basically from<font color="#CCCCCC"> scratch</font><font color="#E5E5E5"> and there's no</font>

489
00:19:13,800 --> 00:19:18,930
file cache involved at all<font color="#E5E5E5"> so when we</font>

490
00:19:16,710 --> 00:19:20,220
head to subsequent<font color="#E5E5E5"> links if we if you've</font>

491
00:19:18,930 --> 00:19:21,990
got enough memory on<font color="#CCCCCC"> your system</font>

492
00:19:20,220 --> 00:19:24,300
everything's<font color="#E5E5E5"> basically cached in memory</font>

493
00:19:21,990 --> 00:19:26,550
and doesn't necessarily<font color="#CCCCCC"> need to go to</font>

494
00:19:24,300 --> 00:19:28,860
the disk much so you can end up with

495
00:19:26,550 --> 00:19:31,740
substantially faster times for second

496
00:19:28,860 --> 00:19:33,360
links and so you may say am i cheating

497
00:19:31,740 --> 00:19:35,280
by saying how much faster<font color="#CCCCCC"> a loyalty</font><font color="#E5E5E5"> is</font>

498
00:19:33,360 --> 00:19:36,929
or look how fast<font color="#CCCCCC"> lld is and it's all</font>

499
00:19:35,280 --> 00:19:39,090
<font color="#E5E5E5">because everything's all in memory but</font>

500
00:19:36,930 --> 00:19:41,460
typically<font color="#E5E5E5"> though all the way most people</font>

501
00:19:39,090 --> 00:19:42,959
<font color="#E5E5E5">use it it's not</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> end-to-end build</font>

502
00:19:41,460 --> 00:19:43,290
that's important because that<font color="#E5E5E5"> might even</font>

503
00:19:42,960 --> 00:19:45,270
get

504
00:19:43,290 --> 00:19:46,530
run overnight it's your incremental

505
00:19:45,270 --> 00:19:48,389
build<font color="#E5E5E5"> it's like</font><font color="#CCCCCC"> I've changed something</font>

506
00:19:46,530 --> 00:19:49,980
in one object<font color="#E5E5E5"> file I'm going</font><font color="#CCCCCC"> to relink</font>

507
00:19:48,390 --> 00:19:54,210
<font color="#E5E5E5">I don't want to wait for</font><font color="#CCCCCC"> ten minutes and</font>

508
00:19:49,980 --> 00:19:55,860
so so I'm going to<font color="#E5E5E5"> claim or maybe hide</font>

509
00:19:54,210 --> 00:19:57,780
or duck whatever and<font color="#CCCCCC"> save</font><font color="#E5E5E5"> really it's</font>

510
00:19:55,860 --> 00:19:59,250
this sort of them the performance on the

511
00:19:57,780 --> 00:20:01,020
right hand side<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> more important on</font>

512
00:19:59,250 --> 00:20:02,910
the<font color="#E5E5E5"> left and that that is shared by all</font>

513
00:20:01,020 --> 00:20:05,460
linkers it just means that<font color="#E5E5E5"> it's a load</font>

514
00:20:02,910 --> 00:20:08,130
<font color="#E5E5E5">of time spent on disk</font><font color="#CCCCCC"> but it it</font><font color="#E5E5E5"> doesn't</font>

515
00:20:05,460 --> 00:20:11,070
mean it can skew<font color="#E5E5E5"> some of the things some</font>

516
00:20:08,130 --> 00:20:12,900
of<font color="#E5E5E5"> the operations so the split sections</font>

517
00:20:11,070 --> 00:20:14,490
operation is something that the linker

518
00:20:12,900 --> 00:20:18,980
will try and do when it's<font color="#E5E5E5"> trying to</font>

519
00:20:14,490 --> 00:20:21,330
merge strings so if you<font color="#E5E5E5"> find that that</font>

520
00:20:18,980 --> 00:20:22,470
<font color="#CCCCCC">could be an</font><font color="#E5E5E5"> expensive process if it's</font>

521
00:20:21,330 --> 00:20:25,290
having<font color="#CCCCCC"> it's actually</font><font color="#E5E5E5"> having to read</font>

522
00:20:22,470 --> 00:20:28,350
contents off disks or<font color="#CCCCCC"> disk</font><font color="#E5E5E5"> but once it's</font>

523
00:20:25,290 --> 00:20:30,270
<font color="#E5E5E5">in memory</font><font color="#CCCCCC"> it's fairly quick but come on</font>

524
00:20:28,350 --> 00:20:33,990
by contrast the actual<font color="#CCCCCC"> merged sections</font>

525
00:20:30,270 --> 00:20:35,400
phase itself<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> three that's that's</font>

526
00:20:33,990 --> 00:20:38,010
where it's trying<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> tale merging</font>

527
00:20:35,400 --> 00:20:39,630
<font color="#CCCCCC">single threaded</font><font color="#E5E5E5"> and then because of the</font>

528
00:20:38,010 --> 00:20:40,830
deep because<font color="#CCCCCC"> of debug</font><font color="#E5E5E5"> data is a huge</font>

529
00:20:39,630 --> 00:20:42,720
amount<font color="#CCCCCC"> of strings</font><font color="#E5E5E5"> and that takes an</font>

530
00:20:40,830 --> 00:20:45,000
awful long<font color="#CCCCCC"> time</font><font color="#E5E5E5"> but if we go down to</font><font color="#CCCCCC"> oh</font>

531
00:20:42,720 --> 00:20:47,070
one<font color="#E5E5E5"> and we can do it in parallel then</font>

532
00:20:45,000 --> 00:20:49,710
that amount of time drops quite

533
00:20:47,070 --> 00:20:51,270
considerably<font color="#E5E5E5"> there and as we can see</font>

534
00:20:49,710 --> 00:20:53,010
<font color="#E5E5E5">there that doesn't that</font><font color="#CCCCCC"> write output</font>

535
00:20:51,270 --> 00:20:54,240
<font color="#E5E5E5">file doesn't mean it's got longer it</font>

536
00:20:53,010 --> 00:20:56,400
just means that's<font color="#E5E5E5"> a proportion of the</font>

537
00:20:54,240 --> 00:20:57,780
<font color="#CCCCCC">overall link</font><font color="#E5E5E5"> it's got higher at that</font>

538
00:20:56,400 --> 00:20:59,670
particular point you can see<font color="#E5E5E5"> the overall</font>

539
00:20:57,780 --> 00:21:01,800
<font color="#CCCCCC">time has gone down quite</font><font color="#E5E5E5"> considerably</font>

540
00:20:59,670 --> 00:21:02,970
just about dropping<font color="#E5E5E5"> that so I guess a</font>

541
00:21:01,800 --> 00:21:06,120
lesson<font color="#E5E5E5"> for that if you don't care about</font>

542
00:21:02,970 --> 00:21:08,580
<font color="#E5E5E5">the most minimal then the</font><font color="#CCCCCC"> L LD default</font>

543
00:21:06,120 --> 00:21:10,080
of<font color="#CCCCCC"> oh one</font><font color="#E5E5E5"> in terms of sharing strings is</font>

544
00:21:08,580 --> 00:21:14,370
<font color="#E5E5E5">it's probably</font><font color="#CCCCCC"> the way</font><font color="#E5E5E5"> you want to go</font>

545
00:21:10,080 --> 00:21:16,050
there so<font color="#CCCCCC"> chrome free up 64 this is just</font>

546
00:21:14,370 --> 00:21:17,729
a<font color="#E5E5E5"> sort of them comparison to that now</font>

547
00:21:16,050 --> 00:21:20,129
that something<font color="#CCCCCC"> went wrong</font><font color="#E5E5E5"> on the left</font>

548
00:21:17,730 --> 00:21:22,830
<font color="#CCCCCC">hand side because a large proportion of</font>

549
00:21:20,130 --> 00:21:25,800
things disappeared<font color="#E5E5E5"> and these this is</font>

550
00:21:22,830 --> 00:21:26,730
<font color="#E5E5E5">nowhere near under</font><font color="#CCCCCC"> 100% only up</font><font color="#E5E5E5"> to a</font>

551
00:21:25,800 --> 00:21:28,649
<font color="#E5E5E5">hundred percent so there's something</font>

552
00:21:26,730 --> 00:21:30,330
<font color="#E5E5E5">timer that I've missed somewhere in</font>

553
00:21:28,650 --> 00:21:32,730
there so I'm<font color="#E5E5E5"> going to need</font><font color="#CCCCCC"> to go and</font>

554
00:21:30,330 --> 00:21:34,889
<font color="#E5E5E5">have a look at that at some</font><font color="#CCCCCC"> point but as</font>

555
00:21:32,730 --> 00:21:37,230
we can<font color="#E5E5E5"> see here similar numbers merge</font>

556
00:21:34,890 --> 00:21:39,750
section<font color="#E5E5E5"> zero three comes out quite high</font>

557
00:21:37,230 --> 00:21:42,870
<font color="#E5E5E5">and you'll notice that code layout has</font>

558
00:21:39,750 --> 00:21:46,770
got higher and so part of that is<font color="#E5E5E5"> down</font>

559
00:21:42,870 --> 00:21:49,530
<font color="#CCCCCC">two</font><font color="#E5E5E5"> and a out</font><font color="#CCCCCC"> 64 being</font><font color="#E5E5E5"> slightly</font><font color="#CCCCCC"> more</font>

560
00:21:46,770 --> 00:21:52,139
complicated<font color="#E5E5E5"> there in the</font><font color="#CCCCCC"> term</font><font color="#E5E5E5"> you have</font>

561
00:21:49,530 --> 00:21:54,060
<font color="#E5E5E5">things like thunks where you've got to</font>

562
00:21:52,140 --> 00:21:56,429
exchange the extend the range of

563
00:21:54,060 --> 00:21:58,168
<font color="#E5E5E5">branches and you've also got</font><font color="#CCCCCC"> the</font>

564
00:21:56,429 --> 00:22:01,740
in<font color="#E5E5E5"> this particular build the fix for</font><font color="#CCCCCC"> the</font>

565
00:21:58,169 --> 00:22:03,509
cortex a53 erratum is on and so that

566
00:22:01,740 --> 00:22:06,450
<font color="#CCCCCC">that</font><font color="#E5E5E5"> means scanning bits of the code</font>

567
00:22:03,509 --> 00:22:08,340
which can<font color="#E5E5E5"> slow things</font><font color="#CCCCCC"> down and</font><font color="#E5E5E5"> as a word</font>

568
00:22:06,450 --> 00:22:13,049
of warning the one of the things<font color="#E5E5E5"> I did</font>

569
00:22:08,340 --> 00:22:16,499
try was<font color="#E5E5E5"> Chrome for a arts 32 and by</font>

570
00:22:13,049 --> 00:22:19,529
default<font color="#CCCCCC"> that thing on gold and BFD it</font>

571
00:22:16,499 --> 00:22:22,200
turns on the fix for<font color="#CCCCCC"> the cortex a8</font><font color="#E5E5E5"> and</font>

572
00:22:19,529 --> 00:22:26,190
that particular<font color="#CCCCCC"> thing took</font><font color="#E5E5E5"> 60% of the</font>

573
00:22:22,200 --> 00:22:28,200
link time up on on the new LD<font color="#E5E5E5"> so if you</font>

574
00:22:26,190 --> 00:22:29,970
don't know your thing<font color="#E5E5E5"> your your programs</font>

575
00:22:28,200 --> 00:22:32,519
never going to<font color="#E5E5E5"> run on a very old cortex</font>

576
00:22:29,970 --> 00:22:35,899
a8<font color="#E5E5E5"> then disable that</font><font color="#CCCCCC"> workaround terms</font>

577
00:22:32,519 --> 00:22:37,889
the faster<font color="#E5E5E5"> the new LD performance</font><font color="#CCCCCC"> okay</font>

578
00:22:35,899 --> 00:22:39,268
<font color="#E5E5E5">so I've gone through</font><font color="#CCCCCC"> just some of the</font>

579
00:22:37,889 --> 00:22:40,889
numbers<font color="#CCCCCC"> just to show you roughly</font><font color="#E5E5E5"> what</font>

580
00:22:39,269 --> 00:22:43,289
<font color="#E5E5E5">this of the speed sort of differences</font>

581
00:22:40,889 --> 00:22:47,279
are and then we'll<font color="#CCCCCC"> look - but</font><font color="#E5E5E5"> why that</font>

582
00:22:43,289 --> 00:22:48,149
might<font color="#CCCCCC"> be okay so one of the one of</font><font color="#E5E5E5"> the</font>

583
00:22:47,279 --> 00:22:49,470
<font color="#E5E5E5">things that you have to do if you're</font>

584
00:22:48,149 --> 00:22:51,178
going<font color="#E5E5E5"> to build any program that's fast</font>

585
00:22:49,470 --> 00:22:53,909
is look at their<font color="#E5E5E5"> characteristics of that</font>

586
00:22:51,179 --> 00:22:55,110
<font color="#E5E5E5">particular program so every</font><font color="#CCCCCC"> linker</font><font color="#E5E5E5"> that</font>

587
00:22:53,909 --> 00:22:57,389
<font color="#CCCCCC">you write is going to have to splice a</font>

588
00:22:55,110 --> 00:23:01,678
lot of data from<font color="#E5E5E5"> a large</font><font color="#CCCCCC"> number of files</font>

589
00:22:57,389 --> 00:23:04,049
into one<font color="#E5E5E5"> file there's something called</font>

590
00:23:01,679 --> 00:23:06,029
<font color="#CCCCCC">smart format dumb linker that's the the</font>

591
00:23:04,049 --> 00:23:07,619
idea that the linker doesn't need to

592
00:23:06,029 --> 00:23:10,740
understand what's in a section it just

593
00:23:07,619 --> 00:23:12,240
operates<font color="#E5E5E5"> on</font><font color="#CCCCCC"> those sections so any</font>

594
00:23:10,740 --> 00:23:14,700
optimization you write is<font color="#CCCCCC"> going to have</font>

595
00:23:12,240 --> 00:23:18,499
to run<font color="#E5E5E5"> on a large amount of data without</font>

596
00:23:14,700 --> 00:23:21,899
choking<font color="#E5E5E5"> on</font><font color="#CCCCCC"> it so that generally means I</font>

597
00:23:18,499 --> 00:23:23,340
guess<font color="#E5E5E5"> at least being being aware of the</font>

598
00:23:21,899 --> 00:23:25,229
number of<font color="#E5E5E5"> iterations making sure your</font>

599
00:23:23,340 --> 00:23:26,428
algorithms<font color="#E5E5E5"> don't go</font><font color="#CCCCCC"> n-squared</font><font color="#E5E5E5"> when</font>

600
00:23:25,230 --> 00:23:27,210
they're going<font color="#E5E5E5"> to be large inputs that</font>

601
00:23:26,429 --> 00:23:29,129
<font color="#E5E5E5">type of thing</font>

602
00:23:27,210 --> 00:23:32,009
typically most algorithms<font color="#E5E5E5"> that a linker</font>

603
00:23:29,129 --> 00:23:33,418
will come across<font color="#E5E5E5"> a fairly simple so the</font>

604
00:23:32,009 --> 00:23:35,220
other interesting<font color="#CCCCCC"> thing is the</font><font color="#E5E5E5"> internal</font>

605
00:23:33,419 --> 00:23:37,440
representation<font color="#E5E5E5"> unlike a compiler when</font>

606
00:23:35,220 --> 00:23:38,759
you start off<font color="#CCCCCC"> with an ast</font><font color="#E5E5E5"> and then you</font>

607
00:23:37,440 --> 00:23:41,879
might change<font color="#E5E5E5"> it to one</font>

608
00:23:38,759 --> 00:23:43,860
basically the<font color="#CCCCCC"> LLVM ir then you go to</font><font color="#E5E5E5"> Mir</font>

609
00:23:41,879 --> 00:23:45,480
then to<font color="#E5E5E5"> MC so your internal</font>

610
00:23:43,860 --> 00:23:47,549
representation is changing<font color="#E5E5E5"> about five</font>

611
00:23:45,480 --> 00:23:49,350
times<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you know don't</font><font color="#E5E5E5"> go back to</font><font color="#CCCCCC"> the</font>

612
00:23:47,549 --> 00:23:52,049
<font color="#E5E5E5">previous one</font><font color="#CCCCCC"> so you can dump</font><font color="#E5E5E5"> you can</font>

613
00:23:49,350 --> 00:23:54,360
dump the previous one from<font color="#E5E5E5"> memory and</font>

614
00:23:52,049 --> 00:23:56,399
<font color="#E5E5E5">deed sections and relocations the</font>

615
00:23:54,360 --> 00:23:58,998
<font color="#CCCCCC">symbols stay all the way to the end</font><font color="#E5E5E5"> and</font>

616
00:23:56,399 --> 00:24:02,129
it's very<font color="#E5E5E5"> difficult to throw memory away</font>

617
00:23:58,999 --> 00:24:03,990
<font color="#CCCCCC">okay and there's probably</font><font color="#E5E5E5"> more</font>

618
00:24:02,129 --> 00:24:05,850
opportunity<font color="#E5E5E5"> within stages of the</font>

619
00:24:03,990 --> 00:24:07,109
pipeline<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do parallelism you</font><font color="#CCCCCC"> would</font>

620
00:24:05,850 --> 00:24:08,580
have thought to<font color="#E5E5E5"> start with well can I do</font>

621
00:24:07,109 --> 00:24:09,230
a sort<font color="#E5E5E5"> of an</font><font color="#CCCCCC"> incremental thing where I</font>

622
00:24:08,580 --> 00:24:11,449
<font color="#E5E5E5">kind of</font>

623
00:24:09,230 --> 00:24:13,070
try and link as much as I<font color="#E5E5E5"> can as my</font>

624
00:24:11,450 --> 00:24:15,680
first object<font color="#E5E5E5"> failed and add the second</font>

625
00:24:13,070 --> 00:24:17,510
one in theory<font color="#E5E5E5"> you could do that but</font><font color="#CCCCCC"> it</font>

626
00:24:15,680 --> 00:24:19,010
probably<font color="#E5E5E5"> the amount of bookkeeping</font><font color="#CCCCCC"> that</font>

627
00:24:17,510 --> 00:24:20,480
you'd have<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> to make that</font><font color="#CCCCCC"> work will</font>

628
00:24:19,010 --> 00:24:20,750
probably not make<font color="#E5E5E5"> it worthwhile in the</font>

629
00:24:20,480 --> 00:24:25,490
end

630
00:24:20,750 --> 00:24:27,160
okay so abstractions<font color="#E5E5E5"> to</font><font color="#CCCCCC"> L LD uses so</font>

631
00:24:25,490 --> 00:24:29,810
this is kind of the contrast<font color="#E5E5E5"> to BFD</font>

632
00:24:27,160 --> 00:24:32,540
<font color="#E5E5E5">because which because BFD kind of has a</font>

633
00:24:29,810 --> 00:24:35,450
file format<font color="#CCCCCC"> that</font><font color="#E5E5E5"> obstructs between three</font>

634
00:24:32,540 --> 00:24:36,889
<font color="#E5E5E5">or four different file formats that were</font>

635
00:24:35,450 --> 00:24:41,360
around back at that time<font color="#CCCCCC"> L LD</font>

636
00:24:36,890 --> 00:24:43,100
concentrates on just elf so<font color="#E5E5E5"> LD also in</font>

637
00:24:41,360 --> 00:24:44,840
<font color="#E5E5E5">contrast to another there</font><font color="#CCCCCC"> are lobbying</font>

638
00:24:43,100 --> 00:24:47,360
programs<font color="#CCCCCC"> it's structures as a program</font>

639
00:24:44,840 --> 00:24:49,250
first<font color="#E5E5E5"> a set of reusable libraries second</font>

640
00:24:47,360 --> 00:24:50,949
if you want to use L LD as a library

641
00:24:49,250 --> 00:24:53,690
you're effectively wrapping the program

642
00:24:50,950 --> 00:24:55,550
that has caused some controversy<font color="#E5E5E5"> at</font>

643
00:24:53,690 --> 00:24:58,730
times<font color="#CCCCCC"> because some people want</font><font color="#E5E5E5"> a more</font>

644
00:24:55,550 --> 00:25:01,040
<font color="#CCCCCC">LLVM like design but in</font><font color="#E5E5E5"> general no one's</font>

645
00:24:58,730 --> 00:25:03,440
yet come up with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> use case</font><font color="#CCCCCC"> that really</font>

646
00:25:01,040 --> 00:25:04,820
<font color="#E5E5E5">would benefit that yet so things may</font>

647
00:25:03,440 --> 00:25:06,410
<font color="#CCCCCC">change if somebody does</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> up with</font>

648
00:25:04,820 --> 00:25:11,290
that use case<font color="#E5E5E5"> but no one's done that at</font>

649
00:25:06,410 --> 00:25:13,430
that particular point<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> yeah the</font>

650
00:25:11,290 --> 00:25:16,250
linker generated content is actually

651
00:25:13,430 --> 00:25:18,470
<font color="#E5E5E5">represented with as fragments of input</font>

652
00:25:16,250 --> 00:25:20,420
section<font color="#E5E5E5"> which we call synthetic sections</font>

653
00:25:18,470 --> 00:25:21,680
<font color="#E5E5E5">that's as opposed to creating them as</font>

654
00:25:20,420 --> 00:25:24,230
the output<font color="#CCCCCC"> that doesn't sound</font><font color="#E5E5E5"> that</font>

655
00:25:21,680 --> 00:25:27,380
<font color="#E5E5E5">significant but that can make things</font>

656
00:25:24,230 --> 00:25:31,160
like<font color="#E5E5E5"> adding thunks for certain types of</font>

657
00:25:27,380 --> 00:25:33,440
architectures much much faster<font color="#CCCCCC"> okay I'll</font>

658
00:25:31,160 --> 00:25:35,720
skip the rest<font color="#E5E5E5"> of those at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> time okay</font>

659
00:25:33,440 --> 00:25:37,040
<font color="#E5E5E5">so</font><font color="#CCCCCC"> another thing</font><font color="#E5E5E5"> that this is just</font>

660
00:25:35,720 --> 00:25:38,950
<font color="#E5E5E5">something I don't need to go through</font>

661
00:25:37,040 --> 00:25:41,780
<font color="#E5E5E5">that list</font><font color="#CCCCCC"> this is very</font><font color="#E5E5E5"> much saying</font>

662
00:25:38,950 --> 00:25:44,780
there's an ADT library<font color="#E5E5E5"> that allows VM</font>

663
00:25:41,780 --> 00:25:47,899
provides<font color="#E5E5E5"> with many optimized versions of</font>

664
00:25:44,780 --> 00:25:50,090
<font color="#CCCCCC">common data structures so lld can get a</font>

665
00:25:47,900 --> 00:25:51,890
you<font color="#E5E5E5"> know a strong leg up in performance</font>

666
00:25:50,090 --> 00:25:55,610
just<font color="#CCCCCC"> by using those and</font><font color="#E5E5E5"> not having to</font>

667
00:25:51,890 --> 00:25:56,480
<font color="#E5E5E5">use the standard library types okay so</font>

668
00:25:55,610 --> 00:26:00,320
the better I mentioned<font color="#E5E5E5"> earlier on about</font>

669
00:25:56,480 --> 00:26:01,970
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> management so what this</font>

670
00:26:00,320 --> 00:26:04,700
<font color="#CCCCCC">effectively means</font><font color="#E5E5E5"> is that you reading an</font>

671
00:26:01,970 --> 00:26:05,960
awful lot of memory<font color="#CCCCCC"> or allocating an</font>

672
00:26:04,700 --> 00:26:08,000
awful lot of memory to also started the

673
00:26:05,960 --> 00:26:09,290
program<font color="#E5E5E5"> and then you can't free it until</font>

674
00:26:08,000 --> 00:26:12,770
you've written the data<font color="#E5E5E5"> out at the end</font>

675
00:26:09,290 --> 00:26:14,330
so this is kind of ideal for a region

676
00:26:12,770 --> 00:26:16,280
based memory allocator which is in

677
00:26:14,330 --> 00:26:18,290
<font color="#E5E5E5">effect saying allocate me this large</font>

678
00:26:16,280 --> 00:26:19,520
block of<font color="#CCCCCC"> memory and then just increment</font>

679
00:26:18,290 --> 00:26:20,020
<font color="#E5E5E5">the pointer every time you do an</font>

680
00:26:19,520 --> 00:26:21,730
allocate

681
00:26:20,020 --> 00:26:24,190
and because you<font color="#E5E5E5"> don't need to throw any</font>

682
00:26:21,730 --> 00:26:25,960
individual bit away you can<font color="#E5E5E5"> just throw</font>

683
00:26:24,190 --> 00:26:28,030
the<font color="#CCCCCC"> whole lot away at the end</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> you</font>

684
00:26:25,960 --> 00:26:31,660
<font color="#E5E5E5">can make memory allocation very fast</font><font color="#CCCCCC"> and</font>

685
00:26:28,030 --> 00:26:33,309
I do believe gold still uses<font color="#CCCCCC"> malloc and</font>

686
00:26:31,660 --> 00:26:35,800
free<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can see that in the</font>

687
00:26:33,309 --> 00:26:37,990
<font color="#CCCCCC">performance profile at the end this</font><font color="#E5E5E5"> does</font>

688
00:26:35,800 --> 00:26:40,059
make<font color="#CCCCCC"> a difference now one of the caveats</font>

689
00:26:37,990 --> 00:26:41,830
of this region based memory allocated

690
00:26:40,059 --> 00:26:43,480
<font color="#CCCCCC">that llt uses I don't think</font><font color="#E5E5E5"> it's thread</font>

691
00:26:41,830 --> 00:26:45,010
safe<font color="#E5E5E5"> at least</font><font color="#CCCCCC"> I couldn't see any</font>

692
00:26:43,480 --> 00:26:46,570
evidence<font color="#CCCCCC"> that it was thread safe so that</font>

693
00:26:45,010 --> 00:26:48,280
means<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> in any sort of parallel bitch</font>

694
00:26:46,570 --> 00:26:50,050
you can't<font color="#E5E5E5"> allocate memory which then</font>

695
00:26:48,280 --> 00:26:55,270
influences how it does parallelism

696
00:26:50,050 --> 00:26:56,470
<font color="#E5E5E5">okay so parallelism in linking so this</font>

697
00:26:55,270 --> 00:26:59,350
is some of<font color="#E5E5E5"> the opportunities that you</font>

698
00:26:56,470 --> 00:27:00,940
might<font color="#E5E5E5"> have here so you can potentially</font>

699
00:26:59,350 --> 00:27:01,719
<font color="#CCCCCC">use</font><font color="#E5E5E5"> it when you're trying to read the</font>

700
00:27:00,940 --> 00:27:03,550
input files

701
00:27:01,720 --> 00:27:06,010
unfortunately because order process is

702
00:27:03,550 --> 00:27:07,928
ignition<font color="#E5E5E5"> you've kind of have to do quite</font>

703
00:27:06,010 --> 00:27:09,640
the<font color="#E5E5E5"> bookkeeping to make sure that</font>

704
00:27:07,929 --> 00:27:12,250
everything<font color="#E5E5E5"> will come out deterministic</font>

705
00:27:09,640 --> 00:27:13,900
in the end<font color="#E5E5E5"> so</font><font color="#CCCCCC"> lld chooses not to do that</font>

706
00:27:12,250 --> 00:27:16,660
it<font color="#E5E5E5"> just chooses to do that single</font>

707
00:27:13,900 --> 00:27:18,820
threaded and as we look before that part

708
00:27:16,660 --> 00:27:21,370
of linking wasn't taking<font color="#E5E5E5"> the highest</font>

709
00:27:18,820 --> 00:27:23,290
<font color="#E5E5E5">amount of time so even paralyzing that</font>

710
00:27:21,370 --> 00:27:25,780
wouldn't save you an awful<font color="#CCCCCC"> lot of time</font>

711
00:27:23,290 --> 00:27:28,149
global transforms a lot of those are

712
00:27:25,780 --> 00:27:31,960
fairly cheap<font color="#E5E5E5"> some of them can be</font><font color="#CCCCCC"> quite</font>

713
00:27:28,150 --> 00:27:34,330
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> so things like ICF identical</font>

714
00:27:31,960 --> 00:27:36,340
code folding<font color="#E5E5E5"> and much string merging</font>

715
00:27:34,330 --> 00:27:38,169
those can<font color="#CCCCCC"> be quite expensive but it can</font>

716
00:27:36,340 --> 00:27:41,320
also be<font color="#CCCCCC"> they're also</font><font color="#E5E5E5"> quite difficult to</font>

717
00:27:38,170 --> 00:27:43,929
<font color="#CCCCCC">paralyse and but LD has spent the effort</font>

718
00:27:41,320 --> 00:27:46,240
<font color="#CCCCCC">to parallelize those</font><font color="#E5E5E5"> and algorithms</font><font color="#CCCCCC"> or</font>

719
00:27:43,929 --> 00:27:47,500
at least parts<font color="#E5E5E5"> of them to sort of get as</font>

720
00:27:46,240 --> 00:27:51,700
much<font color="#CCCCCC"> of performance</font><font color="#E5E5E5"> out there as</font>

721
00:27:47,500 --> 00:27:53,470
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> you could</font><font color="#CCCCCC"> in theory do layout</font>

722
00:27:51,700 --> 00:27:54,790
address some<font color="#E5E5E5"> addresses in parallel but</font>

723
00:27:53,470 --> 00:27:57,100
again<font color="#CCCCCC"> the increasing the amount of</font>

724
00:27:54,790 --> 00:27:58,809
<font color="#E5E5E5">bookkeeping and it's not an awful lot of</font>

725
00:27:57,100 --> 00:28:01,659
link time anyway<font color="#E5E5E5"> so there's not another</font>

726
00:27:58,809 --> 00:28:04,059
point towards the end here where we've

727
00:28:01,660 --> 00:28:05,350
<font color="#CCCCCC">got the</font><font color="#E5E5E5"> copying the sections and once</font>

728
00:28:04,059 --> 00:28:08,050
you've actually<font color="#CCCCCC"> done all of your layout</font>

729
00:28:05,350 --> 00:28:09,699
<font color="#E5E5E5">and</font><font color="#CCCCCC"> calculating any individual</font>

730
00:28:08,050 --> 00:28:11,649
relocation is independent<font color="#E5E5E5"> of any other</font>

731
00:28:09,700 --> 00:28:13,720
<font color="#E5E5E5">so you can do that whole lot at the end</font>

732
00:28:11,650 --> 00:28:15,580
in parallel<font color="#E5E5E5"> and that's where the vast</font>

733
00:28:13,720 --> 00:28:18,970
majority<font color="#E5E5E5"> of your time saved by doing</font>

734
00:28:15,580 --> 00:28:20,800
<font color="#CCCCCC">parallel linking</font><font color="#E5E5E5"> ghost comes from and</font>

735
00:28:18,970 --> 00:28:22,179
that's particularly visible went in when

736
00:28:20,800 --> 00:28:24,460
<font color="#E5E5E5">you're when you've got a huge amount of</font>

737
00:28:22,179 --> 00:28:26,380
debug data which is the parallel<font color="#CCCCCC"> bits</font>

738
00:28:24,460 --> 00:28:27,940
<font color="#CCCCCC">are</font><font color="#E5E5E5"> just it's a huge load of stuff that</font>

739
00:28:26,380 --> 00:28:29,470
you<font color="#CCCCCC"> just have</font><font color="#E5E5E5"> to copy so you can just</font>

740
00:28:27,940 --> 00:28:32,970
<font color="#CCCCCC">basically block</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> out in parallel</font>

741
00:28:29,470 --> 00:28:35,549
<font color="#E5E5E5">across multiple threads</font><font color="#CCCCCC"> and very easily</font>

742
00:28:32,970 --> 00:28:37,350
<font color="#E5E5E5">okay so yeah the general rules for</font><font color="#CCCCCC"> lld</font>

743
00:28:35,549 --> 00:28:40,320
<font color="#E5E5E5">spreading model is keep it as</font><font color="#CCCCCC"> simple as</font>

744
00:28:37,350 --> 00:28:42,809
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> we want to use we don't</font><font color="#E5E5E5"> want a</font>

745
00:28:40,320 --> 00:28:45,299
complicated<font color="#CCCCCC"> task based system like Gould</font>

746
00:28:42,809 --> 00:28:47,549
has in effect<font color="#CCCCCC"> all we</font><font color="#E5E5E5"> actually use is</font>

747
00:28:45,299 --> 00:28:49,289
parallel for each which in effect<font color="#CCCCCC"> runs a</font>

748
00:28:47,549 --> 00:28:52,080
function on an independent<font color="#E5E5E5"> set</font><font color="#CCCCCC"> of data</font>

749
00:28:49,289 --> 00:28:54,539
and<font color="#E5E5E5"> we can't allocate any memory on</font>

750
00:28:52,080 --> 00:28:56,039
there we can't share<font color="#CCCCCC"> state</font><font color="#E5E5E5"> in there but</font>

751
00:28:54,539 --> 00:28:58,379
in<font color="#CCCCCC"> effect what we have to do is whenever</font>

752
00:28:56,039 --> 00:29:00,330
<font color="#E5E5E5">we do</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> have to basically have</font>

753
00:28:58,380 --> 00:29:02,940
single threaded bits that put<font color="#E5E5E5"> all the</font>

754
00:29:00,330 --> 00:29:04,889
data<font color="#E5E5E5"> into independent parts and then</font>

755
00:29:02,940 --> 00:29:07,559
call<font color="#E5E5E5"> parallel for each on those parts</font>

756
00:29:04,890 --> 00:29:09,480
<font color="#E5E5E5">and we find that model has worked quite</font>

757
00:29:07,559 --> 00:29:12,629
<font color="#CCCCCC">well for us at the moment</font>

758
00:29:09,480 --> 00:29:14,700
and typically<font color="#CCCCCC"> lld gets a higher degree</font>

759
00:29:12,630 --> 00:29:17,700
<font color="#E5E5E5">of parallelism out of them out of things</font>

760
00:29:14,700 --> 00:29:21,210
than gold sort of<font color="#E5E5E5"> worker threads and</font>

761
00:29:17,700 --> 00:29:23,640
tasks<font color="#CCCCCC"> okay so here's just an example of</font>

762
00:29:21,210 --> 00:29:24,450
<font color="#E5E5E5">how things might be paralyzed so I'm</font>

763
00:29:23,640 --> 00:29:27,960
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> have to go</font><font color="#CCCCCC"> through this really</font>

764
00:29:24,450 --> 00:29:29,940
quickly identical code folding basically

765
00:29:27,960 --> 00:29:32,330
it's looking<font color="#CCCCCC"> for functions that</font><font color="#E5E5E5"> I binary</font>

766
00:29:29,940 --> 00:29:35,010
identical so they can be merged into one

767
00:29:32,330 --> 00:29:38,610
<font color="#E5E5E5">so in this particular</font><font color="#CCCCCC"> example you can</font>

768
00:29:35,010 --> 00:29:41,158
kind of see f1 and g1 the same<font color="#E5E5E5"> f2 + GT</font>

769
00:29:38,610 --> 00:29:44,699
were the same<font color="#E5E5E5"> H 1 and H 2</font><font color="#CCCCCC"> are slightly</font>

770
00:29:41,159 --> 00:29:46,380
different<font color="#CCCCCC"> so they can't be merged</font><font color="#E5E5E5"> so in</font>

771
00:29:44,700 --> 00:29:47,850
effect<font color="#E5E5E5"> it's there's a sort of</font><font color="#CCCCCC"> it's kind</font>

772
00:29:46,380 --> 00:29:50,429
of<font color="#E5E5E5"> like the algorithm has to sort of</font>

773
00:29:47,850 --> 00:29:52,320
them find equivalence classes amongst

774
00:29:50,429 --> 00:29:55,409
functions and then merge the functions

775
00:29:52,320 --> 00:29:56,908
within<font color="#E5E5E5"> those equivalence classes so</font>

776
00:29:55,409 --> 00:29:58,620
<font color="#E5E5E5">probably not gonna get a time to go</font>

777
00:29:56,909 --> 00:30:00,600
<font color="#CCCCCC">through this</font><font color="#E5E5E5"> it's probably best I leave</font>

778
00:29:58,620 --> 00:30:02,250
that to<font color="#CCCCCC"> something to look to</font><font color="#E5E5E5"> look out</font>

779
00:30:00,600 --> 00:30:03,780
for there is actually a huge<font color="#E5E5E5"> comment in</font>

780
00:30:02,250 --> 00:30:05,640
the<font color="#E5E5E5"> lld source code to</font><font color="#CCCCCC"> go through there</font>

781
00:30:03,780 --> 00:30:07,678
<font color="#E5E5E5">but what I was going</font><font color="#CCCCCC"> to do here was just</font>

782
00:30:05,640 --> 00:30:10,140
<font color="#E5E5E5">basically say this is kind of how you</font>

783
00:30:07,679 --> 00:30:10,890
can split up an algorithm<font color="#CCCCCC"> int a</font><font color="#E5E5E5"> bit to</font>

784
00:30:10,140 --> 00:30:12,120
go through

785
00:30:10,890 --> 00:30:14,490
I can't<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> got time for</font><font color="#CCCCCC"> questions</font>

786
00:30:12,120 --> 00:30:16,320
I've got I've got<font color="#E5E5E5"> not many more</font>

787
00:30:14,490 --> 00:30:18,600
definitely got two more<font color="#E5E5E5"> slides so</font><font color="#CCCCCC"> I'll</font>

788
00:30:16,320 --> 00:30:19,799
<font color="#CCCCCC">go here so what I've sort of gone</font>

789
00:30:18,600 --> 00:30:24,240
<font color="#E5E5E5">through here is some of the sort of</font>

790
00:30:19,799 --> 00:30:26,460
technical<font color="#CCCCCC"> reasons why</font><font color="#E5E5E5"> LD or how</font><font color="#CCCCCC"> old it</font>

791
00:30:24,240 --> 00:30:28,890
<font color="#CCCCCC">lld</font><font color="#E5E5E5"> gains at speed there are also some</font>

792
00:30:26,460 --> 00:30:32,370
<font color="#CCCCCC">non-technical founders factors here</font><font color="#E5E5E5"> so</font>

793
00:30:28,890 --> 00:30:34,080
many of the contributors to<font color="#CCCCCC"> lld are sort</font>

794
00:30:32,370 --> 00:30:35,850
of from companies with very very<font color="#E5E5E5"> large</font>

795
00:30:34,080 --> 00:30:39,059
programs and they monitor<font color="#E5E5E5"> that</font>

796
00:30:35,850 --> 00:30:41,158
performance<font color="#E5E5E5"> and they try and keep</font><font color="#CCCCCC"> ll D</font>

797
00:30:39,059 --> 00:30:42,720
as fast as it can<font color="#E5E5E5"> report bugs when it</font>

798
00:30:41,159 --> 00:30:44,370
when it<font color="#CCCCCC"> when it slows down that</font><font color="#E5E5E5"> sort of</font>

799
00:30:42,720 --> 00:30:46,310
thing<font color="#E5E5E5"> there is a performance monitoring</font>

800
00:30:44,370 --> 00:30:47,989
<font color="#E5E5E5">bot that constantly</font>

801
00:30:46,310 --> 00:30:49,790
<font color="#CCCCCC">runs lld against the fact a</font><font color="#E5E5E5"> suite of</font>

802
00:30:47,990 --> 00:30:51,950
large programs<font color="#CCCCCC"> we can detect when things</font>

803
00:30:49,790 --> 00:30:53,960
slow down<font color="#E5E5E5"> code reviewers will look for</font>

804
00:30:51,950 --> 00:30:56,450
<font color="#E5E5E5">that and I guess in is that</font><font color="#CCCCCC"> it there's</font>

805
00:30:53,960 --> 00:30:58,670
something<font color="#CCCCCC"> that can cause controversy is</font>

806
00:30:56,450 --> 00:31:01,070
and when<font color="#E5E5E5"> particular when people want</font>

807
00:30:58,670 --> 00:31:02,720
features added and the upstream will say

808
00:31:01,070 --> 00:31:05,960
no because either you can do it some

809
00:31:02,720 --> 00:31:07,280
other<font color="#E5E5E5"> way</font><font color="#CCCCCC"> or whatever and typically</font><font color="#E5E5E5"> it's</font>

810
00:31:05,960 --> 00:31:10,540
trying to keep the code as<font color="#CCCCCC"> simple as</font>

811
00:31:07,280 --> 00:31:15,470
possible<font color="#CCCCCC"> but sometimes that means</font><font color="#E5E5E5"> that</font>

812
00:31:10,540 --> 00:31:17,780
things that<font color="#E5E5E5"> that you can do summers in</font>

813
00:31:15,470 --> 00:31:19,610
some cases say<font color="#CCCCCC"> its niche niche things</font>

814
00:31:17,780 --> 00:31:22,070
don't get supported<font color="#E5E5E5"> as fast as they</font>

815
00:31:19,610 --> 00:31:24,439
perhaps could<font color="#CCCCCC"> be so Velarde</font><font color="#E5E5E5"> tends to</font>

816
00:31:22,070 --> 00:31:26,149
<font color="#E5E5E5">work on there and what people implement</font>

817
00:31:24,440 --> 00:31:29,690
what people need not<font color="#CCCCCC"> necessarily what</font>

818
00:31:26,150 --> 00:31:31,490
the spec says is<font color="#CCCCCC"> there</font><font color="#E5E5E5"> okay so</font>

819
00:31:29,690 --> 00:31:33,470
conclusion that I had so there's a

820
00:31:31,490 --> 00:31:35,990
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> technical factors here</font><font color="#E5E5E5"> so it's</font>

821
00:31:33,470 --> 00:31:39,980
thin abstraction layers<font color="#E5E5E5"> custom memory</font>

822
00:31:35,990 --> 00:31:41,720
allocator<font color="#E5E5E5"> use of threads</font><font color="#CCCCCC"> optimized data</font>

823
00:31:39,980 --> 00:31:43,220
structures is probably<font color="#E5E5E5"> they're fairly</font>

824
00:31:41,720 --> 00:31:44,780
simple<font color="#E5E5E5"> answer there's nothing magic</font>

825
00:31:43,220 --> 00:31:48,830
about this it's all lots of little bits

826
00:31:44,780 --> 00:31:51,379
<font color="#E5E5E5">there and there is in the there's a</font>

827
00:31:48,830 --> 00:31:53,120
reference<font color="#E5E5E5"> in the end to a the gold</font>

828
00:31:51,380 --> 00:31:55,820
design document and that<font color="#E5E5E5"> goes through</font>

829
00:31:53,120 --> 00:31:57,979
<font color="#CCCCCC">PFDs problems extensively so that will</font>

830
00:31:55,820 --> 00:31:59,960
explain the same sort of things that's

831
00:31:57,980 --> 00:32:02,480
<font color="#E5E5E5">going on</font><font color="#CCCCCC"> lld</font><font color="#E5E5E5"> in structure is actually</font>

832
00:31:59,960 --> 00:32:03,830
fairly<font color="#E5E5E5"> similar to gold</font><font color="#CCCCCC"> I'd say the</font>

833
00:32:02,480 --> 00:32:05,780
majority<font color="#CCCCCC"> of the differences has been</font>

834
00:32:03,830 --> 00:32:09,470
speed between<font color="#CCCCCC"> LRD and gold and not</font>

835
00:32:05,780 --> 00:32:11,990
design ones they're pretty much just<font color="#CCCCCC"> the</font>

836
00:32:09,470 --> 00:32:15,020
data structures used the extra<font color="#E5E5E5"> use of</font>

837
00:32:11,990 --> 00:32:18,260
parallelism used and but I could see

838
00:32:15,020 --> 00:32:20,389
gold you know gold being improved if

839
00:32:18,260 --> 00:32:23,060
somebody did want<font color="#CCCCCC"> to go through that how</font>

840
00:32:20,390 --> 00:32:24,830
<font color="#E5E5E5">close it will get I don't know but at</font>

841
00:32:23,060 --> 00:32:26,540
that<font color="#E5E5E5"> particular point okay</font>

842
00:32:24,830 --> 00:32:27,830
so here's some references for you if you

843
00:32:26,540 --> 00:32:30,800
want<font color="#E5E5E5"> to go and bigger some of those</font>

844
00:32:27,830 --> 00:32:32,840
stuff out<font color="#E5E5E5"> but that's really</font><font color="#CCCCCC"> all I had so</font>

845
00:32:30,800 --> 00:32:34,760
<font color="#CCCCCC">any questions that anyone might have</font>

846
00:32:32,840 --> 00:32:38,449
<font color="#E5E5E5">been</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> remaining time</font>

847
00:32:34,760 --> 00:32:38,450
[Applause]

848
00:32:41,660 --> 00:33:01,140
<font color="#E5E5E5">okay hello right oh so the question was</font>

849
00:32:57,200 --> 00:33:03,890
<font color="#CCCCCC">llt is separate from the custom dynamic</font>

850
00:33:01,140 --> 00:33:07,080
<font color="#E5E5E5">linkers and is there a use case for</font>

851
00:33:03,890 --> 00:33:10,520
<font color="#CCCCCC">combining them so that</font><font color="#E5E5E5"> question did come</font>

852
00:33:07,080 --> 00:33:13,830
<font color="#E5E5E5">up a few years ago my guess</font><font color="#CCCCCC"> is probably</font>

853
00:33:10,520 --> 00:33:15,960
<font color="#CCCCCC">not</font><font color="#E5E5E5"> generally a lot</font><font color="#CCCCCC"> of the X L LD</font>

854
00:33:13,830 --> 00:33:19,530
<font color="#CCCCCC">probably wouldn't be as fast</font><font color="#E5E5E5"> for that</font>

855
00:33:15,960 --> 00:33:20,970
particular use case and<font color="#E5E5E5"> because in</font>

856
00:33:19,530 --> 00:33:22,500
effect the only<font color="#E5E5E5"> thing that those those</font>

857
00:33:20,970 --> 00:33:26,250
dynamic things are<font color="#E5E5E5"> doing is resolving</font>

858
00:33:22,500 --> 00:33:28,770
relocations it could<font color="#E5E5E5"> kind of share</font><font color="#CCCCCC"> the</font>

859
00:33:26,250 --> 00:33:30,929
design<font color="#E5E5E5"> as such but typically those</font>

860
00:33:28,770 --> 00:33:33,690
dynamic<font color="#CCCCCC"> linkers have got different data</font>

861
00:33:30,929 --> 00:33:34,890
structures representing the symbols

862
00:33:33,690 --> 00:33:37,470
because they have different<font color="#CCCCCC"> needs for</font>

863
00:33:34,890 --> 00:33:39,330
<font color="#E5E5E5">those and each of them are optimized for</font>

864
00:33:37,470 --> 00:33:41,730
<font color="#E5E5E5">their own case and as soon as you start</font>

865
00:33:39,330 --> 00:33:44,189
trying<font color="#E5E5E5"> to mix the two code paths you end</font>

866
00:33:41,730 --> 00:33:46,740
up with probably<font color="#E5E5E5"> more trouble</font><font color="#CCCCCC"> than you</font>

867
00:33:44,190 --> 00:33:48,390
really<font color="#CCCCCC"> gained from it</font><font color="#E5E5E5"> so in effect it</font><font color="#CCCCCC"> is</font>

868
00:33:46,740 --> 00:33:50,370
possible but the chances are you

869
00:33:48,390 --> 00:34:00,539
wouldn't<font color="#E5E5E5"> gain very</font><font color="#CCCCCC"> much by doing so</font><font color="#E5E5E5"> I</font>

870
00:33:50,370 --> 00:34:05,580
don't<font color="#E5E5E5"> think so not by not doing it at</font>

871
00:34:00,539 --> 00:34:08,429
all and I didn't try that<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think</font>

872
00:34:05,580 --> 00:34:11,699
you would<font color="#CCCCCC"> blue well</font><font color="#E5E5E5"> it's when they sing</font>

873
00:34:08,429 --> 00:34:13,320
she<font color="#E5E5E5"> you I don't the difficulty you get</font>

874
00:34:11,699 --> 00:34:16,350
with those things<font color="#E5E5E5"> as you</font><font color="#CCCCCC"> end up with if</font>

875
00:34:13,320 --> 00:34:21,149
you<font color="#CCCCCC"> don't if you don't do any merging at</font>

876
00:34:16,350 --> 00:34:22,980
all then your outputs much bigger<font color="#E5E5E5"> so any</font>

877
00:34:21,149 --> 00:34:25,980
time<font color="#E5E5E5"> you save by not doing the</font>

878
00:34:22,980 --> 00:34:29,490
calculation is then offset<font color="#E5E5E5"> by how much</font>

879
00:34:25,980 --> 00:34:31,710
bigger you<font color="#CCCCCC"> have to write it out my guess</font>

880
00:34:29,489 --> 00:34:34,678
<font color="#E5E5E5">is that it will probably not</font><font color="#CCCCCC"> be that</font>

881
00:34:31,710 --> 00:34:36,030
much<font color="#CCCCCC"> different</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> oh one case where</font>

882
00:34:34,679 --> 00:34:37,950
it<font color="#E5E5E5"> just merges identical because that</font>

883
00:34:36,030 --> 00:34:40,560
all that<font color="#CCCCCC"> algorithm does</font><font color="#E5E5E5"> is hash each</font>

884
00:34:37,949 --> 00:34:43,230
string<font color="#E5E5E5"> and if this if the hash is match</font>

885
00:34:40,560 --> 00:34:45,089
you know it's it's basically<font color="#E5E5E5"> just a run</font>

886
00:34:43,230 --> 00:34:46,710
<font color="#CCCCCC">through all the strings once</font><font color="#E5E5E5"> compared</font>

887
00:34:45,089 --> 00:34:48,509
hashes it's not that computationally

888
00:34:46,710 --> 00:34:49,639
expensive so my guess<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> wouldn't</font>

889
00:34:48,510 --> 00:35:03,170
save that much but

890
00:34:49,639 --> 00:35:05,210
done the numbers<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> Lu right</font><font color="#E5E5E5"> okay so</font>

891
00:35:03,170 --> 00:35:08,900
the<font color="#E5E5E5"> question was have we looked into</font>

892
00:35:05,210 --> 00:35:11,000
<font color="#E5E5E5">peak memory usage and and have we tried</font>

893
00:35:08,900 --> 00:35:13,370
potentially reducing that<font color="#E5E5E5"> so that so</font><font color="#CCCCCC"> I</font>

894
00:35:11,000 --> 00:35:15,620
have done some anecdotal looking at<font color="#E5E5E5"> that</font>

895
00:35:13,370 --> 00:35:20,270
<font color="#E5E5E5">just by</font><font color="#CCCCCC"> looking at basically the memory</font>

896
00:35:15,620 --> 00:35:21,950
usage<font color="#CCCCCC"> peak memory usage from time bus</font>

897
00:35:20,270 --> 00:35:25,160
running<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the programs</font><font color="#E5E5E5"> here and</font>

898
00:35:21,950 --> 00:35:26,810
typically because all<font color="#CCCCCC"> of the inputs are</font>

899
00:35:25,160 --> 00:35:31,339
n mapped<font color="#E5E5E5"> that's where a lot</font><font color="#CCCCCC"> of the</font>

900
00:35:26,810 --> 00:35:35,540
virtual address<font color="#E5E5E5"> space comes up typically</font>

901
00:35:31,340 --> 00:35:38,180
<font color="#CCCCCC">lld is an gold kind</font><font color="#E5E5E5"> of comparable</font><font color="#CCCCCC"> and</font>

902
00:35:35,540 --> 00:35:40,759
they're slightly<font color="#E5E5E5"> ahead of</font><font color="#CCCCCC"> BFD</font><font color="#E5E5E5"> but it's</font>

903
00:35:38,180 --> 00:35:43,190
not really that<font color="#E5E5E5"> much</font><font color="#CCCCCC"> so pretty</font><font color="#E5E5E5"> much all</font>

904
00:35:40,760 --> 00:35:45,200
the mainstream linkers are<font color="#E5E5E5"> coming in at</font>

905
00:35:43,190 --> 00:35:46,790
roughly<font color="#E5E5E5"> comparable in terms</font><font color="#CCCCCC"> of the</font>

906
00:35:45,200 --> 00:35:51,589
amount of virtual<font color="#CCCCCC"> address they would use</font>

907
00:35:46,790 --> 00:35:53,450
and it's difficult<font color="#E5E5E5"> to I think it's a</font>

908
00:35:51,590 --> 00:35:55,610
fundamentally different<font color="#CCCCCC"> linker design if</font>

909
00:35:53,450 --> 00:35:56,930
you're<font color="#E5E5E5"> going to get significant savings</font>

910
00:35:55,610 --> 00:35:59,300
unfortunately it's<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> those ones</font>

911
00:35:56,930 --> 00:36:01,910
<font color="#E5E5E5">where you would have to basically keep</font>

912
00:35:59,300 --> 00:36:03,470
going back<font color="#CCCCCC"> to disk a lot</font><font color="#E5E5E5"> of the times it</font>

913
00:36:01,910 --> 00:36:06,020
<font color="#E5E5E5">would probably be substantially slower</font>

914
00:36:03,470 --> 00:36:07,819
at that particular point but yeah so I

915
00:36:06,020 --> 00:36:09,590
think there may be<font color="#CCCCCC"> small savings that</font>

916
00:36:07,820 --> 00:36:11,060
you could make but they wouldn't you

917
00:36:09,590 --> 00:36:12,680
know they would be<font color="#E5E5E5"> order of if you're</font>

918
00:36:11,060 --> 00:36:15,170
allocating gigabytes of memory you<font color="#E5E5E5"> might</font>

919
00:36:12,680 --> 00:36:18,069
save a few hundred megabytes<font color="#E5E5E5"> it's</font>

920
00:36:15,170 --> 00:36:18,070
probably<font color="#E5E5E5"> not worth it</font>

921
00:36:24,490 --> 00:36:33,879
very small programs<font color="#E5E5E5"> right okay okay</font>

922
00:36:35,790 --> 00:36:40,540
[Music]

923
00:36:37,540 --> 00:36:40,540
<font color="#E5E5E5">right</font>

924
00:36:47,490 --> 00:36:51,209
<font color="#CCCCCC">Serkis</font><font color="#E5E5E5"> the closer question was is that</font>

925
00:36:49,290 --> 00:36:53,279
<font color="#E5E5E5">there is actually</font><font color="#CCCCCC"> a use case that</font>

926
00:36:51,210 --> 00:36:55,859
someone<font color="#E5E5E5"> has for linking together</font><font color="#CCCCCC"> large</font>

927
00:36:53,280 --> 00:36:59,460
amounts of objects and using<font color="#E5E5E5"> a</font><font color="#CCCCCC"> loggia</font>

928
00:36:55,859 --> 00:37:01,890
<font color="#CCCCCC">the library would be</font><font color="#E5E5E5"> upstream</font><font color="#CCCCCC"> except</font>

929
00:36:59,460 --> 00:37:05,160
patches and I think the answer to<font color="#E5E5E5"> that</font>

930
00:37:01,890 --> 00:37:07,529
<font color="#E5E5E5">is probably given that there is a use</font>

931
00:37:05,160 --> 00:37:08,850
case<font color="#CCCCCC"> that you can outline I think so</font>

932
00:37:07,530 --> 00:37:11,580
yeah we're<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to do this specific</font>

933
00:37:08,850 --> 00:37:13,109
<font color="#CCCCCC">thing whether our pain points</font><font color="#E5E5E5"> whether</font>

934
00:37:11,580 --> 00:37:18,509
<font color="#E5E5E5">our specific pain points</font>

935
00:37:13,109 --> 00:37:22,109
can we get<font color="#E5E5E5"> patches that are not going to</font>

936
00:37:18,510 --> 00:37:25,920
not<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to obviously derail the other</font>

937
00:37:22,109 --> 00:37:28,440
the<font color="#E5E5E5"> basically the the good bits</font><font color="#CCCCCC"> about</font>

938
00:37:25,920 --> 00:37:30,150
having it as a<font color="#E5E5E5"> program design and I</font>

939
00:37:28,440 --> 00:37:32,790
<font color="#E5E5E5">think if you can kind of say okay</font>

940
00:37:30,150 --> 00:37:35,100
<font color="#E5E5E5">these bits are additions and they don't</font>

941
00:37:32,790 --> 00:37:36,869
contrast with anything and<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that</font>

942
00:37:35,100 --> 00:37:39,210
would<font color="#CCCCCC"> be reason you know a</font><font color="#E5E5E5"> reasonable</font>

943
00:37:36,869 --> 00:37:41,190
thing<font color="#CCCCCC"> to add to</font><font color="#E5E5E5"> ask for I think</font><font color="#CCCCCC"> the</font>

944
00:37:39,210 --> 00:37:42,390
things<font color="#E5E5E5"> would get pushed back are yeah</font>

945
00:37:41,190 --> 00:37:44,340
here's there's and modifications but

946
00:37:42,390 --> 00:37:46,710
we've suddenly<font color="#E5E5E5"> made hold this</font><font color="#CCCCCC"> on-orbit</font>

947
00:37:44,340 --> 00:37:48,359
<font color="#CCCCCC">look much more difficult I guess</font><font color="#E5E5E5"> yeah so</font>

948
00:37:46,710 --> 00:37:53,180
but yeah fundamentally<font color="#CCCCCC"> best-best</font><font color="#E5E5E5"> give it</font>

949
00:37:48,359 --> 00:37:53,180
a try is pretty the best<font color="#CCCCCC"> fit</font><font color="#E5E5E5"> okay okay</font>

950
00:38:11,310 --> 00:38:17,650
and so the<font color="#E5E5E5"> question was about erm</font>

951
00:38:15,730 --> 00:38:21,220
<font color="#E5E5E5">there's some strings that you have to</font>

952
00:38:17,650 --> 00:38:22,570
merge<font color="#E5E5E5"> for point equality well in in in</font>

953
00:38:21,220 --> 00:38:23,890
the<font color="#CCCCCC"> actual strings that we're talking</font>

954
00:38:22,570 --> 00:38:25,440
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that go into these particular</font>

955
00:38:23,890 --> 00:38:29,560
<font color="#E5E5E5">merge sections</font>

956
00:38:25,440 --> 00:38:31,300
it's the these are things like string

957
00:38:29,560 --> 00:38:32,830
literals<font color="#CCCCCC"> that you don't take the address</font>

958
00:38:31,300 --> 00:38:35,320
<font color="#E5E5E5">of or you're not supposed to take the</font>

959
00:38:32,830 --> 00:38:37,060
<font color="#CCCCCC">address of and so all</font><font color="#E5E5E5"> their debug names</font>

960
00:38:35,320 --> 00:38:39,220
so yeah I<font color="#E5E5E5"> think basically in terms of</font>

961
00:38:37,060 --> 00:38:40,810
elf<font color="#CCCCCC"> elf salão allows you to not do the</font>

962
00:38:39,220 --> 00:38:42,310
optimization<font color="#E5E5E5"> but yeah and I do know what</font>

963
00:38:40,810 --> 00:38:44,020
you<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> the stuff that the stuff that</font>

964
00:38:42,310 --> 00:38:48,430
the address<font color="#CCCCCC"> is</font><font color="#E5E5E5"> taken they can't go in</font>

965
00:38:44,020 --> 00:38:50,440
those sections<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> okay okay</font>

966
00:38:48,430 --> 00:38:53,250
that's that's<font color="#E5E5E5"> the last question yeah</font>

967
00:38:50,440 --> 00:38:53,250
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very much for listening</font>

