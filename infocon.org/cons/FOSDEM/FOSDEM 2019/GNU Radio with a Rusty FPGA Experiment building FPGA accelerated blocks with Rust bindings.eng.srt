1
00:00:05,740 --> 00:00:10,510
<font color="#E5E5E5">thanks</font><font color="#CCCCCC"> I'm ready for coming</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> first</font>

2
00:00:08,590 --> 00:00:14,140
time here so<font color="#E5E5E5"> I'm excited to be here</font>

3
00:00:10,510 --> 00:00:16,450
<font color="#CCCCCC">presenting this</font><font color="#E5E5E5"> talks kind of split into</font>

4
00:00:14,140 --> 00:00:18,610
two sections<font color="#CCCCCC"> try to tie them together a</font>

5
00:00:16,450 --> 00:00:23,860
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> bit is going</font><font color="#E5E5E5"> to be</font>

6
00:00:18,610 --> 00:00:26,470
focused<font color="#E5E5E5"> on integrating rust with canoe</font>

7
00:00:23,860 --> 00:00:29,770
radio<font color="#E5E5E5"> right now</font><font color="#CCCCCC"> you pretty</font><font color="#E5E5E5"> much write</font>

8
00:00:26,470 --> 00:00:32,290
either C++ or Python<font color="#CCCCCC"> if you want to do</font>

9
00:00:29,770 --> 00:00:35,019
anything there<font color="#CCCCCC"> I</font><font color="#E5E5E5"> personally really don't</font>

10
00:00:32,290 --> 00:00:38,019
know how to write C++<font color="#E5E5E5"> it's never clicked</font>

11
00:00:35,020 --> 00:00:42,780
for<font color="#CCCCCC"> me so I wanted</font><font color="#E5E5E5"> to explore some other</font>

12
00:00:38,020 --> 00:00:42,780
options<font color="#CCCCCC"> and so you get started there</font>

13
00:00:45,840 --> 00:00:50,680
yeah the other one is kind<font color="#E5E5E5"> of I have all</font>

14
00:00:49,360 --> 00:00:52,930
this hardware that's been<font color="#E5E5E5"> piling up</font>

15
00:00:50,680 --> 00:00:56,890
where I have<font color="#E5E5E5"> FPGAs sitting around with</font>

16
00:00:52,930 --> 00:00:59,519
nothing<font color="#CCCCCC"> to do with them so I feel like I</font>

17
00:00:56,890 --> 00:01:01,690
should do something<font color="#CCCCCC"> with that and the</font>

18
00:00:59,520 --> 00:01:04,449
information<font color="#CCCCCC"> out there seems to</font><font color="#E5E5E5"> be pretty</font>

19
00:01:01,690 --> 00:01:05,920
poor about how you<font color="#CCCCCC"> actually put</font>

20
00:01:04,449 --> 00:01:08,369
<font color="#E5E5E5">something on there and then connect it</font>

21
00:01:05,920 --> 00:01:11,350
<font color="#E5E5E5">to something real there's like a lot</font><font color="#CCCCCC"> of</font>

22
00:01:08,369 --> 00:01:14,789
missing<font color="#CCCCCC"> information there I feel like</font><font color="#E5E5E5"> so</font>

23
00:01:11,350 --> 00:01:18,460
hopefully this will give<font color="#CCCCCC"> some context so</font>

24
00:01:14,789 --> 00:01:20,139
<font color="#E5E5E5">why rust</font><font color="#CCCCCC"> I mean I think a lot of people</font>

25
00:01:18,460 --> 00:01:21,609
have heard<font color="#E5E5E5"> about this tries</font><font color="#CCCCCC"> to take care</font>

26
00:01:20,139 --> 00:01:23,979
<font color="#CCCCCC">of a lot of the memory management and</font>

27
00:01:21,609 --> 00:01:25,449
safety<font color="#E5E5E5"> there</font><font color="#CCCCCC"> has a</font><font color="#E5E5E5"> really nice</font>

28
00:01:23,979 --> 00:01:28,090
concurrency model so you<font color="#E5E5E5"> can kind of</font>

29
00:01:25,450 --> 00:01:29,859
<font color="#E5E5E5">just write</font><font color="#CCCCCC"> code that's</font><font color="#E5E5E5"> concurrent and it</font>

30
00:01:28,090 --> 00:01:33,039
won't let you<font color="#E5E5E5"> write things that aren't</font>

31
00:01:29,859 --> 00:01:35,169
<font color="#E5E5E5">safe from the very beginning it ties</font>

32
00:01:33,039 --> 00:01:37,209
<font color="#CCCCCC">into c</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> well i find the language</font>

33
00:01:35,170 --> 00:01:39,700
<font color="#CCCCCC">really easy to read maybe if some people</font>

34
00:01:37,209 --> 00:01:42,280
don't<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> fine and</font><font color="#E5E5E5"> then dependency</font>

35
00:01:39,700 --> 00:01:45,249
side it<font color="#E5E5E5"> kind of has a pre-built package</font>

36
00:01:42,280 --> 00:01:47,529
manager that works<font color="#E5E5E5"> with it well which</font>

37
00:01:45,249 --> 00:01:54,219
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> c and c++ i think are</font>

38
00:01:47,529 --> 00:01:57,100
<font color="#E5E5E5">very bad at so i</font><font color="#CCCCCC"> i've enjoyed my</font>

39
00:01:54,219 --> 00:01:59,048
experience with it<font color="#CCCCCC"> so</font><font color="#E5E5E5"> far so in case you</font>

40
00:01:57,100 --> 00:02:00,939
haven't<font color="#CCCCCC"> seen any rust here's like</font><font color="#E5E5E5"> a very</font>

41
00:01:59,049 --> 00:02:03,729
simple rust<font color="#E5E5E5"> program</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> actually</font>

42
00:02:00,939 --> 00:02:05,229
from<font color="#E5E5E5"> the rust book which is really good</font>

43
00:02:03,729 --> 00:02:06,490
<font color="#E5E5E5">if you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> learn it</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> got some</font>

44
00:02:05,229 --> 00:02:09,580
<font color="#E5E5E5">stuff at the top we're pulling in an</font>

45
00:02:06,490 --> 00:02:11,859
external package some<font color="#CCCCCC"> namespacing</font><font color="#E5E5E5"> we're</font>

46
00:02:09,580 --> 00:02:13,210
doing explicit<font color="#E5E5E5"> mutability so we're</font>

47
00:02:11,860 --> 00:02:14,380
telling<font color="#E5E5E5"> that function it's</font><font color="#CCCCCC"> going to go</font>

48
00:02:13,210 --> 00:02:17,680
in there<font color="#E5E5E5"> it's going to play with things</font>

49
00:02:14,380 --> 00:02:18,490
<font color="#E5E5E5">on that</font><font color="#CCCCCC"> and it's okay to do</font><font color="#E5E5E5"> that we have</font>

50
00:02:17,680 --> 00:02:21,190
these things<font color="#E5E5E5"> that</font>

51
00:02:18,490 --> 00:02:23,050
<font color="#E5E5E5">are kind of like fancy switch statements</font>

52
00:02:21,190 --> 00:02:25,359
<font color="#CCCCCC">I don't know for</font><font color="#E5E5E5"> me I can look at this</font>

53
00:02:23,050 --> 00:02:29,110
and<font color="#CCCCCC"> it just it's easy to understand</font>

54
00:02:25,360 --> 00:02:31,870
what's going<font color="#CCCCCC"> on this is kind of</font><font color="#E5E5E5"> some of</font>

55
00:02:29,110 --> 00:02:33,850
<font color="#E5E5E5">the concurrence</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> just creating</font>

56
00:02:31,870 --> 00:02:36,550
threads<font color="#E5E5E5"> and they're just doing what</font><font color="#CCCCCC"> they</font>

57
00:02:33,850 --> 00:02:42,459
<font color="#CCCCCC">should do there's</font><font color="#E5E5E5"> not a bunch of boost</font>

58
00:02:36,550 --> 00:02:44,800
hanging out here<font color="#CCCCCC"> so kind of</font><font color="#E5E5E5"> get to the</font>

59
00:02:42,460 --> 00:02:48,640
<font color="#CCCCCC">point of it</font><font color="#E5E5E5"> how can</font><font color="#CCCCCC"> we actually talk to</font>

60
00:02:44,800 --> 00:02:51,430
<font color="#E5E5E5">the new radio</font><font color="#CCCCCC"> we need to create</font><font color="#E5E5E5"> that see</font>

61
00:02:48,640 --> 00:02:53,290
binding for it<font color="#CCCCCC"> so it's fairly</font>

62
00:02:51,430 --> 00:02:54,820
straightforward this first bit we're

63
00:02:53,290 --> 00:02:56,019
saying hey there's this<font color="#CCCCCC"> library</font><font color="#E5E5E5"> that</font>

64
00:02:54,820 --> 00:02:58,660
we're promised we're going to connect

65
00:02:56,020 --> 00:03:02,290
<font color="#E5E5E5">with you that has library funk in it and</font>

66
00:02:58,660 --> 00:03:03,790
it<font color="#E5E5E5"> looks like this same thing</font><font color="#CCCCCC"> on the</font>

67
00:03:02,290 --> 00:03:06,940
<font color="#E5E5E5">seaside we're saying hey we've</font><font color="#CCCCCC"> provide</font>

68
00:03:03,790 --> 00:03:08,109
this that goes out<font color="#E5E5E5"> and then we need to</font>

69
00:03:06,940 --> 00:03:10,840
provide<font color="#CCCCCC"> a header file that also</font>

70
00:03:08,110 --> 00:03:16,300
<font color="#CCCCCC">represents that so that sea knows how to</font>

71
00:03:10,840 --> 00:03:18,940
talked<font color="#E5E5E5"> about</font><font color="#CCCCCC"> so now kind of getting word</font>

72
00:03:16,300 --> 00:03:20,620
<font color="#E5E5E5">of the canoe radio slide so for this I'm</font>

73
00:03:18,940 --> 00:03:21,880
gonna walk through about<font color="#E5E5E5"> the simplest</font>

74
00:03:20,620 --> 00:03:24,280
thing you<font color="#E5E5E5"> could do and get new radio</font>

75
00:03:21,880 --> 00:03:26,500
that will<font color="#CCCCCC"> multiply block just for</font>

76
00:03:24,280 --> 00:03:29,980
floating<font color="#CCCCCC"> point numbers</font><font color="#E5E5E5"> we're gonna build</font>

77
00:03:26,500 --> 00:03:31,960
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and we're so this is what that</font>

78
00:03:29,980 --> 00:03:35,440
looks<font color="#CCCCCC"> like it's there's really not very</font>

79
00:03:31,960 --> 00:03:39,190
<font color="#E5E5E5">much fancy</font><font color="#CCCCCC"> about that we take in</font><font color="#E5E5E5"> two</font>

80
00:03:35,440 --> 00:03:46,680
vectors and a<font color="#E5E5E5"> number of items that are</font>

81
00:03:39,190 --> 00:03:46,680
in<font color="#E5E5E5"> those vectors and we multiply them</font><font color="#CCCCCC"> so</font>

82
00:03:49,260 --> 00:03:56,859
yeah<font color="#CCCCCC"> so there's a</font><font color="#E5E5E5"> few things that we</font>

83
00:03:55,660 --> 00:03:59,260
should think about<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of outside of</font>

84
00:03:56,860 --> 00:04:00,580
<font color="#E5E5E5">that one of the things that sometimes we</font>

85
00:03:59,260 --> 00:04:05,019
want to<font color="#E5E5E5"> do so the multiply thing is</font>

86
00:04:00,580 --> 00:04:06,250
that's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple but frequently</font>

87
00:04:05,020 --> 00:04:08,140
there's a lot more state that we're

88
00:04:06,250 --> 00:04:10,150
trying<font color="#E5E5E5"> to hold into this thing so maybe</font>

89
00:04:08,140 --> 00:04:11,619
we're setting up some UDP socket we're

90
00:04:10,150 --> 00:04:13,090
gonna build the UDP<font color="#E5E5E5"> sink or something</font>

91
00:04:11,620 --> 00:04:14,920
like<font color="#CCCCCC"> that we need to be able</font><font color="#E5E5E5"> to hold</font>

92
00:04:13,090 --> 00:04:16,988
that descriptor we need to<font color="#CCCCCC"> all be able</font>

93
00:04:14,920 --> 00:04:18,339
<font color="#E5E5E5">to hold other state we'd like to be able</font>

94
00:04:16,988 --> 00:04:20,798
to<font color="#E5E5E5"> keep</font><font color="#CCCCCC"> some of that</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> rust</font>

95
00:04:18,339 --> 00:04:24,099
side but every<font color="#E5E5E5"> time that function</font>

96
00:04:20,798 --> 00:04:26,679
returns and it doesn't pass it didn't

97
00:04:24,100 --> 00:04:27,940
take in the mutable object<font color="#E5E5E5"> it's like I</font>

98
00:04:26,680 --> 00:04:30,010
got<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> care of</font><font color="#E5E5E5"> this I'm gonna get</font>

99
00:04:27,940 --> 00:04:32,620
rid of it that's not helpful if<font color="#E5E5E5"> we want</font>

100
00:04:30,010 --> 00:04:35,409
to<font color="#E5E5E5"> be able to then talk to it later</font>

101
00:04:32,620 --> 00:04:37,629
and so there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things where you</font>

102
00:04:35,410 --> 00:04:38,889
put<font color="#E5E5E5"> this unsafe thing in there and that</font>

103
00:04:37,629 --> 00:04:41,409
<font color="#E5E5E5">means it's kind of there are dragons</font>

104
00:04:38,889 --> 00:04:44,710
<font color="#E5E5E5">here you need</font><font color="#CCCCCC"> to handle that so we're</font>

105
00:04:41,409 --> 00:04:46,330
gonna<font color="#E5E5E5"> play with dragons for a minute</font><font color="#CCCCCC"> so</font>

106
00:04:44,710 --> 00:04:49,270
this is kind of<font color="#E5E5E5"> you can think</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

107
00:04:46,330 --> 00:04:52,270
<font color="#CCCCCC">almost</font><font color="#E5E5E5"> like a class that we've created</font>

108
00:04:49,270 --> 00:04:54,609
it's called<font color="#CCCCCC"> Struck's but here</font><font color="#E5E5E5"> it's</font>

109
00:04:52,270 --> 00:04:58,810
similar<font color="#CCCCCC"> and they have something</font><font color="#E5E5E5"> called a</font>

110
00:04:54,610 --> 00:05:01,419
box<font color="#E5E5E5"> and you put</font><font color="#CCCCCC"> that object in the box</font>

111
00:04:58,810 --> 00:05:06,699
<font color="#E5E5E5">and you say it's in the box don't touch</font>

112
00:05:01,419 --> 00:05:11,830
the box and then later we go and clean

113
00:05:06,699 --> 00:05:14,830
up<font color="#E5E5E5"> the box</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> lets us take that and</font>

114
00:05:11,830 --> 00:05:16,270
send it out<font color="#CCCCCC"> this can be actually used to</font>

115
00:05:14,830 --> 00:05:20,979
then build something that<font color="#CCCCCC"> looks a lot</font>

116
00:05:16,270 --> 00:05:23,859
more<font color="#CCCCCC"> like a C++ like class on the other</font>

117
00:05:20,979 --> 00:05:26,380
side there's a lot of complexities there

118
00:05:23,860 --> 00:05:28,740
they go<font color="#E5E5E5"> into that but there's somebody</font>

119
00:05:26,380 --> 00:05:31,360
at Mozilla that's done an excellent job

120
00:05:28,740 --> 00:05:33,340
<font color="#CCCCCC">working through that</font><font color="#E5E5E5"> it's a very long</font>

121
00:05:31,360 --> 00:05:35,500
article<font color="#E5E5E5"> so I didn't want to try to put</font>

122
00:05:33,340 --> 00:05:36,460
that<font color="#E5E5E5"> in here</font><font color="#CCCCCC"> but I highly recommend</font>

123
00:05:35,500 --> 00:05:40,090
<font color="#CCCCCC">checking that out if you're interested</font>

124
00:05:36,460 --> 00:05:44,500
<font color="#CCCCCC">in how you can use</font><font color="#E5E5E5"> that to provide those</font>

125
00:05:40,090 --> 00:05:48,060
interfaces so getting back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this</font>

126
00:05:44,500 --> 00:05:51,279
function<font color="#CCCCCC"> so what is this we got some</font>

127
00:05:48,060 --> 00:05:53,440
void pointers<font color="#E5E5E5"> that we're playing with we</font>

128
00:05:51,279 --> 00:05:55,509
<font color="#E5E5E5">don't really know what they</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> that's</font>

129
00:05:53,440 --> 00:05:59,800
<font color="#E5E5E5">great</font>

130
00:05:55,509 --> 00:06:03,279
but if we look<font color="#CCCCCC"> more specifically at how</font>

131
00:05:59,800 --> 00:06:07,090
<font color="#E5E5E5">we've implemented in the C++</font><font color="#CCCCCC"> side that</font>

132
00:06:03,279 --> 00:06:08,620
for the float type it's not that weird

133
00:06:07,090 --> 00:06:10,568
<font color="#CCCCCC">right we're just saying</font><font color="#E5E5E5"> that those those</font>

134
00:06:08,620 --> 00:06:14,830
void pointers they weren't floats<font color="#E5E5E5"> it's</font>

135
00:06:10,569 --> 00:06:16,990
it's fine<font color="#CCCCCC"> and there happens to be a</font>

136
00:06:14,830 --> 00:06:19,440
really nice place<font color="#E5E5E5"> here where before we</font>

137
00:06:16,990 --> 00:06:21,699
were calling<font color="#CCCCCC"> in to</font><font color="#E5E5E5"> the Volk library</font>

138
00:06:19,440 --> 00:06:26,289
where we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> just now call</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rust</font>

139
00:06:21,699 --> 00:06:30,690
library<font color="#E5E5E5"> and it's a very simple interface</font>

140
00:06:26,289 --> 00:06:33,210
there<font color="#E5E5E5"> and so we can take that and just</font>

141
00:06:30,690 --> 00:06:38,139
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> that piece of it</font>

142
00:06:33,210 --> 00:06:39,068
<font color="#E5E5E5">so start building that with rust there's</font>

143
00:06:38,139 --> 00:06:41,289
a thing that<font color="#E5E5E5"> kind of gets you the</font>

144
00:06:39,069 --> 00:06:43,570
boilerplate going we want<font color="#CCCCCC"> to make sure</font>

145
00:06:41,289 --> 00:06:44,770
<font color="#E5E5E5">that we're creating a static library</font><font color="#CCCCCC"> cuz</font>

146
00:06:43,570 --> 00:06:45,940
<font color="#E5E5E5">we actually are going to tie this right</font>

147
00:06:44,770 --> 00:06:50,770
<font color="#E5E5E5">into</font><font color="#CCCCCC"> the library</font>

148
00:06:45,940 --> 00:06:55,240
<font color="#CCCCCC">the</font><font color="#E5E5E5"> new radios creating for the</font><font color="#CCCCCC"> bass</font>

149
00:06:50,770 --> 00:06:56,560
walk set<font color="#E5E5E5"> so we're gonna create that this</font>

150
00:06:55,240 --> 00:07:00,790
is the<font color="#E5E5E5"> function that we're gonna try to</font>

151
00:06:56,560 --> 00:07:06,130
<font color="#E5E5E5">build so we go to find it up there we</font>

152
00:07:00,790 --> 00:07:08,380
say we're taking<font color="#CCCCCC"> in that output buffer</font>

153
00:07:06,130 --> 00:07:10,810
<font color="#E5E5E5">and it's gonna be mutable we're taking a</font>

154
00:07:08,380 --> 00:07:12,790
pointer I should say<font color="#CCCCCC"> and then we take in</font>

155
00:07:10,810 --> 00:07:15,270
the<font color="#E5E5E5"> other two they're not mutable and</font>

156
00:07:12,790 --> 00:07:19,750
the number of points<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are involved</font>

157
00:07:15,270 --> 00:07:22,990
we then do some unsafe things where we

158
00:07:19,750 --> 00:07:26,620
say trust<font color="#E5E5E5"> us we</font><font color="#CCCCCC"> know how big that memory</font>

159
00:07:22,990 --> 00:07:29,530
region is<font color="#CCCCCC"> but the nice thing is</font><font color="#E5E5E5"> that</font>

160
00:07:26,620 --> 00:07:31,570
<font color="#CCCCCC">after this long as this</font><font color="#E5E5E5"> has been</font>

161
00:07:29,530 --> 00:07:33,400
<font color="#CCCCCC">established as correct everything else</font>

162
00:07:31,570 --> 00:07:35,320
<font color="#E5E5E5">that</font><font color="#CCCCCC"> follows is safe we don't really</font>

163
00:07:33,400 --> 00:07:40,750
have to start<font color="#CCCCCC"> worrying</font><font color="#E5E5E5"> about anything</font>

164
00:07:35,320 --> 00:07:42,040
anymore<font color="#CCCCCC"> so we do that</font><font color="#E5E5E5"> and that's that's</font>

165
00:07:40,750 --> 00:07:46,420
fine<font color="#E5E5E5"> right it's just from kind</font><font color="#CCCCCC"> of done a</font>

166
00:07:42,040 --> 00:07:49,240
<font color="#E5E5E5">scalar implementation of</font><font color="#CCCCCC"> that where I</font>

167
00:07:46,420 --> 00:07:53,110
think<font color="#CCCCCC"> it gets more interesting oh sorry</font>

168
00:07:49,240 --> 00:07:55,600
so if any<font color="#E5E5E5"> of</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> worked with</font><font color="#CCCCCC"> the</font>

169
00:07:53,110 --> 00:07:58,480
<font color="#CCCCCC">new radio on it you know</font><font color="#E5E5E5"> it's big</font><font color="#CCCCCC"> see</font>

170
00:07:55,600 --> 00:08:03,580
make project with all kinds of<font color="#CCCCCC"> hidden</font>

171
00:07:58,480 --> 00:08:05,140
dragons<font color="#E5E5E5"> in there</font><font color="#CCCCCC"> so I was a</font><font color="#E5E5E5"> little</font>

172
00:08:03,580 --> 00:08:08,940
unsure how this was actually<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

173
00:08:05,140 --> 00:08:08,940
tie<font color="#E5E5E5"> into that process</font>

174
00:08:09,510 --> 00:08:16,740
but some<font color="#E5E5E5"> people have actually</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> a</font>

175
00:08:12,760 --> 00:08:20,560
nice little<font color="#CCCCCC"> sea make wrapper</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> rust</font>

176
00:08:16,740 --> 00:08:24,790
<font color="#CCCCCC">and so</font><font color="#E5E5E5"> we're able to just take our rust</font>

177
00:08:20,560 --> 00:08:31,680
project<font color="#E5E5E5"> put it inside the tree add</font><font color="#CCCCCC"> our</font>

178
00:08:24,790 --> 00:08:37,330
header file make these changes<font color="#CCCCCC"> to that</font>

179
00:08:31,680 --> 00:08:39,969
<font color="#E5E5E5">component and it built and that was all</font>

180
00:08:37,330 --> 00:08:41,740
<font color="#E5E5E5">that we had to do which was really</font>

181
00:08:39,969 --> 00:08:43,300
satisfying it even goes out here if<font color="#CCCCCC"> you</font>

182
00:08:41,740 --> 00:08:45,040
<font color="#E5E5E5">don't have the dependencies there it'll</font>

183
00:08:43,299 --> 00:08:47,740
go down and pull them<font color="#E5E5E5"> into and it does</font>

184
00:08:45,040 --> 00:08:53,800
the<font color="#CCCCCC"> whole build process so that was</font><font color="#E5E5E5"> that</font>

185
00:08:47,740 --> 00:08:55,360
<font color="#E5E5E5">was very satisfying</font><font color="#CCCCCC"> this is yeah</font><font color="#E5E5E5"> so one</font>

186
00:08:53,800 --> 00:08:56,859
of the<font color="#CCCCCC"> other things we</font><font color="#E5E5E5"> can do is extend</font>

187
00:08:55,360 --> 00:08:59,260
this a little<font color="#E5E5E5"> bit since we made it a</font>

188
00:08:56,860 --> 00:08:59,980
very<font color="#E5E5E5"> non performant function let's maybe</font>

189
00:08:59,260 --> 00:09:06,340
get some up

190
00:08:59,980 --> 00:09:08,730
it's back again<font color="#E5E5E5"> so sim DS is available</font>

191
00:09:06,340 --> 00:09:10,720
now inside of<font color="#E5E5E5"> rust I think I think</font><font color="#CCCCCC"> its</font>

192
00:09:08,730 --> 00:09:13,120
parts of it are<font color="#CCCCCC"> getting stable now</font>

193
00:09:10,720 --> 00:09:16,980
<font color="#CCCCCC">myself being nightly I'm not sure</font><font color="#E5E5E5"> but</font>

194
00:09:13,120 --> 00:09:16,980
<font color="#E5E5E5">there's a couple libraries that help</font>

195
00:09:17,760 --> 00:09:23,680
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of provide nice interfaces around</font>

196
00:09:20,830 --> 00:09:27,580
it and so they one<font color="#E5E5E5"> of them is something</font>

197
00:09:23,680 --> 00:09:28,750
<font color="#E5E5E5">called faster so we</font><font color="#CCCCCC"> get this nice</font><font color="#E5E5E5"> kind</font>

198
00:09:27,580 --> 00:09:30,220
<font color="#E5E5E5">of interface where we're like here's</font>

199
00:09:28,750 --> 00:09:34,480
these two buffers we're gonna make them

200
00:09:30,220 --> 00:09:37,120
iterable<font color="#E5E5E5"> over the the vectors zip them</font>

201
00:09:34,480 --> 00:09:39,490
perform this operation<font color="#E5E5E5"> and then put it</font>

202
00:09:37,120 --> 00:09:41,050
<font color="#E5E5E5">in that thing</font><font color="#CCCCCC"> we can chain all kinds of</font>

203
00:09:39,490 --> 00:09:42,850
things there so if we wanted to<font color="#E5E5E5"> then go</font>

204
00:09:41,050 --> 00:09:44,709
do some subtraction and there are

205
00:09:42,850 --> 00:09:48,100
absolute values<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> to go build</font>

206
00:09:44,710 --> 00:09:52,120
<font color="#E5E5E5">that it's all nicely handled inside</font><font color="#CCCCCC"> of</font>

207
00:09:48,100 --> 00:09:54,940
there so<font color="#CCCCCC"> that's all we had to do to make</font>

208
00:09:52,120 --> 00:09:57,100
<font color="#CCCCCC">it</font><font color="#E5E5E5"> a little faster my computer</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> doing</font>

209
00:09:54,940 --> 00:09:58,500
all kinds<font color="#CCCCCC"> of</font><font color="#E5E5E5"> other things but did some</font>

210
00:09:57,100 --> 00:10:00,850
benchmarking<font color="#E5E5E5"> it's a little bit faster</font>

211
00:09:58,500 --> 00:10:05,160
<font color="#E5E5E5">the compilers already doing a pretty</font>

212
00:10:00,850 --> 00:10:05,160
good job<font color="#E5E5E5"> with multiplying numbers like</font>

213
00:10:05,190 --> 00:10:13,930
<font color="#E5E5E5">so what</font><font color="#CCCCCC"> actually back here</font><font color="#E5E5E5"> so this is a</font>

214
00:10:11,070 --> 00:10:18,850
I do have a branch up if anybody wanted

215
00:10:13,930 --> 00:10:22,359
to play<font color="#E5E5E5"> with this it's there</font><font color="#CCCCCC"> I don't</font>

216
00:10:18,850 --> 00:10:23,770
<font color="#CCCCCC">know where we'll go with that but so</font>

217
00:10:22,360 --> 00:10:26,230
what does this<font color="#CCCCCC"> have to do with an FPGA</font>

218
00:10:23,770 --> 00:10:31,900
so what kind of<font color="#E5E5E5"> took me down this path</font>

219
00:10:26,230 --> 00:10:35,740
was<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> been trying</font><font color="#E5E5E5"> to build a BDC</font>

220
00:10:31,900 --> 00:10:38,079
<font color="#E5E5E5">encoder for satellite communications</font><font color="#CCCCCC"> and</font>

221
00:10:35,740 --> 00:10:40,210
I built a reference kind of

222
00:10:38,080 --> 00:10:43,930
implementation<font color="#CCCCCC"> in rust it was a lot</font>

223
00:10:40,210 --> 00:10:46,120
easier<font color="#CCCCCC"> for me to do it there but it's</font>

224
00:10:43,930 --> 00:10:49,239
it's<font color="#E5E5E5"> not fast enough</font><font color="#CCCCCC"> it's not even close</font>

225
00:10:46,120 --> 00:10:50,730
to<font color="#CCCCCC"> being fast enough so we need to</font>

226
00:10:49,240 --> 00:10:52,870
extend that<font color="#CCCCCC"> out to</font><font color="#E5E5E5"> the FPGA</font>

227
00:10:50,730 --> 00:10:55,000
so I wanted<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit about</font>

228
00:10:52,870 --> 00:10:56,890
what<font color="#CCCCCC"> that process is like what</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> some</font>

229
00:10:55,000 --> 00:11:00,370
of the building<font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

230
00:10:56,890 --> 00:11:02,110
complete so I'm just<font color="#E5E5E5"> going to help kind</font>

231
00:11:00,370 --> 00:11:07,210
<font color="#E5E5E5">of walk people through maybe some of the</font>

232
00:11:02,110 --> 00:11:10,810
components<font color="#CCCCCC"> so in case you don't know it</font>

233
00:11:07,210 --> 00:11:12,490
it<font color="#E5E5E5"> LDPC encoder is the idea is that</font><font color="#CCCCCC"> you</font>

234
00:11:10,810 --> 00:11:13,689
have<font color="#CCCCCC"> these kind of they call information</font>

235
00:11:12,490 --> 00:11:16,920
nodes

236
00:11:13,690 --> 00:11:20,020
and then you should<font color="#E5E5E5"> be able to take</font><font color="#CCCCCC"> xor</font>

237
00:11:16,920 --> 00:11:22,030
operations across these connections<font color="#E5E5E5"> and</font>

238
00:11:20,020 --> 00:11:25,329
it should all be satisfied if<font color="#CCCCCC"> the data</font>

239
00:11:22,030 --> 00:11:28,900
that's there is correct

240
00:11:25,330 --> 00:11:32,680
that's simple location<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> don't a</font>

241
00:11:28,900 --> 00:11:36,189
<font color="#E5E5E5">lot of time we can represent that within</font>

242
00:11:32,680 --> 00:11:39,370
<font color="#CCCCCC">a matrix that represents the connections</font>

243
00:11:36,190 --> 00:11:43,900
between the nodes<font color="#E5E5E5"> what's interesting</font>

244
00:11:39,370 --> 00:11:48,250
about the<font color="#CCCCCC"> ones</font><font color="#E5E5E5"> specifically used with</font>

245
00:11:43,900 --> 00:11:50,410
<font color="#E5E5E5">dvbe</font><font color="#CCCCCC"> s2 is you get these</font><font color="#E5E5E5"> little identity</font>

246
00:11:48,250 --> 00:11:53,820
<font color="#E5E5E5">matrices that are like shifted a little</font>

247
00:11:50,410 --> 00:11:56,650
bit<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are scattered throughout this</font>

248
00:11:53,820 --> 00:11:58,420
all that black area<font color="#CCCCCC"> is actually stuff we</font>

249
00:11:56,650 --> 00:12:03,579
<font color="#E5E5E5">don't care about which is partly what</font>

250
00:11:58,420 --> 00:12:06,099
<font color="#E5E5E5">makes this a lot simpler to do</font><font color="#CCCCCC"> each one</font>

251
00:12:03,580 --> 00:12:08,020
<font color="#E5E5E5">of those white</font><font color="#CCCCCC"> dots</font><font color="#E5E5E5"> this did not come</font><font color="#CCCCCC"> up</font>

252
00:12:06,100 --> 00:12:09,550
<font color="#E5E5E5">very well on the screen</font><font color="#CCCCCC"> is one of those</font>

253
00:12:08,020 --> 00:12:11,290
identity matrix<font color="#E5E5E5"> so this is like the</font>

254
00:12:09,550 --> 00:12:13,060
check nodes versus the information nodes

255
00:12:11,290 --> 00:12:17,560
and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can kind of see they're just</font>

256
00:12:13,060 --> 00:12:19,630
shifted identity matrices so it's cool

257
00:12:17,560 --> 00:12:21,640
about that<font color="#CCCCCC"> is that we can</font><font color="#E5E5E5"> then build</font>

258
00:12:19,630 --> 00:12:23,439
something that<font color="#E5E5E5"> is very parallel</font><font color="#CCCCCC"> because</font>

259
00:12:21,640 --> 00:12:27,760
<font color="#CCCCCC">we can do all of those</font><font color="#E5E5E5"> each one of those</font>

260
00:12:23,440 --> 00:12:29,350
dots<font color="#E5E5E5"> we can basically do in parallel</font><font color="#CCCCCC"> so</font>

261
00:12:27,760 --> 00:12:31,090
<font color="#E5E5E5">we're no longer</font><font color="#CCCCCC"> just trying to use</font>

262
00:12:29,350 --> 00:12:33,100
vector<font color="#E5E5E5"> operations where</font><font color="#CCCCCC"> we have a little</font>

263
00:12:31,090 --> 00:12:37,060
<font color="#E5E5E5">bit of data that we can do it once we</font>

264
00:12:33,100 --> 00:12:40,150
can now do on the order of<font color="#E5E5E5"> like 390</font><font color="#CCCCCC"> of</font>

265
00:12:37,060 --> 00:12:43,689
<font color="#CCCCCC">these components of</font><font color="#E5E5E5"> this operation at</font>

266
00:12:40,150 --> 00:12:47,050
the same time which starts to get us to

267
00:12:43,690 --> 00:12:52,360
the data rates that<font color="#CCCCCC"> we're looking for</font><font color="#E5E5E5"> so</font>

268
00:12:47,050 --> 00:12:54,729
how do<font color="#E5E5E5"> we start building this so</font><font color="#CCCCCC"> a bunch</font>

269
00:12:52,360 --> 00:12:57,670
of<font color="#E5E5E5"> so like even</font><font color="#CCCCCC"> I think in those</font><font color="#E5E5E5"> pluto's</font>

270
00:12:54,730 --> 00:12:59,580
<font color="#E5E5E5">I think they have the zinc they have the</font>

271
00:12:57,670 --> 00:13:02,410
zinc in there as well

272
00:12:59,580 --> 00:13:04,690
there's a few others so what's

273
00:13:02,410 --> 00:13:07,990
interesting about the zinc processor and

274
00:13:04,690 --> 00:13:11,020
some<font color="#CCCCCC"> of our one step this as well is it</font>

275
00:13:07,990 --> 00:13:13,300
<font color="#CCCCCC">they put an actual processor on the chip</font>

276
00:13:11,020 --> 00:13:18,220
<font color="#E5E5E5">and then they've tied in this block of</font>

277
00:13:13,300 --> 00:13:23,469
programmable logic which<font color="#CCCCCC"> is connected</font>

278
00:13:18,220 --> 00:13:25,300
through<font color="#CCCCCC"> there</font><font color="#E5E5E5"> to the RAM which is really</font>

279
00:13:23,470 --> 00:13:27,130
nice<font color="#E5E5E5"> because</font><font color="#CCCCCC"> all of a sudden now we can</font>

280
00:13:25,300 --> 00:13:29,290
have a peripheral<font color="#E5E5E5"> that we build</font>

281
00:13:27,130 --> 00:13:33,850
they just<font color="#CCCCCC"> magically shifts data in and</font>

282
00:13:29,290 --> 00:13:37,630
out of your<font color="#CCCCCC"> memory space and it's very</font>

283
00:13:33,850 --> 00:13:40,980
<font color="#CCCCCC">fast so we have an application</font><font color="#E5E5E5"> running</font>

284
00:13:37,630 --> 00:13:44,560
on the ARM processor it's performing

285
00:13:40,980 --> 00:13:47,770
these DMA transfers of your data frame

286
00:13:44,560 --> 00:13:49,449
into your peripheral and then it says

287
00:13:47,770 --> 00:13:51,660
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right I</font><font color="#E5E5E5"> would like to wait for my</font>

288
00:13:49,450 --> 00:13:54,310
data<font color="#E5E5E5"> to come out of my peripheral and</font>

289
00:13:51,660 --> 00:13:56,230
then you have a block that's sitting

290
00:13:54,310 --> 00:13:57,760
there<font color="#E5E5E5"> that's taking those memory</font>

291
00:13:56,230 --> 00:13:59,950
transfers and putting them into a stream

292
00:13:57,760 --> 00:14:02,410
<font color="#E5E5E5">and now it's not an interface</font><font color="#CCCCCC"> that's</font>

293
00:13:59,950 --> 00:14:04,660
really easy to<font color="#CCCCCC"> build maybe</font><font color="#E5E5E5"> I shouldn't</font>

294
00:14:02,410 --> 00:14:06,810
say<font color="#E5E5E5"> really easy</font><font color="#CCCCCC"> a much easier interface</font>

295
00:14:04,660 --> 00:14:11,890
<font color="#E5E5E5">to then be able to actually build your</font>

296
00:14:06,810 --> 00:14:14,010
<font color="#E5E5E5">Vera log or VHDL model of the actual</font>

297
00:14:11,890 --> 00:14:16,060
signal<font color="#E5E5E5"> processing that</font><font color="#CCCCCC"> you want to do</font>

298
00:14:14,010 --> 00:14:17,710
<font color="#CCCCCC">turns out that what goes</font><font color="#E5E5E5"> on here is</font>

299
00:14:16,060 --> 00:14:19,839
<font color="#E5E5E5">actually really</font><font color="#CCCCCC"> complicated and I</font><font color="#E5E5E5"> think</font>

300
00:14:17,710 --> 00:14:22,560
is harder than the Vera<font color="#E5E5E5"> log piece and</font>

301
00:14:19,840 --> 00:14:24,520
there's no<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to be that way</font>

302
00:14:22,560 --> 00:14:28,359
<font color="#E5E5E5">so this is</font><font color="#CCCCCC"> kind of what I'm talking a</font>

303
00:14:24,520 --> 00:14:29,439
<font color="#CCCCCC">little bit here's your processor don't</font>

304
00:14:28,360 --> 00:14:33,270
worry too much about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> stuff right</font>

305
00:14:29,440 --> 00:14:36,100
now<font color="#E5E5E5"> or that but over here</font><font color="#CCCCCC"> we have this</font>

306
00:14:33,270 --> 00:14:38,860
<font color="#CCCCCC">DMA controller that's the thing that's</font>

307
00:14:36,100 --> 00:14:43,480
<font color="#E5E5E5">in charge of converting those memory</font>

308
00:14:38,860 --> 00:14:46,390
accesses<font color="#CCCCCC"> to data that's</font><font color="#E5E5E5"> on the bus which</font>

309
00:14:43,480 --> 00:14:48,280
comes in here and out here<font color="#CCCCCC"> this is my</font>

310
00:14:46,390 --> 00:14:50,319
peripheral in this example this is<font color="#CCCCCC"> just</font>

311
00:14:48,280 --> 00:14:52,569
<font color="#CCCCCC">a</font><font color="#E5E5E5"> block of RAM that</font><font color="#CCCCCC"> I'm able</font><font color="#E5E5E5"> to shift</font>

312
00:14:50,320 --> 00:14:54,070
data in and out of but that's really

313
00:14:52,570 --> 00:15:02,860
<font color="#E5E5E5">whatever your peripheral ends up being</font>

314
00:14:54,070 --> 00:15:05,800
<font color="#CCCCCC">that block so where this starts</font><font color="#E5E5E5"> to get a</font>

315
00:15:02,860 --> 00:15:09,100
little<font color="#CCCCCC"> bit complicated is you're like</font>

316
00:15:05,800 --> 00:15:11,199
<font color="#CCCCCC">alright I have</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> the kernel does not</font>

317
00:15:09,100 --> 00:15:13,930
want you<font color="#E5E5E5"> to mess around in physical</font>

318
00:15:11,200 --> 00:15:20,140
address space<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> like we work really</font>

319
00:15:13,930 --> 00:15:21,609
hard<font color="#E5E5E5"> to</font><font color="#CCCCCC"> not let people do</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> tune</font>

320
00:15:20,140 --> 00:15:23,680
as we start trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> work around and</font>

321
00:15:21,610 --> 00:15:24,820
like<font color="#E5E5E5"> we really want to in this case like</font>

322
00:15:23,680 --> 00:15:27,400
we don't<font color="#E5E5E5"> want to have to write a kernel</font>

323
00:15:24,820 --> 00:15:31,540
driver for<font color="#E5E5E5"> every little operation we're</font>

324
00:15:27,400 --> 00:15:33,579
doing there are ways though that we<font color="#E5E5E5"> can</font>

325
00:15:31,540 --> 00:15:35,740
get around them<font color="#CCCCCC"> and a lot of this</font>

326
00:15:33,580 --> 00:15:38,200
<font color="#E5E5E5">actually comes out of the world of</font>

327
00:15:35,740 --> 00:15:40,360
virtualization<font color="#E5E5E5"> where you want to have</font>

328
00:15:38,200 --> 00:15:41,110
<font color="#E5E5E5">your PCI card be able to connect to your</font>

329
00:15:40,360 --> 00:15:44,440
virtual<font color="#E5E5E5"> machine</font>

330
00:15:41,110 --> 00:15:46,900
on your<font color="#E5E5E5"> computer and actually operate</font>

331
00:15:44,440 --> 00:15:49,480
quickly so we<font color="#CCCCCC"> can leverage some of</font><font color="#E5E5E5"> that</font>

332
00:15:46,900 --> 00:15:54,189
<font color="#E5E5E5">so there's the virtual function</font><font color="#CCCCCC"> IO</font>

333
00:15:49,480 --> 00:15:57,190
interface<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> really helpful to</font><font color="#CCCCCC"> be</font>

334
00:15:54,190 --> 00:16:00,160
able<font color="#E5E5E5"> to do this some kernel</font>

335
00:15:57,190 --> 00:16:02,290
documentation on there<font color="#CCCCCC"> but we're able</font><font color="#E5E5E5"> to</font>

336
00:16:00,160 --> 00:16:04,420
use this<font color="#CCCCCC"> to just to</font><font color="#E5E5E5"> generate these large</font>

337
00:16:02,290 --> 00:16:06,010
blocks<font color="#E5E5E5"> of memory and attach them</font><font color="#CCCCCC"> to the</font>

338
00:16:04,420 --> 00:16:09,010
address<font color="#E5E5E5"> space the DMA</font><font color="#CCCCCC"> controllers</font>

339
00:16:06,010 --> 00:16:11,170
looking at<font color="#CCCCCC"> I don't want to get into</font><font color="#E5E5E5"> too</font>

340
00:16:09,010 --> 00:16:12,550
much<font color="#E5E5E5"> like I hope that this is here is a</font>

341
00:16:11,170 --> 00:16:14,530
way if<font color="#E5E5E5"> somebody starts going down this</font>

342
00:16:12,550 --> 00:16:17,920
path<font color="#E5E5E5"> that they can kind of</font><font color="#CCCCCC"> queue into</font>

343
00:16:14,530 --> 00:16:19,180
this but using these<font color="#CCCCCC"> IO controls</font><font color="#E5E5E5"> and a</font>

344
00:16:17,920 --> 00:16:20,699
memory map we're able to<font color="#E5E5E5"> create those</font>

345
00:16:19,180 --> 00:16:23,790
<font color="#CCCCCC">spaces</font>

346
00:16:20,700 --> 00:16:26,290
<font color="#E5E5E5">we're also need to be</font><font color="#CCCCCC"> able to access</font>

347
00:16:23,790 --> 00:16:28,689
<font color="#E5E5E5">registers inside of those devices to</font><font color="#CCCCCC"> be</font>

348
00:16:26,290 --> 00:16:30,400
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to control them as well</font><font color="#E5E5E5"> so there's</font>

349
00:16:28,690 --> 00:16:35,680
also interfaces for being able to do

350
00:16:30,400 --> 00:16:38,740
that and then once so we're here this

351
00:16:35,680 --> 00:16:40,060
was a this<font color="#E5E5E5"> was our way to get those</font>

352
00:16:38,740 --> 00:16:41,350
<font color="#E5E5E5">register that register space</font>

353
00:16:40,060 --> 00:16:43,270
now you have your<font color="#E5E5E5"> datasheet</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font>

354
00:16:41,350 --> 00:16:47,410
part<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> access all</font><font color="#CCCCCC"> of</font>

355
00:16:43,270 --> 00:16:50,140
<font color="#E5E5E5">us so here's everything gets involved in</font>

356
00:16:47,410 --> 00:16:53,439
actually starting a transfer it's not

357
00:16:50,140 --> 00:16:56,949
wrapped nicely but hopefully that brings

358
00:16:53,440 --> 00:16:58,390
across<font color="#E5E5E5"> some of the point but then we</font>

359
00:16:56,950 --> 00:17:00,070
also<font color="#E5E5E5"> want to know like when our</font>

360
00:16:58,390 --> 00:17:01,390
<font color="#E5E5E5">transfers are done normally</font><font color="#CCCCCC"> you have</font>

361
00:17:00,070 --> 00:17:04,270
this<font color="#CCCCCC"> interrupt that's sitting there in</font>

362
00:17:01,390 --> 00:17:05,920
the kernel and<font color="#E5E5E5"> like what do we do</font><font color="#CCCCCC"> well</font>

363
00:17:04,270 --> 00:17:09,879
we could do this we could<font color="#E5E5E5"> just sit there</font>

364
00:17:05,920 --> 00:17:13,300
<font color="#E5E5E5">and spin on the status register probably</font>

365
00:17:09,880 --> 00:17:15,940
<font color="#E5E5E5">don't want</font><font color="#CCCCCC"> to do that or where you can</font>

366
00:17:13,300 --> 00:17:17,980
use<font color="#CCCCCC"> something called these event file</font>

367
00:17:15,940 --> 00:17:22,900
descriptors which are very poorly

368
00:17:17,980 --> 00:17:27,010
documented<font color="#E5E5E5"> to get this to work</font><font color="#CCCCCC"> it was</font>

369
00:17:22,900 --> 00:17:27,790
<font color="#E5E5E5">really digging into</font><font color="#CCCCCC"> QEMU KVM and a</font>

370
00:17:27,010 --> 00:17:30,490
little bit of the kernel documentation

371
00:17:27,790 --> 00:17:31,120
to try to figure out what is supposed to

372
00:17:30,490 --> 00:17:32,680
come together

373
00:17:31,120 --> 00:17:34,300
<font color="#E5E5E5">I would really wish this was put</font>

374
00:17:32,680 --> 00:17:37,210
together better<font color="#E5E5E5"> but</font><font color="#CCCCCC"> basically you have</font>

375
00:17:34,300 --> 00:17:39,460
<font color="#CCCCCC">to create</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> own file descriptor</font><font color="#E5E5E5"> and</font>

376
00:17:37,210 --> 00:17:41,680
attach it to<font color="#CCCCCC"> the interrupt system going</font>

377
00:17:39,460 --> 00:17:44,980
below which then lets you use what<font color="#CCCCCC"> you</font>

378
00:17:41,680 --> 00:17:46,930
would expect<font color="#CCCCCC"> to do so select</font><font color="#E5E5E5"> pull all of</font>

379
00:17:44,980 --> 00:17:48,520
<font color="#E5E5E5">that so now we</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> everything</font><font color="#CCCCCC"> we</font>

380
00:17:46,930 --> 00:17:50,290
<font color="#CCCCCC">need we have a memory allocation we have</font>

381
00:17:48,520 --> 00:17:54,340
control<font color="#E5E5E5"> and we have the interrupt side</font>

382
00:17:50,290 --> 00:17:54,759
of it<font color="#CCCCCC"> and that's that's</font><font color="#E5E5E5"> like the core</font>

383
00:17:54,340 --> 00:17:55,779
<font color="#E5E5E5">pieces</font>

384
00:17:54,759 --> 00:17:58,059
that you need to be able<font color="#E5E5E5"> to actually</font>

385
00:17:55,779 --> 00:18:00,820
<font color="#E5E5E5">talk to this piece</font><font color="#CCCCCC"> of fabric that</font><font color="#E5E5E5"> you</font>

386
00:17:58,059 --> 00:18:03,999
built that's sitting inside the<font color="#E5E5E5"> FPGA</font><font color="#CCCCCC"> you</font>

387
00:18:00,820 --> 00:18:06,039
can also use the<font color="#CCCCCC"> lib see rust bindings</font>

388
00:18:03,999 --> 00:18:09,070
<font color="#E5E5E5">to connect to this</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> even have</font><font color="#CCCCCC"> some</font>

389
00:18:06,039 --> 00:18:10,389
really nice<font color="#CCCCCC"> stuff to help</font><font color="#E5E5E5"> make parts of</font>

390
00:18:09,070 --> 00:18:13,029
that<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> more safe there</font><font color="#E5E5E5"> was just a</font>

391
00:18:10,389 --> 00:18:16,448
lot of<font color="#E5E5E5"> unsafe things that we're going to</font>

392
00:18:13,029 --> 00:18:19,199
slides<font color="#CCCCCC"> so I've been</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to figure out</font>

393
00:18:16,449 --> 00:18:21,989
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make that stuff a little safer</font>

394
00:18:19,199 --> 00:18:25,739
<font color="#CCCCCC">and hopefully build</font><font color="#E5E5E5"> the rest of that out</font>

395
00:18:21,989 --> 00:18:28,239
so there's a lot of<font color="#CCCCCC"> information but I</font>

396
00:18:25,739 --> 00:18:46,119
hope that<font color="#CCCCCC"> kind of mapped some things out</font>

397
00:18:28,239 --> 00:18:48,309
for for<font color="#E5E5E5"> people know so I'm hoping to</font>

398
00:18:46,119 --> 00:18:54,609
have<font color="#CCCCCC"> a bunch of this</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> yes</font>

399
00:18:48,309 --> 00:19:04,949
it's yeah<font color="#E5E5E5"> it sounds like you're aware of</font>

400
00:18:54,609 --> 00:19:07,829
<font color="#E5E5E5">how bad the document yeah</font><font color="#CCCCCC"> so I also have</font>

401
00:19:04,949 --> 00:19:10,839
so<font color="#E5E5E5"> I did all this development</font><font color="#CCCCCC"> on the</font>

402
00:19:07,829 --> 00:19:13,299
ultra 96 board that<font color="#CCCCCC"> Avnet had which</font><font color="#E5E5E5"> is</font>

403
00:19:10,839 --> 00:19:16,448
also terribly<font color="#E5E5E5"> like maintained and</font>

404
00:19:13,299 --> 00:19:21,129
documented<font color="#E5E5E5"> I it it's unfortunate</font><font color="#CCCCCC"> I do</font>

405
00:19:16,449 --> 00:19:23,669
have on<font color="#CCCCCC"> gitlab a managed project with</font><font color="#E5E5E5"> a</font>

406
00:19:21,129 --> 00:19:25,928
build pipeline everything to build this

407
00:19:23,669 --> 00:19:30,129
not the user space side of it but it

408
00:19:25,929 --> 00:19:31,809
<font color="#E5E5E5">builds the whole DMA</font><font color="#CCCCCC"> at the whole</font>

409
00:19:30,129 --> 00:19:36,988
<font color="#CCCCCC">project gets built and</font><font color="#E5E5E5"> it doesn't pull</font>

410
00:19:31,809 --> 00:19:41,309
in<font color="#E5E5E5"> there had a Linux tool disaster thing</font>

411
00:19:36,989 --> 00:19:41,309
<font color="#E5E5E5">so yeah</font>

412
00:19:46,300 --> 00:19:52,399
yeah<font color="#E5E5E5"> so this is this is</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> okay</font>

413
00:19:51,440 --> 00:19:54,350
sorry

414
00:19:52,400 --> 00:19:55,910
so you know I mentioned<font color="#E5E5E5"> that there's a</font>

415
00:19:54,350 --> 00:19:58,070
<font color="#CCCCCC">cat there's part of</font><font color="#E5E5E5"> this whole memory</font>

416
00:19:55,910 --> 00:19:59,030
transfer bit where we're skipping the

417
00:19:58,070 --> 00:20:07,879
<font color="#E5E5E5">kernel where you have to worry about</font>

418
00:19:59,030 --> 00:20:09,320
<font color="#E5E5E5">cash</font><font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> let's go</font><font color="#CCCCCC"> back to this</font>

419
00:20:07,880 --> 00:20:13,700
block diagram<font color="#CCCCCC"> the stuff I told</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font>

420
00:20:09,320 --> 00:20:15,350
not pay<font color="#E5E5E5"> attention to</font><font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> actually</font>

421
00:20:13,700 --> 00:20:17,990
<font color="#E5E5E5">able to tell the hardware a little bit</font>

422
00:20:15,350 --> 00:20:22,879
about what we want it to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> to not</font><font color="#CCCCCC"> cache</font>

423
00:20:17,990 --> 00:20:24,890
<font color="#E5E5E5">certain types of</font><font color="#CCCCCC"> operations but</font><font color="#E5E5E5"> then we</font>

424
00:20:22,880 --> 00:20:27,470
also that's really controlling inside of

425
00:20:24,890 --> 00:20:30,970
here the memory management unit<font color="#E5E5E5"> the</font><font color="#CCCCCC"> smmu</font>

426
00:20:27,470 --> 00:20:30,970
<font color="#CCCCCC">which</font><font color="#E5E5E5"> is what they use inside of arm</font>

427
00:20:31,090 --> 00:20:37,040
yeah it's able<font color="#E5E5E5"> to do that internally so</font>

428
00:20:34,730 --> 00:20:38,540
you're you're leveraging<font color="#CCCCCC"> two</font><font color="#E5E5E5"> smmu to do</font>

429
00:20:37,040 --> 00:20:43,428
that there's really nothing that<font color="#E5E5E5"> I had</font>

430
00:20:38,540 --> 00:21:03,830
to do except<font color="#CCCCCC"> for set these bits to tell</font>

431
00:20:43,429 --> 00:21:07,100
the<font color="#CCCCCC"> SMU to do that yeah so this piece of</font>

432
00:21:03,830 --> 00:21:09,050
it there's<font color="#E5E5E5"> actually on</font><font color="#CCCCCC"> Xilinx is</font><font color="#E5E5E5"> wiki</font>

433
00:21:07,100 --> 00:21:13,580
<font color="#CCCCCC">there's a whole section</font><font color="#E5E5E5"> that talks about</font>

434
00:21:09,050 --> 00:21:14,899
<font color="#CCCCCC">the specific</font><font color="#E5E5E5"> problem and they don't</font>

435
00:21:13,580 --> 00:21:16,610
<font color="#CCCCCC">actually tell you what</font><font color="#E5E5E5"> the values are</font>

436
00:21:14,900 --> 00:21:18,590
these but they have screenshots of

437
00:21:16,610 --> 00:21:21,040
Windows<font color="#E5E5E5"> that have them if you find the</font>

438
00:21:18,590 --> 00:21:21,040
right piece

439
00:21:21,150 --> 00:21:26,450
[Laughter]

440
00:21:34,580 --> 00:21:39,629
yes you're asking what the performance

441
00:21:36,870 --> 00:21:44,668
<font color="#E5E5E5">issue is so I think there was a</font><font color="#CCCCCC"> note I</font>

442
00:21:39,630 --> 00:21:49,470
made<font color="#CCCCCC"> in here</font><font color="#E5E5E5"> what we're targeting the</font>

443
00:21:44,669 --> 00:21:54,809
<font color="#CCCCCC">top we're trying</font><font color="#E5E5E5"> to get bit rates</font>

444
00:21:49,470 --> 00:21:56,429
upwards<font color="#E5E5E5"> of 85 megabits per second</font><font color="#CCCCCC"> and</font>

445
00:21:54,809 --> 00:21:59,549
the operations that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> through</font>

446
00:21:56,429 --> 00:22:02,040
<font color="#E5E5E5">here there's each one these check nodes</font>

447
00:21:59,549 --> 00:22:04,110
<font color="#E5E5E5">has I</font><font color="#CCCCCC"> think three to five connections to</font>

448
00:22:02,040 --> 00:22:07,590
it so there's a lot of operations that

449
00:22:04,110 --> 00:22:11,299
are taking place<font color="#E5E5E5"> so there's a couple</font>

450
00:22:07,590 --> 00:22:14,370
<font color="#E5E5E5">people that have implemented this in C</font>

451
00:22:11,299 --> 00:22:15,030
<font color="#E5E5E5">and it's not even close</font><font color="#CCCCCC"> to being able to</font>

452
00:22:14,370 --> 00:22:21,049
do real-time

453
00:22:15,030 --> 00:22:23,428
even on a fairly<font color="#E5E5E5"> beefy machine yeah</font><font color="#CCCCCC"> I</font>

454
00:22:21,049 --> 00:22:27,660
don't have specific numbers<font color="#E5E5E5"> I'm sorry</font>

455
00:22:23,429 --> 00:22:30,299
<font color="#E5E5E5">but we're able to do this</font><font color="#CCCCCC"> clocking out</font>

456
00:22:27,660 --> 00:22:36,290
like a hundred megahertz<font color="#E5E5E5"> and hit real</font>

457
00:22:30,299 --> 00:22:36,290
time versus a CPU that's pegged

458
00:22:42,700 --> 00:22:51,489
<font color="#CCCCCC">no</font><font color="#E5E5E5"> apparently there are some accelerator</font>

459
00:22:48,549 --> 00:22:53,609
patches<font color="#E5E5E5"> in the Linux kernel</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> just</font>

460
00:22:51,489 --> 00:23:03,850
went in I<font color="#E5E5E5"> don't know anything</font><font color="#CCCCCC"> about them</font>

461
00:22:53,609 --> 00:23:05,499
<font color="#CCCCCC">okay yeah so the</font><font color="#E5E5E5"> rust piece of this so</font>

462
00:23:03,850 --> 00:23:09,309
the<font color="#E5E5E5"> way I kind of went about this is I</font>

463
00:23:05,499 --> 00:23:11,919
started taking chunks of the rust code

464
00:23:09,309 --> 00:23:12,759
<font color="#E5E5E5">out and moving them in the FPGA there's</font>

465
00:23:11,919 --> 00:23:17,710
nothing left

466
00:23:12,759 --> 00:23:18,820
really<font color="#E5E5E5"> now but it was just helpful to</font>

467
00:23:17,710 --> 00:23:28,029
<font color="#E5E5E5">kind of be able to do that piece by</font>

468
00:23:18,820 --> 00:23:30,249
piece<font color="#CCCCCC"> that requires like a license thing</font>

469
00:23:28,029 --> 00:23:33,539
that goes<font color="#CCCCCC"> away if my computer disappears</font>

470
00:23:30,249 --> 00:23:39,070
<font color="#E5E5E5">it was I didn't I didn't go down</font><font color="#CCCCCC"> that</font>

471
00:23:33,539 --> 00:23:41,039
generated things<font color="#CCCCCC"> side</font><font color="#E5E5E5"> of it</font><font color="#CCCCCC"> so I can't</font>

472
00:23:39,070 --> 00:23:45,309
really speak<font color="#E5E5E5"> to how those tools are</font>

473
00:23:41,039 --> 00:23:47,019
working<font color="#E5E5E5"> or not working</font><font color="#CCCCCC"> I got more</font>

474
00:23:45,309 --> 00:23:49,600
frustrated with<font color="#CCCCCC"> silenced</font><font color="#E5E5E5"> tools the more</font>

475
00:23:47,019 --> 00:23:59,919
I use them so when they say oh we have<font color="#CCCCCC"> a</font>

476
00:23:49,600 --> 00:24:01,959
new<font color="#CCCCCC"> tool and that's not what I want yeah</font>

477
00:23:59,919 --> 00:24:03,700
so there are<font color="#E5E5E5"> a</font><font color="#CCCCCC"> couple people that</font><font color="#E5E5E5"> have</font>

478
00:24:01,960 --> 00:24:07,859
you<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the question</font><font color="#E5E5E5"> is has this been</font>

479
00:24:03,700 --> 00:24:11,200
implemented using graphics cards<font color="#CCCCCC"> you can</font>

480
00:24:07,859 --> 00:24:13,210
it is still very<font color="#E5E5E5"> difficult to hit the</font>

481
00:24:11,200 --> 00:24:14,649
performance<font color="#E5E5E5"> numbers with that because</font>

482
00:24:13,210 --> 00:24:16,989
the<font color="#E5E5E5"> amount of data that you're</font>

483
00:24:14,649 --> 00:24:19,719
transferring<font color="#E5E5E5"> in and out of</font><font color="#CCCCCC"> memory is not</font>

484
00:24:16,989 --> 00:24:22,239
very much and the<font color="#E5E5E5"> actual operations</font>

485
00:24:19,720 --> 00:24:23,470
isn't very like so you end up<font color="#CCCCCC"> in a</font>

486
00:24:22,239 --> 00:24:28,830
situation<font color="#E5E5E5"> where you're paying this</font>

487
00:24:23,470 --> 00:24:39,269
massive latency penalty with the GPU and

488
00:24:28,830 --> 00:24:39,269
it's a expensive GPU it's yeah

489
00:24:40,919 --> 00:24:47,850
I would have<font color="#E5E5E5"> I saw I haven't completed</font>

490
00:24:43,409 --> 00:24:53,879
<font color="#E5E5E5">all of it but most of the space is</font><font color="#CCCCCC"> taken</font>

491
00:24:47,850 --> 00:24:55,350
up in<font color="#E5E5E5"> with RAM</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> don't know it's a</font>

492
00:24:53,879 --> 00:24:59,090
few<font color="#CCCCCC"> k-frame</font>

493
00:24:55,350 --> 00:24:59,090
there's a lot of<font color="#CCCCCC"> data to</font><font color="#E5E5E5"> store</font>

494
00:25:00,150 --> 00:25:07,990
[Applause]

