1
00:00:04,610 --> 00:00:12,889
<font color="#E5E5E5">all right so my name</font><font color="#CCCCCC"> is Han Lee I'm from</font>

2
00:00:09,440 --> 00:00:15,049
Intel and<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to talk about Intel</font>

3
00:00:12,889 --> 00:00:18,049
around 26 in in the neck or<font color="#E5E5E5"> in</font>

4
00:00:15,049 --> 00:00:20,000
particular<font color="#E5E5E5"> but also cover the idea or</font>

5
00:00:18,050 --> 00:00:23,890
the<font color="#CCCCCC"> concept</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> higher 1960 in the neck</font>

6
00:00:20,000 --> 00:00:27,500
<font color="#CCCCCC">or</font><font color="#E5E5E5"> in general so I I wrote the original</font>

7
00:00:23,890 --> 00:00:29,720
<font color="#E5E5E5">proposal for Intel</font><font color="#CCCCCC"> Howard intrinsics</font><font color="#E5E5E5"> for</font>

8
00:00:27,500 --> 00:00:32,238
<font color="#E5E5E5">the neck or which has been enhanced</font>

9
00:00:29,720 --> 00:00:35,510
<font color="#E5E5E5">quite a bit by Microsoft and the</font>

10
00:00:32,238 --> 00:00:37,729
<font color="#CCCCCC">open-source community but what I wanted</font>

11
00:00:35,510 --> 00:00:40,430
<font color="#E5E5E5">to do today is</font><font color="#CCCCCC"> basically show you what</font>

12
00:00:37,729 --> 00:00:44,229
it is<font color="#CCCCCC"> why you will want to</font><font color="#E5E5E5"> use it and</font>

13
00:00:40,430 --> 00:00:44,229
how you<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> it right</font>

14
00:00:46,900 --> 00:00:51,920
<font color="#CCCCCC">alright so let me start with</font><font color="#E5E5E5"> this</font>

15
00:00:48,920 --> 00:00:54,350
question<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> listed some some of the</font>

16
00:00:51,920 --> 00:00:56,510
computing domains and specific<font color="#CCCCCC"> examples</font>

17
00:00:54,350 --> 00:00:59,449
<font color="#E5E5E5">in those domains</font><font color="#CCCCCC"> and what do they</font><font color="#E5E5E5"> have</font>

18
00:00:56,510 --> 00:01:02,809
in<font color="#CCCCCC"> common</font><font color="#E5E5E5"> and I think you know</font><font color="#CCCCCC"> but what</font>

19
00:00:59,449 --> 00:01:06,530
<font color="#E5E5E5">Martin just described could fit in HPC</font>

20
00:01:02,809 --> 00:01:10,130
or<font color="#E5E5E5"> image processing</font><font color="#CCCCCC"> and then you know</font>

21
00:01:06,530 --> 00:01:12,380
there are text data processing<font color="#E5E5E5"> domains</font>

22
00:01:10,130 --> 00:01:14,990
<font color="#E5E5E5">machine learning domains and</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are</font>

23
00:01:12,380 --> 00:01:17,899
specific<font color="#E5E5E5"> problems in those domains that</font>

24
00:01:14,990 --> 00:01:20,270
are<font color="#E5E5E5"> common okay</font><font color="#CCCCCC"> if you had said some</font>

25
00:01:17,900 --> 00:01:22,460
<font color="#E5E5E5">anything about performance you know Pat</font>

26
00:01:20,270 --> 00:01:26,420
yourself in the back right for

27
00:01:22,460 --> 00:01:29,509
performance sensitive code<font color="#CCCCCC"> you can use</font>

28
00:01:26,420 --> 00:01:31,850
<font color="#E5E5E5">Intel hard 126 for potential performance</font>

29
00:01:29,510 --> 00:01:34,520
<font color="#CCCCCC">gain</font><font color="#E5E5E5"> and I'm gonna tell you</font><font color="#CCCCCC"> how you can</font>

30
00:01:31,850 --> 00:01:36,710
do that<font color="#CCCCCC"> so what I</font><font color="#E5E5E5"> want you to get</font><font color="#CCCCCC"> out of</font>

31
00:01:34,520 --> 00:01:41,000
<font color="#CCCCCC">this talk</font><font color="#E5E5E5"> or what you</font><font color="#CCCCCC"> should get</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font>

32
00:01:36,710 --> 00:01:44,360
<font color="#E5E5E5">this talk is</font><font color="#CCCCCC"> you know why what motivated</font>

33
00:01:41,000 --> 00:01:48,650
the design<font color="#E5E5E5"> what they are and then what</font>

34
00:01:44,360 --> 00:01:52,670
you<font color="#CCCCCC"> can do in your own code right before</font>

35
00:01:48,650 --> 00:01:55,490
we get into that<font color="#E5E5E5"> I think Martin talked</font>

36
00:01:52,670 --> 00:01:58,430
about Cindy<font color="#E5E5E5"> in one</font><font color="#CCCCCC"> of his benchmarks</font>

37
00:01:55,490 --> 00:02:00,350
<font color="#E5E5E5">just before this talk right not</font>

38
00:01:58,430 --> 00:02:02,840
everybody may be familiar<font color="#E5E5E5"> with it so</font><font color="#CCCCCC"> I</font>

39
00:02:00,350 --> 00:02:04,548
thought I'd do a very brief intro to

40
00:02:02,840 --> 00:02:06,979
Cindy which stands for<font color="#E5E5E5"> single</font>

41
00:02:04,549 --> 00:02:09,560
instruction multiple data and it's

42
00:02:06,979 --> 00:02:13,130
basically a<font color="#E5E5E5"> way of doing an operation</font>

43
00:02:09,560 --> 00:02:16,790
<font color="#E5E5E5">same operation on multiple sets of data</font>

44
00:02:13,130 --> 00:02:18,450
<font color="#E5E5E5">using one instruction right so I have an</font>

45
00:02:16,790 --> 00:02:21,230
example<font color="#CCCCCC"> here where you are</font>

46
00:02:18,450 --> 00:02:24,238
wanting to<font color="#E5E5E5"> add eight of the 32-bit</font>

47
00:02:21,230 --> 00:02:26,160
integers together<font color="#CCCCCC"> and one way</font><font color="#E5E5E5"> to do that</font>

48
00:02:24,239 --> 00:02:28,620
is<font color="#E5E5E5"> using scale operation right you say</font>

49
00:02:26,160 --> 00:02:30,840
<font color="#E5E5E5">okay I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take X</font><font color="#CCCCCC"> zero Y zero</font><font color="#E5E5E5"> and</font>

50
00:02:28,620 --> 00:02:34,440
then add it<font color="#CCCCCC"> together and then so forth</font>

51
00:02:30,840 --> 00:02:37,290
<font color="#CCCCCC">until you</font><font color="#E5E5E5"> add X</font><font color="#CCCCCC"> seven with Y 7 right</font><font color="#E5E5E5"> so</font>

52
00:02:34,440 --> 00:02:40,410
you do a scalar operations<font color="#E5E5E5"> to get to the</font>

53
00:02:37,290 --> 00:02:44,310
result that<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> another approach is</font>

54
00:02:40,410 --> 00:02:47,220
to<font color="#CCCCCC"> use similar instruction right so one</font>

55
00:02:44,310 --> 00:02:49,709
of the examples<font color="#CCCCCC"> is Intel</font><font color="#E5E5E5"> advanced vector</font>

56
00:02:47,220 --> 00:02:54,060
extensions<font color="#E5E5E5"> to also know when</font><font color="#CCCCCC"> I've SAT x2</font>

57
00:02:49,709 --> 00:02:56,489
<font color="#E5E5E5">and that operates on 256 bit vectors and</font>

58
00:02:54,060 --> 00:03:01,680
what you can do is put those<font color="#CCCCCC"> eight</font>

59
00:02:56,489 --> 00:03:04,500
<font color="#CCCCCC">32-bit integer data or data into 21:56</font>

60
00:03:01,680 --> 00:03:07,500
build a store in<font color="#E5E5E5"> Intel I thought that's</font>

61
00:03:04,500 --> 00:03:09,540
why<font color="#E5E5E5"> mmm</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> while I'm m1y</font><font color="#E5E5E5"> mmm - and</font>

62
00:03:07,500 --> 00:03:12,540
<font color="#CCCCCC">you can use one single instruction in</font>

63
00:03:09,540 --> 00:03:14,459
this case BPRD<font color="#E5E5E5"> to add those two</font>

64
00:03:12,540 --> 00:03:17,190
registers together to get the answer you

65
00:03:14,459 --> 00:03:19,950
want<font color="#CCCCCC"> eight operations versus one</font>

66
00:03:17,190 --> 00:03:23,940
<font color="#E5E5E5">operation you know obvious advantage</font>

67
00:03:19,950 --> 00:03:27,869
right there how simply<font color="#E5E5E5"> being</font><font color="#CCCCCC"> used in</font>

68
00:03:23,940 --> 00:03:30,359
c-sharp<font color="#E5E5E5"> today so c-sharp provides very</font>

69
00:03:27,870 --> 00:03:34,470
nice abstraction<font color="#CCCCCC"> for</font><font color="#E5E5E5"> Cindy</font><font color="#CCCCCC"> it's in</font>

70
00:03:30,359 --> 00:03:36,420
vector<font color="#CCCCCC"> a</font><font color="#E5E5E5"> chain system</font><font color="#CCCCCC"> numerix</font><font color="#E5E5E5"> and vector</font>

71
00:03:34,470 --> 00:03:40,200
<font color="#CCCCCC">variants I'm going to give a specific</font>

72
00:03:36,420 --> 00:03:42,420
example<font color="#E5E5E5"> using vector T right</font><font color="#CCCCCC"> and it's</font>

73
00:03:40,200 --> 00:03:44,488
<font color="#E5E5E5">very nice because it obstructs the</font>

74
00:03:42,420 --> 00:03:46,559
underlying<font color="#CCCCCC"> hardware away from you</font><font color="#E5E5E5"> right</font>

75
00:03:44,489 --> 00:03:48,900
so if you are a<font color="#E5E5E5"> developer you</font><font color="#CCCCCC"> don't have</font>

76
00:03:46,560 --> 00:03:51,120
to worry<font color="#E5E5E5"> about</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> am i running on avx2</font>

77
00:03:48,900 --> 00:03:53,160
<font color="#E5E5E5">capable</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> or am i running on</font>

78
00:03:51,120 --> 00:03:57,180
<font color="#CCCCCC">streaming's in the</font><font color="#E5E5E5"> extension to machine</font>

79
00:03:53,160 --> 00:03:59,340
which operates 128 bit vectors so if you

80
00:03:57,180 --> 00:04:01,769
have<font color="#E5E5E5"> this code here where you create two</font>

81
00:03:59,340 --> 00:04:04,380
new vectors with<font color="#E5E5E5"> eight elements and you</font>

82
00:04:01,769 --> 00:04:06,599
add them<font color="#E5E5E5"> together and you get this</font>

83
00:04:04,380 --> 00:04:08,519
resulting vector<font color="#E5E5E5"> V but you don't have to</font>

84
00:04:06,599 --> 00:04:11,399
worry about<font color="#E5E5E5"> whether that was</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> be</font>

85
00:04:08,519 --> 00:04:13,709
<font color="#E5E5E5">using one operation or using two</font>

86
00:04:11,400 --> 00:04:16,829
operations or eight operations we it's

87
00:04:13,709 --> 00:04:19,440
transparent<font color="#E5E5E5"> to you right which is very</font>

88
00:04:16,829 --> 00:04:23,130
nice<font color="#CCCCCC"> so what's the problem</font><font color="#E5E5E5"> right or is</font>

89
00:04:19,440 --> 00:04:26,490
there a problem<font color="#CCCCCC"> so a couple</font><font color="#E5E5E5"> of things</font>

90
00:04:23,130 --> 00:04:29,400
right so<font color="#CCCCCC"> vector</font><font color="#E5E5E5"> obstructs in the</font>

91
00:04:26,490 --> 00:04:31,200
operations<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> if you want to access</font>

92
00:04:29,400 --> 00:04:32,489
underlying hardware capabilities are

93
00:04:31,200 --> 00:04:35,009
honest in dear

94
00:04:32,490 --> 00:04:38,520
you're out of luck<font color="#CCCCCC"> right and I'm going</font>

95
00:04:35,009 --> 00:04:40,319
<font color="#CCCCCC">to show</font><font color="#E5E5E5"> you an example of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> but</font>

96
00:04:38,520 --> 00:04:42,270
here so and then the<font color="#E5E5E5"> other issue of</font>

97
00:04:40,319 --> 00:04:44,339
<font color="#E5E5E5">course is some of the operations that</font>

98
00:04:42,270 --> 00:04:45,899
<font color="#E5E5E5">you do on vector are inherently</font>

99
00:04:44,339 --> 00:04:48,180
difficult to do when you<font color="#CCCCCC"> abstract</font><font color="#E5E5E5"> the</font>

100
00:04:45,899 --> 00:04:50,759
underlying<font color="#CCCCCC"> Hardware away so one example</font>

101
00:04:48,180 --> 00:04:53,749
is<font color="#E5E5E5"> shuffling operations</font><font color="#CCCCCC"> from vector</font>

102
00:04:50,759 --> 00:04:56,039
<font color="#E5E5E5">right when vector T or vector T</font>

103
00:04:53,749 --> 00:04:58,139
obstructs the<font color="#E5E5E5"> size or the count</font>

104
00:04:56,039 --> 00:05:00,449
<font color="#E5E5E5">information away from you that's kind</font><font color="#CCCCCC"> of</font>

105
00:04:58,139 --> 00:05:03,599
hard to<font color="#E5E5E5"> do and then there are being</font>

106
00:05:00,449 --> 00:05:06,210
<font color="#E5E5E5">asked other issues on</font><font color="#CCCCCC"> give up</font><font color="#E5E5E5"> that</font>

107
00:05:03,599 --> 00:05:09,120
<font color="#E5E5E5">people talked about their needs</font><font color="#CCCCCC"> right</font>

108
00:05:06,210 --> 00:05:10,498
<font color="#E5E5E5">they wanted to do specific things</font><font color="#CCCCCC"> to</font>

109
00:05:09,120 --> 00:05:13,979
accelerate their application but<font color="#E5E5E5"> could</font>

110
00:05:10,499 --> 00:05:16,469
<font color="#E5E5E5">not do it in</font><font color="#CCCCCC"> c-sharp so</font><font color="#E5E5E5"> that basically</font>

111
00:05:13,979 --> 00:05:19,770
prompted us to look at<font color="#E5E5E5"> okay how can</font><font color="#CCCCCC"> we</font>

112
00:05:16,469 --> 00:05:22,409
<font color="#E5E5E5">enable these developers right and the</font>

113
00:05:19,770 --> 00:05:25,770
<font color="#E5E5E5">idea is to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> intrinsics</font>

114
00:05:22,409 --> 00:05:29,099
also known as intrinsic functions<font color="#CCCCCC"> also</font>

115
00:05:25,770 --> 00:05:30,599
known as platform dependent<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 26</font><font color="#E5E5E5"> and</font>

116
00:05:29,099 --> 00:05:33,479
these are basically special functions

117
00:05:30,599 --> 00:05:35,909
that map to specific<font color="#CCCCCC"> Hardware</font>

118
00:05:33,479 --> 00:05:38,149
instructions<font color="#E5E5E5"> okay and these are not</font><font color="#CCCCCC"> new</font>

119
00:05:35,909 --> 00:05:42,629
<font color="#E5E5E5">right</font><font color="#CCCCCC"> if you have if</font><font color="#E5E5E5"> you have been using</font>

120
00:05:38,149 --> 00:05:44,759
<font color="#CCCCCC">C</font><font color="#E5E5E5"> C++ compiler intrinsic or your</font>

121
00:05:42,629 --> 00:05:47,729
<font color="#E5E5E5">intrinsic functions</font><font color="#CCCCCC"> it's basically the</font>

122
00:05:44,759 --> 00:05:50,339
same idea<font color="#CCCCCC"> because these</font><font color="#E5E5E5"> are very</font><font color="#CCCCCC"> useful</font>

123
00:05:47,729 --> 00:05:52,558
<font color="#CCCCCC">when you have an algorithm</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> knots</font>

124
00:05:50,339 --> 00:05:55,379
better<font color="#E5E5E5"> to the underlying hardware than</font>

125
00:05:52,559 --> 00:05:58,499
the<font color="#E5E5E5"> language construct that the language</font>

126
00:05:55,379 --> 00:06:00,180
provides for you or whether when you

127
00:05:58,499 --> 00:06:05,209
<font color="#CCCCCC">wanted to</font><font color="#E5E5E5"> have maximum</font><font color="#CCCCCC"> control over the</font>

128
00:06:00,180 --> 00:06:07,709
code generation<font color="#E5E5E5"> the benefit of you know</font>

129
00:06:05,209 --> 00:06:09,300
<font color="#E5E5E5">how intrinsics having been explored</font>

130
00:06:07,709 --> 00:06:12,599
before is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know it's been</font>

131
00:06:09,300 --> 00:06:14,639
<font color="#E5E5E5">field-tested</font><font color="#CCCCCC"> it's been matured</font><font color="#E5E5E5"> there are</font>

132
00:06:12,599 --> 00:06:18,240
<font color="#E5E5E5">specific use cases</font><font color="#CCCCCC"> that benefit</font><font color="#E5E5E5"> from</font>

133
00:06:14,639 --> 00:06:20,550
those so what we did<font color="#E5E5E5"> when designing</font>

134
00:06:18,240 --> 00:06:23,129
<font color="#CCCCCC">intel our</font><font color="#E5E5E5"> intrinsics was to basically</font>

135
00:06:20,550 --> 00:06:26,459
<font color="#E5E5E5">look at you know what's out there in</font><font color="#CCCCCC"> c</font>

136
00:06:23,129 --> 00:06:29,610
<font color="#CCCCCC">c++ how they get used and how we can</font>

137
00:06:26,459 --> 00:06:31,469
<font color="#E5E5E5">leverage the</font><font color="#CCCCCC"> experience that those</font>

138
00:06:29,610 --> 00:06:34,110
developers<font color="#E5E5E5"> that knew how to program</font>

139
00:06:31,469 --> 00:06:37,800
using<font color="#E5E5E5"> intrinsic functions could bring</font>

140
00:06:34,110 --> 00:06:42,509
over<font color="#E5E5E5"> to</font><font color="#CCCCCC"> c-sharp</font><font color="#E5E5E5"> so that's what we did</font>

141
00:06:37,800 --> 00:06:45,650
<font color="#E5E5E5">and to</font><font color="#CCCCCC"> talk about specifics of inter</font>

142
00:06:42,509 --> 00:06:49,499
<font color="#CCCCCC">Haro intrinsics</font><font color="#E5E5E5"> we wrote this</font>

143
00:06:45,650 --> 00:06:51,599
originally<font color="#CCCCCC"> at Intel</font><font color="#E5E5E5"> but major</font>

144
00:06:49,499 --> 00:06:54,300
announcements have been made with<font color="#E5E5E5"> the</font>

145
00:06:51,599 --> 00:06:56,339
help<font color="#E5E5E5"> of the net</font><font color="#CCCCCC"> done echo</font><font color="#E5E5E5"> community and</font>

146
00:06:54,300 --> 00:07:00,719
and Microsoft and the actual

147
00:06:56,339 --> 00:07:03,360
implementation was you know by Intel<font color="#E5E5E5"> by</font>

148
00:07:00,719 --> 00:07:06,089
Microsoft and on the core community so I

149
00:07:03,360 --> 00:07:07,770
think this this was the beauty<font color="#CCCCCC"> of you</font>

150
00:07:06,089 --> 00:07:10,469
know<font color="#E5E5E5"> having an open-source project</font><font color="#CCCCCC"> where</font>

151
00:07:07,770 --> 00:07:12,419
people<font color="#CCCCCC"> could you</font><font color="#E5E5E5"> know bring the issues</font>

152
00:07:10,469 --> 00:07:14,909
that<font color="#E5E5E5"> they had you know what they wanted</font>

153
00:07:12,419 --> 00:07:17,039
from from the project but<font color="#CCCCCC"> also</font>

154
00:07:14,909 --> 00:07:20,099
contribute to<font color="#CCCCCC"> the project right</font><font color="#E5E5E5"> in terms</font>

155
00:07:17,039 --> 00:07:24,509
of<font color="#E5E5E5"> making the API is better as well as</font>

156
00:07:20,099 --> 00:07:26,909
<font color="#E5E5E5">implementing the</font><font color="#CCCCCC"> API is</font><font color="#E5E5E5"> two namespaces</font>

157
00:07:24,509 --> 00:07:29,099
have been introduced system that<font color="#CCCCCC"> runtime</font>

158
00:07:26,909 --> 00:07:32,520
<font color="#E5E5E5">internship which contain platform north</font>

159
00:07:29,099 --> 00:07:34,949
and<font color="#E5E5E5"> Gnostic data structures and</font>

160
00:07:32,520 --> 00:07:38,399
functions that<font color="#E5E5E5"> operate over them so</font>

161
00:07:34,949 --> 00:07:42,529
here's an example so<font color="#CCCCCC"> 256-bit vector is</font>

162
00:07:38,399 --> 00:07:44,819
represented<font color="#CCCCCC"> backed</font><font color="#E5E5E5"> by vector 256 of T</font>

163
00:07:42,529 --> 00:07:46,800
and then<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are operations on those</font>

164
00:07:44,819 --> 00:07:50,009
and then there<font color="#E5E5E5"> are there is</font><font color="#CCCCCC"> a specific</font>

165
00:07:46,800 --> 00:07:52,770
<font color="#E5E5E5">and in space for Intel</font><font color="#CCCCCC"> eisah</font>

166
00:07:50,009 --> 00:07:56,460
so those<font color="#E5E5E5"> touch system that one time that</font>

167
00:07:52,770 --> 00:07:59,818
<font color="#CCCCCC">intrinsic star x86</font><font color="#E5E5E5"> and they contain Isis</font>

168
00:07:56,460 --> 00:08:04,169
that belong to<font color="#CCCCCC"> two Intel inter</font>

169
00:07:59,819 --> 00:08:06,029
architecture<font color="#CCCCCC"> this feature has been</font>

170
00:08:04,169 --> 00:08:10,498
<font color="#E5E5E5">available since done equal to point one</font>

171
00:08:06,029 --> 00:08:14,879
as an experimental future so that way we

172
00:08:10,499 --> 00:08:16,949
had a chance<font color="#E5E5E5"> to improve the api's based</font>

173
00:08:14,879 --> 00:08:19,979
on the<font color="#E5E5E5"> users and in the feedback from</font>

174
00:08:16,949 --> 00:08:23,219
the community<font color="#CCCCCC"> it's available</font><font color="#E5E5E5"> today as in</font>

175
00:08:19,979 --> 00:08:25,050
the<font color="#E5E5E5"> Dinoco 3.0</font><font color="#CCCCCC"> a preview feature and</font>

176
00:08:23,219 --> 00:08:30,089
it's<font color="#E5E5E5"> going to be part of the Dinoco 3.0</font>

177
00:08:25,050 --> 00:08:33,839
release<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more about the</font>

178
00:08:30,089 --> 00:08:36,059
intrinsic design each<font color="#E5E5E5"> isaac last class</font>

179
00:08:33,839 --> 00:08:37,529
contains<font color="#E5E5E5"> is supported property so you</font>

180
00:08:36,059 --> 00:08:40,649
<font color="#E5E5E5">can check the property before you</font>

181
00:08:37,529 --> 00:08:42,630
actually<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it and then</font><font color="#E5E5E5"> actual</font>

182
00:08:40,649 --> 00:08:45,449
functions or methods<font color="#E5E5E5"> that map to</font><font color="#CCCCCC"> the</font>

183
00:08:42,630 --> 00:08:50,040
<font color="#CCCCCC">underlying instruction we try to keep</font>

184
00:08:45,449 --> 00:08:53,490
<font color="#CCCCCC">close</font><font color="#E5E5E5"> mirroring between C sharp</font><font color="#CCCCCC"> Hardware</font>

185
00:08:50,040 --> 00:08:55,740
intrinsic<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> C C++ intrinsic</font>

186
00:08:53,490 --> 00:08:58,890
function because that<font color="#CCCCCC"> makes it</font><font color="#E5E5E5"> easier</font>

187
00:08:55,740 --> 00:09:03,650
for as I said<font color="#CCCCCC"> those who have experienced</font>

188
00:08:58,890 --> 00:09:08,220
<font color="#E5E5E5">in C C++ intrinsic to use c-sharp</font>

189
00:09:03,650 --> 00:09:11,220
<font color="#E5E5E5">intrinsic and here's an example right in</font>

190
00:09:08,220 --> 00:09:14,180
<font color="#E5E5E5">I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> many of you are</font>

191
00:09:11,220 --> 00:09:18,360
familiar with<font color="#CCCCCC"> pop count function</font><font color="#E5E5E5"> or</font>

192
00:09:14,180 --> 00:09:20,310
instruction<font color="#E5E5E5"> but it's basically a way of</font>

193
00:09:18,360 --> 00:09:25,050
counting<font color="#CCCCCC"> the number of bits that</font><font color="#E5E5E5"> are</font>

194
00:09:20,310 --> 00:09:27,810
<font color="#CCCCCC">said in data right in in this case</font><font color="#E5E5E5"> in</font>

195
00:09:25,050 --> 00:09:30,839
<font color="#CCCCCC">you ain't right so and</font><font color="#E5E5E5"> that translates</font>

196
00:09:27,810 --> 00:09:35,369
into<font color="#E5E5E5"> pop counting instruction in Intel</font>

197
00:09:30,840 --> 00:09:36,930
<font color="#E5E5E5">intern machine</font><font color="#CCCCCC"> it's a it's an operation</font>

198
00:09:35,370 --> 00:09:39,600
that<font color="#CCCCCC"> happens frequently enough</font><font color="#E5E5E5"> and gets</font>

199
00:09:36,930 --> 00:09:41,609
used<font color="#E5E5E5"> enough times that there is a</font>

200
00:09:39,600 --> 00:09:43,380
specific hardware instruction that

201
00:09:41,610 --> 00:09:48,810
corresponds to it and I'm<font color="#E5E5E5"> gonna do a</font>

202
00:09:43,380 --> 00:09:52,040
demo<font color="#CCCCCC"> of using pop count</font><font color="#E5E5E5"> and then you</font>

203
00:09:48,810 --> 00:09:54,839
know for as I mentioned a jury of the

204
00:09:52,040 --> 00:09:57,719
<font color="#CCCCCC">intrinsic operate on</font><font color="#E5E5E5"> sim D so as a</font>

205
00:09:54,840 --> 00:10:00,740
result<font color="#CCCCCC"> majority of hiring caliber in</font>

206
00:09:57,720 --> 00:10:04,440
<font color="#CCCCCC">twenty six operate</font><font color="#E5E5E5"> on vector 256 or 128</font>

207
00:10:00,740 --> 00:10:08,010
<font color="#E5E5E5">and then some more details about about</font>

208
00:10:04,440 --> 00:10:16,350
the function itself<font color="#CCCCCC"> okay so let's do a</font>

209
00:10:08,010 --> 00:10:18,620
quick demo anybody<font color="#CCCCCC"> rate this</font><font color="#E5E5E5"> or is</font><font color="#CCCCCC"> it</font>

210
00:10:16,350 --> 00:10:18,620
too small

211
00:10:30,570 --> 00:10:35,420
<font color="#E5E5E5">okay can you read it</font><font color="#CCCCCC"> all right cool</font>

212
00:10:40,310 --> 00:10:46,239
so let me<font color="#E5E5E5"> just create a new console</font>

213
00:10:42,139 --> 00:10:46,240
project<font color="#CCCCCC"> and call it bit count</font>

214
00:10:53,220 --> 00:10:55,880
<font color="#E5E5E5">okay</font>

215
00:10:57,260 --> 00:11:00,319
how<font color="#E5E5E5"> about this can you read it</font><font color="#CCCCCC"> okay</font>

216
00:10:59,690 --> 00:11:07,280
great

217
00:11:00,320 --> 00:11:11,240
so<font color="#E5E5E5"> I okay those stuff the first thing</font>

218
00:11:07,280 --> 00:11:13,160
you<font color="#CCCCCC"> have to do is you know import this</font>

219
00:11:11,240 --> 00:11:17,390
namespace<font color="#CCCCCC"> right system that runtime that</font>

220
00:11:13,160 --> 00:11:19,219
<font color="#E5E5E5">intrinsic starred x86 this is where were</font>

221
00:11:17,390 --> 00:11:21,970
the class<font color="#E5E5E5"> that we are going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

222
00:11:19,220 --> 00:11:21,970
<font color="#CCCCCC">resize then</font>

223
00:11:28,780 --> 00:11:36,250
<font color="#E5E5E5">okay and let me insert</font><font color="#CCCCCC"> the main body so</font>

224
00:11:32,170 --> 00:11:38,380
I'm<font color="#E5E5E5"> just creating a unsigned integer</font><font color="#CCCCCC"> and</font>

225
00:11:36,250 --> 00:11:40,570
then I'm<font color="#E5E5E5"> basically calling this counts</font>

226
00:11:38,380 --> 00:11:51,040
that<font color="#E5E5E5"> bits function which I'm going to</font>

227
00:11:40,570 --> 00:11:52,870
implement okay and here's<font color="#E5E5E5"> the</font>

228
00:11:51,040 --> 00:11:56,430
implementation<font color="#CCCCCC"> it's it's</font><font color="#E5E5E5"> very simple</font>

229
00:11:52,870 --> 00:11:59,080
right<font color="#E5E5E5"> it takes in a unsigned integer and</font>

230
00:11:56,430 --> 00:12:02,079
it first checks whether this is

231
00:11:59,080 --> 00:12:05,440
supported property is set<font color="#E5E5E5"> to true for</font>

232
00:12:02,080 --> 00:12:06,940
this pack count class okay and what that

233
00:12:05,440 --> 00:12:09,670
<font color="#E5E5E5">basically means is you know the</font>

234
00:12:06,940 --> 00:12:10,320
<font color="#E5E5E5">underlying hardware supports this hop</font>

235
00:12:09,670 --> 00:12:13,990
count

236
00:12:10,320 --> 00:12:17,550
eisah<font color="#CCCCCC"> right and if that's the case I</font>

237
00:12:13,990 --> 00:12:20,470
<font color="#CCCCCC">just call pop can't function with the n</font>

238
00:12:17,550 --> 00:12:24,400
otherwise<font color="#E5E5E5"> I do software implementation</font>

239
00:12:20,470 --> 00:12:27,180
<font color="#E5E5E5">right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how you one of the ways</font>

240
00:12:24,400 --> 00:12:30,610
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> count number of bits set right</font>

241
00:12:27,180 --> 00:12:34,060
<font color="#E5E5E5">this is by turning on but then there are</font>

242
00:12:30,610 --> 00:12:37,620
number of other<font color="#E5E5E5"> methods to do it okay so</font>

243
00:12:34,060 --> 00:12:37,619
<font color="#CCCCCC">I'm just gonna run this</font>

244
00:12:42,679 --> 00:12:47,669
<font color="#E5E5E5">okay and he says that I'm used I'm</font>

245
00:12:46,019 --> 00:12:50,489
taking the<font color="#E5E5E5"> hardware intrinsic spark and</font>

246
00:12:47,669 --> 00:12:54,509
this particular<font color="#E5E5E5"> number has 28 bits set</font>

247
00:12:50,489 --> 00:12:57,029
<font color="#E5E5E5">right</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> wonder okay how can i</font>

248
00:12:54,509 --> 00:13:03,479
<font color="#CCCCCC">this how</font><font color="#E5E5E5"> can I test this software</font>

249
00:12:57,029 --> 00:13:05,819
<font color="#CCCCCC">fallback path well Donna core provides a</font>

250
00:13:03,479 --> 00:13:08,909
number of environment variables that you

251
00:13:05,819 --> 00:13:13,259
can<font color="#E5E5E5"> set specifically for each</font><font color="#CCCCCC"> eisah</font>

252
00:13:08,909 --> 00:13:17,099
<font color="#E5E5E5">so you can disable the</font><font color="#CCCCCC"> Isar this way</font><font color="#E5E5E5"> and</font>

253
00:13:13,259 --> 00:13:20,479
when I run the net<font color="#E5E5E5"> with this environment</font>

254
00:13:17,099 --> 00:13:22,979
variables<font color="#CCCCCC"> onset I guess or</font><font color="#E5E5E5"> set to zero</font>

255
00:13:20,479 --> 00:13:24,869
<font color="#CCCCCC">you it would take the salto</font><font color="#E5E5E5"> for back</font>

256
00:13:22,979 --> 00:13:27,869
path<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is one way of testing your</font>

257
00:13:24,869 --> 00:13:30,869
code and this<font color="#CCCCCC"> is available for</font><font color="#E5E5E5"> old</font><font color="#CCCCCC"> eisah</font>

258
00:13:27,869 --> 00:13:35,159
so you can do<font color="#E5E5E5"> something like enable a B</font>

259
00:13:30,869 --> 00:13:38,699
x2 or<font color="#E5E5E5"> ADX</font><font color="#CCCCCC"> sse to set to</font><font color="#E5E5E5"> 1 or 0 okay so</font>

260
00:13:35,159 --> 00:13:41,519
that's that's<font color="#E5E5E5"> how you would how how you</font>

261
00:13:38,699 --> 00:13:48,149
how we can<font color="#E5E5E5"> use</font><font color="#CCCCCC"> hardware intrinsic</font><font color="#E5E5E5"> in</font>

262
00:13:41,519 --> 00:13:54,479
your code<font color="#CCCCCC"> i've created another program</font>

263
00:13:48,149 --> 00:13:58,649
here which basically does<font color="#E5E5E5"> the same thing</font>

264
00:13:54,479 --> 00:14:00,929
except that I'm using<font color="#CCCCCC"> benchmark tonette</font>

265
00:13:58,649 --> 00:14:04,079
for benchmarking<font color="#E5E5E5"> right and I</font><font color="#CCCCCC"> don't have</font>

266
00:14:00,929 --> 00:14:06,299
to talk<font color="#CCCCCC"> you know talk about</font><font color="#E5E5E5"> benchmark</font><font color="#CCCCCC"> on</font>

267
00:14:04,079 --> 00:14:08,488
<font color="#CCCCCC">net previous talks have talked about</font>

268
00:14:06,299 --> 00:14:12,239
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> very nice tool for benchmarking</font>

269
00:14:08,489 --> 00:14:16,919
<font color="#CCCCCC">your</font><font color="#E5E5E5"> code and what I've done here is I'm</font>

270
00:14:12,239 --> 00:14:19,829
creating<font color="#E5E5E5"> let's see for you Long's and</font>

271
00:14:16,919 --> 00:14:22,589
then I'm going<font color="#CCCCCC"> to you know basically</font>

272
00:14:19,829 --> 00:14:24,358
<font color="#E5E5E5">measure how long</font><font color="#CCCCCC"> it takes to to count</font>

273
00:14:22,589 --> 00:14:26,039
the number<font color="#CCCCCC"> of bits right then I provided</font>

274
00:14:24,359 --> 00:14:28,139
<font color="#E5E5E5">here are three different</font><font color="#CCCCCC"> methods of</font>

275
00:14:26,039 --> 00:14:30,359
<font color="#CCCCCC">doing it</font><font color="#E5E5E5"> Cunningham you saw already</font>

276
00:14:28,139 --> 00:14:33,389
<font color="#CCCCCC">lookup paper is using a pre-populated</font>

277
00:14:30,359 --> 00:14:35,519
<font color="#E5E5E5">lookup table to count number of bits and</font>

278
00:14:33,389 --> 00:14:39,119
then<font color="#CCCCCC"> hardware in</font><font color="#E5E5E5"> 26 you already saw that</font>

279
00:14:35,519 --> 00:14:41,970
<font color="#E5E5E5">as well and then I guess the other</font><font color="#CCCCCC"> thing</font>

280
00:14:39,119 --> 00:14:44,429
<font color="#E5E5E5">is I'm basically saying that the</font>

281
00:14:41,970 --> 00:14:50,009
baseline<font color="#E5E5E5"> is</font><font color="#CCCCCC"> our intrinsic</font><font color="#E5E5E5"> so when you</font>

282
00:14:44,429 --> 00:14:54,419
once you run this<font color="#E5E5E5"> that will be used used</font>

283
00:14:50,009 --> 00:14:55,740
as a base and for<font color="#CCCCCC"> benchmarked on net you</font>

284
00:14:54,419 --> 00:15:00,090
have<font color="#E5E5E5"> to use the release mode</font>

285
00:14:55,740 --> 00:15:03,230
so that's<font color="#CCCCCC"> hard I'm</font><font color="#E5E5E5"> gonna do here</font><font color="#CCCCCC"> yeah</font>

286
00:15:00,090 --> 00:15:06,300
this<font color="#E5E5E5"> takes about 30 seconds or or so</font><font color="#CCCCCC"> so</font>

287
00:15:03,230 --> 00:15:10,110
let<font color="#E5E5E5"> me hop back out okay</font>

288
00:15:06,300 --> 00:15:13,290
while that's running<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is basic</font>

289
00:15:10,110 --> 00:15:16,500
structure of<font color="#CCCCCC"> program</font><font color="#E5E5E5"> that uses how</font>

290
00:15:13,290 --> 00:15:20,040
intrinsic<font color="#E5E5E5"> you basically import the</font>

291
00:15:16,500 --> 00:15:21,900
namespace<font color="#E5E5E5"> that that you need</font><font color="#CCCCCC"> I did I</font>

292
00:15:20,040 --> 00:15:23,969
<font color="#E5E5E5">didn't have to import system that one</font>

293
00:15:21,900 --> 00:15:27,360
time in 360 in my demo because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> wasn't</font>

294
00:15:23,970 --> 00:15:29,340
using vector 256<font color="#E5E5E5"> or vector 128 so I</font>

295
00:15:27,360 --> 00:15:30,030
didn't need<font color="#CCCCCC"> that but if you are</font><font color="#E5E5E5"> working</font>

296
00:15:29,340 --> 00:15:32,640
on Cindy

297
00:15:30,030 --> 00:15:35,209
then you<font color="#E5E5E5"> need to import we need to</font>

298
00:15:32,640 --> 00:15:38,670
import that package or<font color="#CCCCCC"> damn namespace</font>

299
00:15:35,210 --> 00:15:42,060
<font color="#E5E5E5">and then the general idea is you check</font>

300
00:15:38,670 --> 00:15:44,180
<font color="#CCCCCC">whether the ice I support it</font><font color="#E5E5E5"> and then</font>

301
00:15:42,060 --> 00:15:46,920
you provide<font color="#CCCCCC"> the</font><font color="#E5E5E5"> code for that otherwise</font>

302
00:15:44,180 --> 00:15:48,839
you provide other implementation or

303
00:15:46,920 --> 00:15:51,689
software for log implementation in your

304
00:15:48,840 --> 00:15:55,250
code<font color="#CCCCCC"> the checks get optimized</font><font color="#E5E5E5"> away so</font>

305
00:15:51,690 --> 00:15:59,670
you<font color="#E5E5E5"> don't pay penalty at</font><font color="#CCCCCC"> runtime and if</font>

306
00:15:55,250 --> 00:16:02,130
if you<font color="#CCCCCC"> just call a BX or any iSight</font>

307
00:15:59,670 --> 00:16:03,510
method without<font color="#E5E5E5"> checking for if it's</font>

308
00:16:02,130 --> 00:16:06,150
supported<font color="#E5E5E5"> there is a chance that you</font>

309
00:16:03,510 --> 00:16:09,080
<font color="#E5E5E5">will run into this problem where it</font><font color="#CCCCCC"> rose</font>

310
00:16:06,150 --> 00:16:12,240
platform does<font color="#CCCCCC"> not support</font><font color="#E5E5E5"> exception so</font>

311
00:16:09,080 --> 00:16:17,760
check check for that right when you're

312
00:16:12,240 --> 00:16:19,710
using it okay<font color="#E5E5E5"> so it's it's finished</font><font color="#CCCCCC"> so</font>

313
00:16:17,760 --> 00:16:23,760
three different<font color="#CCCCCC"> methods right heroin 26</font>

314
00:16:19,710 --> 00:16:25,950
was the<font color="#CCCCCC"> baseline so it's</font><font color="#E5E5E5"> ratio is</font><font color="#CCCCCC"> 1 we</font>

315
00:16:23,760 --> 00:16:28,170
see<font color="#E5E5E5"> that it's about</font><font color="#CCCCCC"> 5 5 times</font><font color="#E5E5E5"> faster</font>

316
00:16:25,950 --> 00:16:29,790
than the lookup table method<font color="#E5E5E5"> and then</font>

317
00:16:28,170 --> 00:16:32,729
about<font color="#E5E5E5"> 18 times faster than the</font>

318
00:16:29,790 --> 00:16:36,120
<font color="#CCCCCC">Cunningham method</font><font color="#E5E5E5"> right so these numbers</font>

319
00:16:32,730 --> 00:16:39,120
will depend on you<font color="#E5E5E5"> know on the size of</font>

320
00:16:36,120 --> 00:16:40,830
the data and other factors but it

321
00:16:39,120 --> 00:16:46,140
basically<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> the power</font><font color="#CCCCCC"> of using</font>

322
00:16:40,830 --> 00:16:48,690
<font color="#CCCCCC">our</font><font color="#E5E5E5"> 126 right for something like this</font><font color="#CCCCCC"> ok</font>

323
00:16:46,140 --> 00:16:51,569
another example<font color="#E5E5E5"> or demo that I'm going</font>

324
00:16:48,690 --> 00:16:55,530
<font color="#CCCCCC">to do is structure of array based ray</font>

325
00:16:51,570 --> 00:16:58,440
tracer<font color="#CCCCCC"> ok how many of you</font><font color="#E5E5E5"> are familiar</font>

326
00:16:55,530 --> 00:16:59,370
<font color="#E5E5E5">with retracing ok most of you that's</font>

327
00:16:58,440 --> 00:17:03,230
<font color="#E5E5E5">great</font>

328
00:16:59,370 --> 00:17:06,030
so how do you vectorize<font color="#E5E5E5"> a ray tracer</font><font color="#CCCCCC"> and</font>

329
00:17:03,230 --> 00:17:08,940
a<font color="#E5E5E5"> vector and</font><font color="#CCCCCC"> vectorize is kind of I</font>

330
00:17:06,030 --> 00:17:09,689
guess overloaded term here<font color="#E5E5E5"> but when</font>

331
00:17:08,940 --> 00:17:12,569
<font color="#CCCCCC">you're dealing with</font>

332
00:17:09,689 --> 00:17:15,839
<font color="#CCCCCC">Fraser you're</font><font color="#E5E5E5"> dealing with 3d vectors</font>

333
00:17:12,569 --> 00:17:19,109
<font color="#E5E5E5">right so you have you know your</font><font color="#CCCCCC"> XYZ is</font>

334
00:17:15,839 --> 00:17:24,000
inherently 3d<font color="#E5E5E5"> even</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> color space</font>

335
00:17:19,109 --> 00:17:26,279
right RGB<font color="#CCCCCC"> is 3d 3d vector so</font><font color="#E5E5E5"> you</font>

336
00:17:24,000 --> 00:17:28,710
basically<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a of two ways of</font>

337
00:17:26,279 --> 00:17:31,549
vectorizing that one is<font color="#CCCCCC"> using a ray of</font>

338
00:17:28,710 --> 00:17:35,340
structure and the<font color="#CCCCCC"> other one is using</font><font color="#E5E5E5"> a</font>

339
00:17:31,549 --> 00:17:37,950
structure<font color="#E5E5E5"> of erase and I try I try to</font>

340
00:17:35,340 --> 00:17:39,658
illustrate<font color="#E5E5E5"> that here so this is a ray of</font>

341
00:17:37,950 --> 00:17:42,659
structure vectorization

342
00:17:39,659 --> 00:17:45,929
so<font color="#CCCCCC"> scalar you're already familiar with I</font>

343
00:17:42,659 --> 00:17:48,570
<font color="#CCCCCC">want over except</font><font color="#E5E5E5"> that you</font><font color="#CCCCCC"> know we are</font>

344
00:17:45,929 --> 00:17:51,029
<font color="#CCCCCC">not dealing</font><font color="#E5E5E5"> with eight 32-bit integers</font>

345
00:17:48,570 --> 00:17:54,320
<font color="#E5E5E5">right we are</font><font color="#CCCCCC"> dealing with three floats</font>

346
00:17:51,029 --> 00:17:58,909
or doubles<font color="#CCCCCC"> okay so you have XYZ</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> XYZ</font>

347
00:17:54,320 --> 00:18:01,590
<font color="#CCCCCC">XYZ 1</font><font color="#E5E5E5"> and X Y Z 2 okay one way of</font>

348
00:17:58,909 --> 00:18:05,220
<font color="#E5E5E5">vectorizing that is basically if you</font>

349
00:18:01,590 --> 00:18:07,850
have a<font color="#CCCCCC"> ymm register which is 128-bit you</font>

350
00:18:05,220 --> 00:18:10,470
can put you<font color="#E5E5E5"> know three floats in there</font>

351
00:18:07,850 --> 00:18:12,299
<font color="#CCCCCC">in one</font><font color="#E5E5E5"> of the register three floats in</font>

352
00:18:10,470 --> 00:18:14,070
<font color="#CCCCCC">the other and you can</font><font color="#E5E5E5"> just execute one</font>

353
00:18:12,299 --> 00:18:16,168
instruction<font color="#CCCCCC"> right so instead</font><font color="#E5E5E5"> of three</font>

354
00:18:14,070 --> 00:18:19,230
scalar additions<font color="#CCCCCC"> you do one scalar</font>

355
00:18:16,169 --> 00:18:22,740
addition but because<font color="#CCCCCC"> your vectorizing it</font>

356
00:18:19,230 --> 00:18:25,769
as an array<font color="#CCCCCC"> of structure</font><font color="#E5E5E5"> notice that</font>

357
00:18:22,740 --> 00:18:32,039
you're<font color="#CCCCCC"> wasting one of the slots</font><font color="#E5E5E5"> in that</font>

358
00:18:25,769 --> 00:18:34,470
<font color="#CCCCCC">128 bit</font><font color="#E5E5E5"> a better way to to talk</font><font color="#CCCCCC"> to</font>

359
00:18:32,039 --> 00:18:38,429
vectorize this it would<font color="#CCCCCC"> be to use</font>

360
00:18:34,470 --> 00:18:42,360
structure of arrays so so<font color="#E5E5E5"> this is say us</font>

361
00:18:38,429 --> 00:18:44,309
<font color="#E5E5E5">you just saw and then this is another</font>

362
00:18:42,360 --> 00:18:49,019
way of<font color="#CCCCCC"> doing it right</font><font color="#E5E5E5"> using a structure</font>

363
00:18:44,309 --> 00:18:53,908
of<font color="#E5E5E5"> erase so instead of putting XYZ in a</font>

364
00:18:49,019 --> 00:18:57,480
single register you put X<font color="#CCCCCC"> 1 through X 8</font>

365
00:18:53,909 --> 00:19:02,070
or X 1 8 in one register same thing with

366
00:18:57,480 --> 00:19:06,179
y&z<font color="#E5E5E5"> y</font><font color="#CCCCCC"> Y & Z</font><font color="#E5E5E5"> and then you have three</font>

367
00:19:02,070 --> 00:19:10,200
instructions<font color="#E5E5E5"> right bi</font><font color="#CCCCCC"> VLPs</font><font color="#E5E5E5"> that asks X 1</font>

368
00:19:06,179 --> 00:19:14,490
and X or Y<font color="#E5E5E5"> mmm 1 ym 4 and so forth</font><font color="#CCCCCC"> ok so</font>

369
00:19:10,200 --> 00:19:17,190
that's another way of<font color="#E5E5E5"> doing it</font><font color="#CCCCCC"> so the</font>

370
00:19:14,490 --> 00:19:19,129
problem I<font color="#E5E5E5"> guess with the abstraction</font>

371
00:19:17,190 --> 00:19:23,309
that vector vector of T provides is that

372
00:19:19,129 --> 00:19:24,990
<font color="#E5E5E5">it's very</font><font color="#CCCCCC"> hard very</font><font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> to do it</font>

373
00:19:23,309 --> 00:19:30,570
way right<font color="#E5E5E5"> because there's no</font><font color="#CCCCCC"> way to</font>

374
00:19:24,990 --> 00:19:33,120
<font color="#CCCCCC">shuffle it easily</font><font color="#E5E5E5"> between between</font><font color="#CCCCCC"> the</font>

375
00:19:30,570 --> 00:19:35,009
<font color="#E5E5E5">actual 3d representation and the</font>

376
00:19:33,120 --> 00:19:37,350
underlying<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> so basically</font>

377
00:19:35,009 --> 00:19:39,179
at the<font color="#CCCCCC"> end of the day</font><font color="#E5E5E5"> right RGB has to</font>

378
00:19:37,350 --> 00:19:42,059
be in RGB form vectors have to be in

379
00:19:39,179 --> 00:19:45,529
vector form<font color="#E5E5E5"> so you have to have a way of</font>

380
00:19:42,059 --> 00:19:47,850
<font color="#E5E5E5">converting those between the two and</font>

381
00:19:45,529 --> 00:19:52,080
using vector of T<font color="#E5E5E5"> that's kind of hard to</font>

382
00:19:47,850 --> 00:19:54,899
do so what we<font color="#E5E5E5"> did when we introduced</font>

383
00:19:52,080 --> 00:19:59,699
into<font color="#CCCCCC"> our</font><font color="#E5E5E5"> intrinsic was to add another</font>

384
00:19:54,899 --> 00:20:03,559
test to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> core CLR right so I built this</font>

385
00:19:59,700 --> 00:20:08,600
test here<font color="#CCCCCC"> so</font><font color="#E5E5E5"> but basically there is</font><font color="#CCCCCC"> a</font>

386
00:20:03,559 --> 00:20:08,600
<font color="#E5E5E5">maybe I already have</font><font color="#CCCCCC"> it open yep</font>

387
00:20:15,070 --> 00:20:24,399
okay so there's<font color="#E5E5E5"> their</font><font color="#CCCCCC"> tests are built</font>

388
00:20:19,610 --> 00:20:30,469
into core CLR right and the original

389
00:20:24,400 --> 00:20:34,520
test is called<font color="#E5E5E5"> Cindy ray tracer okay and</font>

390
00:20:30,470 --> 00:20:38,510
at this<font color="#E5E5E5"> and you can take a look at</font>

391
00:20:34,520 --> 00:20:43,760
vector<font color="#CCCCCC"> da CS this is based on</font><font color="#E5E5E5"> the vector</font>

392
00:20:38,510 --> 00:20:48,940
<font color="#CCCCCC">three class in</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> numerix</font><font color="#E5E5E5"> right and</font>

393
00:20:43,760 --> 00:20:52,940
it basically is<font color="#E5E5E5"> using array of structure</font>

394
00:20:48,940 --> 00:20:55,280
<font color="#CCCCCC">to the ray tracing so when we put it or</font>

395
00:20:52,940 --> 00:20:59,930
when<font color="#CCCCCC"> you implement</font><font color="#E5E5E5"> the Intel hardware</font>

396
00:20:55,280 --> 00:21:02,000
intrinsic<font color="#E5E5E5"> we added this test called</font>

397
00:20:59,930 --> 00:21:05,770
packet tracer which basically does<font color="#E5E5E5"> the</font>

398
00:21:02,000 --> 00:21:09,410
same<font color="#E5E5E5"> thing except that it's using its</font>

399
00:21:05,770 --> 00:21:11,150
using structure of array<font color="#E5E5E5"> so I've changed</font>

400
00:21:09,410 --> 00:21:17,210
the program<font color="#E5E5E5"> a little bit so that it runs</font>

401
00:21:11,150 --> 00:21:24,220
for for<font color="#E5E5E5"> about five seconds and using 512</font>

402
00:21:17,210 --> 00:21:28,880
by 512<font color="#E5E5E5"> seeing same thing with ray tracer</font>

403
00:21:24,220 --> 00:21:31,250
so it's using 512 by 512<font color="#E5E5E5"> running for</font>

404
00:21:28,880 --> 00:21:34,640
about<font color="#E5E5E5"> five seconds and then so here I'm</font>

405
00:21:31,250 --> 00:21:38,480
just<font color="#CCCCCC"> gonna run the test this</font><font color="#E5E5E5"> is not</font>

406
00:21:34,640 --> 00:21:44,420
based on<font color="#E5E5E5"> down the benchmark</font><font color="#CCCCCC"> on net but</font>

407
00:21:38,480 --> 00:21:48,320
<font color="#E5E5E5">it does print out you know how many or</font>

408
00:21:44,420 --> 00:21:50,300
<font color="#E5E5E5">what how many frames it processed</font><font color="#CCCCCC"> so so</font>

409
00:21:48,320 --> 00:21:53,540
this is packet tracer which is using

410
00:21:50,300 --> 00:21:57,290
structure<font color="#CCCCCC"> of array and it it says about</font>

411
00:21:53,540 --> 00:22:02,170
hundred frames per second was processed

412
00:21:57,290 --> 00:22:02,170
<font color="#E5E5E5">and then if you go to</font>

413
00:22:06,710 --> 00:22:16,260
go to<font color="#CCCCCC"> ray tracer and Ray tracer so if</font>

414
00:22:11,520 --> 00:22:19,250
you recall<font color="#E5E5E5"> that was about 100 and</font><font color="#CCCCCC"> ray</font>

415
00:22:16,260 --> 00:22:21,600
tracer the original tracer is about<font color="#CCCCCC"> six</font>

416
00:22:19,250 --> 00:22:22,530
frames per second which doesn't make

417
00:22:21,600 --> 00:22:26,909
<font color="#CCCCCC">sense</font>

418
00:22:22,530 --> 00:22:30,710
I know<font color="#CCCCCC"> Intel</font><font color="#E5E5E5"> our intrinsic version is</font>

419
00:22:26,910 --> 00:22:30,710
faster but<font color="#CCCCCC"> not this much faster</font>

420
00:22:38,940 --> 00:22:41,750
<font color="#E5E5E5">hmm</font>

421
00:22:53,470 --> 00:23:04,180
<font color="#E5E5E5">okay 43</font><font color="#CCCCCC"> that's more reasonable</font><font color="#E5E5E5"> we</font>

422
00:22:58,880 --> 00:23:07,660
usually see about<font color="#E5E5E5"> six times speed up but</font>

423
00:23:04,180 --> 00:23:10,570
not necessarily<font color="#E5E5E5"> running on my laptop so</font>

424
00:23:07,660 --> 00:23:15,130
so<font color="#CCCCCC"> usually see between six</font><font color="#E5E5E5"> and seven</font>

425
00:23:10,570 --> 00:23:15,129
<font color="#E5E5E5">speed up</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> particular application</font>

426
00:23:19,090 --> 00:23:27,169
<font color="#CCCCCC">so who's using</font><font color="#E5E5E5"> her Intel her oh oh thank</font>

427
00:23:23,180 --> 00:23:31,880
you that's time reminder who's using

428
00:23:27,170 --> 00:23:33,940
Intel our entry<font color="#CCCCCC"> six today so I</font><font color="#E5E5E5"> mentioned</font>

429
00:23:31,880 --> 00:23:36,950
I saw implementation I showed you that

430
00:23:33,940 --> 00:23:39,080
<font color="#CCCCCC">another interesting uses in the</font><font color="#E5E5E5"> CPU math</font>

431
00:23:36,950 --> 00:23:42,050
operation cinema<font color="#CCCCCC"> Garnett so a Madonna</font>

432
00:23:39,080 --> 00:23:46,669
<font color="#E5E5E5">this machine learning library from from</font>

433
00:23:42,050 --> 00:23:48,350
the<font color="#E5E5E5"> dotnet team and they used to have or</font>

434
00:23:46,670 --> 00:23:50,900
they still do they have<font color="#CCCCCC"> an ad</font>

435
00:23:48,350 --> 00:23:53,050
<font color="#E5E5E5">implementation of CP math operations for</font>

436
00:23:50,900 --> 00:23:55,760
for their machine learning library<font color="#CCCCCC"> and</font>

437
00:23:53,050 --> 00:23:58,340
one of the things that they did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> to</font>

438
00:23:55,760 --> 00:24:02,780
use<font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> Harbor</font><font color="#E5E5E5"> internships to port</font>

439
00:23:58,340 --> 00:24:04,730
those to c-sharp<font color="#CCCCCC"> and this chart this</font>

440
00:24:02,780 --> 00:24:09,530
chart right<font color="#CCCCCC"> here shows the</font><font color="#E5E5E5"> performance</font>

441
00:24:04,730 --> 00:24:11,660
of native versus c-sharp and the point

442
00:24:09,530 --> 00:24:14,720
here in this<font color="#E5E5E5"> chart is that the bars are</font>

443
00:24:11,660 --> 00:24:16,820
<font color="#E5E5E5">very similar in in height which means</font>

444
00:24:14,720 --> 00:24:18,920
that their<font color="#CCCCCC"> performance is you know</font>

445
00:24:16,820 --> 00:24:20,360
pretty similar and if that's the<font color="#CCCCCC"> case</font>

446
00:24:18,920 --> 00:24:23,510
<font color="#E5E5E5">you know what's the point of bringing</font>

447
00:24:20,360 --> 00:24:25,760
them to a c-sharp<font color="#E5E5E5"> right one of the</font>

448
00:24:23,510 --> 00:24:29,570
<font color="#E5E5E5">advantages of doing</font><font color="#CCCCCC"> this in c-sharp</font>

449
00:24:25,760 --> 00:24:32,180
<font color="#CCCCCC">rather than in</font><font color="#E5E5E5"> C++ is you know based on</font>

450
00:24:29,570 --> 00:24:34,250
on what they said was that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> don't</font>

451
00:24:32,180 --> 00:24:37,670
have to have you know platform specific

452
00:24:34,250 --> 00:24:40,250
implementations for different<font color="#E5E5E5"> voices and</font>

453
00:24:37,670 --> 00:24:42,950
different business<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so before</font><font color="#E5E5E5"> they</font>

454
00:24:40,250 --> 00:24:47,510
had to you know carry 32-bit version for

455
00:24:42,950 --> 00:24:50,060
Linux 32 version for<font color="#E5E5E5"> Mac OS 64-bit for</font>

456
00:24:47,510 --> 00:24:52,430
Windows and so forth<font color="#E5E5E5"> right now because</font>

457
00:24:50,060 --> 00:24:55,520
they<font color="#E5E5E5"> are using c-sharp intrinsic in</font>

458
00:24:52,430 --> 00:24:58,490
c-sharp and she takes takes care of

459
00:24:55,520 --> 00:24:59,950
compiling that<font color="#E5E5E5"> into into</font><font color="#CCCCCC"> the native</font><font color="#E5E5E5"> code</font>

460
00:24:58,490 --> 00:25:02,780
<font color="#E5E5E5">so they don't have to worry about that</font>

461
00:24:59,950 --> 00:25:04,970
so<font color="#E5E5E5"> that was a big plus</font><font color="#CCCCCC"> so in addition to</font>

462
00:25:02,780 --> 00:25:07,310
<font color="#CCCCCC">having</font><font color="#E5E5E5"> performance performance benefits</font>

463
00:25:04,970 --> 00:25:09,620
<font color="#E5E5E5">if your application is</font><font color="#CCCCCC"> already using</font>

464
00:25:07,310 --> 00:25:12,110
native implementation it<font color="#CCCCCC"> has an other</font>

465
00:25:09,620 --> 00:25:14,080
advantage that<font color="#CCCCCC"> you don't have to have</font>

466
00:25:12,110 --> 00:25:17,419
you know platform specific

467
00:25:14,080 --> 00:25:19,879
implementations in your code<font color="#CCCCCC"> they're</font>

468
00:25:17,420 --> 00:25:21,880
being used<font color="#E5E5E5"> in a bit operation so you</font>

469
00:25:19,880 --> 00:25:25,870
<font color="#CCCCCC">know</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> count is one example there's</font>

470
00:25:21,880 --> 00:25:31,580
there are<font color="#E5E5E5"> other operations</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> TC count</font>

471
00:25:25,870 --> 00:25:33,320
<font color="#E5E5E5">leading zero count that are used not not</font>

472
00:25:31,580 --> 00:25:35,510
in you<font color="#E5E5E5"> know those specific micro</font>

473
00:25:33,320 --> 00:25:38,510
benchmarks but in the context of image

474
00:25:35,510 --> 00:25:41,390
manipulation<font color="#CCCCCC"> or you know string</font>

475
00:25:38,510 --> 00:25:45,129
processing<font color="#E5E5E5"> a string conversion and so</font>

476
00:25:41,390 --> 00:25:47,570
forth<font color="#CCCCCC"> matrix 4x4 has been optimized</font>

477
00:25:45,130 --> 00:25:50,000
there is a hashing algorithm called

478
00:25:47,570 --> 00:25:54,169
<font color="#E5E5E5">Blake Blake</font><font color="#CCCCCC"> to which is taking advantage</font>

479
00:25:50,000 --> 00:25:55,640
<font color="#CCCCCC">of Internet 316 C sharp</font><font color="#E5E5E5"> and you know if</font>

480
00:25:54,170 --> 00:25:58,910
your application is performance

481
00:25:55,640 --> 00:26:01,340
<font color="#CCCCCC">sensitive then your application may</font><font color="#E5E5E5"> may</font>

482
00:25:58,910 --> 00:26:02,990
<font color="#E5E5E5">be one of the candidates right</font><font color="#CCCCCC"> so how do</font>

483
00:26:01,340 --> 00:26:05,480
you actually go about accelerating<font color="#CCCCCC"> your</font>

484
00:26:02,990 --> 00:26:07,220
application so first thing<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to</font>

485
00:26:05,480 --> 00:26:08,960
do is understand your<font color="#CCCCCC"> application what</font>

486
00:26:07,220 --> 00:26:13,940
are the hot spots<font color="#CCCCCC"> how can</font><font color="#E5E5E5"> I improve</font>

487
00:26:08,960 --> 00:26:16,640
<font color="#E5E5E5">those so I use v2 an amplifier which is</font>

488
00:26:13,940 --> 00:26:19,630
<font color="#E5E5E5">a great tool works with the neck or for</font>

489
00:26:16,640 --> 00:26:22,910
identifying<font color="#E5E5E5"> house identifying hotspots</font>

490
00:26:19,630 --> 00:26:25,280
<font color="#CCCCCC">if you wanted</font><font color="#E5E5E5"> to use intrinsic there's a</font>

491
00:26:22,910 --> 00:26:27,950
wealth of information<font color="#E5E5E5"> about you know</font>

492
00:26:25,280 --> 00:26:30,440
<font color="#E5E5E5">what they are how you can use it I've</font>

493
00:26:27,950 --> 00:26:34,340
<font color="#E5E5E5">linked a couple of those here there's</font>

494
00:26:30,440 --> 00:26:37,130
existing<font color="#E5E5E5"> solutions that use intrinsic</font>

495
00:26:34,340 --> 00:26:41,709
functions in C<font color="#E5E5E5"> C++ so just last year</font>

496
00:26:37,130 --> 00:26:45,830
there<font color="#E5E5E5"> was a talk on at</font><font color="#CCCCCC"> CPP Khan about</font>

497
00:26:41,710 --> 00:26:50,720
<font color="#E5E5E5">accelerating</font><font color="#CCCCCC"> utf-8 conversion using</font><font color="#E5E5E5"> C++</font>

498
00:26:45,830 --> 00:26:52,520
DFA<font color="#E5E5E5"> and assess the intrinsic</font><font color="#CCCCCC"> I think one</font>

499
00:26:50,720 --> 00:26:56,240
of the challenges<font color="#CCCCCC"> that we can take is</font>

500
00:26:52,520 --> 00:26:59,690
you know change the<font color="#E5E5E5"> C++ to c-sharp and</font>

501
00:26:56,240 --> 00:27:03,200
<font color="#E5E5E5">make that work</font><font color="#CCCCCC"> in c-sharp</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> you</font>

502
00:26:59,690 --> 00:27:05,360
would you know after you<font color="#E5E5E5"> optimize</font><font color="#CCCCCC"> your</font>

503
00:27:03,200 --> 00:27:08,540
application<font color="#CCCCCC"> using intrinsic</font><font color="#E5E5E5"> you would</font>

504
00:27:05,360 --> 00:27:10,129
measure<font color="#E5E5E5"> if it's you know what you what</font>

505
00:27:08,540 --> 00:27:11,990
you expected or<font color="#E5E5E5"> what we want it to</font><font color="#CCCCCC"> be</font>

506
00:27:10,130 --> 00:27:14,900
you're done but otherwise you can

507
00:27:11,990 --> 00:27:17,390
iterate this process right<font color="#CCCCCC"> and then last</font>

508
00:27:14,900 --> 00:27:20,000
thing<font color="#CCCCCC"> I wanted to mention was</font><font color="#E5E5E5"> our</font>

509
00:27:17,390 --> 00:27:21,080
experience<font color="#E5E5E5"> with working</font><font color="#CCCCCC"> or in Darnell</font>

510
00:27:20,000 --> 00:27:24,950
core

511
00:27:21,080 --> 00:27:28,939
introducing your<font color="#CCCCCC"> new feature - or a set</font>

512
00:27:24,950 --> 00:27:31,250
of api's<font color="#E5E5E5"> and then going</font><font color="#CCCCCC"> through the</font>

513
00:27:28,940 --> 00:27:33,770
review<font color="#CCCCCC"> process</font><font color="#E5E5E5"> enhancing it and</font>

514
00:27:31,250 --> 00:27:37,820
<font color="#E5E5E5">implementing has been a pleasure</font>

515
00:27:33,770 --> 00:27:42,170
Microsoft has been<font color="#E5E5E5"> very open about about</font>

516
00:27:37,820 --> 00:27:44,360
the project<font color="#CCCCCC"> and we have had we have</font>

517
00:27:42,170 --> 00:27:46,880
gotten a lot<font color="#CCCCCC"> of help from from</font><font color="#E5E5E5"> the team</font>

518
00:27:44,360 --> 00:27:48,679
as<font color="#E5E5E5"> well as from the community so you</font>

519
00:27:46,880 --> 00:27:50,840
<font color="#CCCCCC">know if you have you know if you have a</font>

520
00:27:48,680 --> 00:27:53,900
<font color="#CCCCCC">project or set</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> api's that you wanted</font>

521
00:27:50,840 --> 00:27:54,740
to implement<font color="#CCCCCC"> maybe related</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> heroin</font><font color="#E5E5E5"> 26</font>

522
00:27:53,900 --> 00:27:58,820
maybe not

523
00:27:54,740 --> 00:28:01,820
<font color="#E5E5E5">I encourage you</font><font color="#CCCCCC"> to work with Daniel</font><font color="#E5E5E5"> core</font>

524
00:27:58,820 --> 00:28:06,129
team on making those come to real

525
00:28:01,820 --> 00:28:15,099
<font color="#E5E5E5">reality that's it thank you</font><font color="#CCCCCC"> very much</font>

526
00:28:06,130 --> 00:28:15,099
[Applause]

