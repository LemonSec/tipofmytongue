1
00:00:04,620 --> 00:00:12,480
so hi<font color="#E5E5E5"> everyone I'm Mary and I'm here to</font>

2
00:00:09,090 --> 00:00:15,629
talk to<font color="#CCCCCC"> you today about</font><font color="#E5E5E5"> using sale to</font>

3
00:00:12,480 --> 00:00:22,680
generate new assembler disassembler

4
00:00:15,630 --> 00:00:26,160
simulator<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> RISC 5</font><font color="#E5E5E5"> tool train</font><font color="#CCCCCC"> a</font>

5
00:00:22,680 --> 00:00:29,250
little bit about me to start<font color="#E5E5E5"> I'm just an</font>

6
00:00:26,160 --> 00:00:30,509
undergraduate student<font color="#E5E5E5"> the studying at</font>

7
00:00:29,250 --> 00:00:32,448
<font color="#CCCCCC">the</font><font color="#E5E5E5"> University of</font><font color="#CCCCCC"> Surrey</font>

8
00:00:30,510 --> 00:00:37,500
for electronic<font color="#CCCCCC"> and</font><font color="#E5E5E5"> electrical</font>

9
00:00:32,448 --> 00:00:40,739
engineering<font color="#E5E5E5"> I'm a UK PSF scholar with my</font>

10
00:00:37,500 --> 00:00:42,440
<font color="#E5E5E5">cousin and I am the group chair for the</font>

11
00:00:40,739 --> 00:00:45,690
risk<font color="#E5E5E5"> 5 foundations</font>

12
00:00:42,440 --> 00:00:48,930
open source<font color="#E5E5E5"> and university outreach</font><font color="#CCCCCC"> task</font>

13
00:00:45,690 --> 00:00:52,530
<font color="#E5E5E5">group so you</font><font color="#CCCCCC"> all qualify to be in that</font>

14
00:00:48,930 --> 00:00:54,600
task group so please come join<font color="#E5E5E5"> us</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if</font>

15
00:00:52,530 --> 00:01:00,770
you're<font color="#E5E5E5"> interested come talk to me after</font>

16
00:00:54,600 --> 00:01:04,140
<font color="#E5E5E5">this presentation so in the past</font>

17
00:01:00,770 --> 00:01:06,630
<font color="#E5E5E5">creating a new processor has consisted</font>

18
00:01:04,140 --> 00:01:09,330
of<font color="#E5E5E5"> defining a formal</font><font color="#CCCCCC"> specification</font><font color="#E5E5E5"> and</font>

19
00:01:06,630 --> 00:01:12,500
then creating an assembler<font color="#E5E5E5"> and compiler</font>

20
00:01:09,330 --> 00:01:15,270
tool chain definition from<font color="#E5E5E5"> this by hand</font>

21
00:01:12,500 --> 00:01:18,060
<font color="#E5E5E5">the operation of the assembler and</font>

22
00:01:15,270 --> 00:01:21,030
compiler can only be verified

23
00:01:18,060 --> 00:01:25,020
once the processor has been manufactured

24
00:01:21,030 --> 00:01:27,270
which introduces a linear dependency<font color="#E5E5E5"> the</font>

25
00:01:25,020 --> 00:01:30,240
time scale could<font color="#E5E5E5"> be significantly</font>

26
00:01:27,270 --> 00:01:32,399
reduced<font color="#CCCCCC"> if the definitions could be</font>

27
00:01:30,240 --> 00:01:34,770
generated automatically<font color="#CCCCCC"> from the</font>

28
00:01:32,399 --> 00:01:38,610
specification<font color="#CCCCCC"> but this is proved</font>

29
00:01:34,770 --> 00:01:41,119
<font color="#E5E5E5">difficult in the past however advances</font>

30
00:01:38,610 --> 00:01:44,250
have been made<font color="#E5E5E5"> with the processor</font>

31
00:01:41,119 --> 00:01:46,920
<font color="#E5E5E5">specification language and framework to</font>

32
00:01:44,250 --> 00:01:49,500
generate the assembler<font color="#CCCCCC"> and compilers so</font>

33
00:01:46,920 --> 00:01:51,840
it should now<font color="#E5E5E5"> be</font><font color="#CCCCCC"> possible that's why my</font>

34
00:01:49,500 --> 00:01:55,050
final year for undergraduate<font color="#CCCCCC"> project</font>

35
00:01:51,840 --> 00:01:57,390
comes in it and aims<font color="#E5E5E5"> to develop code in</font>

36
00:01:55,050 --> 00:02:00,780
a functional programming language<font color="#CCCCCC"> that</font>

37
00:01:57,390 --> 00:02:04,259
creates the main file required by the<font color="#E5E5E5"> to</font>

38
00:02:00,780 --> 00:02:06,450
<font color="#E5E5E5">change generator from the processor</font>

39
00:02:04,259 --> 00:02:10,619
description with minimum human

40
00:02:06,450 --> 00:02:11,370
interaction the<font color="#E5E5E5"> risk 5 architecture was</font>

41
00:02:10,619 --> 00:02:15,209
pissed

42
00:02:11,370 --> 00:02:17,190
more specifically<font color="#E5E5E5"> our V 64</font><font color="#CCCCCC"> I will be</font>

43
00:02:15,209 --> 00:02:20,280
used as the<font color="#CCCCCC"> model</font>

44
00:02:17,190 --> 00:02:22,770
this would<font color="#CCCCCC"> represent a significant step</font>

45
00:02:20,280 --> 00:02:26,450
towards a complete<font color="#CCCCCC"> framework for the</font>

46
00:02:22,770 --> 00:02:29,520
automation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> for automatic translation</font>

47
00:02:26,450 --> 00:02:32,100
during this project<font color="#E5E5E5"> I will during</font><font color="#CCCCCC"> this</font>

48
00:02:29,520 --> 00:02:34,970
presentation I<font color="#E5E5E5"> will discuss the</font>

49
00:02:32,100 --> 00:02:39,720
processor specification language<font color="#CCCCCC"> sail</font>

50
00:02:34,970 --> 00:02:42,560
show a<font color="#CCCCCC"> handwritten of the</font><font color="#E5E5E5"> 64 I example</font>

51
00:02:39,720 --> 00:02:46,590
<font color="#CCCCCC">of sail do a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Oh camel</font><font color="#CCCCCC"> and</font>

52
00:02:42,560 --> 00:02:50,580
then finish off<font color="#CCCCCC"> with</font><font color="#E5E5E5"> C gen the</font><font color="#CCCCCC"> CPU tool</font>

53
00:02:46,590 --> 00:02:58,380
generator<font color="#E5E5E5"> and another example</font><font color="#CCCCCC"> of our V</font>

54
00:02:50,580 --> 00:03:00,480
64<font color="#CCCCCC"> I but this time for C gen so to start</font>

55
00:02:58,380 --> 00:03:03,750
off with I'll give a little<font color="#E5E5E5"> bit of</font>

56
00:03:00,480 --> 00:03:07,410
context as why I believe<font color="#E5E5E5"> this</font><font color="#CCCCCC"> project to</font>

57
00:03:03,750 --> 00:03:10,890
be<font color="#E5E5E5"> important</font><font color="#CCCCCC"> a processor is a key</font>

58
00:03:07,410 --> 00:03:13,350
concept component in any computer which

59
00:03:10,890 --> 00:03:16,290
uses<font color="#CCCCCC"> logic circuits to perform user</font>

60
00:03:13,350 --> 00:03:19,500
<font color="#CCCCCC">specified operations on data or operands</font>

61
00:03:16,290 --> 00:03:22,010
<font color="#E5E5E5">new processors are being designed all</font>

62
00:03:19,500 --> 00:03:25,050
the time to fulfill<font color="#E5E5E5"> different area needs</font>

63
00:03:22,010 --> 00:03:27,209
such<font color="#CCCCCC"> as low power processors</font><font color="#E5E5E5"> for</font>

64
00:03:25,050 --> 00:03:30,030
wearable tech or<font color="#CCCCCC"> high-performance</font>

65
00:03:27,209 --> 00:03:32,490
graphics processors to allow<font color="#E5E5E5"> these</font>

66
00:03:30,030 --> 00:03:33,750
modifications<font color="#E5E5E5"> often processes have</font>

67
00:03:32,490 --> 00:03:37,740
different blends<font color="#E5E5E5"> of hardware and</font>

68
00:03:33,750 --> 00:03:41,940
software which require<font color="#E5E5E5"> using special</font>

69
00:03:37,740 --> 00:03:44,250
optimizations<font color="#E5E5E5"> and new instructions there</font>

70
00:03:41,940 --> 00:03:45,930
are some key steps<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> development</font>

71
00:03:44,250 --> 00:03:49,590
lifecycle of a processor

72
00:03:45,930 --> 00:03:54,239
these are designing the physical

73
00:03:49,590 --> 00:03:57,600
hardware for the processor<font color="#E5E5E5"> defining the</font>

74
00:03:54,239 --> 00:04:02,600
processors optimizations lighting the

75
00:03:57,600 --> 00:04:05,459
ISA creating the simulator of<font color="#E5E5E5"> the ISA</font>

76
00:04:02,600 --> 00:04:07,769
running pre silicon tests which is

77
00:04:05,459 --> 00:04:10,860
<font color="#E5E5E5">basically where you take the is a</font>

78
00:04:07,770 --> 00:04:13,610
simulator and<font color="#CCCCCC"> the hardware model and run</font>

79
00:04:10,860 --> 00:04:17,100
them together and then finally

80
00:04:13,610 --> 00:04:19,950
manufactured the design but designing<font color="#E5E5E5"> a</font>

81
00:04:17,100 --> 00:04:23,370
processor from scratch takes too long

82
00:04:19,950 --> 00:04:26,520
<font color="#E5E5E5">and is too expensive arm estimates that</font>

83
00:04:23,370 --> 00:04:30,540
it takes about<font color="#E5E5E5"> 300 engineer years to</font>

84
00:04:26,520 --> 00:04:33,530
complete a<font color="#E5E5E5"> new reasonable design</font>

85
00:04:30,540 --> 00:04:37,080
so often those<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> use third-party</font>

86
00:04:33,530 --> 00:04:42,000
<font color="#E5E5E5">designs such</font><font color="#CCCCCC"> as arm or an open-source</font>

87
00:04:37,080 --> 00:04:46,800
<font color="#CCCCCC">design such</font><font color="#E5E5E5"> as risk 5 once an icer is to</font>

88
00:04:42,000 --> 00:04:49,710
find the next step is to write the

89
00:04:46,800 --> 00:04:53,910
assembler and disassembler and the other

90
00:04:49,710 --> 00:04:57,419
<font color="#E5E5E5">CPU tools this step is the</font><font color="#CCCCCC"> one that</font>

91
00:04:53,910 --> 00:05:00,450
stops<font color="#E5E5E5"> many organizations from going down</font>

92
00:04:57,420 --> 00:05:02,250
<font color="#E5E5E5">the custom process of boot as it takes a</font>

93
00:05:00,450 --> 00:05:06,620
long time<font color="#E5E5E5"> and there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> no guarantee of</font>

94
00:05:02,250 --> 00:05:10,650
<font color="#CCCCCC">success but</font><font color="#E5E5E5"> it can be done with the</font>

95
00:05:06,620 --> 00:05:14,660
<font color="#CCCCCC">open-source CPU generating tool called C</font>

96
00:05:10,650 --> 00:05:16,620
<font color="#CCCCCC">gen but this leaves the problem of</font>

97
00:05:14,660 --> 00:05:19,800
converting the<font color="#CCCCCC"> Hardware language</font>

98
00:05:16,620 --> 00:05:22,680
hardware design of the processor<font color="#CCCCCC"> to</font>

99
00:05:19,800 --> 00:05:25,170
seizure until recently there was<font color="#CCCCCC"> a lack</font>

100
00:05:22,680 --> 00:05:28,440
<font color="#CCCCCC">of formal methods</font><font color="#E5E5E5"> to define the hardware</font>

101
00:05:25,170 --> 00:05:31,830
in such a manner<font color="#CCCCCC"> the automated analysis</font>

102
00:05:28,440 --> 00:05:35,600
could<font color="#E5E5E5"> be performed to</font><font color="#CCCCCC"> confirm that the</font>

103
00:05:31,830 --> 00:05:35,599
design<font color="#E5E5E5"> actually does what is required</font>

104
00:05:35,780 --> 00:05:41,090
sale was developed to<font color="#E5E5E5"> fulfill</font><font color="#CCCCCC"> this niche</font>

105
00:05:43,940 --> 00:05:52,320
the formal model is written in<font color="#E5E5E5"> sale a</font>

106
00:05:47,060 --> 00:05:55,830
language describing the instruction set

107
00:05:52,320 --> 00:05:58,260
architecture<font color="#CCCCCC"> semantics of</font><font color="#E5E5E5"> a processor it</font>

108
00:05:55,830 --> 00:06:01,140
<font color="#E5E5E5">is a work in progress by the University</font>

109
00:05:58,260 --> 00:06:04,020
of Cambridge<font color="#E5E5E5"> say our aims to provide an</font>

110
00:06:01,140 --> 00:06:06,260
engineer friendly vendor<font color="#E5E5E5"> pseudocode like</font>

111
00:06:04,020 --> 00:06:09,510
language for describing instruction

112
00:06:06,260 --> 00:06:12,599
semantics<font color="#E5E5E5"> it is essentially a</font>

113
00:06:09,510 --> 00:06:15,870
<font color="#CCCCCC">first-order imperative language so it</font>

114
00:06:12,600 --> 00:06:19,260
uses<font color="#CCCCCC"> predicates</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> can define</font>

115
00:06:15,870 --> 00:06:22,200
non-logical<font color="#E5E5E5"> objects an example sentence</font>

116
00:06:19,260 --> 00:06:27,120
would<font color="#E5E5E5"> be there exists X such that X is</font>

117
00:06:22,200 --> 00:06:29,909
Socrates<font color="#CCCCCC"> and X is man but sale</font><font color="#E5E5E5"> also has</font>

118
00:06:27,120 --> 00:06:33,300
<font color="#CCCCCC">lightweight dependent typing for numeric</font>

119
00:06:29,910 --> 00:06:36,540
types and bit vector lengths which are

120
00:06:33,300 --> 00:06:38,280
<font color="#E5E5E5">made data structures that complete that</font>

121
00:06:36,540 --> 00:06:41,130
compact these stores bits

122
00:06:38,280 --> 00:06:43,409
<font color="#E5E5E5">these are automates automatically</font>

123
00:06:41,130 --> 00:06:49,019
checked using<font color="#E5E5E5"> Zed 3</font>

124
00:06:43,409 --> 00:06:51,360
the prover<font color="#E5E5E5"> not the BMW it has been used</font>

125
00:06:49,019 --> 00:06:54,689
for<font color="#E5E5E5"> several papers available</font><font color="#CCCCCC"> from the</font>

126
00:06:51,360 --> 00:06:59,610
University of Cambridge<font color="#CCCCCC"> sale website the</font>

127
00:06:54,689 --> 00:07:02,059
link is<font color="#E5E5E5"> here given a sale definition the</font>

128
00:06:59,610 --> 00:07:05,599
tool will check it and<font color="#E5E5E5"> generate</font>

129
00:07:02,059 --> 00:07:08,459
executable<font color="#E5E5E5"> emulators in C and O</font><font color="#CCCCCC"> camel</font>

130
00:07:05,599 --> 00:07:12,029
their improver definitions for<font color="#E5E5E5"> Isabel</font>

131
00:07:08,459 --> 00:07:14,779
and<font color="#CCCCCC"> Hawke for and definitions to</font>

132
00:07:12,029 --> 00:07:21,058
integrate with the<font color="#CCCCCC"> RAM tool for</font>

133
00:07:14,779 --> 00:07:23,819
concurrency semantics to introduce the

134
00:07:21,059 --> 00:07:28,709
features in more detail<font color="#CCCCCC"> I will now go</font>

135
00:07:23,819 --> 00:07:33,360
<font color="#CCCCCC">through a simple AVI</font><font color="#E5E5E5"> 64</font><font color="#CCCCCC"> I example the RV</font>

136
00:07:28,709 --> 00:07:36,539
64 I in sale is handwritten<font color="#E5E5E5"> we will</font>

137
00:07:33,360 --> 00:07:40,019
start with some basic type synonyms<font color="#CCCCCC"> we</font>

138
00:07:36,539 --> 00:07:44,610
create a type<font color="#E5E5E5"> X</font><font color="#CCCCCC"> than underscore</font><font color="#E5E5E5"> t for</font>

139
00:07:40,019 --> 00:07:49,079
bit vectors of length<font color="#E5E5E5"> 64 then we define</font>

140
00:07:44,610 --> 00:07:53,279
a type<font color="#CCCCCC"> reg know which</font><font color="#E5E5E5"> is a type synonym</font>

141
00:07:49,079 --> 00:07:56,550
for the<font color="#CCCCCC"> built in type Adam the type</font><font color="#E5E5E5"> Adam</font>

142
00:07:53,279 --> 00:08:01,499
is a number which is exactly equal<font color="#CCCCCC"> to</font>

143
00:07:56,550 --> 00:08:04,409
the type variable<font color="#CCCCCC"> Adam type variables</font>

144
00:08:01,499 --> 00:08:09,539
are semantically marked<font color="#E5E5E5"> with single</font>

145
00:08:04,409 --> 00:08:14,429
<font color="#E5E5E5">quotes as in ml a constraint can be</font>

146
00:08:09,539 --> 00:08:17,219
<font color="#E5E5E5">attached to this type of cinema trim and</font>

147
00:08:14,429 --> 00:08:20,308
showing<font color="#CCCCCC"> Lassiter's only used when</font><font color="#E5E5E5"> we can</font>

148
00:08:17,219 --> 00:08:24,360
<font color="#CCCCCC">guarantee that</font><font color="#E5E5E5"> its value will between be</font>

149
00:08:20,309 --> 00:08:27,589
between 0<font color="#CCCCCC"> and</font><font color="#E5E5E5"> 31 sale supports a rich</font>

150
00:08:24,360 --> 00:08:31,529
variety of numeric types including range

151
00:08:27,589 --> 00:08:35,669
<font color="#E5E5E5">types which</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> system statistically</font>

152
00:08:31,529 --> 00:08:39,990
checked we can then define<font color="#CCCCCC"> at synonym</font>

153
00:08:35,669 --> 00:08:42,179
<font color="#E5E5E5">veg bits four bits</font><font color="#CCCCCC"> 5 we don't want to</font>

154
00:08:39,990 --> 00:08:45,389
manually<font color="#E5E5E5"> convert between reg bits and</font>

155
00:08:42,179 --> 00:08:48,209
<font color="#E5E5E5">reg</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> all the time so we define a</font>

156
00:08:45,389 --> 00:08:52,050
<font color="#E5E5E5">function that</font><font color="#CCCCCC"> maps between</font><font color="#E5E5E5"> them and</font>

157
00:08:48,209 --> 00:08:55,649
declare as a<font color="#CCCCCC"> caste which allows the type</font>

158
00:08:52,050 --> 00:08:56,949
checker to insert it where needed<font color="#E5E5E5"> by</font>

159
00:08:55,649 --> 00:08:59,829
<font color="#E5E5E5">default say</font>

160
00:08:56,950 --> 00:09:03,149
does not do any automatic casting except

161
00:08:59,829 --> 00:09:06,969
between basic numeric types when safe

162
00:09:03,149 --> 00:09:09,370
<font color="#E5E5E5">but to</font><font color="#CCCCCC"> allow idioms in I surrender</font>

163
00:09:06,970 --> 00:09:13,120
<font color="#E5E5E5">description documents sale supports</font>

164
00:09:09,370 --> 00:09:15,269
flexible user-defined<font color="#E5E5E5"> casts to ensure</font>

165
00:09:13,120 --> 00:09:18,339
that the constraint on the<font color="#CCCCCC"> Reg no type</font>

166
00:09:15,269 --> 00:09:24,959
synonym is satisfied<font color="#E5E5E5"> we return a</font>

167
00:09:18,339 --> 00:09:28,120
quantified<font color="#E5E5E5"> type now we set</font><font color="#CCCCCC"> up some basic</font>

168
00:09:24,959 --> 00:09:32,529
architectural state first creating a

169
00:09:28,120 --> 00:09:36,070
register of type<font color="#CCCCCC"> X</font><font color="#E5E5E5"> excellent underscore</font>

170
00:09:32,529 --> 00:09:40,149
<font color="#CCCCCC">T for both the program counter PC</font><font color="#E5E5E5"> and</font>

171
00:09:36,070 --> 00:09:42,459
the next program counter next<font color="#E5E5E5"> PC we</font>

172
00:09:40,149 --> 00:09:46,540
define the<font color="#CCCCCC"> general-purpose registers</font><font color="#E5E5E5"> as</font>

173
00:09:42,459 --> 00:09:49,959
a<font color="#E5E5E5"> vector of 32 X then underscore</font><font color="#CCCCCC"> T bit</font>

174
00:09:46,540 --> 00:09:52,180
vectors the<font color="#CCCCCC"> deck keyword isn't important</font>

175
00:09:49,959 --> 00:09:56,199
in<font color="#E5E5E5"> this example but</font><font color="#CCCCCC"> sale supports two</font>

176
00:09:52,180 --> 00:09:58,510
different numbering<font color="#E5E5E5"> systems we then</font>

177
00:09:56,199 --> 00:10:00,939
define<font color="#CCCCCC"> a getter and setter</font><font color="#E5E5E5"> for the</font>

178
00:09:58,510 --> 00:10:05,140
registers<font color="#CCCCCC"> which ensures that the zero</font>

179
00:10:00,940 --> 00:10:08,290
register is treated especially<font color="#E5E5E5"> in misc</font>

180
00:10:05,140 --> 00:10:09,750
<font color="#CCCCCC">five register</font><font color="#E5E5E5"> zero is always hard coded</font>

181
00:10:08,290 --> 00:10:13,480
to be<font color="#CCCCCC"> zero</font>

182
00:10:09,750 --> 00:10:17,339
finally over<font color="#CCCCCC"> we overload both the read</font>

183
00:10:13,480 --> 00:10:20,620
<font color="#E5E5E5">of X and white</font><font color="#CCCCCC"> dough UX functions as</font>

184
00:10:17,339 --> 00:10:24,339
simply<font color="#E5E5E5"> X this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to write</font>

185
00:10:20,620 --> 00:10:29,050
registers as XR equals value<font color="#E5E5E5"> and read</font>

186
00:10:24,339 --> 00:10:31,980
registers as value equals<font color="#CCCCCC"> XR sale</font>

187
00:10:29,050 --> 00:10:35,939
supports flexible<font color="#CCCCCC"> ad hoc overloading</font><font color="#E5E5E5"> and</font>

188
00:10:31,980 --> 00:10:39,130
has an impressive<font color="#E5E5E5"> language in</font>

189
00:10:35,940 --> 00:10:45,310
assignments<font color="#E5E5E5"> with the aim of allowing</font>

190
00:10:39,130 --> 00:10:48,579
<font color="#CCCCCC">pseudo code like definitions we also</font>

191
00:10:45,310 --> 00:10:51,040
give a function<font color="#E5E5E5"> men are for reading</font>

192
00:10:48,579 --> 00:10:53,649
memory<font color="#E5E5E5"> this function just points</font><font color="#CCCCCC"> to a</font>

193
00:10:51,040 --> 00:10:56,079
bulletin we have<font color="#E5E5E5"> to find elsewhere</font>

194
00:10:53,649 --> 00:10:59,290
note that functions in sale are

195
00:10:56,079 --> 00:11:02,410
annotated<font color="#CCCCCC"> with effects the effect system</font>

196
00:10:59,290 --> 00:11:04,540
is quite<font color="#E5E5E5"> basic but</font><font color="#CCCCCC"> indicates whether or</font>

197
00:11:02,410 --> 00:11:08,490
not functions read or<font color="#E5E5E5"> write registers</font>

198
00:11:04,540 --> 00:11:13,290
<font color="#CCCCCC">are Meg & R and W</font><font color="#E5E5E5"> reg</font>

199
00:11:08,490 --> 00:11:15,240
read and like memory<font color="#E5E5E5"> our mem and</font><font color="#CCCCCC"> wmm as</font>

200
00:11:13,290 --> 00:11:18,959
well as the<font color="#E5E5E5"> host of other concurrency</font>

201
00:11:15,240 --> 00:11:21,390
model<font color="#E5E5E5"> related effects they also indicate</font>

202
00:11:18,960 --> 00:11:25,020
whether<font color="#CCCCCC"> function those exceptions</font><font color="#E5E5E5"> or has</font>

203
00:11:21,390 --> 00:11:31,230
other<font color="#E5E5E5"> non-local control flow the</font><font color="#CCCCCC"> xscape</font>

204
00:11:25,020 --> 00:11:34,350
effects<font color="#E5E5E5"> for example it is</font><font color="#CCCCCC"> common when</font>

205
00:11:31,230 --> 00:11:36,990
defining architecture specifications<font color="#E5E5E5"> to</font>

206
00:11:34,350 --> 00:11:39,529
break instruction semantics down into

207
00:11:36,990 --> 00:11:43,110
separate<font color="#E5E5E5"> functions that handle decoding</font>

208
00:11:39,529 --> 00:11:45,680
possibly<font color="#E5E5E5"> even in several stages into</font>

209
00:11:43,110 --> 00:11:48,890
<font color="#E5E5E5">custom intermediate data types and</font>

210
00:11:45,680 --> 00:11:52,529
executing the decoded instructions

211
00:11:48,890 --> 00:11:54,420
however<font color="#E5E5E5"> it is often desirable to group</font>

212
00:11:52,529 --> 00:11:56,970
the relevant parts of these functions

213
00:11:54,420 --> 00:11:59,130
and data<font color="#E5E5E5"> types together in one place</font><font color="#CCCCCC"> as</font>

214
00:11:56,970 --> 00:12:03,000
they<font color="#E5E5E5"> would usually be</font><font color="#CCCCCC"> found in an</font>

215
00:11:59,130 --> 00:12:05,870
architecture<font color="#E5E5E5"> reference manual to support</font>

216
00:12:03,000 --> 00:12:09,810
<font color="#E5E5E5">this sales support scattered definitions</font>

217
00:12:05,870 --> 00:12:12,900
<font color="#E5E5E5">we first give types for the execute and</font>

218
00:12:09,810 --> 00:12:16,290
decode functions<font color="#E5E5E5"> and declare them as</font>

219
00:12:12,900 --> 00:12:23,970
scattered functions as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the ast</font>

220
00:12:16,290 --> 00:12:27,959
<font color="#E5E5E5">Union now we provide the causes for</font><font color="#CCCCCC"> the</font>

221
00:12:23,970 --> 00:12:31,529
add a media<font color="#CCCCCC"> ast</font><font color="#E5E5E5"> type as well as</font><font color="#CCCCCC"> its</font>

222
00:12:27,959 --> 00:12:35,910
execute and download causes we can

223
00:12:31,529 --> 00:12:38,820
define the decode and the decode causes

224
00:12:35,910 --> 00:12:41,010
we can define the decode<font color="#CCCCCC"> function by</font>

225
00:12:38,820 --> 00:12:44,690
<font color="#E5E5E5">direct the pattern matching on the bit</font>

226
00:12:41,010 --> 00:12:47,850
<font color="#CCCCCC">vector representing the instruction</font>

227
00:12:44,690 --> 00:12:52,130
<font color="#CCCCCC">sales supports vector concatenation</font>

228
00:12:47,850 --> 00:12:55,860
patterns for example<font color="#CCCCCC"> the symbol @ is the</font>

229
00:12:52,130 --> 00:12:59,660
vector concatenation operator<font color="#E5E5E5"> and uses</font>

230
00:12:55,860 --> 00:13:03,870
the types provided bits<font color="#E5E5E5"> 12 and reg bits</font>

231
00:12:59,660 --> 00:13:08,189
2d structure the vector in it in the

232
00:13:03,870 --> 00:13:11,550
<font color="#E5E5E5">correct way we use the ext</font><font color="#CCCCCC"> S library</font>

233
00:13:08,190 --> 00:13:16,740
function that signs us that sign extends

234
00:13:11,550 --> 00:13:20,390
its argument now we do the<font color="#E5E5E5"> same thing</font>

235
00:13:16,740 --> 00:13:20,390
for the load double instruction

236
00:13:21,050 --> 00:13:27,229
finally we define the full through case

237
00:13:23,910 --> 00:13:29,420
for the decode function<font color="#CCCCCC"> and end all our</font>

238
00:13:27,230 --> 00:13:32,460
scattered definitions

239
00:13:29,420 --> 00:13:35,550
note that the causes<font color="#E5E5E5"> in a scatter</font>

240
00:13:32,460 --> 00:13:41,610
<font color="#CCCCCC">function will be matched in</font><font color="#E5E5E5"> the order</font>

241
00:13:35,550 --> 00:13:44,790
they appear<font color="#E5E5E5"> in the file</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sale</font><font color="#CCCCCC"> back</font>

242
00:13:41,610 --> 00:13:47,190
<font color="#CCCCCC">end is</font><font color="#E5E5E5"> written in no camel which is an</font>

243
00:13:44,790 --> 00:13:50,849
impure functional programming language

244
00:13:47,190 --> 00:13:52,950
<font color="#E5E5E5">like Python functional languages are</font>

245
00:13:50,850 --> 00:13:55,290
<font color="#E5E5E5">based on mathematical</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> as</font>

246
00:13:52,950 --> 00:13:58,620
opposed to procedural languages like C

247
00:13:55,290 --> 00:14:03,290
which depends on flow statements such as

248
00:13:58,620 --> 00:14:06,060
if or for<font color="#E5E5E5"> loops the back end generates</font>

249
00:14:03,290 --> 00:14:09,300
executable emulators in C and<font color="#E5E5E5"> O camel</font>

250
00:14:06,060 --> 00:14:11,939
and<font color="#E5E5E5"> their improver definitions from the</font>

251
00:14:09,300 --> 00:14:15,270
<font color="#CCCCCC">sale model one of the highlights of O</font>

252
00:14:11,940 --> 00:14:19,200
camel is its parametric polymorphism<font color="#CCCCCC"> and</font>

253
00:14:15,270 --> 00:14:21,930
type inference<font color="#E5E5E5"> which allows operations</font>

254
00:14:19,200 --> 00:14:25,560
to<font color="#E5E5E5"> be written independently of the type</font>

255
00:14:21,930 --> 00:14:28,349
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> elements this is useful for</font>

256
00:14:25,560 --> 00:14:30,959
architectures like<font color="#CCCCCC"> RISC five and have</font>

257
00:14:28,350 --> 00:14:34,260
multiple<font color="#CCCCCC"> sizes of in that have multiple</font>

258
00:14:30,960 --> 00:14:39,240
<font color="#CCCCCC">sizes</font><font color="#E5E5E5"> of instruction since a single</font>

259
00:14:34,260 --> 00:14:44,130
operation can<font color="#CCCCCC"> be used on all sizes</font><font color="#E5E5E5"> but</font>

260
00:14:39,240 --> 00:14:46,700
how about<font color="#E5E5E5"> a small example to show you a</font>

261
00:14:44,130 --> 00:14:46,700
<font color="#E5E5E5">better vocal</font>

262
00:14:53,529 --> 00:14:57,130
with all the cable

263
00:14:59,059 --> 00:15:04,299
<font color="#CCCCCC">oh the laptops</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> answer battery</font>

264
00:15:12,649 --> 00:15:21,589
technical problems we can

265
00:15:42,350 --> 00:15:46,400
looks like it<font color="#E5E5E5"> must occur nicely</font>

266
00:15:47,050 --> 00:15:55,650
I think it turned off

267
00:16:03,290 --> 00:16:15,280
maybe you can take<font color="#CCCCCC"> some questions</font><font color="#E5E5E5"> or</font>

268
00:16:05,600 --> 00:16:15,280
<font color="#E5E5E5">something yeah I mean buddy</font>

269
00:16:15,400 --> 00:16:21,829
yeah it's rebooting at the moment<font color="#E5E5E5"> I can</font>

270
00:16:19,190 --> 00:16:37,070
take questions<font color="#E5E5E5"> for what's gone through</font>

271
00:16:21,830 --> 00:16:41,900
so<font color="#CCCCCC"> far I guess so</font>

272
00:16:37,070 --> 00:16:46,160
the question was my effects model or the

273
00:16:41,900 --> 00:16:51,140
sale effect model says reading<font color="#E5E5E5"> and</font>

274
00:16:46,160 --> 00:16:58,370
address of memory doesn't need just say

275
00:16:51,140 --> 00:17:01,400
a<font color="#E5E5E5"> Pacific address I'm not this best</font>

276
00:16:58,370 --> 00:17:04,490
expert on sale<font color="#E5E5E5"> I can put you</font><font color="#CCCCCC"> in touch</font>

277
00:17:01,400 --> 00:17:07,550
with Peter so well who's the guy running

278
00:17:04,490 --> 00:17:12,230
Cambridge<font color="#CCCCCC"> I can give you his email</font>

279
00:17:07,550 --> 00:17:14,560
afterwards<font color="#CCCCCC"> but I don't know at the</font>

280
00:17:12,230 --> 00:17:14,560
<font color="#CCCCCC">moment</font>

281
00:17:22,190 --> 00:17:25,540
any other questions

282
00:17:43,540 --> 00:17:48,909
about you<font color="#E5E5E5"> say the introduction</font>

283
00:17:55,970 --> 00:18:07,650
yeah<font color="#E5E5E5"> so the question</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> how does the</font>

284
00:18:04,160 --> 00:18:11,550
specification being missing in a formal

285
00:18:07,650 --> 00:18:18,550
language<font color="#CCCCCC"> fit in so sale is the formal</font>

286
00:18:11,550 --> 00:18:24,210
<font color="#CCCCCC">language it already generates stuff but</font>

287
00:18:18,550 --> 00:18:24,210
so that's the formal<font color="#CCCCCC"> language</font><font color="#E5E5E5"> sale is</font>

288
00:18:31,590 --> 00:18:42,570
yeah in sale so there'll be a<font color="#E5E5E5"> risk</font><font color="#CCCCCC"> five</font>

289
00:18:39,789 --> 00:18:45,730
definition written in the sale language

290
00:18:42,570 --> 00:18:49,960
which will<font color="#E5E5E5"> then be</font><font color="#CCCCCC"> taken through</font><font color="#E5E5E5"> oh</font>

291
00:18:45,730 --> 00:18:58,470
camel<font color="#CCCCCC"> into C gen</font><font color="#E5E5E5"> which I will come</font><font color="#CCCCCC"> into</font>

292
00:18:49,960 --> 00:19:02,669
in a moment yep it didn't appears the

293
00:18:58,470 --> 00:19:02,669
presentation<font color="#E5E5E5"> gods enough today I guess</font>

294
00:20:27,050 --> 00:20:37,680
so the question<font color="#E5E5E5"> was do I use more than</font>

295
00:20:31,080 --> 00:20:44,699
just GCC for the source code as opposed

296
00:20:37,680 --> 00:20:47,960
to<font color="#CCCCCC"> LLVM or another</font><font color="#E5E5E5"> compiler or didn't</font>

297
00:20:44,700 --> 00:20:47,960
<font color="#E5E5E5">think I fully understand what you mean</font>

298
00:20:55,220 --> 00:21:07,580
yes GCC<font color="#E5E5E5"> so the assembler used</font><font color="#CCCCCC"> is gas and</font>

299
00:21:03,470 --> 00:21:07,580
it fits into<font color="#CCCCCC"> Ben utils</font>

300
00:21:19,170 --> 00:21:33,570
<font color="#CCCCCC">Oh shall I carry</font><font color="#E5E5E5"> on I get technical</font>

301
00:21:27,150 --> 00:21:36,810
<font color="#E5E5E5">support to help so I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> show you a</font>

302
00:21:33,570 --> 00:21:37,379
example of some<font color="#E5E5E5"> a camel it's quite</font>

303
00:21:36,810 --> 00:21:40,980
simple

304
00:21:37,380 --> 00:21:44,310
it'll be<font color="#CCCCCC"> sourcing algorithm</font><font color="#E5E5E5"> I'm sure</font>

305
00:21:40,980 --> 00:21:49,520
we've all seen them before<font color="#CCCCCC"> but it will</font>

306
00:21:44,310 --> 00:21:53,460
<font color="#CCCCCC">demonstrate the polymorphic ability so</font>

307
00:21:49,520 --> 00:21:57,930
first it's going<font color="#E5E5E5"> to define the function</font>

308
00:21:53,460 --> 00:22:03,000
<font color="#E5E5E5">the sort algorithm and it's going to</font>

309
00:21:57,930 --> 00:22:08,370
have a list input<font color="#E5E5E5"> as shown and a list</font>

310
00:22:03,000 --> 00:22:10,560
output these will be<font color="#E5E5E5"> shown by two square</font>

311
00:22:08,370 --> 00:22:12,270
brackets<font color="#CCCCCC"> in</font><font color="#E5E5E5"> between with an arrow</font><font color="#CCCCCC"> in</font>

312
00:22:10,560 --> 00:22:16,610
between<font color="#E5E5E5"> the input coming before the</font>

313
00:22:12,270 --> 00:22:20,870
yellow<font color="#E5E5E5"> the output coming after the other</font>

314
00:22:16,610 --> 00:22:25,610
the function will<font color="#E5E5E5"> depend X onto one and</font>

315
00:22:20,870 --> 00:22:25,610
<font color="#E5E5E5">cause the</font><font color="#CCCCCC"> in insert function</font>

316
00:22:29,469 --> 00:22:36,529
the input<font color="#E5E5E5"> of the function can either be</font>

317
00:22:33,229 --> 00:22:43,399
a list of integers or<font color="#E5E5E5"> list of strings</font>

318
00:22:36,529 --> 00:22:47,599
<font color="#E5E5E5">this is the polymorphic ability</font><font color="#CCCCCC"> I'll</font>

319
00:22:43,399 --> 00:22:49,968
carry on<font color="#CCCCCC"> TCGA at</font><font color="#E5E5E5"> university my final</font>

320
00:22:47,599 --> 00:22:52,489
year project is to use this the sale

321
00:22:49,969 --> 00:22:53,689
description of risk<font color="#E5E5E5"> 5 to generate</font>

322
00:22:52,489 --> 00:22:56,959
<font color="#CCCCCC">low-level tools</font>

323
00:22:53,689 --> 00:22:59,809
namely assemblers and disassemblers for

324
00:22:56,959 --> 00:23:03,439
<font color="#E5E5E5">this I</font><font color="#CCCCCC"> am using C gen which is part of</font>

325
00:22:59,809 --> 00:23:06,139
the new tool chain<font color="#E5E5E5"> C gen is an open</font>

326
00:23:03,439 --> 00:23:08,359
<font color="#E5E5E5">source C</font><font color="#CCCCCC"> 4 you generate tools generator</font>

327
00:23:06,139 --> 00:23:11,109
which uses a framework to<font color="#E5E5E5"> generate</font>

328
00:23:08,359 --> 00:23:13,908
assemblers disassemblers and simulators

329
00:23:11,109 --> 00:23:16,668
the generator is written in scheme a

330
00:23:13,909 --> 00:23:22,659
functional<font color="#CCCCCC"> language like</font><font color="#E5E5E5"> Oh camel which</font>

331
00:23:16,669 --> 00:23:26,449
makes the conversion easier C gen ports

332
00:23:22,659 --> 00:23:30,549
to<font color="#CCCCCC"> Agra</font><font color="#E5E5E5"> new to canoe by adding a scheme</font>

333
00:23:26,449 --> 00:23:36,139
description to live<font color="#E5E5E5"> op codes which is</font>

334
00:23:30,549 --> 00:23:39,979
the canoes library of opcode operand

335
00:23:36,139 --> 00:23:44,418
codes<font color="#E5E5E5"> lip op codes can then be</font><font color="#CCCCCC"> used to</font>

336
00:23:39,979 --> 00:23:47,619
<font color="#E5E5E5">assemble or disassemble</font><font color="#CCCCCC"> C code using gdb</font>

337
00:23:44,419 --> 00:23:50,389
and<font color="#CCCCCC"> gas respectively</font>

338
00:23:47,619 --> 00:23:52,839
there are two steps<font color="#E5E5E5"> to create an</font>

339
00:23:50,389 --> 00:23:56,238
assembler and disassembler using<font color="#CCCCCC"> C gen</font>

340
00:23:52,839 --> 00:23:58,789
this<font color="#CCCCCC"> is first to connect C gen</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Bannu</font>

341
00:23:56,239 --> 00:24:01,099
<font color="#CCCCCC">tills</font><font color="#E5E5E5"> this will allow the new tools to</font>

342
00:23:58,789 --> 00:24:04,149
<font color="#E5E5E5">look for the framework files required</font>

343
00:24:01,099 --> 00:24:06,769
<font color="#E5E5E5">and generate the correct opcode files</font>

344
00:24:04,149 --> 00:24:10,158
the second step of course is to write

345
00:24:06,769 --> 00:24:12,619
the framework to connect ccheng to be

346
00:24:10,159 --> 00:24:15,589
new<font color="#E5E5E5"> tools the port name is needed to be</font>

347
00:24:12,619 --> 00:24:18,408
added<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a list of make files and</font>

348
00:24:15,589 --> 00:24:22,489
configure files the names of the

349
00:24:18,409 --> 00:24:25,159
required opcode files are added<font color="#CCCCCC"> to there</font>

350
00:24:22,489 --> 00:24:27,079
are<font color="#E5E5E5"> four main files in C gen which</font>

351
00:24:25,159 --> 00:24:30,559
contain the framework and additional

352
00:24:27,079 --> 00:24:35,019
information<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> an assembler for</font>

353
00:24:30,559 --> 00:24:38,479
<font color="#CCCCCC">risk</font><font color="#E5E5E5"> 5 these four files are risk 5 CPU</font>

354
00:24:35,019 --> 00:24:39,360
the main framework file<font color="#E5E5E5"> its listenin</font>

355
00:24:38,479 --> 00:24:43,170
scheme

356
00:24:39,360 --> 00:24:46,020
and is the focus<font color="#E5E5E5"> of this project risk</font>

357
00:24:43,170 --> 00:24:49,620
<font color="#CCCCCC">five</font><font color="#E5E5E5"> dot a</font><font color="#CCCCCC"> PC this</font><font color="#E5E5E5"> file contains</font>

358
00:24:46,020 --> 00:24:53,280
<font color="#E5E5E5">handlers for the scheme framework avi</font>

359
00:24:49,620 --> 00:24:56,129
CPU dot<font color="#E5E5E5"> C this file includes hooks</font>

360
00:24:53,280 --> 00:25:01,010
<font color="#E5E5E5">residency which has more information</font>

361
00:24:56,130 --> 00:25:06,240
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> hardware and</font><font color="#CCCCCC"> ISA and</font><font color="#E5E5E5"> finally</font>

362
00:25:01,010 --> 00:25:08,820
RV<font color="#E5E5E5"> CPU dot H the header file the main</font>

363
00:25:06,240 --> 00:25:12,810
file that I will be generating during

364
00:25:08,820 --> 00:25:17,490
this project<font color="#E5E5E5"> will be misc</font><font color="#CCCCCC"> v</font><font color="#E5E5E5"> dot CPU the</font>

365
00:25:12,810 --> 00:25:20,639
rest will be handwritten<font color="#CCCCCC"> C gem must</font><font color="#E5E5E5"> be</font>

366
00:25:17,490 --> 00:25:23,760
<font color="#E5E5E5">written in a specific order to work</font>

367
00:25:20,640 --> 00:25:28,800
which<font color="#E5E5E5"> I will go through when the</font>

368
00:25:23,760 --> 00:25:34,170
<font color="#CCCCCC">PowerPoint decides to work I'll start</font>

369
00:25:28,800 --> 00:25:38,669
<font color="#E5E5E5">off it starts every file starts every</font>

370
00:25:34,170 --> 00:25:42,830
misc v dot<font color="#E5E5E5"> CPU file or equivalent we'll</font>

371
00:25:38,670 --> 00:25:46,050
start with include simplified or Inc

372
00:25:42,830 --> 00:25:48,270
this includes the instruction macros for

373
00:25:46,050 --> 00:25:51,139
ganoub built the new tools which are

374
00:25:48,270 --> 00:25:56,280
<font color="#E5E5E5">used throughout the</font><font color="#CCCCCC"> rest of the file</font>

375
00:25:51,140 --> 00:25:58,050
<font color="#E5E5E5">it's then followed by define arch this</font>

376
00:25:56,280 --> 00:26:04,580
function names the architecture and

377
00:25:58,050 --> 00:26:08,280
defines the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> eNOS</font><font color="#E5E5E5"> of the architecture</font>

378
00:26:04,580 --> 00:26:11,220
define<font color="#E5E5E5"> is a is the next one which</font>

379
00:26:08,280 --> 00:26:16,379
defines the<font color="#E5E5E5"> bit size of the a si with</font>

380
00:26:11,220 --> 00:26:19,380
the<font color="#CCCCCC"> ISA and</font><font color="#E5E5E5"> then define CPU describes</font>

381
00:26:16,380 --> 00:26:25,200
the CPU family<font color="#E5E5E5"> an instruction and eNOS</font>

382
00:26:19,380 --> 00:26:29,070
<font color="#E5E5E5">again then define Mac this is the</font>

383
00:26:25,200 --> 00:26:32,090
function that<font color="#E5E5E5"> defines the machine define</font>

384
00:26:29,070 --> 00:26:35,460
unit<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> function that describes</font>

385
00:26:32,090 --> 00:26:39,270
the<font color="#E5E5E5"> model every machine must have a</font>

386
00:26:35,460 --> 00:26:43,500
model and every<font color="#E5E5E5"> model the unit the unit</font>

387
00:26:39,270 --> 00:26:45,990
will have<font color="#E5E5E5"> six sections issue which</font>

388
00:26:43,500 --> 00:26:47,360
describes the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> operations in</font>

389
00:26:45,990 --> 00:26:51,870
progress at once

390
00:26:47,360 --> 00:26:53,100
<font color="#E5E5E5">Don defines the latency state lists the</font>

391
00:26:51,870 --> 00:26:58,049
variable names

392
00:26:53,100 --> 00:27:01,490
and mode pairs<font color="#E5E5E5"> inputs the units of</font>

393
00:26:58,049 --> 00:27:05,039
inputs outputs<font color="#E5E5E5"> units of outputs and</font>

394
00:27:01,490 --> 00:27:09,660
finally profile action which is the RCL

395
00:27:05,039 --> 00:27:11,640
code for<font color="#CCCCCC"> function unit</font><font color="#E5E5E5"> modeling once</font>

396
00:27:09,660 --> 00:27:13,830
this is<font color="#E5E5E5"> done it's followed up by a</font>

397
00:27:11,640 --> 00:27:16,530
definition<font color="#CCCCCC"> of</font><font color="#E5E5E5"> P macros</font>

398
00:27:13,830 --> 00:27:20,879
these are<font color="#CCCCCC"> usually used for attributes</font>

399
00:27:16,530 --> 00:27:26,879
for the instructions<font color="#E5E5E5"> later on they are</font>

400
00:27:20,880 --> 00:27:29,730
also used<font color="#CCCCCC"> to simplify</font><font color="#E5E5E5"> the file this is</font>

401
00:27:26,880 --> 00:27:34,320
then followed<font color="#E5E5E5"> by define</font><font color="#CCCCCC"> hardware which</font>

402
00:27:29,730 --> 00:27:37,530
defines<font color="#E5E5E5"> the hardware simulated in the</font>

403
00:27:34,320 --> 00:27:42,750
program<font color="#E5E5E5"> this can include the program</font>

404
00:27:37,530 --> 00:27:45,840
counter<font color="#CCCCCC"> and other registers a</font><font color="#E5E5E5"> P macro</font>

405
00:27:42,750 --> 00:27:52,470
can be used to<font color="#E5E5E5"> define</font><font color="#CCCCCC"> the register names</font>

406
00:27:45,840 --> 00:27:55,230
<font color="#CCCCCC">if there are many DN F and</font><font color="#E5E5E5"> DF are the</font>

407
00:27:52,470 --> 00:28:00,470
functions<font color="#CCCCCC"> that describe the instruction</font>

408
00:27:55,230 --> 00:28:00,470
fields for registers and immediate

409
00:28:01,400 --> 00:28:13,039
<font color="#E5E5E5">define multi</font><font color="#CCCCCC"> field defines instruction</font>

410
00:28:07,320 --> 00:28:18,860
fields which have which<font color="#E5E5E5"> are made up of</font>

411
00:28:13,039 --> 00:28:21,720
<font color="#E5E5E5">unconnected bit fields define Offerman's</font>

412
00:28:18,860 --> 00:28:24,539
defines the upper bounds used in the

413
00:28:21,720 --> 00:28:30,169
instructions<font color="#CCCCCC"> it</font><font color="#E5E5E5"> requires an instruction</font>

414
00:28:24,539 --> 00:28:30,169
field then

415
00:28:32,200 --> 00:28:39,920
and finally defining the instructions

416
00:28:36,910 --> 00:28:42,920
this function defines the instruction

417
00:28:39,920 --> 00:28:45,770
<font color="#E5E5E5">format the instructions and</font><font color="#CCCCCC"> and sub use</font>

418
00:28:42,920 --> 00:28:51,590
<font color="#E5E5E5">the same bit format therefore it is</font>

419
00:28:45,770 --> 00:28:56,150
simply simple to<font color="#E5E5E5"> apply a P macro to the</font>

420
00:28:51,590 --> 00:28:59,649
<font color="#E5E5E5">format</font><font color="#CCCCCC"> the ins in the instructions</font><font color="#E5E5E5"> hash</font>

421
00:28:56,150 --> 00:29:04,100
<font color="#E5E5E5">B is used to define binary numbers</font>

422
00:28:59,650 --> 00:29:07,550
multiple functions<font color="#E5E5E5"> use attributes which</font>

423
00:29:04,100 --> 00:29:13,510
defines<font color="#E5E5E5"> the ISA and machine of the</font>

424
00:29:07,550 --> 00:29:16,760
instruction<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is shown by</font><font color="#CCCCCC"> base spices</font>

425
00:29:13,510 --> 00:29:19,540
once<font color="#E5E5E5"> this file is</font><font color="#CCCCCC"> written and</font><font color="#E5E5E5"> the basic</font>

426
00:29:16,760 --> 00:29:22,640
hooks are added to the other three files

427
00:29:19,540 --> 00:29:26,000
make stamp<font color="#E5E5E5"> followed by running and make</font>

428
00:29:22,640 --> 00:29:30,130
command in<font color="#CCCCCC"> Bannu tills can be used to</font>

429
00:29:26,000 --> 00:29:30,130
generate the assembler and disassembler

430
00:29:30,460 --> 00:29:36,260
to conclude being able to<font color="#E5E5E5"> generate an</font>

431
00:29:33,920 --> 00:29:40,190
assembler from the formal<font color="#CCCCCC"> specification</font>

432
00:29:36,260 --> 00:29:42,710
of an ISA would be very useful<font color="#E5E5E5"> the time</font>

433
00:29:40,190 --> 00:29:46,130
scale for process for processor

434
00:29:42,710 --> 00:29:49,210
development could<font color="#E5E5E5"> be significantly</font>

435
00:29:46,130 --> 00:29:51,230
reduced<font color="#E5E5E5"> if the definitions could be</font>

436
00:29:49,210 --> 00:29:53,750
generated automatically<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

437
00:29:51,230 --> 00:29:57,650
specification<font color="#CCCCCC"> but this is proved</font>

438
00:29:53,750 --> 00:29:59,330
difficult in the past<font color="#E5E5E5"> however advances</font>

439
00:29:57,650 --> 00:30:01,970
have been made<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> processor</font>

440
00:29:59,330 --> 00:30:04,879
specification language and the framework

441
00:30:01,970 --> 00:30:08,600
<font color="#E5E5E5">to generate assemblers disassemblers and</font>

442
00:30:04,880 --> 00:30:11,570
simulators so it's now possible<font color="#E5E5E5"> this is</font>

443
00:30:08,600 --> 00:30:13,909
just a status report<font color="#E5E5E5"> for my project but</font>

444
00:30:11,570 --> 00:30:19,610
<font color="#CCCCCC">just far from done</font><font color="#E5E5E5"> but there is a clear</font>

445
00:30:13,910 --> 00:30:23,320
<font color="#E5E5E5">aim and amend thank you for listening</font>

446
00:30:19,610 --> 00:30:23,320
[Applause]

447
00:30:24,089 --> 00:30:32,458
and I apologize about the technical

448
00:30:28,599 --> 00:30:32,458
problems yes

449
00:30:42,180 --> 00:30:46,010
<font color="#CCCCCC">well</font><font color="#E5E5E5"> can you speak up a</font><font color="#CCCCCC"> bit please</font>

450
00:30:52,929 --> 00:30:58,989
we don't have any figures<font color="#E5E5E5"> where I don't</font>

451
00:30:57,429 --> 00:31:01,919
<font color="#CCCCCC">think so</font><font color="#E5E5E5"> quite yet</font>

452
00:30:58,989 --> 00:31:01,919
<font color="#CCCCCC">three</font>

453
00:31:15,040 --> 00:31:32,620
<font color="#E5E5E5">they will keep a note of that so any</font>

454
00:31:22,000 --> 00:31:37,990
other questions we've looked into<font color="#E5E5E5"> Vera</font>

455
00:31:32,620 --> 00:31:40,810
log<font color="#E5E5E5"> a bit but I mean I don't mind</font>

456
00:31:37,990 --> 00:31:51,910
<font color="#E5E5E5">expanding into our dry programming for</font>

457
00:31:40,810 --> 00:31:53,980
future<font color="#E5E5E5"> projects I think</font>

458
00:31:51,910 --> 00:31:57,510
there's no more questions<font color="#CCCCCC"> I think that's</font>

459
00:31:53,980 --> 00:31:57,510
the end thank<font color="#E5E5E5"> you</font>

460
00:31:58,740 --> 00:32:03,440
[Applause]

