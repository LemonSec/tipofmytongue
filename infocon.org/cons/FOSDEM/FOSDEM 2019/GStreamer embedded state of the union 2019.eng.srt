1
00:00:06,260 --> 00:00:12,180
so it's time<font color="#E5E5E5"> to start</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> with again</font>

2
00:00:10,260 --> 00:00:13,620
additionally<font color="#E5E5E5"> talk about this time and</font>

3
00:00:12,180 --> 00:00:24,270
beta State of the Union

4
00:00:13,620 --> 00:00:25,680
please welcome<font color="#E5E5E5"> odv hello everyone so</font>

5
00:00:24,270 --> 00:00:27,180
this<font color="#E5E5E5"> is a bit of a follow up to</font><font color="#CCCCCC"> Tim</font>

6
00:00:25,680 --> 00:00:30,810
stock<font color="#E5E5E5"> for those who were there an hour</font>

7
00:00:27,180 --> 00:00:33,769
ago<font color="#CCCCCC"> and but this time I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

8
00:00:30,810 --> 00:00:36,870
really focus<font color="#CCCCCC"> on what's new</font><font color="#E5E5E5"> for embedded</font>

9
00:00:33,769 --> 00:00:39,960
users use cases

10
00:00:36,870 --> 00:00:42,570
so first Who am I put<font color="#E5E5E5"> introduction my</font>

11
00:00:39,960 --> 00:00:45,000
<font color="#E5E5E5">name is Olivia kite I'm Vinny de</font>

12
00:00:42,570 --> 00:00:50,460
streamer contributor<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Whopper for 12</font>

13
00:00:45,000 --> 00:00:54,930
years now<font color="#CCCCCC"> at kelabra since 2007</font><font color="#E5E5E5"> first I</font>

14
00:00:50,460 --> 00:00:55,500
<font color="#E5E5E5">started doing video calls on using</font>

15
00:00:54,930 --> 00:00:59,870
telepathy

16
00:00:55,500 --> 00:01:02,789
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> meego memo platform at Nokia and</font>

17
00:00:59,870 --> 00:01:04,199
since then we have<font color="#CCCCCC"> most diversified to</font>

18
00:01:02,789 --> 00:01:08,340
<font color="#CCCCCC">BC everything</font><font color="#E5E5E5"> that you can do with</font>

19
00:01:04,199 --> 00:01:12,869
<font color="#CCCCCC">gstreamer from video editing to embedded</font>

20
00:01:08,340 --> 00:01:14,759
systems to transcoding cloud systems<font color="#E5E5E5"> but</font>

21
00:01:12,869 --> 00:01:17,490
a lot<font color="#CCCCCC"> of the work that I've been doing</font>

22
00:01:14,759 --> 00:01:20,190
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the last couple</font><font color="#E5E5E5"> years has been</font><font color="#CCCCCC"> a nun</font>

23
00:01:17,490 --> 00:01:24,089
embedded systems<font color="#E5E5E5"> well this is why I'm</font>

24
00:01:20,190 --> 00:01:26,399
<font color="#E5E5E5">going to talk about them today</font><font color="#CCCCCC"> just a</font>

25
00:01:24,090 --> 00:01:28,770
quick introduction<font color="#E5E5E5"> what kind of embedded</font>

26
00:01:26,399 --> 00:01:33,060
systems<font color="#CCCCCC"> use gstreamer</font><font color="#E5E5E5"> and the answer is</font>

27
00:01:28,770 --> 00:01:34,770
a lot everything<font color="#CCCCCC"> that does</font><font color="#E5E5E5"> video audio</font>

28
00:01:33,060 --> 00:01:36,420
and<font color="#CCCCCC"> a myth systems you will find you</font>

29
00:01:34,770 --> 00:01:39,449
streamer<font color="#E5E5E5"> in many many many products</font>

30
00:01:36,420 --> 00:01:41,970
<font color="#E5E5E5">there sometimes we're really surprised</font>

31
00:01:39,450 --> 00:01:45,509
to find them<font color="#E5E5E5"> so for example in the TV</font>

32
00:01:41,970 --> 00:01:48,390
space<font color="#E5E5E5"> it's pretty pretty pretty big on</font>

33
00:01:45,509 --> 00:01:50,550
my slide you have some some LG TV some

34
00:01:48,390 --> 00:01:52,470
Samsung TVs<font color="#CCCCCC"> a lot of these actually have</font>

35
00:01:50,550 --> 00:01:54,360
this<font color="#CCCCCC"> trimmer on the inside on the</font><font color="#E5E5E5"> smart</font>

36
00:01:52,470 --> 00:01:57,750
side on the<font color="#E5E5E5"> top left you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

37
00:01:54,360 --> 00:02:00,149
Xfinity<font color="#E5E5E5"> box from Comcast for those who</font>

38
00:01:57,750 --> 00:02:01,770
are not<font color="#E5E5E5"> from America</font><font color="#CCCCCC"> Comcast is the</font>

39
00:02:00,149 --> 00:02:04,140
biggest cable<font color="#E5E5E5"> company in the</font><font color="#CCCCCC"> world and</font>

40
00:02:01,770 --> 00:02:06,569
every set-top box that they ship is

41
00:02:04,140 --> 00:02:10,229
Linux box with<font color="#CCCCCC"> gstreamer for all the</font>

42
00:02:06,569 --> 00:02:12,629
playback<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then there's a bunch of</font>

43
00:02:10,229 --> 00:02:15,750
others<font color="#E5E5E5"> but unless it's you you you view</font>

44
00:02:12,629 --> 00:02:18,179
which is a British<font color="#E5E5E5"> company more set-top</font>

45
00:02:15,750 --> 00:02:21,329
box<font color="#E5E5E5"> a lot of the TV space</font>

46
00:02:18,180 --> 00:02:24,060
has it on<font color="#E5E5E5"> the end point</font><font color="#CCCCCC"> but now actually</font>

47
00:02:21,329 --> 00:02:27,390
<font color="#CCCCCC">a lot of the recently it's been growing</font>

48
00:02:24,060 --> 00:02:29,519
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> in the production side as they've</font>

49
00:02:27,390 --> 00:02:32,219
been transitioning from hardware and

50
00:02:29,519 --> 00:02:35,730
<font color="#E5E5E5">FPGAs to software based workflows and</font>

51
00:02:32,219 --> 00:02:37,439
<font color="#CCCCCC">gstreamer</font><font color="#E5E5E5"> as you know</font><font color="#CCCCCC"> traction there and</font>

52
00:02:35,730 --> 00:02:39,719
find entertainment another big one<font color="#CCCCCC"> that</font>

53
00:02:37,439 --> 00:02:41,670
<font color="#E5E5E5">people interact</font><font color="#CCCCCC"> with all the time so in</font>

54
00:02:39,719 --> 00:02:44,549
a lot of<font color="#E5E5E5"> planes</font><font color="#CCCCCC"> almost all the planes</font>

55
00:02:41,670 --> 00:02:48,000
<font color="#CCCCCC">the modern</font><font color="#E5E5E5"> planes these days by</font><font color="#CCCCCC"> modern I</font>

56
00:02:44,549 --> 00:02:49,799
<font color="#E5E5E5">mean from the last 10 to 15 years</font><font color="#CCCCCC"> you go</font>

57
00:02:48,000 --> 00:02:54,090
and then inside<font color="#CCCCCC"> entertainment</font><font color="#E5E5E5"> every time</font>

58
00:02:49,799 --> 00:02:55,620
you play a movie that's<font color="#CCCCCC"> GStreamer even</font>

59
00:02:54,090 --> 00:02:57,450
in<font color="#E5E5E5"> the space station</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a really</font>

60
00:02:55,620 --> 00:03:01,470
<font color="#E5E5E5">cool one that's one of my favorite I</font>

61
00:02:57,450 --> 00:03:03,000
show it<font color="#CCCCCC"> every time it's a</font><font color="#E5E5E5"> little camera</font>

62
00:03:01,470 --> 00:03:06,169
<font color="#E5E5E5">that floats inside the space station</font>

63
00:03:03,000 --> 00:03:12,719
made by the<font color="#E5E5E5"> Japanese</font><font color="#CCCCCC"> space agency</font><font color="#E5E5E5"> and</font>

64
00:03:06,169 --> 00:03:14,219
that has<font color="#CCCCCC"> gstreamer inside so</font><font color="#E5E5E5"> I spoke</font>

65
00:03:12,719 --> 00:03:16,769
about<font color="#E5E5E5"> these but there's also a bunch of</font>

66
00:03:14,219 --> 00:03:18,840
other devices like<font color="#E5E5E5"> security cameras</font><font color="#CCCCCC"> a</font>

67
00:03:16,769 --> 00:03:28,560
lot<font color="#E5E5E5"> of the high-end ones have</font><font color="#CCCCCC"> gstreamer</font>

68
00:03:18,840 --> 00:03:30,359
on the inside yes<font color="#CCCCCC"> we're so it depends on</font>

69
00:03:28,560 --> 00:03:32,819
<font color="#E5E5E5">all the new generations</font><font color="#CCCCCC"> are 1.0</font>

70
00:03:30,359 --> 00:03:34,769
generally like<font color="#E5E5E5"> the ones that fly in in</font>

71
00:03:32,819 --> 00:03:36,478
the sky in the<font color="#E5E5E5"> planes</font><font color="#CCCCCC"> there these</font><font color="#E5E5E5"> are</font>

72
00:03:34,769 --> 00:03:38,449
<font color="#E5E5E5">probably from</font><font color="#CCCCCC"> ten years</font><font color="#E5E5E5"> ago so</font><font color="#CCCCCC"> that's</font>

73
00:03:36,479 --> 00:03:42,329
probably whatever<font color="#E5E5E5"> version they deployed</font>

74
00:03:38,449 --> 00:03:45,299
in the very past<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> example this is</font>

75
00:03:42,329 --> 00:03:50,040
one one stand something<font color="#E5E5E5"> that's pretty</font>

76
00:03:45,299 --> 00:03:52,229
recent<font color="#CCCCCC"> Smart TVs they actually some of</font>

77
00:03:50,040 --> 00:03:55,409
them<font color="#CCCCCC"> are</font><font color="#E5E5E5"> actually quite like the Comcast</font>

78
00:03:52,229 --> 00:03:56,790
guys around<font color="#E5E5E5"> 114 as far as I know so</font>

79
00:03:55,409 --> 00:03:58,739
there's a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> actually they</font>

80
00:03:56,790 --> 00:04:00,989
keep up<font color="#E5E5E5"> because they want</font><font color="#CCCCCC"> to deploy</font><font color="#E5E5E5"> new</font>

81
00:03:58,739 --> 00:04:03,509
<font color="#E5E5E5">features right they need the newer - and</font>

82
00:04:00,989 --> 00:04:07,680
then you were<font color="#E5E5E5"> hls features so they have</font>

83
00:04:03,509 --> 00:04:09,149
an<font color="#CCCCCC"> incentive to</font><font color="#E5E5E5"> keep up and they have</font>

84
00:04:07,680 --> 00:04:10,680
like rapid deployment and<font color="#E5E5E5"> all these</font>

85
00:04:09,150 --> 00:04:13,769
things in this<font color="#CCCCCC"> industry now it's</font><font color="#E5E5E5"> not</font>

86
00:04:10,680 --> 00:04:15,239
like especially<font color="#E5E5E5"> in the TVs</font><font color="#CCCCCC"> Indic they</font>

87
00:04:13,769 --> 00:04:20,039
came operator they really want to deploy

88
00:04:15,239 --> 00:04:21,149
<font color="#E5E5E5">new features very quickly so I was</font>

89
00:04:20,039 --> 00:04:22,620
saying<font color="#E5E5E5"> there's all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these but</font><font color="#CCCCCC"> they</font>

90
00:04:21,149 --> 00:04:24,840
also a bunch<font color="#E5E5E5"> of others like other</font>

91
00:04:22,620 --> 00:04:26,820
industrial equipment also<font color="#E5E5E5"> that you don't</font>

92
00:04:24,840 --> 00:04:29,669
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> but they process video</font><font color="#CCCCCC"> in</font>

93
00:04:26,820 --> 00:04:31,889
there and they was<font color="#CCCCCC"> gstreamer very often</font>

94
00:04:29,669 --> 00:04:33,659
because it's on many

95
00:04:31,889 --> 00:04:34,979
embedded chips when you buy them<font color="#E5E5E5"> this</font>

96
00:04:33,659 --> 00:04:38,520
trimmer is the<font color="#E5E5E5"> framework that comes</font>

97
00:04:34,979 --> 00:04:42,508
<font color="#CCCCCC">already working if you buy eggs eiling's</font>

98
00:04:38,520 --> 00:04:44,520
<font color="#E5E5E5">FPGA that have a video encoder</font><font color="#CCCCCC"> there</font>

99
00:04:42,509 --> 00:04:47,939
<font color="#CCCCCC">while</font><font color="#E5E5E5"> the framework that</font><font color="#CCCCCC"> silence enables</font>

100
00:04:44,520 --> 00:04:51,628
<font color="#E5E5E5">is</font><font color="#CCCCCC"> GStreamer so it's the quickest</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to</font>

101
00:04:47,939 --> 00:04:53,189
<font color="#E5E5E5">get a working</font><font color="#CCCCCC"> product so I'll give a</font>

102
00:04:51,629 --> 00:04:55,680
little summary of<font color="#E5E5E5"> the thing that</font><font color="#CCCCCC"> we have</font>

103
00:04:53,189 --> 00:04:59,819
done<font color="#CCCCCC"> that Tim hasn't covered that are</font>

104
00:04:55,680 --> 00:05:01,620
really<font color="#CCCCCC"> specific to</font><font color="#E5E5E5"> embedded first a lot</font>

105
00:04:59,819 --> 00:05:04,680
of work has happened again this<font color="#E5E5E5"> year</font>

106
00:05:01,620 --> 00:05:06,810
<font color="#E5E5E5">around video for</font><font color="#CCCCCC"> Linux codec support</font><font color="#E5E5E5"> so</font>

107
00:05:04,680 --> 00:05:11,120
vo for Linux is the<font color="#E5E5E5"> Linux kernel API</font>

108
00:05:06,810 --> 00:05:14,370
<font color="#E5E5E5">that is used for things</font><font color="#CCCCCC"> that have a cue</font>

109
00:05:11,120 --> 00:05:16,469
so video encoders video decoders amongst

110
00:05:14,370 --> 00:05:19,919
other things displaying things<font color="#E5E5E5"> capturing</font>

111
00:05:16,469 --> 00:05:22,020
<font color="#CCCCCC">from a</font><font color="#E5E5E5"> camera some display devices some</font>

112
00:05:19,919 --> 00:05:23,580
other video processing<font color="#E5E5E5"> devices scalars</font>

113
00:05:22,020 --> 00:05:26,310
and things<font color="#E5E5E5"> like that that are</font><font color="#CCCCCC"> nothing</font>

114
00:05:23,580 --> 00:05:29,669
<font color="#CCCCCC">the display paths that</font><font color="#E5E5E5"> are used in</font><font color="#CCCCCC"> the</font>

115
00:05:26,310 --> 00:05:32,009
<font color="#CCCCCC">memories</font><font color="#E5E5E5"> memory mode so there's a lot</font><font color="#CCCCCC"> of</font>

116
00:05:29,669 --> 00:05:36,270
these but a big part<font color="#E5E5E5"> is video encoders</font>

117
00:05:32,009 --> 00:05:38,430
and decoders<font color="#CCCCCC"> in the last year we've</font>

118
00:05:36,270 --> 00:05:41,909
merged the<font color="#CCCCCC"> HCV C encoder and decoder</font>

119
00:05:38,430 --> 00:05:46,139
support we have<font color="#E5E5E5"> an JPEG encoder</font><font color="#CCCCCC"> a</font>

120
00:05:41,909 --> 00:05:48,060
<font color="#E5E5E5">plug-in and a VI codec which is kind of</font>

121
00:05:46,139 --> 00:05:50,639
interesting<font color="#E5E5E5"> because it's not a useful</font>

122
00:05:48,060 --> 00:05:53,460
<font color="#CCCCCC">coating at all it's</font><font color="#E5E5E5"> only to be able</font><font color="#CCCCCC"> to</font>

123
00:05:50,639 --> 00:05:56,639
test the kernel infrastructure so it's a

124
00:05:53,460 --> 00:05:58,109
fake codec<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> implemented in</font>

125
00:05:56,639 --> 00:06:00,719
software in the kernel to be able<font color="#E5E5E5"> to</font>

126
00:05:58,110 --> 00:06:02,399
test<font color="#E5E5E5"> the whole codec infrastructure</font>

127
00:06:00,719 --> 00:06:06,509
inside the kernel without having to deal

128
00:06:02,399 --> 00:06:08,729
with<font color="#E5E5E5"> the actual hardware</font><font color="#CCCCCC"> another nice</font>

129
00:06:06,509 --> 00:06:11,370
<font color="#E5E5E5">feature that especially on the camera</font>

130
00:06:08,729 --> 00:06:13,830
side<font color="#E5E5E5"> some cameras took like seconds to</font>

131
00:06:11,370 --> 00:06:14,819
probe<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> enumerated a bunch of</font>

132
00:06:13,830 --> 00:06:17,219
<font color="#E5E5E5">things that we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> really need to</font>

133
00:06:14,819 --> 00:06:20,009
<font color="#E5E5E5">enumerate so</font><font color="#CCCCCC"> Anika</font><font color="#E5E5E5"> has done a lot</font><font color="#CCCCCC"> of</font>

134
00:06:17,219 --> 00:06:22,620
<font color="#E5E5E5">work and now the device probing is</font>

135
00:06:20,009 --> 00:06:24,509
instant and almost all<font color="#E5E5E5"> hardware so you</font>

136
00:06:22,620 --> 00:06:29,460
<font color="#CCCCCC">can get the list</font><font color="#E5E5E5"> of all</font><font color="#CCCCCC"> the devices and</font>

137
00:06:24,509 --> 00:06:31,830
<font color="#CCCCCC">the relevant abilities last year</font><font color="#E5E5E5"> I</font>

138
00:06:29,460 --> 00:06:34,409
talked<font color="#E5E5E5"> about stable element names for</font>

139
00:06:31,830 --> 00:06:37,050
encoders and decoders<font color="#E5E5E5"> so originally for</font>

140
00:06:34,409 --> 00:06:39,060
video for<font color="#CCCCCC"> Linux elements in gstreamer</font><font color="#E5E5E5"> we</font>

141
00:06:37,050 --> 00:06:40,740
were generating<font color="#CCCCCC"> a new element</font><font color="#E5E5E5"> name every</font>

142
00:06:39,060 --> 00:06:42,209
time<font color="#CCCCCC"> a</font><font color="#E5E5E5"> device would pop up</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> would</font>

143
00:06:40,740 --> 00:06:43,949
<font color="#E5E5E5">connect in the camera and</font><font color="#CCCCCC"> the new</font>

144
00:06:42,209 --> 00:06:45,240
element<font color="#E5E5E5"> a new camera a new encoder and</font>

145
00:06:43,949 --> 00:06:46,860
<font color="#E5E5E5">your</font><font color="#CCCCCC"> and</font>

146
00:06:45,240 --> 00:06:49,410
the element name<font color="#E5E5E5"> would change would</font>

147
00:06:46,860 --> 00:06:51,180
appear with a new name and which means

148
00:06:49,410 --> 00:06:52,889
<font color="#E5E5E5">that once a minute system every time you</font>

149
00:06:51,180 --> 00:06:55,169
<font color="#CCCCCC">rebooted</font><font color="#E5E5E5"> the element would have</font>

150
00:06:52,889 --> 00:06:57,240
different<font color="#CCCCCC"> names</font><font color="#E5E5E5"> which is good which</font><font color="#CCCCCC"> is</font>

151
00:06:55,169 --> 00:07:00,060
okay if you're using like play bin and

152
00:06:57,240 --> 00:07:01,319
it's a auto-generated pipeline because

153
00:07:00,060 --> 00:07:02,729
<font color="#CCCCCC">you don't care about the name but if</font>

154
00:07:01,319 --> 00:07:04,919
you're doing<font color="#E5E5E5"> pipelines by hand it was a</font>

155
00:07:02,729 --> 00:07:06,750
bit annoying<font color="#E5E5E5"> so now we also we have</font>

156
00:07:04,919 --> 00:07:10,349
these<font color="#CCCCCC"> still</font><font color="#E5E5E5"> but we also have a set of</font>

157
00:07:06,750 --> 00:07:12,000
elements<font color="#E5E5E5"> that have static</font><font color="#CCCCCC"> names</font><font color="#E5E5E5"> and then</font>

158
00:07:10,349 --> 00:07:15,210
you<font color="#E5E5E5"> give</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the device so you can</font>

159
00:07:12,000 --> 00:07:16,680
control<font color="#E5E5E5"> it more manually</font><font color="#CCCCCC"> so we have this</font>

160
00:07:15,210 --> 00:07:18,508
<font color="#E5E5E5">for</font><font color="#CCCCCC"> enclose</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> quarters last</font><font color="#E5E5E5"> year</font>

161
00:07:16,680 --> 00:07:21,150
this<font color="#E5E5E5"> year we've also added the same</font>

162
00:07:18,509 --> 00:07:22,590
<font color="#E5E5E5">thing but for transformation elements so</font>

163
00:07:21,150 --> 00:07:25,520
transformation elements are things like

164
00:07:22,590 --> 00:07:29,969
scalars or color converters or different

165
00:07:25,520 --> 00:07:34,139
element<font color="#E5E5E5"> that normally convert raw images</font>

166
00:07:29,970 --> 00:07:37,259
into different different formats<font color="#CCCCCC"> one</font>

167
00:07:34,139 --> 00:07:39,389
thing<font color="#CCCCCC"> that is being discussed</font><font color="#E5E5E5"> that's not</font>

168
00:07:37,259 --> 00:07:42,509
there yet because<font color="#E5E5E5"> the kernels not there</font>

169
00:07:39,389 --> 00:07:43,110
is having good support for stateless

170
00:07:42,509 --> 00:07:46,380
codecs

171
00:07:43,110 --> 00:07:48,599
<font color="#E5E5E5">so most codecs that people traditionally</font>

172
00:07:46,380 --> 00:07:51,780
use on<font color="#E5E5E5"> these embedded hardware you would</font>

173
00:07:48,599 --> 00:07:53,490
<font color="#E5E5E5">just give it the h.264</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> bit stream</font>

174
00:07:51,780 --> 00:07:55,258
<font color="#E5E5E5">and it would give you a decoded stream</font>

175
00:07:53,490 --> 00:07:57,180
<font color="#E5E5E5">it did the whole parsing of</font><font color="#CCCCCC"> the bit</font>

176
00:07:55,259 --> 00:07:58,919
stream and<font color="#CCCCCC"> everything in the hardware</font>

177
00:07:57,180 --> 00:08:02,099
side which was often<font color="#E5E5E5"> just firmware</font>

178
00:07:58,919 --> 00:08:04,198
running in a different<font color="#E5E5E5"> chip</font><font color="#CCCCCC"> but now then</font>

179
00:08:02,099 --> 00:08:06,570
new trend is<font color="#E5E5E5"> to make the hardware</font>

180
00:08:04,199 --> 00:08:09,570
cheaper by<font color="#E5E5E5"> moving all of this parsing</font>

181
00:08:06,570 --> 00:08:11,520
<font color="#E5E5E5">onto the the CPU side and by doing it in</font>

182
00:08:09,570 --> 00:08:13,280
<font color="#CCCCCC">user space</font><font color="#E5E5E5"> and software so you need</font>

183
00:08:11,520 --> 00:08:15,960
slightly different API is in<font color="#E5E5E5"> the kernel</font>

184
00:08:13,280 --> 00:08:17,909
<font color="#CCCCCC">there's a lot</font><font color="#E5E5E5"> of work happening with the</font>

185
00:08:15,960 --> 00:08:19,710
request<font color="#CCCCCC"> API is</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> to do</font>

186
00:08:17,909 --> 00:08:22,440
exactly<font color="#E5E5E5"> that and just human wolf support</font>

187
00:08:19,710 --> 00:08:25,849
at once at once<font color="#CCCCCC"> it's there</font><font color="#E5E5E5"> this isn't</font>

188
00:08:22,440 --> 00:08:25,849
actually<font color="#E5E5E5"> we've</font><font color="#CCCCCC"> been actually</font><font color="#E5E5E5"> working on</font>

189
00:08:26,120 --> 00:08:31,919
completely<font color="#E5E5E5"> separate subject now</font><font color="#CCCCCC"> we've</font>

190
00:08:29,340 --> 00:08:33,478
merged<font color="#E5E5E5"> a plug-in</font><font color="#CCCCCC"> called a</font><font color="#E5E5E5"> PC pipeline</font>

191
00:08:31,919 --> 00:08:35,610
which I like to<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font>

192
00:08:33,479 --> 00:08:38,789
<font color="#E5E5E5">think it's really cool and</font><font color="#CCCCCC"> it allows you</font>

193
00:08:35,610 --> 00:08:42,270
to<font color="#E5E5E5"> split</font><font color="#CCCCCC"> a pipeline</font><font color="#E5E5E5"> into multiple</font>

194
00:08:38,789 --> 00:08:45,209
processes but have a single the master

195
00:08:42,270 --> 00:08:47,100
pipeline controls all the<font color="#E5E5E5"> others so for</font>

196
00:08:45,209 --> 00:08:49,560
example the typical<font color="#E5E5E5"> case is that you</font>

197
00:08:47,100 --> 00:08:52,079
receive<font color="#E5E5E5"> you have one process</font><font color="#CCCCCC"> that talks</font>

198
00:08:49,560 --> 00:08:54,479
to<font color="#CCCCCC"> a network that download the</font><font color="#E5E5E5"> - stream</font>

199
00:08:52,079 --> 00:08:57,300
from<font color="#E5E5E5"> the internet that that is exposed</font>

200
00:08:54,480 --> 00:08:58,529
<font color="#E5E5E5">and then it passes the data to another</font>

201
00:08:57,300 --> 00:09:00,870
<font color="#E5E5E5">process which</font><font color="#CCCCCC"> I</font>

202
00:08:58,529 --> 00:09:02,999
we<font color="#CCCCCC"> talk to the hardware</font><font color="#E5E5E5"> decoder so you</font>

203
00:09:00,870 --> 00:09:05,610
can separate the hardware decoder the

204
00:09:02,999 --> 00:09:07,680
part that and these<font color="#CCCCCC"> are often not as</font>

205
00:09:05,610 --> 00:09:09,209
secure as you<font color="#E5E5E5"> would like they do a lot</font>

206
00:09:07,680 --> 00:09:11,099
of<font color="#CCCCCC"> bitstream parsing and things</font><font color="#E5E5E5"> like</font>

207
00:09:09,209 --> 00:09:15,479
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so you want</font><font color="#CCCCCC"> to make sure that this</font>

208
00:09:11,100 --> 00:09:17,490
part that might be compromised by a data

209
00:09:15,480 --> 00:09:18,300
<font color="#E5E5E5">stream is nothing to the network and</font>

210
00:09:17,490 --> 00:09:20,490
vice versa

211
00:09:18,300 --> 00:09:22,949
so we can actually<font color="#E5E5E5"> split the pipeline in</font>

212
00:09:20,490 --> 00:09:24,689
multiple levels<font color="#CCCCCC"> I have one stage</font><font color="#E5E5E5"> a toxin</font>

213
00:09:22,949 --> 00:09:26,069
<font color="#CCCCCC">Network once it does the parsing and</font>

214
00:09:24,689 --> 00:09:28,199
then<font color="#E5E5E5"> separate stage that talks to the</font>

215
00:09:26,069 --> 00:09:30,779
<font color="#E5E5E5">hardware and this also</font><font color="#CCCCCC"> used full</font>

216
00:09:28,199 --> 00:09:34,050
<font color="#CCCCCC">complement DRM sadly so but it</font><font color="#E5E5E5"> was</font>

217
00:09:30,779 --> 00:09:39,680
<font color="#CCCCCC">really you to have multiple levels</font><font color="#E5E5E5"> of</font>

218
00:09:34,050 --> 00:09:39,680
<font color="#E5E5E5">security and it's right now it's not</font>

219
00:09:42,559 --> 00:09:47,249
it's it's<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to create everything</font>

220
00:09:45,480 --> 00:09:48,569
<font color="#E5E5E5">manually so it's not like automatic at</font>

221
00:09:47,249 --> 00:09:50,309
all right you have to actually<font color="#E5E5E5"> create</font>

222
00:09:48,569 --> 00:09:51,509
your pipeline manually<font color="#E5E5E5"> but for these</font>

223
00:09:50,309 --> 00:09:53,189
kinds of devices<font color="#E5E5E5"> you actually want to</font>

224
00:09:51,509 --> 00:09:56,029
control<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> what happens in</font><font color="#E5E5E5"> what</font>

225
00:09:53,189 --> 00:09:56,029
process and everything

226
00:09:56,569 --> 00:10:01,920
another completely separate thing<font color="#E5E5E5"> we've</font>

227
00:09:59,699 --> 00:10:04,349
implemented a new mode of interlacing

228
00:10:01,920 --> 00:10:06,930
that actually exposes how some<font color="#CCCCCC"> of the</font>

229
00:10:04,350 --> 00:10:10,290
<font color="#E5E5E5">hardware works so traditionally and</font>

230
00:10:06,930 --> 00:10:12,959
interlacing is that you have one frame

231
00:10:10,290 --> 00:10:14,910
in traditional<font color="#E5E5E5"> analog TV</font><font color="#CCCCCC"> you have one</font>

232
00:10:12,959 --> 00:10:16,979
frame that<font color="#CCCCCC"> contains every odd line and</font>

233
00:10:14,910 --> 00:10:19,110
then the next frame which the<font color="#E5E5E5"> next field</font>

234
00:10:16,980 --> 00:10:20,759
contains every<font color="#CCCCCC"> even line</font><font color="#E5E5E5"> so instead of</font>

235
00:10:19,110 --> 00:10:22,800
having 30 frames a second<font color="#CCCCCC"> you have 60</font>

236
00:10:20,759 --> 00:10:26,420
fields<font color="#E5E5E5"> and these fields are really half</font>

237
00:10:22,800 --> 00:10:30,209
the frame<font color="#E5E5E5"> one odd one even odd even and</font>

238
00:10:26,420 --> 00:10:32,430
when these come to digital<font color="#E5E5E5"> mostly what</font>

239
00:10:30,209 --> 00:10:34,680
you did is that you put<font color="#E5E5E5"> both of these</font>

240
00:10:32,430 --> 00:10:37,138
<font color="#E5E5E5">fields in the</font><font color="#CCCCCC"> same file</font><font color="#E5E5E5"> in the same</font>

241
00:10:34,680 --> 00:10:39,540
frame in the same<font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> right so you</font>

242
00:10:37,139 --> 00:10:41,959
have the odd lines the even<font color="#E5E5E5"> lines are</font>

243
00:10:39,540 --> 00:10:45,179
taken at slightly different times and

244
00:10:41,959 --> 00:10:46,979
this this<font color="#CCCCCC"> is why when you look at it</font>

245
00:10:45,179 --> 00:10:49,980
like<font color="#E5E5E5"> without properly the interesting it</font>

246
00:10:46,980 --> 00:10:51,839
you'll see a jagged image<font color="#E5E5E5"> this is a</font>

247
00:10:49,980 --> 00:10:54,179
traditional way to do it some hardware

248
00:10:51,839 --> 00:10:56,009
and h.265 actually do it in a different

249
00:10:54,179 --> 00:10:57,779
<font color="#E5E5E5">way is that you actually have</font><font color="#CCCCCC"> different</font>

250
00:10:56,009 --> 00:11:00,839
<font color="#E5E5E5">the fields separately in separate</font>

251
00:10:57,779 --> 00:11:03,899
buffers<font color="#E5E5E5"> at separate times</font><font color="#CCCCCC"> that solves</font>

252
00:11:00,839 --> 00:11:06,809
for<font color="#E5E5E5"> a bit lower latency so you can have</font>

253
00:11:03,899 --> 00:11:08,129
like you don't have<font color="#E5E5E5"> to wait for both</font>

254
00:11:06,809 --> 00:11:09,959
fields<font color="#CCCCCC"> have been captured to start</font>

255
00:11:08,129 --> 00:11:12,279
processing<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> one and we've</font>

256
00:11:09,959 --> 00:11:13,689
implemented this for GST 1x

257
00:11:12,279 --> 00:11:18,399
and actually<font color="#CCCCCC"> throw out</font><font color="#E5E5E5"> the additional</font>

258
00:11:13,689 --> 00:11:21,930
<font color="#CCCCCC">framework we've done</font><font color="#E5E5E5"> so a bunch of work</font>

259
00:11:18,399 --> 00:11:24,759
<font color="#CCCCCC">to reduce</font><font color="#E5E5E5"> the latency in RTP pipelines</font>

260
00:11:21,930 --> 00:11:27,579
<font color="#E5E5E5">when we actually try to measure the</font>

261
00:11:24,759 --> 00:11:29,589
latency<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the actual data we realized</font>

262
00:11:27,579 --> 00:11:31,809
that the<font color="#CCCCCC"> latent state GStreamer</font><font color="#E5E5E5"> claimed</font>

263
00:11:29,589 --> 00:11:33,459
to have was<font color="#CCCCCC"> not really true that there</font>

264
00:11:31,809 --> 00:11:35,350
are<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bunch of little</font><font color="#E5E5E5"> bugs all around</font>

265
00:11:33,459 --> 00:11:37,540
<font color="#E5E5E5">the different elements that actually</font>

266
00:11:35,350 --> 00:11:40,300
<font color="#CCCCCC">made the data stay in there longer than</font>

267
00:11:37,540 --> 00:11:43,809
<font color="#CCCCCC">it should have</font><font color="#E5E5E5"> so we did a bunch of</font>

268
00:11:40,300 --> 00:11:47,109
little<font color="#E5E5E5"> little bug fixes</font><font color="#CCCCCC"> and now you can</font>

269
00:11:43,809 --> 00:11:49,089
actually push buffers with the latency

270
00:11:47,110 --> 00:11:51,040
that<font color="#E5E5E5"> it claims to have which</font><font color="#CCCCCC"> which can</font>

271
00:11:49,089 --> 00:11:57,249
be almost<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> if you're not doing</font>

272
00:11:51,040 --> 00:11:59,620
anything<font color="#E5E5E5"> that any queuing we also done a</font>

273
00:11:57,249 --> 00:12:02,319
bunch of work<font color="#E5E5E5"> in the dish room open max</font>

274
00:11:59,620 --> 00:12:06,100
elements<font color="#CCCCCC"> a lot of this is for the</font>

275
00:12:02,319 --> 00:12:08,319
exiling<font color="#CCCCCC"> zinc MP platform</font><font color="#E5E5E5"> we fixed a lot</font>

276
00:12:06,100 --> 00:12:13,360
of bugs we've added support<font color="#CCCCCC"> for 10-bit</font>

277
00:12:08,319 --> 00:12:17,469
video formats for HDR<font color="#CCCCCC"> we have a lot more</font>

278
00:12:13,360 --> 00:12:19,410
DMA buff and<font color="#E5E5E5"> zero copy modes so that you</font>

279
00:12:17,470 --> 00:12:21,699
can connect them<font color="#E5E5E5"> in</font><font color="#CCCCCC"> different ways and</font>

280
00:12:19,410 --> 00:12:23,199
<font color="#E5E5E5">have one side or the other do the</font>

281
00:12:21,699 --> 00:12:26,769
allocation depending on what's better

282
00:12:23,199 --> 00:12:28,359
for<font color="#CCCCCC"> your specific use case we've had the</font>

283
00:12:26,769 --> 00:12:31,750
region of interest<font color="#CCCCCC"> this is a really cool</font>

284
00:12:28,360 --> 00:12:34,930
<font color="#E5E5E5">one I think basically it</font><font color="#CCCCCC"> allows the</font>

285
00:12:31,750 --> 00:12:37,389
application<font color="#CCCCCC"> to stay in my image this bit</font>

286
00:12:34,930 --> 00:12:39,550
is where the really<font color="#E5E5E5"> important thing is</font>

287
00:12:37,389 --> 00:12:42,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> put more more bits there when you</font>

288
00:12:39,550 --> 00:12:44,199
<font color="#E5E5E5">compress for example you can have a face</font>

289
00:12:42,490 --> 00:12:46,750
<font color="#CCCCCC">recognition alertness as there's a</font><font color="#E5E5E5"> face</font>

290
00:12:44,199 --> 00:12:48,160
there<font color="#E5E5E5"> so in my video everything else is</font>

291
00:12:46,750 --> 00:12:50,079
not that important but<font color="#E5E5E5"> the face has to</font>

292
00:12:48,160 --> 00:12:52,329
be<font color="#CCCCCC"> recognizable</font><font color="#E5E5E5"> or the car plate or</font>

293
00:12:50,079 --> 00:12:54,040
things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or the subtitles if you</font>

294
00:12:52,329 --> 00:12:55,989
have<font color="#E5E5E5"> subtitles</font><font color="#CCCCCC"> burned into the</font><font color="#E5E5E5"> video you</font>

295
00:12:54,040 --> 00:12:58,059
might want<font color="#CCCCCC"> to put more detail there so</font>

296
00:12:55,990 --> 00:12:59,889
that the text is readable<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though</font>

297
00:12:58,059 --> 00:13:03,459
you really<font color="#E5E5E5"> compress the rest of the</font>

298
00:12:59,889 --> 00:13:05,470
video a lot and<font color="#E5E5E5"> there are little things</font>

299
00:13:03,459 --> 00:13:08,888
<font color="#E5E5E5">as a dynamic</font><font color="#CCCCCC"> framerate</font><font color="#E5E5E5"> in the encoder so</font>

300
00:13:05,470 --> 00:13:10,689
now the encoder<font color="#CCCCCC"> if you change your</font><font color="#E5E5E5"> frame</font>

301
00:13:08,889 --> 00:13:12,699
<font color="#E5E5E5">rate it doesn't realize everything it</font>

302
00:13:10,689 --> 00:13:16,170
<font color="#CCCCCC">just changes</font><font color="#E5E5E5"> the frame rate so</font><font color="#CCCCCC"> you can</font>

303
00:13:12,699 --> 00:13:16,170
<font color="#E5E5E5">change</font><font color="#CCCCCC"> your frame</font><font color="#E5E5E5"> rate really quickly</font>

304
00:13:18,570 --> 00:13:24,640
another nice thing we've<font color="#E5E5E5"> done a little</font>

305
00:13:22,540 --> 00:13:28,660
bunch<font color="#E5E5E5"> of little improvements on the</font><font color="#CCCCCC"> DMA</font>

306
00:13:24,640 --> 00:13:30,360
buff<font color="#E5E5E5"> support one of them is that now we</font>

307
00:13:28,660 --> 00:13:34,089
do explicit<font color="#CCCCCC"> the area of synchronization</font>

308
00:13:30,360 --> 00:13:35,830
<font color="#CCCCCC">it turns</font><font color="#E5E5E5"> out that the</font><font color="#CCCCCC"> linux kernel when</font>

309
00:13:34,090 --> 00:13:37,270
you use DNA buffer first when you access

310
00:13:35,830 --> 00:13:38,860
them you actually<font color="#CCCCCC"> need to tell it</font><font color="#E5E5E5"> I'm</font>

311
00:13:37,270 --> 00:13:40,689
going to access<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and now I'm stopping</font>

312
00:13:38,860 --> 00:13:43,260
accessing it<font color="#E5E5E5"> so that it does the</font>

313
00:13:40,690 --> 00:13:47,050
appropriate<font color="#E5E5E5"> cash-in validations</font>

314
00:13:43,260 --> 00:13:49,030
<font color="#E5E5E5">otherwise you get corruption especially</font>

315
00:13:47,050 --> 00:13:52,930
<font color="#CCCCCC">on Intel hardware which is one that</font>

316
00:13:49,030 --> 00:13:56,170
<font color="#CCCCCC">actually lots</font><font color="#E5E5E5"> of people use and we have</font>

317
00:13:52,930 --> 00:13:59,079
a direct<font color="#E5E5E5"> GL VM a buff uploader</font>

318
00:13:56,170 --> 00:14:02,439
<font color="#E5E5E5">so traditionally when</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> would import a</font>

319
00:13:59,080 --> 00:14:05,320
<font color="#E5E5E5">why UV image you would have to use a</font>

320
00:14:02,440 --> 00:14:07,330
shader convert it to<font color="#E5E5E5"> RGB to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

321
00:14:05,320 --> 00:14:10,060
put them we put on the display<font color="#CCCCCC"> but some</font>

322
00:14:07,330 --> 00:14:14,080
hardware and particular Vivante in the

323
00:14:10,060 --> 00:14:18,270
IIM xx<font color="#CCCCCC"> they have a they can actually</font>

324
00:14:14,080 --> 00:14:20,320
<font color="#CCCCCC">take the</font><font color="#E5E5E5"> Y UV and displayed directly</font>

325
00:14:18,270 --> 00:14:22,449
entirely in the hardware so there's a

326
00:14:20,320 --> 00:14:26,530
direct uploader now that bypasses<font color="#E5E5E5"> this</font>

327
00:14:22,450 --> 00:14:28,390
shader that<font color="#E5E5E5"> does</font><font color="#CCCCCC"> the conversion</font><font color="#E5E5E5"> so these</font>

328
00:14:26,530 --> 00:14:30,370
are the things a bit of a summary<font color="#CCCCCC"> of the</font>

329
00:14:28,390 --> 00:14:32,800
the things I found by<font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> at the</font>

330
00:14:30,370 --> 00:14:35,500
<font color="#CCCCCC">gate log and trying to remember what</font>

331
00:14:32,800 --> 00:14:36,670
happened<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the last year</font><font color="#CCCCCC"> there's</font>

332
00:14:35,500 --> 00:14:40,930
<font color="#E5E5E5">something that are actually being worked</font>

333
00:14:36,670 --> 00:14:44,469
<font color="#E5E5E5">on more or less actively but as I said I</font>

334
00:14:40,930 --> 00:14:46,030
think<font color="#E5E5E5"> are kind of interesting</font><font color="#CCCCCC"> there's a</font>

335
00:14:44,470 --> 00:14:47,260
bit a lot<font color="#E5E5E5"> of activity around neural</font>

336
00:14:46,030 --> 00:14:49,660
networks industry when you're on the

337
00:14:47,260 --> 00:14:51,670
<font color="#CCCCCC">course</font><font color="#E5E5E5"> are all the rage this year and a</font>

338
00:14:49,660 --> 00:14:53,860
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of it is to</font><font color="#E5E5E5"> process video to</font>

339
00:14:51,670 --> 00:14:57,939
recognize things<font color="#E5E5E5"> in video</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> room</font>

340
00:14:53,860 --> 00:14:59,620
<font color="#E5E5E5">is really good with video so we have for</font>

341
00:14:57,940 --> 00:15:02,560
example<font color="#CCCCCC"> Nvidia</font><font color="#E5E5E5"> has released something</font>

342
00:14:59,620 --> 00:15:05,110
called the deep<font color="#E5E5E5"> stream</font><font color="#CCCCCC"> SDK</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> works</font>

343
00:15:02,560 --> 00:15:08,589
both<font color="#CCCCCC"> on embedded Tegra and on the cloud</font>

344
00:15:05,110 --> 00:15:12,970
side and and that uses CUDA to the

345
00:15:08,590 --> 00:15:17,100
actual neural network processing but all

346
00:15:12,970 --> 00:15:20,140
of the video elements are<font color="#E5E5E5"> actually using</font>

347
00:15:17,100 --> 00:15:23,230
<font color="#CCCCCC">gstreamer</font><font color="#E5E5E5"> and this is largely</font>

348
00:15:20,140 --> 00:15:25,000
proprietary sadly but the the<font color="#CCCCCC"> gstreamer</font>

349
00:15:23,230 --> 00:15:26,470
actual<font color="#CCCCCC"> december is not but all of the</font>

350
00:15:25,000 --> 00:15:29,350
interesting bits that<font color="#E5E5E5"> anybody has done</font>

351
00:15:26,470 --> 00:15:31,500
is using<font color="#E5E5E5"> their proprietary things but</font>

352
00:15:29,350 --> 00:15:33,519
there's also a couple<font color="#E5E5E5"> open source</font>

353
00:15:31,500 --> 00:15:36,850
project that<font color="#E5E5E5"> I've been released as one</font>

354
00:15:33,519 --> 00:15:38,200
<font color="#E5E5E5">called</font><font color="#CCCCCC"> NN streamer</font><font color="#E5E5E5"> there something</font>

355
00:15:36,850 --> 00:15:41,440
called<font color="#CCCCCC"> J</font><font color="#E5E5E5"> scenes for assessment we</font>

356
00:15:38,200 --> 00:15:44,140
<font color="#E5E5E5">release next month</font><font color="#CCCCCC"> they promised to</font><font color="#E5E5E5"> do</font>

357
00:15:41,440 --> 00:15:46,329
<font color="#E5E5E5">you know network</font><font color="#CCCCCC"> GStreamer so I expect</font>

358
00:15:44,140 --> 00:15:48,730
<font color="#E5E5E5">that in the</font><font color="#CCCCCC"> next year or two we'll</font>

359
00:15:46,329 --> 00:15:51,040
probably have something<font color="#CCCCCC"> upstream that</font>

360
00:15:48,730 --> 00:15:53,170
everyone can collaborate on to integrate

361
00:15:51,040 --> 00:15:57,250
neural network frameworks<font color="#E5E5E5"> with this</font>

362
00:15:53,170 --> 00:15:59,500
<font color="#E5E5E5">rumor another thing that's coming up now</font>

363
00:15:57,250 --> 00:16:01,720
is different companies are coming<font color="#E5E5E5"> up</font>

364
00:15:59,500 --> 00:16:06,089
with specialized hardware so instead of

365
00:16:01,720 --> 00:16:06,089
using GPUs yes

366
00:16:07,050 --> 00:16:10,689
<font color="#E5E5E5">but</font><font color="#CCCCCC"> we-we've tensorflow</font><font color="#E5E5E5"> say a lot of</font>

367
00:16:09,610 --> 00:16:11,500
these<font color="#E5E5E5"> frameworks have to integrate</font>

368
00:16:10,690 --> 00:16:14,769
<font color="#E5E5E5">tensorflow</font>

369
00:16:11,500 --> 00:16:16,810
or<font color="#E5E5E5"> tensorflow RT with</font><font color="#CCCCCC"> gstreamer that's</font>

370
00:16:14,769 --> 00:16:21,630
like the main one<font color="#CCCCCC"> but I know some</font><font color="#E5E5E5"> people</font>

371
00:16:16,810 --> 00:16:22,869
<font color="#E5E5E5">actually using other other frameworks go</font>

372
00:16:21,630 --> 00:16:24,700
yes

373
00:16:22,870 --> 00:16:25,750
so yes<font color="#CCCCCC"> also</font><font color="#E5E5E5"> specialized hardware is</font>

374
00:16:24,700 --> 00:16:27,610
coming like<font color="#E5E5E5"> so all of these that</font><font color="#CCCCCC"> are</font>

375
00:16:25,750 --> 00:16:30,190
like<font color="#CCCCCC"> specialist accelerators that</font><font color="#E5E5E5"> are</font>

376
00:16:27,610 --> 00:16:33,990
<font color="#E5E5E5">not like GPUs but that been really</font>

377
00:16:30,190 --> 00:16:36,490
designed for AI workloads<font color="#E5E5E5"> and these will</font>

378
00:16:33,990 --> 00:16:39,750
require some integration and<font color="#E5E5E5"> this sure</font>

379
00:16:36,490 --> 00:16:42,610
is probably<font color="#E5E5E5"> kind of a key thing</font><font color="#CCCCCC"> there</font>

380
00:16:39,750 --> 00:16:44,589
another branch<font color="#E5E5E5"> that we have not merged</font>

381
00:16:42,610 --> 00:16:47,680
and a long time but I<font color="#CCCCCC"> have promised to</font>

382
00:16:44,589 --> 00:16:49,990
<font color="#E5E5E5">review is Android camera to API so this</font>

383
00:16:47,680 --> 00:16:53,069
is a new camera<font color="#E5E5E5"> API that Android has had</font>

384
00:16:49,990 --> 00:16:57,370
for a<font color="#CCCCCC"> couple years</font><font color="#E5E5E5"> now and that is</font>

385
00:16:53,070 --> 00:16:59,529
completely<font color="#E5E5E5"> more modern than what</font><font color="#CCCCCC"> we're</font>

386
00:16:57,370 --> 00:17:03,689
using<font color="#CCCCCC"> right now</font><font color="#E5E5E5"> this new API it's</font>

387
00:16:59,529 --> 00:17:06,309
<font color="#CCCCCC">exposed in the NDK</font><font color="#E5E5E5"> so you can use a</font>

388
00:17:03,689 --> 00:17:07,839
<font color="#E5E5E5">native C</font><font color="#CCCCCC"> API to</font><font color="#E5E5E5"> access it instead of</font>

389
00:17:06,309 --> 00:17:11,470
<font color="#E5E5E5">going</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> Java and going back to the</font>

390
00:17:07,839 --> 00:17:13,208
C++ it does<font color="#E5E5E5"> things like where you can</font>

391
00:17:11,470 --> 00:17:17,319
like record a video<font color="#E5E5E5"> and take a picture</font>

392
00:17:13,209 --> 00:17:19,299
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> same time it</font><font color="#E5E5E5"> to capture multiple</font>

393
00:17:17,319 --> 00:17:20,379
streams at the<font color="#E5E5E5"> same time like the front</font>

394
00:17:19,299 --> 00:17:23,139
camera in the back camera<font color="#E5E5E5"> at the same</font>

395
00:17:20,380 --> 00:17:26,110
time on some phones etc and<font color="#CCCCCC"> so all the</font>

396
00:17:23,140 --> 00:17:27,880
<font color="#E5E5E5">modern features that your phone app that</font>

397
00:17:26,109 --> 00:17:30,129
<font color="#CCCCCC">your camera operation</font><font color="#E5E5E5"> as in your phone</font>

398
00:17:27,880 --> 00:17:34,350
they're all<font color="#E5E5E5"> exposed to that API so there</font>

399
00:17:30,130 --> 00:17:37,000
is a<font color="#E5E5E5"> plug-in in the get lab that is</font>

400
00:17:34,350 --> 00:17:40,260
meant<font color="#E5E5E5"> to be reviewed and openly</font><font color="#CCCCCC"> will</font>

401
00:17:37,000 --> 00:17:40,260
merge<font color="#E5E5E5"> it in the near future</font>

402
00:17:40,890 --> 00:17:46,020
<font color="#CCCCCC">yeah so I've been a bunch</font><font color="#E5E5E5"> of work about</font>

403
00:17:43,380 --> 00:17:48,270
remote tracing<font color="#E5E5E5"> so</font><font color="#CCCCCC"> just humor has a</font>

404
00:17:46,020 --> 00:17:50,429
tracer framework that allows you to

405
00:17:48,270 --> 00:17:53,760
write tracers to trace things and<font color="#CCCCCC"> to</font>

406
00:17:50,429 --> 00:17:55,830
it's really nice to find performance

407
00:17:53,760 --> 00:17:58,290
bottlenecks figure out what exactly<font color="#CCCCCC"> is</font>

408
00:17:55,830 --> 00:17:59,520
going<font color="#CCCCCC"> on the pipeline is running and I</font>

409
00:17:58,290 --> 00:18:02,100
know there's<font color="#E5E5E5"> some interest</font><font color="#CCCCCC"> to do it</font>

410
00:17:59,520 --> 00:18:04,139
remotely so to have some infrastructure

411
00:18:02,100 --> 00:18:06,240
<font color="#E5E5E5">to for this information</font><font color="#CCCCCC"> to a separate</font>

412
00:18:04,140 --> 00:18:07,920
<font color="#CCCCCC">computer so</font><font color="#E5E5E5"> you can have the tracer</font>

413
00:18:06,240 --> 00:18:09,720
running in your embedded device but not

414
00:18:07,920 --> 00:18:12,179
a nice UI on your computer to<font color="#CCCCCC"> know</font>

415
00:18:09,720 --> 00:18:14,360
what's going<font color="#E5E5E5"> on my pipeline and why are</font>

416
00:18:12,179 --> 00:18:16,679
my friends<font color="#E5E5E5"> being dropped even though</font>

417
00:18:14,360 --> 00:18:18,780
many indicators say they shouldn't<font color="#CCCCCC"> be</font>

418
00:18:16,679 --> 00:18:22,520
right so where's the bottleneck<font color="#CCCCCC"> what is</font>

419
00:18:18,780 --> 00:18:22,520
the bug<font color="#E5E5E5"> what have I been</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> wrong</font>

420
00:18:23,870 --> 00:18:31,260
another<font color="#E5E5E5"> next step</font><font color="#CCCCCC"> that we're going to do</font>

421
00:18:29,070 --> 00:18:33,990
that we've just just switched to get lab

422
00:18:31,260 --> 00:18:36,179
where we gain amazing new technologies

423
00:18:33,990 --> 00:18:38,610
such as doing a build<font color="#CCCCCC"> before you merge</font>

424
00:18:36,179 --> 00:18:41,520
the branch<font color="#E5E5E5"> and</font><font color="#CCCCCC"> after and running</font><font color="#E5E5E5"> tests</font>

425
00:18:38,610 --> 00:18:45,000
<font color="#E5E5E5">before you merges instead of after so</font>

426
00:18:41,520 --> 00:18:47,760
<font color="#E5E5E5">and in this move we've right now we</font>

427
00:18:45,000 --> 00:18:51,510
<font color="#E5E5E5">built for Linux x86 64 we built for</font>

428
00:18:47,760 --> 00:18:53,610
<font color="#E5E5E5">Android and we built for Windows and we</font>

429
00:18:51,510 --> 00:18:56,820
would really like next to build for an

430
00:18:53,610 --> 00:19:00,540
embedded platform to reflect<font color="#CCCCCC"> we're just</font>

431
00:18:56,820 --> 00:19:02,370
<font color="#CCCCCC">rumors most</font><font color="#E5E5E5"> used and the next step after</font>

432
00:19:00,540 --> 00:19:04,649
that<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> the actually run tests</font><font color="#E5E5E5"> on</font>

433
00:19:02,370 --> 00:19:10,110
an embedded platform<font color="#E5E5E5"> we've built a</font>

434
00:19:04,650 --> 00:19:13,140
prototype using a Raspberry Pi and the

435
00:19:10,110 --> 00:19:14,939
<font color="#E5E5E5">prototype used Jenkins and lava</font><font color="#CCCCCC"> so</font>

436
00:19:13,140 --> 00:19:17,190
Jenkins to do the<font color="#E5E5E5"> build and lava</font><font color="#CCCCCC"> tashi</font>

437
00:19:14,940 --> 00:19:19,770
<font color="#E5E5E5">run on the device</font><font color="#CCCCCC"> our goal would be to</font>

438
00:19:17,190 --> 00:19:21,360
replay Jenkins with get lab CI here so

439
00:19:19,770 --> 00:19:26,460
that we can<font color="#CCCCCC"> actually integrate it nicely</font>

440
00:19:21,360 --> 00:19:28,439
<font color="#CCCCCC">in</font><font color="#E5E5E5"> our CI we have a vague plan on how to</font>

441
00:19:26,460 --> 00:19:29,640
integrate to get<font color="#CCCCCC"> website with lava</font><font color="#E5E5E5"> but I</font>

442
00:19:28,440 --> 00:19:31,169
don't know if anyone<font color="#E5E5E5"> else has already</font>

443
00:19:29,640 --> 00:19:34,559
<font color="#E5E5E5">done it</font><font color="#CCCCCC"> so we actually have to actually</font>

444
00:19:31,169 --> 00:19:38,240
see if it if it if it works to use<font color="#E5E5E5"> a</font>

445
00:19:34,559 --> 00:19:44,389
<font color="#E5E5E5">good lab</font><font color="#CCCCCC"> CI API is to drive lava and</font>

446
00:19:38,240 --> 00:19:49,100
have all the the details<font color="#CCCCCC"> together so</font>

447
00:19:44,390 --> 00:19:49,100
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically what I had to say</font>

448
00:19:49,660 --> 00:20:10,720
you have any questions<font color="#E5E5E5"> yes yes you I'm</font>

449
00:20:02,500 --> 00:20:12,880
<font color="#E5E5E5">cool so when all these new</font><font color="#CCCCCC"> things so the</font>

450
00:20:10,720 --> 00:20:14,320
<font color="#E5E5E5">Nvidia part is already there it's called</font>

451
00:20:12,880 --> 00:20:17,860
deep stream<font color="#E5E5E5"> SDK</font>

452
00:20:14,320 --> 00:20:20,850
it works on Jetson<font color="#E5E5E5"> and whatever the</font>

453
00:20:17,860 --> 00:20:24,790
server ones are called

454
00:20:20,850 --> 00:20:26,320
no no a<font color="#E5E5E5"> point of interest is that as far</font>

455
00:20:24,790 --> 00:20:30,639
as<font color="#E5E5E5"> I know</font><font color="#CCCCCC"> it's only available</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> intel</font>

456
00:20:26,320 --> 00:20:32,169
and larynx<font color="#E5E5E5"> so it needs</font><font color="#CCCCCC"> fortunately you</font>

457
00:20:30,640 --> 00:20:34,960
<font color="#E5E5E5">need support in the encoder</font><font color="#CCCCCC"> I don't know</font>

458
00:20:32,170 --> 00:20:43,180
what the envy<font color="#E5E5E5"> Hank API can do so but</font>

459
00:20:34,960 --> 00:20:45,400
<font color="#E5E5E5">then well yeah but</font><font color="#CCCCCC"> as you see this</font>

460
00:20:43,180 --> 00:20:48,070
<font color="#E5E5E5">region of interesting it really depends</font>

461
00:20:45,400 --> 00:20:49,810
on<font color="#E5E5E5"> the actual encoder implementation so</font>

462
00:20:48,070 --> 00:20:52,139
I<font color="#CCCCCC"> don't know what they have in</font><font color="#E5E5E5"> there and</font>

463
00:20:49,810 --> 00:20:52,139
their implementation

464
00:21:05,940 --> 00:21:14,190
I have two questions

465
00:21:11,160 --> 00:21:15,690
you mentioned<font color="#CCCCCC"> before this IPC pipelines</font>

466
00:21:14,190 --> 00:21:18,980
<font color="#E5E5E5">- yes</font><font color="#CCCCCC"> great</font>

467
00:21:15,690 --> 00:21:22,080
there's another<font color="#E5E5E5"> plugin called inter pipe</font>

468
00:21:18,980 --> 00:21:25,260
<font color="#CCCCCC">which allows</font><font color="#E5E5E5"> to make a separate</font>

469
00:21:22,080 --> 00:21:30,659
<font color="#CCCCCC">pipelines yes what would</font><font color="#E5E5E5"> be advantages</font>

470
00:21:25,260 --> 00:21:32,580
of<font color="#E5E5E5"> this one</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> so and the main thing</font>

471
00:21:30,660 --> 00:21:34,980
that IPC pipeline does differently<font color="#E5E5E5"> from</font>

472
00:21:32,580 --> 00:21:37,439
inter pipe is that I see IPC pipeline

473
00:21:34,980 --> 00:21:40,830
<font color="#E5E5E5">actually controls the pipeline entirely</font>

474
00:21:37,440 --> 00:21:42,360
<font color="#CCCCCC">so when you do you put the master on in</font>

475
00:21:40,830 --> 00:21:43,889
the ball<font color="#E5E5E5"> state it put all of the other</font>

476
00:21:42,360 --> 00:21:44,580
<font color="#E5E5E5">ones in the other processes</font><font color="#CCCCCC"> also in the</font>

477
00:21:43,890 --> 00:21:49,680
ball State

478
00:21:44,580 --> 00:21:52,919
so the<font color="#CCCCCC"> the control is unified</font>

479
00:21:49,680 --> 00:21:54,330
well inter pipeline<font color="#E5E5E5"> kind of the point of</font>

480
00:21:52,920 --> 00:21:56,070
<font color="#E5E5E5">it is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is the other way around there</font>

481
00:21:54,330 --> 00:21:57,960
<font color="#E5E5E5">really separates so you have a</font><font color="#CCCCCC"> sender</font><font color="#E5E5E5"> in</font>

482
00:21:56,070 --> 00:21:59,879
the receiver and<font color="#E5E5E5"> you can stop let's say</font>

483
00:21:57,960 --> 00:22:02,370
stop the sender<font color="#CCCCCC"> and change it and stop</font>

484
00:21:59,880 --> 00:22:04,560
the receiver independently well IPC

485
00:22:02,370 --> 00:22:06,600
<font color="#CCCCCC">pattern is</font><font color="#E5E5E5"> really meant to have things</font>

486
00:22:04,560 --> 00:22:09,389
that<font color="#E5E5E5"> to the application appears as a</font>

487
00:22:06,600 --> 00:22:10,889
<font color="#E5E5E5">single pipeline</font><font color="#CCCCCC"> even though other bits</font>

488
00:22:09,390 --> 00:22:14,880
might actually be separate<font color="#CCCCCC"> in several</font>

489
00:22:10,890 --> 00:22:25,230
process if I would<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> build very</font>

490
00:22:14,880 --> 00:22:26,580
dynamic application so if it's like if

491
00:22:25,230 --> 00:22:29,130
you want<font color="#CCCCCC"> to stop and</font><font color="#E5E5E5"> start different</font>

492
00:22:26,580 --> 00:22:31,770
parts<font color="#CCCCCC"> like the</font><font color="#E5E5E5"> inter inter video source</font>

493
00:22:29,130 --> 00:22:33,810
sink source and the inter pipeline

494
00:22:31,770 --> 00:22:35,670
whether it's called<font color="#E5E5E5"> inter inter pipe</font>

495
00:22:33,810 --> 00:22:39,929
<font color="#CCCCCC">inter pipe yeah it's pretty more</font>

496
00:22:35,670 --> 00:22:42,030
suitable in<font color="#E5E5E5"> IPC pipeline is more meant</font>

497
00:22:39,930 --> 00:22:44,430
the<font color="#E5E5E5"> church</font><font color="#CCCCCC"> movement</font><font color="#E5E5E5"> for like playback</font>

498
00:22:42,030 --> 00:22:46,110
cases where you you<font color="#E5E5E5"> want to separate</font>

499
00:22:44,430 --> 00:22:48,270
<font color="#E5E5E5">things but it's not because they want</font>

500
00:22:46,110 --> 00:22:50,370
them to<font color="#E5E5E5"> run separately is because you</font>

501
00:22:48,270 --> 00:22:53,850
want you want<font color="#CCCCCC"> as well actually appears</font>

502
00:22:50,370 --> 00:22:56,610
as one thing for the application<font color="#E5E5E5"> and the</font>

503
00:22:53,850 --> 00:22:59,159
second question<font color="#E5E5E5"> is more on de-embedded</font>

504
00:22:56,610 --> 00:23:02,990
side of it but<font color="#E5E5E5"> the same IPC yeah</font>

505
00:22:59,160 --> 00:23:07,530
if<font color="#CCCCCC"> i'm using like very low powered imx6</font>

506
00:23:02,990 --> 00:23:09,420
cpu and<font color="#CCCCCC"> i have some hardware source of</font>

507
00:23:07,530 --> 00:23:12,750
<font color="#E5E5E5">video if</font><font color="#CCCCCC"> i would split my pipeline in</font>

508
00:23:09,420 --> 00:23:14,460
<font color="#E5E5E5">the parts how would it pass the buffers</font>

509
00:23:12,750 --> 00:23:16,530
between the<font color="#E5E5E5"> pipelines would it be like a</font>

510
00:23:14,460 --> 00:23:18,840
<font color="#CCCCCC">mem copy</font><font color="#E5E5E5"> and it would be big yes</font>

511
00:23:16,530 --> 00:23:19,800
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> kit so right now IPC</font>

512
00:23:18,840 --> 00:23:22,290
pipeline<font color="#E5E5E5"> it's</font>

513
00:23:19,800 --> 00:23:24,990
it's a it's a<font color="#CCCCCC"> socket</font><font color="#E5E5E5"> so actually copy</font>

514
00:23:22,290 --> 00:23:26,430
everything<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> kernel for the</font>

515
00:23:24,990 --> 00:23:29,880
use case that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> looking at it was</font>

516
00:23:26,430 --> 00:23:32,370
fast enough<font color="#CCCCCC"> but I had the plan to</font>

517
00:23:29,880 --> 00:23:34,730
<font color="#CCCCCC">actually pass</font><font color="#E5E5E5"> memory buffers using</font>

518
00:23:32,370 --> 00:23:36,810
<font color="#E5E5E5">either passing the the</font><font color="#CCCCCC"> hollow scriptor</font>

519
00:23:34,730 --> 00:23:38,100
or<font color="#CCCCCC"> shred memory but when you're</font>

520
00:23:36,810 --> 00:23:44,700
<font color="#E5E5E5">implemented it because it was not</font>

521
00:23:38,100 --> 00:23:47,149
required<font color="#CCCCCC"> for our</font><font color="#E5E5E5"> use case yeah yeah last</font>

522
00:23:44,700 --> 00:23:47,150
<font color="#CCCCCC">question</font>

523
00:23:56,660 --> 00:24:01,130
question regarding the debugging<font color="#E5E5E5"> tools</font>

524
00:23:58,760 --> 00:24:02,990
<font color="#CCCCCC">you're actively working on it or is</font>

525
00:24:01,130 --> 00:24:06,380
something<font color="#E5E5E5"> already available</font><font color="#CCCCCC"> so there is</font>

526
00:24:02,990 --> 00:24:08,360
<font color="#E5E5E5">something available</font><font color="#CCCCCC"> act from the guy</font>

527
00:24:06,380 --> 00:24:10,220
from we<font color="#CCCCCC"> are from</font><font color="#E5E5E5"> Samsung</font><font color="#CCCCCC"> I can't</font>

528
00:24:08,360 --> 00:24:13,610
remember the name of it is<font color="#E5E5E5"> it's open</font>

529
00:24:10,220 --> 00:24:16,670
<font color="#CCCCCC">source on</font><font color="#E5E5E5"> this github</font><font color="#CCCCCC"> but someone</font>

530
00:24:13,610 --> 00:24:25,760
remember the name<font color="#E5E5E5"> of the thing that</font>

531
00:24:16,670 --> 00:24:28,940
<font color="#E5E5E5">marching the worked on yeah yes oak tree</font>

532
00:24:25,760 --> 00:24:33,290
sir<font color="#CCCCCC"> oak tracer yeah so that's that</font>

533
00:24:28,940 --> 00:24:34,760
that's<font color="#E5E5E5"> one of the efforts that would</font><font color="#CCCCCC"> I</font>

534
00:24:33,290 --> 00:24:37,700
<font color="#E5E5E5">would like to see it more integrated</font>

535
00:24:34,760 --> 00:24:41,570
right now it's you need patch things<font color="#E5E5E5"> to</font>

536
00:24:37,700 --> 00:24:42,920
<font color="#E5E5E5">actually you use it live okay thank</font><font color="#CCCCCC"> you</font>

537
00:24:41,570 --> 00:24:49,839
<font color="#CCCCCC">thank you</font>

538
00:24:42,920 --> 00:24:49,839
[Applause]

