1
00:00:12,730 --> 00:00:17,950
<font color="#CCCCCC">okay hello everybody</font>

2
00:00:14,900 --> 00:00:20,570
I believe it's<font color="#CCCCCC"> about time to start right</font>

3
00:00:17,950 --> 00:00:23,000
<font color="#E5E5E5">thanks for coming</font><font color="#CCCCCC"> to this talk if I'm</font>

4
00:00:20,570 --> 00:00:25,160
<font color="#E5E5E5">not speaking loud enough or if you don't</font>

5
00:00:23,000 --> 00:00:27,980
understand or<font color="#E5E5E5"> if you disagree please</font>

6
00:00:25,160 --> 00:00:29,930
feel free to interrupt<font color="#CCCCCC"> me at any time so</font>

7
00:00:27,980 --> 00:00:32,448
this will be something like a crossover

8
00:00:29,930 --> 00:00:36,290
<font color="#E5E5E5">talk between a microkernel Deb room</font>

9
00:00:32,448 --> 00:00:38,299
which has it has been organized by by us

10
00:00:36,290 --> 00:00:40,580
or somebody<font color="#E5E5E5"> else from the</font><font color="#CCCCCC"> microkernel</font>

11
00:00:38,299 --> 00:00:44,390
community for<font color="#E5E5E5"> several years here and the</font>

12
00:00:40,580 --> 00:00:47,299
<font color="#E5E5E5">the risk</font><font color="#CCCCCC"> five Hardware stuff so let me</font>

13
00:00:44,390 --> 00:00:49,909
just briefly speak about myself<font color="#E5E5E5"> so I'm</font>

14
00:00:47,299 --> 00:00:52,489
I'm an operating system guy I would say

15
00:00:49,909 --> 00:00:55,820
I'm a microkernel guy<font color="#E5E5E5"> I've been</font><font color="#CCCCCC"> working</font>

16
00:00:52,489 --> 00:00:58,519
on the<font color="#CCCCCC"> development of Helen OS for many</font>

17
00:00:55,820 --> 00:01:01,299
years I have<font color="#CCCCCC"> been working</font><font color="#E5E5E5"> on a formal</font>

18
00:00:58,519 --> 00:01:05,360
verification of<font color="#CCCCCC"> Helen</font><font color="#E5E5E5"> OS</font><font color="#CCCCCC"> as part of</font><font color="#E5E5E5"> my</font>

19
00:01:01,299 --> 00:01:08,270
research<font color="#CCCCCC"> employments at Charles Oni with</font>

20
00:01:05,360 --> 00:01:11,570
University in Prague and quite<font color="#CCCCCC"> recently</font>

21
00:01:08,270 --> 00:01:14,690
I have switched to<font color="#E5E5E5"> industry working on</font>

22
00:01:11,570 --> 00:01:17,720
<font color="#CCCCCC">microkernels</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> wale</font><font color="#E5E5E5"> so what the hell is</font>

23
00:01:14,690 --> 00:01:20,679
<font color="#E5E5E5">one of us if you don't know how an OS is</font>

24
00:01:17,720 --> 00:01:23,720
an<font color="#E5E5E5"> open-source general-purpose</font>

25
00:01:20,680 --> 00:01:26,240
<font color="#E5E5E5">multi-platform microkernel multi server</font>

26
00:01:23,720 --> 00:01:28,070
operating system designed and

27
00:01:26,240 --> 00:01:31,820
implemented from scratch so these are

28
00:01:28,070 --> 00:01:34,309
you<font color="#CCCCCC"> know the buzzwords</font><font color="#E5E5E5"> very quickly it's</font>

29
00:01:31,820 --> 00:01:35,949
<font color="#E5E5E5">not a Linux distribution or a BSD clone</font>

30
00:01:34,310 --> 00:01:39,140
or<font color="#CCCCCC"> something like that it's our own</font>

31
00:01:35,950 --> 00:01:41,659
microkernel design our own<font color="#E5E5E5"> user space</font>

32
00:01:39,140 --> 00:01:44,409
<font color="#E5E5E5">built on top of it</font><font color="#CCCCCC"> I have a look on</font><font color="#E5E5E5"> the</font>

33
00:01:41,659 --> 00:01:46,970
on the<font color="#E5E5E5"> website if you are</font><font color="#CCCCCC"> interested</font>

34
00:01:44,409 --> 00:01:48,650
<font color="#E5E5E5">it's an open source project</font><font color="#CCCCCC"> obviously</font>

35
00:01:46,970 --> 00:01:53,780
otherwise I wouldn't be even speaking

36
00:01:48,650 --> 00:01:55,880
here we are not<font color="#CCCCCC"> targeting embedded we</font>

37
00:01:53,780 --> 00:01:57,530
are not targeting<font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> we are not</font>

38
00:01:55,880 --> 00:01:59,720
targeting<font color="#CCCCCC"> servers we are not are getting</font>

39
00:01:57,530 --> 00:02:02,270
<font color="#CCCCCC">this clips</font><font color="#E5E5E5"> we are targeting everything</font>

40
00:01:59,720 --> 00:02:04,640
so it's a general<font color="#CCCCCC"> purpose operating</font>

41
00:02:02,270 --> 00:02:07,429
system and<font color="#E5E5E5"> somehow we have this</font>

42
00:02:04,640 --> 00:02:10,038
tradition of you know implementing you

43
00:02:07,430 --> 00:02:12,900
know<font color="#CCCCCC"> rather in the breadth-first manner</font>

44
00:02:10,038 --> 00:02:17,320
of them<font color="#CCCCCC"> than depth first manner</font>

45
00:02:12,900 --> 00:02:19,830
we support these hardware architectures

46
00:02:17,320 --> 00:02:23,200
I would say we<font color="#E5E5E5"> support them properly</font><font color="#CCCCCC"> so</font>

47
00:02:19,830 --> 00:02:25,990
<font color="#CCCCCC">we really try to make</font><font color="#E5E5E5"> the the</font><font color="#CCCCCC"> codebase</font>

48
00:02:23,200 --> 00:02:28,660
very portable<font color="#E5E5E5"> only about I would say</font><font color="#CCCCCC"> 5%</font>

49
00:02:25,990 --> 00:02:30,160
<font color="#E5E5E5">of the source code</font><font color="#CCCCCC"> who decides of the</font>

50
00:02:28,660 --> 00:02:32,290
source code is<font color="#E5E5E5"> platform dependent</font>

51
00:02:30,160 --> 00:02:34,210
<font color="#CCCCCC">otherwise do</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> really think it's</font>

52
00:02:32,290 --> 00:02:35,620
<font color="#CCCCCC">partially</font><font color="#E5E5E5"> independent</font><font color="#CCCCCC"> and this is the</font>

53
00:02:34,210 --> 00:02:38,380
<font color="#E5E5E5">reason why I'm</font><font color="#CCCCCC"> talking about the risk</font>

54
00:02:35,620 --> 00:02:44,350
<font color="#E5E5E5">risk 5 and porting</font><font color="#CCCCCC"> how long has to risk</font>

55
00:02:38,380 --> 00:02:46,630
5 the multi server keyword means that

56
00:02:44,350 --> 00:02:48,640
it's a microkernel so the kernel

57
00:02:46,630 --> 00:02:50,799
component is small it just does what

58
00:02:48,640 --> 00:02:54,730
would the colonel<font color="#E5E5E5"> shoot should do and</font>

59
00:02:50,800 --> 00:02:56,320
the user space cannot but also the<font color="#CCCCCC"> arc</font>

60
00:02:54,730 --> 00:02:58,840
the software architecture<font color="#CCCCCC"> of the user</font>

61
00:02:56,320 --> 00:03:00,519
space is very modular very fine grains

62
00:02:58,840 --> 00:03:03,040
<font color="#CCCCCC">so we don't</font><font color="#E5E5E5"> have huge monolithic</font>

63
00:03:00,520 --> 00:03:06,580
components even<font color="#E5E5E5"> in in user space we have</font>

64
00:03:03,040 --> 00:03:10,049
very small components and each<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of</font>

65
00:03:06,580 --> 00:03:12,820
<font color="#E5E5E5">the component is doing just one thing</font>

66
00:03:10,050 --> 00:03:15,310
and<font color="#E5E5E5"> we have some guiding principles that</font>

67
00:03:12,820 --> 00:03:18,640
<font color="#E5E5E5">we base our software architecture on</font>

68
00:03:15,310 --> 00:03:20,530
again<font color="#E5E5E5"> if you are interested</font><font color="#CCCCCC"> please ask</font>

69
00:03:18,640 --> 00:03:21,929
me offline<font color="#E5E5E5"> and I will I will be more</font>

70
00:03:20,530 --> 00:03:27,120
<font color="#E5E5E5">than</font><font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> explain to you in detail</font>

71
00:03:21,930 --> 00:03:30,550
<font color="#E5E5E5">so reserve like five six hours for that</font>

72
00:03:27,120 --> 00:03:32,950
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> screen shot</font><font color="#E5E5E5"> originally I</font>

73
00:03:30,550 --> 00:03:36,870
figured that I was would<font color="#CCCCCC"> not be able</font><font color="#E5E5E5"> to</font>

74
00:03:32,950 --> 00:03:42,010
connect my laptop to this to<font color="#E5E5E5"> this magic</font>

75
00:03:36,870 --> 00:03:46,000
<font color="#E5E5E5">casting box but I can even show</font><font color="#CCCCCC"> you show</font>

76
00:03:42,010 --> 00:03:47,799
you actual demo so so this<font color="#E5E5E5"> is this is</font>

77
00:03:46,000 --> 00:03:53,320
<font color="#E5E5E5">not on risk 5 this is</font><font color="#CCCCCC"> how I know is</font>

78
00:03:47,800 --> 00:03:56,910
running<font color="#E5E5E5"> on on x86 or</font><font color="#CCCCCC"> AMD 64</font><font color="#E5E5E5"> so do you</font>

79
00:03:53,320 --> 00:03:56,910
get<font color="#E5E5E5"> a normal bootloader</font>

80
00:03:57,900 --> 00:04:05,800
<font color="#E5E5E5">now the the microkernel is booting and</font>

81
00:04:01,450 --> 00:04:08,339
this is the user space environment<font color="#CCCCCC"> so</font>

82
00:04:05,800 --> 00:04:11,650
you can see that it's relatively

83
00:04:08,340 --> 00:04:14,560
<font color="#E5E5E5">feature-rich we have our own graphical</font>

84
00:04:11,650 --> 00:04:18,850
<font color="#CCCCCC">user interface you can you</font><font color="#E5E5E5"> can move</font>

85
00:04:14,560 --> 00:04:25,479
windows you can you can make<font color="#E5E5E5"> you can</font>

86
00:04:18,850 --> 00:04:26,320
rotate them<font color="#CCCCCC"> if I find the right right ok</font>

87
00:04:25,479 --> 00:04:28,870
you<font color="#E5E5E5"> can resize</font>

88
00:04:26,320 --> 00:04:34,780
I don't I don't remember<font color="#E5E5E5"> or</font><font color="#CCCCCC"> air you can</font>

89
00:04:28,870 --> 00:04:38,470
rotate them<font color="#E5E5E5"> and stuff like</font><font color="#CCCCCC"> that there</font>

90
00:04:34,780 --> 00:04:40,659
are already<font color="#E5E5E5"> something like 45 tasks or</font>

91
00:04:38,470 --> 00:04:42,760
processes<font color="#E5E5E5"> already running so so each</font>

92
00:04:40,660 --> 00:04:45,010
individual<font color="#CCCCCC"> device driver is running as a</font>

93
00:04:42,760 --> 00:04:47,770
separate process in<font color="#E5E5E5"> user</font><font color="#CCCCCC"> space that's</font>

94
00:04:45,010 --> 00:04:54,130
the microkernel<font color="#E5E5E5"> design principle we have</font>

95
00:04:47,770 --> 00:04:56,880
<font color="#CCCCCC">a networking</font><font color="#E5E5E5"> stack well obviously we are</font>

96
00:04:54,130 --> 00:04:56,880
<font color="#CCCCCC">not there yet</font>

97
00:04:57,750 --> 00:05:04,720
because as you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> this is our</font><font color="#E5E5E5"> web</font>

98
00:05:00,400 --> 00:05:07,030
browser<font color="#E5E5E5"> beautiful but I mean at least</font>

99
00:05:04,720 --> 00:05:11,080
the networking<font color="#E5E5E5"> is working so this was a</font>

100
00:05:07,030 --> 00:05:13,890
short<font color="#E5E5E5"> demo now let's get to</font><font color="#CCCCCC"> to</font>

101
00:05:11,080 --> 00:05:13,890
interesting stuff

102
00:05:13,960 --> 00:05:18,489
what is our goal<font color="#CCCCCC"> I mean generally</font>

103
00:05:15,940 --> 00:05:19,930
<font color="#CCCCCC">speaking</font><font color="#E5E5E5"> it's about dependability it's</font>

104
00:05:18,490 --> 00:05:22,780
about<font color="#E5E5E5"> creating a software</font><font color="#CCCCCC"> architecture</font>

105
00:05:19,930 --> 00:05:25,510
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the system level that will that would</font>

106
00:05:22,780 --> 00:05:28,659
provide<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know safety security</font><font color="#E5E5E5"> and</font>

107
00:05:25,510 --> 00:05:30,940
other guarantees for building dependable

108
00:05:28,660 --> 00:05:32,320
software<font color="#E5E5E5"> so so the architecture</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I</font>

109
00:05:30,940 --> 00:05:34,690
have<font color="#CCCCCC"> already described by do</font><font color="#E5E5E5"> the</font>

110
00:05:32,320 --> 00:05:37,420
<font color="#CCCCCC">fine-grain components that I isolated</font>

111
00:05:34,690 --> 00:05:40,120
<font color="#E5E5E5">from each other this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically</font>

112
00:05:37,420 --> 00:05:42,610
limiting the blast radius<font color="#CCCCCC"> as it is so if</font>

113
00:05:40,120 --> 00:05:45,370
everything<font color="#E5E5E5"> is in if something goes wrong</font>

114
00:05:42,610 --> 00:05:48,040
<font color="#E5E5E5">in a monolithic system like Linux kernel</font>

115
00:05:45,370 --> 00:05:49,870
<font color="#E5E5E5">if there is now</font><font color="#CCCCCC"> pulling pointer</font>

116
00:05:48,040 --> 00:05:52,270
dereference<font color="#E5E5E5"> you know you know you know</font>

117
00:05:49,870 --> 00:05:54,490
device driver you know the whole system

118
00:05:52,270 --> 00:05:58,030
goes goes out of<font color="#E5E5E5"> the window</font><font color="#CCCCCC"> in our case</font>

119
00:05:54,490 --> 00:05:59,770
<font color="#CCCCCC">only just that</font><font color="#E5E5E5"> just the single task just</font>

120
00:05:58,030 --> 00:06:02,500
the driver goes out<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> window and</font>

121
00:05:59,770 --> 00:06:06,280
there are potential mechanisms how this

122
00:06:02,500 --> 00:06:09,670
could<font color="#E5E5E5"> be you</font><font color="#CCCCCC"> know solve at</font><font color="#E5E5E5"> at runtime it</font>

123
00:06:06,280 --> 00:06:11,020
can be also also<font color="#E5E5E5"> soft at design time so</font>

124
00:06:09,670 --> 00:06:13,680
so you<font color="#E5E5E5"> can apply formal verification</font>

125
00:06:11,020 --> 00:06:17,140
<font color="#E5E5E5">techniques to make sure that actually</font>

126
00:06:13,680 --> 00:06:19,600
there<font color="#E5E5E5"> is no null pointer dereference in</font>

127
00:06:17,140 --> 00:06:21,610
any of these<font color="#CCCCCC"> components formal</font>

128
00:06:19,600 --> 00:06:23,170
verification techniques are generic

129
00:06:21,610 --> 00:06:25,810
there could<font color="#CCCCCC"> be applied on</font><font color="#E5E5E5"> an encoder</font>

130
00:06:23,170 --> 00:06:27,610
base<font color="#E5E5E5"> but you know the monolithic nature</font>

131
00:06:25,810 --> 00:06:31,990
the monolithic<font color="#E5E5E5"> architecture of say</font><font color="#CCCCCC"> Linux</font>

132
00:06:27,610 --> 00:06:35,470
<font color="#E5E5E5">or most of the BSD systems makes it hard</font>

133
00:06:31,990 --> 00:06:37,660
to<font color="#E5E5E5"> actually practically apply the formal</font>

134
00:06:35,470 --> 00:06:39,879
verification method methods because the

135
00:06:37,660 --> 00:06:42,490
code base is simply too large

136
00:06:39,879 --> 00:06:44,979
in our case<font color="#CCCCCC"> you have these individual</font>

137
00:06:42,490 --> 00:06:47,889
separate components and you can verify

138
00:06:44,979 --> 00:06:52,959
them<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> by piece so this</font><font color="#E5E5E5"> is this is</font>

139
00:06:47,889 --> 00:06:56,740
the way we also try to be try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> try to</font>

140
00:06:52,959 --> 00:07:01,330
write clean<font color="#E5E5E5"> understandable source code</font>

141
00:06:56,740 --> 00:07:06,219
<font color="#E5E5E5">so our</font><font color="#CCCCCC"> comment ratios this 38% which is</font>

142
00:07:01,330 --> 00:07:09,128
probably nice<font color="#CCCCCC"> I mean again these are</font><font color="#E5E5E5"> not</font>

143
00:07:06,219 --> 00:07:12,939
<font color="#E5E5E5">very surprising ideas it's about putting</font>

144
00:07:09,129 --> 00:07:15,519
all<font color="#E5E5E5"> the software engineering</font><font color="#CCCCCC"> bits and</font>

145
00:07:12,939 --> 00:07:17,169
pieces together<font color="#CCCCCC"> so having good software</font>

146
00:07:15,519 --> 00:07:19,899
architecture<font color="#CCCCCC"> having</font><font color="#E5E5E5"> having a good</font>

147
00:07:17,169 --> 00:07:22,029
implementation<font color="#CCCCCC"> doing the verification</font>

148
00:07:19,899 --> 00:07:25,569
<font color="#E5E5E5">and having a good development process</font>

149
00:07:22,029 --> 00:07:28,149
and you know<font color="#E5E5E5"> ocean liners have been</font>

150
00:07:25,569 --> 00:07:30,869
built like this for for hundreds of

151
00:07:28,149 --> 00:07:33,759
years<font color="#CCCCCC"> you don't want to have a single</font>

152
00:07:30,869 --> 00:07:35,349
single house of your<font color="#E5E5E5"> ship that is</font>

153
00:07:33,759 --> 00:07:38,949
carrying I don't know ten<font color="#E5E5E5"> thousand</font>

154
00:07:35,349 --> 00:07:41,740
<font color="#E5E5E5">people because a single iceberg can just</font>

155
00:07:38,949 --> 00:07:46,180
destroy it<font color="#E5E5E5"> you want to have this these</font>

156
00:07:41,740 --> 00:07:48,579
you know watertight bulkheads<font color="#CCCCCC"> so that it</font>

157
00:07:46,180 --> 00:07:51,009
really needs it really requires<font color="#E5E5E5"> a huge</font>

158
00:07:48,579 --> 00:07:54,009
error<font color="#E5E5E5"> and a huge iceberg to sink your</font>

159
00:07:51,009 --> 00:07:56,439
ship<font color="#E5E5E5"> but not not a tiny one</font><font color="#CCCCCC"> I mean</font>

160
00:07:54,009 --> 00:07:58,659
<font color="#E5E5E5">obviously there is there is no silver</font>

161
00:07:56,439 --> 00:08:03,550
<font color="#CCCCCC">bullet but you can do things better</font><font color="#E5E5E5"> than</font>

162
00:07:58,659 --> 00:08:08,699
just have a<font color="#E5E5E5"> monolithic design this this</font>

163
00:08:03,550 --> 00:08:08,699
<font color="#E5E5E5">picture summarize it</font><font color="#CCCCCC"> nicely</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> would say</font>

164
00:08:09,269 --> 00:08:13,419
<font color="#E5E5E5">these</font><font color="#CCCCCC"> slides are</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> or less for your</font>

165
00:08:11,559 --> 00:08:16,569
reference if<font color="#CCCCCC"> you would like</font><font color="#E5E5E5"> to go</font><font color="#CCCCCC"> go</font>

166
00:08:13,419 --> 00:08:19,748
into it further I understand it's<font color="#E5E5E5"> not</font>

167
00:08:16,569 --> 00:08:22,179
really readable<font color="#E5E5E5"> at this size so this is</font>

168
00:08:19,749 --> 00:08:24,339
this is these are<font color="#E5E5E5"> the functional blocks</font>

169
00:08:22,179 --> 00:08:25,929
in our microkernel the<font color="#E5E5E5"> only thing I</font>

170
00:08:24,339 --> 00:08:28,119
<font color="#E5E5E5">would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> stress here is this</font>

171
00:08:25,929 --> 00:08:31,299
hardware abstraction layers<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have</font>

172
00:08:28,119 --> 00:08:33,779
this really even inside the microkernel

173
00:08:31,300 --> 00:08:36,039
which<font color="#E5E5E5"> it's like the smallest indivisible</font>

174
00:08:33,779 --> 00:08:39,490
component we<font color="#CCCCCC"> have some</font><font color="#E5E5E5"> internal</font>

175
00:08:36,039 --> 00:08:41,468
structure still so we have some parts<font color="#CCCCCC"> of</font>

176
00:08:39,490 --> 00:08:43,599
the code that<font color="#E5E5E5"> out that</font><font color="#CCCCCC"> are platform</font>

177
00:08:41,469 --> 00:08:45,550
dependent<font color="#CCCCCC"> that needs to be adopted</font><font color="#E5E5E5"> when</font>

178
00:08:43,599 --> 00:08:49,870
when we port<font color="#E5E5E5"> Allen West to an open new</font>

179
00:08:45,550 --> 00:08:51,969
platform<font color="#E5E5E5"> but most of the code base even</font>

180
00:08:49,870 --> 00:08:52,360
of the microkernel is independent on the

181
00:08:51,970 --> 00:08:56,940
target

182
00:08:52,360 --> 00:09:00,250
platform<font color="#E5E5E5"> and this is just very</font>

183
00:08:56,940 --> 00:09:03,430
simplistic<font color="#CCCCCC"> view of</font><font color="#E5E5E5"> the user space so</font>

184
00:09:00,250 --> 00:09:05,589
there is there<font color="#CCCCCC"> is the microkernel</font><font color="#E5E5E5"> at the</font>

185
00:09:03,430 --> 00:09:09,760
bottom and then we have naming<font color="#E5E5E5"> service</font>

186
00:09:05,589 --> 00:09:11,649
<font color="#E5E5E5">loader</font><font color="#CCCCCC"> task</font><font color="#E5E5E5"> manager and</font><font color="#CCCCCC"> in it these</font><font color="#E5E5E5"> are</font>

187
00:09:09,760 --> 00:09:13,209
more<font color="#E5E5E5"> or less still you know very</font>

188
00:09:11,649 --> 00:09:15,430
critical services they are<font color="#E5E5E5"> in the</font>

189
00:09:13,209 --> 00:09:18,130
trusted computing<font color="#E5E5E5"> base and then we built</font>

190
00:09:15,430 --> 00:09:20,979
gradually<font color="#E5E5E5"> less and less trusted services</font>

191
00:09:18,130 --> 00:09:25,540
on<font color="#CCCCCC"> top of them such</font><font color="#E5E5E5"> as the the</font><font color="#CCCCCC"> file</font>

192
00:09:20,980 --> 00:09:28,029
<font color="#CCCCCC">system stack</font><font color="#E5E5E5"> the device driver stack the</font>

193
00:09:25,540 --> 00:09:29,949
networking<font color="#E5E5E5"> stack and so on by the way</font>

194
00:09:28,029 --> 00:09:34,570
<font color="#CCCCCC">our networking</font><font color="#E5E5E5"> stack is also d</font>

195
00:09:29,950 --> 00:09:37,570
componentized<font color="#E5E5E5"> so it's not a huge tcp/ip</font>

196
00:09:34,570 --> 00:09:40,089
<font color="#E5E5E5">everything library but there are</font>

197
00:09:37,570 --> 00:09:42,760
individual<font color="#E5E5E5"> tasks individual applications</font>

198
00:09:40,089 --> 00:09:44,829
that take<font color="#E5E5E5"> care for for the transport</font>

199
00:09:42,760 --> 00:09:49,450
layer for the for the link layer for<font color="#E5E5E5"> a</font>

200
00:09:44,829 --> 00:09:51,790
physical<font color="#E5E5E5"> layer</font><font color="#CCCCCC"> okay so that was</font>

201
00:09:49,450 --> 00:09:54,519
generally speaking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> her on OS and</font>

202
00:09:51,790 --> 00:09:57,099
<font color="#E5E5E5">you are probably interested in in in our</font>

203
00:09:54,519 --> 00:10:02,040
risk<font color="#CCCCCC"> live port because this is a risk 5</font>

204
00:09:57,100 --> 00:10:07,480
the room so<font color="#E5E5E5"> so I did some initial</font>

205
00:10:02,040 --> 00:10:09,730
experimentation<font color="#CCCCCC"> in 2016 I I had talked</font>

206
00:10:07,480 --> 00:10:12,070
about<font color="#CCCCCC"> this on in</font><font color="#E5E5E5"> the microkernel def</font>

207
00:10:09,730 --> 00:10:16,470
room at first<font color="#E5E5E5"> then at that time so</font>

208
00:10:12,070 --> 00:10:18,910
initially<font color="#E5E5E5"> if you remember 2016 the</font>

209
00:10:16,470 --> 00:10:22,930
<font color="#E5E5E5">privilege</font><font color="#CCCCCC"> eisah</font><font color="#E5E5E5"> specification of</font><font color="#CCCCCC"> birth</font>

210
00:10:18,910 --> 00:10:26,800
wife was in the<font color="#E5E5E5"> version</font><font color="#CCCCCC"> of 1.7 there was</font>

211
00:10:22,930 --> 00:10:29,050
no upstream to change the port<font color="#E5E5E5"> so GCC</font>

212
00:10:26,800 --> 00:10:34,120
you know<font color="#E5E5E5"> been</font><font color="#CCCCCC"> you chills upstream</font>

213
00:10:29,050 --> 00:10:37,839
support and the only<font color="#E5E5E5"> usable emulator or</font>

214
00:10:34,120 --> 00:10:41,140
platform was spiked<font color="#E5E5E5"> so it took took me</font>

215
00:10:37,839 --> 00:10:44,380
something like<font color="#E5E5E5"> 18 hours to get some</font>

216
00:10:41,140 --> 00:10:46,720
basic functionality<font color="#E5E5E5"> so to get set up the</font>

217
00:10:44,380 --> 00:10:49,149
<font color="#CCCCCC">the infrastructure</font><font color="#E5E5E5"> you know create the</font>

218
00:10:46,720 --> 00:10:52,209
directory<font color="#CCCCCC"> structure for for</font><font color="#E5E5E5"> the platform</font>

219
00:10:49,149 --> 00:10:56,920
<font color="#CCCCCC">dependent parts implement our own</font>

220
00:10:52,209 --> 00:10:59,469
<font color="#E5E5E5">bootloader</font><font color="#CCCCCC"> I I</font><font color="#E5E5E5"> just did not</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> the</font>

221
00:10:56,920 --> 00:11:01,270
BBL so<font color="#E5E5E5"> I implemented</font><font color="#CCCCCC"> my own and then</font>

222
00:10:59,470 --> 00:11:04,750
some initial virtual memory management

223
00:11:01,270 --> 00:11:09,680
setup<font color="#E5E5E5"> and kernel handoff</font>

224
00:11:04,750 --> 00:11:12,650
some<font color="#E5E5E5"> observations from from this there</font>

225
00:11:09,680 --> 00:11:15,739
were many things<font color="#E5E5E5"> purely very badly</font>

226
00:11:12,650 --> 00:11:19,790
documented at that time so<font color="#E5E5E5"> so many</font>

227
00:11:15,740 --> 00:11:22,010
<font color="#E5E5E5">things like the</font><font color="#CCCCCC"> ABI or or the the</font><font color="#E5E5E5"> the</font>

228
00:11:19,790 --> 00:11:23,870
i/o interface in<font color="#CCCCCC"> spike needed to be</font>

229
00:11:22,010 --> 00:11:26,960
basically<font color="#E5E5E5"> reverse engineered from from</font>

230
00:11:23,870 --> 00:11:32,270
the source<font color="#E5E5E5"> source code of the tools and</font>

231
00:11:26,960 --> 00:11:34,070
of the emulator<font color="#E5E5E5"> some other details were</font>

232
00:11:32,270 --> 00:11:36,590
still sketchy like memory consistency

233
00:11:34,070 --> 00:11:38,900
model at<font color="#E5E5E5"> that time but I mean generally</font>

234
00:11:36,590 --> 00:11:40,640
speaking<font color="#E5E5E5"> the architecture for my</font>

235
00:11:38,900 --> 00:11:43,250
experience<font color="#E5E5E5"> with other architectures</font>

236
00:11:40,640 --> 00:11:46,069
<font color="#E5E5E5">looked nice</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> accepted the strange</font>

237
00:11:43,250 --> 00:11:48,110
compressed page protection<font color="#E5E5E5"> fields if you</font>

238
00:11:46,070 --> 00:11:50,930
still<font color="#E5E5E5"> remember from from</font><font color="#CCCCCC"> that version</font><font color="#E5E5E5"> of</font>

239
00:11:48,110 --> 00:11:53,570
<font color="#E5E5E5">the</font><font color="#CCCCCC"> privilege</font><font color="#E5E5E5"> I saw that there were</font>

240
00:11:50,930 --> 00:11:56,719
there<font color="#E5E5E5"> weren't individual fields in in</font>

241
00:11:53,570 --> 00:11:58,880
the page<font color="#E5E5E5"> table entries for read you user</font>

242
00:11:56,720 --> 00:12:01,610
<font color="#E5E5E5">we eat corn or eat and stuff or soup</font>

243
00:11:58,880 --> 00:12:03,350
supervisor read write and execute<font color="#E5E5E5"> but</font>

244
00:12:01,610 --> 00:12:07,430
there was this strange<font color="#E5E5E5"> combined</font>

245
00:12:03,350 --> 00:12:10,700
compressed field<font color="#E5E5E5"> I mean why not I mean</font>

246
00:12:07,430 --> 00:12:14,329
it just slightly complicated our macros

247
00:12:10,700 --> 00:12:20,240
for that but our abstraction was fit to

248
00:12:14,330 --> 00:12:24,200
<font color="#E5E5E5">it but it was just strange so then I</font><font color="#CCCCCC"> I</font>

249
00:12:20,240 --> 00:12:27,410
have I have find I found some time to

250
00:12:24,200 --> 00:12:30,530
<font color="#CCCCCC">get</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> it back in 2017 when I</font>

251
00:12:27,410 --> 00:12:32,360
<font color="#E5E5E5">implemented the basic kernel</font>

252
00:12:30,530 --> 00:12:34,220
functionality as we call it<font color="#CCCCCC"> so basically</font>

253
00:12:32,360 --> 00:12:37,400
everything that<font color="#E5E5E5"> the kernel needs to to</font>

254
00:12:34,220 --> 00:12:39,950
<font color="#E5E5E5">actually work and hand</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the control</font>

255
00:12:37,400 --> 00:12:43,310
<font color="#E5E5E5">to user space meaning exception handling</font>

256
00:12:39,950 --> 00:12:48,020
context switching atomic operations and

257
00:12:43,310 --> 00:12:51,199
some basic i/o so the ice privileged<font color="#CCCCCC"> ISO</font>

258
00:12:48,020 --> 00:12:53,270
specification moved to the version 1.10

259
00:12:51,200 --> 00:12:56,720
which<font color="#E5E5E5"> I believe is still the most</font>

260
00:12:53,270 --> 00:12:58,520
<font color="#E5E5E5">current one</font><font color="#CCCCCC"> so there were some</font><font color="#E5E5E5"> small</font>

261
00:12:56,720 --> 00:13:01,970
improvements<font color="#CCCCCC"> for example they have</font>

262
00:12:58,520 --> 00:13:07,100
removed those strange<font color="#E5E5E5"> compressed page</font>

263
00:13:01,970 --> 00:13:09,790
protection fields the only usable

264
00:13:07,100 --> 00:13:15,680
<font color="#E5E5E5">emulator at the time was to spike and</font>

265
00:13:09,790 --> 00:13:17,990
you know the the<font color="#CCCCCC"> HT AF AF</font><font color="#E5E5E5"> input device</font>

266
00:13:15,680 --> 00:13:20,660
it's a horrible design<font color="#CCCCCC"> I mean really I</font>

267
00:13:17,990 --> 00:13:23,389
cannot imagine how somebody<font color="#E5E5E5"> could have</font>

268
00:13:20,660 --> 00:13:25,309
come with<font color="#E5E5E5"> such a such a strange input</font>

269
00:13:23,389 --> 00:13:28,009
device because it has no interrupts

270
00:13:25,309 --> 00:13:29,480
which is<font color="#E5E5E5"> more understandable there's no</font>

271
00:13:28,009 --> 00:13:31,720
there is no platform interrupt

272
00:13:29,480 --> 00:13:35,420
controller defined in this specification

273
00:13:31,720 --> 00:13:38,119
<font color="#CCCCCC">but if you do what you are supposed to</font>

274
00:13:35,420 --> 00:13:41,300
do<font color="#E5E5E5"> so you pull the device you</font><font color="#CCCCCC"> basically</font>

275
00:13:38,119 --> 00:13:48,079
sent a command to it asking is there a

276
00:13:41,300 --> 00:13:49,998
character available<font color="#E5E5E5"> and if if no you you</font>

277
00:13:48,079 --> 00:13:52,910
<font color="#E5E5E5">don't get you know</font><font color="#CCCCCC"> you know you don't</font>

278
00:13:49,999 --> 00:13:56,089
get zero<font color="#E5E5E5"> reply or something like no</font>

279
00:13:52,910 --> 00:14:00,350
character available the the request gets

280
00:13:56,089 --> 00:14:03,379
buffered so I mean just think about<font color="#E5E5E5"> it</font>

281
00:14:00,350 --> 00:14:06,589
<font color="#CCCCCC">how would</font><font color="#E5E5E5"> you normally pull this device</font>

282
00:14:03,379 --> 00:14:09,529
<font color="#CCCCCC">I do in other</font><font color="#E5E5E5"> word and periodically</font>

283
00:14:06,589 --> 00:14:11,899
pulling it but how do<font color="#E5E5E5"> you get rid</font><font color="#CCCCCC"> of</font>

284
00:14:09,529 --> 00:14:14,740
this<font color="#E5E5E5"> this buffered requests when there</font>

285
00:14:11,899 --> 00:14:17,360
is no character<font color="#E5E5E5"> in on the input</font><font color="#CCCCCC"> I mean</font>

286
00:14:14,740 --> 00:14:20,499
this is<font color="#CCCCCC"> just a memory leak on on the</font>

287
00:14:17,360 --> 00:14:24,050
emulator side<font color="#CCCCCC"> I don't know</font>

288
00:14:20,499 --> 00:14:25,910
so the point is or<font color="#E5E5E5"> maybe the moral</font><font color="#CCCCCC"> of</font>

289
00:14:24,050 --> 00:14:27,889
<font color="#E5E5E5">the story is that there was still no</font>

290
00:14:25,910 --> 00:14:30,290
reference<font color="#E5E5E5"> platform some something some</font>

291
00:14:27,889 --> 00:14:32,689
some decent specification<font color="#E5E5E5"> of the</font>

292
00:14:30,290 --> 00:14:35,079
platform<font color="#E5E5E5"> except the CPU itself that</font>

293
00:14:32,689 --> 00:14:38,179
would you know provide some reasonable

294
00:14:35,079 --> 00:14:40,628
basic debugging<font color="#CCCCCC"> i/o some platform</font>

295
00:14:38,179 --> 00:14:45,759
interrupt controller and stuff like that

296
00:14:40,629 --> 00:14:50,059
<font color="#E5E5E5">and yeah I mean if you are</font><font color="#CCCCCC"> poaching to</font>

297
00:14:45,759 --> 00:14:53,829
something where the<font color="#E5E5E5"> GCC toolchain has</font>

298
00:14:50,059 --> 00:14:56,509
been just upstream<font color="#CCCCCC"> you might encounter</font>

299
00:14:53,829 --> 00:14:59,120
<font color="#CCCCCC">internal compiler errors from time to</font>

300
00:14:56,509 --> 00:15:02,089
time<font color="#CCCCCC"> this I mean</font><font color="#E5E5E5"> this just happens I'm</font>

301
00:14:59,120 --> 00:15:07,689
not blaming anybody<font color="#E5E5E5"> this was fixed in on</font>

302
00:15:02,089 --> 00:15:10,220
<font color="#E5E5E5">the in the next release</font><font color="#CCCCCC"> of GCC</font><font color="#E5E5E5"> and</font>

303
00:15:07,689 --> 00:15:12,589
honestly<font color="#E5E5E5"> I did not even spend much time</font>

304
00:15:10,220 --> 00:15:15,319
you know fine you know<font color="#E5E5E5"> debugging the</font>

305
00:15:12,589 --> 00:15:18,019
<font color="#CCCCCC">compiler</font><font color="#E5E5E5"> back I just I just you know</font>

306
00:15:15,319 --> 00:15:20,240
removed the<font color="#E5E5E5"> piece of the code</font><font color="#CCCCCC"> that was</font>

307
00:15:18,019 --> 00:15:22,970
causing<font color="#E5E5E5"> this bug waited for for an</font>

308
00:15:20,240 --> 00:15:26,240
update of<font color="#E5E5E5"> the compiler and then then it</font>

309
00:15:22,970 --> 00:15:29,120
worked<font color="#E5E5E5"> I'm not a comparator expert so we</font>

310
00:15:26,240 --> 00:15:32,000
would probably it would have to

311
00:15:29,120 --> 00:15:37,880
took me you who have taken<font color="#E5E5E5"> me a lot</font><font color="#CCCCCC"> of</font>

312
00:15:32,000 --> 00:15:41,840
time so and now I finally<font color="#E5E5E5"> got some time</font>

313
00:15:37,880 --> 00:15:44,270
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> back to it so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> what I've</font>

314
00:15:41,840 --> 00:15:47,660
been<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> for like</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> hours in</font>

315
00:15:44,270 --> 00:15:52,060
January so<font color="#E5E5E5"> I decided to switch to</font><font color="#CCCCCC"> the</font>

316
00:15:47,660 --> 00:15:52,060
<font color="#E5E5E5">qmo vert platform which somehow</font>

317
00:15:52,300 --> 00:15:57,469
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to my opinion</font><font color="#E5E5E5"> more reasonable</font>

318
00:15:55,040 --> 00:16:00,770
than<font color="#E5E5E5"> what the spike is providing because</font>

319
00:15:57,470 --> 00:16:02,660
you have you have the platform<font color="#CCCCCC"> interrupt</font>

320
00:16:00,770 --> 00:16:06,230
controller control there you have a

321
00:16:02,660 --> 00:16:08,270
normal UART serial i/o there you can use

322
00:16:06,230 --> 00:16:11,630
you can<font color="#CCCCCC"> use birth I owe for</font><font color="#E5E5E5"> networking</font>

323
00:16:08,270 --> 00:16:15,949
and stuff<font color="#E5E5E5"> like that so so this finally</font>

324
00:16:11,630 --> 00:16:18,890
<font color="#E5E5E5">looks like a decent platform to support</font>

325
00:16:15,950 --> 00:16:21,290
<font color="#CCCCCC">and the to</font><font color="#E5E5E5"> chain</font><font color="#CCCCCC"> or everything</font><font color="#E5E5E5"> is</font>

326
00:16:18,890 --> 00:16:25,730
already upstream so this looks<font color="#E5E5E5"> pretty</font>

327
00:16:21,290 --> 00:16:29,290
usable<font color="#E5E5E5"> right now okay so what are the</font>

328
00:16:25,730 --> 00:16:30,880
lessons learned<font color="#E5E5E5"> from this very brief</font>

329
00:16:29,290 --> 00:16:34,490
experience

330
00:16:30,880 --> 00:16:37,580
first there was surprisingly<font color="#E5E5E5"> very little</font>

331
00:16:34,490 --> 00:16:40,010
interest in<font color="#E5E5E5"> porting</font><font color="#CCCCCC"> on averse to</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> 5</font>

332
00:16:37,580 --> 00:16:42,290
of course you might say<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because</font>

333
00:16:40,010 --> 00:16:43,610
<font color="#E5E5E5">nobody cares about Helena was but I mean</font>

334
00:16:42,290 --> 00:16:47,240
if you compare<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to our previous</font>

335
00:16:43,610 --> 00:16:49,310
<font color="#E5E5E5">porting efforts to Arms Park v9 spar</font><font color="#CCCCCC"> via</font>

336
00:16:47,240 --> 00:16:51,920
<font color="#CCCCCC">eight other platforms there was always a</font>

337
00:16:49,310 --> 00:16:54,020
lot<font color="#CCCCCC"> of interest I would</font><font color="#E5E5E5"> say so so either</font>

338
00:16:51,920 --> 00:16:56,660
<font color="#E5E5E5">in the framework of google Summer of</font>

339
00:16:54,020 --> 00:16:57,230
Code<font color="#E5E5E5"> or in the</font><font color="#CCCCCC"> form</font><font color="#E5E5E5"> of master master</font>

340
00:16:56,660 --> 00:17:00,439
<font color="#CCCCCC">phases</font>

341
00:16:57,230 --> 00:17:03,980
there were people<font color="#E5E5E5"> students who would be</font>

342
00:17:00,440 --> 00:17:05,930
would eagerly<font color="#E5E5E5"> take her</font><font color="#CCCCCC"> know us and port</font>

343
00:17:03,980 --> 00:17:08,540
<font color="#CCCCCC">it to</font><font color="#E5E5E5"> a new platform and there was I</font>

344
00:17:05,930 --> 00:17:12,860
mean<font color="#CCCCCC"> no interest with respect to risk</font><font color="#E5E5E5"> 5</font>

345
00:17:08,540 --> 00:17:16,180
<font color="#E5E5E5">so I mean the only</font><font color="#CCCCCC"> thing that was</font><font color="#E5E5E5"> done</font>

346
00:17:12,859 --> 00:17:20,869
was done by me in my<font color="#E5E5E5"> very very very</font>

347
00:17:16,180 --> 00:17:22,790
<font color="#CCCCCC">precious free time</font><font color="#E5E5E5"> and I'm an heiress</font>

348
00:17:20,869 --> 00:17:23,899
<font color="#CCCCCC">chorus</font><font color="#E5E5E5"> 5</font><font color="#CCCCCC"> enthusiast but I just don't</font>

349
00:17:22,790 --> 00:17:28,220
<font color="#E5E5E5">have the time to do it</font>

350
00:17:23,900 --> 00:17:32,180
<font color="#CCCCCC">so what what are</font><font color="#E5E5E5"> the reasons</font><font color="#CCCCCC"> I I believe</font>

351
00:17:28,220 --> 00:17:36,350
<font color="#E5E5E5">that there are two first like I've</font>

352
00:17:32,180 --> 00:17:38,900
already<font color="#E5E5E5"> said there is still</font><font color="#CCCCCC"> no nice</font>

353
00:17:36,350 --> 00:17:42,889
<font color="#E5E5E5">reference platform that would actually</font>

354
00:17:38,900 --> 00:17:45,350
provide you know interesting feature

355
00:17:42,890 --> 00:17:48,350
more interesting<font color="#CCCCCC"> than a serial console</font>

356
00:17:45,350 --> 00:17:50,870
<font color="#E5E5E5">so I mean obviously</font><font color="#CCCCCC"> people nowadays</font><font color="#E5E5E5"> are</font>

357
00:17:48,350 --> 00:17:52,789
not interested in in in seeing hello

358
00:17:50,870 --> 00:17:55,250
world<font color="#CCCCCC"> for</font><font color="#E5E5E5"> most</font><font color="#CCCCCC"> real console they want to</font>

359
00:17:52,789 --> 00:17:57,770
have HDMI they want to have us<font color="#E5E5E5"> be they</font>

360
00:17:55,250 --> 00:18:01,669
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> the networking stuff like</font>

361
00:17:57,770 --> 00:18:05,299
that and that would<font color="#E5E5E5"> be easier to achieve</font>

362
00:18:01,669 --> 00:18:06,200
<font color="#E5E5E5">if there would be actually an easily</font>

363
00:18:05,299 --> 00:18:11,750
accessible

364
00:18:06,200 --> 00:18:13,460
I mean costs<font color="#CCCCCC"> development board that that</font>

365
00:18:11,750 --> 00:18:16,399
<font color="#E5E5E5">would provide those features so</font>

366
00:18:13,460 --> 00:18:21,260
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> a Raspberry Pi for risk</font><font color="#CCCCCC"> 5</font>

367
00:18:16,399 --> 00:18:23,289
with with a powerful<font color="#CCCCCC"> off risk</font><font color="#E5E5E5"> 5 CPU</font>

368
00:18:21,260 --> 00:18:25,158
supporting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> c2 supervisor mode and</font>

369
00:18:23,289 --> 00:18:28,190
for a reasonable<font color="#CCCCCC"> price</font>

370
00:18:25,159 --> 00:18:33,080
yes of<font color="#CCCCCC"> course you</font><font color="#E5E5E5"> can have</font><font color="#CCCCCC"> size 5 board</font>

371
00:18:28,190 --> 00:18:36,529
for<font color="#E5E5E5"> I don't know</font><font color="#CCCCCC"> $1000 but I mean that</font>

372
00:18:33,080 --> 00:18:39,799
that's too expensive<font color="#CCCCCC"> so once this is</font>

373
00:18:36,529 --> 00:18:42,890
<font color="#E5E5E5">solved I would say that it could be</font>

374
00:18:39,799 --> 00:18:46,010
generalized that the risk 5 would get

375
00:18:42,890 --> 00:18:49,779
much more intention and eruption<font color="#E5E5E5"> by by</font>

376
00:18:46,010 --> 00:18:55,279
<font color="#CCCCCC">hobus by students by researchers because</font>

377
00:18:49,779 --> 00:18:58,039
they just<font color="#E5E5E5"> need to you know it's really</font>

378
00:18:55,279 --> 00:19:01,820
<font color="#E5E5E5">hard to explain even</font><font color="#CCCCCC"> to your boss that</font>

379
00:18:58,039 --> 00:19:08,919
this<font color="#E5E5E5"> this hello world</font><font color="#CCCCCC"> printout</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> cue</font>

380
00:19:01,820 --> 00:19:08,918
like<font color="#CCCCCC"> 2 weeks of porting</font><font color="#E5E5E5"> or coding and</font>

381
00:19:09,279 --> 00:19:15,590
<font color="#E5E5E5">there's one other thing yes and so this</font>

382
00:19:12,830 --> 00:19:18,850
this<font color="#CCCCCC"> is something</font><font color="#E5E5E5"> I would</font><font color="#CCCCCC"> like to spend</font>

383
00:19:15,590 --> 00:19:23,059
<font color="#E5E5E5">the rest of my talks speaking about that</font>

384
00:19:18,850 --> 00:19:25,399
<font color="#CCCCCC">there has been very little according</font><font color="#E5E5E5"> to</font>

385
00:19:23,059 --> 00:19:27,139
my opinion<font color="#E5E5E5"> input from the operating</font>

386
00:19:25,399 --> 00:19:30,469
<font color="#CCCCCC">system guys to do risk 5 specification</font>

387
00:19:27,140 --> 00:19:33,140
<font color="#CCCCCC">and therefore from this point of view</font>

388
00:19:30,470 --> 00:19:36,520
from a point of<font color="#E5E5E5"> view</font><font color="#CCCCCC"> of for microkernel</font>

389
00:19:33,140 --> 00:19:39,020
operating system risk 5 does not<font color="#E5E5E5"> bring</font>

390
00:19:36,520 --> 00:19:42,470
anything new to the table<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a</font>

391
00:19:39,020 --> 00:19:45,500
pity because how many<font color="#E5E5E5"> times</font><font color="#CCCCCC"> how many</font>

392
00:19:42,470 --> 00:19:48,590
<font color="#CCCCCC">opportunities in your lifetime</font><font color="#E5E5E5"> do you</font>

393
00:19:45,500 --> 00:19:51,110
get to come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> a new instruction</font>

394
00:19:48,590 --> 00:19:53,120
set architecture that might actually get

395
00:19:51,110 --> 00:19:55,908
<font color="#CCCCCC">some you know</font><font color="#E5E5E5"> industrial traction that</font>

396
00:19:53,120 --> 00:19:58,120
might actually be adapted by by by the

397
00:19:55,909 --> 00:20:03,500
big player

398
00:19:58,120 --> 00:20:06,219
how many times do<font color="#E5E5E5"> get the chance</font><font color="#CCCCCC"> so why</font>

399
00:20:03,500 --> 00:20:08,930
do why do I think this<font color="#E5E5E5"> is it this</font><font color="#CCCCCC"> is</font>

400
00:20:06,220 --> 00:20:12,680
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that risk wife might</font><font color="#E5E5E5"> focus</font>

401
00:20:08,930 --> 00:20:15,110
more on the microkernel<font color="#E5E5E5"> idea I have</font>

402
00:20:12,680 --> 00:20:17,540
spoken about in all this<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> fine</font>

403
00:20:15,110 --> 00:20:20,959
grained components isolation<font color="#CCCCCC"> blast</font>

404
00:20:17,540 --> 00:20:24,530
<font color="#E5E5E5">radius limitation this</font><font color="#CCCCCC"> is definitely not</font>

405
00:20:20,960 --> 00:20:31,340
a new idea<font color="#CCCCCC"> it has been around since</font><font color="#E5E5E5"> at</font>

406
00:20:24,530 --> 00:20:33,670
<font color="#CCCCCC">least</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end of 1960s</font><font color="#E5E5E5"> and it has actual</font>

407
00:20:31,340 --> 00:20:38,139
benefits for safety security

408
00:20:33,670 --> 00:20:41,360
dependability<font color="#CCCCCC"> that let me</font><font color="#E5E5E5"> let me just</font>

409
00:20:38,140 --> 00:20:44,290
skip to<font color="#E5E5E5"> to this slide</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> of the</font>

410
00:20:41,360 --> 00:20:47,179
benefits were so far somewhat

411
00:20:44,290 --> 00:20:50,090
questionable<font color="#E5E5E5"> because there were more or</font>

412
00:20:47,180 --> 00:20:55,220
<font color="#CCCCCC">less just qualitative benefits</font><font color="#E5E5E5"> but now</font>

413
00:20:50,090 --> 00:20:57,590
<font color="#E5E5E5">there there's actual quantitative</font><font color="#CCCCCC"> proved</font>

414
00:20:55,220 --> 00:21:03,740
that<font color="#E5E5E5"> these benefits of the microkernel</font>

415
00:20:57,590 --> 00:21:05,899
<font color="#CCCCCC">design is is there that the benefits are</font>

416
00:21:03,740 --> 00:21:09,100
<font color="#E5E5E5">there so there has</font><font color="#CCCCCC"> been there have been</font>

417
00:21:05,900 --> 00:21:11,030
there has been a study published at a

418
00:21:09,100 --> 00:21:16,659
peer-reviewed scientific conference

419
00:21:11,030 --> 00:21:20,180
which which basically<font color="#E5E5E5"> analyzed some</font>

420
00:21:16,660 --> 00:21:24,170
critical vulnerabilities in Linux<font color="#E5E5E5"> and</font>

421
00:21:20,180 --> 00:21:27,890
<font color="#E5E5E5">examined them how they would have been</font>

422
00:21:24,170 --> 00:21:30,740
mitigated or<font color="#E5E5E5"> prevented by microkernel</font>

423
00:21:27,890 --> 00:21:34,040
based design<font color="#E5E5E5"> and you can here you</font><font color="#CCCCCC"> can</font>

424
00:21:30,740 --> 00:21:35,720
read here<font color="#CCCCCC"> forty percent</font><font color="#E5E5E5"> of those</font>

425
00:21:34,040 --> 00:21:37,730
vulnerabilities would be completely

426
00:21:35,720 --> 00:21:40,370
<font color="#E5E5E5">eliminated by an operating</font><font color="#CCCCCC"> system</font>

427
00:21:37,730 --> 00:21:44,510
designed based on<font color="#CCCCCC"> a verified microkernel</font>

428
00:21:40,370 --> 00:21:48,260
<font color="#E5E5E5">such as</font><font color="#CCCCCC"> SEO for</font><font color="#E5E5E5"> in this case so I mean</font>

429
00:21:44,510 --> 00:21:49,730
there<font color="#E5E5E5"> are huge benefits of having a</font>

430
00:21:48,260 --> 00:21:51,850
proper<font color="#E5E5E5"> software architecture</font><font color="#CCCCCC"> under</font>

431
00:21:49,730 --> 00:21:55,480
<font color="#CCCCCC">system model</font>

432
00:21:51,850 --> 00:21:57,500
and obviously<font color="#CCCCCC"> this is not this is not</font>

433
00:21:55,480 --> 00:22:03,080
this is<font color="#CCCCCC"> for a price</font>

434
00:21:57,500 --> 00:22:05,450
so the price that you that we pay for

435
00:22:03,080 --> 00:22:07,990
for these benefits<font color="#E5E5E5"> is the performance</font>

436
00:22:05,450 --> 00:22:07,990
<font color="#E5E5E5">overhead</font>

437
00:22:08,420 --> 00:22:13,320
there has<font color="#E5E5E5"> been a huge effort in the last</font>

438
00:22:10,890 --> 00:22:15,720
<font color="#E5E5E5">25 years to make this performance</font>

439
00:22:13,320 --> 00:22:20,760
overhead<font color="#E5E5E5"> as small as possible</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> the</font>

440
00:22:15,720 --> 00:22:23,640
whole the<font color="#CCCCCC"> the whole effort of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> l44</font>

441
00:22:20,760 --> 00:22:26,100
people in<font color="#E5E5E5"> various projects was</font><font color="#CCCCCC"> to make</font>

442
00:22:23,640 --> 00:22:27,750
this<font color="#E5E5E5"> this overhead as small as</font><font color="#CCCCCC"> possible</font>

443
00:22:26,100 --> 00:22:30,120
<font color="#E5E5E5">but the overhead is still there</font><font color="#CCCCCC"> because</font>

444
00:22:27,750 --> 00:22:33,630
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you would like to if you</font>

445
00:22:30,120 --> 00:22:36,239
<font color="#CCCCCC">would like to</font><font color="#E5E5E5"> run a single file system</font>

446
00:22:33,630 --> 00:22:39,540
related<font color="#CCCCCC"> operation such as</font><font color="#E5E5E5"> open file or</font>

447
00:22:36,240 --> 00:22:41,670
<font color="#E5E5E5">read</font><font color="#CCCCCC"> read block of</font><font color="#E5E5E5"> a file you know you</font>

448
00:22:39,540 --> 00:22:44,730
know microkernel multi server design<font color="#E5E5E5"> you</font>

449
00:22:41,670 --> 00:22:48,600
need to talk<font color="#E5E5E5"> to some location or naming</font>

450
00:22:44,730 --> 00:22:50,670
<font color="#E5E5E5">service then you need to talk to to a</font>

451
00:22:48,600 --> 00:22:52,730
virtual file system service then you

452
00:22:50,670 --> 00:22:55,500
<font color="#E5E5E5">need to talk to the file system driver</font>

453
00:22:52,730 --> 00:22:58,080
then potentially this power system

454
00:22:55,500 --> 00:23:00,270
driver will forward you to to a block

455
00:22:58,080 --> 00:23:03,510
<font color="#CCCCCC">device driver and so on so so you have</font>

456
00:23:00,270 --> 00:23:06,180
<font color="#E5E5E5">the this overhead of</font><font color="#CCCCCC"> the of the IPC</font>

457
00:23:03,510 --> 00:23:09,900
between those isolated components the

458
00:23:06,180 --> 00:23:15,860
isolation has its cost<font color="#E5E5E5"> and the question</font>

459
00:23:09,900 --> 00:23:15,860
is whether it has<font color="#CCCCCC"> to be like that I</font>

460
00:23:17,090 --> 00:23:27,540
believe<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the the</font><font color="#CCCCCC"> cost is being</font>

461
00:23:22,800 --> 00:23:29,940
caused by the fact that the CPUs<font color="#E5E5E5"> have</font>

462
00:23:27,540 --> 00:23:32,690
been designed so far<font color="#E5E5E5"> just with the</font>

463
00:23:29,940 --> 00:23:35,280
monolithic operating systems in mind<font color="#CCCCCC"> and</font>

464
00:23:32,690 --> 00:23:37,880
again<font color="#E5E5E5"> I'm not blaming anybody I mean it</font>

465
00:23:35,280 --> 00:23:40,710
is more was natural because you know

466
00:23:37,880 --> 00:23:43,140
designing<font color="#E5E5E5"> the new CPU or instruction set</font>

467
00:23:40,710 --> 00:23:47,750
architecture<font color="#E5E5E5"> used to be a very complex</font>

468
00:23:43,140 --> 00:23:50,850
task<font color="#CCCCCC"> it used</font><font color="#E5E5E5"> to be very expensive</font><font color="#CCCCCC"> and</font>

469
00:23:47,750 --> 00:23:53,520
people<font color="#E5E5E5"> naturally you know designed the</font>

470
00:23:50,850 --> 00:23:56,129
new CPUs according<font color="#E5E5E5"> to the requirements</font>

471
00:23:53,520 --> 00:23:58,860
for the old CPUs and then the<font color="#E5E5E5"> operating</font>

472
00:23:56,130 --> 00:24:02,100
system guys were just<font color="#CCCCCC"> were just</font><font color="#E5E5E5"> facing</font>

473
00:23:58,860 --> 00:24:04,500
<font color="#E5E5E5">with with what they got and I mean the</font>

474
00:24:02,100 --> 00:24:08,310
<font color="#CCCCCC">the monolithic design was performing</font>

475
00:24:04,500 --> 00:24:10,140
much<font color="#CCCCCC"> better</font><font color="#E5E5E5"> on it so let's switch the</font>

476
00:24:08,310 --> 00:24:14,370
gears<font color="#CCCCCC"> or write the reverse the process</font>

477
00:24:10,140 --> 00:24:17,010
<font color="#E5E5E5">let's try to design the the CPUs with</font>

478
00:24:14,370 --> 00:24:21,479
the requirements of<font color="#E5E5E5"> the micro kernels in</font>

479
00:24:17,010 --> 00:24:26,360
mind<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that the the CPU will be</font><font color="#CCCCCC"> able</font>

480
00:24:21,480 --> 00:24:30,030
to provide abstractions or instructions

481
00:24:26,360 --> 00:24:35,520
mechanisms that will help the<font color="#CCCCCC"> micro car</font>

482
00:24:30,030 --> 00:24:38,639
<font color="#CCCCCC">owners perform as nicely as the monolith</font>

483
00:24:35,520 --> 00:24:43,110
monolithic kernels<font color="#E5E5E5"> while keeping all the</font>

484
00:24:38,640 --> 00:24:46,110
nice<font color="#E5E5E5"> safety and security features</font><font color="#CCCCCC"> and I</font>

485
00:24:43,110 --> 00:24:48,449
will present<font color="#E5E5E5"> a few</font><font color="#CCCCCC"> ideas I won't go into</font>

486
00:24:46,110 --> 00:24:51,899
too<font color="#CCCCCC"> much details because first we</font><font color="#E5E5E5"> don't</font>

487
00:24:48,450 --> 00:24:54,600
have the time<font color="#CCCCCC"> and second</font><font color="#E5E5E5"> I mean I would</font>

488
00:24:51,900 --> 00:24:57,690
probably<font color="#E5E5E5"> rather spark a discussion</font><font color="#CCCCCC"> than</font>

489
00:24:54,600 --> 00:25:01,559
present something<font color="#E5E5E5"> I I'm sure it's gonna</font>

490
00:24:57,690 --> 00:25:04,580
<font color="#CCCCCC">work but these are a few ideas so for</font>

491
00:25:01,559 --> 00:25:08,760
<font color="#E5E5E5">example we would like to optimize the</font>

492
00:25:04,580 --> 00:25:11,730
IPC itself<font color="#E5E5E5"> where's where's the problem</font>

493
00:25:08,760 --> 00:25:14,129
<font color="#CCCCCC">in a monolithic system if one subsystem</font>

494
00:25:11,730 --> 00:25:16,799
<font color="#E5E5E5">is calling into a different subsystem</font>

495
00:25:14,130 --> 00:25:21,570
<font color="#E5E5E5">all it does is a normal function call so</font>

496
00:25:16,799 --> 00:25:25,799
<font color="#E5E5E5">so there is a some passing of arguments</font>

497
00:25:21,570 --> 00:25:29,040
<font color="#E5E5E5">in registers or on stack</font><font color="#CCCCCC"> and the code is</font>

498
00:25:25,799 --> 00:25:31,679
free to pass point<font color="#E5E5E5"> direct pointers to</font>

499
00:25:29,040 --> 00:25:33,899
data structures so so this<font color="#E5E5E5"> is this is</font>

500
00:25:31,679 --> 00:25:36,270
efficient and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> unsecured because all</font>

501
00:25:33,900 --> 00:25:37,890
the reasons we have already discussed<font color="#CCCCCC"> in</font>

502
00:25:36,270 --> 00:25:40,950
a microkernel<font color="#CCCCCC"> multi server design you</font>

503
00:25:37,890 --> 00:25:43,110
need to do<font color="#E5E5E5"> two IPC which means that you</font>

504
00:25:40,950 --> 00:25:45,990
<font color="#E5E5E5">have to call some</font><font color="#CCCCCC"> karna Cisco's which</font>

505
00:25:43,110 --> 00:25:49,020
will will pass some arguments<font color="#E5E5E5"> in</font>

506
00:25:45,990 --> 00:25:51,360
registers again but the set of registers

507
00:25:49,020 --> 00:25:53,790
you are allowed<font color="#CCCCCC"> to use is so naturalist</font>

508
00:25:51,360 --> 00:25:55,590
<font color="#E5E5E5">some would limit</font><font color="#CCCCCC"> it there is the the</font>

509
00:25:53,790 --> 00:25:58,500
privilege level switch to address space

510
00:25:55,590 --> 00:26:02,040
switch between those two components<font color="#E5E5E5"> if</font>

511
00:25:58,500 --> 00:26:05,730
if the IPC is<font color="#E5E5E5"> asynchronous</font><font color="#CCCCCC"> there is some</font>

512
00:26:02,040 --> 00:26:08,340
scheduling involved and if bulk data

513
00:26:05,730 --> 00:26:10,620
<font color="#E5E5E5">needs to</font><font color="#CCCCCC"> be transferred the</font><font color="#E5E5E5"> data needs</font>

514
00:26:08,340 --> 00:26:12,600
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> copied between the other spaces</font><font color="#E5E5E5"> or</font>

515
00:26:10,620 --> 00:26:17,159
there needs to be some memory sharing

516
00:26:12,600 --> 00:26:20,129
established so where the CPU<font color="#E5E5E5"> could</font>

517
00:26:17,160 --> 00:26:24,240
actually help I mean why not why not

518
00:26:20,130 --> 00:26:26,460
design<font color="#E5E5E5"> and extend it jump</font><font color="#CCCCCC"> all call</font>

519
00:26:24,240 --> 00:26:29,010
instructions and of course also return

520
00:26:26,460 --> 00:26:33,150
instructions that would actually<font color="#CCCCCC"> also do</font>

521
00:26:29,010 --> 00:26:35,129
the address space switch so so imagine

522
00:26:33,150 --> 00:26:37,650
<font color="#CCCCCC">something like a Colgate</font>

523
00:26:35,130 --> 00:26:40,470
which would be<font color="#CCCCCC"> basically like a calling</font>

524
00:26:37,650 --> 00:26:42,690
capability<font color="#E5E5E5"> that would identify the</font>

525
00:26:40,470 --> 00:26:46,050
target address space and the target

526
00:26:42,690 --> 00:26:49,380
program counter of the of the server IPC

527
00:26:46,050 --> 00:26:51,450
<font color="#E5E5E5">handler and this could be implemented on</font>

528
00:26:49,380 --> 00:26:55,350
<font color="#CCCCCC">the</font><font color="#E5E5E5"> hardware level for</font><font color="#CCCCCC"> example like like</font>

529
00:26:51,450 --> 00:26:57,720
a<font color="#E5E5E5"> cache something like</font><font color="#CCCCCC"> TOB TOB cache</font>

530
00:26:55,350 --> 00:26:59,580
cache<font color="#E5E5E5"> structure which will be populated</font>

531
00:26:57,720 --> 00:27:02,100
<font color="#E5E5E5">by by the microkernel</font>

532
00:26:59,580 --> 00:27:06,810
<font color="#E5E5E5">so again the microkernel will be fully</font>

533
00:27:02,100 --> 00:27:10,409
in<font color="#CCCCCC"> charge in will be fully in charge of</font>

534
00:27:06,810 --> 00:27:13,050
deciding which you know which client can

535
00:27:10,410 --> 00:27:16,290
call which server but for for the most

536
00:27:13,050 --> 00:27:20,490
<font color="#E5E5E5">frequent calls this the mechanism will</font>

537
00:27:16,290 --> 00:27:24,750
will be streamlined streamlined by the

538
00:27:20,490 --> 00:27:27,150
<font color="#E5E5E5">hardware so so the context switching and</font>

539
00:27:24,750 --> 00:27:30,360
<font color="#E5E5E5">and address</font><font color="#CCCCCC"> based su switching will be</font>

540
00:27:27,150 --> 00:27:32,640
done by the hardware<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the a</font>

541
00:27:30,360 --> 00:27:36,600
synchronous IPC<font color="#CCCCCC"> where where there is the</font>

542
00:27:32,640 --> 00:27:38,940
<font color="#E5E5E5">need to somehow buffer the the the</font>

543
00:27:36,600 --> 00:27:41,219
payload of<font color="#CCCCCC"> the message this could be</font>

544
00:27:38,940 --> 00:27:44,460
also<font color="#E5E5E5"> streamlined</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> hardware by by</font>

545
00:27:41,220 --> 00:27:48,510
using cache lines as the buffers<font color="#CCCCCC"> so the</font>

546
00:27:44,460 --> 00:27:57,660
data would not<font color="#CCCCCC"> even need to go to to the</font>

547
00:27:48,510 --> 00:27:59,820
to the main<font color="#CCCCCC"> memory yeah sorry well I</font>

548
00:27:57,660 --> 00:28:03,530
mean I'm<font color="#E5E5E5"> not saying it's different I'm</font>

549
00:27:59,820 --> 00:28:06,570
saying it goes beyond<font color="#E5E5E5"> what has been done</font>

550
00:28:03,530 --> 00:28:08,399
again these ideas are not not<font color="#E5E5E5"> floating</font>

551
00:28:06,570 --> 00:28:10,620
in the air<font color="#E5E5E5"> these</font><font color="#CCCCCC"> ideas</font><font color="#E5E5E5"> are more or</font><font color="#CCCCCC"> less</font>

552
00:28:08,400 --> 00:28:15,300
based on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> optimization</font><font color="#E5E5E5"> techniques</font>

553
00:28:10,620 --> 00:28:18,510
that has been done by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel</font>

554
00:28:15,300 --> 00:28:21,600
developers over<font color="#E5E5E5"> the past 25</font><font color="#CCCCCC"> years where</font>

555
00:28:18,510 --> 00:28:24,540
they actually try to<font color="#E5E5E5"> you to squeeze you</font>

556
00:28:21,600 --> 00:28:27,570
know as much<font color="#E5E5E5"> CPU cycles from from the</font>

557
00:28:24,540 --> 00:28:31,680
<font color="#CCCCCC">sea or from from</font><font color="#E5E5E5"> from from the course as</font>

558
00:28:27,570 --> 00:28:35,280
possible but I mean my<font color="#CCCCCC"> point is that</font><font color="#E5E5E5"> if</font>

559
00:28:31,680 --> 00:28:38,190
the<font color="#CCCCCC"> CPU would be more helpful</font><font color="#E5E5E5"> or would</font>

560
00:28:35,280 --> 00:28:40,830
provide more<font color="#E5E5E5"> of the more you know space</font>

561
00:28:38,190 --> 00:28:43,980
for optimization<font color="#E5E5E5"> the the overhead might</font>

562
00:28:40,830 --> 00:28:45,629
be even<font color="#E5E5E5"> lower or may be ideally</font><font color="#CCCCCC"> zero so</font>

563
00:28:43,980 --> 00:28:48,030
I mean I'm not saying it's different<font color="#E5E5E5"> I'm</font>

564
00:28:45,630 --> 00:28:48,720
saying<font color="#E5E5E5"> I mean we are talking about the</font>

565
00:28:48,030 --> 00:28:51,570
same direction

566
00:28:48,720 --> 00:28:54,120
but let's think<font color="#E5E5E5"> about actual</font><font color="#CCCCCC"> hardware</font>

567
00:28:51,570 --> 00:28:58,350
mechanisms to make them make this more

568
00:28:54,120 --> 00:29:01,320
<font color="#CCCCCC">optimum and you know generally speaking</font>

569
00:28:58,350 --> 00:29:04,500
<font color="#E5E5E5">pinning pinning workloads</font><font color="#CCCCCC"> to course is</font>

570
00:29:01,320 --> 00:29:12,060
<font color="#E5E5E5">possible but we would also like</font><font color="#CCCCCC"> to have</font>

571
00:29:04,500 --> 00:29:13,050
efficient cross core IPC okay what about

572
00:29:12,060 --> 00:29:16,350
the bulk data

573
00:29:13,050 --> 00:29:18,930
so<font color="#E5E5E5"> again this is not such a great issue</font>

574
00:29:16,350 --> 00:29:20,909
nowadays<font color="#CCCCCC"> because my name microkernels</font>

575
00:29:18,930 --> 00:29:25,050
such as her<font color="#CCCCCC"> newest implement memory</font>

576
00:29:20,910 --> 00:29:28,440
sharing<font color="#CCCCCC"> to to</font><font color="#E5E5E5"> efficiently transfer large</font>

577
00:29:25,050 --> 00:29:31,889
amounts<font color="#CCCCCC"> of data between other spaces</font><font color="#E5E5E5"> the</font>

578
00:29:28,440 --> 00:29:34,640
problem is that this memory sharing

579
00:29:31,890 --> 00:29:37,230
needs to be established<font color="#E5E5E5"> and if this</font>

580
00:29:34,640 --> 00:29:39,300
establishment and possibly the teardown

581
00:29:37,230 --> 00:29:42,510
<font color="#E5E5E5">of this is happening too often</font>

582
00:29:39,300 --> 00:29:45,590
<font color="#E5E5E5">this causes the overhead and also that I</font>

583
00:29:42,510 --> 00:29:49,920
need to be<font color="#CCCCCC"> patient which is it's a minor</font>

584
00:29:45,590 --> 00:29:53,490
minor trouble so again how about having

585
00:29:49,920 --> 00:29:55,980
<font color="#E5E5E5">an additional memory making mapping</font>

586
00:29:53,490 --> 00:30:00,450
mechanism in the CPU<font color="#CCCCCC"> that would allow</font>

587
00:29:55,980 --> 00:30:03,540
for<font color="#CCCCCC"> example to do fine-grained</font><font color="#E5E5E5"> mapping</font>

588
00:30:00,450 --> 00:30:06,540
from from virtual addresses to cache

589
00:30:03,540 --> 00:30:07,230
lines<font color="#CCCCCC"> directly so cache lines are pretty</font>

590
00:30:06,540 --> 00:30:11,670
small

591
00:30:07,230 --> 00:30:14,910
something like 64 or 128 bytes so this

592
00:30:11,670 --> 00:30:17,520
would be ideal<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> sharing of you</font>

593
00:30:14,910 --> 00:30:19,470
know smaller data structures<font color="#E5E5E5"> ad hoc</font>

594
00:30:17,520 --> 00:30:24,840
sharing of data structures<font color="#CCCCCC"> between the</font>

595
00:30:19,470 --> 00:30:28,050
other spaces what<font color="#E5E5E5"> about the problem</font><font color="#CCCCCC"> of</font>

596
00:30:24,840 --> 00:30:30,659
<font color="#E5E5E5">the context switching again this is I</font>

597
00:30:28,050 --> 00:30:32,820
mean most of<font color="#E5E5E5"> the CP optimizations again</font>

598
00:30:30,660 --> 00:30:36,180
in the recent viewers have<font color="#E5E5E5"> been</font>

599
00:30:32,820 --> 00:30:39,300
targeting<font color="#E5E5E5"> the problem of hardware</font>

600
00:30:36,180 --> 00:30:43,290
<font color="#E5E5E5">licenses so we have we have we have</font>

601
00:30:39,300 --> 00:30:47,129
<font color="#E5E5E5">caches to to hide nanosecond latencies</font>

602
00:30:43,290 --> 00:30:50,540
of<font color="#E5E5E5"> the DRAM we have software caches like</font>

603
00:30:47,130 --> 00:30:55,560
you know IO buffers to<font color="#E5E5E5"> hide hide</font>

604
00:30:50,540 --> 00:30:59,370
millisecond<font color="#CCCCCC"> licensees of these beliefs</font>

605
00:30:55,560 --> 00:31:01,860
and SSDs<font color="#E5E5E5"> but what about the microsecond</font>

606
00:30:59,370 --> 00:31:05,639
latencies<font color="#E5E5E5"> of the context</font><font color="#CCCCCC"> switching</font>

607
00:31:01,860 --> 00:31:07,860
there are there<font color="#E5E5E5"> are mechanisms to to to</font>

608
00:31:05,640 --> 00:31:12,120
solve this like<font color="#CCCCCC"> hardware multi-threading</font>

609
00:31:07,860 --> 00:31:15,149
which<font color="#E5E5E5"> is very effective in doing that</font>

610
00:31:12,120 --> 00:31:17,340
but you know<font color="#E5E5E5"> usually in currency</font><font color="#CCCCCC"> puce</font>

611
00:31:15,150 --> 00:31:21,299
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> just a fixed</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of our</font>

612
00:31:17,340 --> 00:31:23,549
<font color="#CCCCCC">Hardware rights</font><font color="#E5E5E5"> and you have to use so</font>

613
00:31:21,299 --> 00:31:27,120
software<font color="#E5E5E5"> based context switching to have</font>

614
00:31:23,549 --> 00:31:28,470
more so how about finding<font color="#E5E5E5"> or designing a</font>

615
00:31:27,120 --> 00:31:32,370
mechanism that<font color="#E5E5E5"> would combine the</font>

616
00:31:28,470 --> 00:31:36,179
benefits<font color="#E5E5E5"> of both so something like</font>

617
00:31:32,370 --> 00:31:39,840
<font color="#E5E5E5">hardware hardware cache for for thread</font>

618
00:31:36,179 --> 00:31:43,530
context that would scale to a reasonable

619
00:31:39,840 --> 00:31:46,620
amount of contacts<font color="#E5E5E5"> and delegate</font>

620
00:31:43,530 --> 00:31:49,260
instructions to store restore and switch

621
00:31:46,620 --> 00:31:52,290
those contacts this could be possibly

622
00:31:49,260 --> 00:31:54,150
<font color="#E5E5E5">optimized for for the ABI</font><font color="#CCCCCC"> because you</font>

623
00:31:52,290 --> 00:31:57,659
<font color="#E5E5E5">don't necessarily need to save all</font><font color="#CCCCCC"> the</font>

624
00:31:54,150 --> 00:32:03,090
order registers<font color="#E5E5E5"> in all cases and it</font>

625
00:31:57,660 --> 00:32:05,340
would also help with for example<font color="#CCCCCC"> if</font>

626
00:32:03,090 --> 00:32:07,110
combined with some autonomous mechanisms

627
00:32:05,340 --> 00:32:09,899
for example triggering the<font color="#CCCCCC"> contact</font>

628
00:32:07,110 --> 00:32:12,149
<font color="#CCCCCC">switch</font><font color="#E5E5E5"> by some some event like an</font>

629
00:32:09,900 --> 00:32:15,720
external<font color="#CCCCCC"> interrupt</font><font color="#E5E5E5"> this could this could</font>

630
00:32:12,150 --> 00:32:18,390
again<font color="#E5E5E5"> eliminate the round trip to the to</font>

631
00:32:15,720 --> 00:32:20,910
the kernel and doing the<font color="#E5E5E5"> context</font>

632
00:32:18,390 --> 00:32:22,919
<font color="#CCCCCC">switching software</font><font color="#E5E5E5"> obviously we need to</font>

633
00:32:20,910 --> 00:32:24,929
<font color="#CCCCCC">be careful because</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't want to</font>

634
00:32:22,919 --> 00:32:27,120
implement<font color="#E5E5E5"> some</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of kind of hardware</font>

635
00:32:24,929 --> 00:32:30,120
scheduler or<font color="#CCCCCC"> hardware scheduling policy</font>

636
00:32:27,120 --> 00:32:33,000
that<font color="#E5E5E5"> this would be probably disasters so</font>

637
00:32:30,120 --> 00:32:36,299
again we would<font color="#E5E5E5"> just like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have the</font>

638
00:32:33,000 --> 00:32:40,320
mechanism in the hardware but let it<font color="#E5E5E5"> be</font>

639
00:32:36,299 --> 00:32:43,490
controlled<font color="#E5E5E5"> by the software and if</font>

640
00:32:40,320 --> 00:32:46,379
combined with with some kind of

641
00:32:43,490 --> 00:32:49,169
simultaneous multi multi threading<font color="#E5E5E5"> this</font>

642
00:32:46,380 --> 00:32:52,020
could very efficiently<font color="#CCCCCC"> even you</font><font color="#E5E5E5"> know MA</font>

643
00:32:49,169 --> 00:32:53,910
you know what<font color="#E5E5E5"> mask the</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> nanosecond</font>

644
00:32:52,020 --> 00:32:58,580
like<font color="#CCCCCC"> and</font><font color="#E5E5E5"> latency is like on the caches</font>

645
00:32:53,910 --> 00:33:01,799
and parts<font color="#E5E5E5"> of the of the of the course</font>

646
00:32:58,580 --> 00:33:03,960
user space<font color="#CCCCCC"> interrupt processing if we</font>

647
00:33:01,799 --> 00:33:06,990
have user space device drivers in a

648
00:33:03,960 --> 00:33:11,130
<font color="#E5E5E5">microkernel based operating system we</font>

649
00:33:06,990 --> 00:33:12,960
<font color="#E5E5E5">always have this unpleasant round trip</font>

650
00:33:11,130 --> 00:33:15,060
through can or kernel where each

651
00:33:12,960 --> 00:33:18,300
interrupt<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to be first handle</font>

652
00:33:15,060 --> 00:33:20,190
<font color="#E5E5E5">by by the kernel space then the kernel</font>

653
00:33:18,300 --> 00:33:23,220
space generates some IPC message which

654
00:33:20,190 --> 00:33:26,310
<font color="#CCCCCC">is then forwarded to to the</font><font color="#E5E5E5"> user space</font>

655
00:33:23,220 --> 00:33:30,360
<font color="#E5E5E5">user space driver why there could be a</font>

656
00:33:26,310 --> 00:33:32,810
<font color="#CCCCCC">mechanism to</font><font color="#E5E5E5"> directly deliver the the</font>

657
00:33:30,360 --> 00:33:36,179
event to the use of<font color="#E5E5E5"> space device driver</font>

658
00:33:32,810 --> 00:33:39,260
<font color="#E5E5E5">of course there's you there's the normal</font>

659
00:33:36,180 --> 00:33:41,880
<font color="#E5E5E5">pain point of level tricked interrupts</font>

660
00:33:39,260 --> 00:33:44,430
<font color="#CCCCCC">but again I believe</font><font color="#E5E5E5"> there there are ways</font>

661
00:33:41,880 --> 00:33:46,290
<font color="#CCCCCC">how this could</font><font color="#E5E5E5"> be handled by for example</font>

662
00:33:44,430 --> 00:33:48,690
<font color="#E5E5E5">automatically masking the</font><font color="#CCCCCC"> interrupt</font>

663
00:33:46,290 --> 00:33:51,720
source<font color="#E5E5E5"> in the in the platform interrupt</font>

664
00:33:48,690 --> 00:33:54,240
controller in those cases<font color="#E5E5E5"> and this would</font>

665
00:33:51,720 --> 00:33:56,700
you know<font color="#CCCCCC"> not only</font><font color="#E5E5E5"> lower the the overhead</font>

666
00:33:54,240 --> 00:34:01,140
of<font color="#CCCCCC"> having device drivers in user space</font>

667
00:33:56,700 --> 00:34:05,100
<font color="#E5E5E5">but it might</font><font color="#CCCCCC"> also you know finally fix</font>

668
00:34:01,140 --> 00:34:08,190
<font color="#E5E5E5">the single remaining architecture flow</font>

669
00:34:05,100 --> 00:34:09,870
of current<font color="#E5E5E5"> microkernels meaning that</font>

670
00:34:08,190 --> 00:34:11,490
<font color="#E5E5E5">there still need to be some device</font>

671
00:34:09,870 --> 00:34:15,389
drivers in the<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> space for example</font>

672
00:34:11,489 --> 00:34:18,750
the<font color="#E5E5E5"> driver for the timer with this</font><font color="#CCCCCC"> he</font>

673
00:34:15,389 --> 00:34:21,230
the<font color="#CCCCCC"> track the the timer driver could be</font>

674
00:34:18,750 --> 00:34:24,960
<font color="#E5E5E5">push out from from the microkernel and</font>

675
00:34:21,230 --> 00:34:26,730
even the scheduler could be completely

676
00:34:24,960 --> 00:34:31,520
<font color="#E5E5E5">pushed out</font><font color="#CCCCCC"> of the out of</font><font color="#E5E5E5"> the microkernel</font>

677
00:34:26,730 --> 00:34:35,760
<font color="#E5E5E5">we've just a little help from the CPU</font>

678
00:34:31,520 --> 00:34:39,830
<font color="#E5E5E5">okay final topic I won't spend too much</font>

679
00:34:35,760 --> 00:34:43,050
time<font color="#E5E5E5"> on it because honestly I don't have</font>

680
00:34:39,830 --> 00:34:51,380
very very clear ideas how this could<font color="#CCCCCC"> be</font>

681
00:34:43,050 --> 00:34:54,810
<font color="#E5E5E5">done but think about risk</font><font color="#CCCCCC"> 5 128 bit</font>

682
00:34:51,380 --> 00:34:58,860
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> I don't I don't believe</font>

683
00:34:54,810 --> 00:35:01,670
<font color="#CCCCCC">that having 128 bit flat pointers is</font>

684
00:34:58,860 --> 00:35:01,670
very useful

685
00:35:02,270 --> 00:35:09,570
maybe for some some some situations but

686
00:35:05,790 --> 00:35:11,610
<font color="#E5E5E5">I wouldn't say</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this is it's it's</font>

687
00:35:09,570 --> 00:35:13,470
such a huge address space<font color="#CCCCCC"> that there is</font>

688
00:35:11,610 --> 00:35:18,180
no<font color="#CCCCCC"> practical use for it</font><font color="#E5E5E5"> but what about</font>

689
00:35:13,470 --> 00:35:21,359
<font color="#E5E5E5">dividing logically the pointers into</font><font color="#CCCCCC"> 64</font>

690
00:35:18,180 --> 00:35:23,879
<font color="#CCCCCC">bit object identifiers</font><font color="#E5E5E5"> or object</font>

691
00:35:21,360 --> 00:35:26,970
capabilities in the parlance of micro

692
00:35:23,880 --> 00:35:27,990
kernels<font color="#E5E5E5"> and 64 bit</font><font color="#CCCCCC"> offsets that</font><font color="#E5E5E5"> would</font>

693
00:35:26,970 --> 00:35:31,618
allow

694
00:35:27,990 --> 00:35:34,740
the hardware to do<font color="#E5E5E5"> very very efficient</font>

695
00:35:31,619 --> 00:35:39,450
bounce checking<font color="#CCCCCC"> to to make sure that</font>

696
00:35:34,740 --> 00:35:41,310
that the<font color="#E5E5E5"> the objects that the only only</font>

697
00:35:39,450 --> 00:35:45,359
<font color="#E5E5E5">the owners of the objects have access to</font>

698
00:35:41,310 --> 00:35:47,310
them and stuff<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> maybe in this</font>

699
00:35:45,360 --> 00:35:49,470
particle case this won't help<font color="#E5E5E5"> the</font>

700
00:35:47,310 --> 00:35:51,509
microkernel<font color="#E5E5E5"> so much because the</font>

701
00:35:49,470 --> 00:35:53,490
microkernel capabilities are more about

702
00:35:51,510 --> 00:35:56,400
resource management and you know

703
00:35:53,490 --> 00:35:58,890
<font color="#E5E5E5">physical bounced check in but this could</font>

704
00:35:56,400 --> 00:36:02,730
be also useful<font color="#E5E5E5"> or maybe</font><font color="#CCCCCC"> even more useful</font>

705
00:35:58,890 --> 00:36:05,310
<font color="#E5E5E5">for some many many languages VMs because</font>

706
00:36:02,730 --> 00:36:08,910
they<font color="#E5E5E5"> wouldn't have to implement the</font>

707
00:36:05,310 --> 00:36:11,990
<font color="#E5E5E5">bound checking in software but there</font>

708
00:36:08,910 --> 00:36:17,609
would be a hardware mechanism for that

709
00:36:11,990 --> 00:36:20,310
<font color="#E5E5E5">okay so these were just some</font><font color="#CCCCCC"> ideas to</font>

710
00:36:17,610 --> 00:36:22,740
convince you that this is<font color="#CCCCCC"> not just a</font>

711
00:36:20,310 --> 00:36:25,830
total wet dream<font color="#CCCCCC"> they have</font><font color="#E5E5E5"> been there has</font>

712
00:36:22,740 --> 00:36:28,709
been some<font color="#E5E5E5"> pile work that somehow points</font>

713
00:36:25,830 --> 00:36:31,770
into<font color="#E5E5E5"> this this direction so for example</font>

714
00:36:28,710 --> 00:36:34,560
there is<font color="#CCCCCC"> this paper from 2005</font><font color="#E5E5E5"> that</font>

715
00:36:31,770 --> 00:36:37,320
evaluated<font color="#CCCCCC"> of</font><font color="#E5E5E5"> floating some microkernel</font>

716
00:36:34,560 --> 00:36:39,810
operations<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> hardware they have</font>

717
00:36:37,320 --> 00:36:43,500
implemented<font color="#E5E5E5"> some modifications to us</font>

718
00:36:39,810 --> 00:36:48,660
<font color="#E5E5E5">FPGA based soft core and the evaluation</font>

719
00:36:43,500 --> 00:36:51,150
is<font color="#E5E5E5"> that there is something</font><font color="#CCCCCC"> like fifteen</font>

720
00:36:48,660 --> 00:36:54,330
to twenty<font color="#E5E5E5"> seven percent performance</font>

721
00:36:51,150 --> 00:36:57,590
improvement<font color="#E5E5E5"> and this was based on</font><font color="#CCCCCC"> on</font>

722
00:36:54,330 --> 00:37:00,779
offloading<font color="#CCCCCC"> I would say coarse grain</font>

723
00:36:57,590 --> 00:37:03,510
functions such as<font color="#E5E5E5"> thread creation to</font><font color="#CCCCCC"> the</font>

724
00:37:00,780 --> 00:37:10,140
hardware<font color="#E5E5E5"> I'm talking</font><font color="#CCCCCC"> about much finer</font>

725
00:37:03,510 --> 00:37:11,960
grained ideas here<font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> hardware</font>

726
00:37:10,140 --> 00:37:15,180
<font color="#E5E5E5">message passing has been</font><font color="#CCCCCC"> actually</font>

727
00:37:11,960 --> 00:37:19,310
implemented in in some hardware devices

728
00:37:15,180 --> 00:37:19,310
<font color="#E5E5E5">so why not push it into the mainstream</font>

729
00:37:20,359 --> 00:37:28,830
regarding<font color="#E5E5E5"> you know the hardware support</font>

730
00:37:25,859 --> 00:37:31,109
for for<font color="#E5E5E5"> different address spaces</font><font color="#CCCCCC"> many of</font>

731
00:37:28,830 --> 00:37:35,130
you have probably seen<font color="#CCCCCC"> this paper about</font>

732
00:37:31,109 --> 00:37:39,290
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the space jump</font><font color="#E5E5E5"> programming model</font>

733
00:37:35,130 --> 00:37:42,839
<font color="#E5E5E5">which showed on on the Barrow fish</font>

734
00:37:39,290 --> 00:37:47,670
voltic<font color="#E5E5E5"> cardinal</font><font color="#CCCCCC"> and on dragonfly bsd</font>

735
00:37:42,839 --> 00:37:50,009
that this could be<font color="#E5E5E5"> useful for different</font>

736
00:37:47,670 --> 00:37:54,359
<font color="#E5E5E5">kinds of applications</font><font color="#CCCCCC"> for example data</font>

737
00:37:50,010 --> 00:37:56,730
centric applications<font color="#CCCCCC"> and you know if you</font>

738
00:37:54,359 --> 00:38:00,210
are<font color="#CCCCCC"> as old</font><font color="#E5E5E5"> as I am</font><font color="#CCCCCC"> you might remember</font>

739
00:37:56,730 --> 00:38:03,089
the task state segment<font color="#E5E5E5"> on AI 32 which</font>

740
00:38:00,210 --> 00:38:05,730
was kind of hardware context switching

741
00:38:03,089 --> 00:38:08,520
mechanism I mean actually still is in in

742
00:38:05,730 --> 00:38:12,450
that<font color="#E5E5E5"> chip</font><font color="#CCCCCC"> that most of</font><font color="#E5E5E5"> us have in our</font>

743
00:38:08,520 --> 00:38:16,349
laptops<font color="#CCCCCC"> and it was</font><font color="#E5E5E5"> actually even used by</font>

744
00:38:12,450 --> 00:38:18,419
Linux<font color="#E5E5E5"> and the performance was not not</font>

745
00:38:16,349 --> 00:38:21,300
poor I mean it was it<font color="#CCCCCC"> was quite</font>

746
00:38:18,420 --> 00:38:23,190
comparable<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the software based</font>

747
00:38:21,300 --> 00:38:26,329
mechanism at that time and the<font color="#E5E5E5"> reason</font>

748
00:38:23,190 --> 00:38:29,400
why it was removed from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> codebase was</font>

749
00:38:26,329 --> 00:38:32,220
because of<font color="#CCCCCC"> portability so different</font>

750
00:38:29,400 --> 00:38:35,550
reasons than<font color="#E5E5E5"> performance so maybe there</font>

751
00:38:32,220 --> 00:38:45,500
is<font color="#E5E5E5"> still good chance to</font><font color="#CCCCCC"> revisit this</font>

752
00:38:35,550 --> 00:38:49,170
side this idea<font color="#E5E5E5"> again about the the cross</font>

753
00:38:45,500 --> 00:38:51,690
<font color="#E5E5E5">address space calls again there</font><font color="#CCCCCC"> there's</font>

754
00:38:49,170 --> 00:38:55,829
<font color="#CCCCCC">a prior art</font><font color="#E5E5E5"> that has been actually</font>

755
00:38:51,690 --> 00:38:58,530
<font color="#E5E5E5">available in most most of the x86 chips</font>

756
00:38:55,829 --> 00:39:01,260
that we have which<font color="#CCCCCC"> is called vm</font>

757
00:38:58,530 --> 00:39:04,109
functions<font color="#E5E5E5"> which is basically the very</font>

758
00:39:01,260 --> 00:39:08,599
same idea<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> there's a way how to</font>

759
00:39:04,109 --> 00:39:15,990
how to make<font color="#CCCCCC"> efficient calls from one vm</font>

760
00:39:08,599 --> 00:39:19,500
in in the<font color="#CCCCCC"> VTX domain to another another</font>

761
00:39:15,990 --> 00:39:21,868
<font color="#E5E5E5">vm and exactly exactly there are some</font>

762
00:39:19,500 --> 00:39:25,069
some things<font color="#E5E5E5"> there is some fixed</font><font color="#CCCCCC"> number</font>

763
00:39:21,869 --> 00:39:27,930
of entries<font color="#E5E5E5"> that</font><font color="#CCCCCC"> could be used so far and</font>

764
00:39:25,069 --> 00:39:32,369
it has been<font color="#E5E5E5"> shown by some</font><font color="#CCCCCC"> of my</font>

765
00:39:27,930 --> 00:39:36,750
<font color="#CCCCCC">colleagues that this could be</font><font color="#E5E5E5"> really</font>

766
00:39:32,369 --> 00:39:39,480
used<font color="#E5E5E5"> to you know take a monolithic</font>

767
00:39:36,750 --> 00:39:43,170
binary<font color="#E5E5E5"> like I</font><font color="#CCCCCC"> don't know a web server</font>

768
00:39:39,480 --> 00:39:45,750
with with an<font color="#CCCCCC"> SSL library and split it</font>

769
00:39:43,170 --> 00:39:47,369
into very fine-grained components I'm

770
00:39:45,750 --> 00:39:49,609
really speaking about very<font color="#CCCCCC"> fine-grained</font>

771
00:39:47,369 --> 00:39:52,890
components like individual functions and

772
00:39:49,609 --> 00:39:55,499
put them into into<font color="#E5E5E5"> separate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

773
00:39:52,890 --> 00:39:57,839
so so for example the<font color="#E5E5E5"> business logic of</font>

774
00:39:55,499 --> 00:40:00,209
the<font color="#E5E5E5"> web server would be would stay in</font>

775
00:39:57,839 --> 00:40:02,099
the original VM and the encryption<font color="#CCCCCC"> and</font>

776
00:40:00,209 --> 00:40:04,140
the cryptographic key management<font color="#E5E5E5"> would</font>

777
00:40:02,099 --> 00:40:07,200
be<font color="#E5E5E5"> pushed out to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> different VM and</font>

778
00:40:04,140 --> 00:40:12,299
connect them using<font color="#E5E5E5"> this VM function</font>

779
00:40:07,200 --> 00:40:14,549
instruction and the cost of of this

780
00:40:12,299 --> 00:40:18,390
<font color="#E5E5E5">separation is comparable to a single</font>

781
00:40:14,549 --> 00:40:20,999
Cisco so it's not not terribly bad for

782
00:40:18,390 --> 00:40:24,150
performance<font color="#CCCCCC"> and again</font><font color="#E5E5E5"> this is just</font>

783
00:40:20,999 --> 00:40:25,919
<font color="#E5E5E5">misusing a mechanism that hasn't been</font>

784
00:40:24,150 --> 00:40:28,380
designed for for the purpose I have

785
00:40:25,920 --> 00:40:30,690
<font color="#E5E5E5">talked and I have been talking</font><font color="#CCCCCC"> about so</font>

786
00:40:28,380 --> 00:40:32,099
what<font color="#E5E5E5"> about a mechanism that would be</font>

787
00:40:30,690 --> 00:40:36,839
specifically<font color="#CCCCCC"> designed to</font><font color="#E5E5E5"> help</font>

788
00:40:32,099 --> 00:40:39,539
<font color="#CCCCCC">microkernel so I'm</font><font color="#E5E5E5"> looking forward to a</font>

789
00:40:36,839 --> 00:40:41,869
new paper about the skybridge mechanism

790
00:40:39,539 --> 00:40:49,170
of my colleagues<font color="#E5E5E5"> that should appear at</font>

791
00:40:41,869 --> 00:40:52,440
neurosis<font color="#E5E5E5"> in a few months about</font><font color="#CCCCCC"> the</font>

792
00:40:49,170 --> 00:40:54,719
<font color="#E5E5E5">capabilities I mean there there's not</font>

793
00:40:52,440 --> 00:40:59,940
much<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there's this again</font><font color="#CCCCCC"> this paper</font>

794
00:40:54,719 --> 00:41:02,910
about<font color="#E5E5E5"> hardware based basically bound</font>

795
00:40:59,940 --> 00:41:06,959
checking which was implemented<font color="#CCCCCC"> on as an</font>

796
00:41:02,910 --> 00:41:09,239
extension<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> 64-bit MIPS I saw</font><font color="#E5E5E5"> where</font>

797
00:41:06,959 --> 00:41:11,609
they were basically 32-bit bound

798
00:41:09,239 --> 00:41:13,650
registers or capability registers which

799
00:41:11,609 --> 00:41:16,920
contained you know the<font color="#CCCCCC"> information where</font>

800
00:41:13,650 --> 00:41:19,650
an object<font color="#E5E5E5"> boundary is and this was</font>

801
00:41:16,920 --> 00:41:21,869
checked by<font color="#CCCCCC"> the hardware again the</font>

802
00:41:19,650 --> 00:41:25,469
performance<font color="#E5E5E5"> evaluated on Iran</font><font color="#CCCCCC"> or FPGA so</font>

803
00:41:21,869 --> 00:41:28,979
for was very nice<font color="#E5E5E5"> the limitation in this</font>

804
00:41:25,469 --> 00:41:31,259
case was the<font color="#CCCCCC"> inflexible design if this</font>

805
00:41:28,979 --> 00:41:33,479
would<font color="#CCCCCC"> be done in more flexible</font>

806
00:41:31,259 --> 00:41:37,680
<font color="#CCCCCC">what's a thanks</font><font color="#E5E5E5"> to the fact that we</font>

807
00:41:33,479 --> 00:41:40,910
could<font color="#E5E5E5"> have 128 bit pointers so we</font>

808
00:41:37,680 --> 00:41:43,979
wouldn't<font color="#E5E5E5"> have to have dedicated bound or</font>

809
00:41:40,910 --> 00:41:47,009
capability registers but the<font color="#E5E5E5"> bound will</font>

810
00:41:43,979 --> 00:41:50,819
be encoded in in the pointer itself<font color="#CCCCCC"> why</font>

811
00:41:47,009 --> 00:41:54,920
not use it and actually<font color="#E5E5E5"> Intel MPX is</font>

812
00:41:50,819 --> 00:41:54,920
also more or less in the same<font color="#CCCCCC"> direction</font>

813
00:41:55,130 --> 00:42:06,380
<font color="#CCCCCC">ok so that's probably all for me</font><font color="#E5E5E5"> so</font>

814
00:42:00,770 --> 00:42:08,210
I might work on risk<font color="#CCCCCC"> five port of nos</font><font color="#E5E5E5"> in</font>

815
00:42:06,380 --> 00:42:13,670
the future<font color="#E5E5E5"> but if you are interested</font>

816
00:42:08,210 --> 00:42:15,470
<font color="#CCCCCC">feel</font><font color="#E5E5E5"> free to to to drop me a message</font><font color="#CCCCCC"> but</font>

817
00:42:13,670 --> 00:42:18,109
I would say<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is really</font><font color="#E5E5E5"> a great</font>

818
00:42:15,470 --> 00:42:22,939
<font color="#E5E5E5">opportunity</font><font color="#CCCCCC"> for everybody from from the</font>

819
00:42:18,109 --> 00:42:25,848
risk<font color="#CCCCCC"> five community to to help</font><font color="#E5E5E5"> the</font>

820
00:42:22,940 --> 00:42:30,410
software move from from<font color="#E5E5E5"> the you</font><font color="#CCCCCC"> know</font>

821
00:42:25,849 --> 00:42:31,970
poor<font color="#E5E5E5"> flawed monolithic architecture to</font>

822
00:42:30,410 --> 00:42:34,490
the<font color="#E5E5E5"> microkernel multi server</font>

823
00:42:31,970 --> 00:42:36,890
architecture<font color="#E5E5E5"> get all the benefits that</font>

824
00:42:34,490 --> 00:42:41,209
we know are<font color="#E5E5E5"> there without the</font>

825
00:42:36,890 --> 00:42:44,089
performance benefit and final note<font color="#E5E5E5"> to it</font>

826
00:42:41,210 --> 00:42:48,589
is thanks to<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> colleagues that</font>

827
00:42:44,089 --> 00:42:50,089
have contributed<font color="#CCCCCC"> their ideas and also if</font>

828
00:42:48,589 --> 00:42:53,960
you<font color="#E5E5E5"> would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> practically work on</font>

829
00:42:50,089 --> 00:42:57,770
<font color="#CCCCCC">this we</font><font color="#E5E5E5"> are opening a new R&D lab in</font>

830
00:42:53,960 --> 00:43:00,440
<font color="#E5E5E5">dresden the lab will focus primarily on</font>

831
00:42:57,770 --> 00:43:03,080
microkernel development but we would

832
00:43:00,440 --> 00:43:05,510
like to<font color="#E5E5E5"> have a very well balanced mix</font>

833
00:43:03,080 --> 00:43:08,119
between<font color="#E5E5E5"> you know basic research which</font><font color="#CCCCCC"> is</font>

834
00:43:05,510 --> 00:43:12,190
this topic I<font color="#CCCCCC"> have spoken about and you</font>

835
00:43:08,119 --> 00:43:16,700
know what's a more practical stuff and

836
00:43:12,190 --> 00:43:21,260
we are<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> from scratch so we will</font>

837
00:43:16,700 --> 00:43:22,339
we<font color="#E5E5E5"> are like in a startup mode within</font>

838
00:43:21,260 --> 00:43:26,150
within<font color="#E5E5E5"> a company</font>

839
00:43:22,339 --> 00:43:28,580
and since<font color="#CCCCCC"> well</font><font color="#E5E5E5"> owns high silicon which</font>

840
00:43:26,150 --> 00:43:31,580
is<font color="#CCCCCC"> one of the ARM chip producers we will</font>

841
00:43:28,580 --> 00:43:35,619
actually<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to talk to the hardware</font>

842
00:43:31,580 --> 00:43:39,369
<font color="#E5E5E5">guys and maybe there will be actual</font>

843
00:43:35,619 --> 00:43:41,270
physical tangible results out of it

844
00:43:39,369 --> 00:43:44,740
thank you and if there<font color="#CCCCCC"> are any questions</font>

845
00:43:41,270 --> 00:43:44,740
<font color="#CCCCCC">I will be happy to answer</font><font color="#E5E5E5"> them</font>

846
00:43:48,120 --> 00:44:02,310
I mean we are we are trying<font color="#CCCCCC"> to do it</font>

847
00:44:01,500 --> 00:44:14,220
ourselves

848
00:44:02,310 --> 00:44:16,049
yes I mean yes<font color="#CCCCCC"> that was that's I mean</font>

849
00:44:14,220 --> 00:44:17,270
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> the summary</font><font color="#E5E5E5"> of my talk we can do</font>

850
00:44:16,050 --> 00:44:19,950
it nowadays

851
00:44:17,270 --> 00:44:22,350
yeah<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> question is yeah the</font>

852
00:44:19,950 --> 00:44:25,080
question<font color="#E5E5E5"> is was why are we aren't we</font>

853
00:44:22,350 --> 00:44:27,750
doing it already right if I<font color="#E5E5E5"> can rephrase</font>

854
00:44:25,080 --> 00:44:30,960
it<font color="#E5E5E5"> yeah we are trying to</font><font color="#CCCCCC"> do it right</font><font color="#E5E5E5"> now</font>

855
00:44:27,750 --> 00:44:32,640
<font color="#CCCCCC">because I think this is a very precise</font>

856
00:44:30,960 --> 00:44:42,120
moment in time<font color="#CCCCCC"> to do it</font>

857
00:44:32,640 --> 00:44:44,450
thank you yes go<font color="#E5E5E5"> ahead I believe we can</font>

858
00:44:42,120 --> 00:44:44,450
<font color="#E5E5E5">manage</font>

859
00:45:16,369 --> 00:45:22,200
so the question is whether it<font color="#E5E5E5"> wouldn't</font>

860
00:45:19,049 --> 00:45:24,420
<font color="#CCCCCC">be helpful</font><font color="#E5E5E5"> to rephrase</font><font color="#CCCCCC"> those ideas</font><font color="#E5E5E5"> and</font>

861
00:45:22,200 --> 00:45:28,049
questions<font color="#E5E5E5"> in terms of virtualization and</font>

862
00:45:24,420 --> 00:45:31,230
stuff like that<font color="#E5E5E5"> definitely</font><font color="#CCCCCC"> it's possible</font>

863
00:45:28,049 --> 00:45:33,779
<font color="#E5E5E5">because I believe there is essentially</font>

864
00:45:31,230 --> 00:45:35,309
<font color="#CCCCCC">no difference between</font><font color="#E5E5E5"> between</font><font color="#CCCCCC"> the</font>

865
00:45:33,779 --> 00:45:38,190
microkernel<font color="#E5E5E5"> architecture or a</font>

866
00:45:35,309 --> 00:45:42,150
microkernel<font color="#CCCCCC"> and a hypervisor I mean most</font>

867
00:45:38,190 --> 00:45:46,200
of<font color="#E5E5E5"> the micro kernels</font><font color="#CCCCCC"> that are being used</font>

868
00:45:42,150 --> 00:45:48,869
you know practically SEO for<font color="#CCCCCC"> qnx spike</font>

869
00:45:46,200 --> 00:45:51,328
<font color="#E5E5E5">OS</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> also act as a sohe as a</font>

870
00:45:48,869 --> 00:45:54,029
hypervisor<font color="#E5E5E5"> so definitely that</font><font color="#CCCCCC"> would make</font>

871
00:45:51,329 --> 00:45:58,410
<font color="#E5E5E5">sense and we are doing the same</font><font color="#CCCCCC"> in our</font>

872
00:45:54,029 --> 00:46:00,800
company<font color="#CCCCCC"> actually okay so let's talk</font>

873
00:45:58,410 --> 00:46:08,368
afterwards thank<font color="#E5E5E5"> you very much</font>

874
00:46:00,800 --> 00:46:08,369
[Applause]

