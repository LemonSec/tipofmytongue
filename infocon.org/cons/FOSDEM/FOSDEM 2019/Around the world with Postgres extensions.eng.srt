1
00:00:04,820 --> 00:00:11,190
so our first<font color="#CCCCCC"> speakers Craig</font>

2
00:00:07,830 --> 00:00:13,080
he works for<font color="#CCCCCC"> sites</font><font color="#E5E5E5"> and Microsoft and and</font>

3
00:00:11,190 --> 00:00:16,040
then he's going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about post Chris</font>

4
00:00:13,080 --> 00:00:16,040
extensions<font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you</font>

5
00:00:18,410 --> 00:00:22,050
morning everyone thanks for<font color="#E5E5E5"> being here</font><font color="#CCCCCC"> I</font>

6
00:00:20,400 --> 00:00:23,729
<font color="#CCCCCC">know the</font><font color="#E5E5E5"> the first talk</font><font color="#CCCCCC"> of the day is</font>

7
00:00:22,050 --> 00:00:26,580
always<font color="#E5E5E5"> the hardest one to toy get we get</font>

8
00:00:23,730 --> 00:00:29,190
<font color="#E5E5E5">to so I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> spend some</font><font color="#CCCCCC"> time kind</font><font color="#E5E5E5"> of</font>

9
00:00:26,580 --> 00:00:31,139
a tour<font color="#CCCCCC"> of extensions I don't know if</font>

10
00:00:29,190 --> 00:00:33,690
this resonates over here in Europe<font color="#CCCCCC"> like</font>

11
00:00:31,140 --> 00:00:36,989
it does in the<font color="#E5E5E5"> US</font><font color="#CCCCCC"> has anyone seen Carmen</font>

12
00:00:33,690 --> 00:00:39,690
Sandiego or familiar with that<font color="#E5E5E5"> a few</font>

13
00:00:36,989 --> 00:00:43,349
hands<font color="#E5E5E5"> okay it was this computer game</font>

14
00:00:39,690 --> 00:00:44,640
that<font color="#E5E5E5"> like would you would learn</font>

15
00:00:43,350 --> 00:00:46,860
geography growing up in elementary

16
00:00:44,640 --> 00:00:48,300
<font color="#E5E5E5">school like there would be clues and</font>

17
00:00:46,860 --> 00:00:49,980
mysteries and<font color="#E5E5E5"> all that sort of thing I'm</font>

18
00:00:48,300 --> 00:00:51,599
actually really excited<font color="#CCCCCC"> cuz now</font><font color="#E5E5E5"> it's on</font>

19
00:00:49,980 --> 00:00:53,010
Netflix<font color="#CCCCCC"> to</font><font color="#E5E5E5"> my daughter I can introduce</font>

20
00:00:51,600 --> 00:00:54,930
it<font color="#CCCCCC"> to her</font>

21
00:00:53,010 --> 00:01:00,510
similar to<font color="#CCCCCC"> ducktales is anyone</font><font color="#E5E5E5"> excited</font>

22
00:00:54,930 --> 00:01:02,160
that's back okay just me<font color="#CCCCCC"> so Postgres has</font>

23
00:01:00,510 --> 00:01:03,570
been<font color="#E5E5E5"> around for over 20 years now</font>

24
00:01:02,160 --> 00:01:06,390
<font color="#E5E5E5">and he keeps getting better and better</font>

25
00:01:03,570 --> 00:01:07,920
and<font color="#CCCCCC"> better</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I'm as the strong opinion</font>

26
00:01:06,390 --> 00:01:09,360
that<font color="#CCCCCC"> I think some of</font><font color="#E5E5E5"> the most</font><font color="#CCCCCC"> exciting</font>

27
00:01:07,920 --> 00:01:12,119
<font color="#CCCCCC">things</font><font color="#E5E5E5"> for Postgres in the future are</font>

28
00:01:09,360 --> 00:01:14,369
not in the core of<font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> the core of</font>

29
00:01:12,119 --> 00:01:17,819
<font color="#E5E5E5">Postgres moves</font><font color="#CCCCCC"> is a really solid stable</font>

30
00:01:14,369 --> 00:01:19,140
<font color="#E5E5E5">foundation it used to</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> do one</font>

31
00:01:17,819 --> 00:01:20,580
thing right<font color="#E5E5E5"> which was you know not you</font>

32
00:01:19,140 --> 00:01:24,030
<font color="#E5E5E5">lose your data that was kind of the goal</font>

33
00:01:20,580 --> 00:01:26,130
of<font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> in the last five years or so</font>

34
00:01:24,030 --> 00:01:27,899
<font color="#CCCCCC">it's become I would say a sexier</font>

35
00:01:26,130 --> 00:01:30,360
database if you can call a database sexy

36
00:01:27,899 --> 00:01:33,240
<font color="#CCCCCC">we got things like you know</font><font color="#E5E5E5"> rich</font>

37
00:01:30,360 --> 00:01:35,550
geospatial support we have<font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> B we</font>

38
00:01:33,240 --> 00:01:37,560
<font color="#E5E5E5">have full text search</font><font color="#CCCCCC"> now we have made a</font>

39
00:01:35,550 --> 00:01:40,280
partitioning so it's less and less<font color="#CCCCCC"> of</font>

40
00:01:37,560 --> 00:01:42,420
just a stodgy relational database but

41
00:01:40,280 --> 00:01:44,459
extensions are a really interesting

42
00:01:42,420 --> 00:01:46,459
<font color="#CCCCCC">approach</font><font color="#E5E5E5"> to extend Postgres without</font>

43
00:01:44,459 --> 00:01:48,750
having to change<font color="#E5E5E5"> the core code base</font>

44
00:01:46,459 --> 00:01:51,259
really taking it<font color="#CCCCCC"> to be more</font><font color="#E5E5E5"> of a data</font>

45
00:01:48,750 --> 00:01:53,640
<font color="#CCCCCC">platform than just a relational database</font>

46
00:01:51,259 --> 00:01:55,860
<font color="#E5E5E5">before you get into it too much a little</font>

47
00:01:53,640 --> 00:01:59,670
<font color="#E5E5E5">bit more about me</font><font color="#CCCCCC"> if you see me</font><font color="#E5E5E5"> online</font>

48
00:01:55,860 --> 00:02:01,500
<font color="#CCCCCC">that's what I look like I work</font><font color="#E5E5E5"> at situs</font>

49
00:01:59,670 --> 00:02:04,050
data we turn<font color="#E5E5E5"> Postgres into a</font>

50
00:02:01,500 --> 00:02:07,229
horizontally<font color="#E5E5E5"> distributed</font><font color="#CCCCCC"> scale out</font>

51
00:02:04,050 --> 00:02:09,030
database<font color="#CCCCCC"> we were actually I guess I used</font>

52
00:02:07,229 --> 00:02:12,150
to work for<font color="#CCCCCC"> situs we were acquired about</font>

53
00:02:09,030 --> 00:02:13,680
<font color="#E5E5E5">two weeks ago by Microsoft so happy that</font>

54
00:02:12,150 --> 00:02:16,110
<font color="#E5E5E5">you had an answer any questions about</font>

55
00:02:13,680 --> 00:02:18,750
that<font color="#E5E5E5"> afterwards as well</font><font color="#CCCCCC"> previously I ran</font>

56
00:02:16,110 --> 00:02:20,790
Heroku<font color="#E5E5E5"> Postgres so they only ran</font><font color="#CCCCCC"> or</font>

57
00:02:18,750 --> 00:02:22,880
1.5 million Postgres databases for

58
00:02:20,790 --> 00:02:26,070
customers<font color="#CCCCCC"> so a pretty</font><font color="#E5E5E5"> reasonable scale</font>

59
00:02:22,880 --> 00:02:28,079
and curate<font color="#CCCCCC"> Postgres weekly so if you're</font>

60
00:02:26,070 --> 00:02:30,239
<font color="#E5E5E5">not</font><font color="#CCCCCC"> subscribed I encourage you to</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font>

61
00:02:28,080 --> 00:02:33,030
care about<font color="#CCCCCC"> Postgres</font><font color="#E5E5E5"> at all</font><font color="#CCCCCC"> it's focused</font>

62
00:02:30,240 --> 00:02:36,030
less on like a DBA content and more on

63
00:02:33,030 --> 00:02:37,110
like an active rundown<font color="#CCCCCC"> of here's what</font>

64
00:02:36,030 --> 00:02:41,220
happened this<font color="#E5E5E5"> week and here's</font>

65
00:02:37,110 --> 00:02:44,160
interesting<font color="#E5E5E5"> articles in content</font><font color="#CCCCCC"> all</font>

66
00:02:41,220 --> 00:02:45,990
<font color="#CCCCCC">right so what are</font><font color="#E5E5E5"> extensions so per the</font>

67
00:02:44,160 --> 00:02:48,240
<font color="#E5E5E5">Postgres manual extensions are basically</font>

68
00:02:45,990 --> 00:02:50,640
low-level hooks that allow<font color="#E5E5E5"> you to change</font>

69
00:02:48,240 --> 00:02:54,090
or extend the behavior<font color="#E5E5E5"> Postgres you can</font>

70
00:02:50,640 --> 00:02:56,369
do things like they can<font color="#E5E5E5"> be written in C</font>

71
00:02:54,090 --> 00:02:59,360
or<font color="#E5E5E5"> other languages so you can write them</font>

72
00:02:56,370 --> 00:03:02,030
<font color="#CCCCCC">in pure sequel</font><font color="#E5E5E5"> you can write them and</font>

73
00:02:59,360 --> 00:03:04,440
Python in cases that's<font color="#CCCCCC"> what the</font><font color="#E5E5E5"> thing</font>

74
00:03:02,030 --> 00:03:06,930
<font color="#CCCCCC">but allow you to basically create and</font>

75
00:03:04,440 --> 00:03:09,870
<font color="#E5E5E5">change the behavior of Postgres</font><font color="#CCCCCC"> you can</font>

76
00:03:06,930 --> 00:03:12,620
have new data types<font color="#CCCCCC"> you can have new</font>

77
00:03:09,870 --> 00:03:14,850
index types<font color="#E5E5E5"> all sorts of things directly</font>

78
00:03:12,620 --> 00:03:18,050
<font color="#CCCCCC">now within your</font><font color="#E5E5E5"> database without</font>

79
00:03:14,850 --> 00:03:20,940
changing the core underlying<font color="#E5E5E5"> code</font>

80
00:03:18,050 --> 00:03:22,950
<font color="#E5E5E5">Postgres itself you've probably used</font>

81
00:03:20,940 --> 00:03:25,019
<font color="#E5E5E5">some extensions</font><font color="#CCCCCC"> without realizing it it</font>

82
00:03:22,950 --> 00:03:28,230
ships with<font color="#E5E5E5"> some native extensions</font>

83
00:03:25,019 --> 00:03:30,030
already<font color="#E5E5E5"> known as contributes others have</font>

84
00:03:28,230 --> 00:03:31,440
to be built and installed<font color="#E5E5E5"> if you're</font>

85
00:03:30,030 --> 00:03:32,880
running<font color="#E5E5E5"> on somewhere like Amazon RDS</font>

86
00:03:31,440 --> 00:03:35,940
they're<font color="#E5E5E5"> all ready to</font><font color="#CCCCCC"> have a whitelist of</font>

87
00:03:32,880 --> 00:03:40,380
extensions some that<font color="#E5E5E5"> are contributor you</font>

88
00:03:35,940 --> 00:03:42,600
can install so a few<font color="#E5E5E5"> of the examples</font><font color="#CCCCCC"> of</font>

89
00:03:40,380 --> 00:03:44,420
the the contributes and we'll<font color="#E5E5E5"> go right</font>

90
00:03:42,600 --> 00:03:47,820
dive deeper into<font color="#E5E5E5"> a few of these not all</font>

91
00:03:44,420 --> 00:03:49,859
<font color="#CCCCCC">if you've ever used</font><font color="#E5E5E5"> the UUID</font><font color="#CCCCCC"> data type</font>

92
00:03:47,820 --> 00:03:52,980
you've probably used the extension<font color="#E5E5E5"> for</font>

93
00:03:49,860 --> 00:03:55,260
it<font color="#CCCCCC"> ci text if you're migrating</font><font color="#E5E5E5"> from</font>

94
00:03:52,980 --> 00:03:57,660
MySQL<font color="#E5E5E5"> which doesn't preserve case</font>

95
00:03:55,260 --> 00:04:00,209
sensitivity<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Postgres which thinks</font>

96
00:03:57,660 --> 00:04:01,980
that's important<font color="#E5E5E5"> but you maybe want to</font>

97
00:04:00,209 --> 00:04:06,269
preserve<font color="#E5E5E5"> the value</font><font color="#CCCCCC"> can have a case</font><font color="#E5E5E5"> in</font>

98
00:04:01,980 --> 00:04:10,048
s-- instead of text data type each store

99
00:04:06,269 --> 00:04:11,730
was<font color="#CCCCCC"> one I think the first like no sequel</font>

100
00:04:10,049 --> 00:04:14,430
data types<font color="#CCCCCC"> within Postgres it's a key</font>

101
00:04:11,730 --> 00:04:15,660
<font color="#E5E5E5">value store directly in Postgres</font><font color="#CCCCCC"> I say</font>

102
00:04:14,430 --> 00:04:18,600
one of<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> because I think the</font>

103
00:04:15,660 --> 00:04:22,610
first technically was XML which came

104
00:04:18,600 --> 00:04:24,450
<font color="#E5E5E5">about 15 years</font><font color="#CCCCCC"> ago now the</font>

105
00:04:22,610 --> 00:04:27,150
non-contributing and<font color="#CCCCCC"> I think we'll see</font>

106
00:04:24,450 --> 00:04:28,320
less<font color="#CCCCCC"> and contribute</font><font color="#E5E5E5"> I'm for a while that</font>

107
00:04:27,150 --> 00:04:30,719
<font color="#E5E5E5">was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> primary way you would find</font>

108
00:04:28,320 --> 00:04:32,280
extensions<font color="#CCCCCC"> now there's more and more in</font>

109
00:04:30,720 --> 00:04:34,620
an ecosystem<font color="#E5E5E5"> starting to develop</font>

110
00:04:32,280 --> 00:04:36,388
on its own<font color="#CCCCCC"> these includes things like</font>

111
00:04:34,620 --> 00:04:39,840
post<font color="#CCCCCC"> GIS which if you're</font><font color="#E5E5E5"> doing anything</font>

112
00:04:36,389 --> 00:04:41,970
geospatial post<font color="#CCCCCC"> GIS is well</font><font color="#E5E5E5"> regarded as</font>

113
00:04:39,840 --> 00:04:44,010
one<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> most advanced geospatial</font>

114
00:04:41,970 --> 00:04:45,630
databases that<font color="#CCCCCC"> exists</font>

115
00:04:44,010 --> 00:04:49,110
things like<font color="#E5E5E5"> situs which turn it into a</font>

116
00:04:45,630 --> 00:04:51,690
started distributed database<font color="#CCCCCC"> hyper</font><font color="#E5E5E5"> log</font>

117
00:04:49,110 --> 00:04:53,700
<font color="#E5E5E5">log which i think is just fun to say and</font>

118
00:04:51,690 --> 00:04:56,400
there's a<font color="#E5E5E5"> list of probably a north of</font>

119
00:04:53,700 --> 00:04:57,719
<font color="#CCCCCC">100 extensions I'll get into</font><font color="#E5E5E5"> it more</font>

120
00:04:56,400 --> 00:05:02,700
where<font color="#CCCCCC"> you know you can go and explore</font>

121
00:04:57,720 --> 00:05:04,410
<font color="#CCCCCC">look and find</font><font color="#E5E5E5"> new ones so today what</font>

122
00:05:02,700 --> 00:05:07,979
we're gonna do is take a tour<font color="#CCCCCC"> of just a</font>

123
00:05:04,410 --> 00:05:09,330
quick drive-by<font color="#CCCCCC"> of a bunch of these to</font>

124
00:05:07,980 --> 00:05:11,400
give you a<font color="#E5E5E5"> sampling of the various</font>

125
00:05:09,330 --> 00:05:12,990
<font color="#E5E5E5">things you can do</font><font color="#CCCCCC"> I don't expect this to</font>

126
00:05:11,400 --> 00:05:14,070
<font color="#CCCCCC">be exhaustive and learn everything you</font>

127
00:05:12,990 --> 00:05:15,780
need<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> hopefully you get a</font>

128
00:05:14,070 --> 00:05:17,669
taste of hey this<font color="#E5E5E5"> one caught</font><font color="#CCCCCC"> my</font>

129
00:05:15,780 --> 00:05:22,229
attention<font color="#CCCCCC"> now I want to</font><font color="#E5E5E5"> go and use it or</font>

130
00:05:17,669 --> 00:05:24,690
learn<font color="#E5E5E5"> more so the first one I would</font>

131
00:05:22,230 --> 00:05:26,960
<font color="#E5E5E5">consider is you know the most critical</font>

132
00:05:24,690 --> 00:05:30,210
extension for anyone<font color="#E5E5E5"> running a database</font>

133
00:05:26,960 --> 00:05:32,760
<font color="#CCCCCC">PD stats statements has existed for a</font>

134
00:05:30,210 --> 00:05:35,729
while<font color="#E5E5E5"> and then got a updated version 9.2</font>

135
00:05:32,760 --> 00:05:38,550
where it is now immensely useful so

136
00:05:35,729 --> 00:05:39,979
what's it do<font color="#CCCCCC"> it</font><font color="#E5E5E5"> records all the queries</font>

137
00:05:38,550 --> 00:05:42,210
<font color="#CCCCCC">that</font><font color="#E5E5E5"> were run against your database and</font>

138
00:05:39,979 --> 00:05:44,849
basically normalize disease or

139
00:05:42,210 --> 00:05:47,700
<font color="#CCCCCC">parameterised as these</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

140
00:05:44,850 --> 00:05:50,910
see things<font color="#E5E5E5"> like how long it</font><font color="#CCCCCC"> ran</font><font color="#E5E5E5"> how many</font>

141
00:05:47,700 --> 00:05:53,340
times it ran<font color="#E5E5E5"> things like how</font><font color="#CCCCCC"> many you</font>

142
00:05:50,910 --> 00:05:54,630
know<font color="#CCCCCC"> io blocks are</font><font color="#E5E5E5"> read how many pages</font>

143
00:05:53,340 --> 00:05:55,609
were<font color="#E5E5E5"> dirtied all these sort of things</font>

144
00:05:54,630 --> 00:05:57,930
<font color="#E5E5E5">under the covers</font>

145
00:05:55,610 --> 00:06:00,300
so what's it actually<font color="#CCCCCC"> looked like</font><font color="#E5E5E5"> I</font>

146
00:05:57,930 --> 00:06:03,650
<font color="#E5E5E5">don't know if you can see that perfectly</font>

147
00:06:00,300 --> 00:06:03,650
<font color="#E5E5E5">can we kill</font><font color="#CCCCCC"> the lights</font><font color="#E5E5E5"> anymore</font>

148
00:06:10,320 --> 00:06:15,480
<font color="#E5E5E5">all right we'll see if we can get a</font>

149
00:06:12,970 --> 00:06:15,480
little<font color="#E5E5E5"> bit more</font>

150
00:06:23,520 --> 00:06:26,580
but basically<font color="#CCCCCC"> I don't know if you can</font>

151
00:06:25,080 --> 00:06:31,530
squint<font color="#E5E5E5"> and see that</font><font color="#CCCCCC"> oh that's much</font>

152
00:06:26,580 --> 00:06:40,169
<font color="#E5E5E5">better</font><font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> Oh</font><font color="#CCCCCC"> success well you can't</font>

153
00:06:31,530 --> 00:06:41,520
see me<font color="#CCCCCC"> now that's fine all</font><font color="#E5E5E5"> right so</font>

154
00:06:40,170 --> 00:06:42,900
you've<font color="#E5E5E5"> got</font><font color="#CCCCCC"> all these things</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> like</font>

155
00:06:41,520 --> 00:06:46,830
<font color="#CCCCCC">the query</font><font color="#E5E5E5"> of select star from users</font>

156
00:06:42,900 --> 00:06:48,929
where<font color="#E5E5E5"> email is like my email address</font>

157
00:06:46,830 --> 00:06:50,729
<font color="#CCCCCC">that's itis datacom you've got all these</font>

158
00:06:48,930 --> 00:06:53,220
different<font color="#E5E5E5"> like shared blocks that were</font>

159
00:06:50,730 --> 00:06:54,870
dirty<font color="#CCCCCC"> in red</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of this you actually</font>

160
00:06:53,220 --> 00:06:56,520
<font color="#CCCCCC">don't need to know this is like if you</font>

161
00:06:54,870 --> 00:06:59,820
<font color="#E5E5E5">query the</font><font color="#CCCCCC"> PG sad</font><font color="#E5E5E5"> statements table what</font>

162
00:06:56,520 --> 00:07:01,349
you're gonna get what you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> do from</font>

163
00:06:59,820 --> 00:07:04,290
this though is write this really really

164
00:07:01,350 --> 00:07:06,660
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> query that</font><font color="#E5E5E5"> I'll aggregate the</font>

165
00:07:04,290 --> 00:07:08,880
total<font color="#CCCCCC"> amount of</font><font color="#E5E5E5"> time a queries been</font>

166
00:07:06,660 --> 00:07:11,820
consuming<font color="#E5E5E5"> resources from my database</font><font color="#CCCCCC"> and</font>

167
00:07:08,880 --> 00:07:13,740
how long it takes on average<font color="#E5E5E5"> so I can</font>

168
00:07:11,820 --> 00:07:18,750
get<font color="#E5E5E5"> this really</font><font color="#CCCCCC"> really nice</font><font color="#E5E5E5"> pie in the</font>

169
00:07:13,740 --> 00:07:20,340
<font color="#E5E5E5">sky view of like this query has run for</font>

170
00:07:18,750 --> 00:07:22,740
<font color="#E5E5E5">our total of two hundred ninety five</font>

171
00:07:20,340 --> 00:07:25,650
seconds against<font color="#E5E5E5"> my database and on</font>

172
00:07:22,740 --> 00:07:28,710
<font color="#E5E5E5">average takes</font><font color="#CCCCCC"> ten milliseconds</font><font color="#E5E5E5"> similarly</font>

173
00:07:25,650 --> 00:07:30,780
I've got another<font color="#E5E5E5"> one that's consumed 219</font>

174
00:07:28,710 --> 00:07:33,210
seconds on<font color="#CCCCCC"> average takes 80 milliseconds</font>

175
00:07:30,780 --> 00:07:34,590
now just by a rule of thumb<font color="#E5E5E5"> of what I</font>

176
00:07:33,210 --> 00:07:36,060
know on performance I<font color="#CCCCCC"> can probably get</font>

177
00:07:34,590 --> 00:07:38,130
most queries down to about<font color="#E5E5E5"> a millisecond</font>

178
00:07:36,060 --> 00:07:40,020
or so so if I wanted to<font color="#E5E5E5"> go and optimize</font>

179
00:07:38,130 --> 00:07:41,700
<font color="#E5E5E5">things without having</font><font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> any of</font>

180
00:07:40,020 --> 00:07:43,979
<font color="#CCCCCC">my application</font><font color="#E5E5E5"> code I can just hop in</font>

181
00:07:41,700 --> 00:07:46,440
here say words<font color="#CCCCCC"> it slow</font><font color="#E5E5E5"> let me go add an</font>

182
00:07:43,980 --> 00:07:49,730
index<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this second query and give a</font>

183
00:07:46,440 --> 00:07:51,900
lot<font color="#CCCCCC"> more performance back to my</font><font color="#E5E5E5"> database</font>

184
00:07:49,730 --> 00:07:55,350
<font color="#CCCCCC">siteís we actually took an</font><font color="#E5E5E5"> extended this</font>

185
00:07:51,900 --> 00:07:57,630
as well<font color="#E5E5E5"> so we have something cited stat</font>

186
00:07:55,350 --> 00:08:00,000
statements<font color="#E5E5E5"> within</font><font color="#CCCCCC"> siteís which extends</font>

187
00:07:57,630 --> 00:08:01,640
on PG<font color="#E5E5E5"> stat statement</font><font color="#CCCCCC"> if you're doing</font>

188
00:08:00,000 --> 00:08:06,060
<font color="#E5E5E5">something that's very multi tenant based</font>

189
00:08:01,640 --> 00:08:08,729
think like a b2b<font color="#E5E5E5"> application if</font><font color="#CCCCCC"> your</font>

190
00:08:06,060 --> 00:08:10,290
Salesforce CRM<font color="#CCCCCC"> and you know one</font>

191
00:08:08,730 --> 00:08:12,140
<font color="#E5E5E5">customers data is their own but you want</font>

192
00:08:10,290 --> 00:08:14,340
<font color="#CCCCCC">to</font><font color="#E5E5E5"> know which one of your customers is</font>

193
00:08:12,140 --> 00:08:17,039
using the most resources<font color="#E5E5E5"> from your</font>

194
00:08:14,340 --> 00:08:18,960
database<font color="#CCCCCC"> what we do is preserve that</font>

195
00:08:17,040 --> 00:08:20,940
tenant ID<font color="#E5E5E5"> we've preserved that you know</font>

196
00:08:18,960 --> 00:08:23,280
who<font color="#E5E5E5"> is</font><font color="#CCCCCC"> your kind</font><font color="#E5E5E5"> of shard key that sort</font>

197
00:08:20,940 --> 00:08:25,680
of<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> can see you know who is</font>

198
00:08:23,280 --> 00:08:27,929
noisiest<font color="#E5E5E5"> who's consuming the</font><font color="#CCCCCC"> most</font>

199
00:08:25,680 --> 00:08:30,350
resources maybe<font color="#E5E5E5"> who's underutilized that</font>

200
00:08:27,930 --> 00:08:30,350
sort of thing

201
00:08:32,000 --> 00:08:40,349
<font color="#CCCCCC">alright post GIS post GIS has a wealth</font>

202
00:08:37,950 --> 00:08:42,060
of information about it out there<font color="#CCCCCC"> it is</font>

203
00:08:40,349 --> 00:08:45,210
probably<font color="#E5E5E5"> the largest extension that</font>

204
00:08:42,059 --> 00:08:47,310
exists for<font color="#CCCCCC"> Postgres and it has its own</font>

205
00:08:45,210 --> 00:08:51,200
complete kind of parallel ecosystem that

206
00:08:47,310 --> 00:08:54,030
<font color="#E5E5E5">runs parallel to the Postgres ecosystem</font>

207
00:08:51,200 --> 00:08:56,790
<font color="#CCCCCC">it is well regarded as the most</font><font color="#E5E5E5"> advanced</font>

208
00:08:54,030 --> 00:08:58,350
geospatial database well when you

209
00:08:56,790 --> 00:09:00,420
install post GIS what you get are all

210
00:08:58,350 --> 00:09:03,150
<font color="#E5E5E5">these new geospatial data types</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

211
00:09:00,420 --> 00:09:05,550
have<font color="#E5E5E5"> things like points and polygons so</font>

212
00:09:03,150 --> 00:09:07,170
you can start to draw<font color="#E5E5E5"> maps you can put</font>

213
00:09:05,550 --> 00:09:08,849
those directly<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> database</font><font color="#E5E5E5"> and then</font>

214
00:09:07,170 --> 00:09:11,189
find where<font color="#E5E5E5"> you know points that overlap</font>

215
00:09:08,850 --> 00:09:12,690
within these polygons or what is the

216
00:09:11,190 --> 00:09:16,520
<font color="#E5E5E5">shortest distance from one point to</font>

217
00:09:12,690 --> 00:09:19,230
another<font color="#CCCCCC"> based on this map that exists</font>

218
00:09:16,520 --> 00:09:22,319
<font color="#CCCCCC">now when you install post GIS you get a</font>

219
00:09:19,230 --> 00:09:24,480
bunch<font color="#E5E5E5"> of new built in indexing and</font>

220
00:09:22,320 --> 00:09:26,310
operators you'll want to start<font color="#E5E5E5"> to use so</font>

221
00:09:24,480 --> 00:09:29,010
<font color="#E5E5E5">Postgres itself has a number of</font>

222
00:09:26,310 --> 00:09:34,619
<font color="#E5E5E5">different index types</font><font color="#CCCCCC"> you've got the</font>

223
00:09:29,010 --> 00:09:40,980
standard<font color="#CCCCCC"> b-tree index you got</font><font color="#E5E5E5"> gist</font><font color="#CCCCCC"> gen</font>

224
00:09:34,620 --> 00:09:43,140
<font color="#E5E5E5">SP</font><font color="#CCCCCC"> gist</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> missing one</font><font color="#CCCCCC"> Brin</font>

225
00:09:40,980 --> 00:09:44,910
Brandon<font color="#E5E5E5"> SP just I know are used for like</font>

226
00:09:43,140 --> 00:09:47,610
really really<font color="#CCCCCC"> large data</font><font color="#E5E5E5"> sets that can</font>

227
00:09:44,910 --> 00:09:49,260
naturally cluster together<font color="#CCCCCC"> gen the</font>

228
00:09:47,610 --> 00:09:52,440
easiest<font color="#E5E5E5"> way to describe it is when you</font>

229
00:09:49,260 --> 00:09:54,480
have<font color="#E5E5E5"> multiple values within</font><font color="#CCCCCC"> the same</font>

230
00:09:52,440 --> 00:10:00,030
column<font color="#CCCCCC"> so if you think about like text</font>

231
00:09:54,480 --> 00:10:01,530
sentences or arrays or JSON is an

232
00:10:00,030 --> 00:10:04,740
obvious<font color="#CCCCCC"> one right</font><font color="#E5E5E5"> like you've got a lot</font>

233
00:10:01,530 --> 00:10:06,720
a large document<font color="#CCCCCC"> a single column</font><font color="#E5E5E5"> just is</font>

234
00:10:04,740 --> 00:10:08,370
most<font color="#E5E5E5"> commonly used on things like</font>

235
00:10:06,720 --> 00:10:10,770
<font color="#CCCCCC">full-text</font><font color="#E5E5E5"> search where you've got values</font>

236
00:10:08,370 --> 00:10:12,570
that can<font color="#E5E5E5"> overlap between rows and then</font>

237
00:10:10,770 --> 00:10:15,840
very<font color="#CCCCCC"> very heavily on</font><font color="#E5E5E5"> the geospatial side</font>

238
00:10:12,570 --> 00:10:17,430
<font color="#E5E5E5">so here you can have a gist index and</font>

239
00:10:15,840 --> 00:10:19,980
you can say hey select the e the

240
00:10:17,430 --> 00:10:21,449
distance<font color="#E5E5E5"> from these two points directly</font>

241
00:10:19,980 --> 00:10:24,740
<font color="#E5E5E5">within the database and Postgres is</font>

242
00:10:21,450 --> 00:10:24,740
gonna do<font color="#E5E5E5"> all the heavy lifting for you</font>

243
00:10:25,370 --> 00:10:30,060
<font color="#CCCCCC">I'm just gonna fly by post GIS because</font>

244
00:10:28,140 --> 00:10:32,400
otherwise I<font color="#E5E5E5"> would spend you know</font><font color="#CCCCCC"> 45</font>

245
00:10:30,060 --> 00:10:34,199
minutes on<font color="#CCCCCC"> it</font><font color="#E5E5E5"> there's a number</font><font color="#CCCCCC"> of other</font>

246
00:10:32,400 --> 00:10:37,620
extensions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you tend</font><font color="#E5E5E5"> to use with</font><font color="#CCCCCC"> it</font>

247
00:10:34,200 --> 00:10:39,650
in<font color="#E5E5E5"> coordination as</font><font color="#CCCCCC"> well PG routing which</font>

248
00:10:37,620 --> 00:10:41,910
is useful<font color="#CCCCCC"> for finding like you know uhm</font>

249
00:10:39,650 --> 00:10:43,860
mapping<font color="#E5E5E5"> right like how do I get</font><font color="#CCCCCC"> from</font>

250
00:10:41,910 --> 00:10:45,829
point A to point B based on<font color="#E5E5E5"> these roads</font>

251
00:10:43,860 --> 00:10:49,260
and otherwise

252
00:10:45,830 --> 00:10:51,990
there's a<font color="#E5E5E5"> number of others around you</font>

253
00:10:49,260 --> 00:10:54,030
know connecting to remote<font color="#E5E5E5"> geospatial</font>

254
00:10:51,990 --> 00:10:56,670
data sources<font color="#E5E5E5"> that's really common if you</font>

255
00:10:54,030 --> 00:10:58,610
had<font color="#E5E5E5"> geospatial space is hey I've got</font>

256
00:10:56,670 --> 00:11:01,620
this<font color="#E5E5E5"> other data source that's over here</font>

257
00:10:58,610 --> 00:11:02,640
<font color="#CCCCCC">open</font><font color="#E5E5E5"> maps and that sort of thing</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

258
00:11:01,620 --> 00:11:04,770
can connect<font color="#CCCCCC"> directly from within</font>

259
00:11:02,640 --> 00:11:08,250
<font color="#E5E5E5">Postgres to those external you don't</font>

260
00:11:04,770 --> 00:11:11,130
have to pull all those in all right you

261
00:11:08,250 --> 00:11:13,050
know<font color="#E5E5E5"> shift a</font><font color="#CCCCCC"> bit to a hyper</font><font color="#E5E5E5"> log log this</font>

262
00:11:11,130 --> 00:11:15,590
<font color="#E5E5E5">is one</font><font color="#CCCCCC"> of my</font><font color="#E5E5E5"> favorite extensions</font><font color="#CCCCCC"> just</font>

263
00:11:13,050 --> 00:11:17,819
because I think it's<font color="#E5E5E5"> really fun to say</font>

264
00:11:15,590 --> 00:11:19,020
<font color="#CCCCCC">and I I think I sound way more</font>

265
00:11:17,820 --> 00:11:24,720
intelligent<font color="#CCCCCC"> when I start to</font><font color="#E5E5E5"> talk about</font>

266
00:11:19,020 --> 00:11:26,720
<font color="#E5E5E5">it as well</font><font color="#CCCCCC"> so if you read the paper on</font>

267
00:11:24,720 --> 00:11:29,250
hyper log log it's a paper out<font color="#CCCCCC"> of google</font>

268
00:11:26,720 --> 00:11:31,440
<font color="#CCCCCC">it has all of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> things in there</font>

269
00:11:29,250 --> 00:11:34,590
things like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> minimum</font><font color="#CCCCCC"> value bid</font>

270
00:11:31,440 --> 00:11:37,410
observable patterns stochastic<font color="#E5E5E5"> and</font>

271
00:11:34,590 --> 00:11:38,730
harmonic averaging<font color="#E5E5E5"> this do all these</font>

272
00:11:37,410 --> 00:11:45,420
<font color="#E5E5E5">things make perfect</font><font color="#CCCCCC"> sense to everyone</font><font color="#E5E5E5"> in</font>

273
00:11:38,730 --> 00:11:48,090
here cool<font color="#CCCCCC"> I'm not alone I read the paper</font>

274
00:11:45,420 --> 00:11:50,729
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there's all sorts of math in it that</font>

275
00:11:48,090 --> 00:11:51,930
makes a lot<font color="#E5E5E5"> of sense like for all sorts</font>

276
00:11:50,730 --> 00:11:54,870
of<font color="#E5E5E5"> reasons that I don't understand at</font>

277
00:11:51,930 --> 00:11:57,239
all<font color="#E5E5E5"> to simplify it</font>

278
00:11:54,870 --> 00:11:59,130
it's basically probabilistic<font color="#E5E5E5"> uniques</font>

279
00:11:57,240 --> 00:12:01,320
with a small footprint<font color="#E5E5E5"> or I like</font><font color="#CCCCCC"> to</font>

280
00:11:59,130 --> 00:12:03,420
think<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> close enough uniques so what</font>

281
00:12:01,320 --> 00:12:06,210
happens is it's doing<font color="#E5E5E5"> some sampling of</font>

282
00:12:03,420 --> 00:12:08,569
data as it comes<font color="#CCCCCC"> in basically how</font><font color="#E5E5E5"> many</font>

283
00:12:06,210 --> 00:12:11,220
zeros are<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the front of the value</font>

284
00:12:08,570 --> 00:12:13,560
sampling<font color="#CCCCCC"> that down</font><font color="#E5E5E5"> combining it with</font>

285
00:12:11,220 --> 00:12:17,670
other<font color="#E5E5E5"> sets so they can do really</font>

286
00:12:13,560 --> 00:12:19,920
interesting things so taking a<font color="#CCCCCC"> look at</font>

287
00:12:17,670 --> 00:12:21,839
it we've got the extension<font color="#E5E5E5"> HL that we're</font>

288
00:12:19,920 --> 00:12:23,760
<font color="#E5E5E5">going to create and then we've got this</font>

289
00:12:21,840 --> 00:12:26,670
new data type<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can see that</font><font color="#E5E5E5"> I'm</font>

290
00:12:23,760 --> 00:12:28,020
<font color="#CCCCCC">going to call it set in HL l</font><font color="#E5E5E5"> now when I</font>

291
00:12:26,670 --> 00:12:29,520
want<font color="#E5E5E5"> to insert into it I'm not</font><font color="#CCCCCC"> just</font>

292
00:12:28,020 --> 00:12:32,730
gonna<font color="#E5E5E5"> insert into it I'm gonna use a</font>

293
00:12:29,520 --> 00:12:34,290
function that<font color="#E5E5E5"> says hey hash this value</font>

294
00:12:32,730 --> 00:12:36,090
<font color="#E5E5E5">and so we can hash anything pretty much</font>

295
00:12:34,290 --> 00:12:38,310
<font color="#E5E5E5">we can have some integer we can hash</font>

296
00:12:36,090 --> 00:12:41,040
text it's gonna take a hash of<font color="#E5E5E5"> this and</font>

297
00:12:38,310 --> 00:12:44,099
store this<font color="#E5E5E5"> directly in this data type</font>

298
00:12:41,040 --> 00:12:46,140
now and what I'm going<font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> create</font>

299
00:12:44,100 --> 00:12:48,360
this table<font color="#E5E5E5"> so in this case I'm taking</font>

300
00:12:46,140 --> 00:12:50,040
<font color="#E5E5E5">all of the raw site visits I have every</font>

301
00:12:48,360 --> 00:12:52,380
single<font color="#CCCCCC"> day</font><font color="#E5E5E5"> I'm just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> record an</font>

302
00:12:50,040 --> 00:12:54,300
impression to my website<font color="#E5E5E5"> save that and</font>

303
00:12:52,380 --> 00:12:57,740
<font color="#E5E5E5">then I roll this up into a unique stable</font>

304
00:12:54,300 --> 00:12:59,969
at the end of the day so I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do</font>

305
00:12:57,740 --> 00:13:02,070
insert daily<font color="#E5E5E5"> uniques and going to select</font>

306
00:12:59,970 --> 00:13:06,240
<font color="#E5E5E5">all of</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> values</font><font color="#CCCCCC"> and I'm gonna hash them</font>

307
00:13:02,070 --> 00:13:08,340
together<font color="#E5E5E5"> now when I query this table</font>

308
00:13:06,240 --> 00:13:12,600
it's gonna<font color="#E5E5E5"> get I'm gonna get this</font><font color="#CCCCCC"> so</font>

309
00:13:08,340 --> 00:13:14,990
it's super intelligible right<font color="#CCCCCC"> what I can</font>

310
00:13:12,600 --> 00:13:17,790
do with this though is<font color="#CCCCCC"> I've got this</font>

311
00:13:14,990 --> 00:13:18,930
daily<font color="#E5E5E5"> uniques table and I can query and</font>

312
00:13:17,790 --> 00:13:22,680
get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> record back that</font><font color="#CCCCCC"> doesn't make</font><font color="#E5E5E5"> any</font>

313
00:13:18,930 --> 00:13:24,359
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> what I can do is basically say</font>

314
00:13:22,680 --> 00:13:26,489
how many<font color="#E5E5E5"> uniques are there and extract</font>

315
00:13:24,360 --> 00:13:28,110
it<font color="#CCCCCC"> from this</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> start to</font><font color="#CCCCCC"> combine</font>

316
00:13:26,490 --> 00:13:29,250
this so I've got like I saw<font color="#E5E5E5"> a</font><font color="#CCCCCC"> hundred</font>

317
00:13:28,110 --> 00:13:31,140
unique people on Monday

318
00:13:29,250 --> 00:13:33,450
I saw a<font color="#E5E5E5"> hundred unique people on Tuesday</font>

319
00:13:31,140 --> 00:13:35,430
right<font color="#CCCCCC"> but how many</font><font color="#E5E5E5"> did I see on the</font>

320
00:13:33,450 --> 00:13:37,080
<font color="#CCCCCC">combination of Monday and Tuesday that</font>

321
00:13:35,430 --> 00:13:38,910
<font color="#CCCCCC">hll is really interesting in that it can</font>

322
00:13:37,080 --> 00:13:40,680
<font color="#E5E5E5">combine those two so I can see how many</font>

323
00:13:38,910 --> 00:13:42,810
<font color="#E5E5E5">people did I see both days how</font><font color="#CCCCCC"> many</font>

324
00:13:40,680 --> 00:13:46,589
people did I see on just one<font color="#E5E5E5"> of the days</font>

325
00:13:42,810 --> 00:13:50,219
those sort of things<font color="#E5E5E5"> so a few best</font>

326
00:13:46,590 --> 00:13:51,570
<font color="#E5E5E5">practices</font><font color="#CCCCCC"> for it it uses</font><font color="#E5E5E5"> update so</font>

327
00:13:50,220 --> 00:13:52,620
you're not gonna insert<font color="#CCCCCC"> directly into it</font>

328
00:13:51,570 --> 00:13:52,890
you're gonna<font color="#E5E5E5"> take data from somewhere</font>

329
00:13:52,620 --> 00:13:56,010
<font color="#CCCCCC">else</font>

330
00:13:52,890 --> 00:13:58,410
<font color="#CCCCCC">update into that data type</font><font color="#E5E5E5"> and you do</font>

331
00:13:56,010 --> 00:14:00,000
want to tweak the config so I said it's

332
00:13:58,410 --> 00:14:01,829
you know<font color="#E5E5E5"> close enough</font><font color="#CCCCCC"> to unique it's</font>

333
00:14:00,000 --> 00:14:03,720
usually quite accurate<font color="#E5E5E5"> even right out of</font>

334
00:14:01,830 --> 00:14:05,040
the box<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you could</font><font color="#E5E5E5"> tune a lot of</font>

335
00:14:03,720 --> 00:14:08,430
things like<font color="#E5E5E5"> how big is the data</font>

336
00:14:05,040 --> 00:14:09,810
structure itself<font color="#E5E5E5"> how accurate is it how</font>

337
00:14:08,430 --> 00:14:10,979
sparse is your data so you<font color="#CCCCCC"> can actually</font>

338
00:14:09,810 --> 00:14:13,739
<font color="#E5E5E5">come in here and</font><font color="#CCCCCC"> tune a lot of these</font>

339
00:14:10,980 --> 00:14:17,160
config settings for it so is it better

340
00:14:13,740 --> 00:14:20,280
<font color="#CCCCCC">than just having</font><font color="#E5E5E5"> the raw data with it</font>

341
00:14:17,160 --> 00:14:23,490
you can store estimate account of<font color="#CCCCCC"> around</font>

342
00:14:20,280 --> 00:14:25,140
<font color="#E5E5E5">tens of billions</font><font color="#CCCCCC"> and a little over a</font>

343
00:14:23,490 --> 00:14:27,360
thousand bytes<font color="#E5E5E5"> so I'd say that some</font>

344
00:14:25,140 --> 00:14:29,400
pretty good compression<font color="#E5E5E5"> with a few</font>

345
00:14:27,360 --> 00:14:30,750
percent<font color="#E5E5E5"> of error and for most cases if</font>

346
00:14:29,400 --> 00:14:33,390
<font color="#E5E5E5">you're like an ad network if you're an</font>

347
00:14:30,750 --> 00:14:40,050
advertising that can work<font color="#E5E5E5"> really well</font>

348
00:14:33,390 --> 00:14:42,680
versus storing all the raw<font color="#E5E5E5"> data all</font>

349
00:14:40,050 --> 00:14:46,530
<font color="#E5E5E5">right so top in</font><font color="#CCCCCC"> top ten is another</font>

350
00:14:42,680 --> 00:14:48,810
approximation<font color="#CCCCCC"> extension as well so for</font>

351
00:14:46,530 --> 00:14:51,270
<font color="#CCCCCC">hll</font><font color="#E5E5E5"> like if you have data that's too big</font>

352
00:14:48,810 --> 00:14:52,170
<font color="#E5E5E5">to have uniques or it's too costly it's</font>

353
00:14:51,270 --> 00:14:56,310
a great one

354
00:14:52,170 --> 00:14:58,530
top in also known as top<font color="#CCCCCC"> k often is the</font>

355
00:14:56,310 --> 00:15:00,359
top set of people<font color="#CCCCCC"> that have done X or Y</font>

356
00:14:58,530 --> 00:15:01,530
<font color="#E5E5E5">so if you want to see what are your top</font>

357
00:15:00,360 --> 00:15:03,930
<font color="#CCCCCC">ten</font>

358
00:15:01,530 --> 00:15:11,400
pages on your website<font color="#E5E5E5"> by a visit it's a</font>

359
00:15:03,930 --> 00:15:12,959
great one<font color="#E5E5E5"> so</font><font color="#CCCCCC"> top in</font><font color="#E5E5E5"> we're gonna create</font>

360
00:15:11,400 --> 00:15:16,230
the extension and then we're gonna have

361
00:15:12,960 --> 00:15:18,030
a top in but<font color="#E5E5E5"> instead of soaring the top</font>

362
00:15:16,230 --> 00:15:21,210
in is a data<font color="#E5E5E5"> type</font><font color="#CCCCCC"> we're going to get a</font>

363
00:15:18,030 --> 00:15:23,910
store it as a JSON<font color="#CCCCCC"> B now when we insert</font>

364
00:15:21,210 --> 00:15:25,650
<font color="#E5E5E5">it into it we're gonna do this top in a</font>

365
00:15:23,910 --> 00:15:28,380
tag<font color="#E5E5E5"> so we're</font><font color="#CCCCCC"> gonna insert it in a</font>

366
00:15:25,650 --> 00:15:30,810
similar fashion<font color="#CCCCCC"> to how we did with</font><font color="#E5E5E5"> hll</font>

367
00:15:28,380 --> 00:15:33,810
but our data types actually<font color="#E5E5E5"> appear JSON</font>

368
00:15:30,810 --> 00:15:35,760
data type<font color="#E5E5E5"> which is pretty nice</font><font color="#CCCCCC"> so</font>

369
00:15:33,810 --> 00:15:37,800
instead of that when we<font color="#E5E5E5"> query the hll</font>

370
00:15:35,760 --> 00:15:41,220
table before<font color="#CCCCCC"> and we got</font><font color="#E5E5E5"> that</font>

371
00:15:37,800 --> 00:15:44,670
unintelligible<font color="#E5E5E5"> set of bytes</font><font color="#CCCCCC"> here what we</font>

372
00:15:41,220 --> 00:15:47,310
can<font color="#CCCCCC"> see is a JSON B data type that's</font>

373
00:15:44,670 --> 00:15:50,060
pretty understandable<font color="#CCCCCC"> so this is my top</font>

374
00:15:47,310 --> 00:15:55,319
thousand users<font color="#E5E5E5"> this could be my top</font>

375
00:15:50,060 --> 00:15:57,359
<font color="#E5E5E5">pages on my website</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> to query this</font>

376
00:15:55,320 --> 00:15:58,710
<font color="#CCCCCC">we've also got a very very similar</font><font color="#E5E5E5"> at</font>

377
00:15:57,360 --> 00:16:01,680
similar aggregate to what we had with

378
00:15:58,710 --> 00:16:02,880
<font color="#E5E5E5">hol so to parse this out though hey if I</font>

379
00:16:01,680 --> 00:16:05,339
actually want to know what are<font color="#CCCCCC"> my top</font>

380
00:16:02,880 --> 00:16:07,350
<font color="#E5E5E5">pages for a set of days or top github</font>

381
00:16:05,340 --> 00:16:10,440
repositories<font color="#E5E5E5"> here I'm going to use the</font>

382
00:16:07,350 --> 00:16:13,380
top<font color="#CCCCCC"> pane</font><font color="#E5E5E5"> Union aggregate and feed</font><font color="#CCCCCC"> that</font>

383
00:16:10,440 --> 00:16:16,560
in to the top in function itself which

384
00:16:13,380 --> 00:16:20,300
expects<font color="#E5E5E5"> this data type and I get a</font>

385
00:16:16,560 --> 00:16:20,300
pretty intelligible<font color="#E5E5E5"> nice output here</font>

386
00:16:21,560 --> 00:16:28,979
cool<font color="#CCCCCC"> so shifting a bit</font><font color="#E5E5E5"> there's a lot of</font>

387
00:16:27,180 --> 00:16:32,069
you know<font color="#E5E5E5"> interesting ones like hyper</font><font color="#CCCCCC"> log</font>

388
00:16:28,980 --> 00:16:35,450
<font color="#CCCCCC">log</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are approximation</font><font color="#E5E5E5"> allow</font>

389
00:16:32,070 --> 00:16:37,440
<font color="#E5E5E5">us to do kind of some new operation</font>

390
00:16:35,450 --> 00:16:39,030
<font color="#E5E5E5">there's also extensions that kind of</font>

391
00:16:37,440 --> 00:16:42,540
change<font color="#CCCCCC"> fundamentally what</font><font color="#E5E5E5"> Postgres can</font>

392
00:16:39,030 --> 00:16:44,610
do so time scale is a company<font color="#CCCCCC"> that</font>

393
00:16:42,540 --> 00:16:47,069
actually runs and has a time series

394
00:16:44,610 --> 00:16:50,490
extension called time<font color="#CCCCCC"> sell till time</font>

395
00:16:47,070 --> 00:16:52,710
scale itself<font color="#CCCCCC"> so if you're looking</font><font color="#E5E5E5"> at</font>

396
00:16:50,490 --> 00:16:54,630
time scale<font color="#E5E5E5"> a few kind of requirements</font>

397
00:16:52,710 --> 00:16:55,920
generally like you want to have you<font color="#CCCCCC"> know</font>

398
00:16:54,630 --> 00:16:57,750
data records that always have a

399
00:16:55,920 --> 00:17:00,050
<font color="#E5E5E5">timestamp</font><font color="#CCCCCC"> here you're looking</font><font color="#E5E5E5"> at</font>

400
00:16:57,750 --> 00:17:02,490
probably<font color="#E5E5E5"> sensor data is the most common</font>

401
00:17:00,050 --> 00:17:04,530
and you're looking at a pinned only data

402
00:17:02,490 --> 00:17:06,390
<font color="#E5E5E5">so since</font><font color="#CCCCCC"> they're data again a good fit</font>

403
00:17:04,530 --> 00:17:08,819
like it's a pinned only I'm<font color="#E5E5E5"> not going</font>

404
00:17:06,390 --> 00:17:11,490
back<font color="#E5E5E5"> the sensor itself</font><font color="#CCCCCC"> isn't getting you</font>

405
00:17:08,819 --> 00:17:13,099
know updated<font color="#E5E5E5"> edited saving values it's</font>

406
00:17:11,490 --> 00:17:16,730
just saying here I read this<font color="#E5E5E5"> send it off</font>

407
00:17:13,099 --> 00:17:18,379
to the database<font color="#CCCCCC"> and this is really</font><font color="#E5E5E5"> key I</font>

408
00:17:16,730 --> 00:17:21,559
<font color="#CCCCCC">think for a</font><font color="#E5E5E5"> lot of time series databases</font>

409
00:17:18,380 --> 00:17:23,720
where they often<font color="#CCCCCC"> get</font><font color="#E5E5E5"> you overuse recency</font>

410
00:17:21,559 --> 00:17:27,799
is really really important in key<font color="#E5E5E5"> if</font>

411
00:17:23,720 --> 00:17:29,809
you're always<font color="#CCCCCC"> recording all of the data</font>

412
00:17:27,799 --> 00:17:31,220
<font color="#E5E5E5">and always querying on all of it a time</font>

413
00:17:29,809 --> 00:17:32,240
series database<font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> gonna help</font><font color="#E5E5E5"> you as</font>

414
00:17:31,220 --> 00:17:33,919
much<font color="#CCCCCC"> because you're having the scan of</font>

415
00:17:32,240 --> 00:17:36,410
<font color="#CCCCCC">the data anyways</font><font color="#E5E5E5"> so you're really</font>

416
00:17:33,919 --> 00:17:38,570
looking<font color="#CCCCCC"> for you know no updates to your</font>

417
00:17:36,410 --> 00:17:43,789
<font color="#E5E5E5">data and a recency bias when you're</font>

418
00:17:38,570 --> 00:17:46,460
querying it so taking a look at time

419
00:17:43,789 --> 00:17:50,419
scale<font color="#CCCCCC"> we're gonna go ahead and create a</font>

420
00:17:46,460 --> 00:17:54,679
table<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> taxi rights</font><font color="#CCCCCC"> so it has the</font>

421
00:17:50,419 --> 00:17:58,130
<font color="#E5E5E5">pickup the from the two things like rate</font>

422
00:17:54,679 --> 00:18:00,620
and all that sort of<font color="#E5E5E5"> data now this is</font>

423
00:17:58,130 --> 00:18:01,820
just<font color="#E5E5E5"> a standard Postgres table to start</font>

424
00:18:00,620 --> 00:18:05,449
with<font color="#E5E5E5"> time scale in place what we're</font>

425
00:18:01,820 --> 00:18:06,350
gonna do is take this<font color="#E5E5E5"> table and run a</font>

426
00:18:05,450 --> 00:18:08,539
<font color="#E5E5E5">function on it</font>

427
00:18:06,350 --> 00:18:09,980
that's called create hyper table under

428
00:18:08,539 --> 00:18:11,658
<font color="#E5E5E5">the covers this is going to create all</font>

429
00:18:09,980 --> 00:18:13,520
sorts of automatic partitions<font color="#CCCCCC"> so it's</font>

430
00:18:11,659 --> 00:18:16,130
going<font color="#CCCCCC"> to create like maybe a one minute</font>

431
00:18:13,520 --> 00:18:18,620
<font color="#E5E5E5">partition for every set of new time</font>

432
00:18:16,130 --> 00:18:19,940
seriously that it comes in at this<font color="#E5E5E5"> point</font>

433
00:18:18,620 --> 00:18:22,070
<font color="#CCCCCC">I'd only</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> think about it or worry</font>

434
00:18:19,940 --> 00:18:26,809
<font color="#CCCCCC">about it it's</font><font color="#E5E5E5"> just doing it for for me</font>

435
00:18:22,070 --> 00:18:29,030
under<font color="#E5E5E5"> the covers and then when I start</font>

436
00:18:26,809 --> 00:18:31,070
to query yet<font color="#CCCCCC"> we're not gonna do anything</font>

437
00:18:29,030 --> 00:18:32,899
<font color="#E5E5E5">special really again</font><font color="#CCCCCC"> so here we have you</font>

438
00:18:31,070 --> 00:18:37,730
<font color="#CCCCCC">know a</font><font color="#E5E5E5"> pretty standard query that's</font>

439
00:18:32,900 --> 00:18:41,120
finding the average<font color="#CCCCCC"> fare amounts grouped</font>

440
00:18:37,730 --> 00:18:42,679
by day<font color="#CCCCCC"> under</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> covers what this is</font>

441
00:18:41,120 --> 00:18:45,408
<font color="#E5E5E5">going to do is start</font><font color="#CCCCCC"> to split</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> and</font>

442
00:18:42,679 --> 00:18:47,090
<font color="#E5E5E5">say hey</font><font color="#CCCCCC"> five minutes of this data stored</font>

443
00:18:45,409 --> 00:18:48,770
<font color="#CCCCCC">here aggregate it together five minutes</font>

444
00:18:47,090 --> 00:18:50,030
of this<font color="#CCCCCC"> data</font><font color="#E5E5E5"> stored here so it actually</font>

445
00:18:48,770 --> 00:18:51,590
<font color="#E5E5E5">knows how to go to those underlying</font>

446
00:18:50,030 --> 00:18:57,020
partitions without you having to<font color="#CCCCCC"> think</font>

447
00:18:51,590 --> 00:18:58,490
about<font color="#E5E5E5"> it and you can go to basically</font>

448
00:18:57,020 --> 00:19:01,520
really really granular buckets as well

449
00:18:58,490 --> 00:19:02,990
so you can do really<font color="#E5E5E5"> broad more granular</font>

450
00:19:01,520 --> 00:19:04,039
than<font color="#E5E5E5"> exists from there partitions it</font>

451
00:19:02,990 --> 00:19:06,770
knows how to span partitions

452
00:19:04,039 --> 00:19:08,330
appropriately<font color="#CCCCCC"> the other nice thing is</font>

453
00:19:06,770 --> 00:19:09,980
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> go in here and</font><font color="#E5E5E5"> tune</font><font color="#CCCCCC"> in and the</font>

454
00:19:08,330 --> 00:19:12,289
config to start to roll off the<font color="#E5E5E5"> old ones</font>

455
00:19:09,980 --> 00:19:14,809
this<font color="#E5E5E5"> is generally pretty key for the</font>

456
00:19:12,289 --> 00:19:16,730
time series<font color="#E5E5E5"> databases where hey you have</font>

457
00:19:14,809 --> 00:19:18,139
a lot of<font color="#E5E5E5"> data</font><font color="#CCCCCC"> but if you're</font><font color="#E5E5E5"> using recent</font>

458
00:19:16,730 --> 00:19:19,700
<font color="#E5E5E5">data you want to get rid of the old</font>

459
00:19:18,140 --> 00:19:23,179
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> so you can move</font><font color="#E5E5E5"> it either too cold</font>

460
00:19:19,700 --> 00:19:23,779
or storage<font color="#CCCCCC"> Dupre aggregates</font><font color="#E5E5E5"> save them</font>

461
00:19:23,179 --> 00:19:25,669
and<font color="#E5E5E5"> then</font>

462
00:19:23,779 --> 00:19:31,549
delete the raw data<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> generally a</font>

463
00:19:25,669 --> 00:19:33,289
pretty common workflow within<font color="#E5E5E5"> the time</font>

464
00:19:31,549 --> 00:19:36,200
series<font color="#CCCCCC"> space there's another one PG part</font>

465
00:19:33,289 --> 00:19:38,989
man as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> so post grits itself</font><font color="#E5E5E5"> got</font>

466
00:19:36,200 --> 00:19:41,929
native time partitioning a couple of

467
00:19:38,989 --> 00:19:44,389
releases<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> at the time it had some</font>

468
00:19:41,929 --> 00:19:46,789
rough edges<font color="#CCCCCC"> it's gotten better</font>

469
00:19:44,389 --> 00:19:48,258
I still say generally don't use<font color="#E5E5E5"> the</font>

470
00:19:46,789 --> 00:19:52,129
native<font color="#E5E5E5"> Postgres partitioning without</font>

471
00:19:48,259 --> 00:19:53,629
some extra utility<font color="#E5E5E5"> PG part man is really</font>

472
00:19:52,129 --> 00:19:57,799
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of nice to smooth out</font><font color="#E5E5E5"> the rough</font>

473
00:19:53,629 --> 00:19:59,509
<font color="#E5E5E5">edges</font><font color="#CCCCCC"> I think by</font><font color="#E5E5E5"> I think by</font><font color="#CCCCCC"> 812 knock on</font>

474
00:19:57,799 --> 00:20:00,979
wood<font color="#E5E5E5"> it'll be where we don't need</font>

475
00:19:59,509 --> 00:20:02,539
external extensions it's gotten to the

476
00:20:00,979 --> 00:20:04,969
point<font color="#CCCCCC"> where</font><font color="#E5E5E5"> it's super solid and robust</font>

477
00:20:02,539 --> 00:20:06,408
on its own but for now you generally

478
00:20:04,969 --> 00:20:11,570
<font color="#E5E5E5">want to rely on something like PG part</font>

479
00:20:06,409 --> 00:20:13,789
<font color="#E5E5E5">man or time scale so PG part man</font>

480
00:20:11,570 --> 00:20:16,779
time scale kind<font color="#E5E5E5"> of does its own thing in</font>

481
00:20:13,789 --> 00:20:19,489
regards to partitioning PG part man

482
00:20:16,779 --> 00:20:21,379
<font color="#E5E5E5">builds on and Postgres itself so it</font>

483
00:20:19,489 --> 00:20:23,330
takes<font color="#E5E5E5"> all of those the native</font><font color="#CCCCCC"> Postgres</font>

484
00:20:21,379 --> 00:20:25,158
functionality and gives you basically

485
00:20:23,330 --> 00:20:27,619
<font color="#E5E5E5">some some helper utilities and</font>

486
00:20:25,159 --> 00:20:28,909
maintenance<font color="#CCCCCC"> Siemens so that you don't</font>

487
00:20:27,619 --> 00:20:33,199
have to<font color="#E5E5E5"> kind of do some of the manual</font>

488
00:20:28,909 --> 00:20:34,940
overhead<font color="#E5E5E5"> that you would so for a PG part</font>

489
00:20:33,200 --> 00:20:37,369
man<font color="#E5E5E5"> we're gonna create</font><font color="#CCCCCC"> our table and</font>

490
00:20:34,940 --> 00:20:39,619
we're gonna use the native partition

491
00:20:37,369 --> 00:20:40,999
here and say partition by<font color="#E5E5E5"> created</font><font color="#CCCCCC"> at so</font>

492
00:20:39,619 --> 00:20:42,678
a little<font color="#E5E5E5"> different</font><font color="#CCCCCC"> from time scale where</font>

493
00:20:40,999 --> 00:20:44,570
we created<font color="#E5E5E5"> the</font><font color="#CCCCCC"> table first then came in</font>

494
00:20:42,679 --> 00:20:46,099
and<font color="#CCCCCC"> created this hyper table here up</font>

495
00:20:44,570 --> 00:20:47,689
front<font color="#E5E5E5"> we're gonna specify</font><font color="#CCCCCC"> that this</font>

496
00:20:46,099 --> 00:20:56,119
table<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna be partitioned</font><font color="#E5E5E5"> by</font>

497
00:20:47,690 --> 00:20:59,830
something<font color="#E5E5E5"> then I'm gonna have PG part</font>

498
00:20:56,119 --> 00:21:02,330
<font color="#E5E5E5">man come in here and create my parent</font>

499
00:20:59,830 --> 00:21:05,089
<font color="#CCCCCC">and I'm gonna go ahead and update</font><font color="#E5E5E5"> this</font>

500
00:21:02,330 --> 00:21:07,418
config right away so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a thing I</font>

501
00:21:05,089 --> 00:21:09,710
personally like to do you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

502
00:21:07,419 --> 00:21:11,359
<font color="#E5E5E5">it's up to you on your precision setting</font>

503
00:21:09,710 --> 00:21:13,489
but basically<font color="#E5E5E5"> I'm gonna say hey keep</font>

504
00:21:11,359 --> 00:21:15,739
going creating partitions forever<font color="#E5E5E5"> as</font>

505
00:21:13,489 --> 00:21:18,859
long as there's new data coming in don't

506
00:21:15,739 --> 00:21:20,119
<font color="#E5E5E5">just stop and run out</font><font color="#CCCCCC"> this is a common</font>

507
00:21:18,859 --> 00:21:21,678
thing I think I see with a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people</font>

508
00:21:20,119 --> 00:21:23,988
that manually<font color="#CCCCCC"> setup time partitioning</font>

509
00:21:21,679 --> 00:21:27,080
they say I want<font color="#E5E5E5"> to create five years</font>

510
00:21:23,989 --> 00:21:30,169
worth of tables<font color="#CCCCCC"> that's more than I will</font>

511
00:21:27,080 --> 00:21:31,849
<font color="#E5E5E5">ever need</font><font color="#CCCCCC"> and five</font><font color="#E5E5E5"> years later</font><font color="#CCCCCC"> you're</font>

512
00:21:30,169 --> 00:21:33,680
not around and no one<font color="#CCCCCC"> that</font><font color="#E5E5E5"> knows how</font>

513
00:21:31,849 --> 00:21:35,149
that<font color="#E5E5E5"> system is around</font>

514
00:21:33,680 --> 00:21:36,860
and you're getting errors in the log

515
00:21:35,150 --> 00:21:39,740
<font color="#E5E5E5">that you can't you can't insert to a</font>

516
00:21:36,860 --> 00:21:41,540
partition<font color="#CCCCCC"> that doesn't exist</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> please</font>

517
00:21:39,740 --> 00:21:44,720
<font color="#E5E5E5">set up automation around most of your</font>

518
00:21:41,540 --> 00:21:47,060
partitioning items now under the covers

519
00:21:44,720 --> 00:21:48,410
<font color="#CCCCCC">what</font><font color="#E5E5E5"> this is going to do is create all</font>

520
00:21:47,060 --> 00:21:52,370
these events tables so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

521
00:21:48,410 --> 00:21:53,870
<font color="#E5E5E5">create events</font><font color="#CCCCCC"> 2018</font><font color="#E5E5E5"> for nine o'clock nine</font>

522
00:21:52,370 --> 00:22:00,439
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> five nine ten</font>

523
00:21:53,870 --> 00:22:01,879
etc so PG part man has a pretty<font color="#CCCCCC"> bit</font>

524
00:22:00,440 --> 00:22:04,670
robust config<font color="#E5E5E5"> you can come in here and</font>

525
00:22:01,880 --> 00:22:06,410
<font color="#E5E5E5">turn a lot of things now the config</font>

526
00:22:04,670 --> 00:22:08,510
itself is just within<font color="#E5E5E5"> the Postgres table</font>

527
00:22:06,410 --> 00:22:09,680
<font color="#E5E5E5">so things like versioning of it you</font>

528
00:22:08,510 --> 00:22:11,510
maybe want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be you know a</font><font color="#CCCCCC"> little</font>

529
00:22:09,680 --> 00:22:12,680
careful and that sort of thing<font color="#E5E5E5"> but</font>

530
00:22:11,510 --> 00:22:15,379
there's a number<font color="#E5E5E5"> of things you want</font><font color="#CCCCCC"> to</font>

531
00:22:12,680 --> 00:22:16,820
come in here and<font color="#CCCCCC"> probably set like how</font>

532
00:22:15,380 --> 00:22:18,590
<font color="#E5E5E5">many partitions you want to pre make</font>

533
00:22:16,820 --> 00:22:20,629
when you see data from<font color="#E5E5E5"> like right now</font><font color="#CCCCCC"> I</font>

534
00:22:18,590 --> 00:22:22,550
want<font color="#E5E5E5"> to create four partitions into the</font>

535
00:22:20,630 --> 00:22:24,020
future for this so that when your data

536
00:22:22,550 --> 00:22:28,159
<font color="#E5E5E5">comes in I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> on the fly creating</font>

537
00:22:24,020 --> 00:22:31,100
that<font color="#E5E5E5"> how often</font><font color="#CCCCCC"> do you</font><font color="#E5E5E5"> want your jobs to</font>

538
00:22:28,160 --> 00:22:32,390
run<font color="#CCCCCC"> how many how long do you</font><font color="#E5E5E5"> want to</font>

539
00:22:31,100 --> 00:22:36,949
<font color="#E5E5E5">retain things do</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to retain</font>

540
00:22:32,390 --> 00:22:38,090
<font color="#CCCCCC">things for</font><font color="#E5E5E5"> 30</font><font color="#CCCCCC"> days for one day</font><font color="#E5E5E5"> and PG</font>

541
00:22:36,950 --> 00:22:39,680
<font color="#CCCCCC">partly</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> will then</font><font color="#E5E5E5"> go in and</font>

542
00:22:38,090 --> 00:22:41,800
<font color="#E5E5E5">automatically take care</font><font color="#CCCCCC"> of dropping</font>

543
00:22:39,680 --> 00:22:50,410
these<font color="#E5E5E5"> old partitions creating new ones</font>

544
00:22:41,800 --> 00:22:50,409
<font color="#E5E5E5">that sort of thing so</font><font color="#CCCCCC"> a PG department</font>

545
00:22:50,740 --> 00:22:53,810
basically builds on that<font color="#E5E5E5"> native</font>

546
00:22:52,490 --> 00:22:55,640
partitioning<font color="#E5E5E5"> I would say if you really</font>

547
00:22:53,810 --> 00:22:57,590
want to use<font color="#E5E5E5"> Postgres native partitioning</font>

548
00:22:55,640 --> 00:23:00,050
which you should it's there it's gonna

549
00:22:57,590 --> 00:23:01,639
keep<font color="#CCCCCC"> getting better you should also</font>

550
00:23:00,050 --> 00:23:03,649
consider<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> PG</font><font color="#E5E5E5"> part man alongside</font>

551
00:23:01,640 --> 00:23:05,000
it if for some reason you<font color="#CCCCCC"> don't want the</font>

552
00:23:03,650 --> 00:23:14,330
native partitioning take a look at time

553
00:23:05,000 --> 00:23:16,160
scale all right so it's<font color="#CCCCCC"> situs so I</font>

554
00:23:14,330 --> 00:23:18,409
mentioned<font color="#CCCCCC"> I work at situs</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> side this</font>

555
00:23:16,160 --> 00:23:20,270
<font color="#E5E5E5">is also a open source extension as</font><font color="#CCCCCC"> well</font>

556
00:23:18,410 --> 00:23:22,700
<font color="#E5E5E5">so you can take it</font><font color="#CCCCCC"> like all these others</font>

557
00:23:20,270 --> 00:23:24,790
download it run it install<font color="#E5E5E5"> it</font><font color="#CCCCCC"> what's</font>

558
00:23:22,700 --> 00:23:26,900
<font color="#CCCCCC">itis does is turn</font><font color="#E5E5E5"> Postgres into a</font>

559
00:23:24,790 --> 00:23:30,020
horizontally scalable distributed

560
00:23:26,900 --> 00:23:31,790
database<font color="#E5E5E5"> so to your application it still</font>

561
00:23:30,020 --> 00:23:32,210
looks like<font color="#E5E5E5"> a single node both Postgres</font>

562
00:23:31,790 --> 00:23:33,950
database

563
00:23:32,210 --> 00:23:35,780
it looks like<font color="#CCCCCC"> Postgres because it is</font>

564
00:23:33,950 --> 00:23:37,190
under the coverage what we've done is

565
00:23:35,780 --> 00:23:39,320
spread that<font color="#CCCCCC"> out across</font><font color="#E5E5E5"> multiple physical</font>

566
00:23:37,190 --> 00:23:40,760
notes so basically<font color="#E5E5E5"> it</font><font color="#CCCCCC"> turns it into a</font>

567
00:23:39,320 --> 00:23:43,610
charted database without<font color="#E5E5E5"> you having to</font>

568
00:23:40,760 --> 00:23:44,840
<font color="#E5E5E5">worry</font><font color="#CCCCCC"> about it this generally is the</font>

569
00:23:43,610 --> 00:23:47,550
case when you're outgrowing the limits

570
00:23:44,840 --> 00:23:49,439
of<font color="#E5E5E5"> a single node I've seen that</font><font color="#CCCCCC"> happen</font>

571
00:23:47,550 --> 00:23:51,030
often in the terabytes<font color="#CCCCCC"> I've seen it</font>

572
00:23:49,440 --> 00:23:53,070
happen as early as a<font color="#E5E5E5"> hundred gigs if</font>

573
00:23:51,030 --> 00:23:55,110
you're not<font color="#E5E5E5"> ever gonna you know approach</font>

574
00:23:53,070 --> 00:23:58,560
that level you<font color="#E5E5E5"> don't need to you know</font>

575
00:23:55,110 --> 00:23:59,639
starting out<font color="#CCCCCC"> of the covers so really</font>

576
00:23:58,560 --> 00:24:02,730
quickly<font color="#E5E5E5"> for those that may</font><font color="#CCCCCC"> not be</font>

577
00:23:59,640 --> 00:24:04,830
<font color="#E5E5E5">familiar what is shorting</font><font color="#CCCCCC"> it's basically</font>

578
00:24:02,730 --> 00:24:08,130
the<font color="#E5E5E5"> process of splitting your database</font>

579
00:24:04,830 --> 00:24:13,500
into a bunch of smaller bits<font color="#E5E5E5"> so here if</font>

580
00:24:08,130 --> 00:24:14,640
I've got one database<font color="#E5E5E5"> right there and</font>

581
00:24:13,500 --> 00:24:16,610
I've<font color="#CCCCCC"> got a bunch of smaller tables</font>

582
00:24:14,640 --> 00:24:20,490
<font color="#E5E5E5">similar to that we had with partitioning</font>

583
00:24:16,610 --> 00:24:21,719
<font color="#E5E5E5">maybe that was 16 partitions</font><font color="#CCCCCC"> here what</font>

584
00:24:20,490 --> 00:24:24,360
I'm gonna do is<font color="#E5E5E5"> actually take this and</font>

585
00:24:21,720 --> 00:24:26,040
<font color="#CCCCCC">in this case I've got 32</font><font color="#E5E5E5"> I'm gonna</font>

586
00:24:24,360 --> 00:24:29,250
spread<font color="#E5E5E5"> them out across two physical</font>

587
00:24:26,040 --> 00:24:30,810
nodes<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> couple of important things</font><font color="#CCCCCC"> to</font>

588
00:24:29,250 --> 00:24:32,520
note here<font color="#CCCCCC"> I think a lot of people get a</font>

589
00:24:30,810 --> 00:24:34,470
<font color="#E5E5E5">little mixed up when they first start on</font>

590
00:24:32,520 --> 00:24:36,240
sharding<font color="#CCCCCC"> and say hey I'm</font><font color="#E5E5E5"> gonna create</font>

591
00:24:34,470 --> 00:24:39,030
<font color="#CCCCCC">two</font><font color="#E5E5E5"> shards because I have two physical</font>

592
00:24:36,240 --> 00:24:40,740
notes and what that means<font color="#E5E5E5"> is that's</font>

593
00:24:39,030 --> 00:24:42,240
<font color="#E5E5E5">great you split it up across two nodes</font>

594
00:24:40,740 --> 00:24:45,330
<font color="#E5E5E5">but if you want to go split that up</font>

595
00:24:42,240 --> 00:24:46,560
<font color="#E5E5E5">across you know four nodes now now how</font>

596
00:24:45,330 --> 00:24:48,510
are<font color="#CCCCCC"> you gonna split up</font><font color="#E5E5E5"> those tables that</font>

597
00:24:46,560 --> 00:24:50,310
were on there so it's really important

598
00:24:48,510 --> 00:24:52,410
<font color="#E5E5E5">to create a larger number</font><font color="#CCCCCC"> of logical</font>

599
00:24:50,310 --> 00:24:54,990
shards<font color="#E5E5E5"> than you have a physical nodes up</font>

600
00:24:52,410 --> 00:24:57,080
<font color="#E5E5E5">front</font><font color="#CCCCCC"> you don't have to use factors of</font>

601
00:24:54,990 --> 00:24:59,760
two but usually it<font color="#CCCCCC"> works pretty nicely</font>

602
00:24:57,080 --> 00:25:01,379
<font color="#CCCCCC">so here we've got</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> physical nodes but</font>

603
00:24:59,760 --> 00:25:05,550
<font color="#CCCCCC">thirty-two actual shards and other</font>

604
00:25:01,380 --> 00:25:09,480
covers<font color="#CCCCCC"> what you're gonna</font><font color="#E5E5E5"> do up front</font>

605
00:25:05,550 --> 00:25:12,419
<font color="#E5E5E5">usually is hash based</font><font color="#CCCCCC"> on some ID so hash</font>

606
00:25:09,480 --> 00:25:15,360
on you know your primary key<font color="#CCCCCC"> it can be</font>

607
00:25:12,420 --> 00:25:17,010
an integer can be text<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> there's</font>

608
00:25:15,360 --> 00:25:18,270
a lot<font color="#E5E5E5"> of it actually like talks on the</font>

609
00:25:17,010 --> 00:25:20,700
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> of hey what's the right</font>

610
00:25:18,270 --> 00:25:22,020
appropriate hashing function it's not

611
00:25:20,700 --> 00:25:24,840
<font color="#CCCCCC">going to determine whether you're</font>

612
00:25:22,020 --> 00:25:27,210
<font color="#CCCCCC">successful or fail with sharding</font><font color="#E5E5E5"> the</font>

613
00:25:24,840 --> 00:25:28,470
<font color="#E5E5E5">Postgres internal ones work great post</font>

614
00:25:27,210 --> 00:25:31,770
<font color="#E5E5E5">chris has its own internal hashing</font>

615
00:25:28,470 --> 00:25:33,720
functions<font color="#E5E5E5"> you can just use those and</font>

616
00:25:31,770 --> 00:25:36,870
<font color="#E5E5E5">again you're gonna define a large number</font>

617
00:25:33,720 --> 00:25:39,930
of shards<font color="#E5E5E5"> up front</font><font color="#CCCCCC"> to is generally bad</font>

618
00:25:36,870 --> 00:25:42,300
<font color="#E5E5E5">you also don't want to go overkill</font><font color="#CCCCCC"> two</font>

619
00:25:39,930 --> 00:25:43,530
<font color="#E5E5E5">million is probably on the extreme</font><font color="#CCCCCC"> a lot</font>

620
00:25:42,300 --> 00:25:46,560
of people in production I see with like

621
00:25:43,530 --> 00:25:53,190
128 256 and they'll be fine for the next

622
00:25:46,560 --> 00:25:54,240
<font color="#E5E5E5">10 15 20 years</font><font color="#CCCCCC"> probably so generally you</font>

623
00:25:53,190 --> 00:25:56,400
<font color="#E5E5E5">don't want to take and just you know</font>

624
00:25:54,240 --> 00:25:58,680
<font color="#E5E5E5">route values</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the other mistake</font><font color="#CCCCCC"> I</font>

625
00:25:56,400 --> 00:26:00,090
see<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> people say hey I want</font><font color="#E5E5E5"> to you</font>

626
00:25:58,680 --> 00:26:01,350
know<font color="#CCCCCC"> set</font><font color="#E5E5E5"> up sharding early on I'm gonna</font>

627
00:26:00,090 --> 00:26:03,720
put<font color="#E5E5E5"> my first 10</font><font color="#CCCCCC"> customers</font>

628
00:26:01,350 --> 00:26:05,730
this node my next<font color="#E5E5E5"> 10 customers on this</font>

629
00:26:03,720 --> 00:26:08,639
node my next 10 customers on the other

630
00:26:05,730 --> 00:26:12,450
node<font color="#CCCCCC"> the problem with that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> you're to</font>

631
00:26:08,639 --> 00:26:14,729
have some some big<font color="#CCCCCC"> hotspots and so my</font>

632
00:26:12,450 --> 00:26:16,529
first<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> customers are my oldest</font><font color="#E5E5E5"> there's</font>

633
00:26:14,730 --> 00:26:18,809
the one set of<font color="#E5E5E5"> my platform the longest</font>

634
00:26:16,529 --> 00:26:21,509
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then the ones with most data so now</font>

635
00:26:18,809 --> 00:26:23,668
I got all<font color="#E5E5E5"> those together</font><font color="#CCCCCC"> competing for</font>

636
00:26:21,509 --> 00:26:25,500
resources and<font color="#E5E5E5"> my new node with</font><font color="#CCCCCC"> my last</font>

637
00:26:23,669 --> 00:26:29,279
<font color="#E5E5E5">10 customers is a completely unoccupied</font>

638
00:26:25,500 --> 00:26:31,470
box<font color="#E5E5E5"> so what you're actually want to do</font>

639
00:26:29,279 --> 00:26:34,889
is<font color="#E5E5E5"> take a range of hashes right up front</font>

640
00:26:31,470 --> 00:26:37,200
<font color="#CCCCCC">so you're gonna say okay if I'm gonna</font>

641
00:26:34,889 --> 00:26:40,590
<font color="#E5E5E5">have 32 shards look at the resulting</font>

642
00:26:37,200 --> 00:26:43,169
<font color="#CCCCCC">hash range and split that up</font><font color="#E5E5E5"> so if I've</font>

643
00:26:40,590 --> 00:26:46,230
got<font color="#E5E5E5"> like a hash of one that's 46,000</font>

644
00:26:43,169 --> 00:26:49,200
I've got a hash<font color="#CCCCCC"> too - that's 27,000 and</font>

645
00:26:46,230 --> 00:26:52,409
<font color="#E5E5E5">if I divide up the entire space like</font>

646
00:26:49,200 --> 00:26:55,590
shard<font color="#E5E5E5"> 13 out of 32 shards would have the</font>

647
00:26:52,409 --> 00:26:58,169
hash values from<font color="#CCCCCC"> 26,000 to 28,000 so I</font>

648
00:26:55,590 --> 00:26:59,970
can see that<font color="#CCCCCC"> you know user number two</font>

649
00:26:58,169 --> 00:27:02,220
would go into bucket<font color="#CCCCCC"> number</font><font color="#E5E5E5"> 13 right</font>

650
00:26:59,970 --> 00:27:04,620
<font color="#CCCCCC">away this</font><font color="#E5E5E5"> is going to create</font><font color="#CCCCCC"> a nice</font>

651
00:27:02,220 --> 00:27:05,879
distribution<font color="#E5E5E5"> of my data without</font><font color="#CCCCCC"> me</font>

652
00:27:04,620 --> 00:27:08,610
having to<font color="#E5E5E5"> worry about those hotspots</font>

653
00:27:05,879 --> 00:27:13,469
<font color="#E5E5E5">it's not perfect but it covers 90%</font><font color="#CCCCCC"> of</font>

654
00:27:08,610 --> 00:27:14,610
<font color="#CCCCCC">cases</font><font color="#E5E5E5"> pretty well</font><font color="#CCCCCC"> and then what I'm</font>

655
00:27:13,470 --> 00:27:17,580
<font color="#E5E5E5">going to do is have like something like</font>

656
00:27:14,610 --> 00:27:19,918
an<font color="#CCCCCC"> event table</font><font color="#E5E5E5"> so here's how is it</font>

657
00:27:17,580 --> 00:27:23,480
working<font color="#E5E5E5"> we've got something like github</font>

658
00:27:19,919 --> 00:27:28,289
events<font color="#E5E5E5"> and the users we're gonna shard</font>

659
00:27:23,480 --> 00:27:32,260
<font color="#E5E5E5">both of these by the same column here I</font>

660
00:27:28,289 --> 00:27:34,789
believe user ID yep

661
00:27:32,260 --> 00:27:37,019
[Music]

662
00:27:34,789 --> 00:27:38,399
and so its site is we've gone ahead and

663
00:27:37,019 --> 00:27:40,350
already created those tables just<font color="#E5E5E5"> like</font>

664
00:27:38,399 --> 00:27:42,360
we did with time scale<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a standard</font>

665
00:27:40,350 --> 00:27:43,980
<font color="#E5E5E5">Postgres table nothing special about it</font>

666
00:27:42,360 --> 00:27:45,449
then<font color="#E5E5E5"> I'm gonna have this other function</font>

667
00:27:43,980 --> 00:27:46,679
<font color="#E5E5E5">called create</font><font color="#CCCCCC"> distributed table which</font>

668
00:27:45,450 --> 00:27:49,379
under the covers is going to go create

669
00:27:46,679 --> 00:27:51,179
<font color="#E5E5E5">all</font><font color="#CCCCCC"> those shards so under the covers I</font>

670
00:27:49,379 --> 00:27:52,379
didn't have to go<font color="#E5E5E5"> and create all those</font>

671
00:27:51,179 --> 00:27:52,769
different ones figure out how to route

672
00:27:52,379 --> 00:27:54,719
them

673
00:27:52,769 --> 00:27:57,679
I<font color="#E5E5E5"> just said create distributed table and</font>

674
00:27:54,720 --> 00:28:02,429
now I've got github<font color="#CCCCCC"> events</font><font color="#E5E5E5"> underscore a</font>

675
00:27:57,679 --> 00:28:04,649
100 200 3 etc<font color="#E5E5E5"> and then when I want to</font>

676
00:28:02,429 --> 00:28:06,269
insert data<font color="#E5E5E5"> I just inserted into github</font>

677
00:28:04,649 --> 00:28:09,928
events like I normally<font color="#E5E5E5"> would and it'll</font>

678
00:28:06,269 --> 00:28:12,929
rewrite and route that<font color="#E5E5E5"> then for</font><font color="#CCCCCC"> querying</font>

679
00:28:09,929 --> 00:28:15,090
<font color="#E5E5E5">we just execute normal sequel</font><font color="#CCCCCC"> we do a</font>

680
00:28:12,929 --> 00:28:17,340
select count star

681
00:28:15,090 --> 00:28:20,179
and what this<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> gonna do is</font>

682
00:28:17,340 --> 00:28:23,669
rewrite the execution under<font color="#E5E5E5"> the covers</font>

683
00:28:20,180 --> 00:28:26,190
<font color="#E5E5E5">so because I'm doing a</font><font color="#CCCCCC"> count start</font><font color="#E5E5E5"> from</font>

684
00:28:23,670 --> 00:28:28,410
<font color="#CCCCCC">github events</font><font color="#E5E5E5"> all that data is in 32</font>

685
00:28:26,190 --> 00:28:30,180
<font color="#CCCCCC">different tables and</font><font color="#E5E5E5"> now I've got to get</font>

686
00:28:28,410 --> 00:28:34,080
<font color="#E5E5E5">a count from events underscore one</font>

687
00:28:30,180 --> 00:28:37,020
events underscore<font color="#CCCCCC"> two three etc and we</font>

688
00:28:34,080 --> 00:28:39,120
can see<font color="#E5E5E5"> right here that we've got</font>

689
00:28:37,020 --> 00:28:40,110
different<font color="#E5E5E5"> executor under the covers this</font>

690
00:28:39,120 --> 00:28:41,939
<font color="#E5E5E5">could be able to take this and rewrite</font>

691
00:28:40,110 --> 00:28:44,550
<font color="#CCCCCC">it and say hey this is the</font><font color="#E5E5E5"> explain plan</font>

692
00:28:41,940 --> 00:28:45,960
one<font color="#E5E5E5"> of 32</font><font color="#CCCCCC"> and I'm actually executing 32</font>

693
00:28:44,550 --> 00:28:48,690
of<font color="#E5E5E5"> these different explains or these uh</font>

694
00:28:45,960 --> 00:28:50,490
these<font color="#E5E5E5"> queries pulling it together back</font>

695
00:28:48,690 --> 00:28:54,090
on the coordinator and giving you the

696
00:28:50,490 --> 00:28:55,860
value back so rewriting<font color="#CCCCCC"> the query in the</font>

697
00:28:54,090 --> 00:28:57,600
<font color="#E5E5E5">executor under the covers and then</font>

698
00:28:55,860 --> 00:28:59,760
distributing multiple lines getting<font color="#E5E5E5"> the</font>

699
00:28:57,600 --> 00:29:03,260
results back<font color="#E5E5E5"> and returning so you this</font>

700
00:28:59,760 --> 00:29:03,260
<font color="#E5E5E5">just looks like a standard sequel query</font>

701
00:29:04,040 --> 00:29:09,330
<font color="#CCCCCC">if you're routing to a single node we</font>

702
00:29:07,140 --> 00:29:10,620
don't want to hit all<font color="#E5E5E5"> 32 nodes right so</font>

703
00:29:09,330 --> 00:29:13,290
if you're<font color="#E5E5E5"> saying hey I just want the</font>

704
00:29:10,620 --> 00:29:15,659
events for<font color="#E5E5E5"> user ID - well</font><font color="#CCCCCC"> I know that</font>

705
00:29:13,290 --> 00:29:17,159
lives on shard<font color="#E5E5E5"> number</font><font color="#CCCCCC"> 13 I want to</font>

706
00:29:15,660 --> 00:29:20,100
rewrite<font color="#CCCCCC"> that query under the covers and</font>

707
00:29:17,160 --> 00:29:22,590
<font color="#CCCCCC">basically say</font><font color="#E5E5E5"> okay now send this from</font>

708
00:29:20,100 --> 00:29:26,610
you know<font color="#CCCCCC"> github events down</font><font color="#E5E5E5"> to github</font>

709
00:29:22,590 --> 00:29:28,620
events underscore<font color="#E5E5E5"> 13 just that one node</font>

710
00:29:26,610 --> 00:29:34,290
<font color="#CCCCCC">give the data</font><font color="#E5E5E5"> and bring it back</font><font color="#CCCCCC"> and not</font>

711
00:29:28,620 --> 00:29:35,520
wait for<font color="#E5E5E5"> everything else</font><font color="#CCCCCC"> and then I had</font>

712
00:29:34,290 --> 00:29:38,010
to put this in<font color="#E5E5E5"> here</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> this is like</font>

713
00:29:35,520 --> 00:29:40,500
<font color="#CCCCCC">the one graphic I have</font><font color="#E5E5E5"> or database</font>

714
00:29:38,010 --> 00:29:43,110
people<font color="#E5E5E5"> we don't do a</font><font color="#CCCCCC"> lot of UI but this</font>

715
00:29:40,500 --> 00:29:46,590
reminds<font color="#E5E5E5"> me of like</font><font color="#CCCCCC"> the windows 1995 disk</font>

716
00:29:43,110 --> 00:29:47,909
defrag<font color="#E5E5E5"> everyone remember that I I never</font>

717
00:29:46,590 --> 00:29:50,669
<font color="#CCCCCC">knew if it</font><font color="#E5E5E5"> was actually doing anything</font>

718
00:29:47,910 --> 00:29:53,430
but<font color="#E5E5E5"> I have always felt like it did</font><font color="#CCCCCC"> and</font>

719
00:29:50,670 --> 00:29:55,020
so for<font color="#E5E5E5"> us basically when you're</font>

720
00:29:53,430 --> 00:29:56,850
rebalancing shards we're gonna take and

721
00:29:55,020 --> 00:29:59,250
<font color="#E5E5E5">move these in an online</font><font color="#CCCCCC"> fashion so</font>

722
00:29:56,850 --> 00:30:00,419
you've got<font color="#E5E5E5"> 32 shards on one node</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> one</font>

723
00:29:59,250 --> 00:30:02,130
another if<font color="#E5E5E5"> you wanted to scale that to</font>

724
00:30:00,420 --> 00:30:08,160
<font color="#CCCCCC">four knows we're gonna take</font><font color="#E5E5E5"> 16 from one</font>

725
00:30:02,130 --> 00:30:09,030
move them<font color="#CCCCCC"> over</font><font color="#E5E5E5"> 16 from</font><font color="#CCCCCC"> the other alright</font>

726
00:30:08,160 --> 00:30:13,890
ftw

727
00:30:09,030 --> 00:30:15,660
so f dwz I put up<font color="#CCCCCC"> here is they are</font>

728
00:30:13,890 --> 00:30:17,690
extensions<font color="#E5E5E5"> where they're almost like</font>

729
00:30:15,660 --> 00:30:19,920
their own special class of extension

730
00:30:17,690 --> 00:30:22,740
<font color="#CCCCCC">they allow you to</font><font color="#E5E5E5"> connect from within</font>

731
00:30:19,920 --> 00:30:25,110
<font color="#E5E5E5">Postgres to another system</font><font color="#CCCCCC"> and query it</font>

732
00:30:22,740 --> 00:30:26,370
directly<font color="#CCCCCC"> so if you have a bunch</font><font color="#E5E5E5"> of</font>

733
00:30:25,110 --> 00:30:28,469
disparate data that you<font color="#E5E5E5"> want to pull in</font>

734
00:30:26,370 --> 00:30:32,850
for like ETL

735
00:30:28,470 --> 00:30:37,080
or one-off reporting<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> or a thing</font>

736
00:30:32,850 --> 00:30:38,459
<font color="#CCCCCC">they're really</font><font color="#E5E5E5"> really useful now</font><font color="#CCCCCC"> I say</font>

737
00:30:37,080 --> 00:30:40,949
they're like<font color="#E5E5E5"> their own class because</font>

738
00:30:38,460 --> 00:30:42,240
writing<font color="#CCCCCC"> for data wrappers is like</font>

739
00:30:40,950 --> 00:30:43,440
writing<font color="#E5E5E5"> an extension but a little bit</font>

740
00:30:42,240 --> 00:30:44,399
different as well you've got<font color="#E5E5E5"> certain</font>

741
00:30:43,440 --> 00:30:46,889
different things that you<font color="#E5E5E5"> can do with</font>

742
00:30:44,399 --> 00:30:48,959
<font color="#E5E5E5">them</font><font color="#CCCCCC"> and there's an</font><font color="#E5E5E5"> entire ecosystem and</font>

743
00:30:46,889 --> 00:30:49,889
collection of foreign data wrappers<font color="#CCCCCC"> so</font>

744
00:30:48,960 --> 00:30:52,950
while we've<font color="#CCCCCC"> got like a hundred</font>

745
00:30:49,889 --> 00:30:56,428
extensions or so we've also got<font color="#E5E5E5"> I would</font>

746
00:30:52,950 --> 00:30:58,320
<font color="#CCCCCC">estimate 30 40 50 for data wrappers I</font>

747
00:30:56,429 --> 00:31:03,539
could be<font color="#E5E5E5"> off on that number but it's</font>

748
00:30:58,320 --> 00:31:05,700
probably roughly<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that ballpark and</font>

749
00:31:03,539 --> 00:31:07,830
there are some<font color="#E5E5E5"> really crazy foreign data</font>

750
00:31:05,700 --> 00:31:10,440
wrappers as well<font color="#E5E5E5"> so like these are some</font>

751
00:31:07,830 --> 00:31:14,158
<font color="#CCCCCC">obvious ones</font><font color="#E5E5E5"> like Redis Mongo</font><font color="#CCCCCC"> C store</font>

752
00:31:10,440 --> 00:31:17,159
which is<font color="#CCCCCC"> a column restore there are ones</font>

753
00:31:14,159 --> 00:31:19,200
like<font color="#E5E5E5"> the dev null</font><font color="#CCCCCC"> foreign data wrapper</font>

754
00:31:17,159 --> 00:31:20,700
<font color="#CCCCCC">that just like lets you write data to</font>

755
00:31:19,200 --> 00:31:22,740
<font color="#CCCCCC">nowhere</font>

756
00:31:20,700 --> 00:31:24,960
there<font color="#E5E5E5"> is a Twitter for data wrapper so</font>

757
00:31:22,740 --> 00:31:28,649
you can query Twitter from directly

758
00:31:24,960 --> 00:31:29,970
<font color="#E5E5E5">within Postgres</font><font color="#CCCCCC"> there's an email one so</font>

759
00:31:28,649 --> 00:31:31,559
there's a lot<font color="#CCCCCC"> of foreign data wrappers</font>

760
00:31:29,970 --> 00:31:33,539
that<font color="#E5E5E5"> allow you to connect to</font><font color="#CCCCCC"> anything</font>

761
00:31:31,559 --> 00:31:35,010
including<font color="#E5E5E5"> like a CSV one so if you've</font>

762
00:31:33,539 --> 00:31:36,360
got<font color="#E5E5E5"> them</font><font color="#CCCCCC"> whether there's a CSV data you</font>

763
00:31:35,010 --> 00:31:41,700
want to parse that<font color="#E5E5E5"> you can do it</font>

764
00:31:36,360 --> 00:31:42,928
directly<font color="#CCCCCC"> within postgres so when you use</font>

765
00:31:41,700 --> 00:31:44,549
a foreign data wrapper you're going to

766
00:31:42,929 --> 00:31:46,350
install<font color="#CCCCCC"> it like</font><font color="#E5E5E5"> the extension first and</font>

767
00:31:44,549 --> 00:31:47,639
then you're<font color="#E5E5E5"> gonna create a foreign</font>

768
00:31:46,350 --> 00:31:50,510
server<font color="#E5E5E5"> and you're basically going to</font>

769
00:31:47,639 --> 00:31:52,799
give a connection to this other database

770
00:31:50,510 --> 00:31:54,330
<font color="#CCCCCC">Post Crescent self</font><font color="#E5E5E5"> already comes with a</font>

771
00:31:52,799 --> 00:31:56,370
<font color="#E5E5E5">Postgres foreign data wrapper which is</font>

772
00:31:54,330 --> 00:31:59,399
really useful<font color="#E5E5E5"> so you can query from one</font>

773
00:31:56,370 --> 00:32:02,428
Postgres database<font color="#E5E5E5"> into another</font><font color="#CCCCCC"> really</font>

774
00:31:59,399 --> 00:32:04,789
really<font color="#CCCCCC"> handy in a lot of situations here</font>

775
00:32:02,429 --> 00:32:08,279
we're gonna actually<font color="#E5E5E5"> connect to to Redis</font>

776
00:32:04,789 --> 00:32:10,049
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> gonna create my</font><font color="#CCCCCC"> foreign server</font><font color="#E5E5E5"> to</font>

777
00:32:08,279 --> 00:32:11,789
say hey it's over<font color="#E5E5E5"> here then I'm gonna</font>

778
00:32:10,049 --> 00:32:14,309
<font color="#E5E5E5">create my foreign table so for Redis</font>

779
00:32:11,789 --> 00:32:15,720
it's just key value so we're<font color="#E5E5E5"> not gonna</font>

780
00:32:14,309 --> 00:32:18,418
have<font color="#CCCCCC"> multiple tables but something like</font>

781
00:32:15,720 --> 00:32:20,039
<font color="#E5E5E5">a Postgres ftw</font><font color="#CCCCCC"> you may want</font><font color="#E5E5E5"> to map all</font>

782
00:32:18,419 --> 00:32:22,950
of<font color="#CCCCCC"> your</font><font color="#E5E5E5"> tables from some other database</font>

783
00:32:20,039 --> 00:32:24,629
directly<font color="#E5E5E5"> into your local one and then</font>

784
00:32:22,950 --> 00:32:29,250
you're gonna create a<font color="#E5E5E5"> mapping of hey who</font>

785
00:32:24,630 --> 00:32:31,620
can see this<font color="#E5E5E5"> how do</font><font color="#CCCCCC"> I connect to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> now</font>

786
00:32:29,250 --> 00:32:35,159
when I<font color="#CCCCCC"> describe</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> my database I can</font>

787
00:32:31,620 --> 00:32:37,439
<font color="#E5E5E5">see I've got products purchases users</font>

788
00:32:35,159 --> 00:32:39,650
and I've got this<font color="#E5E5E5"> Redis database and</font>

789
00:32:37,440 --> 00:32:42,890
this<font color="#E5E5E5"> Redis database in this case</font><font color="#CCCCCC"> is</font>

790
00:32:39,650 --> 00:32:45,679
a cache of<font color="#CCCCCC"> who's visited my site and how</font>

791
00:32:42,890 --> 00:32:47,299
many times<font color="#E5E5E5"> so I've got like hey this</font>

792
00:32:45,679 --> 00:32:51,380
user showed up five times<font color="#E5E5E5"> in the past</font>

793
00:32:47,299 --> 00:32:56,418
<font color="#CCCCCC">three days if I want to query something</font>

794
00:32:51,380 --> 00:32:58,580
like hey give me<font color="#CCCCCC"> a you know really basic</font>

795
00:32:56,419 --> 00:33:00,590
user<font color="#CCCCCC"> forty how many times have they</font><font color="#E5E5E5"> been</font>

796
00:32:58,580 --> 00:33:03,740
here<font color="#CCCCCC"> just show</font><font color="#E5E5E5"> me how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> times have I</font>

797
00:33:00,590 --> 00:33:05,510
seen<font color="#E5E5E5"> this user</font><font color="#CCCCCC"> great</font><font color="#E5E5E5"> but I can also</font><font color="#CCCCCC"> then</font>

798
00:33:03,740 --> 00:33:08,600
go<font color="#E5E5E5"> in and join this</font>

799
00:33:05,510 --> 00:33:11,379
so with Redis it's in a text value<font color="#E5E5E5"> so I</font>

800
00:33:08,600 --> 00:33:15,559
have to do some casting<font color="#E5E5E5"> but I can say</font>

801
00:33:11,380 --> 00:33:19,130
show me<font color="#E5E5E5"> my top</font><font color="#CCCCCC"> our users that</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font>

802
00:33:15,559 --> 00:33:20,658
here more than<font color="#E5E5E5"> 40 times and</font><font color="#CCCCCC"> now I can</font>

803
00:33:19,130 --> 00:33:22,309
maybe look at things like<font color="#E5E5E5"> okay who's</font>

804
00:33:20,659 --> 00:33:25,820
been here<font color="#E5E5E5"> more than 40 times but not</font>

805
00:33:22,309 --> 00:33:27,710
bought<font color="#E5E5E5"> something or who had something in</font>

806
00:33:25,820 --> 00:33:31,010
<font color="#CCCCCC">their checkout and he was here</font><font color="#E5E5E5"> yesterday</font>

807
00:33:27,710 --> 00:33:32,649
<font color="#E5E5E5">but I haven't seen since so I can do</font>

808
00:33:31,010 --> 00:33:35,270
some<font color="#E5E5E5"> really</font><font color="#CCCCCC"> interesting things</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> I</font>

809
00:33:32,649 --> 00:33:36,379
would say<font color="#CCCCCC"> use caution when putting some</font>

810
00:33:35,270 --> 00:33:37,908
<font color="#CCCCCC">of the foreign data wrappers into</font>

811
00:33:36,380 --> 00:33:39,740
production

812
00:33:37,909 --> 00:33:41,149
they don't always<font color="#E5E5E5"> push down things well</font>

813
00:33:39,740 --> 00:33:44,059
so<font color="#CCCCCC"> you may bring back</font><font color="#E5E5E5"> your entire</font>

814
00:33:41,149 --> 00:33:46,760
<font color="#CCCCCC">rightist database as you're querying</font>

815
00:33:44,059 --> 00:33:49,190
this which may be fast<font color="#E5E5E5"> but</font><font color="#CCCCCC"> if you have a</font>

816
00:33:46,760 --> 00:33:50,779
10 gig Postgres database<font color="#E5E5E5"> you probably</font>

817
00:33:49,190 --> 00:33:52,490
want to pull back<font color="#CCCCCC"> that full table now</font>

818
00:33:50,779 --> 00:33:54,010
fortunately<font color="#E5E5E5"> the post-crisis FTW is</font>

819
00:33:52,490 --> 00:33:56,240
getting better<font color="#E5E5E5"> at pushing down</font>

820
00:33:54,010 --> 00:33:59,510
<font color="#CCCCCC">predicates switch is really exciting</font><font color="#E5E5E5"> and</font>

821
00:33:56,240 --> 00:34:01,610
I<font color="#CCCCCC"> think more and</font><font color="#E5E5E5"> more and more in a user</font>

822
00:33:59,510 --> 00:34:03,710
facing production<font color="#E5E5E5"> website will be able</font>

823
00:34:01,610 --> 00:34:09,560
to use<font color="#CCCCCC"> the Postgres</font><font color="#E5E5E5"> one we'll see in</font>

824
00:34:03,710 --> 00:34:14,179
times with others<font color="#E5E5E5"> all right so a bit of</font>

825
00:34:09,560 --> 00:34:17,119
a<font color="#CCCCCC"> wrap-up Postgres is definitely more</font>

826
00:34:14,179 --> 00:34:18,710
<font color="#E5E5E5">than just Postgres</font><font color="#CCCCCC"> i should have</font><font color="#E5E5E5"> asked</font>

827
00:34:17,119 --> 00:34:21,490
you<font color="#CCCCCC"> to start how many people here are</font>

828
00:34:18,710 --> 00:34:24,710
using any of these extensions<font color="#E5E5E5"> already</font>

829
00:34:21,489 --> 00:34:29,060
awesome<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> hands</font><font color="#CCCCCC"> how many</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> have</font>

830
00:34:24,710 --> 00:34:33,949
used all<font color="#E5E5E5"> of these extensions someone's</font>

831
00:34:29,060 --> 00:34:35,750
kind of cheating back there<font color="#CCCCCC"> so there's a</font>

832
00:34:33,949 --> 00:34:39,408
whole other<font color="#E5E5E5"> world of extensions out</font>

833
00:34:35,750 --> 00:34:41,750
there beyond just these five six<font color="#CCCCCC"> there</font>

834
00:34:39,409 --> 00:34:42,919
are new ones created every week and I

835
00:34:41,750 --> 00:34:44,389
<font color="#E5E5E5">think they're really pushing the battery</font>

836
00:34:42,918 --> 00:34:46,368
<font color="#CCCCCC">out of what you can do with</font><font color="#E5E5E5"> Postgres and</font>

837
00:34:44,389 --> 00:34:48,349
now we don't have<font color="#CCCCCC"> to wait on you know</font>

838
00:34:46,369 --> 00:34:49,880
the core community which has a higher

839
00:34:48,349 --> 00:34:52,520
barrier to what gets

840
00:34:49,880 --> 00:34:54,560
right<font color="#CCCCCC"> it has to be well-maintained for</font>

841
00:34:52,520 --> 00:34:56,420
an X<font color="#CCCCCC"> number of period of years here we</font>

842
00:34:54,560 --> 00:34:57,980
can go<font color="#E5E5E5"> an experiment and have fun and</font>

843
00:34:56,420 --> 00:35:00,320
create<font color="#E5E5E5"> a lot of new things</font><font color="#CCCCCC"> would also</font>

844
00:34:57,980 --> 00:35:02,300
add a lot of value<font color="#E5E5E5"> without having to</font>

845
00:35:00,320 --> 00:35:06,140
wait you<font color="#E5E5E5"> know a year year</font><font color="#CCCCCC"> and have to</font>

846
00:35:02,300 --> 00:35:09,920
<font color="#E5E5E5">see something</font><font color="#CCCCCC"> directly in court a few</font>

847
00:35:06,140 --> 00:35:11,600
<font color="#E5E5E5">honorable mentions</font><font color="#CCCCCC"> Madlib is a really</font>

848
00:35:09,920 --> 00:35:13,910
<font color="#CCCCCC">awesome one I don't know how well</font><font color="#E5E5E5"> it's</font>

849
00:35:11,600 --> 00:35:15,440
maintained these<font color="#E5E5E5"> days it was originally</font>

850
00:35:13,910 --> 00:35:18,080
<font color="#CCCCCC">a bleed-out of UC berkeley</font><font color="#E5E5E5"> but it's like</font>

851
00:35:15,440 --> 00:35:21,160
machine learning<font color="#CCCCCC"> data science</font><font color="#E5E5E5"> directly</font>

852
00:35:18,080 --> 00:35:23,779
in Postgres<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> pretty exciting one</font>

853
00:35:21,160 --> 00:35:25,759
<font color="#CCCCCC">Zombo is interesting you can connect</font>

854
00:35:23,780 --> 00:35:28,010
<font color="#E5E5E5">directly from within Postgres and to</font>

855
00:35:25,760 --> 00:35:30,560
elasticsearch automatically send<font color="#E5E5E5"> your</font>

856
00:35:28,010 --> 00:35:33,560
data there and then when you query<font color="#CCCCCC"> it</font>

857
00:35:30,560 --> 00:35:35,000
it'll use<font color="#CCCCCC"> elastic search indexes so you</font>

858
00:35:33,560 --> 00:35:39,590
can have elastic search indexes

859
00:35:35,000 --> 00:35:41,060
basically backing your<font color="#E5E5E5"> Postgres data</font><font color="#CCCCCC"> c</font>

860
00:35:39,590 --> 00:35:45,140
store<font color="#CCCCCC"> I mentioned briefly earlier that's</font>

861
00:35:41,060 --> 00:35:47,990
a columnar store directly in Postgres<font color="#CCCCCC"> PG</font>

862
00:35:45,140 --> 00:35:49,430
<font color="#CCCCCC">con is actually really really</font><font color="#E5E5E5"> handy if</font>

863
00:35:47,990 --> 00:35:53,270
you<font color="#CCCCCC"> ever need to go and like delete</font>

864
00:35:49,430 --> 00:35:55,040
things<font color="#E5E5E5"> on a regular basis</font><font color="#CCCCCC"> why set up a</font>

865
00:35:53,270 --> 00:35:56,810
cron job<font color="#E5E5E5"> on a server somewhere else or</font>

866
00:35:55,040 --> 00:35:57,860
on your<font color="#E5E5E5"> database that</font><font color="#CCCCCC"> could fail</font><font color="#E5E5E5"> when</font>

867
00:35:56,810 --> 00:35:59,870
you<font color="#E5E5E5"> can run it directly within your</font>

868
00:35:57,860 --> 00:36:02,450
<font color="#E5E5E5">database so</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> Postgres is up your cron</font>

869
00:35:59,870 --> 00:36:05,180
job is up and<font color="#E5E5E5"> running</font>

870
00:36:02,450 --> 00:36:06,529
PG<font color="#E5E5E5"> cron also really</font><font color="#CCCCCC"> useful for roll ups</font>

871
00:36:05,180 --> 00:36:09,020
so if you have a bunch of raw<font color="#E5E5E5"> data you</font>

872
00:36:06,530 --> 00:36:11,240
ingest you want to do<font color="#CCCCCC"> roll-ups every</font><font color="#E5E5E5"> 5</font>

873
00:36:09,020 --> 00:36:13,810
minutes<font color="#CCCCCC"> every day</font><font color="#E5E5E5"> really really</font><font color="#CCCCCC"> useful</font>

874
00:36:11,240 --> 00:36:17,620
to run<font color="#E5E5E5"> all that directly in the database</font>

875
00:36:13,810 --> 00:36:19,910
<font color="#CCCCCC">so a little</font><font color="#E5E5E5"> bit of further reading</font>

876
00:36:17,620 --> 00:36:22,640
<font color="#E5E5E5">here's a blog post rewrote on kind of</font>

877
00:36:19,910 --> 00:36:25,730
what it means<font color="#E5E5E5"> to be an extension PG</font><font color="#CCCCCC"> xn</font>

878
00:36:22,640 --> 00:36:28,279
org is kind of the the current post

879
00:36:25,730 --> 00:36:30,370
<font color="#E5E5E5">crest extension community so new</font>

880
00:36:28,280 --> 00:36:32,780
versions of extensions are posted<font color="#CCCCCC"> there</font>

881
00:36:30,370 --> 00:36:33,950
<font color="#CCCCCC">new extensions are</font><font color="#E5E5E5"> there you</font><font color="#CCCCCC"> can do the</font>

882
00:36:32,780 --> 00:36:35,420
description of whether they<font color="#E5E5E5"> are</font><font color="#CCCCCC"> there</font>

883
00:36:33,950 --> 00:36:37,160
tags in some way so you can kind of

884
00:36:35,420 --> 00:36:38,750
easily browse them if you're looking<font color="#E5E5E5"> for</font>

885
00:36:37,160 --> 00:36:40,339
data<font color="#E5E5E5"> types or for data wrappers that</font>

886
00:36:38,750 --> 00:36:42,220
<font color="#E5E5E5">sort of thing</font>

887
00:36:40,340 --> 00:36:44,000
and then if you're<font color="#E5E5E5"> feeling adventurous</font>

888
00:36:42,220 --> 00:36:46,850
<font color="#CCCCCC">take a shot at writing your own</font>

889
00:36:44,000 --> 00:36:48,770
extension<font color="#E5E5E5"> you could do a lot of fun</font>

890
00:36:46,850 --> 00:36:51,110
things<font color="#E5E5E5"> like if there's an extension that</font>

891
00:36:48,770 --> 00:36:52,550
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> not there give it a shot</font>

892
00:36:51,110 --> 00:36:54,950
<font color="#CCCCCC">there's a few I'd love to see like an</font>

893
00:36:52,550 --> 00:36:56,480
email data type directly<font color="#E5E5E5"> in Postgres</font><font color="#CCCCCC"> I</font>

894
00:36:54,950 --> 00:36:58,759
don't think it's going<font color="#CCCCCC"> to land directly</font>

895
00:36:56,480 --> 00:36:59,990
in<font color="#CCCCCC"> Cori super soon but</font><font color="#E5E5E5"> maybe if we</font>

896
00:36:58,760 --> 00:37:02,570
started as an extension we can put a

897
00:36:59,990 --> 00:37:04,700
little<font color="#E5E5E5"> pressure and see if it gets there</font>

898
00:37:02,570 --> 00:37:11,590
and that's it and<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> got a few</font>

899
00:37:04,700 --> 00:37:11,589
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> a chance anyone</font>

900
00:37:16,630 --> 00:37:21,470
have a<font color="#E5E5E5"> question regarding</font><font color="#CCCCCC"> the situs</font>

901
00:37:18,860 --> 00:37:23,720
extension in which way are you<font color="#E5E5E5"> handling</font>

902
00:37:21,470 --> 00:37:25,609
<font color="#CCCCCC">backups you have many small backups for</font>

903
00:37:23,720 --> 00:37:29,060
each<font color="#E5E5E5"> node or somehow</font><font color="#CCCCCC"> which way are we</font>

904
00:37:25,610 --> 00:37:31,880
handling what<font color="#CCCCCC"> becomes backups yeah so it</font>

905
00:37:29,060 --> 00:37:33,770
<font color="#E5E5E5">really kind of depends what we generally</font>

906
00:37:31,880 --> 00:37:36,230
do is<font color="#E5E5E5"> use just</font><font color="#CCCCCC"> the standard</font><font color="#E5E5E5"> Postgres</font>

907
00:37:33,770 --> 00:37:38,840
tools<font color="#E5E5E5"> so every node</font><font color="#CCCCCC"> within situs is</font><font color="#E5E5E5"> just</font>

908
00:37:36,230 --> 00:37:41,630
a Postgres database<font color="#E5E5E5"> so if you have like</font>

909
00:37:38,840 --> 00:37:43,010
a coordinator<font color="#E5E5E5"> in like two data nodes you</font>

910
00:37:41,630 --> 00:37:45,680
<font color="#E5E5E5">would just have three backup processes</font>

911
00:37:43,010 --> 00:37:47,510
running so we have customers that<font color="#E5E5E5"> like</font>

912
00:37:45,680 --> 00:37:49,399
ourselves we use<font color="#CCCCCC"> Wally</font>

913
00:37:47,510 --> 00:37:51,710
we have customers that<font color="#E5E5E5"> use parm and</font>

914
00:37:49,400 --> 00:37:52,820
backrest<font color="#CCCCCC"> a mix of things but it's kind</font>

915
00:37:51,710 --> 00:37:54,470
of<font color="#CCCCCC"> whatever you would</font><font color="#E5E5E5"> normally</font><font color="#CCCCCC"> do for</font>

916
00:37:52,820 --> 00:37:56,360
<font color="#E5E5E5">Postgres because it is just Postgres</font>

917
00:37:54,470 --> 00:37:59,109
follow that process<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just get to do</font>

918
00:37:56,360 --> 00:38:04,490
more of it<font color="#CCCCCC"> because you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> more notes</font>

919
00:37:59,110 --> 00:38:08,350
other than contributes so<font color="#CCCCCC"> PGX Ann is a</font>

920
00:38:04,490 --> 00:38:13,279
great place<font color="#CCCCCC"> I would also say github and</font>

921
00:38:08,350 --> 00:38:14,509
then<font color="#E5E5E5"> post crest weekly</font><font color="#CCCCCC"> so some obscure</font>

922
00:38:13,280 --> 00:38:18,020
ones will show up on<font color="#E5E5E5"> github and never</font>

923
00:38:14,510 --> 00:38:19,970
hit PGX in Postgres weekly try to

924
00:38:18,020 --> 00:38:22,160
highlight most ones that come up that

925
00:38:19,970 --> 00:38:24,830
<font color="#E5E5E5">are of a certain quality not every</font>

926
00:38:22,160 --> 00:38:26,569
extension<font color="#E5E5E5"> that exists within</font><font color="#CCCCCC"> PG Xen I</font>

927
00:38:24,830 --> 00:38:35,080
would say is<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of the de facto</font>

928
00:38:26,570 --> 00:38:35,080
directory PGX an org<font color="#E5E5E5"> oh yes</font>

929
00:38:42,990 --> 00:38:48,598
what's your favorite extension you

930
00:38:46,920 --> 00:38:53,190
<font color="#E5E5E5">weren't here oh sorry this is this shows</font>

931
00:38:48,599 --> 00:38:56,339
where<font color="#E5E5E5"> you were late</font><font color="#CCCCCC"> so yeah so I think</font>

932
00:38:53,190 --> 00:38:58,440
in order<font color="#E5E5E5"> I would rank my my top three PG</font>

933
00:38:56,339 --> 00:39:00,180
stat statements it is<font color="#E5E5E5"> the most useful</font>

934
00:38:58,440 --> 00:39:03,780
<font color="#E5E5E5">extension for application developers</font>

935
00:39:00,180 --> 00:39:05,669
<font color="#E5E5E5">hands down I'm biased but situs is a</font>

936
00:39:03,780 --> 00:39:07,680
pretty<font color="#E5E5E5"> cool one</font><font color="#CCCCCC"> that turns</font><font color="#E5E5E5"> Postgres into</font>

937
00:39:05,670 --> 00:39:10,410
a shorted database<font color="#E5E5E5"> without</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to</font>

938
00:39:07,680 --> 00:39:12,118
worry about<font color="#E5E5E5"> all</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then I really</font>

939
00:39:10,410 --> 00:39:13,859
do<font color="#CCCCCC"> just love</font><font color="#E5E5E5"> saying hyper log log and</font>

940
00:39:12,119 --> 00:39:15,240
sound I think<font color="#E5E5E5"> way more intelligent</font><font color="#CCCCCC"> when</font>

941
00:39:13,859 --> 00:39:16,680
I talk about all the things<font color="#CCCCCC"> it does so</font>

942
00:39:15,240 --> 00:39:22,970
it probably pulls out that number<font color="#E5E5E5"> three</font>

943
00:39:16,680 --> 00:39:22,970
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> thank you</font>

944
00:39:23,080 --> 00:39:28,989
[Applause]

