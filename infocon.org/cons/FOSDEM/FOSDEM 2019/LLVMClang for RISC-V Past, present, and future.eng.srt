1
00:00:05,100 --> 00:00:15,330
so when Heidi won<font color="#CCCCCC"> som man my</font><font color="#E5E5E5"> cranberry I</font>

2
00:00:10,709 --> 00:00:17,550
work at<font color="#CCCCCC"> lower SC I see</font><font color="#E5E5E5"> we work on open</font>

3
00:00:15,330 --> 00:00:20,820
source hardware<font color="#CCCCCC"> with</font><font color="#E5E5E5"> five designs and</font>

4
00:00:17,550 --> 00:00:24,090
we've been driving<font color="#E5E5E5"> the effort</font><font color="#CCCCCC"> to support</font>

5
00:00:20,820 --> 00:00:26,730
<font color="#CCCCCC">ris v in upstream LVM so today's talk</font>

6
00:00:24,090 --> 00:00:27,930
I'm going<font color="#E5E5E5"> to give a sort of split it</font>

7
00:00:26,730 --> 00:00:29,400
into a few sections<font color="#E5E5E5"> so I'm going to</font>

8
00:00:27,930 --> 00:00:31,289
start<font color="#E5E5E5"> by giving a little bit of</font>

9
00:00:29,400 --> 00:00:33,239
background<font color="#E5E5E5"> of some preliminaries</font><font color="#CCCCCC"> a</font>

10
00:00:31,289 --> 00:00:34,710
little bit of insight<font color="#CCCCCC"> into what it</font>

11
00:00:33,239 --> 00:00:38,218
actually means<font color="#E5E5E5"> to port</font><font color="#CCCCCC"> a compiler like</font>

12
00:00:34,710 --> 00:00:41,489
<font color="#CCCCCC">lbm to risk five Ben I'll talk a</font><font color="#E5E5E5"> bit</font>

13
00:00:38,219 --> 00:00:43,890
about<font color="#E5E5E5"> how I've</font><font color="#CCCCCC"> gone about</font><font color="#E5E5E5"> the task some</font>

14
00:00:41,489 --> 00:00:45,149
design decisions<font color="#CCCCCC"> and then pick off a</font><font color="#E5E5E5"> few</font>

15
00:00:43,890 --> 00:00:47,909
topics which I felt<font color="#E5E5E5"> were maybe</font>

16
00:00:45,149 --> 00:00:50,399
representative<font color="#CCCCCC"> of the sort of the sort</font>

17
00:00:47,909 --> 00:00:52,559
<font color="#E5E5E5">of design decisions</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> tasks</font><font color="#CCCCCC"> that we've</font>

18
00:00:50,399 --> 00:00:54,089
<font color="#E5E5E5">been taking on in this effort I'll of</font>

19
00:00:52,559 --> 00:00:57,479
<font color="#CCCCCC">course give a bit of a</font><font color="#E5E5E5"> summary of</font>

20
00:00:54,089 --> 00:01:01,350
current status and then a idea of<font color="#E5E5E5"> where</font>

21
00:00:57,479 --> 00:01:07,229
we're heading in the<font color="#E5E5E5"> future yeah I can</font>

22
00:01:01,350 --> 00:01:11,460
drive so first of all what<font color="#CCCCCC"> is LVM LVM is</font>

23
00:01:07,229 --> 00:01:14,880
a popular compiler infrastructure it has

24
00:01:11,460 --> 00:01:16,710
a permissive license<font color="#CCCCCC"> just in the</font><font color="#E5E5E5"> last</font>

25
00:01:14,880 --> 00:01:20,490
<font color="#E5E5E5">couple of weeks changed to Apache from a</font>

26
00:01:16,710 --> 00:01:24,630
bsd-style license it has a<font color="#E5E5E5"> library based</font>

27
00:01:20,490 --> 00:01:26,250
design which many<font color="#CCCCCC"> people find useful</font>

28
00:01:24,630 --> 00:01:31,020
<font color="#CCCCCC">we've may integrate it into</font><font color="#E5E5E5"> our projects</font>

29
00:01:26,250 --> 00:01:33,899
and it's often<font color="#CCCCCC"> used paired</font><font color="#E5E5E5"> with the</font>

30
00:01:31,020 --> 00:01:36,479
<font color="#E5E5E5">clang language</font><font color="#CCCCCC"> front-end which is the</font>

31
00:01:33,899 --> 00:01:39,390
equivalent<font color="#CCCCCC"> of</font><font color="#E5E5E5"> GCC in terms of giving C</font>

32
00:01:36,479 --> 00:01:42,210
and C++ support and as we'll touch on

33
00:01:39,390 --> 00:01:44,039
later<font color="#E5E5E5"> and very</font><font color="#CCCCCC"> clip there's a number</font><font color="#E5E5E5"> of</font>

34
00:01:42,210 --> 00:01:47,130
other language languages which<font color="#CCCCCC"> have used</font>

35
00:01:44,039 --> 00:01:49,950
it as their back-end<font color="#CCCCCC"> most notably rust</font>

36
00:01:47,130 --> 00:01:51,359
<font color="#E5E5E5">which I know is one reason why a lot</font><font color="#CCCCCC"> of</font>

37
00:01:49,950 --> 00:01:54,420
the distro people are particularly

38
00:01:51,359 --> 00:01:57,479
interested<font color="#E5E5E5"> in the status</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> LOV Emrys</font><font color="#CCCCCC"> v</font>

39
00:01:54,420 --> 00:02:03,119
<font color="#CCCCCC">cogeneration</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> swift julia</font><font color="#E5E5E5"> and other</font>

40
00:01:57,479 --> 00:02:05,310
such languages and so<font color="#CCCCCC"> LVM provides a</font>

41
00:02:03,119 --> 00:02:08,008
sort of common infrastructure<font color="#E5E5E5"> a common</font>

42
00:02:05,310 --> 00:02:10,800
set of passes analyses optimizations

43
00:02:08,008 --> 00:02:12,920
transformations in order to provide to

44
00:02:10,800 --> 00:02:14,960
implement

45
00:02:12,920 --> 00:02:18,350
<font color="#CCCCCC">basicly a whole suite of compilation</font>

46
00:02:14,960 --> 00:02:20,450
related tasks so there's the<font color="#CCCCCC"> LVM and</font>

47
00:02:18,350 --> 00:02:22,489
<font color="#CCCCCC">it's code generator</font><font color="#E5E5E5"> but it's also a</font>

48
00:02:20,450 --> 00:02:26,630
<font color="#E5E5E5">family of projects</font><font color="#CCCCCC"> including linker</font>

49
00:02:22,490 --> 00:02:28,400
debugger<font color="#CCCCCC"> C++ runtime as a compiler</font><font color="#E5E5E5"> RT</font>

50
00:02:26,630 --> 00:02:32,660
the equivalent of<font color="#E5E5E5"> the low level</font><font color="#CCCCCC"> of the</font>

51
00:02:28,400 --> 00:02:34,490
<font color="#E5E5E5">Lib GCC library</font><font color="#CCCCCC"> and a growing suite of</font>

52
00:02:32,660 --> 00:02:35,900
projects as people obviously<font color="#E5E5E5"> and</font>

53
00:02:34,490 --> 00:02:38,330
contribute new things<font color="#CCCCCC"> OpenMP</font>

54
00:02:35,900 --> 00:02:44,600
implementations<font color="#CCCCCC"> SiC all coming from</font>

55
00:02:38,330 --> 00:02:47,720
Intel soon and so why people interested

56
00:02:44,600 --> 00:02:50,060
in<font color="#E5E5E5"> LVM and why interested in</font><font color="#CCCCCC"> LVM four is</font>

57
00:02:47,720 --> 00:02:51,769
<font color="#CCCCCC">five for a number of reasons</font><font color="#E5E5E5"> I think</font>

58
00:02:50,060 --> 00:02:54,470
<font color="#E5E5E5">first of all we should make completely</font>

59
00:02:51,769 --> 00:02:57,230
clear<font color="#CCCCCC"> that</font><font color="#E5E5E5"> GCC for</font><font color="#CCCCCC"> RIS five is in</font>

60
00:02:54,470 --> 00:02:59,060
<font color="#E5E5E5">fantastic shape people have been using</font>

61
00:02:57,230 --> 00:03:01,220
it to<font color="#E5E5E5"> compile a whole bunch of things so</font>

62
00:02:59,060 --> 00:03:04,010
<font color="#E5E5E5">if there's if you just want a working</font>

63
00:03:01,220 --> 00:03:04,550
compiler GCC is fair<font color="#E5E5E5"> it's ready to go</font>

64
00:03:04,010 --> 00:03:08,179
<font color="#E5E5E5">right</font><font color="#CCCCCC"> now</font>

65
00:03:04,550 --> 00:03:10,459
well<font color="#E5E5E5"> supported for a range of pre</font>

66
00:03:08,180 --> 00:03:13,610
compiled versions available people<font color="#E5E5E5"> of</font>

67
00:03:10,459 --> 00:03:15,560
<font color="#E5E5E5">streaming and increasingly</font><font color="#CCCCCC"> cross-compile</font>

68
00:03:13,610 --> 00:03:19,280
tool chains up streamed<font color="#CCCCCC"> into</font><font color="#E5E5E5"> destroy</font>

69
00:03:15,560 --> 00:03:22,239
repositories but<font color="#CCCCCC"> there are a number of</font>

70
00:03:19,280 --> 00:03:24,890
<font color="#E5E5E5">people who prefer</font><font color="#CCCCCC"> LVM either for</font>

71
00:03:22,239 --> 00:03:26,959
licensing reasons or<font color="#CCCCCC"> because</font><font color="#E5E5E5"> that they</font>

72
00:03:24,890 --> 00:03:30,350
rely on it<font color="#E5E5E5"> as the backend for program</font>

73
00:03:26,959 --> 00:03:33,260
language so rust is perhaps the<font color="#CCCCCC"> most</font>

74
00:03:30,350 --> 00:03:36,049
notable example and I'm sure we'll be

75
00:03:33,260 --> 00:03:38,840
hearing later<font color="#E5E5E5"> it's becoming a dependency</font>

76
00:03:36,049 --> 00:03:40,970
for any modern distro right now with<font color="#E5E5E5"> Lib</font>

77
00:03:38,840 --> 00:03:47,510
our SVG<font color="#E5E5E5"> and other and other libraries</font>

78
00:03:40,970 --> 00:03:50,329
being ported<font color="#CCCCCC"> I think another LLVM</font><font color="#E5E5E5"> s also</font>

79
00:03:47,510 --> 00:03:53,000
have very good uptake<font color="#E5E5E5"> in academia</font>

80
00:03:50,329 --> 00:03:55,370
research<font color="#E5E5E5"> and</font><font color="#CCCCCC"> our D one of the reasons</font>

81
00:03:53,000 --> 00:03:56,980
<font color="#E5E5E5">it's actually very</font><font color="#CCCCCC"> easy to modify</font><font color="#E5E5E5"> and</font>

82
00:03:55,370 --> 00:03:59,390
<font color="#CCCCCC">add support for custom extensions</font>

83
00:03:56,980 --> 00:04:01,670
<font color="#E5E5E5">there's a very active</font><font color="#CCCCCC"> develop community</font>

84
00:03:59,390 --> 00:04:04,518
and we could argue back and<font color="#E5E5E5"> forth</font><font color="#CCCCCC"> about</font>

85
00:04:01,670 --> 00:04:08,298
<font color="#CCCCCC">GTC of SLBM but certainly there's a sign</font>

86
00:04:04,519 --> 00:04:10,549
of a locus of interest<font color="#CCCCCC"> around it for new</font>

87
00:04:08,299 --> 00:04:14,600
and interesting<font color="#E5E5E5"> compiler analyses and</font>

88
00:04:10,549 --> 00:04:16,970
transformations so I'm just<font color="#E5E5E5"> going to</font>

89
00:04:14,600 --> 00:04:21,798
give a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of a brief</font><font color="#CCCCCC"> overview of</font>

90
00:04:16,970 --> 00:04:24,979
what a crank<font color="#CCCCCC"> LVM compilation flow looks</font>

91
00:04:21,798 --> 00:04:26,099
like which will sort<font color="#CCCCCC"> of use to talk</font>

92
00:04:24,979 --> 00:04:28,260
about the

93
00:04:26,100 --> 00:04:30,630
the tacit take on when porting something

94
00:04:28,260 --> 00:04:33,480
like<font color="#CCCCCC"> LVM to a</font><font color="#E5E5E5"> New</font><font color="#CCCCCC"> York</font><font color="#E5E5E5"> tech to support a</font>

95
00:04:30,630 --> 00:04:38,010
new architecture so your course has your

96
00:04:33,480 --> 00:04:39,840
<font color="#E5E5E5">C input so in the case of</font><font color="#CCCCCC"> LVM clang</font><font color="#E5E5E5"> this</font>

97
00:04:38,010 --> 00:04:42,390
you put this through your<font color="#CCCCCC"> c front end</font>

98
00:04:39,840 --> 00:04:44,130
and when porting it<font color="#CCCCCC"> to an architecture</font>

99
00:04:42,390 --> 00:04:46,560
to<font color="#E5E5E5"> be honest there's basically there's</font>

100
00:04:44,130 --> 00:04:48,000
very little we need to do to the to the

101
00:04:46,560 --> 00:04:51,120
clang<font color="#E5E5E5"> front end and we need to add</font>

102
00:04:48,000 --> 00:04:52,590
<font color="#CCCCCC">support for the set of</font><font color="#E5E5E5"> command-line</font>

103
00:04:51,120 --> 00:04:53,130
options which get passed through<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

104
00:04:52,590 --> 00:04:56,580
back end

105
00:04:53,130 --> 00:04:57,990
a few teach it a<font color="#E5E5E5"> little bit about the</font>

106
00:04:56,580 --> 00:05:00,000
target<font color="#CCCCCC"> architecture so</font><font color="#E5E5E5"> it can prove it</font>

107
00:04:57,990 --> 00:05:02,730
so it can<font color="#E5E5E5"> provide appropriate</font>

108
00:05:00,000 --> 00:05:06,600
<font color="#CCCCCC">Diagnostics but beyond that it's you</font>

109
00:05:02,730 --> 00:05:10,320
<font color="#E5E5E5">know order of a few</font><font color="#CCCCCC"> hundred lines so we</font>

110
00:05:06,600 --> 00:05:12,690
have<font color="#CCCCCC"> our C</font><font color="#E5E5E5"> input this gets eventually we</font>

111
00:05:10,320 --> 00:05:14,760
<font color="#E5E5E5">get we get through to</font><font color="#CCCCCC"> miss gets</font><font color="#E5E5E5"> passed</font>

112
00:05:12,690 --> 00:05:16,530
we<font color="#E5E5E5"> get the clang ast and that will</font>

113
00:05:14,760 --> 00:05:18,270
eventually<font color="#E5E5E5"> spit out LV Mir which</font>

114
00:05:16,530 --> 00:05:22,109
probably<font color="#E5E5E5"> most of you have</font><font color="#CCCCCC"> seen in some</font>

115
00:05:18,270 --> 00:05:27,299
form at<font color="#CCCCCC"> least at least</font><font color="#E5E5E5"> once so this is a</font>

116
00:05:22,110 --> 00:05:28,980
so unlike GCC<font color="#CCCCCC"> this is exposed to</font><font color="#E5E5E5"> the</font>

117
00:05:27,300 --> 00:05:33,090
<font color="#CCCCCC">end-user or people who</font><font color="#E5E5E5"> want to feed it</font>

118
00:05:28,980 --> 00:05:36,870
<font color="#CCCCCC">in to feed it in as input to LVM</font><font color="#E5E5E5"> so</font>

119
00:05:33,090 --> 00:05:38,460
<font color="#E5E5E5">people can actually pass that using</font>

120
00:05:36,870 --> 00:05:41,070
<font color="#CCCCCC">other tools if you</font><font color="#E5E5E5"> wanted to do your own</font>

121
00:05:38,460 --> 00:05:44,250
<font color="#CCCCCC">un software but in</font><font color="#E5E5E5"> practice most people</font>

122
00:05:41,070 --> 00:05:46,500
implement<font color="#E5E5E5"> their own extensions to our VM</font>

123
00:05:44,250 --> 00:05:51,180
using the library based extension

124
00:05:46,500 --> 00:05:53,400
mechanism so as you see we've we've sort

125
00:05:51,180 --> 00:05:57,390
of lowered VC types in a<font color="#CCCCCC"> fairly trivial</font>

126
00:05:53,400 --> 00:06:01,859
way you know into<font color="#E5E5E5"> 32 T becomes L VMs</font><font color="#CCCCCC"> IR</font>

127
00:05:57,390 --> 00:06:04,680
type<font color="#E5E5E5"> I 32 and it L the</font><font color="#CCCCCC"> Mir has its own</font>

128
00:06:01,860 --> 00:06:08,360
set of instructions<font color="#E5E5E5"> and semantics and</font>

129
00:06:04,680 --> 00:06:12,450
<font color="#E5E5E5">one common misconception</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> it's a</font>

130
00:06:08,360 --> 00:06:14,730
that it's some<font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> universal</font><font color="#CCCCCC"> IR in</font>

131
00:06:12,450 --> 00:06:16,950
the sense that<font color="#E5E5E5"> well assembly or other</font>

132
00:06:14,730 --> 00:06:18,180
projects are trying to be so once you've

133
00:06:16,950 --> 00:06:20,810
got<font color="#CCCCCC"> two well of EMR you've actually</font>

134
00:06:18,180 --> 00:06:23,130
<font color="#CCCCCC">already made a number</font><font color="#E5E5E5"> of target specific</font>

135
00:06:20,810 --> 00:06:24,900
<font color="#E5E5E5">assumptions which you need to do in</font>

136
00:06:23,130 --> 00:06:28,400
<font color="#CCCCCC">order to</font><font color="#E5E5E5"> sort of meet the C</font><font color="#CCCCCC"> ABI and</font>

137
00:06:24,900 --> 00:06:31,260
<font color="#E5E5E5">maintain the semantics for your input</font><font color="#CCCCCC"> so</font>

138
00:06:28,400 --> 00:06:33,479
<font color="#CCCCCC">once we have the LVM i the</font><font color="#E5E5E5"> next step</font>

139
00:06:31,260 --> 00:06:35,370
from<font color="#CCCCCC"> that is then putting that through</font>

140
00:06:33,480 --> 00:06:38,370
the compiler<font color="#CCCCCC"> middle end and eventually</font>

141
00:06:35,370 --> 00:06:39,750
<font color="#CCCCCC">this gets this goes through a sort of a</font>

142
00:06:38,370 --> 00:06:41,640
process<font color="#E5E5E5"> which</font>

143
00:06:39,750 --> 00:06:42,900
it's out what's called<font color="#E5E5E5"> a selection dag</font>

144
00:06:41,640 --> 00:06:44,130
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we're not going to go into details</font>

145
00:06:42,900 --> 00:06:45,479
of<font color="#E5E5E5"> that because</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not particularly</font>

146
00:06:44,130 --> 00:06:51,020
<font color="#E5E5E5">relevant to what I'm talking about today</font>

147
00:06:45,480 --> 00:06:53,460
<font color="#CCCCCC">but the I guess</font><font color="#E5E5E5"> the point is so the</font>

148
00:06:51,020 --> 00:06:55,680
everything that's going on on the sort

149
00:06:53,460 --> 00:06:57,930
<font color="#E5E5E5">of on the</font><font color="#CCCCCC"> LVM IR level if that's mostly</font>

150
00:06:55,680 --> 00:07:02,280
<font color="#E5E5E5">sort of target independent and shared so</font>

151
00:06:57,930 --> 00:07:05,130
it's all the same code<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a op 64 x86</font>

152
00:07:02,280 --> 00:07:07,349
power and so<font color="#E5E5E5"> on whereas once you get to</font>

153
00:07:05,130 --> 00:07:09,060
this step<font color="#E5E5E5"> you've actually you've</font><font color="#CCCCCC"> done</font>

154
00:07:07,350 --> 00:07:11,490
all of your target independent

155
00:07:09,060 --> 00:07:13,470
transformations and analyses<font color="#E5E5E5"> this is</font>

156
00:07:11,490 --> 00:07:15,510
where the sort of porting effort comes

157
00:07:13,470 --> 00:07:17,550
in so you're able<font color="#CCCCCC"> to make use of a</font><font color="#E5E5E5"> whole</font>

158
00:07:15,510 --> 00:07:19,919
set<font color="#CCCCCC"> of you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> Bly breeze and helper</font>

159
00:07:17,550 --> 00:07:23,280
functions but the<font color="#E5E5E5"> task is essentially to</font>

160
00:07:19,919 --> 00:07:26,840
take this selection<font color="#CCCCCC"> dag and to lower it</font>

161
00:07:23,280 --> 00:07:30,750
to our final form<font color="#E5E5E5"> which is the output</font>

162
00:07:26,840 --> 00:07:32,669
<font color="#E5E5E5">assembly or elf object so in this case</font>

163
00:07:30,750 --> 00:07:35,070
it's all fade trivial because ultimately

164
00:07:32,669 --> 00:07:38,490
we have a single a<font color="#E5E5E5"> single</font><font color="#CCCCCC"> AR instruction</font>

165
00:07:35,070 --> 00:07:43,320
the<font color="#CCCCCC"> add which gets lowered to a little</font>

166
00:07:38,490 --> 00:07:46,020
bit<font color="#E5E5E5"> of extra extra extra junk in order</font>

167
00:07:43,320 --> 00:07:48,840
to<font color="#E5E5E5"> handle the function arguments return</font>

168
00:07:46,020 --> 00:07:51,659
as well<font color="#E5E5E5"> as the the main meat of it this</font>

169
00:07:48,840 --> 00:07:54,060
selection dag add node which is

170
00:07:51,660 --> 00:07:57,720
trivially been lowered<font color="#CCCCCC"> to the add</font>

171
00:07:54,060 --> 00:08:00,060
instruction<font color="#E5E5E5"> so that's given a bit of a</font>

172
00:07:57,720 --> 00:08:01,470
sort of<font color="#CCCCCC"> high-level overview</font><font color="#E5E5E5"> of the sort</font>

173
00:08:00,060 --> 00:08:04,740
of things that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would take on while</font>

174
00:08:01,470 --> 00:08:08,910
porting something like<font color="#CCCCCC"> LVM so this</font>

175
00:08:04,740 --> 00:08:10,169
includes so<font color="#CCCCCC"> LVM seer for a number</font><font color="#E5E5E5"> of</font>

176
00:08:08,910 --> 00:08:13,380
years<font color="#E5E5E5"> now includes an</font><font color="#CCCCCC"> integrative</font>

177
00:08:10,169 --> 00:08:15,479
assembler<font color="#E5E5E5"> so that's a fairly relatively</font>

178
00:08:13,380 --> 00:08:20,310
straightforward task of just supporting

179
00:08:15,479 --> 00:08:23,630
the<font color="#CCCCCC"> RISC 5 assembler the syntax we start</font>

180
00:08:20,310 --> 00:08:23,630
<font color="#E5E5E5">looking at</font><font color="#CCCCCC"> defining</font>

181
00:08:35,000 --> 00:08:39,570
so you've employed<font color="#CCCCCC"> your assembler and</font>

182
00:08:37,740 --> 00:08:42,090
<font color="#CCCCCC">that's actually</font><font color="#E5E5E5"> where I started with the</font>

183
00:08:39,570 --> 00:08:46,650
<font color="#E5E5E5">RIS</font><font color="#CCCCCC"> 5lv Airport</font><font color="#E5E5E5"> as to provide a sort of</font>

184
00:08:42,090 --> 00:08:50,520
base<font color="#CCCCCC"> a solid base on which to</font><font color="#E5E5E5"> build</font>

185
00:08:46,650 --> 00:08:52,170
everything<font color="#E5E5E5"> on top of your the</font><font color="#CCCCCC"> next house</font>

186
00:08:50,520 --> 00:08:54,030
<font color="#E5E5E5">you'll want to take on is doing through</font>

187
00:08:52,170 --> 00:08:56,819
something like defining<font color="#E5E5E5"> the instructions</font>

188
00:08:54,030 --> 00:08:58,110
so what is a which instructions does the

189
00:08:56,820 --> 00:09:01,260
architecture support and how they

190
00:08:58,110 --> 00:09:02,880
<font color="#E5E5E5">encoded so</font><font color="#CCCCCC"> I'll just</font><font color="#E5E5E5"> show a slightly</font>

191
00:09:01,260 --> 00:09:05,189
verbose example over<font color="#E5E5E5"> the next few slides</font>

192
00:09:02,880 --> 00:09:08,790
<font color="#E5E5E5">but you don't need to sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> study the</font>

193
00:09:05,190 --> 00:09:11,610
whole thing and also step through these

194
00:09:08,790 --> 00:09:14,010
<font color="#E5E5E5">the rest of these examples</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> so</font>

195
00:09:11,610 --> 00:09:15,990
this is the exploded definition of a

196
00:09:14,010 --> 00:09:17,460
single instruction<font color="#E5E5E5"> in</font><font color="#CCCCCC"> LVM and of course</font>

197
00:09:15,990 --> 00:09:20,190
you<font color="#E5E5E5"> don't need to write this when</font>

198
00:09:17,460 --> 00:09:24,810
defining<font color="#E5E5E5"> a new target</font><font color="#CCCCCC"> and this is using</font>

199
00:09:20,190 --> 00:09:28,290
<font color="#E5E5E5">the</font><font color="#CCCCCC"> it's domain-specific language called</font>

200
00:09:24,810 --> 00:09:32,670
table<font color="#CCCCCC"> gen so this is specifying that we</font>

201
00:09:28,290 --> 00:09:35,310
have a<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> a RIS five instruction</font>

202
00:09:32,670 --> 00:09:37,439
and add the assembler syntax<font color="#E5E5E5"> looks like</font>

203
00:09:35,310 --> 00:09:39,540
this at the bottom<font color="#E5E5E5"> and we have a whole</font>

204
00:09:37,440 --> 00:09:41,430
bunch<font color="#E5E5E5"> of encoding so actually I've</font>

205
00:09:39,540 --> 00:09:43,050
highlighted on the next slide

206
00:09:41,430 --> 00:09:44,969
beautiful lines<font color="#CCCCCC"> that are relevant to</font>

207
00:09:43,050 --> 00:09:46,829
enclosing the<font color="#E5E5E5"> instructions for target</font>

208
00:09:44,970 --> 00:09:48,630
architecture<font color="#CCCCCC"> and these four</font><font color="#E5E5E5"> lines which</font>

209
00:09:46,830 --> 00:09:50,610
are relevant<font color="#E5E5E5"> for the assembly parser</font>

210
00:09:48,630 --> 00:09:54,870
which is actually<font color="#CCCCCC"> mostly generated for</font>

211
00:09:50,610 --> 00:09:59,250
you and for specifying the inputs and

212
00:09:54,870 --> 00:10:02,430
outputs<font color="#CCCCCC"> of instruction</font><font color="#E5E5E5"> but of course</font>

213
00:09:59,250 --> 00:10:03,660
this is<font color="#E5E5E5"> the most painful if you have to</font>

214
00:10:02,430 --> 00:10:05,040
write<font color="#CCCCCC"> that for every instruction it</font>

215
00:10:03,660 --> 00:10:09,120
would become<font color="#E5E5E5"> rather tiresome and not</font>

216
00:10:05,040 --> 00:10:13,079
particularly easy<font color="#CCCCCC"> to maintain</font><font color="#E5E5E5"> and so</font>

217
00:10:09,120 --> 00:10:16,860
it's you start<font color="#CCCCCC"> adding in sort of classes</font>

218
00:10:13,080 --> 00:10:20,400
which<font color="#CCCCCC"> or which are a feature of the</font>

219
00:10:16,860 --> 00:10:22,980
table<font color="#E5E5E5"> DSL which</font><font color="#CCCCCC"> means that</font><font color="#E5E5E5"> ultimately</font>

220
00:10:20,400 --> 00:10:25,260
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> in you can specify instructions</font>

221
00:10:22,980 --> 00:10:26,880
using<font color="#E5E5E5"> a fairly straightforward form such</font>

222
00:10:25,260 --> 00:10:29,189
as this which defines all the register

223
00:10:26,880 --> 00:10:33,650
<font color="#CCCCCC">reg for instructions in the base risk</font>

224
00:10:29,190 --> 00:10:35,910
<font color="#CCCCCC">five is a so that's</font><font color="#E5E5E5"> enough in order to</font>

225
00:10:33,650 --> 00:10:38,520
provide if you have enough support code

226
00:10:35,910 --> 00:10:39,300
around it<font color="#E5E5E5"> that's enough to have generate</font>

227
00:10:38,520 --> 00:10:42,630
your

228
00:10:39,300 --> 00:10:44,250
<font color="#E5E5E5">you'll pass the assembly parser and to</font>

229
00:10:42,630 --> 00:10:47,070
<font color="#E5E5E5">actually produce object code from</font><font color="#CCCCCC"> that</font>

230
00:10:44,250 --> 00:10:50,640
but<font color="#E5E5E5"> we also want to handle and the more</font>

231
00:10:47,070 --> 00:10:54,140
common case which is when you have<font color="#E5E5E5"> LV</font>

232
00:10:50,640 --> 00:10:57,720
<font color="#E5E5E5">Mir input from clang rust</font><font color="#CCCCCC"> Julia or</font>

233
00:10:54,140 --> 00:11:00,030
whatever else<font color="#E5E5E5"> and you want to work out</font>

234
00:10:57,720 --> 00:11:03,720
how to<font color="#E5E5E5"> convert that to risk</font><font color="#CCCCCC"> five</font>

235
00:11:00,030 --> 00:11:05,910
instructions<font color="#CCCCCC"> and so that involves</font><font color="#E5E5E5"> both</font>

236
00:11:03,720 --> 00:11:08,070
writing<font color="#E5E5E5"> C++ logic for more complicated</font>

237
00:11:05,910 --> 00:11:11,310
cases<font color="#E5E5E5"> but in a simple case such as an</font><font color="#CCCCCC"> ad</font>

238
00:11:08,070 --> 00:11:16,650
you just write these patterns so these

239
00:11:11,310 --> 00:11:19,640
are<font color="#E5E5E5"> just sort of</font><font color="#CCCCCC"> visa patterns on nodes</font>

240
00:11:16,650 --> 00:11:22,380
of a selection bag<font color="#E5E5E5"> so it's just a a</font>

241
00:11:19,640 --> 00:11:24,120
<font color="#E5E5E5">directed acyclic graph specifying that</font>

242
00:11:22,380 --> 00:11:24,600
<font color="#E5E5E5">if you have an ADD node which looks like</font>

243
00:11:24,120 --> 00:11:26,370
<font color="#E5E5E5">this</font>

244
00:11:24,600 --> 00:11:31,590
convert it to a risk<font color="#CCCCCC"> five instruction</font>

245
00:11:26,370 --> 00:11:33,750
which looks like<font color="#E5E5E5"> this and I mean at a</font>

246
00:11:31,590 --> 00:11:35,520
from a high<font color="#CCCCCC"> level</font><font color="#E5E5E5"> that's basically what</font>

247
00:11:33,750 --> 00:11:37,700
it involves going<font color="#E5E5E5"> through each</font><font color="#CCCCCC"> of the</font>

248
00:11:35,520 --> 00:11:40,470
each<font color="#E5E5E5"> of instructions supporting that</font>

249
00:11:37,700 --> 00:11:43,290
<font color="#E5E5E5">implanting patterns in this way and then</font>

250
00:11:40,470 --> 00:11:46,140
most of<font color="#E5E5E5"> the most of the fiddly work is</font>

251
00:11:43,290 --> 00:11:47,790
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> around the edges it's ensuring</font>

252
00:11:46,140 --> 00:11:51,210
that the stack frame to<font color="#E5E5E5"> set up properly</font>

253
00:11:47,790 --> 00:11:53,189
that the<font color="#E5E5E5"> API is maintained that the</font>

254
00:11:51,210 --> 00:11:55,770
various corner cases<font color="#E5E5E5"> come up which are</font>

255
00:11:53,190 --> 00:11:59,220
handled<font color="#E5E5E5"> properly of course with risk</font>

256
00:11:55,770 --> 00:12:02,610
<font color="#CCCCCC">five we</font><font color="#E5E5E5"> have it isn't just a single</font>

257
00:11:59,220 --> 00:12:04,770
target<font color="#CCCCCC"> and although</font><font color="#E5E5E5"> over time other</font>

258
00:12:02,610 --> 00:12:07,350
architectures has also gained a whole

259
00:12:04,770 --> 00:12:10,590
range of different<font color="#E5E5E5"> different features</font>

260
00:12:07,350 --> 00:12:16,500
and<font color="#CCCCCC"> different options I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> with five</font>

261
00:12:10,590 --> 00:12:19,080
is<font color="#E5E5E5"> it's it's me they don't tend to be</font>

262
00:12:16,500 --> 00:12:24,830
<font color="#E5E5E5">exercised simultaneously so</font><font color="#CCCCCC"> although</font>

263
00:12:19,080 --> 00:12:29,580
over<font color="#CCCCCC"> stove as so essentially we have</font>

264
00:12:24,830 --> 00:12:31,350
<font color="#CCCCCC">freebase is a definition so RB h 2i r vh</font>

265
00:12:29,580 --> 00:12:35,100
<font color="#CCCCCC">to</font><font color="#E5E5E5"> e which</font><font color="#CCCCCC"> is when you have only 16</font>

266
00:12:31,350 --> 00:12:36,480
registers or are these 64<font color="#CCCCCC"> i but then you</font>

267
00:12:35,100 --> 00:12:39,120
have the question<font color="#CCCCCC"> of do you support</font><font color="#E5E5E5"> the</font>

268
00:12:36,480 --> 00:12:40,410
multiply<font color="#CCCCCC"> Atomics</font><font color="#E5E5E5"> single precision</font>

269
00:12:39,120 --> 00:12:42,660
<font color="#E5E5E5">floating point double precision floating</font>

270
00:12:40,410 --> 00:12:44,219
point<font color="#E5E5E5"> the compressed extension and</font>

271
00:12:42,660 --> 00:12:46,469
that's all fine that's fairly

272
00:12:44,220 --> 00:12:48,770
straightforward it's quite<font color="#E5E5E5"> you know</font>

273
00:12:46,470 --> 00:12:52,170
every architecture x86<font color="#CCCCCC"> adds</font><font color="#E5E5E5"> new</font>

274
00:12:48,770 --> 00:12:53,439
extensions with every<font color="#CCCCCC"> intel intel chip</font>

275
00:12:52,170 --> 00:12:55,900
released

276
00:12:53,440 --> 00:13:00,220
but there's also a<font color="#E5E5E5"> whole range of</font><font color="#CCCCCC"> ABI</font><font color="#E5E5E5"> is</font>

277
00:12:55,900 --> 00:13:03,880
attached about so whether it's<font color="#E5E5E5"> the which</font>

278
00:13:00,220 --> 00:13:06,070
is specified<font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> X Len</font>

279
00:13:03,880 --> 00:13:08,920
so the whether it's<font color="#CCCCCC"> RV 30</font><font color="#E5E5E5"> to our RV 64</font>

280
00:13:06,070 --> 00:13:12,520
and then indicating whether so just

281
00:13:08,920 --> 00:13:14,829
ilp32 we've mean that it is essentially

282
00:13:12,520 --> 00:13:17,470
the<font color="#E5E5E5"> soft</font><font color="#CCCCCC"> flow API I hope you fetched UF</font>

283
00:13:14,830 --> 00:13:19,350
is<font color="#E5E5E5"> single precision hard float for a</font>

284
00:13:17,470 --> 00:13:21,520
single position<font color="#CCCCCC"> which means that your</font>

285
00:13:19,350 --> 00:13:24,700
argument<font color="#E5E5E5"> floating point arguments are</font>

286
00:13:21,520 --> 00:13:31,210
passed by registers<font color="#E5E5E5"> and similarly for L</font>

287
00:13:24,700 --> 00:13:33,340
ilp32<font color="#CCCCCC"> D and lp64 D and so on and the way</font>

288
00:13:31,210 --> 00:13:36,010
that the<font color="#E5E5E5"> RIS</font><font color="#CCCCCC"> 5 ABI is are defined</font><font color="#E5E5E5"> it's</font>

289
00:13:33,340 --> 00:13:37,840
actually pretty<font color="#E5E5E5"> easy to handle these</font>

290
00:13:36,010 --> 00:13:41,770
with a single function<font color="#E5E5E5"> which is</font>

291
00:13:37,840 --> 00:13:42,790
traumatized by the floating supported

292
00:13:41,770 --> 00:13:45,130
floating point<font color="#E5E5E5"> length from</font><font color="#CCCCCC"> the</font>

293
00:13:42,790 --> 00:13:48,219
<font color="#E5E5E5">supportive and the general purpose</font>

294
00:13:45,130 --> 00:13:50,380
register<font color="#CCCCCC"> length</font><font color="#E5E5E5"> but in terms of testing</font>

295
00:13:48,220 --> 00:13:52,390
<font color="#E5E5E5">you can see it as you know once you</font>

296
00:13:50,380 --> 00:13:56,650
start multiplying all these options

297
00:13:52,390 --> 00:13:58,500
there's quite a lot<font color="#CCCCCC"> to cover there and</font>

298
00:13:56,650 --> 00:14:01,480
there's more<font color="#E5E5E5"> to come as people integrate</font>

299
00:13:58,500 --> 00:14:04,870
introducing new custom and standard

300
00:14:01,480 --> 00:14:11,020
extensions<font color="#E5E5E5"> and introducing new custom or</font>

301
00:14:04,870 --> 00:14:13,930
standard<font color="#CCCCCC"> abis</font><font color="#E5E5E5"> so the risk the report of</font>

302
00:14:11,020 --> 00:14:16,240
<font color="#CCCCCC">RIS 5 LVM back in the early</font><font color="#E5E5E5"> days of</font><font color="#CCCCCC"> RIS</font>

303
00:14:13,930 --> 00:14:16,689
5 just<font color="#E5E5E5"> when it was making</font><font color="#CCCCCC"> its way out</font><font color="#E5E5E5"> of</font>

304
00:14:16,240 --> 00:14:19,600
Berkeley

305
00:14:16,690 --> 00:14:20,980
there was a<font color="#E5E5E5"> GT</font><font color="#CCCCCC"> seaport which some of</font>

306
00:14:19,600 --> 00:14:26,040
Berkeley students<font color="#E5E5E5"> to develops and there</font>

307
00:14:20,980 --> 00:14:29,110
was an initial<font color="#CCCCCC"> LVM port and ultimately</font>

308
00:14:26,040 --> 00:14:31,300
actually went<font color="#E5E5E5"> waited around around a bit</font>

309
00:14:29,110 --> 00:14:34,450
to see what<font color="#CCCCCC"> was</font><font color="#E5E5E5"> happening</font><font color="#CCCCCC"> I had</font>

310
00:14:31,300 --> 00:14:37,089
previously been working on a<font color="#CCCCCC"> ldm port</font>

311
00:14:34,450 --> 00:14:39,460
for a research architecture at Cambridge

312
00:14:37,090 --> 00:14:42,070
<font color="#CCCCCC">a large</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> very simple</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order</font>

313
00:14:39,460 --> 00:14:43,390
<font color="#E5E5E5">cause but with its own is a so I kind of</font>

314
00:14:42,070 --> 00:14:44,800
got quite up to<font color="#E5E5E5"> speed on</font>

315
00:14:43,390 --> 00:14:49,210
<font color="#CCCCCC">Alvie</font><font color="#E5E5E5"> and back-end development through</font>

316
00:14:44,800 --> 00:14:51,640
that and I<font color="#E5E5E5"> think we found that the the</font>

317
00:14:49,210 --> 00:14:53,290
initial<font color="#E5E5E5"> risk 5</font><font color="#CCCCCC"> LVM port</font><font color="#E5E5E5"> although people</font>

318
00:14:51,640 --> 00:14:54,970
<font color="#E5E5E5">managed to do some useful</font><font color="#CCCCCC"> things with it</font>

319
00:14:53,290 --> 00:14:58,569
it was quite some way away from<font color="#CCCCCC"> being</font>

320
00:14:54,970 --> 00:15:01,150
<font color="#CCCCCC">ready for</font><font color="#E5E5E5"> and being committed upstream</font>

321
00:14:58,570 --> 00:15:04,390
so I sort of<font color="#E5E5E5"> started a fresh effort</font>

322
00:15:01,150 --> 00:15:06,310
trying<font color="#CCCCCC"> to work in a very step by</font><font color="#E5E5E5"> step</font>

323
00:15:04,390 --> 00:15:06,680
<font color="#E5E5E5">taking</font><font color="#CCCCCC"> a very step-by-step methodical</font>

324
00:15:06,310 --> 00:15:09,529
approach

325
00:15:06,680 --> 00:15:12,138
ensuring that<font color="#E5E5E5"> everything was well tested</font>

326
00:15:09,529 --> 00:15:16,369
unit tested and to the<font color="#E5E5E5"> extent that I was</font>

327
00:15:12,139 --> 00:15:19,459
able<font color="#CCCCCC"> to document</font><font color="#E5E5E5"> it and I guess over the</font>

328
00:15:16,369 --> 00:15:20,990
past 18 months or<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> get a</font>

329
00:15:19,459 --> 00:15:22,989
bit<font color="#E5E5E5"> of funding which has helped to sort</font>

330
00:15:20,990 --> 00:15:26,089
of<font color="#E5E5E5"> increase the time I can</font><font color="#CCCCCC"> spend on</font><font color="#E5E5E5"> this</font>

331
00:15:22,990 --> 00:15:28,819
<font color="#CCCCCC">I'll say</font><font color="#E5E5E5"> more about status a little bit</font>

332
00:15:26,089 --> 00:15:32,089
later<font color="#E5E5E5"> but we've there's now this started</font>

333
00:15:28,819 --> 00:15:33,498
as a as a downstream project but<font color="#E5E5E5"> with</font>

334
00:15:32,089 --> 00:15:36,499
the intent of getting<font color="#E5E5E5"> upstream very</font>

335
00:15:33,499 --> 00:15:38,360
quickly<font color="#CCCCCC"> LVM has a</font><font color="#E5E5E5"> pre commit review</font>

336
00:15:36,499 --> 00:15:40,699
policy which in the early<font color="#CCCCCC"> days it took</font>

337
00:15:38,360 --> 00:15:43,610
<font color="#CCCCCC">quite a while to actually get things up</font>

338
00:15:40,699 --> 00:15:44,990
there but that's sort of sped up

339
00:15:43,610 --> 00:15:47,329
substantially<font color="#CCCCCC"> now that there are more</font>

340
00:15:44,990 --> 00:15:51,829
<font color="#CCCCCC">people interested i'm the upstream code</font>

341
00:15:47,329 --> 00:15:57,829
<font color="#CCCCCC">owner</font><font color="#E5E5E5"> so that's and things get got much</font>

342
00:15:51,829 --> 00:16:01,809
easier in that respect and so so<font color="#CCCCCC"> at this</font>

343
00:15:57,829 --> 00:16:04,609
point there are<font color="#CCCCCC"> i guess</font><font color="#E5E5E5"> the sort of</font>

344
00:16:01,809 --> 00:16:08,389
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> view of the current status</font><font color="#CCCCCC"> is</font>

345
00:16:04,610 --> 00:16:11,779
<font color="#CCCCCC">that it's it's</font><font color="#E5E5E5"> not there yet for hard</font>

346
00:16:08,389 --> 00:16:14,480
float<font color="#E5E5E5"> on linux targets but i'm targeting</font>

347
00:16:11,779 --> 00:16:16,579
the next<font color="#E5E5E5"> LVM</font><font color="#CCCCCC"> and hello vm release for</font>

348
00:16:14,480 --> 00:16:17,660
that<font color="#E5E5E5"> but there are I know multiple</font>

349
00:16:16,579 --> 00:16:20,059
<font color="#E5E5E5">companies who are using it internally</font>

350
00:16:17,660 --> 00:16:21,679
for their firmware builds on their

351
00:16:20,059 --> 00:16:23,839
embedded<font color="#CCCCCC"> 32-bit targets quite</font>

352
00:16:21,679 --> 00:16:27,079
successfully<font color="#E5E5E5"> occasionally working around</font>

353
00:16:23,839 --> 00:16:33,050
various limitations<font color="#E5E5E5"> but finding it's</font>

354
00:16:27,079 --> 00:16:37,189
doing what they need<font color="#CCCCCC"> so I think I've</font>

355
00:16:33,050 --> 00:16:40,040
covered that<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> ris 5 as</font><font color="#E5E5E5"> you might</font>

356
00:16:37,189 --> 00:16:42,589
know and there's a there's<font color="#CCCCCC"> a compressed</font>

357
00:16:40,040 --> 00:16:44,300
extension and how that works is so in

358
00:16:42,589 --> 00:16:48,170
<font color="#E5E5E5">the standard with</font><font color="#CCCCCC"> five instructions</font><font color="#E5E5E5"> the</font>

359
00:16:44,300 --> 00:16:50,469
<font color="#CCCCCC">rvh to IRB 64 i every</font><font color="#E5E5E5"> instruction is 32</font>

360
00:16:48,170 --> 00:16:53,899
bits<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> support the compressions</font>

361
00:16:50,470 --> 00:16:55,929
extension then<font color="#E5E5E5"> a's for a subset of those</font>

362
00:16:53,899 --> 00:17:00,559
<font color="#E5E5E5">instructions you're actually able to</font>

363
00:16:55,929 --> 00:17:03,100
encode them and encode them in just 16

364
00:17:00,559 --> 00:17:06,109
bits<font color="#CCCCCC"> so this is not dissimilar</font><font color="#E5E5E5"> to</font>

365
00:17:03,100 --> 00:17:07,909
<font color="#CCCCCC">thumb-2 or various other</font><font color="#E5E5E5"> compression</font>

366
00:17:06,109 --> 00:17:10,729
<font color="#E5E5E5">structure set designs</font><font color="#CCCCCC"> except</font><font color="#E5E5E5"> that you're</font>

367
00:17:07,909 --> 00:17:12,620
able<font color="#E5E5E5"> to freely intermix</font><font color="#CCCCCC"> them and we</font>

368
00:17:10,730 --> 00:17:14,059
<font color="#CCCCCC">actually went we had a fair</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font>

369
00:17:12,619 --> 00:17:16,339
discussion<font color="#E5E5E5"> about how to handle this in</font>

370
00:17:14,059 --> 00:17:19,260
<font color="#E5E5E5">the compiler and there are a number of</font>

371
00:17:16,339 --> 00:17:24,030
design decision to design choices

372
00:17:19,260 --> 00:17:25,680
that were considered<font color="#E5E5E5"> and one of the one</font>

373
00:17:24,030 --> 00:17:27,980
of the<font color="#CCCCCC"> questions you have to we had to</font>

374
00:17:25,680 --> 00:17:30,090
<font color="#E5E5E5">answer quite early on</font><font color="#CCCCCC"> it was whether the</font>

375
00:17:27,980 --> 00:17:31,650
whether<font color="#E5E5E5"> the instruction selector would</font>

376
00:17:30,090 --> 00:17:33,629
be<font color="#E5E5E5"> aware</font><font color="#CCCCCC"> of the compressed instruction</font>

377
00:17:31,650 --> 00:17:36,060
set because<font color="#E5E5E5"> of course if you have a</font>

378
00:17:33,630 --> 00:17:38,010
16-bit instruction for an<font color="#E5E5E5"> ad it doesn't</font>

379
00:17:36,060 --> 00:17:39,990
have the<font color="#E5E5E5"> same it has various</font>

380
00:17:38,010 --> 00:17:43,590
restrictions on it such as you have<font color="#E5E5E5"> to</font>

381
00:17:39,990 --> 00:17:45,150
have the<font color="#CCCCCC"> weather restricted subset of</font>

382
00:17:43,590 --> 00:17:48,209
registers<font color="#CCCCCC"> that you're able to access</font><font color="#E5E5E5"> but</font>

383
00:17:45,150 --> 00:17:51,570
the restrictive immediate immediate

384
00:17:48,210 --> 00:17:53,610
field and so there's<font color="#E5E5E5"> one approach would</font>

385
00:17:51,570 --> 00:17:55,169
<font color="#CCCCCC">be to try and teach the instruction</font>

386
00:17:53,610 --> 00:17:58,020
selector<font color="#E5E5E5"> about all of these instructions</font>

387
00:17:55,170 --> 00:17:59,190
<font color="#E5E5E5">and have that and produce it</font><font color="#CCCCCC"> and we</font>

388
00:17:58,020 --> 00:18:01,889
actually<font color="#E5E5E5"> ended up</font><font color="#CCCCCC"> doing something very</font>

389
00:17:59,190 --> 00:18:03,930
<font color="#CCCCCC">similar</font><font color="#E5E5E5"> to watch GCC and</font><font color="#CCCCCC"> the good new</font>

390
00:18:01,890 --> 00:18:07,410
assembler does which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to actually</font>

391
00:18:03,930 --> 00:18:11,400
<font color="#E5E5E5">handle it</font><font color="#CCCCCC"> basically exclusively as a</font>

392
00:18:07,410 --> 00:18:13,140
very very late stage<font color="#E5E5E5"> conversion so you</font>

393
00:18:11,400 --> 00:18:15,240
go all the<font color="#CCCCCC"> way through</font><font color="#E5E5E5"> register</font>

394
00:18:13,140 --> 00:18:16,580
allocation for free the instruction

395
00:18:15,240 --> 00:18:19,110
selector for register allocation

396
00:18:16,580 --> 00:18:20,879
actually<font color="#E5E5E5"> generate the</font><font color="#CCCCCC"> in-memory</font>

397
00:18:19,110 --> 00:18:22,740
<font color="#E5E5E5">representation of the machine</font>

398
00:18:20,880 --> 00:18:25,830
instructions<font color="#CCCCCC"> and then we put it through</font>

399
00:18:22,740 --> 00:18:28,830
a converter which just is basically a

400
00:18:25,830 --> 00:18:30,600
table<font color="#E5E5E5"> based system but looks and sees it</font>

401
00:18:28,830 --> 00:18:32,129
says for this<font color="#E5E5E5"> add instruction can I</font>

402
00:18:30,600 --> 00:18:33,629
convert<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to a compressor</font><font color="#E5E5E5"> and</font>

403
00:18:32,130 --> 00:18:35,880
instruction for<font color="#E5E5E5"> this load instruction</font>

404
00:18:33,630 --> 00:18:39,600
can I do the<font color="#E5E5E5"> same and the advantage of</font>

405
00:18:35,880 --> 00:18:41,880
this is that it's quite substantially

406
00:18:39,600 --> 00:18:43,770
simplifies the logic throughout the rest

407
00:18:41,880 --> 00:18:45,810
<font color="#E5E5E5">of the back end because you know I</font>

408
00:18:43,770 --> 00:18:47,520
mentioned<font color="#E5E5E5"> that we have you know those</font>

409
00:18:45,810 --> 00:18:48,570
long<font color="#CCCCCC"> list of instruction patterns and</font>

410
00:18:47,520 --> 00:18:50,310
that's<font color="#E5E5E5"> pretty straightforward but</font>

411
00:18:48,570 --> 00:18:52,230
there's a whole<font color="#CCCCCC"> bunch of other target</font>

412
00:18:50,310 --> 00:18:55,110
specific analyses<font color="#E5E5E5"> such as you know</font>

413
00:18:52,230 --> 00:18:57,210
looking at in analyzing control flow and

414
00:18:55,110 --> 00:18:58,740
branching<font color="#E5E5E5"> and it becomes somewhat</font>

415
00:18:57,210 --> 00:19:01,710
tedious if you have to ensure<font color="#CCCCCC"> that all</font>

416
00:18:58,740 --> 00:19:03,810
<font color="#CCCCCC">of that recognizes both the uncompressed</font>

417
00:19:01,710 --> 00:19:05,700
<font color="#E5E5E5">form and the compressed form and of</font>

418
00:19:03,810 --> 00:19:08,909
course it's a an<font color="#E5E5E5"> area where you can</font>

419
00:19:05,700 --> 00:19:10,380
start to introduce errors but I think

420
00:19:08,910 --> 00:19:12,360
that's the starting point<font color="#CCCCCC"> rather than</font>

421
00:19:10,380 --> 00:19:15,150
the end point<font color="#E5E5E5"> so we've had</font><font color="#CCCCCC"> it's over and</font>

422
00:19:12,360 --> 00:19:18,090
it's<font color="#CCCCCC"> not completely naive</font><font color="#E5E5E5"> in that the</font>

423
00:19:15,150 --> 00:19:21,510
<font color="#CCCCCC">Rachel</font><font color="#E5E5E5"> allocator is aware</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> fact</font>

424
00:19:18,090 --> 00:19:22,830
that some registers are able<font color="#CCCCCC"> to be</font>

425
00:19:21,510 --> 00:19:25,020
accessed<font color="#CCCCCC"> from compressed</font><font color="#E5E5E5"> instructions</font>

426
00:19:22,830 --> 00:19:28,889
and so<font color="#E5E5E5"> they'll be</font><font color="#CCCCCC"> chosen in preference</font>

427
00:19:25,020 --> 00:19:31,250
to registers which which are<font color="#E5E5E5"> which are</font>

428
00:19:28,890 --> 00:19:36,740
can never be accessed from the<font color="#E5E5E5"> compare</font>

429
00:19:31,250 --> 00:19:39,350
instructions and I kind of I've gone<font color="#CCCCCC"> a</font>

430
00:19:36,740 --> 00:19:41,270
bit a<font color="#CCCCCC"> bit around in</font><font color="#E5E5E5"> terms of how to how</font>

431
00:19:39,350 --> 00:19:42,830
much to go<font color="#CCCCCC"> into detail on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> wrist</font>

432
00:19:41,270 --> 00:19:47,000
fight very<font color="#E5E5E5"> moral support so I'll try</font><font color="#CCCCCC"> and</font>

433
00:19:42,830 --> 00:19:49,100
<font color="#E5E5E5">keep it somewhat accessible it turned</font>

434
00:19:47,000 --> 00:19:51,830
out to actually<font color="#E5E5E5"> be a larger body of work</font>

435
00:19:49,100 --> 00:19:54,020
than I was anticipating<font color="#CCCCCC"> so as you may</font>

436
00:19:51,830 --> 00:19:56,810
know if you've<font color="#CCCCCC"> been</font><font color="#E5E5E5"> following</font><font color="#CCCCCC"> risk</font><font color="#E5E5E5"> 5</font>

437
00:19:54,020 --> 00:19:58,070
over the<font color="#E5E5E5"> past few years one of the early</font>

438
00:19:56,810 --> 00:19:59,450
and probably most successful

439
00:19:58,070 --> 00:20:02,240
standardization efforts in the<font color="#CCCCCC"> wrist</font>

440
00:19:59,450 --> 00:20:03,980
<font color="#CCCCCC">fire foundation was</font><font color="#E5E5E5"> coming to conclusion</font>

441
00:20:02,240 --> 00:20:06,340
on what fear is<font color="#E5E5E5"> five memory model should</font>

442
00:20:03,980 --> 00:20:08,540
be so the initial specification it had

443
00:20:06,340 --> 00:20:10,129
it had<font color="#E5E5E5"> very thing to say about the</font>

444
00:20:08,540 --> 00:20:11,450
memory model meant some researchers at

445
00:20:10,130 --> 00:20:14,150
Princeton<font color="#E5E5E5"> and others they</font><font color="#CCCCCC"> sort of</font>

446
00:20:11,450 --> 00:20:15,950
pointed out that<font color="#E5E5E5"> actually like most</font>

447
00:20:14,150 --> 00:20:18,020
memory models for most architectures

448
00:20:15,950 --> 00:20:21,200
there were various things which were

449
00:20:18,020 --> 00:20:22,879
somewhat questionable<font color="#E5E5E5"> and they quite</font>

450
00:20:21,200 --> 00:20:26,450
successfully managed to get a whole

451
00:20:22,880 --> 00:20:27,980
group of academics practitioners an

452
00:20:26,450 --> 00:20:30,410
industry<font color="#E5E5E5"> together and come to an</font>

453
00:20:27,980 --> 00:20:34,070
agreement<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> marry model which ended</font>

454
00:20:30,410 --> 00:20:37,550
up being a a a very<font color="#E5E5E5"> relaxed memory model</font>

455
00:20:34,070 --> 00:20:38,840
<font color="#E5E5E5">not dissimilar to a</font><font color="#CCCCCC"> arch 64 and so what</font>

456
00:20:37,550 --> 00:20:42,139
do you need<font color="#E5E5E5"> to do to support that in the</font>

457
00:20:38,840 --> 00:20:44,419
compiler and it's actually the basics<font color="#E5E5E5"> of</font>

458
00:20:42,140 --> 00:20:47,780
<font color="#E5E5E5">it is relatively straightforward because</font>

459
00:20:44,420 --> 00:20:50,090
<font color="#E5E5E5">that I have</font><font color="#CCCCCC"> the with the c11</font><font color="#E5E5E5"> and C++ 11</font>

460
00:20:47,780 --> 00:20:52,730
memory model<font color="#E5E5E5"> and they there are a</font><font color="#CCCCCC"> number</font>

461
00:20:50,090 --> 00:20:55,429
of primitives such as atomic<font color="#E5E5E5"> add a tonic</font>

462
00:20:52,730 --> 00:20:57,320
subtract atomic load<font color="#CCCCCC"> which with</font>

463
00:20:55,430 --> 00:20:59,900
<font color="#CCCCCC">different memory orderings specified by</font>

464
00:20:57,320 --> 00:21:04,429
<font color="#E5E5E5">Z specified by the programmer and</font><font color="#CCCCCC"> all I</font>

465
00:20:59,900 --> 00:21:08,060
<font color="#E5E5E5">really need to do is is understand each</font>

466
00:21:04,430 --> 00:21:10,790
of those so this<font color="#E5E5E5"> has been this this is a</font>

467
00:21:08,060 --> 00:21:13,460
compare and<font color="#E5E5E5"> exchange which has been that</font>

468
00:21:10,790 --> 00:21:16,460
would<font color="#E5E5E5"> have been lowered from the</font><font color="#CCCCCC"> C C++</font>

469
00:21:13,460 --> 00:21:18,050
11<font color="#CCCCCC"> at ie compare and exchange and then I</font>

470
00:21:16,460 --> 00:21:20,930
jump we have to convert<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to whatever</font>

471
00:21:18,050 --> 00:21:24,399
the memory model<font color="#CCCCCC"> people tell me is is</font>

472
00:21:20,930 --> 00:21:26,270
<font color="#E5E5E5">correct and then in theory you're done</font>

473
00:21:24,400 --> 00:21:28,880
but it's actually a<font color="#E5E5E5"> little bit more</font>

474
00:21:26,270 --> 00:21:32,330
fiddly than that<font color="#E5E5E5"> so in with five</font>

475
00:21:28,880 --> 00:21:36,800
supports it has two sets of atomic

476
00:21:32,330 --> 00:21:38,899
instructions so<font color="#E5E5E5"> you have the</font><font color="#CCCCCC"> a MOS the</font>

477
00:21:36,800 --> 00:21:41,169
atomic memory operations so atomic fetch

478
00:21:38,900 --> 00:21:44,090
atomic<font color="#E5E5E5"> add atomic subtract atomic all</font>

479
00:21:41,170 --> 00:21:45,050
atomic<font color="#E5E5E5"> XOR and that's relatively</font>

480
00:21:44,090 --> 00:21:47,330
straightforward

481
00:21:45,050 --> 00:21:49,100
<font color="#CCCCCC">straightforward to support but then</font>

482
00:21:47,330 --> 00:21:50,780
there's some more general<font color="#E5E5E5"> instructions</font>

483
00:21:49,100 --> 00:21:52,550
so load reserved and store conditional

484
00:21:50,780 --> 00:21:55,010
<font color="#E5E5E5">so if you want to do something a</font><font color="#CCCCCC"> little</font>

485
00:21:52,550 --> 00:21:57,139
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> more complicated</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> load a</font>

486
00:21:55,010 --> 00:21:58,879
value<font color="#E5E5E5"> added</font><font color="#CCCCCC"> and atomically write</font><font color="#E5E5E5"> that</font>

487
00:21:57,140 --> 00:22:01,520
back<font color="#E5E5E5"> again then you rely on these</font>

488
00:21:58,880 --> 00:22:04,550
primitives so load reserved<font color="#E5E5E5"> reads a</font>

489
00:22:01,520 --> 00:22:06,320
value<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it sets a reservation</font><font color="#E5E5E5"> the</font>

490
00:22:04,550 --> 00:22:08,210
granularity of that<font color="#CCCCCC"> Reds</font><font color="#E5E5E5"> of reservation</font>

491
00:22:06,320 --> 00:22:09,679
is a kind of architecture is dependent

492
00:22:08,210 --> 00:22:12,350
on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> microarchitecture</font><font color="#CCCCCC"> but let's say</font>

493
00:22:09,680 --> 00:22:13,970
it reserves<font color="#E5E5E5"> back cache line and then you</font>

494
00:22:12,350 --> 00:22:15,740
do some computation based<font color="#E5E5E5"> on that and</font>

495
00:22:13,970 --> 00:22:19,100
then<font color="#E5E5E5"> later you do a store conditional</font>

496
00:22:15,740 --> 00:22:20,360
<font color="#E5E5E5">and if</font><font color="#CCCCCC"> you're if somebody else wrote to</font>

497
00:22:19,100 --> 00:22:21,620
that and say that<font color="#E5E5E5"> cache line in the</font>

498
00:22:20,360 --> 00:22:24,800
meantime then you'll store conditional

499
00:22:21,620 --> 00:22:26,540
will fail and then your program<font color="#E5E5E5"> code</font><font color="#CCCCCC"> if</font>

500
00:22:24,800 --> 00:22:28,540
it<font color="#E5E5E5"> wants to be correct should then loop</font>

501
00:22:26,540 --> 00:22:32,810
back<font color="#E5E5E5"> and try again</font><font color="#CCCCCC"> and keep trying</font><font color="#E5E5E5"> and</font>

502
00:22:28,540 --> 00:22:34,190
it's this<font color="#E5E5E5"> it's V it's this looping again</font>

503
00:22:32,810 --> 00:22:37,669
in keeping trying which can be

504
00:22:34,190 --> 00:22:40,550
problematic<font color="#E5E5E5"> because the you want to</font>

505
00:22:37,670 --> 00:22:42,560
ensure<font color="#CCCCCC"> that that this</font><font color="#E5E5E5"> this loop will</font>

506
00:22:40,550 --> 00:22:45,409
actually terminate at some point and so

507
00:22:42,560 --> 00:22:48,919
the<font color="#CCCCCC"> risk v</font><font color="#E5E5E5"> the risk v ice is a manual</font>

508
00:22:45,410 --> 00:22:51,050
specifies<font color="#E5E5E5"> various restrictions on what</font>

509
00:22:48,920 --> 00:22:52,910
<font color="#E5E5E5">code can be placed between</font><font color="#CCCCCC"> the load</font>

510
00:22:51,050 --> 00:22:57,110
reserved and the store conditional<font color="#CCCCCC"> in</font>

511
00:22:52,910 --> 00:22:59,350
order to ensure<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> what it calls the</font>

512
00:22:57,110 --> 00:23:02,209
architectural forward progress<font color="#CCCCCC"> guarantee</font>

513
00:22:59,350 --> 00:23:04,939
and the restrictions are pretty<font color="#E5E5E5"> simple</font>

514
00:23:02,210 --> 00:23:07,340
it just<font color="#CCCCCC"> means that you can't have the</font>

515
00:23:04,940 --> 00:23:09,530
main thing<font color="#E5E5E5"> you can't have that spills or</font>

516
00:23:07,340 --> 00:23:11,600
loads<font color="#CCCCCC"> or stores from main memory or</font>

517
00:23:09,530 --> 00:23:12,260
jumps or<font color="#CCCCCC"> floating-point</font><font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> and</font>

518
00:23:11,600 --> 00:23:14,719
<font color="#E5E5E5">that sort of thing</font>

519
00:23:12,260 --> 00:23:16,190
but the difficulty is<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> compiler</font>

520
00:23:14,720 --> 00:23:17,990
doesn't actually have an easy way<font color="#CCCCCC"> of</font>

521
00:23:16,190 --> 00:23:21,110
reasoning<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> but reasoning about</font>

522
00:23:17,990 --> 00:23:24,200
<font color="#CCCCCC">the fact that say this for</font><font color="#E5E5E5"> this ir</font>

523
00:23:21,110 --> 00:23:28,760
construct once<font color="#CCCCCC"> i start to decompose it</font>

524
00:23:24,200 --> 00:23:30,590
to risk<font color="#CCCCCC"> v</font><font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> but before but</font>

525
00:23:28,760 --> 00:23:32,540
before it's done various over now these

526
00:23:30,590 --> 00:23:35,480
are transformations<font color="#E5E5E5"> it's not actually</font>

527
00:23:32,540 --> 00:23:36,950
possible<font color="#CCCCCC"> to specify that</font><font color="#E5E5E5"> is v region</font>

528
00:23:35,480 --> 00:23:38,560
should<font color="#E5E5E5"> be left</font><font color="#CCCCCC"> alone ambition</font><font color="#E5E5E5"> v any</font>

529
00:23:36,950 --> 00:23:42,070
spills<font color="#CCCCCC"> not such a</font><font color="#E5E5E5"> thing</font>

530
00:23:38,560 --> 00:23:45,110
<font color="#E5E5E5">so it's actually a problem which other</font>

531
00:23:42,070 --> 00:23:47,629
architectures<font color="#CCCCCC"> faced and ended up sort of</font>

532
00:23:45,110 --> 00:23:49,280
implementing<font color="#E5E5E5"> a new a whole set</font><font color="#CCCCCC"> of</font>

533
00:23:47,630 --> 00:23:51,800
<font color="#E5E5E5">different hooks for atomic lowering</font>

534
00:23:49,280 --> 00:23:54,740
which currently risk v<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only is your</font>

535
00:23:51,800 --> 00:23:57,649
<font color="#CCCCCC">only user of but i'm hoping that a</font><font color="#E5E5E5"> are</font>

536
00:23:54,740 --> 00:23:58,559
64<font color="#CCCCCC"> an arm will</font><font color="#E5E5E5"> move over and essentially</font>

537
00:23:57,650 --> 00:24:03,179
they approach

538
00:23:58,559 --> 00:24:05,009
to lower to a to basically treat

539
00:24:03,179 --> 00:24:07,769
<font color="#E5E5E5">something like compare</font><font color="#CCCCCC"> exchange as a</font>

540
00:24:05,009 --> 00:24:11,159
black box<font color="#CCCCCC"> when you lower it</font><font color="#E5E5E5"> so we we see</font>

541
00:24:07,769 --> 00:24:12,620
this<font color="#E5E5E5"> compare exchange we lower to a we</font>

542
00:24:11,159 --> 00:24:15,659
load<font color="#E5E5E5"> something which is a little bit</font>

543
00:24:12,620 --> 00:24:17,399
still still very abstracted so it's

544
00:24:15,659 --> 00:24:19,409
basically a we know it's a risk<font color="#E5E5E5"> 5</font>

545
00:24:17,399 --> 00:24:21,809
compare exchange<font color="#E5E5E5"> but it's not converted</font>

546
00:24:19,409 --> 00:24:23,519
to risk<font color="#CCCCCC"> five instructions</font><font color="#E5E5E5"> until a very</font>

547
00:24:21,809 --> 00:24:24,870
<font color="#E5E5E5">very late stage after all the other</font>

548
00:24:23,519 --> 00:24:26,700
register<font color="#E5E5E5"> allocation has been</font><font color="#CCCCCC"> taking</font>

549
00:24:24,870 --> 00:24:28,850
<font color="#E5E5E5">place and things like</font><font color="#CCCCCC"> that which ensures</font>

550
00:24:26,700 --> 00:24:31,529
that there's absolutely<font color="#E5E5E5"> no way that</font>

551
00:24:28,850 --> 00:24:33,029
<font color="#E5E5E5">unexpected spills the stack and</font><font color="#CCCCCC"> that</font>

552
00:24:31,529 --> 00:24:35,279
sort of thing<font color="#CCCCCC"> are introduced and</font>

553
00:24:33,029 --> 00:24:38,690
<font color="#CCCCCC">although in practice</font><font color="#E5E5E5"> they the other</font>

554
00:24:35,279 --> 00:24:40,950
<font color="#E5E5E5">backends have managed to avoid this by</font>

555
00:24:38,690 --> 00:24:43,230
by having<font color="#CCCCCC"> a slightly different code path</font>

556
00:24:40,950 --> 00:24:47,309
or when you have a low<font color="#E5E5E5"> optimum for when</font>

557
00:24:43,230 --> 00:24:49,259
you're targeting<font color="#E5E5E5"> a zero there's it is</font>

558
00:24:47,309 --> 00:24:55,590
still a sort<font color="#CCCCCC"> of theoretical concern but</font>

559
00:24:49,259 --> 00:24:57,659
I<font color="#E5E5E5"> think it's worth addressing so in</font>

560
00:24:55,590 --> 00:25:00,209
terms of testing<font color="#CCCCCC"> and fuzzing there's</font>

561
00:24:57,659 --> 00:25:02,100
been I guess there's a few<font color="#CCCCCC"> a few</font>

562
00:25:00,210 --> 00:25:04,200
approaches we take so most<font color="#E5E5E5"> of it has</font>

563
00:25:02,100 --> 00:25:07,619
<font color="#CCCCCC">been done through</font><font color="#E5E5E5"> unit testing so</font>

564
00:25:04,200 --> 00:25:08,940
targeted tests written against the<font color="#CCCCCC"> LVM</font>

565
00:25:07,619 --> 00:25:11,580
has a whole infrastructure<font color="#E5E5E5"> for this</font>

566
00:25:08,940 --> 00:25:14,100
<font color="#E5E5E5">based on giving input</font><font color="#CCCCCC"> ir and then</font>

567
00:25:11,580 --> 00:25:16,529
writing effectively<font color="#E5E5E5"> regular expressions</font>

568
00:25:14,100 --> 00:25:18,149
on the output to ensure that<font color="#E5E5E5"> the the</font>

569
00:25:16,529 --> 00:25:21,179
assembly<font color="#E5E5E5"> if you expected came out the</font>

570
00:25:18,149 --> 00:25:23,549
other<font color="#CCCCCC"> end it has is there's been</font>

571
00:25:21,179 --> 00:25:25,440
<font color="#E5E5E5">increasing efforts who start to test</font>

572
00:25:23,549 --> 00:25:28,679
with of course<font color="#E5E5E5"> real-world programs</font>

573
00:25:25,440 --> 00:25:32,669
multiple people are compiling spec with

574
00:25:28,679 --> 00:25:34,649
with<font color="#E5E5E5"> clang and risk</font><font color="#CCCCCC"> 5 and there's some</font>

575
00:25:32,669 --> 00:25:36,869
<font color="#E5E5E5">great work last</font><font color="#CCCCCC"> year from some interns</font>

576
00:25:34,649 --> 00:25:39,389
at qualcomm on fuzzing and this was

577
00:25:36,869 --> 00:25:42,119
targeted on<font color="#E5E5E5"> the assembly parser so</font>

578
00:25:39,389 --> 00:25:44,399
specifying<font color="#E5E5E5"> a grammar</font><font color="#CCCCCC"> for risk 5</font>

579
00:25:42,119 --> 00:25:47,100
<font color="#CCCCCC">instructions when trying</font><font color="#E5E5E5"> to generate a</font>

580
00:25:44,399 --> 00:25:49,258
whole bunch of you<font color="#E5E5E5"> know different inputs</font>

581
00:25:47,100 --> 00:25:53,340
and seeing how the how it differs

582
00:25:49,259 --> 00:25:55,470
between GCC and the<font color="#CCCCCC"> LVM assembler so</font>

583
00:25:53,340 --> 00:25:57,299
that was using<font color="#CCCCCC"> there's some related work</font>

584
00:25:55,470 --> 00:25:59,669
for doing something<font color="#E5E5E5"> similar with c so</font>

585
00:25:57,299 --> 00:26:02,610
<font color="#E5E5E5">that was inspired by</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> think this works</font>

586
00:25:59,669 --> 00:26:06,629
on<font color="#CCCCCC"> google's done on a so you specify use</font>

587
00:26:02,610 --> 00:26:08,908
sort<font color="#E5E5E5"> of protobufs to specify the specify</font>

588
00:26:06,629 --> 00:26:10,379
your grammar<font color="#E5E5E5"> and then using</font><font color="#CCCCCC"> l VMs</font>

589
00:26:08,909 --> 00:26:11,280
fuzzing library you're able to

590
00:26:10,379 --> 00:26:14,908
<font color="#CCCCCC">instantiate</font>

591
00:26:11,280 --> 00:26:20,970
instantiate that<font color="#E5E5E5"> with with legal and</font>

592
00:26:14,909 --> 00:26:22,500
illegal<font color="#E5E5E5"> values so one</font><font color="#CCCCCC"> of the another</font>

593
00:26:20,970 --> 00:26:24,299
challenge I'm a compiler side<font color="#CCCCCC"> or I guess</font>

594
00:26:22,500 --> 00:26:28,799
<font color="#CCCCCC">another task is</font><font color="#E5E5E5"> supporting link of</font>

595
00:26:24,299 --> 00:26:32,100
relaxation so if you have so<font color="#CCCCCC"> LVM has</font>

596
00:26:28,799 --> 00:26:34,470
fairly<font color="#E5E5E5"> small immediate sizes so if you</font>

597
00:26:32,100 --> 00:26:36,990
have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to a and of course it has</font><font color="#E5E5E5"> a</font>

598
00:26:34,470 --> 00:26:39,659
<font color="#E5E5E5">fixed instruction length so unlike x86</font>

599
00:26:36,990 --> 00:26:42,030
row with x86 if you if you want<font color="#E5E5E5"> to</font>

600
00:26:39,659 --> 00:26:44,250
access global you can stick the whole

601
00:26:42,030 --> 00:26:47,700
address<font color="#E5E5E5"> there if you wanted to whereas</font>

602
00:26:44,250 --> 00:26:50,159
with<font color="#E5E5E5"> risk</font><font color="#CCCCCC"> v you'd lower it</font><font color="#E5E5E5"> to and say a</font>

603
00:26:47,700 --> 00:26:53,419
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> instructions so</font><font color="#CCCCCC"> you're - and</font>

604
00:26:50,159 --> 00:26:56,070
as say lowering the other vehicle

605
00:26:53,419 --> 00:26:59,190
<font color="#E5E5E5">loading the other 20 bits and then say</font>

606
00:26:56,070 --> 00:27:03,299
loading with a 12 bit offset<font color="#E5E5E5"> but link</font>

607
00:26:59,190 --> 00:27:05,280
relaxation is when you sort of you allow

608
00:27:03,299 --> 00:27:07,470
the linker to<font color="#E5E5E5"> look at all of these</font>

609
00:27:05,280 --> 00:27:09,750
instruction pairs and then decide and

610
00:27:07,470 --> 00:27:11,610
find<font color="#E5E5E5"> those cases where actually you</font>

611
00:27:09,750 --> 00:27:14,280
didn't<font color="#E5E5E5"> need the other 20 bits because</font>

612
00:27:11,610 --> 00:27:16,408
<font color="#E5E5E5">it's within range of the saver</font><font color="#CCCCCC"> 12</font><font color="#E5E5E5"> bits</font>

613
00:27:14,280 --> 00:27:19,770
offset and then delete the original

614
00:27:16,409 --> 00:27:22,620
<font color="#CCCCCC">enters the</font><font color="#E5E5E5"> first instruction and this is</font>

615
00:27:19,770 --> 00:27:26,120
<font color="#E5E5E5">I mean if you'd use that approach</font><font color="#CCCCCC"> you</font>

616
00:27:22,620 --> 00:27:30,689
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ensure that the Lincoln knows</font>

617
00:27:26,120 --> 00:27:33,360
that the link has<font color="#E5E5E5"> access to full</font><font color="#CCCCCC"> - every</font>

618
00:27:30,690 --> 00:27:34,770
week - every<font color="#CCCCCC"> fix-up or relocation in the</font>

619
00:27:33,360 --> 00:27:36,959
program which hopefully means every

620
00:27:34,770 --> 00:27:40,190
access to a<font color="#E5E5E5"> symbol and because all the</font>

621
00:27:36,960 --> 00:27:40,190
instructions could<font color="#CCCCCC"> be moved or changed</font>

622
00:27:45,190 --> 00:27:52,820
yes<font color="#E5E5E5"> okay</font>

623
00:27:48,980 --> 00:27:54,620
right and I think so supporting risk

624
00:27:52,820 --> 00:27:56,659
<font color="#CCCCCC">Phi's a bi</font><font color="#E5E5E5"> as I mentioned one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

625
00:27:54,620 --> 00:27:59,179
challenges is that<font color="#E5E5E5"> there are a lot</font><font color="#CCCCCC"> of</font>

626
00:27:56,660 --> 00:28:01,430
them<font color="#E5E5E5"> the helpful thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> they're</font>

627
00:27:59,180 --> 00:28:03,380
actually basically all very<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> and</font>

628
00:28:01,430 --> 00:28:06,650
<font color="#E5E5E5">that they are fairly simple</font>

629
00:28:03,380 --> 00:28:07,940
parameterizations of the supported

630
00:28:06,650 --> 00:28:09,559
floating point register register the

631
00:28:07,940 --> 00:28:12,680
length and the general<font color="#E5E5E5"> purpose register</font>

632
00:28:09,559 --> 00:28:14,690
length so<font color="#CCCCCC"> LLVM is actually</font><font color="#E5E5E5"> structured so</font>

633
00:28:12,680 --> 00:28:16,460
<font color="#CCCCCC">that a lot of</font><font color="#E5E5E5"> the a lot of</font>

634
00:28:14,690 --> 00:28:18,590
responsibility<font color="#E5E5E5"> for supporting the ABI is</font>

635
00:28:16,460 --> 00:28:20,090
done in the<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> so this is</font>

636
00:28:18,590 --> 00:28:21,490
<font color="#E5E5E5">something I've been</font><font color="#CCCCCC"> talking to some of</font>

637
00:28:20,090 --> 00:28:25,909
<font color="#E5E5E5">the people who've been porting rusts</font>

638
00:28:21,490 --> 00:28:29,059
about<font color="#E5E5E5"> as they they're also kind of have</font>

639
00:28:25,910 --> 00:28:36,770
the responsibility of capturing cases

640
00:28:29,059 --> 00:28:39,170
where you need to so effectively it is

641
00:28:36,770 --> 00:28:42,050
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> of say I have a a</font>

642
00:28:39,170 --> 00:28:43,580
function which takes a unsigned integer

643
00:28:42,050 --> 00:28:45,470
and a signed integer how do<font color="#E5E5E5"> I convert</font>

644
00:28:43,580 --> 00:28:48,919
<font color="#CCCCCC">that to LD</font><font color="#E5E5E5"> Mir which maintains those</font>

645
00:28:45,470 --> 00:28:50,929
semantics<font color="#E5E5E5"> and that's mostly done for us</font>

646
00:28:48,920 --> 00:28:53,990
in clang but this is work work which

647
00:28:50,929 --> 00:28:55,520
also<font color="#E5E5E5"> has to be repeated for for Julie</font>

648
00:28:53,990 --> 00:28:57,620
<font color="#E5E5E5">earth</font><font color="#CCCCCC"> or Swift and</font><font color="#E5E5E5"> rust</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> other</font>

649
00:28:55,520 --> 00:29:00,440
languages<font color="#E5E5E5"> so one thing I did with this</font>

650
00:28:57,620 --> 00:29:03,139
was as I've implanted a<font color="#E5E5E5"> Python library</font>

651
00:29:00,440 --> 00:29:04,940
which aims to be a I feel it<font color="#E5E5E5"> at risk the</font>

652
00:29:03,140 --> 00:29:06,440
risk<font color="#CCCCCC"> 5 calling convention I think</font>

653
00:29:04,940 --> 00:29:07,700
initially I called it the<font color="#E5E5E5"> calling</font>

654
00:29:06,440 --> 00:29:10,280
<font color="#E5E5E5">connection golden</font><font color="#CCCCCC"> mutt goal the model</font>

655
00:29:07,700 --> 00:29:13,010
it's now called<font color="#CCCCCC"> ABI cop</font><font color="#E5E5E5"> so this is a</font>

656
00:29:10,280 --> 00:29:15,950
sort<font color="#CCCCCC"> of tool which helps to test that</font>

657
00:29:13,010 --> 00:29:17,360
<font color="#E5E5E5">the API is conforming to at least my</font>

658
00:29:15,950 --> 00:29:19,640
interpretation of<font color="#E5E5E5"> the risk by their</font><font color="#CCCCCC"> BI</font>

659
00:29:17,360 --> 00:29:21,290
specifications<font color="#E5E5E5"> and there's more work to</font>

660
00:29:19,640 --> 00:29:25,160
<font color="#CCCCCC">be done there</font><font color="#E5E5E5"> in terms of randomized</font>

661
00:29:21,290 --> 00:29:27,129
testing so it does a fairly<font color="#E5E5E5"> naive have a</font>

662
00:29:25,160 --> 00:29:30,620
<font color="#CCCCCC">failing</font><font color="#E5E5E5"> naive approach of doing</font>

663
00:29:27,130 --> 00:29:33,730
randomized instantiations<font color="#CCCCCC"> of</font><font color="#E5E5E5"> function</font>

664
00:29:30,620 --> 00:29:36,229
pairs and then you can take take your

665
00:29:33,730 --> 00:29:37,880
<font color="#E5E5E5">take your caller compile</font><font color="#CCCCCC"> that with GCC</font>

666
00:29:36,230 --> 00:29:40,820
<font color="#E5E5E5">take your</font><font color="#CCCCCC"> colleague compile that</font><font color="#E5E5E5"> with</font>

667
00:29:37,880 --> 00:29:42,500
clang and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> hopefully they you get the</font>

668
00:29:40,820 --> 00:29:45,159
result that<font color="#E5E5E5"> you expect but there's</font>

669
00:29:42,500 --> 00:29:48,110
definitely more that can<font color="#E5E5E5"> be done</font><font color="#CCCCCC"> there</font>

670
00:29:45,160 --> 00:29:49,490
so<font color="#E5E5E5"> moving on to status and where we're</font>

671
00:29:48,110 --> 00:29:51,800
<font color="#E5E5E5">at I think</font><font color="#CCCCCC"> the first thing I'd like to</font>

672
00:29:49,490 --> 00:29:54,560
<font color="#CCCCCC">highlight is that</font><font color="#E5E5E5"> this started out as a</font>

673
00:29:51,800 --> 00:29:56,399
project<font color="#E5E5E5"> where I was the primary author</font>

674
00:29:54,560 --> 00:29:59,220
and

675
00:29:56,400 --> 00:30:00,840
it's it's expanded<font color="#CCCCCC"> overtime</font><font color="#E5E5E5"> now so we</font>

676
00:29:59,220 --> 00:30:02,520
<font color="#CCCCCC">have a point where you have multiple</font>

677
00:30:00,840 --> 00:30:04,550
external<font color="#E5E5E5"> contributors I'm very grateful</font>

678
00:30:02,520 --> 00:30:08,400
to<font color="#E5E5E5"> contributions from companies like</font>

679
00:30:04,550 --> 00:30:09,960
<font color="#E5E5E5">Qualcomm and because iam Andes</font><font color="#CCCCCC"> Tech and</font>

680
00:30:08,400 --> 00:30:12,390
others who supported<font color="#CCCCCC"> feature</font><font color="#E5E5E5"> they've</font>

681
00:30:09,960 --> 00:30:14,190
added<font color="#E5E5E5"> support features like while</font>

682
00:30:12,390 --> 00:30:14,610
working on the compressed instruction

683
00:30:14,190 --> 00:30:18,090
sets

684
00:30:14,610 --> 00:30:21,030
more recently<font color="#E5E5E5"> TLS</font><font color="#CCCCCC"> rememba</font><font color="#E5E5E5"> Kazem and a</font>

685
00:30:18,090 --> 00:30:24,000
whole series of<font color="#E5E5E5"> assembler fixes and</font>

686
00:30:21,030 --> 00:30:26,520
other things from<font color="#CCCCCC"> Andes tank and I think</font>

687
00:30:24,000 --> 00:30:29,640
we're starting<font color="#CCCCCC"> to see as the</font><font color="#E5E5E5"> LVN back</font>

688
00:30:26,520 --> 00:30:31,680
end nears nears the<font color="#E5E5E5"> point where you're</font>

689
00:30:29,640 --> 00:30:33,810
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to do things</font><font color="#CCCCCC"> like parva linux</font>

690
00:30:31,680 --> 00:30:34,890
<font color="#CCCCCC">kernel in</font><font color="#E5E5E5"> the next user space there's a</font>

691
00:30:33,810 --> 00:30:36,179
growing number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> who are</font>

692
00:30:34,890 --> 00:30:38,400
<font color="#E5E5E5">interested in starting a tribute</font>

693
00:30:36,180 --> 00:30:41,190
upstream<font color="#E5E5E5"> it's also been something I've</font>

694
00:30:38,400 --> 00:30:42,840
<font color="#E5E5E5">tried to encourage through giving</font>

695
00:30:41,190 --> 00:30:44,820
tutorials and a sort<font color="#CCCCCC"> of things I'll</font>

696
00:30:42,840 --> 00:30:47,639
mention<font color="#E5E5E5"> I'll give a link at the end of</font>

697
00:30:44,820 --> 00:30:49,889
the talk<font color="#CCCCCC"> I gave</font><font color="#E5E5E5"> a tutorial at the LVN</font>

698
00:30:47,640 --> 00:30:54,060
dev meeting at the end of last year

699
00:30:49,890 --> 00:30:55,860
which gives<font color="#E5E5E5"> a as a a introduction to</font>

700
00:30:54,060 --> 00:30:59,550
hacking on<font color="#E5E5E5"> LVM and hacking on the wrist</font>

701
00:30:55,860 --> 00:31:02,790
fight back end in particular so where

702
00:30:59,550 --> 00:31:04,440
we're at with<font color="#CCCCCC"> LVM as I mentioned there</font>

703
00:31:02,790 --> 00:31:06,270
<font color="#CCCCCC">are multiple companies who are</font><font color="#E5E5E5"> using it</font>

704
00:31:04,440 --> 00:31:07,920
internally for their first two bit

705
00:31:06,270 --> 00:31:11,330
firmware builds<font color="#E5E5E5"> but there are still a</font>

706
00:31:07,920 --> 00:31:14,280
few limitations so the TLS supports is

707
00:31:11,330 --> 00:31:15,689
<font color="#CCCCCC">in</font><font color="#E5E5E5"> room is in review</font><font color="#CCCCCC"> q and</font><font color="#E5E5E5"> will</font>

708
00:31:14,280 --> 00:31:18,149
<font color="#E5E5E5">hopefully soon be up streamed</font><font color="#CCCCCC"> and</font>

709
00:31:15,690 --> 00:31:21,170
thread-local storage and<font color="#E5E5E5"> things like</font>

710
00:31:18,150 --> 00:31:26,400
<font color="#E5E5E5">position independent code remains to be</font>

711
00:31:21,170 --> 00:31:28,590
implemented in<font color="#CCCCCC"> upstream and the so the</font>

712
00:31:26,400 --> 00:31:31,380
hard float<font color="#E5E5E5"> API is which VAP is that you</font>

713
00:31:28,590 --> 00:31:33,750
want<font color="#E5E5E5"> to use on Linux aren't implemented</font>

714
00:31:31,380 --> 00:31:37,680
yet<font color="#E5E5E5"> so main block for that</font><font color="#CCCCCC"> had been the</font>

715
00:31:33,750 --> 00:31:39,450
<font color="#E5E5E5">64-bit floating-point</font><font color="#CCCCCC"> koujun that I was</font>

716
00:31:37,680 --> 00:31:42,120
actually merged in<font color="#E5E5E5"> the last few days</font><font color="#CCCCCC"> so</font>

717
00:31:39,450 --> 00:31:44,190
and imminently now be pushing forward<font color="#CCCCCC"> on</font>

718
00:31:42,120 --> 00:31:47,699
and the hard flow<font color="#CCCCCC"> API</font><font color="#E5E5E5"> support which</font>

719
00:31:44,190 --> 00:31:51,840
people want to compile you know modern

720
00:31:47,700 --> 00:31:53,960
<font color="#CCCCCC">linux applications</font><font color="#E5E5E5"> there is a rust port</font>

721
00:31:51,840 --> 00:31:58,199
and an active community around that

722
00:31:53,960 --> 00:32:00,960
<font color="#E5E5E5">targeting the baseline RB 32 I so the</font>

723
00:31:58,200 --> 00:32:03,630
award<font color="#CCCCCC"> is h2 I</font><font color="#E5E5E5"> am I guess whatever the</font>

724
00:32:00,960 --> 00:32:06,750
next engines you want to add to<font color="#E5E5E5"> it so</font>

725
00:32:03,630 --> 00:32:08,220
that's unfair<font color="#E5E5E5"> now now that all the</font>

726
00:32:06,750 --> 00:32:09,570
<font color="#E5E5E5">64-bit stuff they need</font>

727
00:32:08,220 --> 00:32:14,909
<font color="#CCCCCC">upstream are now looking at porting</font>

728
00:32:09,570 --> 00:32:16,320
about<font color="#E5E5E5"> 64-bit as well</font><font color="#CCCCCC"> lld I should</font><font color="#E5E5E5"> have</font>

729
00:32:14,909 --> 00:32:19,289
<font color="#E5E5E5">mentioned also that's another thing</font>

730
00:32:16,320 --> 00:32:21,178
which I have<font color="#E5E5E5"> I have other contributed to</font>

731
00:32:19,289 --> 00:32:23,820
thank for so<font color="#CCCCCC"> am DS Tech did</font><font color="#E5E5E5"> some work on</font>

732
00:32:21,179 --> 00:32:27,570
adding<font color="#CCCCCC"> support to risk five to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> LVM</font>

733
00:32:23,820 --> 00:32:29,549
linker<font color="#E5E5E5"> and it's so it's there it works</font>

734
00:32:27,570 --> 00:32:30,809
<font color="#E5E5E5">it's somewhat early days so it doesn't</font>

735
00:32:29,549 --> 00:32:32,490
support<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the features that I</font>

736
00:32:30,809 --> 00:32:35,370
mentioned like<font color="#CCCCCC"> linker</font><font color="#E5E5E5"> relaxation yeah</font>

737
00:32:32,490 --> 00:32:37,650
that requires a bit<font color="#CCCCCC"> more design work but</font>

738
00:32:35,370 --> 00:32:40,559
all the basic relocation to<font color="#E5E5E5"> support it</font>

739
00:32:37,650 --> 00:32:44,730
and you can use<font color="#CCCCCC"> it if you want to but</font>

740
00:32:40,559 --> 00:32:48,360
you can just<font color="#E5E5E5"> use with new linker so it</font>

741
00:32:44,730 --> 00:32:51,570
will be moving forwards with work on<font color="#E5E5E5"> the</font>

742
00:32:48,360 --> 00:32:54,570
<font color="#CCCCCC">hard flow</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> is as probably priority</font>

743
00:32:51,570 --> 00:32:56,490
number<font color="#CCCCCC"> one right now other work which</font>

744
00:32:54,570 --> 00:32:58,730
has<font color="#CCCCCC"> been going</font><font color="#E5E5E5"> on is on the</font><font color="#CCCCCC"> wrist fight</font>

745
00:32:56,490 --> 00:33:01,320
vector extension<font color="#E5E5E5"> and so I won't go into</font>

746
00:32:58,730 --> 00:33:03,900
<font color="#E5E5E5">much detail</font><font color="#CCCCCC"> about this this has</font>

747
00:33:01,320 --> 00:33:06,240
basically<font color="#E5E5E5"> been led by Robin crook who's</font>

748
00:33:03,900 --> 00:33:08,039
a<font color="#E5E5E5"> student at tu Darmstadt if you've been</font>

749
00:33:06,240 --> 00:33:11,700
following the<font color="#CCCCCC"> wrist v vector extension</font>

750
00:33:08,039 --> 00:33:14,360
discussions<font color="#CCCCCC"> it's it's an it's an</font>

751
00:33:11,700 --> 00:33:17,429
interesting compiler target like arms

752
00:33:14,360 --> 00:33:20,490
variable like arms sve vector

753
00:33:17,429 --> 00:33:24,330
instruction set one of the basic design

754
00:33:20,490 --> 00:33:27,750
decisions is that<font color="#CCCCCC"> your vectors are a are</font>

755
00:33:24,330 --> 00:33:29,280
a<font color="#E5E5E5"> compile-time unknown length which is</font>

756
00:33:27,750 --> 00:33:31,260
<font color="#CCCCCC">Mike which is dependent</font><font color="#E5E5E5"> on the</font>

757
00:33:29,280 --> 00:33:32,668
<font color="#CCCCCC">microarchitecture and</font><font color="#E5E5E5"> so there's quite a</font>

758
00:33:31,260 --> 00:33:35,400
<font color="#CCCCCC">few interesting</font><font color="#E5E5E5"> challenges about how</font><font color="#CCCCCC"> to</font>

759
00:33:32,669 --> 00:33:38,370
<font color="#E5E5E5">support that and there's been actually</font>

760
00:33:35,400 --> 00:33:40,230
<font color="#E5E5E5">work from Robin and some of the other</font>

761
00:33:38,370 --> 00:33:43,199
people<font color="#CCCCCC"> working on vectorization LVM</font>

762
00:33:40,230 --> 00:33:45,270
<font color="#CCCCCC">working on how to support that</font><font color="#E5E5E5"> for for</font>

763
00:33:43,200 --> 00:33:47,100
<font color="#CCCCCC">wrists</font><font color="#E5E5E5"> 5s de and other architect and</font>

764
00:33:45,270 --> 00:33:52,080
other vector architectures which take a

765
00:33:47,100 --> 00:33:53,189
a similar<font color="#E5E5E5"> approach now there's I think</font>

766
00:33:52,080 --> 00:33:57,720
<font color="#CCCCCC">that's a talk later which we'll be</font>

767
00:33:53,190 --> 00:34:00,600
<font color="#E5E5E5">looking at comparing code code size on</font>

768
00:33:57,720 --> 00:34:03,179
<font color="#CCCCCC">wrists v</font><font color="#E5E5E5"> versus other architectures just</font>

769
00:34:00,600 --> 00:34:05,850
comparing<font color="#CCCCCC"> wrists v lv m</font><font color="#E5E5E5"> and clang</font><font color="#CCCCCC"> vs.</font>

770
00:34:03,179 --> 00:34:08,940
GCC<font color="#E5E5E5"> and there's more that can be done to</font>

771
00:34:05,850 --> 00:34:12,000
improve code compression first to meet

772
00:34:08,940 --> 00:34:16,139
GCC and<font color="#E5E5E5"> then hopefully</font><font color="#CCCCCC"> to to move beyond</font>

773
00:34:12,000 --> 00:34:18,869
that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I mentioned that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Select but</font>

774
00:34:16,139 --> 00:34:20,409
that targeting the compressed

775
00:34:18,869 --> 00:34:22,899
instruction set

776
00:34:20,409 --> 00:34:24,940
is<font color="#E5E5E5"> doesn't it but there's very little</font>

777
00:34:22,899 --> 00:34:27,250
interaction<font color="#E5E5E5"> with the with instruction</font>

778
00:34:24,940 --> 00:34:30,039
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> selection stage so it's it's</font>

779
00:34:27,250 --> 00:34:31,539
<font color="#E5E5E5">not</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> unaware of a fact for</font><font color="#CCCCCC"> your</font>

780
00:34:30,039 --> 00:34:34,119
<font color="#E5E5E5">generating</font><font color="#CCCCCC"> the present</font><font color="#E5E5E5"> attractions but</font>

781
00:34:31,539 --> 00:34:36,579
<font color="#E5E5E5">there's still not much not much for</font>

782
00:34:34,119 --> 00:34:38,139
feedback<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> that and there's</font>

783
00:34:36,579 --> 00:34:41,049
<font color="#E5E5E5">definitely more you can do</font>

784
00:34:38,139 --> 00:34:43,720
so specifically teaching<font color="#E5E5E5"> register</font>

785
00:34:41,049 --> 00:34:45,190
allocator<font color="#E5E5E5"> about about the</font>

786
00:34:43,719 --> 00:34:47,770
compressibility of instructions<font color="#CCCCCC"> there's</font>

787
00:34:45,190 --> 00:34:50,049
<font color="#E5E5E5">potential for benefit there so let's say</font>

788
00:34:47,770 --> 00:34:52,239
that<font color="#CCCCCC"> I have a series of instructions all</font>

789
00:34:50,049 --> 00:34:54,699
of which<font color="#E5E5E5"> use the same virtual register</font>

790
00:34:52,239 --> 00:34:56,500
so I'd know that<font color="#E5E5E5"> it's has a</font><font color="#CCCCCC"> but they</font>

791
00:34:54,699 --> 00:34:58,058
once<font color="#E5E5E5"> use the same value but it hasn't</font>

792
00:34:56,500 --> 00:35:00,640
<font color="#E5E5E5">yet gone through the register allocator</font>

793
00:34:58,059 --> 00:35:02,890
<font color="#E5E5E5">if the register allocator is able to</font>

794
00:35:00,640 --> 00:35:04,299
dynamically<font color="#CCCCCC"> weight the choice of the</font>

795
00:35:02,890 --> 00:35:06,038
registers it can make a more<font color="#E5E5E5"> sensible</font>

796
00:35:04,299 --> 00:35:08,170
choice because if you know<font color="#CCCCCC"> that one of</font>

797
00:35:06,039 --> 00:35:10,599
instructions<font color="#E5E5E5"> could never be compressed</font>

798
00:35:08,170 --> 00:35:11,980
<font color="#E5E5E5">anyway there's not much point in</font><font color="#CCCCCC"> using</font>

799
00:35:10,599 --> 00:35:14,020
one<font color="#CCCCCC"> of the registers which is</font>

800
00:35:11,980 --> 00:35:16,299
compressible<font color="#CCCCCC"> you'd be better</font><font color="#E5E5E5"> off saving</font>

801
00:35:14,020 --> 00:35:20,410
that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a case where you can actually</font>

802
00:35:16,299 --> 00:35:22,299
<font color="#E5E5E5">improve code size there's also I mean</font>

803
00:35:20,410 --> 00:35:26,170
one<font color="#E5E5E5"> thing we've</font><font color="#CCCCCC"> noticed comparing GCC</font>

804
00:35:22,299 --> 00:35:28,390
and clang is that GCC<font color="#E5E5E5"> or sorry clangs</font>

805
00:35:26,170 --> 00:35:30,819
<font color="#CCCCCC">ordering a basic block reordering</font><font color="#E5E5E5"> a</font>

806
00:35:28,390 --> 00:35:32,558
basic blocks can be quite<font color="#E5E5E5"> aggressive</font><font color="#CCCCCC"> and</font>

807
00:35:30,819 --> 00:35:36,970
<font color="#E5E5E5">so what it's trying to do is to ensure</font>

808
00:35:32,559 --> 00:35:41,079
<font color="#CCCCCC">that</font><font color="#E5E5E5"> based based on either profile data</font>

809
00:35:36,970 --> 00:35:45,520
or static estimations ensure that<font color="#E5E5E5"> V the</font>

810
00:35:41,079 --> 00:35:48,190
common case or the hot path<font color="#E5E5E5"> is is is</font>

811
00:35:45,520 --> 00:35:50,890
sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> linear in memory</font><font color="#E5E5E5"> which is which</font>

812
00:35:48,190 --> 00:35:52,839
<font color="#CCCCCC">is great for</font><font color="#E5E5E5"> you know for cash effects</font>

813
00:35:50,890 --> 00:35:54,490
and performance and so<font color="#E5E5E5"> on but if you're</font>

814
00:35:52,839 --> 00:35:55,990
trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> minimize code size that's not</font>

815
00:35:54,490 --> 00:35:58,479
always<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you want because</font><font color="#E5E5E5"> what it</font>

816
00:35:55,990 --> 00:36:00,609
means<font color="#E5E5E5"> that your branch</font><font color="#CCCCCC"> offset is tend to</font>

817
00:35:58,480 --> 00:36:01,930
be larger and so<font color="#E5E5E5"> you've tend to end up</font>

818
00:36:00,609 --> 00:36:04,630
<font color="#CCCCCC">not being</font><font color="#E5E5E5"> able to compress all your</font>

819
00:36:01,930 --> 00:36:06,879
branches<font color="#E5E5E5"> and so tweaking this or adding</font>

820
00:36:04,630 --> 00:36:10,270
ways of opting out that behavior is

821
00:36:06,880 --> 00:36:11,619
going<font color="#E5E5E5"> to be further explored I'm so I'm</font>

822
00:36:10,270 --> 00:36:13,240
particularly interested<font color="#E5E5E5"> in talking to</font>

823
00:36:11,619 --> 00:36:16,270
<font color="#CCCCCC">anybody</font><font color="#E5E5E5"> who's been working on different</font>

824
00:36:13,240 --> 00:36:19,660
<font color="#E5E5E5">language front ends for</font><font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> so I've</font><font color="#CCCCCC"> had</font>

825
00:36:16,270 --> 00:36:20,920
very Haskell<font color="#CCCCCC"> LVN back-end as well so I</font>

826
00:36:19,660 --> 00:36:22,420
know they would<font color="#CCCCCC"> have a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font>

827
00:36:20,920 --> 00:36:24,670
<font color="#E5E5E5">initial work but I think</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> been</font>

828
00:36:22,420 --> 00:36:27,700
much activity<font color="#E5E5E5"> there and so I think rust</font>

829
00:36:24,670 --> 00:36:29,410
has been most active<font color="#CCCCCC"> I haven't actually</font>

830
00:36:27,700 --> 00:36:32,410
heard anything from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Giulia or</font><font color="#E5E5E5"> Swiss</font>

831
00:36:29,410 --> 00:36:33,660
community<font color="#E5E5E5"> but if you know people that</font>

832
00:36:32,410 --> 00:36:36,569
community who are<font color="#E5E5E5"> interested</font>

833
00:36:33,660 --> 00:36:39,839
please<font color="#E5E5E5"> put them in touch it would also</font>

834
00:36:36,569 --> 00:36:42,900
be good<font color="#CCCCCC"> actually to work</font><font color="#E5E5E5"> together more</font>

835
00:36:39,839 --> 00:36:50,279
<font color="#E5E5E5">on the API lowering and validation</font>

836
00:36:42,900 --> 00:36:52,230
around that so as you know<font color="#CCCCCC"> RIS five has</font>

837
00:36:50,280 --> 00:36:53,910
a sort of set of standard instruction

838
00:36:52,230 --> 00:36:55,470
<font color="#E5E5E5">set extensions which defined right now</font>

839
00:36:53,910 --> 00:36:57,750
<font color="#E5E5E5">but there's also an ambition to extend</font>

840
00:36:55,470 --> 00:36:59,879
that<font color="#E5E5E5"> set</font><font color="#CCCCCC"> risk by vector extension was</font>

841
00:36:57,750 --> 00:37:02,700
one<font color="#CCCCCC"> example of this there's also</font><font color="#E5E5E5"> active</font>

842
00:36:59,880 --> 00:37:05,010
work on<font color="#E5E5E5"> defining new instructions bit</font>

843
00:37:02,700 --> 00:37:08,460
manipulation<font color="#CCCCCC"> and so I'm quite keen to</font>

844
00:37:05,010 --> 00:37:10,109
work with that working<font color="#CCCCCC"> group</font><font color="#E5E5E5"> to provide</font>

845
00:37:08,460 --> 00:37:11,220
support for the compiler<font color="#E5E5E5"> before its</font>

846
00:37:10,109 --> 00:37:13,259
standard<font color="#CCCCCC"> i before</font><font color="#E5E5E5"> it's actually</font>

847
00:37:11,220 --> 00:37:15,118
<font color="#E5E5E5">standardized in order to get feet in</font>

848
00:37:13,260 --> 00:37:16,760
order<font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> feedback in</font><font color="#CCCCCC"> terms of</font>

849
00:37:15,119 --> 00:37:20,130
how<font color="#E5E5E5"> difficult it is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> support</font>

850
00:37:16,760 --> 00:37:21,839
compilation to that<font color="#E5E5E5"> extension and you</font>

851
00:37:20,130 --> 00:37:23,039
know how you're getting statistics on

852
00:37:21,839 --> 00:37:25,170
how<font color="#E5E5E5"> often you can actually</font><font color="#CCCCCC"> select</font><font color="#E5E5E5"> these</font>

853
00:37:23,039 --> 00:37:26,940
instructions and so<font color="#E5E5E5"> hopefully we</font>

854
00:37:25,170 --> 00:37:27,750
certainly<font color="#E5E5E5"> move forward on in the next</font>

855
00:37:26,940 --> 00:37:29,730
<font color="#E5E5E5">couple of months</font>

856
00:37:27,750 --> 00:37:32,369
<font color="#CCCCCC">i've suggested that the it would be</font>

857
00:37:29,730 --> 00:37:34,349
<font color="#E5E5E5">worth the for the proposed extension</font><font color="#CCCCCC"> if</font>

858
00:37:32,369 --> 00:37:35,940
they could just<font color="#E5E5E5"> pick and encoding</font><font color="#CCCCCC"> unit</font>

859
00:37:34,349 --> 00:37:36,900
<font color="#E5E5E5">if</font><font color="#CCCCCC"> it's not final so at least</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> of</font>

860
00:37:35,940 --> 00:37:39,690
us who are<font color="#CCCCCC"> doing those sorts of</font>

861
00:37:36,900 --> 00:37:41,400
<font color="#CCCCCC">experiments can can</font><font color="#E5E5E5"> cross-check our</font>

862
00:37:39,690 --> 00:37:42,809
tooling<font color="#CCCCCC"> to ensure that you know the</font>

863
00:37:41,400 --> 00:37:48,119
<font color="#CCCCCC">assembler is working the same way about</font>

864
00:37:42,809 --> 00:37:49,859
<font color="#E5E5E5">sort of thing and there's more stuff</font>

865
00:37:48,119 --> 00:37:51,710
<font color="#CCCCCC">coming</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> five standards</font>

866
00:37:49,859 --> 00:37:55,259
<font color="#E5E5E5">has been talked</font><font color="#CCCCCC"> about supporting</font>

867
00:37:51,710 --> 00:37:56,880
<font color="#E5E5E5">floating-point registers in in general</font>

868
00:37:55,260 --> 00:38:00,000
<font color="#CCCCCC">in supporting floating-point</font>

869
00:37:56,880 --> 00:38:02,819
instructions<font color="#E5E5E5"> on general on values held</font>

870
00:38:00,000 --> 00:38:04,920
in general-purpose registers new<font color="#CCCCCC"> ad eyes</font>

871
00:38:02,819 --> 00:38:09,210
for embedded targets

872
00:38:04,920 --> 00:38:12,660
so<font color="#E5E5E5"> a</font><font color="#CCCCCC"> b</font><font color="#E5E5E5"> is where</font><font color="#CCCCCC"> long doom where long</font>

873
00:38:09,210 --> 00:38:15,480
double isn't 128 isn't<font color="#E5E5E5"> a 128-bit float</font>

874
00:38:12,660 --> 00:38:17,430
and other<font color="#E5E5E5"> changes and</font><font color="#CCCCCC"> this will of</font>

875
00:38:15,480 --> 00:38:21,359
<font color="#CCCCCC">course leads to continuing work in the</font>

876
00:38:17,430 --> 00:38:25,379
<font color="#E5E5E5">future and there's more</font><font color="#CCCCCC"> to do in terms</font>

877
00:38:21,359 --> 00:38:26,910
of support for<font color="#E5E5E5"> target independent</font><font color="#CCCCCC"> LVM</font>

878
00:38:25,380 --> 00:38:29,640
features that<font color="#CCCCCC"> we'd benefit from as I</font>

879
00:38:26,910 --> 00:38:31,609
mentioned code size and the<font color="#E5E5E5"> Machine</font>

880
00:38:29,640 --> 00:38:35,700
outline there is a very promising

881
00:38:31,609 --> 00:38:38,279
feature that's been pursued<font color="#E5E5E5"> more</font>

882
00:38:35,700 --> 00:38:40,558
recently with a arch 64 so faithfully

883
00:38:38,279 --> 00:38:43,319
this is the opposite<font color="#CCCCCC"> to in linings so if</font>

884
00:38:40,559 --> 00:38:44,819
<font color="#E5E5E5">in lining you see that a function</font><font color="#CCCCCC"> is</font>

885
00:38:43,319 --> 00:38:46,140
used and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> actually need to</font>

886
00:38:44,819 --> 00:38:46,920
<font color="#CCCCCC">have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> external function call you can</font>

887
00:38:46,140 --> 00:38:48,868
copy<font color="#CCCCCC"> into</font><font color="#E5E5E5"> your</font>

888
00:38:46,920 --> 00:38:51,210
function without<font color="#CCCCCC"> lining you looking you</font>

889
00:38:48,869 --> 00:38:52,349
find<font color="#E5E5E5"> common code sequences</font><font color="#CCCCCC"> and if</font>

890
00:38:51,210 --> 00:38:54,660
because<font color="#E5E5E5"> you're trying to optimize code</font>

891
00:38:52,349 --> 00:38:56,369
size he decide<font color="#CCCCCC"> oh well actually I</font><font color="#E5E5E5"> could</font>

892
00:38:54,660 --> 00:38:58,109
pull this code sequence out to a

893
00:38:56,369 --> 00:39:00,540
separate function<font color="#E5E5E5"> and it would be less</font>

894
00:38:58,109 --> 00:39:03,328
expensive<font color="#E5E5E5"> in code size just have a call</font>

895
00:39:00,540 --> 00:39:06,150
<font color="#E5E5E5">to it and so it's obviously not positive</font>

896
00:39:03,329 --> 00:39:07,710
<font color="#CCCCCC">for full performance</font><font color="#E5E5E5"> but useful</font><font color="#CCCCCC"> for</font>

897
00:39:06,150 --> 00:39:10,490
<font color="#E5E5E5">people who are really</font><font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to cram</font>

898
00:39:07,710 --> 00:39:13,010
their code into a small amount of<font color="#E5E5E5"> space</font>

899
00:39:10,490 --> 00:39:16,049
<font color="#E5E5E5">and we're actively</font><font color="#CCCCCC"> working on further</font>

900
00:39:13,010 --> 00:39:18,869
testing on more<font color="#E5E5E5"> real-world applications</font>

901
00:39:16,049 --> 00:39:20,549
<font color="#CCCCCC">I guess in the</font><font color="#E5E5E5"> last couple</font><font color="#CCCCCC"> of months</font>

902
00:39:18,869 --> 00:39:22,200
it's mostly<font color="#E5E5E5"> being people</font><font color="#CCCCCC"> who are using</font>

903
00:39:20,549 --> 00:39:24,780
<font color="#E5E5E5">it on</font><font color="#CCCCCC"> their own cone bait code bases and</font>

904
00:39:22,200 --> 00:39:26,970
they've been feeding<font color="#E5E5E5"> back up upstream</font>

905
00:39:24,780 --> 00:39:29,130
when things work or they don't<font color="#E5E5E5"> with</font>

906
00:39:26,970 --> 00:39:33,089
moving towards being<font color="#E5E5E5"> taking a more</font>

907
00:39:29,130 --> 00:39:35,970
structured<font color="#CCCCCC"> approach to - I guess</font>

908
00:39:33,089 --> 00:39:39,900
<font color="#E5E5E5">proactively testing on real-world</font>

909
00:39:35,970 --> 00:39:42,209
programs<font color="#E5E5E5"> and benchmarks and it's only on</font>

910
00:39:39,900 --> 00:39:44,520
the<font color="#CCCCCC"> phage two-bit side</font><font color="#E5E5E5"> zephyr free</font><font color="#CCCCCC"> our</font>

911
00:39:42,210 --> 00:39:49,680
<font color="#CCCCCC">tasks and moving towards linux and</font>

912
00:39:44,520 --> 00:39:51,630
<font color="#CCCCCC">freebsd</font><font color="#E5E5E5"> on the 64 bits and side and</font><font color="#CCCCCC"> i</font>

913
00:39:49,680 --> 00:39:53,910
guess a more<font color="#CCCCCC"> automated comparison to</font>

914
00:39:51,630 --> 00:39:55,500
other tool chains and<font color="#CCCCCC"> i guess</font><font color="#E5E5E5"> other</font>

915
00:39:53,910 --> 00:40:01,049
targets as well<font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of code size</font>

916
00:39:55,500 --> 00:40:02,520
like comparing risk fighters his arm so

917
00:40:01,049 --> 00:40:04,650
<font color="#CCCCCC">i guess i'm getting towards the end of</font>

918
00:40:02,520 --> 00:40:07,140
<font color="#E5E5E5">the talk</font><font color="#CCCCCC"> that is roughly</font><font color="#E5E5E5"> the end of it</font><font color="#CCCCCC"> i</font>

919
00:40:04,650 --> 00:40:10,049
<font color="#CCCCCC">just</font><font color="#E5E5E5"> say that</font><font color="#CCCCCC"> low risk is hiring we have</font>

920
00:40:07,140 --> 00:40:13,618
about<font color="#E5E5E5"> five positions open we're ramping</font>

921
00:40:10,049 --> 00:40:16,520
up a lot more work<font color="#E5E5E5"> - in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> deliver</font>

922
00:40:13,619 --> 00:40:18,869
<font color="#E5E5E5">a free</font><font color="#CCCCCC"> open-source hardware and software</font>

923
00:40:16,520 --> 00:40:22,200
so if you if you're interested have a

924
00:40:18,869 --> 00:40:24,180
look and<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to me or Louis or Philip</font>

925
00:40:22,200 --> 00:40:26,759
afterwards if you<font color="#E5E5E5"> want to get started</font>

926
00:40:24,180 --> 00:40:29,640
hacking on<font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> I put together this</font>

927
00:40:26,760 --> 00:40:31,200
tutorial at the dev<font color="#E5E5E5"> meet</font><font color="#CCCCCC"> ldm dev meeting</font>

928
00:40:29,640 --> 00:40:33,509
last year<font color="#CCCCCC"> which a lot of</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> found</font>

929
00:40:31,200 --> 00:40:36,509
helpful<font color="#E5E5E5"> and if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> problems with it</font>

930
00:40:33,510 --> 00:40:38,840
<font color="#E5E5E5">let me know and at that point I'll see</font>

931
00:40:36,510 --> 00:40:48,690
if there any<font color="#CCCCCC"> questions thank you</font>

932
00:40:38,840 --> 00:40:48,690
[Applause]

933
00:40:55,270 --> 00:41:03,829
correct<font color="#E5E5E5"> yes oh yes yeah thank you</font><font color="#CCCCCC"> for</font>

934
00:41:01,279 --> 00:41:06,680
you<font color="#CCCCCC"> I had a question so the</font><font color="#E5E5E5"> question was</font>

935
00:41:03,829 --> 00:41:15,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so actually move on to question men</font>

936
00:41:06,680 --> 00:41:17,720
are a<font color="#E5E5E5"> people whole thing and so going to</font>

937
00:41:15,740 --> 00:41:19,399
<font color="#E5E5E5">write a front end</font><font color="#CCCCCC"> for LOV M for a</font>

938
00:41:17,720 --> 00:41:21,500
different language<font color="#E5E5E5"> how much work do I</font>

939
00:41:19,400 --> 00:41:26,329
have<font color="#E5E5E5"> to put into supporting all the</font>

940
00:41:21,500 --> 00:41:28,250
different variants<font color="#E5E5E5"> of risk okay</font><font color="#CCCCCC"> so the</font>

941
00:41:26,329 --> 00:41:30,950
<font color="#CCCCCC">question so the question was</font><font color="#E5E5E5"> given that</font>

942
00:41:28,250 --> 00:41:32,990
<font color="#CCCCCC">LV Mir</font><font color="#E5E5E5"> isn't actually fully target</font>

943
00:41:30,950 --> 00:41:36,049
independent<font color="#E5E5E5"> how much work is there in</font>

944
00:41:32,990 --> 00:41:38,660
order<font color="#CCCCCC"> to support a new front end in</font>

945
00:41:36,049 --> 00:41:39,920
order to support the<font color="#CCCCCC"> API</font><font color="#E5E5E5"> so it's</font>

946
00:41:38,660 --> 00:41:41,720
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we talked</font><font color="#E5E5E5"> about in the</font>

947
00:41:39,920 --> 00:41:43,760
<font color="#CCCCCC">LEM community back and forth</font><font color="#E5E5E5"> for a</font><font color="#CCCCCC"> while</font>

948
00:41:41,720 --> 00:41:45,740
<font color="#E5E5E5">and because that it's it seems</font>

949
00:41:43,760 --> 00:41:48,079
unpleasant that people need to<font color="#CCCCCC"> do this</font>

950
00:41:45,740 --> 00:41:50,299
for each for each<font color="#E5E5E5"> new</font><font color="#CCCCCC"> front-end language</font>

951
00:41:48,079 --> 00:41:52,369
and potentially get it wrong<font color="#E5E5E5"> and so what</font>

952
00:41:50,299 --> 00:41:54,349
you basically mean so it depends on<font color="#E5E5E5"> the</font>

953
00:41:52,369 --> 00:41:56,420
<font color="#CCCCCC">ABI</font><font color="#E5E5E5"> that you're that you're targeting</font><font color="#CCCCCC"> so</font>

954
00:41:54,349 --> 00:42:00,020
in the in the case of risk<font color="#CCCCCC"> v you</font>

955
00:41:56,420 --> 00:42:02,059
actually do need to understand<font color="#E5E5E5"> for your</font>

956
00:42:00,020 --> 00:42:03,319
given your function<font color="#E5E5E5"> signature you</font>

957
00:42:02,059 --> 00:42:05,359
actually do need to go through<font color="#CCCCCC"> and count</font>

958
00:42:03,319 --> 00:42:07,009
registers and determine whether this

959
00:42:05,359 --> 00:42:09,828
value<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be passed on the stack</font>

960
00:42:07,010 --> 00:42:11,900
or<font color="#E5E5E5"> not and because it affects whether</font>

961
00:42:09,829 --> 00:42:13,490
you need to<font color="#CCCCCC"> add the sign</font><font color="#E5E5E5"> extension or</font>

962
00:42:11,900 --> 00:42:16,849
<font color="#CCCCCC">zero extension annotations and things</font>

963
00:42:13,490 --> 00:42:18,589
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so there is</font><font color="#E5E5E5"> I mean it's hard</font>

964
00:42:16,849 --> 00:42:20,270
<font color="#E5E5E5">to quantify how much work there</font><font color="#CCCCCC"> is in</font>

965
00:42:18,589 --> 00:42:22,308
that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> guess writing something not</font><font color="#CCCCCC"> that</font>

966
00:42:20,270 --> 00:42:24,829
hard<font color="#E5E5E5"> testing it and ensuring that it</font>

967
00:42:22,309 --> 00:42:28,670
works<font color="#E5E5E5"> more work and I hope that that's</font>

968
00:42:24,829 --> 00:42:30,619
an area where more<font color="#E5E5E5"> of us who are</font><font color="#CCCCCC"> working</font>

969
00:42:28,670 --> 00:42:32,180
on<font color="#E5E5E5"> that can collaborate</font><font color="#CCCCCC"> because for the</font>

970
00:42:30,619 --> 00:42:34,279
testing problem<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> the same</font>

971
00:42:32,180 --> 00:42:36,799
one approach is<font color="#E5E5E5"> the approach I mentioned</font>

972
00:42:34,279 --> 00:42:38,690
of and doing separate compilation<font color="#E5E5E5"> in</font>

973
00:42:36,799 --> 00:42:41,230
compiling and the caller and callee

974
00:42:38,690 --> 00:42:44,119
<font color="#E5E5E5">under different compilers or perhaps</font>

975
00:42:41,230 --> 00:42:45,260
extending the<font color="#E5E5E5"> avi avi cop tool so</font><font color="#CCCCCC"> that</font>

976
00:42:44,119 --> 00:42:47,839
it does a<font color="#E5E5E5"> very simple form</font><font color="#CCCCCC"> of</font>

977
00:42:45,260 --> 00:42:51,559
<font color="#CCCCCC">cogeneration</font><font color="#E5E5E5"> in order to provide I</font>

978
00:42:47,839 --> 00:42:52,720
suppose<font color="#E5E5E5"> more of a even more</font><font color="#CCCCCC"> of a golden</font>

979
00:42:51,559 --> 00:42:54,310
model right<font color="#CCCCCC"> now it just</font><font color="#E5E5E5"> spit</font>

980
00:42:52,720 --> 00:42:56,200
outside<font color="#E5E5E5"> sort of text description of what</font>

981
00:42:54,310 --> 00:42:58,000
you're expecting but<font color="#CCCCCC"> I'd be interested</font>

982
00:42:56,200 --> 00:43:18,069
in<font color="#E5E5E5"> talking more for anybody looking at</font>

983
00:42:58,000 --> 00:43:18,940
<font color="#CCCCCC">doing that anyone</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> so typically</font><font color="#E5E5E5"> if a</font>

984
00:43:18,070 --> 00:43:21,340
room

985
00:43:18,940 --> 00:43:22,990
they've standardized in<font color="#CCCCCC"> ion</font><font color="#E5E5E5"> LVM</font><font color="#CCCCCC"> and</font>

986
00:43:21,340 --> 00:43:25,090
<font color="#CCCCCC">clang for whatever reason throughout the</font>

987
00:43:22,990 --> 00:43:27,490
<font color="#E5E5E5">company they have tool chain teams who</font>

988
00:43:25,090 --> 00:43:33,090
<font color="#E5E5E5">will support that and so it's mostly</font>

989
00:43:27,490 --> 00:43:33,089
stems from that<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> very much</font>

