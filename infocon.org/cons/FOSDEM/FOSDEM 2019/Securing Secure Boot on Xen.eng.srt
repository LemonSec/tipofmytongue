1
00:00:04,700 --> 00:00:16,049
hi man my name<font color="#E5E5E5"> is</font><font color="#CCCCCC"> Russell</font><font color="#E5E5E5"> Agarwal</font><font color="#CCCCCC"> I work</font>

2
00:00:12,570 --> 00:00:17,369
for<font color="#CCCCCC"> Citrix on</font><font color="#E5E5E5"> Zen and Zen sir and I'm</font>

3
00:00:16,049 --> 00:00:30,180
going<font color="#E5E5E5"> to be talking about implementing</font>

4
00:00:17,369 --> 00:00:32,308
secure<font color="#CCCCCC"> B's there</font><font color="#E5E5E5"> is no audio so I'm</font>

5
00:00:30,180 --> 00:00:36,390
going to<font color="#E5E5E5"> be talking about secure boot on</font>

6
00:00:32,308 --> 00:00:38,930
Zen so I'll briefly go<font color="#E5E5E5"> into some</font>

7
00:00:36,390 --> 00:00:42,239
background<font color="#CCCCCC"> about it and why it's useful</font>

8
00:00:38,930 --> 00:00:45,899
so secure<font color="#CCCCCC"> boot</font><font color="#E5E5E5"> is basically a way of</font>

9
00:00:42,239 --> 00:00:48,360
<font color="#E5E5E5">preventing malware from running at boot</font>

10
00:00:45,899 --> 00:00:52,350
so<font color="#E5E5E5"> the worst kind</font><font color="#CCCCCC"> of the worst thing</font>

11
00:00:48,360 --> 00:00:55,260
that can happen is malware<font color="#CCCCCC"> sort of</font>

12
00:00:52,350 --> 00:00:58,920
<font color="#CCCCCC">affects</font><font color="#E5E5E5"> the bootloader or operating</font>

13
00:00:55,260 --> 00:01:00,599
system<font color="#E5E5E5"> kernel image and once it's got to</font>

14
00:00:58,920 --> 00:01:03,180
that<font color="#E5E5E5"> point you can basically</font><font color="#CCCCCC"> in the</font>

15
00:01:00,600 --> 00:01:06,630
<font color="#E5E5E5">system I mean this could</font><font color="#CCCCCC"> happen from</font>

16
00:01:03,180 --> 00:01:08,009
like a rogue update or<font color="#CCCCCC"> something so</font>

17
00:01:06,630 --> 00:01:11,699
there<font color="#E5E5E5"> are a number of ways that</font><font color="#CCCCCC"> it could</font>

18
00:01:08,009 --> 00:01:15,030
happen<font color="#E5E5E5"> but one way of preventing it is</font>

19
00:01:11,700 --> 00:01:18,630
to use secure boot<font color="#E5E5E5"> so it's the firmware</font>

20
00:01:15,030 --> 00:01:22,039
basically has a way of trust<font color="#E5E5E5"> working out</font>

21
00:01:18,630 --> 00:01:24,630
where the image is trusted or not and

22
00:01:22,039 --> 00:01:28,590
preventing<font color="#E5E5E5"> you from booting untrusted</font>

23
00:01:24,630 --> 00:01:32,098
images so this works well<font color="#E5E5E5"> if you've</font><font color="#CCCCCC"> got</font>

24
00:01:28,590 --> 00:01:34,560
real hardware and but if you've<font color="#CCCCCC"> got a VM</font>

25
00:01:32,099 --> 00:01:37,530
<font color="#E5E5E5">in the cloud for example like running</font>

26
00:01:34,560 --> 00:01:40,619
<font color="#E5E5E5">Xen unfortunately it doesn't support</font>

27
00:01:37,530 --> 00:01:42,890
<font color="#CCCCCC">security at the moment so what</font><font color="#E5E5E5"> can you</font>

28
00:01:40,619 --> 00:01:46,560
do<font color="#CCCCCC"> about it</font>

29
00:01:42,890 --> 00:01:48,360
so<font color="#E5E5E5"> just on some background secure boots</font>

30
00:01:46,560 --> 00:01:51,390
is actually part of the<font color="#E5E5E5"> UEFI</font>

31
00:01:48,360 --> 00:01:55,470
specification<font color="#E5E5E5"> just added in version 2.3</font>

32
00:01:51,390 --> 00:01:57,420
that one and this<font color="#E5E5E5"> is basically a</font>

33
00:01:55,470 --> 00:01:59,729
replacement for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bios which</font><font color="#E5E5E5"> the firm</font>

34
00:01:57,420 --> 00:02:03,289
<font color="#CCCCCC">eight sort</font><font color="#E5E5E5"> of starts the operating</font>

35
00:01:59,729 --> 00:02:06,000
system and provide some services<font color="#CCCCCC"> to it</font>

36
00:02:03,289 --> 00:02:08,580
so the<font color="#E5E5E5"> first thing</font><font color="#CCCCCC"> to notice</font><font color="#E5E5E5"> is that</font>

37
00:02:06,000 --> 00:02:11,068
<font color="#E5E5E5">well if</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> running if we want to use</font>

38
00:02:08,580 --> 00:02:14,040
secure boot then we need to be using<font color="#CCCCCC"> uef</font>

39
00:02:11,068 --> 00:02:15,719
our guests<font color="#E5E5E5"> luckily is then does support</font>

40
00:02:14,040 --> 00:02:16,989
<font color="#E5E5E5">you if our guests are</font><font color="#CCCCCC"> ready so there's</font>

41
00:02:15,719 --> 00:02:19,570
<font color="#E5E5E5">nothing for us to do</font>

42
00:02:16,990 --> 00:02:23,580
it makes use of<font color="#CCCCCC"> ivmf which</font><font color="#E5E5E5"> is kind of</font>

43
00:02:19,570 --> 00:02:28,150
<font color="#E5E5E5">like the build of the tiyanak</font><font color="#CCCCCC"> or</font>

44
00:02:23,580 --> 00:02:32,190
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> ufr implementation tailored</font>

45
00:02:28,150 --> 00:02:36,880
for virtual machines not<font color="#E5E5E5"> the way that</font>

46
00:02:32,190 --> 00:02:39,579
UEFI starts<font color="#E5E5E5"> kernel or</font><font color="#CCCCCC"> bootloader</font><font color="#E5E5E5"> is kind</font>

47
00:02:36,880 --> 00:02:42,220
<font color="#CCCCCC">of</font><font color="#E5E5E5"> different from if you used to</font><font color="#CCCCCC"> buy</font><font color="#E5E5E5"> us</font>

48
00:02:39,580 --> 00:02:45,430
<font color="#E5E5E5">a super-earth bios basically it chooses</font>

49
00:02:42,220 --> 00:02:48,570
a disk<font color="#E5E5E5"> to boot and starts executing</font><font color="#CCCCCC"> from</font>

50
00:02:45,430 --> 00:02:50,770
the MBR<font color="#E5E5E5"> at the beginning of the disk</font>

51
00:02:48,570 --> 00:02:54,459
with UEFI

52
00:02:50,770 --> 00:02:57,850
the<font color="#CCCCCC"> firmware knows how to understand GPT</font>

53
00:02:54,460 --> 00:03:00,910
partition tables and fat file systems

54
00:02:57,850 --> 00:03:03,730
and so it's configured<font color="#CCCCCC"> to boot a</font>

55
00:03:00,910 --> 00:03:06,940
particular file of a particular file

56
00:03:03,730 --> 00:03:08,760
system<font color="#E5E5E5"> and this is sort of quite a lot</font>

57
00:03:06,940 --> 00:03:13,030
like<font color="#E5E5E5"> how an operating</font><font color="#CCCCCC"> system would</font><font color="#E5E5E5"> start</font>

58
00:03:08,760 --> 00:03:15,190
some executable<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it knows</font><font color="#E5E5E5"> about now</font>

59
00:03:13,030 --> 00:03:18,760
when you turn<font color="#CCCCCC"> on secure boot there's an</font>

60
00:03:15,190 --> 00:03:21,190
extra<font color="#E5E5E5"> step basically before executing</font>

61
00:03:18,760 --> 00:03:26,019
<font color="#E5E5E5">that file it verifies whether the file</font>

62
00:03:21,190 --> 00:03:31,690
is trusted<font color="#E5E5E5"> and can be executed so how</font>

63
00:03:26,020 --> 00:03:33,400
does this work<font color="#E5E5E5"> so</font><font color="#CCCCCC"> hardware has nvram</font>

64
00:03:31,690 --> 00:03:37,560
which is kind of like<font color="#E5E5E5"> non-volatile</font>

65
00:03:33,400 --> 00:03:40,600
storage<font color="#CCCCCC"> separate</font><font color="#E5E5E5"> from the main disk and</font>

66
00:03:37,560 --> 00:03:44,980
these store<font color="#E5E5E5"> UEFI variables which are</font>

67
00:03:40,600 --> 00:03:47,950
kind of<font color="#E5E5E5"> like key value pairs and some of</font>

68
00:03:44,980 --> 00:03:50,200
them are<font color="#CCCCCC"> contained certificates there</font>

69
00:03:47,950 --> 00:03:53,200
are a number<font color="#E5E5E5"> of them and I won't go into</font>

70
00:03:50,200 --> 00:03:57,010
<font color="#CCCCCC">the details of what they mean</font><font color="#E5E5E5"> but</font>

71
00:03:53,200 --> 00:03:58,500
essentially the<font color="#E5E5E5"> bootloader or kernel</font>

72
00:03:57,010 --> 00:04:02,049
that you executing needs<font color="#E5E5E5"> have been</font>

73
00:03:58,500 --> 00:04:06,850
<font color="#E5E5E5">signed by one of these so-called trusted</font>

74
00:04:02,050 --> 00:04:10,240
certificates<font color="#E5E5E5"> and therefore if the kernel</font>

75
00:04:06,850 --> 00:04:12,100
is replaced with<font color="#E5E5E5"> something else the</font>

76
00:04:10,240 --> 00:04:16,450
firmware<font color="#E5E5E5"> will refuse to start it because</font>

77
00:04:12,100 --> 00:04:19,029
<font color="#E5E5E5">it hasn't been signed properly the</font>

78
00:04:16,450 --> 00:04:21,640
certificate databases themselves<font color="#CCCCCC"> can be</font>

79
00:04:19,029 --> 00:04:23,229
populated<font color="#E5E5E5"> in a number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> ways one of</font>

80
00:04:21,640 --> 00:04:27,669
<font color="#CCCCCC">them which is</font><font color="#E5E5E5"> probably the most common</font>

81
00:04:23,230 --> 00:04:29,680
is<font color="#E5E5E5"> just that the factory installed the</font>

82
00:04:27,669 --> 00:04:35,198
certificates are loaded into the<font color="#CCCCCC"> NVRAM</font>

83
00:04:29,680 --> 00:04:37,000
and it just works<font color="#E5E5E5"> because the laptop</font><font color="#CCCCCC"> of</font>

84
00:04:35,199 --> 00:04:39,280
<font color="#CCCCCC">whatever comes</font><font color="#E5E5E5"> preloaded with an</font>

85
00:04:37,000 --> 00:04:40,780
<font color="#E5E5E5">operating system and so if you're</font>

86
00:04:39,280 --> 00:04:44,198
running<font color="#CCCCCC"> Windows it'll come with</font><font color="#E5E5E5"> the</font>

87
00:04:40,780 --> 00:04:47,138
Microsoft certificates<font color="#E5E5E5"> and if you want</font>

88
00:04:44,199 --> 00:04:51,120
you can update the<font color="#E5E5E5"> certificates in the</font>

89
00:04:47,139 --> 00:04:56,909
database<font color="#E5E5E5"> so</font><font color="#CCCCCC"> these databases are called</font>

90
00:04:51,120 --> 00:05:00,759
authenticated variables and they require

91
00:04:56,909 --> 00:05:04,419
<font color="#CCCCCC">to update it you make a sort of</font><font color="#E5E5E5"> runtime</font>

92
00:05:00,759 --> 00:05:07,419
call called set variable but this update

93
00:05:04,419 --> 00:05:09,849
needs to be signed by specifically one

94
00:05:07,419 --> 00:05:15,609
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> certificates that's already in</font>

95
00:05:09,849 --> 00:05:19,800
the database<font color="#E5E5E5"> and so more wire can't sort</font>

96
00:05:15,610 --> 00:05:22,330
of<font color="#E5E5E5"> click it's it can't trick itself into</font>

97
00:05:19,800 --> 00:05:24,639
being trusted by<font color="#E5E5E5"> inserting its own</font>

98
00:05:22,330 --> 00:05:27,039
certificates in the database unless<font color="#E5E5E5"> it</font>

99
00:05:24,639 --> 00:05:30,009
<font color="#CCCCCC">concerned the update in which case it</font>

100
00:05:27,039 --> 00:05:32,050
could sign the bootloader<font color="#E5E5E5"> anyway the</font>

101
00:05:30,009 --> 00:05:36,580
third way is typically<font color="#E5E5E5"> there's like a</font>

102
00:05:32,050 --> 00:05:38,800
<font color="#E5E5E5">platform</font><font color="#CCCCCC"> specific reset method</font><font color="#E5E5E5"> so on</font>

103
00:05:36,580 --> 00:05:40,750
real hardware<font color="#CCCCCC"> you would</font><font color="#E5E5E5"> say press f2</font>

104
00:05:38,800 --> 00:05:44,729
during boot and with physical<font color="#CCCCCC"> access</font>

105
00:05:40,750 --> 00:05:48,639
reset the certificates<font color="#CCCCCC"> too or clear them</font>

106
00:05:44,729 --> 00:05:51,099
<font color="#E5E5E5">for a VM</font><font color="#CCCCCC"> typically the</font><font color="#E5E5E5"> way I implemented</font>

107
00:05:48,639 --> 00:05:54,599
<font color="#E5E5E5">it on</font><font color="#CCCCCC"> Xen was just then the hypervisor</font>

108
00:05:51,099 --> 00:05:57,250
<font color="#E5E5E5">or specifically dom0 there'd be some</font>

109
00:05:54,599 --> 00:05:59,139
button that you can press or<font color="#CCCCCC"> command to</font>

110
00:05:57,250 --> 00:06:03,639
run and<font color="#E5E5E5"> you can clear the database for a</font>

111
00:05:59,139 --> 00:06:06,669
VM so if you look at how this<font color="#CCCCCC"> is</font>

112
00:06:03,639 --> 00:06:11,740
implemented<font color="#E5E5E5"> on real Hardware kind of the</font>

113
00:06:06,669 --> 00:06:14,680
most important thing is that the code<font color="#E5E5E5"> to</font>

114
00:06:11,740 --> 00:06:17,639
updates<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> all the set variable code</font>

115
00:06:14,680 --> 00:06:19,839
which<font color="#E5E5E5"> handle and firmware which handles</font>

116
00:06:17,639 --> 00:06:24,279
updating those certificate databases

117
00:06:19,839 --> 00:06:28,870
needs to be<font color="#CCCCCC"> protected from</font><font color="#E5E5E5"> being sort of</font>

118
00:06:24,279 --> 00:06:30,610
interfered with<font color="#E5E5E5"> because if malware could</font>

119
00:06:28,870 --> 00:06:33,520
interfere<font color="#E5E5E5"> with this code and some are</font>

120
00:06:30,610 --> 00:06:37,899
circumvent the checks<font color="#E5E5E5"> then it would be</font>

121
00:06:33,520 --> 00:06:40,180
possible<font color="#CCCCCC"> to just insert your</font><font color="#E5E5E5"> own</font>

122
00:06:37,899 --> 00:06:41,180
certificates or if it could write

123
00:06:40,180 --> 00:06:46,130
directly<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

124
00:06:41,180 --> 00:06:49,310
then it's a problem<font color="#E5E5E5"> so there needs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

125
00:06:46,130 --> 00:06:51,860
aware of protecting the code that's

126
00:06:49,310 --> 00:06:55,240
running<font color="#E5E5E5"> but it's kind of just yeah it</font>

127
00:06:51,860 --> 00:06:57,830
<font color="#E5E5E5">runs on</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> CPU that's executing</font>

128
00:06:55,240 --> 00:07:00,590
<font color="#E5E5E5">the other code which you</font><font color="#CCCCCC"> know it could</font>

129
00:06:57,830 --> 00:07:02,750
be some<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of rogue</font><font color="#E5E5E5"> device driver</font>

130
00:07:00,590 --> 00:07:05,900
that's<font color="#E5E5E5"> running as part of the operating</font>

131
00:07:02,750 --> 00:07:08,210
<font color="#CCCCCC">system</font><font color="#E5E5E5"> so it needs to be a way of sort</font>

132
00:07:05,900 --> 00:07:12,979
<font color="#E5E5E5">of defining an extra level of privilege</font>

133
00:07:08,210 --> 00:07:15,080
<font color="#E5E5E5">or execution context and on x86</font>

134
00:07:12,979 --> 00:07:17,330
<font color="#E5E5E5">processors this already exists in the</font>

135
00:07:15,080 --> 00:07:22,669
form of<font color="#E5E5E5"> something called system</font>

136
00:07:17,330 --> 00:07:25,460
management mode or<font color="#CCCCCC"> SMM for short so this</font>

137
00:07:22,669 --> 00:07:29,990
is kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> something that's you can jump</font>

138
00:07:25,460 --> 00:07:32,690
into<font color="#E5E5E5"> and execute code from a special</font>

139
00:07:29,990 --> 00:07:37,550
section<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Ram called SM Ram which is</font>

140
00:07:32,690 --> 00:07:40,190
hidden<font color="#E5E5E5"> from the rest of the system so</font>

141
00:07:37,550 --> 00:07:43,310
the sort of<font color="#E5E5E5"> security sensitive part of</font>

142
00:07:40,190 --> 00:07:46,610
<font color="#E5E5E5">the firmware is placed in that sm ram</font>

143
00:07:43,310 --> 00:07:49,340
and the<font color="#CCCCCC"> NVRAM is configured</font><font color="#E5E5E5"> in a way</font>

144
00:07:46,610 --> 00:07:54,229
<font color="#E5E5E5">that it can only</font><font color="#CCCCCC"> be written</font><font color="#E5E5E5"> from within</font>

145
00:07:49,340 --> 00:07:58,729
<font color="#E5E5E5">an</font><font color="#CCCCCC"> SM M</font><font color="#E5E5E5"> so making a variable updates</font>

146
00:07:54,229 --> 00:08:00,229
then requires<font color="#E5E5E5"> doing an SMI and then</font>

147
00:07:58,729 --> 00:08:03,440
there<font color="#E5E5E5"> are traps into this system</font>

148
00:08:00,229 --> 00:08:07,360
<font color="#E5E5E5">management mode and in theory it's</font>

149
00:08:03,440 --> 00:08:11,949
secure at<font color="#E5E5E5"> least in theory</font>

150
00:08:07,360 --> 00:08:15,409
so<font color="#CCCCCC"> KVM has implemented secure boot</font>

151
00:08:11,949 --> 00:08:18,199
the<font color="#CCCCCC"> way the</font><font color="#E5E5E5"> approach that they took kind</font>

152
00:08:15,409 --> 00:08:23,320
of it virtualizes what real<font color="#CCCCCC"> Hardware</font>

153
00:08:18,199 --> 00:08:27,770
does so qmu emulates some flash memory

154
00:08:23,320 --> 00:08:32,150
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> envy ram and</font><font color="#E5E5E5"> KVM emulates</font>

155
00:08:27,770 --> 00:08:36,049
system management mode for guests<font color="#E5E5E5"> and it</font>

156
00:08:32,150 --> 00:08:42,319
kind of implements or reuses parts of

157
00:08:36,049 --> 00:08:45,399
the IANA core firmware for the<font color="#E5E5E5"> SMI</font>

158
00:08:42,320 --> 00:08:49,880
handling and the<font color="#E5E5E5"> way that it jumps into</font>

159
00:08:45,399 --> 00:08:54,200
<font color="#CCCCCC">the sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> SMM parts of the firmware</font>

160
00:08:49,880 --> 00:08:54,840
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so there's a interesting talk by</font>

161
00:08:54,200 --> 00:08:58,110
Apollo

162
00:08:54,840 --> 00:09:00,120
about implementing this<font color="#E5E5E5"> and KVM sir</font>

163
00:08:58,110 --> 00:09:04,350
I won't get<font color="#E5E5E5"> into too many details cuz</font>

164
00:09:00,120 --> 00:09:06,150
I'll probably get them wrong<font color="#CCCCCC"> so how</font>

165
00:09:04,350 --> 00:09:10,950
<font color="#E5E5E5">should this be implemented on then on</font>

166
00:09:06,150 --> 00:09:13,890
<font color="#E5E5E5">Zen so they're kind of lots of</font>

167
00:09:10,950 --> 00:09:15,720
vulnerabilities against<font color="#CCCCCC"> SMM mode because</font>

168
00:09:13,890 --> 00:09:18,210
it's kind<font color="#CCCCCC"> of tricky the way that</font><font color="#E5E5E5"> it's</font>

169
00:09:15,720 --> 00:09:20,730
implemented<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> they're lots of ways</font>

170
00:09:18,210 --> 00:09:25,290
of attacking it yeah<font color="#CCCCCC"> all</font><font color="#E5E5E5"> sorts of cache</font>

171
00:09:20,730 --> 00:09:28,230
attacks and the previous talk I

172
00:09:25,290 --> 00:09:31,860
mentioned about implementing<font color="#E5E5E5"> it on</font><font color="#CCCCCC"> KVM</font>

173
00:09:28,230 --> 00:09:33,960
<font color="#E5E5E5">also details some of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> attacks in</font>

174
00:09:31,860 --> 00:09:37,560
additions and does not have<font color="#CCCCCC"> any support</font>

175
00:09:33,960 --> 00:09:40,800
<font color="#E5E5E5">for</font><font color="#CCCCCC"> emulating SMM so implementing</font><font color="#E5E5E5"> it</font>

176
00:09:37,560 --> 00:09:43,670
would require well could introduce more

177
00:09:40,800 --> 00:09:48,779
bugs<font color="#E5E5E5"> at least until they I and out</font>

178
00:09:43,670 --> 00:09:51,000
<font color="#CCCCCC">thirdly the using emulated flash kind of</font>

179
00:09:48,779 --> 00:09:53,610
limits the flexibility<font color="#E5E5E5"> of how variables</font>

180
00:09:51,000 --> 00:10:00,650
are stored<font color="#CCCCCC"> because the code that writes</font>

181
00:09:53,610 --> 00:10:03,120
the rights<font color="#E5E5E5"> of the flash is stored in its</font>

182
00:10:00,650 --> 00:10:08,069
<font color="#CCCCCC">well it's part</font><font color="#E5E5E5"> of the firme which runs</font>

183
00:10:03,120 --> 00:10:11,010
inside<font color="#E5E5E5"> the guest so this is kind of</font><font color="#CCCCCC"> okay</font>

184
00:10:08,070 --> 00:10:13,380
for<font color="#E5E5E5"> regular hardware but from</font><font color="#CCCCCC"> VMs we</font>

185
00:10:11,010 --> 00:10:16,620
want to be more flexible because you

186
00:10:13,380 --> 00:10:20,520
want to<font color="#E5E5E5"> be able to import vm's export</font><font color="#CCCCCC"> VM</font>

187
00:10:16,620 --> 00:10:21,930
<font color="#CCCCCC">migrate them from two different hosts so</font>

188
00:10:20,520 --> 00:10:25,400
it'd<font color="#E5E5E5"> be</font><font color="#CCCCCC"> useful if you could have</font>

189
00:10:21,930 --> 00:10:25,400
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was a bit more flexible</font>

190
00:10:25,520 --> 00:10:34,220
so with<font color="#E5E5E5"> virtualization there are kind of</font>

191
00:10:29,130 --> 00:10:36,630
already<font color="#E5E5E5"> two distinct privilege levels or</font>

192
00:10:34,220 --> 00:10:39,030
execution<font color="#CCCCCC"> context</font><font color="#E5E5E5"> you know broadly</font>

193
00:10:36,630 --> 00:10:44,510
speaking the<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> hypervisor</font>

194
00:10:39,030 --> 00:10:49,530
<font color="#E5E5E5">so using</font><font color="#CCCCCC"> SMM is but not really</font><font color="#E5E5E5"> needed to</font>

195
00:10:44,510 --> 00:10:53,520
<font color="#E5E5E5">create this boundary or separation so</font>

196
00:10:49,530 --> 00:10:56,420
what we<font color="#E5E5E5"> propose is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run a demon in</font>

197
00:10:53,520 --> 00:10:59,339
<font color="#CCCCCC">dom0 which what</font><font color="#E5E5E5"> was then would be</font><font color="#CCCCCC"> dom0</font>

198
00:10:56,420 --> 00:11:02,339
<font color="#E5E5E5">essentially part</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> hypervisor</font><font color="#CCCCCC"> that</font>

199
00:10:59,339 --> 00:11:07,890
implements the variable services outside

200
00:11:02,339 --> 00:11:11,730
<font color="#CCCCCC">of</font><font color="#E5E5E5"> outside of the guest itself and then</font>

201
00:11:07,890 --> 00:11:14,550
add a new module to ovm F which

202
00:11:11,730 --> 00:11:17,790
implements<font color="#E5E5E5"> the</font><font color="#CCCCCC"> variable</font><font color="#E5E5E5"> services by</font>

203
00:11:14,550 --> 00:11:19,529
essentially proxying them to the demon

204
00:11:17,790 --> 00:11:22,439
that's<font color="#E5E5E5"> running in dom0</font>

205
00:11:19,529 --> 00:11:25,640
so they're<font color="#E5E5E5"> about</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> five different</font>

206
00:11:22,440 --> 00:11:28,680
variable services that it does this for

207
00:11:25,640 --> 00:11:31,620
so this means<font color="#E5E5E5"> that the guest does not</font>

208
00:11:28,680 --> 00:11:34,800
have<font color="#CCCCCC"> direct access</font><font color="#E5E5E5"> to the code so it</font>

209
00:11:31,620 --> 00:11:38,310
doesn't<font color="#E5E5E5"> need to make use of the special</font>

210
00:11:34,800 --> 00:11:41,189
<font color="#E5E5E5">SM Ram it doesn't have</font><font color="#CCCCCC"> direct as to the</font>

211
00:11:38,310 --> 00:11:43,589
access to the<font color="#E5E5E5"> storage so that</font><font color="#CCCCCC"> isn't</font>

212
00:11:41,190 --> 00:11:46,950
<font color="#CCCCCC">anything specifically needed</font><font color="#E5E5E5"> for the</font>

213
00:11:43,589 --> 00:11:49,140
flash<font color="#E5E5E5"> emulation and it means that the</font>

214
00:11:46,950 --> 00:11:52,019
variable storage can easily easily be

215
00:11:49,140 --> 00:11:55,170
abstracted into<font color="#E5E5E5"> different backends so</font>

216
00:11:52,019 --> 00:11:58,500
you could use an SQLite database or

217
00:11:55,170 --> 00:12:01,649
<font color="#CCCCCC">zappy database or</font><font color="#E5E5E5"> just flat files</font><font color="#CCCCCC"> kind</font>

218
00:11:58,500 --> 00:12:05,640
<font color="#E5E5E5">of whatever you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use to get the</font>

219
00:12:01,649 --> 00:12:08,730
situation<font color="#E5E5E5"> done</font><font color="#CCCCCC"> so I'll just talk</font><font color="#E5E5E5"> about</font>

220
00:12:05,640 --> 00:12:14,069
how this works<font color="#CCCCCC"> in a little</font><font color="#E5E5E5"> bit more</font>

221
00:12:08,730 --> 00:12:17,480
detail with an example<font color="#E5E5E5"> so let's suppose</font>

222
00:12:14,070 --> 00:12:21,630
<font color="#E5E5E5">that operating system</font><font color="#CCCCCC"> wants to make a</font>

223
00:12:17,480 --> 00:12:24,990
update to a one of the certificate

224
00:12:21,630 --> 00:12:27,959
databases by adding a new certificate<font color="#E5E5E5"> so</font>

225
00:12:24,990 --> 00:12:32,399
it would do this by<font color="#CCCCCC"> calling the set</font>

226
00:12:27,959 --> 00:12:35,640
variable call which is a<font color="#E5E5E5"> runtime service</font>

227
00:12:32,399 --> 00:12:38,310
it's sort of a bit<font color="#CCCCCC"> like a system call to</font>

228
00:12:35,640 --> 00:12:43,500
the firmware<font color="#E5E5E5"> or an sort of indirect</font>

229
00:12:38,310 --> 00:12:47,579
function<font color="#E5E5E5"> call</font><font color="#CCCCCC"> and it would send</font><font color="#E5E5E5"> the new</font>

230
00:12:43,500 --> 00:12:50,970
data and sort<font color="#CCCCCC"> of assigned authentication</font>

231
00:12:47,579 --> 00:12:52,859
descriptor which is needs to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> signed</font>

232
00:12:50,970 --> 00:12:56,399
<font color="#E5E5E5">by one of the existing certificates in</font>

233
00:12:52,860 --> 00:12:59,790
<font color="#E5E5E5">the database so this goes</font><font color="#CCCCCC"> into the</font><font color="#E5E5E5"> proxy</font>

234
00:12:56,399 --> 00:13:03,750
module in ivmf which we<font color="#CCCCCC"> write called</font>

235
00:12:59,790 --> 00:13:07,589
<font color="#E5E5E5">which we</font><font color="#CCCCCC"> call Zen variable and it finds</font>

236
00:13:03,750 --> 00:13:10,050
<font color="#E5E5E5">the set variable handler there and so</font>

237
00:13:07,589 --> 00:13:14,390
<font color="#E5E5E5">that basically has some memory which had</font>

238
00:13:10,050 --> 00:13:17,510
set aside<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's serializes the</font>

239
00:13:14,390 --> 00:13:20,970
function called parameters<font color="#E5E5E5"> into this</font>

240
00:13:17,510 --> 00:13:22,319
<font color="#E5E5E5">separate memory and then makes an i/o</font>

241
00:13:20,970 --> 00:13:25,050
port right

242
00:13:22,320 --> 00:13:26,970
and to a well-known<font color="#E5E5E5"> port number with the</font>

243
00:13:25,050 --> 00:13:30,060
address<font color="#E5E5E5"> of that memory</font>

244
00:13:26,970 --> 00:13:34,650
this causes the<font color="#E5E5E5"> demon in</font><font color="#CCCCCC"> Don's</font><font color="#E5E5E5"> area to</font>

245
00:13:30,060 --> 00:13:37,949
wake up which we called<font color="#CCCCCC"> Vasco D and it</font>

246
00:13:34,650 --> 00:13:42,000
so so it handles<font color="#CCCCCC"> the IO</font><font color="#E5E5E5"> port right from</font>

247
00:13:37,950 --> 00:13:46,320
the<font color="#CCCCCC"> guest that's basically</font><font color="#E5E5E5"> unser</font>

248
00:13:42,000 --> 00:13:48,990
realises the the function call that's or

249
00:13:46,320 --> 00:13:53,730
<font color="#E5E5E5">it Maps the</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the guest</font><font color="#E5E5E5"> uncie</font>

250
00:13:48,990 --> 00:13:55,530
<font color="#E5E5E5">realizes the contents of it and works</font>

251
00:13:53,730 --> 00:13:58,890
out which command to<font color="#E5E5E5"> run in this case</font>

252
00:13:55,530 --> 00:14:01,260
it's the set variable<font color="#CCCCCC"> 1 so it calls the</font>

253
00:13:58,890 --> 00:14:05,490
state<font color="#E5E5E5"> variable function and this then</font>

254
00:14:01,260 --> 00:14:09,330
proceeds with<font color="#CCCCCC"> the regular behavior of</font>

255
00:14:05,490 --> 00:14:12,690
state variable and all the various

256
00:14:09,330 --> 00:14:14,790
authentication<font color="#E5E5E5"> checks and if it's a</font>

257
00:14:12,690 --> 00:14:17,640
successful call which in<font color="#E5E5E5"> this case let's</font>

258
00:14:14,790 --> 00:14:21,180
<font color="#CCCCCC">say it is then it stores it in the zappy</font>

259
00:14:17,640 --> 00:14:23,610
database which could be anywhere for

260
00:14:21,180 --> 00:14:27,959
example it could<font color="#E5E5E5"> be on a another host</font>

261
00:14:23,610 --> 00:14:30,990
even once this has happened<font color="#CCCCCC"> the response</font>

262
00:14:27,960 --> 00:14:34,680
is then<font color="#E5E5E5"> written back into the memory</font><font color="#CCCCCC"> map</font>

263
00:14:30,990 --> 00:14:38,400
buffer and so it<font color="#E5E5E5"> BEF our success just a</font>

264
00:14:34,680 --> 00:14:40,859
simple status code for<font color="#E5E5E5"> this that returns</font>

265
00:14:38,400 --> 00:14:43,800
from the<font color="#E5E5E5"> i/o port right which then</font>

266
00:14:40,860 --> 00:14:48,420
causes the<font color="#CCCCCC"> guest to continue executing</font>

267
00:14:43,800 --> 00:14:52,829
and<font color="#CCCCCC"> Xen variable module basically</font><font color="#E5E5E5"> uncie</font>

268
00:14:48,420 --> 00:14:55,069
realises the uncie<font color="#CCCCCC"> realizes the response</font>

269
00:14:52,830 --> 00:14:59,550
and returns<font color="#E5E5E5"> back to the operating system</font>

270
00:14:55,070 --> 00:15:02,610
<font color="#CCCCCC">so there's kind of a clear separation</font>

271
00:14:59,550 --> 00:15:05,250
<font color="#E5E5E5">between what happens in the half of oz'</font>

272
00:15:02,610 --> 00:15:07,920
and what happens in the guest which

273
00:15:05,250 --> 00:15:10,580
makes<font color="#E5E5E5"> it quite easy</font><font color="#CCCCCC"> to analyze from</font><font color="#E5E5E5"> a</font>

274
00:15:07,920 --> 00:15:10,579
security perspective

275
00:15:10,700 --> 00:15:16,170
<font color="#CCCCCC">so just to</font><font color="#E5E5E5"> yeah go for that so we wrote</font>

276
00:15:14,580 --> 00:15:19,110
a<font color="#E5E5E5"> demon called fast or</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> which</font>

277
00:15:16,170 --> 00:15:20,910
implements this<font color="#CCCCCC"> and at the moment</font>

278
00:15:19,110 --> 00:15:23,700
<font color="#CCCCCC">there's a single</font><font color="#E5E5E5"> back-end which is the</font>

279
00:15:20,910 --> 00:15:26,069
zappy database which is used on

280
00:15:23,700 --> 00:15:27,780
<font color="#E5E5E5">XenServer but it's kind of written in a</font>

281
00:15:26,070 --> 00:15:34,020
<font color="#CCCCCC">way</font><font color="#E5E5E5"> that makes it easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use other</font>

282
00:15:27,780 --> 00:15:35,400
backends<font color="#E5E5E5"> and then there's a ov EMF</font>

283
00:15:34,020 --> 00:15:39,020
module called<font color="#CCCCCC"> Zen</font>

284
00:15:35,400 --> 00:15:42,120
which implements this sort of<font color="#CCCCCC"> proxy and</font>

285
00:15:39,020 --> 00:15:45,120
<font color="#CCCCCC">but we've got</font><font color="#E5E5E5"> it working on Zen at the</font>

286
00:15:42,120 --> 00:15:47,910
moment and so you can implement secure

287
00:15:45,120 --> 00:15:50,940
it built and tested with both Linux<font color="#E5E5E5"> and</font>

288
00:15:47,910 --> 00:15:53,610
Windows guests<font color="#CCCCCC"> I believe it could be</font>

289
00:15:50,940 --> 00:15:56,460
<font color="#E5E5E5">used with</font><font color="#CCCCCC"> KVM without too much</font>

290
00:15:53,610 --> 00:16:00,110
difficulty<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to the fact that I mean</font>

291
00:15:56,460 --> 00:16:03,630
nothing in it is rarely<font color="#CCCCCC"> is then specific</font>

292
00:16:00,110 --> 00:16:07,080
so this could<font color="#CCCCCC"> be a different approach</font>

293
00:16:03,630 --> 00:16:10,680
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> mmm it's also not</font><font color="#CCCCCC"> really a platform</font>

294
00:16:07,080 --> 00:16:13,830
specific implementation so<font color="#CCCCCC"> SMM is kind</font>

295
00:16:10,680 --> 00:16:14,750
<font color="#E5E5E5">of tied to the x86 platform</font><font color="#CCCCCC"> as far as I</font>

296
00:16:13,830 --> 00:16:17,610
understand

297
00:16:14,750 --> 00:16:20,010
<font color="#CCCCCC">whereas</font><font color="#E5E5E5"> this okay it uses an i/o port</font>

298
00:16:17,610 --> 00:16:26,310
right but that the same sort<font color="#CCCCCC"> of approach</font>

299
00:16:20,010 --> 00:16:30,780
should<font color="#CCCCCC"> be used on any platform so I've</font>

300
00:16:26,310 --> 00:16:32,400
got a demo video<font color="#E5E5E5"> which I didn't want to</font>

301
00:16:30,780 --> 00:16:36,300
do it<font color="#E5E5E5"> live since it seemed a bit risky</font>

302
00:16:32,400 --> 00:16:39,420
<font color="#E5E5E5">but so what I'm going to do here is</font>

303
00:16:36,300 --> 00:16:44,880
start<font color="#E5E5E5"> a VM this is running on</font><font color="#CCCCCC"> XenServer</font>

304
00:16:39,420 --> 00:16:47,579
<font color="#E5E5E5">and it's booting up and you</font><font color="#CCCCCC"> EFR and at</font>

305
00:16:44,880 --> 00:16:50,540
the bottom<font color="#E5E5E5"> writers they console.log for</font>

306
00:16:47,580 --> 00:16:53,910
fast<font color="#E5E5E5"> OD which is essentially logging the</font>

307
00:16:50,540 --> 00:16:56,250
runtime service<font color="#CCCCCC"> request that vast</font><font color="#E5E5E5"> OD is</font>

308
00:16:53,910 --> 00:16:58,350
handling on behalf of the<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> so you</font>

309
00:16:56,250 --> 00:17:02,160
can see various get and set variable

310
00:16:58,350 --> 00:17:05,660
<font color="#E5E5E5">commands</font><font color="#CCCCCC"> I'm just going to check that</font>

311
00:17:02,160 --> 00:17:10,920
the kernel reports<font color="#E5E5E5"> that it has been</font>

312
00:17:05,660 --> 00:17:12,839
booted<font color="#E5E5E5"> securely so Linux reports that</font>

313
00:17:10,920 --> 00:17:17,730
secure boot is<font color="#CCCCCC"> enabled I think it's a</font>

314
00:17:12,839 --> 00:17:19,589
bit small to<font color="#CCCCCC"> see the back bit the video</font>

315
00:17:17,730 --> 00:17:24,810
is online<font color="#E5E5E5"> if you want to look at it</font>

316
00:17:19,589 --> 00:17:28,379
afterwards<font color="#E5E5E5"> so what I'm going</font><font color="#CCCCCC"> to try here</font>

317
00:17:24,810 --> 00:17:32,070
is modifying the<font color="#CCCCCC"> bootloader what's the</font>

318
00:17:28,380 --> 00:17:35,400
firmware<font color="#E5E5E5"> execute and in a way that would</font>

319
00:17:32,070 --> 00:17:37,919
<font color="#CCCCCC">not ordinarily cause it to what it</font>

320
00:17:35,400 --> 00:17:40,500
should still boot afterwards but because

321
00:17:37,920 --> 00:17:42,690
the signature is different it's going to

322
00:17:40,500 --> 00:17:46,770
well the firmware should refuse to boot

323
00:17:42,690 --> 00:17:50,179
so<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> just written</font><font color="#CCCCCC"> FOSDEM</font><font color="#E5E5E5"> 2019 to</font>

324
00:17:46,770 --> 00:17:52,470
the very first string in the program

325
00:17:50,179 --> 00:17:59,160
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the vm's</font>

326
00:17:52,470 --> 00:18:04,020
then restarted and if all goes well<font color="#E5E5E5"> the</font>

327
00:17:59,160 --> 00:18:06,420
firmware<font color="#E5E5E5"> will stop and not beat the</font>

328
00:18:04,020 --> 00:18:08,400
operating system<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a trivial</font>

329
00:18:06,420 --> 00:18:12,360
example<font color="#CCCCCC"> but it kind of</font><font color="#E5E5E5"> shows what</font>

330
00:18:08,400 --> 00:18:15,960
yeah if<font color="#E5E5E5"> Norway tried to somehow patch</font>

331
00:18:12,360 --> 00:18:19,169
the kernel and<font color="#CCCCCC"> it's not very clear but</font>

332
00:18:15,960 --> 00:18:23,160
<font color="#E5E5E5">that's the UVF our way of showing that</font>

333
00:18:19,170 --> 00:18:25,980
<font color="#CCCCCC">it didn't be which is not exactly</font><font color="#E5E5E5"> the</font>

334
00:18:23,160 --> 00:18:28,200
greatest user experience but it's

335
00:18:25,980 --> 00:18:30,330
possible<font color="#E5E5E5"> to then run the command</font>

336
00:18:28,200 --> 00:18:32,270
manually or execute the bootloader

337
00:18:30,330 --> 00:18:35,300
manually and<font color="#CCCCCC"> you can see it says</font>

338
00:18:32,270 --> 00:18:41,429
<font color="#E5E5E5">security violation which means that a</font>

339
00:18:35,300 --> 00:18:43,550
secure boot<font color="#E5E5E5"> is doing its job so that</font>

340
00:18:41,429 --> 00:18:46,830
<font color="#E5E5E5">just</font><font color="#CCCCCC"> leaves</font><font color="#E5E5E5"> when will it be available</font>

341
00:18:43,550 --> 00:18:50,490
<font color="#E5E5E5">unfortunately it's not yet been publicly</font>

342
00:18:46,830 --> 00:18:52,949
released<font color="#E5E5E5"> and so we intend</font><font color="#CCCCCC"> to release it</font>

343
00:18:50,490 --> 00:18:55,200
<font color="#E5E5E5">shortly and it'll be announced</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

344
00:18:52,950 --> 00:18:58,679
Zen mailing list<font color="#CCCCCC"> so if you're interested</font>

345
00:18:55,200 --> 00:19:00,929
please<font color="#E5E5E5"> look out</font><font color="#CCCCCC"> for it there and</font><font color="#E5E5E5"> that's</font>

346
00:18:58,679 --> 00:19:03,440
<font color="#E5E5E5">the end of</font><font color="#CCCCCC"> what I've</font><font color="#E5E5E5"> got to say</font><font color="#CCCCCC"> are</font>

347
00:19:00,929 --> 00:19:03,440
there<font color="#CCCCCC"> any questions</font>

348
00:19:18,340 --> 00:19:22,779
the question was how does<font color="#E5E5E5"> it</font><font color="#CCCCCC"> relate</font><font color="#E5E5E5"> to</font>

349
00:19:20,409 --> 00:19:26,710
<font color="#CCCCCC">chemo and</font><font color="#E5E5E5"> how does it</font><font color="#CCCCCC"> work with emu</font><font color="#E5E5E5"> and</font>

350
00:19:22,779 --> 00:19:29,710
<font color="#CCCCCC">stub domain so at</font><font color="#E5E5E5"> least as we've</font>

351
00:19:26,710 --> 00:19:32,769
implemented it it's a separate demon

352
00:19:29,710 --> 00:19:33,279
that's completely separate<font color="#CCCCCC"> 4qe from</font>

353
00:19:32,769 --> 00:19:37,600
<font color="#CCCCCC">Kimmi</font>

354
00:19:33,279 --> 00:19:42,010
so then has support for they call irx

355
00:19:37,600 --> 00:19:46,090
servers which and you can have them in

356
00:19:42,010 --> 00:19:49,330
separate programs essentially so it's

357
00:19:46,090 --> 00:19:53,110
kind of not related at all<font color="#E5E5E5"> and if Q</font>

358
00:19:49,330 --> 00:19:55,750
<font color="#CCCCCC">isn't a stub domain then this demon</font>

359
00:19:53,110 --> 00:20:02,158
could be anywhere else including<font color="#CCCCCC"> in a</font>

360
00:19:55,750 --> 00:20:02,159
stub domain as well yes

361
00:20:07,090 --> 00:20:12,300
yes<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> question was have working</font>

362
00:20:10,540 --> 00:20:15,690
code for the certificate and

363
00:20:12,300 --> 00:20:15,690
authentication<font color="#E5E5E5"> stuff</font>

364
00:20:16,270 --> 00:20:44,050
the answers yes<font color="#E5E5E5"> so the demo</font><font color="#CCCCCC"> that I</font>

365
00:20:19,300 --> 00:20:56,430
<font color="#E5E5E5">showed was kind of all all working</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I</font>

366
00:20:44,050 --> 00:21:00,190
<font color="#E5E5E5">can just repeat what</font><font color="#CCCCCC"> she</font><font color="#E5E5E5"> said yeah yeah</font>

367
00:20:56,430 --> 00:21:01,750
<font color="#CCCCCC">yeah that's implemented so I</font><font color="#E5E5E5"> didn't</font>

368
00:21:00,190 --> 00:21:05,730
<font color="#E5E5E5">didn't have a demo of</font><font color="#CCCCCC"> that because it's</font>

369
00:21:01,750 --> 00:21:05,730
I mean not really<font color="#E5E5E5"> much to demo</font>

370
00:21:11,310 --> 00:21:20,940
you mean the implementing time<font color="#CCCCCC"> I mean</font>

371
00:21:18,180 --> 00:21:24,180
it's it's kind of a few thousand<font color="#E5E5E5"> lines I</font>

372
00:21:20,940 --> 00:21:27,020
don't<font color="#E5E5E5"> think it's not super intense</font><font color="#CCCCCC"> to</font>

373
00:21:24,180 --> 00:21:29,310
<font color="#E5E5E5">write</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of also developed a test</font>

374
00:21:27,020 --> 00:21:33,120
<font color="#E5E5E5">fairly extensive test suite</font><font color="#CCCCCC"> for it</font>

375
00:21:29,310 --> 00:21:39,149
because it<font color="#E5E5E5"> is quite complicated yeah</font>

376
00:21:33,120 --> 00:21:40,860
yeah yeah yeah yeah<font color="#CCCCCC"> so I mean</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font>

377
00:21:39,150 --> 00:21:43,410
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the disadvantage of this</font>

378
00:21:40,860 --> 00:21:44,790
approach is<font color="#CCCCCC"> that it has to duplicate</font>

379
00:21:43,410 --> 00:21:49,890
some<font color="#CCCCCC"> of the code that's</font><font color="#E5E5E5"> already been</font>

380
00:21:44,790 --> 00:21:52,170
implemented<font color="#E5E5E5"> in ivmf</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> mean it's not</font>

381
00:21:49,890 --> 00:22:01,130
it's a few thousand lines of C code so

382
00:21:52,170 --> 00:22:01,130
it's not yeah

383
00:22:17,080 --> 00:22:23,889
well I mean it<font color="#E5E5E5"> it Maps the memory but</font>

384
00:22:19,539 --> 00:22:25,809
then copies it out of the it copies it

385
00:22:23,890 --> 00:22:30,460
out of the<font color="#E5E5E5"> memory that it's not before</font>

386
00:22:25,809 --> 00:22:33,010
<font color="#E5E5E5">it uses it</font><font color="#CCCCCC"> so I don't know what you mean</font>

387
00:22:30,460 --> 00:22:35,970
<font color="#E5E5E5">about how how else would it get it if it</font>

388
00:22:33,010 --> 00:22:35,970
didn't<font color="#CCCCCC"> matter yes ma'am</font>

389
00:23:10,580 --> 00:23:20,210
so<font color="#CCCCCC"> Kristen was basically</font><font color="#E5E5E5"> house sick the</font>

390
00:23:17,450 --> 00:23:22,880
question is how<font color="#CCCCCC"> is the security of a</font>

391
00:23:20,210 --> 00:23:25,880
study handled because it's running<font color="#CCCCCC"> in</font>

392
00:23:22,880 --> 00:23:31,820
<font color="#CCCCCC">Dawn's area so it's kind of an extra</font>

393
00:23:25,880 --> 00:23:33,950
attack surface<font color="#CCCCCC"> so at least for how we've</font>

394
00:23:31,820 --> 00:23:37,629
implemented it on<font color="#E5E5E5"> XenServer specifically</font>

395
00:23:33,950 --> 00:23:40,280
it runs kind of sort of it with<font color="#E5E5E5"> no</font>

396
00:23:37,630 --> 00:23:44,720
<font color="#E5E5E5">privileges in a sort of container</font>

397
00:23:40,280 --> 00:23:48,110
environment and so even if you could

398
00:23:44,720 --> 00:23:51,350
escape into<font color="#E5E5E5"> dom0 should well it should</font>

399
00:23:48,110 --> 00:23:53,540
be contained<font color="#E5E5E5"> yeah and you can't really</font>

400
00:23:51,350 --> 00:24:04,370
escape<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of that extra Jail kind</font><font color="#E5E5E5"> of</font>

401
00:23:53,540 --> 00:24:06,530
thing it's<font color="#CCCCCC"> Kristin at the back yes that</font>

402
00:24:04,370 --> 00:24:09,469
would be so<font color="#CCCCCC"> the Kristin was can you</font><font color="#E5E5E5"> run</font>

403
00:24:06,530 --> 00:24:11,690
the<font color="#CCCCCC"> Dom's</font><font color="#E5E5E5"> aribert in a</font><font color="#CCCCCC"> stub</font><font color="#E5E5E5"> domain so</font>

404
00:24:09,470 --> 00:24:15,080
<font color="#CCCCCC">that would be the answers yes that would</font>

405
00:24:11,690 --> 00:24:17,690
<font color="#E5E5E5">be another approach</font><font color="#CCCCCC"> to reduce what</font>

406
00:24:15,080 --> 00:24:22,549
removing any potential security risk of

407
00:24:17,690 --> 00:24:31,460
running<font color="#E5E5E5"> it so yeah either within a jail</font>

408
00:24:22,549 --> 00:24:33,830
or<font color="#E5E5E5"> cut some kind of stub domain it's a</font>

409
00:24:31,460 --> 00:24:37,250
<font color="#CCCCCC">separate innocent is there one bastardy</font>

410
00:24:33,830 --> 00:24:39,678
for every domain the answers yes

411
00:24:37,250 --> 00:24:41,870
it's<font color="#CCCCCC"> the separate instance kind</font><font color="#E5E5E5"> of like</font>

412
00:24:39,679 --> 00:24:46,870
the way you<font color="#E5E5E5"> get a separate team you for</font>

413
00:24:41,870 --> 00:24:48,709
each domain<font color="#CCCCCC"> so times up you can find me</font>

414
00:24:46,870 --> 00:24:52,600
afterwards if<font color="#CCCCCC"> you want to ask</font><font color="#E5E5E5"> any other</font>

415
00:24:48,710 --> 00:24:52,600
<font color="#CCCCCC">questions thank</font><font color="#E5E5E5"> you</font>

416
00:24:53,140 --> 00:24:55,200
you

