1
00:00:05,250 --> 00:00:10,260
Magnus is still<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> first room</font><font color="#CCCCCC"> but</font>

2
00:00:08,850 --> 00:00:14,610
I'll take<font color="#E5E5E5"> the first part of the</font>

3
00:00:10,260 --> 00:00:17,640
presentation<font color="#E5E5E5"> so so what is what is</font>

4
00:00:14,610 --> 00:00:19,500
<font color="#CCCCCC">HTP</font><font color="#E5E5E5"> it's it's a it's it's a new</font>

5
00:00:17,640 --> 00:00:21,990
programmable<font color="#E5E5E5"> layer in the network stack</font>

6
00:00:19,500 --> 00:00:23,849
<font color="#CCCCCC">sort of</font><font color="#E5E5E5"> before the network stack and we</font>

7
00:00:21,990 --> 00:00:25,290
are seeing similar<font color="#CCCCCC"> species DB DK we will</font>

8
00:00:23,849 --> 00:00:27,290
get into<font color="#CCCCCC"> more</font><font color="#E5E5E5"> details of that and we</font>

9
00:00:25,290 --> 00:00:30,960
<font color="#E5E5E5">actually have performance comparisons</font>

10
00:00:27,290 --> 00:00:33,000
and<font color="#CCCCCC"> XTP sort of ensures that the network</font>

11
00:00:30,960 --> 00:00:35,820
stack stays relevant<font color="#CCCCCC"> it operates at</font>

12
00:00:33,000 --> 00:00:38,610
layer 2 layer<font color="#E5E5E5"> 3 and the network stack</font>

13
00:00:35,820 --> 00:00:41,910
operates at layer 4<font color="#E5E5E5"> 7 get into a little</font>

14
00:00:38,610 --> 00:00:43,710
<font color="#CCCCCC">bit more</font><font color="#E5E5E5"> details</font><font color="#CCCCCC"> so I want to</font><font color="#E5E5E5"> admit</font><font color="#CCCCCC"> to</font>

15
00:00:41,910 --> 00:00:46,169
be not<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> mover</font><font color="#E5E5E5"> like there's</font>

16
00:00:43,710 --> 00:00:48,420
other solutions but but but but we

17
00:00:46,170 --> 00:00:50,670
believe<font color="#CCCCCC"> that is it is different than</font>

18
00:00:48,420 --> 00:00:51,960
better<font color="#E5E5E5"> because our killer features that</font>

19
00:00:50,670 --> 00:00:56,489
we<font color="#E5E5E5"> are integrated with Windows kernel</font>

20
00:00:51,960 --> 00:00:59,850
<font color="#E5E5E5">and we also have flexible sharing</font><font color="#CCCCCC"> after</font>

21
00:00:56,489 --> 00:01:03,419
of the NIC resources<font color="#CCCCCC"> a little bit</font><font color="#E5E5E5"> more</font>

22
00:00:59,850 --> 00:01:07,440
details of what<font color="#CCCCCC"> xtp is is a in kernel</font>

23
00:01:03,420 --> 00:01:09,210
fast path<font color="#CCCCCC"> and it is this program</font><font color="#E5E5E5"> will</font>

24
00:01:07,440 --> 00:01:11,369
layer in front<font color="#E5E5E5"> of the traditional and</font>

25
00:01:09,210 --> 00:01:13,830
network stack it is<font color="#E5E5E5"> already part of</font>

26
00:01:11,369 --> 00:01:16,590
touching kernels<font color="#E5E5E5"> and actually also</font>

27
00:01:13,830 --> 00:01:20,039
<font color="#CCCCCC">relayed and it operates</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is at the</font>

28
00:01:16,590 --> 00:01:21,840
same<font color="#E5E5E5"> speed and and and the level at SS</font>

29
00:01:20,040 --> 00:01:24,600
db/decade us and we are<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> seeing</font>

30
00:01:21,840 --> 00:01:27,960
this these 10x performance improvements

31
00:01:24,600 --> 00:01:30,470
and one of the points<font color="#CCCCCC"> up being the</font>

32
00:01:27,960 --> 00:01:33,179
internal part is that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can accelerate</font>

33
00:01:30,470 --> 00:01:35,460
<font color="#E5E5E5">certain use cases inside the kernel for</font>

34
00:01:33,180 --> 00:01:38,430
example forwarding<font color="#E5E5E5"> I'll get into</font><font color="#CCCCCC"> multi</font>

35
00:01:35,460 --> 00:01:39,630
<font color="#CCCCCC">users</font><font color="#E5E5E5"> about that then the second</font><font color="#CCCCCC"> part of</font>

36
00:01:38,430 --> 00:01:43,320
the presentation<font color="#E5E5E5"> we're going to</font><font color="#CCCCCC"> talk</font>

37
00:01:39,630 --> 00:01:47,300
about<font color="#E5E5E5"> a FX EP which is addressed family</font>

38
00:01:43,320 --> 00:01:51,179
for HTTP sockets<font color="#E5E5E5"> and it is what I</font>

39
00:01:47,300 --> 00:01:53,820
categorized as<font color="#E5E5E5"> as a hybrids by</font><font color="#CCCCCC"> Colonel</font>

40
00:01:51,180 --> 00:01:56,430
bypass facility because we<font color="#CCCCCC"> are allowing</font>

41
00:01:53,820 --> 00:01:58,229
<font color="#E5E5E5">you to choose what packets should bypass</font>

42
00:01:56,430 --> 00:02:01,710
the kernel<font color="#E5E5E5"> all the way down</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> driver</font>

43
00:01:58,229 --> 00:02:05,280
layer and deliver that<font color="#E5E5E5"> into a socket</font>

44
00:02:01,710 --> 00:02:07,559
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> accessible from user space but</font>

45
00:02:05,280 --> 00:02:10,919
we have this flexibility of the PPF

46
00:02:07,560 --> 00:02:12,420
program<font color="#CCCCCC"> choosing what what we want to</font>

47
00:02:10,919 --> 00:02:19,170
redirect<font color="#E5E5E5"> and not redirect</font>

48
00:02:12,420 --> 00:02:22,529
out of the kernel<font color="#CCCCCC"> so why is xtp needed</font>

49
00:02:19,170 --> 00:02:24,899
it is basically because the network

50
00:02:22,530 --> 00:02:27,510
stack has had been optimized<font color="#CCCCCC"> for layer</font>

51
00:02:24,900 --> 00:02:31,590
<font color="#CCCCCC">407 and we are taking this</font>

52
00:02:27,510 --> 00:02:34,649
performance it's like<font color="#CCCCCC"> once we get the</font>

53
00:02:31,590 --> 00:02:36,900
packets<font color="#E5E5E5"> the news network stack socket</font>

54
00:02:34,650 --> 00:02:39,239
buffer the<font color="#CCCCCC"> hkb</font><font color="#E5E5E5"> is named the socket</font>

55
00:02:36,900 --> 00:02:42,060
buffer because it assumes<font color="#E5E5E5"> in the day</font>

56
00:02:39,239 --> 00:02:44,700
<font color="#CCCCCC">weather ridden like</font><font color="#E5E5E5"> 25 years ago yet</font>

57
00:02:42,060 --> 00:02:47,069
everything<font color="#CCCCCC"> has</font><font color="#E5E5E5"> to go into a socket but</font>

58
00:02:44,700 --> 00:02:50,190
<font color="#CCCCCC">there's certain use cases for their to</font>

59
00:02:47,069 --> 00:02:51,810
and their tree way where we we can do

60
00:02:50,190 --> 00:02:55,950
<font color="#E5E5E5">something faster and that don't take</font>

61
00:02:51,810 --> 00:02:57,599
this this performance over hits and that

62
00:02:55,950 --> 00:03:03,660
<font color="#E5E5E5">is what</font><font color="#CCCCCC"> x2p is</font><font color="#E5E5E5"> that operates at this</font>

63
00:02:57,599 --> 00:03:07,078
layer so<font color="#CCCCCC"> i once admit we are not the</font>

64
00:03:03,660 --> 00:03:09,510
<font color="#E5E5E5">first mover here but we believe is</font>

65
00:03:07,079 --> 00:03:11,670
different and better so<font color="#E5E5E5"> there's actually</font>

66
00:03:09,510 --> 00:03:15,690
a lot of kernel bypass solutions out

67
00:03:11,670 --> 00:03:18,119
there<font color="#CCCCCC"> the net matt the DP DK which</font><font color="#E5E5E5"> is I</font>

68
00:03:15,690 --> 00:03:18,510
think the<font color="#E5E5E5"> most prominent one at the</font>

69
00:03:18,120 --> 00:03:21,030
moment

70
00:03:18,510 --> 00:03:23,519
<font color="#CCCCCC">PAF PAF</font><font color="#E5E5E5"> ring I think</font><font color="#CCCCCC"> that's also some</font>

71
00:03:21,030 --> 00:03:26,090
people<font color="#E5E5E5"> in the room and made that like</font>

72
00:03:23,519 --> 00:03:29,489
long before we had something called HTTP

73
00:03:26,090 --> 00:03:32,040
and Google did some solution where they

74
00:03:29,489 --> 00:03:34,019
have<font color="#CCCCCC"> the mek'leth which they all of a</font>

75
00:03:32,040 --> 00:03:37,560
sudden<font color="#E5E5E5"> published the paper after</font><font color="#CCCCCC"> DB DK</font>

76
00:03:34,019 --> 00:03:41,400
came<font color="#E5E5E5"> out and claimed they did this many</font>

77
00:03:37,560 --> 00:03:45,440
<font color="#E5E5E5">years before the</font><font color="#CCCCCC"> Pokemon</font><font color="#E5E5E5"> load we</font><font color="#CCCCCC"> have</font>

78
00:03:41,400 --> 00:03:47,730
the snap switch which is<font color="#CCCCCC"> also here</font><font color="#E5E5E5"> and</font>

79
00:03:45,440 --> 00:03:50,400
that's actually a solution<font color="#E5E5E5"> very similar</font>

80
00:03:47,730 --> 00:03:57,108
to<font color="#E5E5E5"> HTTP which is a commercial solution</font>

81
00:03:50,400 --> 00:03:59,340
<font color="#E5E5E5">from 8h a proxy called called</font><font color="#CCCCCC"> nted but</font>

82
00:03:57,109 --> 00:04:01,260
all of these criminal bypass solutions

83
00:03:59,340 --> 00:04:04,680
<font color="#CCCCCC">we're hoping like</font><font color="#E5E5E5"> weak in some way find</font>

84
00:04:01,260 --> 00:04:07,410
a way to to<font color="#E5E5E5"> indicate with them and maybe</font>

85
00:04:04,680 --> 00:04:08,670
that they can use AF<font color="#CCCCCC"> ectopy</font><font color="#E5E5E5"> in inside of</font>

86
00:04:07,410 --> 00:04:11,040
their<font color="#E5E5E5"> solution so people that</font><font color="#CCCCCC"> have been</font>

87
00:04:08,670 --> 00:04:12,780
<font color="#CCCCCC">read write writing</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> flow but</font>

88
00:04:11,040 --> 00:04:19,409
those system can still continue using

89
00:04:12,780 --> 00:04:21,959
using that by using the AF XP stuff so

90
00:04:19,410 --> 00:04:24,030
why is it different<font color="#CCCCCC"> or better well it's</font>

91
00:04:21,959 --> 00:04:27,150
<font color="#CCCCCC">not bypass</font><font color="#E5E5E5"> it's the internal fast path</font>

92
00:04:24,030 --> 00:04:29,210
and and the<font color="#E5E5E5"> real</font><font color="#CCCCCC"> aquila feature is that</font>

93
00:04:27,150 --> 00:04:32,099
we've integrated into the<font color="#E5E5E5"> Linux kernel</font>

94
00:04:29,210 --> 00:04:36,000
<font color="#E5E5E5">we are leveraging the existing ecosystem</font>

95
00:04:32,099 --> 00:04:39,659
as everybody here knows<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

96
00:04:36,000 --> 00:04:41,039
that's fairly<font color="#E5E5E5"> strong we also have this</font>

97
00:04:39,659 --> 00:04:44,099
sandboxing

98
00:04:41,039 --> 00:04:46,409
by the the<font color="#CCCCCC"> EPF code I</font><font color="#E5E5E5"> we get</font><font color="#CCCCCC"> a lot</font>

99
00:04:44,099 --> 00:04:48,058
flexibility that<font color="#CCCCCC"> you don't like like how</font>

100
00:04:46,409 --> 00:04:49,860
to recompile your kernel but you can

101
00:04:48,059 --> 00:04:53,039
actually<font color="#E5E5E5"> put</font><font color="#CCCCCC"> in these snippets of code</font>

102
00:04:49,860 --> 00:04:55,349
that<font color="#E5E5E5"> does just what you need and don't</font>

103
00:04:53,039 --> 00:04:58,438
<font color="#CCCCCC">add like too many instructions there but</font>

104
00:04:55,349 --> 00:05:02,909
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you get the flexibility of</font>

105
00:04:58,439 --> 00:05:05,369
<font color="#CCCCCC">doing this and it's also important at</font>

106
00:05:02,909 --> 00:05:07,469
the<font color="#CCCCCC"> sign</font><font color="#E5E5E5"> criteria</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> have like very</font>

107
00:05:05,369 --> 00:05:09,149
flexible sharing of the<font color="#CCCCCC"> Dannette card</font>

108
00:05:07,469 --> 00:05:12,300
<font color="#E5E5E5">the</font><font color="#CCCCCC"> NIC</font>

109
00:05:09,149 --> 00:05:14,699
so we can choose pick and choose a

110
00:05:12,300 --> 00:05:17,399
package travel into<font color="#E5E5E5"> network stack or we</font>

111
00:05:14,699 --> 00:05:19,589
do<font color="#CCCCCC"> something</font><font color="#E5E5E5"> else with this packet and</font>

112
00:05:17,399 --> 00:05:23,520
we<font color="#CCCCCC"> have cooperation</font><font color="#E5E5E5"> with the network</font>

113
00:05:19,589 --> 00:05:25,259
stack by by<font color="#CCCCCC"> these helpers and and we can</font>

114
00:05:23,520 --> 00:05:28,198
do this<font color="#E5E5E5"> for back handling and we also</font>

115
00:05:25,259 --> 00:05:29,759
<font color="#E5E5E5">get access to like basically by running</font>

116
00:05:28,199 --> 00:05:32,249
<font color="#E5E5E5">in the kernel we get access to kernel</font>

117
00:05:29,759 --> 00:05:34,529
objects like we can we can do look<font color="#CCCCCC"> the</font>

118
00:05:32,249 --> 00:05:36,809
<font color="#CCCCCC">lookup</font><font color="#E5E5E5"> I'm going to talk about in the in</font>

119
00:05:34,529 --> 00:05:39,300
the<font color="#CCCCCC"> rock table a little</font><font color="#E5E5E5"> bit later we</font>

120
00:05:36,809 --> 00:05:41,819
need to<font color="#E5E5E5"> even have now in the</font><font color="#CCCCCC"> recent</font>

121
00:05:39,300 --> 00:05:46,169
kernel you can you<font color="#E5E5E5"> can look up from</font><font color="#CCCCCC"> HDPE</font>

122
00:05:41,819 --> 00:05:48,899
to check if there's a socket that that

123
00:05:46,169 --> 00:05:51,498
<font color="#CCCCCC">will match match</font><font color="#E5E5E5"> this packets right now</font>

124
00:05:48,899 --> 00:05:55,169
we<font color="#E5E5E5"> we still don't allow you to</font><font color="#CCCCCC"> directly</font>

125
00:05:51,499 --> 00:05:56,789
manipulate<font color="#E5E5E5"> the socket the socket object</font>

126
00:05:55,169 --> 00:05:59,938
you<font color="#CCCCCC"> cut back</font><font color="#E5E5E5"> but that's something</font><font color="#CCCCCC"> we'll</font>

127
00:05:56,789 --> 00:06:02,068
<font color="#E5E5E5">add later you can manipulate the sockets</font>

128
00:05:59,939 --> 00:06:04,199
objects in<font color="#E5E5E5"> the in the</font><font color="#CCCCCC"> TV</font><font color="#E5E5E5"> hook later</font>

129
00:06:02,069 --> 00:06:06,659
<font color="#E5E5E5">where you can do the same</font><font color="#CCCCCC"> look up so</font>

130
00:06:04,199 --> 00:06:09,120
people<font color="#CCCCCC"> are using</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> too if they want</font>

131
00:06:06,659 --> 00:06:11,099
<font color="#CCCCCC">to bypass</font><font color="#E5E5E5"> but but don't want to bypass</font>

132
00:06:09,120 --> 00:06:13,229
<font color="#E5E5E5">if</font><font color="#CCCCCC"> that's the kernel handles</font><font color="#E5E5E5"> this socket</font>

133
00:06:11,099 --> 00:06:14,909
you and the only thing you do in<font color="#CCCCCC"> DHCP</font>

134
00:06:13,229 --> 00:06:16,979
program is look up to<font color="#E5E5E5"> and look up if</font>

135
00:06:14,909 --> 00:06:18,180
this<font color="#E5E5E5"> circuit already used</font><font color="#CCCCCC"> by the kernel</font>

136
00:06:16,979 --> 00:06:22,099
<font color="#E5E5E5">then you send it to the kernel or else</font>

137
00:06:18,180 --> 00:06:25,349
you will use the bypass facility and

138
00:06:22,099 --> 00:06:29,969
that's<font color="#CCCCCC"> lease</font><font color="#E5E5E5"> on to the the AF HTTP</font>

139
00:06:25,349 --> 00:06:31,169
there's a flexible kernel bypass and we

140
00:06:29,969 --> 00:06:34,439
can deliver<font color="#CCCCCC"> these</font><font color="#E5E5E5"> warframes</font>

141
00:06:31,169 --> 00:06:37,378
inducer space<font color="#E5E5E5"> while we are liberating to</font>

142
00:06:34,439 --> 00:06:42,599
existing<font color="#CCCCCC"> NIC drivers and the ecosystem</font>

143
00:06:37,379 --> 00:06:45,209
<font color="#CCCCCC">for the Matias we</font><font color="#E5E5E5"> both that so I put a</font>

144
00:06:42,599 --> 00:06:46,919
red slide<font color="#E5E5E5"> to to shock you here like so</font>

145
00:06:45,209 --> 00:06:48,689
you sort<font color="#E5E5E5"> of what wake up because</font><font color="#CCCCCC"> this</font>

146
00:06:46,919 --> 00:06:51,240
fundamental understand that<font color="#E5E5E5"> I'm seeing</font>

147
00:06:48,689 --> 00:06:52,490
this as a building<font color="#E5E5E5"> block that that you</font>

148
00:06:51,240 --> 00:06:55,910
<font color="#E5E5E5">should use</font>

149
00:06:52,490 --> 00:06:58,460
and what do I<font color="#CCCCCC"> mean by</font><font color="#E5E5E5"> that so I mean</font>

150
00:06:55,910 --> 00:06:59,930
<font color="#E5E5E5">that I see</font><font color="#CCCCCC"> XP as a component</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is a</font>

151
00:06:58,460 --> 00:07:02,299
core<font color="#CCCCCC"> facility we are providing from</font><font color="#E5E5E5"> the</font>

152
00:06:59,930 --> 00:07:05,180
kernel but I need you guys<font color="#CCCCCC"> to pick</font><font color="#E5E5E5"> it up</font>

153
00:07:02,300 --> 00:07:06,949
and use<font color="#CCCCCC"> it actually and you put it</font>

154
00:07:05,180 --> 00:07:09,259
together to solve a specific<font color="#E5E5E5"> task and</font>

155
00:07:06,949 --> 00:07:12,199
<font color="#E5E5E5">I'm by putting in like fully</font>

156
00:07:09,259 --> 00:07:14,449
programmable items in there I'm<font color="#E5E5E5"> not</font>

157
00:07:12,199 --> 00:07:16,849
saying what what you can do and<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you</font>

158
00:07:14,449 --> 00:07:21,169
cannot do<font color="#E5E5E5"> this is like go go and win</font>

159
00:07:16,849 --> 00:07:23,150
something<font color="#E5E5E5"> I couldn't imagine and so it's</font>

160
00:07:21,169 --> 00:07:25,070
not a<font color="#E5E5E5"> product in itself and I really</font>

161
00:07:23,150 --> 00:07:26,419
want existing open<font color="#E5E5E5"> source solutions to</font>

162
00:07:25,070 --> 00:07:27,710
do it and there will also be some new

163
00:07:26,419 --> 00:07:31,758
ones<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are going to use these</font>

164
00:07:27,710 --> 00:07:34,909
components<font color="#E5E5E5"> and what what I really see</font>

165
00:07:31,759 --> 00:07:36,620
like<font color="#CCCCCC"> HDPE is</font><font color="#E5E5E5"> really like a hot sexy</font>

166
00:07:34,910 --> 00:07:38,509
<font color="#E5E5E5">topic because</font><font color="#CCCCCC"> we can do all these kind</font>

167
00:07:36,620 --> 00:07:40,490
of millions of packets per second but

168
00:07:38,509 --> 00:07:42,710
<font color="#E5E5E5">the real potential comes when we're</font>

169
00:07:40,490 --> 00:07:45,919
actually combining it with the other<font color="#E5E5E5"> BPF</font>

170
00:07:42,710 --> 00:07:47,780
<font color="#E5E5E5">hooks that</font><font color="#CCCCCC"> exist</font><font color="#E5E5E5"> in the kernel and I</font>

171
00:07:45,919 --> 00:07:49,820
call it like<font color="#CCCCCC"> we can construct these</font>

172
00:07:47,780 --> 00:07:52,479
<font color="#CCCCCC">Network</font><font color="#E5E5E5"> pipelines by using</font><font color="#CCCCCC"> these</font>

173
00:07:49,820 --> 00:07:54,919
different<font color="#CCCCCC"> hooks</font><font color="#E5E5E5"> the PPF hooks</font><font color="#CCCCCC"> I</font>

174
00:07:52,479 --> 00:07:57,530
dissected about the project's<font color="#CCCCCC"> called</font><font color="#E5E5E5"> see</font>

175
00:07:54,919 --> 00:08:00,380
<font color="#E5E5E5">Liam is doing it's a</font><font color="#CCCCCC"> it's primarily for</font>

176
00:07:57,530 --> 00:08:07,369
<font color="#E5E5E5">containers and they're they're combining</font>

177
00:08:00,380 --> 00:08:09,259
<font color="#CCCCCC">all these different components so now</font>

178
00:08:07,370 --> 00:08:11,659
I'm going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about some of the use</font>

179
00:08:09,259 --> 00:08:15,020
cases where X TPS has already been

180
00:08:11,659 --> 00:08:17,750
<font color="#E5E5E5">induced and then I'm going into</font><font color="#CCCCCC"> each of</font>

181
00:08:15,020 --> 00:08:19,280
<font color="#E5E5E5">those cases talk about what's the new</font>

182
00:08:17,750 --> 00:08:22,310
potential and our opportunities and

183
00:08:19,280 --> 00:08:27,880
<font color="#E5E5E5">contribute that</font><font color="#CCCCCC"> to the two VMs and</font>

184
00:08:22,310 --> 00:08:33,229
containers<font color="#E5E5E5"> how can this this</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> out</font>

185
00:08:27,880 --> 00:08:36,439
I'm speaking pretty fast I<font color="#E5E5E5"> think so one</font>

186
00:08:33,229 --> 00:08:40,219
of<font color="#E5E5E5"> the most obvious use cases is the</font>

187
00:08:36,440 --> 00:08:42,500
entity<font color="#CCCCCC"> does that was the first thing we</font>

188
00:08:40,219 --> 00:08:45,020
sort<font color="#E5E5E5"> of implemented that we can drop</font>

189
00:08:42,500 --> 00:08:47,540
packets<font color="#E5E5E5"> really fast because we</font><font color="#CCCCCC"> haven't</font>

190
00:08:45,020 --> 00:08:49,760
spent a<font color="#CCCCCC"> lot of CPU cycles on it because</font>

191
00:08:47,540 --> 00:08:52,699
<font color="#E5E5E5">HTTP happens down in the driver layer</font>

192
00:08:49,760 --> 00:08:57,310
<font color="#E5E5E5">are we allowed</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> this our</font><font color="#CCCCCC"> IPPF</font>

193
00:08:52,700 --> 00:09:00,170
program which is our<font color="#CCCCCC"> x2p program so</font>

194
00:08:57,310 --> 00:09:02,089
<font color="#CCCCCC">facebook have</font><font color="#E5E5E5"> already for their pin the</font>

195
00:09:00,170 --> 00:09:04,579
front<font color="#CCCCCC"> burners on this and they've also</font>

196
00:09:02,089 --> 00:09:07,160
contributed a lot<font color="#E5E5E5"> upstream</font><font color="#CCCCCC"> they hired</font>

197
00:09:04,579 --> 00:09:10,609
the<font color="#CCCCCC"> EPF maintained</font>

198
00:09:07,160 --> 00:09:12,860
but actually<font color="#CCCCCC"> for</font><font color="#E5E5E5"> 1.5 years</font><font color="#CCCCCC"> there have</font>

199
00:09:10,610 --> 00:09:13,460
been<font color="#E5E5E5"> every packet going going to</font>

200
00:09:12,860 --> 00:09:17,180
Facebook

201
00:09:13,460 --> 00:09:19,250
goes through<font color="#E5E5E5"> HTTP in some way and the</font>

202
00:09:17,180 --> 00:09:22,370
cloud<font color="#E5E5E5"> Freya recently switched to</font><font color="#CCCCCC"> HDPE</font>

203
00:09:19,250 --> 00:09:24,170
and they changed the Nick<font color="#E5E5E5"> bender</font><font color="#CCCCCC"> in that</font>

204
00:09:22,370 --> 00:09:27,110
process<font color="#CCCCCC"> before they were running</font><font color="#E5E5E5"> a</font>

205
00:09:24,170 --> 00:09:34,099
proprietary stuff with the open on note

206
00:09:27,110 --> 00:09:37,120
from<font color="#CCCCCC"> Solar Flare</font><font color="#E5E5E5"> I think yeah so some of</font>

207
00:09:34,100 --> 00:09:39,920
the new potential here for<font color="#E5E5E5"> entity does</font>

208
00:09:37,120 --> 00:09:43,580
<font color="#E5E5E5">for containers and VMs is that a</font>

209
00:09:39,920 --> 00:09:45,550
container like a Cuban<font color="#CCCCCC"> 80s cluster or</font>

210
00:09:43,580 --> 00:09:48,290
open chef<font color="#CCCCCC"> class</font><font color="#E5E5E5"> that you would not</font>

211
00:09:45,550 --> 00:09:52,729
<font color="#E5E5E5">expose that to to the</font><font color="#CCCCCC"> Internet's</font><font color="#E5E5E5"> because</font>

212
00:09:48,290 --> 00:09:56,510
the rupee<font color="#CCCCCC"> fairly dangerous</font><font color="#E5E5E5"> but you</font><font color="#CCCCCC"> could</font>

213
00:09:52,730 --> 00:09:58,670
you could actually use<font color="#E5E5E5"> this</font><font color="#CCCCCC"> X X P</font>

214
00:09:56,510 --> 00:10:00,650
<font color="#E5E5E5">program and on the host to</font><font color="#CCCCCC"> deny</font><font color="#E5E5E5"> of</font>

215
00:09:58,670 --> 00:10:02,209
<font color="#CCCCCC">search</font><font color="#E5E5E5"> protection you don't need you</font>

216
00:10:00,650 --> 00:10:04,689
<font color="#E5E5E5">want to expose this cluster to have</font>

217
00:10:02,210 --> 00:10:06,980
another box<font color="#E5E5E5"> hotter box that does this</font>

218
00:10:04,690 --> 00:10:08,060
<font color="#E5E5E5">denial of service</font><font color="#CCCCCC"> filtering because</font><font color="#E5E5E5"> we</font>

219
00:10:06,980 --> 00:10:10,940
can handle wire<font color="#CCCCCC"> speeds</font>

220
00:10:08,060 --> 00:10:13,939
packets coming in from the<font color="#CCCCCC"> X T P layer</font>

221
00:10:10,940 --> 00:10:16,700
we just loaded<font color="#E5E5E5"> on the sort of the the</font>

222
00:10:13,940 --> 00:10:20,110
<font color="#E5E5E5">hosts that they contain us run on and</font>

223
00:10:16,700 --> 00:10:25,040
protect can protect the containers the

224
00:10:20,110 --> 00:10:26,330
<font color="#CCCCCC">VMS is the same story</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can in the</font>

225
00:10:25,040 --> 00:10:28,730
host<font color="#E5E5E5"> of ways you could lower the</font><font color="#CCCCCC"> xt p</font>

226
00:10:26,330 --> 00:10:30,050
program<font color="#E5E5E5"> to protects the thickest devices</font>

227
00:10:28,730 --> 00:10:31,310
because it's<font color="#E5E5E5"> fairly</font><font color="#CCCCCC"> expensive to</font>

228
00:10:30,050 --> 00:10:33,260
transfer a packet all the way<font color="#E5E5E5"> into the</font>

229
00:10:31,310 --> 00:10:35,089
<font color="#CCCCCC">guest to figure out that this</font><font color="#E5E5E5"> package</font>

230
00:10:33,260 --> 00:10:39,710
shouldn't be used<font color="#E5E5E5"> and that's an easy way</font>

231
00:10:35,090 --> 00:10:41,860
to overload the system and this is

232
00:10:39,710 --> 00:10:43,910
<font color="#E5E5E5">working progress to the lowest one</font>

233
00:10:41,860 --> 00:10:47,420
microsecond all of the time every<font color="#E5E5E5"> time I</font>

234
00:10:43,910 --> 00:10:50,540
meet up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> him he wants to to be able</font>

235
00:10:47,420 --> 00:10:53,300
<font color="#E5E5E5">to from from the thickest</font><font color="#CCCCCC"> ask the host</font>

236
00:10:50,540 --> 00:10:57,170
<font color="#E5E5E5">operating system by the driver to to</font>

237
00:10:53,300 --> 00:11:00,170
know the<font color="#CCCCCC"> xt p program forward there</font><font color="#E5E5E5"> are</font>

238
00:10:57,170 --> 00:11:03,050
<font color="#E5E5E5">some security concerns</font><font color="#CCCCCC"> there that's why</font>

239
00:11:00,170 --> 00:11:05,089
we haven't allowed it yet but there's a

240
00:11:03,050 --> 00:11:08,449
really<font color="#CCCCCC"> interesting possibility that you</font>

241
00:11:05,090 --> 00:11:11,330
couldn't you<font color="#E5E5E5"> can allow a guest to ask</font>

242
00:11:08,450 --> 00:11:14,110
the host OS to load a filter<font color="#CCCCCC"> I did</font>

243
00:11:11,330 --> 00:11:14,110
another service filter

244
00:11:14,720 --> 00:11:20,520
we also have to<font color="#CCCCCC"> use case of</font><font color="#E5E5E5"> layer for</font>

245
00:11:17,730 --> 00:11:23,190
load balancing<font color="#CCCCCC"> so this is what Facebook</font>

246
00:11:20,520 --> 00:11:24,500
is<font color="#E5E5E5"> is using they used to use something</font>

247
00:11:23,190 --> 00:11:28,350
<font color="#E5E5E5">called</font><font color="#CCCCCC"> ipbs</font>

248
00:11:24,500 --> 00:11:30,150
it's a load balancer in the kernel<font color="#E5E5E5"> yeah</font>

249
00:11:28,350 --> 00:11:33,780
I mean<font color="#E5E5E5"> even</font><font color="#CCCCCC"> the maintainer</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> user</font>

250
00:11:30,150 --> 00:11:38,040
<font color="#E5E5E5">space software for that but I even</font><font color="#CCCCCC"> like</font>

251
00:11:33,780 --> 00:11:40,170
I'm<font color="#E5E5E5"> even recommending not using but</font><font color="#CCCCCC"> so</font>

252
00:11:38,040 --> 00:11:41,819
what they<font color="#CCCCCC"> did</font><font color="#E5E5E5"> was they switched to</font><font color="#CCCCCC"> HTTP</font>

253
00:11:40,170 --> 00:11:45,000
and they reported<font color="#E5E5E5"> a 10 10 times</font>

254
00:11:41,820 --> 00:11:47,190
performance improvement and<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only</font>

255
00:11:45,000 --> 00:11:48,810
that they they could remove some of<font color="#E5E5E5"> the</font>

256
00:11:47,190 --> 00:11:51,660
machines that<font color="#E5E5E5"> did the slope and</font><font color="#CCCCCC"> I think</font>

257
00:11:48,810 --> 00:11:53,459
<font color="#E5E5E5">because they do load balancing on on the</font>

258
00:11:51,660 --> 00:11:54,990
target machines themself<font color="#CCCCCC"> and shoot the</font>

259
00:11:53,460 --> 00:11:57,180
packet over<font color="#E5E5E5"> to the others so it's</font>

260
00:11:54,990 --> 00:12:02,160
there's no central central point of

261
00:11:57,180 --> 00:12:05,099
<font color="#CCCCCC">failure and they</font><font color="#E5E5E5"> even open sourced it</font>

262
00:12:02,160 --> 00:12:06,449
<font color="#E5E5E5">and it's on github and called</font><font color="#CCCCCC"> cat ran if</font>

263
00:12:05,100 --> 00:12:11,190
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> pronouncing it correctly</font><font color="#CCCCCC"> I think</font>

264
00:12:06,450 --> 00:12:13,080
<font color="#CCCCCC">it's something to do with a fish yeah so</font>

265
00:12:11,190 --> 00:12:15,570
the new potential here is<font color="#E5E5E5"> that we could</font>

266
00:12:13,080 --> 00:12:20,340
also like to load balancing into a VM so

267
00:12:15,570 --> 00:12:22,500
containers so for the VMS<font color="#E5E5E5"> you can at the</font>

268
00:12:20,340 --> 00:12:25,350
physical NIC layer use the redirect

269
00:12:22,500 --> 00:12:27,540
action and rearrange<font color="#E5E5E5"> into a guest guest</font>

270
00:12:25,350 --> 00:12:29,570
<font color="#E5E5E5">Nick and this way we avoid allocating</font>

271
00:12:27,540 --> 00:12:32,459
the<font color="#CCCCCC"> skp in the host operating</font><font color="#E5E5E5"> system</font>

272
00:12:29,570 --> 00:12:36,390
which only<font color="#CCCCCC"> is used for sending</font><font color="#E5E5E5"> the stuff</font>

273
00:12:32,460 --> 00:12:38,910
into<font color="#CCCCCC"> the to</font><font color="#E5E5E5"> the guests that's actually a</font>

274
00:12:36,390 --> 00:12:41,430
really big performance improvement not a

275
00:12:38,910 --> 00:12:44,250
lot of<font color="#CCCCCC"> solutions have really directly</font>

276
00:12:41,430 --> 00:12:47,370
using<font color="#E5E5E5"> this but I'll talk</font><font color="#CCCCCC"> more about how</font>

277
00:12:44,250 --> 00:12:49,050
how this this could be materialized<font color="#CCCCCC"> is</font>

278
00:12:47,370 --> 00:12:50,160
actually in<font color="#E5E5E5"> the kernel now we have in</font>

279
00:12:49,050 --> 00:12:54,000
the<font color="#CCCCCC"> toolset driver</font>

280
00:12:50,160 --> 00:12:55,949
we can redirect<font color="#CCCCCC"> all frames and</font><font color="#E5E5E5"> the</font>

281
00:12:54,000 --> 00:12:58,080
performance is<font color="#CCCCCC"> quite excellent</font><font color="#E5E5E5"> there's</font>

282
00:12:55,950 --> 00:13:00,240
this what I'm seeing in my<font color="#CCCCCC"> performance</font>

283
00:12:58,080 --> 00:13:03,840
<font color="#CCCCCC">test is that it is actually</font><font color="#E5E5E5"> now we are</font>

284
00:13:00,240 --> 00:13:05,190
depending on how to the<font color="#E5E5E5"> guest get</font>

285
00:13:03,840 --> 00:13:07,680
scheduled so it's a<font color="#CCCCCC"> scheduling problem</font>

286
00:13:05,190 --> 00:13:11,150
<font color="#E5E5E5">now that</font><font color="#CCCCCC"> we are hitting</font><font color="#E5E5E5"> how many packets</font>

287
00:13:07,680 --> 00:13:12,920
per second we<font color="#CCCCCC"> can throw in there's a</font>

288
00:13:11,150 --> 00:13:14,189
<font color="#E5E5E5">containers is a little bit more</font>

289
00:13:12,920 --> 00:13:16,140
difficult to<font color="#CCCCCC"> use</font>

290
00:13:14,190 --> 00:13:19,860
<font color="#CCCCCC">xtp because containers they really</font><font color="#E5E5E5"> needs</font>

291
00:13:16,140 --> 00:13:22,170
<font color="#E5E5E5">ets</font><font color="#CCCCCC"> skb have structure allocated but one</font>

292
00:13:19,860 --> 00:13:23,430
funny<font color="#E5E5E5"> interesting thing you can do is</font>

293
00:13:22,170 --> 00:13:26,490
from<font color="#E5E5E5"> the physical NIC you can redirect</font>

294
00:13:23,430 --> 00:13:27,890
<font color="#E5E5E5">into a</font><font color="#CCCCCC"> Vth device which is right the</font>

295
00:13:26,490 --> 00:13:31,459
containers have

296
00:13:27,890 --> 00:13:35,269
and it's a<font color="#E5E5E5"> fairly recent kernel version</font>

297
00:13:31,459 --> 00:13:39,189
you have to have but it sort of got<font color="#E5E5E5"> what</font>

298
00:13:35,269 --> 00:13:41,750
<font color="#E5E5E5">I call native</font><font color="#CCCCCC"> support so it can bypass</font>

299
00:13:39,190 --> 00:13:43,339
like the network<font color="#CCCCCC"> stack and allocates</font><font color="#E5E5E5"> it</font>

300
00:13:41,750 --> 00:13:47,329
is the<font color="#CCCCCC"> BJ's that allocates and bill to</font>

301
00:13:43,339 --> 00:13:49,790
<font color="#CCCCCC">sqp and we there's a small performance</font>

302
00:13:47,329 --> 00:13:52,699
<font color="#E5E5E5">optimization by skipping some code yeah</font>

303
00:13:49,790 --> 00:13:54,589
<font color="#E5E5E5">but I see it more interesting that you</font>

304
00:13:52,700 --> 00:13:57,680
could actually run another<font color="#E5E5E5"> HTTP program</font>

305
00:13:54,589 --> 00:14:00,709
on on<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> ETH</font><font color="#E5E5E5"> and redirect into</font>

306
00:13:57,680 --> 00:14:03,769
another container like<font color="#E5E5E5"> that</font>

307
00:14:00,709 --> 00:14:06,619
you can you could make interesting<font color="#CCCCCC"> proxy</font>

308
00:14:03,769 --> 00:14:10,000
solutions that works<font color="#E5E5E5"> on this</font><font color="#CCCCCC"> l3 layer</font>

309
00:14:06,620 --> 00:14:13,399
that can you<font color="#E5E5E5"> can sort of install a</font>

310
00:14:10,000 --> 00:14:16,089
container<font color="#E5E5E5"> that only does proxies proxy</font>

311
00:14:13,399 --> 00:14:19,940
<font color="#E5E5E5">stuff for the other containers within</font>

312
00:14:16,089 --> 00:14:22,370
within an installer as a container

313
00:14:19,940 --> 00:14:25,820
instead<font color="#E5E5E5"> of having to having had</font><font color="#CCCCCC"> had that</font>

314
00:14:22,370 --> 00:14:27,800
installed on the physical host<font color="#E5E5E5"> but</font>

315
00:14:25,820 --> 00:14:29,930
that's interesting use cases<font color="#E5E5E5"> let's see</font>

316
00:14:27,800 --> 00:14:34,359
if anybody does this this<font color="#E5E5E5"> is not</font>

317
00:14:29,930 --> 00:14:34,359
something that<font color="#E5E5E5"> this has been</font><font color="#CCCCCC"> done today</font>

318
00:14:36,820 --> 00:14:45,470
so<font color="#CCCCCC"> the approach will be used for</font>

319
00:14:41,390 --> 00:14:47,329
accelerating so<font color="#E5E5E5"> it can be used for</font>

320
00:14:45,470 --> 00:14:49,690
accelerating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VPN but what kind of</font>

321
00:14:47,329 --> 00:14:49,689
VPN

322
00:15:01,249 --> 00:15:07,069
yeah so so that I would<font color="#E5E5E5"> recommend using</font>

323
00:15:04,620 --> 00:15:09,990
something else<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Colonel Chile's</font>

324
00:15:07,069 --> 00:15:11,550
which where we can<font color="#CCCCCC"> actually but I'm</font>

325
00:15:09,990 --> 00:15:13,079
<font color="#E5E5E5">poking VP and I don't know that</font><font color="#CCCCCC"> that's</font>

326
00:15:11,550 --> 00:15:31,279
<font color="#E5E5E5">the</font><font color="#CCCCCC"> chillest</font><font color="#E5E5E5"> but I don't know what kind</font>

327
00:15:13,079 --> 00:15:31,279
of crypto<font color="#CCCCCC"> - we</font><font color="#E5E5E5"> can just okay yeah this</font>

328
00:15:32,059 --> 00:15:39,839
yeah this I<font color="#E5E5E5"> think I have repeated the</font>

329
00:15:35,339 --> 00:15:43,110
<font color="#CCCCCC">question that if you could</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it for</font>

330
00:15:39,839 --> 00:15:44,939
accelerating like<font color="#CCCCCC"> OpenVPN some of it</font><font color="#E5E5E5"> I</font>

331
00:15:43,110 --> 00:15:47,129
<font color="#E5E5E5">wouldn't use</font><font color="#CCCCCC"> XTP force I will use some</font>

332
00:15:44,939 --> 00:15:52,860
of<font color="#E5E5E5"> the other TZ hooks for actually</font>

333
00:15:47,129 --> 00:16:00,329
accelerating that actually I think<font color="#CCCCCC"> I'll</font>

334
00:15:52,860 --> 00:16:02,970
<font color="#E5E5E5">move on so also it's actually fairly</font>

335
00:16:00,329 --> 00:16:07,309
easy to misuse<font color="#CCCCCC"> xtp in the same way if</font>

336
00:16:02,970 --> 00:16:10,529
you<font color="#CCCCCC"> can like use these bypass solutions</font>

337
00:16:07,309 --> 00:16:12,540
<font color="#CCCCCC">so instead I want people to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> sort of</font>

338
00:16:10,529 --> 00:16:16,290
<font color="#E5E5E5">smart about how we</font><font color="#CCCCCC"> can integrate</font>

339
00:16:12,540 --> 00:16:20,910
<font color="#CCCCCC">xtp in existing open source solutions</font>

340
00:16:16,290 --> 00:16:22,439
and leverage the existing ecosystem for

341
00:16:20,910 --> 00:16:24,059
<font color="#E5E5E5">the control page</font><font color="#CCCCCC"> setup but that's it</font>

342
00:16:22,439 --> 00:16:27,599
there's a trick you<font color="#E5E5E5"> have to do to do</font>

343
00:16:24,059 --> 00:16:29,610
<font color="#CCCCCC">that you have to</font><font color="#E5E5E5"> implement some</font><font color="#CCCCCC"> PPF help</font>

344
00:16:27,600 --> 00:16:35,579
us and<font color="#CCCCCC"> PPF help us is</font><font color="#E5E5E5"> something you add</font>

345
00:16:29,610 --> 00:16:38,009
into<font color="#E5E5E5"> the kernel that and that's it's</font>

346
00:16:35,579 --> 00:16:39,779
like<font color="#E5E5E5"> beep if it's something you know</font>

347
00:16:38,009 --> 00:16:41,939
<font color="#E5E5E5">your</font><font color="#CCCCCC"> program is to the kernel and</font><font color="#E5E5E5"> you're</font>

348
00:16:39,779 --> 00:16:44,790
completely flexible there but once we

349
00:16:41,939 --> 00:16:47,610
had<font color="#CCCCCC"> help us</font><font color="#E5E5E5"> it becomes a stable API that</font>

350
00:16:44,790 --> 00:16:49,860
you provide<font color="#CCCCCC"> use help us and and what</font>

351
00:16:47,610 --> 00:16:52,559
what I mean by a<font color="#CCCCCC"> good example</font><font color="#E5E5E5"> of what</font>

352
00:16:49,860 --> 00:16:56,939
you can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> helpless for having this</font>

353
00:16:52,559 --> 00:16:59,519
slide<font color="#E5E5E5"> so did the general thinking I want</font>

354
00:16:56,939 --> 00:17:01,949
<font color="#CCCCCC">people to do is</font><font color="#E5E5E5"> like the cxp as a</font>

355
00:16:59,519 --> 00:17:05,760
software offloading layer that<font color="#E5E5E5"> can</font>

356
00:17:01,949 --> 00:17:07,559
accelerate part of the network stack and

357
00:17:05,760 --> 00:17:09,959
by doing<font color="#CCCCCC"> that you could for example take</font>

358
00:17:07,559 --> 00:17:11,549
the Rob<font color="#E5E5E5"> lugar which we already done so</font>

359
00:17:09,959 --> 00:17:13,890
we<font color="#E5E5E5"> have to fill up helper we exported</font>

360
00:17:11,549 --> 00:17:16,859
that as a helper function

361
00:17:13,890 --> 00:17:20,610
can confirm from<font color="#CCCCCC"> XTP</font><font color="#E5E5E5"> so what happens is</font>

362
00:17:16,859 --> 00:17:22,708
that you will<font color="#E5E5E5"> allow you'll do your</font>

363
00:17:20,609 --> 00:17:24,899
<font color="#CCCCCC">normal route setup completely as you</font>

364
00:17:22,709 --> 00:17:27,570
<font color="#E5E5E5">have it today you'll install reality</font>

365
00:17:24,900 --> 00:17:30,180
means<font color="#CCCCCC"> Topeka PD means whatever</font><font color="#E5E5E5"> and and</font>

366
00:17:27,569 --> 00:17:32,100
you will have to<font color="#CCCCCC"> colonel handle off all</font>

367
00:17:30,180 --> 00:17:34,320
this and<font color="#E5E5E5"> also handle</font><font color="#CCCCCC"> the neighbor</font>

368
00:17:32,100 --> 00:17:38,219
neighbor<font color="#E5E5E5"> neighbor table or the up table</font>

369
00:17:34,320 --> 00:17:39,899
lookups and<font color="#CCCCCC"> Enix XP when you get to</font>

370
00:17:38,220 --> 00:17:41,760
first<font color="#E5E5E5"> pack it in you do the</font><font color="#CCCCCC"> lookup</font><font color="#E5E5E5"> but</font>

371
00:17:39,900 --> 00:17:43,950
it's not in the<font color="#E5E5E5"> up table so to look up</font>

372
00:17:41,760 --> 00:17:46,110
roof fail and you call what you<font color="#E5E5E5"> call</font><font color="#CCCCCC"> HTV</font>

373
00:17:43,950 --> 00:17:48,540
<font color="#E5E5E5">pass so we pass it on to normal network</font>

374
00:17:46,110 --> 00:17:50,669
<font color="#CCCCCC">thing which will then do</font><font color="#E5E5E5"> figure out</font>

375
00:17:48,540 --> 00:17:52,290
figure this out and<font color="#CCCCCC"> call the up table</font>

376
00:17:50,670 --> 00:17:55,860
<font color="#CCCCCC">lugar I've set up a timer for when it</font>

377
00:17:52,290 --> 00:17:58,470
has to<font color="#CCCCCC"> to request a new app app look up</font>

378
00:17:55,860 --> 00:18:00,510
again<font color="#CCCCCC"> and stuff like that</font><font color="#E5E5E5"> at the next</font>

379
00:17:58,470 --> 00:18:02,430
<font color="#E5E5E5">packet we</font><font color="#CCCCCC"> can't</font><font color="#E5E5E5"> get in</font><font color="#CCCCCC"> it has has done</font>

380
00:18:00,510 --> 00:18:07,640
the<font color="#CCCCCC"> Opera solution it'll</font><font color="#E5E5E5"> do they look up</font>

381
00:18:02,430 --> 00:18:11,040
and<font color="#E5E5E5"> get a get</font><font color="#CCCCCC"> back the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next hop and</font>

382
00:18:07,640 --> 00:18:15,210
also that the MAC<font color="#CCCCCC"> address</font><font color="#E5E5E5"> and the exit</font>

383
00:18:11,040 --> 00:18:17,370
point for the<font color="#E5E5E5"> I have index exit point</font>

384
00:18:15,210 --> 00:18:19,770
and<font color="#E5E5E5"> from HTTP we can then shoot out the</font>

385
00:18:17,370 --> 00:18:22,760
packet directly from this<font color="#CCCCCC"> level so</font>

386
00:18:19,770 --> 00:18:26,670
that's<font color="#E5E5E5"> that's the way of accelerating</font>

387
00:18:22,760 --> 00:18:29,910
takes<font color="#E5E5E5"> just</font><font color="#CCCCCC"> an eggless X routing it</font><font color="#E5E5E5"> like</font>

388
00:18:26,670 --> 00:18:33,150
IP routing it both work for IP v4 and v6

389
00:18:29,910 --> 00:18:35,700
<font color="#CCCCCC">yeah I'm fluent and now we're going to</font>

390
00:18:33,150 --> 00:18:38,280
<font color="#E5E5E5">add some more stuff</font><font color="#CCCCCC"> for MPLS</font><font color="#E5E5E5"> but right</font>

391
00:18:35,700 --> 00:18:42,030
now it's ipv4 ipv6 you can do this with

392
00:18:38,280 --> 00:18:43,830
and and and do<font color="#CCCCCC"> routing so just we you</font>

393
00:18:42,030 --> 00:18:48,810
<font color="#E5E5E5">depend this very simple program you have</font>

394
00:18:43,830 --> 00:18:50,909
to<font color="#E5E5E5"> load and in</font><font color="#CCCCCC"> Dec 2</font><font color="#E5E5E5"> P hook the next</font>

395
00:18:48,810 --> 00:18:54,210
obvious<font color="#E5E5E5"> target is look doing bridge</font><font color="#CCCCCC"> rich</font>

396
00:18:50,910 --> 00:19:01,080
<font color="#CCCCCC">lookup so you can like have a helper</font>

397
00:18:54,210 --> 00:19:03,630
<font color="#CCCCCC">that looks up in</font><font color="#E5E5E5"> the end bridge</font><font color="#CCCCCC"> v also</font>

398
00:19:01,080 --> 00:19:05,490
<font color="#E5E5E5">called flip oh but it's the lookup table</font>

399
00:19:03,630 --> 00:19:07,500
and then you can<font color="#E5E5E5"> accelerate bridge</font>

400
00:19:05,490 --> 00:19:10,260
forwarding and that goes into my<font color="#E5E5E5"> other</font>

401
00:19:07,500 --> 00:19:13,110
<font color="#E5E5E5">point of how do we accelerate into two</font>

402
00:19:10,260 --> 00:19:16,379
<font color="#E5E5E5">to two VMs for chamber I feel your VMs</font>

403
00:19:13,110 --> 00:19:18,270
are<font color="#E5E5E5"> set up and in a bridge that you have</font>

404
00:19:16,380 --> 00:19:19,860
<font color="#E5E5E5">gbm's connected to the bridge which is</font>

405
00:19:18,270 --> 00:19:23,340
<font color="#E5E5E5">usually the</font><font color="#CCCCCC"> normal leadership which</font>

406
00:19:19,860 --> 00:19:24,689
which is<font color="#E5E5E5"> not very fast actually and</font><font color="#CCCCCC"> that</font>

407
00:19:23,340 --> 00:19:27,169
way we could<font color="#E5E5E5"> just accelerate that</font>

408
00:19:24,690 --> 00:19:30,210
directly from HTTP

409
00:19:27,170 --> 00:19:31,890
without doing much like<font color="#E5E5E5"> other user space</font>

410
00:19:30,210 --> 00:19:38,040
code around having secured<font color="#E5E5E5"> the program</font>

411
00:19:31,890 --> 00:19:38,430
<font color="#CCCCCC">clusters so when people</font><font color="#E5E5E5"> start to play</font>

412
00:19:38,040 --> 00:19:40,710
with it

413
00:19:38,430 --> 00:19:42,660
<font color="#CCCCCC">I also want to mention that how you</font>

414
00:19:40,710 --> 00:19:47,040
<font color="#E5E5E5">actually transfer information between</font>

415
00:19:42,660 --> 00:19:48,570
<font color="#CCCCCC">xep</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> networks die so one</font><font color="#E5E5E5"> trick is</font>

416
00:19:47,040 --> 00:19:50,850
you can you can modify the hitters

417
00:19:48,570 --> 00:19:54,179
before you call a network stack so even

418
00:19:50,850 --> 00:19:57,209
though we called HTTP pass<font color="#E5E5E5"> you can</font>

419
00:19:54,180 --> 00:20:00,720
modify the hitters<font color="#E5E5E5"> and poop and put a</font>

420
00:19:57,210 --> 00:20:02,850
push and pop<font color="#E5E5E5"> headers and and that by</font>

421
00:20:00,720 --> 00:20:05,280
influence which receive handler the

422
00:20:02,850 --> 00:20:08,189
network stack would use that means<font color="#E5E5E5"> you</font>

423
00:20:05,280 --> 00:20:10,710
can in principle<font color="#E5E5E5"> I have to handle have</font>

424
00:20:08,190 --> 00:20:12,330
the<font color="#E5E5E5"> kernel handle a protocol</font>

425
00:20:10,710 --> 00:20:15,690
encapsulation<font color="#E5E5E5"> that the kernel doesn't</font>

426
00:20:12,330 --> 00:20:17,780
know about you still have to do some

427
00:20:15,690 --> 00:20:20,910
<font color="#CCCCCC">work on the</font><font color="#E5E5E5"> transmit size also</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> course</font>

428
00:20:17,780 --> 00:20:24,000
<font color="#E5E5E5">and another trick that cloud fair uses</font>

429
00:20:20,910 --> 00:20:26,010
is they take the source MAC address

430
00:20:24,000 --> 00:20:28,860
<font color="#E5E5E5">because that's not used anymore in</font><font color="#CCCCCC"> the</font>

431
00:20:26,010 --> 00:20:31,620
lookups and you modify that<font color="#CCCCCC"> with a</font>

432
00:20:28,860 --> 00:20:33,780
special<font color="#CCCCCC"> value and they use it for two</font>

433
00:20:31,620 --> 00:20:35,100
<font color="#E5E5E5">sample drop packets they</font><font color="#CCCCCC"> they want to</font>

434
00:20:33,780 --> 00:20:38,970
sample<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the drop packets that</font>

435
00:20:35,100 --> 00:20:40,500
<font color="#E5E5E5">denial-of-service system is dropping so</font>

436
00:20:38,970 --> 00:20:43,050
they modify that and<font color="#E5E5E5"> they later they</font>

437
00:20:40,500 --> 00:20:48,770
catch it on with the<font color="#CCCCCC"> iptables rule to</font>

438
00:20:43,050 --> 00:20:52,040
lock that then we have something<font color="#CCCCCC"> called</font>

439
00:20:48,770 --> 00:20:54,720
<font color="#E5E5E5">metadata which is placed in</font><font color="#CCCCCC"> front of the</font>

440
00:20:52,040 --> 00:20:56,100
<font color="#CCCCCC">payload</font><font color="#E5E5E5"> so if the peak and right just</font><font color="#CCCCCC"> in</font>

441
00:20:54,720 --> 00:20:58,560
<font color="#E5E5E5">front of the payload it can also extend</font>

442
00:20:56,100 --> 00:21:00,330
the headers<font color="#E5E5E5"> of course but if you don't</font>

443
00:20:58,560 --> 00:21:03,060
want<font color="#E5E5E5"> the network stack to CDs for some</font>

444
00:21:00,330 --> 00:21:05,250
reason and just some metadata<font color="#E5E5E5"> you</font>

445
00:21:03,060 --> 00:21:08,490
created like CP level<font color="#CCCCCC"> you</font><font color="#E5E5E5"> put that you</font>

446
00:21:05,250 --> 00:21:13,410
can use these 32<font color="#CCCCCC"> bytes so the other</font>

447
00:21:08,490 --> 00:21:15,170
hooks like the TC<font color="#E5E5E5"> EPP hook can can use</font>

448
00:21:13,410 --> 00:21:20,370
this and update the fields in<font color="#E5E5E5"> this KP</font>

449
00:21:15,170 --> 00:21:21,840
but you can also like<font color="#E5E5E5"> save other</font>

450
00:21:20,370 --> 00:21:23,879
information and<font color="#E5E5E5"> the other thing is</font><font color="#CCCCCC"> that</font>

451
00:21:21,840 --> 00:21:25,860
<font color="#CCCCCC">for the AF HCP the raw frames need to</font>

452
00:21:23,880 --> 00:21:28,500
live<font color="#E5E5E5"> into user space it will</font><font color="#CCCCCC"> also be put</font>

453
00:21:25,860 --> 00:21:31,139
in<font color="#CCCCCC"> front of the payload so you can get</font>

454
00:21:28,500 --> 00:21:32,970
this information<font color="#E5E5E5"> there we have a lot of</font>

455
00:21:31,140 --> 00:21:35,040
interesting idea of getting<font color="#CCCCCC"> the hardware</font>

456
00:21:32,970 --> 00:21:37,740
actions<font color="#E5E5E5"> to put in this meta data for</font>

457
00:21:35,040 --> 00:21:39,540
<font color="#CCCCCC">example</font><font color="#E5E5E5"> killing and unique ID by reflow</font>

458
00:21:37,740 --> 00:21:41,780
that's something that a hopper can

459
00:21:39,540 --> 00:21:41,780
provide

460
00:21:42,230 --> 00:21:50,790
I'm very interesting thing is obvious

461
00:21:47,250 --> 00:21:52,950
<font color="#E5E5E5">though open V switch so billion from</font>

462
00:21:50,790 --> 00:21:55,590
from<font color="#CCCCCC"> where I have actually</font><font color="#E5E5E5"> implemented</font>

463
00:21:52,950 --> 00:21:58,830
<font color="#E5E5E5">three different ways of integrating with</font>

464
00:21:55,590 --> 00:22:02,730
with with<font color="#E5E5E5"> PPS and he did a</font><font color="#CCCCCC"> presentation</font>

465
00:21:58,830 --> 00:22:04,320
for on in the<font color="#CCCCCC"> plumpers</font><font color="#E5E5E5"> so we have he</font>

466
00:22:02,730 --> 00:22:08,420
actually did a full<font color="#E5E5E5"> implementation of</font>

467
00:22:04,320 --> 00:22:12,169
the<font color="#E5E5E5"> reimplementation obvious in in EPP</font>

468
00:22:08,420 --> 00:22:14,940
<font color="#CCCCCC">which I thought was a little bit</font>

469
00:22:12,170 --> 00:22:16,830
problematic<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> he basically implement</font>

470
00:22:14,940 --> 00:22:20,520
the whole thing<font color="#CCCCCC"> my whole idea would and</font>

471
00:22:16,830 --> 00:22:24,090
he had to<font color="#E5E5E5"> have several tail calls to put</font>

472
00:22:20,520 --> 00:22:27,660
in all this code to handle<font color="#E5E5E5"> all the</font>

473
00:22:24,090 --> 00:22:29,250
<font color="#CCCCCC">different kind</font><font color="#E5E5E5"> of cases</font><font color="#CCCCCC"> so time</font>

474
00:22:27,660 --> 00:22:31,530
especially<font color="#E5E5E5"> putting too much code in the</font>

475
00:22:29,250 --> 00:22:34,260
PPF step which<font color="#CCCCCC"> i think was</font><font color="#E5E5E5"> a mistake in</font>

476
00:22:31,530 --> 00:22:36,360
itself<font color="#E5E5E5"> like because you should be</font><font color="#CCCCCC"> a</font>

477
00:22:34,260 --> 00:22:38,940
<font color="#E5E5E5">little bit more smart and used</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> second</font>

478
00:22:36,360 --> 00:22:40,800
solution<font color="#E5E5E5"> to to offload a subset</font><font color="#CCCCCC"> to XTP</font>

479
00:22:38,940 --> 00:22:45,660
don't have the corner<font color="#E5E5E5"> cases they opened</font>

480
00:22:40,800 --> 00:22:47,100
<font color="#CCCCCC">fallback for the corner</font><font color="#E5E5E5"> cases he didn't</font>

481
00:22:45,660 --> 00:22:48,300
<font color="#E5E5E5">succeed with that because he was missing</font>

482
00:22:47,100 --> 00:22:50,459
<font color="#E5E5E5">some of the helpers</font><font color="#CCCCCC"> i talked about</font>

483
00:22:48,300 --> 00:22:51,928
<font color="#E5E5E5">before that he should have argumented</font>

484
00:22:50,460 --> 00:22:53,940
that he wanted to<font color="#E5E5E5"> add some help us to do</font>

485
00:22:51,929 --> 00:22:57,809
a<font color="#E5E5E5"> logo up in</font><font color="#CCCCCC"> the obvious criminal table</font>

486
00:22:53,940 --> 00:23:01,190
and what he did also<font color="#E5E5E5"> was actually also</font>

487
00:22:57,809 --> 00:23:04,860
<font color="#E5E5E5">implemented a FX TP integration with OBS</font>

488
00:23:01,190 --> 00:23:07,429
that<font color="#E5E5E5"> shows huge performance gains and i</font>

489
00:23:04,860 --> 00:23:10,350
think that's what they're going<font color="#E5E5E5"> with now</font>

490
00:23:07,429 --> 00:23:15,320
<font color="#CCCCCC">and we're going to hear a lot</font><font color="#E5E5E5"> about AF</font>

491
00:23:10,350 --> 00:23:17,730
<font color="#CCCCCC">x2p in just a minute I'll hand over</font>

492
00:23:15,320 --> 00:23:20,300
thank<font color="#E5E5E5"> you you gave me a couple of</font>

493
00:23:17,730 --> 00:23:20,300
<font color="#E5E5E5">minutes list</font>

494
00:23:25,130 --> 00:23:29,970
<font color="#CCCCCC">okay so I was</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> up here</font><font color="#E5E5E5"> here a</font>

495
00:23:27,660 --> 00:23:31,800
year ago together with<font color="#CCCCCC"> Whidbey on</font>

496
00:23:29,970 --> 00:23:34,260
presenting<font color="#E5E5E5"> a FX DP for the first time</font>

497
00:23:31,800 --> 00:23:36,330
and<font color="#CCCCCC"> that point in time it was an RFC</font><font color="#E5E5E5"> of</font>

498
00:23:34,260 --> 00:23:38,820
dubious quality<font color="#CCCCCC"> you could probably</font><font color="#E5E5E5"> use</font>

499
00:23:36,330 --> 00:23:40,379
it<font color="#CCCCCC"> to scare children with it but a lot</font>

500
00:23:38,820 --> 00:23:43,139
of<font color="#E5E5E5"> things has happened since then it</font>

501
00:23:40,380 --> 00:23:46,050
<font color="#E5E5E5">actually got into the</font><font color="#CCCCCC"> kernel in</font><font color="#E5E5E5"> 4:18 in</font>

502
00:23:43,140 --> 00:23:49,530
August<font color="#E5E5E5"> and the two first zero copy</font>

503
00:23:46,050 --> 00:23:52,020
<font color="#E5E5E5">drivers support</font><font color="#CCCCCC"> stuff got into 420 in in</font>

504
00:23:49,530 --> 00:23:54,450
<font color="#E5E5E5">December so tons of stuff</font><font color="#CCCCCC"> had happened</font>

505
00:23:52,020 --> 00:23:55,710
<font color="#CCCCCC">so what's this talk is gonna be about -</font>

506
00:23:54,450 --> 00:23:57,690
<font color="#CCCCCC">this part of</font><font color="#E5E5E5"> the talk it's</font><font color="#CCCCCC"> going to be</font>

507
00:23:55,710 --> 00:23:58,260
about three<font color="#E5E5E5"> things I'm going to show you</font>

508
00:23:57,690 --> 00:24:00,630
where<font color="#CCCCCC"> we are</font>

509
00:23:58,260 --> 00:24:02,310
<font color="#CCCCCC">performance wise I'm going to show you</font>

510
00:24:00,630 --> 00:24:05,340
<font color="#E5E5E5">some of the use cases and tie them</font><font color="#CCCCCC"> into</font>

511
00:24:02,310 --> 00:24:07,350
what just<font color="#CCCCCC"> we talked about</font><font color="#E5E5E5"> and then also</font>

512
00:24:05,340 --> 00:24:09,240
<font color="#E5E5E5">tell you what we're going to focus on</font>

513
00:24:07,350 --> 00:24:11,760
for this year<font color="#CCCCCC"> and try to get into the</font>

514
00:24:09,240 --> 00:24:14,340
kernel<font color="#E5E5E5"> it's not going to be about how a</font>

515
00:24:11,760 --> 00:24:16,379
<font color="#CCCCCC">fixed</font><font color="#E5E5E5"> EP works if you want to know that</font>

516
00:24:14,340 --> 00:24:18,270
<font color="#E5E5E5">you</font><font color="#CCCCCC"> should have</font><font color="#E5E5E5"> attended</font><font color="#CCCCCC"> last year</font><font color="#E5E5E5"> I'm</font>

517
00:24:16,380 --> 00:24:20,730
sorry<font color="#CCCCCC"> know you can actually go back to</font>

518
00:24:18,270 --> 00:24:22,139
<font color="#CCCCCC">the Linux</font><font color="#E5E5E5"> plumbers conference paper that</font>

519
00:24:20,730 --> 00:24:23,940
was published<font color="#E5E5E5"> in</font><font color="#CCCCCC"> November and read it</font>

520
00:24:22,140 --> 00:24:25,530
<font color="#CCCCCC">they will</font><font color="#E5E5E5"> just talk to</font><font color="#CCCCCC"> Burano</font><font color="#E5E5E5"> me or you</font>

521
00:24:23,940 --> 00:24:28,200
<font color="#CCCCCC">can talk</font><font color="#E5E5E5"> - yes / - he knows how it works</font>

522
00:24:25,530 --> 00:24:30,450
<font color="#E5E5E5">there's other people in the room yes you</font>

523
00:24:28,200 --> 00:24:35,910
know how it<font color="#E5E5E5"> works - so just talk to</font>

524
00:24:30,450 --> 00:24:37,140
people<font color="#E5E5E5"> and we can explain it okay so I'm</font>

525
00:24:35,910 --> 00:24:38,610
<font color="#CCCCCC">just</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go through little bit</font><font color="#E5E5E5"> of</font>

526
00:24:37,140 --> 00:24:40,650
the<font color="#E5E5E5"> basics I mean yes but already</font>

527
00:24:38,610 --> 00:24:43,679
covered some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this but really what AF</font>

528
00:24:40,650 --> 00:24:45,960
HCP is it's the way of<font color="#CCCCCC"> getting packets</font>

529
00:24:43,680 --> 00:24:47,190
from<font color="#CCCCCC"> xdp out to user space</font><font color="#E5E5E5"> very very</font>

530
00:24:45,960 --> 00:24:49,770
<font color="#E5E5E5">quickly</font>

531
00:24:47,190 --> 00:24:51,900
completely unmodified<font color="#E5E5E5"> this whatever exit</font>

532
00:24:49,770 --> 00:24:54,600
<font color="#E5E5E5">it does with</font><font color="#CCCCCC"> the packet</font><font color="#E5E5E5"> that's what you</font>

533
00:24:51,900 --> 00:24:56,550
see in user space<font color="#CCCCCC"> and actually it is an</font>

534
00:24:54,600 --> 00:24:58,050
option<font color="#CCCCCC"> I mean you know when you</font><font color="#E5E5E5"> write to</font>

535
00:24:56,550 --> 00:25:01,590
<font color="#E5E5E5">exit a program you can either direct</font>

536
00:24:58,050 --> 00:25:03,120
<font color="#E5E5E5">your packet into the kernel stack with X</font>

537
00:25:01,590 --> 00:25:05,220
to<font color="#E5E5E5"> be pass you</font><font color="#CCCCCC"> can redirect it to</font>

538
00:25:03,120 --> 00:25:07,949
<font color="#E5E5E5">another NIC driver</font><font color="#CCCCCC"> get it out there and</font>

539
00:25:05,220 --> 00:25:10,320
<font color="#E5E5E5">we</font><font color="#CCCCCC"> add an option to be able</font><font color="#E5E5E5"> to redirect</font>

540
00:25:07,950 --> 00:25:12,390
it into user space<font color="#E5E5E5"> so you can actually</font>

541
00:25:10,320 --> 00:25:13,860
<font color="#E5E5E5">target you know we can tell exactly what</font>

542
00:25:12,390 --> 00:25:17,340
socket you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> redirect so you can</font>

543
00:25:13,860 --> 00:25:19,320
actually make a load balancer in<font color="#CCCCCC"> xdp to</font>

544
00:25:17,340 --> 00:25:24,770
load<font color="#CCCCCC"> balanced packets across</font><font color="#E5E5E5"> a FX deeply</font>

545
00:25:19,320 --> 00:25:27,560
socket<font color="#CCCCCC"> you know so</font><font color="#E5E5E5"> really nice so</font>

546
00:25:24,770 --> 00:25:30,230
but that really<font color="#E5E5E5"> what we're gonna target</font>

547
00:25:27,560 --> 00:25:32,060
here<font color="#CCCCCC"> is its performance so where</font><font color="#E5E5E5"> are we</font>

548
00:25:30,230 --> 00:25:34,280
know and I'm going<font color="#E5E5E5"> to start by showing</font>

549
00:25:32,060 --> 00:25:39,770
<font color="#E5E5E5">you where we are with a code that's in</font>

550
00:25:34,280 --> 00:25:41,990
<font color="#E5E5E5">kernel.org at the moment so for</font><font color="#CCCCCC"> 420</font><font color="#E5E5E5"> and</font>

551
00:25:39,770 --> 00:25:44,840
the methodology is that<font color="#CCCCCC"> we just have a</font>

552
00:25:41,990 --> 00:25:48,980
<font color="#E5E5E5">in a regular Broadwell server 2.7</font>

553
00:25:44,840 --> 00:25:51,409
gigahertz<font color="#CCCCCC"> we use the</font><font color="#E5E5E5"> Linux kernel</font><font color="#CCCCCC"> 420 we</font>

554
00:25:48,980 --> 00:25:54,440
have all the spectra and<font color="#CCCCCC"> meltdown my</font>

555
00:25:51,410 --> 00:25:57,440
<font color="#E5E5E5">Turkish mitigations</font><font color="#CCCCCC"> on so all of it</font><font color="#E5E5E5"> is</font>

556
00:25:54,440 --> 00:26:01,640
on so we have not<font color="#E5E5E5"> turned that off</font>

557
00:25:57,440 --> 00:26:04,430
we used to<font color="#CCCCCC"> nix 2 in 10 I</font><font color="#E5E5E5"> 14x 40 gig</font>

558
00:26:01,640 --> 00:26:06,050
<font color="#CCCCCC">Knicks</font><font color="#E5E5E5"> because we</font><font color="#CCCCCC"> actually need to</font><font color="#E5E5E5"> to</font>

559
00:26:04,430 --> 00:26:08,630
show you the numbers<font color="#E5E5E5"> which is good</font><font color="#CCCCCC"> and</font>

560
00:26:06,050 --> 00:26:10,639
we're going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> 2 AF xtp sockets per</font>

561
00:26:08,630 --> 00:26:13,190
<font color="#E5E5E5">Nick so it's going to be</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> tubes that we</font>

562
00:26:10,640 --> 00:26:15,110
want<font color="#E5E5E5"> to use in this benchmarks I'm gonna</font>

563
00:26:13,190 --> 00:26:17,720
man<font color="#CCCCCC"> Excel Oh generator like</font><font color="#E5E5E5"> a commercial</font>

564
00:26:15,110 --> 00:26:20,510
<font color="#CCCCCC">or generative is blasting at this</font><font color="#E5E5E5"> Nick's</font>

565
00:26:17,720 --> 00:26:24,650
at 40<font color="#CCCCCC"> gigabit</font><font color="#E5E5E5"> per second or per second</font>

566
00:26:20,510 --> 00:26:26,450
per Nick so just full blast<font color="#CCCCCC"> and I'm</font>

567
00:26:24,650 --> 00:26:27,740
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start with</font><font color="#CCCCCC"> just showing</font><font color="#E5E5E5"> where</font>

568
00:26:26,450 --> 00:26:29,420
we are with the<font color="#CCCCCC"> current code base</font><font color="#E5E5E5"> so</font>

569
00:26:27,740 --> 00:26:31,730
<font color="#CCCCCC">these are the</font><font color="#E5E5E5"> zero copy drivers you find</font>

570
00:26:29,420 --> 00:26:34,430
in 420 they were not optimized for

571
00:26:31,730 --> 00:26:35,810
<font color="#E5E5E5">performance</font><font color="#CCCCCC"> they were just we're just so</font>

572
00:26:34,430 --> 00:26:37,670
happy without<font color="#CCCCCC"> it in you know it's a</font>

573
00:26:35,810 --> 00:26:38,990
<font color="#CCCCCC">talkie I just get it worked and just get</font>

574
00:26:37,670 --> 00:26:42,500
it in there<font color="#E5E5E5"> but I'm going</font><font color="#CCCCCC"> to show</font><font color="#E5E5E5"> you</font>

575
00:26:38,990 --> 00:26:44,270
how we compare against<font color="#CCCCCC"> AF packet</font><font color="#E5E5E5"> because</font>

576
00:26:42,500 --> 00:26:46,010
today I mean<font color="#E5E5E5"> if you use Linux and you</font>

577
00:26:44,270 --> 00:26:50,030
want raw packets<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use of space you say</font>

578
00:26:46,010 --> 00:26:51,740
<font color="#E5E5E5">F packet</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> AF packet is the purple</font>

579
00:26:50,030 --> 00:26:54,440
<font color="#E5E5E5">stuff on the bottom</font><font color="#CCCCCC"> there which we</font>

580
00:26:51,740 --> 00:26:59,660
barely<font color="#E5E5E5"> see and the green stuff is a</font><font color="#CCCCCC"> fix</font>

581
00:26:54,440 --> 00:27:02,630
<font color="#CCCCCC">to be in zero copy yes oh</font><font color="#E5E5E5"> why</font><font color="#CCCCCC"> short a</font>

582
00:26:59,660 --> 00:27:04,250
<font color="#E5E5E5">little cap you know or</font><font color="#CCCCCC"> you're rather</font>

583
00:27:02,630 --> 00:27:07,070
lost<font color="#E5E5E5"> about application running but</font>

584
00:27:04,250 --> 00:27:08,930
that's that's<font color="#E5E5E5"> the usual case and this is</font>

585
00:27:07,070 --> 00:27:11,389
the green<font color="#CCCCCC"> one is a fixed billion zero</font>

586
00:27:08,930 --> 00:27:14,210
copy mode<font color="#E5E5E5"> on the y-axis you</font><font color="#CCCCCC"> have a</font>

587
00:27:11,390 --> 00:27:16,730
megabits per second<font color="#CCCCCC"> 64-bit</font><font color="#E5E5E5"> packets and</font>

588
00:27:14,210 --> 00:27:24,190
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> three different applications</font>

589
00:27:16,730 --> 00:27:27,620
<font color="#CCCCCC">here on the bottom line needs sorry</font><font color="#E5E5E5"> and</font>

590
00:27:24,190 --> 00:27:29,480
on the on the<font color="#CCCCCC"> bottom there you have</font>

591
00:27:27,620 --> 00:27:32,419
<font color="#E5E5E5">three micro benchmarks and they're</font>

592
00:27:29,480 --> 00:27:34,220
<font color="#E5E5E5">really simple so the first one is</font><font color="#CCCCCC"> our X</font>

593
00:27:32,420 --> 00:27:36,290
<font color="#CCCCCC">dropped to the left</font><font color="#E5E5E5"> it just tries to</font>

594
00:27:34,220 --> 00:27:37,330
receive packets as fast as possible

595
00:27:36,290 --> 00:27:39,760
doesn't

596
00:27:37,330 --> 00:27:41,379
the data<font color="#E5E5E5"> just receive</font><font color="#CCCCCC"> it drop it I mean</font>

597
00:27:39,760 --> 00:27:43,030
anything that<font color="#E5E5E5"> you do with rx is going</font><font color="#CCCCCC"> to</font>

598
00:27:41,380 --> 00:27:44,620
<font color="#E5E5E5">be slower than this</font><font color="#CCCCCC"> I mean because</font>

599
00:27:43,030 --> 00:27:46,930
<font color="#E5E5E5">you're not doing anything just receiving</font>

600
00:27:44,620 --> 00:27:50,199
<font color="#E5E5E5">it and</font><font color="#CCCCCC"> see exposure</font><font color="#E5E5E5"> is the same thing</font>

601
00:27:46,930 --> 00:27:51,640
but<font color="#E5E5E5"> for TX you use pre-generated packets</font>

602
00:27:50,200 --> 00:27:53,380
and<font color="#CCCCCC"> just try</font><font color="#E5E5E5"> to send them as quickly as</font>

603
00:27:51,640 --> 00:27:54,850
<font color="#CCCCCC">possible you don't touch the</font><font color="#E5E5E5"> data there</font>

604
00:27:53,380 --> 00:27:56,740
because it's pretty generated so

605
00:27:54,850 --> 00:27:58,480
anything with TX will be slower<font color="#CCCCCC"> than</font>

606
00:27:56,740 --> 00:28:00,490
that<font color="#E5E5E5"> that's like the fastest you can go</font>

607
00:27:58,480 --> 00:28:02,800
and then<font color="#CCCCCC"> you have another</font><font color="#E5E5E5"> toy</font>

608
00:28:00,490 --> 00:28:04,750
application<font color="#E5E5E5"> actually touches the</font><font color="#CCCCCC"> it's</font>

609
00:28:02,800 --> 00:28:07,389
<font color="#E5E5E5">just an l2 for</font><font color="#CCCCCC"> whether it does you know</font>

610
00:28:04,750 --> 00:28:09,460
receives a packet does<font color="#CCCCCC"> a</font><font color="#E5E5E5"> max what so it</font>

611
00:28:07,390 --> 00:28:12,490
<font color="#CCCCCC">touches the header sends</font><font color="#E5E5E5"> it out on the</font>

612
00:28:09,460 --> 00:28:14,800
interface again<font color="#E5E5E5"> so to first first ones</font>

613
00:28:12,490 --> 00:28:16,870
<font color="#E5E5E5">do not</font><font color="#CCCCCC"> touch the data last one touches</font>

614
00:28:14,800 --> 00:28:19,870
the data and as you<font color="#E5E5E5"> can see here</font><font color="#CCCCCC"> we're</font>

615
00:28:16,870 --> 00:28:23,050
you know somewhere<font color="#CCCCCC"> between</font><font color="#E5E5E5"> fifteen and</font>

616
00:28:19,870 --> 00:28:27,010
<font color="#E5E5E5">twenty</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> times as fast as as</font><font color="#CCCCCC"> AF</font>

617
00:28:23,050 --> 00:28:30,790
packet so you can actually<font color="#E5E5E5"> do packet</font>

618
00:28:27,010 --> 00:28:32,830
sniffing on you know<font color="#E5E5E5"> 40 gig why I mean</font>

619
00:28:30,790 --> 00:28:35,170
not if you<font color="#E5E5E5"> send 64 bit packets obviously</font>

620
00:28:32,830 --> 00:28:36,490
but if you if you have larger packets

621
00:28:35,170 --> 00:28:41,800
you<font color="#CCCCCC"> can actually do it now with the</font>

622
00:28:36,490 --> 00:28:43,480
<font color="#E5E5E5">afxp0 copy yes it's a</font><font color="#CCCCCC"> thing yeah no</font>

623
00:28:41,800 --> 00:28:45,040
actually<font color="#E5E5E5"> we get to that it's actually</font>

624
00:28:43,480 --> 00:28:47,230
<font color="#CCCCCC">too coarse but</font><font color="#E5E5E5"> we'll get to that that's</font>

625
00:28:45,040 --> 00:28:49,330
<font color="#E5E5E5">very it's like two slides</font><font color="#CCCCCC"> we'll get just</font>

626
00:28:47,230 --> 00:28:52,270
from<font color="#E5E5E5"> two</font><font color="#CCCCCC"> course to</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> quarter</font><font color="#E5E5E5"> I'll show</font>

627
00:28:49,330 --> 00:28:53,620
you so it's<font color="#E5E5E5"> basically one core because</font>

628
00:28:52,270 --> 00:28:56,110
the<font color="#E5E5E5"> application was not</font><font color="#CCCCCC"> doing anything</font>

629
00:28:53,620 --> 00:28:57,939
but it is<font color="#E5E5E5"> two cores that are used it's</font>

630
00:28:56,110 --> 00:29:01,360
here it's just<font color="#E5E5E5"> off</font><font color="#CCCCCC"> tightly running but</font>

631
00:28:57,940 --> 00:29:03,340
we'll<font color="#E5E5E5"> get to that two slides yeah so</font>

632
00:29:01,360 --> 00:29:05,649
what we did<font color="#E5E5E5"> then</font><font color="#CCCCCC"> during</font><font color="#E5E5E5"> a default was to</font>

633
00:29:03,340 --> 00:29:06,879
say<font color="#CCCCCC"> yeah let's actually scratch our</font>

634
00:29:05,650 --> 00:29:08,620
heads and try to do some performance

635
00:29:06,880 --> 00:29:12,940
<font color="#E5E5E5">optimizations on this code and see where</font>

636
00:29:08,620 --> 00:29:14,199
we<font color="#CCCCCC"> can get so that's</font><font color="#E5E5E5"> what we did</font><font color="#CCCCCC"> and</font>

637
00:29:12,940 --> 00:29:16,480
presented at the<font color="#CCCCCC"> Linux thermos</font>

638
00:29:14,200 --> 00:29:19,540
conference and now the previous results

639
00:29:16,480 --> 00:29:22,680
you have are the purple<font color="#CCCCCC"> blueish stuff on</font>

640
00:29:19,540 --> 00:29:24,940
the left there<font color="#E5E5E5"> and the green bars is the</font>

641
00:29:22,680 --> 00:29:28,510
<font color="#CCCCCC">patches we have in-house and are now</font>

642
00:29:24,940 --> 00:29:30,400
trying<font color="#CCCCCC"> to upstream performance wise</font><font color="#E5E5E5"> and</font>

643
00:29:28,510 --> 00:29:33,100
<font color="#E5E5E5">if you can see the green ones here we</font>

644
00:29:30,400 --> 00:29:34,900
can get an increase of 11.5 150%

645
00:29:33,100 --> 00:29:36,280
increase in performance<font color="#E5E5E5"> with the</font>

646
00:29:34,900 --> 00:29:37,960
performance optimizations that we have

647
00:29:36,280 --> 00:29:40,780
now and some<font color="#E5E5E5"> of them are really simple</font>

648
00:29:37,960 --> 00:29:43,300
<font color="#E5E5E5">and we've already upstream some some of</font>

649
00:29:40,780 --> 00:29:44,649
them<font color="#CCCCCC"> others</font><font color="#E5E5E5"> are more complicated but</font>

650
00:29:43,300 --> 00:29:47,620
<font color="#E5E5E5">this is what you can get now so we're</font>

651
00:29:44,650 --> 00:29:51,559
talking<font color="#E5E5E5"> here like receiving 39 million</font>

652
00:29:47,620 --> 00:29:54,178
packets a second for you know

653
00:29:51,559 --> 00:29:56,610
one<font color="#CCCCCC"> application core and one software aq</font>

654
00:29:54,179 --> 00:29:59,820
core<font color="#E5E5E5"> and</font><font color="#CCCCCC"> TX we can get all the way to 68</font>

655
00:29:56,610 --> 00:30:02,639
million packets a second which is<font color="#E5E5E5"> pretty</font>

656
00:29:59,820 --> 00:30:04,110
<font color="#CCCCCC">impressive I think</font><font color="#E5E5E5"> and then when you</font>

657
00:30:02,640 --> 00:30:05,370
start<font color="#CCCCCC"> to</font><font color="#E5E5E5"> touch the data here of course</font>

658
00:30:04,110 --> 00:30:07,620
<font color="#E5E5E5">it drops because you have to bring you</font>

659
00:30:05,370 --> 00:30:11,039
know<font color="#CCCCCC"> headers and stuff</font><font color="#E5E5E5"> into your cache</font>

660
00:30:07,620 --> 00:30:12,059
and way down<font color="#E5E5E5"> to 22 but still let me know</font>

661
00:30:11,039 --> 00:30:14,220
<font color="#E5E5E5">an improvement here is like from</font>

662
00:30:12,059 --> 00:30:16,200
<font color="#E5E5E5">nineteen eighty</font><font color="#CCCCCC"> five ninety</font><font color="#E5E5E5"> percent two</font>

663
00:30:14,220 --> 00:30:18,929
<font color="#CCCCCC">hundred fifty percent compared to</font><font color="#E5E5E5"> what</font>

664
00:30:16,200 --> 00:30:20,190
we have now<font color="#CCCCCC"> in the 420 current so now I</font>

665
00:30:18,929 --> 00:30:21,809
think<font color="#E5E5E5"> we're there if you look at the</font>

666
00:30:20,190 --> 00:30:25,350
green stuff here<font color="#E5E5E5"> it's starting to look</font>

667
00:30:21,809 --> 00:30:27,629
<font color="#E5E5E5">pretty good yeah</font><font color="#CCCCCC"> but we'll</font><font color="#E5E5E5"> get to the</font>

668
00:30:25,350 --> 00:30:29,668
question you<font color="#E5E5E5"> have there so how are you</font>

669
00:30:27,630 --> 00:30:31,289
actually running<font color="#E5E5E5"> this and there's a</font>

670
00:30:29,669 --> 00:30:32,850
there's<font color="#CCCCCC"> a link down here to the paper</font>

671
00:30:31,289 --> 00:30:34,559
and<font color="#E5E5E5"> the paper will tell you all about</font>

672
00:30:32,850 --> 00:30:36,689
<font color="#E5E5E5">you know the tallness optimizations we</font>

673
00:30:34,559 --> 00:30:38,039
<font color="#E5E5E5">need to get to this but</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

674
00:30:36,690 --> 00:30:39,750
go<font color="#E5E5E5"> through that today but please click</font>

675
00:30:38,039 --> 00:30:43,140
on the link you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> download the paper</font>

676
00:30:39,750 --> 00:30:44,520
and take you take<font color="#E5E5E5"> a look so how do we</font>

677
00:30:43,140 --> 00:30:47,190
<font color="#CCCCCC">actually run this and that gets</font><font color="#E5E5E5"> your</font>

678
00:30:44,520 --> 00:30:49,350
question<font color="#E5E5E5"> so currently with the</font>

679
00:30:47,190 --> 00:30:50,760
benchmarks<font color="#E5E5E5"> you I showed you we run this</font>

680
00:30:49,350 --> 00:30:52,678
in what we call it was going to call<font color="#CCCCCC"> it</font>

681
00:30:50,760 --> 00:30:55,110
run to completion mode so we have<font color="#CCCCCC"> two</font>

682
00:30:52,679 --> 00:30:57,809
<font color="#E5E5E5">cores one core is is doing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> software</font>

683
00:30:55,110 --> 00:31:00,360
<font color="#CCCCCC">EQ so you receiving the packets from in</font>

684
00:30:57,809 --> 00:31:04,049
in<font color="#CCCCCC"> Navi mode and the other</font><font color="#E5E5E5"> core is the</font>

685
00:31:00,360 --> 00:31:06,029
<font color="#CCCCCC">application in this you know puny little</font>

686
00:31:04,049 --> 00:31:07,230
micro benchmarks the application course

687
00:31:06,029 --> 00:31:08,700
not<font color="#E5E5E5"> basically going</font><font color="#CCCCCC"> to do anything it's</font>

688
00:31:07,230 --> 00:31:10,919
going<font color="#E5E5E5"> to receive packet and drop it or</font>

689
00:31:08,700 --> 00:31:12,840
just send them so it<font color="#E5E5E5"> is going to be very</font>

690
00:31:10,919 --> 00:31:14,340
lightly loaded<font color="#E5E5E5"> and the software is gonna</font>

691
00:31:12,840 --> 00:31:17,820
be<font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> cent loaded so that's the</font>

692
00:31:14,340 --> 00:31:19,199
bottleneck<font color="#E5E5E5"> but really this</font><font color="#CCCCCC"> is not how</font>

693
00:31:17,820 --> 00:31:20,760
you would like<font color="#E5E5E5"> to run it because you're</font>

694
00:31:19,200 --> 00:31:22,919
<font color="#E5E5E5">gonna waste the whole</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> core</font>

695
00:31:20,760 --> 00:31:24,929
spinning<font color="#E5E5E5"> because it is busy polling it's</font>

696
00:31:22,919 --> 00:31:26,399
a hundred<font color="#E5E5E5"> percent</font><font color="#CCCCCC"> you know and it</font><font color="#E5E5E5"> seems</font>

697
00:31:24,929 --> 00:31:28,590
that<font color="#E5E5E5"> most people</font><font color="#CCCCCC"> don't want to</font><font color="#E5E5E5"> do that</font>

698
00:31:26,399 --> 00:31:30,779
they<font color="#E5E5E5"> want to do something where you</font>

699
00:31:28,590 --> 00:31:32,129
actually can sleep you know equality<font color="#CCCCCC"> is</font>

700
00:31:30,779 --> 00:31:32,880
<font color="#CCCCCC">called</font><font color="#E5E5E5"> going to the kernel if you're not</font>

701
00:31:32,130 --> 00:31:34,649
doing<font color="#E5E5E5"> anything</font>

702
00:31:32,880 --> 00:31:37,440
you can schedule in something else<font color="#CCCCCC"> or</font>

703
00:31:34,649 --> 00:31:38,668
power say but whatever you want to do so

704
00:31:37,440 --> 00:31:40,200
then we can actually do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so we have</font>

705
00:31:38,669 --> 00:31:42,600
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> dates with what we call the</font>

706
00:31:40,200 --> 00:31:44,429
policy<font color="#E5E5E5"> score so if you just take the</font>

707
00:31:42,600 --> 00:31:47,100
file descriptor<font color="#CCCCCC"> or the socket and</font>

708
00:31:44,429 --> 00:31:49,740
provide it to the<font color="#CCCCCC"> policy's</font><font color="#E5E5E5"> call and call</font>

709
00:31:47,100 --> 00:31:51,870
<font color="#E5E5E5">it there's something called the</font><font color="#CCCCCC"> busy</font>

710
00:31:49,740 --> 00:31:54,600
<font color="#CCCCCC">poll it's really confusing it's called</font>

711
00:31:51,870 --> 00:31:56,129
the busy<font color="#E5E5E5"> poll mode or poll</font><font color="#CCCCCC"> Adams gonna</font>

712
00:31:54,600 --> 00:31:58,320
call it a policy<font color="#CCCCCC"> score what it does is</font>

713
00:31:56,130 --> 00:31:59,039
<font color="#E5E5E5">when</font><font color="#CCCCCC"> you call Paul the code is</font><font color="#E5E5E5"> going to</font>

714
00:31:58,320 --> 00:32:02,100
itself

715
00:31:59,039 --> 00:32:03,870
drive<font color="#E5E5E5"> the not be context in the driver</font>

716
00:32:02,100 --> 00:32:06,059
<font color="#E5E5E5">so the application calls</font>

717
00:32:03,870 --> 00:32:08,879
<font color="#CCCCCC">Paul you go down it starts to run</font><font color="#E5E5E5"> the</font>

718
00:32:06,059 --> 00:32:10,350
driver<font color="#E5E5E5"> you know in the same context get</font>

719
00:32:08,880 --> 00:32:11,790
some packets<font color="#E5E5E5"> go up again to the</font>

720
00:32:10,350 --> 00:32:13,559
application the application reads them

721
00:32:11,790 --> 00:32:16,020
<font color="#E5E5E5">so what you get there</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you get</font>

722
00:32:13,559 --> 00:32:17,940
more like a<font color="#CCCCCC"> DP DK way of overdoing it</font>

723
00:32:16,020 --> 00:32:20,309
<font color="#E5E5E5">it's just one</font><font color="#CCCCCC"> core</font><font color="#E5E5E5"> driving the whole</font>

724
00:32:17,940 --> 00:32:22,710
thing<font color="#E5E5E5"> the one core where you have the</font>

725
00:32:20,309 --> 00:32:25,980
<font color="#CCCCCC">application you have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> r HT x pole</font><font color="#E5E5E5"> you</font>

726
00:32:22,710 --> 00:32:28,650
know<font color="#CCCCCC"> the not be this one</font><font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> the</font>

727
00:32:25,980 --> 00:32:30,630
only<font color="#CCCCCC"> single core</font><font color="#E5E5E5"> the difference here of</font>

728
00:32:28,650 --> 00:32:32,040
course<font color="#CCCCCC"> between</font><font color="#E5E5E5"> DP d</font><font color="#CCCCCC"> KD p DK all of this</font>

729
00:32:30,630 --> 00:32:33,720
<font color="#CCCCCC">william running</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> space you have no</font>

730
00:32:32,040 --> 00:32:36,059
you know<font color="#CCCCCC"> suite mode switches between</font>

731
00:32:33,720 --> 00:32:39,090
<font color="#E5E5E5">user space and kernel we have to pay for</font>

732
00:32:36,059 --> 00:32:40,889
<font color="#E5E5E5">left of course and the</font><font color="#CCCCCC"> cisco</font><font color="#E5E5E5"> but you're</font>

733
00:32:39,090 --> 00:32:42,659
<font color="#E5E5E5">not going to call</font><font color="#CCCCCC"> paul for every single</font>

734
00:32:40,890 --> 00:32:44,640
<font color="#E5E5E5">packet you call it for</font><font color="#CCCCCC"> backshell</font><font color="#E5E5E5"> packets</font>

735
00:32:42,660 --> 00:32:48,170
<font color="#E5E5E5">and in the examples we have it's like</font>

736
00:32:44,640 --> 00:32:51,870
<font color="#CCCCCC">64-bit</font><font color="#E5E5E5"> you can you can you</font><font color="#CCCCCC"> can tune it</font>

737
00:32:48,170 --> 00:32:54,390
<font color="#E5E5E5">this support the basic</font><font color="#CCCCCC"> poll support is</font>

738
00:32:51,870 --> 00:32:56,159
<font color="#CCCCCC">actually in in the</font><font color="#E5E5E5"> car</font><font color="#CCCCCC"> nori but this</font>

739
00:32:54,390 --> 00:32:58,620
<font color="#E5E5E5">support where you can execute all the</font>

740
00:32:56,160 --> 00:33:00,390
<font color="#CCCCCC">way to</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> be it's not in the 420 kernel</font>

741
00:32:58,620 --> 00:33:07,110
so I'm working on that<font color="#E5E5E5"> then I'll send</font>

742
00:33:00,390 --> 00:33:08,520
some RFC out in a few<font color="#CCCCCC"> weeks</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it but it</font>

743
00:33:07,110 --> 00:33:11,428
seems like<font color="#CCCCCC"> people that's that's</font><font color="#E5E5E5"> what</font>

744
00:33:08,520 --> 00:33:12,900
people want<font color="#E5E5E5"> to use so how does that look</font>

745
00:33:11,429 --> 00:33:15,630
<font color="#CCCCCC">the form is why</font><font color="#E5E5E5"> so of course is going</font><font color="#CCCCCC"> to</font>

746
00:33:12,900 --> 00:33:16,920
<font color="#E5E5E5">drop we're using just one single</font><font color="#CCCCCC"> core</font><font color="#E5E5E5"> we</font>

747
00:33:15,630 --> 00:33:19,890
have<font color="#CCCCCC"> to do mode switches we have to do</font>

748
00:33:16,920 --> 00:33:21,720
<font color="#E5E5E5">sis calls so it's going to drop compared</font>

749
00:33:19,890 --> 00:33:24,150
<font color="#E5E5E5">to the other mode and what you can</font><font color="#CCCCCC"> see</font>

750
00:33:21,720 --> 00:33:26,760
here<font color="#E5E5E5"> it's like it for the RX drop it</font>

751
00:33:24,150 --> 00:33:31,290
drops from 39 down to 30 you know from

752
00:33:26,760 --> 00:33:34,670
68 to 51<font color="#E5E5E5"> for TX and a drop from 22 to 16</font>

753
00:33:31,290 --> 00:33:36,928
so we we have a drop of<font color="#CCCCCC"> 20-30 percent</font>

754
00:33:34,670 --> 00:33:38,940
<font color="#E5E5E5">compared to but we're only using one</font>

755
00:33:36,929 --> 00:33:40,890
<font color="#E5E5E5">core now instead of two course so if you</font>

756
00:33:38,940 --> 00:33:43,170
look at<font color="#E5E5E5"> it on</font><font color="#CCCCCC"> a per core basis were</font>

757
00:33:40,890 --> 00:33:45,540
actually<font color="#CCCCCC"> performing better because you</font>

758
00:33:43,170 --> 00:33:46,890
can now use two cores to process it<font color="#E5E5E5"> and</font>

759
00:33:45,540 --> 00:33:49,678
of course<font color="#E5E5E5"> that will double then it would</font>

760
00:33:46,890 --> 00:33:52,110
be 60 million<font color="#E5E5E5"> packets a second</font><font color="#CCCCCC"> for extra</font>

761
00:33:49,679 --> 00:33:56,700
and<font color="#CCCCCC"> 100 you</font><font color="#E5E5E5"> know two million</font><font color="#CCCCCC"> packed</font>

762
00:33:52,110 --> 00:33:58,290
<font color="#E5E5E5">second 40 exposure and so on so I still</font>

763
00:33:56,700 --> 00:34:00,890
if you<font color="#E5E5E5"> look at like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this actually</font>

764
00:33:58,290 --> 00:34:00,889
performs better

765
00:34:02,010 --> 00:34:06,299
but the key question<font color="#CCCCCC"> is now how do we</font>

766
00:34:04,290 --> 00:34:09,109
<font color="#E5E5E5">compare to</font><font color="#CCCCCC"> dp/dt goes deep indicates the</font>

767
00:34:06,299 --> 00:34:13,800
benchmark<font color="#E5E5E5"> of how fast you can go</font>

768
00:34:09,109 --> 00:34:16,409
so if<font color="#E5E5E5"> we compare now we have four graphs</font>

769
00:34:13,800 --> 00:34:17,820
on each<font color="#E5E5E5"> single benchmark so furthest to</font>

770
00:34:16,409 --> 00:34:20,070
the left you have<font color="#E5E5E5"> the run to completion</font>

771
00:34:17,820 --> 00:34:24,419
mode<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> fixed V</font><font color="#E5E5E5"> where we use</font><font color="#CCCCCC"> to course</font>

772
00:34:20,070 --> 00:34:26,639
and<font color="#E5E5E5"> the green one is the pulse is called</font>

773
00:34:24,418 --> 00:34:29,158
<font color="#E5E5E5">we use a single core and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Cisco to go</font>

774
00:34:26,639 --> 00:34:32,100
into the<font color="#CCCCCC"> kernel and</font><font color="#E5E5E5"> then you have D</font><font color="#CCCCCC"> PDK</font>

775
00:34:29,159 --> 00:34:34,409
with a scalar driver<font color="#E5E5E5"> so same kind of</font>

776
00:34:32,100 --> 00:34:36,449
driver that<font color="#E5E5E5"> we use in Linux with</font><font color="#CCCCCC"> scaler</font>

777
00:34:34,409 --> 00:34:39,389
and<font color="#E5E5E5"> then you have further still</font><font color="#CCCCCC"> white</font>

778
00:34:36,449 --> 00:34:41,189
the yellow<font color="#CCCCCC"> one or orange one it's going</font>

779
00:34:39,389 --> 00:34:42,510
<font color="#E5E5E5">to be deeply</font><font color="#CCCCCC"> dkb the</font><font color="#E5E5E5"> vectorize drivers</font>

780
00:34:41,190 --> 00:34:46,320
and we don't have any vector<font color="#E5E5E5"> s stories</font>

781
00:34:42,510 --> 00:34:47,879
in the kernel<font color="#E5E5E5"> at least not</font><font color="#CCCCCC"> yet if we</font>

782
00:34:46,320 --> 00:34:49,320
<font color="#E5E5E5">just ignore the</font><font color="#CCCCCC"> vectorize</font><font color="#E5E5E5"> drive the</font>

783
00:34:47,879 --> 00:34:52,319
<font color="#E5E5E5">first and just look at the other one we</font>

784
00:34:49,320 --> 00:34:56,040
can see<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> still lagging some</font>

785
00:34:52,320 --> 00:34:58,710
behind for for the for<font color="#E5E5E5"> the RX path it's</font>

786
00:34:56,040 --> 00:35:01,500
maybe<font color="#CCCCCC"> 40 percent drop</font><font color="#E5E5E5"> if I compare the</font>

787
00:34:58,710 --> 00:35:03,330
the<font color="#E5E5E5"> poll syscall with the with the PDK</font>

788
00:35:01,500 --> 00:35:05,760
because the PDK here is only using a

789
00:35:03,330 --> 00:35:07,529
single<font color="#CCCCCC"> core it's not using</font><font color="#E5E5E5"> to course you</font>

790
00:35:05,760 --> 00:35:10,320
know<font color="#E5E5E5"> so it really should be compared to</font>

791
00:35:07,530 --> 00:35:12,000
the poll<font color="#E5E5E5"> Cisco yeah on TX it looks</font>

792
00:35:10,320 --> 00:35:15,150
better<font color="#E5E5E5"> I mean run to completion mode</font>

793
00:35:12,000 --> 00:35:17,580
<font color="#E5E5E5">active it's faster than the DPD</font><font color="#CCCCCC"> case</font>

794
00:35:15,150 --> 00:35:19,950
<font color="#E5E5E5">scalar driver again but if you look at</font>

795
00:35:17,580 --> 00:35:21,779
the at the<font color="#CCCCCC"> policy's call</font><font color="#E5E5E5"> which uses as</font>

796
00:35:19,950 --> 00:35:24,839
many courses<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PDK it's still a drop</font>

797
00:35:21,780 --> 00:35:26,880
there<font color="#E5E5E5"> will within maybe you know</font><font color="#CCCCCC"> 20</font>

798
00:35:24,840 --> 00:35:29,310
percent or 80 percent of the PDK<font color="#E5E5E5"> speeder</font>

799
00:35:26,880 --> 00:35:32,720
<font color="#E5E5E5">and it's similar result if you</font><font color="#CCCCCC"> go to l2</font>

800
00:35:29,310 --> 00:35:36,799
forward is a<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> percent</font><font color="#CCCCCC"> you know 12%</font>

801
00:35:32,720 --> 00:35:39,810
drop<font color="#CCCCCC"> there or</font><font color="#E5E5E5"> 20 percent drop for</font><font color="#CCCCCC"> that</font>

802
00:35:36,800 --> 00:35:41,820
but really<font color="#E5E5E5"> also also consider</font><font color="#CCCCCC"> that yes</font>

803
00:35:39,810 --> 00:35:43,859
you<font color="#E5E5E5"> know the</font><font color="#CCCCCC"> vectorize drive at least in</font>

804
00:35:41,820 --> 00:35:46,320
<font color="#E5E5E5">this very simple ones it doesn't</font><font color="#CCCCCC"> pay</font><font color="#E5E5E5"> off</font>

805
00:35:43,859 --> 00:35:48,600
that<font color="#E5E5E5"> much for the</font><font color="#CCCCCC"> T exposure or the LT</font>

806
00:35:46,320 --> 00:35:50,520
forward but it does have a significant

807
00:35:48,600 --> 00:35:52,740
performance improvement on the<font color="#E5E5E5"> rx side</font>

808
00:35:50,520 --> 00:35:54,210
<font color="#E5E5E5">so I don't know if it's more efficient</font>

809
00:35:52,740 --> 00:35:57,149
on<font color="#CCCCCC"> our excited broken comments</font><font color="#E5E5E5"> on that</font>

810
00:35:54,210 --> 00:36:00,810
but there it's<font color="#E5E5E5"> really I mean it's like a</font>

811
00:35:57,150 --> 00:36:02,520
<font color="#CCCCCC">30%</font><font color="#E5E5E5"> more than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> performance</font><font color="#CCCCCC"> gain so</font>

812
00:36:00,810 --> 00:36:04,500
you can argue<font color="#CCCCCC"> that should you start to</font>

813
00:36:02,520 --> 00:36:06,030
<font color="#E5E5E5">implement these things in in a Linux</font>

814
00:36:04,500 --> 00:36:07,680
<font color="#E5E5E5">driver you know I don't know it's it's</font>

815
00:36:06,030 --> 00:36:09,570
<font color="#CCCCCC">complicated to write them it's hard</font><font color="#E5E5E5"> to</font>

816
00:36:07,680 --> 00:36:11,490
maintain<font color="#E5E5E5"> but if they give a significant</font>

817
00:36:09,570 --> 00:36:14,010
performance improvement<font color="#E5E5E5"> maybe it's worth</font>

818
00:36:11,490 --> 00:36:15,109
it<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> I think it's it's a good</font>

819
00:36:14,010 --> 00:36:16,700
<font color="#CCCCCC">question</font>

820
00:36:15,109 --> 00:36:18,529
but now at least I think for the<font color="#CCCCCC"> unity</font>

821
00:36:16,700 --> 00:36:20,058
excited it's starting to look<font color="#E5E5E5"> good this</font>

822
00:36:18,529 --> 00:36:21,619
is within the you<font color="#E5E5E5"> know bounds of what I</font>

823
00:36:20,059 --> 00:36:23,900
<font color="#E5E5E5">think</font><font color="#CCCCCC"> okay yeah this is reasonable</font><font color="#E5E5E5"> we</font>

824
00:36:21,619 --> 00:36:25,940
never<font color="#E5E5E5"> ever going to be as fast as</font><font color="#CCCCCC"> DP DQ</font>

825
00:36:23,900 --> 00:36:28,219
<font color="#E5E5E5">because we you know</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> do insist course</font>

826
00:36:25,940 --> 00:36:31,579
we have user space versus<font color="#E5E5E5"> kernels based</font>

827
00:36:28,219 --> 00:36:34,130
on those<font color="#E5E5E5"> things but it's it's getting</font>

828
00:36:31,579 --> 00:36:35,779
there<font color="#CCCCCC"> now I think so but are excited we</font>

829
00:36:34,130 --> 00:36:37,999
need to do some stuff<font color="#E5E5E5"> and yes</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

830
00:36:35,779 --> 00:36:39,170
some ideas<font color="#E5E5E5"> I mean do you can be</font><font color="#CCCCCC"> online</font>

831
00:36:37,999 --> 00:36:40,038
looking into some performance

832
00:36:39,170 --> 00:36:42,529
improvements<font color="#E5E5E5"> here</font>

833
00:36:40,039 --> 00:36:44,930
so<font color="#CCCCCC"> and where</font><font color="#E5E5E5"> are the ideas to introduce</font>

834
00:36:42,529 --> 00:36:49,640
which are not in this you know<font color="#E5E5E5"> so it's</font>

835
00:36:44,930 --> 00:36:52,489
still possible to<font color="#E5E5E5"> improve this</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

836
00:36:49,640 --> 00:36:56,959
let's<font color="#E5E5E5"> look at some examples of use cases</font>

837
00:36:52,489 --> 00:37:00,170
for<font color="#CCCCCC"> HDPE</font><font color="#E5E5E5"> so the first one obvious one is</font>

838
00:36:56,959 --> 00:37:01,819
<font color="#E5E5E5">to write them bfxd ppmd for DP DK</font>

839
00:37:00,170 --> 00:37:03,819
because if<font color="#CCCCCC"> XP is about</font><font color="#E5E5E5"> getting raw</font>

840
00:37:01,819 --> 00:37:05,930
packets<font color="#E5E5E5"> out to users based</font><font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> and</font>

841
00:37:03,819 --> 00:37:09,019
you know if you have<font color="#E5E5E5"> something up there</font>

842
00:37:05,930 --> 00:37:10,669
for<font color="#CCCCCC"> example or a user stack</font><font color="#E5E5E5"> you're</font>

843
00:37:09,019 --> 00:37:11,749
<font color="#E5E5E5">probably going to</font><font color="#CCCCCC"> use TP DK</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is</font>

844
00:37:10,670 --> 00:37:15,049
the most obvious<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and we actually</font>

845
00:37:11,749 --> 00:37:18,618
have an RFC out on that the PDK mailing

846
00:37:15,049 --> 00:37:20,959
list for<font color="#E5E5E5"> a and a FX d ppmd driver and it</font>

847
00:37:18,619 --> 00:37:22,910
has<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 1% all bad you know compared</font>

848
00:37:20,959 --> 00:37:24,979
to<font color="#E5E5E5"> just running FX deeply which i think</font>

849
00:37:22,910 --> 00:37:26,989
is it's good it's<font color="#CCCCCC"> actually less than 1%</font>

850
00:37:24,979 --> 00:37:29,538
over<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> wanted you see your attack</font>

851
00:37:26,989 --> 00:37:31,039
<font color="#E5E5E5">you know what you really can do here is</font>

852
00:37:29,539 --> 00:37:33,529
like which<font color="#CCCCCC"> is nice if you have a stream</font>

853
00:37:31,039 --> 00:37:35,269
of packets<font color="#E5E5E5"> coming into your your system</font>

854
00:37:33,529 --> 00:37:37,219
and some of<font color="#CCCCCC"> it</font><font color="#E5E5E5"> needs to go to the kernel</font>

855
00:37:35,269 --> 00:37:40,098
stack and some way to go to use this

856
00:37:37,219 --> 00:37:42,109
<font color="#CCCCCC">page to</font><font color="#E5E5E5"> some processing xep is a great</font>

857
00:37:40,099 --> 00:37:43,519
way of solving that you know because<font color="#CCCCCC"> if</font>

858
00:37:42,109 --> 00:37:46,098
can't divert it already in the<font color="#E5E5E5"> driver</font>

859
00:37:43,519 --> 00:37:48,948
<font color="#E5E5E5">some traffic to the kernel stack and</font>

860
00:37:46,099 --> 00:37:52,039
some traffic<font color="#E5E5E5"> up to up to DP</font><font color="#CCCCCC"> d k you know</font>

861
00:37:48,949 --> 00:37:52,729
in the user<font color="#E5E5E5"> space stack it also creates</font>

862
00:37:52,039 --> 00:37:54,499
a hardware

863
00:37:52,729 --> 00:37:56,779
independent application binding if you

864
00:37:54,499 --> 00:37:58,189
only have<font color="#E5E5E5"> the PMD of a</font><font color="#CCCCCC"> fu</font><font color="#E5E5E5"> x DP it's</font>

865
00:37:56,779 --> 00:38:00,890
<font color="#CCCCCC">going to work on all</font><font color="#E5E5E5"> drivers supporting</font>

866
00:37:58,190 --> 00:38:03,019
<font color="#E5E5E5">if it's deeply if you have a user space</font>

867
00:38:00,890 --> 00:38:04,308
<font color="#E5E5E5">driver the PDK driver of course it's not</font>

868
00:38:03,019 --> 00:38:05,569
<font color="#E5E5E5">going to work on the next</font><font color="#CCCCCC"> generation of</font>

869
00:38:04,309 --> 00:38:08,959
anything<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> don't have driver</font>

870
00:38:05,569 --> 00:38:10,729
in there so that's also good<font color="#CCCCCC"> it's also</font>

871
00:38:08,959 --> 00:38:12,288
provides isolation or robustness<font color="#E5E5E5"> you're</font>

872
00:38:10,729 --> 00:38:13,669
not<font color="#E5E5E5"> sharing any memory you can restart</font>

873
00:38:12,289 --> 00:38:16,339
it<font color="#E5E5E5"> you can use all these security</font>

874
00:38:13,670 --> 00:38:18,170
<font color="#E5E5E5">features of</font><font color="#CCCCCC"> Linux coasted you know it</font>

875
00:38:16,339 --> 00:38:20,180
doesn't<font color="#E5E5E5"> rely on physical contiguous</font>

876
00:38:18,170 --> 00:38:23,779
memory and stuff<font color="#E5E5E5"> like that you</font><font color="#CCCCCC"> know FX</font>

877
00:38:20,180 --> 00:38:26,359
<font color="#E5E5E5">EP is just another socket and we think</font>

878
00:38:23,779 --> 00:38:28,009
it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be a good good support for</font>

879
00:38:26,359 --> 00:38:28,940
cloud native a good<font color="#CCCCCC"> solution in the</font>

880
00:38:28,009 --> 00:38:31,040
cloud native space

881
00:38:28,940 --> 00:38:33,050
- because you know a fixed piece<font color="#E5E5E5"> just a</font>

882
00:38:31,040 --> 00:38:35,180
<font color="#CCCCCC">socket is</font><font color="#E5E5E5"> nowhere subtraction works</font>

883
00:38:33,050 --> 00:38:36,500
really well with you know processes or

884
00:38:35,180 --> 00:38:39,230
<font color="#CCCCCC">containers because</font><font color="#E5E5E5"> the very same thing</font>

885
00:38:36,500 --> 00:38:40,940
and you get fewer setup<font color="#E5E5E5"> restrictions so</font>

886
00:38:39,230 --> 00:38:43,490
we<font color="#E5E5E5"> think there's a you know good strong</font>

887
00:38:40,940 --> 00:38:49,339
use case<font color="#CCCCCC"> for having it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> afx deeply</font>

888
00:38:43,490 --> 00:38:51,348
<font color="#CCCCCC">teamed in in dp/dt</font><font color="#E5E5E5"> the next one is VPP</font>

889
00:38:49,339 --> 00:38:53,990
which is a very popular stack from<font color="#CCCCCC"> Cisco</font>

890
00:38:51,349 --> 00:38:56,930
in the hydro project yes<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean you</font>

891
00:38:53,990 --> 00:38:59,118
could<font color="#CCCCCC"> just</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> both VPP supports the</font>

892
00:38:56,930 --> 00:39:02,029
PDK so you could take this a<font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> PP in</font>

893
00:38:59,119 --> 00:39:05,569
the and just<font color="#CCCCCC"> run VPP but</font><font color="#E5E5E5"> actually you</font>

894
00:39:02,030 --> 00:39:07,970
<font color="#E5E5E5">could also just write a native a</font><font color="#CCCCCC"> FXP</font>

895
00:39:05,569 --> 00:39:12,319
<font color="#CCCCCC">drive in</font><font color="#E5E5E5"> the PP because there's an AF</font>

896
00:39:07,970 --> 00:39:14,328
<font color="#CCCCCC">AVP driver in</font><font color="#E5E5E5"> VPP there's a wave packet</font>

897
00:39:12,319 --> 00:39:16,220
driving<font color="#CCCCCC"> deputy</font><font color="#E5E5E5"> so you could do that</font>

898
00:39:14,329 --> 00:39:18,440
<font color="#E5E5E5">because it doesn't BP doesn't</font><font color="#CCCCCC"> use that</font>

899
00:39:16,220 --> 00:39:23,029
much of<font color="#CCCCCC"> dp/dt basically the driver and</font>

900
00:39:18,440 --> 00:39:24,500
the rest is just implements itself<font color="#E5E5E5"> so</font>

901
00:39:23,030 --> 00:39:25,940
that<font color="#CCCCCC"> would be more efficient I don't</font>

902
00:39:24,500 --> 00:39:27,829
know how much<font color="#E5E5E5"> more efficient</font><font color="#CCCCCC"> we probably</font>

903
00:39:25,940 --> 00:39:30,890
<font color="#E5E5E5">not that much but it would be a lot</font>

904
00:39:27,829 --> 00:39:33,349
simpler<font color="#E5E5E5"> you know much less code and</font>

905
00:39:30,890 --> 00:39:36,529
easier<font color="#E5E5E5"> setup you know if you just used a</font>

906
00:39:33,349 --> 00:39:38,420
effectively<font color="#CCCCCC"> right the winner</font><font color="#E5E5E5"> but</font>

907
00:39:36,530 --> 00:39:40,130
nobody's tried this<font color="#E5E5E5"> with anyone working</font>

908
00:39:38,420 --> 00:39:42,140
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> EPP it should be easy to hack</font>

909
00:39:40,130 --> 00:39:44,420
this<font color="#E5E5E5"> so please do it you know</font><font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> be</font>

910
00:39:42,140 --> 00:39:45,770
fun<font color="#E5E5E5"> to see are we missing anything</font><font color="#CCCCCC"> yes</font>

911
00:39:44,420 --> 00:39:51,430
<font color="#CCCCCC">there's some functionality we need that</font>

912
00:39:45,770 --> 00:39:54,410
you know we<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have in a fix TP and</font>

913
00:39:51,430 --> 00:39:57,950
the last one a<font color="#CCCCCC"> FXP integration with snap</font>

914
00:39:54,410 --> 00:40:03,440
<font color="#CCCCCC">switch this is an</font><font color="#E5E5E5"> ID is Luke here no</font>

915
00:39:57,950 --> 00:40:05,720
<font color="#CCCCCC">right so he can't comment on</font><font color="#E5E5E5"> so you can</font>

916
00:40:03,440 --> 00:40:06,950
<font color="#E5E5E5">actually use AF fix be maybe in a snob</font>

917
00:40:05,720 --> 00:40:09,589
but<font color="#E5E5E5"> the question here</font><font color="#CCCCCC"> is what kind of</font>

918
00:40:06,950 --> 00:40:11,480
functionality is is missing you<font color="#E5E5E5"> know on</font>

919
00:40:09,589 --> 00:40:14,029
the nice thing about if you if you do

920
00:40:11,480 --> 00:40:15,349
<font color="#E5E5E5">something in snob on a FX</font><font color="#CCCCCC"> DP it's gonna</font>

921
00:40:14,030 --> 00:40:17,300
work on<font color="#E5E5E5"> although I</font><font color="#CCCCCC"> were supporting a</font>

922
00:40:15,349 --> 00:40:18,500
fixed instead of like now where you<font color="#E5E5E5"> have</font>

923
00:40:17,300 --> 00:40:20,569
to write them<font color="#CCCCCC"> for every single</font><font color="#E5E5E5"> driver</font>

924
00:40:18,500 --> 00:40:24,380
<font color="#E5E5E5">this kind of becomes a hardware</font>

925
00:40:20,569 --> 00:40:26,029
abstraction interface in this case<font color="#E5E5E5"> but</font>

926
00:40:24,380 --> 00:40:28,460
there<font color="#CCCCCC"> are some you</font><font color="#E5E5E5"> know things that's</font>

927
00:40:26,030 --> 00:40:29,960
snob uses that we we<font color="#E5E5E5"> don't have at the</font>

928
00:40:28,460 --> 00:40:31,640
moment<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> question is what do we</font>

929
00:40:29,960 --> 00:40:33,859
<font color="#E5E5E5">have to add</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> a fix to be to support</font>

930
00:40:31,640 --> 00:40:38,029
snob but<font color="#E5E5E5"> I don't think Luke can answer</font>

931
00:40:33,859 --> 00:40:40,740
that<font color="#E5E5E5"> but maybe you can do that</font><font color="#CCCCCC"> later</font>

932
00:40:38,030 --> 00:40:43,320
<font color="#E5E5E5">okay so some ongoing work so what are we</font>

933
00:40:40,740 --> 00:40:44,279
working<font color="#E5E5E5"> on right</font><font color="#CCCCCC"> now of course</font><font color="#E5E5E5"> we're up</font>

934
00:40:43,320 --> 00:40:47,160
streaming these performance

935
00:40:44,280 --> 00:40:48,510
optimizations<font color="#CCCCCC"> one by</font><font color="#E5E5E5"> one I mean the some</font>

936
00:40:47,160 --> 00:40:50,279
<font color="#CCCCCC">of the simpler ones have been</font><font color="#E5E5E5"> already</font>

937
00:40:48,510 --> 00:40:52,530
upstream and the more complicated ones

938
00:40:50,280 --> 00:40:56,670
<font color="#E5E5E5">we're working on now like the</font><font color="#CCCCCC"> busy the</font>

939
00:40:52,530 --> 00:40:58,380
<font color="#E5E5E5">whole</font><font color="#CCCCCC"> Cisco</font><font color="#E5E5E5"> support there</font><font color="#CCCCCC"> and something</font>

940
00:40:56,670 --> 00:41:00,480
<font color="#CCCCCC">that</font><font color="#E5E5E5"> beyond</font><font color="#CCCCCC"> yesterday's work on is is</font>

941
00:40:58,380 --> 00:41:02,160
<font color="#CCCCCC">HDPE programs per cube so now when you</font>

942
00:41:00,480 --> 00:41:04,890
install<font color="#E5E5E5"> the next EP poem it's per native</font>

943
00:41:02,160 --> 00:41:06,120
so it<font color="#E5E5E5"> covers all</font><font color="#CCCCCC"> queues</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> what they're</font>

944
00:41:04,890 --> 00:41:08,069
working on is<font color="#CCCCCC"> actually so you can</font>

945
00:41:06,120 --> 00:41:10,560
install an<font color="#E5E5E5"> exited worm on a single</font><font color="#CCCCCC"> cube</font>

946
00:41:08,070 --> 00:41:12,480
<font color="#E5E5E5">and that's going to be a big</font><font color="#CCCCCC"> performance</font>

947
00:41:10,560 --> 00:41:14,370
boost on<font color="#E5E5E5"> the aurochs path for us it's</font>

948
00:41:12,480 --> 00:41:17,400
also<font color="#E5E5E5"> going to make it a lot simpler</font><font color="#CCCCCC"> to</font>

949
00:41:14,370 --> 00:41:18,779
do things but<font color="#E5E5E5"> that's I don't know how</font>

950
00:41:17,400 --> 00:41:21,690
long<font color="#E5E5E5"> you think it's gonna take</font><font color="#CCCCCC"> but it's</font>

951
00:41:18,780 --> 00:41:26,520
it's it's<font color="#CCCCCC"> not treatable I guess to do</font>

952
00:41:21,690 --> 00:41:27,960
that another thing we noticed you know

953
00:41:26,520 --> 00:41:30,630
when we got these things<font color="#CCCCCC"> that it was too</font>

954
00:41:27,960 --> 00:41:33,480
<font color="#E5E5E5">hard to use a FX DP because it required</font>

955
00:41:30,630 --> 00:41:35,580
you to<font color="#E5E5E5"> write an x DP program you know</font>

956
00:41:33,480 --> 00:41:37,290
compile that<font color="#E5E5E5"> with a clang compiler load</font>

957
00:41:35,580 --> 00:41:39,930
it into the<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> lots of stuff</font><font color="#E5E5E5"> you had</font>

958
00:41:37,290 --> 00:41:41,759
<font color="#E5E5E5">to do it was</font><font color="#CCCCCC"> just a big headache</font><font color="#E5E5E5"> to to</font>

959
00:41:39,930 --> 00:41:43,680
get going I mean<font color="#CCCCCC"> sockets should be easy</font>

960
00:41:41,760 --> 00:41:45,600
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> what you want</font><font color="#CCCCCC"> I mean you just</font>

961
00:41:43,680 --> 00:41:47,700
<font color="#E5E5E5">want to do socket</font>

962
00:41:45,600 --> 00:41:50,790
you know you bind<font color="#E5E5E5"> it off you go that's</font>

963
00:41:47,700 --> 00:41:53,129
it<font color="#E5E5E5"> so what I</font><font color="#CCCCCC"> did now and it's if there's</font>

964
00:41:50,790 --> 00:41:55,259
<font color="#E5E5E5">a patch it's a v3 patch up on the corner</font>

965
00:41:53,130 --> 00:41:57,810
<font color="#E5E5E5">and it's gonna be</font><font color="#CCCCCC"> therefore</font><font color="#E5E5E5"> it must be</font>

966
00:41:55,260 --> 00:42:00,330
<font color="#CCCCCC">something</font><font color="#E5E5E5"> else but it's a I including</font>

967
00:41:57,810 --> 00:42:01,980
<font color="#E5E5E5">Italy BPF I included helpers</font><font color="#CCCCCC"> that make</font>

968
00:42:00,330 --> 00:42:04,410
it really really simple to<font color="#CCCCCC"> set</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> these</font>

969
00:42:01,980 --> 00:42:06,630
<font color="#E5E5E5">sockets so basically only</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> two</font>

970
00:42:04,410 --> 00:42:08,399
things<font color="#E5E5E5"> you know you call</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> crate</font>

971
00:42:06,630 --> 00:42:10,020
human which is<font color="#CCCCCC"> the packet area</font><font color="#E5E5E5"> cred</font>

972
00:42:08,400 --> 00:42:12,540
socket and<font color="#CCCCCC"> off you go</font>

973
00:42:10,020 --> 00:42:14,100
<font color="#E5E5E5">that's it and their helper functions for</font>

974
00:42:12,540 --> 00:42:15,900
it for everything<font color="#CCCCCC"> but people used to do</font>

975
00:42:14,100 --> 00:42:17,790
they<font color="#CCCCCC"> just use our sample which was</font>

976
00:42:15,900 --> 00:42:19,320
pretty rough sample and you<font color="#E5E5E5"> still cut</font>

977
00:42:17,790 --> 00:42:21,029
and paste<font color="#E5E5E5"> from</font><font color="#CCCCCC"> let them you know</font><font color="#E5E5E5"> paste</font>

978
00:42:19,320 --> 00:42:23,250
it into the programs but now we have

979
00:42:21,030 --> 00:42:26,010
this library<font color="#CCCCCC"> in steadily BPF way where</font>

980
00:42:23,250 --> 00:42:28,050
you can<font color="#E5E5E5"> use you know good optimized</font>

981
00:42:26,010 --> 00:42:30,360
functions for these things<font color="#E5E5E5"> and this</font>

982
00:42:28,050 --> 00:42:44,910
makes the program sample<font color="#E5E5E5"> program so</font><font color="#CCCCCC"> much</font>

983
00:42:30,360 --> 00:42:46,500
cleaner<font color="#CCCCCC"> and nicer</font><font color="#E5E5E5"> now it's only a so it</font>

984
00:42:44,910 --> 00:42:47,670
loads<font color="#E5E5E5"> everything you know under the hood</font>

985
00:42:46,500 --> 00:42:48,960
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you don't have to care about of</font>

986
00:42:47,670 --> 00:42:51,000
<font color="#CCCCCC">course you can still</font><font color="#E5E5E5"> load you</font><font color="#CCCCCC"> xep</font>

987
00:42:48,960 --> 00:42:52,650
<font color="#E5E5E5">program you know your own if you</font><font color="#CCCCCC"> want</font>

988
00:42:51,000 --> 00:42:54,870
- of<font color="#CCCCCC"> course when</font><font color="#E5E5E5"> I'm hindered</font><font color="#CCCCCC"> that but</font>

989
00:42:52,650 --> 00:42:56,730
<font color="#E5E5E5">this list facilitates</font><font color="#CCCCCC"> that option</font><font color="#E5E5E5"> and</font>

990
00:42:54,870 --> 00:43:00,299
another<font color="#E5E5E5"> thing I mean when I showed the</font>

991
00:42:56,730 --> 00:43:02,450
<font color="#E5E5E5">AF packet performance numbers so a</font><font color="#CCCCCC"> FX d</font>

992
00:43:00,300 --> 00:43:05,520
<font color="#CCCCCC">pillion a packet does not have the same</font>

993
00:43:02,450 --> 00:43:06,689
functionality level a AF packet has more

994
00:43:05,520 --> 00:43:09,090
functionality and one thing we're

995
00:43:06,690 --> 00:43:11,070
missing from AF XE p is this packet

996
00:43:09,090 --> 00:43:13,980
clone<font color="#E5E5E5"> so what happens when you do a</font>

997
00:43:11,070 --> 00:43:16,170
packet is that one<font color="#E5E5E5"> you know the original</font>

998
00:43:13,980 --> 00:43:18,180
packet goes to the<font color="#E5E5E5"> kernel and you get</font>

999
00:43:16,170 --> 00:43:20,220
<font color="#CCCCCC">the copy of the packet to</font><font color="#E5E5E5"> use of space</font>

1000
00:43:18,180 --> 00:43:22,620
<font color="#E5E5E5">so we don't have that functionality</font><font color="#CCCCCC"> in</font>

1001
00:43:20,220 --> 00:43:26,520
<font color="#CCCCCC">xdp at this point so what we like is to</font>

1002
00:43:22,620 --> 00:43:27,960
add this into XP so you can say so time

1003
00:43:26,520 --> 00:43:29,250
stuff is going<font color="#E5E5E5"> to show me</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> soon I</font>

1004
00:43:27,960 --> 00:43:33,080
<font color="#E5E5E5">thought it's gonna go five minutes</font><font color="#CCCCCC"> left</font>

1005
00:43:29,250 --> 00:43:35,490
great so we're going to<font color="#CCCCCC"> add that</font><font color="#E5E5E5"> to X DT</font>

1006
00:43:33,080 --> 00:43:37,290
so you can actually<font color="#E5E5E5"> clone a packet and</font>

1007
00:43:35,490 --> 00:43:38,759
then send<font color="#E5E5E5"> it up and then you</font><font color="#CCCCCC"> connect</font>

1008
00:43:37,290 --> 00:43:40,500
<font color="#E5E5E5">this could actually be something you</font>

1009
00:43:38,760 --> 00:43:42,570
<font color="#E5E5E5">could use with the leap te cap so with</font>

1010
00:43:40,500 --> 00:43:44,190
wire short anticipate them<font color="#E5E5E5"> which is nice</font>

1011
00:43:42,570 --> 00:43:45,960
because then suddenly you can you can

1012
00:43:44,190 --> 00:43:50,040
sniff the 40 gigabit per second

1013
00:43:45,960 --> 00:43:51,840
interface<font color="#E5E5E5"> you know with nearly a single</font>

1014
00:43:50,040 --> 00:43:54,960
<font color="#CCCCCC">coil not really a single</font><font color="#E5E5E5"> coin but to</font>

1015
00:43:51,840 --> 00:43:57,000
course you could do it and there's also

1016
00:43:54,960 --> 00:43:58,650
something we want<font color="#E5E5E5"> to start and start</font>

1017
00:43:57,000 --> 00:44:01,440
with with<font color="#E5E5E5"> other people is adding</font>

1018
00:43:58,650 --> 00:44:02,880
metadata support to<font color="#CCCCCC"> affix</font><font color="#E5E5E5"> deeply that's</font>

1019
00:44:01,440 --> 00:44:04,320
also something you<font color="#E5E5E5"> need so you</font><font color="#CCCCCC"> can put</font>

1020
00:44:02,880 --> 00:44:09,540
out your<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> and things that a</font>

1021
00:44:04,320 --> 00:44:11,610
packet has<font color="#E5E5E5"> okay just</font><font color="#CCCCCC"> summarize no XP</font>

1022
00:44:09,540 --> 00:44:14,210
<font color="#E5E5E5">Express data path is</font><font color="#CCCCCC"> the new linux</font>

1023
00:44:11,610 --> 00:44:17,100
<font color="#E5E5E5">kernel fast path and AF</font><font color="#CCCCCC"> h CP</font><font color="#E5E5E5"> is just</font>

1024
00:44:14,210 --> 00:44:19,260
getting packets to use the space from<font color="#CCCCCC"> xt</font>

1025
00:44:17,100 --> 00:44:21,600
<font color="#CCCCCC">p you know</font><font color="#E5E5E5"> unmodified after that and</font>

1026
00:44:19,260 --> 00:44:23,490
we're trying<font color="#CCCCCC"> to hit</font><font color="#E5E5E5"> you know DP DK like</font>

1027
00:44:21,600 --> 00:44:24,870
<font color="#CCCCCC">speed never gonna be as fast but it'll</font>

1028
00:44:23,490 --> 00:44:27,450
you know<font color="#E5E5E5"> if it's</font><font color="#CCCCCC"> eighty percent</font><font color="#E5E5E5"> of that</font>

1029
00:44:24,870 --> 00:44:29,600
great<font color="#CCCCCC"> and it really it's a building</font>

1030
00:44:27,450 --> 00:44:32,279
<font color="#E5E5E5">block</font><font color="#CCCCCC"> for solutions</font><font color="#E5E5E5"> both these</font><font color="#CCCCCC"> things</font>

1031
00:44:29,600 --> 00:44:34,290
it's<font color="#E5E5E5"> not a ready solution in itself</font><font color="#CCCCCC"> you</font>

1032
00:44:32,280 --> 00:44:36,270
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to build stuff on top of</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> or</font>

1033
00:44:34,290 --> 00:44:38,580
inside it and there<font color="#E5E5E5"> are many interesting</font>

1034
00:44:36,270 --> 00:44:41,130
<font color="#E5E5E5">upcoming use cases like yes we</font><font color="#CCCCCC"> talk</font>

1035
00:44:38,580 --> 00:44:42,600
about obvious and you know<font color="#E5E5E5"> bridges and</font>

1036
00:44:41,130 --> 00:44:45,960
stuff like that and notice if you have

1037
00:44:42,600 --> 00:44:47,940
<font color="#E5E5E5">obvious in XD p AF exit it becomes a</font>

1038
00:44:45,960 --> 00:44:50,850
conduit<font color="#E5E5E5"> after that which is great you</font>

1039
00:44:47,940 --> 00:44:53,460
<font color="#CCCCCC">get the traffic</font><font color="#E5E5E5"> after OBS or after the</font>

1040
00:44:50,850 --> 00:44:56,040
bridge or after you know processing<font color="#E5E5E5"> your</font>

1041
00:44:53,460 --> 00:44:57,870
IP or some<font color="#CCCCCC"> suit it's exciting</font><font color="#E5E5E5"> you know</font>

1042
00:44:56,040 --> 00:45:01,140
<font color="#E5E5E5">you can get more</font><font color="#CCCCCC"> koop traffic with</font><font color="#E5E5E5"> AF</font>

1043
00:44:57,870 --> 00:45:03,578
<font color="#E5E5E5">except with the help of</font><font color="#CCCCCC"> x2p so yeah</font>

1044
00:45:01,140 --> 00:45:19,730
come join the<font color="#E5E5E5"> phone</font>

1045
00:45:03,579 --> 00:45:22,099
questions in in terms<font color="#E5E5E5"> of oh yeah I saw</font>

1046
00:45:19,730 --> 00:45:23,779
somebody added go<font color="#E5E5E5"> language support</font>

1047
00:45:22,099 --> 00:45:26,299
<font color="#E5E5E5">really</font><font color="#CCCCCC"> affects beyond</font><font color="#E5E5E5"> I said I haven't</font>

1048
00:45:23,779 --> 00:45:27,859
<font color="#E5E5E5">seen rust</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> we have we're not doing</font>

1049
00:45:26,299 --> 00:45:30,259
anything there<font color="#E5E5E5"> but it seems that</font><font color="#CCCCCC"> people</font>

1050
00:45:27,859 --> 00:45:32,270
<font color="#CCCCCC">are starting to</font><font color="#E5E5E5"> add support so that was</font>

1051
00:45:30,260 --> 00:45:34,400
there<font color="#E5E5E5"> to</font><font color="#CCCCCC"> repeat the question so language</font>

1052
00:45:32,270 --> 00:45:37,400
<font color="#E5E5E5">support</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> fixity so we saw somebody</font>

1053
00:45:34,400 --> 00:45:39,619
from<font color="#E5E5E5"> Google adding a</font><font color="#CCCCCC"> fixed EP support to</font>

1054
00:45:37,400 --> 00:45:42,289
go the go language but<font color="#CCCCCC"> just talked about</font>

1055
00:45:39,619 --> 00:46:06,609
rust<font color="#E5E5E5"> yeah I haven't seen that but</font>

1056
00:45:42,289 --> 00:46:06,609
<font color="#E5E5E5">hopefully somebody's working on yes yeah</font>

1057
00:46:12,579 --> 00:46:17,359
<font color="#CCCCCC">the question</font><font color="#E5E5E5"> was a poll is it's an</font>

1058
00:46:15,349 --> 00:46:20,420
overhead yes because<font color="#E5E5E5"> he has a</font><font color="#CCCCCC"> Siskel but</font>

1059
00:46:17,359 --> 00:46:22,848
it's a simple model you know people know

1060
00:46:20,420 --> 00:46:24,710
how it works<font color="#CCCCCC"> you know so that's why</font><font color="#E5E5E5"> we</font>

1061
00:46:22,849 --> 00:46:26,450
<font color="#CCCCCC">started with that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> exit</font>

1062
00:46:24,710 --> 00:46:28,520
<font color="#CCCCCC">this office to</font><font color="#E5E5E5"> look like sockets simply</font>

1063
00:46:26,450 --> 00:46:29,509
like sockets<font color="#E5E5E5"> because it's simple but</font>

1064
00:46:28,520 --> 00:46:30,829
<font color="#E5E5E5">you're right I mean you could add</font>

1065
00:46:29,510 --> 00:46:32,089
something like<font color="#E5E5E5"> a doorbell function</font>

1066
00:46:30,829 --> 00:46:34,190
<font color="#E5E5E5">especially if you have a hard one and</font><font color="#CCCCCC"> it</font>

1067
00:46:32,089 --> 00:46:35,900
understands<font color="#E5E5E5"> the doorbells and that would</font>

1068
00:46:34,190 --> 00:46:37,579
be<font color="#E5E5E5"> more efficient</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> haven't ever</font>

1069
00:46:35,900 --> 00:46:40,059
thought<font color="#E5E5E5"> about that direction but there's</font>

1070
00:46:37,579 --> 00:46:40,059
nothing concrete

1071
00:47:08,260 --> 00:47:20,650
now<font color="#CCCCCC"> the</font><font color="#E5E5E5"> questions yes yes so are there</font>

1072
00:47:18,280 --> 00:47:22,119
<font color="#CCCCCC">any effects to pee there's three three</font>

1073
00:47:20,650 --> 00:47:25,150
different modes<font color="#E5E5E5"> you can run and you</font><font color="#CCCCCC"> can</font>

1074
00:47:22,119 --> 00:47:27,880
run in what's called xdx cable mode

1075
00:47:25,150 --> 00:47:29,650
which works<font color="#E5E5E5"> on any Nick doesn't</font><font color="#CCCCCC"> have any</font>

1076
00:47:27,880 --> 00:47:32,950
you know<font color="#E5E5E5"> any</font><font color="#CCCCCC"> Nick will work or any</font>

1077
00:47:29,650 --> 00:47:37,270
virtual<font color="#E5E5E5"> an equal work to generic</font><font color="#CCCCCC"> accept</font>

1078
00:47:32,950 --> 00:47:39,490
<font color="#E5E5E5">and in and by actually allocating this</font>

1079
00:47:37,270 --> 00:47:41,320
baby<font color="#E5E5E5"> and then then pretending</font><font color="#CCCCCC"> the skb</font>

1080
00:47:39,490 --> 00:47:45,129
<font color="#E5E5E5">and converting the</font><font color="#CCCCCC"> STP into something</font>

1081
00:47:41,320 --> 00:47:49,420
that is contiguous<font color="#E5E5E5"> memory so but of</font>

1082
00:47:45,130 --> 00:47:50,590
course you lose performance<font color="#E5E5E5"> yeah but</font>

1083
00:47:49,420 --> 00:47:52,390
then it's<font color="#E5E5E5"> still I mean the performance</font>

1084
00:47:50,590 --> 00:47:55,330
<font color="#CCCCCC">of that</font><font color="#E5E5E5"> mode is still three times the</font>

1085
00:47:52,390 --> 00:47:57,368
performance<font color="#E5E5E5"> of AF packet yeah but then</font>

1086
00:47:55,330 --> 00:47:59,799
you have the what we call the<font color="#CCCCCC"> XTP drive</font>

1087
00:47:57,369 --> 00:48:01,960
copy mode which is if you have<font color="#CCCCCC"> XDP</font>

1088
00:47:59,800 --> 00:48:04,869
support added to your<font color="#E5E5E5"> driver like a lot</font>

1089
00:48:01,960 --> 00:48:06,880
of<font color="#CCCCCC"> people here have you know</font><font color="#E5E5E5"> you can run</font>

1090
00:48:04,869 --> 00:48:08,980
<font color="#CCCCCC">that mode and it it speeds up oryx to</font>

1091
00:48:06,880 --> 00:48:11,859
about<font color="#CCCCCC"> ten twelve</font><font color="#E5E5E5"> million packs a second</font>

1092
00:48:08,980 --> 00:48:13,390
on on<font color="#E5E5E5"> our hardware but TX doesn't have</font>

1093
00:48:11,859 --> 00:48:14,950
any<font color="#E5E5E5"> of that support</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the third</font>

1094
00:48:13,390 --> 00:48:16,900
one<font color="#CCCCCC"> is</font><font color="#E5E5E5"> zero copy sport you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to add</font>

1095
00:48:14,950 --> 00:48:18,759
that<font color="#CCCCCC"> into the driver</font><font color="#E5E5E5"> and we're trying to</font>

1096
00:48:16,900 --> 00:48:20,770
make<font color="#E5E5E5"> that simpler</font><font color="#CCCCCC"> I don't know what's it</font>

1097
00:48:18,760 --> 00:48:22,119
like seven<font color="#CCCCCC"> hundred lines of code a turn</font>

1098
00:48:20,770 --> 00:48:24,250
the lines of code<font color="#CCCCCC"> let's say thousand</font>

1099
00:48:22,119 --> 00:48:26,440
lines of code<font color="#CCCCCC"> for our droid you know so</font>

1100
00:48:24,250 --> 00:48:29,500
it<font color="#CCCCCC"> was not it's not</font><font color="#E5E5E5"> something you just</font>

1101
00:48:26,440 --> 00:48:32,320
do in a date<font color="#CCCCCC"> is that the user space Pat</font>

1102
00:48:29,500 --> 00:48:42,040
looks the same so<font color="#E5E5E5"> you like you don't</font>

1103
00:48:32,320 --> 00:48:43,869
<font color="#E5E5E5">that's affected</font><font color="#CCCCCC"> away from well yes yes</font>

1104
00:48:42,040 --> 00:48:49,859
today you have to choose<font color="#E5E5E5"> intellectual to</font>

1105
00:48:43,869 --> 00:48:52,150
get you supported but<font color="#E5E5E5"> you stink</font>

1106
00:48:49,859 --> 00:48:53,799
yeah yeah<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> XP drive support you</font>

1107
00:48:52,150 --> 00:48:57,340
can<font color="#E5E5E5"> pick a lot of</font><font color="#CCCCCC"> vendors</font><font color="#E5E5E5"> like metronome</font>

1108
00:48:53,800 --> 00:49:00,820
and<font color="#E5E5E5"> you know yeah but for the zero</font>

1109
00:48:57,340 --> 00:49:02,770
<font color="#CCCCCC">copies abort but yeah I want more people</font>

1110
00:49:00,820 --> 00:49:05,530
<font color="#E5E5E5">to support</font><font color="#CCCCCC"> this some just you know hope</font>

1111
00:49:02,770 --> 00:49:09,280
<font color="#E5E5E5">it's not only off</font><font color="#CCCCCC"> yeah actually yeah</font><font color="#E5E5E5"> you</font>

1112
00:49:05,530 --> 00:49:12,420
have some<font color="#E5E5E5"> implantation on arm so so for</font>

1113
00:49:09,280 --> 00:49:12,420
<font color="#CCCCCC">0</font><font color="#E5E5E5"> so there's another question</font>

1114
00:49:14,420 --> 00:49:27,289
oh you should<font color="#CCCCCC"> have</font><font color="#E5E5E5"> take it on the</font><font color="#CCCCCC"> mister</font>

1115
00:49:24,920 --> 00:49:30,140
he's there<font color="#E5E5E5"> so he actually tried to</font>

1116
00:49:27,289 --> 00:49:35,299
<font color="#E5E5E5">implement it and it got rejected</font><font color="#CCCCCC"> after</font>

1117
00:49:30,140 --> 00:49:38,089
<font color="#CCCCCC">him on</font><font color="#E5E5E5"> the terms that that right now</font><font color="#CCCCCC"> x2p</font>

1118
00:49:35,299 --> 00:49:39,470
is like the<font color="#CCCCCC"> raw Ethernet frame and all</font>

1119
00:49:38,089 --> 00:49:41,150
of a sudden<font color="#CCCCCC"> with Wi-Fi</font>

1120
00:49:39,470 --> 00:49:44,089
it<font color="#E5E5E5"> couldn't it could start and in</font>

1121
00:49:41,150 --> 00:49:45,849
different<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> so it is sort of possible</font>

1122
00:49:44,089 --> 00:49:49,819
but but then we would have<font color="#CCCCCC"> to introduce</font>

1123
00:49:45,849 --> 00:49:52,309
like different different<font color="#CCCCCC"> hooks</font><font color="#E5E5E5"> in the in</font>

1124
00:49:49,819 --> 00:49:54,859
the Wi-Fi to determine what kind of type

1125
00:49:52,309 --> 00:49:56,329
<font color="#CCCCCC">of packet</font><font color="#E5E5E5"> is this coming in and this we</font>

1126
00:49:54,859 --> 00:49:58,038
would have<font color="#CCCCCC"> to have some if statements in</font>

1127
00:49:56,329 --> 00:49:59,630
there and we are<font color="#E5E5E5"> counting nanoseconds</font>

1128
00:49:58,039 --> 00:50:01,069
here so we didn't<font color="#CCCCCC"> want to introduce</font>

1129
00:49:59,630 --> 00:50:04,220
anything<font color="#E5E5E5"> that slowed down our</font>

1130
00:50:01,069 --> 00:50:06,200
performance for supporting<font color="#CCCCCC"> my fine so I</font>

1131
00:50:04,220 --> 00:50:09,799
think if we want<font color="#E5E5E5"> to support Wi-Fi it</font>

1132
00:50:06,200 --> 00:50:14,078
<font color="#E5E5E5">will be in</font><font color="#CCCCCC"> another HTTP mode so it would</font>

1133
00:50:09,799 --> 00:50:14,079
be called Wi-Fi<font color="#E5E5E5"> x2 key or something</font>

1134
00:50:18,810 --> 00:50:24,239
[Applause]

