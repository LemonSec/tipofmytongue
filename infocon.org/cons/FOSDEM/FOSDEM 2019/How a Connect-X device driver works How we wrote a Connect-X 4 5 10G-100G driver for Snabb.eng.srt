1
00:00:04,640 --> 00:00:09,139
so much<font color="#CCCCCC"> well hello</font>

2
00:00:07,640 --> 00:00:10,490
down to the back I'll try to talk nice

3
00:00:09,139 --> 00:00:11,959
and loud<font color="#E5E5E5"> because I know people haven't</font>

4
00:00:10,490 --> 00:00:14,780
have been having<font color="#E5E5E5"> a hard</font><font color="#CCCCCC"> time down</font><font color="#E5E5E5"> back</font>

5
00:00:11,960 --> 00:00:16,670
so my name<font color="#E5E5E5"> is Luke and</font><font color="#CCCCCC"> I'm here to talk</font>

6
00:00:14,780 --> 00:00:17,509
<font color="#CCCCCC">about how</font><font color="#E5E5E5"> to write a device driver for</font>

7
00:00:16,670 --> 00:00:19,550
<font color="#CCCCCC">the Mellanox</font>

8
00:00:17,510 --> 00:00:23,620
<font color="#E5E5E5">connect X family of Ethernet adapters</font>

9
00:00:19,550 --> 00:00:27,610
<font color="#E5E5E5">and I want to say</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the outset here</font>

10
00:00:23,620 --> 00:00:27,610
though I<font color="#CCCCCC"> don't know how</font><font color="#E5E5E5"> switch slides</font>

11
00:00:29,620 --> 00:00:40,790
right arrow keys thank you<font color="#E5E5E5"> very much</font>

12
00:00:38,230 --> 00:00:42,529
<font color="#CCCCCC">because</font><font color="#E5E5E5"> I'm I don't work for Mellanox</font>

13
00:00:40,790 --> 00:00:44,570
I'm not affiliated<font color="#CCCCCC"> with any vendor</font><font color="#E5E5E5"> I'm</font>

14
00:00:42,530 --> 00:00:46,040
here in the collegial spirit<font color="#E5E5E5"> as somebody</font>

15
00:00:44,570 --> 00:00:47,600
who<font color="#E5E5E5"> writes software like everybody else</font>

16
00:00:46,040 --> 00:00:49,489
in the<font color="#CCCCCC"> room</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> here to sell you</font>

17
00:00:47,600 --> 00:00:52,250
anything<font color="#CCCCCC"> the project that I work on is</font>

18
00:00:49,489 --> 00:00:54,019
<font color="#CCCCCC">snob that is a production network</font>

19
00:00:52,250 --> 00:00:56,269
Terraplane<font color="#E5E5E5"> that's written in Lua</font>

20
00:00:54,020 --> 00:00:57,680
from top to<font color="#E5E5E5"> bottom and the reason I'm</font>

21
00:00:56,270 --> 00:00:59,450
<font color="#E5E5E5">here talking</font><font color="#CCCCCC"> about the connect X is that</font>

22
00:00:57,680 --> 00:01:01,090
<font color="#CCCCCC">I was very lucky a few years ago to get</font>

23
00:00:59,450 --> 00:01:03,890
my hands on the very very very first

24
00:01:01,090 --> 00:01:05,899
<font color="#E5E5E5">norm</font><font color="#CCCCCC"> nd a copy of the driver</font>

25
00:01:03,890 --> 00:01:07,340
specification for the<font color="#E5E5E5"> connect X there's</font>

26
00:01:05,899 --> 00:01:09,590
a document<font color="#CCCCCC"> that</font><font color="#E5E5E5"> had been kept secret for</font>

27
00:01:07,340 --> 00:01:10,880
four decades<font color="#CCCCCC"> presumably</font><font color="#E5E5E5"> and the context</font>

28
00:01:09,590 --> 00:01:12,799
of that is that I was working<font color="#CCCCCC"> on a</font>

29
00:01:10,880 --> 00:01:14,600
<font color="#E5E5E5">project with Deutsche Telekom we needed</font>

30
00:01:12,799 --> 00:01:16,460
to run<font color="#CCCCCC"> snap-on</font><font color="#E5E5E5"> hundred gig and we had a</font>

31
00:01:14,600 --> 00:01:18,860
requirement<font color="#CCCCCC"> that the ethernet adapter</font>

32
00:01:16,460 --> 00:01:20,630
should not force us<font color="#CCCCCC"> into any specific</font>

33
00:01:18,860 --> 00:01:22,790
software<font color="#CCCCCC"> ecosystem and it's also not</font>

34
00:01:20,630 --> 00:01:24,350
force us to sign NDA's<font color="#E5E5E5"> and build their</font>

35
00:01:22,790 --> 00:01:26,510
own<font color="#CCCCCC"> software based on somebody else's</font>

36
00:01:24,350 --> 00:01:27,890
trade secrets and Mellanox were just the

37
00:01:26,510 --> 00:01:29,540
vendor<font color="#CCCCCC"> that happened to step up</font><font color="#E5E5E5"> and give</font>

38
00:01:27,890 --> 00:01:30,560
<font color="#CCCCCC">us what we needed</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> that project and</font>

39
00:01:29,540 --> 00:01:31,670
I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> that's a great</font><font color="#E5E5E5"> credit</font><font color="#CCCCCC"> to them</font>

40
00:01:30,560 --> 00:01:33,290
<font color="#E5E5E5">that's why I'm here</font>

41
00:01:31,670 --> 00:01:36,939
so I'm able<font color="#E5E5E5"> to talk about this because I</font>

42
00:01:33,290 --> 00:01:39,229
didn't sign it in<font color="#E5E5E5"> the NBA so my thing is</font>

43
00:01:36,939 --> 00:01:41,809
software<font color="#E5E5E5"> networking</font><font color="#CCCCCC"> and I mean this in</font>

44
00:01:39,229 --> 00:01:44,510
<font color="#E5E5E5">the extreme sense of doing</font><font color="#CCCCCC"> everything on</font>

45
00:01:41,810 --> 00:01:45,890
the<font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> putting nothing on the hardware</font>

46
00:01:44,510 --> 00:01:47,479
<font color="#E5E5E5">and not doing any uploads any of that</font>

47
00:01:45,890 --> 00:01:51,200
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> stuff I think</font><font color="#CCCCCC"> harbor uploads is</font>

48
00:01:47,479 --> 00:01:52,789
yesterday<font color="#E5E5E5"> CPU is today and it's a really</font>

49
00:01:51,200 --> 00:01:54,500
<font color="#E5E5E5">exciting</font><font color="#CCCCCC"> time in software</font><font color="#E5E5E5"> networking now</font>

50
00:01:52,790 --> 00:01:55,490
because we're out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> we're out</font><font color="#CCCCCC"> of the</font>

51
00:01:54,500 --> 00:01:57,080
kernel we're out<font color="#CCCCCC"> of all of these</font>

52
00:01:55,490 --> 00:01:59,000
constrained programming environments

53
00:01:57,080 --> 00:02:00,710
where<font color="#CCCCCC"> we can only use very</font><font color="#E5E5E5"> very specific</font>

54
00:01:59,000 --> 00:02:02,960
tools and<font color="#CCCCCC"> where everything is different</font>

55
00:02:00,710 --> 00:02:04,640
<font color="#E5E5E5">so</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> networking software is just</font>

56
00:02:02,960 --> 00:02:06,890
<font color="#E5E5E5">software in a very important sense we</font>

57
00:02:04,640 --> 00:02:08,060
have a lot of<font color="#CCCCCC"> freedom</font><font color="#E5E5E5"> and we're taking</font>

58
00:02:06,890 --> 00:02:09,470
this<font color="#CCCCCC"> freedom in a lot of</font><font color="#E5E5E5"> directions as</font>

59
00:02:08,060 --> 00:02:10,699
we just<font color="#E5E5E5"> saw on the</font><font color="#CCCCCC"> IXY talk you know</font>

60
00:02:09,470 --> 00:02:12,379
probably some<font color="#E5E5E5"> great directions and</font>

61
00:02:10,699 --> 00:02:13,970
probably some awful directions<font color="#E5E5E5"> we're</font>

62
00:02:12,379 --> 00:02:14,970
doing a lot<font color="#CCCCCC"> of exploration</font><font color="#E5E5E5"> now and we're</font>

63
00:02:13,970 --> 00:02:16,859
trying<font color="#CCCCCC"> a lot of new idea</font>

64
00:02:14,970 --> 00:02:18,090
and we're seeing gradually what is it

65
00:02:16,860 --> 00:02:20,310
the works well and<font color="#CCCCCC"> what is it it doesn't</font>

66
00:02:18,090 --> 00:02:22,410
<font color="#E5E5E5">and I think</font><font color="#CCCCCC"> that to do</font><font color="#E5E5E5"> this effectively</font>

67
00:02:20,310 --> 00:02:24,300
<font color="#CCCCCC">it's really</font><font color="#E5E5E5"> really critical that we have</font>

68
00:02:22,410 --> 00:02:25,710
control<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> of the lowest levels</font><font color="#E5E5E5"> of</font>

69
00:02:24,300 --> 00:02:27,750
<font color="#CCCCCC">the stack all the way down to the</font><font color="#E5E5E5"> device</font>

70
00:02:25,710 --> 00:02:29,370
drivers so if we don't have<font color="#E5E5E5"> control</font><font color="#CCCCCC"> of</font>

71
00:02:27,750 --> 00:02:31,500
<font color="#CCCCCC">that if we're</font><font color="#E5E5E5"> building everything on</font>

72
00:02:29,370 --> 00:02:34,560
large software frameworks provided by

73
00:02:31,500 --> 00:02:35,790
vendors<font color="#CCCCCC"> the the risk is that</font><font color="#E5E5E5"> we'll have</font>

74
00:02:34,560 --> 00:02:37,110
pressure to do things in the way that

75
00:02:35,790 --> 00:02:39,600
they've always been<font color="#E5E5E5"> done and we'll get</font>

76
00:02:37,110 --> 00:02:41,580
<font color="#E5E5E5">stuck on a local maximum and not see</font>

77
00:02:39,600 --> 00:02:43,320
some new ideas<font color="#E5E5E5"> and of course in an</font>

78
00:02:41,580 --> 00:02:45,420
engineering project very often a local

79
00:02:43,320 --> 00:02:47,010
maximum is<font color="#E5E5E5"> exactly what you want but not</font>

80
00:02:45,420 --> 00:02:48,750
always<font color="#E5E5E5"> and it would be real pity if</font>

81
00:02:47,010 --> 00:02:50,280
everybody<font color="#E5E5E5"> was just sitting on the same</font>

82
00:02:48,750 --> 00:02:51,900
<font color="#E5E5E5">local maximum and we never got any new</font>

83
00:02:50,280 --> 00:02:53,490
ideas we would<font color="#E5E5E5"> never get any</font><font color="#CCCCCC"> progress so</font>

84
00:02:51,900 --> 00:02:54,930
it's<font color="#CCCCCC"> very important there's some</font><font color="#E5E5E5"> people</font>

85
00:02:53,490 --> 00:02:58,740
are trying<font color="#E5E5E5"> new things and they're able</font>

86
00:02:54,930 --> 00:03:00,360
<font color="#E5E5E5">to do that effectively so something I</font>

87
00:02:58,740 --> 00:03:02,640
think<font color="#CCCCCC"> about these days is what will be</font>

88
00:03:00,360 --> 00:03:03,720
the ideal network card for pure<font color="#E5E5E5"> software</font>

89
00:03:02,640 --> 00:03:05,640
networking<font color="#E5E5E5"> and I think it's</font><font color="#CCCCCC"> actually</font>

90
00:03:03,720 --> 00:03:08,190
<font color="#CCCCCC">really</font><font color="#E5E5E5"> easy to describe the</font><font color="#CCCCCC"> perfect</font>

91
00:03:05,640 --> 00:03:10,170
network card<font color="#E5E5E5"> would just be a high-speed</font>

92
00:03:08,190 --> 00:03:11,579
serial port<font color="#CCCCCC"> we take a stream of packets</font>

93
00:03:10,170 --> 00:03:13,170
<font color="#E5E5E5">from memory and we put them</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> a</font>

94
00:03:11,580 --> 00:03:14,400
network<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> take a stream of packets</font>

95
00:03:13,170 --> 00:03:16,019
<font color="#CCCCCC">from</font><font color="#E5E5E5"> network and we'll put them</font><font color="#CCCCCC"> into</font>

96
00:03:14,400 --> 00:03:18,000
memory<font color="#E5E5E5"> and that's all it would do but</font>

97
00:03:16,020 --> 00:03:19,200
<font color="#E5E5E5">not do a single other thing any feature</font>

98
00:03:18,000 --> 00:03:21,300
that<font color="#CCCCCC"> you would give it would be by</font>

99
00:03:19,200 --> 00:03:22,679
<font color="#CCCCCC">definition and miss feature now nobody</font>

100
00:03:21,300 --> 00:03:23,970
makes this<font color="#E5E5E5"> network card as far as I know</font>

101
00:03:22,680 --> 00:03:25,080
<font color="#E5E5E5">but it would be really wonderful if</font>

102
00:03:23,970 --> 00:03:27,989
somebody would so if<font color="#E5E5E5"> your</font><font color="#CCCCCC"> hardware</font>

103
00:03:25,080 --> 00:03:29,790
<font color="#E5E5E5">person please do but but</font><font color="#CCCCCC"> I think for now</font>

104
00:03:27,989 --> 00:03:30,690
the<font color="#CCCCCC"> practical thing is to go out</font><font color="#E5E5E5"> and</font>

105
00:03:29,790 --> 00:03:33,950
look<font color="#E5E5E5"> at what's commercially available</font>

106
00:03:30,690 --> 00:03:37,440
that you can kind of use in this way<font color="#E5E5E5"> and</font>

107
00:03:33,950 --> 00:03:40,170
for a really really really<font color="#CCCCCC"> long time the</font>

108
00:03:37,440 --> 00:03:41,550
answer has<font color="#CCCCCC"> been</font><font color="#E5E5E5"> there Intel</font><font color="#CCCCCC"> 82</font><font color="#E5E5E5"> $5.99</font>

109
00:03:40,170 --> 00:03:43,768
<font color="#E5E5E5">Niantic like raise your hand if you like</font>

110
00:03:41,550 --> 00:03:45,360
<font color="#E5E5E5">the Niantic</font><font color="#CCCCCC"> nic</font><font color="#E5E5E5"> know everybody loves the</font>

111
00:03:43,769 --> 00:03:46,590
Niantic<font color="#E5E5E5"> nic not every hand but not but</font><font color="#CCCCCC"> i</font>

112
00:03:45,360 --> 00:03:48,630
<font color="#E5E5E5">know that in your hearts you all love it</font>

113
00:03:46,590 --> 00:03:50,250
everybody<font color="#CCCCCC"> does</font><font color="#E5E5E5"> so this has been the</font>

114
00:03:48,630 --> 00:03:51,870
<font color="#CCCCCC">hackers favorite for the longest time</font>

115
00:03:50,250 --> 00:03:53,790
<font color="#CCCCCC">there's people</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Luca Gerry like I</font>

116
00:03:51,870 --> 00:03:55,140
don't<font color="#CCCCCC"> know if</font><font color="#E5E5E5"> it's for decades people</font>

117
00:03:53,790 --> 00:03:57,179
<font color="#E5E5E5">have</font><font color="#CCCCCC"> been doing</font><font color="#E5E5E5"> kind of amazing stuff</font>

118
00:03:55,140 --> 00:03:58,500
<font color="#E5E5E5">all kind of projects with this Nick and</font>

119
00:03:57,180 --> 00:04:01,260
it's just been a great<font color="#CCCCCC"> experience and</font>

120
00:03:58,500 --> 00:04:03,030
we've all loved it<font color="#CCCCCC"> the problem is that</font>

121
00:04:01,260 --> 00:04:05,220
the Niantic is getting a bit<font color="#E5E5E5"> long in the</font>

122
00:04:03,030 --> 00:04:07,170
<font color="#E5E5E5">tooth it only supports</font><font color="#CCCCCC"> 10 gig it only</font>

123
00:04:05,220 --> 00:04:09,030
sports PCI Express<font color="#E5E5E5"> version</font><font color="#CCCCCC"> 2 so if you</font>

124
00:04:07,170 --> 00:04:10,410
<font color="#CCCCCC">deploy this today you can't actually</font>

125
00:04:09,030 --> 00:04:11,970
take<font color="#CCCCCC"> advantage of all the</font><font color="#E5E5E5"> bandwidth</font>

126
00:04:10,410 --> 00:04:14,700
you'll find in a modern<font color="#E5E5E5"> network or in a</font>

127
00:04:11,970 --> 00:04:16,620
modern server<font color="#CCCCCC"> and in a</font><font color="#E5E5E5"> perfect world</font>

128
00:04:14,700 --> 00:04:18,149
<font color="#CCCCCC">intel will just release</font><font color="#E5E5E5"> a refresh of</font><font color="#CCCCCC"> the</font>

129
00:04:16,620 --> 00:04:19,470
Niantic that gives us faster port speeds

130
00:04:18,149 --> 00:04:21,899
and gives us<font color="#E5E5E5"> passive PCI Express</font>

131
00:04:19,470 --> 00:04:23,880
<font color="#CCCCCC">endpoint but but that</font><font color="#E5E5E5"> has not</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> Intel</font>

132
00:04:21,899 --> 00:04:26,620
strategy so<font color="#E5E5E5"> rather they're introducing a</font>

133
00:04:23,880 --> 00:04:28,150
series of<font color="#CCCCCC"> other NICs</font><font color="#E5E5E5"> in parallel and</font>

134
00:04:26,620 --> 00:04:30,040
these Knicks are not compatible with the

135
00:04:28,150 --> 00:04:31,690
Niantic<font color="#E5E5E5"> they need different drivers and</font>

136
00:04:30,040 --> 00:04:33,250
there's<font color="#E5E5E5"> not really any one</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> that</font>

137
00:04:31,690 --> 00:04:35,680
you can<font color="#E5E5E5"> point to and</font><font color="#CCCCCC"> say this is the</font>

138
00:04:33,250 --> 00:04:37,150
successor to<font color="#CCCCCC"> the Niantic</font><font color="#E5E5E5"> the the closest</font>

139
00:04:35,680 --> 00:04:38,949
is probably the<font color="#CCCCCC"> fort bill</font><font color="#E5E5E5"> but it's</font>

140
00:04:37,150 --> 00:04:41,229
significantly<font color="#E5E5E5"> more complex and it can't</font>

141
00:04:38,949 --> 00:04:42,400
do a hundred<font color="#CCCCCC"> games so so actually not so</font>

142
00:04:41,229 --> 00:04:44,229
if we want<font color="#E5E5E5"> to find the new hackers</font>

143
00:04:42,400 --> 00:04:46,929
<font color="#E5E5E5">favorite Nick here</font><font color="#CCCCCC"> for all</font><font color="#E5E5E5"> of us to do</font>

144
00:04:44,229 --> 00:04:47,680
<font color="#E5E5E5">our next projects on in 2019</font><font color="#CCCCCC"> I think we</font>

145
00:04:46,930 --> 00:04:49,840
have to look<font color="#CCCCCC"> somewhere else</font>

146
00:04:47,680 --> 00:04:52,150
until you know until<font color="#E5E5E5"> Intel give us the</font>

147
00:04:49,840 --> 00:04:53,979
the right thing and<font color="#E5E5E5"> that's what brings</font>

148
00:04:52,150 --> 00:04:55,210
us to the to the Mellanox<font color="#CCCCCC"> connect</font><font color="#E5E5E5"> X and</font>

149
00:04:53,979 --> 00:04:56,710
memo ops as far as I'm concerned is the

150
00:04:55,210 --> 00:04:59,440
<font color="#E5E5E5">only contender because if you go to the</font>

151
00:04:56,710 --> 00:05:00,820
websites<font color="#E5E5E5"> of every</font><font color="#CCCCCC"> Ethernet card</font><font color="#E5E5E5"> vendor</font>

152
00:04:59,440 --> 00:05:01,780
it's<font color="#E5E5E5"> only Intel and Mellanox where</font>

153
00:05:00,820 --> 00:05:03,310
you'll find the device driver

154
00:05:01,780 --> 00:05:04,419
specification so everybody else has

155
00:05:03,310 --> 00:05:07,000
disqualified<font color="#CCCCCC"> themselves from</font>

156
00:05:04,419 --> 00:05:08,530
consideration<font color="#E5E5E5"> and so then if you take</font><font color="#CCCCCC"> a</font>

157
00:05:07,000 --> 00:05:10,479
closer look<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> connect X it's</font>

158
00:05:08,530 --> 00:05:11,590
actually from a bird's eye view it's got

159
00:05:10,479 --> 00:05:13,719
<font color="#CCCCCC">some really really really nice</font>

160
00:05:11,590 --> 00:05:15,969
properties<font color="#CCCCCC"> actually so first of all the</font>

161
00:05:13,720 --> 00:05:17,500
connect X supports every port speed<font color="#E5E5E5"> you</font>

162
00:05:15,970 --> 00:05:19,090
care to name<font color="#E5E5E5"> and they're very very</font><font color="#CCCCCC"> fast</font>

163
00:05:17,500 --> 00:05:21,639
at introducing<font color="#E5E5E5"> use port speeds that</font>

164
00:05:19,090 --> 00:05:23,859
become status 100<font color="#E5E5E5"> Gig 200 gig there they</font>

165
00:05:21,639 --> 00:05:26,020
<font color="#CCCCCC">they on top</font><font color="#E5E5E5"> of all of these things they</font>

166
00:05:23,860 --> 00:05:28,500
refresh the silicon very regularly<font color="#E5E5E5"> you</font>

167
00:05:26,020 --> 00:05:31,030
get connect<font color="#E5E5E5"> x4 connect x5 connect x6 and</font>

168
00:05:28,500 --> 00:05:32,350
they update this<font color="#E5E5E5"> across</font><font color="#CCCCCC"> the board it's</font>

169
00:05:31,030 --> 00:05:33,729
not<font color="#E5E5E5"> that the 10 gig is getting</font><font color="#CCCCCC"> old or</font>

170
00:05:32,350 --> 00:05:35,620
<font color="#E5E5E5">older and</font><font color="#CCCCCC"> then they</font><font color="#E5E5E5"> get the 40 gig they</font>

171
00:05:33,729 --> 00:05:38,200
they do across the board refreshes which

172
00:05:35,620 --> 00:05:41,320
is very nice<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the best thing by far</font>

173
00:05:38,200 --> 00:05:42,789
is that<font color="#E5E5E5"> the same device driver works for</font>

174
00:05:41,320 --> 00:05:45,070
every single<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> cars every</font>

175
00:05:42,789 --> 00:05:47,620
port speed<font color="#E5E5E5"> every generation so if you</font>

176
00:05:45,070 --> 00:05:49,690
would take<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 10-game connect x4 and</font>

177
00:05:47,620 --> 00:05:51,400
write a device driver<font color="#E5E5E5"> for that that</font>

178
00:05:49,690 --> 00:05:53,800
driver could then<font color="#E5E5E5"> also be deployed on a</font>

179
00:05:51,400 --> 00:05:55,359
<font color="#E5E5E5">200</font><font color="#CCCCCC"> gig connect</font><font color="#E5E5E5"> x6 and this is fantastic</font>

180
00:05:53,800 --> 00:05:57,520
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> fantastic in for your driver</font>

181
00:05:55,360 --> 00:05:59,160
developer who values your own time<font color="#E5E5E5"> and</font>

182
00:05:57,520 --> 00:06:01,870
considers<font color="#CCCCCC"> it to be a scarce resource and</font>

183
00:05:59,160 --> 00:06:03,160
the magic<font color="#E5E5E5"> that makes this work is</font><font color="#CCCCCC"> that</font>

184
00:06:01,870 --> 00:06:04,720
the driver is<font color="#E5E5E5"> not actually talking</font><font color="#CCCCCC"> to</font>

185
00:06:03,160 --> 00:06:06,820
the<font color="#E5E5E5"> silicon directly there's a layer of</font>

186
00:06:04,720 --> 00:06:08,560
firmware<font color="#CCCCCC"> in the card that that</font>

187
00:06:06,820 --> 00:06:10,930
implements a standard protocol and and

188
00:06:08,560 --> 00:06:12,250
hides the differences in the silicon so

189
00:06:10,930 --> 00:06:16,120
if you're going to<font color="#E5E5E5"> write</font><font color="#CCCCCC"> the connect X</font>

190
00:06:12,250 --> 00:06:17,770
<font color="#E5E5E5">device driver you will have a controller</font>

191
00:06:16,120 --> 00:06:20,050
component<font color="#E5E5E5"> I'm going to call it on the</font>

192
00:06:17,770 --> 00:06:22,539
host that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> talking to the</font><font color="#CCCCCC"> firmware or</font>

193
00:06:20,050 --> 00:06:24,669
PCI Express<font color="#E5E5E5"> and sending a bunch of a</font>

194
00:06:22,539 --> 00:06:27,070
bunch<font color="#E5E5E5"> of requests initialize and</font>

195
00:06:24,669 --> 00:06:29,109
configure the network card and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

196
00:06:27,070 --> 00:06:31,870
basically<font color="#E5E5E5"> a crud interface that you get</font>

197
00:06:29,110 --> 00:06:33,729
from the<font color="#E5E5E5"> from the firmware you have a</font>

198
00:06:31,870 --> 00:06:35,680
bunch of<font color="#E5E5E5"> objects like a transmit Q and a</font>

199
00:06:33,729 --> 00:06:37,570
receive Q and a flow table<font color="#E5E5E5"> and so on and</font>

200
00:06:35,680 --> 00:06:39,039
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can create you</font><font color="#E5E5E5"> can read you can</font>

201
00:06:37,570 --> 00:06:39,599
<font color="#E5E5E5">update and you can delete these objects</font>

202
00:06:39,039 --> 00:06:41,580
<font color="#E5E5E5">and you just make</font>

203
00:06:39,600 --> 00:06:43,140
series<font color="#E5E5E5"> of these requests to initialize</font>

204
00:06:41,580 --> 00:06:44,359
the<font color="#E5E5E5"> card and and give it the</font>

205
00:06:43,140 --> 00:06:46,490
configuration<font color="#E5E5E5"> that's going to suit your</font>

206
00:06:44,360 --> 00:06:48,690
<font color="#CCCCCC">application and then</font><font color="#E5E5E5"> having</font><font color="#CCCCCC"> done this</font>

207
00:06:46,490 --> 00:06:51,180
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> have some sent logically</font>

208
00:06:48,690 --> 00:06:52,620
separate processes that do transmit and

209
00:06:51,180 --> 00:06:53,970
receive and multiplex them<font color="#CCCCCC"> onto the card</font>

210
00:06:52,620 --> 00:06:55,530
<font color="#CCCCCC">and there's</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> quite a neat</font>

211
00:06:53,970 --> 00:06:56,880
mechanism for<font color="#E5E5E5"> delegating this just with</font>

212
00:06:55,530 --> 00:06:59,130
plain old memory mappings you can

213
00:06:56,880 --> 00:07:02,280
delegate access<font color="#CCCCCC"> to two cues to specific</font>

214
00:06:59,130 --> 00:07:03,810
processes<font color="#E5E5E5"> now</font><font color="#CCCCCC"> the last I checked which</font>

215
00:07:02,280 --> 00:07:05,130
<font color="#E5E5E5">admittedly is</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of years ago the</font>

216
00:07:03,810 --> 00:07:07,320
software stack that Mellanox would

217
00:07:05,130 --> 00:07:10,950
recommend<font color="#E5E5E5"> for building on this is quite</font>

218
00:07:07,320 --> 00:07:12,780
large<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the controller is a</font><font color="#CCCCCC"> Linux</font>

219
00:07:10,950 --> 00:07:14,490
kernel<font color="#E5E5E5"> module the ml x5 kernel module</font>

220
00:07:12,780 --> 00:07:16,289
and then on top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that you have the</font><font color="#CCCCCC"> O</font>

221
00:07:14,490 --> 00:07:18,030
fed library<font color="#E5E5E5"> monitor fed library which is</font>

222
00:07:16,290 --> 00:07:20,160
a substantial<font color="#CCCCCC"> piece of</font><font color="#E5E5E5"> software and then</font>

223
00:07:18,030 --> 00:07:21,989
on top of<font color="#CCCCCC"> that you have a PDK</font><font color="#E5E5E5"> and I</font>

224
00:07:20,160 --> 00:07:23,490
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> think it's an exaggeration to say</font>

225
00:07:21,990 --> 00:07:25,830
this<font color="#E5E5E5"> is about a million</font><font color="#CCCCCC"> lines of C code</font>

226
00:07:23,490 --> 00:07:27,960
<font color="#E5E5E5">so it's a considerable dependency to</font>

227
00:07:25,830 --> 00:07:29,490
take on so when we did the driver and

228
00:07:27,960 --> 00:07:31,859
snap we wanted to see if we could we

229
00:07:29,490 --> 00:07:33,030
could<font color="#E5E5E5"> optimize</font><font color="#CCCCCC"> for making it simpler and</font>

230
00:07:31,860 --> 00:07:34,380
easier to<font color="#E5E5E5"> maintain</font><font color="#CCCCCC"> that's something we</font>

231
00:07:33,030 --> 00:07:37,229
can understand ourselves<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way</font>

232
00:07:34,380 --> 00:07:39,240
through and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we replaced the whole</font>

233
00:07:37,230 --> 00:07:40,320
stack so<font color="#E5E5E5"> we don't use</font><font color="#CCCCCC"> TP tkm we don't</font>

234
00:07:39,240 --> 00:07:41,970
use no fed and we don't use a<font color="#CCCCCC"> kernel</font>

235
00:07:40,320 --> 00:07:44,460
driver and we just<font color="#E5E5E5"> talk directly on PCI</font>

236
00:07:41,970 --> 00:07:46,620
Express to the firmware<font color="#E5E5E5"> and now drive is</font>

237
00:07:44,460 --> 00:07:48,450
<font color="#CCCCCC">1,500 lines of code which is actually a</font>

238
00:07:46,620 --> 00:07:52,680
considerable reduction from<font color="#E5E5E5"> a million</font>

239
00:07:48,450 --> 00:07:54,240
lines and in that<font color="#CCCCCC"> 1,500 lines of</font><font color="#E5E5E5"> code is</font>

240
00:07:52,680 --> 00:07:55,470
doing<font color="#E5E5E5"> basically three things one is</font><font color="#CCCCCC"> it's</font>

241
00:07:54,240 --> 00:07:57,330
implementing the client side of<font color="#CCCCCC"> this</font>

242
00:07:55,470 --> 00:07:58,920
crud protocol for<font color="#CCCCCC"> initializing the</font>

243
00:07:57,330 --> 00:08:00,750
firmware<font color="#E5E5E5"> in giving an appropriate</font>

244
00:07:58,920 --> 00:08:02,670
<font color="#CCCCCC">configuration it's implementing the</font>

245
00:08:00,750 --> 00:08:04,680
transmit and receive functionality for

246
00:08:02,670 --> 00:08:06,600
writing descriptors and<font color="#E5E5E5"> poking the card</font>

247
00:08:04,680 --> 00:08:08,700
working<font color="#E5E5E5"> out to process them</font><font color="#CCCCCC"> and it's</font>

248
00:08:06,600 --> 00:08:09,810
implementing<font color="#CCCCCC"> multi process operations so</font>

249
00:08:08,700 --> 00:08:11,550
you<font color="#E5E5E5"> can have the controller running in</font>

250
00:08:09,810 --> 00:08:13,170
<font color="#E5E5E5">one UNIX</font><font color="#CCCCCC"> process and if you want you</font><font color="#E5E5E5"> can</font>

251
00:08:11,550 --> 00:08:15,900
have<font color="#E5E5E5"> transmit and receive functions</font>

252
00:08:13,170 --> 00:08:16,950
running in other processes<font color="#CCCCCC"> and I'm just</font>

253
00:08:15,900 --> 00:08:21,030
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to give you a really really quick</font>

254
00:08:16,950 --> 00:08:25,349
flavor<font color="#E5E5E5"> of how that driver works so what</font>

255
00:08:21,030 --> 00:08:27,239
you see<font color="#CCCCCC"> here is on the top is an excerpt</font>

256
00:08:25,350 --> 00:08:28,800
from the<font color="#E5E5E5"> specification the the PRM the</font>

257
00:08:27,240 --> 00:08:30,060
programming reference manual<font color="#E5E5E5"> so when you</font>

258
00:08:28,800 --> 00:08:32,099
look at the specification for<font color="#CCCCCC"> the</font>

259
00:08:30,060 --> 00:08:33,840
interface to<font color="#E5E5E5"> the firmware</font><font color="#CCCCCC"> you see a lot</font>

260
00:08:32,099 --> 00:08:35,969
of<font color="#E5E5E5"> tables like</font><font color="#CCCCCC"> this that says if you</font>

261
00:08:33,840 --> 00:08:38,400
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> perform</font><font color="#E5E5E5"> the operation set flow</font>

262
00:08:35,969 --> 00:08:40,440
table<font color="#CCCCCC"> route you need to create a</font>

263
00:08:38,400 --> 00:08:43,559
<font color="#E5E5E5">structure which is a fixed</font><font color="#CCCCCC"> size binary</font>

264
00:08:40,440 --> 00:08:45,000
structure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> specific</font><font color="#CCCCCC"> offsets you</font>

265
00:08:43,559 --> 00:08:46,319
<font color="#E5E5E5">need to put certain parameters that the</font>

266
00:08:45,000 --> 00:08:47,070
<font color="#E5E5E5">farmer</font><font color="#CCCCCC"> is expecting it's a little bit</font>

267
00:08:46,320 --> 00:08:49,440
like a C struct

268
00:08:47,070 --> 00:08:50,790
<font color="#CCCCCC">more or</font><font color="#E5E5E5"> less and down below this is what</font>

269
00:08:49,440 --> 00:08:51,780
the Lua code looks like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement the</font>

270
00:08:50,790 --> 00:08:53,640
driver we have a<font color="#CCCCCC"> func</font>

271
00:08:51,780 --> 00:08:55,829
with the same name<font color="#CCCCCC"> it takes the</font>

272
00:08:53,640 --> 00:08:58,800
arguments as normal variables it puts

273
00:08:55,830 --> 00:09:00,900
them into an<font color="#E5E5E5"> array of bits suitable</font>

274
00:08:58,800 --> 00:09:02,910
offsets<font color="#E5E5E5"> it sends this out to the card</font>

275
00:09:00,900 --> 00:09:04,709
over<font color="#E5E5E5"> a command</font><font color="#CCCCCC"> queue of PCI Express and</font>

276
00:09:02,910 --> 00:09:06,060
<font color="#E5E5E5">it gets a result back saying if the</font>

277
00:09:04,710 --> 00:09:09,120
operation<font color="#CCCCCC"> was successful</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> if the</font>

278
00:09:06,060 --> 00:09:11,369
operation fails<font color="#E5E5E5"> and like a half the</font>

279
00:09:09,120 --> 00:09:13,230
driver code<font color="#E5E5E5"> or something</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> this so</font>

280
00:09:11,370 --> 00:09:14,940
so it's<font color="#E5E5E5"> 1,500 lines of code in half of</font>

281
00:09:13,230 --> 00:09:16,920
it is<font color="#E5E5E5"> basically just</font><font color="#CCCCCC"> transmitted</font>

282
00:09:14,940 --> 00:09:18,210
transliterated from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> datasheet so so</font>

283
00:09:16,920 --> 00:09:23,839
it's it's<font color="#CCCCCC"> actually pretty</font><font color="#E5E5E5"> reasonable</font>

284
00:09:18,210 --> 00:09:26,190
protocol and then for<font color="#E5E5E5"> multi processing</font>

285
00:09:23,840 --> 00:09:27,210
<font color="#E5E5E5">this is a way that we do it which might</font>

286
00:09:26,190 --> 00:09:28,680
be of interest<font color="#E5E5E5"> to other people who are</font>

287
00:09:27,210 --> 00:09:31,280
<font color="#E5E5E5">trying to look trying to find a simple</font>

288
00:09:28,680 --> 00:09:34,140
<font color="#CCCCCC">solution we have the controller</font><font color="#E5E5E5"> that</font>

289
00:09:31,280 --> 00:09:35,790
<font color="#CCCCCC">comes up and</font><font color="#E5E5E5"> it sets up the firmware and</font>

290
00:09:34,140 --> 00:09:37,110
it knows<font color="#E5E5E5"> about the for all of a set of</font>

291
00:09:35,790 --> 00:09:39,180
workers<font color="#E5E5E5"> that are supposed to exist for</font>

292
00:09:37,110 --> 00:09:41,220
the application<font color="#E5E5E5"> and for each worker</font><font color="#CCCCCC"> it</font>

293
00:09:39,180 --> 00:09:42,569
just creates a<font color="#E5E5E5"> configuration file the</font>

294
00:09:41,220 --> 00:09:44,160
worker then<font color="#CCCCCC"> polls for the existence of</font>

295
00:09:42,570 --> 00:09:46,260
and inside<font color="#CCCCCC"> that configuration file is</font>

296
00:09:44,160 --> 00:09:48,030
all the<font color="#CCCCCC"> relevant</font><font color="#E5E5E5"> information like</font><font color="#CCCCCC"> the</font>

297
00:09:46,260 --> 00:09:49,290
addresses<font color="#CCCCCC"> in physical memory of the DMA</font>

298
00:09:48,030 --> 00:09:50,550
descriptor<font color="#E5E5E5"> queues and</font><font color="#CCCCCC"> that kind of thing</font>

299
00:09:49,290 --> 00:09:53,099
they can attach to<font color="#E5E5E5"> so in our</font>

300
00:09:50,550 --> 00:09:55,140
implementation<font color="#CCCCCC"> these files actually</font>

301
00:09:53,100 --> 00:09:57,150
<font color="#E5E5E5">shared memory objects basically</font><font color="#CCCCCC"> c</font>

302
00:09:55,140 --> 00:09:59,460
structs<font color="#E5E5E5"> they can be used for</font>

303
00:09:57,150 --> 00:10:02,130
<font color="#CCCCCC">synchronization and we we have a trick</font>

304
00:09:59,460 --> 00:10:03,600
in snob that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dma memory we always</font>

305
00:10:02,130 --> 00:10:05,760
map it at a consistent address in every

306
00:10:03,600 --> 00:10:08,370
<font color="#CCCCCC">process so any any pointer</font><font color="#E5E5E5"> into DM a</font>

307
00:10:05,760 --> 00:10:11,700
memory and<font color="#CCCCCC"> you know collection of</font>

308
00:10:08,370 --> 00:10:13,860
processes<font color="#CCCCCC"> is globally accessible and and</font>

309
00:10:11,700 --> 00:10:16,620
that's like it that's<font color="#E5E5E5"> how the connect</font>

310
00:10:13,860 --> 00:10:18,750
<font color="#CCCCCC">ex-driver works</font><font color="#E5E5E5"> and if you want to write</font>

311
00:10:16,620 --> 00:10:20,460
one<font color="#CCCCCC"> i can recommend</font><font color="#E5E5E5"> it it's not as hard</font>

312
00:10:18,750 --> 00:10:23,060
as<font color="#CCCCCC"> you would think</font><font color="#E5E5E5"> so thank you for how</font>

313
00:10:20,460 --> 00:10:23,060
much for your attention

314
00:10:23,750 --> 00:10:26,789
[Applause]

315
00:10:27,040 --> 00:10:33,019
<font color="#CCCCCC">five</font><font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> for questions okay so I</font>

316
00:10:30,560 --> 00:10:36,378
<font color="#CCCCCC">messed up</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> want to consider</font>

317
00:10:33,019 --> 00:10:39,439
any<font color="#E5E5E5"> offload the inception device but I</font>

318
00:10:36,379 --> 00:10:41,420
want to<font color="#E5E5E5"> say that this kind of device is</font>

319
00:10:39,439 --> 00:10:43,490
<font color="#CCCCCC">able to do some</font><font color="#E5E5E5"> very nice of floating</font>

320
00:10:41,420 --> 00:10:45,560
like tonight of reading<font color="#E5E5E5"> of slow steering</font>

321
00:10:43,490 --> 00:10:48,019
<font color="#E5E5E5">like control things</font><font color="#CCCCCC"> food to</font><font color="#E5E5E5"> a switch and</font>

322
00:10:45,560 --> 00:10:51,619
the kind<font color="#E5E5E5"> of thing you can get when you</font>

323
00:10:48,019 --> 00:10:53,600
use<font color="#E5E5E5"> the PDK PMD yeah absolutely so</font><font color="#CCCCCC"> so if</font>

324
00:10:51,620 --> 00:10:55,610
your goal is<font color="#E5E5E5"> to actually take</font><font color="#CCCCCC"> advantage</font>

325
00:10:53,600 --> 00:10:57,319
<font color="#E5E5E5">of all the awkward features on the cards</font>

326
00:10:55,610 --> 00:10:58,850
then then the value of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> off-the-shelf</font>

327
00:10:57,319 --> 00:10:59,990
drivers increases<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the work the</font>

328
00:10:58,850 --> 00:11:01,129
amount of<font color="#E5E5E5"> work</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need to do to</font>

329
00:10:59,990 --> 00:11:03,199
implement<font color="#E5E5E5"> that in</font><font color="#CCCCCC"> a known driver</font>

330
00:11:01,129 --> 00:11:08,350
<font color="#E5E5E5">increases so I think that this</font><font color="#CCCCCC"> approach</font>

331
00:11:03,199 --> 00:11:11,719
is<font color="#CCCCCC"> very well optimized for if you're</font>

332
00:11:08,350 --> 00:11:58,160
like a<font color="#E5E5E5"> hybrid approach with software</font>

333
00:11:11,720 --> 00:11:58,610
<font color="#CCCCCC">then there's a revolution no absolutely</font>

334
00:11:58,160 --> 00:12:00,469
not

335
00:11:58,610 --> 00:12:02,839
so<font color="#CCCCCC"> checksum in hardware is</font><font color="#E5E5E5"> really very</font>

336
00:12:00,470 --> 00:12:04,339
<font color="#CCCCCC">old-fashioned idea so in</font><font color="#E5E5E5"> snap we don't</font>

337
00:12:02,839 --> 00:12:05,540
<font color="#E5E5E5">even use get</font><font color="#CCCCCC"> together from</font><font color="#E5E5E5"> the hardware</font>

338
00:12:04,339 --> 00:12:06,709
we do<font color="#E5E5E5"> everything in unified packet</font>

339
00:12:05,540 --> 00:12:09,500
buffers and<font color="#E5E5E5"> if you want to use vector</font>

340
00:12:06,709 --> 00:12:11,779
<font color="#E5E5E5">instructions to do a checksum</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> CPU</font>

341
00:12:09,500 --> 00:12:13,910
these days it doesn't<font color="#E5E5E5"> go to take hardly</font>

342
00:12:11,779 --> 00:12:15,019
any<font color="#E5E5E5"> time</font><font color="#CCCCCC"> at all</font><font color="#E5E5E5"> and and</font><font color="#CCCCCC"> okay so some of</font>

343
00:12:13,910 --> 00:12:16,459
the<font color="#E5E5E5"> offloads are quite interesting if</font>

344
00:12:15,019 --> 00:12:17,480
you're developing<font color="#CCCCCC"> a UNIX kernel because</font>

345
00:12:16,459 --> 00:12:19,008
<font color="#CCCCCC">a lot of them have</font><font color="#E5E5E5"> been developed in</font>

346
00:12:17,480 --> 00:12:20,240
<font color="#E5E5E5">that sense so your kernel developer I</font>

347
00:12:19,009 --> 00:12:21,649
don't begrudge you using all of<font color="#E5E5E5"> those</font>

348
00:12:20,240 --> 00:12:23,660
<font color="#CCCCCC">offloads</font><font color="#E5E5E5"> but I think for new</font>

349
00:12:21,649 --> 00:12:24,910
applications<font color="#E5E5E5"> most of the time the</font>

350
00:12:23,660 --> 00:12:27,110
offloads are not really going<font color="#E5E5E5"> to be</font>

351
00:12:24,910 --> 00:12:28,399
supporting what you want and all you'll

352
00:12:27,110 --> 00:12:29,389
<font color="#CCCCCC">find special cases that</font><font color="#E5E5E5"> they don't</font>

353
00:12:28,399 --> 00:12:31,189
support and that kind of thing so

354
00:12:29,389 --> 00:12:33,319
specifically for checksums<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> that</font>

355
00:12:31,189 --> 00:12:34,730
this<font color="#E5E5E5"> is a yesterday a yesterday feature</font>

356
00:12:33,319 --> 00:12:38,240
<font color="#E5E5E5">what about</font>

357
00:12:34,730 --> 00:12:40,010
<font color="#CCCCCC">two</font><font color="#E5E5E5"> transfers into memory</font><font color="#CCCCCC"> we don't get</font>

358
00:12:38,240 --> 00:12:41,660
it all this<font color="#E5E5E5"> frame at the same time but</font>

359
00:12:40,010 --> 00:12:44,630
yet it's or

360
00:12:41,660 --> 00:12:47,779
so our approach is very<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> a packet</font>

361
00:12:44,630 --> 00:12:49,310
packet isn't<font color="#E5E5E5"> is an MTU size array you</font>

362
00:12:47,779 --> 00:12:50,540
<font color="#CCCCCC">can get the whole packet in you</font><font color="#E5E5E5"> assume</font>

363
00:12:49,310 --> 00:12:52,099
<font color="#E5E5E5">Leon during the whole packet into</font><font color="#CCCCCC"> cache</font>

364
00:12:50,540 --> 00:12:53,269
<font color="#E5E5E5">once you have it in cash you can do</font>

365
00:12:52,100 --> 00:12:54,470
things<font color="#E5E5E5"> like check sums on very</font><font color="#CCCCCC"> very</font>

366
00:12:53,269 --> 00:12:55,760
efficiently<font color="#CCCCCC"> this is the basic</font>

367
00:12:54,470 --> 00:12:57,380
programming model that<font color="#CCCCCC"> we adopted makes</font>

368
00:12:55,760 --> 00:12:58,910
things very very very<font color="#E5E5E5"> simple I think</font>

369
00:12:57,380 --> 00:13:00,350
<font color="#CCCCCC">it's a slippery slope that when you</font>

370
00:12:58,910 --> 00:13:01,370
start trying to<font color="#CCCCCC"> offload</font><font color="#E5E5E5"> things in Nick</font>

371
00:13:00,350 --> 00:13:02,930
then you start saying<font color="#CCCCCC"> things like well</font>

372
00:13:01,370 --> 00:13:05,060
hey maybe we don't need<font color="#E5E5E5"> to get the</font>

373
00:13:02,930 --> 00:13:06,680
<font color="#E5E5E5">payload into l2 cache at all and then</font>

374
00:13:05,060 --> 00:13:08,239
you're spending<font color="#CCCCCC"> the rest of</font><font color="#E5E5E5"> your life in</font>

375
00:13:06,680 --> 00:13:10,219
a balancing act trying<font color="#E5E5E5"> to keep it out</font><font color="#CCCCCC"> of</font>

376
00:13:08,240 --> 00:13:11,570
l2 cache<font color="#E5E5E5"> because that's gonna change</font>

377
00:13:10,220 --> 00:13:13,250
<font color="#E5E5E5">your</font><font color="#CCCCCC"> performance characteristics</font><font color="#E5E5E5"> but if</font>

378
00:13:11,570 --> 00:13:14,810
you're<font color="#E5E5E5"> just say hey let's load the</font>

379
00:13:13,250 --> 00:13:17,089
packet into<font color="#E5E5E5"> l2 cache then everything is</font>

380
00:13:14,810 --> 00:13:19,790
easy<font color="#E5E5E5"> so I think this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> this is the</font>

381
00:13:17,089 --> 00:13:39,920
the way<font color="#E5E5E5"> to do simple user space network</font>

382
00:13:19,790 --> 00:13:41,540
<font color="#CCCCCC">I think that it does I think that by</font>

383
00:13:39,920 --> 00:13:43,310
having<font color="#CCCCCC"> snap written in Louise appeals to</font>

384
00:13:41,540 --> 00:13:46,130
a different set of people<font color="#E5E5E5"> I think that</font>

385
00:13:43,310 --> 00:13:47,989
<font color="#E5E5E5">DP DK is very well designed</font><font color="#CCCCCC"> for making</font>

386
00:13:46,130 --> 00:13:49,699
people<font color="#E5E5E5"> coming from like a</font><font color="#CCCCCC"> kernel the X</font>

387
00:13:47,990 --> 00:13:50,899
<font color="#E5E5E5">works and so on background comfortable</font>

388
00:13:49,699 --> 00:13:52,339
and keeping<font color="#E5E5E5"> things like what they would</font>

389
00:13:50,899 --> 00:13:53,839
expect but there's another group<font color="#CCCCCC"> of</font>

390
00:13:52,339 --> 00:13:54,829
people<font color="#E5E5E5"> who</font><font color="#CCCCCC"> have not been doing</font>

391
00:13:53,839 --> 00:13:55,940
<font color="#CCCCCC">networking development because they</font>

392
00:13:54,829 --> 00:13:57,019
found<font color="#E5E5E5"> that intimidating they found</font>

393
00:13:55,940 --> 00:13:58,160
there's been a lot of barriers<font color="#CCCCCC"> to</font><font color="#E5E5E5"> entry</font>

394
00:13:57,019 --> 00:13:59,870
they don't want to<font color="#E5E5E5"> write kernel modules</font>

395
00:13:58,160 --> 00:14:01,310
they don't want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> program is C and IC</font>

396
00:13:59,870 --> 00:14:02,990
snob is catering to these people<font color="#E5E5E5"> so</font>

397
00:14:01,310 --> 00:14:04,849
we're<font color="#E5E5E5"> really giving an on-ramp to people</font>

398
00:14:02,990 --> 00:14:06,680
who were kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> we're not a part of of</font>

399
00:14:04,850 --> 00:14:10,300
the networking<font color="#E5E5E5"> world before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> give them</font>

400
00:14:06,680 --> 00:14:10,300
<font color="#E5E5E5">an easy way</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> involved</font>

401
00:14:18,990 --> 00:14:23,070
so in snap we do support birthday oh but

402
00:14:21,810 --> 00:14:24,540
but<font color="#E5E5E5"> personally I don't have</font><font color="#CCCCCC"> a lot of</font>

403
00:14:23,070 --> 00:14:26,550
nice things<font color="#E5E5E5"> to say about vertigo</font><font color="#CCCCCC"> that's</font>

404
00:14:24,540 --> 00:14:28,380
partly because<font color="#E5E5E5"> we have also done the the</font>

405
00:14:26,550 --> 00:14:29,849
server side of attire<font color="#E5E5E5"> Berto has a lot of</font>

406
00:14:28,380 --> 00:14:31,530
<font color="#E5E5E5">options and if</font><font color="#CCCCCC"> you want to make all the</font>

407
00:14:29,850 --> 00:14:33,690
virtual machines<font color="#E5E5E5"> happy if you want to</font>

408
00:14:31,530 --> 00:14:35,790
provide<font color="#E5E5E5"> vert I go to</font><font color="#CCCCCC"> DP DK and Linux</font>

409
00:14:33,690 --> 00:14:37,410
<font color="#E5E5E5">cone or so on which we do in snap</font><font color="#CCCCCC"> is a</font>

410
00:14:35,790 --> 00:14:39,150
<font color="#E5E5E5">huge pain because they expect all</font><font color="#CCCCCC"> of</font>

411
00:14:37,410 --> 00:14:40,290
these magical<font color="#CCCCCC"> off loads if you don't</font>

412
00:14:39,150 --> 00:14:43,470
give it it well you<font color="#E5E5E5"> have to do a lot of</font>

413
00:14:40,290 --> 00:14:52,920
work to give it to them so<font color="#E5E5E5"> DPO is not</font>

414
00:14:43,470 --> 00:14:54,720
not simple<font color="#CCCCCC"> so so you</font><font color="#E5E5E5"> know in a modern if</font>

415
00:14:52,920 --> 00:14:57,209
you got a<font color="#E5E5E5"> modern server with a hundred</font>

416
00:14:54,720 --> 00:14:59,250
<font color="#E5E5E5">gig network card and a big</font><font color="#CCCCCC"> cpu you have</font>

417
00:14:57,210 --> 00:15:01,440
something<font color="#CCCCCC"> like a one-to-one ratio of</font>

418
00:14:59,250 --> 00:15:02,880
<font color="#E5E5E5">instructions you can retire compared</font>

419
00:15:01,440 --> 00:15:04,350
with bits you know so if your average

420
00:15:02,880 --> 00:15:06,720
<font color="#CCCCCC">PACA size is about</font><font color="#E5E5E5"> two kilobits you</font><font color="#CCCCCC"> can</font>

421
00:15:04,350 --> 00:15:08,640
probably<font color="#E5E5E5"> retire about</font><font color="#CCCCCC"> 2,000</font><font color="#E5E5E5"> instructions</font>

422
00:15:06,720 --> 00:15:09,270
if you you know<font color="#E5E5E5"> assuming</font><font color="#CCCCCC"> you're getting</font>

423
00:15:08,640 --> 00:15:11,730
good<font color="#CCCCCC"> IP</font>

424
00:15:09,270 --> 00:15:13,079
<font color="#CCCCCC">so basically</font><font color="#E5E5E5"> CPUs are just really really</font>

425
00:15:11,730 --> 00:15:14,370
really<font color="#E5E5E5"> really fast that's the answer</font>

426
00:15:13,080 --> 00:15:15,840
<font color="#E5E5E5">they're just really fast you don't even</font>

427
00:15:14,370 --> 00:15:17,650
<font color="#E5E5E5">need vector instructions thank you so</font>

428
00:15:15,840 --> 00:15:24,490
much Luke thank you

429
00:15:17,650 --> 00:15:24,490
[Applause]

