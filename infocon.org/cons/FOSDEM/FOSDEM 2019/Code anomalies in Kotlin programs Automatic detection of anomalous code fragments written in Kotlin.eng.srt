1
00:00:04,640 --> 00:00:10,580
usual way<font color="#CCCCCC"> today I'm going to</font><font color="#E5E5E5"> talk about</font>

2
00:00:08,690 --> 00:00:13,850
<font color="#E5E5E5">one of the projects that we do a</font>

3
00:00:10,580 --> 00:00:15,740
<font color="#CCCCCC">JetBrains research and I am as I think</font>

4
00:00:13,850 --> 00:00:19,759
you all<font color="#E5E5E5"> figured</font><font color="#CCCCCC"> it out</font><font color="#E5E5E5"> it will be</font><font color="#CCCCCC"> about</font>

5
00:00:15,740 --> 00:00:21,859
Kotlin and<font color="#E5E5E5"> Kotlin code anomalies well</font>

6
00:00:19,760 --> 00:00:23,539
<font color="#E5E5E5">I'm not here to officially promote</font>

7
00:00:21,859 --> 00:00:27,019
<font color="#CCCCCC">Kotlin</font><font color="#E5E5E5"> we have specially trained</font><font color="#CCCCCC"> people</font>

8
00:00:23,539 --> 00:00:27,769
<font color="#CCCCCC">for this but we have to</font><font color="#E5E5E5"> understand what</font>

9
00:00:27,019 --> 00:00:31,009
they're looking<font color="#CCCCCC"> at</font>

10
00:00:27,769 --> 00:00:34,220
so another<font color="#E5E5E5"> show hands how many of you</font>

11
00:00:31,009 --> 00:00:37,870
tried<font color="#E5E5E5"> cotton whoa this is this is</font>

12
00:00:34,220 --> 00:00:41,000
<font color="#E5E5E5">awesome anyway so brief</font><font color="#CCCCCC"> introduction</font>

13
00:00:37,870 --> 00:00:43,390
Kotlin is a general-purpose<font color="#CCCCCC"> sorry p-type</font>

14
00:00:41,000 --> 00:00:46,760
programming language<font color="#E5E5E5"> the both features</font>

15
00:00:43,390 --> 00:00:49,960
object-oriented<font color="#E5E5E5"> and functional</font><font color="#CCCCCC"> are</font>

16
00:00:46,760 --> 00:00:52,660
<font color="#E5E5E5">features so it was designed</font><font color="#CCCCCC"> to</font>

17
00:00:49,960 --> 00:00:56,089
interoperate this<font color="#E5E5E5"> Java fully and</font>

18
00:00:52,660 --> 00:00:58,849
originally was targeted JVM<font color="#E5E5E5"> and Android</font>

19
00:00:56,089 --> 00:01:01,100
<font color="#CCCCCC">platforms</font><font color="#E5E5E5"> but now it can be compiled to</font>

20
00:00:58,850 --> 00:01:04,910
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> and to even to native code</font>

21
00:01:01,100 --> 00:01:08,540
<font color="#CCCCCC">via LLVM it's open source it's</font>

22
00:01:04,910 --> 00:01:11,630
<font color="#CCCCCC">relatively young but</font><font color="#E5E5E5"> have active and</font>

23
00:01:08,540 --> 00:01:13,520
continuously growing community so<font color="#E5E5E5"> you</font>

24
00:01:11,630 --> 00:01:17,990
know we should<font color="#E5E5E5"> focus on the tooling</font>

25
00:01:13,520 --> 00:01:21,020
around this<font color="#E5E5E5"> language for most people</font>

26
00:01:17,990 --> 00:01:23,929
<font color="#CCCCCC">Kotler looks like more</font><font color="#E5E5E5"> swim glide</font>

27
00:01:21,020 --> 00:01:25,520
version of<font color="#E5E5E5"> Java with its</font><font color="#CCCCCC"> extension</font>

28
00:01:23,930 --> 00:01:29,360
functions coroutines

29
00:01:25,520 --> 00:01:32,179
properties<font color="#CCCCCC"> nobility's analysis and</font>

30
00:01:29,360 --> 00:01:35,210
different<font color="#E5E5E5"> features and when people use</font>

31
00:01:32,180 --> 00:01:39,560
these<font color="#E5E5E5"> cool features their code</font><font color="#CCCCCC"> JRA</font>

32
00:01:35,210 --> 00:01:40,729
becomes more clear<font color="#E5E5E5"> and concise but there</font>

33
00:01:39,560 --> 00:01:45,320
are always<font color="#E5E5E5"> people who</font><font color="#CCCCCC"> do things</font>

34
00:01:40,729 --> 00:01:48,049
<font color="#E5E5E5">differently</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> some reason we</font><font color="#CCCCCC"> have an</font>

35
00:01:45,320 --> 00:01:50,298
implementation<font color="#CCCCCC"> of fourth compiler in</font>

36
00:01:48,049 --> 00:01:53,299
cotton you know this<font color="#E5E5E5"> stack based</font>

37
00:01:50,299 --> 00:01:55,700
language from the<font color="#CCCCCC"> seventies</font><font color="#E5E5E5"> who knows</font>

38
00:01:53,299 --> 00:01:59,500
why it was written but as github<font color="#E5E5E5"> states</font>

39
00:01:55,700 --> 00:02:01,640
<font color="#E5E5E5">it's written in cotton 100% and</font>

40
00:01:59,500 --> 00:02:06,409
sometimes it doesn't<font color="#E5E5E5"> look like cooking</font>

41
00:02:01,640 --> 00:02:09,649
<font color="#E5E5E5">at all we call this code fragments</font>

42
00:02:06,409 --> 00:02:12,769
anomalies in a way that they're they're

43
00:02:09,649 --> 00:02:16,190
good code<font color="#E5E5E5"> it's syntactically correct</font><font color="#CCCCCC"> it</font>

44
00:02:12,769 --> 00:02:18,620
may<font color="#CCCCCC"> even work very well but it doesn't</font>

45
00:02:16,190 --> 00:02:22,940
<font color="#E5E5E5">look like the code that other people you</font>

46
00:02:18,620 --> 00:02:25,340
right<font color="#E5E5E5"> in this language</font><font color="#CCCCCC"> and these code</font>

47
00:02:22,940 --> 00:02:28,129
fragments are actually of great interest

48
00:02:25,340 --> 00:02:30,860
to language developers<font color="#E5E5E5"> because well they</font>

49
00:02:28,129 --> 00:02:34,280
could show some previously unnoticed

50
00:02:30,860 --> 00:02:36,560
<font color="#E5E5E5">compiler works or highlight some</font>

51
00:02:34,280 --> 00:02:39,379
compiler performance issues<font color="#E5E5E5"> or even</font>

52
00:02:36,560 --> 00:02:42,739
<font color="#E5E5E5">could</font><font color="#CCCCCC"> be used to get</font><font color="#E5E5E5"> hints on how to</font>

53
00:02:39,379 --> 00:02:45,230
improve the language<font color="#E5E5E5"> further so the info</font>

54
00:02:42,739 --> 00:02:49,400
tag description<font color="#E5E5E5"> that we've got from the</font>

55
00:02:45,230 --> 00:02:51,440
cotton developer team was take all

56
00:02:49,400 --> 00:02:56,239
cooking code in the world and bring us

57
00:02:51,440 --> 00:02:58,549
some<font color="#CCCCCC"> weird-looking</font><font color="#E5E5E5"> programs</font><font color="#CCCCCC"> and I can in</font>

58
00:02:56,239 --> 00:03:01,190
risk management it's pretty hard<font color="#E5E5E5"> to plan</font>

59
00:02:58,549 --> 00:03:03,620
for known unknown and it's much harder

60
00:03:01,190 --> 00:03:05,019
<font color="#CCCCCC">to plan for unknown unknown when you</font>

61
00:03:03,620 --> 00:03:08,209
don't know what you're looking<font color="#E5E5E5"> for</font>

62
00:03:05,019 --> 00:03:11,629
before<font color="#CCCCCC"> we clarify what this could mean</font>

63
00:03:08,209 --> 00:03:14,750
and how<font color="#E5E5E5"> to achieve this let's see what</font>

64
00:03:11,629 --> 00:03:19,940
can<font color="#CCCCCC"> be done in this field</font><font color="#E5E5E5"> if you google</font>

65
00:03:14,750 --> 00:03:22,790
code anomaly detection<font color="#E5E5E5"> you well you find</font>

66
00:03:19,940 --> 00:03:25,940
something<font color="#E5E5E5"> some of the papers listed here</font>

67
00:03:22,790 --> 00:03:28,638
<font color="#E5E5E5">the first two of them are based on</font>

68
00:03:25,940 --> 00:03:32,630
static analysis the<font color="#E5E5E5"> first one presents</font>

69
00:03:28,639 --> 00:03:35,269
<font color="#CCCCCC">reminder - which tries to</font><font color="#E5E5E5"> detect normal</font>

70
00:03:32,630 --> 00:03:38,870
<font color="#E5E5E5">as</font><font color="#CCCCCC"> object interactions</font><font color="#E5E5E5"> so it takes the</font>

71
00:03:35,269 --> 00:03:41,269
code builds directed acyclic graph<font color="#E5E5E5"> this</font>

72
00:03:38,870 --> 00:03:44,950
features<font color="#E5E5E5"> constructor</font><font color="#CCCCCC"> method calls</font><font color="#E5E5E5"> and</font>

73
00:03:41,269 --> 00:03:47,930
their dependencies<font color="#CCCCCC"> and tries to apply</font>

74
00:03:44,950 --> 00:03:51,768
<font color="#E5E5E5">graph anomaly detection techniques to</font>

75
00:03:47,930 --> 00:03:54,079
find<font color="#E5E5E5"> a typical areas in this graph the</font>

76
00:03:51,769 --> 00:03:58,940
second one uses somewhat similar idea

77
00:03:54,079 --> 00:04:01,609
<font color="#E5E5E5">but they build the usage models of</font>

78
00:03:58,940 --> 00:04:04,970
objects using their sequences<font color="#CCCCCC"> of method</font>

79
00:04:01,609 --> 00:04:09,319
<font color="#CCCCCC">calls and they also apply</font><font color="#E5E5E5"> graph based</font>

80
00:04:04,970 --> 00:04:11,840
anomaly detection techniques<font color="#E5E5E5"> they are</font>

81
00:04:09,319 --> 00:04:13,910
very helpful<font color="#E5E5E5"> if you're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

82
00:04:11,840 --> 00:04:17,630
bugs<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> programs</font>

83
00:04:13,910 --> 00:04:20,000
<font color="#E5E5E5">so are you these approaches basically</font>

84
00:04:17,630 --> 00:04:23,719
target language users not<font color="#E5E5E5"> language</font>

85
00:04:20,000 --> 00:04:27,560
developers<font color="#CCCCCC"> and we are</font><font color="#E5E5E5"> intended the next</font>

86
00:04:23,720 --> 00:04:28,599
papers are based on<font color="#E5E5E5"> dynamic analysis the</font>

87
00:04:27,560 --> 00:04:31,490
<font color="#E5E5E5">IDS tool</font>

88
00:04:28,599 --> 00:04:33,830
tries<font color="#CCCCCC"> to run your</font><font color="#E5E5E5"> program and</font>

89
00:04:31,490 --> 00:04:37,479
<font color="#E5E5E5">or every value of</font><font color="#CCCCCC"> every expression that</font>

90
00:04:33,830 --> 00:04:40,909
it counters<font color="#E5E5E5"> and it tries to induce some</font>

91
00:04:37,479 --> 00:04:43,550
invariant<font color="#CCCCCC"> truth and when these</font><font color="#E5E5E5"> rules are</font>

92
00:04:40,910 --> 00:04:46,669
violated<font color="#E5E5E5"> for example some expression</font>

93
00:04:43,550 --> 00:04:49,009
gets a value<font color="#E5E5E5"> that well it differs</font><font color="#CCCCCC"> a lot</font>

94
00:04:46,669 --> 00:04:52,240
from all its previous values

95
00:04:49,009 --> 00:04:55,220
oh it's considered candidate normally

96
00:04:52,240 --> 00:04:58,580
<font color="#CCCCCC">the last</font><font color="#E5E5E5"> one here</font><font color="#CCCCCC"> also runs</font><font color="#E5E5E5"> the program</font>

97
00:04:55,220 --> 00:05:04,069
<font color="#E5E5E5">but collects traces of system calls but</font>

98
00:04:58,580 --> 00:05:07,669
nevertheless we have<font color="#E5E5E5"> a huge</font><font color="#CCCCCC"> dataset in</font>

99
00:05:04,069 --> 00:05:09,740
mind<font color="#E5E5E5"> and well projects have all kinds of</font>

100
00:05:07,669 --> 00:05:13,639
weird dependencies and who knows how

101
00:05:09,740 --> 00:05:15,289
they're supposed<font color="#E5E5E5"> to be run so I think we</font>

102
00:05:13,639 --> 00:05:19,400
should<font color="#CCCCCC"> limit ourselves</font><font color="#E5E5E5"> with static</font>

103
00:05:15,289 --> 00:05:22,479
analysis only<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> getting</font><font color="#CCCCCC"> back to the</font>

104
00:05:19,400 --> 00:05:25,370
task at hand<font color="#CCCCCC"> ah what should we analyze</font>

105
00:05:22,479 --> 00:05:29,060
<font color="#E5E5E5">originally we targeted the regular</font>

106
00:05:25,370 --> 00:05:31,130
<font color="#CCCCCC">Kaufmann</font><font color="#E5E5E5"> that works on the JVM</font><font color="#CCCCCC"> so we</font>

107
00:05:29,060 --> 00:05:35,539
have the source code<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the bytecode</font>

108
00:05:31,130 --> 00:05:37,490
<font color="#E5E5E5">produced from it we should analyze both</font>

109
00:05:35,539 --> 00:05:40,099
of them because analyzing source code

110
00:05:37,490 --> 00:05:42,979
gives us patterns<font color="#E5E5E5"> in incorrect language</font>

111
00:05:40,099 --> 00:05:47,690
use while analyzing<font color="#CCCCCC"> byte code provides</font>

112
00:05:42,979 --> 00:05:50,020
us with compiler issues but what's best

113
00:05:47,690 --> 00:05:53,210
we can<font color="#E5E5E5"> combine these analysis together</font>

114
00:05:50,020 --> 00:05:56,570
<font color="#CCCCCC">for example we could search for</font><font color="#E5E5E5"> code</font>

115
00:05:53,210 --> 00:05:58,549
fragments that were not anomalous in the

116
00:05:56,570 --> 00:06:00,380
source code representation<font color="#E5E5E5"> but became</font>

117
00:05:58,550 --> 00:06:04,870
anomalous<font color="#E5E5E5"> in byte code representation</font>

118
00:06:00,380 --> 00:06:08,509
<font color="#E5E5E5">and that's clearly an issue of some kind</font>

119
00:06:04,870 --> 00:06:11,599
next<font color="#CCCCCC"> ah at what</font><font color="#E5E5E5"> level should we look at</font>

120
00:06:08,509 --> 00:06:14,569
<font color="#E5E5E5">the code well obviously looking at</font>

121
00:06:11,599 --> 00:06:17,360
<font color="#E5E5E5">operators single operators or lines of</font>

122
00:06:14,569 --> 00:06:21,229
code<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> any sense</font><font color="#CCCCCC"> because it</font>

123
00:06:17,360 --> 00:06:24,050
they don't<font color="#E5E5E5"> capture structures complex</font>

124
00:06:21,229 --> 00:06:25,729
enough to form a normally<font color="#E5E5E5"> functioning</font>

125
00:06:24,050 --> 00:06:29,150
<font color="#CCCCCC">seemed like a good choice because</font>

126
00:06:25,729 --> 00:06:31,219
<font color="#E5E5E5">they're large</font><font color="#CCCCCC"> enough to have some code</font>

127
00:06:29,150 --> 00:06:34,068
that<font color="#E5E5E5"> can form an anomaly but small</font>

128
00:06:31,219 --> 00:06:37,520
enough to<font color="#E5E5E5"> represent one single</font><font color="#CCCCCC"> operation</font>

129
00:06:34,069 --> 00:06:39,650
<font color="#E5E5E5">on class our classes</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> seem like a</font>

130
00:06:37,520 --> 00:06:43,339
good<font color="#E5E5E5"> choice if you want to look for</font>

131
00:06:39,650 --> 00:06:44,429
anomalies in inheritance<font color="#E5E5E5"> in function</font>

132
00:06:43,339 --> 00:06:48,090
signatures

133
00:06:44,430 --> 00:06:52,890
or control flow<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> two long</font>

134
00:06:48,090 --> 00:06:55,560
chains of function calls what<font color="#CCCCCC"> files</font>

135
00:06:52,890 --> 00:06:57,440
could<font color="#CCCCCC"> be used if</font><font color="#E5E5E5"> you want to search</font><font color="#CCCCCC"> for</font>

136
00:06:55,560 --> 00:07:01,140
normal is in class interaction<font color="#E5E5E5"> and</font>

137
00:06:57,440 --> 00:07:04,590
<font color="#E5E5E5">projects seem</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> too large and</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

138
00:07:01,140 --> 00:07:07,320
main specific<font color="#E5E5E5"> you can actually analyze</font>

139
00:07:04,590 --> 00:07:13,770
<font color="#CCCCCC">the project without knowing what it was</font>

140
00:07:07,320 --> 00:07:16,560
<font color="#CCCCCC">created for so moving on to how there's</font>

141
00:07:13,770 --> 00:07:20,609
a data science<font color="#CCCCCC"> and there's nobody</font>

142
00:07:16,560 --> 00:07:23,070
detection techniques we could use a

143
00:07:20,610 --> 00:07:26,190
standard task of anomaly detection on

144
00:07:23,070 --> 00:07:28,590
vectorized data and then when<font color="#E5E5E5"> we get</font>

145
00:07:26,190 --> 00:07:30,690
some anomalies<font color="#E5E5E5"> we shoot</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> high</font>

146
00:07:28,590 --> 00:07:33,390
somehow classify them according<font color="#E5E5E5"> to the</font>

147
00:07:30,690 --> 00:07:36,080
type and that's another task<font color="#CCCCCC"> another</font>

148
00:07:33,390 --> 00:07:38,520
challenging task

149
00:07:36,080 --> 00:07:40,979
speaking about code representation<font color="#CCCCCC"> it's</font>

150
00:07:38,520 --> 00:07:42,109
no it's really<font color="#CCCCCC"> hard to such topic right</font>

151
00:07:40,980 --> 00:07:45,990
now

152
00:07:42,110 --> 00:07:49,560
but<font color="#E5E5E5"> basically all these approaches fall</font>

153
00:07:45,990 --> 00:07:52,410
into two categories<font color="#CCCCCC"> the first one are</font>

154
00:07:49,560 --> 00:07:55,080
<font color="#E5E5E5">please explicit features basically</font>

155
00:07:52,410 --> 00:08:00,270
software<font color="#E5E5E5"> metrics like the height of the</font>

156
00:07:55,080 --> 00:08:02,969
<font color="#CCCCCC">ast or vision coupling matrix</font><font color="#E5E5E5"> and some</font>

157
00:08:00,270 --> 00:08:07,010
natural language processing features

158
00:08:02,970 --> 00:08:09,840
like bag of words or their derivatives

159
00:08:07,010 --> 00:08:12,750
these features are very descriptive<font color="#E5E5E5"> so</font>

160
00:08:09,840 --> 00:08:15,869
you just look at the vector value that

161
00:08:12,750 --> 00:08:18,240
you've got and almost always you have<font color="#CCCCCC"> a</font>

162
00:08:15,870 --> 00:08:20,790
good hypothesis on what's wrong<font color="#E5E5E5"> with</font>

163
00:08:18,240 --> 00:08:24,390
<font color="#E5E5E5">this code and why it was considered an</font>

164
00:08:20,790 --> 00:08:26,760
anomaly<font color="#CCCCCC"> which is very</font><font color="#E5E5E5"> good but these</font>

165
00:08:24,390 --> 00:08:29,010
<font color="#E5E5E5">features are</font><font color="#CCCCCC"> hard to choose</font>

166
00:08:26,760 --> 00:08:33,960
because well first of all software

167
00:08:29,010 --> 00:08:37,140
metrics are<font color="#CCCCCC"> very well</font><font color="#E5E5E5"> gray area because</font>

168
00:08:33,960 --> 00:08:39,810
they mostly<font color="#E5E5E5"> rely on opinions on what</font>

169
00:08:37,140 --> 00:08:42,929
good code is and this<font color="#E5E5E5"> is highly</font>

170
00:08:39,809 --> 00:08:45,390
subjective<font color="#CCCCCC"> also it's hard to choose them</font>

171
00:08:42,929 --> 00:08:48,329
<font color="#CCCCCC">because when you don't</font><font color="#E5E5E5"> know what you're</font>

172
00:08:45,390 --> 00:08:51,720
looking<font color="#E5E5E5"> for so you have to specifically</font>

173
00:08:48,330 --> 00:08:54,180
specify precisely specify what<font color="#CCCCCC"> are you</font>

174
00:08:51,720 --> 00:08:56,910
looking for with<font color="#E5E5E5"> these metrics</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are</font>

175
00:08:54,180 --> 00:08:58,170
also<font color="#E5E5E5"> path based presentations training</font>

176
00:08:56,910 --> 00:09:03,630
approach

177
00:08:58,170 --> 00:09:07,800
that basically allows you to traverse

178
00:09:03,630 --> 00:09:10,200
the tree<font color="#E5E5E5"> and collect all the nodes types</font>

179
00:09:07,800 --> 00:09:14,520
in this syntax tree that you encounter

180
00:09:10,200 --> 00:09:20,490
and then use<font color="#E5E5E5"> these paths to do some</font>

181
00:09:14,520 --> 00:09:26,730
research<font color="#CCCCCC"> there an alternative here</font><font color="#E5E5E5"> is</font>

182
00:09:20,490 --> 00:09:28,710
implicit features that mostly could be

183
00:09:26,730 --> 00:09:31,910
described as engrams

184
00:09:28,710 --> 00:09:35,010
<font color="#E5E5E5">some kind of neural networks processing</font>

185
00:09:31,910 --> 00:09:37,890
<font color="#CCCCCC">st hashing and different kinds of</font>

186
00:09:35,010 --> 00:09:41,010
distributed representations<font color="#CCCCCC"> while</font>

187
00:09:37,890 --> 00:09:43,500
they're very well they<font color="#E5E5E5"> obviously lack</font>

188
00:09:41,010 --> 00:09:46,200
expressiveness<font color="#E5E5E5"> you get some vector of</font>

189
00:09:43,500 --> 00:09:49,710
numbers and<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> understand what</font><font color="#CCCCCC"> this</font>

190
00:09:46,200 --> 00:09:52,170
really<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> but they can capture some</font>

191
00:09:49,710 --> 00:09:54,720
properties<font color="#E5E5E5"> that were not obvious</font>

192
00:09:52,170 --> 00:10:00,240
<font color="#E5E5E5">beforehand</font><font color="#CCCCCC"> so they could be very useful</font>

193
00:09:54,720 --> 00:10:03,720
to speaking about<font color="#E5E5E5"> classic anomaly</font>

194
00:10:00,240 --> 00:10:07,860
detection task you can do a lot<font color="#CCCCCC"> actually</font>

195
00:10:03,720 --> 00:10:10,500
when you know things<font color="#E5E5E5"> about your data our</font>

196
00:10:07,860 --> 00:10:13,140
data is all<font color="#CCCCCC"> cotton</font><font color="#E5E5E5"> codes in the world</font>

197
00:10:10,500 --> 00:10:15,450
and you can<font color="#E5E5E5"> hardly make any assumptions</font>

198
00:10:13,140 --> 00:10:18,030
about it<font color="#E5E5E5"> you don't know your</font>

199
00:10:15,450 --> 00:10:20,700
distribution<font color="#E5E5E5"> type well nothing so we</font>

200
00:10:18,030 --> 00:10:23,579
have to be really careful here when

201
00:10:20,700 --> 00:10:26,610
applying these techniques the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> two</font>

202
00:10:23,580 --> 00:10:29,010
<font color="#E5E5E5">here just a brief overview the</font><font color="#CCCCCC"> first two</font>

203
00:10:26,610 --> 00:10:32,580
here are very popular outlier detection

204
00:10:29,010 --> 00:10:35,840
techniques<font color="#CCCCCC"> they are good because they're</font>

205
00:10:32,580 --> 00:10:40,470
assigning<font color="#E5E5E5"> an normal score to each of</font>

206
00:10:35,840 --> 00:10:43,290
classifying objects and not just to form

207
00:10:40,470 --> 00:10:45,180
a binary classification<font color="#CCCCCC"> also they do</font><font color="#E5E5E5"> not</font>

208
00:10:43,290 --> 00:10:47,599
make any<font color="#E5E5E5"> assumptions about distribution</font>

209
00:10:45,180 --> 00:10:50,880
<font color="#CCCCCC">of the data which is new in</font><font color="#E5E5E5"> our case</font>

210
00:10:47,600 --> 00:10:55,340
<font color="#E5E5E5">some clustering algorithms including the</font>

211
00:10:50,880 --> 00:10:58,230
<font color="#E5E5E5">list here well also could be used</font><font color="#CCCCCC"> for</font>

212
00:10:55,340 --> 00:11:00,870
anomaly detection<font color="#E5E5E5"> since they don't</font>

213
00:10:58,230 --> 00:11:05,760
prefer that each element should<font color="#E5E5E5"> be put</font>

214
00:11:00,870 --> 00:11:09,530
in a<font color="#CCCCCC"> in some cluster autoencoder neural</font>

215
00:11:05,760 --> 00:11:11,939
networks is really<font color="#CCCCCC"> fun too because</font>

216
00:11:09,530 --> 00:11:14,699
<font color="#E5E5E5">basically it's a neural network that</font>

217
00:11:11,940 --> 00:11:18,180
has input and output<font color="#E5E5E5"> that had the same</font>

218
00:11:14,700 --> 00:11:20,610
data as input and output and using<font color="#E5E5E5"> its</font>

219
00:11:18,180 --> 00:11:23,459
<font color="#E5E5E5">hidden layers it tries</font><font color="#CCCCCC"> to learn the</font>

220
00:11:20,610 --> 00:11:26,100
<font color="#E5E5E5">identity function basically so the first</font>

221
00:11:23,460 --> 00:11:29,100
part of the<font color="#E5E5E5"> aunt encoder is a decoder</font>

222
00:11:26,100 --> 00:11:32,280
which tries to<font color="#E5E5E5"> reduce the dimensionality</font>

223
00:11:29,100 --> 00:11:35,040
of your data<font color="#E5E5E5"> and well create a hidden</font>

224
00:11:32,280 --> 00:11:37,620
layer of values and the second part is

225
00:11:35,040 --> 00:11:40,400
<font color="#E5E5E5">encoder that tries to reconstruct your</font>

226
00:11:37,620 --> 00:11:43,770
data from<font color="#E5E5E5"> these hidden reduced</font>

227
00:11:40,400 --> 00:11:46,199
dimensions and if you get reconstruction

228
00:11:43,770 --> 00:11:50,180
error<font color="#E5E5E5"> if you observe in construction</font>

229
00:11:46,200 --> 00:11:53,490
<font color="#E5E5E5">error meaning that your predicted value</font>

230
00:11:50,180 --> 00:11:56,010
differs a lot from your<font color="#CCCCCC"> actual value</font>

231
00:11:53,490 --> 00:12:00,420
that's normally candidate and you can

232
00:11:56,010 --> 00:12:02,850
just do it like<font color="#CCCCCC"> that there's also</font><font color="#E5E5E5"> one</font>

233
00:12:00,420 --> 00:12:05,010
<font color="#CCCCCC">two kick here which is not unsupervised</font>

234
00:12:02,850 --> 00:12:09,270
learning technique<font color="#E5E5E5"> it's semi-supervised</font>

235
00:12:05,010 --> 00:12:11,310
learning<font color="#CCCCCC"> meaning that you have</font><font color="#E5E5E5"> to get</font>

236
00:12:09,270 --> 00:12:15,060
some<font color="#CCCCCC"> labelled data to train the</font>

237
00:12:11,310 --> 00:12:17,550
classifier<font color="#E5E5E5"> but it also used for outlier</font>

238
00:12:15,060 --> 00:12:20,010
detection and<font color="#CCCCCC"> basically if we get some</font>

239
00:12:17,550 --> 00:12:23,310
<font color="#CCCCCC">results we can pass</font><font color="#E5E5E5"> them to this one</font>

240
00:12:20,010 --> 00:12:26,569
class<font color="#E5E5E5"> SVM and get more</font><font color="#CCCCCC"> results</font><font color="#E5E5E5"> so</font>

241
00:12:23,310 --> 00:12:31,319
there's a number<font color="#CCCCCC"> of algorithms available</font>

242
00:12:26,570 --> 00:12:36,630
<font color="#E5E5E5">to solve a task so let's talk about</font>

243
00:12:31,320 --> 00:12:38,310
about what we<font color="#E5E5E5"> had done so far</font><font color="#CCCCCC"> the</font>

244
00:12:36,630 --> 00:12:42,870
<font color="#E5E5E5">workflow here is pretty</font><font color="#CCCCCC"> straightforward</font>

245
00:12:38,310 --> 00:12:47,609
<font color="#CCCCCC">we get</font><font color="#E5E5E5"> a code from github via a</font><font color="#CCCCCC"> github</font>

246
00:12:42,870 --> 00:12:51,480
<font color="#CCCCCC">API we cloned</font><font color="#E5E5E5"> and changed the compiler</font><font color="#CCCCCC"> a</font>

247
00:12:47,610 --> 00:12:55,440
bit to<font color="#CCCCCC"> serialize</font><font color="#E5E5E5"> all syntax trees that</font>

248
00:12:51,480 --> 00:12:58,770
it<font color="#E5E5E5"> builds we ran</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> calculation on</font>

249
00:12:55,440 --> 00:13:01,320
these trees we ran algorithms on these

250
00:12:58,770 --> 00:13:04,710
<font color="#E5E5E5">features we see look at the result and</font>

251
00:13:01,320 --> 00:13:07,680
repeat<font color="#E5E5E5"> at some point we take over normal</font>

252
00:13:04,710 --> 00:13:10,170
is that<font color="#CCCCCC"> we've got go to coughlin</font>

253
00:13:07,680 --> 00:13:15,839
developer<font color="#E5E5E5"> team show them and see if we</font>

254
00:13:10,170 --> 00:13:17,810
<font color="#E5E5E5">need to change</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> course today I'll talk</font>

255
00:13:15,840 --> 00:13:20,400
<font color="#E5E5E5">about three experiments that we've</font>

256
00:13:17,810 --> 00:13:23,060
performed last year

257
00:13:20,400 --> 00:13:25,430
well now the data

258
00:13:23,060 --> 00:13:28,099
this is different<font color="#E5E5E5"> for example for the</font>

259
00:13:25,430 --> 00:13:32,359
<font color="#CCCCCC">last year the</font><font color="#E5E5E5"> amount of cotton code has</font>

260
00:13:28,100 --> 00:13:34,940
doubled<font color="#E5E5E5"> on github also but anyway we</font>

261
00:13:32,360 --> 00:13:36,860
fetched all repositories that<font color="#E5E5E5"> stated</font>

262
00:13:34,940 --> 00:13:39,680
<font color="#E5E5E5">Kotlin as their main programming</font>

263
00:13:36,860 --> 00:13:41,810
language<font color="#E5E5E5"> that were not Forks of any</font>

264
00:13:39,680 --> 00:13:46,579
repositories and network created<font color="#CCCCCC"> before</font>

265
00:13:41,810 --> 00:13:50,540
March<font color="#E5E5E5"> and that left us</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> remove the</font>

266
00:13:46,580 --> 00:13:52,690
duplicates and that left us<font color="#CCCCCC"> with about</font><font color="#E5E5E5"> 4</font>

267
00:13:50,540 --> 00:14:00,189
million functions and<font color="#E5E5E5"> Wow</font>

268
00:13:52,690 --> 00:14:03,590
<font color="#CCCCCC">9,000 very sometimes</font><font color="#E5E5E5"> called source files</font>

269
00:14:00,190 --> 00:14:05,480
<font color="#CCCCCC">we decided in these initial experiments</font>

270
00:14:03,590 --> 00:14:08,990
we decided to stick with functions as

271
00:14:05,480 --> 00:14:12,790
our analysis level<font color="#E5E5E5"> well that was a</font>

272
00:14:08,990 --> 00:14:15,860
design choice<font color="#E5E5E5"> so the first experiment</font>

273
00:14:12,790 --> 00:14:18,680
was very straightforward

274
00:14:15,860 --> 00:14:22,460
we used explicit features and collected

275
00:14:18,680 --> 00:14:26,569
51 of them describing<font color="#CCCCCC"> different aspects</font>

276
00:14:22,460 --> 00:14:28,790
of the code as you<font color="#E5E5E5"> can see here so we</font>

277
00:14:26,570 --> 00:14:32,960
get<font color="#E5E5E5"> footage of 4 million functions we</font>

278
00:14:28,790 --> 00:14:36,589
get a vector<font color="#E5E5E5"> of 51 numbers which we</font>

279
00:14:32,960 --> 00:14:39,800
managed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reduce to 20 using the</font><font color="#E5E5E5"> PCA</font>

280
00:14:36,590 --> 00:14:43,790
<font color="#CCCCCC">it's a reduction dimensional reduction</font>

281
00:14:39,800 --> 00:14:46,490
algorithm which led us with pretty much

282
00:14:43,790 --> 00:14:48,920
<font color="#E5E5E5">the most of the</font><font color="#CCCCCC"> variance that we needed</font>

283
00:14:46,490 --> 00:14:54,860
<font color="#E5E5E5">but much more friendlier computation</font>

284
00:14:48,920 --> 00:14:57,290
time we ran a local outlier factor and

285
00:14:54,860 --> 00:14:58,880
the solution forests<font color="#E5E5E5"> on it the</font>

286
00:14:57,290 --> 00:15:02,689
contamination parameter here<font color="#E5E5E5"> is</font>

287
00:14:58,880 --> 00:15:05,060
<font color="#E5E5E5">basically the proportions</font><font color="#CCCCCC"> of outliers in</font>

288
00:15:02,690 --> 00:15:07,190
the data set and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is another</font><font color="#E5E5E5"> design</font>

289
00:15:05,060 --> 00:15:09,140
decision because<font color="#CCCCCC"> we have no idea how</font>

290
00:15:07,190 --> 00:15:11,630
many anomalies

291
00:15:09,140 --> 00:15:13,250
is there so we<font color="#CCCCCC"> just say to some small</font>

292
00:15:11,630 --> 00:15:18,400
number<font color="#E5E5E5"> like one hundredth of a percent</font>

293
00:15:13,250 --> 00:15:21,140
<font color="#E5E5E5">to keep the results observable humans</font>

294
00:15:18,400 --> 00:15:24,530
<font color="#E5E5E5">that led us with one hundredth of a</font>

295
00:15:21,140 --> 00:15:28,340
percent of<font color="#E5E5E5"> 4 million</font><font color="#CCCCCC"> 400 functions which</font>

296
00:15:24,530 --> 00:15:30,709
we manually observed and selected<font color="#E5E5E5"> 422</font>

297
00:15:28,340 --> 00:15:34,010
anomalies that<font color="#E5E5E5"> could have been of</font>

298
00:15:30,710 --> 00:15:35,930
interest to language developers another

299
00:15:34,010 --> 00:15:36,830
experiments used<font color="#E5E5E5"> experiencing implicit</font>

300
00:15:35,930 --> 00:15:41,089
<font color="#E5E5E5">features</font>

301
00:15:36,830 --> 00:15:46,420
we used<font color="#CCCCCC"> engrams namely unis buying</font>

302
00:15:41,090 --> 00:15:50,780
<font color="#E5E5E5">trigrams</font><font color="#CCCCCC"> on the syntax</font><font color="#E5E5E5"> tree</font><font color="#CCCCCC"> this simple</font>

303
00:15:46,420 --> 00:15:53,449
image shows<font color="#CCCCCC"> the backgrounds</font><font color="#E5E5E5"> and trigrams</font>

304
00:15:50,780 --> 00:15:55,959
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> cx-3</font><font color="#E5E5E5"> but the</font><font color="#CCCCCC"> ID is</font><font color="#E5E5E5"> quite similar</font>

305
00:15:53,450 --> 00:15:59,420
<font color="#E5E5E5">to these past based representations but</font>

306
00:15:55,960 --> 00:16:03,740
<font color="#E5E5E5">simpler and we</font><font color="#CCCCCC"> use out and called the</font>

307
00:15:59,420 --> 00:16:06,199
<font color="#CCCCCC">neural net</font><font color="#E5E5E5"> to detect outliers here we</font>

308
00:16:03,740 --> 00:16:08,240
experiment<font color="#E5E5E5"> it was very simple texture</font>

309
00:16:06,200 --> 00:16:10,850
with only one hidden layer<font color="#E5E5E5"> we</font>

310
00:16:08,240 --> 00:16:15,800
experimented with the<font color="#E5E5E5"> compression rate</font>

311
00:16:10,850 --> 00:16:18,860
of the hidden layer<font color="#CCCCCC"> and got around 360</font>

312
00:16:15,800 --> 00:16:22,219
<font color="#E5E5E5">anomalies so we brought these anomalies</font>

313
00:16:18,860 --> 00:16:24,740
together and remove the duplicates<font color="#CCCCCC"> and</font>

314
00:16:22,220 --> 00:16:29,800
still got a<font color="#E5E5E5"> lot of anomalies that we</font>

315
00:16:24,740 --> 00:16:32,360
were not sure<font color="#E5E5E5"> were useful or not we</font>

316
00:16:29,800 --> 00:16:38,900
looked at through and<font color="#CCCCCC"> as much and</font>

317
00:16:32,360 --> 00:16:41,540
manually label them<font color="#CCCCCC"> we got</font><font color="#E5E5E5"> 23 types we</font>

318
00:16:38,900 --> 00:16:44,750
created a<font color="#CCCCCC"> simple web interface that</font>

319
00:16:41,540 --> 00:16:48,170
<font color="#CCCCCC">allowed cotton</font><font color="#E5E5E5"> team developers to rank</font>

320
00:16:44,750 --> 00:16:52,280
these normally is<font color="#CCCCCC"> 1 by 1 from</font><font color="#E5E5E5"> 1 to 5 and</font>

321
00:16:48,170 --> 00:16:56,150
<font color="#CCCCCC">12</font><font color="#E5E5E5"> out of</font><font color="#CCCCCC"> 23 types were considered</font><font color="#E5E5E5"> it's</font>

322
00:16:52,280 --> 00:16:59,959
very useful meaning rank 4 and<font color="#E5E5E5"> 5 this</font>

323
00:16:56,150 --> 00:17:03,350
table<font color="#E5E5E5"> shows this e1 column is experiment</font>

324
00:16:59,960 --> 00:17:05,510
1<font color="#CCCCCC"> e2</font><font color="#E5E5E5"> the experiment</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> error</font><font color="#CCCCCC"> rank as you</font>

325
00:17:03,350 --> 00:17:07,880
can see here most<font color="#E5E5E5"> of the anomalies that</font>

326
00:17:05,510 --> 00:17:11,629
<font color="#E5E5E5">were considered useful were lots of</font>

327
00:17:07,880 --> 00:17:15,370
something<font color="#E5E5E5"> it's not just that fancy and</font>

328
00:17:11,630 --> 00:17:17,480
weirdly as we anticipated to see but

329
00:17:15,369 --> 00:17:19,550
developers they all found these

330
00:17:17,480 --> 00:17:23,690
<font color="#CCCCCC">anomalies useful and use them in their</font>

331
00:17:19,550 --> 00:17:26,720
tests some examples<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> an anomaly</font>

332
00:17:23,690 --> 00:17:31,370
<font color="#E5E5E5">with this function with a when</font><font color="#CCCCCC"> statement</font>

333
00:17:26,720 --> 00:17:33,230
having<font color="#E5E5E5"> about 120 case branches I</font>

334
00:17:31,370 --> 00:17:37,820
sincerely<font color="#E5E5E5"> hope it was automatically</font>

335
00:17:33,230 --> 00:17:40,550
<font color="#CCCCCC">generated this</font><font color="#E5E5E5"> one is a function with 22</font>

336
00:17:37,820 --> 00:17:43,580
generic type parameters actually<font color="#CCCCCC"> this</font>

337
00:17:40,550 --> 00:17:47,330
one is<font color="#E5E5E5"> very</font><font color="#CCCCCC"> useful because our recent</font>

338
00:17:43,580 --> 00:17:49,220
finding was that<font color="#E5E5E5"> compiler in some</font>

339
00:17:47,330 --> 00:17:50,418
compiler does a lot<font color="#E5E5E5"> of work around</font>

340
00:17:49,220 --> 00:17:52,759
generics

341
00:17:50,419 --> 00:17:54,590
and in some complex real complex<font color="#E5E5E5"> cases</font>

342
00:17:52,759 --> 00:17:59,359
<font color="#E5E5E5">it could even reach its financial</font>

343
00:17:54,590 --> 00:18:02,139
complexity inferring types so code

344
00:17:59,359 --> 00:18:05,570
examples like this<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> very useful</font>

345
00:18:02,139 --> 00:18:08,719
<font color="#CCCCCC">desks</font><font color="#E5E5E5"> well this is some weird test</font>

346
00:18:05,570 --> 00:18:11,539
function actually<font color="#CCCCCC"> this</font><font color="#E5E5E5"> fourth compiler</font>

347
00:18:08,720 --> 00:18:13,820
that<font color="#CCCCCC"> I have showed before actually</font><font color="#E5E5E5"> also</font>

348
00:18:11,539 --> 00:18:17,960
have<font color="#CCCCCC"> fallen to these strange code</font>

349
00:18:13,820 --> 00:18:22,309
constructs group<font color="#E5E5E5"> and this one is good</font>

350
00:18:17,960 --> 00:18:27,769
this allows us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> file a bug to a parser</font>

351
00:18:22,309 --> 00:18:30,350
this obviously incorrect<font color="#E5E5E5"> 400-plus</font><font color="#CCCCCC"> lines</font>

352
00:18:27,769 --> 00:18:33,679
of code<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> break the person with</font>

353
00:18:30,350 --> 00:18:38,689
the stack overflow error<font color="#E5E5E5"> so we filed a</font>

354
00:18:33,679 --> 00:18:41,929
bug<font color="#E5E5E5"> and the third experiment</font><font color="#CCCCCC"> here that</font>

355
00:18:38,690 --> 00:18:45,049
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about is features both</font>

356
00:18:41,929 --> 00:18:46,299
static and<font color="#CCCCCC"> our source code</font><font color="#E5E5E5"> analysis and</font>

357
00:18:45,049 --> 00:18:49,129
<font color="#CCCCCC">bytecode analysis</font>

358
00:18:46,299 --> 00:18:51,559
still we<font color="#E5E5E5"> don't want to compile any code</font>

359
00:18:49,129 --> 00:18:53,869
ourselves<font color="#E5E5E5"> but we need</font><font color="#CCCCCC"> bytecode what do</font>

360
00:18:51,559 --> 00:18:58,460
we do we created a tool that crawled

361
00:18:53,869 --> 00:19:02,230
<font color="#CCCCCC">github and try to find release jar files</font>

362
00:18:58,460 --> 00:19:05,119
<font color="#E5E5E5">for projects it downloaded the files</font>

363
00:19:02,230 --> 00:19:08,859
<font color="#E5E5E5">grabbed metadata from it and tries to</font>

364
00:19:05,119 --> 00:19:14,199
<font color="#E5E5E5">search source codes for these packages</font>

365
00:19:08,859 --> 00:19:17,570
<font color="#CCCCCC">that</font><font color="#E5E5E5"> way we</font><font color="#CCCCCC"> managed to grab around</font>

366
00:19:14,200 --> 00:19:21,909
40,000<font color="#E5E5E5"> source files and byte code</font><font color="#CCCCCC"> for</font>

367
00:19:17,570 --> 00:19:24,918
them<font color="#E5E5E5"> so we can compare the anomalies the</font>

368
00:19:21,909 --> 00:19:29,629
the approach<font color="#CCCCCC"> were the same using</font><font color="#E5E5E5"> engrams</font>

369
00:19:24,919 --> 00:19:35,179
and<font color="#CCCCCC"> aught encoder network and we looked</font>

370
00:19:29,629 --> 00:19:39,399
for anomalies in one case and<font color="#E5E5E5"> not</font>

371
00:19:35,179 --> 00:19:44,720
<font color="#E5E5E5">normally seen another that led us with</font>

372
00:19:39,399 --> 00:19:47,389
38<font color="#E5E5E5"> conditional anomalies which one</font>

373
00:19:44,720 --> 00:19:51,970
<font color="#CCCCCC">example of the table show you is this 10</font>

374
00:19:47,389 --> 00:19:56,539
lines of code function<font color="#E5E5E5"> that turns into</font>

375
00:19:51,970 --> 00:19:59,149
<font color="#CCCCCC">4,500 bytecode instructions</font><font color="#E5E5E5"> well this is</font>

376
00:19:56,539 --> 00:20:02,529
not actually bug in a compiler<font color="#E5E5E5"> as it</font>

377
00:19:59,149 --> 00:20:04,550
turns out it's a bug in the framework<font color="#CCCCCC"> or</font>

378
00:20:02,529 --> 00:20:08,660
not a bug but

379
00:20:04,550 --> 00:20:11,210
<font color="#CCCCCC">well</font><font color="#E5E5E5"> design feature</font><font color="#CCCCCC"> someone wrote very</font>

380
00:20:08,660 --> 00:20:13,940
complex<font color="#CCCCCC"> brain</font><font color="#E5E5E5"> function that</font><font color="#CCCCCC"> was in line</font>

381
00:20:11,210 --> 00:20:18,560
<font color="#E5E5E5">and someone wrote the code that</font><font color="#CCCCCC"> inlined</font>

382
00:20:13,940 --> 00:20:22,130
<font color="#CCCCCC">it nine times</font><font color="#E5E5E5"> in a row</font><font color="#CCCCCC"> so it did it</font>

383
00:20:18,560 --> 00:20:24,379
resulted in a huge<font color="#E5E5E5"> bytecode and that's</font>

384
00:20:22,130 --> 00:20:26,660
an<font color="#E5E5E5"> interesting example</font><font color="#CCCCCC"> because looking</font>

385
00:20:24,380 --> 00:20:28,820
<font color="#E5E5E5">at the source code by itself you can</font>

386
00:20:26,660 --> 00:20:36,200
never guess<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's some kind of</font>

387
00:20:28,820 --> 00:20:39,010
weird<font color="#E5E5E5"> code so this were our initial</font>

388
00:20:36,200 --> 00:20:42,140
experience<font color="#E5E5E5"> now we are trying different</font>

389
00:20:39,010 --> 00:20:44,690
<font color="#E5E5E5">algorithms for</font><font color="#CCCCCC"> normal is actually</font>

390
00:20:42,140 --> 00:20:47,030
<font color="#E5E5E5">different code representations now we</font>

391
00:20:44,690 --> 00:20:49,550
have some<font color="#E5E5E5"> labeled data and we are</font>

392
00:20:47,030 --> 00:20:52,460
finally<font color="#CCCCCC"> free to</font><font color="#E5E5E5"> use semi-supervised</font>

393
00:20:49,550 --> 00:20:56,840
learning like active learning or some

394
00:20:52,460 --> 00:21:00,620
other fancy stuff<font color="#CCCCCC"> a lot of our pipeline</font>

395
00:20:56,840 --> 00:21:02,899
<font color="#CCCCCC">pipeline</font><font color="#E5E5E5"> is still made by</font><font color="#CCCCCC"> hand</font>

396
00:21:00,620 --> 00:21:05,899
for example clustering and labeling<font color="#E5E5E5"> of</font>

397
00:21:02,900 --> 00:21:09,770
these obtained anomalies which should

398
00:21:05,900 --> 00:21:11,870
definitely be automated<font color="#CCCCCC"> we can look at</font>

399
00:21:09,770 --> 00:21:14,750
<font color="#CCCCCC">different structural levels not</font>

400
00:21:11,870 --> 00:21:16,550
functions but classes<font color="#E5E5E5"> on the other hand</font>

401
00:21:14,750 --> 00:21:19,070
we can look at<font color="#E5E5E5"> feature specific</font>

402
00:21:16,550 --> 00:21:21,680
anomalies<font color="#E5E5E5"> for example look for anomalies</font>

403
00:21:19,070 --> 00:21:25,310
in<font color="#CCCCCC"> loops</font><font color="#E5E5E5"> or look for</font><font color="#CCCCCC"> anomalies in</font>

404
00:21:21,680 --> 00:21:27,590
function signatures<font color="#CCCCCC"> and so on we could</font>

405
00:21:25,310 --> 00:21:29,659
look for<font color="#CCCCCC"> anomalies in object</font>

406
00:21:27,590 --> 00:21:31,280
interactions and some other ideas<font color="#CCCCCC"> that</font>

407
00:21:29,660 --> 00:21:34,160
were<font color="#CCCCCC"> presented in</font><font color="#E5E5E5"> the papers</font><font color="#CCCCCC"> that I</font>

408
00:21:31,280 --> 00:21:35,930
mentioned before<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can go deeper</font><font color="#CCCCCC"> in the</font>

409
00:21:34,160 --> 00:21:38,840
compiler and see you which optimizations

410
00:21:35,930 --> 00:21:41,780
<font color="#CCCCCC">can produce anomalies of any kind and so</font>

411
00:21:38,840 --> 00:21:44,270
on and there's<font color="#E5E5E5"> always causing for</font>

412
00:21:41,780 --> 00:21:46,490
<font color="#E5E5E5">Android</font><font color="#CCCCCC"> Kotla native and cotton GS each</font>

413
00:21:44,270 --> 00:21:52,210
of<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> completely different world</font>

414
00:21:46,490 --> 00:21:55,700
with<font color="#E5E5E5"> different anomalies so to sum up</font>

415
00:21:52,210 --> 00:21:58,990
<font color="#E5E5E5">even our first very straightforward</font>

416
00:21:55,700 --> 00:22:03,260
experiments<font color="#CCCCCC"> showed some useful results</font>

417
00:21:58,990 --> 00:22:07,010
<font color="#E5E5E5">our work is open sourced on github also</font>

418
00:22:03,260 --> 00:22:09,020
here's our research group page if you in

419
00:22:07,010 --> 00:22:11,030
some way interested in our work feel

420
00:22:09,020 --> 00:22:12,950
<font color="#E5E5E5">free to drop us message and thank you</font>

421
00:22:11,030 --> 00:22:19,660
very<font color="#E5E5E5"> much for listening</font>

422
00:22:12,950 --> 00:22:19,660
[Applause]

423
00:22:33,890 --> 00:22:40,430
we have here<font color="#CCCCCC"> yeah the question</font><font color="#E5E5E5"> was about</font>

424
00:22:36,830 --> 00:22:44,449
whether<font color="#CCCCCC"> we tried some other algorithms</font>

425
00:22:40,430 --> 00:22:47,180
to instead<font color="#CCCCCC"> of autumn</font><font color="#E5E5E5"> quarters well for</font>

426
00:22:44,450 --> 00:22:50,780
implicit times<font color="#E5E5E5"> implicit features we</font>

427
00:22:47,180 --> 00:22:53,960
haven't<font color="#E5E5E5"> well basically we tried to see</font>

428
00:22:50,780 --> 00:22:56,960
we have a lot of stuff to<font color="#E5E5E5"> try and we</font>

429
00:22:53,960 --> 00:22:59,270
wanted<font color="#E5E5E5"> to see if any</font><font color="#CCCCCC"> of it works because</font>

430
00:22:56,960 --> 00:23:02,420
<font color="#E5E5E5">when we got the test description just</font>

431
00:22:59,270 --> 00:23:05,060
<font color="#E5E5E5">find us anomalies we were not sure</font><font color="#CCCCCC"> if we</font>

432
00:23:02,420 --> 00:23:07,760
succeed at all<font color="#E5E5E5"> so we just</font><font color="#CCCCCC"> tried this and</font>

433
00:23:05,060 --> 00:23:11,450
this and this<font color="#CCCCCC"> and this and</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> something</font>

434
00:23:07,760 --> 00:23:15,020
working<font color="#E5E5E5"> yes now we are doing different</font>

435
00:23:11,450 --> 00:23:17,120
well more scientific approach<font color="#E5E5E5"> when we</font>

436
00:23:15,020 --> 00:23:20,690
try different algorithms on<font color="#CCCCCC"> the same</font>

437
00:23:17,120 --> 00:23:26,570
data and compare and stuff but I'm not

438
00:23:20,690 --> 00:23:29,020
sure I<font color="#CCCCCC"> can talk</font><font color="#E5E5E5"> about it yet other</font>

439
00:23:26,570 --> 00:23:29,020
questions

440
00:23:38,190 --> 00:23:43,679
yeah<font color="#E5E5E5"> the</font><font color="#CCCCCC"> question</font><font color="#E5E5E5"> is whether anything</font>

441
00:23:41,500 --> 00:23:46,559
that we<font color="#E5E5E5"> found so far</font>

442
00:23:43,679 --> 00:23:53,049
well<font color="#E5E5E5"> influence the language design</font>

443
00:23:46,559 --> 00:23:57,090
decisions<font color="#CCCCCC"> I'm not sure</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the short</font>

444
00:23:53,049 --> 00:24:00,940
<font color="#CCCCCC">answer the more detailed answer</font><font color="#E5E5E5"> is that</font>

445
00:23:57,090 --> 00:24:04,860
you don't<font color="#E5E5E5"> really you</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think you can't</font>

446
00:24:00,940 --> 00:24:04,860
<font color="#E5E5E5">really see that obvious</font>

447
00:24:06,240 --> 00:24:14,140
what makes<font color="#E5E5E5"> people who take decisions</font>

448
00:24:10,570 --> 00:24:18,939
<font color="#E5E5E5">well do this so we have presented</font>

449
00:24:14,140 --> 00:24:22,260
<font color="#CCCCCC">several anomalies that could have led</font><font color="#E5E5E5"> to</font>

450
00:24:18,940 --> 00:24:25,650
<font color="#E5E5E5">some decisions but well I'm not</font><font color="#CCCCCC"> sure if</font>

451
00:24:22,260 --> 00:24:29,289
they<font color="#E5E5E5"> will be taken into</font><font color="#CCCCCC"> account but</font>

452
00:24:25,650 --> 00:24:31,780
<font color="#E5E5E5">already we had some feedback some</font>

453
00:24:29,289 --> 00:24:35,980
positive feedback<font color="#E5E5E5"> on some anomalies that</font>

454
00:24:31,780 --> 00:24:38,139
<font color="#E5E5E5">were well they could be used</font><font color="#CCCCCC"> I hope they</font>

455
00:24:35,980 --> 00:24:41,919
will<font color="#E5E5E5"> be used but I think that takes time</font>

456
00:24:38,140 --> 00:24:45,809
and some process it doesn't work some

457
00:24:41,919 --> 00:24:45,809
that thank you

458
00:24:49,410 --> 00:24:52,040
anymore

459
00:24:53,800 --> 00:25:02,089
<font color="#E5E5E5">thank you</font>

460
00:24:54,920 --> 00:25:02,089
[Applause]

