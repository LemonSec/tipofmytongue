1
00:00:04,620 --> 00:00:11,100
so welcome<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> before I go</font><font color="#E5E5E5"> into</font>

2
00:00:08,309 --> 00:00:13,709
what's<font color="#CCCCCC"> exactly we</font><font color="#E5E5E5"> frame is and while we</font>

3
00:00:11,100 --> 00:00:16,439
use<font color="#E5E5E5"> it at</font><font color="#CCCCCC"> CSCS I want to give</font><font color="#E5E5E5"> you some</font>

4
00:00:13,709 --> 00:00:20,150
some idea what what was the<font color="#CCCCCC"> background</font>

5
00:00:16,440 --> 00:00:22,949
that we had and why you use reframe so

6
00:00:20,150 --> 00:00:25,168
we use we do regression<font color="#E5E5E5"> testing a lot</font>

7
00:00:22,949 --> 00:00:28,410
<font color="#CCCCCC">the CSCS to guarantee</font><font color="#E5E5E5"> quality of service</font>

8
00:00:25,169 --> 00:00:30,089
so it was really<font color="#CCCCCC"> nice to have</font><font color="#E5E5E5"> just a</font>

9
00:00:28,410 --> 00:00:31,980
precise talk and he<font color="#E5E5E5"> was talking about</font>

10
00:00:30,089 --> 00:00:33,329
the difficulties<font color="#CCCCCC"> they have to go into</font>

11
00:00:31,980 --> 00:00:35,310
the<font color="#E5E5E5"> quality of the performance of the</font>

12
00:00:33,329 --> 00:00:36,900
<font color="#CCCCCC">software and</font><font color="#E5E5E5"> the sanity of the software</font>

13
00:00:35,310 --> 00:00:39,450
is<font color="#CCCCCC"> getting to</font><font color="#E5E5E5"> that correct so that's</font>

14
00:00:36,900 --> 00:00:41,699
exactly the<font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> tool that we can</font>

15
00:00:39,450 --> 00:00:44,520
provide not only<font color="#E5E5E5"> to precise about</font><font color="#CCCCCC"> the</font>

16
00:00:41,700 --> 00:00:47,880
<font color="#E5E5E5">entire community on</font><font color="#CCCCCC"> how actually solve</font>

17
00:00:44,520 --> 00:00:50,250
this problem<font color="#E5E5E5"> so at the SES because we</font>

18
00:00:47,880 --> 00:00:53,180
invest a lot on guaranteeing quality of

19
00:00:50,250 --> 00:00:57,180
service of our computer services we test

20
00:00:53,180 --> 00:01:02,490
every<font color="#E5E5E5"> single computer every day</font>

21
00:00:57,180 --> 00:01:05,610
<font color="#CCCCCC">we test everything so how you used</font><font color="#E5E5E5"> to do</font>

22
00:01:02,490 --> 00:01:07,860
<font color="#E5E5E5">that we used to write this big shell</font>

23
00:01:05,610 --> 00:01:10,109
script that<font color="#E5E5E5"> would go into everything and</font>

24
00:01:07,860 --> 00:01:12,869
test see if<font color="#E5E5E5"> the performance was being</font>

25
00:01:10,109 --> 00:01:14,850
correct<font color="#CCCCCC"> its if the numbers that we</font>

26
00:01:12,869 --> 00:01:17,789
produced<font color="#CCCCCC"> correctly and what's really</font>

27
00:01:14,850 --> 00:01:22,399
<font color="#E5E5E5">tough to maintain because we were doing</font>

28
00:01:17,789 --> 00:01:23,789
<font color="#CCCCCC">a</font><font color="#E5E5E5"> nice thing</font><font color="#CCCCCC"> but using</font><font color="#E5E5E5"> a not</font><font color="#CCCCCC"> very nice</font>

29
00:01:22,399 --> 00:01:27,899
soft

30
00:01:23,789 --> 00:01:30,240
methodology<font color="#E5E5E5"> so for that we</font><font color="#CCCCCC"> started to</font>

31
00:01:27,899 --> 00:01:32,100
<font color="#E5E5E5">develop in a better framework that's</font>

32
00:01:30,240 --> 00:01:34,109
called reframe that we can actually do

33
00:01:32,100 --> 00:01:38,520
the testing<font color="#CCCCCC"> reframe is</font><font color="#E5E5E5"> actually written</font>

34
00:01:34,109 --> 00:01:40,699
in Python<font color="#E5E5E5"> in Python 3 and we try to make</font>

35
00:01:38,520 --> 00:01:43,439
<font color="#CCCCCC">it easy for</font><font color="#E5E5E5"> anyone to use it from</font>

36
00:01:40,700 --> 00:01:46,829
software<font color="#E5E5E5"> developers to</font><font color="#CCCCCC"> seasoned</font>

37
00:01:43,439 --> 00:01:49,169
expressions<font color="#E5E5E5"> to any normal user who wants</font>

38
00:01:46,829 --> 00:01:52,229
<font color="#E5E5E5">you just</font><font color="#CCCCCC"> run our cluster and can test</font>

39
00:01:49,170 --> 00:01:53,969
their software<font color="#E5E5E5"> so we the way that we try</font>

40
00:01:52,229 --> 00:01:56,459
<font color="#CCCCCC">to do</font><font color="#E5E5E5"> that is basically abstracting away</font>

41
00:01:53,969 --> 00:01:58,350
our computing systems or the internals

42
00:01:56,459 --> 00:02:02,819
of the computing systems<font color="#E5E5E5"> some things</font>

43
00:01:58,350 --> 00:02:04,979
<font color="#E5E5E5">that we are</font><font color="#CCCCCC"> difficult to for some users</font>

44
00:02:02,819 --> 00:02:08,550
to run an HPC systems because<font color="#CCCCCC"> we do have</font>

45
00:02:04,979 --> 00:02:10,470
modules<font color="#CCCCCC"> we have different MPI and</font><font color="#E5E5E5"> the</font>

46
00:02:08,550 --> 00:02:12,569
implement<font color="#E5E5E5"> eyes are highly customized for</font>

47
00:02:10,470 --> 00:02:14,700
<font color="#CCCCCC">that computer know we like that computer</font>

48
00:02:12,569 --> 00:02:16,708
system and when she change the cluster

49
00:02:14,700 --> 00:02:17,369
<font color="#CCCCCC">you have to use another MPI because they</font>

50
00:02:16,709 --> 00:02:19,590
all MPI

51
00:02:17,370 --> 00:02:21,510
is highly customized for that<font color="#E5E5E5"> one so you</font>

52
00:02:19,590 --> 00:02:25,920
have<font color="#E5E5E5"> to be keeping tracking up all these</font>

53
00:02:21,510 --> 00:02:29,340
<font color="#E5E5E5">things so we try to try to</font><font color="#CCCCCC"> simplify the</font>

54
00:02:25,920 --> 00:02:32,548
usage of the of the<font color="#E5E5E5"> regression testing</font>

55
00:02:29,340 --> 00:02:34,769
of<font color="#E5E5E5"> our testing only frame by abstracting</font>

56
00:02:32,549 --> 00:02:38,099
away these concepts<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that way</font>

57
00:02:34,769 --> 00:02:39,959
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> the person who is writing the</font>

58
00:02:38,099 --> 00:02:41,909
checks<font color="#E5E5E5"> or if I want to write</font><font color="#CCCCCC"> for</font>

59
00:02:39,959 --> 00:02:43,349
instance I precise check<font color="#CCCCCC"> I don't need to</font>

60
00:02:41,909 --> 00:02:46,319
think<font color="#CCCCCC"> about it I just</font><font color="#E5E5E5"> have to think</font>

61
00:02:43,349 --> 00:02:49,230
<font color="#CCCCCC">about the logics how will my what</font><font color="#E5E5E5"> will</font>

62
00:02:46,319 --> 00:02:51,569
my program will need as input what will

63
00:02:49,230 --> 00:02:53,760
<font color="#CCCCCC">my program leaders output</font><font color="#E5E5E5"> hwacha give it</font>

64
00:02:51,569 --> 00:02:56,608
<font color="#E5E5E5">an</font><font color="#CCCCCC"> output and how can I measure the</font>

65
00:02:53,760 --> 00:02:59,819
performance so we have been<font color="#E5E5E5"> developing</font>

66
00:02:56,609 --> 00:03:03,569
with<font color="#E5E5E5"> frames internally</font><font color="#CCCCCC"> CSCS since 2016</font>

67
00:02:59,819 --> 00:03:05,250
<font color="#E5E5E5">we went public and now in 2019 we</font>

68
00:03:03,569 --> 00:03:09,000
basically have<font color="#E5E5E5"> 18 Forks and tell it</font>

69
00:03:05,250 --> 00:03:10,950
you've got 35<font color="#E5E5E5"> stargazers right last week</font>

70
00:03:09,000 --> 00:03:12,930
<font color="#CCCCCC">was 32</font><font color="#E5E5E5"> let's</font><font color="#CCCCCC"> use my</font><font color="#E5E5E5"> sight touch with you</font>

71
00:03:10,950 --> 00:03:15,060
<font color="#E5E5E5">it's a bit tough to count these things</font>

72
00:03:12,930 --> 00:03:17,280
<font color="#E5E5E5">because it's all the time being updated</font>

73
00:03:15,060 --> 00:03:18,629
<font color="#E5E5E5">because people are actually using</font><font color="#CCCCCC"> it and</font>

74
00:03:17,280 --> 00:03:21,510
<font color="#E5E5E5">one of the reason why</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> are using</font>

75
00:03:18,629 --> 00:03:23,250
<font color="#E5E5E5">reframe is because we have a very nice</font>

76
00:03:21,510 --> 00:03:25,260
design goals<font color="#E5E5E5"> one of the design goals we</font>

77
00:03:23,250 --> 00:03:27,299
have productivity<font color="#E5E5E5"> so which means that</font>

78
00:03:25,260 --> 00:03:29,910
whenever we have<font color="#CCCCCC"> a user we report the</font>

79
00:03:27,299 --> 00:03:32,340
<font color="#E5E5E5">bug and the user the</font><font color="#CCCCCC"> disease</font><font color="#E5E5E5"> bug we can</font>

80
00:03:29,910 --> 00:03:34,560
test it<font color="#CCCCCC"> later</font><font color="#E5E5E5"> what we do</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> write a test</font>

81
00:03:32,340 --> 00:03:38,269
so it allows us reframe<font color="#E5E5E5"> allow us to</font>

82
00:03:34,560 --> 00:03:42,060
<font color="#E5E5E5">actually on the fly</font><font color="#CCCCCC"> easily write tests</font>

83
00:03:38,269 --> 00:03:44,910
because we do have systems from basic

84
00:03:42,060 --> 00:03:47,250
Linux box with<font color="#CCCCCC"> red head installed</font><font color="#E5E5E5"> sent</font>

85
00:03:44,910 --> 00:03:49,948
to us installed as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> sli's installed</font>

86
00:03:47,250 --> 00:03:52,139
from<font color="#E5E5E5"> highly customized</font><font color="#CCCCCC"> Linux like Cray</font>

87
00:03:49,949 --> 00:03:55,560
systems we want our<font color="#CCCCCC"> tests also</font><font color="#E5E5E5"> to be</font>

88
00:03:52,139 --> 00:03:57,150
portable<font color="#CCCCCC"> so we we think a lot</font><font color="#E5E5E5"> about</font>

89
00:03:55,560 --> 00:04:00,000
<font color="#E5E5E5">portability we don't want to write on</font>

90
00:03:57,150 --> 00:04:02,579
<font color="#CCCCCC">test</font><font color="#E5E5E5"> on one system</font><font color="#CCCCCC"> and have to rewrite</font>

91
00:04:00,000 --> 00:04:04,440
it<font color="#CCCCCC"> to another</font><font color="#E5E5E5"> system one one thing that</font>

92
00:04:02,579 --> 00:04:06,810
I like<font color="#CCCCCC"> about reframe is that we have</font>

93
00:04:04,440 --> 00:04:09,299
been running<font color="#E5E5E5"> these daily in our systems</font>

94
00:04:06,810 --> 00:04:11,790
and we<font color="#E5E5E5"> have never seen a stack trace of</font>

95
00:04:09,299 --> 00:04:16,380
Python why because we are<font color="#E5E5E5"> real robust so</font>

96
00:04:11,790 --> 00:04:18,358
we do a highly testing<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only of the</font>

97
00:04:16,380 --> 00:04:20,459
systems but<font color="#CCCCCC"> also of refrain so usually</font>

98
00:04:18,358 --> 00:04:22,948
frame to test we frame one of<font color="#CCCCCC"> the key</font>

99
00:04:20,459 --> 00:04:24,449
features<font color="#CCCCCC"> of reframe is actually as I</font>

100
00:04:22,949 --> 00:04:26,310
<font color="#E5E5E5">said before</font><font color="#CCCCCC"> separation of</font><font color="#E5E5E5"> the program</font>

101
00:04:24,449 --> 00:04:27,659
environment the system<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so you</font>

102
00:04:26,310 --> 00:04:30,020
don't<font color="#CCCCCC"> really have to care much</font><font color="#E5E5E5"> about</font>

103
00:04:27,659 --> 00:04:31,969
<font color="#E5E5E5">that one thing</font>

104
00:04:30,020 --> 00:04:36,080
that for<font color="#E5E5E5"> those who actually have</font>

105
00:04:31,970 --> 00:04:38,300
experience<font color="#E5E5E5"> with HPC you always have to</font>

106
00:04:36,080 --> 00:04:40,460
run<font color="#E5E5E5"> jobs</font><font color="#CCCCCC"> HPC you don't really logging</font>

107
00:04:38,300 --> 00:04:42,680
into the compute node you do to a

108
00:04:40,460 --> 00:04:44,659
scheduler so in<font color="#E5E5E5"> general they do what's</font>

109
00:04:42,680 --> 00:04:46,729
called workload manager so you<font color="#E5E5E5"> can ask</font>

110
00:04:44,659 --> 00:04:48,469
to<font color="#E5E5E5"> say I want a thousand compute nodes</font>

111
00:04:46,729 --> 00:04:50,300
<font color="#E5E5E5">then you get tons of compute nodes and</font>

112
00:04:48,470 --> 00:04:52,879
then how<font color="#E5E5E5"> you run your simulation there</font>

113
00:04:50,300 --> 00:04:54,590
<font color="#CCCCCC">become a launcher as found in our</font><font color="#E5E5E5"> case</font>

114
00:04:52,879 --> 00:04:56,569
because<font color="#E5E5E5"> users learn and then you're</font>

115
00:04:54,590 --> 00:05:01,539
gonna<font color="#E5E5E5"> run MPI calculations across this</font>

116
00:04:56,569 --> 00:05:04,699
entire<font color="#E5E5E5"> a thousand thousand machines</font>

117
00:05:01,539 --> 00:05:06,409
<font color="#E5E5E5">compute nodes and some of these a</font>

118
00:05:04,699 --> 00:05:08,900
thousand<font color="#E5E5E5"> compute nodes may be GPU</font>

119
00:05:06,409 --> 00:05:12,919
enabled we have a pretty<font color="#E5E5E5"> big system with</font>

120
00:05:08,900 --> 00:05:14,750
<font color="#CCCCCC">5300 GPUs and the same system has a</font>

121
00:05:12,919 --> 00:05:18,318
thousand<font color="#E5E5E5"> nine hundred more or less CPU</font>

122
00:05:14,750 --> 00:05:19,789
<font color="#E5E5E5">only machines so you</font><font color="#CCCCCC"> actually to run</font><font color="#E5E5E5"> in</font>

123
00:05:18,319 --> 00:05:21,800
one case on the<font color="#CCCCCC"> other case you actually</font>

124
00:05:19,789 --> 00:05:23,240
cycle what's called a partition so you

125
00:05:21,800 --> 00:05:25,669
have to go to the heap you partition<font color="#CCCCCC"> or</font>

126
00:05:23,240 --> 00:05:27,770
<font color="#E5E5E5">no</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> you partition so on roof frame</font>

127
00:05:25,669 --> 00:05:29,419
we also want<font color="#CCCCCC"> to abstract out this</font>

128
00:05:27,770 --> 00:05:31,789
concept<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> don't really want the</font>

129
00:05:29,419 --> 00:05:33,889
users to be freaking about<font color="#E5E5E5"> hey I have to</font>

130
00:05:31,789 --> 00:05:35,960
be here I<font color="#CCCCCC"> have to be</font><font color="#E5E5E5"> there I have to</font><font color="#CCCCCC"> run</font>

131
00:05:33,889 --> 00:05:40,400
this way this<font color="#E5E5E5"> way we just abstract out a</font>

132
00:05:35,960 --> 00:05:41,960
lot<font color="#E5E5E5"> of things one of the the the concept</font>

133
00:05:40,400 --> 00:05:44,830
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> also reframes</font><font color="#E5E5E5"> we want to</font>

134
00:05:41,960 --> 00:05:47,180
guarantee<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have a very complete</font>

135
00:05:44,830 --> 00:05:49,990
documentation so if you go to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> website</font>

136
00:05:47,180 --> 00:05:52,370
<font color="#CCCCCC">you're gonna see the the reader dogs</font><font color="#E5E5E5"> and</font>

137
00:05:49,990 --> 00:05:53,870
you're gonna be able<font color="#E5E5E5"> to see our</font>

138
00:05:52,370 --> 00:05:57,830
<font color="#CCCCCC">documentation start</font><font color="#E5E5E5"> to using it so we're</font>

139
00:05:53,870 --> 00:06:02,060
<font color="#E5E5E5">gonna have tutorials and on</font><font color="#CCCCCC"> computing</font>

140
00:05:57,830 --> 00:06:03,500
<font color="#E5E5E5">systems on HPC systems we have a lot of</font>

141
00:06:02,060 --> 00:06:05,870
<font color="#E5E5E5">different people working</font><font color="#CCCCCC"> on them</font>

142
00:06:03,500 --> 00:06:08,509
<font color="#E5E5E5">for instance I work in the user support</font>

143
00:06:05,870 --> 00:06:11,240
team<font color="#E5E5E5"> and I PhD in chemistry</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am NOT a</font>

144
00:06:08,509 --> 00:06:14,560
computer<font color="#E5E5E5"> scientist and how can I be</font>

145
00:06:11,240 --> 00:06:17,090
developing how can I be using<font color="#CCCCCC"> reframe</font>

146
00:06:14,560 --> 00:06:18,259
the the reason we can do<font color="#CCCCCC"> that because we</font>

147
00:06:17,090 --> 00:06:20,330
<font color="#E5E5E5">abstract out the people who actually</font>

148
00:06:18,259 --> 00:06:23,719
using<font color="#E5E5E5"> reframe from the people</font><font color="#CCCCCC"> who</font>

149
00:06:20,330 --> 00:06:26,539
<font color="#E5E5E5">actually developing tests</font><font color="#CCCCCC"> we try to make</font>

150
00:06:23,719 --> 00:06:29,360
easy<font color="#E5E5E5"> for everyone who</font><font color="#CCCCCC"> doesn't have a PhD</font>

151
00:06:26,539 --> 00:06:32,240
<font color="#E5E5E5">in</font><font color="#CCCCCC"> computer science let's</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> to someone</font>

152
00:06:29,360 --> 00:06:34,699
who<font color="#E5E5E5"> has a</font><font color="#CCCCCC"> minimal knowledge of bash to</font>

153
00:06:32,240 --> 00:06:36,469
be using it<font color="#E5E5E5"> so we have two</font><font color="#CCCCCC"> different</font>

154
00:06:34,699 --> 00:06:38,240
<font color="#E5E5E5">api's one's called the front end API</font>

155
00:06:36,469 --> 00:06:39,860
<font color="#CCCCCC">they actually you call how to run</font>

156
00:06:38,240 --> 00:06:42,289
<font color="#E5E5E5">reframe and we want it to be as simple</font>

157
00:06:39,860 --> 00:06:44,839
as possible<font color="#CCCCCC"> so we only have we</font>

158
00:06:42,289 --> 00:06:47,539
have some<font color="#E5E5E5"> flags but if you want to write</font>

159
00:06:44,839 --> 00:06:52,099
the<font color="#CCCCCC"> Nemo flag you have to do is</font><font color="#E5E5E5"> mine R</font><font color="#CCCCCC"> -</font>

160
00:06:47,539 --> 00:06:54,409
<font color="#E5E5E5">R and we like the</font><font color="#CCCCCC"> reaming face guy is</font>

161
00:06:52,099 --> 00:06:57,289
<font color="#E5E5E5">actually in general user wants</font><font color="#CCCCCC"> to run</font>

162
00:06:54,409 --> 00:07:01,248
refrain or<font color="#E5E5E5"> see some straighter but</font><font color="#CCCCCC"> we</font>

163
00:06:57,289 --> 00:07:04,669
also have a<font color="#E5E5E5"> service at</font><font color="#CCCCCC"> the SES</font><font color="#E5E5E5"> that you</font>

164
00:07:01,249 --> 00:07:06,649
can run refrain<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us Jenkins</font><font color="#E5E5E5"> so you can</font>

165
00:07:04,669 --> 00:07:08,359
have a robot<font color="#E5E5E5"> running</font><font color="#CCCCCC"> your code</font><font color="#E5E5E5"> and</font>

166
00:07:06,649 --> 00:07:10,729
taking precise and checking the

167
00:07:08,360 --> 00:07:14,360
performance of precise whenever you make

168
00:07:10,729 --> 00:07:16,330
a pull request for instance<font color="#E5E5E5"> we also for</font>

169
00:07:14,360 --> 00:07:19,129
<font color="#E5E5E5">those</font><font color="#CCCCCC"> who actually</font><font color="#E5E5E5"> are developing</font>

170
00:07:16,330 --> 00:07:22,279
<font color="#CCCCCC">refrained tests that's not so difficult</font>

171
00:07:19,129 --> 00:07:25,249
also<font color="#E5E5E5"> so what you have to do is basically</font>

172
00:07:22,279 --> 00:07:28,909
write a<font color="#E5E5E5"> Python class and he hair it from</font>

173
00:07:25,249 --> 00:07:31,939
regression<font color="#E5E5E5"> test and decorated with a</font>

174
00:07:28,909 --> 00:07:34,639
small the critical simple test<font color="#E5E5E5"> the</font>

175
00:07:31,939 --> 00:07:36,439
simple test allows us to basically go

176
00:07:34,639 --> 00:07:37,430
through what's called<font color="#E5E5E5"> the pipeline</font><font color="#CCCCCC"> that</font>

177
00:07:36,439 --> 00:07:40,069
<font color="#E5E5E5">you show you later</font>

178
00:07:37,430 --> 00:07:42,229
<font color="#E5E5E5">and also enables you all the</font>

179
00:07:40,069 --> 00:07:43,759
<font color="#E5E5E5">functionalities internal to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> API like</font>

180
00:07:42,229 --> 00:07:45,949
the<font color="#E5E5E5"> sixties abstraction and the</font>

181
00:07:43,759 --> 00:07:49,759
<font color="#E5E5E5">environment abstraction the environment</font>

182
00:07:45,949 --> 00:07:51,529
abstraction is in<font color="#CCCCCC"> in HPC is not</font><font color="#E5E5E5"> only</font>

183
00:07:49,759 --> 00:07:53,569
<font color="#E5E5E5">about the variables that you have but</font>

184
00:07:51,529 --> 00:07:56,629
<font color="#CCCCCC">also about the modules system that you</font>

185
00:07:53,569 --> 00:08:00,199
<font color="#CCCCCC">have</font><font color="#E5E5E5"> so some some systems have</font><font color="#CCCCCC"> team mode</font>

186
00:07:56,629 --> 00:08:01,159
some system have<font color="#CCCCCC"> l l mod T mode for if</font>

187
00:08:00,199 --> 00:08:05,569
you don't know what I'm<font color="#E5E5E5"> talking about</font>

188
00:08:01,159 --> 00:08:07,430
that<font color="#E5E5E5"> environment environment managers</font>

189
00:08:05,569 --> 00:08:09,860
module managers where you can<font color="#CCCCCC"> actually</font>

190
00:08:07,430 --> 00:08:11,899
load<font color="#CCCCCC"> different versions</font><font color="#E5E5E5"> of software and</font>

191
00:08:09,860 --> 00:08:13,550
you don't need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have you</font><font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> to</font>

192
00:08:11,899 --> 00:08:16,039
care about it<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're running a TS</font>

193
00:08:13,550 --> 00:08:19,490
yes what's the type of of modules you're

194
00:08:16,039 --> 00:08:21,878
using one thing that we can<font color="#CCCCCC"> we say</font><font color="#E5E5E5"> okay</font>

195
00:08:19,490 --> 00:08:24,050
take<font color="#E5E5E5"> these guys are really doing</font>

196
00:08:21,879 --> 00:08:26,029
abstracting and so this<font color="#E5E5E5"> thing must be</font>

197
00:08:24,050 --> 00:08:28,519
really<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> to use in practice is</font>

198
00:08:26,029 --> 00:08:30,769
not the simplest<font color="#CCCCCC"> I'm talking about in</font>

199
00:08:28,519 --> 00:08:32,539
general<font color="#E5E5E5"> looks like that so</font><font color="#CCCCCC"> okay I'm</font>

200
00:08:30,769 --> 00:08:34,760
cramping the lines because it I have to

201
00:08:32,539 --> 00:08:36,588
fit into a slide<font color="#E5E5E5"> but as you can</font><font color="#CCCCCC"> see you</font>

202
00:08:34,760 --> 00:08:39,349
just<font color="#CCCCCC"> need to put like a descriptor</font><font color="#E5E5E5"> if</font>

203
00:08:36,589 --> 00:08:41,389
you want to give a nice name<font color="#E5E5E5"> you have</font>

204
00:08:39,349 --> 00:08:44,050
your class like<font color="#CCCCCC"> this we can do</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> so</font>

205
00:08:41,389 --> 00:08:46,250
have<font color="#E5E5E5"> your class you basically need</font>

206
00:08:44,049 --> 00:08:48,050
function inheriting from the<font color="#E5E5E5"> regression</font>

207
00:08:46,250 --> 00:08:49,880
<font color="#E5E5E5">test you write</font><font color="#CCCCCC"> the description names</font>

208
00:08:48,050 --> 00:08:52,579
just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you a nice description or</font>

209
00:08:49,880 --> 00:08:53,340
your test - you say I want to run<font color="#E5E5E5"> on</font>

210
00:08:52,579 --> 00:08:55,319
Pete

211
00:08:53,340 --> 00:08:58,110
<font color="#E5E5E5">ix which is how this because I told you</font>

212
00:08:55,320 --> 00:09:00,120
<font color="#CCCCCC">we 5300 peas</font><font color="#E5E5E5"> on the GPU part of the</font>

213
00:08:58,110 --> 00:09:03,540
cluster<font color="#CCCCCC"> and then you can say I want to</font>

214
00:09:00,120 --> 00:09:06,450
test the<font color="#CCCCCC"> G the G new compiler</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Cray</font>

215
00:09:03,540 --> 00:09:09,900
compiler and the<font color="#CCCCCC"> PGI compiler I can say</font>

216
00:09:06,450 --> 00:09:12,690
my they put fire of my<font color="#E5E5E5"> practices dots</font>

217
00:09:09,900 --> 00:09:15,990
you<font color="#E5E5E5"> fire so it's gonna be</font><font color="#CCCCCC"> like a</font><font color="#E5E5E5"> Nvidia</font>

218
00:09:12,690 --> 00:09:18,030
<font color="#E5E5E5">CUDA source so we frame identified that</font>

219
00:09:15,990 --> 00:09:21,360
when<font color="#E5E5E5"> you say single source and we call</font>

220
00:09:18,030 --> 00:09:23,459
the nvcc compiler<font color="#E5E5E5"> so I'd advise the</font>

221
00:09:21,360 --> 00:09:25,590
ending of<font color="#E5E5E5"> your single sources encode</font>

222
00:09:23,460 --> 00:09:27,500
appropriate compiler<font color="#E5E5E5"> and we will</font>

223
00:09:25,590 --> 00:09:31,230
probably compiling these these

224
00:09:27,500 --> 00:09:33,300
application using<font color="#CCCCCC"> the basic flags</font><font color="#E5E5E5"> this -</font>

225
00:09:31,230 --> 00:09:36,540
<font color="#CCCCCC">all three and use you</font><font color="#E5E5E5"> can give like</font>

226
00:09:33,300 --> 00:09:38,130
executable options<font color="#E5E5E5"> on our systems you</font>

227
00:09:36,540 --> 00:09:40,770
need<font color="#CCCCCC"> to know basically</font><font color="#E5E5E5"> what's the mode</font>

228
00:09:38,130 --> 00:09:42,689
you have<font color="#CCCCCC"> to load for CUDA so but you can</font>

229
00:09:40,770 --> 00:09:46,800
do a mapping you<font color="#CCCCCC"> can always say who</font><font color="#E5E5E5"> the</font>

230
00:09:42,690 --> 00:09:49,350
toolkit means these<font color="#E5E5E5"> module use or that</font>

231
00:09:46,800 --> 00:09:52,680
<font color="#E5E5E5">or module load that specific module you</font>

232
00:09:49,350 --> 00:09:54,000
can<font color="#CCCCCC"> do mappings and on this big closet</font>

233
00:09:52,680 --> 00:09:56,010
that<font color="#E5E5E5"> I told you that</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> just one</font>

234
00:09:54,000 --> 00:09:58,260
<font color="#E5E5E5">GPU per node so you can do the test</font><font color="#CCCCCC"> with</font>

235
00:09:56,010 --> 00:10:01,530
<font color="#CCCCCC">one GPU</font><font color="#E5E5E5"> but you can</font><font color="#CCCCCC"> do say you can say</font>

236
00:09:58,260 --> 00:10:04,620
here like if I am on<font color="#CCCCCC"> test on system a</font><font color="#E5E5E5"> do</font>

237
00:10:01,530 --> 00:10:07,709
<font color="#E5E5E5">two GPUs I'm system B do four GPUs and</font>

238
00:10:04,620 --> 00:10:09,810
so the way<font color="#E5E5E5"> we do much guarantee that we</font>

239
00:10:07,710 --> 00:10:12,240
have a sanity check<font color="#CCCCCC"> guarantee if you</font>

240
00:10:09,810 --> 00:10:14,459
have like the values that correct we do

241
00:10:12,240 --> 00:10:17,340
this<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> called 70 patterns and you</font>

242
00:10:14,460 --> 00:10:20,310
strike out<font color="#E5E5E5"> extract information from your</font>

243
00:10:17,340 --> 00:10:22,740
<font color="#E5E5E5">test so in this case if the line time</font>

244
00:10:20,310 --> 00:10:24,540
for single matrix<font color="#E5E5E5"> is found in</font><font color="#CCCCCC"> this TD</font>

245
00:10:22,740 --> 00:10:27,150
out<font color="#E5E5E5"> you're gonna</font><font color="#CCCCCC"> guarantee</font><font color="#E5E5E5"> that was</font>

246
00:10:24,540 --> 00:10:30,750
passed because actually this is the last

247
00:10:27,150 --> 00:10:32,160
line of your<font color="#E5E5E5"> of your output</font><font color="#CCCCCC"> and then we</font>

248
00:10:30,750 --> 00:10:33,930
can look<font color="#E5E5E5"> at the output and</font><font color="#CCCCCC"> it will say</font>

249
00:10:32,160 --> 00:10:37,140
that something like performance<font color="#CCCCCC"> that was</font>

250
00:10:33,930 --> 00:10:39,089
in gigaflops per second<font color="#E5E5E5"> and then if you</font>

251
00:10:37,140 --> 00:10:41,340
look for<font color="#E5E5E5"> this for this for this line is</font>

252
00:10:39,090 --> 00:10:43,380
track start out these this<font color="#E5E5E5"> pattern</font>

253
00:10:41,340 --> 00:10:45,120
convert it to a float<font color="#E5E5E5"> and then we're</font>

254
00:10:43,380 --> 00:10:47,310
<font color="#CCCCCC">going to be able to compare</font><font color="#E5E5E5"> so this</font>

255
00:10:45,120 --> 00:10:50,730
number<font color="#E5E5E5"> here 50 is just</font><font color="#CCCCCC"> a dummy number so</font>

256
00:10:47,310 --> 00:10:54,089
if this<font color="#CCCCCC"> number</font><font color="#E5E5E5"> is between</font><font color="#CCCCCC"> 10 percent of</font>

257
00:10:50,730 --> 00:10:55,680
this 50 we're<font color="#E5E5E5"> gonna pass performance so</font>

258
00:10:54,090 --> 00:10:58,440
as you can<font color="#CCCCCC"> see we're just trying to</font>

259
00:10:55,680 --> 00:11:00,750
abstract away when<font color="#CCCCCC"> all the logics are</font>

260
00:10:58,440 --> 00:11:03,810
doing grab or getting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fringe</font>

261
00:11:00,750 --> 00:11:05,820
comparing<font color="#CCCCCC"> converting to numbers</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> entry</font>

262
00:11:03,810 --> 00:11:10,050
<font color="#CCCCCC">frame</font>

263
00:11:05,820 --> 00:11:12,630
I can say that<font color="#E5E5E5"> yes nice this tax is</font><font color="#CCCCCC"> weak</font>

264
00:11:10,050 --> 00:11:15,180
<font color="#E5E5E5">we came right but do you really use it</font>

265
00:11:12,630 --> 00:11:16,380
in like anybody will use<font color="#E5E5E5"> from a precise</font>

266
00:11:15,180 --> 00:11:20,310
can<font color="#E5E5E5"> I really use for my</font><font color="#CCCCCC"> scientific</font>

267
00:11:16,380 --> 00:11:22,589
applications<font color="#E5E5E5"> yes so we have like a Nazi</font>

268
00:11:20,310 --> 00:11:25,469
<font color="#CCCCCC">SES that's actually been developed</font><font color="#E5E5E5"> every</font>

269
00:11:22,589 --> 00:11:28,230
<font color="#E5E5E5">day and</font><font color="#CCCCCC"> they test it and they usually</font>

270
00:11:25,470 --> 00:11:30,149
<font color="#E5E5E5">make in this case and this</font><font color="#CCCCCC"> is how</font>

271
00:11:28,230 --> 00:11:34,649
complexity is for them<font color="#E5E5E5"> to write a test</font>

272
00:11:30,149 --> 00:11:36,149
so they say I need<font color="#E5E5E5"> see make and I need</font>

273
00:11:34,649 --> 00:11:38,550
<font color="#E5E5E5">this version of GCC because they were</font>

274
00:11:36,149 --> 00:11:40,800
specific<font color="#CCCCCC"> for this version</font><font color="#E5E5E5"> and I need to</font>

275
00:11:38,550 --> 00:11:44,310
comply with these<font color="#CCCCCC"> options these</font><font color="#E5E5E5"> compile</font>

276
00:11:40,800 --> 00:11:47,939
options my code<font color="#E5E5E5"> and voila they get the</font>

277
00:11:44,310 --> 00:11:50,880
cold<font color="#E5E5E5"> because we are using Python and now</font>

278
00:11:47,940 --> 00:11:52,500
we can use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> amazing</font><font color="#E5E5E5"> computer science</font>

279
00:11:50,880 --> 00:11:55,410
<font color="#E5E5E5">concepts that we could not</font><font color="#CCCCCC"> use in shell</font>

280
00:11:52,500 --> 00:11:58,079
<font color="#E5E5E5">one of them is</font><font color="#CCCCCC"> oh oh</font><font color="#E5E5E5"> so I can inherit</font><font color="#CCCCCC"> I</font>

281
00:11:55,410 --> 00:12:00,630
can say you know what now I<font color="#E5E5E5"> have my MPI</font>

282
00:11:58,079 --> 00:12:03,029
version of the test<font color="#E5E5E5"> or my MPI version of</font>

283
00:12:00,630 --> 00:12:05,670
the test to comply with MPI<font color="#CCCCCC"> I need this</font>

284
00:12:03,029 --> 00:12:08,730
<font color="#E5E5E5">flag so now I have two tests I have the</font>

285
00:12:05,670 --> 00:12:11,699
previous<font color="#CCCCCC"> test</font><font color="#E5E5E5"> that was the basic one</font>

286
00:12:08,730 --> 00:12:13,800
<font color="#CCCCCC">that was</font><font color="#E5E5E5"> only company</font><font color="#CCCCCC"> for set on and I</font>

287
00:12:11,699 --> 00:12:16,349
have now a second test<font color="#E5E5E5"> that is basically</font>

288
00:12:13,800 --> 00:12:18,930
doing the MPI version and beginning go

289
00:12:16,350 --> 00:12:20,880
on we can actually<font color="#E5E5E5"> not only</font><font color="#CCCCCC"> a simple</font>

290
00:12:18,930 --> 00:12:24,000
test on top but we can also have this

291
00:12:20,880 --> 00:12:25,410
<font color="#CCCCCC">parametric test then I have a factory so</font>

292
00:12:24,000 --> 00:12:27,810
instead of having<font color="#CCCCCC"> actually to write a</font>

293
00:12:25,410 --> 00:12:29,519
factory class or a factory function<font color="#E5E5E5"> to</font>

294
00:12:27,810 --> 00:12:32,130
spawn several<font color="#E5E5E5"> tests</font><font color="#CCCCCC"> I can parametrize</font>

295
00:12:29,519 --> 00:12:34,319
<font color="#CCCCCC">them so in this case I will</font>

296
00:12:32,130 --> 00:12:37,350
<font color="#E5E5E5">parameterizing</font><font color="#CCCCCC"> a different test that we</font>

297
00:12:34,319 --> 00:12:39,000
<font color="#CCCCCC">compile for has well</font><font color="#E5E5E5"> broad architecture</font>

298
00:12:37,350 --> 00:12:40,769
and a native architecture that can<font color="#CCCCCC"> be</font>

299
00:12:39,000 --> 00:12:44,730
the current one<font color="#CCCCCC"> that you are using can</font>

300
00:12:40,769 --> 00:12:48,149
be any any<font color="#CCCCCC"> other architecture right so</font>

301
00:12:44,730 --> 00:12:50,699
you can see it's really<font color="#CCCCCC"> simple to to</font>

302
00:12:48,149 --> 00:12:53,399
write tests on<font color="#CCCCCC"> reframe and the</font><font color="#E5E5E5"> pipeline</font>

303
00:12:50,699 --> 00:12:56,459
that<font color="#E5E5E5"> you get by adding these simple test</font>

304
00:12:53,399 --> 00:12:59,069
and<font color="#E5E5E5"> this parametrize is a very fixed one</font>

305
00:12:56,459 --> 00:13:01,290
and this<font color="#E5E5E5"> this pipeline is is more or</font>

306
00:12:59,069 --> 00:13:03,779
less the following you start the front

307
00:13:01,290 --> 00:13:05,969
end<font color="#E5E5E5"> you can say</font><font color="#CCCCCC"> reframe</font><font color="#E5E5E5"> - are what we</font>

308
00:13:03,779 --> 00:13:08,100
frame you do you go into<font color="#CCCCCC"> a folder that</font>

309
00:13:05,970 --> 00:13:11,100
<font color="#E5E5E5">you that you say and then</font><font color="#CCCCCC"> you look at</font>

310
00:13:08,100 --> 00:13:14,670
<font color="#E5E5E5">all the Python files inside import all</font>

311
00:13:11,100 --> 00:13:16,439
<font color="#E5E5E5">of them that are</font><font color="#CCCCCC"> reframed tests and then</font>

312
00:13:14,670 --> 00:13:19,400
it will start running<font color="#CCCCCC"> I'm so you're</font>

313
00:13:16,439 --> 00:13:21,290
going to pick<font color="#E5E5E5"> a test and you check hey</font>

314
00:13:19,400 --> 00:13:23,990
if this stuff meant to be run<font color="#CCCCCC"> on this</font>

315
00:13:21,290 --> 00:13:26,030
<font color="#E5E5E5">system if yes</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> continue if you know we</font>

316
00:13:23,990 --> 00:13:27,740
<font color="#E5E5E5">just skip the</font><font color="#CCCCCC"> test and then with the</font>

317
00:13:26,030 --> 00:13:30,680
same applies<font color="#CCCCCC"> to every single every</font>

318
00:13:27,740 --> 00:13:32,320
<font color="#CCCCCC">single conditions that you can pose</font><font color="#E5E5E5"> we</font>

319
00:13:30,680 --> 00:13:34,969
can say is this is<font color="#E5E5E5"> this that</font>

320
00:13:32,320 --> 00:13:36,860
<font color="#CCCCCC">proof-positive program environment</font><font color="#E5E5E5"> so in</font>

321
00:13:34,970 --> 00:13:38,960
my laptop do I have a<font color="#CCCCCC"> cray compiler or</font>

322
00:13:36,860 --> 00:13:40,580
not<font color="#CCCCCC"> if I say no I don't</font><font color="#E5E5E5"> have a Cray</font>

323
00:13:38,960 --> 00:13:41,270
compiler on my laptop<font color="#CCCCCC"> I'm gonna skip the</font>

324
00:13:40,580 --> 00:13:43,250
<font color="#E5E5E5">great test</font>

325
00:13:41,270 --> 00:13:44,930
I wouldn't go continue to that all to

326
00:13:43,250 --> 00:13:47,300
the<font color="#CCCCCC"> green new</font><font color="#E5E5E5"> test what I have we can go</font>

327
00:13:44,930 --> 00:13:50,420
to the<font color="#CCCCCC"> client</font><font color="#E5E5E5"> test that I have my</font><font color="#CCCCCC"> laptop</font>

328
00:13:47,300 --> 00:13:51,890
and then this step we actually<font color="#E5E5E5"> run on</font>

329
00:13:50,420 --> 00:13:53,420
the machine that<font color="#CCCCCC"> you actually have</font>

330
00:13:51,890 --> 00:13:55,790
<font color="#CCCCCC">executed on now</font>

331
00:13:53,420 --> 00:13:58,430
<font color="#E5E5E5">when I walk through</font><font color="#CCCCCC"> the computing Center</font>

332
00:13:55,790 --> 00:14:01,459
what we have is actually<font color="#CCCCCC"> we also have</font>

333
00:13:58,430 --> 00:14:05,000
these compute nodes right<font color="#E5E5E5"> that you spawn</font>

334
00:14:01,460 --> 00:14:08,510
with that<font color="#E5E5E5"> to the scheduler</font><font color="#CCCCCC"> there is a</font>

335
00:14:05,000 --> 00:14:10,610
cushion<font color="#CCCCCC"> so we can so we do the we do</font>

336
00:14:08,510 --> 00:14:13,160
this<font color="#E5E5E5"> odds analysis in a compute node and</font>

337
00:14:10,610 --> 00:14:14,660
you<font color="#E5E5E5"> can run the</font><font color="#CCCCCC"> test or sorry on the</font>

338
00:14:13,160 --> 00:14:17,150
<font color="#CCCCCC">local node then we</font><font color="#E5E5E5"> can run the test on</font>

339
00:14:14,660 --> 00:14:20,510
<font color="#E5E5E5">the compute nodes so</font><font color="#CCCCCC"> we take your</font><font color="#E5E5E5"> test</font>

340
00:14:17,150 --> 00:14:21,949
we verified<font color="#CCCCCC"> it's valid we set</font><font color="#E5E5E5"> up the</font>

341
00:14:20,510 --> 00:14:24,260
environment<font color="#CCCCCC"> so you clone will guarantee</font>

342
00:14:21,950 --> 00:14:27,590
that<font color="#CCCCCC"> you run in a</font><font color="#E5E5E5"> sane environment</font>

343
00:14:24,260 --> 00:14:28,880
<font color="#E5E5E5">that's always equal to the test that you</font>

344
00:14:27,590 --> 00:14:30,650
have<font color="#CCCCCC"> exist</font><font color="#E5E5E5"> at the environment that you</font>

345
00:14:28,880 --> 00:14:32,480
have is equal<font color="#CCCCCC"> to refrain you compile</font>

346
00:14:30,650 --> 00:14:35,750
<font color="#CCCCCC">your test if it's necessary</font><font color="#E5E5E5"> and response</font>

347
00:14:32,480 --> 00:14:38,810
<font color="#CCCCCC">test okay my laptop does not have</font><font color="#E5E5E5"> a</font>

348
00:14:35,750 --> 00:14:41,210
<font color="#CCCCCC">workload manager</font><font color="#E5E5E5"> right my laptop is just</font>

349
00:14:38,810 --> 00:14:43,369
my laptop I don't want to be installing

350
00:14:41,210 --> 00:14:44,450
<font color="#E5E5E5">things that they don't mean so one of</font>

351
00:14:43,370 --> 00:14:47,240
the things that we don't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> a workload</font>

352
00:14:44,450 --> 00:14:49,220
<font color="#E5E5E5">manager at least I don't need it</font><font color="#CCCCCC"> so what</font>

353
00:14:47,240 --> 00:14:52,400
I do is<font color="#CCCCCC"> basically on my laptop</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> say</font>

354
00:14:49,220 --> 00:14:55,070
my<font color="#CCCCCC"> workload</font><font color="#E5E5E5"> manager said local scheduler</font>

355
00:14:52,400 --> 00:14:57,560
so you<font color="#E5E5E5"> actually just</font><font color="#CCCCCC"> emit a batch script</font>

356
00:14:55,070 --> 00:15:00,860
<font color="#E5E5E5">and runs on my local laptop</font><font color="#CCCCCC"> so this way</font>

357
00:14:57,560 --> 00:15:04,489
<font color="#E5E5E5">we can run from a laptop to Travis to</font>

358
00:15:00,860 --> 00:15:05,810
our HPC systems one thing that we talked

359
00:15:04,490 --> 00:15:08,300
when<font color="#CCCCCC"> we talk to the people</font><font color="#E5E5E5"> from</font>

360
00:15:05,810 --> 00:15:10,699
operations they say<font color="#CCCCCC"> Sicily means</font><font color="#E5E5E5"> they</font>

361
00:15:08,300 --> 00:15:13,670
say<font color="#CCCCCC"> oh the system</font><font color="#E5E5E5"> is saying for the</font>

362
00:15:10,700 --> 00:15:16,130
insane means the system<font color="#E5E5E5"> is getting the</font>

363
00:15:13,670 --> 00:15:17,990
<font color="#E5E5E5">correct numbers and getting</font><font color="#CCCCCC"> the quite</font>

364
00:15:16,130 --> 00:15:20,060
performance<font color="#E5E5E5"> on</font><font color="#CCCCCC"> reframe the metrics we</font>

365
00:15:17,990 --> 00:15:21,260
<font color="#CCCCCC">are be</font><font color="#E5E5E5"> different same for us means that</font>

366
00:15:20,060 --> 00:15:23,119
<font color="#CCCCCC">we are actually</font><font color="#E5E5E5"> giving the correct</font>

367
00:15:21,260 --> 00:15:24,890
science which means that<font color="#CCCCCC"> I'm given the</font>

368
00:15:23,120 --> 00:15:26,480
correct number<font color="#E5E5E5"> and performance means</font>

369
00:15:24,890 --> 00:15:28,460
that you actually performing<font color="#E5E5E5"> in that</font>

370
00:15:26,480 --> 00:15:30,650
<font color="#CCCCCC">given range of value that we're</font>

371
00:15:28,460 --> 00:15:33,059
expecting<font color="#CCCCCC"> that bigger flops of that</font><font color="#E5E5E5"> time</font>

372
00:15:30,650 --> 00:15:35,399
<font color="#E5E5E5">frame</font><font color="#CCCCCC"> so we do</font>

373
00:15:33,059 --> 00:15:36,988
different steps<font color="#E5E5E5"> for checking the</font>

374
00:15:35,399 --> 00:15:39,719
performance and in check in the same

375
00:15:36,989 --> 00:15:41,819
vicinity<font color="#E5E5E5"> and after if your test has</font>

376
00:15:39,719 --> 00:15:44,839
passed<font color="#CCCCCC"> or not we clean up the stage and</font>

377
00:15:41,819 --> 00:15:47,309
continue and then report at the end<font color="#E5E5E5"> well</font>

378
00:15:44,839 --> 00:15:49,349
one way<font color="#E5E5E5"> that you can do what one type</font><font color="#CCCCCC"> of</font>

379
00:15:47,309 --> 00:15:51,238
<font color="#E5E5E5">test that you</font><font color="#CCCCCC"> can do is that you</font><font color="#E5E5E5"> can</font>

380
00:15:49,349 --> 00:15:53,339
compile own<font color="#CCCCCC"> tests if you don't want to</font>

381
00:15:51,239 --> 00:15:55,979
be<font color="#CCCCCC"> running anything</font><font color="#E5E5E5"> if I want to compile</font>

382
00:15:53,339 --> 00:15:57,479
a library<font color="#E5E5E5"> you can compile</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> if you want</font>

383
00:15:55,979 --> 00:15:58,739
to<font color="#E5E5E5"> run on it test it because</font><font color="#CCCCCC"> you have</font>

384
00:15:57,479 --> 00:16:00,659
<font color="#E5E5E5">already compiled I don't know an</font>

385
00:15:58,739 --> 00:16:04,019
application<font color="#E5E5E5"> your computer can run it</font>

386
00:16:00,659 --> 00:16:06,329
only and you can<font color="#E5E5E5"> so we have helped the</font>

387
00:16:04,019 --> 00:16:10,079
user we<font color="#CCCCCC"> have already</font><font color="#E5E5E5"> predefined places</font>

388
00:16:06,329 --> 00:16:12,569
that you can do<font color="#E5E5E5"> that the way that you</font>

389
00:16:10,079 --> 00:16:17,128
can actually define<font color="#CCCCCC"> what's</font><font color="#E5E5E5"> the the paths</font>

390
00:16:12,569 --> 00:16:19,378
that<font color="#CCCCCC"> you have where sex is - II come</font>

391
00:16:17,129 --> 00:16:21,989
<font color="#E5E5E5">online but you</font><font color="#CCCCCC"> can also define</font><font color="#E5E5E5"> different</font>

392
00:16:19,379 --> 00:16:25,199
configuration files to actually define

393
00:16:21,989 --> 00:16:27,749
<font color="#CCCCCC">what is your laptop what is HPC Center</font>

394
00:16:25,199 --> 00:16:29,368
<font color="#E5E5E5">and what is the other</font><font color="#CCCCCC"> edge pieces that</font>

395
00:16:27,749 --> 00:16:32,609
you<font color="#E5E5E5"> are running so this configuration</font>

396
00:16:29,369 --> 00:16:34,469
file allows us to map different systems

397
00:16:32,609 --> 00:16:36,659
<font color="#CCCCCC">I</font><font color="#E5E5E5"> run the same</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> on different</font><font color="#CCCCCC"> systems</font>

398
00:16:34,469 --> 00:16:39,149
so how<font color="#CCCCCC"> does it</font><font color="#E5E5E5"> look like when you run</font>

399
00:16:36,659 --> 00:16:40,799
your frame it looked<font color="#E5E5E5"> like this basically</font>

400
00:16:39,149 --> 00:16:43,919
if<font color="#E5E5E5"> you have passed all the tests and you</font>

401
00:16:40,799 --> 00:16:46,319
just say run<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> past run</font><font color="#CCCCCC"> ok passed</font><font color="#E5E5E5"> so I</font>

402
00:16:43,919 --> 00:16:48,389
can run<font color="#E5E5E5"> on prey</font><font color="#CCCCCC"> I can run you</font><font color="#E5E5E5"> know like</font>

403
00:16:46,319 --> 00:16:50,669
example<font color="#CCCCCC"> test for instance if something</font>

404
00:16:48,389 --> 00:16:53,789
doesn't doesn't<font color="#E5E5E5"> pass what happens</font><font color="#CCCCCC"> that</font>

405
00:16:50,669 --> 00:16:55,529
if you run<font color="#CCCCCC"> you say failed</font><font color="#E5E5E5"> and at the end</font>

406
00:16:53,789 --> 00:16:57,809
you say the<font color="#CCCCCC"> entire regression failed</font>

407
00:16:55,529 --> 00:16:59,609
<font color="#E5E5E5">with one test case</font><font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> could</font>

408
00:16:57,809 --> 00:17:01,858
say report<font color="#E5E5E5"> a failure</font><font color="#CCCCCC"> in this case I just</font>

409
00:16:59,609 --> 00:17:03,779
run one test one check so<font color="#E5E5E5"> you only see</font>

410
00:17:01,859 --> 00:17:05,220
<font color="#E5E5E5">one</font><font color="#CCCCCC"> failure here but you can</font><font color="#E5E5E5"> still see</font>

411
00:17:03,779 --> 00:17:08,579
the reason why it was<font color="#CCCCCC"> very much</font>

412
00:17:05,220 --> 00:17:10,439
performance<font color="#E5E5E5"> so it passionately and the</font>

413
00:17:08,579 --> 00:17:13,049
reason is<font color="#E5E5E5"> because these number here is</font>

414
00:17:10,439 --> 00:17:16,439
beyond the range that<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> defined</font>

415
00:17:13,049 --> 00:17:19,589
the reference range right<font color="#CCCCCC"> one of the</font>

416
00:17:16,439 --> 00:17:22,769
nice things<font color="#CCCCCC"> for HPC centers is that</font><font color="#E5E5E5"> we</font>

417
00:17:19,589 --> 00:17:24,990
care<font color="#E5E5E5"> about the users a lot and by caring</font>

418
00:17:22,769 --> 00:17:27,480
about the users we need to<font color="#CCCCCC"> guarantee</font>

419
00:17:24,990 --> 00:17:30,059
that we<font color="#CCCCCC"> never</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> the report an error</font><font color="#E5E5E5"> we</font>

420
00:17:27,480 --> 00:17:32,549
can<font color="#CCCCCC"> identify the reason why that means</font>

421
00:17:30,059 --> 00:17:34,740
that we save a<font color="#E5E5E5"> lot of logs so at CSI</font>

422
00:17:32,549 --> 00:17:36,710
specifically we have a centralized login

423
00:17:34,740 --> 00:17:39,179
service that we save our seas logs and

424
00:17:36,710 --> 00:17:41,909
reframe can also send to that syslog

425
00:17:39,179 --> 00:17:42,960
so we can send all the performance of

426
00:17:41,909 --> 00:17:46,440
our applications that we are running

427
00:17:42,960 --> 00:17:48,659
<font color="#E5E5E5">daily at</font><font color="#CCCCCC"> CSS</font><font color="#E5E5E5"> to this</font>

428
00:17:46,440 --> 00:17:50,850
<font color="#E5E5E5">lies and plot graphs for instance like</font>

429
00:17:48,659 --> 00:17:54,690
as you can see this is basically<font color="#CCCCCC"> the</font>

430
00:17:50,850 --> 00:17:56,340
<font color="#E5E5E5">logs of</font><font color="#CCCCCC"> refrain execution of one</font>

431
00:17:54,690 --> 00:17:58,320
application<font color="#CCCCCC"> it's called</font><font color="#E5E5E5"> Amber running</font>

432
00:17:56,340 --> 00:18:00,389
the GPU and<font color="#E5E5E5"> is the sepia version</font><font color="#CCCCCC"> they</font>

433
00:17:58,320 --> 00:18:02,759
see a bit fruit<font color="#CCCCCC"> weights</font><font color="#E5E5E5"> then we can</font>

434
00:18:00,389 --> 00:18:04,949
stand<font color="#E5E5E5"> why and we can report why it was a</font>

435
00:18:02,759 --> 00:18:08,039
smaller or why it was<font color="#E5E5E5"> higher that we can</font>

436
00:18:04,950 --> 00:18:10,529
understand<font color="#E5E5E5"> the usage</font><font color="#CCCCCC"> that we have for</font>

437
00:18:08,039 --> 00:18:12,809
referring inside<font color="#CCCCCC"> CSCS now's national</font>

438
00:18:10,529 --> 00:18:14,580
<font color="#CCCCCC">computer center is basically</font><font color="#E5E5E5"> we run</font>

439
00:18:12,809 --> 00:18:15,960
<font color="#E5E5E5">throughout the three majors</font><font color="#CCCCCC"> collisions</font>

440
00:18:14,580 --> 00:18:18,259
that<font color="#E5E5E5"> we have that app it's time</font><font color="#CCCCCC"> good</font>

441
00:18:15,960 --> 00:18:21,899
<font color="#E5E5E5">sketch and</font><font color="#CCCCCC"> Leoni pitch deities way</font>

442
00:18:18,259 --> 00:18:24,149
anyone can<font color="#CCCCCC"> access to project bits cache</font>

443
00:18:21,899 --> 00:18:28,350
is the<font color="#E5E5E5"> one that we do the climate</font>

444
00:18:24,149 --> 00:18:29,789
calculation so the<font color="#CCCCCC"> militias that</font><font color="#E5E5E5"> say if</font>

445
00:18:28,350 --> 00:18:32,129
there are<font color="#E5E5E5"> really not rain</font><font color="#CCCCCC"> they are done</font>

446
00:18:29,789 --> 00:18:34,350
now center and the<font color="#CCCCCC"> Leone is a private</font>

447
00:18:32,129 --> 00:18:36,689
<font color="#CCCCCC">question from a custom</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the customer</font>

448
00:18:34,350 --> 00:18:38,759
<font color="#E5E5E5">so they're on the street</font><font color="#CCCCCC"> quest we run</font>

449
00:18:36,690 --> 00:18:40,620
what's called production<font color="#E5E5E5"> test that told</font>

450
00:18:38,759 --> 00:18:43,200
you<font color="#E5E5E5"> that we run daily maintenance tests</font>

451
00:18:40,620 --> 00:18:45,149
that we basically run before<font color="#E5E5E5"> doing an</font>

452
00:18:43,200 --> 00:18:46,919
<font color="#CCCCCC">applicator in the system</font><font color="#E5E5E5"> and after</font><font color="#CCCCCC"> doing</font>

453
00:18:45,149 --> 00:18:49,949
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> and what you</font><font color="#E5E5E5"> call</font>

454
00:18:46,919 --> 00:18:52,139
<font color="#CCCCCC">diagnostics when a note goes bad we run</font>

455
00:18:49,950 --> 00:18:53,970
some tests<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bring it back before</font><font color="#E5E5E5"> and</font>

456
00:18:52,139 --> 00:18:55,799
why you do<font color="#E5E5E5"> that because we have</font><font color="#CCCCCC"> seen</font>

457
00:18:53,970 --> 00:18:58,230
really<font color="#E5E5E5"> nice things with</font><font color="#CCCCCC"> reframe that</font>

458
00:18:55,799 --> 00:19:01,168
<font color="#E5E5E5">allows us to probe and improve the</font>

459
00:18:58,230 --> 00:19:02,820
quality<font color="#CCCCCC"> of</font><font color="#E5E5E5"> services</font><font color="#CCCCCC"> sometimes we before</font>

460
00:19:01,169 --> 00:19:04,590
the<font color="#CCCCCC"> upgrade</font><font color="#E5E5E5"> the application is running</font>

461
00:19:02,820 --> 00:19:06,809
<font color="#CCCCCC">over given performance after the upgrade</font>

462
00:19:04,590 --> 00:19:09,269
<font color="#E5E5E5">the application drops performance or</font>

463
00:19:06,809 --> 00:19:10,889
<font color="#E5E5E5">increase performance</font><font color="#CCCCCC"> so then we go</font>

464
00:19:09,269 --> 00:19:12,330
investigate<font color="#E5E5E5"> what</font><font color="#CCCCCC"> the reason why and by</font>

465
00:19:10,889 --> 00:19:14,370
short of the case we can bring the

466
00:19:12,330 --> 00:19:16,110
performance<font color="#CCCCCC"> up back to</font><font color="#E5E5E5"> the original and</font>

467
00:19:14,370 --> 00:19:17,850
if we didn't have<font color="#CCCCCC"> reframe to actually</font>

468
00:19:16,110 --> 00:19:19,500
monitor that the performance will be bad

469
00:19:17,850 --> 00:19:22,289
<font color="#E5E5E5">and we wouldn't</font><font color="#CCCCCC"> know this on the user</font>

470
00:19:19,500 --> 00:19:24,539
will be complaining<font color="#E5E5E5"> so the way we do</font>

471
00:19:22,289 --> 00:19:26,580
<font color="#E5E5E5">that you stole</font><font color="#CCCCCC"> janky so reframes</font><font color="#E5E5E5"> is</font>

472
00:19:24,539 --> 00:19:28,679
taking from Jenkins<font color="#E5E5E5"> and then we can see</font>

473
00:19:26,580 --> 00:19:30,509
<font color="#E5E5E5">that the nice thing about jank is that</font>

474
00:19:28,679 --> 00:19:32,940
you have all these nice

475
00:19:30,509 --> 00:19:35,159
interfaces that we can we don't<font color="#CCCCCC"> need to</font>

476
00:19:32,940 --> 00:19:39,240
we<font color="#CCCCCC"> don't need to care about login</font><font color="#E5E5E5"> to the</font>

477
00:19:35,159 --> 00:19:43,740
system we can<font color="#E5E5E5"> just look to</font><font color="#CCCCCC"> the web</font>

478
00:19:39,240 --> 00:19:45,929
<font color="#E5E5E5">browser so we like it very much because</font>

479
00:19:43,740 --> 00:19:48,360
<font color="#CCCCCC">it guarantees the quality of services of</font>

480
00:19:45,929 --> 00:19:51,690
our systems and now the<font color="#CCCCCC"> application that</font>

481
00:19:48,360 --> 00:19:55,590
we support<font color="#E5E5E5"> but we also want to empower</font>

482
00:19:51,690 --> 00:19:57,659
users<font color="#CCCCCC"> so at CSS</font><font color="#E5E5E5"> we have a CI service so</font>

483
00:19:55,590 --> 00:19:58,740
<font color="#E5E5E5">you can apply for computers</font><font color="#CCCCCC"> computer</font>

484
00:19:57,659 --> 00:20:01,289
time<font color="#CCCCCC"> at CSC</font>

485
00:19:58,740 --> 00:20:02,039
apply for<font color="#CCCCCC"> our CI service there and then</font>

486
00:20:01,289 --> 00:20:04,890
be running

487
00:20:02,039 --> 00:20:08,309
let's give example precise<font color="#CCCCCC"> every day and</font>

488
00:20:04,890 --> 00:20:11,850
test if it was performing and at<font color="#E5E5E5"> our at</font>

489
00:20:08,309 --> 00:20:14,070
<font color="#CCCCCC">a real supercomputing</font><font color="#E5E5E5"> Center for that we</font>

490
00:20:11,850 --> 00:20:16,049
<font color="#E5E5E5">have actually integrated</font><font color="#CCCCCC"> tested</font>

491
00:20:14,070 --> 00:20:20,070
reframing integrations not only in our

492
00:20:16,049 --> 00:20:21,990
<font color="#E5E5E5">in our CI service but also on public</font>

493
00:20:20,070 --> 00:20:24,000
services like<font color="#E5E5E5"> Travis for instance this</font>

494
00:20:21,990 --> 00:20:26,130
way we allow you<font color="#E5E5E5"> to be developing on</font>

495
00:20:24,000 --> 00:20:28,679
your laptop<font color="#CCCCCC"> texting reframe on your</font>

496
00:20:26,130 --> 00:20:31,380
<font color="#E5E5E5">local laptop making the pull request to</font>

497
00:20:28,679 --> 00:20:33,270
get her<font color="#E5E5E5"> working on Travis the same test</font>

498
00:20:31,380 --> 00:20:35,400
<font color="#E5E5E5">that you have written for your laptop</font>

499
00:20:33,270 --> 00:20:37,020
and bring in the same<font color="#E5E5E5"> test to</font><font color="#CCCCCC"> our</font>

500
00:20:35,400 --> 00:20:41,460
computing<font color="#CCCCCC"> center</font><font color="#E5E5E5"> so your cross</font>

501
00:20:37,020 --> 00:20:44,100
boundaries<font color="#CCCCCC"> passionate and internally we</font>

502
00:20:41,460 --> 00:20:49,679
use<font color="#E5E5E5"> Jenkins so the usage is the same</font>

503
00:20:44,100 --> 00:20:51,629
that<font color="#CCCCCC"> we have for all for</font><font color="#E5E5E5"> all on test</font>

504
00:20:49,679 --> 00:20:54,059
<font color="#E5E5E5">right so for us it's really nice because</font>

505
00:20:51,630 --> 00:20:55,980
<font color="#E5E5E5">we can debug in the same interface so</font>

506
00:20:54,059 --> 00:20:58,049
this is how it looks like<font color="#E5E5E5"> internally at</font>

507
00:20:55,980 --> 00:21:00,330
<font color="#E5E5E5">CSS and as you know this is how it</font>

508
00:20:58,049 --> 00:21:02,400
looked<font color="#E5E5E5"> like on Travis right so we</font><font color="#CCCCCC"> can</font>

509
00:21:00,330 --> 00:21:05,280
actually<font color="#E5E5E5"> have a nice integration</font><font color="#CCCCCC"> and in</font>

510
00:21:02,400 --> 00:21:06,840
all these<font color="#E5E5E5"> cases so just to conclude I</font>

511
00:21:05,280 --> 00:21:09,870
know I speak<font color="#CCCCCC"> very</font><font color="#E5E5E5"> fast</font><font color="#CCCCCC"> and I have a</font>

512
00:21:06,840 --> 00:21:12,120
<font color="#E5E5E5">spoken very fast but just to summarize</font>

513
00:21:09,870 --> 00:21:16,020
the<font color="#CCCCCC"> take home message about what refrain</font>

514
00:21:12,120 --> 00:21:18,570
refrain is a regression test framework

515
00:21:16,020 --> 00:21:24,510
that allows us<font color="#CCCCCC"> to guarantee quality</font><font color="#E5E5E5"> of</font>

516
00:21:18,570 --> 00:21:26,939
our<font color="#E5E5E5"> software and written in Python 3 it</font>

517
00:21:24,510 --> 00:21:29,879
can be portable<font color="#CCCCCC"> across different</font>

518
00:21:26,940 --> 00:21:33,000
<font color="#E5E5E5">computing systems from your</font><font color="#CCCCCC"> laptop to</font>

519
00:21:29,880 --> 00:21:36,890
HPC systems can be<font color="#CCCCCC"> used in different</font><font color="#E5E5E5"> HPC</font>

520
00:21:33,000 --> 00:21:39,750
systems and gives you a nice way to

521
00:21:36,890 --> 00:21:42,809
<font color="#CCCCCC">verify where you</font><font color="#E5E5E5"> have failed</font><font color="#CCCCCC"> right to</font>

522
00:21:39,750 --> 00:21:45,330
<font color="#E5E5E5">get compressive</font><font color="#CCCCCC"> reports one more thing</font>

523
00:21:42,809 --> 00:21:47,760
that<font color="#CCCCCC"> we are missing or reframe is the</font>

524
00:21:45,330 --> 00:21:50,250
pendency of tests<font color="#E5E5E5"> so you can say test a</font>

525
00:21:47,760 --> 00:21:52,919
dependent<font color="#CCCCCC"> SB which depends on taxi</font>

526
00:21:50,250 --> 00:21:56,690
<font color="#E5E5E5">setsuna</font><font color="#CCCCCC"> it's on our</font><font color="#E5E5E5"> future directional</font>

527
00:21:52,919 --> 00:22:00,419
world map<font color="#E5E5E5"> and we have support to run any</font>

528
00:21:56,690 --> 00:22:02,700
common line inside we frame but<font color="#E5E5E5"> we only</font>

529
00:22:00,419 --> 00:22:04,980
say that we support something<font color="#E5E5E5"> if the</font>

530
00:22:02,700 --> 00:22:08,730
<font color="#E5E5E5">usage of that thing is really simple</font><font color="#CCCCCC"> so</font>

531
00:22:04,980 --> 00:22:10,649
<font color="#CCCCCC">today we do support container</font><font color="#E5E5E5"> CSS we run</font>

532
00:22:08,730 --> 00:22:12,220
container<font color="#CCCCCC"> testers yes yes but</font><font color="#E5E5E5"> we don't</font>

533
00:22:10,649 --> 00:22:15,639
<font color="#E5E5E5">say we support containers</font>

534
00:22:12,220 --> 00:22:17,409
the<font color="#CCCCCC"> users</font><font color="#E5E5E5"> you write too much commands</font><font color="#CCCCCC"> we</font>

535
00:22:15,640 --> 00:22:19,240
want we are working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> simplified</font>

536
00:22:17,409 --> 00:22:21,280
interface so<font color="#CCCCCC"> you can say this</font><font color="#E5E5E5"> is my</font>

537
00:22:19,240 --> 00:22:23,770
container this<font color="#E5E5E5"> is what I want to run and</font>

538
00:22:21,280 --> 00:22:26,230
run<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> to make everybody's life</font>

539
00:22:23,770 --> 00:22:27,668
easy<font color="#CCCCCC"> and we have been asked by one</font>

540
00:22:26,230 --> 00:22:30,549
<font color="#E5E5E5">computing</font><font color="#CCCCCC"> Center to have what's called</font>

541
00:22:27,669 --> 00:22:33,059
benchmarking mode so we can stress<font color="#E5E5E5"> the</font>

542
00:22:30,549 --> 00:22:35,230
system and get different reports only

543
00:22:33,059 --> 00:22:36,908
<font color="#E5E5E5">but this is very specific</font><font color="#CCCCCC"> to</font>

544
00:22:35,230 --> 00:22:38,980
supercomputing where you want to take

545
00:22:36,909 --> 00:22:43,570
you a machine<font color="#E5E5E5"> want to stress</font><font color="#CCCCCC"> to the</font>

546
00:22:38,980 --> 00:22:45,820
limits<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have some</font><font color="#E5E5E5"> partners</font><font color="#CCCCCC"> that we</font>

547
00:22:43,570 --> 00:22:47,470
have<font color="#E5E5E5"> been using me frame as you can see</font>

548
00:22:45,820 --> 00:22:48,879
<font color="#E5E5E5">and the majority of the</font><font color="#CCCCCC"> non</font>

549
00:22:47,470 --> 00:22:51,429
supercomputing centers<font color="#E5E5E5"> but you have some</font>

550
00:22:48,880 --> 00:22:53,919
companies involved and if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> me</font>

551
00:22:51,429 --> 00:22:55,960
<font color="#E5E5E5">framing any haven't told us please tell</font>

552
00:22:53,919 --> 00:22:59,260
<font color="#CCCCCC">us because we have many</font><font color="#E5E5E5"> people using</font><font color="#CCCCCC"> it</font>

553
00:22:55,960 --> 00:23:00,940
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we that we didn't we didn't know</font><font color="#E5E5E5"> so</font>

554
00:22:59,260 --> 00:23:02,530
we I want to acknowledge the<font color="#E5E5E5"> team that</font>

555
00:23:00,940 --> 00:23:04,840
has<font color="#E5E5E5"> been developed</font><font color="#CCCCCC"> reframe in telling</font>

556
00:23:02,530 --> 00:23:07,450
yourself yes as you can<font color="#E5E5E5"> see we have a</font>

557
00:23:04,840 --> 00:23:08,949
lot<font color="#CCCCCC"> of people so with because we frame</font>

558
00:23:07,450 --> 00:23:11,919
in regression<font color="#E5E5E5"> test is very important for</font>

559
00:23:08,950 --> 00:23:14,080
us so<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a project</font><font color="#CCCCCC"> I was not going</font>

560
00:23:11,919 --> 00:23:17,190
<font color="#E5E5E5">to go away in the near future for</font><font color="#CCCCCC"> sure</font>

561
00:23:14,080 --> 00:23:19,600
because HPC<font color="#E5E5E5"> centers they do require</font>

562
00:23:17,190 --> 00:23:21,520
regression testing with that I want<font color="#E5E5E5"> to</font>

563
00:23:19,600 --> 00:23:22,709
thank you for your attention<font color="#E5E5E5"> and any</font>

564
00:23:21,520 --> 00:23:29,889
questions

565
00:23:22,710 --> 00:23:29,890
[Applause]

566
00:23:33,490 --> 00:23:36,490
yep

567
00:23:38,190 --> 00:23:41,390
[Music]

568
00:23:49,050 --> 00:23:54,100
yeah so the question<font color="#CCCCCC"> was is it fairly</font>

569
00:23:51,700 --> 00:23:57,460
stood you can only write<font color="#CCCCCC"> tests in Python</font>

570
00:23:54,100 --> 00:24:00,159
actually<font color="#CCCCCC"> no I mean this test is listed</font>

571
00:23:57,460 --> 00:24:02,380
<font color="#CCCCCC">actually in the the the -</font><font color="#E5E5E5"> itself</font><font color="#CCCCCC"> in</font>

572
00:24:00,160 --> 00:24:03,910
reframes it in Python<font color="#E5E5E5"> but these</font>

573
00:24:02,380 --> 00:24:05,830
applications that<font color="#E5E5E5"> is our any video</font>

574
00:24:03,910 --> 00:24:07,420
application right so you can say<font color="#E5E5E5"> I</font><font color="#CCCCCC"> wanna</font>

575
00:24:05,830 --> 00:24:12,189
<font color="#CCCCCC">run this script</font><font color="#E5E5E5"> just put the script</font>

576
00:24:07,420 --> 00:24:14,710
<font color="#E5E5E5">there and you</font><font color="#CCCCCC"> gonna run</font><font color="#E5E5E5"> the script yeah</font>

577
00:24:12,190 --> 00:24:17,630
yeah<font color="#E5E5E5"> you still have to write</font><font color="#CCCCCC"> rap these</font>

578
00:24:14,710 --> 00:24:22,670
these interface yes

579
00:24:17,630 --> 00:24:22,670
[Music]

580
00:24:25,470 --> 00:24:28,589
[Music]

581
00:24:41,360 --> 00:24:46,100
so the comment was basically that by

582
00:24:44,150 --> 00:24:48,080
adding<font color="#E5E5E5"> DZ step of writing the class may</font>

583
00:24:46,100 --> 00:24:50,270
add some complexity<font color="#E5E5E5"> right because you</font>

584
00:24:48,080 --> 00:24:53,000
just had<font color="#E5E5E5"> the circuit before and now you</font>

585
00:24:50,270 --> 00:24:56,720
don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> yeah this</font><font color="#CCCCCC"> is true</font><font color="#E5E5E5"> in the</font>

586
00:24:53,000 --> 00:24:58,370
beginning of<font color="#CCCCCC"> reframe</font><font color="#E5E5E5"> by 2016 we we</font><font color="#CCCCCC"> share</font>

587
00:24:56,720 --> 00:25:00,500
<font color="#CCCCCC">the reframe a bit with operations and I</font>

588
00:24:58,370 --> 00:25:02,929
said<font color="#E5E5E5"> though this is very very difficult</font>

589
00:25:00,500 --> 00:25:04,880
to<font color="#E5E5E5"> use this is like we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to</font>

590
00:25:02,930 --> 00:25:06,800
have a PhD<font color="#E5E5E5"> in computer</font><font color="#CCCCCC"> science to use it</font>

591
00:25:04,880 --> 00:25:09,530
because<font color="#CCCCCC"> what's very</font><font color="#E5E5E5"> difficult to use so</font>

592
00:25:06,800 --> 00:25:11,560
<font color="#E5E5E5">we are slowly and incremental in the</font>

593
00:25:09,530 --> 00:25:14,870
interface to make<font color="#E5E5E5"> it as easy as possible</font>

594
00:25:11,560 --> 00:25:16,909
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> have some</font><font color="#CCCCCC"> some internal</font>

595
00:25:14,870 --> 00:25:19,989
ideas<font color="#E5E5E5"> that I don't know if I can share</font>

596
00:25:16,910 --> 00:25:24,350
about<font color="#E5E5E5"> simplify</font><font color="#CCCCCC"> these and using different</font>

597
00:25:19,990 --> 00:25:26,930
input methods but it's not there yet

598
00:25:24,350 --> 00:25:30,139
<font color="#CCCCCC">it's down roadmap</font><font color="#E5E5E5"> but it's not in the</font>

599
00:25:26,930 --> 00:25:32,390
near future and roadmap so<font color="#E5E5E5"> yes today's</font>

600
00:25:30,140 --> 00:25:35,540
do you have to do some<font color="#E5E5E5"> Python to have it</font>

601
00:25:32,390 --> 00:25:40,030
yeah you have this layer<font color="#E5E5E5"> pipe</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> in</font>

602
00:25:35,540 --> 00:25:40,030
there yeah yeah

603
00:25:41,890 --> 00:25:47,720
so just one<font color="#E5E5E5"> comment from</font><font color="#CCCCCC"> vassilis Delhi</font>

604
00:25:44,390 --> 00:25:52,309
developer briefing<font color="#E5E5E5"> so yeah I mean as</font><font color="#CCCCCC"> you</font>

605
00:25:47,720 --> 00:25:54,350
said it's it's it seems<font color="#E5E5E5"> like like</font><font color="#CCCCCC"> extra</font>

606
00:25:52,309 --> 00:25:57,350
complexity<font color="#E5E5E5"> to write Python class around</font>

607
00:25:54,350 --> 00:25:59,570
your<font color="#E5E5E5"> test but if you just have a single</font>

608
00:25:57,350 --> 00:26:02,689
type<font color="#CCCCCC"> of system to test</font><font color="#E5E5E5"> then that's fine</font>

609
00:25:59,570 --> 00:26:05,299
go for a<font color="#E5E5E5"> shell script but imagine you</font>

610
00:26:02,690 --> 00:26:07,640
have to test different on different<font color="#E5E5E5"> HP</font>

611
00:26:05,299 --> 00:26:12,049
systems then the complexity really

612
00:26:07,640 --> 00:26:14,270
becomes much higher and you want to

613
00:26:12,049 --> 00:26:15,860
abstract this away<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you don't</font>

614
00:26:14,270 --> 00:26:19,250
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> going to have in your script the</font>

615
00:26:15,860 --> 00:26:22,610
logic of<font color="#E5E5E5"> did my job finished</font>

616
00:26:19,250 --> 00:26:25,130
<font color="#CCCCCC">when did they finish we have</font><font color="#E5E5E5"> examples of</font>

617
00:26:22,610 --> 00:26:27,110
<font color="#E5E5E5">people developing software and they have</font>

618
00:26:25,130 --> 00:26:31,039
ended<font color="#E5E5E5"> up writing a thousands of line of</font>

619
00:26:27,110 --> 00:26:32,719
bar script just doing stuff that<font color="#E5E5E5"> we're</font>

620
00:26:31,039 --> 00:26:35,030
<font color="#E5E5E5">handling by the framework and they could</font>

621
00:26:32,720 --> 00:26:37,820
do the<font color="#E5E5E5"> same stuff with plenty lines of</font>

622
00:26:35,030 --> 00:26:40,100
Python code because<font color="#CCCCCC"> we have supported</font>

623
00:26:37,820 --> 00:26:42,740
the system part<font color="#E5E5E5"> versus the logic of the</font>

624
00:26:40,100 --> 00:26:44,570
test<font color="#CCCCCC"> that's the key advantage yes I</font>

625
00:26:42,740 --> 00:26:46,460
agree<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to learn</font><font color="#E5E5E5"> a bit of Python</font>

626
00:26:44,570 --> 00:26:48,620
<font color="#E5E5E5">write something with in the longer term</font>

627
00:26:46,460 --> 00:26:53,350
<font color="#CCCCCC">and</font><font color="#E5E5E5"> depending on what you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do</font>

628
00:26:48,620 --> 00:26:53,350
then it's it can really untie your hands

629
00:26:53,890 --> 00:26:57,460
any other questions

630
00:26:58,500 --> 00:27:05,829
<font color="#E5E5E5">No</font><font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much</font>

631
00:27:02,190 --> 00:27:05,829
[Applause]

