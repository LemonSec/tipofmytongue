1
00:00:05,400 --> 00:00:11,320
right<font color="#E5E5E5"> so hi everyone I'm here at office</font>

2
00:00:09,160 --> 00:00:16,029
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> researchers and we're both in</font>

3
00:00:11,320 --> 00:00:17,529
<font color="#CCCCCC">style as you</font><font color="#E5E5E5"> might have guessed and</font>

4
00:00:16,029 --> 00:00:19,810
today we're<font color="#CCCCCC"> here to discuss some</font>

5
00:00:17,529 --> 00:00:21,640
prototyping work which ourselves and a

6
00:00:19,810 --> 00:00:25,060
couple<font color="#E5E5E5"> others from Intel have been</font>

7
00:00:21,640 --> 00:00:27,250
working<font color="#CCCCCC"> aware for the last while</font><font color="#E5E5E5"> the</font>

8
00:00:25,060 --> 00:00:29,320
work itself has been kind<font color="#E5E5E5"> of driven by</font>

9
00:00:27,250 --> 00:00:31,480
some challenges and trends with cloud

10
00:00:29,320 --> 00:00:33,520
native particularly in the area of

11
00:00:31,480 --> 00:00:35,649
switching container to container or

12
00:00:33,520 --> 00:00:38,980
application application or east-west<font color="#E5E5E5"> as</font>

13
00:00:35,649 --> 00:00:41,170
it's<font color="#E5E5E5"> often refer to us</font><font color="#CCCCCC"> so Azure</font><font color="#E5E5E5"> guys an</font>

14
00:00:38,980 --> 00:00:43,419
agenda<font color="#CCCCCC"> we'll elaborate a bit more on</font>

15
00:00:41,170 --> 00:00:46,559
<font color="#CCCCCC">those cognitive</font><font color="#E5E5E5"> type problem statements</font>

16
00:00:43,420 --> 00:00:49,090
we discussed how we switch today

17
00:00:46,559 --> 00:00:52,000
<font color="#CCCCCC">east-west using current approaches to be</font>

18
00:00:49,090 --> 00:00:54,100
<font color="#E5E5E5">switching you will put forth our</font>

19
00:00:52,000 --> 00:00:55,629
proposed<font color="#E5E5E5"> scalability switching solution</font>

20
00:00:54,100 --> 00:00:57,609
and<font color="#CCCCCC"> discussed its many benefits</font>

21
00:00:55,629 --> 00:00:59,498
<font color="#CCCCCC">including you know just</font><font color="#E5E5E5"> for all</font>

22
00:00:57,609 --> 00:01:01,510
performance as well<font color="#E5E5E5"> as better</font>

23
00:00:59,499 --> 00:01:04,300
utilization of resources<font color="#CCCCCC"> and automatic</font>

24
00:01:01,510 --> 00:01:06,610
scaling will just<font color="#CCCCCC"> cause some next steps</font>

25
00:01:04,300 --> 00:01:10,000
<font color="#E5E5E5">and hopefully we have some time for Q&A</font>

26
00:01:06,610 --> 00:01:11,470
at the end<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in terms of</font><font color="#E5E5E5"> the problem</font>

27
00:01:10,000 --> 00:01:14,020
statements that we've been looking<font color="#CCCCCC"> at</font>

28
00:01:11,470 --> 00:01:15,580
<font color="#E5E5E5">and given them this is an SDN room I</font>

29
00:01:14,020 --> 00:01:17,470
<font color="#CCCCCC">expect most people are familiar in some</font>

30
00:01:15,580 --> 00:01:19,720
degree with<font color="#E5E5E5"> Sdn and in the comms world</font>

31
00:01:17,470 --> 00:01:22,150
with<font color="#CCCCCC"> nfe network function virtualization</font>

32
00:01:19,720 --> 00:01:24,730
<font color="#E5E5E5">which is very much</font><font color="#CCCCCC"> a move away from</font><font color="#E5E5E5"> the</font>

33
00:01:22,150 --> 00:01:26,470
<font color="#E5E5E5">screech appliances towards more</font>

34
00:01:24,730 --> 00:01:28,990
virtualized infrastructure where you've

35
00:01:26,470 --> 00:01:31,150
got<font color="#E5E5E5"> VMs deployed and cots</font><font color="#CCCCCC"> hardware</font>

36
00:01:28,990 --> 00:01:33,130
<font color="#CCCCCC">rather than custom boxes</font><font color="#E5E5E5"> but looking</font>

37
00:01:31,150 --> 00:01:35,680
beyond that<font color="#E5E5E5"> we then see further</font>

38
00:01:33,130 --> 00:01:37,869
<font color="#CCCCCC">transports</font><font color="#E5E5E5"> containerization in this sort</font>

39
00:01:35,680 --> 00:01:39,880
<font color="#E5E5E5">of cloud</font><font color="#CCCCCC"> native as</font><font color="#E5E5E5"> its referred to style</font>

40
00:01:37,870 --> 00:01:41,980
of deployment where you try where you

41
00:01:39,880 --> 00:01:43,660
take your monolithic<font color="#CCCCCC"> vm</font><font color="#E5E5E5"> which may be</font>

42
00:01:41,980 --> 00:01:45,850
using<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> say four cores us in the</font>

43
00:01:43,660 --> 00:01:47,740
diagram here<font color="#CCCCCC"> or</font><font color="#E5E5E5"> possibly a</font><font color="#CCCCCC"> ten-course</font>

44
00:01:45,850 --> 00:01:49,960
<font color="#E5E5E5">whatever it happens to be and tried to</font>

45
00:01:47,740 --> 00:01:52,509
<font color="#E5E5E5">subdivide that further into individual</font>

46
00:01:49,960 --> 00:01:54,880
containers<font color="#E5E5E5"> or</font><font color="#CCCCCC"> microservices formed into</font>

47
00:01:52,510 --> 00:01:56,800
service chains or intercommunicating

48
00:01:54,880 --> 00:01:58,539
containers of some<font color="#E5E5E5"> degree or other to</font>

49
00:01:56,800 --> 00:02:00,850
give you additional you know granularity

50
00:01:58,540 --> 00:02:02,950
of<font color="#E5E5E5"> deployment and scalability</font><font color="#CCCCCC"> okay</font>

51
00:02:00,850 --> 00:02:05,320
however if we look<font color="#CCCCCC"> at this from</font><font color="#E5E5E5"> a</font>

52
00:02:02,950 --> 00:02:06,940
networking point of view we see

53
00:02:05,320 --> 00:02:08,859
<font color="#E5E5E5">challenges in terms of the amount of</font>

54
00:02:06,940 --> 00:02:11,019
network<font color="#E5E5E5"> bandwidth required</font><font color="#CCCCCC"> if you look</font>

55
00:02:08,860 --> 00:02:12,970
at your you know monolithic<font color="#CCCCCC"> vm</font><font color="#E5E5E5"> as shown</font>

56
00:02:11,019 --> 00:02:15,220
<font color="#E5E5E5">here where you may have let's say</font><font color="#CCCCCC"> a 25</font>

57
00:02:12,970 --> 00:02:18,220
gig connection<font color="#CCCCCC"> coming</font><font color="#E5E5E5"> in to that if you</font>

58
00:02:15,220 --> 00:02:18,760
break<font color="#CCCCCC"> that</font><font color="#E5E5E5"> up into</font><font color="#CCCCCC"> 4 services for</font>

59
00:02:18,220 --> 00:02:20,590
service

60
00:02:18,760 --> 00:02:22,209
Tanner's you not have a whole bunch of

61
00:02:20,590 --> 00:02:23,829
additional<font color="#CCCCCC"> traffic running between them</font>

62
00:02:22,209 --> 00:02:25,659
that you have to<font color="#CCCCCC"> manage as well</font><font color="#E5E5E5"> so your</font>

63
00:02:23,829 --> 00:02:27,819
25 gig network may<font color="#CCCCCC"> suddenly shoot up to</font>

64
00:02:25,659 --> 00:02:30,879
<font color="#E5E5E5">needing a hundred gig or more</font><font color="#CCCCCC"> okay</font>

65
00:02:27,819 --> 00:02:33,429
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> east-west traffic as we</font>

66
00:02:30,879 --> 00:02:35,048
refer to it<font color="#E5E5E5"> so if you've</font><font color="#CCCCCC"> got you know</font>

67
00:02:33,430 --> 00:02:36,040
real<font color="#CCCCCC"> network out there and you're trying</font>

68
00:02:35,049 --> 00:02:37,420
<font color="#CCCCCC">to</font><font color="#E5E5E5"> send</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> out your network</font>

69
00:02:36,040 --> 00:02:39,400
infrastructure is<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> hugely have</font>

70
00:02:37,420 --> 00:02:41,530
to go up<font color="#E5E5E5"> but if you call</font><font color="#CCCCCC"> Katie's on</font>

71
00:02:39,400 --> 00:02:43,390
system we need<font color="#E5E5E5"> to then see about how we</font>

72
00:02:41,530 --> 00:02:45,909
<font color="#E5E5E5">handle switching between them on a</font>

73
00:02:43,390 --> 00:02:48,220
virtualized switch<font color="#E5E5E5"> within that platform</font>

74
00:02:45,909 --> 00:02:49,650
<font color="#CCCCCC">and how to handle</font><font color="#E5E5E5"> these east-west</font>

75
00:02:48,220 --> 00:02:51,609
connections on a single platform

76
00:02:49,650 --> 00:02:53,470
<font color="#CCCCCC">efficiently and with high performance</font>

77
00:02:51,609 --> 00:02:55,359
for networking and communications<font color="#E5E5E5"> is</font>

78
00:02:53,470 --> 00:03:01,799
really the<font color="#CCCCCC"> high level problem that we</font>

79
00:02:55,359 --> 00:03:03,970
set out to to look at today

80
00:03:01,799 --> 00:03:06,069
so current<font color="#E5E5E5"> approach is to be</font><font color="#CCCCCC"> switching</font>

81
00:03:03,970 --> 00:03:08,799
typically use a centralized model

82
00:03:06,069 --> 00:03:11,738
whereby<font color="#E5E5E5"> a dedicated number</font><font color="#CCCCCC"> of cores are</font>

83
00:03:08,799 --> 00:03:14,409
nailed<font color="#E5E5E5"> off essentially reserved for the</font>

84
00:03:11,739 --> 00:03:15,909
sole<font color="#CCCCCC"> purpose of virtual switching so for</font>

85
00:03:14,409 --> 00:03:18,250
example in this<font color="#CCCCCC"> diagram</font><font color="#E5E5E5"> here we've got</font>

86
00:03:15,909 --> 00:03:21,459
two<font color="#CCCCCC"> of those nails</font><font color="#E5E5E5"> off</font><font color="#CCCCCC"> the switch course</font>

87
00:03:18,250 --> 00:03:22,959
<font color="#E5E5E5">servicing for network functions and I</font>

88
00:03:21,459 --> 00:03:25,060
<font color="#E5E5E5">took</font><font color="#CCCCCC"> a control through one of those</font>

89
00:03:22,959 --> 00:03:28,780
research course would be<font color="#E5E5E5"> saying</font><font color="#CCCCCC"> we</font>

90
00:03:25,060 --> 00:03:30,459
<font color="#E5E5E5">received a package from</font><font color="#CCCCCC"> hi</font><font color="#E5E5E5"> sis</font>

91
00:03:28,780 --> 00:03:33,190
see that maybe it's got a feed<font color="#E5E5E5"> on title</font>

92
00:03:30,459 --> 00:03:35,079
<font color="#E5E5E5">to hundreds you consult</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> lookup</font>

93
00:03:33,190 --> 00:03:37,750
table see that there's a rule there to

94
00:03:35,079 --> 00:03:40,389
send those types of packets to network

95
00:03:37,750 --> 00:03:43,449
function<font color="#E5E5E5"> one so</font><font color="#CCCCCC"> you'd proceed</font><font color="#E5E5E5"> to execute</font>

96
00:03:40,389 --> 00:03:45,129
<font color="#CCCCCC">that action</font><font color="#E5E5E5"> so those types of operations</font>

97
00:03:43,449 --> 00:03:47,739
parsing classification

98
00:03:45,129 --> 00:03:50,230
<font color="#E5E5E5">they're pretty you know heavy duty and</font>

99
00:03:47,739 --> 00:03:52,000
as such your<font color="#CCCCCC"> feet</font><font color="#E5E5E5"> switch</font><font color="#CCCCCC"> cores are</font>

100
00:03:50,230 --> 00:03:54,399
typically going to<font color="#E5E5E5"> be pretty busy</font><font color="#CCCCCC"> and</font>

101
00:03:52,000 --> 00:03:57,340
then with this extra east-west traffic

102
00:03:54,400 --> 00:03:59,410
<font color="#CCCCCC">they're even busier</font><font color="#E5E5E5"> and then another</font>

103
00:03:57,340 --> 00:04:01,150
challenge<font color="#CCCCCC"> that cloud native brings is</font>

104
00:03:59,410 --> 00:04:03,430
that we've got this<font color="#E5E5E5"> kind of dynamic</font>

105
00:04:01,150 --> 00:04:05,980
environment with<font color="#CCCCCC"> workload spinning off</font>

106
00:04:03,430 --> 00:04:08,230
and down quite frequently<font color="#E5E5E5"> and there's a</font>

107
00:04:05,980 --> 00:04:09,909
challenge there where the underlying

108
00:04:08,230 --> 00:04:12,399
infrastructure the<font color="#CCCCCC"> research in this case</font>

109
00:04:09,909 --> 00:04:14,319
needs<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able to respond to that</font>

110
00:04:12,400 --> 00:04:17,168
increase or decrease in demand<font color="#E5E5E5"> pretty</font>

111
00:04:14,319 --> 00:04:19,298
instantly otherwise you run the<font color="#E5E5E5"> risk of</font>

112
00:04:17,168 --> 00:04:20,200
dropping<font color="#E5E5E5"> pockets or providing a poor</font>

113
00:04:19,298 --> 00:04:22,380
service tier

114
00:04:20,200 --> 00:04:24,430
your network functions<font color="#CCCCCC"> are your tenants</font>

115
00:04:22,380 --> 00:04:26,440
so there's<font color="#E5E5E5"> kind of a conflict here</font>

116
00:04:24,430 --> 00:04:28,930
<font color="#CCCCCC">between the static the</font><font color="#E5E5E5"> switch</font>

117
00:04:26,440 --> 00:04:30,940
configuration with these<font color="#CCCCCC"> Nanta cores and</font>

118
00:04:28,930 --> 00:04:33,180
the dynamic environment with these

119
00:04:30,940 --> 00:04:35,650
<font color="#E5E5E5">records spinning up and down and that</font>

120
00:04:33,180 --> 00:04:38,950
<font color="#CCCCCC">leads to</font><font color="#E5E5E5"> the operator deploying the</font>

121
00:04:35,650 --> 00:04:41,260
research with two<font color="#E5E5E5"> options really either</font>

122
00:04:38,950 --> 00:04:44,050
<font color="#E5E5E5">they try and scale up and down research</font>

123
00:04:41,260 --> 00:04:47,050
resources<font color="#E5E5E5"> as the work scales off and</font>

124
00:04:44,050 --> 00:04:48,880
<font color="#E5E5E5">down on the platform</font><font color="#CCCCCC"> but that's you</font><font color="#E5E5E5"> know</font>

125
00:04:47,050 --> 00:04:50,710
it's pretty heavy-handed it requires

126
00:04:48,880 --> 00:04:53,770
manual intervention nobody really wants

127
00:04:50,710 --> 00:04:56,380
that so the alternative then is to

128
00:04:53,770 --> 00:04:58,390
<font color="#CCCCCC">over-provision and just nail off a</font><font color="#E5E5E5"> ton</font>

129
00:04:56,380 --> 00:05:00,060
of research<font color="#E5E5E5"> boys at the beginning and</font>

130
00:04:58,390 --> 00:05:02,229
then that way<font color="#CCCCCC"> you know over the lifetime</font>

131
00:05:00,060 --> 00:05:04,390
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know work</font><font color="#CCCCCC"> loads has put off</font><font color="#E5E5E5"> and down</font>

132
00:05:02,230 --> 00:05:06,850
you'll<font color="#E5E5E5"> always deliver that service but</font>

133
00:05:04,390 --> 00:05:08,710
<font color="#E5E5E5">you've got a pretty poor</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

134
00:05:06,850 --> 00:05:11,260
<font color="#CCCCCC">utilization of</font><font color="#E5E5E5"> your resources</font><font color="#CCCCCC"> it's not</font>

135
00:05:08,710 --> 00:05:13,210
<font color="#E5E5E5">very efficient so there really does</font>

136
00:05:11,260 --> 00:05:15,400
exist<font color="#E5E5E5"> a need for a better solution</font>

137
00:05:13,210 --> 00:05:17,739
without<font color="#E5E5E5"> this manual intervention or</font>

138
00:05:15,400 --> 00:05:19,750
over-provisioning because neither of

139
00:05:17,740 --> 00:05:23,110
those options<font color="#E5E5E5"> are really cognitive</font>

140
00:05:19,750 --> 00:05:26,080
friendly so in order to get scalability

141
00:05:23,110 --> 00:05:28,330
in<font color="#E5E5E5"> the solution we then we're looking at</font>

142
00:05:26,080 --> 00:05:31,440
how<font color="#E5E5E5"> can we distribute our free switch</font>

143
00:05:28,330 --> 00:05:34,390
and try and co-locate the<font color="#CCCCCC"> v switching</font>

144
00:05:31,440 --> 00:05:36,040
requirements<font color="#E5E5E5"> alongside our workload the</font>

145
00:05:34,390 --> 00:05:37,330
idea being that yeah you may<font color="#E5E5E5"> have some</font>

146
00:05:36,040 --> 00:05:38,980
traffic<font color="#CCCCCC"> coming in out of the out of a</font>

147
00:05:37,330 --> 00:05:41,050
platform<font color="#CCCCCC"> but if you've got communicating</font>

148
00:05:38,980 --> 00:05:42,730
entities on that platform<font color="#CCCCCC"> each of them</font>

149
00:05:41,050 --> 00:05:45,100
is<font color="#CCCCCC"> gonna require a certain</font><font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> v</font>

150
00:05:42,730 --> 00:05:47,230
switching logic to it<font color="#E5E5E5"> so can we move</font>

151
00:05:45,100 --> 00:05:49,540
away from<font color="#E5E5E5"> having four cores on the</font>

152
00:05:47,230 --> 00:05:51,100
platform or three cores or<font color="#E5E5E5"> eight cores</font>

153
00:05:49,540 --> 00:05:53,590
or<font color="#E5E5E5"> whatever happens to be dedicated for</font>

154
00:05:51,100 --> 00:05:55,330
<font color="#E5E5E5">your V switch be it</font><font color="#CCCCCC"> OVS DB decay or</font>

155
00:05:53,590 --> 00:05:56,799
whatever it<font color="#CCCCCC"> happens to be and</font><font color="#E5E5E5"> instead</font>

156
00:05:55,330 --> 00:06:00,789
put a little<font color="#E5E5E5"> bit of V switching</font>

157
00:05:56,800 --> 00:06:02,500
alongside each container on each core as

158
00:06:00,790 --> 00:06:05,350
shown on<font color="#E5E5E5"> the diagram on the</font><font color="#CCCCCC"> right there</font>

159
00:06:02,500 --> 00:06:08,110
<font color="#E5E5E5">so in that way we can then scale easier</font>

160
00:06:05,350 --> 00:06:10,120
<font color="#E5E5E5">so if you have a workload that's using 8</font>

161
00:06:08,110 --> 00:06:12,100
cores<font color="#E5E5E5"> and your traffic ratio in your</font>

162
00:06:10,120 --> 00:06:14,140
network<font color="#CCCCCC"> goes up and you</font><font color="#E5E5E5"> no need</font><font color="#CCCCCC"> to spawn</font>

163
00:06:12,100 --> 00:06:16,930
off an<font color="#CCCCCC"> additional</font><font color="#E5E5E5"> 4 or further</font><font color="#CCCCCC"> eight</font>

164
00:06:14,140 --> 00:06:19,120
instances<font color="#E5E5E5"> you are able to scale up a V</font>

165
00:06:16,930 --> 00:06:23,170
switching logic<font color="#E5E5E5"> alongside that by</font>

166
00:06:19,120 --> 00:06:25,240
co-locating them the if we<font color="#CCCCCC"> managed to</font>

167
00:06:23,170 --> 00:06:28,870
<font color="#E5E5E5">achieve this</font><font color="#CCCCCC"> ok there are</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> other</font>

168
00:06:25,240 --> 00:06:31,540
benefits<font color="#CCCCCC"> we can get in terms of</font><font color="#E5E5E5"> lower</font>

169
00:06:28,870 --> 00:06:33,310
level efficiencies for<font color="#E5E5E5"> moving the</font>

170
00:06:31,540 --> 00:06:33,740
packets from<font color="#CCCCCC"> one container or one</font>

171
00:06:33,310 --> 00:06:35,810
<font color="#E5E5E5">applica</font>

172
00:06:33,740 --> 00:06:37,430
to another<font color="#E5E5E5"> so if we look how we at how</font>

173
00:06:35,810 --> 00:06:39,500
we do this<font color="#CCCCCC"> right now if we want to</font><font color="#E5E5E5"> send</font>

174
00:06:37,430 --> 00:06:42,170
a<font color="#CCCCCC"> packet from container one encore</font><font color="#E5E5E5"> one</font>

175
00:06:39,500 --> 00:06:44,660
<font color="#E5E5E5">to container</font><font color="#CCCCCC"> - encore - we actually have</font>

176
00:06:42,170 --> 00:06:46,850
to<font color="#CCCCCC"> take two hops with that one packet</font>

177
00:06:44,660 --> 00:06:49,700
you have<font color="#CCCCCC"> to send</font><font color="#E5E5E5"> the packet from</font><font color="#CCCCCC"> core</font>

178
00:06:46,850 --> 00:06:51,430
<font color="#E5E5E5">one to your V switching core and then</font>

179
00:06:49,700 --> 00:06:54,080
from<font color="#E5E5E5"> your V switching core to core</font><font color="#CCCCCC"> -</font>

180
00:06:51,430 --> 00:06:56,240
okay so there's two<font color="#CCCCCC"> movements</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> data</font>

181
00:06:54,080 --> 00:06:58,400
<font color="#E5E5E5">and possibly two packet copies involved</font>

182
00:06:56,240 --> 00:07:01,430
there<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> this is just an</font>

183
00:06:58,400 --> 00:07:03,229
inefficiency<font color="#E5E5E5"> any cycles that</font><font color="#CCCCCC"> you spend</font>

184
00:07:01,430 --> 00:07:05,330
<font color="#E5E5E5">any CPU cycles you spend in order</font>

185
00:07:03,230 --> 00:07:07,520
copying the data<font color="#E5E5E5"> or trying</font><font color="#CCCCCC"> to read it</font>

186
00:07:05,330 --> 00:07:09,169
from<font color="#E5E5E5"> remote caches or any of that it's</font>

187
00:07:07,520 --> 00:07:10,880
all<font color="#E5E5E5"> just pure overhead it's not actually</font>

188
00:07:09,170 --> 00:07:14,090
<font color="#E5E5E5">doing the real work you want to do on</font>

189
00:07:10,880 --> 00:07:16,250
the packet<font color="#E5E5E5"> whereas ideally we'd much</font>

190
00:07:14,090 --> 00:07:18,469
rather a situation like this where we

191
00:07:16,250 --> 00:07:22,220
<font color="#CCCCCC">can actually send the packet</font><font color="#E5E5E5"> straight</font>

192
00:07:18,470 --> 00:07:24,680
from<font color="#CCCCCC"> Core 1 to core - the challenge here</font>

193
00:07:22,220 --> 00:07:26,630
is<font color="#E5E5E5"> how do you do that while</font><font color="#CCCCCC"> still</font>

194
00:07:24,680 --> 00:07:28,550
maintaining some<font color="#E5E5E5"> degree of</font><font color="#CCCCCC"> security</font>

195
00:07:26,630 --> 00:07:30,530
container isolation all that good<font color="#CCCCCC"> stuff</font>

196
00:07:28,550 --> 00:07:33,410
that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to have we have restricted</font>

197
00:07:30,530 --> 00:07:35,150
<font color="#E5E5E5">resources</font><font color="#CCCCCC"> like our lookup tables</font><font color="#E5E5E5"> or you</font>

198
00:07:33,410 --> 00:07:37,160
know the interfaces themselves<font color="#CCCCCC"> you know</font>

199
00:07:35,150 --> 00:07:38,479
interface rings for<font color="#CCCCCC"> vertol</font><font color="#E5E5E5"> or whatever</font>

200
00:07:37,160 --> 00:07:40,490
your interface type happens to be those

201
00:07:38,480 --> 00:07:43,070
<font color="#E5E5E5">all need to be protected so if you put</font>

202
00:07:40,490 --> 00:07:45,710
those<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the container</font><font color="#E5E5E5"> then we're</font>

203
00:07:43,070 --> 00:07:48,050
<font color="#E5E5E5">giving an untrusted application access</font>

204
00:07:45,710 --> 00:07:50,000
to restricted<font color="#CCCCCC"> resources</font><font color="#E5E5E5"> so that's a</font>

205
00:07:48,050 --> 00:07:51,890
no-go<font color="#CCCCCC"> if you put them outside the</font>

206
00:07:50,000 --> 00:07:55,610
container<font color="#E5E5E5"> then how do they get accessed</font>

207
00:07:51,890 --> 00:07:57,710
on the<font color="#CCCCCC"> core how can we do that</font><font color="#E5E5E5"> so even</font>

208
00:07:55,610 --> 00:07:59,480
though I come<font color="#E5E5E5"> from a deep UK background</font>

209
00:07:57,710 --> 00:08:01,609
as<font color="#E5E5E5"> some of you may know and work in</font>

210
00:07:59,480 --> 00:08:03,560
<font color="#E5E5E5">userspace all the</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> I think in this</font>

211
00:08:01,610 --> 00:08:05,240
case for containers especially<font color="#E5E5E5"> the</font>

212
00:08:03,560 --> 00:08:07,760
answer has got<font color="#E5E5E5"> to be in the kernel</font>

213
00:08:05,240 --> 00:08:09,620
<font color="#E5E5E5">itself because the kernel on the</font>

214
00:08:07,760 --> 00:08:12,020
container in<font color="#E5E5E5"> the container world the</font>

215
00:08:09,620 --> 00:08:14,960
kernel<font color="#E5E5E5"> is actually the host kernel okay</font>

216
00:08:12,020 --> 00:08:16,310
<font color="#E5E5E5">it's shared across all these and all the</font>

217
00:08:14,960 --> 00:08:18,560
various containers on the system and

218
00:08:16,310 --> 00:08:20,420
<font color="#E5E5E5">it's also there for sensors on the host</font>

219
00:08:18,560 --> 00:08:22,460
is the trusted<font color="#E5E5E5"> a trusted environment</font>

220
00:08:20,420 --> 00:08:26,060
where we can put things<font color="#E5E5E5"> like look up</font>

221
00:08:22,460 --> 00:08:28,310
tables and<font color="#CCCCCC"> vertol ports or</font><font color="#E5E5E5"> rings of</font>

222
00:08:26,060 --> 00:08:31,490
<font color="#E5E5E5">whatever connection type we're using so</font>

223
00:08:28,310 --> 00:08:33,740
we could switch in on the core from<font color="#E5E5E5"> user</font>

224
00:08:31,490 --> 00:08:36,110
<font color="#CCCCCC">space to kernel space to actually do our</font>

225
00:08:33,740 --> 00:08:37,760
<font color="#E5E5E5">packet lookups and packet transfers and</font>

226
00:08:36,110 --> 00:08:41,030
what we look to do was we look to do a

227
00:08:37,760 --> 00:08:42,830
prototype of this<font color="#E5E5E5"> set off to see just</font>

228
00:08:41,030 --> 00:08:44,780
how it would perform compared to the

229
00:08:42,830 --> 00:08:46,400
centralized<font color="#E5E5E5"> V switch model we</font>

230
00:08:44,780 --> 00:08:47,010
implemented this using two DVD<font color="#E5E5E5"> K</font>

231
00:08:46,400 --> 00:08:48,779
application

232
00:08:47,010 --> 00:08:52,050
that need to talk to each other<font color="#E5E5E5"> on to</font>

233
00:08:48,779 --> 00:08:54,660
remote course<font color="#E5E5E5"> so how we set this up well</font>

234
00:08:52,050 --> 00:08:56,040
as in<font color="#E5E5E5"> most cases whenever you need to</font>

235
00:08:54,660 --> 00:08:58,170
<font color="#E5E5E5">set up</font><font color="#CCCCCC"> your network interface you need</font>

236
00:08:56,040 --> 00:09:00,060
to register<font color="#E5E5E5"> some packet buffers if we</font>

237
00:08:58,170 --> 00:09:02,040
want to<font color="#E5E5E5"> do a</font><font color="#CCCCCC"> direct core</font><font color="#E5E5E5"> one to core to</font>

238
00:09:00,060 --> 00:09:04,109
transfer<font color="#E5E5E5"> we need to make sure those</font>

239
00:09:02,040 --> 00:09:06,300
<font color="#E5E5E5">buffers are accessible from core one in</font>

240
00:09:04,110 --> 00:09:08,490
the kernel<font color="#CCCCCC"> so what we do</font>

241
00:09:06,300 --> 00:09:10,979
whenever<font color="#E5E5E5"> the second receiver container</font>

242
00:09:08,490 --> 00:09:13,019
starts<font color="#E5E5E5"> off and starts configuring its</font>

243
00:09:10,980 --> 00:09:14,880
interface and registers<font color="#E5E5E5"> as buffers we</font>

244
00:09:13,019 --> 00:09:16,980
then duplicate those buffer mappings

245
00:09:14,880 --> 00:09:19,350
down into the kernel<font color="#E5E5E5"> space</font><font color="#CCCCCC"> this means</font>

246
00:09:16,980 --> 00:09:21,000
<font color="#E5E5E5">that any core when running in kernel</font>

247
00:09:19,350 --> 00:09:22,860
space<font color="#E5E5E5"> can write to those buffers</font><font color="#CCCCCC"> to copy</font>

248
00:09:21,000 --> 00:09:24,420
packet in but there's<font color="#E5E5E5"> still isolated</font>

249
00:09:22,860 --> 00:09:26,250
<font color="#E5E5E5">from from the container because</font><font color="#CCCCCC"> the</font>

250
00:09:24,420 --> 00:09:29,760
containers<font color="#E5E5E5"> in user</font><font color="#CCCCCC"> space and it still</font>

251
00:09:26,250 --> 00:09:30,990
<font color="#E5E5E5">doesn't have access</font><font color="#CCCCCC"> to them then after</font>

252
00:09:29,760 --> 00:09:33,089
that setup<font color="#E5E5E5"> is done we</font><font color="#CCCCCC"> can start</font>

253
00:09:30,990 --> 00:09:35,610
transferring packets pretty easily<font color="#E5E5E5"> we</font>

254
00:09:33,089 --> 00:09:37,589
<font color="#E5E5E5">can have our transmitting container make</font>

255
00:09:35,610 --> 00:09:39,570
some sort<font color="#CCCCCC"> of system call</font><font color="#E5E5E5"> in our initial</font>

256
00:09:37,589 --> 00:09:42,750
prototype we just use dioctyl for ease

257
00:09:39,570 --> 00:09:45,779
of<font color="#CCCCCC"> use</font><font color="#E5E5E5"> make a system call</font><font color="#CCCCCC"> which switches</font>

258
00:09:42,750 --> 00:09:47,339
us on that core into kernel mode and one

259
00:09:45,779 --> 00:09:49,829
particular benefit we<font color="#CCCCCC"> have here is that</font>

260
00:09:47,339 --> 00:09:51,420
<font color="#CCCCCC">the</font><font color="#E5E5E5"> packet we are sending is already in</font>

261
00:09:49,829 --> 00:09:53,550
all our local caches because<font color="#E5E5E5"> we haven't</font>

262
00:09:51,420 --> 00:09:55,709
actually<font color="#E5E5E5"> switched core we've just moved</font>

263
00:09:53,550 --> 00:09:57,420
from user<font color="#E5E5E5"> to kernel on that one core so</font>

264
00:09:55,709 --> 00:09:59,369
<font color="#E5E5E5">we've got a lot of benefits</font><font color="#CCCCCC"> from cache</font>

265
00:09:57,420 --> 00:10:01,529
locality<font color="#CCCCCC"> from using such a scheme as</font>

266
00:09:59,370 --> 00:10:04,470
this anyway once we're in kernel<font color="#CCCCCC"> space</font>

267
00:10:01,529 --> 00:10:06,510
then we can look to do our lookups we

268
00:10:04,470 --> 00:10:08,160
can have look-up tables<font color="#E5E5E5"> in the kernel</font>

269
00:10:06,510 --> 00:10:10,740
configured by some external entity

270
00:10:08,160 --> 00:10:13,829
whatever<font color="#CCCCCC"> that happens to be</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can</font>

271
00:10:10,740 --> 00:10:15,600
do do<font color="#CCCCCC"> those table lookups in our</font>

272
00:10:13,829 --> 00:10:18,660
prototypes we were actually<font color="#CCCCCC"> working off</font>

273
00:10:15,600 --> 00:10:21,060
<font color="#CCCCCC">OVS</font><font color="#E5E5E5"> code base</font><font color="#CCCCCC"> so we actually transferred</font>

274
00:10:18,660 --> 00:10:23,430
into kernel space<font color="#E5E5E5"> the DP CLS the table</font>

275
00:10:21,060 --> 00:10:25,888
lookup routines from<font color="#CCCCCC"> OVS to have some</font>

276
00:10:23,430 --> 00:10:27,750
real<font color="#CCCCCC"> v switching logic in there and then</font>

277
00:10:25,889 --> 00:10:29,399
we<font color="#E5E5E5"> can do a single copy from source</font><font color="#CCCCCC"> core</font>

278
00:10:27,750 --> 00:10:32,010
to destination core<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> need to do</font>

279
00:10:29,399 --> 00:10:33,750
two copies our initial our initial

280
00:10:32,010 --> 00:10:35,490
initial prototypes actually did<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what</font>

281
00:10:33,750 --> 00:10:37,139
we managed to get<font color="#E5E5E5"> it down</font><font color="#CCCCCC"> to one using</font>

282
00:10:35,490 --> 00:10:40,589
the memory<font color="#E5E5E5"> mapping seam scheme described</font>

283
00:10:37,139 --> 00:10:42,269
here<font color="#E5E5E5"> so in that case we can copy</font>

284
00:10:40,589 --> 00:10:44,069
straight<font color="#E5E5E5"> into the destination buffer</font>

285
00:10:42,269 --> 00:10:46,680
which then has the advantage that it

286
00:10:44,069 --> 00:10:48,240
<font color="#CCCCCC">potentially allows container 2 to</font>

287
00:10:46,680 --> 00:10:50,729
receive that<font color="#E5E5E5"> packet without having to</font>

288
00:10:48,240 --> 00:10:51,990
make a system call itself because system

289
00:10:50,730 --> 00:10:54,630
calls<font color="#E5E5E5"> are not the cheapest thing in the</font>

290
00:10:51,990 --> 00:10:57,510
world<font color="#E5E5E5"> and but one thing we do know from</font>

291
00:10:54,630 --> 00:10:59,160
<font color="#CCCCCC">DP TK and other high-performance packet</font>

292
00:10:57,510 --> 00:11:00,329
processing environments is if you have

293
00:10:59,160 --> 00:11:00,719
expensive<font color="#E5E5E5"> operations</font>

294
00:11:00,329 --> 00:11:02,370
you

295
00:11:00,720 --> 00:11:04,139
can howl schemes to<font color="#E5E5E5"> get around</font><font color="#CCCCCC"> amusing</font>

296
00:11:02,370 --> 00:11:05,850
amortization<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's exactly what</font>

297
00:11:04,139 --> 00:11:08,279
we're looking<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> here if you have to</font>

298
00:11:05,850 --> 00:11:11,430
<font color="#CCCCCC">make a system</font><font color="#E5E5E5"> call to transfer</font><font color="#CCCCCC"> 32</font>

299
00:11:08,279 --> 00:11:13,800
packets from core 1 2 core - it's not

300
00:11:11,430 --> 00:11:15,388
actually<font color="#CCCCCC"> so</font><font color="#E5E5E5"> bad especially</font><font color="#CCCCCC"> when you</font>

301
00:11:13,800 --> 00:11:17,639
compare<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> less they using</font><font color="#CCCCCC"> the V host</font>

302
00:11:15,389 --> 00:11:19,470
virtio combination you know<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cost of</font>

303
00:11:17,639 --> 00:11:23,720
one system call every<font color="#E5E5E5"> 32 packets in</font>

304
00:11:19,470 --> 00:11:23,720
terms of cycles is not that significant

305
00:11:23,779 --> 00:11:30,029
<font color="#CCCCCC">okay so how does</font><font color="#E5E5E5"> our solution perform so</font>

306
00:11:28,379 --> 00:11:32,699
for our benchmarks we took a fixed

307
00:11:30,029 --> 00:11:35,040
resource pool of 12 cores<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> fixed</font>

308
00:11:32,699 --> 00:11:37,019
record and at a<font color="#CCCCCC"> very high level</font><font color="#E5E5E5"> we try</font>

309
00:11:35,040 --> 00:11:39,990
<font color="#E5E5E5">and run as many of these records on our</font>

310
00:11:37,019 --> 00:11:41,370
<font color="#E5E5E5">12 cores as we can</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> looking at the</font>

311
00:11:39,990 --> 00:11:44,160
record<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a little bit more detail</font>

312
00:11:41,370 --> 00:11:47,009
<font color="#CCCCCC">we've got two applications each are</font>

313
00:11:44,160 --> 00:11:49,620
using one core<font color="#E5E5E5"> to encrypt and forward</font>

314
00:11:47,009 --> 00:11:52,860
<font color="#CCCCCC">packets</font><font color="#E5E5E5"> between pairs of physical and</font>

315
00:11:49,620 --> 00:11:54,360
virtual interfaces<font color="#E5E5E5"> and then the part</font>

316
00:11:52,860 --> 00:11:57,389
that we're particularly<font color="#CCCCCC"> interested in is</font>

317
00:11:54,360 --> 00:11:59,639
<font color="#CCCCCC">that we switch packets</font><font color="#E5E5E5"> east-west between</font>

318
00:11:57,389 --> 00:12:02,540
our two virtual interfaces using<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font>

319
00:11:59,639 --> 00:12:05,670
<font color="#CCCCCC">two different V switch implementations</font>

320
00:12:02,540 --> 00:12:08,339
so the first<font color="#E5E5E5"> implementation is a</font><font color="#CCCCCC"> well</font>

321
00:12:05,670 --> 00:12:12,120
<font color="#CCCCCC">known</font><font color="#E5E5E5"> DVD</font><font color="#CCCCCC"> kbase centralized we switch</font>

322
00:12:08,339 --> 00:12:14,420
and that<font color="#CCCCCC"> of course uses an extra core to</font>

323
00:12:12,120 --> 00:12:17,370
perform much switching operation<font color="#E5E5E5"> and</font>

324
00:12:14,420 --> 00:12:19,860
then the second is a prototype<font color="#E5E5E5"> of the</font>

325
00:12:17,370 --> 00:12:22,470
solution we just described<font color="#E5E5E5"> which does</font>

326
00:12:19,860 --> 00:12:24,990
not<font color="#E5E5E5"> require</font><font color="#CCCCCC"> the extra core because we've</font>

327
00:12:22,470 --> 00:12:28,889
got<font color="#CCCCCC"> our or switching functionality open</font>

328
00:12:24,990 --> 00:12:31,410
the director course so we chose<font color="#E5E5E5"> that the</font>

329
00:12:28,889 --> 00:12:34,230
crypto<font color="#CCCCCC"> workout because its cycle</font>

330
00:12:31,410 --> 00:12:36,600
intensive and that way when we move<font color="#E5E5E5"> our</font>

331
00:12:34,230 --> 00:12:38,939
<font color="#CCCCCC">you switching</font><font color="#E5E5E5"> up on the same core as the</font>

332
00:12:36,600 --> 00:12:41,040
the<font color="#E5E5E5"> workload you can kind of see the the</font>

333
00:12:38,939 --> 00:12:42,839
penalty that<font color="#E5E5E5"> you have to pay you take</font>

334
00:12:41,040 --> 00:12:44,459
<font color="#CCCCCC">cycles away from your records and with a</font>

335
00:12:42,839 --> 00:12:46,589
<font color="#E5E5E5">group</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> crypto were killed as like as</font>

336
00:12:44,459 --> 00:12:48,839
we take away would<font color="#CCCCCC"> be you know critical</font>

337
00:12:46,589 --> 00:12:50,390
<font color="#E5E5E5">to application performance say as</font>

338
00:12:48,839 --> 00:12:53,149
opposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> if you were to use something</font>

339
00:12:50,390 --> 00:12:55,250
DVD<font color="#CCCCCC"> Ches Ches PM de are some simple i/o</font>

340
00:12:53,149 --> 00:12:57,110
forwarding up the cycles you take away

341
00:12:55,250 --> 00:12:58,490
<font color="#E5E5E5">wouldn't be as you know Chris go to</font>

342
00:12:57,110 --> 00:13:01,040
performance<font color="#E5E5E5"> and you wouldn't take as</font><font color="#CCCCCC"> big</font>

343
00:12:58,490 --> 00:13:04,519
of a hit<font color="#E5E5E5"> so it's just kind of to make</font>

344
00:13:01,040 --> 00:13:06,529
the benchmark a bit more transparent<font color="#E5E5E5"> but</font>

345
00:13:04,519 --> 00:13:10,160
anyways to generate our data then we

346
00:13:06,529 --> 00:13:12,589
sent in<font color="#CCCCCC"> onyx packets at 40 gig</font><font color="#E5E5E5"> migrated</font>

347
00:13:10,160 --> 00:13:14,750
into both ends<font color="#E5E5E5"> of the pipeline and we</font>

348
00:13:12,589 --> 00:13:19,970
measure what<font color="#E5E5E5"> we receive back and compare</font>

349
00:13:14,750 --> 00:13:22,310
for both implementations okay so the

350
00:13:19,970 --> 00:13:25,070
left here is<font color="#E5E5E5"> our centralized we switch</font>

351
00:13:22,310 --> 00:13:28,130
configuration and<font color="#E5E5E5"> you can see we're</font>

352
00:13:25,070 --> 00:13:30,680
using<font color="#CCCCCC"> each course to run four of the two</font>

353
00:13:28,130 --> 00:13:33,019
core<font color="#CCCCCC"> rec loads and the remaining four</font>

354
00:13:30,680 --> 00:13:35,839
<font color="#E5E5E5">cores in orange here our dedicated</font>

355
00:13:33,019 --> 00:13:37,579
<font color="#CCCCCC">research cores</font><font color="#E5E5E5"> such a kind</font><font color="#CCCCCC"> of rephrase</font>

356
00:13:35,839 --> 00:13:40,160
<font color="#E5E5E5">last we're running for my clothes and</font>

357
00:13:37,579 --> 00:13:42,500
<font color="#E5E5E5">we've got one nan top corporate clothes</font>

358
00:13:40,160 --> 00:13:45,230
and that uses our full<font color="#CCCCCC"> twelve core</font>

359
00:13:42,500 --> 00:13:47,779
budget and then for the distributed

360
00:13:45,230 --> 00:13:49,670
<font color="#CCCCCC">lease which you'll see</font><font color="#E5E5E5"> to run for two</font>

361
00:13:47,779 --> 00:13:51,470
workloads we only need to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> eight</font>

362
00:13:49,670 --> 00:13:53,750
cores<font color="#E5E5E5"> because of course we're not just</font>

363
00:13:51,470 --> 00:13:55,130
nailing<font color="#E5E5E5"> all you know</font><font color="#CCCCCC"> dedicated piece of</font>

364
00:13:53,750 --> 00:13:58,610
course of<font color="#E5E5E5"> these which</font><font color="#CCCCCC"> is running on the</font>

365
00:13:55,130 --> 00:14:01,250
<font color="#E5E5E5">same the same core is the</font><font color="#CCCCCC"> worker that's</font>

366
00:13:58,610 --> 00:14:03,320
of<font color="#E5E5E5"> course comes in a price we're taking</font>

367
00:14:01,250 --> 00:14:05,750
<font color="#E5E5E5">precious seconds away from a wrecked</font>

368
00:14:03,320 --> 00:14:08,269
load we're not doing as much<font color="#CCCCCC"> work</font><font color="#E5E5E5"> and in</font>

369
00:14:05,750 --> 00:14:09,920
this case the<font color="#E5E5E5"> hash is ten percent</font><font color="#CCCCCC"> so</font>

370
00:14:08,269 --> 00:14:13,070
we're down<font color="#E5E5E5"> ten percent in the</font>

371
00:14:09,920 --> 00:14:15,050
<font color="#CCCCCC">distributed piece which case boss we've</font>

372
00:14:13,070 --> 00:14:17,120
got a thirty<font color="#E5E5E5"> three percent saving in</font>

373
00:14:15,050 --> 00:14:20,810
course we're using<font color="#E5E5E5"> eight cores versus 12</font>

374
00:14:17,120 --> 00:14:21,699
so the ten percentage<font color="#E5E5E5"> doesn't seem as as</font>

375
00:14:20,810 --> 00:14:24,868
big

376
00:14:21,699 --> 00:14:27,939
consider that<font color="#E5E5E5"> the core utilization and</font>

377
00:14:24,869 --> 00:14:30,100
then an interesting<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is to</font>

378
00:14:27,939 --> 00:14:32,049
take those<font color="#CCCCCC"> four Michael Kors and do</font>

379
00:14:30,100 --> 00:14:35,439
something useful<font color="#E5E5E5"> with them like run two</font>

380
00:14:32,049 --> 00:14:37,149
more<font color="#E5E5E5"> wet clothes and then in this case</font>

381
00:14:35,439 --> 00:14:38,649
then<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> kind of compare at a system</font>

382
00:14:37,149 --> 00:14:42,850
level you know<font color="#E5E5E5"> twelve quarries versus</font>

383
00:14:38,649 --> 00:14:45,429
twelve<font color="#E5E5E5"> both solutions</font><font color="#CCCCCC"> and in this</font><font color="#E5E5E5"> case</font>

384
00:14:42,850 --> 00:14:47,649
the distributed research outperforms<font color="#CCCCCC"> the</font>

385
00:14:45,429 --> 00:14:50,699
centralized research like<font color="#E5E5E5"> thirty one</font>

386
00:14:47,649 --> 00:14:54,100
percent<font color="#E5E5E5"> when you use the full resources</font>

387
00:14:50,699 --> 00:14:57,279
<font color="#E5E5E5">so the kind</font><font color="#CCCCCC"> of key</font><font color="#E5E5E5"> takeaway from these</font>

388
00:14:54,100 --> 00:14:59,350
benchmarks would be that you do suffer

389
00:14:57,279 --> 00:15:01,359
at<font color="#CCCCCC"> hits that you're</font><font color="#E5E5E5"> your kind of</font>

390
00:14:59,350 --> 00:15:03,399
workload level and your<font color="#CCCCCC"> obvious</font>

391
00:15:01,359 --> 00:15:04,839
performance<font color="#E5E5E5"> but when you take a step</font>

392
00:15:03,399 --> 00:15:07,480
<font color="#E5E5E5">back and look at the bigger picture at</font>

393
00:15:04,839 --> 00:15:09,939
your<font color="#E5E5E5"> resource budget and kind of use my</font>

394
00:15:07,480 --> 00:15:11,769
station and<font color="#CCCCCC"> all Asajj</font><font color="#E5E5E5"> they distribute</font>

395
00:15:09,939 --> 00:15:16,988
fees which doesn't<font color="#E5E5E5"> here to be the more</font>

396
00:15:11,769 --> 00:15:20,769
compelling option of the two so having

397
00:15:16,989 --> 00:15:23,429
<font color="#CCCCCC">heard all - just some initial next steps</font>

398
00:15:20,769 --> 00:15:27,160
that<font color="#E5E5E5"> we've that we're looking</font><font color="#CCCCCC"> at doing</font>

399
00:15:23,429 --> 00:15:29,019
so we've done an initial<font color="#CCCCCC"> prototype to</font>

400
00:15:27,160 --> 00:15:31,419
show there is potential benefit here and

401
00:15:29,019 --> 00:15:33,220
that we can can gain from<font color="#E5E5E5"> you know</font>

402
00:15:31,419 --> 00:15:35,739
putting<font color="#E5E5E5"> the district the</font><font color="#CCCCCC"> V switching</font>

403
00:15:33,220 --> 00:15:37,629
logic alongside the workload and it

404
00:15:35,739 --> 00:15:38,829
actually<font color="#E5E5E5"> gives us some other interesting</font>

405
00:15:37,629 --> 00:15:41,739
benefits<font color="#CCCCCC"> in terms of you know</font>

406
00:15:38,829 --> 00:15:43,329
dynamically it dynamically balances how

407
00:15:41,739 --> 00:15:44,980
you spend your cycles if you need to do

408
00:15:43,329 --> 00:15:47,049
a lot of i/o you spend more time inside

409
00:15:44,980 --> 00:15:48,609
<font color="#CCCCCC">kernel doing switching if you don't</font>

410
00:15:47,049 --> 00:15:50,619
you've<font color="#CCCCCC"> got more</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> in user space for</font>

411
00:15:48,609 --> 00:15:52,419
your actual workload<font color="#E5E5E5"> all the things</font>

412
00:15:50,619 --> 00:15:54,939
we're thinking<font color="#E5E5E5"> about doing is you know</font>

413
00:15:52,419 --> 00:15:56,589
<font color="#E5E5E5">the packet copies for large packets they</font>

414
00:15:54,939 --> 00:15:58,329
still are showing up as you<font color="#E5E5E5"> know a bit</font>

415
00:15:56,589 --> 00:16:00,999
of<font color="#E5E5E5"> a hotspot</font><font color="#CCCCCC"> so we're looking to</font><font color="#E5E5E5"> see if</font>

416
00:15:58,329 --> 00:16:04,358
we<font color="#CCCCCC"> can look at</font><font color="#E5E5E5"> doing copy acceleration</font>

417
00:16:00,999 --> 00:16:07,149
<font color="#E5E5E5">using the Intel</font><font color="#CCCCCC"> Quick</font><font color="#E5E5E5"> data on the Intel</font>

418
00:16:04,359 --> 00:16:08,980
Xeon systems so some links about that

419
00:16:07,149 --> 00:16:10,569
there<font color="#E5E5E5"> and also some of the you know</font>

420
00:16:08,980 --> 00:16:12,039
memory mapping<font color="#E5E5E5"> stuff for switching to</font>

421
00:16:10,569 --> 00:16:13,779
kernel space loss and kind<font color="#E5E5E5"> of familiar</font>

422
00:16:12,039 --> 00:16:16,149
well it is kind of like<font color="#E5E5E5"> what's being</font>

423
00:16:13,779 --> 00:16:18,839
<font color="#E5E5E5">done on a FX DP and so we're looking to</font>

424
00:16:16,149 --> 00:16:21,609
<font color="#E5E5E5">see you</font><font color="#CCCCCC"> know can we</font><font color="#E5E5E5"> use from the AF x DP</font>

425
00:16:18,839 --> 00:16:24,309
infrastructure and rings and methods of

426
00:16:21,609 --> 00:16:26,619
<font color="#E5E5E5">using pole to get in and out of kernel</font>

427
00:16:24,309 --> 00:16:28,389
space<font color="#CCCCCC"> into user space and</font><font color="#E5E5E5"> push this</font>

428
00:16:26,619 --> 00:16:30,610
<font color="#E5E5E5">distributive</font><font color="#CCCCCC"> V switching onto that AF</font><font color="#E5E5E5"> x</font>

429
00:16:28,389 --> 00:16:32,649
DP interface type<font color="#CCCCCC"> we've already had some</font>

430
00:16:30,610 --> 00:16:34,480
discussions with Magnus<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Bjorn about</font>

431
00:16:32,649 --> 00:16:35,500
<font color="#E5E5E5">about doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so that's on our radar</font>

432
00:16:34,480 --> 00:16:38,950
<font color="#E5E5E5">as well</font><font color="#CCCCCC"> too</font>

433
00:16:35,500 --> 00:16:45,690
standardization and that's it

434
00:16:38,950 --> 00:16:45,690
<font color="#CCCCCC">mos</font><font color="#E5E5E5"> I obviously didn't go on long enough</font>

435
00:16:51,000 --> 00:16:56,470
<font color="#CCCCCC">switch instance or can you are</font><font color="#E5E5E5"> you also</font>

436
00:16:53,860 --> 00:16:57,850
doing some cleverness where the

437
00:16:56,470 --> 00:16:59,470
distributed switch for each container or

438
00:16:57,850 --> 00:17:03,100
each burglar only has flow over flow

439
00:16:59,470 --> 00:17:05,740
rules relevant to that workload well I

440
00:17:03,100 --> 00:17:08,829
take<font color="#E5E5E5"> this yeah okay well we're basing</font>

441
00:17:05,740 --> 00:17:11,319
this right now off<font color="#CCCCCC"> obviously no VSD</font><font color="#E5E5E5"> BK</font>

442
00:17:08,829 --> 00:17:14,260
which already has its<font color="#CCCCCC"> look-up tables</font>

443
00:17:11,319 --> 00:17:16,270
<font color="#CCCCCC">purport so this essentially</font><font color="#E5E5E5"> means then</font>

444
00:17:14,260 --> 00:17:18,420
our<font color="#CCCCCC"> port is now</font><font color="#E5E5E5"> basically our container</font>

445
00:17:16,270 --> 00:17:20,980
instance our container interface<font color="#E5E5E5"> so</font>

446
00:17:18,420 --> 00:17:23,470
inside<font color="#E5E5E5"> so inside the kernel you'll of</font>

447
00:17:20,980 --> 00:17:25,990
all the tables what each individual core

448
00:17:23,470 --> 00:17:27,550
will only be<font color="#CCCCCC"> looking up the tables that</font>

449
00:17:25,990 --> 00:17:29,380
are<font color="#E5E5E5"> needed</font><font color="#CCCCCC"> for the traffic coming from</font>

450
00:17:27,550 --> 00:17:31,060
that<font color="#E5E5E5"> core itself so in that regard</font>

451
00:17:29,380 --> 00:17:32,830
they'll be distributed and you get you

452
00:17:31,060 --> 00:17:34,270
know nice caching benefits rather than

453
00:17:32,830 --> 00:17:36,460
all the flow tables trying to fit into

454
00:17:34,270 --> 00:17:38,170
your<font color="#CCCCCC"> OVS course you now have just</font><font color="#E5E5E5"> a flow</font>

455
00:17:36,460 --> 00:17:40,480
table<font color="#E5E5E5"> for each individual container</font>

456
00:17:38,170 --> 00:17:41,890
<font color="#E5E5E5">being in the cache of</font><font color="#CCCCCC"> a container of</font><font color="#E5E5E5"> the</font>

457
00:17:40,480 --> 00:17:46,260
court that that<font color="#CCCCCC"> container is</font><font color="#E5E5E5"> running on</font>

458
00:17:41,890 --> 00:17:46,260
itself<font color="#E5E5E5"> so</font>

459
00:17:47,570 --> 00:17:54,909
[Applause]

