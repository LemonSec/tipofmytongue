1
00:00:05,610 --> 00:00:10,320
<font color="#CCCCCC">okay so hello</font><font color="#E5E5E5"> everyone thanks</font><font color="#CCCCCC"> for coming</font>

2
00:00:07,860 --> 00:00:12,540
and<font color="#CCCCCC"> thanks for</font><font color="#E5E5E5"> having me</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> I</font>

3
00:00:10,320 --> 00:00:16,410
want<font color="#CCCCCC"> to share some experience</font><font color="#E5E5E5"> about</font>

4
00:00:12,540 --> 00:00:18,450
building<font color="#CCCCCC"> LLVM based tools yeah just</font><font color="#E5E5E5"> few</font>

5
00:00:16,410 --> 00:00:20,310
words<font color="#CCCCCC"> about</font><font color="#E5E5E5"> myself so my name is Alex I</font>

6
00:00:18,450 --> 00:00:24,210
work at<font color="#E5E5E5"> a company called pity scientist</font>

7
00:00:20,310 --> 00:00:26,220
<font color="#E5E5E5">key j MBH you can find me on the</font>

8
00:00:24,210 --> 00:00:32,850
internet if<font color="#E5E5E5"> you want to like my blog or</font>

9
00:00:26,220 --> 00:00:34,620
Twitter<font color="#E5E5E5"> so yeah this is</font><font color="#CCCCCC"> the agenda for</font>

10
00:00:32,850 --> 00:00:38,130
<font color="#E5E5E5">today's talk so basically</font><font color="#CCCCCC"> these are just</font>

11
00:00:34,620 --> 00:00:41,220
<font color="#E5E5E5">like set of some somehow like random but</font>

12
00:00:38,130 --> 00:00:42,989
general enough tips and tricks that

13
00:00:41,220 --> 00:00:46,860
might be helpful<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you want to build</font>

14
00:00:42,989 --> 00:00:48,089
<font color="#E5E5E5">something based on</font><font color="#CCCCCC"> LLVM so the tool I'm</font>

15
00:00:46,860 --> 00:00:51,149
talking about

16
00:00:48,090 --> 00:00:52,890
it's called<font color="#CCCCCC"> Maul I build it with some</font>

17
00:00:51,149 --> 00:00:54,000
<font color="#E5E5E5">friends and colleagues like for several</font>

18
00:00:52,890 --> 00:00:55,920
years like three years

19
00:00:54,000 --> 00:00:58,920
something<font color="#CCCCCC"> the source code is available</font>

20
00:00:55,920 --> 00:01:00,899
on github<font color="#CCCCCC"> if you want to know more</font><font color="#E5E5E5"> about</font>

21
00:00:58,920 --> 00:01:03,090
the tool itself then<font color="#E5E5E5"> I encourage you</font><font color="#CCCCCC"> to</font>

22
00:01:00,899 --> 00:01:07,050
watch my talk from<font color="#CCCCCC"> Falls Dam two years</font>

23
00:01:03,090 --> 00:01:09,420
ago<font color="#E5E5E5"> yeah beside that I'm not going</font><font color="#CCCCCC"> to</font>

24
00:01:07,050 --> 00:01:11,610
<font color="#CCCCCC">talk about the tool so everything</font><font color="#E5E5E5"> will</font>

25
00:01:09,420 --> 00:01:14,340
<font color="#CCCCCC">be kind</font><font color="#E5E5E5"> of general so a few interesting</font>

26
00:01:11,610 --> 00:01:18,149
<font color="#E5E5E5">things in my opinion that</font><font color="#CCCCCC"> the tool works</font>

27
00:01:14,340 --> 00:01:20,220
on<font color="#E5E5E5"> Linux FreeBSD and Mac</font><font color="#CCCCCC"> OS it may</font><font color="#E5E5E5"> work</font>

28
00:01:18,149 --> 00:01:24,360
in<font color="#CCCCCC"> Windows but</font><font color="#E5E5E5"> just no one has</font><font color="#CCCCCC"> access to</font>

29
00:01:20,220 --> 00:01:26,819
<font color="#E5E5E5">Windows machine so and the the nice part</font>

30
00:01:24,360 --> 00:01:29,550
also<font color="#E5E5E5"> that it can be compiled against any</font>

31
00:01:26,819 --> 00:01:34,649
<font color="#CCCCCC">LLVM version which we like in between</font><font color="#E5E5E5"> of</font>

32
00:01:29,550 --> 00:01:40,440
<font color="#CCCCCC">3 9</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> yet another interesting part</font>

33
00:01:34,649 --> 00:01:43,140
in my opinion<font color="#E5E5E5"> is I think it has quiet</font>

34
00:01:40,440 --> 00:01:48,690
quiet it provides<font color="#CCCCCC"> quite nice user</font>

35
00:01:43,140 --> 00:01:52,020
<font color="#CCCCCC">experience</font><font color="#E5E5E5"> so here I have just normal</font>

36
00:01:48,690 --> 00:01:57,360
program yeah it<font color="#E5E5E5"> runs like some tests in</font>

37
00:01:52,020 --> 00:02:01,940
<font color="#E5E5E5">this case but then I can also do the</font>

38
00:01:57,360 --> 00:02:01,940
following<font color="#E5E5E5"> I'm sorry</font>

39
00:02:02,670 --> 00:02:08,560
yeah I just want my tool against that

40
00:02:05,110 --> 00:02:11,950
binary<font color="#E5E5E5"> and it works and it took a race</font>

41
00:02:08,560 --> 00:02:14,050
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beach code level</font><font color="#E5E5E5"> so I find it</font>

42
00:02:11,950 --> 00:02:18,160
quite quite nice<font color="#CCCCCC"> comparing</font><font color="#E5E5E5"> to some other</font>

43
00:02:14,050 --> 00:02:22,690
tools that<font color="#E5E5E5"> I've seen but let's get</font><font color="#CCCCCC"> back</font>

44
00:02:18,160 --> 00:02:25,329
to the<font color="#E5E5E5"> slides</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> begin so just to have</font>

45
00:02:22,690 --> 00:02:27,250
some framework in mind<font color="#CCCCCC"> I defined LLVM</font>

46
00:02:25,330 --> 00:02:29,590
based tool as something that<font color="#CCCCCC"> operates on</font>

47
00:02:27,250 --> 00:02:32,379
<font color="#CCCCCC">LLVM which code and it does the like the</font>

48
00:02:29,590 --> 00:02:34,930
<font color="#E5E5E5">following things it parses or lost the</font>

49
00:02:32,379 --> 00:02:36,849
bit<font color="#E5E5E5"> code files in memory like creating</font>

50
00:02:34,930 --> 00:02:39,670
<font color="#CCCCCC">Columbia</font><font color="#E5E5E5"> modules then it does some</font>

51
00:02:36,849 --> 00:02:42,399
analysis and then some transformation

52
00:02:39,670 --> 00:02:44,738
potentially and at the end it does some

53
00:02:42,400 --> 00:02:47,440
some<font color="#E5E5E5"> like processing so the tool can be</font>

54
00:02:44,739 --> 00:02:49,780
something<font color="#E5E5E5"> like a compiler or a fuss</font>

55
00:02:47,440 --> 00:02:51,819
<font color="#CCCCCC">caterer or like in our case</font><font color="#E5E5E5"> tool for</font>

56
00:02:49,780 --> 00:02:53,349
mutation testing<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> think this</font>

57
00:02:51,819 --> 00:02:55,298
approach is general enough of course

58
00:02:53,349 --> 00:02:57,010
there might<font color="#CCCCCC"> be examples</font><font color="#E5E5E5"> where it doesn't</font>

59
00:02:55,299 --> 00:03:01,269
fit but I just want to<font color="#CCCCCC"> help some some</font>

60
00:02:57,010 --> 00:03:02,620
<font color="#E5E5E5">kind of structure</font><font color="#CCCCCC"> so the first thing</font>

61
00:03:01,269 --> 00:03:05,160
that<font color="#CCCCCC"> you should</font><font color="#E5E5E5"> consider of course</font><font color="#CCCCCC"> is</font>

62
00:03:02,620 --> 00:03:07,810
the build<font color="#CCCCCC"> system and</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> lots of</font>

63
00:03:05,160 --> 00:03:11,200
articles<font color="#E5E5E5"> and documentation like suggest</font>

64
00:03:07,810 --> 00:03:13,600
to use a<font color="#CCCCCC"> lot VM config it may work if</font>

65
00:03:11,200 --> 00:03:15,670
you<font color="#E5E5E5"> just start something fast</font><font color="#CCCCCC"> or like</font>

66
00:03:13,600 --> 00:03:18,430
<font color="#CCCCCC">some prototype</font><font color="#E5E5E5"> but in the long</font><font color="#CCCCCC"> run its</font>

67
00:03:15,670 --> 00:03:20,858
we<font color="#E5E5E5"> are not</font><font color="#CCCCCC"> naturally good and yeah there</font>

68
00:03:18,430 --> 00:03:22,600
are a few quirks<font color="#CCCCCC"> ill so this is how like</font>

69
00:03:20,859 --> 00:03:24,670
usually looks<font color="#E5E5E5"> like so you just use a</font>

70
00:03:22,600 --> 00:03:27,519
Clank then you call a<font color="#E5E5E5"> little um config</font>

71
00:03:24,670 --> 00:03:30,548
<font color="#CCCCCC">you ask for</font><font color="#E5E5E5"> C pass pass flags and linker</font>

72
00:03:27,519 --> 00:03:33,220
flags and so on so the<font color="#E5E5E5"> first problem the</font>

73
00:03:30,549 --> 00:03:35,139
<font color="#E5E5E5">cheapest pass Flags so it's these</font><font color="#CCCCCC"> are</font>

74
00:03:33,220 --> 00:03:37,120
<font color="#E5E5E5">likely</font><font color="#CCCCCC"> not the flex</font><font color="#E5E5E5"> you want but these</font>

75
00:03:35,139 --> 00:03:40,030
are the Flex that<font color="#CCCCCC"> LLVM was compiled with</font>

76
00:03:37,120 --> 00:03:41,639
so here<font color="#E5E5E5"> the first one it just yet just</font>

77
00:03:40,030 --> 00:03:44,410
<font color="#CCCCCC">some part of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> it's just an example</font>

78
00:03:41,639 --> 00:03:48,400
<font color="#E5E5E5">include yours well it you need it</font>

79
00:03:44,410 --> 00:03:51,190
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> but for example this</font><font color="#E5E5E5"> - W error</font>

80
00:03:48,400 --> 00:03:52,720
<font color="#CCCCCC">I think it won't compile with GCC</font>

81
00:03:51,190 --> 00:03:55,660
<font color="#CCCCCC">because</font><font color="#E5E5E5"> it's some</font><font color="#CCCCCC"> client specific thing</font>

82
00:03:52,720 --> 00:03:59,530
<font color="#E5E5E5">and it may also not compile with earlier</font>

83
00:03:55,660 --> 00:04:03,010
with older versions<font color="#CCCCCC"> of clang so yeah</font>

84
00:03:59,530 --> 00:04:04,840
<font color="#E5E5E5">another point that it's unless you</font>

85
00:04:03,010 --> 00:04:07,298
compile alluvium yourself<font color="#E5E5E5"> you will</font>

86
00:04:04,840 --> 00:04:09,310
likely get<font color="#E5E5E5"> optimized version so if you</font>

87
00:04:07,299 --> 00:04:11,950
<font color="#E5E5E5">build your tool using this like</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> pass</font>

88
00:04:09,310 --> 00:04:15,690
<font color="#E5E5E5">pass</font><font color="#CCCCCC"> flags</font><font color="#E5E5E5"> then it will be compiled like</font>

89
00:04:11,950 --> 00:04:17,370
an optimized way all the time<font color="#E5E5E5"> so</font>

90
00:04:15,690 --> 00:04:18,930
yeah just you<font color="#CCCCCC"> should just</font><font color="#E5E5E5"> be aware</font><font color="#CCCCCC"> of</font>

91
00:04:17,370 --> 00:04:21,060
<font color="#E5E5E5">that</font>

92
00:04:18,930 --> 00:04:23,700
another thing that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> eluvian</font><font color="#E5E5E5"> config</font>

93
00:04:21,060 --> 00:04:26,370
for libraries and<font color="#E5E5E5"> linker flags</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> yet</font>

94
00:04:23,700 --> 00:04:30,000
works really<font color="#E5E5E5"> good really well</font><font color="#CCCCCC"> but there</font>

95
00:04:26,370 --> 00:04:32,100
are some other issue if let's<font color="#CCCCCC"> say you</font>

96
00:04:30,000 --> 00:04:35,220
have on your machine installed more<font color="#E5E5E5"> than</font>

97
00:04:32,100 --> 00:04:38,850
<font color="#CCCCCC">one version</font><font color="#E5E5E5"> of LLVM and you have flipped</font>

98
00:04:35,220 --> 00:04:41,520
<font color="#CCCCCC">LLVM dilip</font><font color="#E5E5E5"> then eventually you may get</font>

99
00:04:38,850 --> 00:04:44,040
this<font color="#E5E5E5"> problem so if you compile against</font>

100
00:04:41,520 --> 00:04:45,330
if you link against like some library

101
00:04:44,040 --> 00:04:47,370
specific library like<font color="#CCCCCC"> you'll all be I'm</font>

102
00:04:45,330 --> 00:04:49,289
<font color="#E5E5E5">support for example and you run you may</font>

103
00:04:47,370 --> 00:04:52,350
<font color="#E5E5E5">get into this like inconsistency bla bla</font>

104
00:04:49,290 --> 00:04:53,670
<font color="#E5E5E5">bla I don't really understand where it</font>

105
00:04:52,350 --> 00:04:56,010
comes<font color="#CCCCCC"> from there like</font><font color="#E5E5E5"> something goes</font>

106
00:04:53,670 --> 00:04:58,050
wrong<font color="#E5E5E5"> obviously with dynamic linking and</font>

107
00:04:56,010 --> 00:04:59,969
<font color="#E5E5E5">maybe static linking as well but the</font>

108
00:04:58,050 --> 00:05:05,610
<font color="#E5E5E5">solution for that problem is</font><font color="#CCCCCC"> to actually</font>

109
00:04:59,970 --> 00:05:09,510
<font color="#E5E5E5">link against just</font><font color="#CCCCCC"> leap LLVM the kind of</font>

110
00:05:05,610 --> 00:05:11,700
<font color="#E5E5E5">issue of a lot of</font><font color="#CCCCCC"> IAM config that</font><font color="#E5E5E5"> there</font>

111
00:05:09,510 --> 00:05:13,230
is not<font color="#E5E5E5"> really an easy way</font><font color="#CCCCCC"> to check</font>

112
00:05:11,700 --> 00:05:16,530
<font color="#CCCCCC">whether you</font><font color="#E5E5E5"> have this leap</font><font color="#CCCCCC"> LLVM</font>

113
00:05:13,230 --> 00:05:20,580
installed<font color="#E5E5E5"> or you don't have it so yeah</font>

114
00:05:16,530 --> 00:05:23,070
<font color="#E5E5E5">as a solution I do consider see make if</font>

115
00:05:20,580 --> 00:05:24,539
you<font color="#E5E5E5"> don't knows what like well you</font>

116
00:05:23,070 --> 00:05:26,130
probably know what to<font color="#E5E5E5"> make is but if</font><font color="#CCCCCC"> you</font>

117
00:05:24,540 --> 00:05:28,920
<font color="#E5E5E5">don't know how it works and what</font><font color="#CCCCCC"> it does</font>

118
00:05:26,130 --> 00:05:31,380
<font color="#CCCCCC">I encourage</font><font color="#E5E5E5"> you to just read this</font>

119
00:05:28,920 --> 00:05:33,300
documentation<font color="#CCCCCC"> it's it's good enough</font>

120
00:05:31,380 --> 00:05:34,800
introduction and from now on<font color="#CCCCCC"> I assume</font>

121
00:05:33,300 --> 00:05:36,960
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you understand see make if not</font>

122
00:05:34,800 --> 00:05:38,669
please do yourself favor<font color="#E5E5E5"> read about it</font>

123
00:05:36,960 --> 00:05:42,840
<font color="#CCCCCC">and then you can get better</font><font color="#E5E5E5"> slides and</font>

124
00:05:38,669 --> 00:05:44,640
yet it may make<font color="#CCCCCC"> sense afterwards so how</font>

125
00:05:42,840 --> 00:05:47,010
do you<font color="#E5E5E5"> say</font><font color="#CCCCCC"> little vm i</font><font color="#E5E5E5"> will see make</font>

126
00:05:44,640 --> 00:05:49,830
yeah<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> straightforward so you</font><font color="#E5E5E5"> just</font>

127
00:05:47,010 --> 00:05:53,700
use the fine package and you search<font color="#CCCCCC"> for</font>

128
00:05:49,830 --> 00:05:58,500
<font color="#CCCCCC">LLVM</font><font color="#E5E5E5"> when it's done</font><font color="#CCCCCC"> you get access to</font>

129
00:05:53,700 --> 00:06:00,860
<font color="#E5E5E5">all the variables</font><font color="#CCCCCC"> that LLVM distribution</font>

130
00:05:58,500 --> 00:06:04,860
provides to you and also<font color="#E5E5E5"> the libraries</font>

131
00:06:00,860 --> 00:06:07,110
so important part here the you may see

132
00:06:04,860 --> 00:06:11,340
in can read each color<font color="#E5E5E5"> a search path</font>

133
00:06:07,110 --> 00:06:14,010
<font color="#E5E5E5">they are specified in</font><font color="#CCCCCC"> this way the</font>

134
00:06:11,340 --> 00:06:15,630
<font color="#E5E5E5">reason because as we tend</font><font color="#CCCCCC"> to support</font>

135
00:06:14,010 --> 00:06:18,120
many different<font color="#CCCCCC"> versions</font><font color="#E5E5E5"> of blank and</font>

136
00:06:15,630 --> 00:06:21,060
allow<font color="#CCCCCC"> vm different</font><font color="#E5E5E5"> versions from</font>

137
00:06:18,120 --> 00:06:24,720
different distributions of Linux and Mac

138
00:06:21,060 --> 00:06:26,669
they have different locations<font color="#E5E5E5"> of like</font>

139
00:06:24,720 --> 00:06:29,260
<font color="#E5E5E5">different</font><font color="#CCCCCC"> places where as you make looks</font>

140
00:06:26,669 --> 00:06:34,870
for so the recommendation is yeah

141
00:06:29,260 --> 00:06:36,700
<font color="#CCCCCC">- to do</font><font color="#E5E5E5"> this way to other parts pass</font><font color="#CCCCCC"> -</font>

142
00:06:34,870 --> 00:06:40,480
<font color="#CCCCCC">LLVM that must be provided</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

143
00:06:36,700 --> 00:06:44,080
outside<font color="#CCCCCC"> by your user of by a user of</font>

144
00:06:40,480 --> 00:06:45,220
<font color="#E5E5E5">your tool</font><font color="#CCCCCC"> because if you don't</font><font color="#E5E5E5"> do it</font>

145
00:06:44,080 --> 00:06:48,340
<font color="#CCCCCC">explicitly then there is no guarantee</font>

146
00:06:45,220 --> 00:06:50,080
<font color="#E5E5E5">like which actually version of</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> is</font>

147
00:06:48,340 --> 00:06:53,469
used and<font color="#E5E5E5"> it's yeah it's it's getting</font><font color="#CCCCCC"> a</font>

148
00:06:50,080 --> 00:06:56,140
<font color="#CCCCCC">bit tricky</font><font color="#E5E5E5"> the good part that you can</font>

149
00:06:53,470 --> 00:06:59,320
also do the<font color="#CCCCCC"> same with clamp finds a</font>

150
00:06:56,140 --> 00:07:01,030
<font color="#E5E5E5">package Clank but it's broken</font><font color="#CCCCCC"> on some</font>

151
00:06:59,320 --> 00:07:03,250
Linux distributions especially if you

152
00:07:01,030 --> 00:07:05,109
have I think<font color="#CCCCCC"> Ubuntu if you have</font><font color="#E5E5E5"> three</font>

153
00:07:03,250 --> 00:07:07,210
<font color="#CCCCCC">nine four</font><font color="#E5E5E5"> and five installed at the same</font>

154
00:07:05,110 --> 00:07:09,280
time then it doesn't work<font color="#CCCCCC"> because he has</font>

155
00:07:07,210 --> 00:07:12,219
some prefixes suffixes<font color="#CCCCCC"> with versions</font>

156
00:07:09,280 --> 00:07:14,559
just<font color="#E5E5E5"> in that case yeah</font>

157
00:07:12,220 --> 00:07:17,260
recommendation is to use pre<font color="#E5E5E5"> compiled</font>

158
00:07:14,560 --> 00:07:22,270
versions of<font color="#CCCCCC"> plant or a log</font><font color="#E5E5E5"> VM from</font>

159
00:07:17,260 --> 00:07:26,260
official website yeah so once you've

160
00:07:22,270 --> 00:07:27,729
done that you get access<font color="#E5E5E5"> yeah as I said</font>

161
00:07:26,260 --> 00:07:30,070
<font color="#E5E5E5">two variables like a lot</font><font color="#CCCCCC"> vm include</font>

162
00:07:27,730 --> 00:07:32,110
years and you can teach your targets

163
00:07:30,070 --> 00:07:34,990
<font color="#E5E5E5">like where to look for headers and you</font>

164
00:07:32,110 --> 00:07:36,910
can link against<font color="#E5E5E5"> alluvium supports for</font>

165
00:07:34,990 --> 00:07:39,490
example<font color="#E5E5E5"> as you would link to against any</font>

166
00:07:36,910 --> 00:07:42,550
<font color="#CCCCCC">other</font><font color="#E5E5E5"> library in your project</font>

167
00:07:39,490 --> 00:07:45,850
<font color="#E5E5E5">except that yeah</font><font color="#CCCCCC"> again you may face this</font>

168
00:07:42,550 --> 00:07:49,680
<font color="#CCCCCC">problem and</font><font color="#E5E5E5"> it's really annoying</font><font color="#CCCCCC"> so the</font>

169
00:07:45,850 --> 00:07:51,910
proper<font color="#E5E5E5"> solution is to</font><font color="#CCCCCC"> actually check if</font>

170
00:07:49,680 --> 00:07:54,670
distribution of<font color="#CCCCCC"> LLVM you use if it's</font>

171
00:07:51,910 --> 00:07:58,180
applies to this<font color="#CCCCCC"> LLVM target low</font><font color="#E5E5E5"> vm</font>

172
00:07:54,670 --> 00:07:59,800
library then you link against<font color="#E5E5E5"> just</font><font color="#CCCCCC"> LLVM</font>

173
00:07:58,180 --> 00:08:05,980
otherwise you link against your

174
00:07:59,800 --> 00:08:08,050
libraries like yeah<font color="#CCCCCC"> any</font><font color="#E5E5E5"> any you want</font><font color="#CCCCCC"> ok</font>

175
00:08:05,980 --> 00:08:11,290
I think we're<font color="#CCCCCC"> done we</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> mate for now</font>

176
00:08:08,050 --> 00:08:13,450
<font color="#E5E5E5">and getting</font><font color="#CCCCCC"> to well yeah ok we're not</font>

177
00:08:11,290 --> 00:08:15,580
quite done<font color="#CCCCCC"> with</font><font color="#E5E5E5"> me so how to support</font>

178
00:08:13,450 --> 00:08:18,039
server versions<font color="#E5E5E5"> there are two approaches</font>

179
00:08:15,580 --> 00:08:21,370
<font color="#E5E5E5">this is the one of them so basically we</font>

180
00:08:18,040 --> 00:08:25,090
have just bunch of<font color="#CCCCCC"> folders they provide</font>

181
00:08:21,370 --> 00:08:31,390
a set of kind of<font color="#E5E5E5"> glue</font><font color="#CCCCCC"> codes for</font>

182
00:08:25,090 --> 00:08:34,449
<font color="#E5E5E5">different versions</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> LLVM and then yeah</font>

183
00:08:31,390 --> 00:08:38,289
the header files they look like this<font color="#CCCCCC"> so</font>

184
00:08:34,450 --> 00:08:39,820
basically<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the places that are that</font>

185
00:08:38,289 --> 00:08:42,250
<font color="#E5E5E5">have some compatibilities between</font>

186
00:08:39,820 --> 00:08:44,229
versions they were hidden

187
00:08:42,250 --> 00:08:47,020
some<font color="#E5E5E5"> functions and also like typedefs</font>

188
00:08:44,229 --> 00:08:50,260
<font color="#E5E5E5">used and so on it's it's not much here</font>

189
00:08:47,020 --> 00:08:53,920
<font color="#E5E5E5">actually I must admit</font><font color="#CCCCCC"> and you probably</font>

190
00:08:50,260 --> 00:08:56,950
may face many more discrepancies between

191
00:08:53,920 --> 00:08:58,089
versions<font color="#CCCCCC"> but it's I think it's</font><font color="#E5E5E5"> still</font>

192
00:08:56,950 --> 00:09:00,640
<font color="#E5E5E5">manageable and she's good enough</font>

193
00:08:58,090 --> 00:09:03,820
approach<font color="#E5E5E5"> so in fact in our case we also</font>

194
00:09:00,640 --> 00:09:05,800
used work<font color="#E5E5E5"> jet and it was changing a lot</font>

195
00:09:03,820 --> 00:09:09,670
you were between different<font color="#E5E5E5"> versions like</font>

196
00:09:05,800 --> 00:09:12,699
a lot and we first tried<font color="#E5E5E5"> to come up</font><font color="#CCCCCC"> with</font>

197
00:09:09,670 --> 00:09:15,610
<font color="#CCCCCC">some interface</font><font color="#E5E5E5"> to hide the changes</font>

198
00:09:12,700 --> 00:09:18,880
behind but yeah at the end<font color="#CCCCCC"> we just</font>

199
00:09:15,610 --> 00:09:21,250
realized<font color="#CCCCCC"> that our</font><font color="#E5E5E5"> use case well that or</font>

200
00:09:18,880 --> 00:09:23,950
<font color="#E5E5E5">JIT is too general for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> and the</font>

201
00:09:21,250 --> 00:09:26,470
<font color="#E5E5E5">maintaining this</font><font color="#CCCCCC"> parts is just</font><font color="#E5E5E5"> harder</font>

202
00:09:23,950 --> 00:09:29,800
than actually crafting<font color="#E5E5E5"> powers like our</font>

203
00:09:26,470 --> 00:09:34,180
own<font color="#CCCCCC"> sheet engine which we did and yeah</font>

204
00:09:29,800 --> 00:09:39,069
<font color="#E5E5E5">it just</font><font color="#CCCCCC"> works so far yeah</font><font color="#E5E5E5"> I think the</font>

205
00:09:34,180 --> 00:09:41,949
other approach<font color="#E5E5E5"> is to you use the define</font>

206
00:09:39,070 --> 00:09:44,560
<font color="#E5E5E5">like the macros if like in your code</font>

207
00:09:41,950 --> 00:09:47,500
base<font color="#E5E5E5"> like sharp if allow the inversion</font>

208
00:09:44,560 --> 00:09:49,569
less than<font color="#E5E5E5"> 5 or something yeah it's</font><font color="#CCCCCC"> still</font>

209
00:09:47,500 --> 00:09:51,970
doable but it's a bit messy<font color="#E5E5E5"> and yeah I</font>

210
00:09:49,570 --> 00:09:54,580
think<font color="#E5E5E5"> just as a personal preference</font><font color="#CCCCCC"> I I</font>

211
00:09:51,970 --> 00:09:59,080
<font color="#E5E5E5">like this approach more yeah and the C</font>

212
00:09:54,580 --> 00:10:00,160
make it looks like this then yeah<font color="#E5E5E5"> the</font>

213
00:09:59,080 --> 00:10:02,860
real code is a bit more<font color="#E5E5E5"> sophisticated</font>

214
00:10:00,160 --> 00:10:06,400
<font color="#CCCCCC">but it's just an example</font><font color="#E5E5E5"> taken</font><font color="#CCCCCC"> from the</font>

215
00:10:02,860 --> 00:10:09,339
from<font color="#E5E5E5"> our C make file yeah just check if</font>

216
00:10:06,400 --> 00:10:14,069
there is<font color="#CCCCCC"> any glue code for the version</font>

217
00:10:09,339 --> 00:10:14,070
then it picks it<font color="#E5E5E5"> up otherwise yeah error</font>

218
00:10:14,160 --> 00:10:20,890
yeah so far<font color="#CCCCCC"> I was talking only about</font>

219
00:10:17,440 --> 00:10:24,820
case where you compile your<font color="#E5E5E5"> tool against</font>

220
00:10:20,890 --> 00:10:26,020
<font color="#E5E5E5">pre compiled version of</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> but it does</font>

221
00:10:24,820 --> 00:10:29,230
make<font color="#E5E5E5"> sense also to compile against</font>

222
00:10:26,020 --> 00:10:30,490
sources for for the<font color="#E5E5E5"> following reasons we</font>

223
00:10:29,230 --> 00:10:33,130
sprinkle<font color="#CCCCCC"> past</font><font color="#E5E5E5"> version you have like</font>

224
00:10:30,490 --> 00:10:34,660
really<font color="#CCCCCC"> fast compile time</font><font color="#E5E5E5"> but it's really</font>

225
00:10:33,130 --> 00:10:36,490
hard to debug<font color="#CCCCCC"> because you cannot drive</font>

226
00:10:34,660 --> 00:10:38,800
like deep deep into internals and<font color="#E5E5E5"> you</font>

227
00:10:36,490 --> 00:10:42,270
only have interface<font color="#E5E5E5"> so it's hard</font><font color="#CCCCCC"> to put</font>

228
00:10:38,800 --> 00:10:45,339
print apps for for sake of debugging<font color="#E5E5E5"> and</font>

229
00:10:42,270 --> 00:10:49,030
there are no certs unless again unless

230
00:10:45,339 --> 00:10:52,120
you compile<font color="#CCCCCC"> LLVM yourself and so for</font>

231
00:10:49,030 --> 00:10:55,430
example we<font color="#E5E5E5"> didn't compile was a source</font>

232
00:10:52,120 --> 00:10:58,340
for maybe<font color="#CCCCCC"> year or something</font><font color="#E5E5E5"> and then we</font>

233
00:10:55,430 --> 00:11:02,150
several bug reports from<font color="#E5E5E5"> a person who</font>

234
00:10:58,340 --> 00:11:07,490
<font color="#E5E5E5">was</font><font color="#CCCCCC"> editing</font><font color="#E5E5E5"> freebsd support and this</font>

235
00:11:02,150 --> 00:11:09,650
person used<font color="#E5E5E5"> yeah built with assertions</font>

236
00:11:07,490 --> 00:11:12,500
enabled and<font color="#E5E5E5"> we just learned that we</font>

237
00:11:09,650 --> 00:11:14,959
<font color="#E5E5E5">violated many times we violated some</font>

238
00:11:12,500 --> 00:11:18,500
constraints of<font color="#E5E5E5"> LLVM and if you enable</font>

239
00:11:14,960 --> 00:11:20,930
assertions<font color="#E5E5E5"> then it yeah it crashes</font><font color="#CCCCCC"> but</font>

240
00:11:18,500 --> 00:11:26,510
it<font color="#CCCCCC"> worked</font><font color="#E5E5E5"> in our case somehow like</font>

241
00:11:20,930 --> 00:11:28,400
rather<font color="#E5E5E5"> by accident but</font><font color="#CCCCCC"> still yeah</font><font color="#E5E5E5"> so</font>

242
00:11:26,510 --> 00:11:33,110
<font color="#CCCCCC">it's a downside of built building</font>

243
00:11:28,400 --> 00:11:36,079
against source code<font color="#E5E5E5"> yeah you have lots</font>

244
00:11:33,110 --> 00:11:40,490
of time<font color="#CCCCCC"> to actually build</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> VM so</font>

245
00:11:36,080 --> 00:11:42,920
the good part that you<font color="#E5E5E5"> can also set up</font>

246
00:11:40,490 --> 00:11:45,020
your<font color="#CCCCCC"> C make to support both things at</font>

247
00:11:42,920 --> 00:11:46,880
the<font color="#CCCCCC"> same time</font><font color="#E5E5E5"> so either compile against</font>

248
00:11:45,020 --> 00:11:49,699
pre compiled version or<font color="#E5E5E5"> against sources</font>

249
00:11:46,880 --> 00:11:52,790
so the trick is<font color="#E5E5E5"> simple it's probably for</font>

250
00:11:49,700 --> 00:11:56,510
jail but it works<font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> I'm glad</font>

251
00:11:52,790 --> 00:11:57,949
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that but yeah so basically</font><font color="#CCCCCC"> you</font>

252
00:11:56,510 --> 00:12:00,290
just<font color="#E5E5E5"> check if the pass</font>

253
00:11:57,950 --> 00:12:02,540
if the LLVM folder that a user provides

254
00:12:00,290 --> 00:12:04,730
if it<font color="#E5E5E5"> contains</font><font color="#CCCCCC"> C make less file</font><font color="#E5E5E5"> then you</font>

255
00:12:02,540 --> 00:12:07,310
<font color="#E5E5E5">just add a log M itself as a sub-project</font>

256
00:12:04,730 --> 00:12:09,830
<font color="#CCCCCC">so now you own</font><font color="#E5E5E5"> LLVM and</font><font color="#CCCCCC"> not the other</font>

257
00:12:07,310 --> 00:12:12,380
way around<font color="#CCCCCC"> the problem here that</font><font color="#E5E5E5"> you</font>

258
00:12:09,830 --> 00:12:14,840
don't have things<font color="#CCCCCC"> like love we include</font>

259
00:12:12,380 --> 00:12:16,460
years and you don't know<font color="#E5E5E5"> it'll be M</font>

260
00:12:14,840 --> 00:12:18,710
version<font color="#E5E5E5"> because those files they</font><font color="#CCCCCC"> are not</font>

261
00:12:16,460 --> 00:12:21,350
exposed<font color="#E5E5E5"> like the these variables are not</font>

262
00:12:18,710 --> 00:12:22,630
exposed again<font color="#E5E5E5"> there are some solution</font>

263
00:12:21,350 --> 00:12:25,640
<font color="#E5E5E5">for that</font>

264
00:12:22,630 --> 00:12:29,150
another fragile solution<font color="#E5E5E5"> so you can pick</font>

265
00:12:25,640 --> 00:12:31,250
<font color="#E5E5E5">any random</font><font color="#CCCCCC"> LLVM library</font><font color="#E5E5E5"> and reach its</font>

266
00:12:29,150 --> 00:12:34,760
property for example<font color="#E5E5E5"> include year</font><font color="#CCCCCC"> trees</font>

267
00:12:31,250 --> 00:12:37,460
<font color="#E5E5E5">and yet it works as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> so as for the</font>

268
00:12:34,760 --> 00:12:39,890
version yeah you can<font color="#CCCCCC"> just parse this</font>

269
00:12:37,460 --> 00:12:41,660
image<font color="#E5E5E5"> this file and use regular</font>

270
00:12:39,890 --> 00:12:47,000
expressions to<font color="#E5E5E5"> get the version out of it</font>

271
00:12:41,660 --> 00:12:51,550
then<font color="#CCCCCC"> yep it just works</font><font color="#E5E5E5"> yeah and I think</font>

272
00:12:47,000 --> 00:12:54,500
<font color="#E5E5E5">now we are done with</font><font color="#CCCCCC"> CMake so now yeah</font><font color="#E5E5E5"> I</font>

273
00:12:51,550 --> 00:12:58,880
want to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about memory management</font><font color="#E5E5E5"> I'm</font>

274
00:12:54,500 --> 00:13:03,260
not sure<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> is there any</font><font color="#E5E5E5"> problem here</font>

275
00:12:58,880 --> 00:13:05,180
in this<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> cows anyone else ok</font><font color="#E5E5E5"> so</font>

276
00:13:03,260 --> 00:13:07,040
it may crash or may not it depends<font color="#E5E5E5"> on</font>

277
00:13:05,180 --> 00:13:09,140
which<font color="#E5E5E5"> version you use I think</font><font color="#CCCCCC"> three</font>

278
00:13:07,040 --> 00:13:12,170
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> four it</font><font color="#E5E5E5"> will crash</font>

279
00:13:09,140 --> 00:13:15,410
and on the recent versions it it will

280
00:13:12,170 --> 00:13:16,490
<font color="#E5E5E5">work I</font><font color="#CCCCCC"> think so the problem is that yeah</font>

281
00:13:15,410 --> 00:13:18,800
we're rather let's start with the

282
00:13:16,490 --> 00:13:22,820
solution<font color="#E5E5E5"> you should</font><font color="#CCCCCC"> just switch those</font>

283
00:13:18,800 --> 00:13:26,060
<font color="#CCCCCC">two lines the problem here that LLVM</font>

284
00:13:22,820 --> 00:13:28,850
context<font color="#E5E5E5"> actually owns the modules so and</font>

285
00:13:26,060 --> 00:13:30,949
it stores<font color="#CCCCCC"> just rough pointers</font><font color="#E5E5E5"> like</font>

286
00:13:28,850 --> 00:13:33,110
<font color="#E5E5E5">vector of rough pointers to all the</font>

287
00:13:30,950 --> 00:13:38,780
modules that<font color="#E5E5E5"> were created and in this</font>

288
00:13:33,110 --> 00:13:41,300
example<font color="#E5E5E5"> yeah the context</font><font color="#CCCCCC"> D allocates</font>

289
00:13:38,780 --> 00:13:44,060
<font color="#E5E5E5">yeah the LLVM context owns the modules</font>

290
00:13:41,300 --> 00:13:46,579
and in the destructor<font color="#E5E5E5"> it just calls the</font>

291
00:13:44,060 --> 00:13:48,260
delete to the actual pointers<font color="#E5E5E5"> so this</font>

292
00:13:46,580 --> 00:13:50,180
code when it executes a lot of<font color="#CCCCCC"> em</font>

293
00:13:48,260 --> 00:13:53,150
<font color="#CCCCCC">context it destroys like</font><font color="#E5E5E5"> diello case the</font>

294
00:13:50,180 --> 00:13:55,599
modules then happens the allocation of

295
00:13:53,150 --> 00:13:58,459
the<font color="#E5E5E5"> vector with all the</font><font color="#CCCCCC"> modules</font><font color="#E5E5E5"> and yeah</font>

296
00:13:55,600 --> 00:14:03,040
<font color="#E5E5E5">double free so basically you get you get</font>

297
00:13:58,460 --> 00:14:06,230
a crash<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> same reason this example</font>

298
00:14:03,040 --> 00:14:07,250
<font color="#CCCCCC">so</font><font color="#E5E5E5"> this is yeah</font><font color="#CCCCCC"> we had this problem</font>

299
00:14:06,230 --> 00:14:11,480
before

300
00:14:07,250 --> 00:14:13,730
<font color="#CCCCCC">so assumption was that</font><font color="#E5E5E5"> in the nested</font>

301
00:14:11,480 --> 00:14:15,560
scope you create a module<font color="#CCCCCC"> you do</font>

302
00:14:13,730 --> 00:14:17,540
something with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like</font>

303
00:14:15,560 --> 00:14:20,810
<font color="#E5E5E5">disposed like the allocated after the</font>

304
00:14:17,540 --> 00:14:23,120
scope ends<font color="#CCCCCC"> but we</font><font color="#E5E5E5"> faced a problem on a</font>

305
00:14:20,810 --> 00:14:25,869
machine<font color="#CCCCCC"> 32-bit machine with four</font>

306
00:14:23,120 --> 00:14:28,130
gigabytes of<font color="#CCCCCC"> RAM because actually</font>

307
00:14:25,870 --> 00:14:32,180
modules are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> G allocated in their</font>

308
00:14:28,130 --> 00:14:34,760
stores<font color="#E5E5E5"> in the LLVM context so the</font>

309
00:14:32,180 --> 00:14:38,300
solution here<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> use some local</font>

310
00:14:34,760 --> 00:14:42,740
<font color="#E5E5E5">context then your memories feed at the</font>

311
00:14:38,300 --> 00:14:45,859
end of the<font color="#E5E5E5"> otoscope</font><font color="#CCCCCC"> another can anoint</font>

312
00:14:42,740 --> 00:14:48,260
part was was this approach all<font color="#E5E5E5"> the</font>

313
00:14:45,860 --> 00:14:50,950
modules they are loaded in this<font color="#E5E5E5"> global</font>

314
00:14:48,260 --> 00:14:53,330
context and when the<font color="#E5E5E5"> program terminates</font>

315
00:14:50,950 --> 00:14:55,640
<font color="#E5E5E5">you just see that like nothing</font><font color="#CCCCCC"> is</font>

316
00:14:53,330 --> 00:14:57,440
happening<font color="#CCCCCC"> and it's because LLVM just</font>

317
00:14:55,640 --> 00:14:59,420
<font color="#E5E5E5">frees the memory so in that approach</font>

318
00:14:57,440 --> 00:15:01,610
<font color="#E5E5E5">this work is still</font><font color="#CCCCCC"> john it's still</font>

319
00:14:59,420 --> 00:15:03,949
happening<font color="#CCCCCC"> but it's kind of distributed</font>

320
00:15:01,610 --> 00:15:07,610
across<font color="#CCCCCC"> the whole program lifecycle so</font>

321
00:15:03,950 --> 00:15:11,240
it's not<font color="#E5E5E5"> yeah institution times time</font>

322
00:15:07,610 --> 00:15:15,280
takes<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same time but it's just</font>

323
00:15:11,240 --> 00:15:20,870
less less<font color="#E5E5E5"> annoying or frustrating okay</font>

324
00:15:15,280 --> 00:15:22,730
<font color="#E5E5E5">next topic is parallelization so the</font>

325
00:15:20,870 --> 00:15:25,040
trick here<font color="#CCCCCC"> to make</font>

326
00:15:22,730 --> 00:15:28,339
things paralyzed well is to not<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it</font>

327
00:15:25,040 --> 00:15:32,949
<font color="#CCCCCC">all</font><font color="#E5E5E5"> VM passes its wall</font><font color="#CCCCCC"> statements</font><font color="#E5E5E5"> but I</font>

328
00:15:28,339 --> 00:15:36,019
will elaborate<font color="#E5E5E5"> just in a second so I</font>

329
00:15:32,949 --> 00:15:38,420
know like<font color="#CCCCCC"> at</font><font color="#E5E5E5"> least at least</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> classes</font>

330
00:15:36,019 --> 00:15:40,250
<font color="#CCCCCC">actually in LLVM</font><font color="#E5E5E5"> they are not that are</font>

331
00:15:38,420 --> 00:15:44,599
not read safe and that are heavily used

332
00:15:40,250 --> 00:15:45,949
<font color="#CCCCCC">it's a lot</font><font color="#E5E5E5"> VM context and therefore like</font>

333
00:15:44,600 --> 00:15:49,490
anything you do with modules

334
00:15:45,949 --> 00:15:51,740
instructions<font color="#E5E5E5"> functions</font><font color="#CCCCCC"> its it also not</font>

335
00:15:49,490 --> 00:15:54,829
thread safe because it's like tightly

336
00:15:51,740 --> 00:15:56,570
<font color="#E5E5E5">coupled with a</font><font color="#CCCCCC"> low VM context</font><font color="#E5E5E5"> and the</font>

337
00:15:54,829 --> 00:15:59,479
same goes for the target machine<font color="#CCCCCC"> so if</font>

338
00:15:56,570 --> 00:16:02,269
you use like<font color="#E5E5E5"> Orca compiler for example</font>

339
00:15:59,480 --> 00:16:06,889
or if you do any<font color="#E5E5E5"> cogeneration then it's</font>

340
00:16:02,269 --> 00:16:10,250
not<font color="#E5E5E5"> read safe so let's look at the</font>

341
00:16:06,889 --> 00:16:12,829
example<font color="#E5E5E5"> yeah this this</font><font color="#CCCCCC"> - link is just</font>

342
00:16:10,250 --> 00:16:15,500
<font color="#E5E5E5">perfect for fair paralyzation because</font>

343
00:16:12,829 --> 00:16:17,660
what what it means<font color="#E5E5E5"> that you have like</font><font color="#CCCCCC"> 10</font>

344
00:16:15,500 --> 00:16:20,180
<font color="#E5E5E5">tasks and you have 10 threads and you</font>

345
00:16:17,660 --> 00:16:22,699
can just evenly split those tasks across

346
00:16:20,180 --> 00:16:26,870
<font color="#E5E5E5">threads and you get yeah you gain some</font>

347
00:16:22,699 --> 00:16:29,149
performance so just as an<font color="#E5E5E5"> example let's</font>

348
00:16:26,870 --> 00:16:31,010
say we<font color="#E5E5E5"> have three bit code modules we</font>

349
00:16:29,149 --> 00:16:33,230
want to load them into<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> parts and</font>

350
00:16:31,010 --> 00:16:35,569
she<font color="#CCCCCC"> I do some job</font><font color="#E5E5E5"> so if you want to do</font>

351
00:16:33,230 --> 00:16:37,370
that across<font color="#CCCCCC"> two threads then each thread</font>

352
00:16:35,569 --> 00:16:41,209
should have its own<font color="#E5E5E5"> along</font><font color="#CCCCCC"> VM context</font>

353
00:16:37,370 --> 00:16:43,910
<font color="#E5E5E5">otherwise it's not read safe and what</font>

354
00:16:41,209 --> 00:16:45,829
happens next<font color="#E5E5E5"> if you want to do some</font>

355
00:16:43,910 --> 00:16:48,199
analysis<font color="#E5E5E5"> so in this</font><font color="#CCCCCC"> example we have six</font>

356
00:16:45,829 --> 00:16:51,138
functions it may make sense<font color="#E5E5E5"> to split all</font>

357
00:16:48,199 --> 00:16:52,760
those six functions<font color="#E5E5E5"> across two threads</font>

358
00:16:51,139 --> 00:16:55,970
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> just do</font><font color="#CCCCCC"> analysis you do not</font>

359
00:16:52,760 --> 00:17:00,380
do any modifications<font color="#E5E5E5"> and you can</font>

360
00:16:55,970 --> 00:17:03,280
<font color="#CCCCCC">actually do that</font><font color="#E5E5E5"> yeah it works so there</font>

361
00:17:00,380 --> 00:17:06,530
is can a bold line<font color="#E5E5E5"> where a function</font>

362
00:17:03,280 --> 00:17:09,790
escapes<font color="#E5E5E5"> its thread boundaries and it's</font>

363
00:17:06,530 --> 00:17:12,020
fine but when it comes to transformation

364
00:17:09,790 --> 00:17:15,139
<font color="#CCCCCC">then you cannot do that</font><font color="#E5E5E5"> anymore</font>

365
00:17:12,020 --> 00:17:18,500
<font color="#E5E5E5">so each function should be transformed</font>

366
00:17:15,140 --> 00:17:19,970
in the context or<font color="#E5E5E5"> in the threads at the</font>

367
00:17:18,500 --> 00:17:27,250
same<font color="#E5E5E5"> module of the same</font><font color="#CCCCCC"> little VM</font>

368
00:17:19,970 --> 00:17:30,110
context that these are some<font color="#CCCCCC"> numbers so</font>

369
00:17:27,250 --> 00:17:32,299
yeah you see the like the steps are

370
00:17:30,110 --> 00:17:34,428
split analysis and transformation<font color="#E5E5E5"> so the</font>

371
00:17:32,299 --> 00:17:36,560
transformation<font color="#CCCCCC"> at least in our case is</font>

372
00:17:34,429 --> 00:17:38,090
super fast because

373
00:17:36,560 --> 00:17:40,879
yeah<font color="#E5E5E5"> for some reason it's superfast</font>

374
00:17:38,090 --> 00:17:43,220
because<font color="#E5E5E5"> it does much less job but in</font>

375
00:17:40,880 --> 00:17:45,770
Alice's takes like most of the time and

376
00:17:43,220 --> 00:17:47,960
if we paralyze like you can see the

377
00:17:45,770 --> 00:17:50,780
green color<font color="#E5E5E5"> it becomes just much faster</font>

378
00:17:47,960 --> 00:17:53,900
<font color="#CCCCCC">so that's that's why I'm saying that</font><font color="#E5E5E5"> you</font>

379
00:17:50,780 --> 00:17:56,300
should you maybe should avoid<font color="#CCCCCC"> using</font>

380
00:17:53,900 --> 00:17:59,360
passes because<font color="#E5E5E5"> they can incentivize you</font>

381
00:17:56,300 --> 00:18:01,430
to put a transform like analysis and

382
00:17:59,360 --> 00:18:03,649
transformation into<font color="#E5E5E5"> the same thing so</font>

383
00:18:01,430 --> 00:18:06,650
yeah if you split these steps then<font color="#CCCCCC"> you</font>

384
00:18:03,650 --> 00:18:08,870
can<font color="#CCCCCC"> paralyze</font><font color="#E5E5E5"> better but of course you</font>

385
00:18:06,650 --> 00:18:12,770
should measure everything<font color="#E5E5E5"> all the time</font>

386
00:18:08,870 --> 00:18:15,530
so this is yeah in our example in our

387
00:18:12,770 --> 00:18:17,720
case<font color="#E5E5E5"> just</font><font color="#CCCCCC"> loading like parsing</font><font color="#E5E5E5"> bits code</font>

388
00:18:15,530 --> 00:18:20,030
files<font color="#E5E5E5"> loading them from disk</font><font color="#CCCCCC"> takes much</font>

389
00:18:17,720 --> 00:18:21,410
much<font color="#E5E5E5"> more time</font><font color="#CCCCCC"> than analysis and</font>

390
00:18:20,030 --> 00:18:24,260
transformation it doesn't matter<font color="#E5E5E5"> like</font>

391
00:18:21,410 --> 00:18:25,820
sequential execution parallel<font color="#E5E5E5"> so yeah</font>

392
00:18:24,260 --> 00:18:26,450
you still can use passes if that's the

393
00:18:25,820 --> 00:18:34,990
case for<font color="#CCCCCC"> you</font>

394
00:18:26,450 --> 00:18:39,470
but yeah getting bit code<font color="#CCCCCC"> that's I think</font>

395
00:18:34,990 --> 00:18:41,180
yeah<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the trickiest topic one of</font>

396
00:18:39,470 --> 00:18:43,160
the kind<font color="#CCCCCC"> of selling point of LLVM that</font>

397
00:18:41,180 --> 00:18:45,080
it has the bit code<font color="#E5E5E5"> that can be shared</font>

398
00:18:43,160 --> 00:18:48,710
<font color="#CCCCCC">across different compilers and so on</font>

399
00:18:45,080 --> 00:18:50,389
that's still the case<font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah if you</font>

400
00:18:48,710 --> 00:18:52,520
want<font color="#E5E5E5"> to build some tooling there is not</font>

401
00:18:50,390 --> 00:18:55,190
really<font color="#CCCCCC"> easy way to get this bit code</font>

402
00:18:52,520 --> 00:18:57,410
depending<font color="#E5E5E5"> on the compiler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so on but</font>

403
00:18:55,190 --> 00:19:00,110
there are some ways to<font color="#CCCCCC"> do it for Clank</font>

404
00:18:57,410 --> 00:19:01,250
at least yeah for other compilers

405
00:19:00,110 --> 00:19:04,490
languages

406
00:19:01,250 --> 00:19:08,900
yeah please<font color="#E5E5E5"> talk to</font><font color="#CCCCCC"> you to developers of</font>

407
00:19:04,490 --> 00:19:11,960
those<font color="#E5E5E5"> languages so normally like</font>

408
00:19:08,900 --> 00:19:13,610
completion<font color="#E5E5E5"> flow is is like that you have</font>

409
00:19:11,960 --> 00:19:15,260
an object<font color="#E5E5E5"> file so you call a compiler</font>

410
00:19:13,610 --> 00:19:17,629
with some<font color="#E5E5E5"> flex you have you have an</font>

411
00:19:15,260 --> 00:19:21,260
object<font color="#E5E5E5"> file then you call a linker and</font>

412
00:19:17,630 --> 00:19:24,020
<font color="#CCCCCC">you get executable in the end so it's</font>

413
00:19:21,260 --> 00:19:26,930
Clank<font color="#E5E5E5"> there is at least</font><font color="#CCCCCC"> yeah the most</font>

414
00:19:24,020 --> 00:19:30,500
<font color="#CCCCCC">famous flag so if you</font><font color="#E5E5E5"> call krinkle</font><font color="#CCCCCC"> emit</font>

415
00:19:26,930 --> 00:19:34,990
<font color="#E5E5E5">LLVM and instead</font><font color="#CCCCCC"> of object file you get</font>

416
00:19:30,500 --> 00:19:36,440
<font color="#CCCCCC">11 bit code and there is no executable</font>

417
00:19:34,990 --> 00:19:41,930
another one

418
00:19:36,440 --> 00:19:45,610
LTO so you can call LT all like -<font color="#CCCCCC"> FLT</font><font color="#E5E5E5"> oh</font>

419
00:19:41,930 --> 00:19:48,080
and you get instead of the object files

420
00:19:45,610 --> 00:19:50,000
<font color="#E5E5E5">well this will get object files but they</font>

421
00:19:48,080 --> 00:19:50,419
do not contain machine<font color="#E5E5E5"> code but they</font>

422
00:19:50,000 --> 00:19:52,250
<font color="#E5E5E5">rather</font>

423
00:19:50,420 --> 00:19:55,610
<font color="#CCCCCC">Janie Lorraine Beach coat and at the end</font>

424
00:19:52,250 --> 00:19:57,710
you have<font color="#E5E5E5"> normal executable</font><font color="#CCCCCC"> so that that</font>

425
00:19:55,610 --> 00:19:59,510
works pretty well<font color="#E5E5E5"> if you have some</font>

426
00:19:57,710 --> 00:20:01,850
well-defined<font color="#CCCCCC"> build system like</font><font color="#E5E5E5"> see make</font>

427
00:19:59,510 --> 00:20:04,580
for<font color="#CCCCCC"> example or</font><font color="#E5E5E5"> even like make files if</font>

428
00:20:01,850 --> 00:20:06,740
<font color="#E5E5E5">you have those intermediate files but if</font>

429
00:20:04,580 --> 00:20:09,889
you<font color="#E5E5E5"> just call Clank and like ten source</font>

430
00:20:06,740 --> 00:20:13,280
files then there is no output<font color="#E5E5E5"> of bit</font>

431
00:20:09,890 --> 00:20:16,100
code or no output with object files then

432
00:20:13,280 --> 00:20:18,260
it doesn't<font color="#CCCCCC"> work and the</font><font color="#E5E5E5"> best approach</font>

433
00:20:16,100 --> 00:20:21,050
that<font color="#E5E5E5"> actually we use were we adopted</font>

434
00:20:18,260 --> 00:20:23,420
recently the<font color="#CCCCCC"> eff and</font><font color="#E5E5E5"> best bit code so if</font>

435
00:20:21,050 --> 00:20:26,540
you call<font color="#E5E5E5"> this code then at any stage</font>

436
00:20:23,420 --> 00:20:31,460
<font color="#CCCCCC">your</font><font color="#E5E5E5"> other object files or executables</font>

437
00:20:26,540 --> 00:20:34,610
<font color="#E5E5E5">they do contain both machine code and a</font>

438
00:20:31,460 --> 00:20:37,340
lot of en bit code and you<font color="#CCCCCC"> can actually</font>

439
00:20:34,610 --> 00:20:40,070
<font color="#E5E5E5">extract it easily so there is a tool</font>

440
00:20:37,340 --> 00:20:43,659
called<font color="#E5E5E5"> leap</font><font color="#CCCCCC"> ABC think it stands</font><font color="#E5E5E5"> for</font>

441
00:20:40,070 --> 00:20:46,850
<font color="#CCCCCC">wetted bit code so what it</font><font color="#E5E5E5"> does it just</font>

442
00:20:43,660 --> 00:20:47,710
yeah extracts the<font color="#CCCCCC"> bit code file from an</font>

443
00:20:46,850 --> 00:20:50,750
executable

444
00:20:47,710 --> 00:20:54,440
yeah<font color="#CCCCCC"> worst spots</font><font color="#E5E5E5"> on Linux and Mac</font><font color="#CCCCCC"> and</font>

445
00:20:50,750 --> 00:20:56,450
FreeBSD<font color="#CCCCCC"> I yet the tool the original tool</font>

446
00:20:54,440 --> 00:20:58,430
works it just<font color="#CCCCCC"> does extract the files and</font>

447
00:20:56,450 --> 00:21:00,110
stores them locally on disk<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that you</font>

448
00:20:58,430 --> 00:21:04,760
can do some post-processing on them and

449
00:21:00,110 --> 00:21:06,919
<font color="#E5E5E5">I made of work to make it</font><font color="#CCCCCC"> work was in</font>

450
00:21:04,760 --> 00:21:09,740
memory<font color="#E5E5E5"> so everything happens in memory</font>

451
00:21:06,920 --> 00:21:12,530
as<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> as I showed in</font><font color="#E5E5E5"> at the very</font>

452
00:21:09,740 --> 00:21:15,470
beginning so yeah super straightforward

453
00:21:12,530 --> 00:21:17,750
<font color="#CCCCCC">I will be up streaming the patches</font><font color="#E5E5E5"> soon</font>

454
00:21:15,470 --> 00:21:19,610
so the<font color="#E5E5E5"> original version should get the</font>

455
00:21:17,750 --> 00:21:20,350
support<font color="#E5E5E5"> if yeah</font><font color="#CCCCCC"> if we agree with</font>

456
00:21:19,610 --> 00:21:22,909
<font color="#E5E5E5">maintainer</font>

457
00:21:20,350 --> 00:21:26,149
but<font color="#E5E5E5"> otherwise you can yeah you can check</font>

458
00:21:22,910 --> 00:21:27,830
the things out oh yeah yeah these are

459
00:21:26,150 --> 00:21:29,330
examples<font color="#CCCCCC"> how it works</font><font color="#E5E5E5"> so you just call</font>

460
00:21:27,830 --> 00:21:34,879
you<font color="#CCCCCC"> see</font><font color="#E5E5E5"> you till and then you get a</font>

461
00:21:29,330 --> 00:21:39,439
bunch of bit code files or<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> you just</font>

462
00:21:34,880 --> 00:21:43,850
call the tool<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> they lost the last</font>

463
00:21:39,440 --> 00:21:45,590
<font color="#CCCCCC">point</font><font color="#E5E5E5"> Multi white support so we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> we</font>

464
00:21:43,850 --> 00:21:47,510
are not that many<font color="#E5E5E5"> people working on this</font>

465
00:21:45,590 --> 00:21:50,270
project<font color="#E5E5E5"> and its really</font><font color="#CCCCCC"> tough to to</font>

466
00:21:47,510 --> 00:21:52,129
<font color="#E5E5E5">maintain these things so I can just</font>

467
00:21:50,270 --> 00:21:55,430
recommend like say<font color="#E5E5E5"> two words like</font>

468
00:21:52,130 --> 00:21:58,730
backgrounds and ansible<font color="#E5E5E5"> just like the</font>

469
00:21:55,430 --> 00:22:01,460
way<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> so what when</font><font color="#E5E5E5"> Graham</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> it's</font>

470
00:21:58,730 --> 00:22:03,920
just<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> that operates or</font><font color="#E5E5E5"> that</font>

471
00:22:01,460 --> 00:22:10,280
helps you manage virtual machines

472
00:22:03,920 --> 00:22:12,410
it supports<font color="#CCCCCC"> mutual</font><font color="#E5E5E5"> box</font><font color="#CCCCCC"> VMware docker I</font>

473
00:22:10,280 --> 00:22:14,450
think yeah anything<font color="#CCCCCC"> you can imagine</font><font color="#E5E5E5"> in</font>

474
00:22:12,410 --> 00:22:16,690
supports<font color="#E5E5E5"> so in that case I have</font><font color="#CCCCCC"> just</font>

475
00:22:14,450 --> 00:22:20,960
like<font color="#CCCCCC"> one file</font><font color="#E5E5E5"> was that many lines that</font>

476
00:22:16,690 --> 00:22:23,660
<font color="#E5E5E5">yeah then I run</font><font color="#CCCCCC"> background</font><font color="#E5E5E5"> up</font>

477
00:22:20,960 --> 00:22:26,360
<font color="#E5E5E5">Debian for example and I have a virtual</font>

478
00:22:23,660 --> 00:22:28,010
<font color="#CCCCCC">machine running ready with</font><font color="#E5E5E5"> everything I</font>

479
00:22:26,360 --> 00:22:29,240
need on it<font color="#E5E5E5"> so I can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> start debugging</font>

480
00:22:28,010 --> 00:22:31,280
<font color="#CCCCCC">right</font><font color="#E5E5E5"> away</font>

481
00:22:29,240 --> 00:22:34,070
I can SSH into<font color="#E5E5E5"> it and then when I'm done</font>

482
00:22:31,280 --> 00:22:36,649
I<font color="#CCCCCC"> just can destroy to dispose the memory</font>

483
00:22:34,070 --> 00:22:38,990
and the good<font color="#E5E5E5"> part of it that if you have</font>

484
00:22:36,650 --> 00:22:41,860
<font color="#CCCCCC">some ID</font><font color="#E5E5E5"> that supports remote debugging</font>

485
00:22:38,990 --> 00:22:46,640
<font color="#E5E5E5">so as for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> still</font><font color="#CCCCCC"> on does have it</font>

486
00:22:41,860 --> 00:22:48,979
<font color="#CCCCCC">you can run this set up this virtual</font>

487
00:22:46,640 --> 00:22:51,470
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> then connect</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> salon and</font>

488
00:22:48,980 --> 00:22:54,290
you're like this is<font color="#CCCCCC"> cities for</font><font color="#E5E5E5"> example</font>

489
00:22:51,470 --> 00:22:56,900
how I work on Mac I do have native

490
00:22:54,290 --> 00:22:58,909
<font color="#CCCCCC">experience as a Mac user but I'm running</font>

491
00:22:56,900 --> 00:23:02,690
into bugging my<font color="#E5E5E5"> software on Linux it's</font>

492
00:22:58,910 --> 00:23:05,900
it's<font color="#CCCCCC"> very useful</font><font color="#E5E5E5"> yeah the second part is</font>

493
00:23:02,690 --> 00:23:08,450
ansible<font color="#E5E5E5"> so here you may notice like vm</font>

494
00:23:05,900 --> 00:23:09,169
<font color="#E5E5E5">blah la provision ansible and then a</font>

495
00:23:08,450 --> 00:23:12,559
playbook

496
00:23:09,169 --> 00:23:15,020
<font color="#CCCCCC">ubuntu llamo so what play books are</font><font color="#E5E5E5"> it</font>

497
00:23:12,559 --> 00:23:20,980
<font color="#E5E5E5">just like set of some tasks that needs</font>

498
00:23:15,020 --> 00:23:22,418
to be done this<font color="#E5E5E5"> is an example of things</font>

499
00:23:20,980 --> 00:23:25,340
<font color="#CCCCCC">yep</font>

500
00:23:22,419 --> 00:23:28,640
it's just<font color="#CCCCCC"> the mo file does something and</font>

501
00:23:25,340 --> 00:23:30,740
so for in our case most of<font color="#E5E5E5"> the parts</font>

502
00:23:28,640 --> 00:23:34,640
they are<font color="#E5E5E5"> shared between all the other</font>

503
00:23:30,740 --> 00:23:37,270
operating systems like<font color="#CCCCCC"> freebsd yeah</font><font color="#E5E5E5"> in</font>

504
00:23:34,640 --> 00:23:40,309
<font color="#E5E5E5">linux but it's like a difference on</font><font color="#CCCCCC"> mac</font>

505
00:23:37,270 --> 00:23:42,650
<font color="#E5E5E5">but the cool</font><font color="#CCCCCC"> part about it</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> i can</font>

506
00:23:40,309 --> 00:23:46,040
also run this the ansible think locally

507
00:23:42,650 --> 00:23:51,040
so for example if I get a new Mac

508
00:23:46,040 --> 00:23:56,440
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> I just use our Mac like make us</font>

509
00:23:51,040 --> 00:23:56,440
tasks<font color="#E5E5E5"> to to to set up things locally</font>

510
00:23:56,890 --> 00:24:04,320
yeah<font color="#CCCCCC"> what else</font>

511
00:24:01,890 --> 00:24:08,670
yeah the other benefits<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this the</font>

512
00:24:04,320 --> 00:24:10,919
ansible<font color="#E5E5E5"> scripts or play books that you</font>

513
00:24:08,670 --> 00:24:17,360
can also<font color="#E5E5E5"> use it to like on CI and yeah</font>

514
00:24:10,920 --> 00:24:19,950
everywhere you want so at this<font color="#E5E5E5"> point</font>

515
00:24:17,360 --> 00:24:20,428
<font color="#CCCCCC">yeah I think that's that's pretty</font><font color="#E5E5E5"> much</font>

516
00:24:19,950 --> 00:24:24,120
it

517
00:24:20,429 --> 00:24:27,299
<font color="#CCCCCC">so I try to to come up with things that</font>

518
00:24:24,120 --> 00:24:29,909
are general<font color="#CCCCCC"> enough to</font><font color="#E5E5E5"> be applicable for</font>

519
00:24:27,299 --> 00:24:32,460
<font color="#CCCCCC">everyone</font><font color="#E5E5E5"> so this is not all</font><font color="#CCCCCC"> the problems</font>

520
00:24:29,910 --> 00:24:34,590
<font color="#CCCCCC">or issues we have solved so far</font><font color="#E5E5E5"> but I</font>

521
00:24:32,460 --> 00:24:39,530
hope<font color="#CCCCCC"> that it will help you to build</font>

522
00:24:34,590 --> 00:24:47,359
<font color="#E5E5E5">better tooling around</font><font color="#CCCCCC"> LLVM thank you</font><font color="#E5E5E5"> and</font>

523
00:24:39,530 --> 00:24:47,359
[Applause]

524
00:25:08,809 --> 00:25:16,049
so the<font color="#E5E5E5"> question is if I had any issues</font>

525
00:25:12,540 --> 00:25:18,149
<font color="#CCCCCC">with the linkage order</font><font color="#E5E5E5"> when using</font><font color="#CCCCCC"> LLVM</font>

526
00:25:16,049 --> 00:25:19,980
config<font color="#E5E5E5"> and yes I decided not to</font><font color="#CCCCCC"> include</font>

527
00:25:18,150 --> 00:25:24,390
it into<font color="#E5E5E5"> the slides because that that's a</font>

528
00:25:19,980 --> 00:25:27,809
mess<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> had this</font><font color="#E5E5E5"> problem yeah we've</font>

529
00:25:24,390 --> 00:25:30,030
<font color="#E5E5E5">like with different versions of</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> and</font>

530
00:25:27,809 --> 00:25:33,870
Clank there<font color="#E5E5E5"> were like some problems with</font>

531
00:25:30,030 --> 00:25:36,690
<font color="#CCCCCC">different order of things so we ended up</font>

532
00:25:33,870 --> 00:25:40,469
wrapping everything<font color="#CCCCCC"> in like start group</font>

533
00:25:36,690 --> 00:25:45,059
and group linker flags or<font color="#CCCCCC"> on Mac it was</font>

534
00:25:40,470 --> 00:25:47,429
like something like<font color="#E5E5E5"> Josh</font><font color="#CCCCCC"> W like whole</font>

535
00:25:45,059 --> 00:25:48,840
archive or something<font color="#E5E5E5"> so I mean</font><font color="#CCCCCC"> it's just</font>

536
00:25:47,429 --> 00:25:52,740
<font color="#E5E5E5">like super hard</font><font color="#CCCCCC"> to support because you</font>

537
00:25:48,840 --> 00:25:55,860
<font color="#CCCCCC">have if Mac OS then you have one bunch</font>

538
00:25:52,740 --> 00:25:59,880
of scripts<font color="#E5E5E5"> else if Linux other and and</font>

539
00:25:55,860 --> 00:26:03,770
so on<font color="#E5E5E5"> so forth but was</font><font color="#CCCCCC"> see make no</font>

540
00:25:59,880 --> 00:26:03,770
problems<font color="#E5E5E5"> whatsoever just just works</font>

541
00:26:06,749 --> 00:26:12,899
yep<font color="#E5E5E5"> thank you yeah</font>

542
00:26:20,080 --> 00:26:28,550
yeah so the<font color="#CCCCCC"> question is that why</font><font color="#E5E5E5"> don't</font>

543
00:26:24,710 --> 00:26:33,590
we use or cheats or<font color="#CCCCCC"> MJ idiot and come</font><font color="#E5E5E5"> up</font>

544
00:26:28,550 --> 00:26:35,540
with our own<font color="#CCCCCC"> solution so one of</font><font color="#E5E5E5"> the</font>

545
00:26:33,590 --> 00:26:37,760
problems<font color="#CCCCCC"> that we had with</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> sygyt</font>

546
00:26:35,540 --> 00:26:40,190
<font color="#E5E5E5">initially that it requires you to give</font>

547
00:26:37,760 --> 00:26:41,870
up ownership<font color="#CCCCCC"> of all the modules so for</font>

548
00:26:40,190 --> 00:26:43,670
<font color="#E5E5E5">all the modules it's like unique pointer</font>

549
00:26:41,870 --> 00:26:45,739
and you need to give up it so you don't

550
00:26:43,670 --> 00:26:48,230
own them<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in our case</font><font color="#CCCCCC"> we</font>

551
00:26:45,740 --> 00:26:50,900
wanted to own it<font color="#E5E5E5"> hardly so we cannot use</font>

552
00:26:48,230 --> 00:26:52,550
<font color="#E5E5E5">them said yet therefore we switch to</font>

553
00:26:50,900 --> 00:26:56,770
<font color="#CCCCCC">object</font><font color="#E5E5E5"> because cities have this problem</font>

554
00:26:52,550 --> 00:26:59,600
<font color="#E5E5E5">initially</font><font color="#CCCCCC"> but as the time grows like it</font>

555
00:26:56,770 --> 00:27:03,070
<font color="#E5E5E5">there was this problem as</font><font color="#CCCCCC"> well and the</font>

556
00:26:59,600 --> 00:27:06,310
<font color="#E5E5E5">API changed drastically so it was just</font>

557
00:27:03,070 --> 00:27:10,090
too<font color="#E5E5E5"> much overhead to actually support</font>

558
00:27:06,310 --> 00:27:12,590
<font color="#E5E5E5">our own kind</font><font color="#CCCCCC"> of interface to the object</font>

559
00:27:10,090 --> 00:27:14,360
so and we don't need<font color="#E5E5E5"> most of the</font>

560
00:27:12,590 --> 00:27:17,959
<font color="#CCCCCC">features that</font><font color="#E5E5E5"> it provides like</font><font color="#CCCCCC"> on own</font>

561
00:27:14,360 --> 00:27:19,010
request completion and yeah we just

562
00:27:17,960 --> 00:27:26,840
<font color="#CCCCCC">launched programmable</font>

563
00:27:19,010 --> 00:27:28,740
<font color="#CCCCCC">and that's it so thank</font><font color="#E5E5E5"> you enjoy the day</font>

564
00:27:26,840 --> 00:27:35,569
<font color="#E5E5E5">and yeah see you around</font>

565
00:27:28,740 --> 00:27:35,569
[Applause]

