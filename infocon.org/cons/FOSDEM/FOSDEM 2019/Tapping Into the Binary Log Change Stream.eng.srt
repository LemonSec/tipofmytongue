1
00:00:05,100 --> 00:00:14,260
<font color="#CCCCCC">all right hello everyone my name is</font>

2
00:00:09,670 --> 00:00:17,050
<font color="#CCCCCC">Louis</font><font color="#E5E5E5"> and I've been working on my skull</font>

3
00:00:14,260 --> 00:00:20,800
replication for a little over<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> years</font>

4
00:00:17,050 --> 00:00:23,770
now<font color="#CCCCCC"> for those who don't know me I'm</font>

5
00:00:20,800 --> 00:00:26,200
Louise I would lead the replication team

6
00:00:23,770 --> 00:00:27,189
I've been<font color="#E5E5E5"> around for</font><font color="#CCCCCC"> ten years I'm based</font>

7
00:00:26,200 --> 00:00:31,509
out of Portugal

8
00:00:27,190 --> 00:00:34,960
I've spoken here at<font color="#E5E5E5"> FOSDEM</font><font color="#CCCCCC"> a few times</font>

9
00:00:31,510 --> 00:00:39,699
already<font color="#CCCCCC"> it's one</font><font color="#E5E5E5"> of the places I like to</font>

10
00:00:34,960 --> 00:00:43,809
<font color="#E5E5E5">come and</font><font color="#CCCCCC"> speak</font><font color="#E5E5E5"> about much more technical</font>

11
00:00:39,699 --> 00:00:48,550
deeper<font color="#E5E5E5"> kind of things</font><font color="#CCCCCC"> and I could talk</font>

12
00:00:43,809 --> 00:00:52,059
<font color="#CCCCCC">about replication for hours I think that</font>

13
00:00:48,550 --> 00:00:55,479
some of<font color="#CCCCCC"> my</font><font color="#E5E5E5"> colleagues are well aware of</font>

14
00:00:52,059 --> 00:00:58,690
<font color="#CCCCCC">that but</font><font color="#E5E5E5"> today I'll</font><font color="#CCCCCC"> just be talking</font>

15
00:00:55,479 --> 00:01:02,049
<font color="#CCCCCC">about a very</font><font color="#E5E5E5"> specific thing which is the</font>

16
00:00:58,690 --> 00:01:04,479
binary<font color="#CCCCCC"> log</font><font color="#E5E5E5"> and more specifically how</font><font color="#CCCCCC"> the</font>

17
00:01:02,049 --> 00:01:06,909
binary log<font color="#E5E5E5"> is created inside the server</font>

18
00:01:04,479 --> 00:01:09,000
<font color="#CCCCCC">how it is utilized by</font><font color="#E5E5E5"> different</font>

19
00:01:06,909 --> 00:01:11,289
components inside<font color="#E5E5E5"> the server including</font>

20
00:01:09,000 --> 00:01:14,200
replication and<font color="#E5E5E5"> group application and</font>

21
00:01:11,289 --> 00:01:17,229
how<font color="#E5E5E5"> we can look into this framework that</font>

22
00:01:14,200 --> 00:01:21,130
<font color="#CCCCCC">is it exists inside the server</font><font color="#E5E5E5"> and maybe</font>

23
00:01:17,229 --> 00:01:23,439
end up this<font color="#E5E5E5"> presentation with a very</font>

24
00:01:21,130 --> 00:01:25,990
<font color="#E5E5E5">little bit a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of boilerplate</font>

25
00:01:23,439 --> 00:01:28,210
code if you will you know to<font color="#E5E5E5"> create</font>

26
00:01:25,990 --> 00:01:33,548
<font color="#E5E5E5">maybe some plugin that can actually tap</font>

27
00:01:28,210 --> 00:01:36,130
<font color="#CCCCCC">into the servant and extract</font><font color="#E5E5E5"> this so</font>

28
00:01:33,549 --> 00:01:38,500
I'll start<font color="#E5E5E5"> just of course I'll talk</font><font color="#CCCCCC"> a</font>

29
00:01:36,130 --> 00:01:39,609
little<font color="#CCCCCC"> bit of MySQL replication but not</font>

30
00:01:38,500 --> 00:01:41,829
that<font color="#E5E5E5"> much</font><font color="#CCCCCC"> I promise</font>

31
00:01:39,609 --> 00:01:44,829
and then I'll describe the<font color="#CCCCCC"> binary log</font>

32
00:01:41,829 --> 00:01:48,130
<font color="#E5E5E5">I'm pretty sure that everybody know here</font>

33
00:01:44,829 --> 00:01:51,130
knows what<font color="#CCCCCC"> the bin log is for short</font>

34
00:01:48,130 --> 00:01:55,350
actually<font color="#E5E5E5"> one raise of hands who</font><font color="#CCCCCC"> here</font>

35
00:01:51,130 --> 00:01:55,350
uses<font color="#E5E5E5"> statement based replication only</font>

36
00:01:55,469 --> 00:02:02,589
who here uses statement based

37
00:01:57,820 --> 00:02:06,309
replication and who here uses<font color="#E5E5E5"> row based</font>

38
00:02:02,590 --> 00:02:09,039
replication<font color="#E5E5E5"> dress right so we will also</font>

39
00:02:06,310 --> 00:02:11,170
be focusing on row based replication<font color="#CCCCCC"> for</font>

40
00:02:09,038 --> 00:02:14,100
obvious reasons when it comes to a

41
00:02:11,170 --> 00:02:18,010
change data capture<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the bin log</font>

42
00:02:14,100 --> 00:02:22,159
and then I'll try<font color="#E5E5E5"> to go into this</font>

43
00:02:18,010 --> 00:02:23,959
looking into<font color="#E5E5E5"> a couple of use cases the</font>

44
00:02:22,159 --> 00:02:26,780
MySQL Gruber application<font color="#CCCCCC"> plug-in for</font>

45
00:02:23,959 --> 00:02:28,879
instance which extracts<font color="#E5E5E5"> the changes from</font>

46
00:02:26,780 --> 00:02:32,000
<font color="#E5E5E5">the</font><font color="#CCCCCC"> surface server and pushes it out to</font>

47
00:02:28,879 --> 00:02:34,340
<font color="#E5E5E5">this</font><font color="#CCCCCC"> paxos communication framework and</font>

48
00:02:32,000 --> 00:02:36,590
<font color="#CCCCCC">you know does all this</font><font color="#E5E5E5"> coordination</font><font color="#CCCCCC"> then</font>

49
00:02:34,340 --> 00:02:38,120
decide something and you know tells us

50
00:02:36,590 --> 00:02:40,700
<font color="#E5E5E5">every to commit or abort transactions</font>

51
00:02:38,120 --> 00:02:42,319
and<font color="#E5E5E5"> so on and then I'll conclude the</font>

52
00:02:40,700 --> 00:02:46,010
session<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is basically the plan for</font>

53
00:02:42,319 --> 00:02:49,250
this<font color="#CCCCCC"> 20-minute</font><font color="#E5E5E5"> session so MySQL</font>

54
00:02:46,010 --> 00:02:51,858
<font color="#CCCCCC">replication this is a very common slide</font>

55
00:02:49,250 --> 00:02:54,890
that I<font color="#CCCCCC"> usually pull up on</font><font color="#E5E5E5"> on our</font>

56
00:02:51,859 --> 00:02:56,870
sessions<font color="#CCCCCC"> replication is very simple</font>

57
00:02:54,890 --> 00:02:58,160
<font color="#CCCCCC">master</font><font color="#E5E5E5"> slave and then there's a log</font><font color="#CCCCCC"> that</font>

58
00:02:56,870 --> 00:03:01,519
is<font color="#E5E5E5"> shipped</font><font color="#CCCCCC"> around this log contains</font>

59
00:02:58,160 --> 00:03:04,700
records the changes<font color="#E5E5E5"> that happened in the</font>

60
00:03:01,519 --> 00:03:06,319
<font color="#E5E5E5">primary or the master and</font><font color="#CCCCCC"> is this these</font>

61
00:03:04,700 --> 00:03:08,780
changes<font color="#E5E5E5"> are then propagated</font><font color="#CCCCCC"> to the</font>

62
00:03:06,319 --> 00:03:12,500
<font color="#E5E5E5">slaves and slave applies them and if it</font>

63
00:03:08,780 --> 00:03:14,569
you<font color="#E5E5E5"> know generate its own change log its</font>

64
00:03:12,500 --> 00:03:16,040
own<font color="#E5E5E5"> binary log then you can build all</font>

65
00:03:14,569 --> 00:03:18,140
these different topologies that<font color="#E5E5E5"> for</font>

66
00:03:16,040 --> 00:03:20,390
instance<font color="#E5E5E5"> Peter was talking about earlier</font>

67
00:03:18,140 --> 00:03:24,200
<font color="#E5E5E5">for better for worse MySQL replication</font>

68
00:03:20,390 --> 00:03:27,589
is almost like<font color="#E5E5E5"> a Swiss Army knife or a</font>

69
00:03:24,200 --> 00:03:30,349
loaded gun<font color="#E5E5E5"> as Peter said as well so you</font>

70
00:03:27,590 --> 00:03:32,389
can hurt yourself<font color="#CCCCCC"> plenty with it</font><font color="#E5E5E5"> but it</font>

71
00:03:30,349 --> 00:03:35,828
can really<font color="#E5E5E5"> get you out</font><font color="#CCCCCC"> of some nasty</font>

72
00:03:32,389 --> 00:03:38,120
problem situation that you may<font color="#E5E5E5"> run</font><font color="#CCCCCC"> into</font>

73
00:03:35,829 --> 00:03:41,239
the<font color="#E5E5E5"> interesting thing that we're talking</font>

74
00:03:38,120 --> 00:03:43,790
about<font color="#CCCCCC"> here today</font><font color="#E5E5E5"> is the binary</font><font color="#CCCCCC"> log and</font>

75
00:03:41,239 --> 00:03:46,609
the master generates a binary<font color="#E5E5E5"> log the</font>

76
00:03:43,790 --> 00:03:47,929
one that is shipped around<font color="#E5E5E5"> and the slave</font>

77
00:03:46,609 --> 00:03:50,810
also generates the binary log

78
00:03:47,930 --> 00:03:53,690
there's the persistent<font color="#E5E5E5"> buffer which we</font>

79
00:03:50,810 --> 00:03:55,430
typically<font color="#CCCCCC"> call</font><font color="#E5E5E5"> the the the</font><font color="#CCCCCC"> relay log on</font>

80
00:03:53,690 --> 00:03:58,400
the slave which is basically you know

81
00:03:55,430 --> 00:04:02,449
<font color="#E5E5E5">get the changes store them on disk while</font>

82
00:03:58,400 --> 00:04:04,910
<font color="#E5E5E5">I'm keeping trying to apply the the</font><font color="#CCCCCC"> log</font>

83
00:04:02,449 --> 00:04:07,160
and you know if just persist them on

84
00:04:04,910 --> 00:04:08,750
this quality while this is<font color="#E5E5E5"> going in case</font>

85
00:04:07,160 --> 00:04:11,480
so that<font color="#CCCCCC"> we don't saturate for instance</font>

86
00:04:08,750 --> 00:04:13,430
memory this was very important long time

87
00:04:11,480 --> 00:04:15,668
ago<font color="#E5E5E5"> but not so much nowadays because</font>

88
00:04:13,430 --> 00:04:18,079
<font color="#E5E5E5">nowadays we</font><font color="#CCCCCC"> have parallel slaves and</font>

89
00:04:15,669 --> 00:04:21,199
different fertilization schemes with

90
00:04:18,079 --> 00:04:23,449
<font color="#E5E5E5">right sets we can be almost we can come</font>

91
00:04:21,199 --> 00:04:25,669
to an<font color="#CCCCCC"> almost optimal execution history</font>

92
00:04:23,449 --> 00:04:27,740
in terms<font color="#E5E5E5"> of paralyzation so this</font>

93
00:04:25,669 --> 00:04:30,289
persistent buffer is<font color="#E5E5E5"> not so much needed</font>

94
00:04:27,740 --> 00:04:31,110
<font color="#CCCCCC">anymore as it used to be but</font><font color="#E5E5E5"> it's still</font>

95
00:04:30,289 --> 00:04:33,599
there

96
00:04:31,110 --> 00:04:37,139
and we can build multiple replication

97
00:04:33,599 --> 00:04:41,389
topologies you know<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> primary</font>

98
00:04:37,139 --> 00:04:46,439
secondary or<font color="#E5E5E5"> master slaves</font><font color="#CCCCCC"> a chain or a</font>

99
00:04:41,389 --> 00:04:48,780
tree or<font color="#CCCCCC"> a star or a circle or or a group</font>

100
00:04:46,439 --> 00:04:51,900
<font color="#E5E5E5">now with group replication where you we</font>

101
00:04:48,780 --> 00:04:53,609
can have external secondaries from the

102
00:04:51,900 --> 00:04:56,068
group so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can mix and match group</font>

103
00:04:53,610 --> 00:04:57,900
replication with regular<font color="#CCCCCC"> a sequence</font>

104
00:04:56,069 --> 00:05:00,090
replication or you can have an external

105
00:04:57,900 --> 00:05:03,900
primary and then replicate<font color="#E5E5E5"> into a group</font>

106
00:05:00,090 --> 00:05:05,669
right and why is this important in<font color="#E5E5E5"> this</font>

107
00:05:03,900 --> 00:05:07,799
session<font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> because we</font><font color="#CCCCCC"> can</font>

108
00:05:05,669 --> 00:05:10,948
have we can<font color="#E5E5E5"> have all these</font><font color="#CCCCCC"> combinations</font>

109
00:05:07,800 --> 00:05:14,009
of topologies together<font color="#CCCCCC"> and therefore we</font>

110
00:05:10,949 --> 00:05:15,659
<font color="#E5E5E5">can have dedicated instances of mice</font><font color="#CCCCCC"> QL</font>

111
00:05:14,009 --> 00:05:19,259
<font color="#CCCCCC">whether we can we can actually</font><font color="#E5E5E5"> play</font>

112
00:05:15,659 --> 00:05:22,770
<font color="#CCCCCC">around to do some</font><font color="#E5E5E5"> interesting things</font>

113
00:05:19,259 --> 00:05:25,020
related<font color="#CCCCCC"> to change data capture</font><font color="#E5E5E5"> where we</font>

114
00:05:22,770 --> 00:05:26,789
don't disturb the rest of the<font color="#E5E5E5"> topology</font>

115
00:05:25,020 --> 00:05:28,198
<font color="#CCCCCC">we</font><font color="#E5E5E5"> I've seen a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> over the</font><font color="#CCCCCC"> years</font>

116
00:05:26,789 --> 00:05:30,360
<font color="#E5E5E5">I've seen</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of people</font><font color="#CCCCCC"> doing these</font>

117
00:05:28,199 --> 00:05:32,819
<font color="#E5E5E5">kinds of things like having</font><font color="#CCCCCC"> a dedicated</font>

118
00:05:30,360 --> 00:05:35,129
slave with roadways replication enabled

119
00:05:32,819 --> 00:05:37,710
to be able<font color="#CCCCCC"> to mine the binary log</font>

120
00:05:35,129 --> 00:05:42,229
<font color="#E5E5E5">transform it loaded</font><font color="#CCCCCC"> into some other</font>

121
00:05:37,710 --> 00:05:45,239
system like a<font color="#E5E5E5"> dupe or</font><font color="#CCCCCC"> or something</font><font color="#E5E5E5"> else</font>

122
00:05:42,229 --> 00:05:48,270
<font color="#E5E5E5">okay so the binary</font><font color="#CCCCCC"> log the binary</font><font color="#E5E5E5"> log is</font>

123
00:05:45,240 --> 00:05:50,759
used for replication<font color="#E5E5E5"> but not only</font>

124
00:05:48,270 --> 00:05:52,560
<font color="#E5E5E5">replication point in time recovery</font>

125
00:05:50,759 --> 00:05:54,900
integrating with other<font color="#E5E5E5"> technologies</font>

126
00:05:52,560 --> 00:05:56,460
rolling<font color="#E5E5E5"> upgrades is a very important</font>

127
00:05:54,900 --> 00:05:59,279
thing when<font color="#CCCCCC"> it comes to rolling</font><font color="#E5E5E5"> up Chris</font>

128
00:05:56,460 --> 00:06:01,169
because it makes it so easier to just do

129
00:05:59,279 --> 00:06:04,349
a<font color="#E5E5E5"> rolling upgrade on</font><font color="#CCCCCC"> your topology</font><font color="#E5E5E5"> and</font>

130
00:06:01,169 --> 00:06:07,620
more<font color="#E5E5E5"> and as I said we're focusing on</font>

131
00:06:04,349 --> 00:06:10,409
<font color="#CCCCCC">robust replication format</font><font color="#E5E5E5"> because it's a</font>

132
00:06:07,620 --> 00:06:14,490
<font color="#CCCCCC">feature rich it's a it's a feature rich</font>

133
00:06:10,409 --> 00:06:16,409
format to<font color="#E5E5E5"> be able to load data capture</font>

134
00:06:14,490 --> 00:06:18,659
the changes that happen inside<font color="#CCCCCC"> the</font>

135
00:06:16,409 --> 00:06:21,419
server<font color="#E5E5E5"> as they are recorded in the in</font>

136
00:06:18,659 --> 00:06:23,729
the bin log over<font color="#CCCCCC"> the years</font><font color="#E5E5E5"> the bin log</font>

137
00:06:21,419 --> 00:06:26,400
or the<font color="#E5E5E5"> metadata that</font><font color="#CCCCCC"> we put into the bin</font>

138
00:06:23,729 --> 00:06:28,560
log format in<font color="#CCCCCC"> role-based</font><font color="#E5E5E5"> for it sorry</font>

139
00:06:26,400 --> 00:06:32,128
over the years the the<font color="#E5E5E5"> metadata that</font><font color="#CCCCCC"> we</font>

140
00:06:28,560 --> 00:06:34,560
put in the bin log in<font color="#E5E5E5"> row format has</font>

141
00:06:32,129 --> 00:06:37,310
been extended so that<font color="#E5E5E5"> we also make</font><font color="#CCCCCC"> it</font>

142
00:06:34,560 --> 00:06:40,279
easier<font color="#CCCCCC"> for you guys that are</font><font color="#E5E5E5"> actually</font>

143
00:06:37,310 --> 00:06:42,990
implementing<font color="#E5E5E5"> these special cases</font><font color="#CCCCCC"> of</font>

144
00:06:40,279 --> 00:06:44,700
capturing and loading and transforming

145
00:06:42,990 --> 00:06:46,980
the bin log and loading it<font color="#E5E5E5"> into</font>

146
00:06:44,700 --> 00:06:48,930
something<font color="#E5E5E5"> else becomes easier</font><font color="#CCCCCC"> for</font>

147
00:06:46,980 --> 00:06:51,630
instance in<font color="#CCCCCC"> NATO we have more metadata</font>

148
00:06:48,930 --> 00:06:53,430
when<font color="#CCCCCC"> it comes to the</font><font color="#E5E5E5"> table definitions</font>

149
00:06:51,630 --> 00:06:55,320
so the table map log event for those

150
00:06:53,430 --> 00:06:57,650
<font color="#E5E5E5">that know the contents of the bin log</font>

151
00:06:55,320 --> 00:07:01,469
has additional information<font color="#CCCCCC"> such as the</font>

152
00:06:57,650 --> 00:07:06,060
<font color="#CCCCCC">name of</font><font color="#E5E5E5"> the columns such as which fields</font>

153
00:07:01,470 --> 00:07:09,300
are the primary key<font color="#E5E5E5"> well which</font><font color="#CCCCCC"> weather</font>

154
00:07:06,060 --> 00:07:10,710
this column is signed or unsigned and<font color="#E5E5E5"> so</font>

155
00:07:09,300 --> 00:07:15,870
on<font color="#CCCCCC"> is of the character</font><font color="#E5E5E5"> size and so on</font>

156
00:07:10,710 --> 00:07:18,570
<font color="#E5E5E5">and so forth and at its core it's really</font>

157
00:07:15,870 --> 00:07:20,760
just a sequence of<font color="#E5E5E5"> events we call them</font>

158
00:07:18,570 --> 00:07:22,440
events which you<font color="#CCCCCC"> know there are some</font>

159
00:07:20,760 --> 00:07:24,900
type<font color="#CCCCCC"> of events that</font><font color="#E5E5E5"> are control events</font>

160
00:07:22,440 --> 00:07:26,400
<font color="#E5E5E5">like rotate</font><font color="#CCCCCC"> form the description</font><font color="#E5E5E5"> GT IDs</font>

161
00:07:24,900 --> 00:07:29,460
<font color="#E5E5E5">and so on and then there's the data</font>

162
00:07:26,400 --> 00:07:33,500
itself<font color="#E5E5E5"> which is carried over as you know</font>

163
00:07:29,460 --> 00:07:35,580
<font color="#E5E5E5">quite a long event or obeys row events</font>

164
00:07:33,500 --> 00:07:37,950
but in the end<font color="#CCCCCC"> it's the sequential</font>

165
00:07:35,580 --> 00:07:39,630
<font color="#E5E5E5">history of the execution that happened</font>

166
00:07:37,950 --> 00:07:44,700
on<font color="#E5E5E5"> a master with</font><font color="#CCCCCC"> the changes that</font><font color="#E5E5E5"> were</font>

167
00:07:39,630 --> 00:07:48,590
produced by<font color="#CCCCCC"> then and how is this how is</font>

168
00:07:44,700 --> 00:07:51,870
this how is<font color="#E5E5E5"> this log</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> log formed</font>

169
00:07:48,590 --> 00:07:54,210
first<font color="#E5E5E5"> of all and mind you that again I</font>

170
00:07:51,870 --> 00:07:56,490
reiterate we're focusing on row based

171
00:07:54,210 --> 00:07:58,349
replication<font color="#E5E5E5"> the way it is formed is that</font>

172
00:07:56,490 --> 00:08:02,370
when a transaction begins<font color="#E5E5E5"> and the</font>

173
00:07:58,350 --> 00:08:06,060
statement is<font color="#CCCCCC"> executed at the</font><font color="#E5E5E5"> handler</font>

174
00:08:02,370 --> 00:08:09,360
level between<font color="#CCCCCC"> the SQL layer of MySQL and</font>

175
00:08:06,060 --> 00:08:13,200
the storage engine<font color="#E5E5E5"> MySQL as many of you</font>

176
00:08:09,360 --> 00:08:14,880
<font color="#E5E5E5">probably know is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> layer that is is it's</font>

177
00:08:13,200 --> 00:08:16,890
built on a layered architecture<font color="#E5E5E5"> where</font>

178
00:08:14,880 --> 00:08:19,830
<font color="#E5E5E5">you have this SQL layer which has</font><font color="#CCCCCC"> a</font>

179
00:08:16,890 --> 00:08:22,169
runtime like environment<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on and</font>

180
00:08:19,830 --> 00:08:25,500
so forth<font color="#E5E5E5"> and then there's the handler</font>

181
00:08:22,170 --> 00:08:28,200
<font color="#E5E5E5">that separates the SQL layer from the</font>

182
00:08:25,500 --> 00:08:30,780
storage engine<font color="#E5E5E5"> itself so when the data</font>

183
00:08:28,200 --> 00:08:33,270
is propagated you know from the SQL

184
00:08:30,780 --> 00:08:36,000
layer to the storage<font color="#E5E5E5"> engine we intercept</font>

185
00:08:33,270 --> 00:08:38,549
<font color="#E5E5E5">the changes the role changes the record</font>

186
00:08:36,000 --> 00:08:41,700
<font color="#E5E5E5">changes we capture those we put those</font>

187
00:08:38,549 --> 00:08:44,880
changes in<font color="#E5E5E5"> the memory cache in a memory</font>

188
00:08:41,700 --> 00:08:48,030
buffer<font color="#E5E5E5"> and we we buffer this until the</font>

189
00:08:44,880 --> 00:08:51,689
<font color="#E5E5E5">commit comes when the commit comes what</font>

190
00:08:48,030 --> 00:08:53,370
happens is that we get this preparing

191
00:08:51,690 --> 00:08:54,780
the storage and so internally we run

192
00:08:53,370 --> 00:08:56,790
<font color="#CCCCCC">into</font><font color="#E5E5E5"> phase commit for instance between</font>

193
00:08:54,780 --> 00:08:58,439
the<font color="#E5E5E5"> being log in the storage engine but</font>

194
00:08:56,790 --> 00:09:02,370
right<font color="#E5E5E5"> before we</font>

195
00:08:58,440 --> 00:09:04,440
flush these changes to disk<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the vial</font>

196
00:09:02,370 --> 00:09:06,780
to<font color="#CCCCCC"> the bin lava</font><font color="#E5E5E5"> before we persist this</font>

197
00:09:04,440 --> 00:09:11,460
changes<font color="#E5E5E5"> this cash in the in the bin</font>

198
00:09:06,780 --> 00:09:13,140
<font color="#CCCCCC">Laval we notify a</font><font color="#E5E5E5"> plug-in</font><font color="#CCCCCC"> that or</font>

199
00:09:11,460 --> 00:09:14,300
plugins<font color="#E5E5E5"> that could be</font><font color="#CCCCCC"> listening to</font><font color="#E5E5E5"> these</font>

200
00:09:13,140 --> 00:09:16,590
changes

201
00:09:14,300 --> 00:09:18,569
think about group replication for

202
00:09:16,590 --> 00:09:20,790
instance<font color="#E5E5E5"> at this point in time</font><font color="#CCCCCC"> before we</font>

203
00:09:18,570 --> 00:09:22,740
flush<font color="#E5E5E5"> the</font><font color="#CCCCCC"> transaction to disk</font><font color="#E5E5E5"> we notify</font>

204
00:09:20,790 --> 00:09:24,990
a listener<font color="#CCCCCC"> for this change group</font>

205
00:09:22,740 --> 00:09:29,220
replication for instance and group

206
00:09:24,990 --> 00:09:31,290
replication takes this data and pushes

207
00:09:29,220 --> 00:09:34,440
<font color="#CCCCCC">it out</font><font color="#E5E5E5"> into passes by the time it get</font>

208
00:09:31,290 --> 00:09:36,360
gets back from<font color="#CCCCCC"> paxos</font><font color="#E5E5E5"> we've okay</font>

209
00:09:34,440 --> 00:09:38,490
<font color="#E5E5E5">transactions is actually committed so we</font>

210
00:09:36,360 --> 00:09:40,050
flush it to the bin log and then we

211
00:09:38,490 --> 00:09:42,780
notify plugins that might be listening

212
00:09:40,050 --> 00:09:44,370
that you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to be notified</font><font color="#E5E5E5"> once</font>

213
00:09:42,780 --> 00:09:46,829
the transaction<font color="#E5E5E5"> commits but the</font>

214
00:09:44,370 --> 00:09:49,530
important<font color="#CCCCCC"> thing here is that to note is</font>

215
00:09:46,830 --> 00:09:52,050
that the capture<font color="#CCCCCC"> is all done in memory</font>

216
00:09:49,530 --> 00:09:54,120
<font color="#CCCCCC">and by the time a transaction commits we</font>

217
00:09:52,050 --> 00:09:56,699
share<font color="#CCCCCC"> these captured</font><font color="#E5E5E5"> changes with</font>

218
00:09:54,120 --> 00:09:59,400
<font color="#E5E5E5">plugins or other listeners inside the</font>

219
00:09:56,700 --> 00:10:04,080
server and in this way you can think<font color="#E5E5E5"> of</font>

220
00:09:59,400 --> 00:10:06,270
<font color="#E5E5E5">it as</font><font color="#CCCCCC"> a you know a</font><font color="#E5E5E5"> change a an event bus</font>

221
00:10:04,080 --> 00:10:11,430
for data changes that is<font color="#E5E5E5"> running inside</font>

222
00:10:06,270 --> 00:10:15,290
<font color="#CCCCCC">the server and this stream of</font><font color="#E5E5E5"> changes</font>

223
00:10:11,430 --> 00:10:18,540
materializes as a set<font color="#E5E5E5"> of files on disk</font>

224
00:10:15,290 --> 00:10:20,640
<font color="#E5E5E5">which we typically know is you know when</font>

225
00:10:18,540 --> 00:10:22,650
we<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about the bin log is</font><font color="#E5E5E5"> really very</font>

226
00:10:20,640 --> 00:10:25,080
much<font color="#E5E5E5"> overloaded nowadays so it means</font>

227
00:10:22,650 --> 00:10:26,790
many things<font color="#E5E5E5"> and usually people when they</font>

228
00:10:25,080 --> 00:10:29,220
talk<font color="#CCCCCC"> about the bin log is a set of files</font>

229
00:10:26,790 --> 00:10:31,319
<font color="#E5E5E5">that you can go in inspect what they're</font>

230
00:10:29,220 --> 00:10:34,140
counted is with my scope in love<font color="#CCCCCC"> - like</font>

231
00:10:31,320 --> 00:10:37,200
<font color="#CCCCCC">lomi was talking earlier here today as</font>

232
00:10:34,140 --> 00:10:39,930
well but<font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> of the day the</font>

233
00:10:37,200 --> 00:10:44,970
change<font color="#E5E5E5"> stream materializes as a set of</font>

234
00:10:39,930 --> 00:10:46,439
files on disk yeah so in<font color="#E5E5E5"> there's the my</font>

235
00:10:44,970 --> 00:10:49,380
scope in<font color="#E5E5E5"> would be</font><font color="#CCCCCC"> log tool to actually</font>

236
00:10:46,440 --> 00:10:51,990
<font color="#CCCCCC">go in and open these</font><font color="#E5E5E5"> files and see</font>

237
00:10:49,380 --> 00:10:55,200
what's in there so<font color="#CCCCCC"> here's cases for</font>

238
00:10:51,990 --> 00:10:57,420
change capture<font color="#E5E5E5"> using the bin lock I'm</font>

239
00:10:55,200 --> 00:11:01,320
going to talk<font color="#E5E5E5"> about or show some</font>

240
00:10:57,420 --> 00:11:03,719
examples<font color="#CCCCCC"> of some projects that build on</font>

241
00:11:01,320 --> 00:11:05,850
the<font color="#CCCCCC"> bin log to do some kind of</font><font color="#E5E5E5"> change</font>

242
00:11:03,720 --> 00:11:08,430
propagation or some kind of procedure

243
00:11:05,850 --> 00:11:11,820
automation<font color="#E5E5E5"> that would that it's really</font>

244
00:11:08,430 --> 00:11:14,280
it that really benefits from from this

245
00:11:11,820 --> 00:11:17,490
from this log<font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to talk</font>

246
00:11:14,280 --> 00:11:19,949
<font color="#CCCCCC">about things</font><font color="#E5E5E5"> like flashback because slow</font>

247
00:11:17,490 --> 00:11:21,660
me I already<font color="#CCCCCC"> did and I</font><font color="#E5E5E5"> don't have it in</font>

248
00:11:19,950 --> 00:11:23,820
<font color="#E5E5E5">the slides</font><font color="#CCCCCC"> but that's another use case</font>

249
00:11:21,660 --> 00:11:26,339
that<font color="#CCCCCC"> you can use this</font><font color="#E5E5E5"> change log to</font>

250
00:11:23,820 --> 00:11:29,580
actually replay<font color="#CCCCCC"> it backwards</font><font color="#E5E5E5"> and do</font>

251
00:11:26,340 --> 00:11:31,620
these<font color="#CCCCCC"> things like recovering</font><font color="#E5E5E5"> if possible</font>

252
00:11:29,580 --> 00:11:34,170
recovering an instance to<font color="#CCCCCC"> a certain</font>

253
00:11:31,620 --> 00:11:39,720
<font color="#E5E5E5">point in time</font><font color="#CCCCCC"> by replaying the change</font>

254
00:11:34,170 --> 00:11:41,459
log in in revert reverse order so it's

255
00:11:39,720 --> 00:11:44,370
actually<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> compensating action</font>

256
00:11:41,460 --> 00:11:47,880
rather<font color="#E5E5E5"> than reversing okay change</font>

257
00:11:44,370 --> 00:11:51,960
<font color="#E5E5E5">tracking</font><font color="#CCCCCC"> I think ranae's somewhere</font><font color="#E5E5E5"> here</font>

258
00:11:47,880 --> 00:11:53,850
<font color="#E5E5E5">or</font><font color="#CCCCCC"> e yeah Renee so</font><font color="#E5E5E5"> Renee in proxy SQL</font>

259
00:11:51,960 --> 00:11:57,570
for instance<font color="#E5E5E5"> taps into this change</font>

260
00:11:53,850 --> 00:12:01,440
stream and in this in this proxy SQL

261
00:11:57,570 --> 00:12:03,360
case the the the the process<font color="#CCCCCC"> that mines</font>

262
00:12:01,440 --> 00:12:06,660
<font color="#E5E5E5">the stream is</font><font color="#CCCCCC"> actually ignoring</font><font color="#E5E5E5"> the</font>

263
00:12:03,360 --> 00:12:09,600
changes but capturing<font color="#E5E5E5"> the metadata that</font>

264
00:12:06,660 --> 00:12:12,959
<font color="#E5E5E5">is in the</font><font color="#CCCCCC"> chain stream</font><font color="#E5E5E5"> its extracting</font>

265
00:12:09,600 --> 00:12:15,480
the<font color="#E5E5E5"> GD</font><font color="#CCCCCC"> IDs</font><font color="#E5E5E5"> of that run through this</font>

266
00:12:12,960 --> 00:12:17,310
change stream and collecting a global

267
00:12:15,480 --> 00:12:20,760
knowledge of the<font color="#E5E5E5"> system to</font><font color="#CCCCCC"> know and</font>

268
00:12:17,310 --> 00:12:23,219
understand which in which state it is

269
00:12:20,760 --> 00:12:25,350
each of<font color="#CCCCCC"> the replicas in my system so I</font>

270
00:12:23,220 --> 00:12:28,650
can<font color="#CCCCCC"> make decisions</font><font color="#E5E5E5"> about the routing</font><font color="#CCCCCC"> of</font>

271
00:12:25,350 --> 00:12:30,930
queries to<font color="#CCCCCC"> the proper replicas this is</font>

272
00:12:28,650 --> 00:12:36,050
<font color="#E5E5E5">all for instance proxy SQL this is very</font>

273
00:12:30,930 --> 00:12:38,609
roughly how proxy SQL<font color="#E5E5E5"> does implement</font>

274
00:12:36,050 --> 00:12:45,719
<font color="#E5E5E5">consistent reads across across the set</font>

275
00:12:38,610 --> 00:12:49,980
of replicas<font color="#CCCCCC"> loamy also has this tool</font>

276
00:12:45,720 --> 00:12:52,080
called<font color="#E5E5E5"> ghost which stands for get hubs</font>

277
00:12:49,980 --> 00:12:55,170
online schema transformations which

278
00:12:52,080 --> 00:12:59,370
basically is a tool that tries<font color="#CCCCCC"> to do a</font>

279
00:12:55,170 --> 00:13:01,890
user land<font color="#CCCCCC"> online a schema change by by</font>

280
00:12:59,370 --> 00:13:03,540
copying you know one take one from data

281
00:13:01,890 --> 00:13:05,310
<font color="#E5E5E5">from one version of the table to</font><font color="#CCCCCC"> the</font>

282
00:13:03,540 --> 00:13:08,430
newer version of the table and in the

283
00:13:05,310 --> 00:13:11,430
<font color="#E5E5E5">meantime build on tap into this change</font>

284
00:13:08,430 --> 00:13:13,739
stream that is<font color="#E5E5E5"> being executed while this</font>

285
00:13:11,430 --> 00:13:17,430
process<font color="#CCCCCC"> is running</font><font color="#E5E5E5"> and trying to collect</font>

286
00:13:13,740 --> 00:13:20,490
<font color="#CCCCCC">these changes to later on apply them to</font>

287
00:13:17,430 --> 00:13:22,770
the schema transformation as well<font color="#E5E5E5"> and do</font>

288
00:13:20,490 --> 00:13:23,150
all this<font color="#E5E5E5"> all in an automated fashion</font><font color="#CCCCCC"> in</font>

289
00:13:22,770 --> 00:13:27,529
<font color="#E5E5E5">on</font>

290
00:13:23,150 --> 00:13:32,240
I mentioned already<font color="#E5E5E5"> online rolling up</font>

291
00:13:27,529 --> 00:13:35,560
<font color="#CCCCCC">Prez is a really severely powerful use</font>

292
00:13:32,240 --> 00:13:37,790
case or<font color="#E5E5E5"> a really good fit for logical</font>

293
00:13:35,560 --> 00:13:41,060
<font color="#E5E5E5">replication or change</font><font color="#CCCCCC"> stream based</font>

294
00:13:37,790 --> 00:13:43,010
replication<font color="#CCCCCC"> where</font><font color="#E5E5E5"> you can have servers</font>

295
00:13:41,060 --> 00:13:44,900
<font color="#E5E5E5">in</font><font color="#CCCCCC"> different versions</font><font color="#E5E5E5"> they probably have</font>

296
00:13:43,010 --> 00:13:46,910
for instance different<font color="#CCCCCC"> on this clay</font>

297
00:13:44,900 --> 00:13:48,620
house different<font color="#E5E5E5"> physical layout so you</font>

298
00:13:46,910 --> 00:13:50,510
can rely on the logical stream to

299
00:13:48,620 --> 00:13:53,930
actually make make sure that you you

300
00:13:50,510 --> 00:13:56,810
have a sound way forward<font color="#E5E5E5"> with respect to</font>

301
00:13:53,930 --> 00:14:00,160
rolling out<font color="#E5E5E5"> very different versions of</font>

302
00:13:56,810 --> 00:14:04,339
the server<font color="#CCCCCC"> they its integration this</font><font color="#E5E5E5"> is</font>

303
00:14:00,160 --> 00:14:06,410
again<font color="#E5E5E5"> a very common</font><font color="#CCCCCC"> use case there's</font><font color="#E5E5E5"> or</font>

304
00:14:04,339 --> 00:14:07,850
I put here Oracle GoldenGate but a lot

305
00:14:06,410 --> 00:14:10,250
of<font color="#E5E5E5"> people</font><font color="#CCCCCC"> do it with for instance</font>

306
00:14:07,850 --> 00:14:14,600
Maxwell and other kinds of framework

307
00:14:10,250 --> 00:14:16,910
where they tap into<font color="#E5E5E5"> the bin</font><font color="#CCCCCC"> log stream</font>

308
00:14:14,600 --> 00:14:20,570
<font color="#CCCCCC">Connect for instance as a fake slave to</font>

309
00:14:16,910 --> 00:14:22,819
a master they bring the bin<font color="#E5E5E5"> log they</font>

310
00:14:20,570 --> 00:14:28,190
process it transform it maybe into some

311
00:14:22,820 --> 00:14:31,820
<font color="#CCCCCC">more language natural language neutral</font>

312
00:14:28,190 --> 00:14:33,470
<font color="#E5E5E5">format Jason or we encoded it proto</font>

313
00:14:31,820 --> 00:14:35,810
buffers or<font color="#E5E5E5"> something like that and push</font>

314
00:14:33,470 --> 00:14:37,570
it out into<font color="#E5E5E5"> some other message Brussels</font>

315
00:14:35,810 --> 00:14:40,969
<font color="#E5E5E5">in this case for instance Kafka or</font>

316
00:14:37,570 --> 00:14:43,190
something else some people<font color="#E5E5E5"> actually use</font>

317
00:14:40,970 --> 00:14:45,980
that<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well to move</font><font color="#E5E5E5"> data back and forth</font>

318
00:14:43,190 --> 00:14:47,959
<font color="#E5E5E5">from different databases from my square</font>

319
00:14:45,980 --> 00:14:49,550
into<font color="#E5E5E5"> Oracle from horrible into my</font><font color="#CCCCCC"> scroll</font>

320
00:14:47,959 --> 00:14:52,640
from<font color="#E5E5E5"> ice ql into some other video ways</font>

321
00:14:49,550 --> 00:14:55,520
<font color="#E5E5E5">and back and forth and for</font><font color="#CCCCCC"> anytime</font>

322
00:14:52,640 --> 00:15:00,199
<font color="#E5E5E5">recovery as</font><font color="#CCCCCC"> well right</font><font color="#E5E5E5"> we can take</font><font color="#CCCCCC"> a</font>

323
00:14:55,520 --> 00:15:02,630
<font color="#CCCCCC">snapshot we can rely</font><font color="#E5E5E5"> on the bin log to</font>

324
00:15:00,200 --> 00:15:04,820
make<font color="#CCCCCC"> it to make it so that we can take</font>

325
00:15:02,630 --> 00:15:06,770
that<font color="#E5E5E5"> snapshot and roll forward some of</font>

326
00:15:04,820 --> 00:15:09,290
the<font color="#E5E5E5"> change</font><font color="#CCCCCC"> log that happened after this</font>

327
00:15:06,770 --> 00:15:11,990
snapshot<font color="#CCCCCC"> up to a certain point in time</font>

328
00:15:09,290 --> 00:15:14,360
<font color="#E5E5E5">so we can roll forward the changes just</font>

329
00:15:11,990 --> 00:15:16,459
<font color="#CCCCCC">like slow medium is flashback</font>

330
00:15:14,360 --> 00:15:21,650
<font color="#CCCCCC">presentation said oh</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to roll roll</font>

331
00:15:16,459 --> 00:15:23,660
<font color="#CCCCCC">back compensate my or revert the state</font>

332
00:15:21,650 --> 00:15:26,420
of my server<font color="#E5E5E5"> up until this</font><font color="#CCCCCC"> point we can</font>

333
00:15:23,660 --> 00:15:30,770
do that of<font color="#E5E5E5"> course in the in the the</font>

334
00:15:26,420 --> 00:15:32,599
opposite way<font color="#E5E5E5"> as we as we all know so</font>

335
00:15:30,770 --> 00:15:35,180
advanced they don't change data capture

336
00:15:32,600 --> 00:15:36,560
<font color="#E5E5E5">so coming back to this interesting</font>

337
00:15:35,180 --> 00:15:39,050
<font color="#CCCCCC">diagram</font><font color="#E5E5E5"> here</font>

338
00:15:36,560 --> 00:15:40,729
you know we capture the changes while

339
00:15:39,050 --> 00:15:43,069
there<font color="#E5E5E5"> and while the transaction is</font>

340
00:15:40,730 --> 00:15:44,930
executing<font color="#E5E5E5"> once the transaction is about</font>

341
00:15:43,069 --> 00:15:47,240
to commit we notify<font color="#CCCCCC"> that it's going</font><font color="#E5E5E5"> to</font>

342
00:15:44,930 --> 00:15:48,680
<font color="#E5E5E5">be</font><font color="#CCCCCC"> committed and then we flush these</font>

343
00:15:47,240 --> 00:15:50,209
changes to<font color="#E5E5E5"> the bin log and then we</font>

344
00:15:48,680 --> 00:15:53,420
notify that<font color="#E5E5E5"> these changes have been</font>

345
00:15:50,209 --> 00:15:56,268
flushed and committed<font color="#E5E5E5"> in the bin</font><font color="#CCCCCC"> logging</font>

346
00:15:53,420 --> 00:15:57,439
is in the storage<font color="#E5E5E5"> engine locally so</font>

347
00:15:56,269 --> 00:16:00,740
let's have a look at the group

348
00:15:57,439 --> 00:16:03,079
replication use case group replication

349
00:16:00,740 --> 00:16:05,660
is a plugin<font color="#CCCCCC"> it taps into the server it</font>

350
00:16:03,079 --> 00:16:08,719
<font color="#CCCCCC">has all</font><font color="#E5E5E5"> this you know fancy diagrams and</font>

351
00:16:05,660 --> 00:16:11,870
<font color="#CCCCCC">stagg very nice</font><font color="#E5E5E5"> nicely layered</font>

352
00:16:08,720 --> 00:16:14,360
architecture<font color="#CCCCCC"> different modules for</font>

353
00:16:11,870 --> 00:16:16,490
capture<font color="#E5E5E5"> applier recovery completely</font>

354
00:16:14,360 --> 00:16:20,329
handling and and so<font color="#E5E5E5"> on and it has this</font>

355
00:16:16,490 --> 00:16:23,389
<font color="#E5E5E5">very interesting module here which is</font>

356
00:16:20,329 --> 00:16:26,269
the<font color="#CCCCCC"> capture part</font><font color="#E5E5E5"> and the capture part is</font>

357
00:16:23,389 --> 00:16:29,029
<font color="#E5E5E5">really the guy that implements these</font>

358
00:16:26,269 --> 00:16:30,889
hooks to tap<font color="#E5E5E5"> into the serve and say when</font>

359
00:16:29,029 --> 00:16:33,259
you load the<font color="#E5E5E5"> plug-in it says okay I'm</font>

360
00:16:30,889 --> 00:16:37,189
<font color="#E5E5E5">going to register myself as a listener</font>

361
00:16:33,259 --> 00:16:39,350
<font color="#CCCCCC">for the events that</font><font color="#E5E5E5"> are propagated and</font>

362
00:16:37,189 --> 00:16:41,000
then at commit time<font color="#E5E5E5"> I want to be</font>

363
00:16:39,350 --> 00:16:43,459
informed<font color="#CCCCCC"> that these</font><font color="#E5E5E5"> events have</font><font color="#CCCCCC"> happened</font>

364
00:16:41,000 --> 00:16:46,100
<font color="#CCCCCC">so I want to take a part</font><font color="#E5E5E5"> of the decision</font>

365
00:16:43,459 --> 00:16:48,859
<font color="#CCCCCC">of what's going on</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> this transaction</font>

366
00:16:46,100 --> 00:16:52,339
execution time timeline and I want to

367
00:16:48,860 --> 00:16:54,230
know what what was actually<font color="#E5E5E5"> changed so</font>

368
00:16:52,339 --> 00:16:56,000
it intercepts<font color="#E5E5E5"> the change buffer and</font>

369
00:16:54,230 --> 00:16:58,519
sends it out<font color="#E5E5E5"> to the group in the case of</font>

370
00:16:56,000 --> 00:17:02,000
Google<font color="#E5E5E5"> application your execution takes</font>

371
00:16:58,519 --> 00:17:04,459
takes<font color="#E5E5E5"> place it captures it</font><font color="#CCCCCC"> then it</font>

372
00:17:02,000 --> 00:17:07,849
pushes<font color="#E5E5E5"> it for further down in</font><font color="#CCCCCC"> the stack</font>

373
00:17:04,459 --> 00:17:11,179
to the<font color="#E5E5E5"> group communication engine and at</font>

374
00:17:07,849 --> 00:17:13,750
the very<font color="#E5E5E5"> low</font><font color="#CCCCCC"> end app axis consensus</font>

375
00:17:11,179 --> 00:17:16,370
round is<font color="#CCCCCC"> done</font><font color="#E5E5E5"> it's reformed you know</font>

376
00:17:13,750 --> 00:17:18,740
majority acknowledges we all make the

377
00:17:16,369 --> 00:17:20,739
same<font color="#E5E5E5"> decisions everywhere we have total</font>

378
00:17:18,740 --> 00:17:23,419
order delivery in<font color="#E5E5E5"> the system and then</font>

379
00:17:20,740 --> 00:17:25,970
everybody advances in the same in the

380
00:17:23,419 --> 00:17:29,090
same order this is at the end<font color="#CCCCCC"> it results</font>

381
00:17:25,970 --> 00:17:33,020
in this distributed replicated state

382
00:17:29,090 --> 00:17:35,330
machine but at the end<font color="#CCCCCC"> of the day what</font>

383
00:17:33,020 --> 00:17:38,120
I'm really<font color="#E5E5E5"> interested here is to show is</font>

384
00:17:35,330 --> 00:17:41,299
<font color="#E5E5E5">how</font><font color="#CCCCCC"> that it how</font><font color="#E5E5E5"> does your application to</font>

385
00:17:38,120 --> 00:17:44,059
<font color="#CCCCCC">set these changes so the intersection</font>

386
00:17:41,299 --> 00:17:47,539
takes place here<font color="#CCCCCC"> right before</font><font color="#E5E5E5"> we flush</font>

387
00:17:44,059 --> 00:17:49,920
to the<font color="#E5E5E5"> bin log this is this is</font><font color="#CCCCCC"> a this</font>

388
00:17:47,539 --> 00:17:53,070
<font color="#CCCCCC">noted at this point in time</font>

389
00:17:49,920 --> 00:17:55,740
the changes are<font color="#E5E5E5"> still in memory in this</font>

390
00:17:53,070 --> 00:17:57,990
in this buffer<font color="#E5E5E5"> in memory buffer</font>

391
00:17:55,740 --> 00:17:59,430
<font color="#E5E5E5">it's an i/o cache for those that I've</font>

392
00:17:57,990 --> 00:18:02,580
actually<font color="#E5E5E5"> looked into the code it's an</font>

393
00:17:59,430 --> 00:18:05,400
<font color="#E5E5E5">i/o cache</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> means that the</font><font color="#CCCCCC"> the</font>

394
00:18:02,580 --> 00:18:09,149
cache is<font color="#E5E5E5"> mostly in memory so it has a</font>

395
00:18:05,400 --> 00:18:12,630
fixed<font color="#E5E5E5"> size memory buffer if the</font>

396
00:18:09,150 --> 00:18:15,150
transaction changes are bigger<font color="#E5E5E5"> or larger</font>

397
00:18:12,630 --> 00:18:18,600
<font color="#E5E5E5">than</font><font color="#CCCCCC"> this buffer it spills to this</font><font color="#E5E5E5"> this</font>

398
00:18:15,150 --> 00:18:20,640
so it swaps<font color="#E5E5E5"> but at the</font><font color="#CCCCCC"> end of the day we</font>

399
00:18:18,600 --> 00:18:23,280
can consider it just<font color="#E5E5E5"> as a memory buffer</font>

400
00:18:20,640 --> 00:18:25,980
<font color="#E5E5E5">so we take this buffer and</font><font color="#CCCCCC"> we share it</font>

401
00:18:23,280 --> 00:18:28,620
with<font color="#E5E5E5"> the way the group replication this</font>

402
00:18:25,980 --> 00:18:31,890
is the same diagram<font color="#CCCCCC"> slightly with</font>

403
00:18:28,620 --> 00:18:34,649
<font color="#E5E5E5">slightly</font><font color="#CCCCCC"> more detail we execute we</font>

404
00:18:31,890 --> 00:18:38,760
commit we prepare<font color="#CCCCCC"> we start the two-phase</font>

405
00:18:34,650 --> 00:18:41,100
commit protocol inside the<font color="#CCCCCC"> server then</font>

406
00:18:38,760 --> 00:18:43,410
we take<font color="#E5E5E5"> this we replicate in the before</font>

407
00:18:41,100 --> 00:18:45,570
commit<font color="#E5E5E5"> work we take we give it to</font><font color="#CCCCCC"> group</font>

408
00:18:43,410 --> 00:18:48,690
<font color="#E5E5E5">replication one</font><font color="#CCCCCC"> screw publication says</font>

409
00:18:45,570 --> 00:18:50,850
yes<font color="#CCCCCC"> okay we're good to go we commit the</font>

410
00:18:48,690 --> 00:18:52,320
transaction otherwise we'd roll back the

411
00:18:50,850 --> 00:18:54,750
transaction maybe there was a<font color="#E5E5E5"> conflict</font>

412
00:18:52,320 --> 00:18:57,960
<font color="#E5E5E5">maybe this guy was sent out of the group</font>

413
00:18:54,750 --> 00:19:01,980
maybe something wrong happened but if

414
00:18:57,960 --> 00:19:04,200
the group application says yes<font color="#E5E5E5"> the</font>

415
00:19:01,980 --> 00:19:06,870
commit procedure<font color="#CCCCCC"> continues we flush and</font>

416
00:19:04,200 --> 00:19:08,430
<font color="#E5E5E5">sync to the bin log we commit to the</font>

417
00:19:06,870 --> 00:19:11,219
storage<font color="#E5E5E5"> engine committing into the</font>

418
00:19:08,430 --> 00:19:14,790
storage<font color="#CCCCCC"> engine means we externalize</font>

419
00:19:11,220 --> 00:19:17,760
to the SQL layer<font color="#E5E5E5"> what you know what has</font>

420
00:19:14,790 --> 00:19:20,639
been<font color="#E5E5E5"> changed</font><font color="#CCCCCC"> so all locks are released</font>

421
00:19:17,760 --> 00:19:24,000
<font color="#E5E5E5">and now you can see the the you have a</font>

422
00:19:20,640 --> 00:19:25,650
different view<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the data when we flush</font>

423
00:19:24,000 --> 00:19:27,630
and<font color="#E5E5E5"> sync to the bin log it actually</font>

424
00:19:25,650 --> 00:19:29,400
means<font color="#CCCCCC"> that we externalise for consumers</font>

425
00:19:27,630 --> 00:19:31,260
<font color="#E5E5E5">of the bin log so slaves will already</font>

426
00:19:29,400 --> 00:19:33,810
see it and other<font color="#CCCCCC"> components in</font><font color="#E5E5E5"> the</font>

427
00:19:31,260 --> 00:19:36,090
system<font color="#E5E5E5"> that are listening</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> this</font>

428
00:19:33,810 --> 00:19:38,159
replication stream will will already see

429
00:19:36,090 --> 00:19:40,230
it when we<font color="#E5E5E5"> propagate to group</font>

430
00:19:38,160 --> 00:19:43,020
replication it means that we externalise

431
00:19:40,230 --> 00:19:46,650
already there to the members of the

432
00:19:43,020 --> 00:19:50,129
group so that's one minute<font color="#CCCCCC"> okay so</font>

433
00:19:46,650 --> 00:19:52,680
that's when that's<font color="#CCCCCC"> when the actually</font>

434
00:19:50,130 --> 00:19:56,250
<font color="#CCCCCC">commits takes place so it's</font><font color="#E5E5E5"> externalized</font>

435
00:19:52,680 --> 00:20:00,570
to the group here as well and what our

436
00:19:56,250 --> 00:20:02,010
internal<font color="#CCCCCC"> IP is for this we in you know</font>

437
00:20:00,570 --> 00:20:02,700
if you go<font color="#E5E5E5"> into the source</font><font color="#CCCCCC"> code and you</font>

438
00:20:02,010 --> 00:20:05,419
look

439
00:20:02,700 --> 00:20:09,480
you'll notice that group replication

440
00:20:05,419 --> 00:20:12,840
implements these api's the before commit

441
00:20:09,480 --> 00:20:16,679
hug and then<font color="#E5E5E5"> the parameter for this for</font>

442
00:20:12,840 --> 00:20:20,699
this for this callback<font color="#E5E5E5"> which contains</font>

443
00:20:16,679 --> 00:20:22,830
these<font color="#E5E5E5"> caches that contain the changes so</font>

444
00:20:20,700 --> 00:20:25,289
it gets this<font color="#CCCCCC"> notification with the</font>

445
00:20:22,830 --> 00:20:28,168
<font color="#E5E5E5">caches and the group replication plugin</font>

446
00:20:25,289 --> 00:20:32,009
can go in open<font color="#E5E5E5"> these caches learn the</font>

447
00:20:28,169 --> 00:20:35,480
changes and<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> and so forth this is</font>

448
00:20:32,009 --> 00:20:38,369
the this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> over simplified</font>

449
00:20:35,480 --> 00:20:40,879
<font color="#E5E5E5">version of the before</font><font color="#CCCCCC"> committal it</font><font color="#E5E5E5"> just</font>

450
00:20:38,369 --> 00:20:43,320
basically<font color="#E5E5E5"> says well I</font><font color="#CCCCCC"> got the caches I</font>

451
00:20:40,879 --> 00:20:45,658
did whatever I needed<font color="#E5E5E5"> to do with them</font>

452
00:20:43,320 --> 00:20:48,059
<font color="#E5E5E5">and at the end of the day</font><font color="#CCCCCC"> I send it out</font>

453
00:20:45,659 --> 00:20:50,929
<font color="#CCCCCC">to the group I issue a send message to</font>

454
00:20:48,059 --> 00:20:56,549
<font color="#E5E5E5">the group communication system this is</font>

455
00:20:50,929 --> 00:20:58,950
at its core<font color="#E5E5E5"> is that simple so the key</font>

456
00:20:56,549 --> 00:21:01,408
<font color="#E5E5E5">point is that</font><font color="#CCCCCC"> the capture and</font><font color="#E5E5E5"> extraction</font>

457
00:20:58,950 --> 00:21:04,049
<font color="#CCCCCC">are the same as for</font><font color="#E5E5E5"> regular replication</font>

458
00:21:01,409 --> 00:21:08,429
except that it happens earlier in the

459
00:21:04,049 --> 00:21:11,609
commit<font color="#CCCCCC"> phase</font><font color="#E5E5E5"> and just to finalize this</font>

460
00:21:08,429 --> 00:21:13,710
<font color="#E5E5E5">session there is this observer</font><font color="#CCCCCC"> plug-in</font>

461
00:21:11,609 --> 00:21:16,830
which is kind of<font color="#E5E5E5"> like a boilerplate code</font>

462
00:21:13,710 --> 00:21:19,830
<font color="#E5E5E5">that is also shipped in</font><font color="#CCCCCC"> the source code</font>

463
00:21:16,830 --> 00:21:25,649
of<font color="#CCCCCC"> the server which just implements</font><font color="#E5E5E5"> the</font>

464
00:21:19,830 --> 00:21:28,109
very dummy capture<font color="#CCCCCC"> plug-in so this is</font>

465
00:21:25,649 --> 00:21:29,580
the way I mean this is the source

466
00:21:28,109 --> 00:21:32,189
kind of like the summary<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> source</font>

467
00:21:29,580 --> 00:21:34,019
code<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> plane it just implements</font>

468
00:21:32,190 --> 00:21:35,190
the before commit hope and the<font color="#E5E5E5"> only</font>

469
00:21:34,019 --> 00:21:40,679
thing it does is it<font color="#E5E5E5"> increments the</font>

470
00:21:35,190 --> 00:21:42,450
<font color="#E5E5E5">counter then at initial okay so this is</font>

471
00:21:40,679 --> 00:21:45,359
<font color="#E5E5E5">actually just the before</font><font color="#CCCCCC"> committed so it</font>

472
00:21:42,450 --> 00:21:46,950
<font color="#E5E5E5">diplomats a counter and the the way it</font>

473
00:21:45,359 --> 00:21:50,158
works is that<font color="#E5E5E5"> when this</font><font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> is</font>

474
00:21:46,950 --> 00:21:52,440
loaded it registers this hook in the

475
00:21:50,159 --> 00:21:55,320
server<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that it intercepts this this</font>

476
00:21:52,440 --> 00:21:56,879
this<font color="#E5E5E5"> you know this diagram that I showed</font>

477
00:21:55,320 --> 00:21:59,908
<font color="#CCCCCC">earlier so that it</font><font color="#E5E5E5"> intercepts this</font>

478
00:21:56,879 --> 00:22:03,119
notification and then do<font color="#E5E5E5"> something in</font>

479
00:21:59,909 --> 00:22:05,249
this case it<font color="#E5E5E5"> just as before commit</font><font color="#CCCCCC"> contr</font>

480
00:22:03,119 --> 00:22:07,639
plus plus so increments<font color="#E5E5E5"> this</font><font color="#CCCCCC"> this</font>

481
00:22:05,249 --> 00:22:07,639
<font color="#CCCCCC">counter</font>

482
00:22:08,090 --> 00:22:13,790
and that's what I said basically<font color="#E5E5E5"> and if</font>

483
00:22:11,930 --> 00:22:15,680
you're<font color="#E5E5E5"> really interested in to go into</font>

484
00:22:13,790 --> 00:22:18,350
the look into the source<font color="#CCCCCC"> code and</font>

485
00:22:15,680 --> 00:22:20,330
<font color="#E5E5E5">whatnot of course you can it's you just</font>

486
00:22:18,350 --> 00:22:23,179
<font color="#E5E5E5">got to github MySQL server repository</font>

487
00:22:20,330 --> 00:22:29,570
and look at this replication<font color="#CCCCCC"> of</font><font color="#E5E5E5"> service</font>

488
00:22:23,180 --> 00:22:31,580
<font color="#E5E5E5">example dot CC file so to conclude it</font>

489
00:22:29,570 --> 00:22:36,439
you know the binary<font color="#CCCCCC"> log is a very useful</font>

490
00:22:31,580 --> 00:22:38,480
building<font color="#E5E5E5"> block we see it every day</font><font color="#CCCCCC"> today</font>

491
00:22:36,440 --> 00:22:40,660
<font color="#E5E5E5">and we've had even today we had the</font>

492
00:22:38,480 --> 00:22:43,880
<font color="#CCCCCC">flowmeter</font><font color="#E5E5E5"> presentation for instance</font>

493
00:22:40,660 --> 00:22:49,310
explaining it<font color="#E5E5E5"> it is not is not</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> for</font>

494
00:22:43,880 --> 00:22:52,430
application<font color="#E5E5E5"> and since you know very</font>

495
00:22:49,310 --> 00:22:54,770
since very long time<font color="#E5E5E5"> ago since early</font><font color="#CCCCCC"> 5/7</font>

496
00:22:52,430 --> 00:22:57,590
we have this framework of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> plugins</font>

497
00:22:54,770 --> 00:23:01,060
can tap into<font color="#E5E5E5"> and and listen to</font><font color="#CCCCCC"> two</font>

498
00:22:57,590 --> 00:23:04,340
notifications<font color="#E5E5E5"> one comment</font><font color="#CCCCCC"> before I</font><font color="#E5E5E5"> close</font>

499
00:23:01,060 --> 00:23:07,460
we didn't have back<font color="#CCCCCC"> then</font><font color="#E5E5E5"> but now</font><font color="#CCCCCC"> we have</font>

500
00:23:04,340 --> 00:23:09,439
in<font color="#E5E5E5"> MySQL</font><font color="#CCCCCC"> eight we have</font><font color="#E5E5E5"> this better</font>

501
00:23:07,460 --> 00:23:12,290
infrastructure<font color="#E5E5E5"> which we call the service</font>

502
00:23:09,440 --> 00:23:15,710
<font color="#CCCCCC">registry where it's so much easier to</font>

503
00:23:12,290 --> 00:23:18,710
<font color="#E5E5E5">register you know services inside the</font>

504
00:23:15,710 --> 00:23:20,750
server<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that we have another different</font>

505
00:23:18,710 --> 00:23:22,280
set of<font color="#E5E5E5"> consumers that</font><font color="#CCCCCC"> you know just go</font>

506
00:23:20,750 --> 00:23:23,750
to this<font color="#E5E5E5"> service registry look up the</font>

507
00:23:22,280 --> 00:23:27,710
service that<font color="#E5E5E5"> they want to listen</font><font color="#CCCCCC"> to</font>

508
00:23:23,750 --> 00:23:30,620
register as<font color="#E5E5E5"> listeners and so on and we</font>

509
00:23:27,710 --> 00:23:32,840
are<font color="#E5E5E5"> thinking about moving these hooks</font>

510
00:23:30,620 --> 00:23:35,030
<font color="#E5E5E5">that I was explaining here into the</font>

511
00:23:32,840 --> 00:23:38,600
service registry<font color="#CCCCCC"> to make it even more</font>

512
00:23:35,030 --> 00:23:40,180
general for you me anyone write a

513
00:23:38,600 --> 00:23:42,740
plug-in<font color="#CCCCCC"> to actually make use of this</font>

514
00:23:40,180 --> 00:23:44,150
infrastructure in a very much<font color="#E5E5E5"> easier way</font>

515
00:23:42,740 --> 00:23:48,050
<font color="#E5E5E5">going</font><font color="#CCCCCC"> forward as well</font>

516
00:23:44,150 --> 00:23:50,480
so that's that<font color="#E5E5E5"> thanks for you know</font>

517
00:23:48,050 --> 00:23:52,250
listening<font color="#CCCCCC"> to me</font><font color="#E5E5E5"> and this is really cool</font>

518
00:23:50,480 --> 00:23:55,040
<font color="#CCCCCC">stuff I really hope you</font><font color="#E5E5E5"> enjoyed it</font><font color="#CCCCCC"> as</font>

519
00:23:52,250 --> 00:23:57,700
much as I because I do okay thank you

520
00:23:55,040 --> 00:23:57,700
any<font color="#E5E5E5"> questions</font>

521
00:24:22,140 --> 00:24:25,179
[Music]

522
00:24:44,960 --> 00:24:52,340
so the question is<font color="#CCCCCC"> really</font><font color="#E5E5E5"> will there be</font>

523
00:24:48,230 --> 00:24:55,059
a less opaque<font color="#E5E5E5"> format to the bin log so</font>

524
00:24:52,340 --> 00:24:59,178
<font color="#E5E5E5">that we can make full sense out of it</font>

525
00:24:55,059 --> 00:25:01,399
that's the question<font color="#CCCCCC"> we are really</font>

526
00:24:59,179 --> 00:25:03,649
<font color="#CCCCCC">looking into</font><font color="#E5E5E5"> that because the bin log is</font>

527
00:25:01,399 --> 00:25:06,379
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> actually an API</font><font color="#E5E5E5"> to integrate - well</font>

528
00:25:03,649 --> 00:25:09,289
into other systems<font color="#E5E5E5"> someone earlier today</font>

529
00:25:06,380 --> 00:25:10,970
was on this stage<font color="#E5E5E5"> saying we have this</font>

530
00:25:09,289 --> 00:25:14,419
this is<font color="#CCCCCC"> very good we</font><font color="#E5E5E5"> have that that is</font>

531
00:25:10,970 --> 00:25:17,269
<font color="#E5E5E5">very good the real power</font><font color="#CCCCCC"> comes when we</font>

532
00:25:14,419 --> 00:25:19,429
combine these<font color="#CCCCCC"> two things together so any</font>

533
00:25:17,269 --> 00:25:21,590
two components<font color="#CCCCCC"> mice ql some other</font>

534
00:25:19,429 --> 00:25:23,809
framework<font color="#E5E5E5"> they need to talk to you they</font>

535
00:25:21,590 --> 00:25:27,260
need<font color="#E5E5E5"> to speak</font><font color="#CCCCCC"> to each</font><font color="#E5E5E5"> other to provide</font>

536
00:25:23,809 --> 00:25:30,950
combined value<font color="#E5E5E5"> and we see that many</font>

537
00:25:27,260 --> 00:25:32,510
times<font color="#CCCCCC"> so we are looking</font><font color="#E5E5E5"> at making</font><font color="#CCCCCC"> the</font>

538
00:25:30,950 --> 00:25:36,019
bin<font color="#E5E5E5"> log formats much more interoperable</font>

539
00:25:32,510 --> 00:25:37,908
<font color="#CCCCCC">if you will all right</font><font color="#E5E5E5"> so if you have</font>

540
00:25:36,019 --> 00:25:41,620
<font color="#E5E5E5">more</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> just grab me outside and</font>

541
00:25:37,909 --> 00:25:41,620
I'll be<font color="#E5E5E5"> happy to talk to you thank you</font>

542
00:25:42,940 --> 00:25:45,000
<font color="#E5E5E5">you</font>

