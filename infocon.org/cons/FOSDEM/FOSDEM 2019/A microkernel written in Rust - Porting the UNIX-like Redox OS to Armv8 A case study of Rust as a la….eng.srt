1
00:00:06,240 --> 00:00:17,619
<font color="#CCCCCC">Stupak</font><font color="#E5E5E5"> I become Robin from arm and he</font>

2
00:00:14,410 --> 00:00:19,689
was<font color="#E5E5E5"> interesting talk about</font><font color="#CCCCCC"> mv8</font>

3
00:00:17,619 --> 00:00:28,149
so the important me talks which is based

4
00:00:19,689 --> 00:00:35,260
on<font color="#CCCCCC"> ritalin rest to</font><font color="#E5E5E5"> the arm 64 feet thank</font>

5
00:00:28,149 --> 00:00:37,900
you so uh this<font color="#E5E5E5"> is my first</font><font color="#CCCCCC"> positive I've</font>

6
00:00:35,260 --> 00:00:39,970
never been for one before<font color="#CCCCCC"> and I must say</font>

7
00:00:37,900 --> 00:00:41,860
I'm really really<font color="#CCCCCC"> impressed and I'm</font>

8
00:00:39,970 --> 00:00:46,930
gonna be a regular<font color="#E5E5E5"> now so you know</font>

9
00:00:41,860 --> 00:00:49,570
<font color="#CCCCCC">alright thanks for</font><font color="#E5E5E5"> coming</font>

10
00:00:46,930 --> 00:00:51,010
I'm overwhelmed<font color="#E5E5E5"> with this response I</font>

11
00:00:49,570 --> 00:00:52,990
thought I'm<font color="#CCCCCC"> just come bear with</font><font color="#E5E5E5"> this</font>

12
00:00:51,010 --> 00:00:54,550
funky new language and<font color="#CCCCCC"> there'll be</font><font color="#E5E5E5"> two</font>

13
00:00:52,990 --> 00:00:56,650
<font color="#E5E5E5">people in the room will</font><font color="#CCCCCC"> be interested</font>

14
00:00:54,550 --> 00:00:59,800
<font color="#E5E5E5">but it turns out a lot</font><font color="#CCCCCC"> of you</font><font color="#E5E5E5"> are okay</font>

15
00:00:56,650 --> 00:01:02,829
<font color="#CCCCCC">so the title</font><font color="#E5E5E5"> louder than this it's going</font>

16
00:00:59,800 --> 00:01:05,979
<font color="#E5E5E5">to be really hard I will try I'm sorry</font>

17
00:01:02,829 --> 00:01:08,819
I'm<font color="#CCCCCC"> very self spoken</font><font color="#E5E5E5"> soft-spoken so a</font>

18
00:01:05,979 --> 00:01:11,408
microkernel written in rust is the title

19
00:01:08,819 --> 00:01:13,780
<font color="#E5E5E5">some time back I'll explain the</font>

20
00:01:11,409 --> 00:01:15,840
background<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> some time back a very</font>

21
00:01:13,780 --> 00:01:20,229
<font color="#E5E5E5">senior processor architect at</font><font color="#CCCCCC"> harm</font>

22
00:01:15,840 --> 00:01:22,139
whispered in my ear<font color="#E5E5E5"> about rust and in my</font>

23
00:01:20,229 --> 00:01:24,369
spare time<font color="#CCCCCC"> I've been</font><font color="#E5E5E5"> playing with rust</font>

24
00:01:22,139 --> 00:01:26,318
<font color="#E5E5E5">everything over</font><font color="#CCCCCC"> here is basically a bit</font>

25
00:01:24,369 --> 00:01:30,159
of a<font color="#E5E5E5"> experiment to scratch in which I</font>

26
00:01:26,319 --> 00:01:33,369
have okay so porting the<font color="#E5E5E5"> unix-like redox</font>

27
00:01:30,159 --> 00:01:35,020
operating system to<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> v 8.0 I want to</font>

28
00:01:33,369 --> 00:01:37,479
talk about redox<font color="#E5E5E5"> this nice new</font>

29
00:01:35,020 --> 00:01:39,880
microkernel based stack<font color="#E5E5E5"> and I want to</font>

30
00:01:37,479 --> 00:01:42,579
talk<font color="#CCCCCC"> about how I</font><font color="#E5E5E5"> got it going on arm I</font>

31
00:01:39,880 --> 00:01:45,490
should point out though<font color="#E5E5E5"> as I was telling</font>

32
00:01:42,579 --> 00:01:47,949
<font color="#E5E5E5">Sebastian I think it was I'm absolutely</font>

33
00:01:45,490 --> 00:01:49,810
floored by the level of detail that<font color="#E5E5E5"> the</font>

34
00:01:47,950 --> 00:01:51,009
G note guys put in their slides<font color="#E5E5E5"> right</font>

35
00:01:49,810 --> 00:01:53,679
I've<font color="#CCCCCC"> been watching their work for a</font>

36
00:01:51,009 --> 00:01:56,709
while now<font color="#E5E5E5"> this is nowhere close okay</font>

37
00:01:53,679 --> 00:01:57,880
<font color="#E5E5E5">disclaimer</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so I have to talk</font>

38
00:01:56,709 --> 00:01:59,679
about redox<font color="#CCCCCC"> um arm</font>

39
00:01:57,880 --> 00:02:01,749
but redox is written in rust<font color="#E5E5E5"> which is a</font>

40
00:01:59,679 --> 00:02:03,969
fairly new language it's a fairly I

41
00:02:01,749 --> 00:02:06,130
would say it's<font color="#CCCCCC"> really controversial as</font>

42
00:02:03,969 --> 00:02:08,079
well<font color="#E5E5E5"> and I might come to some of that</font>

43
00:02:06,130 --> 00:02:09,579
later but in order to<font color="#E5E5E5"> explain an</font>

44
00:02:08,080 --> 00:02:11,140
operating system stack written in a new

45
00:02:09,580 --> 00:02:14,410
language<font color="#CCCCCC"> I should introduce the language</font>

46
00:02:11,140 --> 00:02:16,059
now that's hard because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can turn</font>

47
00:02:14,410 --> 00:02:17,270
that into a<font color="#CCCCCC"> tutorial</font><font color="#E5E5E5"> for the language</font>

48
00:02:16,060 --> 00:02:18,980
<font color="#CCCCCC">and I don't have</font>

49
00:02:17,270 --> 00:02:21,230
time for<font color="#E5E5E5"> that so after</font><font color="#CCCCCC"> Jerry picked only</font>

50
00:02:18,980 --> 00:02:23,239
<font color="#E5E5E5">those things</font><font color="#CCCCCC"> which in my subjective</font>

51
00:02:21,230 --> 00:02:25,280
opinion<font color="#E5E5E5"> were interesting things in rust</font>

52
00:02:23,240 --> 00:02:29,090
<font color="#E5E5E5">okay for doing micro</font><font color="#CCCCCC"> curls</font>

53
00:02:25,280 --> 00:02:30,860
so I will<font color="#CCCCCC"> discuss rust as well so the</font>

54
00:02:29,090 --> 00:02:32,750
goals are<font color="#E5E5E5"> I primarily will talk about</font>

55
00:02:30,860 --> 00:02:35,870
<font color="#E5E5E5">rust very lightweight intro some of the</font>

56
00:02:32,750 --> 00:02:39,560
<font color="#E5E5E5">unique features</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> explain why</font><font color="#CCCCCC"> a Tom</font>

57
00:02:35,870 --> 00:02:41,390
we think it's interesting<font color="#E5E5E5"> right and I'll</font>

58
00:02:39,560 --> 00:02:42,920
try<font color="#CCCCCC"> and speak a little bit about what</font>

59
00:02:41,390 --> 00:02:45,500
has<font color="#CCCCCC"> been</font><font color="#E5E5E5"> done in the rust language for</font>

60
00:02:42,920 --> 00:02:48,079
the<font color="#E5E5E5"> ARM architecture and then I'll get</font>

61
00:02:45,500 --> 00:02:49,640
<font color="#E5E5E5">into redox but all along I want to keep</font>

62
00:02:48,080 --> 00:02:51,530
it a little<font color="#E5E5E5"> informal</font><font color="#CCCCCC"> because you know</font>

63
00:02:49,640 --> 00:02:53,619
microkernel language<font color="#CCCCCC"> I want to talk</font>

64
00:02:51,530 --> 00:02:56,240
about some interesting<font color="#E5E5E5"> anecdotes</font>

65
00:02:53,620 --> 00:03:00,560
<font color="#E5E5E5">paradoxes that</font><font color="#CCCCCC"> I see in in in the space</font>

66
00:02:56,240 --> 00:03:02,870
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I work in I'll share that so I work</font>

67
00:03:00,560 --> 00:03:04,310
at Cambridge<font color="#CCCCCC"> forearm</font><font color="#E5E5E5"> in the open</font><font color="#CCCCCC"> source</font>

68
00:03:02,870 --> 00:03:07,730
software division<font color="#CCCCCC"> it's one</font><font color="#E5E5E5"> of the</font>

69
00:03:04,310 --> 00:03:09,140
biggest divisions as it turns out<font color="#E5E5E5"> I work</font>

70
00:03:07,730 --> 00:03:11,359
specifically<font color="#E5E5E5"> in the system</font><font color="#CCCCCC"> software</font>

71
00:03:09,140 --> 00:03:14,269
architecture team we<font color="#CCCCCC"> are a</font><font color="#E5E5E5"> bunch of</font><font color="#CCCCCC"> four</font>

72
00:03:11,360 --> 00:03:18,350
people<font color="#CCCCCC"> who basically are</font><font color="#E5E5E5"> responsible to</font>

73
00:03:14,270 --> 00:03:20,660
try and chart out<font color="#CCCCCC"> the right strategy in</font>

74
00:03:18,350 --> 00:03:23,090
different ways<font color="#E5E5E5"> and I could explain that</font>

75
00:03:20,660 --> 00:03:24,470
but you'll<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to buy me beer but you</font>

76
00:03:23,090 --> 00:03:26,240
look at<font color="#E5E5E5"> for make a little middleware</font>

77
00:03:24,470 --> 00:03:27,950
platform<font color="#E5E5E5"> all that kind of</font><font color="#CCCCCC"> stuff but it's</font>

78
00:03:26,240 --> 00:03:29,630
all about software really<font color="#E5E5E5"> it's kind of</font>

79
00:03:27,950 --> 00:03:32,089
an interface<font color="#CCCCCC"> between the software</font><font color="#E5E5E5"> realm</font>

80
00:03:29,630 --> 00:03:33,859
and the hardware guys<font color="#E5E5E5"> my specific</font>

81
00:03:32,090 --> 00:03:35,840
<font color="#CCCCCC">responsibility is the</font><font color="#E5E5E5"> so called safety</font>

82
00:03:33,860 --> 00:03:37,700
<font color="#E5E5E5">track where we want to promote the</font>

83
00:03:35,840 --> 00:03:39,530
uptake of<font color="#CCCCCC"> our IP in safety critical</font>

84
00:03:37,700 --> 00:03:41,329
domains<font color="#CCCCCC"> using open source software</font><font color="#E5E5E5"> as a</font>

85
00:03:39,530 --> 00:03:43,209
medium<font color="#E5E5E5"> this comes as a shock to</font><font color="#CCCCCC"> many</font>

86
00:03:41,330 --> 00:03:45,830
<font color="#E5E5E5">people it came as a shock to me because</font>

87
00:03:43,209 --> 00:03:47,900
<font color="#CCCCCC">what the hell open</font><font color="#E5E5E5"> source</font><font color="#CCCCCC"> software in a</font>

88
00:03:45,830 --> 00:03:49,760
<font color="#CCCCCC">safety-critical</font><font color="#E5E5E5"> automotive environment</font>

89
00:03:47,900 --> 00:03:52,220
<font color="#E5E5E5">are you mad</font>

90
00:03:49,760 --> 00:03:54,560
it turns out<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's there</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

91
00:03:52,220 --> 00:03:56,150
open<font color="#E5E5E5"> source software is used but it's</font>

92
00:03:54,560 --> 00:03:58,430
not used for<font color="#E5E5E5"> product ization and</font>

93
00:03:56,150 --> 00:04:01,100
necessarily<font color="#E5E5E5"> anybody in the</font><font color="#CCCCCC"> business of</font>

94
00:03:58,430 --> 00:04:02,600
silicon design or system design<font color="#CCCCCC"> in the</font>

95
00:04:01,100 --> 00:04:04,760
automotive space<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to use that</font>

96
00:04:02,600 --> 00:04:07,730
as a punching<font color="#E5E5E5"> bag the automotive</font>

97
00:04:04,760 --> 00:04:10,220
ecosystem<font color="#E5E5E5"> they're all using open source</font>

98
00:04:07,730 --> 00:04:12,019
software<font color="#CCCCCC"> for</font><font color="#E5E5E5"> silicon bring up research</font>

99
00:04:10,220 --> 00:04:13,970
and<font color="#E5E5E5"> development and yada yada</font><font color="#CCCCCC"> yada up</font>

100
00:04:12,020 --> 00:04:15,739
<font color="#E5E5E5">until the point they want somebody</font><font color="#CCCCCC"> on</font>

101
00:04:13,970 --> 00:04:17,120
the hook for<font color="#CCCCCC"> the product</font><font color="#E5E5E5"> that's when</font>

102
00:04:15,739 --> 00:04:18,649
they remove<font color="#CCCCCC"> the open source</font><font color="#E5E5E5"> stuff and</font>

103
00:04:17,120 --> 00:04:21,769
they go to<font color="#E5E5E5"> proprietary service vendors</font>

104
00:04:18,649 --> 00:04:25,070
<font color="#CCCCCC">it's a very well-established</font><font color="#E5E5E5"> thing so</font>

105
00:04:21,769 --> 00:04:26,599
areas of interest<font color="#E5E5E5"> all of this</font><font color="#CCCCCC"> I like</font>

106
00:04:25,070 --> 00:04:29,240
this is my own personal<font color="#CCCCCC"> list I like</font>

107
00:04:26,600 --> 00:04:30,689
systems programming languages being<font color="#E5E5E5"> in</font>

108
00:04:29,240 --> 00:04:32,399
Cambridge having access to<font color="#E5E5E5"> the game</font>

109
00:04:30,689 --> 00:04:33,749
<font color="#E5E5E5">University is</font><font color="#CCCCCC"> a bonus I get</font><font color="#E5E5E5"> to speak to</font>

110
00:04:32,399 --> 00:04:36,209
<font color="#CCCCCC">people over there on interesting topics</font>

111
00:04:33,749 --> 00:04:38,099
<font color="#E5E5E5">the university works with arm on ARM</font>

112
00:04:36,209 --> 00:04:39,059
architecture extensions<font color="#E5E5E5"> I'm particularly</font>

113
00:04:38,099 --> 00:04:41,489
interested in ARM architecture

114
00:04:39,059 --> 00:04:44,279
extensions that<font color="#CCCCCC"> are for</font><font color="#E5E5E5"> safety and</font>

115
00:04:41,489 --> 00:04:45,839
security system design<font color="#E5E5E5"> how the</font>

116
00:04:44,279 --> 00:04:47,610
<font color="#E5E5E5">architecture is turned into</font>

117
00:04:45,839 --> 00:04:50,099
<font color="#CCCCCC">microarchitecture and stitched together</font>

118
00:04:47,610 --> 00:04:50,579
<font color="#CCCCCC">into a platform I I'm involved in</font><font color="#E5E5E5"> those</font>

119
00:04:50,099 --> 00:04:53,938
<font color="#E5E5E5">things</font>

120
00:04:50,579 --> 00:04:55,799
so<font color="#CCCCCC"> I standards</font><font color="#E5E5E5"> for arm</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> took</font><font color="#CCCCCC"> awhile</font>

121
00:04:53,939 --> 00:04:57,749
<font color="#CCCCCC">for arm to realize the value of doing</font>

122
00:04:55,799 --> 00:04:59,489
open-source<font color="#E5E5E5"> when I joined arm there was</font>

123
00:04:57,749 --> 00:05:01,739
like two and<font color="#CCCCCC"> a half people</font><font color="#E5E5E5"> doing</font>

124
00:04:59,489 --> 00:05:03,808
<font color="#CCCCCC">open-source software now there are</font><font color="#E5E5E5"> lots</font>

125
00:05:01,739 --> 00:05:05,578
of people<font color="#CCCCCC"> doing open-source software the</font>

126
00:05:03,809 --> 00:05:07,319
reason is that we<font color="#CCCCCC"> recognize the value</font><font color="#E5E5E5"> of</font>

127
00:05:05,579 --> 00:05:09,899
trying<font color="#E5E5E5"> to use open</font><font color="#CCCCCC"> source as a as a</font>

128
00:05:07,319 --> 00:05:12,360
forcing function<font color="#E5E5E5"> to standardize software</font>

129
00:05:09,899 --> 00:05:14,489
because arms biggest strength is also

130
00:05:12,360 --> 00:05:16,589
<font color="#E5E5E5">its biggest</font><font color="#CCCCCC"> weakness</font><font color="#E5E5E5"> strength being</font>

131
00:05:14,489 --> 00:05:17,938
flexibility<font color="#CCCCCC"> license the IP do what you</font>

132
00:05:16,589 --> 00:05:20,039
want for<font color="#E5E5E5"> that right that's a nightmare</font>

133
00:05:17,939 --> 00:05:22,139
<font color="#E5E5E5">for software so having standards is</font>

134
00:05:20,039 --> 00:05:24,360
important and I interact<font color="#CCCCCC"> with those guys</font>

135
00:05:22,139 --> 00:05:26,429
<font color="#CCCCCC">open-source communities my primary</font>

136
00:05:24,360 --> 00:05:28,259
<font color="#CCCCCC">charter is open-source there are lots of</font>

137
00:05:26,429 --> 00:05:30,748
people<font color="#E5E5E5"> here whom I've met who</font><font color="#CCCCCC"> are my</font>

138
00:05:28,259 --> 00:05:32,369
<font color="#CCCCCC">friends in this room actually with whom</font>

139
00:05:30,749 --> 00:05:33,689
<font color="#E5E5E5">I have I tried to find out whether</font>

140
00:05:32,369 --> 00:05:35,249
there's an opportunity for<font color="#CCCCCC"> their</font>

141
00:05:33,689 --> 00:05:37,979
particular<font color="#CCCCCC"> style or</font><font color="#E5E5E5"> doing a microkernel</font>

142
00:05:35,249 --> 00:05:39,689
<font color="#CCCCCC">or some related technology is</font><font color="#E5E5E5"> optimized</font>

143
00:05:37,979 --> 00:05:40,889
for arm or not how<font color="#E5E5E5"> can</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> help do they</font>

144
00:05:39,689 --> 00:05:43,319
have a community<font color="#CCCCCC"> you don't have a</font>

145
00:05:40,889 --> 00:05:45,539
community<font color="#CCCCCC"> come and attend the lonardo</font>

146
00:05:43,319 --> 00:05:47,249
<font color="#CCCCCC">connect I run a safety track there we</font>

147
00:05:45,539 --> 00:05:48,389
can introduce<font color="#E5E5E5"> you to</font><font color="#CCCCCC"> people that kind of</font>

148
00:05:47,249 --> 00:05:51,629
stuff and some people have actually

149
00:05:48,389 --> 00:05:53,459
<font color="#E5E5E5">benefited from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so all of this most</font>

150
00:05:51,629 --> 00:05:55,639
<font color="#E5E5E5">of us my primary focus area which is</font>

151
00:05:53,459 --> 00:05:58,079
safe data<font color="#CCCCCC"> fusion and perception</font>

152
00:05:55,639 --> 00:06:00,360
everybody<font color="#E5E5E5"> who's in the</font><font color="#CCCCCC"> autonomous space</font>

153
00:05:58,079 --> 00:06:02,279
whether it's for<font color="#CCCCCC"> automotives</font><font color="#E5E5E5"> or anything</font>

154
00:06:00,360 --> 00:06:03,779
<font color="#E5E5E5">that requires perception is in the</font>

155
00:06:02,279 --> 00:06:06,239
<font color="#E5E5E5">business of trying to come</font><font color="#CCCCCC"> up with</font>

156
00:06:03,779 --> 00:06:08,129
system<font color="#E5E5E5"> hardware that is generic and</font>

157
00:06:06,239 --> 00:06:09,839
applicable for data fusion<font color="#E5E5E5"> and</font>

158
00:06:08,129 --> 00:06:12,089
perception in different markets<font color="#CCCCCC"> with</font>

159
00:06:09,839 --> 00:06:16,639
some parameterization on top and it<font color="#CCCCCC"> is a</font>

160
00:06:12,089 --> 00:06:19,860
really<font color="#E5E5E5"> hard problem</font><font color="#CCCCCC"> to make safe</font><font color="#E5E5E5"> right</font>

161
00:06:16,639 --> 00:06:21,539
this is a very very simplified<font color="#E5E5E5"> overview</font>

162
00:06:19,860 --> 00:06:24,509
of the kind<font color="#E5E5E5"> of systems that</font><font color="#CCCCCC"> we reason</font>

163
00:06:21,539 --> 00:06:25,919
about<font color="#CCCCCC"> at in arm you have</font><font color="#E5E5E5"> sensor blocks</font>

164
00:06:24,509 --> 00:06:27,779
with lots of arrays of sensors<font color="#CCCCCC"> you have</font>

165
00:06:25,919 --> 00:06:29,789
<font color="#E5E5E5">an i/o concentrator that tries to fuse</font>

166
00:06:27,779 --> 00:06:31,919
as much as it can<font color="#E5E5E5"> together</font><font color="#CCCCCC"> the data</font>

167
00:06:29,789 --> 00:06:35,099
<font color="#E5E5E5">format</font><font color="#CCCCCC"> for all the sensor</font><font color="#E5E5E5"> information is</font>

168
00:06:31,919 --> 00:06:37,049
standardized using algorithms<font color="#CCCCCC"> I can go</font>

169
00:06:35,099 --> 00:06:38,899
into detail if you<font color="#E5E5E5"> like but anyway</font><font color="#CCCCCC"> all</font>

170
00:06:37,050 --> 00:06:41,999
of<font color="#E5E5E5"> that is done</font><font color="#CCCCCC"> so that you can build</font>

171
00:06:38,899 --> 00:06:43,949
<font color="#E5E5E5">sufficiently</font><font color="#CCCCCC"> comprehensive environmental</font>

172
00:06:41,999 --> 00:06:44,580
model of the immediate vicinity of

173
00:06:43,949 --> 00:06:46,590
<font color="#E5E5E5">whatever</font>

174
00:06:44,580 --> 00:06:49,140
is that you're<font color="#E5E5E5"> trying to make capable of</font>

175
00:06:46,590 --> 00:06:51,030
perception<font color="#E5E5E5"> you have general-purpose</font>

176
00:06:49,140 --> 00:06:53,969
computer clusters with processors with

177
00:06:51,030 --> 00:06:55,250
insanely high frequency<font color="#CCCCCC"> of operation and</font>

178
00:06:53,970 --> 00:06:58,950
very very sophisticated

179
00:06:55,250 --> 00:07:01,320
microarchitecture implementation that's

180
00:06:58,950 --> 00:07:05,460
<font color="#E5E5E5">fine</font><font color="#CCCCCC"> I have that effect</font><font color="#E5E5E5"> on people</font>

181
00:07:01,320 --> 00:07:07,320
I'm sorry yeah<font color="#E5E5E5"> so you have an</font><font color="#CCCCCC"> influence</font>

182
00:07:05,460 --> 00:07:09,810
block<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically a fancy term for</font>

183
00:07:07,320 --> 00:07:11,640
<font color="#E5E5E5">a subsystem</font><font color="#CCCCCC"> that has the</font><font color="#E5E5E5"> ability to run</font>

184
00:07:09,810 --> 00:07:14,160
<font color="#CCCCCC">three</font><font color="#E5E5E5"> trained noodle Network modules</font>

185
00:07:11,640 --> 00:07:16,650
which have been you know<font color="#E5E5E5"> trained to</font>

186
00:07:14,160 --> 00:07:18,780
detect<font color="#CCCCCC"> lanes and signs and pedestrians</font>

187
00:07:16,650 --> 00:07:20,460
<font color="#E5E5E5">and all of that stuff and you have an a</font>

188
00:07:18,780 --> 00:07:22,559
synergy<font color="#CCCCCC"> between the general-purpose</font>

189
00:07:20,460 --> 00:07:24,900
computing and<font color="#E5E5E5"> the influence block to try</font>

190
00:07:22,560 --> 00:07:26,400
<font color="#E5E5E5">and come up</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> particular goal</font>

191
00:07:24,900 --> 00:07:27,960
expression that needs to be<font color="#E5E5E5"> solved like</font>

192
00:07:26,400 --> 00:07:30,120
<font color="#E5E5E5">okay someone pressed the brake right you</font>

193
00:07:27,960 --> 00:07:32,010
have to decide what to do next<font color="#E5E5E5"> right so</font>

194
00:07:30,120 --> 00:07:33,210
there's a goal<font color="#E5E5E5"> solving aspect</font><font color="#CCCCCC"> of this</font>

195
00:07:32,010 --> 00:07:35,099
and<font color="#E5E5E5"> then all of</font><font color="#CCCCCC"> this goes out</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> these</font>

196
00:07:33,210 --> 00:07:37,770
mechatronic interfaces and on to the

197
00:07:35,100 --> 00:07:40,320
actuators now how do you<font color="#E5E5E5"> make this safe</font>

198
00:07:37,770 --> 00:07:44,430
<font color="#E5E5E5">there are lots of weaknesses in these</font>

199
00:07:40,320 --> 00:07:46,890
links<font color="#E5E5E5"> in terms of unpredictable</font>

200
00:07:44,430 --> 00:07:49,470
operation in terms<font color="#E5E5E5"> of inability</font><font color="#CCCCCC"> to meet</font>

201
00:07:46,890 --> 00:07:51,120
deadlines in terms of<font color="#CCCCCC"> noodle networks</font>

202
00:07:49,470 --> 00:07:53,760
being generally very hard to put

203
00:07:51,120 --> 00:07:55,500
constraints on<font color="#E5E5E5"> in terms of a priori</font>

204
00:07:53,760 --> 00:07:57,690
execution times and things like that

205
00:07:55,500 --> 00:08:01,800
<font color="#CCCCCC">right so that's</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> stuffing</font><font color="#E5E5E5"> and</font>

206
00:07:57,690 --> 00:08:03,240
micro kernels actually find use<font color="#CCCCCC"> in the</font>

207
00:08:01,800 --> 00:08:05,340
general-purpose computer side and and

208
00:08:03,240 --> 00:08:09,990
interestingly now in the infant inside

209
00:08:05,340 --> 00:08:11,280
as well<font color="#E5E5E5"> what's more</font><font color="#CCCCCC"> detailed</font><font color="#E5E5E5"> so the</font>

210
00:08:09,990 --> 00:08:12,780
<font color="#CCCCCC">processor architect said hey you should</font>

211
00:08:11,280 --> 00:08:14,190
check<font color="#E5E5E5"> out rust</font><font color="#CCCCCC"> right and when a</font>

212
00:08:12,780 --> 00:08:15,690
processor architected arm tails you

213
00:08:14,190 --> 00:08:16,980
should check something out that<font color="#E5E5E5"> usually</font>

214
00:08:15,690 --> 00:08:20,370
means I<font color="#E5E5E5"> want you to actually do a</font>

215
00:08:16,980 --> 00:08:21,900
rigorous<font color="#E5E5E5"> analysis of it so I kind of I</font>

216
00:08:20,370 --> 00:08:23,610
<font color="#CCCCCC">would say I did a rigorous enough</font>

217
00:08:21,900 --> 00:08:25,049
analysis but I said<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I look at this</font>

218
00:08:23,610 --> 00:08:26,940
<font color="#CCCCCC">a little more seriously</font><font color="#E5E5E5"> in my</font><font color="#CCCCCC"> spare time</font>

219
00:08:25,050 --> 00:08:28,770
<font color="#CCCCCC">I wanted something</font><font color="#E5E5E5"> that allowed me to</font>

220
00:08:26,940 --> 00:08:30,719
explore microkernel based systems of

221
00:08:28,770 --> 00:08:32,490
<font color="#CCCCCC">their composition because that is the</font>

222
00:08:30,720 --> 00:08:34,050
most prominent design pattern in the

223
00:08:32,490 --> 00:08:36,480
<font color="#E5E5E5">safety space when it comes to operating</font>

224
00:08:34,049 --> 00:08:37,859
<font color="#E5E5E5">system architecture right all the</font>

225
00:08:36,480 --> 00:08:40,680
proprietary operating systems are

226
00:08:37,860 --> 00:08:43,950
<font color="#CCCCCC">actually popular with vendors</font><font color="#E5E5E5"> our</font>

227
00:08:40,679 --> 00:08:45,930
microkernel based ones<font color="#CCCCCC"> I</font><font color="#E5E5E5"> definitely want</font>

228
00:08:43,950 --> 00:08:47,340
to look at the ARM architecture<font color="#E5E5E5"> aspect</font>

229
00:08:45,930 --> 00:08:49,140
of<font color="#E5E5E5"> the system design anyway so we've</font>

230
00:08:47,340 --> 00:08:50,910
added new instruction sets<font color="#E5E5E5"> we've added</font>

231
00:08:49,140 --> 00:08:52,980
new capability<font color="#CCCCCC"> into the instruction set</font>

232
00:08:50,910 --> 00:08:54,660
architecture to support safe operation

233
00:08:52,980 --> 00:08:56,280
there's memory tagging<font color="#CCCCCC"> there's pointer</font>

234
00:08:54,660 --> 00:08:56,730
authentication lots of stuff going<font color="#CCCCCC"> in</font>

235
00:08:56,280 --> 00:08:58,290
<font color="#E5E5E5">over there</font>

236
00:08:56,730 --> 00:09:00,299
I needed to reason about that

237
00:08:58,290 --> 00:09:01,949
and of course I've<font color="#E5E5E5"> always wanted to look</font>

238
00:09:00,299 --> 00:09:03,540
at a safety theme systems<font color="#E5E5E5"> programming</font>

239
00:09:01,949 --> 00:09:05,160
language<font color="#E5E5E5"> and here was my opportunity so</font>

240
00:09:03,540 --> 00:09:08,069
I said<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> how do I blend all of</font>

241
00:09:05,160 --> 00:09:10,529
<font color="#CCCCCC">this together I started writing</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> own</font>

242
00:09:08,069 --> 00:09:12,569
<font color="#E5E5E5">microcon because I'm a huge fan of the</font>

243
00:09:10,529 --> 00:09:16,399
ACL for stuff I've<font color="#E5E5E5"> been following it</font><font color="#CCCCCC"> for</font>

244
00:09:12,569 --> 00:09:21,478
a long<font color="#E5E5E5"> time I know</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> know personally</font>

245
00:09:16,399 --> 00:09:23,249
<font color="#E5E5E5">but a new language</font><font color="#CCCCCC"> and it became</font><font color="#E5E5E5"> a</font>

246
00:09:21,479 --> 00:09:24,839
<font color="#E5E5E5">little daunting right to try and mix all</font>

247
00:09:23,249 --> 00:09:26,519
of this together<font color="#CCCCCC"> so I said okay has</font>

248
00:09:24,839 --> 00:09:28,470
<font color="#E5E5E5">anyone else tried to do a microkernel</font>

249
00:09:26,519 --> 00:09:30,149
<font color="#CCCCCC">and it turns out</font><font color="#E5E5E5"> that somebody had and</font>

250
00:09:28,470 --> 00:09:32,549
that was<font color="#CCCCCC"> redox and that's what I'll use</font>

251
00:09:30,149 --> 00:09:36,539
<font color="#CCCCCC">that as a bit of a scratching</font><font color="#E5E5E5"> an itch</font>

252
00:09:32,549 --> 00:09:38,639
<font color="#CCCCCC">exercise right so before</font><font color="#E5E5E5"> we get there</font>

253
00:09:36,539 --> 00:09:40,229
here is a paradox now this paradox is

254
00:09:38,639 --> 00:09:41,729
not about rust or redox it's just a

255
00:09:40,229 --> 00:09:44,519
<font color="#E5E5E5">general paradox about some of the stuff</font>

256
00:09:41,729 --> 00:09:46,379
<font color="#CCCCCC">that I look at right you</font><font color="#E5E5E5"> often have</font>

257
00:09:44,519 --> 00:09:48,839
completely<font color="#E5E5E5"> orthogonal requirements</font>

258
00:09:46,379 --> 00:09:51,529
placed<font color="#E5E5E5"> on hardware and</font><font color="#CCCCCC"> software a very</font>

259
00:09:48,839 --> 00:09:56,069
very quickly<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is like a very</font>

260
00:09:51,529 --> 00:09:58,919
notional<font color="#E5E5E5"> trained</font><font color="#CCCCCC"> trained system of the</font>

261
00:09:56,069 --> 00:10:00,449
kind of<font color="#E5E5E5"> compute in terms</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> non you know</font>

262
00:09:58,919 --> 00:10:01,919
nominal peak single-threaded compute

263
00:10:00,449 --> 00:10:03,449
required<font color="#E5E5E5"> and automotives over the years</font>

264
00:10:01,919 --> 00:10:04,739
right I'm not putting anything absolute

265
00:10:03,449 --> 00:10:07,019
over here because people<font color="#E5E5E5"> read too much</font>

266
00:10:04,739 --> 00:10:10,499
into any slide I<font color="#E5E5E5"> put in an open audience</font>

267
00:10:07,019 --> 00:10:13,079
with<font color="#E5E5E5"> material right so this</font><font color="#CCCCCC"> is just a</font>

268
00:10:10,499 --> 00:10:14,669
notional stuff you had<font color="#E5E5E5"> brake control</font>

269
00:10:13,079 --> 00:10:15,929
<font color="#E5E5E5">power train fuel injection these are</font>

270
00:10:14,669 --> 00:10:17,539
what I call<font color="#E5E5E5"> the</font><font color="#CCCCCC"> traditional things in</font>

271
00:10:15,929 --> 00:10:19,410
the car<font color="#E5E5E5"> came about in the 80s</font>

272
00:10:17,539 --> 00:10:20,879
microcontroller class goes all

273
00:10:19,410 --> 00:10:22,499
everything everything really well

274
00:10:20,879 --> 00:10:24,569
understood<font color="#E5E5E5"> in terms of worst case</font>

275
00:10:22,499 --> 00:10:26,579
<font color="#CCCCCC">execution</font><font color="#E5E5E5"> yadda yadda</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> interesting</font>

276
00:10:24,569 --> 00:10:28,738
<font color="#E5E5E5">tricks like redundant execution used to</font>

277
00:10:26,579 --> 00:10:30,618
get<font color="#CCCCCC"> additional confidence</font><font color="#E5E5E5"> then you had</font>

278
00:10:28,739 --> 00:10:33,569
<font color="#CCCCCC">ivi where there was a big spurt in</font>

279
00:10:30,619 --> 00:10:35,309
compute requirement because people want

280
00:10:33,569 --> 00:10:39,209
<font color="#CCCCCC">to do I</font><font color="#E5E5E5"> don't know watch movies and</font><font color="#CCCCCC"> play</font>

281
00:10:35,309 --> 00:10:41,339
games<font color="#E5E5E5"> and all of that all that was great</font>

282
00:10:39,209 --> 00:10:44,429
for ARM Cortex<font color="#CCCCCC"> a processors are kind of</font>

283
00:10:41,339 --> 00:10:46,739
dominating in that space and then in the

284
00:10:44,429 --> 00:10:49,529
<font color="#CCCCCC">mid-2000s everyone went absolutely</font><font color="#E5E5E5"> not</font>

285
00:10:46,739 --> 00:10:51,449
so this autonomous thing and basically

286
00:10:49,529 --> 00:10:53,039
<font color="#CCCCCC">the compute requirement is just</font><font color="#E5E5E5"> going</font>

287
00:10:51,449 --> 00:10:55,019
nuts<font color="#CCCCCC"> ok if you haven't seen any trend</font>

288
00:10:53,039 --> 00:10:56,339
where it's converging it just seems to

289
00:10:55,019 --> 00:10:58,079
be seems to be going<font color="#E5E5E5"> higher and higher</font>

290
00:10:56,339 --> 00:11:00,449
<font color="#CCCCCC">and higher why am I telling</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> this</font>

291
00:10:58,079 --> 00:11:02,339
because it raises<font color="#CCCCCC"> some</font><font color="#E5E5E5"> interesting</font>

292
00:11:00,449 --> 00:11:06,209
paradoxes right so if you<font color="#E5E5E5"> look at the</font>

293
00:11:02,339 --> 00:11:08,999
<font color="#CCCCCC">degree of</font><font color="#E5E5E5"> criticality of</font><font color="#CCCCCC"> these classes</font>

294
00:11:06,209 --> 00:11:10,138
of software of<font color="#E5E5E5"> course brake control fuel</font>

295
00:11:08,999 --> 00:11:12,030
injection very high degree<font color="#CCCCCC"> of</font>

296
00:11:10,139 --> 00:11:13,380
criticality we need the highest

297
00:11:12,030 --> 00:11:15,390
<font color="#CCCCCC">Oren's give us your certificates of</font>

298
00:11:13,380 --> 00:11:16,890
assessment<font color="#E5E5E5"> in vehicle infotainment nah</font>

299
00:11:15,390 --> 00:11:18,480
you can run Linux or something on

300
00:11:16,890 --> 00:11:20,210
<font color="#CCCCCC">anytime</font><font color="#E5E5E5"> cool with that right</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

301
00:11:18,480 --> 00:11:21,660
<font color="#E5E5E5">care so much about the response time</font>

302
00:11:20,210 --> 00:11:23,490
<font color="#E5E5E5">autonomous control</font>

303
00:11:21,660 --> 00:11:24,510
nobody says this<font color="#E5E5E5"> explicitly but actually</font>

304
00:11:23,490 --> 00:11:26,040
thinking<font color="#CCCCCC"> about it it has an</font>

305
00:11:24,510 --> 00:11:28,130
exceptionally high<font color="#E5E5E5"> criticality</font>

306
00:11:26,040 --> 00:11:30,930
requirement as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> fine</font>

307
00:11:28,130 --> 00:11:32,550
however there<font color="#E5E5E5"> is a linear trend between</font>

308
00:11:30,930 --> 00:11:34,620
<font color="#E5E5E5">the sensitivity</font><font color="#CCCCCC"> to deterministic</font>

309
00:11:32,550 --> 00:11:37,069
<font color="#E5E5E5">execution and the degree of criticality</font>

310
00:11:34,620 --> 00:11:39,030
this is again kind<font color="#E5E5E5"> of an unwritten</font><font color="#CCCCCC"> rule</font>

311
00:11:37,070 --> 00:11:41,640
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you have something that's</font><font color="#CCCCCC"> very</font>

312
00:11:39,030 --> 00:11:43,500
critical<font color="#CCCCCC"> it must have an a priori known</font>

313
00:11:41,640 --> 00:11:44,970
worst case execution<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and you know</font>

314
00:11:43,500 --> 00:11:46,230
all of<font color="#E5E5E5"> that should be</font><font color="#CCCCCC"> analyzed</font><font color="#E5E5E5"> to death</font>

315
00:11:44,970 --> 00:11:49,560
and you should give me<font color="#E5E5E5"> proof that</font><font color="#CCCCCC"> you</font>

316
00:11:46,230 --> 00:11:51,120
<font color="#CCCCCC">are working</font><font color="#E5E5E5"> within those reaction time</font>

317
00:11:49,560 --> 00:11:53,849
right<font color="#CCCCCC"> so as you're becoming more and</font>

318
00:11:51,120 --> 00:11:56,040
more performant<font color="#E5E5E5"> your ability to react to</font>

319
00:11:53,850 --> 00:11:57,990
<font color="#E5E5E5">an asynchronous event in a bounded</font>

320
00:11:56,040 --> 00:12:00,120
fashion is becoming really<font color="#CCCCCC"> hard to do</font>

321
00:11:57,990 --> 00:12:02,280
<font color="#E5E5E5">because to give you that performance</font>

322
00:12:00,120 --> 00:12:04,470
processors are becoming multi order out

323
00:12:02,280 --> 00:12:06,540
of<font color="#CCCCCC"> issue speculative characteristics</font>

324
00:12:04,470 --> 00:12:08,850
<font color="#E5E5E5">complex</font><font color="#CCCCCC"> cache hierarchies translation</font>

325
00:12:06,540 --> 00:12:12,740
regimes<font color="#E5E5E5"> it's becoming</font><font color="#CCCCCC"> really hard to</font>

326
00:12:08,850 --> 00:12:14,490
come up with the upper bound<font color="#E5E5E5"> right so</font>

327
00:12:12,740 --> 00:12:15,900
autonomous control<font color="#E5E5E5"> has very high</font>

328
00:12:14,490 --> 00:12:17,850
<font color="#CCCCCC">requirements</font><font color="#E5E5E5"> it has very high</font>

329
00:12:15,900 --> 00:12:18,959
<font color="#E5E5E5">criticality requirements and performance</font>

330
00:12:17,850 --> 00:12:21,390
<font color="#CCCCCC">requirements</font><font color="#E5E5E5"> but high criticality</font>

331
00:12:18,960 --> 00:12:22,950
requires deterministic execution but<font color="#E5E5E5"> if</font>

332
00:12:21,390 --> 00:12:25,290
you're increasing the<font color="#CCCCCC"> professors the</font>

333
00:12:22,950 --> 00:12:27,120
professor the processors performance<font color="#E5E5E5"> the</font>

334
00:12:25,290 --> 00:12:28,800
<font color="#E5E5E5">slower is its reaction time right</font><font color="#CCCCCC"> this</font>

335
00:12:27,120 --> 00:12:31,140
is a paradox<font color="#CCCCCC"> and people are going</font><font color="#E5E5E5"> nuts</font>

336
00:12:28,800 --> 00:12:33,689
<font color="#CCCCCC">trying to solve it right</font><font color="#E5E5E5"> they're making</font>

337
00:12:31,140 --> 00:12:35,730
progress<font color="#CCCCCC"> there and you know about the</font>

338
00:12:33,690 --> 00:12:38,850
<font color="#E5E5E5">thin line between safety</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> security</font>

339
00:12:35,730 --> 00:12:41,010
<font color="#E5E5E5">this is just taken from</font><font color="#CCCCCC"> CVE details I</font>

340
00:12:38,850 --> 00:12:42,480
<font color="#CCCCCC">think this is a trend line and a pie</font>

341
00:12:41,010 --> 00:12:44,880
chart showing that some of the most

342
00:12:42,480 --> 00:12:46,860
common causes of security<font color="#E5E5E5"> and I would</font>

343
00:12:44,880 --> 00:12:51,000
say safety<font color="#CCCCCC"> related problems are to do</font>

344
00:12:46,860 --> 00:12:54,000
with overflows use after fees<font color="#E5E5E5"> privilege</font>

345
00:12:51,000 --> 00:12:55,470
escalation all of that stuff right which

346
00:12:54,000 --> 00:12:58,530
kind of fits<font color="#E5E5E5"> very well with the theme of</font>

347
00:12:55,470 --> 00:13:01,290
<font color="#CCCCCC">the stock weight but I spend a lot of</font>

348
00:12:58,530 --> 00:13:03,360
time<font color="#CCCCCC"> just screaming</font><font color="#E5E5E5"> silently in a room</font>

349
00:13:01,290 --> 00:13:05,880
with padded<font color="#CCCCCC"> walls because I'm</font>

350
00:13:03,360 --> 00:13:07,380
uncomfortable<font color="#E5E5E5"> with more complexity when</font>

351
00:13:05,880 --> 00:13:10,560
the question<font color="#E5E5E5"> is about a person's life</font>

352
00:13:07,380 --> 00:13:14,550
<font color="#E5E5E5">right but yeah someone something needs</font>

353
00:13:10,560 --> 00:13:16,979
<font color="#E5E5E5">to give autonomous functions started</font>

354
00:13:14,550 --> 00:13:18,689
<font color="#E5E5E5">becoming into the limelight because of</font>

355
00:13:16,980 --> 00:13:21,210
cars but<font color="#E5E5E5"> now they're going into toys</font>

356
00:13:18,690 --> 00:13:22,110
drones robots industrial assembly lines

357
00:13:21,210 --> 00:13:24,480
take<font color="#E5E5E5"> your pick</font>

358
00:13:22,110 --> 00:13:26,339
hardware engineers<font color="#E5E5E5"> are trying</font><font color="#CCCCCC"> very hard</font>

359
00:13:24,480 --> 00:13:29,310
<font color="#E5E5E5">to make this sensibly safe</font>

360
00:13:26,339 --> 00:13:31,319
the software complexity<font color="#E5E5E5"> is not going to</font>

361
00:13:29,310 --> 00:13:33,869
come<font color="#E5E5E5"> down it's going higher</font><font color="#CCCCCC"> than higher</font>

362
00:13:31,319 --> 00:13:36,748
<font color="#E5E5E5">right so anything we can do to make the</font>

363
00:13:33,870 --> 00:13:37,050
<font color="#E5E5E5">software safer is welcome what have we</font>

364
00:13:36,749 --> 00:13:38,430
<font color="#E5E5E5">done</font>

365
00:13:37,050 --> 00:13:40,469
<font color="#CCCCCC">mixed criticality hardware and software</font>

366
00:13:38,430 --> 00:13:42,269
<font color="#E5E5E5">design let's chop up the design into</font>

367
00:13:40,470 --> 00:13:43,620
bits that are very<font color="#E5E5E5"> critical bits that</font>

368
00:13:42,269 --> 00:13:45,389
are less critical<font color="#E5E5E5"> and come up with some</font>

369
00:13:43,620 --> 00:13:46,980
guarantees of those boundaries<font color="#E5E5E5"> do</font>

370
00:13:45,389 --> 00:13:48,629
traditional<font color="#CCCCCC"> quality management software</font>

371
00:13:46,980 --> 00:13:49,889
<font color="#CCCCCC">show</font><font color="#E5E5E5"> me a specification show me a design</font>

372
00:13:48,629 --> 00:13:50,610
have you written the<font color="#E5E5E5"> test where</font><font color="#CCCCCC"> is a</font>

373
00:13:49,889 --> 00:13:53,670
test report

374
00:13:50,610 --> 00:13:56,910
ar-ar-ar<font color="#CCCCCC"> a-- or or you</font><font color="#E5E5E5"> know what</font><font color="#CCCCCC"> C's</font>

375
00:13:53,670 --> 00:13:59,069
ambiguous<font color="#CCCCCC"> will give you a specification</font>

376
00:13:56,910 --> 00:14:00,449
<font color="#CCCCCC">called misra that kind</font><font color="#E5E5E5"> of removes the</font>

377
00:13:59,069 --> 00:14:02,519
ambiguity<font color="#CCCCCC"> now you have to</font><font color="#E5E5E5"> recode</font>

378
00:14:00,449 --> 00:14:04,378
everything you wrote<font color="#E5E5E5"> using this and show</font>

379
00:14:02,519 --> 00:14:06,660
me<font color="#CCCCCC"> that it's all compiling correctly</font><font color="#E5E5E5"> I</font>

380
00:14:04,379 --> 00:14:08,670
don't like it<font color="#E5E5E5"> I hate it</font><font color="#CCCCCC"> but it's there</font>

381
00:14:06,660 --> 00:14:10,079
in<font color="#CCCCCC"> the industry</font><font color="#E5E5E5"> and then this formal</font>

382
00:14:08,670 --> 00:14:11,849
verification of hardware and software

383
00:14:10,079 --> 00:14:13,258
which<font color="#E5E5E5"> in my opinion is</font><font color="#CCCCCC"> the gold standard</font>

384
00:14:11,850 --> 00:14:15,149
<font color="#CCCCCC">rain machine</font>

385
00:14:13,259 --> 00:14:16,649
<font color="#CCCCCC">shakable proofs of implementation</font>

386
00:14:15,149 --> 00:14:19,079
correctness<font color="#E5E5E5"> of the hardware</font><font color="#CCCCCC"> and software</font>

387
00:14:16,649 --> 00:14:21,360
both<font color="#E5E5E5"> I really like what the ACL four</font>

388
00:14:19,079 --> 00:14:23,819
guys are doing but as I've<font color="#E5E5E5"> told them on</font>

389
00:14:21,360 --> 00:14:25,139
<font color="#E5E5E5">several occasions there this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the up</font>

390
00:14:23,819 --> 00:14:26,969
against the wall<font color="#CCCCCC"> okay</font>

391
00:14:25,139 --> 00:14:28,860
formal verification<font color="#CCCCCC"> unless it gets</font>

392
00:14:26,970 --> 00:14:31,680
commoditized to the extent<font color="#CCCCCC"> that your</font>

393
00:14:28,860 --> 00:14:34,680
friend who wrote<font color="#CCCCCC"> JavaScript to add this</font>

394
00:14:31,680 --> 00:14:36,149
funky spinner on his web page<font color="#E5E5E5"> unless he</font>

395
00:14:34,680 --> 00:14:37,620
can use formal verification without

396
00:14:36,149 --> 00:14:39,720
knowing what formal verification is

397
00:14:37,620 --> 00:14:42,930
people are<font color="#E5E5E5"> not going to adopt it right</font>

398
00:14:39,720 --> 00:14:44,579
<font color="#E5E5E5">so I'm a huge</font><font color="#CCCCCC"> advocate of</font><font color="#E5E5E5"> formal</font>

399
00:14:42,930 --> 00:14:47,489
verification and<font color="#E5E5E5"> I'm there for the ACL</font>

400
00:14:44,579 --> 00:14:48,569
<font color="#E5E5E5">for guys as they know but I worry that</font>

401
00:14:47,490 --> 00:14:49,949
<font color="#E5E5E5">it's unless they solve the</font>

402
00:14:48,569 --> 00:14:51,779
commoditization problem it's gonna<font color="#E5E5E5"> be</font>

403
00:14:49,949 --> 00:14:53,040
initial so then why don't<font color="#CCCCCC"> we</font><font color="#E5E5E5"> look at a</font>

404
00:14:51,779 --> 00:14:54,870
<font color="#E5E5E5">language right there's a new language</font>

405
00:14:53,040 --> 00:14:57,689
<font color="#E5E5E5">that's is disruptive but it's got safety</font>

406
00:14:54,870 --> 00:15:01,050
properties<font color="#E5E5E5"> let's check it out</font>

407
00:14:57,689 --> 00:15:03,719
I don't want to see this my vision of

408
00:15:01,050 --> 00:15:06,979
cute furry cats and safe cars<font color="#CCCCCC"> you know</font>

409
00:15:03,720 --> 00:15:10,019
just<font color="#E5E5E5"> very sweet turn into this right</font>

410
00:15:06,980 --> 00:15:12,029
<font color="#CCCCCC">what's up</font><font color="#E5E5E5"> I'm not just</font><font color="#CCCCCC"> a car I'm</font>

411
00:15:10,019 --> 00:15:15,029
actually a killing machine right and you

412
00:15:12,029 --> 00:15:16,949
can program me remotely<font color="#E5E5E5"> and influence my</font>

413
00:15:15,029 --> 00:15:18,500
neural network to<font color="#E5E5E5"> actually pick out the</font>

414
00:15:16,949 --> 00:15:22,339
<font color="#E5E5E5">particular people I want to assassinate</font>

415
00:15:18,500 --> 00:15:28,379
right so let's try not not get there

416
00:15:22,339 --> 00:15:30,620
finally<font color="#CCCCCC"> trust this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> URL of the</font>

417
00:15:28,379 --> 00:15:35,250
<font color="#CCCCCC">Russ language website that's the</font><font color="#E5E5E5"> logo</font>

418
00:15:30,620 --> 00:15:36,779
and that's hello<font color="#CCCCCC"> world I have a couple</font>

419
00:15:35,250 --> 00:15:38,129
<font color="#CCCCCC">of</font><font color="#E5E5E5"> quotes right it's a great way of</font>

420
00:15:36,779 --> 00:15:39,750
<font color="#E5E5E5">introducing something nice and</font>

421
00:15:38,129 --> 00:15:40,259
controversial<font color="#E5E5E5"> and just cherry pick some</font>

422
00:15:39,750 --> 00:15:41,939
quotes

423
00:15:40,259 --> 00:15:43,829
from the<font color="#E5E5E5"> internet usually</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> reddit</font>

424
00:15:41,939 --> 00:15:45,299
<font color="#E5E5E5">and put them over here but some of</font><font color="#CCCCCC"> them</font>

425
00:15:43,829 --> 00:15:47,488
actually interesting right so rust is

426
00:15:45,299 --> 00:15:49,919
like<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> curve while</font><font color="#CCCCCC"> suspended on</font>

427
00:15:47,489 --> 00:15:51,329
strings<font color="#E5E5E5"> and wearing protective gear yes</font>

428
00:15:49,919 --> 00:15:53,009
sometimes<font color="#E5E5E5"> it'll look really ridiculous</font>

429
00:15:51,329 --> 00:15:54,839
but you'll be<font color="#CCCCCC"> able to do all sorts of</font>

430
00:15:53,009 --> 00:15:57,239
<font color="#E5E5E5">cool moves</font><font color="#CCCCCC"> without</font><font color="#E5E5E5"> hurting</font><font color="#CCCCCC"> yourself</font>

431
00:15:54,839 --> 00:15:59,029
<font color="#CCCCCC">gold I need to send</font><font color="#E5E5E5"> this guy a message</font>

432
00:15:57,239 --> 00:16:01,529
and say I do it that<font color="#E5E5E5"> was awesome</font>

433
00:15:59,029 --> 00:16:03,239
the rust book introduction<font color="#E5E5E5"> has a very</font>

434
00:16:01,529 --> 00:16:07,649
<font color="#CCCCCC">profound statement</font><font color="#E5E5E5"> which I initially</font>

435
00:16:03,239 --> 00:16:09,359
took as marketing speak but in<font color="#E5E5E5"> hindsight</font>

436
00:16:07,649 --> 00:16:10,949
I think<font color="#CCCCCC"> it makes a</font><font color="#E5E5E5"> lot of sense it</font>

437
00:16:09,359 --> 00:16:12,509
wasn't<font color="#CCCCCC"> always so</font><font color="#E5E5E5"> clear but the</font><font color="#CCCCCC"> RUS</font>

438
00:16:10,949 --> 00:16:15,149
programming language is fundamentally

439
00:16:12,509 --> 00:16:16,859
about empowerment<font color="#CCCCCC"> no matter what kind of</font>

440
00:16:15,149 --> 00:16:19,470
code<font color="#CCCCCC"> you are writing</font><font color="#E5E5E5"> now rest trust</font>

441
00:16:16,859 --> 00:16:21,179
empowers you to<font color="#E5E5E5"> reach</font><font color="#CCCCCC"> farther to program</font>

442
00:16:19,470 --> 00:16:23,669
with confidence and<font color="#E5E5E5"> a wider variety of</font>

443
00:16:21,179 --> 00:16:26,728
domains<font color="#E5E5E5"> than you did before</font><font color="#CCCCCC"> I stand by</font>

444
00:16:23,669 --> 00:16:28,829
this by the way<font color="#CCCCCC"> ok so Russ is very</font>

445
00:16:26,729 --> 00:16:30,149
expressive<font color="#CCCCCC"> I</font><font color="#E5E5E5"> often use rust instead of</font>

446
00:16:28,829 --> 00:16:32,939
Python or Ruby<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> by a</font>

447
00:16:30,149 --> 00:16:35,850
<font color="#E5E5E5">gentleman</font><font color="#CCCCCC"> called me that's me</font><font color="#E5E5E5"> right so</font>

448
00:16:32,939 --> 00:16:37,649
apps it is expressive<font color="#E5E5E5"> I'm using it to do</font>

449
00:16:35,850 --> 00:16:40,889
stuff<font color="#CCCCCC"> that I would do with</font><font color="#E5E5E5"> bash scripts</font>

450
00:16:37,649 --> 00:16:43,319
or Python or<font color="#CCCCCC"> Ruby unite I</font><font color="#E5E5E5"> just like the</font>

451
00:16:40,889 --> 00:16:47,789
syntax it's clean<font color="#E5E5E5"> it's easy to read it's</font>

452
00:16:43,319 --> 00:16:49,378
quite in<font color="#E5E5E5"> Tudor</font><font color="#CCCCCC"> rust</font><font color="#E5E5E5"> expressiveness is</font>

453
00:16:47,789 --> 00:16:51,359
great for making complex<font color="#E5E5E5"> system software</font>

454
00:16:49,379 --> 00:16:54,059
concepts<font color="#E5E5E5"> accessible this is again my</font>

455
00:16:51,359 --> 00:16:57,449
comment the snippet here<font color="#E5E5E5"> is a page table</font>

456
00:16:54,059 --> 00:16:59,939
walk example from redox<font color="#E5E5E5"> in the generic</font>

457
00:16:57,449 --> 00:17:01,349
part of the code<font color="#E5E5E5"> just read this ok and</font>

458
00:16:59,939 --> 00:17:03,238
then try<font color="#CCCCCC"> and look at similar</font><font color="#E5E5E5"> code in</font>

459
00:17:01,350 --> 00:17:06,209
Linux or FreeBSD or anything else this

460
00:17:03,239 --> 00:17:07,829
<font color="#CCCCCC">is beautiful it's prose</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I want to</font>

461
00:17:06,209 --> 00:17:09,720
get<font color="#E5E5E5"> a</font><font color="#CCCCCC"> reference to a particular fourth</font>

462
00:17:07,829 --> 00:17:11,369
<font color="#E5E5E5">level page table if something's</font><font color="#CCCCCC"> missing</font>

463
00:17:09,720 --> 00:17:13,740
there please create the table right

464
00:17:11,369 --> 00:17:15,569
there<font color="#CCCCCC"> at the index</font><font color="#E5E5E5"> I care about and fill</font>

465
00:17:13,740 --> 00:17:18,120
in the hierarchy<font color="#E5E5E5"> for my translation</font>

466
00:17:15,569 --> 00:17:20,519
table walk easy to read<font color="#CCCCCC"> gets the idea</font>

467
00:17:18,119 --> 00:17:23,750
across<font color="#E5E5E5"> immediately very subjective</font><font color="#CCCCCC"> but I</font>

468
00:17:20,519 --> 00:17:25,620
think it's really really expressive

469
00:17:23,750 --> 00:17:27,510
performance right so everyone's got a

470
00:17:25,619 --> 00:17:32,370
bee<font color="#E5E5E5"> in their bonnet about trust versus</font><font color="#CCCCCC"> C</font>

471
00:17:27,510 --> 00:17:35,250
and<font color="#CCCCCC"> C++ and GU I in my lab intend doing</font>

472
00:17:32,370 --> 00:17:36,989
a far more<font color="#E5E5E5"> comprehensive benchmark for</font>

473
00:17:35,250 --> 00:17:41,070
<font color="#E5E5E5">the moment what I</font><font color="#CCCCCC"> present before</font><font color="#E5E5E5"> you is</font>

474
00:17:36,990 --> 00:17:44,309
<font color="#CCCCCC">the very controversial</font><font color="#E5E5E5"> benchmarks game</font>

475
00:17:41,070 --> 00:17:46,830
which is a suite of<font color="#E5E5E5"> synthetic toy</font>

476
00:17:44,309 --> 00:17:49,428
programs<font color="#E5E5E5"> written by a large community</font>

477
00:17:46,830 --> 00:17:51,629
<font color="#E5E5E5">that tries and scores programs</font>

478
00:17:49,429 --> 00:17:53,940
<font color="#E5E5E5">programming languages</font>

479
00:17:51,630 --> 00:17:55,950
so what I do find is<font color="#CCCCCC"> that the comment</font>

480
00:17:53,940 --> 00:17:57,330
<font color="#E5E5E5">made in the rust literature which is</font>

481
00:17:55,950 --> 00:17:59,250
<font color="#CCCCCC">like the</font><font color="#E5E5E5"> performance of machine code</font>

482
00:17:57,330 --> 00:18:00,990
generated<font color="#CCCCCC"> from idiomatic rust is</font>

483
00:17:59,250 --> 00:18:03,360
<font color="#E5E5E5">typically at par or better than machine</font>

484
00:18:00,990 --> 00:18:05,370
code<font color="#CCCCCC"> generated from</font><font color="#E5E5E5"> idiomatic C++</font><font color="#CCCCCC"> it's</font>

485
00:18:03,360 --> 00:18:07,110
<font color="#E5E5E5">often true</font><font color="#CCCCCC"> okay</font>

486
00:18:05,370 --> 00:18:08,668
these are you can't read this<font color="#E5E5E5"> clearly</font>

487
00:18:07,110 --> 00:18:10,010
but<font color="#CCCCCC"> you'll get</font><font color="#E5E5E5"> the slides the names of</font>

488
00:18:08,669 --> 00:18:13,590
the programs they have<font color="#CCCCCC"> there's a</font>

489
00:18:10,010 --> 00:18:14,879
nucleotide<font color="#CCCCCC"> folding kind of algorithms</font>

490
00:18:13,590 --> 00:18:16,799
<font color="#E5E5E5">and a bunch of others and then they've</font>

491
00:18:14,880 --> 00:18:18,960
scored all of<font color="#E5E5E5"> these languages all I'm</font>

492
00:18:16,799 --> 00:18:20,668
<font color="#E5E5E5">trying to say</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> there is a case to</font>

493
00:18:18,960 --> 00:18:23,520
be made<font color="#E5E5E5"> for rusts performance you know</font>

494
00:18:20,669 --> 00:18:25,860
it can't be<font color="#E5E5E5"> ignored</font><font color="#CCCCCC"> now I'm</font><font color="#E5E5E5"> not going to</font>

495
00:18:23,520 --> 00:18:28,200
necessarily name special<font color="#E5E5E5"> specific</font>

496
00:18:25,860 --> 00:18:29,729
projects but being at<font color="#E5E5E5"> arm I get to speak</font>

497
00:18:28,200 --> 00:18:31,730
<font color="#E5E5E5">to</font><font color="#CCCCCC"> people across</font><font color="#E5E5E5"> the ecosystem on the</font>

498
00:18:29,730 --> 00:18:34,320
<font color="#E5E5E5">topic of safety and on the topic</font>

499
00:18:31,730 --> 00:18:37,620
increasingly of<font color="#E5E5E5"> of rust</font>

500
00:18:34,320 --> 00:18:40,950
I think<font color="#E5E5E5"> everyone's using it some people</font>

501
00:18:37,620 --> 00:18:42,689
<font color="#CCCCCC">are</font><font color="#E5E5E5"> using it as a way to locate hot</font>

502
00:18:40,950 --> 00:18:45,210
<font color="#E5E5E5">spots in their code in terms of</font>

503
00:18:42,690 --> 00:18:46,650
performance<font color="#CCCCCC"> and then replace those hot</font>

504
00:18:45,210 --> 00:18:48,690
spots with<font color="#E5E5E5"> the library they were written</font>

505
00:18:46,650 --> 00:18:51,330
in rust right so that's the safer path

506
00:18:48,690 --> 00:18:53,610
<font color="#E5E5E5">they start getting performance and scale</font>

507
00:18:51,330 --> 00:18:55,289
<font color="#CCCCCC">all of</font><font color="#E5E5E5"> that stuff</font><font color="#CCCCCC"> without adopting</font><font color="#E5E5E5"> rust</font>

508
00:18:53,610 --> 00:18:57,840
the language<font color="#E5E5E5"> other people are saying</font>

509
00:18:55,289 --> 00:19:02,460
we're<font color="#CCCCCC"> going to use rust</font><font color="#E5E5E5"> straight off</font>

510
00:18:57,840 --> 00:19:04,230
<font color="#E5E5E5">Amazon is a great</font><font color="#CCCCCC"> example of that so</font><font color="#E5E5E5"> now</font>

511
00:19:02,460 --> 00:19:06,960
some random statements which I can back

512
00:19:04,230 --> 00:19:08,760
<font color="#E5E5E5">up</font><font color="#CCCCCC"> you can't forget to explicitly</font>

513
00:19:06,960 --> 00:19:10,500
initialize variables with rust the

514
00:19:08,760 --> 00:19:10,950
compiler will<font color="#E5E5E5"> prevent that it won't</font>

515
00:19:10,500 --> 00:19:12,720
allow that

516
00:19:10,950 --> 00:19:14,880
you can't overflow<font color="#E5E5E5"> an array the compiler</font>

517
00:19:12,720 --> 00:19:16,350
<font color="#E5E5E5">won't check that at compile time but at</font>

518
00:19:14,880 --> 00:19:19,409
a<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will get a panic</font>

519
00:19:16,350 --> 00:19:20,850
consistently as opposed to C or<font color="#CCCCCC"> C++ but</font>

520
00:19:19,409 --> 00:19:23,669
you may or<font color="#CCCCCC"> may not</font><font color="#E5E5E5"> have something bad</font>

521
00:19:20,850 --> 00:19:26,340
<font color="#CCCCCC">happen right which is a feature I love</font><font color="#E5E5E5"> C</font>

522
00:19:23,669 --> 00:19:28,860
my career was based on<font color="#E5E5E5"> C</font><font color="#CCCCCC"> and C++ but</font>

523
00:19:26,340 --> 00:19:31,709
<font color="#E5E5E5">facts are facts you can't forget to free</font>

524
00:19:28,860 --> 00:19:33,658
<font color="#CCCCCC">memory allocated on the heap no way</font><font color="#E5E5E5"> if</font>

525
00:19:31,710 --> 00:19:35,280
shared data is protected<font color="#CCCCCC"> by lock you</font>

526
00:19:33,659 --> 00:19:37,919
have<font color="#CCCCCC"> to take that lock</font><font color="#E5E5E5"> because that</font>

527
00:19:35,280 --> 00:19:40,590
locking scheme<font color="#CCCCCC"> owns the data</font><font color="#E5E5E5"> you can't</font>

528
00:19:37,919 --> 00:19:43,740
say I use a wrapper in a<font color="#E5E5E5"> library which</font>

529
00:19:40,590 --> 00:19:45,299
had an API<font color="#E5E5E5"> asking me to you</font><font color="#CCCCCC"> know take</font>

530
00:19:43,740 --> 00:19:47,880
<font color="#E5E5E5">this lock and</font><font color="#CCCCCC"> I forgot or something</font>

531
00:19:45,299 --> 00:19:50,850
<font color="#E5E5E5">right</font><font color="#CCCCCC"> no it</font><font color="#E5E5E5"> won't compile you can't have</font>

532
00:19:47,880 --> 00:19:52,650
a dangling pointer<font color="#CCCCCC"> or</font><font color="#E5E5E5"> double free is</font><font color="#CCCCCC"> not</font>

533
00:19:50,850 --> 00:19:54,689
possible use after free is not<font color="#CCCCCC"> possible</font>

534
00:19:52,650 --> 00:19:56,220
<font color="#E5E5E5">generally speaking there</font><font color="#CCCCCC"> is no undefined</font>

535
00:19:54,690 --> 00:19:57,900
behavior<font color="#E5E5E5"> and they put a lot of emphasis</font>

536
00:19:56,220 --> 00:20:00,620
on making<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> stays that</font><font color="#E5E5E5"> way</font>

537
00:19:57,900 --> 00:20:00,620
<font color="#E5E5E5">excuse me</font>

538
00:20:02,750 --> 00:20:08,310
so what's<font color="#CCCCCC"> the big</font><font color="#E5E5E5"> deal the big</font><font color="#CCCCCC"> deal is</font>

539
00:20:06,060 --> 00:20:12,270
it's all<font color="#E5E5E5"> checked at compile time</font><font color="#CCCCCC"> which</font>

540
00:20:08,310 --> 00:20:14,669
is huge so it's actually<font color="#E5E5E5"> a combination</font>

541
00:20:12,270 --> 00:20:17,760
of<font color="#CCCCCC"> two languages</font><font color="#E5E5E5"> let's turn up the</font>

542
00:20:14,670 --> 00:20:19,470
controversy a little bit<font color="#E5E5E5"> there's a frost</font>

543
00:20:17,760 --> 00:20:21,360
and there's unsafe<font color="#CCCCCC"> frost the moment I</font>

544
00:20:19,470 --> 00:20:22,890
<font color="#E5E5E5">say this to somebody who's a bit of a</font>

545
00:20:21,360 --> 00:20:24,389
<font color="#CCCCCC">skeptic and</font><font color="#E5E5E5"> by the way in the first time</font>

546
00:20:22,890 --> 00:20:27,030
I've<font color="#E5E5E5"> had two or three instances of</font>

547
00:20:24,390 --> 00:20:28,650
heated debates from<font color="#E5E5E5"> this one it's unsafe</font>

548
00:20:27,030 --> 00:20:30,660
that's it I'm not using<font color="#E5E5E5"> it it's unsafe</font>

549
00:20:28,650 --> 00:20:32,400
<font color="#CCCCCC">don't talk to me now</font><font color="#E5E5E5"> it's supposed to be</font>

550
00:20:30,660 --> 00:20:35,150
safe you<font color="#E5E5E5"> it son saying I'm not talking</font>

551
00:20:32,400 --> 00:20:39,240
<font color="#E5E5E5">to you that's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> the point the</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> is</font>

552
00:20:35,150 --> 00:20:41,910
with C<font color="#E5E5E5"> and C++ the whole paradigm is</font>

553
00:20:39,240 --> 00:20:43,770
unsafe by design<font color="#CCCCCC"> now I should be able</font><font color="#E5E5E5"> to</font>

554
00:20:41,910 --> 00:20:45,390
<font color="#E5E5E5">create a buffer populated with random</font>

555
00:20:43,770 --> 00:20:47,490
<font color="#CCCCCC">numbers get a function pointer to the</font>

556
00:20:45,390 --> 00:20:50,760
start<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that buffer</font><font color="#E5E5E5"> and call that junk</font>

557
00:20:47,490 --> 00:20:52,890
as good<font color="#E5E5E5"> right because</font><font color="#CCCCCC"> I need</font><font color="#E5E5E5"> that for a</font>

558
00:20:50,760 --> 00:20:55,980
whole<font color="#CCCCCC"> class of problems</font><font color="#E5E5E5"> and C's C and</font>

559
00:20:52,890 --> 00:20:58,310
C++ gives me<font color="#E5E5E5"> that right you can't do</font>

560
00:20:55,980 --> 00:21:01,380
that in safe<font color="#CCCCCC"> rust for very good reason</font>

561
00:20:58,310 --> 00:21:03,330
<font color="#E5E5E5">however</font><font color="#CCCCCC"> if you do need to use</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> kind</font>

562
00:21:01,380 --> 00:21:06,690
of shenanigan<font color="#E5E5E5"> you have an escape hatch</font>

563
00:21:03,330 --> 00:21:08,909
<font color="#E5E5E5">called unsafe</font><font color="#CCCCCC"> rust</font><font color="#E5E5E5"> the cool thing</font><font color="#CCCCCC"> is</font>

564
00:21:06,690 --> 00:21:10,800
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> forced to annotate all the</font>

565
00:21:08,910 --> 00:21:13,290
code where you want to do this<font color="#CCCCCC"> so static</font>

566
00:21:10,800 --> 00:21:16,260
analyzers explicitly<font color="#E5E5E5"> know where the</font>

567
00:21:13,290 --> 00:21:17,879
unsafe code is nine times out of<font color="#E5E5E5"> ten and</font>

568
00:21:16,260 --> 00:21:19,140
I'm it's probably<font color="#E5E5E5"> 10 out of 10 or I'm</font>

569
00:21:17,880 --> 00:21:22,350
just<font color="#CCCCCC"> saying 9 out of 10</font><font color="#E5E5E5"> because I'm not</font>

570
00:21:19,140 --> 00:21:25,080
<font color="#E5E5E5">100% sure if code compiles with rust the</font>

571
00:21:22,350 --> 00:21:26,820
rust compiler<font color="#E5E5E5"> it's correct it doesn't</font>

572
00:21:25,080 --> 00:21:28,500
have any of<font color="#E5E5E5"> these problems if you're</font>

573
00:21:26,820 --> 00:21:30,419
<font color="#E5E5E5">writing an operating system like I</font>

574
00:21:28,500 --> 00:21:31,800
encountered this with the redox<font color="#E5E5E5"> where I</font>

575
00:21:30,420 --> 00:21:33,840
was<font color="#E5E5E5"> doing context switching and</font><font color="#CCCCCC"> I've had</font>

576
00:21:31,800 --> 00:21:37,320
<font color="#E5E5E5">problems with some assumptions I made</font>

577
00:21:33,840 --> 00:21:39,209
<font color="#E5E5E5">with register frames or whatever yes</font>

578
00:21:37,320 --> 00:21:41,370
there was<font color="#CCCCCC"> a bomb out</font><font color="#E5E5E5"> I knew where to</font>

579
00:21:39,210 --> 00:21:43,140
<font color="#E5E5E5">look because the scope of the search</font>

580
00:21:41,370 --> 00:21:44,850
space<font color="#E5E5E5"> had been reduced to</font><font color="#CCCCCC"> just the bits</font>

581
00:21:43,140 --> 00:21:47,250
that were tagged with the unsafe code

582
00:21:44,850 --> 00:21:49,469
I think that's superb<font color="#CCCCCC"> I think that's</font>

583
00:21:47,250 --> 00:21:55,230
great<font color="#CCCCCC"> that there are unsafe sections</font><font color="#E5E5E5"> in</font>

584
00:21:49,470 --> 00:21:59,250
<font color="#E5E5E5">Indian rust right mmm yeah I think I</font>

585
00:21:55,230 --> 00:22:00,600
said all<font color="#CCCCCC"> of this ok so it's not an</font>

586
00:21:59,250 --> 00:22:02,640
interpreted language<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of people</font>

587
00:22:00,600 --> 00:22:03,899
don't<font color="#E5E5E5"> know this it compiles to native</font>

588
00:22:02,640 --> 00:22:04,560
machine<font color="#E5E5E5"> code there's no garbage</font>

589
00:22:03,900 --> 00:22:06,930
collector

590
00:22:04,560 --> 00:22:08,669
there's no<font color="#CCCCCC"> associated</font><font color="#E5E5E5"> the runtime</font>

591
00:22:06,930 --> 00:22:13,309
<font color="#CCCCCC">non-determinism</font><font color="#E5E5E5"> which becomes an issue</font>

592
00:22:08,670 --> 00:22:16,370
<font color="#E5E5E5">within</font><font color="#CCCCCC"> our areas there's a</font>

593
00:22:13,309 --> 00:22:18,740
scoop based scheme<font color="#E5E5E5"> where allocation and</font>

594
00:22:16,370 --> 00:22:22,189
de-allocation is checked<font color="#E5E5E5"> at at compile</font>

595
00:22:18,740 --> 00:22:23,539
time<font color="#E5E5E5"> so all the types of all variables</font>

596
00:22:22,190 --> 00:22:24,710
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to be known at compile time the</font>

597
00:22:23,539 --> 00:22:27,080
compiler<font color="#E5E5E5"> will not allow you to progress</font>

598
00:22:24,710 --> 00:22:28,639
otherwise but the<font color="#E5E5E5"> compiler can do type</font>

599
00:22:27,080 --> 00:22:29,840
inference<font color="#E5E5E5"> which is handy</font><font color="#CCCCCC"> if you're doing</font>

600
00:22:28,639 --> 00:22:31,340
<font color="#E5E5E5">a lot of code and you don't want to</font>

601
00:22:29,840 --> 00:22:32,629
repeat<font color="#E5E5E5"> the types again and again so</font>

602
00:22:31,340 --> 00:22:34,100
<font color="#E5E5E5">that's a modern feature a lot of modern</font>

603
00:22:32,629 --> 00:22:34,879
languages have automatic type inference

604
00:22:34,100 --> 00:22:37,428
as well<font color="#CCCCCC"> right</font>

605
00:22:34,879 --> 00:22:39,590
so and here's the really<font color="#CCCCCC"> cool one right</font>

606
00:22:37,429 --> 00:22:41,629
<font color="#E5E5E5">so as opposed to C C++ way if there's an</font>

607
00:22:39,590 --> 00:22:44,389
error<font color="#CCCCCC"> in the return value of a function</font>

608
00:22:41,629 --> 00:22:45,860
<font color="#CCCCCC">you can do be a really diligent and</font>

609
00:22:44,389 --> 00:22:48,049
smart programmer and check<font color="#E5E5E5"> and do</font>

610
00:22:45,860 --> 00:22:49,340
<font color="#E5E5E5">follow-on actions often enough like me</font>

611
00:22:48,049 --> 00:22:53,779
you will<font color="#E5E5E5"> forget because you're a lazy</font>

612
00:22:49,340 --> 00:22:55,369
<font color="#E5E5E5">kid but if you're using rust you have</font><font color="#CCCCCC"> to</font>

613
00:22:53,779 --> 00:22:57,619
acknowledge the<font color="#E5E5E5"> fact that this function</font>

614
00:22:55,369 --> 00:22:58,939
can<font color="#CCCCCC"> return</font><font color="#E5E5E5"> multiple return values and</font>

615
00:22:57,619 --> 00:23:01,549
you have to acknowledge that<font color="#E5E5E5"> you have</font>

616
00:22:58,940 --> 00:23:03,190
<font color="#E5E5E5">you you mean to perform a follow-up</font>

617
00:23:01,549 --> 00:23:05,299
action you can't ignore it<font color="#E5E5E5"> that</font>

618
00:23:03,190 --> 00:23:07,519
<font color="#CCCCCC">automatically takes of a whole class of</font>

619
00:23:05,299 --> 00:23:10,418
problems<font color="#E5E5E5"> when you don't have exception</font>

620
00:23:07,519 --> 00:23:12,320
handling in rest<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> have this</font>

621
00:23:10,419 --> 00:23:13,970
separation of recoverable<font color="#E5E5E5"> and non</font>

622
00:23:12,320 --> 00:23:16,269
recoverable<font color="#E5E5E5"> errors and there is a very</font>

623
00:23:13,970 --> 00:23:18,789
<font color="#E5E5E5">nice trick involving generics and</font>

624
00:23:16,269 --> 00:23:21,019
enumerators that is used to<font color="#E5E5E5"> encapsulate</font>

625
00:23:18,789 --> 00:23:23,240
potential problems like if there<font color="#E5E5E5"> is a</font>

626
00:23:21,019 --> 00:23:25,369
result is it<font color="#CCCCCC"> ochio it is or is it not</font>

627
00:23:23,240 --> 00:23:27,049
<font color="#CCCCCC">okay there's no null pointer check to</font>

628
00:23:25,369 --> 00:23:29,509
see whether the right thing happened you

629
00:23:27,049 --> 00:23:31,639
have a clean pattern matching functional

630
00:23:29,509 --> 00:23:33,799
language paradigm to actually look at

631
00:23:31,639 --> 00:23:34,998
the return<font color="#CCCCCC"> of some operation and check</font>

632
00:23:33,799 --> 00:23:38,059
whether the right thing happen or<font color="#E5E5E5"> not</font>

633
00:23:34,999 --> 00:23:39,889
<font color="#E5E5E5">that's really cool and</font><font color="#CCCCCC"> you have panic if</font>

634
00:23:38,059 --> 00:23:41,539
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> and you get back</font>

635
00:23:39,889 --> 00:23:43,129
traces and follow the funky stuff

636
00:23:41,539 --> 00:23:45,230
<font color="#E5E5E5">there's another one that</font><font color="#CCCCCC"> people don't</font>

637
00:23:43,129 --> 00:23:47,678
<font color="#E5E5E5">realize the</font><font color="#CCCCCC"> value of</font><font color="#E5E5E5"> okay so every day</font>

638
00:23:45,230 --> 00:23:50,450
all data<font color="#E5E5E5"> is immutable by design in rust</font>

639
00:23:47,679 --> 00:23:53,539
if you want to modify data you have<font color="#E5E5E5"> to</font>

640
00:23:50,450 --> 00:23:56,029
declare the<font color="#E5E5E5"> data to be mutable it's</font>

641
00:23:53,539 --> 00:23:57,919
immutable by design<font color="#E5E5E5"> think about it right</font>

642
00:23:56,029 --> 00:24:00,379
<font color="#E5E5E5">this is the root of a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> problems</font><font color="#CCCCCC"> in</font>

643
00:23:57,919 --> 00:24:02,809
software<font color="#CCCCCC"> written at scale</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> being</font>

644
00:24:00,379 --> 00:24:04,939
run concurrently and being worked upon

645
00:24:02,809 --> 00:24:06,740
by dozens of hundreds of programmers

646
00:24:04,940 --> 00:24:09,230
right so if you have<font color="#E5E5E5"> data that's</font>

647
00:24:06,740 --> 00:24:10,700
<font color="#E5E5E5">immutable by default you have</font><font color="#CCCCCC"> to think</font>

648
00:24:09,230 --> 00:24:12,259
about when you want<font color="#CCCCCC"> to modify</font><font color="#E5E5E5"> that data</font>

649
00:24:10,700 --> 00:24:14,259
right that just<font color="#CCCCCC"> suddenly makes the whole</font>

650
00:24:12,259 --> 00:24:17,179
<font color="#CCCCCC">LAN</font><font color="#E5E5E5"> thing a little safer</font>

651
00:24:14,259 --> 00:24:19,129
there is no<font color="#E5E5E5"> numerical type</font><font color="#CCCCCC"> width</font>

652
00:24:17,179 --> 00:24:21,200
ambiguity<font color="#E5E5E5"> I have been personally bitten</font>

653
00:24:19,129 --> 00:24:24,678
in C and C++<font color="#E5E5E5"> where I assume</font><font color="#CCCCCC"> that the</font>

654
00:24:21,200 --> 00:24:26,269
<font color="#E5E5E5">integer size R was the word size on my</font>

655
00:24:24,679 --> 00:24:27,080
architecture<font color="#E5E5E5"> which is great but the</font>

656
00:24:26,269 --> 00:24:28,840
<font color="#E5E5E5">architecture</font>

657
00:24:27,080 --> 00:24:30,949
32 bits for<font color="#E5E5E5"> word size on one</font>

658
00:24:28,840 --> 00:24:33,830
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> in 64 bits on the other</font>

659
00:24:30,950 --> 00:24:36,200
simple<font color="#CCCCCC"> rate just encode the type weights</font>

660
00:24:33,830 --> 00:24:37,999
in the names<font color="#E5E5E5"> of the types right this is</font>

661
00:24:36,200 --> 00:24:39,799
what we end<font color="#E5E5E5"> up doing with stood in 10</font>

662
00:24:37,999 --> 00:24:41,330
what have you in<font color="#CCCCCC"> C</font><font color="#E5E5E5"> in C++ it's just a</font>

663
00:24:39,799 --> 00:24:44,779
part of<font color="#E5E5E5"> the language specification</font><font color="#CCCCCC"> I</font>

664
00:24:41,330 --> 00:24:46,428
think that makes it<font color="#E5E5E5"> very clear you</font><font color="#CCCCCC"> don't</font>

665
00:24:44,779 --> 00:24:48,710
have<font color="#E5E5E5"> classes but you have composite</font>

666
00:24:46,429 --> 00:24:50,749
types like structure enumerators<font color="#E5E5E5"> if you</font>

667
00:24:48,710 --> 00:24:54,080
want behavior for composite types like

668
00:24:50,749 --> 00:24:56,929
you have in classes in in<font color="#E5E5E5"> in C++ you</font>

669
00:24:54,080 --> 00:24:59,529
have the<font color="#E5E5E5"> ability</font><font color="#CCCCCC"> to implement that using</font>

670
00:24:56,929 --> 00:25:03,019
a<font color="#E5E5E5"> concept of traits which are interfaces</font>

671
00:24:59,529 --> 00:25:05,419
so you kind of get<font color="#E5E5E5"> like the kind of the</font>

672
00:25:03,019 --> 00:25:07,340
<font color="#E5E5E5">design pattern of</font><font color="#CCCCCC"> C++ for doing for</font>

673
00:25:05,419 --> 00:25:10,700
composable<font color="#E5E5E5"> software design but without</font>

674
00:25:07,340 --> 00:25:13,939
<font color="#CCCCCC">all of the arguably very</font><font color="#E5E5E5"> tedious stuff</font>

675
00:25:10,700 --> 00:25:15,200
that<font color="#E5E5E5"> C++ has right you have</font><font color="#CCCCCC"> genetics a</font>

676
00:25:13,940 --> 00:25:16,669
systems<font color="#E5E5E5"> programming language</font><font color="#CCCCCC"> with</font>

677
00:25:15,200 --> 00:25:19,249
generics is quite unheard<font color="#E5E5E5"> off in my</font>

678
00:25:16,669 --> 00:25:22,220
opinion I'm happy to<font color="#E5E5E5"> be proven wrong</font>

679
00:25:19,249 --> 00:25:25,669
<font color="#E5E5E5">this makes the duplication of code</font><font color="#CCCCCC"> a</font>

680
00:25:22,220 --> 00:25:27,590
real possibility<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so yeah you have</font>

681
00:25:25,669 --> 00:25:29,119
<font color="#E5E5E5">Atomics so I can write a synchronization</font>

682
00:25:27,590 --> 00:25:30,889
<font color="#E5E5E5">primitive and I can see that it is</font>

683
00:25:29,119 --> 00:25:33,399
contingent upon one particular variable

684
00:25:30,889 --> 00:25:36,469
<font color="#E5E5E5">that is of an atomic type and if I say</font>

685
00:25:33,399 --> 00:25:38,029
<font color="#E5E5E5">the specific kind of memory consistency</font>

686
00:25:36,470 --> 00:25:39,169
I want to associate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> atomic I</font>

687
00:25:38,029 --> 00:25:40,909
can do that<font color="#E5E5E5"> in the language</font><font color="#CCCCCC"> itself</font>

688
00:25:39,169 --> 00:25:43,100
<font color="#E5E5E5">rather than relying on inline assembly</font>

689
00:25:40,909 --> 00:25:45,769
and arcane<font color="#CCCCCC"> instruction selection for a</font>

690
00:25:43,100 --> 00:25:46,908
particular processor<font color="#E5E5E5"> and you have</font>

691
00:25:45,769 --> 00:25:49,190
everything<font color="#E5E5E5"> you need to build</font>

692
00:25:46,909 --> 00:25:51,739
synchronization primitives<font color="#E5E5E5"> of complex</font>

693
00:25:49,190 --> 00:25:53,330
types on top so this is the bit that<font color="#CCCCCC"> is</font>

694
00:25:51,739 --> 00:25:55,460
really hard to<font color="#CCCCCC"> explain without</font>

695
00:25:53,330 --> 00:25:57,619
<font color="#CCCCCC">whiteboarding and with lots of</font><font color="#E5E5E5"> little</font>

696
00:25:55,460 --> 00:25:59,659
time<font color="#E5E5E5"> but all of this is possible the</font>

697
00:25:57,619 --> 00:26:01,488
<font color="#E5E5E5">compile type checking of memory safety</font>

698
00:25:59,659 --> 00:26:04,999
<font color="#E5E5E5">is possible because of a set of rules</font>

699
00:26:01,489 --> 00:26:06,950
<font color="#E5E5E5">which are called ownership rules and and</font>

700
00:26:04,999 --> 00:26:08,690
the rust compiler enforces those rules

701
00:26:06,950 --> 00:26:10,999
for you what it<font color="#CCCCCC"> means is that if you</font>

702
00:26:08,690 --> 00:26:13,489
have some<font color="#E5E5E5"> data and you hand the data</font>

703
00:26:10,999 --> 00:26:15,139
over<font color="#E5E5E5"> to another scope you can't access</font>

704
00:26:13,489 --> 00:26:16,940
that<font color="#E5E5E5"> data anymore because the ownership</font>

705
00:26:15,139 --> 00:26:19,219
<font color="#E5E5E5">has changed to the scope</font><font color="#CCCCCC"> that you called</font>

706
00:26:16,940 --> 00:26:22,190
<font color="#E5E5E5">if you still want to pass data around</font>

707
00:26:19,220 --> 00:26:24,200
<font color="#E5E5E5">you have to</font><font color="#CCCCCC"> be very clear about how many</font>

708
00:26:22,190 --> 00:26:26,600
<font color="#E5E5E5">people are there who can likely mutate</font>

709
00:26:24,200 --> 00:26:29,269
this data<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can have references to</font>

710
00:26:26,600 --> 00:26:30,830
<font color="#E5E5E5">shared data but everyone must use an</font>

711
00:26:29,269 --> 00:26:32,869
immutable reference<font color="#E5E5E5"> if there are</font>

712
00:26:30,830 --> 00:26:35,330
multiple<font color="#E5E5E5"> people reading that data if</font>

713
00:26:32,869 --> 00:26:37,759
there<font color="#E5E5E5"> is even</font><font color="#CCCCCC"> one person who wants to</font>

714
00:26:35,330 --> 00:26:39,779
mutate it you can't have immutable

715
00:26:37,759 --> 00:26:43,769
references and immutable with you

716
00:26:39,779 --> 00:26:46,249
references together<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is probably the</font>

717
00:26:43,769 --> 00:26:49,950
biggest hurdle<font color="#E5E5E5"> in my opinion to actually</font>

718
00:26:46,249 --> 00:26:52,289
cross when you are taking rust on right

719
00:26:49,950 --> 00:26:54,779
<font color="#E5E5E5">but it's not</font><font color="#CCCCCC"> hard excellent support for</font>

720
00:26:52,289 --> 00:26:57,119
threads<font color="#E5E5E5"> it's all built in</font>

721
00:26:54,779 --> 00:27:00,840
I love the functional patterns like

722
00:26:57,119 --> 00:27:02,519
iterators closures<font color="#E5E5E5"> generators those kind</font>

723
00:27:00,840 --> 00:27:04,649
of things<font color="#E5E5E5"> in a systems language right</font><font color="#CCCCCC"> I</font>

724
00:27:02,519 --> 00:27:06,690
mean this is not<font color="#E5E5E5"> Python there's not you</font>

725
00:27:04,649 --> 00:27:08,369
<font color="#E5E5E5">know so it has a very rich standard</font>

726
00:27:06,690 --> 00:27:09,960
library<font color="#CCCCCC"> you don't have to rely</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font>

727
00:27:08,369 --> 00:27:11,728
standard type template libraries or

728
00:27:09,960 --> 00:27:12,779
custom vendor libraries all of this

729
00:27:11,729 --> 00:27:14,729
stuff is maintained by the<font color="#E5E5E5"> community</font>

730
00:27:12,779 --> 00:27:17,789
it's rigorously tested and performance

731
00:27:14,729 --> 00:27:19,379
analyzed you have<font color="#E5E5E5"> iterator generators</font>

732
00:27:17,789 --> 00:27:20,849
closures<font color="#CCCCCC"> you often do feel</font><font color="#E5E5E5"> like you're</font>

733
00:27:19,379 --> 00:27:22,559
<font color="#E5E5E5">doing Ruby programming with this because</font>

734
00:27:20,849 --> 00:27:26,309
it's influenced by a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> other</font>

735
00:27:22,559 --> 00:27:28,739
languages<font color="#CCCCCC"> first-class</font><font color="#E5E5E5"> support for</font>

736
00:27:26,309 --> 00:27:30,690
writing<font color="#E5E5E5"> tests you have decorators for</font>

737
00:27:28,739 --> 00:27:32,940
methods they become tests automatically

738
00:27:30,690 --> 00:27:35,039
the tools do it for you if<font color="#E5E5E5"> you want to</font>

739
00:27:32,940 --> 00:27:36,809
do documentation generation<font color="#E5E5E5"> you have</font>

740
00:27:35,039 --> 00:27:38,580
<font color="#CCCCCC">classy</font><font color="#E5E5E5"> support you</font><font color="#CCCCCC"> just type this</font><font color="#E5E5E5"> one</font>

741
00:27:36,809 --> 00:27:41,129
command<font color="#E5E5E5"> and it opens up a browser with a</font>

742
00:27:38,580 --> 00:27:44,639
rendered HTML page with sequences of

743
00:27:41,129 --> 00:27:45,689
text taken from your code it's got a

744
00:27:44,639 --> 00:27:48,089
really<font color="#E5E5E5"> good foreign function interface</font>

745
00:27:45,690 --> 00:27:49,349
so you want to interrupt with<font color="#E5E5E5"> see you</font>

746
00:27:48,089 --> 00:27:53,249
won't see to interrupt with the rust

747
00:27:49,349 --> 00:27:55,019
<font color="#CCCCCC">very good</font><font color="#E5E5E5"> support for that rust app is</font>

748
00:27:53,249 --> 00:27:56,639
like<font color="#E5E5E5"> this one tool I think like</font><font color="#CCCCCC"> with CC</font>

749
00:27:55,019 --> 00:27:59,099
<font color="#E5E5E5">plus</font><font color="#CCCCCC"> taul</font><font color="#E5E5E5"> any language right you'll have</font>

750
00:27:56,639 --> 00:28:01,678
<font color="#E5E5E5">a route to get similar functionality</font>

751
00:27:59,099 --> 00:28:05,580
where you want like the<font color="#E5E5E5"> ruby gems or</font>

752
00:28:01,679 --> 00:28:09,089
pipe<font color="#E5E5E5"> I like a simulation of</font><font color="#CCCCCC"> creeks</font><font color="#E5E5E5"> from</font>

753
00:28:05,580 --> 00:28:10,559
other people etcetera etcetera<font color="#CCCCCC"> Russ just</font>

754
00:28:09,089 --> 00:28:12,269
<font color="#E5E5E5">makes this part of the language right</font>

755
00:28:10,559 --> 00:28:14,999
<font color="#CCCCCC">you have a tool which you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> use to</font>

756
00:28:12,269 --> 00:28:19,700
compose lots of stuff<font color="#E5E5E5"> etc</font><font color="#CCCCCC"> etc how much</font>

757
00:28:14,999 --> 00:28:19,700
time<font color="#CCCCCC"> I got</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> I'm I need to rush</font>

758
00:28:20,359 --> 00:28:27,539
<font color="#E5E5E5">1700 lots of time chill out</font>

759
00:28:23,129 --> 00:28:29,789
so yeah installing Russ is painless you

760
00:28:27,539 --> 00:28:32,070
<font color="#E5E5E5">have this Russ top tool you download</font><font color="#CCCCCC"> it</font>

761
00:28:29,789 --> 00:28:33,869
using curl run it it will create a new

762
00:28:32,070 --> 00:28:37,710
sister owed for you and install rust

763
00:28:33,869 --> 00:28:39,779
<font color="#E5E5E5">everything is ready there's really good</font>

764
00:28:37,710 --> 00:28:41,999
<font color="#CCCCCC">support for</font><font color="#E5E5E5"> switching your</font><font color="#CCCCCC"> cross</font>

765
00:28:39,779 --> 00:28:45,029
<font color="#E5E5E5">compilation target that was really handy</font>

766
00:28:41,999 --> 00:28:47,580
for me if you<font color="#CCCCCC"> are it's bound to</font><font color="#E5E5E5"> LLVM and</font>

767
00:28:45,029 --> 00:28:50,099
si lang<font color="#E5E5E5"> I should have mention that</font><font color="#CCCCCC"> if</font>

768
00:28:47,580 --> 00:28:53,360
<font color="#E5E5E5">you're if</font><font color="#CCCCCC"> LLVM supports a target backend</font>

769
00:28:50,099 --> 00:28:55,279
<font color="#CCCCCC">the insurances are</font><font color="#E5E5E5"> that you can just you</font>

770
00:28:53,360 --> 00:28:56,779
cross compilers<font color="#CCCCCC"> for that using just a</font>

771
00:28:55,279 --> 00:28:58,159
<font color="#E5E5E5">stop you</font><font color="#CCCCCC"> just say rest up install this</font>

772
00:28:56,779 --> 00:28:59,149
target and<font color="#CCCCCC"> then when you compile the</font>

773
00:28:58,159 --> 00:29:01,100
code<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> compiling it'll generate</font>

774
00:28:59,149 --> 00:29:04,428
code for<font color="#CCCCCC"> that particular target</font><font color="#E5E5E5"> which is</font>

775
00:29:01,100 --> 00:29:06,199
really<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> if you want to</font>

776
00:29:04,429 --> 00:29:08,710
override what<font color="#CCCCCC"> LLVM is default</font>

777
00:29:06,200 --> 00:29:11,509
assumptions are for a<font color="#E5E5E5"> particular set</font><font color="#CCCCCC"> of</font>

778
00:29:08,710 --> 00:29:13,429
compiler<font color="#E5E5E5"> flags you can create a JSON</font>

779
00:29:11,509 --> 00:29:16,999
file and provide overrides<font color="#E5E5E5"> and rust up</font>

780
00:29:13,429 --> 00:29:18,230
<font color="#E5E5E5">we'll</font><font color="#CCCCCC"> just look at that instead there's</font>

781
00:29:16,999 --> 00:29:19,789
this thing called cargo which is the

782
00:29:18,230 --> 00:29:22,009
package<font color="#CCCCCC"> manager and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is what I meant</font>

783
00:29:19,789 --> 00:29:25,549
like things like<font color="#CCCCCC"> ruby</font><font color="#E5E5E5"> gems etc it's very</font>

784
00:29:22,009 --> 00:29:27,889
easy<font color="#E5E5E5"> to use semantically versioned lists</font>

785
00:29:25,549 --> 00:29:31,190
of what are known as crates<font color="#E5E5E5"> which are</font>

786
00:29:27,889 --> 00:29:33,379
like you know libraries<font color="#CCCCCC"> modules that</font>

787
00:29:31,190 --> 00:29:35,019
kind of stuff and<font color="#E5E5E5"> you can be</font><font color="#CCCCCC"> guaranteed</font>

788
00:29:33,379 --> 00:29:37,039
that<font color="#E5E5E5"> if you pass somebody a</font>

789
00:29:35,019 --> 00:29:38,210
<font color="#E5E5E5">specification file for cargo for a</font>

790
00:29:37,039 --> 00:29:39,769
particular bit of<font color="#E5E5E5"> software you've</font>

791
00:29:38,210 --> 00:29:42,350
written they will be able<font color="#E5E5E5"> to recreate</font>

792
00:29:39,769 --> 00:29:43,940
that<font color="#E5E5E5"> right down to the exact versions of</font>

793
00:29:42,350 --> 00:29:48,248
all the crates involved<font color="#E5E5E5"> without you</font>

794
00:29:43,940 --> 00:29:48,249
having<font color="#E5E5E5"> to intervene at all</font><font color="#CCCCCC"> Goldin</font>

795
00:29:49,269 --> 00:29:54,799
<font color="#CCCCCC">there's a central package repository</font>

796
00:29:51,470 --> 00:29:55,850
called crates dot<font color="#CCCCCC"> IO and</font><font color="#E5E5E5"> there's a lot</font>

797
00:29:54,799 --> 00:29:57,889
of<font color="#E5E5E5"> work</font><font color="#CCCCCC"> put in to try and</font><font color="#E5E5E5"> reduce</font>

798
00:29:55,850 --> 00:29:59,719
compilation times<font color="#E5E5E5"> there's lots more work</font>

799
00:29:57,889 --> 00:30:02,299
<font color="#E5E5E5">remaining over there this is the</font>

800
00:29:59,720 --> 00:30:03,679
sequence<font color="#E5E5E5"> I chose to learn rust I'm just</font>

801
00:30:02,299 --> 00:30:05,960
mentioning it<font color="#E5E5E5"> here in case it</font><font color="#CCCCCC"> helps</font>

802
00:30:03,679 --> 00:30:07,279
others there is<font color="#CCCCCC"> a really nice book the</font>

803
00:30:05,960 --> 00:30:08,869
community has written<font color="#E5E5E5"> called the rust</font>

804
00:30:07,279 --> 00:30:11,809
book it's available<font color="#E5E5E5"> in print form it's</font>

805
00:30:08,869 --> 00:30:13,879
also<font color="#CCCCCC"> available on the internet I read</font>

806
00:30:11,809 --> 00:30:15,200
that first<font color="#CCCCCC"> then I read it</font><font color="#E5E5E5"> again because</font>

807
00:30:13,879 --> 00:30:17,259
<font color="#E5E5E5">the first time I kept interrupting</font>

808
00:30:15,200 --> 00:30:20,749
myself<font color="#E5E5E5"> so the second time I had a cool</font>

809
00:30:17,259 --> 00:30:22,100
reading<font color="#E5E5E5"> rust by example is</font><font color="#CCCCCC"> really good</font>

810
00:30:20,749 --> 00:30:23,899
if you just<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> straight</font><font color="#CCCCCC"> to have</font>

811
00:30:22,100 --> 00:30:25,908
a specific problem<font color="#CCCCCC"> tell me how</font><font color="#E5E5E5"> to solve</font>

812
00:30:23,899 --> 00:30:28,309
it the rust nomicon provides a lot of

813
00:30:25,909 --> 00:30:31,309
<font color="#E5E5E5">detail some of</font><font color="#CCCCCC"> the internals of how</font>

814
00:30:28,309 --> 00:30:33,860
unsafe<font color="#E5E5E5"> works in reality</font><font color="#CCCCCC"> and then there's</font>

815
00:30:31,309 --> 00:30:36,139
the rust reference<font color="#E5E5E5"> interestingly there</font>

816
00:30:33,860 --> 00:30:37,668
isn't any rust language specification

817
00:30:36,139 --> 00:30:39,199
yet<font color="#E5E5E5"> but there's a working group being</font>

818
00:30:37,669 --> 00:30:42,080
<font color="#E5E5E5">created to attack that</font><font color="#CCCCCC"> problem and</font><font color="#E5E5E5"> I'll</font>

819
00:30:39,200 --> 00:30:43,369
revisit that if I have time so what was

820
00:30:42,080 --> 00:30:46,879
generally<font color="#CCCCCC"> useful for implementing a</font>

821
00:30:43,369 --> 00:30:49,220
microkernel<font color="#CCCCCC"> I think I can say yes I</font>

822
00:30:46,879 --> 00:30:51,320
particularly<font color="#E5E5E5"> like the benefit of unsafe</font>

823
00:30:49,220 --> 00:30:54,559
right it helped me localize the tricky

824
00:30:51,320 --> 00:30:57,590
bits of code<font color="#CCCCCC"> the expressiveness trying</font>

825
00:30:54,559 --> 00:30:59,950
to explain<font color="#E5E5E5"> a complex bit of system</font>

826
00:30:57,590 --> 00:31:02,629
software<font color="#CCCCCC"> was in my opinion</font><font color="#E5E5E5"> easier</font>

827
00:30:59,950 --> 00:31:04,159
<font color="#CCCCCC">interrupted ASM code was a breeze GCC</font>

828
00:31:02,629 --> 00:31:05,750
used to have<font color="#E5E5E5"> this naked attribute to</font>

829
00:31:04,159 --> 00:31:07,490
remove that the

830
00:31:05,750 --> 00:31:09,230
it allows you to<font color="#E5E5E5"> write functions</font><font color="#CCCCCC"> without</font>

831
00:31:07,490 --> 00:31:11,360
epilogues<font color="#CCCCCC"> and that's often very useful</font>

832
00:31:09,230 --> 00:31:12,950
<font color="#E5E5E5">and I appreciated the fact that I can</font>

833
00:31:11,360 --> 00:31:15,979
just<font color="#CCCCCC"> use the naked decorator and</font><font color="#E5E5E5"> it just</font>

834
00:31:12,950 --> 00:31:17,380
worked synchronization code was easy to

835
00:31:15,980 --> 00:31:19,850
do because<font color="#CCCCCC"> of the memory model</font>

836
00:31:17,380 --> 00:31:21,680
<font color="#CCCCCC">inconsistency specification</font><font color="#E5E5E5"> and the</font>

837
00:31:19,850 --> 00:31:23,510
module subsystem was<font color="#E5E5E5"> great basically the</font>

838
00:31:21,680 --> 00:31:26,300
kernel in redox is a library module

839
00:31:23,510 --> 00:31:27,770
called kernel<font color="#E5E5E5"> and you can write an</font>

840
00:31:26,300 --> 00:31:29,930
<font color="#CCCCCC">application that links against it and</font>

841
00:31:27,770 --> 00:31:32,240
all<font color="#CCCCCC"> of that is hidden</font><font color="#E5E5E5"> by the tooling</font><font color="#CCCCCC"> for</font>

842
00:31:29,930 --> 00:31:34,940
you<font color="#E5E5E5"> so what's next for rust</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> arm</font>

843
00:31:32,240 --> 00:31:40,280
<font color="#E5E5E5">before I finally get to redux thank you</font>

844
00:31:34,940 --> 00:31:41,780
<font color="#E5E5E5">I'm the rep for</font><font color="#CCCCCC"> arm in the cortex</font><font color="#E5E5E5"> a</font>

845
00:31:40,280 --> 00:31:44,780
embedded working group and we<font color="#E5E5E5"> are trying</font>

846
00:31:41,780 --> 00:31:47,030
<font color="#CCCCCC">to do some bare metal crates over here</font>

847
00:31:44,780 --> 00:31:49,040
that allow people to do bare metal rust

848
00:31:47,030 --> 00:31:50,570
programming for cortex<font color="#CCCCCC"> eight designs so</font>

849
00:31:49,040 --> 00:31:52,909
if you want to<font color="#E5E5E5"> write a boot loader or a</font>

850
00:31:50,570 --> 00:31:54,290
<font color="#CCCCCC">secure monitor or something like that</font>

851
00:31:52,910 --> 00:31:56,240
you can<font color="#E5E5E5"> just use this great and it has</font>

852
00:31:54,290 --> 00:31:57,800
abstractions for<font color="#E5E5E5"> all of the instruction</font>

853
00:31:56,240 --> 00:32:00,680
set<font color="#CCCCCC"> architecture and the system control</font>

854
00:31:57,800 --> 00:32:02,419
bits there's a very nice very<font color="#E5E5E5"> active</font>

855
00:32:00,680 --> 00:32:03,620
cortex-m embedded working group which

856
00:32:02,420 --> 00:32:06,530
has<font color="#E5E5E5"> been there for a while and</font><font color="#CCCCCC"> they've</font>

857
00:32:03,620 --> 00:32:08,060
<font color="#E5E5E5">done something similar for cortex-m the</font>

858
00:32:06,530 --> 00:32:09,740
<font color="#E5E5E5">rust language specific specification</font>

859
00:32:08,060 --> 00:32:11,330
working group I want to try and explore

860
00:32:09,740 --> 00:32:14,840
ways<font color="#E5E5E5"> in which we can help the rust</font>

861
00:32:11,330 --> 00:32:16,939
community come up with<font color="#E5E5E5"> I won't say</font><font color="#CCCCCC"> ISO</font>

862
00:32:14,840 --> 00:32:18,439
<font color="#E5E5E5">like but a</font><font color="#CCCCCC"> morph and I won't even say</font>

863
00:32:16,940 --> 00:32:20,000
formal specification<font color="#CCCCCC"> because that</font><font color="#E5E5E5"> means</font>

864
00:32:18,440 --> 00:32:22,340
something different<font color="#E5E5E5"> but what I want is I</font>

865
00:32:20,000 --> 00:32:23,840
want<font color="#CCCCCC"> to go to a compiler guy and there</font>

866
00:32:22,340 --> 00:32:25,129
are compiler guys<font color="#CCCCCC"> in our my</font><font color="#E5E5E5"> go-to and</font>

867
00:32:23,840 --> 00:32:26,750
when I tell them<font color="#E5E5E5"> about rust they say</font>

868
00:32:25,130 --> 00:32:28,040
show<font color="#E5E5E5"> me the</font><font color="#CCCCCC"> language specification</font><font color="#E5E5E5"> and</font>

869
00:32:26,750 --> 00:32:30,080
there isn't a language<font color="#E5E5E5"> specification</font>

870
00:32:28,040 --> 00:32:33,080
<font color="#E5E5E5">there's a psychological ripple effect</font>

871
00:32:30,080 --> 00:32:34,250
<font color="#E5E5E5">that kind of situation has and then</font>

872
00:32:33,080 --> 00:32:35,840
there's<font color="#CCCCCC"> the Rust Belt project that I</font>

873
00:32:34,250 --> 00:32:37,340
want to involve<font color="#E5E5E5"> myself with if I can</font>

874
00:32:35,840 --> 00:32:39,350
that's<font color="#E5E5E5"> a formal verification of an</font>

875
00:32:37,340 --> 00:32:41,389
intermediary language representation

876
00:32:39,350 --> 00:32:42,620
<font color="#CCCCCC">that rust has called mere and if they</font>

877
00:32:41,390 --> 00:32:44,690
succeed<font color="#CCCCCC"> in what they're doing you</font><font color="#E5E5E5"> will</font>

878
00:32:42,620 --> 00:32:49,610
have enhanced confidence in the

879
00:32:44,690 --> 00:32:51,890
correctness of rust<font color="#E5E5E5"> finally</font><font color="#CCCCCC"> okay redox I</font>

880
00:32:49,610 --> 00:32:54,229
hope you appreciate<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I needed</font><font color="#CCCCCC"> to</font>

881
00:32:51,890 --> 00:32:56,300
<font color="#CCCCCC">seed your</font><font color="#E5E5E5"> mind with that literature</font>

882
00:32:54,230 --> 00:33:00,290
<font color="#E5E5E5">before</font><font color="#CCCCCC"> I can come to this right so this</font>

883
00:32:56,300 --> 00:33:02,060
is redox<font color="#E5E5E5"> it's not just a command-line</font>

884
00:33:00,290 --> 00:33:04,610
thing<font color="#E5E5E5"> there's a complete suite of</font>

885
00:33:02,060 --> 00:33:07,490
<font color="#E5E5E5">applications including shells including</font>

886
00:33:04,610 --> 00:33:10,699
a<font color="#CCCCCC"> POSIX compliant C library</font><font color="#E5E5E5"> a windowing</font>

887
00:33:07,490 --> 00:33:12,860
toolkit<font color="#CCCCCC"> frame buffer drivers yadda yadda</font>

888
00:33:10,700 --> 00:33:14,600
<font color="#CCCCCC">yadda this is what it</font><font color="#E5E5E5"> is it's got a</font>

889
00:33:12,860 --> 00:33:16,010
<font color="#E5E5E5">simple browser that often</font><font color="#CCCCCC"> doesn't work</font>

890
00:33:14,600 --> 00:33:18,080
but<font color="#E5E5E5"> their work in</font><font color="#CCCCCC"> there trying</font><font color="#E5E5E5"> to fix</font>

891
00:33:16,010 --> 00:33:19,330
that<font color="#E5E5E5"> editor is all of that</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> right</font>

892
00:33:18,080 --> 00:33:20,770
<font color="#CCCCCC">so it's got a shell call</font>

893
00:33:19,330 --> 00:33:23,949
that was written<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the community for</font>

894
00:33:20,770 --> 00:33:26,710
<font color="#CCCCCC">Linux but it runs</font><font color="#E5E5E5"> under</font><font color="#CCCCCC"> the docs MIT</font>

895
00:33:23,950 --> 00:33:29,530
license<font color="#E5E5E5"> rust microkernel reduced set of</font>

896
00:33:26,710 --> 00:33:33,460
UNIX system calls implements as much as

897
00:33:29,530 --> 00:33:35,590
it can<font color="#E5E5E5"> in rust</font><font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> really nice C</font>

898
00:33:33,460 --> 00:33:37,480
library written in rust<font color="#E5E5E5"> yet another one</font>

899
00:33:35,590 --> 00:33:39,129
it's called<font color="#E5E5E5"> a real Ipsy sorry</font>

900
00:33:37,480 --> 00:33:41,190
yet another C library<font color="#E5E5E5"> the first one I</font>

901
00:33:39,130 --> 00:33:44,740
believe written in rust called real<font color="#CCCCCC"> MC</font>

902
00:33:41,190 --> 00:33:46,230
and about that<font color="#E5E5E5"> I'll come to that later</font>

903
00:33:44,740 --> 00:33:50,560
<font color="#CCCCCC">why did they</font><font color="#E5E5E5"> call it rust because</font>

904
00:33:46,230 --> 00:33:53,670
oxidation rust and<font color="#E5E5E5"> oxidation involves</font>

905
00:33:50,560 --> 00:33:56,080
<font color="#E5E5E5">this chemical</font><font color="#CCCCCC"> reaction called</font><font color="#E5E5E5"> redox</font>

906
00:33:53,670 --> 00:33:58,360
<font color="#E5E5E5">that's why they call it redox and redox</font>

907
00:33:56,080 --> 00:34:02,710
kind of sounds like<font color="#CCCCCC"> UNIX</font><font color="#E5E5E5"> okay so that's</font>

908
00:33:58,360 --> 00:34:05,320
the theory<font color="#E5E5E5"> if you try really hard so the</font>

909
00:34:02,710 --> 00:34:06,970
aims were to<font color="#E5E5E5"> leverage rust use idiomatic</font>

910
00:34:05,320 --> 00:34:09,009
rust to make<font color="#E5E5E5"> complex system concepts</font>

911
00:34:06,970 --> 00:34:10,690
<font color="#E5E5E5">easier for laypeople a programmers</font>

912
00:34:09,010 --> 00:34:12,970
improve the scope of people coming<font color="#CCCCCC"> into</font>

913
00:34:10,690 --> 00:34:16,150
<font color="#E5E5E5">the project liberate the</font><font color="#CCCCCC"> existence of</font>

914
00:34:12,969 --> 00:34:17,949
basically<font color="#E5E5E5"> the idea here is</font><font color="#CCCCCC"> just rebuild</font>

915
00:34:16,150 --> 00:34:22,240
your code against this other<font color="#E5E5E5"> C library</font>

916
00:34:17,949 --> 00:34:24,250
and it should run here<font color="#CCCCCC"> okay and then</font>

917
00:34:22,239 --> 00:34:25,810
cover a wide range<font color="#CCCCCC"> of target domains the</font>

918
00:34:24,250 --> 00:34:28,360
the guy who wrote it<font color="#E5E5E5"> I'll</font><font color="#CCCCCC"> just come to</font>

919
00:34:25,810 --> 00:34:29,980
that<font color="#E5E5E5"> his focus was desktop because I</font>

920
00:34:28,360 --> 00:34:31,180
<font color="#E5E5E5">started supporting this with a few</font>

921
00:34:29,980 --> 00:34:32,949
patches<font color="#E5E5E5"> they want to go down the</font>

922
00:34:31,179 --> 00:34:34,690
embedded way and then the<font color="#E5E5E5"> long-term</font><font color="#CCCCCC"> goal</font>

923
00:34:32,949 --> 00:34:36,759
<font color="#CCCCCC">is target servers will they get</font><font color="#E5E5E5"> there</font>

924
00:34:34,690 --> 00:34:39,150
time will tell<font color="#CCCCCC"> so it's written</font><font color="#E5E5E5"> by a guy</font>

925
00:34:36,760 --> 00:34:41,500
<font color="#CCCCCC">called Jeremy Saleh he's become a friend</font>

926
00:34:39,150 --> 00:34:44,530
he wanted<font color="#E5E5E5"> to learn how computers work</font>

927
00:34:41,500 --> 00:34:46,719
but he wrote a lot<font color="#E5E5E5"> of assembly code and</font>

928
00:34:44,530 --> 00:34:49,270
then basically started getting fed<font color="#CCCCCC"> up of</font>

929
00:34:46,719 --> 00:34:51,129
the problems they're discovered rust and

930
00:34:49,270 --> 00:34:53,259
kept writing incremental rust code and

931
00:34:51,130 --> 00:34:54,700
in the end shared it with a friend who

932
00:34:53,260 --> 00:34:56,110
put it on reddit<font color="#E5E5E5"> and after that there</font>

933
00:34:54,699 --> 00:34:58,270
<font color="#E5E5E5">was</font><font color="#CCCCCC"> no looking</font><font color="#E5E5E5"> back because that's what</font>

934
00:34:56,110 --> 00:34:59,980
happens with reddit right<font color="#E5E5E5"> and there's</font>

935
00:34:58,270 --> 00:35:02,830
been studied development ever since so

936
00:34:59,980 --> 00:35:04,600
there's a<font color="#CCCCCC"> efi OS loader</font><font color="#E5E5E5"> x86 64 at</font>

937
00:35:02,830 --> 00:35:06,190
present<font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> c library I</font><font color="#E5E5E5"> mentioned</font>

938
00:35:04,600 --> 00:35:07,690
the library has<font color="#E5E5E5"> B thread support they've</font>

939
00:35:06,190 --> 00:35:09,850
written a<font color="#E5E5E5"> simple file system called</font>

940
00:35:07,690 --> 00:35:12,730
redox<font color="#E5E5E5"> ifs there's a small but growing</font>

941
00:35:09,850 --> 00:35:14,650
driver library<font color="#E5E5E5"> and there's a group</font>

942
00:35:12,730 --> 00:35:16,300
there's a pretty significantly<font color="#E5E5E5"> growing</font>

943
00:35:14,650 --> 00:35:18,520
list of applications actually<font color="#E5E5E5"> somebody</font>

944
00:35:16,300 --> 00:35:20,380
or the other somebody<font color="#E5E5E5"> did</font><font color="#CCCCCC"> a scummvm port</font>

945
00:35:18,520 --> 00:35:24,250
the other day and you<font color="#CCCCCC"> know played old</font>

946
00:35:20,380 --> 00:35:25,870
games<font color="#E5E5E5"> it</font><font color="#CCCCCC"> was awesome so Google supported</font>

947
00:35:24,250 --> 00:35:28,990
them<font color="#CCCCCC"> in 2017</font><font color="#E5E5E5"> and made</font><font color="#CCCCCC"> redock self</font>

948
00:35:25,870 --> 00:35:30,250
<font color="#CCCCCC">hosting in 2018 they didn't but people</font>

949
00:35:28,990 --> 00:35:32,950
had started getting interested on

950
00:35:30,250 --> 00:35:34,510
patreon<font color="#E5E5E5"> and they gave Jeremy enough</font>

951
00:35:32,950 --> 00:35:37,060
for him<font color="#E5E5E5"> to create a</font><font color="#CCCCCC"> redock Summer of</font>

952
00:35:34,510 --> 00:35:37,960
<font color="#CCCCCC">Code</font><font color="#E5E5E5"> instead so he said why not so a lot</font>

953
00:35:37,060 --> 00:35:40,000
of<font color="#E5E5E5"> things happen over there that's</font>

954
00:35:37,960 --> 00:35:41,710
<font color="#E5E5E5">roughly when I got involved and I was</font>

955
00:35:40,000 --> 00:35:44,410
like<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> give</font><font color="#E5E5E5"> me a student and I'll try</font>

956
00:35:41,710 --> 00:35:46,450
<font color="#CCCCCC">and</font><font color="#E5E5E5"> help them</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> are just screenshots</font>

957
00:35:44,410 --> 00:35:49,560
of<font color="#CCCCCC"> some of the packages that</font><font color="#E5E5E5"> are</font>

958
00:35:46,450 --> 00:35:51,640
<font color="#CCCCCC">available some</font><font color="#E5E5E5"> of the drivers that exist</font>

959
00:35:49,560 --> 00:35:52,359
every week there's something<font color="#E5E5E5"> new this</font><font color="#CCCCCC"> is</font>

960
00:35:51,640 --> 00:35:54,490
<font color="#E5E5E5">the stack</font>

961
00:35:52,359 --> 00:35:57,790
it's a<font color="#E5E5E5"> typical design where you have</font><font color="#CCCCCC"> the</font>

962
00:35:54,490 --> 00:35:59,589
<font color="#CCCCCC">kernel doing very little and most of the</font>

963
00:35:57,790 --> 00:36:02,170
stuff in terms of resource<font color="#CCCCCC"> management</font>

964
00:35:59,589 --> 00:36:03,490
<font color="#E5E5E5">being done in user space</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean</font><font color="#CCCCCC"> I won't</font>

965
00:36:02,170 --> 00:36:05,109
go into details over here I suppose the

966
00:36:03,490 --> 00:36:07,779
<font color="#CCCCCC">the unique thing is that they're</font>

967
00:36:05,109 --> 00:36:10,119
<font color="#E5E5E5">inspired by plan</font><font color="#CCCCCC"> nine the plan</font><font color="#E5E5E5"> lines</font>

968
00:36:07,780 --> 00:36:12,190
<font color="#E5E5E5">everything is a file philosophy but they</font>

969
00:36:10,119 --> 00:36:12,880
are doing everything as a<font color="#CCCCCC"> URL</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

970
00:36:12,190 --> 00:36:16,180
interesting

971
00:36:12,880 --> 00:36:17,560
<font color="#E5E5E5">so you there are some cases where</font><font color="#CCCCCC"> you</font>

972
00:36:16,180 --> 00:36:18,609
kind of<font color="#E5E5E5"> have some interesting outcomes</font>

973
00:36:17,560 --> 00:36:20,170
right<font color="#E5E5E5"> so you don't</font><font color="#CCCCCC"> have a semantic</font>

974
00:36:18,609 --> 00:36:21,640
recursion whether you have a device note

975
00:36:20,170 --> 00:36:24,550
on your file system<font color="#E5E5E5"> at slash dev slash</font>

976
00:36:21,640 --> 00:36:25,900
<font color="#CCCCCC">SDA which represent another indirection</font>

977
00:36:24,550 --> 00:36:27,400
<font color="#E5E5E5">into the file system or you could</font>

978
00:36:25,900 --> 00:36:28,750
perhaps have<font color="#E5E5E5"> slashed</font><font color="#CCCCCC"> off with</font><font color="#E5E5E5"> another</font>

979
00:36:27,400 --> 00:36:30,040
device<font color="#CCCCCC"> know and DRA</font><font color="#E5E5E5"> array or it just</font>

980
00:36:28,750 --> 00:36:32,170
<font color="#CCCCCC">keeps it clean whether</font><font color="#E5E5E5"> you have a fully</font>

981
00:36:30,040 --> 00:36:33,730
<font color="#CCCCCC">qualified URL and you don't have</font><font color="#E5E5E5"> these</font>

982
00:36:32,170 --> 00:36:36,040
oddities about special files and you

983
00:36:33,730 --> 00:36:38,050
know<font color="#E5E5E5"> is slash dev slash null is supposed</font>

984
00:36:36,040 --> 00:36:39,430
to<font color="#CCCCCC"> indicate null</font><font color="#E5E5E5"> but what is the size of</font>

985
00:36:38,050 --> 00:36:42,160
<font color="#E5E5E5">this file I mean we know what the answer</font>

986
00:36:39,430 --> 00:36:45,069
is but it's just cleaner so<font color="#E5E5E5"> you have</font>

987
00:36:42,160 --> 00:36:47,440
<font color="#CCCCCC">URLs and this is wrong the USB one but</font>

988
00:36:45,069 --> 00:36:48,460
just assume it's correct<font color="#E5E5E5"> for the moment</font>

989
00:36:47,440 --> 00:36:49,930
<font color="#E5E5E5">we basically you have these fully</font>

990
00:36:48,460 --> 00:36:51,640
qualified<font color="#E5E5E5"> URLs to actually access</font>

991
00:36:49,930 --> 00:36:54,549
services<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is the protocol</font><font color="#E5E5E5"> that's</font>

992
00:36:51,640 --> 00:36:57,009
used between<font color="#E5E5E5"> elements</font><font color="#CCCCCC"> of the file system</font>

993
00:36:54,550 --> 00:36:59,530
user space kernel different execution

994
00:36:57,010 --> 00:37:05,740
<font color="#CCCCCC">context</font><font color="#E5E5E5"> they call schemes</font><font color="#CCCCCC"> very easy to</font>

995
00:36:59,530 --> 00:37:08,589
write actually written in rust you have

996
00:37:05,740 --> 00:37:10,689
<font color="#E5E5E5">primitives for</font><font color="#CCCCCC"> all of this stuff</font><font color="#E5E5E5"> you</font>

997
00:37:08,589 --> 00:37:12,099
<font color="#E5E5E5">have an interesting containerization</font>

998
00:37:10,690 --> 00:37:14,140
scheme where basically you have this

999
00:37:12,099 --> 00:37:16,930
null<font color="#E5E5E5"> namespace and you can find it at a</font>

1000
00:37:14,140 --> 00:37:19,509
<font color="#E5E5E5">fine-grained system called level socket</font>

1001
00:37:16,930 --> 00:37:20,859
level restrict capabilities you want a

1002
00:37:19,510 --> 00:37:23,589
particular<font color="#E5E5E5"> process for half so that's</font>

1003
00:37:20,859 --> 00:37:25,480
that's<font color="#E5E5E5"> their capability</font><font color="#CCCCCC"> model there is</font>

1004
00:37:23,589 --> 00:37:27,160
SMP support but the scheduling

1005
00:37:25,480 --> 00:37:29,020
algorithms are very<font color="#E5E5E5"> simple right now</font><font color="#CCCCCC"> and</font>

1006
00:37:27,160 --> 00:37:31,899
that's<font color="#E5E5E5"> probably a good</font><font color="#CCCCCC"> thing you'll see</font>

1007
00:37:29,020 --> 00:37:34,420
<font color="#E5E5E5">I want to do a line of code thing so</font>

1008
00:37:31,900 --> 00:37:37,030
there's a utility<font color="#CCCCCC"> called LOC is</font><font color="#E5E5E5"> written</font>

1009
00:37:34,420 --> 00:37:38,500
in rust<font color="#CCCCCC"> you should check it out you</font>

1010
00:37:37,030 --> 00:37:40,089
pointed at a code base it does some

1011
00:37:38,500 --> 00:37:41,740
inference and<font color="#E5E5E5"> spits out some stats but</font>

1012
00:37:40,089 --> 00:37:44,020
basically the upshot of this is<font color="#E5E5E5"> that the</font>

1013
00:37:41,740 --> 00:37:45,419
kernel<font color="#E5E5E5"> is roughly in the region of 8,000</font>

1014
00:37:44,020 --> 00:37:48,840
<font color="#E5E5E5">to 9,000 lines of</font>

1015
00:37:45,420 --> 00:37:50,700
give or take<font color="#E5E5E5"> right</font>

1016
00:37:48,840 --> 00:37:52,380
virtualization<font color="#E5E5E5"> and redox there is no</font>

1017
00:37:50,700 --> 00:37:54,120
support<font color="#CCCCCC"> of virtualization</font><font color="#E5E5E5"> at present</font><font color="#CCCCCC"> I</font>

1018
00:37:52,380 --> 00:37:55,950
don't<font color="#E5E5E5"> think there will be support but we</font>

1019
00:37:54,120 --> 00:37:58,020
will see I<font color="#E5E5E5"> think what the community</font>

1020
00:37:55,950 --> 00:37:59,669
wants to<font color="#E5E5E5"> orient around is the philosophy</font>

1021
00:37:58,020 --> 00:38:01,290
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> should just rebuild your</font>

1022
00:37:59,670 --> 00:38:02,460
software against real<font color="#CCCCCC"> ipsy if you want</font>

1023
00:38:01,290 --> 00:38:05,029
to run it and that's the virtualization

1024
00:38:02,460 --> 00:38:07,620
<font color="#E5E5E5">play rather than supporting running</font>

1025
00:38:05,030 --> 00:38:09,390
unmodified software and a lot<font color="#CCCCCC"> of people</font>

1026
00:38:07,620 --> 00:38:11,490
are<font color="#CCCCCC"> okay with that right going to the</font>

1027
00:38:09,390 --> 00:38:13,589
<font color="#E5E5E5">overhead</font><font color="#CCCCCC"> of working with a fully new</font>

1028
00:38:11,490 --> 00:38:18,000
language<font color="#CCCCCC"> you probably are</font><font color="#E5E5E5"> okay with this</font>

1029
00:38:13,590 --> 00:38:19,380
rebuilding software at least<font color="#CCCCCC"> Oh pre</font>

1030
00:38:18,000 --> 00:38:21,450
<font color="#CCCCCC">lipsi posix-compliant</font>

1031
00:38:19,380 --> 00:38:22,830
uses this tool called<font color="#CCCCCC"> Sieben gen for</font>

1032
00:38:21,450 --> 00:38:27,180
foreign function interface in with<font color="#CCCCCC"> C</font>

1033
00:38:22,830 --> 00:38:29,160
code<font color="#E5E5E5"> targets redox and Linux there's a</font>

1034
00:38:27,180 --> 00:38:31,080
new<font color="#CCCCCC"> project called</font><font color="#E5E5E5"> 'rain that enables</font>

1035
00:38:29,160 --> 00:38:34,410
running redox applications under<font color="#CCCCCC"> linux</font>

1036
00:38:31,080 --> 00:38:36,740
<font color="#E5E5E5">using some tricks with real</font><font color="#CCCCCC"> ipsy its</font><font color="#E5E5E5"> api</font>

1037
00:38:34,410 --> 00:38:40,020
compatible with the<font color="#CCCCCC"> linux system called</font>

1038
00:38:36,740 --> 00:38:41,790
set<font color="#CCCCCC"> and for a given architecture</font>

1039
00:38:40,020 --> 00:38:42,990
<font color="#E5E5E5">obviously it's a bi compatible as well</font>

1040
00:38:41,790 --> 00:38:44,700
and this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> what makes it possible</font><font color="#CCCCCC"> to</font>

1041
00:38:42,990 --> 00:38:46,740
<font color="#E5E5E5">run most programs that have been</font><font color="#CCCCCC"> known</font>

1042
00:38:44,700 --> 00:38:50,879
to run under<font color="#CCCCCC"> linux or</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bsts without</font>

1043
00:38:46,740 --> 00:38:53,910
too much pain on<font color="#E5E5E5"> redux the</font><font color="#CCCCCC"> RUS compiler</font>

1044
00:38:50,880 --> 00:38:57,030
is is built for this particular triplet

1045
00:38:53,910 --> 00:38:58,200
<font color="#E5E5E5">and that's in associated with real</font><font color="#CCCCCC"> ipsy</font>

1046
00:38:57,030 --> 00:39:00,330
and that's how the<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> chains</font><font color="#E5E5E5"> start</font>

1047
00:38:58,200 --> 00:39:01,379
<font color="#E5E5E5">supporting all of this stuff now I don't</font>

1048
00:39:00,330 --> 00:39:03,299
<font color="#E5E5E5">know how I'm gonna do</font><font color="#CCCCCC"> this super quick</font>

1049
00:39:01,380 --> 00:39:04,710
<font color="#E5E5E5">so I</font><font color="#CCCCCC"> I this</font><font color="#E5E5E5"> is basically a list of</font>

1050
00:39:03,300 --> 00:39:08,910
everything I did<font color="#E5E5E5"> to get the port</font><font color="#CCCCCC"> happen</font>

1051
00:39:04,710 --> 00:39:09,630
right<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I identified what I was</font><font color="#E5E5E5"> after</font>

1052
00:39:08,910 --> 00:39:12,540
in terms<font color="#E5E5E5"> of which particular</font>

1053
00:39:09,630 --> 00:39:14,430
<font color="#E5E5E5">architecture number and execution state</font>

1054
00:39:12,540 --> 00:39:16,410
to target<font color="#E5E5E5"> I wanted to keep things</font><font color="#CCCCCC"> simple</font>

1055
00:39:14,430 --> 00:39:19,740
I chose<font color="#CCCCCC"> frame use virtual machine</font>

1056
00:39:16,410 --> 00:39:21,750
<font color="#E5E5E5">emulation for</font><font color="#CCCCCC"> 64 as the platform target</font>

1057
00:39:19,740 --> 00:39:23,279
that's the configuration<font color="#CCCCCC"> I wrote on</font><font color="#E5E5E5"> a</font>

1058
00:39:21,750 --> 00:39:24,870
scope<font color="#E5E5E5"> and put it on the redox gate lab</font>

1059
00:39:23,280 --> 00:39:26,640
and waited for<font color="#CCCCCC"> people who tell me</font>

1060
00:39:24,870 --> 00:39:28,560
<font color="#E5E5E5">something no one did</font><font color="#CCCCCC"> so I just</font><font color="#E5E5E5"> went</font>

1061
00:39:26,640 --> 00:39:30,540
ahead anyways<font color="#CCCCCC"> I started</font><font color="#E5E5E5"> speaking with</font>

1062
00:39:28,560 --> 00:39:32,100
the arm guys because I am like<font color="#E5E5E5"> with most</font>

1063
00:39:30,540 --> 00:39:34,130
silicon manufacturers you have to get

1064
00:39:32,100 --> 00:39:36,690
permissions to do this kind of stuff

1065
00:39:34,130 --> 00:39:39,750
<font color="#E5E5E5">started</font><font color="#CCCCCC"> playing with rust the compiler</font>

1066
00:39:36,690 --> 00:39:41,010
<font color="#E5E5E5">which is rust in</font><font color="#CCCCCC"> LLVM and looked at what</font>

1067
00:39:39,750 --> 00:39:44,910
was<font color="#E5E5E5"> done to add support for one</font>

1068
00:39:41,010 --> 00:39:46,890
<font color="#E5E5E5">particular triplet</font><font color="#CCCCCC"> then said okay I'll</font>

1069
00:39:44,910 --> 00:39:49,109
write<font color="#E5E5E5"> something similar for a at 64</font>

1070
00:39:46,890 --> 00:39:50,960
unknown redox rinse repeat until<font color="#CCCCCC"> I got</font>

1071
00:39:49,110 --> 00:39:53,060
what<font color="#E5E5E5"> looked like arm assembly</font>

1072
00:39:50,960 --> 00:39:55,920
<font color="#E5E5E5">ran into trouble with thread local</font>

1073
00:39:53,060 --> 00:39:57,750
support because I don't think anyone

1074
00:39:55,920 --> 00:39:58,540
survives thread local<font color="#E5E5E5"> support the first</font>

1075
00:39:57,750 --> 00:40:00,010
<font color="#CCCCCC">time in any</font>

1076
00:39:58,540 --> 00:40:04,140
operating system implementation it's a

1077
00:40:00,010 --> 00:40:04,140
pain in<font color="#CCCCCC"> the in the nether regions</font>

1078
00:40:04,380 --> 00:40:10,690
the you have separate instructions for

1079
00:40:08,110 --> 00:40:12,370
doing<font color="#E5E5E5"> TLS accesses at two separate</font>

1080
00:40:10,690 --> 00:40:14,770
exception levels and<font color="#CCCCCC"> armed one for the</font>

1081
00:40:12,370 --> 00:40:16,540
<font color="#E5E5E5">kernel one for the user space but</font><font color="#CCCCCC"> LLVM</font>

1082
00:40:14,770 --> 00:40:19,960
would only ever generate code for user

1083
00:40:16,540 --> 00:40:21,460
space even for<font color="#E5E5E5"> TLS code that I was</font>

1084
00:40:19,960 --> 00:40:23,200
compiling on the kernel side in<font color="#CCCCCC"> because</font>

1085
00:40:21,460 --> 00:40:24,940
it was making<font color="#CCCCCC"> the using the wrong</font>

1086
00:40:23,200 --> 00:40:28,359
instruction so I had to modify<font color="#CCCCCC"> LLVM</font>

1087
00:40:24,940 --> 00:40:29,800
<font color="#E5E5E5">which was not bad actually and then I</font>

1088
00:40:28,360 --> 00:40:33,400
came<font color="#E5E5E5"> up with our debug flow involving</font>

1089
00:40:29,800 --> 00:40:37,660
gdb and gdb<font color="#E5E5E5"> is</font><font color="#CCCCCC"> super great stuff</font><font color="#E5E5E5"> there's</font>

1090
00:40:33,400 --> 00:40:39,490
a guy<font color="#E5E5E5"> at arm who's our gdb mint take</font>

1091
00:40:37,660 --> 00:40:41,200
back<font color="#E5E5E5"> what I said there's a guy at almost</font>

1092
00:40:39,490 --> 00:40:43,120
<font color="#E5E5E5">a cream.you maintainer and with his help</font>

1093
00:40:41,200 --> 00:40:45,009
I figured<font color="#E5E5E5"> out how to make gdb</font><font color="#CCCCCC"> and claim</font>

1094
00:40:43,120 --> 00:40:47,650
<font color="#E5E5E5">you give me some really good stats for</font>

1095
00:40:45,010 --> 00:40:49,450
debugging<font color="#E5E5E5"> and tracing I created a boot</font>

1096
00:40:47,650 --> 00:40:51,910
flow with you boot<font color="#CCCCCC"> because I</font><font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to</font>

1097
00:40:49,450 --> 00:40:53,439
<font color="#E5E5E5">try and stay as close to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> experience</font>

1098
00:40:51,910 --> 00:40:57,339
<font color="#E5E5E5">people would have on an embedded target</font>

1099
00:40:53,440 --> 00:41:01,060
with<font color="#CCCCCC"> cream you and I use eater</font><font color="#E5E5E5"> net and</font>

1100
00:40:57,340 --> 00:41:03,790
this<font color="#CCCCCC"> TFTP emulation</font><font color="#E5E5E5"> and I use FTP to use</font>

1101
00:41:01,060 --> 00:41:06,299
to transfer environmental<font color="#E5E5E5"> information</font>

1102
00:41:03,790 --> 00:41:08,320
from the boot environment<font color="#CCCCCC"> to the kernel</font>

1103
00:41:06,300 --> 00:41:09,880
replicated the<font color="#E5E5E5"> x86 if</font><font color="#CCCCCC"> your kernel code</font>

1104
00:41:08,320 --> 00:41:11,680
structure stopped everything<font color="#E5E5E5"> out got a</font>

1105
00:41:09,880 --> 00:41:14,260
linker script done up got a<font color="#CCCCCC"> link cable</font>

1106
00:41:11,680 --> 00:41:15,730
kernel image that wouldn't run<font color="#E5E5E5"> verify</font>

1107
00:41:14,260 --> 00:41:17,650
that<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> is reaching the kernel</font>

1108
00:41:15,730 --> 00:41:21,790
started writing early<font color="#CCCCCC"> init code did lots</font>

1109
00:41:17,650 --> 00:41:24,910
of<font color="#CCCCCC"> MMU</font><font color="#E5E5E5"> song-and-dance in the end</font><font color="#CCCCCC"> managed</font>

1110
00:41:21,790 --> 00:41:26,860
<font color="#E5E5E5">to jump to rust code fleshed out</font>

1111
00:41:24,910 --> 00:41:28,290
recursive<font color="#E5E5E5"> paging implementation for a at</font>

1112
00:41:26,860 --> 00:41:32,080
64 this was fun

1113
00:41:28,290 --> 00:41:34,720
it's a trick used by on typically on<font color="#E5E5E5"> x86</font>

1114
00:41:32,080 --> 00:41:36,220
64<font color="#E5E5E5"> to have the MMU help you when you</font>

1115
00:41:34,720 --> 00:41:38,230
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to do page table updates rather</font>

1116
00:41:36,220 --> 00:41:40,839
than you walking page<font color="#CCCCCC"> table hierarchies</font>

1117
00:41:38,230 --> 00:41:42,790
<font color="#E5E5E5">but it involves tricks with selection of</font>

1118
00:41:40,840 --> 00:41:45,010
virtual addresses and the way in<font color="#E5E5E5"> which</font>

1119
00:41:42,790 --> 00:41:48,040
<font color="#CCCCCC">you programming amuse</font><font color="#E5E5E5"> and nobody had</font>

1120
00:41:45,010 --> 00:41:49,480
done<font color="#E5E5E5"> it for arm v8 and I spoke to</font><font color="#CCCCCC"> some</font>

1121
00:41:48,040 --> 00:41:51,130
<font color="#CCCCCC">of my</font><font color="#E5E5E5"> friends</font><font color="#CCCCCC"> in the arm kernel team</font>

1122
00:41:49,480 --> 00:41:53,050
they said it's<font color="#CCCCCC"> probably possible</font>

1123
00:41:51,130 --> 00:41:55,090
try it<font color="#E5E5E5"> out I tried it it kind of works</font>

1124
00:41:53,050 --> 00:41:56,740
but it's fragile<font color="#CCCCCC"> I will probably replace</font>

1125
00:41:55,090 --> 00:42:00,580
this with proper linear paging at some

1126
00:41:56,740 --> 00:42:02,890
point yeah so<font color="#E5E5E5"> mapping so I packed in a</font>

1127
00:42:00,580 --> 00:42:04,840
diagnostic UART and got hello<font color="#CCCCCC"> world and</font>

1128
00:42:02,890 --> 00:42:08,020
I was<font color="#E5E5E5"> quite pleased</font><font color="#CCCCCC"> with myself</font><font color="#E5E5E5"> and then</font>

1129
00:42:04,840 --> 00:42:10,840
<font color="#E5E5E5">just random selection</font><font color="#CCCCCC"> of bare driver</font>

1130
00:42:08,020 --> 00:42:12,310
support<font color="#E5E5E5"> all the while I was kind of</font>

1131
00:42:10,840 --> 00:42:14,170
making<font color="#E5E5E5"> sure gdb is kind of</font>

1132
00:42:12,310 --> 00:42:15,759
working with simple tests stack frame

1133
00:42:14,170 --> 00:42:17,110
unwinding no symbol support but at least

1134
00:42:15,760 --> 00:42:21,070
I have a stack trace and that's helpful

1135
00:42:17,110 --> 00:42:22,990
<font color="#CCCCCC">I did it at 64 support of ellipse e for</font>

1136
00:42:21,070 --> 00:42:25,140
<font color="#E5E5E5">the system calls for all</font><font color="#CCCCCC"> of the</font>

1137
00:42:22,990 --> 00:42:28,689
<font color="#CCCCCC">interrupts</font><font color="#E5E5E5"> with the rest of the kernel</font>

1138
00:42:25,140 --> 00:42:31,120
<font color="#E5E5E5">context a ring stove and I got in it the</font>

1139
00:42:28,690 --> 00:42:35,410
user space program to<font color="#E5E5E5"> build try to run</font>

1140
00:42:31,120 --> 00:42:39,330
it failed<font color="#CCCCCC"> tried hard to</font><font color="#E5E5E5"> figure out what</font>

1141
00:42:35,410 --> 00:42:41,940
was<font color="#CCCCCC"> going on</font><font color="#E5E5E5"> issues with elf parsing</font>

1142
00:42:39,330 --> 00:42:44,799
eventually it said hello which is good

1143
00:42:41,940 --> 00:42:46,420
<font color="#CCCCCC">then</font><font color="#E5E5E5"> I've fleshed out supporting system</font>

1144
00:42:44,800 --> 00:42:48,250
calls and<font color="#E5E5E5"> got some optimizations there</font>

1145
00:42:46,420 --> 00:42:50,230
lots more<font color="#E5E5E5"> work required here got init</font>

1146
00:42:48,250 --> 00:42:51,870
scripts going context switching code

1147
00:42:50,230 --> 00:42:54,580
rinse repeat<font color="#E5E5E5"> everything's fantastic</font>

1148
00:42:51,870 --> 00:42:57,970
<font color="#CCCCCC">interrupt controller</font><font color="#E5E5E5"> timers shady</font><font color="#CCCCCC"> lo</font>

1149
00:42:54,580 --> 00:43:00,430
hooks<font color="#CCCCCC"> FD T drivers changing all of the</font>

1150
00:42:57,970 --> 00:43:02,020
raw drivers I had written to use<font color="#CCCCCC"> ftt so</font>

1151
00:43:00,430 --> 00:43:04,930
<font color="#E5E5E5">you can be a little more dynamic and</font>

1152
00:43:02,020 --> 00:43:06,750
then started using like this<font color="#CCCCCC"> f TT is the</font>

1153
00:43:04,930 --> 00:43:08,680
<font color="#E5E5E5">flattened device</font><font color="#CCCCCC"> tree it's a way of</font>

1154
00:43:06,750 --> 00:43:10,780
abstracting away the kernel from

1155
00:43:08,680 --> 00:43:16,109
platform specific things like interrupts

1156
00:43:10,780 --> 00:43:18,490
<font color="#E5E5E5">number</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> always speak</font><font color="#CCCCCC"> to me afterwards</font>

1157
00:43:16,110 --> 00:43:19,750
<font color="#CCCCCC">and then I simplify the live disk</font>

1158
00:43:18,490 --> 00:43:21,370
support so you<font color="#E5E5E5"> basically have this</font>

1159
00:43:19,750 --> 00:43:23,500
structure<font color="#E5E5E5"> that's easy to build and run</font>

1160
00:43:21,370 --> 00:43:25,509
and does not involve<font color="#E5E5E5"> using a disk</font>

1161
00:43:23,500 --> 00:43:27,850
controller<font color="#E5E5E5"> just yet because I haven't</font>

1162
00:43:25,510 --> 00:43:30,370
<font color="#E5E5E5">finished that and then</font><font color="#CCCCCC"> login shellsworth</font>

1163
00:43:27,850 --> 00:43:32,440
<font color="#E5E5E5">I got</font><font color="#CCCCCC"> KT going and</font><font color="#E5E5E5"> I on without too much</font>

1164
00:43:30,370 --> 00:43:35,200
trouble and then everything<font color="#CCCCCC"> just worked</font>

1165
00:43:32,440 --> 00:43:37,270
<font color="#E5E5E5">I did some CPU identification stuff and</font>

1166
00:43:35,200 --> 00:43:39,850
then I drank a lot of beer<font color="#CCCCCC"> suppose I</font>

1167
00:43:37,270 --> 00:43:41,470
like<font color="#E5E5E5"> beer</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> current</font><font color="#CCCCCC"> storage status</font>

1168
00:43:39,850 --> 00:43:43,029
there's a clean room exercise<font color="#E5E5E5"> underway</font>

1169
00:43:41,470 --> 00:43:46,629
because<font color="#CCCCCC"> I have broken it as of last</font>

1170
00:43:43,030 --> 00:43:48,400
night<font color="#E5E5E5"> code is continually</font><font color="#CCCCCC"> being checked</font>

1171
00:43:46,630 --> 00:43:51,000
into<font color="#CCCCCC"> a are 64</font><font color="#E5E5E5"> branches of various</font>

1172
00:43:48,400 --> 00:43:53,980
repositories which are in the redox

1173
00:43:51,000 --> 00:43:56,530
<font color="#E5E5E5">github get lab there's a documentation</font>

1174
00:43:53,980 --> 00:43:58,720
rewrite<font color="#CCCCCC"> we have some people</font><font color="#E5E5E5"> working on</font>

1175
00:43:56,530 --> 00:44:01,930
silicon it's taking time<font color="#E5E5E5"> but it will</font>

1176
00:43:58,720 --> 00:44:03,700
<font color="#CCCCCC">happen this is stuff that</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to do</font>

1177
00:44:01,930 --> 00:44:06,149
in 2019 I won't go into the details read

1178
00:44:03,700 --> 00:44:09,160
it<font color="#E5E5E5"> ask me if you have</font><font color="#CCCCCC"> questions and then</font>

1179
00:44:06,150 --> 00:44:10,630
sorry these<font color="#CCCCCC"> are the generic</font><font color="#E5E5E5"> redox things</font>

1180
00:44:09,160 --> 00:44:13,629
and these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> things I want to do for</font>

1181
00:44:10,630 --> 00:44:16,060
arm<font color="#E5E5E5"> if I have the time these are details</font>

1182
00:44:13,630 --> 00:44:17,770
about the redox community<font color="#CCCCCC"> they follow</font>

1183
00:44:16,060 --> 00:44:19,779
the rust<font color="#CCCCCC"> Code of Conduct and they stick</font>

1184
00:44:17,770 --> 00:44:22,740
to it<font color="#E5E5E5"> it's actually</font><font color="#CCCCCC"> very a</font><font color="#E5E5E5"> very pleasant</font>

1185
00:44:19,780 --> 00:44:25,250
community to work with I should<font color="#CCCCCC"> add</font>

1186
00:44:22,740 --> 00:44:27,569
the guy who's done it boots it on

1187
00:44:25,250 --> 00:44:29,700
<font color="#E5E5E5">literally dozens of laptop families</font>

1188
00:44:27,570 --> 00:44:32,070
because he works for<font color="#CCCCCC"> system76</font><font color="#E5E5E5"> they make</font>

1189
00:44:29,700 --> 00:44:36,120
Linux laptops<font color="#CCCCCC"> man so he</font><font color="#E5E5E5"> uses all</font><font color="#CCCCCC"> of</font>

1190
00:44:32,070 --> 00:44:38,820
those as his test target<font color="#CCCCCC"> there's a guy</font>

1191
00:44:36,120 --> 00:44:42,029
<font color="#E5E5E5">from my team called Caston Heights low</font>

1192
00:44:38,820 --> 00:44:48,180
is he here<font color="#E5E5E5"> it's not here so</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> told me</font>

1193
00:44:42,030 --> 00:44:51,030
<font color="#E5E5E5">that the only way to check sorry</font><font color="#CCCCCC"> and</font>

1194
00:44:48,180 --> 00:45:01,440
this is not a at 64<font color="#E5E5E5"> okay and it might</font>

1195
00:44:51,030 --> 00:45:03,750
crash but just hold on he said the only

1196
00:45:01,440 --> 00:45:06,470
way<font color="#E5E5E5"> to check whether operating system is</font>

1197
00:45:03,750 --> 00:45:06,470
truly<font color="#E5E5E5"> complete</font>

1198
00:45:10,720 --> 00:45:15,689
isn't it always<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> it runs do</font>

1199
00:45:17,180 --> 00:45:27,690
[Applause]

1200
00:45:23,150 --> 00:45:31,280
so this is a rebuild<font color="#E5E5E5"> of freedom of PR</font>

1201
00:45:27,690 --> 00:45:34,440
<font color="#CCCCCC">doom against real epsy and it's working</font>

1202
00:45:31,280 --> 00:45:36,240
<font color="#E5E5E5">so I don't know where redox will go</font>

1203
00:45:34,440 --> 00:45:37,890
frankly I'd love to see it go<font color="#CCCCCC"> places</font>

1204
00:45:36,240 --> 00:45:39,600
it's given me a<font color="#CCCCCC"> foundation for some of</font>

1205
00:45:37,890 --> 00:45:43,529
the architectural exploration I wanted

1206
00:45:39,600 --> 00:45:45,270
to do which i think is cool but I<font color="#E5E5E5"> think</font>

1207
00:45:43,530 --> 00:45:47,070
it's made a<font color="#E5E5E5"> lot of progress in a very</font>

1208
00:45:45,270 --> 00:45:49,680
<font color="#CCCCCC">short amount</font><font color="#E5E5E5"> of time compared to</font><font color="#CCCCCC"> a lot</font>

1209
00:45:47,070 --> 00:45:51,770
<font color="#CCCCCC">of other microkernel stories</font><font color="#E5E5E5"> there's</font>

1210
00:45:49,680 --> 00:45:54,950
something do we learn<font color="#E5E5E5"> from</font><font color="#CCCCCC"> that okay</font>

1211
00:45:51,770 --> 00:45:54,950
that's it

1212
00:45:58,430 --> 00:46:02,908
[Applause]

