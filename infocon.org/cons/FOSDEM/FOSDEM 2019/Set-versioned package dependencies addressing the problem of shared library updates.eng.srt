1
00:00:04,610 --> 00:00:10,250
so and meet<font color="#E5E5E5"> 11 and today I'll be talking</font>

2
00:00:08,480 --> 00:00:13,400
<font color="#E5E5E5">about situation</font>

3
00:00:10,250 --> 00:00:15,950
<font color="#CCCCCC">Dependencies</font><font color="#E5E5E5"> this is a thing we</font>

4
00:00:13,400 --> 00:00:20,060
implemented in our<font color="#E5E5E5"> appositives and</font>

5
00:00:15,950 --> 00:00:22,990
distributions<font color="#E5E5E5"> in 2010 to adjust the</font>

6
00:00:20,060 --> 00:00:27,619
problem of shared library updates<font color="#E5E5E5"> so</font>

7
00:00:22,990 --> 00:00:31,210
what's the problem<font color="#CCCCCC"> every time</font><font color="#E5E5E5"> a shared</font>

8
00:00:27,619 --> 00:00:35,090
library is updated there is a risk that

9
00:00:31,210 --> 00:00:38,870
<font color="#E5E5E5">when not</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> then the shared library is</font>

10
00:00:35,090 --> 00:00:42,130
updated when<font color="#CCCCCC"> a client of a shared</font>

11
00:00:38,870 --> 00:00:44,390
library is updated<font color="#E5E5E5"> or even if a new</font>

12
00:00:42,130 --> 00:00:47,149
client of<font color="#E5E5E5"> a shared library is installed</font>

13
00:00:44,390 --> 00:00:50,600
there is<font color="#CCCCCC"> a risk of</font><font color="#E5E5E5"> in compatibility</font>

14
00:00:47,149 --> 00:00:52,270
<font color="#CCCCCC">between</font><font color="#E5E5E5"> a shared library and some of its</font>

15
00:00:50,600 --> 00:00:58,039
clients

16
00:00:52,270 --> 00:01:01,039
this happens in repositories when the

17
00:00:58,039 --> 00:01:03,980
shared libraries updated it's much<font color="#CCCCCC"> rarer</font>

18
00:01:01,039 --> 00:01:06,560
case when the an application in

19
00:01:03,980 --> 00:01:09,649
<font color="#CCCCCC">repositories updated it's</font><font color="#E5E5E5"> usually it's</font>

20
00:01:06,560 --> 00:01:11,780
<font color="#E5E5E5">compatible with shared levels it used</font>

21
00:01:09,649 --> 00:01:13,940
during the build but sometimes can

22
00:01:11,780 --> 00:01:18,170
happen<font color="#E5E5E5"> but mostly it's a just share</font>

23
00:01:13,940 --> 00:01:21,520
update<font color="#E5E5E5"> but in installations you can get</font>

24
00:01:18,170 --> 00:01:24,680
this incompatibilities<font color="#CCCCCC"> both when you're</font>

25
00:01:21,520 --> 00:01:27,500
updating<font color="#CCCCCC"> from a not very good package</font>

26
00:01:24,680 --> 00:01:30,229
repository<font color="#E5E5E5"> when you're doing a kind of</font>

27
00:01:27,500 --> 00:01:32,720
selected shared library update<font color="#E5E5E5"> when</font>

28
00:01:30,229 --> 00:01:35,929
you're just updating the library and<font color="#E5E5E5"> not</font>

29
00:01:32,720 --> 00:01:38,689
him<font color="#E5E5E5"> that's built with it or whether you</font>

30
00:01:35,930 --> 00:01:42,680
<font color="#CCCCCC">are</font><font color="#E5E5E5"> doing a selective update offer</font><font color="#CCCCCC"> of a</font>

31
00:01:38,689 --> 00:01:44,570
client or just<font color="#E5E5E5"> installing a client from</font>

32
00:01:42,680 --> 00:01:50,380
somewhere<font color="#CCCCCC"> and not necessarily from the</font>

33
00:01:44,570 --> 00:01:55,548
<font color="#E5E5E5">same repository</font><font color="#CCCCCC"> so this is a kind of</font>

34
00:01:50,380 --> 00:02:00,439
unavoidable<font color="#E5E5E5"> risk that incompatibility</font>

35
00:01:55,549 --> 00:02:06,079
could happen<font color="#E5E5E5"> so we usually want</font><font color="#CCCCCC"> to</font>

36
00:02:00,439 --> 00:02:10,150
control this<font color="#E5E5E5"> and at repository level we</font>

37
00:02:06,079 --> 00:02:14,560
would<font color="#E5E5E5"> like to stop this and also in</font>

38
00:02:10,150 --> 00:02:17,770
installations<font color="#E5E5E5"> so what kind of</font><font color="#CCCCCC"> ABI</font>

39
00:02:14,560 --> 00:02:21,319
incompatibility separably problematic

40
00:02:17,770 --> 00:02:23,120
spoiler alert<font color="#E5E5E5"> any incompatibilities</font><font color="#CCCCCC"> are</font>

41
00:02:21,319 --> 00:02:26,720
really problematic

42
00:02:23,120 --> 00:02:30,080
but some are<font color="#E5E5E5"> more problematic or maybe</font>

43
00:02:26,720 --> 00:02:33,170
you can encounter them more often<font color="#CCCCCC"> I I</font>

44
00:02:30,080 --> 00:02:35,629
<font color="#CCCCCC">supported them in three</font><font color="#E5E5E5"> groups by the</font>

45
00:02:33,170 --> 00:02:38,480
way you can detect them

46
00:02:35,629 --> 00:02:43,040
so first the<font color="#E5E5E5"> biggest one is those that</font>

47
00:02:38,480 --> 00:02:46,340
can<font color="#E5E5E5"> be detected on the elf level so when</font>

48
00:02:43,040 --> 00:02:50,629
<font color="#E5E5E5">our symbols</font><font color="#CCCCCC"> all symbols are removed or</font>

49
00:02:46,340 --> 00:02:55,970
<font color="#CCCCCC">added</font><font color="#E5E5E5"> or when the name changes that kind</font>

50
00:02:50,629 --> 00:02:59,120
of incompatibilities<font color="#E5E5E5"> by the way not just</font>

51
00:02:55,970 --> 00:03:02,900
removal of symbols is problematic but

52
00:02:59,120 --> 00:03:05,030
also an addition<font color="#E5E5E5"> because</font><font color="#CCCCCC"> our when you</font>

53
00:03:02,900 --> 00:03:08,720
are<font color="#E5E5E5"> adding a new symbol to already</font>

54
00:03:05,030 --> 00:03:11,900
<font color="#E5E5E5">existing versioning</font><font color="#CCCCCC"> or just</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> inversion</font>

55
00:03:08,720 --> 00:03:14,060
<font color="#E5E5E5">symbol this breaks forward compatibility</font>

56
00:03:11,900 --> 00:03:19,069
<font color="#E5E5E5">which is important when</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> install</font>

57
00:03:14,060 --> 00:03:21,470
third-party clients for example<font color="#CCCCCC"> so they</font>

58
00:03:19,069 --> 00:03:24,470
could be built with a newer<font color="#E5E5E5"> library that</font>

59
00:03:21,470 --> 00:03:27,889
you have so yeah and when you're

60
00:03:24,470 --> 00:03:31,130
changing<font color="#E5E5E5"> you should really you shouldn't</font>

61
00:03:27,889 --> 00:03:34,010
really change<font color="#CCCCCC"> Russian of a symbol but</font>

62
00:03:31,130 --> 00:03:37,450
some projects are<font color="#E5E5E5"> not aware about this</font>

63
00:03:34,010 --> 00:03:40,790
and they do and<font color="#CCCCCC"> changing impression is</font>

64
00:03:37,450 --> 00:03:46,388
easily worse<font color="#CCCCCC"> then almost</font><font color="#E5E5E5"> as better as</font>

65
00:03:40,790 --> 00:03:49,569
removing symbol well some other<font color="#CCCCCC"> kinds of</font>

66
00:03:46,389 --> 00:03:54,200
incompatibility static you can check a

67
00:03:49,569 --> 00:03:56,780
dwarf level like changes of function

68
00:03:54,200 --> 00:03:59,238
signatures in incompatible way or types

69
00:03:56,780 --> 00:04:01,940
of variables or well what is

70
00:03:59,239 --> 00:04:04,340
<font color="#E5E5E5">incompatible way for example like a</font>

71
00:04:01,940 --> 00:04:08,959
number of<font color="#E5E5E5"> arguments of function changes</font>

72
00:04:04,340 --> 00:04:11,120
or the<font color="#E5E5E5"> size of variable changes</font><font color="#CCCCCC"> it's not</font>

73
00:04:08,959 --> 00:04:14,030
as easy as<font color="#E5E5E5"> it sounds</font>

74
00:04:11,120 --> 00:04:16,760
to<font color="#CCCCCC"> to define formula what</font><font color="#E5E5E5"> is</font>

75
00:04:14,030 --> 00:04:21,139
<font color="#E5E5E5">incompatible change</font><font color="#CCCCCC"> I'll talk about</font><font color="#E5E5E5"> it a</font>

76
00:04:16,760 --> 00:04:24,409
<font color="#CCCCCC">bit later</font><font color="#E5E5E5"> and all other kinds of ABI</font>

77
00:04:21,139 --> 00:04:27,800
<font color="#CCCCCC">incompatibilities</font><font color="#E5E5E5"> that that don't</font>

78
00:04:24,410 --> 00:04:31,300
<font color="#E5E5E5">reflect on the elf or dwarf level just</font>

79
00:04:27,800 --> 00:04:35,510
<font color="#E5E5E5">when when semantics changes for example</font>

80
00:04:31,300 --> 00:04:36,389
<font color="#E5E5E5">some day used to be a</font><font color="#CCCCCC"> memory</font>

81
00:04:35,510 --> 00:04:40,219
implementation

82
00:04:36,389 --> 00:04:43,409
<font color="#CCCCCC">you</font><font color="#E5E5E5"> see that was working on</font>

83
00:04:40,219 --> 00:04:45,629
<font color="#CCCCCC">non-traditional</font><font color="#E5E5E5"> architectures like in a</font>

84
00:04:43,409 --> 00:04:50,759
move and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was changed because</font>

85
00:04:45,629 --> 00:04:54,810
like it<font color="#CCCCCC"> wasn't fast enough</font><font color="#E5E5E5"> and it wasn't</font>

86
00:04:50,759 --> 00:04:57,330
formally<font color="#E5E5E5"> a part of a bi contract it was</font>

87
00:04:54,810 --> 00:05:01,340
not<font color="#E5E5E5"> documented to work as an MMO but</font><font color="#CCCCCC"> it</font>

88
00:04:57,330 --> 00:05:04,318
anyway<font color="#E5E5E5"> it it was changed and it was an</font>

89
00:05:01,340 --> 00:05:06,299
<font color="#CCCCCC">incompatible incompatible change from</font>

90
00:05:04,319 --> 00:05:11,310
the point from<font color="#E5E5E5"> application point of view</font>

91
00:05:06,300 --> 00:05:15,090
<font color="#E5E5E5">that a lot of application relying on</font>

92
00:05:11,310 --> 00:05:20,310
this<font color="#CCCCCC"> undefined behavior</font><font color="#E5E5E5"> but kind of</font>

93
00:05:15,090 --> 00:05:22,859
thing so why all this problems rise it's

94
00:05:20,310 --> 00:05:27,120
because shared library are too easy to

95
00:05:22,860 --> 00:05:29,939
produce<font color="#CCCCCC"> you just add an option to</font><font color="#E5E5E5"> to GCC</font>

96
00:05:27,120 --> 00:05:33,169
<font color="#E5E5E5">and if you're using</font><font color="#CCCCCC"> auto doses as simple</font>

97
00:05:29,939 --> 00:05:36,150
as changing library of tebab race and a

98
00:05:33,169 --> 00:05:43,198
sources to<font color="#E5E5E5"> la sources it's too easy to</font>

99
00:05:36,150 --> 00:05:45,089
make<font color="#E5E5E5"> them but to maintain ABA stability</font>

100
00:05:43,199 --> 00:05:50,099
is really hard

101
00:05:45,089 --> 00:05:53,180
it requires intelligent<font color="#E5E5E5"> design and quite</font>

102
00:05:50,099 --> 00:05:57,560
a technical skills and the the

103
00:05:53,180 --> 00:06:00,930
institution<font color="#CCCCCC"> tis is really high so</font><font color="#E5E5E5"> gap</font>

104
00:05:57,560 --> 00:06:03,479
<font color="#CCCCCC">that the classic paper on this is how to</font>

105
00:06:00,930 --> 00:06:05,819
write shared libraries and it's part of

106
00:06:03,479 --> 00:06:10,139
<font color="#E5E5E5">describes maintaining ApS in the base</font>

107
00:06:05,819 --> 00:06:13,020
<font color="#E5E5E5">it's eight pages of technical text so I</font>

108
00:06:10,139 --> 00:06:16,319
would say it's pretty high<font color="#E5E5E5"> so that's why</font>

109
00:06:13,020 --> 00:06:20,568
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> projects are not aware about</font>

110
00:06:16,319 --> 00:06:24,169
<font color="#E5E5E5">this so they do whatever they think is</font>

111
00:06:20,569 --> 00:06:28,740
<font color="#CCCCCC">appropriate in in most cases it's wrong</font>

112
00:06:24,169 --> 00:06:32,419
and even<font color="#E5E5E5"> experienced</font><font color="#CCCCCC"> people can miss the</font>

113
00:06:28,740 --> 00:06:37,710
problem this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> yeah example from I</font>

114
00:06:32,419 --> 00:06:42,979
give a<font color="#E5E5E5"> lot of examples of</font><font color="#CCCCCC"> ABI</font><font color="#E5E5E5"> breaks so</font>

115
00:06:37,710 --> 00:06:47,880
I'll just show you one from 2016<font color="#E5E5E5"> when</font>

116
00:06:42,979 --> 00:06:49,568
<font color="#CCCCCC">you -</font><font color="#E5E5E5"> there was a minor version update</font>

117
00:06:47,880 --> 00:06:52,808
of open

118
00:06:49,569 --> 00:06:56,979
cell library<font color="#CCCCCC"> that was expected</font><font color="#E5E5E5"> to be a</font>

119
00:06:52,809 --> 00:06:59,349
just a<font color="#E5E5E5"> security fix of one of these</font>

120
00:06:56,979 --> 00:07:02,679
security fixes that have<font color="#E5E5E5"> names nowadays</font>

121
00:06:59,349 --> 00:07:07,719
<font color="#E5E5E5">so it was a just a minor</font><font color="#CCCCCC"> update that</font>

122
00:07:02,679 --> 00:07:11,948
removed some<font color="#CCCCCC"> SSL to code from defaults</font>

123
00:07:07,719 --> 00:07:14,949
<font color="#E5E5E5">but also it removed like</font><font color="#CCCCCC"> some functions</font>

124
00:07:11,949 --> 00:07:18,459
from the<font color="#CCCCCC"> bursar cell</font><font color="#E5E5E5"> and it was clear</font>

125
00:07:14,949 --> 00:07:20,349
released by maintainer<font color="#E5E5E5"> because he didn't</font>

126
00:07:18,459 --> 00:07:23,469
<font color="#E5E5E5">expect that kind</font><font color="#CCCCCC"> of thing in a minor</font>

127
00:07:20,349 --> 00:07:25,330
update<font color="#CCCCCC"> but in case of happens opener she</font>

128
00:07:23,469 --> 00:07:29,949
probably should have expected<font color="#E5E5E5"> anything</font>

129
00:07:25,330 --> 00:07:33,099
<font color="#E5E5E5">but anyway it was too easy</font><font color="#CCCCCC"> too nice</font>

130
00:07:29,949 --> 00:07:35,259
without proper tooling so we were very

131
00:07:33,099 --> 00:07:38,709
<font color="#E5E5E5">close</font><font color="#CCCCCC"> to repeat the same</font><font color="#E5E5E5"> mistake</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our</font>

132
00:07:35,259 --> 00:07:42,249
repository but while I am<font color="#CCCCCC"> showing you</font>

133
00:07:38,709 --> 00:07:46,749
this<font color="#E5E5E5"> example because the</font><font color="#CCCCCC"> situations just</font>

134
00:07:42,249 --> 00:07:50,309
<font color="#E5E5E5">caught this remember symbols so next</font><font color="#CCCCCC"> day</font>

135
00:07:46,749 --> 00:07:53,769
<font color="#E5E5E5">are these missing interfaces were</font>

136
00:07:50,309 --> 00:07:56,740
resurrected but quite a few<font color="#E5E5E5"> people</font><font color="#CCCCCC"> were</font>

137
00:07:53,769 --> 00:07:59,529
just caught in<font color="#CCCCCC"> the race because no</font>

138
00:07:56,740 --> 00:08:04,449
<font color="#CCCCCC">diagnostics just application</font><font color="#E5E5E5"> doesn't</font>

139
00:07:59,529 --> 00:08:09,039
start anymore<font color="#E5E5E5"> so what could be done</font>

140
00:08:04,449 --> 00:08:10,539
about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> that first</font><font color="#E5E5E5"> level of</font><font color="#CCCCCC"> defense is</font>

141
00:08:09,039 --> 00:08:13,149
of course a<font color="#CCCCCC"> classroom we should educate</font>

142
00:08:10,539 --> 00:08:17,680
our students how to write<font color="#CCCCCC"> read levels</font>

143
00:08:13,149 --> 00:08:22,509
properly<font color="#CCCCCC"> but well it's not</font><font color="#E5E5E5"> going to</font>

144
00:08:17,680 --> 00:08:24,669
happen<font color="#E5E5E5"> of all students and afraid</font><font color="#CCCCCC"> so</font>

145
00:08:22,509 --> 00:08:27,339
<font color="#CCCCCC">they the second level</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Defense is our</font>

146
00:08:24,669 --> 00:08:29,948
repositories which should have<font color="#E5E5E5"> tooling</font>

147
00:08:27,339 --> 00:08:38,679
to detect all this ABI incompatibilities

148
00:08:29,949 --> 00:08:42,430
<font color="#E5E5E5">as as early as</font><font color="#CCCCCC"> possible and</font><font color="#E5E5E5"> well it's</font>

149
00:08:38,679 --> 00:08:44,800
<font color="#E5E5E5">not really that easy</font><font color="#CCCCCC"> I mean it's hardly</font>

150
00:08:42,429 --> 00:08:48,459
possible<font color="#E5E5E5"> to do it without human</font>

151
00:08:44,800 --> 00:08:52,990
interaction<font color="#E5E5E5"> because we'll have a lot of</font>

152
00:08:48,459 --> 00:08:56,529
tools that<font color="#E5E5E5"> compare like compare</font><font color="#CCCCCC"> api's of</font>

153
00:08:52,990 --> 00:08:59,380
libraries but they have false<font color="#CCCCCC"> negatives</font>

154
00:08:56,529 --> 00:09:03,529
so they report<font color="#CCCCCC"> version compatibility</font><font color="#E5E5E5"> but</font>

155
00:08:59,380 --> 00:09:06,160
at the same time<font color="#E5E5E5"> human I</font><font color="#CCCCCC"> can</font>

156
00:09:03,529 --> 00:09:12,139
spend a<font color="#E5E5E5"> few hours</font><font color="#CCCCCC"> and tell that</font><font color="#E5E5E5"> they are</font>

157
00:09:06,160 --> 00:09:14,629
<font color="#E5E5E5">actually compatible so it's it's easier</font>

158
00:09:12,139 --> 00:09:16,670
to say than<font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement but it is some</font>

159
00:09:14,629 --> 00:09:20,749
simple<font color="#E5E5E5"> things that they can do you can</font>

160
00:09:16,670 --> 00:09:23,719
at<font color="#CCCCCC"> least ensure</font><font color="#E5E5E5"> that applications that</font>

161
00:09:20,749 --> 00:09:25,490
use<font color="#E5E5E5"> interfaces from libraries are</font>

162
00:09:23,720 --> 00:09:29,990
actually<font color="#CCCCCC"> link it</font><font color="#E5E5E5"> with these libraries</font>

163
00:09:25,490 --> 00:09:35,240
and we can have to lean in repositories

164
00:09:29,990 --> 00:09:37,730
<font color="#CCCCCC">to check that no application at Eastham</font>

165
00:09:35,240 --> 00:09:39,709
the repository<font color="#E5E5E5"> is linking with two</font>

166
00:09:37,730 --> 00:09:43,720
different<font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> the same library</font>

167
00:09:39,709 --> 00:09:48,829
<font color="#E5E5E5">when the surname</font><font color="#CCCCCC"> horribly changes and</font>

168
00:09:43,720 --> 00:09:53,120
not all its clients are built<font color="#E5E5E5"> there is a</font>

169
00:09:48,829 --> 00:09:55,758
chance<font color="#CCCCCC"> that in some client</font><font color="#E5E5E5"> two versions</font>

170
00:09:53,120 --> 00:09:59,029
of the same<font color="#E5E5E5"> library will be</font><font color="#CCCCCC"> loaded with</font>

171
00:09:55,759 --> 00:10:07,430
<font color="#E5E5E5">very bad consequences due to very</font>

172
00:09:59,029 --> 00:10:15,110
powerful<font color="#CCCCCC"> of</font><font color="#E5E5E5"> symbol resolution algorithm</font>

173
00:10:07,430 --> 00:10:19,189
so the<font color="#CCCCCC"> repository</font><font color="#E5E5E5"> la défense</font><font color="#CCCCCC"> lion is not</font>

174
00:10:15,110 --> 00:10:22,879
<font color="#E5E5E5">enough and</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> implement probably</font>

175
00:10:19,189 --> 00:10:26,329
the last line of<font color="#E5E5E5"> defense</font><font color="#CCCCCC"> and every in</font>

176
00:10:22,879 --> 00:10:29,839
every<font color="#E5E5E5"> installation run that dependency</font>

177
00:10:26,329 --> 00:10:33,888
<font color="#E5E5E5">solver works it should</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> ensure</font>

178
00:10:29,839 --> 00:10:37,069
that every library<font color="#E5E5E5"> that is required is</font>

179
00:10:33,889 --> 00:10:40,959
provided by something<font color="#E5E5E5"> and every library</font>

180
00:10:37,069 --> 00:10:45,259
<font color="#CCCCCC">interface is provided</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> nowadays</font>

181
00:10:40,959 --> 00:10:48,649
<font color="#E5E5E5">like all</font><font color="#CCCCCC"> replaces implement these are</font>

182
00:10:45,259 --> 00:10:52,639
both dependencies on libraries and<font color="#E5E5E5"> on</font>

183
00:10:48,649 --> 00:10:55,610
library interfaces but the one thing

184
00:10:52,639 --> 00:10:59,689
that<font color="#E5E5E5"> is probably implemented only in our</font>

185
00:10:55,610 --> 00:11:02,509
repository<font color="#E5E5E5"> is the check that every elf</font>

186
00:10:59,689 --> 00:11:05,089
symbol required from a<font color="#E5E5E5"> shared library is</font>

187
00:11:02,509 --> 00:11:07,899
<font color="#E5E5E5">actually provided by the shared library</font>

188
00:11:05,089 --> 00:11:11,870
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is called situations but other</font>

189
00:11:07,899 --> 00:11:12,529
implementations could be imagined our

190
00:11:11,870 --> 00:11:16,160
<font color="#CCCCCC">soul</font>

191
00:11:12,529 --> 00:11:16,819
the first<font color="#CCCCCC"> nave approach would be</font><font color="#E5E5E5"> just to</font>

192
00:11:16,160 --> 00:11:20,539
who

193
00:11:16,819 --> 00:11:24,139
<font color="#CCCCCC">all these and defiant symbols</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> a</font>

194
00:11:20,539 --> 00:11:26,269
<font color="#E5E5E5">class of packages and port all symbols</font>

195
00:11:24,139 --> 00:11:29,799
that could be used for<font color="#E5E5E5"> resolving this</font>

196
00:11:26,269 --> 00:11:33,410
<font color="#CCCCCC">into provides this is more or less</font>

197
00:11:29,799 --> 00:11:36,220
similar<font color="#E5E5E5"> to behavior of dynamic linker</font>

198
00:11:33,410 --> 00:11:40,249
why I say more or less<font color="#E5E5E5"> because it's</font>

199
00:11:36,220 --> 00:11:45,259
really<font color="#E5E5E5"> impossible to implement dynamic</font>

200
00:11:40,249 --> 00:11:50,149
linker a in a dependency<font color="#CCCCCC"> soldier</font><font color="#E5E5E5"> because</font>

201
00:11:45,259 --> 00:11:52,100
it's like really<font color="#CCCCCC"> complex</font><font color="#E5E5E5"> and any any</font>

202
00:11:50,149 --> 00:11:55,220
attempt will be<font color="#E5E5E5"> a simplification but</font>

203
00:11:52,100 --> 00:11:57,199
it's more<font color="#E5E5E5"> or</font><font color="#CCCCCC"> less like how it works but</font>

204
00:11:55,220 --> 00:12:00,169
<font color="#E5E5E5">the size of this provides and requires</font>

205
00:11:57,199 --> 00:12:03,469
would be prohibitively long prohibitive

206
00:12:00,169 --> 00:12:06,949
<font color="#CCCCCC">Liebig and</font><font color="#E5E5E5"> resolving all this stuff</font>

207
00:12:03,470 --> 00:12:09,410
would<font color="#CCCCCC"> be like too slow</font><font color="#E5E5E5"> to to be</font>

208
00:12:06,949 --> 00:12:11,329
acceptable so slightly<font color="#E5E5E5"> different</font>

209
00:12:09,410 --> 00:12:15,529
approach would be to associate these

210
00:12:11,329 --> 00:12:18,138
singles with<font color="#CCCCCC"> with</font><font color="#E5E5E5"> libraries it's also</font><font color="#CCCCCC"> a</font>

211
00:12:15,529 --> 00:12:21,199
<font color="#E5E5E5">naive approach because single names</font>

212
00:12:18,139 --> 00:12:25,579
could<font color="#E5E5E5"> be a bit long for example in</font>

213
00:12:21,199 --> 00:12:28,519
languages like<font color="#E5E5E5"> C++ and other languages</font>

214
00:12:25,579 --> 00:12:31,728
<font color="#E5E5E5">that use namespaces</font><font color="#CCCCCC"> and so on</font><font color="#E5E5E5"> similarly</font>

215
00:12:28,519 --> 00:12:37,159
<font color="#E5E5E5">could be as bigoted as you could imagine</font>

216
00:12:31,729 --> 00:12:41,359
<font color="#E5E5E5">and even longer so while it's so much</font>

217
00:12:37,159 --> 00:12:44,149
faster than<font color="#CCCCCC"> the first approach</font><font color="#E5E5E5"> because</font>

218
00:12:41,359 --> 00:12:48,109
it's all these names are associated<font color="#CCCCCC"> with</font>

219
00:12:44,149 --> 00:12:51,169
some libraries<font color="#E5E5E5"> yet it's</font><font color="#CCCCCC"> still - we're</font>

220
00:12:48,109 --> 00:12:54,889
still too big because<font color="#E5E5E5"> of these unlimited</font>

221
00:12:51,169 --> 00:12:59,539
<font color="#E5E5E5">length of symbol names and resolving</font>

222
00:12:54,889 --> 00:13:03,999
therefore is quite slow<font color="#CCCCCC"> too slow - to be</font>

223
00:12:59,539 --> 00:13:07,879
acceptable<font color="#E5E5E5"> so the next step would be to</font>

224
00:13:03,999 --> 00:13:11,269
<font color="#CCCCCC">use some probabilistic approach that is</font>

225
00:13:07,879 --> 00:13:16,129
to put not<font color="#CCCCCC"> just what the code symbol</font>

226
00:13:11,269 --> 00:13:20,629
names which<font color="#CCCCCC"> had</font><font color="#E5E5E5"> too long but just</font><font color="#CCCCCC"> a hash</font>

227
00:13:16,129 --> 00:13:22,279
values and choose hash way<font color="#E5E5E5"> hash values</font>

228
00:13:20,629 --> 00:13:25,600
of<font color="#E5E5E5"> the symbols and you choose the</font>

229
00:13:22,279 --> 00:13:29,199
<font color="#CCCCCC">function the way</font><font color="#E5E5E5"> that would produce</font>

230
00:13:25,600 --> 00:13:32,170
acceptable<font color="#E5E5E5"> false positive rate</font>

231
00:13:29,199 --> 00:13:35,920
what is a<font color="#E5E5E5"> false</font><font color="#CCCCCC"> positive rate when</font><font color="#E5E5E5"> you</font>

232
00:13:32,170 --> 00:13:38,858
<font color="#E5E5E5">hash symbol hash strings into various</font>

233
00:13:35,920 --> 00:13:41,920
there is a chance that different strings

234
00:13:38,859 --> 00:13:43,720
will<font color="#CCCCCC"> be hashed into the same value so</font>

235
00:13:41,920 --> 00:13:51,939
when you are checking whether this

236
00:13:43,720 --> 00:13:54,759
<font color="#E5E5E5">particular string is present a a in the</font>

237
00:13:51,939 --> 00:13:57,579
set of<font color="#CCCCCC"> first values</font><font color="#E5E5E5"> there is a chance</font>

238
00:13:54,759 --> 00:14:00,369
that a different string hash to the same

239
00:13:57,579 --> 00:14:05,339
value will be found<font color="#CCCCCC"> and this will be</font>

240
00:14:00,369 --> 00:14:10,299
full<font color="#E5E5E5"> false positive so it's not that</font>

241
00:14:05,339 --> 00:14:14,109
risky<font color="#E5E5E5"> because you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> control</font>

242
00:14:10,299 --> 00:14:18,369
<font color="#E5E5E5">that this this false positive rate by</font>

243
00:14:14,109 --> 00:14:23,019
<font color="#E5E5E5">choosing the proper hash function this</font>

244
00:14:18,369 --> 00:14:25,660
way you can reduce<font color="#E5E5E5"> the size of providing</font>

245
00:14:23,019 --> 00:14:30,279
<font color="#CCCCCC">requests to the level that can be</font>

246
00:14:25,660 --> 00:14:33,579
actually<font color="#E5E5E5"> worked</font><font color="#CCCCCC"> with but besides false</font>

247
00:14:30,279 --> 00:14:36,850
positives<font color="#E5E5E5"> you're losing the actual</font>

248
00:14:33,579 --> 00:14:43,199
symbol<font color="#E5E5E5"> names so when you you</font><font color="#CCCCCC"> can't find</font>

249
00:14:36,850 --> 00:14:46,169
when the solver doesn't find that or

250
00:14:43,199 --> 00:14:49,059
when it detects the situation when

251
00:14:46,169 --> 00:14:51,639
requires are not met with the<font color="#E5E5E5"> rights</font>

252
00:14:49,059 --> 00:14:55,419
there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> information about</font><font color="#E5E5E5"> actual</font>

253
00:14:51,639 --> 00:15:01,559
symbol names<font color="#E5E5E5"> it just says that they</font><font color="#CCCCCC"> are</font>

254
00:14:55,419 --> 00:15:04,589
not met<font color="#CCCCCC"> what can you achieve in theory</font>

255
00:15:01,559 --> 00:15:10,449
<font color="#CCCCCC">if you are using probabilistic approach</font>

256
00:15:04,589 --> 00:15:14,589
yeah so if<font color="#E5E5E5"> you just if you choose it</font>

257
00:15:10,449 --> 00:15:18,008
<font color="#CCCCCC">choose</font><font color="#E5E5E5"> in some false positive rate you</font>

258
00:15:14,589 --> 00:15:21,249
can work with there is a<font color="#E5E5E5"> information</font>

259
00:15:18,009 --> 00:15:27,100
theory<font color="#E5E5E5"> minimum that is binary logarithm</font>

260
00:15:21,249 --> 00:15:31,209
of this rate which is<font color="#CCCCCC"> 4 4 2 in - - 10th</font>

261
00:15:27,100 --> 00:15:37,089
is exactly<font color="#CCCCCC"> 10 bits it's a theoretical</font>

262
00:15:31,209 --> 00:15:39,789
<font color="#E5E5E5">minimum</font><font color="#CCCCCC"> but if you</font><font color="#E5E5E5"> use something what is</font>

263
00:15:37,089 --> 00:15:43,710
popular like bloom filter you will get

264
00:15:39,789 --> 00:15:49,180
an additional<font color="#E5E5E5"> multiplier by</font>

265
00:15:43,710 --> 00:15:55,080
one with about 1.44 which is one and<font color="#CCCCCC"> a</font>

266
00:15:49,180 --> 00:16:00,729
<font color="#CCCCCC">half more</font><font color="#E5E5E5"> or less bits per string if you</font>

267
00:15:55,080 --> 00:16:05,529
<font color="#E5E5E5">so</font><font color="#CCCCCC"> lap</font><font color="#E5E5E5"> for probability we use is</font><font color="#CCCCCC"> two in</font>

268
00:16:00,730 --> 00:16:08,890
-<font color="#E5E5E5"> tenth it's about 14 and a half beats</font>

269
00:16:05,529 --> 00:16:14,709
per stream<font color="#E5E5E5"> and for situations it's much</font>

270
00:16:08,890 --> 00:16:19,930
better<font color="#E5E5E5"> I mean it's not</font><font color="#CCCCCC"> a multiplier</font><font color="#E5E5E5"> the</font>

271
00:16:14,709 --> 00:16:24,099
<font color="#E5E5E5">theoretical minimum is is a addition of</font>

272
00:16:19,930 --> 00:16:27,160
<font color="#E5E5E5">one one and a half which</font><font color="#CCCCCC"> is like three</font>

273
00:16:24,100 --> 00:16:30,700
<font color="#CCCCCC">bits better</font><font color="#E5E5E5"> the stream then classic</font>

274
00:16:27,160 --> 00:16:34,270
bloom filter and yeah the complexity<font color="#E5E5E5"> of</font>

275
00:16:30,700 --> 00:16:35,800
this is very<font color="#CCCCCC"> good it's big all of the</font>

276
00:16:34,270 --> 00:16:39,699
styles of requires and provides and

277
00:16:35,800 --> 00:16:41,680
because this requires<font color="#CCCCCC"> a price don't</font>

278
00:16:39,700 --> 00:16:46,330
depend on<font color="#E5E5E5"> the length of symbol names</font>

279
00:16:41,680 --> 00:16:48,640
there it's a really good so how these

280
00:16:46,330 --> 00:16:51,640
situations is implemented<font color="#E5E5E5"> it's a</font>

281
00:16:48,640 --> 00:16:57,610
combination of a hash function<font color="#E5E5E5"> which is</font>

282
00:16:51,640 --> 00:16:58,949
<font color="#CCCCCC">chosen on the</font><font color="#E5E5E5"> size of the avail of the</font>

283
00:16:57,610 --> 00:17:04,809
number of strings

284
00:16:58,950 --> 00:17:11,020
<font color="#E5E5E5">what things</font><font color="#CCCCCC"> it's a such functions and</font>

285
00:17:04,809 --> 00:17:15,040
variable names so it's yeah it's a

286
00:17:11,020 --> 00:17:19,629
downgraded<font color="#CCCCCC"> Jenkins once in a time</font><font color="#E5E5E5"> 32-bit</font>

287
00:17:15,040 --> 00:17:24,428
fresh<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> get it to the size that</font><font color="#E5E5E5"> is</font>

288
00:17:19,630 --> 00:17:29,740
enough to to guarantee<font color="#E5E5E5"> us for specific</font>

289
00:17:24,429 --> 00:17:34,030
rate we want a for the case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> - in - 10</font>

290
00:17:29,740 --> 00:17:38,890
it's just a<font color="#E5E5E5"> 10 plus a bangle</font><font color="#CCCCCC"> go smoothly</font>

291
00:17:34,030 --> 00:17:43,450
size of the set so<font color="#CCCCCC"> then this these set</font>

292
00:17:38,890 --> 00:17:46,020
of caches is sorted<font color="#CCCCCC"> Delton code and then</font>

293
00:17:43,450 --> 00:17:51,059
<font color="#CCCCCC">compressed used go on Bryce encoding</font>

294
00:17:46,020 --> 00:17:51,059
which is<font color="#E5E5E5"> nature for this a kind of thing</font>

295
00:17:51,610 --> 00:18:03,790
then it's it's like converted into<font color="#CCCCCC"> -</font>

296
00:18:00,490 --> 00:18:08,770
numeric representation<font color="#CCCCCC"> used base64</font>

297
00:18:03,790 --> 00:18:15,730
basics is for is just 26 x 2 plus 10

298
00:18:08,770 --> 00:18:19,510
that's<font color="#E5E5E5"> right this way</font><font color="#CCCCCC"> these are the</font><font color="#E5E5E5"> sets</font>

299
00:18:15,730 --> 00:18:22,270
are human<font color="#CCCCCC"> readable and for decompression</font>

300
00:18:19,510 --> 00:18:27,580
<font color="#E5E5E5">you do essentially</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> but in</font>

301
00:18:22,270 --> 00:18:30,639
variables<font color="#E5E5E5"> order you decode this base64</font>

302
00:18:27,580 --> 00:18:36,189
strings and that decompress them using

303
00:18:30,640 --> 00:18:39,610
the one rise coding yeah this is how

304
00:18:36,190 --> 00:18:43,510
they look<font color="#E5E5E5"> in our system in practice I've</font>

305
00:18:39,610 --> 00:18:45,909
just taken a<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> repackage its the</font>

306
00:18:43,510 --> 00:18:48,700
<font color="#CCCCCC">drawer form and</font><font color="#E5E5E5"> futures it depends on</font>

307
00:18:45,910 --> 00:18:51,280
three<font color="#E5E5E5"> libraries and this set version</font>

308
00:18:48,700 --> 00:18:53,860
dependence<font color="#E5E5E5"> wave</font><font color="#CCCCCC"> I look this way</font><font color="#E5E5E5"> compared</font>

309
00:18:51,280 --> 00:18:56,970
<font color="#E5E5E5">to those you probably familiar with you</font>

310
00:18:53,860 --> 00:19:02,040
can<font color="#E5E5E5"> see not just a surname but also a</font>

311
00:18:56,970 --> 00:19:10,410
set<font color="#E5E5E5"> and after the column you see this</font>

312
00:19:02,040 --> 00:19:15,700
set version encoded and in base64<font color="#E5E5E5"> memory</font>

313
00:19:10,410 --> 00:19:18,460
from and<font color="#E5E5E5"> unpop it provides as you can</font>

314
00:19:15,700 --> 00:19:21,340
see they are much longer than<font color="#CCCCCC"> requires</font>

315
00:19:18,460 --> 00:19:23,950
<font color="#E5E5E5">it's often the case when clients use</font>

316
00:19:21,340 --> 00:19:27,939
only<font color="#E5E5E5"> subset of this function or the of</font>

317
00:19:23,950 --> 00:19:32,670
the interface provided by libraries so

318
00:19:27,940 --> 00:19:37,240
how good is this<font color="#E5E5E5"> compression</font><font color="#CCCCCC"> rate</font>

319
00:19:32,670 --> 00:19:42,550
<font color="#CCCCCC">remember it's the surgical minimum is is</font>

320
00:19:37,240 --> 00:19:47,820
<font color="#CCCCCC">10 that theoretical minimum for</font>

321
00:19:42,550 --> 00:19:47,820
solutions<font color="#E5E5E5"> that could be implemented</font><font color="#CCCCCC"> is</font>

322
00:19:47,970 --> 00:19:57,930
11 and<font color="#E5E5E5"> a half and</font><font color="#CCCCCC"> you can see in this</font>

323
00:19:52,540 --> 00:19:57,930
red line so that about half

324
00:19:58,590 --> 00:20:08,800
<font color="#E5E5E5">gap about half of these</font><font color="#CCCCCC"> libraries they</font>

325
00:20:02,710 --> 00:20:14,190
have<font color="#E5E5E5"> beats</font><font color="#CCCCCC"> percival ratio</font><font color="#E5E5E5"> 12 and almost</font>

326
00:20:08,800 --> 00:20:20,260
all<font color="#CCCCCC"> of this have bit-bit</font><font color="#E5E5E5"> a similar ratio</font>

327
00:20:14,190 --> 00:20:22,390
<font color="#E5E5E5">lower than 12.6</font><font color="#CCCCCC"> so it's yeah it's it's</font>

328
00:20:20,260 --> 00:20:25,180
more than heritage<font color="#CCCCCC"> continuing but yet</font>

329
00:20:22,390 --> 00:20:28,780
it's much less then<font color="#E5E5E5"> you can get using</font>

330
00:20:25,180 --> 00:20:31,060
<font color="#E5E5E5">bloom filters also on this picture you</font>

331
00:20:28,780 --> 00:20:32,350
<font color="#CCCCCC">can see</font><font color="#E5E5E5"> that most of libraries are</font>

332
00:20:31,060 --> 00:20:36,330
actually not very<font color="#E5E5E5"> big</font>

333
00:20:32,350 --> 00:20:42,209
like how<font color="#E5E5E5"> these libraries have less than</font>

334
00:20:36,330 --> 00:20:42,210
130 provided functions and variables

335
00:20:43,800 --> 00:20:51,700
<font color="#CCCCCC">okay so what are the pros and Contras</font><font color="#E5E5E5"> of</font>

336
00:20:48,040 --> 00:20:54,370
this approach<font color="#CCCCCC"> and summarizing yeah you</font>

337
00:20:51,700 --> 00:20:57,340
could<font color="#E5E5E5"> you'd get the guarantee that</font><font color="#CCCCCC"> every</font>

338
00:20:54,370 --> 00:21:01,300
<font color="#CCCCCC">elf symbol</font><font color="#E5E5E5"> required from</font><font color="#CCCCCC"> assured</font><font color="#E5E5E5"> lab is</font>

339
00:20:57,340 --> 00:21:05,740
provided and the check is performed not

340
00:21:01,300 --> 00:21:08,440
at<font color="#CCCCCC"> one time</font><font color="#E5E5E5"> but during package resolving</font>

341
00:21:05,740 --> 00:21:11,650
time so in the beginning<font color="#E5E5E5"> of the</font>

342
00:21:08,440 --> 00:21:15,370
transaction<font color="#E5E5E5"> and performance is quite</font>

343
00:21:11,650 --> 00:21:18,400
<font color="#E5E5E5">good but at the same time like the check</font>

344
00:21:15,370 --> 00:21:21,189
is still it is<font color="#E5E5E5"> still probabilistic but</font>

345
00:21:18,400 --> 00:21:25,450
you can control this<font color="#CCCCCC"> you can choose</font><font color="#E5E5E5"> the</font>

346
00:21:21,190 --> 00:21:30,760
rate which is acceptable<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> anyway</font>

347
00:21:25,450 --> 00:21:32,980
it<font color="#E5E5E5"> takes time so it will no matter how</font>

348
00:21:30,760 --> 00:21:36,580
fast it is<font color="#E5E5E5"> it will be longer than no</font>

349
00:21:32,980 --> 00:21:38,350
check at all but probably not

350
00:21:36,580 --> 00:21:41,110
<font color="#CCCCCC">unavoidable</font>

351
00:21:38,350 --> 00:21:46,709
this provides they are still quite<font color="#CCCCCC"> big</font>

352
00:21:41,110 --> 00:21:49,419
<font color="#CCCCCC">for</font><font color="#E5E5E5"> big libraries and even for even for</font>

353
00:21:46,710 --> 00:21:57,670
not<font color="#E5E5E5"> very big like this they are</font><font color="#CCCCCC"> still</font>

354
00:21:49,420 --> 00:22:00,640
look they still look like<font color="#CCCCCC"> Bochy</font><font color="#E5E5E5"> and the</font>

355
00:21:57,670 --> 00:22:03,070
<font color="#E5E5E5">most important that there is no error</font>

356
00:22:00,640 --> 00:22:05,920
agnostic which would contain<font color="#CCCCCC"> simoleans</font>

357
00:22:03,070 --> 00:22:10,090
because all similar names are lost we're

358
00:22:05,920 --> 00:22:11,300
operating with<font color="#CCCCCC"> caches</font><font color="#E5E5E5"> yeah and basic</font>

359
00:22:10,090 --> 00:22:16,370
<font color="#CCCCCC">story is a funny thing</font>

360
00:22:11,300 --> 00:22:17,928
<font color="#CCCCCC">he praises nice compact ASCII</font>

361
00:22:16,370 --> 00:22:22,820
representation but<font color="#E5E5E5"> not as compact</font>

362
00:22:17,929 --> 00:22:32,000
resolute like so like<font color="#E5E5E5"> base 85 would save</font>

363
00:22:22,820 --> 00:22:34,070
about<font color="#CCCCCC"> 8 percent of the final size</font><font color="#E5E5E5"> if you</font>

364
00:22:32,000 --> 00:22:36,020
are<font color="#E5E5E5"> thinking about implementing all this</font>

365
00:22:34,070 --> 00:22:40,730
stuff you should be<font color="#E5E5E5"> aware</font><font color="#CCCCCC"> about</font>

366
00:22:36,020 --> 00:22:45,170
obstacles which are<font color="#CCCCCC"> called</font><font color="#E5E5E5"> complexity</font>

367
00:22:40,730 --> 00:22:49,910
and integration complexity<font color="#E5E5E5"> yeah we use</font>

368
00:22:45,170 --> 00:22:54,110
math I<font color="#E5E5E5"> mean we use some not very very</font>

369
00:22:49,910 --> 00:22:56,900
common algorithms and the implementation

370
00:22:54,110 --> 00:22:59,629
is heavily optimized for performance<font color="#E5E5E5"> so</font>

371
00:22:56,900 --> 00:23:03,860
it would<font color="#E5E5E5"> take quite a lot of efforts and</font>

372
00:22:59,630 --> 00:23:07,220
<font color="#E5E5E5">time to understand</font><font color="#CCCCCC"> and some people are</font>

373
00:23:03,860 --> 00:23:11,110
<font color="#E5E5E5">really not ready</font><font color="#CCCCCC"> to invest their time</font>

374
00:23:07,220 --> 00:23:15,230
into complex things for example<font color="#E5E5E5"> the main</font>

375
00:23:11,110 --> 00:23:18,169
<font color="#E5E5E5">RPM or guy once admitted that this</font>

376
00:23:15,230 --> 00:23:21,500
implementation<font color="#E5E5E5"> is</font><font color="#CCCCCC"> too clearer</font><font color="#E5E5E5"> for his</font>

377
00:23:18,170 --> 00:23:28,850
taste and just refused even to discuss

378
00:23:21,500 --> 00:23:32,360
this so and regards to integration

379
00:23:28,850 --> 00:23:35,090
the problem is various projects they

380
00:23:32,360 --> 00:23:37,040
tend to implement<font color="#E5E5E5"> comparisons of</font>

381
00:23:35,090 --> 00:23:39,139
<font color="#E5E5E5">packaged versions and releases</font>

382
00:23:37,040 --> 00:23:44,350
themselves and they<font color="#E5E5E5"> are not aware about</font>

383
00:23:39,140 --> 00:23:49,760
this and<font color="#E5E5E5"> either you would have to to</font>

384
00:23:44,350 --> 00:23:55,219
teach them to to use the algorithms

385
00:23:49,760 --> 00:24:00,590
provided by operating<font color="#E5E5E5"> system or or make</font>

386
00:23:55,220 --> 00:24:03,250
them use this complex code<font color="#E5E5E5"> themselves so</font>

387
00:24:00,590 --> 00:24:03,250
it's not that<font color="#CCCCCC"> easy</font>

388
00:24:04,059 --> 00:24:11,240
yeah this is more or less what<font color="#CCCCCC"> we have</font>

389
00:24:07,640 --> 00:24:15,550
since 2010 it's quite stable<font color="#E5E5E5"> but we have</font>

390
00:24:11,240 --> 00:24:19,370
some<font color="#E5E5E5"> ideas for</font><font color="#CCCCCC"> the future is</font><font color="#E5E5E5"> really like</font>

391
00:24:15,550 --> 00:24:21,620
thinking progress<font color="#CCCCCC"> no</font><font color="#E5E5E5"> replacing</font><font color="#CCCCCC"> basics</font>

392
00:24:19,370 --> 00:24:24,320
<font color="#E5E5E5">before with something no</font><font color="#CCCCCC"> compact is</font>

393
00:24:21,620 --> 00:24:29,270
quite easy<font color="#CCCCCC"> whereas some</font>

394
00:24:24,320 --> 00:24:31,879
results with optimizing the selection of

395
00:24:29,270 --> 00:24:36,168
<font color="#E5E5E5">a gamma Maurice parameter if you know</font>

396
00:24:31,880 --> 00:24:42,559
what it means<font color="#CCCCCC"> it's traditionally called</font>

397
00:24:36,169 --> 00:24:45,590
<font color="#E5E5E5">M beep</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> it decides what part of how</font>

398
00:24:42,559 --> 00:24:48,350
to how<font color="#CCCCCC"> to chill it's actually</font><font color="#E5E5E5"> tuning of</font>

399
00:24:45,590 --> 00:24:51,649
go<font color="#E5E5E5"> memorize coding</font><font color="#CCCCCC"> it's it would be</font>

400
00:24:48,350 --> 00:24:56,809
<font color="#E5E5E5">backward compatible</font><font color="#CCCCCC"> we also have ideas</font>

401
00:24:51,650 --> 00:25:00,200
<font color="#CCCCCC">how to check</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> detect</font><font color="#E5E5E5"> human names</font><font color="#CCCCCC"> elf</font>

402
00:24:56,809 --> 00:25:02,120
simulation changes<font color="#E5E5E5"> that is quite</font>

403
00:25:00,200 --> 00:25:04,730
complicated because of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> resolution</font>

404
00:25:02,120 --> 00:25:07,760
process because well-known version

405
00:25:04,730 --> 00:25:10,910
<font color="#E5E5E5">tzimmes they could be they could be</font>

406
00:25:07,760 --> 00:25:12,980
result<font color="#CCCCCC"> either to an inversion civil but</font>

407
00:25:10,910 --> 00:25:17,390
also to a<font color="#CCCCCC"> civil with</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> version and</font>

408
00:25:12,980 --> 00:25:20,900
from the narrow side<font color="#CCCCCC"> a Russian</font><font color="#E5E5E5"> virtual</font>

409
00:25:17,390 --> 00:25:25,970
<font color="#CCCCCC">signals could be resolved also into</font>

410
00:25:20,900 --> 00:25:26,750
<font color="#E5E5E5">unresolved and</font><font color="#CCCCCC"> version civils so it's</font>

411
00:25:25,970 --> 00:25:29,750
not<font color="#E5E5E5"> that easy</font>

412
00:25:26,750 --> 00:25:33,080
also we have some ideas about detecting

413
00:25:29,750 --> 00:25:37,790
dope level incompatibilities<font color="#E5E5E5"> so like</font>

414
00:25:33,080 --> 00:25:40,790
using<font color="#E5E5E5"> signatures</font><font color="#CCCCCC"> instead of function</font>

415
00:25:37,790 --> 00:25:43,129
names but not just signatures<font color="#E5E5E5"> let's</font>

416
00:25:40,790 --> 00:25:45,740
somewhat reduce signatures to ignore<font color="#CCCCCC"> and</font>

417
00:25:43,130 --> 00:25:51,169
significant significant differences but

418
00:25:45,740 --> 00:25:54,470
<font color="#E5E5E5">it's like I think</font><font color="#CCCCCC"> we're still</font><font color="#E5E5E5"> thinking</font>

419
00:25:51,169 --> 00:25:57,260
about<font color="#E5E5E5"> because what is</font><font color="#CCCCCC"> insignificant like</font>

420
00:25:54,470 --> 00:26:01,160
silent<font color="#E5E5E5"> voice on</font><font color="#CCCCCC"> SONET it's mostly</font>

421
00:25:57,260 --> 00:26:05,059
<font color="#CCCCCC">insignificant change in practice when</font>

422
00:26:01,160 --> 00:26:09,830
you're talking about<font color="#CCCCCC"> a bi on some on</font>

423
00:26:05,059 --> 00:26:12,830
some architectures long and long long

424
00:26:09,830 --> 00:26:14,809
are insignificant<font color="#CCCCCC"> because they don't</font>

425
00:26:12,830 --> 00:26:18,049
differ they they are<font color="#E5E5E5"> not they have</font>

426
00:26:14,809 --> 00:26:22,010
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same but</font><font color="#E5E5E5"> compiler can detect</font>

427
00:26:18,049 --> 00:26:26,840
the difference<font color="#E5E5E5"> but so yeah we</font><font color="#CCCCCC"> are just</font>

428
00:26:22,010 --> 00:26:30,799
<font color="#E5E5E5">ideas I have some links</font><font color="#CCCCCC"> at the end of</font>

429
00:26:26,840 --> 00:26:34,370
these slides<font color="#CCCCCC"> these slides are</font><font color="#E5E5E5"> uploaded</font>

430
00:26:30,799 --> 00:26:35,760
so you can have a look at these<font color="#E5E5E5"> papers</font>

431
00:26:34,370 --> 00:26:39,810
and

432
00:26:35,760 --> 00:26:43,440
look at the code<font color="#E5E5E5"> sometime later probably</font>

433
00:26:39,810 --> 00:26:45,629
not now let's move<font color="#E5E5E5"> this all I would like</font>

434
00:26:43,440 --> 00:26:48,110
<font color="#E5E5E5">to tell about this so if you have some</font>

435
00:26:45,630 --> 00:26:48,110
questions

436
00:27:05,510 --> 00:27:11,610
yes<font color="#E5E5E5"> index will be too much and the check</font>

437
00:27:09,000 --> 00:27:14,340
<font color="#CCCCCC">will be too slow because it depends</font><font color="#E5E5E5"> on</font>

438
00:27:11,610 --> 00:27:17,280
<font color="#CCCCCC">on the boot size of the whole thing</font>

439
00:27:14,340 --> 00:27:20,629
<font color="#E5E5E5">so chicken comparing fishes is much</font>

440
00:27:17,280 --> 00:27:48,060
faster than comparing a<font color="#CCCCCC"> bitches drinks</font>

441
00:27:20,630 --> 00:27:50,670
yeah and yeah in the practice shows when

442
00:27:48,060 --> 00:27:54,030
you<font color="#CCCCCC"> are trying to pick all these</font>

443
00:27:50,670 --> 00:27:57,750
function names<font color="#CCCCCC"> into</font><font color="#E5E5E5"> indexes they are</font>

444
00:27:54,030 --> 00:28:03,690
going<font color="#E5E5E5"> to latch like really too</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> and</font>

445
00:27:57,750 --> 00:28:08,850
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> 2010 year project so it was</font><font color="#CCCCCC"> in</font>

446
00:28:03,690 --> 00:28:12,540
<font color="#E5E5E5">more important like nine</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> eight years</font>

447
00:28:08,850 --> 00:28:19,100
<font color="#CCCCCC">ago yeah you can try to do</font><font color="#E5E5E5"> this at home</font>

448
00:28:12,540 --> 00:28:19,100
<font color="#CCCCCC">I mean to</font><font color="#E5E5E5"> put all ends into your indexes</font>

449
00:28:34,660 --> 00:29:18,040
<font color="#CCCCCC">we are specifying the so how many</font>

450
00:29:06,140 --> 00:29:18,040
libraries do<font color="#E5E5E5"> in more than</font><font color="#CCCCCC"> 6,000 lab is</font>

451
00:29:21,120 --> 00:29:27,020
[Music]

452
00:29:24,190 --> 00:29:32,270
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> just one probably</font><font color="#E5E5E5"> one question and</font>

453
00:29:27,020 --> 00:29:39,450
we're almost<font color="#E5E5E5"> out of time</font><font color="#CCCCCC"> okay thank you</font>

454
00:29:32,270 --> 00:29:39,450
[Applause]

