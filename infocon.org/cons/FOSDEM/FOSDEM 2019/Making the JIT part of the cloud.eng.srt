1
00:00:05,590 --> 00:00:10,990
my name is<font color="#CCCCCC"> Roman</font><font color="#E5E5E5"> D'Souza I'm jit</font>

2
00:00:08,410 --> 00:00:12,910
compiler<font color="#E5E5E5"> developer and IBM and I'm also</font>

3
00:00:10,990 --> 00:00:14,800
a committer at the open j9 project and

4
00:00:12,910 --> 00:00:16,180
I'm here to<font color="#E5E5E5"> talk to you guys about an</font>

5
00:00:14,800 --> 00:00:18,689
exciting<font color="#CCCCCC"> project that</font><font color="#E5E5E5"> we've been</font><font color="#CCCCCC"> working</font>

6
00:00:16,180 --> 00:00:21,849
<font color="#E5E5E5">on called jig compilation as a service</font>

7
00:00:18,689 --> 00:00:27,310
<font color="#E5E5E5">but first a slight to make the lawyers</font>

8
00:00:21,849 --> 00:00:28,480
happy<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> is open j9 you guys might</font>

9
00:00:27,310 --> 00:00:30,939
have<font color="#E5E5E5"> already heard</font><font color="#CCCCCC"> about it before</font><font color="#E5E5E5"> on</font>

10
00:00:28,480 --> 00:00:32,439
<font color="#E5E5E5">the previous talks but it is an</font>

11
00:00:30,939 --> 00:00:34,600
<font color="#E5E5E5">independent implementation of a</font><font color="#CCCCCC"> java</font>

12
00:00:32,439 --> 00:00:37,150
<font color="#CCCCCC">virtual machine</font><font color="#E5E5E5"> and you create a compile</font>

13
00:00:34,600 --> 00:00:39,940
a complete<font color="#CCCCCC"> JDK by combining it with the</font>

14
00:00:37,150 --> 00:00:42,250
class libraries from open JDK<font color="#E5E5E5"> and</font>

15
00:00:39,940 --> 00:00:44,589
<font color="#E5E5E5">actually it came from the IBM j9 VM and</font>

16
00:00:42,250 --> 00:00:47,380
in fact the<font color="#E5E5E5"> gen and BN right now</font>

17
00:00:44,590 --> 00:00:50,680
the IBM<font color="#E5E5E5"> SDK actually currently uses and</font>

18
00:00:47,380 --> 00:00:51,730
is built with open j9 and so the<font color="#CCCCCC"> project</font>

19
00:00:50,680 --> 00:00:56,079
<font color="#CCCCCC">I'm going</font><font color="#E5E5E5"> to talk to you about is</font>

20
00:00:51,730 --> 00:00:57,040
actually<font color="#CCCCCC"> prototyped using open j9 so you</font>

21
00:00:56,079 --> 00:00:58,540
might these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the some of</font><font color="#E5E5E5"> the things</font>

22
00:00:57,040 --> 00:01:00,970
<font color="#CCCCCC">you might already know about a jet or</font>

23
00:00:58,540 --> 00:01:03,550
<font color="#CCCCCC">just-in-time</font><font color="#E5E5E5"> compiler</font><font color="#CCCCCC"> the compilation</font>

24
00:01:00,970 --> 00:01:06,158
<font color="#E5E5E5">takes CPU time and</font><font color="#CCCCCC"> memory from</font><font color="#E5E5E5"> the</font>

25
00:01:03,550 --> 00:01:09,310
<font color="#E5E5E5">application in order to compile an</font>

26
00:01:06,159 --> 00:01:11,319
optimized code<font color="#E5E5E5"> and the idea is that if</font>

27
00:01:09,310 --> 00:01:13,659
we<font color="#E5E5E5"> run long enough</font><font color="#CCCCCC"> we usually break even</font>

28
00:01:11,319 --> 00:01:15,999
and while this<font color="#E5E5E5"> has been true</font><font color="#CCCCCC"> for big</font>

29
00:01:13,659 --> 00:01:17,920
monolithic<font color="#E5E5E5"> applications it is less so</font>

30
00:01:15,999 --> 00:01:19,899
for a smaller distributed shorter cloud

31
00:01:17,920 --> 00:01:21,969
running applications<font color="#E5E5E5"> and the reason for</font>

32
00:01:19,899 --> 00:01:24,909
<font color="#CCCCCC">that is because JVM sometimes need to</font>

33
00:01:21,969 --> 00:01:26,649
operate in<font color="#E5E5E5"> small spaces if you take a</font>

34
00:01:24,909 --> 00:01:28,960
model with the application<font color="#E5E5E5"> that has been</font>

35
00:01:26,649 --> 00:01:30,130
broken<font color="#E5E5E5"> down into services which is what</font>

36
00:01:28,960 --> 00:01:33,759
<font color="#CCCCCC">you</font><font color="#E5E5E5"> want to do if you want to run in a</font>

37
00:01:30,130 --> 00:01:35,439
cloud<font color="#CCCCCC"> each of these services</font><font color="#E5E5E5"> might have</font>

38
00:01:33,759 --> 00:01:36,789
their own JVM<font color="#CCCCCC"> and in which case they</font>

39
00:01:35,439 --> 00:01:38,048
might have their own<font color="#CCCCCC"> chips and so</font>

40
00:01:36,789 --> 00:01:42,189
there's a lot of duplicated work

41
00:01:38,049 --> 00:01:44,109
happening<font color="#E5E5E5"> in these services</font><font color="#CCCCCC"> in addition</font>

42
00:01:42,189 --> 00:01:46,089
<font color="#CCCCCC">now that the services are smaller you</font>

43
00:01:44,109 --> 00:01:48,609
might decide hey we don't<font color="#E5E5E5"> need that much</font>

44
00:01:46,090 --> 00:01:50,499
space<font color="#E5E5E5"> let's just take a machine for</font>

45
00:01:48,609 --> 00:01:53,740
example<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> 8 cores 8 GB</font><font color="#E5E5E5"> and</font>

46
00:01:50,499 --> 00:01:56,139
split it up into virtual machines<font color="#CCCCCC"> and</font>

47
00:01:53,740 --> 00:01:58,568
that case you're now running<font color="#E5E5E5"> a JVM in a</font>

48
00:01:56,139 --> 00:02:00,310
constrained<font color="#E5E5E5"> environment so not only do</font>

49
00:01:58,569 --> 00:02:02,260
<font color="#E5E5E5">you have duplicated work we're compiling</font>

50
00:02:00,310 --> 00:02:04,180
the same methods over<font color="#E5E5E5"> and over again for</font>

51
00:02:02,260 --> 00:02:07,030
<font color="#CCCCCC">sample strengths methods in the string</font>

52
00:02:04,180 --> 00:02:09,130
<font color="#E5E5E5">class and medicine hashmap</font><font color="#CCCCCC"> but you're</font>

53
00:02:07,030 --> 00:02:12,430
<font color="#CCCCCC">also limited by the</font><font color="#E5E5E5"> amount of space</font><font color="#CCCCCC"> you</font>

54
00:02:09,130 --> 00:02:15,130
have<font color="#CCCCCC"> in these machines and so the</font>

55
00:02:12,430 --> 00:02:17,950
question we asked was what if we could

56
00:02:15,130 --> 00:02:19,690
should<font color="#E5E5E5"> compile out of process or on a</font>

57
00:02:17,950 --> 00:02:22,329
different<font color="#CCCCCC"> machine or on a</font><font color="#E5E5E5"> cluster of</font>

58
00:02:19,690 --> 00:02:24,340
<font color="#CCCCCC">machines and then maybe have</font><font color="#E5E5E5"> the jet</font>

59
00:02:22,330 --> 00:02:27,040
have its own CPUs and<font color="#E5E5E5"> memory resources</font>

60
00:02:24,340 --> 00:02:28,330
<font color="#E5E5E5">and serve multiple applications and</font>

61
00:02:27,040 --> 00:02:30,640
share code<font color="#CCCCCC"> between the different</font>

62
00:02:28,330 --> 00:02:33,280
applications<font color="#CCCCCC"> and so the</font><font color="#E5E5E5"> answer</font><font color="#CCCCCC"> that we</font>

63
00:02:30,640 --> 00:02:35,140
came<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with was JIT as a service the</font>

64
00:02:33,280 --> 00:02:37,810
idea is<font color="#CCCCCC"> to treat JIT compilation as any</font>

65
00:02:35,140 --> 00:02:40,089
other cloud service we<font color="#CCCCCC"> ramp up</font><font color="#E5E5E5"> and down</font>

66
00:02:37,810 --> 00:02:43,210
resources based<font color="#E5E5E5"> on load and load here is</font>

67
00:02:40,090 --> 00:02:45,280
<font color="#E5E5E5">compilation request and by doing so we</font>

68
00:02:43,210 --> 00:02:47,650
can containerize it and manage<font color="#CCCCCC"> it</font><font color="#E5E5E5"> manage</font>

69
00:02:45,280 --> 00:02:49,900
it intelligently using kubernetes or

70
00:02:47,650 --> 00:02:51,070
something<font color="#CCCCCC"> and we can share the results</font>

71
00:02:49,900 --> 00:02:53,500
across the components and across

72
00:02:51,070 --> 00:02:56,079
applications<font color="#E5E5E5"> and what we're hoping for</font>

73
00:02:53,500 --> 00:02:57,730
by<font color="#E5E5E5"> doing this is we have better resource</font>

74
00:02:56,080 --> 00:03:00,880
control for compilation and better

75
00:02:57,730 --> 00:03:02,920
<font color="#CCCCCC">scalability</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> the compilation</font><font color="#E5E5E5"> or</font>

76
00:03:00,880 --> 00:03:04,900
the JIT traditionally runs in process<font color="#E5E5E5"> it</font>

77
00:03:02,920 --> 00:03:08,140
has<font color="#E5E5E5"> to steal</font><font color="#CCCCCC"> resources from</font><font color="#E5E5E5"> the</font>

78
00:03:04,900 --> 00:03:09,459
application<font color="#E5E5E5"> and it can only steal so</font>

79
00:03:08,140 --> 00:03:11,609
many<font color="#E5E5E5"> resources if it took everything</font>

80
00:03:09,459 --> 00:03:14,680
then<font color="#E5E5E5"> you wouldn't get any real work</font><font color="#CCCCCC"> done</font>

81
00:03:11,610 --> 00:03:17,080
by<font color="#CCCCCC"> moving it away from part</font><font color="#E5E5E5"> of the JVM</font>

82
00:03:14,680 --> 00:03:19,920
<font color="#E5E5E5">we have the option of scaling it as much</font>

83
00:03:17,080 --> 00:03:23,080
as<font color="#CCCCCC"> we need to based</font><font color="#E5E5E5"> on its requirements</font>

84
00:03:19,920 --> 00:03:24,850
we also get amortization of the cost of

85
00:03:23,080 --> 00:03:26,410
compilation<font color="#CCCCCC"> because we can share the</font>

86
00:03:24,850 --> 00:03:29,530
code across<font color="#E5E5E5"> the different applications</font>

87
00:03:26,410 --> 00:03:31,090
it only has to<font color="#E5E5E5"> be compiled once we get</font>

88
00:03:29,530 --> 00:03:33,880
<font color="#E5E5E5">improved reliability from the</font>

89
00:03:31,090 --> 00:03:36,190
application because in the case where

90
00:03:33,880 --> 00:03:38,320
the compiler crashes it doesn't bring

91
00:03:36,190 --> 00:03:40,959
<font color="#E5E5E5">down the</font><font color="#CCCCCC"> entire application it crashes</font>

92
00:03:38,320 --> 00:03:43,150
somewhere else<font color="#CCCCCC"> and we can also now have</font>

93
00:03:40,959 --> 00:03:45,820
better provisioning of resources for the

94
00:03:43,150 --> 00:03:47,110
application itself<font color="#E5E5E5"> the users don't</font><font color="#CCCCCC"> have</font>

95
00:03:45,820 --> 00:03:49,030
<font color="#E5E5E5">to worry about do they need to size</font>

96
00:03:47,110 --> 00:03:51,090
their containers to take into account

97
00:03:49,030 --> 00:03:54,070
<font color="#E5E5E5">memory needed by the compiler or whatnot</font>

98
00:03:51,090 --> 00:03:56,709
<font color="#E5E5E5">of course there are concerns that we had</font>

99
00:03:54,070 --> 00:03:58,870
as well<font color="#CCCCCC"> network latency is a big one</font>

100
00:03:56,709 --> 00:04:00,459
traditionally compilation occurs at a

101
00:03:58,870 --> 00:04:02,590
time when the application is sensitive

102
00:04:00,459 --> 00:04:06,489
to<font color="#E5E5E5"> ramp up by that I mean the time it</font>

103
00:04:02,590 --> 00:04:08,920
takes<font color="#E5E5E5"> to reach peak throughput</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> now</font>

104
00:04:06,489 --> 00:04:10,989
they were<font color="#E5E5E5"> moving it off officer</font><font color="#CCCCCC"> off</font>

105
00:04:08,920 --> 00:04:14,230
process<font color="#CCCCCC"> or on a</font><font color="#E5E5E5"> different machine</font><font color="#CCCCCC"> were</font>

106
00:04:10,989 --> 00:04:16,320
at the mercy<font color="#CCCCCC"> of the network security</font>

107
00:04:14,230 --> 00:04:18,730
<font color="#CCCCCC">obviously is another beacons</font>

108
00:04:16,320 --> 00:04:20,349
we're now communicating<font color="#E5E5E5"> on a channel</font>

109
00:04:18,730 --> 00:04:21,850
that<font color="#E5E5E5"> was previously completely internal</font>

110
00:04:20,350 --> 00:04:23,890
to<font color="#E5E5E5"> the JVM but now we're you know</font>

111
00:04:21,850 --> 00:04:25,570
<font color="#E5E5E5">speaking outside of it</font>

112
00:04:23,890 --> 00:04:27,340
there's also<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> reliability issues</font>

113
00:04:25,570 --> 00:04:28,870
what happens when you know you're in<font color="#CCCCCC"> the</font>

114
00:04:27,340 --> 00:04:30,789
middle<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a compilation and the network</font>

115
00:04:28,870 --> 00:04:33,250
breaks down<font color="#E5E5E5"> what</font><font color="#CCCCCC"> is the fallback</font><font color="#E5E5E5"> plan</font>

116
00:04:30,790 --> 00:04:34,780
and of course the last<font color="#CCCCCC"> one was would all</font>

117
00:04:33,250 --> 00:04:36,010
this work<font color="#E5E5E5"> actually pay off with</font>

118
00:04:34,780 --> 00:04:39,489
offloading it<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> different machine</font>

119
00:04:36,010 --> 00:04:41,740
<font color="#E5E5E5">work and so where are we right</font><font color="#CCCCCC"> now with</font>

120
00:04:39,490 --> 00:04:43,120
the<font color="#E5E5E5"> current prototype that we have it's</font>

121
00:04:41,740 --> 00:04:45,220
available on github<font color="#CCCCCC"> and I put the two</font>

122
00:04:43,120 --> 00:04:46,450
<font color="#CCCCCC">links up there for you guys</font><font color="#E5E5E5"> it is also</font>

123
00:04:45,220 --> 00:04:48,820
there at the very<font color="#E5E5E5"> end if you don't get a</font>

124
00:04:46,450 --> 00:04:50,590
chance<font color="#E5E5E5"> to take a picture</font><font color="#CCCCCC"> now it</font>

125
00:04:48,820 --> 00:04:52,180
<font color="#E5E5E5">currently supports all the</font><font color="#CCCCCC"> optimizations</font>

126
00:04:50,590 --> 00:04:55,539
that<font color="#E5E5E5"> almost all the optimization is done</font>

127
00:04:52,180 --> 00:04:57,370
<font color="#E5E5E5">by the open j9</font><font color="#CCCCCC"> jet it</font><font color="#E5E5E5"> communicates fully</font>

128
00:04:55,540 --> 00:05:00,040
over the network<font color="#E5E5E5"> by using raw sockets</font>

129
00:04:57,370 --> 00:05:02,260
and protobufs<font color="#CCCCCC"> and currently</font><font color="#E5E5E5"> is a single</font>

130
00:05:00,040 --> 00:05:06,040
server multi client model and it also

131
00:05:02,260 --> 00:05:07,960
<font color="#E5E5E5">supports open SSL</font><font color="#CCCCCC"> it can also</font><font color="#E5E5E5"> run all</font>

132
00:05:06,040 --> 00:05:12,520
the open j9 test<font color="#CCCCCC"> Suites</font><font color="#E5E5E5"> as well as many</font>

133
00:05:07,960 --> 00:05:15,310
<font color="#E5E5E5">enterprise benchmarks and so let's get a</font>

134
00:05:12,520 --> 00:05:18,010
bit into this<font color="#E5E5E5"> at a very high</font><font color="#CCCCCC"> level it</font><font color="#E5E5E5"> is</font>

135
00:05:15,310 --> 00:05:19,060
a<font color="#E5E5E5"> client-server model as I mentioned</font>

136
00:05:18,010 --> 00:05:21,610
before<font color="#E5E5E5"> with bi-directional</font>

137
00:05:19,060 --> 00:05:23,790
bi-directional communication<font color="#E5E5E5"> what</font>

138
00:05:21,610 --> 00:05:25,990
happens is a<font color="#E5E5E5"> compliment accomplished in</font>

139
00:05:23,790 --> 00:05:28,060
begins when<font color="#CCCCCC"> the competition request is</font>

140
00:05:25,990 --> 00:05:30,130
sent to the<font color="#E5E5E5"> server and it ends when</font><font color="#CCCCCC"> the</font>

141
00:05:28,060 --> 00:05:32,440
<font color="#CCCCCC">compilation server returns the compiled</font>

142
00:05:30,130 --> 00:05:34,690
body back to<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> and during the</font>

143
00:05:32,440 --> 00:05:36,400
compilation<font color="#E5E5E5"> the server can make an</font>

144
00:05:34,690 --> 00:05:38,410
arbitrary<font color="#CCCCCC"> number of queries to get</font>

145
00:05:36,400 --> 00:05:41,229
<font color="#CCCCCC">information about the class info profile</font>

146
00:05:38,410 --> 00:05:42,610
info<font color="#E5E5E5"> higher can foe and the reason needs</font>

147
00:05:41,229 --> 00:05:44,560
<font color="#E5E5E5">to do this is</font><font color="#CCCCCC"> because we've</font><font color="#E5E5E5"> only moved</font>

148
00:05:42,610 --> 00:05:46,780
the compiler<font color="#E5E5E5"> off process we haven't</font>

149
00:05:44,560 --> 00:05:48,580
moved the<font color="#E5E5E5"> entire JVM environment and so</font>

150
00:05:46,780 --> 00:05:50,679
the compiler<font color="#CCCCCC"> has no notion about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> is</font>

151
00:05:48,580 --> 00:05:52,750
<font color="#E5E5E5">valid in this particular JVM environment</font>

152
00:05:50,680 --> 00:05:55,450
and so in order to make<font color="#CCCCCC"> optimization</font>

153
00:05:52,750 --> 00:05:59,110
decisions it needs to query the JVM<font color="#CCCCCC"> the</font>

154
00:05:55,450 --> 00:06:02,050
client<font color="#E5E5E5"> about it so let's get into it</font><font color="#CCCCCC"> a</font>

155
00:05:59,110 --> 00:06:04,540
<font color="#CCCCCC">bit deeper</font><font color="#E5E5E5"> there's eight steps involved</font>

156
00:06:02,050 --> 00:06:07,360
and<font color="#E5E5E5"> I'll go into each of these briefly</font>

157
00:06:04,540 --> 00:06:09,310
<font color="#E5E5E5">but I want you to notice that steps one</font>

158
00:06:07,360 --> 00:06:12,250
two<font color="#E5E5E5"> and eight are essentially the same</font>

159
00:06:09,310 --> 00:06:13,690
<font color="#E5E5E5">as what happens in an in process jet</font><font color="#CCCCCC"> we</font>

160
00:06:12,250 --> 00:06:16,090
request a<font color="#CCCCCC"> compilation</font><font color="#E5E5E5"> it gets processed</font>

161
00:06:13,690 --> 00:06:19,270
<font color="#CCCCCC">it gets compiled and then we install it</font>

162
00:06:16,090 --> 00:06:20,830
<font color="#E5E5E5">in the code cache and so</font><font color="#CCCCCC"> from the JVM</font>

163
00:06:19,270 --> 00:06:22,630
point of view nothing<font color="#E5E5E5"> has really changed</font>

164
00:06:20,830 --> 00:06:24,520
if the JVM doesn't need to know<font color="#E5E5E5"> whether</font>

165
00:06:22,630 --> 00:06:27,159
the JIT is<font color="#E5E5E5"> in process or out of process</font>

166
00:06:24,520 --> 00:06:30,959
<font color="#E5E5E5">it's the separation happens at the J</font>

167
00:06:27,159 --> 00:06:33,188
<font color="#CCCCCC">jedd interface so in step one</font><font color="#E5E5E5"> we</font>

168
00:06:30,959 --> 00:06:36,039
generate a compilation request<font color="#E5E5E5"> which</font>

169
00:06:33,189 --> 00:06:38,319
gets put in<font color="#E5E5E5"> the conflation queue</font>

170
00:06:36,039 --> 00:06:40,179
step<font color="#CCCCCC"> two that the request is</font><font color="#E5E5E5"> processed</font>

171
00:06:38,319 --> 00:06:42,039
<font color="#E5E5E5">by the compilation thread on the client</font>

172
00:06:40,179 --> 00:06:43,539
<font color="#CCCCCC">and accomplishments right here is a bit</font>

173
00:06:42,039 --> 00:06:44,709
of<font color="#CCCCCC"> a misnomer because it's not</font><font color="#E5E5E5"> actually</font>

174
00:06:43,539 --> 00:06:47,998
<font color="#CCCCCC">doing the compilation it more</font>

175
00:06:44,709 --> 00:06:50,559
facilitates the compilation<font color="#E5E5E5"> but anyway</font>

176
00:06:47,999 --> 00:06:52,809
<font color="#CCCCCC">once it processes the request</font><font color="#E5E5E5"> it sends</font>

177
00:06:50,559 --> 00:06:54,489
the remote request to the server<font color="#E5E5E5"> where</font>

178
00:06:52,809 --> 00:06:56,949
there<font color="#E5E5E5"> is a socket listener thread that's</font>

179
00:06:54,489 --> 00:06:58,539
listening<font color="#E5E5E5"> for these requests and when it</font>

180
00:06:56,949 --> 00:07:00,399
receives that<font color="#E5E5E5"> you request it will place</font>

181
00:06:58,539 --> 00:07:02,378
it on the compilation queue on the

182
00:07:00,399 --> 00:07:04,269
server<font color="#E5E5E5"> side and what it does here is not</font>

183
00:07:02,379 --> 00:07:06,279
<font color="#E5E5E5">just place the request but also the</font>

184
00:07:04,269 --> 00:07:07,990
socket descriptor so that when the

185
00:07:06,279 --> 00:07:10,119
compilation thread<font color="#CCCCCC"> our server</font><font color="#E5E5E5"> needs to</font>

186
00:07:07,990 --> 00:07:11,800
make<font color="#E5E5E5"> queries against the client it</font>

187
00:07:10,119 --> 00:07:13,300
doesn't need<font color="#E5E5E5"> to go through</font><font color="#CCCCCC"> the listener</font>

188
00:07:11,800 --> 00:07:16,949
thread<font color="#CCCCCC"> it</font><font color="#E5E5E5"> can just directly communicate</font>

189
00:07:13,300 --> 00:07:18,819
with<font color="#CCCCCC"> the client so in step 5 the</font>

190
00:07:16,949 --> 00:07:20,559
<font color="#CCCCCC">completion turn on the server will pick</font>

191
00:07:18,819 --> 00:07:23,079
up the request<font color="#E5E5E5"> and start compiling</font><font color="#CCCCCC"> and</font>

192
00:07:20,559 --> 00:07:26,319
as I mentioned<font color="#E5E5E5"> before it will need to</font>

193
00:07:23,079 --> 00:07:28,029
make<font color="#E5E5E5"> runtime queries</font><font color="#CCCCCC"> every so often and</font>

194
00:07:26,319 --> 00:07:29,860
then finally when it's done compiling it

195
00:07:28,029 --> 00:07:32,439
will return<font color="#E5E5E5"> the compiled body back to</font>

196
00:07:29,860 --> 00:07:34,269
<font color="#E5E5E5">the client at which point we relocate</font>

197
00:07:32,439 --> 00:07:38,819
install it and then<font color="#E5E5E5"> the JVM now has a</font>

198
00:07:34,269 --> 00:07:41,199
<font color="#CCCCCC">compiled body that it can run and so</font>

199
00:07:38,819 --> 00:07:44,740
that's the general<font color="#CCCCCC"> process</font><font color="#E5E5E5"> of how it all</font>

200
00:07:41,199 --> 00:07:47,889
works<font color="#E5E5E5"> how does it perform so I'm gonna</font>

201
00:07:44,740 --> 00:07:49,749
go<font color="#CCCCCC"> through four different areas of</font>

202
00:07:47,889 --> 00:07:52,119
performance<font color="#E5E5E5"> that we measured throughput</font>

203
00:07:49,749 --> 00:07:54,069
memory footprint<font color="#E5E5E5"> how does it perform in</font>

204
00:07:52,119 --> 00:07:55,209
a constrained environment and<font color="#E5E5E5"> also how</font>

205
00:07:54,069 --> 00:07:59,499
<font color="#CCCCCC">does it perform</font><font color="#E5E5E5"> on the cloud because</font>

206
00:07:55,209 --> 00:08:02,469
after<font color="#CCCCCC"> all this</font><font color="#E5E5E5"> is a service so the setup</font>

207
00:07:59,499 --> 00:08:03,969
we had was we ran it with two x86 Linux

208
00:08:02,469 --> 00:08:07,269
machines where we connected<font color="#CCCCCC"> them</font><font color="#E5E5E5"> put a</font>

209
00:08:03,969 --> 00:08:09,459
direct Ethernet cable<font color="#CCCCCC"> on machine</font><font color="#E5E5E5"> one we</font>

210
00:08:07,269 --> 00:08:10,959
had<font color="#E5E5E5"> the actual</font><font color="#CCCCCC"> JIT server</font><font color="#E5E5E5"> MongoDB and</font>

211
00:08:09,459 --> 00:08:13,179
jmeter<font color="#E5E5E5"> each of them running in their own</font>

212
00:08:10,959 --> 00:08:15,369
docker instance containers<font color="#E5E5E5"> and that a</font>

213
00:08:13,179 --> 00:08:17,138
machine<font color="#CCCCCC"> - we had a</font><font color="#E5E5E5"> Java EE</font><font color="#CCCCCC"> act</font><font color="#E5E5E5"> near</font>

214
00:08:15,369 --> 00:08:20,019
benchmark running on top of Liberty<font color="#E5E5E5"> app</font>

215
00:08:17,139 --> 00:08:22,439
server<font color="#CCCCCC"> Acme R is a benchmark that</font>

216
00:08:20,019 --> 00:08:27,899
<font color="#E5E5E5">simulates flight reservation system and</font>

217
00:08:22,439 --> 00:08:31,929
<font color="#E5E5E5">Liberty is a dynamic composable server</font>

218
00:08:27,899 --> 00:08:33,909
application runtime environment<font color="#E5E5E5"> and so</font>

219
00:08:31,929 --> 00:08:36,009
here's the<font color="#E5E5E5"> graph we see for throughput</font>

220
00:08:33,909 --> 00:08:37,968
<font color="#E5E5E5">and my throughput I mean throughput over</font>

221
00:08:36,009 --> 00:08:40,370
time the blue line

222
00:08:37,969 --> 00:08:42,589
is the baseline open j9 with the in

223
00:08:40,370 --> 00:08:45,680
<font color="#E5E5E5">process yet and the orange</font><font color="#CCCCCC"> line is the</font>

224
00:08:42,589 --> 00:08:48,069
open j9 using jitters of service and as

225
00:08:45,680 --> 00:08:50,540
you can see throughput is about the same

226
00:08:48,069 --> 00:08:52,370
<font color="#CCCCCC">ramp up is a</font><font color="#E5E5E5"> little bit worse because</font><font color="#CCCCCC"> of</font>

227
00:08:50,540 --> 00:08:54,379
<font color="#CCCCCC">the network latency that occurs</font>

228
00:08:52,370 --> 00:08:57,680
naturally<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're communicating over</font>

229
00:08:54,379 --> 00:09:01,100
<font color="#E5E5E5">a network and by ramp up here I mean the</font>

230
00:08:57,680 --> 00:09:04,638
time it takes<font color="#CCCCCC"> to get from</font><font color="#E5E5E5"> start to peak</font>

231
00:09:01,100 --> 00:09:05,959
or steady-state<font color="#E5E5E5"> throughput and so we</font>

232
00:09:04,639 --> 00:09:07,850
<font color="#E5E5E5">don't have to sacrifice peak throughput</font>

233
00:09:05,959 --> 00:09:11,839
and the<font color="#E5E5E5"> network latency is tolerable and</font>

234
00:09:07,850 --> 00:09:13,250
can be<font color="#E5E5E5"> mitigated for optimized next we</font>

235
00:09:11,839 --> 00:09:15,379
<font color="#E5E5E5">look at</font><font color="#CCCCCC"> memory consumption memory</font>

236
00:09:13,250 --> 00:09:18,560
footprint<font color="#E5E5E5"> and here specifically</font><font color="#CCCCCC"> measured</font>

237
00:09:15,379 --> 00:09:21,350
<font color="#E5E5E5">residence set size the blue line again</font>

238
00:09:18,560 --> 00:09:23,029
is<font color="#CCCCCC"> a base line open j9</font><font color="#E5E5E5"> where you see</font><font color="#CCCCCC"> all</font>

239
00:09:21,350 --> 00:09:24,399
the spikes<font color="#E5E5E5"> that occur because of the</font>

240
00:09:23,029 --> 00:09:27,199
compilation<font color="#CCCCCC"> maybe that needs to happen</font>

241
00:09:24,399 --> 00:09:29,120
<font color="#E5E5E5">whereas the orange line is much more</font>

242
00:09:27,199 --> 00:09:32,120
stable because<font color="#E5E5E5"> we don't have the</font>

243
00:09:29,120 --> 00:09:34,160
compilation overhead<font color="#E5E5E5"> all of the memory</font>

244
00:09:32,120 --> 00:09:37,699
<font color="#E5E5E5">is dominated by</font><font color="#CCCCCC"> the application and the</font>

245
00:09:34,160 --> 00:09:39,980
heap<font color="#E5E5E5"> and so what we can take away</font><font color="#CCCCCC"> from</font>

246
00:09:37,699 --> 00:09:41,599
<font color="#E5E5E5">this is that the</font><font color="#CCCCCC"> applicant</font><font color="#E5E5E5"> the user</font>

247
00:09:39,980 --> 00:09:43,819
doesn't need to worry<font color="#E5E5E5"> about the JIT they</font>

248
00:09:41,600 --> 00:09:48,050
can just size their containers<font color="#E5E5E5"> for their</font>

249
00:09:43,819 --> 00:09:49,670
application<font color="#CCCCCC"> and just move on next we ran</font>

250
00:09:48,050 --> 00:09:51,620
<font color="#CCCCCC">throughput in a constrained environment</font>

251
00:09:49,670 --> 00:09:54,740
and by and by this I mean we changed

252
00:09:51,620 --> 00:09:58,100
that near container to run<font color="#E5E5E5"> with</font><font color="#CCCCCC"> only 64</font>

253
00:09:54,740 --> 00:10:00,019
Meg's of RAM and half a CPU<font color="#CCCCCC"> the green</font>

254
00:09:58,100 --> 00:10:03,259
line here<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> baseline open j9 and</font>

255
00:10:00,019 --> 00:10:06,259
the blue line<font color="#E5E5E5"> is open j9 with</font><font color="#CCCCCC"> JIT as a</font>

256
00:10:03,259 --> 00:10:08,000
service<font color="#CCCCCC"> and you can see that the jitter</font>

257
00:10:06,259 --> 00:10:10,250
<font color="#E5E5E5">service run here performs much better</font>

258
00:10:08,000 --> 00:10:12,559
the reason the j9 run<font color="#CCCCCC"> perform so badly</font>

259
00:10:10,250 --> 00:10:15,290
is because<font color="#E5E5E5"> it only has 64 Meg's of RAM</font>

260
00:10:12,559 --> 00:10:17,149
<font color="#E5E5E5">and so as the applications heap fills up</font>

261
00:10:15,290 --> 00:10:18,889
<font color="#E5E5E5">the compiler has less and</font><font color="#CCCCCC"> less memory to</font>

262
00:10:17,149 --> 00:10:20,089
work with to the point where it can't

263
00:10:18,889 --> 00:10:22,160
compile<font color="#CCCCCC"> anything and we're stuck</font>

264
00:10:20,089 --> 00:10:23,209
interpreting<font color="#E5E5E5"> whereas JIT is a service</font>

265
00:10:22,160 --> 00:10:24,949
run doesn't have any<font color="#E5E5E5"> of those problems</font>

266
00:10:23,209 --> 00:10:25,489
<font color="#E5E5E5">because all of the compilation has been</font>

267
00:10:24,949 --> 00:10:28,569
offloaded

268
00:10:25,490 --> 00:10:32,120
it just gets the compiled body and can

269
00:10:28,569 --> 00:10:33,529
move on<font color="#CCCCCC"> we include</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> hotspot</font><font color="#E5E5E5"> here</font>

270
00:10:32,120 --> 00:10:35,300
because we wanted to<font color="#E5E5E5"> verify to ourselves</font>

271
00:10:33,529 --> 00:10:37,699
that open<font color="#CCCCCC"> j9 wasn't just performing</font>

272
00:10:35,300 --> 00:10:39,769
<font color="#CCCCCC">badly it basically just shows what a</font>

273
00:10:37,699 --> 00:10:41,449
tough<font color="#CCCCCC"> environment a constrained</font>

274
00:10:39,769 --> 00:10:44,720
<font color="#E5E5E5">environment like this is for traditional</font>

275
00:10:41,449 --> 00:10:48,740
JVM<font color="#CCCCCC"> if you're curious the spikes are GC</font>

276
00:10:44,720 --> 00:10:50,140
pauses and then finally we ran it to<font color="#E5E5E5"> the</font>

277
00:10:48,740 --> 00:10:53,519
service for IBM<font color="#CCCCCC"> Cloud</font>

278
00:10:50,140 --> 00:10:56,439
which<font color="#E5E5E5"> I referred</font><font color="#CCCCCC"> to as ICP ICP is a</font>

279
00:10:53,519 --> 00:10:58,899
platform for<font color="#E5E5E5"> developing and managing</font>

280
00:10:56,440 --> 00:11:01,410
on-prem<font color="#E5E5E5"> containerized applications and</font>

281
00:10:58,899 --> 00:11:03,579
so we had<font color="#CCCCCC"> for world worker nodes here</font>

282
00:11:01,410 --> 00:11:05,380
<font color="#E5E5E5">one of them was open Jana</font><font color="#CCCCCC"> and with the</font>

283
00:11:03,579 --> 00:11:07,870
in<font color="#E5E5E5"> process chip another one was running</font>

284
00:11:05,380 --> 00:11:09,250
with the remote server<font color="#E5E5E5"> we also had the</font>

285
00:11:07,870 --> 00:11:12,940
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> jet server and then we had</font>

286
00:11:09,250 --> 00:11:17,470
MongoDB<font color="#E5E5E5"> and so here is the performance</font>

287
00:11:12,940 --> 00:11:19,300
we see for those that<font color="#CCCCCC"> run as you can in</font>

288
00:11:17,470 --> 00:11:21,100
the top left we have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> point over time</font>

289
00:11:19,300 --> 00:11:25,390
<font color="#E5E5E5">and again as you</font><font color="#CCCCCC"> can see throughput is a</font>

290
00:11:21,100 --> 00:11:27,640
lot<font color="#CCCCCC"> it's about the same year but ramped</font>

291
00:11:25,390 --> 00:11:29,740
up<font color="#E5E5E5"> is much worse and the reason for</font><font color="#CCCCCC"> that</font>

292
00:11:27,640 --> 00:11:30,699
is unlike<font color="#E5E5E5"> the other experiment where the</font>

293
00:11:29,740 --> 00:11:32,350
two machines<font color="#CCCCCC"> were connected with</font><font color="#E5E5E5"> the</font>

294
00:11:30,700 --> 00:11:35,320
direct Ethernet link<font color="#E5E5E5"> which means that</font>

295
00:11:32,350 --> 00:11:37,570
the<font color="#E5E5E5"> ping time was</font><font color="#CCCCCC"> about 0.2 milliseconds</font>

296
00:11:35,320 --> 00:11:39,519
here<font color="#E5E5E5"> you're completely at the mercy of</font>

297
00:11:37,570 --> 00:11:43,089
the network and so the latency<font color="#CCCCCC"> is much</font>

298
00:11:39,519 --> 00:11:45,010
more obvious in the bottom you see<font color="#E5E5E5"> the</font>

299
00:11:43,089 --> 00:11:46,930
<font color="#E5E5E5">bottom left</font><font color="#CCCCCC"> story you see the memory</font>

300
00:11:45,010 --> 00:11:49,240
<font color="#CCCCCC">usage and again it</font><font color="#E5E5E5"> looks about the same</font>

301
00:11:46,930 --> 00:11:50,609
<font color="#CCCCCC">as the previous slide where there is a</font>

302
00:11:49,240 --> 00:11:53,800
service<font color="#E5E5E5"> line is much smoother and</font>

303
00:11:50,610 --> 00:11:55,180
<font color="#E5E5E5">represents really the heap or whatever</font>

304
00:11:53,800 --> 00:11:58,599
is in<font color="#E5E5E5"> the residence that sides of the</font>

305
00:11:55,180 --> 00:12:00,519
heap<font color="#CCCCCC"> on the top left</font><font color="#E5E5E5"> you see</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU</font>

306
00:11:58,600 --> 00:12:02,800
<font color="#E5E5E5">usage of</font><font color="#CCCCCC"> both the in</font><font color="#E5E5E5"> process yet and the</font>

307
00:12:00,519 --> 00:12:04,540
<font color="#CCCCCC">jitter service client there's a big</font>

308
00:12:02,800 --> 00:12:06,130
spike in<font color="#E5E5E5"> the beginning</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the baseline</font>

309
00:12:04,540 --> 00:12:08,500
<font color="#CCCCCC">because you have all the compilation</font>

310
00:12:06,130 --> 00:12:09,880
<font color="#E5E5E5">occurring</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you don't have that big</font>

311
00:12:08,500 --> 00:12:12,640
spike with the<font color="#E5E5E5"> jitters of service client</font>

312
00:12:09,880 --> 00:12:15,430
<font color="#E5E5E5">you do however have more memory use more</font>

313
00:12:12,640 --> 00:12:17,649
CPU usage then one would expect<font color="#E5E5E5"> and the</font>

314
00:12:15,430 --> 00:12:19,209
reason<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> of all the</font>

315
00:12:17,649 --> 00:12:21,070
network<font color="#CCCCCC"> communication it was kind of a</font>

316
00:12:19,209 --> 00:12:23,739
shock to<font color="#CCCCCC"> us that network communication</font>

317
00:12:21,070 --> 00:12:26,230
took up<font color="#CCCCCC"> that more</font><font color="#E5E5E5"> CPU but it's something</font>

318
00:12:23,740 --> 00:12:28,870
<font color="#E5E5E5">that we're now looking into mitigating</font>

319
00:12:26,230 --> 00:12:31,600
and at the<font color="#E5E5E5"> bottom right</font><font color="#CCCCCC"> you see the CPU</font>

320
00:12:28,870 --> 00:12:33,760
<font color="#E5E5E5">usage of the server which you can see is</font>

321
00:12:31,600 --> 00:12:37,269
more<font color="#E5E5E5"> spread out because one of</font><font color="#CCCCCC"> the</font>

322
00:12:33,760 --> 00:12:39,519
network latency aspect and<font color="#E5E5E5"> it's also</font>

323
00:12:37,269 --> 00:12:41,769
more than<font color="#E5E5E5"> it</font><font color="#CCCCCC"> should be because along</font>

324
00:12:39,519 --> 00:12:45,699
<font color="#E5E5E5">with the compilation it's also suffering</font>

325
00:12:41,769 --> 00:12:48,459
<font color="#CCCCCC">from the network</font><font color="#E5E5E5"> CPU usage problem</font><font color="#CCCCCC"> so</font>

326
00:12:45,699 --> 00:12:51,279
that's<font color="#E5E5E5"> where we are with</font><font color="#CCCCCC"> the jitters of</font>

327
00:12:48,459 --> 00:12:54,339
service model right<font color="#E5E5E5"> now where we're</font>

328
00:12:51,279 --> 00:12:57,450
going with this well first we want<font color="#E5E5E5"> to</font>

329
00:12:54,339 --> 00:12:59,340
now work on sharing compilations between

330
00:12:57,450 --> 00:13:01,260
clients<font color="#E5E5E5"> the prototype either stands</font>

331
00:12:59,340 --> 00:13:02,580
right now is a one-to-one model<font color="#E5E5E5"> where if</font>

332
00:13:01,260 --> 00:13:06,780
you have two<font color="#E5E5E5"> applications and you</font>

333
00:13:02,580 --> 00:13:09,630
connect to the server<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> compile</font>

334
00:13:06,780 --> 00:13:10,709
the<font color="#E5E5E5"> same method twice</font><font color="#CCCCCC"> but that's not</font>

335
00:13:09,630 --> 00:13:12,900
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> needs to</font><font color="#CCCCCC"> be done</font><font color="#E5E5E5"> and</font>

336
00:13:10,710 --> 00:13:14,160
really it may help in a constrained

337
00:13:12,900 --> 00:13:16,939
environment but<font color="#E5E5E5"> you don't get the cost</font>

338
00:13:14,160 --> 00:13:18,900
of the amortization benefits of doing<font color="#CCCCCC"> so</font>

339
00:13:16,940 --> 00:13:20,550
<font color="#CCCCCC">we want to finish your implement</font>

340
00:13:18,900 --> 00:13:23,400
implementing the remaining optimizations

341
00:13:20,550 --> 00:13:26,750
<font color="#CCCCCC">so that the open JIT</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a service run</font>

342
00:13:23,400 --> 00:13:29,550
<font color="#E5E5E5">performs equivalent to the baseline run</font>

343
00:13:26,750 --> 00:13:31,650
<font color="#CCCCCC">we one experimental</font><font color="#E5E5E5"> mixing local or more</font>

344
00:13:29,550 --> 00:13:34,170
compilations<font color="#CCCCCC"> so that as a mitigation</font>

345
00:13:31,650 --> 00:13:36,510
factor for what happens if the network

346
00:13:34,170 --> 00:13:38,219
<font color="#E5E5E5">goes down I mean maybe there's maybe</font>

347
00:13:36,510 --> 00:13:39,600
<font color="#CCCCCC">takes so long or</font><font color="#E5E5E5"> maybe the</font><font color="#CCCCCC"> network at</font>

348
00:13:38,220 --> 00:13:41,520
the server is so bogged down with

349
00:13:39,600 --> 00:13:42,870
requests<font color="#E5E5E5"> you don't want to wait too</font><font color="#CCCCCC"> long</font>

350
00:13:41,520 --> 00:13:46,260
to<font color="#E5E5E5"> get your compiled body maybe it's</font>

351
00:13:42,870 --> 00:13:47,730
<font color="#E5E5E5">better to just compile it locally</font><font color="#CCCCCC"> we</font>

352
00:13:46,260 --> 00:13:51,300
want to improve latency<font color="#CCCCCC"> of course for</font>

353
00:13:47,730 --> 00:13:53,630
the CPU<font color="#E5E5E5"> partly to improve ramp up partly</font>

354
00:13:51,300 --> 00:13:56,160
to deal with the<font color="#E5E5E5"> CPU resources but</font><font color="#CCCCCC"> also</font>

355
00:13:53,630 --> 00:13:58,439
the experiments<font color="#CCCCCC"> that we did</font><font color="#E5E5E5"> before we</font>

356
00:13:56,160 --> 00:14:00,329
ran without<font color="#CCCCCC"> encryption the moment you</font>

357
00:13:58,440 --> 00:14:01,890
enable encryption<font color="#E5E5E5"> has to move prototype</font>

358
00:14:00,330 --> 00:14:03,330
stands right now every<font color="#CCCCCC"> single</font>

359
00:14:01,890 --> 00:14:05,550
compilation<font color="#E5E5E5"> request will do the</font>

360
00:14:03,330 --> 00:14:07,830
handshake which means that<font color="#CCCCCC"> we've reduce</font>

361
00:14:05,550 --> 00:14:09,329
ramp up even more and<font color="#E5E5E5"> so that's another</font>

362
00:14:07,830 --> 00:14:11,520
<font color="#CCCCCC">thing that</font><font color="#E5E5E5"> we want to look into where we</font>

363
00:14:09,330 --> 00:14:12,960
can try and<font color="#E5E5E5"> maybe cache the the</font>

364
00:14:11,520 --> 00:14:13,980
handshake once it's<font color="#E5E5E5"> done so that</font><font color="#CCCCCC"> we</font>

365
00:14:12,960 --> 00:14:15,600
don't<font color="#E5E5E5"> have to keep doing it over and</font>

366
00:14:13,980 --> 00:14:18,870
<font color="#CCCCCC">over again once we've established a</font>

367
00:14:15,600 --> 00:14:20,370
connection<font color="#E5E5E5"> that we trust and finally we</font>

368
00:14:18,870 --> 00:14:22,950
want<font color="#CCCCCC"> to merge this back into</font><font color="#E5E5E5"> the open</font>

369
00:14:20,370 --> 00:14:25,350
<font color="#CCCCCC">GaN master</font><font color="#E5E5E5"> currently it sits in the</font>

370
00:14:22,950 --> 00:14:27,390
clips open j9 but in its own branch<font color="#CCCCCC"> and</font>

371
00:14:25,350 --> 00:14:29,340
a lot of<font color="#CCCCCC"> work has been</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> to sort of</font>

372
00:14:27,390 --> 00:14:31,170
separate it<font color="#E5E5E5"> and and have it run</font>

373
00:14:29,340 --> 00:14:32,930
independently<font color="#CCCCCC"> but eventually we do want</font>

374
00:14:31,170 --> 00:14:37,469
to<font color="#E5E5E5"> move it back so</font><font color="#CCCCCC"> that it's one big</font>

375
00:14:32,930 --> 00:14:40,050
<font color="#E5E5E5">happy project</font><font color="#CCCCCC"> here are some links</font><font color="#E5E5E5"> that's</font>

376
00:14:37,470 --> 00:14:41,730
promised<font color="#E5E5E5"> the top two links are the</font>

377
00:14:40,050 --> 00:14:44,310
source code<font color="#CCCCCC"> you can get and take a look</font>

378
00:14:41,730 --> 00:14:48,030
at it is<font color="#E5E5E5"> very much active development</font>

379
00:14:44,310 --> 00:14:50,010
<font color="#E5E5E5">and and and an area where we're more</font>

380
00:14:48,030 --> 00:14:51,600
than happy<font color="#CCCCCC"> to get contributions and</font>

381
00:14:50,010 --> 00:14:55,110
suggestions or whatever ideas<font color="#E5E5E5"> you might</font>

382
00:14:51,600 --> 00:14:57,870
<font color="#E5E5E5">have</font><font color="#CCCCCC"> feel free to messages on the open</font>

383
00:14:55,110 --> 00:14:59,280
j9<font color="#CCCCCC"> slide channel I included the open</font><font color="#E5E5E5"> j9</font>

384
00:14:57,870 --> 00:15:01,290
<font color="#CCCCCC">websites we</font><font color="#E5E5E5"> can get instructions on how</font>

385
00:14:59,280 --> 00:15:03,380
<font color="#E5E5E5">to join the slack</font><font color="#CCCCCC"> Channel</font><font color="#E5E5E5"> but the link</font>

386
00:15:01,290 --> 00:15:07,410
is way too big<font color="#CCCCCC"> to put here</font>

387
00:15:03,380 --> 00:15:10,470
and finally if you're interested in demo

388
00:15:07,410 --> 00:15:11,319
which I was not brave<font color="#E5E5E5"> enough to do one</font>

389
00:15:10,470 --> 00:15:13,600
of<font color="#CCCCCC"> my</font><font color="#E5E5E5"> co-workers did</font>

390
00:15:11,320 --> 00:15:15,760
<font color="#CCCCCC">my cold one and so you can follow the</font>

391
00:15:13,600 --> 00:15:19,030
youtube<font color="#CCCCCC"> link and take a look at how all</font>

392
00:15:15,760 --> 00:15:20,650
of this works<font color="#CCCCCC"> and if you have any other</font>

393
00:15:19,030 --> 00:15:22,060
questions feel<font color="#E5E5E5"> free to ping me or the</font>

394
00:15:20,650 --> 00:15:25,449
open tonight<font color="#CCCCCC"> introduction all because</font>

395
00:15:22,060 --> 00:15:27,430
<font color="#E5E5E5">people are actively listening that's it</font>

396
00:15:25,450 --> 00:15:40,780
thank<font color="#E5E5E5"> you for your time I'll take any</font>

397
00:15:27,430 --> 00:15:43,719
<font color="#CCCCCC">questions if you haven't so thanks those</font>

398
00:15:40,780 --> 00:15:46,600
are<font color="#E5E5E5"> interesting so how</font><font color="#CCCCCC"> many requests do</font>

399
00:15:43,720 --> 00:15:49,690
you back calls to do usually<font color="#E5E5E5"> for a</font>

400
00:15:46,600 --> 00:15:51,190
compilation<font color="#E5E5E5"> so because I don't directly</font>

401
00:15:49,690 --> 00:15:53,770
work on this<font color="#E5E5E5"> I don't know the exact</font>

402
00:15:51,190 --> 00:15:55,960
numbers<font color="#E5E5E5"> I do know it's a lot and they</font>

403
00:15:53,770 --> 00:15:57,400
they have been<font color="#CCCCCC"> working on reducing it</font>

404
00:15:55,960 --> 00:16:00,670
quite a bit<font color="#E5E5E5"> cuz in the beginning it was</font>

405
00:15:57,400 --> 00:16:02,199
<font color="#CCCCCC">just ridiculous I don't have exact</font>

406
00:16:00,670 --> 00:16:04,900
numbers<font color="#E5E5E5"> though but if you if you</font><font color="#CCCCCC"> either</font>

407
00:16:02,200 --> 00:16:06,430
email me<font color="#E5E5E5"> or</font><font color="#CCCCCC"> you your message service</font>

408
00:16:04,900 --> 00:16:08,319
like<font color="#E5E5E5"> channel the people who are working</font>

409
00:16:06,430 --> 00:16:10,569
will either email me<font color="#CCCCCC"> and I'll forward</font>

410
00:16:08,320 --> 00:16:12,130
the<font color="#E5E5E5"> request</font><font color="#CCCCCC"> or message on</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> nights</font>

411
00:16:10,570 --> 00:16:16,090
like and they'll have answers<font color="#CCCCCC"> for you I</font>

412
00:16:12,130 --> 00:16:18,310
just<font color="#E5E5E5"> I don't have it often and could you</font>

413
00:16:16,090 --> 00:16:20,320
give some<font color="#E5E5E5"> indication</font><font color="#CCCCCC"> of what data you're</font>

414
00:16:18,310 --> 00:16:22,150
passing in the initial<font color="#E5E5E5"> request and what</font>

415
00:16:20,320 --> 00:16:25,180
type of day to you<font color="#E5E5E5"> yeah I've got in the</font>

416
00:16:22,150 --> 00:16:28,030
back<font color="#CCCCCC"> request so my obviously all the</font>

417
00:16:25,180 --> 00:16:31,780
details but<font color="#CCCCCC"> we do pass</font><font color="#E5E5E5"> the byte codes</font>

418
00:16:28,030 --> 00:16:33,250
obviously as well as some other I'm<font color="#E5E5E5"> not</font>

419
00:16:31,780 --> 00:16:35,050
sure in the<font color="#E5E5E5"> beginning what metadata said</font>

420
00:16:33,250 --> 00:16:36,940
for sure<font color="#E5E5E5"> the byte codes and I think I</font>

421
00:16:35,050 --> 00:16:38,439
think<font color="#CCCCCC"> the byte codes of all the entire</font>

422
00:16:36,940 --> 00:16:41,140
class<font color="#E5E5E5"> the method just</font><font color="#CCCCCC"> in case it needs</font>

423
00:16:38,440 --> 00:16:43,270
<font color="#E5E5E5">to</font><font color="#CCCCCC"> inline other things when we send</font><font color="#E5E5E5"> it</font>

424
00:16:41,140 --> 00:16:46,689
<font color="#CCCCCC">back we send metadata about</font><font color="#E5E5E5"> how to</font>

425
00:16:43,270 --> 00:16:49,390
relocate<font color="#CCCCCC"> it in the new space as well</font><font color="#E5E5E5"> as</font>

426
00:16:46,690 --> 00:16:50,770
stack maps in line table<font color="#E5E5E5"> GC maps</font><font color="#CCCCCC"> all of</font>

427
00:16:49,390 --> 00:16:52,540
that information<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> needs so that</font>

428
00:16:50,770 --> 00:16:54,460
it can install it properly<font color="#E5E5E5"> and do all</font>

429
00:16:52,540 --> 00:16:56,079
the right<font color="#E5E5E5"> when the GC occurs it knows</font>

430
00:16:54,460 --> 00:16:57,460
what's going<font color="#E5E5E5"> on and whatnot</font><font color="#CCCCCC"> so that's</font>

431
00:16:56,080 --> 00:17:02,410
the<font color="#CCCCCC"> information we have to send</font><font color="#E5E5E5"> back to</font>

432
00:16:57,460 --> 00:17:05,800
the client<font color="#E5E5E5"> so profiling data we request</font>

433
00:17:02,410 --> 00:17:07,359
<font color="#E5E5E5">I believe in between so the profiling</font>

434
00:17:05,800 --> 00:17:09,520
happens on the<font color="#CCCCCC"> client and if we need</font>

435
00:17:07,359 --> 00:17:10,990
profiling<font color="#CCCCCC"> data we just</font><font color="#E5E5E5"> sort of normally</font>

436
00:17:09,520 --> 00:17:12,490
we have<font color="#E5E5E5"> an eye profiler</font><font color="#CCCCCC"> we'll just say I</font>

437
00:17:10,990 --> 00:17:15,730
<font color="#CCCCCC">profiler give me a request</font><font color="#E5E5E5"> but now</font>

438
00:17:12,490 --> 00:17:17,500
that's<font color="#E5E5E5"> been separated over an API so</font>

439
00:17:15,730 --> 00:17:18,849
we'll just say give me<font color="#CCCCCC"> eye profiler data</font>

440
00:17:17,500 --> 00:17:19,810
on the client<font color="#CCCCCC"> because it's the compiler</font>

441
00:17:18,849 --> 00:17:22,280
doesn't<font color="#E5E5E5"> know you know it just</font><font color="#CCCCCC"> says</font><font color="#E5E5E5"> I</font>

442
00:17:19,810 --> 00:17:25,310
<font color="#CCCCCC">prefer our data goes over the network</font>

443
00:17:22,280 --> 00:17:26,780
and gives it back<font color="#E5E5E5"> and it does so with</font>

444
00:17:25,310 --> 00:17:30,320
<font color="#E5E5E5">protobuf so that</font><font color="#CCCCCC"> it can</font><font color="#E5E5E5"> maintain the</font>

445
00:17:26,780 --> 00:17:31,879
structures and<font color="#E5E5E5"> whatnot</font><font color="#CCCCCC"> and if you look</font>

446
00:17:30,320 --> 00:17:34,850
at<font color="#E5E5E5"> security issues</font><font color="#CCCCCC"> for the compiler</font>

447
00:17:31,880 --> 00:17:37,340
<font color="#E5E5E5">itself because now the code can see her</font>

448
00:17:34,850 --> 00:17:39,409
whenever of<font color="#E5E5E5"> overflows in the compiler</font>

449
00:17:37,340 --> 00:17:41,649
<font color="#CCCCCC">yeah so I mean security is something</font>

450
00:17:39,410 --> 00:17:43,700
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> obviously going</font><font color="#CCCCCC"> to be a concern</font>

451
00:17:41,650 --> 00:17:48,020
<font color="#E5E5E5">right</font><font color="#CCCCCC"> now it's</font><font color="#E5E5E5"> still very much</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

452
00:17:43,700 --> 00:17:49,460
prototyping stage<font color="#E5E5E5"> we've sort of looked</font>

453
00:17:48,020 --> 00:17:50,780
into<font color="#CCCCCC"> the for the security of just</font><font color="#E5E5E5"> the</font>

454
00:17:49,460 --> 00:17:52,010
communication<font color="#CCCCCC"> so you don't have any</font>

455
00:17:50,780 --> 00:17:54,040
problems there but in<font color="#E5E5E5"> terms of the</font>

456
00:17:52,010 --> 00:17:56,240
server the compiler<font color="#CCCCCC"> you write there's</font>

457
00:17:54,040 --> 00:17:58,700
there's gonna have to be<font color="#CCCCCC"> eventually in</font>

458
00:17:56,240 --> 00:18:00,740
you know more time<font color="#CCCCCC"> spent into making</font>

459
00:17:58,700 --> 00:18:02,750
<font color="#E5E5E5">sure that we are mitigating every single</font>

460
00:18:00,740 --> 00:18:05,240
possible because<font color="#E5E5E5"> we don't want to send</font>

461
00:18:02,750 --> 00:18:06,530
<font color="#E5E5E5">obviously code that can now disrupt the</font>

462
00:18:05,240 --> 00:18:09,020
server<font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> our byte codes or whatever</font>

463
00:18:06,530 --> 00:18:11,300
<font color="#CCCCCC">you have to have some some notion of</font>

464
00:18:09,020 --> 00:18:13,400
<font color="#E5E5E5">this the client is this is a trusted</font>

465
00:18:11,300 --> 00:18:15,230
client and but obviously<font color="#CCCCCC"> it's still</font>

466
00:18:13,400 --> 00:18:17,270
prototyping so we<font color="#E5E5E5"> haven't got that far</font>

467
00:18:15,230 --> 00:18:19,040
<font color="#E5E5E5">into the specifics</font><font color="#CCCCCC"> but you're</font><font color="#E5E5E5"> right</font>

468
00:18:17,270 --> 00:18:21,440
security<font color="#E5E5E5"> is still very</font><font color="#CCCCCC"> much a concern</font>

469
00:18:19,040 --> 00:18:24,860
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> not gonna go anywhere especially</font>

470
00:18:21,440 --> 00:18:27,770
<font color="#CCCCCC">when you go distributed I have two quick</font>

471
00:18:24,860 --> 00:18:29,719
<font color="#CCCCCC">questions here</font><font color="#E5E5E5"> one is have you</font>

472
00:18:27,770 --> 00:18:31,310
considered the use case of<font color="#E5E5E5"> using it</font>

473
00:18:29,720 --> 00:18:33,380
locally because<font color="#E5E5E5"> it seems like you're</font>

474
00:18:31,310 --> 00:18:35,300
<font color="#CCCCCC">very</font><font color="#E5E5E5"> much focusing on over the network</font>

475
00:18:33,380 --> 00:18:37,250
but it seems to me<font color="#CCCCCC"> that with the</font><font color="#E5E5E5"> current</font>

476
00:18:35,300 --> 00:18:38,930
<font color="#E5E5E5">way of having containers if you have</font>

477
00:18:37,250 --> 00:18:41,510
like<font color="#E5E5E5"> one container which</font><font color="#CCCCCC"> is the compiler</font>

478
00:18:38,930 --> 00:18:43,100
<font color="#E5E5E5">and then many containers so</font><font color="#CCCCCC"> if vm's you</font>

479
00:18:41,510 --> 00:18:45,980
could share them<font color="#E5E5E5"> for you definitely</font>

480
00:18:43,100 --> 00:18:47,840
could it's talking over the<font color="#CCCCCC"> network but</font>

481
00:18:45,980 --> 00:18:49,880
if you defines<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the whole</font><font color="#E5E5E5"> idea was</font>

482
00:18:47,840 --> 00:18:51,800
remove it<font color="#E5E5E5"> out of process</font><font color="#CCCCCC"> so that way</font>

483
00:18:49,880 --> 00:18:54,440
you're right you<font color="#E5E5E5"> could just have if you</font>

484
00:18:51,800 --> 00:18:56,330
change the communication protocol you

485
00:18:54,440 --> 00:19:00,190
could easily have it<font color="#CCCCCC"> so that yeah you</font>

486
00:18:56,330 --> 00:19:04,250
have<font color="#CCCCCC"> one container</font><font color="#E5E5E5"> and then talk over</font>

487
00:19:00,190 --> 00:19:06,290
talk to the other ones<font color="#CCCCCC"> I guess this is a</font>

488
00:19:04,250 --> 00:19:07,640
more general<font color="#CCCCCC"> problem of</font><font color="#E5E5E5"> like if</font><font color="#CCCCCC"> your if</font>

489
00:19:06,290 --> 00:19:09,500
<font color="#CCCCCC">your</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> your containers are running on</font>

490
00:19:07,640 --> 00:19:11,000
one<font color="#CCCCCC"> provision to</font><font color="#E5E5E5"> set up resources and</font>

491
00:19:09,500 --> 00:19:13,400
maybe it's<font color="#E5E5E5"> better to move it somewhere</font>

492
00:19:11,000 --> 00:19:13,730
<font color="#CCCCCC">else</font><font color="#E5E5E5"> but you definitely could do it that</font>

493
00:19:13,400 --> 00:19:15,800
<font color="#E5E5E5">way too</font>

494
00:19:13,730 --> 00:19:17,420
yes and my second question is<font color="#E5E5E5"> now that</font>

495
00:19:15,800 --> 00:19:21,110
<font color="#CCCCCC">you have the compiler completely</font>

496
00:19:17,420 --> 00:19:23,180
separate<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the VM if you can see that</font>

497
00:19:21,110 --> 00:19:25,070
playing with<font color="#E5E5E5"> like changing the compiler</font>

498
00:19:23,180 --> 00:19:28,760
a lot of plugging in other compilers

499
00:19:25,070 --> 00:19:30,530
<font color="#CCCCCC">know that it's quite separate</font><font color="#E5E5E5"> so because</font>

500
00:19:28,760 --> 00:19:34,160
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is done in open j9 and the compiler</font>

501
00:19:30,530 --> 00:19:36,830
JVM interface is<font color="#E5E5E5"> quite tight it would</font>

502
00:19:34,160 --> 00:19:38,800
<font color="#E5E5E5">to re-implemented the you could do as</font>

503
00:19:36,830 --> 00:19:41,270
long<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> implement the I guess the</font>

504
00:19:38,800 --> 00:19:43,340
<font color="#E5E5E5">JVM jet interface levels</font>

505
00:19:41,270 --> 00:19:44,510
<font color="#E5E5E5">I suppose theoretically you could try</font>

506
00:19:43,340 --> 00:19:46,100
and plug<font color="#E5E5E5"> in a different</font><font color="#CCCCCC"> compiler if you</font>

507
00:19:44,510 --> 00:19:49,400
had it it's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> you would need to talk</font>

508
00:19:46,100 --> 00:19:51,230
to the j9<font color="#E5E5E5"> to</font><font color="#CCCCCC"> J open j9</font><font color="#E5E5E5"> BM in the</font><font color="#CCCCCC"> same</font>

509
00:19:49,400 --> 00:19:53,390
way<font color="#E5E5E5"> and know how to interpret the data</font>

510
00:19:51,230 --> 00:19:58,490
in the<font color="#CCCCCC"> same way but again theoretically</font>

511
00:19:53,390 --> 00:20:01,010
<font color="#E5E5E5">yes you're right</font><font color="#CCCCCC"> it could be</font><font color="#E5E5E5"> done have</font>

512
00:19:58,490 --> 00:20:02,900
you<font color="#CCCCCC"> looked at check rec or and are you</font>

513
00:20:01,010 --> 00:20:06,800
signing the codes<font color="#E5E5E5"> that you are sending</font>

514
00:20:02,900 --> 00:20:11,210
of as a network right<font color="#E5E5E5"> now I don't know</font>

515
00:20:06,800 --> 00:20:13,820
if<font color="#E5E5E5"> I'm actually not sure about the</font>

516
00:20:11,210 --> 00:20:16,580
answer<font color="#E5E5E5"> for that because it's still very</font>

517
00:20:13,820 --> 00:20:17,929
<font color="#CCCCCC">much in a</font><font color="#E5E5E5"> prototype space we just</font><font color="#CCCCCC"> sort</font>

518
00:20:16,580 --> 00:20:20,149
of have a network call and I guess the

519
00:20:17,930 --> 00:20:23,600
network call could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> augmented to do</font>

520
00:20:20,150 --> 00:20:25,700
what you're saying but at the moment<font color="#E5E5E5"> we</font>

521
00:20:23,600 --> 00:20:27,709
don't we're still trying to get it you

522
00:20:25,700 --> 00:20:29,330
know going to<font color="#E5E5E5"> a more to a better</font>

523
00:20:27,710 --> 00:20:32,540
<font color="#E5E5E5">standard than it is right now we're</font>

524
00:20:29,330 --> 00:20:34,159
still improving<font color="#E5E5E5"> it so but if you want a</font>

525
00:20:32,540 --> 00:20:36,379
proper<font color="#CCCCCC"> answer yeah I</font><font color="#E5E5E5"> just email</font><font color="#CCCCCC"> me or</font>

526
00:20:34,160 --> 00:20:37,670
asked us to<font color="#E5E5E5"> slack channel and the people</font>

527
00:20:36,380 --> 00:20:40,270
who know more about it will<font color="#E5E5E5"> be able to</font>

528
00:20:37,670 --> 00:20:40,270
answer<font color="#E5E5E5"> you for sure</font>

529
00:20:46,860 --> 00:20:58,179
restraining<font color="#E5E5E5"> this but it'd</font><font color="#CCCCCC"> be a make any</font>

530
00:20:56,350 --> 00:21:00,820
sense to actually<font color="#CCCCCC"> can replace the</font>

531
00:20:58,180 --> 00:21:03,400
<font color="#CCCCCC">on-demand</font><font color="#E5E5E5"> compilation which kinda a head</font>

532
00:21:00,820 --> 00:21:04,960
of time<font color="#CCCCCC"> compilation because</font><font color="#E5E5E5"> then when</font>

533
00:21:03,400 --> 00:21:07,180
you start the app you technically

534
00:21:04,960 --> 00:21:10,870
consent like the whole application<font color="#E5E5E5"> to</font>

535
00:21:07,180 --> 00:21:13,150
the clouds<font color="#CCCCCC"> jet</font><font color="#E5E5E5"> compiled and yeah so I</font>

536
00:21:10,870 --> 00:21:15,459
mean<font color="#E5E5E5"> we</font><font color="#CCCCCC"> open tonight</font><font color="#E5E5E5"> does have a OTF row</font>

537
00:21:13,150 --> 00:21:20,080
<font color="#CCCCCC">but one of</font><font color="#E5E5E5"> the big problems</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> ot is</font>

538
00:21:15,460 --> 00:21:23,860
if you<font color="#E5E5E5"> specialize too much you lose the</font>

539
00:21:20,080 --> 00:21:26,050
ability to share<font color="#CCCCCC"> meaning that it's it's</font>

540
00:21:23,860 --> 00:21:27,909
very<font color="#E5E5E5"> like all you need is you know one</font>

541
00:21:26,050 --> 00:21:29,230
<font color="#E5E5E5">they say you profile so you got</font>

542
00:21:27,910 --> 00:21:30,940
profiling information<font color="#E5E5E5"> in one drawn and</font>

543
00:21:29,230 --> 00:21:33,130
<font color="#CCCCCC">that happened</font><font color="#E5E5E5"> to work it may</font><font color="#CCCCCC"> not work</font><font color="#E5E5E5"> in</font>

544
00:21:30,940 --> 00:21:34,720
<font color="#E5E5E5">the second run in which case you can't</font>

545
00:21:33,130 --> 00:21:37,930
share that<font color="#E5E5E5"> code</font><font color="#CCCCCC"> anymore and so but</font><font color="#E5E5E5"> this</font>

546
00:21:34,720 --> 00:21:39,400
one you you get<font color="#E5E5E5"> a</font><font color="#CCCCCC"> one-to-one mapping for</font>

547
00:21:37,930 --> 00:21:40,690
each one now of course when<font color="#CCCCCC"> it comes</font>

548
00:21:39,400 --> 00:21:41,980
<font color="#CCCCCC">time to share code you can have</font><font color="#E5E5E5"> to deal</font>

549
00:21:40,690 --> 00:21:44,230
<font color="#CCCCCC">with the same problems where</font><font color="#E5E5E5"> you need to</font>

550
00:21:41,980 --> 00:21:50,260
<font color="#E5E5E5">find you know what is the best answer</font>

551
00:21:44,230 --> 00:21:52,720
<font color="#CCCCCC">but but that's that that is that is the</font>

552
00:21:50,260 --> 00:21:54,730
other<font color="#E5E5E5"> area of you know what you can do</font>

553
00:21:52,720 --> 00:21:56,200
in this case this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> again a general</font>

554
00:21:54,730 --> 00:21:57,640
problem for when you have constrain

555
00:21:56,200 --> 00:22:01,170
environments for example<font color="#E5E5E5"> where you</font><font color="#CCCCCC"> maybe</font>

556
00:21:57,640 --> 00:22:03,340
you you want to have all your<font color="#E5E5E5"> services</font>

557
00:22:01,170 --> 00:22:04,780
<font color="#CCCCCC">the goop you can't afford</font><font color="#E5E5E5"> to sort of</font>

558
00:22:03,340 --> 00:22:06,429
pre-populated cash on the machines that

559
00:22:04,780 --> 00:22:08,200
<font color="#E5E5E5">are</font><font color="#CCCCCC"> running the service</font><font color="#E5E5E5"> so maybe it's</font>

560
00:22:06,430 --> 00:22:09,640
just<font color="#E5E5E5"> it makes</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> sense to or you're</font>

561
00:22:08,200 --> 00:22:11,980
running<font color="#CCCCCC"> in Annapolis</font><font color="#E5E5E5"> or in a cloud</font>

562
00:22:09,640 --> 00:22:13,360
<font color="#CCCCCC">environment where you don't know where</font>

563
00:22:11,980 --> 00:22:17,100
these<font color="#E5E5E5"> things are and where the cash is</font>

564
00:22:13,360 --> 00:22:18,909
<font color="#CCCCCC">gonna sit you just have machines</font>

565
00:22:17,100 --> 00:22:21,219
generated for you just like<font color="#E5E5E5"> they just</font>

566
00:22:18,910 --> 00:22:22,600
popped up<font color="#E5E5E5"> so in that case it's harder</font>

567
00:22:21,220 --> 00:22:26,110
for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to say I'm gonna put the cash</font>

568
00:22:22,600 --> 00:22:27,580
over here it's it becomes<font color="#E5E5E5"> a it</font><font color="#CCCCCC"> becomes a</font>

569
00:22:26,110 --> 00:22:29,500
problem almost what's all<font color="#CCCCCC"> over here</font>

570
00:22:27,580 --> 00:22:31,510
<font color="#E5E5E5">which have a have a thing that'll do it</font>

571
00:22:29,500 --> 00:22:33,160
for<font color="#E5E5E5"> you and at the end of the day do</font>

572
00:22:31,510 --> 00:22:34,360
<font color="#E5E5E5">this with the sharing there's you know</font>

573
00:22:33,160 --> 00:22:36,760
<font color="#E5E5E5">you can share it</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> client side you</font>

574
00:22:34,360 --> 00:22:38,229
<font color="#E5E5E5">can share on the server side</font><font color="#CCCCCC"> it's what</font>

575
00:22:36,760 --> 00:22:40,000
what we're gonna do is still an<font color="#E5E5E5"> open</font>

576
00:22:38,230 --> 00:22:41,620
question and I mean suggestions<font color="#CCCCCC"> you have</font>

577
00:22:40,000 --> 00:22:43,900
<font color="#CCCCCC">are more than</font><font color="#E5E5E5"> welcome including if you</font>

578
00:22:41,620 --> 00:22:45,600
<font color="#E5E5E5">want to you know if you have any ideas</font>

579
00:22:43,900 --> 00:22:48,430
of whatever<font color="#E5E5E5"> we're more than happy to</font>

580
00:22:45,600 --> 00:22:50,850
listen to<font color="#CCCCCC"> you as I'm</font><font color="#E5E5E5"> thinking of what</font>

581
00:22:48,430 --> 00:22:50,850
you<font color="#E5E5E5"> have to say</font>

582
00:22:53,060 --> 00:23:04,629
right<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

583
00:22:56,240 --> 00:23:04,630
[Applause]

