1
00:00:04,930 --> 00:00:07,979
[Music]

2
00:00:07,990 --> 00:00:12,830
so this is the reason<font color="#CCCCCC"> what we know the</font>

3
00:00:11,090 --> 00:00:16,209
story<font color="#E5E5E5"> the background how images are</font>

4
00:00:12,830 --> 00:00:16,209
acquired images

5
00:00:25,090 --> 00:00:34,120
better<font color="#CCCCCC"> alright it's only for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> alright</font>

6
00:00:31,140 --> 00:00:35,920
<font color="#E5E5E5">yeah so I will also talk about iterative</font>

7
00:00:34,120 --> 00:00:38,680
reconstruction because<font color="#E5E5E5"> this is very</font>

8
00:00:35,920 --> 00:00:41,020
performance demanding so<font color="#E5E5E5"> in earlier days</font>

9
00:00:38,680 --> 00:00:43,660
it was<font color="#E5E5E5"> yeah it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font>

10
00:00:41,020 --> 00:00:45,160
possible to do it in MATLAB<font color="#E5E5E5"> and I can</font>

11
00:00:43,660 --> 00:00:47,800
tell you when I<font color="#E5E5E5"> started 12 years ago</font>

12
00:00:45,160 --> 00:00:50,050
<font color="#E5E5E5">what the performance of MATLAB was but</font>

13
00:00:47,800 --> 00:00:52,930
when<font color="#CCCCCC"> CT started there were</font><font color="#E5E5E5"> really</font>

14
00:00:50,050 --> 00:00:54,339
challenges in general<font color="#E5E5E5"> then I will also</font>

15
00:00:52,930 --> 00:00:59,129
talk about<font color="#CCCCCC"> challenges with the.net</font>

16
00:00:54,339 --> 00:01:01,510
framework or<font color="#CCCCCC"> offer with the c-sharp</font><font color="#E5E5E5"> and</font>

17
00:00:59,129 --> 00:01:03,040
for performance reason we also use

18
00:01:01,510 --> 00:01:06,039
technologies<font color="#CCCCCC"> like the math kernal</font>

19
00:01:03,040 --> 00:01:08,860
library<font color="#CCCCCC"> cuda</font><font color="#E5E5E5"> and we're also</font>

20
00:01:06,040 --> 00:01:10,900
investigating<font color="#E5E5E5"> or checking what</font><font color="#CCCCCC"> balkan</font>

21
00:01:08,860 --> 00:01:14,170
can do because cuda has a little<font color="#E5E5E5"> bit of</font>

22
00:01:10,900 --> 00:01:15,850
<font color="#E5E5E5">problem in general so if it's</font><font color="#CCCCCC"> heard in</font>

23
00:01:14,170 --> 00:01:18,759
background<font color="#CCCCCC"> I don't want to go through</font>

24
00:01:15,850 --> 00:01:22,059
the whole<font color="#E5E5E5"> table it all started 1895 with</font>

25
00:01:18,759 --> 00:01:24,130
the discovery of<font color="#E5E5E5"> x-rays</font><font color="#CCCCCC"> it was a pretty</font>

26
00:01:22,060 --> 00:01:28,600
interesting<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> because this finally</font>

27
00:01:24,130 --> 00:01:31,359
let very fast<font color="#E5E5E5"> to technical inventions</font>

28
00:01:28,600 --> 00:01:33,880
<font color="#CCCCCC">like what they scanned</font><font color="#E5E5E5"> is they scanned</font>

29
00:01:31,359 --> 00:01:37,658
<font color="#E5E5E5">your feet to just measure your shoes and</font>

30
00:01:33,880 --> 00:01:39,310
they really get<font color="#E5E5E5"> ya rid of this</font>

31
00:01:37,659 --> 00:01:41,469
<font color="#E5E5E5">technology</font><font color="#CCCCCC"> very early because a lot of</font>

32
00:01:39,310 --> 00:01:43,569
<font color="#CCCCCC">x-ray</font><font color="#E5E5E5"> because we're talking about x-ray</font>

33
00:01:41,469 --> 00:01:45,068
radiation<font color="#E5E5E5"> this is causing trouble of</font>

34
00:01:43,569 --> 00:01:47,200
course<font color="#E5E5E5"> if you simply measure your legs</font>

35
00:01:45,069 --> 00:01:50,710
or<font color="#E5E5E5"> your feet just to measure your shoe</font>

36
00:01:47,200 --> 00:01:53,130
size yeah another approach<font color="#E5E5E5"> or another</font>

37
00:01:50,710 --> 00:01:56,740
invention discovery was<font color="#CCCCCC"> Johann Rodham</font>

38
00:01:53,130 --> 00:01:58,449
<font color="#CCCCCC">Austrian researcher who discovered the</font>

39
00:01:56,740 --> 00:01:59,859
rattle inversion formula<font color="#CCCCCC"> I don't know if</font>

40
00:01:58,450 --> 00:02:03,490
you have<font color="#E5E5E5"> something if you know about</font>

41
00:01:59,859 --> 00:02:05,530
<font color="#CCCCCC">this we will</font><font color="#E5E5E5"> see in the technology or</font>

42
00:02:03,490 --> 00:02:08,859
the<font color="#CCCCCC"> method milk mathematical backgrounds</font>

43
00:02:05,530 --> 00:02:12,100
of<font color="#E5E5E5"> back projection so in the end this</font><font color="#CCCCCC"> is</font>

44
00:02:08,860 --> 00:02:13,330
pretty simple<font color="#E5E5E5"> he says every raid that</font>

45
00:02:12,100 --> 00:02:16,569
comes from every angle

46
00:02:13,330 --> 00:02:19,000
if you inverse<font color="#E5E5E5"> this process you</font><font color="#CCCCCC"> can</font>

47
00:02:16,569 --> 00:02:20,739
recover<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original image so</font><font color="#E5E5E5"> that's</font>

48
00:02:19,000 --> 00:02:23,350
<font color="#E5E5E5">what inside your body</font><font color="#CCCCCC"> you scan with</font>

49
00:02:20,740 --> 00:02:25,510
<font color="#E5E5E5">x-rays you see everything that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> in the</font>

50
00:02:23,350 --> 00:02:28,150
x-rays projected on a single line as you

51
00:02:25,510 --> 00:02:30,819
know<font color="#E5E5E5"> from a chest x-ray from your doctor</font>

52
00:02:28,150 --> 00:02:34,270
and if you invert this<font color="#E5E5E5"> from many</font>

53
00:02:30,819 --> 00:02:39,850
projections<font color="#E5E5E5"> you can recover your</font><font color="#CCCCCC"> image</font>

54
00:02:34,270 --> 00:02:43,030
yeah 1936<font color="#CCCCCC"> this was the time where there</font>

55
00:02:39,850 --> 00:02:45,730
were a lot of<font color="#E5E5E5"> colors</font><font color="#CCCCCC"> there were the</font>

56
00:02:43,030 --> 00:02:48,010
hippies<font color="#E5E5E5"> and there was EMI and the</font>

57
00:02:45,730 --> 00:02:51,340
Beatles<font color="#E5E5E5"> and obviously they earned so</font>

58
00:02:48,010 --> 00:02:54,519
much money<font color="#CCCCCC"> with the Beatles records that</font>

59
00:02:51,340 --> 00:02:58,930
<font color="#E5E5E5">they were able to fund an electrical</font>

60
00:02:54,520 --> 00:03:00,520
engineer<font color="#CCCCCC"> sir</font><font color="#E5E5E5"> code for a</font><font color="#CCCCCC"> Hounsfield</font><font color="#E5E5E5"> there</font>

61
00:02:58,930 --> 00:03:02,290
were<font color="#E5E5E5"> fun</font><font color="#CCCCCC"> yeah they could they were able</font>

62
00:03:00,520 --> 00:03:05,230
<font color="#E5E5E5">to fund him to doing his research</font>

63
00:03:02,290 --> 00:03:08,799
research<font color="#E5E5E5"> here just on his</font><font color="#CCCCCC"> ami deck this</font>

64
00:03:05,230 --> 00:03:10,660
was simple computer at<font color="#E5E5E5"> the time and he</font>

65
00:03:08,800 --> 00:03:13,560
also did<font color="#CCCCCC"> some research on the first CT</font>

66
00:03:10,660 --> 00:03:16,390
<font color="#E5E5E5">system so this</font><font color="#CCCCCC"> is the first CT system</font>

67
00:03:13,560 --> 00:03:18,580
with<font color="#E5E5E5"> wood and</font><font color="#CCCCCC"> a little bit of</font><font color="#E5E5E5"> steel and</font>

68
00:03:16,390 --> 00:03:21,100
an x-ray sauce and some detector and

69
00:03:18,580 --> 00:03:24,520
this<font color="#E5E5E5"> is a reconstructed image so this is</font>

70
00:03:21,100 --> 00:03:25,810
a brain so some of you can tell<font color="#E5E5E5"> me if</font>

71
00:03:24,520 --> 00:03:28,690
you can<font color="#E5E5E5"> see anything of this and you can</font>

72
00:03:25,810 --> 00:03:31,480
<font color="#CCCCCC">do your diagnosis on it something is</font>

73
00:03:28,690 --> 00:03:33,220
here maybe but<font color="#E5E5E5"> only those ones were</font>

74
00:03:31,480 --> 00:03:36,869
aware of<font color="#E5E5E5"> these images</font><font color="#CCCCCC"> know a little</font><font color="#E5E5E5"> bit</font>

75
00:03:33,220 --> 00:03:40,590
<font color="#E5E5E5">better what's inside the images yeah</font>

76
00:03:36,870 --> 00:03:44,500
<font color="#E5E5E5">1974 there were of course</font><font color="#CCCCCC"> it's Siemens</font>

77
00:03:40,590 --> 00:03:47,920
<font color="#E5E5E5">the first publicly available CT scanner</font>

78
00:03:44,500 --> 00:03:50,470
<font color="#E5E5E5">it's only for the head the acquisition</font>

79
00:03:47,920 --> 00:03:53,049
time of the head was<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> I can</font>

80
00:03:50,470 --> 00:03:55,990
show you<font color="#CCCCCC"> later numbers</font><font color="#E5E5E5"> how far we</font><font color="#CCCCCC"> are</font>

81
00:03:53,050 --> 00:03:58,380
now and this is how<font color="#CCCCCC"> it looks</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> from</font>

82
00:03:55,990 --> 00:04:01,660
the<font color="#CCCCCC"> inside so here is the x-ray</font><font color="#E5E5E5"> source</font>

83
00:03:58,380 --> 00:04:05,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is how</font><font color="#E5E5E5"> a system looks now here you</font>

84
00:04:01,660 --> 00:04:08,200
can put in the whole body and if<font color="#E5E5E5"> you</font>

85
00:04:05,920 --> 00:04:10,209
<font color="#E5E5E5">open up the</font><font color="#CCCCCC"> system now you have the</font>

86
00:04:08,200 --> 00:04:11,739
x-ray source<font color="#CCCCCC"> of</font><font color="#E5E5E5"> course you have a</font>

87
00:04:10,210 --> 00:04:13,480
<font color="#E5E5E5">detector</font><font color="#CCCCCC"> and these are the most</font>

88
00:04:11,740 --> 00:04:15,160
<font color="#E5E5E5">expensive components of the</font><font color="#CCCCCC"> system</font>

89
00:04:13,480 --> 00:04:18,130
that's one of the<font color="#E5E5E5"> biggest problems</font><font color="#CCCCCC"> we're</font>

90
00:04:15,160 --> 00:04:23,200
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 50 to 80 thousand euros</font>

91
00:04:18,130 --> 00:04:24,700
for these two systems taking<font color="#E5E5E5"> it from the</font>

92
00:04:23,200 --> 00:04:26,170
other side<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> a high voltage a</font>

93
00:04:24,700 --> 00:04:31,380
cooling system<font color="#CCCCCC"> of course you need</font>

94
00:04:26,170 --> 00:04:31,380
electronics and a power<font color="#E5E5E5"> transmission and</font>

95
00:04:31,800 --> 00:04:40,630
<font color="#E5E5E5">from 1974 you see these images here to</font>

96
00:04:36,790 --> 00:04:42,610
1996<font color="#CCCCCC"> you see this image</font><font color="#E5E5E5"> so of course</font>

97
00:04:40,630 --> 00:04:44,140
<font color="#E5E5E5">these are not</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> patients but you</font>

98
00:04:42,610 --> 00:04:46,060
can directly see<font color="#E5E5E5"> that of course the</font>

99
00:04:44,140 --> 00:04:49,870
image quality has improved

100
00:04:46,060 --> 00:04:52,419
and so<font color="#CCCCCC"> weird 2018 and we are still at</font>

101
00:04:49,870 --> 00:04:54,310
the<font color="#E5E5E5"> same image quality</font><font color="#CCCCCC"> so we have a bit</font>

102
00:04:52,419 --> 00:04:58,599
better image<font color="#CCCCCC"> quality but we've stayed</font>

103
00:04:54,310 --> 00:05:02,860
with a 512 by 512 matrix size and here

104
00:04:58,600 --> 00:05:06,040
we are<font color="#E5E5E5"> with</font><font color="#CCCCCC"> AD 280 matrix size it's a</font>

105
00:05:02,860 --> 00:05:09,340
matter of memory consumption<font color="#CCCCCC"> because if</font>

106
00:05:06,040 --> 00:05:11,080
you double the<font color="#CCCCCC"> size</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> to be stored</font>

107
00:05:09,340 --> 00:05:11,830
<font color="#CCCCCC">somewhere and we are currently</font><font color="#E5E5E5"> having</font><font color="#CCCCCC"> a</font>

108
00:05:11,080 --> 00:05:13,599
real trouble

109
00:05:11,830 --> 00:05:17,440
storing all the images that<font color="#CCCCCC"> are</font>

110
00:05:13,600 --> 00:05:21,490
generated from an x-ray system so from

111
00:05:17,440 --> 00:05:25,450
<font color="#E5E5E5">1972</font><font color="#CCCCCC"> we have an acquisition time of the</font>

112
00:05:21,490 --> 00:05:29,410
<font color="#E5E5E5">7 minutes so 300 seconds and the data</font>

113
00:05:25,450 --> 00:05:31,570
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> acquired for one rotation so you</font>

114
00:05:29,410 --> 00:05:34,090
<font color="#CCCCCC">have to imagine what</font><font color="#E5E5E5"> happens with the CT</font>

115
00:05:31,570 --> 00:05:38,229
scan<font color="#CCCCCC"> so you start a rotation you rotate</font>

116
00:05:34,090 --> 00:05:41,138
around the patient for one<font color="#E5E5E5"> image slice</font>

117
00:05:38,229 --> 00:05:43,690
and if you have a<font color="#CCCCCC"> so-called spiral so if</font>

118
00:05:41,139 --> 00:05:47,530
you want<font color="#E5E5E5"> to scan from head to toe</font><font color="#CCCCCC"> you</font>

119
00:05:43,690 --> 00:05:49,240
have<font color="#E5E5E5"> to scan with</font><font color="#CCCCCC"> the spiral</font><font color="#E5E5E5"> skin so</font>

120
00:05:47,530 --> 00:05:51,580
here is no number because at that time

121
00:05:49,240 --> 00:05:53,380
<font color="#E5E5E5">there was no spiral skin available so</font>

122
00:05:51,580 --> 00:05:55,060
you had to rotate<font color="#E5E5E5"> you had to shift you</font>

123
00:05:53,380 --> 00:06:00,580
had to<font color="#CCCCCC"> rotate to shift and so on and so</font>

124
00:05:55,060 --> 00:06:04,750
forth from<font color="#E5E5E5"> the top to the bottom in 2015</font>

125
00:06:00,580 --> 00:06:07,390
we rotate at 0.25 milliseconds<font color="#E5E5E5"> we</font>

126
00:06:04,750 --> 00:06:09,700
<font color="#CCCCCC">produce that data per rotation</font><font color="#E5E5E5"> 270</font>

127
00:06:07,390 --> 00:06:11,740
megabytes<font color="#CCCCCC"> and for a full scan one</font>

128
00:06:09,700 --> 00:06:14,370
gigabyte<font color="#E5E5E5"> and the largest file I have</font>

129
00:06:11,740 --> 00:06:16,810
seen so<font color="#CCCCCC"> far is about 30 gigabytes and</font>

130
00:06:14,370 --> 00:06:19,360
with newer scanners we are coming<font color="#E5E5E5"> up to</font>

131
00:06:16,810 --> 00:06:22,780
100 gigabytes<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> something you</font>

132
00:06:19,360 --> 00:06:25,660
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> process and one of the biggest</font>

133
00:06:22,780 --> 00:06:28,630
problems is that if<font color="#CCCCCC"> you're doing a CT</font>

134
00:06:25,660 --> 00:06:30,460
scan<font color="#CCCCCC"> you</font><font color="#E5E5E5"> sometimes have emergency</font><font color="#CCCCCC"> cases</font>

135
00:06:28,630 --> 00:06:33,600
and you don't want<font color="#E5E5E5"> to wait 20 hours</font>

136
00:06:30,460 --> 00:06:36,340
until the images is finished<font color="#E5E5E5"> so what is</font>

137
00:06:33,600 --> 00:06:38,410
the demand<font color="#E5E5E5"> here is that you have</font>

138
00:06:36,340 --> 00:06:41,289
something<font color="#E5E5E5"> like 50 images reconstructed</font>

139
00:06:38,410 --> 00:06:45,190
<font color="#CCCCCC">per second mostly 100</font><font color="#E5E5E5"> images per second</font>

140
00:06:41,289 --> 00:06:49,060
<font color="#E5E5E5">out of the</font><font color="#CCCCCC"> 30 gigabytes</font><font color="#E5E5E5"> data set there</font>

141
00:06:45,190 --> 00:06:51,520
is one question who knows why the 300

142
00:06:49,060 --> 00:06:53,270
seconds could be reduced to<font color="#CCCCCC"> the 0.2</font>

143
00:06:51,520 --> 00:06:57,289
seconds

144
00:06:53,270 --> 00:07:00,469
I can show<font color="#CCCCCC"> it the first skinners</font><font color="#E5E5E5"> where a</font>

145
00:06:57,289 --> 00:07:03,469
translation rotational system so you had

146
00:07:00,470 --> 00:07:06,050
<font color="#CCCCCC">one x-ray source one pencil beam you had</font>

147
00:07:03,470 --> 00:07:07,970
to shift the pencil beam then you rotate

148
00:07:06,050 --> 00:07:11,210
<font color="#E5E5E5">then there is another shift then there</font>

149
00:07:07,970 --> 00:07:14,810
is another shift<font color="#CCCCCC"> and this has evolved to</font>

150
00:07:11,210 --> 00:07:16,669
a<font color="#CCCCCC"> so called cone beam system where you</font>

151
00:07:14,810 --> 00:07:18,800
could rotate and you<font color="#E5E5E5"> don't have to shift</font>

152
00:07:16,669 --> 00:07:22,099
and translate the only problem is that

153
00:07:18,800 --> 00:07:26,270
<font color="#CCCCCC">there were cables so with one rotation</font>

154
00:07:22,099 --> 00:07:28,580
<font color="#E5E5E5">you had to go back rotate again and this</font>

155
00:07:26,270 --> 00:07:30,620
<font color="#CCCCCC">is where the image is with the power</font>

156
00:07:28,580 --> 00:07:33,859
transmission comes in this<font color="#E5E5E5"> is a</font>

157
00:07:30,620 --> 00:07:36,889
<font color="#E5E5E5">so-called slip ring with the slip ring</font>

158
00:07:33,860 --> 00:07:39,319
<font color="#E5E5E5">in termini is called</font><font color="#CCCCCC"> slice</font><font color="#E5E5E5"> ring so it's</font>

159
00:07:36,889 --> 00:07:41,900
some sort of slip where brushes are

160
00:07:39,319 --> 00:07:44,449
connected to this metal bearing here<font color="#E5E5E5"> and</font>

161
00:07:41,900 --> 00:07:46,969
in<font color="#E5E5E5"> that sense you can</font><font color="#CCCCCC"> rotate forever and</font>

162
00:07:44,449 --> 00:07:48,470
you have<font color="#CCCCCC"> a continuous power transmission</font>

163
00:07:46,970 --> 00:07:51,319
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you don't have to go back</font><font color="#E5E5E5"> and forth</font>

164
00:07:48,470 --> 00:07:53,419
<font color="#E5E5E5">so we rotate in this</font><font color="#CCCCCC"> so-called spiral</font>

165
00:07:51,319 --> 00:07:56,030
<font color="#E5E5E5">and this is also what enabled the spiral</font>

166
00:07:53,419 --> 00:08:00,710
skin so<font color="#E5E5E5"> can start you have</font><font color="#CCCCCC"> your spiral</font>

167
00:07:56,030 --> 00:08:02,299
<font color="#E5E5E5">and skin over the patient yeah</font><font color="#CCCCCC"> I don't</font>

168
00:08:00,710 --> 00:08:04,729
<font color="#E5E5E5">want to talk about all these numbers</font>

169
00:08:02,300 --> 00:08:09,469
there is<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course the matrix size here</font>

170
00:08:04,729 --> 00:08:14,630
so<font color="#E5E5E5"> 2018 we shifted to</font><font color="#CCCCCC"> 2000 2024 matrix</font>

171
00:08:09,469 --> 00:08:17,210
size<font color="#E5E5E5"> if you go to let's say regular CT</font>

172
00:08:14,630 --> 00:08:19,729
<font color="#E5E5E5">are not</font><font color="#CCCCCC"> seed healed regular chest x-ray</font>

173
00:08:17,210 --> 00:08:25,190
scans they have a matrix<font color="#E5E5E5"> size of 4096</font>

174
00:08:19,729 --> 00:08:27,199
<font color="#CCCCCC">to 4096 are much larger the image shifts</font>

175
00:08:25,190 --> 00:08:29,840
the number of<font color="#E5E5E5"> images we produce are</font>

176
00:08:27,199 --> 00:08:33,979
around<font color="#E5E5E5"> 2,000 images per patient</font>

177
00:08:29,840 --> 00:08:36,468
<font color="#E5E5E5">something like this so I talked about</font>

178
00:08:33,979 --> 00:08:39,500
the image<font color="#E5E5E5"> acquisition</font><font color="#CCCCCC"> this is what I</font>

179
00:08:36,469 --> 00:08:41,270
call the pencil beam so here's the x-ray

180
00:08:39,500 --> 00:08:43,130
<font color="#E5E5E5">source and I talked about this</font><font color="#CCCCCC"> very</font>

181
00:08:41,270 --> 00:08:46,040
primitive<font color="#E5E5E5"> example because it's easier</font><font color="#CCCCCC"> to</font>

182
00:08:43,130 --> 00:08:47,839
explain<font color="#CCCCCC"> DDR the other examples you scan</font>

183
00:08:46,040 --> 00:08:49,910
over<font color="#E5E5E5"> the patient here inside there is</font>

184
00:08:47,839 --> 00:08:53,990
the<font color="#E5E5E5"> brain and then there is a</font><font color="#CCCCCC"> so-called</font>

185
00:08:49,910 --> 00:08:56,089
<font color="#CCCCCC">attenuation so every tissue bone liver</font>

186
00:08:53,990 --> 00:08:58,459
has a very different<font color="#CCCCCC"> Etta</font><font color="#E5E5E5"> nation</font>

187
00:08:56,089 --> 00:09:01,490
property and this attenuation property

188
00:08:58,459 --> 00:09:04,520
is measured<font color="#CCCCCC"> here in a single line</font><font color="#E5E5E5"> so you</font>

189
00:09:01,490 --> 00:09:06,100
project<font color="#E5E5E5"> a two-dimensional plane onto</font><font color="#CCCCCC"> a</font>

190
00:09:04,520 --> 00:09:10,540
<font color="#E5E5E5">one-dimensional</font>

191
00:09:06,100 --> 00:09:13,960
line<font color="#CCCCCC"> four each angle while you rotate</font>

192
00:09:10,540 --> 00:09:15,849
around the patient<font color="#E5E5E5"> and this is the</font>

193
00:09:13,960 --> 00:09:18,400
<font color="#CCCCCC">so-called sino gram</font><font color="#E5E5E5"> so here you</font><font color="#CCCCCC"> see the</font>

194
00:09:15,850 --> 00:09:20,980
<font color="#CCCCCC">process a little</font><font color="#E5E5E5"> bit old animation but</font>

195
00:09:18,400 --> 00:09:23,250
in the end what you<font color="#E5E5E5"> get is projections</font>

196
00:09:20,980 --> 00:09:26,560
so there is a detector<font color="#CCCCCC"> that has around</font>

197
00:09:23,250 --> 00:09:32,890
<font color="#E5E5E5">thousand channels in one direction and</font>

198
00:09:26,560 --> 00:09:35,829
let's say 64 to 128 rows so this is one

199
00:09:32,890 --> 00:09:37,600
projection from<font color="#E5E5E5"> one angle then there is</font>

200
00:09:35,830 --> 00:09:39,910
another projection<font color="#CCCCCC"> and if you finish</font>

201
00:09:37,600 --> 00:09:43,000
this up<font color="#E5E5E5"> this is the so-called</font><font color="#CCCCCC"> sine of</font>

202
00:09:39,910 --> 00:09:45,579
<font color="#CCCCCC">ram in the end it's an</font><font color="#E5E5E5"> x-ray from many</font>

203
00:09:43,000 --> 00:09:48,880
projections<font color="#E5E5E5"> regular x-ray</font><font color="#CCCCCC"> from any</font>

204
00:09:45,580 --> 00:09:51,010
projections<font color="#E5E5E5"> and now we're coming to this</font>

205
00:09:48,880 --> 00:09:54,490
route on inversion formula<font color="#E5E5E5"> with this</font>

206
00:09:51,010 --> 00:09:57,520
Austrian scientist<font color="#E5E5E5"> we need to make from</font>

207
00:09:54,490 --> 00:10:00,400
this<font color="#CCCCCC"> saina gram a reconstruction of the</font>

208
00:09:57,520 --> 00:10:02,199
image<font color="#E5E5E5"> so in the end what you do is there</font>

209
00:10:00,400 --> 00:10:05,290
are<font color="#E5E5E5"> two methods either</font><font color="#CCCCCC"> fourier based</font>

210
00:10:02,200 --> 00:10:07,390
which<font color="#CCCCCC"> is normally not used for image</font>

211
00:10:05,290 --> 00:10:11,680
back projection<font color="#E5E5E5"> so in the end what you</font>

212
00:10:07,390 --> 00:10:13,660
do is the process I<font color="#E5E5E5"> have shown taking a</font>

213
00:10:11,680 --> 00:10:16,800
<font color="#E5E5E5">projection from one angle from the next</font>

214
00:10:13,660 --> 00:10:21,400
angle<font color="#E5E5E5"> is simply inverted mathematically</font>

215
00:10:16,800 --> 00:10:24,099
so you sit on a pixel here and you look

216
00:10:21,400 --> 00:10:26,860
at the projections that<font color="#E5E5E5"> are contributing</font>

217
00:10:24,100 --> 00:10:29,290
to<font color="#CCCCCC"> this pixel and you just</font><font color="#E5E5E5"> reverse the</font>

218
00:10:26,860 --> 00:10:32,320
process<font color="#CCCCCC"> just mathematical image</font>

219
00:10:29,290 --> 00:10:34,089
reconstruction<font color="#CCCCCC"> of course this is time</font>

220
00:10:32,320 --> 00:10:36,310
<font color="#CCCCCC">consuming enough some numbers here</font><font color="#E5E5E5"> but I</font>

221
00:10:34,090 --> 00:10:38,110
<font color="#CCCCCC">just show this example so this is how it</font>

222
00:10:36,310 --> 00:10:41,229
works this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the original</font><font color="#E5E5E5"> object just a</font>

223
00:10:38,110 --> 00:10:45,880
cylinder<font color="#CCCCCC"> this is one projection</font><font color="#E5E5E5"> this is</font>

224
00:10:41,230 --> 00:10:48,070
how a projection<font color="#E5E5E5"> in 1d looks like you do</font>

225
00:10:45,880 --> 00:10:51,160
it many times<font color="#E5E5E5"> three projections and then</font>

226
00:10:48,070 --> 00:10:53,170
you see<font color="#E5E5E5"> finally you have some</font>

227
00:10:51,160 --> 00:10:55,449
reconstructed image and now you see<font color="#CCCCCC"> that</font>

228
00:10:53,170 --> 00:10:58,510
there is<font color="#CCCCCC"> something wrong you have a cone</font>

229
00:10:55,450 --> 00:11:00,700
<font color="#CCCCCC">you have not a cylinder</font><font color="#E5E5E5"> and this is what</font>

230
00:10:58,510 --> 00:11:02,860
is called filtered<font color="#E5E5E5"> backprojection so</font>

231
00:11:00,700 --> 00:11:05,380
something goes wrong<font color="#E5E5E5"> in this regular</font>

232
00:11:02,860 --> 00:11:06,970
acquisition process<font color="#CCCCCC"> and you need</font><font color="#E5E5E5"> to</font>

233
00:11:05,380 --> 00:11:09,370
filter<font color="#E5E5E5"> this</font><font color="#CCCCCC"> too that this</font>

234
00:11:06,970 --> 00:11:12,220
<font color="#CCCCCC">one-dimensional projection</font><font color="#E5E5E5"> of a single</font>

235
00:11:09,370 --> 00:11:15,040
<font color="#E5E5E5">angle for the next</font><font color="#CCCCCC"> angle you also need</font>

236
00:11:12,220 --> 00:11:18,050
to<font color="#E5E5E5"> do it so there is a so-called filter</font>

237
00:11:15,040 --> 00:11:19,910
kernel that<font color="#E5E5E5"> you apply to this data</font>

238
00:11:18,050 --> 00:11:24,890
it looks like<font color="#E5E5E5"> this there</font><font color="#CCCCCC"> are MIDI</font>

239
00:11:19,910 --> 00:11:29,029
<font color="#E5E5E5">kernels and if you do this then it</font>

240
00:11:24,890 --> 00:11:32,180
should go for many<font color="#E5E5E5"> projections in the</font>

241
00:11:29,029 --> 00:11:34,040
<font color="#CCCCCC">end</font><font color="#E5E5E5"> for 128 projections for very</font>

242
00:11:32,180 --> 00:11:35,750
primitive objects it's pretty easy but

243
00:11:34,040 --> 00:11:38,630
if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a very complex objects like</font>

244
00:11:35,750 --> 00:11:40,279
a body<font color="#E5E5E5"> it's pretty complex and 128</font>

245
00:11:38,630 --> 00:11:45,010
projections are<font color="#CCCCCC"> not enough</font><font color="#E5E5E5"> we're talking</font>

246
00:11:40,279 --> 00:11:49,520
about<font color="#CCCCCC"> 4000 projections for each angle</font>

247
00:11:45,010 --> 00:11:52,130
there is<font color="#E5E5E5"> one problem though you have to</font>

248
00:11:49,520 --> 00:11:55,310
decide if you<font color="#CCCCCC"> have a sharp kernel or if</font>

249
00:11:52,130 --> 00:11:58,220
you have a smooth kernel and the kernel

250
00:11:55,310 --> 00:12:00,079
controls the<font color="#CCCCCC"> image inspiration</font><font color="#E5E5E5"> so if you</font>

251
00:11:58,220 --> 00:12:02,600
have a sharp kernel<font color="#E5E5E5"> you have very fine</font>

252
00:12:00,080 --> 00:12:05,270
details the<font color="#E5E5E5"> only problem is you have</font>

253
00:12:02,600 --> 00:12:07,550
<font color="#CCCCCC">very high</font><font color="#E5E5E5"> noise</font><font color="#CCCCCC"> and it always</font><font color="#E5E5E5"> depends on</font>

254
00:12:05,270 --> 00:12:10,850
your<font color="#E5E5E5"> indication you want to see do you</font>

255
00:12:07,550 --> 00:12:13,160
want to see small<font color="#E5E5E5"> fissures on bones</font><font color="#CCCCCC"> or</font>

256
00:12:10,850 --> 00:12:14,690
do you want to see<font color="#E5E5E5"> tumors and this is</font>

257
00:12:13,160 --> 00:12:17,510
where you have to<font color="#E5E5E5"> decide between the</font>

258
00:12:14,690 --> 00:12:20,240
kernels<font color="#CCCCCC"> so that's what the kernel does</font>

259
00:12:17,510 --> 00:12:26,870
it controls sharpness noise and the

260
00:12:20,240 --> 00:12:29,209
edges<font color="#E5E5E5"> these</font><font color="#CCCCCC"> are medical images so we are</font>

261
00:12:26,870 --> 00:12:30,740
using mostly phantoms<font color="#CCCCCC"> in our department</font>

262
00:12:29,209 --> 00:12:32,959
because<font color="#E5E5E5"> it's much easier</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see the</font>

263
00:12:30,740 --> 00:12:36,410
effects not on a very complex human

264
00:12:32,959 --> 00:12:38,859
tissue<font color="#E5E5E5"> but to have some simulated</font>

265
00:12:36,410 --> 00:12:42,050
phantoms where we check what's<font color="#CCCCCC"> going on</font>

266
00:12:38,860 --> 00:12:44,390
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a regular head phantom</font><font color="#E5E5E5"> where</font>

267
00:12:42,050 --> 00:12:46,760
you have this bone here<font color="#E5E5E5"> this is a very</font>

268
00:12:44,390 --> 00:12:51,050
complex bone with very fine structures

269
00:12:46,760 --> 00:12:52,700
and<font color="#E5E5E5"> you also see low attenuating objects</font>

270
00:12:51,050 --> 00:12:55,370
and this is some<font color="#E5E5E5"> sort of where you want</font>

271
00:12:52,700 --> 00:12:58,700
to see<font color="#E5E5E5"> it or where you see if your</font>

272
00:12:55,370 --> 00:13:01,040
algorithms work good<font color="#CCCCCC"> for soft tissue</font><font color="#E5E5E5"> for</font>

273
00:12:58,700 --> 00:13:03,709
low attenuating things<font color="#E5E5E5"> or for higher</font>

274
00:13:01,040 --> 00:13:05,839
attenuating things so and this<font color="#CCCCCC"> is one</font>

275
00:13:03,709 --> 00:13:08,540
approach<font color="#CCCCCC"> how a regular reconstruction</font>

276
00:13:05,839 --> 00:13:10,040
works<font color="#E5E5E5"> and you see that there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> some</font>

277
00:13:08,540 --> 00:13:12,469
problems in the reconstruction<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is</font>

278
00:13:10,040 --> 00:13:14,870
so-called<font color="#E5E5E5"> beam hardening effect here you</font>

279
00:13:12,470 --> 00:13:17,660
see some sampling effects obviously if

280
00:13:14,870 --> 00:13:20,209
you enlarge this you can see in the

281
00:13:17,660 --> 00:13:23,300
volume stack<font color="#CCCCCC"> for many sites what the</font>

282
00:13:20,209 --> 00:13:24,770
result of<font color="#E5E5E5"> the reconstruction was and</font>

283
00:13:23,300 --> 00:13:27,740
there is another<font color="#CCCCCC"> approach and this</font><font color="#E5E5E5"> is</font>

284
00:13:24,770 --> 00:13:31,480
iterative<font color="#CCCCCC"> reconstruction</font><font color="#E5E5E5"> iterative</font>

285
00:13:27,740 --> 00:13:31,480
reconstruction is a process where<font color="#CCCCCC"> you</font>

286
00:13:31,570 --> 00:13:36,920
reword the process of reconstruction

287
00:13:34,430 --> 00:13:38,810
again so you do a technical forward

288
00:13:36,920 --> 00:13:42,229
projection<font color="#E5E5E5"> which means it's a technical</font>

289
00:13:38,810 --> 00:13:44,239
<font color="#E5E5E5">process of acquisition the first of all</font>

290
00:13:42,230 --> 00:13:46,730
<font color="#E5E5E5">you have a reconstruction</font><font color="#CCCCCC"> it's a 3d</font>

291
00:13:44,240 --> 00:13:48,020
volume stick you made some errors<font color="#E5E5E5"> with</font>

292
00:13:46,730 --> 00:13:51,410
your algorithms because they're<font color="#E5E5E5"> not</font>

293
00:13:48,020 --> 00:13:53,870
perfect then<font color="#E5E5E5"> you try to do a some</font>

294
00:13:51,410 --> 00:13:55,520
<font color="#E5E5E5">so-called forward projection</font><font color="#CCCCCC"> so you</font>

295
00:13:53,870 --> 00:13:57,760
invert the process it's a little bit

296
00:13:55,520 --> 00:14:01,610
complicated<font color="#CCCCCC"> the process of</font>

297
00:13:57,760 --> 00:14:05,149
reconstruction again and then there is

298
00:14:01,610 --> 00:14:07,760
some sort<font color="#CCCCCC"> of an image so this</font><font color="#E5E5E5"> is some</font>

299
00:14:05,149 --> 00:14:10,459
sort<font color="#CCCCCC"> of a loop</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> you try to with a</font>

300
00:14:07,760 --> 00:14:12,649
few cycles<font color="#E5E5E5"> you try to recover the image</font>

301
00:14:10,459 --> 00:14:14,300
quality<font color="#CCCCCC"> and put also</font><font color="#E5E5E5"> some prior</font>

302
00:14:12,649 --> 00:14:16,520
<font color="#CCCCCC">knowledge in it because</font><font color="#E5E5E5"> you know at the</font>

303
00:14:14,300 --> 00:14:18,949
edges<font color="#E5E5E5"> there is always a beam hardening</font>

304
00:14:16,520 --> 00:14:21,199
so you put prior knowledge in it<font color="#E5E5E5"> just to</font>

305
00:14:18,950 --> 00:14:24,290
<font color="#E5E5E5">recover these beam hardening effects and</font>

306
00:14:21,200 --> 00:14:26,390
of course you can imagine<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this us</font>

307
00:14:24,290 --> 00:14:31,160
this all costs a<font color="#E5E5E5"> lot of processing power</font>

308
00:14:26,390 --> 00:14:33,020
<font color="#CCCCCC">for a regular system</font><font color="#E5E5E5"> we have around 700</font>

309
00:14:31,160 --> 00:14:36,920
gigabytes of main<font color="#CCCCCC"> memory in the system</font>

310
00:14:33,020 --> 00:14:40,370
and about<font color="#CCCCCC"> for Walter</font><font color="#E5E5E5"> GPUs that doing</font>

311
00:14:36,920 --> 00:14:44,110
this process<font color="#CCCCCC"> and as I said 30 gigabytes</font>

312
00:14:40,370 --> 00:14:46,329
<font color="#E5E5E5">and 100</font><font color="#CCCCCC"> images per second is a very</font>

313
00:14:44,110 --> 00:14:49,370
highly demanding<font color="#CCCCCC"> process on the</font>

314
00:14:46,329 --> 00:14:51,020
developers that<font color="#E5E5E5"> are doing this we are in</font>

315
00:14:49,370 --> 00:14:52,870
the field of research<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the</font>

316
00:14:51,020 --> 00:14:56,180
advantage<font color="#E5E5E5"> we don't need to be that fast</font>

317
00:14:52,870 --> 00:15:00,260
but still there is<font color="#CCCCCC"> a high demand</font><font color="#E5E5E5"> on</font>

318
00:14:56,180 --> 00:15:01,579
having images<font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> so I just want to</font>

319
00:15:00,260 --> 00:15:03,819
show the<font color="#CCCCCC"> effects of iterative</font>

320
00:15:01,579 --> 00:15:06,380
<font color="#CCCCCC">reconstruction so this is</font><font color="#E5E5E5"> a regular</font>

321
00:15:03,820 --> 00:15:09,560
reconstruction here is some sort of

322
00:15:06,380 --> 00:15:11,180
filtering on it here is again the first

323
00:15:09,560 --> 00:15:14,180
version<font color="#E5E5E5"> of iterative European</font>

324
00:15:11,180 --> 00:15:16,250
reconstruction<font color="#E5E5E5"> and this is something</font>

325
00:15:14,180 --> 00:15:19,459
where the full iterative reconstruction

326
00:15:16,250 --> 00:15:23,029
was applied and as I said<font color="#CCCCCC"> we're talking</font>

327
00:15:19,459 --> 00:15:25,489
<font color="#E5E5E5">about x-rays and of course your there is</font>

328
00:15:23,029 --> 00:15:28,579
<font color="#CCCCCC">a so-called olara principle as low as</font>

329
00:15:25,490 --> 00:15:30,050
reasonably achievable<font color="#E5E5E5"> so you should of</font>

330
00:15:28,579 --> 00:15:32,719
<font color="#E5E5E5">course you have to apply x-rays to see</font>

331
00:15:30,050 --> 00:15:36,500
something but<font color="#E5E5E5"> in the end you</font><font color="#CCCCCC"> should only</font>

332
00:15:32,720 --> 00:15:38,390
apply as much<font color="#E5E5E5"> as you need and if the</font>

333
00:15:36,500 --> 00:15:41,959
other rhythms are good enough<font color="#CCCCCC"> then you</font>

334
00:15:38,390 --> 00:15:43,850
<font color="#E5E5E5">can reduce the dose further or you keep</font>

335
00:15:41,959 --> 00:15:44,930
the same dose but it can improve image

336
00:15:43,850 --> 00:15:48,589
quality

337
00:15:44,930 --> 00:15:51,880
- for example detect<font color="#E5E5E5"> the terminating</font>

338
00:15:48,589 --> 00:15:57,110
regions here in the bladder<font color="#CCCCCC"> so this is a</font>

339
00:15:51,880 --> 00:15:58,760
thorax skin and abdominal skin this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

340
00:15:57,110 --> 00:16:02,870
pretty large area<font color="#CCCCCC"> so this is from here</font>

341
00:15:58,760 --> 00:16:05,600
<font color="#CCCCCC">to</font><font color="#E5E5E5"> here somehow and you</font><font color="#CCCCCC"> can also see</font>

342
00:16:02,870 --> 00:16:07,279
<font color="#E5E5E5">that there</font><font color="#CCCCCC"> is some</font><font color="#E5E5E5"> noise reduction so</font>

343
00:16:05,600 --> 00:16:09,710
you're going from<font color="#E5E5E5"> Hounsfield units by</font>

344
00:16:07,279 --> 00:16:11,900
<font color="#E5E5E5">the way was named by the inventor</font><font color="#CCCCCC"> of the</font>

345
00:16:09,710 --> 00:16:14,839
system it's a unit that<font color="#CCCCCC"> was introduced</font>

346
00:16:11,900 --> 00:16:19,360
<font color="#E5E5E5">it's a unit-less unit so there's nothing</font>

347
00:16:14,839 --> 00:16:21,890
<font color="#E5E5E5">it only is some relative value to water</font>

348
00:16:19,360 --> 00:16:23,480
yeah and here also some improvements

349
00:16:21,890 --> 00:16:25,699
<font color="#E5E5E5">because you want to see very fine</font>

350
00:16:23,480 --> 00:16:28,070
details this<font color="#E5E5E5"> is what is what is shown in</font>

351
00:16:25,700 --> 00:16:30,350
the regular<font color="#CCCCCC"> weighted filtered</font>

352
00:16:28,070 --> 00:16:32,540
backprojection<font color="#CCCCCC"> and this is some</font><font color="#E5E5E5"> IR</font>

353
00:16:30,350 --> 00:16:35,260
process where<font color="#E5E5E5"> you can much better see</font>

354
00:16:32,540 --> 00:16:38,569
the line<font color="#CCCCCC"> press</font><font color="#E5E5E5"> and the small lines of</font>

355
00:16:35,260 --> 00:16:42,830
the object<font color="#E5E5E5"> also here this is a coronary</font>

356
00:16:38,570 --> 00:16:46,640
stent that<font color="#E5E5E5"> if you have some occlusion on</font>

357
00:16:42,830 --> 00:16:48,710
your heart vessels<font color="#E5E5E5"> then you apply metal</font>

358
00:16:46,640 --> 00:16:51,560
stents on it to<font color="#E5E5E5"> open up the vessel again</font>

359
00:16:48,710 --> 00:16:54,110
and it's some sort<font color="#E5E5E5"> of a grid in the cage</font>

360
00:16:51,560 --> 00:16:57,770
which<font color="#E5E5E5"> is inserted into the heart and</font>

361
00:16:54,110 --> 00:16:59,690
it's helpful to<font color="#CCCCCC"> see what what you what</font>

362
00:16:57,770 --> 00:17:02,150
<font color="#E5E5E5">it's inside to see the</font><font color="#CCCCCC"> stents drugs</font>

363
00:16:59,690 --> 00:17:04,339
<font color="#E5E5E5">there are so-called thin struts because</font>

364
00:17:02,150 --> 00:17:06,790
it's<font color="#E5E5E5"> possible that they clot again so</font>

365
00:17:04,339 --> 00:17:12,859
they get closer again and this<font color="#E5E5E5"> is</font>

366
00:17:06,790 --> 00:17:15,170
<font color="#E5E5E5">necessary to see inside this stent yeah</font>

367
00:17:12,859 --> 00:17:19,790
<font color="#CCCCCC">I</font><font color="#E5E5E5"> will talk</font><font color="#CCCCCC"> about the techniques behind</font>

368
00:17:15,170 --> 00:17:22,220
<font color="#E5E5E5">I can only cut pieces it's at a pretty</font>

369
00:17:19,790 --> 00:17:23,688
large area where I can<font color="#E5E5E5"> only show a few</font>

370
00:17:22,220 --> 00:17:27,050
details<font color="#E5E5E5"> we</font><font color="#CCCCCC"> experienced with the.net</font>

371
00:17:23,689 --> 00:17:29,860
framework and with the C sharp<font color="#E5E5E5"> so in</font>

372
00:17:27,050 --> 00:17:32,600
general<font color="#E5E5E5"> we are talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> volumes</font>

373
00:17:29,860 --> 00:17:36,169
<font color="#CCCCCC">Sall volumes about two thousand slices</font>

374
00:17:32,600 --> 00:17:39,040
let's say 512 by 512<font color="#E5E5E5"> stored in float</font>

375
00:17:36,170 --> 00:17:41,720
<font color="#E5E5E5">byte depending on what's</font><font color="#CCCCCC"> inside</font><font color="#E5E5E5"> or</font>

376
00:17:39,040 --> 00:17:43,879
integers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you need to store it</font>

377
00:17:41,720 --> 00:17:47,179
somehow<font color="#E5E5E5"> so this is the it's</font><font color="#CCCCCC"> a small</font>

378
00:17:43,880 --> 00:17:49,670
<font color="#CCCCCC">diagram where we</font><font color="#E5E5E5"> have some class which</font>

379
00:17:47,179 --> 00:17:52,130
is a volume<font color="#E5E5E5"> and we have many types of</font>

380
00:17:49,670 --> 00:17:55,250
volume<font color="#CCCCCC"> so because we also</font><font color="#E5E5E5"> want to</font>

381
00:17:52,130 --> 00:17:56,720
support for<font color="#E5E5E5"> example MATLAB volumes so we</font>

382
00:17:55,250 --> 00:17:57,830
need to have some wrappers around these

383
00:17:56,720 --> 00:18:00,409
volumes

384
00:17:57,830 --> 00:18:04,639
so this is the let's say<font color="#E5E5E5"> the data</font>

385
00:18:00,409 --> 00:18:07,519
collection<font color="#E5E5E5"> that manages the</font><font color="#CCCCCC"> slices</font><font color="#E5E5E5"> the</font>

386
00:18:04,639 --> 00:18:09,830
volume<font color="#E5E5E5"> and image slices and there is</font>

387
00:18:07,519 --> 00:18:11,960
also<font color="#E5E5E5"> for the 30 gigabytes the projection</font>

388
00:18:09,830 --> 00:18:14,689
data<font color="#E5E5E5"> it's some are identical it's also</font>

389
00:18:11,960 --> 00:18:17,899
sorted in slices<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you also</font><font color="#E5E5E5"> need to</font>

390
00:18:14,690 --> 00:18:20,960
<font color="#CCCCCC">store</font><font color="#E5E5E5"> it but the problem is we don't</font>

391
00:18:17,899 --> 00:18:22,850
have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> size of 7</font><font color="#E5E5E5"> on gigabytes I told</font>

392
00:18:20,960 --> 00:18:26,059
you before in our<font color="#E5E5E5"> production system we</font>

393
00:18:22,850 --> 00:18:29,230
only have 32 so what we need<font color="#CCCCCC"> to do is we</font>

394
00:18:26,059 --> 00:18:31,730
need to<font color="#E5E5E5"> invent our own memory management</font>

395
00:18:29,230 --> 00:18:33,049
<font color="#E5E5E5">other than the regular garbage collector</font>

396
00:18:31,730 --> 00:18:35,499
because<font color="#CCCCCC"> the</font><font color="#E5E5E5"> garbage collector only</font>

397
00:18:33,049 --> 00:18:39,289
cleans up<font color="#E5E5E5"> but in our case</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something</font>

398
00:18:35,499 --> 00:18:42,190
we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the data more</font><font color="#E5E5E5"> often</font>

399
00:18:39,289 --> 00:18:44,389
so that<font color="#E5E5E5"> it shouldn't</font><font color="#CCCCCC"> get this</font><font color="#E5E5E5"> post and</font>

400
00:18:42,190 --> 00:18:46,669
we need to<font color="#E5E5E5"> sometimes access it</font>

401
00:18:44,389 --> 00:18:48,488
<font color="#CCCCCC">sequentially and sometimes</font><font color="#E5E5E5"> randomly it's</font>

402
00:18:46,669 --> 00:18:51,710
depending<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> task we're working on</font>

403
00:18:48,489 --> 00:18:54,320
so what we have is each of<font color="#E5E5E5"> these slices</font>

404
00:18:51,710 --> 00:18:56,629
and the protections are derived from a

405
00:18:54,320 --> 00:18:58,519
<font color="#E5E5E5">so called mapable object and the</font>

406
00:18:56,629 --> 00:19:01,219
<font color="#CCCCCC">background thread is running in the</font>

407
00:18:58,519 --> 00:19:04,700
<font color="#E5E5E5">background and continuously checking</font>

408
00:19:01,220 --> 00:19:07,519
which object<font color="#E5E5E5"> there is a reference</font>

409
00:19:04,700 --> 00:19:09,109
counter there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> time counter how much</font>

410
00:19:07,519 --> 00:19:12,830
the hour how often the object was used

411
00:19:09,109 --> 00:19:17,720
<font color="#E5E5E5">when it was used last and depending on</font>

412
00:19:12,830 --> 00:19:20,830
<font color="#E5E5E5">this these automatic process checks is</font>

413
00:19:17,720 --> 00:19:23,450
there enough space free and then dumps

414
00:19:20,830 --> 00:19:27,080
data that is not used<font color="#CCCCCC"> for a long time</font>

415
00:19:23,450 --> 00:19:28,609
<font color="#CCCCCC">just to</font><font color="#E5E5E5"> the hard disk</font><font color="#CCCCCC"> and when we</font>

416
00:19:27,080 --> 00:19:30,109
started<font color="#E5E5E5"> memory mapped files were not</font>

417
00:19:28,609 --> 00:19:32,439
available<font color="#E5E5E5"> there was a</font><font color="#CCCCCC"> problem so we</font>

418
00:19:30,109 --> 00:19:36,889
could have used memory mapped files<font color="#E5E5E5"> but</font>

419
00:19:32,440 --> 00:19:38,720
the problem is memory map files so<font color="#E5E5E5"> we in</font>

420
00:19:36,889 --> 00:19:40,129
the<font color="#CCCCCC"> last two years we have</font><font color="#E5E5E5"> tested it</font>

421
00:19:38,720 --> 00:19:42,470
memory mapped files are currently very

422
00:19:40,129 --> 00:19:44,869
slow<font color="#E5E5E5"> so there are two things where we</font>

423
00:19:42,470 --> 00:19:48,230
<font color="#E5E5E5">can access memory</font><font color="#CCCCCC"> has any</font><font color="#E5E5E5"> of one of you</font>

424
00:19:44,869 --> 00:19:50,840
<font color="#CCCCCC">might use memory map files ok so just</font>

425
00:19:48,230 --> 00:19:52,909
<font color="#CCCCCC">explain a memory map files is a is some</font>

426
00:19:50,840 --> 00:19:54,769
mechanism<font color="#E5E5E5"> where the virtual file</font><font color="#CCCCCC"> system</font>

427
00:19:52,909 --> 00:19:57,559
<font color="#E5E5E5">which shows memory manager from</font><font color="#CCCCCC"> Windows</font>

428
00:19:54,769 --> 00:20:00,919
takes over and says<font color="#E5E5E5"> ok you don't need</font>

429
00:19:57,559 --> 00:20:02,480
<font color="#E5E5E5">this anymore</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> dump it and of</font>

430
00:20:00,919 --> 00:20:05,509
<font color="#CCCCCC">course</font><font color="#E5E5E5"> it's stupid to do it ourselves</font>

431
00:20:02,480 --> 00:20:07,159
but the memory manager was first of all

432
00:20:05,509 --> 00:20:11,180
<font color="#E5E5E5">a little bit slow because of</font><font color="#CCCCCC"> this line</font>

433
00:20:07,159 --> 00:20:13,340
<font color="#CCCCCC">here</font><font color="#E5E5E5"> and the other thing is that when</font><font color="#CCCCCC"> we</font>

434
00:20:11,180 --> 00:20:15,110
the data the data normally<font color="#E5E5E5"> from the</font>

435
00:20:13,340 --> 00:20:18,100
system is stored in a compressed way so

436
00:20:15,110 --> 00:20:20,570
it's<font color="#E5E5E5"> not only reading</font><font color="#CCCCCC"> it's also</font>

437
00:20:18,100 --> 00:20:22,730
unzipping more or less and doing some

438
00:20:20,570 --> 00:20:26,210
data compression data formatting on it

439
00:20:22,730 --> 00:20:29,710
so<font color="#E5E5E5"> just simply writing and loading is</font>

440
00:20:26,210 --> 00:20:32,750
<font color="#E5E5E5">not good enough</font><font color="#CCCCCC"> for us so in the end</font>

441
00:20:29,710 --> 00:20:35,150
there were two things<font color="#E5E5E5"> why we couldn't</font>

442
00:20:32,750 --> 00:20:37,330
<font color="#E5E5E5">use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is first of all because of this</font>

443
00:20:35,150 --> 00:20:39,830
line<font color="#E5E5E5"> it's very slow</font>

444
00:20:37,330 --> 00:20:44,149
obviously no<font color="#E5E5E5"> one has ever invested more</font>

445
00:20:39,830 --> 00:20:46,070
on it that is one thing<font color="#E5E5E5"> and there comes</font>

446
00:20:44,150 --> 00:20:48,470
<font color="#CCCCCC">another thing so this is a</font><font color="#E5E5E5"> little bit of</font>

447
00:20:46,070 --> 00:20:51,020
a new topic<font color="#E5E5E5"> how many of you are using</font>

448
00:20:48,470 --> 00:20:54,890
arrays<font color="#E5E5E5"> large arrays in your in</font><font color="#CCCCCC"> your</font>

449
00:20:51,020 --> 00:20:57,620
environment<font color="#CCCCCC"> so do you</font><font color="#E5E5E5"> use a lot</font><font color="#CCCCCC"> of</font>

450
00:20:54,890 --> 00:21:01,040
arrays or just I<font color="#CCCCCC"> just do it</font><font color="#E5E5E5"> once and</font>

451
00:20:57,620 --> 00:21:02,659
then<font color="#E5E5E5"> it's over so that's</font><font color="#CCCCCC"> the interesting</font>

452
00:21:01,040 --> 00:21:05,090
<font color="#CCCCCC">thing because we're talking</font><font color="#E5E5E5"> about the</font>

453
00:21:02,660 --> 00:21:07,520
benchmark net<font color="#CCCCCC"> I did benchmarks and since</font>

454
00:21:05,090 --> 00:21:11,870
I started<font color="#CCCCCC"> with this about 12 years</font><font color="#E5E5E5"> ago I</font>

455
00:21:07,520 --> 00:21:14,300
did a lot of benchmarks<font color="#E5E5E5"> and this is the</font>

456
00:21:11,870 --> 00:21:17,479
<font color="#CCCCCC">regular edition</font><font color="#E5E5E5"> so I showed this array</font>

457
00:21:14,300 --> 00:21:19,639
<font color="#E5E5E5">so this is just adding two floats</font><font color="#CCCCCC"> I just</font>

458
00:21:17,480 --> 00:21:23,330
want to add two floats this is

459
00:21:19,640 --> 00:21:27,800
conventionally done taking<font color="#E5E5E5"> the a dot</font>

460
00:21:23,330 --> 00:21:32,179
length here<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> that's wrong for it</font>

461
00:21:27,800 --> 00:21:34,850
22 then if I extract<font color="#E5E5E5"> the</font><font color="#CCCCCC"> eight of</font><font color="#E5E5E5"> length</font>

462
00:21:32,180 --> 00:21:37,220
to just an<font color="#E5E5E5"> external variable</font><font color="#CCCCCC"> I get this</font>

463
00:21:34,850 --> 00:21:38,689
number<font color="#CCCCCC"> I always thought it should</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> the</font>

464
00:21:37,220 --> 00:21:41,990
<font color="#CCCCCC">case</font><font color="#E5E5E5"> because I thought the cheater is</font>

465
00:21:38,690 --> 00:21:43,850
optimized<font color="#E5E5E5"> but it was very surprised if I</font>

466
00:21:41,990 --> 00:21:46,130
went to<font color="#E5E5E5"> pointer arithmetic should just</font>

467
00:21:43,850 --> 00:21:49,280
make it unmanned unsafe<font color="#E5E5E5"> and do a</font><font color="#CCCCCC"> pointer</font>

468
00:21:46,130 --> 00:21:52,130
arithmetic<font color="#E5E5E5"> I come to this area</font><font color="#CCCCCC"> here the</font>

469
00:21:49,280 --> 00:21:54,470
external<font color="#E5E5E5"> end doesn't really matter</font>

470
00:21:52,130 --> 00:21:58,220
anymore<font color="#E5E5E5"> I'm was also very surprised</font><font color="#CCCCCC"> and</font>

471
00:21:54,470 --> 00:21:59,990
of course I<font color="#E5E5E5"> tried to spend and I know</font>

472
00:21:58,220 --> 00:22:02,110
that<font color="#E5E5E5"> the spend is not very functional or</font>

473
00:21:59,990 --> 00:22:05,360
it's not so fast as in the<font color="#E5E5E5"> octet core</font>

474
00:22:02,110 --> 00:22:07,820
here the<font color="#E5E5E5"> performance dropped so of</font>

475
00:22:05,360 --> 00:22:10,010
course<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> hoping for dotnet core that</font>

476
00:22:07,820 --> 00:22:12,379
this will improve but<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> also using</font>

477
00:22:10,010 --> 00:22:15,260
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SM</font><font color="#E5E5E5"> ID and this was the best</font>

478
00:22:12,380 --> 00:22:18,350
performance<font color="#E5E5E5"> in that case when I do this</font>

479
00:22:15,260 --> 00:22:19,790
here on dotnet core<font color="#E5E5E5"> I was very surprised</font>

480
00:22:18,350 --> 00:22:20,840
<font color="#E5E5E5">and I hope someone proves me wrong that</font>

481
00:22:19,790 --> 00:22:22,730
<font color="#E5E5E5">something</font><font color="#CCCCCC"> is wrong here</font>

482
00:22:20,840 --> 00:22:24,189
<font color="#E5E5E5">because all the values</font><font color="#CCCCCC"> were much lower</font>

483
00:22:22,730 --> 00:22:26,620
<font color="#E5E5E5">than on this</font><font color="#CCCCCC"> side</font>

484
00:22:24,190 --> 00:22:28,899
and as we<font color="#E5E5E5"> heard on the</font><font color="#CCCCCC"> other side that</font>

485
00:22:26,620 --> 00:22:30,518
<font color="#CCCCCC">the dotnet core is fast I also read</font>

486
00:22:28,899 --> 00:22:32,080
these two blog posts<font color="#CCCCCC"> and I was very</font>

487
00:22:30,519 --> 00:22:37,059
surprised that I get the wrong numbers

488
00:22:32,080 --> 00:22:38,949
yet there's<font color="#E5E5E5"> another thing what if I want</font>

489
00:22:37,059 --> 00:22:42,539
to<font color="#E5E5E5"> do it with generics</font><font color="#CCCCCC"> have you ever</font>

490
00:22:38,950 --> 00:22:45,429
tried this it doesn't<font color="#E5E5E5"> work</font>

491
00:22:42,539 --> 00:22:48,039
<font color="#CCCCCC">see shop does not support mathematical</font>

492
00:22:45,429 --> 00:22:51,279
operations<font color="#E5E5E5"> on generics as C++</font><font color="#CCCCCC"> do and</font>

493
00:22:48,039 --> 00:22:54,580
<font color="#E5E5E5">this is there</font><font color="#CCCCCC"> were a lot</font><font color="#E5E5E5"> of thanks a lot</font>

494
00:22:51,279 --> 00:22:57,070
<font color="#E5E5E5">of my colleagues came and say why it is</font>

495
00:22:54,580 --> 00:23:00,850
it not<font color="#CCCCCC"> possible and there are a lot of</font>

496
00:22:57,070 --> 00:23:03,990
cases where we<font color="#E5E5E5"> had to write a very large</font>

497
00:23:00,850 --> 00:23:06,730
math library<font color="#E5E5E5"> because in if you're doing</font>

498
00:23:03,990 --> 00:23:09,429
<font color="#CCCCCC">area math</font><font color="#E5E5E5"> sometimes you want to have a</font>

499
00:23:06,730 --> 00:23:11,549
constant<font color="#CCCCCC"> edit</font><font color="#E5E5E5"> to array and of course you</font>

500
00:23:09,429 --> 00:23:13,779
have commutative operations on<font color="#CCCCCC"> arrays</font>

501
00:23:11,549 --> 00:23:16,539
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> always that you</font><font color="#E5E5E5"> have only one</font>

502
00:23:13,779 --> 00:23:18,610
function<font color="#CCCCCC"> so I think</font><font color="#E5E5E5"> we have around for</font>

503
00:23:16,539 --> 00:23:20,080
all these<font color="#CCCCCC"> mathematical operations like</font>

504
00:23:18,610 --> 00:23:24,729
cosine sine and so on

505
00:23:20,080 --> 00:23:26,918
I think around<font color="#E5E5E5"> 500 functions and one</font>

506
00:23:24,730 --> 00:23:31,600
problem<font color="#E5E5E5"> is is that generic are too weak</font>

507
00:23:26,919 --> 00:23:35,649
<font color="#CCCCCC">so</font><font color="#E5E5E5"> what we did is</font><font color="#CCCCCC"> we wrote our</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> il</font>

508
00:23:31,600 --> 00:23:37,719
code because il is able to add<font color="#E5E5E5"> il is</font>

509
00:23:35,649 --> 00:23:40,750
obviously type agnostic and<font color="#E5E5E5"> is able</font><font color="#CCCCCC"> to</font>

510
00:23:37,720 --> 00:23:42,340
add two values<font color="#E5E5E5"> and it's if you do it</font>

511
00:23:40,750 --> 00:23:45,039
correctly you<font color="#E5E5E5"> get the same speed as a</font>

512
00:23:42,340 --> 00:23:49,149
regular<font color="#E5E5E5"> addition writing it in regular</font>

513
00:23:45,039 --> 00:23:51,658
source code<font color="#E5E5E5"> there was also one thing if</font>

514
00:23:49,149 --> 00:23:55,360
you look<font color="#E5E5E5"> at this mathematical expression</font>

515
00:23:51,659 --> 00:23:58,059
<font color="#E5E5E5">these are volumes 512 512 thousand and</font>

516
00:23:55,360 --> 00:24:00,789
if you want to have<font color="#E5E5E5"> this operation</font><font color="#CCCCCC"> this</font>

517
00:23:58,059 --> 00:24:05,019
is one operation<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you use for</font>

518
00:24:00,789 --> 00:24:07,809
the iterative<font color="#E5E5E5"> reconstruction so 0.3 a</font>

519
00:24:05,019 --> 00:24:10,720
<font color="#CCCCCC">plus B and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> on so here you see what's</font>

520
00:24:07,809 --> 00:24:12,759
happening for<font color="#E5E5E5"> the a plus B you have</font><font color="#CCCCCC"> one</font>

521
00:24:10,720 --> 00:24:14,649
gigabyte<font color="#E5E5E5"> of memory then you add another</font>

522
00:24:12,759 --> 00:24:18,879
gigabyte of memory<font color="#E5E5E5"> because all these</font>

523
00:24:14,649 --> 00:24:21,129
expressions<font color="#CCCCCC"> add up and in the end for</font>

524
00:24:18,879 --> 00:24:23,769
<font color="#E5E5E5">this simple expression</font><font color="#CCCCCC"> I allocated five</font>

525
00:24:21,129 --> 00:24:27,129
gigabytes more than I<font color="#E5E5E5"> need it what we</font>

526
00:24:23,769 --> 00:24:29,679
did is we<font color="#E5E5E5"> release off the expression so</font>

527
00:24:27,129 --> 00:24:31,090
it's a<font color="#E5E5E5"> little bit I was hoping with the</font>

528
00:24:29,679 --> 00:24:33,220
<font color="#CCCCCC">Roslyn we could do a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more</font>

529
00:24:31,090 --> 00:24:34,570
just write the expression because when

530
00:24:33,220 --> 00:24:37,159
you have these<font color="#CCCCCC"> expressions you</font><font color="#E5E5E5"> want to</font>

531
00:24:34,570 --> 00:24:39,859
see the real mathematical expression

532
00:24:37,159 --> 00:24:42,169
and not the long expression<font color="#CCCCCC"> of the</font>

533
00:24:39,859 --> 00:24:43,549
<font color="#CCCCCC">function calls so it's helpful for</font>

534
00:24:42,169 --> 00:24:45,080
debugging<font color="#E5E5E5"> and also helpful for</font>

535
00:24:43,549 --> 00:24:47,749
<font color="#E5E5E5">researchers when they look in the code</font>

536
00:24:45,080 --> 00:24:51,019
<font color="#CCCCCC">so what we did is you</font><font color="#E5E5E5"> apply here is</font>

537
00:24:47,749 --> 00:24:53,659
string and some<font color="#CCCCCC"> Parsa</font><font color="#E5E5E5"> gets into this and</font>

538
00:24:51,019 --> 00:24:56,210
recompiles your code and builds only<font color="#E5E5E5"> one</font>

539
00:24:53,659 --> 00:24:59,599
for loop around<font color="#CCCCCC"> these thousand slices</font>

540
00:24:56,210 --> 00:25:01,820
and extracts<font color="#E5E5E5"> the</font><font color="#CCCCCC"> matigan this expression</font>

541
00:24:59,599 --> 00:25:03,879
into just one<font color="#E5E5E5"> expression column so first</font>

542
00:25:01,820 --> 00:25:06,799
of all you have a factor<font color="#CCCCCC"> of</font><font color="#E5E5E5"> four of</font>

543
00:25:03,879 --> 00:25:10,279
performance<font color="#E5E5E5"> gain and only one gigabyte</font>

544
00:25:06,799 --> 00:25:12,590
of<font color="#E5E5E5"> allocation if you do this and there's</font>

545
00:25:10,279 --> 00:25:15,109
one thing<font color="#E5E5E5"> but I'm not quite good into in</font>

546
00:25:12,590 --> 00:25:18,709
this<font color="#CCCCCC"> Russell support right now</font><font color="#E5E5E5"> what</font>

547
00:25:15,109 --> 00:25:20,629
would<font color="#E5E5E5"> be really helpful would be if you</font>

548
00:25:18,710 --> 00:25:23,359
could write expressions<font color="#E5E5E5"> and before the</font>

549
00:25:20,629 --> 00:25:26,299
real compilation process<font color="#E5E5E5"> some parser</font>

550
00:25:23,359 --> 00:25:28,129
<font color="#CCCCCC">that we write goes into this and expects</font>

551
00:25:26,299 --> 00:25:30,999
this line and inserts<font color="#E5E5E5"> the code directly</font>

552
00:25:28,129 --> 00:25:33,529
<font color="#CCCCCC">so that's currently</font><font color="#E5E5E5"> not really possible</font>

553
00:25:30,999 --> 00:25:36,109
there's also<font color="#E5E5E5"> cast on arrays which is a</font>

554
00:25:33,529 --> 00:25:38,869
little bit<font color="#E5E5E5"> of a problem the same style</font>

555
00:25:36,109 --> 00:25:43,309
because there is no numeric type which

556
00:25:38,869 --> 00:25:44,899
we can apply<font color="#E5E5E5"> on the data and I don't</font>

557
00:25:43,309 --> 00:25:48,940
<font color="#E5E5E5">want to go into this I</font><font color="#CCCCCC"> just show the</font>

558
00:25:44,899 --> 00:25:52,728
cuter things<font color="#E5E5E5"> two minutes all right</font>

559
00:25:48,940 --> 00:25:57,409
has<font color="#CCCCCC"> any one of you gives</font><font color="#E5E5E5"> CUDA all right</font>

560
00:25:52,729 --> 00:26:01,070
in c-sharp<font color="#E5E5E5"> or in C++ yeah the problem is</font>

561
00:25:57,409 --> 00:26:03,559
<font color="#E5E5E5">that in in for the C++ or</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the for</font>

562
00:26:01,070 --> 00:26:05,570
the C sharp environment<font color="#E5E5E5"> there is no real</font>

563
00:26:03,559 --> 00:26:07,460
<font color="#CCCCCC">access so</font><font color="#E5E5E5"> you have these</font><font color="#CCCCCC"> could a trifle</font>

564
00:26:05,570 --> 00:26:10,519
<font color="#E5E5E5">RP you can access with</font><font color="#CCCCCC"> Windows R because</font>

565
00:26:07,460 --> 00:26:14,029
and of course for the back projection

566
00:26:10,519 --> 00:26:15,619
<font color="#E5E5E5">just to give you a few</font><font color="#CCCCCC"> numbers for</font><font color="#E5E5E5"> the</font>

567
00:26:14,029 --> 00:26:20,239
back<font color="#CCCCCC"> projection I showed here</font><font color="#E5E5E5"> we have</font>

568
00:26:15,619 --> 00:26:23,509
around<font color="#CCCCCC"> 134 taro operations per image for</font>

569
00:26:20,239 --> 00:26:28,599
the back<font color="#CCCCCC"> projection so what we did is we</font>

570
00:26:23,509 --> 00:26:31,129
<font color="#E5E5E5">use cuter you</font><font color="#CCCCCC"> can write CUDA in.net as</font>

571
00:26:28,599 --> 00:26:34,820
regular<font color="#E5E5E5"> cuter code of course in C style</font>

572
00:26:31,129 --> 00:26:36,620
or C++ style<font color="#E5E5E5"> this is how the</font><font color="#CCCCCC"> cue the</font>

573
00:26:34,820 --> 00:26:39,139
code looks like

574
00:26:36,620 --> 00:26:42,340
this is here<font color="#CCCCCC"> inserted into the solution</font>

575
00:26:39,140 --> 00:26:45,110
<font color="#E5E5E5">and then if you simply say safe code</font>

576
00:26:42,340 --> 00:26:47,720
there is<font color="#CCCCCC"> a generator that generates the</font>

577
00:26:45,110 --> 00:26:50,029
PTX code<font color="#E5E5E5"> the NVA CC which goes over the</font>

578
00:26:47,720 --> 00:26:52,549
code that is the<font color="#E5E5E5"> real machine code from</font>

579
00:26:50,029 --> 00:26:55,429
CUDA<font color="#E5E5E5"> then there is a designer code that</font>

580
00:26:52,549 --> 00:27:00,168
translated translates the code we<font color="#CCCCCC"> RC</font>

581
00:26:55,429 --> 00:27:02,510
<font color="#E5E5E5">Lang we use C leg for the</font><font color="#CCCCCC"> ast and it</font>

582
00:27:00,169 --> 00:27:05,000
generates a wrapper<font color="#CCCCCC"> for C shop so this</font>

583
00:27:02,510 --> 00:27:07,789
is the<font color="#CCCCCC"> ripa it's a very simple</font><font color="#E5E5E5"> it's just</font>

584
00:27:05,000 --> 00:27:09,620
accessing<font color="#E5E5E5"> a three-dimensional texture</font>

585
00:27:07,789 --> 00:27:11,658
<font color="#E5E5E5">and this would be the code that you</font>

586
00:27:09,620 --> 00:27:13,820
normally<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to write</font><font color="#E5E5E5"> that also is what</font>

587
00:27:11,659 --> 00:27:16,880
you normally<font color="#E5E5E5"> don't see if you use</font><font color="#CCCCCC"> it in</font>

588
00:27:13,820 --> 00:27:23,240
C++ but this is what C++ does for you

589
00:27:16,880 --> 00:27:26,899
I'm<font color="#E5E5E5"> sorry C++ does for you just writing</font>

590
00:27:23,240 --> 00:27:28,850
all these wrappers<font color="#CCCCCC"> around your code and</font>

591
00:27:26,899 --> 00:27:34,158
then<font color="#CCCCCC"> you can execute CUDA code simply</font>

592
00:27:28,850 --> 00:27:38,209
from C shop so this is it<font color="#CCCCCC"> I know it's a</font>

593
00:27:34,159 --> 00:27:40,010
lot of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> just a few pieces</font><font color="#E5E5E5"> and I</font>

594
00:27:38,210 --> 00:27:42,830
would be also interested in the.net core

595
00:27:40,010 --> 00:27:47,169
<font color="#CCCCCC">performance test</font><font color="#E5E5E5"> as someone ever you has</font>

596
00:27:42,830 --> 00:27:47,168
<font color="#CCCCCC">better experiences</font><font color="#E5E5E5"> to me thank you</font>

