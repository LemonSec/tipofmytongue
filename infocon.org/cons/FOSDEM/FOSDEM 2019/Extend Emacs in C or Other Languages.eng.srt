1
00:00:05,259 --> 00:00:11,629
hi my name is<font color="#CCCCCC"> Elena Hampton</font><font color="#E5E5E5"> and I've</font>

2
00:00:09,080 --> 00:00:15,679
been working<font color="#CCCCCC"> on making Emacs external</font>

3
00:00:11,629 --> 00:00:17,090
buoyancy and other languages<font color="#E5E5E5"> so I was</font>

4
00:00:15,679 --> 00:00:19,910
afraid<font color="#CCCCCC"> this</font><font color="#E5E5E5"> stock wouldn't be accepted</font>

5
00:00:17,090 --> 00:00:22,660
at<font color="#CCCCCC"> first because the dev room is mostly</font>

6
00:00:19,910 --> 00:00:32,180
Java stuff so it's kind of far<font color="#E5E5E5"> away from</font>

7
00:00:22,660 --> 00:00:34,480
Emacs<font color="#CCCCCC"> I wouldn't agree with this no</font>

8
00:00:32,180 --> 00:00:34,480
<font color="#E5E5E5">offense</font>

9
00:00:35,019 --> 00:00:43,909
so can we max<font color="#CCCCCC"> you might have heard of it</font>

10
00:00:41,890 --> 00:00:46,309
<font color="#CCCCCC">I'm guessing if you're in this room</font><font color="#E5E5E5"> you</font>

11
00:00:43,909 --> 00:00:48,949
<font color="#E5E5E5">already know a bit</font><font color="#CCCCCC"> about it so I'll go</font>

12
00:00:46,309 --> 00:00:53,659
quick over this so it's<font color="#CCCCCC"> an editor of the</font>

13
00:00:48,949 --> 00:00:55,159
Emacs family has been written in 1973<font color="#E5E5E5"> so</font>

14
00:00:53,659 --> 00:00:59,059
it's technically free<font color="#E5E5E5"> two years old</font>

15
00:00:55,159 --> 00:01:02,420
<font color="#CCCCCC">which</font><font color="#E5E5E5"> is a pretty cool age I guess it's</font>

16
00:00:59,059 --> 00:01:06,500
<font color="#E5E5E5">still popular although it's certainly</font>

17
00:01:02,420 --> 00:01:08,960
less popular<font color="#CCCCCC"> than it was I guess</font><font color="#E5E5E5"> 20 20</font>

18
00:01:06,500 --> 00:01:12,200
years ago<font color="#E5E5E5"> or</font><font color="#CCCCCC"> something so it's</font>

19
00:01:08,960 --> 00:01:14,720
extensible<font color="#CCCCCC"> it's one</font><font color="#E5E5E5"> of the first</font><font color="#CCCCCC"> editor</font>

20
00:01:12,200 --> 00:01:20,120
to be extensible<font color="#E5E5E5"> you know proper</font>

21
00:01:14,720 --> 00:01:23,470
<font color="#CCCCCC">language</font><font color="#E5E5E5"> again no offense these are just</font>

22
00:01:20,120 --> 00:01:26,360
jokes don't<font color="#E5E5E5"> take this too seriously and</font>

23
00:01:23,470 --> 00:01:28,550
<font color="#CCCCCC">it's self documented</font><font color="#E5E5E5"> I was one of the</font>

24
00:01:26,360 --> 00:01:30,140
first as well<font color="#E5E5E5"> which means every</font><font color="#CCCCCC"> time you</font>

25
00:01:28,550 --> 00:01:32,090
extend something<font color="#E5E5E5"> you can put a doc</font>

26
00:01:30,140 --> 00:01:34,010
string<font color="#CCCCCC"> similar to Python if you're</font>

27
00:01:32,090 --> 00:01:36,430
familiar with this and<font color="#E5E5E5"> you can access</font>

28
00:01:34,010 --> 00:01:39,110
<font color="#E5E5E5">the documentation from within Emacs and</font>

29
00:01:36,430 --> 00:01:45,190
everything is you can do everything from

30
00:01:39,110 --> 00:01:49,070
<font color="#E5E5E5">Emacs documented extensive yeah</font><font color="#CCCCCC"> expanded</font>

31
00:01:45,190 --> 00:01:52,908
so it's<font color="#E5E5E5"> UNIX is also intertwined with</font>

32
00:01:49,070 --> 00:01:56,149
the hacker culture so<font color="#E5E5E5"> Lisp was extremely</font>

33
00:01:52,909 --> 00:01:57,890
<font color="#E5E5E5">popular in the MIT</font><font color="#CCCCCC"> AI lab</font><font color="#E5E5E5"> and so you had</font>

34
00:01:56,150 --> 00:02:00,470
they even<font color="#E5E5E5"> developed these machines there</font>

35
00:01:57,890 --> 00:02:02,990
<font color="#CCCCCC">where the processor would actually have</font>

36
00:02:00,470 --> 00:02:06,530
instructions to deal with<font color="#CCCCCC"> consoles</font><font color="#E5E5E5"> and</font>

37
00:02:02,990 --> 00:02:09,288
such so it's<font color="#E5E5E5"> a fascinating stuff I've</font>

38
00:02:06,530 --> 00:02:09,880
put a couple<font color="#CCCCCC"> of links here we explore if</font>

39
00:02:09,288 --> 00:02:14,440
you want to

40
00:02:09,880 --> 00:02:18,460
dig into it<font color="#CCCCCC"> did you know</font>

41
00:02:14,440 --> 00:02:21,490
Stallman had a published<font color="#CCCCCC"> ACN article</font>

42
00:02:18,460 --> 00:02:24,180
<font color="#E5E5E5">abalone max I didn't so that's</font>

43
00:02:21,490 --> 00:02:24,180
<font color="#E5E5E5">interesting</font>

44
00:02:24,450 --> 00:02:29,649
<font color="#CCCCCC">there's a jamie zawinski who made made</font>

45
00:02:27,880 --> 00:02:33,160
the<font color="#CCCCCC"> timeline</font><font color="#E5E5E5"> about the different</font>

46
00:02:29,650 --> 00:02:35,710
families<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Emax</font><font color="#E5E5E5"> that's out there</font>

47
00:02:33,160 --> 00:02:39,250
recently the<font color="#E5E5E5"> Stefan veneer the current</font>

48
00:02:35,710 --> 00:02:41,920
mayor of<font color="#CCCCCC"> Emax rotor</font><font color="#E5E5E5"> like an article</font>

49
00:02:39,250 --> 00:02:46,150
about<font color="#E5E5E5"> how the language evolved and how</font>

50
00:02:41,920 --> 00:02:50,140
it got<font color="#E5E5E5"> all the hits features so plenty</font>

51
00:02:46,150 --> 00:02:50,670
<font color="#E5E5E5">of material to go through so back to the</font>

52
00:02:50,140 --> 00:02:55,320
editor

53
00:02:50,670 --> 00:02:59,260
so in actually extensible in Emacs Lisp

54
00:02:55,320 --> 00:03:01,120
<font color="#CCCCCC">it's it's a nice sort of</font><font color="#E5E5E5"> nice language</font>

55
00:02:59,260 --> 00:03:04,060
<font color="#E5E5E5">although many people familiar with Lisp</font>

56
00:03:01,120 --> 00:03:07,300
<font color="#E5E5E5">would say</font><font color="#CCCCCC"> it's so very well designed it</font>

57
00:03:04,060 --> 00:03:09,190
kind<font color="#CCCCCC"> of grew organically and compared</font><font color="#E5E5E5"> to</font>

58
00:03:07,300 --> 00:03:13,360
other Lisp is maybe<font color="#CCCCCC"> not</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> most</font>

59
00:03:09,190 --> 00:03:16,240
practical<font color="#E5E5E5"> to use so he max has a</font>

60
00:03:13,360 --> 00:03:18,940
bytecode compiler within Emacs written

61
00:03:16,240 --> 00:03:22,420
in Emacs Lisp<font color="#CCCCCC"> and it has a VM so</font>

62
00:03:18,940 --> 00:03:24,940
basically<font color="#CCCCCC"> max is an interpreter for</font><font color="#E5E5E5"> Lisp</font>

63
00:03:22,420 --> 00:03:28,149
which<font color="#CCCCCC"> also you know features editing</font>

64
00:03:24,940 --> 00:03:31,270
commands and such so<font color="#CCCCCC"> it's still</font><font color="#E5E5E5"> no not</font>

65
00:03:28,150 --> 00:03:34,960
very fast<font color="#E5E5E5"> some people have tried to make</font>

66
00:03:31,270 --> 00:03:37,240
<font color="#CCCCCC">it fast</font><font color="#E5E5E5"> faster by so they made the</font>

67
00:03:34,960 --> 00:03:44,290
bytecode<font color="#E5E5E5"> compiler at the moment there's</font>

68
00:03:37,240 --> 00:03:48,190
an experimental<font color="#E5E5E5"> jet branch</font><font color="#CCCCCC"> I haven't</font>

69
00:03:44,290 --> 00:03:50,200
<font color="#E5E5E5">tried</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> yet but it looks promising</font><font color="#CCCCCC"> I've</font>

70
00:03:48,190 --> 00:03:54,670
heard it could speed up by like twice

71
00:03:50,200 --> 00:03:56,649
some use case<font color="#CCCCCC"> and also Tom show me with</font>

72
00:03:54,670 --> 00:04:01,690
who might be in this room<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know</font>

73
00:03:56,650 --> 00:04:05,740
sure here hi<font color="#CCCCCC"> has</font><font color="#E5E5E5"> worked on a compiler</font>

74
00:04:01,690 --> 00:04:07,450
<font color="#E5E5E5">that would target at lvl so the compiler</font>

75
00:04:05,740 --> 00:04:11,170
itself is<font color="#CCCCCC"> written in Emacs is which is</font>

76
00:04:07,450 --> 00:04:12,310
<font color="#E5E5E5">interesting choice he also he also</font>

77
00:04:11,170 --> 00:04:15,989
worked on the<font color="#CCCCCC"> Enix</font>

78
00:04:12,310 --> 00:04:15,990
<font color="#CCCCCC">FFI which I'll talk about later</font>

79
00:04:19,190 --> 00:04:24,240
so if you'll<font color="#E5E5E5"> to</font><font color="#CCCCCC"> externa max</font><font color="#E5E5E5"> there's a</font>

80
00:04:21,899 --> 00:04:27,900
<font color="#CCCCCC">couple of ways</font><font color="#E5E5E5"> to interact</font><font color="#CCCCCC"> with the rest</font>

81
00:04:24,240 --> 00:04:30,720
<font color="#CCCCCC">of</font><font color="#E5E5E5"> your system</font><font color="#CCCCCC"> so initially you add</font>

82
00:04:27,900 --> 00:04:33,330
files<font color="#E5E5E5"> it's a text editor so files are</font><font color="#CCCCCC"> a</font>

83
00:04:30,720 --> 00:04:36,390
common<font color="#E5E5E5"> way to exchange data from one</font>

84
00:04:33,330 --> 00:04:39,330
program to the other<font color="#E5E5E5"> eventually it got</font>

85
00:04:36,390 --> 00:04:42,630
processes so you can start and interact

86
00:04:39,330 --> 00:04:46,080
with process interactively<font color="#E5E5E5"> so the way it</font>

87
00:04:42,630 --> 00:04:48,390
<font color="#E5E5E5">works in Emacs is you associate a</font>

88
00:04:46,080 --> 00:04:51,060
process<font color="#E5E5E5"> in a buffer and so every time</font>

89
00:04:48,390 --> 00:04:53,849
this<font color="#CCCCCC"> process would write</font><font color="#E5E5E5"> stuff it gets</font>

90
00:04:51,060 --> 00:04:57,210
appended to<font color="#E5E5E5"> the buffer and</font><font color="#CCCCCC"> you can set</font>

91
00:04:53,850 --> 00:04:59,360
up callbacks<font color="#CCCCCC"> to process the output</font>

92
00:04:57,210 --> 00:05:04,620
they're called inferior processes in

93
00:04:59,360 --> 00:05:06,630
Emacs<font color="#E5E5E5"> jargon but he also got tcp and UDP</font>

94
00:05:04,620 --> 00:05:10,080
sockets<font color="#E5E5E5"> so you can technically make a</font>

95
00:05:06,630 --> 00:05:13,290
full server and client within Emacs I

96
00:05:10,080 --> 00:05:16,020
know a guy on the mailing list

97
00:05:13,290 --> 00:05:19,230
<font color="#CCCCCC">Nick</font><font color="#E5E5E5"> Ferrier I think he made a full web</font>

98
00:05:16,020 --> 00:05:24,510
server in Emacs<font color="#E5E5E5"> he has a whole</font><font color="#CCCCCC"> webpage</font>

99
00:05:19,230 --> 00:05:27,030
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it it's interesting again</font><font color="#CCCCCC"> so we</font>

100
00:05:24,510 --> 00:05:29,900
also have<font color="#CCCCCC"> D</font><font color="#E5E5E5"> bus but I don't know much</font>

101
00:05:27,030 --> 00:05:32,580
about this so<font color="#E5E5E5"> I don't really go in there</font>

102
00:05:29,900 --> 00:05:34,229
so all<font color="#CCCCCC"> of those methods</font><font color="#E5E5E5"> are not always</font>

103
00:05:32,580 --> 00:05:36,630
convenient<font color="#CCCCCC"> because at</font><font color="#E5E5E5"> some point you</font>

104
00:05:34,230 --> 00:05:40,620
always need to<font color="#CCCCCC"> Sarah</font><font color="#E5E5E5"> dies your data</font>

105
00:05:36,630 --> 00:05:43,230
structure from Lisp<font color="#E5E5E5"> to whatever program</font>

106
00:05:40,620 --> 00:05:47,430
you<font color="#CCCCCC"> want to communicate with you have to</font>

107
00:05:43,230 --> 00:05:49,500
<font color="#CCCCCC">do it in both</font><font color="#E5E5E5"> directions</font><font color="#CCCCCC"> so most common</font>

108
00:05:47,430 --> 00:05:53,610
solutions to to do<font color="#E5E5E5"> this inter process</font>

109
00:05:49,500 --> 00:05:55,730
communication is either you write your

110
00:05:53,610 --> 00:05:59,160
whole<font color="#CCCCCC"> program in</font><font color="#E5E5E5"> puri</font><font color="#CCCCCC"> mask</font><font color="#E5E5E5"> Emacs Lisp</font>

111
00:05:55,730 --> 00:06:01,140
<font color="#E5E5E5">which means no basically no inter</font>

112
00:05:59,160 --> 00:06:04,560
process communication<font color="#E5E5E5"> just everything in</font>

113
00:06:01,140 --> 00:06:06,469
Emacs<font color="#E5E5E5"> alternatively you write a separate</font>

114
00:06:04,560 --> 00:06:08,700
program<font color="#E5E5E5"> and then you call it from Emacs</font>

115
00:06:06,470 --> 00:06:10,320
so you can do the heavy lifting<font color="#CCCCCC"> in your</font>

116
00:06:08,700 --> 00:06:13,229
external<font color="#E5E5E5"> program and then interact</font><font color="#CCCCCC"> with</font>

117
00:06:10,320 --> 00:06:15,750
it for me<font color="#CCCCCC"> works and there's a there's</font>

118
00:06:13,230 --> 00:06:19,020
also another way<font color="#E5E5E5"> that to do things some</font>

119
00:06:15,750 --> 00:06:20,640
some extensions they have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> read so</font>

120
00:06:19,020 --> 00:06:23,849
they have a<font color="#E5E5E5"> separate program but it's a</font>

121
00:06:20,640 --> 00:06:26,550
server<font color="#E5E5E5"> and so you can keep state between</font>

122
00:06:23,850 --> 00:06:28,760
<font color="#E5E5E5">calls from Emacs by keeping</font><font color="#CCCCCC"> it in the</font>

123
00:06:26,550 --> 00:06:28,760
server

124
00:06:31,460 --> 00:06:41,070
so the next way to go about<font color="#E5E5E5"> it is to</font>

125
00:06:36,690 --> 00:06:45,300
have a native<font color="#E5E5E5"> API to interact with the</font>

126
00:06:41,070 --> 00:06:49,740
system<font color="#E5E5E5"> at the most lowest level so a C</font>

127
00:06:45,300 --> 00:06:51,210
<font color="#E5E5E5">API so this is not new</font><font color="#CCCCCC"> some people have</font>

128
00:06:49,740 --> 00:06:55,290
tried<font color="#E5E5E5"> to do this for a while</font>

129
00:06:51,210 --> 00:06:58,349
<font color="#CCCCCC">Steve camp in 2000</font><font color="#E5E5E5"> allowed to have</font><font color="#CCCCCC"> sea</font>

130
00:06:55,290 --> 00:07:00,720
defense so<font color="#CCCCCC"> defenses the way in emacs</font>

131
00:06:58,350 --> 00:07:03,980
<font color="#E5E5E5">core when you implement a new function</font>

132
00:07:00,720 --> 00:07:08,580
<font color="#E5E5E5">in C there is a macro called defend and</font>

133
00:07:03,980 --> 00:07:10,590
defines some stuff for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> and it ends</font>

134
00:07:08,580 --> 00:07:13,800
up<font color="#E5E5E5"> making a new way max this function so</font>

135
00:07:10,590 --> 00:07:17,760
<font color="#CCCCCC">you he made a patch</font><font color="#E5E5E5"> that would allow for</font>

136
00:07:13,800 --> 00:07:20,640
<font color="#CCCCCC">her to glow dynamically C defend it this</font>

137
00:07:17,760 --> 00:07:26,030
way but<font color="#CCCCCC"> it was never merged for various</font>

138
00:07:20,640 --> 00:07:28,950
reasons one of them are Guerrero in<font color="#E5E5E5"> into</font>

139
00:07:26,030 --> 00:07:31,320
on reddit someone told me<font color="#E5E5E5"> actually the</font>

140
00:07:28,950 --> 00:07:35,310
actual rainy<font color="#CCCCCC"> Ruben I didn't know this</font>

141
00:07:31,320 --> 00:07:37,290
guy but<font color="#CCCCCC"> it only shortly after</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> he</font>

142
00:07:35,310 --> 00:07:39,390
made<font color="#CCCCCC"> another</font><font color="#E5E5E5"> improvement on it and try</font>

143
00:07:37,290 --> 00:07:42,660
to send<font color="#E5E5E5"> it but never got merged either</font>

144
00:07:39,390 --> 00:07:44,669
<font color="#E5E5E5">but in it ended up in X</font><font color="#CCCCCC"> Emacs which</font><font color="#E5E5E5"> is a</font>

145
00:07:42,660 --> 00:07:50,100
fork<font color="#E5E5E5"> of Emacs which some of you might</font>

146
00:07:44,670 --> 00:07:52,500
<font color="#CCCCCC">remember from back</font><font color="#E5E5E5"> in the day</font><font color="#CCCCCC"> 2006</font>

147
00:07:50,100 --> 00:07:53,850
<font color="#E5E5E5">Davidoff tried again same idea</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> this</font>

148
00:07:52,500 --> 00:07:57,810
<font color="#E5E5E5">time he used the</font><font color="#CCCCCC"> dip tool for the</font>

149
00:07:53,850 --> 00:08:00,210
dynamic loading<font color="#E5E5E5"> this is a new tool and</font>

150
00:07:57,810 --> 00:08:04,800
sort of libraries<font color="#CCCCCC"> that would that makes</font>

151
00:08:00,210 --> 00:08:06,630
it easy to dynamically<font color="#CCCCCC"> load the</font>

152
00:08:04,800 --> 00:08:09,630
equivalent of<font color="#E5E5E5"> dll's or shared objects on</font>

153
00:08:06,630 --> 00:08:11,909
<font color="#CCCCCC">linux so this this API works on every</font>

154
00:08:09,630 --> 00:08:14,310
platform so this was more portable than

155
00:08:11,910 --> 00:08:16,620
the other<font color="#E5E5E5"> attempts but again never</font>

156
00:08:14,310 --> 00:08:20,660
merged<font color="#E5E5E5"> so why</font><font color="#CCCCCC"> is this</font><font color="#E5E5E5"> never merged</font>

157
00:08:16,620 --> 00:08:22,920
well mostly is because the people

158
00:08:20,660 --> 00:08:26,550
<font color="#E5E5E5">maintaining Emacs which were mostly</font>

159
00:08:22,920 --> 00:08:30,780
<font color="#E5E5E5">Richard</font><font color="#CCCCCC"> Tom and at the time were thread</font>

160
00:08:26,550 --> 00:08:33,500
that people would ship free Emacs along

161
00:08:30,780 --> 00:08:36,169
with already built

162
00:08:33,500 --> 00:08:39,140
shared libraries<font color="#E5E5E5"> which could</font><font color="#CCCCCC"> potentially</font>

163
00:08:36,169 --> 00:08:41,598
<font color="#CCCCCC">not be free so</font><font color="#E5E5E5"> he was afraid</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> who</font>

164
00:08:39,140 --> 00:08:45,860
make bundles of<font color="#CCCCCC"> Emax with non-free</font>

165
00:08:41,599 --> 00:08:52,100
software<font color="#E5E5E5"> so he's pretty</font><font color="#CCCCCC"> I know about</font>

166
00:08:45,860 --> 00:08:53,810
this as you might know but this<font color="#E5E5E5"> this</font>

167
00:08:52,100 --> 00:08:57,590
problem<font color="#E5E5E5"> has been existing for a while in</font>

168
00:08:53,810 --> 00:08:59,329
other projects<font color="#CCCCCC"> GCC for long the for the</font>

169
00:08:57,590 --> 00:09:02,510
longest time also<font color="#E5E5E5"> had</font><font color="#CCCCCC"> issues with this</font>

170
00:08:59,330 --> 00:09:05,390
<font color="#E5E5E5">they wanted plugins dynamic plugins but</font>

171
00:09:02,510 --> 00:09:10,330
<font color="#E5E5E5">they never reach any fraction because of</font>

172
00:09:05,390 --> 00:09:15,590
this GPL problem but<font color="#E5E5E5"> sometime in 2009</font>

173
00:09:10,330 --> 00:09:17,900
<font color="#E5E5E5">they settled on a compromise and this</font>

174
00:09:15,590 --> 00:09:20,480
compromises the<font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> has to have this</font>

175
00:09:17,900 --> 00:09:22,840
symbol<font color="#E5E5E5"> which says the name of the</font>

176
00:09:20,480 --> 00:09:27,350
<font color="#CCCCCC">symbols literally</font><font color="#E5E5E5"> plugins GPL compatible</font>

177
00:09:22,840 --> 00:09:30,830
<font color="#E5E5E5">so you might ask how is this enough to</font>

178
00:09:27,350 --> 00:09:33,260
enforce like<font color="#E5E5E5"> laws and stuff like this</font>

179
00:09:30,830 --> 00:09:38,060
I'm not<font color="#CCCCCC"> a lawyer so I</font><font color="#E5E5E5"> cannot really</font>

180
00:09:33,260 --> 00:09:43,640
explain<font color="#E5E5E5"> the details but so the new</font>

181
00:09:38,060 --> 00:09:44,989
coding standard has this quote so by by

182
00:09:43,640 --> 00:09:46,819
adding<font color="#E5E5E5"> this check</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> your program you</font>

183
00:09:44,990 --> 00:09:48,800
<font color="#E5E5E5">are not creating</font><font color="#CCCCCC"> a new legal</font><font color="#E5E5E5"> requirement</font>

184
00:09:46,820 --> 00:09:53,180
<font color="#E5E5E5">the GPL itself requires plugins to be</font>

185
00:09:48,800 --> 00:09:55,069
free software license compatibly the GPL

186
00:09:53,180 --> 00:09:56,680
<font color="#CCCCCC">in AGP already requires those</font><font color="#E5E5E5"> plugins to</font>

187
00:09:55,070 --> 00:09:59,750
be released under a compatible license

188
00:09:56,680 --> 00:10:02,089
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the symbol definition in the</font><font color="#CCCCCC"> plugin</font>

189
00:09:59,750 --> 00:10:03,680
makes it harder<font color="#CCCCCC"> for</font><font color="#E5E5E5"> anyone who might</font>

190
00:10:02,090 --> 00:10:08,000
distribute<font color="#CCCCCC"> Twitter</font><font color="#E5E5E5"> plugins to legally</font>

191
00:10:03,680 --> 00:10:09,920
defend themselves<font color="#E5E5E5"> if the case against if</font>

192
00:10:08,000 --> 00:10:11,420
<font color="#E5E5E5">I guess about this code to court we can</font>

193
00:10:09,920 --> 00:10:13,010
<font color="#E5E5E5">point to that symbol as evidence that</font>

194
00:10:11,420 --> 00:10:16,550
the<font color="#CCCCCC"> plug-in developer understood that</font>

195
00:10:13,010 --> 00:10:18,439
<font color="#E5E5E5">that the license had this requirement so</font>

196
00:10:16,550 --> 00:10:22,910
we act doesn't really enforce<font color="#E5E5E5"> anything</font>

197
00:10:18,440 --> 00:10:29,540
but it's enough to sue I<font color="#E5E5E5"> guess so that</font>

198
00:10:22,910 --> 00:10:31,490
was the workaround<font color="#E5E5E5"> so 2014 I started my</font>

199
00:10:29,540 --> 00:10:34,520
own attempt<font color="#E5E5E5"> I</font><font color="#CCCCCC"> learned</font><font color="#E5E5E5"> about this</font>

200
00:10:31,490 --> 00:10:37,190
<font color="#E5E5E5">workaround pretty late</font><font color="#CCCCCC"> I thought</font><font color="#E5E5E5"> it</font>

201
00:10:34,520 --> 00:10:40,760
would be a good way to extend the<font color="#CCCCCC"> Emacs</font>

202
00:10:37,190 --> 00:10:44,089
<font color="#E5E5E5">even more so I made</font><font color="#CCCCCC"> it a little</font><font color="#E5E5E5"> based</font>

203
00:10:40,760 --> 00:10:46,149
again it was linking against the Emacs

204
00:10:44,089 --> 00:10:48,459
binary

205
00:10:46,149 --> 00:10:52,420
which is not something you<font color="#E5E5E5"> always want</font>

206
00:10:48,459 --> 00:10:54,008
apparently I'll go on that<font color="#CCCCCC"> later</font><font color="#E5E5E5"> so it</font>

207
00:10:52,420 --> 00:10:55,420
was kind of<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> as before</font><font color="#E5E5E5"> it</font>

208
00:10:54,009 --> 00:10:58,089
<font color="#E5E5E5">allowed you to</font><font color="#CCCCCC"> write three defense</font>

209
00:10:55,420 --> 00:11:00,009
outside of<font color="#E5E5E5"> Emacs and them dynamically</font><font color="#CCCCCC"> I</font>

210
00:10:58,089 --> 00:11:02,500
<font color="#E5E5E5">send it on the mailing list and it was</font>

211
00:11:00,009 --> 00:11:08,410
received positively but people wanted

212
00:11:02,500 --> 00:11:09,759
<font color="#E5E5E5">more</font><font color="#CCCCCC"> there was some iterations on it so</font>

213
00:11:08,410 --> 00:11:15,879
most<font color="#CCCCCC"> people</font><font color="#E5E5E5"> don't like when</font><font color="#CCCCCC"> their editor</font>

214
00:11:09,759 --> 00:11:19,360
crashes<font color="#E5E5E5"> surprising thing right</font><font color="#CCCCCC"> so people</font>

215
00:11:15,879 --> 00:11:21,490
<font color="#E5E5E5">wanted something more robust because the</font>

216
00:11:19,360 --> 00:11:24,790
way it was<font color="#E5E5E5"> done basically</font><font color="#CCCCCC"> you had to</font>

217
00:11:21,490 --> 00:11:28,000
know the the internal<font color="#E5E5E5"> data structures of</font>

218
00:11:24,790 --> 00:11:29,800
Emacs to interact<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> and so after</font>

219
00:11:28,000 --> 00:11:30,790
an updates if you load the same dynamic

220
00:11:29,800 --> 00:11:31,959
<font color="#E5E5E5">plug-in which was written for the</font>

221
00:11:30,790 --> 00:11:33,459
<font color="#E5E5E5">previous version of Emacs</font>

222
00:11:31,959 --> 00:11:35,680
some fields might have been added to

223
00:11:33,459 --> 00:11:38,500
structures and such in a way that would

224
00:11:35,680 --> 00:11:40,979
just make<font color="#E5E5E5"> him a crush and this is really</font>

225
00:11:38,500 --> 00:11:46,149
not something<font color="#E5E5E5"> you want for in text area</font>

226
00:11:40,980 --> 00:11:47,709
<font color="#E5E5E5">so the next situation is it's</font><font color="#CCCCCC"> very</font>

227
00:11:46,149 --> 00:11:51,490
similar<font color="#CCCCCC"> in did</font><font color="#E5E5E5"> this in the design to the</font>

228
00:11:47,709 --> 00:11:54,189
<font color="#CCCCCC">gni which several people might know it's</font>

229
00:11:51,490 --> 00:11:56,100
the Java native interface<font color="#E5E5E5"> it's basically</font>

230
00:11:54,189 --> 00:12:00,399
what<font color="#E5E5E5"> Java uses to do the same thing so</font>

231
00:11:56,100 --> 00:12:04,089
<font color="#CCCCCC">this</font><font color="#E5E5E5"> was the role of help on this people</font>

232
00:12:00,399 --> 00:12:05,829
<font color="#CCCCCC">from big companies</font><font color="#E5E5E5"> actually so Daniel</font>

233
00:12:04,089 --> 00:12:07,959
could<font color="#CCCCCC"> have shown at at least at the time</font>

234
00:12:05,829 --> 00:12:11,378
is<font color="#E5E5E5"> where was working at Facebook and</font>

235
00:12:07,959 --> 00:12:16,959
<font color="#CCCCCC">Philipp Stephanie's at Google all of</font>

236
00:12:11,379 --> 00:12:19,809
<font color="#E5E5E5">Emacs users still out there so we</font>

237
00:12:16,959 --> 00:12:23,469
implemented this and it's the design is

238
00:12:19,809 --> 00:12:25,569
not<font color="#E5E5E5"> different as you see so after more</font>

239
00:12:23,470 --> 00:12:28,899
iterations<font color="#E5E5E5"> it was finally emerged in</font>

240
00:12:25,569 --> 00:12:31,870
Emacs 25 and it was basically<font color="#E5E5E5"> two years</font>

241
00:12:28,899 --> 00:12:33,430
of on and off work<font color="#E5E5E5"> not full-time</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of</font>

242
00:12:31,870 --> 00:12:35,350
reviews and<font color="#E5E5E5"> bike-sharing</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the mailing</font>

243
00:12:33,430 --> 00:12:36,670
<font color="#CCCCCC">list</font><font color="#E5E5E5"> as is always the case with the max</font>

244
00:12:35,350 --> 00:12:43,120
of people complaining<font color="#E5E5E5"> about small stuff</font>

245
00:12:36,670 --> 00:12:44,680
<font color="#CCCCCC">you have to</font><font color="#E5E5E5"> redo things so how does it</font>

246
00:12:43,120 --> 00:12:47,079
<font color="#E5E5E5">work</font><font color="#CCCCCC"> so first of all</font><font color="#E5E5E5"> you have to build</font>

247
00:12:44,680 --> 00:12:48,519
<font color="#E5E5E5">your Emacs with when you configure you</font>

248
00:12:47,079 --> 00:12:49,059
have to<font color="#CCCCCC"> place this</font><font color="#E5E5E5"> flag it's not enabled</font>

249
00:12:48,519 --> 00:12:53,139
by<font color="#E5E5E5"> default</font>

250
00:12:49,059 --> 00:12:55,980
<font color="#E5E5E5">yet still need to pass - - with module</font>

251
00:12:53,139 --> 00:12:55,980
when you run configure

252
00:12:57,160 --> 00:13:04,150
so how does it<font color="#E5E5E5"> work</font><font color="#CCCCCC"> so in this version</font>

253
00:13:01,550 --> 00:13:06,380
you<font color="#E5E5E5"> don't link against the MX binary you</font>

254
00:13:04,150 --> 00:13:09,740
there's a header file just<font color="#E5E5E5"> need to</font>

255
00:13:06,380 --> 00:13:13,520
include and defines a set<font color="#CCCCCC"> of structures</font>

256
00:13:09,740 --> 00:13:16,070
<font color="#E5E5E5">and function pointers by which you</font>

257
00:13:13,520 --> 00:13:20,600
interact<font color="#E5E5E5"> with the Emacs Lisp VM in a</font>

258
00:13:16,070 --> 00:13:25,340
<font color="#CCCCCC">proper</font><font color="#E5E5E5"> API so it doesn't break after</font>

259
00:13:20,600 --> 00:13:27,830
<font color="#CCCCCC">Remax releases so all the function the C</font>

260
00:13:25,340 --> 00:13:41,360
function you want<font color="#E5E5E5"> to expose have to have</font>

261
00:13:27,830 --> 00:13:43,580
this<font color="#E5E5E5"> prototype so you have you have the</font>

262
00:13:41,360 --> 00:13:46,010
Emacs environment<font color="#E5E5E5"> structure which</font><font color="#CCCCCC"> I'll</font>

263
00:13:43,580 --> 00:13:50,330
did go in detail after afterwards<font color="#E5E5E5"> the</font>

264
00:13:46,010 --> 00:13:53,900
number of<font color="#E5E5E5"> arguments</font><font color="#CCCCCC"> an array of Emacs</font>

265
00:13:50,330 --> 00:13:59,030
<font color="#CCCCCC">Lisp values and some</font><font color="#E5E5E5"> user provided</font>

266
00:13:53,900 --> 00:14:00,980
pointer you<font color="#CCCCCC"> can choose and so the</font>

267
00:13:59,030 --> 00:14:03,380
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> provides you with function</font>

268
00:14:00,980 --> 00:14:06,320
pointers to interact with<font color="#E5E5E5"> the VM so this</font>

269
00:14:03,380 --> 00:14:09,920
one would convert a<font color="#CCCCCC"> C int into a new max</font>

270
00:14:06,320 --> 00:14:11,390
Lisp value of int so the function

271
00:14:09,920 --> 00:14:14,780
returns<font color="#E5E5E5"> a new</font><font color="#CCCCCC"> max value which is a no</font>

272
00:14:11,390 --> 00:14:17,090
back type<font color="#E5E5E5"> I'll go on that later so this</font>

273
00:14:14,780 --> 00:14:23,689
<font color="#E5E5E5">is basically yeah what a</font><font color="#CCCCCC"> Emacs Lisp c</font>

274
00:14:17,090 --> 00:14:26,390
function looks like so in order to make

275
00:14:23,690 --> 00:14:31,040
this function<font color="#E5E5E5"> call</font><font color="#CCCCCC"> AB or color ball from</font>

276
00:14:26,390 --> 00:14:33,170
<font color="#E5E5E5">Lisp</font><font color="#CCCCCC"> you you use</font><font color="#E5E5E5"> the environment pointer</font>

277
00:14:31,040 --> 00:14:36,199
<font color="#E5E5E5">there's a function pointer in there</font>

278
00:14:33,170 --> 00:14:38,000
<font color="#E5E5E5">called make function you pass it the</font>

279
00:14:36,200 --> 00:14:40,790
number<font color="#E5E5E5"> of arguments the minimum</font><font color="#CCCCCC"> number</font>

280
00:14:38,000 --> 00:14:43,430
of arguments the maximum this<font color="#E5E5E5"> is the</font>

281
00:14:40,790 --> 00:14:46,099
<font color="#E5E5E5">func the pointer to the function you</font>

282
00:14:43,430 --> 00:14:48,349
<font color="#E5E5E5">defined earlier</font><font color="#CCCCCC"> the C stuff</font>

283
00:14:46,100 --> 00:14:51,380
<font color="#E5E5E5">dog string here and this is the void</font>

284
00:14:48,350 --> 00:14:58,070
star which was the last parameter of the

285
00:14:51,380 --> 00:15:05,779
function here<font color="#CCCCCC"> okay</font>

286
00:14:58,070 --> 00:15:09,740
the<font color="#CCCCCC"> point here so Elise is a lisp</font><font color="#E5E5E5"> -</font>

287
00:15:05,779 --> 00:15:11,209
which<font color="#E5E5E5"> means every symbol as two cells</font><font color="#CCCCCC"> so</font>

288
00:15:09,740 --> 00:15:14,810
it's like having<font color="#CCCCCC"> two namespaces four</font>

289
00:15:11,209 --> 00:15:18,109
variables and functions<font color="#E5E5E5"> so when you do a</font>

290
00:15:14,810 --> 00:15:20,268
defend in a lisp<font color="#E5E5E5"> where you say the</font>

291
00:15:18,110 --> 00:15:22,339
<font color="#E5E5E5">function foo is defined to this code</font>

292
00:15:20,269 --> 00:15:24,230
<font color="#E5E5E5">what it actually does in the background</font>

293
00:15:22,339 --> 00:15:28,579
is setting the function cell of the

294
00:15:24,230 --> 00:15:30,620
symbol foo to this<font color="#E5E5E5"> lambda so that's</font>

295
00:15:28,579 --> 00:15:37,519
basically<font color="#E5E5E5"> what you have to do using the</font>

296
00:15:30,620 --> 00:15:40,550
API<font color="#CCCCCC"> so phone call is the function</font>

297
00:15:37,519 --> 00:15:46,100
pointer<font color="#E5E5E5"> to make a function call in the</font>

298
00:15:40,550 --> 00:15:49,069
<font color="#CCCCCC">ATM you have to pass a symbol to the</font>

299
00:15:46,100 --> 00:15:50,540
<font color="#CCCCCC">offset call this</font><font color="#E5E5E5"> is done via the</font>

300
00:15:49,069 --> 00:15:53,630
<font color="#CCCCCC">internet function which converts a</font>

301
00:15:50,540 --> 00:15:57,969
string to a symbol<font color="#CCCCCC"> so you pass I've said</font>

302
00:15:53,630 --> 00:16:02,120
there's two arguments<font color="#CCCCCC"> the first one is</font>

303
00:15:57,970 --> 00:16:05,660
the<font color="#E5E5E5"> name of the</font><font color="#CCCCCC"> function you want to</font>

304
00:16:02,120 --> 00:16:07,760
bind to and the second one is the<font color="#CCCCCC"> actual</font>

305
00:16:05,660 --> 00:16:10,219
lambda you want to<font color="#E5E5E5"> buy into so this is</font>

306
00:16:07,760 --> 00:16:20,930
<font color="#E5E5E5">exactly yeah</font>

307
00:16:10,220 --> 00:16:22,490
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> set okay</font><font color="#E5E5E5"> so if you put it all</font>

308
00:16:20,930 --> 00:16:25,010
<font color="#E5E5E5">together this is basically what your</font>

309
00:16:22,490 --> 00:16:27,980
plugin would look like you have<font color="#E5E5E5"> the</font>

310
00:16:25,010 --> 00:16:32,750
plug-in<font color="#E5E5E5"> the mandatory symbol to say your</font>

311
00:16:27,980 --> 00:16:35,449
plugin is GPL compatible<font color="#CCCCCC"> you call your</font>

312
00:16:32,750 --> 00:16:38,209
<font color="#E5E5E5">make function you pass all the arguments</font>

313
00:16:35,449 --> 00:16:39,649
<font color="#E5E5E5">and you bind it to the name you want so</font>

314
00:16:38,209 --> 00:16:41,420
in this case this function<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font>

315
00:16:39,649 --> 00:16:50,120
<font color="#E5E5E5">called well through the name my</font><font color="#CCCCCC"> mod -</font>

316
00:16:41,420 --> 00:16:53,540
test<font color="#E5E5E5"> in Lisp</font><font color="#CCCCCC"> and that's it</font><font color="#E5E5E5"> so you would</font>

317
00:16:50,120 --> 00:16:57,850
compound<font color="#E5E5E5"> forgot to mention something</font>

318
00:16:53,540 --> 00:17:00,110
Emacs module in it is the function<font color="#CCCCCC"> that</font>

319
00:16:57,850 --> 00:17:01,430
Emacs will call when<font color="#E5E5E5"> it loads your</font>

320
00:17:00,110 --> 00:17:03,860
<font color="#E5E5E5">plugin so everything that needs to</font><font color="#CCCCCC"> be</font>

321
00:17:01,430 --> 00:17:07,240
initialized is done through here<font color="#E5E5E5"> it's</font>

322
00:17:03,860 --> 00:17:07,240
the entry point of<font color="#E5E5E5"> your module basically</font>

323
00:17:08,060 --> 00:17:11,639
so to compile it's pretty standard if

324
00:17:10,619 --> 00:17:14,159
you're familiar with<font color="#E5E5E5"> the shared</font>

325
00:17:11,640 --> 00:17:17,459
libraries on<font color="#E5E5E5"> Linux so this actually</font>

326
00:17:14,160 --> 00:17:19,920
works as on Windows as well<font color="#CCCCCC"> you just</font>

327
00:17:17,459 --> 00:17:23,760
<font color="#E5E5E5">need to call the equivalent it should</font>

328
00:17:19,920 --> 00:17:27,240
work as well<font color="#CCCCCC"> so first</font><font color="#E5E5E5"> step is you turn</font>

329
00:17:23,760 --> 00:17:30,810
<font color="#CCCCCC">your C into a object code</font><font color="#E5E5E5"> we want to</font>

330
00:17:27,240 --> 00:17:32,310
pass<font color="#E5E5E5"> this position independent flag so</font>

331
00:17:30,810 --> 00:17:35,100
that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> no matter where it's</font>

332
00:17:32,310 --> 00:17:37,800
loaded in the<font color="#CCCCCC"> max binary then you turn</font>

333
00:17:35,100 --> 00:17:43,399
it<font color="#CCCCCC"> into a</font><font color="#E5E5E5"> shirt object this is on this</font>

334
00:17:37,800 --> 00:17:45,990
way it's just<font color="#E5E5E5"> magic incantation</font><font color="#CCCCCC"> so</font>

335
00:17:43,400 --> 00:17:49,850
within the API<font color="#E5E5E5"> how does memory</font>

336
00:17:45,990 --> 00:17:49,850
management works<font color="#E5E5E5"> so every time</font>

337
00:17:50,040 --> 00:17:54,210
<font color="#CCCCCC">a c-list</font><font color="#E5E5E5"> function is called all the</font>

338
00:17:52,560 --> 00:17:55,980
stuff<font color="#CCCCCC"> you allocate in it is</font>

339
00:17:54,210 --> 00:17:57,150
automatically<font color="#E5E5E5"> freed when the function</font>

340
00:17:55,980 --> 00:18:00,630
<font color="#CCCCCC">returns so you don't really</font><font color="#E5E5E5"> have to</font>

341
00:17:57,150 --> 00:18:07,190
worry about memory management<font color="#E5E5E5"> within</font><font color="#CCCCCC"> the</font>

342
00:18:00,630 --> 00:18:10,740
<font color="#CCCCCC">function you can mark values as global</font>

343
00:18:07,190 --> 00:18:14,250
<font color="#CCCCCC">they're reference counted so if you need</font>

344
00:18:10,740 --> 00:18:17,340
to use the same values<font color="#CCCCCC"> in two different</font>

345
00:18:14,250 --> 00:18:20,460
function calls<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> do so by making</font>

346
00:18:17,340 --> 00:18:23,449
<font color="#E5E5E5">them global so in this example I turned</font>

347
00:18:20,460 --> 00:18:26,550
the symbol T which is<font color="#E5E5E5"> true in</font><font color="#CCCCCC"> my crisp I</font>

348
00:18:23,450 --> 00:18:28,950
store it in<font color="#E5E5E5"> this global variable here</font>

349
00:18:26,550 --> 00:18:32,040
and<font color="#E5E5E5"> in this other function I</font><font color="#CCCCCC"> can just</font>

350
00:18:28,950 --> 00:18:34,500
reuse<font color="#E5E5E5"> its without having to</font><font color="#CCCCCC"> intern it</font>

351
00:18:32,040 --> 00:18:40,080
again so it just saves a<font color="#CCCCCC"> couple of calls</font>

352
00:18:34,500 --> 00:18:41,160
<font color="#E5E5E5">this way</font><font color="#CCCCCC"> so yeah unless</font><font color="#E5E5E5"> you need the</font>

353
00:18:40,080 --> 00:18:46,889
global references<font color="#E5E5E5"> you're going to worry</font>

354
00:18:41,160 --> 00:18:50,610
about my memory management<font color="#E5E5E5"> you can only</font>

355
00:18:46,890 --> 00:18:54,360
use the Emacs values you allocated

356
00:18:50,610 --> 00:18:56,790
within Emacs<font color="#E5E5E5"> see these functions like</font>

357
00:18:54,360 --> 00:18:59,969
you cannot have a thread<font color="#E5E5E5"> that would</font>

358
00:18:56,790 --> 00:19:01,770
access those values<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of when you</font>

359
00:18:59,970 --> 00:19:04,280
call<font color="#E5E5E5"> them from Emacs that's one of the</font>

360
00:19:01,770 --> 00:19:04,280
limitation

361
00:19:07,740 --> 00:19:11,650
yeah so usually you would do this - we

362
00:19:10,240 --> 00:19:13,840
<font color="#CCCCCC">have to cash values because you don't -</font>

363
00:19:11,650 --> 00:19:22,020
we compute them every<font color="#E5E5E5"> time you run a</font>

364
00:19:13,840 --> 00:19:24,730
function so error handling<font color="#CCCCCC"> in Exodus has</font>

365
00:19:22,020 --> 00:19:26,800
<font color="#E5E5E5">signal but she</font><font color="#CCCCCC"> doesn't so somehow</font><font color="#E5E5E5"> you</font>

366
00:19:24,730 --> 00:19:28,840
have<font color="#CCCCCC"> to convert so signals were kind of</font>

367
00:19:26,800 --> 00:19:31,450
like exceptions<font color="#CCCCCC"> in other</font><font color="#E5E5E5"> languages and</font>

368
00:19:28,840 --> 00:19:34,379
<font color="#E5E5E5">so somehow she doesn't have them and you</font>

369
00:19:31,450 --> 00:19:40,150
have to<font color="#E5E5E5"> convert those to different</font>

370
00:19:34,380 --> 00:19:43,150
mindset of dealing<font color="#CCCCCC"> with it so the way we</font>

371
00:19:40,150 --> 00:19:46,360
implemented it in Emacs is<font color="#E5E5E5"> if a function</font>

372
00:19:43,150 --> 00:19:48,640
gets signaled<font color="#E5E5E5"> when you call it in the</font>

373
00:19:46,360 --> 00:19:51,310
<font color="#E5E5E5">environment pointer there's a flag that</font>

374
00:19:48,640 --> 00:19:53,260
<font color="#CCCCCC">says you can check for</font><font color="#E5E5E5"> it every</font><font color="#CCCCCC"> time you</font>

375
00:19:51,310 --> 00:19:57,310
call<font color="#E5E5E5"> a function that says whether or not</font>

376
00:19:53,260 --> 00:20:00,750
<font color="#E5E5E5">exited via</font><font color="#CCCCCC"> a signal or if it</font><font color="#E5E5E5"> returned</font>

377
00:19:57,310 --> 00:20:05,800
normally or if it<font color="#E5E5E5"> use the throw thing</font>

378
00:20:00,750 --> 00:20:09,790
you<font color="#E5E5E5"> make the signal in throw so it's</font>

379
00:20:05,800 --> 00:20:12,520
similar to error<font color="#E5E5E5"> no in C it's every time</font>

380
00:20:09,790 --> 00:20:16,240
there's an error<font color="#CCCCCC"> in the Lib C</font>

381
00:20:12,520 --> 00:20:17,710
<font color="#E5E5E5">function calls the leap the</font><font color="#CCCCCC"> Lib C</font>

382
00:20:16,240 --> 00:20:18,910
function would set error<font color="#CCCCCC"> note to a</font>

383
00:20:17,710 --> 00:20:24,550
certain value when you have to check it

384
00:20:18,910 --> 00:20:26,890
afterwards<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> assume</font><font color="#E5E5E5"> here you can</font>

385
00:20:24,550 --> 00:20:31,899
clear<font color="#E5E5E5"> the flag by calling non-local exit</font>

386
00:20:26,890 --> 00:20:33,370
clear yeah so there's two<font color="#CCCCCC"> ways to</font><font color="#E5E5E5"> go</font>

387
00:20:31,900 --> 00:20:35,500
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> either you check every single</font>

388
00:20:33,370 --> 00:20:39,790
API<font color="#E5E5E5"> call or you'll need</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> after</font>

389
00:20:35,500 --> 00:20:41,320
important ones<font color="#E5E5E5"> because the API</font><font color="#CCCCCC"> every</font>

390
00:20:39,790 --> 00:20:43,450
time you do a call it check if there's

391
00:20:41,320 --> 00:20:45,820
already the flag set and if it is it

392
00:20:43,450 --> 00:20:48,130
<font color="#E5E5E5">just doesn't do</font><font color="#CCCCCC"> anything in fails</font>

393
00:20:45,820 --> 00:20:49,210
automatically so you don't<font color="#E5E5E5"> have to</font>

394
00:20:48,130 --> 00:20:51,820
actually<font color="#E5E5E5"> check every call if you know</font>

395
00:20:49,210 --> 00:20:54,720
what you're doing it's very<font color="#E5E5E5"> verbose to</font>

396
00:20:51,820 --> 00:20:57,159
check all the time so that's<font color="#E5E5E5"> unusual</font>

397
00:20:54,720 --> 00:21:02,410
that's how it is<font color="#E5E5E5"> if you want to go from</font>

398
00:20:57,160 --> 00:21:06,670
exceptions to regular error codes so I

399
00:21:02,410 --> 00:21:08,440
also add to add a new image<font color="#CCCCCC"> list</font><font color="#E5E5E5"> object</font>

400
00:21:06,670 --> 00:21:12,310
type so<font color="#E5E5E5"> you can wrap any kind of</font>

401
00:21:08,440 --> 00:21:14,200
pointers so this<font color="#E5E5E5"> function in the API</font>

402
00:21:12,310 --> 00:21:17,950
with a allowed you to<font color="#E5E5E5"> which if you use a</font>

403
00:21:14,200 --> 00:21:20,100
library<font color="#E5E5E5"> that</font><font color="#CCCCCC"> makes</font><font color="#E5E5E5"> provides a handle of</font>

404
00:21:17,950 --> 00:21:22,200
when you open a resource<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

405
00:21:20,100 --> 00:21:26,159
that handle inside<font color="#E5E5E5"> the user point or</font>

406
00:21:22,200 --> 00:21:30,570
this<font color="#E5E5E5"> way so you have</font><font color="#CCCCCC"> a function</font><font color="#E5E5E5"> to make</font>

407
00:21:26,160 --> 00:21:33,000
it<font color="#E5E5E5"> get and set it and they have there's</font>

408
00:21:30,570 --> 00:21:35,370
a<font color="#CCCCCC"> finalizer</font><font color="#E5E5E5"> to it</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> the</font>

409
00:21:33,000 --> 00:21:36,960
<font color="#E5E5E5">object is garbage collected you can set</font>

410
00:21:35,370 --> 00:21:38,939
a function<font color="#E5E5E5"> I will be called when it when</font>

411
00:21:36,960 --> 00:21:46,200
it<font color="#E5E5E5"> does so you don't have leaks</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> way</font>

412
00:21:38,940 --> 00:21:51,050
every<font color="#CCCCCC"> ticks so demo for you have a</font>

413
00:21:46,200 --> 00:21:51,050
really<font color="#CCCCCC"> simple module</font>

414
00:22:10,350 --> 00:22:14,449
can everybody<font color="#E5E5E5"> read fine yeah</font>

415
00:22:21,669 --> 00:22:33,339
so in this in this directory of<font color="#CCCCCC"> Emacs</font>

416
00:22:27,509 --> 00:22:34,749
configured with with modules<font color="#CCCCCC"> you have to</font>

417
00:22:33,339 --> 00:22:43,178
trust me<font color="#CCCCCC"> on this I won't compile it</font>

418
00:22:34,749 --> 00:22:48,479
again it's kind of long<font color="#CCCCCC"> so and in this</font>

419
00:22:43,179 --> 00:22:48,479
folder have my<font color="#CCCCCC"> bundle see</font>

420
00:22:50,490 --> 00:22:59,669
so this is the header<font color="#CCCCCC"> that has all the</font>

421
00:22:53,700 --> 00:23:02,770
<font color="#E5E5E5">API</font><font color="#CCCCCC"> defines you have the monetary symbol</font>

422
00:22:59,669 --> 00:23:06,730
you have<font color="#E5E5E5"> the C function here which we</font>

423
00:23:02,770 --> 00:23:10,480
want to expose<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Emacs</font><font color="#CCCCCC"> it just returns</font>

424
00:23:06,730 --> 00:23:16,120
<font color="#E5E5E5">for you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> this is the bind thing I</font>

425
00:23:10,480 --> 00:23:21,730
showed earlier so it sets the function

426
00:23:16,120 --> 00:23:24,279
set of the symbol so you want<font color="#E5E5E5"> to set you</font>

427
00:23:21,730 --> 00:23:27,220
<font color="#E5E5E5">have a function you want to be able to</font>

428
00:23:24,279 --> 00:23:32,020
<font color="#E5E5E5">call it by the name fool you would pass</font>

429
00:23:27,220 --> 00:23:35,730
foo here<font color="#CCCCCC"> and here you</font><font color="#E5E5E5"> would pass the</font>

430
00:23:32,020 --> 00:23:40,360
lambda<font color="#CCCCCC"> the function that we want</font><font color="#E5E5E5"> to call</font>

431
00:23:35,730 --> 00:23:42,309
so you<font color="#E5E5E5"> enter an upset you</font><font color="#CCCCCC"> enter in the</font>

432
00:23:40,360 --> 00:23:48,639
name<font color="#CCCCCC"> of the function</font><font color="#E5E5E5"> and then you just</font>

433
00:23:42,309 --> 00:23:54,639
<font color="#E5E5E5">make the call by doing a phone call so</font>

434
00:23:48,640 --> 00:23:59,020
if you max packages they<font color="#CCCCCC"> have this way</font>

435
00:23:54,640 --> 00:24:01,630
to say they're<font color="#E5E5E5"> already loaded and so you</font>

436
00:23:59,020 --> 00:24:03,610
call provide at the end of your it is

437
00:24:01,630 --> 00:24:06,940
<font color="#E5E5E5">packages usually so here I just do the</font>

438
00:24:03,610 --> 00:24:10,479
<font color="#E5E5E5">same</font><font color="#CCCCCC"> thing this is equivalent</font><font color="#E5E5E5"> to calling</font>

439
00:24:06,940 --> 00:24:12,899
provide and then the symbol<font color="#E5E5E5"> passed as</font>

440
00:24:10,480 --> 00:24:12,899
argument

441
00:24:17,400 --> 00:24:22,570
so and this<font color="#E5E5E5"> is basically what I showed</font>

442
00:24:19,810 --> 00:24:26,320
earlier<font color="#CCCCCC"> you make a lambda U that has</font>

443
00:24:22,570 --> 00:24:28,860
<font color="#CCCCCC">zero arguments you make it</font><font color="#E5E5E5"> called this</font><font color="#CCCCCC"> C</font>

444
00:24:26,320 --> 00:24:31,899
function because it this<font color="#CCCCCC"> dog</font><font color="#E5E5E5"> string and</font>

445
00:24:28,860 --> 00:24:33,370
the arbitrary pointer<font color="#E5E5E5"> I just</font><font color="#CCCCCC"> pass tool</font>

446
00:24:31,900 --> 00:24:36,880
because I don't<font color="#CCCCCC"> really use it</font><font color="#E5E5E5"> this time</font>

447
00:24:33,370 --> 00:24:39,550
<font color="#E5E5E5">I call bind function to make this</font>

448
00:24:36,880 --> 00:24:42,850
<font color="#E5E5E5">function call a ball by this name and</font>

449
00:24:39,550 --> 00:24:45,820
then I say this module is loaded under

450
00:24:42,850 --> 00:24:47,889
the name<font color="#E5E5E5"> my mod</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> and then I</font>

451
00:24:45,820 --> 00:24:55,110
return<font color="#E5E5E5"> 0 and this</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> gets called</font>

452
00:24:47,890 --> 00:24:57,790
<font color="#E5E5E5">the moment</font><font color="#CCCCCC"> I load it in</font><font color="#E5E5E5"> in Emacs so I</font>

453
00:24:55,110 --> 00:25:00,840
just compile the module you<font color="#E5E5E5"> can see the</font>

454
00:24:57,790 --> 00:25:00,840
comments<font color="#E5E5E5"> being run here</font>

455
00:25:17,840 --> 00:25:20,840
so in order<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to load the</font>

456
00:25:19,430 --> 00:25:24,080
module<font color="#E5E5E5"> address built I have to add it to</font>

457
00:25:20,840 --> 00:25:26,500
<font color="#CCCCCC">a to the</font><font color="#E5E5E5"> path which is searched through</font>

458
00:25:24,080 --> 00:25:26,500
<font color="#E5E5E5">four modules</font>

459
00:25:28,300 --> 00:25:31,930
it's called<font color="#CCCCCC"> load</font><font color="#E5E5E5"> pass</font>

460
00:25:33,690 --> 00:25:37,569
[Music]

461
00:25:50,560 --> 00:25:58,129
no<font color="#E5E5E5"> interest</font><font color="#CCCCCC"> required so this</font><font color="#E5E5E5"> is a symbol</font>

462
00:25:55,100 --> 00:25:59,659
<font color="#E5E5E5">when I put provide this is what the</font>

463
00:25:58,130 --> 00:26:03,980
symbol I used and so this is what I

464
00:25:59,660 --> 00:26:08,710
would require so it has been

465
00:26:03,980 --> 00:26:25,700
successfully loaded<font color="#E5E5E5"> now I can call my</font>

466
00:26:08,710 --> 00:26:28,250
<font color="#CCCCCC">tests and it just returned</font><font color="#E5E5E5"> 42 there's a</font>

467
00:26:25,700 --> 00:26:30,000
couple<font color="#E5E5E5"> of other sites don't don't leave</font>

468
00:26:28,250 --> 00:26:32,260
yet

469
00:26:30,000 --> 00:26:40,070
[Music]

470
00:26:32,260 --> 00:26:42,920
so<font color="#CCCCCC"> the title</font><font color="#E5E5E5"> of the talk</font><font color="#CCCCCC"> was you can</font>

471
00:26:40,070 --> 00:26:50,629
also<font color="#E5E5E5"> extend it using other languages so</font>

472
00:26:42,920 --> 00:26:52,970
as<font color="#E5E5E5"> long</font><font color="#CCCCCC"> as your language</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> a</font>

473
00:26:50,630 --> 00:26:57,170
<font color="#E5E5E5">scandal any valid modules so any</font><font color="#CCCCCC"> shared</font>

474
00:26:52,970 --> 00:26:58,870
object which follows the API<font color="#E5E5E5"> we saw can</font>

475
00:26:57,170 --> 00:27:01,790
be<font color="#CCCCCC"> loaded so if your language can</font>

476
00:26:58,870 --> 00:27:03,229
compile to a shirt object<font color="#E5E5E5"> and many</font>

477
00:27:01,790 --> 00:27:05,480
<font color="#CCCCCC">played pointers and one way</font><font color="#E5E5E5"> or another</font>

478
00:27:03,230 --> 00:27:08,380
<font color="#CCCCCC">then it's probably</font><font color="#E5E5E5"> usable so people have</font>

479
00:27:05,480 --> 00:27:12,800
I've been writing like shim layers<font color="#CCCCCC"> too</font>

480
00:27:08,380 --> 00:27:14,510
to be able<font color="#CCCCCC"> to write modules in other</font>

481
00:27:12,800 --> 00:27:20,990
languages so I know there's<font color="#E5E5E5"> one in rust</font>

482
00:27:14,510 --> 00:27:22,040
Oh camel go name and probably others<font color="#E5E5E5"> so</font>

483
00:27:20,990 --> 00:27:27,130
I haven't<font color="#E5E5E5"> tried them but they're there</font>

484
00:27:22,040 --> 00:27:29,300
<font color="#CCCCCC">so feel free to try</font><font color="#E5E5E5"> them out</font><font color="#CCCCCC"> there's a</font>

485
00:27:27,130 --> 00:27:31,640
<font color="#E5E5E5">extensive documentation written by</font>

486
00:27:29,300 --> 00:27:34,280
<font color="#E5E5E5">Philip Stephanie there's a link there</font>

487
00:27:31,640 --> 00:27:36,620
<font color="#E5E5E5">you can check it covers many cases</font><font color="#CCCCCC"> our</font>

488
00:27:34,280 --> 00:27:38,540
corner cases and questions you<font color="#E5E5E5"> might</font>

489
00:27:36,620 --> 00:27:41,330
<font color="#CCCCCC">have as well</font>

490
00:27:38,540 --> 00:27:44,450
<font color="#CCCCCC">Criswell</font><font color="#E5E5E5"> has a blog where</font><font color="#CCCCCC"> he also</font>

491
00:27:41,330 --> 00:27:47,560
experimented<font color="#E5E5E5"> with it he made a simple</font><font color="#CCCCCC"> c</font>

492
00:27:44,450 --> 00:27:50,330
module and he also has a post about<font color="#CCCCCC"> how</font>

493
00:27:47,560 --> 00:27:54,320
he<font color="#E5E5E5"> managed to use signals</font><font color="#CCCCCC"> unique signals</font>

494
00:27:50,330 --> 00:27:57,050
so<font color="#CCCCCC"> that he made him in a module</font><font color="#E5E5E5"> with a</font>

495
00:27:54,320 --> 00:28:00,110
thread that does certain<font color="#E5E5E5"> things</font><font color="#CCCCCC"> pulling</font>

496
00:27:57,050 --> 00:28:01,549
<font color="#E5E5E5">and other things and every time this</font>

497
00:28:00,110 --> 00:28:04,668
<font color="#E5E5E5">player wants</font><font color="#CCCCCC"> to</font>

498
00:28:01,549 --> 00:28:06,739
single back to the<font color="#E5E5E5"> max process</font><font color="#CCCCCC"> it sings</font>

499
00:28:04,669 --> 00:28:08,779
<font color="#CCCCCC">a it sends a unique signal</font><font color="#E5E5E5"> and it's a</font>

500
00:28:06,739 --> 00:28:11,710
nice way to<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> sync request this way</font>

501
00:28:08,779 --> 00:28:14,119
<font color="#E5E5E5">otherwise with the</font><font color="#CCCCCC"> pure</font><font color="#E5E5E5"> API you can only</font>

502
00:28:11,710 --> 00:28:19,190
call your module from<font color="#CCCCCC"> Emacs there's</font><font color="#E5E5E5"> no</font>

503
00:28:14,119 --> 00:28:24,228
way to independently<font color="#E5E5E5"> make your module</font>

504
00:28:19,190 --> 00:28:26,570
called back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> remix</font><font color="#CCCCCC"> there's another guy</font>

505
00:28:24,229 --> 00:28:29,149
who made plenty<font color="#CCCCCC"> of modules he never</font>

506
00:28:26,570 --> 00:28:34,039
talked<font color="#CCCCCC"> to me but the main a lot of stuff</font>

507
00:28:29,149 --> 00:28:35,359
<font color="#CCCCCC">on github</font><font color="#E5E5E5"> and I'll go very quick</font><font color="#CCCCCC"> so</font>

508
00:28:34,039 --> 00:28:37,879
there's already a bunch<font color="#CCCCCC"> of existing</font>

509
00:28:35,359 --> 00:28:40,879
modules mostly library bindings so

510
00:28:37,879 --> 00:28:43,789
there's one<font color="#CCCCCC"> for SQL</font><font color="#E5E5E5"> leads</font><font color="#CCCCCC"> sison</font>

511
00:28:40,879 --> 00:28:45,918
<font color="#E5E5E5">dependencies</font><font color="#CCCCCC"> sale JSON parsers and</font><font color="#E5E5E5"> other</font>

512
00:28:43,789 --> 00:28:47,809
things some people<font color="#CCCCCC"> have even embedded</font>

513
00:28:45,919 --> 00:28:51,429
interpreters<font color="#CCCCCC"> of other languages in a</font>

514
00:28:47,809 --> 00:28:57,590
<font color="#E5E5E5">module so you can run Python in Emacs</font>

515
00:28:51,429 --> 00:28:58,909
<font color="#CCCCCC">yeah there's or</font><font color="#E5E5E5"> Ruby or do whatever so</font>

516
00:28:57,590 --> 00:29:00,889
the next step would be to write a

517
00:28:58,909 --> 00:29:02,899
foreign function interface which would

518
00:29:00,889 --> 00:29:06,109
allow so at the moment<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to write</font>

519
00:29:02,899 --> 00:29:09,529
C or something<font color="#CCCCCC"> else as an intermediary</font>

520
00:29:06,109 --> 00:29:11,478
layer to<font color="#CCCCCC"> actually access your library so</font>

521
00:29:09,529 --> 00:29:14,149
another way to<font color="#E5E5E5"> go about it would be</font><font color="#CCCCCC"> to</font>

522
00:29:11,479 --> 00:29:17,210
fully stay in Emacs Lisp<font color="#CCCCCC"> and load any</font>

523
00:29:14,149 --> 00:29:19,279
library not specifically module<font color="#E5E5E5"> and so</font>

524
00:29:17,210 --> 00:29:23,509
Tom Tommy has done some work

525
00:29:19,279 --> 00:29:27,229
he made a I'm not<font color="#E5E5E5"> actually a module</font><font color="#CCCCCC"> that</font>

526
00:29:23,509 --> 00:29:29,299
allows<font color="#CCCCCC"> you to write</font><font color="#E5E5E5"> lists to just load</font>

527
00:29:27,229 --> 00:29:31,309
any library<font color="#E5E5E5"> and he hasn't implemented</font>

528
00:29:29,299 --> 00:29:37,690
<font color="#E5E5E5">the GPL</font><font color="#CCCCCC"> track so it will probably</font><font color="#E5E5E5"> never</font>

529
00:29:31,309 --> 00:29:37,690
get merged so yeah that's<font color="#E5E5E5"> it</font>

