1
00:00:04,760 --> 00:00:10,649
so thank<font color="#E5E5E5"> you all for</font><font color="#CCCCCC"> coming thank you</font>

2
00:00:08,090 --> 00:00:13,950
<font color="#E5E5E5">thanks to the</font><font color="#CCCCCC"> hosts for organizing this</font>

3
00:00:10,650 --> 00:00:17,070
event so I'm Fabian<font color="#CCCCCC"> Sciuto</font><font color="#E5E5E5"> embedded</font>

4
00:00:13,950 --> 00:00:21,660
software engineer at a decor<font color="#CCCCCC"> here</font><font color="#E5E5E5"> you</font>

5
00:00:17,070 --> 00:00:24,090
can<font color="#E5E5E5"> find some of the</font><font color="#CCCCCC"> CD stuff I do and</font>

6
00:00:21,660 --> 00:00:26,789
<font color="#E5E5E5">today I want to talk</font><font color="#CCCCCC"> about alternative</font>

7
00:00:24,090 --> 00:00:31,619
programming languages<font color="#CCCCCC"> for safe and</font>

8
00:00:26,789 --> 00:00:34,980
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> ascribe so I will first start</font>

9
00:00:31,619 --> 00:00:38,309
with<font color="#CCCCCC"> a bit of context then I will try to</font>

10
00:00:34,980 --> 00:00:40,680
<font color="#E5E5E5">explain the philosophy of the languages</font>

11
00:00:38,309 --> 00:00:45,419
of my choice<font color="#CCCCCC"> and then I will try</font><font color="#E5E5E5"> to open</font>

12
00:00:40,680 --> 00:00:48,269
<font color="#CCCCCC">more</font><font color="#E5E5E5"> the the perspective with some ideas</font>

13
00:00:45,420 --> 00:00:50,760
on<font color="#CCCCCC"> how the</font><font color="#E5E5E5"> risk 5 community can keep the</font>

14
00:00:48,270 --> 00:00:54,780
door open<font color="#CCCCCC"> for</font><font color="#E5E5E5"> alternative programming</font>

15
00:00:50,760 --> 00:00:57,480
<font color="#E5E5E5">languages</font><font color="#CCCCCC"> so the first question</font><font color="#E5E5E5"> is what</font>

16
00:00:54,780 --> 00:01:00,210
do I mean by alternate you<font color="#CCCCCC"> well</font>

17
00:00:57,480 --> 00:01:06,780
basically it's<font color="#CCCCCC"> everything that is not C</font>

18
00:01:00,210 --> 00:01:08,430
<font color="#E5E5E5">or C++</font><font color="#CCCCCC"> okay so I know that first M is</font>

19
00:01:06,780 --> 00:01:12,869
probably the best audience for<font color="#E5E5E5"> this kind</font>

20
00:01:08,430 --> 00:01:16,860
of talk<font color="#E5E5E5"> but probably most</font><font color="#CCCCCC"> of you</font><font color="#E5E5E5"> are</font>

21
00:01:12,869 --> 00:01:19,319
going you know why what<font color="#E5E5E5"> is wrong with</font>

22
00:01:16,860 --> 00:01:23,610
you and<font color="#E5E5E5"> C++ I'm perfectly fine</font><font color="#CCCCCC"> I like it</font>

23
00:01:19,319 --> 00:01:27,660
it's it's great<font color="#CCCCCC"> so we could talk about</font>

24
00:01:23,610 --> 00:01:29,479
the Stockholm Syndrome<font color="#CCCCCC"> but I think I</font>

25
00:01:27,660 --> 00:01:34,140
will<font color="#E5E5E5"> focus on something more positive</font>

26
00:01:29,479 --> 00:01:38,190
<font color="#CCCCCC">today so there are lots</font><font color="#E5E5E5"> of different</font>

27
00:01:34,140 --> 00:01:40,709
programming languages<font color="#CCCCCC"> a lot of different</font>

28
00:01:38,190 --> 00:01:44,360
<font color="#E5E5E5">principle and of course they all try to</font>

29
00:01:40,709 --> 00:01:49,470
give you to<font color="#E5E5E5"> help you</font><font color="#CCCCCC"> make the best</font>

30
00:01:44,360 --> 00:01:51,450
<font color="#E5E5E5">software the fastest by reducing the</font>

31
00:01:49,470 --> 00:01:53,340
<font color="#E5E5E5">debugging time reducing the maintenance</font>

32
00:01:51,450 --> 00:01:59,489
cost<font color="#CCCCCC"> reduce increasing the possibility</font>

33
00:01:53,340 --> 00:02:00,989
etcetera<font color="#CCCCCC"> etc so I'm sorry</font><font color="#E5E5E5"> if your</font>

34
00:01:59,489 --> 00:02:06,420
<font color="#E5E5E5">favorite language is not in the list</font>

35
00:02:00,989 --> 00:02:09,030
here<font color="#CCCCCC"> so first</font><font color="#E5E5E5"> let me let me let</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> say</font>

36
00:02:06,420 --> 00:02:11,790
that there<font color="#E5E5E5"> is no silver bullets</font><font color="#CCCCCC"> all</font>

37
00:02:09,030 --> 00:02:13,560
<font color="#E5E5E5">right</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> someone tells</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> okay use this</font>

38
00:02:11,790 --> 00:02:15,780
language it's going to be great all your

39
00:02:13,560 --> 00:02:18,140
problems are<font color="#E5E5E5"> solved just</font><font color="#CCCCCC"> run away</font>

40
00:02:15,780 --> 00:02:21,640
<font color="#E5E5E5">there's there's no such thing</font>

41
00:02:18,140 --> 00:02:24,799
but there is a lot of progress<font color="#E5E5E5"> and</font>

42
00:02:21,640 --> 00:02:29,570
improvements to<font color="#E5E5E5"> be made on top of what</font>

43
00:02:24,800 --> 00:02:33,260
<font color="#E5E5E5">you usually get why am i considering</font>

44
00:02:29,570 --> 00:02:36,739
that<font color="#E5E5E5"> let's say this</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> are</font>

45
00:02:33,260 --> 00:02:39,560
alternative<font color="#CCCCCC"> because</font><font color="#E5E5E5"> usually when you get</font>

46
00:02:36,740 --> 00:02:42,110
a piece<font color="#E5E5E5"> of hardware</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> always have a C</font>

47
00:02:39,560 --> 00:02:46,970
C++ compiler with it<font color="#E5E5E5"> which is not</font>

48
00:02:42,110 --> 00:02:50,270
necessarily<font color="#CCCCCC"> true for all the others so I</font>

49
00:02:46,970 --> 00:02:53,450
have a really<font color="#E5E5E5"> clear bias towards two of</font>

50
00:02:50,270 --> 00:02:59,330
them so<font color="#E5E5E5"> that's what that's the languages</font>

51
00:02:53,450 --> 00:03:01,339
that I will talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> so as I</font>

52
00:02:59,330 --> 00:03:02,660
<font color="#E5E5E5">said at the</font><font color="#CCCCCC"> end of the presentation I</font>

53
00:03:01,340 --> 00:03:09,500
<font color="#CCCCCC">will try to</font><font color="#E5E5E5"> open the subject a little</font>

54
00:03:02,660 --> 00:03:12,820
<font color="#E5E5E5">bit more why do I think these two</font>

55
00:03:09,500 --> 00:03:19,209
<font color="#CCCCCC">languages are relevant to the RISC 5</font>

56
00:03:12,820 --> 00:03:21,920
<font color="#E5E5E5">community so these are so a dense</font><font color="#CCCCCC"> park</font>

57
00:03:19,209 --> 00:03:25,910
some say system level programming

58
00:03:21,920 --> 00:03:27,679
languages<font color="#E5E5E5"> or embedded you can say bare</font>

59
00:03:25,910 --> 00:03:30,530
<font color="#CCCCCC">of bare metal</font><font color="#E5E5E5"> programming languages so</font>

60
00:03:27,680 --> 00:03:36,640
they compiled to machine code like like

61
00:03:30,530 --> 00:03:39,080
C C++<font color="#CCCCCC"> westin and another and what I</font>

62
00:03:36,640 --> 00:03:41,540
really<font color="#E5E5E5"> like</font><font color="#CCCCCC"> about those languages is</font>

63
00:03:39,080 --> 00:03:44,810
<font color="#CCCCCC">that they really</font><font color="#E5E5E5"> make the great gap</font>

64
00:03:41,540 --> 00:03:46,760
between on<font color="#E5E5E5"> one hand being very high</font>

65
00:03:44,810 --> 00:03:49,549
level and we I will show you some

66
00:03:46,760 --> 00:03:52,100
examples<font color="#CCCCCC"> and on the</font><font color="#E5E5E5"> other hand being</font>

67
00:03:49,549 --> 00:03:55,690
really close to the hardware<font color="#E5E5E5"> giving a</font>

68
00:03:52,100 --> 00:03:55,690
lot<font color="#E5E5E5"> of control to the</font><font color="#CCCCCC"> to the developers</font>

69
00:03:55,959 --> 00:04:09,770
so yes

70
00:04:02,090 --> 00:04:13,580
<font color="#CCCCCC">-</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> so some keywords about</font><font color="#E5E5E5"> a dance</font>

71
00:04:09,770 --> 00:04:15,410
park<font color="#E5E5E5"> so these languages are relief on</font>

72
00:04:13,580 --> 00:04:18,950
the ground up designed for safety<font color="#E5E5E5"> and</font>

73
00:04:15,410 --> 00:04:21,798
<font color="#CCCCCC">security what's probably</font><font color="#E5E5E5"> the most</font>

74
00:04:18,950 --> 00:04:23,690
important<font color="#E5E5E5"> those two</font><font color="#CCCCCC"> points here</font><font color="#E5E5E5"> powerful</font>

75
00:04:21,798 --> 00:04:27,530
means of specifications I will show you

76
00:04:23,690 --> 00:04:30,050
that<font color="#E5E5E5"> and strong typing what's important</font>

77
00:04:27,530 --> 00:04:32,388
<font color="#E5E5E5">to note</font><font color="#CCCCCC"> here as well is that it's ADA</font>

78
00:04:30,050 --> 00:04:35,720
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Spock are not</font><font color="#E5E5E5"> only strongly typed</font>

79
00:04:32,389 --> 00:04:38,330
<font color="#E5E5E5">they also give you a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> ways to</font>

80
00:04:35,720 --> 00:04:40,880
<font color="#E5E5E5">define your own types which is which</font><font color="#CCCCCC"> is</font>

81
00:04:38,330 --> 00:04:42,729
really<font color="#E5E5E5"> important and then you have all</font>

82
00:04:40,880 --> 00:04:45,860
the good stuff<font color="#E5E5E5"> object</font><font color="#CCCCCC"> oriented</font>

83
00:04:42,729 --> 00:04:52,520
concurrent programming generics etc etc

84
00:04:45,860 --> 00:04:55,010
so<font color="#CCCCCC"> this is my very personal</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> of</font>

85
00:04:52,520 --> 00:04:59,210
explaining the<font color="#CCCCCC"> philosophy of</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> dance</font>

86
00:04:55,010 --> 00:05:01,550
<font color="#CCCCCC">park programming is all about</font>

87
00:04:59,210 --> 00:05:03,200
communication<font color="#E5E5E5"> you have something in your</font>

88
00:05:01,550 --> 00:05:05,900
head you<font color="#CCCCCC"> have an ID</font><font color="#E5E5E5"> and you want to</font>

89
00:05:03,200 --> 00:05:09,640
express it<font color="#CCCCCC"> to different</font><font color="#E5E5E5"> people and</font>

90
00:05:05,900 --> 00:05:11,870
different tools and machines<font color="#CCCCCC"> as well</font>

91
00:05:09,640 --> 00:05:13,849
so of course you talk with the compiler

92
00:05:11,870 --> 00:05:17,060
<font color="#E5E5E5">because that's what is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> make the</font>

93
00:05:13,850 --> 00:05:19,520
code to run<font color="#CCCCCC"> on the CPU</font><font color="#E5E5E5"> you're talking</font>

94
00:05:17,060 --> 00:05:21,110
with other<font color="#E5E5E5"> tools static analyzers</font>

95
00:05:19,520 --> 00:05:23,960
<font color="#CCCCCC">provers I will</font><font color="#E5E5E5"> I will talk about that</font>

96
00:05:21,110 --> 00:05:25,820
<font color="#E5E5E5">again users of your</font><font color="#CCCCCC"> API of course they</font>

97
00:05:23,960 --> 00:05:29,710
have<font color="#E5E5E5"> to understand what you have in</font><font color="#CCCCCC"> mind</font>

98
00:05:25,820 --> 00:05:32,090
when<font color="#E5E5E5"> using the API your team colleagues</font>

99
00:05:29,710 --> 00:05:35,388
working on<font color="#E5E5E5"> maintaining the software</font><font color="#CCCCCC"> that</font>

100
00:05:32,090 --> 00:05:36,979
you wrote<font color="#E5E5E5"> and of course yourself because</font>

101
00:05:35,389 --> 00:05:38,900
we all know very<font color="#E5E5E5"> well that in two weeks</font>

102
00:05:36,979 --> 00:05:43,310
<font color="#E5E5E5">we will</font><font color="#CCCCCC"> never remember what this piece</font>

103
00:05:38,900 --> 00:05:46,159
of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> is doing so let's start</font><font color="#E5E5E5"> with an</font>

104
00:05:43,310 --> 00:05:49,460
example<font color="#E5E5E5"> simple example I'm writing a</font>

105
00:05:46,160 --> 00:05:51,770
driver for this<font color="#E5E5E5"> servo motor so you know</font>

106
00:05:49,460 --> 00:05:53,989
<font color="#E5E5E5">this is a piece of hardware</font><font color="#CCCCCC"> that you can</font>

107
00:05:51,770 --> 00:05:58,340
<font color="#E5E5E5">control by</font><font color="#CCCCCC"> D you can set</font><font color="#E5E5E5"> the position</font>

108
00:05:53,990 --> 00:06:03,860
<font color="#E5E5E5">the angle so this is how I would write</font>

109
00:05:58,340 --> 00:06:05,929
the API in<font color="#CCCCCC"> ada so in</font><font color="#E5E5E5"> other languages</font><font color="#CCCCCC"> you</font>

110
00:06:03,860 --> 00:06:08,900
may just use<font color="#E5E5E5"> a float a floating point as</font>

111
00:06:05,930 --> 00:06:12,830
an<font color="#E5E5E5"> argument for your sub program to set</font>

112
00:06:08,900 --> 00:06:15,179
the angle<font color="#CCCCCC"> but floating point is</font><font color="#E5E5E5"> really</font>

113
00:06:12,830 --> 00:06:19,500
not<font color="#E5E5E5"> enough information</font>

114
00:06:15,180 --> 00:06:22,380
for the API because<font color="#E5E5E5"> it can be</font><font color="#CCCCCC"> radians</font>

115
00:06:19,500 --> 00:06:25,560
<font color="#CCCCCC">can be degrees can be a</font><font color="#E5E5E5"> percentage from</font>

116
00:06:22,380 --> 00:06:28,380
0 to 1<font color="#E5E5E5"> or minus</font><font color="#CCCCCC"> 1 to 1</font><font color="#E5E5E5"> there is not</font>

117
00:06:25,560 --> 00:06:30,210
enough information with<font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> you have the</font>

118
00:06:28,380 --> 00:06:32,820
means to specify what you<font color="#E5E5E5"> really mean</font>

119
00:06:30,210 --> 00:06:35,370
so you declare your own type<font color="#CCCCCC"> with</font><font color="#E5E5E5"> some</font>

120
00:06:32,820 --> 00:06:38,969
restriction you<font color="#E5E5E5"> say</font><font color="#CCCCCC"> ok it's a float but</font>

121
00:06:35,370 --> 00:06:42,930
I only allow values between minus 90 to

122
00:06:38,970 --> 00:06:46,410
plus 90<font color="#E5E5E5"> so just by doing this you're</font>

123
00:06:42,930 --> 00:06:48,320
giving a lot of<font color="#E5E5E5"> information through the</font>

124
00:06:46,410 --> 00:06:50,460
compiler<font color="#CCCCCC"> that will decide the right</font>

125
00:06:48,320 --> 00:06:53,880
representation<font color="#CCCCCC"> in the hardware for this</font>

126
00:06:50,460 --> 00:06:55,919
<font color="#E5E5E5">for this type through the</font><font color="#CCCCCC"> checker that</font>

127
00:06:53,880 --> 00:06:58,230
will check if<font color="#E5E5E5"> the values are correct</font>

128
00:06:55,920 --> 00:07:03,660
<font color="#E5E5E5">within</font><font color="#CCCCCC"> the range to the user of the API</font>

129
00:06:58,230 --> 00:07:08,130
etc etc<font color="#E5E5E5"> another means of specification</font>

130
00:07:03,660 --> 00:07:11,610
in in<font color="#CCCCCC"> EDA is the what</font><font color="#E5E5E5"> we call what is</font>

131
00:07:08,130 --> 00:07:14,370
called the programming by contract so

132
00:07:11,610 --> 00:07:16,710
you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> preconditions</font><font color="#E5E5E5"> something that</font>

133
00:07:14,370 --> 00:07:19,320
must be true<font color="#E5E5E5"> when you call the sub</font>

134
00:07:16,710 --> 00:07:21,330
program and a post condition something

135
00:07:19,320 --> 00:07:24,120
that is<font color="#CCCCCC"> guaranteed to be</font><font color="#E5E5E5"> true when the</font>

136
00:07:21,330 --> 00:07:26,390
sub program returns<font color="#E5E5E5"> so very classic</font>

137
00:07:24,120 --> 00:07:29,940
basic<font color="#E5E5E5"> example you write a stack of</font>

138
00:07:26,390 --> 00:07:31,500
course it doesn't<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sense to push</font>

139
00:07:29,940 --> 00:07:34,880
something<font color="#CCCCCC"> on the stack</font><font color="#E5E5E5"> if the stack</font><font color="#CCCCCC"> is</font>

140
00:07:31,500 --> 00:07:37,500
full so you express it in the API<font color="#E5E5E5"> and</font>

141
00:07:34,880 --> 00:07:39,810
<font color="#E5E5E5">same thing when you once you have pushed</font>

142
00:07:37,500 --> 00:07:42,480
<font color="#E5E5E5">something on the stack</font><font color="#CCCCCC"> well it's not</font>

143
00:07:39,810 --> 00:07:44,190
<font color="#E5E5E5">empty anymore so this is called</font>

144
00:07:42,480 --> 00:07:47,810
programming by contract because the

145
00:07:44,190 --> 00:07:50,180
contract<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that if you give the right</font>

146
00:07:47,810 --> 00:08:02,290
<font color="#E5E5E5">parameters you will get the right</font>

147
00:07:50,180 --> 00:08:04,880
<font color="#CCCCCC">outcome of the abscissa program so</font>

148
00:08:02,290 --> 00:08:08,920
now let's take an example<font color="#CCCCCC"> that is</font>

149
00:08:04,880 --> 00:08:11,060
probably more<font color="#E5E5E5"> relevant to this room</font><font color="#CCCCCC"> so</font>

150
00:08:08,920 --> 00:08:13,460
<font color="#CCCCCC">something that I don't</font><font color="#E5E5E5"> have time to talk</font>

151
00:08:11,060 --> 00:08:15,920
about<font color="#E5E5E5"> there is some kind of real-time</font>

152
00:08:13,460 --> 00:08:20,299
<font color="#E5E5E5">operating system within the ADA</font>

153
00:08:15,920 --> 00:08:22,310
programming languages<font color="#CCCCCC"> there's actually a</font>

154
00:08:20,300 --> 00:08:24,310
blog post if<font color="#E5E5E5"> you go to blog that ADA</font>

155
00:08:22,310 --> 00:08:28,040
<font color="#E5E5E5">code</font><font color="#CCCCCC"> come I have a blog post</font><font color="#E5E5E5"> about this</font>

156
00:08:24,310 --> 00:08:30,290
<font color="#CCCCCC">so right now I'm working on porting this</font>

157
00:08:28,040 --> 00:08:33,110
real-time operating system<font color="#CCCCCC"> through risk</font>

158
00:08:30,290 --> 00:08:36,020
right<font color="#E5E5E5"> and so I have to work with</font><font color="#CCCCCC"> the</font>

159
00:08:33,110 --> 00:08:39,169
<font color="#E5E5E5">platform local interrupt controller to</font>

160
00:08:36,020 --> 00:08:43,610
<font color="#CCCCCC">under</font><font color="#E5E5E5"> all interrupts so this is from the</font>

161
00:08:39,169 --> 00:08:45,430
the specification<font color="#E5E5E5"> very quickly the</font><font color="#CCCCCC"> idea</font>

162
00:08:43,610 --> 00:08:48,500
is that<font color="#E5E5E5"> you know there's an interrupt</font>

163
00:08:45,430 --> 00:08:52,099
notification<font color="#E5E5E5"> some piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> software here</font>

164
00:08:48,500 --> 00:08:56,150
<font color="#E5E5E5">we are playing the</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> so I want</font>

165
00:08:52,100 --> 00:09:00,530
to<font color="#E5E5E5"> service this interrupt the PL IC will</font>

166
00:08:56,150 --> 00:09:03,050
answer<font color="#E5E5E5"> with an interrupt ID the software</font>

167
00:09:00,530 --> 00:09:05,089
under<font color="#CCCCCC"> the interrupts</font><font color="#E5E5E5"> and then we signal</font>

168
00:09:03,050 --> 00:09:11,839
<font color="#E5E5E5">the completion of the</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> through</font>

169
00:09:05,090 --> 00:09:14,780
the to the PL IC so how do we specify

170
00:09:11,840 --> 00:09:17,960
this in our code<font color="#E5E5E5"> so first we define our</font>

171
00:09:14,780 --> 00:09:20,449
types so this value here<font color="#CCCCCC"> will be</font>

172
00:09:17,960 --> 00:09:24,980
dependent on the<font color="#CCCCCC"> on the implementation</font>

173
00:09:20,450 --> 00:09:28,970
<font color="#CCCCCC">but let's say I have maximum of the last</font>

174
00:09:24,980 --> 00:09:33,530
<font color="#CCCCCC">interrupts ID is 15</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a common</font>

175
00:09:28,970 --> 00:09:36,380
design pattern in in<font color="#CCCCCC"> Eneida</font><font color="#E5E5E5"> so the range</font>

176
00:09:33,530 --> 00:09:40,880
<font color="#E5E5E5">should be 0 to 15 but actually I add one</font>

177
00:09:36,380 --> 00:09:42,410
<font color="#CCCCCC">more value that</font><font color="#E5E5E5"> gives me the opportunity</font>

178
00:09:40,880 --> 00:09:45,320
to<font color="#E5E5E5"> define something that is not</font><font color="#CCCCCC"> an</font>

179
00:09:42,410 --> 00:09:47,630
<font color="#E5E5E5">interrupt so an invalid valuation and</font>

180
00:09:45,320 --> 00:09:52,580
<font color="#CCCCCC">usually we have</font><font color="#E5E5E5"> the prefix any in that</font>

181
00:09:47,630 --> 00:09:55,040
case so I<font color="#E5E5E5"> define my range and I define</font>

182
00:09:52,580 --> 00:09:58,970
that<font color="#E5E5E5"> the last value of the range is</font>

183
00:09:55,040 --> 00:10:01,040
means no<font color="#CCCCCC"> knowing</font><font color="#E5E5E5"> chart then I</font><font color="#CCCCCC"> define a</font>

184
00:09:58,970 --> 00:10:05,450
subtype<font color="#E5E5E5"> because I also want to express</font>

185
00:10:01,040 --> 00:10:11,449
when the<font color="#E5E5E5"> interrupt ID is valid and so</font>

186
00:10:05,450 --> 00:10:14,180
<font color="#E5E5E5">this is a subtype</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the full range okay</font>

187
00:10:11,450 --> 00:10:21,070
so let's write the API

188
00:10:14,180 --> 00:10:24,709
<font color="#CCCCCC">to write our specification we need to</font>

189
00:10:21,070 --> 00:10:27,650
extend<font color="#CCCCCC"> D let's say the definition that</font>

190
00:10:24,710 --> 00:10:29,480
comes from the hardware so this is what

191
00:10:27,650 --> 00:10:31,520
I'm<font color="#E5E5E5"> doing here</font><font color="#CCCCCC"> this function here</font>

192
00:10:29,480 --> 00:10:35,120
<font color="#E5E5E5">claimed that returns the last claim</font>

193
00:10:31,520 --> 00:10:36,710
<font color="#E5E5E5">interrupt is not really implemented by</font>

194
00:10:35,120 --> 00:10:41,080
the hardware<font color="#CCCCCC"> it's not mapping and</font>

195
00:10:36,710 --> 00:10:44,110
hardware feature<font color="#E5E5E5"> but I need this this</font>

196
00:10:41,080 --> 00:10:48,529
<font color="#CCCCCC">function to do my specifications later</font>

197
00:10:44,110 --> 00:10:51,710
<font color="#E5E5E5">this is why I will flag</font><font color="#CCCCCC"> it as ghost</font>

198
00:10:48,529 --> 00:10:54,200
this means<font color="#CCCCCC"> that the compiler no it's</font>

199
00:10:51,710 --> 00:10:56,080
only<font color="#E5E5E5"> used for verification</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

200
00:10:54,200 --> 00:10:59,450
function<font color="#E5E5E5"> will not</font><font color="#CCCCCC"> be in the final</font>

201
00:10:56,080 --> 00:11:02,060
<font color="#E5E5E5">executable so at this</font><font color="#CCCCCC"> function tells me</font>

202
00:10:59,450 --> 00:11:04,460
what what is the last claim<font color="#CCCCCC"> interrupt</font>

203
00:11:02,060 --> 00:11:07,609
<font color="#E5E5E5">and potentially you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> it's any so</font>

204
00:11:04,460 --> 00:11:10,220
it can be no interrupt<font color="#E5E5E5"> so now what is</font>

205
00:11:07,610 --> 00:11:14,750
the the<font color="#E5E5E5"> contract for the for claiming</font>

206
00:11:10,220 --> 00:11:17,060
entered so we can claim an interrupt it

207
00:11:14,750 --> 00:11:20,660
can it can be<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> interrupt</font>

208
00:11:17,060 --> 00:11:23,660
<font color="#CCCCCC">to to 200 so potentially</font><font color="#E5E5E5"> you have no</font>

209
00:11:20,660 --> 00:11:26,719
<font color="#E5E5E5">interest here</font><font color="#CCCCCC"> what we want as</font>

210
00:11:23,660 --> 00:11:29,959
<font color="#CCCCCC">precondition is</font><font color="#E5E5E5"> that there is no</font>

211
00:11:26,720 --> 00:11:32,930
interrupt claimed when we start<font color="#E5E5E5"> doing</font>

212
00:11:29,959 --> 00:11:34,579
this<font color="#E5E5E5"> so we cannot we cannot claim an</font>

213
00:11:32,930 --> 00:11:37,760
interrupt when there's already one claim

214
00:11:34,580 --> 00:11:41,600
<font color="#E5E5E5">and once we return from this function</font>

215
00:11:37,760 --> 00:11:47,959
<font color="#E5E5E5">the interrupt claimed is the result of</font>

216
00:11:41,600 --> 00:11:53,540
this function<font color="#CCCCCC"> okay and the</font><font color="#E5E5E5"> last point to</font>

217
00:11:47,959 --> 00:11:55,459
complete the the interrupt so again I

218
00:11:53,540 --> 00:11:59,300
have a contract<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I can</font><font color="#E5E5E5"> only complete</font>

219
00:11:55,459 --> 00:12:01,489
a valid<font color="#E5E5E5"> interrupt so it's not any and</font><font color="#CCCCCC"> my</font>

220
00:11:59,300 --> 00:12:05,359
precondition is that<font color="#E5E5E5"> there is an</font>

221
00:12:01,490 --> 00:12:07,220
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> claimed and that the</font>

222
00:12:05,360 --> 00:12:10,370
interrupts here that I want<font color="#E5E5E5"> to complete</font>

223
00:12:07,220 --> 00:12:13,610
is<font color="#CCCCCC"> the one that was</font><font color="#E5E5E5"> claimed</font><font color="#CCCCCC"> okay and the</font>

224
00:12:10,370 --> 00:12:16,959
<font color="#CCCCCC">pass condition is is that there is no</font>

225
00:12:13,610 --> 00:12:16,959
more<font color="#E5E5E5"> interrupting</font>

226
00:12:20,040 --> 00:12:27,279
so<font color="#E5E5E5"> I'm asking to</font><font color="#CCCCCC"> the expert I'm not sure</font>

227
00:12:24,970 --> 00:12:29,110
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really you know valid</font>

228
00:12:27,279 --> 00:12:31,420
representation of the hardware

229
00:12:29,110 --> 00:12:33,880
specification but what we can say<font color="#E5E5E5"> that</font>

230
00:12:31,420 --> 00:12:37,390
at least<font color="#CCCCCC"> we can talk about this so</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font>

231
00:12:33,880 --> 00:12:39,570
<font color="#E5E5E5">really it's expressed and everybody is</font>

232
00:12:37,390 --> 00:12:45,360
able to to reason<font color="#E5E5E5"> and to and to discuss</font>

233
00:12:39,570 --> 00:12:50,730
now what is<font color="#E5E5E5"> happening how this</font>

234
00:12:45,360 --> 00:12:54,430
constraint<font color="#E5E5E5"> contract</font><font color="#CCCCCC"> are actually used by</font>

235
00:12:50,730 --> 00:12:57,130
<font color="#CCCCCC">the tools so there's there's different</font>

236
00:12:54,430 --> 00:12:57,670
<font color="#CCCCCC">ways the first one is the the runtime</font>

237
00:12:57,130 --> 00:13:02,710
<font color="#CCCCCC">check</font>

238
00:12:57,670 --> 00:13:05,349
so<font color="#E5E5E5"> maybe you noticed but the the two</font>

239
00:13:02,710 --> 00:13:09,250
contracts are actually just<font color="#E5E5E5"> the same as</font>

240
00:13:05,350 --> 00:13:11,920
the code that you write<font color="#E5E5E5"> in</font><font color="#CCCCCC"> EDA</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font>

241
00:13:09,250 --> 00:13:15,550
the compiler can produce code for it

242
00:13:11,920 --> 00:13:19,110
which means<font color="#E5E5E5"> every</font><font color="#CCCCCC"> time you run every</font>

243
00:13:15,550 --> 00:13:21,339
time<font color="#E5E5E5"> you call the complete sub program</font>

244
00:13:19,110 --> 00:13:24,040
there will<font color="#CCCCCC"> be some piece</font><font color="#E5E5E5"> of code that</font>

245
00:13:21,339 --> 00:13:26,160
<font color="#CCCCCC">will check the precondition is true when</font>

246
00:13:24,040 --> 00:13:28,680
<font color="#CCCCCC">you return the</font><font color="#E5E5E5"> post condition is true so</font>

247
00:13:26,160 --> 00:13:33,520
obviously this will have a huge

248
00:13:28,680 --> 00:13:36,370
<font color="#E5E5E5">performance penalty but this is still</font>

249
00:13:33,520 --> 00:13:39,279
something<font color="#E5E5E5"> we want to do for</font><font color="#CCCCCC"> instance for</font>

250
00:13:36,370 --> 00:13:43,890
debug<font color="#CCCCCC"> or testing where performance is</font>

251
00:13:39,279 --> 00:13:48,029
maybe<font color="#CCCCCC"> not the most important thing and</font>

252
00:13:43,890 --> 00:13:51,189
what this<font color="#E5E5E5"> means that when I debug I have</font>

253
00:13:48,029 --> 00:13:55,080
right away<font color="#CCCCCC"> all the information</font><font color="#E5E5E5"> but</font>

254
00:13:51,190 --> 00:13:55,080
what's going<font color="#E5E5E5"> wrong in my application</font><font color="#CCCCCC"> and</font>

255
00:13:55,529 --> 00:13:59,709
<font color="#CCCCCC">same thing</font><font color="#E5E5E5"> for testing you save a lot of</font>

256
00:13:57,880 --> 00:14:02,650
<font color="#E5E5E5">time writing your</font><font color="#CCCCCC"> tests</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font>

257
00:13:59,709 --> 00:14:06,130
already<font color="#E5E5E5"> specified the boundaries</font><font color="#CCCCCC"> of your</font>

258
00:14:02,650 --> 00:14:09,670
inputs outputs and everything is checked

259
00:14:06,130 --> 00:14:12,730
<font color="#CCCCCC">now we can do a little</font><font color="#E5E5E5"> bit better than</font>

260
00:14:09,670 --> 00:14:14,650
that<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> we want to at some</font><font color="#CCCCCC"> point</font>

261
00:14:12,730 --> 00:14:19,209
when we release the the<font color="#E5E5E5"> software</font><font color="#CCCCCC"> you</font>

262
00:14:14,650 --> 00:14:20,949
want<font color="#E5E5E5"> to remove the runtime checks so</font>

263
00:14:19,209 --> 00:14:25,810
there<font color="#E5E5E5"> are multiple solutions</font><font color="#CCCCCC"> for that</font>

264
00:14:20,950 --> 00:14:29,070
first the compiler because<font color="#E5E5E5"> we express a</font>

265
00:14:25,810 --> 00:14:31,650
lot more<font color="#E5E5E5"> with with the contracts</font><font color="#CCCCCC"> and</font>

266
00:14:29,070 --> 00:14:34,170
and with the strong typing<font color="#CCCCCC"> the compiler</font>

267
00:14:31,650 --> 00:14:36,630
can do some basic verification so if you

268
00:14:34,170 --> 00:14:40,920
do<font color="#E5E5E5"> something really obvious like setting</font>

269
00:14:36,630 --> 00:14:43,620
the the servo angle<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show an invalid</font>

270
00:14:40,920 --> 00:14:50,040
value statically the compiler will find

271
00:14:43,620 --> 00:14:52,440
it<font color="#E5E5E5"> very easy the static analyzer</font><font color="#CCCCCC"> so if</font>

272
00:14:50,040 --> 00:14:55,459
you don't know<font color="#E5E5E5"> static analyzer is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> tool</font>

273
00:14:52,440 --> 00:14:58,230
that<font color="#E5E5E5"> will do its best to find bugs</font>

274
00:14:55,460 --> 00:15:00,690
<font color="#E5E5E5">sometimes we compare it</font><font color="#CCCCCC"> to peer review</font>

275
00:14:58,230 --> 00:15:03,440
so the tool will analyze the code and

276
00:15:00,690 --> 00:15:05,760
try to find bugs sometimes<font color="#E5E5E5"> it will find</font>

277
00:15:03,440 --> 00:15:08,730
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are actually not bugs and</font>

278
00:15:05,760 --> 00:15:13,080
some bugs<font color="#E5E5E5"> the the static analyzer will</font>

279
00:15:08,730 --> 00:15:15,330
not find what's the advantage of<font color="#CCCCCC"> EDA in</font>

280
00:15:13,080 --> 00:15:17,210
<font color="#E5E5E5">sparking this in</font><font color="#CCCCCC"> this situation</font><font color="#E5E5E5"> that</font>

281
00:15:15,330 --> 00:15:20,070
because we give a lot<font color="#CCCCCC"> more information</font>

282
00:15:17,210 --> 00:15:25,070
<font color="#E5E5E5">the tools the tool is really more</font>

283
00:15:20,070 --> 00:15:29,130
capable<font color="#E5E5E5"> of giving a good a good result</font>

284
00:15:25,070 --> 00:15:31,860
and the last step which is the somehow

285
00:15:29,130 --> 00:15:35,780
<font color="#CCCCCC">the ultimate goal for</font><font color="#E5E5E5"> software</font>

286
00:15:31,860 --> 00:15:39,240
verification<font color="#E5E5E5"> is the formal verification</font>

287
00:15:35,780 --> 00:15:41,600
<font color="#E5E5E5">so formal verification is actually doing</font>

288
00:15:39,240 --> 00:15:46,020
mathematical proof that there is<font color="#E5E5E5"> no</font>

289
00:15:41,600 --> 00:15:49,410
there<font color="#CCCCCC"> is no bug in your</font><font color="#E5E5E5"> application so</font>

290
00:15:46,020 --> 00:15:54,240
this<font color="#E5E5E5"> is what we do with spark so spark</font>

291
00:15:49,410 --> 00:15:57,990
<font color="#E5E5E5">is a subset</font><font color="#CCCCCC"> of the EDA language</font><font color="#E5E5E5"> in a way</font>

292
00:15:54,240 --> 00:16:00,450
<font color="#CCCCCC">like</font><font color="#E5E5E5"> mizrahi is a subset of</font><font color="#CCCCCC"> seen but as</font>

293
00:15:57,990 --> 00:16:06,060
I said<font color="#E5E5E5"> spark is for formal verification</font>

294
00:16:00,450 --> 00:16:08,040
so spark<font color="#E5E5E5"> transform your software into a</font>

295
00:16:06,060 --> 00:16:10,560
<font color="#CCCCCC">mathematical proof and then we tell you</font>

296
00:16:08,040 --> 00:16:15,230
<font color="#CCCCCC">we'll be able</font><font color="#E5E5E5"> to tell you if there is no</font>

297
00:16:10,560 --> 00:16:20,099
bug at all so this is extremely<font color="#CCCCCC"> powerful</font>

298
00:16:15,230 --> 00:16:21,660
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> can you can say</font><font color="#E5E5E5"> I have a</font>

299
00:16:20,100 --> 00:16:23,550
<font color="#CCCCCC">mathematical proof that there is no</font>

300
00:16:21,660 --> 00:16:25,560
buffer<font color="#E5E5E5"> overflow in my application</font><font color="#CCCCCC"> there</font>

301
00:16:23,550 --> 00:16:28,680
<font color="#E5E5E5">is no division by zero there is no</font>

302
00:16:25,560 --> 00:16:32,849
integer<font color="#E5E5E5"> overflow and for instance that I</font>

303
00:16:28,680 --> 00:16:37,050
follow<font color="#E5E5E5"> the API listed above so of course</font>

304
00:16:32,850 --> 00:16:39,570
<font color="#E5E5E5">very</font><font color="#CCCCCC"> very strong guarantees that</font><font color="#E5E5E5"> you get</font>

305
00:16:37,050 --> 00:16:42,180
from this<font color="#E5E5E5"> tool on the other hand as you</font>

306
00:16:39,570 --> 00:16:42,840
probably guess it's it's<font color="#CCCCCC"> more</font><font color="#E5E5E5"> difficult</font>

307
00:16:42,180 --> 00:16:45,859
to

308
00:16:42,840 --> 00:16:48,720
<font color="#CCCCCC">- to achieve this level</font><font color="#E5E5E5"> of safety</font>

309
00:16:45,860 --> 00:16:51,030
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you have to tell to tell</font><font color="#E5E5E5"> really</font>

310
00:16:48,720 --> 00:16:59,280
<font color="#E5E5E5">precisely how your application is</font>

311
00:16:51,030 --> 00:17:00,839
supposed to work so all<font color="#CCCCCC"> of this is what</font>

312
00:16:59,280 --> 00:17:06,319
what we<font color="#CCCCCC"> can call functional safety</font>

313
00:17:00,840 --> 00:17:09,480
<font color="#CCCCCC">that's the ultimate</font><font color="#E5E5E5"> goal of a tiny spark</font>

314
00:17:06,319 --> 00:17:11,790
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> able to say that your program does</font>

315
00:17:09,480 --> 00:17:17,880
what it's supposed to do and<font color="#CCCCCC"> only what</font>

316
00:17:11,790 --> 00:17:20,790
is supposed<font color="#CCCCCC"> to so this was the really</font>

317
00:17:17,880 --> 00:17:23,310
<font color="#E5E5E5">high level part</font><font color="#CCCCCC"> how do i specify my</font>

318
00:17:20,790 --> 00:17:26,280
application and how do<font color="#CCCCCC"> i check that it</font>

319
00:17:23,310 --> 00:17:29,220
<font color="#E5E5E5">works as</font><font color="#CCCCCC"> i said at the beginning ada</font><font color="#E5E5E5"> in</font>

320
00:17:26,280 --> 00:17:31,920
<font color="#E5E5E5">spark are also great languages for for</font>

321
00:17:29,220 --> 00:17:36,150
<font color="#E5E5E5">art where access manipulating the</font>

322
00:17:31,920 --> 00:17:39,240
hardware for every type that you define

323
00:17:36,150 --> 00:17:41,070
<font color="#E5E5E5">in ada you have the high level view and</font>

324
00:17:39,240 --> 00:17:43,440
you have the<font color="#E5E5E5"> low-level hardware</font>

325
00:17:41,070 --> 00:17:45,899
representation of the type so here it's

326
00:17:43,440 --> 00:17:48,230
not necessarily very interesting<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i</font>

327
00:17:45,900 --> 00:17:50,130
can specify the size in the alignment

328
00:17:48,230 --> 00:17:52,890
<font color="#E5E5E5">for enumerations</font>

329
00:17:50,130 --> 00:17:55,350
same thing so<font color="#CCCCCC"> i</font><font color="#E5E5E5"> can define the size</font>

330
00:17:52,890 --> 00:18:00,780
<font color="#E5E5E5">define the values they</font><font color="#CCCCCC"> are well values</font>

331
00:17:55,350 --> 00:18:05,490
that are used<font color="#E5E5E5"> for each animation for</font>

332
00:18:00,780 --> 00:18:09,750
record<font color="#E5E5E5"> so record is more or less the</font>

333
00:18:05,490 --> 00:18:11,610
equivalent<font color="#E5E5E5"> abstract in</font><font color="#CCCCCC"> c but much more</font>

334
00:18:09,750 --> 00:18:16,340
<font color="#E5E5E5">advanced but let's let's say it's</font>

335
00:18:11,610 --> 00:18:19,080
<font color="#CCCCCC">equivalent here and so again high</font><font color="#E5E5E5"> level</font>

336
00:18:16,340 --> 00:18:22,679
<font color="#CCCCCC">definition of my type and low level</font>

337
00:18:19,080 --> 00:18:26,520
representation specification<font color="#CCCCCC"> so here</font><font color="#E5E5E5"> we</font>

338
00:18:22,680 --> 00:18:30,720
<font color="#E5E5E5">can we can set the ranges</font><font color="#CCCCCC"> of really</font>

339
00:18:26,520 --> 00:18:33,060
which<font color="#E5E5E5"> bits in the in the in debate will</font>

340
00:18:30,720 --> 00:18:37,110
<font color="#E5E5E5">be used</font><font color="#CCCCCC"> by each field of the of the</font>

341
00:18:33,060 --> 00:18:39,000
<font color="#CCCCCC">Ricoh and so the ultimate goal</font><font color="#E5E5E5"> and you</font>

342
00:18:37,110 --> 00:18:41,129
ultimate benefit that you get<font color="#CCCCCC"> from this</font>

343
00:18:39,000 --> 00:18:45,690
<font color="#E5E5E5">is that you don't</font><font color="#CCCCCC"> have to do these kind</font>

344
00:18:41,130 --> 00:18:50,370
of things<font color="#E5E5E5"> anymore this is really a op</font>

345
00:18:45,690 --> 00:18:53,550
one there is no checking whatsoever<font color="#CCCCCC"> and</font>

346
00:18:50,370 --> 00:18:55,530
and so I would say<font color="#E5E5E5"> unfortunately this is</font>

347
00:18:53,550 --> 00:18:56,710
more or<font color="#CCCCCC"> less the the industry standard</font>

348
00:18:55,530 --> 00:18:59,200
for<font color="#CCCCCC"> drive</font>

349
00:18:56,710 --> 00:19:04,390
but this is really really really<font color="#E5E5E5"> really</font>

350
00:18:59,200 --> 00:19:06,250
easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mess up so</font><font color="#CCCCCC"> anaida with all the</font>

351
00:19:04,390 --> 00:19:11,020
<font color="#E5E5E5">art world representation that we define</font>

352
00:19:06,250 --> 00:19:12,789
<font color="#E5E5E5">this is what we would do so here</font><font color="#CCCCCC"> I'm not</font>

353
00:19:11,020 --> 00:19:16,900
<font color="#CCCCCC">using any pointers at all</font>

354
00:19:12,789 --> 00:19:19,480
I declare<font color="#E5E5E5"> variable and I tell to the</font>

355
00:19:16,900 --> 00:19:21,370
compiler<font color="#E5E5E5"> do not allocate this variable</font>

356
00:19:19,480 --> 00:19:24,039
on the<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> do not allocate it on the</font>

357
00:19:21,370 --> 00:19:27,209
hip or whatever<font color="#E5E5E5"> I'm giving you the</font>

358
00:19:24,039 --> 00:19:29,379
address<font color="#E5E5E5"> where this variable is allocated</font>

359
00:19:27,210 --> 00:19:33,220
again very important this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> a</font>

360
00:19:29,380 --> 00:19:38,289
pointer<font color="#E5E5E5"> and then I can just assign the</font>

361
00:19:33,220 --> 00:19:40,450
value to the field I<font color="#CCCCCC"> want to modify so</font>

362
00:19:38,289 --> 00:19:43,629
as you can<font color="#CCCCCC"> guess this</font><font color="#E5E5E5"> is really really</font>

363
00:19:40,450 --> 00:19:45,789
powerful<font color="#CCCCCC"> one slight problem that we have</font>

364
00:19:43,630 --> 00:19:48,250
with<font color="#E5E5E5"> this is that it's it's a bit you</font>

365
00:19:45,789 --> 00:19:50,919
<font color="#E5E5E5">know it's a bit cumbersome to write all</font>

366
00:19:48,250 --> 00:19:53,700
these<font color="#CCCCCC"> things especially with modern</font>

367
00:19:50,919 --> 00:19:58,720
microcontrollers for instance that have

368
00:19:53,700 --> 00:20:03,010
thousands<font color="#E5E5E5"> of registers</font><font color="#CCCCCC"> so something nice</font>

369
00:19:58,720 --> 00:20:05,500
that happened in the world<font color="#E5E5E5"> of arm</font>

370
00:20:03,010 --> 00:20:11,760
microcontroller<font color="#E5E5E5"> is the definition of the</font>

371
00:20:05,500 --> 00:20:15,280
<font color="#E5E5E5">SVD format so SVD is hardware</font>

372
00:20:11,760 --> 00:20:18,129
description<font color="#CCCCCC"> more less of the memory</font>

373
00:20:15,280 --> 00:20:22,149
mapped registers and<font color="#CCCCCC"> we with with the</font>

374
00:20:18,130 --> 00:20:27,490
SVD<font color="#E5E5E5"> to a data tool we can generate all</font>

375
00:20:22,150 --> 00:20:28,840
the hardware mapping<font color="#E5E5E5"> in Ada and I will</font>

376
00:20:27,490 --> 00:20:31,059
come<font color="#CCCCCC"> back to this because I think</font><font color="#E5E5E5"> this</font>

377
00:20:28,840 --> 00:20:36,668
<font color="#E5E5E5">is really like something something</font>

378
00:20:31,059 --> 00:20:40,090
really<font color="#E5E5E5"> really important another point</font>

379
00:20:36,669 --> 00:20:43,140
which might be of interest<font color="#CCCCCC"> ada is really</font>

380
00:20:40,090 --> 00:20:46,809
easy<font color="#CCCCCC"> to interface</font><font color="#E5E5E5"> with the</font><font color="#CCCCCC"> C application</font>

381
00:20:43,140 --> 00:20:48,789
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> instance here I have a</font><font color="#CCCCCC"> C function</font>

382
00:20:46,809 --> 00:20:51,610
that I<font color="#CCCCCC"> want to use in Ada</font><font color="#E5E5E5"> I can just</font>

383
00:20:48,789 --> 00:20:54,390
import it<font color="#E5E5E5"> so I just import I say it's a</font>

384
00:20:51,610 --> 00:20:56,500
<font color="#E5E5E5">C function and I put the symbol here</font>

385
00:20:54,390 --> 00:20:59,190
<font color="#CCCCCC">what's really interesting is that</font><font color="#E5E5E5"> you</font>

386
00:20:56,500 --> 00:21:02,710
still benefit from<font color="#E5E5E5"> the specification</font>

387
00:20:59,190 --> 00:21:05,320
<font color="#E5E5E5">features so you can have a C function</font>

388
00:21:02,710 --> 00:21:07,130
<font color="#CCCCCC">it's still put preconditions pass</font>

389
00:21:05,320 --> 00:21:09,379
conditions on it

390
00:21:07,130 --> 00:21:11,270
and to<font color="#CCCCCC"> explore to use</font><font color="#E5E5E5"> ADA function in</font>

391
00:21:09,380 --> 00:21:22,000
<font color="#CCCCCC">ADA it's just it's just</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> less the</font>

392
00:21:11,270 --> 00:21:24,918
<font color="#CCCCCC">same okay so that's it for the let's say</font>

393
00:21:22,000 --> 00:21:28,460
very quick<font color="#E5E5E5"> introduction to</font><font color="#CCCCCC"> to Ayden's</font>

394
00:21:24,919 --> 00:21:31,130
<font color="#E5E5E5">back</font><font color="#CCCCCC"> maybe you're wondering</font><font color="#E5E5E5"> where this</font>

395
00:21:28,460 --> 00:21:34,700
is<font color="#E5E5E5"> actually used and and the answer is</font>

396
00:21:31,130 --> 00:21:38,660
here<font color="#E5E5E5"> so avionics defense</font><font color="#CCCCCC"> rail in space</font>

397
00:21:34,700 --> 00:21:44,150
<font color="#CCCCCC">these are</font><font color="#E5E5E5"> the really core domain of Ada</font>

398
00:21:38,660 --> 00:21:46,400
and<font color="#E5E5E5"> spark</font><font color="#CCCCCC"> of course what what is</font><font color="#E5E5E5"> command</font>

399
00:21:44,150 --> 00:21:50,750
to those domain is<font color="#E5E5E5"> that failure is not</font>

400
00:21:46,400 --> 00:21:53,299
<font color="#CCCCCC">an option and what's really important to</font>

401
00:21:50,750 --> 00:21:55,549
<font color="#E5E5E5">see as well is</font><font color="#CCCCCC"> that most of them</font><font color="#E5E5E5"> not</font>

402
00:21:53,299 --> 00:22:00,080
necessarily<font color="#E5E5E5"> different but the other</font>

403
00:21:55,549 --> 00:22:02,059
<font color="#CCCCCC">three</font><font color="#E5E5E5"> you not</font><font color="#CCCCCC"> only don't have any rights</font>

404
00:22:00,080 --> 00:22:04,750
to<font color="#E5E5E5"> fail but you also have</font><font color="#CCCCCC"> to prove that</font>

405
00:22:02,059 --> 00:22:07,309
your software<font color="#CCCCCC"> is correct so before</font><font color="#E5E5E5"> you</font>

406
00:22:04,750 --> 00:22:09,260
put an aircraft in the air somebody

407
00:22:07,309 --> 00:22:12,678
somebody will sign and say<font color="#CCCCCC"> ok this is</font>

408
00:22:09,260 --> 00:22:15,530
<font color="#CCCCCC">this</font><font color="#E5E5E5"> aircraft is safe and you have to</font>

409
00:22:12,679 --> 00:22:20,210
prove it to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> this body this</font>

410
00:22:15,530 --> 00:22:24,590
<font color="#CCCCCC">authority</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we also have new emerging</font>

411
00:22:20,210 --> 00:22:27,049
domains<font color="#E5E5E5"> starting to use</font><font color="#CCCCCC"> ADA the</font>

412
00:22:24,590 --> 00:22:29,689
automotive industry<font color="#CCCCCC"> so</font><font color="#E5E5E5"> there's some</font>

413
00:22:27,049 --> 00:22:34,010
really bad off story<font color="#E5E5E5"> these years about</font>

414
00:22:29,690 --> 00:22:39,320
about software<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in the automotive so</font>

415
00:22:34,010 --> 00:22:44,090
we have some companies from Japan<font color="#E5E5E5"> coming</font>

416
00:22:39,320 --> 00:22:46,899
<font color="#CCCCCC">to us asking</font><font color="#E5E5E5"> us how they can use</font><font color="#CCCCCC"> ADA and</font>

417
00:22:44,090 --> 00:22:52,070
<font color="#E5E5E5">in spark to improve their software</font>

418
00:22:46,900 --> 00:22:54,200
security as well so as I said mostly

419
00:22:52,070 --> 00:22:56,990
with spark you you have some very<font color="#E5E5E5"> strong</font>

420
00:22:54,200 --> 00:22:58,340
<font color="#E5E5E5">proofs like the the fact that you you</font>

421
00:22:56,990 --> 00:23:00,620
know there's no buffer overflow in your

422
00:22:58,340 --> 00:23:03,740
application<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is of</font><font color="#CCCCCC"> course really</font>

423
00:23:00,620 --> 00:23:05,719
really interesting for for security<font color="#E5E5E5"> and</font>

424
00:23:03,740 --> 00:23:09,049
so we have some nice projects going on

425
00:23:05,720 --> 00:23:13,070
like<font color="#CCCCCC"> UN which is an ANA pervasive in</font>

426
00:23:09,049 --> 00:23:15,710
spark<font color="#E5E5E5"> we have the French</font><font color="#CCCCCC"> National</font>

427
00:23:13,070 --> 00:23:18,889
<font color="#CCCCCC">Security Agency that also wrote micro</font>

428
00:23:15,710 --> 00:23:21,860
<font color="#CCCCCC">kernel in spark</font><font color="#E5E5E5"> these kind of things</font>

429
00:23:18,890 --> 00:23:24,530
and just a<font color="#E5E5E5"> quick word about the the</font>

430
00:23:21,860 --> 00:23:26,240
company I'm<font color="#CCCCCC"> working with</font><font color="#E5E5E5"> there are some</font>

431
00:23:24,530 --> 00:23:28,460
<font color="#E5E5E5">I think interesting points here</font><font color="#CCCCCC"> so we</font>

432
00:23:26,240 --> 00:23:30,380
<font color="#E5E5E5">are we are</font><font color="#CCCCCC"> developing an ecosystem a</font>

433
00:23:28,460 --> 00:23:34,940
<font color="#E5E5E5">software development ecosystem around a</font>

434
00:23:30,380 --> 00:23:36,580
<font color="#CCCCCC">line spark so compilers what's what's</font>

435
00:23:34,940 --> 00:23:39,500
important I think<font color="#E5E5E5"> is nice here is that</font>

436
00:23:36,580 --> 00:23:43,730
the<font color="#E5E5E5"> ADA compiler</font><font color="#CCCCCC"> coordinate is part</font><font color="#E5E5E5"> of</font>

437
00:23:39,500 --> 00:23:45,770
the GCC<font color="#E5E5E5"> to suite and everything we do at</font>

438
00:23:43,730 --> 00:23:52,640
ADA car is open source so we<font color="#E5E5E5"> have IDs</font>

439
00:23:45,770 --> 00:23:54,590
<font color="#CCCCCC">code</font><font color="#E5E5E5"> coverage etc etc and we do okay I</font>

440
00:23:52,640 --> 00:23:57,040
won't say<font color="#CCCCCC"> true lab but we</font><font color="#E5E5E5"> do support in</font>

441
00:23:54,590 --> 00:23:59,629
C++ as well

442
00:23:57,040 --> 00:24:05,980
we support dozens of platform<font color="#E5E5E5"> and</font>

443
00:23:59,630 --> 00:24:08,390
including risk<font color="#CCCCCC"> 5 since last</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> we do</font>

444
00:24:05,980 --> 00:24:09,950
<font color="#E5E5E5">frontline supports that's one of the</font>

445
00:24:08,390 --> 00:24:12,980
value when you are doing open source

446
00:24:09,950 --> 00:24:16,640
software<font color="#CCCCCC"> you have to be really helpful</font>

447
00:24:12,980 --> 00:24:17,600
<font color="#E5E5E5">to your customers and if you don't know</font>

448
00:24:16,640 --> 00:24:23,929
what this<font color="#E5E5E5"> is</font>

449
00:24:17,600 --> 00:24:25,668
well lucky you and so big<font color="#E5E5E5"> an instrument</font>

450
00:24:23,929 --> 00:24:28,010
for this week I'm really<font color="#E5E5E5"> happy about</font>

451
00:24:25,669 --> 00:24:31,130
this attacker<font color="#CCCCCC"> drawing</font><font color="#E5E5E5"> the risk 5</font>

452
00:24:28,010 --> 00:24:33,410
<font color="#CCCCCC">Foundation just</font><font color="#E5E5E5"> this week so I'm really</font>

453
00:24:31,130 --> 00:24:35,440
happy and I was<font color="#E5E5E5"> supposed to be able to</font>

454
00:24:33,410 --> 00:24:38,660
<font color="#CCCCCC">do another announcement this week</font><font color="#E5E5E5"> but</font>

455
00:24:35,440 --> 00:24:42,440
it's going<font color="#E5E5E5"> to be next week</font><font color="#CCCCCC"> ok I'm</font><font color="#E5E5E5"> sorry</font>

456
00:24:38,660 --> 00:24:44,390
<font color="#E5E5E5">so follow us on Twitter and other stuff</font>

457
00:24:42,440 --> 00:24:48,559
<font color="#CCCCCC">we have we have big announcements</font><font color="#E5E5E5"> around</font>

458
00:24:44,390 --> 00:24:54,679
the<font color="#E5E5E5"> wrist</font><font color="#CCCCCC"> five for next</font><font color="#E5E5E5"> next week where</font>

459
00:24:48,559 --> 00:24:57,379
am<font color="#E5E5E5"> I okay so now I just want</font><font color="#CCCCCC"> to give you</font>

460
00:24:54,679 --> 00:24:59,620
a quick getting started the overview<font color="#E5E5E5"> I</font>

461
00:24:57,380 --> 00:25:02,890
won't do any live demo because<font color="#E5E5E5"> that's a</font>

462
00:24:59,620 --> 00:25:02,889
recipe<font color="#CCCCCC"> for failure</font>

463
00:25:06,750 --> 00:25:13,540
these are the the true solutions that

464
00:25:11,290 --> 00:25:15,760
you can use<font color="#E5E5E5"> right now to hardware</font>

465
00:25:13,540 --> 00:25:20,320
solution that you can<font color="#E5E5E5"> use with</font><font color="#CCCCCC"> ADA</font><font color="#E5E5E5"> very</font>

466
00:25:15,760 --> 00:25:22,000
easily<font color="#CCCCCC"> so as I said the ADA compiler is</font>

467
00:25:20,320 --> 00:25:24,370
part of GCC so if you know<font color="#CCCCCC"> how to</font>

468
00:25:22,000 --> 00:25:27,040
compile GCC you can also quite easily

469
00:25:24,370 --> 00:25:28,959
compile<font color="#CCCCCC"> NAT and use it on any other</font><font color="#E5E5E5"> way</font>

470
00:25:27,040 --> 00:25:31,000
<font color="#E5E5E5">you want I'm mentioning those two</font>

471
00:25:28,960 --> 00:25:33,610
because<font color="#CCCCCC"> we have out-of-the-box report</font>

472
00:25:31,000 --> 00:25:37,090
for it so it's going to<font color="#E5E5E5"> be easier</font><font color="#CCCCCC"> so</font>

473
00:25:33,610 --> 00:25:40,809
this one is the<font color="#CCCCCC"> Wi-Fi</font><font color="#E5E5E5"> one from</font><font color="#CCCCCC"> sy5 you</font>

474
00:25:37,090 --> 00:25:41,350
<font color="#E5E5E5">probably know it this</font><font color="#CCCCCC"> is a tiny</font><font color="#E5E5E5"> FPGA</font>

475
00:25:40,809 --> 00:25:44,920
Beeks

476
00:25:41,350 --> 00:25:47,290
so what it<font color="#E5E5E5"> means</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> any FPGA I</font>

477
00:25:44,920 --> 00:25:54,660
have a blog post<font color="#E5E5E5"> using specially this</font>

478
00:25:47,290 --> 00:25:54,659
one and I used the<font color="#CCCCCC"> Pico shock I think</font>

479
00:25:55,470 --> 00:26:04,170
soft soft CPU on this so quick

480
00:26:00,610 --> 00:26:06,850
instructions<font color="#CCCCCC"> you go to our download page</font>

481
00:26:04,170 --> 00:26:10,750
<font color="#E5E5E5">on the community you can download the</font>

482
00:26:06,850 --> 00:26:12,428
<font color="#CCCCCC">community edition</font><font color="#E5E5E5"> about tools you have</font>

483
00:26:10,750 --> 00:26:15,370
the cross compiler here and<font color="#E5E5E5"> I also</font>

484
00:26:12,429 --> 00:26:20,290
recommend taking<font color="#E5E5E5"> the native one because</font>

485
00:26:15,370 --> 00:26:21,610
there is the IDE and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SPARC approvals</font>

486
00:26:20,290 --> 00:26:26,409
as well if you want<font color="#E5E5E5"> to have a look</font><font color="#CCCCCC"> at</font>

487
00:26:21,610 --> 00:26:32,020
that you go to github<font color="#CCCCCC"> we have a project</font>

488
00:26:26,410 --> 00:26:35,140
<font color="#E5E5E5">called sorry ADA drivers library</font><font color="#CCCCCC"> so the</font>

489
00:26:32,020 --> 00:26:38,379
objective is<font color="#CCCCCC"> clear is</font><font color="#E5E5E5"> to develop drivers</font>

490
00:26:35,140 --> 00:26:40,260
<font color="#E5E5E5">in</font><font color="#CCCCCC"> ADA to use on microcontrollers and in</font>

491
00:26:38,380 --> 00:26:45,220
<font color="#E5E5E5">particular we have support</font><font color="#CCCCCC"> for the</font>

492
00:26:40,260 --> 00:26:54,330
<font color="#CCCCCC">high-five</font><font color="#E5E5E5"> one and after</font><font color="#CCCCCC"> that you should</font>

493
00:26:45,220 --> 00:26:54,330
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> do something like</font><font color="#CCCCCC"> this yeah</font>

494
00:26:59,530 --> 00:27:10,540
videos<font color="#E5E5E5"> in PDFs that's not it's not a</font>

495
00:27:03,250 --> 00:27:13,110
<font color="#E5E5E5">good solution</font><font color="#CCCCCC"> orally why I</font><font color="#E5E5E5"> think you get</font>

496
00:27:10,540 --> 00:27:13,110
<font color="#E5E5E5">the idea</font><font color="#CCCCCC"> okay</font>

497
00:27:16,110 --> 00:27:22,600
so for the<font color="#E5E5E5"> last part of my talk I want</font>

498
00:27:19,300 --> 00:27:26,110
as I said to<font color="#E5E5E5"> open the the</font><font color="#CCCCCC"> topic a little</font>

499
00:27:22,600 --> 00:27:27,939
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> and I want to give not necessarily</font>

500
00:27:26,110 --> 00:27:31,750
advice because I'm not really in place

501
00:27:27,940 --> 00:27:33,700
to to do that<font color="#E5E5E5"> but some</font><font color="#CCCCCC"> maybe some some</font>

502
00:27:31,750 --> 00:27:36,700
ideas from my point of view<font color="#E5E5E5"> on how the</font>

503
00:27:33,700 --> 00:27:40,690
risk<font color="#CCCCCC"> 5 community can keep the door open</font>

504
00:27:36,700 --> 00:27:44,140
for alternative languages<font color="#CCCCCC"> so first I</font>

505
00:27:40,690 --> 00:27:46,000
want to say that the<font color="#E5E5E5"> risk 5 community is</font>

506
00:27:44,140 --> 00:27:49,330
already<font color="#CCCCCC"> doing very well to support</font>

507
00:27:46,000 --> 00:27:52,240
alternative<font color="#E5E5E5"> languages mainly by by</font>

508
00:27:49,330 --> 00:27:54,399
contributing<font color="#CCCCCC"> to open source compilers</font><font color="#E5E5E5"> so</font>

509
00:27:52,240 --> 00:27:56,500
of course when you support<font color="#E5E5E5"> and so I</font>

510
00:27:54,400 --> 00:27:59,260
<font color="#CCCCCC">watch the talk this morning</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> LLVM</font>

511
00:27:56,500 --> 00:28:01,360
which was<font color="#E5E5E5"> very interesting as soon as</font>

512
00:27:59,260 --> 00:28:03,820
you support<font color="#E5E5E5"> you have support for ascribe</font>

513
00:28:01,360 --> 00:28:05,770
in GCC<font color="#CCCCCC"> and LLVM you know you're almost</font>

514
00:28:03,820 --> 00:28:08,230
already already there that's that's

515
00:28:05,770 --> 00:28:10,680
<font color="#E5E5E5">really important and</font><font color="#CCCCCC"> because of the very</font>

516
00:28:08,230 --> 00:28:13,660
<font color="#CCCCCC">early support in GCC we were able to</font>

517
00:28:10,680 --> 00:28:15,640
start programming<font color="#E5E5E5"> in a dense</font><font color="#CCCCCC"> pack</font><font color="#E5E5E5"> very</font>

518
00:28:13,660 --> 00:28:18,310
quickly

519
00:28:15,640 --> 00:28:21,430
<font color="#CCCCCC">The Beggar's</font><font color="#E5E5E5"> of course</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> open a CD</font>

520
00:28:18,310 --> 00:28:23,379
and<font color="#CCCCCC"> qmu I think I'm particularly</font>

521
00:28:21,430 --> 00:28:25,270
interested in this one<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very</font>

522
00:28:23,380 --> 00:28:30,130
important to<font color="#E5E5E5"> have some simulation tools</font>

523
00:28:25,270 --> 00:28:34,690
to be able<font color="#E5E5E5"> to check quickly</font><font color="#CCCCCC"> your</font>

524
00:28:30,130 --> 00:28:38,190
internment ation so some of<font color="#E5E5E5"> the</font>

525
00:28:34,690 --> 00:28:41,620
challenges<font color="#E5E5E5"> for alternative language</font>

526
00:28:38,190 --> 00:28:43,810
maintenance let's say<font color="#CCCCCC"> so the first one I</font>

527
00:28:41,620 --> 00:28:46,590
<font color="#E5E5E5">think is the complexity of the the</font>

528
00:28:43,810 --> 00:28:49,240
instruction<font color="#E5E5E5"> state set extensions and</font>

529
00:28:46,590 --> 00:28:50,649
actually from from this<font color="#E5E5E5"> morning's</font>

530
00:28:49,240 --> 00:28:58,050
presentation I think<font color="#CCCCCC"> I should also</font>

531
00:28:50,650 --> 00:29:01,840
<font color="#E5E5E5">mention the</font><font color="#CCCCCC"> ABI so when if you are</font>

532
00:28:58,050 --> 00:29:03,820
<font color="#E5E5E5">hardware provider you know you have this</font>

533
00:29:01,840 --> 00:29:06,429
kind<font color="#E5E5E5"> of CPUs you have you used this kind</font>

534
00:29:03,820 --> 00:29:09,820
of instruction<font color="#E5E5E5"> extensions so you can</font>

535
00:29:06,430 --> 00:29:12,250
make one compiler for your commit you

536
00:29:09,820 --> 00:29:12,760
can make compilers<font color="#CCCCCC"> for your customers</font>

537
00:29:12,250 --> 00:29:16,420
<font color="#E5E5E5">and you</font>

538
00:29:12,760 --> 00:29:19,240
and check them<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> potentially you</font>

539
00:29:16,420 --> 00:29:22,300
can have any customers using<font color="#E5E5E5"> any kind of</font>

540
00:29:19,240 --> 00:29:24,370
hardware<font color="#CCCCCC"> and we have to be able to</font>

541
00:29:22,300 --> 00:29:28,300
support them<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have to be able</font><font color="#E5E5E5"> to</font>

542
00:29:24,370 --> 00:29:31,479
<font color="#E5E5E5">produce a quality</font><font color="#CCCCCC"> compiler and</font><font color="#E5E5E5"> enter</font>

543
00:29:28,300 --> 00:29:33,010
chain and so the more combination of

544
00:29:31,480 --> 00:29:36,340
extensions the more<font color="#E5E5E5"> difficult it will</font>

545
00:29:33,010 --> 00:29:42,160
<font color="#E5E5E5">get something else that I want to</font>

546
00:29:36,340 --> 00:29:44,500
<font color="#CCCCCC">mention is that knowing what is really</font>

547
00:29:42,160 --> 00:29:47,290
implemented by by the hardware<font color="#E5E5E5"> is</font><font color="#CCCCCC"> really</font>

548
00:29:44,500 --> 00:29:50,350
important<font color="#CCCCCC"> so if I want</font><font color="#E5E5E5"> to take the</font>

549
00:29:47,290 --> 00:29:52,389
comparison with<font color="#E5E5E5"> some of you are familiar</font>

550
00:29:50,350 --> 00:29:54,760
with<font color="#E5E5E5"> the PowerPC families these</font><font color="#CCCCCC"> days</font>

551
00:29:52,390 --> 00:29:56,350
like you get the name<font color="#E5E5E5"> of a</font>

552
00:29:54,760 --> 00:29:59,530
microcontroller<font color="#E5E5E5"> it's impossible to know</font>

553
00:29:56,350 --> 00:30:03,219
what's what's<font color="#CCCCCC"> going on inside so being</font>

554
00:29:59,530 --> 00:30:08,050
<font color="#E5E5E5">very clear about what are the extension</font>

555
00:30:03,220 --> 00:30:10,690
used is<font color="#E5E5E5"> really important</font><font color="#CCCCCC"> those two are</font>

556
00:30:08,050 --> 00:30:12,909
<font color="#E5E5E5">probably going together so</font><font color="#CCCCCC"> deviations</font>

557
00:30:10,690 --> 00:30:17,740
<font color="#E5E5E5">from the standard and custom or</font>

558
00:30:12,910 --> 00:30:20,890
<font color="#E5E5E5">proprietary extensions so as long as you</font>

559
00:30:17,740 --> 00:30:23,230
go outside the<font color="#CCCCCC"> standard maybe you will</font>

560
00:30:20,890 --> 00:30:25,270
say<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have this very nice feature I</font>

561
00:30:23,230 --> 00:30:29,370
want to<font color="#E5E5E5"> add it's going to be great and I</font>

562
00:30:25,270 --> 00:30:32,080
do<font color="#CCCCCC"> will do a special batch of GCC</font><font color="#E5E5E5"> for it</font>

563
00:30:29,370 --> 00:30:34,360
well you have the risk<font color="#E5E5E5"> that we that you</font>

564
00:30:32,080 --> 00:30:35,919
<font color="#CCCCCC">put out of the game</font><font color="#E5E5E5"> every alternative</font>

565
00:30:34,360 --> 00:30:39,820
programming languages because we won't

566
00:30:35,920 --> 00:30:41,410
be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to maybe use your patch if they</font>

567
00:30:39,820 --> 00:30:44,050
are not contributed and we probably

568
00:30:41,410 --> 00:30:46,750
won't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to really test those</font>

569
00:30:44,050 --> 00:30:49,149
<font color="#E5E5E5">features so every time we will see</font>

570
00:30:46,750 --> 00:30:53,700
<font color="#CCCCCC">something like this</font><font color="#E5E5E5"> from our customers</font>

571
00:30:49,150 --> 00:30:58,440
<font color="#E5E5E5">it's going to be more difficult for</font><font color="#CCCCCC"> us</font>

572
00:30:53,700 --> 00:31:03,790
<font color="#CCCCCC">the reference implementations</font><font color="#E5E5E5"> in C so I</font>

573
00:30:58,440 --> 00:31:06,190
guess we we cannot expect<font color="#CCCCCC"> other</font><font color="#E5E5E5"> vendors</font>

574
00:31:03,790 --> 00:31:10,750
to provide<font color="#CCCCCC"> the drivers and libraries in</font>

575
00:31:06,190 --> 00:31:13,150
<font color="#E5E5E5">every other languages</font><font color="#CCCCCC"> what I would</font><font color="#E5E5E5"> like</font>

576
00:31:10,750 --> 00:31:16,050
<font color="#E5E5E5">to mention is</font><font color="#CCCCCC"> that it would</font><font color="#E5E5E5"> be nice</font><font color="#CCCCCC"> to</font>

577
00:31:13,150 --> 00:31:18,010
keep in mind the alternative languages

578
00:31:16,050 --> 00:31:19,870
<font color="#E5E5E5">when doing a reference implementation</font>

579
00:31:18,010 --> 00:31:22,420
<font color="#E5E5E5">may be getting in</font><font color="#CCCCCC"> touch with</font><font color="#E5E5E5"> the</font>

580
00:31:19,870 --> 00:31:26,678
different communities<font color="#CCCCCC"> to ask if they are</font>

581
00:31:22,420 --> 00:31:31,179
<font color="#E5E5E5">willing to participate in writing</font>

582
00:31:26,679 --> 00:31:35,650
the<font color="#E5E5E5"> implementation in in a</font><font color="#CCCCCC"> dying spark</font>

583
00:31:31,179 --> 00:31:39,669
in rust you know whatever<font color="#CCCCCC"> also what I</font>

584
00:31:35,650 --> 00:31:45,130
want to mention<font color="#CCCCCC"> is that C is actually</font>

585
00:31:39,669 --> 00:31:46,650
<font color="#E5E5E5">not it's it's an okay language for a</font>

586
00:31:45,130 --> 00:31:48,760
reference<font color="#E5E5E5"> implementation let's say</font>

587
00:31:46,650 --> 00:31:52,029
<font color="#E5E5E5">because more</font><font color="#CCCCCC"> or less it's the basis for</font>

588
00:31:48,760 --> 00:31:55,240
everybody<font color="#CCCCCC"> all programming languages</font><font color="#E5E5E5"> of</font>

589
00:31:52,029 --> 00:31:59,980
some way or other<font color="#E5E5E5"> to</font><font color="#CCCCCC"> interface with with</font>

590
00:31:55,240 --> 00:32:02,020
<font color="#E5E5E5">C going beyond going into the C++</font>

591
00:31:59,980 --> 00:32:09,669
territory will will on the<font color="#E5E5E5"> other hand</font>

592
00:32:02,020 --> 00:32:12,639
make things quite quite complicated<font color="#E5E5E5"> and</font>

593
00:32:09,669 --> 00:32:16,840
<font color="#E5E5E5">so the last point</font><font color="#CCCCCC"> for me today</font><font color="#E5E5E5"> and as I</font>

594
00:32:12,640 --> 00:32:19,000
<font color="#CCCCCC">said I'm going back to this the SVG</font>

595
00:32:16,840 --> 00:32:21,158
<font color="#E5E5E5">format was really a game changer</font><font color="#CCCCCC"> for us</font>

596
00:32:19,000 --> 00:32:25,179
in terms<font color="#E5E5E5"> of support of our</font>

597
00:32:21,159 --> 00:32:27,580
microcontroller<font color="#E5E5E5"> as I explained it can be</font>

598
00:32:25,179 --> 00:32:30,070
difficult<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write</font><font color="#CCCCCC"> Hardware mapping so</font>

599
00:32:27,580 --> 00:32:32,350
having a format<font color="#CCCCCC"> that you can basically</font>

600
00:32:30,070 --> 00:32:35,049
<font color="#CCCCCC">take</font><font color="#E5E5E5"> any microcontroller you generate</font>

601
00:32:32,350 --> 00:32:37,510
the<font color="#E5E5E5"> low-level representation it's really</font>

602
00:32:35,049 --> 00:32:40,240
easy to<font color="#CCCCCC"> to start programming</font><font color="#E5E5E5"> this</font>

603
00:32:37,510 --> 00:32:44,080
<font color="#E5E5E5">microcontroller and so I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that the</font>

604
00:32:40,240 --> 00:32:47,230
the<font color="#CCCCCC"> risk v community should take</font>

605
00:32:44,080 --> 00:32:52,178
inspiration from this and actually<font color="#CCCCCC"> I</font>

606
00:32:47,230 --> 00:32:55,299
don't<font color="#E5E5E5"> know if there's already projects</font>

607
00:32:52,179 --> 00:32:57,610
going on but I would say that<font color="#CCCCCC"> we are</font>

608
00:32:55,299 --> 00:33:01,480
willing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> participate in this kind of</font>

609
00:32:57,610 --> 00:33:04,570
of definition of format so at least I

610
00:33:01,480 --> 00:33:08,320
think SVD<font color="#CCCCCC"> is really the the minimum</font><font color="#E5E5E5"> and</font>

611
00:33:04,570 --> 00:33:09,990
<font color="#E5E5E5">probably we can go beyond so for</font>

612
00:33:08,320 --> 00:33:13,918
instance what I have in mind is

613
00:33:09,990 --> 00:33:13,919
specifying the the CPU

614
00:33:14,730 --> 00:33:21,300
characteristics<font color="#E5E5E5"> inside this format so I</font>

615
00:33:18,790 --> 00:33:25,930
was<font color="#E5E5E5"> talking about for instance dear</font>

616
00:33:21,300 --> 00:33:28,510
instruction set extensions<font color="#CCCCCC"> specifying</font>

617
00:33:25,930 --> 00:33:31,960
the the memory banks<font color="#E5E5E5"> that would be very</font>

618
00:33:28,510 --> 00:33:36,310
useful<font color="#CCCCCC"> also</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the big problem with</font>

619
00:33:31,960 --> 00:33:38,470
the<font color="#E5E5E5"> SVD that is very monolithic</font><font color="#CCCCCC"> so let's</font>

620
00:33:36,310 --> 00:33:43,679
say I have two microcontrollers<font color="#E5E5E5"> they use</font>

621
00:33:38,470 --> 00:33:45,880
the<font color="#E5E5E5"> same I squared C controller inside</font>

622
00:33:43,680 --> 00:33:49,270
<font color="#CCCCCC">unfortunately there will</font><font color="#E5E5E5"> be two separate</font>

623
00:33:45,880 --> 00:33:51,240
<font color="#CCCCCC">video files and no real way to know that</font>

624
00:33:49,270 --> 00:33:54,610
it's<font color="#E5E5E5"> actually the same I squared C</font>

625
00:33:51,240 --> 00:33:57,160
controller<font color="#E5E5E5"> so potentially I should be</font>

626
00:33:54,610 --> 00:33:59,879
able<font color="#CCCCCC"> to do right only one driver but</font>

627
00:33:57,160 --> 00:34:04,960
it's going<font color="#E5E5E5"> to be very very difficult I</font>

628
00:33:59,880 --> 00:34:08,440
know that the the rest community<font color="#E5E5E5"> some</font>

629
00:34:04,960 --> 00:34:12,490
<font color="#CCCCCC">people started to do some analysis of</font>

630
00:34:08,440 --> 00:34:15,370
the<font color="#E5E5E5"> SVD files to try to find different</font><font color="#CCCCCC"> I</font>

631
00:34:12,489 --> 00:34:18,908
mean similar patterns<font color="#CCCCCC"> in the SVD file to</font>

632
00:34:15,370 --> 00:34:21,639
try to identify<font color="#E5E5E5"> a common controllers but</font>

633
00:34:18,909 --> 00:34:23,649
really I<font color="#E5E5E5"> really think</font><font color="#CCCCCC"> that I think a</font>

634
00:34:21,639 --> 00:34:26,500
<font color="#CCCCCC">madula representation would</font><font color="#E5E5E5"> be would be</font>

635
00:34:23,649 --> 00:34:33,040
<font color="#E5E5E5">a great advantage here</font>

636
00:34:26,500 --> 00:34:37,418
and since<font color="#E5E5E5"> sorry since the the trend and</font>

637
00:34:33,040 --> 00:34:42,668
what we<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> going to see with</font><font color="#E5E5E5"> with</font>

638
00:34:37,418 --> 00:34:45,549
<font color="#CCCCCC">five is</font><font color="#E5E5E5"> the ability to generate and to</font>

639
00:34:42,668 --> 00:34:48,549
create custom chips<font color="#CCCCCC"> crystal micro</font>

640
00:34:45,550 --> 00:34:51,370
<font color="#CCCCCC">controller if the tool that generates</font>

641
00:34:48,550 --> 00:34:54,580
<font color="#E5E5E5">this custom</font><font color="#CCCCCC"> micro controller could also</font>

642
00:34:51,370 --> 00:35:00,970
generate<font color="#CCCCCC"> the customers vide that</font><font color="#E5E5E5"> would</font>

643
00:34:54,580 --> 00:35:03,790
be really really<font color="#CCCCCC"> Apple so that's it for</font>

644
00:35:00,970 --> 00:35:07,060
<font color="#E5E5E5">my presentation I think</font><font color="#CCCCCC"> I hope that you</font>

645
00:35:03,790 --> 00:35:10,290
got an idea of what what it can mean to

646
00:35:07,060 --> 00:35:12,940
<font color="#E5E5E5">to do something different than</font><font color="#CCCCCC"> C in C++</font>

647
00:35:10,290 --> 00:35:15,910
if you want to have a look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> aaden's</font>

648
00:35:12,940 --> 00:35:18,400
<font color="#CCCCCC">park I really recommend to</font><font color="#E5E5E5"> go to this</font>

649
00:35:15,910 --> 00:35:20,020
website<font color="#E5E5E5"> it's a new interactive</font><font color="#CCCCCC"> website</font>

650
00:35:18,400 --> 00:35:22,330
so<font color="#E5E5E5"> you don't have to install anything</font>

651
00:35:20,020 --> 00:35:27,090
you just<font color="#CCCCCC"> click on the</font><font color="#E5E5E5"> on the browser you</font>

652
00:35:22,330 --> 00:35:29,970
will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to compile and run examples</font>

653
00:35:27,090 --> 00:35:33,500
and you can<font color="#E5E5E5"> follow us over</font><font color="#CCCCCC"> here on</font>

654
00:35:29,970 --> 00:35:36,589
Twitter and<font color="#CCCCCC"> join the da da subreddit</font>

655
00:35:33,500 --> 00:35:40,310
where<font color="#E5E5E5"> you will see news about the</font>

656
00:35:36,590 --> 00:35:50,010
technology<font color="#E5E5E5"> in the community over there</font>

657
00:35:40,310 --> 00:36:06,750
that's it<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> okay you have any</font>

658
00:35:50,010 --> 00:36:09,480
question maybe<font color="#E5E5E5"> yes we kind of oh yes</font><font color="#CCCCCC"> I a</font>

659
00:36:06,750 --> 00:36:11,760
<font color="#E5E5E5">solo question is that the next micro</font>

660
00:36:09,480 --> 00:36:14,520
semi<font color="#E5E5E5"> FPGA is right</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> have risk</font><font color="#CCCCCC"> five</font>

661
00:36:11,760 --> 00:36:17,090
calls<font color="#E5E5E5"> and the question is are</font><font color="#CCCCCC"> we do have</font>

662
00:36:14,520 --> 00:36:21,120
any do we have any plans<font color="#E5E5E5"> to</font><font color="#CCCCCC"> support it</font>

663
00:36:17,090 --> 00:36:27,360
<font color="#CCCCCC">the answer is yes but I don't</font><font color="#E5E5E5"> know</font>

664
00:36:21,120 --> 00:36:35,790
<font color="#E5E5E5">really when</font><font color="#CCCCCC"> okay</font>

665
00:36:27,360 --> 00:36:37,770
yes sorry<font color="#CCCCCC"> runtime so the question is how</font>

666
00:36:35,790 --> 00:36:41,790
<font color="#CCCCCC">good is the runtime performance of I</font>

667
00:36:37,770 --> 00:36:43,410
guess<font color="#E5E5E5"> it ends part number two to</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> so</font>

668
00:36:41,790 --> 00:36:47,730
the answer is<font color="#E5E5E5"> that it depends on the</font>

669
00:36:43,410 --> 00:36:50,990
features<font color="#E5E5E5"> so it has more features than</font>

670
00:36:47,730 --> 00:36:54,780
you would find in C so if I<font color="#CCCCCC"> think about</font>

671
00:36:50,990 --> 00:36:59,310
exception propagations<font color="#CCCCCC"> these kind of</font>

672
00:36:54,780 --> 00:37:01,580
things<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you use similar features we</font>

673
00:36:59,310 --> 00:37:06,360
have<font color="#E5E5E5"> similar performances in terms of</font>

674
00:37:01,580 --> 00:37:08,279
code size and runtime performance<font color="#CCCCCC"> some</font>

675
00:37:06,360 --> 00:37:11,300
of that is<font color="#E5E5E5"> thanks to the</font><font color="#CCCCCC"> fact that we</font>

676
00:37:08,280 --> 00:37:13,230
use<font color="#E5E5E5"> the same back end it's it's GCC so</font>

677
00:37:11,300 --> 00:37:15,300
performances are<font color="#CCCCCC"> really similar</font><font color="#E5E5E5"> of</font>

678
00:37:13,230 --> 00:37:17,100
course<font color="#E5E5E5"> when you start</font><font color="#CCCCCC"> using more</font>

679
00:37:15,300 --> 00:37:19,740
advanced features<font color="#E5E5E5"> there's a runtime</font>

680
00:37:17,100 --> 00:37:21,990
penalty but that's that's<font color="#E5E5E5"> the balance</font>

681
00:37:19,740 --> 00:37:24,290
<font color="#E5E5E5">between the future</font><font color="#CCCCCC"> and the performance</font>

682
00:37:21,990 --> 00:37:24,290
<font color="#CCCCCC">that you want</font>

683
00:37:31,299 --> 00:37:35,859
your<font color="#E5E5E5"> language could actually use so</font><font color="#CCCCCC"> ADA</font>

684
00:37:33,459 --> 00:37:37,808
could<font color="#E5E5E5"> actually use</font><font color="#CCCCCC"> harbor extension for</font>

685
00:37:35,859 --> 00:37:40,390
example for a boundary checks because

686
00:37:37,809 --> 00:37:41,140
<font color="#E5E5E5">you limit to the rate value range of</font>

687
00:37:40,390 --> 00:37:43,689
<font color="#E5E5E5">data</font><font color="#CCCCCC"> charts</font>

688
00:37:41,140 --> 00:37:44,949
is there anything<font color="#E5E5E5"> planned to work on a</font>

689
00:37:43,689 --> 00:37:49,469
proposal<font color="#CCCCCC"> of that direction</font>

690
00:37:44,949 --> 00:37:49,469
together with best parts because<font color="#CCCCCC"> we have</font>

691
00:37:50,189 --> 00:37:56,229
okay<font color="#E5E5E5"> so the question is it looks like</font>

692
00:37:53,919 --> 00:38:01,658
the specification of the<font color="#CCCCCC"> ADA language</font>

693
00:37:56,229 --> 00:38:03,819
can<font color="#E5E5E5"> I can use can lead through to use</font>

694
00:38:01,659 --> 00:38:06,519
some hardware specific<font color="#CCCCCC"> maybe</font>

695
00:38:03,819 --> 00:38:11,109
implementation to help implement those

696
00:38:06,519 --> 00:38:15,118
those restrictions so I would say the

697
00:38:11,109 --> 00:38:20,558
answer<font color="#CCCCCC"> is definitely yes but we are not</font>

698
00:38:15,119 --> 00:38:23,649
we are not<font color="#E5E5E5"> really in the in this kind of</font>

699
00:38:20,559 --> 00:38:26,259
ecosystem unfortunately so we joined<font color="#E5E5E5"> the</font>

700
00:38:23,649 --> 00:38:28,118
risk<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> foundation this</font><font color="#E5E5E5"> is something so</font>

701
00:38:26,259 --> 00:38:30,369
we are<font color="#CCCCCC"> definitely willing</font><font color="#E5E5E5"> to participate</font>

702
00:38:28,119 --> 00:38:32,519
<font color="#CCCCCC">in to this kind of efforts but that's</font>

703
00:38:30,369 --> 00:38:35,349
not really<font color="#E5E5E5"> something we do right now</font><font color="#CCCCCC"> so</font>

704
00:38:32,519 --> 00:38:38,348
<font color="#CCCCCC">yes there's there's a lot of things in</font>

705
00:38:35,349 --> 00:38:40,269
<font color="#CCCCCC">ADA you have you have</font><font color="#E5E5E5"> a fixed point</font><font color="#CCCCCC"> a</font>

706
00:38:38,349 --> 00:38:43,389
native<font color="#E5E5E5"> fixed point support you have</font>

707
00:38:40,269 --> 00:38:45,189
modular types etc etc so<font color="#E5E5E5"> there's a lot</font>

708
00:38:43,389 --> 00:38:48,579
<font color="#E5E5E5">of things that</font><font color="#CCCCCC"> would use some</font><font color="#E5E5E5"> specific</font>

709
00:38:45,189 --> 00:38:50,109
hardware but yeah we would<font color="#E5E5E5"> not really do</font>

710
00:38:48,579 --> 00:38:51,999
this kind of<font color="#E5E5E5"> things right now</font><font color="#CCCCCC"> so we use</font>

711
00:38:50,109 --> 00:38:58,169
as best as we<font color="#E5E5E5"> can</font>

712
00:38:51,999 --> 00:38:58,169
what's available yes

713
00:39:02,740 --> 00:39:24,750
<font color="#CCCCCC">define like clear on read or set to</font>

714
00:39:07,360 --> 00:39:27,340
<font color="#CCCCCC">clear registers</font><font color="#E5E5E5"> I mean I will try</font><font color="#CCCCCC"> to</font>

715
00:39:24,750 --> 00:39:30,360
refer the question so the question<font color="#CCCCCC"> is is</font>

716
00:39:27,340 --> 00:39:34,330
there any possibility to do<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you say</font>

717
00:39:30,360 --> 00:39:40,600
except<font color="#E5E5E5"> said to clear registers etc etc</font>

718
00:39:34,330 --> 00:39:43,660
yeah<font color="#E5E5E5"> so no there's</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> there's not really</font>

719
00:39:40,600 --> 00:39:46,509
<font color="#CCCCCC">that kind</font><font color="#E5E5E5"> of precision</font><font color="#CCCCCC"> what we do have</font>

720
00:39:43,660 --> 00:39:48,910
is<font color="#CCCCCC"> the possibility to specify</font><font color="#E5E5E5"> for</font>

721
00:39:46,510 --> 00:39:50,770
instance<font color="#E5E5E5"> for a 32-bit register the</font>

722
00:39:48,910 --> 00:39:52,930
compiler will try to<font color="#E5E5E5"> optimize the access</font>

723
00:39:50,770 --> 00:39:55,570
<font color="#CCCCCC">and maybe</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> to 8-bit access</font>

724
00:39:52,930 --> 00:39:58,089
which<font color="#CCCCCC"> is not always</font><font color="#E5E5E5"> allowed by the</font>

725
00:39:55,570 --> 00:40:01,150
hardware<font color="#E5E5E5"> so we have ways</font><font color="#CCCCCC"> to specify</font><font color="#E5E5E5"> to</font>

726
00:39:58,090 --> 00:40:04,630
use the entire register<font color="#E5E5E5"> these kind of</font>

727
00:40:01,150 --> 00:40:06,870
things but nothing towards<font color="#E5E5E5"> the</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> what</font>

728
00:40:04,630 --> 00:40:06,870
you<font color="#CCCCCC"> say</font>

729
00:40:08,880 --> 00:40:20,630
<font color="#E5E5E5">okay let's see them thank you</font>

730
00:40:13,060 --> 00:40:20,630
[Applause]

