1
00:00:09,610 --> 00:00:14,200
you may<font color="#E5E5E5"> not press anything you do more</font>

2
00:00:11,959 --> 00:00:14,200
<font color="#CCCCCC">cuts</font>

3
00:00:33,000 --> 00:00:39,250
it's fine<font color="#CCCCCC"> okay so we're</font><font color="#E5E5E5"> gonna be</font>

4
00:00:37,059 --> 00:00:41,220
<font color="#E5E5E5">studying with</font><font color="#CCCCCC"> the next talk</font><font color="#E5E5E5"> right now so</font>

5
00:00:39,250 --> 00:00:43,450
please<font color="#E5E5E5"> sit down take your seats</font><font color="#CCCCCC"> and</font>

6
00:00:41,220 --> 00:00:45,460
round of applause<font color="#CCCCCC"> for</font><font color="#E5E5E5"> kuba he's gonna be</font>

7
00:00:43,450 --> 00:00:47,590
talking<font color="#CCCCCC"> about get databases and indexes</font>

8
00:00:45,460 --> 00:00:55,930
and interesting stuff<font color="#CCCCCC"> so round</font><font color="#E5E5E5"> of</font>

9
00:00:47,590 --> 00:00:59,170
<font color="#E5E5E5">applause</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> him you know hello i'm cuba</font>

10
00:00:55,930 --> 00:01:02,430
<font color="#E5E5E5">i work at sourced</font><font color="#CCCCCC"> mainly on projects</font>

11
00:00:59,170 --> 00:01:06,610
<font color="#CCCCCC">related to storage and data processing</font>

12
00:01:02,430 --> 00:01:09,580
<font color="#CCCCCC">like my sequel server and</font><font color="#E5E5E5"> database and</font>

13
00:01:06,610 --> 00:01:11,680
the engine but<font color="#E5E5E5"> also in a spare time</font><font color="#CCCCCC"> I</font>

14
00:01:09,580 --> 00:01:14,619
<font color="#E5E5E5">maintain couple</font><font color="#CCCCCC"> open source projects</font>

15
00:01:11,680 --> 00:01:17,020
like extended attributes<font color="#E5E5E5"> package forego</font>

16
00:01:14,619 --> 00:01:19,990
and the zip compression library and

17
00:01:17,020 --> 00:01:23,710
recently<font color="#E5E5E5"> I helped my friend in his new</font>

18
00:01:19,990 --> 00:01:26,649
programming language called<font color="#E5E5E5"> never but</font>

19
00:01:23,710 --> 00:01:30,330
today I want to<font color="#E5E5E5"> talk about how we</font>

20
00:01:26,650 --> 00:01:33,010
integrated the bitmap index<font color="#E5E5E5"> in our</font>

21
00:01:30,330 --> 00:01:37,270
database<font color="#CCCCCC"> so I have to give you</font><font color="#E5E5E5"> first</font>

22
00:01:33,010 --> 00:01:40,090
some context so get base is<font color="#E5E5E5"> application</font>

23
00:01:37,270 --> 00:01:43,689
but just it's just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> front-end there</font>

24
00:01:40,090 --> 00:01:46,090
real my sequel server database engine

25
00:01:43,689 --> 00:01:49,089
<font color="#E5E5E5">which is by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way powered by Vitas is</font>

26
00:01:46,090 --> 00:01:52,450
another open<font color="#E5E5E5"> source projects gate base</font>

27
00:01:49,090 --> 00:01:55,990
is so far just a read<font color="#CCCCCC"> only database so</font>

28
00:01:52,450 --> 00:02:00,390
now insert no updates<font color="#E5E5E5"> and all the</font>

29
00:01:55,990 --> 00:02:04,568
queries<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> git</font><font color="#E5E5E5"> repos are done by the</font>

30
00:02:00,390 --> 00:02:06,100
<font color="#CCCCCC">gogit package the</font><font color="#E5E5E5"> pirata is another open</font>

31
00:02:04,569 --> 00:02:08,560
source<font color="#E5E5E5"> project which we use as a</font>

32
00:02:06,100 --> 00:02:11,290
distributed index implementation it

33
00:02:08,560 --> 00:02:14,800
implements<font color="#CCCCCC"> the roaring storage format</font>

34
00:02:11,290 --> 00:02:19,959
and apart from indexes it lets you keep

35
00:02:14,800 --> 00:02:21,730
attributes in<font color="#CCCCCC"> vault DB so the gate base</font>

36
00:02:19,960 --> 00:02:25,500
is<font color="#CCCCCC"> just a standalone like</font><font color="#E5E5E5"> application</font>

37
00:02:21,730 --> 00:02:29,470
<font color="#CCCCCC">which you can play with just</font><font color="#E5E5E5"> a front-end</font>

38
00:02:25,500 --> 00:02:31,810
<font color="#E5E5E5">and all the</font><font color="#CCCCCC"> well-known terms from the</font>

39
00:02:29,470 --> 00:02:36,150
gate like repositories<font color="#CCCCCC"> comma drafts are</font>

40
00:02:31,810 --> 00:02:39,489
mapped<font color="#E5E5E5"> to the tables and a convention</font>

41
00:02:36,150 --> 00:02:41,409
convention<font color="#E5E5E5"> is just how you</font>

42
00:02:39,489 --> 00:02:45,099
the<font color="#CCCCCC"> references are based on the</font>

43
00:02:41,409 --> 00:02:47,230
convention<font color="#E5E5E5"> and the naming convention so</font>

44
00:02:45,099 --> 00:02:49,569
basically you can play<font color="#E5E5E5"> with all the</font>

45
00:02:47,230 --> 00:02:52,298
features like not<font color="#E5E5E5"> write</font><font color="#CCCCCC"> joins</font><font color="#E5E5E5"> and for</font>

46
00:02:49,569 --> 00:02:55,599
instance this query uses the<font color="#CCCCCC"> natural</font>

47
00:02:52,299 --> 00:02:57,519
join so you want to get all the

48
00:02:55,599 --> 00:03:01,179
repositories<font color="#E5E5E5"> where the Alan Turing</font>

49
00:02:57,519 --> 00:03:03,909
contributed on a<font color="#CCCCCC"> hat reference and so</font>

50
00:03:01,180 --> 00:03:07,120
you just do<font color="#CCCCCC"> that query from revs and</font>

51
00:03:03,909 --> 00:03:09,578
natural join with comets more

52
00:03:07,120 --> 00:03:12,459
<font color="#E5E5E5">sophisticated query is this one which</font>

53
00:03:09,579 --> 00:03:16,930
<font color="#E5E5E5">basically uses</font><font color="#CCCCCC"> our predefined function</font>

54
00:03:12,459 --> 00:03:20,109
which lets you extract some abstract

55
00:03:16,930 --> 00:03:22,359
syntax tree<font color="#CCCCCC"> and can recognize</font><font color="#E5E5E5"> the</font>

56
00:03:20,109 --> 00:03:24,939
language<font color="#E5E5E5"> based on the content and stuff</font>

57
00:03:22,359 --> 00:03:28,659
like that so<font color="#CCCCCC"> this query</font><font color="#E5E5E5"> tries to extract</font>

58
00:03:24,939 --> 00:03:32,530
<font color="#E5E5E5">all the identifiers</font><font color="#CCCCCC"> the identifier names</font>

59
00:03:28,659 --> 00:03:34,719
from your go files but of<font color="#E5E5E5"> course we have</font>

60
00:03:32,530 --> 00:03:37,359
indexes indexes are<font color="#CCCCCC"> the most interesting</font>

61
00:03:34,719 --> 00:03:38,709
for<font color="#E5E5E5"> the stock so we have indexes and you</font>

62
00:03:37,359 --> 00:03:41,549
can<font color="#E5E5E5"> create the index on where</font><font color="#CCCCCC"> of</font>

63
00:03:38,709 --> 00:03:44,319
multiple columns<font color="#E5E5E5"> this is simple stuff</font>

64
00:03:41,549 --> 00:03:46,629
<font color="#E5E5E5">the nice thing is that you</font><font color="#CCCCCC"> can specify</font>

65
00:03:44,319 --> 00:03:51,429
what the index driver<font color="#E5E5E5"> who you want to</font>

66
00:03:46,629 --> 00:03:52,750
<font color="#E5E5E5">use so the red keyword</font><font color="#CCCCCC"> pilosa means that</font>

67
00:03:51,430 --> 00:03:55,750
you want to use the<font color="#E5E5E5"> pilosa</font>

68
00:03:52,750 --> 00:03:57,400
as an index driver also<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> create</font>

69
00:03:55,750 --> 00:03:58,239
the indexes<font color="#E5E5E5"> a synchronously and</font>

70
00:03:57,400 --> 00:04:00,909
synchronously

71
00:03:58,239 --> 00:04:02,560
<font color="#E5E5E5">but you can also instead of creating the</font>

72
00:04:00,909 --> 00:04:04,298
index on one<font color="#CCCCCC"> of multiple</font><font color="#E5E5E5"> columns you</font>

73
00:04:02,560 --> 00:04:09,159
also can create<font color="#E5E5E5"> the index on an</font>

74
00:04:04,299 --> 00:04:12,669
expression so a little<font color="#E5E5E5"> bit theory about</font>

75
00:04:09,159 --> 00:04:15,340
the indexes<font color="#E5E5E5"> till we dive in is that we</font>

76
00:04:12,669 --> 00:04:17,699
have a hash indexes which look<font color="#CCCCCC"> like a</font>

77
00:04:15,340 --> 00:04:20,560
hash map sitting very good for equality

78
00:04:17,699 --> 00:04:25,120
<font color="#CCCCCC">the most popular indexes in databases</font>

79
00:04:20,560 --> 00:04:27,400
were<font color="#E5E5E5"> Darby trees and in most most places</font>

80
00:04:25,120 --> 00:04:31,440
<font color="#E5E5E5">this is very</font><font color="#CCCCCC"> good the best approach</font>

81
00:04:27,400 --> 00:04:34,870
there are self bias trees<font color="#E5E5E5"> pretty well</font>

82
00:04:31,440 --> 00:04:37,360
pretty<font color="#E5E5E5"> well choice if you</font><font color="#CCCCCC"> wondering</font>

83
00:04:34,870 --> 00:04:41,190
which one<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> our trees are not super</font>

84
00:04:37,360 --> 00:04:43,539
popular<font color="#E5E5E5"> there are more to index</font>

85
00:04:41,190 --> 00:04:46,180
multi-dimensional objects<font color="#E5E5E5"> so they are</font>

86
00:04:43,539 --> 00:04:48,789
good<font color="#CCCCCC"> when you try to</font><font color="#E5E5E5"> group nearby</font>

87
00:04:46,180 --> 00:04:52,159
objects there<font color="#E5E5E5"> are also self balance</font>

88
00:04:48,789 --> 00:04:55,339
trees and bitmaps bitmaps are<font color="#E5E5E5"> very good</font>

89
00:04:52,159 --> 00:05:00,409
to<font color="#E5E5E5"> optimize logical operations and this</font>

90
00:04:55,339 --> 00:05:03,199
<font color="#E5E5E5">is what we what</font><font color="#CCCCCC"> we chose forged</font><font color="#E5E5E5"> base</font><font color="#CCCCCC"> bid</font>

91
00:05:00,409 --> 00:05:07,399
<font color="#CCCCCC">verbs can</font><font color="#E5E5E5"> be very expensive to rebuild</font>

92
00:05:03,199 --> 00:05:10,069
the whole bit metallic<font color="#CCCCCC"> sometime so</font><font color="#E5E5E5"> so it</font>

93
00:05:07,399 --> 00:05:12,229
it's a good choice for for<font color="#E5E5E5"> example for</font>

94
00:05:10,069 --> 00:05:14,360
<font color="#CCCCCC">read-only</font><font color="#E5E5E5"> systems also the best what</font><font color="#CCCCCC"> you</font>

95
00:05:12,229 --> 00:05:21,409
can get is when<font color="#CCCCCC"> you have lot of</font><font color="#E5E5E5"> data but</font>

96
00:05:14,360 --> 00:05:23,119
<font color="#E5E5E5">not not many possible</font><font color="#CCCCCC"> values</font><font color="#E5E5E5"> and also</font>

97
00:05:21,409 --> 00:05:25,429
the good thing<font color="#E5E5E5"> about the bitmaps is that</font>

98
00:05:23,119 --> 00:05:28,459
because it's optimized<font color="#CCCCCC"> for logical</font>

99
00:05:25,429 --> 00:05:31,339
operations you can<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> web one with</font>

100
00:05:28,459 --> 00:05:33,559
index per column to satisfy all<font color="#E5E5E5"> queries</font>

101
00:05:31,339 --> 00:05:36,589
<font color="#CCCCCC">if you don't have bitmaps indexes</font><font color="#E5E5E5"> the</font>

102
00:05:33,559 --> 00:05:39,050
<font color="#E5E5E5">formula on the right is the number</font><font color="#CCCCCC"> of</font>

103
00:05:36,589 --> 00:05:41,539
indexes which you have to create to

104
00:05:39,050 --> 00:05:44,059
satisfy all the possible queries where n

105
00:05:41,539 --> 00:05:45,589
is the<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> columns so for example</font>

106
00:05:44,059 --> 00:05:47,689
<font color="#CCCCCC">Beatrice</font>

107
00:05:45,589 --> 00:05:51,169
with the Beatrice you have to deal<font color="#CCCCCC"> with</font>

108
00:05:47,689 --> 00:05:54,349
this so I mentioned a little<font color="#E5E5E5"> bit above</font>

109
00:05:51,169 --> 00:05:56,919
the<font color="#E5E5E5"> storage for storing about the format</font>

110
00:05:54,349 --> 00:05:59,808
how it's stored so it's called roaring

111
00:05:56,919 --> 00:06:02,419
roaring format and a<font color="#CCCCCC"> palasa which we</font>

112
00:05:59,809 --> 00:06:04,759
<font color="#CCCCCC">used</font><font color="#E5E5E5"> they implement this and this</font><font color="#CCCCCC"> format</font>

113
00:06:02,419 --> 00:06:07,998
and<font color="#E5E5E5"> apart from</font><font color="#CCCCCC"> that all the</font><font color="#E5E5E5"> offset which</font>

114
00:06:04,759 --> 00:06:10,399
you have to set and headers in a file

115
00:06:07,999 --> 00:06:12,800
<font color="#E5E5E5">the most important is how you store the</font>

116
00:06:10,399 --> 00:06:15,409
data on a disk<font color="#E5E5E5"> so first when you have</font>

117
00:06:12,800 --> 00:06:18,619
<font color="#E5E5E5">the</font><font color="#CCCCCC"> row ID and the column ID in yo in</font>

118
00:06:15,409 --> 00:06:21,889
<font color="#E5E5E5">your bitmap</font><font color="#CCCCCC"> you have to store to the</font>

119
00:06:18,619 --> 00:06:24,279
local storage<font color="#CCCCCC"> so you calculate the</font>

120
00:06:21,889 --> 00:06:26,749
position you call the add function and

121
00:06:24,279 --> 00:06:29,240
<font color="#CCCCCC">what attraction does is</font><font color="#E5E5E5"> basically the</font>

122
00:06:26,749 --> 00:06:32,269
first<font color="#E5E5E5"> byte is the operation so in this</font>

123
00:06:29,240 --> 00:06:36,559
case it's a it's<font color="#E5E5E5"> at the next</font><font color="#CCCCCC"> eight bytes</font>

124
00:06:32,269 --> 00:06:38,929
is a value<font color="#CCCCCC"> in a little endian format</font><font color="#E5E5E5"> and</font>

125
00:06:36,559 --> 00:06:43,579
then last<font color="#CCCCCC"> four bytes is just a checksum</font>

126
00:06:38,929 --> 00:06:46,849
<font color="#E5E5E5">of the operation and in your value and</font>

127
00:06:43,579 --> 00:06:49,099
you write it to<font color="#E5E5E5"> the disk</font>

128
00:06:46,849 --> 00:06:51,769
<font color="#CCCCCC">basically this pretty simple how you</font>

129
00:06:49,099 --> 00:06:55,969
save data and<font color="#CCCCCC"> palasa implements it</font>

130
00:06:51,769 --> 00:07:02,300
it's a typical by default it<font color="#CCCCCC"> is typical</font>

131
00:06:55,969 --> 00:07:04,900
server client<font color="#CCCCCC"> but we cut a little</font><font color="#E5E5E5"> bit</font>

132
00:07:02,300 --> 00:07:07,030
<font color="#E5E5E5">which I will talk later</font>

133
00:07:04,900 --> 00:07:09,549
by default it<font color="#E5E5E5"> certificates every client</font>

134
00:07:07,030 --> 00:07:13,510
<font color="#CCCCCC">well</font><font color="#E5E5E5"> communication goes over our PC or</font>

135
00:07:09,550 --> 00:07:15,100
REST API<font color="#E5E5E5"> and the data</font><font color="#CCCCCC"> model in pilosa</font>

136
00:07:13,510 --> 00:07:20,440
looks like this so you have<font color="#E5E5E5"> a huge</font>

137
00:07:15,100 --> 00:07:25,030
boolean matrix where index<font color="#E5E5E5"> contains</font>

138
00:07:20,440 --> 00:07:29,230
fields and have in rows in this matrix<font color="#CCCCCC"> a</font>

139
00:07:25,030 --> 00:07:32,140
local / field<font color="#E5E5E5"> but the columns are global</font>

140
00:07:29,230 --> 00:07:36,070
<font color="#E5E5E5">columns are shared across all the fields</font>

141
00:07:32,140 --> 00:07:39,130
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you can say give</font><font color="#CCCCCC"> me column number 5</font>

142
00:07:36,070 --> 00:07:42,969
in<font color="#E5E5E5"> the index and you'll get</font><font color="#CCCCCC"> all the ones</font>

143
00:07:39,130 --> 00:07:45,250
or zeros from<font color="#E5E5E5"> all the fields but when</font>

144
00:07:42,970 --> 00:07:50,380
you say<font color="#E5E5E5"> row number 5 you</font><font color="#CCCCCC"> have to specify</font>

145
00:07:45,250 --> 00:07:52,840
for<font color="#CCCCCC"> which field so rows are local</font><font color="#E5E5E5"> /</font>

146
00:07:50,380 --> 00:07:55,210
field and<font color="#E5E5E5"> their columns are global and</font>

147
00:07:52,840 --> 00:07:57,429
nice think about the<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> maxes</font><font color="#E5E5E5"> that you</font>

148
00:07:55,210 --> 00:07:59,380
can match them well you can match rows

149
00:07:57,430 --> 00:08:03,580
but what's the most important is that

150
00:07:59,380 --> 00:08:08,909
you<font color="#E5E5E5"> cannot match rows across indexes you</font>

151
00:08:03,580 --> 00:08:11,740
have to match rows inside the same index

152
00:08:08,910 --> 00:08:14,260
so how we integrated the<font color="#CCCCCC"> palasa indeed</font>

153
00:08:11,740 --> 00:08:15,460
base<font color="#E5E5E5"> so with the first approach was the</font>

154
00:08:14,260 --> 00:08:17,890
<font color="#E5E5E5">simplest one</font><font color="#CCCCCC"> yeah</font>

155
00:08:15,460 --> 00:08:21,370
take the<font color="#CCCCCC"> bilasa</font><font color="#E5E5E5"> run it in the container</font>

156
00:08:17,890 --> 00:08:25,930
as a server<font color="#E5E5E5"> one pillow the index maps to</font>

157
00:08:21,370 --> 00:08:28,150
the one database index<font color="#E5E5E5"> and one field was</font>

158
00:08:25,930 --> 00:08:32,140
the<font color="#E5E5E5"> equal to</font><font color="#CCCCCC"> one expression</font><font color="#E5E5E5"> so the</font>

159
00:08:28,150 --> 00:08:34,270
column<font color="#E5E5E5"> and it was super</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> we had to</font>

160
00:08:32,140 --> 00:08:38,500
add the mapping because you have to map

161
00:08:34,270 --> 00:08:40,449
the bitmaps is just<font color="#E5E5E5"> a matrix so it has</font>

162
00:08:38,500 --> 00:08:43,240
rows and columns but<font color="#E5E5E5"> you have to map the</font>

163
00:08:40,450 --> 00:08:47,290
values to rows and columns<font color="#E5E5E5"> to locational</font>

164
00:08:43,240 --> 00:08:50,710
number of the<font color="#CCCCCC"> records in</font><font color="#E5E5E5"> your table so</font>

165
00:08:47,290 --> 00:08:52,959
it was the simplest<font color="#E5E5E5"> approach but after</font>

166
00:08:50,710 --> 00:08:55,230
some time<font color="#E5E5E5"> we decided we don't want to</font>

167
00:08:52,960 --> 00:08:57,370
maintain yet another server and

168
00:08:55,230 --> 00:09:01,150
troubleshoot<font color="#E5E5E5"> all the synchronization</font>

169
00:08:57,370 --> 00:09:03,760
problems and stuff like that<font color="#E5E5E5"> so we</font>

170
00:09:01,150 --> 00:09:07,180
<font color="#E5E5E5">decided maybe it would be</font><font color="#CCCCCC"> good to hug</font>

171
00:09:03,760 --> 00:09:10,030
pillows a little bit and embed it<font color="#E5E5E5"> into</font>

172
00:09:07,180 --> 00:09:13,060
the<font color="#CCCCCC"> grid base so it let us</font><font color="#E5E5E5"> run the</font>

173
00:09:10,030 --> 00:09:14,920
<font color="#CCCCCC">pillows are like like</font><font color="#E5E5E5"> a communicate with</font>

174
00:09:13,060 --> 00:09:17,319
<font color="#E5E5E5">pillows</font><font color="#CCCCCC"> alike</font><font color="#E5E5E5"> we communicate with the</font>

175
00:09:14,920 --> 00:09:18,370
libraries<font color="#E5E5E5"> so this is what we did we</font>

176
00:09:17,320 --> 00:09:20,529
implemented yet

177
00:09:18,370 --> 00:09:24,640
index driver<font color="#E5E5E5"> that time we called it</font>

178
00:09:20,529 --> 00:09:29,830
<font color="#CCCCCC">Piazza</font><font color="#E5E5E5"> leap we got rid of the server</font>

179
00:09:24,640 --> 00:09:32,319
power extracted<font color="#E5E5E5"> API and basically we</font>

180
00:09:29,830 --> 00:09:34,240
tried to<font color="#E5E5E5"> prototype some stuff first of</font>

181
00:09:32,320 --> 00:09:37,779
all we had to deal with<font color="#E5E5E5"> all the storage</font>

182
00:09:34,240 --> 00:09:39,640
<font color="#E5E5E5">NAS we had to open</font><font color="#CCCCCC"> and close</font><font color="#E5E5E5"> first so</font>

183
00:09:37,779 --> 00:09:41,589
like index fields and fields contains

184
00:09:39,640 --> 00:09:44,260
the<font color="#E5E5E5"> views and fragments can cache and</font>

185
00:09:41,589 --> 00:09:46,210
stuff like that but we first we found<font color="#CCCCCC"> a</font>

186
00:09:44,260 --> 00:09:49,390
holder which was kind of<font color="#E5E5E5"> the nice thing</font>

187
00:09:46,210 --> 00:09:52,779
because<font color="#E5E5E5"> holder lets you</font><font color="#CCCCCC"> open the whole</font>

188
00:09:49,390 --> 00:09:54,730
terror he just by<font color="#E5E5E5"> calling the open and</font>

189
00:09:52,779 --> 00:09:58,810
close<font color="#CCCCCC"> think and it does all the thing</font>

190
00:09:54,730 --> 00:10:01,600
<font color="#CCCCCC">from you so</font><font color="#E5E5E5"> some sounded promising at</font>

191
00:09:58,810 --> 00:10:04,660
the time but suddenly appeared<font color="#E5E5E5"> that we</font>

192
00:10:01,600 --> 00:10:07,839
had so many<font color="#CCCCCC"> problems and random crashes</font>

193
00:10:04,660 --> 00:10:10,569
in this concurrent<font color="#E5E5E5"> world with the holder</font>

194
00:10:07,839 --> 00:10:14,250
<font color="#CCCCCC">so we took a closer look</font><font color="#E5E5E5"> how the</font><font color="#CCCCCC"> holder</font>

195
00:10:10,570 --> 00:10:16,630
was implemented and apart from<font color="#CCCCCC"> all the</font>

196
00:10:14,250 --> 00:10:18,970
handlers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> and the filth it</font><font color="#E5E5E5"> contained</font>

197
00:10:16,630 --> 00:10:21,779
<font color="#E5E5E5">two channels opened and closed closing</font>

198
00:10:18,970 --> 00:10:27,029
these two<font color="#E5E5E5"> channels are only used in</font>

199
00:10:21,779 --> 00:10:30,400
<font color="#CCCCCC">these two functions</font><font color="#E5E5E5"> open and</font><font color="#CCCCCC"> closed</font><font color="#E5E5E5"> and</font>

200
00:10:27,029 --> 00:10:32,760
they<font color="#E5E5E5"> close the opening open channel in</font>

201
00:10:30,400 --> 00:10:34,870
the open function<font color="#E5E5E5"> and they</font><font color="#CCCCCC"> close the</font>

202
00:10:32,760 --> 00:10:39,430
closing<font color="#E5E5E5"> channel in the close function</font>

203
00:10:34,870 --> 00:10:42,070
what means<font color="#E5E5E5"> that in a concurrent world it</font>

204
00:10:39,430 --> 00:10:44,529
possible<font color="#CCCCCC"> that you try</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> already</font>

205
00:10:42,070 --> 00:10:47,380
open<font color="#E5E5E5"> file or</font><font color="#CCCCCC"> closed already closed file</font>

206
00:10:44,529 --> 00:10:51,610
and basically instead of<font color="#CCCCCC"> do nothing call</font>

207
00:10:47,380 --> 00:10:53,920
<font color="#E5E5E5">return the error it panics and please</font><font color="#CCCCCC"> I</font>

208
00:10:51,610 --> 00:10:55,930
really like pulasa<font color="#E5E5E5"> don't get me wrong</font>

209
00:10:53,920 --> 00:10:59,349
<font color="#E5E5E5">but if you are doing something like this</font>

210
00:10:55,930 --> 00:11:03,910
please<font color="#CCCCCC"> dot</font><font color="#E5E5E5"> it's bad it's</font><font color="#CCCCCC"> bad by default</font>

211
00:10:59,350 --> 00:11:06,339
nobody should do it so so how we solve

212
00:11:03,910 --> 00:11:10,329
this problem<font color="#CCCCCC"> we</font><font color="#E5E5E5"> decided to get</font><font color="#CCCCCC"> rid of</font>

213
00:11:06,339 --> 00:11:12,700
the holder it's the easiest way so now

214
00:11:10,330 --> 00:11:17,279
we have to really manually open index

215
00:11:12,700 --> 00:11:19,720
and<font color="#CCCCCC"> fields but the opening and close</font>

216
00:11:17,279 --> 00:11:21,910
functions for fields and indexes they

217
00:11:19,720 --> 00:11:25,180
don't have this problem<font color="#CCCCCC"> that when you</font>

218
00:11:21,910 --> 00:11:28,930
open once again<font color="#E5E5E5"> nothing really bad</font>

219
00:11:25,180 --> 00:11:30,130
happened so yeah so we<font color="#CCCCCC"> got rid</font><font color="#E5E5E5"> of the</font>

220
00:11:28,930 --> 00:11:32,620
holder and<font color="#CCCCCC"> we</font>

221
00:11:30,130 --> 00:11:34,720
some improvements one of them is that<font color="#E5E5E5"> we</font>

222
00:11:32,620 --> 00:11:39,220
right now have one<font color="#CCCCCC"> palasa</font>

223
00:11:34,720 --> 00:11:42,670
index per table so multiple database

224
00:11:39,220 --> 00:11:48,330
indexes<font color="#E5E5E5"> are contained in a one</font><font color="#CCCCCC"> pilosa</font>

225
00:11:42,670 --> 00:11:50,560
index and one field is per per index

226
00:11:48,330 --> 00:11:53,080
<font color="#E5E5E5">expression which can</font><font color="#CCCCCC"> be the column name</font>

227
00:11:50,560 --> 00:11:56,739
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a partition this</font><font color="#E5E5E5"> is something what</font>

228
00:11:53,080 --> 00:11:59,620
<font color="#CCCCCC">we introduced recently</font><font color="#E5E5E5"> also what we</font>

229
00:11:56,740 --> 00:12:01,990
improve a<font color="#CCCCCC"> little bit we still have the</font>

230
00:11:59,620 --> 00:12:03,730
mapping<font color="#E5E5E5"> in both DB but we use the bucket</font>

231
00:12:01,990 --> 00:12:06,730
sequencer to get the next<font color="#E5E5E5"> possible</font>

232
00:12:03,730 --> 00:12:08,920
available Rd<font color="#CCCCCC"> improve a little bit</font>

233
00:12:06,730 --> 00:12:11,560
<font color="#E5E5E5">performance at all so we have to encode</font>

234
00:12:08,920 --> 00:12:14,229
and decode data<font color="#E5E5E5"> so we use the got</font>

235
00:12:11,560 --> 00:12:17,020
package from standard library<font color="#E5E5E5"> but what's</font>

236
00:12:14,230 --> 00:12:19,690
the<font color="#CCCCCC"> good thing about</font><font color="#E5E5E5"> having one</font><font color="#CCCCCC"> palasa</font>

237
00:12:17,020 --> 00:12:23,050
<font color="#E5E5E5">index per table is that right now all</font>

238
00:12:19,690 --> 00:12:25,990
your indexes are in database indexes<font color="#E5E5E5"> are</font>

239
00:12:23,050 --> 00:12:30,430
inside one<font color="#CCCCCC"> palasa</font><font color="#E5E5E5"> index so you can merge</font>

240
00:12:25,990 --> 00:12:33,160
<font color="#E5E5E5">them so how did it works this magic</font>

241
00:12:30,430 --> 00:12:35,319
<font color="#E5E5E5">stuff so let's start from the scratch</font>

242
00:12:33,160 --> 00:12:38,079
you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to create the index so first</font>

243
00:12:35,320 --> 00:12:39,640
you have<font color="#CCCCCC"> this huge boolean matrix and</font>

244
00:12:38,080 --> 00:12:43,900
let's let's<font color="#CCCCCC"> assume that we want to</font>

245
00:12:39,640 --> 00:12:45,520
<font color="#E5E5E5">create the index on a column a and B so</font>

246
00:12:43,900 --> 00:12:47,260
you create the<font color="#E5E5E5"> index then you iterate</font>

247
00:12:45,520 --> 00:12:49,390
through all the expression<font color="#E5E5E5"> a and B and</font>

248
00:12:47,260 --> 00:12:51,600
for<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of them you</font><font color="#E5E5E5"> create the field</font>

249
00:12:49,390 --> 00:12:54,460
let's assume<font color="#CCCCCC"> for simplicity that we</font>

250
00:12:51,600 --> 00:12:58,150
<font color="#E5E5E5">partition just a one partition and it's</font>

251
00:12:54,460 --> 00:13:00,490
still the<font color="#E5E5E5"> same index ID so you create</font>

252
00:12:58,150 --> 00:13:02,709
<font color="#CCCCCC">two fields you have this huge matrix</font>

253
00:13:00,490 --> 00:13:06,610
full of zeros<font color="#E5E5E5"> then you have to populate</font>

254
00:13:02,710 --> 00:13:09,610
<font color="#CCCCCC">it</font><font color="#E5E5E5"> by data so you iterate through</font>

255
00:13:06,610 --> 00:13:12,760
columns<font color="#E5E5E5"> and every column let's say every</font>

256
00:13:09,610 --> 00:13:15,520
column is a new record in your table<font color="#E5E5E5"> so</font>

257
00:13:12,760 --> 00:13:18,400
it's kind of that<font color="#E5E5E5"> look smaller</font><font color="#CCCCCC"> less like</font>

258
00:13:15,520 --> 00:13:20,050
a column database you iterate through

259
00:13:18,400 --> 00:13:22,540
the records<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you iterate through the</font>

260
00:13:20,050 --> 00:13:24,520
<font color="#E5E5E5">columns so you put the one you</font><font color="#CCCCCC"> set the</font>

261
00:13:22,540 --> 00:13:26,319
bit<font color="#E5E5E5"> one in every column that but you</font>

262
00:13:24,520 --> 00:13:29,860
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out in which filled in</font>

263
00:13:26,320 --> 00:13:33,460
and in which row so you go to the field

264
00:13:29,860 --> 00:13:36,010
which is mapped<font color="#E5E5E5"> to your column and try</font>

265
00:13:33,460 --> 00:13:38,140
to get the wrong idea for your value if

266
00:13:36,010 --> 00:13:40,300
value already<font color="#E5E5E5"> exists</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> get row ID</font>

267
00:13:38,140 --> 00:13:44,000
function will return<font color="#E5E5E5"> the row ID which</font>

268
00:13:40,300 --> 00:13:47,899
already exists<font color="#E5E5E5"> if not it will generate</font>

269
00:13:44,000 --> 00:13:50,689
next ID for you<font color="#E5E5E5"> so after you get that</font>

270
00:13:47,899 --> 00:13:54,259
you add you set the bit in<font color="#E5E5E5"> the field</font><font color="#CCCCCC"> and</font>

271
00:13:50,689 --> 00:13:56,599
you put it in<font color="#E5E5E5"> your put the location</font><font color="#CCCCCC"> in</font>

272
00:13:54,259 --> 00:14:00,050
your<font color="#E5E5E5"> mapping so this is how you save</font>

273
00:13:56,600 --> 00:14:03,139
data and then you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> someone's in your</font>

274
00:14:00,050 --> 00:14:06,199
<font color="#CCCCCC">matrix</font><font color="#E5E5E5"> so now you want to query when you</font>

275
00:14:03,139 --> 00:14:09,939
query<font color="#E5E5E5"> you put some filter like you want</font>

276
00:14:06,199 --> 00:14:12,649
to get all data<font color="#E5E5E5"> where a is 2 and B is 4</font>

277
00:14:09,939 --> 00:14:15,620
so<font color="#E5E5E5"> once again</font><font color="#CCCCCC"> you tear it for the</font>

278
00:14:12,649 --> 00:14:19,670
expressions<font color="#E5E5E5"> go through the fields and</font>

279
00:14:15,620 --> 00:14:24,560
then<font color="#E5E5E5"> you have to find the</font><font color="#CCCCCC"> row ID where</font>

280
00:14:19,670 --> 00:14:28,099
the value 2<font color="#CCCCCC"> and the value for</font><font color="#E5E5E5"> R</font><font color="#CCCCCC"> and for</font>

281
00:14:24,560 --> 00:14:30,949
simplicity<font color="#E5E5E5"> let's say that value 2 is</font>

282
00:14:28,100 --> 00:14:36,769
assigned<font color="#E5E5E5"> to row 2 in a and value for</font>

283
00:14:30,949 --> 00:14:38,800
<font color="#E5E5E5">assign it to Row 4</font><font color="#CCCCCC"> in B so at the end</font>

284
00:14:36,769 --> 00:14:42,649
when you already<font color="#E5E5E5"> collected all the rows</font>

285
00:14:38,800 --> 00:14:44,359
which I assign<font color="#CCCCCC"> it to your values because</font>

286
00:14:42,649 --> 00:14:48,309
it's an ant<font color="#E5E5E5"> you have to do intersection</font>

287
00:14:44,360 --> 00:14:52,309
so so you intersect<font color="#CCCCCC"> rows and as a result</font>

288
00:14:48,309 --> 00:14:53,719
we get these<font color="#E5E5E5"> columns where the</font><font color="#CCCCCC"> 1 was on</font>

289
00:14:52,309 --> 00:14:57,019
<font color="#E5E5E5">the same positions because it was</font>

290
00:14:53,720 --> 00:14:59,329
intersection<font color="#E5E5E5"> so you get columns it's a</font><font color="#CCCCCC"> 3</font>

291
00:14:57,019 --> 00:15:02,029
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a 5 as a result you go to the</font>

292
00:14:59,329 --> 00:15:05,269
mapping once again to get the location

293
00:15:02,029 --> 00:15:08,750
we where are your<font color="#E5E5E5"> records in your tables</font>

294
00:15:05,269 --> 00:15:12,079
which were<font color="#E5E5E5"> assigned to values 3 & 5</font><font color="#CCCCCC"> this</font>

295
00:15:08,750 --> 00:15:13,939
<font color="#CCCCCC">is how the magic works but what's worth</font>

296
00:15:12,079 --> 00:15:18,529
to mention in my<font color="#E5E5E5"> opinion was</font><font color="#CCCCCC"> the good</font>

297
00:15:13,939 --> 00:15:22,250
<font color="#CCCCCC">thing about the bitmap indexes</font><font color="#E5E5E5"> is the</font>

298
00:15:18,529 --> 00:15:25,610
<font color="#E5E5E5">matching pink and it doesn't make sense</font>

299
00:15:22,250 --> 00:15:28,459
with bitmap index is to create indexes

300
00:15:25,610 --> 00:15:30,860
<font color="#E5E5E5">on multiple columns it's better to</font>

301
00:15:28,459 --> 00:15:34,518
<font color="#CCCCCC">create a 1 index</font><font color="#E5E5E5"> per column the reason</font>

302
00:15:30,860 --> 00:15:37,939
why is that<font color="#CCCCCC"> if I created the index on</font>

303
00:15:34,519 --> 00:15:40,699
columns a and<font color="#E5E5E5"> B so on two</font><font color="#CCCCCC"> columns</font><font color="#E5E5E5"> then I</font>

304
00:15:37,939 --> 00:15:44,360
can the index will<font color="#CCCCCC"> be used only if I do</font>

305
00:15:40,699 --> 00:15:46,569
intersections<font color="#E5E5E5"> and the intersection</font><font color="#CCCCCC"> will</font>

306
00:15:44,360 --> 00:15:49,939
<font color="#CCCCCC">be used as an internal</font><font color="#E5E5E5"> operator</font>

307
00:15:46,569 --> 00:15:52,759
<font color="#E5E5E5">operation first but if I create the</font>

308
00:15:49,939 --> 00:15:57,019
indexes independently one index on a and

309
00:15:52,759 --> 00:15:57,480
second index on B then I will get<font color="#E5E5E5"> the</font>

310
00:15:57,019 --> 00:16:00,120
same

311
00:15:57,480 --> 00:16:01,829
salt<font color="#CCCCCC"> the intersection will be</font><font color="#E5E5E5"> not</font>

312
00:16:00,120 --> 00:16:03,990
internal operation but the external

313
00:16:01,829 --> 00:16:06,149
operation later<font color="#E5E5E5"> but it will not have</font><font color="#CCCCCC"> any</font>

314
00:16:03,990 --> 00:16:08,250
bad impact on<font color="#CCCCCC"> performance</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> the good</font>

315
00:16:06,149 --> 00:16:10,920
<font color="#CCCCCC">thing is that if you replace and</font><font color="#E5E5E5"> buy or</font>

316
00:16:08,250 --> 00:16:12,899
then it will do<font color="#CCCCCC"> exactly the same instead</font>

317
00:16:10,920 --> 00:16:15,000
of intersection<font color="#CCCCCC"> we'll just call the</font>

318
00:16:12,899 --> 00:16:17,430
Union and<font color="#E5E5E5"> that's it so it doesn't make</font>

319
00:16:15,000 --> 00:16:19,649
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> because creating the index on</font>

320
00:16:17,430 --> 00:16:24,388
multiple columns it will<font color="#E5E5E5"> only satisfy</font>

321
00:16:19,649 --> 00:16:26,250
and filters so how it was done because<font color="#CCCCCC"> I</font>

322
00:16:24,389 --> 00:16:28,620
<font color="#E5E5E5">mentioned that we have pillows and</font>

323
00:16:26,250 --> 00:16:31,019
pillows<font color="#CCCCCC"> illipe drivers but it's also</font>

324
00:16:28,620 --> 00:16:33,449
possible to<font color="#E5E5E5"> implement all index driver</font>

325
00:16:31,019 --> 00:16:36,630
<font color="#E5E5E5">because everything what we did we did</font>

326
00:16:33,449 --> 00:16:38,279
through the interfaces and<font color="#E5E5E5"> so first of</font>

327
00:16:36,630 --> 00:16:42,360
all<font color="#E5E5E5"> you have an index driver interface</font>

328
00:16:38,279 --> 00:16:44,790
<font color="#E5E5E5">which just has this basic functions</font>

329
00:16:42,360 --> 00:16:47,100
which lets you create<font color="#CCCCCC"> load</font><font color="#E5E5E5"> safe and</font>

330
00:16:44,790 --> 00:16:50,730
delete index and<font color="#E5E5E5"> this function</font><font color="#CCCCCC"> return</font>

331
00:16:47,100 --> 00:16:52,860
the index interface which basically has

332
00:16:50,730 --> 00:16:55,170
two main<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> an get which can</font>

333
00:16:52,860 --> 00:16:58,620
answer your question<font color="#E5E5E5"> do I have this</font>

334
00:16:55,170 --> 00:17:02,910
value<font color="#E5E5E5"> and if I have the value you can</font>

335
00:16:58,620 --> 00:17:04,859
<font color="#E5E5E5">get the value and to get the value and</font>

336
00:17:02,910 --> 00:17:06,689
call the function get it returns index

337
00:17:04,859 --> 00:17:10,198
lookup which more or less is<font color="#CCCCCC"> kind of a</font>

338
00:17:06,689 --> 00:17:14,429
<font color="#CCCCCC">wrapper on on a value integrator</font><font color="#E5E5E5"> also we</font>

339
00:17:10,199 --> 00:17:17,189
have some indexes which let us query by

340
00:17:14,429 --> 00:17:21,809
ranges<font color="#E5E5E5"> with like Austin index so</font><font color="#CCCCCC"> we can</font>

341
00:17:17,189 --> 00:17:23,610
ask<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> greater less</font><font color="#E5E5E5"> than etc but</font>

342
00:17:21,809 --> 00:17:27,059
they also all<font color="#CCCCCC"> of them they return the</font>

343
00:17:23,609 --> 00:17:29,159
index<font color="#CCCCCC"> lupa lookup and the index lookup</font>

344
00:17:27,059 --> 00:17:32,760
<font color="#E5E5E5">as I</font><font color="#CCCCCC"> mention</font><font color="#E5E5E5"> is kind of the wrapper on a</font>

345
00:17:29,160 --> 00:17:37,260
<font color="#E5E5E5">on an iterator it just gives you the</font>

346
00:17:32,760 --> 00:17:41,129
iterator based on the partition but the

347
00:17:37,260 --> 00:17:43,080
index lookup may implement<font color="#E5E5E5"> set operation</font>

348
00:17:41,130 --> 00:17:47,030
interface and if you implement<font color="#E5E5E5"> that</font>

349
00:17:43,080 --> 00:17:50,370
<font color="#E5E5E5">operation interface then you can match</font>

350
00:17:47,030 --> 00:17:51,840
lookups by intersection Union<font color="#E5E5E5"> and</font>

351
00:17:50,370 --> 00:17:57,149
difference as a result you will<font color="#E5E5E5"> get</font>

352
00:17:51,840 --> 00:18:00,720
another<font color="#CCCCCC"> look up and get get the values</font>

353
00:17:57,150 --> 00:18:02,490
so this<font color="#E5E5E5"> is how magic works and the last</font>

354
00:18:00,720 --> 00:18:06,210
but<font color="#CCCCCC"> not least is mapping mapping is</font>

355
00:18:02,490 --> 00:18:09,520
important because basically<font color="#E5E5E5"> with the</font>

356
00:18:06,210 --> 00:18:11,679
<font color="#CCCCCC">bitmap indexes you have just a row</font>

357
00:18:09,520 --> 00:18:15,520
columns<font color="#E5E5E5"> so you have to map values and</font>

358
00:18:11,679 --> 00:18:19,540
three<font color="#CCCCCC"> chords to columns and row</font><font color="#E5E5E5"> I DS so</font>

359
00:18:15,520 --> 00:18:23,110
the<font color="#E5E5E5"> mapping works like this</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> you want</font>

360
00:18:19,540 --> 00:18:26,020
to<font color="#E5E5E5"> get the row ID for your value row</font>

361
00:18:23,110 --> 00:18:28,870
local<font color="#E5E5E5"> rows are</font><font color="#CCCCCC"> Locker / field</font><font color="#E5E5E5"> so you</font>

362
00:18:26,020 --> 00:18:31,750
<font color="#E5E5E5">have to specify in which field</font><font color="#CCCCCC"> you pass</font>

363
00:18:28,870 --> 00:18:35,949
the value so it refers we encode the

364
00:18:31,750 --> 00:18:40,030
<font color="#E5E5E5">values by drop encoder and then then we</font>

365
00:18:35,950 --> 00:18:42,280
get the bucket<font color="#CCCCCC"> in a ball</font><font color="#E5E5E5"> DB where which</font>

366
00:18:40,030 --> 00:18:45,700
<font color="#E5E5E5">is assigned</font><font color="#CCCCCC"> to the field and we</font><font color="#E5E5E5"> try to</font>

367
00:18:42,280 --> 00:18:48,309
get the value from the<font color="#E5E5E5"> bucket if it</font>

368
00:18:45,700 --> 00:18:51,280
exists<font color="#CCCCCC"> then we</font><font color="#E5E5E5"> immediately</font><font color="#CCCCCC"> you can</font>

369
00:18:48,309 --> 00:18:54,550
return the ID<font color="#CCCCCC"> row ID</font><font color="#E5E5E5"> if it doesn't</font><font color="#CCCCCC"> exist</font>

370
00:18:51,280 --> 00:18:57,820
<font color="#E5E5E5">we take</font><font color="#CCCCCC"> a next available</font><font color="#E5E5E5"> row ID calling</font>

371
00:18:54,550 --> 00:19:00,700
this next<font color="#CCCCCC"> sequence</font><font color="#E5E5E5"> and we once again</font>

372
00:18:57,820 --> 00:19:04,360
<font color="#E5E5E5">encoded to the little endian format and</font>

373
00:19:00,700 --> 00:19:06,850
we'll put it<font color="#CCCCCC"> in a in a bucket for</font><font color="#E5E5E5"> board</font>

374
00:19:04,360 --> 00:19:09,820
<font color="#CCCCCC">eb and of course</font><font color="#E5E5E5"> return from the</font>

375
00:19:06,850 --> 00:19:12,399
function<font color="#E5E5E5"> so this is basically how</font><font color="#CCCCCC"> it</font>

376
00:19:09,820 --> 00:19:14,500
works<font color="#E5E5E5"> similar function is to get the</font>

377
00:19:12,400 --> 00:19:18,070
<font color="#E5E5E5">location from column ID instead of</font>

378
00:19:14,500 --> 00:19:20,710
encoding with decoding columns IDs to

379
00:19:18,070 --> 00:19:26,889
get<font color="#E5E5E5"> the location and this is basically</font>

380
00:19:20,710 --> 00:19:30,100
how<font color="#E5E5E5"> it</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> so maybe I can demo some</font>

381
00:19:26,890 --> 00:19:33,910
stuff<font color="#E5E5E5"> if I have a time it's like</font><font color="#CCCCCC"> a five</font>

382
00:19:30,100 --> 00:19:36,459
minute left<font color="#E5E5E5"> if you have</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> but it's a</font>

383
00:19:33,910 --> 00:19:38,850
question like do you have<font color="#E5E5E5"> any questions</font>

384
00:19:36,460 --> 00:19:42,280
or I can demo something<font color="#E5E5E5"> how magic works</font>

385
00:19:38,850 --> 00:19:45,010
<font color="#CCCCCC">because what</font><font color="#E5E5E5"> can go wrong with the life</font>

386
00:19:42,280 --> 00:19:48,340
demo we<font color="#E5E5E5"> found 500 people in front of the</font>

387
00:19:45,010 --> 00:19:51,550
and<font color="#CCCCCC"> industry</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> live streaming</font><font color="#E5E5E5"> nothing</font>

388
00:19:48,340 --> 00:19:55,949
but can make<font color="#CCCCCC"> happen</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> them are all</font>

389
00:19:51,550 --> 00:19:55,950
questions<font color="#E5E5E5"> okay</font>

390
00:20:04,280 --> 00:20:20,510
<font color="#CCCCCC">Lala bigger really say stop</font>

391
00:20:32,499 --> 00:20:38,389
<font color="#E5E5E5">okay</font>

392
00:20:33,649 --> 00:20:44,258
I<font color="#E5E5E5"> think I already compiled it so server</font>

393
00:20:38,389 --> 00:20:50,590
<font color="#E5E5E5">get</font><font color="#CCCCCC"> me server I have some small</font><font color="#E5E5E5"> repo</font>

394
00:20:44,259 --> 00:21:03,470
here in<font color="#CCCCCC"> Reapers indexes will go</font><font color="#E5E5E5"> Texas</font>

395
00:20:50,590 --> 00:21:05,389
okay okay<font color="#CCCCCC"> I put it some devack functions</font>

396
00:21:03,470 --> 00:21:09,200
<font color="#E5E5E5">so we can see here</font><font color="#CCCCCC"> how it</font><font color="#E5E5E5"> works</font>

397
00:21:05,389 --> 00:21:11,809
<font color="#E5E5E5">basically I'm still debugging with print</font>

398
00:21:09,200 --> 00:21:13,340
lines<font color="#CCCCCC"> I don't know how many</font><font color="#E5E5E5"> of you likes</font>

399
00:21:11,809 --> 00:21:15,799
debugging with print lines

400
00:21:13,340 --> 00:21:18,049
<font color="#E5E5E5">yeah I'm it's like we are passing almost</font>

401
00:21:15,799 --> 00:21:19,940
first quarter of<font color="#E5E5E5"> the 21st century</font><font color="#CCCCCC"> but we</font>

402
00:21:18,049 --> 00:21:22,490
are still debugging with print lines<font color="#CCCCCC"> I</font>

403
00:21:19,940 --> 00:21:25,279
really like them and I hope<font color="#E5E5E5"> there it</font>

404
00:21:22,490 --> 00:21:28,309
will tell me<font color="#E5E5E5"> how about improvements on</font>

405
00:21:25,279 --> 00:21:35,590
mark<font color="#E5E5E5"> or else but so far with lines also</font>

406
00:21:28,309 --> 00:21:35,590
<font color="#E5E5E5">save my day</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> all right</font>

407
00:21:55,700 --> 00:22:07,540
no possible<font color="#CCCCCC"> route okay</font><font color="#E5E5E5"> let me open I</font>

408
00:22:04,130 --> 00:22:07,540
have some<font color="#E5E5E5"> script</font>

409
00:22:12,640 --> 00:22:26,020
<font color="#E5E5E5">okay so first of all</font><font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> show</font>

410
00:22:17,200 --> 00:22:28,720
<font color="#E5E5E5">you one</font><font color="#CCCCCC"> of the tables</font><font color="#E5E5E5"> which is so I will</font>

411
00:22:26,020 --> 00:22:31,179
test against some table which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> called</font>

412
00:22:28,720 --> 00:22:33,400
<font color="#CCCCCC">comic files and it contains like a</font>

413
00:22:31,179 --> 00:22:36,190
couple<font color="#E5E5E5"> a deposit all right D committee</font>

414
00:22:33,400 --> 00:22:40,480
hush-hush<font color="#CCCCCC"> and you have a one just one</font>

415
00:22:36,190 --> 00:22:52,179
repo called basic and it has tons of

416
00:22:40,480 --> 00:22:58,000
stuff so right now so right now I'll

417
00:22:52,179 --> 00:22:58,480
<font color="#E5E5E5">create the index first index okay three</font>

418
00:22:58,000 --> 00:23:02,950
indexes

419
00:22:58,480 --> 00:23:06,690
<font color="#CCCCCC">a B on columns on two columns</font><font color="#E5E5E5"> and a on</font>

420
00:23:02,950 --> 00:23:06,690
one<font color="#E5E5E5"> column and B on the second column</font>

421
00:23:09,240 --> 00:23:19,559
okay<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is Carly's debugging works</font>

422
00:23:14,640 --> 00:23:23,830
so basically<font color="#E5E5E5"> basically it creates the</font>

423
00:23:19,559 --> 00:23:29,740
fields in your<font color="#E5E5E5"> index it and it populates</font>

424
00:23:23,830 --> 00:23:31,750
<font color="#E5E5E5">by data and these</font><font color="#CCCCCC"> numbers are so every</font>

425
00:23:29,740 --> 00:23:35,440
row<font color="#E5E5E5"> has these numbers and these numbers</font>

426
00:23:31,750 --> 00:23:39,610
say in which column the one was said

427
00:23:35,440 --> 00:23:44,760
because I increase the font so much so<font color="#E5E5E5"> I</font>

428
00:23:39,610 --> 00:23:49,570
<font color="#E5E5E5">don't know if what I want to say if it's</font>

429
00:23:44,760 --> 00:23:53,890
so here for example we<font color="#CCCCCC"> have we have a</font>

430
00:23:49,570 --> 00:23:58,720
field which is<font color="#CCCCCC"> assigned to</font><font color="#E5E5E5"> the file path</font>

431
00:23:53,890 --> 00:24:01,419
in index<font color="#E5E5E5"> a B but if you go to the go</font><font color="#CCCCCC"> to</font>

432
00:23:58,720 --> 00:24:06,370
<font color="#E5E5E5">the field which is also file path but in</font>

433
00:24:01,419 --> 00:24:10,929
index<font color="#E5E5E5"> a or B it will have the same data</font>

434
00:24:06,370 --> 00:24:13,689
<font color="#CCCCCC">so basically having</font><font color="#E5E5E5"> also indexes on two</font>

435
00:24:10,929 --> 00:24:16,360
<font color="#E5E5E5">columns and on just on one column it</font>

436
00:24:13,690 --> 00:24:19,330
duplicates data<font color="#E5E5E5"> so it's better instead</font>

437
00:24:16,360 --> 00:24:24,030
<font color="#E5E5E5">of duplicating data created the one in</font>

438
00:24:19,330 --> 00:24:24,030
the expert column and

439
00:24:27,570 --> 00:24:43,570
so let's say we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use this select</font>

440
00:24:36,549 --> 00:24:45,999
to get to get<font color="#E5E5E5"> the comet ha to get</font>

441
00:24:43,570 --> 00:24:49,090
everything where the comet -<font color="#E5E5E5"> is this and</font>

442
00:24:45,999 --> 00:24:51,999
<font color="#E5E5E5">five of his</font><font color="#CCCCCC"> death and we caught</font><font color="#E5E5E5"> we call</font>

443
00:24:49,090 --> 00:24:55,439
explain to explain how the query will

444
00:24:51,999 --> 00:25:01,149
work and it says it will<font color="#CCCCCC"> use indexes</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> B</font>

445
00:24:55,440 --> 00:25:09,909
if I replace and<font color="#E5E5E5"> by or it will use</font>

446
00:25:01,149 --> 00:25:11,350
<font color="#E5E5E5">indexes just a and B so the reason why I</font>

447
00:25:09,909 --> 00:25:13,210
said<font color="#E5E5E5"> that</font>

448
00:25:11,350 --> 00:25:16,928
it's better to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> independent in the</font>

449
00:25:13,210 --> 00:25:29,619
<font color="#E5E5E5">access instead of is that I can drop the</font>

450
00:25:16,929 --> 00:25:33,669
index on a<font color="#E5E5E5"> B I can drop and once again</font>

451
00:25:29,619 --> 00:25:35,259
<font color="#CCCCCC">call explain and this time</font><font color="#E5E5E5"> to in Texas</font>

452
00:25:33,669 --> 00:25:38,409
will be<font color="#E5E5E5"> used instead</font><font color="#CCCCCC"> of one because</font><font color="#E5E5E5"> I</font>

453
00:25:35,259 --> 00:25:41,019
<font color="#E5E5E5">drove the a B so right now we can we can</font>

454
00:25:38,409 --> 00:25:48,610
<font color="#E5E5E5">use indexes a and B independently and it</font>

455
00:25:41,019 --> 00:25:54,999
will<font color="#CCCCCC"> also</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> with or okay last thing</font>

456
00:25:48,610 --> 00:25:57,969
<font color="#E5E5E5">is that let me query query</font><font color="#CCCCCC"> did gave</font>

457
00:25:54,999 --> 00:26:02,529
result<font color="#E5E5E5"> and this is how it work we get</font>

458
00:25:57,970 --> 00:26:05,379
two rows from the<font color="#E5E5E5"> bitmaps we intersect</font>

459
00:26:02,529 --> 00:26:08,529
them<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> position the only position</font>

460
00:26:05,379 --> 00:26:12,340
<font color="#CCCCCC">zero zero is</font><font color="#E5E5E5"> the position where</font><font color="#CCCCCC"> the in</font>

461
00:26:08,529 --> 00:26:14,529
involve<font color="#CCCCCC"> bitmaps</font><font color="#E5E5E5"> where one was set so we</font>

462
00:26:12,340 --> 00:26:18,100
get the just a column one<font color="#E5E5E5"> and as a</font>

463
00:26:14,529 --> 00:26:23,320
result<font color="#E5E5E5"> it should be just</font><font color="#CCCCCC"> one just one</font>

464
00:26:18,100 --> 00:26:27,639
record wait<font color="#CCCCCC"> where is it</font><font color="#E5E5E5"> okay and this</font><font color="#CCCCCC"> is</font>

465
00:26:23,320 --> 00:26:29,120
this one I'm done<font color="#CCCCCC"> I'm running of the</font>

466
00:26:27,639 --> 00:26:32,409
time sorry

467
00:26:29,120 --> 00:26:32,409
that's it thank you

468
00:26:37,550 --> 00:26:42,350
perfect thank you

469
00:26:52,690 --> 00:26:55,690
<font color="#E5E5E5">yeah</font>

470
00:26:59,389 --> 00:27:02,389
hopefully

471
00:27:19,790 --> 00:27:22,899
[Music]

472
00:27:23,570 --> 00:27:25,570
Oh

473
00:27:25,860 --> 00:27:28,729
my money

474
00:27:41,060 --> 00:27:46,690
[Music]

475
00:27:56,710 --> 00:28:14,670
<font color="#CCCCCC">I resent about</font><font color="#E5E5E5"> with my money</font>

476
00:28:03,460 --> 00:28:18,950
[Music]

477
00:28:14,670 --> 00:28:18,950
now we're going<font color="#CCCCCC"> to pause thank you</font>

478
00:28:41,400 --> 00:28:44,300
are you happy

479
00:28:48,910 --> 00:28:52,339
[Music]

480
00:29:06,679 --> 00:29:12,320
boy boss<font color="#E5E5E5"> even</font>

481
00:29:23,450 --> 00:29:32,060
I try to<font color="#E5E5E5"> steer um do you want</font><font color="#CCCCCC"> some food</font>

482
00:29:35,179 --> 00:29:43,289
oh yeah

483
00:29:38,039 --> 00:29:43,289
I'm not filled<font color="#CCCCCC"> with an apple today</font><font color="#E5E5E5"> I'm</font>

484
00:29:43,640 --> 00:29:49,170
this morning I<font color="#E5E5E5"> was filled with an apple</font>

485
00:29:45,990 --> 00:29:49,170
[Music]

486
00:29:53,200 --> 00:29:58,740
[Music]

487
00:29:56,009 --> 00:30:01,860
<font color="#E5E5E5">without lays perfect for me and</font><font color="#CCCCCC"> I like</font>

488
00:29:58,740 --> 00:30:04,100
<font color="#E5E5E5">that doing that I'll figure it out of</font>

489
00:30:01,860 --> 00:30:04,100
Dorne

