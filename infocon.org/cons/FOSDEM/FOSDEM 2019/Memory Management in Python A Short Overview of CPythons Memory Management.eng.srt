1
00:00:04,770 --> 00:00:10,809
hello everyone my name is<font color="#CCCCCC"> Bertrand I</font>

2
00:00:07,750 --> 00:00:12,639
must do<font color="#E5E5E5"> this from Turkey</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> session</font>

3
00:00:10,809 --> 00:00:15,399
<font color="#E5E5E5">we are going</font><font color="#CCCCCC"> to talk about C POTUS</font>

4
00:00:12,639 --> 00:00:17,169
member<font color="#CCCCCC"> management C</font><font color="#E5E5E5"> Python is the major</font>

5
00:00:15,400 --> 00:00:19,300
implementation of Python language and

6
00:00:17,170 --> 00:00:21,520
there are other implementations<font color="#CCCCCC"> like pi</font>

7
00:00:19,300 --> 00:00:23,590
<font color="#CCCCCC">pi with their own memory management and</font>

8
00:00:21,520 --> 00:00:26,770
there are implementations like<font color="#CCCCCC"> jarton</font>

9
00:00:23,590 --> 00:00:28,570
and<font color="#CCCCCC"> ironpython</font><font color="#E5E5E5"> they use their written</font>

10
00:00:26,770 --> 00:00:31,930
language<font color="#CCCCCC"> member management</font><font color="#E5E5E5"> for example</font>

11
00:00:28,570 --> 00:00:33,850
<font color="#E5E5E5">jython use games memory management</font><font color="#CCCCCC"> this</font>

12
00:00:31,930 --> 00:00:38,019
talk contains<font color="#E5E5E5"> out of implementation</font>

13
00:00:33,850 --> 00:00:44,170
details so you can most find stuff in

14
00:00:38,019 --> 00:00:48,849
<font color="#CCCCCC">ducts might suit</font><font color="#E5E5E5"> you learn</font><font color="#CCCCCC"> nevermind</font>

15
00:00:44,170 --> 00:00:52,749
concepts<font color="#CCCCCC"> it will show you behind the</font>

16
00:00:48,850 --> 00:00:55,809
curtain for an<font color="#E5E5E5"> example</font><font color="#CCCCCC"> you may</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> why</font>

17
00:00:52,749 --> 00:00:58,569
<font color="#E5E5E5">you why python doesn't release memory</font>

18
00:00:55,809 --> 00:01:02,708
back to the system<font color="#E5E5E5"> or have it finds and</font>

19
00:00:58,569 --> 00:01:08,500
<font color="#CCCCCC">directs cited references</font><font color="#E5E5E5"> all of them has</font>

20
00:01:02,709 --> 00:01:10,750
an answer in behind the curtain you<font color="#CCCCCC"> are</font>

21
00:01:08,500 --> 00:01:13,990
going to<font color="#E5E5E5"> learn how to control it Python</font>

22
00:01:10,750 --> 00:01:16,380
<font color="#E5E5E5">has an interface</font><font color="#CCCCCC"> for all internal things</font>

23
00:01:13,990 --> 00:01:19,179
like abstract<font color="#E5E5E5"> syntax tree they mentioned</font>

24
00:01:16,380 --> 00:01:21,670
parser and<font color="#E5E5E5"> the interface for garbage</font>

25
00:01:19,180 --> 00:01:24,280
collector we can control<font color="#E5E5E5"> it</font>

26
00:01:21,670 --> 00:01:28,180
there are helper functions like assisted

27
00:01:24,280 --> 00:01:31,210
<font color="#E5E5E5">get reference you can</font><font color="#CCCCCC"> learn of</font><font color="#E5E5E5"> an object</font>

28
00:01:28,180 --> 00:01:33,700
in memory although<font color="#CCCCCC"> it seems unnecessary</font>

29
00:01:31,210 --> 00:01:36,939
to learn them<font color="#E5E5E5"> Instagram increased their</font>

30
00:01:33,700 --> 00:01:43,210
performance by<font color="#CCCCCC"> 10 persons with disabling</font>

31
00:01:36,939 --> 00:01:45,969
or enabling<font color="#CCCCCC"> Kesey whenever they need</font><font color="#E5E5E5"> you</font>

32
00:01:43,210 --> 00:01:49,178
are going to handle memory link is fight

33
00:01:45,969 --> 00:01:56,079
them and trace them into source with

34
00:01:49,179 --> 00:01:58,119
understanding of memory management on

35
00:01:56,079 --> 00:02:01,479
location of memory memory measurements

36
00:01:58,119 --> 00:02:04,920
we can examine<font color="#CCCCCC"> arrangement in two</font>

37
00:02:01,479 --> 00:02:04,920
sections<font color="#CCCCCC"> allocation and de-allocation</font>

38
00:02:05,280 --> 00:02:09,669
<font color="#E5E5E5">before we start</font>

39
00:02:07,200 --> 00:02:14,020
don't forget everything is an object<font color="#CCCCCC"> in</font>

40
00:02:09,669 --> 00:02:18,970
<font color="#CCCCCC">Parkton so in</font><font color="#E5E5E5"> that memory everything can</font>

41
00:02:14,020 --> 00:02:20,950
be objects every<font color="#CCCCCC"> Python object has to</font>

42
00:02:18,970 --> 00:02:24,489
<font color="#CCCCCC">once</font><font color="#E5E5E5"> the reference count and the other</font>

43
00:02:20,950 --> 00:02:26,140
<font color="#CCCCCC">mask</font><font color="#E5E5E5"> object itself reference count is</font>

44
00:02:24,489 --> 00:02:30,790
the count of total reference made to

45
00:02:26,140 --> 00:02:33,819
that object<font color="#E5E5E5"> if you set a to 10 and B to</font>

46
00:02:30,790 --> 00:02:37,060
10<font color="#E5E5E5"> you will increase times reference</font>

47
00:02:33,819 --> 00:02:39,549
count by 2 and if<font color="#E5E5E5"> you delete or set a</font>

48
00:02:37,060 --> 00:02:42,069
and<font color="#E5E5E5"> V to another object you will</font>

49
00:02:39,550 --> 00:02:44,349
decrease the reference count by<font color="#E5E5E5"> 2 if an</font>

50
00:02:42,069 --> 00:02:46,000
<font color="#E5E5E5">object's</font><font color="#CCCCCC"> refer</font><font color="#E5E5E5"> start to reach zero it</font>

51
00:02:44,349 --> 00:02:49,109
will immediately<font color="#CCCCCC"> delicated</font>

52
00:02:46,000 --> 00:02:53,200
but there are some cases like object

53
00:02:49,110 --> 00:02:56,350
reference itself and it could<font color="#CCCCCC"> detect</font><font color="#E5E5E5"> by</font>

54
00:02:53,200 --> 00:03:00,730
the reference count<font color="#E5E5E5"> manager so there is</font>

55
00:02:56,350 --> 00:03:02,560
a GC and there<font color="#E5E5E5"> AB type pointer it points</font>

56
00:03:00,730 --> 00:03:04,929
object itself

57
00:03:02,560 --> 00:03:06,910
it contains value of object type of

58
00:03:04,930 --> 00:03:14,049
object name of object every attribute of

59
00:03:06,910 --> 00:03:19,599
an object it is<font color="#CCCCCC"> my Mormon model of</font>

60
00:03:14,049 --> 00:03:21,940
<font color="#E5E5E5">cpython in the top layer layer</font><font color="#CCCCCC"> 3 based</font>

61
00:03:19,599 --> 00:03:25,298
<font color="#CCCCCC">python objects</font><font color="#E5E5E5"> and some of internal</font>

62
00:03:21,940 --> 00:03:27,940
stuff in the layer - there's our<font color="#CCCCCC"> Python</font>

63
00:03:25,299 --> 00:03:33,310
object<font color="#E5E5E5"> or locator it abstracts memory</font>

64
00:03:27,940 --> 00:03:36,010
and manages objects in the layer 1 there

65
00:03:33,310 --> 00:03:38,290
is<font color="#CCCCCC"> pythons</font><font color="#E5E5E5"> remember a locator it</font><font color="#CCCCCC"> ensures</font>

66
00:03:36,010 --> 00:03:41,350
there is enough space in heap<font color="#E5E5E5"> if not it</font>

67
00:03:38,290 --> 00:03:44,290
requests<font color="#E5E5E5"> memory from layer 0 layer 0 is</font>

68
00:03:41,350 --> 00:03:46,600
<font color="#CCCCCC">the mall locator</font><font color="#E5E5E5"> if you didn't change</font>

69
00:03:44,290 --> 00:03:50,380
anything or I'm using a standard Linux

70
00:03:46,600 --> 00:03:52,000
distribution<font color="#E5E5E5"> it might be</font><font color="#CCCCCC"> Moloch</font><font color="#E5E5E5"> and in</font>

71
00:03:50,380 --> 00:03:58,060
bottom layers there are physical<font color="#E5E5E5"> and low</font>

72
00:03:52,000 --> 00:04:01,120
things we are not<font color="#E5E5E5"> talk about item device</font>

73
00:03:58,060 --> 00:04:04,120
objects<font color="#CCCCCC"> into sections if an object</font>

74
00:04:01,120 --> 00:04:07,180
bigger<font color="#E5E5E5"> than small object threshold it's</font>

75
00:04:04,120 --> 00:04:09,430
called as big if not it called as small

76
00:04:07,180 --> 00:04:12,400
small object result is a static constant

77
00:04:09,430 --> 00:04:16,570
<font color="#E5E5E5">that defined in optimal octave C in C</font>

78
00:04:12,400 --> 00:04:20,590
<font color="#E5E5E5">pattern repository is 512 bytes my</font>

79
00:04:16,570 --> 00:04:23,740
default big objects<font color="#E5E5E5"> it's not one</font><font color="#CCCCCC"> of our</font>

80
00:04:20,589 --> 00:04:26,919
concerns<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> direct routes big</font>

81
00:04:23,740 --> 00:04:30,700
objects<font color="#E5E5E5"> to system allocated with a set</font>

82
00:04:26,919 --> 00:04:32,409
of purpose small objects<font color="#E5E5E5"> they managed by</font>

83
00:04:30,700 --> 00:04:35,590
layer<font color="#CCCCCC"> two</font>

84
00:04:32,410 --> 00:04:37,390
with<font color="#E5E5E5"> three level of abstractions the</font>

85
00:04:35,590 --> 00:04:41,500
first one is blocks<font color="#E5E5E5"> they anchor</font><font color="#CCCCCC"> plays</font>

86
00:04:37,390 --> 00:04:43,690
<font color="#CCCCCC">Python objects and proof Poussin Cobb</font>

87
00:04:41,500 --> 00:04:46,240
<font color="#CCCCCC">plays same site looks and their size</font>

88
00:04:43,690 --> 00:04:48,940
<font color="#CCCCCC">four kilobytes</font><font color="#E5E5E5"> same as a</font><font color="#CCCCCC"> mutual member</font>

89
00:04:46,240 --> 00:04:55,890
page and there are arenas they contains

90
00:04:48,940 --> 00:05:00,010
64 proof<font color="#E5E5E5"> will</font><font color="#CCCCCC"> obscure solo obstructions</font>

91
00:04:55,890 --> 00:05:02,680
<font color="#CCCCCC">the size of</font><font color="#E5E5E5"> block</font><font color="#CCCCCC"> determined</font><font color="#E5E5E5"> with eight</font>

92
00:05:00,010 --> 00:05:07,900
might<font color="#E5E5E5"> align rotation for an example you</font>

93
00:05:02,680 --> 00:05:12,930
<font color="#E5E5E5">have third bite sized object it will put</font>

94
00:05:07,900 --> 00:05:16,150
the 32 by size block and<font color="#E5E5E5"> whenever your</font>

95
00:05:12,930 --> 00:05:19,420
object de-allocated<font color="#CCCCCC"> Python camp put</font>

96
00:05:16,150 --> 00:05:24,429
another object<font color="#CCCCCC"> in the range of size in a</font>

97
00:05:19,420 --> 00:05:27,760
range of 25 to 32<font color="#E5E5E5"> to that same block</font><font color="#CCCCCC"> it</font>

98
00:05:24,430 --> 00:05:31,480
brings optimization and there are size

99
00:05:27,760 --> 00:05:36,700
<font color="#E5E5E5">ideas value it has pulls to contain same</font>

100
00:05:31,480 --> 00:05:38,800
size blocks<font color="#E5E5E5"> implementation of blocks</font>

101
00:05:36,700 --> 00:05:41,670
they designed for containing<font color="#E5E5E5"> Python</font>

102
00:05:38,800 --> 00:05:44,280
objects they<font color="#E5E5E5"> use 8 by 10 I'm notation</font>

103
00:05:41,670 --> 00:05:46,990
for<font color="#E5E5E5"> better manage or free blocks and</font>

104
00:05:44,280 --> 00:05:49,090
they<font color="#E5E5E5"> mark this free and linked</font><font color="#CCCCCC"> to three</font>

105
00:05:46,990 --> 00:05:53,470
<font color="#E5E5E5">blocks list of</font><font color="#CCCCCC"> their pools</font>

106
00:05:49,090 --> 00:05:59,049
<font color="#CCCCCC">Mandira object</font><font color="#E5E5E5"> alligators tooth</font><font color="#CCCCCC"> day and</font>

107
00:05:53,470 --> 00:06:03,130
<font color="#CCCCCC">hope they stay in size blocks their size</font>

108
00:05:59,050 --> 00:06:06,850
4 kilobytes<font color="#E5E5E5"> every pool has a pool header</font>

109
00:06:03,130 --> 00:06:10,450
<font color="#E5E5E5">over at it contains a list of three</font>

110
00:06:06,850 --> 00:06:12,370
blocks next time previous proof the

111
00:06:10,450 --> 00:06:14,800
arena index of memory

112
00:06:12,370 --> 00:06:23,050
besides<font color="#CCCCCC"> I Dix of blobs inside and some</font>

113
00:06:14,800 --> 00:06:26,470
memory stuff<font color="#CCCCCC"> pulses free block list the</font>

114
00:06:23,050 --> 00:06:30,550
list contains<font color="#E5E5E5"> three blocks and whenever</font>

115
00:06:26,470 --> 00:06:33,370
<font color="#E5E5E5">a block freed if you sort that list the</font>

116
00:06:30,550 --> 00:06:37,150
are states of blocks used<font color="#E5E5E5"> miss it's</font>

117
00:06:33,370 --> 00:06:38,860
neither empty nor full<font color="#CCCCCC"> at this one block</font>

118
00:06:37,150 --> 00:06:42,109
is free and at least one block is

119
00:06:38,860 --> 00:06:44,690
currently<font color="#CCCCCC"> owed</font><font color="#E5E5E5"> the full mist</font>

120
00:06:42,110 --> 00:06:48,169
there is not currently<font color="#CCCCCC"> available</font><font color="#E5E5E5"> blocks</font>

121
00:06:44,690 --> 00:06:51,650
<font color="#E5E5E5">and the empty means every block is empty</font>

122
00:06:48,169 --> 00:06:55,758
and it<font color="#E5E5E5"> will be linked to a free boost</font>

123
00:06:51,650 --> 00:07:00,888
list of the<font color="#CCCCCC"> its</font><font color="#E5E5E5"> arena arenas they anchor</font>

124
00:06:55,759 --> 00:07:03,919
plates<font color="#E5E5E5"> tools there is the overhead</font><font color="#CCCCCC"> like</font>

125
00:07:00,889 --> 00:07:05,840
tools and<font color="#E5E5E5"> that blue blue link list with</font>

126
00:07:03,919 --> 00:07:09,830
next<font color="#E5E5E5"> time in a</font><font color="#CCCCCC"> primer in the pools</font><font color="#E5E5E5"> their</font>

127
00:07:05,840 --> 00:07:13,638
size 256 kilobytes the mall locator only

128
00:07:09,830 --> 00:07:17,389
allocate space for arenas and the other

129
00:07:13,639 --> 00:07:24,889
abstractions<font color="#E5E5E5"> use space for arenas space</font>

130
00:07:17,389 --> 00:07:29,330
and<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> only relates memory back to</font>

131
00:07:24,889 --> 00:07:37,849
the system when all pools is empty in

132
00:07:29,330 --> 00:07:40,219
<font color="#E5E5E5">that arena</font><font color="#CCCCCC"> objects specific</font><font color="#E5E5E5"> there are</font>

133
00:07:37,849 --> 00:07:44,000
some objects<font color="#E5E5E5"> which cases</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> related</font>

134
00:07:40,219 --> 00:07:49,009
with memory<font color="#CCCCCC"> management for example</font>

135
00:07:44,000 --> 00:07:50,690
string tonic partying in<font color="#CCCCCC"> Street impact</font>

136
00:07:49,009 --> 00:07:51,349
<font color="#E5E5E5">of strings are immutable seconds of</font>

137
00:07:50,690 --> 00:07:55,400
<font color="#CCCCCC">Unicode</font>

138
00:07:51,349 --> 00:07:57,620
so<font color="#CCCCCC"> Python can reference</font><font color="#E5E5E5"> same string</font>

139
00:07:55,400 --> 00:08:00,138
twice instead<font color="#CCCCCC"> of creating a new string</font>

140
00:07:57,620 --> 00:08:04,069
in every operation we called string

141
00:08:00,139 --> 00:08:07,250
<font color="#E5E5E5">interning if a string is simple it will</font>

142
00:08:04,069 --> 00:08:10,370
be<font color="#E5E5E5"> internet and</font><font color="#CCCCCC"> does have to create</font>

143
00:08:07,250 --> 00:08:15,099
trace<font color="#CCCCCC"> twice simple strings are</font>

144
00:08:10,370 --> 00:08:18,069
<font color="#E5E5E5">escalators digits and underscores for</font>

145
00:08:15,099 --> 00:08:20,870
<font color="#CCCCCC">example on the central strings and</font>

146
00:08:18,069 --> 00:08:23,719
disciplines in<font color="#CCCCCC"> compiled time</font><font color="#E5E5E5"> so function</font>

147
00:08:20,870 --> 00:08:28,490
calls<font color="#E5E5E5"> and constructors doesn't affect</font>

148
00:08:23,719 --> 00:08:30,919
that and there<font color="#E5E5E5"> is small integers</font>

149
00:08:28,490 --> 00:08:35,529
it's the<font color="#E5E5E5"> optimization for C Python</font>

150
00:08:30,919 --> 00:08:42,380
<font color="#E5E5E5">Python pre allocates integers between</font>

151
00:08:35,529 --> 00:08:45,680
negative 5 to 20 256<font color="#E5E5E5"> there are internal</font>

152
00:08:42,380 --> 00:08:48,399
reference to the integers and it<font color="#E5E5E5"> brings</font>

153
00:08:45,680 --> 00:08:48,399
optimizations

154
00:08:49,440 --> 00:08:53,670
garbage collection<font color="#CCCCCC"> before we start</font>

155
00:08:51,840 --> 00:08:57,870
talking about garbage<font color="#E5E5E5"> collection</font>

156
00:08:53,670 --> 00:09:01,170
don't forget<font color="#E5E5E5"> Tom as not variables</font>

157
00:08:57,870 --> 00:09:03,600
it has names<font color="#E5E5E5"> Institute and B difference</font>

158
00:09:01,170 --> 00:09:07,849
between names and variables names only

159
00:09:03,600 --> 00:09:11,870
<font color="#E5E5E5">points to an object that</font><font color="#CCCCCC"> lives in heap</font>

160
00:09:07,850 --> 00:09:11,870
variables contain objects failure

161
00:09:12,920 --> 00:09:19,260
<font color="#E5E5E5">reference is the pointer to</font><font color="#CCCCCC"> that object</font>

162
00:09:16,620 --> 00:09:21,390
that lives in heap and<font color="#E5E5E5"> reference count</font>

163
00:09:19,260 --> 00:09:26,760
as I mentioned the total<font color="#CCCCCC"> references made</font>

164
00:09:21,390 --> 00:09:29,640
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> table jects there is</font><font color="#E5E5E5"> besides and</font>

165
00:09:26,760 --> 00:09:33,510
besides of reference counting<font color="#E5E5E5"> it's easy</font>

166
00:09:29,640 --> 00:09:37,470
to find<font color="#E5E5E5"> unused objects and it doesn't</font>

167
00:09:33,510 --> 00:09:41,189
require a marking time like in<font color="#CCCCCC"> Marcos</font>

168
00:09:37,470 --> 00:09:43,140
<font color="#CCCCCC">sweep but</font><font color="#E5E5E5"> there are</font><font color="#CCCCCC"> bad sites like it</font>

169
00:09:41,190 --> 00:09:45,540
had<font color="#E5E5E5"> every partner object contains a</font>

170
00:09:43,140 --> 00:09:48,330
reference count field<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> cost</font><font color="#E5E5E5"> or</font>

171
00:09:45,540 --> 00:09:51,839
object<font color="#E5E5E5"> coverage it doesn't</font><font color="#CCCCCC"> support</font><font color="#E5E5E5"> for</font>

172
00:09:48,330 --> 00:09:54,930
cited references<font color="#CCCCCC"> and it is one of</font><font color="#E5E5E5"> the</font>

173
00:09:51,840 --> 00:09:58,610
reasons of<font color="#CCCCCC"> Jill</font><font color="#E5E5E5"> if Jill doesn't exist</font>

174
00:09:54,930 --> 00:10:02,180
<font color="#E5E5E5">and to</font><font color="#CCCCCC"> tread tries to increase and</font>

175
00:09:58,610 --> 00:10:05,910
objects<font color="#CCCCCC"> ref</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> values reference count</font>

176
00:10:02,180 --> 00:10:12,120
<font color="#CCCCCC">it will cause</font><font color="#E5E5E5"> memory leaks and that word</font>

177
00:10:05,910 --> 00:10:15,980
and there is generation GC for cyclic

178
00:10:12,120 --> 00:10:19,620
references<font color="#CCCCCC"> parson runs this GC</font>

179
00:10:15,980 --> 00:10:24,830
periodically<font color="#CCCCCC"> it used an</font><font color="#E5E5E5"> algorithm called</font>

180
00:10:19,620 --> 00:10:27,570
Marcus sleep cycle preferences are

181
00:10:24,830 --> 00:10:31,560
refers that<font color="#E5E5E5"> refers it starts for an</font>

182
00:10:27,570 --> 00:10:34,890
example<font color="#E5E5E5"> if you add the list itself the</font>

183
00:10:31,560 --> 00:10:38,010
list reference<font color="#E5E5E5"> itself and the various in</font>

184
00:10:34,890 --> 00:10:40,590
<font color="#E5E5E5">cyclists refers to list and part</font>

185
00:10:38,010 --> 00:10:43,939
reference counting can coolant<font color="#CCCCCC"> directed</font>

186
00:10:40,590 --> 00:10:49,590
<font color="#E5E5E5">so</font><font color="#CCCCCC"> mark-and-sweep</font><font color="#E5E5E5"> marks every reachable</font>

187
00:10:43,940 --> 00:10:55,250
<font color="#CCCCCC">object</font><font color="#E5E5E5"> and sweeps rest and the reachable</font>

188
00:10:49,590 --> 00:10:59,130
<font color="#E5E5E5">objects get next to the</font><font color="#CCCCCC"> next generation</font>

189
00:10:55,250 --> 00:11:03,230
<font color="#E5E5E5">and the generations help you to help GC</font>

190
00:10:59,130 --> 00:11:03,230
<font color="#CCCCCC">through five</font><font color="#E5E5E5"> psychic references easily</font>

191
00:11:03,710 --> 00:11:18,530
so how<font color="#E5E5E5"> to track or manage them</font><font color="#CCCCCC"> Python</font>

192
00:11:10,080 --> 00:11:21,390
<font color="#CCCCCC">has internal stuff like you see GC is</font><font color="#E5E5E5"> a</font>

193
00:11:18,530 --> 00:11:26,790
interface<font color="#E5E5E5"> to garbage collector</font><font color="#CCCCCC"> there is</font>

194
00:11:21,390 --> 00:11:30,240
a function here that creates<font color="#E5E5E5"> a list and</font>

195
00:11:26,790 --> 00:11:36,060
this append<font color="#E5E5E5"> itself</font>

196
00:11:30,240 --> 00:11:39,630
I call it<font color="#CCCCCC"> ten times then I called you</font>

197
00:11:36,060 --> 00:11:42,660
see that<font color="#E5E5E5"> collect it</font><font color="#CCCCCC"> call it runs</font><font color="#E5E5E5"> Marcus</font>

198
00:11:39,630 --> 00:11:47,850
<font color="#CCCCCC">sleep operation and returns total amount</font>

199
00:11:42,660 --> 00:11:51,930
of collected objects here<font color="#CCCCCC"> and before</font>

200
00:11:47,850 --> 00:11:57,540
<font color="#CCCCCC">that I disable automatic EC</font><font color="#E5E5E5"> so it</font>

201
00:11:51,930 --> 00:11:59,670
doesn't start<font color="#E5E5E5"> without my command</font><font color="#CCCCCC"> then I</font>

202
00:11:57,540 --> 00:12:02,760
called it and you can see<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> ten</font>

203
00:11:59,670 --> 00:12:07,589
objects freed and you can<font color="#E5E5E5"> check if an</font>

204
00:12:02,760 --> 00:12:10,770
object record by garbage collector<font color="#CCCCCC"> bided</font>

205
00:12:07,590 --> 00:12:13,380
thought<font color="#E5E5E5"> atomic atomic types is not going</font>

206
00:12:10,770 --> 00:12:22,680
to be<font color="#E5E5E5"> triggered and non-atomic types is</font>

207
00:12:13,380 --> 00:12:26,910
going to beat records<font color="#CCCCCC"> if you have ever</font>

208
00:12:22,680 --> 00:12:32,339
written as C extension to passion or use

209
00:12:26,910 --> 00:12:34,650
it<font color="#E5E5E5"> C module or you saw a patent</font>

210
00:12:32,340 --> 00:12:38,430
application that consumes more<font color="#E5E5E5"> memory</font>

211
00:12:34,650 --> 00:12:41,250
than it needs<font color="#E5E5E5"> there might be a memory</font>

212
00:12:38,430 --> 00:12:42,209
relief so in Part III<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a model</font>

213
00:12:41,250 --> 00:12:45,750
came

214
00:12:42,210 --> 00:12:49,910
it's called<font color="#E5E5E5"> trace</font><font color="#CCCCCC"> mode look</font><font color="#E5E5E5"> it traces</font>

215
00:12:45,750 --> 00:12:54,360
<font color="#CCCCCC">Maalik operations and helps you to</font><font color="#E5E5E5"> find</font>

216
00:12:49,910 --> 00:12:56,640
memory leaks<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a start function it</font>

217
00:12:54,360 --> 00:12:59,040
takes<font color="#E5E5E5"> frames</font><font color="#CCCCCC"> I'm just using my frame</font>

218
00:12:56,640 --> 00:12:59,890
here but if you're a complex code you

219
00:12:59,040 --> 00:13:03,040
can you

220
00:12:59,890 --> 00:13:05,319
can<font color="#E5E5E5"> increase</font><font color="#CCCCCC"> that frames amount then I</font>

221
00:13:03,040 --> 00:13:08,219
take a snapshot<font color="#E5E5E5"> snapshot contains</font>

222
00:13:05,320 --> 00:13:11,769
relevant information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> malach and</font>

223
00:13:08,220 --> 00:13:16,839
you can take more snapshots<font color="#E5E5E5"> and compare</font>

224
00:13:11,769 --> 00:13:21,279
searches they<font color="#CCCCCC"> can compare then I access</font>

225
00:13:16,839 --> 00:13:21,820
the stats<font color="#E5E5E5"> of snapshots and get trace</font>

226
00:13:21,279 --> 00:13:25,300
back

227
00:13:21,820 --> 00:13:27,640
it's the biggest member<font color="#E5E5E5"> block and then I</font>

228
00:13:25,300 --> 00:13:30,399
print relevant information about<font color="#E5E5E5"> that</font>

229
00:13:27,640 --> 00:13:39,699
<font color="#CCCCCC">trade mark is very cool model</font><font color="#E5E5E5"> and it has</font>

230
00:13:30,399 --> 00:13:41,850
<font color="#CCCCCC">a great API and pattern and there is</font>

231
00:13:39,700 --> 00:13:49,140
debug<font color="#CCCCCC"> malach stats</font>

232
00:13:41,850 --> 00:13:52,380
it's a<font color="#CCCCCC"> rough interface of trace mahlock</font>

233
00:13:49,140 --> 00:13:56,490
here<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> pythonic interface and</font>

234
00:13:52,380 --> 00:14:00,459
this is the<font color="#E5E5E5"> rough interface of m'lip</font>

235
00:13:56,490 --> 00:14:02,620
<font color="#CCCCCC">that is you can call it which sees that</font>

236
00:14:00,459 --> 00:14:07,859
the backlog starts or you can set an

237
00:14:02,620 --> 00:14:11,529
<font color="#E5E5E5">environment variable</font><font color="#CCCCCC"> to something's</font>

238
00:14:07,860 --> 00:14:14,199
there are different pattern<font color="#CCCCCC"> member</font>

239
00:14:11,529 --> 00:14:16,990
allocates<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> m'lip or</font><font color="#E5E5E5"> primal</font>

240
00:14:14,199 --> 00:14:18,550
<font color="#E5E5E5">log or you can write your own memory</font>

241
00:14:16,990 --> 00:14:28,779
allocated<font color="#CCCCCC"> fighters a flexible language</font>

242
00:14:18,550 --> 00:14:31,380
<font color="#E5E5E5">it supports a new member a locators any</font>

243
00:14:28,779 --> 00:14:31,380
questions

244
00:14:32,030 --> 00:14:43,860
thank you for<font color="#E5E5E5"> listening</font>

245
00:14:34,420 --> 00:14:43,860
[Applause]

