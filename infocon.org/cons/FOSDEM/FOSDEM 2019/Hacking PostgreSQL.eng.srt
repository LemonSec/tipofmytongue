1
00:00:05,490 --> 00:00:11,469
so welcome<font color="#CCCCCC"> to the second talk</font><font color="#E5E5E5"> in the</font>

2
00:00:07,899 --> 00:00:13,900
post<font color="#CCCCCC"> Christie room and our speaker is</font>

3
00:00:11,469 --> 00:00:16,869
<font color="#CCCCCC">Stephen Frost</font><font color="#E5E5E5"> sees a piece of</font><font color="#CCCCCC"> Post crest</font>

4
00:00:13,900 --> 00:00:18,699
committer<font color="#CCCCCC"> and works</font><font color="#E5E5E5"> as CTO if crunchy</font>

5
00:00:16,869 --> 00:00:25,840
data<font color="#E5E5E5"> and he's going to talk about</font><font color="#CCCCCC"> taking</font>

6
00:00:18,699 --> 00:00:26,890
<font color="#CCCCCC">Postgres</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> all very</font>

7
00:00:25,840 --> 00:00:28,960
much<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know that that</font><font color="#E5E5E5"> was</font>

8
00:00:26,890 --> 00:00:30,220
<font color="#CCCCCC">necessary but</font><font color="#E5E5E5"> we'll get there</font><font color="#CCCCCC"> so I've</font>

9
00:00:28,960 --> 00:00:32,739
mentioned<font color="#CCCCCC"> I'm not gonna</font><font color="#E5E5E5"> hit too much on</font>

10
00:00:30,220 --> 00:00:34,300
this<font color="#E5E5E5"> but</font><font color="#CCCCCC"> sitio</font><font color="#E5E5E5"> crunchy</font><font color="#CCCCCC"> committed</font><font color="#E5E5E5"> or</font>

11
00:00:32,738 --> 00:00:36,608
major contributor blah blah blah I

12
00:00:34,300 --> 00:00:39,068
worked on default roles<font color="#E5E5E5"> I did a lot with</font>

13
00:00:36,609 --> 00:00:41,620
row-level security<font color="#CCCCCC"> calm</font><font color="#E5E5E5"> level privileges</font>

14
00:00:39,069 --> 00:00:45,129
and I<font color="#E5E5E5"> actually implemented the role</font>

15
00:00:41,620 --> 00:00:47,108
system itself way back in 8.3<font color="#E5E5E5"> never did</font>

16
00:00:45,129 --> 00:00:48,849
some other<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> so for those of</font><font color="#E5E5E5"> you who</font>

17
00:00:47,109 --> 00:00:50,649
want to kind of<font color="#CCCCCC"> fall</font><font color="#E5E5E5"> along at home if</font>

18
00:00:48,850 --> 00:00:51,879
you're interested here's my<font color="#E5E5E5"> little gate</font>

19
00:00:50,649 --> 00:00:53,739
crash course so if you're wondering

20
00:00:51,879 --> 00:00:57,670
<font color="#CCCCCC">where's the Postgres git repo it's on</font>

21
00:00:53,739 --> 00:01:00,699
git post<font color="#E5E5E5"> 50 org we do have a mirror up</font>

22
00:00:57,670 --> 00:01:02,440
on github<font color="#CCCCCC"> I think there's actually</font><font color="#E5E5E5"> a few</font>

23
00:01:00,699 --> 00:01:05,199
on git lab as<font color="#E5E5E5"> well for those</font><font color="#CCCCCC"> who want to</font>

24
00:01:02,440 --> 00:01:06,580
go there<font color="#E5E5E5"> but the the base gist of it</font><font color="#CCCCCC"> is</font>

25
00:01:05,199 --> 00:01:08,320
<font color="#E5E5E5">that you can pull this down and then you</font>

26
00:01:06,580 --> 00:01:09,759
can<font color="#E5E5E5"> start to look at all the wonderful</font>

27
00:01:08,320 --> 00:01:12,520
directories and things I'm going<font color="#E5E5E5"> to talk</font>

28
00:01:09,759 --> 00:01:14,079
<font color="#CCCCCC">about here next but it's pretty</font>

29
00:01:12,520 --> 00:01:16,119
<font color="#E5E5E5">straightforward when you're hacking with</font>

30
00:01:14,079 --> 00:01:18,038
<font color="#E5E5E5">Postgres we typically do things on</font>

31
00:01:16,119 --> 00:01:19,990
feature branches<font color="#E5E5E5"> so you do a git</font>

32
00:01:18,039 --> 00:01:22,090
checkout -<font color="#CCCCCC"> B which creates your local</font>

33
00:01:19,990 --> 00:01:23,798
branch and then you hack on both<font color="#CCCCCC"> grits</font>

34
00:01:22,090 --> 00:01:26,409
<font color="#CCCCCC">all right make changes do what you want</font>

35
00:01:23,799 --> 00:01:27,969
<font color="#E5E5E5">and then the way we tend to operate is</font>

36
00:01:26,409 --> 00:01:30,969
you know you add the files you commit

37
00:01:27,969 --> 00:01:33,339
and then you use format patch to

38
00:01:30,969 --> 00:01:35,469
actually create a patch<font color="#CCCCCC"> that then gets</font>

39
00:01:33,340 --> 00:01:37,840
sent up<font color="#E5E5E5"> to the hackers mailing list and</font>

40
00:01:35,469 --> 00:01:40,689
and we'll talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about what</font>

41
00:01:37,840 --> 00:01:42,310
that<font color="#CCCCCC"> looks like later on</font><font color="#E5E5E5"> in terms of how</font>

42
00:01:40,689 --> 00:01:45,189
you register things inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> what we</font>

43
00:01:42,310 --> 00:01:46,869
call a commit<font color="#E5E5E5"> fest application so now</font>

44
00:01:45,189 --> 00:01:50,559
let's<font color="#CCCCCC"> start talking</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> actual</font>

45
00:01:46,869 --> 00:01:52,420
source tree<font color="#E5E5E5"> so Postgres has a lot</font><font color="#CCCCCC"> of</font>

46
00:01:50,560 --> 00:01:54,880
different<font color="#E5E5E5"> components and you know as</font>

47
00:01:52,420 --> 00:01:58,420
we're going<font color="#CCCCCC"> through this feel free to to</font>

48
00:01:54,880 --> 00:01:59,829
you<font color="#E5E5E5"> know ask questions and and let me</font>

49
00:01:58,420 --> 00:02:02,079
know if you have<font color="#E5E5E5"> questions as we go</font>

50
00:01:59,829 --> 00:02:03,428
through<font color="#E5E5E5"> I'm happy to take them as we go</font>

51
00:02:02,079 --> 00:02:03,818
<font color="#CCCCCC">and we'll have</font><font color="#E5E5E5"> some time</font><font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> as</font>

52
00:02:03,429 --> 00:02:07,689
<font color="#E5E5E5">well</font>

53
00:02:03,819 --> 00:02:09,550
so in our<font color="#E5E5E5"> top level source directory we</font>

54
00:02:07,689 --> 00:02:10,419
<font color="#CCCCCC">have a config system this is pretty</font>

55
00:02:09,550 --> 00:02:13,810
<font color="#E5E5E5">straightforward</font>

56
00:02:10,419 --> 00:02:16,239
we do use you know<font color="#CCCCCC"> Auto</font><font color="#E5E5E5"> conf and all the</font>

57
00:02:13,810 --> 00:02:18,760
auto tools and<font color="#E5E5E5"> what-have-you for our</font>

58
00:02:16,240 --> 00:02:21,220
build system<font color="#CCCCCC"> we also have</font>

59
00:02:18,760 --> 00:02:24,010
called contribs so for<font color="#E5E5E5"> those</font><font color="#CCCCCC"> of you who</font>

60
00:02:21,220 --> 00:02:26,319
were<font color="#CCCCCC"> in the the prior talk</font><font color="#E5E5E5"> a lot of the</font>

61
00:02:24,010 --> 00:02:30,659
all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> extensions</font><font color="#CCCCCC"> that kind</font><font color="#E5E5E5"> of come</font>

62
00:02:26,319 --> 00:02:30,659
with<font color="#CCCCCC"> Postgres are included in this</font>

63
00:02:31,379 --> 00:02:37,959
contribute modules now you don't have<font color="#E5E5E5"> to</font>

64
00:02:33,519 --> 00:02:40,239
use<font color="#CCCCCC"> the contribute</font><font color="#E5E5E5"> there going to be</font>

65
00:02:37,959 --> 00:02:41,860
installed when you install<font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> and</font>

66
00:02:40,239 --> 00:02:44,500
they'll be available<font color="#E5E5E5"> through just using</font>

67
00:02:41,860 --> 00:02:46,180
<font color="#CCCCCC">create extension some of the great ones</font>

68
00:02:44,500 --> 00:02:48,310
<font color="#E5E5E5">are things like PG stat statements which</font>

69
00:02:46,180 --> 00:02:52,180
is really really<font color="#E5E5E5"> handy</font><font color="#CCCCCC"> and is included</font>

70
00:02:48,310 --> 00:02:55,480
<font color="#CCCCCC">in contribs of postgrads that</font><font color="#E5E5E5"> are not</font>

71
00:02:52,180 --> 00:02:57,760
<font color="#E5E5E5">included with</font><font color="#CCCCCC"> the the core postcard</font>

72
00:02:55,480 --> 00:02:59,530
source code<font color="#E5E5E5"> that you may be</font><font color="#CCCCCC"> interested</font>

73
00:02:57,760 --> 00:03:02,950
in<font color="#E5E5E5"> things like post</font><font color="#CCCCCC"> GIS which is a</font>

74
00:02:59,530 --> 00:03:04,269
fantastic<font color="#E5E5E5"> external extension but if</font>

75
00:03:02,950 --> 00:03:07,328
you're looking<font color="#E5E5E5"> for how to write an</font>

76
00:03:04,269 --> 00:03:09,489
extension<font color="#E5E5E5"> going in to contribute some</font><font color="#CCCCCC"> of</font>

77
00:03:07,329 --> 00:03:10,900
the examples is the<font color="#E5E5E5"> way to go</font>

78
00:03:09,489 --> 00:03:12,159
what<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> mostly talking</font>

79
00:03:10,900 --> 00:03:14,440
<font color="#E5E5E5">about is actually hacking</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the back</font>

80
00:03:12,159 --> 00:03:16,388
end right hacking in the grammar<font color="#E5E5E5"> hacking</font>

81
00:03:14,440 --> 00:03:18,459
the parser and<font color="#E5E5E5"> we'll start talking about</font>

82
00:03:16,389 --> 00:03:21,340
<font color="#E5E5E5">all those details after we kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> go</font>

83
00:03:18,459 --> 00:03:25,419
through<font color="#E5E5E5"> this rundown</font><font color="#CCCCCC"> of what is in the</font>

84
00:03:21,340 --> 00:03:29,519
source tree<font color="#CCCCCC"> we then have</font><font color="#E5E5E5"> doc which is</font>

85
00:03:25,419 --> 00:03:32,859
all<font color="#E5E5E5"> of our HTML documentation</font><font color="#CCCCCC"> uses</font><font color="#E5E5E5"> the</font>

86
00:03:29,519 --> 00:03:36,220
open<font color="#E5E5E5"> Jade for some versions of Postgres</font>

87
00:03:32,859 --> 00:03:38,139
<font color="#E5E5E5">to build build system so that's pretty</font>

88
00:03:36,220 --> 00:03:41,109
straightforward<font color="#CCCCCC"> if you're wondering how</font>

89
00:03:38,139 --> 00:03:43,060
to build the docs<font color="#CCCCCC"> I cheat the Debian</font>

90
00:03:41,109 --> 00:03:44,949
maintainer has done a fantastic job<font color="#CCCCCC"> and</font>

91
00:03:43,060 --> 00:03:45,310
has all everything<font color="#E5E5E5"> you need to build the</font>

92
00:03:44,949 --> 00:03:47,169
docs

93
00:03:45,310 --> 00:03:51,280
so if you just apt-get build source

94
00:03:47,169 --> 00:03:52,840
<font color="#E5E5E5">you're good</font><font color="#CCCCCC"> we then have SRC</font><font color="#E5E5E5"> back-end</font>

95
00:03:51,280 --> 00:03:54,129
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> what we're gonna</font><font color="#E5E5E5"> be working in</font>

96
00:03:52,840 --> 00:03:56,349
today that's where we're<font color="#E5E5E5"> gonna start</font>

97
00:03:54,129 --> 00:03:58,179
talking<font color="#CCCCCC"> next so let's</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> over a few</font><font color="#E5E5E5"> of</font>

98
00:03:56,349 --> 00:04:01,659
<font color="#E5E5E5">the other top-level items though you</font>

99
00:03:58,180 --> 00:04:03,250
have SRC bin which is where<font color="#CCCCCC"> psq lpg dump</font>

100
00:04:01,659 --> 00:04:04,929
all of<font color="#CCCCCC"> what we consider</font><font color="#E5E5E5"> the client</font>

101
00:04:03,250 --> 00:04:06,760
utilities live<font color="#E5E5E5"> right these are</font>

102
00:04:04,930 --> 00:04:08,290
client-side tools these<font color="#E5E5E5"> are things that</font>

103
00:04:06,760 --> 00:04:10,629
<font color="#E5E5E5">are going to be installed with your</font>

104
00:04:08,290 --> 00:04:12,879
client package<font color="#CCCCCC"> so if you have like</font>

105
00:04:10,629 --> 00:04:14,048
<font color="#CCCCCC">PostgreSQL - client installed</font><font color="#E5E5E5"> that's</font>

106
00:04:12,879 --> 00:04:16,358
where it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> let you know that's</font>

107
00:04:14,049 --> 00:04:17,769
<font color="#E5E5E5">where all</font><font color="#CCCCCC"> of that comes from other</font>

108
00:04:16,358 --> 00:04:21,459
<font color="#E5E5E5">things in there that are interesting are</font>

109
00:04:17,769 --> 00:04:23,680
<font color="#CCCCCC">init DB</font><font color="#E5E5E5"> and PG upgrade</font><font color="#CCCCCC"> kind of a little</font>

110
00:04:21,459 --> 00:04:26,320
known secret<font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe not</font><font color="#CCCCCC"> everybody's</font>

111
00:04:23,680 --> 00:04:29,770
aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> PG upgrade uses PG</font><font color="#CCCCCC"> dump</font><font color="#E5E5E5"> in a</font>

112
00:04:26,320 --> 00:04:31,450
special mode called binary upgrade so if

113
00:04:29,770 --> 00:04:32,558
you're<font color="#CCCCCC"> looking at like how does PG</font>

114
00:04:31,450 --> 00:04:35,558
upgrade work

115
00:04:32,559 --> 00:04:37,809
the gist of it is actually mostly<font color="#E5E5E5"> in PG</font>

116
00:04:35,559 --> 00:04:40,119
<font color="#CCCCCC">dump</font><font color="#E5E5E5"> inside of this magic binary upgrade</font>

117
00:04:37,809 --> 00:04:42,849
system<font color="#E5E5E5"> so that's something that to be</font>

118
00:04:40,119 --> 00:04:44,859
aware of<font color="#E5E5E5"> we then have SRC common we</font>

119
00:04:42,849 --> 00:04:46,419
actually have<font color="#E5E5E5"> started to build out this</font>

120
00:04:44,859 --> 00:04:48,789
<font color="#E5E5E5">kind of what we're considering kind of a</font>

121
00:04:46,419 --> 00:04:50,679
<font color="#E5E5E5">live PG common thing which is code</font>

122
00:04:48,789 --> 00:04:53,369
that's<font color="#E5E5E5"> actually common to both the front</font>

123
00:04:50,679 --> 00:04:55,869
end and the back<font color="#CCCCCC"> end of postgrads</font>

124
00:04:53,369 --> 00:04:58,479
unfortunately today a lot<font color="#E5E5E5"> of things like</font>

125
00:04:55,869 --> 00:05:00,609
<font color="#E5E5E5">logging are done completely differently</font>

126
00:04:58,479 --> 00:05:03,219
in the front end<font color="#E5E5E5"> and then from the back</font>

127
00:05:00,609 --> 00:05:06,489
<font color="#CCCCCC">end</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're looking at making changes</font>

128
00:05:03,219 --> 00:05:08,529
maybe to unify<font color="#E5E5E5"> those interfaces</font><font color="#CCCCCC"> and put</font>

129
00:05:06,489 --> 00:05:12,128
those both of<font color="#E5E5E5"> them</font><font color="#CCCCCC"> eventually into</font>

130
00:05:08,529 --> 00:05:14,219
possibly<font color="#E5E5E5"> SRC common we then have SRC efi</font>

131
00:05:12,129 --> 00:05:16,629
utils so these are front-end

132
00:05:14,219 --> 00:05:18,549
capabilities right so certain things

133
00:05:16,629 --> 00:05:20,889
<font color="#E5E5E5">that make</font><font color="#CCCCCC"> sense to be</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> front-end</font>

134
00:05:18,549 --> 00:05:22,539
that<font color="#E5E5E5"> we don't use in the backend</font><font color="#CCCCCC"> go here</font>

135
00:05:20,889 --> 00:05:24,609
so<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> wondering about some new</font>

136
00:05:22,539 --> 00:05:27,459
thing<font color="#CCCCCC"> your building should the common</font>

137
00:05:24,609 --> 00:05:28,779
code go into<font color="#CCCCCC"> fe utils or should to go</font>

138
00:05:27,459 --> 00:05:30,369
into common well the question is is<font color="#E5E5E5"> it</font>

139
00:05:28,779 --> 00:05:33,759
going<font color="#E5E5E5"> to be used in the back end if not</font>

140
00:05:30,369 --> 00:05:34,959
put it<font color="#E5E5E5"> into efi utils SRC include is</font>

141
00:05:33,759 --> 00:05:37,179
pretty straightforward<font color="#CCCCCC"> it's all of the</font>

142
00:05:34,959 --> 00:05:38,769
include header files<font color="#E5E5E5"> the one big</font><font color="#CCCCCC"> thing</font>

143
00:05:37,179 --> 00:05:40,089
here that<font color="#E5E5E5"> people should be</font><font color="#CCCCCC"> aware of is</font>

144
00:05:38,769 --> 00:05:42,639
that<font color="#E5E5E5"> we have something called SRC</font>

145
00:05:40,089 --> 00:05:46,059
include catalog who here<font color="#E5E5E5"> knows what the</font>

146
00:05:42,639 --> 00:05:48,459
<font color="#E5E5E5">Postgres catalog is</font><font color="#CCCCCC"> alright fantastic</font><font color="#E5E5E5"> a</font>

147
00:05:46,059 --> 00:05:50,949
few of you let me go<font color="#CCCCCC"> over</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> yeah the</font>

148
00:05:48,459 --> 00:05:53,289
<font color="#CCCCCC">Postgres catalog is that set of</font><font color="#E5E5E5"> tables</font>

149
00:05:50,949 --> 00:05:56,199
inside of<font color="#E5E5E5"> PG catalog</font><font color="#CCCCCC"> that define how the</font>

150
00:05:53,289 --> 00:05:58,509
rest of the system works<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so if</font>

151
00:05:56,199 --> 00:06:00,009
you're wondering in<font color="#CCCCCC"> postcards we</font><font color="#E5E5E5"> have</font>

152
00:05:58,509 --> 00:06:01,779
all these<font color="#E5E5E5"> tables right and tables have</font>

153
00:06:00,009 --> 00:06:04,119
columns well how does<font color="#CCCCCC"> the post-credits</font>

154
00:06:01,779 --> 00:06:05,799
<font color="#CCCCCC">capac of that we have tables</font><font color="#E5E5E5"> and we have</font>

155
00:06:04,119 --> 00:06:08,559
columns right so we actually have a

156
00:06:05,799 --> 00:06:10,959
table called<font color="#E5E5E5"> PG attribute right that's</font>

157
00:06:08,559 --> 00:06:14,319
one of the<font color="#E5E5E5"> pieces of the catalog the</font><font color="#CCCCCC"> PG</font>

158
00:06:10,959 --> 00:06:16,569
attribute table has a row in it for

159
00:06:14,319 --> 00:06:18,099
every column for every<font color="#CCCCCC"> table</font><font color="#E5E5E5"> in the</font>

160
00:06:16,569 --> 00:06:21,369
system right

161
00:06:18,099 --> 00:06:23,949
PG class is another one<font color="#E5E5E5"> of those catalog</font>

162
00:06:21,369 --> 00:06:26,799
tables<font color="#E5E5E5"> PG class has a row in it for</font>

163
00:06:23,949 --> 00:06:30,819
every table in the system<font color="#E5E5E5"> right as well</font>

164
00:06:26,799 --> 00:06:32,198
as every view and every index right

165
00:06:30,819 --> 00:06:33,369
because there's a lot<font color="#E5E5E5"> of things that are</font>

166
00:06:32,199 --> 00:06:36,009
common to<font color="#CCCCCC"> that we all consider those</font>

167
00:06:33,369 --> 00:06:39,969
classes in Postgres<font color="#CCCCCC"> or more</font>

168
00:06:36,009 --> 00:06:42,279
traditionally relations in Postgres<font color="#E5E5E5"> so</font>

169
00:06:39,969 --> 00:06:46,419
if you wanted<font color="#E5E5E5"> to say add a new column</font>

170
00:06:42,279 --> 00:06:48,129
<font color="#CCCCCC">into one of the Postgres</font><font color="#E5E5E5"> catalogs</font>

171
00:06:46,419 --> 00:06:50,258
<font color="#E5E5E5">all right say you're adding some new</font>

172
00:06:48,129 --> 00:06:51,669
feature and<font color="#E5E5E5"> you need to add some new</font>

173
00:06:50,259 --> 00:06:53,469
information<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be tracked by</font>

174
00:06:51,669 --> 00:06:56,049
<font color="#CCCCCC">the database system where would you add</font>

175
00:06:53,469 --> 00:06:58,180
that column<font color="#CCCCCC"> you add it in</font><font color="#E5E5E5"> SRC include</font>

176
00:06:56,050 --> 00:07:01,960
catalog<font color="#E5E5E5"> and in fact when you go and</font>

177
00:06:58,180 --> 00:07:05,379
modify SRC include catalog magic<font color="#E5E5E5"> happens</font>

178
00:07:01,960 --> 00:07:07,659
<font color="#E5E5E5">you just add the column n you rerun the</font>

179
00:07:05,379 --> 00:07:10,180
build system<font color="#CCCCCC"> and magically suddenly when</font>

180
00:07:07,659 --> 00:07:12,099
you<font color="#CCCCCC"> in it DB</font><font color="#E5E5E5"> Postgres you have that new</font>

181
00:07:10,180 --> 00:07:13,539
column<font color="#E5E5E5"> in this new table now nothing's</font>

182
00:07:12,099 --> 00:07:15,909
happening with<font color="#E5E5E5"> it there's nothing to do</font>

183
00:07:13,539 --> 00:07:18,009
<font color="#E5E5E5">with it but you have</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> there right and</font>

184
00:07:15,909 --> 00:07:19,900
then a bunch of things like<font color="#E5E5E5"> pound</font>

185
00:07:18,009 --> 00:07:21,879
defines and<font color="#E5E5E5"> whatnot some of them get</font>

186
00:07:19,900 --> 00:07:23,349
<font color="#E5E5E5">automatically created for you some of</font>

187
00:07:21,879 --> 00:07:25,060
them you'll see<font color="#CCCCCC"> inside of those include</font>

188
00:07:23,349 --> 00:07:28,150
header files you may want<font color="#CCCCCC"> to define</font>

189
00:07:25,060 --> 00:07:33,729
<font color="#CCCCCC">yourself for specific values that go</font>

190
00:07:28,150 --> 00:07:37,479
into<font color="#E5E5E5"> those columns for</font><font color="#CCCCCC"> example we then</font>

191
00:07:33,729 --> 00:07:42,878
have SRC interfaces so SRC interfaces is

192
00:07:37,479 --> 00:07:45,060
the set of libraries<font color="#E5E5E5"> or</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> pieces of</font>

193
00:07:42,879 --> 00:07:48,580
code<font color="#CCCCCC"> that interface to</font><font color="#E5E5E5"> Postgres directly</font>

194
00:07:45,060 --> 00:07:51,190
<font color="#E5E5E5">so these are typically web PQ is the big</font>

195
00:07:48,580 --> 00:07:55,448
<font color="#CCCCCC">thing here</font><font color="#E5E5E5"> right that's kind of huge and</font>

196
00:07:51,190 --> 00:07:56,469
<font color="#CCCCCC">then there's also EC PG which is I'm not</font>

197
00:07:55,449 --> 00:07:58,779
<font color="#CCCCCC">sure how many people here are familiar</font>

198
00:07:56,469 --> 00:08:01,029
with the idea<font color="#CCCCCC"> of this but there was a</font>

199
00:07:58,779 --> 00:08:03,940
time once when people would write C code

200
00:08:01,029 --> 00:08:06,879
with embedded SQL in it and run it

201
00:08:03,940 --> 00:08:08,349
<font color="#CCCCCC">through a system like EC PG and that</font>

202
00:08:06,879 --> 00:08:10,089
system<font color="#CCCCCC"> would actually</font><font color="#E5E5E5"> take all of</font><font color="#CCCCCC"> that</font>

203
00:08:08,349 --> 00:08:11,770
<font color="#E5E5E5">and figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> how to make all the</font>

204
00:08:10,089 --> 00:08:13,990
connections<font color="#E5E5E5"> to the database to run that</font>

205
00:08:11,770 --> 00:08:17,318
sequel code and get it<font color="#E5E5E5"> back so it made</font>

206
00:08:13,990 --> 00:08:19,270
the<font color="#E5E5E5"> development of C and SQL code a</font>

207
00:08:17,319 --> 00:08:20,770
little<font color="#CCCCCC"> bit easier as you're working</font>

208
00:08:19,270 --> 00:08:22,870
<font color="#E5E5E5">through you know writing some new</font>

209
00:08:20,770 --> 00:08:24,400
program<font color="#E5E5E5"> I would say it's not used very</font>

210
00:08:22,870 --> 00:08:30,909
<font color="#E5E5E5">much today how many people here use EC</font>

211
00:08:24,400 --> 00:08:32,860
PG exactly<font color="#E5E5E5"> for the record nobody raised</font>

212
00:08:30,909 --> 00:08:34,838
<font color="#CCCCCC">their hand all</font><font color="#E5E5E5"> right maybe I should have</font>

213
00:08:32,860 --> 00:08:35,260
I played with it a<font color="#E5E5E5"> little bit but that's</font>

214
00:08:34,839 --> 00:08:37,690
about it

215
00:08:35,260 --> 00:08:40,569
<font color="#E5E5E5">all right then we have procedural</font>

216
00:08:37,690 --> 00:08:42,789
languages now<font color="#CCCCCC"> SR CPLR</font><font color="#E5E5E5"> the core</font>

217
00:08:40,570 --> 00:08:44,320
procedural language is you can also

218
00:08:42,789 --> 00:08:47,620
install procedural languages as

219
00:08:44,320 --> 00:08:49,329
extensions<font color="#E5E5E5"> right so this is nowhere</font><font color="#CCCCCC"> near</font>

220
00:08:47,620 --> 00:08:50,440
the full complete list of all<font color="#E5E5E5"> the</font>

221
00:08:49,329 --> 00:08:53,229
procedural languages<font color="#E5E5E5"> that are available</font>

222
00:08:50,440 --> 00:08:53,980
<font color="#E5E5E5">for Postgres but the big ones here are</font>

223
00:08:53,230 --> 00:08:56,920
<font color="#E5E5E5">here right</font>

224
00:08:53,980 --> 00:08:58,200
PL PG SQL<font color="#E5E5E5"> so this is similar to pl/sql</font>

225
00:08:56,920 --> 00:09:00,680
<font color="#E5E5E5">it's</font>

226
00:08:58,200 --> 00:09:04,410
like<font color="#CCCCCC"> T sequel if you're down for that</font>

227
00:09:00,680 --> 00:09:07,189
<font color="#CCCCCC">but it's a you know</font><font color="#E5E5E5"> traditional kind of</font>

228
00:09:04,410 --> 00:09:11,280
procedural SQL right that's what pl/sql

229
00:09:07,190 --> 00:09:13,670
<font color="#CCCCCC">PL</font><font color="#E5E5E5"> PG SQL is but you can also write code</font>

230
00:09:11,280 --> 00:09:15,480
and<font color="#CCCCCC"> Perl right when I'm talking about</font>

231
00:09:13,670 --> 00:09:17,490
<font color="#E5E5E5">procedural languages here what I'm</font>

232
00:09:15,480 --> 00:09:20,430
talking<font color="#CCCCCC"> about is the</font><font color="#E5E5E5"> fact that you can</font>

233
00:09:17,490 --> 00:09:22,710
write a bit of Perl code<font color="#E5E5E5"> shove it</font><font color="#CCCCCC"> inside</font>

234
00:09:20,430 --> 00:09:24,959
of a create function call inside of the

235
00:09:22,710 --> 00:09:27,330
Postgres database<font color="#E5E5E5"> and then suddenly you</font>

236
00:09:24,960 --> 00:09:28,800
have a new function inside<font color="#E5E5E5"> the Postgres</font>

237
00:09:27,330 --> 00:09:31,590
database that when you call that

238
00:09:28,800 --> 00:09:33,329
<font color="#CCCCCC">function it runs Perl</font><font color="#E5E5E5"> right it loads up</font>

239
00:09:31,590 --> 00:09:36,900
the Perl<font color="#E5E5E5"> interpreter and runs your Perl</font>

240
00:09:33,330 --> 00:09:40,670
code on the database server<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and</font>

241
00:09:36,900 --> 00:09:43,459
that's true for<font color="#E5E5E5"> PL</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> PL tickle and</font>

242
00:09:40,670 --> 00:09:45,990
then we also have things like PL<font color="#CCCCCC"> are</font>

243
00:09:43,460 --> 00:09:47,670
right so if you are familiar<font color="#E5E5E5"> with the</font>

244
00:09:45,990 --> 00:09:49,530
<font color="#CCCCCC">our statistical language and you want to</font>

245
00:09:47,670 --> 00:09:52,079
run<font color="#CCCCCC"> our on your</font><font color="#E5E5E5"> post</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> server you can</font>

246
00:09:49,530 --> 00:09:55,010
use<font color="#CCCCCC"> PL are there's also a PL Java</font>

247
00:09:52,080 --> 00:09:57,930
<font color="#E5E5E5">there's also a PL v8 which is JavaScript</font>

248
00:09:55,010 --> 00:10:00,300
<font color="#E5E5E5">so if you want to run</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> inside</font>

249
00:09:57,930 --> 00:10:02,489
your database server<font color="#E5E5E5"> on the server in a</font>

250
00:10:00,300 --> 00:10:05,510
<font color="#CCCCCC">back-end process with direct access to</font>

251
00:10:02,490 --> 00:10:09,930
the data<font color="#CCCCCC"> you can do that with postgrads</font>

252
00:10:05,510 --> 00:10:11,130
very cool stuff<font color="#E5E5E5"> we then have SRC port</font>

253
00:10:09,930 --> 00:10:12,569
that's pretty<font color="#E5E5E5"> straightforward it's just</font>

254
00:10:11,130 --> 00:10:15,120
a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> platform-specific</font><font color="#E5E5E5"> hacks</font>

255
00:10:12,570 --> 00:10:17,250
because<font color="#CCCCCC"> postgrads is supported on a</font>

256
00:10:15,120 --> 00:10:21,210
stupidly large number<font color="#CCCCCC"> of different</font>

257
00:10:17,250 --> 00:10:22,770
platforms<font color="#CCCCCC"> we then have a test</font><font color="#E5E5E5"> system the</font>

258
00:10:21,210 --> 00:10:25,080
regression<font color="#E5E5E5"> test system is actually</font>

259
00:10:22,770 --> 00:10:29,189
<font color="#E5E5E5">really straightforward in terms of SRC</font>

260
00:10:25,080 --> 00:10:30,990
<font color="#CCCCCC">tests</font><font color="#E5E5E5"> it is write some SQL run it track</font>

261
00:10:29,190 --> 00:10:33,330
<font color="#E5E5E5">whatever the results were and shove</font><font color="#CCCCCC"> it</font>

262
00:10:30,990 --> 00:10:35,100
into an expected file<font color="#E5E5E5"> and that's your</font>

263
00:10:33,330 --> 00:10:36,480
regression<font color="#E5E5E5"> test right that's when you're</font>

264
00:10:35,100 --> 00:10:39,870
adding<font color="#CCCCCC"> new tests to postgres that's how</font>

265
00:10:36,480 --> 00:10:41,640
it works<font color="#E5E5E5"> we then have some pieces</font><font color="#CCCCCC"> of</font>

266
00:10:39,870 --> 00:10:44,310
code<font color="#CCCCCC"> that we suck in from</font><font color="#E5E5E5"> other places</font>

267
00:10:41,640 --> 00:10:46,800
in<font color="#E5E5E5"> particular SRC timezone comes</font>

268
00:10:44,310 --> 00:10:49,469
directly from<font color="#CCCCCC"> Ayana</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> anna</font><font color="#E5E5E5"> actually</font>

269
00:10:46,800 --> 00:10:51,990
publishes code<font color="#E5E5E5"> for dealing with x</font><font color="#CCCCCC"> am</font>

270
00:10:49,470 --> 00:10:54,900
garbage and we import<font color="#E5E5E5"> that and that's</font>

271
00:10:51,990 --> 00:10:57,720
where it lives<font color="#CCCCCC"> is in SRC timezone we</font>

272
00:10:54,900 --> 00:11:00,660
then have things like with<font color="#E5E5E5"> Murphy</font><font color="#CCCCCC"> tools</font>

273
00:10:57,720 --> 00:11:02,760
which includes things like<font color="#CCCCCC"> PZ indent so</font>

274
00:11:00,660 --> 00:11:04,260
of<font color="#E5E5E5"> course Postgres being postcards we</font>

275
00:11:02,760 --> 00:11:05,910
couldn't use any kind of standard

276
00:11:04,260 --> 00:11:10,740
indenting system we had to invent<font color="#E5E5E5"> our</font>

277
00:11:05,910 --> 00:11:11,150
own so we<font color="#CCCCCC"> have PG indent which its</font>

278
00:11:10,740 --> 00:11:13,250
interests

279
00:11:11,150 --> 00:11:16,640
we've actually got someone<font color="#CCCCCC"> hacking the</font>

280
00:11:13,250 --> 00:11:19,550
BSD<font color="#CCCCCC"> and then to add in features so that</font>

281
00:11:16,640 --> 00:11:21,620
our indent doesn't have to exist<font color="#E5E5E5"> except</font>

282
00:11:19,550 --> 00:11:23,270
as<font color="#E5E5E5"> a wrapper around it so that part's</font>

283
00:11:21,620 --> 00:11:26,800
<font color="#CCCCCC">pretty cool I forget who was doing</font><font color="#E5E5E5"> that</font>

284
00:11:23,270 --> 00:11:29,990
<font color="#CCCCCC">offhand but it's it's really neat</font>

285
00:11:26,800 --> 00:11:31,459
questions on the<font color="#CCCCCC"> top-level source</font>

286
00:11:29,990 --> 00:11:39,350
directory for<font color="#CCCCCC"> postgrads</font>

287
00:11:31,460 --> 00:11:40,820
<font color="#CCCCCC">I bet I forget anything</font><font color="#E5E5E5"> probably all</font>

288
00:11:39,350 --> 00:11:43,520
<font color="#E5E5E5">right so let's start</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about the</font>

289
00:11:40,820 --> 00:11:45,020
<font color="#CCCCCC">backend code of</font><font color="#E5E5E5"> Postgres all right so</font>

290
00:11:43,520 --> 00:11:47,120
these are<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the different</font>

291
00:11:45,020 --> 00:11:50,210
<font color="#E5E5E5">directories</font><font color="#CCCCCC"> that exist</font><font color="#E5E5E5"> inside of that</font>

292
00:11:47,120 --> 00:11:53,570
SRC<font color="#CCCCCC"> back-end directory</font><font color="#E5E5E5"> this is all</font>

293
00:11:50,210 --> 00:11:55,430
server-side code<font color="#E5E5E5"> and they all have</font>

294
00:11:53,570 --> 00:11:56,750
different<font color="#CCCCCC"> components they do different</font>

295
00:11:55,430 --> 00:12:00,140
<font color="#CCCCCC">things right so let's start talking</font>

296
00:11:56,750 --> 00:12:02,150
about<font color="#E5E5E5"> them the access directory includes</font>

297
00:12:00,140 --> 00:12:05,780
all<font color="#CCCCCC"> of our access methods these</font><font color="#E5E5E5"> are</font>

298
00:12:02,150 --> 00:12:08,209
<font color="#E5E5E5">methods</font><font color="#CCCCCC"> for the heap</font><font color="#E5E5E5"> right so the heap</font>

299
00:12:05,780 --> 00:12:09,560
or where all the tables data goes right

300
00:12:08,210 --> 00:12:11,480
when you create a table and<font color="#E5E5E5"> store data</font>

301
00:12:09,560 --> 00:12:13,369
<font color="#E5E5E5">into it it goes into the heap when you</font>

302
00:12:11,480 --> 00:12:15,350
go and<font color="#CCCCCC"> create an index</font><font color="#E5E5E5"> right like a</font>

303
00:12:13,370 --> 00:12:18,110
b-tree index that's the default<font color="#CCCCCC"> index</font>

304
00:12:15,350 --> 00:12:20,990
the access method for<font color="#CCCCCC"> b-tree</font><font color="#E5E5E5"> indexes and</font>

305
00:12:18,110 --> 00:12:23,480
all of<font color="#CCCCCC"> that code around b-tree indexes</font>

306
00:12:20,990 --> 00:12:26,900
lives inside of<font color="#E5E5E5"> this access directory</font>

307
00:12:23,480 --> 00:12:28,490
and then<font color="#CCCCCC"> Justin Gen also live there if</font>

308
00:12:26,900 --> 00:12:30,500
you're thinking<font color="#E5E5E5"> about creating</font><font color="#CCCCCC"> your own</font>

309
00:12:28,490 --> 00:12:32,390
index for postgrads

310
00:12:30,500 --> 00:12:34,400
this is what you want to go<font color="#E5E5E5"> look at</font>

311
00:12:32,390 --> 00:12:37,100
right because what you need<font color="#CCCCCC"> to do to</font>

312
00:12:34,400 --> 00:12:39,920
implement<font color="#E5E5E5"> your own index for Postgres is</font>

313
00:12:37,100 --> 00:12:42,620
basically just<font color="#E5E5E5"> define a few</font><font color="#CCCCCC"> methods</font>

314
00:12:39,920 --> 00:12:44,660
right and then tell and then basically

315
00:12:42,620 --> 00:12:46,460
register it with<font color="#E5E5E5"> Postgres and you can do</font>

316
00:12:44,660 --> 00:12:48,530
all of this in an extension<font color="#CCCCCC"> if you want</font>

317
00:12:46,460 --> 00:12:50,210
right<font color="#E5E5E5"> and then once you've</font><font color="#CCCCCC"> done all of</font>

318
00:12:48,530 --> 00:12:52,819
that<font color="#E5E5E5"> post goes well</font><font color="#CCCCCC"> happily let you</font>

319
00:12:50,210 --> 00:12:53,300
create<font color="#E5E5E5"> a table with your new index and</font>

320
00:12:52,820 --> 00:12:56,510
off you go

321
00:12:53,300 --> 00:12:58,400
<font color="#E5E5E5">in fact</font><font color="#CCCCCC"> gist is in fact another level of</font>

322
00:12:56,510 --> 00:13:02,660
generalization around the ability<font color="#CCCCCC"> to</font>

323
00:12:58,400 --> 00:13:04,880
have alternative indexes in Postgres<font color="#E5E5E5"> we</font>

324
00:13:02,660 --> 00:13:07,310
then have bootstrap this<font color="#E5E5E5"> is basically</font>

325
00:13:04,880 --> 00:13:09,439
<font color="#CCCCCC">for</font><font color="#E5E5E5"> in it</font><font color="#CCCCCC"> db2 kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> kickstart things</font>

326
00:13:07,310 --> 00:13:11,209
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> know kind of</font><font color="#E5E5E5"> eat our own dog</font>

327
00:13:09,440 --> 00:13:13,850
<font color="#CCCCCC">food in a way</font><font color="#E5E5E5"> right when we start up</font>

328
00:13:11,210 --> 00:13:15,650
<font color="#E5E5E5">Postgres with an it</font><font color="#CCCCCC"> VB we kind of run</font>

329
00:13:13,850 --> 00:13:18,140
both breaths to actually go and<font color="#CCCCCC"> create</font>

330
00:13:15,650 --> 00:13:20,120
things<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of the data directory</font>

331
00:13:18,140 --> 00:13:22,670
<font color="#E5E5E5">that's part of what</font><font color="#CCCCCC"> nits DB does and</font>

332
00:13:20,120 --> 00:13:24,170
<font color="#E5E5E5">that bootstrap mode is what an it DB is</font>

333
00:13:22,670 --> 00:13:26,269
running

334
00:13:24,170 --> 00:13:28,399
we then have<font color="#CCCCCC"> catalog</font><font color="#E5E5E5"> so we talked before</font>

335
00:13:26,269 --> 00:13:30,470
<font color="#CCCCCC">about what the catalog</font><font color="#E5E5E5"> was all the</font>

336
00:13:28,399 --> 00:13:33,200
definitional pieces for the<font color="#E5E5E5"> catalog are</font>

337
00:13:30,470 --> 00:13:35,959
<font color="#E5E5E5">an</font><font color="#CCCCCC"> SRC include catalog but all of the</font>

338
00:13:33,200 --> 00:13:44,240
code<font color="#E5E5E5"> for working with the catalog exists</font>

339
00:13:35,959 --> 00:13:48,529
<font color="#CCCCCC">inside of SRC</font><font color="#E5E5E5"> back-end catalog that's</font>

340
00:13:44,240 --> 00:13:50,630
<font color="#E5E5E5">how much</font><font color="#CCCCCC"> lag we</font><font color="#E5E5E5"> have we then have the</font>

341
00:13:48,529 --> 00:13:53,120
commands<font color="#E5E5E5"> directories so commands are</font>

342
00:13:50,630 --> 00:13:56,540
kind<font color="#E5E5E5"> of your top level DDL commands</font>

343
00:13:53,120 --> 00:13:59,180
<font color="#E5E5E5">right</font><font color="#CCCCCC"> things like create table alter</font>

344
00:13:56,540 --> 00:14:01,910
table<font color="#E5E5E5"> all of those all of that code</font>

345
00:13:59,180 --> 00:14:04,430
<font color="#E5E5E5">lives in SRC</font><font color="#CCCCCC"> backend</font><font color="#E5E5E5"> commands so if you</font>

346
00:14:01,910 --> 00:14:06,890
wanted<font color="#E5E5E5"> to add some new feature to say</font>

347
00:14:04,430 --> 00:14:09,079
create<font color="#E5E5E5"> table then that would be where</font>

348
00:14:06,890 --> 00:14:10,839
you<font color="#CCCCCC"> would go look is in SRC backend</font>

349
00:14:09,079 --> 00:14:13,939
<font color="#E5E5E5">commands and you would look at the</font>

350
00:14:10,839 --> 00:14:17,269
<font color="#CCCCCC">defined table</font><font color="#E5E5E5"> command or defined</font>

351
00:14:13,940 --> 00:14:20,120
<font color="#CCCCCC">rotation actually function we then have</font>

352
00:14:17,269 --> 00:14:23,420
the<font color="#E5E5E5"> executor</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so who knows what the</font>

353
00:14:20,120 --> 00:14:25,820
executor is<font color="#E5E5E5"> all right a couple people</font>

354
00:14:23,420 --> 00:14:28,370
<font color="#E5E5E5">here and there all right so the executor</font>

355
00:14:25,820 --> 00:14:29,990
in Postgres<font color="#E5E5E5"> the way Postgres works is</font>

356
00:14:28,370 --> 00:14:31,760
that you<font color="#CCCCCC"> have all of your queries come</font>

357
00:14:29,990 --> 00:14:33,199
in to<font color="#E5E5E5"> something called the traffic cop</font>

358
00:14:31,760 --> 00:14:35,689
right<font color="#E5E5E5"> we'll talk</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> on the next</font>

359
00:14:33,199 --> 00:14:37,339
<font color="#CCCCCC">slide but that</font><font color="#E5E5E5"> traffic cop</font><font color="#CCCCCC"> what it does</font>

360
00:14:35,690 --> 00:14:39,410
with that query that you've sent is it

361
00:14:37,339 --> 00:14:41,300
first runs the planner<font color="#E5E5E5"> right all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

362
00:14:39,410 --> 00:14:44,149
actual<font color="#E5E5E5"> planning happens inside</font><font color="#CCCCCC"> of the</font>

363
00:14:41,300 --> 00:14:47,120
optimizer<font color="#CCCCCC"> down here</font><font color="#E5E5E5"> right the query</font>

364
00:14:44,149 --> 00:14:49,010
optimizer<font color="#CCCCCC"> basically takes in</font><font color="#E5E5E5"> that quit</font>

365
00:14:47,120 --> 00:14:50,420
at that parsed query<font color="#E5E5E5"> after</font><font color="#CCCCCC"> it's been</font>

366
00:14:49,010 --> 00:14:53,480
parsed<font color="#E5E5E5"> so first it actually goes through</font>

367
00:14:50,420 --> 00:14:55,839
parsing which<font color="#E5E5E5"> is here look at that my</font>

368
00:14:53,480 --> 00:14:58,040
<font color="#E5E5E5">actual my it works for once</font>

369
00:14:55,839 --> 00:15:00,230
sorry most of the times you're on TVs

370
00:14:58,040 --> 00:15:01,969
and<font color="#E5E5E5"> it doesn't work so the parser here</font>

371
00:15:00,230 --> 00:15:03,560
we have the<font color="#CCCCCC"> lexer and the grammar</font><font color="#E5E5E5"> which</font>

372
00:15:01,970 --> 00:15:06,230
is how<font color="#E5E5E5"> PC understands the queries you</font>

373
00:15:03,560 --> 00:15:08,510
send it we parse it first<font color="#E5E5E5"> we then send</font>

374
00:15:06,230 --> 00:15:11,360
it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the query</font><font color="#CCCCCC"> optimizer</font><font color="#E5E5E5"> right which</font>

375
00:15:08,510 --> 00:15:13,490
generates a plan that<font color="#E5E5E5"> plan then get sent</font>

376
00:15:11,360 --> 00:15:16,970
to the executor<font color="#CCCCCC"> and the executor</font>

377
00:15:13,490 --> 00:15:20,149
actually runs the plan<font color="#CCCCCC"> okay so whenever</font>

378
00:15:16,970 --> 00:15:22,490
you do<font color="#CCCCCC"> an</font><font color="#E5E5E5"> explain on a query you see all</font>

379
00:15:20,149 --> 00:15:24,949
those different<font color="#CCCCCC"> nodes right the planner</font>

380
00:15:22,490 --> 00:15:27,829
created that structure created all<font color="#CCCCCC"> of</font>

381
00:15:24,949 --> 00:15:30,140
those nodes the executor is where all

382
00:15:27,829 --> 00:15:33,439
the code lives to actually execute<font color="#E5E5E5"> those</font>

383
00:15:30,140 --> 00:15:35,510
nodes right like<font color="#E5E5E5"> an append node for</font>

384
00:15:33,440 --> 00:15:37,290
<font color="#E5E5E5">example there is</font><font color="#CCCCCC"> a file in that</font>

385
00:15:35,510 --> 00:15:39,510
directory called node a pen

386
00:15:37,290 --> 00:15:42,510
<font color="#CCCCCC">right that's</font><font color="#E5E5E5"> the code</font><font color="#CCCCCC"> that does that</font>

387
00:15:39,510 --> 00:15:44,550
<font color="#CCCCCC">append node</font><font color="#E5E5E5"> that's its job right so if</font>

388
00:15:42,510 --> 00:15:47,430
you're<font color="#E5E5E5"> wondering about hacking on SQL</font>

389
00:15:44,550 --> 00:15:49,649
itself<font color="#CCCCCC"> that's where you would</font><font color="#E5E5E5"> go I'm</font>

390
00:15:47,430 --> 00:15:54,300
just<font color="#E5E5E5"> gonna say this once right</font><font color="#CCCCCC"> now but</font>

391
00:15:49,649 --> 00:15:56,640
people<font color="#E5E5E5"> sit down</font><font color="#CCCCCC"> the reason I say that</font><font color="#E5E5E5"> is</font>

392
00:15:54,300 --> 00:15:58,709
because<font color="#CCCCCC"> cause them</font><font color="#E5E5E5"> unfortunately will be</font>

393
00:15:56,640 --> 00:15:59,910
<font color="#CCCCCC">very upset with us</font><font color="#E5E5E5"> if we have a whole</font>

394
00:15:58,709 --> 00:16:01,770
bunch<font color="#CCCCCC"> of people</font><font color="#E5E5E5"> standing along the</font>

395
00:15:59,910 --> 00:16:05,310
<font color="#E5E5E5">aisles because the fire marshal will</font>

396
00:16:01,770 --> 00:16:07,020
<font color="#E5E5E5">come and complain at us so as you come</font>

397
00:16:05,310 --> 00:16:08,459
in<font color="#E5E5E5"> please if you need to come across the</font>

398
00:16:07,020 --> 00:16:10,140
front<font color="#CCCCCC"> to go sit down</font><font color="#E5E5E5"> on this</font><font color="#CCCCCC"> side please</font>

399
00:16:08,459 --> 00:16:11,910
<font color="#E5E5E5">do that's fine but let's just get it</font>

400
00:16:10,140 --> 00:16:13,140
done<font color="#CCCCCC"> otherwise</font><font color="#E5E5E5"> we're gonna have</font><font color="#CCCCCC"> a whole</font>

401
00:16:11,910 --> 00:16:15,000
<font color="#CCCCCC">bunch of people</font><font color="#E5E5E5"> lined up over there and</font>

402
00:16:13,140 --> 00:16:19,290
<font color="#CCCCCC">that's not okay and I don't want fossum</font>

403
00:16:15,000 --> 00:16:20,850
to get mad at me thank you everyone and

404
00:16:19,290 --> 00:16:21,870
<font color="#E5E5E5">if people can shift</font><font color="#CCCCCC"> over maybe</font><font color="#E5E5E5"> a little</font>

405
00:16:20,850 --> 00:16:27,120
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> too that would be</font><font color="#E5E5E5"> great</font><font color="#CCCCCC"> just</font>

406
00:16:21,870 --> 00:16:30,600
something let's tell<font color="#CCCCCC"> people when they</font>

407
00:16:27,120 --> 00:16:32,580
<font color="#CCCCCC">come in</font><font color="#E5E5E5"> Robert so just tell them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> come</font>

408
00:16:30,600 --> 00:16:33,930
<font color="#E5E5E5">across the front like I mean I don't</font>

409
00:16:32,580 --> 00:16:38,100
<font color="#E5E5E5">want them messing with the camera but we</font>

410
00:16:33,930 --> 00:16:39,540
have to have<font color="#CCCCCC"> people sitting in case</font>

411
00:16:38,100 --> 00:16:41,130
you're not sure<font color="#E5E5E5"> I'm also one of the</font>

412
00:16:39,540 --> 00:16:42,599
<font color="#CCCCCC">bouncers you all are</font><font color="#E5E5E5"> going to be</font><font color="#CCCCCC"> dealing</font>

413
00:16:41,130 --> 00:16:45,270
with<font color="#E5E5E5"> outside if you want to come back</font>

414
00:16:42,600 --> 00:16:48,600
into this<font color="#E5E5E5"> room</font><font color="#CCCCCC"> after this so</font><font color="#E5E5E5"> that's part</font>

415
00:16:45,270 --> 00:16:50,339
of why I'm<font color="#E5E5E5"> being particular</font><font color="#CCCCCC"> about it all</font>

416
00:16:48,600 --> 00:16:52,589
<font color="#E5E5E5">right thank you</font><font color="#CCCCCC"> very much</font><font color="#E5E5E5"> all right</font>

417
00:16:50,339 --> 00:16:54,300
<font color="#CCCCCC">let's move on</font><font color="#E5E5E5"> so we talked about the</font>

418
00:16:52,589 --> 00:16:57,360
<font color="#E5E5E5">executor let's talk about foreign data</font>

419
00:16:54,300 --> 00:16:59,400
<font color="#CCCCCC">wrappers</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> Postgres has a system called</font>

420
00:16:57,360 --> 00:17:01,050
foreign data wrappers this allows

421
00:16:59,400 --> 00:17:03,300
postgrads when you<font color="#E5E5E5"> execute a query</font>

422
00:17:01,050 --> 00:17:05,069
against the database<font color="#E5E5E5"> to go out and reach</font>

423
00:17:03,300 --> 00:17:07,020
out<font color="#E5E5E5"> into another server and get data</font>

424
00:17:05,069 --> 00:17:08,970
from<font color="#E5E5E5"> it right that includes another</font>

425
00:17:07,020 --> 00:17:10,920
<font color="#CCCCCC">post-grad</font><font color="#E5E5E5"> server we can push down joins</font>

426
00:17:08,970 --> 00:17:13,170
we can push down where clauses<font color="#E5E5E5"> right</font>

427
00:17:10,920 --> 00:17:15,420
it's great<font color="#E5E5E5"> that also includes things</font>

428
00:17:13,170 --> 00:17:17,370
like I don't know Twitter and Google if

429
00:17:15,420 --> 00:17:19,290
you want to do a<font color="#E5E5E5"> Google search from</font>

430
00:17:17,369 --> 00:17:20,489
<font color="#E5E5E5">within your database you can even a form</font>

431
00:17:19,290 --> 00:17:24,030
data wrapper to do that

432
00:17:20,490 --> 00:17:26,099
the baseline<font color="#E5E5E5"> code for how foreign data</font>

433
00:17:24,030 --> 00:17:27,959
wrappers works lives inside of foreign

434
00:17:26,099 --> 00:17:30,419
that's not where the foreign data

435
00:17:27,959 --> 00:17:32,700
wrapper itself lives<font color="#E5E5E5"> this is all the</font>

436
00:17:30,420 --> 00:17:34,980
backend<font color="#CCCCCC"> code</font><font color="#E5E5E5"> the foreign data wrapper</font>

437
00:17:32,700 --> 00:17:43,380
for say<font color="#E5E5E5"> post</font><font color="#CCCCCC"> goes ftw</font>

438
00:17:34,980 --> 00:17:45,419
lives inside of<font color="#CCCCCC"> contribs right this is</font>

439
00:17:43,380 --> 00:17:48,929
where postgrads can take a query of

440
00:17:45,419 --> 00:17:50,850
<font color="#CCCCCC">yours and actually for</font><font color="#E5E5E5"> some portions of</font>

441
00:17:48,929 --> 00:17:53,850
it<font color="#E5E5E5"> build a put a little</font>

442
00:17:50,850 --> 00:17:56,760
program in memory<font color="#E5E5E5"> compile it optimize it</font>

443
00:17:53,850 --> 00:18:01,080
and run it<font color="#E5E5E5"> using</font><font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> this is the</font>

444
00:17:56,760 --> 00:18:03,390
<font color="#E5E5E5">infrastructure for that</font><font color="#CCCCCC"> lib so</font><font color="#E5E5E5"> live is</font>

445
00:18:01,080 --> 00:18:04,918
just<font color="#CCCCCC"> a kind</font><font color="#E5E5E5"> of placeholder</font><font color="#CCCCCC"> for a lot of</font>

446
00:18:03,390 --> 00:18:09,059
<font color="#E5E5E5">stuff we</font><font color="#CCCCCC"> dump a bunch of different stuff</font>

447
00:18:04,919 --> 00:18:10,740
<font color="#E5E5E5">in lib for</font><font color="#CCCCCC"> back-end code lip PQ so we</font>

448
00:18:09,059 --> 00:18:13,139
talked<font color="#E5E5E5"> about the PQ being under SRC</font>

449
00:18:10,740 --> 00:18:15,390
interfaces right<font color="#E5E5E5"> why is it here this is</font>

450
00:18:13,140 --> 00:18:17,580
<font color="#E5E5E5">the</font><font color="#CCCCCC"> back end half right you have a front</font>

451
00:18:15,390 --> 00:18:20,340
end<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> back end</font><font color="#E5E5E5"> right when you're</font>

452
00:18:17,580 --> 00:18:21,659
talking the protocol<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> front-end</font>

453
00:18:20,340 --> 00:18:24,709
protocol<font color="#CCCCCC"> talk you know the</font><font color="#E5E5E5"> thing that</font>

454
00:18:21,660 --> 00:18:26,970
talks<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the front-end protocol is SRC</font>

455
00:18:24,710 --> 00:18:28,559
interfaces<font color="#E5E5E5"> lip</font><font color="#CCCCCC"> PQ that's what</font><font color="#E5E5E5"> clients</font>

456
00:18:26,970 --> 00:18:30,179
use and when the<font color="#E5E5E5"> backend is</font>

457
00:18:28,559 --> 00:18:34,168
communicating back and forth

458
00:18:30,179 --> 00:18:36,450
that's from SRC<font color="#E5E5E5"> back-end lip</font><font color="#CCCCCC"> PQ main</font>

459
00:18:34,169 --> 00:18:39,000
main is where main is<font color="#E5E5E5"> to find the</font>

460
00:18:36,450 --> 00:18:40,500
starting<font color="#CCCCCC"> post res</font><font color="#E5E5E5"> and in fact when</font><font color="#CCCCCC"> we</font>

461
00:18:39,000 --> 00:18:42,720
start<font color="#E5E5E5"> post</font><font color="#CCCCCC"> grows we often start</font><font color="#E5E5E5"> up a</font>

462
00:18:40,500 --> 00:18:45,000
whole bunch<font color="#E5E5E5"> of processes with it right</font>

463
00:18:42,720 --> 00:18:48,330
we start up a<font color="#E5E5E5"> checkpoint your process we</font>

464
00:18:45,000 --> 00:18:50,010
start up<font color="#CCCCCC"> Auto vacuum set up a bunch of</font>

465
00:18:48,330 --> 00:18:53,490
other stuff<font color="#E5E5E5"> that's where everything kind</font>

466
00:18:50,010 --> 00:18:55,020
<font color="#E5E5E5">of gets kicked off nodes</font><font color="#CCCCCC"> when you see an</font>

467
00:18:53,490 --> 00:18:56,400
explained plan you see those different

468
00:18:55,020 --> 00:18:58,590
nodes we have<font color="#E5E5E5"> a generalized node</font>

469
00:18:56,400 --> 00:19:00,870
infrastructure for doing<font color="#CCCCCC"> that that all</font>

470
00:18:58,590 --> 00:19:02,908
lives inside of nodes<font color="#E5E5E5"> we talked a little</font>

471
00:19:00,870 --> 00:19:04,649
bit about the optimizer the optimizer<font color="#CCCCCC"> is</font>

472
00:19:02,909 --> 00:19:07,169
what's going<font color="#CCCCCC"> to actually take</font><font color="#E5E5E5"> your query</font>

473
00:19:04,650 --> 00:19:10,169
that<font color="#E5E5E5"> you bring in and optimize it</font><font color="#CCCCCC"> for</font>

474
00:19:07,169 --> 00:19:12,710
<font color="#E5E5E5">running it the parser is what actually</font>

475
00:19:10,169 --> 00:19:15,510
parses the literal string that comes in

476
00:19:12,710 --> 00:19:18,659
<font color="#E5E5E5">and then we have partitioning this is</font>

477
00:19:15,510 --> 00:19:20,070
<font color="#E5E5E5">native partitioning so Postgres now has</font>

478
00:19:18,659 --> 00:19:21,929
<font color="#E5E5E5">something called native or declarative</font>

479
00:19:20,070 --> 00:19:23,158
partitioning<font color="#CCCCCC"> right we used to have in</font>

480
00:19:21,929 --> 00:19:24,990
<font color="#E5E5E5">the inheritance system now we have</font>

481
00:19:23,159 --> 00:19:27,620
native partitioning<font color="#E5E5E5"> and this is where</font>

482
00:19:24,990 --> 00:19:27,620
that code lives

483
00:19:27,690 --> 00:19:31,710
<font color="#E5E5E5">pío is just translations so if you're</font>

484
00:19:30,330 --> 00:19:33,240
interested<font color="#CCCCCC"> in doing translation work</font>

485
00:19:31,710 --> 00:19:35,789
that's where you would<font color="#E5E5E5"> go</font><font color="#CCCCCC"> to a check out</font>

486
00:19:33,240 --> 00:19:36,840
our translation system so Posca has

487
00:19:35,789 --> 00:19:38,520
actually translated into multiple

488
00:19:36,840 --> 00:19:41,340
<font color="#CCCCCC">different major</font><font color="#E5E5E5"> languages which</font><font color="#CCCCCC"> is</font>

489
00:19:38,520 --> 00:19:44,668
pretty neat port is just you know<font color="#E5E5E5"> back</font>

490
00:19:41,340 --> 00:19:46,590
<font color="#CCCCCC">in Pacific platform hacks</font><font color="#E5E5E5"> the postmaster</font>

491
00:19:44,669 --> 00:19:47,940
process so the postmaster process is

492
00:19:46,590 --> 00:19:51,178
<font color="#E5E5E5">that</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> that lives all the time</font>

493
00:19:47,940 --> 00:19:53,250
<font color="#CCCCCC">it's constantly running</font><font color="#E5E5E5"> right every time</font>

494
00:19:51,179 --> 00:19:54,840
<font color="#CCCCCC">Postgres starts up the postmaster is the</font>

495
00:19:53,250 --> 00:19:58,200
thing<font color="#CCCCCC"> that actually listens for inbound</font>

496
00:19:54,840 --> 00:20:01,470
<font color="#E5E5E5">connections so that's where all the code</font>

497
00:19:58,200 --> 00:20:03,690
<font color="#CCCCCC">for that write</font><font color="#E5E5E5"> it answers requests that</font>

498
00:20:01,470 --> 00:20:06,150
come in<font color="#E5E5E5"> for new connections</font>

499
00:20:03,690 --> 00:20:08,040
regex is Henry<font color="#CCCCCC"> Spencer is regex library</font>

500
00:20:06,150 --> 00:20:09,900
which is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> used by tickle and in fact</font>

501
00:20:08,040 --> 00:20:11,790
<font color="#E5E5E5">we've kind of</font><font color="#CCCCCC"> become the de-facto</font>

502
00:20:09,900 --> 00:20:14,040
<font color="#E5E5E5">upstream for it</font>

503
00:20:11,790 --> 00:20:15,930
the tickle folks look at<font color="#E5E5E5"> us for fixing</font>

504
00:20:14,040 --> 00:20:17,909
bugs in<font color="#E5E5E5"> it and whatnot</font><font color="#CCCCCC"> and yes there are</font>

505
00:20:15,930 --> 00:20:21,000
<font color="#E5E5E5">bugs still to be fixed in things like</font>

506
00:20:17,910 --> 00:20:23,640
the regex library<font color="#E5E5E5"> in particular we had a</font>

507
00:20:21,000 --> 00:20:27,990
very interesting case<font color="#E5E5E5"> where something</font>

508
00:20:23,640 --> 00:20:30,990
<font color="#E5E5E5">somebody wrote a tool for basically fuzz</font>

509
00:20:27,990 --> 00:20:32,370
testing SQL called SQL Smith and one of

510
00:20:30,990 --> 00:20:34,940
the things it found was that<font color="#E5E5E5"> there were</font>

511
00:20:32,370 --> 00:20:38,459
ways to make our<font color="#CCCCCC"> regex library go dumb</font>

512
00:20:34,940 --> 00:20:40,380
<font color="#E5E5E5">right and just chew up lots of CPU and</font>

513
00:20:38,460 --> 00:20:42,420
<font color="#CCCCCC">so though some of those things</font><font color="#E5E5E5"> have now</font>

514
00:20:40,380 --> 00:20:44,370
been been fixed in patches released and

515
00:20:42,420 --> 00:20:47,610
whatnot<font color="#CCCCCC"> and some of that</font><font color="#E5E5E5"> has gotten back</font>

516
00:20:44,370 --> 00:20:50,100
<font color="#E5E5E5">into tickle as well we then have</font>

517
00:20:47,610 --> 00:20:51,719
replication which just basically handles

518
00:20:50,100 --> 00:20:54,060
the replication<font color="#E5E5E5"> protocol and shipping</font>

519
00:20:51,720 --> 00:20:57,660
wall logs we have the query rewrite

520
00:20:54,060 --> 00:20:59,250
engine<font color="#E5E5E5"> so the query rewrite engine is</font>

521
00:20:57,660 --> 00:21:00,600
something that kind<font color="#CCCCCC"> of happens early on</font>

522
00:20:59,250 --> 00:21:03,120
right it<font color="#CCCCCC"> actually is before</font><font color="#E5E5E5"> the</font>

523
00:21:00,600 --> 00:21:05,429
optimizer<font color="#CCCCCC"> so I lied a little bit I</font>

524
00:21:03,120 --> 00:21:06,929
skipped from<font color="#CCCCCC"> peace right</font><font color="#E5E5E5"> so when things</font>

525
00:21:05,430 --> 00:21:09,330
come<font color="#CCCCCC"> into postgrads the first thing that</font>

526
00:21:06,930 --> 00:21:10,590
<font color="#E5E5E5">happens is it gets parsed right after it</font>

527
00:21:09,330 --> 00:21:12,210
goes through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> traffic cop then it</font>

528
00:21:10,590 --> 00:21:13,560
gets parsed<font color="#E5E5E5"> then it goes through</font><font color="#CCCCCC"> the</font>

529
00:21:12,210 --> 00:21:15,330
<font color="#CCCCCC">role system then it goes to the</font>

530
00:21:13,560 --> 00:21:17,669
optimizer then it goes<font color="#CCCCCC"> to the executor</font>

531
00:21:15,330 --> 00:21:19,679
<font color="#E5E5E5">there's a lot of different pieces here</font>

532
00:21:17,670 --> 00:21:21,990
but<font color="#E5E5E5"> the rewrite engine also is what</font>

533
00:21:19,680 --> 00:21:23,910
handles row-level security right<font color="#E5E5E5"> and</font>

534
00:21:21,990 --> 00:21:26,010
it's important that that happens before

535
00:21:23,910 --> 00:21:28,710
optimization because<font color="#CCCCCC"> you actually want</font>

536
00:21:26,010 --> 00:21:30,960
<font color="#CCCCCC">to have the constraints that are</font>

537
00:21:28,710 --> 00:21:33,570
implemented<font color="#CCCCCC"> by row-level security be</font>

538
00:21:30,960 --> 00:21:35,220
able to be optimized<font color="#E5E5E5"> right so that we</font>

539
00:21:33,570 --> 00:21:37,110
can then more efficiently pull out the

540
00:21:35,220 --> 00:21:39,150
rows once we've gotten whatever

541
00:21:37,110 --> 00:21:42,479
<font color="#CCCCCC">additional constraints are required by</font>

542
00:21:39,150 --> 00:21:44,040
<font color="#CCCCCC">Royal Security</font><font color="#E5E5E5"> put in place</font><font color="#CCCCCC"> snoball</font>

543
00:21:42,480 --> 00:21:45,240
stemming is just used<font color="#CCCCCC"> for full-text</font>

544
00:21:44,040 --> 00:21:47,550
search we actually pull<font color="#CCCCCC"> codes from</font>

545
00:21:45,240 --> 00:21:49,920
elsewhere for<font color="#CCCCCC"> that we have an extended</font>

546
00:21:47,550 --> 00:21:51,720
statistic system we have a storage<font color="#E5E5E5"> layer</font>

547
00:21:49,920 --> 00:21:54,090
<font color="#E5E5E5">storage layer is basically</font><font color="#CCCCCC"> it handles</font>

548
00:21:51,720 --> 00:21:57,210
the actual direct<font color="#E5E5E5"> IO into the underlying</font>

549
00:21:54,090 --> 00:21:59,189
<font color="#E5E5E5">system</font><font color="#CCCCCC"> so this is things like if you</font>

550
00:21:57,210 --> 00:22:00,750
want to go read a page that's<font color="#E5E5E5"> the</font>

551
00:21:59,190 --> 00:22:02,340
<font color="#E5E5E5">process the part of the system that</font>

552
00:22:00,750 --> 00:22:05,190
<font color="#CCCCCC">actually goes</font><font color="#E5E5E5"> and reads the actual page</font>

553
00:22:02,340 --> 00:22:07,080
<font color="#E5E5E5">up into shared buffers we then have the</font>

554
00:22:05,190 --> 00:22:09,330
<font color="#E5E5E5">traffic cop so that's what</font><font color="#CCCCCC"> actually gets</font>

555
00:22:07,080 --> 00:22:11,610
<font color="#E5E5E5">the queries in and we have T search</font>

556
00:22:09,330 --> 00:22:13,649
which is<font color="#CCCCCC"> a our actual full-text search</font>

557
00:22:11,610 --> 00:22:15,209
engine and<font color="#E5E5E5"> then we have utils which is</font>

558
00:22:13,650 --> 00:22:16,530
got a bunch of different stuff<font color="#CCCCCC"> in there</font>

559
00:22:15,210 --> 00:22:20,150
<font color="#CCCCCC">including our caching system and</font>

560
00:22:16,530 --> 00:22:24,420
manager<font color="#E5E5E5"> questions about the</font><font color="#CCCCCC"> backend code</font>

561
00:22:20,150 --> 00:22:26,730
directory<font color="#E5E5E5"> stuff I know I'm</font><font color="#CCCCCC"> going too</font>

562
00:22:24,420 --> 00:22:28,020
fast<font color="#E5E5E5"> but that's okay because we're gonna</font>

563
00:22:26,730 --> 00:22:28,980
slow down<font color="#E5E5E5"> a little bit we're gonna start</font>

564
00:22:28,020 --> 00:22:30,930
talking<font color="#E5E5E5"> about what do you want to change</font>

565
00:22:28,980 --> 00:22:32,190
<font color="#E5E5E5">when you want to hack postgrads this is</font>

566
00:22:30,930 --> 00:22:34,380
what<font color="#E5E5E5"> I always wonder</font><font color="#CCCCCC"> about furs right</font>

567
00:22:32,190 --> 00:22:36,540
<font color="#E5E5E5">what do you want to do you want a new</font>

568
00:22:34,380 --> 00:22:38,850
back-end command<font color="#E5E5E5"> right you wanna you</font>

569
00:22:36,540 --> 00:22:41,010
want<font color="#E5E5E5"> you know modify table I don't know</font>

570
00:22:38,850 --> 00:22:42,179
<font color="#E5E5E5">all right what does it do</font><font color="#CCCCCC"> or maybe</font><font color="#E5E5E5"> you</font>

571
00:22:41,010 --> 00:22:44,460
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement something like merge</font>

572
00:22:42,180 --> 00:22:46,200
which is an actual<font color="#CCCCCC"> SQL standard command</font>

573
00:22:44,460 --> 00:22:48,840
<font color="#E5E5E5">maybe you want</font><font color="#CCCCCC"> to add a new backslash</font>

574
00:22:46,200 --> 00:22:51,420
command for<font color="#E5E5E5"> P SQL in case you'd go look</font>

575
00:22:48,840 --> 00:22:53,399
at SRC bin psql<font color="#E5E5E5"> where you wanna make</font>

576
00:22:51,420 --> 00:22:57,420
improvements to PG bench<font color="#CCCCCC"> right that's</font>

577
00:22:53,400 --> 00:22:59,100
also an SRC<font color="#CCCCCC"> Ben if you want to improve</font>

578
00:22:57,420 --> 00:23:02,820
performance come talk to<font color="#E5E5E5"> us</font><font color="#CCCCCC"> because it's</font>

579
00:22:59,100 --> 00:23:04,889
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of work uh-huh but it's good work</font>

580
00:23:02,820 --> 00:23:06,629
it's good work<font color="#CCCCCC"> if you want to add a new</font>

581
00:23:04,890 --> 00:23:08,880
authentication<font color="#E5E5E5"> method right then you're</font>

582
00:23:06,630 --> 00:23:12,210
talking<font color="#CCCCCC"> about changes to SRC interfaces</font>

583
00:23:08,880 --> 00:23:14,280
Lib<font color="#E5E5E5"> PQ and SRC</font><font color="#CCCCCC"> back-end Lib bu</font><font color="#E5E5E5"> if you</font>

584
00:23:12,210 --> 00:23:17,550
want to add<font color="#CCCCCC"> support for another TLS or</font>

585
00:23:14,280 --> 00:23:21,180
SSL encryption library<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of that</font>

586
00:23:17,550 --> 00:23:23,190
goes into again SRC interfaces<font color="#CCCCCC"> limpia</font>

587
00:23:21,180 --> 00:23:26,760
<font color="#E5E5E5">loop</font><font color="#CCCCCC"> EQ at least if you're</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

588
00:23:23,190 --> 00:23:28,140
<font color="#E5E5E5">it for the the protocol so we're gonna</font>

589
00:23:26,760 --> 00:23:31,530
talk a little bit about changing an

590
00:23:28,140 --> 00:23:33,600
existing back-end command so it<font color="#E5E5E5"> depends</font>

591
00:23:31,530 --> 00:23:35,639
on where<font color="#E5E5E5"> do you start depends on what</font>

592
00:23:33,600 --> 00:23:37,260
you want<font color="#E5E5E5"> to do right when I'm talking</font>

593
00:23:35,640 --> 00:23:38,670
about<font color="#E5E5E5"> adding a new back-end command or</font>

594
00:23:37,260 --> 00:23:41,280
<font color="#E5E5E5">modifying one I want to go hack the</font>

595
00:23:38,670 --> 00:23:43,950
grammar<font color="#E5E5E5"> right</font><font color="#CCCCCC"> because the grammar drives</font>

596
00:23:41,280 --> 00:23:46,260
a lot<font color="#E5E5E5"> right what is the grammar</font><font color="#CCCCCC"> the</font>

597
00:23:43,950 --> 00:23:48,570
grammar is that thing<font color="#E5E5E5"> that takes</font>

598
00:23:46,260 --> 00:23:50,430
whatever you have written out in text

599
00:23:48,570 --> 00:23:52,290
and decides whether<font color="#CCCCCC"> it's legit or not</font>

600
00:23:50,430 --> 00:23:53,850
whether it's<font color="#E5E5E5"> acceptable and if it is</font>

601
00:23:52,290 --> 00:23:55,950
acceptable<font color="#E5E5E5"> what is gonna</font><font color="#CCCCCC"> happen right</font>

602
00:23:53,850 --> 00:23:57,149
<font color="#CCCCCC">and so some of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> things you have to</font>

603
00:23:55,950 --> 00:24:00,180
<font color="#E5E5E5">worry about when you're hacking the</font>

604
00:23:57,150 --> 00:24:02,700
grammar or things like ambiguity right

605
00:24:00,180 --> 00:24:04,110
you<font color="#E5E5E5"> don't want to end up with a with two</font>

606
00:24:02,700 --> 00:24:06,000
identical statements<font color="#E5E5E5"> that could be</font>

607
00:24:04,110 --> 00:24:08,010
considered<font color="#E5E5E5"> in two different ways right</font>

608
00:24:06,000 --> 00:24:10,860
<font color="#CCCCCC">Postgres needs to have a grammar that is</font>

609
00:24:08,010 --> 00:24:14,070
not<font color="#CCCCCC"> ambiguous</font><font color="#E5E5E5"> so where does the grammar</font>

610
00:24:10,860 --> 00:24:15,300
lives<font color="#E5E5E5"> it lives inside of the parser one</font>

611
00:24:14,070 --> 00:24:16,470
of the things about the grammar is that

612
00:24:15,300 --> 00:24:18,360
it's one<font color="#E5E5E5"> of those things that can be</font>

613
00:24:16,470 --> 00:24:20,880
<font color="#CCCCCC">difficult to get agreement</font><font color="#E5E5E5"> on not</font>

614
00:24:18,360 --> 00:24:23,010
everybody agrees with<font color="#E5E5E5"> you know what you</font>

615
00:24:20,880 --> 00:24:25,260
want your grammar to look like<font color="#E5E5E5"> should it</font>

616
00:24:23,010 --> 00:24:27,840
<font color="#E5E5E5">be create index concurrently or create</font>

617
00:24:25,260 --> 00:24:30,470
concurrently index right<font color="#CCCCCC"> these are</font>

618
00:24:27,840 --> 00:24:33,360
<font color="#CCCCCC">things that we argue about</font>

619
00:24:30,470 --> 00:24:35,010
so let's talk<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> about the</font>

620
00:24:33,360 --> 00:24:36,600
<font color="#CCCCCC">parser vs the grammar the the parser</font>

621
00:24:35,010 --> 00:24:38,790
actually consists of two<font color="#CCCCCC"> pieces we have</font>

622
00:24:36,600 --> 00:24:41,340
a lexer which takes<font color="#E5E5E5"> all of the</font>

623
00:24:38,790 --> 00:24:42,840
individual words<font color="#E5E5E5"> inside of the statement</font>

624
00:24:41,340 --> 00:24:45,629
that<font color="#E5E5E5"> you've provided and</font><font color="#CCCCCC"> tokenize --is</font>

625
00:24:42,840 --> 00:24:48,000
them<font color="#E5E5E5"> then the part of the grammar is</font>

626
00:24:45,630 --> 00:24:49,500
what actually<font color="#CCCCCC"> defines what tokens are</font>

627
00:24:48,000 --> 00:24:53,100
allowed to be<font color="#E5E5E5"> used with other tokens</font>

628
00:24:49,500 --> 00:24:54,390
<font color="#E5E5E5">right and in what order so while we're</font>

629
00:24:53,100 --> 00:24:56,399
<font color="#E5E5E5">doing all of this parsing we're</font>

630
00:24:54,390 --> 00:24:58,200
collecting up bits<font color="#E5E5E5"> of information about</font>

631
00:24:56,400 --> 00:25:01,050
the<font color="#E5E5E5"> command so let me know what it what</font>

632
00:24:58,200 --> 00:25:03,180
you want to do and then once the full

633
00:25:01,050 --> 00:25:07,050
command is parsed<font color="#E5E5E5"> a function gets called</font>

634
00:25:03,180 --> 00:25:08,580
from the grammar so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> parcel is an SRC</font>

635
00:25:07,050 --> 00:25:10,980
<font color="#CCCCCC">back-end parser we talked about</font><font color="#E5E5E5"> that</font>

636
00:25:08,580 --> 00:25:13,320
<font color="#E5E5E5">scan dot</font><font color="#CCCCCC"> eleazar lecture gram dot</font><font color="#E5E5E5"> why is</font>

637
00:25:10,980 --> 00:25:15,180
our definition<font color="#CCCCCC"> of the grammar and we</font>

638
00:25:13,320 --> 00:25:17,070
have a bunch of parse through teens<font color="#CCCCCC"> we</font>

639
00:25:15,180 --> 00:25:19,140
haven't analyzed it transforms<font color="#E5E5E5"> the parse</font>

640
00:25:17,070 --> 00:25:22,439
tree<font color="#E5E5E5"> into</font><font color="#CCCCCC"> an actual query statement</font><font color="#E5E5E5"> and</font>

641
00:25:19,140 --> 00:25:23,880
then or a<font color="#E5E5E5"> query structure and then we</font>

642
00:25:22,440 --> 00:25:26,190
have the<font color="#E5E5E5"> support routines for it right</font>

643
00:25:23,880 --> 00:25:27,800
that's all pretty<font color="#E5E5E5"> straightforward so all</font>

644
00:25:26,190 --> 00:25:30,930
<font color="#E5E5E5">right we're gonna modify the grammar now</font>

645
00:25:27,800 --> 00:25:33,360
<font color="#E5E5E5">okay so the grammar is a set of</font>

646
00:25:30,930 --> 00:25:36,210
productions<font color="#E5E5E5"> right every production</font>

647
00:25:33,360 --> 00:25:39,620
starts with<font color="#E5E5E5"> a production name a colon</font>

648
00:25:36,210 --> 00:25:42,000
and<font color="#E5E5E5"> then a list essentially and that</font>

649
00:25:39,620 --> 00:25:44,219
<font color="#CCCCCC">tells</font><font color="#E5E5E5"> us what we</font><font color="#CCCCCC"> can do at this point</font>

650
00:25:42,000 --> 00:25:48,510
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so the very top point of all of</font>

651
00:25:44,220 --> 00:25:51,540
<font color="#CCCCCC">this is this statement</font><font color="#E5E5E5"> right and then</font>

652
00:25:48,510 --> 00:25:53,940
the we have a list of every possible

653
00:25:51,540 --> 00:25:55,470
statement that we accept right they're

654
00:25:53,940 --> 00:25:57,900
separated by<font color="#CCCCCC"> these pipes that are or</font>

655
00:25:55,470 --> 00:26:00,540
commands or<font color="#E5E5E5"> they're just indicate an or</font>

656
00:25:57,900 --> 00:26:03,030
statement<font color="#CCCCCC"> right</font><font color="#E5E5E5"> this or that</font><font color="#CCCCCC"> or that or</font>

657
00:26:00,540 --> 00:26:07,889
that<font color="#CCCCCC"> or that</font><font color="#E5E5E5"> right copy statement is</font>

658
00:26:03,030 --> 00:26:10,740
what we're gonna look at here and that's

659
00:26:07,890 --> 00:26:18,090
a<font color="#CCCCCC"> Beamer mess up because</font><font color="#E5E5E5"> that should be</font>

660
00:26:10,740 --> 00:26:20,790
a pipe<font color="#CCCCCC"> I'm sorry</font><font color="#E5E5E5"> okay so we then have at</font>

661
00:26:18,090 --> 00:26:23,580
the top level<font color="#E5E5E5"> for copy we have this copy</font>

662
00:26:20,790 --> 00:26:25,830
statement<font color="#E5E5E5"> right and then we have all of</font>

663
00:26:23,580 --> 00:26:28,199
<font color="#CCCCCC">these other things in</font><font color="#E5E5E5"> here right things</font>

664
00:26:25,830 --> 00:26:32,070
that are capitalized here those<font color="#E5E5E5"> are</font>

665
00:26:28,200 --> 00:26:34,290
direct tokens<font color="#E5E5E5"> right</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> match directly</font>

666
00:26:32,070 --> 00:26:38,820
into the lexer things that are lowercase

667
00:26:34,290 --> 00:26:40,980
<font color="#CCCCCC">our other productions right so here</font><font color="#E5E5E5"> we</font>

668
00:26:38,820 --> 00:26:43,500
have things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> op binary qualified</font>

669
00:26:40,980 --> 00:26:45,240
<font color="#CCCCCC">named op column list</font><font color="#E5E5E5"> etc</font>

670
00:26:43,500 --> 00:26:47,760
right these<font color="#CCCCCC"> are actual</font><font color="#E5E5E5"> other productions</font>

671
00:26:45,240 --> 00:26:49,410
<font color="#E5E5E5">so let's look at some of them</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

672
00:26:47,760 --> 00:26:51,690
so here you<font color="#CCCCCC"> can see there's a copy from</font>

673
00:26:49,410 --> 00:26:53,040
prex and says whether<font color="#E5E5E5"> it's copy is from</font>

674
00:26:51,690 --> 00:26:55,800
or<font color="#E5E5E5"> - right</font>

675
00:26:53,040 --> 00:26:59,190
<font color="#E5E5E5">dollar dollar says assign this node this</font>

676
00:26:55,800 --> 00:27:01,950
value right<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> particular copy from</font>

677
00:26:59,190 --> 00:27:05,100
is getting<font color="#E5E5E5"> assigned either true or false</font>

678
00:27:01,950 --> 00:27:07,590
based on whether<font color="#E5E5E5"> it's from or - right</font>

679
00:27:05,100 --> 00:27:09,240
<font color="#E5E5E5">and then we have cop you know op program</font>

680
00:27:07,590 --> 00:27:11,280
<font color="#CCCCCC">which is programs</font><font color="#E5E5E5"> again</font>

681
00:27:09,240 --> 00:27:14,430
true or false whether we have program so

682
00:27:11,280 --> 00:27:21,690
this is a optional additional keyword

683
00:27:14,430 --> 00:27:24,450
right<font color="#CCCCCC"> - the copy statement etc etc then</font>

684
00:27:21,690 --> 00:27:27,470
we<font color="#E5E5E5"> have multi value productions right so</font>

685
00:27:24,450 --> 00:27:30,690
here<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> where we have say</font>

686
00:27:27,470 --> 00:27:33,930
this copy generic opt list we have copy

687
00:27:30,690 --> 00:27:36,210
generic<font color="#CCCCCC"> op element</font><font color="#E5E5E5"> right and that is a</font>

688
00:27:33,930 --> 00:27:38,970
production itself but when we get<font color="#E5E5E5"> to</font>

689
00:27:36,210 --> 00:27:40,380
this bit of code<font color="#E5E5E5"> the value from this</font>

690
00:27:38,970 --> 00:27:43,350
production<font color="#E5E5E5"> is going to be in this dollar</font>

691
00:27:40,380 --> 00:27:45,180
one variable<font color="#E5E5E5"> right and then when we set</font>

692
00:27:43,350 --> 00:27:47,550
this equal<font color="#CCCCCC"> to $1 dollar this list makes</font>

693
00:27:45,180 --> 00:27:51,200
we're going to turn<font color="#E5E5E5"> this dollar one oops</font>

694
00:27:47,550 --> 00:27:54,389
<font color="#E5E5E5">we're trying this dollar one into a list</font>

695
00:27:51,200 --> 00:27:56,430
right<font color="#E5E5E5"> and then if you have multiple</font>

696
00:27:54,390 --> 00:27:57,890
<font color="#E5E5E5">options here separated</font><font color="#CCCCCC"> by a comma</font><font color="#E5E5E5"> we</font>

697
00:27:56,430 --> 00:28:00,750
have a dollar one and a dollar three

698
00:27:57,890 --> 00:28:04,140
note<font color="#E5E5E5"> that we skip over dollar two why is</font>

699
00:28:00,750 --> 00:28:06,270
that<font color="#E5E5E5"> because this goes in ordinal right</font>

700
00:28:04,140 --> 00:28:08,940
so the dollar two is actually<font color="#CCCCCC"> the comma</font>

701
00:28:06,270 --> 00:28:11,610
itself we<font color="#E5E5E5"> don't need to come up we're</font>

702
00:28:08,940 --> 00:28:13,080
gonna go past<font color="#E5E5E5"> a comma right so we have</font>

703
00:28:11,610 --> 00:28:15,990
dollar one dollar three and we're going

704
00:28:13,080 --> 00:28:18,389
<font color="#CCCCCC">to append to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> this makes it</font>

705
00:28:15,990 --> 00:28:20,520
recursive so you can have however<font color="#E5E5E5"> many</font>

706
00:28:18,390 --> 00:28:22,050
<font color="#CCCCCC">of</font><font color="#E5E5E5"> these you want and we'll figure out</font>

707
00:28:20,520 --> 00:28:26,070
<font color="#E5E5E5">how to make a list out</font><font color="#CCCCCC"> of all those</font>

708
00:28:22,050 --> 00:28:29,090
different<font color="#CCCCCC"> options for you everybody kind</font>

709
00:28:26,070 --> 00:28:29,090
<font color="#E5E5E5">of following along</font><font color="#CCCCCC"> with this</font>

710
00:28:31,230 --> 00:28:39,180
this at<font color="#E5E5E5"> one it provides a lie number</font>

711
00:28:37,020 --> 00:28:40,530
<font color="#E5E5E5">right so when you see pose or a position</font>

712
00:28:39,180 --> 00:28:43,140
<font color="#E5E5E5">rather I should say so when you see a</font>

713
00:28:40,530 --> 00:28:46,860
post gonna say you screwed up here

714
00:28:43,140 --> 00:28:50,070
that's what that's about<font color="#E5E5E5"> any other</font>

715
00:28:46,860 --> 00:28:56,449
questions about this<font color="#E5E5E5"> stuff here come on</font>

716
00:28:50,070 --> 00:28:56,450
come<font color="#CCCCCC"> on come on</font><font color="#E5E5E5"> it's all good thank you</font>

717
00:28:58,160 --> 00:29:01,560
<font color="#E5E5E5">all right so we</font><font color="#CCCCCC"> I think we actually came</font>

718
00:29:00,510 --> 00:29:04,020
<font color="#CCCCCC">through a lot of</font><font color="#E5E5E5"> this this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> kind of a</font>

719
00:29:01,560 --> 00:29:06,060
summary of right we have seed template

720
00:29:04,020 --> 00:29:07,920
code in the grammar<font color="#E5E5E5"> it's compiled as</font>

721
00:29:06,060 --> 00:29:10,110
part of the overall<font color="#E5E5E5"> parser in the ground</font>

722
00:29:07,920 --> 00:29:11,730
in the<font color="#CCCCCC"> ground up see dollar dollar is</font>

723
00:29:10,110 --> 00:29:13,219
this<font color="#E5E5E5"> node dollar one is blah blah blah</font>

724
00:29:11,730 --> 00:29:19,110
we talked about<font color="#E5E5E5"> this stuff</font><font color="#CCCCCC"> right</font>

725
00:29:13,220 --> 00:29:21,480
everybody get it no<font color="#E5E5E5"> all right copy</font>

726
00:29:19,110 --> 00:29:24,110
options list here we talked about<font color="#E5E5E5"> the</font>

727
00:29:21,480 --> 00:29:26,760
<font color="#CCCCCC">production</font><font color="#E5E5E5"> of the different copy options</font>

728
00:29:24,110 --> 00:29:29,669
<font color="#E5E5E5">so this is basically making default</font>

729
00:29:26,760 --> 00:29:32,390
elements so we're saying<font color="#E5E5E5"> format Lloyd's</font>

730
00:29:29,670 --> 00:29:35,280
<font color="#E5E5E5">freeze we're just passing those through</font>

731
00:29:32,390 --> 00:29:39,380
all<font color="#E5E5E5"> right so we're making up a options</font>

732
00:29:35,280 --> 00:29:39,379
list here<font color="#E5E5E5"> for all the different</font><font color="#CCCCCC"> options</font>

733
00:29:40,970 --> 00:29:48,000
<font color="#E5E5E5">all right so if we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> add a new</font>

734
00:29:44,270 --> 00:29:50,250
copy option what do we do well<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font>

735
00:29:48,000 --> 00:29:52,680
thing we're<font color="#E5E5E5"> gonna do is add it</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> that</font>

736
00:29:50,250 --> 00:29:55,520
list of options<font color="#E5E5E5"> so this option that I'm</font>

737
00:29:52,680 --> 00:29:58,080
adding<font color="#E5E5E5"> is going to be called compressed</font>

738
00:29:55,520 --> 00:30:01,020
<font color="#CCCCCC">right so we're gonna add it to this list</font>

739
00:29:58,080 --> 00:30:03,629
<font color="#CCCCCC">so that now the grammar will understand</font>

740
00:30:01,020 --> 00:30:06,870
it<font color="#E5E5E5"> right the grammar will understand it</font>

741
00:30:03,630 --> 00:30:09,150
and<font color="#CCCCCC"> accept it</font><font color="#E5E5E5"> but other things won't</font>

742
00:30:06,870 --> 00:30:10,590
<font color="#CCCCCC">come on come on come on right the rest</font>

743
00:30:09,150 --> 00:30:12,600
<font color="#E5E5E5">of the system isn't gonna have any clue</font>

744
00:30:10,590 --> 00:30:13,860
about this<font color="#E5E5E5"> yet right this is just</font><font color="#CCCCCC"> the</font>

745
00:30:12,600 --> 00:30:15,600
<font color="#E5E5E5">very beginning but this is where we</font>

746
00:30:13,860 --> 00:30:17,909
start<font color="#E5E5E5"> and you want to make sure that you</font>

747
00:30:15,600 --> 00:30:20,100
can get<font color="#E5E5E5"> the grammar to parse correct to</font>

748
00:30:17,910 --> 00:30:22,800
build correctly<font color="#E5E5E5"> right because if you</font>

749
00:30:20,100 --> 00:30:25,110
start seeing things<font color="#E5E5E5"> erroring out from</font>

750
00:30:22,800 --> 00:30:27,510
that that<font color="#CCCCCC"> usually means you have some</font>

751
00:30:25,110 --> 00:30:29,639
kind<font color="#E5E5E5"> of ambiguity you've introduced an</font>

752
00:30:27,510 --> 00:30:32,370
ambiguity<font color="#CCCCCC"> you know a case of ambiguity</font>

753
00:30:29,640 --> 00:30:35,730
into<font color="#E5E5E5"> your parser if you do that we're</font>

754
00:30:32,370 --> 00:30:37,649
<font color="#CCCCCC">not going to let it</font><font color="#E5E5E5"> go in right that can</font>

755
00:30:35,730 --> 00:30:39,210
be either like a shift reduce conflict

756
00:30:37,650 --> 00:30:40,620
<font color="#E5E5E5">or a reduced</font><font color="#CCCCCC"> reduce</font><font color="#E5E5E5"> conflict I'm not</font>

757
00:30:39,210 --> 00:30:43,200
gonna go<font color="#E5E5E5"> into what those are but if you</font>

758
00:30:40,620 --> 00:30:46,189
see those those are<font color="#E5E5E5"> bad don't you</font><font color="#CCCCCC"> know</font>

759
00:30:43,200 --> 00:30:48,420
go fix it<font color="#E5E5E5"> or talk to us about what it</font><font color="#CCCCCC"> is</font>

760
00:30:46,190 --> 00:30:50,960
you do<font color="#CCCCCC"> also</font><font color="#E5E5E5"> want to avoid adding</font>

761
00:30:48,420 --> 00:30:53,790
reserved words<font color="#E5E5E5"> if at all possible</font><font color="#CCCCCC"> right</font>

762
00:30:50,960 --> 00:30:55,320
<font color="#E5E5E5">when you do need to go add in a new new</font>

763
00:30:53,790 --> 00:30:59,220
token<font color="#E5E5E5"> like this you want to go add it to</font>

764
00:30:55,320 --> 00:31:00,870
the list<font color="#E5E5E5"> of unreserved keywords if you</font>

765
00:30:59,220 --> 00:31:02,820
can get away with it<font color="#E5E5E5"> if it has to be a</font>

766
00:31:00,870 --> 00:31:04,080
reserved<font color="#CCCCCC"> word</font><font color="#E5E5E5"> we're gonna have talks</font>

767
00:31:02,820 --> 00:31:05,850
about it because we've got<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a</font>

768
00:31:04,080 --> 00:31:11,159
discussion with<font color="#CCCCCC"> people about any new</font>

769
00:31:05,850 --> 00:31:13,169
reserved words coming in we also need to

770
00:31:11,160 --> 00:31:15,570
update the<font color="#CCCCCC"> actual list of tokens that's</font>

771
00:31:13,170 --> 00:31:17,870
up<font color="#CCCCCC"> that's in</font><font color="#E5E5E5"> key W list dot H it's</font>

772
00:31:15,570 --> 00:31:20,460
pretty<font color="#E5E5E5"> straightforward</font>

773
00:31:17,870 --> 00:31:22,050
<font color="#CCCCCC">alright so now that we've got this in</font>

774
00:31:20,460 --> 00:31:24,870
here<font color="#CCCCCC"> and in the code</font><font color="#E5E5E5"> right what are we</font>

775
00:31:22,050 --> 00:31:28,290
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> next so the code for</font><font color="#E5E5E5"> copy is in</font>

776
00:31:24,870 --> 00:31:30,600
SRC<font color="#CCCCCC"> back-end commands copied see copies</font>

777
00:31:28,290 --> 00:31:31,800
got a function to process all of the

778
00:31:30,600 --> 00:31:34,260
<font color="#CCCCCC">options that are</font><font color="#E5E5E5"> given that's pretty</font>

779
00:31:31,800 --> 00:31:37,260
convenient<font color="#E5E5E5"> so what we're going to do is</font>

780
00:31:34,260 --> 00:31:40,110
we're gonna go add in a new boolean into

781
00:31:37,260 --> 00:31:42,030
this code<font color="#E5E5E5"> right to keep track</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> so</font>

782
00:31:40,110 --> 00:31:45,719
this<font color="#E5E5E5"> is inside</font><font color="#CCCCCC"> of our structure we're</font>

783
00:31:42,030 --> 00:31:47,010
adding a new<font color="#E5E5E5"> item to this stage that's</font>

784
00:31:45,720 --> 00:31:50,760
going to be<font color="#E5E5E5"> basically is this</font><font color="#CCCCCC"> a</font>

785
00:31:47,010 --> 00:31:52,590
compressed file or<font color="#CCCCCC"> not when</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font>

786
00:31:50,760 --> 00:31:54,550
defining a structure<font color="#E5E5E5"> inside of</font><font color="#CCCCCC"> a dot C</font>

787
00:31:52,590 --> 00:31:55,659
file<font color="#CCCCCC"> we do ask</font><font color="#E5E5E5"> you put it</font>

788
00:31:54,550 --> 00:31:58,120
the top because<font color="#E5E5E5"> that's a pretty</font>

789
00:31:55,660 --> 00:31:59,830
important thing<font color="#CCCCCC"> we don't have a hard</font><font color="#E5E5E5"> and</font>

790
00:31:58,120 --> 00:32:01,780
<font color="#CCCCCC">fast</font><font color="#E5E5E5"> rule about only having</font><font color="#CCCCCC"> them in dot</font>

791
00:31:59,830 --> 00:32:03,639
H files although<font color="#E5E5E5"> typically they're going</font>

792
00:32:01,780 --> 00:32:07,690
<font color="#CCCCCC">to go there if they're</font><font color="#E5E5E5"> being used by</font>

793
00:32:03,640 --> 00:32:09,760
other parts of the system so now talking

794
00:32:07,690 --> 00:32:11,290
about<font color="#E5E5E5"> the code itself right so this is</font>

795
00:32:09,760 --> 00:32:15,580
<font color="#E5E5E5">pretty straightforward here right we</font>

796
00:32:11,290 --> 00:32:18,399
<font color="#E5E5E5">have an if</font><font color="#CCCCCC"> Def for half-lives E and then</font>

797
00:32:15,580 --> 00:32:21,070
we say<font color="#E5E5E5"> okay if we have it then if this</font><font color="#CCCCCC"> C</font>

798
00:32:18,400 --> 00:32:24,820
<font color="#E5E5E5">state compressed so this is the option</font>

799
00:32:21,070 --> 00:32:27,070
has come in and said<font color="#CCCCCC"> its compressed and</font>

800
00:32:24,820 --> 00:32:28,030
if we have it we're gonna say<font color="#E5E5E5"> we if we</font>

801
00:32:27,070 --> 00:32:29,889
already<font color="#E5E5E5"> have it set we're gonna say</font>

802
00:32:28,030 --> 00:32:31,629
conflicting<font color="#CCCCCC"> written options because you</font>

803
00:32:29,890 --> 00:32:34,360
specified it twice<font color="#E5E5E5"> otherwise we're gonna</font>

804
00:32:31,630 --> 00:32:36,750
<font color="#E5E5E5">actually set this compress flag based on</font>

805
00:32:34,360 --> 00:32:40,090
this<font color="#E5E5E5"> boolean value that's been</font><font color="#CCCCCC"> passed in</font>

806
00:32:36,750 --> 00:32:41,410
if we<font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> whimsy</font><font color="#E5E5E5"> on the system</font>

807
00:32:40,090 --> 00:32:44,520
we're<font color="#E5E5E5"> gonna throw an error saying we</font>

808
00:32:41,410 --> 00:32:47,920
haven't<font color="#CCCCCC"> been compiled with</font><font color="#E5E5E5"> libs e sorry</font>

809
00:32:44,520 --> 00:32:49,450
so is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> all you</font><font color="#E5E5E5"> have to do know</font>

810
00:32:47,920 --> 00:32:51,100
there's a lot<font color="#E5E5E5"> of stuff this is</font><font color="#CCCCCC"> the</font>

811
00:32:49,450 --> 00:32:55,330
actual<font color="#E5E5E5"> diff stat from when I wrote this</font>

812
00:32:51,100 --> 00:32:58,449
feature<font color="#E5E5E5"> all right so this included</font>

813
00:32:55,330 --> 00:33:00,850
things of having<font color="#CCCCCC"> to track GZ file right</font>

814
00:32:58,450 --> 00:33:03,070
so when you're<font color="#E5E5E5"> working</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> gzip files</font>

815
00:33:00,850 --> 00:33:05,199
you have<font color="#CCCCCC"> to track GZ file</font><font color="#E5E5E5"> stars instead</font>

816
00:33:03,070 --> 00:33:07,389
of file stars<font color="#E5E5E5"> right that's a libs</font><font color="#CCCCCC"> e</font>

817
00:33:05,200 --> 00:33:10,150
thing and then you have to use GZ read

818
00:33:07,390 --> 00:33:12,040
and<font color="#CCCCCC"> TZ right</font><font color="#E5E5E5"> so I had to go make changes</font>

819
00:33:10,150 --> 00:33:14,950
to<font color="#E5E5E5"> parts of the system to to address</font>

820
00:33:12,040 --> 00:33:18,250
<font color="#E5E5E5">that and that's where that SRC back in</font>

821
00:33:14,950 --> 00:33:20,560
<font color="#E5E5E5">storage file</font><font color="#CCCCCC"> FTC came into play</font><font color="#E5E5E5"> and then</font>

822
00:33:18,250 --> 00:33:25,420
I had to make documentation updates over

823
00:33:20,560 --> 00:33:28,090
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Doc's source sgml wrath copy and then</font>

824
00:33:25,420 --> 00:33:29,680
I added some<font color="#E5E5E5"> regression tests which</font>

825
00:33:28,090 --> 00:33:31,030
we're inside of SRC<font color="#E5E5E5"> tests hopefully all</font>

826
00:33:29,680 --> 00:33:33,400
these different pieces look familiar

827
00:33:31,030 --> 00:33:35,350
we're gonna talk a little bit about what

828
00:33:33,400 --> 00:33:38,080
happened with<font color="#E5E5E5"> this because this never</font>

829
00:33:35,350 --> 00:33:38,969
got committed<font color="#E5E5E5"> we'll talk about that in</font><font color="#CCCCCC"> a</font>

830
00:33:38,080 --> 00:33:41,560
<font color="#E5E5E5">minute</font>

831
00:33:38,970 --> 00:33:43,870
so<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right Postgres has a bunch of</font>

832
00:33:41,560 --> 00:33:45,220
different subsystems<font color="#CCCCCC"> right we have</font>

833
00:33:43,870 --> 00:33:47,080
specific ways<font color="#E5E5E5"> of handling memory</font>

834
00:33:45,220 --> 00:33:49,000
management error logging<font color="#E5E5E5"> cleanup linked</font>

835
00:33:47,080 --> 00:33:50,800
<font color="#CCCCCC">list catalog lookups nodes datums and</font>

836
00:33:49,000 --> 00:33:52,750
tuples so let's talk<font color="#CCCCCC"> about that when it</font>

837
00:33:50,800 --> 00:33:54,340
<font color="#E5E5E5">comes to memory management all memory</font>

838
00:33:52,750 --> 00:33:56,290
allocated in the<font color="#E5E5E5"> back end is done so</font>

839
00:33:54,340 --> 00:33:58,750
inside of<font color="#CCCCCC"> a context of some kind</font><font color="#E5E5E5"> right</font>

840
00:33:56,290 --> 00:34:00,580
<font color="#CCCCCC">if you want to allocate memory inside a</font>

841
00:33:58,750 --> 00:34:04,690
<font color="#E5E5E5">Postgres that is going to be living</font>

842
00:34:00,580 --> 00:34:06,699
<font color="#E5E5E5">throughout the lifetime</font><font color="#CCCCCC"> of the back-end</font>

843
00:34:04,690 --> 00:34:07,870
process that you<font color="#E5E5E5"> are currently</font><font color="#CCCCCC"> operating</font>

844
00:34:06,700 --> 00:34:10,300
inside of you would allocate

845
00:34:07,870 --> 00:34:12,580
inside of<font color="#E5E5E5"> something called top memory</font>

846
00:34:10,300 --> 00:34:14,830
context right<font color="#E5E5E5"> if you allocate</font><font color="#CCCCCC"> something</font>

847
00:34:12,580 --> 00:34:17,590
instead of top memory context and you

848
00:34:14,830 --> 00:34:21,009
don't free it<font color="#E5E5E5"> then it's basically a</font>

849
00:34:17,590 --> 00:34:22,630
memory leak<font color="#E5E5E5"> right on the other hand if</font>

850
00:34:21,010 --> 00:34:25,000
you<font color="#CCCCCC"> allocate inside of current memory</font>

851
00:34:22,630 --> 00:34:27,460
<font color="#E5E5E5">context which</font><font color="#CCCCCC"> is typically the correct</font>

852
00:34:25,000 --> 00:34:29,949
context for whatever you're doing right

853
00:34:27,460 --> 00:34:31,720
<font color="#CCCCCC">now we will typically clean that up</font>

854
00:34:29,949 --> 00:34:33,310
automatically<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you right</font><font color="#E5E5E5"> because</font>

855
00:34:31,719 --> 00:34:35,230
current memory context is going<font color="#CCCCCC"> to be</font>

856
00:34:33,310 --> 00:34:39,009
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a per query context or a</font>

857
00:34:35,230 --> 00:34:40,719
per to<font color="#CCCCCC"> pool context right</font><font color="#E5E5E5"> and what that</font>

858
00:34:39,010 --> 00:34:42,520
means is that<font color="#CCCCCC"> Postgres when</font><font color="#E5E5E5"> it's done</font>

859
00:34:40,719 --> 00:34:44,770
with that query<font color="#E5E5E5"> or it's done working on</font>

860
00:34:42,520 --> 00:34:47,620
<font color="#E5E5E5">that tuple it'll throw away the context</font>

861
00:34:44,770 --> 00:34:51,880
<font color="#E5E5E5">and anything below it right</font><font color="#CCCCCC"> so we clean</font>

862
00:34:47,620 --> 00:34:55,480
all of that up<font color="#E5E5E5"> for you so our allocator</font>

863
00:34:51,880 --> 00:34:56,380
for all of this is called<font color="#CCCCCC"> palak so</font>

864
00:34:55,480 --> 00:34:57,880
that's what you need<font color="#CCCCCC"> to be using</font>

865
00:34:56,380 --> 00:35:00,850
whenever you're<font color="#E5E5E5"> allocating memory this</font>

866
00:34:57,880 --> 00:35:03,040
<font color="#CCCCCC">is also true for extensions</font><font color="#E5E5E5"> so if you're</font>

867
00:35:00,850 --> 00:35:07,690
if<font color="#CCCCCC"> you're writing extensions</font><font color="#E5E5E5"> you should</font>

868
00:35:03,040 --> 00:35:08,710
be using palak right because your code

869
00:35:07,690 --> 00:35:11,530
<font color="#E5E5E5">is running in the</font><font color="#CCCCCC"> backend</font>

870
00:35:08,710 --> 00:35:13,420
<font color="#E5E5E5">all right errors</font><font color="#CCCCCC"> in a search</font><font color="#E5E5E5"> so in the</font>

871
00:35:11,530 --> 00:35:15,520
event<font color="#CCCCCC"> that you have a something</font><font color="#E5E5E5"> that</font>

872
00:35:13,420 --> 00:35:18,130
can't happen right<font color="#CCCCCC"> these are situations</font>

873
00:35:15,520 --> 00:35:21,850
that<font color="#CCCCCC"> just</font><font color="#E5E5E5"> shouldn't happen you can use a</font>

874
00:35:18,130 --> 00:35:23,800
<font color="#E5E5E5">log right</font><font color="#CCCCCC"> ie log always runs</font><font color="#E5E5E5"> and</font>

875
00:35:21,850 --> 00:35:26,470
<font color="#E5E5E5">typically it should not be used where a</font>

876
00:35:23,800 --> 00:35:30,100
user might<font color="#E5E5E5"> see the results but it can be</font>

877
00:35:26,470 --> 00:35:31,629
useful<font color="#CCCCCC"> for debugging assert is you know</font>

878
00:35:30,100 --> 00:35:34,089
your typical<font color="#E5E5E5"> standard assert system</font>

879
00:35:31,630 --> 00:35:36,550
where it's only<font color="#E5E5E5"> running in a certain</font>

880
00:35:34,090 --> 00:35:37,960
<font color="#E5E5E5">able builds but do be aware</font><font color="#CCCCCC"> that a</font>

881
00:35:36,550 --> 00:35:40,930
certain<font color="#CCCCCC"> naval builds can</font><font color="#E5E5E5"> therefore act</font>

882
00:35:37,960 --> 00:35:42,670
differently<font color="#E5E5E5"> from non assert builds but</font>

883
00:35:40,930 --> 00:35:44,830
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> useful to</font><font color="#E5E5E5"> make sure that other</font>

884
00:35:42,670 --> 00:35:47,170
hackers<font color="#E5E5E5"> are</font><font color="#CCCCCC"> using your function</font>

885
00:35:44,830 --> 00:35:48,580
correctly<font color="#E5E5E5"> right so when other people</font>

886
00:35:47,170 --> 00:35:50,530
<font color="#E5E5E5">were writing code they're typically</font>

887
00:35:48,580 --> 00:35:53,319
doing<font color="#E5E5E5"> it with a certs enabled and it's</font>

888
00:35:50,530 --> 00:35:54,940
good to<font color="#CCCCCC"> have a search in there to make</font>

889
00:35:53,320 --> 00:35:57,390
<font color="#CCCCCC">sure that the arguments you're</font><font color="#E5E5E5"> that are</font>

890
00:35:54,940 --> 00:35:59,800
getting<font color="#CCCCCC"> past your function makes sense</font>

891
00:35:57,390 --> 00:36:01,810
when you're<font color="#E5E5E5"> walking from postgrads</font>

892
00:35:59,800 --> 00:36:03,280
you should be using<font color="#E5E5E5"> a report and you</font>

893
00:36:01,810 --> 00:36:05,560
<font color="#E5E5E5">should be passing in an error code</font><font color="#CCCCCC"> and</font>

894
00:36:03,280 --> 00:36:08,590
an error message<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so we have a</font>

895
00:36:05,560 --> 00:36:09,940
style guide for<font color="#CCCCCC"> our error messages that</font>

896
00:36:08,590 --> 00:36:12,220
<font color="#CCCCCC">you should go make sure that you're</font>

897
00:36:09,940 --> 00:36:14,080
familiar with<font color="#CCCCCC"> but the basic</font><font color="#E5E5E5"> gist of it</font>

898
00:36:12,220 --> 00:36:16,839
is<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> of the important things</font>

899
00:36:14,080 --> 00:36:21,069
about<font color="#CCCCCC"> report is that when you are doing</font>

900
00:36:16,840 --> 00:36:21,570
<font color="#E5E5E5">an e report an error or higher postgrads</font>

901
00:36:21,070 --> 00:36:23,040
<font color="#CCCCCC">will just</font>

902
00:36:21,570 --> 00:36:26,850
take care of cleaning<font color="#E5E5E5"> everything up for</font>

903
00:36:23,040 --> 00:36:29,580
you<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so this is really important</font>

904
00:36:26,850 --> 00:36:31,920
<font color="#E5E5E5">because running a report</font><font color="#CCCCCC"> with an error</font>

905
00:36:29,580 --> 00:36:33,779
<font color="#E5E5E5">will actually roll back the transaction</font>

906
00:36:31,920 --> 00:36:36,840
<font color="#E5E5E5">for you and free all those memory</font>

907
00:36:33,780 --> 00:36:39,600
contexts the way we do this<font color="#E5E5E5"> is actually</font>

908
00:36:36,840 --> 00:36:41,340
<font color="#E5E5E5">through a long jump right so the e</font>

909
00:36:39,600 --> 00:36:44,730
report system<font color="#E5E5E5"> will actually</font><font color="#CCCCCC"> long jump</font>

910
00:36:41,340 --> 00:36:47,730
out of that<font color="#E5E5E5"> code back up higher up</font><font color="#CCCCCC"> in</font>

911
00:36:44,730 --> 00:36:49,860
the<font color="#E5E5E5"> stack handle cleaning up everything</font>

912
00:36:47,730 --> 00:36:52,140
freeing all of your memory contexts<font color="#E5E5E5"> and</font>

913
00:36:49,860 --> 00:36:56,190
whatnot<font color="#CCCCCC"> and rolling back the transaction</font>

914
00:36:52,140 --> 00:36:59,670
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> okay once all of that is done</font>

915
00:36:56,190 --> 00:37:01,230
we're ready<font color="#E5E5E5"> to accept new queries so you</font>

916
00:36:59,670 --> 00:37:03,660
want to make sure<font color="#E5E5E5"> that you're using this</font>

917
00:37:01,230 --> 00:37:07,140
appropriately<font color="#E5E5E5"> if you do an e report with</font>

918
00:37:03,660 --> 00:37:09,839
a warning<font color="#CCCCCC"> or any warning notify anything</font>

919
00:37:07,140 --> 00:37:10,859
like that<font color="#CCCCCC"> right those lower levels</font><font color="#E5E5E5"> the</font>

920
00:37:09,840 --> 00:37:13,650
code will keep running

921
00:37:10,860 --> 00:37:16,230
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> just you know issue a warning or a</font>

922
00:37:13,650 --> 00:37:19,740
notify back to the user but the the code

923
00:37:16,230 --> 00:37:22,790
<font color="#E5E5E5">flow will</font><font color="#CCCCCC"> continue from that point so</font>

924
00:37:19,740 --> 00:37:22,790
everybody can<font color="#E5E5E5"> understand how that works</font>

925
00:37:24,230 --> 00:37:29,010
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> sis cache and scanning</font><font color="#CCCCCC"> catalog</font>

926
00:37:26,850 --> 00:37:30,330
<font color="#E5E5E5">so we have a function</font><font color="#CCCCCC"> called search sis</font>

927
00:37:29,010 --> 00:37:33,810
cache<font color="#E5E5E5"> so we talked about the system</font>

928
00:37:30,330 --> 00:37:35,460
catalog<font color="#CCCCCC"> a little bit earlier</font><font color="#E5E5E5"> it's tricky</font>

929
00:37:33,810 --> 00:37:37,020
when<font color="#E5E5E5"> you want to modify or deal with</font><font color="#CCCCCC"> the</font>

930
00:37:35,460 --> 00:37:38,610
system catalog<font color="#E5E5E5"> because there can be</font>

931
00:37:37,020 --> 00:37:40,380
concurrent things happening other people

932
00:37:38,610 --> 00:37:42,210
can be<font color="#E5E5E5"> making</font><font color="#CCCCCC"> modifications in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> we</font>

933
00:37:40,380 --> 00:37:43,470
have this whole caching system<font color="#CCCCCC"> to make</font>

934
00:37:42,210 --> 00:37:45,690
<font color="#CCCCCC">it so that the system is performing</font>

935
00:37:43,470 --> 00:37:47,939
<font color="#CCCCCC">right so whenever</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to go look</font>

936
00:37:45,690 --> 00:37:49,880
things up inside<font color="#E5E5E5"> of a system catalog you</font>

937
00:37:47,940 --> 00:37:54,210
should be using search<font color="#CCCCCC"> disk cache</font><font color="#E5E5E5"> and</font>

938
00:37:49,880 --> 00:37:56,250
that<font color="#E5E5E5"> basically is some key that you pass</font>

939
00:37:54,210 --> 00:37:59,400
in<font color="#E5E5E5"> right so if you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look up a</font>

940
00:37:56,250 --> 00:38:01,560
table right you would<font color="#E5E5E5"> you search this</font>

941
00:37:59,400 --> 00:38:03,390
cache and<font color="#E5E5E5"> you would pass in the OID of</font>

942
00:38:01,560 --> 00:38:05,400
the relation that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to look up</font>

943
00:38:03,390 --> 00:38:07,920
right<font color="#E5E5E5"> the OID being the tables</font><font color="#CCCCCC"> oh ID</font>

944
00:38:05,400 --> 00:38:09,960
<font color="#E5E5E5">that you want to go find right and then</font>

945
00:38:07,920 --> 00:38:12,150
when you get<font color="#E5E5E5"> that back you'll get back</font>

946
00:38:09,960 --> 00:38:14,610
all the<font color="#E5E5E5"> information about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> table in</font>

947
00:38:12,150 --> 00:38:16,500
a cached form that you<font color="#CCCCCC"> can then access</font>

948
00:38:14,610 --> 00:38:18,960
<font color="#E5E5E5">and work with when you're done with that</font>

949
00:38:16,500 --> 00:38:20,040
you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to call release sis cache so</font>

950
00:38:18,960 --> 00:38:21,360
<font color="#CCCCCC">that this is to</font><font color="#E5E5E5"> know that you're done</font>

951
00:38:20,040 --> 00:38:22,350
with<font color="#CCCCCC"> that you don't</font><font color="#E5E5E5"> need to work with</font>

952
00:38:21,360 --> 00:38:24,600
<font color="#E5E5E5">you're not gonna work with</font><font color="#CCCCCC"> it any</font>

953
00:38:22,350 --> 00:38:25,980
<font color="#E5E5E5">further we have</font><font color="#CCCCCC"> some convenience</font><font color="#E5E5E5"> for</font>

954
00:38:24,600 --> 00:38:28,940
routines around<font color="#E5E5E5"> this</font><font color="#CCCCCC"> four else's cache</font>

955
00:38:25,980 --> 00:38:31,170
as well<font color="#CCCCCC"> just</font><font color="#E5E5E5"> in general always look for</font>

956
00:38:28,940 --> 00:38:32,880
existing routines before<font color="#E5E5E5"> implementing a</font>

957
00:38:31,170 --> 00:38:34,520
new one because<font color="#E5E5E5"> we have lots of pieces</font>

958
00:38:32,880 --> 00:38:37,070
<font color="#CCCCCC">of our system</font>

959
00:38:34,520 --> 00:38:39,150
so I talked<font color="#CCCCCC"> to them about nodes</font><font color="#E5E5E5"> earlier</font>

960
00:38:37,070 --> 00:38:41,130
expression trees are made up of nodes

961
00:38:39,150 --> 00:38:43,800
<font color="#E5E5E5">every</font><font color="#CCCCCC"> node of the type plus a</font><font color="#E5E5E5"> bunch of</font>

962
00:38:41,130 --> 00:38:45,270
appropriate data<font color="#E5E5E5"> the the type is stored</font>

963
00:38:43,800 --> 00:38:47,610
<font color="#CCCCCC">as the</font><font color="#E5E5E5"> first item inside of the node</font>

964
00:38:45,270 --> 00:38:49,230
<font color="#E5E5E5">structure so you can use</font><font color="#CCCCCC"> izi</font><font color="#E5E5E5"> on it to</font>

965
00:38:47,610 --> 00:38:51,300
<font color="#E5E5E5">determine what kind of a note it is</font>

966
00:38:49,230 --> 00:38:53,490
whenever<font color="#E5E5E5"> you create a node you should be</font>

967
00:38:51,300 --> 00:38:56,280
using make node<font color="#E5E5E5"> and then you need to</font>

968
00:38:53,490 --> 00:38:59,370
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that you add into nodes dot H</font>

969
00:38:56,280 --> 00:39:01,770
and then all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the make copy and</font>

970
00:38:59,370 --> 00:39:03,930
equality function pieces<font color="#E5E5E5"> inside of</font>

971
00:39:01,770 --> 00:39:06,180
<font color="#CCCCCC">back-end nodes</font><font color="#E5E5E5"> so if you add a new node</font>

972
00:39:03,930 --> 00:39:07,529
into<font color="#E5E5E5"> the system like there's a bunch of</font>

973
00:39:06,180 --> 00:39:10,109
stuff<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go add a bunch of</font>

974
00:39:07,530 --> 00:39:11,790
boilerplate<font color="#E5E5E5"> essentially right things</font><font color="#CCCCCC"> for</font>

975
00:39:10,110 --> 00:39:13,620
knowing if the two nodes are equal

976
00:39:11,790 --> 00:39:18,390
things<font color="#E5E5E5"> knowing if you know how to copy</font>

977
00:39:13,620 --> 00:39:21,390
that node you can't cover the thing

978
00:39:18,390 --> 00:39:24,540
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> so zero minutes left and</font><font color="#E5E5E5"> I've</font>

979
00:39:21,390 --> 00:39:26,009
got<font color="#E5E5E5"> ten</font><font color="#CCCCCC"> all right datum so inside of</font>

980
00:39:24,540 --> 00:39:27,870
<font color="#CCCCCC">Postgres we have this thing</font><font color="#E5E5E5"> called</font>

981
00:39:26,010 --> 00:39:30,960
datums<font color="#E5E5E5"> right that's basically a</font>

982
00:39:27,870 --> 00:39:33,299
<font color="#E5E5E5">structure for a single value</font><font color="#CCCCCC"> and you can</font>

983
00:39:30,960 --> 00:39:37,350
convert<font color="#E5E5E5"> these back and forth between</font><font color="#CCCCCC"> c</font>

984
00:39:33,300 --> 00:39:41,190
items and<font color="#E5E5E5"> postcards datum so in</font><font color="#CCCCCC"> 32 data</font>

985
00:39:37,350 --> 00:39:43,200
<font color="#CCCCCC">a or datum get in 32 for example note</font>

986
00:39:41,190 --> 00:39:44,970
that data's can be out of<font color="#E5E5E5"> line Postgres</font>

987
00:39:43,200 --> 00:39:46,859
will sometimes toast things if things

988
00:39:44,970 --> 00:39:48,930
are big enough as a single value is

989
00:39:46,860 --> 00:39:50,430
large enough<font color="#CCCCCC"> well toast it and that</font>

990
00:39:48,930 --> 00:39:52,620
<font color="#E5E5E5">means</font><font color="#CCCCCC"> we'll compress it and we'll store</font>

991
00:39:50,430 --> 00:39:54,149
<font color="#E5E5E5">it out of line so you have to be aware</font>

992
00:39:52,620 --> 00:39:56,460
<font color="#CCCCCC">of that</font><font color="#E5E5E5"> when you're working</font><font color="#CCCCCC"> with datums</font>

993
00:39:54,150 --> 00:39:58,170
if you try to go act as some datum you

994
00:39:56,460 --> 00:40:00,090
need a first check and<font color="#E5E5E5"> see has it been</font>

995
00:39:58,170 --> 00:40:01,890
toasted do I need to do anything<font color="#CCCCCC"> to deal</font>

996
00:40:00,090 --> 00:40:05,190
<font color="#E5E5E5">with the fact that it's been toasted so</font>

997
00:40:01,890 --> 00:40:07,890
be aware of<font color="#E5E5E5"> that tuples are then rose</font>

998
00:40:05,190 --> 00:40:10,860
right tuples are datums that are all

999
00:40:07,890 --> 00:40:12,990
<font color="#CCCCCC">shoved together inside of a row</font><font color="#E5E5E5"> heap</font>

1000
00:40:10,860 --> 00:40:17,190
tuple is<font color="#CCCCCC"> defined in include axis H tube</font>

1001
00:40:12,990 --> 00:40:19,140
<font color="#CCCCCC">dot H we have a heap tuple data</font><font color="#E5E5E5"> which is</font>

1002
00:40:17,190 --> 00:40:21,630
an in-memory construct of a heap tuple

1003
00:40:19,140 --> 00:40:23,580
<font color="#E5E5E5">and that includes a length of the tuple</font>

1004
00:40:21,630 --> 00:40:25,530
and<font color="#E5E5E5"> a pointer to the actual header and</font>

1005
00:40:23,580 --> 00:40:28,049
then we can use<font color="#CCCCCC"> these</font><font color="#E5E5E5"> in a lot</font><font color="#CCCCCC"> of</font>

1006
00:40:25,530 --> 00:40:29,280
<font color="#E5E5E5">different places so be aware of that</font><font color="#CCCCCC"> in</font>

1007
00:40:28,050 --> 00:40:30,900
particular<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have what's</font><font color="#E5E5E5"> called a</font>

1008
00:40:29,280 --> 00:40:33,030
minimal tuple structure that's<font color="#E5E5E5"> what we</font>

1009
00:40:30,900 --> 00:40:34,260
use<font color="#CCCCCC"> for hashing right</font><font color="#E5E5E5"> so if you want to</font>

1010
00:40:33,030 --> 00:40:36,600
hash something<font color="#E5E5E5"> you typically don't want</font>

1011
00:40:34,260 --> 00:40:38,460
<font color="#CCCCCC">to</font><font color="#E5E5E5"> necessarily hash the entire row right</font>

1012
00:40:36,600 --> 00:40:41,040
so instead<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> something smaller</font>

1013
00:40:38,460 --> 00:40:45,020
<font color="#E5E5E5">that allows us to</font><font color="#CCCCCC"> build up just what we</font>

1014
00:40:41,040 --> 00:40:45,020
need in order<font color="#E5E5E5"> to pull the</font>

1015
00:40:45,089 --> 00:40:52,558
put together the<font color="#CCCCCC"> hash-table all right</font>

1016
00:40:50,059 --> 00:40:54,589
<font color="#E5E5E5">running</font><font color="#CCCCCC"> low a bit of on time</font><font color="#E5E5E5"> here so I'm</font>

1017
00:40:52,559 --> 00:40:57,449
just<font color="#CCCCCC"> gonna kind of skip through this</font>

1018
00:40:54,589 --> 00:40:58,558
<font color="#E5E5E5">this is how a tuple itself is</font><font color="#CCCCCC"> actually</font>

1019
00:40:57,449 --> 00:41:00,809
defined<font color="#E5E5E5"> it has a</font><font color="#CCCCCC"> number of attributes</font>

1020
00:40:58,559 --> 00:41:03,479
<font color="#CCCCCC">some flags</font><font color="#E5E5E5"> and then the data follows the</font>

1021
00:41:00,809 --> 00:41:05,609
header we have a number<font color="#E5E5E5"> of other</font>

1022
00:41:03,479 --> 00:41:07,408
<font color="#E5E5E5">subsystems so I'm just gonna kind of hit</font>

1023
00:41:05,609 --> 00:41:09,299
on<font color="#E5E5E5"> these but</font><font color="#CCCCCC"> just realize that this is</font>

1024
00:41:07,409 --> 00:41:10,559
stuff that<font color="#E5E5E5"> like don't go</font><font color="#CCCCCC"> implement</font>

1025
00:41:09,299 --> 00:41:12,989
another<font color="#E5E5E5"> one of these when you're hacking</font>

1026
00:41:10,559 --> 00:41:14,099
<font color="#E5E5E5">on postgrads we have enough of them</font><font color="#CCCCCC"> for</font>

1027
00:41:12,989 --> 00:41:17,099
example<font color="#CCCCCC"> we have a linked list</font>

1028
00:41:14,099 --> 00:41:18,719
implementation then we have a doubly and

1029
00:41:17,099 --> 00:41:21,029
another single<font color="#E5E5E5"> linked list</font>

1030
00:41:18,719 --> 00:41:23,339
implementation we<font color="#CCCCCC"> have a binary heap</font>

1031
00:41:21,029 --> 00:41:25,739
ammunition<font color="#E5E5E5"> we have something for solving</font>

1032
00:41:23,339 --> 00:41:28,049
the knapsack problem<font color="#CCCCCC"> right</font><font color="#E5E5E5"> we have red</font>

1033
00:41:25,739 --> 00:41:30,209
black trees<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have string</font><font color="#CCCCCC"> handling</font>

1034
00:41:28,049 --> 00:41:31,769
<font color="#E5E5E5">right we have all</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> things</font>

1035
00:41:30,209 --> 00:41:35,038
already<font color="#CCCCCC"> written inside of the</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> end</font>

1036
00:41:31,769 --> 00:41:37,379
<font color="#E5E5E5">code so</font><font color="#CCCCCC"> don't add another one go see if</font>

1037
00:41:35,039 --> 00:41:39,749
you can't use what's there when you are

1038
00:41:37,380 --> 00:41:42,239
<font color="#CCCCCC">hacking the postgrads way you need</font><font color="#E5E5E5"> to be</font>

1039
00:41:39,749 --> 00:41:43,709
<font color="#CCCCCC">working</font><font color="#E5E5E5"> with the PG SQL hackers mailing</font>

1040
00:41:42,239 --> 00:41:45,509
<font color="#E5E5E5">lists this is the primary mailing list</font>

1041
00:41:43,709 --> 00:41:47,729
<font color="#E5E5E5">for discussion about postgrads</font>

1042
00:41:45,509 --> 00:41:49,890
development right<font color="#E5E5E5"> you need to get an</font>

1043
00:41:47,729 --> 00:41:52,379
account at list dot<font color="#CCCCCC"> PostgreSQL dot org</font>

1044
00:41:49,890 --> 00:41:53,729
in order to subscribe to<font color="#E5E5E5"> it and then you</font>

1045
00:41:52,380 --> 00:41:55,769
can discuss<font color="#CCCCCC"> your</font><font color="#E5E5E5"> ideas and</font><font color="#CCCCCC"> thoughts</font>

1046
00:41:53,729 --> 00:41:58,259
about how you want to improve<font color="#E5E5E5"> postgrads</font>

1047
00:41:55,769 --> 00:42:00,149
<font color="#E5E5E5">right always watch out for other people</font>

1048
00:41:58,259 --> 00:42:03,719
<font color="#CCCCCC">working on similar things because</font><font color="#E5E5E5"> that</font>

1049
00:42:00,150 --> 00:42:05,729
actually<font color="#E5E5E5"> happens pretty often</font><font color="#CCCCCC"> try to</font>

1050
00:42:03,719 --> 00:42:07,589
think<font color="#E5E5E5"> about general answers not specific</font>

1051
00:42:05,729 --> 00:42:09,598
ones right and be supportive of other

1052
00:42:07,589 --> 00:42:12,509
<font color="#E5E5E5">ideas and approaches so what happened</font>

1053
00:42:09,599 --> 00:42:14,699
with this copy compressed feature<font color="#E5E5E5"> well</font>

1054
00:42:12,509 --> 00:42:17,189
<font color="#E5E5E5">somebody wrote a feature called copy</font>

1055
00:42:14,699 --> 00:42:18,839
<font color="#CCCCCC">program which will actually</font><font color="#E5E5E5"> send and</font>

1056
00:42:17,189 --> 00:42:20,969
receive data<font color="#CCCCCC"> from a program and</font><font color="#E5E5E5"> that</font>

1057
00:42:18,839 --> 00:42:25,078
<font color="#CCCCCC">program could happen to be like gzip</font>

1058
00:42:20,969 --> 00:42:28,049
<font color="#E5E5E5">right or guns if or maybe</font><font color="#CCCCCC"> b zip - if you</font>

1059
00:42:25,079 --> 00:42:30,029
<font color="#E5E5E5">wanted to do that so it's not quite</font>

1060
00:42:28,049 --> 00:42:32,219
<font color="#E5E5E5">identical but there ends up</font><font color="#CCCCCC"> being a lot</font>

1061
00:42:30,029 --> 00:42:34,289
<font color="#E5E5E5">of overlap</font><font color="#CCCCCC"> between what copy could do</font>

1062
00:42:32,219 --> 00:42:37,079
what copy compress could do and what

1063
00:42:34,289 --> 00:42:39,089
copy program<font color="#E5E5E5"> could do so in the end we</font>

1064
00:42:37,079 --> 00:42:40,799
<font color="#E5E5E5">went with using copy</font><font color="#CCCCCC"> program because it</font>

1065
00:42:39,089 --> 00:42:42,299
<font color="#E5E5E5">was more generalized and allowed you</font>

1066
00:42:40,799 --> 00:42:44,699
more flexibility<font color="#E5E5E5"> in what you wanted to</font>

1067
00:42:42,299 --> 00:42:48,929
do and it<font color="#E5E5E5"> also meant</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we didn't have</font>

1068
00:42:44,699 --> 00:42:51,269
to<font color="#E5E5E5"> have direct</font><font color="#CCCCCC"> Z live like GZ file and</font>

1069
00:42:48,929 --> 00:42:53,640
and you know things like GZ read and GZ

1070
00:42:51,269 --> 00:42:56,758
right<font color="#E5E5E5"> go into</font><font color="#CCCCCC"> the system and it was</font><font color="#E5E5E5"> nice</font>

1071
00:42:53,640 --> 00:42:58,049
to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to avoid</font><font color="#CCCCCC"> that whenever</font><font color="#E5E5E5"> you're</font>

1072
00:42:56,759 --> 00:42:58,589
working<font color="#CCCCCC"> with</font><font color="#E5E5E5"> postgrads think about your</font>

1073
00:42:58,049 --> 00:43:01,410
code

1074
00:42:58,589 --> 00:43:03,719
I'll try to make<font color="#E5E5E5"> your code fit in PG</font>

1075
00:43:01,410 --> 00:43:07,410
style<font color="#CCCCCC"> guide is in the developer</font><font color="#E5E5E5"> fact be</font>

1076
00:43:03,719 --> 00:43:10,499
aware of<font color="#E5E5E5"> any copy and paste</font><font color="#CCCCCC"> we try</font><font color="#E5E5E5"> to be</font>

1077
00:43:07,410 --> 00:43:13,078
<font color="#CCCCCC">c99</font><font color="#E5E5E5"> actually we in some ways go back to</font>

1078
00:43:10,499 --> 00:43:16,319
like<font color="#CCCCCC"> C 89 but the the standard today</font><font color="#E5E5E5"> is</font>

1079
00:43:13,079 --> 00:43:19,799
more<font color="#E5E5E5"> or less c 99 compliance right with</font>

1080
00:43:16,319 --> 00:43:22,519
some caveats<font color="#CCCCCC"> we only use</font><font color="#E5E5E5"> c style</font>

1081
00:43:19,799 --> 00:43:24,599
comments we don't do c++ style comments

1082
00:43:22,519 --> 00:43:26,189
<font color="#E5E5E5">generally you want to</font><font color="#CCCCCC"> have comments on</font>

1083
00:43:24,599 --> 00:43:28,289
their own independent line we're not a

1084
00:43:26,190 --> 00:43:31,710
big fan of<font color="#E5E5E5"> having like an inline comment</font>

1085
00:43:28,289 --> 00:43:36,180
<font color="#CCCCCC">on the same line as code</font><font color="#E5E5E5"> always describe</font>

1086
00:43:31,710 --> 00:43:37,680
why not how right we can we can see what

1087
00:43:36,180 --> 00:43:39,930
the code<font color="#E5E5E5"> is doing</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to know why is</font>

1088
00:43:37,680 --> 00:43:43,259
the code<font color="#E5E5E5"> doing this right that's what</font>

1089
00:43:39,930 --> 00:43:45,629
really ends<font color="#E5E5E5"> up mattering here</font><font color="#CCCCCC"> to us we</font>

1090
00:43:43,259 --> 00:43:47,519
use a larger comment block for larger

1091
00:43:45,630 --> 00:43:49,859
code blocks of course and in particular

1092
00:43:47,519 --> 00:43:51,749
<font color="#E5E5E5">comment your functions and tell</font><font color="#CCCCCC"> people</font>

1093
00:43:49,859 --> 00:43:55,920
why they<font color="#CCCCCC"> should use</font><font color="#E5E5E5"> this function and</font>

1094
00:43:51,749 --> 00:43:57,689
what the<font color="#E5E5E5"> function does when it comes to</font>

1095
00:43:55,920 --> 00:43:59,279
the error message smile<font color="#E5E5E5"> ah style there's</font>

1096
00:43:57,690 --> 00:44:00,960
three main parts there's a<font color="#E5E5E5"> primary</font>

1097
00:43:59,279 --> 00:44:03,269
message<font color="#CCCCCC"> a</font><font color="#E5E5E5"> detail information and then a</font>

1098
00:44:00,960 --> 00:44:06,359
hint if appropriate<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> make any</font>

1099
00:44:03,269 --> 00:44:08,700
assumptions<font color="#E5E5E5"> about the formatting</font><font color="#CCCCCC"> use</font>

1100
00:44:06,359 --> 00:44:10,890
<font color="#E5E5E5">double quotes when quoting</font><font color="#CCCCCC"> and then</font>

1101
00:44:08,700 --> 00:44:13,950
quotes for<font color="#CCCCCC"> filenames user identifier z'</font>

1102
00:44:10,890 --> 00:44:17,098
and other variables<font color="#CCCCCC"> try to</font><font color="#E5E5E5"> avoid using</font>

1103
00:44:13,950 --> 00:44:19,259
<font color="#CCCCCC">passive voice postgrads does not</font>

1104
00:44:17,099 --> 00:44:22,079
consider<font color="#E5E5E5"> itself to be a human so use</font>

1105
00:44:19,259 --> 00:44:23,999
active voice when you want<font color="#E5E5E5"> to submit</font>

1106
00:44:22,079 --> 00:44:26,460
your patch<font color="#CCCCCC"> you should be using contacts</font>

1107
00:44:23,999 --> 00:44:29,218
<font color="#CCCCCC">TIFF or get diff</font><font color="#E5E5E5"> ideally just pick</font>

1108
00:44:26,460 --> 00:44:31,589
whichever one<font color="#E5E5E5"> makes makes it better we</font>

1109
00:44:29,219 --> 00:44:34,249
use multiple patches in one email don't

1110
00:44:31,589 --> 00:44:36,630
multi email we're not the<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> kernel</font>

1111
00:44:34,249 --> 00:44:38,430
<font color="#CCCCCC">include in your</font><font color="#E5E5E5"> email to hackers</font><font color="#CCCCCC"> a</font>

1112
00:44:36,630 --> 00:44:40,920
description of the patch regression test

1113
00:44:38,430 --> 00:44:42,989
documentation updates<font color="#E5E5E5"> PG</font><font color="#CCCCCC"> dumps support</font>

1114
00:44:40,920 --> 00:44:45,269
in particular is something<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> really</font>

1115
00:44:42,989 --> 00:44:47,069
key when you're hacking<font color="#CCCCCC"> on</font><font color="#E5E5E5"> postcards</font><font color="#CCCCCC"> and</font>

1116
00:44:45,269 --> 00:44:48,839
then register<font color="#CCCCCC"> your patch on this thing</font>

1117
00:44:47,069 --> 00:44:51,150
called<font color="#E5E5E5"> commit fessed up</font><font color="#CCCCCC"> PostgreSQL about</font>

1118
00:44:48,839 --> 00:44:52,469
org<font color="#E5E5E5"> right this is where we track what</font>

1119
00:44:51,150 --> 00:44:53,880
patches have<font color="#E5E5E5"> been submitted if your</font>

1120
00:44:52,469 --> 00:44:56,130
patch<font color="#CCCCCC"> is not on</font><font color="#E5E5E5"> here we probably aren't</font>

1121
00:44:53,880 --> 00:44:58,259
looking at<font color="#E5E5E5"> it we have a number of</font>

1122
00:44:56,130 --> 00:45:00,690
<font color="#E5E5E5">upcoming</font><font color="#CCCCCC"> events these</font><font color="#E5E5E5"> are postcards</font>

1123
00:44:58,259 --> 00:45:02,339
community events<font color="#CCCCCC"> +</font><font color="#E5E5E5"> Voss Asia which I'll</font>

1124
00:45:00,690 --> 00:45:03,359
be at so if you're<font color="#E5E5E5"> interested check</font>

1125
00:45:02,339 --> 00:45:04,680
these out

1126
00:45:03,359 --> 00:45:07,140
there's a number<font color="#E5E5E5"> of them they're</font><font color="#CCCCCC"> even</font>

1127
00:45:04,680 --> 00:45:09,419
<font color="#E5E5E5">relatively local albeit scale</font>

1128
00:45:07,140 --> 00:45:11,900
I'll be at Foss Asia<font color="#CCCCCC"> I'll be at</font><font color="#E5E5E5"> Pt conf</font>

1129
00:45:09,420 --> 00:45:13,549
<font color="#CCCCCC">a</font><font color="#E5E5E5"> pack and I'll be at PG con</font>

1130
00:45:11,900 --> 00:45:15,589
so when it comes<font color="#E5E5E5"> to the big kind of</font>

1131
00:45:13,549 --> 00:45:18,849
annual<font color="#E5E5E5"> postcards hacker meeting thing</font>

1132
00:45:15,589 --> 00:45:22,660
that's<font color="#CCCCCC"> at PG con that's</font><font color="#E5E5E5"> an Ottawa Canada</font>

1133
00:45:18,849 --> 00:45:22,660
<font color="#CCCCCC">all right questions</font>

1134
00:45:23,740 --> 00:45:31,799
[Applause]

1135
00:45:32,930 --> 00:45:39,859
no questions fantastic thank you all you

1136
00:45:37,170 --> 00:45:42,360
<font color="#E5E5E5">guys been fantastic audience thank you</font>

1137
00:45:39,860 --> 00:45:44,430
<font color="#E5E5E5">exit out this way so if you are leaving</font>

1138
00:45:42,360 --> 00:45:46,700
<font color="#E5E5E5">the</font><font color="#CCCCCC"> room please use this door</font><font color="#E5E5E5"> exit this</font>

1139
00:45:44,430 --> 00:45:46,700
way

