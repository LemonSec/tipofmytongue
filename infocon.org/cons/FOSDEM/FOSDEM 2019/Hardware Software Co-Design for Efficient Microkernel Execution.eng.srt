1
00:00:21,660 --> 00:00:29,119
so shall we<font color="#CCCCCC"> start I have my own</font>

2
00:00:39,270 --> 00:00:51,670
<font color="#E5E5E5">okay our next is Martin Dickie not this</font>

3
00:00:46,629 --> 00:00:58,540
year<font color="#E5E5E5"> I already did at the risk</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> the</font>

4
00:00:51,670 --> 00:01:00,610
<font color="#E5E5E5">room</font><font color="#CCCCCC"> actually yes</font>

5
00:00:58,540 --> 00:01:03,280
thanks for the introduction thank<font color="#E5E5E5"> you</font>

6
00:01:00,610 --> 00:01:07,450
all for coming<font color="#CCCCCC"> and when I'm mentioning</font>

7
00:01:03,280 --> 00:01:10,300
it I mean most of<font color="#E5E5E5"> the talk will be about</font>

8
00:01:07,450 --> 00:01:12,729
<font color="#E5E5E5">the same topic I have</font><font color="#CCCCCC"> already spoken</font>

9
00:01:10,300 --> 00:01:15,100
about the risk<font color="#CCCCCC"> well double room so if</font>

10
00:01:12,729 --> 00:01:17,619
you have seen that<font color="#E5E5E5"> there is no reason</font>

11
00:01:15,100 --> 00:01:20,679
for<font color="#CCCCCC"> you to see see it again</font><font color="#E5E5E5"> unless</font><font color="#CCCCCC"> you</font>

12
00:01:17,619 --> 00:01:23,979
<font color="#E5E5E5">would</font><font color="#CCCCCC"> like to discuss and again this is</font>

13
00:01:20,680 --> 00:01:26,530
as<font color="#CCCCCC"> usual</font><font color="#E5E5E5"> this is this something I</font><font color="#CCCCCC"> always</font>

14
00:01:23,979 --> 00:01:29,259
do more<font color="#E5E5E5"> less like an opinion piece to</font>

15
00:01:26,530 --> 00:01:32,410
spark some discussions so Lisa<font color="#CCCCCC"> hats</font>

16
00:01:29,259 --> 00:01:34,240
<font color="#CCCCCC">please</font><font color="#E5E5E5"> go ahead and disagree with me</font><font color="#CCCCCC"> so</font>

17
00:01:32,410 --> 00:01:37,179
for those<font color="#CCCCCC"> who</font><font color="#E5E5E5"> don't know me I've been</font>

18
00:01:34,240 --> 00:01:40,419
working in operating system domain for

19
00:01:37,179 --> 00:01:43,509
some<font color="#E5E5E5"> some time I have been working on</font>

20
00:01:40,420 --> 00:01:45,250
the<font color="#CCCCCC"> halle newest project since 2004 I</font>

21
00:01:43,509 --> 00:01:48,160
have been working at the Charles

22
00:01:45,250 --> 00:01:51,369
University in Prague on<font color="#CCCCCC"> formal</font>

23
00:01:48,160 --> 00:01:54,640
verification of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> Innovas and quite</font>

24
00:01:51,369 --> 00:01:57,220
<font color="#E5E5E5">recently I mean not longer than two</font>

25
00:01:54,640 --> 00:02:00,459
years<font color="#CCCCCC"> ago I have joined</font><font color="#E5E5E5"> well they where</font>

26
00:01:57,220 --> 00:02:04,349
I'm doing<font color="#CCCCCC"> the same stuff</font><font color="#E5E5E5"> microkernels</font>

27
00:02:00,459 --> 00:02:07,920
<font color="#E5E5E5">and formal verification</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> like that</font>

28
00:02:04,349 --> 00:02:10,149
<font color="#E5E5E5">so I would</font><font color="#CCCCCC"> like to tell you</font><font color="#E5E5E5"> that</font>

29
00:02:07,920 --> 00:02:12,520
<font color="#E5E5E5">microkernel multi server systems are</font>

30
00:02:10,149 --> 00:02:16,980
better than monolithic systems<font color="#E5E5E5"> that's it</font>

31
00:02:12,520 --> 00:02:20,500
thank<font color="#E5E5E5"> you no really</font><font color="#CCCCCC"> seriously</font><font color="#E5E5E5"> I mean</font>

32
00:02:16,980 --> 00:02:22,720
this has been<font color="#E5E5E5"> I would</font><font color="#CCCCCC"> say an in-form</font>

33
00:02:20,500 --> 00:02:26,980
<font color="#CCCCCC">opinion of many people for many many</font>

34
00:02:22,720 --> 00:02:28,720
years<font color="#E5E5E5"> and gradually we got some I would</font>

35
00:02:26,980 --> 00:02:32,290
<font color="#E5E5E5">say qualitative evidence that this</font>

36
00:02:28,720 --> 00:02:34,930
statement is<font color="#E5E5E5"> true but I mean qualitative</font>

37
00:02:32,290 --> 00:02:38,440
<font color="#E5E5E5">evidence is still just basically a form</font>

38
00:02:34,930 --> 00:02:41,290
of<font color="#E5E5E5"> a point of an opinion now we are</font>

39
00:02:38,440 --> 00:02:43,270
<font color="#E5E5E5">gradually also getting quantitative</font>

40
00:02:41,290 --> 00:02:46,179
<font color="#E5E5E5">evidence that the monolithic operating</font>

41
00:02:43,270 --> 00:02:47,640
system design is<font color="#E5E5E5"> flawed so you have</font>

42
00:02:46,180 --> 00:02:50,680
probably noticed there<font color="#CCCCCC"> is this paper</font>

43
00:02:47,640 --> 00:02:53,099
co-authored by our friend<font color="#E5E5E5"> Arnold Heiser</font>

44
00:02:50,680 --> 00:02:56,610
who has been

45
00:02:53,099 --> 00:03:02,079
<font color="#CCCCCC">we had the</font><font color="#E5E5E5"> privilege to see today and</font>

46
00:02:56,610 --> 00:03:05,500
this paper<font color="#CCCCCC"> basically looked on several</font>

47
00:03:02,080 --> 00:03:09,330
critical vulnerabilities in doing Linda

48
00:03:05,500 --> 00:03:13,239
<font color="#CCCCCC">UNIX kernel</font><font color="#E5E5E5"> and tried to try to estimate</font>

49
00:03:09,330 --> 00:03:17,260
if this these vulnerabilities would have

50
00:03:13,239 --> 00:03:21,580
been mitigated<font color="#CCCCCC"> if there were if we would</font>

51
00:03:17,260 --> 00:03:24,970
<font color="#E5E5E5">consider a state-of-the-art microkernel</font>

52
00:03:21,580 --> 00:03:27,040
design such as<font color="#E5E5E5"> a CL 4 and yeah I mean</font>

53
00:03:24,970 --> 00:03:29,019
you<font color="#E5E5E5"> can read a summary</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> you can read</font>

54
00:03:27,040 --> 00:03:32,109
the entire<font color="#E5E5E5"> paper and it's pretty much</font>

55
00:03:29,019 --> 00:03:34,510
convincing<font color="#E5E5E5"> so I mean this is this</font><font color="#CCCCCC"> is a</font>

56
00:03:32,110 --> 00:03:36,579
single<font color="#CCCCCC"> piece of</font><font color="#E5E5E5"> evidence that we</font><font color="#CCCCCC"> are</font>

57
00:03:34,510 --> 00:03:38,349
getting<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the right direction we are</font>

58
00:03:36,579 --> 00:03:42,640
<font color="#E5E5E5">going</font><font color="#CCCCCC"> in the right direction with with</font>

59
00:03:38,349 --> 00:03:46,328
<font color="#E5E5E5">microcar</font><font color="#CCCCCC"> Mo's but and this brings me</font>

60
00:03:42,640 --> 00:03:49,569
back to<font color="#E5E5E5"> my</font><font color="#CCCCCC"> original talk at FOSDEM</font>

61
00:03:46,329 --> 00:03:53,290
microkernel double room in 2012 we are

62
00:03:49,569 --> 00:03:55,810
<font color="#E5E5E5">paying some price the price is with the</font>

63
00:03:53,290 --> 00:03:57,760
performance overhead<font color="#E5E5E5"> and if you if you</font>

64
00:03:55,810 --> 00:04:00,639
were there if you<font color="#E5E5E5"> remember remember my</font>

65
00:03:57,760 --> 00:04:04,239
joke<font color="#CCCCCC"> I said that it's a it's a fair</font>

66
00:04:00,639 --> 00:04:06,970
price<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to my opinion so I mean</font>

67
00:04:04,239 --> 00:04:09,519
there<font color="#E5E5E5"> is no free lunch</font><font color="#CCCCCC"> but you know the</font>

68
00:04:06,970 --> 00:04:11,350
<font color="#E5E5E5">safety security availability other</font>

69
00:04:09,519 --> 00:04:16,298
guarantees that the microkernel provides

70
00:04:11,350 --> 00:04:19,649
<font color="#E5E5E5">are you know counterweighted by by some</font>

71
00:04:16,298 --> 00:04:23,679
performance overhead<font color="#E5E5E5"> that we need to pay</font>

72
00:04:19,649 --> 00:04:28,659
but is it really is it really<font color="#E5E5E5"> necessary</font>

73
00:04:23,680 --> 00:04:32,169
is<font color="#CCCCCC"> it really unavoidable let's look on</font>

74
00:04:28,660 --> 00:04:35,550
on this the microkernel<font color="#E5E5E5"> ideas are not</font>

75
00:04:32,169 --> 00:04:42,150
particularly<font color="#E5E5E5"> new I</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> their earliest</font>

76
00:04:35,550 --> 00:04:46,150
incarnations were already set in 1969

77
00:04:42,150 --> 00:04:48,190
but you know there was and there is

78
00:04:46,150 --> 00:04:50,109
still some disconnect between the

79
00:04:48,190 --> 00:04:52,630
software design and<font color="#E5E5E5"> the hardware design</font>

80
00:04:50,110 --> 00:04:55,389
designing<font color="#E5E5E5"> hardware used to be</font>

81
00:04:52,630 --> 00:04:58,360
complicated<font color="#CCCCCC"> expensive</font><font color="#E5E5E5"> in recovery</font>

82
00:04:55,389 --> 00:05:03,760
<font color="#CCCCCC">usually required a huge company to back</font>

83
00:04:58,360 --> 00:05:06,129
it and you know<font color="#E5E5E5"> therefore the operating</font>

84
00:05:03,760 --> 00:05:08,349
systems have been written

85
00:05:06,129 --> 00:05:12,279
for the<font color="#CCCCCC"> CPUs only after the CPUs were</font>

86
00:05:08,349 --> 00:05:14,649
out so not not not before I mean even

87
00:05:12,279 --> 00:05:15,339
having a powerful emulation tools like

88
00:05:14,649 --> 00:05:17,709
<font color="#E5E5E5">um</font><font color="#CCCCCC"> ooh</font>

89
00:05:15,339 --> 00:05:23,469
stuff like that that<font color="#E5E5E5"> that was not always</font>

90
00:05:17,709 --> 00:05:27,550
available<font color="#CCCCCC"> so you know something happened</font>

91
00:05:23,469 --> 00:05:31,269
that the hardware designs<font color="#CCCCCC"> got stuck in</font>

92
00:05:27,550 --> 00:05:32,619
in<font color="#E5E5E5"> certain ways</font><font color="#CCCCCC"> I mean really</font><font color="#E5E5E5"> try to</font>

93
00:05:31,269 --> 00:05:34,869
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about something rebel</font>

94
00:05:32,619 --> 00:05:37,389
revolutionary and in hardware design

95
00:05:34,869 --> 00:05:40,059
that hasn't been<font color="#E5E5E5"> there already in IBM</font><font color="#CCCCCC"> s</font>

96
00:05:37,389 --> 00:05:42,429
<font color="#CCCCCC">some 370 I mean</font>

97
00:05:40,059 --> 00:05:45,759
memory<font color="#E5E5E5"> management</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> there</font>

98
00:05:42,429 --> 00:05:48,659
virtualization<font color="#CCCCCC"> it was there i om mu it</font>

99
00:05:45,759 --> 00:05:51,399
was there offloading<font color="#CCCCCC"> you know</font>

100
00:05:48,659 --> 00:05:54,580
computations<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two dedicated hardware</font>

101
00:05:51,399 --> 00:05:58,449
devices<font color="#E5E5E5"> I'm talking about you know</font>

102
00:05:54,580 --> 00:06:00,878
<font color="#CCCCCC">so-called date action also how</font><font color="#E5E5E5"> I don't</font>

103
00:05:58,449 --> 00:06:02,919
remember it was there already<font color="#E5E5E5"> so there</font>

104
00:06:00,879 --> 00:06:05,889
is nothing<font color="#CCCCCC"> new Under</font><font color="#E5E5E5"> the Sun and the</font>

105
00:06:02,919 --> 00:06:09,549
problem is<font color="#E5E5E5"> that microkernel suffer</font>

106
00:06:05,889 --> 00:06:12,039
<font color="#E5E5E5">because you</font><font color="#CCCCCC"> know the</font><font color="#E5E5E5"> the the current</font>

107
00:06:09,550 --> 00:06:14,919
<font color="#E5E5E5">hardware is being designed for the</font>

108
00:06:12,039 --> 00:06:16,748
monolithic kernels in mind or we've<font color="#E5E5E5"> done</font>

109
00:06:14,919 --> 00:06:20,169
<font color="#E5E5E5">one or two monolithic kernels in mind</font>

110
00:06:16,749 --> 00:06:22,659
<font color="#E5E5E5">and therefore we need to pay the</font>

111
00:06:20,169 --> 00:06:24,308
performance<font color="#CCCCCC"> panel penalties due to the</font>

112
00:06:22,659 --> 00:06:27,188
<font color="#E5E5E5">fine</font><font color="#CCCCCC"> grained design due to the need of</font>

113
00:06:24,309 --> 00:06:29,919
crossing forcing the address space

114
00:06:27,189 --> 00:06:32,919
barriers due to the IPC mechanisms and

115
00:06:29,919 --> 00:06:37,779
stuff like that<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to change</font>

116
00:06:32,919 --> 00:06:39,789
it let's<font color="#E5E5E5"> try to design the</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> in a</font>

117
00:06:37,779 --> 00:06:41,889
better way or<font color="#E5E5E5"> in a way that is more</font>

118
00:06:39,789 --> 00:06:44,110
suitable for for for the requirements of

119
00:06:41,889 --> 00:06:45,729
the microkernel systems<font color="#CCCCCC"> I really think</font>

120
00:06:44,110 --> 00:06:49,869
that there<font color="#CCCCCC"> is this vicious cycle that</font>

121
00:06:45,729 --> 00:06:52,990
the<font color="#E5E5E5"> CPUs currently don't support the</font>

122
00:06:49,869 --> 00:06:54,819
micro kernels properly<font color="#E5E5E5"> therefore micro</font>

123
00:06:52,990 --> 00:06:56,979
<font color="#E5E5E5">kernels suffer performance penalties</font>

124
00:06:54,819 --> 00:06:59,519
when running<font color="#CCCCCC"> condemned compared to to</font>

125
00:06:56,979 --> 00:07:02,289
the more monolithic systems<font color="#E5E5E5"> therefore</font>

126
00:06:59,519 --> 00:07:05,800
<font color="#E5E5E5">micro kernels are still not considered</font>

127
00:07:02,289 --> 00:07:08,289
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know the true mainstream</font><font color="#E5E5E5"> I mean yes</font>

128
00:07:05,800 --> 00:07:10,179
we<font color="#CCCCCC"> have them on safety critical and</font>

129
00:07:08,289 --> 00:07:13,959
<font color="#E5E5E5">mission-critical devices we have them</font>

130
00:07:10,179 --> 00:07:17,109
maybe in some<font color="#E5E5E5"> embedded devices but yeah</font>

131
00:07:13,959 --> 00:07:19,480
you can<font color="#E5E5E5"> have Mike OS which</font><font color="#CCCCCC"> is running on</font>

132
00:07:17,110 --> 00:07:22,210
<font color="#E5E5E5">Mac but</font><font color="#CCCCCC"> justice</font>

133
00:07:19,480 --> 00:07:24,310
<font color="#E5E5E5">single-server microkernel but still you</font>

134
00:07:22,210 --> 00:07:26,260
know we are<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about Linux and we</font>

135
00:07:24,310 --> 00:07:27,880
are<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about making Glen Oaks more</font>

136
00:07:26,260 --> 00:07:30,280
secure and stuff<font color="#E5E5E5"> like that which</font><font color="#CCCCCC"> is</font>

137
00:07:27,880 --> 00:07:32,290
crazy<font color="#E5E5E5"> I mean the only way how to make</font>

138
00:07:30,280 --> 00:07:37,840
<font color="#E5E5E5">links more secure is throwing</font><font color="#CCCCCC"> in</font>

139
00:07:32,290 --> 00:07:40,900
<font color="#CCCCCC">throwing it out and since the Linux</font><font color="#E5E5E5"> is</font>

140
00:07:37,840 --> 00:07:43,570
the micro kernels are still not in<font color="#CCCCCC"> the</font>

141
00:07:40,900 --> 00:07:45,820
mainstream<font color="#CCCCCC"> there is no strong push on</font>

142
00:07:43,570 --> 00:07:49,090
the hardware manufacturers to actually

143
00:07:45,820 --> 00:07:51,640
provide CPUs with proper microbial

144
00:07:49,090 --> 00:07:53,919
support and this closes<font color="#CCCCCC"> the vicious</font>

145
00:07:51,640 --> 00:07:58,120
cycle<font color="#CCCCCC"> well there has been a lot of</font>

146
00:07:53,920 --> 00:08:01,060
effort spent on on this box already<font color="#E5E5E5"> I</font>

147
00:07:58,120 --> 00:08:03,580
<font color="#E5E5E5">mean for the past 25 years people have</font>

148
00:08:01,060 --> 00:08:07,030
<font color="#CCCCCC">been trying to</font><font color="#E5E5E5"> squeeze out every single</font>

149
00:08:03,580 --> 00:08:11,050
<font color="#E5E5E5">CPU cycle from their microkernel code to</font>

150
00:08:07,030 --> 00:08:13,419
make the IPC<font color="#E5E5E5"> run as as smoothly and</font><font color="#CCCCCC"> ask</font>

151
00:08:11,050 --> 00:08:16,300
as quickly as possible<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it was given</font>

152
00:08:13,420 --> 00:08:20,290
given the<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> limitations of the</font>

153
00:08:16,300 --> 00:08:22,150
hardware they had so so and I mean we

154
00:08:20,290 --> 00:08:23,500
have been<font color="#E5E5E5"> trying on this</font><font color="#CCCCCC"> too right I</font>

155
00:08:22,150 --> 00:08:26,049
mean this is the reason why we<font color="#CCCCCC"> are</font>

156
00:08:23,500 --> 00:08:28,630
meeting<font color="#E5E5E5"> here so so now let's focus on</font>

157
00:08:26,050 --> 00:08:30,520
this part<font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> focus on on the</font>

158
00:08:28,630 --> 00:08:32,380
requirements on the hardware and<font color="#E5E5E5"> let's</font>

159
00:08:30,520 --> 00:08:34,329
focus on creating<font color="#E5E5E5"> better hardware to</font>

160
00:08:32,380 --> 00:08:36,659
support<font color="#CCCCCC"> our micro kernels</font><font color="#E5E5E5"> to finally get</font>

161
00:08:34,330 --> 00:08:39,370
rid<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> this trade-off between</font>

162
00:08:36,659 --> 00:08:40,750
<font color="#E5E5E5">safety and performance security</font><font color="#CCCCCC"> and</font>

163
00:08:39,370 --> 00:08:46,570
<font color="#CCCCCC">performance performance</font>

164
00:08:40,750 --> 00:08:49,390
<font color="#E5E5E5">I got some ideas</font><font color="#CCCCCC"> I have to say these are</font>

165
00:08:46,570 --> 00:08:51,190
<font color="#E5E5E5">very rough ideas and again this is</font>

166
00:08:49,390 --> 00:08:53,710
something<font color="#E5E5E5"> where I would like to spark</font>

167
00:08:51,190 --> 00:08:56,440
the discussion<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to spark you</font>

168
00:08:53,710 --> 00:08:58,540
know or inspire people<font color="#E5E5E5"> thinking about</font>

169
00:08:56,440 --> 00:09:03,820
<font color="#CCCCCC">the actual mechanisms that could be done</font>

170
00:08:58,540 --> 00:09:06,280
to to make this happen<font color="#CCCCCC"> and my ideas are</font>

171
00:09:03,820 --> 00:09:10,990
targeting you know the<font color="#E5E5E5"> obese culprits</font>

172
00:09:06,280 --> 00:09:15,010
like the IPC and context switching and

173
00:09:10,990 --> 00:09:17,530
stuff<font color="#E5E5E5"> like that so first</font><font color="#CCCCCC"> about the the</font>

174
00:09:15,010 --> 00:09:19,780
problem with<font color="#CCCCCC"> the IPC in the microkernel</font>

175
00:09:17,530 --> 00:09:23,170
<font color="#CCCCCC">multi-server systems</font><font color="#E5E5E5"> the final</font>

176
00:09:19,780 --> 00:09:25,000
architecture it is the better for for

177
00:09:23,170 --> 00:09:28,930
safety and security availability

178
00:09:25,000 --> 00:09:33,060
dependability<font color="#E5E5E5"> but you know the more</font><font color="#CCCCCC"> we</font>

179
00:09:28,930 --> 00:09:35,969
<font color="#E5E5E5">are paying due to the address space</font>

180
00:09:33,060 --> 00:09:39,780
<font color="#CCCCCC">we</font><font color="#E5E5E5"> need to move due to the need</font><font color="#CCCCCC"> to move</font>

181
00:09:35,970 --> 00:09:42,210
data between other spaces<font color="#E5E5E5"> so I mean the</font>

182
00:09:39,780 --> 00:09:44,850
<font color="#E5E5E5">III probably don't need to explain the</font>

183
00:09:42,210 --> 00:09:46,460
<font color="#E5E5E5">problem in very much detail but compared</font>

184
00:09:44,850 --> 00:09:48,510
to<font color="#E5E5E5"> the model</font><font color="#CCCCCC"> the kernels were</font>

185
00:09:46,460 --> 00:09:51,900
communication between<font color="#CCCCCC"> substance</font>

186
00:09:48,510 --> 00:09:54,569
subsystems is just a<font color="#CCCCCC"> function call</font><font color="#E5E5E5"> in in</font>

187
00:09:51,900 --> 00:09:57,510
a<font color="#CCCCCC"> micro or</font><font color="#E5E5E5"> multi server system like this</font>

188
00:09:54,570 --> 00:10:01,470
<font color="#E5E5E5">the same communication</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> implemented</font>

189
00:09:57,510 --> 00:10:04,710
via<font color="#E5E5E5"> IPC which means that we cannot use</font>

190
00:10:01,470 --> 00:10:07,500
all the registers for actually passing

191
00:10:04,710 --> 00:10:09,030
the arguments because some registers are

192
00:10:07,500 --> 00:10:13,110
reserved<font color="#CCCCCC"> for</font><font color="#E5E5E5"> something else</font>

193
00:10:09,030 --> 00:10:16,380
we<font color="#E5E5E5"> need to switch to the kernel level to</font>

194
00:10:13,110 --> 00:10:19,740
the kernel<font color="#E5E5E5"> privilege mode and switch the</font>

195
00:10:16,380 --> 00:10:21,840
address space and then switch back we

196
00:10:19,740 --> 00:10:23,760
potentially need to do some scheduling

197
00:10:21,840 --> 00:10:26,400
<font color="#CCCCCC">in</font><font color="#E5E5E5"> between and paste the</font><font color="#CCCCCC"> IPC's</font>

198
00:10:23,760 --> 00:10:29,610
asynchronous<font color="#E5E5E5"> of course this is not</font>

199
00:10:26,400 --> 00:10:31,290
necessary<font color="#E5E5E5"> and if we are moving larger</font>

200
00:10:29,610 --> 00:10:33,060
amounts of data we either need to<font color="#E5E5E5"> copy</font>

201
00:10:31,290 --> 00:10:34,920
them<font color="#CCCCCC"> between the other spaces or</font>

202
00:10:33,060 --> 00:10:37,739
establish some kind<font color="#E5E5E5"> of memory sharing</font>

203
00:10:34,920 --> 00:10:43,250
which again might be a little<font color="#E5E5E5"> bit costly</font>

204
00:10:37,740 --> 00:10:46,320
<font color="#E5E5E5">so what to do</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> one thing</font><font color="#CCCCCC"> that</font>

205
00:10:43,250 --> 00:10:53,400
<font color="#E5E5E5">it probably would be</font><font color="#CCCCCC"> probably quite</font>

206
00:10:46,320 --> 00:10:56,280
simple<font color="#CCCCCC"> just implementing richer call or</font>

207
00:10:53,400 --> 00:10:58,770
jump instructions in instructions that

208
00:10:56,280 --> 00:11:04,439
<font color="#E5E5E5">would actually switch</font><font color="#CCCCCC"> to address space</font>

209
00:10:58,770 --> 00:11:07,740
<font color="#E5E5E5">by themselves so that you know we would</font>

210
00:11:04,440 --> 00:11:10,589
we would<font color="#E5E5E5"> save at least</font><font color="#CCCCCC"> the single kernel</font>

211
00:11:07,740 --> 00:11:12,000
<font color="#E5E5E5">roundtrip where the kernel the only</font>

212
00:11:10,589 --> 00:11:15,000
thing that the kernel is actually doing

213
00:11:12,000 --> 00:11:17,339
here is<font color="#E5E5E5"> changing the address space this</font>

214
00:11:15,000 --> 00:11:19,620
could be<font color="#E5E5E5"> done by by the hardware or by</font>

215
00:11:17,339 --> 00:11:23,040
the CPU<font color="#E5E5E5"> and it could be as simple as</font>

216
00:11:19,620 --> 00:11:26,430
<font color="#E5E5E5">just switching the the current address</font>

217
00:11:23,040 --> 00:11:28,319
space identifier<font color="#E5E5E5"> of course this still</font>

218
00:11:26,430 --> 00:11:30,270
<font color="#CCCCCC">needs to</font><font color="#E5E5E5"> be just just a</font><font color="#CCCCCC"> mechanism</font><font color="#E5E5E5"> just</font>

219
00:11:28,320 --> 00:11:33,510
generic basic mechanism are not

220
00:11:30,270 --> 00:11:36,900
<font color="#E5E5E5">proposing</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> moving some kind of</font>

221
00:11:33,510 --> 00:11:39,420
policy<font color="#E5E5E5"> from from the operating system</font><font color="#CCCCCC"> to</font>

222
00:11:36,900 --> 00:11:42,900
<font color="#CCCCCC">the CPU that would be crazy so how to</font>

223
00:11:39,420 --> 00:11:46,260
how<font color="#CCCCCC"> to do it implement by having</font>

224
00:11:42,900 --> 00:11:47,010
something<font color="#E5E5E5"> like a</font><font color="#CCCCCC"> colgate that would be</font>

225
00:11:46,260 --> 00:11:50,430
<font color="#CCCCCC">cached in</font>

226
00:11:47,010 --> 00:11:54,300
kind of hardware<font color="#E5E5E5"> cache</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> could</font>

227
00:11:50,430 --> 00:11:57,449
<font color="#E5E5E5">something like a TLB</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you know the</font>

228
00:11:54,300 --> 00:11:59,339
first time this call happens<font color="#CCCCCC"> obviously</font>

229
00:11:57,450 --> 00:12:01,170
it will trap<font color="#E5E5E5"> into the kernel</font><font color="#CCCCCC"> the kernel</font>

230
00:11:59,340 --> 00:12:04,320
will check you know<font color="#E5E5E5"> the permissions</font>

231
00:12:01,170 --> 00:12:07,589
capabilities<font color="#CCCCCC"> and stuff like</font><font color="#E5E5E5"> that and set</font>

232
00:12:04,320 --> 00:12:10,170
<font color="#E5E5E5">up and I entry into this into this</font>

233
00:12:07,590 --> 00:12:12,900
hardware cache and and consequent

234
00:12:10,170 --> 00:12:17,219
consequent<font color="#E5E5E5"> cause</font><font color="#CCCCCC"> will be done done just</font>

235
00:12:12,900 --> 00:12:19,310
just by the CPU<font color="#CCCCCC"> I believe this could be</font>

236
00:12:17,220 --> 00:12:21,750
<font color="#E5E5E5">really very simple</font>

237
00:12:19,310 --> 00:12:23,069
regarding the<font color="#CCCCCC"> I synchronous IPC where</font>

238
00:12:21,750 --> 00:12:26,850
there is probably some need for

239
00:12:23,070 --> 00:12:28,470
<font color="#E5E5E5">buffering of the messages I also think</font>

240
00:12:26,850 --> 00:12:31,500
this could<font color="#E5E5E5"> be optimized</font><font color="#CCCCCC"> I mean even</font>

241
00:12:28,470 --> 00:12:33,470
<font color="#CCCCCC">nowadays like some like like somebody</font>

242
00:12:31,500 --> 00:12:36,890
already mentioned at my talk yesterday

243
00:12:33,470 --> 00:12:40,260
<font color="#E5E5E5">this could be you know there's this</font>

244
00:12:36,890 --> 00:12:42,689
message buffering and message<font color="#CCCCCC"> passing</font>

245
00:12:40,260 --> 00:12:45,090
<font color="#E5E5E5">could be optimized by you know making</font>

246
00:12:42,690 --> 00:12:47,850
sure that<font color="#CCCCCC"> you don't trash the messages</font>

247
00:12:45,090 --> 00:12:52,230
from<font color="#E5E5E5"> our cache lines that's fine but</font>

248
00:12:47,850 --> 00:12:53,760
again<font color="#CCCCCC"> I would imagine that the the CPU</font>

249
00:12:52,230 --> 00:12:55,860
could could do it<font color="#E5E5E5"> even more</font>

250
00:12:53,760 --> 00:12:59,970
intelligently so basically<font color="#E5E5E5"> using the</font>

251
00:12:55,860 --> 00:13:03,330
cache lines<font color="#E5E5E5"> as fixed size buffers for</font>

252
00:12:59,970 --> 00:13:06,420
for the messages<font color="#CCCCCC"> and it's not a problem</font>

253
00:13:03,330 --> 00:13:08,340
<font color="#E5E5E5">that</font><font color="#CCCCCC"> it's a fixed size because in most</font>

254
00:13:06,420 --> 00:13:11,069
of the micro kernels<font color="#E5E5E5"> I have seen that</font>

255
00:13:08,340 --> 00:13:12,990
<font color="#E5E5E5">are using a synchronous IPC the kernel</font>

256
00:13:11,070 --> 00:13:15,660
buffers are also fixed<font color="#CCCCCC"> size for obvious</font>

257
00:13:12,990 --> 00:13:18,870
reasons<font color="#E5E5E5"> that the user space cannot you</font>

258
00:13:15,660 --> 00:13:20,520
<font color="#CCCCCC">know the kernel memory so again I would</font>

259
00:13:18,870 --> 00:13:23,460
<font color="#E5E5E5">see that there</font><font color="#CCCCCC"> is a clear</font><font color="#E5E5E5"> separation</font>

260
00:13:20,520 --> 00:13:25,949
between<font color="#E5E5E5"> the mechanism that could be very</font>

261
00:13:23,460 --> 00:13:28,050
<font color="#E5E5E5">very efficient very fast very lean and</font>

262
00:13:25,950 --> 00:13:33,090
the policy<font color="#E5E5E5"> that will</font><font color="#CCCCCC"> obviously still</font>

263
00:13:28,050 --> 00:13:36,780
stay stay in in software if<font color="#E5E5E5"> you remember</font>

264
00:13:33,090 --> 00:13:39,510
sparc v9<font color="#CCCCCC"> this reminds me of the register</font>

265
00:13:36,780 --> 00:13:41,670
stack<font color="#CCCCCC"> engine that they have they're off</font>

266
00:13:39,510 --> 00:13:44,850
stack the stack and here what was<font color="#E5E5E5"> the</font>

267
00:13:41,670 --> 00:13:49,709
term stock engine<font color="#E5E5E5"> register second way</font>

268
00:13:44,850 --> 00:13:54,570
<font color="#CCCCCC">are 64 is it Itanium</font><font color="#E5E5E5"> okay okay well</font>

269
00:13:49,710 --> 00:13:57,180
<font color="#E5E5E5">Farkas has some things in more so how</font>

270
00:13:54,570 --> 00:13:59,220
about the bulk data<font color="#E5E5E5"> if we really need to</font>

271
00:13:57,180 --> 00:14:01,420
move a<font color="#E5E5E5"> lot of data between between</font><font color="#CCCCCC"> the</font>

272
00:13:59,220 --> 00:14:04,600
<font color="#E5E5E5">the processes or char</font>

273
00:14:01,420 --> 00:14:07,630
currently the current<font color="#E5E5E5"> best optimization</font>

274
00:14:04,600 --> 00:14:09,550
<font color="#E5E5E5">we have is memory sharing which actually</font>

275
00:14:07,630 --> 00:14:13,899
works quite quite<font color="#E5E5E5"> far quite nice quite</font>

276
00:14:09,550 --> 00:14:16,270
<font color="#CCCCCC">fine the only problem is</font><font color="#E5E5E5"> that the memory</font>

277
00:14:13,899 --> 00:14:20,350
sharing needs to be<font color="#E5E5E5"> established and and</font>

278
00:14:16,270 --> 00:14:22,540
simply turn down and if this if this<font color="#CCCCCC"> is</font>

279
00:14:20,350 --> 00:14:26,649
<font color="#CCCCCC">happening too often</font><font color="#E5E5E5"> this this causes the</font>

280
00:14:22,540 --> 00:14:28,569
performance penalty<font color="#E5E5E5"> and also donate the</font>

281
00:14:26,649 --> 00:14:31,570
data needs to<font color="#CCCCCC"> be paid aligned</font><font color="#E5E5E5"> so so it's</font>

282
00:14:28,570 --> 00:14:34,839
not really<font color="#CCCCCC"> very useful</font><font color="#E5E5E5"> for sharing you</font>

283
00:14:31,570 --> 00:14:37,290
know<font color="#E5E5E5"> scatter data structures it's fine</font>

284
00:14:34,839 --> 00:14:40,690
<font color="#CCCCCC">when you a new need to share you know</font>

285
00:14:37,290 --> 00:14:42,969
blocks<font color="#CCCCCC"> blocks of data</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> needs to be</font>

286
00:14:40,690 --> 00:14:45,190
<font color="#E5E5E5">written to a block device driver or</font>

287
00:14:42,970 --> 00:14:47,860
<font color="#CCCCCC">write from</font><font color="#E5E5E5"> a group device driver but</font>

288
00:14:45,190 --> 00:14:50,980
it's not not<font color="#CCCCCC"> very useful for really you</font>

289
00:14:47,860 --> 00:14:54,790
know graph structures and trees and

290
00:14:50,980 --> 00:14:57,399
stuff like that<font color="#CCCCCC"> so again an idea</font><font color="#E5E5E5"> that</font>

291
00:14:54,790 --> 00:15:02,560
could be something<font color="#CCCCCC"> that could be</font><font color="#E5E5E5"> done is</font>

292
00:14:57,399 --> 00:15:04,630
<font color="#E5E5E5">to</font><font color="#CCCCCC"> have a new simple layer of memory</font><font color="#E5E5E5"> of</font>

293
00:15:02,560 --> 00:15:08,410
<font color="#E5E5E5">hardware based memory management that</font>

294
00:15:04,630 --> 00:15:12,279
would map virtual addresses<font color="#E5E5E5"> to cache</font>

295
00:15:08,410 --> 00:15:16,420
lines because a cache line<font color="#E5E5E5"> is usually</font>

296
00:15:12,279 --> 00:15:20,709
something like 64 or 128 bytes<font color="#E5E5E5"> which is</font>

297
00:15:16,420 --> 00:15:23,800
much more reasonable<font color="#E5E5E5"> granularity for for</font>

298
00:15:20,709 --> 00:15:27,880
<font color="#E5E5E5">the scatter data structures and of</font>

299
00:15:23,800 --> 00:15:30,609
course again<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to you know sit</font>

300
00:15:27,880 --> 00:15:32,589
down we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to create a</font><font color="#E5E5E5"> modal we need</font>

301
00:15:30,610 --> 00:15:35,529
to evaluate it<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> it</font>

302
00:15:32,589 --> 00:15:37,420
in an emulator<font color="#E5E5E5"> to be sure how well this</font>

303
00:15:35,529 --> 00:15:39,189
will<font color="#E5E5E5"> perform what should be the</font>

304
00:15:37,420 --> 00:15:42,089
parameters which should be the size of

305
00:15:39,190 --> 00:15:44,620
<font color="#E5E5E5">the of this translation buffer</font>

306
00:15:42,089 --> 00:15:47,020
stuff like<font color="#E5E5E5"> that but I really</font><font color="#CCCCCC"> believe</font>

307
00:15:44,620 --> 00:15:53,170
there is some<font color="#E5E5E5"> possibility to to make</font>

308
00:15:47,020 --> 00:15:56,319
this work context<font color="#E5E5E5"> switching I mean we</font>

309
00:15:53,170 --> 00:16:01,329
have some somehow avoided<font color="#E5E5E5"> parts of this</font>

310
00:15:56,320 --> 00:16:03,310
context switching<font color="#E5E5E5"> in case of the IPC but</font>

311
00:16:01,329 --> 00:16:05,170
still the<font color="#E5E5E5"> problem is that in a</font>

312
00:16:03,310 --> 00:16:08,560
microkernel<font color="#CCCCCC"> multi server system there</font>

313
00:16:05,170 --> 00:16:10,390
are more active processes or more active

314
00:16:08,560 --> 00:16:12,219
tasks<font color="#E5E5E5"> than you know you know in a more</font>

315
00:16:10,390 --> 00:16:14,620
<font color="#CCCCCC">or</font><font color="#E5E5E5"> less monolithic system so there</font><font color="#CCCCCC"> will</font>

316
00:16:12,220 --> 00:16:19,090
be still<font color="#E5E5E5"> some context switching</font>

317
00:16:14,620 --> 00:16:24,240
and you know all that<font color="#CCCCCC"> our hardware is</font>

318
00:16:19,090 --> 00:16:27,490
currently<font color="#E5E5E5"> doing is basically masking</font>

319
00:16:24,240 --> 00:16:29,500
latency and we have very efficient

320
00:16:27,490 --> 00:16:33,910
mechanisms for masking<font color="#E5E5E5"> nanosecond</font>

321
00:16:29,500 --> 00:16:36,720
latency<font color="#E5E5E5"> that's called the caches we have</font>

322
00:16:33,910 --> 00:16:41,530
quite efficient mechanism for masking

323
00:16:36,720 --> 00:16:46,000
millisecond<font color="#E5E5E5"> scale agencies that's you</font>

324
00:16:41,530 --> 00:16:49,480
know IO buffers<font color="#E5E5E5"> but the the context</font>

325
00:16:46,000 --> 00:16:51,970
which<font color="#E5E5E5"> is precisely in the</font><font color="#CCCCCC"> middle it's on</font>

326
00:16:49,480 --> 00:16:54,310
the order<font color="#CCCCCC"> of microseconds and we have</font>

327
00:16:51,970 --> 00:16:57,220
<font color="#E5E5E5">really</font><font color="#CCCCCC"> nothing to to mask this latency</font>

328
00:16:54,310 --> 00:17:00,130
<font color="#E5E5E5">so I mean I would I wouldn't say we</font>

329
00:16:57,220 --> 00:17:02,320
don't<font color="#E5E5E5"> have we don't have anything there</font>

330
00:17:00,130 --> 00:17:05,460
<font color="#CCCCCC">is there is a hardware mechanism quite</font>

331
00:17:02,320 --> 00:17:08,260
often used which is multi-threading<font color="#CCCCCC"> and</font>

332
00:17:05,460 --> 00:17:10,120
<font color="#E5E5E5">this is precisely why we have</font>

333
00:17:08,260 --> 00:17:14,579
multi-threading to be<font color="#CCCCCC"> able to somehow</font>

334
00:17:10,119 --> 00:17:17,229
make sure that that the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> a loose or</font>

335
00:17:14,579 --> 00:17:18,520
parts<font color="#E5E5E5"> of the of the of the CPU had</font>

336
00:17:17,230 --> 00:17:22,180
<font color="#E5E5E5">always something to do</font>

337
00:17:18,520 --> 00:17:26,230
despite there is some data data or

338
00:17:22,180 --> 00:17:28,360
dependency or waiting<font color="#CCCCCC"> for some data but</font>

339
00:17:26,230 --> 00:17:29,950
this does<font color="#CCCCCC"> not scale to</font><font color="#E5E5E5"> many many</font><font color="#CCCCCC"> frets</font>

340
00:17:28,359 --> 00:17:33,129
and usually have just<font color="#CCCCCC"> a couple of</font>

341
00:17:29,950 --> 00:17:35,890
<font color="#E5E5E5">Hardware threads and we</font><font color="#CCCCCC"> can do conduct</font>

342
00:17:33,130 --> 00:17:38,800
switching in in software<font color="#E5E5E5"> so how about</font>

343
00:17:35,890 --> 00:17:42,490
<font color="#E5E5E5">combining this and having</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> there and</font>

344
00:17:38,800 --> 00:17:46,000
something<font color="#E5E5E5"> like like a hardware support</font>

345
00:17:42,490 --> 00:17:49,690
for unlimited number of execution

346
00:17:46,000 --> 00:17:52,120
contexts some of them the<font color="#E5E5E5"> the most</font>

347
00:17:49,690 --> 00:17:55,360
frequently used would should be cashed

348
00:17:52,120 --> 00:17:57,370
in some<font color="#E5E5E5"> hardware cache and having some</font>

349
00:17:55,360 --> 00:18:00,610
dedicated instructions<font color="#E5E5E5"> that is you know</font>

350
00:17:57,370 --> 00:18:05,169
extensions to<font color="#E5E5E5"> to efficiently operate</font>

351
00:18:00,610 --> 00:18:07,929
<font color="#E5E5E5">with with these</font><font color="#CCCCCC"> hardware contacts then</font>

352
00:18:05,170 --> 00:18:10,690
<font color="#E5E5E5">this will keep the scheduling policies</font>

353
00:18:07,930 --> 00:18:13,870
and stuff like that mostly<font color="#E5E5E5"> to the to the</font>

354
00:18:10,690 --> 00:18:16,930
operating<font color="#CCCCCC"> system but the the physical</font>

355
00:18:13,870 --> 00:18:18,729
<font color="#E5E5E5">mechanism of you know quickly</font><font color="#CCCCCC"> switching</font>

356
00:18:16,930 --> 00:18:20,980
to a different<font color="#CCCCCC"> workload one when our</font>

357
00:18:18,730 --> 00:18:23,080
current<font color="#E5E5E5"> workload is being blocked on the</font>

358
00:18:20,980 --> 00:18:25,690
<font color="#E5E5E5">hardware level because it is</font><font color="#CCCCCC"> waiting</font><font color="#E5E5E5"> on</font>

359
00:18:23,080 --> 00:18:28,610
some some data that<font color="#CCCCCC"> could be done</font>

360
00:18:25,690 --> 00:18:31,900
autonomously<font color="#CCCCCC"> we could even think</font><font color="#E5E5E5"> about</font>

361
00:18:28,610 --> 00:18:34,929
you know somehow connecting some other

362
00:18:31,900 --> 00:18:39,550
<font color="#E5E5E5">external event triggers to this like</font>

363
00:18:34,930 --> 00:18:42,290
interrupts or exceptions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this would</font>

364
00:18:39,550 --> 00:18:43,159
allow us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do even more</font><font color="#E5E5E5"> stuff I believe</font>

365
00:18:42,290 --> 00:18:46,220
her her<font color="#E5E5E5"> slide</font>

366
00:18:43,160 --> 00:18:50,470
about this here yeah<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would allow us</font>

367
00:18:46,220 --> 00:18:53,090
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do very</font><font color="#E5E5E5"> simply or very elegantly</font>

368
00:18:50,470 --> 00:18:56,510
<font color="#E5E5E5">purely</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> space based interrupt</font>

369
00:18:53,090 --> 00:18:59,770
processing<font color="#E5E5E5"> currently the interrupts</font>

370
00:18:56,510 --> 00:19:01,490
<font color="#E5E5E5">always trapped into the kernel space and</font>

371
00:18:59,770 --> 00:19:03,290
in a microkernel

372
00:19:01,490 --> 00:19:05,300
environment<font color="#E5E5E5"> would the kernel does it</font>

373
00:19:03,290 --> 00:19:07,460
generates some kind of IPC message that

374
00:19:05,300 --> 00:19:11,120
is then being forwarded to to the user

375
00:19:07,460 --> 00:19:14,450
space driver<font color="#E5E5E5"> if we would be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> do</font>

376
00:19:11,120 --> 00:19:18,439
the fast context switching using the

377
00:19:14,450 --> 00:19:22,250
<font color="#CCCCCC">hardware it</font><font color="#E5E5E5"> is just a single</font><font color="#CCCCCC"> step</font>

378
00:19:18,440 --> 00:19:24,910
further to extend it<font color="#E5E5E5"> to the interrupt</font>

379
00:19:22,250 --> 00:19:28,390
interrupt delivery to the user space

380
00:19:24,910 --> 00:19:32,780
drivers<font color="#E5E5E5"> which would not</font><font color="#CCCCCC"> only make</font>

381
00:19:28,390 --> 00:19:36,920
something faster it not only would this

382
00:19:32,780 --> 00:19:38,629
allow us<font color="#CCCCCC"> to get rid of</font><font color="#E5E5E5"> of pulling in in</font>

383
00:19:36,920 --> 00:19:41,960
case we<font color="#E5E5E5"> are dealing with some very</font>

384
00:19:38,630 --> 00:19:44,270
latency sensitive<font color="#E5E5E5"> device were actually</font>

385
00:19:41,960 --> 00:19:47,360
you know even even<font color="#CCCCCC"> in a monolithic</font>

386
00:19:44,270 --> 00:19:49,370
<font color="#CCCCCC">system the polling can sorry the</font>

387
00:19:47,360 --> 00:19:52,340
interrupt processing can<font color="#CCCCCC"> be so</font><font color="#E5E5E5"> expensive</font>

388
00:19:49,370 --> 00:19:55,280
that polling despite stupid is more

389
00:19:52,340 --> 00:20:02,090
efficient<font color="#E5E5E5"> but it would also you know</font>

390
00:19:55,280 --> 00:20:03,830
solve the<font color="#CCCCCC"> the final the final compromise</font>

391
00:20:02,090 --> 00:20:05,629
regarding<font color="#E5E5E5"> the elegance of the</font>

392
00:20:03,830 --> 00:20:07,939
<font color="#E5E5E5">microkernel design and that's the fact</font>

393
00:20:05,630 --> 00:20:11,800
<font color="#E5E5E5">and we still need some device drivers in</font>

394
00:20:07,940 --> 00:20:14,600
the microkernel<font color="#E5E5E5"> like the timer with with</font>

395
00:20:11,800 --> 00:20:16,399
direct delivery<font color="#E5E5E5"> of the inter up of the</font>

396
00:20:14,600 --> 00:20:19,370
timer interrupts<font color="#CCCCCC"> to use a space</font><font color="#E5E5E5"> timer</font>

397
00:20:16,400 --> 00:20:22,700
driver we would<font color="#E5E5E5"> not need any time a</font>

398
00:20:19,370 --> 00:20:24,800
driver<font color="#E5E5E5"> in the microkernel</font><font color="#CCCCCC"> and possibly</font>

399
00:20:22,700 --> 00:20:27,650
even moving<font color="#E5E5E5"> the scheduler out of the</font>

400
00:20:24,800 --> 00:20:31,879
microkernel<font color="#E5E5E5"> which again you know is</font>

401
00:20:27,650 --> 00:20:35,630
something<font color="#CCCCCC"> like a</font><font color="#E5E5E5"> holy grail of many</font>

402
00:20:31,880 --> 00:20:37,460
people yeah<font color="#E5E5E5"> something would need to be</font>

403
00:20:35,630 --> 00:20:40,810
done<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> trick interrupts</font>

404
00:20:37,460 --> 00:20:43,570
you know the usual pain point

405
00:20:40,810 --> 00:20:45,550
again I<font color="#E5E5E5"> I would say</font><font color="#CCCCCC"> that there is some</font>

406
00:20:43,570 --> 00:20:47,080
<font color="#CCCCCC">possibility to have some integration</font>

407
00:20:45,550 --> 00:20:49,510
with the platform<font color="#E5E5E5"> in terms of control or</font>

408
00:20:47,080 --> 00:20:52,270
that would autonomously mask the source

409
00:20:49,510 --> 00:20:54,790
of the<font color="#CCCCCC"> the level</font><font color="#E5E5E5"> tricked</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> when</font>

410
00:20:52,270 --> 00:21:00,900
it happens<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that there is no no issue</font>

411
00:20:54,790 --> 00:21:00,899
with this endless reassertion of<font color="#CCCCCC"> Holy's</font>

412
00:21:01,710 --> 00:21:08,230
capabilities<font color="#E5E5E5"> I mean this is</font><font color="#CCCCCC"> really just</font>

413
00:21:04,720 --> 00:21:12,670
just this is a stretcher<font color="#CCCCCC"> I mean III did</font>

414
00:21:08,230 --> 00:21:14,350
not really find very much useful<font color="#E5E5E5"> ideas</font>

415
00:21:12,670 --> 00:21:17,800
in my head<font color="#CCCCCC"> about what could be done with</font>

416
00:21:14,350 --> 00:21:20,800
capabilities<font color="#CCCCCC"> on the hardware</font><font color="#E5E5E5"> level but</font>

417
00:21:17,800 --> 00:21:23,200
at<font color="#E5E5E5"> least at</font><font color="#CCCCCC"> least something I mean if we</font>

418
00:21:20,800 --> 00:21:26,490
<font color="#CCCCCC">just consider the narrow use case of</font>

419
00:21:23,200 --> 00:21:29,440
capabilities as as<font color="#E5E5E5"> object identifiers</font>

420
00:21:26,490 --> 00:21:32,470
<font color="#CCCCCC">again the Mike Connell would always</font><font color="#E5E5E5"> need</font>

421
00:21:29,440 --> 00:21:36,430
<font color="#E5E5E5">to be in</font><font color="#CCCCCC"> charge of you know making sure</font>

422
00:21:32,470 --> 00:21:39,430
<font color="#E5E5E5">that that the methods</font><font color="#CCCCCC"> Cortana</font>

423
00:21:36,430 --> 00:21:41,890
capabilities are permissible<font color="#E5E5E5"> for that</font>

424
00:21:39,430 --> 00:21:43,860
holder of the capability<font color="#CCCCCC"> and I wasn't</font>

425
00:21:41,890 --> 00:21:46,240
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> think about any</font><font color="#CCCCCC"> honey</font>

426
00:21:43,860 --> 00:21:48,070
<font color="#CCCCCC">elegant hardware mechanism how this</font>

427
00:21:46,240 --> 00:21:51,780
could be<font color="#CCCCCC"> avoided</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> for the</font>

428
00:21:48,070 --> 00:21:53,500
<font color="#E5E5E5">actual access to the</font><font color="#CCCCCC"> object the</font>

429
00:21:51,780 --> 00:21:55,980
capability ID or<font color="#E5E5E5"> the capability</font>

430
00:21:53,500 --> 00:21:58,930
<font color="#E5E5E5">reference could be somehow embedded</font>

431
00:21:55,980 --> 00:22:00,190
within within the pointer itself and

432
00:21:58,930 --> 00:22:02,470
then the hardware<font color="#E5E5E5"> would be able</font><font color="#CCCCCC"> to</font>

433
00:22:00,190 --> 00:22:04,630
<font color="#E5E5E5">autonomously check whether whether the</font>

434
00:22:02,470 --> 00:22:08,860
<font color="#E5E5E5">access to that given object is allowed</font>

435
00:22:04,630 --> 00:22:16,420
by the<font color="#E5E5E5"> current context if you</font><font color="#CCCCCC"> think</font>

436
00:22:08,860 --> 00:22:20,469
about risk<font color="#CCCCCC"> 5 128 128 bit variant I</font>

437
00:22:16,420 --> 00:22:23,830
believe you you must you could<font color="#E5E5E5"> wonder</font>

438
00:22:20,470 --> 00:22:26,560
what would be the actual<font color="#E5E5E5"> use of 128 bit</font>

439
00:22:23,830 --> 00:22:29,620
long pointers<font color="#E5E5E5"> I'm not sure that you know</font>

440
00:22:26,560 --> 00:22:33,490
flat 128 bit pointer is really so useful

441
00:22:29,620 --> 00:22:36,219
<font color="#E5E5E5">maybe it is maybe I'm wrong but we could</font>

442
00:22:33,490 --> 00:22:38,650
easily divide it into 64 bits for the

443
00:22:36,220 --> 00:22:41,170
object offset and 64 bits for the

444
00:22:38,650 --> 00:22:46,750
capability reference and this could work

445
00:22:41,170 --> 00:22:48,670
<font color="#E5E5E5">quite elegantly by the way I mean this</font>

446
00:22:46,750 --> 00:22:52,480
would be<font color="#CCCCCC"> probably even</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> useful for</font>

447
00:22:48,670 --> 00:22:53,380
some some managed languages like I don't

448
00:22:52,480 --> 00:22:54,640
java.net

449
00:22:53,380 --> 00:22:57,580
stuff like that<font color="#E5E5E5"> because</font>

450
00:22:54,640 --> 00:23:01,840
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> always dealing with all the VMS</font>

451
00:22:57,580 --> 00:23:03,370
running those those<font color="#CCCCCC"> manage did this</font>

452
00:23:01,840 --> 00:23:05,139
managed code is always<font color="#E5E5E5"> dealing with the</font>

453
00:23:03,370 --> 00:23:07,330
<font color="#CCCCCC">fact that they need to do a lot of bound</font>

454
00:23:05,140 --> 00:23:08,799
checking on<font color="#E5E5E5"> the objects and if this</font>

455
00:23:07,330 --> 00:23:14,830
could<font color="#E5E5E5"> be offloaded to do</font><font color="#CCCCCC"> Hardware it</font>

456
00:23:08,799 --> 00:23:17,620
would<font color="#E5E5E5"> probably help them a lot okay some</font>

457
00:23:14,830 --> 00:23:35,520
ideas do do have something<font color="#E5E5E5"> to add to</font>

458
00:23:17,620 --> 00:23:35,520
<font color="#E5E5E5">this yeah please and yes and I</font><font color="#CCCCCC"> believe I</font>

459
00:23:35,790 --> 00:23:42,760
believe<font color="#E5E5E5"> I have it</font><font color="#CCCCCC"> have it here</font><font color="#E5E5E5"> yeah so I</font>

460
00:23:39,610 --> 00:23:45,159
mean<font color="#E5E5E5"> you might come</font><font color="#CCCCCC"> to me and say oh</font>

461
00:23:42,760 --> 00:23:46,990
<font color="#E5E5E5">these are just wet dreams I mean this is</font>

462
00:23:45,160 --> 00:23:48,940
not going<font color="#E5E5E5"> to happen</font><font color="#CCCCCC"> so what I'm now</font>

463
00:23:46,990 --> 00:23:51,580
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> present unless there are other</font>

464
00:23:48,940 --> 00:23:55,270
<font color="#E5E5E5">commands or objections there are some</font>

465
00:23:51,580 --> 00:23:57,460
some cases or some some prior art which

466
00:23:55,270 --> 00:23:59,679
somehow leads into<font color="#E5E5E5"> the same direction</font>

467
00:23:57,460 --> 00:24:02,860
<font color="#CCCCCC">where I would like to</font><font color="#E5E5E5"> convince you that</font>

468
00:23:59,679 --> 00:24:04,960
it is<font color="#CCCCCC"> possible to do something like that</font>

469
00:24:02,860 --> 00:24:06,909
it's even possible<font color="#E5E5E5"> to do something like</font>

470
00:24:04,960 --> 00:24:09,400
that<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the hardware we currently have</font>

471
00:24:06,910 --> 00:24:12,070
so imagine the possibilities<font color="#CCCCCC"> if we can</font>

472
00:24:09,400 --> 00:24:16,360
actually change<font color="#E5E5E5"> the hardware let's think</font>

473
00:24:12,070 --> 00:24:19,149
out of the box<font color="#E5E5E5"> so so the first reference</font>

474
00:24:16,360 --> 00:24:22,209
is you know just<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a basic paper</font>

475
00:24:19,150 --> 00:24:24,460
rather<font color="#E5E5E5"> old about actually offloading</font>

476
00:24:22,210 --> 00:24:26,919
<font color="#E5E5E5">some of the microkernel functionality to</font>

477
00:24:24,460 --> 00:24:30,340
<font color="#E5E5E5">hardware this was this was done by by</font>

478
00:24:26,919 --> 00:24:34,120
<font color="#E5E5E5">basically modifying and</font><font color="#CCCCCC"> softcore</font><font color="#E5E5E5"> FPGA</font>

479
00:24:30,340 --> 00:24:37,000
<font color="#E5E5E5">CPU and they were moving you know</font>

480
00:24:34,120 --> 00:24:40,360
actually complete operations like thread

481
00:24:37,000 --> 00:24:42,549
<font color="#CCCCCC">creation and context switching so</font><font color="#E5E5E5"> I mean</font>

482
00:24:40,360 --> 00:24:45,070
the context switching is something more

483
00:24:42,549 --> 00:24:46,780
or<font color="#E5E5E5"> less</font><font color="#CCCCCC"> in in</font><font color="#E5E5E5"> in the line would I have</font>

484
00:24:45,070 --> 00:24:49,659
suggested<font color="#E5E5E5"> but the thread creation is</font>

485
00:24:46,780 --> 00:24:55,210
probably<font color="#CCCCCC"> too heavyweight I would say but</font>

486
00:24:49,660 --> 00:24:57,280
nevertheless they were<font color="#E5E5E5"> able to to</font>

487
00:24:55,210 --> 00:25:00,309
measure<font color="#E5E5E5"> reasonable</font><font color="#CCCCCC"> performance</font>

488
00:24:57,280 --> 00:25:03,460
improvement<font color="#E5E5E5"> something like fifteen to</font>

489
00:25:00,309 --> 00:25:05,350
twenty seven<font color="#E5E5E5"> percent and you know just</font>

490
00:25:03,460 --> 00:25:07,920
speaking about<font color="#E5E5E5"> the ways how the hardware</font>

491
00:25:05,350 --> 00:25:10,379
<font color="#E5E5E5">could could optimize IPC this</font>

492
00:25:07,920 --> 00:25:13,410
<font color="#E5E5E5">has been also done in practice in the</font>

493
00:25:10,380 --> 00:25:16,380
<font color="#E5E5E5">wild on the massive parallel</font>

494
00:25:13,410 --> 00:25:18,960
architectures so<font color="#E5E5E5"> again having having</font>

495
00:25:16,380 --> 00:25:20,700
lean<font color="#CCCCCC"> hardware mechanism for efficient</font>

496
00:25:18,960 --> 00:25:24,480
message passing that is somehow

497
00:25:20,700 --> 00:25:26,820
connected to<font color="#CCCCCC"> to reasonable how software</font>

498
00:25:24,480 --> 00:25:33,480
<font color="#E5E5E5">abstraction for it so this</font><font color="#CCCCCC"> could</font>

499
00:25:26,820 --> 00:25:35,939
<font color="#E5E5E5">probably work about you know the address</font>

500
00:25:33,480 --> 00:25:38,700
space switching<font color="#E5E5E5"> there is an interesting</font>

501
00:25:35,940 --> 00:25:40,980
<font color="#CCCCCC">paper from from the barrel fish people</font>

502
00:25:38,700 --> 00:25:45,840
about<font color="#E5E5E5"> space jump which</font><font color="#CCCCCC"> is basically a</font>

503
00:25:40,980 --> 00:25:48,480
programming model<font color="#CCCCCC"> where</font><font color="#E5E5E5"> where a single</font>

504
00:25:45,840 --> 00:25:51,510
process uses multiple multiple address

505
00:25:48,480 --> 00:25:54,660
spaces at once<font color="#E5E5E5"> and this in</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> case</font>

506
00:25:51,510 --> 00:25:56,879
that was not targeting some performance

507
00:25:54,660 --> 00:26:00,810
improvement it was targeting you know

508
00:25:56,880 --> 00:26:02,940
just just<font color="#E5E5E5"> it was just</font><font color="#CCCCCC"> entertaining</font><font color="#E5E5E5"> what</font>

509
00:26:00,810 --> 00:26:07,020
would be the possibilities<font color="#E5E5E5"> and benefits</font>

510
00:26:02,940 --> 00:26:09,930
of such a programming model for for

511
00:26:07,020 --> 00:26:11,730
what's a<font color="#E5E5E5"> data centric applications</font><font color="#CCCCCC"> so I</font>

512
00:26:09,930 --> 00:26:13,590
mean<font color="#E5E5E5"> this is not so much</font><font color="#CCCCCC"> irrelevant</font><font color="#E5E5E5"> to</font>

513
00:26:11,730 --> 00:26:15,360
what I have<font color="#E5E5E5"> been talking about but but I</font>

514
00:26:13,590 --> 00:26:17,280
mean<font color="#CCCCCC"> there they are</font><font color="#E5E5E5"> approaches and they</font>

515
00:26:15,360 --> 00:26:20,189
were able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement this on</font><font color="#E5E5E5"> on</font>

516
00:26:17,280 --> 00:26:24,149
<font color="#CCCCCC">borrowed fish</font><font color="#E5E5E5"> obviously in dragonfly bsd</font>

517
00:26:20,190 --> 00:26:27,510
so it did not<font color="#CCCCCC"> require huge modification</font>

518
00:26:24,150 --> 00:26:30,270
to to the kernel abstractions and if you

519
00:26:27,510 --> 00:26:34,200
if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are old enough like</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> you might</font>

520
00:26:30,270 --> 00:26:37,020
remember that<font color="#E5E5E5"> if you are running an x86</font>

521
00:26:34,200 --> 00:26:39,540
<font color="#E5E5E5">cpu and 32-bit mode or probably</font><font color="#CCCCCC"> even in</font>

522
00:26:37,020 --> 00:26:41,460
<font color="#E5E5E5">the 16-bit mode you can still have the</font>

523
00:26:39,540 --> 00:26:45,930
task state segment which is<font color="#E5E5E5"> basically</font>

524
00:26:41,460 --> 00:26:48,000
hardware based context switching it does

525
00:26:45,930 --> 00:26:50,250
not have<font color="#E5E5E5"> a dedicated you know hardware</font>

526
00:26:48,000 --> 00:26:52,710
cache for<font color="#E5E5E5"> that it just uses regular</font>

527
00:26:50,250 --> 00:26:55,020
<font color="#E5E5E5">memory for</font><font color="#CCCCCC"> caching</font><font color="#E5E5E5"> with contacts but</font>

528
00:26:52,710 --> 00:26:57,570
still I mean<font color="#E5E5E5"> performance wise</font><font color="#CCCCCC"> it's it's</font>

529
00:26:55,020 --> 00:26:58,590
still competitive<font color="#E5E5E5"> to to the to do</font>

530
00:26:57,570 --> 00:27:00,960
software<font color="#CCCCCC"> base</font><font color="#E5E5E5"> approach</font>

531
00:26:58,590 --> 00:27:03,959
even the Linux kernel used<font color="#E5E5E5"> to use this</font>

532
00:27:00,960 --> 00:27:06,000
<font color="#CCCCCC">mechanism</font><font color="#E5E5E5"> previously and they stopped</font>

533
00:27:03,960 --> 00:27:07,920
using it not<font color="#E5E5E5"> because of the performance</font>

534
00:27:06,000 --> 00:27:11,270
but<font color="#CCCCCC"> because they just</font><font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to have a</font>

535
00:27:07,920 --> 00:27:11,270
more<font color="#CCCCCC"> portable approach yes</font>

536
00:27:13,340 --> 00:27:19,289
yeah but that was probably<font color="#E5E5E5"> just</font><font color="#CCCCCC"> very you</font>

537
00:27:16,679 --> 00:27:23,190
know artificial limit because some in

538
00:27:19,289 --> 00:27:26,039
<font color="#E5E5E5">some index in some you know you know the</font>

539
00:27:23,190 --> 00:27:28,320
global description<font color="#E5E5E5"> table could not be it</font>

540
00:27:26,039 --> 00:27:32,279
was basically<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know based on on the</font>

541
00:27:28,320 --> 00:27:34,320
selectors and yes yes<font color="#CCCCCC"> so it was</font>

542
00:27:32,279 --> 00:27:36,000
something<font color="#E5E5E5"> like 16 K or something yeah</font>

543
00:27:34,320 --> 00:27:38,399
<font color="#CCCCCC">but I mean that's that's</font><font color="#E5E5E5"> the</font>

544
00:27:36,000 --> 00:27:39,659
technicality I'm not<font color="#CCCCCC"> mentioning in that</font>

545
00:27:38,399 --> 00:27:41,820
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the way we should we should</font><font color="#E5E5E5"> do</font>

546
00:27:39,659 --> 00:27:44,640
it I'm<font color="#CCCCCC"> just mentioning</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> because it has</font>

547
00:27:41,820 --> 00:27:46,889
been<font color="#CCCCCC"> done so let's look at let's</font><font color="#E5E5E5"> have a</font>

548
00:27:44,640 --> 00:27:48,950
look on it and let's improve it thank

549
00:27:46,890 --> 00:27:48,950
you

550
00:27:49,610 --> 00:27:57,120
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> about the cross</font><font color="#CCCCCC"> address space calls</font>

551
00:27:54,419 --> 00:28:01,679
there has been actually<font color="#E5E5E5"> quite nice paper</font>

552
00:27:57,120 --> 00:28:06,029
by some of<font color="#CCCCCC"> my</font><font color="#E5E5E5"> colleagues from</font><font color="#CCCCCC"> Huawei who</font>

553
00:28:01,679 --> 00:28:09,090
have who have<font color="#E5E5E5"> used the</font><font color="#CCCCCC"> VM</font><font color="#E5E5E5"> Fang VM</font><font color="#CCCCCC"> funk</font>

554
00:28:06,029 --> 00:28:13,289
instruction or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> VM functions</font>

555
00:28:09,090 --> 00:28:14,760
extension to<font color="#CCCCCC"> do intel vt-x</font><font color="#E5E5E5"> which is</font>

556
00:28:13,289 --> 00:28:17,279
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that it's it's a</font>

557
00:28:14,760 --> 00:28:23,520
mechanism<font color="#E5E5E5"> that allows</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to basically</font>

558
00:28:17,279 --> 00:28:26,190
do cross<font color="#CCCCCC"> VM calls by setting up some</font>

559
00:28:23,520 --> 00:28:28,830
<font color="#CCCCCC">Cole gates and then then you know just</font>

560
00:28:26,190 --> 00:28:32,490
you<font color="#CCCCCC"> know using</font><font color="#E5E5E5"> a single instruction to</font>

561
00:28:28,830 --> 00:28:34,500
to pass the registers from one one<font color="#CCCCCC"> vm to</font>

562
00:28:32,490 --> 00:28:37,380
the other so it does the the<font color="#CCCCCC"> world</font>

563
00:28:34,500 --> 00:28:41,760
<font color="#E5E5E5">switch and address space</font><font color="#CCCCCC"> which I mean</font>

564
00:28:37,380 --> 00:28:45,090
switching the extended page tables on

565
00:28:41,760 --> 00:28:47,370
the hardware<font color="#E5E5E5"> level and</font><font color="#CCCCCC"> actually this</font>

566
00:28:45,090 --> 00:28:50,789
paper contains<font color="#E5E5E5"> an evaluation which were</font>

567
00:28:47,370 --> 00:28:54,418
<font color="#CCCCCC">theywere took rather complex application</font>

568
00:28:50,789 --> 00:28:57,510
<font color="#E5E5E5">something like a web server</font><font color="#CCCCCC"> that the</font>

569
00:28:54,419 --> 00:29:03,770
user<font color="#E5E5E5"> use uses the</font><font color="#CCCCCC"> open SSL library and</font>

570
00:28:57,510 --> 00:29:06,330
they have separated<font color="#CCCCCC"> some of the you know</font>

571
00:29:03,770 --> 00:29:10,020
<font color="#E5E5E5">encryption</font><font color="#CCCCCC"> functions so individual</font>

572
00:29:06,330 --> 00:29:13,110
function calls from the rest of the

573
00:29:10,020 --> 00:29:15,000
<font color="#CCCCCC">order of the binary into a dedicated VM</font>

574
00:29:13,110 --> 00:29:18,059
and they have used this VM<font color="#E5E5E5"> func</font>

575
00:29:15,000 --> 00:29:20,399
instructions to to you know change it

576
00:29:18,059 --> 00:29:22,408
from<font color="#E5E5E5"> a normal function call</font><font color="#CCCCCC"> to this to</font>

577
00:29:20,399 --> 00:29:24,959
<font color="#E5E5E5">this cross</font><font color="#CCCCCC"> beyond call</font><font color="#E5E5E5"> and their</font>

578
00:29:22,409 --> 00:29:26,490
performance evaluation was quite quite

579
00:29:24,960 --> 00:29:29,700
<font color="#CCCCCC">interesting because the</font>

580
00:29:26,490 --> 00:29:32,160
<font color="#CCCCCC">en banc function was as costly as just a</font>

581
00:29:29,700 --> 00:29:35,280
single<font color="#E5E5E5"> system call so it was not I mean</font>

582
00:29:32,160 --> 00:29:38,820
it was more costly<font color="#E5E5E5"> than just a jump or</font>

583
00:29:35,280 --> 00:29:41,550
just just a call but not huge not more

584
00:29:38,820 --> 00:29:44,189
costly<font color="#E5E5E5"> definitely cheaper than going to</font>

585
00:29:41,550 --> 00:29:47,159
<font color="#CCCCCC">the</font><font color="#E5E5E5"> to the hypervisor</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> into the kernel</font>

586
00:29:44,190 --> 00:29:50,150
go to the hypervisor<font color="#E5E5E5"> making the the</font>

587
00:29:47,160 --> 00:29:54,420
<font color="#E5E5E5">address space and</font><font color="#CCCCCC"> VMs which in software</font>

588
00:29:50,150 --> 00:29:56,310
<font color="#E5E5E5">so again I mean</font><font color="#CCCCCC"> if we would think</font><font color="#E5E5E5"> about</font>

589
00:29:54,420 --> 00:29:59,880
<font color="#E5E5E5">this mechanism in more detail if you</font>

590
00:29:56,310 --> 00:30:01,950
<font color="#E5E5E5">would try</font><font color="#CCCCCC"> to improve it maybe this</font><font color="#E5E5E5"> could</font>

591
00:29:59,880 --> 00:30:04,410
really be helpful<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> micro kernels</font>

592
00:30:01,950 --> 00:30:07,860
<font color="#E5E5E5">actually my colleagues are</font><font color="#CCCCCC"> working on</font>

593
00:30:04,410 --> 00:30:12,540
some suggestion<font color="#E5E5E5"> in that that area and</font>

594
00:30:07,860 --> 00:30:15,330
they will they will publish<font color="#CCCCCC"> a paper or</font>

595
00:30:12,540 --> 00:30:18,240
they have already<font color="#E5E5E5"> a pipe paper accepted</font>

596
00:30:15,330 --> 00:30:23,189
at your office this<font color="#E5E5E5"> year</font><font color="#CCCCCC"> so if you are</font>

597
00:30:18,240 --> 00:30:24,630
interested<font color="#CCCCCC"> into this have a look yeah</font>

598
00:30:23,190 --> 00:30:27,450
this is<font color="#E5E5E5"> this is what you have</font><font color="#CCCCCC"> mentioned</font>

599
00:30:24,630 --> 00:30:30,180
<font color="#E5E5E5">this is the</font><font color="#CCCCCC"> cherry capability models</font><font color="#E5E5E5"> so</font>

600
00:30:27,450 --> 00:30:32,130
an evaluation of<font color="#CCCCCC"> how how the</font>

601
00:30:30,180 --> 00:30:36,270
capabilities could be implemented<font color="#E5E5E5"> on</font>

602
00:30:32,130 --> 00:30:40,500
hardware level and then<font color="#E5E5E5"> the this allowed</font>

603
00:30:36,270 --> 00:30:42,480
them to<font color="#E5E5E5"> - this was evaluated on FPGA</font>

604
00:30:40,500 --> 00:30:47,030
soft core but the performance evaluation

605
00:30:42,480 --> 00:30:50,850
was very positive<font color="#CCCCCC"> and it allowed</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> to</font>

606
00:30:47,030 --> 00:30:55,440
<font color="#E5E5E5">have basic</font><font color="#CCCCCC"> eight byte granularity memory</font>

607
00:30:50,850 --> 00:30:58,530
protection you know again the limitation

608
00:30:55,440 --> 00:31:01,760
is that<font color="#E5E5E5"> they have used 64-bit MIPS so</font>

609
00:30:58,530 --> 00:31:04,649
they had to somehow<font color="#E5E5E5"> squeeze in the</font>

610
00:31:01,760 --> 00:31:06,900
<font color="#CCCCCC">bounds and starting addresses somewhere</font>

611
00:31:04,650 --> 00:31:08,970
so so<font color="#CCCCCC"> they're they're obvious decision</font>

612
00:31:06,900 --> 00:31:11,490
<font color="#E5E5E5">was to have dedicated capability</font>

613
00:31:08,970 --> 00:31:15,570
registers<font color="#E5E5E5"> like an extension to do to the</font>

614
00:31:11,490 --> 00:31:18,630
<font color="#E5E5E5">MIPS I saw which they they self confirm</font>

615
00:31:15,570 --> 00:31:24,419
that this<font color="#E5E5E5"> is not so flexible</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> how</font>

616
00:31:18,630 --> 00:31:26,820
<font color="#CCCCCC">about using using the 128 bit pointers</font>

617
00:31:24,420 --> 00:31:30,060
<font color="#E5E5E5">and embed the capability under the virus</font>

618
00:31:26,820 --> 00:31:31,379
directly<font color="#E5E5E5"> in them actually if</font><font color="#CCCCCC"> you look on</font>

619
00:31:30,060 --> 00:31:34,169
<font color="#E5E5E5">Intel MPX</font>

620
00:31:31,380 --> 00:31:35,880
this is a similar<font color="#E5E5E5"> idea that again has</font>

621
00:31:34,170 --> 00:31:39,900
been already<font color="#E5E5E5"> implemented in some of the</font>

622
00:31:35,880 --> 00:31:42,810
newest into CPUs according<font color="#E5E5E5"> to what</font>

623
00:31:39,900 --> 00:31:44,670
have read the implementations is not so

624
00:31:42,810 --> 00:31:47,190
great<font color="#CCCCCC"> I mean the</font><font color="#E5E5E5"> performance benefits</font>

625
00:31:44,670 --> 00:31:50,190
<font color="#E5E5E5">compared</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> bow</font><font color="#E5E5E5"> software based</font>

626
00:31:47,190 --> 00:31:54,810
bound checking this<font color="#E5E5E5"> is very minor and</font>

627
00:31:50,190 --> 00:31:59,550
the overhead<font color="#E5E5E5"> is of step of setting up</font>

628
00:31:54,810 --> 00:32:04,530
this<font color="#E5E5E5"> paint is not good but if it'll even</font>

629
00:31:59,550 --> 00:32:10,830
<font color="#E5E5E5">do it does it</font><font color="#CCCCCC"> so why not</font><font color="#E5E5E5"> try harder okay</font>

630
00:32:04,530 --> 00:32:14,160
so to sum up<font color="#E5E5E5"> I really think that we have</font>

631
00:32:10,830 --> 00:32:20,300
done as the microkernel community a lot

632
00:32:14,160 --> 00:32:24,480
<font color="#E5E5E5">of work first explaining to people that</font>

633
00:32:20,300 --> 00:32:26,750
suffer<font color="#E5E5E5"> dependability or computer system</font>

634
00:32:24,480 --> 00:32:30,810
the best dependability safety<font color="#CCCCCC"> security</font>

635
00:32:26,750 --> 00:32:36,090
stuff like<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> are</font>

636
00:32:30,810 --> 00:32:40,230
important and those<font color="#CCCCCC"> goals cannot be</font>

637
00:32:36,090 --> 00:32:41,879
<font color="#E5E5E5">achieved by using</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> poor software</font>

638
00:32:40,230 --> 00:32:44,220
architecture like a monolithic

639
00:32:41,880 --> 00:32:45,750
architecture<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> this applies</font><font color="#CCCCCC"> not</font>

640
00:32:44,220 --> 00:32:48,150
only to operating<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> this obviously</font>

641
00:32:45,750 --> 00:32:52,550
<font color="#E5E5E5">applies everywhere and see</font><font color="#CCCCCC"> micro</font>

642
00:32:48,150 --> 00:32:57,690
<font color="#CCCCCC">services but I mean we have</font><font color="#E5E5E5"> been always</font>

643
00:32:52,550 --> 00:33:00,180
<font color="#E5E5E5">struggling to to explain to people</font><font color="#CCCCCC"> that</font>

644
00:32:57,690 --> 00:33:02,400
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are they</font><font color="#E5E5E5"> have to pay some price</font>

645
00:33:00,180 --> 00:33:08,460
for for these<font color="#E5E5E5"> required for for these</font>

646
00:33:02,400 --> 00:33:10,410
assurances<font color="#E5E5E5"> it's funny that when when</font>

647
00:33:08,460 --> 00:33:14,700
<font color="#E5E5E5">there there are vulnerabilities such</font><font color="#CCCCCC"> as</font>

648
00:33:10,410 --> 00:33:17,730
<font color="#CCCCCC">Spector or</font><font color="#E5E5E5"> mount meltdown suddenly</font>

649
00:33:14,700 --> 00:33:19,880
everybody accepts a five to<font color="#CCCCCC"> ten to</font>

650
00:33:17,730 --> 00:33:22,950
fifteen<font color="#CCCCCC"> percent</font><font color="#E5E5E5"> performance slowdown</font>

651
00:33:19,880 --> 00:33:25,800
just to get you know<font color="#CCCCCC"> the assurances we</font>

652
00:33:22,950 --> 00:33:28,980
were always<font color="#E5E5E5"> thinking we are having but</font>

653
00:33:25,800 --> 00:33:31,169
if we we would propose that<font color="#E5E5E5"> we can have</font>

654
00:33:28,980 --> 00:33:33,780
more<font color="#CCCCCC"> assurances</font><font color="#E5E5E5"> we can have safer</font><font color="#CCCCCC"> safer</font>

655
00:33:31,170 --> 00:33:37,470
<font color="#E5E5E5">you know systems we just have to pay a</font>

656
00:33:33,780 --> 00:33:41,730
<font color="#E5E5E5">small price</font><font color="#CCCCCC"> for it I mean</font><font color="#E5E5E5"> that we are so</font>

657
00:33:37,470 --> 00:33:43,950
<font color="#CCCCCC">suddenly</font><font color="#E5E5E5"> being rejected so let's think</font>

658
00:33:41,730 --> 00:33:46,260
about<font color="#E5E5E5"> the think out of the box and let's</font>

659
00:33:43,950 --> 00:33:52,309
design our<font color="#E5E5E5"> hardware in such a way</font><font color="#CCCCCC"> that</font>

660
00:33:46,260 --> 00:33:54,750
nobody<font color="#E5E5E5"> could complain anymore and maybe</font>

661
00:33:52,309 --> 00:33:57,389
sorry I need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mention my colleagues</font>

662
00:33:54,750 --> 00:33:59,460
from from from<font color="#E5E5E5"> Huawei who who have</font>

663
00:33:57,390 --> 00:34:02,400
contributed to<font color="#E5E5E5"> the ideas I have</font>

664
00:33:59,460 --> 00:34:04,890
presented<font color="#E5E5E5"> but what I wanted to say also</font>

665
00:34:02,400 --> 00:34:06,000
that if you really<font color="#CCCCCC"> would like</font><font color="#E5E5E5"> to do</font>

666
00:34:04,890 --> 00:34:10,980
<font color="#CCCCCC">something</font><font color="#E5E5E5"> about this</font>

667
00:34:06,000 --> 00:34:13,320
practically<font color="#CCCCCC"> I'm opening a new R&D lab in</font>

668
00:34:10,980 --> 00:34:16,020
Hawaii<font color="#E5E5E5"> which will be located in Dresden</font>

669
00:34:13,320 --> 00:34:19,889
and<font color="#E5E5E5"> obviously the location was not</font>

670
00:34:16,020 --> 00:34:23,780
<font color="#E5E5E5">chosen randomly</font><font color="#CCCCCC"> and we would like to</font>

671
00:34:19,889 --> 00:34:26,369
have a very<font color="#E5E5E5"> very balanced mix between</font>

672
00:34:23,780 --> 00:34:28,790
basic<font color="#CCCCCC"> research so</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> like I have</font>

673
00:34:26,369 --> 00:34:31,800
<font color="#E5E5E5">presented here something</font><font color="#CCCCCC"> like 40% and</font>

674
00:34:28,790 --> 00:34:33,600
<font color="#CCCCCC">obviously some</font><font color="#E5E5E5"> practical development we</font>

675
00:34:31,800 --> 00:34:36,270
won't be you know<font color="#E5E5E5"> making products we</font>

676
00:34:33,600 --> 00:34:39,210
will<font color="#E5E5E5"> be an RD unit still but we will</font>

677
00:34:36,270 --> 00:34:41,550
obviously<font color="#E5E5E5"> try to contribute to to our</font>

678
00:34:39,210 --> 00:34:44,510
product lines which is also<font color="#E5E5E5"> good because</font>

679
00:34:41,550 --> 00:34:47,369
<font color="#E5E5E5">we have clear or we should have clear</font>

680
00:34:44,510 --> 00:34:49,560
requirements from our products and you

681
00:34:47,369 --> 00:34:51,800
know<font color="#E5E5E5"> our</font><font color="#CCCCCC"> company's producing a lot of</font>

682
00:34:49,560 --> 00:34:54,659
<font color="#E5E5E5">hardware and if we would be interested</font>

683
00:34:51,800 --> 00:34:58,350
<font color="#CCCCCC">in</font><font color="#E5E5E5"> working on this please let me</font><font color="#CCCCCC"> know</font>

684
00:34:54,659 --> 00:35:02,609
<font color="#CCCCCC">please</font><font color="#E5E5E5"> contact me</font><font color="#CCCCCC"> by any means one side</font>

685
00:34:58,350 --> 00:35:07,470
<font color="#E5E5E5">note we own high silicon which</font><font color="#CCCCCC"> is one of</font>

686
00:35:02,609 --> 00:35:10,799
the one one of the major<font color="#E5E5E5"> risk</font><font color="#CCCCCC"> so one of</font>

687
00:35:07,470 --> 00:35:13,109
the major ARM chip producers so we have

688
00:35:10,800 --> 00:35:19,640
the possibility<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

689
00:35:13,109 --> 00:35:19,640
change the<font color="#E5E5E5"> hardware that's</font><font color="#CCCCCC"> it thank</font><font color="#E5E5E5"> you</font>

690
00:35:22,320 --> 00:35:49,320
and if yes<font color="#E5E5E5"> please okay support and all</font>

691
00:35:46,440 --> 00:35:57,240
of them<font color="#CCCCCC"> most of that stuff implemented</font>

692
00:35:49,320 --> 00:35:59,820
in micro so now<font color="#E5E5E5"> why did these approaches</font>

693
00:35:57,240 --> 00:36:02,339
fail<font color="#E5E5E5"> I think the idea was Moore's law</font>

694
00:35:59,820 --> 00:36:05,400
killed them because<font color="#E5E5E5"> regular general</font>

695
00:36:02,340 --> 00:36:07,230
<font color="#CCCCCC">processes</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> faster so to kill them we</font>

696
00:36:05,400 --> 00:36:08,760
are no<font color="#E5E5E5"> longer in that situation so</font><font color="#CCCCCC"> that</font>

697
00:36:07,230 --> 00:36:13,020
might be<font color="#E5E5E5"> the</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> to time</font><font color="#CCCCCC"> Boyd's</font>

698
00:36:08,760 --> 00:36:14,430
<font color="#E5E5E5">actually yes and when we were</font><font color="#CCCCCC"> also</font>

699
00:36:13,020 --> 00:36:16,200
<font color="#CCCCCC">thinking and research about</font><font color="#E5E5E5"> some of</font>

700
00:36:14,430 --> 00:36:17,879
these ideas<font color="#E5E5E5"> like people have been</font>

701
00:36:16,200 --> 00:36:26,549
working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> cash opening machines which</font>

702
00:36:17,880 --> 00:36:27,660
don't have<font color="#CCCCCC"> direct access to yes</font><font color="#E5E5E5"> thank</font>

703
00:36:26,550 --> 00:36:30,480
you<font color="#E5E5E5"> for the comment</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to quickly</font>

704
00:36:27,660 --> 00:36:32,759
summarize<font color="#CCCCCC"> for the stream basically your</font>

705
00:36:30,480 --> 00:36:37,260
idea is that we are<font color="#E5E5E5"> in the precisely</font>

706
00:36:32,760 --> 00:36:39,210
good moment in time<font color="#CCCCCC"> to do something</font><font color="#E5E5E5"> like</font>

707
00:36:37,260 --> 00:36:42,480
this because Moore's<font color="#E5E5E5"> law is no longer</font>

708
00:36:39,210 --> 00:36:44,130
applying and stuff like that<font color="#E5E5E5"> so we need</font>

709
00:36:42,480 --> 00:36:47,280
to do something<font color="#CCCCCC"> to improve the</font>

710
00:36:44,130 --> 00:36:49,830
performance<font color="#E5E5E5"> in generally speaking</font><font color="#CCCCCC"> and I</font>

711
00:36:47,280 --> 00:36:52,560
would add<font color="#E5E5E5"> to your comment my command</font>

712
00:36:49,830 --> 00:36:54,870
that we have<font color="#E5E5E5"> risk</font><font color="#CCCCCC"> right now</font><font color="#E5E5E5"> and this is</font>

713
00:36:52,560 --> 00:36:57,840
<font color="#CCCCCC">a huge opportunity to</font><font color="#E5E5E5"> actually you</font><font color="#CCCCCC"> know</font>

714
00:36:54,870 --> 00:36:59,730
create a totally<font color="#CCCCCC"> new open modular</font>

715
00:36:57,840 --> 00:37:02,460
hardware architecture<font color="#E5E5E5"> that actually</font>

716
00:36:59,730 --> 00:37:09,420
might have<font color="#E5E5E5"> some industrial traction so</font>

717
00:37:02,460 --> 00:37:11,490
let's let's take the<font color="#CCCCCC"> opportunity</font><font color="#E5E5E5"> I mean</font>

718
00:37:09,420 --> 00:37:13,860
I mean there<font color="#CCCCCC"> wouldn't be in</font><font color="#E5E5E5"> principle</font>

719
00:37:11,490 --> 00:37:16,470
<font color="#E5E5E5">ignorance of but on the other hand we</font>

720
00:37:13,860 --> 00:37:20,800
have a full arm arm<font color="#E5E5E5"> license so we could</font>

721
00:37:16,470 --> 00:37:22,200
even<font color="#E5E5E5"> change</font><font color="#CCCCCC"> arm if you thank you</font>

722
00:37:20,800 --> 00:37:24,260
[Applause]

723
00:37:22,200 --> 00:37:24,259
you

