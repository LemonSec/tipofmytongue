1
00:00:05,230 --> 00:00:11,000
so welcome<font color="#CCCCCC"> back again</font>

2
00:00:08,540 --> 00:00:12,680
our next<font color="#E5E5E5"> speaker is</font><font color="#CCCCCC"> making seconder he's</font>

3
00:00:11,000 --> 00:00:14,360
a core team member Postgres<font color="#E5E5E5"> committer</font>

4
00:00:12,680 --> 00:00:15,830
post-christmas<font color="#E5E5E5"> a contributor everything</font>

5
00:00:14,360 --> 00:00:17,570
about you know<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most of things about</font>

6
00:00:15,830 --> 00:00:21,880
<font color="#E5E5E5">Postgres and now he's going to talk</font>

7
00:00:17,570 --> 00:00:21,880
<font color="#CCCCCC">about post Chris 11 features</font><font color="#E5E5E5"> thank you</font>

8
00:00:21,910 --> 00:00:26,460
[Applause]

9
00:00:37,010 --> 00:00:43,440
now we're on yes technology<font color="#E5E5E5"> I'm gonna</font>

10
00:00:41,789 --> 00:00:47,129
say good morning even<font color="#E5E5E5"> though it's</font><font color="#CCCCCC"> enough</font>

11
00:00:43,440 --> 00:00:49,229
noon because<font color="#E5E5E5"> we consider it morning</font><font color="#CCCCCC"> and</font>

12
00:00:47,129 --> 00:00:51,119
I<font color="#E5E5E5"> just wanna make</font><font color="#CCCCCC"> one more note for the</font>

13
00:00:49,229 --> 00:00:54,360
record<font color="#CCCCCC"> and for devaron before I get</font>

14
00:00:51,119 --> 00:00:55,920
started<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> no and then we're good</font>

15
00:00:54,360 --> 00:00:57,869
<font color="#CCCCCC">to go</font>

16
00:00:55,920 --> 00:01:01,289
so we're I'm here today<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

17
00:00:57,869 --> 00:01:04,619
post<font color="#CCCCCC"> grades 11 who's already using</font>

18
00:01:01,289 --> 00:01:11,789
Postgres<font color="#E5E5E5"> 11 it's good who's already</font>

19
00:01:04,619 --> 00:01:13,800
using<font color="#CCCCCC"> Postgres</font><font color="#E5E5E5"> 12 you guys are boring so</font>

20
00:01:11,789 --> 00:01:15,330
<font color="#CCCCCC">staring said my name</font><font color="#E5E5E5"> is Magnus Hagler I</font>

21
00:01:13,800 --> 00:01:17,819
work for a company<font color="#CCCCCC"> called red</font><font color="#E5E5E5"> Berlin</font><font color="#CCCCCC"> Pro</font>

22
00:01:15,330 --> 00:01:19,319
<font color="#E5E5E5">we're in open source services and</font>

23
00:01:17,819 --> 00:01:22,310
consultancy business<font color="#E5E5E5"> in the Scandinavian</font>

24
00:01:19,319 --> 00:01:24,810
<font color="#E5E5E5">area I'm out of our Stockholm office</font>

25
00:01:22,310 --> 00:01:27,119
<font color="#E5E5E5">where I work</font><font color="#CCCCCC"> well primarily</font><font color="#E5E5E5"> with</font>

26
00:01:24,810 --> 00:01:28,920
databases<font color="#E5E5E5"> and unsurprisingly</font><font color="#CCCCCC"> that means</font>

27
00:01:27,119 --> 00:01:29,549
<font color="#E5E5E5">Postgres in our case that's kind of why</font>

28
00:01:28,920 --> 00:01:31,799
I'm<font color="#CCCCCC"> here</font>

29
00:01:29,549 --> 00:01:33,479
within the Postgres project<font color="#E5E5E5"> I'm one of</font>

30
00:01:31,799 --> 00:01:36,539
the core team<font color="#CCCCCC"> members on one of the</font>

31
00:01:33,479 --> 00:01:38,310
committers on the database back-end<font color="#E5E5E5"> and</font>

32
00:01:36,539 --> 00:01:41,429
<font color="#E5E5E5">I do a lot of work for</font><font color="#CCCCCC"> posters</font><font color="#E5E5E5"> Europe</font>

33
00:01:38,310 --> 00:01:43,200
which<font color="#E5E5E5"> is the nonprofit that coordinates</font>

34
00:01:41,429 --> 00:01:45,300
a lot of these activities across your

35
00:01:43,200 --> 00:01:48,450
for one thing<font color="#E5E5E5"> our dev room here today</font>

36
00:01:45,300 --> 00:01:52,018
and the<font color="#E5E5E5"> P G day that we had on Friday</font>

37
00:01:48,450 --> 00:01:55,470
more downtown but let's talk<font color="#CCCCCC"> about</font>

38
00:01:52,019 --> 00:01:58,369
posters<font color="#E5E5E5"> 11 and let's</font><font color="#CCCCCC"> talk about the new</font>

39
00:01:55,470 --> 00:02:01,590
things in<font color="#E5E5E5"> Postgres 11 some of you have</font>

40
00:01:58,369 --> 00:02:02,970
seen<font color="#E5E5E5"> these things before I do this sort</font>

41
00:02:01,590 --> 00:02:03,750
<font color="#E5E5E5">of the new version</font><font color="#CCCCCC"> of post press talk</font>

42
00:02:02,970 --> 00:02:05,819
every now and then

43
00:02:03,750 --> 00:02:07,920
the<font color="#CCCCCC"> format's the same</font><font color="#E5E5E5"> luckily the</font>

44
00:02:05,819 --> 00:02:11,940
content is different<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are actually</font>

45
00:02:07,920 --> 00:02:14,040
new things in<font color="#E5E5E5"> post press 11 and as with</font>

46
00:02:11,940 --> 00:02:17,300
all post press releases<font color="#E5E5E5"> we go for</font>

47
00:02:14,040 --> 00:02:22,230
approximately one release per year

48
00:02:17,300 --> 00:02:24,060
<font color="#E5E5E5">targeted at release in September</font><font color="#CCCCCC"> what</font>

49
00:02:22,230 --> 00:02:27,959
happens then<font color="#E5E5E5"> is the Postgres 11 actually</font>

50
00:02:24,060 --> 00:02:31,950
<font color="#E5E5E5">started in August of 2017 when we</font>

51
00:02:27,959 --> 00:02:33,959
branched off post was version<font color="#E5E5E5"> 10 at that</font>

52
00:02:31,950 --> 00:02:35,488
point we opened up the<font color="#E5E5E5"> development of</font>

53
00:02:33,959 --> 00:02:38,819
our master branch<font color="#E5E5E5"> for what would become</font>

54
00:02:35,489 --> 00:02:40,260
<font color="#E5E5E5">Postgres 11 now in post press everybody</font>

55
00:02:38,819 --> 00:02:42,060
has you know their own<font color="#E5E5E5"> names for</font>

56
00:02:40,260 --> 00:02:44,129
<font color="#E5E5E5">everything we work with something</font><font color="#CCCCCC"> that</font>

57
00:02:42,060 --> 00:02:45,749
we call commit<font color="#E5E5E5"> fests which is basically</font>

58
00:02:44,129 --> 00:02:47,179
our way of<font color="#E5E5E5"> doing iterative development</font>

59
00:02:45,749 --> 00:02:48,890
where we<font color="#E5E5E5"> do</font>

60
00:02:47,180 --> 00:02:51,500
idea<font color="#CCCCCC"> associates</font><font color="#E5E5E5"> a because we all know</font>

61
00:02:48,890 --> 00:02:53,869
<font color="#E5E5E5">how well plans work</font><font color="#CCCCCC"> but the</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font>

62
00:02:51,500 --> 00:02:56,959
<font color="#CCCCCC">do one month worth of</font><font color="#E5E5E5"> building features</font>

63
00:02:53,870 --> 00:02:58,219
<font color="#E5E5E5">and then one month worth of reviewing</font>

64
00:02:56,959 --> 00:03:00,500
and<font color="#E5E5E5"> then committing these features</font>

65
00:02:58,219 --> 00:03:02,620
that's the commit fest<font color="#E5E5E5"> and then we just</font>

66
00:03:00,500 --> 00:03:04,639
do rinse repeat that for four times

67
00:03:02,620 --> 00:03:07,159
<font color="#E5E5E5">which you know if you do the math that's</font>

68
00:03:04,639 --> 00:03:08,870
eight months not<font color="#CCCCCC"> 12</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> then it</font><font color="#E5E5E5"> takes a</font>

69
00:03:07,159 --> 00:03:11,840
while<font color="#E5E5E5"> to stabilize it and get it out to</font>

70
00:03:08,870 --> 00:03:15,829
<font color="#CCCCCC">be an actual release so</font><font color="#E5E5E5"> we started</font><font color="#CCCCCC"> in</font>

71
00:03:11,840 --> 00:03:19,310
<font color="#CCCCCC">August of 2017 and we finished in almost</font>

72
00:03:15,829 --> 00:03:21,230
September 2018<font color="#E5E5E5"> it some people says it</font>

73
00:03:19,310 --> 00:03:23,150
was October but<font color="#E5E5E5"> you know we can pretend</font>

74
00:03:21,230 --> 00:03:24,679
that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> almost September we're</font><font color="#CCCCCC"> only</font>

75
00:03:23,150 --> 00:03:26,650
less than<font color="#CCCCCC"> a month late it's not all that</font>

76
00:03:24,680 --> 00:03:28,359
<font color="#CCCCCC">bad so the release has been out since</font>

77
00:03:26,650 --> 00:03:30,530
<font color="#E5E5E5">October of 2018</font>

78
00:03:28,359 --> 00:03:32,150
which is why I guess I'm actually

79
00:03:30,530 --> 00:03:33,859
surprised<font color="#CCCCCC"> that so many</font><font color="#E5E5E5"> people put their</font>

80
00:03:32,150 --> 00:03:36,379
hand up for<font color="#E5E5E5"> that you're already running</font>

81
00:03:33,859 --> 00:03:38,480
<font color="#CCCCCC">Postgres</font><font color="#E5E5E5"> eleven that's great news well I</font>

82
00:03:36,379 --> 00:03:41,870
<font color="#E5E5E5">hope it's great news I hope you know it</font>

83
00:03:38,480 --> 00:03:44,780
<font color="#CCCCCC">actually works for</font><font color="#E5E5E5"> you but that's</font>

84
00:03:41,870 --> 00:03:46,730
<font color="#E5E5E5">actually unusually fast</font><font color="#CCCCCC"> about this</font>

85
00:03:44,780 --> 00:03:48,109
<font color="#CCCCCC">foreign</font><font color="#E5E5E5"> to release I would normally see</font>

86
00:03:46,730 --> 00:03:49,700
fewer people<font color="#E5E5E5"> who are actually</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this</font>

87
00:03:48,109 --> 00:03:52,639
version<font color="#E5E5E5"> and more people on the previous</font>

88
00:03:49,700 --> 00:03:54,619
version anyway<font color="#CCCCCC"> let's get</font><font color="#E5E5E5"> into the</font>

89
00:03:52,639 --> 00:03:56,900
features<font color="#CCCCCC"> that we want</font><font color="#E5E5E5"> to talk about here</font>

90
00:03:54,620 --> 00:03:59,840
<font color="#E5E5E5">I've tried to separate them up a little</font>

91
00:03:56,900 --> 00:04:03,159
<font color="#E5E5E5">bit into four sections look at DBA</font><font color="#CCCCCC"> and</font>

92
00:03:59,840 --> 00:04:05,599
<font color="#E5E5E5">administration a sequel and developer</font>

93
00:04:03,159 --> 00:04:07,250
backup and replication and then just

94
00:04:05,599 --> 00:04:10,369
sort<font color="#CCCCCC"> of performance</font><font color="#E5E5E5"> because everybody</font>

95
00:04:07,250 --> 00:04:12,139
loves performance<font color="#CCCCCC"> and there's always you</font>

96
00:04:10,370 --> 00:04:15,949
<font color="#E5E5E5">know new interesting performance things</font>

97
00:04:12,139 --> 00:04:18,228
<font color="#E5E5E5">coming out so let's start in the area of</font>

98
00:04:15,949 --> 00:04:20,299
DBA<font color="#CCCCCC"> and administration first what what's</font>

99
00:04:18,228 --> 00:04:23,360
the<font color="#E5E5E5"> actual difference between</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> DBA and</font>

100
00:04:20,298 --> 00:04:25,099
<font color="#E5E5E5">developer today with DBA is to</font>

101
00:04:23,360 --> 00:04:28,430
development and developers do whatever

102
00:04:25,099 --> 00:04:31,550
<font color="#E5E5E5">and deviating but I just decided to</font>

103
00:04:28,430 --> 00:04:34,580
<font color="#E5E5E5">split saying well if it's used through</font>

104
00:04:31,550 --> 00:04:36,830
SQL<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it's developer and if it's you</font>

105
00:04:34,580 --> 00:04:42,229
know config file<font color="#E5E5E5"> and</font><font color="#CCCCCC"> command-line then</font>

106
00:04:36,830 --> 00:04:44,750
it's at DBA<font color="#CCCCCC"> so let's start</font><font color="#E5E5E5"> with a small</font>

107
00:04:42,229 --> 00:04:46,550
<font color="#CCCCCC">feature</font><font color="#E5E5E5"> or potentially big depending on</font>

108
00:04:44,750 --> 00:04:47,930
whether you need it<font color="#E5E5E5"> those</font><font color="#CCCCCC"> of you who</font>

109
00:04:46,550 --> 00:04:49,280
worked with<font color="#E5E5E5"> Postgres for a while have</font>

110
00:04:47,930 --> 00:04:52,400
probably<font color="#E5E5E5"> run into</font><font color="#CCCCCC"> the fact</font><font color="#E5E5E5"> that our</font>

111
00:04:49,280 --> 00:04:54,948
<font color="#E5E5E5">transaction log or our Wow</font><font color="#CCCCCC"> is made up of</font>

112
00:04:52,400 --> 00:04:57,260
<font color="#CCCCCC">sixteen megabyte files and they're</font>

113
00:04:54,949 --> 00:04:59,599
always sixteen megabytes<font color="#E5E5E5"> and if you</font>

114
00:04:57,260 --> 00:05:00,740
happen<font color="#CCCCCC"> to generate a large amount of</font>

115
00:04:59,599 --> 00:05:03,169
transactions when you

116
00:05:00,740 --> 00:05:05,210
do your log archiving<font color="#CCCCCC"> for backups</font><font color="#E5E5E5"> it you</font>

117
00:05:03,169 --> 00:05:07,549
know sends the files off one by<font color="#CCCCCC"> one</font><font color="#E5E5E5"> and</font>

118
00:05:05,210 --> 00:05:09,440
if you generate<font color="#E5E5E5"> many of these files</font>

119
00:05:07,550 --> 00:05:11,449
every second you know generate a few

120
00:05:09,440 --> 00:05:13,340
hundred megabytes in a second that's<font color="#E5E5E5"> a</font>

121
00:05:11,449 --> 00:05:16,220
lot of<font color="#CCCCCC"> overhead</font><font color="#E5E5E5"> in just transmitting the</font>

122
00:05:13,340 --> 00:05:18,560
files<font color="#CCCCCC"> you've actually</font><font color="#E5E5E5"> been able to I</font>

123
00:05:16,220 --> 00:05:20,479
think<font color="#E5E5E5"> from the day</font><font color="#CCCCCC"> that transaction log</font>

124
00:05:18,560 --> 00:05:23,180
was added to<font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> changed the size</font>

125
00:05:20,479 --> 00:05:25,550
of<font color="#E5E5E5"> these files</font><font color="#CCCCCC"> you just had</font><font color="#E5E5E5"> to recompile</font>

126
00:05:23,180 --> 00:05:27,380
from source and get an<font color="#E5E5E5"> incompatible data</font>

127
00:05:25,550 --> 00:05:30,770
directory format<font color="#E5E5E5"> which you probably</font>

128
00:05:27,380 --> 00:05:34,430
didn't<font color="#CCCCCC"> want 11 will let you configure</font>

129
00:05:30,770 --> 00:05:35,810
this while segment size by say giving a

130
00:05:34,430 --> 00:05:37,340
parameter when you initialize the

131
00:05:35,810 --> 00:05:39,229
database<font color="#E5E5E5"> you still won't be able to</font>

132
00:05:37,340 --> 00:05:42,318
<font color="#E5E5E5">change it once you've initialized your</font>

133
00:05:39,229 --> 00:05:45,800
cluster<font color="#E5E5E5"> but at initial point you can set</font>

134
00:05:42,319 --> 00:05:47,870
it I would expect the<font color="#CCCCCC"> normal use case</font>

135
00:05:45,800 --> 00:05:49,669
for this<font color="#CCCCCC"> is if you have a very high</font>

136
00:05:47,870 --> 00:05:51,440
<font color="#E5E5E5">transaction rate system that</font><font color="#CCCCCC"> generated</font>

137
00:05:49,669 --> 00:05:53,599
lots of<font color="#E5E5E5"> transaction</font><font color="#CCCCCC"> log you want this to</font>

138
00:05:51,440 --> 00:05:55,610
be a higher<font color="#CCCCCC"> number you can also set it</font>

139
00:05:53,599 --> 00:05:58,370
to<font color="#E5E5E5"> be a lower number if you are really</font>

140
00:05:55,610 --> 00:06:01,750
resource constrained<font color="#E5E5E5"> and things like 32</font>

141
00:05:58,370 --> 00:06:04,460
megabytes of disk<font color="#E5E5E5"> space is way too much</font>

142
00:06:01,750 --> 00:06:06,320
<font color="#CCCCCC">but most</font><font color="#E5E5E5"> cases today when we're dealing</font>

143
00:06:04,460 --> 00:06:09,830
with database servers<font color="#CCCCCC"> were 30 megabytes</font>

144
00:06:06,320 --> 00:06:13,009
<font color="#CCCCCC">it's really not</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> but there</font>

145
00:06:09,830 --> 00:06:13,880
could be a use case<font color="#E5E5E5"> for</font><font color="#CCCCCC"> it the next</font>

146
00:06:13,009 --> 00:06:16,310
<font color="#CCCCCC">thing I want</font><font color="#E5E5E5"> to mention is something</font>

147
00:06:13,880 --> 00:06:19,639
<font color="#CCCCCC">that can</font><font color="#E5E5E5"> potentially break your things</font>

148
00:06:16,310 --> 00:06:23,030
<font color="#E5E5E5">potentially who is using the plug-in PG</font>

149
00:06:19,639 --> 00:06:24,349
stat statements today okay the rest of

150
00:06:23,030 --> 00:06:27,198
<font color="#E5E5E5">you</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> really look into the</font><font color="#CCCCCC"> plug-in</font>

151
00:06:24,349 --> 00:06:29,030
<font color="#E5E5E5">PG stack statements it's awesome it</font>

152
00:06:27,199 --> 00:06:31,460
gives you a lot of<font color="#E5E5E5"> insight into</font><font color="#CCCCCC"> what</font>

153
00:06:29,030 --> 00:06:34,099
<font color="#CCCCCC">your system</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually doing in a very</font>

154
00:06:31,460 --> 00:06:36,770
useful format the<font color="#CCCCCC"> PG</font><font color="#E5E5E5"> that statement</font>

155
00:06:34,099 --> 00:06:38,900
tracks your<font color="#E5E5E5"> most used most frequently</font>

156
00:06:36,770 --> 00:06:42,198
<font color="#CCCCCC">used</font><font color="#E5E5E5"> SQL queries in the system across</font>

157
00:06:38,900 --> 00:06:43,669
<font color="#E5E5E5">time and it hashes them and gives you</font>

158
00:06:42,199 --> 00:06:46,819
something called<font color="#CCCCCC"> a</font><font color="#E5E5E5"> query ID which</font>

159
00:06:43,669 --> 00:06:50,508
uniquely identifies<font color="#CCCCCC"> this query prior to</font>

160
00:06:46,819 --> 00:06:53,960
version 11 this query ID was 32 bits<font color="#CCCCCC"> in</font>

161
00:06:50,509 --> 00:06:55,969
<font color="#E5E5E5">11 it's 64 bits normally you don't</font>

162
00:06:53,960 --> 00:06:57,258
really have to care but particularly<font color="#E5E5E5"> if</font>

163
00:06:55,969 --> 00:07:00,289
you have<font color="#CCCCCC"> a system</font><font color="#E5E5E5"> that for example</font>

164
00:06:57,259 --> 00:07:02,240
snapshots the data from this<font color="#E5E5E5"> into into a</font>

165
00:07:00,289 --> 00:07:04,250
monitoring to generate you know<font color="#E5E5E5"> across</font>

166
00:07:02,240 --> 00:07:06,469
time graphs or something<font color="#E5E5E5"> you need to</font>

167
00:07:04,250 --> 00:07:09,229
update that<font color="#E5E5E5"> system as well to support</font>

168
00:07:06,469 --> 00:07:11,599
the<font color="#E5E5E5"> 64 bit version it really is that</font>

169
00:07:09,229 --> 00:07:14,568
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> but there are</font><font color="#E5E5E5"> systems out there</font>

170
00:07:11,599 --> 00:07:17,389
<font color="#CCCCCC">that break</font><font color="#E5E5E5"> it also means if you're</font><font color="#CCCCCC"> using</font>

171
00:07:14,569 --> 00:07:19,330
one of the more common tools around<font color="#E5E5E5"> this</font>

172
00:07:17,389 --> 00:07:22,339
there there<font color="#CCCCCC"> are you</font><font color="#E5E5E5"> know that web</font>

173
00:07:19,330 --> 00:07:23,990
visualization tools for<font color="#CCCCCC"> pg stack</font>

174
00:07:22,339 --> 00:07:25,969
statements<font color="#E5E5E5"> you just need to</font><font color="#CCCCCC"> upgrade them</font>

175
00:07:23,990 --> 00:07:28,550
<font color="#CCCCCC">as far as I know they've all released</font>

176
00:07:25,969 --> 00:07:30,159
updated versions that support it but<font color="#E5E5E5"> you</font>

177
00:07:28,550 --> 00:07:36,499
need to actually<font color="#E5E5E5"> install that</font><font color="#CCCCCC"> version</font>

178
00:07:30,159 --> 00:07:39,589
otherwise it<font color="#CCCCCC"> doesn't help we've added</font>

179
00:07:36,499 --> 00:07:43,129
the<font color="#CCCCCC"> ability to collect statistics on</font>

180
00:07:39,589 --> 00:07:45,770
expression indexes if you've been

181
00:07:43,129 --> 00:07:48,619
tweaking<font color="#CCCCCC"> Postgres query tuning</font><font color="#E5E5E5"> you know</font>

182
00:07:45,770 --> 00:07:50,839
about<font color="#E5E5E5"> the command</font><font color="#CCCCCC"> altar table set</font>

183
00:07:48,619 --> 00:07:52,189
statistics because<font color="#E5E5E5"> you get a bad query</font>

184
00:07:50,839 --> 00:07:54,589
plan you tell<font color="#E5E5E5"> posters we'll look at a</font>

185
00:07:52,189 --> 00:07:56,360
bigger part of<font color="#E5E5E5"> the data to build more</font>

186
00:07:54,589 --> 00:07:59,360
detailed statistics to generate better

187
00:07:56,360 --> 00:08:01,699
query plans and previously you could

188
00:07:59,360 --> 00:08:03,649
only<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that at the column level so you</font>

189
00:08:01,699 --> 00:08:04,909
could say this column we need<font color="#E5E5E5"> to collect</font>

190
00:08:03,649 --> 00:08:07,099
more data<font color="#E5E5E5"> about this column</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

191
00:08:04,909 --> 00:08:08,930
better query plans making planning<font color="#E5E5E5"> more</font>

192
00:08:07,099 --> 00:08:12,319
expensive<font color="#CCCCCC"> trade-off for a better career</font>

193
00:08:08,930 --> 00:08:13,610
<font color="#CCCCCC">plan sorry the new thing in 11 is that</font>

194
00:08:12,319 --> 00:08:15,740
you're not<font color="#E5E5E5"> able to do this for</font>

195
00:08:13,610 --> 00:08:18,469
expressional indexes and expressional

196
00:08:15,740 --> 00:08:19,759
<font color="#CCCCCC">indexes you create an index</font><font color="#E5E5E5"> on well</font>

197
00:08:18,469 --> 00:08:23,830
something that's an expression<font color="#CCCCCC"> so it's</font>

198
00:08:19,759 --> 00:08:28,580
<font color="#E5E5E5">not actually a call</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this example here</font>

199
00:08:23,830 --> 00:08:33,019
<font color="#CCCCCC">created and I've created an index on X</font>

200
00:08:28,580 --> 00:08:34,968
and then you know<font color="#CCCCCC"> x y and z + t the last</font>

201
00:08:33,019 --> 00:08:36,380
<font color="#CCCCCC">thing there is not a column</font><font color="#E5E5E5"> it's an</font>

202
00:08:34,969 --> 00:08:38,269
expression it could be a function<font color="#E5E5E5"> call</font>

203
00:08:36,380 --> 00:08:39,740
<font color="#CCCCCC">to do all sorts of different things and</font>

204
00:08:38,269 --> 00:08:43,698
previously there was<font color="#E5E5E5"> no</font><font color="#CCCCCC"> way to</font><font color="#E5E5E5"> tell</font>

205
00:08:39,740 --> 00:08:46,160
<font color="#E5E5E5">Postgres to look more at that now this</font>

206
00:08:43,698 --> 00:08:47,959
<font color="#E5E5E5">in tax for doing this is ultra index and</font>

207
00:08:46,160 --> 00:08:50,300
then alter column<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> actually give</font>

208
00:08:47,959 --> 00:08:52,819
it<font color="#E5E5E5"> the column ordinal in the index so</font>

209
00:08:50,300 --> 00:08:55,329
the third column in the index because

210
00:08:52,819 --> 00:08:58,189
<font color="#E5E5E5">columns and indexes don't have names</font>

211
00:08:55,329 --> 00:09:00,469
<font color="#E5E5E5">they just don't have names when you do</font>

212
00:08:58,189 --> 00:09:03,589
<font color="#E5E5E5">on a table you'd say alter index blah</font>

213
00:09:00,470 --> 00:09:05,240
alter column my column<font color="#E5E5E5"> but since it</font>

214
00:09:03,589 --> 00:09:08,000
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a name</font><font color="#E5E5E5"> you have to give it</font>

215
00:09:05,240 --> 00:09:10,519
a number<font color="#E5E5E5"> other</font><font color="#CCCCCC"> than that the statistics</font>

216
00:09:08,000 --> 00:09:13,250
works the same<font color="#E5E5E5"> the default value</font><font color="#CCCCCC"> is</font>

217
00:09:10,519 --> 00:09:15,139
normally 100<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you increase it collect</font>

218
00:09:13,250 --> 00:09:16,970
more data analyze takes longer query

219
00:09:15,139 --> 00:09:19,639
planning takes longer hopefully you get

220
00:09:16,970 --> 00:09:21,529
a better query<font color="#CCCCCC"> plan</font>

221
00:09:19,639 --> 00:09:24,500
the other big<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> we've done</font><font color="#CCCCCC"> two</font>

222
00:09:21,529 --> 00:09:26,350
indexes is we now have<font color="#CCCCCC"> something</font><font color="#E5E5E5"> called</font>

223
00:09:24,500 --> 00:09:28,720
include indexes

224
00:09:26,350 --> 00:09:30,790
people use<font color="#CCCCCC"> two other</font><font color="#E5E5E5"> databases</font><font color="#CCCCCC"> we'll</font>

225
00:09:28,720 --> 00:09:33,490
also<font color="#E5E5E5"> know the term covering index for</font>

226
00:09:30,790 --> 00:09:35,260
<font color="#E5E5E5">example the idea here</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we can add</font>

227
00:09:33,490 --> 00:09:38,350
<font color="#E5E5E5">columns to</font><font color="#CCCCCC"> our index making them less</font>

228
00:09:35,260 --> 00:09:42,160
efficient then of course<font color="#E5E5E5"> everybody wants</font>

229
00:09:38,350 --> 00:09:45,190
less efficient<font color="#CCCCCC"> in excess right the</font><font color="#E5E5E5"> idea</font>

230
00:09:42,160 --> 00:09:49,149
is we do this<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to be able to use</font>

231
00:09:45,190 --> 00:09:50,860
an index only scan<font color="#E5E5E5"> if you look at</font>

232
00:09:49,149 --> 00:09:52,899
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like the example error have a</font>

233
00:09:50,860 --> 00:09:55,449
unique index<font color="#E5E5E5"> on my table if I have a</font>

234
00:09:52,899 --> 00:09:57,550
unique index<font color="#E5E5E5"> like my primary key then</font>

235
00:09:55,449 --> 00:09:59,529
obviously that<font color="#E5E5E5"> index can be used to look</font>

236
00:09:57,550 --> 00:10:02,469
<font color="#E5E5E5">up things in this column that's unique</font>

237
00:09:59,529 --> 00:10:05,050
if I want to be able<font color="#CCCCCC"> to look up</font><font color="#E5E5E5"> one more</font>

238
00:10:02,470 --> 00:10:07,120
column<font color="#E5E5E5"> by using an index only scan I can</font>

239
00:10:05,050 --> 00:10:08,680
add this column<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the index but this</font>

240
00:10:07,120 --> 00:10:10,839
<font color="#E5E5E5">becomes a problem because</font><font color="#CCCCCC"> now the index</font>

241
00:10:08,680 --> 00:10:12,699
is no<font color="#E5E5E5"> longer unique on my what I thought</font>

242
00:10:10,839 --> 00:10:15,370
was<font color="#E5E5E5"> my primary key right is now unique</font>

243
00:10:12,699 --> 00:10:17,410
<font color="#E5E5E5">across both</font><font color="#CCCCCC"> of the columns and the</font>

244
00:10:15,370 --> 00:10:19,029
difference with include indexes<font color="#E5E5E5"> is when</font>

245
00:10:17,410 --> 00:10:21,490
I say<font color="#E5E5E5"> something like this I say you know</font>

246
00:10:19,029 --> 00:10:23,500
create unique index using<font color="#CCCCCC"> B</font><font color="#E5E5E5"> tree on ID</font>

247
00:10:21,490 --> 00:10:26,350
<font color="#E5E5E5">means it's going to be a regular unique</font>

248
00:10:23,500 --> 00:10:29,170
<font color="#E5E5E5">index on ID and then I say include</font>

249
00:10:26,350 --> 00:10:32,019
second field<font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to add second</font>

250
00:10:29,170 --> 00:10:34,240
field<font color="#E5E5E5"> to the index for every row but not</font>

251
00:10:32,019 --> 00:10:37,930
to the<font color="#E5E5E5"> key so it's still unique only</font>

252
00:10:34,240 --> 00:10:40,000
<font color="#E5E5E5">across ID but</font><font color="#CCCCCC"> at any query referencing</font>

253
00:10:37,930 --> 00:10:42,399
the ID and second field columns and<font color="#E5E5E5"> no</font>

254
00:10:40,000 --> 00:10:44,410
other columns can now be satisfied by an

255
00:10:42,399 --> 00:10:48,220
index only scan<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> never have</font><font color="#E5E5E5"> to</font>

256
00:10:44,410 --> 00:10:50,140
look at the<font color="#E5E5E5"> actual table but for as a</font>

257
00:10:48,220 --> 00:10:52,570
regular index this index just<font color="#E5E5E5"> became</font>

258
00:10:50,140 --> 00:10:56,529
less efficient because<font color="#E5E5E5"> there's more data</font>

259
00:10:52,570 --> 00:10:59,199
<font color="#E5E5E5">in it less data fits in cache so it's a</font>

260
00:10:56,529 --> 00:11:00,820
useful trade-off but<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> something to</font>

261
00:10:59,199 --> 00:11:03,939
consider<font color="#E5E5E5"> that the actual index does</font>

262
00:11:00,820 --> 00:11:09,910
become less efficient<font color="#E5E5E5"> but the idea is</font>

263
00:11:03,940 --> 00:11:13,449
trigger the index only<font color="#E5E5E5"> scans</font><font color="#CCCCCC"> anyone</font>

264
00:11:09,910 --> 00:11:14,439
<font color="#E5E5E5">using the PG pre-warm extension a couple</font>

265
00:11:13,449 --> 00:11:16,959
of people<font color="#E5E5E5"> not too many</font>

266
00:11:14,440 --> 00:11:18,819
it comes in<font color="#E5E5E5"> Postgres contribute pre-warm</font>

267
00:11:16,959 --> 00:11:20,680
has been<font color="#E5E5E5"> around for a while</font><font color="#CCCCCC"> the idea</font>

268
00:11:18,819 --> 00:11:23,079
behind PG pre-warm is for<font color="#E5E5E5"> example if you</font>

269
00:11:20,680 --> 00:11:25,300
need to<font color="#E5E5E5"> restart</font><font color="#CCCCCC"> your server you can</font><font color="#E5E5E5"> run</font>

270
00:11:23,079 --> 00:11:27,029
PG pre-warm it'll snapshot the

271
00:11:25,300 --> 00:11:29,199
information but what's in<font color="#E5E5E5"> your cache</font>

272
00:11:27,029 --> 00:11:32,829
because normally when you restart your

273
00:11:29,199 --> 00:11:34,329
cache goes away so you can tell pre-warm

274
00:11:32,829 --> 00:11:38,170
snapshot did restart and then load it

275
00:11:34,329 --> 00:11:39,370
<font color="#E5E5E5">back and the thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can do now in</font>

276
00:11:38,170 --> 00:11:39,880
<font color="#CCCCCC">postcodes 11 by setting this to</font>

277
00:11:39,370 --> 00:11:41,710
automatic

278
00:11:39,880 --> 00:11:44,740
we can have it just<font color="#CCCCCC"> snapshot every five</font>

279
00:11:41,710 --> 00:11:46,360
<font color="#CCCCCC">minutes and if it crashes</font><font color="#E5E5E5"> or you know</font>

280
00:11:44,740 --> 00:11:47,170
you get a replication failover<font color="#E5E5E5"> or</font>

281
00:11:46,360 --> 00:11:49,870
something like<font color="#E5E5E5"> this it will</font>

282
00:11:47,170 --> 00:11:51,670
<font color="#E5E5E5">automatically load the</font><font color="#CCCCCC"> cache as it</font>

283
00:11:49,870 --> 00:11:54,310
looked up to five<font color="#E5E5E5"> minutes ago</font>

284
00:11:51,670 --> 00:11:55,810
which is normally<font color="#E5E5E5"> good enough now what</font>

285
00:11:54,310 --> 00:11:57,699
<font color="#E5E5E5">it does</font><font color="#CCCCCC"> actually store it</font><font color="#E5E5E5"> doesn't dump</font>

286
00:11:55,810 --> 00:11:59,079
<font color="#E5E5E5">your entire cache so if you have you</font>

287
00:11:57,700 --> 00:12:01,750
know 50 gigs of cache it doesn't write

288
00:11:59,080 --> 00:12:04,540
50 gigs of data<font color="#E5E5E5"> it just</font><font color="#CCCCCC"> writes a list of</font>

289
00:12:01,750 --> 00:12:07,050
which disk blocks were in the cache<font color="#E5E5E5"> not</font>

290
00:12:04,540 --> 00:12:10,000
the contents of<font color="#E5E5E5"> them just</font><font color="#CCCCCC"> a list of them</font>

291
00:12:07,050 --> 00:12:12,219
so in<font color="#CCCCCC"> particular in cases like</font><font color="#E5E5E5"> you know</font>

292
00:12:10,000 --> 00:12:13,930
<font color="#E5E5E5">recovering</font><font color="#CCCCCC"> from replication failover</font><font color="#E5E5E5"> and</font>

293
00:12:12,220 --> 00:12:16,840
things like<font color="#E5E5E5"> that this can be a good way</font>

294
00:12:13,930 --> 00:12:18,489
<font color="#CCCCCC">of</font><font color="#E5E5E5"> saving this terrible performance blip</font>

295
00:12:16,840 --> 00:12:23,230
you<font color="#CCCCCC"> usually</font><font color="#E5E5E5"> get when no data is in the</font>

296
00:12:18,490 --> 00:12:25,690
cache<font color="#E5E5E5"> anymore we've added a bunch</font><font color="#CCCCCC"> of new</font>

297
00:12:23,230 --> 00:12:27,910
default<font color="#E5E5E5"> roles this is part</font><font color="#CCCCCC"> of the steps</font>

298
00:12:25,690 --> 00:12:29,920
towards<font color="#CCCCCC"> getting rid of Super User well</font>

299
00:12:27,910 --> 00:12:31,719
not<font color="#E5E5E5"> really getting rid of Super User but</font>

300
00:12:29,920 --> 00:12:35,380
getting<font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the need</font><font color="#CCCCCC"> to use Super</font>

301
00:12:31,720 --> 00:12:37,330
User<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> three new roles PG</font><font color="#CCCCCC"> read</font>

302
00:12:35,380 --> 00:12:40,540
server files<font color="#CCCCCC"> write server files and</font>

303
00:12:37,330 --> 00:12:42,040
execute server programs they kind<font color="#E5E5E5"> of</font>

304
00:12:40,540 --> 00:12:44,199
tell you what they do right if<font color="#E5E5E5"> you grant</font>

305
00:12:42,040 --> 00:12:46,329
PG read server files to a user they can

306
00:12:44,200 --> 00:12:49,930
read any file<font color="#CCCCCC"> on the server as long as</font>

307
00:12:46,330 --> 00:12:51,820
the post presence on it and if you grant

308
00:12:49,930 --> 00:12:53,790
PG execute server program well they can

309
00:12:51,820 --> 00:12:57,910
execute programs on your<font color="#CCCCCC"> database server</font>

310
00:12:53,790 --> 00:12:59,140
which may<font color="#E5E5E5"> not be</font><font color="#CCCCCC"> the greatest idea</font><font color="#E5E5E5"> but</font>

311
00:12:57,910 --> 00:13:00,930
it depends on who<font color="#E5E5E5"> you're granting</font><font color="#CCCCCC"> into</font>

312
00:12:59,140 --> 00:13:02,920
<font color="#E5E5E5">and it's still better than Super User</font>

313
00:13:00,930 --> 00:13:06,760
<font color="#E5E5E5">because</font><font color="#CCCCCC"> Super User can do all these</font>

314
00:13:02,920 --> 00:13:08,380
things<font color="#E5E5E5"> and more so it's making these</font>

315
00:13:06,760 --> 00:13:10,900
things more granular<font color="#CCCCCC"> and making it</font>

316
00:13:08,380 --> 00:13:15,910
possible<font color="#CCCCCC"> to make it more secure</font>

317
00:13:10,900 --> 00:13:18,550
installation<font color="#CCCCCC"> I think one of the most</font>

318
00:13:15,910 --> 00:13:21,790
<font color="#E5E5E5">requested features</font><font color="#CCCCCC"> in Postgres</font><font color="#E5E5E5"> over many</font>

319
00:13:18,550 --> 00:13:23,439
many<font color="#E5E5E5"> years</font><font color="#CCCCCC"> ultra table</font><font color="#E5E5E5"> add column</font><font color="#CCCCCC"> who's</font>

320
00:13:21,790 --> 00:13:24,849
ever accidentally<font color="#CCCCCC"> done that in</font>

321
00:13:23,440 --> 00:13:27,160
production<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> the column with a</font>

322
00:13:24,850 --> 00:13:29,680
not null and default and<font color="#E5E5E5"> then looked at</font>

323
00:13:27,160 --> 00:13:32,170
<font color="#E5E5E5">the downtown counter as the entire table</font>

324
00:13:29,680 --> 00:13:35,219
was rewritten<font color="#E5E5E5"> well you can now actually</font>

325
00:13:32,170 --> 00:13:37,959
<font color="#E5E5E5">add a column not null with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> default and</font>

326
00:13:35,220 --> 00:13:41,980
it's more<font color="#E5E5E5"> or less instant does no</font><font color="#CCCCCC"> longer</font>

327
00:13:37,960 --> 00:13:45,280
need<font color="#CCCCCC"> to rewrite the table now it does</font>

328
00:13:41,980 --> 00:13:46,660
<font color="#E5E5E5">have to be</font><font color="#CCCCCC"> a non-volatile function you</font>

329
00:13:45,280 --> 00:13:49,030
can't set things like current timestamp

330
00:13:46,660 --> 00:13:51,160
<font color="#CCCCCC">because that would change over</font><font color="#E5E5E5"> time that</font>

331
00:13:49,030 --> 00:13:52,600
<font color="#E5E5E5">would be very strange but you can give</font>

332
00:13:51,160 --> 00:13:52,949
it<font color="#E5E5E5"> an actual default value and what</font>

333
00:13:52,600 --> 00:13:55,110
happen

334
00:13:52,950 --> 00:13:57,780
is that<font color="#E5E5E5"> post-course remembers this and</font>

335
00:13:55,110 --> 00:14:00,060
then<font color="#CCCCCC"> as the table gets rewritten</font><font color="#E5E5E5"> either</font>

336
00:13:57,780 --> 00:14:02,189
by you know you updating something else

337
00:14:00,060 --> 00:14:04,949
in the row<font color="#E5E5E5"> creates a new copy of the row</font>

338
00:14:02,190 --> 00:14:08,310
then it'll materialize<font color="#E5E5E5"> the default value</font>

339
00:14:04,950 --> 00:14:10,260
into that<font color="#CCCCCC"> row so eventually it'll</font><font color="#E5E5E5"> be</font>

340
00:14:08,310 --> 00:14:11,939
<font color="#E5E5E5">like slow updating across the table and</font>

341
00:14:10,260 --> 00:14:14,580
<font color="#CCCCCC">eventually it will be just like</font><font color="#E5E5E5"> it was</font>

342
00:14:11,940 --> 00:14:16,350
<font color="#E5E5E5">before</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it does all of this without</font>

343
00:14:14,580 --> 00:14:18,630
holding an exclusive lock and rewriting

344
00:14:16,350 --> 00:14:23,370
<font color="#E5E5E5">half your database and causing downtime</font>

345
00:14:18,630 --> 00:14:25,260
and evil things so that's I'm sure

346
00:14:23,370 --> 00:14:28,770
everybody has<font color="#E5E5E5"> made that mistake at some</font>

347
00:14:25,260 --> 00:14:31,200
<font color="#E5E5E5">point if you haven't well you will and</font>

348
00:14:28,770 --> 00:14:35,400
<font color="#E5E5E5">luckily it will make much less effect</font>

349
00:14:31,200 --> 00:14:37,140
now<font color="#E5E5E5"> as long</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you set it up right so</font>

350
00:14:35,400 --> 00:14:39,660
let's<font color="#E5E5E5"> take a look at some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> SQL</font>

351
00:14:37,140 --> 00:14:45,930
side of things<font color="#E5E5E5"> who's using Postgres</font>

352
00:14:39,660 --> 00:14:47,219
full-text search<font color="#E5E5E5"> bin in house further in</font>

353
00:14:45,930 --> 00:14:49,439
particularly it doesn't actually<font color="#E5E5E5"> enhance</font>

354
00:14:47,220 --> 00:14:52,050
the the search<font color="#E5E5E5"> itself but there we've</font>

355
00:14:49,440 --> 00:14:54,840
previously had<font color="#E5E5E5"> two</font><font color="#CCCCCC"> TS query which takes</font>

356
00:14:52,050 --> 00:14:57,449
a post with specific syntax<font color="#E5E5E5"> plane</font><font color="#CCCCCC"> to TS</font>

357
00:14:54,840 --> 00:15:00,000
query which takes<font color="#CCCCCC"> a plaintext</font>

358
00:14:57,450 --> 00:15:02,100
phrase to<font color="#E5E5E5"> ts query which takes a phrase</font>

359
00:15:00,000 --> 00:15:04,680
and turns these into the internal query

360
00:15:02,100 --> 00:15:07,080
syntax<font color="#E5E5E5"> now we have web search</font><font color="#CCCCCC"> - ts query</font>

361
00:15:04,680 --> 00:15:10,410
which takes what you expect<font color="#E5E5E5"> and turns it</font>

362
00:15:07,080 --> 00:15:12,180
into<font color="#CCCCCC"> a</font><font color="#E5E5E5"> searching</font><font color="#CCCCCC"> basically it</font><font color="#E5E5E5"> takes you</font>

363
00:15:10,410 --> 00:15:13,920
know this syntax is that we are used<font color="#E5E5E5"> to</font>

364
00:15:12,180 --> 00:15:16,829
<font color="#E5E5E5">using in search engines so you can type</font>

365
00:15:13,920 --> 00:15:18,390
in a foo and bar you can use parentheses

366
00:15:16,830 --> 00:15:20,190
<font color="#CCCCCC">to group things you can do not you can</font>

367
00:15:18,390 --> 00:15:23,010
<font color="#E5E5E5">do all these things in like free text</font>

368
00:15:20,190 --> 00:15:25,080
mode and it will parse those<font color="#E5E5E5"> and turn it</font>

369
00:15:23,010 --> 00:15:28,500
into a reasonable<font color="#CCCCCC"> search query</font><font color="#E5E5E5"> and then</font>

370
00:15:25,080 --> 00:15:31,100
run that<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> would say almost in any</font>

371
00:15:28,500 --> 00:15:33,480
case if you're taking user input<font color="#E5E5E5"> and</font>

372
00:15:31,100 --> 00:15:35,130
<font color="#CCCCCC">doing a search based on it which</font><font color="#E5E5E5"> is not</font>

373
00:15:33,480 --> 00:15:37,260
<font color="#CCCCCC">exactly an uncommon way of using</font><font color="#E5E5E5"> full</font>

374
00:15:35,130 --> 00:15:39,510
<font color="#E5E5E5">text search you probably want to be</font>

375
00:15:37,260 --> 00:15:41,819
<font color="#E5E5E5">using the web search</font><font color="#CCCCCC"> too TS query and in</font>

376
00:15:39,510 --> 00:15:43,400
it's a drop-in replacement<font color="#CCCCCC"> of course the</font>

377
00:15:41,820 --> 00:15:45,810
syntax<font color="#CCCCCC"> changes a</font><font color="#E5E5E5"> bit for the user but</font>

378
00:15:43,400 --> 00:15:49,170
functionality it's just passing<font color="#CCCCCC"> the</font>

379
00:15:45,810 --> 00:15:52,290
search term<font color="#E5E5E5"> run the search then it's</font>

380
00:15:49,170 --> 00:15:54,150
kind of what<font color="#E5E5E5"> you want in almost every</font>

381
00:15:52,290 --> 00:15:56,310
<font color="#E5E5E5">case the previous ones are of course</font>

382
00:15:54,150 --> 00:15:58,380
there if you need<font color="#CCCCCC"> them more control</font><font color="#E5E5E5"> and</font>

383
00:15:56,310 --> 00:16:02,910
<font color="#E5E5E5">if you need to be more specific about</font>

384
00:15:58,380 --> 00:16:05,310
<font color="#E5E5E5">what you're doing Postgres domains have</font>

385
00:16:02,910 --> 00:16:06,410
<font color="#E5E5E5">been enhanced to basically do things</font>

386
00:16:05,310 --> 00:16:07,910
that

387
00:16:06,410 --> 00:16:10,219
they couldn't<font color="#E5E5E5"> do before there were like</font>

388
00:16:07,910 --> 00:16:14,120
<font color="#E5E5E5">little corner cases you can now create</font>

389
00:16:10,220 --> 00:16:15,470
an array over domain and you could order

390
00:16:14,120 --> 00:16:17,180
and you can<font color="#CCCCCC"> create a domain over a</font>

391
00:16:15,470 --> 00:16:19,220
composite type so you<font color="#E5E5E5"> can do a domain</font>

392
00:16:17,180 --> 00:16:21,170
over an array over<font color="#CCCCCC"> a row over an array</font>

393
00:16:19,220 --> 00:16:24,350
<font color="#E5E5E5">over a domain yeah well okay don't do</font>

394
00:16:21,170 --> 00:16:26,900
that<font color="#E5E5E5"> but basically it's been one of</font>

395
00:16:24,350 --> 00:16:28,160
<font color="#E5E5E5">those oh there's a little one box that</font>

396
00:16:26,900 --> 00:16:30,290
wasn't checked<font color="#CCCCCC"> or things you could do</font>

397
00:16:28,160 --> 00:16:33,530
with domains and<font color="#E5E5E5"> now you can do those</font>

398
00:16:30,290 --> 00:16:36,349
things<font color="#CCCCCC"> which is always good on</font><font color="#E5E5E5"> the SQL</font>

399
00:16:33,530 --> 00:16:39,530
side the really<font color="#E5E5E5"> biggest thing I think</font><font color="#CCCCCC"> is</font>

400
00:16:36,350 --> 00:16:43,030
<font color="#CCCCCC">full support for sequel 2011 window</font>

401
00:16:39,530 --> 00:16:46,310
<font color="#CCCCCC">frame clauses all of them our resident</font>

402
00:16:43,030 --> 00:16:47,660
<font color="#CCCCCC">sequel standard</font><font color="#E5E5E5"> expert has been telling</font>

403
00:16:46,310 --> 00:16:48,829
<font color="#CCCCCC">me that we're actually at this point the</font>

404
00:16:47,660 --> 00:16:51,439
only<font color="#E5E5E5"> database that does that</font>

405
00:16:48,830 --> 00:16:53,600
<font color="#CCCCCC">or at least we were about happier when I</font>

406
00:16:51,440 --> 00:16:56,300
last saw him<font color="#E5E5E5"> give that presentation</font><font color="#CCCCCC"> I</font>

407
00:16:53,600 --> 00:16:59,420
don't<font color="#CCCCCC"> know enough</font><font color="#E5E5E5"> but we do add a lot of</font>

408
00:16:56,300 --> 00:17:02,930
<font color="#CCCCCC">them in particular</font><font color="#E5E5E5"> the new added feature</font>

409
00:16:59,420 --> 00:17:04,970
is the range between previously we could

410
00:17:02,930 --> 00:17:08,329
<font color="#E5E5E5">only do rows between on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> window</font>

411
00:17:04,970 --> 00:17:11,000
<font color="#CCCCCC">Clause so we now have those values and</font>

412
00:17:08,329 --> 00:17:13,220
not just row counts<font color="#E5E5E5"> and the fact that we</font>

413
00:17:11,000 --> 00:17:15,530
have exclusion clauses so we can exclude

414
00:17:13,220 --> 00:17:17,870
current rows we can get exclude ties and

415
00:17:15,530 --> 00:17:19,389
things like<font color="#E5E5E5"> that of course everybody</font>

416
00:17:17,869 --> 00:17:23,810
knows exactly<font color="#E5E5E5"> what that means right</font>

417
00:17:19,390 --> 00:17:25,820
<font color="#CCCCCC">okay let's try an example</font><font color="#E5E5E5"> if you look</font><font color="#CCCCCC"> at</font>

418
00:17:23,810 --> 00:17:27,530
the first<font color="#CCCCCC"> one this is the</font><font color="#E5E5E5"> classic the</font>

419
00:17:25,819 --> 00:17:29,570
way we used<font color="#CCCCCC"> to do it Orwell in which we</font>

420
00:17:27,530 --> 00:17:31,790
of course still do we do select<font color="#E5E5E5"> I in</font>

421
00:17:29,570 --> 00:17:34,129
this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> is silly table with</font><font color="#E5E5E5"> 1 3</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> 9</font>

422
00:17:31,790 --> 00:17:37,040
<font color="#CCCCCC">etcetera - said I and then we say some</font><font color="#E5E5E5"> I</font>

423
00:17:34,130 --> 00:17:39,290
<font color="#E5E5E5">over order by rows</font><font color="#CCCCCC"> between two preceding</font>

424
00:17:37,040 --> 00:17:41,120
and<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> following that's what we've been</font>

425
00:17:39,290 --> 00:17:42,740
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to do before it for each row we</font>

426
00:17:41,120 --> 00:17:45,320
<font color="#E5E5E5">declare a window that's the two rows</font>

427
00:17:42,740 --> 00:17:47,240
prior to this row this row and the two

428
00:17:45,320 --> 00:17:49,669
rows following it<font color="#E5E5E5"> and then we do is sum</font>

429
00:17:47,240 --> 00:17:51,730
over those and we get a you<font color="#E5E5E5"> know running</font>

430
00:17:49,670 --> 00:17:55,190
<font color="#E5E5E5">average</font><font color="#CCCCCC"> your running sum across</font><font color="#E5E5E5"> our data</font>

431
00:17:51,730 --> 00:17:58,040
so<font color="#E5E5E5"> that's our column to give</font><font color="#CCCCCC"> 1709 16 25</font>

432
00:17:55,190 --> 00:18:01,250
etcetera<font color="#E5E5E5"> the different thing that</font><font color="#CCCCCC"> we can</font>

433
00:17:58,040 --> 00:18:04,610
do now<font color="#CCCCCC"> is we can also say some I</font><font color="#E5E5E5"> over</font>

434
00:18:01,250 --> 00:18:07,940
order by<font color="#E5E5E5"> I range between two</font><font color="#CCCCCC"> preceding</font>

435
00:18:04,610 --> 00:18:11,360
<font color="#E5E5E5">into following so instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> looking at</font>

436
00:18:07,940 --> 00:18:13,580
two rows it will look at two values<font color="#E5E5E5"> so</font>

437
00:18:11,360 --> 00:18:16,370
<font color="#CCCCCC">and for</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> Rover if we look at</font><font color="#E5E5E5"> for</font>

438
00:18:13,580 --> 00:18:19,439
example the row<font color="#E5E5E5"> 5 well the 25 here is 1</font>

439
00:18:16,370 --> 00:18:22,020
<font color="#E5E5E5">plus 3 plus 5 plus 7 plus 9</font>

440
00:18:19,440 --> 00:18:23,700
the 15 comes from well it starts<font color="#E5E5E5"> with</font>

441
00:18:22,020 --> 00:18:25,770
the current road and goes backwards<font color="#CCCCCC"> like</font>

442
00:18:23,700 --> 00:18:29,700
<font color="#E5E5E5">oh this one is</font><font color="#CCCCCC"> 2 or less okay include</font>

443
00:18:25,770 --> 00:18:31,530
<font color="#E5E5E5">this one</font><font color="#CCCCCC"> is not so stop and then the</font>

444
00:18:29,700 --> 00:18:34,650
other<font color="#CCCCCC"> way that so in</font><font color="#E5E5E5"> this case it's</font><font color="#CCCCCC"> 3 5</font>

445
00:18:31,530 --> 00:18:36,360
<font color="#CCCCCC">7 now if my</font><font color="#E5E5E5"> data is this uniform it's</font>

446
00:18:34,650 --> 00:18:38,850
actually every second<font color="#CCCCCC"> value I could</font><font color="#E5E5E5"> just</font>

447
00:18:36,360 --> 00:18:41,610
say<font color="#CCCCCC"> rows one before and one after</font><font color="#E5E5E5"> that</font>

448
00:18:38,850 --> 00:18:44,310
would be<font color="#E5E5E5"> smarter but</font><font color="#CCCCCC"> this lets you look</font>

449
00:18:41,610 --> 00:18:47,520
at arbitrarily<font color="#E5E5E5"> arbitrary data through</font>

450
00:18:44,310 --> 00:18:49,080
that and the<font color="#E5E5E5"> exclusion thing that we can</font>

451
00:18:47,520 --> 00:18:50,660
add is we can<font color="#CCCCCC"> just say well</font><font color="#E5E5E5"> also when</font>

452
00:18:49,080 --> 00:18:52,980
you do this<font color="#CCCCCC"> just exclude the current row</font>

453
00:18:50,660 --> 00:18:56,700
<font color="#E5E5E5">then you get the</font><font color="#CCCCCC"> two before and the</font><font color="#E5E5E5"> two</font>

454
00:18:52,980 --> 00:18:58,620
<font color="#E5E5E5">after but not the current and you can</font>

455
00:18:56,700 --> 00:19:00,570
say exclude ties which means you skip

456
00:18:58,620 --> 00:19:04,620
rows if they have the same value<font color="#CCCCCC"> as the</font>

457
00:19:00,570 --> 00:19:05,879
previous one<font color="#E5E5E5"> things like that so you</font><font color="#CCCCCC"> can</font>

458
00:19:04,620 --> 00:19:07,649
do<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> more interesting</font>

459
00:19:05,880 --> 00:19:09,570
<font color="#E5E5E5">things</font><font color="#CCCCCC"> around this</font><font color="#E5E5E5"> I think this is a</font>

460
00:19:07,650 --> 00:19:11,700
more interesting<font color="#CCCCCC"> example through</font><font color="#E5E5E5"> it is</font>

461
00:19:09,570 --> 00:19:14,580
you can use<font color="#CCCCCC"> any</font><font color="#E5E5E5"> data type in Postgres</font>

462
00:19:11,700 --> 00:19:16,950
<font color="#E5E5E5">that's sortable basically that has the</font><font color="#CCCCCC"> B</font>

463
00:19:14,580 --> 00:19:19,169
<font color="#E5E5E5">tree operators as required</font><font color="#CCCCCC"> so in this</font>

464
00:19:16,950 --> 00:19:21,570
case we're saying gonna select<font color="#CCCCCC"> E and</font>

465
00:19:19,170 --> 00:19:24,270
then we're counting over<font color="#E5E5E5"> order by T</font>

466
00:19:21,570 --> 00:19:28,320
<font color="#E5E5E5">range between 15 minutes preceding and</font>

467
00:19:24,270 --> 00:19:30,360
15 minutes following<font color="#CCCCCC"> soo presumably T is</font>

468
00:19:28,320 --> 00:19:33,000
a<font color="#E5E5E5"> timestamp right so we're saying take</font>

469
00:19:30,360 --> 00:19:34,590
create a window<font color="#E5E5E5"> of 15 minutes before us</font>

470
00:19:33,000 --> 00:19:36,120
and<font color="#E5E5E5"> after us and just run it across our</font>

471
00:19:34,590 --> 00:19:39,060
<font color="#CCCCCC">8 enter our data set and</font><font color="#E5E5E5"> return the</font>

472
00:19:36,120 --> 00:19:41,729
<font color="#E5E5E5">count we can return many aggregates we</font>

473
00:19:39,060 --> 00:19:43,190
can return sums or averages or sort of

474
00:19:41,730 --> 00:19:45,600
anything<font color="#CCCCCC"> like that</font>

475
00:19:43,190 --> 00:19:47,970
and we'll get data back like this<font color="#E5E5E5"> for</font>

476
00:19:45,600 --> 00:19:51,959
every row you can say well at this<font color="#E5E5E5"> time</font>

477
00:19:47,970 --> 00:19:53,250
<font color="#CCCCCC">stamp but you know 0 0 13</font><font color="#E5E5E5"> going 15</font>

478
00:19:51,960 --> 00:19:57,870
minutes<font color="#CCCCCC"> back and forth there were 12</font>

479
00:19:53,250 --> 00:19:59,700
rows in our data and<font color="#E5E5E5"> it's with use</font><font color="#CCCCCC"> cases</font>

480
00:19:57,870 --> 00:20:01,020
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> feature starts to</font>

481
00:19:59,700 --> 00:20:03,600
<font color="#E5E5E5">really pay off and you can do really</font>

482
00:20:01,020 --> 00:20:05,400
<font color="#E5E5E5">interesting analytics that previously</font>

483
00:20:03,600 --> 00:20:08,639
<font color="#CCCCCC">required you to either write a</font><font color="#E5E5E5"> stored</font>

484
00:20:05,400 --> 00:20:10,190
procedure<font color="#CCCCCC"> or copy all your data up</font><font color="#E5E5E5"> into</font>

485
00:20:08,640 --> 00:20:12,930
the application<font color="#E5E5E5"> and just loop over it</font>

486
00:20:10,190 --> 00:20:15,090
and<font color="#E5E5E5"> obviously this</font><font color="#CCCCCC"> is going to be faster</font>

487
00:20:12,930 --> 00:20:16,740
than<font color="#CCCCCC"> either</font><font color="#E5E5E5"> one of those ideas because</font>

488
00:20:15,090 --> 00:20:18,750
none<font color="#CCCCCC"> of those is sort of ever</font><font color="#E5E5E5"> going to</font>

489
00:20:16,740 --> 00:20:20,970
<font color="#E5E5E5">be so basically you have the count and</font>

490
00:20:18,750 --> 00:20:22,830
the over you always<font color="#E5E5E5"> have to have an</font>

491
00:20:20,970 --> 00:20:24,570
order by otherwise it<font color="#CCCCCC"> will be like</font><font color="#E5E5E5"> yes</font>

492
00:20:22,830 --> 00:20:27,270
please<font color="#CCCCCC"> take me random</font><font color="#E5E5E5"> data and give me a</font>

493
00:20:24,570 --> 00:20:30,030
<font color="#E5E5E5">sum</font><font color="#CCCCCC"> we don't that doesn't</font><font color="#E5E5E5"> really help</font>

494
00:20:27,270 --> 00:20:32,620
you create<font color="#E5E5E5"> the range 15 minutes</font>

495
00:20:30,030 --> 00:20:34,420
<font color="#E5E5E5">preceding 15 minutes following creates</font>

496
00:20:32,620 --> 00:20:40,000
window and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> it just runs the window</font>

497
00:20:34,420 --> 00:20:42,180
<font color="#E5E5E5">across the data the other big thing</font><font color="#CCCCCC"> at</font>

498
00:20:40,000 --> 00:20:44,290
the SQL level<font color="#E5E5E5"> is stored procedures</font><font color="#CCCCCC"> and</font>

499
00:20:42,180 --> 00:20:45,820
<font color="#CCCCCC">some of</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> around for a while goes</font>

500
00:20:44,290 --> 00:20:47,050
<font color="#CCCCCC">like hey didn't</font><font color="#E5E5E5"> people used to say that</font>

501
00:20:45,820 --> 00:20:48,309
the reason<font color="#E5E5E5"> we should use Postgres</font>

502
00:20:47,050 --> 00:20:49,690
instead of my sequel is the<font color="#CCCCCC"> Postgres</font>

503
00:20:48,309 --> 00:20:51,610
<font color="#CCCCCC">have stored procedures and my sequel</font>

504
00:20:49,690 --> 00:20:54,130
didn't<font color="#CCCCCC"> write</font><font color="#E5E5E5"> back in the days when they</font>

505
00:20:51,610 --> 00:20:55,360
didn't I was like<font color="#E5E5E5"> yeah people</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

506
00:20:54,130 --> 00:20:58,390
said that<font color="#E5E5E5"> but post was never actually</font>

507
00:20:55,360 --> 00:21:03,459
had stored procedures posters had stored

508
00:20:58,390 --> 00:21:05,050
functions very similar<font color="#CCCCCC"> slightly</font>

509
00:21:03,460 --> 00:21:06,850
<font color="#CCCCCC">different you know the important thing</font>

510
00:21:05,050 --> 00:21:09,850
<font color="#CCCCCC">its uses the sequel standard syntax you</font>

511
00:21:06,850 --> 00:21:12,040
can<font color="#CCCCCC"> now say</font><font color="#E5E5E5"> call instead of select it's</font>

512
00:21:09,850 --> 00:21:13,389
really important<font color="#CCCCCC"> right it's the main</font>

513
00:21:12,040 --> 00:21:15,010
<font color="#CCCCCC">thing now the really interesting</font>

514
00:21:13,390 --> 00:21:16,660
difference between stored procedures and

515
00:21:15,010 --> 00:21:18,640
<font color="#CCCCCC">stored functions is that stored</font>

516
00:21:16,660 --> 00:21:20,590
functions runs inside<font color="#CCCCCC"> of your</font>

517
00:21:18,640 --> 00:21:23,559
transactions<font color="#E5E5E5"> stored</font><font color="#CCCCCC"> procedures can</font>

518
00:21:20,590 --> 00:21:25,389
control your transaction you can't do

519
00:21:23,559 --> 00:21:28,030
rollback or<font color="#E5E5E5"> commit inside</font><font color="#CCCCCC"> the store</font>

520
00:21:25,390 --> 00:21:31,809
<font color="#CCCCCC">function you can do rollback and commit</font>

521
00:21:28,030 --> 00:21:33,550
inside<font color="#E5E5E5"> the stored procedure the syntax</font>

522
00:21:31,809 --> 00:21:35,800
<font color="#CCCCCC">and</font><font color="#E5E5E5"> how you create it is very</font><font color="#CCCCCC"> similar to</font>

523
00:21:33,550 --> 00:21:37,780
<font color="#E5E5E5">how you create a</font><font color="#CCCCCC"> function except</font><font color="#E5E5E5"> instead</font>

524
00:21:35,800 --> 00:21:41,500
<font color="#CCCCCC">of saying create function you say create</font>

525
00:21:37,780 --> 00:21:43,660
procedure<font color="#E5E5E5"> and you don't have a return</font>

526
00:21:41,500 --> 00:21:45,940
value<font color="#E5E5E5"> the same well you don't still</font>

527
00:21:43,660 --> 00:21:47,980
return this result set in the same way

528
00:21:45,940 --> 00:21:49,570
so<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you look at this we say well we</font>

529
00:21:47,980 --> 00:21:52,240
say<font color="#CCCCCC"> begin we say insert values</font><font color="#E5E5E5"> one</font>

530
00:21:49,570 --> 00:21:54,730
<font color="#E5E5E5">commit that insert value to rollback</font>

531
00:21:52,240 --> 00:21:57,130
<font color="#E5E5E5">that if you tried this in a stored</font>

532
00:21:54,730 --> 00:21:58,540
function you would just get<font color="#E5E5E5"> a syntax</font>

533
00:21:57,130 --> 00:22:00,850
error saying sorry you can't do this

534
00:21:58,540 --> 00:22:02,320
inside the store function<font color="#E5E5E5"> now what you'd</font>

535
00:22:00,850 --> 00:22:03,850
<font color="#CCCCCC">expect if you write</font><font color="#E5E5E5"> this right if you</font>

536
00:22:02,320 --> 00:22:06,700
<font color="#E5E5E5">read that</font><font color="#CCCCCC"> thing like well if I call this</font>

537
00:22:03,850 --> 00:22:09,428
stored procedure<font color="#E5E5E5"> the table should end up</font>

538
00:22:06,700 --> 00:22:10,809
<font color="#CCCCCC">with just</font><font color="#E5E5E5"> one right and the two would</font>

539
00:22:09,429 --> 00:22:12,370
then<font color="#E5E5E5"> be rolled back and gone if you do</font>

540
00:22:10,809 --> 00:22:14,710
it<font color="#E5E5E5"> well that's</font><font color="#CCCCCC"> actually exactly what</font>

541
00:22:12,370 --> 00:22:16,239
<font color="#E5E5E5">happens so it does</font><font color="#CCCCCC"> work the way</font><font color="#E5E5E5"> you</font>

542
00:22:14,710 --> 00:22:19,150
would expect<font color="#E5E5E5"> it it gives you the</font><font color="#CCCCCC"> ability</font>

543
00:22:16,240 --> 00:22:21,340
to do full transaction<font color="#E5E5E5"> control in stored</font>

544
00:22:19,150 --> 00:22:23,220
functions you could<font color="#E5E5E5"> use save points but</font>

545
00:22:21,340 --> 00:22:26,669
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can't control</font><font color="#CCCCCC"> the outside</font>

546
00:22:23,220 --> 00:22:28,780
<font color="#E5E5E5">transaction that sort of runs everything</font>

547
00:22:26,670 --> 00:22:30,580
so that's<font color="#E5E5E5"> also like a big thing in</font>

548
00:22:28,780 --> 00:22:32,410
particular<font color="#E5E5E5"> I've noticed I do a lot of</font>

549
00:22:30,580 --> 00:22:34,030
work with<font color="#CCCCCC"> people migrated from</font><font color="#E5E5E5"> you know</font>

550
00:22:32,410 --> 00:22:37,420
the big expensive<font color="#CCCCCC"> proprietary</font><font color="#E5E5E5"> databases</font>

551
00:22:34,030 --> 00:22:38,830
<font color="#E5E5E5">into post press and there are a lot of</font>

552
00:22:37,420 --> 00:22:40,660
patterns there are a lot<font color="#CCCCCC"> of in</font>

553
00:22:38,830 --> 00:22:42,970
particular<font color="#CCCCCC"> things like loading jobs and</font>

554
00:22:40,660 --> 00:22:45,280
ETL jobs kind of things that<font color="#CCCCCC"> really use</font>

555
00:22:42,970 --> 00:22:45,910
this heavily<font color="#E5E5E5"> you've</font><font color="#CCCCCC"> usually been able to</font>

556
00:22:45,280 --> 00:22:47,860
account

557
00:22:45,910 --> 00:22:50,260
the same thing in Postgres<font color="#E5E5E5"> previously</font>

558
00:22:47,860 --> 00:22:52,810
but this<font color="#E5E5E5"> makes it a lot easier</font><font color="#CCCCCC"> both from</font>

559
00:22:50,260 --> 00:22:59,500
the margin and<font color="#E5E5E5"> the actual implementation</font>

560
00:22:52,810 --> 00:23:01,330
side of things<font color="#CCCCCC"> so let's take a look at</font>

561
00:22:59,500 --> 00:23:08,040
backup and replication you'll do backups

562
00:23:01,330 --> 00:23:10,179
right<font color="#E5E5E5"> no you don't I mean come on really</font>

563
00:23:08,040 --> 00:23:12,220
<font color="#CCCCCC">there have been</font><font color="#E5E5E5"> a couple of there's</font><font color="#CCCCCC"> been</font>

564
00:23:10,180 --> 00:23:16,000
no super<font color="#E5E5E5"> major things but a number</font><font color="#CCCCCC"> of</font>

565
00:23:12,220 --> 00:23:17,380
<font color="#E5E5E5">incremental improvements those was</font><font color="#CCCCCC"> at</font>

566
00:23:16,000 --> 00:23:20,470
<font color="#E5E5E5">something called the ability</font><font color="#CCCCCC"> to advance</font>

567
00:23:17,380 --> 00:23:22,300
replication slots<font color="#E5E5E5"> primarily this is not</font>

568
00:23:20,470 --> 00:23:23,770
something<font color="#CCCCCC"> that you will use</font><font color="#E5E5E5"> directly it</font>

569
00:23:22,300 --> 00:23:26,470
<font color="#E5E5E5">is something that your replication</font>

570
00:23:23,770 --> 00:23:28,870
management tools will be<font color="#E5E5E5"> using you know</font>

571
00:23:26,470 --> 00:23:31,150
tools like<font color="#E5E5E5"> Patroni or rep manager or all</font>

572
00:23:28,870 --> 00:23:33,129
of<font color="#E5E5E5"> these things or</font><font color="#CCCCCC"> unpaused rest the</font>

573
00:23:31,150 --> 00:23:35,110
<font color="#E5E5E5">idea is we have</font><font color="#CCCCCC"> these replication slots</font>

574
00:23:33,130 --> 00:23:38,530
<font color="#CCCCCC">that keep</font><font color="#E5E5E5"> track of where</font><font color="#CCCCCC"> different nodes</font>

575
00:23:35,110 --> 00:23:40,510
are in<font color="#CCCCCC"> the replication stream but if you</font>

576
00:23:38,530 --> 00:23:42,790
have say<font color="#E5E5E5"> you have a primary in a standby</font>

577
00:23:40,510 --> 00:23:44,800
<font color="#E5E5E5">and then you do logical replication to a</font>

578
00:23:42,790 --> 00:23:46,300
different machine<font color="#E5E5E5"> and then you get a</font>

579
00:23:44,800 --> 00:23:48,610
<font color="#CCCCCC">failover between</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> primarily in</font>

580
00:23:46,300 --> 00:23:50,580
<font color="#CCCCCC">standby</font><font color="#E5E5E5"> it will actually lose track of</font>

581
00:23:48,610 --> 00:23:52,810
the logical replication step by default

582
00:23:50,580 --> 00:23:55,240
<font color="#E5E5E5">because the replication slots are gone</font>

583
00:23:52,810 --> 00:23:57,190
<font color="#E5E5E5">and</font><font color="#CCCCCC"> what you could do previously is well</font>

584
00:23:55,240 --> 00:23:59,020
then I create the replication slot on

585
00:23:57,190 --> 00:24:01,570
<font color="#E5E5E5">the standby as well and the logical</font>

586
00:23:59,020 --> 00:24:02,980
<font color="#CCCCCC">replicas will work just</font><font color="#E5E5E5"> fine</font><font color="#CCCCCC"> except now</font>

587
00:24:01,570 --> 00:24:04,480
your standby will instead run out of

588
00:24:02,980 --> 00:24:06,550
disk<font color="#E5E5E5"> space because you</font><font color="#CCCCCC"> have a</font>

589
00:24:04,480 --> 00:24:09,850
replication slot that blocks disk reuse

590
00:24:06,550 --> 00:24:11,710
<font color="#E5E5E5">and there's previous to be no way to</font>

591
00:24:09,850 --> 00:24:14,620
move this replication<font color="#E5E5E5"> slog without</font>

592
00:24:11,710 --> 00:24:15,940
actually replicating the data so there

593
00:24:14,620 --> 00:24:17,439
were you know workarounds for let's

594
00:24:15,940 --> 00:24:20,170
create a replica that pipes all this

595
00:24:17,440 --> 00:24:22,600
data to<font color="#CCCCCC"> Devin all which is not</font><font color="#E5E5E5"> really</font>

596
00:24:20,170 --> 00:24:24,310
productive<font color="#CCCCCC"> there dear is very simple you</font>

597
00:24:22,600 --> 00:24:26,409
<font color="#CCCCCC">can now at regular intervals just move</font>

598
00:24:24,310 --> 00:24:28,860
all<font color="#E5E5E5"> your replication slots across</font><font color="#CCCCCC"> the</font>

599
00:24:26,410 --> 00:24:31,120
cluster<font color="#CCCCCC"> or many machines</font><font color="#E5E5E5"> to be in sync</font>

600
00:24:28,860 --> 00:24:33,100
<font color="#E5E5E5">they never have</font><font color="#CCCCCC"> to be exactly</font><font color="#E5E5E5"> in sync</font>

601
00:24:31,120 --> 00:24:35,409
<font color="#E5E5E5">but they go close enough in sync within</font>

602
00:24:33,100 --> 00:24:38,020
a couple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> megabytes so that you don't</font>

603
00:24:35,410 --> 00:24:40,690
<font color="#E5E5E5">run out of disk</font><font color="#CCCCCC"> space so</font><font color="#E5E5E5"> this makes the</font>

604
00:24:38,020 --> 00:24:43,389
kind<font color="#E5E5E5"> of like mixed clusters</font><font color="#CCCCCC"> of mixing</font>

605
00:24:40,690 --> 00:24:45,900
physical and logical replication<font color="#CCCCCC"> a lot</font>

606
00:24:43,390 --> 00:24:45,900
more manageable

607
00:24:46,080 --> 00:24:50,230
speaking of logical replication who's

608
00:24:48,070 --> 00:24:54,040
using<font color="#E5E5E5"> logical replication in Postgres</font><font color="#CCCCCC"> 10</font>

609
00:24:50,230 --> 00:24:55,570
or<font color="#E5E5E5"> 11 today that is surprisingly few</font>

610
00:24:54,040 --> 00:24:57,129
that was one<font color="#E5E5E5"> of our headline features</font>

611
00:24:55,570 --> 00:25:01,530
<font color="#E5E5E5">come on guys you should be using it</font>

612
00:24:57,130 --> 00:25:01,530
<font color="#E5E5E5">system it took a lot of work to build</font>

613
00:25:02,030 --> 00:25:05,360
one of the things that we<font color="#E5E5E5"> couldn't do in</font>

614
00:25:03,650 --> 00:25:06,890
<font color="#E5E5E5">post</font><font color="#CCCCCC"> piece version</font><font color="#E5E5E5"> 10 is logical</font>

615
00:25:05,360 --> 00:25:09,918
<font color="#E5E5E5">notification did not replicate truncate</font>

616
00:25:06,890 --> 00:25:11,270
<font color="#E5E5E5">it</font><font color="#CCCCCC"> would replicate your insert updates</font>

617
00:25:09,919 --> 00:25:13,909
and deletes but if you actually did

618
00:25:11,270 --> 00:25:15,559
truncate on the<font color="#E5E5E5"> primary the table would</font>

619
00:25:13,909 --> 00:25:16,850
go empty on the<font color="#E5E5E5"> primary but it will keep</font>

620
00:25:15,559 --> 00:25:19,520
the<font color="#CCCCCC"> data on the standby because</font><font color="#E5E5E5"> the</font>

621
00:25:16,850 --> 00:25:23,510
<font color="#E5E5E5">trunk it wasn't replicated which is</font>

622
00:25:19,520 --> 00:25:26,780
usually<font color="#E5E5E5"> not what you</font><font color="#CCCCCC"> wanted in 11 it</font>

623
00:25:23,510 --> 00:25:28,549
does<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can turn this on and</font><font color="#CCCCCC"> off on an</font>

624
00:25:26,780 --> 00:25:30,230
individual publication you can<font color="#CCCCCC"> say for</font>

625
00:25:28,549 --> 00:25:32,289
<font color="#E5E5E5">this table I want truncates to replicate</font>

626
00:25:30,230 --> 00:25:34,510
<font color="#E5E5E5">for this I don't want them to replicate</font>

627
00:25:32,289 --> 00:25:36,440
<font color="#E5E5E5">logical replication has</font><font color="#CCCCCC"> a lot of like</font>

628
00:25:34,510 --> 00:25:38,960
non-standard use cases<font color="#E5E5E5"> where that</font>

629
00:25:36,440 --> 00:25:41,720
actually makes perfect<font color="#E5E5E5"> sense but since</font>

630
00:25:38,960 --> 00:25:44,390
in most cases it<font color="#E5E5E5"> doesn't make</font><font color="#CCCCCC"> sense it</font>

631
00:25:41,720 --> 00:25:47,059
will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> on by default</font><font color="#E5E5E5"> so if you just</font>

632
00:25:44,390 --> 00:25:49,400
create<font color="#E5E5E5"> a publication or if you</font><font color="#CCCCCC"> upgrade</font>

633
00:25:47,059 --> 00:25:50,928
your<font color="#E5E5E5"> post Chris version 10 your logical</font>

634
00:25:49,400 --> 00:25:52,730
replication will just start replicating

635
00:25:50,929 --> 00:25:54,320
<font color="#E5E5E5">truncate they will just start working</font>

636
00:25:52,730 --> 00:25:57,620
<font color="#E5E5E5">and if you don't want that you</font><font color="#CCCCCC"> have to</font>

637
00:25:54,320 --> 00:26:03,559
<font color="#E5E5E5">explicitly go turn it off</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> alter</font>

638
00:25:57,620 --> 00:26:05,209
publication another more on the<font color="#E5E5E5"> physical</font>

639
00:26:03,559 --> 00:26:06,980
replication side and in particular on

640
00:26:05,210 --> 00:26:08,900
<font color="#E5E5E5">the</font><font color="#CCCCCC"> backup side</font>

641
00:26:06,980 --> 00:26:10,549
base backups taken through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> post</font>

642
00:26:08,900 --> 00:26:14,720
<font color="#CCCCCC">Chris internal protocol</font><font color="#E5E5E5"> no longer</font>

643
00:26:10,549 --> 00:26:17,150
include on log tables<font color="#CCCCCC"> which makes a lot</font>

644
00:26:14,720 --> 00:26:18,679
<font color="#CCCCCC">of sense the</font><font color="#E5E5E5"> unlock tables are tables</font>

645
00:26:17,150 --> 00:26:21,039
<font color="#CCCCCC">that don't go into the</font><font color="#E5E5E5"> transaction log</font>

646
00:26:18,679 --> 00:26:23,450
so by<font color="#CCCCCC"> definition they're not crash safe</font>

647
00:26:21,039 --> 00:26:25,100
<font color="#E5E5E5">but they're useful for</font><font color="#CCCCCC"> things like large</font>

648
00:26:23,450 --> 00:26:26,750
data loading job you might load the data

649
00:26:25,100 --> 00:26:29,629
<font color="#E5E5E5">into</font><font color="#CCCCCC"> an on log table and then do some</font>

650
00:26:26,750 --> 00:26:33,020
<font color="#CCCCCC">processing and merge it into</font><font color="#E5E5E5"> a regular</font>

651
00:26:29,630 --> 00:26:35,210
table<font color="#E5E5E5"> for example and</font><font color="#CCCCCC"> envelope tables</font>

652
00:26:33,020 --> 00:26:37,580
works<font color="#E5E5E5"> the way that when Postgres crashes</font>

653
00:26:35,210 --> 00:26:39,710
or restarts<font color="#E5E5E5"> it just wipes the contents</font>

654
00:26:37,580 --> 00:26:42,678
<font color="#E5E5E5">of the on log table</font><font color="#CCCCCC"> comes up as an</font><font color="#E5E5E5"> empty</font>

655
00:26:39,710 --> 00:26:43,970
table<font color="#E5E5E5"> because it's not crashed if we</font>

656
00:26:42,679 --> 00:26:46,100
don't we can't trust the data<font color="#E5E5E5"> so we</font>

657
00:26:43,970 --> 00:26:48,860
<font color="#E5E5E5">delete the data the table is there but</font>

658
00:26:46,100 --> 00:26:50,059
it's<font color="#E5E5E5"> empty and what we did for backups</font>

659
00:26:48,860 --> 00:26:53,209
was we included this table in the

660
00:26:50,059 --> 00:26:55,309
backups<font color="#E5E5E5"> then we restored this table on</font>

661
00:26:53,210 --> 00:26:57,640
your<font color="#E5E5E5"> wrist or and then as you started</font>

662
00:26:55,309 --> 00:26:59,299
<font color="#CCCCCC">Postgres we deleted</font><font color="#E5E5E5"> it again</font>

663
00:26:57,640 --> 00:27:01,100
<font color="#E5E5E5">particularly given that these are often</font>

664
00:26:59,299 --> 00:27:02,750
<font color="#CCCCCC">used for like large loading tables</font><font color="#E5E5E5"> it's</font>

665
00:27:01,100 --> 00:27:04,370
kind of a waste of<font color="#CCCCCC"> space in your backups</font>

666
00:27:02,750 --> 00:27:05,630
if the only<font color="#CCCCCC"> thing we</font><font color="#E5E5E5"> guarantee is we're</font>

667
00:27:04,370 --> 00:27:09,409
<font color="#E5E5E5">going to delete them as soon as we start</font>

668
00:27:05,630 --> 00:27:13,100
up so we no longer<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that</font>

669
00:27:09,410 --> 00:27:14,840
and similar thing<font color="#CCCCCC"> for temp tables which</font>

670
00:27:13,100 --> 00:27:17,060
are<font color="#CCCCCC"> even more apparent</font><font color="#E5E5E5"> right temp tables</font>

671
00:27:14,840 --> 00:27:19,389
when you do create<font color="#E5E5E5"> temporary table well</font>

672
00:27:17,060 --> 00:27:22,040
if you disconnect<font color="#E5E5E5"> the table gets deleted</font>

673
00:27:19,390 --> 00:27:24,620
<font color="#E5E5E5">but how it's supposed</font><font color="#CCCCCC"> to work</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so</font>

674
00:27:22,040 --> 00:27:26,659
by<font color="#E5E5E5"> definition if poster</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> starts it</font>

675
00:27:24,620 --> 00:27:28,699
gets deleted<font color="#E5E5E5"> if you restore from a</font>

676
00:27:26,660 --> 00:27:30,650
backup<font color="#E5E5E5"> it gets deleted</font>

677
00:27:28,700 --> 00:27:32,750
but it used<font color="#E5E5E5"> to be included in the actual</font>

678
00:27:30,650 --> 00:27:34,760
backup and get deleted on the restore

679
00:27:32,750 --> 00:27:37,190
instead so yeah

680
00:27:34,760 --> 00:27:39,890
it's I've seen cases<font color="#CCCCCC"> where this saves a</font>

681
00:27:37,190 --> 00:27:43,190
lot of<font color="#E5E5E5"> disk space in the backups</font><font color="#CCCCCC"> that</font>

682
00:27:39,890 --> 00:27:45,260
<font color="#E5E5E5">were just completely</font><font color="#CCCCCC"> useless the other</font>

683
00:27:43,190 --> 00:27:47,780
thing that backups do now is that they

684
00:27:45,260 --> 00:27:51,410
will validate<font color="#CCCCCC"> page level</font><font color="#E5E5E5"> checksums as</font>

685
00:27:47,780 --> 00:27:52,690
the backup runs if you've enabled<font color="#E5E5E5"> page</font>

686
00:27:51,410 --> 00:27:54,950
level<font color="#E5E5E5"> checks</font><font color="#CCCCCC"> from some</font><font color="#E5E5E5"> post press</font>

687
00:27:52,690 --> 00:27:56,990
unfortunately<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> something that is</font>

688
00:27:54,950 --> 00:28:01,640
not enabled<font color="#CCCCCC"> by default and you can only</font>

689
00:27:56,990 --> 00:28:03,320
<font color="#E5E5E5">enable it</font><font color="#CCCCCC"> currently on</font><font color="#E5E5E5"> start sorry on</font>

690
00:28:01,640 --> 00:28:04,910
initialization of your<font color="#E5E5E5"> database cluster</font>

691
00:28:03,320 --> 00:28:06,530
<font color="#E5E5E5">so when you run any</font><font color="#CCCCCC"> TB you have</font><font color="#E5E5E5"> to</font>

692
00:28:04,910 --> 00:28:10,280
decide<font color="#E5E5E5"> to use them you can</font><font color="#CCCCCC"> turn them on</font>

693
00:28:06,530 --> 00:28:11,600
<font color="#E5E5E5">after the fact</font><font color="#CCCCCC"> you probably should turn</font>

694
00:28:10,280 --> 00:28:13,670
them on<font color="#CCCCCC"> in almost every single</font><font color="#E5E5E5"> case</font>

695
00:28:11,600 --> 00:28:16,219
because you want to<font color="#E5E5E5"> know if your data is</font>

696
00:28:13,670 --> 00:28:18,620
corrupt<font color="#E5E5E5"> now the way that this worked</font>

697
00:28:16,220 --> 00:28:20,300
previously<font color="#E5E5E5"> is whenever post press reads</font>

698
00:28:18,620 --> 00:28:22,070
the disk page so you run<font color="#CCCCCC"> a</font><font color="#E5E5E5"> select query</font>

699
00:28:20,300 --> 00:28:24,800
or something it reads<font color="#E5E5E5"> the page from this</font>

700
00:28:22,070 --> 00:28:26,450
it validates the<font color="#E5E5E5"> checks on but if you</font>

701
00:28:24,800 --> 00:28:29,690
have<font color="#E5E5E5"> tables</font><font color="#CCCCCC"> that are very infrequently</font>

702
00:28:26,450 --> 00:28:31,640
read or portions<font color="#E5E5E5"> of tables that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> very</font>

703
00:28:29,690 --> 00:28:34,700
infrequently red you can get bit rot in

704
00:28:31,640 --> 00:28:36,650
those files<font color="#E5E5E5"> and you would never know</font>

705
00:28:34,700 --> 00:28:39,140
<font color="#E5E5E5">because Postgres</font><font color="#CCCCCC"> did invalidate the</font>

706
00:28:36,650 --> 00:28:41,330
checksum<font color="#E5E5E5"> now when we run backups we read</font>

707
00:28:39,140 --> 00:28:43,640
all your data<font color="#E5E5E5"> right that's kind of you</font>

708
00:28:41,330 --> 00:28:45,290
have<font color="#E5E5E5"> to do that and the expensive part</font>

709
00:28:43,640 --> 00:28:47,900
<font color="#E5E5E5">of validating the checksum is reading</font>

710
00:28:45,290 --> 00:28:49,970
the data<font color="#E5E5E5"> actually calculating a checksum</font>

711
00:28:47,900 --> 00:28:53,120
across you know an 8k block is very very

712
00:28:49,970 --> 00:28:54,800
cheap today<font color="#CCCCCC"> so what we're doing</font><font color="#E5E5E5"> now is</font>

713
00:28:53,120 --> 00:28:56,270
<font color="#CCCCCC">just</font><font color="#E5E5E5"> whenever we read the data for</font>

714
00:28:54,800 --> 00:28:59,510
backups as soon as we read a block we

715
00:28:56,270 --> 00:29:01,040
validate the<font color="#E5E5E5"> checksum moment and this</font>

716
00:28:59,510 --> 00:29:03,230
way because backups will include your

717
00:29:01,040 --> 00:29:06,560
infrequently used<font color="#E5E5E5"> portions of the</font>

718
00:29:03,230 --> 00:29:09,200
<font color="#CCCCCC">database</font><font color="#E5E5E5"> so it will then notice that</font>

719
00:29:06,560 --> 00:29:11,389
<font color="#E5E5E5">your data is corrupt now I can't fix it</font>

720
00:29:09,200 --> 00:29:13,400
<font color="#E5E5E5">for you unfortunately but it can tell</font>

721
00:29:11,390 --> 00:29:15,500
you hey<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have corrupt data in you</font>

722
00:29:13,400 --> 00:29:17,150
know this<font color="#E5E5E5"> table the idea being well</font>

723
00:29:15,500 --> 00:29:20,150
hopefully<font color="#E5E5E5"> you</font><font color="#CCCCCC"> still have your previous</font>

724
00:29:17,150 --> 00:29:22,280
<font color="#CCCCCC">backup and you can go restore from</font><font color="#E5E5E5"> your</font>

725
00:29:20,150 --> 00:29:23,340
previous<font color="#E5E5E5"> backup and use your log archive</font>

726
00:29:22,280 --> 00:29:24,840
<font color="#E5E5E5">to basically roll</font>

727
00:29:23,340 --> 00:29:28,379
the<font color="#E5E5E5"> corruption and just remove the</font>

728
00:29:24,840 --> 00:29:29,699
corruption<font color="#E5E5E5"> but if you only get to know</font>

729
00:29:28,380 --> 00:29:31,050
<font color="#E5E5E5">it</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know six months</font><font color="#CCCCCC"> later when</font>

730
00:29:29,700 --> 00:29:33,180
somebody queried the infrequently

731
00:29:31,050 --> 00:29:34,620
queried table<font color="#E5E5E5"> you may not have a six</font>

732
00:29:33,180 --> 00:29:37,410
<font color="#CCCCCC">month</font><font color="#E5E5E5"> old</font><font color="#CCCCCC"> backup and you</font><font color="#E5E5E5"> may not want</font><font color="#CCCCCC"> to</font>

733
00:29:34,620 --> 00:29:39,449
restore<font color="#E5E5E5"> a six month old backup and so</font>

734
00:29:37,410 --> 00:29:43,470
it's all about<font color="#E5E5E5"> getting the</font><font color="#CCCCCC"> information</font>

735
00:29:39,450 --> 00:29:43,800
sooner<font color="#E5E5E5"> so that you can properly handle</font>

736
00:29:43,470 --> 00:29:46,140
it

737
00:29:43,800 --> 00:29:48,990
while it<font color="#E5E5E5"> doesn't cost you so much</font><font color="#CCCCCC"> to</font>

738
00:29:46,140 --> 00:29:51,540
have it but<font color="#E5E5E5"> again</font><font color="#CCCCCC"> checksums are not</font>

739
00:29:48,990 --> 00:29:54,140
<font color="#E5E5E5">enabled by default</font><font color="#CCCCCC"> but I do strongly</font>

740
00:29:51,540 --> 00:29:56,909
encourage<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider enabling them</font>

741
00:29:54,140 --> 00:29:58,440
we are looking at in the upcoming

742
00:29:56,910 --> 00:30:00,150
version<font color="#CCCCCC"> of Postgres there will most</font>

743
00:29:58,440 --> 00:30:02,490
likely<font color="#E5E5E5"> it's not being committed yet</font><font color="#CCCCCC"> but</font>

744
00:30:00,150 --> 00:30:04,880
most likely there will be tool available

745
00:30:02,490 --> 00:30:07,080
to<font color="#E5E5E5"> enable and disable checksums</font>

746
00:30:04,880 --> 00:30:09,300
unfortunately enabling<font color="#CCCCCC"> checksums on a</font>

747
00:30:07,080 --> 00:30:10,710
large database is very<font color="#CCCCCC"> expensive because</font>

748
00:30:09,300 --> 00:30:14,790
<font color="#E5E5E5">it basically has to rewrite the whole</font>

749
00:30:10,710 --> 00:30:16,980
<font color="#E5E5E5">database but disabling checksums will be</font>

750
00:30:14,790 --> 00:30:18,750
very cheap and there are actually tools

751
00:30:16,980 --> 00:30:20,910
you can get<font color="#CCCCCC"> they're just not part of</font>

752
00:30:18,750 --> 00:30:22,770
<font color="#E5E5E5">Postgres today that will safely turn off</font>

753
00:30:20,910 --> 00:30:24,990
check sums on<font color="#E5E5E5"> a running cluster right</font>

754
00:30:22,770 --> 00:30:26,730
you just<font color="#E5E5E5"> have to stop</font><font color="#CCCCCC"> Postgres run a</font>

755
00:30:24,990 --> 00:30:27,330
tool that<font color="#E5E5E5"> runs in less than</font><font color="#CCCCCC"> a second</font><font color="#E5E5E5"> and</font>

756
00:30:26,730 --> 00:30:30,180
<font color="#CCCCCC">started again</font>

757
00:30:27,330 --> 00:30:31,889
<font color="#E5E5E5">to turn</font><font color="#CCCCCC"> it off</font><font color="#E5E5E5"> which I find a good</font>

758
00:30:30,180 --> 00:30:33,510
reason<font color="#CCCCCC"> for well just</font><font color="#E5E5E5"> turn them on by</font>

759
00:30:31,890 --> 00:30:37,400
<font color="#CCCCCC">default</font><font color="#E5E5E5"> because it's easy to turn them</font>

760
00:30:33,510 --> 00:30:40,770
<font color="#E5E5E5">off it is not easy to turn back home</font>

761
00:30:37,400 --> 00:30:42,750
they do<font color="#E5E5E5"> create a bit of overhead</font><font color="#CCCCCC"> in my</font>

762
00:30:40,770 --> 00:30:45,030
experience nowhere near enough overhead

763
00:30:42,750 --> 00:30:46,590
to be a problem<font color="#E5E5E5"> versus the problem of</font>

764
00:30:45,030 --> 00:30:51,000
realizing too late that<font color="#E5E5E5"> you have this</font>

765
00:30:46,590 --> 00:30:53,159
corruption<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> trust your hard</font>

766
00:30:51,000 --> 00:30:54,990
drives or your<font color="#E5E5E5"> son</font><font color="#CCCCCC"> or your your cloud</font>

767
00:30:53,160 --> 00:30:59,130
<font color="#CCCCCC">provider not to generate</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> corruption</font>

768
00:30:54,990 --> 00:31:02,960
then good luck<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that far too many</font>

769
00:30:59,130 --> 00:31:05,040
<font color="#CCCCCC">people</font><font color="#E5E5E5"> do and it can be very expensive</font>

770
00:31:02,960 --> 00:31:07,050
<font color="#CCCCCC">ok let's talk about a</font><font color="#E5E5E5"> few things around</font>

771
00:31:05,040 --> 00:31:09,840
performance<font color="#E5E5E5"> right everybody wants things</font>

772
00:31:07,050 --> 00:31:15,810
<font color="#E5E5E5">to run faster almost everybody wants</font>

773
00:31:09,840 --> 00:31:17,850
things<font color="#E5E5E5"> to run faster</font><font color="#CCCCCC"> Postgres 9 6 added</font>

774
00:31:15,810 --> 00:31:19,980
parallelism<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the ability to run</font>

775
00:31:17,850 --> 00:31:23,520
parallel query use multiple CPUs for<font color="#E5E5E5"> the</font>

776
00:31:19,980 --> 00:31:25,260
same query right<font color="#E5E5E5"> up</font><font color="#CCCCCC"> until</font><font color="#E5E5E5"> 9 6 you could</font>

777
00:31:23,520 --> 00:31:27,570
only<font color="#E5E5E5"> you have the matching on</font><font color="#CCCCCC"> one</font>

778
00:31:25,260 --> 00:31:28,830
connection<font color="#CCCCCC"> one CPU</font><font color="#E5E5E5"> which becomes the</font>

779
00:31:27,570 --> 00:31:30,330
problem<font color="#E5E5E5"> with modern machines with</font>

780
00:31:28,830 --> 00:31:33,720
hundreds of CPU cores and you're like

781
00:31:30,330 --> 00:31:35,250
yes you<font color="#E5E5E5"> can use one sometimes</font><font color="#CCCCCC"> we could</font>

782
00:31:33,720 --> 00:31:37,530
use<font color="#E5E5E5"> two one for a background job and one</font>

783
00:31:35,250 --> 00:31:39,240
for<font color="#E5E5E5"> your query</font>

784
00:31:37,530 --> 00:31:42,629
as of<font color="#E5E5E5"> nine point six we could use</font>

785
00:31:39,240 --> 00:31:44,280
multiple<font color="#E5E5E5"> ones but in practice it didn't</font>

786
00:31:42,630 --> 00:31:46,200
<font color="#E5E5E5">really help that much because the limit</font>

787
00:31:44,280 --> 00:31:47,850
it limited<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> queries like</font>

788
00:31:46,200 --> 00:31:49,770
<font color="#E5E5E5">the number of types of joins the number</font>

789
00:31:47,850 --> 00:31:51,929
of types<font color="#E5E5E5"> of scans for example in nine</font>

790
00:31:49,770 --> 00:31:56,460
point six you couldn't parallel eyes a

791
00:31:51,930 --> 00:31:57,990
query if it involved an index<font color="#CCCCCC"> can close</font>

792
00:31:56,460 --> 00:31:59,670
<font color="#CCCCCC">first ten made it really really useful</font>

793
00:31:57,990 --> 00:32:02,700
<font color="#E5E5E5">because it removed most of these</font>

794
00:31:59,670 --> 00:32:04,980
restrictions<font color="#CCCCCC"> I can actually say I think</font>

795
00:32:02,700 --> 00:32:06,630
<font color="#E5E5E5">I'm still at a point that none of our</font>

796
00:32:04,980 --> 00:32:08,340
consulting customers have<font color="#E5E5E5"> actually had</font>

797
00:32:06,630 --> 00:32:11,970
<font color="#E5E5E5">any use for parallelism in nine point</font>

798
00:32:08,340 --> 00:32:14,280
six and probably<font color="#CCCCCC"> 80% of</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> have had</font>

799
00:32:11,970 --> 00:32:16,320
used<font color="#E5E5E5"> for parallelism in</font><font color="#CCCCCC"> tenth</font><font color="#E5E5E5"> so it's</font>

800
00:32:14,280 --> 00:32:18,450
really<font color="#E5E5E5"> that's when it became useful now</font>

801
00:32:16,320 --> 00:32:21,720
<font color="#CCCCCC">eleven adds a few more things that makes</font>

802
00:32:18,450 --> 00:32:23,610
it even better<font color="#E5E5E5"> they're a bunch of</font>

803
00:32:21,720 --> 00:32:24,960
general enhancement that just sort<font color="#CCCCCC"> of</font>

804
00:32:23,610 --> 00:32:26,909
you know silently makes it<font color="#E5E5E5"> better and</font>

805
00:32:24,960 --> 00:32:28,440
<font color="#E5E5E5">you</font><font color="#CCCCCC"> don't have to care we've added</font>

806
00:32:26,910 --> 00:32:31,440
<font color="#E5E5E5">something</font><font color="#CCCCCC"> called a parallel append plan</font>

807
00:32:28,440 --> 00:32:33,660
<font color="#E5E5E5">nodes doesn't really help you</font><font color="#CCCCCC"> know that</font>

808
00:32:31,440 --> 00:32:34,920
it just<font color="#CCCCCC"> runs faster and we have</font>

809
00:32:33,660 --> 00:32:37,230
<font color="#E5E5E5">something called parallel aware hash</font>

810
00:32:34,920 --> 00:32:39,030
joints<font color="#CCCCCC"> or is previously</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you were</font>

811
00:32:37,230 --> 00:32:41,400
running a hash<font color="#CCCCCC"> joint it supported</font>

812
00:32:39,030 --> 00:32:43,379
parallelism but it did<font color="#CCCCCC"> basically if you</font>

813
00:32:41,400 --> 00:32:45,570
parallelized it across<font color="#E5E5E5"> four processes in</font>

814
00:32:43,380 --> 00:32:47,160
a simplified<font color="#CCCCCC"> version you can say</font><font color="#E5E5E5"> ran for</font>

815
00:32:45,570 --> 00:32:48,659
parallel hash joins they built their own

816
00:32:47,160 --> 00:32:50,250
hash tables<font color="#CCCCCC"> they were completely</font>

817
00:32:48,660 --> 00:32:53,610
independent<font color="#CCCCCC"> just</font><font color="#E5E5E5"> on different parts of</font>

818
00:32:50,250 --> 00:32:56,040
the<font color="#E5E5E5"> table</font><font color="#CCCCCC"> with the parallel aware</font><font color="#E5E5E5"> hash</font>

819
00:32:53,610 --> 00:32:57,929
joins they all share a hash table so<font color="#CCCCCC"> you</font>

820
00:32:56,040 --> 00:33:00,149
<font color="#E5E5E5">can get a much bigger hash table much</font>

821
00:32:57,930 --> 00:33:03,060
more<font color="#E5E5E5"> efficiency by still using it across</font>

822
00:33:00,150 --> 00:33:03,990
<font color="#E5E5E5">multiple processes and these are all</font>

823
00:33:03,060 --> 00:33:05,250
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that you don't have to do</font>

824
00:33:03,990 --> 00:33:07,230
anything<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this is just like</font>

825
00:33:05,250 --> 00:33:09,810
<font color="#E5E5E5">literally run eleven and your queries</font>

826
00:33:07,230 --> 00:33:14,220
will be faster that's<font color="#E5E5E5"> the best kind of</font>

827
00:33:09,810 --> 00:33:17,570
enhancements<font color="#E5E5E5"> right we now have the</font>

828
00:33:14,220 --> 00:33:20,310
<font color="#CCCCCC">ability to do parallel create index</font>

829
00:33:17,570 --> 00:33:21,720
because well create index is a DDL

830
00:33:20,310 --> 00:33:24,990
command that usually takes a long time

831
00:33:21,720 --> 00:33:27,570
<font color="#E5E5E5">if you have a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> data and it's</font><font color="#CCCCCC"> very</font>

832
00:33:24,990 --> 00:33:29,070
often CPU box unlike many other DDL

833
00:33:27,570 --> 00:33:31,379
commands which<font color="#E5E5E5"> are blocked</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the amount</font>

834
00:33:29,070 --> 00:33:32,669
<font color="#CCCCCC">of i/o you can do create index in its</font>

835
00:33:31,380 --> 00:33:34,650
simplest form well it loads your<font color="#E5E5E5"> whole</font>

836
00:33:32,670 --> 00:33:36,420
table it sorts it and then it writes it

837
00:33:34,650 --> 00:33:37,890
out there's an index right<font color="#E5E5E5"> obviously if</font>

838
00:33:36,420 --> 00:33:39,630
it's a large<font color="#CCCCCC"> table</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> quite that</font>

839
00:33:37,890 --> 00:33:41,730
simple<font color="#E5E5E5"> but</font><font color="#CCCCCC"> the basic principle is that</font>

840
00:33:39,630 --> 00:33:44,360
and sorting takes time<font color="#E5E5E5"> sorting is</font>

841
00:33:41,730 --> 00:33:46,679
expensive so we can<font color="#CCCCCC"> parallel eyes</font><font color="#E5E5E5"> that</font>

842
00:33:44,360 --> 00:33:49,290
<font color="#E5E5E5">we have a new parameter</font><font color="#CCCCCC"> called max</font>

843
00:33:46,679 --> 00:33:51,010
parallel maintenance workers say that

844
00:33:49,290 --> 00:33:53,019
fast<font color="#CCCCCC"> four times</font>

845
00:33:51,010 --> 00:33:55,120
the default value<font color="#CCCCCC"> is two which means</font>

846
00:33:53,019 --> 00:33:58,269
that your create index will use two<font color="#CCCCCC"> CPUs</font>

847
00:33:55,120 --> 00:33:59,889
<font color="#E5E5E5">to</font><font color="#CCCCCC"> run there are definite cases</font>

848
00:33:58,269 --> 00:34:02,200
particularly<font color="#CCCCCC"> if you're right loading</font>

849
00:33:59,890 --> 00:34:04,390
<font color="#E5E5E5">from a dump or in a big load jobs where</font>

850
00:34:02,200 --> 00:34:06,490
you<font color="#CCCCCC"> don't really care about the effect</font>

851
00:34:04,390 --> 00:34:08,290
of the rest of the system where<font color="#E5E5E5"> you will</font>

852
00:34:06,490 --> 00:34:10,270
<font color="#CCCCCC">want to increase this</font><font color="#E5E5E5"> quite a lot by</font>

853
00:34:08,290 --> 00:34:12,429
<font color="#E5E5E5">eight and you scale out across</font><font color="#CCCCCC"> eight</font>

854
00:34:10,270 --> 00:34:13,960
CPUs for example problem is of<font color="#CCCCCC"> course if</font>

855
00:34:12,429 --> 00:34:16,240
you run your create index across<font color="#E5E5E5"> eight</font>

856
00:34:13,960 --> 00:34:18,639
CPUs<font color="#E5E5E5"> you probably kill everybody else on</font>

857
00:34:16,239 --> 00:34:20,888
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so you might not want to</font>

858
00:34:18,639 --> 00:34:22,510
<font color="#E5E5E5">change that globally for everything but</font>

859
00:34:20,889 --> 00:34:24,700
it's something that<font color="#E5E5E5"> is worth considering</font>

860
00:34:22,510 --> 00:34:27,760
now unfortunately parallel<font color="#CCCCCC"> creatine mix</font>

861
00:34:24,699 --> 00:34:29,230
only<font color="#CCCCCC"> works for b-tree</font><font color="#E5E5E5"> indexes the</font><font color="#CCCCCC"> most</font>

862
00:34:27,760 --> 00:34:30,760
expensive index I think we normally

863
00:34:29,230 --> 00:34:34,270
create today in<font color="#CCCCCC"> post-crisis for example</font>

864
00:34:30,760 --> 00:34:37,270
post<font color="#E5E5E5"> GIS geographical indexes they can't</font>

865
00:34:34,270 --> 00:34:38,859
be paralyzed what yet but<font color="#CCCCCC"> they can't be</font>

866
00:34:37,270 --> 00:34:42,149
paralyzed in<font color="#CCCCCC"> eleven hopefully we'll get</font>

867
00:34:38,859 --> 00:34:42,149
<font color="#CCCCCC">that</font><font color="#E5E5E5"> sorted but it's not there yet</font>

868
00:34:42,550 --> 00:34:47,080
<font color="#E5E5E5">so parallel query was the big headline</font>

869
00:34:45,369 --> 00:34:50,080
feature of<font color="#CCCCCC"> Postgres nine six right and</font>

870
00:34:47,080 --> 00:34:52,960
it made really<font color="#E5E5E5"> useful intent the big</font>

871
00:34:50,080 --> 00:34:56,199
headline feature in<font color="#CCCCCC"> Postgres 10 was</font>

872
00:34:52,960 --> 00:34:58,660
partitioning<font color="#E5E5E5"> and in my view sort of just</font>

873
00:34:56,199 --> 00:35:01,390
like parallel query was not really<font color="#CCCCCC"> that</font>

874
00:34:58,660 --> 00:35:04,690
useful in<font color="#E5E5E5"> 96 partitioning is not really</font>

875
00:35:01,390 --> 00:35:08,049
<font color="#CCCCCC">that useful in 10 but it builds</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

876
00:35:04,690 --> 00:35:09,730
important infrastructure<font color="#E5E5E5"> and 11 for</font>

877
00:35:08,050 --> 00:35:12,099
partitioning<font color="#E5E5E5"> is like 10 for parallelism</font>

878
00:35:09,730 --> 00:35:14,380
<font color="#CCCCCC">it starts delivering like now</font><font color="#E5E5E5"> is when</font>

879
00:35:12,099 --> 00:35:16,540
you<font color="#CCCCCC"> get</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> benefits</font><font color="#E5E5E5"> there were</font><font color="#CCCCCC"> a</font>

880
00:35:14,380 --> 00:35:18,310
lot of things<font color="#E5E5E5"> declarative partitioning</font>

881
00:35:16,540 --> 00:35:20,410
with the<font color="#E5E5E5"> syntax and basic functionality</font>

882
00:35:18,310 --> 00:35:22,150
was in<font color="#CCCCCC"> 10 so if you were using the</font>

883
00:35:20,410 --> 00:35:23,950
previous sort of manual partitioning<font color="#E5E5E5"> and</font>

884
00:35:22,150 --> 00:35:25,510
you're on<font color="#E5E5E5"> 10 it's definitely worth</font>

885
00:35:23,950 --> 00:35:27,220
migrating to this one but it

886
00:35:25,510 --> 00:35:29,410
fundamentally works exactly the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> as</font>

887
00:35:27,220 --> 00:35:31,810
<font color="#CCCCCC">before just with prettier syntax but</font><font color="#E5E5E5"> it</font>

888
00:35:29,410 --> 00:35:35,170
has all the same<font color="#CCCCCC"> drawbacks</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> it</font>

889
00:35:31,810 --> 00:35:36,849
fixed like one thing now 11 fixes<font color="#CCCCCC"> a</font>

890
00:35:35,170 --> 00:35:40,180
bunch of things number one it adds

891
00:35:36,849 --> 00:35:41,980
support for default partitions in

892
00:35:40,180 --> 00:35:43,390
posters<font color="#CCCCCC"> 10 if you</font><font color="#E5E5E5"> added partitions and</font>

893
00:35:41,980 --> 00:35:44,530
you try to insert a row<font color="#E5E5E5"> that didn't</font>

894
00:35:43,390 --> 00:35:48,310
match anything you would just get<font color="#E5E5E5"> an</font>

895
00:35:44,530 --> 00:35:50,349
error in 11 you<font color="#E5E5E5"> can add a partition like</font>

896
00:35:48,310 --> 00:35:52,420
this you know partition<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the default</font>

897
00:35:50,349 --> 00:35:55,650
and every row<font color="#CCCCCC"> that doesn't match</font>

898
00:35:52,420 --> 00:35:55,650
anything else<font color="#E5E5E5"> will go here</font>

899
00:35:56,670 --> 00:36:01,569
one of the absolute biggest<font color="#E5E5E5"> thing is if</font>

900
00:35:59,560 --> 00:36:04,089
you did<font color="#E5E5E5"> in previous versions if you</font>

901
00:36:01,569 --> 00:36:05,950
didn't update<font color="#E5E5E5"> on a row so that</font><font color="#CCCCCC"> the</font>

902
00:36:04,089 --> 00:36:07,900
partitioning he changed so that<font color="#E5E5E5"> it would</font>

903
00:36:05,950 --> 00:36:10,839
end<font color="#E5E5E5"> up in a different</font><font color="#CCCCCC"> partition it would</font>

904
00:36:07,900 --> 00:36:13,030
just fail you can<font color="#CCCCCC"> do that once you put a</font>

905
00:36:10,839 --> 00:36:15,910
row<font color="#E5E5E5"> into a partition it would have to</font>

906
00:36:13,030 --> 00:36:16,510
stay<font color="#E5E5E5"> in that partition in</font><font color="#CCCCCC"> eleven you can</font>

907
00:36:15,910 --> 00:36:17,680
just<font color="#CCCCCC"> update it</font>

908
00:36:16,510 --> 00:36:20,440
it'll get moved<font color="#E5E5E5"> to the other partition</font>

909
00:36:17,680 --> 00:36:21,848
<font color="#E5E5E5">it'll just work what you had to do</font>

910
00:36:20,440 --> 00:36:24,430
<font color="#CCCCCC">previously was</font><font color="#E5E5E5"> basically manually</font>

911
00:36:21,849 --> 00:36:25,869
<font color="#E5E5E5">deleted and then reinsert it and then it</font>

912
00:36:24,430 --> 00:36:28,419
<font color="#E5E5E5">would work but that comes with other</font>

913
00:36:25,869 --> 00:36:30,730
<font color="#CCCCCC">it's a</font><font color="#E5E5E5"> lot more</font><font color="#CCCCCC"> work it's</font><font color="#E5E5E5"> tricky and the</font>

914
00:36:28,420 --> 00:36:32,980
whole point of partitioning is that it's

915
00:36:30,730 --> 00:36:34,450
supposed<font color="#CCCCCC"> to be transparent</font><font color="#E5E5E5"> right it's</font>

916
00:36:32,980 --> 00:36:36,400
supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> like one table through</font>

917
00:36:34,450 --> 00:36:38,319
<font color="#E5E5E5">your application while</font><font color="#CCCCCC"> actually being a</font>

918
00:36:36,400 --> 00:36:40,900
<font color="#E5E5E5">hundred tables underneath and then</font>

919
00:36:38,319 --> 00:36:43,480
having<font color="#CCCCCC"> to not do update is not really</font>

920
00:36:40,900 --> 00:36:45,700
transparent<font color="#E5E5E5"> it's still not perfectly</font>

921
00:36:43,480 --> 00:36:47,170
transparent<font color="#E5E5E5"> but it's much closer</font><font color="#CCCCCC"> now you</font>

922
00:36:45,700 --> 00:36:49,750
can still get some concurrency issues

923
00:36:47,170 --> 00:36:52,770
<font color="#E5E5E5">because in practice what it does is it</font>

924
00:36:49,750 --> 00:36:55,420
delete and then an insert<font color="#CCCCCC"> but they're</font>

925
00:36:52,770 --> 00:36:57,220
not as<font color="#E5E5E5"> bad as they were before</font><font color="#CCCCCC"> but</font>

926
00:36:55,420 --> 00:36:58,480
<font color="#E5E5E5">they're crude in theory you could do the</font>

927
00:36:57,220 --> 00:37:01,328
delete<font color="#E5E5E5"> and then somebody else does the</font>

928
00:36:58,480 --> 00:37:04,150
<font color="#E5E5E5">same thing at the same time and things</font>

929
00:37:01,329 --> 00:37:05,740
like<font color="#E5E5E5"> that another limitation and an</font>

930
00:37:04,150 --> 00:37:07,660
advantage<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you had no way to</font>

931
00:37:05,740 --> 00:37:10,390
actually once<font color="#E5E5E5"> you'd partition your table</font>

932
00:37:07,660 --> 00:37:11,980
you couldn't<font color="#E5E5E5"> create indexes across the</font>

933
00:37:10,390 --> 00:37:13,299
whole<font color="#CCCCCC"> thing you're in you would have to</font>

934
00:37:11,980 --> 00:37:16,420
create indexes individually in each

935
00:37:13,300 --> 00:37:18,130
partition<font color="#CCCCCC"> 11</font><font color="#E5E5E5"> adds what we call local</font>

936
00:37:16,420 --> 00:37:19,530
<font color="#E5E5E5">partition indexes which is you can</font>

937
00:37:18,130 --> 00:37:21,730
<font color="#CCCCCC">create an index</font><font color="#E5E5E5"> on your master table</font>

938
00:37:19,530 --> 00:37:23,319
which will then automatically get

939
00:37:21,730 --> 00:37:26,109
created across<font color="#E5E5E5"> all of your partitions</font>

940
00:37:23,319 --> 00:37:29,589
and most importantly if you<font color="#E5E5E5"> create a</font><font color="#CCCCCC"> new</font>

941
00:37:26,109 --> 00:37:31,509
partition<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> also get the index so</font>

942
00:37:29,589 --> 00:37:33,700
<font color="#E5E5E5">it keeps going now you can still add</font>

943
00:37:31,510 --> 00:37:35,349
individual partition indexes as well

944
00:37:33,700 --> 00:37:37,960
because maybe you know if you have

945
00:37:35,349 --> 00:37:40,240
<font color="#CCCCCC">time-based data your old partitions can</font>

946
00:37:37,960 --> 00:37:41,790
offer<font color="#CCCCCC"> can't afford</font><font color="#E5E5E5"> to have a few more</font>

947
00:37:40,240 --> 00:37:44,560
indexes<font color="#CCCCCC"> because they're mostly read-only</font>

948
00:37:41,790 --> 00:37:48,400
<font color="#E5E5E5">so you can still have them but</font><font color="#CCCCCC"> you can</font>

949
00:37:44,560 --> 00:37:50,470
create these indexes that<font color="#CCCCCC"> will spread</font>

950
00:37:48,400 --> 00:37:54,190
out all<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> including</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> ones</font>

951
00:37:50,470 --> 00:37:59,609
<font color="#E5E5E5">and you can actually now create a cross</font>

952
00:37:54,190 --> 00:38:03,430
partition unique constraint<font color="#E5E5E5"> as long as</font>

953
00:37:59,609 --> 00:38:05,710
the old partition keys are part of the

954
00:38:03,430 --> 00:38:07,899
<font color="#CCCCCC">constraint because then Postgres can</font>

955
00:38:05,710 --> 00:38:09,700
know that this is<font color="#E5E5E5"> actually unique across</font>

956
00:38:07,900 --> 00:38:11,890
all of the

957
00:38:09,700 --> 00:38:14,098
all of the partitions by the fact that

958
00:38:11,890 --> 00:38:16,598
<font color="#E5E5E5">it is also unique on the individual ones</font>

959
00:38:14,099 --> 00:38:18,400
<font color="#E5E5E5">now this is the foundation</font><font color="#CCCCCC"> for being</font>

960
00:38:16,599 --> 00:38:21,339
<font color="#E5E5E5">able to have a foreign key pointing to a</font>

961
00:38:18,400 --> 00:38:23,829
partition table unfortunately we can't

962
00:38:21,339 --> 00:38:25,808
do that<font color="#E5E5E5"> yet we're hoping</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> that</font>

963
00:38:23,829 --> 00:38:28,000
it's a patch<font color="#CCCCCC"> that's being</font><font color="#E5E5E5"> reviewed for</font><font color="#CCCCCC"> a</font>

964
00:38:25,809 --> 00:38:29,349
<font color="#E5E5E5">post</font><font color="#CCCCCC"> post version</font><font color="#E5E5E5"> 12 and just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font>

965
00:38:28,000 --> 00:38:30,880
<font color="#E5E5E5">of days ago I think we heard the report</font>

966
00:38:29,349 --> 00:38:32,470
saying<font color="#E5E5E5"> it's most likely</font><font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> in</font>

967
00:38:30,880 --> 00:38:36,730
there but<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> no</font>

968
00:38:32,470 --> 00:38:39,339
promises<font color="#CCCCCC"> other things around</font><font color="#E5E5E5"> the</font>

969
00:38:36,730 --> 00:38:41,410
partitioning<font color="#E5E5E5"> insert on conflict use that</font>

970
00:38:39,339 --> 00:38:43,058
the the absurd method<font color="#E5E5E5"> insert on conflict</font>

971
00:38:41,410 --> 00:38:45,038
to update or insert on conflict<font color="#E5E5E5"> do</font>

972
00:38:43,059 --> 00:38:49,270
nothing it didn't work on partitioning

973
00:38:45,039 --> 00:38:51,250
now it does<font color="#E5E5E5"> okay that's good</font><font color="#CCCCCC"> that's also</font>

974
00:38:49,270 --> 00:38:54,759
one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those it's not transparent if</font>

975
00:38:51,250 --> 00:38:56,890
some things don't<font color="#E5E5E5"> work another really</font>

976
00:38:54,760 --> 00:38:59,589
big thing is we have a new and better

977
00:38:56,890 --> 00:39:01,779
way of doing partition pruning<font color="#CCCCCC"> partition</font>

978
00:38:59,589 --> 00:39:03,849
pruning is is when the query planner and

979
00:39:01,780 --> 00:39:05,049
executor figures out that<font color="#CCCCCC"> oh we only</font>

980
00:39:03,849 --> 00:39:06,549
need to<font color="#E5E5E5"> look at one</font><font color="#CCCCCC"> of your hundred</font>

981
00:39:05,049 --> 00:39:07,809
partitions<font color="#E5E5E5"> those things run faster</font>

982
00:39:06,549 --> 00:39:10,538
<font color="#E5E5E5">that's one of the main reasons we do</font>

983
00:39:07,809 --> 00:39:12,520
<font color="#CCCCCC">partition</font><font color="#E5E5E5"> right the way that this used</font>

984
00:39:10,539 --> 00:39:15,970
to<font color="#CCCCCC"> work is</font><font color="#E5E5E5"> that post Chris did is in the</font>

985
00:39:12,520 --> 00:39:17,319
planner<font color="#E5E5E5"> so when you submit</font><font color="#CCCCCC"> your query it</font>

986
00:39:15,970 --> 00:39:18,788
would look<font color="#E5E5E5"> at the query it will look at</font>

987
00:39:17,319 --> 00:39:19,990
the<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> to the query and</font><font color="#E5E5E5"> based on</font>

988
00:39:18,789 --> 00:39:23,170
<font color="#E5E5E5">that</font><font color="#CCCCCC"> data it</font><font color="#E5E5E5"> would figure out which</font>

989
00:39:19,990 --> 00:39:24,970
partitions to<font color="#E5E5E5"> scan and there were a lot</font>

990
00:39:23,170 --> 00:39:26,140
of<font color="#E5E5E5"> cases where that could fail for</font>

991
00:39:24,970 --> 00:39:28,959
example if you had a query you know

992
00:39:26,140 --> 00:39:31,930
where x<font color="#E5E5E5"> equals or where</font><font color="#CCCCCC"> x in and put a</font>

993
00:39:28,960 --> 00:39:33,640
sub query<font color="#CCCCCC"> ner then</font><font color="#E5E5E5"> the planner has no</font>

994
00:39:31,930 --> 00:39:35,799
way of<font color="#CCCCCC"> knowing what the sub query is</font>

995
00:39:33,640 --> 00:39:38,680
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> return so it will scan</font><font color="#CCCCCC"> all</font>

996
00:39:35,799 --> 00:39:41,079
partitions<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> defeats a lot of</font>

997
00:39:38,680 --> 00:39:43,058
point the way that xi does it is<font color="#E5E5E5"> it does</font>

998
00:39:41,079 --> 00:39:44,829
<font color="#E5E5E5">the old pruning first so it looks at the</font>

999
00:39:43,059 --> 00:39:46,990
query<font color="#E5E5E5"> and deletes it removes all</font><font color="#CCCCCC"> the</font>

1000
00:39:44,829 --> 00:39:48,910
partitions<font color="#E5E5E5"> it can but then it runs a</font>

1001
00:39:46,990 --> 00:39:51,459
second run of pruning<font color="#E5E5E5"> once it's in the</font>

1002
00:39:48,910 --> 00:39:53,379
executor<font color="#E5E5E5"> and it can run the sub query we</font>

1003
00:39:51,460 --> 00:39:55,809
<font color="#E5E5E5">can get oh I got these numbers back and</font>

1004
00:39:53,380 --> 00:39:58,240
then it run a second pass and deletes a

1005
00:39:55,809 --> 00:40:00,069
new bunch of partitions<font color="#CCCCCC"> so there's a lot</font>

1006
00:39:58,240 --> 00:40:02,470
<font color="#E5E5E5">of types of queries</font><font color="#CCCCCC"> that would</font>

1007
00:40:00,069 --> 00:40:04,839
previously<font color="#E5E5E5"> just give you a scan across</font>

1008
00:40:02,470 --> 00:40:07,689
every partition<font color="#CCCCCC"> that will now just scan</font>

1009
00:40:04,839 --> 00:40:08,980
the partitions that<font color="#E5E5E5"> you need which again</font>

1010
00:40:07,690 --> 00:40:10,569
is one of<font color="#E5E5E5"> the main reasons that we</font><font color="#CCCCCC"> use</font>

1011
00:40:08,980 --> 00:40:14,920
partitions right it's to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> scan</font>

1012
00:40:10,569 --> 00:40:17,710
them and<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to delete them</font><font color="#CCCCCC"> we've</font>

1013
00:40:14,920 --> 00:40:20,180
added<font color="#E5E5E5"> patch partitioning previously we</font>

1014
00:40:17,710 --> 00:40:22,339
had<font color="#CCCCCC"> list partition</font>

1015
00:40:20,180 --> 00:40:24,019
range partition now you can say hash

1016
00:40:22,339 --> 00:40:25,578
partition which is the idea<font color="#CCCCCC"> you pick a</font>

1017
00:40:24,019 --> 00:40:27,950
column and<font color="#E5E5E5"> you say I want this in four</font>

1018
00:40:25,579 --> 00:40:31,910
partitions<font color="#E5E5E5"> have the system distributed</font>

1019
00:40:27,950 --> 00:40:33,230
evenly between<font color="#E5E5E5"> these</font><font color="#CCCCCC"> partitions as good</font>

1020
00:40:31,910 --> 00:40:34,339
as evenly becomes based on the hash

1021
00:40:33,230 --> 00:40:37,700
value but if you have a good hash

1022
00:40:34,339 --> 00:40:40,308
function<font color="#E5E5E5"> it will be pretty</font><font color="#CCCCCC"> good so in</font>

1023
00:40:37,700 --> 00:40:42,379
this case previously<font color="#CCCCCC"> you would say you</font>

1024
00:40:40,309 --> 00:40:44,660
say partition by hash of<font color="#E5E5E5"> I instead</font><font color="#CCCCCC"> of</font>

1025
00:40:42,380 --> 00:40:45,650
<font color="#E5E5E5">partition by</font><font color="#CCCCCC"> Lister range and then you</font>

1026
00:40:44,660 --> 00:40:47,538
crew you still have to create<font color="#E5E5E5"> the</font>

1027
00:40:45,650 --> 00:40:49,940
partitions<font color="#CCCCCC"> so I say</font><font color="#E5E5E5"> will create this</font>

1028
00:40:47,539 --> 00:40:51,890
partition<font color="#CCCCCC"> four values with module four</font>

1029
00:40:49,940 --> 00:40:53,990
<font color="#E5E5E5">remainder</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> then you get a</font><font color="#CCCCCC"> modules</font>

1030
00:40:51,890 --> 00:40:55,819
<font color="#E5E5E5">for remainder one two and three these</font>

1031
00:40:53,990 --> 00:40:58,819
<font color="#CCCCCC">your four partitions and you can sub</font>

1032
00:40:55,819 --> 00:41:03,430
partition it as long<font color="#E5E5E5"> as you keep the</font>

1033
00:40:58,819 --> 00:41:06,109
ratios workable and<font color="#CCCCCC"> get into more locks</font>

1034
00:41:03,430 --> 00:41:07,700
and this is for<font color="#E5E5E5"> just sort of if</font><font color="#CCCCCC"> you just</font>

1035
00:41:06,109 --> 00:41:09,619
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> distribute your data maybe</font>

1036
00:41:07,700 --> 00:41:11,000
across multiple storage devices or

1037
00:41:09,619 --> 00:41:15,740
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that you can put your</font>

1038
00:41:11,000 --> 00:41:18,980
partitions across them we've added

1039
00:41:15,740 --> 00:41:22,160
partition wise joins<font color="#E5E5E5"> which is basically</font>

1040
00:41:18,980 --> 00:41:24,589
if you have<font color="#E5E5E5"> two partition tables that</font>

1041
00:41:22,160 --> 00:41:26,960
are partitioned on the same key and<font color="#E5E5E5"> you</font>

1042
00:41:24,589 --> 00:41:29,480
join on that key<font color="#E5E5E5"> then you can</font><font color="#CCCCCC"> actually</font>

1043
00:41:26,960 --> 00:41:32,029
execute that query as joining<font color="#E5E5E5"> partitions</font>

1044
00:41:29,480 --> 00:41:33,859
individually to<font color="#CCCCCC"> each other instead of</font>

1045
00:41:32,029 --> 00:41:35,480
just<font color="#E5E5E5"> doing one partition across all the</font>

1046
00:41:33,859 --> 00:41:40,308
others than one partition across all the

1047
00:41:35,480 --> 00:41:41,960
others<font color="#CCCCCC"> it has to be a</font><font color="#E5E5E5"> joint on the</font>

1048
00:41:40,309 --> 00:41:43,700
complete partition key but if you do

1049
00:41:41,960 --> 00:41:45,500
that the planner can<font color="#E5E5E5"> figure out and</font><font color="#CCCCCC"> see</font>

1050
00:41:43,700 --> 00:41:47,180
<font color="#CCCCCC">that okay this is the special case</font><font color="#E5E5E5"> where</font>

1051
00:41:45,500 --> 00:41:49,130
you can run these as many simple

1052
00:41:47,180 --> 00:41:51,500
operations instead of one<font color="#E5E5E5"> more</font>

1053
00:41:49,130 --> 00:41:53,569
complicated operation this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> turn</font><font color="#E5E5E5"> off</font>

1054
00:41:51,500 --> 00:41:56,210
<font color="#CCCCCC">by default</font><font color="#E5E5E5"> so there's a configuration</font>

1055
00:41:53,569 --> 00:41:58,130
<font color="#E5E5E5">like enable partition wise joins equals</font>

1056
00:41:56,210 --> 00:42:00,349
false by default<font color="#CCCCCC"> the reason for</font><font color="#E5E5E5"> that is</font>

1057
00:41:58,130 --> 00:42:02,809
<font color="#CCCCCC">that it makes planning</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> your queries</font>

1058
00:42:00,349 --> 00:42:04,279
on partition tables<font color="#E5E5E5"> more expensive like</font>

1059
00:42:02,809 --> 00:42:06,799
there's a cost<font color="#E5E5E5"> involved in</font><font color="#CCCCCC"> figuring this</font>

1060
00:42:04,279 --> 00:42:08,029
out but<font color="#E5E5E5"> if you have a</font><font color="#CCCCCC"> workload where you</font>

1061
00:42:06,799 --> 00:42:09,950
know that you're actually<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> this</font>

1062
00:42:08,029 --> 00:42:12,049
<font color="#CCCCCC">your joining</font><font color="#E5E5E5"> tables that</font><font color="#CCCCCC"> are partitioned</font>

1063
00:42:09,950 --> 00:42:14,089
<font color="#E5E5E5">on the same Keys then you should</font>

1064
00:42:12,049 --> 00:42:16,339
<font color="#CCCCCC">definitely</font><font color="#E5E5E5"> consider turning this on for</font>

1065
00:42:14,089 --> 00:42:18,140
those particular sessions but you know

1066
00:42:16,339 --> 00:42:20,690
just<font color="#E5E5E5"> issuing the set</font><font color="#CCCCCC"> enabled partition</font>

1067
00:42:18,140 --> 00:42:23,769
wise joining<font color="#E5E5E5"> was on or true</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> one or</font>

1068
00:42:20,690 --> 00:42:23,769
you know<font color="#E5E5E5"> whichever one you prefer</font>

1069
00:42:24,079 --> 00:42:28,730
so that one<font color="#CCCCCC"> of the few of</font><font color="#E5E5E5"> these that</font><font color="#CCCCCC"> you</font>

1070
00:42:26,359 --> 00:42:31,869
<font color="#CCCCCC">actually have</font><font color="#E5E5E5"> to turn on most of the</font>

1071
00:42:28,730 --> 00:42:31,869
other things<font color="#CCCCCC"> are just there</font>

1072
00:42:32,650 --> 00:42:37,660
we've added something<font color="#E5E5E5"> called partition</font>

1073
00:42:35,170 --> 00:42:40,000
wise aggregates which<font color="#E5E5E5"> again if you do a</font>

1074
00:42:37,660 --> 00:42:42,310
group by and you group by on<font color="#E5E5E5"> your</font>

1075
00:42:40,000 --> 00:42:44,050
partition<font color="#E5E5E5"> key or you know part of the</font>

1076
00:42:42,310 --> 00:42:45,940
partition<font color="#CCCCCC"> game sorry the partition key</font>

1077
00:42:44,050 --> 00:42:47,980
is part<font color="#CCCCCC"> of your group</font><font color="#E5E5E5"> by then you can</font>

1078
00:42:45,940 --> 00:42:50,800
actually run<font color="#E5E5E5"> the group on the individual</font>

1079
00:42:47,980 --> 00:42:53,680
partition and bring up the summary

1080
00:42:50,800 --> 00:42:57,030
values<font color="#E5E5E5"> and then run run it again on</font>

1081
00:42:53,680 --> 00:43:02,950
those<font color="#E5E5E5"> thereby making the scan much more</font>

1082
00:42:57,030 --> 00:43:05,200
scalable<font color="#CCCCCC"> for example I mean the sum of</font>

1083
00:43:02,950 --> 00:43:07,810
of a bunch<font color="#E5E5E5"> of rows is the same thing as</font>

1084
00:43:05,200 --> 00:43:11,279
the sum of the<font color="#CCCCCC"> sons then it's based</font><font color="#E5E5E5"> on</font>

1085
00:43:07,810 --> 00:43:11,279
that<font color="#E5E5E5"> as long as</font><font color="#CCCCCC"> you have a partition key</font>

1086
00:43:11,310 --> 00:43:16,630
there is<font color="#E5E5E5"> some other sort of general</font>

1087
00:43:13,870 --> 00:43:18,670
performance<font color="#CCCCCC"> the particularly</font><font color="#E5E5E5"> big thing</font>

1088
00:43:16,630 --> 00:43:21,520
<font color="#CCCCCC">yields here as Postgres now has</font><font color="#E5E5E5"> JIT</font>

1089
00:43:18,670 --> 00:43:23,350
compilation of expressions and JIT

1090
00:43:21,520 --> 00:43:25,420
compilations<font color="#E5E5E5"> or what we call tuple D</font>

1091
00:43:23,350 --> 00:43:26,799
forming and forming which of course

1092
00:43:25,420 --> 00:43:32,950
everybody knows<font color="#E5E5E5"> exactly what it means</font>

1093
00:43:26,800 --> 00:43:34,750
right<font color="#CCCCCC"> it uses LLVM so the availability</font>

1094
00:43:32,950 --> 00:43:37,629
<font color="#E5E5E5">of this actually depends on your package</font>

1095
00:43:34,750 --> 00:43:39,340
<font color="#E5E5E5">Postgres</font><font color="#CCCCCC"> what's</font><font color="#E5E5E5"> normal is you may</font><font color="#CCCCCC"> need</font>

1096
00:43:37,630 --> 00:43:41,860
to install<font color="#E5E5E5"> an extra package for example</font>

1097
00:43:39,340 --> 00:43:43,450
<font color="#CCCCCC">if you're using</font><font color="#E5E5E5"> the yum distribution on</font>

1098
00:43:41,860 --> 00:43:46,120
<font color="#CCCCCC">RedHat or</font><font color="#E5E5E5"> centers you know</font><font color="#CCCCCC"> there's a</font>

1099
00:43:43,450 --> 00:43:47,410
separate<font color="#E5E5E5"> package that you install</font><font color="#CCCCCC"> on top</font>

1100
00:43:46,120 --> 00:43:51,640
of your<font color="#E5E5E5"> host press that</font><font color="#CCCCCC"> just enables</font>

1101
00:43:47,410 --> 00:43:54,190
<font color="#E5E5E5">this and what it does is for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> it</font>

1102
00:43:51,640 --> 00:43:55,750
does<font color="#E5E5E5"> expression in</font><font color="#CCCCCC"> lining which is if</font>

1103
00:43:54,190 --> 00:43:58,210
you run like<font color="#CCCCCC"> theyd big data warehousing</font>

1104
00:43:55,750 --> 00:44:00,210
queries<font color="#E5E5E5"> the way the Postgres works is is</font>

1105
00:43:58,210 --> 00:44:02,920
you<font color="#CCCCCC"> know you've run the expressions</font>

1106
00:44:00,210 --> 00:44:04,810
<font color="#CCCCCC">normally in software</font><font color="#E5E5E5"> and it's not super</font>

1107
00:44:02,920 --> 00:44:06,220
optimized for the<font color="#E5E5E5"> CPU because</font><font color="#CCCCCC"> he can't</font>

1108
00:44:04,810 --> 00:44:08,830
be because<font color="#E5E5E5"> we have all sorts</font><font color="#CCCCCC"> of</font>

1109
00:44:06,220 --> 00:44:10,359
interesting<font color="#E5E5E5"> data types and what it'll do</font>

1110
00:44:08,830 --> 00:44:13,960
is<font color="#E5E5E5"> when the cost goes above a certain</font>

1111
00:44:10,360 --> 00:44:16,570
<font color="#E5E5E5">cost it will trigger and have LLVM byte</font>

1112
00:44:13,960 --> 00:44:18,130
<font color="#CCCCCC">compile this particular expression you</font>

1113
00:44:16,570 --> 00:44:20,560
know take this column<font color="#CCCCCC"> plus this column</font>

1114
00:44:18,130 --> 00:44:22,630
divided<font color="#E5E5E5"> by this column</font><font color="#CCCCCC"> and turn that</font>

1115
00:44:20,560 --> 00:44:24,940
into machine code<font color="#E5E5E5"> and then run your</font>

1116
00:44:22,630 --> 00:44:26,530
query with that which you know if you're

1117
00:44:24,940 --> 00:44:28,420
<font color="#E5E5E5">processing a few hundred million rows or</font>

1118
00:44:26,530 --> 00:44:31,090
something that can be massively much

1119
00:44:28,420 --> 00:44:33,900
faster and seen benchmark of you know

1120
00:44:31,090 --> 00:44:36,370
ridiculous<font color="#E5E5E5"> numbers like</font><font color="#CCCCCC"> ninety percent</font>

1121
00:44:33,900 --> 00:44:38,370
that's obviously a constructed benchmark

1122
00:44:36,370 --> 00:44:40,450
<font color="#CCCCCC">there also</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> where it will be slower</font>

1123
00:44:38,370 --> 00:44:42,890
because<font color="#CCCCCC"> it takes longer</font><font color="#E5E5E5"> to do the</font>

1124
00:44:40,450 --> 00:44:45,680
<font color="#E5E5E5">compilation then it takes two</font><font color="#CCCCCC"> two</font>

1125
00:44:42,890 --> 00:44:48,529
run the query<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> the system tries to</font>

1126
00:44:45,680 --> 00:44:50,660
<font color="#E5E5E5">only enable it when it's beneficial it</font>

1127
00:44:48,529 --> 00:44:52,819
will not<font color="#CCCCCC"> always succeed</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> this a</font>

1128
00:44:50,660 --> 00:44:56,470
<font color="#E5E5E5">tuning parameter</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> tune how high</font>

1129
00:44:52,819 --> 00:44:56,470
should the cost be before we turn on yet

1130
00:44:56,529 --> 00:45:01,970
<font color="#E5E5E5">but</font><font color="#CCCCCC"> particularly if you are</font><font color="#E5E5E5"> running like</font>

1131
00:45:00,619 --> 00:45:03,170
data warehousing or something like<font color="#E5E5E5"> that</font>

1132
00:45:01,970 --> 00:45:06,019
<font color="#E5E5E5">something in the process</font><font color="#CCCCCC"> is large</font>

1133
00:45:03,170 --> 00:45:07,460
amounts of data<font color="#E5E5E5"> this go look at</font>

1134
00:45:06,019 --> 00:45:09,558
installing<font color="#E5E5E5"> those packages it will</font>

1135
00:45:07,460 --> 00:45:11,359
<font color="#CCCCCC">definitely</font><font color="#E5E5E5"> make things faster if what</font>

1136
00:45:09,559 --> 00:45:12,700
you're doing<font color="#CCCCCC"> is simple</font><font color="#E5E5E5"> OLTP you're never</font>

1137
00:45:11,359 --> 00:45:14,630
<font color="#E5E5E5">looking at more than two rows at a time</font>

1138
00:45:12,700 --> 00:45:16,819
<font color="#E5E5E5">it's probably</font><font color="#CCCCCC"> not gonna</font><font color="#E5E5E5"> make a</font>

1139
00:45:14,630 --> 00:45:18,319
<font color="#E5E5E5">fundamental difference it's for the</font>

1140
00:45:16,819 --> 00:45:22,430
cases where<font color="#CCCCCC"> you will run a lot</font><font color="#E5E5E5"> of</font>

1141
00:45:18,319 --> 00:45:24,380
<font color="#E5E5E5">expressions fast</font><font color="#CCCCCC"> so that's a lot of</font>

1142
00:45:22,430 --> 00:45:27,500
<font color="#E5E5E5">features</font><font color="#CCCCCC"> right then we've probably</font>

1143
00:45:24,380 --> 00:45:29,470
covered<font color="#CCCCCC"> I don't know five percent but</font>

1144
00:45:27,500 --> 00:45:31,490
<font color="#E5E5E5">hopefully</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> cover all the big ones</font>

1145
00:45:29,470 --> 00:45:33,379
<font color="#CCCCCC">this is always gonna be a lot more</font>

1146
00:45:31,490 --> 00:45:34,788
<font color="#E5E5E5">things right there's a lot of smaller</font>

1147
00:45:33,380 --> 00:45:38,390
fixes<font color="#CCCCCC"> there's a lot of performance</font>

1148
00:45:34,789 --> 00:45:40,039
improvements that we can't go through<font color="#E5E5E5"> if</font>

1149
00:45:38,390 --> 00:45:41,359
there are so usually say if there's any

1150
00:45:40,039 --> 00:45:43,369
of the Postgres developers in the room

1151
00:45:41,359 --> 00:45:45,920
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I didn't</font><font color="#CCCCCC"> mention your feature</font><font color="#E5E5E5"> I'm</font>

1152
00:45:43,369 --> 00:45:47,839
sorry I'm sure it's important<font color="#E5E5E5"> because</font>

1153
00:45:45,920 --> 00:45:49,279
all the features are important<font color="#CCCCCC"> they're</font>

1154
00:45:47,839 --> 00:45:53,900
important<font color="#E5E5E5"> to somebody they're important</font>

1155
00:45:49,279 --> 00:45:55,190
<font color="#E5E5E5">to somewhere so please help we do still</font>

1156
00:45:53,900 --> 00:45:57,740
need<font color="#E5E5E5"> your</font><font color="#CCCCCC"> help</font><font color="#E5E5E5"> Postgres</font><font color="#CCCCCC"> 11 has been</font>

1157
00:45:55,190 --> 00:45:59,569
released but<font color="#E5E5E5"> we still need your</font><font color="#CCCCCC"> help out</font>

1158
00:45:57,740 --> 00:46:02,538
here<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> know download and test it</font>

1159
00:45:59,569 --> 00:46:04,130
and<font color="#E5E5E5"> run</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and some of y'all</font><font color="#CCCCCC"> are already</font>

1160
00:46:02,539 --> 00:46:06,079
that's awesome now you need that need to

1161
00:46:04,130 --> 00:46:08,680
go test<font color="#E5E5E5"> the new features</font><font color="#CCCCCC"> that you maybe</font>

1162
00:46:06,079 --> 00:46:08,680
didn't<font color="#CCCCCC"> know existed</font>

1163
00:46:08,799 --> 00:46:13,490
download<font color="#CCCCCC"> your packages</font><font color="#E5E5E5"> run your</font>

1164
00:46:10,910 --> 00:46:14,990
application and let us know we're still

1165
00:46:13,490 --> 00:46:17,180
<font color="#E5E5E5">very much interested in feedback on</font>

1166
00:46:14,990 --> 00:46:17,930
things<font color="#E5E5E5"> like in particular</font><font color="#CCCCCC"> you know Oh in</font>

1167
00:46:17,180 --> 00:46:20,089
this workload

1168
00:46:17,930 --> 00:46:21,319
you know<font color="#CCCCCC"> JIT made things slower or you</font>

1169
00:46:20,089 --> 00:46:25,339
know the parallelism doesn't actually

1170
00:46:21,319 --> 00:46:26,509
work and things like<font color="#CCCCCC"> that we're we're we</font>

1171
00:46:25,339 --> 00:46:27,799
believe we're in pretty<font color="#E5E5E5"> good shape on</font>

1172
00:46:26,509 --> 00:46:29,210
the<font color="#E5E5E5"> effect</font><font color="#CCCCCC"> that we still deliver the</font>

1173
00:46:27,799 --> 00:46:30,529
<font color="#CCCCCC">correct responses</font><font color="#E5E5E5"> but there can</font>

1174
00:46:29,210 --> 00:46:32,529
definitely be you know performance

1175
00:46:30,529 --> 00:46:36,140
regressions under certain<font color="#E5E5E5"> workloads</font>

1176
00:46:32,529 --> 00:46:37,579
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we may need to tune default values</font>

1177
00:46:36,140 --> 00:46:38,990
<font color="#CCCCCC">for parameters and</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> that and</font>

1178
00:46:37,579 --> 00:46:41,119
if we get that<font color="#E5E5E5"> feedback in early it</font>

1179
00:46:38,990 --> 00:46:43,129
makes it easier<font color="#CCCCCC"> you don't have a version</font>

1180
00:46:41,119 --> 00:46:44,539
of<font color="#E5E5E5"> posters</font><font color="#CCCCCC"> twelve to test on yet but</font>

1181
00:46:43,130 --> 00:46:46,730
feedback<font color="#E5E5E5"> that you give us on posters</font>

1182
00:46:44,539 --> 00:46:49,670
<font color="#CCCCCC">eleven now</font><font color="#E5E5E5"> is going to make it into</font>

1183
00:46:46,730 --> 00:46:50,869
<font color="#E5E5E5">posters twelve</font><font color="#CCCCCC"> which you're going</font><font color="#E5E5E5"> to see</font>

1184
00:46:49,670 --> 00:46:53,869
in<font color="#CCCCCC"> about six months</font>

1185
00:46:50,869 --> 00:46:55,280
most likely development<font color="#E5E5E5"> ongoing we hope</font>

1186
00:46:53,869 --> 00:46:58,980
to have<font color="#CCCCCC"> it ready in</font>

1187
00:46:55,280 --> 00:47:00,119
let's call it<font color="#CCCCCC"> September and we'll see</font>

1188
00:46:58,980 --> 00:47:03,599
what<font color="#E5E5E5"> happens we hope to have it ready</font>

1189
00:47:00,119 --> 00:47:05,579
<font color="#E5E5E5">this</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> we all know you know time</font>

1190
00:47:03,599 --> 00:47:07,170
plans<font color="#E5E5E5"> and things so that's all I wanted</font>

1191
00:47:05,579 --> 00:47:09,570
<font color="#E5E5E5">to mention and thank you very much for</font>

1192
00:47:07,170 --> 00:47:11,520
showing up<font color="#E5E5E5"> and staying awake and on the</font>

1193
00:47:09,570 --> 00:47:14,250
second<font color="#E5E5E5"> day of</font><font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> that's pretty</font>

1194
00:47:11,520 --> 00:47:15,990
impressive<font color="#CCCCCC"> if you have any further</font>

1195
00:47:14,250 --> 00:47:17,280
<font color="#CCCCCC">questions I think</font><font color="#E5E5E5"> we have like three</font>

1196
00:47:15,990 --> 00:47:19,379
minutes<font color="#E5E5E5"> or so</font><font color="#CCCCCC"> before we have to get out</font>

1197
00:47:17,280 --> 00:47:21,680
and<font color="#CCCCCC"> after that feel free to just grab me</font>

1198
00:47:19,380 --> 00:47:25,020
outside for<font color="#CCCCCC"> any further questions but</font>

1199
00:47:21,680 --> 00:47:28,290
anyone<font color="#CCCCCC"> oh yes</font>

1200
00:47:25,020 --> 00:47:30,329
is it on yeah<font color="#CCCCCC"> I believe you said for</font><font color="#E5E5E5"> the</font>

1201
00:47:28,290 --> 00:47:34,650
partitioning<font color="#E5E5E5"> that there is now a feature</font>

1202
00:47:30,329 --> 00:47:38,730
where it will run a<font color="#E5E5E5"> sub-query first and</font>

1203
00:47:34,650 --> 00:47:40,140
<font color="#E5E5E5">I'm replan based on the results so that</font>

1204
00:47:38,730 --> 00:47:42,000
<font color="#CCCCCC">is not entirely correct it will not</font>

1205
00:47:40,140 --> 00:47:44,910
<font color="#CCCCCC">replant things based on</font><font color="#E5E5E5"> the result it</font>

1206
00:47:42,000 --> 00:47:46,470
will rerun<font color="#E5E5E5"> the partition pruning so the</font>

1207
00:47:44,910 --> 00:47:48,690
<font color="#CCCCCC">only</font><font color="#E5E5E5"> part that runs is the</font><font color="#CCCCCC"> whole</font><font color="#E5E5E5"> oh I</font>

1208
00:47:46,470 --> 00:47:50,910
<font color="#E5E5E5">know</font><font color="#CCCCCC"> that I don't need to</font><font color="#E5E5E5"> scan these</font>

1209
00:47:48,690 --> 00:47:52,829
partitions over here because based<font color="#E5E5E5"> on</font>

1210
00:47:50,910 --> 00:47:54,690
<font color="#E5E5E5">the things that came</font><font color="#CCCCCC"> out I know all my</font>

1211
00:47:52,829 --> 00:47:57,119
<font color="#E5E5E5">data is over here it doesn't</font><font color="#CCCCCC"> actually</font>

1212
00:47:54,690 --> 00:47:58,800
change the query plan oh that's a<font color="#E5E5E5"> shame</font>

1213
00:47:57,119 --> 00:48:00,150
you see a lot<font color="#CCCCCC"> of cases where that might</font>

1214
00:47:58,800 --> 00:48:01,619
help<font color="#E5E5E5"> actually there</font><font color="#CCCCCC"> that would</font>

1215
00:48:00,150 --> 00:48:03,270
<font color="#CCCCCC">definitely</font><font color="#E5E5E5"> be an interesting addition</font>

1216
00:48:01,619 --> 00:48:04,619
sort of generic<font color="#CCCCCC"> replanting when you</font>

1217
00:48:03,270 --> 00:48:06,780
start running<font color="#E5E5E5"> a query</font><font color="#CCCCCC"> and realize oh</font>

1218
00:48:04,619 --> 00:48:10,339
<font color="#E5E5E5">this is not good</font><font color="#CCCCCC"> but that's</font><font color="#E5E5E5"> not</font>

1219
00:48:06,780 --> 00:48:10,339
<font color="#CCCCCC">something we have</font><font color="#E5E5E5"> today no sorry</font>

1220
00:48:14,550 --> 00:48:21,060
anyone<font color="#CCCCCC"> else</font><font color="#E5E5E5"> any questions you up on in</font>

1221
00:48:18,940 --> 00:48:21,060
here

1222
00:48:23,310 --> 00:48:29,040
how should<font color="#E5E5E5"> we take care</font><font color="#CCCCCC"> of indexing when</font>

1223
00:48:26,200 --> 00:48:31,629
we use<font color="#E5E5E5"> window interpolations do we</font>

1224
00:48:29,040 --> 00:48:33,279
preferably have an index on the field

1225
00:48:31,630 --> 00:48:35,110
<font color="#E5E5E5">that is used for the ordering as I guess</font>

1226
00:48:33,280 --> 00:48:37,900
but<font color="#E5E5E5"> do we have</font><font color="#CCCCCC"> over other things</font><font color="#E5E5E5"> to take</font>

1227
00:48:35,110 --> 00:48:42,220
care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> you mean for the the window</font>

1228
00:48:37,900 --> 00:48:43,930
<font color="#E5E5E5">query yeah</font><font color="#CCCCCC"> it's it's really</font><font color="#E5E5E5"> the same</font>

1229
00:48:42,220 --> 00:48:45,879
<font color="#CCCCCC">with you what</font><font color="#E5E5E5"> is running</font><font color="#CCCCCC"> underneath is</font>

1230
00:48:43,930 --> 00:48:47,740
you know<font color="#E5E5E5"> it's select with an order by so</font>

1231
00:48:45,880 --> 00:48:49,420
<font color="#CCCCCC">yeah you need</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> kind of indexing</font>

1232
00:48:47,740 --> 00:48:51,879
considerations as you would if you just

1233
00:48:49,420 --> 00:48:53,230
<font color="#E5E5E5">did</font><font color="#CCCCCC"> that select with an order by okay if</font>

1234
00:48:51,880 --> 00:48:54,700
you you may also<font color="#E5E5E5"> have an outside where</font>

1235
00:48:53,230 --> 00:48:56,440
<font color="#E5E5E5">clause and then combine</font><font color="#CCCCCC"> it with the</font>

1236
00:48:54,700 --> 00:48:59,169
order by for<font color="#CCCCCC"> for an index like</font><font color="#E5E5E5"> that but</font>

1237
00:48:56,440 --> 00:49:00,820
but at the bottom<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> the same kind of</font>

1238
00:48:59,170 --> 00:49:02,710
indexes that<font color="#E5E5E5"> you would have these</font><font color="#CCCCCC"> two</font>

1239
00:49:00,820 --> 00:49:03,940
indexes would be used efficiently<font color="#CCCCCC"> for</font>

1240
00:49:02,710 --> 00:49:06,700
<font color="#E5E5E5">this kind of</font><font color="#CCCCCC"> operation we don't have</font>

1241
00:49:03,940 --> 00:49:08,650
anything on exactly existing indexes

1242
00:49:06,700 --> 00:49:10,569
<font color="#CCCCCC">well absolutely be used</font><font color="#E5E5E5"> of course if you</font>

1243
00:49:08,650 --> 00:49:12,250
run it across your<font color="#E5E5E5"> entire table it's</font>

1244
00:49:10,570 --> 00:49:13,570
probably<font color="#E5E5E5"> not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> the index but it</font>

1245
00:49:12,250 --> 00:49:15,160
didn't do<font color="#CCCCCC"> that before</font><font color="#E5E5E5"> either</font><font color="#CCCCCC"> yeah</font>

1246
00:49:13,570 --> 00:49:16,810
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> becomes too expensive but</font>

1247
00:49:15,160 --> 00:49:18,549
but it's the same considerations as you

1248
00:49:16,810 --> 00:49:22,650
you had for sorting that kind of<font color="#E5E5E5"> data</font>

1249
00:49:18,550 --> 00:49:22,650
before<font color="#E5E5E5"> okay thank you</font>

1250
00:49:35,660 --> 00:49:41,490
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> for transaction and</font>

1251
00:49:39,089 --> 00:49:44,190
procedures<font color="#E5E5E5"> now we can build the ETL</font>

1252
00:49:41,490 --> 00:49:47,640
process without<font color="#E5E5E5"> any third part</font><font color="#CCCCCC"> system</font>

1253
00:49:44,190 --> 00:49:50,250
and I would<font color="#CCCCCC"> like to ask about a</font><font color="#E5E5E5"> small</font>

1254
00:49:47,640 --> 00:49:52,680
<font color="#E5E5E5">thing calculated field to have</font>

1255
00:49:50,250 --> 00:49:56,609
calculated<font color="#E5E5E5"> field and table in tables</font>

1256
00:49:52,680 --> 00:50:01,410
like in<font color="#E5E5E5"> math</font><font color="#CCCCCC"> scale</font><font color="#E5E5E5"> to have indexes on</font>

1257
00:49:56,609 --> 00:50:04,020
this<font color="#E5E5E5"> in this field and there so we think</font>

1258
00:50:01,410 --> 00:50:06,328
like I think<font color="#E5E5E5"> the standard calls is</font><font color="#CCCCCC"> a</font>

1259
00:50:04,020 --> 00:50:08,640
generated column right where you you

1260
00:50:06,329 --> 00:50:12,270
define that this column is going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> X</font>

1261
00:50:08,640 --> 00:50:13,170
plus<font color="#E5E5E5"> y all right</font><font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have that what</font>

1262
00:50:12,270 --> 00:50:15,869
you can do in post because you can

1263
00:50:13,170 --> 00:50:17,880
create<font color="#E5E5E5"> an index on the expression right</font>

1264
00:50:15,869 --> 00:50:20,069
<font color="#CCCCCC">and that will be used</font><font color="#E5E5E5"> if you're querying</font>

1265
00:50:17,880 --> 00:50:21,990
it<font color="#E5E5E5"> and then you can create</font><font color="#CCCCCC"> a view on top</font>

1266
00:50:20,069 --> 00:50:23,779
so<font color="#CCCCCC"> that you do read it through the view</font>

1267
00:50:21,990 --> 00:50:26,819
but there's there's no<font color="#E5E5E5"> way to</font>

1268
00:50:23,780 --> 00:50:34,650
materialize it into the<font color="#E5E5E5"> table unless</font><font color="#CCCCCC"> you</font>

1269
00:50:26,819 --> 00:50:36,119
want<font color="#E5E5E5"> to write the trigger thank you okay</font>

1270
00:50:34,650 --> 00:50:37,680
<font color="#CCCCCC">I think</font><font color="#E5E5E5"> it's time</font><font color="#CCCCCC"> to kick everybody out</font>

1271
00:50:36,119 --> 00:50:39,829
<font color="#E5E5E5">and change</font><font color="#CCCCCC"> your neck so thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font>

1272
00:50:37,680 --> 00:50:39,828
much

1273
00:50:42,319 --> 00:50:44,380
<font color="#E5E5E5">you</font>

