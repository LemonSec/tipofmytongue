1
00:00:04,640 --> 00:00:12,709
<font color="#E5E5E5">okay so hi everyone so thanks for</font>

2
00:00:08,960 --> 00:00:16,340
staying so late for<font color="#E5E5E5"> the talk yeah</font><font color="#CCCCCC"> my</font>

3
00:00:12,709 --> 00:00:19,070
name is<font color="#E5E5E5"> Alejandro and I work at</font><font color="#CCCCCC"> art as a</font>

4
00:00:16,340 --> 00:00:21,200
divorce engineer<font color="#E5E5E5"> one of the main things</font>

5
00:00:19,070 --> 00:00:23,320
<font color="#E5E5E5">we do is basically support the compiler</font>

6
00:00:21,200 --> 00:00:25,369
teams and to<font color="#E5E5E5"> change in general on</font>

7
00:00:23,320 --> 00:00:28,130
building

8
00:00:25,370 --> 00:00:31,460
<font color="#E5E5E5">ci testing and benchmark with actual</font>

9
00:00:28,130 --> 00:00:33,769
hardware<font color="#CCCCCC"> I'm also a contributor for LNT</font>

10
00:00:31,460 --> 00:00:39,530
which is a performance<font color="#CCCCCC"> tracking tool for</font>

11
00:00:33,770 --> 00:00:41,960
<font color="#E5E5E5">LLVM</font><font color="#CCCCCC"> and the idea</font><font color="#E5E5E5"> for today</font><font color="#CCCCCC"> is to give</font>

12
00:00:39,530 --> 00:00:44,150
<font color="#CCCCCC">you one more tool for your</font><font color="#E5E5E5"> toolbox when</font>

13
00:00:41,960 --> 00:00:48,380
<font color="#E5E5E5">investigating issues if the compiler</font><font color="#CCCCCC"> or</font>

14
00:00:44,150 --> 00:00:50,989
<font color="#CCCCCC">the tool chain in general so basically</font>

15
00:00:48,380 --> 00:00:52,850
when we<font color="#E5E5E5"> are investigating some issue or</font>

16
00:00:50,989 --> 00:00:54,980
the<font color="#E5E5E5"> two</font><font color="#CCCCCC"> chains</font><font color="#E5E5E5"> playing up to</font>

17
00:00:52,850 --> 00:00:59,149
<font color="#E5E5E5">indiscretion or something or any tools</font>

18
00:00:54,980 --> 00:01:00,919
crashing one key<font color="#CCCCCC"> information when it was</font>

19
00:00:59,149 --> 00:01:03,079
<font color="#CCCCCC">to getting it if you have the</font>

20
00:01:00,920 --> 00:01:05,210
repositories<font color="#E5E5E5"> or you were contributors</font>

21
00:01:03,079 --> 00:01:08,210
that<font color="#E5E5E5"> you are really interested in</font>

22
00:01:05,209 --> 00:01:12,199
<font color="#E5E5E5">finding which commit calls that</font><font color="#CCCCCC"> behave</font>

23
00:01:08,210 --> 00:01:14,179
<font color="#E5E5E5">changing behavior so that information is</font>

24
00:01:12,200 --> 00:01:16,370
even<font color="#CCCCCC"> if we are not an expert on</font><font color="#E5E5E5"> that</font>

25
00:01:14,180 --> 00:01:19,060
<font color="#CCCCCC">that part of</font><font color="#E5E5E5"> the tool you can understand</font>

26
00:01:16,370 --> 00:01:23,240
a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more about what's happening</font>

27
00:01:19,060 --> 00:01:25,010
<font color="#E5E5E5">then the process in which</font><font color="#CCCCCC"> you can you</font>

28
00:01:23,240 --> 00:01:28,789
can use like a methodology to<font color="#E5E5E5"> do that</font>

29
00:01:25,010 --> 00:01:32,030
and one of<font color="#E5E5E5"> the ways you can do is try</font><font color="#CCCCCC"> to</font>

30
00:01:28,790 --> 00:01:36,439
investigate like the previous versions

31
00:01:32,030 --> 00:01:38,600
<font color="#CCCCCC">and try to</font><font color="#E5E5E5"> find out this exact version</font>

32
00:01:36,439 --> 00:01:42,559
in which<font color="#E5E5E5"> the thing was working and then</font>

33
00:01:38,600 --> 00:01:46,009
<font color="#CCCCCC">stopped working one</font><font color="#E5E5E5"> problem with</font><font color="#CCCCCC"> that is</font>

34
00:01:42,560 --> 00:01:48,110
that in projects like<font color="#CCCCCC"> LLVM clang in</font>

35
00:01:46,010 --> 00:01:50,090
which we can have more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> one hundred</font>

36
00:01:48,110 --> 00:01:53,600
<font color="#E5E5E5">commits today is like very</font>

37
00:01:50,090 --> 00:01:55,820
<font color="#E5E5E5">time-consuming</font><font color="#CCCCCC"> and for that reason</font><font color="#E5E5E5"> many</font>

38
00:01:53,600 --> 00:01:57,860
<font color="#E5E5E5">tools as it's a</font><font color="#CCCCCC"> very routine and</font>

39
00:01:55,820 --> 00:02:03,408
repetitive process<font color="#CCCCCC"> there are many tools</font>

40
00:01:57,860 --> 00:02:06,680
that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> help us to achieve</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> a bit</font>

41
00:02:03,409 --> 00:02:09,470
of theory<font color="#CCCCCC"> done so the code by section is</font>

42
00:02:06,680 --> 00:02:11,450
this<font color="#E5E5E5"> process of looking backwards</font><font color="#CCCCCC"> in</font>

43
00:02:09,470 --> 00:02:14,090
your<font color="#CCCCCC"> own a given repository trying to</font>

44
00:02:11,450 --> 00:02:16,250
find a change in behavior<font color="#E5E5E5"> a</font><font color="#CCCCCC"> specific</font>

45
00:02:14,090 --> 00:02:18,140
change<font color="#E5E5E5"> in behavior can be crush this can</font>

46
00:02:16,250 --> 00:02:20,240
be performance regressions

47
00:02:18,140 --> 00:02:22,880
yeah and you might as<font color="#E5E5E5"> well be looking</font>

48
00:02:20,240 --> 00:02:25,280
<font color="#E5E5E5">for</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> something was fixed so</font><font color="#CCCCCC"> it was</font>

49
00:02:22,880 --> 00:02:28,250
not working<font color="#E5E5E5"> and now</font><font color="#CCCCCC"> it's working and I</font>

50
00:02:25,280 --> 00:02:31,280
I'm interested to know<font color="#E5E5E5"> who fixed it or</font>

51
00:02:28,250 --> 00:02:38,209
if the fix was<font color="#E5E5E5"> a</font><font color="#CCCCCC"> side-effect of</font><font color="#E5E5E5"> another</font>

52
00:02:31,280 --> 00:02:41,180
<font color="#CCCCCC">change then</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to run bisect</font><font color="#E5E5E5"> of</font>

53
00:02:38,209 --> 00:02:44,030
any bisecting process<font color="#E5E5E5"> you need basically</font>

54
00:02:41,180 --> 00:02:45,890
<font color="#E5E5E5">two things the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> one is to</font><font color="#CCCCCC"> have a</font>

55
00:02:44,030 --> 00:02:51,380
repository<font color="#E5E5E5"> in which you have a</font>

56
00:02:45,890 --> 00:02:54,589
relationship of of the<font color="#E5E5E5"> relationship with</font>

57
00:02:51,380 --> 00:02:57,410
changes so there was this original

58
00:02:54,590 --> 00:02:59,720
change<font color="#E5E5E5"> then it is this subsequent change</font>

59
00:02:57,410 --> 00:03:03,950
and then this one and<font color="#CCCCCC"> this one on like</font><font color="#E5E5E5"> a</font>

60
00:02:59,720 --> 00:03:07,550
<font color="#CCCCCC">timeline</font><font color="#E5E5E5"> fashion and also we need some</font>

61
00:03:03,950 --> 00:03:10,880
test case<font color="#E5E5E5"> or some way to label these</font>

62
00:03:07,550 --> 00:03:14,360
given versions this<font color="#E5E5E5"> is a bad version or</font>

63
00:03:10,880 --> 00:03:17,150
this is a good<font color="#E5E5E5"> version so as you have</font>

64
00:03:14,360 --> 00:03:19,670
changes happening over time<font color="#E5E5E5"> you</font>

65
00:03:17,150 --> 00:03:22,790
<font color="#E5E5E5">basically are interested</font><font color="#CCCCCC"> to see so on</font>

66
00:03:19,670 --> 00:03:25,700
the latest one so basically something

67
00:03:22,790 --> 00:03:27,980
<font color="#CCCCCC">that's not</font><font color="#E5E5E5"> working</font><font color="#CCCCCC"> then you go backwards</font>

68
00:03:25,700 --> 00:03:31,310
<font color="#E5E5E5">and you go</font><font color="#CCCCCC"> backwards and that until you</font>

69
00:03:27,980 --> 00:03:33,470
find<font color="#E5E5E5"> somebody or some version that in</font>

70
00:03:31,310 --> 00:03:35,360
which the thing was working<font color="#E5E5E5"> then you can</font>

71
00:03:33,470 --> 00:03:37,640
restrict<font color="#E5E5E5"> your search space to that</font>

72
00:03:35,360 --> 00:03:40,549
region<font color="#CCCCCC"> and then you rerun the process</font>

73
00:03:37,640 --> 00:03:42,589
until you will find the very specific

74
00:03:40,549 --> 00:03:45,220
version in<font color="#CCCCCC"> which you have that thing</font>

75
00:03:42,590 --> 00:03:45,220
working

76
00:03:45,880 --> 00:03:51,799
usually when talking about source code

77
00:03:48,739 --> 00:03:54,380
we<font color="#CCCCCC"> are looking for a specific commit and</font>

78
00:03:51,799 --> 00:03:57,019
commit is<font color="#E5E5E5"> tightly connected to source</font>

79
00:03:54,380 --> 00:04:00,470
<font color="#E5E5E5">control so it's natural that source</font>

80
00:03:57,019 --> 00:04:04,610
control<font color="#E5E5E5"> offers some sort of bisecting</font>

81
00:04:00,470 --> 00:04:09,290
then get as<font color="#E5E5E5"> near material and others</font>

82
00:04:04,610 --> 00:04:10,790
<font color="#E5E5E5">they offer bisecting option it's good</font>

83
00:04:09,290 --> 00:04:12,170
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you have all the information</font>

84
00:04:10,790 --> 00:04:15,530
<font color="#CCCCCC">that you were looking for on that</font>

85
00:04:12,170 --> 00:04:19,760
repository<font color="#E5E5E5"> so you can run by section</font><font color="#CCCCCC"> and</font>

86
00:04:15,530 --> 00:04:24,110
look for very<font color="#CCCCCC"> specific changes you can</font>

87
00:04:19,760 --> 00:04:27,710
also so the source control<font color="#E5E5E5"> it doesn't</font>

88
00:04:24,110 --> 00:04:29,180
<font color="#E5E5E5">know what which what is</font><font color="#CCCCCC"> the expected</font>

89
00:04:27,710 --> 00:04:31,969
<font color="#E5E5E5">behavior for</font><font color="#CCCCCC"> that code is</font><font color="#E5E5E5"> just a</font>

90
00:04:29,180 --> 00:04:33,979
repository but

91
00:04:31,969 --> 00:04:37,219
this gives you full flexibility to build

92
00:04:33,979 --> 00:04:40,878
<font color="#E5E5E5">that code if needed in a very customized</font>

93
00:04:37,219 --> 00:04:43,729
way for to fit your<font color="#E5E5E5"> needs on the flip</font>

94
00:04:40,879 --> 00:04:46,489
side<font color="#CCCCCC"> you need to build</font><font color="#E5E5E5"> it and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font>

95
00:04:43,729 --> 00:04:49,039
<font color="#E5E5E5">to tell it so this is</font><font color="#CCCCCC"> the specific way</font><font color="#E5E5E5"> I</font>

96
00:04:46,489 --> 00:04:50,959
<font color="#E5E5E5">want to build and this can makes it can</font>

97
00:04:49,039 --> 00:04:52,489
make things<font color="#CCCCCC"> a little bit difficult when</font>

98
00:04:50,959 --> 00:04:54,529
you want to<font color="#E5E5E5"> share this information with</font>

99
00:04:52,489 --> 00:04:57,078
other people<font color="#CCCCCC"> because you have all your</font>

100
00:04:54,529 --> 00:04:59,949
local<font color="#CCCCCC"> environment and the influences</font><font color="#E5E5E5"> of</font>

101
00:04:57,079 --> 00:05:04,459
your local environment when doing this

102
00:04:59,949 --> 00:05:09,379
also not all<font color="#CCCCCC"> versions are able to</font><font color="#E5E5E5"> build</font>

103
00:05:04,459 --> 00:05:11,659
so if you look for<font color="#E5E5E5"> some let's say</font><font color="#CCCCCC"> out of</font>

104
00:05:09,379 --> 00:05:13,519
100 changes on the<font color="#E5E5E5"> compiler</font><font color="#CCCCCC"> you'll have</font>

105
00:05:11,659 --> 00:05:14,719
some<font color="#E5E5E5"> of these versions</font><font color="#CCCCCC"> that are not</font>

106
00:05:13,519 --> 00:05:21,949
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> to build</font><font color="#CCCCCC"> because they are</font>

107
00:05:14,719 --> 00:05:24,379
<font color="#E5E5E5">broken versions</font><font color="#CCCCCC"> then as</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> said you</font><font color="#E5E5E5"> you</font>

108
00:05:21,949 --> 00:05:26,419
need to<font color="#E5E5E5"> set up the whole thing you need</font>

109
00:05:24,379 --> 00:05:28,399
to<font color="#CCCCCC"> build</font><font color="#E5E5E5"> it you need</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> your things</font>

110
00:05:26,419 --> 00:05:30,589
if you want to have a clean build each

111
00:05:28,399 --> 00:05:35,419
time you need<font color="#CCCCCC"> to set</font><font color="#E5E5E5"> it up and clean up</font>

112
00:05:30,589 --> 00:05:37,429
<font color="#CCCCCC">things</font><font color="#E5E5E5"> as you need any big projects it</font>

113
00:05:35,419 --> 00:05:39,919
can be very time consuming<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you have</font>

114
00:05:37,429 --> 00:05:41,808
a big codebase that takes a<font color="#E5E5E5"> little bit</font>

115
00:05:39,919 --> 00:05:44,329
long but more<font color="#CCCCCC"> than a</font><font color="#E5E5E5"> few minutes to</font>

116
00:05:41,809 --> 00:05:48,519
<font color="#E5E5E5">build and a lot</font><font color="#CCCCCC"> of changes so your</font>

117
00:05:44,329 --> 00:05:52,519
search space is actually<font color="#E5E5E5"> very big then</font>

118
00:05:48,519 --> 00:05:54,639
there are as we<font color="#CCCCCC"> have a big code base</font><font color="#E5E5E5"> and</font>

119
00:05:52,519 --> 00:05:56,809
lots of commits<font color="#E5E5E5"> there is the need or</font>

120
00:05:54,639 --> 00:05:58,849
there was a need to to<font color="#E5E5E5"> have a</font>

121
00:05:56,809 --> 00:06:01,699
specialized tool in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to run by</font>

122
00:05:58,849 --> 00:06:05,569
section on<font color="#CCCCCC"> any alidium</font><font color="#E5E5E5"> and this was</font>

123
00:06:01,699 --> 00:06:10,009
<font color="#E5E5E5">created three years</font><font color="#CCCCCC"> ago and this tool is</font>

124
00:06:05,569 --> 00:06:12,969
<font color="#E5E5E5">our</font><font color="#CCCCCC"> VM lab bisect so we using this tool</font>

125
00:06:10,009 --> 00:06:19,789
<font color="#CCCCCC">you have a specific environments to</font>

126
00:06:12,969 --> 00:06:25,610
triage or bisect<font color="#E5E5E5"> bugs or regressions in</font>

127
00:06:19,789 --> 00:06:28,579
general on LLVM and clang<font color="#CCCCCC"> code base so</font>

128
00:06:25,610 --> 00:06:31,519
as I said so<font color="#E5E5E5"> this tool was contributed</font>

129
00:06:28,579 --> 00:06:35,419
by<font color="#E5E5E5"> Chris Matthews and Daniel three years</font>

130
00:06:31,519 --> 00:06:38,779
ago<font color="#E5E5E5"> they are both at Apple this</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> is</font>

131
00:06:35,419 --> 00:06:42,049
written in<font color="#E5E5E5"> Python and is a specialized</font>

132
00:06:38,779 --> 00:06:43,420
tool to bisect<font color="#CCCCCC"> clunk</font><font color="#E5E5E5"> and LBM there is</font>

133
00:06:42,050 --> 00:06:46,150
documentation

134
00:06:43,420 --> 00:06:49,750
on github you<font color="#E5E5E5"> can find documentation is</font>

135
00:06:46,150 --> 00:06:52,539
very<font color="#CCCCCC"> comprehensive in order</font><font color="#E5E5E5"> to install</font>

136
00:06:49,750 --> 00:06:55,480
it is a is a<font color="#E5E5E5"> Python package</font><font color="#CCCCCC"> I recommend</font>

137
00:06:52,540 --> 00:06:58,240
you use<font color="#E5E5E5"> a virtual environment</font><font color="#CCCCCC"> then it's</font>

138
00:06:55,480 --> 00:07:01,420
<font color="#E5E5E5">basically those steps in in blue so you</font>

139
00:06:58,240 --> 00:07:04,540
clone you you<font color="#CCCCCC"> you install and you have</font>

140
00:07:01,420 --> 00:07:07,690
it so I didn't say it before but I'm

141
00:07:04,540 --> 00:07:10,140
running<font color="#E5E5E5"> a few demos during the talk and</font>

142
00:07:07,690 --> 00:07:15,219
my demos are running on a Raspberry Pi

143
00:07:10,140 --> 00:07:18,640
<font color="#E5E5E5">so we can actually run this to</font><font color="#CCCCCC"> distil is</font>

144
00:07:15,220 --> 00:07:22,150
completely supported<font color="#CCCCCC"> by any</font><font color="#E5E5E5"> Python 2 or</font>

145
00:07:18,640 --> 00:07:30,219
3 environment that<font color="#E5E5E5"> you and they have so</font>

146
00:07:22,150 --> 00:07:32,140
let me find the first thing so I already

147
00:07:30,220 --> 00:07:34,540
<font color="#CCCCCC">install</font><font color="#E5E5E5"> this on a virtual</font><font color="#CCCCCC"> environment</font>

148
00:07:32,140 --> 00:07:37,240
and<font color="#CCCCCC"> they</font><font color="#E5E5E5"> follow in that steps so I have</font>

149
00:07:34,540 --> 00:07:40,630
one with one of my means and directory B

150
00:07:37,240 --> 00:07:46,300
so I<font color="#E5E5E5"> will source that thing</font><font color="#CCCCCC"> me activate</font>

151
00:07:40,630 --> 00:07:49,990
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> I have a</font><font color="#CCCCCC"> VM lab and then I have</font>

152
00:07:46,300 --> 00:07:52,840
the<font color="#CCCCCC"> whole two already</font><font color="#E5E5E5"> running so</font><font color="#CCCCCC"> as I</font>

153
00:07:49,990 --> 00:07:56,620
said this<font color="#CCCCCC"> is my</font><font color="#E5E5E5"> raspberry PI's and</font><font color="#CCCCCC"> arm</font>

154
00:07:52,840 --> 00:08:02,679
<font color="#E5E5E5">d7 running Linux and that's a simple</font>

155
00:07:56,620 --> 00:08:07,540
<font color="#CCCCCC">that so yeah</font><font color="#E5E5E5"> so installation basic use</font>

156
00:08:02,680 --> 00:08:09,910
it for<font color="#CCCCCC"> LLVM lab you will need basically</font>

157
00:08:07,540 --> 00:08:11,650
one<font color="#CCCCCC"> thing you need one test case to</font>

158
00:08:09,910 --> 00:08:15,640
reproduce the<font color="#E5E5E5"> flight the failure you are</font>

159
00:08:11,650 --> 00:08:18,340
<font color="#E5E5E5">investigating so when you call this you</font>

160
00:08:15,640 --> 00:08:20,560
call<font color="#CCCCCC"> LVM bisect</font><font color="#E5E5E5"> and then you provide the</font>

161
00:08:18,340 --> 00:08:24,609
<font color="#E5E5E5">test case I will show you how to do</font><font color="#CCCCCC"> that</font>

162
00:08:20,560 --> 00:08:26,380
but when you run any test case so no

163
00:08:24,610 --> 00:08:28,390
matter what test case you were running

164
00:08:26,380 --> 00:08:31,210
or options that<font color="#E5E5E5"> you provide you</font>

165
00:08:28,390 --> 00:08:34,210
<font color="#E5E5E5">basically do four things one it will</font>

166
00:08:31,210 --> 00:08:36,250
download download builds from<font color="#CCCCCC"> build cash</font>

167
00:08:34,210 --> 00:08:40,120
<font color="#E5E5E5">I'll tell you more about that in a</font>

168
00:08:36,250 --> 00:08:43,780
moment<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will run it will create a</font>

169
00:08:40,120 --> 00:08:46,900
sandbox<font color="#E5E5E5"> with that version it will run</font>

170
00:08:43,780 --> 00:08:49,660
<font color="#CCCCCC">the test case and then it will navigate</font>

171
00:08:46,900 --> 00:08:51,670
through the repository<font color="#E5E5E5"> doing that</font>

172
00:08:49,660 --> 00:08:54,219
<font color="#E5E5E5">process that I showed before with the</font>

173
00:08:51,670 --> 00:08:57,420
timeline labeling versions and<font color="#CCCCCC"> finally</font>

174
00:08:54,220 --> 00:08:57,420
<font color="#CCCCCC">the specific committee we want</font>

175
00:08:57,460 --> 00:09:02,950
a few concepts that are<font color="#CCCCCC"> involved</font><font color="#E5E5E5"> the</font>

176
00:08:59,920 --> 00:09:06,400
first one and one of the<font color="#E5E5E5"> most important</font>

177
00:09:02,950 --> 00:09:08,290
for the sake of<font color="#E5E5E5"> lrvm lab</font><font color="#CCCCCC"> bisect</font><font color="#E5E5E5"> and is</font>

178
00:09:06,400 --> 00:09:12,250
the main argument for<font color="#CCCCCC"> using that</font><font color="#E5E5E5"> is</font>

179
00:09:08,290 --> 00:09:16,480
<font color="#E5E5E5">saving time by using it so the build</font>

180
00:09:12,250 --> 00:09:18,520
<font color="#CCCCCC">cache is a cache full of pre-built</font>

181
00:09:16,480 --> 00:09:22,660
<font color="#E5E5E5">packages with the two chains of</font>

182
00:09:18,520 --> 00:09:26,110
basically CI system<font color="#E5E5E5"> so continuous</font>

183
00:09:22,660 --> 00:09:29,370
integration systems are<font color="#CCCCCC"> Jiang Jenkins or</font>

184
00:09:26,110 --> 00:09:32,020
<font color="#E5E5E5">in</font><font color="#CCCCCC"> billboard generate these packages</font>

185
00:09:29,370 --> 00:09:34,810
<font color="#CCCCCC">there are many types of packages that</font>

186
00:09:32,020 --> 00:09:39,100
that you can use out of the box like x86

187
00:09:34,810 --> 00:09:41,260
packages<font color="#CCCCCC"> under seven and a</font><font color="#E5E5E5"> arc 64</font><font color="#CCCCCC"> they</font>

188
00:09:39,100 --> 00:09:44,760
are<font color="#E5E5E5"> stored on Google Cloud storage</font>

189
00:09:41,260 --> 00:09:48,069
so they are you can download them and

190
00:09:44,760 --> 00:09:52,060
then this is something<font color="#CCCCCC"> that we did</font>

191
00:09:48,070 --> 00:09:55,240
<font color="#E5E5E5">recently we added support</font><font color="#CCCCCC"> for mv7 AR</font><font color="#E5E5E5"> 64</font>

192
00:09:52,060 --> 00:09:59,650
like three months ago<font color="#E5E5E5"> and then these</font>

193
00:09:55,240 --> 00:10:04,060
packages are being populated<font color="#CCCCCC"> very</font><font color="#E5E5E5"> often</font>

194
00:09:59,650 --> 00:10:06,340
<font color="#E5E5E5">so how we do that so for every commit</font>

195
00:10:04,060 --> 00:10:10,780
that you do that goes to the main

196
00:10:06,340 --> 00:10:14,350
<font color="#E5E5E5">repository</font><font color="#CCCCCC"> we will have a build server</font>

197
00:10:10,780 --> 00:10:16,990
<font color="#CCCCCC">so</font><font color="#E5E5E5"> the upstream built bot will keep</font>

198
00:10:14,350 --> 00:10:20,470
pulling the SVN repository<font color="#CCCCCC"> two minutes</font>

199
00:10:16,990 --> 00:10:25,060
and then if it sees some changes on

200
00:10:20,470 --> 00:10:28,240
either<font color="#CCCCCC"> Klunk lrvm libraries and a few</font>

201
00:10:25,060 --> 00:10:33,300
repositories will trigger builds on

202
00:10:28,240 --> 00:10:35,860
native arm builders so there are other

203
00:10:33,300 --> 00:10:37,810
x86 builders<font color="#CCCCCC"> that are not maintained by</font>

204
00:10:35,860 --> 00:10:40,810
us<font color="#CCCCCC"> these are the ones</font><font color="#E5E5E5"> that we as</font>

205
00:10:37,810 --> 00:10:45,609
infrastructure<font color="#E5E5E5"> team at are maintained so</font>

206
00:10:40,810 --> 00:10:48,339
there is one native<font color="#E5E5E5"> AR 32 + 1 AR 64 Bill</font>

207
00:10:45,610 --> 00:10:50,740
Mueller<font color="#E5E5E5"> that we upload</font><font color="#CCCCCC"> the binaries</font><font color="#E5E5E5"> and</font>

208
00:10:48,340 --> 00:10:54,550
packages for Google Cloud<font color="#E5E5E5"> storage that</font>

209
00:10:50,740 --> 00:10:57,760
<font color="#E5E5E5">will be available</font><font color="#CCCCCC"> so as I said this</font>

210
00:10:54,550 --> 00:11:00,250
<font color="#E5E5E5">works very often so each two minutes it</font>

211
00:10:57,760 --> 00:11:02,319
pause the repository<font color="#E5E5E5"> and it's important</font>

212
00:11:00,250 --> 00:11:05,790
<font color="#E5E5E5">for us</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> these packages being</font>

213
00:11:02,320 --> 00:11:09,220
created<font color="#E5E5E5"> quite quickly so</font><font color="#CCCCCC"> we got</font><font color="#E5E5E5"> two very</font>

214
00:11:05,790 --> 00:11:11,589
beefy<font color="#CCCCCC"> a</font><font color="#E5E5E5"> arch machines</font>

215
00:11:09,220 --> 00:11:13,660
our machines<font color="#E5E5E5"> and then we can complete</font>

216
00:11:11,589 --> 00:11:15,939
this process<font color="#E5E5E5"> and have from a given</font>

217
00:11:13,660 --> 00:11:19,899
commit to the build cash you have<font color="#CCCCCC"> them</font>

218
00:11:15,939 --> 00:11:23,769
in 16<font color="#E5E5E5"> minutes more or</font><font color="#CCCCCC"> less this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

219
00:11:19,899 --> 00:11:26,589
<font color="#CCCCCC">odd job</font><font color="#E5E5E5"> that is live and an upstream so</font>

220
00:11:23,769 --> 00:11:29,949
you have the also<font color="#E5E5E5"> the configurations for</font>

221
00:11:26,589 --> 00:11:32,860
<font color="#E5E5E5">what this job does on</font><font color="#CCCCCC"> Zork which is a</font>

222
00:11:29,949 --> 00:11:36,160
repository for infrastructure<font color="#E5E5E5"> cold and</font>

223
00:11:32,860 --> 00:11:39,970
builds an automation<font color="#CCCCCC"> inside within</font><font color="#E5E5E5"> a</font>

224
00:11:36,160 --> 00:11:41,800
<font color="#CCCCCC">neural LLVM</font><font color="#E5E5E5"> then you have others all</font>

225
00:11:39,970 --> 00:11:44,620
these builds<font color="#CCCCCC"> you'll see many of</font><font color="#E5E5E5"> these</font>

226
00:11:41,800 --> 00:11:48,870
builds every day to have as many

227
00:11:44,620 --> 00:11:52,000
versions as possible<font color="#E5E5E5"> to narrow down the</font>

228
00:11:48,870 --> 00:11:54,459
well the resolution<font color="#CCCCCC"> of the results of</font>

229
00:11:52,000 --> 00:11:59,279
the bisection process<font color="#E5E5E5"> so you have very</font>

230
00:11:54,459 --> 00:12:02,290
<font color="#E5E5E5">specific</font><font color="#CCCCCC"> emitted as much as possible so</font>

231
00:11:59,279 --> 00:12:05,709
when running buys bisection processes

232
00:12:02,290 --> 00:12:08,889
using<font color="#CCCCCC"> our vm lab you need</font><font color="#E5E5E5"> to pick a</font>

233
00:12:05,709 --> 00:12:12,819
repository in which the tool we use to

234
00:12:08,889 --> 00:12:16,120
<font color="#CCCCCC">download builds so there are many we are</font>

235
00:12:12,819 --> 00:12:19,809
if you don't say any repository<font color="#CCCCCC"> it feels</font>

236
00:12:16,120 --> 00:12:24,189
a 1x<font color="#CCCCCC"> IDs x86 repository and download</font>

237
00:12:19,809 --> 00:12:27,189
things to run locally<font color="#CCCCCC"> there are two of</font>

238
00:12:24,189 --> 00:12:30,849
them<font color="#E5E5E5"> that we are interested in this talk</font>

239
00:12:27,189 --> 00:12:34,029
which are these<font color="#CCCCCC"> two one so clung</font><font color="#E5E5E5"> a art</font>

240
00:12:30,850 --> 00:12:38,350
64 and<font color="#CCCCCC"> arm d7 which</font><font color="#E5E5E5"> are the ones</font><font color="#CCCCCC"> that we</font>

241
00:12:34,029 --> 00:12:42,879
<font color="#CCCCCC">are</font><font color="#E5E5E5"> publishing things in order to pick a</font>

242
00:12:38,350 --> 00:12:46,779
specific repository<font color="#CCCCCC"> we want to tell an</font>

243
00:12:42,879 --> 00:12:51,129
option -<font color="#E5E5E5"> B and point to the specific</font>

244
00:12:46,779 --> 00:12:59,740
repository<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> ones</font><font color="#CCCCCC"> I'll show you</font>

245
00:12:51,129 --> 00:13:02,290
that probably<font color="#E5E5E5"> yes yes so we only have</font>

246
00:12:59,740 --> 00:13:04,000
rights to publish things<font color="#E5E5E5"> that's why we</font>

247
00:13:02,290 --> 00:13:08,639
didn't remove<font color="#E5E5E5"> anything you know we</font>

248
00:13:04,000 --> 00:13:11,250
didn't criticize anything<font color="#CCCCCC"> but we we say</font>

249
00:13:08,639 --> 00:13:16,360
<font color="#CCCCCC">LLVM</font>

250
00:13:11,250 --> 00:13:18,269
<font color="#CCCCCC">eeehm lab LS so it's pretty fast and</font><font color="#E5E5E5"> you</font>

251
00:13:16,360 --> 00:13:20,860
can you<font color="#CCCCCC"> can have the</font><font color="#E5E5E5"> production ones</font>

252
00:13:18,269 --> 00:13:22,510
<font color="#E5E5E5">there are no restrictions if you install</font>

253
00:13:20,860 --> 00:13:25,029
the<font color="#CCCCCC"> command-line</font><font color="#E5E5E5"> tools you have access</font>

254
00:13:22,510 --> 00:13:28,089
<font color="#CCCCCC">to the whole thing so there's</font><font color="#E5E5E5"> no there</font>

255
00:13:25,029 --> 00:13:32,320
<font color="#E5E5E5">is</font><font color="#CCCCCC"> nothing difficult</font><font color="#E5E5E5"> or that you need to</font>

256
00:13:28,089 --> 00:13:34,660
ask<font color="#E5E5E5"> permission for then there is a other</font>

257
00:13:32,320 --> 00:13:37,690
important thing<font color="#CCCCCC"> is the sandbox</font><font color="#E5E5E5"> so the</font>

258
00:13:34,660 --> 00:13:40,149
sandbox is the<font color="#CCCCCC"> temporary location in</font>

259
00:13:37,690 --> 00:13:45,510
which for every<font color="#E5E5E5"> time you download a</font>

260
00:13:40,149 --> 00:13:49,360
given version<font color="#E5E5E5"> you have this directory</font>

261
00:13:45,510 --> 00:13:52,450
<font color="#CCCCCC">with the whole tool chain so</font><font color="#E5E5E5"> you'll be</font>

262
00:13:49,360 --> 00:13:54,490
able to just with the time that<font color="#E5E5E5"> you need</font>

263
00:13:52,450 --> 00:13:56,980
<font color="#E5E5E5">to download and extract this package</font>

264
00:13:54,490 --> 00:14:01,540
<font color="#E5E5E5">that that's the time you need setting up</font>

265
00:13:56,980 --> 00:14:01,990
<font color="#E5E5E5">your test environment this is important</font>

266
00:14:01,540 --> 00:14:04,930
to say

267
00:14:01,990 --> 00:14:09,100
by default send<font color="#CCCCCC"> boxes are deleted</font><font color="#E5E5E5"> after</font>

268
00:14:04,930 --> 00:14:14,439
the<font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the process but you</font><font color="#CCCCCC"> can save</font>

269
00:14:09,100 --> 00:14:16,390
them by<font color="#CCCCCC"> providing</font><font color="#E5E5E5"> - s and then providing</font>

270
00:14:14,440 --> 00:14:19,500
a directory<font color="#E5E5E5"> by default they go to his</font>

271
00:14:16,390 --> 00:14:23,319
life stamp and they get deleted which

272
00:14:19,500 --> 00:14:27,610
sometimes if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are like trying</font><font color="#E5E5E5"> out</font>

273
00:14:23,320 --> 00:14:29,620
<font color="#E5E5E5">your bug</font><font color="#CCCCCC"> producer</font><font color="#E5E5E5"> it can be like a waste</font>

274
00:14:27,610 --> 00:14:33,300
of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it if</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> takes like 10 minutes</font>

275
00:14:29,620 --> 00:14:37,949
<font color="#E5E5E5">to run the whole</font><font color="#CCCCCC"> thing you</font><font color="#E5E5E5"> can save time</font>

276
00:14:33,300 --> 00:14:40,810
<font color="#CCCCCC">by providing</font><font color="#E5E5E5"> a custom sandbox directory</font>

277
00:14:37,949 --> 00:14:44,859
the other important bit<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> go</font>

278
00:14:40,810 --> 00:14:47,170
quickly<font color="#E5E5E5"> is the predicates</font><font color="#CCCCCC"> so these are</font>

279
00:14:44,860 --> 00:14:50,589
basically the command lines that you run

280
00:14:47,170 --> 00:14:53,939
<font color="#E5E5E5">to reproduce your the behavior you are</font>

281
00:14:50,589 --> 00:14:57,610
looking for so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can buy the simplest</font>

282
00:14:53,940 --> 00:15:02,070
usage you have<font color="#CCCCCC"> LLVM</font><font color="#E5E5E5"> lab bisect and then</font>

283
00:14:57,610 --> 00:15:06,970
you say this line fails find me where

284
00:15:02,070 --> 00:15:09,699
this was<font color="#E5E5E5"> working before if any right so</font>

285
00:15:06,970 --> 00:15:12,190
you can have a very<font color="#CCCCCC"> simple command</font><font color="#E5E5E5"> line</font>

286
00:15:09,699 --> 00:15:13,870
<font color="#CCCCCC">that will trigger</font><font color="#E5E5E5"> different versions and</font>

287
00:15:12,190 --> 00:15:18,790
navigate<font color="#CCCCCC"> through this repository and</font>

288
00:15:13,870 --> 00:15:22,110
then it will give you the revisions<font color="#CCCCCC"> that</font>

289
00:15:18,790 --> 00:15:25,120
you are<font color="#E5E5E5"> looking for so as you can</font><font color="#CCCCCC"> see</font>

290
00:15:22,110 --> 00:15:27,880
there is<font color="#E5E5E5"> something that's</font>

291
00:15:25,120 --> 00:15:32,890
quite<font color="#E5E5E5"> different here which is this bit</font>

292
00:15:27,880 --> 00:15:37,420
the<font color="#E5E5E5"> percent string</font><font color="#CCCCCC"> and this is basically</font>

293
00:15:32,890 --> 00:15:39,640
it will<font color="#E5E5E5"> be substituted by or replaced</font>

294
00:15:37,420 --> 00:15:42,670
<font color="#CCCCCC">button by any version that you are</font>

295
00:15:39,640 --> 00:15:46,030
trying out<font color="#E5E5E5"> so it will get that specific</font>

296
00:15:42,670 --> 00:15:48,670
<font color="#E5E5E5">version path then it will run</font><font color="#CCCCCC"> the clunk</font>

297
00:15:46,030 --> 00:15:51,069
from from<font color="#CCCCCC"> that</font><font color="#E5E5E5"> sandbox so it will get</font>

298
00:15:48,670 --> 00:15:56,110
<font color="#E5E5E5">replaced by the tool so you can test</font>

299
00:15:51,070 --> 00:15:58,750
many versions<font color="#E5E5E5"> and also there is not only</font>

300
00:15:56,110 --> 00:16:01,060
<font color="#E5E5E5">the</font><font color="#CCCCCC"> variable path so there are many</font>

301
00:15:58,750 --> 00:16:04,750
other<font color="#E5E5E5"> variables</font><font color="#CCCCCC"> that you can use to</font><font color="#E5E5E5"> in</font>

302
00:16:01,060 --> 00:16:08,530
to implement your<font color="#E5E5E5"> test cases</font><font color="#CCCCCC"> you can</font>

303
00:16:04,750 --> 00:16:13,240
also use all your previous<font color="#E5E5E5"> knowledge on</font>

304
00:16:08,530 --> 00:16:15,370
<font color="#E5E5E5">shell and pipes and the output into</font>

305
00:16:13,240 --> 00:16:18,160
files<font color="#CCCCCC"> grepping</font><font color="#E5E5E5"> and all your previous</font>

306
00:16:15,370 --> 00:16:20,140
<font color="#CCCCCC">knowledge can be</font><font color="#E5E5E5"> used to to help you and</font>

307
00:16:18,160 --> 00:16:24,850
this is very<font color="#CCCCCC"> useful when you when you</font>

308
00:16:20,140 --> 00:16:27,850
<font color="#CCCCCC">are trying to troubleshoot something</font><font color="#E5E5E5"> so</font>

309
00:16:24,850 --> 00:16:30,340
<font color="#CCCCCC">that you can use it in</font><font color="#E5E5E5"> two ways one</font><font color="#CCCCCC"> is</font>

310
00:16:27,850 --> 00:16:32,950
via the command line<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you use the</font>

311
00:16:30,340 --> 00:16:36,790
Python printf syntax which has that one

312
00:16:32,950 --> 00:16:39,490
<font color="#E5E5E5">you can also have it run as a shell</font>

313
00:16:36,790 --> 00:16:42,550
script<font color="#E5E5E5"> and in that way when calling the</font>

314
00:16:39,490 --> 00:16:45,280
shell<font color="#E5E5E5"> script I will show it you will get</font>

315
00:16:42,550 --> 00:16:51,010
<font color="#E5E5E5">these variables injected so these for</font>

316
00:16:45,280 --> 00:16:53,850
the whole<font color="#E5E5E5"> list that I showed</font><font color="#CCCCCC"> before so</font>

317
00:16:51,010 --> 00:16:58,180
this is how you call<font color="#E5E5E5"> it on command lines</font>

318
00:16:53,850 --> 00:17:01,060
<font color="#E5E5E5">just in line</font><font color="#CCCCCC"> or you can say run this</font>

319
00:16:58,180 --> 00:17:04,859
shell script and the shell script<font color="#E5E5E5"> will</font>

320
00:17:01,060 --> 00:17:11,440
have the variables in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> date format</font>

321
00:17:04,859 --> 00:17:13,389
<font color="#CCCCCC">you can also</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> variables are when</font>

322
00:17:11,440 --> 00:17:15,700
you are running the<font color="#E5E5E5"> test you get those</font>

323
00:17:13,390 --> 00:17:18,430
variables<font color="#E5E5E5"> after you finish the test you</font>

324
00:17:15,700 --> 00:17:20,440
can<font color="#E5E5E5"> also use test filters so you can see</font>

325
00:17:18,430 --> 00:17:23,110
for that specific test case whether<font color="#E5E5E5"> the</font>

326
00:17:20,440 --> 00:17:26,260
<font color="#E5E5E5">test passed or failed</font><font color="#CCCCCC"> you will get a</font>

327
00:17:23,109 --> 00:17:29,520
result<font color="#E5E5E5"> on a variable called result and</font>

328
00:17:26,260 --> 00:17:34,930
you can also have the time measurements

329
00:17:29,520 --> 00:17:37,200
<font color="#CCCCCC">as in user time system time and wall</font>

330
00:17:34,930 --> 00:17:37,200
time

331
00:17:37,260 --> 00:17:44,050
so this is the way you can use<font color="#E5E5E5"> it so</font><font color="#CCCCCC"> you</font>

332
00:17:40,750 --> 00:17:47,050
can say<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> given</font><font color="#CCCCCC"> test case if it</font>

333
00:17:44,050 --> 00:17:50,530
passed<font color="#E5E5E5"> and user time was less than</font><font color="#CCCCCC"> half</font>

334
00:17:47,050 --> 00:17:52,750
a second then you can you can<font color="#E5E5E5"> you use</font>

335
00:17:50,530 --> 00:17:55,300
<font color="#CCCCCC">that expression to</font><font color="#E5E5E5"> evaluate whether</font>

336
00:17:52,750 --> 00:17:56,920
<font color="#E5E5E5">these test case was passing or not this</font>

337
00:17:55,300 --> 00:17:59,080
is useful<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you were running</font>

338
00:17:56,920 --> 00:18:01,120
benchmarks<font color="#E5E5E5"> so you are if you are trying</font>

339
00:17:59,080 --> 00:18:06,600
<font color="#CCCCCC">to see why a given benchmark progressed</font>

340
00:18:01,120 --> 00:18:09,489
or something<font color="#CCCCCC"> you can compile that</font>

341
00:18:06,600 --> 00:18:11,740
<font color="#CCCCCC">benchmark with the version</font><font color="#E5E5E5"> of the the</font>

342
00:18:09,490 --> 00:18:15,190
<font color="#E5E5E5">tool chain and then run it so you can</font>

343
00:18:11,740 --> 00:18:18,580
<font color="#CCCCCC">just do a command semicolon</font><font color="#E5E5E5"> run it and</font>

344
00:18:15,190 --> 00:18:23,200
<font color="#E5E5E5">then you you get this results as an</font>

345
00:18:18,580 --> 00:18:25,389
output there are other useful command

346
00:18:23,200 --> 00:18:29,220
lines if you<font color="#E5E5E5"> like so there is very</font>

347
00:18:25,390 --> 00:18:32,320
verbose<font color="#E5E5E5"> real sandbox which which</font><font color="#CCCCCC"> makes</font>

348
00:18:29,220 --> 00:18:34,030
which saves time<font color="#E5E5E5"> by</font><font color="#CCCCCC"> keeping the</font><font color="#E5E5E5"> send</font>

349
00:18:32,320 --> 00:18:36,280
boxes<font color="#E5E5E5"> the temporary</font><font color="#CCCCCC"> sent</font><font color="#E5E5E5"> boxes so you</font>

350
00:18:34,030 --> 00:18:38,800
can reuse<font color="#CCCCCC"> them so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> something that</font>

351
00:18:36,280 --> 00:18:41,980
we are<font color="#E5E5E5"> up streaming as part of the</font>

352
00:18:38,800 --> 00:18:45,129
<font color="#E5E5E5">preparation of this talk</font><font color="#CCCCCC"> so I was trying</font>

353
00:18:41,980 --> 00:18:49,600
so many by sections and they were taking

354
00:18:45,130 --> 00:18:51,400
long so I<font color="#E5E5E5"> externalized this option was</font>

355
00:18:49,600 --> 00:18:53,889
part<font color="#E5E5E5"> of this so you can restrict</font>

356
00:18:51,400 --> 00:18:58,390
<font color="#E5E5E5">versions so you can make the bisection</font>

357
00:18:53,890 --> 00:19:01,000
process to run faster so I have<font color="#E5E5E5"> a few</font>

358
00:18:58,390 --> 00:19:05,260
<font color="#E5E5E5">couple demonstrations I think</font><font color="#CCCCCC"> I'll show</font>

359
00:19:01,000 --> 00:19:07,050
one of<font color="#E5E5E5"> them and then I you have the</font>

360
00:19:05,260 --> 00:19:12,700
slides and you can reproduce the other

361
00:19:07,050 --> 00:19:15,730
so the first<font color="#CCCCCC"> one is</font><font color="#E5E5E5"> an actual bug opened</font>

362
00:19:12,700 --> 00:19:19,030
in on clang so clang crashes when

363
00:19:15,730 --> 00:19:21,360
calling a function<font color="#E5E5E5"> while both on meeting</font>

364
00:19:19,030 --> 00:19:34,180
a parameter and misspelling a<font color="#E5E5E5"> parameter</font>

365
00:19:21,360 --> 00:19:37,750
so I can show you<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> see so when</font>

366
00:19:34,180 --> 00:19:41,650
you<font color="#E5E5E5"> provide this you have the parameter</font>

367
00:19:37,750 --> 00:19:45,480
as user<font color="#E5E5E5"> news</font><font color="#CCCCCC"> and another thing which is</font>

368
00:19:41,650 --> 00:19:48,999
not<font color="#E5E5E5"> a non-existent to chain will crash</font>

369
00:19:45,480 --> 00:19:55,709
then their way to<font color="#E5E5E5"> reproduce it</font>

370
00:19:48,999 --> 00:19:59,409
let me show you<font color="#E5E5E5"> cut status to the</font><font color="#CCCCCC"> stage</font>

371
00:19:55,709 --> 00:20:02,229
<font color="#E5E5E5">so this is basically the way I am</font>

372
00:19:59,409 --> 00:20:05,649
<font color="#E5E5E5">running it</font><font color="#CCCCCC"> oh I have this come online</font>

373
00:20:02,229 --> 00:20:08,169
<font color="#E5E5E5">better in a better format so this is the</font>

374
00:20:05,649 --> 00:20:10,658
way<font color="#CCCCCC"> I'm I'm running this bisection</font>

375
00:20:08,169 --> 00:20:13,929
process<font color="#E5E5E5"> so I'm calling out the</font><font color="#CCCCCC"> EM bisect</font>

376
00:20:10,659 --> 00:20:16,569
<font color="#E5E5E5">I'm calling real sandbox so so it won't</font>

377
00:20:13,929 --> 00:20:18,159
download<font color="#E5E5E5"> things and extract things on my</font>

378
00:20:16,569 --> 00:20:22,449
local machine is just<font color="#E5E5E5"> to speed up</font><font color="#CCCCCC"> the</font>

379
00:20:18,159 --> 00:20:24,609
process for demonstration purposes<font color="#CCCCCC"> I set</font>

380
00:20:22,449 --> 00:20:27,759
a given max<font color="#E5E5E5"> revision that I have done</font>

381
00:20:24,609 --> 00:20:30,059
previously<font color="#E5E5E5"> downloaded custom sandbox</font><font color="#CCCCCC"> and</font>

382
00:20:27,759 --> 00:20:33,009
this is the reproducer<font color="#E5E5E5"> so I'm calling</font>

383
00:20:30,059 --> 00:20:36,189
shell worklink

384
00:20:33,009 --> 00:20:40,209
is this thing<font color="#E5E5E5"> I got all this information</font>

385
00:20:36,189 --> 00:20:43,419
<font color="#E5E5E5">of the bug report and then what I want</font>

386
00:20:40,209 --> 00:20:45,839
to find to say not a given version is

387
00:20:43,419 --> 00:20:54,609
working<font color="#CCCCCC"> I want to get</font><font color="#E5E5E5"> an undeclared</font>

388
00:20:45,839 --> 00:21:05,349
identifier<font color="#CCCCCC"> rather than a crash so</font><font color="#E5E5E5"> this</font>

389
00:20:54,609 --> 00:21:10,089
thing so this<font color="#CCCCCC"> is the bug report so what</font>

390
00:21:05,349 --> 00:21:12,218
it does it basically<font color="#E5E5E5"> we will crash the</font>

391
00:21:10,089 --> 00:21:14,879
<font color="#E5E5E5">dhole to chain and whatever we</font><font color="#CCCCCC"> are</font>

392
00:21:12,219 --> 00:21:22,509
looking for is a undeclared identifier

393
00:21:14,879 --> 00:21:26,349
<font color="#CCCCCC">so I would just run this thing and you</font>

394
00:21:22,509 --> 00:21:31,029
see that it will<font color="#E5E5E5"> start well it's not</font>

395
00:21:26,349 --> 00:21:33,519
<font color="#E5E5E5">very useful but you see many fails and</font>

396
00:21:31,029 --> 00:21:36,369
you see a few passes<font color="#CCCCCC"> so it is limiting</font>

397
00:21:33,519 --> 00:21:38,619
<font color="#CCCCCC">this search space so it is failing</font>

398
00:21:36,369 --> 00:21:42,849
failing failing<font color="#E5E5E5"> until it passes then</font>

399
00:21:38,619 --> 00:21:48,069
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> it reruns the process on that space</font>

400
00:21:42,849 --> 00:21:50,739
as well so in the end it will say that

401
00:21:48,069 --> 00:21:53,739
client revision this number this

402
00:21:50,739 --> 00:21:57,759
<font color="#CCCCCC">timestamp is a first working</font><font color="#E5E5E5"> boot and</font>

403
00:21:53,739 --> 00:22:00,249
this one<font color="#E5E5E5"> this timestamp is the next</font>

404
00:21:57,759 --> 00:22:02,079
failing build so it was<font color="#E5E5E5"> working in this</font>

405
00:22:00,249 --> 00:22:04,239
revision<font color="#E5E5E5"> and it was not</font><font color="#CCCCCC"> working anymore</font>

406
00:22:02,079 --> 00:22:05,739
undistribute so that's<font color="#E5E5E5"> the output</font><font color="#CCCCCC"> you</font>

407
00:22:04,239 --> 00:22:19,329
get<font color="#E5E5E5"> for anything that you want to</font>

408
00:22:05,739 --> 00:22:21,009
troubleshoot so yeah<font color="#E5E5E5"> okay yeah but I</font>

409
00:22:19,329 --> 00:22:23,739
<font color="#E5E5E5">think the first working build</font><font color="#CCCCCC"> it's it</font>

410
00:22:21,009 --> 00:22:25,779
seemed<font color="#E5E5E5"> from latest to oldest so is the</font>

411
00:22:23,739 --> 00:22:28,719
first working<font color="#CCCCCC"> build it from</font><font color="#E5E5E5"> in the</font>

412
00:22:25,779 --> 00:22:30,729
opposite direction<font color="#CCCCCC"> another</font><font color="#E5E5E5"> last one from</font>

413
00:22:28,719 --> 00:22:35,319
<font color="#E5E5E5">the source I guess that's that's the</font>

414
00:22:30,729 --> 00:22:37,899
meaning of<font color="#E5E5E5"> the message</font><font color="#CCCCCC"> yeah but this is</font>

415
00:22:35,319 --> 00:22:39,668
because it pulls the repository<font color="#E5E5E5"> each two</font>

416
00:22:37,899 --> 00:22:43,439
minutes so we<font color="#CCCCCC"> can get</font><font color="#E5E5E5"> all a smaller</font>

417
00:22:39,669 --> 00:22:43,440
resolution than one<font color="#E5E5E5"> single committee</font>

418
00:22:43,859 --> 00:22:55,208
yeah<font color="#E5E5E5"> okay so yeah I</font><font color="#CCCCCC"> just need just a few</font>

419
00:22:51,699 --> 00:22:58,179
discussions<font color="#E5E5E5"> so there is just to</font>

420
00:22:55,209 --> 00:23:02,489
summarize the the gains that we will

421
00:22:58,179 --> 00:23:05,739
have<font color="#E5E5E5"> on time spent on bisection if we</font>

422
00:23:02,489 --> 00:23:08,319
that demonstration<font color="#E5E5E5"> I did I have already</font>

423
00:23:05,739 --> 00:23:11,139
<font color="#CCCCCC">cached</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> download the versions</font><font color="#E5E5E5"> and I</font>

424
00:23:08,319 --> 00:23:12,819
have already extracted that versions<font color="#E5E5E5"> so</font>

425
00:23:11,139 --> 00:23:15,789
it<font color="#E5E5E5"> runs well really</font>

426
00:23:12,819 --> 00:23:18,339
artificially quick<font color="#E5E5E5"> because I have</font>

427
00:23:15,789 --> 00:23:20,199
everything pre cached<font color="#E5E5E5"> in a real world on</font>

428
00:23:18,339 --> 00:23:22,149
a Raspberry Pi

429
00:23:20,199 --> 00:23:24,639
it will take around<font color="#CCCCCC"> three minutes to</font>

430
00:23:22,149 --> 00:23:27,129
uncompress that's the the<font color="#E5E5E5"> most time is</font>

431
00:23:24,639 --> 00:23:29,289
spent on<font color="#CCCCCC"> that thing</font>

432
00:23:27,129 --> 00:23:30,728
I have a few suggestions on how to<font color="#E5E5E5"> fix</font>

433
00:23:29,289 --> 00:23:33,339
that<font color="#E5E5E5"> in the future</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> still three</font>

434
00:23:30,729 --> 00:23:35,799
<font color="#CCCCCC">minutes is</font><font color="#E5E5E5"> not so bad and if we do that</font>

435
00:23:33,339 --> 00:23:41,079
<font color="#CCCCCC">in</font><font color="#E5E5E5"> real world we will have one</font><font color="#CCCCCC"> hour</font><font color="#E5E5E5"> and</font>

436
00:23:35,799 --> 00:23:44,289
<font color="#CCCCCC">ten minutes to test 23 to change times</font>

437
00:23:41,079 --> 00:23:47,709
three minutes each more or<font color="#CCCCCC"> less</font><font color="#E5E5E5"> but on</font>

438
00:23:44,289 --> 00:23:50,769
<font color="#E5E5E5">the other side</font><font color="#CCCCCC"> comparing this</font><font color="#E5E5E5"> with the</font>

439
00:23:47,709 --> 00:23:52,839
time we usually spend on creating the

440
00:23:50,769 --> 00:23:57,429
build cash<font color="#CCCCCC"> items which is</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> or less</font>

441
00:23:52,839 --> 00:23:59,948
<font color="#CCCCCC">ten minutes we to do the same process</font><font color="#E5E5E5"> we</font>

442
00:23:57,429 --> 00:24:03,039
<font color="#CCCCCC">you have</font><font color="#E5E5E5"> almost four</font><font color="#CCCCCC"> hours to to run the</font>

443
00:23:59,949 --> 00:24:04,989
whole thing<font color="#E5E5E5"> considering</font><font color="#CCCCCC"> we get that</font>

444
00:24:03,039 --> 00:24:07,809
specific<font color="#E5E5E5"> versions that we know that are</font>

445
00:24:04,989 --> 00:24:10,509
possible<font color="#E5E5E5"> to build and we run the same</font>

446
00:24:07,809 --> 00:24:12,789
like jumping through versions to

447
00:24:10,509 --> 00:24:14,200
optimize the process<font color="#E5E5E5"> so this is</font>

448
00:24:12,789 --> 00:24:16,509
basically

449
00:24:14,200 --> 00:24:19,019
two hours and 40 minutes that you get

450
00:24:16,509 --> 00:24:23,169
more<font color="#CCCCCC"> or less come win</font><font color="#E5E5E5"> in this comparison</font>

451
00:24:19,019 --> 00:24:40,389
<font color="#E5E5E5">also</font><font color="#CCCCCC"> that we are always having versions</font>

452
00:24:23,169 --> 00:24:41,860
that<font color="#E5E5E5"> we build and we work yes yeah</font>

453
00:24:40,389 --> 00:24:43,899
that's<font color="#E5E5E5"> probably less probably more I'm</font>

454
00:24:41,860 --> 00:24:45,309
just not considering<font color="#E5E5E5"> that we are</font>

455
00:24:43,899 --> 00:24:49,389
<font color="#E5E5E5">building</font><font color="#CCCCCC"> on a Raspberry Pi</font><font color="#E5E5E5"> because that</font>

456
00:24:45,309 --> 00:24:51,299
would be like<font color="#E5E5E5"> yeah so yeah</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's the</font>

457
00:24:49,389 --> 00:24:53,709
thing we<font color="#CCCCCC"> are building on a very high-end</font>

458
00:24:51,299 --> 00:24:58,720
<font color="#E5E5E5">machine I will tell you a little bit</font>

459
00:24:53,710 --> 00:25:01,029
<font color="#E5E5E5">about that machine and then still if we</font>

460
00:24:58,720 --> 00:25:03,850
compare Raspberry Pi<font color="#E5E5E5"> versus Raspberry Pi</font>

461
00:25:01,029 --> 00:25:06,299
<font color="#E5E5E5">then it will be like days versus hours</font>

462
00:25:03,850 --> 00:25:09,248
<font color="#E5E5E5">right to have</font><font color="#CCCCCC"> all the all those versions</font>

463
00:25:06,299 --> 00:25:10,600
and I'm I'm talking<font color="#CCCCCC"> about ten minutes</font>

464
00:25:09,249 --> 00:25:13,749
because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> building from scratch</font>

465
00:25:10,600 --> 00:25:17,408
<font color="#E5E5E5">this is not an incremental build so this</font>

466
00:25:13,749 --> 00:25:19,629
is a very<font color="#CCCCCC"> high-end machine so this the</font>

467
00:25:17,409 --> 00:25:24,759
demonstration<font color="#CCCCCC"> number two I'll just skip</font>

468
00:25:19,629 --> 00:25:27,129
that<font color="#CCCCCC"> so</font><font color="#E5E5E5"> a final remark so automated</font>

469
00:25:24,759 --> 00:25:29,590
bisecting is a valuable<font color="#E5E5E5"> tool to</font><font color="#CCCCCC"> have on</font>

470
00:25:27,129 --> 00:25:33,730
<font color="#E5E5E5">your toolbox to troubleshoot things on</font>

471
00:25:29,590 --> 00:25:36,580
the tool chain<font color="#CCCCCC"> we can save time by using</font>

472
00:25:33,730 --> 00:25:40,419
<font color="#E5E5E5">a lot of um lot by sectors with just saw</font>

473
00:25:36,580 --> 00:25:44,740
and<font color="#E5E5E5"> we recently added on the seven and a</font>

474
00:25:40,419 --> 00:25:47,049
<font color="#CCCCCC">art 64 so there is also this move within</font>

475
00:25:44,740 --> 00:25:49,629
the the<font color="#E5E5E5"> allergen community to move from</font>

476
00:25:47,049 --> 00:25:51,940
<font color="#CCCCCC">SVN to get and then this</font><font color="#E5E5E5"> will impact</font>

477
00:25:49,629 --> 00:25:55,389
<font color="#CCCCCC">tools like that that rely on revision</font>

478
00:25:51,940 --> 00:25:57,309
versions so I've sent a message to Chris

479
00:25:55,389 --> 00:26:01,979
Matthews a few weeks ago<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font>

480
00:25:57,309 --> 00:26:01,980
discussing about<font color="#CCCCCC"> that getting ideas and</font>

481
00:26:07,160 --> 00:26:16,790
yeah yes

482
00:26:14,000 --> 00:26:18,890
yeah<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also we don't</font><font color="#E5E5E5"> really need</font><font color="#CCCCCC"> to</font>

483
00:26:16,790 --> 00:26:20,810
track the revision number versions to

484
00:26:18,890 --> 00:26:23,660
trust that<font color="#E5E5E5"> in in this scenario we can</font>

485
00:26:20,810 --> 00:26:25,520
just get the like the continuous

486
00:26:23,660 --> 00:26:29,990
integration<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> build ID or something</font>

487
00:26:25,520 --> 00:26:32,960
<font color="#E5E5E5">that is shared and known so the</font><font color="#CCCCCC"> machine</font>

488
00:26:29,990 --> 00:26:36,530
these<font color="#E5E5E5"> machines that we've got for the</font>

489
00:26:32,960 --> 00:26:39,230
<font color="#CCCCCC">lrvm project</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> machines are actually</font>

490
00:26:36,530 --> 00:26:42,110
free<font color="#E5E5E5"> and each and every open-source</font>

491
00:26:39,230 --> 00:26:45,110
project can request some of<font color="#E5E5E5"> them this is</font>

492
00:26:42,110 --> 00:26:50,240
<font color="#CCCCCC">an</font><font color="#E5E5E5"> initiative</font><font color="#CCCCCC"> called works on arm which</font>

493
00:26:45,110 --> 00:26:52,370
offers<font color="#E5E5E5"> machines or remote machines that</font>

494
00:26:50,240 --> 00:26:54,350
you can use some very powerful machines

495
00:26:52,370 --> 00:26:57,979
to try your continuous<font color="#CCCCCC"> integration jobs</font>

496
00:26:54,350 --> 00:27:01,270
and<font color="#CCCCCC"> Cide working and supported</font><font color="#E5E5E5"> on arm in</font>

497
00:26:57,980 --> 00:27:04,640
general this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> URL you</font><font color="#E5E5E5"> can request</font>

498
00:27:01,270 --> 00:27:06,800
<font color="#CCCCCC">resources opening</font><font color="#E5E5E5"> basically a github</font>

499
00:27:04,640 --> 00:27:09,470
<font color="#E5E5E5">issue</font><font color="#CCCCCC"> all instructions are on that</font>

500
00:27:06,800 --> 00:27:10,850
website<font color="#E5E5E5"> and we use it and these machines</font>

501
00:27:09,470 --> 00:27:12,560
are very reliable

502
00:27:10,850 --> 00:27:19,639
we have<font color="#E5E5E5"> them running for months without</font>

503
00:27:12,560 --> 00:27:25,720
any problem<font color="#E5E5E5"> yeah yeah so we use them</font><font color="#CCCCCC"> two</font>

504
00:27:19,640 --> 00:27:30,040
machines one is a<font color="#CCCCCC"> thunder x2 and one is</font>

505
00:27:25,720 --> 00:27:34,490
or a<font color="#CCCCCC"> teller x1 and the other one is a</font>

506
00:27:30,040 --> 00:27:38,360
another<font color="#CCCCCC"> high-end machine yeah this one</font>

507
00:27:34,490 --> 00:27:40,490
yeah yeah<font color="#E5E5E5"> and that's it for me</font><font color="#CCCCCC"> thank you</font>

508
00:27:38,360 --> 00:27:41,330
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> and if you have any questions</font>

509
00:27:40,490 --> 00:27:48,570
I'm happy to

510
00:27:41,330 --> 00:27:48,570
[Applause]

511
00:27:57,940 --> 00:28:24,590
<font color="#E5E5E5">so I'm guessing with this looks like</font>

512
00:28:01,060 --> 00:28:27,020
<font color="#CCCCCC">Nick</font><font color="#E5E5E5"> strikes like yeah</font>

513
00:28:24,590 --> 00:28:28,730
so<font color="#E5E5E5"> the question is about though the test</font>

514
00:28:27,020 --> 00:28:33,530
cases in<font color="#CCCCCC"> which you have tools</font><font color="#E5E5E5"> like</font>

515
00:28:28,730 --> 00:28:36,770
<font color="#CCCCCC">biotech and not those things</font><font color="#E5E5E5"> right yeah</font>

516
00:28:33,530 --> 00:28:40,610
I know and I didn't test with any of

517
00:28:36,770 --> 00:28:43,370
them yeah I think<font color="#E5E5E5"> you you can can find</font>

518
00:28:40,610 --> 00:28:45,709
<font color="#E5E5E5">away</font><font color="#CCCCCC"> if you have if</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> a bash</font>

519
00:28:43,370 --> 00:28:48,169
script<font color="#E5E5E5"> out of it you can reproduce the</font>

520
00:28:45,710 --> 00:28:49,940
thing<font color="#E5E5E5"> very quickly yeah</font>

521
00:28:48,170 --> 00:28:53,090
and then you<font color="#E5E5E5"> probably just need to</font>

522
00:28:49,940 --> 00:28:56,150
change<font color="#E5E5E5"> the places in which</font><font color="#CCCCCC"> you need</font>

523
00:28:53,090 --> 00:28:59,500
<font color="#CCCCCC">Clank</font><font color="#E5E5E5"> to have that path variable</font><font color="#CCCCCC"> on it</font>

524
00:28:56,150 --> 00:28:59,500
and that's it

525
00:29:28,350 --> 00:29:37,570
yeah so yeah<font color="#CCCCCC"> so the first thing only</font><font color="#E5E5E5"> on</font>

526
00:29:33,910 --> 00:29:39,880
this way so from the<font color="#E5E5E5"> arm machine from</font>

527
00:29:37,570 --> 00:29:42,700
the x86<font color="#E5E5E5"> machine run something on a</font><font color="#CCCCCC"> queue</font>

528
00:29:39,880 --> 00:29:44,140
<font color="#E5E5E5">this is kind of</font><font color="#CCCCCC"> already supported</font>

529
00:29:42,700 --> 00:29:45,730
because<font color="#E5E5E5"> you can have</font><font color="#CCCCCC"> a bash script</font><font color="#E5E5E5"> and</font>

530
00:29:44,140 --> 00:29:49,210
if you can do ad vitur<font color="#CCCCCC"> that on a bash</font>

531
00:29:45,730 --> 00:29:52,060
<font color="#CCCCCC">script you can</font><font color="#E5E5E5"> do that on this probably</font>

532
00:29:49,210 --> 00:29:54,940
yeah<font color="#E5E5E5"> and it is also a curiosity on this</font>

533
00:29:52,060 --> 00:29:58,060
is that<font color="#E5E5E5"> we build also</font><font color="#CCCCCC"> the backend for</font>

534
00:29:54,940 --> 00:30:01,540
x86<font color="#CCCCCC"> so you can use on your</font><font color="#E5E5E5"> machine</font>

535
00:29:58,060 --> 00:30:04,360
<font color="#E5E5E5">you can generate the x86 banners in and</font>

536
00:30:01,540 --> 00:30:06,090
<font color="#E5E5E5">even if you have a way</font><font color="#CCCCCC"> to run them you</font>

537
00:30:04,360 --> 00:30:11,209
<font color="#CCCCCC">can do</font><font color="#E5E5E5"> that as well</font>

538
00:30:06,090 --> 00:30:17,059
yeah yeah thanks very<font color="#CCCCCC"> much</font>

539
00:30:11,210 --> 00:30:17,059
[Applause]

