1
00:00:05,020 --> 00:00:09,670
yeah so today I'm going to<font color="#E5E5E5"> be talking</font>

2
00:00:06,669 --> 00:00:12,760
<font color="#E5E5E5">about how</font><font color="#CCCCCC"> at Sault we moved</font><font color="#E5E5E5"> from an</font>

3
00:00:09,670 --> 00:00:17,590
<font color="#E5E5E5">agent based solution to being able to</font>

4
00:00:12,760 --> 00:00:19,930
use<font color="#E5E5E5"> salt without installing an agent so</font>

5
00:00:17,590 --> 00:00:22,269
yeah my name is<font color="#E5E5E5"> Megan</font><font color="#CCCCCC"> will hi</font><font color="#E5E5E5"> I'm known</font>

6
00:00:19,930 --> 00:00:26,590
<font color="#CCCCCC">as shell on the interwebs bonus points -</font>

7
00:00:22,269 --> 00:00:28,028
ever understands what<font color="#E5E5E5"> shell is and I'm</font>

8
00:00:26,590 --> 00:00:31,060
currently a software engineer at

9
00:00:28,029 --> 00:00:33,610
<font color="#CCCCCC">saltstack but I</font><font color="#E5E5E5"> am working mostly on</font>

10
00:00:31,060 --> 00:00:38,019
getting releases out right now<font color="#E5E5E5"> so that's</font>

11
00:00:33,610 --> 00:00:39,760
me<font color="#E5E5E5"> so what is</font><font color="#CCCCCC"> salt for</font><font color="#E5E5E5"> anybody that</font>

12
00:00:38,019 --> 00:00:41,470
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> know what salt is I think it's</font>

13
00:00:39,760 --> 00:00:42,909
important<font color="#E5E5E5"> to understand what salt is</font>

14
00:00:41,470 --> 00:00:44,650
before<font color="#CCCCCC"> we go in and</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

15
00:00:42,909 --> 00:00:47,470
saltless<font color="#E5E5E5"> estate which</font><font color="#CCCCCC"> is the agentless</font>

16
00:00:44,650 --> 00:00:50,199
solution<font color="#E5E5E5"> so salt is a lot of things but</font>

17
00:00:47,470 --> 00:00:52,690
<font color="#E5E5E5">I would describe it as</font><font color="#CCCCCC"> being able to</font><font color="#E5E5E5"> do</font>

18
00:00:50,199 --> 00:00:56,320
things such<font color="#E5E5E5"> as config management remote</font>

19
00:00:52,690 --> 00:01:03,640
execution automation and orchestration

20
00:00:56,320 --> 00:01:05,409
and it's very event-driven<font color="#E5E5E5"> so talking</font>

21
00:01:03,640 --> 00:01:08,320
about<font color="#E5E5E5"> house salt is currently set up</font>

22
00:01:05,409 --> 00:01:11,859
<font color="#E5E5E5">with the agent solution it is a servant</font>

23
00:01:08,320 --> 00:01:15,219
agent<font color="#E5E5E5"> communication model so we refer</font><font color="#CCCCCC"> to</font>

24
00:01:11,859 --> 00:01:18,038
the<font color="#CCCCCC"> servant as</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> server as the salt</font>

25
00:01:15,219 --> 00:01:20,859
master and we refer to<font color="#E5E5E5"> the agent as the</font>

26
00:01:18,039 --> 00:01:22,450
salt minion and the way that you<font color="#E5E5E5"> would</font>

27
00:01:20,859 --> 00:01:24,039
set this up is you would<font color="#E5E5E5"> install the</font>

28
00:01:22,450 --> 00:01:26,829
master and then you would<font color="#E5E5E5"> install the</font>

29
00:01:24,039 --> 00:01:28,960
minion and there are a couple<font color="#CCCCCC"> of network</font>

30
00:01:26,829 --> 00:01:31,869
services<font color="#CCCCCC"> that provide</font><font color="#E5E5E5"> the transport</font>

31
00:01:28,960 --> 00:01:33,428
layer<font color="#E5E5E5"> within salt and they are we refer</font>

32
00:01:31,869 --> 00:01:37,119
to<font color="#E5E5E5"> them as</font><font color="#CCCCCC"> the publisher and</font><font color="#E5E5E5"> the request</font>

33
00:01:33,429 --> 00:01:40,539
server<font color="#CCCCCC"> and these are using a 0qs library</font>

34
00:01:37,119 --> 00:01:42,189
and the publisher essentially is sending

35
00:01:40,539 --> 00:01:44,109
<font color="#E5E5E5">out all the commands</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the master</font><font color="#CCCCCC"> to</font>

36
00:01:42,189 --> 00:01:45,699
the minions and the<font color="#E5E5E5"> minions then</font>

37
00:01:44,109 --> 00:01:47,798
determined from there whether they

38
00:01:45,700 --> 00:01:50,079
should actually<font color="#E5E5E5"> run the command and then</font>

39
00:01:47,799 --> 00:01:51,749
we have the<font color="#E5E5E5"> request server and this is</font>

40
00:01:50,079 --> 00:01:53,770
where we get<font color="#E5E5E5"> a lot of the</font><font color="#CCCCCC"> bi-directional</font>

41
00:01:51,749 --> 00:01:56,710
communication between the master and<font color="#E5E5E5"> the</font>

42
00:01:53,770 --> 00:01:59,219
minion<font color="#E5E5E5"> so when talking about converting</font>

43
00:01:56,710 --> 00:02:05,079
<font color="#CCCCCC">over to an agentless solution</font><font color="#E5E5E5"> obviously</font>

44
00:01:59,219 --> 00:02:06,369
<font color="#CCCCCC">SSH is a unidirectional so we had to be</font>

45
00:02:05,079 --> 00:02:09,038
careful<font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of how we architected</font>

46
00:02:06,369 --> 00:02:14,740
that<font color="#E5E5E5"> so that we could use the power of</font>

47
00:02:09,038 --> 00:02:17,529
salt but also<font color="#E5E5E5"> use SSH</font><font color="#CCCCCC"> so I'm just going</font>

48
00:02:14,740 --> 00:02:18,430
<font color="#CCCCCC">to</font><font color="#E5E5E5"> show you a quick command within salt</font>

49
00:02:17,530 --> 00:02:19,930
that<font color="#CCCCCC"> you can run</font>

50
00:02:18,430 --> 00:02:22,810
<font color="#E5E5E5">just kind of like our</font><font color="#CCCCCC"> version of</font><font color="#E5E5E5"> hello</font>

51
00:02:19,930 --> 00:02:25,299
world<font color="#E5E5E5"> it's just salt which is</font><font color="#CCCCCC"> the name</font>

52
00:02:22,810 --> 00:02:27,220
of<font color="#E5E5E5"> the CLI tool that your news targeting</font>

53
00:02:25,299 --> 00:02:30,280
whatever many and you want to target and

54
00:02:27,220 --> 00:02:33,700
then to stop peeing is just what refer

55
00:02:30,280 --> 00:02:35,319
<font color="#E5E5E5">to as an execution module</font><font color="#CCCCCC"> execution</font>

56
00:02:33,700 --> 00:02:37,629
modules are<font color="#E5E5E5"> not meant to be idempotent</font>

57
00:02:35,319 --> 00:02:41,379
they're more meant to<font color="#CCCCCC"> be run as</font><font color="#E5E5E5"> one-off</font>

58
00:02:37,629 --> 00:02:44,260
commands and so yeah it<font color="#E5E5E5"> would go through</font>

59
00:02:41,379 --> 00:02:45,849
that job flow as I mentioned before<font color="#E5E5E5"> it</font>

60
00:02:44,260 --> 00:02:47,230
would the master would publish that

61
00:02:45,849 --> 00:02:48,879
command at the minion the minion would

62
00:02:47,230 --> 00:02:51,399
then run it and then<font color="#CCCCCC"> return it through</font>

63
00:02:48,879 --> 00:02:54,040
the request<font color="#E5E5E5"> server so as you can see</font>

64
00:02:51,400 --> 00:02:57,099
<font color="#E5E5E5">through the CLI maybe you can't see</font><font color="#CCCCCC"> that</font>

65
00:02:54,040 --> 00:02:59,108
super well<font color="#CCCCCC"> but essentially all it</font><font color="#E5E5E5"> does</font>

66
00:02:57,099 --> 00:03:02,349
is it<font color="#E5E5E5"> runs</font><font color="#CCCCCC"> tests stop peeing on the</font>

67
00:02:59,109 --> 00:03:07,750
minion and then returns true<font color="#CCCCCC"> if it's</font>

68
00:03:02,349 --> 00:03:09,280
<font color="#CCCCCC">able to communicate</font><font color="#E5E5E5"> with the minion okay</font>

69
00:03:07,750 --> 00:03:11,409
another important<font color="#E5E5E5"> thing when talking</font>

70
00:03:09,280 --> 00:03:12,790
<font color="#CCCCCC">about how we architected solid</font><font color="#E5E5E5"> SSH is</font>

71
00:03:11,409 --> 00:03:17,078
you need<font color="#E5E5E5"> to understand the difference</font>

72
00:03:12,790 --> 00:03:19,569
<font color="#E5E5E5">between salt and salt call so salt as we</font>

73
00:03:17,079 --> 00:03:21,849
show<font color="#E5E5E5"> here</font><font color="#CCCCCC"> tests are you know we're we're</font>

74
00:03:19,569 --> 00:03:24,518
targeting all minions with the<font color="#E5E5E5"> asher's</font>

75
00:03:21,849 --> 00:03:26,828
there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> test stop ping</font><font color="#E5E5E5"> that is the CLI</font>

76
00:03:24,519 --> 00:03:28,449
tool you use on<font color="#CCCCCC"> the master and salt call</font>

77
00:03:26,829 --> 00:03:32,019
gives you the same power<font color="#CCCCCC"> but on the</font>

78
00:03:28,449 --> 00:03:35,379
minion<font color="#CCCCCC"> and specifically here you can use</font>

79
00:03:32,019 --> 00:03:38,230
either salt call or salt call - local<font color="#CCCCCC"> -</font>

80
00:03:35,379 --> 00:03:40,510
<font color="#E5E5E5">local</font><font color="#CCCCCC"> will not try to communicate</font><font color="#E5E5E5"> back</font>

81
00:03:38,230 --> 00:03:43,480
to the master it will keep all

82
00:03:40,510 --> 00:03:47,379
communications within<font color="#E5E5E5"> the minions</font><font color="#CCCCCC"> and we</font>

83
00:03:43,480 --> 00:03:49,060
use this<font color="#CCCCCC"> with insult</font><font color="#E5E5E5"> SSH</font><font color="#CCCCCC"> because that is</font>

84
00:03:47,379 --> 00:03:50,798
how<font color="#E5E5E5"> we create that unidirectional</font>

85
00:03:49,060 --> 00:03:55,180
traffic so<font color="#CCCCCC"> that it can all just</font><font color="#E5E5E5"> run on</font>

86
00:03:50,799 --> 00:03:57,400
the minion<font color="#CCCCCC"> all right so now that</font><font color="#E5E5E5"> we</font>

87
00:03:55,180 --> 00:03:59,699
understand a little bit<font color="#E5E5E5"> about what salt</font>

88
00:03:57,400 --> 00:04:03,519
is let's talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

89
00:03:59,699 --> 00:04:08,109
convert<font color="#E5E5E5"> the salts and being able to use</font>

90
00:04:03,519 --> 00:04:11,440
SSH as well so first of all why<font color="#E5E5E5"> what why</font>

91
00:04:08,109 --> 00:04:14,470
do we provide a an avenue<font color="#CCCCCC"> for people</font><font color="#E5E5E5"> to</font>

92
00:04:11,440 --> 00:04:16,690
run salt<font color="#E5E5E5"> obviously with SSH it is a bit</font>

93
00:04:14,470 --> 00:04:17,440
slower but there's a lot<font color="#E5E5E5"> of positives to</font>

94
00:04:16,690 --> 00:04:20,349
<font color="#CCCCCC">it</font><font color="#E5E5E5"> as well</font>

95
00:04:17,440 --> 00:04:23,229
it gives our<font color="#CCCCCC"> users a lot of variety</font><font color="#E5E5E5"> they</font>

96
00:04:20,349 --> 00:04:25,419
can use both the agent and the<font color="#CCCCCC"> agent</font>

97
00:04:23,229 --> 00:04:28,060
list option you<font color="#CCCCCC"> don't have to choose one</font>

98
00:04:25,419 --> 00:04:30,940
or<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> in fact I know a lot of</font>

99
00:04:28,060 --> 00:04:31,750
people have used<font color="#CCCCCC"> salt ssh to bootstrap</font>

100
00:04:30,940 --> 00:04:34,120
their<font color="#E5E5E5"> minions</font>

101
00:04:31,750 --> 00:04:36,820
<font color="#E5E5E5">as well so a lot</font><font color="#CCCCCC"> of people use</font><font color="#E5E5E5"> both of</font>

102
00:04:34,120 --> 00:04:39,700
<font color="#CCCCCC">those</font><font color="#E5E5E5"> obviously you don't have to</font>

103
00:04:36,820 --> 00:04:43,570
install an agent and it's pretty<font color="#E5E5E5"> simple</font>

104
00:04:39,700 --> 00:04:46,599
<font color="#CCCCCC">to set up</font><font color="#E5E5E5"> and get</font><font color="#CCCCCC"> running so how do</font><font color="#E5E5E5"> you</font>

105
00:04:43,570 --> 00:04:48,940
<font color="#E5E5E5">get it up and running</font><font color="#CCCCCC"> there's a couple</font>

106
00:04:46,600 --> 00:04:51,070
things there's<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> needs to be on the</font>

107
00:04:48,940 --> 00:04:54,250
targeting system<font color="#CCCCCC"> unless you're using the</font>

108
00:04:51,070 --> 00:04:56,740
- our argument<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that just runs a raw</font>

109
00:04:54,250 --> 00:04:58,780
SSH command<font color="#CCCCCC"> so you don't</font><font color="#E5E5E5"> get the power</font>

110
00:04:56,740 --> 00:05:01,570
of salt<font color="#E5E5E5"> but you need to also install</font>

111
00:04:58,780 --> 00:05:04,570
salt as a sage and then you need to<font color="#E5E5E5"> set</font>

112
00:05:01,570 --> 00:05:07,330
up a roster<font color="#E5E5E5"> file and this is an example</font>

113
00:05:04,570 --> 00:05:09,130
<font color="#E5E5E5">of what a roster file is just one</font><font color="#CCCCCC"> of our</font>

114
00:05:07,330 --> 00:05:11,740
default what we refer to<font color="#E5E5E5"> as a flat</font>

115
00:05:09,130 --> 00:05:13,870
roster file and as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it's it's</font>

116
00:05:11,740 --> 00:05:15,850
pretty<font color="#E5E5E5"> simple web one is just an</font>

117
00:05:13,870 --> 00:05:18,010
arbitrary<font color="#E5E5E5"> name obviously</font><font color="#CCCCCC"> you want to</font>

118
00:05:15,850 --> 00:05:20,710
name it<font color="#E5E5E5"> this is something useful then</font>

119
00:05:18,010 --> 00:05:24,310
the host<font color="#E5E5E5"> is either the IP address or</font><font color="#CCCCCC"> the</font>

120
00:05:20,710 --> 00:05:26,830
DNS<font color="#E5E5E5"> of the host name user password to be</font>

121
00:05:24,310 --> 00:05:29,260
able<font color="#E5E5E5"> to you know properly authenticate</font>

122
00:05:26,830 --> 00:05:31,419
to<font color="#E5E5E5"> that host and just then</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> this</font>

123
00:05:29,260 --> 00:05:34,020
example we're<font color="#CCCCCC"> using</font><font color="#E5E5E5"> sudo which just you</font>

124
00:05:31,420 --> 00:05:36,700
know the user needs sudo privileges

125
00:05:34,020 --> 00:05:39,250
<font color="#E5E5E5">obviously there's more options</font><font color="#CCCCCC"> that you</font>

126
00:05:36,700 --> 00:05:41,170
can add within the roster but<font color="#CCCCCC"> that's</font>

127
00:05:39,250 --> 00:05:44,830
<font color="#E5E5E5">just a simple</font><font color="#CCCCCC"> example that</font><font color="#E5E5E5"> you can get</font>

128
00:05:41,170 --> 00:05:48,160
<font color="#E5E5E5">up and quickly get running</font><font color="#CCCCCC"> there are</font>

129
00:05:44,830 --> 00:05:51,340
other rosters available one great thing

130
00:05:48,160 --> 00:05:53,320
about salt is it's very pluggable<font color="#E5E5E5"> in a</font>

131
00:05:51,340 --> 00:05:55,229
lot of<font color="#E5E5E5"> aspects including the</font><font color="#CCCCCC"> rosters</font><font color="#E5E5E5"> so</font>

132
00:05:53,320 --> 00:05:58,360
you can<font color="#CCCCCC"> actually write your</font><font color="#E5E5E5"> own roster</font>

133
00:05:55,230 --> 00:06:01,510
<font color="#E5E5E5">but what's available</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> is it can work</font>

134
00:05:58,360 --> 00:06:03,610
with ansible<font color="#E5E5E5"> the cache cache is a the</font>

135
00:06:01,510 --> 00:06:05,020
master cache so if you've<font color="#E5E5E5"> already got</font>

136
00:06:03,610 --> 00:06:07,330
minions you're targeting<font color="#E5E5E5"> with</font><font color="#CCCCCC"> your</font>

137
00:06:05,020 --> 00:06:09,789
master you can use those that are in<font color="#E5E5E5"> the</font>

138
00:06:07,330 --> 00:06:13,900
cache already<font color="#CCCCCC"> cloud which is our salt</font>

139
00:06:09,790 --> 00:06:16,090
cloud offering interacts with AWS<font color="#CCCCCC"> if you</font>

140
00:06:13,900 --> 00:06:17,950
create a VM in the cloud<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> then</font>

141
00:06:16,090 --> 00:06:20,979
use salt as a<font color="#E5E5E5"> sage directly to interact</font>

142
00:06:17,950 --> 00:06:23,560
<font color="#CCCCCC">with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> closer shell flat is the</font>

143
00:06:20,980 --> 00:06:26,830
default range scan that's where you<font color="#E5E5E5"> can</font>

144
00:06:23,560 --> 00:06:30,130
just scan and define a network range and

145
00:06:26,830 --> 00:06:31,990
also you can<font color="#E5E5E5"> use your SSH config</font><font color="#CCCCCC"> but</font>

146
00:06:30,130 --> 00:06:34,260
yeah like I<font color="#CCCCCC"> said you can also create</font>

147
00:06:31,990 --> 00:06:34,260
your<font color="#E5E5E5"> own</font>

148
00:06:34,410 --> 00:06:41,800
<font color="#CCCCCC">ok so let's show</font><font color="#E5E5E5"> this same example</font><font color="#CCCCCC"> that</font>

149
00:06:38,860 --> 00:06:43,810
<font color="#CCCCCC">we showed with the salt CLI tool</font><font color="#E5E5E5"> the</font>

150
00:06:41,800 --> 00:06:44,960
<font color="#E5E5E5">only thing that's</font><font color="#CCCCCC"> different is you now</font>

151
00:06:43,810 --> 00:06:48,560
<font color="#CCCCCC">have to use</font><font color="#E5E5E5"> this</font>

152
00:06:44,960 --> 00:06:50,659
<font color="#E5E5E5">sssh CLI command we target what we want</font>

153
00:06:48,560 --> 00:06:53,060
to target whichever minion that<font color="#E5E5E5"> is and</font>

154
00:06:50,660 --> 00:06:57,770
we run just<font color="#CCCCCC"> the simple example</font><font color="#E5E5E5"> test</font>

155
00:06:53,060 --> 00:06:59,539
<font color="#CCCCCC">stopping and as you would expect we get</font>

156
00:06:57,770 --> 00:07:04,549
the same<font color="#CCCCCC"> thing we get</font><font color="#E5E5E5"> the response</font><font color="#CCCCCC"> of</font>

157
00:06:59,539 --> 00:07:08,630
true so what is<font color="#E5E5E5"> going on in the</font>

158
00:07:04,550 --> 00:07:10,370
background<font color="#CCCCCC"> obviously you can see that</font>

159
00:07:08,630 --> 00:07:11,990
we're getting the<font color="#E5E5E5"> same result but a lot</font>

160
00:07:10,370 --> 00:07:13,360
<font color="#CCCCCC">of</font><font color="#E5E5E5"> different things are</font><font color="#CCCCCC"> happening to</font>

161
00:07:11,990 --> 00:07:17,240
make this possible

162
00:07:13,360 --> 00:07:18,880
<font color="#CCCCCC">so we're just</font><font color="#E5E5E5"> using SSH as the transport</font>

163
00:07:17,240 --> 00:07:21,410
<font color="#CCCCCC">layer so what we're first going to do</font>

164
00:07:18,880 --> 00:07:23,150
<font color="#E5E5E5">and I've provided</font><font color="#CCCCCC"> where in the code</font><font color="#E5E5E5"> this</font>

165
00:07:21,410 --> 00:07:27,259
<font color="#CCCCCC">is that's</font><font color="#E5E5E5"> just more for the curious</font>

166
00:07:23,150 --> 00:07:29,989
minds but we're<font color="#E5E5E5"> going to set up who what</font>

167
00:07:27,259 --> 00:07:32,090
our target and<font color="#E5E5E5"> our roster is we're gonna</font>

168
00:07:29,990 --> 00:07:34,099
initialize that in our<font color="#E5E5E5"> SSH class and</font>

169
00:07:32,090 --> 00:07:37,039
then we're going<font color="#CCCCCC"> to generate what we</font>

170
00:07:34,099 --> 00:07:38,690
refer to as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> thin so at this point</font>

171
00:07:37,039 --> 00:07:40,639
what it's going<font color="#CCCCCC"> to be is we're going to</font>

172
00:07:38,690 --> 00:07:42,289
determine what are all the<font color="#E5E5E5"> dependencies</font>

173
00:07:40,639 --> 00:07:45,080
that<font color="#E5E5E5"> we're going to need in this thing</font>

174
00:07:42,289 --> 00:07:46,669
to be able to<font color="#E5E5E5"> run this on</font><font color="#CCCCCC"> the minion and</font>

175
00:07:45,080 --> 00:07:49,909
<font color="#E5E5E5">it's also going to add the salt call</font>

176
00:07:46,669 --> 00:07:52,810
binary<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> fin and then it's going to</font>

177
00:07:49,909 --> 00:07:55,639
zip that up<font color="#E5E5E5"> and then we're going to</font>

178
00:07:52,810 --> 00:07:58,909
generate<font color="#E5E5E5"> a new process and we just do</font>

179
00:07:55,639 --> 00:08:01,280
that<font color="#E5E5E5"> using the multi process library</font><font color="#CCCCCC"> and</font>

180
00:07:58,909 --> 00:08:08,990
then in that new process<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to</font>

181
00:08:01,280 --> 00:08:10,609
generate<font color="#E5E5E5"> we're gonna generate the the</font>

182
00:08:08,990 --> 00:08:13,310
file that does a lot<font color="#CCCCCC"> of the logic within</font>

183
00:08:10,610 --> 00:08:17,419
<font color="#E5E5E5">salts SH and</font><font color="#CCCCCC"> it's ss8 to underscore pi</font>

184
00:08:13,310 --> 00:08:18,979
<font color="#CCCCCC">shin and what we'll do is we'd have</font><font color="#E5E5E5"> to</font>

185
00:08:17,419 --> 00:08:21,229
take all the ops<font color="#CCCCCC"> like where's the</font>

186
00:08:18,979 --> 00:08:23,508
directory what<font color="#CCCCCC"> r where's the salt call</font>

187
00:08:21,229 --> 00:08:24,770
binary all that<font color="#CCCCCC"> st.</font><font color="#E5E5E5"> all those things</font>

188
00:08:23,509 --> 00:08:27,530
that you need<font color="#E5E5E5"> to run the command</font><font color="#CCCCCC"> and</font>

189
00:08:24,770 --> 00:08:30,710
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to add that to that module</font>

190
00:08:27,530 --> 00:08:32,510
<font color="#E5E5E5">and then that module when it's run it's</font>

191
00:08:30,710 --> 00:08:34,640
<font color="#CCCCCC">going to determine if it even</font><font color="#E5E5E5"> needs to</font>

192
00:08:32,510 --> 00:08:37,370
<font color="#E5E5E5">copy over that tar so we use</font><font color="#CCCCCC"> it like</font><font color="#E5E5E5"> a</font>

193
00:08:34,640 --> 00:08:39,229
checksum and<font color="#E5E5E5"> a versioning and if any of</font>

194
00:08:37,370 --> 00:08:41,360
those have<font color="#CCCCCC"> changed</font><font color="#E5E5E5"> then we would BRE</font>

195
00:08:39,229 --> 00:08:43,339
copy over the<font color="#E5E5E5"> tar but if we don't need</font>

196
00:08:41,360 --> 00:08:46,760
to copy that obviously the<font color="#CCCCCC"> consecutive</font>

197
00:08:43,339 --> 00:08:48,290
commands will<font color="#CCCCCC"> be faster so obviously</font>

198
00:08:46,760 --> 00:08:50,000
that's a great<font color="#E5E5E5"> part of salt a sage and</font>

199
00:08:48,290 --> 00:08:51,920
how we've tried<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it at</font><font color="#CCCCCC"> least I'm</font>

200
00:08:50,000 --> 00:08:53,779
a bit faster even<font color="#CCCCCC"> though we're going</font>

201
00:08:51,920 --> 00:08:56,199
<font color="#E5E5E5">over SSH</font>

202
00:08:53,779 --> 00:08:58,089
so yeah once we've<font color="#E5E5E5"> got the</font><font color="#CCCCCC"> the tar</font>

203
00:08:56,199 --> 00:09:00,040
copied over we

204
00:08:58,089 --> 00:09:03,009
gonna run that that<font color="#CCCCCC"> shim file that shim</font>

205
00:09:00,040 --> 00:09:07,360
file<font color="#E5E5E5"> actually runs</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> salt as the</font><font color="#CCCCCC"> salt</font>

206
00:09:03,009 --> 00:09:09,459
call command<font color="#E5E5E5"> so if we dive into the code</font>

207
00:09:07,360 --> 00:09:11,259
a bit<font color="#E5E5E5"> we can kind of see what's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> on</font>

208
00:09:09,459 --> 00:09:15,579
<font color="#E5E5E5">here like we discussed in that that uh</font>

209
00:09:11,259 --> 00:09:18,129
that<font color="#CCCCCC"> flowcharts</font><font color="#E5E5E5"> so we can see here we're</font>

210
00:09:15,579 --> 00:09:20,589
initializing the targets<font color="#E5E5E5"> and the the</font>

211
00:09:18,129 --> 00:09:22,329
roster and then there's a lot more

212
00:09:20,589 --> 00:09:24,939
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that are going on here but this</font>

213
00:09:22,329 --> 00:09:29,199
is just<font color="#CCCCCC"> the key point and</font><font color="#E5E5E5"> then we're</font>

214
00:09:24,939 --> 00:09:31,420
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to generate that thin if we then</font>

215
00:09:29,199 --> 00:09:34,149
<font color="#E5E5E5">look at this code we can</font><font color="#CCCCCC"> see that it's</font>

216
00:09:31,420 --> 00:09:36,370
adding the salt<font color="#CCCCCC"> call binary</font><font color="#E5E5E5"> to that thin</font>

217
00:09:34,149 --> 00:09:38,199
it's adding what<font color="#CCCCCC"> we refer to as</font><font color="#E5E5E5"> talks</font>

218
00:09:36,370 --> 00:09:40,660
what that commandment<font color="#E5E5E5"> does essentially</font>

219
00:09:38,199 --> 00:09:43,779
<font color="#E5E5E5">is</font><font color="#CCCCCC"> just go in and</font><font color="#E5E5E5"> determine what are all</font>

220
00:09:40,660 --> 00:09:46,360
<font color="#CCCCCC">of the library</font><font color="#E5E5E5"> or modules that we need</font>

221
00:09:43,779 --> 00:09:51,040
to include and also this extra mods<font color="#CCCCCC"> a</font>

222
00:09:46,360 --> 00:09:53,649
user<font color="#E5E5E5"> can define additional modules that</font>

223
00:09:51,040 --> 00:09:56,110
<font color="#E5E5E5">they want to add to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we also add a</font>

224
00:09:53,649 --> 00:09:58,779
version<font color="#E5E5E5"> of the salt code</font><font color="#CCCCCC"> a Python</font>

225
00:09:56,110 --> 00:10:00,850
version<font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> gonna use either</font>

226
00:09:58,779 --> 00:10:06,189
<font color="#CCCCCC">G's it for zip</font><font color="#E5E5E5"> and we're gonna tar</font><font color="#CCCCCC"> that</font>

227
00:10:00,850 --> 00:10:08,110
up so then as I<font color="#CCCCCC"> discuss we spin up a new</font>

228
00:10:06,189 --> 00:10:10,269
process<font color="#E5E5E5"> and this is just</font><font color="#CCCCCC"> kind of showing</font>

229
00:10:08,110 --> 00:10:13,089
what<font color="#E5E5E5"> we do there we just using the multi</font>

230
00:10:10,269 --> 00:10:17,499
process<font color="#E5E5E5"> processing library and we're</font>

231
00:10:13,089 --> 00:10:20,920
just<font color="#E5E5E5"> queuing all of that up</font><font color="#CCCCCC"> and then a</font>

232
00:10:17,499 --> 00:10:23,949
lot<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> initiation of the shim starts</font>

233
00:10:20,920 --> 00:10:26,110
here<font color="#E5E5E5"> it creates</font><font color="#CCCCCC"> that command string</font><font color="#E5E5E5"> it's</font>

234
00:10:23,949 --> 00:10:29,498
trying to<font color="#E5E5E5"> determine what</font><font color="#CCCCCC"> this what is</font>

235
00:10:26,110 --> 00:10:31,029
going<font color="#CCCCCC"> to be run in that shim command and</font>

236
00:10:29,499 --> 00:10:33,370
adds all<font color="#CCCCCC"> the arguments that we would</font>

237
00:10:31,029 --> 00:10:35,709
need to<font color="#E5E5E5"> it and then it's going to run</font>

238
00:10:33,370 --> 00:10:37,269
<font color="#E5E5E5">that shim command and that</font><font color="#CCCCCC"> shim command</font>

239
00:10:35,709 --> 00:10:39,699
for example<font color="#CCCCCC"> if the thin is not already</font>

240
00:10:37,269 --> 00:10:42,309
<font color="#E5E5E5">copied over it will determine that and</font>

241
00:10:39,699 --> 00:10:43,839
<font color="#CCCCCC">return</font><font color="#E5E5E5"> deploy or if the</font><font color="#CCCCCC"> check sum</font><font color="#E5E5E5"> is</font>

242
00:10:42,309 --> 00:10:46,779
different<font color="#E5E5E5"> or things like that</font><font color="#CCCCCC"> and then</font>

243
00:10:43,839 --> 00:10:49,149
we see that<font color="#E5E5E5"> deploy was returned and we</font>

244
00:10:46,779 --> 00:10:53,470
rerun that that command and<font color="#E5E5E5"> then it</font>

245
00:10:49,149 --> 00:10:55,179
would copy it<font color="#CCCCCC"> over and run the shim</font>

246
00:10:53,470 --> 00:10:57,309
command just<font color="#E5E5E5"> does a couple of things it</font>

247
00:10:55,179 --> 00:10:59,559
determines you can actually<font color="#CCCCCC"> specify</font>

248
00:10:57,309 --> 00:11:03,910
whether you<font color="#E5E5E5"> need a TTY or not when using</font>

249
00:10:59,559 --> 00:11:07,480
saw<font color="#E5E5E5"> SSH</font><font color="#CCCCCC"> and the roster config if it</font>

250
00:11:03,910 --> 00:11:11,860
needs a TTY<font color="#E5E5E5"> it just runs our virtual</font>

251
00:11:07,480 --> 00:11:15,040
terminal within<font color="#E5E5E5"> the salt</font><font color="#CCCCCC"> Cole</font><font color="#E5E5E5"> salt code</font>

252
00:11:11,860 --> 00:11:16,260
if you're not using<font color="#E5E5E5"> or if you are using</font>

253
00:11:15,040 --> 00:11:20,380
a TTY

254
00:11:16,260 --> 00:11:22,120
sorry if not and then if you<font color="#E5E5E5"> are using a</font>

255
00:11:20,380 --> 00:11:23,770
<font color="#E5E5E5">TTY it needs to actually copy over that</font>

256
00:11:22,120 --> 00:11:30,279
shim because you need to use<font color="#CCCCCC"> that TTY</font>

257
00:11:23,770 --> 00:11:32,529
<font color="#CCCCCC">and it runs it from there</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so this</font>

258
00:11:30,279 --> 00:11:36,100
is<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> magic that's going on is in</font>

259
00:11:32,529 --> 00:11:38,560
that shim file<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to determine</font>

260
00:11:36,100 --> 00:11:40,060
<font color="#E5E5E5">where</font><font color="#CCCCCC"> the thin path would</font><font color="#E5E5E5"> be that we're</font>

261
00:11:38,560 --> 00:11:41,890
going to<font color="#E5E5E5"> do a bunch of checks there's</font>

262
00:11:40,060 --> 00:11:43,930
more checks than I have shown here but

263
00:11:41,890 --> 00:11:46,630
we do check the<font color="#E5E5E5"> checks on the version</font>

264
00:11:43,930 --> 00:11:48,099
<font color="#CCCCCC">and all those things</font><font color="#E5E5E5"> and then obviously</font>

265
00:11:46,630 --> 00:11:50,320
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> see if it's different we're</font>

266
00:11:48,100 --> 00:11:53,290
gonna say we<font color="#E5E5E5"> need a deployment and then</font>

267
00:11:50,320 --> 00:11:56,410
<font color="#E5E5E5">we're gonna</font><font color="#CCCCCC"> untie that that noose in and</font>

268
00:11:53,290 --> 00:11:58,480
then as you can<font color="#E5E5E5"> see here we've</font><font color="#CCCCCC"> got this</font>

269
00:11:56,410 --> 00:12:00,149
salt call command and<font color="#CCCCCC"> that is the</font><font color="#E5E5E5"> actual</font>

270
00:11:58,480 --> 00:12:02,860
command<font color="#E5E5E5"> that we're going to be running</font>

271
00:12:00,149 --> 00:12:05,500
alongside that test stop<font color="#E5E5E5"> ping that we</font>

272
00:12:02,860 --> 00:12:11,350
pass to<font color="#CCCCCC"> it and then we</font><font color="#E5E5E5"> just use</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> sub</font>

273
00:12:05,500 --> 00:12:13,360
<font color="#E5E5E5">process module to run that so all of</font>

274
00:12:11,350 --> 00:12:17,760
that<font color="#E5E5E5"> discussed is just talking</font><font color="#CCCCCC"> and</font>

275
00:12:13,360 --> 00:12:20,170
referring to<font color="#CCCCCC"> salts remote execution</font>

276
00:12:17,760 --> 00:12:22,630
<font color="#E5E5E5">capabilities obviously there's a lot</font>

277
00:12:20,170 --> 00:12:24,819
more<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> do with insult so one of</font>

278
00:12:22,630 --> 00:12:27,820
the really other popular aspects of salt

279
00:12:24,820 --> 00:12:30,790
is the state system and this is where we

280
00:12:27,820 --> 00:12:35,740
get<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of our idempotent behavior so</font>

281
00:12:30,790 --> 00:12:37,209
we refer<font color="#CCCCCC"> to these SLS files</font><font color="#E5E5E5"> is where you</font>

282
00:12:35,740 --> 00:12:41,140
would<font color="#E5E5E5"> define everything that you would</font>

283
00:12:37,209 --> 00:12:44,140
<font color="#E5E5E5">want your machine</font><font color="#CCCCCC"> to have to be in</font><font color="#E5E5E5"> that</font>

284
00:12:41,140 --> 00:12:47,110
certain<font color="#CCCCCC"> state</font><font color="#E5E5E5"> and this is just a simple</font>

285
00:12:44,140 --> 00:12:48,939
example<font color="#E5E5E5"> this one's using</font><font color="#CCCCCC"> yam only there</font>

286
00:12:47,110 --> 00:12:51,160
are multiple other renders that<font color="#CCCCCC"> you can</font>

287
00:12:48,940 --> 00:12:54,459
use<font color="#CCCCCC"> within salt but yeah Mille is one of</font>

288
00:12:51,160 --> 00:12:57,579
the defaults<font color="#E5E5E5"> and this is a pretty simple</font>

289
00:12:54,459 --> 00:13:01,029
<font color="#CCCCCC">example we're just managing a file</font><font color="#E5E5E5"> and</font>

290
00:12:57,579 --> 00:13:05,529
we want to<font color="#CCCCCC"> state or we want to put it</font>

291
00:13:01,029 --> 00:13:09,790
worked into<font color="#E5E5E5"> that file so as you can see</font>

292
00:13:05,529 --> 00:13:11,380
<font color="#E5E5E5">we run it with salt as</font><font color="#CCCCCC"> the sage we run</font>

293
00:13:09,790 --> 00:13:14,680
the state s list which is where I go<font color="#E5E5E5"> to</font>

294
00:13:11,380 --> 00:13:17,170
run that<font color="#CCCCCC"> s</font><font color="#E5E5E5"> LS file</font><font color="#CCCCCC"> and it adds that new</font>

295
00:13:14,680 --> 00:13:19,390
file<font color="#E5E5E5"> and shows that</font><font color="#CCCCCC"> a new change has</font>

296
00:13:17,170 --> 00:13:22,000
occurred now if you were<font color="#E5E5E5"> to run this</font>

297
00:13:19,390 --> 00:13:23,470
again as shown<font color="#E5E5E5"> here because it's item</font>

298
00:13:22,000 --> 00:13:23,950
potent behavior it doesn't<font color="#CCCCCC"> try to change</font>

299
00:13:23,470 --> 00:13:25,840
<font color="#CCCCCC">any</font>

300
00:13:23,950 --> 00:13:31,120
thing and it just<font color="#CCCCCC"> says it's in</font><font color="#E5E5E5"> the</font>

301
00:13:25,840 --> 00:13:33,130
<font color="#E5E5E5">correct</font><font color="#CCCCCC"> state so we have the execution</font>

302
00:13:31,120 --> 00:13:35,020
<font color="#E5E5E5">modules but we now have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> state system</font>

303
00:13:33,130 --> 00:13:37,390
and the state system requires a little

304
00:13:35,020 --> 00:13:38,740
<font color="#CCCCCC">bit more because we have those SLS files</font>

305
00:13:37,390 --> 00:13:41,350
so we<font color="#E5E5E5"> need to have some sort of</font>

306
00:13:38,740 --> 00:13:43,840
deterministic<font color="#E5E5E5"> behavior to figure out</font>

307
00:13:41,350 --> 00:13:45,880
what files we also need to<font color="#E5E5E5"> include and</font>

308
00:13:43,840 --> 00:13:48,970
copy over<font color="#CCCCCC"> to be able to run the state</font>

309
00:13:45,880 --> 00:13:51,490
command<font color="#CCCCCC"> and what happens is it's the</font>

310
00:13:48,970 --> 00:13:53,520
<font color="#E5E5E5">same as the execution module except for</font>

311
00:13:51,490 --> 00:13:57,310
when it<font color="#E5E5E5"> comes to that command block</font>

312
00:13:53,520 --> 00:14:00,100
<font color="#CCCCCC">command function we we run this one run</font>

313
00:13:57,310 --> 00:14:04,689
<font color="#E5E5E5">W funks and it's essentially stands for</font>

314
00:14:00,100 --> 00:14:06,820
wrapper functions<font color="#CCCCCC"> we have a bunch of or</font>

315
00:14:04,690 --> 00:14:08,440
a couple<font color="#CCCCCC"> of wrapper modules within</font>

316
00:14:06,820 --> 00:14:12,010
<font color="#E5E5E5">saltless</font><font color="#CCCCCC"> SH and they're all displayed</font>

317
00:14:08,440 --> 00:14:14,110
right<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the things that</font>

318
00:14:12,010 --> 00:14:16,600
makes it<font color="#E5E5E5"> a bit tricky with using</font>

319
00:14:14,110 --> 00:14:18,070
<font color="#CCCCCC">saltless SH is because we've had</font><font color="#E5E5E5"> to</font>

320
00:14:16,600 --> 00:14:20,080
<font color="#E5E5E5">create these wrapper modules and you'll</font>

321
00:14:18,070 --> 00:14:23,770
see what we've done differently in the

322
00:14:20,080 --> 00:14:26,530
state by example<font color="#CCCCCC"> it gets a little</font><font color="#E5E5E5"> bit</font>

323
00:14:23,770 --> 00:14:28,900
hard to<font color="#E5E5E5"> manage both of those files</font>

324
00:14:26,530 --> 00:14:31,300
<font color="#E5E5E5">because with insults code we have a</font>

325
00:14:28,900 --> 00:14:34,060
state dot<font color="#E5E5E5"> hi and salt as a sage we have</font>

326
00:14:31,300 --> 00:14:36,640
a salt<font color="#CCCCCC"> state pice so sometimes it</font>

327
00:14:34,060 --> 00:14:38,619
becomes a<font color="#E5E5E5"> little bit difficult to manage</font>

328
00:14:36,640 --> 00:14:40,689
<font color="#E5E5E5">both of those files and make sure if the</font>

329
00:14:38,620 --> 00:14:42,310
feature<font color="#E5E5E5"> is added</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> one that we have to</font>

330
00:14:40,690 --> 00:14:44,500
add it<font color="#CCCCCC"> to others</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> is one problem</font>

331
00:14:42,310 --> 00:14:49,329
<font color="#CCCCCC">that we've</font><font color="#E5E5E5"> run into with this current</font>

332
00:14:44,500 --> 00:14:51,130
<font color="#CCCCCC">setup so this function will</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> up all</font>

333
00:14:49,330 --> 00:14:52,900
the pillar and<font color="#E5E5E5"> grains and</font><font color="#CCCCCC"> within salt</font>

334
00:14:51,130 --> 00:14:55,780
pillar and<font color="#CCCCCC"> grains is just a lot</font><font color="#E5E5E5"> of data</font>

335
00:14:52,900 --> 00:14:57,579
<font color="#E5E5E5">pillar being usually people use that for</font>

336
00:14:55,780 --> 00:15:00,430
more<font color="#E5E5E5"> of the sensitive information and</font>

337
00:14:57,580 --> 00:15:02,140
it's stored on the master and grains

338
00:15:00,430 --> 00:15:06,069
being<font color="#E5E5E5"> information about the minions</font>

339
00:15:02,140 --> 00:15:09,189
stored on the minion<font color="#CCCCCC"> and any other</font><font color="#E5E5E5"> ops</font>

340
00:15:06,070 --> 00:15:12,280
that<font color="#E5E5E5"> we need to be able to add to</font><font color="#CCCCCC"> run</font>

341
00:15:09,190 --> 00:15:14,470
these state files<font color="#E5E5E5"> then we call all</font><font color="#CCCCCC"> of</font>

342
00:15:12,280 --> 00:15:16,600
those wrapper functions<font color="#E5E5E5"> and in this</font>

343
00:15:14,470 --> 00:15:21,130
<font color="#E5E5E5">example we're specifically be getting</font>

344
00:15:16,600 --> 00:15:24,100
called the state wrapper function<font color="#E5E5E5"> so as</font>

345
00:15:21,130 --> 00:15:26,020
you can<font color="#CCCCCC"> see that we're doing here is</font>

346
00:15:24,100 --> 00:15:27,640
we're grabbing<font color="#E5E5E5"> all the data that we're</font>

347
00:15:26,020 --> 00:15:29,949
going<font color="#CCCCCC"> to need for the call we're</font>

348
00:15:27,640 --> 00:15:32,380
initializing<font color="#E5E5E5"> the function wrapper and</font>

349
00:15:29,950 --> 00:15:35,240
then we eventually<font color="#E5E5E5"> we're just going</font><font color="#CCCCCC"> to</font>

350
00:15:32,380 --> 00:15:40,250
run<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> return the JSON</font>

351
00:15:35,240 --> 00:15:42,350
of the<font color="#E5E5E5"> return and this is how we're</font>

352
00:15:40,250 --> 00:15:44,899
doing<font color="#E5E5E5"> it in the</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> pipe files</font><font color="#E5E5E5"> so</font>

353
00:15:42,350 --> 00:15:47,060
in a normal<font color="#E5E5E5"> SLS file we do not have all</font>

354
00:15:44,899 --> 00:15:48,920
<font color="#CCCCCC">these extra</font><font color="#E5E5E5"> steps because what these</font>

355
00:15:47,060 --> 00:15:51,589
extra steps<font color="#E5E5E5"> are doing for salt as</font><font color="#CCCCCC"> the</font>

356
00:15:48,920 --> 00:15:54,500
<font color="#E5E5E5">sage is as you can</font><font color="#CCCCCC"> see we're preparing</font>

357
00:15:51,589 --> 00:15:57,860
the tar so within the tar we determine

358
00:15:54,500 --> 00:16:01,670
what SLS files need to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> added one of</font>

359
00:15:57,860 --> 00:16:04,160
<font color="#CCCCCC">the things that is a bit tricky</font><font color="#E5E5E5"> is when</font>

360
00:16:01,670 --> 00:16:07,490
<font color="#CCCCCC">people use includes</font>

361
00:16:04,160 --> 00:16:09,170
<font color="#E5E5E5">in their file</font><font color="#CCCCCC"> you actually</font><font color="#E5E5E5"> have to</font>

362
00:16:07,490 --> 00:16:11,060
specify<font color="#CCCCCC"> those separately in a</font>

363
00:16:09,170 --> 00:16:14,270
configuration<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> is one thing</font><font color="#E5E5E5"> I</font>

364
00:16:11,060 --> 00:16:17,449
<font color="#CCCCCC">think could</font><font color="#E5E5E5"> be improved</font><font color="#CCCCCC"> upon as well but</font>

365
00:16:14,270 --> 00:16:20,300
<font color="#E5E5E5">yeah so that prep Transtar that's going</font>

366
00:16:17,450 --> 00:16:22,850
to do<font color="#E5E5E5"> all that magic there and then</font>

367
00:16:20,300 --> 00:16:26,479
we're going<font color="#E5E5E5"> to sum up</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can get</font>

368
00:16:22,850 --> 00:16:29,300
it half and then we're going<font color="#E5E5E5"> to do the</font>

369
00:16:26,480 --> 00:16:31,550
same thing we<font color="#E5E5E5"> did before</font><font color="#CCCCCC"> initially it's</font>

370
00:16:29,300 --> 00:16:33,290
a single class<font color="#E5E5E5"> send over that tar and</font>

371
00:16:31,550 --> 00:16:41,149
then we'll run that command block again

372
00:16:33,290 --> 00:16:43,490
and run<font color="#E5E5E5"> essentially that</font><font color="#CCCCCC"> same logic so</font>

373
00:16:41,149 --> 00:16:45,829
now that we've shown<font color="#CCCCCC"> you what's going on</font>

374
00:16:43,490 --> 00:16:48,260
underneath you'll probably<font color="#E5E5E5"> not remember</font>

375
00:16:45,829 --> 00:16:51,109
all of<font color="#CCCCCC"> that code so what are some of the</font>

376
00:16:48,260 --> 00:16:54,230
key<font color="#E5E5E5"> architectural decisions to summarize</font>

377
00:16:51,110 --> 00:16:56,930
<font color="#CCCCCC">all that one thing that's</font><font color="#E5E5E5"> important</font><font color="#CCCCCC"> to</font>

378
00:16:54,230 --> 00:16:59,779
know<font color="#CCCCCC"> is salt was not</font><font color="#E5E5E5"> modified to add</font>

379
00:16:56,930 --> 00:17:02,569
salt<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a sage salt</font><font color="#CCCCCC"> SSH was added on top</font>

380
00:16:59,779 --> 00:17:04,339
of it and that's<font color="#E5E5E5"> where you can see</font>

381
00:17:02,570 --> 00:17:05,929
things like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> wrapper functions and</font>

382
00:17:04,339 --> 00:17:10,698
things<font color="#E5E5E5"> like that where</font><font color="#CCCCCC"> we didn't want</font><font color="#E5E5E5"> to</font>

383
00:17:05,929 --> 00:17:12,980
edit salt<font color="#CCCCCC"> we use the</font><font color="#E5E5E5"> tarball</font><font color="#CCCCCC"> or retard</font>

384
00:17:10,699 --> 00:17:14,809
everything up<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the master we</font>

385
00:17:12,980 --> 00:17:16,939
determined what needs to be<font color="#E5E5E5"> included on</font>

386
00:17:14,809 --> 00:17:20,689
<font color="#CCCCCC">that and then we send it</font><font color="#E5E5E5"> over and run it</font>

387
00:17:16,939 --> 00:17:23,480
on<font color="#E5E5E5"> the minion</font><font color="#CCCCCC"> as as shown before we use</font>

388
00:17:20,689 --> 00:17:25,579
that salt<font color="#E5E5E5"> call so salt call - local</font>

389
00:17:23,480 --> 00:17:28,069
<font color="#E5E5E5">that's what</font><font color="#CCCCCC"> provides us with the</font>

390
00:17:25,579 --> 00:17:29,960
unidirectional communication and we

391
00:17:28,069 --> 00:17:31,760
won't need<font color="#E5E5E5"> to call out back to the</font>

392
00:17:29,960 --> 00:17:33,470
master while the minion is running it's

393
00:17:31,760 --> 00:17:35,890
able<font color="#E5E5E5"> to run everything it needs right</font>

394
00:17:33,470 --> 00:17:38,780
there has all the information<font color="#CCCCCC"> it needs</font>

395
00:17:35,890 --> 00:17:41,330
<font color="#E5E5E5">and then we use these wrapper functions</font>

396
00:17:38,780 --> 00:17:44,660
where it's we're trying to provide the

397
00:17:41,330 --> 00:17:47,678
same capabilities that salt<font color="#E5E5E5"> has but add</font>

398
00:17:44,660 --> 00:17:47,679
<font color="#E5E5E5">it to salt as</font><font color="#CCCCCC"> the sea</font>

399
00:17:50,049 --> 00:17:54,668
so what were some<font color="#CCCCCC"> of the challenges when</font>

400
00:17:51,669 --> 00:17:55,260
doing this<font color="#CCCCCC"> I've mentioned a lot of</font><font color="#E5E5E5"> them</font>

401
00:17:54,669 --> 00:17:57,760
<font color="#E5E5E5">already</font>

402
00:17:55,260 --> 00:18:00,520
obviously we lose some<font color="#CCCCCC"> of the</font>

403
00:17:57,760 --> 00:18:02,559
bi-directional<font color="#CCCCCC"> where we you</font><font color="#E5E5E5"> know with</font>

404
00:18:00,520 --> 00:18:05,200
<font color="#E5E5E5">SSH we only have unidirectional so that</font>

405
00:18:02,559 --> 00:18:08,950
was a challenge<font color="#CCCCCC"> the wrapper challenges</font>

406
00:18:05,200 --> 00:18:11,080
are functions<font color="#E5E5E5"> as I spoke before is a bit</font>

407
00:18:08,950 --> 00:18:14,200
<font color="#CCCCCC">difficult in terms</font><font color="#E5E5E5"> of managing the code</font>

408
00:18:11,080 --> 00:18:18,010
and<font color="#E5E5E5"> a lot of times when we</font><font color="#CCCCCC"> see bugs with</font>

409
00:18:14,200 --> 00:18:19,990
insults<font color="#CCCCCC"> h's because we haven't we don't</font>

410
00:18:18,010 --> 00:18:23,230
<font color="#CCCCCC">have all</font><font color="#E5E5E5"> the correct</font><font color="#CCCCCC"> ops that</font><font color="#E5E5E5"> we need an</font>

411
00:18:19,990 --> 00:18:25,900
ops is just a lot<font color="#E5E5E5"> of the configs that we</font>

412
00:18:23,230 --> 00:18:27,309
would need to<font color="#CCCCCC"> run assault SSH command</font><font color="#E5E5E5"> so</font>

413
00:18:25,900 --> 00:18:29,559
that is one<font color="#E5E5E5"> of the challenges</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

414
00:18:27,309 --> 00:18:32,260
<font color="#CCCCCC">think we could do a bit better</font><font color="#E5E5E5"> on and</font>

415
00:18:29,559 --> 00:18:33,879
kind<font color="#E5E5E5"> of make</font><font color="#CCCCCC"> sure we have everything we</font>

416
00:18:32,260 --> 00:18:36,250
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to run</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> salt and</font>

417
00:18:33,880 --> 00:18:41,860
salt as a sage so there is more<font color="#E5E5E5"> parity</font>

418
00:18:36,250 --> 00:18:43,480
between the two<font color="#CCCCCC"> okay so what are our</font>

419
00:18:41,860 --> 00:18:45,729
plans for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> future</font>

420
00:18:43,480 --> 00:18:47,860
we actually<font color="#E5E5E5"> are initially we're</font>

421
00:18:45,730 --> 00:18:49,600
initially talking<font color="#CCCCCC"> right now we</font><font color="#E5E5E5"> we don't</font>

422
00:18:47,860 --> 00:18:52,840
<font color="#CCCCCC">have any set plans but we do want to</font>

423
00:18:49,600 --> 00:18:55,439
<font color="#E5E5E5">react context</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> as a</font><font color="#CCCCCC"> sage</font><font color="#E5E5E5"> and fix some</font>

424
00:18:52,840 --> 00:18:58,600
of<font color="#E5E5E5"> these issues that we have</font><font color="#CCCCCC"> presented</font>

425
00:18:55,440 --> 00:19:01,270
some of<font color="#CCCCCC"> the ideas that</font><font color="#E5E5E5"> we've been</font>

426
00:18:58,600 --> 00:19:05,320
<font color="#E5E5E5">thinking on is trying to remove that</font>

427
00:19:01,270 --> 00:19:07,418
Python dependency<font color="#E5E5E5"> and how you do that</font>

428
00:19:05,320 --> 00:19:12,720
<font color="#E5E5E5">you know we have I've had some ideas of</font>

429
00:19:07,419 --> 00:19:12,720
just including the minimal Python

430
00:19:13,049 --> 00:19:18,370
executable within the tarball<font color="#E5E5E5"> another</font>

431
00:19:16,990 --> 00:19:20,530
reason<font color="#E5E5E5"> I think this will be</font><font color="#CCCCCC"> beneficial</font>

432
00:19:18,370 --> 00:19:25,270
is eventually<font color="#E5E5E5"> Python 2 is going to go</font>

433
00:19:20,530 --> 00:19:27,428
away<font color="#CCCCCC"> and obviously</font><font color="#E5E5E5"> users are still going</font>

434
00:19:25,270 --> 00:19:28,990
<font color="#E5E5E5">to be using machines that have Python</font><font color="#CCCCCC"> 2</font>

435
00:19:27,429 --> 00:19:30,640
on it so if we<font color="#E5E5E5"> removed the Python</font>

436
00:19:28,990 --> 00:19:33,070
dependency and we include it in there

437
00:19:30,640 --> 00:19:35,919
<font color="#E5E5E5">that won't be an issue</font>

438
00:19:33,070 --> 00:19:38,939
if we do go<font color="#CCCCCC"> python 3 we</font><font color="#E5E5E5"> can use some of</font>

439
00:19:35,919 --> 00:19:41,590
the<font color="#E5E5E5"> capabilities of async</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> and</font>

440
00:19:38,940 --> 00:19:43,330
hopefully we can resolve some<font color="#CCCCCC"> of the</font>

441
00:19:41,590 --> 00:19:48,178
issues<font color="#CCCCCC"> that we stated</font><font color="#E5E5E5"> such as the</font>

442
00:19:43,330 --> 00:19:48,178
wrapper functions<font color="#E5E5E5"> and so forth</font>

443
00:19:49,740 --> 00:19:54,770
all right does anybody have<font color="#CCCCCC"> questions</font>

444
00:19:55,760 --> 00:20:12,179
yeah I don't<font color="#E5E5E5"> know how to turn the light</font>

445
00:19:58,020 --> 00:20:22,020
on now that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see me does anybody</font>

446
00:20:12,179 --> 00:20:24,120
have<font color="#E5E5E5"> any questions yeah yeah essentially</font>

447
00:20:22,020 --> 00:20:27,000
<font color="#CCCCCC">you don't</font><font color="#E5E5E5"> have that agent</font><font color="#CCCCCC"> that is the</font>

448
00:20:24,120 --> 00:20:29,729
the benefit that<font color="#CCCCCC"> I can see over-salt</font>

449
00:20:27,000 --> 00:20:31,679
<font color="#E5E5E5">it's it is slower because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know you</font>

450
00:20:29,730 --> 00:20:33,029
know obviously using<font color="#E5E5E5"> SSH but that is the</font>

451
00:20:31,679 --> 00:20:42,510
benefit you don't have to install<font color="#E5E5E5"> the</font>

452
00:20:33,029 --> 00:21:02,250
agent<font color="#E5E5E5"> huh sorry okay go ahead</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> go</font>

453
00:20:42,510 --> 00:21:04,020
again I haven't personally done<font color="#CCCCCC"> though</font>

454
00:21:02,250 --> 00:21:07,049
do you have you done<font color="#E5E5E5"> I know you've</font><font color="#CCCCCC"> done</font>

455
00:21:04,020 --> 00:21:11,720
a<font color="#E5E5E5"> lot of work with that</font><font color="#CCCCCC"> have you</font><font color="#E5E5E5"> done</font>

456
00:21:07,049 --> 00:21:14,720
any performance testing<font color="#E5E5E5"> between</font><font color="#CCCCCC"> the two</font>

457
00:21:11,720 --> 00:21:14,720
<font color="#E5E5E5">okay</font>

458
00:21:16,350 --> 00:21:19,449
[Music]

459
00:21:41,330 --> 00:21:46,289
there's just<font color="#E5E5E5"> the salt call and then yeah</font>

460
00:21:44,039 --> 00:21:54,269
although<font color="#E5E5E5"> their salt dependencies you</font>

461
00:21:46,289 --> 00:21:57,149
<font color="#E5E5E5">need the system doesn't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> salt salt</font>

462
00:21:54,269 --> 00:21:59,909
on<font color="#CCCCCC"> it</font><font color="#E5E5E5"> that's what it does it copies over</font>

463
00:21:57,149 --> 00:22:01,469
whatever salt<font color="#E5E5E5"> the binary said I would</font>

464
00:21:59,909 --> 00:22:03,929
<font color="#E5E5E5">need and all</font><font color="#CCCCCC"> the modules</font><font color="#E5E5E5"> within it yeah</font>

465
00:22:01,470 --> 00:22:06,509
<font color="#E5E5E5">this is simply you know sensibilities</font>

466
00:22:03,929 --> 00:22:08,159
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> I don't know I don't know</font><font color="#CCCCCC"> Bellinis</font>

467
00:22:06,509 --> 00:22:14,749
<font color="#CCCCCC">here</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> connection after that it could</font>

468
00:22:08,159 --> 00:22:14,749
be some boundaries<font color="#E5E5E5"> mmm execute okay</font>

469
00:22:18,779 --> 00:22:26,789
<font color="#E5E5E5">windows we do have a window solution it</font>

470
00:22:21,779 --> 00:22:29,779
is<font color="#E5E5E5"> enterprise only though yeah yep uses</font>

471
00:22:26,789 --> 00:22:29,779
winterim yep

472
00:22:30,830 --> 00:22:39,250
I should probably repeat the question<font color="#E5E5E5"> -</font>

473
00:22:43,630 --> 00:22:47,230
it's been a long day

474
00:23:03,830 --> 00:23:09,530
having as<font color="#E5E5E5"> salt as H having</font><font color="#CCCCCC"> the same</font>

475
00:23:07,920 --> 00:23:11,760
functionality<font color="#CCCCCC"> as ansible</font>

476
00:23:09,530 --> 00:23:14,550
unless you can explain<font color="#CCCCCC"> to me how I can</font>

477
00:23:11,760 --> 00:23:16,770
talk to<font color="#CCCCCC"> an</font><font color="#E5E5E5"> let's say a dump device which</font>

478
00:23:14,550 --> 00:23:29,190
I can do that with<font color="#CCCCCC"> ansible which is much</font>

479
00:23:16,770 --> 00:23:32,940
much like using expect<font color="#E5E5E5"> so I'm interested</font>

480
00:23:29,190 --> 00:23:35,460
<font color="#E5E5E5">in functionality of I'm currently also</font>

481
00:23:32,940 --> 00:23:37,860
ansible user but I missed interested<font color="#E5E5E5"> in</font>

482
00:23:35,460 --> 00:23:40,890
finality<font color="#CCCCCC"> in talking to</font><font color="#E5E5E5"> let's say dump</font>

483
00:23:37,860 --> 00:23:44,070
devices which have<font color="#CCCCCC"> nothing on it</font><font color="#E5E5E5"> where I</font>

484
00:23:40,890 --> 00:23:45,420
need<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like they expect which</font><font color="#E5E5E5"> I</font>

485
00:23:44,070 --> 00:23:56,129
can do with the<font color="#CCCCCC"> answer but I don't know</font>

486
00:23:45,420 --> 00:23:58,860
how to do it with salt Oh<font color="#E5E5E5"> like network</font>

487
00:23:56,130 --> 00:24:02,000
switches<font color="#E5E5E5"> things like that oh yeah so we</font>

488
00:23:58,860 --> 00:24:04,800
we<font color="#E5E5E5"> have what's called salt proxy and</font>

489
00:24:02,000 --> 00:24:06,930
that's how we that's<font color="#E5E5E5"> our</font><font color="#CCCCCC"> solution for</font>

490
00:24:04,800 --> 00:24:08,940
<font color="#E5E5E5">not even</font><font color="#CCCCCC"> having to have Python</font><font color="#E5E5E5"> we</font>

491
00:24:06,930 --> 00:24:10,830
actually have a solution<font color="#E5E5E5"> without salt</font>

492
00:24:08,940 --> 00:24:12,660
salt<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> H and</font><font color="#CCCCCC"> it's salt proxy I</font><font color="#E5E5E5"> I</font>

493
00:24:10,830 --> 00:24:14,730
<font color="#E5E5E5">don't know what's going on underneath</font>

494
00:24:12,660 --> 00:24:17,550
but a lot of<font color="#E5E5E5"> our network modules and all</font>

495
00:24:14,730 --> 00:24:31,380
of that<font color="#E5E5E5"> use heavily used salt proxy so</font>

496
00:24:17,550 --> 00:24:33,500
you'd<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at that</font><font color="#CCCCCC"> yeah I don't</font>

497
00:24:31,380 --> 00:24:37,140
<font color="#E5E5E5">use salt so maybe the question</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

498
00:24:33,500 --> 00:24:38,910
exactly<font color="#CCCCCC"> appropriate but I was thinking</font>

499
00:24:37,140 --> 00:24:41,400
<font color="#E5E5E5">about the where do you store the</font>

500
00:24:38,910 --> 00:24:43,440
configuration about the machines<font color="#E5E5E5"> when</font>

501
00:24:41,400 --> 00:24:46,980
you don't<font color="#E5E5E5"> have a model like minions and</font>

502
00:24:43,440 --> 00:24:48,900
servers<font color="#E5E5E5"> where do you store the your</font>

503
00:24:46,980 --> 00:24:51,060
assets the information about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> machine</font>

504
00:24:48,900 --> 00:24:56,910
you will connect to they are they are

505
00:24:51,060 --> 00:25:00,419
described on on client<font color="#CCCCCC"> let me say if you</font>

506
00:24:56,910 --> 00:25:02,430
use<font color="#CCCCCC"> a password</font><font color="#E5E5E5"> or a certificate or which</font>

507
00:25:00,420 --> 00:25:07,410
is<font color="#CCCCCC"> the user you use to connect to the</font>

508
00:25:02,430 --> 00:25:10,050
host<font color="#CCCCCC"> do you have a different yama or</font>

509
00:25:07,410 --> 00:25:14,850
<font color="#CCCCCC">Gershon files</font><font color="#E5E5E5"> one for each client which</font>

510
00:25:10,050 --> 00:25:16,889
uses ssssh<font color="#CCCCCC"> I think what you're asking is</font>

511
00:25:14,850 --> 00:25:21,870
where's the<font color="#CCCCCC"> information stored about the</font>

512
00:25:16,890 --> 00:25:23,670
minion<font color="#E5E5E5"> yes because</font><font color="#CCCCCC"> it just to complete</font>

513
00:25:21,870 --> 00:25:25,320
the question because I was<font color="#E5E5E5"> thinking</font>

514
00:25:23,670 --> 00:25:27,120
about when you have a server<font color="#E5E5E5"> the</font>

515
00:25:25,320 --> 00:25:29,550
information about the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> you're</font>

516
00:25:27,120 --> 00:25:32,310
managing<font color="#E5E5E5"> with salt is in</font><font color="#CCCCCC"> a way</font>

517
00:25:29,550 --> 00:25:35,280
centralized on the server and<font color="#E5E5E5"> you use</font>

518
00:25:32,310 --> 00:25:38,610
this kind of approach<font color="#E5E5E5"> those information</font>

519
00:25:35,280 --> 00:25:40,560
are spread over<font color="#E5E5E5"> the clients</font><font color="#CCCCCC"> okay so I</font>

520
00:25:38,610 --> 00:25:43,469
think what<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> asking is and what</font>

521
00:25:40,560 --> 00:25:45,710
you're getting<font color="#CCCCCC"> at is we have a concept</font>

522
00:25:43,470 --> 00:25:49,350
of<font color="#CCCCCC"> what we call pillar and grains and</font>

523
00:25:45,710 --> 00:25:52,020
pillar is what you would specify<font color="#E5E5E5"> on the</font>

524
00:25:49,350 --> 00:25:53,939
master and a lot<font color="#E5E5E5"> of people use these for</font>

525
00:25:52,020 --> 00:25:56,370
<font color="#E5E5E5">like passwords and yeah it is</font><font color="#CCCCCC"> just like</font>

526
00:25:53,940 --> 00:26:00,720
a<font color="#CCCCCC"> llamó file you can use whatever render</font>

527
00:25:56,370 --> 00:26:03,389
the grains is initialized<font color="#E5E5E5"> on normally in</font>

528
00:26:00,720 --> 00:26:05,610
the salt<font color="#E5E5E5"> master salt minion it's it's</font>

529
00:26:03,390 --> 00:26:06,870
initialized<font color="#E5E5E5"> on the minion and it</font>

530
00:26:05,610 --> 00:26:09,439
automatically determines all that

531
00:26:06,870 --> 00:26:11,489
information like<font color="#E5E5E5"> operating system</font>

532
00:26:09,440 --> 00:26:12,810
hostname things like that so it's

533
00:26:11,490 --> 00:26:15,860
automatically determining<font color="#E5E5E5"> that and</font>

534
00:26:12,810 --> 00:26:19,139
that's what grains are you also have a

535
00:26:15,860 --> 00:26:21,300
concept of the<font color="#E5E5E5"> salt mine</font><font color="#CCCCCC"> and the salt</font>

536
00:26:19,140 --> 00:26:23,160
mine will give you the<font color="#E5E5E5"> ability to query</font>

537
00:26:21,300 --> 00:26:26,850
all these minions<font color="#E5E5E5"> and cache that</font>

538
00:26:23,160 --> 00:26:28,830
information on the master this is<font color="#CCCCCC"> the</font>

539
00:26:26,850 --> 00:26:33,990
<font color="#CCCCCC">pattern</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> you have the minions</font><font color="#E5E5E5"> on</font>

540
00:26:28,830 --> 00:26:37,980
your on your<font color="#CCCCCC"> loops for example for</font>

541
00:26:33,990 --> 00:26:39,600
<font color="#CCCCCC">example</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> ok so where you're</font>

542
00:26:37,980 --> 00:26:42,000
specifying<font color="#E5E5E5"> where your what your hosts</font>

543
00:26:39,600 --> 00:26:44,100
are and what yeah it's just the roster

544
00:26:42,000 --> 00:26:45,690
is what you<font color="#E5E5E5"> would use because</font><font color="#CCCCCC"> I was</font>

545
00:26:44,100 --> 00:26:48,409
<font color="#E5E5E5">thinking about the</font><font color="#CCCCCC"> adoption of</font><font color="#E5E5E5"> this kind</font>

546
00:26:45,690 --> 00:26:52,430
of pattern when<font color="#CCCCCC"> you add for example your</font>

547
00:26:48,410 --> 00:26:55,500
operation<font color="#CCCCCC"> Department they are</font><font color="#E5E5E5"> 10 20</font>

548
00:26:52,430 --> 00:26:57,300
<font color="#E5E5E5">single clients how do you are</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> ensure</font>

549
00:26:55,500 --> 00:27:02,090
that the configuration<font color="#CCCCCC"> the gap is up to</font>

550
00:26:57,300 --> 00:27:06,409
<font color="#CCCCCC">date</font><font color="#E5E5E5"> and and so on like the ansible</font>

551
00:27:02,090 --> 00:27:16,699
inventory you

552
00:27:06,410 --> 00:27:18,830
yes okay yeah<font color="#E5E5E5"> okay</font>

553
00:27:16,700 --> 00:27:22,190
and yet you need to distribute<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sync</font>

554
00:27:18,830 --> 00:27:23,810
this<font color="#CCCCCC"> information</font><font color="#E5E5E5"> distributed</font><font color="#CCCCCC"> see the</font>

555
00:27:22,190 --> 00:27:25,430
roster file<font color="#CCCCCC"> I mean it's just</font><font color="#E5E5E5"> a flat file</font>

556
00:27:23,810 --> 00:27:27,139
or you<font color="#CCCCCC"> can use a different sort of</font>

557
00:27:25,430 --> 00:27:30,020
roster<font color="#E5E5E5"> inquiry that information</font>

558
00:27:27,140 --> 00:27:32,930
<font color="#E5E5E5">differently but by</font><font color="#CCCCCC"> default it's just the</font>

559
00:27:30,020 --> 00:27:35,780
flat file<font color="#E5E5E5"> yes okay it could be can</font><font color="#CCCCCC"> it be</font>

560
00:27:32,930 --> 00:27:38,450
remote<font color="#CCCCCC"> - centralized or just a flat file</font>

561
00:27:35,780 --> 00:27:40,340
<font color="#CCCCCC">yeah it's just a</font><font color="#E5E5E5"> black file by</font><font color="#CCCCCC"> default</font>

562
00:27:38,450 --> 00:27:41,840
<font color="#CCCCCC">but like I was showing you the other</font>

563
00:27:40,340 --> 00:27:44,659
rosters like he mentioned<font color="#CCCCCC"> you can use</font>

564
00:27:41,840 --> 00:27:47,000
and<font color="#E5E5E5"> target ansible and you can do things</font>

565
00:27:44,660 --> 00:27:49,460
like scan the network<font color="#E5E5E5"> and things like</font>

566
00:27:47,000 --> 00:27:51,560
<font color="#CCCCCC">that or you</font><font color="#E5E5E5"> can create your</font><font color="#CCCCCC"> own roster</font>

567
00:27:49,460 --> 00:27:53,540
if you want to<font color="#E5E5E5"> query that information</font>

568
00:27:51,560 --> 00:27:55,429
for something else like a database or

569
00:27:53,540 --> 00:27:57,970
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that you can create</font><font color="#E5E5E5"> your</font>

570
00:27:55,430 --> 00:28:00,320
own module and do that as well<font color="#CCCCCC"> okay</font>

571
00:27:57,970 --> 00:28:15,530
sorry and hopefully I answered that<font color="#E5E5E5"> well</font>

572
00:28:00,320 --> 00:28:17,629
enough ansible does what yes

573
00:28:15,530 --> 00:28:21,580
general<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> host how's</font>

574
00:28:17,630 --> 00:28:23,930
this distributed<font color="#E5E5E5"> so ipv4 ipv6</font>

575
00:28:21,580 --> 00:28:26,960
informations<font color="#E5E5E5"> interface intimate</font>

576
00:28:23,930 --> 00:28:31,430
informations<font color="#CCCCCC"> like how do</font><font color="#E5E5E5"> you does it use</font>

577
00:28:26,960 --> 00:28:37,910
ipv4 know the host information<font color="#E5E5E5"> about</font>

578
00:28:31,430 --> 00:28:39,770
this<font color="#E5E5E5"> this variables all day yes facts</font>

579
00:28:37,910 --> 00:28:42,710
about the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> would be great so</font>

580
00:28:39,770 --> 00:28:45,650
you could just<font color="#CCCCCC"> query the minion and use</font>

581
00:28:42,710 --> 00:28:47,390
that and you can run<font color="#CCCCCC"> grains DAW items</font>

582
00:28:45,650 --> 00:28:49,760
and<font color="#E5E5E5"> that would grab all the information</font>

583
00:28:47,390 --> 00:28:51,650
<font color="#E5E5E5">about all</font><font color="#CCCCCC"> the menus you'd need or like I</font>

584
00:28:49,760 --> 00:28:53,930
was referring to<font color="#E5E5E5"> we have this idea of</font>

585
00:28:51,650 --> 00:28:55,400
<font color="#E5E5E5">the salt mine and it can kind of do the</font>

586
00:28:53,930 --> 00:28:56,810
same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can clarify what</font>

587
00:28:55,400 --> 00:28:58,850
information you want<font color="#CCCCCC"> and it would catch</font>

588
00:28:56,810 --> 00:29:02,200
<font color="#CCCCCC">it on the master and</font><font color="#E5E5E5"> that does work with</font>

589
00:28:58,850 --> 00:29:02,199
<font color="#CCCCCC">salt a cessation as</font><font color="#E5E5E5"> well yeah</font>

590
00:29:05,980 --> 00:29:11,870
so from what I understand now we would

591
00:29:10,340 --> 00:29:13,490
have<font color="#E5E5E5"> two</font><font color="#CCCCCC"> different commands you want to</font>

592
00:29:11,870 --> 00:29:15,199
invoke depending on what kind<font color="#E5E5E5"> of setup</font>

593
00:29:13,490 --> 00:29:15,920
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> or what kind of</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> you're</font>

594
00:29:15,200 --> 00:29:20,000
targeting

595
00:29:15,920 --> 00:29:22,100
is there any plans to kind of unify them

596
00:29:20,000 --> 00:29:24,710
so that you would define<font color="#CCCCCC"> in your roster</font>

597
00:29:22,100 --> 00:29:29,020
<font color="#E5E5E5">I guess I don't know enough about but if</font>

598
00:29:24,710 --> 00:29:32,300
<font color="#E5E5E5">you</font><font color="#CCCCCC"> define in roster</font><font color="#E5E5E5"> okay use classic</font>

599
00:29:29,020 --> 00:29:35,090
<font color="#CCCCCC">agent base management</font><font color="#E5E5E5"> with this minion</font>

600
00:29:32,300 --> 00:29:37,310
<font color="#E5E5E5">and be</font><font color="#CCCCCC"> decider</font><font color="#E5E5E5"> minion use salt</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> sage</font><font color="#CCCCCC"> so</font>

601
00:29:35,090 --> 00:29:39,620
I know in our last<font color="#E5E5E5"> release or it's</font>

602
00:29:37,310 --> 00:29:42,679
<font color="#E5E5E5">coming up in this next release one of</font>

603
00:29:39,620 --> 00:29:44,870
our users<font color="#E5E5E5"> added the functionality so</font>

604
00:29:42,680 --> 00:29:48,740
that<font color="#CCCCCC"> you can actually use the salt CLI</font>

605
00:29:44,870 --> 00:29:50,179
and<font color="#E5E5E5"> target both SSH and minions and the</font>

606
00:29:48,740 --> 00:29:52,280
same is that<font color="#E5E5E5"> was that</font><font color="#CCCCCC"> your question</font>

607
00:29:50,180 --> 00:29:54,650
yeah so that is actually added just

608
00:29:52,280 --> 00:29:56,149
recently there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> some sort of argument</font>

609
00:29:54,650 --> 00:30:01,180
<font color="#E5E5E5">you'd have to use I don't</font><font color="#CCCCCC"> know it off</font>

610
00:29:56,150 --> 00:30:01,180
the top of my<font color="#E5E5E5"> head any other questions</font>

611
00:30:05,180 --> 00:30:16,640
I believe<font color="#E5E5E5"> yeah so I'm I'm almost</font>

612
00:30:14,060 --> 00:30:18,280
positive you can<font color="#E5E5E5"> because I didn't</font>

613
00:30:16,640 --> 00:30:20,840
mention<font color="#E5E5E5"> this but before</font><font color="#CCCCCC"> it actually</font>

614
00:30:18,280 --> 00:30:23,360
<font color="#E5E5E5">submits</font><font color="#CCCCCC"> that command to the</font><font color="#E5E5E5"> minion it</font>

615
00:30:20,840 --> 00:30:24,860
actually is<font color="#E5E5E5"> initializing a connection</font>

616
00:30:23,360 --> 00:30:26,959
with the master event bus and then when

617
00:30:24,860 --> 00:30:28,850
it gets<font color="#CCCCCC"> that</font><font color="#E5E5E5"> return it actually returns</font>

618
00:30:26,960 --> 00:30:33,400
<font color="#E5E5E5">that to the master event bus so you</font>

619
00:30:28,850 --> 00:30:33,399
could react off of that event yeah

620
00:30:36,960 --> 00:30:42,090
<font color="#E5E5E5">Thanks thank you</font>

