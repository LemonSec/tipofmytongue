1
00:00:04,810 --> 00:00:10,730
hello<font color="#E5E5E5"> everybody my name</font><font color="#CCCCCC"> is Felix Becker</font>

2
00:00:08,510 --> 00:00:14,330
<font color="#CCCCCC">I work for source graph on the</font>

3
00:00:10,730 --> 00:00:16,910
typescript support and maybe you've seen

4
00:00:14,330 --> 00:00:18,650
<font color="#E5E5E5">my github handle on some get up issue if</font>

5
00:00:16,910 --> 00:00:21,860
you're active in the typescript

6
00:00:18,650 --> 00:00:24,860
community on github<font color="#E5E5E5"> because I love</font>

7
00:00:21,860 --> 00:00:26,780
typescript<font color="#E5E5E5"> types curve is one of the</font>

8
00:00:24,860 --> 00:00:30,650
greatest programming languages I've ever

9
00:00:26,780 --> 00:00:34,039
<font color="#E5E5E5">used and it seems especially recently a</font>

10
00:00:30,650 --> 00:00:35,960
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people agree this is the stack</font>

11
00:00:34,039 --> 00:00:38,120
overflow<font color="#CCCCCC"> developer survey from last year</font>

12
00:00:35,960 --> 00:00:43,940
where typescript made it under<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most</font>

13
00:00:38,120 --> 00:00:46,370
loved languages<font color="#CCCCCC"> this is the NPM</font>

14
00:00:43,940 --> 00:00:50,420
developer survey from<font color="#CCCCCC"> last year</font><font color="#E5E5E5"> we're</font>

15
00:00:46,370 --> 00:00:54,709
now 46<font color="#E5E5E5"> percent of all NPM users stayed</font>

16
00:00:50,420 --> 00:00:56,570
<font color="#E5E5E5">there already using typescript so you</font>

17
00:00:54,710 --> 00:00:59,360
got one<font color="#CCCCCC"> and what makes typescript so</font>

18
00:00:56,570 --> 00:01:01,790
great<font color="#E5E5E5"> and I think</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are many things</font>

19
00:00:59,360 --> 00:01:03,530
<font color="#CCCCCC">that make typescript great but the one</font>

20
00:01:01,790 --> 00:01:09,260
thing that<font color="#CCCCCC"> comes up over and over</font><font color="#E5E5E5"> again</font>

21
00:01:03,530 --> 00:01:12,860
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the tooling who makes the developer</font>

22
00:01:09,260 --> 00:01:16,100
more productive not as like a side

23
00:01:12,860 --> 00:01:18,650
effect of having<font color="#E5E5E5"> static types but as the</font>

24
00:01:16,100 --> 00:01:22,490
<font color="#CCCCCC">first-class goal and focus of the entire</font>

25
00:01:18,650 --> 00:01:24,890
<font color="#CCCCCC">language</font><font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> see there is in the</font>

26
00:01:22,490 --> 00:01:27,830
design decisions and<font color="#CCCCCC"> in the design goals</font>

27
00:01:24,890 --> 00:01:31,340
that the<font color="#E5E5E5"> typescript team has set out not</font>

28
00:01:27,830 --> 00:01:34,840
striving<font color="#E5E5E5"> for that</font><font color="#CCCCCC"> 100</font><font color="#E5E5E5"> percent correct</font>

29
00:01:31,340 --> 00:01:39,140
<font color="#E5E5E5">type system but always for the biggest</font>

30
00:01:34,840 --> 00:01:41,180
developer productivity<font color="#E5E5E5"> gain and when I</font>

31
00:01:39,140 --> 00:01:43,520
picked up typescript for<font color="#E5E5E5"> the first time</font>

32
00:01:41,180 --> 00:01:47,890
I was<font color="#CCCCCC"> absolutely blown away</font><font color="#E5E5E5"> by how</font><font color="#CCCCCC"> much</font>

33
00:01:43,520 --> 00:01:50,390
<font color="#E5E5E5">faster I could write</font><font color="#CCCCCC"> JavaScript code</font>

34
00:01:47,890 --> 00:01:54,080
<font color="#CCCCCC">getting</font><font color="#E5E5E5"> auto completion on symbols</font>

35
00:01:50,390 --> 00:01:57,470
jumping the definition<font color="#E5E5E5"> on fields finding</font>

36
00:01:54,080 --> 00:02:00,320
references<font color="#CCCCCC"> to functions</font><font color="#E5E5E5"> getting compile</font>

37
00:01:57,470 --> 00:02:03,200
errors and warnings and even automatic

38
00:02:00,320 --> 00:02:06,258
fixes for them<font color="#CCCCCC"> even more advanced</font>

39
00:02:03,200 --> 00:02:09,590
refactorings like renaming symbols or

40
00:02:06,259 --> 00:02:11,629
like<font color="#E5E5E5"> converting an entire promise chain</font>

41
00:02:09,590 --> 00:02:14,340
to an async function that's that's a

42
00:02:11,629 --> 00:02:16,500
very<font color="#CCCCCC"> recent feature</font>

43
00:02:14,340 --> 00:02:19,620
and what's great is that<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these</font>

44
00:02:16,500 --> 00:02:23,430
features<font color="#E5E5E5"> don't come from your IDE or</font>

45
00:02:19,620 --> 00:02:26,060
editor but they're<font color="#E5E5E5"> open source and built</font>

46
00:02:23,430 --> 00:02:28,739
<font color="#E5E5E5">by the typescript team</font><font color="#CCCCCC"> themselves</font><font color="#E5E5E5"> and</font>

47
00:02:26,060 --> 00:02:31,739
shipped within<font color="#E5E5E5"> the typescript NPM</font>

48
00:02:28,739 --> 00:02:33,780
package<font color="#E5E5E5"> so when you NPM install</font>

49
00:02:31,739 --> 00:02:36,090
typescript

50
00:02:33,780 --> 00:02:38,940
you don't just get<font color="#CCCCCC"> the compiler you</font>

51
00:02:36,090 --> 00:02:42,470
<font color="#CCCCCC">actually get language service API is</font>

52
00:02:38,940 --> 00:02:46,489
that<font color="#E5E5E5"> provide these features and</font><font color="#CCCCCC"> a</font>

53
00:02:42,470 --> 00:02:50,190
standalone executable<font color="#E5E5E5"> called TS server</font>

54
00:02:46,489 --> 00:02:55,590
that editors can run to provide these

55
00:02:50,190 --> 00:02:59,190
features and that<font color="#CCCCCC"> TS server is not just</font>

56
00:02:55,590 --> 00:03:04,560
a one-shot CLI command<font color="#E5E5E5"> like you may know</font>

57
00:02:59,190 --> 00:03:09,030
from<font color="#E5E5E5"> go has a bunch of these but it's a</font>

58
00:03:04,560 --> 00:03:12,269
long-running RPC server that<font color="#CCCCCC"> the editor</font>

59
00:03:09,030 --> 00:03:14,940
spawns<font color="#E5E5E5"> and it then sets up file</font><font color="#CCCCCC"> Watchers</font>

60
00:03:12,269 --> 00:03:18,269
<font color="#E5E5E5">to continuously compile your project in</font>

61
00:03:14,940 --> 00:03:21,780
memory and when the user wants<font color="#CCCCCC"> to invoke</font>

62
00:03:18,269 --> 00:03:24,810
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> go-to</font><font color="#E5E5E5"> definition the</font>

63
00:03:21,780 --> 00:03:27,450
editor sends<font color="#E5E5E5"> a very simple JSON message</font>

64
00:03:24,810 --> 00:03:30,480
<font color="#E5E5E5">to that server telling it hey can you</font>

65
00:03:27,450 --> 00:03:34,200
find me the<font color="#E5E5E5"> definition of this symbol at</font>

66
00:03:30,480 --> 00:03:36,890
this line at this<font color="#E5E5E5"> offset in this file TS</font>

67
00:03:34,200 --> 00:03:39,920
server resolves<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then sends a</font>

68
00:03:36,890 --> 00:03:43,858
JSON message<font color="#E5E5E5"> back over standards out</font>

69
00:03:39,920 --> 00:03:45,988
that contains where the definition<font color="#CCCCCC"> was</font>

70
00:03:43,859 --> 00:03:52,019
found<font color="#E5E5E5"> and at which line and at which</font>

71
00:03:45,989 --> 00:03:54,180
offset and what's<font color="#E5E5E5"> great is that TS</font>

72
00:03:52,019 --> 00:03:56,069
server makes it<font color="#CCCCCC"> possible that</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> matter</font>

73
00:03:54,180 --> 00:03:59,579
what editor you're using whether that's

74
00:03:56,069 --> 00:04:03,690
<font color="#CCCCCC">vias code or sublime or atom or Emacs or</font>

75
00:03:59,579 --> 00:04:06,299
<font color="#CCCCCC">ven you get all these features</font><font color="#E5E5E5"> and you</font>

76
00:04:03,690 --> 00:04:08,100
have the exact<font color="#CCCCCC"> same</font><font color="#E5E5E5"> experience when</font>

77
00:04:06,299 --> 00:04:13,049
you're working on your<font color="#E5E5E5"> typescript code</font>

78
00:04:08,100 --> 00:04:16,469
<font color="#E5E5E5">locally so and this time</font><font color="#CCCCCC"> I want to take</font>

79
00:04:13,049 --> 00:04:18,840
it a step<font color="#CCCCCC"> further and</font><font color="#E5E5E5"> I want to ask what</font>

80
00:04:16,470 --> 00:04:21,570
if I could get all these features

81
00:04:18,839 --> 00:04:24,690
<font color="#E5E5E5">everywhere outside of my local dev</font>

82
00:04:21,570 --> 00:04:27,659
environment<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> on the millions</font>

83
00:04:24,690 --> 00:04:31,380
of repositories on github<font color="#E5E5E5"> or e</font>

84
00:04:27,660 --> 00:04:34,350
while<font color="#E5E5E5"> reviewing code in</font><font color="#CCCCCC"> pull requests</font>

85
00:04:31,380 --> 00:04:38,010
what if as a library author I could find

86
00:04:34,350 --> 00:04:40,950
references<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a symbol</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I have in my</font>

87
00:04:38,010 --> 00:04:44,070
library<font color="#CCCCCC"> and</font><font color="#E5E5E5"> find other repositories that</font>

88
00:04:40,950 --> 00:04:47,870
<font color="#E5E5E5">use this and like maybe figure out</font><font color="#CCCCCC"> Oh</font>

89
00:04:44,070 --> 00:04:50,550
can I safely<font color="#E5E5E5"> deprecated this function</font>

90
00:04:47,870 --> 00:04:52,680
<font color="#CCCCCC">what if as a user</font><font color="#E5E5E5"> of a library I could</font>

91
00:04:50,550 --> 00:04:55,380
jump to<font color="#E5E5E5"> the definition of a symbol</font>

92
00:04:52,680 --> 00:04:59,940
inside another library<font color="#E5E5E5"> and get taken to</font>

93
00:04:55,380 --> 00:05:01,860
that source repository to<font color="#E5E5E5"> understand the</font>

94
00:04:59,940 --> 00:05:03,420
<font color="#CCCCCC">implementation of it or</font><font color="#E5E5E5"> maybe I catch a</font>

95
00:05:01,860 --> 00:05:06,860
<font color="#CCCCCC">bark and can immediately</font><font color="#E5E5E5"> do a pull</font>

96
00:05:03,420 --> 00:05:09,930
request<font color="#E5E5E5"> and what if I could apply these</font>

97
00:05:06,860 --> 00:05:13,110
<font color="#E5E5E5">cool</font><font color="#CCCCCC"> refractory</font><font color="#E5E5E5"> it's like converting</font><font color="#CCCCCC"> a</font>

98
00:05:09,930 --> 00:05:14,880
promise<font color="#E5E5E5"> chain not just in my local</font>

99
00:05:13,110 --> 00:05:18,720
project that I have<font color="#E5E5E5"> checked out but</font>

100
00:05:14,880 --> 00:05:23,370
across hundreds<font color="#E5E5E5"> of repositories</font><font color="#CCCCCC"> with a</font>

101
00:05:18,720 --> 00:05:28,920
<font color="#E5E5E5">single click online and the good news is</font>

102
00:05:23,370 --> 00:05:31,550
<font color="#CCCCCC">we can do that first</font><font color="#E5E5E5"> step we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font>

103
00:05:28,920 --> 00:05:35,820
<font color="#E5E5E5">for that is instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> running TS server</font>

104
00:05:31,550 --> 00:05:40,110
locally<font color="#E5E5E5"> on the user's machine we run it</font>

105
00:05:35,820 --> 00:05:43,830
in containers<font color="#CCCCCC"> and when you open a file</font>

106
00:05:40,110 --> 00:05:48,120
<font color="#CCCCCC">in your</font><font color="#E5E5E5"> browser on github or any other</font>

107
00:05:43,830 --> 00:05:50,840
code hose or source graph<font color="#E5E5E5"> com</font><font color="#CCCCCC"> we connect</font>

108
00:05:48,120 --> 00:05:56,640
to that<font color="#CCCCCC"> server</font><font color="#E5E5E5"> not through standard i/o</font>

109
00:05:50,840 --> 00:05:58,859
but instead<font color="#E5E5E5"> through a</font><font color="#CCCCCC"> WebSocket of</font>

110
00:05:56,640 --> 00:06:01,979
course it's not<font color="#E5E5E5"> just that simple because</font>

111
00:05:58,860 --> 00:06:04,830
given that<font color="#E5E5E5"> TS server is running in an</font>

112
00:06:01,980 --> 00:06:07,410
isolated<font color="#E5E5E5"> container the files of the</font>

113
00:06:04,830 --> 00:06:11,340
<font color="#CCCCCC">project don't exist on</font><font color="#E5E5E5"> the same disk as</font>

114
00:06:07,410 --> 00:06:13,320
they do when you're running locally<font color="#E5E5E5"> but</font>

115
00:06:11,340 --> 00:06:15,890
instead they exist on the<font color="#CCCCCC"> kodos</font>

116
00:06:13,320 --> 00:06:19,530
and they're shown to the user that way

117
00:06:15,890 --> 00:06:22,039
so we needed some<font color="#CCCCCC"> way</font><font color="#E5E5E5"> to tell</font><font color="#CCCCCC"> TS server</font>

118
00:06:19,530 --> 00:06:25,590
<font color="#CCCCCC">that instead of</font><font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the file on</font>

119
00:06:22,040 --> 00:06:32,250
<font color="#CCCCCC">the file system</font><font color="#E5E5E5"> it should get that</font>

120
00:06:25,590 --> 00:06:34,710
<font color="#E5E5E5">project somewhere</font><font color="#CCCCCC"> out-of-band</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> tears</font>

121
00:06:32,250 --> 00:06:37,830
server itself the protocol unfortunately

122
00:06:34,710 --> 00:06:40,859
does not<font color="#E5E5E5"> support this but a very similar</font>

123
00:06:37,830 --> 00:06:41,550
protocol called the<font color="#E5E5E5"> language server</font>

124
00:06:40,860 --> 00:06:44,750
protocol

125
00:06:41,550 --> 00:06:50,069
may have heard<font color="#E5E5E5"> of it</font><font color="#CCCCCC"> or short LSP</font>

126
00:06:44,750 --> 00:06:54,000
does and LSP was created by the visual

127
00:06:50,069 --> 00:06:56,669
studio code team<font color="#CCCCCC"> to standardize a</font>

128
00:06:54,000 --> 00:06:59,639
protocol<font color="#E5E5E5"> that provides these code</font>

129
00:06:56,669 --> 00:07:02,400
intelligence features<font color="#E5E5E5"> basically in the</font>

130
00:06:59,639 --> 00:07:06,449
same way that TS<font color="#E5E5E5"> server does but</font>

131
00:07:02,400 --> 00:07:08,940
language<font color="#E5E5E5"> agnostic</font><font color="#CCCCCC"> and I'm pretty</font><font color="#E5E5E5"> sure</font>

132
00:07:06,449 --> 00:07:10,530
LSP was heavily<font color="#E5E5E5"> inspired by TS server</font>

133
00:07:08,940 --> 00:07:13,250
because if you squint your eyes they

134
00:07:10,530 --> 00:07:15,659
look<font color="#E5E5E5"> exactly the same</font>

135
00:07:13,250 --> 00:07:21,360
if you don't though there are a few

136
00:07:15,659 --> 00:07:25,229
improvements<font color="#E5E5E5"> in LSP</font><font color="#CCCCCC"> LSP is language</font>

137
00:07:21,360 --> 00:07:26,990
agnostic<font color="#E5E5E5"> it uses the json-rpc standard</font>

138
00:07:25,229 --> 00:07:30,060
which makes it a little<font color="#E5E5E5"> bit easier to</font>

139
00:07:26,990 --> 00:07:32,669
build<font color="#E5E5E5"> on existing libraries for clients</font>

140
00:07:30,060 --> 00:07:36,210
and servers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> improve request</font>

141
00:07:32,669 --> 00:07:38,969
cancellation<font color="#E5E5E5"> and most importantly it</font>

142
00:07:36,210 --> 00:07:43,409
uses<font color="#CCCCCC"> your eyes</font><font color="#E5E5E5"> instead of file paths</font>

143
00:07:38,969 --> 00:07:45,840
<font color="#E5E5E5">which you can</font><font color="#CCCCCC"> see here and in</font><font color="#E5E5E5"> most cases</font>

144
00:07:43,409 --> 00:07:48,659
these<font color="#CCCCCC"> are actually URLs</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> they</font>

145
00:07:45,840 --> 00:07:52,500
tell the server how to locate the

146
00:07:48,659 --> 00:07:54,810
resource<font color="#E5E5E5"> it's like a code file so if</font>

147
00:07:52,500 --> 00:07:56,430
it's a file<font color="#E5E5E5"> colon</font><font color="#CCCCCC"> you're I</font><font color="#E5E5E5"> disturbed</font>

148
00:07:54,810 --> 00:07:58,889
<font color="#E5E5E5">with no oh it's on the file system I'm</font>

149
00:07:56,430 --> 00:08:03,529
<font color="#E5E5E5">gonna read that from disk if it's</font>

150
00:07:58,889 --> 00:08:06,150
something custom like<font color="#E5E5E5"> unsaved file</font><font color="#CCCCCC"> colon</font>

151
00:08:03,529 --> 00:08:10,319
<font color="#E5E5E5">it would get that content from the</font>

152
00:08:06,150 --> 00:08:13,919
client is that<font color="#E5E5E5"> files not safe yet</font><font color="#CCCCCC"> and we</font>

153
00:08:10,319 --> 00:08:18,270
can teach the server<font color="#CCCCCC"> a new capability</font>

154
00:08:13,919 --> 00:08:22,849
which is<font color="#CCCCCC"> in a case of an HTTP URL</font><font color="#E5E5E5"> it</font>

155
00:08:18,270 --> 00:08:25,440
should fetch that resource through HTTP

156
00:08:22,849 --> 00:08:30,380
so when we sent<font color="#E5E5E5"> the server our first</font>

157
00:08:25,440 --> 00:08:34,219
message<font color="#E5E5E5"> to initialize it we tell it that</font>

158
00:08:30,380 --> 00:08:36,539
this project<font color="#E5E5E5"> is not located on disk but</font>

159
00:08:34,219 --> 00:08:39,180
<font color="#CCCCCC">instead it's located in a github</font>

160
00:08:36,539 --> 00:08:44,730
repository<font color="#CCCCCC"> and that is to fetch this</font>

161
00:08:39,179 --> 00:08:47,339
from this HTTP endpoint and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> server</font>

162
00:08:44,730 --> 00:08:51,329
<font color="#E5E5E5">can do a bunch of things with these HTTP</font>

163
00:08:47,339 --> 00:08:55,209
URLs this is an API we build but it's

164
00:08:51,329 --> 00:08:59,589
really just<font color="#E5E5E5"> very plain HTTP</font><font color="#CCCCCC"> that</font>

165
00:08:55,209 --> 00:09:02,679
could support<font color="#CCCCCC"> all it needs is when you</font>

166
00:08:59,589 --> 00:09:06,839
do a get<font color="#CCCCCC"> on some file in the repository</font>

167
00:09:02,679 --> 00:09:10,329
<font color="#CCCCCC">it should return that as plain content</font>

168
00:09:06,839 --> 00:09:13,089
<font color="#CCCCCC">you can do a head request</font><font color="#E5E5E5"> to figure out</font>

169
00:09:10,329 --> 00:09:17,709
if if the file does not<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> and check</font>

170
00:09:13,089 --> 00:09:20,139
the<font color="#CCCCCC"> 404 status code you can do a get on</font>

171
00:09:17,709 --> 00:09:24,489
a directory<font color="#CCCCCC"> - and just get a very simple</font>

172
00:09:20,139 --> 00:09:48,339
plain text listing of the contents<font color="#E5E5E5"> and</font>

173
00:09:24,490 --> 00:09:50,769
<font color="#CCCCCC">you can even send</font><font color="#E5E5E5"> Ana sep 2 2014 2 the</font>

174
00:09:48,339 --> 00:09:55,600
user accessing<font color="#CCCCCC"> a github</font><font color="#E5E5E5"> repository in a</font>

175
00:09:50,769 --> 00:10:00,899
browser<font color="#E5E5E5"> and the user can do things like</font>

176
00:09:55,600 --> 00:10:00,899
go<font color="#E5E5E5"> to definition right in their browser</font>

177
00:10:01,829 --> 00:10:09,309
<font color="#E5E5E5">and what's kind</font><font color="#CCCCCC"> of cool about this URL</font>

178
00:10:04,720 --> 00:10:12,519
is that it doesn't matter<font color="#E5E5E5"> really</font>

179
00:10:09,309 --> 00:10:14,889
which<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> hosts this</font><font color="#CCCCCC"> even though</font>

180
00:10:12,519 --> 00:10:15,939
this is hosted<font color="#CCCCCC"> on like typescript on</font>

181
00:10:14,889 --> 00:10:19,779
source graph com

182
00:10:15,939 --> 00:10:23,799
you could give<font color="#CCCCCC"> it any route</font><font color="#E5E5E5"> URL of any</font>

183
00:10:19,779 --> 00:10:27,429
<font color="#E5E5E5">service that supports these basic HTTP</font>

184
00:10:23,799 --> 00:10:34,029
features and it would be<font color="#CCCCCC"> able to analyze</font>

185
00:10:27,429 --> 00:10:38,100
<font color="#E5E5E5">our project and since we can construct</font>

186
00:10:34,029 --> 00:10:41,679
<font color="#E5E5E5">these URLs even for arbitrary revisions</font>

187
00:10:38,100 --> 00:10:45,269
<font color="#CCCCCC">we can even do this on pull requests on</font>

188
00:10:41,679 --> 00:10:48,389
github<font color="#E5E5E5"> where the red section</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the diff</font>

189
00:10:45,269 --> 00:10:51,939
<font color="#CCCCCC">always talks to server instance for the</font>

190
00:10:48,389 --> 00:10:54,939
merge space revision and<font color="#CCCCCC"> the green and</font>

191
00:10:51,939 --> 00:10:59,019
white sections of the diff always talk

192
00:10:54,939 --> 00:11:01,889
to a server instance of the head commit

193
00:10:59,019 --> 00:11:01,889
of the death

194
00:11:03,600 --> 00:11:12,340
what this does<font color="#CCCCCC"> not solve yet</font><font color="#E5E5E5"> though is</font>

195
00:11:06,540 --> 00:11:14,459
code intelligence across repositories we

196
00:11:12,340 --> 00:11:18,580
gave to your<font color="#E5E5E5"> server access to the files</font>

197
00:11:14,460 --> 00:11:21,790
but it doesn't have any<font color="#E5E5E5"> access or</font>

198
00:11:18,580 --> 00:11:25,470
knowledge<font color="#E5E5E5"> of the dependencies of the</font>

199
00:11:21,790 --> 00:11:28,599
project for example<font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> calling a</font>

200
00:11:25,470 --> 00:11:30,220
<font color="#E5E5E5">function and then on the return value</font>

201
00:11:28,600 --> 00:11:32,950
you're calling another<font color="#E5E5E5"> method and</font><font color="#CCCCCC"> you</font>

202
00:11:30,220 --> 00:11:34,450
want to jump to<font color="#E5E5E5"> definition on that we</font>

203
00:11:32,950 --> 00:11:37,360
would<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> know what is the return</font>

204
00:11:34,450 --> 00:11:42,670
<font color="#E5E5E5">value</font><font color="#CCCCCC"> of that first function so we</font><font color="#E5E5E5"> can</font>

205
00:11:37,360 --> 00:11:46,870
resolve that<font color="#E5E5E5"> and typescript knows these</font>

206
00:11:42,670 --> 00:11:48,819
through<font color="#E5E5E5"> type declaration files for</font>

207
00:11:46,870 --> 00:11:53,200
the.net crowd they're basically<font color="#E5E5E5"> like</font>

208
00:11:48,820 --> 00:11:56,230
symbol files kind of and they contain

209
00:11:53,200 --> 00:11:58,780
<font color="#E5E5E5">typescript function and</font><font color="#CCCCCC"> Method</font><font color="#E5E5E5"> step</font>

210
00:11:56,230 --> 00:12:01,150
definitions<font color="#E5E5E5"> that only contain the</font>

211
00:11:58,780 --> 00:12:03,310
signatures<font color="#E5E5E5"> but not any of</font><font color="#CCCCCC"> the</font>

212
00:12:01,150 --> 00:12:06,540
implementation<font color="#E5E5E5"> which makes them a lot</font>

213
00:12:03,310 --> 00:12:10,660
<font color="#CCCCCC">more compact and faster the</font><font color="#E5E5E5"> pars and</font>

214
00:12:06,540 --> 00:12:15,010
<font color="#E5E5E5">these type declaration files are shipped</font>

215
00:12:10,660 --> 00:12:17,020
inside normal NPM packages so what we do

216
00:12:15,010 --> 00:12:20,410
is whenever we detect that<font color="#E5E5E5"> a definition</font>

217
00:12:17,020 --> 00:12:23,770
<font color="#E5E5E5">could not be found</font><font color="#CCCCCC"> or a tooltip seems</font>

218
00:12:20,410 --> 00:12:27,339
insufficient we just install

219
00:12:23,770 --> 00:12:30,490
dependencies<font color="#E5E5E5"> from NPM and TS</font><font color="#CCCCCC"> server is</font>

220
00:12:27,340 --> 00:12:33,310
smart enough<font color="#E5E5E5"> to</font><font color="#CCCCCC"> detect that new files</font>

221
00:12:30,490 --> 00:12:37,630
were added<font color="#CCCCCC"> to node modules and consider</font>

222
00:12:33,310 --> 00:12:40,959
these now available<font color="#E5E5E5"> types and we can</font>

223
00:12:37,630 --> 00:12:43,360
even<font color="#E5E5E5"> be smart and since we're only doing</font>

224
00:12:40,960 --> 00:12:45,850
<font color="#E5E5E5">static analysis and don't need runtime</font>

225
00:12:43,360 --> 00:12:47,500
dependencies<font color="#E5E5E5"> we can only install</font>

226
00:12:45,850 --> 00:12:51,220
packages<font color="#E5E5E5"> that actually contain</font>

227
00:12:47,500 --> 00:12:53,700
typescript<font color="#E5E5E5"> declaration files makes</font>

228
00:12:51,220 --> 00:12:53,700
<font color="#E5E5E5">things faster</font>

229
00:12:54,820 --> 00:13:00,640
so now with<font color="#E5E5E5"> dependencies available</font><font color="#CCCCCC"> two</font>

230
00:12:58,000 --> 00:13:03,040
TS<font color="#CCCCCC"> server</font><font color="#E5E5E5"> you can trigger a go to</font>

231
00:13:00,640 --> 00:13:08,199
definition<font color="#CCCCCC"> on a symbol that comes</font><font color="#E5E5E5"> from a</font>

232
00:13:03,040 --> 00:13:10,569
dependency and TS server<font color="#E5E5E5"> will return the</font>

233
00:13:08,200 --> 00:13:15,280
definition of<font color="#E5E5E5"> that dependency inside</font>

234
00:13:10,570 --> 00:13:17,290
<font color="#CCCCCC">known modules</font><font color="#E5E5E5"> the problem is this only</font>

235
00:13:15,280 --> 00:13:20,370
gives us the location<font color="#CCCCCC"> inside note</font>

236
00:13:17,290 --> 00:13:23,860
modules in the type declaration file and

237
00:13:20,370 --> 00:13:26,050
the user who's accessing<font color="#E5E5E5"> the repo</font><font color="#CCCCCC"> and</font>

238
00:13:23,860 --> 00:13:29,110
the browser can actually view that

239
00:13:26,050 --> 00:13:33,609
because note modules<font color="#E5E5E5"> is generally not</font>

240
00:13:29,110 --> 00:13:35,740
checked<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the repository so to give</font>

241
00:13:33,610 --> 00:13:38,770
the browser a URL<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is viewable by</font>

242
00:13:35,740 --> 00:13:42,340
<font color="#E5E5E5">the user we need to map this file path</font>

243
00:13:38,770 --> 00:13:46,930
to<font color="#CCCCCC"> where it's actually</font><font color="#E5E5E5"> defined in the</font>

244
00:13:42,340 --> 00:13:49,180
source repository so we need to figure

245
00:13:46,930 --> 00:13:54,550
out where's the<font color="#E5E5E5"> source of this package</font>

246
00:13:49,180 --> 00:13:59,020
and luckily<font color="#E5E5E5"> the package of JSON contains</font>

247
00:13:54,550 --> 00:14:00,550
everything<font color="#CCCCCC"> we need for that almost all</font>

248
00:13:59,020 --> 00:14:06,520
package of<font color="#CCCCCC"> jason's have a repository</font>

249
00:14:00,550 --> 00:14:08,979
<font color="#E5E5E5">field that point to the repository</font><font color="#CCCCCC"> they</font>

250
00:14:06,520 --> 00:14:11,560
contain a<font color="#E5E5E5"> git head field which is</font>

251
00:14:08,980 --> 00:14:14,680
undocumented<font color="#CCCCCC"> but it exists in npm</font>

252
00:14:11,560 --> 00:14:19,810
publish<font color="#CCCCCC"> adds it</font><font color="#E5E5E5"> when you publish a</font>

253
00:14:14,680 --> 00:14:21,729
package and it's the<font color="#E5E5E5"> head commit off the</font>

254
00:14:19,810 --> 00:14:24,910
repository at the point where publish

255
00:14:21,730 --> 00:14:27,910
happened<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> there's the directory</font>

256
00:14:24,910 --> 00:14:30,640
<font color="#E5E5E5">field</font><font color="#CCCCCC"> in case the packages</font><font color="#E5E5E5"> in the mono</font>

257
00:14:27,910 --> 00:14:35,560
repo and<font color="#E5E5E5"> it's not in the root which is</font><font color="#CCCCCC"> a</font>

258
00:14:30,640 --> 00:14:37,270
an RFC<font color="#CCCCCC"> to NPM that was ratified</font><font color="#E5E5E5"> just a</font>

259
00:14:35,560 --> 00:14:40,719
couple<font color="#E5E5E5"> weeks</font><font color="#CCCCCC"> ago so there's a very</font>

260
00:14:37,270 --> 00:14:43,030
recent feature but it's already<font color="#E5E5E5"> being</font>

261
00:14:40,720 --> 00:14:48,190
<font color="#E5E5E5">adopted by very popular mono repo</font>

262
00:14:43,030 --> 00:14:50,760
packages so we have the repository<font color="#E5E5E5"> the</font>

263
00:14:48,190 --> 00:14:57,670
revision<font color="#E5E5E5"> the directory of</font><font color="#CCCCCC"> the package</font>

264
00:14:50,760 --> 00:15:00,069
<font color="#CCCCCC">but the file still points to</font><font color="#E5E5E5"> the type</font>

265
00:14:57,670 --> 00:15:03,490
declaration<font color="#E5E5E5"> photo which does not exist</font>

266
00:15:00,070 --> 00:15:06,310
<font color="#CCCCCC">in the source repository</font><font color="#E5E5E5"> and this in the</font>

267
00:15:03,490 --> 00:15:07,900
past is where we had to bail<font color="#CCCCCC"> and</font><font color="#E5E5E5"> do some</font>

268
00:15:06,310 --> 00:15:09,969
hacky heuristic and

269
00:15:07,900 --> 00:15:14,650
try to find that symbol somewhere<font color="#E5E5E5"> with</font>

270
00:15:09,970 --> 00:15:18,180
the fuzzy symbol match but typescript

271
00:15:14,650 --> 00:15:22,510
<font color="#CCCCCC">3.3 had a really cool new feature called</font>

272
00:15:18,180 --> 00:15:26,260
<font color="#E5E5E5">declaration maps and typescript always</font>

273
00:15:22,510 --> 00:15:29,830
had support<font color="#CCCCCC"> for source maps for the</font>

274
00:15:26,260 --> 00:15:33,220
compiled JavaScript<font color="#E5E5E5"> which are basically</font>

275
00:15:29,830 --> 00:15:36,520
just<font color="#E5E5E5"> JSON files that contain mappings</font>

276
00:15:33,220 --> 00:15:39,220
from ranges<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> javascript file to</font>

277
00:15:36,520 --> 00:15:41,890
the ranges in source files<font color="#E5E5E5"> which allows</font>

278
00:15:39,220 --> 00:15:43,750
you<font color="#E5E5E5"> to step through the typescript code</font>

279
00:15:41,890 --> 00:15:46,270
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> debugger</font><font color="#CCCCCC"> instead of having to</font>

280
00:15:43,750 --> 00:15:51,070
step through the compiled JavaScript

281
00:15:46,270 --> 00:15:54,100
code and<font color="#E5E5E5"> declaration files are basically</font>

282
00:15:51,070 --> 00:15:56,110
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> but they're instead</font><font color="#E5E5E5"> of</font>

283
00:15:54,100 --> 00:16:00,610
mapping<font color="#CCCCCC"> the javascript file they map</font>

284
00:15:56,110 --> 00:16:03,550
these signature<font color="#E5E5E5"> stubs</font><font color="#CCCCCC"> in the declaration</font>

285
00:16:00,610 --> 00:16:08,680
files<font color="#E5E5E5"> to the positions in the actual</font>

286
00:16:03,550 --> 00:16:12,760
source<font color="#E5E5E5"> and we can read that</font><font color="#CCCCCC"> the DTS map</font>

287
00:16:08,680 --> 00:16:15,010
file to map the<font color="#CCCCCC"> Declaration file to an</font>

288
00:16:12,760 --> 00:16:18,130
actual source file<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> new position</font>

289
00:16:15,010 --> 00:16:20,439
<font color="#E5E5E5">and with that we have everything to</font>

290
00:16:18,130 --> 00:16:24,790
construct a full URL the repository

291
00:16:20,440 --> 00:16:29,380
<font color="#E5E5E5">revision directory file path and the new</font>

292
00:16:24,790 --> 00:16:31,870
<font color="#E5E5E5">position which means you can even do</font>

293
00:16:29,380 --> 00:16:34,420
this go<font color="#CCCCCC"> to definition and jump to a</font>

294
00:16:31,870 --> 00:16:36,660
completely different repository<font color="#E5E5E5"> right in</font>

295
00:16:34,420 --> 00:16:36,660
your browser

296
00:16:41,090 --> 00:16:48,120
now<font color="#E5E5E5"> even more interesting for a library</font>

297
00:16:44,790 --> 00:16:53,150
<font color="#E5E5E5">maintainer in my opinion is to</font><font color="#CCCCCC"> do the</font>

298
00:16:48,120 --> 00:16:56,930
inverse which is answering<font color="#CCCCCC"> the question</font>

299
00:16:53,150 --> 00:17:00,209
<font color="#E5E5E5">who in the universe is using this symbol</font>

300
00:16:56,930 --> 00:17:02,069
<font color="#CCCCCC">what's AR the library and it contains a</font>

301
00:17:00,210 --> 00:17:03,720
function<font color="#CCCCCC"> I'm interested in how that</font>

302
00:17:02,070 --> 00:17:06,230
function is being<font color="#E5E5E5"> used or whether it's</font>

303
00:17:03,720 --> 00:17:06,230
used at all

304
00:17:06,530 --> 00:17:12,780
so that's what we call cross repository

305
00:17:09,599 --> 00:17:15,859
<font color="#CCCCCC">fine references and let's say we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

306
00:17:12,780 --> 00:17:18,599
<font color="#CCCCCC">find references</font><font color="#E5E5E5"> for a symbol in a file</font>

307
00:17:15,859 --> 00:17:20,698
<font color="#CCCCCC">the steps are basically the exact</font>

308
00:17:18,599 --> 00:17:24,389
<font color="#E5E5E5">inverse of what we did</font><font color="#CCCCCC"> for global</font>

309
00:17:20,699 --> 00:17:27,569
definition<font color="#CCCCCC"> we find the closest</font>

310
00:17:24,390 --> 00:17:31,710
<font color="#CCCCCC">package.json to figure out what package</font>

311
00:17:27,569 --> 00:17:33,110
does this file belong to and then we

312
00:17:31,710 --> 00:17:36,120
need to<font color="#E5E5E5"> figure out what other</font>

313
00:17:33,110 --> 00:17:36,889
repositories<font color="#CCCCCC"> or</font><font color="#E5E5E5"> packages depend on this</font>

314
00:17:36,120 --> 00:17:43,560
package

315
00:17:36,890 --> 00:17:50,930
<font color="#E5E5E5">and luckily NPM has an API</font><font color="#CCCCCC"> for that and</font>

316
00:17:43,560 --> 00:17:55,530
it's documented<font color="#E5E5E5"> on Stack Overflow so</font>

317
00:17:50,930 --> 00:17:57,960
it's a raw<font color="#CCCCCC"> couchdb query</font><font color="#E5E5E5"> now you send to</font>

318
00:17:55,530 --> 00:18:01,560
some legacy<font color="#E5E5E5"> endpoint and you get where</font>

319
00:17:57,960 --> 00:18:04,560
it back and very<font color="#E5E5E5"> weird JSON structure</font>

320
00:18:01,560 --> 00:18:08,340
<font color="#E5E5E5">that eventually reveals the information</font>

321
00:18:04,560 --> 00:18:12,389
we need<font color="#CCCCCC"> so we can use this to get all</font>

322
00:18:08,340 --> 00:18:14,429
the<font color="#E5E5E5"> dependence of the package and then</font>

323
00:18:12,390 --> 00:18:17,100
for each package use the repository

324
00:18:14,430 --> 00:18:19,230
fields again to<font color="#E5E5E5"> figure out which</font>

325
00:18:17,100 --> 00:18:25,230
repositories these belong to<font color="#E5E5E5"> that we</font>

326
00:18:19,230 --> 00:18:27,000
should<font color="#CCCCCC"> search so then for</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> of these</font>

327
00:18:25,230 --> 00:18:29,820
<font color="#CCCCCC">dependence we don't actually know yet</font>

328
00:18:27,000 --> 00:18:31,470
whether these actually reference the

329
00:18:29,820 --> 00:18:36,480
<font color="#E5E5E5">very symbol we were looking for</font>

330
00:18:31,470 --> 00:18:40,740
<font color="#CCCCCC">references for so for each dependent</font><font color="#E5E5E5"> we</font>

331
00:18:36,480 --> 00:18:43,530
create a new server connection and we

332
00:18:40,740 --> 00:18:46,610
ask the server for references to<font color="#CCCCCC"> the URI</font>

333
00:18:43,530 --> 00:18:50,070
<font color="#CCCCCC">of the definition</font><font color="#E5E5E5"> and the server</font>

334
00:18:46,610 --> 00:18:52,899
recognizes that this<font color="#E5E5E5"> your I it should</font>

335
00:18:50,070 --> 00:18:55,169
get references<font color="#CCCCCC"> for it's not</font><font color="#E5E5E5"> in</font>

336
00:18:52,900 --> 00:19:00,760
a<font color="#E5E5E5"> project that was initialized it's an</font>

337
00:18:55,170 --> 00:19:04,570
out-of-work space your eye<font color="#E5E5E5"> and it knows</font>

338
00:19:00,760 --> 00:19:06,430
that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> needs to find this not inside</font>

339
00:19:04,570 --> 00:19:12,520
the source code<font color="#E5E5E5"> but somewhere in note</font>

340
00:19:06,430 --> 00:19:16,180
modules so it<font color="#CCCCCC"> basically runs</font><font color="#E5E5E5"> the inverse</font>

341
00:19:12,520 --> 00:19:20,200
steps of go to definition<font color="#E5E5E5"> it finds the</font>

342
00:19:16,180 --> 00:19:22,720
closest package.json<font color="#CCCCCC"> by walking up the</font>

343
00:19:20,200 --> 00:19:27,070
URL<font color="#E5E5E5"> and trying out different locations</font>

344
00:19:22,720 --> 00:19:30,070
to<font color="#CCCCCC"> figure out the package name then it</font>

345
00:19:27,070 --> 00:19:34,570
can find this package<font color="#CCCCCC"> insight note</font>

346
00:19:30,070 --> 00:19:38,439
modules<font color="#E5E5E5"> and it searches for</font><font color="#CCCCCC"> Dada</font>

347
00:19:34,570 --> 00:19:44,700
<font color="#CCCCCC">TS on map files that point to this</font>

348
00:19:38,440 --> 00:19:47,230
source file<font color="#E5E5E5"> that we're looking for and</font>

349
00:19:44,700 --> 00:19:51,550
once we have that we<font color="#CCCCCC"> can use that</font>

350
00:19:47,230 --> 00:19:55,020
<font color="#CCCCCC">declaration map to map the position in</font>

351
00:19:51,550 --> 00:19:58,120
the source file<font color="#E5E5E5"> to a position in the</font>

352
00:19:55,020 --> 00:20:02,889
<font color="#E5E5E5">declaration file so it's like a reverse</font>

353
00:19:58,120 --> 00:20:05,080
map<font color="#CCCCCC"> now we're</font><font color="#E5E5E5"> going from source to</font>

354
00:20:02,890 --> 00:20:07,240
declaration files<font color="#E5E5E5"> because this</font>

355
00:20:05,080 --> 00:20:10,899
declaration file<font color="#E5E5E5"> actually exists in node</font>

356
00:20:07,240 --> 00:20:14,080
modules this doesn't and once we have

357
00:20:10,900 --> 00:20:18,480
this<font color="#E5E5E5"> position we can send that position</font>

358
00:20:14,080 --> 00:20:20,409
to TS server ask for references<font color="#CCCCCC"> and</font>

359
00:20:18,480 --> 00:20:22,960
since we do that for a lot of

360
00:20:20,410 --> 00:20:27,580
repositories we then accumulate all the

361
00:20:22,960 --> 00:20:32,470
results<font color="#E5E5E5"> and stream them to a client so I</font>

362
00:20:27,580 --> 00:20:35,439
can say fine references on a<font color="#E5E5E5"> symbol and</font>

363
00:20:32,470 --> 00:20:40,200
get<font color="#CCCCCC"> stream references</font><font color="#E5E5E5"> and completely</font>

364
00:20:35,440 --> 00:20:40,200
<font color="#CCCCCC">different repositories than this one</font>

365
00:20:47,659 --> 00:20:54,929
unfortunately it's<font color="#E5E5E5"> not always sunshine</font>

366
00:20:51,269 --> 00:20:58,649
and rainbows<font color="#E5E5E5"> when developing this one of</font>

367
00:20:54,929 --> 00:21:01,860
the biggest<font color="#CCCCCC"> pains</font><font color="#E5E5E5"> with this is that TS</font>

368
00:20:58,649 --> 00:21:06,600
<font color="#CCCCCC">server is very</font><font color="#E5E5E5"> focused on this editor</font>

369
00:21:01,860 --> 00:21:08,699
use use case with very<font color="#CCCCCC"> high-level api's</font>

370
00:21:06,600 --> 00:21:11,519
that provide like just the features<font color="#CCCCCC"> that</font>

371
00:21:08,700 --> 00:21:14,299
you commonly want<font color="#CCCCCC"> in</font><font color="#E5E5E5"> editors like go to</font>

372
00:21:11,519 --> 00:21:17,340
definition<font color="#CCCCCC"> find references find symbols</font>

373
00:21:14,299 --> 00:21:19,559
but it also means<font color="#E5E5E5"> that it's</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> like</font>

374
00:21:17,340 --> 00:21:22,139
a black<font color="#E5E5E5"> box that</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> provides this</font>

375
00:21:19,559 --> 00:21:25,019
<font color="#CCCCCC">high-level API and it does a lot of</font>

376
00:21:22,139 --> 00:21:27,269
<font color="#E5E5E5">things asynchronously</font><font color="#CCCCCC"> like compiling in</font>

377
00:21:25,019 --> 00:21:31,769
the background<font color="#E5E5E5"> in handling file watch</font>

378
00:21:27,269 --> 00:21:35,899
events<font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> often no way to know</font>

379
00:21:31,769 --> 00:21:38,820
when<font color="#E5E5E5"> TSO is actually done with compiling</font>

380
00:21:35,899 --> 00:21:42,199
<font color="#CCCCCC">something or when it has started</font><font color="#E5E5E5"> to</font>

381
00:21:38,820 --> 00:21:46,110
<font color="#E5E5E5">consider a new files</font><font color="#CCCCCC"> I just added</font><font color="#E5E5E5"> and</font>

382
00:21:42,200 --> 00:21:49,619
<font color="#E5E5E5">that can be programmatic</font><font color="#CCCCCC"> problematic</font>

383
00:21:46,110 --> 00:21:52,049
when you're doing global<font color="#E5E5E5"> fine references</font>

384
00:21:49,619 --> 00:21:56,249
where you initialize and then straight

385
00:21:52,049 --> 00:21:58,549
send another request<font color="#E5E5E5"> because there's no</font>

386
00:21:56,249 --> 00:22:00,960
way<font color="#E5E5E5"> to know whether TS server is already</font>

387
00:21:58,549 --> 00:22:02,970
<font color="#E5E5E5">finished with compiling everything and</font>

388
00:22:00,960 --> 00:22:07,139
until then it will<font color="#CCCCCC"> just return</font>

389
00:22:02,970 --> 00:22:08,519
<font color="#E5E5E5">incomplete results with no indication so</font>

390
00:22:07,139 --> 00:22:11,149
that would be kind of a wish for the

391
00:22:08,519 --> 00:22:17,100
<font color="#CCCCCC">types</font><font color="#E5E5E5"> of team to allow more hooks into</font>

392
00:22:11,149 --> 00:22:20,369
figuring<font color="#E5E5E5"> out when TS server is done with</font>

393
00:22:17,100 --> 00:22:23,248
<font color="#E5E5E5">something and a similar problem</font><font color="#CCCCCC"> with</font>

394
00:22:20,369 --> 00:22:25,850
yarn and<font color="#E5E5E5"> PM given with that it's a CLI</font>

395
00:22:23,249 --> 00:22:28,830
tool there<font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> really any way to</font>

396
00:22:25,850 --> 00:22:31,740
efficiently<font color="#E5E5E5"> hook</font><font color="#CCCCCC"> into the installation</font>

397
00:22:28,830 --> 00:22:33,990
<font color="#E5E5E5">process</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for example filter out any</font>

398
00:22:31,740 --> 00:22:40,350
packages that that don't<font color="#E5E5E5"> contain type</font>

399
00:22:33,990 --> 00:22:42,840
declarations<font color="#E5E5E5"> there's some light at the</font>

400
00:22:40,350 --> 00:22:46,498
<font color="#CCCCCC">end of the tunnel though yarn</font><font color="#E5E5E5"> 2.0</font>

401
00:22:42,840 --> 00:22:48,899
<font color="#E5E5E5">plugins should allow something</font><font color="#CCCCCC"> like this</font>

402
00:22:46,499 --> 00:22:55,019
where you can hook into the install

403
00:22:48,899 --> 00:22:55,860
process and yarn<font color="#E5E5E5"> 2.0 is basically going</font>

404
00:22:55,019 --> 00:22:57,929
to be<font color="#E5E5E5"> completely</font>

405
00:22:55,860 --> 00:23:01,229
<font color="#CCCCCC">different in yarn 1.0</font><font color="#E5E5E5"> and that it's not</font>

406
00:22:57,929 --> 00:23:03,270
targeting<font color="#E5E5E5"> the CLI use case first but</font>

407
00:23:01,230 --> 00:23:05,670
it's going to be API first and CLI

408
00:23:03,270 --> 00:23:09,389
second<font color="#E5E5E5"> so that's very</font><font color="#CCCCCC"> exciting for</font>

409
00:23:05,670 --> 00:23:12,840
programmatic use cases<font color="#E5E5E5"> and then another</font>

410
00:23:09,390 --> 00:23:18,200
<font color="#E5E5E5">problem and big future potential is in</font>

411
00:23:12,840 --> 00:23:21,360
elsif<font color="#E5E5E5"> going through each dependent for</font>

412
00:23:18,200 --> 00:23:26,400
global<font color="#E5E5E5"> references can take a lot of time</font>

413
00:23:21,360 --> 00:23:29,040
and can<font color="#CCCCCC"> be very slow it's fine</font><font color="#E5E5E5"> for when</font>

414
00:23:26,400 --> 00:23:31,740
you just<font color="#E5E5E5"> want a small set</font><font color="#CCCCCC"> of examples of</font>

415
00:23:29,040 --> 00:23:33,990
<font color="#E5E5E5">how</font><font color="#CCCCCC"> your function is use but if</font><font color="#E5E5E5"> you want</font>

416
00:23:31,740 --> 00:23:37,290
like an exhaustive<font color="#E5E5E5"> list of all the</font>

417
00:23:33,990 --> 00:23:39,330
<font color="#CCCCCC">references to assemble for example</font>

418
00:23:37,290 --> 00:23:41,840
because you<font color="#E5E5E5"> need to refactor them then</font>

419
00:23:39,330 --> 00:23:44,520
it can<font color="#CCCCCC"> really take a long</font><font color="#E5E5E5"> time and</font>

420
00:23:41,840 --> 00:23:47,520
that's<font color="#E5E5E5"> where</font><font color="#CCCCCC"> elsif comes in which is a</font>

421
00:23:44,520 --> 00:23:50,668
<font color="#E5E5E5">very recent proposal by Microsoft</font><font color="#CCCCCC"> it's</font>

422
00:23:47,520 --> 00:23:56,070
called the language<font color="#E5E5E5"> server index format</font>

423
00:23:50,669 --> 00:24:00,260
and<font color="#E5E5E5"> it's dumped by language servers</font><font color="#CCCCCC"> and</font>

424
00:23:56,070 --> 00:24:02,120
<font color="#E5E5E5">it's basically like a cache so you can</font>

425
00:24:00,260 --> 00:24:05,850
<font color="#E5E5E5">answer</font>

426
00:24:02,120 --> 00:24:08,639
LSP requests from<font color="#E5E5E5"> that index without</font>

427
00:24:05,850 --> 00:24:11,610
<font color="#E5E5E5">having to spawn and initialize and a</font>

428
00:24:08,640 --> 00:24:14,760
language<font color="#E5E5E5"> server and it having to analyze</font>

429
00:24:11,610 --> 00:24:19,040
<font color="#CCCCCC">the project so that would speed up this</font>

430
00:24:14,760 --> 00:24:24,000
whole<font color="#CCCCCC"> find</font><font color="#E5E5E5"> references thing drastically</font>

431
00:24:19,040 --> 00:24:26,760
and last words<font color="#E5E5E5"> everything I</font><font color="#CCCCCC"> just shown</font>

432
00:24:24,000 --> 00:24:30,090
<font color="#E5E5E5">is life in production and you can try it</font>

433
00:24:26,760 --> 00:24:32,660
out<font color="#E5E5E5"> on source graph</font><font color="#CCCCCC"> comm if you want to</font>

434
00:24:30,090 --> 00:24:35,040
try<font color="#E5E5E5"> it out on github or another kodos</font>

435
00:24:32,660 --> 00:24:39,480
<font color="#CCCCCC">you can install the source graft browser</font>

436
00:24:35,040 --> 00:24:43,168
extension which<font color="#CCCCCC"> is free</font><font color="#E5E5E5"> and I should</font>

437
00:24:39,480 --> 00:24:45,120
have put a QR<font color="#CCCCCC"> code on</font><font color="#E5E5E5"> there and also</font>

438
00:24:43,169 --> 00:24:48,210
everything<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> shown is open source</font>

439
00:24:45,120 --> 00:24:50,370
source cough itself is<font color="#E5E5E5"> open source the</font>

440
00:24:48,210 --> 00:24:54,830
typescript support is open source you

441
00:24:50,370 --> 00:24:58,399
<font color="#E5E5E5">can fork it contribute look at the code</font>

442
00:24:54,830 --> 00:24:58,399
<font color="#E5E5E5">hack around with it</font>

443
00:24:58,870 --> 00:25:04,590
thank you for<font color="#E5E5E5"> listening and you can ask</font>

444
00:25:02,830 --> 00:25:13,270
<font color="#E5E5E5">me anything</font>

445
00:25:04,590 --> 00:25:13,270
[Applause]

446
00:25:18,430 --> 00:25:35,010
no question<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> sorry can you speak</font><font color="#E5E5E5"> up a</font>

447
00:25:23,350 --> 00:25:39,810
<font color="#CCCCCC">bit yeah so in the case of private repos</font>

448
00:25:35,010 --> 00:25:42,040
<font color="#CCCCCC">you need to somehow provide</font>

449
00:25:39,810 --> 00:25:45,070
<font color="#E5E5E5">authorization to the language server to</font>

450
00:25:42,040 --> 00:25:46,990
<font color="#CCCCCC">access that repo one way</font><font color="#E5E5E5"> to do that is</font>

451
00:25:45,070 --> 00:25:50,530
actually to<font color="#E5E5E5"> put the access token right</font>

452
00:25:46,990 --> 00:25:54,190
<font color="#E5E5E5">into the root URI which github supports</font>

453
00:25:50,530 --> 00:25:56,320
source<font color="#CCCCCC"> cop supports</font><font color="#E5E5E5"> that too so the</font>

454
00:25:54,190 --> 00:25:59,590
public typescript outsource<font color="#CCCCCC"> Capcom</font>

455
00:25:56,320 --> 00:26:02,590
instance<font color="#E5E5E5"> off the TS server can actually</font>

456
00:25:59,590 --> 00:26:04,689
also<font color="#E5E5E5"> be used to point it to private</font>

457
00:26:02,590 --> 00:26:07,689
instances of source graph or get<font color="#E5E5E5"> up</font>

458
00:26:04,690 --> 00:26:12,750
<font color="#E5E5E5">enterprise and download private</font>

459
00:26:07,690 --> 00:26:15,250
repositories and you can also set up a

460
00:26:12,750 --> 00:26:18,760
<font color="#E5E5E5">private source</font><font color="#CCCCCC"> graph instance that</font><font color="#E5E5E5"> holds</font>

461
00:26:15,250 --> 00:26:21,120
all<font color="#E5E5E5"> your private repositories to free</font>

462
00:26:18,760 --> 00:26:21,120
the trial

463
00:26:21,790 --> 00:26:32,760
any other questions sorry<font color="#CCCCCC"> yeah</font>

464
00:26:36,750 --> 00:26:40,070
any other questions

