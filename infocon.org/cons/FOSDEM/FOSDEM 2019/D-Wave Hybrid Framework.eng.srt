1
00:00:05,020 --> 00:00:15,459
so<font color="#CCCCCC"> alex is giving a nice overview</font><font color="#E5E5E5"> of how</font>

2
00:00:10,940 --> 00:00:18,830
<font color="#E5E5E5">to solve a problem</font><font color="#CCCCCC"> and he waves to you</font>

3
00:00:15,460 --> 00:00:24,220
and nice<font color="#E5E5E5"> to review of our ocean stack</font>

4
00:00:18,830 --> 00:00:26,359
ocean is decay<font color="#E5E5E5"> so how to how</font><font color="#CCCCCC"> to map</font>

5
00:00:24,220 --> 00:00:30,009
application-specific them a<font color="#E5E5E5"> specific</font>

6
00:00:26,359 --> 00:00:32,210
application<font color="#E5E5E5"> domain problem</font><font color="#CCCCCC"> onto to</font>

7
00:00:30,010 --> 00:00:33,949
something<font color="#CCCCCC"> that we currently support like</font>

8
00:00:32,210 --> 00:00:37,519
graph mapping or<font color="#E5E5E5"> constraint compilation</font>

9
00:00:33,949 --> 00:00:39,170
<font color="#E5E5E5">and then to map that</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> your B cam and</font>

10
00:00:37,519 --> 00:00:42,580
then when you have<font color="#CCCCCC"> became</font><font color="#E5E5E5"> you can use</font>

11
00:00:39,170 --> 00:00:45,290
some of<font color="#CCCCCC"> the samplers to solve them</font>

12
00:00:42,580 --> 00:00:48,559
however the problem<font color="#CCCCCC"> outs mention</font><font color="#E5E5E5"> with</font>

13
00:00:45,290 --> 00:00:51,500
with what<font color="#CCCCCC"> the field problem is too big</font>

14
00:00:48,559 --> 00:00:54,589
to fit the capir then you<font color="#E5E5E5"> need to resort</font>

15
00:00:51,500 --> 00:00:56,900
<font color="#E5E5E5">to decomposition</font><font color="#CCCCCC"> you need to slice the</font>

16
00:00:54,589 --> 00:00:59,170
problem onto<font color="#E5E5E5"> small problems and solve</font>

17
00:00:56,900 --> 00:01:02,210
each small problem Monica Pier and

18
00:00:59,170 --> 00:01:06,799
<font color="#E5E5E5">dear--if hybrid is is a framework we</font>

19
00:01:02,210 --> 00:01:09,680
developed<font color="#E5E5E5"> - it fits in in in this layer</font>

20
00:01:06,799 --> 00:01:13,190
of samplers it allows you<font color="#E5E5E5"> to construct a</font>

21
00:01:09,680 --> 00:01:17,510
new<font color="#E5E5E5"> sampler which is decomposing samples</font>

22
00:01:13,190 --> 00:01:18,860
so<font color="#E5E5E5"> hybrid stands for actually hybrid</font>

23
00:01:17,510 --> 00:01:21,560
synchronous decomposition simple

24
00:01:18,860 --> 00:01:26,600
<font color="#CCCCCC">framework</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> seminal by minimal Python</font>

25
00:01:21,560 --> 00:01:28,480
framework<font color="#E5E5E5"> heavily leverages ocean tools</font>

26
00:01:26,600 --> 00:01:32,479
<font color="#E5E5E5">and it's built the top of ocean tools</font>

27
00:01:28,480 --> 00:01:37,190
and and the actual framework<font color="#E5E5E5"> is just</font>

28
00:01:32,480 --> 00:01:40,450
minimal minimal syntactic glue the<font color="#CCCCCC"> binds</font>

29
00:01:37,190 --> 00:01:43,460
all that together<font color="#E5E5E5"> and it allows you to</font>

30
00:01:40,450 --> 00:01:45,980
leverage quantum and classical resources

31
00:01:43,460 --> 00:01:48,710
<font color="#CCCCCC">because as I just mentioned you</font>

32
00:01:45,980 --> 00:01:51,200
<font color="#E5E5E5">sometimes want</font><font color="#CCCCCC"> to you know want to solve</font>

33
00:01:48,710 --> 00:01:53,750
some of the problem portions of your

34
00:01:51,200 --> 00:01:55,909
problem on<font color="#CCCCCC"> a classical or some sub</font>

35
00:01:53,750 --> 00:01:57,440
<font color="#CCCCCC">problems classically and some quantum we</font>

36
00:01:55,909 --> 00:02:03,170
<font color="#E5E5E5">using a kewpie or some other quantum</font>

37
00:01:57,440 --> 00:02:06,620
<font color="#CCCCCC">machine so you</font><font color="#E5E5E5"> need to have</font><font color="#CCCCCC"> a way to to</font>

38
00:02:03,170 --> 00:02:09,049
combine those<font color="#E5E5E5"> easily and since they were</font>

39
00:02:06,620 --> 00:02:11,420
<font color="#E5E5E5">hybrid basically as you will see soon is</font>

40
00:02:09,049 --> 00:02:16,760
a dataflow programming model<font color="#E5E5E5"> paradigm</font>

41
00:02:11,420 --> 00:02:18,769
kind of language independent<font color="#E5E5E5"> parts are</font>

42
00:02:16,760 --> 00:02:21,440
executed concurrently

43
00:02:18,770 --> 00:02:27,230
and the concept concept<font color="#E5E5E5"> of decomposition</font>

44
00:02:21,440 --> 00:02:29,180
<font color="#E5E5E5">is inherent so usually when you when you</font>

45
00:02:27,230 --> 00:02:32,000
want to use hybrid<font color="#E5E5E5"> you and you have a</font>

46
00:02:29,180 --> 00:02:34,130
large problem<font color="#E5E5E5"> so problems are broken</font>

47
00:02:32,000 --> 00:02:36,230
into<font color="#CCCCCC"> pieces</font><font color="#E5E5E5"> and the concept of</font>

48
00:02:34,130 --> 00:02:42,980
probabilistic<font color="#E5E5E5"> sampling or probabilistic</font>

49
00:02:36,230 --> 00:02:45,350
approach is embedded or<font color="#CCCCCC"> Core 2 2 hybrid</font>

50
00:02:42,980 --> 00:02:49,730
<font color="#E5E5E5">because we use sample sets or sets of</font>

51
00:02:45,350 --> 00:02:50,989
samples<font color="#CCCCCC"> to</font><font color="#E5E5E5"> represent our solution so</font>

52
00:02:49,730 --> 00:02:53,390
quick motivation

53
00:02:50,990 --> 00:02:56,990
imagine you have a pseudo code for your

54
00:02:53,390 --> 00:02:59,119
<font color="#E5E5E5">elbows</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we want to use</font><font color="#CCCCCC"> I experts like</font>

55
00:02:56,990 --> 00:03:01,610
that<font color="#CCCCCC"> say you see you have some taboo</font>

56
00:02:59,120 --> 00:03:05,830
<font color="#E5E5E5">search over there you have</font><font color="#CCCCCC"> decomposition</font>

57
00:03:01,610 --> 00:03:08,720
<font color="#E5E5E5">based on the based on energy impact of</font>

58
00:03:05,830 --> 00:03:10,540
variables<font color="#E5E5E5"> at a particular sample that</font>

59
00:03:08,720 --> 00:03:12,920
you're deconstructing your problem at

60
00:03:10,540 --> 00:03:15,440
then<font color="#E5E5E5"> you have some loops then have some</font>

61
00:03:12,920 --> 00:03:18,230
<font color="#E5E5E5">sampling on a keep you and that</font><font color="#CCCCCC"> usually</font>

62
00:03:15,440 --> 00:03:21,290
translates to a thousand plus lines of C

63
00:03:18,230 --> 00:03:23,630
code<font color="#CCCCCC"> specifically</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> cubes solve and</font>

64
00:03:21,290 --> 00:03:25,790
this<font color="#E5E5E5"> is people source code in C and now</font>

65
00:03:23,630 --> 00:03:28,490
imagine you can you can represent more

66
00:03:25,790 --> 00:03:30,799
<font color="#E5E5E5">or less the same algorithm using a few</font>

67
00:03:28,490 --> 00:03:33,140
<font color="#E5E5E5">lines of Python code and a few blocks</font>

68
00:03:30,800 --> 00:03:35,540
which are understood the chicken tweak

69
00:03:33,140 --> 00:03:41,119
or you can<font color="#E5E5E5"> create</font><font color="#CCCCCC"> your own box but the</font>

70
00:03:35,540 --> 00:03:43,670
point is the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> structure is visible so</font>

71
00:03:41,120 --> 00:03:47,420
<font color="#E5E5E5">the functional structure is is like this</font>

72
00:03:43,670 --> 00:03:52,369
<font color="#E5E5E5">of the solver</font><font color="#CCCCCC"> you can see immediately</font>

73
00:03:47,420 --> 00:03:56,119
<font color="#E5E5E5">you have you have a loop which in two</font>

74
00:03:52,370 --> 00:03:57,770
branches<font color="#CCCCCC"> try to run tabby in parallel</font><font color="#E5E5E5"> it</font>

75
00:03:56,120 --> 00:04:02,740
decomposes the problem based<font color="#E5E5E5"> on energy</font>

76
00:03:57,770 --> 00:04:05,840
<font color="#E5E5E5">impact</font><font color="#CCCCCC"> sense that of TPU the one problem</font>

77
00:04:02,740 --> 00:04:09,950
<font color="#CCCCCC">combines the sub sub solution back to a</font>

78
00:04:05,840 --> 00:04:13,040
global sample<font color="#E5E5E5"> pigs the better one after</font>

79
00:04:09,950 --> 00:04:14,690
so by the way<font color="#E5E5E5"> this red arrow</font><font color="#CCCCCC"> here means</font>

80
00:04:13,040 --> 00:04:17,690
the end<font color="#E5E5E5"> the</font><font color="#CCCCCC"> racing branches which I'll</font>

81
00:04:14,690 --> 00:04:19,940
mention<font color="#CCCCCC"> briefly later</font><font color="#E5E5E5"> the concept is</font>

82
00:04:17,690 --> 00:04:23,300
once the one branch is done it will

83
00:04:19,940 --> 00:04:25,130
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> the other one it'll it'll get</font>

84
00:04:23,300 --> 00:04:27,230
the<font color="#CCCCCC"> best solution from the</font><font color="#E5E5E5"> third branch</font>

85
00:04:25,130 --> 00:04:29,360
<font color="#E5E5E5">it</font><font color="#CCCCCC"> will incorporate that</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> final</font>

86
00:04:27,230 --> 00:04:31,650
solution so we pick<font color="#CCCCCC"> the better solution</font>

87
00:04:29,360 --> 00:04:36,900
here by this<font color="#E5E5E5"> argument block and</font>

88
00:04:31,650 --> 00:04:39,630
loop<font color="#E5E5E5"> until some condition is met so the</font>

89
00:04:36,900 --> 00:04:44,239
idea<font color="#E5E5E5"> is to visually outline the</font>

90
00:04:39,630 --> 00:04:46,770
algorithm for code to be easy to tweak

91
00:04:44,240 --> 00:04:49,620
<font color="#CCCCCC">because you can easily parameters you</font>

92
00:04:46,770 --> 00:04:51,590
can<font color="#E5E5E5"> easily tweak structure and also to</font>

93
00:04:49,620 --> 00:04:56,360
extend<font color="#E5E5E5"> you can create your own blocks</font>

94
00:04:51,590 --> 00:05:00,770
<font color="#E5E5E5">and benchmarking profiling is one of the</font>

95
00:04:56,360 --> 00:05:03,570
core features<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we profile by default</font>

96
00:05:00,770 --> 00:05:05,400
and but also on the other<font color="#E5E5E5"> hand we want</font>

97
00:05:03,570 --> 00:05:07,919
<font color="#CCCCCC">to balance simplicity with with</font>

98
00:05:05,400 --> 00:05:11,039
expressiveness<font color="#CCCCCC"> so this is not as general</font>

99
00:05:07,919 --> 00:05:12,960
as it<font color="#E5E5E5"> could be it's not</font><font color="#CCCCCC"> a you cannot</font>

100
00:05:11,039 --> 00:05:15,620
build<font color="#E5E5E5"> a general general graph you cannot</font>

101
00:05:12,960 --> 00:05:20,989
<font color="#E5E5E5">build terms to flow kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> model this</font>

102
00:05:15,620 --> 00:05:24,590
<font color="#E5E5E5">because we wanted to</font><font color="#CCCCCC"> just stick to</font><font color="#E5E5E5"> two</font>

103
00:05:20,990 --> 00:05:27,810
functionality<font color="#E5E5E5"> you usually required by</font>

104
00:05:24,590 --> 00:05:30,479
very algorithms to<font color="#E5E5E5"> be studied for</font>

105
00:05:27,810 --> 00:05:32,250
<font color="#CCCCCC">decomposition so and we wanted</font><font color="#E5E5E5"> to</font>

106
00:05:30,479 --> 00:05:35,699
<font color="#E5E5E5">provide a library of such building</font>

107
00:05:32,250 --> 00:05:40,199
blocks which<font color="#E5E5E5"> are then understood and</font>

108
00:05:35,699 --> 00:05:42,599
easily extendable by developers so quick

109
00:05:40,199 --> 00:05:45,180
demo<font color="#CCCCCC"> I'm not sure you</font><font color="#E5E5E5"> can you can see</font>

110
00:05:42,599 --> 00:05:47,789
<font color="#E5E5E5">the code</font><font color="#CCCCCC"> here I can actually</font><font color="#E5E5E5"> I can</font>

111
00:05:45,180 --> 00:05:51,120
<font color="#CCCCCC">actually run the</font><font color="#E5E5E5"> demo on the system just</font>

112
00:05:47,789 --> 00:05:53,039
for<font color="#CCCCCC"> this why not</font><font color="#E5E5E5"> because this is short</font>

113
00:05:51,120 --> 00:05:58,340
presentation<font color="#E5E5E5"> stuff so I might as well</font>

114
00:05:53,039 --> 00:05:58,340
spend<font color="#CCCCCC"> some</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> on our</font><font color="#E5E5E5"> live demo</font>

115
00:05:59,669 --> 00:06:09,508
and by the<font color="#E5E5E5"> way we have a higher latency</font>

116
00:06:05,069 --> 00:06:13,020
here from<font color="#CCCCCC"> Europe but</font><font color="#E5E5E5"> I can still still</font>

117
00:06:09,509 --> 00:06:16,740
up in<font color="#E5E5E5"> the system and</font><font color="#CCCCCC"> this y5 is</font><font color="#E5E5E5"> not</font>

118
00:06:13,020 --> 00:06:20,460
Wi-Fi is<font color="#E5E5E5"> not that fast either but</font><font color="#CCCCCC"> okay</font>

119
00:06:16,740 --> 00:06:23,009
so the total<font color="#E5E5E5"> run time for for one fetch</font>

120
00:06:20,460 --> 00:06:24,419
for one sample is or one sampling is<font color="#CCCCCC"> at</font>

121
00:06:23,009 --> 00:06:28,620
<font color="#E5E5E5">one point five seconds which is</font><font color="#CCCCCC"> pretty</font>

122
00:06:24,419 --> 00:06:35,039
slow<font color="#CCCCCC"> but haven't</font><font color="#E5E5E5"> had in mind</font><font color="#CCCCCC"> that why</font>

123
00:06:28,620 --> 00:06:40,550
fight<font color="#CCCCCC"> Europe to to</font><font color="#E5E5E5"> us connection never</font>

124
00:06:35,039 --> 00:06:40,550
so you see yeah

125
00:06:44,069 --> 00:06:52,169
<font color="#E5E5E5">mr.</font><font color="#CCCCCC"> Schorr</font><font color="#E5E5E5"> piece of code so this is the</font>

126
00:06:49,860 --> 00:06:55,050
<font color="#E5E5E5">workflow which you saw previously</font><font color="#CCCCCC"> and</font>

127
00:06:52,169 --> 00:07:01,020
then just before<font color="#CCCCCC"> running that okay</font>

128
00:06:55,050 --> 00:07:03,509
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> not it's not unlike this</font><font color="#E5E5E5"> is</font>

129
00:07:01,020 --> 00:07:07,020
another one with the with a simulated

130
00:07:03,509 --> 00:07:11,369
annealing<font color="#E5E5E5"> some</font><font color="#CCCCCC"> subsample here and not</font>

131
00:07:07,020 --> 00:07:14,299
<font color="#E5E5E5">keep you one so I actually need to do is</font>

132
00:07:11,369 --> 00:07:17,300
<font color="#E5E5E5">the keep you okay I'll use this one</font><font color="#CCCCCC"> ah</font>

133
00:07:14,300 --> 00:07:17,300
sorry

134
00:07:18,140 --> 00:07:22,530
so now this<font color="#CCCCCC"> is a little bit slower</font>

135
00:07:20,190 --> 00:07:24,810
because they keep<font color="#E5E5E5"> you block actually on</font>

136
00:07:22,530 --> 00:07:28,219
this<font color="#E5E5E5"> in this step where we</font><font color="#CCCCCC"> are actually</font>

137
00:07:24,810 --> 00:07:31,470
constructing the the<font color="#E5E5E5"> runnable object we</font>

138
00:07:28,220 --> 00:07:33,360
we are contacting the wave and fetching

139
00:07:31,470 --> 00:07:35,370
a list of available solvers and<font color="#E5E5E5"> picking</font>

140
00:07:33,360 --> 00:07:39,000
the first<font color="#E5E5E5"> one which will actually</font><font color="#CCCCCC"> use</font>

141
00:07:35,370 --> 00:07:41,700
<font color="#CCCCCC">fork ups sampling</font><font color="#E5E5E5"> so the workflow is</font>

142
00:07:39,000 --> 00:07:44,130
defined<font color="#CCCCCC"> become for this demo I'll just</font>

143
00:07:41,700 --> 00:07:47,039
use the simplest possible<font color="#CCCCCC"> become you</font><font color="#E5E5E5"> can</font>

144
00:07:44,130 --> 00:07:51,920
you can<font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> just a triangle with</font><font color="#E5E5E5"> ABC</font>

145
00:07:47,040 --> 00:07:54,810
nodes<font color="#E5E5E5"> and it's a frustrated triangle and</font>

146
00:07:51,920 --> 00:07:57,960
then based on<font color="#E5E5E5"> the peak um we will</font>

147
00:07:54,810 --> 00:08:00,930
construct<font color="#E5E5E5"> a state</font><font color="#CCCCCC"> a hybrid state which</font>

148
00:07:57,960 --> 00:08:05,130
looks<font color="#E5E5E5"> it's more or less glorified</font>

149
00:08:00,930 --> 00:08:07,260
dictionary<font color="#CCCCCC"> it has it contains the</font>

150
00:08:05,130 --> 00:08:09,480
problem<font color="#E5E5E5"> and samples but you can put</font>

151
00:08:07,260 --> 00:08:12,630
whatever you want in<font color="#CCCCCC"> that state and</font><font color="#E5E5E5"> then</font>

152
00:08:09,480 --> 00:08:14,930
you run the workflow<font color="#E5E5E5"> like this it's some</font>

153
00:08:12,630 --> 00:08:14,930
state

154
00:08:17,040 --> 00:08:24,460
you get the<font color="#E5E5E5"> feature back</font><font color="#CCCCCC"> and still</font>

155
00:08:22,540 --> 00:08:26,910
<font color="#E5E5E5">running so it's sampling it has several</font>

156
00:08:24,460 --> 00:08:31,060
iterations<font color="#E5E5E5"> that needs to learn to</font><font color="#CCCCCC"> do</font>

157
00:08:26,910 --> 00:08:34,469
it's done now we can see the results and

158
00:08:31,060 --> 00:08:37,000
the result is is is the final state

159
00:08:34,469 --> 00:08:40,450
which in this case you can see the

160
00:08:37,000 --> 00:08:46,750
energy<font color="#E5E5E5"> is minus</font><font color="#CCCCCC"> three and</font><font color="#E5E5E5"> that's the the</font>

161
00:08:40,450 --> 00:08:54,610
ground<font color="#CCCCCC"> state</font><font color="#E5E5E5"> actually so yeah</font><font color="#CCCCCC"> back to</font>

162
00:08:46,750 --> 00:08:59,890
<font color="#CCCCCC">this that</font><font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> mind might have</font>

163
00:08:54,610 --> 00:09:01,330
<font color="#CCCCCC">noticed that</font><font color="#E5E5E5"> the basic block is the the</font>

164
00:08:59,890 --> 00:09:08,949
class is that it's a runnable<font color="#E5E5E5"> type</font>

165
00:09:01,330 --> 00:09:11,500
<font color="#E5E5E5">actually which is composable top-down</font><font color="#CCCCCC"> as</font>

166
00:09:08,950 --> 00:09:13,270
you can see from<font color="#E5E5E5"> the example there and</font>

167
00:09:11,500 --> 00:09:14,529
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the one representation this is</font>

168
00:09:13,270 --> 00:09:18,449
<font color="#E5E5E5">maybe a more reasonable representation</font>

169
00:09:14,529 --> 00:09:20,260
of the flow which is<font color="#E5E5E5"> being</font><font color="#CCCCCC"> executed here</font>

170
00:09:18,450 --> 00:09:25,060
<font color="#CCCCCC">so we have</font><font color="#E5E5E5"> branch</font><font color="#CCCCCC"> Best Inventions</font>

171
00:09:20,260 --> 00:09:28,000
<font color="#CCCCCC">argument samplers and all that</font><font color="#E5E5E5"> all</font>

172
00:09:25,060 --> 00:09:29,979
components around<font color="#CCCCCC"> both types</font><font color="#E5E5E5"> a runnable</font>

173
00:09:28,000 --> 00:09:32,380
takes in state and produces another

174
00:09:29,980 --> 00:09:37,960
state<font color="#E5E5E5"> it's executed</font><font color="#CCCCCC"> synchronous so you</font>

175
00:09:32,380 --> 00:09:44,050
can control which executor is<font color="#CCCCCC"> run in it</font>

176
00:09:37,960 --> 00:09:47,100
<font color="#E5E5E5">also every</font><font color="#CCCCCC"> runnable implements some</font>

177
00:09:44,050 --> 00:09:49,479
traits and trade drapes constrain

178
00:09:47,100 --> 00:09:54,040
connectivity with their blocks and<font color="#E5E5E5"> also</font>

179
00:09:49,480 --> 00:09:57,510
constrain input and output<font color="#CCCCCC"> States and</font>

180
00:09:54,040 --> 00:09:57,510
<font color="#CCCCCC">everyone</font><font color="#E5E5E5"> was profiled by default</font>

181
00:09:59,430 --> 00:10:10,670
so the yeah<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> other primitive</font>

182
00:10:05,300 --> 00:10:14,640
<font color="#E5E5E5">importance is in the state which is a</font>

183
00:10:10,670 --> 00:10:17,339
something like<font color="#CCCCCC"> a immutable mapping type</font>

184
00:10:14,640 --> 00:10:18,300
<font color="#E5E5E5">wrapped in a future it's passed between</font>

185
00:10:17,340 --> 00:10:20,880
<font color="#CCCCCC">rebels</font>

186
00:10:18,300 --> 00:10:22,589
it carries whatever you need<font color="#CCCCCC"> to do you</font>

187
00:10:20,880 --> 00:10:24,300
need<font color="#CCCCCC"> to carry</font><font color="#E5E5E5"> between stage between</font>

188
00:10:22,590 --> 00:10:26,820
<font color="#E5E5E5">rebels to solve</font><font color="#CCCCCC"> your problem usually</font>

189
00:10:24,300 --> 00:10:29,339
<font color="#CCCCCC">that submit at minimum</font><font color="#E5E5E5"> that's problem</font>

190
00:10:26,820 --> 00:10:35,400
and samples or sub problem and

191
00:10:29,340 --> 00:10:38,040
<font color="#CCCCCC">sub-samples</font><font color="#E5E5E5"> and compliance is for the of</font>

192
00:10:35,400 --> 00:10:43,680
the protein-protein up which states is

193
00:10:38,040 --> 00:10:47,819
checked on<font color="#E5E5E5"> runtime by Trimble so I would</font>

194
00:10:43,680 --> 00:10:51,319
like<font color="#CCCCCC"> to walk you</font><font color="#E5E5E5"> through small</font><font color="#CCCCCC"> buildup</font>

195
00:10:47,820 --> 00:10:54,390
of that simple example that we just<font color="#E5E5E5"> saw</font>

196
00:10:51,320 --> 00:10:58,220
<font color="#E5E5E5">so one way</font><font color="#CCCCCC"> to modify</font><font color="#E5E5E5"> the workload is by</font>

197
00:10:54,390 --> 00:11:02,189
tweaking parameters for<font color="#CCCCCC"> example in the</font>

198
00:10:58,220 --> 00:11:04,290
the first example we we on each

199
00:11:02,190 --> 00:11:07,500
iteration<font color="#E5E5E5"> we</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> only first subproblem</font>

200
00:11:04,290 --> 00:11:09,990
over here<font color="#CCCCCC"> we're saying</font><font color="#E5E5E5"> let's do rolling</font>

201
00:11:07,500 --> 00:11:14,250
decomposition of<font color="#CCCCCC"> 15% of the of the</font>

202
00:11:09,990 --> 00:11:16,650
<font color="#E5E5E5">problem and</font><font color="#CCCCCC"> on each run</font><font color="#E5E5E5"> take some other</font>

203
00:11:14,250 --> 00:11:19,260
<font color="#CCCCCC">subproblem until they reach their 15% of</font>

204
00:11:16,650 --> 00:11:23,310
the global problem<font color="#CCCCCC"> and you could</font><font color="#E5E5E5"> go draw</font>

205
00:11:19,260 --> 00:11:27,840
for example<font color="#CCCCCC"> the convergence criteria for</font>

206
00:11:23,310 --> 00:11:29,790
<font color="#CCCCCC">your looping and things like that</font><font color="#E5E5E5"> but</font>

207
00:11:27,840 --> 00:11:32,580
<font color="#E5E5E5">then</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> easily also modify</font><font color="#CCCCCC"> this</font>

208
00:11:29,790 --> 00:11:34,770
<font color="#E5E5E5">structure you</font><font color="#CCCCCC"> can see okay</font><font color="#E5E5E5"> let's not</font>

209
00:11:32,580 --> 00:11:39,710
<font color="#E5E5E5">just run one</font><font color="#CCCCCC"> subproblem on each</font>

210
00:11:34,770 --> 00:11:42,600
<font color="#E5E5E5">iteration let's unwind us and</font>

211
00:11:39,710 --> 00:11:44,430
subproblems<font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on the size of the</font>

212
00:11:42,600 --> 00:11:47,040
of the<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> by the way the size</font>

213
00:11:44,430 --> 00:11:51,599
50 there there that's<font color="#E5E5E5"> the size of the</font>

214
00:11:47,040 --> 00:11:53,939
generated<font color="#E5E5E5"> subproblem which will which</font>

215
00:11:51,600 --> 00:11:58,710
will<font color="#E5E5E5"> be then mapped on to install them</font>

216
00:11:53,940 --> 00:12:00,390
to keep you so for<font color="#E5E5E5"> example if you're</font>

217
00:11:58,710 --> 00:12:03,240
<font color="#E5E5E5">solving this one</font><font color="#CCCCCC"> i don't</font><font color="#E5E5E5"> know thousands</font>

218
00:12:00,390 --> 00:12:05,370
variables problem<font color="#CCCCCC"> on each</font><font color="#E5E5E5"> iteration you</font>

219
00:12:03,240 --> 00:12:07,170
would have like seven<font color="#CCCCCC"> subproblems or</font>

220
00:12:05,370 --> 00:12:11,370
something like that<font color="#E5E5E5"> and then you would</font>

221
00:12:07,170 --> 00:12:13,140
run those seven subproblems<font color="#CCCCCC"> in parallel</font>

222
00:12:11,370 --> 00:12:16,440
on a keep you<font color="#E5E5E5"> because you see we have</font>

223
00:12:13,140 --> 00:12:21,680
my produce<font color="#E5E5E5"> here so we would run the same</font>

224
00:12:16,440 --> 00:12:26,190
set of<font color="#E5E5E5"> sub samples of subproblems</font><font color="#CCCCCC"> two to</font>

225
00:12:21,680 --> 00:12:29,670
<font color="#CCCCCC">seven basically parallel executing keep</font>

226
00:12:26,190 --> 00:12:32,250
<font color="#CCCCCC">your sub sample plots we would reduce</font>

227
00:12:29,670 --> 00:12:36,060
<font color="#E5E5E5">the results into one and we would use</font>

228
00:12:32,250 --> 00:12:40,890
<font color="#E5E5E5">that</font><font color="#CCCCCC"> to inform and generate a new</font><font color="#E5E5E5"> or a</font>

229
00:12:36,060 --> 00:12:44,040
next state in the<font color="#E5E5E5"> next sample which will</font>

230
00:12:40,890 --> 00:12:49,649
which might be<font color="#E5E5E5"> better or or not than the</font>

231
00:12:44,040 --> 00:12:54,329
<font color="#CCCCCC">the one we</font><font color="#E5E5E5"> got by the</font><font color="#CCCCCC"> Debus so</font><font color="#E5E5E5"> another</font>

232
00:12:49,649 --> 00:12:56,910
extension let's let's say instead of

233
00:12:54,329 --> 00:12:58,649
<font color="#E5E5E5">just running keep you in peril</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> all</font>

234
00:12:56,910 --> 00:13:01,469
the sub problems at once

235
00:12:58,649 --> 00:13:03,570
let's run maybe some other class maybe

236
00:13:01,470 --> 00:13:08,269
some other<font color="#E5E5E5"> example</font><font color="#CCCCCC"> maybe similarly</font>

237
00:13:03,570 --> 00:13:12,149
kneeling maybe if you just just try with

238
00:13:08,269 --> 00:13:16,190
random variables random<font color="#E5E5E5"> values so we</font>

239
00:13:12,149 --> 00:13:20,100
might escape<font color="#CCCCCC"> the local minimum like that</font>

240
00:13:16,190 --> 00:13:21,810
<font color="#CCCCCC">and then you see the sub sampler is</font>

241
00:13:20,100 --> 00:13:26,130
defined as<font color="#E5E5E5"> a parallel parallel execution</font>

242
00:13:21,810 --> 00:13:34,199
of keep you and in this case random<font color="#E5E5E5"> sub</font>

243
00:13:26,130 --> 00:13:36,720
simpler in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Wroclaw and as I</font>

244
00:13:34,199 --> 00:13:39,660
mentioned<font color="#E5E5E5"> in by the way on the</font><font color="#CCCCCC"> right</font>

245
00:13:36,720 --> 00:13:42,660
hand<font color="#E5E5E5"> side you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the current</font>

246
00:13:39,660 --> 00:13:44,939
structure<font color="#CCCCCC"> of the keep you that Alex was</font>

247
00:13:42,660 --> 00:13:46,949
refraining from talking<font color="#E5E5E5"> because I think</font>

248
00:13:44,940 --> 00:13:49,649
<font color="#E5E5E5">it's important to understand that we are</font>

249
00:13:46,949 --> 00:13:52,699
<font color="#CCCCCC">dealing with a with</font><font color="#E5E5E5"> a finite limits so</font>

250
00:13:49,649 --> 00:13:56,190
every<font color="#E5E5E5"> and this is a particularly bad</font>

251
00:13:52,699 --> 00:13:58,949
<font color="#E5E5E5">yield</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not what we have in</font>

252
00:13:56,190 --> 00:14:01,920
<font color="#E5E5E5">production but some</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> production we</font>

253
00:13:58,949 --> 00:14:05,269
have<font color="#E5E5E5"> more or less fully yield and that</font>

254
00:14:01,920 --> 00:14:07,860
means that every qubit is connected to

255
00:14:05,269 --> 00:14:10,290
exactly six other<font color="#CCCCCC"> qubit says it should</font>

256
00:14:07,860 --> 00:14:13,560
be<font color="#E5E5E5"> connected</font><font color="#CCCCCC"> this is some some</font>

257
00:14:10,290 --> 00:14:15,360
connections here<font color="#CCCCCC"> or missing so this is</font>

258
00:14:13,560 --> 00:14:19,079
just<font color="#E5E5E5"> one of the limitations you need to</font>

259
00:14:15,360 --> 00:14:20,459
deal<font color="#CCCCCC"> with</font><font color="#E5E5E5"> but decomposition is more</font>

260
00:14:19,079 --> 00:14:24,540
general<font color="#CCCCCC"> than that I mean</font><font color="#E5E5E5"> when you're</font>

261
00:14:20,459 --> 00:14:26,609
trying to multiply<font color="#E5E5E5"> two large</font><font color="#CCCCCC"> two big</font>

262
00:14:24,540 --> 00:14:29,079
integers you

263
00:14:26,610 --> 00:14:32,940
if you cannot do<font color="#E5E5E5"> it in a single cycle</font>

264
00:14:29,080 --> 00:14:34,750
<font color="#CCCCCC">you need to divide the problem</font><font color="#E5E5E5"> and</font>

265
00:14:32,940 --> 00:14:38,230
divide and conquer<font color="#E5E5E5"> it</font>

266
00:14:34,750 --> 00:14:42,760
so keep you and kneeling could be

267
00:14:38,230 --> 00:14:44,680
thought<font color="#E5E5E5"> of as as and as you call it the</font>

268
00:14:42,760 --> 00:14:47,439
quantum machine instruction so one

269
00:14:44,680 --> 00:14:51,489
<font color="#CCCCCC">anneal cycle is actually</font><font color="#E5E5E5"> execution of</font>

270
00:14:47,440 --> 00:14:54,279
one one instruction and instruction<font color="#E5E5E5"> acts</font>

271
00:14:51,490 --> 00:14:59,410
on a on a<font color="#CCCCCC"> problem which</font><font color="#E5E5E5"> is a fuel full</font>

272
00:14:54,279 --> 00:15:01,480
<font color="#CCCCCC">bqm and gives you a set of samples the</font>

273
00:14:59,410 --> 00:15:03,520
thing is the composition<font color="#CCCCCC"> is there's no</font>

274
00:15:01,480 --> 00:15:06,250
such thing as<font color="#E5E5E5"> a general decomposition</font>

275
00:15:03,520 --> 00:15:08,230
you can't have<font color="#E5E5E5"> one algorithm which will</font>

276
00:15:06,250 --> 00:15:10,300
apply<font color="#E5E5E5"> to any problem you</font><font color="#CCCCCC"> have you</font><font color="#E5E5E5"> will</font>

277
00:15:08,230 --> 00:15:12,400
you will need to tailor the

278
00:15:10,300 --> 00:15:15,569
decomposition<font color="#CCCCCC"> algorithm to the problem</font>

279
00:15:12,400 --> 00:15:20,439
you have at hand<font color="#E5E5E5"> and obviously to device</font>

280
00:15:15,570 --> 00:15:24,360
<font color="#E5E5E5">complete device</font><font color="#CCCCCC"> there's a paper called</font>

281
00:15:20,440 --> 00:15:24,360
<font color="#E5E5E5">dope free lunch which talks about this</font>

282
00:15:24,600 --> 00:15:30,100
<font color="#E5E5E5">on the other hand there is no shortage</font>

283
00:15:27,430 --> 00:15:32,680
<font color="#E5E5E5">of ideas for the decomposition</font><font color="#CCCCCC"> how to do</font>

284
00:15:30,100 --> 00:15:36,730
it<font color="#E5E5E5"> so there</font><font color="#CCCCCC"> are many heuristic</font>

285
00:15:32,680 --> 00:15:40,180
approaches you can<font color="#E5E5E5"> try and also hybrid</font>

286
00:15:36,730 --> 00:15:42,370
solvers<font color="#E5E5E5"> there are really many</font><font color="#CCCCCC"> many ideas</font>

287
00:15:40,180 --> 00:15:45,760
<font color="#E5E5E5">how to how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> implement and how to</font>

288
00:15:42,370 --> 00:15:48,310
<font color="#E5E5E5">approach them and why I'm talking about</font>

289
00:15:45,760 --> 00:15:51,939
this<font color="#CCCCCC"> because it's easy</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> construct your</font>

290
00:15:48,310 --> 00:15:54,280
<font color="#E5E5E5">own runnable</font><font color="#CCCCCC"> I just need to extend a few</font>

291
00:15:51,940 --> 00:15:56,200
<font color="#CCCCCC">methods</font><font color="#E5E5E5"> there and you can easily permit</font>

292
00:15:54,280 --> 00:15:59,079
a new control flow block<font color="#E5E5E5"> that you're</font>

293
00:15:56,200 --> 00:16:01,480
missing in the hybrid you can you can

294
00:15:59,080 --> 00:16:06,040
implement the new decomposition strategy

295
00:16:01,480 --> 00:16:09,640
<font color="#E5E5E5">you might have or in your sampler for</font>

296
00:16:06,040 --> 00:16:13,500
that matter and we actually would<font color="#E5E5E5"> like</font>

297
00:16:09,640 --> 00:16:19,120
you to do<font color="#E5E5E5"> that it's it's open it's free</font>

298
00:16:13,500 --> 00:16:22,270
<font color="#E5E5E5">so let's be great and by the way here</font>

299
00:16:19,120 --> 00:16:25,240
<font color="#E5E5E5">and on this picture here</font><font color="#CCCCCC"> we see the</font><font color="#E5E5E5"> the</font>

300
00:16:22,270 --> 00:16:28,900
<font color="#E5E5E5">profiling thing by default so the timers</font>

301
00:16:25,240 --> 00:16:32,680
and<font color="#CCCCCC"> counters</font><font color="#E5E5E5"> that we have</font><font color="#CCCCCC"> this shows for</font>

302
00:16:28,900 --> 00:16:34,839
example<font color="#E5E5E5"> in this slipper slipper runnable</font>

303
00:16:32,680 --> 00:16:37,810
we are sleeping for<font color="#CCCCCC"> 3 seconds</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can</font>

304
00:16:34,839 --> 00:16:38,620
see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> dispatch next the total</font>

305
00:16:37,810 --> 00:16:41,739
<font color="#E5E5E5">education</font>

306
00:16:38,620 --> 00:16:44,740
seconds<font color="#E5E5E5"> because that's how much took</font>

307
00:16:41,740 --> 00:16:51,400
<font color="#CCCCCC">four for racing branch of tubulin</font>

308
00:16:44,740 --> 00:16:55,290
<font color="#E5E5E5">slipper to finish as I mentioned</font>

309
00:16:51,400 --> 00:16:58,689
contributions are very welcome

310
00:16:55,290 --> 00:17:02,140
we have a list of<font color="#CCCCCC"> ideas for for things</font>

311
00:16:58,690 --> 00:17:05,710
<font color="#E5E5E5">that could be could</font><font color="#CCCCCC"> be done I mean</font><font color="#E5E5E5"> it's</font>

312
00:17:02,140 --> 00:17:09,970
<font color="#E5E5E5">I</font><font color="#CCCCCC"> gave a hybrid is in early Developer</font>

313
00:17:05,710 --> 00:17:13,630
Preview<font color="#CCCCCC"> State</font><font color="#E5E5E5"> so things will be changing</font>

314
00:17:09,970 --> 00:17:16,660
a<font color="#E5E5E5"> lot and not all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these are created</font>

315
00:17:13,630 --> 00:17:17,950
<font color="#E5E5E5">as issues and github repo but they will</font>

316
00:17:16,660 --> 00:17:22,630
<font color="#E5E5E5">especially if someone</font><font color="#CCCCCC"> is interested</font>

317
00:17:17,950 --> 00:17:25,000
<font color="#E5E5E5">tomorrow we have the workshop so someone</font>

318
00:17:22,630 --> 00:17:26,320
still hack a little bit<font color="#CCCCCC"> that should</font><font color="#E5E5E5"> be</font>

319
00:17:25,000 --> 00:17:29,980
great

320
00:17:26,319 --> 00:17:35,050
oh yeah<font color="#E5E5E5"> and tell me</font><font color="#CCCCCC"> I'd I need to</font>

321
00:17:29,980 --> 00:17:38,290
include<font color="#CCCCCC"> the developer survey</font><font color="#E5E5E5"> we we have</font>

322
00:17:35,050 --> 00:17:43,139
survey out which in which which we are

323
00:17:38,290 --> 00:17:47,170
<font color="#E5E5E5">trying to to get a better feeling of</font>

324
00:17:43,140 --> 00:17:49,920
developer requirements for<font color="#CCCCCC"> for hybrid</font>

325
00:17:47,170 --> 00:17:55,690
<font color="#CCCCCC">and for ocean tools so if you feel</font><font color="#E5E5E5"> like</font>

326
00:17:49,920 --> 00:17:58,030
I would like<font color="#CCCCCC"> to contribute</font><font color="#E5E5E5"> there would</font>

327
00:17:55,690 --> 00:18:00,250
be it feel also<font color="#E5E5E5"> great</font><font color="#CCCCCC"> and the slides are</font>

328
00:17:58,030 --> 00:18:05,010
<font color="#E5E5E5">available online so you can you can see</font>

329
00:18:00,250 --> 00:18:05,010
<font color="#E5E5E5">that link there yeah</font>

330
00:18:08,580 --> 00:18:23,169
[Applause]

331
00:18:12,390 --> 00:18:25,059
any questions what is the<font color="#E5E5E5"> like largest</font>

332
00:18:23,170 --> 00:18:27,969
number of

333
00:18:25,059 --> 00:18:30,789
<font color="#E5E5E5">variables you could imagine to solve</font>

334
00:18:27,969 --> 00:18:32,649
using this hybrid approach<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you know</font>

335
00:18:30,789 --> 00:18:36,209
reasonable<font color="#E5E5E5"> time that's a half an hour</font>

336
00:18:32,649 --> 00:18:39,879
<font color="#CCCCCC">yeah okay</font><font color="#E5E5E5"> so the question is what's the</font>

337
00:18:36,209 --> 00:18:42,159
<font color="#E5E5E5">reasonable number of highest number of</font>

338
00:18:39,879 --> 00:18:43,089
variables<font color="#CCCCCC"> a problem could have we could</font>

339
00:18:42,159 --> 00:18:47,199
<font color="#E5E5E5">tackle with the</font>

340
00:18:43,089 --> 00:18:51,688
this approach so exam<font color="#CCCCCC"> I'm experimenting</font>

341
00:18:47,199 --> 00:18:58,539
with the problems<font color="#E5E5E5"> of size</font><font color="#CCCCCC"> 2000 2500</font>

342
00:18:51,689 --> 00:19:00,669
<font color="#E5E5E5">variables and I think we can we can with</font>

343
00:18:58,539 --> 00:19:02,709
some of the musicians<font color="#CCCCCC"> we can go up to</font>

344
00:19:00,669 --> 00:19:08,799
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> 10,000 problem let's enter</font>

345
00:19:02,709 --> 00:19:11,079
<font color="#E5E5E5">variable problems but yeah so for now I</font>

346
00:19:08,799 --> 00:19:21,489
would<font color="#E5E5E5"> say around</font><font color="#CCCCCC"> the realm of thousands</font>

347
00:19:11,079 --> 00:19:24,039
<font color="#E5E5E5">of variables</font><font color="#CCCCCC"> it's a good point</font><font color="#E5E5E5"> however</font>

348
00:19:21,489 --> 00:19:27,189
<font color="#CCCCCC">that's with the limited</font><font color="#E5E5E5"> connectivity</font>

349
00:19:24,039 --> 00:19:30,519
<font color="#E5E5E5">right so imagine</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have a fully</font>

350
00:19:27,189 --> 00:19:34,479
connected<font color="#CCCCCC"> 2,000 variables then you need</font>

351
00:19:30,519 --> 00:19:36,099
<font color="#E5E5E5">to somehow decompose it run it in in</font>

352
00:19:34,479 --> 00:19:39,269
sections and<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like that</font>

353
00:19:36,099 --> 00:19:39,269
<font color="#E5E5E5">so that's</font>

354
00:19:45,519 --> 00:19:53,029
use<font color="#E5E5E5"> different methods to</font><font color="#CCCCCC"> escaped local</font>

355
00:19:48,739 --> 00:19:57,129
<font color="#CCCCCC">mini-marts just wondering if by</font><font color="#E5E5E5"> default</font>

356
00:19:53,029 --> 00:20:00,679
<font color="#E5E5E5">the whole strategy is theoretically not</font>

357
00:19:57,129 --> 00:20:04,248
<font color="#E5E5E5">guaranteed to give an answer</font><font color="#CCCCCC"> which can</font>

358
00:20:00,679 --> 00:20:08,289
escape<font color="#E5E5E5"> local the local</font><font color="#CCCCCC"> minima problem</font>

359
00:20:04,249 --> 00:20:08,289
still exists even<font color="#CCCCCC"> though maybe the</font>

360
00:20:11,619 --> 00:20:20,749
<font color="#CCCCCC">problem is there</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> somehow so the</font>

361
00:20:18,139 --> 00:20:23,238
question is about<font color="#E5E5E5"> escaping local minima</font>

362
00:20:20,749 --> 00:20:26,080
<font color="#E5E5E5">and isn't that solved by by quantum</font>

363
00:20:23,239 --> 00:20:28,729
device<font color="#E5E5E5"> already something on those lines</font>

364
00:20:26,080 --> 00:20:30,859
<font color="#CCCCCC">the</font><font color="#E5E5E5"> other thing is sure you think you</font>

365
00:20:28,729 --> 00:20:32,929
can solve<font color="#CCCCCC"> if if you can</font><font color="#E5E5E5"> fix you a</font>

366
00:20:30,859 --> 00:20:36,379
problem<font color="#CCCCCC"> on a keep you and you can solve</font>

367
00:20:32,929 --> 00:20:38,830
<font color="#E5E5E5">it on a keep you most likely it won't</font>

368
00:20:36,379 --> 00:20:41,959
you<font color="#E5E5E5"> won't get a local</font><font color="#CCCCCC"> minimum</font><font color="#E5E5E5"> will get a</font>

369
00:20:38,830 --> 00:20:44,119
some of the better solutions although

370
00:20:41,960 --> 00:20:47,419
it's a probabilistic so you might get

371
00:20:44,119 --> 00:20:50,029
<font color="#CCCCCC">some of the and</font><font color="#E5E5E5"> that's the good</font>

372
00:20:47,419 --> 00:20:52,669
solutions<font color="#E5E5E5"> however when you're</font>

373
00:20:50,029 --> 00:20:54,679
decomposing a huge<font color="#CCCCCC"> problem and I mean</font>

374
00:20:52,669 --> 00:20:58,399
<font color="#E5E5E5">it's the our expansion we have the</font>

375
00:20:54,679 --> 00:21:02,019
reckoning problems of size<font color="#CCCCCC"> hundreds of</font>

376
00:20:58,399 --> 00:21:06,168
hundreds of thousands of variables<font color="#CCCCCC"> and</font>

377
00:21:02,019 --> 00:21:08,479
<font color="#E5E5E5">eventually hopefully hybrid will get</font>

378
00:21:06,169 --> 00:21:11,450
there it's not quite<font color="#E5E5E5"> there yet</font><font color="#CCCCCC"> but the</font>

379
00:21:08,479 --> 00:21:14,809
problem is when you're decomposing and

380
00:21:11,450 --> 00:21:17,059
solving small problems<font color="#E5E5E5"> then surely then</font>

381
00:21:14,809 --> 00:21:20,178
you need to have some heuristic

382
00:21:17,059 --> 00:21:23,539
algorithm optimization algorithm to to

383
00:21:20,179 --> 00:21:25,369
<font color="#E5E5E5">escape local local minima right because</font>

384
00:21:23,539 --> 00:21:28,820
only a<font color="#CCCCCC"> subproblem</font>

385
00:21:25,369 --> 00:21:30,619
is is free of that which is solved on a

386
00:21:28,820 --> 00:21:32,899
keep you and you can still have a larger

387
00:21:30,619 --> 00:21:36,639
problem<font color="#E5E5E5"> and when you combine subproblems</font>

388
00:21:32,899 --> 00:21:40,988
solutions to subproblems<font color="#CCCCCC"> then you might</font>

389
00:21:36,639 --> 00:21:40,988
still get<font color="#CCCCCC"> none optimal</font><font color="#E5E5E5"> solution</font>

390
00:21:43,680 --> 00:21:49,210
yeah<font color="#E5E5E5"> exactly</font>

391
00:21:45,760 --> 00:21:52,020
<font color="#E5E5E5">yeah ideally you would have</font><font color="#CCCCCC"> a sufficient</font>

392
00:21:49,210 --> 00:21:52,020
<font color="#E5E5E5">large</font><font color="#CCCCCC"> sister yeah</font>

393
00:22:06,190 --> 00:22:10,300
<font color="#CCCCCC">get you talks about</font><font color="#E5E5E5"> D way</font>

