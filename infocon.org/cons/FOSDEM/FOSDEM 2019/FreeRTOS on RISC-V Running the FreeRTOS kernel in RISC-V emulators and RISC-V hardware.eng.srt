1
00:00:05,740 --> 00:00:10,250
<font color="#E5E5E5">okay hello everybody</font><font color="#CCCCCC"> thanks a</font><font color="#E5E5E5"> lot for</font>

2
00:00:09,020 --> 00:00:12,500
coming today is good to see so<font color="#E5E5E5"> many</font>

3
00:00:10,250 --> 00:00:14,840
<font color="#E5E5E5">people here my name is Richard Berry and</font>

4
00:00:12,500 --> 00:00:15,679
I am a principal<font color="#E5E5E5"> engineer with Amazon</font>

5
00:00:14,840 --> 00:00:17,930
<font color="#CCCCCC">Web Services</font>

6
00:00:15,679 --> 00:00:19,939
I'm also<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original author and founder</font>

7
00:00:17,930 --> 00:00:23,029
of the free<font color="#E5E5E5"> art</font><font color="#CCCCCC"> sauce project which I'm</font>

8
00:00:19,939 --> 00:00:24,980
going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about today</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start</font>

9
00:00:23,029 --> 00:00:26,420
then with an introduction<font color="#E5E5E5"> to free</font>

10
00:00:24,980 --> 00:00:27,650
artists for people that aren't familiar

11
00:00:26,420 --> 00:00:29,660
<font color="#CCCCCC">with it</font>

12
00:00:27,650 --> 00:00:31,130
and<font color="#E5E5E5"> that will lead on because we're here</font>

13
00:00:29,660 --> 00:00:34,340
<font color="#E5E5E5">at</font><font color="#CCCCCC"> paws</font><font color="#E5E5E5"> demo</font><font color="#CCCCCC"> we'll talk a</font><font color="#E5E5E5"> little bit</font>

14
00:00:31,130 --> 00:00:36,830
about<font color="#CCCCCC"> Amazon's work</font><font color="#E5E5E5"> within open source</font>

15
00:00:34,340 --> 00:00:38,330
and the projects they contribute<font color="#CCCCCC"> to free</font>

16
00:00:36,830 --> 00:00:39,949
all sources under<font color="#E5E5E5"> the stewardship of</font>

17
00:00:38,330 --> 00:00:41,930
Amazon Web Services now<font color="#E5E5E5"> so that's where</font>

18
00:00:39,949 --> 00:00:44,120
the relevance is and then I'm going to

19
00:00:41,930 --> 00:00:47,269
<font color="#E5E5E5">get on to the meat of it and show free</font>

20
00:00:44,120 --> 00:00:50,089
artists running on risk<font color="#CCCCCC"> 5 architectures</font>

21
00:00:47,269 --> 00:00:53,449
and how we've architected the kernel to

22
00:00:50,089 --> 00:00:54,519
enable the architecture extensions as

23
00:00:53,449 --> 00:00:57,099
<font color="#CCCCCC">well</font>

24
00:00:54,519 --> 00:00:59,420
so this<font color="#E5E5E5"> is the brief introduction</font><font color="#CCCCCC"> to</font>

25
00:00:57,100 --> 00:01:01,519
free art of I've<font color="#E5E5E5"> got a lot to get</font>

26
00:00:59,420 --> 00:01:04,309
through<font color="#CCCCCC"> so excuse me talking so</font><font color="#E5E5E5"> quickly</font>

27
00:01:01,519 --> 00:01:06,470
<font color="#E5E5E5">I hope I'm understandable the clue is in</font>

28
00:01:04,309 --> 00:01:09,200
the name<font color="#E5E5E5"> here it's free</font><font color="#CCCCCC"> real-time</font>

29
00:01:06,470 --> 00:01:11,000
operating system now if you come from

30
00:01:09,200 --> 00:01:13,520
the<font color="#CCCCCC"> linux world you'll probably not</font>

31
00:01:11,000 --> 00:01:17,000
<font color="#E5E5E5">consider it an operating system but a</font>

32
00:01:13,520 --> 00:01:19,970
kernel or even a scheduler<font color="#CCCCCC"> I normally</font>

33
00:01:17,000 --> 00:01:22,580
refer to it as<font color="#CCCCCC"> the real-time kernel</font><font color="#E5E5E5"> and</font>

34
00:01:19,970 --> 00:01:24,320
this is it's quite<font color="#CCCCCC"> good</font><font color="#E5E5E5"> following on</font>

35
00:01:22,580 --> 00:01:27,789
from the previous<font color="#E5E5E5"> talk actually because</font>

36
00:01:24,320 --> 00:01:30,380
this is also<font color="#E5E5E5"> for deeply embedded systems</font>

37
00:01:27,790 --> 00:01:31,430
I've been carrying this graph around<font color="#E5E5E5"> for</font>

38
00:01:30,380 --> 00:01:33,289
about<font color="#E5E5E5"> 15 years</font>

39
00:01:31,430 --> 00:01:35,450
<font color="#E5E5E5">I'm not quite</font><font color="#CCCCCC"> sure how to</font><font color="#E5E5E5"> quantify it</font>

40
00:01:33,290 --> 00:01:38,210
<font color="#CCCCCC">but this is trying to show</font><font color="#E5E5E5"> where free</font>

41
00:01:35,450 --> 00:01:41,630
<font color="#CCCCCC">art</font><font color="#E5E5E5"> sauce fits in on this graph on the</font>

42
00:01:38,210 --> 00:01:45,050
<font color="#CCCCCC">x-axis here</font><font color="#E5E5E5"> we have processing power all</font>

43
00:01:41,630 --> 00:01:47,630
the capabilities you<font color="#E5E5E5"> know the the</font>

44
00:01:45,050 --> 00:01:50,210
resources<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the processor on the far</font>

45
00:01:47,630 --> 00:01:51,949
left<font color="#CCCCCC"> 4 bit processor you're not even</font>

46
00:01:50,210 --> 00:01:55,759
going to be running<font color="#E5E5E5"> see you might just</font>

47
00:01:51,950 --> 00:01:59,690
be a running assembly code<font color="#E5E5E5"> up here</font><font color="#CCCCCC"> we're</font>

48
00:01:55,760 --> 00:02:02,330
looking<font color="#CCCCCC"> at kind of</font><font color="#E5E5E5"> low-end cortex a way</font>

49
00:01:59,690 --> 00:02:05,360
off the scale we've got<font color="#CCCCCC"> the higher-end</font>

50
00:02:02,330 --> 00:02:07,280
64-bit processors as<font color="#CCCCCC"> well free Otto's</font>

51
00:02:05,360 --> 00:02:09,378
runs there as well but this is<font color="#CCCCCC"> really</font>

52
00:02:07,280 --> 00:02:12,920
<font color="#E5E5E5">the sweet spot in the</font><font color="#CCCCCC"> middle so</font><font color="#E5E5E5"> the</font>

53
00:02:09,378 --> 00:02:15,799
higher up<font color="#CCCCCC"> the y-axes you are the the</font>

54
00:02:12,920 --> 00:02:18,109
more applicable<font color="#E5E5E5"> the</font><font color="#CCCCCC"> freertos kernel is</font>

55
00:02:15,800 --> 00:02:18,480
so in<font color="#E5E5E5"> this sweet spot in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> middle we</font>

56
00:02:18,110 --> 00:02:21,720
<font color="#CCCCCC">are</font>

57
00:02:18,480 --> 00:02:25,409
looking at microcontrollers so very

58
00:02:21,720 --> 00:02:27,900
small<font color="#E5E5E5"> processors typically tens of</font>

59
00:02:25,409 --> 00:02:29,250
<font color="#E5E5E5">kilobytes of data memory</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> just to</font>

60
00:02:27,900 --> 00:02:32,310
get the scale here we're not talking

61
00:02:29,250 --> 00:02:36,450
<font color="#CCCCCC">about Linux class</font><font color="#E5E5E5"> processors hundreds of</font>

62
00:02:32,310 --> 00:02:39,540
kilobytes of program space so why would

63
00:02:36,450 --> 00:02:41,970
you<font color="#CCCCCC"> run multi-threading on a processor</font>

64
00:02:39,540 --> 00:02:44,400
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that small and it all comes down</font>

65
00:02:41,970 --> 00:02:46,980
<font color="#E5E5E5">in my mind at</font><font color="#CCCCCC"> least</font><font color="#E5E5E5"> to maintainability</font>

66
00:02:44,400 --> 00:02:49,319
<font color="#E5E5E5">on the top here I'm trying to show a</font>

67
00:02:46,980 --> 00:02:51,298
diagram<font color="#E5E5E5"> or not a graphics designer</font><font color="#CCCCCC"> okay</font>

68
00:02:49,319 --> 00:02:53,730
I'm a software engineer but I'm trying

69
00:02:51,299 --> 00:02:55,489
<font color="#E5E5E5">to demonstrate a very very typical way</font>

70
00:02:53,730 --> 00:02:58,200
of<font color="#CCCCCC"> writing software</font><font color="#E5E5E5"> for small</font>

71
00:02:55,489 --> 00:02:59,910
microcontrollers what I'm trying to

72
00:02:58,200 --> 00:03:03,238
<font color="#E5E5E5">depict is three pieces of functionality</font>

73
00:02:59,910 --> 00:03:05,459
<font color="#CCCCCC">each implemented as a state machine and</font>

74
00:03:03,239 --> 00:03:07,920
there's a super loops are you calling

75
00:03:05,459 --> 00:03:09,870
one<font color="#E5E5E5"> then the other then</font><font color="#CCCCCC"> the other you</font>

76
00:03:07,920 --> 00:03:13,290
know a very<font color="#CCCCCC"> good way of writing software</font>

77
00:03:09,870 --> 00:03:15,959
if your<font color="#E5E5E5"> software is quite small but when</font>

78
00:03:13,290 --> 00:03:17,670
we<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> as particularly</font><font color="#CCCCCC"> if we are</font>

79
00:03:15,959 --> 00:03:20,579
<font color="#E5E5E5">adding connectivity or any kind of</font>

80
00:03:17,670 --> 00:03:23,488
complexity<font color="#CCCCCC"> over time as your application</font>

81
00:03:20,579 --> 00:03:26,220
gets<font color="#E5E5E5"> more complex</font><font color="#CCCCCC"> what we can do is use</font>

82
00:03:23,489 --> 00:03:28,709
<font color="#CCCCCC">the FreeRTOS kernel to translate those</font>

83
00:03:26,220 --> 00:03:31,079
state machines into separate threads of

84
00:03:28,709 --> 00:03:35,519
execution which Imperato us we<font color="#E5E5E5"> call</font>

85
00:03:31,079 --> 00:03:38,190
tasks to avoid any confusion<font color="#E5E5E5"> between</font>

86
00:03:35,519 --> 00:03:40,139
processes<font color="#E5E5E5"> and threads we use the term</font>

87
00:03:38,190 --> 00:03:42,510
<font color="#CCCCCC">tasks but think of it</font><font color="#E5E5E5"> as a thread and</font>

88
00:03:40,139 --> 00:03:45,720
then<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> implement your code</font><font color="#CCCCCC"> as a</font>

89
00:03:42,510 --> 00:03:48,418
kind of flow diagram and the kernel the

90
00:03:45,720 --> 00:03:48,989
<font color="#E5E5E5">scheduler handles the prioritization for</font>

91
00:03:48,419 --> 00:03:51,900
<font color="#CCCCCC">you</font>

92
00:03:48,989 --> 00:03:53,549
so as the functionality increases<font color="#E5E5E5"> you</font>

93
00:03:51,900 --> 00:03:56,220
<font color="#CCCCCC">know</font><font color="#E5E5E5"> you can manage the responsiveness</font>

94
00:03:53,549 --> 00:03:58,889
and<font color="#E5E5E5"> the maintainability much more</font><font color="#CCCCCC"> easily</font>

95
00:03:56,220 --> 00:03:59,609
so<font color="#CCCCCC"> think here's that free our sauce is a</font>

96
00:03:58,889 --> 00:04:02,220
library

97
00:03:59,609 --> 00:04:05,450
it's<font color="#E5E5E5"> C source</font><font color="#CCCCCC"> code which you build into</font>

98
00:04:02,220 --> 00:04:07,829
<font color="#CCCCCC">your application</font><font color="#E5E5E5"> it's statically linked</font>

99
00:04:05,450 --> 00:04:10,768
<font color="#E5E5E5">so again very very different</font><font color="#CCCCCC"> to the</font>

100
00:04:07,829 --> 00:04:13,349
<font color="#E5E5E5">Linux environment MIT licensed I should</font>

101
00:04:10,769 --> 00:04:16,289
have said the project's been<font color="#E5E5E5"> around for</font>

102
00:04:13,349 --> 00:04:19,048
15 years and because<font color="#CCCCCC"> of the applications</font>

103
00:04:16,289 --> 00:04:23,099
<font color="#E5E5E5">space you know we are designing or not</font>

104
00:04:19,048 --> 00:04:24,870
wait our users are making devices<font color="#CCCCCC"> you</font>

105
00:04:23,099 --> 00:04:26,669
know real<font color="#CCCCCC"> world objects</font><font color="#E5E5E5"> the kind of</font>

106
00:04:24,870 --> 00:04:28,860
things<font color="#CCCCCC"> that just looking around this</font>

107
00:04:26,669 --> 00:04:30,299
<font color="#CCCCCC">room might be</font><font color="#E5E5E5"> in the I guess that's a</font>

108
00:04:28,860 --> 00:04:32,789
Wi-Fi thing<font color="#E5E5E5"> hanging</font><font color="#CCCCCC"> from the</font>

109
00:04:30,300 --> 00:04:35,940
<font color="#CCCCCC">stealing or the smoke detectors</font><font color="#E5E5E5"> or the</font>

110
00:04:32,789 --> 00:04:38,669
<font color="#E5E5E5">some control system in the the projector</font>

111
00:04:35,940 --> 00:04:40,349
there these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> devices which</font><font color="#E5E5E5"> gets</font>

112
00:04:38,669 --> 00:04:42,840
<font color="#E5E5E5">manufactured in their hundreds of</font>

113
00:04:40,349 --> 00:04:45,270
thousands and put out into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> if</font>

114
00:04:42,840 --> 00:04:48,330
they're<font color="#E5E5E5"> not connected there's no way of</font>

115
00:04:45,270 --> 00:04:50,190
<font color="#CCCCCC">updating the software</font><font color="#E5E5E5"> on them so people</font>

116
00:04:48,330 --> 00:04:52,530
<font color="#CCCCCC">need a lot of</font><font color="#E5E5E5"> reassurance a lot of</font>

117
00:04:50,190 --> 00:04:55,949
confidence<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the codes</font><font color="#E5E5E5"> going to be</font>

118
00:04:52,530 --> 00:05:00,750
robust<font color="#CCCCCC"> that there's no unlike</font><font color="#E5E5E5"> IP issues</font>

119
00:04:55,949 --> 00:05:03,659
in the code<font color="#E5E5E5"> that they can get good</font>

120
00:05:00,750 --> 00:05:05,669
support<font color="#E5E5E5"> so over the 15 years we've built</font>

121
00:05:03,659 --> 00:05:08,580
a<font color="#E5E5E5"> distribution model which basically</font>

122
00:05:05,669 --> 00:05:10,139
<font color="#CCCCCC">gives</font><font color="#E5E5E5"> people all these assurances</font><font color="#CCCCCC"> and</font>

123
00:05:08,580 --> 00:05:11,729
<font color="#E5E5E5">there's even a commercially licensed</font>

124
00:05:10,139 --> 00:05:13,620
version if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want it we have</font><font color="#CCCCCC"> a</font>

125
00:05:11,729 --> 00:05:15,870
<font color="#CCCCCC">strategic partner called Witten Stein</font>

126
00:05:13,620 --> 00:05:17,849
who<font color="#E5E5E5"> actually provides the code under a</font>

127
00:05:15,870 --> 00:05:20,129
commercial license with commercial

128
00:05:17,849 --> 00:05:22,409
support if that is what you want<font color="#E5E5E5"> we only</font>

129
00:05:20,129 --> 00:05:25,650
<font color="#CCCCCC">deal with</font><font color="#E5E5E5"> the open source software</font>

130
00:05:22,409 --> 00:05:30,629
ourselves this graph<font color="#E5E5E5"> shows the growth</font>

131
00:05:25,650 --> 00:05:33,299
<font color="#CCCCCC">over</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> our since 2004 to 2018</font><font color="#E5E5E5"> you can</font>

132
00:05:30,629 --> 00:05:35,940
see it's going going<font color="#E5E5E5"> up all the</font><font color="#CCCCCC"> time</font>

133
00:05:33,300 --> 00:05:38,159
<font color="#E5E5E5">still on a positive trajectory here</font>

134
00:05:35,940 --> 00:05:40,050
currently downloaded about<font color="#E5E5E5"> once every</font>

135
00:05:38,159 --> 00:05:41,610
<font color="#E5E5E5">three minutes approximately which I</font>

136
00:05:40,050 --> 00:05:43,050
always<font color="#E5E5E5"> find</font><font color="#CCCCCC"> amazing because it don't</font>

137
00:05:41,610 --> 00:05:48,779
<font color="#CCCCCC">realize there are that many engineers in</font>

138
00:05:43,050 --> 00:05:52,289
the world use cases many many and varied

139
00:05:48,779 --> 00:05:54,630
<font color="#E5E5E5">there's all industry work all industry</font>

140
00:05:52,289 --> 00:05:59,250
verticals you can think<font color="#E5E5E5"> of here you know</font>

141
00:05:54,630 --> 00:06:01,699
<font color="#E5E5E5">fitness trackers automotive the thing I</font>

142
00:05:59,250 --> 00:06:04,050
really like<font color="#E5E5E5"> because of my past in</font>

143
00:06:01,699 --> 00:06:07,229
industrial computing is some of the

144
00:06:04,050 --> 00:06:08,699
interesting things in industry 4.0 with

145
00:06:07,229 --> 00:06:12,090
factory automation<font color="#E5E5E5"> cyber-physical</font>

146
00:06:08,699 --> 00:06:13,860
systems we<font color="#CCCCCC"> are basically surrounded by</font>

147
00:06:12,090 --> 00:06:18,060
devices<font color="#E5E5E5"> that are running free our</font>

148
00:06:13,860 --> 00:06:20,550
<font color="#E5E5E5">thoughts as we go around our lives new</font>

149
00:06:18,060 --> 00:06:22,440
use case<font color="#CCCCCC"> saw saying</font><font color="#E5E5E5"> you actually</font><font color="#CCCCCC"> the</font>

150
00:06:20,550 --> 00:06:24,090
<font color="#E5E5E5">first job I ever had</font><font color="#CCCCCC"> was in Internet of</font>

151
00:06:22,440 --> 00:06:26,879
Things we just didn't<font color="#CCCCCC"> really call it</font>

152
00:06:24,090 --> 00:06:28,830
<font color="#E5E5E5">that at the time SCADA systems but</font>

153
00:06:26,879 --> 00:06:31,080
Internet of Things is the the real

154
00:06:28,830 --> 00:06:32,878
growth area of focus<font color="#CCCCCC"> of interest at the</font>

155
00:06:31,080 --> 00:06:37,020
<font color="#CCCCCC">moment and</font><font color="#E5E5E5"> this is where</font><font color="#CCCCCC"> our Amazon come</font>

156
00:06:32,879 --> 00:06:39,210
in so<font color="#E5E5E5"> Amazon Web Services have a whole</font>

157
00:06:37,020 --> 00:06:41,219
plethora of cloud services<font color="#CCCCCC"> by the way</font>

158
00:06:39,210 --> 00:06:44,169
I'm<font color="#E5E5E5"> showing a very tiny subset here</font>

159
00:06:41,219 --> 00:06:48,849
which are<font color="#E5E5E5"> just specific</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> IOT</font>

160
00:06:44,169 --> 00:06:50,799
on the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> hand</font><font color="#CCCCCC"> 2/3</font><font color="#E5E5E5"> here we have the</font>

161
00:06:48,849 --> 00:06:53,979
cloud services which are specific to IOT

162
00:06:50,800 --> 00:06:56,110
<font color="#CCCCCC">or a subset thereof on the far right we</font>

163
00:06:53,979 --> 00:06:58,199
<font color="#CCCCCC">have the services</font><font color="#E5E5E5"> like machine learning</font>

164
00:06:56,110 --> 00:07:01,120
analytics that's where we actually

165
00:06:58,199 --> 00:07:03,759
extract value from connecting our

166
00:07:01,120 --> 00:07:06,219
devices<font color="#E5E5E5"> in the first place but to get</font>

167
00:07:03,759 --> 00:07:08,710
there we have<font color="#CCCCCC"> to have first the gateway</font>

168
00:07:06,219 --> 00:07:11,020
to<font color="#E5E5E5"> get into the cloud</font><font color="#CCCCCC"> then the</font><font color="#E5E5E5"> security</font>

169
00:07:08,710 --> 00:07:13,150
the authentication the encryption the

170
00:07:11,020 --> 00:07:17,710
ability to over-the-air update things

171
00:07:13,150 --> 00:07:20,409
that are connecting etc etc<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's</font>

172
00:07:17,710 --> 00:07:21,849
all the undifferentiated work that

173
00:07:20,409 --> 00:07:24,039
<font color="#CCCCCC">amazon provide for you</font>

174
00:07:21,849 --> 00:07:26,919
to<font color="#E5E5E5"> enable you to get to the value</font><font color="#CCCCCC"> as</font>

175
00:07:24,039 --> 00:07:29,139
quickly as you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> so that's in the</font>

176
00:07:26,919 --> 00:07:33,188
cloud<font color="#E5E5E5"> outside of the cloud we have on</font>

177
00:07:29,139 --> 00:07:35,169
the left here there's a<font color="#E5E5E5"> product that</font>

178
00:07:33,189 --> 00:07:36,969
<font color="#E5E5E5">runs on Linux called Greengrass which is</font>

179
00:07:35,169 --> 00:07:38,889
a really<font color="#CCCCCC"> interesting product in that</font><font color="#E5E5E5"> it</font>

180
00:07:36,969 --> 00:07:41,229
allows you<font color="#CCCCCC"> to take some of those cloud</font>

181
00:07:38,889 --> 00:07:42,639
services<font color="#E5E5E5"> like machine learning inference</font>

182
00:07:41,229 --> 00:07:45,729
and<font color="#E5E5E5"> that kind of thing and actually</font><font color="#CCCCCC"> run</font>

183
00:07:42,639 --> 00:07:48,580
them on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Linux box</font><font color="#E5E5E5"> in you're on</font><font color="#CCCCCC"> your</font>

184
00:07:45,729 --> 00:07:49,628
own premises that's<font color="#E5E5E5"> not what I'm</font><font color="#CCCCCC"> talking</font>

185
00:07:48,580 --> 00:07:52,300
about today<font color="#E5E5E5"> though what I would</font>

186
00:07:49,629 --> 00:07:55,089
<font color="#E5E5E5">encourage you to look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> it we're really</font>

187
00:07:52,300 --> 00:07:57,639
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at the the edge of the edge this</font>

188
00:07:55,089 --> 00:07:59,979
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the proliferation of those</font><font color="#CCCCCC"> billions</font>

189
00:07:57,639 --> 00:08:02,770
and billions of microcontrollers<font color="#E5E5E5"> which</font>

190
00:07:59,979 --> 00:08:05,770
are wanting to<font color="#E5E5E5"> connect and their</font><font color="#CCCCCC"> Amazon</font>

191
00:08:02,770 --> 00:08:07,870
are adding security<font color="#E5E5E5"> and connectivity</font><font color="#CCCCCC"> so</font>

192
00:08:05,770 --> 00:08:10,029
we can think<font color="#E5E5E5"> is very analogous to what's</font>

193
00:08:07,870 --> 00:08:11,770
on in the cloud<font color="#E5E5E5"> the ability to</font>

194
00:08:10,029 --> 00:08:15,009
over-the-air update the ability to

195
00:08:11,770 --> 00:08:18,000
<font color="#E5E5E5">connect securely</font><font color="#CCCCCC"> etc the important thing</font>

196
00:08:15,009 --> 00:08:20,649
<font color="#CCCCCC">to note here is that this is all</font><font color="#E5E5E5"> mit</font>

197
00:08:18,000 --> 00:08:21,550
open source code and<font color="#E5E5E5"> using open</font>

198
00:08:20,649 --> 00:08:23,729
<font color="#E5E5E5">standards</font>

199
00:08:21,550 --> 00:08:26,620
so although<font color="#CCCCCC"> Amazon are providing this</font>

200
00:08:23,729 --> 00:08:28,180
software<font color="#E5E5E5"> then you can use it for any</font>

201
00:08:26,620 --> 00:08:30,490
<font color="#E5E5E5">purposes</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> for the good of the</font>

202
00:08:28,180 --> 00:08:33,399
<font color="#CCCCCC">entire free artists community</font><font color="#E5E5E5"> you can</font>

203
00:08:30,490 --> 00:08:37,419
even<font color="#CCCCCC"> get</font><font color="#E5E5E5"> connect</font><font color="#CCCCCC"> where you</font><font color="#E5E5E5"> know someone</font>

204
00:08:33,399 --> 00:08:39,070
else's<font color="#E5E5E5"> cloud service if you like because</font>

205
00:08:37,419 --> 00:08:41,468
<font color="#E5E5E5">this is FOSDEM</font><font color="#CCCCCC"> I'm going to talk very</font>

206
00:08:39,070 --> 00:08:44,410
very briefly<font color="#E5E5E5"> just a few slides to show</font>

207
00:08:41,469 --> 00:08:47,199
some<font color="#CCCCCC"> of the work</font><font color="#E5E5E5"> there Amazon do in open</font>

208
00:08:44,410 --> 00:08:50,469
source<font color="#E5E5E5"> on the screen now I have a whole</font>

209
00:08:47,199 --> 00:08:53,050
load<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different projects</font><font color="#E5E5E5"> these are all</font>

210
00:08:50,470 --> 00:08:57,069
projects<font color="#CCCCCC"> that Amazon contributed code</font><font color="#E5E5E5"> to</font>

211
00:08:53,050 --> 00:08:57,760
in 2016<font color="#E5E5E5"> then we'll go through</font><font color="#CCCCCC"> the next</font>

212
00:08:57,069 --> 00:09:00,819
couple<font color="#CCCCCC"> of the</font>

213
00:08:57,760 --> 00:09:03,130
<font color="#CCCCCC">we can see how this</font><font color="#E5E5E5"> is growing by</font><font color="#CCCCCC"> the</font>

214
00:09:00,820 --> 00:09:05,080
way the size of the font is proportional

215
00:09:03,130 --> 00:09:08,200
<font color="#CCCCCC">to the amount of contributions</font><font color="#E5E5E5"> that have</font>

216
00:09:05,080 --> 00:09:10,120
been<font color="#CCCCCC"> made 2017 we've added in these</font>

217
00:09:08,200 --> 00:09:14,620
orange ones you can see<font color="#CCCCCC"> there's a lot</font>

218
00:09:10,120 --> 00:09:17,230
more if we go<font color="#E5E5E5"> on to 2018 here we've</font>

219
00:09:14,620 --> 00:09:19,210
added in the blue and I have to say this

220
00:09:17,230 --> 00:09:21,010
was done about<font color="#CCCCCC"> half</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> year</font>

221
00:09:19,210 --> 00:09:22,390
so<font color="#E5E5E5"> it's a bit out of date</font><font color="#CCCCCC"> I'm sure there</font>

222
00:09:21,010 --> 00:09:24,850
are a lot more<font color="#CCCCCC"> there now as well because</font>

223
00:09:22,390 --> 00:09:26,530
you<font color="#E5E5E5"> can see the the growth in the</font><font color="#CCCCCC"> number</font>

224
00:09:24,850 --> 00:09:30,880
of projects<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Amma's are actively</font>

225
00:09:26,530 --> 00:09:32,530
contributing to if we look really

226
00:09:30,880 --> 00:09:35,710
<font color="#E5E5E5">carefully in there you've actually</font>

227
00:09:32,530 --> 00:09:37,709
highlighted it on the next<font color="#CCCCCC"> slide here in</font>

228
00:09:35,710 --> 00:09:42,820
yellow you'll see that<font color="#E5E5E5"> three</font><font color="#CCCCCC"> artists is</font>

229
00:09:37,710 --> 00:09:45,730
kind<font color="#E5E5E5"> of there okay so let's do the</font>

230
00:09:42,820 --> 00:09:49,420
interesting bit now and talk about<font color="#E5E5E5"> roam</font>

231
00:09:45,730 --> 00:09:51,760
free artists on risk<font color="#E5E5E5"> five at the moment</font>

232
00:09:49,420 --> 00:09:54,310
we are really looking at<font color="#CCCCCC"> the</font>

233
00:09:51,760 --> 00:09:57,100
microcontroller space here so<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> a</font>

234
00:09:54,310 --> 00:09:59,680
<font color="#E5E5E5">machine mode only this is the first</font>

235
00:09:57,100 --> 00:10:02,230
official version<font color="#E5E5E5"> and there is you know</font>

236
00:09:59,680 --> 00:10:05,770
the direction<font color="#CCCCCC"> it goes in will very much</font>

237
00:10:02,230 --> 00:10:09,310
depend on what users<font color="#CCCCCC"> want</font><font color="#E5E5E5"> if we look at</font>

238
00:10:05,770 --> 00:10:12,400
what the kernel<font color="#CCCCCC"> actually does most of it</font>

239
00:10:09,310 --> 00:10:15,160
is generic C code the same code runs on

240
00:10:12,400 --> 00:10:17,860
all 40-plus architectures that reported

241
00:10:15,160 --> 00:10:21,040
<font color="#CCCCCC">- there is what we call the portable</font>

242
00:10:17,860 --> 00:10:24,760
layer which is<font color="#E5E5E5"> the bit that actually has</font>

243
00:10:21,040 --> 00:10:26,829
to<font color="#CCCCCC"> touch the</font><font color="#E5E5E5"> processor so the when the</font>

244
00:10:24,760 --> 00:10:29,590
processor is running<font color="#E5E5E5"> here we've got the</font>

245
00:10:26,830 --> 00:10:31,930
stack pointer pointing actually at the

246
00:10:29,590 --> 00:10:34,420
stack of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> currently</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> task</font><font color="#E5E5E5"> and</font>

247
00:10:31,930 --> 00:10:36,339
the stack just contains whatever<font color="#E5E5E5"> the</font>

248
00:10:34,420 --> 00:10:38,560
compiler puts on there right<font color="#E5E5E5"> and or</font>

249
00:10:36,340 --> 00:10:41,830
<font color="#E5E5E5">whatever the processor puts on there but</font>

250
00:10:38,560 --> 00:10:44,680
as we<font color="#E5E5E5"> stop that task running</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have to</font>

251
00:10:41,830 --> 00:10:46,630
save that context<font color="#CCCCCC"> onto the stack so</font>

252
00:10:44,680 --> 00:10:47,949
<font color="#CCCCCC">these are the tasks that aren't</font><font color="#E5E5E5"> running</font>

253
00:10:46,630 --> 00:10:50,320
at the<font color="#CCCCCC"> moment you can see</font><font color="#E5E5E5"> they've got</font>

254
00:10:47,950 --> 00:10:52,780
<font color="#CCCCCC">there</font><font color="#E5E5E5"> all the registers on there so when</font>

255
00:10:50,320 --> 00:10:55,780
<font color="#CCCCCC">they're they start running</font><font color="#E5E5E5"> they're</font>

256
00:10:52,780 --> 00:10:58,780
popped off back into<font color="#CCCCCC"> the back</font><font color="#E5E5E5"> into the</font>

257
00:10:55,780 --> 00:11:01,600
processor registers and it doesn't know

258
00:10:58,780 --> 00:11:07,150
that<font color="#E5E5E5"> anything happened now on a fixed</font>

259
00:11:01,600 --> 00:11:10,260
architecture<font color="#CCCCCC"> like an ARM Cortex</font><font color="#E5E5E5"> the port</font>

260
00:11:07,150 --> 00:11:11,470
layer is<font color="#E5E5E5"> also fixed this just shows the</font>

261
00:11:10,260 --> 00:11:15,100
<font color="#E5E5E5">directories</font>

262
00:11:11,470 --> 00:11:17,380
<font color="#CCCCCC">Roger</font><font color="#E5E5E5"> here of the source code and at the</font>

263
00:11:15,100 --> 00:11:20,230
top there we see the source files that

264
00:11:17,380 --> 00:11:22,689
<font color="#E5E5E5">are common to</font><font color="#CCCCCC"> all architectures and then</font>

265
00:11:20,230 --> 00:11:24,760
here's<font color="#E5E5E5"> the portable layer it's in a</font>

266
00:11:22,690 --> 00:11:26,080
hierarchy<font color="#E5E5E5"> first the compiler and there</font>

267
00:11:24,760 --> 00:11:28,620
are lots of other compilers who just

268
00:11:26,080 --> 00:11:32,230
can't see them and<font color="#CCCCCC"> then the files that</font>

269
00:11:28,620 --> 00:11:34,990
<font color="#E5E5E5">are specific to</font><font color="#CCCCCC"> that architecture that</font>

270
00:11:32,230 --> 00:11:36,730
do this register manipulation<font color="#E5E5E5"> now this</font>

271
00:11:34,990 --> 00:11:39,660
is interesting<font color="#CCCCCC"> when it comes to</font><font color="#E5E5E5"> risk 5</font>

272
00:11:36,730 --> 00:11:41,680
because the<font color="#E5E5E5"> architecture is extensible</font>

273
00:11:39,660 --> 00:11:43,930
<font color="#E5E5E5">so we actually have to add another</font>

274
00:11:41,680 --> 00:11:47,410
<font color="#E5E5E5">dimension in here it's the same up</font><font color="#CCCCCC"> to</font>

275
00:11:43,930 --> 00:11:49,900
this point we've<font color="#CCCCCC"> got GCC then our V 32</font>

276
00:11:47,410 --> 00:11:54,250
port layer code<font color="#E5E5E5"> and then we've got this</font>

277
00:11:49,900 --> 00:11:56,890
new chip specific extensions<font color="#E5E5E5"> here and</font>

278
00:11:54,250 --> 00:12:04,050
I'll look at<font color="#E5E5E5"> that a bit more closely in</font>

279
00:11:56,890 --> 00:12:04,050
a minute<font color="#CCCCCC"> okay demonstration let's hope</font>

280
00:12:04,230 --> 00:12:13,600
so<font color="#E5E5E5"> I have two two boards here one is a</font>

281
00:12:09,850 --> 00:12:18,780
micro semi<font color="#E5E5E5"> board and the other is this</font>

282
00:12:13,600 --> 00:12:22,780
<font color="#E5E5E5">Vega board and both</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these are</font>

283
00:12:18,780 --> 00:12:25,300
available<font color="#E5E5E5"> easily available this is open</font>

284
00:12:22,780 --> 00:12:30,069
is<font color="#E5E5E5"> a org you can get these Vega boards</font>

285
00:12:25,300 --> 00:12:32,170
and we also have<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know the micro semi</font>

286
00:12:30,070 --> 00:12:34,780
board which is actually from future

287
00:12:32,170 --> 00:12:38,860
electronics<font color="#E5E5E5"> these are both</font><font color="#CCCCCC"> low low cost</font>

288
00:12:34,780 --> 00:12:41,560
<font color="#E5E5E5">Hardware boards and what I'm going to do</font>

289
00:12:38,860 --> 00:12:44,550
is show the code running on<font color="#E5E5E5"> these</font>

290
00:12:41,560 --> 00:12:46,869
architectures just to prove<font color="#E5E5E5"> it real and</font>

291
00:12:44,550 --> 00:12:51,189
on the micro<font color="#E5E5E5"> semi board I'm actually</font>

292
00:12:46,870 --> 00:12:55,000
going to<font color="#CCCCCC"> run it in in an emulator called</font>

293
00:12:51,190 --> 00:13:00,040
Reno which is from a company called and

294
00:12:55,000 --> 00:13:05,560
<font color="#E5E5E5">micro and if we look at we</font><font color="#CCCCCC"> look at what</font>

295
00:13:00,040 --> 00:13:08,110
this code is doing will see that it

296
00:13:05,560 --> 00:13:10,949
enters<font color="#E5E5E5"> main does some initialization and</font>

297
00:13:08,110 --> 00:13:14,730
then it's starting a whole load of

298
00:13:10,950 --> 00:13:18,750
starting a whole load of test tasks here

299
00:13:14,730 --> 00:13:23,500
so there's<font color="#CCCCCC"> some test tasks and there are</font>

300
00:13:18,750 --> 00:13:28,450
<font color="#E5E5E5">examples etcetera and at the bottom here</font>

301
00:13:23,500 --> 00:13:31,450
it is running this<font color="#CCCCCC"> Czech</font><font color="#E5E5E5"> task and what</font>

302
00:13:28,450 --> 00:13:34,390
the Czech task does is go<font color="#CCCCCC"> through</font><font color="#E5E5E5"> all</font>

303
00:13:31,450 --> 00:13:37,510
the all the other tests which<font color="#E5E5E5"> are</font>

304
00:13:34,390 --> 00:13:39,670
<font color="#CCCCCC">self-monitoring</font><font color="#E5E5E5"> and if the tests pass it</font>

305
00:13:37,510 --> 00:13:42,100
just prints out<font color="#E5E5E5"> a period of dot</font>

306
00:13:39,670 --> 00:13:45,189
character<font color="#CCCCCC"> if the tests fail then it</font>

307
00:13:42,100 --> 00:13:50,380
prints out<font color="#E5E5E5"> an error message</font><font color="#CCCCCC"> they start</font>

308
00:13:45,190 --> 00:13:55,860
that running and in the<font color="#CCCCCC"> renewed</font><font color="#E5E5E5"> serial</font>

309
00:13:50,380 --> 00:13:58,510
port here we should see then that<font color="#CCCCCC"> the</font>

310
00:13:55,860 --> 00:14:00,940
<font color="#E5E5E5">the periods are getting printed</font><font color="#CCCCCC"> out so</font>

311
00:13:58,510 --> 00:14:08,260
you can<font color="#E5E5E5"> see everything is everything is</font>

312
00:14:00,940 --> 00:14:13,030
running now the the time reasons I'm not

313
00:14:08,260 --> 00:14:14,170
<font color="#E5E5E5">going to also show</font><font color="#CCCCCC"> the the</font><font color="#E5E5E5"> Vega</font><font color="#CCCCCC"> board</font>

314
00:14:13,030 --> 00:14:17,410
<font color="#E5E5E5">being programmed</font>

315
00:14:14,170 --> 00:14:24,339
but<font color="#E5E5E5"> it's pre pre programmed before so if</font>

316
00:14:17,410 --> 00:14:27,760
I run<font color="#E5E5E5"> this terminal window you should</font>

317
00:14:24,340 --> 00:14:31,210
hopefully see that the code is<font color="#E5E5E5"> yeah</font>

318
00:14:27,760 --> 00:14:33,069
those periods are also being printed out

319
00:14:31,210 --> 00:14:35,110
at the top there and we can so we're

320
00:14:33,070 --> 00:14:36,640
running<font color="#E5E5E5"> on two different boards what's</font>

321
00:14:35,110 --> 00:14:40,000
the difference<font color="#E5E5E5"> between these boards now</font>

322
00:14:36,640 --> 00:14:44,010
this board here has a sigh five core on

323
00:14:40,000 --> 00:14:47,050
it with<font color="#E5E5E5"> just the base architecture this</font>

324
00:14:44,010 --> 00:14:48,610
this board actually has<font color="#E5E5E5"> two uncor</font><font color="#CCCCCC"> Tech's</font>

325
00:14:47,050 --> 00:14:49,870
<font color="#CCCCCC">two different cortex and two different</font>

326
00:14:48,610 --> 00:14:52,690
<font color="#E5E5E5">pulpy no-risk</font>

327
00:14:49,870 --> 00:14:55,300
<font color="#E5E5E5">five</font><font color="#CCCCCC"> are cores on there I'm running</font><font color="#E5E5E5"> on</font>

328
00:14:52,690 --> 00:15:02,320
the risky architecture in that

329
00:14:55,300 --> 00:15:05,050
implementation<font color="#E5E5E5"> we have six registers six</font>

330
00:15:02,320 --> 00:15:06,940
additional registers<font color="#CCCCCC"> two</font><font color="#E5E5E5"> groups of three</font>

331
00:15:05,050 --> 00:15:09,640
registers the other thing that this

332
00:15:06,940 --> 00:15:11,830
board<font color="#E5E5E5"> has is affected interrupt</font>

333
00:15:09,640 --> 00:15:12,400
controller<font color="#E5E5E5"> and doesn't have the machine</font>

334
00:15:11,830 --> 00:15:15,610
<font color="#E5E5E5">timer</font>

335
00:15:12,400 --> 00:15:20,620
<font color="#CCCCCC">whereas this board has the the Klint for</font>

336
00:15:15,610 --> 00:15:23,170
the local interrupts and<font color="#CCCCCC"> a separate</font>

337
00:15:20,620 --> 00:15:24,850
<font color="#CCCCCC">external interrupt controller</font><font color="#E5E5E5"> does have</font>

338
00:15:23,170 --> 00:15:27,520
the machine timer so you<font color="#E5E5E5"> can see that</font>

339
00:15:24,850 --> 00:15:30,220
the two although<font color="#E5E5E5"> the base architecture</font>

340
00:15:27,520 --> 00:15:32,880
is the<font color="#E5E5E5"> same have different functionality</font>

341
00:15:30,220 --> 00:15:32,880
<font color="#CCCCCC">or features</font>

342
00:15:35,139 --> 00:15:41,799
so how do we manage<font color="#CCCCCC"> that in the code</font>

343
00:15:37,850 --> 00:15:46,879
well I spoke<font color="#CCCCCC"> about this architecture</font>

344
00:15:41,799 --> 00:15:50,149
extensions<font color="#E5E5E5"> file here if we can just zoom</font>

345
00:15:46,879 --> 00:15:52,699
in a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> here we can see in the</font>

346
00:15:50,149 --> 00:15:54,980
<font color="#E5E5E5">project and incidentally these projects</font>

347
00:15:52,699 --> 00:15:58,008
are just<font color="#CCCCCC"> eclipse projects I've opened if</font>

348
00:15:54,980 --> 00:15:59,359
you download the code from<font color="#CCCCCC"> SVN this is</font>

349
00:15:58,009 --> 00:16:01,489
not actually released code yet but it's

350
00:15:59,359 --> 00:16:04,220
publicly<font color="#E5E5E5"> available</font><font color="#CCCCCC"> and SVN</font><font color="#E5E5E5"> if you</font>

351
00:16:01,489 --> 00:16:06,169
download the SVN repository<font color="#CCCCCC"> yes I</font><font color="#E5E5E5"> said</font>

352
00:16:04,220 --> 00:16:10,999
<font color="#CCCCCC">SVM it's rather a hold okay it's been</font>

353
00:16:06,169 --> 00:16:12,290
every 15<font color="#CCCCCC"> years then the closed projects</font>

354
00:16:10,999 --> 00:16:16,549
are all in that<font color="#CCCCCC"> you just open</font><font color="#E5E5E5"> the</font>

355
00:16:12,290 --> 00:16:18,790
project<font color="#E5E5E5"> this is renewed I'm using</font><font color="#CCCCCC"> a sari</font>

356
00:16:16,549 --> 00:16:21,439
soft console which is<font color="#E5E5E5"> micro semies</font>

357
00:16:18,790 --> 00:16:22,910
<font color="#CCCCCC">eclipse</font><font color="#E5E5E5"> project here so when you</font><font color="#CCCCCC"> open</font>

358
00:16:21,439 --> 00:16:25,759
the<font color="#CCCCCC"> project you can see the same</font>

359
00:16:22,910 --> 00:16:27,980
architecture<font color="#CCCCCC"> that I gave before</font><font color="#E5E5E5"> now here</font>

360
00:16:25,759 --> 00:16:32,779
we see the chip specific extensions and

361
00:16:27,980 --> 00:16:34,899
I'm selecting this header file<font color="#E5E5E5"> from the</font>

362
00:16:32,779 --> 00:16:40,040
directory that<font color="#E5E5E5"> says there's a Clint and</font>

363
00:16:34,899 --> 00:16:46,540
no extensions<font color="#E5E5E5"> if I look at that header</font>

364
00:16:40,040 --> 00:16:46,540
file<font color="#E5E5E5"> we will see that there is this</font>

365
00:16:48,549 --> 00:16:55,549
macro that says additional<font color="#E5E5E5"> registers</font><font color="#CCCCCC"> 0</font>

366
00:16:52,429 --> 00:16:58,819
and underneath there<font color="#E5E5E5"> if I can scroll</font>

367
00:16:55,549 --> 00:17:00,559
this down<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> two assembly macros</font>

368
00:16:58,819 --> 00:17:04,339
<font color="#E5E5E5">save them restore additional registers</font>

369
00:17:00,559 --> 00:17:12,529
and they're both empty<font color="#E5E5E5"> so if I then</font>

370
00:17:04,339 --> 00:17:15,138
<font color="#E5E5E5">switch to the</font><font color="#CCCCCC"> poll pino the they the</font>

371
00:17:12,529 --> 00:17:20,299
different architecture that does have

372
00:17:15,138 --> 00:17:24,138
extensions here we will see that at the

373
00:17:20,299 --> 00:17:26,209
<font color="#E5E5E5">top one mouse works I've say this is six</font>

374
00:17:24,138 --> 00:17:28,820
additional registers and then<font color="#E5E5E5"> these</font>

375
00:17:26,209 --> 00:17:32,450
macros very very simply what they are

376
00:17:28,820 --> 00:17:35,168
doing is copying the extended registers

377
00:17:32,450 --> 00:17:38,029
there are six additional registers<font color="#E5E5E5"> and</font>

378
00:17:35,169 --> 00:17:39,830
it's copying them into core local

379
00:17:38,029 --> 00:17:42,769
registers and then<font color="#E5E5E5"> saving them to the</font>

380
00:17:39,830 --> 00:17:46,340
stack<font color="#E5E5E5"> and then likewise we have a</font>

381
00:17:42,769 --> 00:17:48,890
restore context and that's all we have

382
00:17:46,340 --> 00:17:52,399
to do to<font color="#E5E5E5"> take care of those additional</font>

383
00:17:48,890 --> 00:17:55,820
registers but we also have to make<font color="#CCCCCC"> sure</font>

384
00:17:52,400 --> 00:17:58,669
<font color="#E5E5E5">that we can</font><font color="#CCCCCC"> actually pick out the</font>

385
00:17:55,820 --> 00:18:02,990
correct header file and that's just done

386
00:17:58,669 --> 00:18:10,610
<font color="#CCCCCC">by if</font><font color="#E5E5E5"> we go to the assembly properties</font>

387
00:18:02,990 --> 00:18:13,400
here we can see<font color="#E5E5E5"> that in the includes we</font>

388
00:18:10,610 --> 00:18:16,100
have in the assembly includes<font color="#CCCCCC"> these are</font>

389
00:18:13,400 --> 00:18:19,850
not the compiler includes we just pick

390
00:18:16,100 --> 00:18:21,289
out the correct directory structure I

391
00:18:19,850 --> 00:18:23,899
was just<font color="#E5E5E5"> gone off the screen of it but</font>

392
00:18:21,289 --> 00:18:27,200
we<font color="#CCCCCC"> just pick out the path to the header</font>

393
00:18:23,899 --> 00:18:29,620
file<font color="#E5E5E5"> that manages those extensions the</font>

394
00:18:27,200 --> 00:18:31,669
other thing I said was<font color="#CCCCCC"> that the</font>

395
00:18:29,620 --> 00:18:34,729
architectures had different interrupt

396
00:18:31,669 --> 00:18:38,149
controllers<font color="#E5E5E5"> we also have to set</font><font color="#CCCCCC"> up and</font>

397
00:18:34,730 --> 00:18:42,919
to ensure that the kernel calls the

398
00:18:38,149 --> 00:18:45,620
correct<font color="#E5E5E5"> interrupt controller and we do</font>

399
00:18:42,919 --> 00:18:47,990
that by<font color="#CCCCCC"> setting this macro again</font><font color="#E5E5E5"> in the</font>

400
00:18:45,620 --> 00:18:50,418
assembly we've got this handle interrupt

401
00:18:47,990 --> 00:18:53,720
macro and we just point it to whichever

402
00:18:50,419 --> 00:18:56,360
handler is provided by the the board

403
00:18:53,720 --> 00:18:58,669
manufacturer to handle interrupts in the

404
00:18:56,360 --> 00:19:01,908
<font color="#CCCCCC">pal pino case all interrupts go to this</font>

405
00:18:58,669 --> 00:19:04,580
<font color="#E5E5E5">vectored interrupt controller in this</font><font color="#CCCCCC"> sy</font>

406
00:19:01,909 --> 00:19:07,270
<font color="#CCCCCC">v case the</font><font color="#E5E5E5"> Clint</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> the local</font><font color="#CCCCCC"> ones and</font>

407
00:19:04,580 --> 00:19:13,610
then only the<font color="#E5E5E5"> external interrupts get</font>

408
00:19:07,270 --> 00:19:18,440
sent<font color="#CCCCCC"> it-- so that's basically it</font><font color="#E5E5E5"> as far</font>

409
00:19:13,610 --> 00:19:20,779
as tailoring the kernel is there's a

410
00:19:18,440 --> 00:19:23,899
<font color="#E5E5E5">couple of other things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to</font>

411
00:19:20,779 --> 00:19:25,940
do like<font color="#E5E5E5"> give it</font><font color="#CCCCCC"> the base</font><font color="#E5E5E5"> address of</font>

412
00:19:23,899 --> 00:19:27,620
where the Clint is or if they're in<font color="#CCCCCC"> the</font>

413
00:19:25,940 --> 00:19:33,100
<font color="#E5E5E5">pulp Ino case there isn't one we</font><font color="#CCCCCC"> just</font>

414
00:19:27,620 --> 00:19:36,260
set the<font color="#E5E5E5"> base address to zero okay so</font>

415
00:19:33,100 --> 00:19:44,689
finally so I<font color="#CCCCCC"> think I'm</font><font color="#E5E5E5"> out of time</font>

416
00:19:36,260 --> 00:19:47,390
<font color="#E5E5E5">basically then we look at this diagram</font>

417
00:19:44,690 --> 00:19:49,909
there<font color="#CCCCCC"> are a few risk v implementations</font>

418
00:19:47,390 --> 00:19:51,919
that<font color="#E5E5E5"> are other people have done well on</font>

419
00:19:49,909 --> 00:19:54,110
demonstrating<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is our</font><font color="#E5E5E5"> official one</font>

420
00:19:51,919 --> 00:19:56,539
which is the one that we create<font color="#E5E5E5"> as the</font>

421
00:19:54,110 --> 00:19:57,830
maintainer<font color="#CCCCCC"> zuv</font><font color="#E5E5E5"> Rios and</font><font color="#CCCCCC"> tests give</font><font color="#E5E5E5"> all</font>

422
00:19:56,539 --> 00:20:00,170
the tests<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> would all the other</font>

423
00:19:57,830 --> 00:20:02,620
kernel ports and then support

424
00:20:00,170 --> 00:20:05,480
and one<font color="#E5E5E5"> of the things we have done is</font>

425
00:20:02,620 --> 00:20:07,429
<font color="#CCCCCC">introduce this and</font><font color="#E5E5E5"> separate interrupts</font>

426
00:20:05,480 --> 00:20:10,250
<font color="#CCCCCC">tak</font><font color="#E5E5E5"> the other ones I've seen aren't</font>

427
00:20:07,430 --> 00:20:12,020
<font color="#CCCCCC">using this so in each task when you</font>

428
00:20:10,250 --> 00:20:14,210
create a task<font color="#E5E5E5"> you have to allocate a</font>

429
00:20:12,020 --> 00:20:15,110
stack and the stack has<font color="#E5E5E5"> to be</font>

430
00:20:14,210 --> 00:20:17,540
dimensioned

431
00:20:15,110 --> 00:20:20,570
to make sure it can<font color="#E5E5E5"> hold the entire call</font>

432
00:20:17,540 --> 00:20:22,550
depth<font color="#E5E5E5"> of whatever program its program</font>

433
00:20:20,570 --> 00:20:25,340
<font color="#E5E5E5">it's running and then if an interrupt</font>

434
00:20:22,550 --> 00:20:27,649
occurs right at the maximum<font color="#E5E5E5"> call depth</font>

435
00:20:25,340 --> 00:20:30,709
it then has to have the whole interrupt

436
00:20:27,650 --> 00:20:33,170
stack<font color="#CCCCCC"> sizes as well so if you allocate</font>

437
00:20:30,710 --> 00:20:35,060
<font color="#CCCCCC">that I'm trying</font><font color="#E5E5E5"> to I'm trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind of</font>

438
00:20:33,170 --> 00:20:37,400
<font color="#CCCCCC">demonstrate that on the</font><font color="#E5E5E5"> diagram here the</font>

439
00:20:35,060 --> 00:20:40,610
<font color="#E5E5E5">task stack</font><font color="#CCCCCC"> and the interrupt stack if</font>

440
00:20:37,400 --> 00:20:42,940
every task<font color="#E5E5E5"> has to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> that and when you</font>

441
00:20:40,610 --> 00:20:46,280
add up<font color="#CCCCCC"> all the RAM which is going to</font>

442
00:20:42,940 --> 00:20:48,380
tasks tax and we're duplicating<font color="#CCCCCC"> that</font>

443
00:20:46,280 --> 00:20:50,840
interrupt stack<font color="#E5E5E5"> so they're very very</font>

444
00:20:48,380 --> 00:20:53,240
basically<font color="#E5E5E5"> in the official version we've</font>

445
00:20:50,840 --> 00:20:55,879
just separated out that irq stack and

446
00:20:53,240 --> 00:20:57,650
that<font color="#CCCCCC"> means that</font><font color="#E5E5E5"> only appears once and</font>

447
00:20:55,880 --> 00:20:59,900
we've saved<font color="#E5E5E5"> and we've saved some RAM</font>

448
00:20:57,650 --> 00:21:01,250
there<font color="#E5E5E5"> I've only shown three tasks here</font>

449
00:20:59,900 --> 00:21:03,920
but you imagine if<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> 1015</font>

450
00:21:01,250 --> 00:21:08,120
<font color="#E5E5E5">threads then there that would make a big</font>

451
00:21:03,920 --> 00:21:10,700
difference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> your RAM consumption now</font>

452
00:21:08,120 --> 00:21:14,060
the interrupts<font color="#E5E5E5"> back you can define just</font>

453
00:21:10,700 --> 00:21:17,900
by<font color="#E5E5E5"> setting a</font><font color="#CCCCCC"> peng</font><font color="#E5E5E5"> define you can get the</font>

454
00:21:14,060 --> 00:21:21,080
kernel to actually allocate<font color="#CCCCCC"> that for you</font>

455
00:21:17,900 --> 00:21:23,630
as a static array<font color="#E5E5E5"> but again because we</font>

456
00:21:21,080 --> 00:21:26,360
want<font color="#E5E5E5"> to save as much memory</font><font color="#CCCCCC"> as possible</font>

457
00:21:23,630 --> 00:21:27,590
on<font color="#E5E5E5"> these small NC use the other you can</font>

458
00:21:26,360 --> 00:21:30,229
do the other<font color="#E5E5E5"> thing you can do is</font>

459
00:21:27,590 --> 00:21:31,939
optionally define this link of<font color="#CCCCCC"> aryl</font><font color="#E5E5E5"> so</font>

460
00:21:30,230 --> 00:21:35,240
<font color="#CCCCCC">i've just</font><font color="#E5E5E5"> taken the linker script that</font>

461
00:21:31,940 --> 00:21:37,790
came with the code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i've added in</font>

462
00:21:35,240 --> 00:21:40,190
this linker variable being<font color="#E5E5E5"> careful to</font>

463
00:21:37,790 --> 00:21:41,960
make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's address matches the</font>

464
00:21:40,190 --> 00:21:44,600
<font color="#CCCCCC">address of the stack that's</font><font color="#E5E5E5"> already</font>

465
00:21:41,960 --> 00:21:47,960
allocated<font color="#E5E5E5"> in the linker the reason for</font>

466
00:21:44,600 --> 00:21:50,750
<font color="#CCCCCC">that is you start the code see run time</font>

467
00:21:47,960 --> 00:21:53,210
starts main is entered there's a stack

468
00:21:50,750 --> 00:21:55,610
<font color="#E5E5E5">for main you then start the scheduler</font>

469
00:21:53,210 --> 00:21:57,650
after that the stacks are used either

470
00:21:55,610 --> 00:21:59,810
<font color="#E5E5E5">the task stacks all the interrupts</font>

471
00:21:57,650 --> 00:22:01,840
<font color="#E5E5E5">stacks the stack</font><font color="#CCCCCC"> that was used by main</font>

472
00:21:59,810 --> 00:22:05,270
kind of leaks away is never used again

473
00:22:01,840 --> 00:22:10,689
<font color="#E5E5E5">so by doing this what we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to do</font>

474
00:22:05,270 --> 00:22:14,240
is reuse you know reclaim<font color="#CCCCCC"> that memory</font>

475
00:22:10,690 --> 00:22:16,730
and I know that<font color="#E5E5E5"> was a really really</font>

476
00:22:14,240 --> 00:22:20,990
and I was talking<font color="#CCCCCC"> really quickly I got</font>

477
00:22:16,730 --> 00:22:24,230
through to<font color="#CCCCCC"> the end</font><font color="#E5E5E5"> and I'll be around if</font>

478
00:22:20,990 --> 00:22:27,230
people<font color="#E5E5E5"> want to talk and I'll say thank</font>

479
00:22:24,230 --> 00:22:30,169
you for<font color="#E5E5E5"> coming again</font><font color="#CCCCCC"> a few details here</font>

480
00:22:27,230 --> 00:22:31,909
on<font color="#E5E5E5"> there some URLs and some handles</font>

481
00:22:30,169 --> 00:22:34,070
where you can find out about<font color="#E5E5E5"> Amazon's</font>

482
00:22:31,909 --> 00:22:36,259
work and<font color="#E5E5E5"> open source and there are some</font>

483
00:22:34,070 --> 00:22:38,570
very distinguished<font color="#CCCCCC"> you know people very</font>

484
00:22:36,259 --> 00:22:40,610
experienced at open<font color="#E5E5E5"> source in Amazon and</font>

485
00:22:38,570 --> 00:22:42,769
they provide<font color="#E5E5E5"> this free book that you can</font>

486
00:22:40,610 --> 00:22:44,779
go and<font color="#E5E5E5"> download so I'd encourage</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> to</font>

487
00:22:42,769 --> 00:22:47,750
<font color="#CCCCCC">do that and I think I've</font><font color="#E5E5E5"> got about</font><font color="#CCCCCC"> 30</font>

488
00:22:44,779 --> 00:22:49,429
seconds<font color="#CCCCCC"> which</font><font color="#E5E5E5"> if there are quick</font>

489
00:22:47,750 --> 00:23:12,830
questions that's fine<font color="#E5E5E5"> otherwise I'm</font>

490
00:22:49,429 --> 00:23:15,830
happy<font color="#E5E5E5"> to talk and everything worked why</font>

491
00:23:12,830 --> 00:23:20,059
is there interest and there there's

492
00:23:15,830 --> 00:23:23,178
interest<font color="#E5E5E5"> because basically we want to do</font>

493
00:23:20,059 --> 00:23:25,700
what our<font color="#E5E5E5"> customers want us to do in that</font>

494
00:23:23,179 --> 00:23:28,759
<font color="#E5E5E5">is is</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> about all the roadmap is</font>

495
00:23:25,700 --> 00:23:31,070
customer driven<font color="#CCCCCC"> and at the moment there</font>

496
00:23:28,759 --> 00:23:34,190
<font color="#CCCCCC">are there's a lot of activity with free</font>

497
00:23:31,070 --> 00:23:36,590
artists in in risk<font color="#E5E5E5"> 5 there are</font><font color="#CCCCCC"> 4 or 5</font>

498
00:23:34,190 --> 00:23:39,559
<font color="#E5E5E5">different ports and I don't</font><font color="#CCCCCC"> think you</font>

499
00:23:36,590 --> 00:23:42,110
know<font color="#E5E5E5"> that kind of fragmentation is is</font>

500
00:23:39,559 --> 00:23:43,428
just not good<font color="#CCCCCC"> for our ability to</font><font color="#E5E5E5"> support</font>

501
00:23:42,110 --> 00:23:46,070
the code and<font color="#CCCCCC"> that sort of thing so we</font>

502
00:23:43,429 --> 00:23:48,919
want to try<font color="#CCCCCC"> and have a kind</font><font color="#E5E5E5"> of unified</font>

503
00:23:46,070 --> 00:23:51,019
version that we are<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> support and</font>

504
00:23:48,919 --> 00:23:52,610
to answer<font color="#E5E5E5"> your question</font><font color="#CCCCCC"> the reason is</font>

505
00:23:51,019 --> 00:23:58,340
<font color="#E5E5E5">because people are</font><font color="#CCCCCC"> doing it already so</font>

506
00:23:52,610 --> 00:24:01,870
there's demand<font color="#E5E5E5"> for it any other</font>

507
00:23:58,340 --> 00:24:05,149
questions in the<font color="#E5E5E5"> 15 seconds left</font>

508
00:24:01,870 --> 00:24:07,209
<font color="#CCCCCC">ok so wrap up Thanks</font>

509
00:24:05,149 --> 00:24:07,209
you

