1
00:00:04,850 --> 00:00:09,739
<font color="#CCCCCC">hey</font><font color="#E5E5E5"> thank you everyone good morning and</font>

2
00:00:07,730 --> 00:00:12,580
I'm<font color="#CCCCCC"> Bruna Schmidt I'm here to present</font>

3
00:00:09,740 --> 00:00:15,620
<font color="#E5E5E5">today the PFL logic synthesis libraries</font>

4
00:00:12,580 --> 00:00:18,440
which is<font color="#CCCCCC"> is the result of the combining</font>

5
00:00:15,620 --> 00:00:22,279
<font color="#E5E5E5">work of many people</font><font color="#CCCCCC"> in our LSI research</font>

6
00:00:18,440 --> 00:00:24,289
group at the PFL so we have this

7
00:00:22,279 --> 00:00:27,170
collection<font color="#E5E5E5"> of libraries for open source</font>

8
00:00:24,289 --> 00:00:29,390
infrastructure to do<font color="#CCCCCC"> logic synthesis we</font>

9
00:00:27,170 --> 00:00:31,519
have state-of-the-art<font color="#E5E5E5"> algorithms we</font>

10
00:00:29,390 --> 00:00:33,080
target both conventional<font color="#CCCCCC"> watches into</font>

11
00:00:31,519 --> 00:00:35,199
this classical<font color="#E5E5E5"> logic synthesis a now so</font>

12
00:00:33,080 --> 00:00:39,440
<font color="#CCCCCC">quantum compilation more</font><font color="#E5E5E5"> recently and</font>

13
00:00:35,200 --> 00:00:43,070
our libraries they have MIT license<font color="#E5E5E5"> as</font>

14
00:00:39,440 --> 00:00:45,140
far<font color="#E5E5E5"> as I remember so a brief of the</font>

15
00:00:43,070 --> 00:00:47,180
<font color="#E5E5E5">outline of this talk I will talk a</font>

16
00:00:45,140 --> 00:00:56,719
little<font color="#E5E5E5"> bit about logic synthesis I'm</font>

17
00:00:47,180 --> 00:01:00,530
sorry about that<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> hopefully the</font>

18
00:00:56,719 --> 00:01:01,760
<font color="#CCCCCC">others</font><font color="#E5E5E5"> it was fine before well let's try</font>

19
00:01:00,530 --> 00:01:03,440
to go like<font color="#CCCCCC"> this so I</font><font color="#E5E5E5"> will talk a little</font>

20
00:01:01,760 --> 00:01:05,149
bit about like synthesis then the

21
00:01:03,440 --> 00:01:08,390
motivations and goals of<font color="#CCCCCC"> the libraries</font>

22
00:01:05,150 --> 00:01:10,610
then a bit about their implementation

23
00:01:08,390 --> 00:01:14,590
and then give an example of how<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

24
00:01:10,610 --> 00:01:17,780
<font color="#CCCCCC">them to do</font><font color="#E5E5E5"> something interesting so</font>

25
00:01:14,590 --> 00:01:19,430
<font color="#E5E5E5">large synthesis</font><font color="#CCCCCC"> the process by</font><font color="#E5E5E5"> which we</font>

26
00:01:17,780 --> 00:01:21,979
take some abstract specification on a

27
00:01:19,430 --> 00:01:24,320
specific<font color="#CCCCCC"> behavior and then we map to</font>

28
00:01:21,979 --> 00:01:26,390
some technology dependent logic

29
00:01:24,320 --> 00:01:30,979
primitives<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we've have a specification</font>

30
00:01:26,390 --> 00:01:33,409
<font color="#E5E5E5">for example in RTL very long VHDL then</font>

31
00:01:30,979 --> 00:01:36,170
we want<font color="#E5E5E5"> to map it into an SPG a and we</font>

32
00:01:33,409 --> 00:01:38,329
know<font color="#CCCCCC"> that at some point we need to map</font>

33
00:01:36,170 --> 00:01:41,600
it to some loot network because<font color="#CCCCCC"> LUT net</font>

34
00:01:38,329 --> 00:01:46,130
lookup table networks that lies inside

35
00:01:41,600 --> 00:01:48,320
the<font color="#E5E5E5"> FPGAs to do so we</font><font color="#CCCCCC"> use a bunch</font><font color="#E5E5E5"> of</font>

36
00:01:46,130 --> 00:01:50,630
<font color="#E5E5E5">different</font><font color="#CCCCCC"> ways of representing logic so</font>

37
00:01:48,320 --> 00:01:52,250
basically we<font color="#CCCCCC"> take our specification we</font>

38
00:01:50,630 --> 00:01:54,500
will use one of<font color="#E5E5E5"> these ways of</font>

39
00:01:52,250 --> 00:01:56,570
representing you have products of<font color="#E5E5E5"> some</font>

40
00:01:54,500 --> 00:01:59,740
<font color="#CCCCCC">sum of products logic networks the size</font>

41
00:01:56,570 --> 00:02:01,908
decision diagrams<font color="#E5E5E5"> and truth tables and</font>

42
00:01:59,740 --> 00:02:03,619
basically<font color="#E5E5E5"> in our synthesis what you do</font>

43
00:02:01,909 --> 00:02:07,189
we start with<font color="#E5E5E5"> one representation we do</font>

44
00:02:03,619 --> 00:02:09,649
some optimization we we go to another

45
00:02:07,189 --> 00:02:12,590
<font color="#E5E5E5">representation</font><font color="#CCCCCC"> do some more optimization</font>

46
00:02:09,649 --> 00:02:16,640
and keep transforming until we are happy

47
00:02:12,590 --> 00:02:20,280
and we<font color="#E5E5E5"> do some technology map</font>

48
00:02:16,640 --> 00:02:23,700
so what is the motivation<font color="#CCCCCC"> and go</font><font color="#E5E5E5"> Sephora</font>

49
00:02:20,280 --> 00:02:25,590
<font color="#E5E5E5">of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> libraries so we're doing</font>

50
00:02:23,700 --> 00:02:26,910
researching our synthesis and we are a

51
00:02:25,590 --> 00:02:30,390
bunch<font color="#CCCCCC"> of different researchers we all</font>

52
00:02:26,910 --> 00:02:32,609
did<font color="#E5E5E5"> specific</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> and what happened to</font>

53
00:02:30,390 --> 00:02:34,589
<font color="#E5E5E5">Lord that we are our implementing</font>

54
00:02:32,610 --> 00:02:37,950
<font color="#E5E5E5">reinventing the wheel every</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> you</font>

55
00:02:34,590 --> 00:02:39,660
<font color="#E5E5E5">wanted something so basically to reuse</font>

56
00:02:37,950 --> 00:02:41,880
common functionality<font color="#E5E5E5"> amongst us and</font>

57
00:02:39,660 --> 00:02:45,240
amongst the community that's<font color="#E5E5E5"> what we are</font>

58
00:02:41,880 --> 00:02:47,640
hoping<font color="#CCCCCC"> for</font><font color="#E5E5E5"> so we really wanted this</font>

59
00:02:45,240 --> 00:02:50,100
libraries to be<font color="#E5E5E5"> easy to integrate easy</font>

60
00:02:47,640 --> 00:02:52,649
to adapt<font color="#E5E5E5"> for our needs and easy to</font>

61
00:02:50,100 --> 00:02:55,560
contribute they are quite modular so

62
00:02:52,650 --> 00:02:58,830
each library will<font color="#E5E5E5"> target</font><font color="#CCCCCC"> one a</font><font color="#E5E5E5"> specific</font>

63
00:02:55,560 --> 00:03:00,360
task in logic synthesis and and then we

64
00:02:58,830 --> 00:03:03,090
can compose<font color="#CCCCCC"> then to create</font><font color="#E5E5E5"> bigger</font>

65
00:03:00,360 --> 00:03:07,970
frameworks for example circuit<font color="#E5E5E5"> if you</font>

66
00:03:03,090 --> 00:03:10,170
guys know about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> it is today just</font>

67
00:03:07,970 --> 00:03:13,380
the composition<font color="#E5E5E5"> of all these libraries</font>

68
00:03:10,170 --> 00:03:15,809
<font color="#CCCCCC">tool to do logic synthesis we are also</font>

69
00:03:13,380 --> 00:03:19,950
motivated<font color="#CCCCCC"> by</font><font color="#E5E5E5"> some lessons learned</font><font color="#CCCCCC"> from</font>

70
00:03:15,810 --> 00:03:21,690
the development from Berkeley's ABC the

71
00:03:19,950 --> 00:03:22,200
<font color="#E5E5E5">alum</font><font color="#CCCCCC"> which anko</font><font color="#E5E5E5"> its creator and</font>

72
00:03:21,690 --> 00:03:24,359
maintainer

73
00:03:22,200 --> 00:03:26,040
give us a talk and<font color="#E5E5E5"> then where he shared</font>

74
00:03:24,360 --> 00:03:27,990
<font color="#CCCCCC">before of his experience and things that</font>

75
00:03:26,040 --> 00:03:31,410
who have<font color="#E5E5E5"> done different if you were to</font>

76
00:03:27,990 --> 00:03:34,650
implement<font color="#E5E5E5"> ABC now so we try to keep that</font>

77
00:03:31,410 --> 00:03:36,840
<font color="#CCCCCC">in mind as well so these are basically</font>

78
00:03:34,650 --> 00:03:41,000
the<font color="#E5E5E5"> the nine libraries that</font><font color="#CCCCCC"> have Tuesday</font>

79
00:03:36,840 --> 00:03:46,110
and as I told<font color="#E5E5E5"> you told you each one will</font>

80
00:03:41,000 --> 00:03:50,160
you target a specific thing on when

81
00:03:46,110 --> 00:03:51,660
doing<font color="#E5E5E5"> watch synthesis a bit about it</font>

82
00:03:50,160 --> 00:03:55,710
<font color="#E5E5E5">implementation before</font><font color="#CCCCCC"> we go on on that</font>

83
00:03:51,660 --> 00:03:57,570
into the into the example<font color="#E5E5E5"> so they are in</font>

84
00:03:55,710 --> 00:04:00,600
there are more implementations they use

85
00:03:57,570 --> 00:04:03,660
C++ 14 or 17<font color="#CCCCCC"> they are had</font><font color="#E5E5E5"> their only</font>

86
00:04:00,600 --> 00:04:05,549
they have almost<font color="#E5E5E5"> no dependency and when</font>

87
00:04:03,660 --> 00:04:07,260
they have<font color="#E5E5E5"> some dependency it is usually</font>

88
00:04:05,550 --> 00:04:09,090
either only<font color="#E5E5E5"> and shipped</font><font color="#CCCCCC"> together with</font>

89
00:04:07,260 --> 00:04:10,739
the<font color="#CCCCCC"> libraries so it just like look at</font>

90
00:04:09,090 --> 00:04:14,040
the folder<font color="#E5E5E5"> and start playing</font><font color="#CCCCCC"> with it</font>

91
00:04:10,740 --> 00:04:17,570
<font color="#E5E5E5">they are well documented and well tested</font>

92
00:04:14,040 --> 00:04:22,130
<font color="#CCCCCC">to some extent we still</font><font color="#E5E5E5"> working on tests</font>

93
00:04:17,570 --> 00:04:24,599
<font color="#CCCCCC">hard thing so for this presentation</font>

94
00:04:22,130 --> 00:04:26,940
because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the time limit</font><font color="#CCCCCC"> I will only</font>

95
00:04:24,600 --> 00:04:28,590
focus<font color="#E5E5E5"> on this for libraries and show you</font>

96
00:04:26,940 --> 00:04:30,150
how<font color="#E5E5E5"> you can compose this for libraries</font>

97
00:04:28,590 --> 00:04:32,690
<font color="#E5E5E5">to go for my specific</font><font color="#CCCCCC"> a</font>

98
00:04:30,150 --> 00:04:34,979
- I'll<font color="#E5E5E5"> eat remapping that can then be</font>

99
00:04:32,690 --> 00:04:37,380
given to a placing<font color="#CCCCCC"> router and</font><font color="#E5E5E5"> and put on</font>

100
00:04:34,979 --> 00:04:39,659
<font color="#E5E5E5">our FPGA so let's move on</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

101
00:04:37,380 --> 00:04:41,880
<font color="#E5E5E5">example we start with the specification</font>

102
00:04:39,660 --> 00:04:44,880
and then we wanted<font color="#E5E5E5"> to end in</font><font color="#CCCCCC"> this</font>

103
00:04:41,880 --> 00:04:47,760
<font color="#E5E5E5">le-tree</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> and for the sake of</font>

104
00:04:44,880 --> 00:04:50,430
making<font color="#E5E5E5"> this</font><font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> interesting the</font>

105
00:04:47,760 --> 00:04:52,289
<font color="#E5E5E5">Lu T's will have a limit size of</font><font color="#CCCCCC"> 3</font>

106
00:04:50,430 --> 00:04:57,990
<font color="#E5E5E5">otherwise would be like</font><font color="#CCCCCC"> too easy we'll</font>

107
00:04:52,290 --> 00:04:59,760
just use one LUT<font color="#E5E5E5"> so what is the function</font>

108
00:04:57,990 --> 00:05:01,889
<font color="#E5E5E5">or the circuit that I want to implement</font>

109
00:04:59,760 --> 00:05:04,530
<font color="#CCCCCC">is a combinational circuit i'll call it</font>

110
00:05:01,889 --> 00:05:09,060
<font color="#E5E5E5">prime</font><font color="#CCCCCC"> for which basically take as input</font>

111
00:05:04,530 --> 00:05:11,729
a<font color="#E5E5E5"> 4-bit number and will output</font><font color="#CCCCCC"> one</font>

112
00:05:09,060 --> 00:05:14,610
indicates this bit is prime<font color="#E5E5E5"> 0 otherwise</font>

113
00:05:11,729 --> 00:05:17,520
<font color="#E5E5E5">it's quite easy example here I have</font><font color="#CCCCCC"> some</font>

114
00:05:14,610 --> 00:05:19,080
description of very log of this<font color="#CCCCCC"> behavior</font>

115
00:05:17,520 --> 00:05:21,150
and then you might<font color="#CCCCCC"> be looking at</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font>

116
00:05:19,080 --> 00:05:24,240
say like<font color="#E5E5E5"> ok this guy has no</font><font color="#CCCCCC"> idea how to</font>

117
00:05:21,150 --> 00:05:26,010
do<font color="#E5E5E5"> very long description</font><font color="#CCCCCC"> and there is a</font>

118
00:05:24,240 --> 00:05:33,510
real good<font color="#E5E5E5"> reason for that but</font><font color="#CCCCCC"> it's also</font>

119
00:05:26,010 --> 00:05:35,159
<font color="#E5E5E5">true and more</font><font color="#CCCCCC"> if I've VHDL guy so this</font>

120
00:05:33,510 --> 00:05:36,990
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> board eyes view of what I want to</font>

121
00:05:35,160 --> 00:05:40,740
<font color="#E5E5E5">show to you we're doing three steps will</font>

122
00:05:36,990 --> 00:05:42,270
first take the the the<font color="#E5E5E5"> description and</font>

123
00:05:40,740 --> 00:05:43,650
<font color="#E5E5E5">then extract the logic out of it a</font>

124
00:05:42,270 --> 00:05:45,930
<font color="#E5E5E5">logical representation out of it and</font>

125
00:05:43,650 --> 00:05:48,359
then last<font color="#CCCCCC"> we'll do the technology</font>

126
00:05:45,930 --> 00:05:50,820
<font color="#E5E5E5">mapping hopefully</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have time I</font><font color="#CCCCCC"> will</font>

127
00:05:48,360 --> 00:05:54,539
show how to<font color="#E5E5E5"> do some optimization in</font>

128
00:05:50,820 --> 00:05:57,090
between those two steps<font color="#CCCCCC"> so how do</font><font color="#E5E5E5"> you do</font>

129
00:05:54,539 --> 00:06:00,389
the parsing for for parsing we lose

130
00:05:57,090 --> 00:06:03,030
<font color="#CCCCCC">levena library which has</font><font color="#E5E5E5"> a collection of</font>

131
00:06:00,389 --> 00:06:05,880
<font color="#E5E5E5">parsers for various file formats using</font>

132
00:06:03,030 --> 00:06:10,080
<font color="#E5E5E5">logic synthesis</font><font color="#CCCCCC"> I have agar bench</font><font color="#E5E5E5"> bliss</font>

133
00:06:05,880 --> 00:06:11,550
PLA very<font color="#CCCCCC"> long but very</font><font color="#E5E5E5"> simple gate based</font>

134
00:06:10,080 --> 00:06:13,650
very<font color="#CCCCCC"> long and that's</font><font color="#E5E5E5"> the reason why the</font>

135
00:06:11,550 --> 00:06:15,419
very large<font color="#E5E5E5"> looks so weird</font><font color="#CCCCCC"> in the</font>

136
00:06:13,650 --> 00:06:18,270
<font color="#E5E5E5">previous slide we</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> have some</font><font color="#CCCCCC"> live</font>

137
00:06:15,419 --> 00:06:22,049
<font color="#E5E5E5">and able to pass Liberty files that's</font>

138
00:06:18,270 --> 00:06:23,520
still<font color="#CCCCCC"> of</font><font color="#E5E5E5"> working progress and the</font>

139
00:06:22,050 --> 00:06:26,550
library itself<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is lightweight and</font>

140
00:06:23,520 --> 00:06:28,770
<font color="#CCCCCC">quite</font><font color="#E5E5E5"> competent customizable basically</font>

141
00:06:26,550 --> 00:06:31,650
the parcels they will read<font color="#CCCCCC"> input and</font>

142
00:06:28,770 --> 00:06:34,080
invoke callbacks whenever<font color="#CCCCCC"> a parsing</font>

143
00:06:31,650 --> 00:06:36,210
primitive is completed<font color="#E5E5E5"> so you need</font>

144
00:06:34,080 --> 00:06:39,060
something<font color="#E5E5E5"> to interface with this library</font>

145
00:06:36,210 --> 00:06:41,969
<font color="#E5E5E5">and what we use and what we will</font><font color="#CCCCCC"> use in</font>

146
00:06:39,060 --> 00:06:44,100
this presentation is or much network

147
00:06:41,969 --> 00:06:45,870
library<font color="#E5E5E5"> mock turtle the</font>

148
00:06:44,100 --> 00:06:48,870
provide<font color="#CCCCCC"> buyers large</font><font color="#E5E5E5"> network</font>

149
00:06:45,870 --> 00:06:51,990
representations and implement several

150
00:06:48,870 --> 00:06:54,270
reader callbacks for<font color="#CCCCCC"> eager Bank</font><font color="#E5E5E5"> PLA and</font>

151
00:06:51,990 --> 00:06:58,650
<font color="#E5E5E5">very</font><font color="#CCCCCC"> long</font><font color="#E5E5E5"> so now you lose the very</font><font color="#CCCCCC"> large</font>

152
00:06:54,270 --> 00:07:02,640
<font color="#E5E5E5">parcel and by partially the input we can</font>

153
00:06:58,650 --> 00:07:06,479
get this<font color="#E5E5E5"> network representations which</font>

154
00:07:02,640 --> 00:07:08,760
basically<font color="#E5E5E5"> on your left</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have this an</font>

155
00:07:06,480 --> 00:07:12,000
inverter graph so<font color="#E5E5E5"> you have the input on</font>

156
00:07:08,760 --> 00:07:14,789
the bottom as triangles<font color="#E5E5E5"> you have one</font>

157
00:07:12,000 --> 00:07:18,780
output<font color="#E5E5E5"> at the top and a bunch of nodes</font>

158
00:07:14,790 --> 00:07:21,240
in between<font color="#E5E5E5"> in there there are</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> input</font>

159
00:07:18,780 --> 00:07:22,770
and gates and<font color="#E5E5E5"> the edges</font><font color="#CCCCCC"> that connect</font>

160
00:07:21,240 --> 00:07:27,530
those gates and<font color="#E5E5E5"> then when you have a</font>

161
00:07:22,770 --> 00:07:31,979
dashed<font color="#E5E5E5"> egg it means there</font><font color="#CCCCCC"> is a inverter</font>

162
00:07:27,530 --> 00:07:33,299
you also can use majority inverter graph

163
00:07:31,980 --> 00:07:36,120
representation<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have on the</font>

164
00:07:33,300 --> 00:07:38,550
<font color="#CCCCCC">right which the main difference lies on</font>

165
00:07:36,120 --> 00:07:41,370
the fact that the nodes are three input

166
00:07:38,550 --> 00:07:43,650
majority gates<font color="#E5E5E5"> it also has this</font><font color="#CCCCCC"> dis</font>

167
00:07:41,370 --> 00:07:45,570
constant<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> node right there that it</font>

168
00:07:43,650 --> 00:07:49,200
is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> present on the</font><font color="#CCCCCC"> IG but as I</font>

169
00:07:45,570 --> 00:07:50,730
didn't need<font color="#E5E5E5"> to use it here</font><font color="#CCCCCC"> I omitted and</font>

170
00:07:49,200 --> 00:07:53,400
<font color="#CCCCCC">I will be a meeting</font><font color="#E5E5E5"> for the rest of the</font>

171
00:07:50,730 --> 00:07:55,380
presentation<font color="#CCCCCC"> but</font><font color="#E5E5E5"> these are large</font>

172
00:07:53,400 --> 00:07:58,620
networks<font color="#CCCCCC"> after optimization actually</font>

173
00:07:55,380 --> 00:08:00,240
when we<font color="#E5E5E5"> read</font><font color="#CCCCCC"> their directly</font><font color="#E5E5E5"> they look</font>

174
00:07:58,620 --> 00:08:02,820
much<font color="#E5E5E5"> messier and then they would not fit</font>

175
00:08:00,240 --> 00:08:05,760
in this light<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IAG actually there so</font>

176
00:08:02,820 --> 00:08:08,640
basically<font color="#E5E5E5"> when we first read the IG this</font>

177
00:08:05,760 --> 00:08:10,380
is when<font color="#E5E5E5"> first read the very log this is</font>

178
00:08:08,640 --> 00:08:15,510
the<font color="#E5E5E5"> an inverter graph that represents</font>

179
00:08:10,380 --> 00:08:17,610
the logic of the prime for input so<font color="#E5E5E5"> that</font>

180
00:08:15,510 --> 00:08:20,640
we<font color="#CCCCCC"> talked</font><font color="#E5E5E5"> about a little bit</font><font color="#CCCCCC"> about the</font>

181
00:08:17,610 --> 00:08:22,680
mock turtle library and it<font color="#E5E5E5"> is based on</font>

182
00:08:20,640 --> 00:08:25,469
this philosophy<font color="#E5E5E5"> of four layers you have</font>

183
00:08:22,680 --> 00:08:28,080
a network<font color="#E5E5E5"> interface API that basically</font>

184
00:08:25,470 --> 00:08:31,310
define some naming conventions<font color="#E5E5E5"> and</font>

185
00:08:28,080 --> 00:08:35,968
methods for classes<font color="#CCCCCC"> that implement</font><font color="#E5E5E5"> the</font>

186
00:08:31,310 --> 00:08:38,669
<font color="#E5E5E5">network structures then with</font><font color="#CCCCCC"> that allows</font>

187
00:08:35,969 --> 00:08:40,890
<font color="#CCCCCC">us to implement the algorithms</font><font color="#E5E5E5"> in a more</font>

188
00:08:38,669 --> 00:08:44,460
generic way<font color="#E5E5E5"> it then this will be</font>

189
00:08:40,890 --> 00:08:47,130
understood<font color="#CCCCCC"> and the fuse</font><font color="#E5E5E5"> right we have</font>

190
00:08:44,460 --> 00:08:49,140
the algorithms themselves<font color="#CCCCCC"> that use the</font>

191
00:08:47,130 --> 00:08:51,300
API and then we have<font color="#CCCCCC"> algorithms for</font>

192
00:08:49,140 --> 00:08:53,270
<font color="#E5E5E5">synthesis optimization and technology</font>

193
00:08:51,300 --> 00:08:55,859
mapping<font color="#E5E5E5"> and then we have a bunch of</font>

194
00:08:53,270 --> 00:08:57,040
<font color="#E5E5E5">network</font><font color="#CCCCCC"> implementations so we want you</font>

195
00:08:55,860 --> 00:08:59,949
might want<font color="#E5E5E5"> to represent</font>

196
00:08:57,040 --> 00:09:03,430
as<font color="#CCCCCC"> in</font><font color="#E5E5E5"> inverted graph majority</font><font color="#CCCCCC"> murder</font>

197
00:08:59,949 --> 00:09:07,060
graph<font color="#E5E5E5"> may be X or</font><font color="#CCCCCC"> majority grass sex or</font>

198
00:09:03,430 --> 00:09:08,888
<font color="#CCCCCC">endris kaleici networks or whatever kind</font>

199
00:09:07,060 --> 00:09:11,949
of network implementation<font color="#E5E5E5"> you want to</font>

200
00:09:08,889 --> 00:09:14,649
implement yourself<font color="#E5E5E5"> and as long as you</font>

201
00:09:11,949 --> 00:09:16,180
keep to our naming conventions<font color="#E5E5E5"> all the</font>

202
00:09:14,649 --> 00:09:17,620
algorithms<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have implemented they</font>

203
00:09:16,180 --> 00:09:21,729
have to do optimization<font color="#E5E5E5"> and mapping</font>

204
00:09:17,620 --> 00:09:23,980
<font color="#CCCCCC">should work lastly we have this layer</font>

205
00:09:21,730 --> 00:09:26,170
for<font color="#E5E5E5"> performance tweaks where we</font>

206
00:09:23,980 --> 00:09:29,259
basically you can specialize some

207
00:09:26,170 --> 00:09:31,660
algorithms to work<font color="#E5E5E5"> better in in some in</font>

208
00:09:29,259 --> 00:09:34,180
some<font color="#E5E5E5"> networks</font><font color="#CCCCCC"> and I will not go into</font>

209
00:09:31,660 --> 00:09:37,689
details<font color="#E5E5E5"> of this and</font><font color="#CCCCCC"> then not even sure</font>

210
00:09:34,180 --> 00:09:41,290
if we are<font color="#E5E5E5"> using this right now</font><font color="#CCCCCC"> so okay</font>

211
00:09:37,690 --> 00:09:45,100
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> there or an</font><font color="#CCCCCC"> inverted graph</font><font color="#E5E5E5"> and</font>

212
00:09:41,290 --> 00:09:47,259
now we want<font color="#E5E5E5"> to what we want to do is map</font>

213
00:09:45,100 --> 00:09:49,149
it so<font color="#E5E5E5"> we have a bunch of algorithms we</font>

214
00:09:47,259 --> 00:09:50,560
<font color="#CCCCCC">have cut enumeration Alinta</font><font color="#E5E5E5"> mapping node</font>

215
00:09:49,149 --> 00:09:52,630
procedures<font color="#E5E5E5"> described rewriting</font>

216
00:09:50,560 --> 00:09:55,388
refactoring<font color="#CCCCCC"> a bunch of different</font>

217
00:09:52,630 --> 00:09:57,939
algorithms<font color="#CCCCCC"> and if you have no idea what</font>

218
00:09:55,389 --> 00:10:00,490
<font color="#E5E5E5">this is it is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> such a problem</font><font color="#CCCCCC"> because</font>

219
00:09:57,940 --> 00:10:02,829
we are<font color="#CCCCCC"> well documented so</font><font color="#E5E5E5"> basically can</font>

220
00:10:00,490 --> 00:10:04,750
go to the web page<font color="#CCCCCC"> and/or</font><font color="#E5E5E5"> documentation</font>

221
00:10:02,829 --> 00:10:08,279
and they<font color="#E5E5E5"> were</font><font color="#CCCCCC"> explained what the</font>

222
00:10:04,750 --> 00:10:10,600
algorithm does how<font color="#CCCCCC"> it does it</font><font color="#E5E5E5"> in really</font>

223
00:10:08,279 --> 00:10:13,029
details<font color="#CCCCCC"> and then sometimes too many</font>

224
00:10:10,600 --> 00:10:14,949
details<font color="#E5E5E5"> private</font><font color="#CCCCCC"> verbose</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> then you can</font>

225
00:10:13,029 --> 00:10:17,260
understand<font color="#E5E5E5"> and learn what's</font><font color="#CCCCCC"> going on</font>

226
00:10:14,949 --> 00:10:19,839
right<font color="#CCCCCC"> there</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> begin</font><font color="#E5E5E5"> with the LUT</font>

227
00:10:17,260 --> 00:10:24,670
mapping and then basically<font color="#E5E5E5"> our</font><font color="#CCCCCC"> goal is</font>

228
00:10:19,839 --> 00:10:27,639
<font color="#E5E5E5">to cut or build a network in a way that</font>

229
00:10:24,670 --> 00:10:31,089
the different pieces<font color="#E5E5E5"> can fit into our</font>

230
00:10:27,639 --> 00:10:35,250
LUT<font color="#CCCCCC"> three primitive and we call this</font>

231
00:10:31,089 --> 00:10:37,750
<font color="#CCCCCC">pieces cut</font><font color="#E5E5E5"> so we cut it</font><font color="#CCCCCC"> in two cuts</font><font color="#E5E5E5"> and</font>

232
00:10:35,250 --> 00:10:39,699
there are many different<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> to do that</font>

233
00:10:37,750 --> 00:10:42,639
<font color="#CCCCCC">so</font><font color="#E5E5E5"> basically we could do it like this</font>

234
00:10:39,699 --> 00:10:46,269
<font color="#E5E5E5">and you see that our resulting and your</font>

235
00:10:42,639 --> 00:10:48,970
tree<font color="#CCCCCC"> network would use seven seven l</font>

236
00:10:46,269 --> 00:10:52,180
<font color="#CCCCCC">ET's but of course there</font><font color="#E5E5E5"> are many ways</font>

237
00:10:48,970 --> 00:10:53,860
<font color="#E5E5E5">of actually cutting a network so what we</font>

238
00:10:52,180 --> 00:10:57,008
do for students like we do cut the

239
00:10:53,860 --> 00:10:59,470
numeration<font color="#CCCCCC"> and we do it bounding some</font>

240
00:10:57,009 --> 00:11:01,810
parameters we bound the size of the LUT

241
00:10:59,470 --> 00:11:04,899
because we only are interested in LEDs

242
00:11:01,810 --> 00:11:07,089
with maximum we've<font color="#CCCCCC"> cuts with maximum of</font>

243
00:11:04,899 --> 00:11:08,980
three inputs<font color="#E5E5E5"> and then we also give a</font>

244
00:11:07,089 --> 00:11:10,269
maximum<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> cuts because we don't</font>

245
00:11:08,980 --> 00:11:11,040
want to<font color="#CCCCCC"> keep a numerator</font><font color="#E5E5E5"> in different</font>

246
00:11:10,269 --> 00:11:15,160
cuts forever

247
00:11:11,040 --> 00:11:18,069
so we take that that this representation

248
00:11:15,160 --> 00:11:19,719
<font color="#E5E5E5">and then we can enumerate</font><font color="#CCCCCC"> a little bit</font>

249
00:11:18,070 --> 00:11:21,430
more cuts<font color="#E5E5E5"> and then when you're happy</font>

250
00:11:19,720 --> 00:11:24,580
about the number of<font color="#E5E5E5"> cuts that we have</font>

251
00:11:21,430 --> 00:11:27,069
what we do it<font color="#E5E5E5"> is we select a set of cut</font>

252
00:11:24,580 --> 00:11:29,980
that will map the whole<font color="#CCCCCC"> neurologic</font>

253
00:11:27,070 --> 00:11:32,380
<font color="#CCCCCC">network</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> RM here</font><font color="#E5E5E5"> it is to find a good</font>

254
00:11:29,980 --> 00:11:33,850
<font color="#CCCCCC">map mapping</font><font color="#E5E5E5"> with respect to some cost</font>

255
00:11:32,380 --> 00:11:36,580
function<font color="#CCCCCC"> that you can define maybe</font>

256
00:11:33,850 --> 00:11:38,140
you're<font color="#E5E5E5"> interested in you have shorter</font>

257
00:11:36,580 --> 00:11:40,270
critical path delay<font color="#E5E5E5"> or maybe you're</font>

258
00:11:38,140 --> 00:11:43,810
interested<font color="#E5E5E5"> in have you know using a</font>

259
00:11:40,270 --> 00:11:46,630
smart number of value cheese so by

260
00:11:43,810 --> 00:11:48,250
selecting<font color="#CCCCCC"> different cuts</font><font color="#E5E5E5"> instead of</font>

261
00:11:46,630 --> 00:11:51,460
having this mapping<font color="#E5E5E5"> we could do it</font>

262
00:11:48,250 --> 00:11:54,310
<font color="#CCCCCC">slightly better</font><font color="#E5E5E5"> or we can do</font><font color="#CCCCCC"> even better</font>

263
00:11:51,460 --> 00:11:56,140
<font color="#E5E5E5">and not only minimizing the number of</font>

264
00:11:54,310 --> 00:12:00,430
<font color="#E5E5E5">value cheese but the number of</font><font color="#CCCCCC"> Lost</font>

265
00:11:56,140 --> 00:12:03,460
<font color="#CCCCCC">Levels in there in this network so by</font>

266
00:12:00,430 --> 00:12:06,250
now<font color="#CCCCCC"> I could</font><font color="#E5E5E5"> have the okay</font><font color="#CCCCCC"> I'm done but</font>

267
00:12:03,460 --> 00:12:10,240
there have been<font color="#CCCCCC"> no fun so let's look at</font>

268
00:12:06,250 --> 00:12:11,670
how<font color="#E5E5E5"> to do a bit of optimization using a</font>

269
00:12:10,240 --> 00:12:14,589
mock turtle

270
00:12:11,670 --> 00:12:17,680
so for optimization<font color="#E5E5E5"> or you do cut</font>

271
00:12:14,589 --> 00:12:19,510
rewriting and then basically<font color="#E5E5E5"> because we</font>

272
00:12:17,680 --> 00:12:22,959
already presented<font color="#E5E5E5"> what how to cut the</font>

273
00:12:19,510 --> 00:12:25,390
network<font color="#E5E5E5"> so what this test does algorithm</font>

274
00:12:22,959 --> 00:12:27,369
<font color="#E5E5E5">will try to rewrite</font><font color="#CCCCCC"> cuts in</font><font color="#E5E5E5"> terms of</font>

275
00:12:25,390 --> 00:12:30,430
another set of nodes so you'll take one

276
00:12:27,370 --> 00:12:32,230
cut<font color="#E5E5E5"> the cut is the sub network itself</font><font color="#CCCCCC"> I</font>

277
00:12:30,430 --> 00:12:37,900
will<font color="#E5E5E5"> try to minimize</font><font color="#CCCCCC"> the number of nodes</font>

278
00:12:32,230 --> 00:12:39,970
inside that cut<font color="#E5E5E5"> and for example let's</font>

279
00:12:37,900 --> 00:12:42,400
<font color="#E5E5E5">take for example just cut we want to</font>

280
00:12:39,970 --> 00:12:44,110
compute<font color="#E5E5E5"> a replacement for it so we want</font>

281
00:12:42,400 --> 00:12:48,010
a<font color="#E5E5E5"> function that implements the</font><font color="#CCCCCC"> same</font>

282
00:12:44,110 --> 00:12:51,010
functionality that it is being realized

283
00:12:48,010 --> 00:12:52,480
by<font color="#E5E5E5"> this by this set of nodes</font><font color="#CCCCCC"> and the</font>

284
00:12:51,010 --> 00:12:54,730
first and the<font color="#E5E5E5"> first thing we do it is</font>

285
00:12:52,480 --> 00:12:57,250
actually we want to<font color="#E5E5E5"> represent more</font>

286
00:12:54,730 --> 00:12:59,770
<font color="#E5E5E5">explicitly what the function</font><font color="#CCCCCC"> that this</font>

287
00:12:57,250 --> 00:13:04,990
cut is implementing it is actually<font color="#E5E5E5"> doing</font>

288
00:12:59,770 --> 00:13:08,310
and for that we<font color="#CCCCCC"> use a truth table</font><font color="#E5E5E5"> so and</font>

289
00:13:04,990 --> 00:13:11,529
when when dealing with truth table<font color="#CCCCCC"> keyd</font>

290
00:13:08,310 --> 00:13:14,890
library comes quite handy we provide two

291
00:13:11,529 --> 00:13:18,040
data<font color="#E5E5E5"> structures to manipulate truth</font>

292
00:13:14,890 --> 00:13:19,209
tables we have<font color="#E5E5E5"> static truth tables</font>

293
00:13:18,040 --> 00:13:21,670
dynamic truth tables and the main

294
00:13:19,209 --> 00:13:23,739
<font color="#CCCCCC">difference is that you know the number</font>

295
00:13:21,670 --> 00:13:24,498
<font color="#CCCCCC">of variables at compile time or</font><font color="#E5E5E5"> at</font>

296
00:13:23,740 --> 00:13:27,199
runtime<font color="#E5E5E5"> and</font>

297
00:13:24,499 --> 00:13:29,419
you can and<font color="#CCCCCC"> in some</font><font color="#E5E5E5"> of its algorithms</font>

298
00:13:27,199 --> 00:13:32,569
will be faster if you know<font color="#CCCCCC"> what run at</font>

299
00:13:29,419 --> 00:13:34,519
<font color="#E5E5E5">compile time what is the number</font><font color="#CCCCCC"> of</font>

300
00:13:32,569 --> 00:13:36,199
<font color="#E5E5E5">variables it also provides you several</font>

301
00:13:34,519 --> 00:13:38,029
algorithms to do some operations<font color="#E5E5E5"> between</font>

302
00:13:36,199 --> 00:13:38,689
two tables<font color="#E5E5E5"> finding implicants</font>

303
00:13:38,029 --> 00:13:40,999
<font color="#E5E5E5">canalization</font>

304
00:13:38,689 --> 00:13:43,039
<font color="#E5E5E5">NPN spectral if you have no idea</font><font color="#CCCCCC"> whether</font>

305
00:13:40,999 --> 00:13:45,349
that<font color="#E5E5E5"> is you can again look at the</font>

306
00:13:43,039 --> 00:13:50,179
documentation it is there and<font color="#CCCCCC"> explained</font>

307
00:13:45,349 --> 00:13:52,129
so we take the cut and we generate a

308
00:13:50,179 --> 00:13:53,749
truth table<font color="#CCCCCC"> for</font><font color="#E5E5E5"> it and then we can</font>

309
00:13:52,129 --> 00:13:56,269
generate<font color="#E5E5E5"> the truth table</font><font color="#CCCCCC"> by basically</font>

310
00:13:53,749 --> 00:13:58,969
<font color="#CCCCCC">just how deep routing of</font><font color="#E5E5E5"> including all</font>

311
00:13:56,269 --> 00:14:01,399
possible input combinations and<font color="#E5E5E5"> then see</font>

312
00:13:58,969 --> 00:14:03,859
what<font color="#CCCCCC"> happens in the in our and then</font><font color="#E5E5E5"> we</font>

313
00:14:01,399 --> 00:14:08,809
get our truth<font color="#CCCCCC"> table and</font><font color="#E5E5E5"> now we want to</font>

314
00:14:03,859 --> 00:14:11,809
synthesize<font color="#E5E5E5"> a</font><font color="#CCCCCC"> new network for this that</font>

315
00:14:08,809 --> 00:14:15,858
will implement the same function<font color="#E5E5E5"> and to</font>

316
00:14:11,809 --> 00:14:17,718
do so we use exact synthesis which given

317
00:14:15,859 --> 00:14:20,569
a specification<font color="#CCCCCC"> in this case the truth</font>

318
00:14:17,719 --> 00:14:23,299
table<font color="#E5E5E5"> it will find an optimum boolean</font>

319
00:14:20,569 --> 00:14:26,329
network where<font color="#CCCCCC"> the optimality</font><font color="#E5E5E5"> optimum</font>

320
00:14:23,299 --> 00:14:30,829
ability is defined with respect to some

321
00:14:26,329 --> 00:14:34,549
cost function<font color="#E5E5E5"> so for that we use</font><font color="#CCCCCC"> Percy</font>

322
00:14:30,829 --> 00:14:36,319
exact synthesis library it<font color="#CCCCCC"> it offers a</font>

323
00:14:34,549 --> 00:14:37,728
collection<font color="#CCCCCC"> of different</font><font color="#E5E5E5"> SATs over</font><font color="#CCCCCC"> as act</font>

324
00:14:36,319 --> 00:14:39,649
synthesis methods for circuitry

325
00:14:37,729 --> 00:14:43,879
synthesis design exploration or a

326
00:14:39,649 --> 00:14:45,949
function classification it is easily<font color="#E5E5E5"> it</font>

327
00:14:43,879 --> 00:14:48,589
<font color="#E5E5E5">is easy to prototype and</font><font color="#CCCCCC"> it's experiment</font>

328
00:14:45,949 --> 00:14:52,368
with topology based synthesis different

329
00:14:48,589 --> 00:14:55,699
encodings<font color="#E5E5E5"> different</font><font color="#CCCCCC"> sat</font><font color="#E5E5E5"> service backends</font>

330
00:14:52,369 --> 00:14:59,839
<font color="#E5E5E5">and parallel synthesis so when we put</font>

331
00:14:55,699 --> 00:15:02,719
this through Percy<font color="#E5E5E5"> it gives us a</font>

332
00:14:59,839 --> 00:15:08,229
slightly<font color="#E5E5E5"> better</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> for this cut</font>

333
00:15:02,720 --> 00:15:11,059
<font color="#E5E5E5">that uses instead of five four</font><font color="#CCCCCC"> nodes so</font>

334
00:15:08,229 --> 00:15:14,029
the<font color="#CCCCCC"> algorithmic early</font><font color="#E5E5E5"> rewriting we</font>

335
00:15:11,059 --> 00:15:17,449
<font color="#E5E5E5">basically compute potential replacements</font>

336
00:15:14,029 --> 00:15:20,599
like<font color="#E5E5E5"> this for our cuts and then eristic</font>

337
00:15:17,449 --> 00:15:24,049
we select a maximum set of cuts that are

338
00:15:20,599 --> 00:15:26,329
no conflicting<font color="#E5E5E5"> between them and unmanned</font>

339
00:15:24,049 --> 00:15:28,968
maximize some of the<font color="#E5E5E5"> overall gain that</font>

340
00:15:26,329 --> 00:15:31,758
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to do to get</font><font color="#E5E5E5"> so basically</font>

341
00:15:28,969 --> 00:15:33,949
in this<font color="#E5E5E5"> example I'm trying</font><font color="#CCCCCC"> to do it is</font>

342
00:15:31,759 --> 00:15:37,970
minimize the number of<font color="#CCCCCC"> Lu cheese that I</font>

343
00:15:33,949 --> 00:15:39,679
will be using so

344
00:15:37,970 --> 00:15:42,049
by applying the algorithm<font color="#E5E5E5"> to the</font>

345
00:15:39,679 --> 00:15:47,089
different cuts<font color="#E5E5E5"> we can actually get this</font>

346
00:15:42,049 --> 00:15:50,539
network<font color="#CCCCCC"> that can</font><font color="#E5E5E5"> be cut and use</font><font color="#CCCCCC"> only</font>

347
00:15:47,089 --> 00:15:53,569
three and you choose in the end so we

348
00:15:50,539 --> 00:15:56,089
were<font color="#CCCCCC"> able to squeeze out one morality</font>

349
00:15:53,569 --> 00:16:02,238
<font color="#E5E5E5">from our previous</font><font color="#CCCCCC"> selection by using</font>

350
00:15:56,089 --> 00:16:06,409
this this<font color="#E5E5E5"> optimization so this is a</font>

351
00:16:02,239 --> 00:16:10,909
basically a simple summary of what we

352
00:16:06,409 --> 00:16:13,269
see so you start<font color="#E5E5E5"> from a very</font><font color="#CCCCCC"> log you</font>

353
00:16:10,909 --> 00:16:19,359
extract the<font color="#E5E5E5"> logic representation of it</font>

354
00:16:13,269 --> 00:16:22,519
in this<font color="#E5E5E5"> case the AAG you optimize or</font>

355
00:16:19,359 --> 00:16:24,409
your circuit using cut rewriting or some

356
00:16:22,519 --> 00:16:32,349
other other techniques that<font color="#E5E5E5"> we provide</font>

357
00:16:24,409 --> 00:16:36,679
and then you map it<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> LUT network</font>

358
00:16:32,349 --> 00:16:39,470
so<font color="#E5E5E5"> so far everything is quite easy and</font>

359
00:16:36,679 --> 00:16:42,519
then<font color="#E5E5E5"> I have make</font><font color="#CCCCCC"> it easy to</font><font color="#E5E5E5"> mask some</font><font color="#CCCCCC"> of</font>

360
00:16:39,470 --> 00:16:45,949
<font color="#CCCCCC">the details of the implementation</font><font color="#E5E5E5"> but</font>

361
00:16:42,519 --> 00:16:47,989
<font color="#E5E5E5">talking is easy how is the code looked</font>

362
00:16:45,949 --> 00:16:52,149
like to do all<font color="#E5E5E5"> the steps that I</font><font color="#CCCCCC"> just</font>

363
00:16:47,989 --> 00:17:02,959
told you<font color="#E5E5E5"> and it is basically this code</font>

364
00:16:52,149 --> 00:17:05,949
so here we first load the<font color="#E5E5E5"> network and we</font>

365
00:17:02,959 --> 00:17:11,178
parse the input and<font color="#CCCCCC"> create a network</font>

366
00:17:05,949 --> 00:17:12,709
then we do the cut rewriting and when

367
00:17:11,179 --> 00:17:14,959
you do cut rewriting you end up with

368
00:17:12,709 --> 00:17:17,740
some note dangling nodes in a network so

369
00:17:14,959 --> 00:17:21,740
you need to clean it<font color="#E5E5E5"> up afterwards</font><font color="#CCCCCC"> and</font>

370
00:17:17,740 --> 00:17:23,480
then you map it<font color="#E5E5E5"> to your to elegy it is</font>

371
00:17:21,740 --> 00:17:26,449
<font color="#CCCCCC">as simple as</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and enough afterwards</font>

372
00:17:23,480 --> 00:17:29,090
you can write in one of<font color="#E5E5E5"> formats that can</font>

373
00:17:26,449 --> 00:17:35,529
<font color="#E5E5E5">then be the input for some placing</font>

374
00:17:29,090 --> 00:17:39,678
routing to that comes afterwards so here

375
00:17:35,529 --> 00:17:43,460
we have some other some other example

376
00:17:39,679 --> 00:17:45,620
that<font color="#CCCCCC"> I also</font><font color="#E5E5E5"> use Alice and most of</font>

377
00:17:43,460 --> 00:17:47,869
<font color="#CCCCCC">showcases and examples you</font><font color="#E5E5E5"> can you can</font>

378
00:17:45,620 --> 00:17:50,239
<font color="#CCCCCC">look at the github repository so</font>

379
00:17:47,869 --> 00:17:51,929
basically this<font color="#CCCCCC"> example provides a simple</font>

380
00:17:50,240 --> 00:17:54,450
<font color="#E5E5E5">share interface</font>

381
00:17:51,930 --> 00:17:58,410
using the<font color="#CCCCCC"> Allis library it</font><font color="#E5E5E5"> loads some</font>

382
00:17:54,450 --> 00:18:01,320
truth tables and then do some binary

383
00:17:58,410 --> 00:18:04,980
<font color="#CCCCCC">like no truth tables from binary and XML</font>

384
00:18:01,320 --> 00:18:08,370
decimal strings<font color="#E5E5E5"> from Bank do some</font><font color="#CCCCCC"> NEP</font>

385
00:18:04,980 --> 00:18:11,430
any condensation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and then you can</font>

386
00:18:08,370 --> 00:18:14,459
play<font color="#E5E5E5"> around and then to have something</font>

387
00:18:11,430 --> 00:18:18,900
like<font color="#CCCCCC"> this it would be more</font><font color="#E5E5E5"> kind of - it</font>

388
00:18:14,460 --> 00:18:21,180
only takes the 268 lines of code from

389
00:18:18,900 --> 00:18:22,590
the users point of view<font color="#E5E5E5"> for for the</font>

390
00:18:21,180 --> 00:18:27,440
<font color="#E5E5E5">people who are actually composing the</font>

391
00:18:22,590 --> 00:18:30,600
libraries and doing their their thing<font color="#E5E5E5"> so</font>

392
00:18:27,440 --> 00:18:35,910
with that<font color="#E5E5E5"> I came to an end of my</font>

393
00:18:30,600 --> 00:18:39,659
presentation<font color="#CCCCCC"> I might use this</font><font color="#E5E5E5"> I do have</font>

394
00:18:35,910 --> 00:18:43,950
some<font color="#CCCCCC"> other slides</font><font color="#E5E5E5"> on the other a bit the</font>

395
00:18:39,660 --> 00:18:47,670
other libraries but as<font color="#E5E5E5"> the slides are</font>

396
00:18:43,950 --> 00:18:49,020
not so nice<font color="#E5E5E5"> with this so I think we can</font>

397
00:18:47,670 --> 00:19:03,240
<font color="#E5E5E5">end</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> and then go for the</font>

398
00:18:49,020 --> 00:19:07,139
questions so<font color="#CCCCCC"> does</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> tool handle</font>

399
00:19:03,240 --> 00:19:08,910
multiple output<font color="#CCCCCC"> yes it does</font><font color="#E5E5E5"> it does send</font>

400
00:19:07,140 --> 00:19:10,470
<font color="#CCCCCC">a</font><font color="#E5E5E5"> mood of</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> it is just that for</font>

401
00:19:08,910 --> 00:19:12,840
<font color="#E5E5E5">these lights the sake of simplicity</font>

402
00:19:10,470 --> 00:19:36,120
we're just using<font color="#E5E5E5"> one</font><font color="#CCCCCC"> output but it</font><font color="#E5E5E5"> can</font>

403
00:19:12,840 --> 00:19:38,580
handle multiple<font color="#E5E5E5"> outputs so yes so how</font>

404
00:19:36,120 --> 00:19:43,379
the modules<font color="#E5E5E5"> connect to each other is</font>

405
00:19:38,580 --> 00:19:46,139
that<font color="#E5E5E5"> what you're asking</font><font color="#CCCCCC"> so basically for</font>

406
00:19:43,380 --> 00:19:49,020
<font color="#CCCCCC">example mock turtle already has embedded</font>

407
00:19:46,140 --> 00:19:50,910
<font color="#CCCCCC">in</font><font color="#E5E5E5"> it the some of the other libraries so</font>

408
00:19:49,020 --> 00:19:53,639
<font color="#E5E5E5">mocked rotor already has the</font><font color="#CCCCCC"> lorina</font>

409
00:19:50,910 --> 00:19:57,330
library inside it and<font color="#E5E5E5"> keyd and</font><font color="#CCCCCC"> percy</font>

410
00:19:53,640 --> 00:20:00,390
most you see that mock turtle<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font>

411
00:19:57,330 --> 00:20:04,409
what it does<font color="#E5E5E5"> has most of the other</font>

412
00:20:00,390 --> 00:20:05,730
<font color="#E5E5E5">models already in it so basically they</font>

413
00:20:04,410 --> 00:20:08,639
<font color="#E5E5E5">have their own namespace</font>

414
00:20:05,730 --> 00:20:12,570
but they already<font color="#E5E5E5"> come with the the code</font>

415
00:20:08,639 --> 00:20:14,580
itself<font color="#CCCCCC"> I don't know yeah</font>

416
00:20:12,570 --> 00:20:16,710
so exactly<font color="#CCCCCC"> so when you get when you get</font>

417
00:20:14,580 --> 00:20:18,899
macchiato you you get more<font color="#E5E5E5"> almost</font>

418
00:20:16,710 --> 00:20:22,679
everything if not everything<font color="#CCCCCC"> but</font><font color="#E5E5E5"> maybe</font>

419
00:20:18,899 --> 00:20:25,709
you<font color="#E5E5E5"> don't want to</font><font color="#CCCCCC"> do with logic networks</font>

420
00:20:22,679 --> 00:20:28,769
at all you<font color="#E5E5E5"> want just</font><font color="#CCCCCC"> truth tables so</font><font color="#E5E5E5"> we</font>

421
00:20:25,710 --> 00:20:31,110
can only you don't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the rest so</font>

422
00:20:28,769 --> 00:20:33,210
you<font color="#E5E5E5"> can only take take</font><font color="#CCCCCC"> Katie</font><font color="#E5E5E5"> Bochner</font>

423
00:20:31,110 --> 00:20:35,658
<font color="#E5E5E5">will be the one that has everything kind</font>

424
00:20:33,210 --> 00:20:38,490
<font color="#E5E5E5">of this when everything comes together</font>

425
00:20:35,659 --> 00:20:40,139
<font color="#E5E5E5">but Alice then when you have Alice then</font>

426
00:20:38,490 --> 00:20:44,610
you have the<font color="#CCCCCC"> show interface and then</font><font color="#E5E5E5"> all</font>

427
00:20:40,139 --> 00:20:46,590
this it does<font color="#CCCCCC"> login you can</font><font color="#E5E5E5"> create</font>

428
00:20:44,610 --> 00:20:48,840
commands and stuff<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> also with</font>

429
00:20:46,590 --> 00:20:50,908
Alice you can interface the code with

430
00:20:48,840 --> 00:20:52,918
Python so<font color="#E5E5E5"> we have you have Python</font>

431
00:20:50,909 --> 00:20:54,659
<font color="#E5E5E5">bindings as well so we have some flows</font>

432
00:20:52,919 --> 00:20:57,419
that use Python and<font color="#E5E5E5"> then you can easily</font>

433
00:20:54,659 --> 00:21:11,850
script and hack some of these

434
00:20:57,419 --> 00:21:13,500
optimizations and how together so the

435
00:21:11,850 --> 00:21:15,209
question is if we<font color="#E5E5E5"> can override cost</font>

436
00:21:13,500 --> 00:21:18,330
functions<font color="#E5E5E5"> yes you can pass cost</font>

437
00:21:15,210 --> 00:21:21,450
functions as parameters<font color="#E5E5E5"> and then that's</font>

438
00:21:18,330 --> 00:21:23,158
<font color="#CCCCCC">basically what we do</font><font color="#E5E5E5"> in some of</font><font color="#CCCCCC"> these</font>

439
00:21:21,450 --> 00:21:24,510
algorithms are also<font color="#CCCCCC"> using in this</font>

440
00:21:23,159 --> 00:21:26,700
<font color="#E5E5E5">quantum compilation flow and then we</font>

441
00:21:24,510 --> 00:21:29,279
important we do use different cost

442
00:21:26,700 --> 00:21:30,450
functions so they are configurable as

443
00:21:29,279 --> 00:21:34,039
long as there's object that can<font color="#E5E5E5"> be</font>

444
00:21:30,450 --> 00:21:34,039
<font color="#E5E5E5">called as a function you can pass it</font>

445
00:22:02,149 --> 00:22:07,168
so how<font color="#CCCCCC"> does this fit</font><font color="#E5E5E5"> in a broader system</font>

446
00:22:05,190 --> 00:22:10,500
<font color="#E5E5E5">that's the question so basically</font>

447
00:22:07,169 --> 00:22:14,220
whenever<font color="#E5E5E5"> you use something like ABC you</font>

448
00:22:10,500 --> 00:22:15,960
could more or less replace it if it is

449
00:22:14,220 --> 00:22:18,510
in the logic synthesis you could more<font color="#CCCCCC"> or</font>

450
00:22:15,960 --> 00:22:20,279
less replace it with with the libraries

451
00:22:18,510 --> 00:22:21,929
that<font color="#E5E5E5"> we have here maybe she has more</font>

452
00:22:20,279 --> 00:22:25,440
<font color="#E5E5E5">things in law in formal verification as</font>

453
00:22:21,929 --> 00:22:27,299
well<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> example in this last</font>

454
00:22:25,440 --> 00:22:31,169
<font color="#CCCCCC">semester we gave there</font><font color="#E5E5E5"> was a</font><font color="#CCCCCC"> lecture in</font>

455
00:22:27,299 --> 00:22:34,799
a in a DA in<font color="#E5E5E5"> FFL where the students were</font>

456
00:22:31,169 --> 00:22:38,429
asked to to use those libraries with

457
00:22:34,799 --> 00:22:40,320
<font color="#CCCCCC">roses and we definitely want</font><font color="#E5E5E5"> to do more</font>

458
00:22:38,429 --> 00:22:44,190
<font color="#E5E5E5">integration with</font><font color="#CCCCCC"> uses we just do not</font>

459
00:22:40,320 --> 00:22:47,399
know<font color="#E5E5E5"> how to use the very lot pastoring</font>

460
00:22:44,190 --> 00:22:49,169
uses<font color="#CCCCCC"> two hardness and</font><font color="#E5E5E5"> get all the</font>

461
00:22:47,399 --> 00:22:52,010
different<font color="#CCCCCC"> the combinational parts</font><font color="#E5E5E5"> and</font>

462
00:22:49,169 --> 00:22:54,450
then we could do optimization there but

463
00:22:52,010 --> 00:22:56,610
the goal here<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> just like to expose</font>

464
00:22:54,450 --> 00:23:00,120
ourselves and then try<font color="#E5E5E5"> to put ourselves</font>

465
00:22:56,610 --> 00:23:02,100
in<font color="#E5E5E5"> this in this</font><font color="#CCCCCC"> order of flows and then</font>

466
00:23:00,120 --> 00:23:03,959
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> quite open and we have been</font>

467
00:23:02,100 --> 00:23:06,120
talking<font color="#CCCCCC"> to other groups that are willing</font>

468
00:23:03,960 --> 00:23:16,620
<font color="#E5E5E5">to use those those libraries in their</font>

469
00:23:06,120 --> 00:23:19,620
own<font color="#CCCCCC"> and their hopefuls yeah exactly so</font>

470
00:23:16,620 --> 00:23:21,570
basically<font color="#E5E5E5"> actually if I wanted</font><font color="#CCCCCC"> to do</font>

471
00:23:19,620 --> 00:23:23,668
this<font color="#CCCCCC"> example</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> would still need to</font><font color="#E5E5E5"> tweak</font>

472
00:23:21,570 --> 00:23:25,559
a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> because the default is</font>

473
00:23:23,669 --> 00:23:28,220
lookup table for four

474
00:23:25,559 --> 00:23:32,789
<font color="#E5E5E5">okay sorry I need</font><font color="#CCCCCC"> to repeat the question</font>

475
00:23:28,220 --> 00:23:34,350
<font color="#CCCCCC">so the question is if I can change</font><font color="#E5E5E5"> four</font>

476
00:23:32,789 --> 00:23:37,500
different<font color="#E5E5E5"> sizes of look-up tables</font><font color="#CCCCCC"> and</font>

477
00:23:34,350 --> 00:23:41,090
yes you can<font color="#E5E5E5"> you can configure yourself</font>

478
00:23:37,500 --> 00:23:41,090
what the<font color="#CCCCCC"> side looked a bit</font><font color="#E5E5E5"> will be</font>

479
00:23:43,600 --> 00:23:46,810
[Music]

480
00:23:53,549 --> 00:24:00,490
so not<font color="#CCCCCC"> really basically so have we</font>

481
00:23:58,299 --> 00:24:02,620
considered<font color="#E5E5E5"> to use some kind of</font>

482
00:24:00,490 --> 00:24:07,419
intermediate representation to plug in

483
00:24:02,620 --> 00:24:11,110
other flows and so we already<font color="#E5E5E5"> support</font>

484
00:24:07,419 --> 00:24:13,870
many<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the intermediate representations</font>

485
00:24:11,110 --> 00:24:15,549
in<font color="#CCCCCC"> what synthesis</font><font color="#E5E5E5"> is basically more some</font>

486
00:24:13,870 --> 00:24:17,199
of those flows<font color="#CCCCCC"> think an output a blip</font>

487
00:24:15,549 --> 00:24:18,519
file for<font color="#CCCCCC"> example and then we can read it</font>

488
00:24:17,200 --> 00:24:21,130
<font color="#E5E5E5">you can parse it believe and then we can</font>

489
00:24:18,519 --> 00:24:23,409
<font color="#CCCCCC">output place</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> would be more</font><font color="#E5E5E5"> or</font>

490
00:24:21,130 --> 00:24:25,450
<font color="#CCCCCC">less this intermediate representation</font>

491
00:24:23,409 --> 00:24:27,789
you're talking<font color="#CCCCCC"> about all the other</font><font color="#E5E5E5"> RTL</font>

492
00:24:25,450 --> 00:24:28,750
languages<font color="#CCCCCC"> good morning</font><font color="#E5E5E5"> Lee in between I</font>

493
00:24:27,789 --> 00:24:30,908
<font color="#CCCCCC">don't know</font>

494
00:24:28,750 --> 00:24:33,279
<font color="#E5E5E5">problem with RTL language is quite the</font>

495
00:24:30,909 --> 00:24:34,750
parsers<font color="#E5E5E5"> are quite complex</font><font color="#CCCCCC"> and requires a</font>

496
00:24:33,279 --> 00:24:47,529
lot<font color="#CCCCCC"> of work to put in there and</font><font color="#E5E5E5"> then we</font>

497
00:24:34,750 --> 00:24:51,070
don't we don't<font color="#E5E5E5"> do it currently so</font><font color="#CCCCCC"> there</font>

498
00:24:47,529 --> 00:24:52,299
the<font color="#CCCCCC"> optin move</font><font color="#E5E5E5"> the question is the says</font>

499
00:24:51,070 --> 00:24:55,178
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> optimal mapping</font><font color="#CCCCCC"> should be</font>

500
00:24:52,299 --> 00:24:57,129
correlated with time<font color="#CCCCCC"> so we use some sort</font>

501
00:24:55,179 --> 00:24:58,809
<font color="#CCCCCC">of abstraction of it's basically the</font>

502
00:24:57,130 --> 00:25:01,149
number of logic levels in your<font color="#E5E5E5"> network</font>

503
00:24:58,809 --> 00:25:03,519
right<font color="#E5E5E5"> that more and less will tell you</font>

504
00:25:01,149 --> 00:25:06,158
about delay<font color="#CCCCCC"> we do not know exactly what</font>

505
00:25:03,519 --> 00:25:08,529
it is because<font color="#E5E5E5"> to do the exactly timing</font>

506
00:25:06,159 --> 00:25:09,820
we need to do the play placing<font color="#E5E5E5"> route so</font>

507
00:25:08,529 --> 00:25:13,510
actually this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the reason why we're</font>

508
00:25:09,820 --> 00:25:15,189
doing<font color="#E5E5E5"> this</font><font color="#CCCCCC"> liberty file parsing</font><font color="#E5E5E5"> where</font>

509
00:25:13,510 --> 00:25:17,230
you can get this<font color="#CCCCCC"> information</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> and</font>

510
00:25:15,190 --> 00:25:19,269
then try<font color="#CCCCCC"> to do and then you can</font><font color="#E5E5E5"> loop</font>

511
00:25:17,230 --> 00:25:21,970
around and<font color="#E5E5E5"> then use timing</font><font color="#CCCCCC"> information</font>

512
00:25:19,269 --> 00:25:23,740
more precise timing<font color="#CCCCCC"> information to guide</font>

513
00:25:21,970 --> 00:25:27,090
your logic synthesis optimization

514
00:25:23,740 --> 00:25:27,090
algorithms<font color="#CCCCCC"> we are working on</font><font color="#E5E5E5"> that</font>

515
00:25:32,700 --> 00:25:37,049
[Applause]

