1
00:00:05,140 --> 00:00:11,420
<font color="#E5E5E5">okay so cool</font><font color="#CCCCCC"> so we're ready for</font><font color="#E5E5E5"> next dog</font>

2
00:00:09,139 --> 00:00:13,309
for the in from head of our machine

3
00:00:11,420 --> 00:00:17,110
learning team at source<font color="#E5E5E5"> he's gonna be</font>

4
00:00:13,309 --> 00:00:17,110
talking<font color="#CCCCCC"> about I guess what we're doing</font>

5
00:00:21,460 --> 00:00:25,010
thank you

6
00:00:22,789 --> 00:00:29,990
so I'm so<font color="#CCCCCC"> happy to speak for</font><font color="#E5E5E5"> frozen</font>

7
00:00:25,010 --> 00:00:31,989
<font color="#E5E5E5">today it's my first time so I'm Adam the</font>

8
00:00:29,990 --> 00:00:34,730
lead of machine learning team<font color="#CCCCCC"> outsourced</font>

9
00:00:31,989 --> 00:00:36,830
and<font color="#E5E5E5"> also I'm a Google</font><font color="#CCCCCC"> developer expert</font>

10
00:00:34,730 --> 00:00:39,529
in machine learning<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I want to talk</font>

11
00:00:36,830 --> 00:00:41,239
today<font color="#E5E5E5"> about</font><font color="#CCCCCC"> how we apply machine</font>

12
00:00:39,530 --> 00:00:45,260
learning to source code in<font color="#E5E5E5"> particular</font>

13
00:00:41,239 --> 00:00:48,769
how do we fix problems<font color="#E5E5E5"> the source code</font>

14
00:00:45,260 --> 00:00:53,479
during code review<font color="#E5E5E5"> so the plan of my</font>

15
00:00:48,769 --> 00:00:58,180
talk is<font color="#E5E5E5"> as follows first I will explain</font>

16
00:00:53,479 --> 00:01:02,030
why we decided<font color="#E5E5E5"> to do products on top of</font>

17
00:00:58,180 --> 00:01:05,200
assisted code review why<font color="#E5E5E5"> anything else</font>

18
00:01:02,030 --> 00:01:07,939
<font color="#CCCCCC">it's so many ways we can help</font><font color="#E5E5E5"> developers</font>

19
00:01:05,200 --> 00:01:10,130
with writing source code<font color="#E5E5E5"> but which</font><font color="#CCCCCC"> who's</font>

20
00:01:07,939 --> 00:01:10,339
assisted code<font color="#E5E5E5"> review so why did we do</font>

21
00:01:10,130 --> 00:01:12,649
that

22
00:01:10,340 --> 00:01:15,740
<font color="#E5E5E5">that's the first part</font><font color="#CCCCCC"> the second is</font>

23
00:01:12,650 --> 00:01:17,660
<font color="#E5E5E5">about the platform which are developing</font>

24
00:01:15,740 --> 00:01:20,630
to do assisted code review<font color="#E5E5E5"> it's called</font>

25
00:01:17,660 --> 00:01:23,000
<font color="#E5E5E5">look out the third one is</font><font color="#CCCCCC"> about the</font>

26
00:01:20,630 --> 00:01:25,490
<font color="#E5E5E5">software development kit because since</font>

27
00:01:23,000 --> 00:01:28,340
everything is<font color="#E5E5E5"> open-source</font><font color="#CCCCCC"> we want to</font>

28
00:01:25,490 --> 00:01:30,880
simplify creating source code analysis

29
00:01:28,340 --> 00:01:33,530
for code review<font color="#E5E5E5"> as much as possible and</font>

30
00:01:30,880 --> 00:01:35,619
it's<font color="#E5E5E5"> impossible without an SDK</font><font color="#CCCCCC"> so</font>

31
00:01:33,530 --> 00:01:39,260
everybody can easily<font color="#CCCCCC"> create a new</font>

32
00:01:35,620 --> 00:01:42,470
<font color="#CCCCCC">analysis and write a bot for code review</font>

33
00:01:39,260 --> 00:01:45,040
which<font color="#CCCCCC"> is awesome the first part is a</font>

34
00:01:42,470 --> 00:01:47,479
<font color="#E5E5E5">demonstration of how one particular</font>

35
00:01:45,040 --> 00:01:49,880
<font color="#E5E5E5">analysis works we call it Stella</font><font color="#CCCCCC"> weather</font>

36
00:01:47,479 --> 00:01:52,720
and it tries to<font color="#E5E5E5"> fix formatting</font><font color="#CCCCCC"> problems</font>

37
00:01:49,880 --> 00:01:55,490
in source code<font color="#E5E5E5"> just from training rules</font>

38
00:01:52,720 --> 00:01:57,470
<font color="#CCCCCC">in an existing code base so we don't</font>

39
00:01:55,490 --> 00:02:00,320
really<font color="#E5E5E5"> use anything predefined and you</font>

40
00:01:57,470 --> 00:02:02,390
don't have<font color="#CCCCCC"> to configure it the last part</font>

41
00:02:00,320 --> 00:02:04,610
is<font color="#CCCCCC"> max planation how everything works</font>

42
00:02:02,390 --> 00:02:06,320
with Stella no matter how<font color="#CCCCCC"> a machine</font>

43
00:02:04,610 --> 00:02:08,419
learning<font color="#E5E5E5"> works what are the challenges</font>

44
00:02:06,320 --> 00:02:11,870
what were the problems and<font color="#E5E5E5"> how</font><font color="#CCCCCC"> we are</font>

45
00:02:08,419 --> 00:02:14,390
solving them<font color="#E5E5E5"> so let</font><font color="#CCCCCC"> me start from the</font>

46
00:02:11,870 --> 00:02:17,720
<font color="#E5E5E5">beginning</font><font color="#CCCCCC"> from the origins of assisted</font>

47
00:02:14,390 --> 00:02:20,510
code review<font color="#CCCCCC"> I did</font><font color="#E5E5E5"> a few</font><font color="#CCCCCC"> queries</font>

48
00:02:17,720 --> 00:02:23,420
github<font color="#CCCCCC"> just</font><font color="#E5E5E5"> searched some very typical</font>

49
00:02:20,510 --> 00:02:26,690
<font color="#E5E5E5">phrases which</font><font color="#CCCCCC"> i think are relevant to</font>

50
00:02:23,420 --> 00:02:28,899
software development<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I looked how</font>

51
00:02:26,690 --> 00:02:33,320
many issues<font color="#E5E5E5"> and pull requests and</font>

52
00:02:28,900 --> 00:02:35,870
comments people have<font color="#E5E5E5"> visas messages so</font>

53
00:02:33,320 --> 00:02:38,390
the first one<font color="#CCCCCC"> is please use single</font>

54
00:02:35,870 --> 00:02:41,390
quotes<font color="#E5E5E5"> here and as you know there are</font>

55
00:02:38,390 --> 00:02:43,399
<font color="#E5E5E5">languages who do not really distinguish</font>

56
00:02:41,390 --> 00:02:45,529
between single<font color="#E5E5E5"> and double quotes you can</font>

57
00:02:43,400 --> 00:02:47,690
do you can use<font color="#CCCCCC"> both and it's really</font><font color="#E5E5E5"> up</font>

58
00:02:45,530 --> 00:02:49,700
to you which type<font color="#E5E5E5"> you you want to choose</font>

59
00:02:47,690 --> 00:02:52,940
<font color="#E5E5E5">it's written in your style</font><font color="#CCCCCC"> guide or</font>

60
00:02:49,700 --> 00:02:55,609
<font color="#CCCCCC">noted it's it's</font><font color="#E5E5E5"> not really required by</font>

61
00:02:52,940 --> 00:02:56,930
the language itself<font color="#E5E5E5"> so more than</font><font color="#CCCCCC"> 1000</font>

62
00:02:55,610 --> 00:03:00,050
issues and<font color="#E5E5E5"> most of them</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> pool</font>

63
00:02:56,930 --> 00:03:02,690
requests are devoted to<font color="#E5E5E5"> people</font><font color="#CCCCCC"> asking to</font>

64
00:03:00,050 --> 00:03:06,650
<font color="#CCCCCC">change</font><font color="#E5E5E5"> the type of code just because the</font>

65
00:03:02,690 --> 00:03:10,250
project<font color="#E5E5E5"> people</font><font color="#CCCCCC"> contribute to</font><font color="#E5E5E5"> adopts one</font>

66
00:03:06,650 --> 00:03:13,250
specific<font color="#E5E5E5"> style of quilting the second</font>

67
00:03:10,250 --> 00:03:15,500
query is<font color="#E5E5E5"> indentation</font><font color="#CCCCCC"> as you know we can</font>

68
00:03:13,250 --> 00:03:17,480
indent with spaces or<font color="#E5E5E5"> wrists</font><font color="#CCCCCC"> abs</font><font color="#E5E5E5"> some</font>

69
00:03:15,500 --> 00:03:21,380
people tabs are better than<font color="#E5E5E5"> people</font><font color="#CCCCCC"> think</font>

70
00:03:17,480 --> 00:03:24,260
spaces are better anyway if a project is

71
00:03:21,380 --> 00:03:26,090
consistent<font color="#CCCCCC"> and let's say it uses spaces</font>

72
00:03:24,260 --> 00:03:29,450
all the time and you get a pull request

73
00:03:26,090 --> 00:03:31,730
where people use tabs<font color="#E5E5E5"> you asked to use</font>

74
00:03:29,450 --> 00:03:33,619
spaces<font color="#CCCCCC"> just</font><font color="#E5E5E5"> because that's what you have</font>

75
00:03:31,730 --> 00:03:35,510
<font color="#E5E5E5">in your</font><font color="#CCCCCC"> project so more than</font><font color="#E5E5E5"> ten</font>

76
00:03:33,620 --> 00:03:38,930
<font color="#E5E5E5">thousand</font><font color="#CCCCCC"> pull requests and</font><font color="#E5E5E5"> I checked is</font>

77
00:03:35,510 --> 00:03:41,030
the majority<font color="#CCCCCC"> of pull requests contain</font>

78
00:03:38,930 --> 00:03:43,970
this message and<font color="#CCCCCC"> people asked for space</font>

79
00:03:41,030 --> 00:03:45,980
indentation<font color="#CCCCCC"> the same for list</font>

80
00:03:43,970 --> 00:03:48,650
comprehension<font color="#CCCCCC"> it's a it's a feature in</font>

81
00:03:45,980 --> 00:03:50,929
Python<font color="#E5E5E5"> so instead of writing a for loop</font>

82
00:03:48,650 --> 00:03:53,410
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can do it in a fancy</font><font color="#E5E5E5"> way in square</font>

83
00:03:50,930 --> 00:03:55,730
brackets<font color="#CCCCCC"> and it's a one-line and</font>

84
00:03:53,410 --> 00:03:58,010
syntactic sugar is is very<font color="#E5E5E5"> good so</font>

85
00:03:55,730 --> 00:04:01,670
<font color="#CCCCCC">people</font><font color="#E5E5E5"> tend to use</font><font color="#CCCCCC"> it instead of</font><font color="#E5E5E5"> for</font>

86
00:03:58,010 --> 00:04:03,500
loops so more than<font color="#E5E5E5"> 2,600 times people</font>

87
00:04:01,670 --> 00:04:06,170
<font color="#CCCCCC">asked</font><font color="#E5E5E5"> to use a list comprehension</font>

88
00:04:03,500 --> 00:04:08,269
<font color="#E5E5E5">instead of a for loop in Python</font><font color="#CCCCCC"> so I</font>

89
00:04:06,170 --> 00:04:11,238
cannot<font color="#E5E5E5"> say that it</font><font color="#CCCCCC"> really changes a</font>

90
00:04:08,269 --> 00:04:13,489
program logic<font color="#E5E5E5"> of course it's not and I</font>

91
00:04:11,239 --> 00:04:16,640
think<font color="#CCCCCC"> it works the with the same speed</font>

92
00:04:13,489 --> 00:04:18,200
<font color="#E5E5E5">but it's it's a way you write source</font>

93
00:04:16,640 --> 00:04:19,810
code right it's it's your style<font color="#CCCCCC"> of</font>

94
00:04:18,200 --> 00:04:23,180
writing

95
00:04:19,810 --> 00:04:25,490
speaking of function functions can be

96
00:04:23,180 --> 00:04:28,640
<font color="#E5E5E5">very complex they can occupy more than</font>

97
00:04:25,490 --> 00:04:31,150
100 or 200 lines and nobody likes to

98
00:04:28,640 --> 00:04:33,190
read them because<font color="#CCCCCC"> it's hard so</font>

99
00:04:31,150 --> 00:04:35,080
the essential refactoring in this case

100
00:04:33,190 --> 00:04:38,500
would be to<font color="#CCCCCC"> split a function</font><font color="#E5E5E5"> into</font>

101
00:04:35,080 --> 00:04:41,440
several<font color="#E5E5E5"> parts and you know make it more</font>

102
00:04:38,500 --> 00:04:43,450
comprehensible<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> 8,000 times</font>

103
00:04:41,440 --> 00:04:44,860
people<font color="#CCCCCC"> asked</font><font color="#E5E5E5"> to split a function just</font>

104
00:04:43,450 --> 00:04:47,740
because they<font color="#CCCCCC"> think</font><font color="#E5E5E5"> they should do that</font>

105
00:04:44,860 --> 00:04:51,310
<font color="#E5E5E5">again</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> really change the logic</font>

106
00:04:47,740 --> 00:04:55,810
much but it's your style<font color="#CCCCCC"> it's an example</font>

107
00:04:51,310 --> 00:04:59,190
of<font color="#CCCCCC"> how you let's say enforce good style</font>

108
00:04:55,810 --> 00:05:02,710
<font color="#E5E5E5">on the project the same</font><font color="#CCCCCC"> foreign</font><font color="#E5E5E5"> names</font>

109
00:04:59,190 --> 00:05:04,870
<font color="#E5E5E5">you can name things differently there</font>

110
00:05:02,710 --> 00:05:06,789
are<font color="#CCCCCC"> two hard problems in software</font>

111
00:05:04,870 --> 00:05:09,940
<font color="#E5E5E5">development how</font><font color="#CCCCCC"> to name things</font><font color="#E5E5E5"> and how</font>

112
00:05:06,790 --> 00:05:12,640
you do a cache invalidation<font color="#E5E5E5"> and naming</font>

113
00:05:09,940 --> 00:05:14,110
things is<font color="#E5E5E5"> hard but if you are a</font>

114
00:05:12,640 --> 00:05:16,990
maintainer<font color="#CCCCCC"> of an open-source project</font>

115
00:05:14,110 --> 00:05:18,640
<font color="#CCCCCC">most</font><font color="#E5E5E5"> likely you have better idea how</font>

116
00:05:16,990 --> 00:05:22,060
entities should<font color="#E5E5E5"> be named than a</font>

117
00:05:18,640 --> 00:05:25,240
contributor so you<font color="#E5E5E5"> ask if you see there</font>

118
00:05:22,060 --> 00:05:27,850
an opportunity<font color="#CCCCCC"> to improve naming you ask</font>

119
00:05:25,240 --> 00:05:31,270
for for renaming renaming things<font color="#E5E5E5"> more</font>

120
00:05:27,850 --> 00:05:34,350
<font color="#E5E5E5">than</font><font color="#CCCCCC"> 9000 times people</font><font color="#E5E5E5"> ask this adding a</font>

121
00:05:31,270 --> 00:05:37,000
<font color="#CCCCCC">comment also where relevance</font>

122
00:05:34,350 --> 00:05:40,270
<font color="#CCCCCC">48,000 times people ask to add</font><font color="#E5E5E5"> a</font>

123
00:05:37,000 --> 00:05:41,950
<font color="#CCCCCC">comments</font><font color="#E5E5E5"> just because they don't</font>

124
00:05:40,270 --> 00:05:45,090
understand<font color="#E5E5E5"> how the function works</font><font color="#CCCCCC"> or</font>

125
00:05:41,950 --> 00:05:47,440
they wants to allow other people to

126
00:05:45,090 --> 00:05:51,549
quicker understand how the function

127
00:05:47,440 --> 00:05:54,610
works<font color="#E5E5E5"> the last one is my favorite</font><font color="#CCCCCC"> it's</font>

128
00:05:51,550 --> 00:05:58,570
fixing a typo<font color="#E5E5E5"> we all humans we</font><font color="#CCCCCC"> all make</font>

129
00:05:54,610 --> 00:06:02,320
mistakes<font color="#CCCCCC"> we</font><font color="#E5E5E5"> misspell identifiers we</font>

130
00:05:58,570 --> 00:06:07,330
misspell function names and can you

131
00:06:02,320 --> 00:06:09,550
imagine 910,000<font color="#E5E5E5"> comments actually</font><font color="#CCCCCC"> are</font>

132
00:06:07,330 --> 00:06:11,229
type of<font color="#CCCCCC"> correction and it's a huge</font>

133
00:06:09,550 --> 00:06:13,800
<font color="#CCCCCC">number and we</font><font color="#E5E5E5"> have to do something</font><font color="#CCCCCC"> with</font>

134
00:06:11,230 --> 00:06:16,660
<font color="#CCCCCC">it</font><font color="#E5E5E5"> because seriously</font><font color="#CCCCCC"> as just too much</font>

135
00:06:13,800 --> 00:06:20,200
so to summarize<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> this which I</font><font color="#CCCCCC"> just</font>

136
00:06:16,660 --> 00:06:23,290
curate on github<font color="#E5E5E5"> we spend a lot</font><font color="#CCCCCC"> of</font>

137
00:06:20,200 --> 00:06:26,500
efforts on<font color="#CCCCCC"> a</font><font color="#E5E5E5"> forcing boring things</font>

138
00:06:23,290 --> 00:06:30,250
because I think that<font color="#E5E5E5"> enforcing typos</font>

139
00:06:26,500 --> 00:06:33,430
<font color="#E5E5E5">correction or enforcing good functions</font>

140
00:06:30,250 --> 00:06:35,860
or enforcing these comprehensions or

141
00:06:33,430 --> 00:06:37,720
indentation is boring<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not going</font>

142
00:06:35,860 --> 00:06:39,850
to<font color="#CCCCCC"> spend all</font><font color="#E5E5E5"> your working time on just</font>

143
00:06:37,720 --> 00:06:42,940
enforce<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these things you want to work</font>

144
00:06:39,850 --> 00:06:44,620
<font color="#CCCCCC">with</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> algorithm and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to spend</font>

145
00:06:42,940 --> 00:06:47,320
<font color="#E5E5E5">your code review we</font>

146
00:06:44,620 --> 00:06:52,840
reviewing<font color="#E5E5E5"> the logic and</font><font color="#CCCCCC"> not how the code</font>

147
00:06:47,320 --> 00:06:54,760
<font color="#CCCCCC">is written it's</font><font color="#E5E5E5"> intimidating so we</font>

148
00:06:52,840 --> 00:06:56,530
should do something<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it right but</font>

149
00:06:54,760 --> 00:06:57,190
<font color="#E5E5E5">the good</font><font color="#CCCCCC"> thing is that if something is</font>

150
00:06:56,530 --> 00:07:00,219
boring

151
00:06:57,190 --> 00:07:03,040
there isn't an expectation how things

152
00:07:00,220 --> 00:07:04,630
can<font color="#E5E5E5"> be fix it right this is by</font>

153
00:07:03,040 --> 00:07:07,570
definition<font color="#E5E5E5"> why it is boring</font><font color="#CCCCCC"> if it</font>

154
00:07:04,630 --> 00:07:10,570
different all the time<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> it's not</font>

155
00:07:07,570 --> 00:07:13,150
that boring<font color="#E5E5E5"> so if there is an</font>

156
00:07:10,570 --> 00:07:15,969
instruction<font color="#CCCCCC"> you can follow specific</font>

157
00:07:13,150 --> 00:07:19,599
<font color="#E5E5E5">manual follow a specific set</font><font color="#CCCCCC"> of steps</font>

158
00:07:15,970 --> 00:07:21,550
<font color="#E5E5E5">and automated but the problem is that</font>

159
00:07:19,600 --> 00:07:23,140
how<font color="#E5E5E5"> we are going to animate this style</font>

160
00:07:21,550 --> 00:07:26,740
<font color="#E5E5E5">enforcement's in source code yeah this</font>

161
00:07:23,140 --> 00:07:28,659
is quite<font color="#E5E5E5"> hard also programming is still</font>

162
00:07:26,740 --> 00:07:29,980
an art and<font color="#E5E5E5"> you cannot really write</font><font color="#CCCCCC"> about</font>

163
00:07:28,660 --> 00:07:33,340
<font color="#E5E5E5">who writes code for you</font>

164
00:07:29,980 --> 00:07:35,710
so automatable here doesn't<font color="#CCCCCC"> really mean</font>

165
00:07:33,340 --> 00:07:40,570
that<font color="#CCCCCC"> it's unattended and you still have</font>

166
00:07:35,710 --> 00:07:43,950
<font color="#CCCCCC">to do human supervision and you know</font>

167
00:07:40,570 --> 00:07:46,870
<font color="#E5E5E5">supervise how your automation works and</font>

168
00:07:43,950 --> 00:07:47,860
this<font color="#E5E5E5"> is basically the</font><font color="#CCCCCC"> idea behind</font><font color="#E5E5E5"> the</font>

169
00:07:46,870 --> 00:07:50,200
reset code review

170
00:07:47,860 --> 00:07:52,990
you don't really<font color="#E5E5E5"> try to replace a human</font>

171
00:07:50,200 --> 00:07:57,870
and do all the<font color="#E5E5E5"> work for for her or him</font>

172
00:07:52,990 --> 00:08:01,090
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to help</font><font color="#CCCCCC"> just point to</font><font color="#E5E5E5"> some</font>

173
00:07:57,870 --> 00:08:07,200
problems or suggest fixes to some<font color="#E5E5E5"> boring</font>

174
00:08:01,090 --> 00:08:10,390
stuff so speaking<font color="#CCCCCC"> about how we can</font><font color="#E5E5E5"> help</font>

175
00:08:07,200 --> 00:08:13,440
we can do it in an IDE<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> has what</font>

176
00:08:10,390 --> 00:08:16,090
<font color="#CCCCCC">mintus said in his talk this morning</font>

177
00:08:13,440 --> 00:08:18,700
<font color="#CCCCCC">it's a it's a very nice</font><font color="#E5E5E5"> way of helping</font>

178
00:08:16,090 --> 00:08:20,770
because<font color="#E5E5E5"> the majority of problems which</font>

179
00:08:18,700 --> 00:08:23,849
you<font color="#E5E5E5"> fix you fix them while you are</font>

180
00:08:20,770 --> 00:08:26,560
<font color="#E5E5E5">typing in an idea this is by</font><font color="#CCCCCC"> definition</font>

181
00:08:23,850 --> 00:08:29,410
<font color="#E5E5E5">the problem here is that there are many</font>

182
00:08:26,560 --> 00:08:31,330
ideas<font color="#E5E5E5"> and if you want to ship a specific</font>

183
00:08:29,410 --> 00:08:31,870
analysis you have<font color="#CCCCCC"> to do it for</font><font color="#E5E5E5"> all ideas</font>

184
00:08:31,330 --> 00:08:35,530
at once

185
00:08:31,870 --> 00:08:37,780
and this is a lot<font color="#E5E5E5"> of work and the second</font>

186
00:08:35,530 --> 00:08:40,780
problem is that<font color="#CCCCCC"> people expect an</font>

187
00:08:37,780 --> 00:08:43,480
immediate feedback<font color="#CCCCCC"> so your analysis</font>

188
00:08:40,780 --> 00:08:46,329
should be<font color="#E5E5E5"> really fast and if you want to</font>

189
00:08:43,480 --> 00:08:50,710
<font color="#CCCCCC">train simultaneously it will be hard</font>

190
00:08:46,330 --> 00:08:54,160
because you have milliseconds<font color="#E5E5E5"> maximum</font>

191
00:08:50,710 --> 00:08:57,220
seconds you don't<font color="#E5E5E5"> have hours to train so</font>

192
00:08:54,160 --> 00:08:59,110
we<font color="#CCCCCC"> decided that</font><font color="#E5E5E5"> we will not follow this</font>

193
00:08:57,220 --> 00:09:02,709
<font color="#E5E5E5">approach and we do something else</font><font color="#CCCCCC"> you</font>

194
00:08:59,110 --> 00:09:04,600
<font color="#CCCCCC">can also deploy checks</font><font color="#E5E5E5"> through CI or</font>

195
00:09:02,709 --> 00:09:07,209
even periodically let's say<font color="#E5E5E5"> you're on</font>

196
00:09:04,600 --> 00:09:09,189
<font color="#CCCCCC">attend</font><font color="#E5E5E5"> Jenkins or in</font><font color="#CCCCCC"> Crone</font><font color="#E5E5E5"> it's also</font>

197
00:09:07,209 --> 00:09:10,689
<font color="#E5E5E5">possible but the problem here is that</font>

198
00:09:09,189 --> 00:09:12,250
there<font color="#CCCCCC"> is no user interface</font><font color="#E5E5E5"> you cannot</font>

199
00:09:10,689 --> 00:09:15,000
easily show people that something<font color="#E5E5E5"> is</font>

200
00:09:12,250 --> 00:09:17,410
wrong<font color="#CCCCCC"> and this is how</font><font color="#E5E5E5"> to fix it so</font>

201
00:09:15,000 --> 00:09:20,790
<font color="#CCCCCC">recently a github</font><font color="#E5E5E5"> edit a very nice</font>

202
00:09:17,410 --> 00:09:23,589
feature is called<font color="#E5E5E5"> a suggested change</font><font color="#CCCCCC"> and</font>

203
00:09:20,790 --> 00:09:27,759
it is<font color="#CCCCCC"> like a deal</font><font color="#E5E5E5"> breaker</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> because</font>

204
00:09:23,589 --> 00:09:29,920
we can suggest code fixes<font color="#E5E5E5"> during code</font>

205
00:09:27,759 --> 00:09:32,560
review in pull requests and with a

206
00:09:29,920 --> 00:09:35,139
single<font color="#E5E5E5"> click of a button</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> apply</font>

207
00:09:32,560 --> 00:09:36,849
this<font color="#CCCCCC"> change which is awesome</font><font color="#E5E5E5"> so we</font>

208
00:09:35,139 --> 00:09:40,750
decided that<font color="#E5E5E5"> we will do</font><font color="#CCCCCC"> assisted</font>

209
00:09:36,850 --> 00:09:43,660
contribute so this is a very nice blog

210
00:09:40,750 --> 00:09:47,800
post from<font color="#CCCCCC"> coda</font><font color="#E5E5E5"> C and contains a really</font>

211
00:09:43,660 --> 00:09:52,329
nice<font color="#CCCCCC"> gift</font><font color="#E5E5E5"> here yep</font>

212
00:09:47,800 --> 00:09:55,839
so the author<font color="#E5E5E5"> worried some specific</font>

213
00:09:52,329 --> 00:09:58,930
terms<font color="#E5E5E5"> on github</font><font color="#CCCCCC"> like I did but he did</font><font color="#E5E5E5"> it</font>

214
00:09:55,839 --> 00:10:00,939
<font color="#E5E5E5">more extensively</font><font color="#CCCCCC"> and he found that 20%</font>

215
00:09:58,930 --> 00:10:03,579
of quality view comments are actually

216
00:10:00,939 --> 00:10:06,129
about boring stuff<font color="#E5E5E5"> right about style and</font>

217
00:10:03,579 --> 00:10:08,769
<font color="#E5E5E5">best practices</font><font color="#CCCCCC"> I think that this number</font>

218
00:10:06,129 --> 00:10:11,139
is<font color="#E5E5E5"> probably too optimistic I think</font><font color="#CCCCCC"> the</font>

219
00:10:08,769 --> 00:10:13,600
real one is even higher<font color="#E5E5E5"> especially if</font>

220
00:10:11,139 --> 00:10:17,740
you start<font color="#CCCCCC"> working on a</font><font color="#E5E5E5"> project and you</font>

221
00:10:13,600 --> 00:10:22,839
enter this norming stage of team

222
00:10:17,740 --> 00:10:25,600
formation<font color="#CCCCCC"> people</font><font color="#E5E5E5"> tend to argue about</font>

223
00:10:22,839 --> 00:10:27,009
<font color="#CCCCCC">scold</font><font color="#E5E5E5"> style and actually this</font><font color="#CCCCCC"> number of</font>

224
00:10:25,600 --> 00:10:30,189
comments<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be even higher</font>

225
00:10:27,009 --> 00:10:34,149
but anyway it's at at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> 20% which is</font>

226
00:10:30,189 --> 00:10:38,939
<font color="#E5E5E5">huge we want to cut this 20% and use the</font>

227
00:10:34,149 --> 00:10:43,389
rest<font color="#E5E5E5"> 80% and I'm passing over to</font><font color="#CCCCCC"> lookout</font>

228
00:10:38,939 --> 00:10:46,719
which is our platform<font color="#E5E5E5"> for assisted code</font>

229
00:10:43,389 --> 00:10:49,809
review so it provides a tight

230
00:10:46,720 --> 00:10:51,579
integration with<font color="#CCCCCC"> git and github and it's</font>

231
00:10:49,809 --> 00:10:53,709
completely language agnostic<font color="#CCCCCC"> so it</font>

232
00:10:51,579 --> 00:10:56,079
doesn't really care which language you

233
00:10:53,709 --> 00:10:58,839
analyze<font color="#E5E5E5"> and it doesn't care which</font>

234
00:10:56,079 --> 00:11:01,750
language you use to<font color="#E5E5E5"> write your analysis</font>

235
00:10:58,839 --> 00:11:04,149
it just takes all the let's say

236
00:11:01,750 --> 00:11:10,470
abstraction for<font color="#E5E5E5"> dealing</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> github</font>

237
00:11:04,149 --> 00:11:12,750
this parsing source code with talking<font color="#CCCCCC"> to</font>

238
00:11:10,470 --> 00:11:14,490
different parts of your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> you don't</font>

239
00:11:12,750 --> 00:11:17,280
have to do with it you<font color="#CCCCCC"> just write</font><font color="#E5E5E5"> your</font>

240
00:11:14,490 --> 00:11:18,390
algorithm which does code analysis and

241
00:11:17,280 --> 00:11:22,110
that's<font color="#E5E5E5"> it</font>

242
00:11:18,390 --> 00:11:26,330
comments are posted automatically this

243
00:11:22,110 --> 00:11:29,040
<font color="#E5E5E5">is the overall architecture so look out</font>

244
00:11:26,330 --> 00:11:32,700
<font color="#E5E5E5">basically contains two parts the first</font>

245
00:11:29,040 --> 00:11:36,120
is<font color="#E5E5E5"> a server and the second is your</font>

246
00:11:32,700 --> 00:11:40,260
analysis can<font color="#E5E5E5"> be several</font><font color="#CCCCCC"> they register</font>

247
00:11:36,120 --> 00:11:42,150
through<font color="#E5E5E5"> a remote procedure call and it</font>

248
00:11:40,260 --> 00:11:45,720
can be written in<font color="#E5E5E5"> any language</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> RPC</font>

249
00:11:42,150 --> 00:11:48,180
<font color="#CCCCCC">support and this</font><font color="#E5E5E5"> means all the popular</font>

250
00:11:45,720 --> 00:11:53,000
languages<font color="#E5E5E5"> so whenever something happens</font>

251
00:11:48,180 --> 00:11:56,089
on<font color="#E5E5E5"> github</font><font color="#CCCCCC"> you have a push it went or</font>

252
00:11:53,000 --> 00:12:00,000
your contributor creates a pull request

253
00:11:56,090 --> 00:12:03,950
<font color="#E5E5E5">you find this through</font><font color="#CCCCCC"> github API and</font>

254
00:12:00,000 --> 00:12:05,910
trigger<font color="#E5E5E5"> specific functions in</font><font color="#CCCCCC"> your</font>

255
00:12:03,950 --> 00:12:07,680
analysis<font color="#E5E5E5"> which</font><font color="#CCCCCC"> we by the</font><font color="#E5E5E5"> way call</font>

256
00:12:05,910 --> 00:12:08,430
analyzers<font color="#E5E5E5"> which is pretty</font>

257
00:12:07,680 --> 00:12:11,520
straightforward

258
00:12:08,430 --> 00:12:13,589
and when they do something<font color="#E5E5E5"> when they</font>

259
00:12:11,520 --> 00:12:18,480
detect problems<font color="#E5E5E5"> they report them back to</font>

260
00:12:13,590 --> 00:12:21,660
the server and in turn<font color="#E5E5E5"> look out server</font>

261
00:12:18,480 --> 00:12:27,090
<font color="#E5E5E5">reports it as github comments to github</font>

262
00:12:21,660 --> 00:12:29,160
through API so<font color="#CCCCCC"> brief detail about how</font>

263
00:12:27,090 --> 00:12:31,560
everything works if you have<font color="#CCCCCC"> a push</font>

264
00:12:29,160 --> 00:12:35,569
event you have a notification<font color="#E5E5E5"> lookout</font>

265
00:12:31,560 --> 00:12:38,550
server create requests to<font color="#E5E5E5"> others then</font>

266
00:12:35,570 --> 00:12:41,220
<font color="#CCCCCC">analyzers actually ask for data</font><font color="#E5E5E5"> because</font>

267
00:12:38,550 --> 00:12:44,790
these initial requests<font color="#CCCCCC"> just contain get</font>

268
00:12:41,220 --> 00:12:46,260
<font color="#E5E5E5">metadata and you don't have the contents</font>

269
00:12:44,790 --> 00:12:48,540
of source code files you<font color="#E5E5E5"> don't have</font>

270
00:12:46,260 --> 00:12:51,180
abstract syntax trees you don't have any

271
00:12:48,540 --> 00:12:54,030
<font color="#CCCCCC">information which you can use so data</font>

272
00:12:51,180 --> 00:12:56,459
requests go to<font color="#E5E5E5"> server and then it asked</font>

273
00:12:54,030 --> 00:12:59,280
to parse<font color="#E5E5E5"> source code as needed</font><font color="#CCCCCC"> to Babel</font>

274
00:12:56,460 --> 00:13:02,280
<font color="#E5E5E5">Fish Babel Fish is another open</font><font color="#CCCCCC"> source</font>

275
00:12:59,280 --> 00:13:05,100
project sources developed<font color="#E5E5E5"> it helps you</font>

276
00:13:02,280 --> 00:13:07,860
to parse source code<font color="#E5E5E5"> in a uniform way</font>

277
00:13:05,100 --> 00:13:10,350
<font color="#E5E5E5">and it expresses</font><font color="#CCCCCC"> a steez in the</font>

278
00:13:07,860 --> 00:13:13,140
<font color="#E5E5E5">universal format so whether it is C</font>

279
00:13:10,350 --> 00:13:15,390
<font color="#CCCCCC">sharp or Python or</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> it doesn't</font>

280
00:13:13,140 --> 00:13:17,160
really matter<font color="#CCCCCC"> they all</font><font color="#E5E5E5"> parts to the</font><font color="#CCCCCC"> save</font>

281
00:13:15,390 --> 00:13:19,500
format to<font color="#CCCCCC"> the same universal abstract</font>

282
00:13:17,160 --> 00:13:21,630
syntax tree<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> good because you</font>

283
00:13:19,500 --> 00:13:23,380
only have to write<font color="#E5E5E5"> your code once of</font>

284
00:13:21,630 --> 00:13:25,990
<font color="#E5E5E5">course in the</font>

285
00:13:23,380 --> 00:13:28,030
<font color="#E5E5E5">core those abstract syntax trees are</font>

286
00:13:25,990 --> 00:13:30,010
<font color="#CCCCCC">different for them for every language up</font>

287
00:13:28,030 --> 00:13:32,319
apparently<font color="#E5E5E5"> we cannot do anything with</font>

288
00:13:30,010 --> 00:13:34,090
<font color="#E5E5E5">that but at least you can use the same</font>

289
00:13:32,320 --> 00:13:39,910
functions and you can work with<font color="#CCCCCC"> other</font>

290
00:13:34,090 --> 00:13:43,180
<font color="#E5E5E5">languages using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same API finally it</font>

291
00:13:39,910 --> 00:13:45,010
goes to get and it takes the<font color="#CCCCCC"> roll</font>

292
00:13:43,180 --> 00:13:49,839
contents of all the files which<font color="#E5E5E5"> are</font>

293
00:13:45,010 --> 00:13:53,439
involved then it<font color="#E5E5E5"> responds these data to</font>

294
00:13:49,840 --> 00:13:55,270
analyzers<font color="#E5E5E5"> they do something</font><font color="#CCCCCC"> machine</font>

295
00:13:53,440 --> 00:13:58,660
<font color="#E5E5E5">learning or not</font><font color="#CCCCCC"> it's really up to</font><font color="#E5E5E5"> you</font>

296
00:13:55,270 --> 00:14:00,910
<font color="#E5E5E5">they</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> just rule-based why not then</font>

297
00:13:58,660 --> 00:14:02,620
they report<font color="#E5E5E5"> the status back</font><font color="#CCCCCC"> it's a push</font>

298
00:14:00,910 --> 00:14:03,189
event<font color="#E5E5E5"> so we don't really</font><font color="#CCCCCC"> expect anything</font>

299
00:14:02,620 --> 00:14:06,960
in return

300
00:14:03,190 --> 00:14:10,000
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> in terms of pull requests</font>

301
00:14:06,960 --> 00:14:13,120
<font color="#E5E5E5">they respond to these comments these</font>

302
00:14:10,000 --> 00:14:15,640
fixes<font color="#E5E5E5"> what they found is problematic</font>

303
00:14:13,120 --> 00:14:17,830
with the pull request<font color="#CCCCCC"> and look</font><font color="#E5E5E5"> out</font>

304
00:14:15,640 --> 00:14:20,770
server<font color="#CCCCCC"> aggregates it and sends</font><font color="#E5E5E5"> comments</font>

305
00:14:17,830 --> 00:14:24,520
back to github<font color="#E5E5E5"> so it's kind of simple</font>

306
00:14:20,770 --> 00:14:26,530
<font color="#CCCCCC">and if you want to read more about</font><font color="#E5E5E5"> how</font>

307
00:14:24,520 --> 00:14:29,350
we look<font color="#CCCCCC"> how it</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> you can go to</font><font color="#E5E5E5"> dog</font>

308
00:14:26,530 --> 00:14:31,120
<font color="#CCCCCC">source attacks - look out and there is</font>

309
00:14:29,350 --> 00:14:33,940
an extensive documentation where we will

310
00:14:31,120 --> 00:14:35,980
reason I really recommend<font color="#CCCCCC"> to study</font><font color="#E5E5E5"> and</font>

311
00:14:33,940 --> 00:14:39,400
passing over<font color="#E5E5E5"> to software development kit</font>

312
00:14:35,980 --> 00:14:43,870
so these analyzers<font color="#E5E5E5"> as I said can</font><font color="#CCCCCC"> be</font>

313
00:14:39,400 --> 00:14:47,470
written<font color="#E5E5E5"> in any language</font><font color="#CCCCCC"> but the thing is</font>

314
00:14:43,870 --> 00:14:50,470
if<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to write something</font><font color="#CCCCCC"> low-level</font>

315
00:14:47,470 --> 00:14:53,020
we just just talks to<font color="#CCCCCC"> Lookout servers</font>

316
00:14:50,470 --> 00:14:55,540
through your PC<font color="#CCCCCC"> you indeed can use any</font>

317
00:14:53,020 --> 00:14:59,199
<font color="#E5E5E5">language</font><font color="#CCCCCC"> but you will have to</font><font color="#E5E5E5"> solve</font>

318
00:14:55,540 --> 00:15:01,480
<font color="#E5E5E5">let's say many problems on your</font><font color="#CCCCCC"> own if</font>

319
00:14:59,200 --> 00:15:04,990
your analyzer is stateful<font color="#E5E5E5"> this means it</font>

320
00:15:01,480 --> 00:15:06,910
<font color="#CCCCCC">has a state</font><font color="#E5E5E5"> if you have a push event</font><font color="#CCCCCC"> you</font>

321
00:15:04,990 --> 00:15:09,640
do<font color="#E5E5E5"> something you I don't know save</font>

322
00:15:06,910 --> 00:15:12,040
identifiers or you train and<font color="#CCCCCC"> save</font><font color="#E5E5E5"> your</font>

323
00:15:09,640 --> 00:15:13,540
<font color="#E5E5E5">machine learning model you have to store</font>

324
00:15:12,040 --> 00:15:14,920
<font color="#CCCCCC">it somewhere</font><font color="#E5E5E5"> if you have many</font>

325
00:15:13,540 --> 00:15:18,130
repositories you have to organize

326
00:15:14,920 --> 00:15:21,250
<font color="#CCCCCC">everything so you have to deal with it</font>

327
00:15:18,130 --> 00:15:22,750
and this<font color="#E5E5E5"> is why you have let's say a</font>

328
00:15:21,250 --> 00:15:24,640
<font color="#E5E5E5">higher level SDK</font>

329
00:15:22,750 --> 00:15:27,870
<font color="#CCCCCC">look out is the KML which is written</font><font color="#E5E5E5"> in</font>

330
00:15:24,640 --> 00:15:32,620
<font color="#E5E5E5">Python and it takes all these problems</font>

331
00:15:27,870 --> 00:15:35,440
away<font color="#E5E5E5"> from the developer</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so</font>

332
00:15:32,620 --> 00:15:36,940
it's a few<font color="#E5E5E5"> words about SDK</font><font color="#CCCCCC"> it provides</font>

333
00:15:35,440 --> 00:15:38,830
level you can go<font color="#E5E5E5"> and Python</font>

334
00:15:36,940 --> 00:15:41,860
you can generate for<font color="#E5E5E5"> any other language</font>

335
00:15:38,830 --> 00:15:43,900
that's no problem<font color="#CCCCCC"> as the</font><font color="#E5E5E5"> KML only</font>

336
00:15:41,860 --> 00:15:46,180
supports stateful<font color="#CCCCCC"> in the letters</font><font color="#E5E5E5"> and</font>

337
00:15:43,900 --> 00:15:48,959
it's written in Python<font color="#E5E5E5"> it's also</font>

338
00:15:46,180 --> 00:15:52,569
integrated<font color="#CCCCCC"> with the rest of sources</font>

339
00:15:48,960 --> 00:15:54,910
<font color="#CCCCCC">amadon called ecosystem</font><font color="#E5E5E5"> we have a few</font>

340
00:15:52,570 --> 00:15:58,240
projects written in Python<font color="#E5E5E5"> for code</font>

341
00:15:54,910 --> 00:16:00,400
analysis for doing a melon code and it

342
00:15:58,240 --> 00:16:03,460
works seamlessly with that<font color="#E5E5E5"> because</font>

343
00:16:00,400 --> 00:16:06,970
everything is in<font color="#E5E5E5"> Python and everything</font>

344
00:16:03,460 --> 00:16:09,040
is integrated<font color="#E5E5E5"> as a reverse amp if you</font>

345
00:16:06,970 --> 00:16:10,080
know Python<font color="#CCCCCC"> just uses the KML and</font><font color="#E5E5E5"> just</font>

346
00:16:09,040 --> 00:16:13,240
don't bother

347
00:16:10,080 --> 00:16:15,820
<font color="#CCCCCC">ok I'm going to pass over</font><font color="#E5E5E5"> high level API</font>

348
00:16:13,240 --> 00:16:18,420
<font color="#E5E5E5">because there's not much time left and I</font>

349
00:16:15,820 --> 00:16:22,030
want to demonstrate<font color="#E5E5E5"> how sterilizer works</font>

350
00:16:18,420 --> 00:16:24,209
so in brief you just implement<font color="#E5E5E5"> two</font>

351
00:16:22,030 --> 00:16:27,370
functions<font color="#CCCCCC"> strain and analyze and</font>

352
00:16:24,210 --> 00:16:30,160
everything works so you implement two

353
00:16:27,370 --> 00:16:31,960
functions in Python<font color="#E5E5E5"> and that's it you</font>

354
00:16:30,160 --> 00:16:33,730
don't<font color="#E5E5E5"> care about anything else and</font><font color="#CCCCCC"> you</font>

355
00:16:31,960 --> 00:16:38,020
post<font color="#E5E5E5"> your comments to github which is</font>

356
00:16:33,730 --> 00:16:39,940
cool<font color="#E5E5E5"> behind the scenes you</font><font color="#CCCCCC"> SDK</font><font color="#E5E5E5"> the token</font>

357
00:16:38,020 --> 00:16:42,370
to<font color="#CCCCCC"> your</font><font color="#E5E5E5"> PC pulling threading load</font>

358
00:16:39,940 --> 00:16:43,240
<font color="#E5E5E5">balancing it maintains a database with</font>

359
00:16:42,370 --> 00:16:46,480
<font color="#CCCCCC">trained models</font>

360
00:16:43,240 --> 00:16:48,820
it maintains caches with your models it

361
00:16:46,480 --> 00:16:51,430
does<font color="#E5E5E5"> login mattress</font><font color="#CCCCCC"> collection</font><font color="#E5E5E5"> and many</font>

362
00:16:48,820 --> 00:16:56,320
many other things which<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> really</font>

363
00:16:51,430 --> 00:16:59,319
<font color="#E5E5E5">wish to deal</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so I'm</font>

364
00:16:56,320 --> 00:17:03,130
passing to demo<font color="#CCCCCC"> styling the weather</font><font color="#E5E5E5"> as I</font>

365
00:16:59,320 --> 00:17:06,670
said is our analyzer for lookout<font color="#E5E5E5"> which</font>

366
00:17:03,130 --> 00:17:10,089
tries to<font color="#E5E5E5"> fix formatting mistakes which</font>

367
00:17:06,670 --> 00:17:17,410
are mined from<font color="#CCCCCC"> code days</font><font color="#E5E5E5"> some I'm going</font>

368
00:17:10,089 --> 00:17:20,679
to github yep<font color="#E5E5E5"> like this I have a</font>

369
00:17:17,410 --> 00:17:22,900
personal<font color="#E5E5E5"> work of jQuery it only works</font>

370
00:17:20,680 --> 00:17:27,400
with JavaScript for<font color="#E5E5E5"> now so I took a</font>

371
00:17:22,900 --> 00:17:32,770
well-known project for<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> salsa</font>

372
00:17:27,400 --> 00:17:35,550
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> Aldridge anyway I'm going to assert</font>

373
00:17:32,770 --> 00:17:38,879
see if my internet works<font color="#E5E5E5"> hopefully I</font>

374
00:17:35,550 --> 00:17:42,659
will enter the directory

375
00:17:38,880 --> 00:17:42,660
please<font color="#CCCCCC"> internet work</font>

376
00:17:53,710 --> 00:18:00,520
well I have some<font color="#E5E5E5"> problems</font><font color="#CCCCCC"> is my internet</font>

377
00:17:55,900 --> 00:18:04,930
that's it's a<font color="#E5E5E5"> period anyway if I change</font>

378
00:18:00,520 --> 00:18:10,930
it<font color="#E5E5E5"> some codes here and created the pull</font>

379
00:18:04,930 --> 00:18:12,610
<font color="#E5E5E5">request</font><font color="#CCCCCC"> oh and I can't view the pull</font>

380
00:18:10,930 --> 00:18:16,990
request<font color="#E5E5E5"> because again internet doesn't</font>

381
00:18:12,610 --> 00:18:18,750
work<font color="#CCCCCC"> that's the PDF so the thing which I</font>

382
00:18:16,990 --> 00:18:23,400
wanted<font color="#E5E5E5"> to demonstrate really was that</font>

383
00:18:18,750 --> 00:18:35,970
how you fix some formatting problems

384
00:18:23,400 --> 00:18:38,560
inadequate pull<font color="#CCCCCC"> request that's right</font>

385
00:18:35,970 --> 00:18:42,280
well actually I think<font color="#E5E5E5"> it loaded though I</font>

386
00:18:38,560 --> 00:18:53,560
think it's loaded and<font color="#CCCCCC"> just just super</font>

387
00:18:42,280 --> 00:19:02,610
slow but<font color="#E5E5E5"> it it</font><font color="#CCCCCC"> Lowe's</font><font color="#E5E5E5"> oh ok</font><font color="#CCCCCC"> front escort</font>

388
00:18:53,560 --> 00:19:10,330
<font color="#CCCCCC">is yours ok is</font><font color="#E5E5E5"> here and the password is</font>

389
00:19:02,610 --> 00:19:12,219
it's<font color="#E5E5E5"> just yeah but it's not you know</font>

390
00:19:10,330 --> 00:19:33,179
<font color="#E5E5E5">it's I cannot because it's just five</font>

391
00:19:12,220 --> 00:19:45,880
characters<font color="#CCCCCC"> leasable to work</font>

392
00:19:33,180 --> 00:20:02,640
<font color="#E5E5E5">no so it's it's okay it says out the</font>

393
00:19:45,880 --> 00:20:02,640
<font color="#CCCCCC">hash tag ok yes ok I'm going to code</font>

394
00:20:03,090 --> 00:20:14,370
well I hope yours<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> too gee it</font>

395
00:20:10,750 --> 00:20:14,370
looks<font color="#E5E5E5"> like it is because it doesn't work</font>

396
00:20:27,540 --> 00:20:30,540
<font color="#E5E5E5">ok</font>

397
00:20:50,809 --> 00:20:53,809
<font color="#E5E5E5">okay</font>

398
00:21:00,350 --> 00:21:06,620
yeah sorry<font color="#CCCCCC"> we tried</font><font color="#E5E5E5"> three different</font>

399
00:21:03,200 --> 00:21:10,289
internet channels and<font color="#CCCCCC"> it didn't</font><font color="#E5E5E5"> work so</font>

400
00:21:06,620 --> 00:21:11,820
I<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> save</font><font color="#E5E5E5"> you later if you come</font>

401
00:21:10,289 --> 00:21:14,480
approach me and I will<font color="#E5E5E5"> show you how it</font>

402
00:21:11,820 --> 00:21:18,509
<font color="#E5E5E5">works eventually anyway</font>

403
00:21:14,480 --> 00:21:25,249
so the thing which I wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show is</font>

404
00:21:18,509 --> 00:21:25,249
that<font color="#CCCCCC"> for them legacy</font>

405
00:21:44,380 --> 00:21:52,750
yeah yeah yeah yeah it's it's so<font color="#E5E5E5"> much</font>

406
00:21:48,400 --> 00:21:56,530
time so the thing is jQuery uses spaces

407
00:21:52,750 --> 00:22:00,160
around<font color="#E5E5E5"> about round braces in function</font>

408
00:21:56,530 --> 00:22:05,649
calls<font color="#E5E5E5"> and it doesn't consistently across</font>

409
00:22:00,160 --> 00:22:08,919
<font color="#E5E5E5">the</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> 168</font><font color="#CCCCCC"> JavaScript files and if you</font>

410
00:22:05,650 --> 00:22:12,640
try<font color="#E5E5E5"> to contribute something to jQuery in</font>

411
00:22:08,919 --> 00:22:15,760
my personal jQuery<font color="#E5E5E5"> Fork with these</font>

412
00:22:12,640 --> 00:22:18,280
spaces removed<font color="#CCCCCC"> you would get an</font>

413
00:22:15,760 --> 00:22:20,620
automatic suggestion<font color="#E5E5E5"> in github suggested</font>

414
00:22:18,280 --> 00:22:24,340
change format that you should<font color="#E5E5E5"> insert</font>

415
00:22:20,620 --> 00:22:26,620
this white space<font color="#CCCCCC"> which is cool</font><font color="#E5E5E5"> so now</font>

416
00:22:24,340 --> 00:22:30,789
how everything would work if I<font color="#CCCCCC"> had</font>

417
00:22:26,620 --> 00:22:33,100
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> it works in two stage the first</font>

418
00:22:30,789 --> 00:22:36,789
<font color="#E5E5E5">stage is training a model and the third</font>

419
00:22:33,100 --> 00:22:40,449
stage<font color="#CCCCCC"> is inferior</font><font color="#E5E5E5"> the model which you</font>

420
00:22:36,789 --> 00:22:43,240
just trained so regarding<font color="#E5E5E5"> training the</font>

421
00:22:40,450 --> 00:22:45,730
plan is as follows first you parse all

422
00:22:43,240 --> 00:22:48,010
JavaScript source code files to an

423
00:22:45,730 --> 00:22:49,990
intermediate<font color="#E5E5E5"> representation then you</font>

424
00:22:48,010 --> 00:22:53,408
train a decision tree<font color="#CCCCCC"> forest model</font><font color="#E5E5E5"> on</font>

425
00:22:49,990 --> 00:22:56,559
top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this presentation</font><font color="#CCCCCC"> then you</font>

426
00:22:53,409 --> 00:22:59,320
extract production rules from from

427
00:22:56,559 --> 00:23:02,470
decision tree<font color="#CCCCCC"> forests and new rules kind</font>

428
00:22:59,320 --> 00:23:05,080
of predict at each spot between<font color="#E5E5E5"> each</font>

429
00:23:02,470 --> 00:23:06,730
pair of tokens<font color="#E5E5E5"> whether anything should</font>

430
00:23:05,080 --> 00:23:11,559
<font color="#CCCCCC">be inserted</font><font color="#E5E5E5"> to change it on so on and so</font>

431
00:23:06,730 --> 00:23:15,460
forth<font color="#E5E5E5"> so our representation is very</font>

432
00:23:11,559 --> 00:23:19,750
<font color="#CCCCCC">similar to the one meters</font><font color="#E5E5E5"> we used in in</font>

433
00:23:15,460 --> 00:23:22,860
his talk just<font color="#CCCCCC"> before me</font><font color="#E5E5E5"> we also parse to</font>

434
00:23:19,750 --> 00:23:27,789
a sequential token stream and it's also

435
00:23:22,860 --> 00:23:31,780
augmented with a<font color="#CCCCCC"> stitch changes for</font>

436
00:23:27,789 --> 00:23:35,740
<font color="#CCCCCC">example if a equals B by 2 you have a</font>

437
00:23:31,780 --> 00:23:38,470
<font color="#E5E5E5">corresponding to the a node in Universal</font>

438
00:23:35,740 --> 00:23:40,330
abstract syntax tree<font color="#E5E5E5"> and white space</font>

439
00:23:38,470 --> 00:23:42,669
corresponds to the<font color="#E5E5E5"> higher-level</font>

440
00:23:40,330 --> 00:23:46,960
node which<font color="#CCCCCC"> is an assignment expression</font>

441
00:23:42,669 --> 00:23:50,470
<font color="#E5E5E5">and so on and so forth we don't have any</font>

442
00:23:46,960 --> 00:23:52,690
data<font color="#E5E5E5"> flow links here because first we</font>

443
00:23:50,470 --> 00:23:55,690
cannot really compile JavaScript we

444
00:23:52,690 --> 00:23:56,590
don't have this information<font color="#E5E5E5"> and second</font>

445
00:23:55,690 --> 00:24:00,700
we

446
00:23:56,590 --> 00:24:04,270
only parse parse it we don't you know do

447
00:24:00,700 --> 00:24:07,419
deeper analysis<font color="#E5E5E5"> because they do it</font>

448
00:24:04,270 --> 00:24:10,179
across<font color="#E5E5E5"> all the possible projects so once</font>

449
00:24:07,419 --> 00:24:14,020
<font color="#CCCCCC">to</font><font color="#E5E5E5"> extract features for each virtual</font>

450
00:24:10,179 --> 00:24:16,240
node you<font color="#E5E5E5"> also add features from a few</font>

451
00:24:14,020 --> 00:24:21,330
immediate parents and then you pass<font color="#E5E5E5"> it</font>

452
00:24:16,240 --> 00:24:21,330
over to<font color="#E5E5E5"> random tree forest</font>

453
00:24:22,440 --> 00:24:27,700
then you do feature selection you do

454
00:24:25,659 --> 00:24:30,850
hyper parameter optimization and<font color="#E5E5E5"> also</font>

455
00:24:27,700 --> 00:24:33,850
you split by<font color="#CCCCCC"> 80% straining and 20%</font>

456
00:24:30,850 --> 00:24:36,699
validation<font color="#E5E5E5"> that's a very common</font><font color="#CCCCCC"> way of</font>

457
00:24:33,850 --> 00:24:38,408
<font color="#E5E5E5">doing that you end up with many many</font>

458
00:24:36,700 --> 00:24:40,299
decision trees in your<font color="#CCCCCC"> random tree</font>

459
00:24:38,409 --> 00:24:44,080
forest<font color="#E5E5E5"> and then you extract production</font>

460
00:24:40,299 --> 00:24:48,220
rules<font color="#CCCCCC"> and each rule is following us</font>

461
00:24:44,080 --> 00:24:51,158
<font color="#E5E5E5">branch in a tree so each node in a tree</font>

462
00:24:48,220 --> 00:24:54,130
contains not<font color="#E5E5E5"> tribute comparison so you</font>

463
00:24:51,159 --> 00:24:57,370
join all attribute comparisons together

464
00:24:54,130 --> 00:25:00,549
biological ends<font color="#E5E5E5"> and this is your rule so</font>

465
00:24:57,370 --> 00:25:03,789
in this tree for<font color="#CCCCCC"> example you have four</font>

466
00:25:00,549 --> 00:25:05,408
rules<font color="#E5E5E5"> extracted each leaf corresponds to</font>

467
00:25:03,789 --> 00:25:08,289
a probability<font color="#E5E5E5"> distribution of the</font>

468
00:25:05,409 --> 00:25:09,970
<font color="#E5E5E5">classes which you predict and you just</font>

469
00:25:08,289 --> 00:25:14,529
pick<font color="#CCCCCC"> the class which is most probable</font>

470
00:25:09,970 --> 00:25:17,440
<font color="#E5E5E5">let's see however if you</font><font color="#CCCCCC"> just don't</font><font color="#E5E5E5"> do</font>

471
00:25:14,529 --> 00:25:21,250
anything afterwards<font color="#CCCCCC"> you end</font><font color="#E5E5E5"> up with tens</font>

472
00:25:17,440 --> 00:25:23,740
of thousands of<font color="#E5E5E5"> rules</font><font color="#CCCCCC"> and your model</font>

473
00:25:21,250 --> 00:25:25,659
<font color="#E5E5E5">isn't going to be interpretable you</font>

474
00:25:23,740 --> 00:25:28,270
cannot really easily comprehend ten

475
00:25:25,659 --> 00:25:30,100
thousand<font color="#E5E5E5"> truths and as mucus again</font><font color="#CCCCCC"> set</font>

476
00:25:28,270 --> 00:25:32,918
<font color="#E5E5E5">it's very important to explain people</font>

477
00:25:30,100 --> 00:25:35,020
<font color="#E5E5E5">while why you made this decision and if</font>

478
00:25:32,919 --> 00:25:38,200
my<font color="#E5E5E5"> internet worked actually</font><font color="#CCCCCC"> you would</font>

479
00:25:35,020 --> 00:25:40,990
see that if some rule is triggered<font color="#CCCCCC"> you</font>

480
00:25:38,200 --> 00:25:43,179
also see the hash<font color="#E5E5E5"> and you can use this</font>

481
00:25:40,990 --> 00:25:45,700
<font color="#E5E5E5">hash to actually visualize</font><font color="#CCCCCC"> the rule and</font>

482
00:25:43,179 --> 00:25:49,600
understand why this<font color="#E5E5E5"> formatting change</font>

483
00:25:45,700 --> 00:25:51,940
was suggested so we optimize rules in

484
00:25:49,600 --> 00:25:54,120
three steps the first is merging

485
00:25:51,940 --> 00:25:57,700
attributes which correspond to the<font color="#CCCCCC"> same</font>

486
00:25:54,120 --> 00:25:59,830
<font color="#E5E5E5">variable the same</font><font color="#CCCCCC"> feature the second</font>

487
00:25:57,700 --> 00:26:03,039
step is removing redundant comparisons

488
00:25:59,830 --> 00:26:05,830
<font color="#E5E5E5">let's say those ones which appear</font><font color="#CCCCCC"> in a</font>

489
00:26:03,039 --> 00:26:08,169
row just<font color="#CCCCCC"> by</font><font color="#E5E5E5"> chance because they don't</font>

490
00:26:05,830 --> 00:26:10,000
<font color="#E5E5E5">really influence anything about decision</font>

491
00:26:08,169 --> 00:26:12,250
<font color="#E5E5E5">trees</font><font color="#CCCCCC"> arranged in such a way the summit</font>

492
00:26:10,000 --> 00:26:13,960
comparisons are just<font color="#E5E5E5"> redundant they all</font>

493
00:26:12,250 --> 00:26:17,350
trigger<font color="#E5E5E5"> at the same time as I don't</font>

494
00:26:13,960 --> 00:26:20,020
<font color="#E5E5E5">really make any will you the sir topham</font>

495
00:26:17,350 --> 00:26:22,149
ization step is removing<font color="#CCCCCC"> some attributes</font>

496
00:26:20,020 --> 00:26:25,210
which are<font color="#E5E5E5"> related</font><font color="#CCCCCC"> to each</font><font color="#E5E5E5"> other through</font>

497
00:26:22,150 --> 00:26:28,510
feature logic<font color="#E5E5E5"> you have some features</font>

498
00:26:25,210 --> 00:26:31,600
which are tightly coupled<font color="#E5E5E5"> for example</font>

499
00:26:28,510 --> 00:26:34,900
you can search<font color="#CCCCCC"> for reserved keyword</font>

500
00:26:31,600 --> 00:26:38,189
value that it's it's an equals<font color="#E5E5E5"> and you</font>

501
00:26:34,900 --> 00:26:41,320
also can assert that it should not be

502
00:26:38,190 --> 00:26:43,630
<font color="#E5E5E5">semicolon of course if it's a equal sign</font>

503
00:26:41,320 --> 00:26:45,700
it cannot<font color="#E5E5E5"> be a semicolon at the same</font>

504
00:26:43,630 --> 00:26:47,290
time<font color="#E5E5E5"> so the second attribute is</font>

505
00:26:45,700 --> 00:26:50,050
redundant and<font color="#E5E5E5"> you can throw it away</font>

506
00:26:47,290 --> 00:26:56,020
and<font color="#CCCCCC"> you end</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with relatively</font><font color="#E5E5E5"> short</font>

507
00:26:50,050 --> 00:26:59,020
rules with<font color="#E5E5E5"> 50%</font><font color="#CCCCCC"> less items and the number</font>

508
00:26:56,020 --> 00:27:01,240
is also<font color="#E5E5E5"> less because many rules others</font>

509
00:26:59,020 --> 00:27:04,360
do the<font color="#CCCCCC"> same one</font><font color="#E5E5E5"> after this</font>

510
00:27:01,240 --> 00:27:06,730
simplification<font color="#E5E5E5"> finally you throw away</font>

511
00:27:04,360 --> 00:27:08,590
<font color="#E5E5E5">some rules if you see that they are not</font>

512
00:27:06,730 --> 00:27:11,530
<font color="#E5E5E5">confident</font><font color="#CCCCCC"> enough and they are</font><font color="#E5E5E5"> too noisy</font>

513
00:27:08,590 --> 00:27:14,790
<font color="#CCCCCC">because it's also important to be</font>

514
00:27:11,530 --> 00:27:19,090
precise and<font color="#E5E5E5"> don't really introduce noise</font>

515
00:27:14,790 --> 00:27:21,129
<font color="#E5E5E5">so inference looks easier from the first</font>

516
00:27:19,090 --> 00:27:24,220
<font color="#CCCCCC">glance you just</font><font color="#E5E5E5"> apply the rules which</font>

517
00:27:21,130 --> 00:27:26,700
<font color="#CCCCCC">you bind</font><font color="#E5E5E5"> and then if you see some</font>

518
00:27:24,220 --> 00:27:29,350
violations<font color="#E5E5E5"> so the token which you a</font>

519
00:27:26,700 --> 00:27:31,480
predict<font color="#CCCCCC"> with the rule doesn't match the</font>

520
00:27:29,350 --> 00:27:35,169
actual token<font color="#E5E5E5"> in the source code you</font>

521
00:27:31,480 --> 00:27:38,440
<font color="#CCCCCC">generate the code suggestion but it</font>

522
00:27:35,170 --> 00:27:40,060
appears that this part is<font color="#CCCCCC"> actually not</font>

523
00:27:38,440 --> 00:27:43,090
less challenging<font color="#E5E5E5"> than the training</font>

524
00:27:40,060 --> 00:27:44,830
itself because for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you try to</font>

525
00:27:43,090 --> 00:27:46,629
fix<font color="#E5E5E5"> something in the</font><font color="#CCCCCC"> old code which</font>

526
00:27:44,830 --> 00:27:49,409
already exists<font color="#E5E5E5"> you should not do that</font>

527
00:27:46,630 --> 00:27:52,240
<font color="#E5E5E5">because developers are not happy</font>

528
00:27:49,410 --> 00:27:54,280
<font color="#E5E5E5">if something is already written and</font><font color="#CCCCCC"> you</font>

529
00:27:52,240 --> 00:27:55,870
are<font color="#E5E5E5"> fixing it and instant doesn't really</font>

530
00:27:54,280 --> 00:27:59,560
belong to a pull request you should

531
00:27:55,870 --> 00:28:01,360
exclude it<font color="#CCCCCC"> your change can break</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> AST</font>

532
00:27:59,560 --> 00:28:03,700
<font color="#E5E5E5">you can remove a</font><font color="#CCCCCC"> whitespace between</font><font color="#E5E5E5"> two</font>

533
00:28:01,360 --> 00:28:06,870
identifiers so<font color="#E5E5E5"> these and then</font><font color="#CCCCCC"> a Fire's</font>

534
00:28:03,700 --> 00:28:09,550
concatenate and a ste just explodes and

535
00:28:06,870 --> 00:28:12,250
code just doesn't work<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> don't want</font>

536
00:28:09,550 --> 00:28:16,180
such changes so you want to filter it

537
00:28:12,250 --> 00:28:18,760
and<font color="#E5E5E5"> well for cogeneration</font><font color="#CCCCCC"> you also need</font>

538
00:28:16,180 --> 00:28:20,200
to<font color="#E5E5E5"> solve any problems from let's say</font><font color="#CCCCCC"> the</font>

539
00:28:18,760 --> 00:28:22,179
<font color="#E5E5E5">most interesting one is indentation</font>

540
00:28:20,200 --> 00:28:23,440
<font color="#CCCCCC">imagine that you predict an indentation</font>

541
00:28:22,179 --> 00:28:24,850
change

542
00:28:23,440 --> 00:28:26,980
and you have a code block<font color="#E5E5E5"> and you have</font>

543
00:28:24,850 --> 00:28:29,529
several<font color="#E5E5E5"> lines</font><font color="#CCCCCC"> in the same code book</font>

544
00:28:26,980 --> 00:28:33,100
<font color="#E5E5E5">should you change indentation</font><font color="#CCCCCC"> in all of</font>

545
00:28:29,529 --> 00:28:35,440
them or only<font color="#CCCCCC"> in one it</font><font color="#E5E5E5"> really depends so</font>

546
00:28:33,100 --> 00:28:37,689
we should go smart<font color="#E5E5E5"> and do this smart</font>

547
00:28:35,440 --> 00:28:40,539
indentation for each line in this<font color="#CCCCCC"> case</font>

548
00:28:37,690 --> 00:28:44,679
<font color="#E5E5E5">so it's a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> effort to</font><font color="#CCCCCC"> ensure that</font>

549
00:28:40,539 --> 00:28:46,750
everything<font color="#E5E5E5"> works correctly and yeah</font><font color="#CCCCCC"> you</font>

550
00:28:44,679 --> 00:28:49,269
need to<font color="#CCCCCC"> favor precision for recall this</font>

551
00:28:46,750 --> 00:28:51,549
means<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> should never make</font>

552
00:28:49,269 --> 00:28:53,889
mistakes<font color="#CCCCCC"> even at the</font><font color="#E5E5E5"> expense that</font><font color="#CCCCCC"> you</font>

553
00:28:51,549 --> 00:28:55,600
miss some potential<font color="#CCCCCC"> problems and</font><font color="#E5E5E5"> you</font>

554
00:28:53,889 --> 00:28:58,479
<font color="#CCCCCC">don't report them because otherwise</font>

555
00:28:55,600 --> 00:29:03,209
nobody<font color="#CCCCCC"> will</font><font color="#E5E5E5"> use your tool it's too noisy</font>

556
00:28:58,480 --> 00:29:03,210
<font color="#CCCCCC">even though it covers all possible fixes</font>

557
00:29:03,330 --> 00:29:08,799
<font color="#E5E5E5">inside of recall we actually measure</font>

558
00:29:05,529 --> 00:29:14,889
prediction rate which is how many<font color="#E5E5E5"> times</font>

559
00:29:08,799 --> 00:29:18,730
you try to make a<font color="#CCCCCC"> prediction from</font><font color="#E5E5E5"> the</font>

560
00:29:14,889 --> 00:29:20,949
ground truth<font color="#E5E5E5"> so recall only counts</font><font color="#CCCCCC"> for</font>

561
00:29:18,730 --> 00:29:23,679
true predictions here we just account

562
00:29:20,950 --> 00:29:27,789
for all<font color="#E5E5E5"> predictions so this metric</font>

563
00:29:23,679 --> 00:29:30,730
you know indicates like your<font color="#CCCCCC"> trade-off</font>

564
00:29:27,789 --> 00:29:34,120
how<font color="#E5E5E5"> you</font><font color="#CCCCCC"> treat precision for missing some</font>

565
00:29:30,730 --> 00:29:36,879
important fixes so this is our

566
00:29:34,120 --> 00:29:39,820
evaluation on our validation set we have

567
00:29:36,879 --> 00:29:42,699
95<font color="#E5E5E5"> percent weighted average on the data</font>

568
00:29:39,820 --> 00:29:45,309
set<font color="#CCCCCC"> of 19 repositories so this looks</font>

569
00:29:42,700 --> 00:29:47,500
cool apart<font color="#E5E5E5"> from a</font><font color="#CCCCCC"> few small JavaScript</font>

570
00:29:45,309 --> 00:29:49,299
repositories it works bad for them

571
00:29:47,500 --> 00:29:52,960
because<font color="#E5E5E5"> they are too</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

572
00:29:49,299 --> 00:29:55,330
cannot really<font color="#E5E5E5"> infer good</font><font color="#CCCCCC"> roots from such</font>

573
00:29:52,960 --> 00:29:57,279
a small<font color="#CCCCCC"> amount of source code which is</font>

574
00:29:55,330 --> 00:29:58,960
explainable<font color="#CCCCCC"> but the problem is this</font>

575
00:29:57,279 --> 00:30:02,049
revelation<font color="#CCCCCC"> is that we don't really test</font>

576
00:29:58,960 --> 00:30:03,580
how users interact with<font color="#CCCCCC"> your system and</font>

577
00:30:02,049 --> 00:30:05,649
this<font color="#E5E5E5"> is this is important</font>

578
00:30:03,580 --> 00:30:09,009
well<font color="#CCCCCC"> edition has nothing to do with the</font>

579
00:30:05,649 --> 00:30:12,758
real usage<font color="#E5E5E5"> so we have another approach</font>

580
00:30:09,009 --> 00:30:16,600
for<font color="#E5E5E5"> evaluation where we added</font><font color="#CCCCCC"> 170</font>

581
00:30:12,759 --> 00:30:20,379
handcrafted errors formatting errors<font color="#CCCCCC"> too</font>

582
00:30:16,600 --> 00:30:23,980
to<font color="#E5E5E5"> JavaScript projects and we saw how we</font>

583
00:30:20,379 --> 00:30:27,009
fix them<font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> 95%</font><font color="#E5E5E5"> precision as</font>

584
00:30:23,980 --> 00:30:29,860
50%<font color="#CCCCCC"> production rate this means</font><font color="#E5E5E5"> that we</font>

585
00:30:27,009 --> 00:30:32,970
<font color="#E5E5E5">miss 50% problems</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we are super</font>

586
00:30:29,860 --> 00:30:36,280
precise at fixing what is<font color="#E5E5E5"> left</font>

587
00:30:32,970 --> 00:30:38,200
again<font color="#E5E5E5"> we don't really test the real</font>

588
00:30:36,280 --> 00:30:41,320
behavior here because<font color="#CCCCCC"> we introduce</font>

589
00:30:38,200 --> 00:30:45,580
artificial<font color="#E5E5E5"> changes to formatting the</font>

590
00:30:41,320 --> 00:30:49,899
true way of<font color="#E5E5E5"> relating the formatting</font>

591
00:30:45,580 --> 00:30:53,620
fixer<font color="#E5E5E5"> would be to you know for</font><font color="#CCCCCC"> example</font>

592
00:30:49,900 --> 00:30:55,809
take users and ask them to to work with

593
00:30:53,620 --> 00:30:58,239
<font color="#CCCCCC">your system and measure some metrics</font>

594
00:30:55,809 --> 00:30:59,559
from from the real work<font color="#E5E5E5"> we cannot do</font>

595
00:30:58,240 --> 00:31:01,750
<font color="#E5E5E5">this</font><font color="#CCCCCC"> for now because we are</font><font color="#E5E5E5"> still</font>

596
00:30:59,559 --> 00:31:04,990
launching this product<font color="#E5E5E5"> but the idea is</font>

597
00:31:01,750 --> 00:31:07,900
<font color="#CCCCCC">to take comments and try to infer</font>

598
00:31:04,990 --> 00:31:10,600
formatting fixes from existing<font color="#E5E5E5"> comments</font>

599
00:31:07,900 --> 00:31:14,710
you<font color="#CCCCCC"> have many comments in JavaScript</font>

600
00:31:10,600 --> 00:31:17,559
projects and apply<font color="#CCCCCC"> sterilizer</font><font color="#E5E5E5"> and see</font>

601
00:31:14,710 --> 00:31:19,600
how how it performs<font color="#CCCCCC"> we haven't done it</font>

602
00:31:17,559 --> 00:31:22,629
so<font color="#CCCCCC"> far</font><font color="#E5E5E5"> but I</font><font color="#CCCCCC"> think this is the best way</font>

603
00:31:19,600 --> 00:31:26,439
of<font color="#E5E5E5"> revolution also</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> extend the</font>

604
00:31:22,630 --> 00:31:29,470
current ways of evaluation we need to

605
00:31:26,440 --> 00:31:32,290
add more<font color="#E5E5E5"> artificial changes and also</font>

606
00:31:29,470 --> 00:31:34,210
<font color="#E5E5E5">there is an idea to introduce random</font>

607
00:31:32,290 --> 00:31:37,480
mutations to<font color="#CCCCCC"> JavaScript source code</font>

608
00:31:34,210 --> 00:31:39,850
files and see how much we can we can fix

609
00:31:37,480 --> 00:31:43,690
<font color="#E5E5E5">it's not real but it's also a nice</font>

610
00:31:39,850 --> 00:31:45,370
indication of your robustness so I'm

611
00:31:43,690 --> 00:31:49,470
passing over to summary<font color="#E5E5E5"> how much</font><font color="#CCCCCC"> time I</font>

612
00:31:45,370 --> 00:31:53,050
<font color="#E5E5E5">have one minute perfect so to summarize</font>

613
00:31:49,470 --> 00:31:55,420
<font color="#CCCCCC">look</font><font color="#E5E5E5"> out is a very nice platform for</font>

614
00:31:53,050 --> 00:31:57,460
assisted code review as I said<font color="#E5E5E5"> you just</font>

615
00:31:55,420 --> 00:32:02,850
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> to farm two functions in</font>

616
00:31:57,460 --> 00:32:05,830
Python lets you write a fully functional

617
00:32:02,850 --> 00:32:06,659
analyzer for<font color="#E5E5E5"> code review which</font><font color="#CCCCCC"> is really</font>

618
00:32:05,830 --> 00:32:09,790
great

619
00:32:06,660 --> 00:32:13,090
sanitizer is really fun and this<font color="#E5E5E5"> is an</font>

620
00:32:09,790 --> 00:32:15,550
ongoing project<font color="#CCCCCC"> at sources we are still</font>

621
00:32:13,090 --> 00:32:18,159
fixing<font color="#E5E5E5"> last minute books but it already</font>

622
00:32:15,550 --> 00:32:20,490
<font color="#E5E5E5">has a first release so we can try it out</font>

623
00:32:18,160 --> 00:32:23,740
every single open source is<font color="#E5E5E5"> for them and</font>

624
00:32:20,490 --> 00:32:25,690
the third point is<font color="#CCCCCC"> amal encode this</font>

625
00:32:23,740 --> 00:32:28,240
really cool and if you are<font color="#E5E5E5"> not doing it</font>

626
00:32:25,690 --> 00:32:32,020
you<font color="#E5E5E5"> should consider trying it it's</font>

627
00:32:28,240 --> 00:32:35,220
<font color="#E5E5E5">really cool that's all these are the</font>

628
00:32:32,020 --> 00:32:39,129
links<font color="#CCCCCC"> to github which i mentioned our</font>

629
00:32:35,220 --> 00:32:42,160
<font color="#CCCCCC">blog we post really nice blog posts</font><font color="#E5E5E5"> from</font>

630
00:32:39,130 --> 00:32:44,860
time to time you<font color="#E5E5E5"> can subscribe to our</font>

631
00:32:42,160 --> 00:32:46,220
<font color="#E5E5E5">newsletter and follow us</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> twitter</font>

632
00:32:44,860 --> 00:32:54,738
thank you<font color="#E5E5E5"> very much</font>

633
00:32:46,220 --> 00:32:54,739
[Applause]

634
00:33:10,140 --> 00:33:34,750
yes yes<font color="#CCCCCC"> how I submit what sorry so the</font>

635
00:33:32,740 --> 00:33:36,580
question is how<font color="#CCCCCC"> should we estimate the</font>

636
00:33:34,750 --> 00:33:39,160
accurateness of<font color="#CCCCCC"> santa</font><font color="#E5E5E5"> weather so that</font><font color="#CCCCCC"> it</font>

637
00:33:36,580 --> 00:33:42,790
is usable<font color="#CCCCCC"> for production</font><font color="#E5E5E5"> and the answer</font>

638
00:33:39,160 --> 00:33:45,700
is<font color="#E5E5E5"> so there is a very nice paper written</font>

639
00:33:42,790 --> 00:33:47,920
by<font color="#CCCCCC"> Google</font><font color="#E5E5E5"> engineers where they explain</font>

640
00:33:45,700 --> 00:33:51,720
<font color="#E5E5E5">how they try to do assisted code review</font>

641
00:33:47,920 --> 00:33:58,570
<font color="#E5E5E5">at Google scale and the insight was</font><font color="#CCCCCC"> that</font>

642
00:33:51,720 --> 00:34:01,690
<font color="#E5E5E5">it should be at least 5% so it should be</font>

643
00:33:58,570 --> 00:34:05,050
<font color="#E5E5E5">at</font><font color="#CCCCCC"> least</font><font color="#E5E5E5"> 95 percent precision otherwise</font>

644
00:34:01,690 --> 00:34:07,470
it's just<font color="#E5E5E5"> not usable and it has too</font><font color="#CCCCCC"> many</font>

645
00:34:05,050 --> 00:34:07,470
false positives

646
00:34:09,500 --> 00:34:14,110
[Applause]

