1
00:00:06,810 --> 00:00:15,849
yeah<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> uh hi</font><font color="#E5E5E5"> I'm Clark</font><font color="#CCCCCC"> Kerr for</font>

2
00:00:13,809 --> 00:00:20,140
<font color="#E5E5E5">the last year I've been working</font><font color="#CCCCCC"> with</font>

3
00:00:15,850 --> 00:00:22,320
mainly<font color="#CCCCCC"> Stuart back there</font><font color="#E5E5E5"> and with Dennis</font>

4
00:00:20,140 --> 00:00:26,500
<font color="#E5E5E5">is Dennis here there's Dennis and</font>

5
00:00:22,320 --> 00:00:30,130
together<font color="#E5E5E5"> we've been creating fractal ID</font>

6
00:00:26,500 --> 00:00:32,949
and fractal itís a flow based

7
00:00:30,130 --> 00:00:35,410
programming framework<font color="#E5E5E5"> in rust and in</font>

8
00:00:32,949 --> 00:00:38,769
<font color="#CCCCCC">brackets</font><font color="#E5E5E5"> last year we've been focusing</font>

9
00:00:35,410 --> 00:00:43,479
on the racket part flow-based

10
00:00:38,769 --> 00:00:48,030
programming what's that so if you take

11
00:00:43,479 --> 00:00:51,670
<font color="#E5E5E5">your usual control flow diagram that</font>

12
00:00:48,030 --> 00:00:54,159
<font color="#E5E5E5">explains how your program counter goes</font>

13
00:00:51,670 --> 00:00:55,949
through your imperative program when you

14
00:00:54,159 --> 00:00:59,549
do dataflow programming you describe

15
00:00:55,949 --> 00:01:01,629
where the data goes<font color="#E5E5E5"> instead and that</font>

16
00:00:59,549 --> 00:01:04,599
<font color="#E5E5E5">enables you to do all</font><font color="#CCCCCC"> kinds of</font>

17
00:01:01,629 --> 00:01:06,429
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> things easier than if you</font>

18
00:01:04,599 --> 00:01:09,610
have<font color="#E5E5E5"> to describe</font><font color="#CCCCCC"> exactly what's</font>

19
00:01:06,430 --> 00:01:11,880
happening<font color="#E5E5E5"> in the detail in the system so</font>

20
00:01:09,610 --> 00:01:14,289
there's lots of different<font color="#CCCCCC"> data for</font>

21
00:01:11,880 --> 00:01:17,320
programming methods and flow-based

22
00:01:14,289 --> 00:01:20,500
programming<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the one characterized by</font>

23
00:01:17,320 --> 00:01:25,199
these<font color="#E5E5E5"> things mainly the bounded buffer</font>

24
00:01:20,500 --> 00:01:27,759
and the asynchronous<font color="#E5E5E5"> nodes you have</font>

25
00:01:25,200 --> 00:01:30,240
parallel processing going<font color="#E5E5E5"> on this thing</font>

26
00:01:27,759 --> 00:01:33,250
here can process things<font color="#E5E5E5"> send further on</font>

27
00:01:30,240 --> 00:01:35,919
the data<font color="#E5E5E5"> travels on and more data can</font>

28
00:01:33,250 --> 00:01:40,359
come<font color="#E5E5E5"> in so the data travels in waves</font>

29
00:01:35,920 --> 00:01:42,460
through<font color="#E5E5E5"> the graph if you</font><font color="#CCCCCC"> want to know</font>

30
00:01:40,359 --> 00:01:49,869
more about flow-based programming<font color="#E5E5E5"> this</font>

31
00:01:42,460 --> 00:01:53,649
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> canonical source so why do we</font>

32
00:01:49,869 --> 00:01:56,770
<font color="#CCCCCC">want flow based</font><font color="#E5E5E5"> programming the holy</font>

33
00:01:53,649 --> 00:01:59,140
grail of software<font color="#E5E5E5"> software we use ever</font>

34
00:01:56,770 --> 00:02:00,908
since the first<font color="#E5E5E5"> lines of code were</font>

35
00:01:59,140 --> 00:02:05,020
written<font color="#CCCCCC"> we</font><font color="#E5E5E5"> were figuring out how can</font><font color="#CCCCCC"> we</font>

36
00:02:00,909 --> 00:02:07,830
not write this line of code again even

37
00:02:05,020 --> 00:02:10,478
though it was a very<font color="#CCCCCC"> good line of code</font>

38
00:02:07,830 --> 00:02:14,829
so we started by making<font color="#E5E5E5"> programming</font>

39
00:02:10,479 --> 00:02:16,720
languages and programs more modular for

40
00:02:14,830 --> 00:02:18,880
example the modular programming language

41
00:02:16,720 --> 00:02:21,830
will start<font color="#E5E5E5"> back in the 60s</font>

42
00:02:18,880 --> 00:02:25,700
we went from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> to figuring out</font>

43
00:02:21,830 --> 00:02:29,720
object orientation<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Simula</font><font color="#E5E5E5"> and later</font>

44
00:02:25,700 --> 00:02:32,540
small talk<font color="#E5E5E5"> and then we started looking</font>

45
00:02:29,720 --> 00:02:34,550
<font color="#E5E5E5">in the large we have this code here how</font>

46
00:02:32,540 --> 00:02:35,870
should that interact<font color="#E5E5E5"> with another piece</font>

47
00:02:34,550 --> 00:02:39,220
<font color="#CCCCCC">of code and</font><font color="#E5E5E5"> we started talking</font><font color="#CCCCCC"> about</font>

48
00:02:35,870 --> 00:02:42,860
service oriented programming or

49
00:02:39,220 --> 00:02:44,750
architecture<font color="#E5E5E5"> defining interfaces between</font>

50
00:02:42,860 --> 00:02:50,060
<font color="#E5E5E5">things and having them talk to each</font>

51
00:02:44,750 --> 00:02:51,710
<font color="#E5E5E5">other</font><font color="#CCCCCC"> this led to a situation</font><font color="#E5E5E5"> for</font>

52
00:02:50,060 --> 00:02:55,430
historical reasons<font color="#CCCCCC"> that a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of people</font>

53
00:02:51,710 --> 00:03:01,070
didn't<font color="#CCCCCC"> like so they call it something</font>

54
00:02:55,430 --> 00:03:03,170
<font color="#CCCCCC">else and because a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> connotations</font>

55
00:03:01,070 --> 00:03:07,940
got attached and in<font color="#E5E5E5"> certain standards</font>

56
00:03:03,170 --> 00:03:09,170
<font color="#E5E5E5">and so on so</font><font color="#CCCCCC"> micro-services it's really</font>

57
00:03:07,940 --> 00:03:10,400
the same<font color="#CCCCCC"> thing you have</font><font color="#E5E5E5"> something</font>

58
00:03:09,170 --> 00:03:11,750
<font color="#E5E5E5">running here you have something running</font>

59
00:03:10,400 --> 00:03:16,100
here they need<font color="#E5E5E5"> to talk to each other</font>

60
00:03:11,750 --> 00:03:17,990
<font color="#E5E5E5">somehow one specific way</font><font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> to each</font>

61
00:03:16,100 --> 00:03:22,030
other I<font color="#CCCCCC"> don't know if maybe Chris</font>

62
00:03:17,990 --> 00:03:27,050
mentioned<font color="#E5E5E5"> he's really into the actors</font>

63
00:03:22,030 --> 00:03:29,230
<font color="#E5E5E5">paradigm of putting things together and</font>

64
00:03:27,050 --> 00:03:32,390
so that's also<font color="#E5E5E5"> a system where</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

65
00:03:29,230 --> 00:03:34,280
asynchronous<font color="#E5E5E5"> agents that send</font><font color="#CCCCCC"> messages</font>

66
00:03:32,390 --> 00:03:39,708
to<font color="#CCCCCC"> each other</font><font color="#E5E5E5"> so how is that different</font>

67
00:03:34,280 --> 00:03:43,610
<font color="#CCCCCC">from</font><font color="#E5E5E5"> flow-based programming these are</font>

68
00:03:39,709 --> 00:03:47,120
the things we<font color="#E5E5E5"> want when</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> our ways</font>

69
00:03:43,610 --> 00:03:50,060
of<font color="#CCCCCC"> putting things</font><font color="#E5E5E5"> together if someone</font>

70
00:03:47,120 --> 00:03:52,580
<font color="#E5E5E5">knows too much about how someone else</font>

71
00:03:50,060 --> 00:03:54,080
works<font color="#E5E5E5"> then</font><font color="#CCCCCC"> when you change something</font><font color="#E5E5E5"> you</font>

72
00:03:52,580 --> 00:03:55,400
need<font color="#CCCCCC"> to change</font><font color="#E5E5E5"> in too many places so you</font>

73
00:03:54,080 --> 00:03:58,070
<font color="#E5E5E5">want to make sure you have as little</font>

74
00:03:55,400 --> 00:04:01,520
<font color="#CCCCCC">knowledge as possible and in as</font><font color="#E5E5E5"> few</font>

75
00:03:58,070 --> 00:04:03,200
<font color="#E5E5E5">places as</font><font color="#CCCCCC"> possible you need a way to</font>

76
00:04:01,520 --> 00:04:06,140
know how these different parts<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

77
00:04:03,200 --> 00:04:09,679
program<font color="#CCCCCC"> talk to each other</font><font color="#E5E5E5"> you need to</font>

78
00:04:06,140 --> 00:04:11,059
make sure and this fits together with

79
00:04:09,680 --> 00:04:13,580
the<font color="#E5E5E5"> previous two points you need to make</font>

80
00:04:11,060 --> 00:04:15,860
sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> if I change this thing it</font>

81
00:04:13,580 --> 00:04:18,340
doesn't<font color="#CCCCCC"> affect this other thing unless</font><font color="#E5E5E5"> I</font>

82
00:04:15,860 --> 00:04:18,340
want it to

83
00:04:19,079 --> 00:04:25,620
and one<font color="#E5E5E5"> aspect of this is if this module</font>

84
00:04:24,000 --> 00:04:27,810
is<font color="#CCCCCC"> going to communicate with this</font><font color="#E5E5E5"> module</font>

85
00:04:25,620 --> 00:04:30,840
<font color="#E5E5E5">it better not be hard-coded</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

86
00:04:27,810 --> 00:04:32,699
about<font color="#E5E5E5"> this module it should know</font><font color="#CCCCCC"> about</font>

87
00:04:30,840 --> 00:04:35,429
<font color="#E5E5E5">some</font><font color="#CCCCCC"> kind of interface</font><font color="#E5E5E5"> and we should</font>

88
00:04:32,699 --> 00:04:37,139
<font color="#E5E5E5">somehow tell it that okay here's the</font>

89
00:04:35,430 --> 00:04:39,120
thing<font color="#CCCCCC"> you're talking</font><font color="#E5E5E5"> to now so we can</font>

90
00:04:37,139 --> 00:04:44,069
switch<font color="#E5E5E5"> things out without having</font><font color="#CCCCCC"> to</font>

91
00:04:39,120 --> 00:04:45,690
change<font color="#E5E5E5"> that code</font><font color="#CCCCCC"> so here's an example</font><font color="#E5E5E5"> of</font>

92
00:04:44,069 --> 00:04:50,490
flow based programming in the language

93
00:04:45,690 --> 00:04:55,879
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> possibly familiar with you have</font>

94
00:04:50,490 --> 00:05:00,599
one node that sends<font color="#E5E5E5"> out some kind of</font>

95
00:04:55,879 --> 00:05:02,969
message in flow-based programming<font color="#E5E5E5"> we</font>

96
00:05:00,599 --> 00:05:04,830
call it an information package but I'm

97
00:05:02,969 --> 00:05:08,909
going<font color="#E5E5E5"> to use message because most people</font>

98
00:05:04,830 --> 00:05:12,090
will<font color="#E5E5E5"> find that easier to intuitively get</font>

99
00:05:08,909 --> 00:05:16,169
what it's about<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> this node</font>

100
00:05:12,090 --> 00:05:20,369
that<font color="#CCCCCC"> generates a message we connect it</font>

101
00:05:16,169 --> 00:05:26,448
to another node it does some processing

102
00:05:20,370 --> 00:05:26,449
<font color="#CCCCCC">on this message sends out a new message</font>

103
00:05:26,960 --> 00:05:33,599
<font color="#E5E5E5">we touch</font><font color="#CCCCCC"> another node that further</font>

104
00:05:29,819 --> 00:05:36,300
process is this<font color="#E5E5E5"> just things maybe</font>

105
00:05:33,599 --> 00:05:40,529
<font color="#E5E5E5">selects things transforms things and</font>

106
00:05:36,300 --> 00:05:42,270
sends it out and then if we're doing

107
00:05:40,529 --> 00:05:46,590
<font color="#E5E5E5">this in a shell environment we have an</font>

108
00:05:42,270 --> 00:05:52,680
implicit<font color="#E5E5E5"> display agent at</font><font color="#CCCCCC"> the end that</font>

109
00:05:46,590 --> 00:05:56,638
shows you what<font color="#E5E5E5"> the end result is so in</font>

110
00:05:52,680 --> 00:05:59,879
flow-based programming that curl<font color="#E5E5E5"> thing</font>

111
00:05:56,639 --> 00:06:04,219
there<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would be a component</font><font color="#E5E5E5"> and the</font>

112
00:05:59,879 --> 00:06:06,509
component doesn't<font color="#E5E5E5"> take a parameter but</font>

113
00:06:04,219 --> 00:06:08,430
when we do<font color="#E5E5E5"> this kind of simple pipeline</font>

114
00:06:06,509 --> 00:06:09,870
<font color="#E5E5E5">we just have one standard in and we have</font>

115
00:06:08,430 --> 00:06:12,060
<font color="#CCCCCC">this standard</font><font color="#E5E5E5"> out when you do flow-based</font>

116
00:06:09,870 --> 00:06:16,879
programming you have<font color="#E5E5E5"> several inputs if</font>

117
00:06:12,060 --> 00:06:20,150
you want to and several outputs and one

118
00:06:16,879 --> 00:06:22,560
magical input is the option inputs opt

119
00:06:20,150 --> 00:06:25,698
if you want parameters you send them

120
00:06:22,560 --> 00:06:31,570
there<font color="#E5E5E5"> so we would send the</font><font color="#CCCCCC"> URL to our</font>

121
00:06:25,699 --> 00:06:36,910
curl module instantiating into a get<font color="#CCCCCC"> URL</font>

122
00:06:31,570 --> 00:06:39,040
note and we will send this as the first

123
00:06:36,910 --> 00:06:40,810
input<font color="#E5E5E5"> that starts the whole chain you</font>

124
00:06:39,040 --> 00:06:42,640
<font color="#CCCCCC">have a graph it just</font><font color="#E5E5E5"> sits there</font><font color="#CCCCCC"> until</font>

125
00:06:40,810 --> 00:06:45,610
you send some message that makes it do

126
00:06:42,640 --> 00:06:50,680
stuff<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the first part of</font><font color="#E5E5E5"> this graph is</font>

127
00:06:45,610 --> 00:06:53,830
<font color="#E5E5E5">the curl agent it receives a message hey</font>

128
00:06:50,680 --> 00:06:57,340
here's a URL it does something it goes

129
00:06:53,830 --> 00:07:01,140
to the network<font color="#E5E5E5"> gets this data sends it</font>

130
00:06:57,340 --> 00:07:03,789
to<font color="#CCCCCC"> it's out in the</font><font color="#E5E5E5"> meantime we have sent</font>

131
00:07:01,140 --> 00:07:06,340
<font color="#E5E5E5">the other messages to configure the</font>

132
00:07:03,790 --> 00:07:09,040
other nodes<font color="#E5E5E5"> so we have sent to tidy you</font>

133
00:07:06,340 --> 00:07:12,369
should make this into<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> to it's</font><font color="#E5E5E5"> opt</font>

134
00:07:09,040 --> 00:07:15,100
<font color="#E5E5E5">input and we have sent this selection</font>

135
00:07:12,370 --> 00:07:16,750
expression to<font color="#E5E5E5"> XML starlet's that you</font>

136
00:07:15,100 --> 00:07:20,260
should do this<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> data when it</font>

137
00:07:16,750 --> 00:07:23,850
comes so<font color="#E5E5E5"> it gets that on</font><font color="#CCCCCC"> it's opt input</font>

138
00:07:20,260 --> 00:07:26,890
and then at some point on the in input

139
00:07:23,850 --> 00:07:28,750
it gets<font color="#E5E5E5"> this XML and</font><font color="#CCCCCC"> then it does its</font>

140
00:07:26,890 --> 00:07:34,719
thing<font color="#E5E5E5"> and sends it out and we get</font><font color="#CCCCCC"> the</font>

141
00:07:28,750 --> 00:07:38,920
<font color="#E5E5E5">result so this is a</font><font color="#CCCCCC"> Bosch</font><font color="#E5E5E5"> pipeline</font>

142
00:07:34,720 --> 00:07:42,490
syntax it's quite neat to describe<font color="#E5E5E5"> just</font>

143
00:07:38,920 --> 00:07:45,160
a line of things but what if you want<font color="#E5E5E5"> to</font>

144
00:07:42,490 --> 00:07:46,830
have like this<font color="#E5E5E5"> thing produces something</font>

145
00:07:45,160 --> 00:07:48,970
<font color="#CCCCCC">I want to</font><font color="#E5E5E5"> split it up into two</font><font color="#CCCCCC"> parts</font>

146
00:07:46,830 --> 00:07:50,140
<font color="#E5E5E5">process something over here process</font>

147
00:07:48,970 --> 00:07:52,810
<font color="#E5E5E5">something over there put them back</font>

148
00:07:50,140 --> 00:07:54,610
together<font color="#E5E5E5"> you can't do it but it's very</font>

149
00:07:52,810 --> 00:07:56,110
tricky<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you cannot just</font><font color="#E5E5E5"> stay</font><font color="#CCCCCC"> within</font>

150
00:07:54,610 --> 00:08:02,250
<font color="#CCCCCC">bash you need to use some other</font><font color="#E5E5E5"> tools to</font>

151
00:07:56,110 --> 00:08:05,490
<font color="#CCCCCC">set</font><font color="#E5E5E5"> up your pipelines and stuff so</font>

152
00:08:02,250 --> 00:08:08,170
flow-based programming is really<font color="#CCCCCC"> a</font>

153
00:08:05,490 --> 00:08:12,070
certain of these historical methods put

154
00:08:08,170 --> 00:08:14,100
together in one<font color="#CCCCCC"> package to implement it</font>

155
00:08:12,070 --> 00:08:16,960
you can use core routines or threads<font color="#E5E5E5"> and</font>

156
00:08:14,100 --> 00:08:18,460
you have kind<font color="#E5E5E5"> of actors but they're</font>

157
00:08:16,960 --> 00:08:21,599
<font color="#E5E5E5">limited in what they can send if you</font>

158
00:08:18,460 --> 00:08:24,460
have the actors paradigm you<font color="#E5E5E5"> usually</font>

159
00:08:21,600 --> 00:08:27,280
find out who you<font color="#E5E5E5"> should send to next by</font>

160
00:08:24,460 --> 00:08:28,599
getting a<font color="#CCCCCC"> message we do</font><font color="#E5E5E5"> more information</font>

161
00:08:27,280 --> 00:08:30,250
hiding<font color="#E5E5E5"> in flow based program and we</font>

162
00:08:28,600 --> 00:08:32,919
don't tell<font color="#E5E5E5"> you who you're talking to</font>

163
00:08:30,250 --> 00:08:35,679
<font color="#E5E5E5">you just send it to</font><font color="#CCCCCC"> your out or to your</font>

164
00:08:32,919 --> 00:08:38,559
here's where I send pictures or or

165
00:08:35,679 --> 00:08:40,780
whatever<font color="#E5E5E5"> outputs you have and the</font>

166
00:08:38,559 --> 00:08:43,380
scheduler takes care of<font color="#E5E5E5"> that and gets it</font>

167
00:08:40,780 --> 00:08:43,380
<font color="#E5E5E5">to the right place</font>

168
00:08:43,458 --> 00:08:48,599
so that enables<font color="#CCCCCC"> more combinations</font><font color="#E5E5E5"> you</font>

169
00:08:46,500 --> 00:08:52,440
have<font color="#E5E5E5"> less information</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> have less</font>

170
00:08:48,600 --> 00:09:00,570
<font color="#CCCCCC">risk of some unintended consequence some</font>

171
00:08:52,440 --> 00:09:04,890
<font color="#CCCCCC">where multiple</font><font color="#E5E5E5"> inboxes</font><font color="#CCCCCC"> and multiple out</font>

172
00:09:00,570 --> 00:09:08,480
boxes and the pipes<font color="#CCCCCC"> that we call them in</font>

173
00:09:04,890 --> 00:09:12,120
<font color="#E5E5E5">bash are called</font><font color="#CCCCCC"> Angie's messages or</font>

174
00:09:08,480 --> 00:09:14,790
information<font color="#CCCCCC"> packing packages you can</font>

175
00:09:12,120 --> 00:09:16,260
<font color="#E5E5E5">type things</font><font color="#CCCCCC"> if you want to we do it on</font>

176
00:09:14,790 --> 00:09:18,449
<font color="#E5E5E5">the rest side we don't</font><font color="#CCCCCC"> do it on the</font>

177
00:09:16,260 --> 00:09:20,610
<font color="#E5E5E5">racket side or we can do it on the</font>

178
00:09:18,450 --> 00:09:23,430
racket side just by saying putting a

179
00:09:20,610 --> 00:09:26,160
contract on the on the input of<font color="#E5E5E5"> that</font>

180
00:09:23,430 --> 00:09:29,599
agent but we don't check<font color="#E5E5E5"> it during</font><font color="#CCCCCC"> Graf</font>

181
00:09:26,160 --> 00:09:34,529
compilation time but if you if you<font color="#E5E5E5"> write</font>

182
00:09:29,600 --> 00:09:35,990
<font color="#E5E5E5">fractal I'd network</font><font color="#CCCCCC"> in rust when</font><font color="#E5E5E5"> you</font>

183
00:09:34,529 --> 00:09:40,250
compile this thing<font color="#E5E5E5"> he will already</font>

184
00:09:35,990 --> 00:09:40,250
verify that all<font color="#E5E5E5"> the types fit together</font>

185
00:09:45,560 --> 00:09:51,949
and here's something maybe<font color="#E5E5E5"> it's possible</font>

186
00:09:48,980 --> 00:09:53,779
<font color="#E5E5E5">to do if you set up</font><font color="#CCCCCC"> your anonymous</font>

187
00:09:51,950 --> 00:09:56,960
pipelines or named pipelines just right

188
00:09:53,779 --> 00:10:00,320
but it's<font color="#CCCCCC"> very tricky to</font><font color="#E5E5E5"> do and but you</font>

189
00:09:56,960 --> 00:10:03,200
can have feedback<font color="#E5E5E5"> loops imagine for</font>

190
00:10:00,320 --> 00:10:05,600
example<font color="#E5E5E5"> like a toy</font><font color="#CCCCCC"> example is the</font>

191
00:10:03,200 --> 00:10:08,779
<font color="#CCCCCC">Fibonacci sequence it takes its own</font>

192
00:10:05,600 --> 00:10:11,089
input to the next iteration<font color="#CCCCCC"> you can do</font>

193
00:10:08,779 --> 00:10:15,050
that very<font color="#E5E5E5"> easily as a flow based</font>

194
00:10:11,089 --> 00:10:19,930
programming network you consume values

195
00:10:15,050 --> 00:10:23,209
here the initial value is 1<font color="#CCCCCC"> and</font><font color="#E5E5E5"> 1 and</font>

196
00:10:19,930 --> 00:10:25,729
then it produces<font color="#CCCCCC"> the 2 it goes around</font>

197
00:10:23,210 --> 00:10:26,870
<font color="#CCCCCC">hello I got a 2 and</font><font color="#E5E5E5"> then it adds that to</font>

198
00:10:25,730 --> 00:10:28,880
the latest thing and<font color="#E5E5E5"> then you got your</font>

199
00:10:26,870 --> 00:10:35,720
<font color="#E5E5E5">Fibonacci sequence coming out the other</font>

200
00:10:28,880 --> 00:10:38,600
<font color="#E5E5E5">end is the terminology</font><font color="#CCCCCC"> and agent</font><font color="#E5E5E5"> that's</font>

201
00:10:35,720 --> 00:10:41,810
you take a module<font color="#E5E5E5"> you</font><font color="#CCCCCC"> instantiate</font><font color="#E5E5E5"> it you</font>

202
00:10:38,600 --> 00:10:44,930
got an<font color="#E5E5E5"> agent ports that's the inputs and</font>

203
00:10:41,810 --> 00:10:49,400
<font color="#E5E5E5">outputs edges that's the bounded buffer</font>

204
00:10:44,930 --> 00:10:52,520
and you<font color="#CCCCCC"> can if you are using fractal</font><font color="#E5E5E5"> I'd</font>

205
00:10:49,400 --> 00:10:57,380
I think<font color="#E5E5E5"> there are 30 objects long if you</font>

206
00:10:52,520 --> 00:10:59,660
use<font color="#CCCCCC"> morrison's frameworks and the fbp</font>

207
00:10:57,380 --> 00:11:02,120
syntax you<font color="#CCCCCC"> can define how long they are</font>

208
00:10:59,660 --> 00:11:04,100
and you<font color="#E5E5E5"> can make them infinitely long if</font>

209
00:11:02,120 --> 00:11:07,339
you have to you by<font color="#E5E5E5"> putting them into a</font>

210
00:11:04,100 --> 00:11:08,720
file and and putting<font color="#E5E5E5"> them back in but</font>

211
00:11:07,339 --> 00:11:13,850
the boundary buffer thing is really

212
00:11:08,720 --> 00:11:16,570
<font color="#E5E5E5">important you</font><font color="#CCCCCC"> can have a typical example</font>

213
00:11:13,850 --> 00:11:20,920
is you have a an agent that<font color="#E5E5E5"> calls itself</font>

214
00:11:16,570 --> 00:11:24,110
<font color="#E5E5E5">concatenate it listens on the first port</font>

215
00:11:20,920 --> 00:11:27,310
until the<font color="#CCCCCC"> data ends</font><font color="#E5E5E5"> and then it starts</font>

216
00:11:24,110 --> 00:11:30,470
listening<font color="#E5E5E5"> to the second port now</font><font color="#CCCCCC"> if the</font>

217
00:11:27,310 --> 00:11:33,140
thing that produces<font color="#E5E5E5"> data for the second</font>

218
00:11:30,470 --> 00:11:35,720
port keeps running while the

219
00:11:33,140 --> 00:11:37,430
concatenation<font color="#E5E5E5"> is not listening</font><font color="#CCCCCC"> you have</font>

220
00:11:35,720 --> 00:11:39,890
to store all that<font color="#E5E5E5"> data somewhere</font><font color="#CCCCCC"> so what</font>

221
00:11:37,430 --> 00:11:43,430
happens is the buffers<font color="#E5E5E5"> full and the</font>

222
00:11:39,890 --> 00:11:46,400
sending agent<font color="#E5E5E5"> suspends until we start</font>

223
00:11:43,430 --> 00:11:48,290
reading<font color="#E5E5E5"> then it keeps running again</font><font color="#CCCCCC"> so</font>

224
00:11:46,400 --> 00:11:51,079
this this keeps resource consumption low

225
00:11:48,290 --> 00:11:54,290
and it stops you<font color="#CCCCCC"> from</font><font color="#E5E5E5"> getting any kind</font>

226
00:11:51,080 --> 00:11:56,180
of you cannot get live locks in a

227
00:11:54,290 --> 00:11:57,980
bounded<font color="#E5E5E5"> network you can get deadlocks</font>

228
00:11:56,180 --> 00:11:59,000
<font color="#CCCCCC">it's very easy</font><font color="#E5E5E5"> to get deadlocks but it's</font>

229
00:11:57,980 --> 00:12:04,850
also quite<font color="#E5E5E5"> easy</font>

230
00:11:59,000 --> 00:12:11,960
see them<font color="#E5E5E5"> and avoid them the graph that's</font>

231
00:12:04,850 --> 00:12:15,500
<font color="#E5E5E5">the set of agents and edges and then</font><font color="#CCCCCC"> no</font>

232
00:12:11,960 --> 00:12:17,420
<font color="#E5E5E5">that can be either an</font><font color="#CCCCCC"> agents or it can</font>

233
00:12:15,500 --> 00:12:19,370
be a<font color="#CCCCCC"> subgraph so you put graphs into</font>

234
00:12:17,420 --> 00:12:20,900
graphs so that's why we have the

235
00:12:19,370 --> 00:12:22,310
expression node within<font color="#CCCCCC"> a graph you can</font>

236
00:12:20,900 --> 00:12:23,840
<font color="#E5E5E5">just talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> your nodes and maybe</font>

237
00:12:22,310 --> 00:12:31,369
this one is an agent maybe this one is a

238
00:12:23,840 --> 00:12:36,710
<font color="#E5E5E5">sub graph here's how you could</font><font color="#CCCCCC"> make an</font>

239
00:12:31,370 --> 00:12:40,040
<font color="#CCCCCC">agent in fractal IDE so we define that</font>

240
00:12:36,710 --> 00:12:41,540
we want certain inputs often in these

241
00:12:40,040 --> 00:12:44,750
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> examples with just a one</font><font color="#E5E5E5"> input</font>

242
00:12:41,540 --> 00:12:50,540
and<font color="#CCCCCC"> one output and then we have a simple</font>

243
00:12:44,750 --> 00:12:52,640
function<font color="#CCCCCC"> you see it you can choose not</font>

244
00:12:50,540 --> 00:12:55,069
to block on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> port so maybe you send</font>

245
00:12:52,640 --> 00:12:59,150
some option to<font color="#E5E5E5"> this maybe you didn't and</font>

246
00:12:55,070 --> 00:13:01,100
if you did we display that<font color="#E5E5E5"> thing</font>

247
00:12:59,150 --> 00:13:04,699
<font color="#E5E5E5">otherwise we display the message that</font>

248
00:13:01,100 --> 00:13:06,980
came<font color="#E5E5E5"> in so this one is a probe that you</font>

249
00:13:04,700 --> 00:13:08,750
can insert<font color="#E5E5E5"> into your graph you</font><font color="#CCCCCC"> have</font>

250
00:13:06,980 --> 00:13:10,250
defined<font color="#E5E5E5"> your big graph something's going</font>

251
00:13:08,750 --> 00:13:13,070
wrong you<font color="#CCCCCC"> want to know what happens here</font>

252
00:13:10,250 --> 00:13:15,320
and because everything<font color="#E5E5E5"> is decoupled</font><font color="#CCCCCC"> and</font>

253
00:13:13,070 --> 00:13:18,110
everything can<font color="#E5E5E5"> be rearranged</font><font color="#CCCCCC"> the way you</font>

254
00:13:15,320 --> 00:13:20,630
want you<font color="#E5E5E5"> just take the data that was on</font>

255
00:13:18,110 --> 00:13:22,490
its way<font color="#E5E5E5"> from component a to component B</font>

256
00:13:20,630 --> 00:13:25,700
you send it to the<font color="#CCCCCC"> display</font><font color="#E5E5E5"> instead and</font>

257
00:13:22,490 --> 00:13:29,000
then send it on to component B and then

258
00:13:25,700 --> 00:13:31,390
you<font color="#E5E5E5"> can get Europe your printf debugging</font>

259
00:13:29,000 --> 00:13:31,390
right there

260
00:13:33,670 --> 00:13:41,630
here's a trickier thing<font color="#CCCCCC"> we put a bunch</font>

261
00:13:38,030 --> 00:13:44,300
<font color="#E5E5E5">of things together</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> rectal ID we</font>

262
00:13:41,630 --> 00:13:51,350
can also achieve<font color="#E5E5E5"> gooeys using these</font>

263
00:13:44,300 --> 00:13:55,939
networks so<font color="#CCCCCC"> we have a GUI message there</font>

264
00:13:51,350 --> 00:14:01,070
that's a label just<font color="#CCCCCC"> some</font><font color="#E5E5E5"> text</font><font color="#CCCCCC"> that is</font>

265
00:13:55,940 --> 00:14:05,030
shown in a user interface<font color="#CCCCCC"> it says</font>

266
00:14:01,070 --> 00:14:09,770
password<font color="#E5E5E5"> because that's the initial</font>

267
00:14:05,030 --> 00:14:13,010
package<font color="#E5E5E5"> that we sent to it then we</font><font color="#CCCCCC"> have</font>

268
00:14:09,770 --> 00:14:14,630
a<font color="#CCCCCC"> cardinal wallet password that's the</font>

269
00:14:13,010 --> 00:14:16,310
<font color="#E5E5E5">subgraph</font><font color="#CCCCCC"> we don't have to know anything</font>

270
00:14:14,630 --> 00:14:18,140
<font color="#E5E5E5">more about</font><font color="#CCCCCC"> that right now it has its</font>

271
00:14:16,310 --> 00:14:21,290
inputs<font color="#E5E5E5"> on it out its output so we</font><font color="#CCCCCC"> can</font>

272
00:14:18,140 --> 00:14:24,020
treat<font color="#CCCCCC"> it like a black box</font><font color="#E5E5E5"> it's some kind</font>

273
00:14:21,290 --> 00:14:32,089
of component that<font color="#E5E5E5"> allows us to</font><font color="#CCCCCC"> change</font>

274
00:14:24,020 --> 00:14:36,709
<font color="#E5E5E5">the password from</font><font color="#CCCCCC"> Khurana wallet</font>

275
00:14:32,089 --> 00:14:41,140
password we use the output thing that's

276
00:14:36,709 --> 00:14:43,069
an<font color="#E5E5E5"> internal thing in how we</font><font color="#CCCCCC"> use the</font>

277
00:14:41,140 --> 00:14:45,620
graphic<font color="#E5E5E5"> component to put them together</font>

278
00:14:43,070 --> 00:14:48,020
<font color="#CCCCCC">you take a graphic component you connect</font>

279
00:14:45,620 --> 00:14:50,120
its output to<font color="#E5E5E5"> some kind of graphical</font>

280
00:14:48,020 --> 00:14:51,949
parent the container and you can<font color="#CCCCCC"> number</font>

281
00:14:50,120 --> 00:15:00,680
them<font color="#CCCCCC"> so that they</font><font color="#E5E5E5"> are put</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the order</font>

282
00:14:51,950 --> 00:15:08,270
you expect the password thing has an

283
00:15:00,680 --> 00:15:11,120
output<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> the password so you</font>

284
00:15:08,270 --> 00:15:12,770
change your<font color="#CCCCCC"> password when</font><font color="#E5E5E5"> you have</font>

285
00:15:11,120 --> 00:15:15,380
changed it<font color="#E5E5E5"> you have clicked change</font>

286
00:15:12,770 --> 00:15:17,480
<font color="#E5E5E5">password that goes out as a message</font>

287
00:15:15,380 --> 00:15:18,950
somewhere<font color="#E5E5E5"> maybe you send it to some</font>

288
00:15:17,480 --> 00:15:20,690
back-end<font color="#E5E5E5"> that actually changes the</font>

289
00:15:18,950 --> 00:15:28,180
password<font color="#E5E5E5"> here we're sending it to a</font>

290
00:15:20,690 --> 00:15:28,180
<font color="#E5E5E5">display</font><font color="#CCCCCC"> ER first so</font>

291
00:15:32,180 --> 00:15:39,880
do I have a mouse pointer<font color="#CCCCCC"> I have a mouse</font>

292
00:15:35,000 --> 00:15:43,779
pointer<font color="#E5E5E5"> and somewhere there it is</font><font color="#CCCCCC"> oh</font>

293
00:15:39,880 --> 00:15:43,779
that is too fast to see

294
00:15:44,900 --> 00:15:52,220
ah<font color="#CCCCCC"> that's gonna be too difficult</font><font color="#E5E5E5"> the</font>

295
00:15:50,660 --> 00:15:56,810
live demo here<font color="#CCCCCC"> is I click Change</font>

296
00:15:52,220 --> 00:16:00,170
Password<font color="#E5E5E5"> the image</font><font color="#CCCCCC"> changes</font><font color="#E5E5E5"> I get a</font>

297
00:15:56,810 --> 00:16:02,390
prompt and a confirmation<font color="#CCCCCC"> and I feel in</font>

298
00:16:00,170 --> 00:16:05,719
the<font color="#CCCCCC"> password</font><font color="#E5E5E5"> two times</font><font color="#CCCCCC"> I click change</font>

299
00:16:02,390 --> 00:16:07,250
<font color="#E5E5E5">and then I flip over to our console to</font>

300
00:16:05,720 --> 00:16:09,110
see that this<font color="#E5E5E5"> display er has actually</font>

301
00:16:07,250 --> 00:16:14,510
put out my password that's a debug

302
00:16:09,110 --> 00:16:17,690
output here's something trickier<font color="#E5E5E5"> we take</font>

303
00:16:14,510 --> 00:16:21,589
now this password<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I'm sorry</font><font color="#E5E5E5"> this</font>

304
00:16:17,690 --> 00:16:23,480
is<font color="#E5E5E5"> the same we</font><font color="#CCCCCC"> take the password</font><font color="#E5E5E5"> the</font>

305
00:16:21,589 --> 00:16:26,060
change password thing<font color="#CCCCCC"> and we put it into</font>

306
00:16:23,480 --> 00:16:29,630
a bigger context now<font color="#CCCCCC"> we treat this whole</font>

307
00:16:26,060 --> 00:16:34,239
thing that we saw here this is now a

308
00:16:29,630 --> 00:16:34,240
black<font color="#E5E5E5"> box in</font><font color="#CCCCCC"> a larger context</font>

309
00:16:36,880 --> 00:16:43,060
so if<font color="#CCCCCC"> I click Change Password here this</font>

310
00:16:39,850 --> 00:16:44,589
part of the<font color="#CCCCCC"> application shows</font><font color="#E5E5E5"> that box</font>

311
00:16:43,060 --> 00:16:47,859
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> saw in the previous example</font><font color="#E5E5E5"> and</font>

312
00:16:44,589 --> 00:16:54,009
<font color="#CCCCCC">I</font><font color="#E5E5E5"> can change password I click</font><font color="#CCCCCC"> OK it goes</font>

313
00:16:47,860 --> 00:16:58,089
back<font color="#E5E5E5"> to looking</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this that's that's</font>

314
00:16:54,009 --> 00:17:00,399
it<font color="#CCCCCC"> I think you have</font><font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> of</font>

315
00:16:58,089 --> 00:17:02,769
stuff to<font color="#E5E5E5"> take in but I think</font><font color="#CCCCCC"> maybe you</font>

316
00:17:00,399 --> 00:17:07,500
<font color="#E5E5E5">have some general idea of you</font><font color="#CCCCCC"> can</font>

317
00:17:02,769 --> 00:17:10,569
actually<font color="#E5E5E5"> do things with these graphs and</font>

318
00:17:07,500 --> 00:17:12,849
they allow you<font color="#E5E5E5"> to put together different</font>

319
00:17:10,569 --> 00:17:15,369
components<font color="#E5E5E5"> without changing the</font>

320
00:17:12,849 --> 00:17:20,349
components themselves<font color="#CCCCCC"> and you can do</font><font color="#E5E5E5"> it</font>

321
00:17:15,369 --> 00:17:23,770
in racket and I haven't<font color="#E5E5E5"> used racket</font>

322
00:17:20,349 --> 00:17:25,418
<font color="#CCCCCC">before this year</font><font color="#E5E5E5"> what has been a</font><font color="#CCCCCC"> really</font>

323
00:17:23,770 --> 00:17:27,250
great<font color="#E5E5E5"> experience the racket users</font>

324
00:17:25,419 --> 00:17:27,730
mailing<font color="#E5E5E5"> list it's an excellent place</font><font color="#CCCCCC"> to</font>

325
00:17:27,250 --> 00:17:31,090
be

326
00:17:27,730 --> 00:17:34,510
you see<font color="#E5E5E5"> people asking total newbie</font>

327
00:17:31,090 --> 00:17:36,070
questions and the professor that<font color="#CCCCCC"> was one</font>

328
00:17:34,510 --> 00:17:37,870
of<font color="#CCCCCC"> the people that created this thing</font>

329
00:17:36,070 --> 00:17:40,360
comes back<font color="#E5E5E5"> with an answer</font>

330
00:17:37,870 --> 00:17:42,010
oh I<font color="#CCCCCC"> changed this</font><font color="#E5E5E5"> I wrote a syntax that</font>

331
00:17:40,360 --> 00:17:43,719
changes the language<font color="#E5E5E5"> a bit to do what</font>

332
00:17:42,010 --> 00:17:49,690
you like maybe maybe that's what you

333
00:17:43,720 --> 00:17:52,390
<font color="#E5E5E5">need</font><font color="#CCCCCC"> before we</font><font color="#E5E5E5"> started working on this</font>

334
00:17:49,690 --> 00:17:54,909
this wallet<font color="#E5E5E5"> I did some back-end work I</font>

335
00:17:52,390 --> 00:17:56,919
created racket to<font color="#CCCCCC"> Nick's which takes</font>

336
00:17:54,909 --> 00:18:00,460
racket packages and puts them makes

337
00:17:56,919 --> 00:18:02,140
<font color="#CCCCCC">Nick's derivations of them</font><font color="#E5E5E5"> and we told</font>

338
00:18:00,460 --> 00:18:06,220
racket users this hey<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> working on</font>

339
00:18:02,140 --> 00:18:09,669
this<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> and I immediately got</font><font color="#E5E5E5"> a PR</font>

340
00:18:06,220 --> 00:18:10,990
from one of the authors<font color="#CCCCCC"> of racket</font><font color="#E5E5E5"> like</font>

341
00:18:09,669 --> 00:18:12,640
hey I looked at<font color="#E5E5E5"> your code and I've</font>

342
00:18:10,990 --> 00:18:15,130
reformatted it the way that<font color="#CCCCCC"> we like to</font>

343
00:18:12,640 --> 00:18:18,159
<font color="#E5E5E5">see code in racket because</font><font color="#CCCCCC"> I was writing</font>

344
00:18:15,130 --> 00:18:21,240
<font color="#E5E5E5">in scheme as I learned it from the</font>

345
00:18:18,159 --> 00:18:23,470
wizard<font color="#E5E5E5"> book</font><font color="#CCCCCC"> 10 or</font><font color="#E5E5E5"> 15</font><font color="#CCCCCC"> years earlier so</font>

346
00:18:21,240 --> 00:18:25,480
<font color="#CCCCCC">that was really</font><font color="#E5E5E5"> cool you start playing</font>

347
00:18:23,470 --> 00:18:27,190
<font color="#CCCCCC">with the language and one of the really</font>

348
00:18:25,480 --> 00:18:32,080
important guys comes in hey I<font color="#E5E5E5"> fixed your</font>

349
00:18:27,190 --> 00:18:33,850
thing<font color="#CCCCCC"> wow that was really</font><font color="#E5E5E5"> cool any</font>

350
00:18:32,080 --> 00:18:38,330
questions more<font color="#E5E5E5"> about flow-based</font>

351
00:18:33,850 --> 00:18:42,269
programming or<font color="#E5E5E5"> racket and</font>

352
00:18:38,330 --> 00:18:43,939
sorry you can use this in<font color="#CCCCCC"> real life</font>

353
00:18:42,269 --> 00:18:46,139
you'll<font color="#E5E5E5"> have to tolerate</font><font color="#CCCCCC"> that the syntax</font>

354
00:18:43,940 --> 00:18:48,480
<font color="#E5E5E5">looks like this because we've been</font>

355
00:18:46,139 --> 00:18:52,019
focusing<font color="#E5E5E5"> on getting things working and</font>

356
00:18:48,480 --> 00:18:54,749
having<font color="#E5E5E5"> actual</font><font color="#CCCCCC"> front-end examples</font><font color="#E5E5E5"> and the</font>

357
00:18:52,019 --> 00:18:58,379
wallet<font color="#CCCCCC"> I showed here this is a mock</font>

358
00:18:54,749 --> 00:19:00,330
example<font color="#E5E5E5"> from a couple of months</font><font color="#CCCCCC"> ago the</font>

359
00:18:58,379 --> 00:19:02,519
code looks a bit different<font color="#CCCCCC"> now and we</font>

360
00:19:00,330 --> 00:19:07,799
have an actual<font color="#CCCCCC"> back-end attached to</font>

361
00:19:02,519 --> 00:19:14,070
<font color="#CCCCCC">dustings but yeah you can totally use</font>

362
00:19:07,799 --> 00:19:15,809
this<font color="#E5E5E5"> talk to us to find out how the</font>

363
00:19:14,070 --> 00:19:22,109
documentation is not exactly where the

364
00:19:15,809 --> 00:19:23,789
code is documentation<font color="#E5E5E5"> is here so the</font>

365
00:19:22,109 --> 00:19:25,230
last time we we talked about<font color="#E5E5E5"> this we</font>

366
00:19:23,789 --> 00:19:26,908
said<font color="#CCCCCC"> our more documentation he's coming</font>

367
00:19:25,230 --> 00:19:29,039
check back in six months<font color="#CCCCCC"> and then I had</font>

368
00:19:26,909 --> 00:19:30,779
to<font color="#E5E5E5"> correct myself like okay check back</font>

369
00:19:29,039 --> 00:19:36,570
in six months<font color="#CCCCCC"> and please start writing</font>

370
00:19:30,779 --> 00:19:39,210
<font color="#E5E5E5">documentation for us but like you saw we</font>

371
00:19:36,570 --> 00:19:44,450
have running<font color="#E5E5E5"> code and and it can do</font>

372
00:19:39,210 --> 00:19:44,450
stuff yeah

373
00:19:45,650 --> 00:19:50,600
yes<font color="#E5E5E5"> and that's why I just arrived here</font>

374
00:19:48,680 --> 00:19:55,820
<font color="#CCCCCC">last minute because I was</font><font color="#E5E5E5"> trying to get</font>

375
00:19:50,600 --> 00:19:59,959
<font color="#E5E5E5">it to work for the demo we</font><font color="#CCCCCC"> have a graph</font>

376
00:19:55,820 --> 00:20:01,550
editor<font color="#CCCCCC"> but yeah you need to</font><font color="#E5E5E5"> set up</font>

377
00:19:59,960 --> 00:20:03,350
<font color="#E5E5E5">everything just right so that everything</font>

378
00:20:01,550 --> 00:20:05,000
finds<font color="#CCCCCC"> these classes and stuff so I</font>

379
00:20:03,350 --> 00:20:07,070
thought<font color="#E5E5E5"> I'd had it working but then all</font>

380
00:20:05,000 --> 00:20:10,220
now<font color="#E5E5E5"> when I load this it tries to load</font>

381
00:20:07,070 --> 00:20:14,360
some some widgets<font color="#E5E5E5"> and everything crashed</font>

382
00:20:10,220 --> 00:20:18,429
and<font color="#E5E5E5"> then I decided to skip that part</font><font color="#CCCCCC"> but</font>

383
00:20:14,360 --> 00:20:21,800
<font color="#E5E5E5">you can see you right in the the text</font>

384
00:20:18,429 --> 00:20:23,330
the<font color="#CCCCCC"> lispy language that you saw and then</font>

385
00:20:21,800 --> 00:20:27,500
you when you load it in the<font color="#E5E5E5"> graph editor</font>

386
00:20:23,330 --> 00:20:28,939
<font color="#CCCCCC">it</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> graphviz</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> 2 to layout these</font>

387
00:20:27,500 --> 00:20:32,710
things and you get<font color="#E5E5E5"> your boxes</font><font color="#CCCCCC"> and arrows</font>

388
00:20:28,940 --> 00:20:45,220
<font color="#E5E5E5">and you can edit things there as well</font>

389
00:20:32,710 --> 00:20:45,220
yep the graph

390
00:20:46,870 --> 00:21:00,530
yeah so I put this in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> module file</font>

391
00:20:54,890 --> 00:21:06,380
called something and then that's my my

392
00:21:00,530 --> 00:21:08,149
component and here when I say node<font color="#CCCCCC"> VP</font>

393
00:21:06,380 --> 00:21:12,260
GUI vertical<font color="#CCCCCC"> panet</font>

394
00:21:08,150 --> 00:21:14,750
that's such an agent or a graph so I

395
00:21:12,260 --> 00:21:16,610
give this<font color="#E5E5E5"> I give this code the name</font>

396
00:21:14,750 --> 00:21:18,230
<font color="#CCCCCC">displayer I call it</font><font color="#E5E5E5"> this player dot</font>

397
00:21:16,610 --> 00:21:21,350
racket<font color="#E5E5E5"> I put it in the right directory</font>

398
00:21:18,230 --> 00:21:23,480
<font color="#E5E5E5">and what happens here three lines from</font>

399
00:21:21,350 --> 00:21:26,300
the end it says node display password

400
00:21:23,480 --> 00:21:39,740
<font color="#CCCCCC">this player and display</font><font color="#E5E5E5"> are there that</font>

401
00:21:26,300 --> 00:21:41,510
loads<font color="#E5E5E5"> the code on the previous page when</font>

402
00:21:39,740 --> 00:21:43,220
we<font color="#E5E5E5"> put together the graphs we use</font>

403
00:21:41,510 --> 00:21:52,550
strings to name things because we just

404
00:21:43,220 --> 00:21:54,050
do this<font color="#E5E5E5"> is no you name the node and you</font>

405
00:21:52,550 --> 00:21:56,270
can have several<font color="#E5E5E5"> nodes that use the same</font>

406
00:21:54,050 --> 00:21:58,700
component and they are<font color="#CCCCCC"> independent of</font>

407
00:21:56,270 --> 00:22:00,500
each<font color="#CCCCCC"> other</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's why I define the</font>

408
00:21:58,700 --> 00:22:03,650
node I say I have a node<font color="#CCCCCC"> that is named</font>

409
00:22:00,500 --> 00:22:06,290
an arbitrary name and it<font color="#E5E5E5"> uses the</font>

410
00:22:03,650 --> 00:22:12,770
component which has<font color="#E5E5E5"> a name</font><font color="#CCCCCC"> that needs to</font>

411
00:22:06,290 --> 00:22:16,809
match by name and<font color="#E5E5E5"> using rackets</font><font color="#CCCCCC"> way of</font>

412
00:22:12,770 --> 00:22:16,809
looking it does a dynamic require on it

413
00:22:17,710 --> 00:22:23,090
yeah<font color="#E5E5E5"> the names the names of the</font>

414
00:22:20,540 --> 00:22:26,450
components<font color="#CCCCCC"> are symbols</font><font color="#E5E5E5"> and the names of</font>

415
00:22:23,090 --> 00:22:33,189
the agents<font color="#E5E5E5"> the instances</font><font color="#CCCCCC"> of the</font>

416
00:22:26,450 --> 00:22:33,190
components are strings yep

417
00:22:35,850 --> 00:22:49,529
yeah we got three more<font color="#E5E5E5"> minutes yeah in</font>

418
00:22:45,690 --> 00:22:51,799
this presentation nothing but yeah I can

419
00:22:49,529 --> 00:22:54,750
<font color="#E5E5E5">mention some more things about racket</font>

420
00:22:51,799 --> 00:22:59,450
<font color="#CCCCCC">one</font><font color="#E5E5E5"> issue with racket has been</font>

421
00:22:54,750 --> 00:23:02,730
performance<font color="#E5E5E5"> sadly</font><font color="#CCCCCC"> when we load the whole</font>

422
00:22:59,450 --> 00:23:06,649
wallet<font color="#CCCCCC"> graph</font><font color="#E5E5E5"> it takes several seconds</font>

423
00:23:02,730 --> 00:23:09,720
<font color="#E5E5E5">for</font><font color="#CCCCCC"> it to come up that's because the</font>

424
00:23:06,649 --> 00:23:12,479
scheduler<font color="#CCCCCC"> that runs the graph is also a</font>

425
00:23:09,720 --> 00:23:15,779
graph so there's a<font color="#E5E5E5"> bootstrap process</font>

426
00:23:12,480 --> 00:23:18,419
<font color="#CCCCCC">going on there and when it talks to</font>

427
00:23:15,779 --> 00:23:20,549
itself<font color="#CCCCCC"> while loading</font><font color="#E5E5E5"> these things maybe</font>

428
00:23:18,419 --> 00:23:22,740
half the<font color="#CCCCCC"> time is spent actually loading</font>

429
00:23:20,549 --> 00:23:24,690
and and telling racket dynamic require

430
00:23:22,740 --> 00:23:27,120
this and that<font color="#E5E5E5"> and half the time is</font>

431
00:23:24,690 --> 00:23:30,620
sending messages<font color="#CCCCCC"> using the async ports</font>

432
00:23:27,120 --> 00:23:33,209
<font color="#E5E5E5">in brackets I profile it and the async</font>

433
00:23:30,620 --> 00:23:38,219
<font color="#E5E5E5">ports really take a lot</font><font color="#CCCCCC"> of time in</font>

434
00:23:33,210 --> 00:23:40,649
racket<font color="#E5E5E5"> so we don't have like right now</font>

435
00:23:38,220 --> 00:23:42,899
<font color="#E5E5E5">the racket part and the rest part are</font>

436
00:23:40,649 --> 00:23:45,090
<font color="#E5E5E5">pretty much separate things we have a</font>

437
00:23:42,899 --> 00:23:47,539
<font color="#E5E5E5">rough fractal</font><font color="#CCCCCC"> IDE and we have a</font><font color="#E5E5E5"> racket</font>

438
00:23:45,090 --> 00:23:51,918
<font color="#CCCCCC">fractal ID but once we put them</font><font color="#E5E5E5"> together</font>

439
00:23:47,539 --> 00:23:53,908
<font color="#E5E5E5">if some part of your racket thing has</font>

440
00:23:51,919 --> 00:23:55,799
performance issues<font color="#CCCCCC"> you can just</font>

441
00:23:53,909 --> 00:23:57,870
reimplemented in rust<font color="#E5E5E5"> and then you</font>

442
00:23:55,799 --> 00:23:59,250
insert<font color="#CCCCCC"> that into the</font><font color="#E5E5E5"> graph and the rest</font>

443
00:23:57,870 --> 00:24:04,320
of<font color="#E5E5E5"> the graph won't know this is just a</font>

444
00:23:59,250 --> 00:24:08,470
sub graph<font color="#E5E5E5"> in this black box thank you</font>

445
00:24:04,320 --> 00:24:08,470
[Applause]

