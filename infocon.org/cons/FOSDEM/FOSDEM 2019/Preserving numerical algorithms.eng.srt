1
00:00:04,730 --> 00:00:12,980
welcome everyone<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I like I would like</font>

2
00:00:11,480 --> 00:00:17,840
<font color="#E5E5E5">to speak to you about the preservation</font>

3
00:00:12,980 --> 00:00:19,580
<font color="#CCCCCC">of numerical algorithms</font><font color="#E5E5E5"> and first I</font>

4
00:00:17,840 --> 00:00:23,390
<font color="#E5E5E5">would like</font><font color="#CCCCCC"> to tell you how I</font><font color="#E5E5E5"> got into</font>

5
00:00:19,580 --> 00:00:26,869
this project<font color="#E5E5E5"> like a physicist not a</font>

6
00:00:23,390 --> 00:00:30,500
software developer<font color="#E5E5E5"> not a hardware</font>

7
00:00:26,870 --> 00:00:39,530
<font color="#E5E5E5">developer and in my work I use numerical</font>

8
00:00:30,500 --> 00:00:41,750
methods<font color="#CCCCCC"> to solve</font><font color="#E5E5E5"> equations of physics</font><font color="#CCCCCC"> it</font>

9
00:00:39,530 --> 00:00:44,480
did happen<font color="#E5E5E5"> a couple of times</font><font color="#CCCCCC"> to me that</font>

10
00:00:41,750 --> 00:00:47,570
I was looking<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> method to</font><font color="#E5E5E5"> solve a</font>

11
00:00:44,480 --> 00:00:50,629
certain<font color="#E5E5E5"> kind of problem it was in a</font>

12
00:00:47,570 --> 00:00:53,989
paper in<font color="#E5E5E5"> a scientific</font><font color="#CCCCCC"> journal and</font><font color="#E5E5E5"> they</font>

13
00:00:50,630 --> 00:00:59,239
said that the code<font color="#CCCCCC"> is available to</font>

14
00:00:53,989 --> 00:01:02,468
interested<font color="#CCCCCC"> people the this the</font><font color="#E5E5E5"> age the</font>

15
00:00:59,239 --> 00:01:07,340
<font color="#CCCCCC">date of these papers varied from</font><font color="#E5E5E5"> the</font>

16
00:01:02,469 --> 00:01:09,440
1970s till now and it happened a couple

17
00:01:07,340 --> 00:01:12,409
of<font color="#E5E5E5"> times</font><font color="#CCCCCC"> that I wrote an email to the</font>

18
00:01:09,440 --> 00:01:14,030
address<font color="#CCCCCC"> given there or if other papers</font>

19
00:01:12,409 --> 00:01:16,370
there was no email<font color="#E5E5E5"> address of course</font>

20
00:01:14,030 --> 00:01:19,390
<font color="#E5E5E5">just mail address but</font><font color="#CCCCCC"> you can google the</font>

21
00:01:16,370 --> 00:01:24,380
name<font color="#E5E5E5"> of the person you like an email</font>

22
00:01:19,390 --> 00:01:27,290
great and it<font color="#E5E5E5"> bounces back over there is</font>

23
00:01:24,380 --> 00:01:32,270
a web address<font color="#E5E5E5"> you go to it</font><font color="#CCCCCC"> and it seems</font>

24
00:01:27,290 --> 00:01:34,549
<font color="#E5E5E5">that the head of that research group who</font>

25
00:01:32,270 --> 00:01:38,000
came up<font color="#CCCCCC"> with the algorithm</font><font color="#E5E5E5"> or retired or</font>

26
00:01:34,549 --> 00:01:41,000
<font color="#CCCCCC">moved to</font><font color="#E5E5E5"> another Institute and the next</font>

27
00:01:38,000 --> 00:01:46,460
time they<font color="#CCCCCC"> redesign</font><font color="#E5E5E5"> the website</font><font color="#CCCCCC"> the code</font>

28
00:01:41,000 --> 00:01:49,970
was gone so<font color="#CCCCCC"> I will talk to</font><font color="#E5E5E5"> you a little</font>

29
00:01:46,460 --> 00:01:52,280
why it might be<font color="#E5E5E5"> important</font><font color="#CCCCCC"> to preserve</font><font color="#E5E5E5"> it</font>

30
00:01:49,970 --> 00:01:56,259
<font color="#E5E5E5">if there was a paper about it the</font>

31
00:01:52,280 --> 00:01:56,259
algorithm is<font color="#E5E5E5"> there you would think</font>

32
00:01:58,460 --> 00:02:05,830
and numerical mathematics obviously has

33
00:02:01,520 --> 00:02:08,449
a long history<font color="#E5E5E5"> far longer than computers</font>

34
00:02:05,830 --> 00:02:10,520
so the mathematical most of the

35
00:02:08,449 --> 00:02:13,880
mathematical background was worked out

36
00:02:10,520 --> 00:02:16,340
before the computer age but how they

37
00:02:13,880 --> 00:02:20,660
<font color="#E5E5E5">describe the algorithms was aimed at</font>

38
00:02:16,340 --> 00:02:23,900
hand computation<font color="#E5E5E5"> so their computer was</font>

39
00:02:20,660 --> 00:02:29,390
<font color="#CCCCCC">not an electronic</font><font color="#E5E5E5"> device it was</font><font color="#CCCCCC"> a job</font>

40
00:02:23,900 --> 00:02:33,880
title<font color="#CCCCCC"> so when you describe an algorithm</font>

41
00:02:29,390 --> 00:02:36,708
<font color="#CCCCCC">you described it to a person and the</font>

42
00:02:33,880 --> 00:02:39,170
person is of course far more

43
00:02:36,709 --> 00:02:42,860
intelligence than any machine<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

44
00:02:39,170 --> 00:02:46,100
don't have there are a lot of<font color="#E5E5E5"> things you</font>

45
00:02:42,860 --> 00:02:49,459
don't<font color="#E5E5E5"> have to care</font><font color="#CCCCCC"> about they worked out</font>

46
00:02:46,100 --> 00:02:51,200
lots and lots of<font color="#CCCCCC"> algorithms far before</font>

47
00:02:49,459 --> 00:02:54,440
the computer age so for example the

48
00:02:51,200 --> 00:02:58,399
first Fourier transform was invented by

49
00:02:54,440 --> 00:03:02,120
Gauss and reinvented by a number<font color="#CCCCCC"> of</font>

50
00:02:58,400 --> 00:03:04,010
<font color="#CCCCCC">people</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> Lance was invented it before</font>

51
00:03:02,120 --> 00:03:06,320
Cooley and<font color="#CCCCCC"> talkie he just did not</font><font color="#E5E5E5"> have a</font>

52
00:03:04,010 --> 00:03:08,510
<font color="#CCCCCC">computer to actually</font><font color="#E5E5E5"> implement and run</font>

53
00:03:06,320 --> 00:03:11,329
it<font color="#E5E5E5"> methods to solve differential</font>

54
00:03:08,510 --> 00:03:16,310
equations<font color="#E5E5E5"> were worked out by Euler or</font>

55
00:03:11,330 --> 00:03:19,790
<font color="#CCCCCC">Barranca and kutah in the late 19th</font><font color="#E5E5E5"> and</font>

56
00:03:16,310 --> 00:03:22,820
early 20th century<font color="#E5E5E5"> but all these</font>

57
00:03:19,790 --> 00:03:25,910
descriptions<font color="#E5E5E5"> aimed at human computers</font>

58
00:03:22,820 --> 00:03:28,579
you will<font color="#E5E5E5"> expect them to think you can</font>

59
00:03:25,910 --> 00:03:31,519
expect them<font color="#CCCCCC"> to realize exceptional</font>

60
00:03:28,580 --> 00:03:33,680
<font color="#E5E5E5">recognized exceptional cases or if</font>

61
00:03:31,519 --> 00:03:35,959
that's it there<font color="#CCCCCC"> is a case of</font><font color="#E5E5E5"> loss of</font>

62
00:03:33,680 --> 00:03:37,910
<font color="#E5E5E5">significance</font><font color="#CCCCCC"> you can expect them to</font>

63
00:03:35,959 --> 00:03:40,150
realize<font color="#CCCCCC"> that</font><font color="#E5E5E5"> oh I did not</font><font color="#CCCCCC"> calculate</font>

64
00:03:37,910 --> 00:03:43,790
<font color="#E5E5E5">enough digits let's go back fix it</font>

65
00:03:40,150 --> 00:03:47,209
calculate with longer numbers<font color="#E5E5E5"> computers</font>

66
00:03:43,790 --> 00:03:51,760
don't do that the computer<font color="#E5E5E5"> age started</font>

67
00:03:47,209 --> 00:03:54,640
around<font color="#E5E5E5"> my late 1940s</font><font color="#CCCCCC"> and from that on</font>

68
00:03:51,760 --> 00:03:58,730
<font color="#E5E5E5">everyone has to communicate their</font>

69
00:03:54,640 --> 00:04:03,920
algorithms to humans and computers<font color="#E5E5E5"> at</font>

70
00:03:58,730 --> 00:04:05,959
the<font color="#CCCCCC"> same time and</font><font color="#E5E5E5"> for machines obviously</font>

71
00:04:03,920 --> 00:04:09,530
nothing can be left<font color="#CCCCCC"> to the reader the</font>

72
00:04:05,959 --> 00:04:10,870
<font color="#CCCCCC">machine will very diligently follow what</font>

73
00:04:09,530 --> 00:04:15,760
you

74
00:04:10,870 --> 00:04:18,548
<font color="#E5E5E5">program if your program</font><font color="#CCCCCC"> has mistakes or</font>

75
00:04:15,760 --> 00:04:21,120
the tonight<font color="#CCCCCC"> an exceptional case what you</font>

76
00:04:18,548 --> 00:04:25,989
will get<font color="#CCCCCC"> is</font><font color="#E5E5E5"> garbage in and garbage out</font>

77
00:04:21,120 --> 00:04:28,389
so that's the reason<font color="#CCCCCC"> why the if there is</font>

78
00:04:25,990 --> 00:04:30,610
a good<font color="#E5E5E5"> computer program that's the</font><font color="#CCCCCC"> most</font>

79
00:04:28,389 --> 00:04:33,940
precise description of<font color="#E5E5E5"> an augury and</font>

80
00:04:30,610 --> 00:04:37,389
that's possible at<font color="#E5E5E5"> least for that</font>

81
00:04:33,940 --> 00:04:39,550
<font color="#E5E5E5">machine on which T and that compiler if</font>

82
00:04:37,389 --> 00:04:43,240
it's<font color="#E5E5E5"> written up computing language where</font>

83
00:04:39,550 --> 00:04:49,810
the author wrote it if there is<font color="#E5E5E5"> nothing</font>

84
00:04:43,240 --> 00:04:52,960
left<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> reader that that if you get</font>

85
00:04:49,810 --> 00:04:54,730
<font color="#CCCCCC">your</font><font color="#E5E5E5"> algorithm in that form you have</font><font color="#CCCCCC"> the</font>

86
00:04:52,960 --> 00:04:57,280
chance<font color="#CCCCCC"> to run it it might</font><font color="#E5E5E5"> solve your</font>

87
00:04:54,730 --> 00:04:59,230
problem or if you have to<font color="#E5E5E5"> really</font>

88
00:04:57,280 --> 00:05:05,469
implement it for<font color="#CCCCCC"> a modern machine</font><font color="#E5E5E5"> in a</font>

89
00:04:59,230 --> 00:05:08,470
modern language<font color="#E5E5E5"> the way the best way</font><font color="#CCCCCC"> to</font>

90
00:05:05,470 --> 00:05:11,050
test if you can<font color="#CCCCCC"> trust it</font><font color="#E5E5E5"> is to run your</font>

91
00:05:08,470 --> 00:05:13,660
version run the<font color="#E5E5E5"> original version and</font>

92
00:05:11,050 --> 00:05:16,479
compare the results<font color="#CCCCCC"> if you come up</font><font color="#E5E5E5"> with</font>

93
00:05:13,660 --> 00:05:22,810
<font color="#E5E5E5">enough test</font><font color="#CCCCCC"> cases then you</font><font color="#E5E5E5"> can be more</font>

94
00:05:16,479 --> 00:05:26,590
and<font color="#CCCCCC"> more sure that it works so this</font>

95
00:05:22,810 --> 00:05:28,000
<font color="#E5E5E5">project</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> into it I</font><font color="#E5E5E5"> think I did not</font>

96
00:05:26,590 --> 00:05:31,599
<font color="#E5E5E5">tell the</font><font color="#CCCCCC"> answer I was looking</font><font color="#E5E5E5"> for a</font>

97
00:05:28,000 --> 00:05:34,390
certain algorithms<font color="#CCCCCC"> Google did did</font><font color="#E5E5E5"> not</font>

98
00:05:31,600 --> 00:05:36,760
find it Google<font color="#CCCCCC"> did if there is someone</font>

99
00:05:34,390 --> 00:05:39,750
<font color="#CCCCCC">who is actually</font><font color="#E5E5E5"> trying to preserve</font>

100
00:05:36,760 --> 00:05:45,130
numerical algorithms and I found that

101
00:05:39,750 --> 00:05:46,570
the users of the Arkham programming

102
00:05:45,130 --> 00:05:48,940
language that's<font color="#E5E5E5"> mostly used for</font>

103
00:05:46,570 --> 00:05:52,080
statistics have run into<font color="#E5E5E5"> the same</font>

104
00:05:48,940 --> 00:05:55,000
problem and they came up with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> project</font>

105
00:05:52,080 --> 00:05:57,370
which aims<font color="#E5E5E5"> to preserve numerical</font>

106
00:05:55,000 --> 00:06:00,190
algorithms<font color="#E5E5E5"> and not just preserve them</font>

107
00:05:57,370 --> 00:06:03,460
but to find<font color="#E5E5E5"> they're the ones that</font><font color="#CCCCCC"> are</font>

108
00:06:00,190 --> 00:06:08,260
<font color="#CCCCCC">being</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the our interpreter come</font>

109
00:06:03,460 --> 00:06:12,849
from well and what is the<font color="#E5E5E5"> original one</font>

110
00:06:08,260 --> 00:06:15,610
<font color="#CCCCCC">and if there is doubt if it's possible</font>

111
00:06:12,850 --> 00:06:18,789
<font color="#E5E5E5">to run the</font><font color="#CCCCCC"> original one and compare the</font>

112
00:06:15,610 --> 00:06:23,950
results<font color="#CCCCCC"> the initial</font><font color="#E5E5E5"> idea for this</font>

113
00:06:18,789 --> 00:06:25,810
project came<font color="#E5E5E5"> from from a bug report</font>

114
00:06:23,950 --> 00:06:30,310
that this<font color="#E5E5E5"> programming</font><font color="#CCCCCC"> language has a</font>

115
00:06:25,810 --> 00:06:33,910
built-in optimization software for

116
00:06:30,310 --> 00:06:37,690
unconstrained minimization<font color="#E5E5E5"> and someone</font>

117
00:06:33,910 --> 00:06:42,850
reported a<font color="#E5E5E5"> bug in that code</font><font color="#CCCCCC"> so they</font>

118
00:06:37,690 --> 00:06:46,540
could<font color="#E5E5E5"> come</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> a function in</font>

119
00:06:42,850 --> 00:06:49,600
multiple variables<font color="#CCCCCC"> and see</font><font color="#E5E5E5"> that this</font>

120
00:06:46,540 --> 00:06:52,270
minimizer<font color="#CCCCCC"> does not converge it stores</font>

121
00:06:49,600 --> 00:06:56,170
lots and lots of steps<font color="#E5E5E5"> and then find</font>

122
00:06:52,270 --> 00:07:00,159
something<font color="#CCCCCC"> which is not</font><font color="#E5E5E5"> a minimum and if</font>

123
00:06:56,170 --> 00:07:06,520
you look at the source<font color="#E5E5E5"> of this code the</font>

124
00:07:00,160 --> 00:07:09,880
first<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> vines is remarks</font><font color="#E5E5E5"> so</font>

125
00:07:06,520 --> 00:07:12,640
copyright message and<font color="#E5E5E5"> that this has been</font>

126
00:07:09,880 --> 00:07:15,550
translated<font color="#E5E5E5"> by F to see</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Fortran</font>

127
00:07:12,640 --> 00:07:19,090
version of some code which<font color="#E5E5E5"> is not</font>

128
00:07:15,550 --> 00:07:21,900
<font color="#E5E5E5">included you start looking for it</font><font color="#CCCCCC"> you</font>

129
00:07:19,090 --> 00:07:25,030
find many Fortran versions of the code

130
00:07:21,900 --> 00:07:27,729
<font color="#CCCCCC">you want</font><font color="#E5E5E5"> to know if the</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> came from</font>

131
00:07:25,030 --> 00:07:31,440
the Fortran<font color="#E5E5E5"> ver version from translating</font>

132
00:07:27,730 --> 00:07:33,760
<font color="#E5E5E5">it with f - C</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> C or from the later</font>

133
00:07:31,440 --> 00:07:41,590
<font color="#E5E5E5">editing's that people did to make it</font>

134
00:07:33,760 --> 00:07:43,420
<font color="#CCCCCC">more look like modern c program so in</font>

135
00:07:41,590 --> 00:07:45,310
such a case<font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> find if the</font>

136
00:07:43,420 --> 00:07:47,860
original<font color="#E5E5E5"> version of the code is still</font>

137
00:07:45,310 --> 00:07:50,890
<font color="#CCCCCC">available</font><font color="#E5E5E5"> is it in a</font><font color="#CCCCCC"> machine readable</font>

138
00:07:47,860 --> 00:07:53,980
<font color="#E5E5E5">code there</font><font color="#CCCCCC"> is it published in the form</font>

139
00:07:50,890 --> 00:08:01,960
of<font color="#E5E5E5"> a printed listing has someone</font><font color="#CCCCCC"> retyped</font>

140
00:07:53,980 --> 00:08:04,450
it or<font color="#E5E5E5"> and translated it from multiple</font>

141
00:08:01,960 --> 00:08:07,359
languages and<font color="#E5E5E5"> some numerical algorithm a</font>

142
00:08:04,450 --> 00:08:09,880
very long history<font color="#E5E5E5"> so somewhere first</font>

143
00:08:07,360 --> 00:08:12,850
written<font color="#E5E5E5"> in Fortran might have been</font>

144
00:08:09,880 --> 00:08:17,560
<font color="#CCCCCC">translated to C by F to see them they</font>

145
00:08:12,850 --> 00:08:20,950
might<font color="#E5E5E5"> have been edited manually and most</font>

146
00:08:17,560 --> 00:08:24,040
numerical methods were published in<font color="#CCCCCC"> - in</font>

147
00:08:20,950 --> 00:08:28,240
one of the<font color="#CCCCCC"> two</font><font color="#E5E5E5"> oiled programming</font>

148
00:08:24,040 --> 00:08:32,110
languages either Fortran or<font color="#CCCCCC"> Agua</font><font color="#E5E5E5"> 60 in</font>

149
00:08:28,240 --> 00:08:34,570
the<font color="#CCCCCC"> case of Agua 60 it was not a very</font>

150
00:08:32,110 --> 00:08:37,719
<font color="#E5E5E5">successful language from a commercial</font>

151
00:08:34,570 --> 00:08:41,319
point of view<font color="#CCCCCC"> so there were</font>

152
00:08:37,719 --> 00:08:44,100
for many computers there was no compiler

153
00:08:41,318 --> 00:08:45,969
available<font color="#E5E5E5"> even if there was warning</font>

154
00:08:44,100 --> 00:08:49,600
available it might have<font color="#E5E5E5"> been not very</font>

155
00:08:45,970 --> 00:08:52,589
<font color="#E5E5E5">efficient so people did often</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> the</font>

156
00:08:49,600 --> 00:08:58,300
manual translations to other languages

157
00:08:52,589 --> 00:09:01,329
<font color="#E5E5E5">and every time you touch the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> it's a</font>

158
00:08:58,300 --> 00:09:03,459
possible source<font color="#E5E5E5"> of errors so it would be</font>

159
00:09:01,329 --> 00:09:06,250
<font color="#E5E5E5">very nice</font><font color="#CCCCCC"> if in such cases we could</font>

160
00:09:03,459 --> 00:09:14,109
<font color="#E5E5E5">compare the results with</font><font color="#CCCCCC"> the original</font>

161
00:09:06,250 --> 00:09:18,959
one there<font color="#E5E5E5"> are very many programming</font>

162
00:09:14,110 --> 00:09:22,870
languages<font color="#CCCCCC"> the first computers were</font>

163
00:09:18,959 --> 00:09:27,040
usually programmed in binary<font color="#CCCCCC"> then came</font>

164
00:09:22,870 --> 00:09:30,850
some<font color="#E5E5E5"> Auto codes which were made from one</font>

165
00:09:27,040 --> 00:09:33,849
machines<font color="#E5E5E5"> then assemblers</font><font color="#CCCCCC"> and the 1957</font>

166
00:09:30,850 --> 00:09:39,879
Fortran was<font color="#E5E5E5"> the first programming</font>

167
00:09:33,850 --> 00:09:42,040
language<font color="#CCCCCC"> that</font><font color="#E5E5E5"> became quite widespread at</font>

168
00:09:39,879 --> 00:09:49,680
that time it was<font color="#E5E5E5"> not standardized but</font>

169
00:09:42,040 --> 00:09:49,680
available for IBM machines<font color="#E5E5E5"> and later on</font>

170
00:09:50,519 --> 00:09:55,809
people<font color="#CCCCCC"> are wanted</font><font color="#E5E5E5"> to enhance on previous</font>

171
00:09:53,829 --> 00:09:59,739
languages and them came<font color="#CCCCCC"> up with newer</font>

172
00:09:55,809 --> 00:10:03,759
<font color="#CCCCCC">ones</font><font color="#E5E5E5"> so Fortran was 1957 the</font><font color="#CCCCCC"> Orgel</font>

173
00:09:59,740 --> 00:10:07,120
effort started in 1958<font color="#E5E5E5"> and that were</font>

174
00:10:03,759 --> 00:10:09,809
later versions basic which<font color="#CCCCCC"> is still</font>

175
00:10:07,120 --> 00:10:14,199
<font color="#E5E5E5">popular</font><font color="#CCCCCC"> in retrocomputing started in</font>

176
00:10:09,809 --> 00:10:15,040
1964<font color="#E5E5E5"> at that time on a university a</font>

177
00:10:14,199 --> 00:10:18,910
<font color="#CCCCCC">time-sharing</font>

178
00:10:15,040 --> 00:10:25,329
mainframe and later languages include

179
00:10:18,910 --> 00:10:28,779
<font color="#E5E5E5">Pascal a</font><font color="#CCCCCC"> prpr 1 C C++ Python so there</font>

180
00:10:25,329 --> 00:10:32,170
are so many<font color="#E5E5E5"> languages with all code it's</font>

181
00:10:28,779 --> 00:10:36,370
an important questions<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can still</font>

182
00:10:32,170 --> 00:10:39,250
run them<font color="#E5E5E5"> on a PC for</font><font color="#CCCCCC"> at least four the</font>

183
00:10:36,370 --> 00:10:43,029
goal of comparing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> results or for</font>

184
00:10:39,250 --> 00:10:46,029
<font color="#E5E5E5">actually using the programs or finding</font>

185
00:10:43,029 --> 00:10:49,240
bugs<font color="#E5E5E5"> if they were there in the</font><font color="#CCCCCC"> original</font>

186
00:10:46,029 --> 00:10:51,580
<font color="#E5E5E5">one and in the case of</font><font color="#CCCCCC"> numerical</font>

187
00:10:49,240 --> 00:10:54,880
software<font color="#CCCCCC"> an additional difficulty my</font>

188
00:10:51,580 --> 00:10:57,070
<font color="#E5E5E5">be that you might not even know what</font>

189
00:10:54,880 --> 00:11:03,280
computer the original program was

190
00:10:57,070 --> 00:11:09,130
<font color="#E5E5E5">written for and computers before 1985 or</font>

191
00:11:03,280 --> 00:11:13,240
some<font color="#CCCCCC"> even after that had quite</font><font color="#E5E5E5"> variety</font>

192
00:11:09,130 --> 00:11:16,990
for<font color="#E5E5E5"> floating-point numbers so even if</font>

193
00:11:13,240 --> 00:11:21,250
you can run the language you might<font color="#E5E5E5"> have</font>

194
00:11:16,990 --> 00:11:26,190
to<font color="#E5E5E5"> think about what it means</font><font color="#CCCCCC"> by a real</font>

195
00:11:21,250 --> 00:11:28,960
<font color="#CCCCCC">number</font><font color="#E5E5E5"> and what follows I will have a</font>

196
00:11:26,190 --> 00:11:31,150
still history and motivation a quick

197
00:11:28,960 --> 00:11:35,220
look at the programming languages they

198
00:11:31,150 --> 00:11:41,430
use<font color="#E5E5E5"> they use in mathematics or numerical</font>

199
00:11:35,220 --> 00:11:47,350
calculations so the first one is Fortran

200
00:11:41,430 --> 00:11:51,790
was<font color="#CCCCCC"> originally the first</font><font color="#E5E5E5"> compiler sent</font>

201
00:11:47,350 --> 00:11:54,940
out<font color="#CCCCCC"> to many people were in 1957 and</font><font color="#E5E5E5"> a</font>

202
00:11:51,790 --> 00:11:58,000
lot<font color="#CCCCCC"> of people were skeptical of an IBM</font>

203
00:11:54,940 --> 00:11:59,550
or John<font color="#CCCCCC"> Becker's first spoke about it</font>

204
00:11:58,000 --> 00:12:01,870
that he<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> to come up with</font><font color="#E5E5E5"> a</font>

205
00:11:59,550 --> 00:12:05,020
high-level language<font color="#E5E5E5"> where you can</font>

206
00:12:01,870 --> 00:12:07,360
actually<font color="#E5E5E5"> type your mathematical formally</font>

207
00:12:05,020 --> 00:12:09,370
and the computer will evaluate<font color="#E5E5E5"> it and</font>

208
00:12:07,360 --> 00:12:12,940
understand<font color="#E5E5E5"> it and it's readable for</font>

209
00:12:09,370 --> 00:12:16,210
humans<font color="#E5E5E5"> not binary</font><font color="#CCCCCC"> not Auto codes or</font>

210
00:12:12,940 --> 00:12:18,730
assembly for one<font color="#CCCCCC"> specific language but</font>

211
00:12:16,210 --> 00:12:20,920
in one year in the<font color="#E5E5E5"> most computing</font>

212
00:12:18,730 --> 00:12:24,190
centers who had IBM machines in a

213
00:12:20,920 --> 00:12:27,219
<font color="#E5E5E5">questionnaire sent out by IBM they</font>

214
00:12:24,190 --> 00:12:31,810
answered<font color="#CCCCCC"> that more than 50%</font><font color="#E5E5E5"> of their new</font>

215
00:12:27,220 --> 00:12:35,890
code is<font color="#CCCCCC"> actually written</font><font color="#E5E5E5"> in Fortran it</font>

216
00:12:31,810 --> 00:12:39,250
did<font color="#CCCCCC"> huh it was such a</font><font color="#E5E5E5"> great help in the</font>

217
00:12:35,890 --> 00:12:43,270
development<font color="#CCCCCC"> process and they also</font>

218
00:12:39,250 --> 00:12:48,780
realized that to<font color="#E5E5E5"> reduce the duplicated</font>

219
00:12:43,270 --> 00:12:53,319
effort they<font color="#E5E5E5"> can form users groups and</font>

220
00:12:48,780 --> 00:12:56,980
and send their sub programs or<font color="#CCCCCC"> programs</font>

221
00:12:53,320 --> 00:12:59,640
to<font color="#E5E5E5"> each other</font><font color="#CCCCCC"> and some part of it was</font>

222
00:12:56,980 --> 00:13:03,440
<font color="#E5E5E5">collected</font><font color="#CCCCCC"> by the users group into the</font>

223
00:12:59,640 --> 00:13:09,949
<font color="#E5E5E5">IBM SSP or scientific subroutine package</font>

224
00:13:03,440 --> 00:13:12,670
so this from that one it became<font color="#CCCCCC"> fright</font>

225
00:13:09,950 --> 00:13:14,930
spread that people are implemented

226
00:13:12,670 --> 00:13:18,380
<font color="#E5E5E5">numerical methods at different places</font>

227
00:13:14,930 --> 00:13:21,739
they sent it out<font color="#CCCCCC"> to each other and</font><font color="#E5E5E5"> users</font>

228
00:13:18,380 --> 00:13:24,170
groups and people working<font color="#E5E5E5"> at computing</font>

229
00:13:21,740 --> 00:13:29,390
<font color="#CCCCCC">Center started collecting subroutines</font>

230
00:13:24,170 --> 00:13:32,420
for<font color="#E5E5E5"> themselves and while people were at</font>

231
00:13:29,390 --> 00:13:35,630
<font color="#CCCCCC">the same time</font><font color="#E5E5E5"> why people were interested</font>

232
00:13:32,420 --> 00:13:38,990
<font color="#E5E5E5">in using</font><font color="#CCCCCC"> occurred</font><font color="#E5E5E5"> or reusing it as often</font>

233
00:13:35,630 --> 00:13:44,630
<font color="#E5E5E5">as possible</font><font color="#CCCCCC"> the language also</font><font color="#E5E5E5"> developed</font>

234
00:13:38,990 --> 00:13:47,030
and it became standardized<font color="#E5E5E5"> in 1966 and</font>

235
00:13:44,630 --> 00:13:49,580
ever since there has been a continued

236
00:13:47,030 --> 00:13:50,750
development<font color="#E5E5E5"> so the latest standard came</font>

237
00:13:49,580 --> 00:13:54,860
out last<font color="#E5E5E5"> year</font>

238
00:13:50,750 --> 00:13:57,350
and why and<font color="#E5E5E5"> this is one</font><font color="#CCCCCC"> of the reasons</font>

239
00:13:54,860 --> 00:14:00,650
why a lot<font color="#CCCCCC"> of computing work is still</font>

240
00:13:57,350 --> 00:14:03,470
<font color="#E5E5E5">done in this very old language that the</font>

241
00:14:00,650 --> 00:14:06,620
newer versions<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the language always</font>

242
00:14:03,470 --> 00:14:10,040
<font color="#E5E5E5">include a large a very very large part</font>

243
00:14:06,620 --> 00:14:13,940
of the old one as a subset so if you

244
00:14:10,040 --> 00:14:18,680
have a Fortran program from<font color="#CCCCCC"> thirty years</font>

245
00:14:13,940 --> 00:14:21,440
<font color="#CCCCCC">ago it's most likely that it's</font><font color="#E5E5E5"> still a</font>

246
00:14:18,680 --> 00:14:25,849
valid Fortran program now<font color="#E5E5E5"> at least if it</font>

247
00:14:21,440 --> 00:14:28,490
was a<font color="#E5E5E5"> valid program then and this may</font>

248
00:14:25,850 --> 00:14:30,620
have multiple definitions like<font color="#E5E5E5"> well it</font>

249
00:14:28,490 --> 00:14:33,440
according to<font color="#E5E5E5"> the standard or valid</font>

250
00:14:30,620 --> 00:14:39,650
<font color="#E5E5E5">according to a one compiler on one</font>

251
00:14:33,440 --> 00:14:43,040
<font color="#E5E5E5">machine on a present computer like this</font>

252
00:14:39,650 --> 00:14:46,250
one here you have an<font color="#CCCCCC"> almost perfect</font><font color="#E5E5E5"> stop</font>

253
00:14:43,040 --> 00:14:49,699
word<font color="#E5E5E5"> so you have not</font><font color="#CCCCCC"> just one but</font>

254
00:14:46,250 --> 00:14:54,020
multiple compilers they are very good at

255
00:14:49,700 --> 00:14:58,040
the standard compliance although other

256
00:14:54,020 --> 00:15:01,010
machines<font color="#CCCCCC"> port from original</font><font color="#E5E5E5"> Fortran from</font>

257
00:14:58,040 --> 00:15:03,939
the 50s than the Fortran 66 Fortran 77

258
00:15:01,010 --> 00:15:06,350
they were very conservative languages

259
00:15:03,940 --> 00:15:08,930
they were not a very<font color="#E5E5E5"> complicated</font>

260
00:15:06,350 --> 00:15:11,420
<font color="#E5E5E5">language so some computer vendors in</font>

261
00:15:08,930 --> 00:15:14,270
that their own compiler started adding

262
00:15:11,420 --> 00:15:16,279
exceptions the good thing is that G

263
00:15:14,270 --> 00:15:20,600
Fortran support even some

264
00:15:16,279 --> 00:15:24,860
<font color="#E5E5E5">deism like this quite unusual way of</font>

265
00:15:20,600 --> 00:15:27,499
<font color="#CCCCCC">specifying</font><font color="#E5E5E5"> double precision real instead</font>

266
00:15:24,860 --> 00:15:30,740
<font color="#E5E5E5">of spelling out double precision and</font>

267
00:15:27,499 --> 00:15:33,290
besides<font color="#E5E5E5"> an actual compiler there is also</font>

268
00:15:30,740 --> 00:15:36,860
<font color="#E5E5E5">a source to source translator available</font>

269
00:15:33,290 --> 00:15:40,759
to see<font color="#E5E5E5"> so that's one way of running a</font>

270
00:15:36,860 --> 00:15:43,459
Fortran program but that's<font color="#CCCCCC"> also how some</font>

271
00:15:40,759 --> 00:15:45,589
<font color="#E5E5E5">old codes got into newer projects that</font>

272
00:15:43,459 --> 00:15:51,229
someone translated<font color="#E5E5E5"> it and ever since</font>

273
00:15:45,589 --> 00:15:54,769
they've been editing the<font color="#CCCCCC"> secrets the</font>

274
00:15:51,230 --> 00:15:58,550
other language and in early publication

275
00:15:54,769 --> 00:16:02,600
it<font color="#E5E5E5"> has been probably even more</font><font color="#CCCCCC"> often</font>

276
00:15:58,550 --> 00:16:06,589
used than Fortran was<font color="#CCCCCC"> Olga was sixty it</font>

277
00:16:02,600 --> 00:16:12,999
was not a language<font color="#E5E5E5"> that was invented by</font>

278
00:16:06,589 --> 00:16:18,589
one vent or like Fortran at IBM but by

279
00:16:12,999 --> 00:16:21,740
by a group of<font color="#CCCCCC"> experts</font><font color="#E5E5E5"> the ideas started</font>

280
00:16:18,589 --> 00:16:25,699
from to come<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> International</font>

281
00:16:21,740 --> 00:16:28,759
algorithmic language in 1958 and then

282
00:16:25,699 --> 00:16:31,599
there was the<font color="#CCCCCC"> August 60 report which was</font>

283
00:16:28,759 --> 00:16:35,389
an almost mathematically precise

284
00:16:31,600 --> 00:16:38,540
definition of the language syntax<font color="#E5E5E5"> in the</font>

285
00:16:35,389 --> 00:16:41,029
<font color="#CCCCCC">Bacchus</font><font color="#E5E5E5"> novel form which is still used</font>

286
00:16:38,540 --> 00:16:44,029
<font color="#E5E5E5">nowadays to specify a programming</font>

287
00:16:41,029 --> 00:16:50,569
language<font color="#CCCCCC"> and later there were some fixes</font>

288
00:16:44,029 --> 00:16:53,300
to ambiguities<font color="#CCCCCC"> of that report so the</font>

289
00:16:50,569 --> 00:16:55,490
language<font color="#E5E5E5"> has some beautiful properties</font>

290
00:16:53,300 --> 00:16:58,519
like it introduced<font color="#E5E5E5"> the blocks the block</font>

291
00:16:55,490 --> 00:17:02,779
structure<font color="#CCCCCC"> that makes it much easier to</font>

292
00:16:58,519 --> 00:17:06,859
<font color="#CCCCCC">avoid mistakes that that you would</font>

293
00:17:02,779 --> 00:17:10,069
easily<font color="#E5E5E5"> make in Fortran and a lot of</font>

294
00:17:06,859 --> 00:17:13,879
<font color="#E5E5E5">other things which is the reason while</font>

295
00:17:10,069 --> 00:17:15,918
we still refer<font color="#CCCCCC"> to some languages that we</font>

296
00:17:13,880 --> 00:17:20,089
<font color="#CCCCCC">use nowadays</font><font color="#E5E5E5"> to belong to the org or</font>

297
00:17:15,919 --> 00:17:22,520
family on the<font color="#E5E5E5"> other hand it might have</font>

298
00:17:20,089 --> 00:17:24,379
been an unfortunate<font color="#E5E5E5"> decision to not to</font>

299
00:17:22,520 --> 00:17:26,990
include input output in the

300
00:17:24,380 --> 00:17:30,020
standardization<font color="#E5E5E5"> of the language they</font>

301
00:17:26,990 --> 00:17:32,779
were they<font color="#E5E5E5"> thought that</font><font color="#CCCCCC"> computers are</font>

302
00:17:30,020 --> 00:17:37,490
that whopping so fast<font color="#E5E5E5"> and changing so</font>

303
00:17:32,779 --> 00:17:39,409
rapidly<font color="#CCCCCC"> that whatever they come</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font>

304
00:17:37,490 --> 00:17:41,690
a standard for input output would be

305
00:17:39,409 --> 00:17:48,169
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> dependent and would be quickly</font>

306
00:17:41,690 --> 00:17:51,500
outdated<font color="#CCCCCC"> if you compare the</font><font color="#E5E5E5"> input output</font>

307
00:17:48,169 --> 00:17:55,210
<font color="#CCCCCC">of Fortran and C well it's quite similar</font>

308
00:17:51,500 --> 00:17:58,100
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that might have been</font><font color="#CCCCCC"> a bit</font>

309
00:17:55,210 --> 00:18:01,220
pessimistic about the longevity of<font color="#E5E5E5"> an</font>

310
00:17:58,100 --> 00:18:03,889
idea<font color="#E5E5E5"> and what was</font><font color="#CCCCCC"> even worse that the</font>

311
00:18:01,220 --> 00:18:06,950
language was<font color="#CCCCCC"> not supported by IBM which</font>

312
00:18:03,890 --> 00:18:10,580
was the<font color="#CCCCCC"> great the biggest computer</font><font color="#E5E5E5"> event</font>

313
00:18:06,950 --> 00:18:13,880
or at that<font color="#CCCCCC"> time</font><font color="#E5E5E5"> so it did not get that</font>

314
00:18:10,580 --> 00:18:16,250
<font color="#E5E5E5">widespread also</font><font color="#CCCCCC"> in other languages that</font>

315
00:18:13,880 --> 00:18:18,250
the printed representation of the

316
00:18:16,250 --> 00:18:20,929
language in<font color="#E5E5E5"> a book and the</font><font color="#CCCCCC"> Machine</font>

317
00:18:18,250 --> 00:18:24,049
representation in some binary<font color="#E5E5E5"> format was</font>

318
00:18:20,929 --> 00:18:26,000
quite<font color="#CCCCCC"> different</font><font color="#E5E5E5"> so if you come</font><font color="#CCCCCC"> up with a</font>

319
00:18:24,049 --> 00:18:28,158
printed version it might it's not enough

320
00:18:26,000 --> 00:18:30,950
to type it you have to adapt it to your

321
00:18:28,159 --> 00:18:33,770
<font color="#E5E5E5">compiler or your language and if</font><font color="#CCCCCC"> you</font>

322
00:18:30,950 --> 00:18:36,380
<font color="#CCCCCC">have an old computer code even</font><font color="#E5E5E5"> if it's</font>

323
00:18:33,770 --> 00:18:41,360
preserved in a machine readable<font color="#E5E5E5"> form you</font>

324
00:18:36,380 --> 00:18:44,510
might not be able<font color="#E5E5E5"> to run it as it is and</font>

325
00:18:41,360 --> 00:18:46,820
it's all<font color="#E5E5E5"> often used as a kind of pseudo</font>

326
00:18:44,510 --> 00:18:50,960
<font color="#E5E5E5">code that is more ibly more aimed at</font>

327
00:18:46,820 --> 00:18:54,289
humans<font color="#E5E5E5"> still we have support in</font><font color="#CCCCCC"> Linux</font>

328
00:18:50,960 --> 00:18:56,720
which<font color="#E5E5E5"> are source translators to see and</font>

329
00:18:54,289 --> 00:18:59,750
there is the name<font color="#CCCCCC"> of two</font><font color="#E5E5E5"> translators the</font>

330
00:18:56,720 --> 00:19:02,809
GNU<font color="#E5E5E5"> marched and</font><font color="#CCCCCC"> jmf</font><font color="#E5E5E5"> all go of which you</font>

331
00:18:59,750 --> 00:19:06,020
can find<font color="#CCCCCC"> on github it's been it has been</font>

332
00:19:02,809 --> 00:19:09,309
<font color="#CCCCCC">written</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> Yann phone cut right and</font><font color="#E5E5E5"> also</font>

333
00:19:06,020 --> 00:19:12,470
there's an implementer called nice

334
00:19:09,309 --> 00:19:15,500
<font color="#E5E5E5">mathematical software often came in the</font>

335
00:19:12,470 --> 00:19:18,289
form of subroutine libraries<font color="#E5E5E5"> so the idea</font>

336
00:19:15,500 --> 00:19:21,919
of<font color="#E5E5E5"> a subroutine</font><font color="#CCCCCC"> to separate a part of</font>

337
00:19:18,289 --> 00:19:24,860
the program<font color="#CCCCCC"> is quite early from the time</font>

338
00:19:21,919 --> 00:19:27,169
of<font color="#E5E5E5"> the first computers</font><font color="#CCCCCC"> there was a first</font>

339
00:19:24,860 --> 00:19:32,689
scientific paper on<font color="#E5E5E5"> it written by</font>

340
00:19:27,169 --> 00:19:34,250
<font color="#CCCCCC">Goldstein and 4/9</font><font color="#E5E5E5"> one in 1948 and three</font>

341
00:19:32,690 --> 00:19:37,429
years<font color="#CCCCCC"> after there was</font><font color="#E5E5E5"> the first</font>

342
00:19:34,250 --> 00:19:40,580
published subroutine library in the form

343
00:19:37,429 --> 00:19:42,870
<font color="#E5E5E5">of a book which</font><font color="#CCCCCC"> concur</font><font color="#E5E5E5"> which included</font>

344
00:19:40,580 --> 00:19:49,809
binary

345
00:19:42,870 --> 00:19:52,389
which included the machine code form of

346
00:19:49,809 --> 00:19:54,879
these languages<font color="#E5E5E5"> and then people are</font>

347
00:19:52,390 --> 00:20:01,059
started personal<font color="#E5E5E5"> collections and users</font>

348
00:19:54,880 --> 00:20:03,670
groups and<font color="#CCCCCC"> so and quite shortly after</font>

349
00:20:01,059 --> 00:20:06,129
that there were formal collections like

350
00:20:03,670 --> 00:20:08,230
the American Association for Computing

351
00:20:06,130 --> 00:20:10,920
Machinery in<font color="#E5E5E5"> their</font><font color="#CCCCCC"> journal started</font>

352
00:20:08,230 --> 00:20:13,420
publishing an<font color="#E5E5E5"> algorithm section</font>

353
00:20:10,920 --> 00:20:15,940
numerical mathematic<font color="#E5E5E5"> and other journal</font>

354
00:20:13,420 --> 00:20:19,410
and so there are<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of other</font>

355
00:20:15,940 --> 00:20:22,450
journals<font color="#E5E5E5"> listed there which published</font>

356
00:20:19,410 --> 00:20:25,059
mathematical code and there were also<font color="#E5E5E5"> a</font>

357
00:20:22,450 --> 00:20:27,460
number of<font color="#E5E5E5"> books which not just taught</font>

358
00:20:25,059 --> 00:20:30,760
people<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do numerical analysis they</font>

359
00:20:27,460 --> 00:20:32,890
also included<font color="#E5E5E5"> a set of subroutines which</font>

360
00:20:30,760 --> 00:20:42,730
you were expected to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> use</font>

361
00:20:32,890 --> 00:20:46,480
after it now these languages be

362
00:20:42,730 --> 00:20:49,750
collected algorithm of the<font color="#CCCCCC"> ACM they're</font>

363
00:20:46,480 --> 00:20:52,480
the first hundreds were printed in the

364
00:20:49,750 --> 00:20:55,410
journal Inagua<font color="#CCCCCC"> sixty later</font><font color="#E5E5E5"> more</font>

365
00:20:52,480 --> 00:21:00,640
languages were allowed to be used like

366
00:20:55,410 --> 00:21:02,860
Fortran pr1 MATLAB and so on and now we

367
00:21:00,640 --> 00:21:06,160
<font color="#E5E5E5">only have</font><font color="#CCCCCC"> the later ones in a machine</font>

368
00:21:02,860 --> 00:21:09,370
readable form and that's more<font color="#CCCCCC"> or less</font>

369
00:21:06,160 --> 00:21:13,630
<font color="#E5E5E5">true for other journals so what I list</font>

370
00:21:09,370 --> 00:21:16,840
<font color="#E5E5E5">here might be interesting because that</font>

371
00:21:13,630 --> 00:21:20,260
we<font color="#E5E5E5"> can use to test our tool chain if you</font>

372
00:21:16,840 --> 00:21:22,959
<font color="#CCCCCC">can still run that and later subroutine</font>

373
00:21:20,260 --> 00:21:25,809
<font color="#E5E5E5">libraries were also available in</font>

374
00:21:22,960 --> 00:21:29,200
computer readable form like the SSP from

375
00:21:25,809 --> 00:21:31,570
IBM port from<font color="#E5E5E5"> Bell Laboratories which</font>

376
00:21:29,200 --> 00:21:34,600
was first published<font color="#CCCCCC"> in the the first</font>

377
00:21:31,570 --> 00:21:38,980
part of this library<font color="#E5E5E5"> was published in a</font>

378
00:21:34,600 --> 00:21:42,570
journal<font color="#CCCCCC"> actually and there was slight AK</font>

379
00:21:38,980 --> 00:21:45,280
<font color="#CCCCCC">Bible by</font><font color="#E5E5E5"> the US National Laboratory</font>

380
00:21:42,570 --> 00:21:49,510
<font color="#E5E5E5">Physical Laboratory cm Lee by the</font>

381
00:21:45,280 --> 00:21:53,800
National Institute of<font color="#E5E5E5"> Standards NSWC and</font>

382
00:21:49,510 --> 00:21:55,990
<font color="#CCCCCC">Newmar</font><font color="#E5E5E5"> and commercial libraries so to</font>

383
00:21:53,800 --> 00:21:59,610
see how well these codes are preserved

384
00:21:55,990 --> 00:22:04,480
<font color="#E5E5E5">we</font><font color="#CCCCCC"> actually tried</font><font color="#E5E5E5"> to test some of them I</font>

385
00:21:59,610 --> 00:22:07,510
can we used the ACM algorithm to<font color="#E5E5E5"> four of</font>

386
00:22:04,480 --> 00:22:11,590
which the best route finder is the most

387
00:22:07,510 --> 00:22:14,620
complicated to check if our tool chain

388
00:22:11,590 --> 00:22:17,020
is<font color="#CCCCCC"> actually good enough they were in a</font>

389
00:22:14,620 --> 00:22:19,178
printed representation not in some

390
00:22:17,020 --> 00:22:21,970
machine representation so it definitely

391
00:22:19,179 --> 00:22:27,550
<font color="#CCCCCC">needed</font><font color="#E5E5E5"> some hand editing to get into a</font>

392
00:22:21,970 --> 00:22:30,160
computer<font color="#E5E5E5"> ready ready form and the GNU</font>

393
00:22:27,550 --> 00:22:34,059
marched actually the<font color="#CCCCCC"> GNU Mars it was</font>

394
00:22:30,160 --> 00:22:35,710
actually<font color="#E5E5E5"> possible to run it order you</font>

395
00:22:34,059 --> 00:22:37,720
could see that when they printed

396
00:22:35,710 --> 00:22:42,160
something<font color="#E5E5E5"> in a journal</font><font color="#CCCCCC"> that was not</font>

397
00:22:37,720 --> 00:22:44,260
<font color="#E5E5E5">thinking necessarily directly printed</font>

398
00:22:42,160 --> 00:22:47,590
from the computer readable form but we

399
00:22:44,260 --> 00:22:49,629
have<font color="#E5E5E5"> written in a human</font><font color="#CCCCCC"> readable form</font>

400
00:22:47,590 --> 00:22:53,409
where people could easily lose a

401
00:22:49,630 --> 00:22:55,900
semicolon which can result in Agua 60

402
00:22:53,410 --> 00:23:01,570
and the next block<font color="#E5E5E5"> completely</font><font color="#CCCCCC"> treated as</font>

403
00:22:55,900 --> 00:23:07,059
a comment and first with<font color="#E5E5E5"> every</font><font color="#CCCCCC"> algorithm</font>

404
00:23:01,570 --> 00:23:10,090
I<font color="#E5E5E5"> try to run I found a compiler bug but</font>

405
00:23:07,059 --> 00:23:15,070
later<font color="#E5E5E5"> on actually</font><font color="#CCCCCC"> it was possible to</font>

406
00:23:10,090 --> 00:23:17,309
<font color="#E5E5E5">just type one and run it</font><font color="#CCCCCC"> what I tested</font>

407
00:23:15,070 --> 00:23:21,129
is this one<font color="#CCCCCC"> to a girl is one to four</font>

408
00:23:17,309 --> 00:23:23,168
from<font color="#CCCCCC"> the ACM and</font><font color="#E5E5E5"> the numeral from the</font>

409
00:23:21,130 --> 00:23:25,390
numeral I bury I just picked out one

410
00:23:23,169 --> 00:23:28,290
bigger code which evaluates the

411
00:23:25,390 --> 00:23:32,830
exponential integral and then<font color="#CCCCCC"> its</font>

412
00:23:28,290 --> 00:23:36,280
<font color="#E5E5E5">dependencies and again after a couple of</font>

413
00:23:32,830 --> 00:23:40,330
<font color="#E5E5E5">compiler bugs fixed by the author</font><font color="#CCCCCC"> it did</font>

414
00:23:36,280 --> 00:23:43,418
run so with<font color="#CCCCCC"> all</font><font color="#E5E5E5"> goal</font>

415
00:23:40,330 --> 00:23:46,240
<font color="#CCCCCC">my</font><font color="#E5E5E5"> experience is</font><font color="#CCCCCC"> that there are all go</font>

416
00:23:43,419 --> 00:23:48,429
<font color="#E5E5E5">60 compilers</font><font color="#CCCCCC"> in Linux however they need</font>

417
00:23:46,240 --> 00:23:51,250
they<font color="#CCCCCC"> have a small user base so if you</font>

418
00:23:48,429 --> 00:23:54,250
want<font color="#E5E5E5"> to run it you have you might need</font>

419
00:23:51,250 --> 00:23:55,130
to build your own<font color="#CCCCCC"> Ubuntu package I did</font>

420
00:23:54,250 --> 00:23:58,370
and you

421
00:23:55,130 --> 00:24:00,230
find it in my PPA<font color="#E5E5E5"> there is a big</font>

422
00:23:58,370 --> 00:24:04,010
difference<font color="#E5E5E5"> between the printed and the</font>

423
00:24:00,230 --> 00:24:06,320
computer representation<font color="#CCCCCC"> of alga 60-some</font>

424
00:24:04,010 --> 00:24:08,660
use<font color="#CCCCCC"> the recommended aisle bike not</font>

425
00:24:06,320 --> 00:24:10,730
<font color="#E5E5E5">somewhere that you just don't get a main</font>

426
00:24:08,660 --> 00:24:16,580
program<font color="#CCCCCC"> and you have to write it to test</font>

427
00:24:10,730 --> 00:24:18,650
the<font color="#CCCCCC"> algorithm I think now</font><font color="#E5E5E5"> with a bit of</font>

428
00:24:16,580 --> 00:24:20,990
<font color="#E5E5E5">our back testing and the compilers</font>

429
00:24:18,650 --> 00:24:28,310
<font color="#CCCCCC">outdoors bug-fixing there is good enough</font>

430
00:24:20,990 --> 00:24:31,070
support to compare a code with your your

431
00:24:28,310 --> 00:24:33,470
own implementation<font color="#CCCCCC"> I will skip most</font>

432
00:24:31,070 --> 00:24:33,919
<font color="#CCCCCC">report from the experience is there</font><font color="#E5E5E5"> much</font>

433
00:24:33,470 --> 00:24:36,710
better

434
00:24:33,920 --> 00:24:39,410
there is almost<font color="#E5E5E5"> perfect compiler support</font>

435
00:24:36,710 --> 00:24:42,050
<font color="#E5E5E5">what you have to do to preserve code is</font>

436
00:24:39,410 --> 00:24:45,140
to check if<font color="#CCCCCC"> its standard conforming and</font>

437
00:24:42,050 --> 00:24:49,490
maybe fix it or find the compilers which

438
00:24:45,140 --> 00:24:52,880
is that help you compile order code with

439
00:24:49,490 --> 00:24:57,740
certain kinds of standard violations<font color="#E5E5E5"> and</font>

440
00:24:52,880 --> 00:24:59,960
one<font color="#E5E5E5"> of the there we did not test single</font>

441
00:24:57,740 --> 00:25:02,420
routines but who<font color="#E5E5E5"> were subroutine</font>

442
00:24:59,960 --> 00:25:05,300
libraries which are<font color="#CCCCCC"> available so because</font>

443
00:25:02,420 --> 00:25:10,970
Fortran<font color="#E5E5E5"> was much more</font><font color="#CCCCCC"> it still is much</font>

444
00:25:05,300 --> 00:25:14,300
more<font color="#E5E5E5"> widespread in</font><font color="#CCCCCC"> the community</font><font color="#E5E5E5"> so</font>

445
00:25:10,970 --> 00:25:17,210
there the experiences you can find often

446
00:25:14,300 --> 00:25:21,169
<font color="#E5E5E5">even and what Debian package</font><font color="#CCCCCC"> search and</font>

447
00:25:17,210 --> 00:25:23,540
with minimal<font color="#CCCCCC"> changes compare it and</font><font color="#E5E5E5"> in</font>

448
00:25:21,170 --> 00:25:28,640
the case of<font color="#CCCCCC"> Sly Tech and</font><font color="#E5E5E5"> the port</font>

449
00:25:23,540 --> 00:25:30,530
library<font color="#E5E5E5"> we managed to very quickly get</font>

450
00:25:28,640 --> 00:25:34,390
to<font color="#CCCCCC"> the point where all the tests</font>

451
00:25:30,530 --> 00:25:37,990
included with the library<font color="#E5E5E5"> actually run</font>

452
00:25:34,390 --> 00:25:40,730
so here preservation mostly means

453
00:25:37,990 --> 00:25:43,700
keeping the source at least to yourself

454
00:25:40,730 --> 00:25:46,700
<font color="#CCCCCC">or convincing authors that before they</font>

455
00:25:43,700 --> 00:25:49,540
give<font color="#E5E5E5"> up on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> project to publish it not</font>

456
00:25:46,700 --> 00:25:53,540
<font color="#E5E5E5">just on their</font><font color="#CCCCCC"> homepage with the license</font>

457
00:25:49,540 --> 00:25:56,360
but completely<font color="#E5E5E5"> as in the case of port a</font>

458
00:25:53,540 --> 00:26:00,649
large part is public<font color="#E5E5E5"> domain that you can</font>

459
00:25:56,360 --> 00:26:03,610
find on the<font color="#CCCCCC"> internet but</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> non public</font>

460
00:26:00,650 --> 00:26:04,990
<font color="#E5E5E5">domain parts were still given freely for</font>

461
00:26:03,610 --> 00:26:07,790
nonprofit use

462
00:26:04,990 --> 00:26:08,360
however the<font color="#E5E5E5"> web page is not there</font>

463
00:26:07,790 --> 00:26:13,129
anymore

464
00:26:08,360 --> 00:26:17,959
and back to the the project<font color="#E5E5E5"> started with</font>

465
00:26:13,130 --> 00:26:22,429
us<font color="#E5E5E5"> II mean we found the code many</font>

466
00:26:17,960 --> 00:26:25,789
<font color="#CCCCCC">versions and I implemented</font><font color="#E5E5E5"> the the test</font>

467
00:26:22,429 --> 00:26:27,950
case where the one in our failed in

468
00:26:25,789 --> 00:26:30,830
Fortran with the original<font color="#E5E5E5"> version and</font>

469
00:26:27,950 --> 00:26:32,809
that<font color="#E5E5E5"> one worked perfectly so the</font>

470
00:26:30,830 --> 00:26:34,760
conclusion is<font color="#CCCCCC"> that in this case it is</font>

471
00:26:32,809 --> 00:26:39,230
<font color="#E5E5E5">worse finding the</font><font color="#CCCCCC"> original version of</font>

472
00:26:34,760 --> 00:26:43,490
the code and comparing because then you

473
00:26:39,230 --> 00:26:45,559
can filter you can find that<font color="#E5E5E5"> the bug</font>

474
00:26:43,490 --> 00:26:48,289
actually appeared in some<font color="#E5E5E5"> later</font>

475
00:26:45,559 --> 00:26:50,330
development<font color="#E5E5E5"> so my conclusion is</font><font color="#CCCCCC"> that</font>

476
00:26:48,289 --> 00:26:54,679
there is a lot of<font color="#CCCCCC"> legacy mathematical</font>

477
00:26:50,330 --> 00:26:57,168
code there<font color="#CCCCCC"> that is still used it is</font>

478
00:26:54,679 --> 00:27:00,370
essential to save the<font color="#CCCCCC"> original version</font>

479
00:26:57,169 --> 00:27:03,230
<font color="#E5E5E5">to preserve the algorithmic</font><font color="#CCCCCC"> no knowledge</font>

480
00:27:00,370 --> 00:27:05,658
<font color="#CCCCCC">for comparison and for testing</font><font color="#E5E5E5"> later</font>

481
00:27:03,230 --> 00:27:07,639
developments many of these codes are

482
00:27:05,659 --> 00:27:11,389
<font color="#CCCCCC">very high</font><font color="#E5E5E5"> quality so</font><font color="#CCCCCC"> they were written</font>

483
00:27:07,639 --> 00:27:14,809
in<font color="#E5E5E5"> the seventies and eighties by big US</font>

484
00:27:11,389 --> 00:27:17,600
laboratories and universities<font color="#E5E5E5"> they were</font>

485
00:27:14,809 --> 00:27:20,019
made public domain<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> because</font>

486
00:27:17,600 --> 00:27:22,610
there was government<font color="#E5E5E5"> money included</font>

487
00:27:20,019 --> 00:27:25,760
however<font color="#E5E5E5"> they are in all programming</font>

488
00:27:22,610 --> 00:27:28,760
languages<font color="#CCCCCC"> like Fortran</font><font color="#E5E5E5"> and August 16 and</font>

489
00:27:25,760 --> 00:27:32,419
the<font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> to do so is</font><font color="#CCCCCC"> to future-proof</font>

490
00:27:28,760 --> 00:27:34,549
<font color="#E5E5E5">the future</font><font color="#CCCCCC"> prove</font><font color="#E5E5E5"> the codes test your</font>

491
00:27:32,419 --> 00:27:37,010
<font color="#CCCCCC">tool</font><font color="#E5E5E5"> chain especially</font><font color="#CCCCCC"> if it's not a</font>

492
00:27:34,549 --> 00:27:40,010
<font color="#E5E5E5">really widespread language like Fortran</font>

493
00:27:37,010 --> 00:27:43,730
<font color="#E5E5E5">and save the code at</font><font color="#CCCCCC"> least for yourself</font>

494
00:27:40,010 --> 00:27:46,060
<font color="#E5E5E5">and check if there</font><font color="#CCCCCC"> are bugs so thank</font><font color="#E5E5E5"> you</font>

495
00:27:43,730 --> 00:27:55,460
<font color="#E5E5E5">for</font><font color="#CCCCCC"> your attention</font>

496
00:27:46,060 --> 00:27:55,460
[Applause]

497
00:28:08,670 --> 00:28:20,650
on this<font color="#CCCCCC"> it lepage</font><font color="#E5E5E5"> sorry so the question</font>

498
00:28:17,620 --> 00:28:23,800
was where we intend to publish this

499
00:28:20,650 --> 00:28:27,730
knowledge<font color="#E5E5E5"> and there is a get</font><font color="#CCCCCC"> la page</font>

500
00:28:23,800 --> 00:28:31,060
which includes<font color="#E5E5E5"> not just</font><font color="#CCCCCC"> code but it's in</font>

501
00:28:27,730 --> 00:28:35,410
our markup<font color="#E5E5E5"> so you have the in the case</font>

502
00:28:31,060 --> 00:28:44,879
of our algorithms<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> a document</font>

503
00:28:35,410 --> 00:28:48,450
where<font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> run the code yes</font>

504
00:28:44,880 --> 00:28:48,450
there is one<font color="#E5E5E5"> more</font><font color="#CCCCCC"> question</font>

505
00:29:04,539 --> 00:29:12,110
yes and in this<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> so the question</font>

506
00:29:10,100 --> 00:29:13,820
was that<font color="#E5E5E5"> even if we have the code and</font>

507
00:29:12,110 --> 00:29:16,399
<font color="#E5E5E5">the language is correctly implemented</font>

508
00:29:13,820 --> 00:29:21,918
what about hex in the original machines

509
00:29:16,399 --> 00:29:25,070
and so in this big subroutine libraries

510
00:29:21,919 --> 00:29:27,740
luckily these<font color="#E5E5E5"> were actually aimed to be</font>

511
00:29:25,070 --> 00:29:32,029
a<font color="#E5E5E5"> portable among at</font><font color="#CCCCCC"> least a couple</font><font color="#E5E5E5"> of</font>

512
00:29:27,740 --> 00:29:35,149
computers<font color="#E5E5E5"> so so far we have</font><font color="#CCCCCC"> not really</font>

513
00:29:32,029 --> 00:29:38,059
<font color="#E5E5E5">run into ugly hacks some standard</font>

514
00:29:35,149 --> 00:29:43,008
violations<font color="#E5E5E5"> so it was quite</font><font color="#CCCCCC"> surprising</font>

515
00:29:38,059 --> 00:29:45,500
that<font color="#E5E5E5"> I have found one case</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> ugly</font>

516
00:29:43,009 --> 00:29:48,799
<font color="#E5E5E5">hack but it was not really in the code</font>

517
00:29:45,500 --> 00:29:50,809
but what is<font color="#CCCCCC"> recommended in its</font>

518
00:29:48,799 --> 00:29:53,389
documentation<font color="#E5E5E5"> how you can save memory</font>

519
00:29:50,809 --> 00:29:57,200
<font color="#E5E5E5">where</font><font color="#CCCCCC"> you use it and</font><font color="#E5E5E5"> actually in this</font>

520
00:29:53,389 --> 00:30:00,559
test case it was used so it was a

521
00:29:57,200 --> 00:30:02,590
aliasing Fortran variables and the

522
00:30:00,559 --> 00:30:05,120
modern compiler does a lot<font color="#E5E5E5"> of</font>

523
00:30:02,590 --> 00:30:08,178
<font color="#CCCCCC">optimization so it just reorganized the</font>

524
00:30:05,120 --> 00:30:11,178
order of stuff and immediately<font color="#CCCCCC"> the tests</font>

525
00:30:08,179 --> 00:30:13,340
did<font color="#CCCCCC"> not run but the bug was not in the</font>

526
00:30:11,179 --> 00:30:16,000
<font color="#E5E5E5">original code but in the</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> and the</font>

527
00:30:13,340 --> 00:30:16,000
documentation

528
00:30:26,610 --> 00:30:33,250
no not really<font color="#E5E5E5"> so the codes are</font>

529
00:30:30,190 --> 00:30:35,530
<font color="#CCCCCC">high-quality</font><font color="#E5E5E5"> but they were written in a</font>

530
00:30:33,250 --> 00:30:39,130
way<font color="#E5E5E5"> not to demand too much from the</font>

531
00:30:35,530 --> 00:30:40,720
<font color="#E5E5E5">floating-point implementation of but if</font>

532
00:30:39,130 --> 00:30:42,760
<font color="#E5E5E5">you look at the floating point in time</font>

533
00:30:40,720 --> 00:30:46,600
<font color="#E5E5E5">implementation of many at many older</font>

534
00:30:42,760 --> 00:30:48,970
computers they were much worse like IBM

535
00:30:46,600 --> 00:30:53,370
computers sometimes<font color="#E5E5E5"> used</font><font color="#CCCCCC"> chopped</font>

536
00:30:48,970 --> 00:30:53,370
hexadecimal instead of rounded binary

537
00:30:57,210 --> 00:31:01,910
[Applause]

