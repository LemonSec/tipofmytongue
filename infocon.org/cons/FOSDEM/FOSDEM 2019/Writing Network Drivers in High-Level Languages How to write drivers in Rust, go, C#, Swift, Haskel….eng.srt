1
00:00:04,620 --> 00:00:11,400
um<font color="#E5E5E5"> welcome</font><font color="#CCCCCC"> to our talk I'm Paul was me a</font>

2
00:00:08,130 --> 00:00:13,200
son and well you<font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> of people</font>

3
00:00:11,400 --> 00:00:15,870
along these slides because<font color="#E5E5E5"> we just edit</font>

4
00:00:13,200 --> 00:00:18,180
everyone who contributed to<font color="#E5E5E5"> this project</font>

5
00:00:15,870 --> 00:00:20,279
by implementing a driver or some parts

6
00:00:18,180 --> 00:00:22,110
<font color="#E5E5E5">of a driver and as you</font><font color="#CCCCCC"> noticed we are</font>

7
00:00:20,279 --> 00:00:23,820
<font color="#E5E5E5">going to speak for us because we have</font>

8
00:00:22,110 --> 00:00:25,470
like<font color="#CCCCCC"> thirty</font><font color="#E5E5E5"> ones</font><font color="#CCCCCC"> nights and only</font><font color="#E5E5E5"> twenty</font>

9
00:00:23,820 --> 00:00:27,119
minutes<font color="#CCCCCC"> or</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> so if you're watching</font><font color="#E5E5E5"> the</font>

10
00:00:25,470 --> 00:00:31,859
stream<font color="#CCCCCC"> you can reduce the playback speed</font>

11
00:00:27,119 --> 00:00:33,210
somewhere well I'm a position at

12
00:00:31,859 --> 00:00:35,820
Technical University of Munich<font color="#CCCCCC"> where</font>

13
00:00:33,210 --> 00:00:37,620
research performance of stuff like DP<font color="#E5E5E5"> DK</font>

14
00:00:35,820 --> 00:00:40,470
or other network<font color="#E5E5E5"> drivers and so on and</font>

15
00:00:37,620 --> 00:00:42,449
first<font color="#E5E5E5"> me a salmon who did a</font><font color="#CCCCCC"> rough drive</font>

16
00:00:40,470 --> 00:00:44,610
<font color="#CCCCCC">as a</font><font color="#E5E5E5"> bachelor speakers and now research</font>

17
00:00:42,450 --> 00:00:46,110
assistants working<font color="#E5E5E5"> for us and everyone</font>

18
00:00:44,610 --> 00:00:48,120
else mentioned on the<font color="#E5E5E5"> slide are also</font>

19
00:00:46,110 --> 00:00:50,059
student of me who implemented some kind

20
00:00:48,120 --> 00:00:52,949
of driver or anything

21
00:00:50,059 --> 00:00:55,440
<font color="#CCCCCC">now network drivers as the pathway I</font>

22
00:00:52,950 --> 00:00:57,960
<font color="#E5E5E5">won't buy a show of hands has who has</font>

23
00:00:55,440 --> 00:01:02,010
<font color="#E5E5E5">used</font><font color="#CCCCCC"> DP D K or snap or something like</font>

24
00:00:57,960 --> 00:01:03,750
this<font color="#E5E5E5"> just yeah not as not as many people</font>

25
00:01:02,010 --> 00:01:05,759
<font color="#CCCCCC">as</font><font color="#E5E5E5"> expected actually</font>

26
00:01:03,750 --> 00:01:10,860
how<font color="#E5E5E5"> many of you have actually written</font><font color="#CCCCCC"> a</font>

27
00:01:05,759 --> 00:01:13,440
driver it's like the same a lot<font color="#E5E5E5"> of</font>

28
00:01:10,860 --> 00:01:15,709
<font color="#E5E5E5">people have used one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> unusual my</font><font color="#CCCCCC"> guest</font>

29
00:01:13,440 --> 00:01:18,149
different<font color="#CCCCCC"> coat</font><font color="#E5E5E5"> and usual</font><font color="#CCCCCC"> for that talk</font>

30
00:01:15,709 --> 00:01:20,039
<font color="#E5E5E5">because what I wanted to do like</font><font color="#CCCCCC"> two</font>

31
00:01:18,149 --> 00:01:21,869
years ago<font color="#CCCCCC"> and looked at a few</font><font color="#E5E5E5"> drivers I</font>

32
00:01:20,039 --> 00:01:24,030
was there a stupidly complicated<font color="#E5E5E5"> on most</font>

33
00:01:21,869 --> 00:01:26,250
<font color="#E5E5E5">of them a stupidly complicated</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> try</font>

34
00:01:24,030 --> 00:01:28,319
<font color="#E5E5E5">to like write a simple driver as simple</font>

35
00:01:26,250 --> 00:01:29,910
as I<font color="#E5E5E5"> could and so I wrote the EDX in a</font>

36
00:01:28,319 --> 00:01:31,259
truck driver which<font color="#CCCCCC"> is just young</font><font color="#E5E5E5"> super</font>

37
00:01:29,910 --> 00:01:32,848
<font color="#E5E5E5">fast user space network</font><font color="#CCCCCC"> driver that's</font>

38
00:01:31,259 --> 00:01:35,399
<font color="#E5E5E5">also super simply because it's only a</font>

39
00:01:32,849 --> 00:01:37,500
thousand<font color="#E5E5E5"> times of code</font><font color="#CCCCCC"> targets</font><font color="#E5E5E5"> the into</font>

40
00:01:35,399 --> 00:01:40,200
the<font color="#E5E5E5"> eight two five nine</font><font color="#CCCCCC"> network card and</font>

41
00:01:37,500 --> 00:01:42,119
<font color="#E5E5E5">so on and also good</font><font color="#CCCCCC"> IO and</font><font color="#E5E5E5"> so on can</font>

42
00:01:40,200 --> 00:01:43,920
check that out on<font color="#CCCCCC"> github and</font><font color="#E5E5E5"> I've of</font>

43
00:01:42,119 --> 00:01:45,630
course<font color="#E5E5E5"> voted in</font><font color="#CCCCCC"> C back then because you</font>

44
00:01:43,920 --> 00:01:47,720
<font color="#CCCCCC">obviously like drivers and see for</font>

45
00:01:45,630 --> 00:01:50,068
historical reasons or something then

46
00:01:47,720 --> 00:01:54,119
<font color="#E5E5E5">question is is he really the best</font>

47
00:01:50,069 --> 00:01:55,860
<font color="#CCCCCC">anglers ride a driver in well I didn't</font>

48
00:01:54,119 --> 00:01:58,229
know if it was<font color="#CCCCCC"> the</font><font color="#E5E5E5"> best language or not</font>

49
00:01:55,860 --> 00:02:00,599
<font color="#E5E5E5">so I was like well let's</font><font color="#CCCCCC"> write drivers</font>

50
00:01:58,229 --> 00:02:02,099
in all the languages<font color="#E5E5E5"> and then a quickly</font>

51
00:02:00,599 --> 00:02:04,440
turned out<font color="#E5E5E5"> that I don't speak all the</font>

52
00:02:02,099 --> 00:02:06,450
languages and it's also a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of work to</font>

53
00:02:04,440 --> 00:02:08,098
adamant all<font color="#E5E5E5"> the languages but good thing</font>

54
00:02:06,450 --> 00:02:10,348
I'm working<font color="#E5E5E5"> at the University so I can</font>

55
00:02:08,098 --> 00:02:11,488
just offer all these things here comes

56
00:02:10,348 --> 00:02:13,530
around looking for<font color="#E5E5E5"> student</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> add a</font>

57
00:02:11,489 --> 00:02:16,049
driver<font color="#CCCCCC"> inverse and go in Java and</font>

58
00:02:13,530 --> 00:02:17,450
c-sharp<font color="#CCCCCC"> in Haskell and so on and then I</font>

59
00:02:16,049 --> 00:02:19,640
<font color="#E5E5E5">talked to</font><font color="#CCCCCC"> like so at ease</font>

60
00:02:17,450 --> 00:02:20,899
so who were interested<font color="#E5E5E5"> in doing</font><font color="#CCCCCC"> this as</font>

61
00:02:19,640 --> 00:02:23,149
a<font color="#CCCCCC"> Bachelor of Jesus or master's thesis</font>

62
00:02:20,900 --> 00:02:24,800
<font color="#E5E5E5">and in the end I told him all</font><font color="#CCCCCC"> its going</font>

63
00:02:23,150 --> 00:02:27,739
to be really<font color="#CCCCCC"> complicated maybe go look</font>

64
00:02:24,800 --> 00:02:31,900
for something simpler and<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> then even</font>

65
00:02:27,739 --> 00:02:34,550
<font color="#E5E5E5">stay trust me for some reason and that</font>

66
00:02:31,900 --> 00:02:36,170
yeah this is like<font color="#E5E5E5"> basically how I told</font>

67
00:02:34,550 --> 00:02:38,360
<font color="#E5E5E5">them to to write us these are the</font>

68
00:02:36,170 --> 00:02:39,859
<font color="#E5E5E5">absolute basics I'd like a short session</font>

69
00:02:38,360 --> 00:02:41,599
was all the students<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact you're</font>

70
00:02:39,860 --> 00:02:43,640
going<font color="#CCCCCC"> to do this this and that</font><font color="#E5E5E5"> and it</font>

71
00:02:41,599 --> 00:02:45,018
should<font color="#CCCCCC"> work in your language and if</font><font color="#E5E5E5"> it</font>

72
00:02:43,640 --> 00:02:47,569
<font color="#E5E5E5">doesn't what we'll figure something out</font>

73
00:02:45,019 --> 00:02:49,489
so<font color="#E5E5E5"> basically just a few quick basics</font>

74
00:02:47,569 --> 00:02:51,230
about<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think I use a space driver you</font>

75
00:02:49,489 --> 00:02:53,360
need to<font color="#CCCCCC"> there are basically three</font><font color="#E5E5E5"> ways</font>

76
00:02:51,230 --> 00:02:56,060
<font color="#E5E5E5">you can talk to the or have to talk to</font>

77
00:02:53,360 --> 00:02:59,630
the PCI Express<font color="#E5E5E5"> device one syr memory</font>

78
00:02:56,060 --> 00:03:02,180
mapped i/o<font color="#E5E5E5"> that's just to do a</font><font color="#CCCCCC"> magic and</font>

79
00:02:59,630 --> 00:03:04,489
<font color="#E5E5E5">Matt and dusty</font><font color="#CCCCCC"> light thing</font><font color="#E5E5E5"> and it's met</font>

80
00:03:02,180 --> 00:03:06,530
<font color="#CCCCCC">a user</font><font color="#E5E5E5"> space process and you can call</font>

81
00:03:04,489 --> 00:03:08,510
<font color="#CCCCCC">that from any language obviously because</font>

82
00:03:06,530 --> 00:03:10,160
there's some way<font color="#E5E5E5"> to access memory in a</font>

83
00:03:08,510 --> 00:03:12,739
language<font color="#CCCCCC"> obviously sometimes you need a</font>

84
00:03:10,160 --> 00:03:15,230
receiver<font color="#CCCCCC"> perform lines of code or</font><font color="#E5E5E5"> so but</font>

85
00:03:12,739 --> 00:03:17,900
it<font color="#CCCCCC"> usually works in any language</font><font color="#E5E5E5"> then</font>

86
00:03:15,230 --> 00:03:19,578
you can do direct memory access or<font color="#E5E5E5"> the</font>

87
00:03:17,900 --> 00:03:21,650
device can do it and it's just<font color="#E5E5E5"> some way</font>

88
00:03:19,579 --> 00:03:23,389
<font color="#CCCCCC">that the device talks back to you but</font>

89
00:03:21,650 --> 00:03:24,889
transferring memory<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> have to</font>

90
00:03:23,389 --> 00:03:26,420
figure out<font color="#E5E5E5"> where your stuff is located</font>

91
00:03:24,889 --> 00:03:27,950
and<font color="#E5E5E5"> then the device can write</font><font color="#CCCCCC"> into</font>

92
00:03:26,420 --> 00:03:30,048
<font color="#E5E5E5">whatever memory is that should be</font>

93
00:03:27,950 --> 00:03:31,518
accessible<font color="#E5E5E5"> from your language even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> it</font>

94
00:03:30,049 --> 00:03:33,500
doesn't have pointers or anything<font color="#E5E5E5"> if you</font>

95
00:03:31,519 --> 00:03:34,910
just<font color="#E5E5E5"> know what a memory is</font><font color="#CCCCCC"> located and</font>

96
00:03:33,500 --> 00:03:37,100
well then there are interrupts<font color="#E5E5E5"> which you</font>

97
00:03:34,910 --> 00:03:39,440
are<font color="#E5E5E5"> not using here but skip over that</font>

98
00:03:37,100 --> 00:03:40,880
<font color="#E5E5E5">and well then there are four simple</font>

99
00:03:39,440 --> 00:03:42,350
<font color="#CCCCCC">steps to actually</font><font color="#E5E5E5"> what the drivers want</font>

100
00:03:40,880 --> 00:03:44,180
to know that when you remove<font color="#E5E5E5"> the car</font>

101
00:03:42,350 --> 00:03:45,829
<font color="#E5E5E5">driver you do they like a map call this</font>

102
00:03:44,180 --> 00:03:47,780
to<font color="#E5E5E5"> write parameters</font><font color="#CCCCCC"> you figure out the</font>

103
00:03:45,829 --> 00:03:49,250
physical addresses which Felix tells you

104
00:03:47,780 --> 00:03:51,470
and then you<font color="#E5E5E5"> just write the driver which</font>

105
00:03:49,250 --> 00:03:53,030
is<font color="#E5E5E5"> simpler than</font><font color="#CCCCCC"> your thought then I</font><font color="#E5E5E5"> told</font>

106
00:03:51,470 --> 00:03:56,090
him<font color="#E5E5E5"> well what do I want from your driver</font>

107
00:03:53,030 --> 00:03:57,470
<font color="#CCCCCC">I want well the same feature set as my</font><font color="#E5E5E5"> C</font>

108
00:03:56,090 --> 00:03:59,959
reference driver which was always<font color="#E5E5E5"> like</font>

109
00:03:57,470 --> 00:04:02,030
does the C driver should look the<font color="#CCCCCC"> same</font>

110
00:03:59,959 --> 00:04:03,410
has<font color="#CCCCCC"> the same structure it should have a</font>

111
00:04:02,030 --> 00:04:05,900
similar architecture<font color="#E5E5E5"> should have the</font>

112
00:04:03,410 --> 00:04:07,280
same feature set<font color="#CCCCCC"> and at the same time</font><font color="#E5E5E5"> it</font>

113
00:04:05,900 --> 00:04:09,799
should use all the language safety

114
00:04:07,280 --> 00:04:13,730
features<font color="#CCCCCC"> they're possible</font><font color="#E5E5E5"> because we</font>

115
00:04:09,799 --> 00:04:15,799
wanted<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> more safer drivers with</font>

116
00:04:13,730 --> 00:04:17,298
fewer bugs and so on and in the end<font color="#CCCCCC"> we</font>

117
00:04:15,799 --> 00:04:20,570
wanted to compare all the languages

118
00:04:17,298 --> 00:04:22,669
against each other about well how fast

119
00:04:20,570 --> 00:04:26,180
they<font color="#CCCCCC"> are which safety</font><font color="#E5E5E5"> features could be</font>

120
00:04:22,669 --> 00:04:27,830
<font color="#E5E5E5">used or and how much</font><font color="#CCCCCC"> performance</font><font color="#E5E5E5"> that</font>

121
00:04:26,180 --> 00:04:29,210
cost me to enable<font color="#CCCCCC"> our safety future</font>

122
00:04:27,830 --> 00:04:30,680
what's the impact<font color="#E5E5E5"> of having a garbage</font>

123
00:04:29,210 --> 00:04:34,460
collector<font color="#CCCCCC"> in the driver</font>

124
00:04:30,680 --> 00:04:36,770
and we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> implementation now fully</font>

125
00:04:34,460 --> 00:04:39,500
up<font color="#E5E5E5"> and</font><font color="#CCCCCC"> working in c-sharp</font><font color="#E5E5E5"> Swift or camel</font>

126
00:04:36,770 --> 00:04:41,630
has to go<font color="#CCCCCC"> Rustin patent we will show our</font>

127
00:04:39,500 --> 00:04:42,979
<font color="#E5E5E5">performance graph but before that salmon</font>

128
00:04:41,630 --> 00:04:45,620
<font color="#E5E5E5">will talk</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> last driver and</font>

129
00:04:42,979 --> 00:04:46,909
<font color="#CCCCCC">vilest is</font><font color="#E5E5E5"> in our opinion the</font><font color="#CCCCCC"> best</font>

130
00:04:45,620 --> 00:04:48,919
language<font color="#E5E5E5"> of choice for a new driver</font>

131
00:04:46,910 --> 00:04:52,100
<font color="#E5E5E5">nowadays thanks Paul</font>

132
00:04:48,919 --> 00:04:54,169
so let's talk about rust what is rust

133
00:04:52,100 --> 00:04:56,090
<font color="#CCCCCC">well it seems to</font><font color="#E5E5E5"> be a safe concurrent</font>

134
00:04:54,169 --> 00:04:57,440
<font color="#E5E5E5">and practical systems language sounds</font>

135
00:04:56,090 --> 00:04:59,929
great for<font color="#E5E5E5"> writing network drivers</font>

136
00:04:57,440 --> 00:05:01,490
doesn't it<font color="#CCCCCC"> it has no garbage collector</font>

137
00:04:59,930 --> 00:05:03,260
<font color="#E5E5E5">so there's less overhead for memory</font>

138
00:05:01,490 --> 00:05:05,210
handling it has an<font color="#E5E5E5"> unique ownership</font>

139
00:05:03,260 --> 00:05:07,520
system<font color="#CCCCCC"> and some</font><font color="#E5E5E5"> rules for borrowing</font>

140
00:05:05,210 --> 00:05:08,750
ownership and moving<font color="#E5E5E5"> values that enable</font>

141
00:05:07,520 --> 00:05:10,880
rust accomplish its goal<font color="#E5E5E5"> of memory</font>

142
00:05:08,750 --> 00:05:12,620
safety<font color="#CCCCCC"> and an unsafe mode like oh and</font>

143
00:05:10,880 --> 00:05:15,530
quite a<font color="#E5E5E5"> few other languages</font>

144
00:05:12,620 --> 00:05:17,120
what<font color="#CCCCCC"> is the ownership system well it is</font>

145
00:05:15,530 --> 00:05:20,479
the core feature<font color="#E5E5E5"> of rust and actually</font>

146
00:05:17,120 --> 00:05:24,050
it's just<font color="#E5E5E5"> a simple set</font><font color="#CCCCCC"> of rules that</font>

147
00:05:20,479 --> 00:05:25,969
restrict<font color="#E5E5E5"> the way memory is handled if</font>

148
00:05:24,050 --> 00:05:26,539
you take these<font color="#CCCCCC"> three rules you can see</font>

149
00:05:25,970 --> 00:05:28,669
on the<font color="#CCCCCC"> sides</font>

150
00:05:26,539 --> 00:05:33,590
<font color="#E5E5E5">combined with the rules for borrowing</font>

151
00:05:28,669 --> 00:05:35,750
ownership and moving values<font color="#E5E5E5"> you get what</font>

152
00:05:33,590 --> 00:05:37,460
makes<font color="#E5E5E5"> rust memory safe and the</font>

153
00:05:35,750 --> 00:05:41,120
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is that these rules</font>

154
00:05:37,460 --> 00:05:43,190
<font color="#E5E5E5">are enforced at compile time and so we</font>

155
00:05:41,120 --> 00:05:46,250
<font color="#E5E5E5">we have no performance penalty at</font>

156
00:05:43,190 --> 00:05:47,510
runtime<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the programs are not the</font>

157
00:05:46,250 --> 00:05:49,760
<font color="#E5E5E5">compiled programs are not that different</font>

158
00:05:47,510 --> 00:05:53,180
<font color="#E5E5E5">to</font><font color="#CCCCCC"> 2 C programs but they have a</font><font color="#E5E5E5"> very</font>

159
00:05:49,760 --> 00:05:56,210
safe<font color="#CCCCCC"> and yeah what does</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> look like in</font>

160
00:05:53,180 --> 00:05:58,190
<font color="#E5E5E5">our driver well we have some</font><font color="#CCCCCC"> packet</font>

161
00:05:56,210 --> 00:06:00,979
<font color="#CCCCCC">structs for our</font><font color="#E5E5E5"> network packets that own</font>

162
00:05:58,190 --> 00:06:03,260
some<font color="#CCCCCC"> PMA memory and these packets are</font>

163
00:06:00,979 --> 00:06:05,449
passed between the users<font color="#E5E5E5"> of our driver</font>

164
00:06:03,260 --> 00:06:08,000
<font color="#CCCCCC">and the driver</font><font color="#E5E5E5"> and ownership is passed</font>

165
00:06:05,449 --> 00:06:09,979
<font color="#E5E5E5">along with</font><font color="#CCCCCC"> the packets so if the user</font>

166
00:06:08,000 --> 00:06:13,039
packet if the<font color="#CCCCCC"> peg in is passed</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

167
00:06:09,979 --> 00:06:14,840
user the user<font color="#E5E5E5"> can</font><font color="#CCCCCC"> modify the content of</font>

168
00:06:13,039 --> 00:06:16,550
the packet and if the packet is passed

169
00:06:14,840 --> 00:06:19,880
to the driver only<font color="#E5E5E5"> the driver can modify</font>

170
00:06:16,550 --> 00:06:22,099
the<font color="#E5E5E5"> content of the packet so we have</font>

171
00:06:19,880 --> 00:06:24,770
safe<font color="#CCCCCC"> take it handling unlike in other</font>

172
00:06:22,099 --> 00:06:27,080
languages<font color="#E5E5E5"> and on the bottom of the sides</font>

173
00:06:24,770 --> 00:06:29,419
you can<font color="#E5E5E5"> see how you would use the driver</font>

174
00:06:27,080 --> 00:06:31,698
based on the drivers interfaces so you

175
00:06:29,419 --> 00:06:34,099
can see how to receive modify and send

176
00:06:31,699 --> 00:06:36,560
packets and<font color="#E5E5E5"> there's no way to screw up</font>

177
00:06:34,099 --> 00:06:39,620
so<font color="#CCCCCC"> for example you cannot forget</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> two</font>

178
00:06:36,560 --> 00:06:40,969
<font color="#CCCCCC">free packets because packets are freed</font>

179
00:06:39,620 --> 00:06:43,760
automatically when they go out of<font color="#E5E5E5"> scope</font>

180
00:06:40,969 --> 00:06:46,580
<font color="#CCCCCC">and yeah that's pretty cool so</font>

181
00:06:43,760 --> 00:06:49,460
it looks kind of<font color="#E5E5E5"> like</font><font color="#CCCCCC"> sea but it's safer</font>

182
00:06:46,580 --> 00:06:52,250
so here we have some some safe code on

183
00:06:49,460 --> 00:06:54,080
this slide<font color="#E5E5E5"> but what about</font><font color="#CCCCCC"> unsafe well</font>

184
00:06:52,250 --> 00:06:56,630
<font color="#E5E5E5">unfortunately not</font><font color="#CCCCCC"> everything can be</font><font color="#E5E5E5"> done</font>

185
00:06:54,080 --> 00:06:58,580
and safe<font color="#E5E5E5"> for us so for example</font><font color="#CCCCCC"> calling</font>

186
00:06:56,630 --> 00:07:01,190
<font color="#E5E5E5">Orion functions and dereferencing</font><font color="#CCCCCC"> or</font>

187
00:06:58,580 --> 00:07:03,680
pointers is unsafe<font color="#E5E5E5"> but using unsafe code</font>

188
00:07:01,190 --> 00:07:06,500
is nothing and usually the idea is to

189
00:07:03,680 --> 00:07:09,440
restrict potentially bad code to a few

190
00:07:06,500 --> 00:07:11,630
<font color="#E5E5E5">places that</font><font color="#CCCCCC"> can be reviewed</font><font color="#E5E5E5"> and do some</font>

191
00:07:09,440 --> 00:07:16,130
assertions<font color="#E5E5E5"> to make unsafe code safe</font>

192
00:07:11,630 --> 00:07:18,980
again where did we use unsafe code<font color="#E5E5E5"> in</font>

193
00:07:16,130 --> 00:07:22,370
our<font color="#E5E5E5"> driver well for</font><font color="#CCCCCC"> example to set the</font>

194
00:07:18,980 --> 00:07:25,460
registers of<font color="#E5E5E5"> the device we have</font><font color="#CCCCCC"> asset</font>

195
00:07:22,370 --> 00:07:28,040
<font color="#CCCCCC">register method that takes register and</font>

196
00:07:25,460 --> 00:07:30,020
<font color="#E5E5E5">value and the use pointer right volatile</font>

197
00:07:28,040 --> 00:07:33,380
<font color="#E5E5E5">to write to the memory address of the</font>

198
00:07:30,020 --> 00:07:35,810
register<font color="#E5E5E5"> but before we do that we verify</font>

199
00:07:33,380 --> 00:07:37,880
<font color="#CCCCCC">that the register</font><font color="#E5E5E5"> that the memory</font>

200
00:07:35,810 --> 00:07:43,400
address of<font color="#E5E5E5"> the register is indeed inside</font>

201
00:07:37,880 --> 00:07:46,190
of our memory region yeah<font color="#E5E5E5"> now we have</font>

202
00:07:43,400 --> 00:07:48,229
some<font color="#E5E5E5"> dread code but is it fast well to</font>

203
00:07:46,190 --> 00:07:50,870
figure<font color="#E5E5E5"> that out we set up a test bed to</font>

204
00:07:48,230 --> 00:07:53,000
<font color="#E5E5E5">benchmark all</font><font color="#CCCCCC"> our drivers as you can see</font>

205
00:07:50,870 --> 00:07:55,670
we have two<font color="#CCCCCC"> servers we have</font><font color="#E5E5E5"> a packet</font>

206
00:07:53,000 --> 00:07:58,010
generator and the device on<font color="#E5E5E5"> the test the</font>

207
00:07:55,670 --> 00:08:02,360
two servers<font color="#E5E5E5"> are connected with two</font><font color="#CCCCCC"> 10</font>

208
00:07:58,010 --> 00:08:04,310
gigabit links<font color="#CCCCCC"> bi-directionally</font><font color="#E5E5E5"> we use</font>

209
00:08:02,360 --> 00:08:05,930
moonshine written by<font color="#E5E5E5"> Paul it's a packet</font>

210
00:08:04,310 --> 00:08:09,650
generator<font color="#E5E5E5"> because it's obviously the</font>

211
00:08:05,930 --> 00:08:10,460
best packet generator<font color="#E5E5E5"> and on the device</font>

212
00:08:09,650 --> 00:08:12,770
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> test</font>

213
00:08:10,460 --> 00:08:16,099
we<font color="#E5E5E5"> run simply by</font><font color="#CCCCCC"> direction a packet</font><font color="#E5E5E5"> for</font>

214
00:08:12,770 --> 00:08:18,909
order that we<font color="#E5E5E5"> implemented on top</font><font color="#CCCCCC"> of all</font>

215
00:08:16,100 --> 00:08:21,830
our drivers in all the languages<font color="#E5E5E5"> so</font>

216
00:08:18,910 --> 00:08:24,080
let's have a look at the results what

217
00:08:21,830 --> 00:08:26,060
did we do well we had<font color="#CCCCCC"> to look at the</font>

218
00:08:24,080 --> 00:08:28,729
throughput of<font color="#E5E5E5"> our drivers with different</font>

219
00:08:26,060 --> 00:08:31,310
batch sizes that means how many<font color="#E5E5E5"> packets</font>

220
00:08:28,730 --> 00:08:33,770
are sent to the PCI device at once on

221
00:08:31,310 --> 00:08:36,289
the on the x<font color="#CCCCCC"> axis you can see the batch</font>

222
00:08:33,770 --> 00:08:39,439
size of the<font color="#CCCCCC"> y-axis the packet rate in</font>

223
00:08:36,289 --> 00:08:42,409
million packets<font color="#E5E5E5"> per second and yeah you</font>

224
00:08:39,440 --> 00:08:44,540
can<font color="#E5E5E5"> see the different plots</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> graph</font>

225
00:08:42,409 --> 00:08:47,180
are the different languages and as you

226
00:08:44,540 --> 00:08:49,339
may notice the<font color="#CCCCCC"> ca and</font><font color="#E5E5E5"> rust</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> on top of</font>

227
00:08:47,180 --> 00:08:51,709
all other drivers<font color="#E5E5E5"> the functional</font>

228
00:08:49,340 --> 00:08:54,770
<font color="#E5E5E5">programming languages</font><font color="#CCCCCC"> are they are quite</font>

229
00:08:51,710 --> 00:08:55,770
slow and<font color="#E5E5E5"> Python is by far the slowest</font>

230
00:08:54,770 --> 00:08:59,550
with less

231
00:08:55,770 --> 00:09:02,610
<font color="#CCCCCC">200,000 packets per second and yeah all</font>

232
00:08:59,550 --> 00:09:05,130
in all<font color="#CCCCCC"> fetching has a huge influence of</font>

233
00:09:02,610 --> 00:09:06,839
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> and it is one of the main</font>

234
00:09:05,130 --> 00:09:09,689
reasons why<font color="#CCCCCC"> users based drivers are</font>

235
00:09:06,839 --> 00:09:12,180
faster<font color="#E5E5E5"> than kernel drivers because when</font>

236
00:09:09,690 --> 00:09:14,520
you drivers<font color="#CCCCCC"> usually operate on a better</font>

237
00:09:12,180 --> 00:09:18,510
size of<font color="#E5E5E5"> one on transmission and user</font>

238
00:09:14,520 --> 00:09:21,449
<font color="#E5E5E5">space driver stoned and yeah another</font>

239
00:09:18,510 --> 00:09:26,459
<font color="#CCCCCC">thing to note is that the veg size is</font>

240
00:09:21,450 --> 00:09:29,100
higher than 64<font color="#CCCCCC"> Albers then venture size</font>

241
00:09:26,459 --> 00:09:32,880
<font color="#E5E5E5">between 32 and 64 because</font><font color="#CCCCCC"> we have more</font>

242
00:09:29,100 --> 00:09:34,410
cache misses<font color="#E5E5E5"> but we did not</font><font color="#CCCCCC"> only look on</font>

243
00:09:32,880 --> 00:09:36,540
the throughput of<font color="#E5E5E5"> our drivers but as</font>

244
00:09:34,410 --> 00:09:38,310
well on the latency<font color="#E5E5E5"> and now I'm going to</font>

245
00:09:36,540 --> 00:09:41,040
head<font color="#CCCCCC"> back to Paul to tell you something</font>

246
00:09:38,310 --> 00:09:43,170
about<font color="#CCCCCC"> our results Thanks</font>

247
00:09:41,040 --> 00:09:44,910
all<font color="#CCCCCC"> there's obviously two</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> -</font>

248
00:09:43,170 --> 00:09:47,279
performance one else<font color="#CCCCCC"> scoobert and the</font>

249
00:09:44,910 --> 00:09:49,560
other one is latency<font color="#E5E5E5"> and what you can</font>

250
00:09:47,279 --> 00:09:52,020
<font color="#CCCCCC">see here</font><font color="#E5E5E5"> is a graph of the latency</font>

251
00:09:49,560 --> 00:09:54,329
that's an actually our histogram<font color="#E5E5E5"> meaning</font>

252
00:09:52,020 --> 00:09:57,000
the x-axis is<font color="#CCCCCC"> the percentile of</font><font color="#E5E5E5"> the</font>

253
00:09:54,330 --> 00:09:59,670
<font color="#E5E5E5">latency the y-axis is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> latency so for</font>

254
00:09:57,000 --> 00:10:02,880
<font color="#E5E5E5">example if there's a value of a hundred</font>

255
00:09:59,670 --> 00:10:05,459
<font color="#E5E5E5">microseconds at percentile</font><font color="#CCCCCC"> of 99</font><font color="#E5E5E5"> means</font>

256
00:10:02,880 --> 00:10:07,649
that 99%<font color="#E5E5E5"> of packets are being handed</font>

257
00:10:05,459 --> 00:10:10,319
faster than<font color="#CCCCCC"> 100 microseconds at one</font>

258
00:10:07,649 --> 00:10:12,930
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> slower now this can happen quite</font>

259
00:10:10,320 --> 00:10:15,420
often that<font color="#E5E5E5"> a packet is</font><font color="#CCCCCC"> henrique slower</font>

260
00:10:12,930 --> 00:10:17,810
for whatever reason one reason why it

261
00:10:15,420 --> 00:10:22,680
goes up<font color="#E5E5E5"> even a</font><font color="#CCCCCC"> little bit for C and</font>

262
00:10:17,810 --> 00:10:24,089
<font color="#E5E5E5">lasts at the 99.999% aisle is that we</font>

263
00:10:22,680 --> 00:10:27,180
have like periodic printing of

264
00:10:24,089 --> 00:10:28,829
statistics<font color="#CCCCCC"> in the main thread</font><font color="#E5E5E5"> which is</font>

265
00:10:27,180 --> 00:10:30,089
not necessarily a good design choice but

266
00:10:28,829 --> 00:10:32,579
something can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> implemented in any</font>

267
00:10:30,089 --> 00:10:34,110
language<font color="#CCCCCC"> so we do</font><font color="#E5E5E5"> it like this and you</font>

268
00:10:32,579 --> 00:10:36,209
can clearly see<font color="#CCCCCC"> the garbage-collected</font>

269
00:10:34,110 --> 00:10:38,250
<font color="#CCCCCC">languages are significantly</font><font color="#E5E5E5"> burst when</font>

270
00:10:36,209 --> 00:10:39,660
it comes to technology<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are just for</font>

271
00:10:38,250 --> 00:10:42,360
example for Haskell there are some

272
00:10:39,660 --> 00:10:44,160
random<font color="#E5E5E5"> packets that just take 200</font>

273
00:10:42,360 --> 00:10:46,500
microseconds<font color="#E5E5E5"> or so and that is after</font>

274
00:10:44,160 --> 00:10:48,180
tuning it for the latency before tuning

275
00:10:46,500 --> 00:10:48,870
a few of these languages were loaded and

276
00:10:48,180 --> 00:10:50,160
<font color="#CCCCCC">see we had</font>

277
00:10:48,870 --> 00:10:52,290
milliseconds<font color="#E5E5E5"> of garbage collection</font>

278
00:10:50,160 --> 00:10:54,089
<font color="#CCCCCC">process</font><font color="#E5E5E5"> in there but these are all tuned</font>

279
00:10:52,290 --> 00:10:56,010
for low<font color="#CCCCCC"> latency and then we can get to</font>

280
00:10:54,089 --> 00:10:58,680
reasonable latency levels even<font color="#CCCCCC"> in</font>

281
00:10:56,010 --> 00:11:01,410
<font color="#CCCCCC">garbage-collected</font><font color="#E5E5E5"> languages</font><font color="#CCCCCC"> you can see</font>

282
00:10:58,680 --> 00:11:02,640
they<font color="#CCCCCC"> go language is the fastest</font>

283
00:11:01,410 --> 00:11:03,930
<font color="#CCCCCC">garbage-collected</font><font color="#E5E5E5"> language in here</font>

284
00:11:02,640 --> 00:11:06,110
<font color="#E5E5E5">because has their fastest garbage</font>

285
00:11:03,930 --> 00:11:09,160
collector<font color="#E5E5E5"> and the other ones are all</font>

286
00:11:06,110 --> 00:11:10,750
<font color="#E5E5E5">significantly slower and there's</font>

287
00:11:09,160 --> 00:11:12,699
the<font color="#CCCCCC"> foreboding</font><font color="#E5E5E5"> latency at 1 million</font>

288
00:11:10,750 --> 00:11:14,440
packets<font color="#E5E5E5"> per second if he switched it</font>

289
00:11:12,700 --> 00:11:16,510
over to<font color="#CCCCCC"> ten million packets per second</font>

290
00:11:14,440 --> 00:11:17,740
<font color="#E5E5E5">note</font><font color="#CCCCCC"> that a few</font><font color="#E5E5E5"> of the languages are</font>

291
00:11:16,510 --> 00:11:20,020
<font color="#E5E5E5">missing from the graph that's just</font>

292
00:11:17,740 --> 00:11:21,700
because<font color="#E5E5E5"> they can't handle forwarding 10</font>

293
00:11:20,020 --> 00:11:24,430
million packets per second on this

294
00:11:21,700 --> 00:11:26,230
specific system<font color="#E5E5E5"> but adding languages</font>

295
00:11:24,430 --> 00:11:27,699
that can't cope with<font color="#CCCCCC"> the load doesn't</font>

296
00:11:26,230 --> 00:11:29,200
<font color="#E5E5E5">make much sense in the latency graph</font>

297
00:11:27,700 --> 00:11:31,390
because then the latency<font color="#E5E5E5"> is just the</font>

298
00:11:29,200 --> 00:11:33,280
size of<font color="#CCCCCC"> the buffer</font><font color="#E5E5E5"> and it's just a few</font>

299
00:11:31,390 --> 00:11:33,699
milliseconds<font color="#E5E5E5"> and that's just low and</font>

300
00:11:33,280 --> 00:11:36,819
boring

301
00:11:33,700 --> 00:11:38,590
so here again<font color="#CCCCCC"> see and Trust</font><font color="#E5E5E5"> are still on</font>

302
00:11:36,820 --> 00:11:40,120
top<font color="#CCCCCC"> of each</font><font color="#E5E5E5"> other then there's go with</font>

303
00:11:38,590 --> 00:11:42,130
some more<font color="#E5E5E5"> latency due to the garbage</font>

304
00:11:40,120 --> 00:11:43,690
collector and then<font color="#E5E5E5"> the C sharp is a</font>

305
00:11:42,130 --> 00:11:45,820
little bit more<font color="#CCCCCC"> latency but</font><font color="#E5E5E5"> it's still</font>

306
00:11:43,690 --> 00:11:46,900
<font color="#CCCCCC">okay this is also</font><font color="#E5E5E5"> a huge garbage</font>

307
00:11:45,820 --> 00:11:48,990
collection settings

308
00:11:46,900 --> 00:11:51,220
otherwise<font color="#CCCCCC"> the shop would</font><font color="#E5E5E5"> be a lot slower</font>

309
00:11:48,990 --> 00:11:52,930
<font color="#E5E5E5">an interesting trade-off switching the</font>

310
00:11:51,220 --> 00:11:55,180
garbage collector<font color="#CCCCCC"> and</font><font color="#E5E5E5"> C shop to low</font>

311
00:11:52,930 --> 00:11:57,760
latency mode reduces support by<font color="#CCCCCC"> only 1%</font>

312
00:11:55,180 --> 00:12:01,719
<font color="#E5E5E5">but reduces latency from like 300</font>

313
00:11:57,760 --> 00:12:04,060
microseconds to 60 or<font color="#E5E5E5"> 70 and going</font><font color="#CCCCCC"> even</font>

314
00:12:01,720 --> 00:12:05,560
further back<font color="#E5E5E5"> all the way</font><font color="#CCCCCC"> to 20 million</font>

315
00:12:04,060 --> 00:12:07,390
packets per second where we are

316
00:12:05,560 --> 00:12:09,550
<font color="#CCCCCC">operating</font><font color="#E5E5E5"> it basically</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> go it's</font>

317
00:12:07,390 --> 00:12:11,830
basically on this particular<font color="#CCCCCC"> view</font><font color="#E5E5E5"> it's</font>

318
00:12:09,550 --> 00:12:14,140
at<font color="#CCCCCC"> capacity as I can follow it and</font><font color="#E5E5E5"> then</font>

319
00:12:11,830 --> 00:12:17,260
there's some significant the higher

320
00:12:14,140 --> 00:12:18,850
latency<font color="#E5E5E5"> and for us see we finally</font><font color="#CCCCCC"> see a</font>

321
00:12:17,260 --> 00:12:22,240
small difference between<font color="#E5E5E5"> West and C and</font>

322
00:12:18,850 --> 00:12:24,340
this<font color="#E5E5E5"> is in this</font><font color="#CCCCCC"> case just because it's</font>

323
00:12:22,240 --> 00:12:25,750
<font color="#CCCCCC">forest it's basically completely loaded</font>

324
00:12:24,340 --> 00:12:27,310
the system<font color="#CCCCCC"> and for</font><font color="#E5E5E5"> C there's some</font>

325
00:12:25,750 --> 00:12:30,820
<font color="#CCCCCC">Sparrow</font><font color="#E5E5E5"> sources meaning it process is</font>

326
00:12:27,310 --> 00:12:33,550
<font color="#E5E5E5">slightly smaller batches and then</font>

327
00:12:30,820 --> 00:12:36,310
another<font color="#E5E5E5"> thing for safety for improved</font>

328
00:12:33,550 --> 00:12:38,709
safety is<font color="#E5E5E5"> all these language features we</font>

329
00:12:36,310 --> 00:12:40,479
have<font color="#E5E5E5"> now shown</font><font color="#CCCCCC"> that they well can</font><font color="#E5E5E5"> be</font>

330
00:12:38,710 --> 00:12:42,280
used but barely any performance impact

331
00:12:40,480 --> 00:12:45,340
but the other thing is user space<font color="#CCCCCC"> drive</font>

332
00:12:42,280 --> 00:12:46,740
<font color="#E5E5E5">are still</font><font color="#CCCCCC"> usually run s route and what</font>

333
00:12:45,340 --> 00:12:49,840
can we do it without<font color="#CCCCCC"> root privileges</font>

334
00:12:46,740 --> 00:12:51,970
<font color="#E5E5E5">well why do you need you need root for</font>

335
00:12:49,840 --> 00:12:54,130
<font color="#CCCCCC">an user</font><font color="#E5E5E5"> space driver usually</font><font color="#CCCCCC"> it's for</font>

336
00:12:51,970 --> 00:12:55,780
mapping<font color="#E5E5E5"> the</font><font color="#CCCCCC"> pci-express</font><font color="#E5E5E5"> process requires</font>

337
00:12:54,130 --> 00:12:57,250
<font color="#E5E5E5">route the allocating</font><font color="#CCCCCC"> their</font>

338
00:12:55,780 --> 00:12:58,750
<font color="#E5E5E5">non-transparent huge</font><font color="#CCCCCC"> pair just what you</font>

339
00:12:57,250 --> 00:13:00,550
need<font color="#E5E5E5"> for technical reasons for in a</font>

340
00:12:58,750 --> 00:13:02,650
memory from user space requires wood<font color="#E5E5E5"> and</font>

341
00:13:00,550 --> 00:13:04,810
locking the memory also<font color="#E5E5E5"> requires wood</font>

342
00:13:02,650 --> 00:13:06,640
<font color="#E5E5E5">now the question is</font><font color="#CCCCCC"> can be like write a</font>

343
00:13:04,810 --> 00:13:09,339
small program<font color="#E5E5E5"> that handles</font><font color="#CCCCCC"> setup and</font>

344
00:13:06,640 --> 00:13:11,199
then drops all<font color="#CCCCCC"> the privileges</font><font color="#E5E5E5"> and passes</font>

345
00:13:09,339 --> 00:13:13,600
on all the resources<font color="#E5E5E5"> to another and</font>

346
00:13:11,200 --> 00:13:16,780
privileges program<font color="#E5E5E5"> well yes we can do</font>

347
00:13:13,600 --> 00:13:18,550
<font color="#E5E5E5">that but then it's not secure anymore</font><font color="#CCCCCC"> in</font>

348
00:13:16,780 --> 00:13:22,100
order<font color="#E5E5E5"> to understand us we have to look</font>

349
00:13:18,550 --> 00:13:23,660
<font color="#CCCCCC">at how how our system looks like</font>

350
00:13:22,100 --> 00:13:26,060
the overview<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> system was the</font><font color="#E5E5E5"> CPU</font>

351
00:13:23,660 --> 00:13:27,649
on<font color="#CCCCCC"> top running</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> application then the</font>

352
00:13:26,060 --> 00:13:29,388
application talks to the thin quality

353
00:13:27,649 --> 00:13:31,550
<font color="#CCCCCC">and immunity</font><font color="#E5E5E5"> memory management unit and</font>

354
00:13:29,389 --> 00:13:33,589
if you want to access memory<font color="#E5E5E5"> then the</font>

355
00:13:31,550 --> 00:13:35,990
<font color="#E5E5E5">access</font><font color="#CCCCCC"> girl Sudi an annuity and a new</font>

356
00:13:33,589 --> 00:13:38,269
checks but<font color="#CCCCCC"> we are allowed to do that and</font>

357
00:13:35,990 --> 00:13:39,829
<font color="#CCCCCC">everything is</font><font color="#E5E5E5"> fine great</font><font color="#CCCCCC"> if you access</font>

358
00:13:38,269 --> 00:13:41,810
the<font color="#E5E5E5"> device is also checked can you</font>

359
00:13:39,829 --> 00:13:43,550
access the<font color="#E5E5E5"> device yes great now the</font>

360
00:13:41,810 --> 00:13:46,069
question is what happens if their device

361
00:13:43,550 --> 00:13:48,589
wants<font color="#E5E5E5"> to talk to</font><font color="#CCCCCC"> memory directly invited</font>

362
00:13:46,069 --> 00:13:50,360
email but<font color="#CCCCCC"> DMA and</font><font color="#E5E5E5"> general it of course</font>

363
00:13:48,589 --> 00:13:53,060
completely bypasses Tianna new and

364
00:13:50,360 --> 00:13:55,399
meaning even<font color="#CCCCCC"> if we restrict</font><font color="#E5E5E5"> our program</font>

365
00:13:53,060 --> 00:13:57,109
to run without<font color="#E5E5E5"> root privileges it could</font>

366
00:13:55,399 --> 00:13:58,009
just tell<font color="#CCCCCC"> your device ok please read</font>

367
00:13:57,110 --> 00:14:01,339
this memory for me

368
00:13:58,009 --> 00:14:03,199
great thank you<font color="#E5E5E5"> now what you</font><font color="#CCCCCC"> obviously</font>

369
00:14:01,339 --> 00:14:05,410
need is the thing<font color="#CCCCCC"> called an iommu which</font>

370
00:14:03,199 --> 00:14:08,449
<font color="#CCCCCC">is or enable are available on all</font>

371
00:14:05,410 --> 00:14:10,939
virtualization<font color="#E5E5E5"> and able</font><font color="#CCCCCC"> Sabu's</font><font color="#E5E5E5"> meaning</font>

372
00:14:08,449 --> 00:14:13,160
basically<font color="#E5E5E5"> all</font><font color="#CCCCCC"> java</font><font color="#E5E5E5"> CPUs and this</font><font color="#CCCCCC"> theme</font>

373
00:14:10,940 --> 00:14:17,180
<font color="#E5E5E5">just sits in between the</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> between</font>

374
00:14:13,160 --> 00:14:19,550
the PCI device at the memory<font color="#E5E5E5"> and it can</font>

375
00:14:17,180 --> 00:14:21,829
be configured<font color="#E5E5E5"> from from Linux and this</font>

376
00:14:19,550 --> 00:14:23,180
is really messy<font color="#E5E5E5"> to to implement her as a</font>

377
00:14:21,829 --> 00:14:24,319
<font color="#E5E5E5">student to it and it was</font><font color="#CCCCCC"> like will be</font>

378
00:14:23,180 --> 00:14:28,638
painful<font color="#E5E5E5"> for him apparently</font>

379
00:14:24,319 --> 00:14:32,389
but it's<font color="#E5E5E5"> nowadays it's</font><font color="#CCCCCC"> working yeah</font>

380
00:14:28,639 --> 00:14:34,040
basically<font color="#CCCCCC"> to compute we have all your</font>

381
00:14:32,389 --> 00:14:35,720
passwords<font color="#E5E5E5"> it's all free</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> source</font>

382
00:14:34,040 --> 00:14:37,969
<font color="#E5E5E5">it's all</font><font color="#CCCCCC"> available on github you can</font>

383
00:14:35,720 --> 00:14:40,189
scan the<font color="#CCCCCC"> QR code but almost no one</font><font color="#E5E5E5"> about</font>

384
00:14:37,970 --> 00:14:42,500
scans QR codes so just<font color="#E5E5E5"> Google</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> EXCI</font>

385
00:14:40,189 --> 00:14:44,449
languages and github<font color="#E5E5E5"> and when you will</font>

386
00:14:42,500 --> 00:14:46,180
find a<font color="#CCCCCC"> metal repository containing all</font>

387
00:14:44,449 --> 00:14:49,069
the<font color="#E5E5E5"> links</font><font color="#CCCCCC"> to all the implementations</font>

388
00:14:46,180 --> 00:14:52,370
also contains these benchmark graphs

389
00:14:49,069 --> 00:14:54,259
that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> just shown there is somewhere</font>

390
00:14:52,370 --> 00:14:55,790
on<font color="#E5E5E5"> the internet there's a longer version</font>

391
00:14:54,259 --> 00:14:59,269
<font color="#E5E5E5">of this talk available with a slightly</font>

392
00:14:55,790 --> 00:15:00,980
different<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> take away</font>

393
00:14:59,269 --> 00:15:02,870
that drivers<font color="#E5E5E5"> actually quite simply you</font>

394
00:15:00,980 --> 00:15:04,970
shouldn't be afraid of drivers<font color="#E5E5E5"> you</font>

395
00:15:02,870 --> 00:15:06,949
should<font color="#E5E5E5"> write and you can do it in</font><font color="#CCCCCC"> in any</font>

396
00:15:04,970 --> 00:15:08,420
<font color="#E5E5E5">language I mean</font><font color="#CCCCCC"> we even</font><font color="#E5E5E5"> have a PCI</font>

397
00:15:06,949 --> 00:15:11,569
Express<font color="#CCCCCC"> 12 ampersand</font><font color="#E5E5E5"> I mean it's slow</font>

398
00:15:08,420 --> 00:15:14,410
but it works and it might<font color="#E5E5E5"> be might be</font>

399
00:15:11,569 --> 00:15:16,670
<font color="#CCCCCC">gossiped</font><font color="#E5E5E5"> for different for a different</font>

400
00:15:14,410 --> 00:15:20,209
device that<font color="#E5E5E5"> doesn't require high</font>

401
00:15:16,670 --> 00:15:22,479
performance<font color="#CCCCCC"> ok great</font><font color="#E5E5E5"> thanks for</font><font color="#CCCCCC"> our</font>

402
00:15:20,209 --> 00:15:28,768
<font color="#E5E5E5">attention and</font>

403
00:15:22,480 --> 00:15:28,769
[Applause]

404
00:15:28,850 --> 00:15:34,879
I think we do<font color="#E5E5E5"> have time for questions</font>

405
00:15:31,879 --> 00:15:34,879
<font color="#E5E5E5">yeah</font>

406
00:15:37,480 --> 00:15:40,580
completely<font color="#E5E5E5"> unrelated</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> you really</font>

407
00:15:39,440 --> 00:15:42,350
didn't look at<font color="#E5E5E5"> that it's the same</font>

408
00:15:40,580 --> 00:15:44,720
<font color="#E5E5E5">comparison between the</font><font color="#CCCCCC"> competitor</font>

409
00:15:42,350 --> 00:15:47,300
through the PDK it's as fast as an older

410
00:15:44,720 --> 00:15:49,280
version of<font color="#CCCCCC"> GP</font><font color="#E5E5E5"> DK it can't can't keep up</font>

411
00:15:47,300 --> 00:15:51,319
keep up<font color="#E5E5E5"> with the new</font><font color="#CCCCCC"> vectorized drivers</font>

412
00:15:49,280 --> 00:15:53,660
and so on<font color="#E5E5E5"> but for the comparison to</font>

413
00:15:51,320 --> 00:15:56,140
<font color="#CCCCCC">karna driver</font><font color="#E5E5E5"> just compare</font><font color="#CCCCCC"> duplicate to</font>

414
00:15:53,660 --> 00:15:56,140
<font color="#CCCCCC">the college</font><font color="#E5E5E5"> level</font>

415
00:15:56,460 --> 00:15:59,549
[Music]

416
00:16:00,850 --> 00:16:08,249
it's the<font color="#E5E5E5"> package generally yes the moon</font>

417
00:16:03,669 --> 00:16:08,249
<font color="#CCCCCC">John packet generator</font><font color="#E5E5E5"> moon John yes</font>

418
00:16:09,329 --> 00:16:14,738
moon<font color="#E5E5E5"> John and there is a first time talk</font>

419
00:16:12,160 --> 00:16:18,219
available from a few years ago<font color="#E5E5E5"> you can</font>

420
00:16:14,739 --> 00:16:19,959
look that up<font color="#E5E5E5"> it's also available on</font>

421
00:16:18,220 --> 00:16:22,299
<font color="#E5E5E5">github and it's the best package ever</font>

422
00:16:19,959 --> 00:16:33,219
because you can<font color="#CCCCCC"> script the first do our</font>

423
00:16:22,299 --> 00:16:35,108
<font color="#CCCCCC">antennas</font><font color="#E5E5E5"> amazing</font><font color="#CCCCCC"> there are a lot of</font>

424
00:16:33,220 --> 00:16:36,970
<font color="#CCCCCC">bounced checks because</font><font color="#E5E5E5"> their goal was</font>

425
00:16:35,109 --> 00:16:38,470
<font color="#E5E5E5">for idiomatic code in all the languages</font>

426
00:16:36,970 --> 00:16:40,269
<font color="#E5E5E5">that</font><font color="#CCCCCC"> means when about the cheat</font><font color="#E5E5E5"> code</font>

427
00:16:38,470 --> 00:16:41,709
<font color="#E5E5E5">about idiomatic</font><font color="#CCCCCC"> C code which</font><font color="#E5E5E5"> means not</font>

428
00:16:40,269 --> 00:16:44,319
doing<font color="#CCCCCC"> bounced check because I know I'm</font>

429
00:16:41,709 --> 00:16:46,388
<font color="#E5E5E5">right and we have some profiling</font><font color="#CCCCCC"> results</font>

430
00:16:44,319 --> 00:16:48,519
that show that<font color="#CCCCCC"> the receiver execute</font>

431
00:16:46,389 --> 00:16:50,410
around 40<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 50</font><font color="#CCCCCC"> percent more</font>

432
00:16:48,519 --> 00:16:53,019
instructions to do the same stuff<font color="#E5E5E5"> but</font>

433
00:16:50,410 --> 00:16:55,389
<font color="#CCCCCC">only takes 10% more cycles to do so that</font>

434
00:16:53,019 --> 00:16:58,269
ships<font color="#E5E5E5"> an IPC of - where's the C version</font>

435
00:16:55,389 --> 00:17:00,850
has an<font color="#CCCCCC"> odyssey of</font><font color="#E5E5E5"> only one country and</font>

436
00:16:58,269 --> 00:17:02,799
enabling integer overflow checks in rust

437
00:17:00,850 --> 00:17:05,589
<font color="#E5E5E5">as an additional eight instructions</font>

438
00:17:02,799 --> 00:17:07,119
<font color="#E5E5E5">seven of which are branches at the same</font>

439
00:17:05,589 --> 00:17:09,309
time it<font color="#E5E5E5"> only reduces throughput by</font><font color="#CCCCCC"> one</font>

440
00:17:07,119 --> 00:17:11,378
<font color="#E5E5E5">percent again shown that a modern out of</font>

441
00:17:09,309 --> 00:17:14,408
<font color="#E5E5E5">audacity you can just speculate away on</font>

442
00:17:11,378 --> 00:17:15,519
all<font color="#E5E5E5"> almost all their safety checks thank</font>

443
00:17:14,409 --> 00:17:18,329
you Paul Thank<font color="#CCCCCC"> You Simon</font>

444
00:17:15,519 --> 00:17:18,329
<font color="#CCCCCC">if you enjoy</font>

445
00:17:22,599 --> 00:17:24,659
<font color="#E5E5E5">you</font>

