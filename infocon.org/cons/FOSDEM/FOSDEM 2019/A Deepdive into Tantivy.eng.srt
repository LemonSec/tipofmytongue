1
00:01:44,770 --> 00:01:48,840
<font color="#CCCCCC">any arrests so I</font>

2
00:02:21,040 --> 00:02:24,228
[Music]

3
00:03:21,330 --> 00:03:25,770
and I actually even

4
00:03:46,140 --> 00:03:51,989
<font color="#CCCCCC">both times it's</font><font color="#E5E5E5"> mostly such as doesn't</font>

5
00:03:49,290 --> 00:03:54,620
matter who eventually who knows the

6
00:03:51,990 --> 00:03:54,620
<font color="#CCCCCC">difference</font>

7
00:04:07,959 --> 00:04:22,259
and also<font color="#CCCCCC"> ideally I would like</font><font color="#E5E5E5"> to watch</font>

8
00:04:19,539 --> 00:04:22,259
their

9
00:04:27,180 --> 00:04:34,650
person suffering from<font color="#E5E5E5"> scratch entirety</font><font color="#CCCCCC"> I</font>

10
00:04:30,190 --> 00:04:34,650
<font color="#E5E5E5">wrote them to I at least consider using</font>

11
00:05:02,190 --> 00:05:05,190
<font color="#E5E5E5">Shunta</font>

12
00:05:10,800 --> 00:05:16,990
what's<font color="#CCCCCC"> reading</font><font color="#E5E5E5"> dusty let's begin like I</font>

13
00:05:13,690 --> 00:05:19,710
truly<font color="#E5E5E5"> am straight over for this festival</font>

14
00:05:16,990 --> 00:05:19,710
was<font color="#CCCCCC"> become bad</font>

15
00:06:04,280 --> 00:06:09,020
and as

16
00:07:41,180 --> 00:07:45,380
<font color="#CCCCCC">is nuts I</font><font color="#E5E5E5"> don't</font>

17
00:08:24,719 --> 00:08:27,719
my

18
00:08:42,880 --> 00:08:57,790
yeah so we're basically<font color="#E5E5E5"> buy so much in</font>

19
00:08:52,850 --> 00:08:57,790
<font color="#CCCCCC">support of the pie</font><font color="#E5E5E5"> symmetry is</font><font color="#CCCCCC"> Xbox</font>

20
00:09:00,220 --> 00:09:08,810
like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> hoodie and there is a base over</font>

21
00:09:05,150 --> 00:09:11,900
to France and<font color="#CCCCCC"> she will say</font><font color="#E5E5E5"> 20 porta</font>

22
00:09:08,810 --> 00:09:14,719
power and then<font color="#E5E5E5"> you ask one of the</font>

23
00:09:11,900 --> 00:09:19,569
adjectives<font color="#E5E5E5"> for all these centers</font><font color="#CCCCCC"> and so</font>

24
00:09:14,720 --> 00:09:19,570
<font color="#CCCCCC">-</font><font color="#E5E5E5"> likewise together constantly process</font>

25
00:09:21,839 --> 00:09:25,860
for Internet

26
00:09:47,990 --> 00:09:51,210
[Music]

27
00:10:00,150 --> 00:10:04,770
can you<font color="#E5E5E5"> track if you</font><font color="#CCCCCC"> let please</font>

28
00:10:23,490 --> 00:10:26,240
<font color="#E5E5E5">all right</font>

29
00:10:28,590 --> 00:10:35,020
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so usually that means</font><font color="#E5E5E5"> that you're</font>

30
00:10:32,290 --> 00:10:40,030
gonna want to build an in-depth<font color="#E5E5E5"> Linux</font>

31
00:10:35,020 --> 00:10:42,490
and an inverted<font color="#CCCCCC"> index is simply</font>

32
00:10:40,030 --> 00:10:48,040
something that<font color="#E5E5E5"> associates</font><font color="#CCCCCC"> to each term</font>

33
00:10:42,490 --> 00:10:51,130
list of sorted list of<font color="#CCCCCC"> shot a</font><font color="#E5E5E5"> list of</font>

34
00:10:48,040 --> 00:10:55,030
the<font color="#E5E5E5"> pages and this simple data structure</font>

35
00:10:51,130 --> 00:10:56,170
is sufficient to<font color="#E5E5E5"> actually compute any</font>

36
00:10:55,030 --> 00:10:58,270
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> good enjoy</font>

37
00:10:56,170 --> 00:11:01,420
so I'm gonna<font color="#E5E5E5"> explain a rapidly our</font>

38
00:10:58,270 --> 00:11:03,819
intersection walks so assuming that we

39
00:11:01,420 --> 00:11:05,500
<font color="#CCCCCC">are</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> all of the documents</font>

40
00:11:03,820 --> 00:11:08,050
that are<font color="#CCCCCC"> matching zirconia</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> mag</font><font color="#E5E5E5"> wait</font>

41
00:11:05,500 --> 00:11:10,300
we're gonna have like this<font color="#CCCCCC"> - posting</font>

42
00:11:08,050 --> 00:11:12,969
<font color="#E5E5E5">list</font><font color="#CCCCCC"> we take the first</font><font color="#E5E5E5"> one the</font><font color="#CCCCCC"> first</font>

43
00:11:10,300 --> 00:11:15,839
<font color="#CCCCCC">document of the first one is - and we</font>

44
00:11:12,970 --> 00:11:20,770
<font color="#E5E5E5">are going to seek into the second</font>

45
00:11:15,840 --> 00:11:22,390
posting list for the document - so by

46
00:11:20,770 --> 00:11:24,160
seeking what I should mean is<font color="#E5E5E5"> that we</font>

47
00:11:22,390 --> 00:11:28,600
are going<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> exactly as if we are</font>

48
00:11:24,160 --> 00:11:31,510
<font color="#E5E5E5">advancing well going through the</font>

49
00:11:28,600 --> 00:11:33,910
scanning<font color="#E5E5E5"> through</font><font color="#CCCCCC"> the second posting list</font>

50
00:11:31,510 --> 00:11:35,140
and we are<font color="#CCCCCC"> going to stop at the moment</font>

51
00:11:33,910 --> 00:11:36,969
where<font color="#CCCCCC"> we find the document that is</font>

52
00:11:35,140 --> 00:11:39,490
<font color="#E5E5E5">greater or equal to the document</font><font color="#CCCCCC"> if it's</font>

53
00:11:36,970 --> 00:11:41,920
equal then that means that<font color="#CCCCCC"> two is in the</font>

54
00:11:39,490 --> 00:11:47,350
<font color="#E5E5E5">intersection if it's greater than it's</font>

55
00:11:41,920 --> 00:11:49,630
<font color="#E5E5E5">not so again it's not and we found the</font>

56
00:11:47,350 --> 00:11:51,400
document<font color="#E5E5E5"> five and we are gonna like do</font>

57
00:11:49,630 --> 00:11:55,990
symmetrically we are going to add seek

58
00:11:51,400 --> 00:11:56,470
<font color="#E5E5E5">for five in the first posting list</font><font color="#CCCCCC"> there</font>

59
00:11:55,990 --> 00:11:59,770
we go

60
00:11:56,470 --> 00:12:02,470
five was found so it's gonna be now<font color="#E5E5E5"> we</font>

61
00:11:59,770 --> 00:12:05,740
can have done the first posting list<font color="#E5E5E5"> and</font>

62
00:12:02,470 --> 00:12:09,310
now we're seeking for<font color="#CCCCCC"> seven in the</font>

63
00:12:05,740 --> 00:12:12,030
second list and so<font color="#CCCCCC"> on so forth</font><font color="#E5E5E5"> until we</font>

64
00:12:09,310 --> 00:12:16,209
reach<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end of one of</font><font color="#CCCCCC"> the posting list</font>

65
00:12:12,030 --> 00:12:18,510
so don't<font color="#CCCCCC"> only take away there is</font><font color="#E5E5E5"> that if</font>

66
00:12:16,210 --> 00:12:22,320
you want<font color="#CCCCCC"> fast intersection</font><font color="#E5E5E5"> you need to</font>

67
00:12:18,510 --> 00:12:25,350
have a fast way to seek through the

68
00:12:22,320 --> 00:12:25,350
posting list

69
00:12:25,640 --> 00:12:30,860
for<font color="#E5E5E5"> union</font><font color="#CCCCCC"> its we could use the same</font>

70
00:12:28,820 --> 00:12:32,930
strategy like basically<font color="#E5E5E5"> it's like the</font>

71
00:12:30,860 --> 00:12:34,970
<font color="#CCCCCC">mail i everybody has</font><font color="#E5E5E5"> different name for</font>

72
00:12:32,930 --> 00:12:37,880
<font color="#CCCCCC">this algorithm that we could</font><font color="#E5E5E5"> merge put</font>

73
00:12:34,970 --> 00:12:40,100
those<font color="#CCCCCC"> two post English and and get the</font>

74
00:12:37,880 --> 00:12:42,080
<font color="#E5E5E5">Union</font><font color="#CCCCCC"> but that's actually inefficient so</font>

75
00:12:40,100 --> 00:12:43,960
I'm using the same trick as<font color="#E5E5E5"> Lucinda's</font>

76
00:12:42,080 --> 00:12:49,700
the idea that<font color="#E5E5E5"> you prepare in advance</font>

77
00:12:43,960 --> 00:12:51,800
<font color="#E5E5E5">some kind of</font><font color="#CCCCCC"> beat set here and so just</font>

78
00:12:49,700 --> 00:12:54,020
for the sake<font color="#CCCCCC"> of this slide the bit</font>

79
00:12:51,800 --> 00:12:58,579
search is actually<font color="#CCCCCC"> on offense AIDS</font><font color="#E5E5E5"> but</font>

80
00:12:54,020 --> 00:13:01,189
in tone TV we're using 4096 bit so it's

81
00:12:58,580 --> 00:13:03,470
much larger and what we do is that we

82
00:13:01,190 --> 00:13:07,370
<font color="#CCCCCC">are going</font><font color="#E5E5E5"> to take the first posting list</font>

83
00:13:03,470 --> 00:13:10,640
<font color="#E5E5E5">and we are gonna so so we are going to</font>

84
00:13:07,370 --> 00:13:16,040
append all of the talks<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> between</font>

85
00:13:10,640 --> 00:13:23,000
<font color="#CCCCCC">two</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> two plus so this origin</font><font color="#E5E5E5"> in this</font>

86
00:13:16,040 --> 00:13:25,010
case<font color="#CCCCCC"> eight but</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> 24,000 and we append</font>

87
00:13:23,000 --> 00:13:26,930
those<font color="#E5E5E5"> documents in this bit set</font><font color="#CCCCCC"> so in</font>

88
00:13:25,010 --> 00:13:28,760
this bits at the<font color="#E5E5E5"> first bit will mean to</font>

89
00:13:26,930 --> 00:13:30,739
<font color="#E5E5E5">the second it will mean 3 and so on</font>

90
00:13:28,760 --> 00:13:33,350
suppose we do that<font color="#E5E5E5"> for the first</font>

91
00:13:30,740 --> 00:13:37,010
<font color="#CCCCCC">position is and we do that on a second</font>

92
00:13:33,350 --> 00:13:39,530
time<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> zoo composting this is what</font>

93
00:13:37,010 --> 00:13:40,030
we<font color="#E5E5E5"> get for bit set and now we can flush</font>

94
00:13:39,530 --> 00:13:42,920
it

95
00:13:40,030 --> 00:13:47,120
<font color="#E5E5E5">so we transform the</font><font color="#CCCCCC"> decreases bit set</font>

96
00:13:42,920 --> 00:13:49,760
into the document that<font color="#CCCCCC"> it represented so</font>

97
00:13:47,120 --> 00:13:52,130
it can be done quite fast<font color="#CCCCCC"> because your</font>

98
00:13:49,760 --> 00:13:57,410
CPU usually has an instruction<font color="#E5E5E5"> to</font><font color="#CCCCCC"> pop</font>

99
00:13:52,130 --> 00:14:01,850
<font color="#CCCCCC">the lowest significant bits out</font><font color="#E5E5E5"> of 64</font>

100
00:13:57,410 --> 00:14:05,980
bit<font color="#E5E5E5"> world so you just pop</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> so on</font>

101
00:14:01,850 --> 00:14:10,250
of course<font color="#E5E5E5"> all right so that's how</font>

102
00:14:05,980 --> 00:14:10,730
<font color="#CCCCCC">interested index is used</font><font color="#E5E5E5"> to compute</font><font color="#CCCCCC"> per</font>

103
00:14:10,250 --> 00:14:13,370
<font color="#CCCCCC">employee</font>

104
00:14:10,730 --> 00:14:18,140
<font color="#E5E5E5">now the question is how do we represent</font>

105
00:14:13,370 --> 00:14:20,210
<font color="#E5E5E5">that on</font><font color="#CCCCCC"> disk so tone CD is relying on a</font>

106
00:14:18,140 --> 00:14:22,010
map for all of its i/o and when you

107
00:14:20,210 --> 00:14:24,200
start on<font color="#CCCCCC"> TV</font><font color="#E5E5E5"> the only</font><font color="#CCCCCC"> thing that it does</font>

108
00:14:22,010 --> 00:14:26,780
is basically I'm mapping all of the file

109
00:14:24,200 --> 00:14:31,700
of<font color="#E5E5E5"> the index it goes really fast it's</font>

110
00:14:26,780 --> 00:14:34,010
ready to<font color="#CCCCCC"> go so we don't have to load any</font>

111
00:14:31,700 --> 00:14:35,690
data structure<font color="#E5E5E5"> and put that in</font><font color="#CCCCCC"> any</font>

112
00:14:34,010 --> 00:14:37,580
<font color="#E5E5E5">anonymous memory and</font>

113
00:14:35,690 --> 00:14:39,830
and like have<font color="#E5E5E5"> some kind of harsh map in</font>

114
00:14:37,580 --> 00:14:42,490
an<font color="#CCCCCC"> image memory</font><font color="#E5E5E5"> everything is on a map</font>

115
00:14:39,830 --> 00:14:45,650
so<font color="#E5E5E5"> so stuff that time is very very nice</font>

116
00:14:42,490 --> 00:14:50,390
<font color="#E5E5E5">but that</font><font color="#CCCCCC"> means that</font><font color="#E5E5E5"> we need to have data</font>

117
00:14:45,650 --> 00:14:52,280
on the disk that is usable as is for

118
00:14:50,390 --> 00:14:55,600
<font color="#E5E5E5">travel people and animals memory is more</font>

119
00:14:52,280 --> 00:14:55,600
or<font color="#CCCCCC"> less like a sheet</font>

120
00:14:57,580 --> 00:15:03,440
so the first other<font color="#CCCCCC"> structure that</font><font color="#E5E5E5"> we are</font>

121
00:15:00,470 --> 00:15:05,600
<font color="#E5E5E5">gonna have to you have in our index is</font>

122
00:15:03,440 --> 00:15:09,500
<font color="#E5E5E5">the term Nick shine</font><font color="#CCCCCC"> so a</font><font color="#E5E5E5"> term</font><font color="#CCCCCC"> addiction</font>

123
00:15:05,600 --> 00:15:12,200
I will be<font color="#E5E5E5"> after</font><font color="#CCCCCC"> big dictionary will be</font>

124
00:15:09,500 --> 00:15:15,110
<font color="#E5E5E5">broken down into two step one step will</font>

125
00:15:12,200 --> 00:15:17,690
associate the terms of<font color="#E5E5E5"> like the sequence</font>

126
00:15:15,110 --> 00:15:20,480
of<font color="#E5E5E5"> writers</font><font color="#CCCCCC"> that with the term to some</font>

127
00:15:17,690 --> 00:15:21,590
kind of<font color="#E5E5E5"> term ID and then we're gonna</font>

128
00:15:20,480 --> 00:15:23,420
have another data structure<font color="#E5E5E5"> that</font>

129
00:15:21,590 --> 00:15:26,270
<font color="#E5E5E5">Associates a term ID through some kind</font>

130
00:15:23,420 --> 00:15:29,000
<font color="#E5E5E5">of their meaningful strokes a timing but</font>

131
00:15:26,270 --> 00:15:32,660
basically<font color="#E5E5E5"> like half point of two files</font>

132
00:15:29,000 --> 00:15:35,480
<font color="#E5E5E5">and like so the beginning of the first</font>

133
00:15:32,660 --> 00:15:37,069
English<font color="#CCCCCC"> Winters I'm not gonna talk</font><font color="#E5E5E5"> about</font>

134
00:15:35,480 --> 00:15:38,930
<font color="#E5E5E5">the second</font><font color="#CCCCCC"> data structure because it's</font>

135
00:15:37,070 --> 00:15:42,560
going but<font color="#CCCCCC"> let's talk about</font><font color="#E5E5E5"> the first one</font>

136
00:15:38,930 --> 00:15:46,969
<font color="#CCCCCC">so how do</font><font color="#E5E5E5"> we go from terms</font><font color="#CCCCCC"> sequences</font>

137
00:15:42,560 --> 00:15:49,670
<font color="#E5E5E5">right to damn idea</font><font color="#CCCCCC"> so if you are</font>

138
00:15:46,970 --> 00:15:52,430
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> trying to build your own search</font>

139
00:15:49,670 --> 00:15:54,979
engine<font color="#CCCCCC"> you will have two broad kind of</font>

140
00:15:52,430 --> 00:15:57,140
<font color="#E5E5E5">family for this</font><font color="#CCCCCC"> solution one could</font><font color="#E5E5E5"> be</font>

141
00:15:54,980 --> 00:15:58,940
like harsh<font color="#E5E5E5"> based engine are maybe you</font>

142
00:15:57,140 --> 00:16:01,699
will go<font color="#CCCCCC"> fancy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> the effect</font>

143
00:15:58,940 --> 00:16:04,580
<font color="#E5E5E5">harsh or</font><font color="#CCCCCC"> anything like that</font><font color="#E5E5E5"> it's a very</font>

144
00:16:01,700 --> 00:16:06,560
nice solution in the sense<font color="#CCCCCC"> that we you</font>

145
00:16:04,580 --> 00:16:09,440
<font color="#E5E5E5">you would get</font><font color="#CCCCCC"> like very</font><font color="#E5E5E5"> fast hookups and</font>

146
00:16:06,560 --> 00:16:11,060
especially if you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> much RAM</font>

147
00:16:09,440 --> 00:16:14,330
and everything is<font color="#E5E5E5"> sitting on your hard</font>

148
00:16:11,060 --> 00:16:17,510
disk<font color="#CCCCCC"> you will probably</font><font color="#E5E5E5"> require very</font>

149
00:16:14,330 --> 00:16:19,610
little<font color="#CCCCCC"> IO to do that your hash map will</font>

150
00:16:17,510 --> 00:16:21,860
<font color="#CCCCCC">be able to send you directly in the</font>

151
00:16:19,610 --> 00:16:25,430
right place on your list<font color="#E5E5E5"> another</font>

152
00:16:21,860 --> 00:16:31,300
<font color="#CCCCCC">solution is</font><font color="#E5E5E5"> using like a tree based</font>

153
00:16:25,430 --> 00:16:35,989
<font color="#CCCCCC">solution or like a trial so this will</font>

154
00:16:31,300 --> 00:16:39,680
require this we use<font color="#E5E5E5"> slightly more CPU</font>

155
00:16:35,990 --> 00:16:42,550
<font color="#E5E5E5">and you will have a lot more random i/o</font>

156
00:16:39,680 --> 00:16:46,000
so that<font color="#CCCCCC"> kind of depends</font><font color="#E5E5E5"> on</font>

157
00:16:42,550 --> 00:16:48,550
the layout of your<font color="#E5E5E5"> data but you tend</font><font color="#CCCCCC"> to</font>

158
00:16:46,000 --> 00:16:50,740
jump from<font color="#E5E5E5"> one node of your try to</font>

159
00:16:48,550 --> 00:16:54,760
another node of your choice it was my

160
00:16:50,740 --> 00:17:00,040
dear<font color="#E5E5E5"> root of</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there is a is on your</font>

161
00:16:54,760 --> 00:17:03,160
<font color="#E5E5E5">disk but it has a lot of benefits</font><font color="#CCCCCC"> so one</font>

162
00:17:00,040 --> 00:17:08,050
<font color="#CCCCCC">benefit is you can iterate for a round</font>

163
00:17:03,160 --> 00:17:11,020
of keys you can<font color="#E5E5E5"> so naturally you</font><font color="#CCCCCC"> will</font>

164
00:17:08,050 --> 00:17:18,220
probably<font color="#CCCCCC"> use</font><font color="#E5E5E5"> them all the nodes so by</font>

165
00:17:11,020 --> 00:17:20,650
Domino's I mean if<font color="#CCCCCC"> Arabica is your first</font>

166
00:17:18,220 --> 00:17:24,970
<font color="#E5E5E5">word in your dictionary then it would</font>

167
00:17:20,650 --> 00:17:27,459
get<font color="#CCCCCC"> term IDC rule</font><font color="#E5E5E5"> the first word</font>

168
00:17:24,970 --> 00:17:29,710
so when softened<font color="#E5E5E5"> lexicographic</font><font color="#CCCCCC"> came in</font>

169
00:17:27,459 --> 00:17:31,570
and then<font color="#E5E5E5"> the second word might be</font>

170
00:17:29,710 --> 00:17:34,750
something starting by<font color="#E5E5E5"> abs and it would</font>

171
00:17:31,570 --> 00:17:36,129
get<font color="#CCCCCC"> gamma D</font><font color="#E5E5E5"> no B term with 10 watt a</font>

172
00:17:34,750 --> 00:17:39,550
node<font color="#E5E5E5"> 2 and</font><font color="#CCCCCC"> sunspots</font>

173
00:17:36,130 --> 00:17:41,160
<font color="#E5E5E5">so tomodea nodes will</font><font color="#CCCCCC"> Ted your term ID</font>

174
00:17:39,550 --> 00:17:42,639
will<font color="#CCCCCC"> be soft at exactly</font><font color="#E5E5E5"> the same whether</font>

175
00:17:41,160 --> 00:17:45,820
<font color="#E5E5E5">your terms</font>

176
00:17:42,640 --> 00:17:48,850
that's a very<font color="#E5E5E5"> nice property but more</font>

177
00:17:45,820 --> 00:17:53,020
importantly<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> an intersection</font>

178
00:17:48,850 --> 00:17:58,330
of you try or<font color="#CCCCCC"> you try like structure</font>

179
00:17:53,020 --> 00:18:04,920
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> gfs who are you guys familiar</font>

180
00:17:58,330 --> 00:18:07,419
with with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> DFA</font><font color="#CCCCCC"> is okay we we still</font>

181
00:18:04,920 --> 00:18:12,460
explain<font color="#CCCCCC"> it a little</font><font color="#E5E5E5"> I actually made a</font>

182
00:18:07,420 --> 00:18:14,830
<font color="#CCCCCC">mistake in the</font><font color="#E5E5E5"> year but so that's one so</font>

183
00:18:12,460 --> 00:18:16,870
Jeff S stands for deterministic finite

184
00:18:14,830 --> 00:18:19,360
automaton<font color="#CCCCCC"> and that's one way to</font>

185
00:18:16,870 --> 00:18:22,290
implement<font color="#E5E5E5"> regular expression so</font><font color="#CCCCCC"> we can</font>

186
00:18:19,360 --> 00:18:26,409
transform any regularize question into

187
00:18:22,290 --> 00:18:30,730
an automaton<font color="#E5E5E5"> like this one and the way</font>

188
00:18:26,410 --> 00:18:35,200
it works is once you<font color="#E5E5E5"> have it into this</font>

189
00:18:30,730 --> 00:18:38,020
<font color="#CCCCCC">shape then matching a string on this</font>

190
00:18:35,200 --> 00:18:41,890
automata<font color="#E5E5E5"> means that you're going to</font>

191
00:18:38,020 --> 00:18:44,680
consume every<font color="#CCCCCC"> chart in</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> stream</font><font color="#E5E5E5"> you</font>

192
00:18:41,890 --> 00:18:46,120
start in the state<font color="#E5E5E5"> over there I was</font>

193
00:18:44,680 --> 00:18:48,100
hoping I could point out<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> at</font>

194
00:18:46,120 --> 00:18:50,529
attention

195
00:18:48,100 --> 00:18:52,840
so you<font color="#E5E5E5"> started the</font><font color="#CCCCCC"> wait</font><font color="#E5E5E5"> sit over there</font>

196
00:18:50,529 --> 00:18:55,510
<font color="#CCCCCC">and let's say that</font><font color="#E5E5E5"> you are trying to</font>

197
00:18:52,840 --> 00:18:59,889
match<font color="#CCCCCC"> carousel your first char is see</font>

198
00:18:55,510 --> 00:19:02,529
you look at the outbound arrows that<font color="#E5E5E5"> I</font>

199
00:18:59,890 --> 00:19:05,019
emitted by the state<font color="#E5E5E5"> you are in</font><font color="#CCCCCC"> our one</font>

200
00:19:02,529 --> 00:19:06,640
is labelled<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the C so I think that</font>

201
00:19:05,019 --> 00:19:09,610
after consuming the<font color="#E5E5E5"> see I'm in that</font>

202
00:19:06,640 --> 00:19:11,169
state<font color="#CCCCCC"> so</font><font color="#E5E5E5"> 0 1 and then cows</font><font color="#CCCCCC"> are second</font>

203
00:19:09,610 --> 00:19:14,769
later<font color="#E5E5E5"> is an a I'm gonna follow this</font>

204
00:19:11,169 --> 00:19:20,220
<font color="#CCCCCC">letter this arrow and I'm in the blue</font>

205
00:19:14,769 --> 00:19:25,500
state<font color="#CCCCCC"> ah I end up in</font><font color="#E5E5E5"> this state and we</font>

206
00:19:20,220 --> 00:19:28,690
<font color="#CCCCCC">sell</font><font color="#E5E5E5"> until the</font><font color="#CCCCCC"> say Tigers</font><font color="#E5E5E5"> without the</font><font color="#CCCCCC"> L</font>

207
00:19:25,500 --> 00:19:32,019
will be following the arrow with a star

208
00:19:28,690 --> 00:19:37,179
over there<font color="#CCCCCC"> and then also</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> L will</font>

209
00:19:32,019 --> 00:19:39,850
bring me to<font color="#CCCCCC"> the end state so it's really</font>

210
00:19:37,179 --> 00:19:42,309
<font color="#E5E5E5">nice because I'm advancing one chart</font><font color="#CCCCCC"> a</font>

211
00:19:39,850 --> 00:19:48,039
time and I<font color="#E5E5E5"> just have to look at the</font>

212
00:19:42,309 --> 00:19:49,570
state of the<font color="#CCCCCC"> the end state of</font><font color="#E5E5E5"> my string</font>

213
00:19:48,039 --> 00:19:52,330
to say<font color="#E5E5E5"> whether I matched or</font><font color="#CCCCCC"> not</font>

214
00:19:49,570 --> 00:19:56,019
<font color="#E5E5E5">now I must state</font><font color="#CCCCCC"> that match by a double</font>

215
00:19:52,330 --> 00:20:01,510
circle here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll try it looks</font><font color="#E5E5E5"> like</font>

216
00:19:56,019 --> 00:20:04,450
this and it's it's<font color="#CCCCCC"> actually possible to</font>

217
00:20:01,510 --> 00:20:07,500
<font color="#E5E5E5">much to this DFA about</font><font color="#CCCCCC"> the try very</font>

218
00:20:04,450 --> 00:20:12,519
efficiently so I'm gonna show it's done

219
00:20:07,500 --> 00:20:14,950
so here if<font color="#CCCCCC"> we consume this</font><font color="#E5E5E5"> here we end</font>

220
00:20:12,519 --> 00:20:17,110
up in the yellow state just like Raquel

221
00:20:14,950 --> 00:20:20,409
<font color="#E5E5E5">said</font><font color="#CCCCCC"> they consume the a</font><font color="#E5E5E5"> I end up in the</font>

222
00:20:17,110 --> 00:20:22,299
blue states<font color="#E5E5E5"> if I get to</font><font color="#CCCCCC"> B then I</font>

223
00:20:20,409 --> 00:20:25,000
underpin this<font color="#E5E5E5"> gray state which happened</font>

224
00:20:22,299 --> 00:20:26,889
to be a sink<font color="#E5E5E5"> so the sink is a dead end</font>

225
00:20:25,000 --> 00:20:29,110
we will never match if<font color="#CCCCCC"> you reach</font><font color="#E5E5E5"> the</font>

226
00:20:26,889 --> 00:20:32,979
state<font color="#E5E5E5"> we don't need to see what happens</font>

227
00:20:29,110 --> 00:20:35,320
with the following characters and that's

228
00:20:32,980 --> 00:20:37,210
<font color="#E5E5E5">great because that means</font><font color="#CCCCCC"> that all of</font>

229
00:20:35,320 --> 00:20:38,139
<font color="#CCCCCC">this sub-tree</font><font color="#E5E5E5"> we don't care about</font>

230
00:20:37,210 --> 00:20:41,230
<font color="#CCCCCC">anymore</font>

231
00:20:38,139 --> 00:20:43,570
so for the purpose of fitting<font color="#E5E5E5"> string</font>

232
00:20:41,230 --> 00:20:46,059
into<font color="#CCCCCC"> the slides</font><font color="#E5E5E5"> this way is very</font><font color="#CCCCCC"> simple</font>

233
00:20:43,570 --> 00:20:53,620
but<font color="#E5E5E5"> you can imagine that maybe is as a</font>

234
00:20:46,059 --> 00:20:56,320
gigantic tree that is<font color="#CCCCCC"> a child of this</font>

235
00:20:53,620 --> 00:20:59,739
node and we just cut that<font color="#E5E5E5"> so that's much</font>

236
00:20:56,320 --> 00:21:02,139
much faster and now we want<font color="#E5E5E5"> to much</font>

237
00:20:59,740 --> 00:21:04,149
we don't have to recompute<font color="#E5E5E5"> what is a</font>

238
00:21:02,140 --> 00:21:07,210
state required for<font color="#CCCCCC"> air we</font><font color="#E5E5E5"> can just look</font>

239
00:21:04,149 --> 00:21:10,199
at the<font color="#CCCCCC"> state of a before so it's</font><font color="#E5E5E5"> true</font>

240
00:21:07,210 --> 00:21:11,409
and<font color="#CCCCCC"> we see that we are in the sink state</font>

241
00:21:10,200 --> 00:21:13,870
again

242
00:21:11,409 --> 00:21:17,700
and and so<font color="#CCCCCC"> on so forth so we</font><font color="#E5E5E5"> are just</font>

243
00:21:13,870 --> 00:21:22,059
<font color="#CCCCCC">putting corrosive our try to</font><font color="#E5E5E5"> guess which</font>

244
00:21:17,700 --> 00:21:24,850
which<font color="#CCCCCC"> Terra mean our</font><font color="#E5E5E5"> dictionary</font><font color="#CCCCCC"> our</font>

245
00:21:22,059 --> 00:21:27,279
matching your deterministic<font color="#E5E5E5"> finite</font>

246
00:21:24,850 --> 00:21:28,418
automaton<font color="#CCCCCC"> that means that I can go</font>

247
00:21:27,279 --> 00:21:31,929
<font color="#CCCCCC">through all of the terms</font><font color="#E5E5E5"> that match our</font>

248
00:21:28,419 --> 00:21:34,240
<font color="#CCCCCC">eager expression</font><font color="#E5E5E5"> but also I can get very</font>

249
00:21:31,929 --> 00:21:36,909
rapidly<font color="#CCCCCC"> all of the terms that are</font><font color="#E5E5E5"> at</font>

250
00:21:34,240 --> 00:21:39,370
<font color="#CCCCCC">level strange distance or edit distance</font>

251
00:21:36,909 --> 00:21:42,760
of one of<font color="#E5E5E5"> two that means that if you</font><font color="#CCCCCC"> are</font>

252
00:21:39,370 --> 00:21:46,209
asking<font color="#E5E5E5"> me please string me all of the</font>

253
00:21:42,760 --> 00:21:49,710
terms that are one type away<font color="#E5E5E5"> from what I</font>

254
00:21:46,210 --> 00:21:54,510
<font color="#E5E5E5">tied</font><font color="#CCCCCC"> I can do</font><font color="#E5E5E5"> that very very efficiently</font>

255
00:21:49,710 --> 00:21:56,740
<font color="#E5E5E5">so tone TV is using a like tree based</font>

256
00:21:54,510 --> 00:22:01,500
solution<font color="#E5E5E5"> it's actually using a finished</font>

257
00:21:56,740 --> 00:22:03,520
state from<font color="#E5E5E5"> this machine those two and I</font>

258
00:22:01,500 --> 00:22:05,980
did not<font color="#E5E5E5"> have to cut anything</font>

259
00:22:03,520 --> 00:22:08,379
the<font color="#CCCCCC"> rustico system is nice enough that</font>

260
00:22:05,980 --> 00:22:10,450
<font color="#E5E5E5">somebody already coded</font><font color="#CCCCCC"> a very nice</font>

261
00:22:08,380 --> 00:22:14,770
implementation of<font color="#E5E5E5"> finished a transducer</font>

262
00:22:10,450 --> 00:22:17,789
<font color="#CCCCCC">I will not explain</font><font color="#E5E5E5"> how it works</font><font color="#CCCCCC"> because</font>

263
00:22:14,770 --> 00:22:21,549
I didn't<font color="#CCCCCC"> call</font><font color="#E5E5E5"> it but things that you</font>

264
00:22:17,789 --> 00:22:25,830
might<font color="#CCCCCC"> want to know about</font><font color="#E5E5E5"> it is it's</font>

265
00:22:21,549 --> 00:22:29,490
pretty<font color="#E5E5E5"> much like a</font><font color="#CCCCCC"> try exact except that</font>

266
00:22:25,830 --> 00:22:31,870
<font color="#CCCCCC">knots can</font><font color="#E5E5E5"> share a few fixes so you you</font>

267
00:22:29,490 --> 00:22:34,929
try will never have an arrow that goes

268
00:22:31,870 --> 00:22:37,120
<font color="#E5E5E5">like this right so because it can share</font>

269
00:22:34,929 --> 00:22:40,600
fixes you end up with something<font color="#CCCCCC"> this</font>

270
00:22:37,120 --> 00:22:43,090
slightly<font color="#E5E5E5"> more</font><font color="#CCCCCC"> compact</font><font color="#E5E5E5"> on a try and</font>

271
00:22:40,600 --> 00:22:48,010
<font color="#E5E5E5">that's always a very nice feature when</font>

272
00:22:43,090 --> 00:22:49,720
you're<font color="#CCCCCC"> being space with</font><font color="#E5E5E5"> your run now</font>

273
00:22:48,010 --> 00:22:52,960
let's talk a little bit<font color="#CCCCCC"> about how we are</font>

274
00:22:49,720 --> 00:22:55,390
going<font color="#CCCCCC"> to encode posting lists so posting</font>

275
00:22:52,960 --> 00:22:59,610
<font color="#CCCCCC">this</font><font color="#E5E5E5"> a lot of integers it's going to</font>

276
00:22:55,390 --> 00:23:03,720
take a lot of the size of your<font color="#CCCCCC"> index and</font>

277
00:22:59,610 --> 00:23:03,719
you're going to<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to compress</font><font color="#E5E5E5"> them</font>

278
00:23:04,500 --> 00:23:08,850
integer compression is a field that<font color="#E5E5E5"> has</font>

279
00:23:07,020 --> 00:23:13,350
been<font color="#CCCCCC"> well</font><font color="#E5E5E5"> studied</font><font color="#CCCCCC"> there is a lot of</font>

280
00:23:08,850 --> 00:23:17,219
solution to do integer compression<font color="#CCCCCC"> i put</font>

281
00:23:13,350 --> 00:23:19,590
the chopped<font color="#E5E5E5"> over there but basically my</font>

282
00:23:17,220 --> 00:23:22,320
point<font color="#E5E5E5"> here</font><font color="#CCCCCC"> is you have a trade-off</font>

283
00:23:19,590 --> 00:23:24,059
<font color="#E5E5E5">between something that is compressing a</font>

284
00:23:22,320 --> 00:23:25,470
lot so it's always<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> you</font>

285
00:23:24,059 --> 00:23:26,910
have<font color="#E5E5E5"> to choose with something that</font>

286
00:23:25,470 --> 00:23:31,920
<font color="#E5E5E5">compress</font><font color="#CCCCCC"> the rods and</font><font color="#E5E5E5"> something that is</font>

287
00:23:26,910 --> 00:23:35,429
<font color="#CCCCCC">very fast another thing that</font><font color="#E5E5E5"> I need to</font>

288
00:23:31,920 --> 00:23:39,840
<font color="#E5E5E5">point out is basically all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the guys</font>

289
00:23:35,429 --> 00:23:42,290
<font color="#CCCCCC">are over there</font><font color="#E5E5E5"> and yeah all of</font><font color="#CCCCCC"> these all</font>

290
00:23:39,840 --> 00:23:45,389
of the best algorithm<font color="#E5E5E5"> they're all using</font>

291
00:23:42,290 --> 00:23:49,260
<font color="#CCCCCC">Cindy instructions to sync the</font>

292
00:23:45,390 --> 00:23:51,210
instructions<font color="#E5E5E5"> are instruction on your CPU</font>

293
00:23:49,260 --> 00:23:58,740
<font color="#E5E5E5">that makes it possible for you to</font>

294
00:23:51,210 --> 00:24:02,340
<font color="#E5E5E5">process for</font><font color="#CCCCCC"> 8 integer at a time so</font>

295
00:23:58,740 --> 00:24:07,640
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> something that actually</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> CD</font>

296
00:24:02,340 --> 00:24:07,639
is using a lot so I<font color="#CCCCCC"> TV</font><font color="#E5E5E5"> is actually using</font>

297
00:24:09,830 --> 00:24:17,699
<font color="#E5E5E5">so it's a it's a compression</font><font color="#CCCCCC"> scheme that</font>

298
00:24:14,940 --> 00:24:19,140
has been designed<font color="#CCCCCC"> by</font><font color="#E5E5E5"> Danielle</font><font color="#CCCCCC"> linear I</font>

299
00:24:17,700 --> 00:24:20,280
recommend you to read this<font color="#E5E5E5"> book it's</font>

300
00:24:19,140 --> 00:24:23,340
always very interesting<font color="#CCCCCC"> if you're</font>

301
00:24:20,280 --> 00:24:25,879
interested in in things<font color="#CCCCCC"> related with</font>

302
00:24:23,340 --> 00:24:30,600
search or data structures

303
00:24:25,880 --> 00:24:33,450
<font color="#CCCCCC">I used to depend</font><font color="#E5E5E5"> on his library</font><font color="#CCCCCC"> actually</font>

304
00:24:30,600 --> 00:24:35,699
in C and I removed<font color="#E5E5E5"> it because I I prefer</font>

305
00:24:33,450 --> 00:24:40,230
to be entirely interest and I we

306
00:24:35,700 --> 00:24:44,760
implemented it entirely<font color="#E5E5E5"> in rust the gist</font>

307
00:24:40,230 --> 00:24:47,820
<font color="#E5E5E5">of it is like mini of the scheme</font><font color="#CCCCCC"> you're</font>

308
00:24:44,760 --> 00:24:51,240
posting<font color="#E5E5E5"> lists are increasing so it</font>

309
00:24:47,820 --> 00:24:53,909
starts by doing something<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Delta</font>

310
00:24:51,240 --> 00:24:55,890
encoding<font color="#E5E5E5"> so instead</font><font color="#CCCCCC"> of compressing your</font>

311
00:24:53,910 --> 00:24:57,179
integer directly what you do is that<font color="#CCCCCC"> you</font>

312
00:24:55,890 --> 00:24:59,250
take the difference<font color="#E5E5E5"> between two</font>

313
00:24:57,179 --> 00:25:03,150
consecutive integers and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> get</font>

314
00:24:59,250 --> 00:25:10,940
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> much smaller</font><font color="#CCCCCC"> you take</font>

315
00:25:03,150 --> 00:25:17,320
a pack of those so in<font color="#CCCCCC"> my case blocks</font><font color="#E5E5E5"> are</font>

316
00:25:10,940 --> 00:25:20,950
128 integer wrong and out of those

317
00:25:17,320 --> 00:25:22,928
<font color="#E5E5E5">rather than 28 deltas you look at the</font>

318
00:25:20,950 --> 00:25:27,100
one<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> a larger so I think it's</font>

319
00:25:22,929 --> 00:25:28,840
example it should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> one at 16</font><font color="#CCCCCC"> and</font>

320
00:25:27,100 --> 00:25:31,629
<font color="#CCCCCC">you can you notice</font><font color="#E5E5E5"> that you can be</font>

321
00:25:28,840 --> 00:25:33,879
represented using five bits<font color="#CCCCCC"> so what you</font>

322
00:25:31,630 --> 00:25:38,769
do then<font color="#CCCCCC"> is that you represent all of</font>

323
00:25:33,880 --> 00:25:41,289
<font color="#E5E5E5">show</font><font color="#CCCCCC"> deltas over five bits and you just</font>

324
00:25:38,769 --> 00:25:45,669
concatenate<font color="#CCCCCC"> depression so that's called</font>

325
00:25:41,289 --> 00:25:50,080
<font color="#CCCCCC">peat packing so I</font><font color="#E5E5E5"> described what was the</font>

326
00:25:45,669 --> 00:25:52,929
solution<font color="#E5E5E5"> for like the scalar version of</font>

327
00:25:50,080 --> 00:25:55,240
it packing<font color="#E5E5E5"> what I do is actually I use</font>

328
00:25:52,929 --> 00:25:58,990
<font color="#CCCCCC">Cynthia instruction for that</font><font color="#E5E5E5"> and I do</font>

329
00:25:55,240 --> 00:26:01,179
that<font color="#CCCCCC"> with 22 times so Eddie could</font><font color="#E5E5E5"> for</font>

330
00:25:58,990 --> 00:26:04,240
<font color="#E5E5E5">integer at the time and so algorithm</font>

331
00:26:01,179 --> 00:26:07,090
really<font color="#E5E5E5"> looks like like this trick</font><font color="#CCCCCC"> that</font>

332
00:26:04,240 --> 00:26:11,740
we were<font color="#CCCCCC"> using at school to avoid</font><font color="#E5E5E5"> like</font>

333
00:26:07,090 --> 00:26:14,918
writing<font color="#E5E5E5"> lines when we are</font><font color="#CCCCCC"> pinched</font><font color="#E5E5E5"> by our</font>

334
00:26:11,740 --> 00:26:18,820
professor<font color="#E5E5E5"> so it use exactly the</font><font color="#CCCCCC"> same</font>

335
00:26:14,919 --> 00:26:22,419
algorithm<font color="#CCCCCC"> at the scatter solution</font><font color="#E5E5E5"> you</font>

336
00:26:18,820 --> 00:26:25,360
<font color="#E5E5E5">just choose Cindy instruction in place</font>

337
00:26:22,419 --> 00:26:30,970
of like the<font color="#E5E5E5"> scalar instruction it's very</font>

338
00:26:25,360 --> 00:26:33,399
very simple<font color="#CCCCCC"> and an interesting</font>

339
00:26:30,970 --> 00:26:36,039
improvements compared to the<font color="#CCCCCC"> method</font><font color="#E5E5E5"> that</font>

340
00:26:33,399 --> 00:26:40,928
existed before<font color="#CCCCCC"> Daniel Amir's paper which</font>

341
00:26:36,039 --> 00:26:44,110
is so algorithm<font color="#E5E5E5"> also take</font><font color="#CCCCCC"> advantage of</font>

342
00:26:40,929 --> 00:26:46,629
<font color="#E5E5E5">the fact that as we</font><font color="#CCCCCC"> are decoding the</font>

343
00:26:44,110 --> 00:26:50,168
integer<font color="#CCCCCC"> we end up at one</font><font color="#E5E5E5"> point where we</font>

344
00:26:46,629 --> 00:26:54,219
have one register with<font color="#CCCCCC"> deltas that we</font>

345
00:26:50,169 --> 00:26:56,320
are decoding and we can decode the<font color="#E5E5E5"> Delta</font>

346
00:26:54,220 --> 00:26:58,870
using<font color="#CCCCCC"> Cindy instruction as well</font><font color="#E5E5E5"> so this</font>

347
00:26:56,320 --> 00:27:00,100
<font color="#CCCCCC">is also</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> similar instruction and we do</font>

348
00:26:58,870 --> 00:27:01,658
that at<font color="#E5E5E5"> the point where there are</font>

349
00:27:00,100 --> 00:27:03,070
<font color="#CCCCCC">already in the</font><font color="#E5E5E5"> register so it goes</font>

350
00:27:01,659 --> 00:27:05,200
really<font color="#E5E5E5"> really fast and we're</font><font color="#CCCCCC"> talking</font>

351
00:27:03,070 --> 00:27:07,299
<font color="#CCCCCC">about when I say fast to give you an</font>

352
00:27:05,200 --> 00:27:10,779
idea<font color="#E5E5E5"> I'm talking</font><font color="#CCCCCC"> about four billion in G</font>

353
00:27:07,299 --> 00:27:12,519
Joseph<font color="#CCCCCC"> M</font><font color="#E5E5E5"> we are already very we were</font>

354
00:27:10,779 --> 00:27:17,139
<font color="#E5E5E5">flirting with the bond width of your</font><font color="#CCCCCC"> RAM</font>

355
00:27:12,519 --> 00:27:22,419
delicate so I I<font color="#CCCCCC"> told you that Russ</font><font color="#E5E5E5"> was</font>

356
00:27:17,139 --> 00:27:23,860
nice<font color="#E5E5E5"> and was able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> compile like very</font>

357
00:27:22,419 --> 00:27:26,500
efficient code that it was very close<font color="#E5E5E5"> to</font>

358
00:27:23,860 --> 00:27:27,370
<font color="#E5E5E5">C plus person so I wrote</font><font color="#CCCCCC"> that in rust</font>

359
00:27:26,500 --> 00:27:29,530
<font color="#E5E5E5">and this is</font>

360
00:27:27,370 --> 00:27:32,770
some<font color="#E5E5E5"> is generated I'm not gonna tell you</font>

361
00:27:29,530 --> 00:27:35,950
that<font color="#E5E5E5"> I understand what's what's in there</font>

362
00:27:32,770 --> 00:27:39,370
<font color="#CCCCCC">but</font><font color="#E5E5E5"> important point here</font><font color="#CCCCCC"> is that all of</font>

363
00:27:35,950 --> 00:27:41,230
the like long looking instruction<font color="#E5E5E5"> over</font>

364
00:27:39,370 --> 00:27:44,649
there<font color="#E5E5E5"> every single</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of those is</font>

365
00:27:41,230 --> 00:27:46,510
<font color="#E5E5E5">walking on four bytes at a time and you</font>

366
00:27:44,650 --> 00:27:51,880
will<font color="#E5E5E5"> see</font><font color="#CCCCCC"> scalar instruction maybe here</font>

367
00:27:46,510 --> 00:27:55,090
<font color="#E5E5E5">here here so the the assembly code that</font>

368
00:27:51,880 --> 00:27:59,020
is generated is really as good as

369
00:27:55,090 --> 00:28:00,730
possible<font color="#CCCCCC"> it's very very close to it</font>

370
00:27:59,020 --> 00:28:05,950
it's probably<font color="#CCCCCC"> exactly the same as what</font>

371
00:28:00,730 --> 00:28:08,530
we had in<font color="#E5E5E5"> propose so I think we talked</font>

372
00:28:05,950 --> 00:28:13,000
this morning you heard<font color="#E5E5E5"> about the m25 and</font>

373
00:28:08,530 --> 00:28:16,660
<font color="#CCCCCC">tf--idf just three coils</font><font color="#E5E5E5"> - so the those</font>

374
00:28:13,000 --> 00:28:20,680
<font color="#E5E5E5">are like the scoring the default scoring</font>

375
00:28:16,660 --> 00:28:25,480
function of regime<font color="#CCCCCC"> don t v-- comes in</font>

376
00:28:20,680 --> 00:28:28,810
with being 25 or so this<font color="#E5E5E5"> requires to</font>

377
00:28:25,480 --> 00:28:30,400
<font color="#CCCCCC">have access to the term</font><font color="#E5E5E5"> frequency as we</font>

378
00:28:28,810 --> 00:28:31,929
search for<font color="#E5E5E5"> when we match a document we</font>

379
00:28:30,400 --> 00:28:36,540
<font color="#CCCCCC">need to have</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the number of</font>

380
00:28:31,930 --> 00:28:39,630
<font color="#E5E5E5">time a term appears in the document and</font>

381
00:28:36,540 --> 00:28:42,909
it's nice<font color="#CCCCCC"> to a good locality for that so</font>

382
00:28:39,630 --> 00:28:45,910
we actually<font color="#CCCCCC"> interleave blocks of the</font>

383
00:28:42,910 --> 00:28:49,720
<font color="#E5E5E5">cages we don't block of</font><font color="#CCCCCC"> ten frequencies</font>

384
00:28:45,910 --> 00:28:52,720
<font color="#CCCCCC">so that</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> likely to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> it in in</font>

385
00:28:49,720 --> 00:28:57,370
you know in<font color="#E5E5E5"> a nice cash at</font><font color="#CCCCCC"> the moment</font>

386
00:28:52,720 --> 00:29:01,660
where we<font color="#CCCCCC"> are reading the as we are doing</font>

387
00:28:57,370 --> 00:29:05,199
so much as we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> running the query</font><font color="#CCCCCC"> so</font>

388
00:29:01,660 --> 00:29:07,180
we have one<font color="#CCCCCC"> clock of the cages</font><font color="#E5E5E5"> and then</font>

389
00:29:05,200 --> 00:29:11,740
one<font color="#E5E5E5"> block of</font><font color="#CCCCCC"> jump</font><font color="#E5E5E5"> frequency and so on so</font>

390
00:29:07,180 --> 00:29:12,130
forth<font color="#CCCCCC"> each book is representing 128</font>

391
00:29:11,740 --> 00:29:14,770
blocks

392
00:29:12,130 --> 00:29:17,440
so unfortunately posting is not<font color="#E5E5E5"> always</font>

393
00:29:14,770 --> 00:29:19,570
exactly a multiple of 128

394
00:29:17,440 --> 00:29:22,060
work through<font color="#E5E5E5"> the last one is using a</font>

395
00:29:19,570 --> 00:29:24,929
different compressing scheme which is

396
00:29:22,060 --> 00:29:24,929
<font color="#E5E5E5">not interesting</font>

397
00:29:25,900 --> 00:29:32,080
and so we also need to have<font color="#E5E5E5"> the</font>

398
00:29:29,380 --> 00:29:36,880
information of<font color="#CCCCCC"> how many bits are used</font><font color="#E5E5E5"> to</font>

399
00:29:32,080 --> 00:29:39,970
<font color="#CCCCCC">encode each block and we also would like</font>

400
00:29:36,880 --> 00:29:42,160
to<font color="#CCCCCC"> have some way to avoid the</font>

401
00:29:39,970 --> 00:29:46,000
compressing<font color="#E5E5E5"> this block</font><font color="#CCCCCC"> if we are running</font>

402
00:29:42,160 --> 00:29:47,830
<font color="#CCCCCC">in intersection</font><font color="#E5E5E5"> for instance maybe the</font>

403
00:29:46,000 --> 00:29:51,040
document is not in this broken<font color="#E5E5E5"> in that</font>

404
00:29:47,830 --> 00:29:52,500
case we would<font color="#E5E5E5"> like to entirely avoid the</font>

405
00:29:51,040 --> 00:29:54,790
compressing it so<font color="#CCCCCC"> for that we have</font>

406
00:29:52,500 --> 00:29:58,780
another structure on top<font color="#CCCCCC"> of that that</font>

407
00:29:54,790 --> 00:30:01,510
allows us<font color="#CCCCCC"> to precisely</font><font color="#E5E5E5"> skip and go</font><font color="#CCCCCC"> to</font>

408
00:29:58,780 --> 00:30:07,178
and<font color="#CCCCCC"> the compression is the block</font><font color="#E5E5E5"> that</font>

409
00:30:01,510 --> 00:30:13,330
might be interesting we<font color="#CCCCCC"> cannot talk</font>

410
00:30:07,179 --> 00:30:16,120
<font color="#E5E5E5">about something else now so I said in</font>

411
00:30:13,330 --> 00:30:18,850
the<font color="#CCCCCC"> beginning of the talk that we</font><font color="#E5E5E5"> wanted</font>

412
00:30:16,120 --> 00:30:22,830
to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to index an arbitrary large</font>

413
00:30:18,850 --> 00:30:25,719
amount of data<font color="#CCCCCC"> use about terabytes and</font>

414
00:30:22,830 --> 00:30:27,820
that's a big problem<font color="#CCCCCC"> because if we have</font>

415
00:30:25,720 --> 00:30:31,750
a<font color="#E5E5E5"> reduced amount of RAM how are we gonna</font>

416
00:30:27,820 --> 00:30:34,030
be able<font color="#E5E5E5"> to build like this nice data</font>

417
00:30:31,750 --> 00:30:36,340
structure on<font color="#E5E5E5"> disk we have another prime</font>

418
00:30:34,030 --> 00:30:39,129
which is<font color="#E5E5E5"> people might like create an</font>

419
00:30:36,340 --> 00:30:41,530
index and they want<font color="#E5E5E5"> to add new documents</font>

420
00:30:39,130 --> 00:30:43,059
we want something<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> dynamic</font><font color="#CCCCCC"> we</font>

421
00:30:41,530 --> 00:30:45,550
want to be able<font color="#E5E5E5"> to add</font><font color="#CCCCCC"> documents to an</font>

422
00:30:43,059 --> 00:30:47,678
existing index that's<font color="#CCCCCC"> another prime it</font>

423
00:30:45,550 --> 00:30:55,450
happens that the solution is the same

424
00:30:47,679 --> 00:30:58,300
for both<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this problem</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> just we find</font>

425
00:30:55,450 --> 00:31:01,360
the<font color="#E5E5E5"> idea of White Way it's difficult to</font>

426
00:30:58,300 --> 00:31:03,190
add new documents in an index so<font color="#E5E5E5"> data</font>

427
00:31:01,360 --> 00:31:05,350
structure<font color="#CCCCCC"> that I described to you</font><font color="#E5E5E5"> on</font>

428
00:31:03,190 --> 00:31:07,600
disk is extremely compact right

429
00:31:05,350 --> 00:31:11,500
everything is<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> are compressed</font>

430
00:31:07,600 --> 00:31:14,230
<font color="#E5E5E5">everything is laid out on on disk one</font>

431
00:31:11,500 --> 00:31:16,390
after<font color="#CCCCCC"> the other so it</font><font color="#E5E5E5"> really if you toss</font>

432
00:31:14,230 --> 00:31:17,710
a bookshelf<font color="#CCCCCC"> it looks like this and</font><font color="#E5E5E5"> if</font>

433
00:31:16,390 --> 00:31:21,610
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> in front of a bookshelf like</font>

434
00:31:17,710 --> 00:31:23,320
that and<font color="#CCCCCC"> somebody give you</font><font color="#E5E5E5"> a book and</font>

435
00:31:21,610 --> 00:31:25,510
tells you<font color="#E5E5E5"> to put that in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> library</font>

436
00:31:23,320 --> 00:31:28,750
you're<font color="#E5E5E5"> gonna throw you're gonna have to</font>

437
00:31:25,510 --> 00:31:30,070
move everything away<font color="#CCCCCC"> it's an iPad</font><font color="#E5E5E5"> what</font>

438
00:31:28,750 --> 00:31:32,050
you want<font color="#E5E5E5"> is to have something</font><font color="#CCCCCC"> that looks</font>

439
00:31:30,070 --> 00:31:34,120
<font color="#CCCCCC">like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> update your</font>

440
00:31:32,050 --> 00:31:36,430
<font color="#E5E5E5">bookshelf or all the time</font>

441
00:31:34,120 --> 00:31:38,379
so<font color="#CCCCCC"> Jenna is</font><font color="#E5E5E5"> speaking</font>

442
00:31:36,430 --> 00:31:44,140
<font color="#CCCCCC">there's a trade-off</font><font color="#E5E5E5"> between being</font>

443
00:31:38,380 --> 00:31:47,100
dynamic and<font color="#CCCCCC"> and and being compact there</font>

444
00:31:44,140 --> 00:31:49,420
is a nice<font color="#CCCCCC"> Creek that</font><font color="#E5E5E5"> exists in many</font>

445
00:31:47,100 --> 00:31:52,840
<font color="#E5E5E5">database it is called the Lord look at</font>

446
00:31:49,420 --> 00:31:55,330
<font color="#CCCCCC">Mick method the idea will be we're</font><font color="#E5E5E5"> gonna</font>

447
00:31:52,840 --> 00:32:00,129
have my<font color="#E5E5E5"> compact book Shrek</font>

448
00:31:55,330 --> 00:32:02,800
like that<font color="#E5E5E5"> but we are gonna</font><font color="#CCCCCC"> have many</font><font color="#E5E5E5"> of</font>

449
00:32:00,130 --> 00:32:06,850
them so the way it works<font color="#CCCCCC"> is the user</font>

450
00:32:02,800 --> 00:32:09,389
will<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> on CD will tell you</font><font color="#CCCCCC"> seen hey</font>

451
00:32:06,850 --> 00:32:14,350
<font color="#E5E5E5">consider I will give you a budget of</font>

452
00:32:09,390 --> 00:32:17,620
let's say<font color="#E5E5E5"> 300 megabytes and this 300</font>

453
00:32:14,350 --> 00:32:19,659
megabytes would be used<font color="#E5E5E5"> for the dynamic</font>

454
00:32:17,620 --> 00:32:24,790
bookshelf here<font color="#E5E5E5"> so there's gonna be</font><font color="#CCCCCC"> a big</font>

455
00:32:19,660 --> 00:32:29,050
bookshelf<font color="#E5E5E5"> and people will add books into</font>

456
00:32:24,790 --> 00:32:32,010
that until the bookshelf is<font color="#CCCCCC"> is full once</font>

457
00:32:29,050 --> 00:32:34,510
<font color="#E5E5E5">the bookshelf is full we</font><font color="#CCCCCC"> are gonna</font>

458
00:32:32,010 --> 00:32:37,270
transform it into a very compact would

459
00:32:34,510 --> 00:32:39,640
<font color="#CCCCCC">sell so in I'm gonna stop with</font><font color="#E5E5E5"> the media</font>

460
00:32:37,270 --> 00:32:42,460
but basically we we serialize our

461
00:32:39,640 --> 00:32:45,929
dynamic data structure<font color="#E5E5E5"> into the static</font>

462
00:32:42,460 --> 00:32:45,929
<font color="#E5E5E5">data structure that</font><font color="#CCCCCC"> I described before</font>

463
00:32:46,440 --> 00:32:55,000
<font color="#CCCCCC">and this piece of like</font><font color="#E5E5E5"> very compact</font>

464
00:32:52,420 --> 00:32:57,550
<font color="#CCCCCC">index</font><font color="#E5E5E5"> is called a segment so</font><font color="#CCCCCC"> that what</font>

465
00:32:55,000 --> 00:33:01,300
that<font color="#E5E5E5"> you probably heard in English a</font>

466
00:32:57,550 --> 00:33:04,780
data segment<font color="#E5E5E5"> and the Boston machine and</font>

467
00:33:01,300 --> 00:33:07,720
in 20 V there<font color="#E5E5E5"> is a strong architectural</font>

468
00:33:04,780 --> 00:33:10,928
choice a segment is basically an

469
00:33:07,720 --> 00:33:14,500
independent index so you<font color="#E5E5E5"> could literally</font>

470
00:33:10,929 --> 00:33:16,780
like<font color="#E5E5E5"> pick your segments and and copy it</font>

471
00:33:14,500 --> 00:33:18,970
into<font color="#E5E5E5"> another index and it will run</font>

472
00:33:16,780 --> 00:33:20,860
through<font color="#E5E5E5"> the same as long as the schema</font>

473
00:33:18,970 --> 00:33:25,570
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same that's</font><font color="#CCCCCC"> a very</font><font color="#E5E5E5"> interesting</font>

474
00:33:20,860 --> 00:33:28,750
property actually<font color="#E5E5E5"> so if we do that we</font>

475
00:33:25,570 --> 00:33:31,000
<font color="#E5E5E5">are going to end up</font><font color="#CCCCCC"> with a lot of</font><font color="#E5E5E5"> impact</font>

476
00:33:28,750 --> 00:33:33,730
<font color="#CCCCCC">segments and</font><font color="#E5E5E5"> maybe that's not optional</font>

477
00:33:31,000 --> 00:33:36,520
if we have a<font color="#CCCCCC"> one terabyte of data</font><font color="#E5E5E5"> that</font>

478
00:33:33,730 --> 00:33:38,559
would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a lot of small segments</font><font color="#E5E5E5"> and</font>

479
00:33:36,520 --> 00:33:41,230
when we do a search we<font color="#E5E5E5"> are going to have</font>

480
00:33:38,559 --> 00:33:46,540
to do as many lookups<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the dictionary</font>

481
00:33:41,230 --> 00:33:48,640
and<font color="#E5E5E5"> that's very inefficient</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so on</font>

482
00:33:46,540 --> 00:33:50,050
the<font color="#E5E5E5"> backbone we also have a process</font><font color="#CCCCCC"> that</font>

483
00:33:48,640 --> 00:33:53,500
may<font color="#CCCCCC"> show</font><font color="#E5E5E5"> segments to get</font>

484
00:33:50,050 --> 00:33:55,629
and you can actually control<font color="#E5E5E5"> you you can</font>

485
00:33:53,500 --> 00:33:58,960
define on your own as a user which is<font color="#CCCCCC"> a</font>

486
00:33:55,630 --> 00:34:02,230
like<font color="#E5E5E5"> strategy used to</font><font color="#CCCCCC"> merge this segment</font>

487
00:33:58,960 --> 00:34:04,150
but<font color="#E5E5E5"> it comes</font><font color="#CCCCCC"> with a default strategy</font>

488
00:34:02,230 --> 00:34:07,000
<font color="#E5E5E5">calls</font><font color="#CCCCCC"> are not much</font><font color="#E5E5E5"> policy and the</font>

489
00:34:04,150 --> 00:34:10,149
heuristic behind it is<font color="#CCCCCC"> just we try to</font>

490
00:34:07,000 --> 00:34:14,790
<font color="#E5E5E5">merge by default it's</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be eight</font>

491
00:34:10,149 --> 00:34:14,790
segments that have about the same size

492
00:34:16,139 --> 00:34:25,120
yeah so this technique is<font color="#E5E5E5"> also really</font>

493
00:34:21,790 --> 00:34:29,969
nice because<font color="#CCCCCC"> that means that we can do</font>

494
00:34:25,120 --> 00:34:34,389
<font color="#E5E5E5">mr. shredded indexing very very easily</font>

495
00:34:29,969 --> 00:34:36,668
<font color="#CCCCCC">220v</font><font color="#E5E5E5"> ask you how much data you give as a</font>

496
00:34:34,389 --> 00:34:39,639
<font color="#E5E5E5">budget and also I mean indexing thread</font>

497
00:34:36,668 --> 00:34:41,230
you<font color="#E5E5E5"> want to use and then when you open</font>

498
00:34:39,639 --> 00:34:42,759
<font color="#E5E5E5">the document what you are doing is that</font>

499
00:34:41,230 --> 00:34:46,060
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are paying</font><font color="#E5E5E5"> the document to document</font>

500
00:34:42,760 --> 00:34:50,740
<font color="#CCCCCC">queue and you in the</font><font color="#E5E5E5"> background and you</font>

501
00:34:46,060 --> 00:34:52,299
<font color="#E5E5E5">don't control it but says you're given</font>

502
00:34:50,739 --> 00:34:54,129
number of indexing threads that are

503
00:34:52,300 --> 00:34:57,910
consuming<font color="#CCCCCC"> his document queue and</font><font color="#E5E5E5"> that</font>

504
00:34:54,130 --> 00:34:58,560
<font color="#E5E5E5">are populating his dynamic</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> as I was</font>

505
00:34:57,910 --> 00:35:04,930
talking<font color="#CCCCCC"> about</font>

506
00:34:58,560 --> 00:35:06,630
and once<font color="#E5E5E5"> they reach their capacity then</font>

507
00:35:04,930 --> 00:35:09,759
they're gonna have<font color="#E5E5E5"> say as a signal</font>

508
00:35:06,630 --> 00:35:11,950
<font color="#CCCCCC">segmented like</font><font color="#E5E5E5"> step so the very compact</font>

509
00:35:09,760 --> 00:35:15,520
data structure<font color="#CCCCCC"> that we use in the</font><font color="#E5E5E5"> end</font>

510
00:35:11,950 --> 00:35:22,470
<font color="#E5E5E5">and some measuring thread will merge</font>

511
00:35:15,520 --> 00:35:27,400
those very transparently yes<font color="#E5E5E5"> thank you</font>

512
00:35:22,470 --> 00:35:33,370
so<font color="#E5E5E5"> there's a bunch of pros and cons to</font>

513
00:35:27,400 --> 00:35:40,120
this one<font color="#CCCCCC"> plan that is very evident when</font>

514
00:35:33,370 --> 00:35:43,440
use<font color="#CCCCCC"> 20v and assisted through for to some</font>

515
00:35:40,120 --> 00:35:46,060
<font color="#E5E5E5">extent is who</font><font color="#CCCCCC"> with machine is that you</font>

516
00:35:43,440 --> 00:35:47,890
when<font color="#E5E5E5"> you add the document</font><font color="#CCCCCC"> it's not</font>

517
00:35:46,060 --> 00:35:51,160
sociable<font color="#E5E5E5"> right away</font><font color="#CCCCCC"> so it's quite</font>

518
00:35:47,890 --> 00:35:56,310
puzzling for people who are using sequel

519
00:35:51,160 --> 00:35:59,500
database<font color="#CCCCCC"> because we decided to have our</font>

520
00:35:56,310 --> 00:36:01,680
<font color="#CCCCCC">segments to be independent</font><font color="#E5E5E5"> index</font><font color="#CCCCCC"> they do</font>

521
00:35:59,500 --> 00:36:05,190
not share<font color="#E5E5E5"> any dictionary</font><font color="#CCCCCC"> and that's</font>

522
00:36:01,680 --> 00:36:05,190
sometimes that<font color="#E5E5E5"> makes</font>

523
00:36:05,220 --> 00:36:11,339
like specific use a dose of<font color="#CCCCCC"> self</font>

524
00:36:07,990 --> 00:36:13,779
<font color="#E5E5E5">difficult not to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to to actually</font>

525
00:36:11,340 --> 00:36:17,380
match the result from the different

526
00:36:13,780 --> 00:36:21,280
<font color="#E5E5E5">segments very easily</font><font color="#CCCCCC"> yes</font>

527
00:36:17,380 --> 00:36:23,710
so it's<font color="#E5E5E5"> not one</font><font color="#CCCCCC"> dictionary I didn't</font><font color="#E5E5E5"> talk</font>

528
00:36:21,280 --> 00:36:25,570
<font color="#CCCCCC">about deletes and updates but those are</font>

529
00:36:23,710 --> 00:36:27,869
a natural<font color="#E5E5E5"> night nightmare it's very</font>

530
00:36:25,570 --> 00:36:27,869
complicated

531
00:36:31,740 --> 00:36:37,359
yes<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> pretty much all</font><font color="#CCCCCC"> I have on</font>

532
00:36:34,750 --> 00:36:40,960
this<font color="#CCCCCC"> flight</font><font color="#E5E5E5"> and then the pros who will</font>

533
00:36:37,359 --> 00:36:44,200
be the next<font color="#CCCCCC"> group which is actually the</font>

534
00:36:40,960 --> 00:36:45,490
<font color="#CCCCCC">excellence if you can batch stuff if you</font>

535
00:36:44,200 --> 00:36:48,669
don't have to commit all<font color="#E5E5E5"> the time you</font>

536
00:36:45,490 --> 00:36:51,819
can<font color="#CCCCCC"> we index a gigantic amount of data</font>

537
00:36:48,670 --> 00:36:55,090
so<font color="#CCCCCC"> sync on my laptop</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> Index Wikipedia</font>

538
00:36:51,820 --> 00:36:57,330
in I thought fit<font color="#CCCCCC"> IR s always</font><font color="#E5E5E5"> fit two or</font>

539
00:36:55,090 --> 00:37:01,030
three<font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the amount of</font>

540
00:36:57,330 --> 00:37:04,270
English Wikipedia<font color="#E5E5E5"> but such a the speed</font>

541
00:37:01,030 --> 00:37:08,109
<font color="#E5E5E5">we</font><font color="#CCCCCC"> are talking about that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> keep AJ is</font>

542
00:37:04,270 --> 00:37:10,770
like a tiny benchmark in<font color="#E5E5E5"> search it's not</font>

543
00:37:08,109 --> 00:37:10,770
a big data<font color="#E5E5E5"> set</font>

544
00:37:17,530 --> 00:37:24,700
yes so segments are independent<font color="#CCCCCC"> index so</font>

545
00:37:22,180 --> 00:37:27,368
you could decide<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> do your</font>

546
00:37:24,700 --> 00:37:30,098
<font color="#CCCCCC">indexing on Hadoop and just</font><font color="#E5E5E5"> copy the</font>

547
00:37:27,369 --> 00:37:31,960
fire of the signals in the same place

548
00:37:30,099 --> 00:37:33,940
and everything<font color="#E5E5E5"> would</font><font color="#CCCCCC"> work just the same</font>

549
00:37:31,960 --> 00:37:36,160
or you could decide<font color="#E5E5E5"> to do a distributed</font>

550
00:37:33,940 --> 00:37:38,560
search by sending the segment and

551
00:37:36,160 --> 00:37:43,569
dispatching them is we just copying

552
00:37:38,560 --> 00:37:46,990
<font color="#CCCCCC">files</font><font color="#E5E5E5"> it's very transparent and because</font>

553
00:37:43,570 --> 00:37:49,660
we write<font color="#CCCCCC"> fires and then we never touch</font>

554
00:37:46,990 --> 00:37:53,040
them again<font color="#E5E5E5"> we just write very large file</font>

555
00:37:49,660 --> 00:37:57,160
and and then<font color="#CCCCCC"> they</font><font color="#E5E5E5"> read only there is no</font>

556
00:37:53,040 --> 00:38:00,430
<font color="#CCCCCC">like problem of locks or anything widows</font>

557
00:37:57,160 --> 00:38:02,799
<font color="#E5E5E5">just like reads of file and nobody is</font>

558
00:38:00,430 --> 00:38:07,830
touching them so it simplifies<font color="#E5E5E5"> a lot of</font>

559
00:38:02,800 --> 00:38:07,830
my<font color="#E5E5E5"> work</font><font color="#CCCCCC"> I have a bunch of light there</font>

560
00:38:08,640 --> 00:38:17,560
let's keep them so that you we have a

561
00:38:11,140 --> 00:38:20,700
<font color="#CCCCCC">bit of time to to to</font><font color="#E5E5E5"> ask questions</font><font color="#CCCCCC"> to</font>

562
00:38:17,560 --> 00:38:20,700
you guys<font color="#CCCCCC"> of question</font>

563
00:38:53,060 --> 00:39:06,060
so yeah<font color="#E5E5E5"> so the question</font><font color="#CCCCCC"> is a is rust and</font>

564
00:39:03,770 --> 00:39:10,560
building a search engine<font color="#E5E5E5"> a good fit I</font>

565
00:39:06,060 --> 00:39:14,220
guess with<font color="#E5E5E5"> it especially</font><font color="#CCCCCC"> in contrast</font>

566
00:39:10,560 --> 00:39:15,000
<font color="#E5E5E5">with machinima and Java so I would say</font>

567
00:39:14,220 --> 00:39:20,359
yes

568
00:39:15,000 --> 00:39:23,580
so the main<font color="#CCCCCC"> benefits that</font><font color="#E5E5E5"> I get from</font>

569
00:39:20,359 --> 00:39:27,560
<font color="#E5E5E5">rust I guess compared to Java is first I</font>

570
00:39:23,580 --> 00:39:31,830
can access<font color="#E5E5E5"> seemed instruction so what I</font>

571
00:39:27,560 --> 00:39:33,750
have a lot of control of<font color="#E5E5E5"> I know when I</font>

572
00:39:31,830 --> 00:39:35,340
write code whether I'm gonna get static

573
00:39:33,750 --> 00:39:36,990
dispatch or dynamic dispatch

574
00:39:35,340 --> 00:39:43,080
<font color="#E5E5E5">that's something that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> extremely hard</font>

575
00:39:36,990 --> 00:39:47,339
in Java you never know what<font color="#CCCCCC"> happens also</font>

576
00:39:43,080 --> 00:39:50,460
<font color="#CCCCCC">all of</font><font color="#E5E5E5"> the things like</font><font color="#CCCCCC"> and my M up being</font>

577
00:39:47,340 --> 00:39:53,250
a nightmare in Java<font color="#CCCCCC"> it's something</font><font color="#E5E5E5"> that</font>

578
00:39:50,460 --> 00:39:55,050
I I<font color="#CCCCCC"> don't have any problem</font><font color="#E5E5E5"> about I don't</font>

579
00:39:53,250 --> 00:39:58,290
know if you everyone<font color="#E5E5E5"> knows what I'm</font>

580
00:39:55,050 --> 00:40:01,350
talking about but basically when you're

581
00:39:58,290 --> 00:40:03,300
working with<font color="#CCCCCC"> a thick memory in Java like</font>

582
00:40:01,350 --> 00:40:05,819
if you are<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> making a huge</font><font color="#CCCCCC"> amount of</font>

583
00:40:03,300 --> 00:40:10,890
data<font color="#E5E5E5"> and you have</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> little data that</font>

584
00:40:05,820 --> 00:40:13,230
is<font color="#E5E5E5"> on your hip</font><font color="#CCCCCC"> your data</font><font color="#E5E5E5"> will be</font>

585
00:40:10,890 --> 00:40:17,279
unmapped<font color="#E5E5E5"> only at the moment where the</font>

586
00:40:13,230 --> 00:40:18,930
<font color="#CCCCCC">object that is holding a map</font><font color="#E5E5E5"> thing is</font>

587
00:40:17,280 --> 00:40:22,040
<font color="#E5E5E5">garbage collected and garbage collection</font>

588
00:40:18,930 --> 00:40:27,118
happens only if your hip is actually

589
00:40:22,040 --> 00:40:29,670
like kind of full<font color="#E5E5E5"> that's I think that's</font>

590
00:40:27,119 --> 00:40:33,690
a that's<font color="#CCCCCC"> a big problem with</font><font color="#E5E5E5"> Java source</font>

591
00:40:29,670 --> 00:40:37,050
of some JVM<font color="#CCCCCC"> give you a non-official Java</font>

592
00:40:33,690 --> 00:40:40,410
<font color="#E5E5E5">API to a map stuff some people</font><font color="#CCCCCC"> just like</font>

593
00:40:37,050 --> 00:40:41,850
decide to use<font color="#CCCCCC"> Gina equal to do the</font><font color="#E5E5E5"> a map</font>

594
00:40:40,410 --> 00:40:44,399
well I never<font color="#E5E5E5"> have that kind of problem</font>

595
00:40:41,850 --> 00:40:48,650
with<font color="#E5E5E5"> a with rust everything I'm I'm</font>

596
00:40:44,400 --> 00:40:48,650
<font color="#E5E5E5">working with C or C++</font><font color="#CCCCCC"> speak</font>

597
00:40:51,060 --> 00:40:55,799
and when I started this project I didn't

598
00:40:54,000 --> 00:40:58,250
know rest at all<font color="#E5E5E5"> and then he started</font>

599
00:40:55,800 --> 00:41:03,140
talking<font color="#E5E5E5"> to me</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually lowest</font>

600
00:40:58,250 --> 00:41:06,060
which<font color="#E5E5E5"> is a bit stupid and credit so I</font>

601
00:41:03,140 --> 00:41:08,250
already knew she<font color="#E5E5E5"> prosperous and I had</font>

602
00:41:06,060 --> 00:41:10,620
done a lot of<font color="#E5E5E5"> travel as well</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> after a</font>

603
00:41:08,250 --> 00:41:12,600
long two weeks<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have to believe</font>

604
00:41:10,620 --> 00:41:15,509
<font color="#CCCCCC">me but I was more productive Universal</font>

605
00:41:12,600 --> 00:41:34,799
and and I<font color="#CCCCCC"> felt safer right synced</font><font color="#E5E5E5"> in</font>

606
00:41:15,510 --> 00:41:37,110
<font color="#E5E5E5">verse and I was in both Java and</font><font color="#CCCCCC"> C++ is</font>

607
00:41:34,800 --> 00:41:40,560
an English word<font color="#CCCCCC"> I often do that actually</font>

608
00:41:37,110 --> 00:41:44,730
I like<font color="#CCCCCC"> treating English</font><font color="#E5E5E5"> words that</font>

609
00:41:40,560 --> 00:41:47,970
<font color="#CCCCCC">nobody knew as a project</font><font color="#E5E5E5"> names is</font>

610
00:41:44,730 --> 00:41:50,850
actually not<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> at all for</font><font color="#E5E5E5"> SEO and yeah</font>

611
00:41:47,970 --> 00:41:51,750
<font color="#E5E5E5">people know Manuel everybody's happy</font>

612
00:41:50,850 --> 00:41:55,370
right

613
00:41:51,750 --> 00:41:59,490
so the<font color="#CCCCCC"> continued means at full gallop</font>

614
00:41:55,370 --> 00:42:01,830
hands<font color="#CCCCCC"> or horse and the a bruiser horse</font>

615
00:41:59,490 --> 00:42:04,430
myself<font color="#CCCCCC"> see that one of the best</font>

616
00:42:01,830 --> 00:42:04,430
achievement

617
00:42:11,560 --> 00:42:14,639
[Applause]

